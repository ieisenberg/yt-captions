[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "6762"
  },
  {
    "text": " ANA BELL: OK, so\nlet's get started.",
    "start": "6762",
    "end": "15190"
  },
  {
    "text": "Today's lecture, we're\ngoing to do a little bit of a recap of the last lecture.",
    "start": "15190",
    "end": "20230"
  },
  {
    "text": "We had begun talking\nabout binary numbers. And then, we're going to dive\ninto our second algorithm",
    "start": "20230",
    "end": "26400"
  },
  {
    "text": "of the class, the\napproximation method algorithm. So let's remember the\nmotivation we had for",
    "start": "26400",
    "end": "34460"
  },
  {
    "text": "even talking about\nbinary numbers and how numbers are\nrepresented in a computer in the first place,\nand the motivation",
    "start": "34460",
    "end": "40670"
  },
  {
    "text": "was this piece of code. So it's very simple, we\nhave an initial x is 0,",
    "start": "40670",
    "end": "46160"
  },
  {
    "text": "and then we have a\nloop that just adds 0.1 to itself 10 times.",
    "start": "46160",
    "end": "53400"
  },
  {
    "text": "And then, we printed\nwhether that sum equals 1. And what we saw was\nthat it was false.",
    "start": "53400",
    "end": "60960"
  },
  {
    "text": "Printing x equivalent\nto 1 was false. So then we printed what\nthe actual value of x",
    "start": "60960",
    "end": "66540"
  },
  {
    "text": "was after adding 0.1\nto itself 10 times, and we saw that that summation\nwas actually 0.9999999.",
    "start": "66540",
    "end": "74940"
  },
  {
    "text": "And, of course, to Python,\n0.99999 is not equal to 1. So that's why we\nhad printed false",
    "start": "74940",
    "end": "81720"
  },
  {
    "text": "for x equivalent to\n1, that expression. And so this is our\nmotivation, why in the world",
    "start": "81720",
    "end": "87710"
  },
  {
    "text": "does this happen in\nprogramming and Python, and something like this\ncould really screw us up",
    "start": "87710",
    "end": "93530"
  },
  {
    "text": "if we're not even able to\ncompare floating point numbers. So last lecture, we ended\nwith this piece of code.",
    "start": "93530",
    "end": "101180"
  },
  {
    "text": "It was a way for us to get\nthe binary representation",
    "start": "101180",
    "end": "106580"
  },
  {
    "text": "of a number in base 10. So given some number, we\nfollowed a really simple recipe, a really\nsimple algorithm",
    "start": "106580",
    "end": "113180"
  },
  {
    "text": "to convert that\nnumber into base 2. The stuff that's in boxes,\nlet's not worry about it for now",
    "start": "113180",
    "end": "120860"
  },
  {
    "text": "but let's look at just\nthis part right here. So the stuff that's in between\nthe two boxes, and this",
    "start": "120860",
    "end": "127000"
  },
  {
    "text": "is the part that does\nmost of the work for us, or all of the work even for us. It basically creates a\nstring, initially empty,",
    "start": "127000",
    "end": "135970"
  },
  {
    "text": "and the idea was\nthat we were going to prepend either 0\nor 1 to that string,",
    "start": "135970",
    "end": "143420"
  },
  {
    "text": "depending on whether the\nnumber we had was odd or even. So for a number like\n19, if we wanted",
    "start": "143420",
    "end": "149410"
  },
  {
    "text": "to convert 19 base 10 into base\n2, what the algorithm was doing",
    "start": "149410",
    "end": "155560"
  },
  {
    "text": "is over here in\nthe loop, it says while this num, whatever\nit is, initially, 19",
    "start": "155560",
    "end": "162340"
  },
  {
    "text": "is still greater than 0,\nlet's get the remainder when we divide the number by 2.",
    "start": "162340",
    "end": "168129"
  },
  {
    "text": "So that's what this\nnum%2 is doing, it's either getting a 0 or a 1. So the remainder when\nwe divide 19 by 2 is 1.",
    "start": "168130",
    "end": "178330"
  },
  {
    "text": "And we're going to\nprepend, so we're casting this one\ninteger to a string and prepending it to this\nresult, which is initially",
    "start": "178330",
    "end": "186400"
  },
  {
    "text": "empty. So that's what\nthis line is doing, result equals this thing here. And then, we're going to take\nour number and integer divided",
    "start": "186400",
    "end": "195000"
  },
  {
    "text": "by 2. So we're going to take the\nnumber 19 and divide it by 2. So that's going to\nbe 9.5, but we're",
    "start": "195000",
    "end": "201200"
  },
  {
    "text": "only interested in the\ninteger portion of it, so 9. And then, the loop\ndoes the check again,",
    "start": "201200",
    "end": "208160"
  },
  {
    "text": "is 9 still greater than 0? It is, so then,\nwe're going to say, what's the remainder\nwhen we divide 9 by 2?",
    "start": "208160",
    "end": "214820"
  },
  {
    "text": "It's another 1, so\nwe're going to prepend it, that remainder to the\nstring that we're building up.",
    "start": "214820",
    "end": "222350"
  },
  {
    "text": "And again, we're going to\ndivide this number by 2, so now we have 4.5\nwhen we only grab the integer portion of it, 4.",
    "start": "222350",
    "end": "229909"
  },
  {
    "text": "And again, we ask what\nis the remainder when we divide 4 by 2.",
    "start": "229910",
    "end": "235430"
  },
  {
    "text": "it's a 0, so we prepend\nthe 0 to this binary string",
    "start": "235430",
    "end": "241430"
  },
  {
    "text": "we're building up. Again, we divide\nit by 2, it's a 2. The remainder when we divide 2\nby 2 is 0, it's an even number.",
    "start": "241430",
    "end": "248990"
  },
  {
    "text": "Again, we divide\n2 by 2, it's a 1, and the remainder we get\nwhen we divide 1 by 2 is a 1.",
    "start": "248990",
    "end": "259398"
  },
  {
    "text": "And so this is the string\nthat we had eventually systematically, iteratively\nbuilt up with this loop here.",
    "start": "259399",
    "end": "267830"
  },
  {
    "text": "And num after we divide\nthis is going to be 0, and then we break\nout of the loop.",
    "start": "267830",
    "end": "275080"
  },
  {
    "text": "So the binary representation\nof 19 was 10011 base 2.",
    "start": "275080",
    "end": "280840"
  },
  {
    "text": "We just kept it as a string. The parts that are\nin red boxes is us",
    "start": "280840",
    "end": "288040"
  },
  {
    "text": "dealing with a negative number. So if the user wanted\nto convert negative 19",
    "start": "288040",
    "end": "294280"
  },
  {
    "text": "to a binary representation,\nthis if else up here, says is the number less than 0, if\nyes, let's set a negative flag",
    "start": "294280",
    "end": "303550"
  },
  {
    "text": "to true, and let's just\nassume the user gave us a positive number. So we convert that negative\n19 to the absolute value",
    "start": "303550",
    "end": "310360"
  },
  {
    "text": "of itself, positive 19. This code goes\nthrough as if the user",
    "start": "310360",
    "end": "315400"
  },
  {
    "text": "had given us a positive number. And then, at the end, we would\nget the same number as before,",
    "start": "315400",
    "end": "321650"
  },
  {
    "text": "except that we're going to\nprepend a negative sign. So the binary representation\nof negative 19",
    "start": "321650",
    "end": "329050"
  },
  {
    "text": "is just negative the same thing.  OK, so that was\nwhere we ended up,",
    "start": "329050",
    "end": "336100"
  },
  {
    "text": "we talked about these integers,\nbut now what about fractions? Integers seems really easy.",
    "start": "336100",
    "end": "342440"
  },
  {
    "text": "There's a really easy\nsimple procedure algorithm recipe for us to follow to\nget the binary representation.",
    "start": "342440",
    "end": "348650"
  },
  {
    "text": "But what about these fractions? Oh yeah, sorry. AUDIENCE: So how\ndoes the negative,",
    "start": "348650",
    "end": "354300"
  },
  {
    "text": "everything's going\nto be 0 or 1, so how does it read the negative?",
    "start": "354300",
    "end": "360060"
  },
  {
    "text": "ANA BELL: Oh, it\ndoesn't read it, we just pretend like we were\ngiven a positive number.",
    "start": "360060",
    "end": "365560"
  },
  {
    "text": "And then we just do the same\nprocess over and over again. AUDIENCE: OK, so the computer\ndoesn't know it's negative?",
    "start": "365560",
    "end": "371939"
  },
  {
    "text": "ANA BELL: I mean, for the\npurposes of the algorithm, it doesn't need to know because\nthe number will come out",
    "start": "371940",
    "end": "378389"
  },
  {
    "text": "the same. We just flag it as\nbeing a negative number. And then at the\nend, we say, hey,",
    "start": "378390",
    "end": "383862"
  },
  {
    "text": "we were actually given\na negative number. So let's just pop this negative\nsign right in front of it. AUDIENCE: OK. And then when we talk about\nthe powers that 2 is to,",
    "start": "383862",
    "end": "393629"
  },
  {
    "text": "are we going from left to right\ndescending powers or ascending powers?",
    "start": "393630",
    "end": "399000"
  },
  {
    "text": "ANA BELL: We are\nactually doing ascending when we're building up\nthe string because we're going right to left.",
    "start": "399000",
    "end": "404963"
  },
  {
    "text": "AUDIENCE: So right\nto left is ascending? ANA BELL: Yeah, exactly. So this is 2 to the 0, and\nthis is 2 to the 4, yeah.",
    "start": "404963",
    "end": "415400"
  },
  {
    "text": "So in terms of\nfractions, if we're thinking about what\nit means to talk about a fraction in\nhuman-readable base 10,",
    "start": "415400",
    "end": "422210"
  },
  {
    "text": "so numbers 0 through\n9, when we have 0.abc we're basically saying\nthat's a divided by 10,",
    "start": "422210",
    "end": "428480"
  },
  {
    "text": "plus b divided by 100, plus c\ndivided by 1,000, and so on. And in base 2, we're going to\nhave the same sort of thing",
    "start": "428480",
    "end": "435409"
  },
  {
    "text": "going on. If we're talking about a base\n2 representation of a number 0.abc, where now a, b, or c\nis just 0 or 1, instead of 0",
    "start": "435410",
    "end": "446420"
  },
  {
    "text": "through 9, it's going\nto be the same thing. So we would have a divided\nby 2, plus b divided by 4,",
    "start": "446420",
    "end": "452150"
  },
  {
    "text": "plus c divided by 8, and so on. So now we're dealing with powers\nof 2 instead of powers of 10",
    "start": "452150",
    "end": "458120"
  },
  {
    "text": "because our base is\nnow 2 instead of 10. So that means the binary\nrepresentation of a decimal",
    "start": "458120",
    "end": "465090"
  },
  {
    "text": "fraction basically means can we\nfind some sort of combination of these values, 0.5 times\na 01, plus 0.25 times a 01,",
    "start": "465090",
    "end": "474210"
  },
  {
    "text": "plus 0.125 times 01,\nand so on and so on. So these are all\nthe powers of 2.",
    "start": "474210",
    "end": "480370"
  },
  {
    "text": "So I'll give you\nthe recipe for how we can actually find the\nrepresentation of a fraction.",
    "start": "480370",
    "end": "487039"
  },
  {
    "text": "And this is not something\nthat we expect you to come up, just like the recipe for\nthis is not something we expect you to come up with.",
    "start": "487040",
    "end": "493250"
  },
  {
    "text": "But given the recipe, you should\nbe able to intuitively figure out what is the code that\nactually performs this action",
    "start": "493250",
    "end": "502420"
  },
  {
    "text": "that does this recipe. So the idea to convert a\ndecimal fraction in base 10",
    "start": "502420",
    "end": "515969"
  },
  {
    "text": "to a binary fraction in\nbase 2 is as follows. So let's look at the decimal\nnumber 3 divided by 8 just",
    "start": "515970",
    "end": "523860"
  },
  {
    "text": "as an example. So that's 0.375, but\nwe know it's 3 over 8.",
    "start": "523860",
    "end": "529110"
  },
  {
    "text": "In base 10, so using\nnumbers 0 through 9,",
    "start": "529110",
    "end": "535860"
  },
  {
    "text": "we end up saying it's 3\nover 10, plus 7 over 100, plus 5 over 1,000,\nthat's just base 10.",
    "start": "535860",
    "end": "541950"
  },
  {
    "text": "But we need to\ncome up with a way to convert this into base\n2, and so the trick here",
    "start": "541950",
    "end": "547170"
  },
  {
    "text": "is to basically say what is\nthe biggest multiple of 2",
    "start": "547170",
    "end": "552959"
  },
  {
    "text": "that I can multiply my number,\nmy decimal number with such",
    "start": "552960",
    "end": "558555"
  },
  {
    "text": "that I end up getting a\nwhole number, an integer? That's sort of the trick\nto this whole thing,",
    "start": "558555",
    "end": "565420"
  },
  {
    "text": "can I multiply my 0.375\nor whatever fraction I'm interested in\nchanging to base 2",
    "start": "565420",
    "end": "573220"
  },
  {
    "text": "by some power of 2 big\nenough such that I'm going to get a whole number\nout of the multiplication?",
    "start": "573220",
    "end": "580300"
  },
  {
    "text": "And it has to be a power of\n2 because we're converting it to binary, 0s and 1s.",
    "start": "580300",
    "end": "585650"
  },
  {
    "text": "So in this simple example,\n0.375 is 3 divided by 8. So that means that the\nsmallest power of 2",
    "start": "585650",
    "end": "594310"
  },
  {
    "text": "I can multiply 3 over 8 by\nto give me a whole number is 8, that's 2 to\nthe power of 3.",
    "start": "594310",
    "end": "601269"
  },
  {
    "text": "So if I multiply 0.375\nby 8, 3 over 8, times 8",
    "start": "601270",
    "end": "607090"
  },
  {
    "text": "gives me 3 in base 10. And now, this whole number I\nknow how to convert to binary.",
    "start": "607090",
    "end": "614290"
  },
  {
    "text": "I have a recipe. We've done it on the board here. We have the code on\nthe previous slide.",
    "start": "614290",
    "end": "619400"
  },
  {
    "text": "So all we have to do now\nis convert the number 3 to binary, which\nis just 11, base 2.",
    "start": "619400",
    "end": "629220"
  },
  {
    "text": "But this 11 is a\nrepresentation of the number 3. So in order to\nget back to 0.375,",
    "start": "629220",
    "end": "635639"
  },
  {
    "text": "I need to divide my 3\nby 2 to the power of 3. So I need to divide my 11\nby 2 to the power of 3.",
    "start": "635640",
    "end": "644660"
  },
  {
    "text": "And in binary, dividing\nby some power of 2 just means shifting\nthe decimal point over,",
    "start": "644660",
    "end": "651560"
  },
  {
    "text": "just like in base 10,\ndividing by 10 means shifting the decimal point over. So if number 3 is 11, and\nI multiplied by 2 to the 3",
    "start": "651560",
    "end": "661220"
  },
  {
    "text": "to get this value, to\ndivide by 2 to the 3, I just need to move\nthe decimal point from just after the 11, over\n1, 2, and then add another 0.",
    "start": "661220",
    "end": "670640"
  },
  {
    "text": "So the representation\nof 0.375 becomes 0.011,",
    "start": "670640",
    "end": "676880"
  },
  {
    "text": "I just shifted this\ndecimal point over by 3 because now we're\ndealing in base 2. ",
    "start": "676880",
    "end": "684030"
  },
  {
    "text": "OK, so that's the system. That's the recipe for getting\nthis binary representation out",
    "start": "684030",
    "end": "691230"
  },
  {
    "text": "of a decimal number. But there's a problem, this\nis all relying on the fact",
    "start": "691230",
    "end": "696579"
  },
  {
    "text": "that I can find this\nmagical power of 2, that if it's big enough, I\ncan find such a power of 2",
    "start": "696580",
    "end": "704500"
  },
  {
    "text": "that when I multiply it\nwith my decimal number, I get a whole number out of it. And that's not always the\ncase, sometimes that power of 2",
    "start": "704500",
    "end": "712269"
  },
  {
    "text": "is going to be\nreally, really big, or it might not even exist.",
    "start": "712270",
    "end": "717700"
  },
  {
    "text": "And so if it's really big,\nor if it doesn't exist, that's where we run\ninto problems as we're",
    "start": "717700",
    "end": "722830"
  },
  {
    "text": "going to see in a little bit. So this is all\nrelying on the fact that I can find this power of 2.",
    "start": "722830",
    "end": "728380"
  },
  {
    "text": "So here's the code to\nactually do this recipe that I had on the previous\nslide, finding the power of 2,",
    "start": "728380",
    "end": "734920"
  },
  {
    "text": "doing the conversion, and then\nshifting the decimal point over. So I'm going to do a quick\noverview of the pieces,",
    "start": "734920",
    "end": "740650"
  },
  {
    "text": "and then we can run\nthe Python Tutor just to show you exactly step\nby step what's going on. So let's say I want to\ndo 0.625 and convert that",
    "start": "740650",
    "end": "749320"
  },
  {
    "text": "to a power of 2. So I've got my x\ninitialized up there. This bit here, so\nthis big box here,",
    "start": "749320",
    "end": "756660"
  },
  {
    "text": "is the part that finds this\nmagical power of 2 for me. It's just a loop that keeps\nincrementing the p, the power,",
    "start": "756660",
    "end": "766020"
  },
  {
    "text": "such that 2 to the power\nof p multiplied by x, this %1 just gives me the\ndecimal bit out of that",
    "start": "766020",
    "end": "774270"
  },
  {
    "text": "multiplication is 0. So I'm going to keep\nmultiplying 2 to some power of p",
    "start": "774270",
    "end": "779950"
  },
  {
    "text": "by x as long as I still have\na decimal piece to my number.",
    "start": "779950",
    "end": "786850"
  },
  {
    "text": "As soon as this %1 becomes 0\nthat means that the number I end up with is some number .0.",
    "start": "786850",
    "end": "794500"
  },
  {
    "text": "There is no more\ndecimal part to it. At that point, I\nbreak out of the loop",
    "start": "794500",
    "end": "799639"
  },
  {
    "text": "and I found my power p. This is going to be\nthe integer, so I'm",
    "start": "799640",
    "end": "806970"
  },
  {
    "text": "multiplying x by\nthat special power, by 2 to the power of\nthat special power.",
    "start": "806970",
    "end": "814240"
  },
  {
    "text": "And now, I have this number,\nso on the previous slide, it's the number 3 in base 10. And then, this box here is\nexactly the same as two slides",
    "start": "814240",
    "end": "823770"
  },
  {
    "text": "ago, it's this procedure here. It's taking my number,\nwhatever it may be, and getting the binary\nrepresentation of it.",
    "start": "823770",
    "end": "833019"
  },
  {
    "text": "And after that, we\nneed to figure out how many spaces to move\nthe decimal point backward.",
    "start": "833020",
    "end": "838620"
  },
  {
    "text": "So what is the power of p we\nmultiplied that number by, and now we need to work our\nway backward and say, well,",
    "start": "838620",
    "end": "844779"
  },
  {
    "text": "that dot is here let me\nmove the dot back p steps. And that's what this\nis doing, so it's",
    "start": "844780",
    "end": "851850"
  },
  {
    "text": "iterating through p minus\nhowever long this thing is,",
    "start": "851850",
    "end": "857430"
  },
  {
    "text": "to pad the front with 0s. Because sometimes this is going\nto be a really small number,",
    "start": "857430",
    "end": "863530"
  },
  {
    "text": "so I need to add some leading 0s\nbefore I put my decimal point. And then I put my\ndecimal point and that's",
    "start": "863530",
    "end": "869670"
  },
  {
    "text": "all this line is doing,\nand then I print my result.",
    "start": "869670",
    "end": "874970"
  },
  {
    "text": "So Python Tutor. ",
    "start": "874970",
    "end": "883870"
  },
  {
    "text": "All right, so step through. So this is 0.625 just\nlike in the slides. P is initially 0,\nso now this loop",
    "start": "883870",
    "end": "891190"
  },
  {
    "text": "is just incrementing\np one by one to find the point where\nI have a remainder of 0.",
    "start": "891190",
    "end": "899589"
  },
  {
    "text": "So here, I'm actually also\nprinting the remainder. So here we still have\na non-0 remainder.",
    "start": "899590",
    "end": "905110"
  },
  {
    "text": "So it's 0.625 as a remainder,\n0.25 as a remainder, 0.5 as a remainder.",
    "start": "905110",
    "end": "910610"
  },
  {
    "text": "And then at some point,\nI had multiplied it by 2 to the power of 3 because p\nis 3, and I had a 0 remainder.",
    "start": "910610",
    "end": "917870"
  },
  {
    "text": "So now I've broken\nout of that loop and I know num is equal to 5. I multiplied by 2 to the power\nof 3, times 0.625 to give me 5.",
    "start": "917870",
    "end": "928410"
  },
  {
    "text": "So now I need to\nconvert num, which is 5, using this process\nwe did here, into binary.",
    "start": "928410",
    "end": "935720"
  },
  {
    "text": "That's what this code is\ndoing, and this is exactly this process we had here. So I'm creating\nthis result string",
    "start": "935720",
    "end": "942170"
  },
  {
    "text": "and then prepending a 0\nor 1 whether the number is divisible by 2 or not.",
    "start": "942170",
    "end": "949630"
  },
  {
    "text": "So the number 5\nin binary is 101.",
    "start": "949630",
    "end": "955030"
  },
  {
    "text": "So that means I have 101. as my binary\nrepresentation of 5.",
    "start": "955030",
    "end": "960340"
  },
  {
    "text": "And now the code is going to\ngo through this loop, which means it's going to move the\ndecimal point to the left three",
    "start": "960340",
    "end": "967330"
  },
  {
    "text": "slots because I have to\nmultiply by 2 to the power of 3 to get the 5.",
    "start": "967330",
    "end": "974149"
  },
  {
    "text": "So you can see it's going to\ngo loop through three slots.",
    "start": "974150",
    "end": "979760"
  },
  {
    "text": "So here it is, it\nmade the 0.101. And then sorry, this bit,\nwhich I skipped over,",
    "start": "979760",
    "end": "985670"
  },
  {
    "text": "applies the dot, so it puts\nthe dot in front of it. And then, the last step is to\njust print the representation.",
    "start": "985670",
    "end": "992700"
  },
  {
    "text": "So the binary representation\nof 0.625 is 0.101.",
    "start": "992700",
    "end": "1001760"
  },
  {
    "text": "So here is the code,\nand we can run it.",
    "start": "1001760",
    "end": "1009680"
  },
  {
    "text": " So 0.5, the representation\nis 0.1, 0.625,",
    "start": "1009680",
    "end": "1018790"
  },
  {
    "text": "which is what we had just done,\nthe representation is 0.101. And we can play around with\na bunch of these values.",
    "start": "1018790",
    "end": "1024949"
  },
  {
    "text": "But then when we do\nsomething like 0.1, what is the representation\nof 0.1 going to be?",
    "start": "1024950",
    "end": "1031672"
  },
  {
    "text": "Because now we can use this\ncode to get the representation of whatever decimal we'd like. 0.1 was this\ntroublesome decimal,",
    "start": "1031672",
    "end": "1038390"
  },
  {
    "text": "so let's see exactly\nwhat happened. Well, it had to do a\nwhole lot of divisions,",
    "start": "1038390",
    "end": "1045410"
  },
  {
    "text": "it had to test a whole\nbunch of powers of 2 before it actually\ngot to a whole number.",
    "start": "1045410",
    "end": "1052610"
  },
  {
    "text": "In fact, about 50 of them. And we know that because there's\nabout 50 of these 0s and 1s",
    "start": "1052610",
    "end": "1058220"
  },
  {
    "text": "here. So it was approximately\n2 to the power of 50 that it had to multiply\n0.1 by before it",
    "start": "1058220",
    "end": "1063679"
  },
  {
    "text": "got to a whole number. ",
    "start": "1063680",
    "end": "1072580"
  },
  {
    "text": "So what that means for\nus is a number that's kind of a linear\ncombination of powers of 2",
    "start": "1072580",
    "end": "1081600"
  },
  {
    "text": "is really easy and\nfast to compute, something like this one here,\n1 times 2 to the negative 3",
    "start": "1081600",
    "end": "1089520"
  },
  {
    "text": "is 0.001. But something like\n0.1, which isn't as easy to see what the\nlinear combination of all",
    "start": "1089520",
    "end": "1097620"
  },
  {
    "text": "these powers of 2 are, is\nnot so easy to compute. And in fact, we had to use\nour program to figure out",
    "start": "1097620",
    "end": "1103860"
  },
  {
    "text": "exactly what it is. And for us, it was\nabout 50 of these digits",
    "start": "1103860",
    "end": "1109120"
  },
  {
    "text": "long, which was pretty long. And some of these numbers\ncould be even longer, potentially infinite.",
    "start": "1109120",
    "end": "1116380"
  },
  {
    "text": "So the point here is that\neverything in computer memory is represented in terms\nof bits, 0s, and 1s.",
    "start": "1116380",
    "end": "1123840"
  },
  {
    "text": "The reason we went through\nthis whole computation is because there are some\nnumbers that are just",
    "start": "1123840",
    "end": "1129630"
  },
  {
    "text": "going to be way too big to fit\ninside the computer hardware,",
    "start": "1129630",
    "end": "1135060"
  },
  {
    "text": "inside these representations. So for integers, it's\nstraightforward to deal with. We had a really fast way\nto compute the base 2",
    "start": "1135060",
    "end": "1144210"
  },
  {
    "text": "representation, but for\nfractions, it's a lot harder, and those numbers can\nbe really, really big.",
    "start": "1144210",
    "end": "1151080"
  },
  {
    "text": "So now how are these\nnumbers actually represented inside computer memory? So they're actually being\nrepresented in two pieces.",
    "start": "1151080",
    "end": "1158770"
  },
  {
    "text": "One piece is a\nsignificant digit, and the other piece\nis the power of 2.",
    "start": "1158770",
    "end": "1167190"
  },
  {
    "text": "So if we had the\nrepresentation 1, 1 inside computer memory,\nbasically the significant digit",
    "start": "1167190",
    "end": "1175680"
  },
  {
    "text": "is 1, and the power of 2 is 1. So that means we're going\nto take this one dot",
    "start": "1175680",
    "end": "1180930"
  },
  {
    "text": "and give it the power of 2. So we're going to\nadd a 0 after it. So this is the binary\n2 representation",
    "start": "1180930",
    "end": "1187110"
  },
  {
    "text": "because we basically just move\nthe dot from here to here, and then the number\n1, 0 in base 2 is 2.0.",
    "start": "1187110",
    "end": "1194167"
  },
  {
    "text": "That's what we have\non the first line. 1, negative 1,\nthat representation means I'm going to take\nthe significant digit 1,",
    "start": "1194167",
    "end": "1201600"
  },
  {
    "text": "and the power of\n2 is negative 1, so I'm going to take\nthis decimal point and move it to the left 1.",
    "start": "1201600",
    "end": "1207360"
  },
  {
    "text": "So this is going\nto be 0.1, that's this, number 0.1, which is 0.5.",
    "start": "1207360",
    "end": "1216170"
  },
  {
    "text": "This is base 2, this is base 10. And just to bring\nthe point home, 125 is going to be 125\nas a significant digit,",
    "start": "1216170",
    "end": "1229730"
  },
  {
    "text": "and 2 to the negative 2,\nhow is this going to work? Well, we're going\nto take the 125",
    "start": "1229730",
    "end": "1235549"
  },
  {
    "text": "and convert it to a power of 2. So it's what is\nthis, I'm not going to remember what it is, 1111101,\nthis is what 125 is in base 2.",
    "start": "1235550",
    "end": "1249510"
  },
  {
    "text": "But the exponent here\ntells me it's -2. So instead of\nputting the dot here.",
    "start": "1249510",
    "end": "1256270"
  },
  {
    "text": "I'm going to move\nit one, two over. So this is the actual number\nI'm representing in memory. And now I can just convert\nthe two pieces separately.",
    "start": "1256270",
    "end": "1264399"
  },
  {
    "text": "So this is going to be 31.25.",
    "start": "1264400",
    "end": "1271310"
  },
  {
    "text": "OK, so this is how\ncomputers actually represent numbers inside memory.",
    "start": "1271310",
    "end": "1277140"
  },
  {
    "text": "And we call this\nthe object type, which is decimal or\nreal number float",
    "start": "1277140",
    "end": "1282660"
  },
  {
    "text": "because this decimal point\nkind of floats around. AUDIENCE: Is it 5 or 31.25\nper number in base 10?",
    "start": "1282660",
    "end": "1292909"
  },
  {
    "text": "ANA BELL: Base 10 is\n31.25, and 125 is how it's represented inside memory.",
    "start": "1292910",
    "end": "1299100"
  },
  {
    "text": "So it's a base 10 sort of thing. And then what is the power of 2. ",
    "start": "1299100",
    "end": "1311300"
  },
  {
    "text": "So there's a couple\nconversions being done here. We're representing the 125 is\nbase 10, and how much we need",
    "start": "1311300",
    "end": "1319340"
  },
  {
    "text": "to move the decimal\npoint, but first we need to make the\nconversion of 125 to binary, which is\nthis long thing here,",
    "start": "1319340",
    "end": "1325220"
  },
  {
    "text": "not counting this decimal point. The negative 2 tells us we need\nto move the decimal point over,",
    "start": "1325220",
    "end": "1330260"
  },
  {
    "text": "and then we have the actual\nnumber we're trying to store. And the reason\nwe're doing this is because we're mostly\njust storing numbers",
    "start": "1330260",
    "end": "1337430"
  },
  {
    "text": "as whole numbers\ninside the memory. We're not storing fractions.",
    "start": "1337430",
    "end": "1342640"
  },
  {
    "text": "AUDIENCE: Yeah, I'm\njust a little confused because you went\nto all that trouble to convert the decimal to--",
    "start": "1342640",
    "end": "1349130"
  },
  {
    "text": "oh, that was for fractions. ANA BELL: That\nwas for fractions. Exactly, yeah. ",
    "start": "1349130",
    "end": "1356140"
  },
  {
    "text": "OK, so in the end, we did\nall that because we're trying to figure\nout the error, why",
    "start": "1356140",
    "end": "1362889"
  },
  {
    "text": "do we get this error\ninside our programs? Well, in the end, it's because\ncomputers have a finite number",
    "start": "1362890",
    "end": "1370320"
  },
  {
    "text": "of bits to store data. Most modern computers maybe\nhave 32, maybe 64 bits",
    "start": "1370320",
    "end": "1376680"
  },
  {
    "text": "to represent significant digits. So if we have 32\nslots in order to put",
    "start": "1376680",
    "end": "1383820"
  },
  {
    "text": "these significant digits,\nif our number base 2 representation was\n50 digits long,",
    "start": "1383820",
    "end": "1390659"
  },
  {
    "text": "then we're going\nto truncate at 32. We can't store those extra bits.",
    "start": "1390660",
    "end": "1396240"
  },
  {
    "text": "And so a number like\n0.1 ends up actually being an approximation in\nbase 2 inside computer memory.",
    "start": "1396240",
    "end": "1402690"
  },
  {
    "text": "We're not able to store that\nnumber exactly perfectly. So it becomes an approximation.",
    "start": "1402690",
    "end": "1409019"
  },
  {
    "text": "And the approximation\nactually ends up being at the 32nd bit, that\neither will be 0 or 1 depending",
    "start": "1409020",
    "end": "1415080"
  },
  {
    "text": "on how we decide to truncate. And so the error is actually\n2 to the negative 32,",
    "start": "1415080",
    "end": "1422520"
  },
  {
    "text": "which is on the\norder of 2 times 10 to the negative 10,\nwhich seems pretty small.",
    "start": "1422520",
    "end": "1428290"
  },
  {
    "text": "It's a very small\nerror but we just saw that that error accumulates\nreally, really quickly.",
    "start": "1428290",
    "end": "1434620"
  },
  {
    "text": "So while 0.1 has an error at\nthe 2 to the negative 32 slot,",
    "start": "1434620",
    "end": "1439870"
  },
  {
    "text": "if we take that error and we\njust kind of accumulate it over 10 increments, as\nwe had this loop that",
    "start": "1439870",
    "end": "1447279"
  },
  {
    "text": "went through 10 times, we\nsee that that error ends up becoming a big problem.",
    "start": "1447280",
    "end": "1452980"
  },
  {
    "text": "We see that it actually at the\nnegative 16th slot or something like that, it starts to\nround to the wrong thing.",
    "start": "1452980",
    "end": "1461630"
  },
  {
    "text": "And so we see things like\nthis, we expect it to be 1, but it's not 1.",
    "start": "1461630",
    "end": "1467110"
  },
  {
    "text": " OK, so the moral of the\nstory is we don't want to use",
    "start": "1467110",
    "end": "1473820"
  },
  {
    "text": "equivalents, the equivalent\noperator, the == operator, when we're comparing floats.",
    "start": "1473820",
    "end": "1481529"
  },
  {
    "text": "Because of errors like this,\nthe errors can accumulate and then we start\ngetting the wrong answer,",
    "start": "1481530",
    "end": "1486550"
  },
  {
    "text": "and then your programs\nend up not doing what you expect them to do. So we always want to test\nwhether some float is",
    "start": "1486550",
    "end": "1493620"
  },
  {
    "text": "within some epsilon\nof another float, and so that brings us to\nan approximation method.",
    "start": "1493620",
    "end": "1500019"
  },
  {
    "text": "Last lecture, we saw the\nguess-and-check method as a really simple algorithm\nfor solving problems. We have a set number of\nsolutions that we can check,",
    "start": "1500020",
    "end": "1507910"
  },
  {
    "text": "and then we check each one by\none, and then at some point, we either find the\nsolution, or we've checked all that\nwe can check and we",
    "start": "1507910",
    "end": "1514630"
  },
  {
    "text": "haven't found the solution. It's usually an\ninteger what were the things that we're checking\nbut as long as you have",
    "start": "1514630",
    "end": "1521290"
  },
  {
    "text": "some finite set of values\nyou can check for a solution through, guess-and-check\nis totally applicable.",
    "start": "1521290",
    "end": "1529540"
  },
  {
    "text": "But the problem is it's\na little bit limiting, it doesn't give us an\nactual approximation",
    "start": "1529540",
    "end": "1534580"
  },
  {
    "text": "to the square root. If you remember the code we\nwrote last time, it didn't actually say I'm approximating\nthe square root of 5",
    "start": "1534580",
    "end": "1542680"
  },
  {
    "text": "to be 1.4 something or whatever\nit is, or 2 point something,",
    "start": "1542680",
    "end": "1548170"
  },
  {
    "text": "it was just able to tell me the\nsquare root of a perfect square or that the number you gave\nme is not a perfect square",
    "start": "1548170",
    "end": "1555130"
  },
  {
    "text": "and so it's a really\nlimiting algorithm. But the approximation\nmethod, the one we're going to\nsee today actually",
    "start": "1555130",
    "end": "1560260"
  },
  {
    "text": "is going to be able to\ngive us an approximation to the square root\nof any number. So it's better than\nguess-and-check",
    "start": "1560260",
    "end": "1566919"
  },
  {
    "text": "because we don't just want\nthe correct answer or nothing. It's not an all-or-nothing\nkind of situation,",
    "start": "1566920",
    "end": "1572740"
  },
  {
    "text": "it's that we can approximate\nthe answer to some degree.",
    "start": "1572740",
    "end": "1578170"
  },
  {
    "text": "So we're going to\nuse guess-and-check when the exact answer that we\nwant might not be accessible.",
    "start": "1578170",
    "end": "1583800"
  },
  {
    "text": "We need some way to find an\nanswer that's just good enough. And approximation methods\nwill not always, and not",
    "start": "1583800",
    "end": "1591299"
  },
  {
    "text": "usually, actually,\nmost of the time will not give us\nthe right answer. They'll usually give\nus an approximation",
    "start": "1591300",
    "end": "1597270"
  },
  {
    "text": "that's good enough. And approximation methods,\nthey came about because",
    "start": "1597270",
    "end": "1602580"
  },
  {
    "text": "of the exhaustive\nenumeration limitation. We're not able to test\nall the possible values",
    "start": "1602580",
    "end": "1607980"
  },
  {
    "text": "to find the exact\nsquare root of a number because those values\nare all infinite.",
    "start": "1607980",
    "end": "1613029"
  },
  {
    "text": "So floating points\ncome into play here. The whole thing\nwe've been talking about at the beginning of\nthis lecture and last time,",
    "start": "1613030",
    "end": "1622240"
  },
  {
    "text": "floating points come into\nplay here because they're very important to this method. Now that we're\ncomparing floats we're",
    "start": "1622240",
    "end": "1629857"
  },
  {
    "text": "going to have to be careful\nabout how we actually do the comparison. So how can we approximate\nthe square root?",
    "start": "1629858",
    "end": "1636000"
  },
  {
    "text": "Well, instead of looking\nat just whole numbers and saying whether we found\nthe root or not, what we're",
    "start": "1636000",
    "end": "1641510"
  },
  {
    "text": "going to do is have\nsmaller increments. So no longer are we doing\njust integer guess-and-check,",
    "start": "1641510",
    "end": "1647930"
  },
  {
    "text": "we can do 0.1 0.2, 0.3, 0.4, and\nso on, until we get to a guess",
    "start": "1647930",
    "end": "1654290"
  },
  {
    "text": "that's close enough to x. So we say that 2.1 or\nwhatever is good enough",
    "start": "1654290",
    "end": "1660050"
  },
  {
    "text": "to the square root of 5. What does it mean\nto be good enough?",
    "start": "1660050",
    "end": "1665130"
  },
  {
    "text": "Suppose we wanted to\nfind this approximation to the square root, the\nguess-and-check was not",
    "start": "1665130",
    "end": "1670260"
  },
  {
    "text": "able to do this for us but\nthe approximation method can. So what we're asking\nfor can we find",
    "start": "1670260",
    "end": "1676559"
  },
  {
    "text": "a root such that that\nroot, times that root, times itself is equal to x?",
    "start": "1676560",
    "end": "1683123"
  },
  {
    "text": "And we're going to do\nthis such that we have a good enough approximation.",
    "start": "1683124",
    "end": "1688559"
  },
  {
    "text": "So that means that root\nthat we're going to find, minus x is going to be\nless than some epsilon,",
    "start": "1688560",
    "end": "1696799"
  },
  {
    "text": "or the absolute value\nof that subtraction is going to be\nless than epsilon.",
    "start": "1696800",
    "end": "1701960"
  },
  {
    "text": "So where we did\nincremental step-by-step, we're going to go through\nas long as we are within",
    "start": "1701960",
    "end": "1708230"
  },
  {
    "text": "or until we are within\nsome epsilon of x. So the algorithm\nwill be as follows,",
    "start": "1708230",
    "end": "1714875"
  },
  {
    "text": "we're going to\nstart with a guess that we know is too small. So for the square root of a\nnumber, let's start with 0.",
    "start": "1714875",
    "end": "1720420"
  },
  {
    "text": "And then we're going\nto increment it by a really small value. With guess-and-check, we\nincremented it by integers, with this particular method\nwe can increment it by 0.5s",
    "start": "1720420",
    "end": "1728630"
  },
  {
    "text": "or 0.1s or 0.0001,\nwhatever we'd like. That new increment\ngives us a new guess.",
    "start": "1728630",
    "end": "1735960"
  },
  {
    "text": "We're going to check whether\nthis new guess is now close enough to x. If it is, we're good,\nand if it's not,",
    "start": "1735960",
    "end": "1741442"
  },
  {
    "text": "we're just going to keep\nincrementing the guess until we get close enough\nto the actual answer. ",
    "start": "1741442",
    "end": "1748090"
  },
  {
    "text": "So we have two\nparameters we actually need to set in the\napproximation algorithm.",
    "start": "1748090",
    "end": "1754029"
  },
  {
    "text": "The first is an epsilon,\nso this is down here, how close do we want to be\nto the final answer, what's",
    "start": "1754030",
    "end": "1760630"
  },
  {
    "text": "the leeway we're going to allow? And second, is the\nincrement, so how much",
    "start": "1760630",
    "end": "1766510"
  },
  {
    "text": "do we want to\nchange our guess by? The way the algorithm\nperforms depends on the values",
    "start": "1766510",
    "end": "1772510"
  },
  {
    "text": "we choose for these. Obviously, if our\nguess is smaller, if we decrease the\nincrement, we're",
    "start": "1772510",
    "end": "1779260"
  },
  {
    "text": "going to get a much more\naccurate approximation. ",
    "start": "1779260",
    "end": "1785799"
  },
  {
    "text": "If we increase the\nepsilon, how close we want to be to x,\nour program is going",
    "start": "1785800",
    "end": "1791290"
  },
  {
    "text": "to be faster because\nwe're going to enter that plus minus epsilon\nboundary faster,",
    "start": "1791290",
    "end": "1796340"
  },
  {
    "text": "but it's going to be less\naccurate because at some point, we're going to\nenter the boundary and I'm going to\nsay good enough,",
    "start": "1796340",
    "end": "1801770"
  },
  {
    "text": "I'm not going to get any closer\nto x because there's no need to, I'm already within epsilon. So here, the good enough guess\nwas to the square root of 5",
    "start": "1801770",
    "end": "1809900"
  },
  {
    "text": "was 1 point something,\nbut on the previous slide, when we had a smaller\nepsilon, the good enough guess",
    "start": "1809900",
    "end": "1815570"
  },
  {
    "text": "was 2 point something. ",
    "start": "1815570",
    "end": "1820980"
  },
  {
    "text": "So the approximation algorithm\nis like guess-and-check except that we have\nsome small increment, we change by a\nsmall amount, and we",
    "start": "1820980",
    "end": "1827960"
  },
  {
    "text": "stop when we're close enough. So we're going to check\nthat the absolute value of this solution minus\nthe actual answer",
    "start": "1827960",
    "end": "1836030"
  },
  {
    "text": "is within epsilon. So here's some code\nwhere we can implement what finding the square root\nof a number with approximation",
    "start": "1836030",
    "end": "1845279"
  },
  {
    "text": "method. We have some stuff here\nthat we're initializing,",
    "start": "1845280",
    "end": "1851460"
  },
  {
    "text": "so this is the thing we want\nto find the square root of. This is how close we want\nto be to the final answer,",
    "start": "1851460",
    "end": "1857370"
  },
  {
    "text": "and this is our increment. Num_guesses is\njust to keep track of how many actual\nguesses we're doing,",
    "start": "1857370",
    "end": "1863610"
  },
  {
    "text": "and we're going to start\nwith a guess that we know is too small, 0. ",
    "start": "1863610",
    "end": "1870050"
  },
  {
    "text": "This is the loop that does\nall of the work for us.",
    "start": "1870050",
    "end": "1875080"
  },
  {
    "text": "So the way we would\nsay it in English, it says basically while our\nguess is not within epsilon",
    "start": "1875080",
    "end": "1880920"
  },
  {
    "text": "keep making new guesses. So while what does it mean\nfor the guess to not be",
    "start": "1880920",
    "end": "1886560"
  },
  {
    "text": "within plus or minus epsilon? Well, the absolute\nvalue of our guess squared minus x is greater\nor equal to epsilon.",
    "start": "1886560",
    "end": "1896310"
  },
  {
    "text": "So while we're still too far\naway, let's make a new guess.",
    "start": "1896310",
    "end": "1901390"
  },
  {
    "text": "So we increment our guess\nby the increment value. So originally, we were\n0, then we're 0.001,",
    "start": "1901390",
    "end": "1909429"
  },
  {
    "text": "then we're going to\nbe 0.0002, and so on. This num_guesses again,\nis just for us to keep",
    "start": "1909430",
    "end": "1916120"
  },
  {
    "text": "track of how many\ntimes we've actually gone through this loop. And at the end, we can print\nhow many guesses we've done.",
    "start": "1916120",
    "end": "1922120"
  },
  {
    "start": "1922120",
    "end": "1927580"
  },
  {
    "text": "OK, so here's the code,\nand 36, so we can run it.",
    "start": "1927580",
    "end": "1933789"
  },
  {
    "text": "What do we see? Here's our approximation\nto the square root of 36.",
    "start": "1933790",
    "end": "1939690"
  },
  {
    "text": "Now, we know it's\n6 and, of course, if we kept going we could\nhave found probably exactly 6,",
    "start": "1939690",
    "end": "1947360"
  },
  {
    "text": "but notice this\napproximation algorithm stops as soon as you enter that\nplus minus epsilon boundary.",
    "start": "1947360",
    "end": "1954520"
  },
  {
    "text": "Yes? AUDIENCE: Do for loops always\nincrease in integer amounts? ANA BELL: Do for loops always\nincrease in integer amounts?",
    "start": "1954520",
    "end": "1961059"
  },
  {
    "text": "Yes, the step has to be an\ninteger, positive or negative, yeah. So exactly, a for loop\nwould not have worked here.",
    "start": "1961060",
    "end": "1967253"
  },
  {
    "text": " So here we stop this\nalgorithm as soon as we entered that plus\nminus boundary of epsilon.",
    "start": "1967253",
    "end": "1976340"
  },
  {
    "text": "And so 5.9991 is close enough\nto the square root of 6, and that's what we're reporting.",
    "start": "1976340",
    "end": "1981800"
  },
  {
    "text": "The number of guesses\nhere was about 59,992. and that makes sense because\nour increment is 0.0001,",
    "start": "1981800",
    "end": "1990980"
  },
  {
    "text": "and we went all\nthe way up to 5.99. So with each time through the\nloop, we incremented by 0.0001.",
    "start": "1990980",
    "end": "1997919"
  },
  {
    "text": "So that's just\nthis times 10,000. That makes sense. So let's try it with\na couple other values.",
    "start": "1997920",
    "end": "2005210"
  },
  {
    "text": "So here it is with 24, 4.89. Again, we're seeing these\nfloating point errors pop",
    "start": "2005210",
    "end": "2012610"
  },
  {
    "text": "into play whenever we see this\nweird like 0.00000 and then some small amount at the end,\nthat's these floating point",
    "start": "2012610",
    "end": "2019450"
  },
  {
    "text": "errors just given the numbers\nwe're working with adding up. Here's the square\nroot of 2, 1.41.",
    "start": "2019450",
    "end": "2027850"
  },
  {
    "text": "Again, floating point error. But this time on the\nother side, 0.9999. 12345, run it.",
    "start": "2027850",
    "end": "2035740"
  },
  {
    "text": "It took a second, there\nwas a little pause, and then it gave us the\nanswer just because it has to loop through about,\nwhat is this, 1 million times,",
    "start": "2035740",
    "end": "2046299"
  },
  {
    "text": "so did that loop 1 million\ntimes to get us the answer? And then we can try\none more, 54321,",
    "start": "2046300",
    "end": "2055059"
  },
  {
    "text": "this should take about five\ntimes as long because 12,345",
    "start": "2055060",
    "end": "2063280"
  },
  {
    "text": "took about one second, this one\nshould take about five seconds but it's not. ",
    "start": "2063280",
    "end": "2069940"
  },
  {
    "text": "I'm pretty sure I was talking\nfor more than five seconds and this program is not ending.",
    "start": "2069940",
    "end": "2075010"
  },
  {
    "text": "So something's gone wrong. I'm going to stop it. Remember, you can\nstop it by clicking",
    "start": "2075010",
    "end": "2080440"
  },
  {
    "text": "the shell, hitting Control-C,\nor the little square here in the corner. ",
    "start": "2080440",
    "end": "2086919"
  },
  {
    "text": "So what went wrong?  Oh yes, my question is, will\nthis loop always terminate?",
    "start": "2086920",
    "end": "2094239"
  },
  {
    "text": "And 54321 was an example of\nthe loop not terminating.",
    "start": "2094239",
    "end": "2100120"
  },
  {
    "text": "So what happened? We did all this. Let's try to debug what exactly\nhappened because clearly what",
    "start": "2100120",
    "end": "2107420"
  },
  {
    "text": "we have in code right\nnow is not really giving us much information. So let's add some\nprint statements.",
    "start": "2107420",
    "end": "2114170"
  },
  {
    "text": "The print statements I'm\nadding is just in here. So everything else\nthat's not boxed is the same as on\nthe previous slide.",
    "start": "2114170",
    "end": "2120750"
  },
  {
    "text": "The only thing I'm adding new\nis this if statement here.",
    "start": "2120750",
    "end": "2125880"
  },
  {
    "text": "So every 100,000 guesses,\nso every time I've",
    "start": "2125880",
    "end": "2132950"
  },
  {
    "text": "gone through this\nloop 100,000 times, I'm going to print what\nthe current guess is",
    "start": "2132950",
    "end": "2138200"
  },
  {
    "text": "and what the guess\nsquared minus x is, so how far away I am\nfrom x, the epsilon.",
    "start": "2138200",
    "end": "2144560"
  },
  {
    "text": "Yeah, not the epsilon but\nhow far away I am from x. So let's run that code.",
    "start": "2144560",
    "end": "2150695"
  },
  {
    "text": " It's down here.",
    "start": "2150695",
    "end": "2156289"
  },
  {
    "text": "I added a little bit\nof extra thing, which is just it's not\nprinting the whole time, it's just going to\npause for me just",
    "start": "2156290",
    "end": "2161810"
  },
  {
    "text": "to talk about what's going on. So here I have the\ncode run, has run,",
    "start": "2161810",
    "end": "2167430"
  },
  {
    "text": "so my first 100,000\ntimes through the loop I have my guess being about 10.",
    "start": "2167430",
    "end": "2173369"
  },
  {
    "text": "And how far I am from\nx is about 54,000. So I want to be 0.01 away\nfrom x because that's",
    "start": "2173370",
    "end": "2181680"
  },
  {
    "text": "what my epsilon is. And so here, I'm\n54,000 away from x. So clearly, that's too much.",
    "start": "2181680",
    "end": "2187020"
  },
  {
    "text": " Let's continue, so then\nwe make more guesses,",
    "start": "2187020",
    "end": "2193250"
  },
  {
    "text": "and then here, when my guess\nis 100, I am about 44,000 away from x from\n54 so looking good.",
    "start": "2193250",
    "end": "2201829"
  },
  {
    "text": "Let's continue. So with 120, I'm\n39,000 away from x. With 200, I'm 14,000 away from\nx, so it's looking much better.",
    "start": "2201830",
    "end": "2212120"
  },
  {
    "text": "I'm getting closer and closer\nto getting that difference being 0 or 0.01, continue.",
    "start": "2212120",
    "end": "2220580"
  },
  {
    "text": "With 210, I'm\n10,000 away from x, and then I'm almost\n6,000 away from x, and then I'm 1,000 away from x.",
    "start": "2220580",
    "end": "2228579"
  },
  {
    "text": "And then, from 230,\nas my guess, which brought me 1,400 away from\nx, the next time, I have 240.",
    "start": "2228580",
    "end": "2238150"
  },
  {
    "text": "The next printout I have\nbrings me to 3,000 away from x. So I was 1,000\nbut now I'm 3,000.",
    "start": "2238150",
    "end": "2247520"
  },
  {
    "text": "And then from there on things\nbreak down really quickly because I just get now farther\nand farther away from x.",
    "start": "2247520",
    "end": "2255079"
  },
  {
    "text": "So here I am continuing the\nprogram for a little bit, and then I just\nkeep making guesses",
    "start": "2255080",
    "end": "2260450"
  },
  {
    "text": "because I was never\nwithin that epsilon. So here's 500, and now I'm\nalmost 200,000 away from x.",
    "start": "2260450",
    "end": "2267200"
  },
  {
    "text": "And so now you see\nwhat's happening, this program is\njust going to keep getting further and further\naway from where I need to be.",
    "start": "2267200",
    "end": "2275190"
  },
  {
    "text": "So let's visualize\nwhat exactly happened. This is our x, 54,321,\nand this is our epsilon,",
    "start": "2275190",
    "end": "2286100"
  },
  {
    "text": "let's say it's 0.01,\nobviously not to scale. Blue is going to be\nrepresenting one guess.",
    "start": "2286100",
    "end": "2292920"
  },
  {
    "text": "So here's a guess,\nand then we have the guess squared, a green.",
    "start": "2292920",
    "end": "2297990"
  },
  {
    "text": "So let's just for\nvisualization purposes, let's say this is our guess,\nand this is our guess squared. OK, we're far away from\nx, we're definitely",
    "start": "2297990",
    "end": "2306590"
  },
  {
    "text": "outside the epsilon boundary. We make another guess by\nincrementing it a little bit. This is the guess squared.",
    "start": "2306590",
    "end": "2313240"
  },
  {
    "text": "We make another guess\nby incrementing it a little bit because\nwe're still far away from that\nplus minus epsilon, this is our guess squared.",
    "start": "2313240",
    "end": "2320109"
  },
  {
    "text": "We make another guess,\nthis is our guess squared, we're pretty darn close to that\nplus minus epsilon boundary.",
    "start": "2320110",
    "end": "2326619"
  },
  {
    "text": "We want to be within\nthat plus minus epsilon. So one more guess\nshould make it right.",
    "start": "2326620",
    "end": "2333190"
  },
  {
    "text": "This is our next guess,\nbut now the guess squared is on the other side. ",
    "start": "2333190",
    "end": "2340320"
  },
  {
    "text": "This is the big\nreveal, you guys. So what happened? What happens now?",
    "start": "2340320",
    "end": "2346030"
  },
  {
    "text": "The program says keep\nguessing because we're not within epsilon. So it's going to make\nanother guess, guess squared,",
    "start": "2346030",
    "end": "2355289"
  },
  {
    "text": "and it's just going\nto keep guessing. And then our guess\nsquared is just going to keep getting\nbigger and bigger.",
    "start": "2355290",
    "end": "2361480"
  },
  {
    "text": "So we basically\novershot the epsilon, we've overshot our little\nplus-minus boundary that we were interested\nin being within.",
    "start": "2361480",
    "end": "2368865"
  },
  {
    "text": " We didn't account for that\nwhen we wrote the loop,",
    "start": "2368865",
    "end": "2376130"
  },
  {
    "text": "all we wanted to do\nwas be within epsilon and our program would end. So let's fix that.",
    "start": "2376130",
    "end": "2382670"
  },
  {
    "text": "One addition will fix\nthat, and it's something that we had been doing in\nguess-and-check anyway.",
    "start": "2382670",
    "end": "2390079"
  },
  {
    "text": "In guess-and-check we\nwould say something like if we've passed the\nreasonable guess, when",
    "start": "2390080",
    "end": "2396380"
  },
  {
    "text": "we know that guess\nsquared from here on out is definitely too\nbig, just stop. Stop guessing.",
    "start": "2396380",
    "end": "2402200"
  },
  {
    "text": "Just stop. And so we can have\nthat same thing here as just another\nending condition.",
    "start": "2402200",
    "end": "2408300"
  },
  {
    "text": "So everything in this code\nis the same as before, except for this red box. We're adding another\nstopping condition",
    "start": "2408300",
    "end": "2415910"
  },
  {
    "text": "that basically says keep\nguessing while we're still guessing something reasonable.",
    "start": "2415910",
    "end": "2423500"
  },
  {
    "text": "But when we get something\nthat's not reasonable, which is when the guess\nsquared is greater than x,",
    "start": "2423500",
    "end": "2429934"
  },
  {
    "text": "we're way past it,\nstop guessing as well. So whichever one of\nthese conditions,",
    "start": "2429935",
    "end": "2435320"
  },
  {
    "text": "either this one or this one\nbeing within epsilon is true, we break out of the loop.",
    "start": "2435320",
    "end": "2441599"
  },
  {
    "text": "And then, we have\nan if-else, kind of the same sort\nof thing we've been doing so far in the\nguess-and-check,",
    "start": "2441600",
    "end": "2447680"
  },
  {
    "text": "why did we break the loop? Did we break it because\nwe were within epsilon?",
    "start": "2447680",
    "end": "2453940"
  },
  {
    "text": "That is the else clause here. If we did, then we say this is\nclose to the square root of x.",
    "start": "2453940",
    "end": "2460150"
  },
  {
    "text": "But if we broke it because\nwe've passed a reasonable number of guesses, then\nwe know we failed",
    "start": "2460150",
    "end": "2466420"
  },
  {
    "text": "to find the square root\nbecause we overshot the mark or whatever.",
    "start": "2466420",
    "end": "2471920"
  },
  {
    "text": "So here is the code\nwith 54321, but now",
    "start": "2471920",
    "end": "2478240"
  },
  {
    "text": "we have that extra\ncondition here, guess squared less than x.",
    "start": "2478240",
    "end": "2483390"
  },
  {
    "text": "So we see that we've done\nsome number of guesses, 2,300,000, and\nthe message we get",
    "start": "2483390",
    "end": "2492269"
  },
  {
    "text": "is we failed to find\nthe square root, makes sense because\nwe knew we would fail,",
    "start": "2492270",
    "end": "2497340"
  },
  {
    "text": "and we're also reporting\nwhat the last guess was, and the last guess\nsquared just in case the user wants to use that\ninformation for anything.",
    "start": "2497340",
    "end": "2505650"
  },
  {
    "text": "What are some\nsolutions to fix this? If we don't want to\nfail, what can we do?",
    "start": "2505650",
    "end": "2511860"
  },
  {
    "text": "Well, I gave you\na hint right here. We can decrement\nour increment, or we can decrease our increment.",
    "start": "2511860",
    "end": "2518600"
  },
  {
    "text": "If instead of adding 0.0001\nevery time through the loop,",
    "start": "2518600",
    "end": "2524390"
  },
  {
    "text": "let's add 0.00001, so let's\nmake it guess 10 times as many",
    "start": "2524390",
    "end": "2530450"
  },
  {
    "text": "guesses. We're going to have to wait\na little bit, maybe about 10 seconds, but the\nprogram will end,",
    "start": "2530450",
    "end": "2536760"
  },
  {
    "text": "it's taking this long\nobviously because it's making all of these extra guesses. For every one guess we\nhad with the program",
    "start": "2536760",
    "end": "2542579"
  },
  {
    "text": "that failed we're now\nmaking 10 guesses because we decreased our increment by 10.",
    "start": "2542580",
    "end": "2548579"
  },
  {
    "text": "OK, so it ended, and we\nsee exactly that idea in the number of guesses. So here we had 2.3 million\nguesses when our increment was",
    "start": "2548580",
    "end": "2556720"
  },
  {
    "text": "0.0001, but when our increment\nwas 0.00001, four zeros,",
    "start": "2556720",
    "end": "2562800"
  },
  {
    "text": "we had 23 million guesses. So obviously we had 10\ntimes as many guesses, which made our program\nbe 10 times as slow.",
    "start": "2562800",
    "end": "2569420"
  },
  {
    "text": "But now, we didn't\nfail because we were able to go within that epsilon.",
    "start": "2569420",
    "end": "2577270"
  },
  {
    "text": "So we found that\n233.06864, which is pretty close to\nwhat we had before,",
    "start": "2577270",
    "end": "2583690"
  },
  {
    "text": "is within 0.01 of epsilon.",
    "start": "2583690",
    "end": "2589040"
  },
  {
    "text": "So with approximation\nmethods, it's possible to overshoot\nthe epsilon. We have to be a little bit more\ncareful now about what our end",
    "start": "2589040",
    "end": "2596569"
  },
  {
    "text": "condition is. Yes, we can check that\nwe are within epsilon, but we have to also use a\nlittle bit of common sense,",
    "start": "2596570",
    "end": "2602240"
  },
  {
    "text": "maybe algebra,\nsomething like that, to figure out is there a way\nwe can overshoot the epsilon, and how else can we stop\nthe program without it",
    "start": "2602240",
    "end": "2611000"
  },
  {
    "text": "running into an infinite loop\nbecause that would be bad. So I think I already\nwent over this,",
    "start": "2611000",
    "end": "2617750"
  },
  {
    "text": "what are some observations\nabout running it? Yes, it reported failure\nso we reset the increment",
    "start": "2617750",
    "end": "2623510"
  },
  {
    "text": "down to 10 times smaller\nthan what it was before. The program was slower\nbecause we had more values",
    "start": "2623510",
    "end": "2631220"
  },
  {
    "text": "to check through. So the big idea here is\nwe want to be careful when comparing floats.",
    "start": "2631220",
    "end": "2637160"
  },
  {
    "text": "If we were using\nsomething like == sign, that would have been\na complete disaster.",
    "start": "2637160",
    "end": "2642410"
  },
  {
    "text": "That we might have never been\nwithin epsilon or something like that. ",
    "start": "2642410",
    "end": "2648730"
  },
  {
    "text": "Yeah, so what are some lessons\nwe learned in approximation, so we can't use == sign to\ncheck for exit conditions?",
    "start": "2648730",
    "end": "2656200"
  },
  {
    "text": "We always have to\ncheck whether we are within plus or minus some\nepsilon of the actual answer.",
    "start": "2656200",
    "end": "2663000"
  },
  {
    "text": "We have to be careful\nthat the exit condition being plus or minus\nwithin some epsilon",
    "start": "2663000",
    "end": "2669120"
  },
  {
    "text": "doesn't jump over our\nexit test as we just saw. In that case, we add\nsome extra conditions.",
    "start": "2669120",
    "end": "2675230"
  },
  {
    "text": "And then we saw that we\nactually have a trade-off, we can have a program\nthat does terminate",
    "start": "2675230",
    "end": "2680570"
  },
  {
    "text": "and reports a correct\nanswer, it doesn't say we failed, but it does\nreport a correct answer but that could be a program\nthat's a lot slower.",
    "start": "2680570",
    "end": "2690050"
  },
  {
    "text": "It's a lot slower because we\nhad to decrease our increment. Alternatively, we could have\nincreased our epsilon boundary,",
    "start": "2690050",
    "end": "2697730"
  },
  {
    "text": "our plus minus epsilon that\nwe allowed to be within could have been\nbigger, but then we would give up on some\naccuracy as well.",
    "start": "2697730",
    "end": "2704520"
  },
  {
    "text": "So there's always this trade-off\nof speed versus accuracy to get the program to\nactually give you an answer",
    "start": "2704520",
    "end": "2711500"
  },
  {
    "text": "or to do what you'd like. And depending on\nthe application, you might want accuracy\nversus speed or vice versa.",
    "start": "2711500",
    "end": "2717275"
  },
  {
    "text": " So this approximation\nalgorithm is really slow.",
    "start": "2717275",
    "end": "2725789"
  },
  {
    "text": "To get an answer for the\nsquare root of 54,321 we had",
    "start": "2725790",
    "end": "2731640"
  },
  {
    "text": "to decrease our increment\nto something like 0.00001.",
    "start": "2731640",
    "end": "2737079"
  },
  {
    "text": "And we ran it, and that\nprogram took maybe 10 seconds to run on my computer\nbecause we started from 0",
    "start": "2737080",
    "end": "2743620"
  },
  {
    "text": "and we were just painfully\nincrementing that increment one at a time, even though\nwe knew sort of from what",
    "start": "2743620",
    "end": "2749920"
  },
  {
    "text": "the number actually was, 54,000,\nthat the square root of it could not really be that low.",
    "start": "2749920",
    "end": "2756099"
  },
  {
    "text": "But that's just the\nalgorithm we had. We had to start from something,\n0 just in case the user gave it",
    "start": "2756100",
    "end": "2762040"
  },
  {
    "text": "other numbers which\ndidn't make sense to start higher than that. And so the approximation\nalgorithm as you saw,",
    "start": "2762040",
    "end": "2768310"
  },
  {
    "text": "can be really slow. The question I have is,\nis there a faster way that still gets good answers?",
    "start": "2768310",
    "end": "2773690"
  },
  {
    "text": "And the answer,\nof course, is yes. And we're going to see this\nalgorithm in the next lecture.",
    "start": "2773690",
    "end": "2781690"
  },
  {
    "text": "So a quick summary, we\nsaw floating points. We did a lot of calculations\nwith binary numbers.",
    "start": "2781690",
    "end": "2787003"
  },
  {
    "text": "You don't need to know how\nto do those calculations. But again, given a\nrecipe or an algorithm, can you take that\nand put it into code?",
    "start": "2787003",
    "end": "2794890"
  },
  {
    "text": "Floating point numbers\nintroduced a little bit of challenge for us in comparing\nthem because of the way they're stored in memory.",
    "start": "2794890",
    "end": "2800690"
  },
  {
    "text": "We can't represent some of\nthese numbers exactly in memory. So that's a problem.",
    "start": "2800690",
    "end": "2806430"
  },
  {
    "text": "Because they're not\nrepresented exactly in memory, we might magnify some errors,\nas we saw with that loop,",
    "start": "2806430",
    "end": "2812430"
  },
  {
    "text": "and the approximation\nmethods use floats. Unfortunately or\nfortunately, they need to use floats because we\nneed to have a small increment,",
    "start": "2812430",
    "end": "2819660"
  },
  {
    "text": "and we have to be mindful of\nthese issues when using them. ",
    "start": "2819660",
    "end": "2830000"
  }
]