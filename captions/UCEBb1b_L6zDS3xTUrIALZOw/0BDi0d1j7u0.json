[
  {
    "start": "0",
    "end": "63000"
  },
  {
    "text": "There are many ways to complete a task---even\na seemingly simple one like eating cereal.",
    "start": "4600",
    "end": "10150"
  },
  {
    "text": "When programming a computer to complete a\ntask or solve a problem, repetitive techniques",
    "start": "10150",
    "end": "14549"
  },
  {
    "text": "like iteration and recursion are extremely\nuseful. In this video, we will look at these",
    "start": "14549",
    "end": "19650"
  },
  {
    "text": "problem-solving techniques.",
    "start": "19650",
    "end": "21869"
  },
  {
    "text": "This video is part of the Problem Solving\nvideo series. Problem-solving skills, in combination",
    "start": "21870",
    "end": "27520"
  },
  {
    "text": "with an understanding of the natural and human-made\nworld, are critical to the design and optimization",
    "start": "27520",
    "end": "33280"
  },
  {
    "text": "of systems and processes.",
    "start": "33280",
    "end": "34948"
  },
  {
    "text": "Hi, my name is Niaja Farve. I am a doctoral\nstudent in Electrical Engineering and Computer",
    "start": "34949",
    "end": "41260"
  },
  {
    "text": "Science at MIT.",
    "start": "41260",
    "end": "43678"
  },
  {
    "text": "Before watching this video, you should be\nfamiliar with introductory programming and",
    "start": "43679",
    "end": "48019"
  },
  {
    "text": "simple data structures.",
    "start": "48019",
    "end": "50469"
  },
  {
    "text": "After watching this video, you will be able\nto: Divide a programming problem into simpler,",
    "start": "50469",
    "end": "55979"
  },
  {
    "text": "analogous pieces. And, solve the problem by\ncombining solutions to the simpler pieces.",
    "start": "55979",
    "end": "62979"
  },
  {
    "start": "63000",
    "end": "63000"
  },
  {
    "text": "In computer science, we often want to solve\ncomplex problems. However, computers deal",
    "start": "67440",
    "end": "72850"
  },
  {
    "text": "best with performing easy tasks over and over\nagain. We utilize the computer's ability by",
    "start": "72850",
    "end": "79380"
  },
  {
    "text": "implementing repetitive techniques to incrementally\nsolve our complex problems.",
    "start": "79380",
    "end": "84909"
  },
  {
    "text": "Though eating a bowl of cereal is a fairly\nsimple task that most of us can complete automatically,",
    "start": "84909",
    "end": "90600"
  },
  {
    "text": "we need to think carefully about how to program\na computer to do the same. Let's take a closer",
    "start": "90600",
    "end": "95880"
  },
  {
    "text": "look at the problem and identify the fundamental\nsteps used to frame cereal eating for repetitive",
    "start": "95880",
    "end": "102100"
  },
  {
    "text": "computation.",
    "start": "102100",
    "end": "103100"
  },
  {
    "text": "In this example, let's suppose the computer\nunderstands the basic operation of eating",
    "start": "103100",
    "end": "107659"
  },
  {
    "text": "a single bite of cereal, but does not understand\nhow to eat an entire bowl of cereal. So how",
    "start": "107659",
    "end": "113928"
  },
  {
    "text": "do we \"teach\" the computer to eat a bowl of\nany size greater than one bite? Pause the",
    "start": "113929",
    "end": "119479"
  },
  {
    "text": "video here and think about it.",
    "start": "119479",
    "end": "126479"
  },
  {
    "text": "The first step when approaching a complex\nprogramming problem is to break the problem",
    "start": "127770",
    "end": "131930"
  },
  {
    "text": "up into analogous, but simpler pieces that\nwe can tell the computer how to directly solve.",
    "start": "131930",
    "end": "137750"
  },
  {
    "text": "So what is a simpler version of eating a whole\nbowl of cereal?",
    "start": "137750",
    "end": "142350"
  },
  {
    "text": "One possibility is eating a smaller amount\nof cereal.",
    "start": "142350",
    "end": "146480"
  },
  {
    "text": "We already mentioned that a small, non-zero\namount of cereal the computer can handle eating",
    "start": "146480",
    "end": "151300"
  },
  {
    "text": "is a single bite.",
    "start": "151300",
    "end": "154220"
  },
  {
    "text": "Going one step up, eating two bites-worth\nof cereal is equivalent to eating a single",
    "start": "154220",
    "end": "159430"
  },
  {
    "text": "bite twice. The next step when approaching\na complex problem is to deduce a pattern.",
    "start": "159430",
    "end": "166209"
  },
  {
    "text": "That is, how does a generally larger problem\nlook in comparison to the simpler version?",
    "start": "166210",
    "end": "171480"
  },
  {
    "text": "Here, we notice that eating any amount of\ncereal is equivalent to the sum of eating",
    "start": "171480",
    "end": "176260"
  },
  {
    "text": "multiple bites-worth of cereal.",
    "start": "176260",
    "end": "179230"
  },
  {
    "text": "Now that we've broken up our problem and understand\nhow the pieces will fit back together, we",
    "start": "179230",
    "end": "184739"
  },
  {
    "text": "can put our solution into a generalized code\nframework:",
    "start": "184740",
    "end": "189180"
  },
  {
    "text": "Start with telling the computer the procedure\nfor solving the simplest problem. Then, repeat",
    "start": "189180",
    "end": "194120"
  },
  {
    "text": "this procedure on subsequent pieces until\nthe desired endpoint is reached:",
    "start": "194120",
    "end": "199129"
  },
  {
    "text": "If the bowl contains cereal, take one bite\nof cereal. Repeat until there is no more cereal.",
    "start": "199130",
    "end": "206130"
  },
  {
    "text": "You may recognize this type of solution as\nan iterative approach.",
    "start": "211540",
    "end": "216250"
  },
  {
    "text": "Or we could also take the following alternative\napproach:",
    "start": "216250",
    "end": "219810"
  },
  {
    "text": "Start with telling the computer how to solve\nthe simplest problem. Then, break the problem",
    "start": "219810",
    "end": "224500"
  },
  {
    "text": "into simpler and simpler pieces until we reach\nthe version we've already told the computer",
    "start": "224500",
    "end": "229320"
  },
  {
    "text": "how to solve.\nDoes the bowl contain 1 bite of cereal? If",
    "start": "229320",
    "end": "234840"
  },
  {
    "text": "so, take the bite. If not, divide it up into\na bowl containing one bite and a bowl containing",
    "start": "234840",
    "end": "241030"
  },
  {
    "text": "the remainder. Repeat this procedure on the\nresulting bowls.",
    "start": "241030",
    "end": "246090"
  },
  {
    "text": "In this case, we end, up with a series of\nbowls containing one bite, which the computer",
    "start": "246090",
    "end": "251040"
  },
  {
    "text": "knows how to eat.",
    "start": "251040",
    "end": "253200"
  },
  {
    "text": "Breaking up a problem into progressively simpler,\nbut analogous pieces in this way is known",
    "start": "253200",
    "end": "257880"
  },
  {
    "text": "as a recursive approach. Because the solution\nto the most complex problem depends on solutions",
    "start": "257880",
    "end": "263350"
  },
  {
    "text": "to the simpler pieces, recursion creates a\nqueue of jobs waiting to be completed.",
    "start": "263350",
    "end": "268930"
  },
  {
    "text": "In contrast, when using iteration, there is\nno such dependency from one instance of the",
    "start": "268930",
    "end": "275259"
  },
  {
    "text": "problem to the next.",
    "start": "275260",
    "end": "277260"
  },
  {
    "text": "So even though the computer ends up consuming\nn bites of cereal in both cases, the iterative",
    "start": "277260",
    "end": "283030"
  },
  {
    "text": "and recursive approaches arrive at this answer\nin very different ways.",
    "start": "283030",
    "end": "288150"
  },
  {
    "text": "There are many different ways to successfully\neat a bowl of cereal or solve any given programming",
    "start": "288150",
    "end": "293690"
  },
  {
    "text": "problem. The key is to 1. Break the problem\ninto analogous pieces that the computer can",
    "start": "293690",
    "end": "300380"
  },
  {
    "text": "solve, and 2. Combine the solutions to the\npieces into a solution for the more complex",
    "start": "300380",
    "end": "305790"
  },
  {
    "text": "problem.",
    "start": "305790",
    "end": "311620"
  },
  {
    "start": "307000",
    "end": "307000"
  },
  {
    "text": "In our previous cereal-eating example, breaking\ndown the problem into simpler pieces was fairly",
    "start": "311620",
    "end": "317470"
  },
  {
    "text": "straightforward. Now, let's look at a slightly\nmore complex problem.",
    "start": "317470",
    "end": "321260"
  },
  {
    "text": "We would like to write a function, downup,\nthat takes an input string and prints out",
    "start": "321260",
    "end": "327250"
  },
  {
    "text": "progressively smaller and larger sub-strings\nof the word as so.",
    "start": "327250",
    "end": "332260"
  },
  {
    "text": "To help us work with strings, we have a helper\nfunction, substring, which extracts a portion",
    "start": "332260",
    "end": "338190"
  },
  {
    "text": "of a string, beginning from the first character\nup though a specified end index.",
    "start": "338190",
    "end": "344440"
  },
  {
    "text": "Following the framework we discussed earlier,\nwhat is a simpler version of downup that we",
    "start": "344440",
    "end": "348900"
  },
  {
    "text": "can easily handle?",
    "start": "348900",
    "end": "350979"
  },
  {
    "text": "How about downup of a single letter string.\nThe desired output is achieved by simply printing",
    "start": "350980",
    "end": "356460"
  },
  {
    "text": "the string.",
    "start": "356460",
    "end": "358500"
  },
  {
    "text": "Moving one step up, we see that the desired\noutput of a two-letter string can be accomplished",
    "start": "358500",
    "end": "363530"
  },
  {
    "text": "by printing the string, printing the string\nshortened by one letter, and printing the",
    "start": "363530",
    "end": "368070"
  },
  {
    "text": "full string a second time.",
    "start": "368070",
    "end": "371120"
  },
  {
    "text": "And moving up one more step to a 3 letter\nstring...",
    "start": "371120",
    "end": "376650"
  },
  {
    "text": "Are you starting to notice any patterns? Pause\nthe video to think of a possibility.",
    "start": "376650",
    "end": "383650"
  },
  {
    "text": "Though there are many different patterns,\nhere is one you may have come up with: With",
    "start": "387100",
    "end": "391370"
  },
  {
    "text": "every string, we are sandwiching the _solution_\nto a string one character shorter between",
    "start": "391370",
    "end": "396740"
  },
  {
    "text": "two printings of the full string. With this\nmindset, we are poised for a recursive solution",
    "start": "396740",
    "end": "402490"
  },
  {
    "text": "to this problem.",
    "start": "402490",
    "end": "404470"
  },
  {
    "text": "Recall the general framework for a recursive\nsolution: Tell the computer how to solve the",
    "start": "404470",
    "end": "409680"
  },
  {
    "text": "simplest problem. Then break the problem into\nsimpler pieces until we reach the simplest",
    "start": "409680",
    "end": "416199"
  },
  {
    "text": "problem: If the string is a single letter,\nprint it. Otherwise, print the string, solve",
    "start": "416199",
    "end": "422650"
  },
  {
    "text": "for downup of the string one character shorter,\nand print the string again.",
    "start": "422650",
    "end": "429009"
  },
  {
    "text": "Try now, if you haven't already done so, to\nframe the problem in a more iterative manner.",
    "start": "429010",
    "end": "435180"
  },
  {
    "text": "Pause the video to discuss.",
    "start": "435180",
    "end": "442180"
  },
  {
    "text": "We can notice that we are repeatedly printing\nsubstrings of the full string, with each step",
    "start": "443770",
    "end": "449240"
  },
  {
    "text": "moving the end index from the original length\ndown to 1. This is followed by again printing",
    "start": "449240",
    "end": "455638"
  },
  {
    "text": "substrings, but this time increasing the end\nindex back up to the original length.",
    "start": "455639",
    "end": "461840"
  },
  {
    "text": "We can program this solution using two iterative\nloops. Recall the general iterative code framework:",
    "start": "461840",
    "end": "468840"
  },
  {
    "text": "Tell the computer the procedure for the simplest\nproblem. Repeat the procedure on subsequent",
    "start": "468979",
    "end": "474110"
  },
  {
    "text": "pieces until the endpoint is reached.",
    "start": "474110",
    "end": "477460"
  },
  {
    "text": "In our first loop, we print the substring,\ndecrease the index by one, and repeat the",
    "start": "477460",
    "end": "482490"
  },
  {
    "text": "procedure until the index reaches one.",
    "start": "482490",
    "end": "486490"
  },
  {
    "text": "In the second loop, we move in the opposite\ndirection. Print the substring. Increase the",
    "start": "486490",
    "end": "492130"
  },
  {
    "text": "index by one and repeat the procedure until\nthe index is greater than the original length.",
    "start": "492130",
    "end": "498460"
  },
  {
    "text": "Both approaches, while very different, are\ncompletely valid! There is no one correct",
    "start": "498460",
    "end": "504039"
  },
  {
    "text": "way to solve a problem. Some solutions may\neven have both recursive and iterative elements.",
    "start": "504040",
    "end": "511040"
  },
  {
    "start": "512000",
    "end": "512000"
  },
  {
    "text": "Now lets solve a third problem with an even\nmore complex pattern.",
    "start": "516060",
    "end": "520698"
  },
  {
    "text": "In the famous Towers of Hanoi problem, the\ngoal is to transfer a stack of rings from",
    "start": "520699",
    "end": "525589"
  },
  {
    "text": "pillar A to pillar C. We can only move a single\nring at a time, and can use pillar B as \"extra\"",
    "start": "525589",
    "end": "532589"
  },
  {
    "text": "workspace. We cannot place a larger ring on\ntop of a smaller ring.",
    "start": "534050",
    "end": "539959"
  },
  {
    "text": "Lets follow the framework and start by working\nout the simplest problem: transferring 1 ring.",
    "start": "539959",
    "end": "546368"
  },
  {
    "text": "Here we can simply move the ring from A to\nC.",
    "start": "546369",
    "end": "549119"
  },
  {
    "text": "Okay, now let's try to transfer a stack of\ntwo rings. First we move the ring 1 to B,",
    "start": "549119",
    "end": "556119"
  },
  {
    "text": "then ring 2 to C, then move ring 1 from B\nto C.",
    "start": "557550",
    "end": "562410"
  },
  {
    "text": "Now, let's try something a bit harder. Let's\ntry to transfer a stack of three rings. Ring",
    "start": "562410",
    "end": "569410"
  },
  {
    "text": "1 moves to C, ring 2 goes to B, and ring 1\ngoes to B. Now ring 3, which was on the bottom,",
    "start": "570550",
    "end": "577550"
  },
  {
    "text": "is free to move to C. Then, ring 1 goes to\nA, ring 2 goes to C, then ring 1 finally goes",
    "start": "580889",
    "end": "587889"
  },
  {
    "text": "to C.",
    "start": "589470",
    "end": "590938"
  },
  {
    "text": "Notice that after we moved the bottom ring\nto C, we essentially arrived at the same conformation",
    "start": "590939",
    "end": "597369"
  },
  {
    "text": "as when trying to transfer 2 rings: We have\ntwo stacked rings and an extra empty pillar.",
    "start": "597369",
    "end": "603959"
  },
  {
    "text": "And because the largest ring is in the desired,\nfinal position and does not impede the movements",
    "start": "603959",
    "end": "609449"
  },
  {
    "text": "of any of the remaining smaller rings, we\ncan treat the pillar as being empty.",
    "start": "609449",
    "end": "615459"
  },
  {
    "text": "This observation is crucial to the recursive\nimplementation of the towers of Hanoi solution.",
    "start": "615459",
    "end": "622248"
  },
  {
    "text": "We transferred n-1 rings to the extra pillar,\nmoved the largest ring to the final position,",
    "start": "622249",
    "end": "629059"
  },
  {
    "text": "then transferred the n-1 rings to the final\nposition.",
    "start": "629059",
    "end": "633399"
  },
  {
    "text": "Can you frame a pseudocode solution to the\nproblem? Pause the video here to work out",
    "start": "633399",
    "end": "638529"
  },
  {
    "text": "a possible solution.",
    "start": "638529",
    "end": "645529"
  },
  {
    "text": "Recall again the general recursive framework:\nTell the computer how to solve the simplest",
    "start": "646589",
    "end": "652509"
  },
  {
    "text": "problem: If we're transferring a single ring,\nmove it to the destination pillar.",
    "start": "652509",
    "end": "659259"
  },
  {
    "text": "Then, break the problem up into progressively\nsimpler pieces:",
    "start": "659259",
    "end": "665579"
  },
  {
    "text": "Transfer n-1 rings from the source to the\nextra pillar, transfer ring n from the source",
    "start": "665579",
    "end": "671928"
  },
  {
    "text": "to the destination, and transfer n-1 rings\nfrom the extra pillar to the destination.",
    "start": "671929",
    "end": "678929"
  },
  {
    "text": "Note that the source, destination, and extra\npillar designations change with each function",
    "start": "679279",
    "end": "684399"
  },
  {
    "text": "call!",
    "start": "684399",
    "end": "685569"
  },
  {
    "text": "It's always a good idea to check your code\nwith a test case. Pause the video here and",
    "start": "685569",
    "end": "691139"
  },
  {
    "text": "check your code for the case of N equals 4.\nYou may also wish to check our code and compare",
    "start": "691139",
    "end": "697990"
  },
  {
    "text": "the two solution methods.",
    "start": "697990",
    "end": "704990"
  },
  {
    "text": "Now lets check our code and traverse through\nthe solution for transferring 4 rings.",
    "start": "706529",
    "end": "711420"
  },
  {
    "text": "We're not transferring a single ring, so lets\ntransfer 3 rings from A to B.",
    "start": "711420",
    "end": "718188"
  },
  {
    "text": "We're still not transferring one ring, so\nlets transfer 2 rings from A to C.",
    "start": "718189",
    "end": "724379"
  },
  {
    "text": "We're still not transferring one ring, so\nlets transfer 1 ring from A to B. And we can",
    "start": "724379",
    "end": "730569"
  },
  {
    "text": "finally move this single ring!",
    "start": "730569",
    "end": "734178"
  },
  {
    "text": "Now we return to the previous call, and can\nmove ring 2 from A to C. Then we transfer",
    "start": "734179",
    "end": "741179"
  },
  {
    "text": "our n-1 stack from B to C. This results in\ntransferring 2 rings from A to C!",
    "start": "741309",
    "end": "748309"
  },
  {
    "text": "Returning one more step back, we move ring\n3 to B. Now we transfer 2 rings from C to",
    "start": "752749",
    "end": "759749"
  },
  {
    "text": "A.",
    "start": "760839",
    "end": "767839"
  },
  {
    "text": "Finally, we've returned back to our original\nfunction call, and we've completed transferring",
    "start": "768379",
    "end": "775379"
  },
  {
    "text": "3 rings from A to B. So, we can move our largest\nring number 4 from A to C.",
    "start": "780220",
    "end": "787220"
  },
  {
    "text": "Now we need a whole other set of recursive\nfunction calls to transfer the 3 ring stack",
    "start": "790420",
    "end": "796600"
  },
  {
    "text": "from B to C! Pause the video now to finish\nchecking the second half of our solution.",
    "start": "796600",
    "end": "802480"
  },
  {
    "text": "Notice how quickly the number of function\ncalls grew! Good thing we have a computer",
    "start": "802480",
    "end": "809480"
  },
  {
    "text": "that is very good at following repetitive\ninstructions!",
    "start": "810170",
    "end": "814269"
  },
  {
    "text": "To Review In this video, we showed you how\nrecursion and iteration take advantage of",
    "start": "814269",
    "end": "819579"
  },
  {
    "text": "a computer's ability to repeat simple tasks.",
    "start": "819579",
    "end": "823550"
  },
  {
    "text": "To approach a complicated programming problem,\nfirst solve some simpler versions and try",
    "start": "823550",
    "end": "828889"
  },
  {
    "text": "to identify a pattern. Then, depending on\nthe type of pattern you found, fill in a recursive",
    "start": "828889",
    "end": "834470"
  },
  {
    "text": "or iterative code framework. And remember,\niterative, recursive and even mixed solutions",
    "start": "834470",
    "end": "840678"
  },
  {
    "text": "to a single problem may all be correct!",
    "start": "840679",
    "end": "847679"
  }
]