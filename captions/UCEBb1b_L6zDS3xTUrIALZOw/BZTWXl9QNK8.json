[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6060"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or to\nview additional materials",
    "start": "6060",
    "end": "12690"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "12690",
    "end": "26640"
  },
  {
    "text": "PROFESSOR: All right,\nguys, let's get started. So today, we're going to\ntalk about network security. And in particular,\nwe're going to talk",
    "start": "26640",
    "end": "32933"
  },
  {
    "text": "about this paper on TCP/IP\nsecurity by this guy Steve Bellovin, who used to be\nat AT&T and now is at Columbia.",
    "start": "32933",
    "end": "40027"
  },
  {
    "text": "One interesting thing\nabout this paper is it's actually a\nrelatively old paper. It's more than 10 years old. And in fact, it's\ncommentary on a paper",
    "start": "40027",
    "end": "46209"
  },
  {
    "text": "that was 10 years before that. And many of you guys actually\nask, why are we reading this",
    "start": "46209",
    "end": "51840"
  },
  {
    "text": "if many of these problems have\nbeen solved in today's TCP protocol stacks? So one interesting\npoint-- so it's",
    "start": "51840",
    "end": "57429"
  },
  {
    "text": "true that some of these\nproblems that Steve describes in this paper\nhave been solved since then. Some of them are still\nactually problems today.",
    "start": "57429",
    "end": "64018"
  },
  {
    "text": "We'll sort of look at that\nand see what's going on. But you might actually\nwonder, why didn't people",
    "start": "64019",
    "end": "69924"
  },
  {
    "text": "solve all these problems\nin the first place when they were designing TCP? What were they thinking?",
    "start": "69925",
    "end": "75480"
  },
  {
    "text": "And it's actually not clear. So what do you guys think? Why wasn't TCP designed\nto be secure with all",
    "start": "75480",
    "end": "81439"
  },
  {
    "text": "these considerations up front? Yeah, any guesses?",
    "start": "81440",
    "end": "86596"
  },
  {
    "text": "All right, anyone else? Yeah. AUDIENCE: The internet was\na much more trusting place back then. PROFESSOR: Yeah, this\nwas almost literally",
    "start": "86596",
    "end": "92250"
  },
  {
    "text": "a quote from this guy's paper. Yeah, at the time-- the whole\ninternet set of protocols was designed I guess\nabout 40 years ago now.",
    "start": "92250",
    "end": "99700"
  },
  {
    "text": "The requirements were\ntotally different. It was to connect a bunch\nof relatively trusting sites that all knew each\nother by name.",
    "start": "99700",
    "end": "107070"
  },
  {
    "text": "And I think this is often\nthe case in any system that becomes successful. The requirements change.",
    "start": "107070",
    "end": "112600"
  },
  {
    "text": "So it used to be that\nthis was a protocol for a small number of sites. Now it's the entire world. And you don't know\nall the people",
    "start": "112600",
    "end": "118990"
  },
  {
    "text": "connected to the\ninternet by name anymore. You can't call them\nup on the phone if they do something\nbad, et cetera. So I think this is a story\nfor many of the protocols",
    "start": "118990",
    "end": "125650"
  },
  {
    "text": "we look at. And many of you guys have\nquestions, like, what the hell were these guys thinking? This is so broken. But in fact, they were designing\na totally different system.",
    "start": "125650",
    "end": "132810"
  },
  {
    "text": "It got adopted. Same for the web,\nlike we were looking at in the last couple of weeks. It was designed for a\nvery different goal.",
    "start": "132811",
    "end": "138950"
  },
  {
    "text": "And it expanded. And you sort of have\nthese growing pains you have to figure out how\nto make the protocol adapt",
    "start": "138950",
    "end": "144760"
  },
  {
    "text": "to new requirements. And another thing that\nsomewhat suddenly happened is I think people\nalso in the process",
    "start": "144760",
    "end": "151370"
  },
  {
    "text": "gained a much\ngreater appreciation for the kinds of\nproblems you have to worry about in security. And it used to be the case\nthat you didn't really",
    "start": "151370",
    "end": "158520"
  },
  {
    "text": "understand all the\nthings that you should worry about an\nattacker doing to your system. And I think it's\npartly for this reason",
    "start": "158520",
    "end": "164519"
  },
  {
    "text": "that it's sort of\ninteresting to look at what happened to TCP\nsecurity, what went wrong, how could we fix it, et\ncetera, to both figure out",
    "start": "164520",
    "end": "171639"
  },
  {
    "text": "what kinds of problems you might\nwant to avoid when designing your own protocols,\nand also what's",
    "start": "171639",
    "end": "176980"
  },
  {
    "text": "the right mindset for thinking\nabout these kinds of attacks. How do you figure out\nwhat an attacker might",
    "start": "176980",
    "end": "182410"
  },
  {
    "text": "be able to do in\nyour own protocol when you're designing it so\nyou can avoid similar pitfalls?",
    "start": "182410",
    "end": "188290"
  },
  {
    "text": "All right, so with\nthat preamble aside, let's actually start talking\nabout what the paper is about. So how should we think\nabout security in a network?",
    "start": "188290",
    "end": "195770"
  },
  {
    "text": "So I guess we could try to\nstart from first principles and try to figure out,\nwhat is our threat model?",
    "start": "195770",
    "end": "202349"
  },
  {
    "text": "So what do we think\nthe attacker is going to be able to\ndo in our network?",
    "start": "202350",
    "end": "208210"
  },
  {
    "text": "Well, relatively\nstraightforwardly, there's presumably being\nable to intercept packets,",
    "start": "208210",
    "end": "216340"
  },
  {
    "text": "and probably being\nable to modify them.  So if you send a packet\nover the network,",
    "start": "216340",
    "end": "222960"
  },
  {
    "text": "it might be prudent to assume\nthat some bad guy out there is going to see your packet and\nmight be able to change it",
    "start": "222960",
    "end": "228540"
  },
  {
    "text": "before it reaches\nthe destination, might be able to drop\nit, and in fact might be able to inject\npackets of their own",
    "start": "228540",
    "end": "234740"
  },
  {
    "text": "that you never sent\nwith arbitrary contents. And probably-- so\nthis you can sort of",
    "start": "234740",
    "end": "242605"
  },
  {
    "text": "come up with fairly\nstraightforwardly by just thinking, well, if you\ndon't trust the network, some bad guy is going to\nsend arbitrary packets,",
    "start": "242605",
    "end": "249489"
  },
  {
    "text": "see yours, modify\nthem, et cetera. Somewhat more worryingly,\nas this paper talks about,",
    "start": "249490",
    "end": "255240"
  },
  {
    "text": "the bad guy can also\nparticipate in your protocols. They have their\nown machine, right? So the attacker has\ntheir own computer",
    "start": "255240",
    "end": "262490"
  },
  {
    "text": "that they have\nfull control over. So even if all the\ncomputers that you trust",
    "start": "262490",
    "end": "269449"
  },
  {
    "text": "are reasonably maintained,\nthey all behave correctly, the bad guy has his own\ncomputer that he can make it do whatever he wants.",
    "start": "269450",
    "end": "275699"
  },
  {
    "text": "And in fact, he can\nparticipate in a protocol or distribute a system. ",
    "start": "275700",
    "end": "285150"
  },
  {
    "text": "So if you have a\nrouting protocol, which involves many people talking\nto each other, at some scale, it's probably going to\nbe impractical to keep",
    "start": "285150",
    "end": "291710"
  },
  {
    "text": "the bad guys out. If you're running a routing\nprotocol with 10 participants, then maybe you can just call\nall them up and say, well, yeah,",
    "start": "291710",
    "end": "297169"
  },
  {
    "text": "yeah, I know all you guys. But at the scale of the\ninternet today, it's unfeasible to have sort of\ndirect knowledge of what",
    "start": "297170",
    "end": "304300"
  },
  {
    "text": "everyone else or who everyone\nelse in this protocol is. So probably some\nbad guy is going to be participating in your\nprotocols or distributed",
    "start": "304300",
    "end": "311159"
  },
  {
    "text": "systems. And it's important to design\ndistributed systems that can nonetheless do something\nreasonable with that.",
    "start": "311160",
    "end": "317955"
  },
  {
    "text": "All right, so what\nare the implications of all these things? I guess we'll go down the list. So intercepting is-- it's on\nthe whole easy to understand.",
    "start": "317955",
    "end": "326570"
  },
  {
    "text": "Well, you shouldn't\nsend any important data over the network if you expect\na bad guy to intercept them,",
    "start": "326570",
    "end": "332380"
  },
  {
    "text": "or at least not in clear text. Maybe you should\nencrypt your data. So that seems relatively\nstraightforward to sort",
    "start": "332380",
    "end": "337785"
  },
  {
    "text": "of figure out. Although still you should sort\nof keep it in mind, of course, when designing protocols.",
    "start": "337785",
    "end": "343069"
  },
  {
    "text": "Now, injecting packets\nturns out to lead to a much wider range\nof interesting problems",
    "start": "343070",
    "end": "350379"
  },
  {
    "text": "that this paper talks about. And in particular,\nattackers can inject packets that can pretend to\nbe from any other sender.",
    "start": "350380",
    "end": "358860"
  },
  {
    "text": "Because the way this works in\nIP is that the IP packet itself has a header that contains\nthe source of the packet",
    "start": "358860",
    "end": "364420"
  },
  {
    "text": "and the destination. And it's up to whoever\ncreates the packet to fill in the right values\nfor the source and destination.",
    "start": "364420",
    "end": "371750"
  },
  {
    "text": "And no one checks that\nthe source is necessarily the correct. There's some filtering\ngoing on these days.",
    "start": "371750",
    "end": "378050"
  },
  {
    "text": "But it's sort of fairly spotty,\nand it's hard to rely on. So to a first\napproximation, an attacker",
    "start": "378050",
    "end": "383115"
  },
  {
    "text": "could fill in any IP\naddress as the source, and it will get to the\ndestination correctly.",
    "start": "383115",
    "end": "389180"
  },
  {
    "text": "And it's interesting\nto try to figure out what could an attacker do with\nsuch a capability of sending",
    "start": "389180",
    "end": "395540"
  },
  {
    "text": "arbitrary packets. Now, in the several\nweeks up to this,",
    "start": "395540",
    "end": "401771"
  },
  {
    "text": "like in buffer overflows\nand web security, we looked at, to a large extent,\nimplementation bugs, like, how could you exploit\na buffer overflow?",
    "start": "401771",
    "end": "408439"
  },
  {
    "text": "And interestingly, the\nauthor of this paper is actually not at all\ninterested in implementation bugs.",
    "start": "408440",
    "end": "413510"
  },
  {
    "text": "He's really interested in\nprotocol errors or protocol mistakes. So what's the big deal?",
    "start": "413510",
    "end": "418520"
  },
  {
    "text": "Why is he down on\nimplementation bugs, even though we spent several\nweeks looking at them? Why does it matter? Yeah.",
    "start": "418520",
    "end": "424010"
  },
  {
    "text": "AUDIENCE: Because we have to\nkeep those bugs [INAUDIBLE]. PROFESSOR: Yeah, so this is the\nreally big bummer about a bug",
    "start": "424010",
    "end": "429800"
  },
  {
    "text": "in your protocol design. Because it's hard to change. So if you have an\nimplementation bug,",
    "start": "429800",
    "end": "435129"
  },
  {
    "text": "well, you had a\nmemcpy or a print-out out of some sort that\ndidn't check the range. OK, well, you had a range\ncheck, and it still works,",
    "start": "435130",
    "end": "441419"
  },
  {
    "text": "and now it's also secure. So that's great. But if you have some bug in\nthe protocol specification, in how the protocol has\nto work, then fixing a bug",
    "start": "441420",
    "end": "449139"
  },
  {
    "text": "is going to require\nfixing a protocol, which means potentially affecting\nall the systems that are out there speaking\nthis protocol.",
    "start": "449140",
    "end": "455460"
  },
  {
    "text": "So if we find some\nproblem in TCP, it's potentially\nquite devastating. Because every machine that uses\nTCP is going to have to change.",
    "start": "455460",
    "end": "462229"
  },
  {
    "text": "Because it's going\nto be hard to make it potentially\nbackwards compatible. We'll see exactly\nwhat these bugs are.",
    "start": "462229",
    "end": "468530"
  },
  {
    "text": "But this is the real reason\nhe's so excited about looking at protocol bugs. Because they're fairly\nfundamental to the TCP protocol",
    "start": "468530",
    "end": "476555"
  },
  {
    "text": "that everyone agrees to speak. So let's look at\none of these guys. So the first example\nhe points out",
    "start": "476555",
    "end": "483950"
  },
  {
    "text": "has to do with how TCP\nsequence numbers work. ",
    "start": "483950",
    "end": "489720"
  },
  {
    "text": "So just to re-explain--\nyeah, question. AUDIENCE: I'm just curious. This is a tiny bit off topic.",
    "start": "489720",
    "end": "495502"
  },
  {
    "text": "But let's say you do\nfind a bug in TCP. How do you make\nthe change to it? How do you tell\nall the computers",
    "start": "495502",
    "end": "501398"
  },
  {
    "text": "in the world to change that? PROFESSOR: Yeah, I think\nit's a huge problem. What if you find a bug in TCP?",
    "start": "501398",
    "end": "506900"
  },
  {
    "text": "Well, it's unclear what to do. And I think the authors here\nstruggle a lot with that.",
    "start": "506900",
    "end": "512530"
  },
  {
    "text": "And in many ways, if\nyou could redesign TCP, many of these bugs\nare relatively",
    "start": "512530",
    "end": "517539"
  },
  {
    "text": "easy to fix if you knew what\nto look for ahead of time. But because TCP is\nsort of relatively hard",
    "start": "517539",
    "end": "526410"
  },
  {
    "text": "to fix or change,\nwhat ends up happening is that people or\ndesigners try to look",
    "start": "526410",
    "end": "534457"
  },
  {
    "text": "for backwards compatible\ntweaks that either allow old implementations to coexist\nwith the new implementation",
    "start": "534457",
    "end": "541170"
  },
  {
    "text": "or to add some optional field\nthat if it's there, then the communication is\nmore secure in some way.",
    "start": "541170",
    "end": "548589"
  },
  {
    "text": "But it is a big problem. If it's some security issue\nthat's deeply ingrained in TCP,",
    "start": "548590",
    "end": "554029"
  },
  {
    "text": "then it's going to be a pretty\nhumongous issue for everyone to just pack up and move onto a\nTCP version whatever, n plus 1.",
    "start": "554030",
    "end": "563930"
  },
  {
    "text": "And you can look at IPv6 as one\nexample of this not happening. We've known this problem\nwas going to come up",
    "start": "563930",
    "end": "569170"
  },
  {
    "text": "for like 15 years or 20 years. IPv6 has been around for\nwell over 10 years now.",
    "start": "569170",
    "end": "574759"
  },
  {
    "text": "And it's just hard to convince\npeople to move away from IPv4. It's good enough. It sort of works. It's a lot of\noverhead to move over.",
    "start": "574759",
    "end": "581464"
  },
  {
    "text": "And no one else is\nspeaking IPv6, so why should I start speaking\nthis bizarre protocol that no one else is\ngoing to speak to me in?",
    "start": "581465",
    "end": "587220"
  },
  {
    "text": "So it's sort of moving along. But I think it\ntakes a long time. And there's going to be really\nsome motivation to migrate.",
    "start": "587220",
    "end": "593290"
  },
  {
    "text": "And backwards\ncompatibility helps a lot. Not good enough for,\nI guess, IPv6-- IPv6",
    "start": "593290",
    "end": "598700"
  },
  {
    "text": "has lots of backwards\ncompatibility plans in it. You can talk to an\nIPv4 host from IPv6.",
    "start": "598700",
    "end": "604720"
  },
  {
    "text": "So they try to engineer\nall this support. But still, it's hard to\nconvince people to upgrade.",
    "start": "604720",
    "end": "611840"
  },
  {
    "text": "All right, but yeah, looking\nback at the TCP sequence numbers, we're going to look\nat actually two problems that",
    "start": "611840",
    "end": "617610"
  },
  {
    "text": "have to do with how the\nTCP handshake works. So let's just spend a little\nbit of time working out",
    "start": "617610",
    "end": "624260"
  },
  {
    "text": "what are the details of how a\nTCP connection gets initially established. So there's actually\nthree packets",
    "start": "624260",
    "end": "630650"
  },
  {
    "text": "that have to get sent in\norder for a new TCP connection to be established. So our client generates a\npacket to connect to a server.",
    "start": "630650",
    "end": "637960"
  },
  {
    "text": "And it says, well, here's\nmy IP address, C, client. I'm sending this to the server. And there's various fields.",
    "start": "637960",
    "end": "644534"
  },
  {
    "text": "But the ones that are\ninteresting for the purpose of this discussion is going\nto be a sequence number.",
    "start": "644534",
    "end": "649590"
  },
  {
    "text": "So there's going to\nbe a syn flag saying, I want to synchronize state\nand establish a new connection. And you include a\nclient sequence number",
    "start": "649590",
    "end": "657480"
  },
  {
    "text": "in the initial syn packet. Then when the server\nreceives this, the server is going\nto look and say,",
    "start": "657480",
    "end": "664167"
  },
  {
    "text": "well, a client wants\nto connect to me, so I'll send a packet\nback to whatever this address is,\nwhoever said they're trying to connect to me.",
    "start": "664167",
    "end": "670060"
  },
  {
    "text": "So it'll send a packet from\nthe server to the client and include its own\nsynchronization number, SN",
    "start": "670060",
    "end": "677170"
  },
  {
    "text": "server. And it'll acknowledge\nthe client's number. ",
    "start": "677170",
    "end": "683750"
  },
  {
    "text": "And finally, the\nclient replies back, acknowledging the\nserver synchronization",
    "start": "683750",
    "end": "690259"
  },
  {
    "text": "number-- acknowledge SNS.",
    "start": "690260",
    "end": "697070"
  },
  {
    "text": "And now the client can\nactually start sending data. So in order to send\ndata, the client",
    "start": "697070",
    "end": "702290"
  },
  {
    "text": "has to include some\ndata in the packet, and also put in the sequence\nnumber of the client",
    "start": "702290",
    "end": "711780"
  },
  {
    "text": "to indicate that\nthis is actually sort of legitimate client data\nat the start of the connection. It's not some data\nfrom later on,",
    "start": "711780",
    "end": "717649"
  },
  {
    "text": "for example, that just\nhappens to arrive now because the server missed some\ninitial parts of the data. So generally, all\nthese sequence numbers",
    "start": "717650",
    "end": "724735"
  },
  {
    "text": "were meant for ensuring in\norder delivery of packets. So if the client sends\ntwo packets, the one that",
    "start": "724735",
    "end": "731225"
  },
  {
    "text": "has the initial sequence number,\nthat's the first chunk of data. And the one with the\nnext sequence number is the next chunk of data.",
    "start": "731225",
    "end": "737410"
  },
  {
    "text": "But it turns out to also\nbe useful for providing some security properties.",
    "start": "737410",
    "end": "742423"
  },
  {
    "text": "Here's an example of these\nrequirements changing. So initially, no\none was thinking TCP provides any\nsecurity properties.",
    "start": "742424",
    "end": "747465"
  },
  {
    "text": "But then applications\nstarted using TCP and sort of relying on these\nTCP connections",
    "start": "747465",
    "end": "752470"
  },
  {
    "text": "not being able to be broken\nby some arbitrary attacker, or an attacker not being able to\ninject data into your existing",
    "start": "752470",
    "end": "759149"
  },
  {
    "text": "TCP connection. And all of a sudden, this\nmechanism that was initially meant for just\npacket ordering now",
    "start": "759150",
    "end": "766240"
  },
  {
    "text": "gets used to guarantee\nsome semblance of security for these connections.",
    "start": "766240",
    "end": "772110"
  },
  {
    "text": "So in this case, I\nguess the problem",
    "start": "772110",
    "end": "779810"
  },
  {
    "text": "stems from what could a\nserver assume about this TCP connection. So typically, the server\nassumes-- implicitly,",
    "start": "779810",
    "end": "788180"
  },
  {
    "text": "you might imagine-- that this\nconnection is established with the right client at\nthis IP address C. It seems",
    "start": "788180",
    "end": "797195"
  },
  {
    "text": "like a natural thing to assume. Is there any basis for\nmaking this assumption? If a server gets this\nmessage saying, here's",
    "start": "797195",
    "end": "804779"
  },
  {
    "text": "some data on this connection\nfrom a client to a server, and it has sequence number\nC, why might the server",
    "start": "804780",
    "end": "812950"
  },
  {
    "text": "conclude that this was actually\nthe real client sending this? AUDIENCE: Because the sequence\nnumber is hard to guess.",
    "start": "812950",
    "end": "818050"
  },
  {
    "text": "PROFESSOR: Right, so that's sort\nof the implicit thing going on, that it has to have the\nright sequence number C here. And in order for this\nconnection to get established,",
    "start": "818050",
    "end": "826430"
  },
  {
    "text": "the client must have\nacknowledged the server sequence number S here.",
    "start": "826430",
    "end": "831570"
  },
  {
    "text": "And the server sequence number\nS was only sent by the server to the intended\nclient IP address.",
    "start": "831570",
    "end": "839386"
  },
  {
    "text": "Yeah. AUDIENCE: How many bits are\navailable for the sequence number? PROFESSOR: So sequence numbers\nin TCP are 32 bits long.",
    "start": "839386",
    "end": "845831"
  },
  {
    "text": "That's not entirely\neasy to guess. If it was really a\nrandom 32 bit number,",
    "start": "845831",
    "end": "852025"
  },
  {
    "text": "it would be hard to just guess. And you'd probably\nwaste a lot of bandwidth trying to guess this.",
    "start": "852025",
    "end": "857636"
  },
  {
    "text": "Yeah, question. AUDIENCE: The data\nfrequency number is higher than the\ninitial sequence number?",
    "start": "857637",
    "end": "863150"
  },
  {
    "text": "PROFESSOR: Yeah, so basically,\nthese things get incremented. So every time you\nsend a syn, that counts as one byte against\nyour sequence number.",
    "start": "863150",
    "end": "869660"
  },
  {
    "text": "So this is SNC. I think actually what happens\nis this is SNC plus 1.",
    "start": "869660",
    "end": "874670"
  },
  {
    "text": "And then it goes on from there. So if you send 5 bytes, then the\nnext one is SNC initial plus 6.",
    "start": "874670",
    "end": "880117"
  },
  {
    "text": "So this just counts the\nbytes that you're sending. SYNs count as 1 byte each. Make sense?",
    "start": "880117",
    "end": "885720"
  },
  {
    "text": "Other questions about this? All right, so typically,\nor at least the way",
    "start": "885720",
    "end": "894649"
  },
  {
    "text": "the TCP specification\nrecommended that people choose\nthese sequence numbers, was to increment them at\nsome roughly fixed rate.",
    "start": "894650",
    "end": "902750"
  },
  {
    "text": "So the initial RFCs suggested\nthat you increment these things at something like 250,000\nunits, plus 250,000, per second.",
    "start": "902750",
    "end": "912350"
  },
  {
    "text": "And the reason that it\nwasn't entirely random is that these sequence\nnumbers are actually used to prevent out of\norder packets, or packets",
    "start": "912350",
    "end": "920690"
  },
  {
    "text": "from previous connections,\nfrom interfering with new connections. So if every time you\nestablished a new connection",
    "start": "920690",
    "end": "926870"
  },
  {
    "text": "you chose a completely\nrandom sequence number, then there's some chance if you\nestablish lots of connections",
    "start": "926870",
    "end": "932589"
  },
  {
    "text": "over and over that some packet\nfrom a previous connection is going to have a\nsimilar enough sequence number to your new\nconnection and is",
    "start": "932590",
    "end": "938790"
  },
  {
    "text": "going to be accepted as\na valid piece of data on that new connection. So this is something that the\nTCP designers worried a lot",
    "start": "938790",
    "end": "945000"
  },
  {
    "text": "about-- these out of order\npackets or delayed packets. So as a result, they really\nwanted these sequence numbers",
    "start": "945000",
    "end": "951290"
  },
  {
    "text": "to progress in a roughly\nmonotonic matter over time, even across connections.",
    "start": "951290",
    "end": "956900"
  },
  {
    "text": "If I opened one\nconnection, it might have the same source and\ndestination, port numbers, IP addresses, et cetera.",
    "start": "956900",
    "end": "962610"
  },
  {
    "text": "But because I established\nthis connection now instead of earlier, packets\nfrom earlier hopefully",
    "start": "962610",
    "end": "967639"
  },
  {
    "text": "aren't going to match up\nwith the sequence numbers I have for my new connection. So this was a mechanism\nto prevent confusion",
    "start": "967640",
    "end": "974279"
  },
  {
    "text": "across repeated\nconnection establishments. Yeah. AUDIENCE: So if you don't know\nexactly how much your other",
    "start": "974280",
    "end": "982983"
  },
  {
    "text": "grid that you're talking to is\ngoing to improve the sequencing pack, how do you know that\nthe packet you're getting is the next packet if there wasn't\n[INAUDIBLE] immediate packet",
    "start": "982983",
    "end": "989120"
  },
  {
    "text": "that you-- PROFESSOR: So typically you'll\nremember the last packet that you received. And if the next sequence\nnumber is exactly that,",
    "start": "989120",
    "end": "995680"
  },
  {
    "text": "then this is the next\npacket in sequence. So for example, here,\nthe server knows that I've seen exactly\nSNC plus 1 worth of data.",
    "start": "995680",
    "end": "1003936"
  },
  {
    "text": "If the next packet has\nsequence number SNC plus 1, that's the next one. AUDIENCE: So you're\nsaying that when",
    "start": "1003937",
    "end": "1009117"
  },
  {
    "text": "you establish a sequence number,\nthen even after that you're committing it-- PROFESSOR: Well,\nabsolutely, yeah, yeah.",
    "start": "1009117",
    "end": "1014428"
  },
  {
    "text": "So these sequence\nnumbers, initially when you establish it, they get\npicked according to some plan. We'll talk about that plan.",
    "start": "1014428",
    "end": "1020135"
  },
  {
    "text": "You can sort of think\nthey might be random. But over time, they have to have\nsome flow for initial sequence",
    "start": "1020135",
    "end": "1025310"
  },
  {
    "text": "numbers for connection. But within a connection, once\nthey're established, that's it. They're fixed. And they just tick\nalong as the data",
    "start": "1025310",
    "end": "1031890"
  },
  {
    "text": "gets sent on the\nconnection, exactly. Make sense?",
    "start": "1031890",
    "end": "1037270"
  },
  {
    "text": "All right, so there\nwere some plans suggested for how to manage\nthese sequence numbers. And it was actually\na reasonable plan",
    "start": "1037270",
    "end": "1043650"
  },
  {
    "text": "for avoiding duplicate packets\nin the network causing trouble. But the problem, of\ncourse, showed up",
    "start": "1043650",
    "end": "1051730"
  },
  {
    "text": "that attackers were able to\nsort of guess these sequence",
    "start": "1051730",
    "end": "1057511"
  },
  {
    "text": "numbers. Because there wasn't a lot\nof randomness being chosen. So the way that the host machine\nwould choose these sequence",
    "start": "1057511",
    "end": "1064750"
  },
  {
    "text": "numbers is they have just a\nrunning counter in memory. Every second they\nbump it by 250,000.",
    "start": "1064750",
    "end": "1070080"
  },
  {
    "text": "And every time a\nnew connection comes in, they also bump it by some\nconstant like 64k or 128k.",
    "start": "1070080",
    "end": "1075530"
  },
  {
    "text": "I forget the exact number. So this was relatively easy\nto guess, as you can tell. You send them their\nconnection request,",
    "start": "1075530",
    "end": "1082030"
  },
  {
    "text": "and you see what sequence\nnumber comes back. And then you know\nthe next one is going to be 64k higher than that.",
    "start": "1082030",
    "end": "1087950"
  },
  {
    "text": "So there wasn't a huge amount\nof randomness in this protocol. So we can just sketch\nout what this looks like.",
    "start": "1087950",
    "end": "1094310"
  },
  {
    "text": "So if I'm an attacker that\nwants to connect to a server but pretend to be from\na particular IP address,",
    "start": "1094310",
    "end": "1100690"
  },
  {
    "text": "then what I might do is send\na request to the server, very much like the\nfirst step there,",
    "start": "1100690",
    "end": "1106490"
  },
  {
    "text": "include some initial sequence\nnumber that I choose. At this point, any\nsequence number",
    "start": "1106490",
    "end": "1111995"
  },
  {
    "text": "is just as good, because\nthe server shouldn't have any assumptions about\nwhat the client's sequence number is.",
    "start": "1111995",
    "end": "1117042"
  },
  {
    "text": "Now, what does the server do? The server gets the\nsame packet as before. So it performs the\nsame way as before.",
    "start": "1117042",
    "end": "1122550"
  },
  {
    "text": "It sends a packet back to\nthe client with some server sequence number and\nacknowledges SNC.",
    "start": "1122550",
    "end": "1133000"
  },
  {
    "text": "And now the attacker,\nif the attacker wants to establish a connection,\nneeds to somehow synthesize",
    "start": "1133000",
    "end": "1138620"
  },
  {
    "text": "a packet that looks exactly like\nthe third packet over there. So it needs to send a packet\nfrom the client to the server.",
    "start": "1138620",
    "end": "1144779"
  },
  {
    "text": "That's easy enough. You just fill in these\nvalues in the header. But you have to acknowledge\nthis server sequence number SNS.",
    "start": "1144779",
    "end": "1152820"
  },
  {
    "text": "And this is where sort\nof the problems start. If the SNS value is\nrelatively easy to guess,",
    "start": "1152820",
    "end": "1158950"
  },
  {
    "text": "then the attacker is good to go. And now the server\nthinks they have an established connection with\na client coming from this IP",
    "start": "1158950",
    "end": "1166400"
  },
  {
    "text": "address. And now an attacker could\ninject data into this connection",
    "start": "1166400",
    "end": "1171920"
  },
  {
    "text": "just as before. They just synthesize\na packet that looks like this,\nhas the data, and it",
    "start": "1171920",
    "end": "1177679"
  },
  {
    "text": "has the client sequence number\nthat in fact the adversary chose. Maybe it's plus 1 here.",
    "start": "1177680",
    "end": "1183870"
  },
  {
    "text": "But it all hinges on being able\nto guess this particular server supplied sequence number.",
    "start": "1183870",
    "end": "1191400"
  },
  {
    "text": "All right, does this make sense? Yeah. AUDIENCE: What's the reason\nthat the server sequence number isn't completely random? PROFESSOR: So\nthere's two reasons.",
    "start": "1191400",
    "end": "1197790"
  },
  {
    "text": "One, as I was\ndescribing earlier, the server wants to\nmake sure that packets",
    "start": "1197790",
    "end": "1205330"
  },
  {
    "text": "from different\nconnections over time don't get confused\nfor one another. So if you establish a\nconnection from one source port",
    "start": "1205330",
    "end": "1212279"
  },
  {
    "text": "to another destination port, and\nthen you close the connection and establish another one of\nthe same source and destination",
    "start": "1212280",
    "end": "1217363"
  },
  {
    "text": "port, you want to make sure\nthe packets from one connection don't appear to be valid\nin another connection.",
    "start": "1217363",
    "end": "1224121"
  },
  {
    "text": "AUDIENCE: So the\nserver sequence number is incremented for every\none of their packets? PROFESSOR: Well, so the sequence\nnumbers within a connection,",
    "start": "1224121",
    "end": "1233397"
  },
  {
    "text": "as I was describing, get\nbumped with all the data in a connection. But there's also\nthe question of, how do you choose the\ninitial sequence number here?",
    "start": "1233397",
    "end": "1239820"
  },
  {
    "text": "And that gets bumped every\ntime a new connection is established. So the hope is that by the time\nit wraps around 2 to the 32",
    "start": "1239820",
    "end": "1247190"
  },
  {
    "text": "and comes back, there's\nbeen enough time so that old packets\nin the network",
    "start": "1247190",
    "end": "1252270"
  },
  {
    "text": "have actually been\ndropped and will not appear as duplicates anymore. So that's the reason\nwhy you don't just",
    "start": "1252270",
    "end": "1257630"
  },
  {
    "text": "choose random points,\nor they didn't initially choose random points. Yeah. AUDIENCE: So this is a\nproblem between connections,",
    "start": "1257630",
    "end": "1264309"
  },
  {
    "text": "for a connection between the\nsame guide, the same client, the same server, the same source\nport, the same destination.",
    "start": "1264309",
    "end": "1269410"
  },
  {
    "text": "And we're worried\nabout old packets-- PROFESSOR: So this is what the\noriginal, yeah, TCP designers were worried about,\nwhich is why they",
    "start": "1269410",
    "end": "1274809"
  },
  {
    "text": "prescribed this way of picking\nthese initial sequence numbers. AUDIENCE: If you have\ndifferent new connections, you could differentiate. PROFESSOR: That's right, yeah.",
    "start": "1274810",
    "end": "1279900"
  },
  {
    "text": "AUDIENCE: So then I don't see\nwhy the incrementing stuff and not just take randomly. PROFESSOR: So I think the\nreason they don't pick randomly",
    "start": "1279900",
    "end": "1286850"
  },
  {
    "text": "is that if you did pick\nrandomly, and you established, I don't know, 1,000 connections\nwithin a short amount of time from the same source\nto the same destination,",
    "start": "1286850",
    "end": "1294039"
  },
  {
    "text": "then, well, every one of them\nis some random value of module 2 to the 32. And now there's a\nnontrivial chance",
    "start": "1294040",
    "end": "1300920"
  },
  {
    "text": "that some packet\nfrom one connection will be delayed in the network,\nand eventually show up again, and will get confused for a\npacket from another connection.",
    "start": "1300920",
    "end": "1308760"
  },
  {
    "text": "This is just sort of\nnothing to do with security. This is just their\ndesign consideration initially for reliable delivery.",
    "start": "1308760",
    "end": "1315289"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] some other\nclient to the server, right? PROFESSOR: Sorry? AUDIENCE: This is [INAUDIBLE]\nsome other client?",
    "start": "1315290",
    "end": "1321830"
  },
  {
    "text": "PROFESSOR: That's right, yeah. So we haven't actually said\nwhy this is interesting at all for the attacker to do. Why bother?",
    "start": "1321830",
    "end": "1326879"
  },
  {
    "text": "You could just go from\nhis old IP address, right? AUDIENCE: So what happens\nfor the server [INAUDIBLE]?",
    "start": "1326880",
    "end": "1332855"
  },
  {
    "text": " PROFESSOR: Yes, this is actually\nan interesting question.",
    "start": "1332855",
    "end": "1339720"
  },
  {
    "text": "What happens here? So this packet doesn't\njust get dropped. It actually goes\nto this computer. And what happens?",
    "start": "1339720",
    "end": "1346426"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE], they\njust mentioned you try and do it like they would\ntry and do it when the other computer was\nupdating or rebooting or off,",
    "start": "1346426",
    "end": "1354018"
  },
  {
    "text": "or something. PROFESSOR: Right,\ncertainly they felt, oh, that computer is offline. The packet will\njust get dropped, and you don't have to\nworry about it too much.",
    "start": "1354019",
    "end": "1359720"
  },
  {
    "text": "If a computer is actually\nlistening on that IP address, then in the TCP\nprotocol, you're supposed",
    "start": "1359720",
    "end": "1365065"
  },
  {
    "text": "to send a reset packet\nresetting the connection. Because this is not a connection\nthat computer C knows about.",
    "start": "1365065",
    "end": "1371630"
  },
  {
    "text": "And in TCP, this is presumed\nto be because, oh, this is some old packet that\nI requested long ago,",
    "start": "1371630",
    "end": "1377640"
  },
  {
    "text": "but I've since\nforgotten about it. So the machine C here might send\na packet to the server saying,",
    "start": "1377640",
    "end": "1384850"
  },
  {
    "text": "I want a reset. I actually forget exactly which\nsequence number goes in there.",
    "start": "1384850",
    "end": "1390502"
  },
  {
    "text": "But the client C here knows\nall the sequence numbers and send any sequence\nnumber as necessary and reset this connection.",
    "start": "1390503",
    "end": "1397580"
  },
  {
    "text": "So if this computer C\nis going to do this, then it might interfere\nwith your plan to establish a connection.",
    "start": "1397580",
    "end": "1402948"
  },
  {
    "text": "Because when S gets\nthis packet, it says, oh, sure, if\nyou don't want it, I'll reset your connection. There's some\nimplementation-ish bugs",
    "start": "1402948",
    "end": "1410610"
  },
  {
    "text": "that you might exploit, or at\nleast the author talks about, and an potentially\nexploiting, that would prevent",
    "start": "1410610",
    "end": "1418215"
  },
  {
    "text": "client C from responding. So for example, if you flood\nC with lots of packets, it's an easy way to get\nhim to drop this one.",
    "start": "1418215",
    "end": "1424633"
  },
  {
    "text": "It turns out there are other\nmore interesting bugs that don't require flooding C with\nlots of packets that still get C to drop this\npacket, or at least it",
    "start": "1424633",
    "end": "1431200"
  },
  {
    "text": "used to on some\nimplementations on TCP stacks. Yeah. AUDIENCE: Presumably,\nmost firewalls would also [INAUDIBLE].",
    "start": "1431200",
    "end": "1437888"
  },
  {
    "text": "PROFESSOR: This one? AUDIENCE: No, the SYN. PROFESSOR: This one. AUDIENCE: That\ncame into a client, and a client didn't originally\nsend a SYN to that server.",
    "start": "1437888",
    "end": "1445203"
  },
  {
    "text": "And the firewall is\ngoing to drop it. PROFESSOR: It depends, yeah. So certainly if you have a very\nsophisticated stateful firewall",
    "start": "1445203",
    "end": "1452590"
  },
  {
    "text": "that keeps track of all existing\nconnections, or for example if you have a NAT,\nthen this might happen. On the other hand, a NAT\nmight actually send the RST",
    "start": "1452590",
    "end": "1460640"
  },
  {
    "text": "on behalf of the client. So it's not clear. I think this is not as common.",
    "start": "1460640",
    "end": "1466450"
  },
  {
    "text": "So for example, on\na Comcast network, I certainly don't have anyone\nintercepting these packets",
    "start": "1466450",
    "end": "1472500"
  },
  {
    "text": "and maintaining state for me\nand sending RSTs on my behalf or anything like that. Yeah. AUDIENCE: So why\ncan't the server",
    "start": "1472500",
    "end": "1478250"
  },
  {
    "text": "have independent\nsequence numbers for each possible source? PROFESSOR: Right, so this is in\nfact what TCP stacks do today.",
    "start": "1478250",
    "end": "1486260"
  },
  {
    "text": "This is one example of how you\nfix this problem in a backwards compatible manner. So we'll get to\nexactly the formulation",
    "start": "1486260",
    "end": "1492285"
  },
  {
    "text": "of how you arrange this. But yeah, it turns out that\nif you look at this carefully, as you're doing, you don't need\nto have this initial sequence",
    "start": "1492285",
    "end": "1499630"
  },
  {
    "text": "number be global. You just scope it to every\nsource/destination pair. And then you have all\nthe duplicate avoidance",
    "start": "1499630",
    "end": "1506500"
  },
  {
    "text": "properties we had before, and\nyou have some security as well.",
    "start": "1506500",
    "end": "1511560"
  },
  {
    "text": "So just to sort\nof write this out on the board of how\nthe attacker is getting",
    "start": "1511560",
    "end": "1518549"
  },
  {
    "text": "this initial sequence number,\nthe attacker would probably just send a connection\nfrom its own IP address",
    "start": "1518550",
    "end": "1523770"
  },
  {
    "text": "to the server saying, I want\nto establish a new connection, and the server would\nsend a response",
    "start": "1523770",
    "end": "1530506"
  },
  {
    "text": "back to the attacker containing\nits own sequence number S. And if the SNS for\nthis connection",
    "start": "1530506",
    "end": "1536590"
  },
  {
    "text": "and the SNS for this\nconnection are related, then this is a problem. But you're saying, let's\nmake them not related.",
    "start": "1536590",
    "end": "1542539"
  },
  {
    "text": "Because this is from\na different address. Then this is not\na problem anymore. You can't guess what\nthis SNS is going",
    "start": "1542540",
    "end": "1547630"
  },
  {
    "text": "to be based on this SNS\nfor a different connection. Yeah.",
    "start": "1547630",
    "end": "1552798"
  },
  {
    "text": "AUDIENCE: So you still\nhave a collision problem, because you could\nengage the 32 bits by the addresses of your peers.",
    "start": "1552798",
    "end": "1558773"
  },
  {
    "text": "So you have a lot of ports\nfor each one of these. So you still have\nconflicting sequence numbers",
    "start": "1558774",
    "end": "1564252"
  },
  {
    "text": "for all of these connections\nthat you're getting, right? PROFESSOR: So these\nsequence numbers are specific, as it\nturns out, to an IP",
    "start": "1564252",
    "end": "1571156"
  },
  {
    "text": "address and a port number\nsource/destination duple. So if it's different\nports, then they",
    "start": "1571156",
    "end": "1576360"
  },
  {
    "text": "don't interfere with\neach other at all. AUDIENCE: Oh, because\nyou're using the port-- PROFESSOR: That's right,\nyeah, you also use the port in this as well.",
    "start": "1576360",
    "end": "1581503"
  },
  {
    "text": "AUDIENCE: Because I\nthought those ports-- PROFESSOR: Yeah, so the ports\nare sort of below the sequence numbers in some way\nof thinking about it.",
    "start": "1581504",
    "end": "1587987"
  },
  {
    "text": "Question? AUDIENCE: If the sequence\nnumbers are global, then doesn't the\nattacker [INAUDIBLE]?",
    "start": "1587987",
    "end": "1593910"
  },
  {
    "text": " PROFESSOR: Yeah, good point. So in fact, if the server\nincrements the sequence number",
    "start": "1593910",
    "end": "1600779"
  },
  {
    "text": "by, I don't know,\n64k I think it is, or it was, for every connection,\nthen, well, you connect.",
    "start": "1600780",
    "end": "1606885"
  },
  {
    "text": "And then maybe five\nother people connect. And then you have\nto do this attack. So to some extent, you're right,\nthis is a little troublesome.",
    "start": "1606885",
    "end": "1614790"
  },
  {
    "text": "On the other hand,\nyou could probably arrange it for your packet\nhere to be delivered just",
    "start": "1614790",
    "end": "1621860"
  },
  {
    "text": "before this packet. So if you send these\nguys back to back, then there's a good chance\nthey'll arrive at the server",
    "start": "1621860",
    "end": "1628200"
  },
  {
    "text": "back to back. The server will get\nthis one, respond with this sequence number. It'll get the next\none, this one,",
    "start": "1628200",
    "end": "1633580"
  },
  {
    "text": "respond with the sequence\nnumber right afterwards. And then you know exactly what\nto put in this third packet",
    "start": "1633580",
    "end": "1639170"
  },
  {
    "text": "in your sequence. So I think this is\nnot a foolproof method",
    "start": "1639170",
    "end": "1644620"
  },
  {
    "text": "of connecting to a server. There's some guessing involved. But if you carefully\narrange your packets right,",
    "start": "1644620",
    "end": "1649720"
  },
  {
    "text": "then it's quite easy to\nmake the right guess. Or maybe you try several\ntimes, and you'll get lucky. Yeah.",
    "start": "1649720",
    "end": "1655480"
  },
  {
    "text": "AUDIENCE: So even if\nit's totally random, and you have to guess\nit, there are only like 4 billion possibilities.",
    "start": "1655480",
    "end": "1660998"
  },
  {
    "text": "It's not a huge number, right? I feel like in the\ncourse of a year, you should be able to\nprobably get through.",
    "start": "1660998",
    "end": "1666299"
  },
  {
    "text": "PROFESSOR: Right, yeah, so\nyou're absolutely right. You shouldn't really be relying\non TCP to provide security",
    "start": "1666300",
    "end": "1673500"
  },
  {
    "text": "very strongly. Because you're right, it's\nonly 4 billion guesses. And you can probably\nsend that many packets",
    "start": "1673500",
    "end": "1679370"
  },
  {
    "text": "certainly within a day if you\nhave a fast enough connection. ",
    "start": "1679370",
    "end": "1685510"
  },
  {
    "text": "So it's sort of an\ninteresting argument we're having here in the\nsense that at some level, TCP is hopefully insecure.",
    "start": "1685510",
    "end": "1691120"
  },
  {
    "text": "Because it's only 32 bits. There's no way we\ncould make it secure. But I think many\napplications rely on it enough that not providing\nany security at all",
    "start": "1691120",
    "end": "1698740"
  },
  {
    "text": "is so much of a nuisance that\nit really becomes a problem. But you're absolutely right.",
    "start": "1698740",
    "end": "1704060"
  },
  {
    "text": "In practice, you do want to\ndo some sort of encryption on top of this that\nwill provide stronger",
    "start": "1704060",
    "end": "1709350"
  },
  {
    "text": "guarantees that no one\ntampered with your data, but where the keys are\nmore than 32 bits long. ",
    "start": "1709350",
    "end": "1719120"
  },
  {
    "text": "It still turns out to be\nuseful to prevent people from tampering with TCP\nconnections in most cases.",
    "start": "1719120",
    "end": "1725811"
  },
  {
    "text": "All right, other questions? All right, so let's see\nwhat actually goes wrong. Why is it a bad\nthing if people are",
    "start": "1725812",
    "end": "1733360"
  },
  {
    "text": "able to spoof TCP connections\nfrom arbitrary addresses? So one reason why this\nis bad is if there",
    "start": "1733360",
    "end": "1740335"
  },
  {
    "text": "is any kind of\nIP-based authorization. ",
    "start": "1740335",
    "end": "1748240"
  },
  {
    "text": "So if some server decides\nwhether an operation is going to be allowed or not based on\nthe IP address it comes from,",
    "start": "1748240",
    "end": "1754169"
  },
  {
    "text": "then this is\npotentially going to be a problem for an attacker\nwho spoofed connections from an arbitrary\nsource address.",
    "start": "1754170",
    "end": "1761440"
  },
  {
    "text": "So one example where\nthis was a problem-- and it largely\nisn't anymore-- is this family of r commands,\nthings like rlogin.",
    "start": "1761440",
    "end": "1770910"
  },
  {
    "text": "So it used to be the case\nthat you could run something like rlogin into a\nmachine, let's say athena.dialup.mit.edu. ",
    "start": "1770910",
    "end": "1781360"
  },
  {
    "text": "And if your connection was\ncoming from a host at MIT, then this rlogin command would\nsucceed if you say, oh yeah,",
    "start": "1781360",
    "end": "1789000"
  },
  {
    "text": "I'm user Alice on this machine. Let me log in as user Alice\nonto this other machine. And it'll just trust that\nall the machines at mit.edu",
    "start": "1789000",
    "end": "1795548"
  },
  {
    "text": "are trustworthy to\nmake these statements. I should say I think\ndial-up never actually",
    "start": "1795548",
    "end": "1800700"
  },
  {
    "text": "had this problem. It was using Cerberus\nfrom the very beginning. But other systems certainly\ndid have such problems.",
    "start": "1800700",
    "end": "1807360"
  },
  {
    "text": "And this is an example of\nusing the IP address where the connection is coming from\nsome sort of authentication",
    "start": "1807360",
    "end": "1815170"
  },
  {
    "text": "mechanism for whether\nthe caller or the client is trustworthy or not.",
    "start": "1815170",
    "end": "1820470"
  },
  {
    "text": "So this certainly\nused to be a problem, isn't a problem anymore. So relying on IP seems like\nsuch a clearly bad plan.",
    "start": "1820470",
    "end": "1827120"
  },
  {
    "text": "Yet, this actually\nis still the case. So rlogin is gone. It was recently replaced\nby SSH now, which is good.",
    "start": "1827120",
    "end": "1833574"
  },
  {
    "text": "On the other hand,\nthere are still many other examples\nof protocols that rely on IP-based authentication.",
    "start": "1833574",
    "end": "1840530"
  },
  {
    "text": "One of them is SMTP. So when you send email, you\nuse SMTP to talk to some mail",
    "start": "1840530",
    "end": "1845555"
  },
  {
    "text": "server to send a message. And to prevent spam,\nmany SMTP servers",
    "start": "1845555",
    "end": "1851120"
  },
  {
    "text": "will only accept\nincoming messages from a particular\nsource IP address. So for example,\nComcast's mail server",
    "start": "1851120",
    "end": "1857460"
  },
  {
    "text": "will only accept mail\nfrom Comcast IP addresses. Same for MIT mail servers--\nwill only accept mail",
    "start": "1857460",
    "end": "1862570"
  },
  {
    "text": "from MIT IP addresses. Or there was at least\none server that ISNT runs that has this property.",
    "start": "1862570",
    "end": "1868910"
  },
  {
    "text": "So this is the case\nwhere it's still using IP-based authentication. Here it's not so bad.",
    "start": "1868910",
    "end": "1874905"
  },
  {
    "text": "Worst case, you'll\nsend some piece of spam through the mail server. So that's probably why\nthey're still using it, whereas things that allow you\nto log into an arbitrary account",
    "start": "1874905",
    "end": "1883710"
  },
  {
    "text": "stopped using IP-based\nauthentication. So does this make sense,\nwhy this is a bad plan?",
    "start": "1883710",
    "end": "1889820"
  },
  {
    "text": "And just to double check,\nsuppose that some server was using rlogin. What would you do to attack it?",
    "start": "1889820",
    "end": "1895845"
  },
  {
    "text": "What bad thing would happen? Suggestions?",
    "start": "1895845",
    "end": "1901590"
  },
  {
    "text": "Yeah. AUDIENCE: Just getting\ninto your computer, and then make a user that\nyou want to log into, and then you get\ninto the network.",
    "start": "1901590",
    "end": "1907898"
  },
  {
    "text": "PROFESSOR: Yeah, so basically\nyou get your computer. You synthesize this data to look\nlike a legitimate set of rlogin",
    "start": "1907898",
    "end": "1913955"
  },
  {
    "text": "commands that say,\nlog in as this user and run this command\nin my Unix shell there.",
    "start": "1913955",
    "end": "1918980"
  },
  {
    "text": "You sort of synthesize this data\nand you mount this whole attack and send this data as if a\nlegitimate user was interacting",
    "start": "1918980",
    "end": "1924295"
  },
  {
    "text": "with an rlogin client, and\nthen you're good to go. OK, so this is one\nreason why you probably",
    "start": "1924295",
    "end": "1931280"
  },
  {
    "text": "don't want your TCP sequence\nnumbers to be so guessable. Another problem is\nthese reset attacks.",
    "start": "1931280",
    "end": "1937340"
  },
  {
    "text": "So much like we were able\nto send a SYN packet,",
    "start": "1937340",
    "end": "1943120"
  },
  {
    "text": "if you know someone's\nsequence number, you could also send\na reset packet. We sort of briefly\ntalked about it here as the legitimate\nclient potentially",
    "start": "1943120",
    "end": "1949750"
  },
  {
    "text": "sending a reset to reset\nthe fake connection that the attacker\nis establishing.",
    "start": "1949750",
    "end": "1955200"
  },
  {
    "text": "But in a similar\nvain, the adversary could try to send reset packets\nfor an existing connection if there's some way\nthat the adversary knows",
    "start": "1955200",
    "end": "1962400"
  },
  {
    "text": "what your sequence number\nis on that connection. So this is actually not clear\nif this is such a big problem",
    "start": "1962400",
    "end": "1968850"
  },
  {
    "text": "or or. At some level,\nmaybe you should be assuming that all your\nTCP connections could be broken at any time anyway. It's not like the\nnetwork is reliable.",
    "start": "1968850",
    "end": "1975210"
  },
  {
    "text": "So maybe you should be expecting\nyour connections to drop. But one place where\nthis turned out to be particularly not a\ngood assumption to make",
    "start": "1975210",
    "end": "1983000"
  },
  {
    "text": "is in the case of routers\ntalking to one another. So if you have\nmultiple routers that",
    "start": "1983000",
    "end": "1988340"
  },
  {
    "text": "speak some routing\nprotocol, then they're connected, of course,\nby some physical links.",
    "start": "1988340",
    "end": "1993590"
  },
  {
    "text": "But over some physical\nlinks, they actually speak some network protocol. And that network\nprotocol runs over TCP.",
    "start": "1993590",
    "end": "1999671"
  },
  {
    "text": "So there's actually\nsome TCP session running over each of\nthese physical links that the routers use to\nexchange routing information.",
    "start": "1999671",
    "end": "2006672"
  },
  {
    "text": "So this is certainly the\ncase for this protocol called BGP we'll talk about\na bit more in a second.",
    "start": "2006672",
    "end": "2012250"
  },
  {
    "text": "And BGP uses the fact\nthat the TCP connection is alive to also infer\nthat the link is alive.",
    "start": "2012250",
    "end": "2019580"
  },
  {
    "text": "So if the TCP connection\nbreaks, then the routers assume the link broke. And they recompute all\ntheir routing tables.",
    "start": "2019580",
    "end": "2026350"
  },
  {
    "text": "So if an adversary\nwants to mount some sort of a denial\nof service attack here, they could try to\nguess the sequence numbers of these routers\nand reset these sessions.",
    "start": "2026350",
    "end": "2034520"
  },
  {
    "text": "So if the TCP session between\ntwo routers goes down, both routers are like,\noh, this link is dead.",
    "start": "2034520",
    "end": "2039750"
  },
  {
    "text": "We have to recompute\nall the routing tables, and the routes change. And then you might shoot\ndown another link, and so on.",
    "start": "2039750",
    "end": "2045235"
  },
  {
    "text": "So this is a bit of\na worrisome attack, not because it violates\nsomeone's secrecy, et cetera,",
    "start": "2045235",
    "end": "2052489"
  },
  {
    "text": "or at least not directly,\nbut more because it really causes a lot of\navailability problems",
    "start": "2052489",
    "end": "2059310"
  },
  {
    "text": "for other users in the system. Yeah. AUDIENCE: So if\nyou're an attacker, and you wanted to target\none particular user,",
    "start": "2059310",
    "end": "2066169"
  },
  {
    "text": "could you just keep\nsending connection requests to a server on behalf\nof his IP and make",
    "start": "2066170",
    "end": "2072594"
  },
  {
    "text": "him keep dropping\nhis connections to the servers and so\nyou just [INAUDIBLE]?",
    "start": "2072594",
    "end": "2078679"
  },
  {
    "text": "PROFESSOR: Well, so it\nrequires you guessing. So you're saying,\nsuppose I'm using Gmail, and you want to stop me from\nlearning something in Gmail,",
    "start": "2078679",
    "end": "2085835"
  },
  {
    "text": "so just send packets\nto my machine pretending to be from Gmail. Well, you have to guess the\nright source and destination",
    "start": "2085835",
    "end": "2091980"
  },
  {
    "text": "port numbers. The destination port\nnumber is probably 443, because I'm using HTTPS. But the source port\nnumber is going",
    "start": "2091980",
    "end": "2097370"
  },
  {
    "text": "to be some random 16-bit thing. And it's also going to be the\ncase that probably the sequence numbers are going\nto be different.",
    "start": "2097370",
    "end": "2103070"
  },
  {
    "text": "So unless you guess a\nsequence number that's within my TCP window, which\nis in order of probably",
    "start": "2103070",
    "end": "2109650"
  },
  {
    "text": "tens of kilobytes,\nyou're also going to be not successful\nin that regard. So you have to guess a\nfair amount of stuff.",
    "start": "2109650",
    "end": "2117350"
  },
  {
    "text": "There's no sort\nof oracle access. You can't just query the\nserver and say, well, what is that guy's sequence number?",
    "start": "2117350",
    "end": "2123130"
  },
  {
    "text": "So that's the reason why that\ndoesn't work out as well. So again, many of\nthese issues were",
    "start": "2123130",
    "end": "2130039"
  },
  {
    "text": "fixed, including\nthis RST-based thing, especially for BGP routers. ",
    "start": "2130040",
    "end": "2135890"
  },
  {
    "text": "There was actually two\nsort of amusing fixes. One really shows you\nhow you can carefully",
    "start": "2135890",
    "end": "2141389"
  },
  {
    "text": "exploit existing things\nor take advantage of them to fix particular problems. Here, the insight is\nthat these routers only",
    "start": "2141389",
    "end": "2147746"
  },
  {
    "text": "want to talk to each\nother, not to someone else over the network. And as a result,\nif the packet is",
    "start": "2147747",
    "end": "2152990"
  },
  {
    "text": "coming not from the immediate\nrouter next across the link, but from someone else, I want to\ndrop this packet all together.",
    "start": "2152990",
    "end": "2158442"
  },
  {
    "text": "And what the designers of these\nwriting protocols realized is that there's this wonderful\nfield in a packet called time",
    "start": "2158442",
    "end": "2164369"
  },
  {
    "text": "to live. It's an 8-bit field that gets\ndecremented by every router to make sure that packets\ndon't go into an infinite loop.",
    "start": "2164370",
    "end": "2171840"
  },
  {
    "text": "So the highest this TTL\nvalue could ever be is 255. And then it'll get\ndecremented from there.",
    "start": "2171840",
    "end": "2177630"
  },
  {
    "text": "So what these writing\nprotocols do-- it's sort of a\nclever hack-- is they",
    "start": "2177630",
    "end": "2183000"
  },
  {
    "text": "reject any packet with a\nTTL value that's not 255. Because if a packet\nhas a value of 255,",
    "start": "2183000",
    "end": "2189660"
  },
  {
    "text": "it must have come\nfrom the router just on the other\nside of this link. And if the an adversary\ntries to inject any packet",
    "start": "2189660",
    "end": "2195630"
  },
  {
    "text": "to tamper with this\nexisting BGP connection, it'll have a TTL\nvalue less than 255, because it'll be decremented\nby some other routers",
    "start": "2195630",
    "end": "2201935"
  },
  {
    "text": "along the path,\nincluding this one. And then it'll just get\nrejected by the recipient.",
    "start": "2201935",
    "end": "2207766"
  },
  {
    "text": "So this is one example\nof a clever combination of techniques that's\nbackwards compatible and solves this very\nspecific problem.",
    "start": "2207766",
    "end": "2214658"
  },
  {
    "text": "Yeah. AUDIENCE: Doesn't the\nbottom right router also send something\nwith a TTL of 255? PROFESSOR: Yeah, so these\nrouters are actually--",
    "start": "2214658",
    "end": "2220670"
  },
  {
    "text": "this is a physical router. And it knows these\nare separate links. So it looks at the TTL\nand which link it came on.",
    "start": "2220670",
    "end": "2227130"
  },
  {
    "text": "So if a packet came\nin on this link, it will not accept it\nfor this TCP connection.",
    "start": "2227130",
    "end": "2232839"
  },
  {
    "text": "But you're right. For the most part,\nthese routers trust their immediate neighbors.",
    "start": "2232840",
    "end": "2239450"
  },
  {
    "text": "It need not necessarily\nbe the case. But if you keep\nseeing this problem, and you know you've\nimplemented this hack, then it must be one\nof your neighbors.",
    "start": "2239450",
    "end": "2244720"
  },
  {
    "text": "You're going to look. TCP dumped these interfaces. Why are you sending me\nthese reset packets? This problem is not as big.",
    "start": "2244720",
    "end": "2251119"
  },
  {
    "text": "You can manage it by\nsome Auto Pan mechanism. Make sense? All right, there are\nother fixes for BGP",
    "start": "2251120",
    "end": "2258450"
  },
  {
    "text": "where they implemented some\nform of header authentication, MD5 header\nauthentication as well.",
    "start": "2258450",
    "end": "2263480"
  },
  {
    "text": "But they're really targeting\nthis particular application where this reset attack\nis particularly bad. This is still a problem today.",
    "start": "2263480",
    "end": "2269975"
  },
  {
    "text": "If there's some\nlong-lived connection out there that I really\nwant to shoot down, I just have to send some\nlarge number of RST packets,",
    "start": "2269975",
    "end": "2278480"
  },
  {
    "text": "probably on the order\nof hundreds of thousands or so, but probably\nnot exactly 4 billion.",
    "start": "2278480",
    "end": "2284770"
  },
  {
    "text": "Because the servers\nare actually somewhat lax in terms of which sequence\nnumber they accept for a reset.",
    "start": "2284770",
    "end": "2290520"
  },
  {
    "text": "It can be any packet\nwithin a certain window. And in that case, I could\nprobably, or any attacker,",
    "start": "2290520",
    "end": "2296730"
  },
  {
    "text": "reset an existing\nconnection with a modest but not a huge amount of effort. That's still a problem.",
    "start": "2296730",
    "end": "2302738"
  },
  {
    "text": "And people haven't really found\nany great solution for that. ",
    "start": "2302738",
    "end": "2308640"
  },
  {
    "text": "All right, and I guess the\nsort of last bad thing that happens because these\nsequence numbers are somewhat",
    "start": "2308640",
    "end": "2313700"
  },
  {
    "text": "predictable is\njust data injection into existing connections.",
    "start": "2313700",
    "end": "2319280"
  },
  {
    "text": "So suppose there is some\nprotocol like rlogin, but maybe rlogin doesn't--\nsuppose we have some",
    "start": "2319280",
    "end": "2327650"
  },
  {
    "text": "hypothetical protocol\nthat's kind of like rlogin, but actually it doesn't do\nIP-based authentication. You have to type\nin your password",
    "start": "2327650",
    "end": "2333364"
  },
  {
    "text": "to log in, all this great stuff. The problem is once you've\ntyped your password, maybe your TCP connection\nis just established",
    "start": "2333364",
    "end": "2339225"
  },
  {
    "text": "and can accept arbitrary data. So wait for one of you guys\nto log into a machine, type in your password. I don't know what\nthat password is.",
    "start": "2339225",
    "end": "2345235"
  },
  {
    "text": "But once you've\nestablished TCP connection, I'll just try to guess\nyour sequence number and inject some data into\nyour existing connection.",
    "start": "2345235",
    "end": "2351332"
  },
  {
    "text": "So if I can guess your\nsequence numbers correctly, then this allows me\nto make it pretend like you've typed some command\nafter you authenticated",
    "start": "2351332",
    "end": "2358255"
  },
  {
    "text": "correctly with your password. So this all sort of\nsuggests that you really don't want to rely on these\n32-bit sequence numbers",
    "start": "2358255",
    "end": "2368260"
  },
  {
    "text": "for providing security. But let's actually see what\nmodern TCP stacks actually",
    "start": "2368260",
    "end": "2373660"
  },
  {
    "text": "do to try to mitigate\nthis problem. So as we were sort\nof discussing, I guess one approach that\nwe'll look at in the next two",
    "start": "2373660",
    "end": "2381170"
  },
  {
    "text": "lectures is how to\nimplement some security at the application level. So we'll use cryptography\nto authenticate and encrypt",
    "start": "2381170",
    "end": "2390160"
  },
  {
    "text": "and sign and verify messages\nat the application level without really\ninvolving TCP so much.",
    "start": "2390160",
    "end": "2397420"
  },
  {
    "text": "But there are some\nexisting applications that would benefit from\nmaking this slightly better,",
    "start": "2397420",
    "end": "2403950"
  },
  {
    "text": "at least not make it so easy\nto exploit these problems. And the way that\nI guess people do",
    "start": "2403950",
    "end": "2409359"
  },
  {
    "text": "this in practice today-- for\nexample Linux and Windows-- is they implement the suggestion\nthat John gave earlier,",
    "start": "2409360",
    "end": "2417359"
  },
  {
    "text": "that we maintain\ndifferent initial sequence numbers for every\nsource destination pair.",
    "start": "2417360",
    "end": "2422819"
  },
  {
    "text": "So what most TCP SYN\nimplementations do",
    "start": "2422820",
    "end": "2429110"
  },
  {
    "text": "is they still compute this\ninitial sequence number as we were computing before.",
    "start": "2429110",
    "end": "2434589"
  },
  {
    "text": "So this is the old\nstyle ISN, let's say.",
    "start": "2434590",
    "end": "2439600"
  },
  {
    "text": "And in order to\nactually generate the actual ISN for any\nparticular connection,",
    "start": "2439600",
    "end": "2444650"
  },
  {
    "text": "we're going to add a\nrandom 32-bit offset. So we're going to include\nsome sort of a function.",
    "start": "2444650",
    "end": "2451005"
  },
  {
    "text": "Think of it like as like\na hash function like SHA-1 or something maybe better.",
    "start": "2451005",
    "end": "2456295"
  },
  {
    "text": "And this is going to be\na function of the source IP, the source port\nnumber, the destination IP",
    "start": "2456295",
    "end": "2465140"
  },
  {
    "text": "address, destination port,\nand some sort of a secret key",
    "start": "2465140",
    "end": "2470819"
  },
  {
    "text": "that only the server\nknows in this case. So this has the\nnice property that",
    "start": "2470820",
    "end": "2477289"
  },
  {
    "text": "within any particular\nconnection, as identified by a source\nand destination IP port pair,",
    "start": "2477290",
    "end": "2484147"
  },
  {
    "text": "it still preserves all\nthese nice properties of this old style sequence\nnumber algorithm had.",
    "start": "2484147",
    "end": "2490000"
  },
  {
    "text": "But if you have connections from\ndifferent source/destination tuples, then there's\nnothing you can",
    "start": "2490000",
    "end": "2497230"
  },
  {
    "text": "learn about the exact value\nof another connection tuple's sequence number.",
    "start": "2497230",
    "end": "2502780"
  },
  {
    "text": "And in fact, you'll have\nto guess this key in order to infer that value. And hopefully the server,\npresumably the OS kernel,",
    "start": "2502780",
    "end": "2510579"
  },
  {
    "text": "stores this key\nsomewhere in its memory and doesn't give it\nout to anyone else. So this is how pretty\nmuch most TCP stacks",
    "start": "2510580",
    "end": "2516420"
  },
  {
    "text": "deal with this\nparticular problem today to the extent allowed\nby the total 32-bit sequence",
    "start": "2516420",
    "end": "2522896"
  },
  {
    "text": "number. It's not great,\nbut sort of works. Yeah. AUDIENCE: Could you\nrepeat that again? Is the key unique to--",
    "start": "2522896",
    "end": "2529480"
  },
  {
    "text": "PROFESSOR: So when\nmy machine boots up, or when any machine boots up,\nit generates a random key. Every time you reboot it\nit generates a new key.",
    "start": "2529480",
    "end": "2536530"
  },
  {
    "text": "And this means that\nevery time that for a particular\nsource/destination pair,",
    "start": "2536530",
    "end": "2544680"
  },
  {
    "text": "the sequence numbers\nadvance at the same rate as controlled by this. So for a given\nsource/destination pair, this thing is fixed.",
    "start": "2544680",
    "end": "2550850"
  },
  {
    "text": "So you observe your\nsequence numbers evolving according to\nyour initial sequence numbers for new connections\nevolving according",
    "start": "2550850",
    "end": "2556596"
  },
  {
    "text": "to a particular algorithm. So that still provides all these\ndefences against old packets",
    "start": "2556596",
    "end": "2563915"
  },
  {
    "text": "from previous connections being\ninjected into new connections, just like packet\nreordering problems.",
    "start": "2563915",
    "end": "2570430"
  },
  {
    "text": "So that still works. And that's the only\nreal thing for which we needed this sequence\nnumber choosing algorithms",
    "start": "2570430",
    "end": "2576030"
  },
  {
    "text": "to prevent these duplicate\npackets from causing problems. However, the thing that\nwe were exploiting before,",
    "start": "2576030",
    "end": "2581660"
  },
  {
    "text": "which is that if\nyou get the sequence number for one connection\nfrom A to S, then",
    "start": "2581660",
    "end": "2588130"
  },
  {
    "text": "from that you can infer\nthe sequence number for a different connection. That's now gone. Because every connection\nhas a different",
    "start": "2588130",
    "end": "2594750"
  },
  {
    "text": "offset in this 32-bit space as\nimplemented by its F function.",
    "start": "2594750",
    "end": "2599790"
  },
  {
    "text": "So this completely decouples\nthe initial sequence numbers",
    "start": "2599790",
    "end": "2605085"
  },
  {
    "text": "seen by every connection. Yeah. AUDIENCE: What's the point\nin including the key?",
    "start": "2605085",
    "end": "2611300"
  },
  {
    "text": "PROFESSOR: Well, if you\ndon't include the key, then I can connect to you. I'll compute the same function\nF. I'll subtract it out.",
    "start": "2611300",
    "end": "2617487"
  },
  {
    "text": "I'll get this. I'll compute this function F\nfor the connection I actually want to fake. And I'll guess what the initial\nsequence number for that one",
    "start": "2617487",
    "end": "2622615"
  },
  {
    "text": "is going to be. AUDIENCE: So can you--\nbecause machines now restart infrequently, can you still\n[INAUDIBLE] by reversing--",
    "start": "2622615",
    "end": "2630630"
  },
  {
    "text": "PROFESSOR: I think\ntypically this function F is something like a\ncryptographically secure hash function, which has a\nsemi-proved property that it's",
    "start": "2630630",
    "end": "2641557"
  },
  {
    "text": "very difficult. It's\ncryptographically hard to invert it. So even if you were given the\nliteral inputs and outputs",
    "start": "2641557",
    "end": "2647160"
  },
  {
    "text": "of this hash function\nexcept for this key part,",
    "start": "2647160",
    "end": "2654058"
  },
  {
    "text": "it would be very\nhard for you guess what this key is\ncryptographically, even in an isolated setting.",
    "start": "2654059",
    "end": "2659324"
  },
  {
    "text": "So hopefully this will be at\nleast as hard in this setting as well. We'll talk a little bit more\nabout what these functions",
    "start": "2659324",
    "end": "2666615"
  },
  {
    "text": "F are a bit later on and how\nyou to use them correctly. Make sense?",
    "start": "2666615",
    "end": "2671650"
  },
  {
    "text": "Other questions of this\nproblem and solution?",
    "start": "2671650",
    "end": "2677140"
  },
  {
    "text": "All right, so in\nfact, this was mostly sort of an example of these\nTCP sequence number attacks",
    "start": "2677140",
    "end": "2684255"
  },
  {
    "text": "that aren't as relevant anymore. Because every operating system\nbasically implements this plan",
    "start": "2684255",
    "end": "2689440"
  },
  {
    "text": "these days. So it's hard to infer\nwhat someone's sequence number is going to be. On the other hand, people\nkeep making the same mistakes.",
    "start": "2689440",
    "end": "2695910"
  },
  {
    "text": "So even after this was\nimplemented for TCP, there was this other\nprotocol called",
    "start": "2695910",
    "end": "2701490"
  },
  {
    "text": "DNS that is hugely vulnerable\nto similar attacks. And the reason is that DNS\nactually runs over UDP.",
    "start": "2701490",
    "end": "2710060"
  },
  {
    "text": "So UDP is a stateless\nprotocol where you actually don't do any connection\nestablishment where",
    "start": "2710060",
    "end": "2716340"
  },
  {
    "text": "you exchange sequence numbers. In UDP, you simply\nsend a request from your source\naddress to the server.",
    "start": "2716340",
    "end": "2722140"
  },
  {
    "text": "And the server figures out what\nthe reply should be and sends it back to whatever source\naddress appeared in the packet.",
    "start": "2722140",
    "end": "2728780"
  },
  {
    "text": "So it's a single\nround trip, so there's no time to exchange\nsequence numbers",
    "start": "2728780",
    "end": "2734350"
  },
  {
    "text": "and to establish that,\noh, yeah, you're actually talking to the right guy. So with DNS, as a\nresult, for a while,",
    "start": "2734350",
    "end": "2744329"
  },
  {
    "text": "it was quite easy to fake\nresponses from a DNS server. So how would a query look\nlike in DNS, typically?",
    "start": "2744330",
    "end": "2751464"
  },
  {
    "text": "Well, you send some\nqueries-- so suppose a client sends a packet from\nclient to some DNS server",
    "start": "2751464",
    "end": "2757230"
  },
  {
    "text": "that knows the DNS server's\nIP address ahead of time, maybe preconfigured somewhere,\nsay, well, here's my query.",
    "start": "2757230",
    "end": "2764260"
  },
  {
    "text": "Maybe I'm looking for mit.edu. And that's basically it.",
    "start": "2764260",
    "end": "2769859"
  },
  {
    "text": "And the server's\ndestination port number is always 53 for DNS. And the clients used to also\nrun on the same port number",
    "start": "2769860",
    "end": "2777380"
  },
  {
    "text": "for ease of use or something. So you send this packet\nfrom the client on this port",
    "start": "2777380",
    "end": "2783003"
  },
  {
    "text": "to the server on this port. Here's the query. And the server eventually\nsends back a reply saying,",
    "start": "2783003",
    "end": "2790460"
  },
  {
    "text": "mit.edu has a particular IP\naddress, 18.9 dot something.",
    "start": "2790460",
    "end": "2798580"
  },
  {
    "text": "The problem is that some\nadversary could easily send a similar response\npacket pretending",
    "start": "2798580",
    "end": "2803615"
  },
  {
    "text": "to be from the server. And there's not a whole\nlot of randomness here. So if I know that you're\ntrying to connect to mit.edu,",
    "start": "2803615",
    "end": "2810180"
  },
  {
    "text": "I'll just send a lot of packets\nlike this to your machine. I know exactly what DNS\nserver you're going to query.",
    "start": "2810180",
    "end": "2815334"
  },
  {
    "text": "I know exactly what\nyour IP address is. I know the port numbers. I know what you're querying for. I can just supply my\nown IP address here.",
    "start": "2815334",
    "end": "2822529"
  },
  {
    "text": "And if my packet gets\nthere after you send this but before you get\nthe real response,",
    "start": "2822530",
    "end": "2828630"
  },
  {
    "text": "your client machine is\ngoing to use my packet. So this is another example\nwhere insufficient randomness",
    "start": "2828630",
    "end": "2834585"
  },
  {
    "text": "in this protocol makes it\nvery easy to inject responses or inject packets in general.",
    "start": "2834585",
    "end": "2840026"
  },
  {
    "text": "And this is actually\nin some ways even worse than the previous attack. Because here you could\nconvince a client",
    "start": "2840027",
    "end": "2845220"
  },
  {
    "text": "to connect to another\nIP address all together. And it'll probably\ncache this result, because DNS involves caching.",
    "start": "2845220",
    "end": "2851246"
  },
  {
    "text": "Maybe you can supply\na very long time to live in this response\nsaying, this is valid for years.",
    "start": "2851246",
    "end": "2856550"
  },
  {
    "text": "And then your client,\nagain till it reboots, is going to keep using this\nIP address for mit.edu.",
    "start": "2856550",
    "end": "2861740"
  },
  {
    "text": "Yeah. AUDIENCE: Could you fix this\nby having the client include some random value in the\nquery, and the server customer",
    "start": "2861740",
    "end": "2868130"
  },
  {
    "text": "exactly? PROFESSOR: That's right,\nyeah, so this is typically what people have done now. The problem, as we were sort\nof talking about earlier,",
    "start": "2868130",
    "end": "2875167"
  },
  {
    "text": "is backward compatibility. It's very hard to change\nthe DNS server software that everyone runs. So you basically\nhave to figure out,",
    "start": "2875167",
    "end": "2881260"
  },
  {
    "text": "where can you inject randomness? And people have\nfigured out two places. It's not great. But basically there's\na source port number,",
    "start": "2881260",
    "end": "2888340"
  },
  {
    "text": "which is 16 bits of randomness. So if you can choose the\nsource port number randomly,",
    "start": "2888340",
    "end": "2893700"
  },
  {
    "text": "then you get 16 bits. And there's also\na query ID inside",
    "start": "2893700",
    "end": "2899470"
  },
  {
    "text": "of the packet, which\nis also 16 bits. And the server does\necho back the query ID.",
    "start": "2899470",
    "end": "2905030"
  },
  {
    "text": "So combining these\ntwo things together, most resolvers these days\nget 32 bits of randomness",
    "start": "2905030",
    "end": "2910570"
  },
  {
    "text": "out of this protocol. And it, again, makes it\nnoticeably harder, but still",
    "start": "2910570",
    "end": "2916619"
  },
  {
    "text": "not cryptographically perfect,\nto fake this kind of response and have it be\naccepted by the client.",
    "start": "2916620",
    "end": "2924340"
  },
  {
    "text": "But these problems keep\ncoming up, unfortunately. So even though it was\nwell understood for TCP,",
    "start": "2924340",
    "end": "2931990"
  },
  {
    "text": "some people I guess suggested\nthat this might be a problem. But it wasn't actually fixed\nuntil only a few years ago.",
    "start": "2931990",
    "end": "2939349"
  },
  {
    "text": " Make sense? All right, so I guess\nmaybe as an aside,",
    "start": "2939350",
    "end": "2946080"
  },
  {
    "text": "there are solutions\nto this DNS problem as well by enforcing\nsecurity for DNS",
    "start": "2946080",
    "end": "2951890"
  },
  {
    "text": "at the application level. So instead of relying on\nthese randomness properties of small numbers of\nbits in the packet,",
    "start": "2951890",
    "end": "2959611"
  },
  {
    "text": "you could try to use encryption\nin the DNS protocols. So protocols like DNS SEC\nthat the paper briefly",
    "start": "2959611",
    "end": "2966040"
  },
  {
    "text": "talks about try to do this. So instead of relying on\nany network level security properties, they require that\nall DNS names have signatures",
    "start": "2966040",
    "end": "2974590"
  },
  {
    "text": "attached to them. That seems like a sensible plan. But it turns out that\nworking out the details",
    "start": "2974590",
    "end": "2979695"
  },
  {
    "text": "is actually quite\ndifficult. So one example of a problem that showed\nup is name and origin.",
    "start": "2979695",
    "end": "2987100"
  },
  {
    "text": "Because in DNS, you\nwant to get responses. Well, this name has\nthat IP address.",
    "start": "2987100",
    "end": "2992680"
  },
  {
    "text": "Or you could get a response\nsaying, no, so sorry, this name doesn't exist. So you want to sign the it\ndoesn't exist response as well.",
    "start": "2992680",
    "end": "3000186"
  },
  {
    "text": "Because otherwise,\nthat adversary could send back a doesn't\nexist response and pretend that a name doesn't exist,\neven though it does.",
    "start": "3000186",
    "end": "3007420"
  },
  {
    "text": "So how do you sign\nresponses that certain names don't exist ahead of time? I guess one possibility\nis you could",
    "start": "3007420",
    "end": "3013450"
  },
  {
    "text": "give your DNS server the key\nthat signs all your records. That seems like a bad plan.",
    "start": "3013450",
    "end": "3019082"
  },
  {
    "text": "Because then someone who\ncompromises your DNS server could walk away with this key. So instead, the model the\nDNS SEC operates under",
    "start": "3019082",
    "end": "3025700"
  },
  {
    "text": "is that you sign all your names\nin your domain ahead of time, and you give the signed\nblob to your DNS server.",
    "start": "3025700",
    "end": "3032315"
  },
  {
    "text": "And the DNS server can then\nrespond to any queries. But even if it's compromised,\nthere's not much else that that attacker can do.",
    "start": "3032315",
    "end": "3037480"
  },
  {
    "text": "All these things are\nsigned, and the key is not to be found on\nthe DNS server itself.",
    "start": "3037480",
    "end": "3043340"
  },
  {
    "text": "So the DNS SEC protocol had this\nclever mechanism called NSEC",
    "start": "3043340",
    "end": "3049150"
  },
  {
    "text": "for signing nonexistent records. And the way you would do\nthis is by signing gaps",
    "start": "3049150",
    "end": "3055390"
  },
  {
    "text": "in the namespace. So an NSEC record might\nsay, well, there's",
    "start": "3055390",
    "end": "3060490"
  },
  {
    "text": "a name called foo.mit.edu, and\nthe next name alphabetically",
    "start": "3060490",
    "end": "3066550"
  },
  {
    "text": "is maybe goo.mit.edu. And there's nothing alphabetical\nin between these two names.",
    "start": "3066550",
    "end": "3073680"
  },
  {
    "text": "So if you query for a\nname between these two names alphabetically\nsorted, then the server could send back\nthis signed message saying,",
    "start": "3073680",
    "end": "3080170"
  },
  {
    "text": "oh, there's nothing\nbetween these two names. You can safely\nreturn, doesn't exist. But then this\nallows some attacker",
    "start": "3080170",
    "end": "3086060"
  },
  {
    "text": "to completely enumerate\nyour domain name. You can just ask for some\ndomain name and find this record",
    "start": "3086060",
    "end": "3091410"
  },
  {
    "text": "and say, oh, yeah, great. So these two things exist. Let me query for gooa.mit.edu.",
    "start": "3091410",
    "end": "3096520"
  },
  {
    "text": "That'll give me a\nresponse saying, what's the next name in\nyour domain, et cetera. So it's actually\na little bit hard",
    "start": "3096520",
    "end": "3102290"
  },
  {
    "text": "to come up with\nthe right protocol that both preserves all\nthe nice properties of DNS and prevents name enumeration\nand other problems.",
    "start": "3102290",
    "end": "3110420"
  },
  {
    "text": "There's actually\na nice thing now called NSEC3 that tries to solve\nthis problem partially-- sort",
    "start": "3110420",
    "end": "3115950"
  },
  {
    "text": "of works, sort of not. We'll see, I guess, what\ngets it [INAUDIBLE]. Yeah. AUDIENCE: Is there\nany kind of signing",
    "start": "3115950",
    "end": "3121549"
  },
  {
    "text": "of nonexistent\ntop level domains? PROFESSOR: Yeah, I\nthink actually yeah. The dot domain is\njust another domain.",
    "start": "3121550",
    "end": "3127600"
  },
  {
    "text": "And they similarly have this\nmechanism implemented as well. So actually dot and dot\ncom now implement DNS SEC,",
    "start": "3127600",
    "end": "3133120"
  },
  {
    "text": "and there's all these\nrecords there that say, well, .in is a domain\nname that exists,",
    "start": "3133120",
    "end": "3138540"
  },
  {
    "text": "and dot something else exists,\nand there's nothing in between. So there's all these things. AUDIENCE: So other\nthan denial of service,",
    "start": "3138540",
    "end": "3145118"
  },
  {
    "text": "why do we care so\nmuch about repeating domain names within mit.edu? PROFESSOR: Well,\nprobably we don't.",
    "start": "3145118",
    "end": "3150900"
  },
  {
    "text": "Actually, there's\na text file in AFS that lists all these\ndomain names at MIT anyway. But I think in\ngeneral, some companies",
    "start": "3150900",
    "end": "3156930"
  },
  {
    "text": "feel a little uneasy\nabout revealing this. They often have\ninternal names that sit in DNS that should never\nbe exposed to the outside.",
    "start": "3156930",
    "end": "3166245"
  },
  {
    "text": "I think it's actually this\nfuzzy area where it was never really formalized what\nguarantees DNS was providing",
    "start": "3166245",
    "end": "3171910"
  },
  {
    "text": "to you or was not. And people started\nassuming things like, well, if we stick some name, and it's\nnot really publicized anywhere,",
    "start": "3171910",
    "end": "3177390"
  },
  {
    "text": "then it's probably secure here. I think this is another place\nwhere this system doesn't have",
    "start": "3177390",
    "end": "3182740"
  },
  {
    "text": "a clear spec in terms of\nwhat it has and doesn't have to provide. And when you make some\nchanges like this, then people",
    "start": "3182740",
    "end": "3188224"
  },
  {
    "text": "say, oh, yeah, I was\nsort of relying on that. Yeah. AUDIENCE: [INAUDIBLE]\nreplay attack",
    "start": "3188224",
    "end": "3193574"
  },
  {
    "text": "where you could send\nin bold gap signature? PROFESSOR: Yeah,\nthere's actually time outs on these things.",
    "start": "3193574",
    "end": "3199053"
  },
  {
    "text": "So when you sign this,\nyou actually sign and say, I'm signing that\nthis set of names",
    "start": "3199053",
    "end": "3205369"
  },
  {
    "text": "is valid for, I\ndon't know, a week. And then the clients, if they\nhave a synchronized clock,",
    "start": "3205370",
    "end": "3210790"
  },
  {
    "text": "they can reject old\nsigned messages. Make sense?",
    "start": "3210790",
    "end": "3216770"
  },
  {
    "text": "All right, so this is on the\nTCP SYN guessing attacks.",
    "start": "3216770",
    "end": "3223290"
  },
  {
    "text": "Another interesting problem that\nalso comes up in the TCP case is a denial of\nservice attack that",
    "start": "3223290",
    "end": "3230490"
  },
  {
    "text": "exploits the fact that the\nserver has to store some state. So if you look at\nthis handshake that we",
    "start": "3230490",
    "end": "3237460"
  },
  {
    "text": "had on the board\nbefore, we'll see that when a client establishes\na connection to the server,",
    "start": "3237460",
    "end": "3244230"
  },
  {
    "text": "the server has to actually\nremember the sequence number SNC.",
    "start": "3244230",
    "end": "3250440"
  },
  {
    "text": "So the server has to\nmaintain some data structure on the side that says,\nfor this connection,",
    "start": "3250440",
    "end": "3256960"
  },
  {
    "text": "here's the sequence number. And it's going to say, well,\nmy connection from C to S has the sequence number SNC.",
    "start": "3256960",
    "end": "3263740"
  },
  {
    "text": " And the reason the server\nhas to store this table is because the server\nneeds to figure out what",
    "start": "3263740",
    "end": "3273545"
  },
  {
    "text": "SNC value to accept here later. Does this make sense?",
    "start": "3273545",
    "end": "3278660"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] SNS? PROFESSOR: Yeah, the server\nalso needs SNS I guess, yeah.",
    "start": "3278660",
    "end": "3283936"
  },
  {
    "text": " But it turns out that--\nwell, yeah, you're right.",
    "start": "3283936",
    "end": "3291770"
  },
  {
    "text": "And the problem is that--\nactually, yeah, you're right.",
    "start": "3291770",
    "end": "3297445"
  },
  {
    "text": "SNS is actually\nmuch more important. Sorry, yeah. [INAUDIBLE] SNS is actually\nmuch more important.",
    "start": "3297445",
    "end": "3302746"
  },
  {
    "text": "Because SNS is how\nyou know that you're talking to the right guy. ",
    "start": "3302746",
    "end": "3308790"
  },
  {
    "text": "The problem is that\nthere's no real bound on the size of this table. So you might get packets\nfrom some machine.",
    "start": "3308790",
    "end": "3316317"
  },
  {
    "text": "You don't even know who sent it. You just get a packet that\nlooks like this with a source address that claims to be C.",
    "start": "3316317",
    "end": "3321609"
  },
  {
    "text": "And in order to potentially\naccept a connection later from this IP address, you have\nto create this table entry.",
    "start": "3321610",
    "end": "3328435"
  },
  {
    "text": "And these table entries\nare somewhat long lived. Because maybe someone is\nconnecting to you from a really far away place.",
    "start": "3328435",
    "end": "3334346"
  },
  {
    "text": "There's lots of packet loss. It might be not for maybe\na minute until someone",
    "start": "3334346",
    "end": "3340089"
  },
  {
    "text": "finishes this TCP handshake\nin the worst case. So you have to store this\nstate in your TCP stack",
    "start": "3340090",
    "end": "3345710"
  },
  {
    "text": "for a relatively long time. And there's no way\nto guess whether this is a valid connection or not.",
    "start": "3345710",
    "end": "3352640"
  },
  {
    "text": "So one denial of service\nattack that people discovered against most TCP stacks\nis to simply send",
    "start": "3352640",
    "end": "3358690"
  },
  {
    "text": "lots of packets like this. So if I'm an attacker, then I'll\njust send lots of SYN packets",
    "start": "3358690",
    "end": "3364980"
  },
  {
    "text": "to a particular server and\nget it to fill up its table. And the problem is\nthat in the best case,",
    "start": "3364980",
    "end": "3372809"
  },
  {
    "text": "maybe the attacker just\nalways uses the same source IP address. In that case, you\ncan just say, well,",
    "start": "3372810",
    "end": "3378800"
  },
  {
    "text": "every client machine is allowed\ntwo entries in my table, or something like this. And then the attacker can use\nup two table entries but not",
    "start": "3378800",
    "end": "3385870"
  },
  {
    "text": "much more. The problem, of course,\nis that the attacker can fake these\nclient IP addresses, make them look random.",
    "start": "3385870",
    "end": "3391832"
  },
  {
    "text": "And then for the\nserver, it's going to be very difficult to\ndistinguish whether this is an attacker trying to\nconnect to me or some client",
    "start": "3391832",
    "end": "3397385"
  },
  {
    "text": "I've never heard of before. So if you're some website that's\nsupposed to accept connections from anywhere in the world, this\nis going to be a big problem.",
    "start": "3397385",
    "end": "3404275"
  },
  {
    "text": "Because either you deny\naccess to everyone, or you have a store state\nfor all these mostly fake",
    "start": "3404275",
    "end": "3411080"
  },
  {
    "text": "connection attempts. Does that make sense? So this is a bit of a\nproblem for TCP, and in fact",
    "start": "3411080",
    "end": "3417480"
  },
  {
    "text": "for most protocols that\nallow some sort of connection initiation, and the\nserver has to store state.",
    "start": "3417480",
    "end": "3424970"
  },
  {
    "text": "So there's some fixes. We'll talk about\nin a second what workaround TCP implements to\ntry to deal with this problem.",
    "start": "3424970",
    "end": "3430285"
  },
  {
    "text": "This is called SYN\nflooding in TCP. But in general,\nthis is a problem that's worth knowing\nabout and trying",
    "start": "3430285",
    "end": "3437030"
  },
  {
    "text": "to avoid in any protocol\nyou design on top as well. So you want to make sure\nthat the server doesn't",
    "start": "3437030",
    "end": "3442120"
  },
  {
    "text": "have to keep state\nuntil it can actually authenticate and identify,\nwho is the client?",
    "start": "3442120",
    "end": "3447204"
  },
  {
    "text": "Because by that time, if you've\nidentified who the client is, you've authenticated\nthem somehow, then you can actually\nmake a decision,",
    "start": "3447204",
    "end": "3452290"
  },
  {
    "text": "well, every client is\nallowed to only connect once, or something. And then I'm not going\nto keep more state.",
    "start": "3452290",
    "end": "3457780"
  },
  {
    "text": "Here, the problem is\nyou're guaranteeing that you're storing state\nbefore you have any idea who it",
    "start": "3457780",
    "end": "3462938"
  },
  {
    "text": "is that is connecting to you.  So let's look at\nhow you can actually",
    "start": "3462938",
    "end": "3468329"
  },
  {
    "text": "solve this SYN flooding attack\nwhere the server accumulates lots of state.",
    "start": "3468330",
    "end": "3474850"
  },
  {
    "text": "So of course, if you\ncould change TCP again, you could fix this pretty\neasily by using cryptography",
    "start": "3474850",
    "end": "3480810"
  },
  {
    "text": "or something or changing exactly\nwho's responsible for storing what state. The problem is we\nhave TCP as is.",
    "start": "3480810",
    "end": "3487099"
  },
  {
    "text": "And could we fix this problem\nwithout changing the TCP wire protocol?",
    "start": "3487100",
    "end": "3492860"
  },
  {
    "text": "So this is, again, an exercise\nin trying to figure out, well, what exactly tricks\nwe could play",
    "start": "3492860",
    "end": "3497930"
  },
  {
    "text": "or exactly what assumptions\nwe could relax and still stick to the TCP header\nformat and other things.",
    "start": "3497930",
    "end": "3504715"
  },
  {
    "text": "And the trick is to in fact\nfigure out a clever way to make the server\nstateless without having",
    "start": "3504715",
    "end": "3511500"
  },
  {
    "text": "to-- so the server isn't\ngoing to have to keep this table around in memory. And the way we're\ngoing to do this",
    "start": "3511500",
    "end": "3517840"
  },
  {
    "text": "is by carefully choosing SMS. Instead of using this formula\nwe were looking at before, where",
    "start": "3517840",
    "end": "3524839"
  },
  {
    "text": "we were to add this\nfunction, we're instead going to\nchoose this sequence",
    "start": "3524840",
    "end": "3531170"
  },
  {
    "text": "number in a different way. And I'll give you\nexactly the formula. And then we'll talk about why\nthis is actually interesting",
    "start": "3531170",
    "end": "3537510"
  },
  {
    "text": "and what nice properties it has. So if the server detects that\nit's under this kind of attack, it's going to switch\ninto this mode",
    "start": "3537510",
    "end": "3543650"
  },
  {
    "text": "where it chooses SNS using\nthis formula of applying",
    "start": "3543650",
    "end": "3552510"
  },
  {
    "text": "basically the same or\nsimilar kind of function F we saw before. ",
    "start": "3552510",
    "end": "3558470"
  },
  {
    "text": "And what it's going\nto apply it to is the source IP, destination\nIP, the same things as before,",
    "start": "3558470",
    "end": "3565652"
  },
  {
    "text": "source port, destination\nport, and also timestamp,",
    "start": "3565652",
    "end": "3575920"
  },
  {
    "text": "and also a key in here as well. And we're going to concatenate\nit with a timestamp as well.",
    "start": "3575920",
    "end": "3585374"
  },
  {
    "text": "So this timestamp is going\nto be fairly coarse grained. It's going to go in\norder of minutes. So every minute, the\ntimestamp ticks off by one.",
    "start": "3585374",
    "end": "3592290"
  },
  {
    "text": "It's a very coarse grained time. And there's probably some split\nbetween this part of the header",
    "start": "3592290",
    "end": "3599920"
  },
  {
    "text": "and this part of the header. This timestamp doesn't\nneed a whole lot of bits. So I forget exactly what this\nprotocol does in real machines.",
    "start": "3599920",
    "end": "3607000"
  },
  {
    "text": "But you could easily\nimagine maybe using 8 bits. For the timestamp,\nI'm going to be using 24 bits for this chunk\nof the sequence number.",
    "start": "3607000",
    "end": "3615920"
  },
  {
    "text": "All right, so why\nis this a good plan? What's going on here? Why this weird formula?",
    "start": "3615920",
    "end": "3621990"
  },
  {
    "text": "So I think you have to\nremember, one was the property that we were trying to achieve\nof the sequence number. So there's two things going on.",
    "start": "3621990",
    "end": "3628579"
  },
  {
    "text": "One is there's this defense\nagainst duplicated packets that we were trying to achieve\nby-- maybe the formula is still",
    "start": "3628580",
    "end": "3635041"
  },
  {
    "text": "here. Nope-- oh, yeah, yeah, here. Right, so just to\ncompare these guys-- so when we're not under\nattack, we were previously",
    "start": "3635041",
    "end": "3642099"
  },
  {
    "text": "maintaining this old style\nsequence number scheme to prevent duplicate packets\nfrom previous connections, all",
    "start": "3642100",
    "end": "3647606"
  },
  {
    "text": "this good stuff. It turns out people\ncouldn't figure out a way to defend against these\nkinds of SYN flooding attacks",
    "start": "3647606",
    "end": "3653800"
  },
  {
    "text": "without giving up\non this property, so basically\nsaying, well, here's one plan that works\nwell in some situations.",
    "start": "3653800",
    "end": "3659670"
  },
  {
    "text": "Here's a different plan where\nwe'll give up on that ISN old style component. And instead, we'll\nfocus on just ensuring",
    "start": "3659670",
    "end": "3666890"
  },
  {
    "text": "that if someone presents us this\nsequence number S in response",
    "start": "3666890",
    "end": "3672305"
  },
  {
    "text": "to a packet, like\nhere, then we know it must've been the right client.",
    "start": "3672305",
    "end": "3678150"
  },
  {
    "text": "So remember that in order to\nprevent IP spoofing attacks, we sort of rely\non this SNS value.",
    "start": "3678150",
    "end": "3683850"
  },
  {
    "text": "So if the server sends this\nSNS value to some client, then hopefully only that client can\nsend us back the correct SNS",
    "start": "3683850",
    "end": "3690800"
  },
  {
    "text": "value, finish establishing\nthe connection. And this is why you had to store\nit in this table over here.",
    "start": "3690800",
    "end": "3696220"
  },
  {
    "text": "Because otherwise,\nhow do you know if this is a real response\nor a fake response? And the reason for using\nthis function F here",
    "start": "3696220",
    "end": "3702660"
  },
  {
    "text": "is that now we can maybe not\nstore this table in memory.",
    "start": "3702660",
    "end": "3707670"
  },
  {
    "text": "And instead, when a connection\nattempt arrives here, we're going to\ncompute SNS according",
    "start": "3707670",
    "end": "3713480"
  },
  {
    "text": "to this formula\nover here and just send it back to whatever client\npretends to have connected to us.",
    "start": "3713480",
    "end": "3719250"
  },
  {
    "text": "And then we'll forget all\nabout this connection. And then if this third packet\neventually comes through,",
    "start": "3719250",
    "end": "3725040"
  },
  {
    "text": "and its SNS value here matches\nwhat we would expect to see, then we'll say, oh\nyeah, this must've",
    "start": "3725040",
    "end": "3731040"
  },
  {
    "text": "been someone got our\nresponse from step two and finally sent it back to us. And now we finally\ncommit after step three",
    "start": "3731040",
    "end": "3737495"
  },
  {
    "text": "to storing a real entry for\nthis TCP connection in memory. So this is a way to sort of\ndefer the storage of this state",
    "start": "3737495",
    "end": "3745349"
  },
  {
    "text": "at the server by requiring\nthe server, the client, to echo back this exact value.",
    "start": "3745350",
    "end": "3750420"
  },
  {
    "text": "And by constructing it\nin this careful way, we can actually check\nwhether the client just made up this value, or if it's\nthe real thing we're expecting.",
    "start": "3750420",
    "end": "3758598"
  },
  {
    "text": "Does that make sense? AUDIENCE: [INAUDIBLE]\nSNC [INAUDIBLE]? PROFESSOR: Yeah, so SNC now,\nwe basically don't store it.",
    "start": "3758598",
    "end": "3766620"
  },
  {
    "text": "It's maybe not great. But so it is.",
    "start": "3766620",
    "end": "3772134"
  },
  {
    "text": "So in fact, I guess\nwhat really happens is in-- I didn't show it here.",
    "start": "3772134",
    "end": "3779650"
  },
  {
    "text": "But there's probably going to be\nsort of a null data field here",
    "start": "3779650",
    "end": "3785434"
  },
  {
    "text": "that says this\npacket has no data. But it still includes the\nsequence number SNC just",
    "start": "3785435",
    "end": "3790680"
  },
  {
    "text": "because there's a field for it. So this is how the\nserver can reconstruct what this SNC value is.",
    "start": "3790680",
    "end": "3795857"
  },
  {
    "text": "Because the client is going\nto include it in this packet anyway. It wasn't relevant before. But it sort of is relevant now.",
    "start": "3795857",
    "end": "3802050"
  },
  {
    "text": "And we weren't going to\ncheck it against anything. But it turns out to be\npretty much good enough.",
    "start": "3802050",
    "end": "3808210"
  },
  {
    "text": "It has some unfortunate\nconsequences. Like if this is-- well,\nthere's some complicated things",
    "start": "3808210",
    "end": "3813785"
  },
  {
    "text": "you might abuse here. But it doesn't seem\nto be that bad. It seems certainly\nbetter than the server",
    "start": "3813785",
    "end": "3819370"
  },
  {
    "text": "filling up its memory and\nswapping serving requests all together. And then we don't include\nin this computation.",
    "start": "3819370",
    "end": "3825630"
  },
  {
    "text": "Because the only thing\nwe care about here is offloaded the\nstorage of this table and making sure that the only\nconnections that eventually you",
    "start": "3825630",
    "end": "3832640"
  },
  {
    "text": "do get established are\nlegitimate clients. Because therefore,\nwe can say, well,",
    "start": "3832640",
    "end": "3838109"
  },
  {
    "text": "if this client is establishing\na million connections to me, I'll stop accepting\nconnections from him. That's easy enough, finally.",
    "start": "3838110",
    "end": "3844150"
  },
  {
    "text": "The problem is that all\nthese source addresses, if they're spoofed,\nare hard to distinguish",
    "start": "3844150",
    "end": "3849180"
  },
  {
    "text": "from legitimate clients. Make sense? Yeah. AUDIENCE: Would you need\nto store the timestamp?",
    "start": "3849180",
    "end": "3855612"
  },
  {
    "text": "PROFESSOR: Ahh, so the\nclever thing, the reason this timestamp is sort\nof on the slide here, is that when we receive this\nSNS value in step three,",
    "start": "3855612",
    "end": "3863920"
  },
  {
    "text": "we need to figure\nout, how do you compute the input\nto this function F to check whether it's correct?",
    "start": "3863920",
    "end": "3868951"
  },
  {
    "text": "So actually, we\ntake the timestamp from the end of the packet,\nand we use that inside of this computation.",
    "start": "3868951",
    "end": "3875512"
  },
  {
    "text": "Everything else we\ncan reconstruct. We know who just sent us\nthe third step and packet. And we have all these fields.",
    "start": "3875512",
    "end": "3881230"
  },
  {
    "text": "And we have our key, which\nis, again, still secret. And this timestamp just comes\nfrom the end of the sequence, from the last 8 bits.",
    "start": "3881230",
    "end": "3887810"
  },
  {
    "text": "And then it might\nbe that we'll reject timestamps that are too old,\njust disallow old connections.",
    "start": "3887810",
    "end": "3895780"
  },
  {
    "text": "Yeah. AUDIENCE: So I'm guessing\nthe reason you only use this when\nyou're under attack is because you lose 8 bits\nof security, or whatever?",
    "start": "3895780",
    "end": "3901160"
  },
  {
    "text": "PROFESSOR: Yes, it's not great. It has many bad properties. One is you sort of lose 8 bits\nof security in some sense.",
    "start": "3901160",
    "end": "3907668"
  },
  {
    "text": "Because now the\nunguessable part is just 24 bits instead of 32 bits.",
    "start": "3907668",
    "end": "3913250"
  },
  {
    "text": "Another problem is what happens\nif you lose certain packets?",
    "start": "3913250",
    "end": "3918750"
  },
  {
    "text": "So if this packet is lost--\nso it's typically, in TCP,",
    "start": "3918750",
    "end": "3926163"
  },
  {
    "text": "there's someone responsible\nfor retransmitting something if a particular packet is lost. And in TCP, if the\nthird packet is lost,",
    "start": "3926163",
    "end": "3933870"
  },
  {
    "text": "then the client might not\nbe waiting for anything. Or sorry, maybe\nthe protocol we're",
    "start": "3933870",
    "end": "3939040"
  },
  {
    "text": "running on top of\nthis TCP connection is one where the\nserver is supposed to say something initially. So I connect.",
    "start": "3939040",
    "end": "3945289"
  },
  {
    "text": "I just listen. And in the SMTP, for\nexample, the server is supposed to send me some\nsort of an initial greeting",
    "start": "3945290",
    "end": "3951160"
  },
  {
    "text": "in the protocol. So OK, suppose I'm\nconnecting to an SMTP server. I send my third packet.",
    "start": "3951160",
    "end": "3957160"
  },
  {
    "text": "I think I'm done. I'm just waiting for\nthe server to tell me, greetings as an SMTP server.",
    "start": "3957160",
    "end": "3962190"
  },
  {
    "text": "Please send mail. This packet could get lost. And in real TCP, the\nway this gets handled",
    "start": "3962190",
    "end": "3968339"
  },
  {
    "text": "is that the server from step\ntwo remembers that, hey, I sent this response.",
    "start": "3968340",
    "end": "3973860"
  },
  {
    "text": "I never heard back,\nthis third thing. So it's the server\nthat's supposed to resend this packet\nto trigger the client",
    "start": "3973860",
    "end": "3979828"
  },
  {
    "text": "to resend this third packet. Of course, if the server\nisn't storing any state, it has no idea what to resend.",
    "start": "3979829",
    "end": "3986660"
  },
  {
    "text": "So this actually makes\nconnection establishment potentially\nprogrammatic where you",
    "start": "3986660",
    "end": "3991669"
  },
  {
    "text": "could enter this weird\nstate where both sides are waiting for each other. Well, the server\ndoesn't even know that it's waiting for anything.",
    "start": "3991669",
    "end": "3997421"
  },
  {
    "text": "And the client is\nwaiting for the server. And the server basically\ndropped responsibility by not storing state. So this is another\nreason why you",
    "start": "3997421",
    "end": "4004512"
  },
  {
    "text": "don't run this in production\nmode all the time. Yeah. AUDIENCE: Presumably also you\ncould have data commissions",
    "start": "4004512",
    "end": "4009950"
  },
  {
    "text": "if you establish two very\nshort-lived connections right after each other\nfrom the same host.",
    "start": "4009950",
    "end": "4015600"
  },
  {
    "text": "PROFESSOR: Absolutely,\nyeah, yeah. So another thing is, of\ncourse, because we gave up on using this ISN\nold style part,",
    "start": "4015600",
    "end": "4021340"
  },
  {
    "text": "we now give up\nprotection against these multiple connections\nin a short time period being independent from one another.",
    "start": "4021340",
    "end": "4027400"
  },
  {
    "text": "So I think there's a\nnumber of trade-offs. We just talked about three. There's several more\nthings you worry about.",
    "start": "4027400",
    "end": "4032830"
  },
  {
    "text": "But it's not great. If we could design a protocol\nfrom scratch to be better,",
    "start": "4032830",
    "end": "4038150"
  },
  {
    "text": "we could just have a separate\nnice 64-bit header for this and a 64-bit value for this. And then we could\nenable this all the time",
    "start": "4038150",
    "end": "4044750"
  },
  {
    "text": "without giving up the\nother stuff and all these nice things. Yeah. AUDIENCE: I just had one\nquick question on the SNS.",
    "start": "4044750",
    "end": "4051133"
  },
  {
    "text": "In step two, [INAUDIBLE],\ndo they have to be the same?",
    "start": "4051133",
    "end": "4056432"
  },
  {
    "text": "PROFESSOR: This\nSNS and this SNS? AUDIENCE: Mhm. PROFESSOR: Yeah,\nbecause otherwise, the server has no way to\nconclude that this client got",
    "start": "4056432",
    "end": "4065684"
  },
  {
    "text": "our packet. If the server didn't check that\nthis SNS was the same value as",
    "start": "4065685",
    "end": "4071020"
  },
  {
    "text": "before, then these actually\nwould be even worse. Because I could fake a\nconnection from some arbitrary",
    "start": "4071020",
    "end": "4076405"
  },
  {
    "text": "IP address, then\nget this response. Maybe I don't even\nget it, because it goes to a different IP. Then I establish a connection\nfrom some other IP address.",
    "start": "4076405",
    "end": "4084114"
  },
  {
    "text": "And then the server\nis maintaining a whole live connection. Probably a server crosses\nanother side waiting for me to send data and so on.",
    "start": "4084114",
    "end": "4090800"
  },
  {
    "text": "AUDIENCE: But the timestamp is\ngoing to be different, right? So how can the\nserver recalculate that with a new timestamp\nand null the one before",
    "start": "4090800",
    "end": "4097708"
  },
  {
    "text": "if it doesn't store any state? PROFESSOR: So the way this\nworks is these timestamps, as I was saying, are course grained.",
    "start": "4097708",
    "end": "4103150"
  },
  {
    "text": "So they're on a\nscale of minutes. So if you connect\nwithin the same minute, then you're in good shape.",
    "start": "4103150",
    "end": "4110540"
  },
  {
    "text": "And if you connect on the\nminute boundary, well, too bad. Yet another problem\nwith the scheme-- it's",
    "start": "4110540",
    "end": "4115568"
  },
  {
    "text": "imperfect in many ways. But most operating\nsystems, including Linux, actually have ways of detecting\nif there's too many entries",
    "start": "4115569",
    "end": "4122440"
  },
  {
    "text": "building up in this table\nthat aren't being completed. It switches to this\nother scheme instead to make sure it doesn't\noverflow this table.",
    "start": "4122440",
    "end": "4128589"
  },
  {
    "text": "Yeah. AUDIENCE: So if the\nattacker has control of a lot of IP addresses,\nand they do this, and even if you\nswitch it the same--",
    "start": "4128590",
    "end": "4135323"
  },
  {
    "text": "PROFESSOR: Yeah, so\nthen actually there's not much you can do. The reason that\nwe were so worried about this scheme\nin the first place",
    "start": "4135324",
    "end": "4141560"
  },
  {
    "text": "is because we wanted to\nfilter out or somehow distinguish between the\nattacker and the good guys.",
    "start": "4141560",
    "end": "4146827"
  },
  {
    "text": "And if the attacker\nhas more IP addresses and just controls more\nmachines than the good guys, then he can just connect to our\nserver and request lots of web",
    "start": "4146828",
    "end": "4154003"
  },
  {
    "text": "pages or maintain connections. And it's very hard\nthen for the server to distinguish whether these\nare legitimate clients or just",
    "start": "4154003",
    "end": "4161060"
  },
  {
    "text": "the attacker tying up\nresources of the server. So you're absolutely right. This only addresses the\ncase where the attacker",
    "start": "4161060",
    "end": "4167170"
  },
  {
    "text": "has a small number\nof IP addresses and wants to amplify his effect. But it is a worry.",
    "start": "4167170",
    "end": "4174109"
  },
  {
    "text": "And in fact, today it might\nbe that some attackers control a large number of\ncompromised machines,",
    "start": "4174109",
    "end": "4180487"
  },
  {
    "text": "like just desktop machines\nof someone that didn't patch their machine correctly. And then they can just mount\ndenial of service attacks",
    "start": "4180488",
    "end": "4186580"
  },
  {
    "text": "from this distributed set of\nmachines all over the world. And that's pretty hard\nto defend against.",
    "start": "4186580",
    "end": "4193680"
  },
  {
    "text": "So another actually interesting\nthing I want to mention is denial of service attacks,\nbut in the particular way",
    "start": "4193680",
    "end": "4202199"
  },
  {
    "text": "that other protocols\nmake them worse. I guess other protocols allow\ndenial of service attacks",
    "start": "4202200",
    "end": "4207340"
  },
  {
    "text": "in the first place. I'm sorry. But there are some that are\nprotocols that are particularly susceptible to abuse.",
    "start": "4207340",
    "end": "4213370"
  },
  {
    "text": "And probably a good\nexample of that is, again, this DNS protocol\nthat we were looking at before.",
    "start": "4213370",
    "end": "4219150"
  },
  {
    "text": "So the DNS protocol--\nwe still have it here-- involves the\nclient sending a request",
    "start": "4219150",
    "end": "4224990"
  },
  {
    "text": "to the server and the server\nsending a response back to the client. And in many cases, the response\nis larger than the request.",
    "start": "4224990",
    "end": "4234309"
  },
  {
    "text": "The request could be just,\ntell me about mit.edu. And the response might\nbe all the records the server has about\nmit.edu-- the email address,",
    "start": "4234310",
    "end": "4241290"
  },
  {
    "text": "the mail server for mit.edu,\nthe assigned record if it's using DNS SEC, and so on. So the query might be 100 bytes.",
    "start": "4241290",
    "end": "4247630"
  },
  {
    "text": "The response could well\nbe over 1,000 bytes. So suppose that\nyou want to flood",
    "start": "4247630",
    "end": "4253119"
  },
  {
    "text": "some guy with lots of\npackets or lots of bandwidth. Well, you might\nonly be able to send",
    "start": "4253120",
    "end": "4259073"
  },
  {
    "text": "a small amount of bandwidth. But what you could do is you\ncould fake queries to DNS servers on behalf of that guy.",
    "start": "4259074",
    "end": "4264724"
  },
  {
    "text": "So you only have\nto send 100 bytes to some DNS server pretending to\nbe a query from that poor guy.",
    "start": "4264725",
    "end": "4270360"
  },
  {
    "text": "And the DNS server is going\nto send 1,000 bytes to him on your behalf. So this is a problematic\nfeature of this protocol.",
    "start": "4270360",
    "end": "4277920"
  },
  {
    "text": "Because it allows you to\namplify bandwidth attacks. And partly for\nthe same reason we",
    "start": "4277920",
    "end": "4283284"
  },
  {
    "text": "were talking about with\nTCP's SYN flooding attacks, it's very hard for the\nserver, for the DNS server,",
    "start": "4283285",
    "end": "4288740"
  },
  {
    "text": "in this case, to know whether\nthis request is valid or not. Because there's no\nauthentication or no sort",
    "start": "4288740",
    "end": "4294439"
  },
  {
    "text": "of sequence number\nexchanges going on to tell that this is the\nright guy connecting to you, et cetera.",
    "start": "4294439",
    "end": "4299520"
  },
  {
    "text": "So in fact this is still\na problem in DNS today. And it gets used\nquite frequently",
    "start": "4299520",
    "end": "4305180"
  },
  {
    "text": "to attack people with\nbandwidth attacks. So if you have a certain\namount of bandwidth,",
    "start": "4305180",
    "end": "4310184"
  },
  {
    "text": "you'll be that\nmuch more effective if you reflect your attack\noff of a DNS server. And these DNS servers are\nvery well provisioned.",
    "start": "4310184",
    "end": "4317400"
  },
  {
    "text": "And they basically have\nto respond to every query out there. Because if they stop\nresponding to requests, then probably some legitimate\nrequests are going to get",
    "start": "4317400",
    "end": "4323530"
  },
  {
    "text": "dropped. So this is a big\nproblem in practice. Yeah. AUDIENCE: So if you can still\nsee it on the DNS server,",
    "start": "4323530",
    "end": "4328786"
  },
  {
    "text": "[INAUDIBLE] requests\nand never reply to--",
    "start": "4328786",
    "end": "4335140"
  },
  {
    "text": "PROFESSOR: Right, yeah, so\nit's possible to maybe modify the DNS server to keep some\nsort of state like this.",
    "start": "4335140",
    "end": "4340757"
  },
  {
    "text": "AUDIENCE: That's the reason\nwhy this still works now, because they don't store state? PROFESSOR: Yeah, well\nI think some people",
    "start": "4340757",
    "end": "4345878"
  },
  {
    "text": "are starting to modify DNS\nserver to try to store state. A lot of times, there's so\nmany DNS servers out there",
    "start": "4345878",
    "end": "4352020"
  },
  {
    "text": "that it doesn't matter. Even if you appear to do 10\nqueries against every DNS",
    "start": "4352020",
    "end": "4357498"
  },
  {
    "text": "server, that's\nstill every packet gets amplified by some\nsignificant factor. And they have to respond.",
    "start": "4357498",
    "end": "4363450"
  },
  {
    "text": "Because maybe that client really\nis trying to issue this query. So this is a problem. Yeah, so you're right, if\nthis was one DNS server,",
    "start": "4363450",
    "end": "4369190"
  },
  {
    "text": "then this would be maybe\nnot as big of a deal. The problem is also that\nthe root servers for DNS, for example, aren't\na single machine.",
    "start": "4369190",
    "end": "4375430"
  },
  {
    "text": "It's actually racks\nand racks of servers. Because they're so heavily used. And trying to maintain a state\nacross all these machines",
    "start": "4375430",
    "end": "4382085"
  },
  {
    "text": "is probably nontrivial. So as it gets abused\nmore, probably it will be more worthwhile\nto maintain this state.",
    "start": "4382085",
    "end": "4389582"
  },
  {
    "text": "I guess a general\nprinciple you want to follow in any\nprotocol-- well,",
    "start": "4389582",
    "end": "4395120"
  },
  {
    "text": "might be a good\nprinciple-- is to make the client do at least as much\nwork as the server is doing. So here, the problem is the\nclient isn't doing as much work",
    "start": "4395120",
    "end": "4402450"
  },
  {
    "text": "as the server. That's why the server can help\nthe client amplify this effect. If you were redesigning\nDNS from scratch,",
    "start": "4402450",
    "end": "4409119"
  },
  {
    "text": "and this was really\nyour big concern, then it'd probably be fairly\nstraightforward to fix this. The client has to\nsend a request that",
    "start": "4409120",
    "end": "4416199"
  },
  {
    "text": "has extra padding bytes just\nthere just wasting bandwidth. And then the server is\ngoing to respond back",
    "start": "4416200",
    "end": "4422610"
  },
  {
    "text": "with a response that's\nat most as big as that. And if you want a response\nthat's bigger, maybe the server will say, sorry,\nyour padding wasn't big enough.",
    "start": "4422610",
    "end": "4428858"
  },
  {
    "text": "Send me more padding. And this way, you guarantee that\nthe DNS server cannot be used ever to amplify these\nkinds of bandwidth attacks.",
    "start": "4428858",
    "end": "4438676"
  },
  {
    "text": "Actually, these\nkinds of problems happen also at higher\nlevels as well. So in web\napplications, you often",
    "start": "4438676",
    "end": "4444660"
  },
  {
    "text": "have web services that do\nlots and lots of computation on behalf of a single request. And there's often denial of\nservice attacks at that level",
    "start": "4444660",
    "end": "4451200"
  },
  {
    "text": "where adversaries know that\na certain operation is very expensive, and they'll\njust ask for that operation",
    "start": "4451200",
    "end": "4457290"
  },
  {
    "text": "to be done over and over again. And unless you carefully design\nyour protocol and application",
    "start": "4457290",
    "end": "4462520"
  },
  {
    "text": "to allow the client\nto prove that, oh, I'm burning at least as much work\nas you, or something like this,",
    "start": "4462520",
    "end": "4468670"
  },
  {
    "text": "then it's hard to defend\nagainst these things as well. Make sense?",
    "start": "4468670",
    "end": "4474760"
  },
  {
    "text": "All right, so I\nguess the last thing I want to briefly touch\non about the paper we talked about as well\nis these routing attacks.",
    "start": "4474760",
    "end": "4481150"
  },
  {
    "text": "And the reason these\nattacks are interesting is they're maybe popping up\na level above these protocol",
    "start": "4481150",
    "end": "4486740"
  },
  {
    "text": "transport level issues. And look at what goes\nwrong in an application. And the routing protocol is\na particularly interesting",
    "start": "4486740",
    "end": "4492960"
  },
  {
    "text": "example. Because it's often\nthe place where trust and sort of initial\nconfiguration gets",
    "start": "4492960",
    "end": "4498670"
  },
  {
    "text": "bootstrapped in the first place. And it's easy to sort\nof get that wrong.",
    "start": "4498670",
    "end": "4504200"
  },
  {
    "text": "And even today, there's not\ngreat authentication mechanisms for that. Perhaps the clearest\nexample is the DHCP protocol",
    "start": "4504200",
    "end": "4511560"
  },
  {
    "text": "that all of you guys use\nwhen you open a computer or connect to some\nwireless or wired network. The computer just sends\nout a packet saying,",
    "start": "4511560",
    "end": "4517850"
  },
  {
    "text": "I want an IP address\nand other stuff. And some DHCP server at MIT\ntypically receives that packet",
    "start": "4517850",
    "end": "4523900"
  },
  {
    "text": "and sends you back, here's an\nIP address that you should use. And also here's a DNS\nserver you should use,",
    "start": "4523900",
    "end": "4529790"
  },
  {
    "text": "and other interesting\nconfiguration data. And the problem is that the\nDHCP request packet is just",
    "start": "4529790",
    "end": "4535980"
  },
  {
    "text": "broadcasting on the\nlocal network trying to reach the DHCP server. Because you actually\ndon't know what the DHCP is going\nto be ahead of time.",
    "start": "4535980",
    "end": "4541934"
  },
  {
    "text": "You're just plugging into the\nnetwork, the first time you've been here, let's say. And your client doesn't\nknow what else to do",
    "start": "4541934",
    "end": "4547970"
  },
  {
    "text": "or who to trust. And consequently, any\nmachine on the local network could intercept\nthese DHCP requests",
    "start": "4547970",
    "end": "4554660"
  },
  {
    "text": "and respond back\nwith any IP address that the client could use, and\nalso maybe tell the client, hey you should use my DNS\nserver instead of the real one.",
    "start": "4554660",
    "end": "4561525"
  },
  {
    "text": "And then you could intercept\nthose future DNS requests from the client and so on. That make sense?",
    "start": "4561525",
    "end": "4566900"
  },
  {
    "text": "So I think these protocols are\nfairly tricky to get right. And on a global scale,\nthe protocols like BGP",
    "start": "4566900",
    "end": "4572300"
  },
  {
    "text": "allow any participant to\nannounce a particular IP address prefix for the\nworld to sort of know about",
    "start": "4572300",
    "end": "4578505"
  },
  {
    "text": "and route packets\ntoward the attacker. There's certainly been attacks\nwhere some router participating",
    "start": "4578505",
    "end": "4585053"
  },
  {
    "text": "in BGP says, oh,\nI'm a very quick way to reach this particular\nIP address range.",
    "start": "4585053",
    "end": "4591408"
  },
  {
    "text": "And then all the\nrouters in the world say, OK, sure, we'll send\nthose packets to you. And probably the most\nfrequent abuse of this",
    "start": "4591409",
    "end": "4600330"
  },
  {
    "text": "is by spammers who\nwant to send spam, but their old IP addresses\nare blacklisted everywhere, because they are sending spam.",
    "start": "4600330",
    "end": "4606000"
  },
  {
    "text": "So they just pick some\nrandom IP address. They announce that, oh yeah,\nthis IP address is now here. And then they sort of\nannounce this IP address,",
    "start": "4606000",
    "end": "4612290"
  },
  {
    "text": "send spam from it,\nand then disconnect. And it gets abused a\nfair amount this way.",
    "start": "4612290",
    "end": "4617935"
  },
  {
    "text": "It's sort of getting less now. But it's kind of hard to fix. Because in order\nto fix it, you have",
    "start": "4617935",
    "end": "4624560"
  },
  {
    "text": "to know whether someone really\nowns that IP address or not. And it's hard to do\nwithout establishing some global database of,\nmaybe, cryptographic keys",
    "start": "4624560",
    "end": "4632100"
  },
  {
    "text": "for every ISP in the world. And it takes quite a\nbit of effort by someone to build this database.",
    "start": "4632100",
    "end": "4638079"
  },
  {
    "text": "The same actually applies\nto DNS SEC as well. In order to know which\nsignature to look for in DNS,",
    "start": "4638080",
    "end": "4643350"
  },
  {
    "text": "you have to have a\ncryptographic key associated with every entity in the world. And it's not there now.",
    "start": "4643350",
    "end": "4648677"
  },
  {
    "text": "Maybe it'll get built up slowly. But it's certainly one big\nproblem for adopting DNS SEC.",
    "start": "4648677",
    "end": "4654909"
  },
  {
    "text": "All right, so I guess the\nthing to take away from this is maybe just a bunch of\nlessons about what not to do in general in protocols.",
    "start": "4654910",
    "end": "4661200"
  },
  {
    "text": "But also actually one\nthing I want to mention is that while probably\nsecrecy and integrity are",
    "start": "4661200",
    "end": "4666307"
  },
  {
    "text": "good properties and driving\nforce of higher levels of abstraction, like in\ncryptographic protocols in the application-- and we'll\nlook at that in next lectures--",
    "start": "4666307",
    "end": "4673220"
  },
  {
    "text": "one thing that you really\ndo want from the network is some sort of availability\nand DOS resistance. Because these properties\nare much harder",
    "start": "4673220",
    "end": "4679050"
  },
  {
    "text": "to achieve at higher\nlevels in the stack. So you really want\nto avoid things like maybe these\namplification attacks, maybe",
    "start": "4679050",
    "end": "4684710"
  },
  {
    "text": "these SYN flooding attacks,\nmaybe these RST attacks where you can shoot down an\narbitrary person's connection.",
    "start": "4684710",
    "end": "4691680"
  },
  {
    "text": "These are things that are\nreally damaging at the low level and that are hard\nto fix higher up. But the integrity and\nconfidentiality you",
    "start": "4691680",
    "end": "4699155"
  },
  {
    "text": "can more or less\nsolve with encryption. And we'll talk about how we\ndo that in the next lecture on Cerberus. See you guys then.",
    "start": "4699155",
    "end": "4705760"
  }
]