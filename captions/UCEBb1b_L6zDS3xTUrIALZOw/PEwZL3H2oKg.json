[
  {
    "text": " [MUSIC PLAYING]",
    "start": "0",
    "end": "21130"
  },
  {
    "text": "PROFESSOR: Well, last time we\ntalked about compound data, and there were two main\npoints to that business.",
    "start": "21130",
    "end": "29768"
  },
  {
    "text": "First of all, there\nwas a methodology of data abstraction,\nand the point of that was that you could\nisolate the way that data",
    "start": "29768",
    "end": "38040"
  },
  {
    "text": "objects are used from the\nway that they're represented: this idea that there's\nthis guy, George,",
    "start": "38040",
    "end": "43600"
  },
  {
    "text": "and you go out make\na contract with him; and it's his business to\nrepresent the data objects; and at the moment\nyou are using them,",
    "start": "43600",
    "end": "49360"
  },
  {
    "text": "you don't think about\nGeorge's problem. And then secondly, there\nwas this particular way",
    "start": "49360",
    "end": "54990"
  },
  {
    "text": "that Lisp has of\ngluing together things to form objects called\npairs, and that's",
    "start": "54990",
    "end": "61140"
  },
  {
    "text": "done with cons, car\nand cdr. And the way that cons, car and\ncdr are implemented is basically irrelevant.",
    "start": "61140",
    "end": "67488"
  },
  {
    "text": "That's sort of George's problem\nof how to build those things. It could be done as primitives. It could be done using\nprocedures in some weird way,",
    "start": "67488",
    "end": "73780"
  },
  {
    "text": "but we're not going\nto worry about that. And as an example, we looked\nat rational number arithmetic.",
    "start": "73780",
    "end": "80229"
  },
  {
    "text": "We looked at vectors, and\nhere's just a review of vectors. Here's an operation that takes\nthe sum of of two vectors,",
    "start": "80230",
    "end": "88240"
  },
  {
    "text": "so we want to add this vector,\nv1, and this vector, v2, and we get the sum.",
    "start": "88240",
    "end": "94680"
  },
  {
    "text": "And the sum is the\nvector whose coordinates are the sum of the coordinates\nof the pieces you're adding.",
    "start": "94680",
    "end": "101380"
  },
  {
    "text": "So I can say, to define\nmake-vect, right, to add two vectors I make a\nvector, whose x coordinate is",
    "start": "101380",
    "end": "109640"
  },
  {
    "text": "the sum of the\ntwo x coordinates, and whose y coordinate is the\nsum of the two y coordinates.",
    "start": "109640",
    "end": "116759"
  },
  {
    "text": "And then similarly, we\ncould have an operation",
    "start": "116760",
    "end": "122220"
  },
  {
    "text": "that scales vectors, so here's a\nprocedure scale that multiplies",
    "start": "122220",
    "end": "129164"
  },
  {
    "text": "a vector, v, by some number, s. So here's v, v goes from\nthere to there and I scale v,",
    "start": "129164",
    "end": "137120"
  },
  {
    "text": "and I get a vector in the\nsame direction that's longer. And again, to scale\na vector, I multiply",
    "start": "137120",
    "end": "143195"
  },
  {
    "text": "the successive coordinates. So I make a vector,\nwhose x coordinate is the scale factor\ntimes the x coordinate",
    "start": "143195",
    "end": "150640"
  },
  {
    "text": "and whose y coordinate is\nthe scale factor times the y coordinate. So those are two operations\nthat are implemented using",
    "start": "150640",
    "end": "158700"
  },
  {
    "text": "the representation of vectors. And the representation\nof vectors, for instance, is something that we can\nbuild in terms of pairs.",
    "start": "158700",
    "end": "165640"
  },
  {
    "text": "So George has gone\nout and implemented for us make-vector and x\ncoordinate and y coordinate,",
    "start": "165640",
    "end": "173360"
  },
  {
    "text": "and this could be done, for\ninstance, using cons, car and cdr; and notice\nhere, I wrote this",
    "start": "173360",
    "end": "184989"
  },
  {
    "text": "in a slightly different way. The procedures we've seen\nbefore, I've said something",
    "start": "184990",
    "end": "190660"
  },
  {
    "text": "like say, make-vector of\nx and y: cons of x and y.",
    "start": "190660",
    "end": "196170"
  },
  {
    "text": "And here I just wrote\nmake-vector cons. And that means something\nslightly different. Previously we'd say,\ndefine make-vector to be",
    "start": "196170",
    "end": "203250"
  },
  {
    "text": "a procedure that takes\ntwo arguments, x and y, and does cons of x and y. And here I am saying define\nmake-vector to be the thing",
    "start": "203250",
    "end": "212870"
  },
  {
    "text": "that cons is, and that's almost\nthe same as the other way we've",
    "start": "212870",
    "end": "218836"
  },
  {
    "text": "been writing things. And I just want you to\nget used to the idea that procedures can be objects,\nand that you can name them.",
    "start": "218837",
    "end": "226360"
  },
  {
    "text": " OK, well there's\nvector representation, and again, if that was\nall there was to it,",
    "start": "226360",
    "end": "234350"
  },
  {
    "text": "this would all be pretty boring. And the point is, remember,\nthat you can use cons to glue",
    "start": "234350",
    "end": "240290"
  },
  {
    "text": "together not just\nnumbers to form pairs, but to glue together\narbitrary things. So for instance, if we'd like\nto represent a line segment,",
    "start": "240290",
    "end": "251500"
  },
  {
    "text": "say the line segment that\ngoes from a certain vector: say, the segment from the\nvector 2,3 to the point",
    "start": "251500",
    "end": "266600"
  },
  {
    "text": "represented by the vector 5,1. If we want to represent\nthat line segment,",
    "start": "266600",
    "end": "273349"
  },
  {
    "text": "then we can build that\nas a pair of pairs. ",
    "start": "273350",
    "end": "281130"
  },
  {
    "text": "So again, we can\nrepresent line segments. We can make a constructor that\nmakes a segment using cons,",
    "start": "281130",
    "end": "288150"
  },
  {
    "text": "selects out the\nstart of a segment, selects out the end\npoint of the segment;",
    "start": "288150",
    "end": "295290"
  },
  {
    "text": "and then if we\nactually look at that, if we peel away the\nabstraction layers, and say what's that\nreally is a pair of pairs,",
    "start": "295290",
    "end": "304870"
  },
  {
    "text": "we'd say well that's a pair. Here's the segment. ",
    "start": "304870",
    "end": "310320"
  },
  {
    "text": "It's car, right, it's\ncar pointer is a pair, and it's cdr is also a pair, and\nthen what the car is-- here's",
    "start": "310320",
    "end": "321040"
  },
  {
    "text": "the car, that itself\nis a pair of 2 and 3.",
    "start": "321040",
    "end": "326110"
  },
  {
    "text": "And similarly the cdr\nis a pair of 2 and 3. And let me remind you\nagain, that a lot of people have some idea that if\nI'd taken this arrow",
    "start": "326110",
    "end": "332780"
  },
  {
    "text": "and somehow written\nit to point down, that would mean something else. That's irrelevant.",
    "start": "332780",
    "end": "338965"
  },
  {
    "text": "It's only how\nthese are connected and not whether this\narrow happens to go vertically or horizontally. ",
    "start": "338965",
    "end": "347770"
  },
  {
    "text": "And again just to\nremind you, there was this notion of closure.",
    "start": "347770",
    "end": "352860"
  },
  {
    "text": "See, closure was the\nthing that allowed",
    "start": "352860",
    "end": "362270"
  },
  {
    "text": "us to start building\nup complexity, that didn't trap us in pairs. Particularly what I mean\nis the things that we make,",
    "start": "362270",
    "end": "372610"
  },
  {
    "text": "having combined things\nusing cons to get a pair, those things themselves\ncan be combined",
    "start": "372610",
    "end": "380410"
  },
  {
    "text": "using cons to make more\ncomplicated things. Or as a mathematician might say,\nthe set of data objects in Lisp",
    "start": "380410",
    "end": "388759"
  },
  {
    "text": "is closed under the\noperation of forming pairs.",
    "start": "388760",
    "end": "394130"
  },
  {
    "text": "That's the thing that allows\nus to build complexity. And that seems\nobvious, but remember, a lot of the things in the\ncomputer languages that people",
    "start": "394130",
    "end": "401450"
  },
  {
    "text": "use are not closed. So for example, forming\narrays in basic and Fortran",
    "start": "401450",
    "end": "406640"
  },
  {
    "text": "is not a closed\noperation, because you can make an array of numbers or\ncharacter strings or something,",
    "start": "406640",
    "end": "412080"
  },
  {
    "text": "but you can't make\nan array of arrays. And when you look at\nmeans of combination,",
    "start": "412080",
    "end": "417680"
  },
  {
    "text": "you should be should\nbe asking yourself whether things are closed under\nthat means of combination. ",
    "start": "417680",
    "end": "425280"
  },
  {
    "text": "Well in any case, because\nwe can form pairs of pairs, we can start using\npairs to glue things",
    "start": "425280",
    "end": "431040"
  },
  {
    "text": "together in all sorts\nof different ways. So for instance if I'd\nlike to glue together",
    "start": "431040",
    "end": "436620"
  },
  {
    "text": "the four things, 1,\n2, 3 and 4, there are a lot of ways I can do it. I could, for example, like we\ndid with that line segment,",
    "start": "436620",
    "end": "444950"
  },
  {
    "text": "I could make a pair that had a 1\nand a 2 and a 3 and a 4, right?",
    "start": "444950",
    "end": "456900"
  },
  {
    "text": "Or if I liked, I could\ndo something like this. I could make a pair,\nwhose first thing",
    "start": "456900",
    "end": "464900"
  },
  {
    "text": "is a pair, whose car is\n1, and his cdr is itself",
    "start": "464900",
    "end": "472080"
  },
  {
    "text": "a pair that has the\n2 and the 3, and then I could put the 4 up here. So you see, there are\na lot of different ways",
    "start": "472080",
    "end": "478890"
  },
  {
    "text": "that I can start using pairs\nto glue things together, and so it'll be a\ngood idea to establish",
    "start": "478890",
    "end": "484400"
  },
  {
    "text": "some kind of\nconventions, right, that allow us to deal with this\nthing in some conventional way,",
    "start": "484400",
    "end": "491600"
  },
  {
    "text": "so we're not constantly\nmaking an ad hoc choice. And Lisp has a\nparticular convention",
    "start": "491600",
    "end": "500780"
  },
  {
    "text": "for representing a\nsequence of things as, essentially,\na chain of pairs,",
    "start": "500780",
    "end": "506729"
  },
  {
    "text": "and that's called a list. ",
    "start": "506730",
    "end": "514581"
  },
  {
    "text": "And what a list is is\nessentially just a convention for representing a sequence.",
    "start": "514581",
    "end": "520929"
  },
  {
    "text": "I would represent\nthe sequence 1, 2, 3 and 4 by a sequence of pairs.",
    "start": "520929",
    "end": "528420"
  },
  {
    "text": "I'd put 1 here and then the cdr\nof this would point to another",
    "start": "528420",
    "end": "534250"
  },
  {
    "text": "pair whose car was the\nnext thing in the sequence,",
    "start": "534250",
    "end": "541490"
  },
  {
    "text": "and the cdr would point to\nanother pair whose car was the next thing in the\nsequence-- so there's 3--",
    "start": "541490",
    "end": "548399"
  },
  {
    "text": "and then another one. So for each item in the\nsequence, I'll get a pair.",
    "start": "548400",
    "end": "555450"
  },
  {
    "text": "And now there are\nno more, so I put a special marker\nthat means there's",
    "start": "555450",
    "end": "561540"
  },
  {
    "text": "nothing more in the list. OK, so that's a conventional\nway to glue things",
    "start": "561540",
    "end": "570959"
  },
  {
    "text": "together if you want to\nrepresent a sequence, right. And what it is is\na bunch of pairs,",
    "start": "570960",
    "end": "579320"
  },
  {
    "text": "the successive cars of\neach pair are the items that you want to glue\ntogether, and the cdr pointer",
    "start": "579320",
    "end": "587080"
  },
  {
    "text": "points to the next pair. Now if I actually\nwanted to construct that, what I would type into\nLisp is this: I'd actually",
    "start": "587080",
    "end": "597050"
  },
  {
    "text": "construct that as saying, well\nthis thing is the cons of 1",
    "start": "597050",
    "end": "602779"
  },
  {
    "text": "onto the cons of 2 onto the\ncons of 3 onto the cons of 4",
    "start": "602780",
    "end": "613570"
  },
  {
    "text": "onto, well, this thing nil. And what nil is is a name\nfor the end of list marker.",
    "start": "613570",
    "end": "620828"
  },
  {
    "text": "It's a special name, which means\nthis is the end of the list. ",
    "start": "620828",
    "end": "626760"
  },
  {
    "text": "OK, so that's how I would\nactually construct that. ",
    "start": "626760",
    "end": "637195"
  },
  {
    "text": "Of course, it's a terrible\ndrag to constantly have to write something like the\ncons of 1 onto the cons of 2",
    "start": "637195",
    "end": "642850"
  },
  {
    "text": "onto the cons of 3, whenever\nyou want to make this thing. So Lisp has an operation\nthat's called LIST,",
    "start": "642850",
    "end": "653779"
  },
  {
    "text": "and LIST is just an abbreviation\nfor this nest of conses.",
    "start": "653780",
    "end": "659047"
  },
  {
    "text": "So I could say, I\ncould construct that by saying that is the\nlist of 1, 2, 3 and 4.",
    "start": "659047",
    "end": "668010"
  },
  {
    "text": "And all this is is another way,\na piece of syntactic sugar, a more convenient way for\nwriting that chain of conses--",
    "start": "668010",
    "end": "675390"
  },
  {
    "text": "cons of cons of cons of cons\nof cons of cons onto nil. So for example, I could\nbuild this thing and say,",
    "start": "675390",
    "end": "681629"
  },
  {
    "text": "I'll define 1-TO-4 to be\nthe list of 1, 2, 3 and 4.",
    "start": "681630",
    "end": "699150"
  },
  {
    "start": "699150",
    "end": "708070"
  },
  {
    "text": "OK, well notice some\nof the consequences of using this convention.",
    "start": "708070",
    "end": "714190"
  },
  {
    "text": "First of all if I have this\nlist, this 1, 2, 3 and 4, the car of the whole thing is\nthe first element in the list,",
    "start": "714190",
    "end": "722269"
  },
  {
    "text": "right. How do I get 2? Well, 2 would be the car of\nthe cdr of this thing 1-TO-4,",
    "start": "722270",
    "end": "741850"
  },
  {
    "text": "it would be 2, right. I take this thing, I take the\ncdr of it, which is this much,",
    "start": "741850",
    "end": "750050"
  },
  {
    "text": "and the car of that is\n2, and then similarly, the car of the cdr of the cdr\nof 1-TO-4, cdr, cdr, car--",
    "start": "750050",
    "end": "768060"
  },
  {
    "text": "would give me 3, and so on. Let's take a look at that on the\ncomputer screen for a second.",
    "start": "768060",
    "end": "775370"
  },
  {
    "text": " I could come up to\nLisp, and I could type",
    "start": "775370",
    "end": "782180"
  },
  {
    "text": "define 1-TO-4 to be the list\nof 1, 2, 3 and 4, right.",
    "start": "782180",
    "end": "794190"
  },
  {
    "text": "And I'll tell that\nto Lisp, and it says, fine, that's the\ndefinition of 1-TO-4.",
    "start": "794190",
    "end": "802540"
  },
  {
    "text": "And I could say,\nfor instance, what's the car of the cdr\nof the cdr of 1-TO-4,",
    "start": "802540",
    "end": "814260"
  },
  {
    "text": "close paren, close paren. Right, so the car of the\ncdr of the cdr would be 3.",
    "start": "814260",
    "end": "823916"
  },
  {
    "text": "Right, or I could say,\nwhat's 1-TO-4 itself.",
    "start": "823916",
    "end": "831660"
  },
  {
    "text": "And you see what\nLisp typed out is 1, 2, 3, 4, enclosed in\nparentheses, and this notation,",
    "start": "831660",
    "end": "838690"
  },
  {
    "text": "typing the elements of the\nlist enclosed in parentheses is Lisp's conventional\nway for printing back",
    "start": "838690",
    "end": "846290"
  },
  {
    "text": "this chain of pairs that\nrepresents a sequence. So for example,\nif I said, what's the cdr of 1-TO-4, that's going\nto be the rest of the list.",
    "start": "846290",
    "end": "861390"
  },
  {
    "text": "That's the thing pointed\nto by the first pair, which is, again, a sequence\nthat starts off with 2.",
    "start": "861390",
    "end": "868880"
  },
  {
    "text": "Or for example,\nI go off and say, what's the cdr of the cdr\nof 1-TO-4; then that's 3,4.",
    "start": "868880",
    "end": "884990"
  },
  {
    "text": "Or if I say, what's\nthe cdr of the cdr",
    "start": "884990",
    "end": "892002"
  },
  {
    "text": "of the cdr of the cdr of\n1-TO-4, and I'm down there",
    "start": "892002",
    "end": "905630"
  },
  {
    "text": "looking at the end of\nlist pointer itself, and Lisp prints that as just\nopen paren, close paren.",
    "start": "905630",
    "end": "910779"
  },
  {
    "text": "You can think of that as a\nlist with nothing in there. All right, see at the end\nwhat I did there was I",
    "start": "910780",
    "end": "915800"
  },
  {
    "text": "looked at the cdr of the\ncdr of the cdr of 1-TO-4,",
    "start": "915800",
    "end": "921029"
  },
  {
    "text": "and I'm just left with the\nend of list pointer itself. And that gets printed\nas open close.",
    "start": "921030",
    "end": "926450"
  },
  {
    "start": "926450",
    "end": "934350"
  },
  {
    "text": "All right, well that's\na conventional way you can see for working\ndown a list by taking",
    "start": "934350",
    "end": "942080"
  },
  {
    "text": "successive cdrs of things. It's called cdring down a list. And of course it's\npretty much of a drag",
    "start": "942080",
    "end": "948220"
  },
  {
    "text": "to type all those cdrs by hand. You don't do that. You write procedures\nthat do that. And in fact one very, very\ncommon thing to do in Lisp",
    "start": "948220",
    "end": "956129"
  },
  {
    "text": "is to write procedures that,\nsort of, take a list of things",
    "start": "956130",
    "end": "961920"
  },
  {
    "text": "and do something to every\nelement in the list, and return you a\nlist of the results.",
    "start": "961920",
    "end": "967399"
  },
  {
    "text": "So what I mean for example, is\nI might write a procedure called Scale-List, and\nScale-List I might",
    "start": "967400",
    "end": "978110"
  },
  {
    "text": "say I want to scale by 10\nthe entire list 1-TO-4,",
    "start": "978110",
    "end": "986820"
  },
  {
    "text": "and that would return for\nme the list 10, 20, 30, 40.",
    "start": "986820",
    "end": "996513"
  },
  {
    "text": "[UNINTELLIGIBLE PHRASE]\nRight, it returns list, and well you can\nsee that there's",
    "start": "996513",
    "end": "1006360"
  },
  {
    "text": "going to be some kind of\nrecursive strategy for doing it. How would I actually\nwrite that procedure?",
    "start": "1006360",
    "end": "1012800"
  },
  {
    "text": "The idea would be, well if you'd\nlike to build up a list where you've multiplied every element\nby 10, what you'd say is well",
    "start": "1012800",
    "end": "1021399"
  },
  {
    "text": "you imagine that you'd\ntaken the rest of the list-- right, the thing represented\nby the cdr of the list,",
    "start": "1021400",
    "end": "1028459"
  },
  {
    "text": "and suppose I'd already built\na list where each of these was multiplied by 10--",
    "start": "1028460",
    "end": "1033890"
  },
  {
    "text": " that would be Scale-List\nof the cdr of the list.",
    "start": "1033890",
    "end": "1040490"
  },
  {
    "text": "And then all I have to do is\nmultiply the car of the list by 10, and then cons that onto\nthe rest, and I'll get a list.",
    "start": "1040490",
    "end": "1048666"
  },
  {
    "text": "Right and then\nsimilarly, to have scaled the cdr of the list, I'll\nscale the cdr of that and cons",
    "start": "1048666",
    "end": "1053929"
  },
  {
    "text": "onto that 2 multiplied by 10. And finally when I get all\nthe way down to the end, and I only have this\nend of list pointer.",
    "start": "1053930",
    "end": "1061488"
  },
  {
    "text": "All right, this thing\nwhose name is nil-- well I just returned an\nend of list pointer. So there's a recursive\nstrategy for doing that.",
    "start": "1061488",
    "end": "1067700"
  },
  {
    "text": "Here's the actual\nprocedure that does that. Right, this is an example\nof the general strategy",
    "start": "1067700",
    "end": "1073710"
  },
  {
    "text": "of cdr-ing down a\nlist and so called cons-ing up the result, right. So to Scale a list l by some\nscale factor s, what do I do?",
    "start": "1073710",
    "end": "1086090"
  },
  {
    "text": "Well there's a test, and Lisp\nhas the predicate called null. Null means is this thing\nthe end of list pointer,",
    "start": "1086090",
    "end": "1093930"
  },
  {
    "text": "or another way to\nthink of that is are there any elements\nin this list, right. But in any case if I'm looking\nat the end of list pointer,",
    "start": "1093930",
    "end": "1100820"
  },
  {
    "text": "then I just return the\nend of list pointer. I just return nil,\notherwise I cons together",
    "start": "1100820",
    "end": "1109710"
  },
  {
    "text": "the result of doing\nwhat I'm going to do to the first\nelement in the list,",
    "start": "1109710",
    "end": "1115850"
  },
  {
    "text": "namely taking the car of\nl and multiplying it by s, and I cons that onto recursively\nscaling the rest of the list.",
    "start": "1115850",
    "end": "1126350"
  },
  {
    "text": " OK, so again, the general\nidea is that you recursively",
    "start": "1126350",
    "end": "1133590"
  },
  {
    "text": "do something to the rest of the\nlist, to the cdr of the list, and then you cons that onto\nactually doing something",
    "start": "1133590",
    "end": "1138910"
  },
  {
    "text": "to the first\nelement of the list. When you get down\nto the end here, you return the end\nof list pointer,",
    "start": "1138910",
    "end": "1147330"
  },
  {
    "text": "and that's a general pattern\nfor doing something to a list. ",
    "start": "1147330",
    "end": "1154000"
  },
  {
    "text": "Well of course you\nshould know by now that the very fact that there's\na general pattern there means I",
    "start": "1154000",
    "end": "1160830"
  },
  {
    "text": "shouldn't be writing\nthis procedure at all. What I should do is\nwrite a procedure that's the general pattern\nitself that says,",
    "start": "1160830",
    "end": "1167037"
  },
  {
    "text": "do something to\neverything in the list and define this thing\nin terms of that. Right, make some\nhigher order procedure,",
    "start": "1167037",
    "end": "1172660"
  },
  {
    "text": "and here's the higher order\nprocedure that does that. It's called MAP, and what\nMAP does is it takes a list,",
    "start": "1172660",
    "end": "1179860"
  },
  {
    "text": "takes a list l, and it\ntakes a procedure p,",
    "start": "1179860",
    "end": "1185040"
  },
  {
    "text": "and it returns the list\nof the elements gotten by applying p to each\nsuccessive element in the list.",
    "start": "1185040",
    "end": "1191970"
  },
  {
    "text": "All right, so p to\nv1, p to v2, p of en. Right, so I think\nof taking this list",
    "start": "1191970",
    "end": "1197720"
  },
  {
    "text": "and transforming it by\napplying p to each element. And you see all this\nprocedure is is exactly",
    "start": "1197720",
    "end": "1205789"
  },
  {
    "text": "the general strategy I said. Instead of multiply by\n10, it's do the procedure. If the list is\nempty, return nil.",
    "start": "1205790",
    "end": "1213150"
  },
  {
    "text": "Otherwise, apply p to the\nfirst element of the list. Right, apply p to car\nof l, and cons that",
    "start": "1213150",
    "end": "1220450"
  },
  {
    "text": "onto the result of\napplying p to everything in the cdr of the\nlist, so that's",
    "start": "1220450",
    "end": "1226450"
  },
  {
    "text": "a general procedure called MAP. And I could define\nScale-List in terms of MAP.",
    "start": "1226450",
    "end": "1239505"
  },
  {
    "text": "Let me show you that first.  But I could say\nScale-List is another way",
    "start": "1239505",
    "end": "1245930"
  },
  {
    "text": "to define it is just\nMAP along the list by the procedure, which takes\nan item and multiplies it by s.",
    "start": "1245930",
    "end": "1255429"
  },
  {
    "text": " Right, so this is really\nthe way I should think",
    "start": "1255430",
    "end": "1261010"
  },
  {
    "text": "about scaling the list,\nbuild that actual recursion into the general strategy, not\nto every particular procedure",
    "start": "1261010",
    "end": "1266755"
  },
  {
    "text": "I write. And of course, one of\nthe values of doing this is that you start\nto see commonality.",
    "start": "1266755",
    "end": "1271962"
  },
  {
    "text": "Right, again you're capturing\ngeneral patterns of usage. For instance, if I said\nMAP, the square procedure,",
    "start": "1271962",
    "end": "1282370"
  },
  {
    "text": "down this list 1-TO-4, then\nI'd end up with 1, 4, 9 and 16.",
    "start": "1282370",
    "end": "1292690"
  },
  {
    "text": "Right, or if I said MAP\ndown this list, lambda",
    "start": "1292690",
    "end": "1299470"
  },
  {
    "text": "of x plus x10, if I MAP\nthat down 1-TO-4, then I'd",
    "start": "1299470",
    "end": "1310039"
  },
  {
    "text": "get the list where\neverything had 10 added to it: right, so\nI'd get 11, 12, 13, 14.",
    "start": "1310040",
    "end": "1317795"
  },
  {
    "text": " And you can see that's going\nto be a very, very common idea:",
    "start": "1317795",
    "end": "1323590"
  },
  {
    "text": "doing something to every\nelement in the list. ",
    "start": "1323590",
    "end": "1328710"
  },
  {
    "text": "One thing you might\nthink about is writing MAP in an iterative style. The one I wrote happens to\nevolve a recursive process,",
    "start": "1328710",
    "end": "1335460"
  },
  {
    "text": "but we could just as\neasily have made one that evolves an iterative process. But see the interesting\nthing about it",
    "start": "1335460",
    "end": "1341010"
  },
  {
    "text": "is that once you start\nthinking in terms of MAP-- see, once you say\nscale is just MAP,",
    "start": "1341010",
    "end": "1346460"
  },
  {
    "text": "you stop thinking about whether\nit's iterative or recursive, and you just say, well\nthere's this aggregate, there's this list, and\nwhat I do is transform",
    "start": "1346460",
    "end": "1353352"
  },
  {
    "text": "every item in the\nlist, and I stop thinking about the particular\ncontrol structure in order.",
    "start": "1353353",
    "end": "1359050"
  },
  {
    "text": "That's a very, very\nimportant idea, and it, I guess it\nreally comes out of APL.",
    "start": "1359050",
    "end": "1366530"
  },
  {
    "text": "It's, sort of, the really\nimportant idea in APL that you stop thinking\nabout control structures, and you start thinking about\noperations on aggregates,",
    "start": "1366530",
    "end": "1374788"
  },
  {
    "text": "and then about halfway\nthrough this course, we'll see when we talk about\nsomething called stream processing, how that\nview of the world",
    "start": "1374788",
    "end": "1381309"
  },
  {
    "text": "really comes into its glory. This is just us a,\nsort of, cute idea. But we'll see much more\napplications of that later on.",
    "start": "1381310",
    "end": "1389520"
  },
  {
    "text": "Well let me mention that there's\nsomething that's very similar to MAP that's also a\nuseful idea, and that's--",
    "start": "1389520",
    "end": "1397680"
  },
  {
    "text": "see, MAP says I take a list, I\napply something to each item,",
    "start": "1397680",
    "end": "1403130"
  },
  {
    "text": "and I return a list of\nthe successive values. There's another\nthing I might do, which is very, very similar,\nwhich is take a list",
    "start": "1403130",
    "end": "1411450"
  },
  {
    "text": "and some action you want\nto do and then do it to each item in the\nlist in sequence.",
    "start": "1411450",
    "end": "1416470"
  },
  {
    "text": "Don't make a list of the values,\njust do this particular action, and that's something\nthat's very much like MAP.",
    "start": "1416470",
    "end": "1425039"
  },
  {
    "text": "It's called for-each,\nand for-each takes a procedure and a list,\nand what it's going to do",
    "start": "1425040",
    "end": "1431840"
  },
  {
    "text": "is do something to\nevery item in the list. So basically what it does: it\nsays if the list is not empty,",
    "start": "1431840",
    "end": "1438920"
  },
  {
    "text": "right, if the list is\nnot null, then what I do is, I apply my procedure to\nthe first item in the list,",
    "start": "1438920",
    "end": "1447690"
  },
  {
    "text": "and then I do this thing\nto the rest of the list. I apply for-each to\nthe cdr of the list.",
    "start": "1447690",
    "end": "1455422"
  },
  {
    "text": "All right, so I do it to\nthe first of the list, do it to the rest of the list,\nand of course, when I call it",
    "start": "1455422",
    "end": "1460633"
  },
  {
    "text": "recursively, that's\ngoing to do it to the rest of the rest\nof the list and so on. And finally, when I get done,\nI have to just do something",
    "start": "1460633",
    "end": "1467480"
  },
  {
    "text": "to say I'm done, so we'll\nreturn the message \"done.\" So that's very,\nvery similar to MAP.",
    "start": "1467480",
    "end": "1472980"
  },
  {
    "text": "It's mostly different\nin what it returns. And so for example, if I\nhad some procedure that",
    "start": "1472980",
    "end": "1478550"
  },
  {
    "text": "printed things on the screen,\nif I wanted to print everything in the list, I could say\nfor-each, print this list.",
    "start": "1478550",
    "end": "1487060"
  },
  {
    "text": "Or if I had a list\nof figures, and I wanted to draw them on the\ndisplay, I could say for-each,",
    "start": "1487060",
    "end": "1493300"
  },
  {
    "text": "display on the\nscreen this figure.  Let's take questions.",
    "start": "1493300",
    "end": "1500970"
  },
  {
    "text": "AUDIENCE: Does it\ncreate a new copy with something done to\nit, unless you explicitly tell it to do that?",
    "start": "1500970",
    "end": "1506744"
  },
  {
    "text": "Is that correct? PROFESSOR: Right. Yeah, that's right. For-each does not create a list.",
    "start": "1506744",
    "end": "1513790"
  },
  {
    "text": "It just sort of does something. So if you have a bunch\nof things you want to do and you're not\nworried about values",
    "start": "1513790",
    "end": "1519190"
  },
  {
    "text": "like printing something,\nor drawing something on the screen, or ringing\nthe bell on the terminal, or for something,\nyou can say for-each,",
    "start": "1519190",
    "end": "1525650"
  },
  {
    "text": "you know, do this for-each\nof those things in the list, whereas MAP actually builds you\nthis new collection of values",
    "start": "1525650",
    "end": "1531445"
  },
  {
    "text": "that you might want to use. It's just a subtle\ndifference between them. AUDIENCE: Could you\nwrite MAP using for-each, so that you did some\nsort of cons or something",
    "start": "1531445",
    "end": "1539120"
  },
  {
    "text": "to build the list back up? PROFESSOR: Well, sort of. I mean, I probably could.",
    "start": "1539120",
    "end": "1544570"
  },
  {
    "text": "I can't think of how\nto do it right offhand, but yeah, I could\narrange something.",
    "start": "1544570",
    "end": "1550098"
  },
  {
    "text": "AUDIENCE: The vital difference\nbetween MAP and for-each is one is recursive\nand the other is not in the sense you defined\nearly yesterday, I believe.",
    "start": "1550098",
    "end": "1561410"
  },
  {
    "text": "PROFESSOR: Yeah, about MAP\nand for-each and recursion. Yeah, that's a good point. ",
    "start": "1561410",
    "end": "1569420"
  },
  {
    "text": "For the MAP procedure\nI wrote, that happens to be a\nrecursive process. And the reason for\nthat is that when",
    "start": "1569420",
    "end": "1575620"
  },
  {
    "text": "you've done this thing\nto the rest of the list, you're waiting for that value\nso that you can stick it on to the beginning of the list,\nwhereas for-each doesn't really",
    "start": "1575620",
    "end": "1583000"
  },
  {
    "text": "have any values to wait for. So that turns out to be\nan iterative process. That's not fundamental. I could have defined\nMAP so that it's evolved",
    "start": "1583000",
    "end": "1590340"
  },
  {
    "text": "by an iterative process. I just didn't happen to. AUDIENCE: If you\nwere to cons for each",
    "start": "1590340",
    "end": "1596010"
  },
  {
    "text": "with a list that had embedded\nlists, I imagine it would work,",
    "start": "1596010",
    "end": "1602330"
  },
  {
    "text": "right? It would give you the\ninternal elements of each of those internal lists?",
    "start": "1602330",
    "end": "1608318"
  },
  {
    "text": "PROFESSOR: OK, the question is\nif I [UNINTELLIGIBLE] for each or MAP, for that matter, with\na list that had lists in it--",
    "start": "1608318",
    "end": "1616406"
  },
  {
    "text": "although we haven't really\nlooked at that yet-- would that work. The answer is yes in the sense\nI mean work and no in the sense",
    "start": "1616406",
    "end": "1624900"
  },
  {
    "text": "that you mean work,\nbecause all that-- see if I give you a list, where\nhanging off here is, you know,",
    "start": "1624900",
    "end": "1636270"
  },
  {
    "text": "is something that's not a\nnumber, maybe another list or you know, another\ncons or something,",
    "start": "1636270",
    "end": "1642039"
  },
  {
    "text": "for-each just says do something\nto each item in this list. It goes down successively\nlooking at the cdrs. AUDIENCE: OK.",
    "start": "1642040",
    "end": "1647220"
  },
  {
    "text": "PROFESSOR: And as far\nas it's concerned, the first item in this list is\nwhatever is hanging off here. AUDIENCE: Mhm. PROFESSOR: That might or\nmight not be the right thing.",
    "start": "1647220",
    "end": "1653780"
  },
  {
    "text": "AUDIENCE: So it wouldn't\ngo down into the-- PROFESSOR: Absolutely not. I could certainly\nwrite something else. There's another,\nwhat you're looking",
    "start": "1653780",
    "end": "1660070"
  },
  {
    "text": "for is a common pattern of usage\ncalled tree recursion, where you take a list,\nand you actually go all the way\ndown to the what's",
    "start": "1660070",
    "end": "1666523"
  },
  {
    "text": "called the leaves of the tree. And you could write such a\nthing, but that's not for-each and it's not MAP.",
    "start": "1666523",
    "end": "1672215"
  },
  {
    "text": "Remember, these\nthings are really being very simple minded. OK, no more questions?",
    "start": "1672215",
    "end": "1677389"
  },
  {
    "text": "All right, let's break. [MUSIC PLAYING]",
    "start": "1677390",
    "end": "1722480"
  },
  {
    "text": "PROFESSOR: What\nI'd like to do now is spend the rest of this time\ntalking about one example,",
    "start": "1722480",
    "end": "1729938"
  },
  {
    "text": "and this example, I think,\npretty much summarizes everything that we've done\nup until now: all right,",
    "start": "1729938",
    "end": "1735030"
  },
  {
    "text": "and that's list structure\nand issues of abstraction, and representation and capturing\ncommonality with higher order",
    "start": "1735030",
    "end": "1744010"
  },
  {
    "text": "procedures, and also is\ngoing to introduce something we haven't really\ntalked about a lot",
    "start": "1744010",
    "end": "1749580"
  },
  {
    "text": "yet-- what I said is the major\nthird theme in this course: meta-linguistic abstraction,\nwhich is the idea that one",
    "start": "1749580",
    "end": "1757990"
  },
  {
    "text": "of the ways of tackling\ncomplexity in engineering design is to build a\nsuitable powerful language.",
    "start": "1757990",
    "end": "1767750"
  },
  {
    "text": "You might recall what\nI said was pretty much the very most\nimportant thing that we're",
    "start": "1767750",
    "end": "1772850"
  },
  {
    "text": "going to tell you\nin this course is that when you think\nabout a language,",
    "start": "1772850",
    "end": "1778670"
  },
  {
    "text": "you think about it in terms\nof what are the primitives; what are the means\nof combination--",
    "start": "1778670",
    "end": "1786225"
  },
  {
    "text": " right, what are the\nthings that allow you to build bigger\nthings; and then what",
    "start": "1786225",
    "end": "1793737"
  },
  {
    "text": "are the means of abstraction. ",
    "start": "1793737",
    "end": "1801169"
  },
  {
    "text": "How do you take those bigger\nthings that you've built and put black boxes around\nthem and use them as elements",
    "start": "1801170",
    "end": "1809539"
  },
  {
    "text": "in making something\neven more complicated? Now the particular language\nI'm going to talk about",
    "start": "1809540",
    "end": "1816380"
  },
  {
    "text": "is an example that was made\nup by a friend of ours called",
    "start": "1816380",
    "end": "1821728"
  },
  {
    "text": "Peter Henderson. ",
    "start": "1821728",
    "end": "1828130"
  },
  {
    "text": "Peter Henderson is\nat the University of Stirling in Scotland. And what this language is\nabout is making figures",
    "start": "1828130",
    "end": "1838990"
  },
  {
    "text": "that sort of look like this. This is this is a woodcut by\nEscher called \"Square Limit.\"",
    "start": "1838990",
    "end": "1846610"
  },
  {
    "text": " You, sort of, see it has\nthis complicated, kind of,",
    "start": "1846610",
    "end": "1852860"
  },
  {
    "text": "recursive, sort of,\nrecursive kind of figure,",
    "start": "1852860",
    "end": "1858647"
  },
  {
    "text": "where there's this fish pattern\nin the middle and things sort of bleed out smaller and\nsmaller in self similar ways.",
    "start": "1858647",
    "end": "1864570"
  },
  {
    "text": " Anyway, Peter\nHenderson's language",
    "start": "1864570",
    "end": "1869840"
  },
  {
    "text": "was for describing figures\nthat look like that and designing new ones\nthat look like that",
    "start": "1869840",
    "end": "1876630"
  },
  {
    "text": "and drawing them on\na display screen. There's another theme\nthat we'll see illustrated",
    "start": "1876630",
    "end": "1886630"
  },
  {
    "text": "by this example, and that's the\nissue of what Gerry and I have already mentioned\na lot: that there's",
    "start": "1886630",
    "end": "1892370"
  },
  {
    "text": "no real difference,\nin some sense, between procedures and data. And anyway I hope by\nthe end of this morning,",
    "start": "1892370",
    "end": "1901190"
  },
  {
    "text": "if you're not already, you\nwill be completely confused about what the difference\nbetween procedures and data",
    "start": "1901190",
    "end": "1907030"
  },
  {
    "text": "are, if you're not confused\nabout that already. Well in any case, let's start\ndescribing Peter's language.",
    "start": "1907030",
    "end": "1915370"
  },
  {
    "text": "I should start by telling\nyou what the primitives are. This language is very\nsimple because there's only one primitive.",
    "start": "1915370",
    "end": "1920780"
  },
  {
    "text": " A primitive is not quite\nwhat you think it is.",
    "start": "1920780",
    "end": "1927480"
  },
  {
    "text": "There's only one primitive\ncalled a picture, and a picture is not quite\nwhat you think it is. Here's an example.",
    "start": "1927480",
    "end": "1933950"
  },
  {
    "text": "This is a picture of George. ",
    "start": "1933950",
    "end": "1938980"
  },
  {
    "text": "The idea is that a\npicture in this language is going to be something that\ndraws a figure scaled to fit",
    "start": "1938980",
    "end": "1949870"
  },
  {
    "text": "a rectangle that you specify. So here you see in [? Saint ?]\n[? Lawrence's ?] outline",
    "start": "1949870",
    "end": "1954990"
  },
  {
    "text": "of a rectangle, that's not\nreally part of the picture,",
    "start": "1954990",
    "end": "1960510"
  },
  {
    "text": "but the picture-- you'll give it a\nrectangle, and it will draw this figure\nscaled to fit the rectangle.",
    "start": "1960510",
    "end": "1967100"
  },
  {
    "text": "So for example, there's George,\nand here, this is also George.",
    "start": "1967100",
    "end": "1972840"
  },
  {
    "text": "It's the same\npicture, right, just scaled to fit a\ndifferent rectangle.",
    "start": "1972840",
    "end": "1977920"
  },
  {
    "text": "Here's George as a fat kid.  That's the same George.",
    "start": "1977920",
    "end": "1983920"
  },
  {
    "text": "It's all the same figure. All of these three things\nare the same picture",
    "start": "1983920",
    "end": "1988962"
  },
  {
    "text": "in this language. I'm just giving it different\nrectangles to scale itself in. ",
    "start": "1988962",
    "end": "1996300"
  },
  {
    "text": "OK, those are the primitives. That is the primitive.",
    "start": "1996300",
    "end": "2001420"
  },
  {
    "text": "Now let's start talking about\nthe means of combination and the operations. There is, for example, an\noperation called Rotate.",
    "start": "2001420",
    "end": "2011080"
  },
  {
    "text": "And what Rotate does\nis, if I have a picture, say a picture that draws\nan \"A\" in some rectangle",
    "start": "2011080",
    "end": "2019450"
  },
  {
    "text": "that I give it, the\nRotate of that-- say the Rotate by\n90 degrees would,",
    "start": "2019450",
    "end": "2026662"
  },
  {
    "text": "if I give it a rectangle,\ndraw the same image, but again, scaled to\nfit that rectangle.",
    "start": "2026662",
    "end": "2033554"
  },
  {
    "text": " So that's Rotate by 90 degrees. There's another operation called\nFlip that can flip something,",
    "start": "2033555",
    "end": "2041770"
  },
  {
    "text": "either horizontally\nor vertically. All right, so those are,\nsort of, operations, or you can think\nof those as means",
    "start": "2041770",
    "end": "2047577"
  },
  {
    "text": "of combination of one element. I can put things together.",
    "start": "2047577",
    "end": "2052879"
  },
  {
    "text": "There's a means of\ncombination called Beside, and what Beside does:\nit'll take two pictures,",
    "start": "2052880",
    "end": "2060169"
  },
  {
    "text": "let's say A and B-- ",
    "start": "2060170",
    "end": "2069346"
  },
  {
    "text": "and by picture I\nmean something that's going to draw an image in\na specified rectangle-- and what Beside will do--",
    "start": "2069346",
    "end": "2078158"
  },
  {
    "text": "I have to say, Beside of A and\nB, the side of two pictures and some number, s.",
    "start": "2078159",
    "end": "2085590"
  },
  {
    "text": "And s will be a number\nbetween zero and one.  And Beside will draw a\npicture that looks like this.",
    "start": "2085590",
    "end": "2092619"
  },
  {
    "text": "It will take the\nrectangle you give it and scale its base by s. Say s is 0.5.",
    "start": "2092620",
    "end": "2100240"
  },
  {
    "text": "And then over here\nit will draw-- it'll put the first\npicture, and over here it'll",
    "start": "2100240",
    "end": "2111700"
  },
  {
    "text": "put the second picture. Or for instance if I gave\nit a different value of s,",
    "start": "2111700",
    "end": "2117040"
  },
  {
    "text": "if I said Beside with a 0.25,\nit would do the same thing,",
    "start": "2117040",
    "end": "2127110"
  },
  {
    "text": "except the A would\nbe much skinnier. ",
    "start": "2127110",
    "end": "2132230"
  },
  {
    "text": "So it would draw\nsomething like that.",
    "start": "2132230",
    "end": "2138230"
  },
  {
    "text": "So there's a means of\ncombination Beside, and similarly there's\nan Above, which does the same thing except\nit puts them vertically",
    "start": "2138230",
    "end": "2144559"
  },
  {
    "text": "instead of horizontally.  Well let's look at that.",
    "start": "2144560",
    "end": "2150470"
  },
  {
    "text": "All right, there's George\nand his kid brother,",
    "start": "2150470",
    "end": "2156700"
  },
  {
    "text": "which is, right, constructed\nby taking George and putting",
    "start": "2156700",
    "end": "2166070"
  },
  {
    "text": "him Beside the Above--",
    "start": "2166070",
    "end": "2171458"
  },
  {
    "text": "taking the empty\npicture, and there's a thing called\nthe empty picture, which does the obvious thing--",
    "start": "2171458",
    "end": "2176650"
  },
  {
    "text": "putting the empty picture\nabove a copy of George, and then putting that\nwhole thing Beside George. ",
    "start": "2176650",
    "end": "2188900"
  },
  {
    "text": "Here's something called P\nwhich is, again, George Beside",
    "start": "2188900",
    "end": "2198230"
  },
  {
    "text": "Flipping George, I think,\nhorizontally in this case, and then Rotating the\nwhole result 180 degrees",
    "start": "2198230",
    "end": "2205802"
  },
  {
    "text": "and putting them\nBeside one another with the basic rectangle\ndivided at 0.5, right,",
    "start": "2205802",
    "end": "2212580"
  },
  {
    "text": "and I can call\nthat P. And then I can take P, and put it above\nthe Flipped copy of itself,",
    "start": "2212580",
    "end": "2223530"
  },
  {
    "text": "and I can call that Q.",
    "start": "2223530",
    "end": "2229650"
  },
  {
    "text": "Notice how rapidly that we've\nbuilt up complexity, just in, you know, 15 seconds,\nyou've gotten from George",
    "start": "2229650",
    "end": "2238060"
  },
  {
    "text": "to that thing Q. Why is that? How are how we able\nto do that so fast?",
    "start": "2238060",
    "end": "2246100"
  },
  {
    "text": "The answer is the\nclosure property. See, it's the fact that\nwhen I take a picture",
    "start": "2246100",
    "end": "2251369"
  },
  {
    "text": "and put it Beside\nanother picture, that's then, again, a\npicture that I can go and Rotate and Flip or\nput Above something else.",
    "start": "2251370",
    "end": "2259090"
  },
  {
    "text": "Right, and when I\ntake that element P, which is the\nBeside or the Flip or the Rotate of something,\nthat's, again, a picture.",
    "start": "2259090",
    "end": "2265560"
  },
  {
    "text": "Right, the world of pictures\nis closed under those means of combination.",
    "start": "2265560",
    "end": "2270830"
  },
  {
    "text": "So whenever I have something,\nI can turn right around and use that as an\nelement in something else.",
    "start": "2270830",
    "end": "2276480"
  },
  {
    "text": "So maybe better than\nlists and segments, that just gives you an image\nfor how fast you can build up complexity, because\noperations are closed.",
    "start": "2276480",
    "end": "2283190"
  },
  {
    "text": " OK, well before we go on\nwith building more things,",
    "start": "2283190",
    "end": "2292133"
  },
  {
    "text": "let's talk about how\nthis language is actually implemented. ",
    "start": "2292133",
    "end": "2297200"
  },
  {
    "text": "The basic element that\nsits under the table here is a thing\ncalled a rectangle,",
    "start": "2297200",
    "end": "2306370"
  },
  {
    "text": "and what a rectangle\nis going to be, it's a thing that specified\nby an origin that's",
    "start": "2306370",
    "end": "2316900"
  },
  {
    "text": "going to be some\nvector that says where the rectangle starts. And then there's going to be\nsome other vector that I'm",
    "start": "2316900",
    "end": "2324019"
  },
  {
    "text": "going to call the horizontal\npart of the rectangle, and another picture called the\nvertical part of the rectangle.",
    "start": "2324020",
    "end": "2340640"
  },
  {
    "text": "And those three pieces\nare the elements: where the lower\nvertex is, how you get to the next\nvertex over here,",
    "start": "2340640",
    "end": "2347922"
  },
  {
    "text": "and how you get to\nthe vertex over there. The three vectors\nspecify a rectangle. ",
    "start": "2347922",
    "end": "2356080"
  },
  {
    "text": "Now to actually\nbuild rectangles, what I'll assume is that we\nhave a constructor called \"make",
    "start": "2356080",
    "end": "2361410"
  },
  {
    "text": "rectangle,\" or \"make-rect,\" and\nselectors for horiz and vert",
    "start": "2361410",
    "end": "2373730"
  },
  {
    "text": "and origin that get out the\npieces of that rectangle.",
    "start": "2373730",
    "end": "2379720"
  },
  {
    "text": "And well, you know a lot of\nways you can do this now. You can do it by using\npairs in some way",
    "start": "2379720",
    "end": "2384970"
  },
  {
    "text": "or other standard lists or not. But in any case, the\nimplementation of these things,",
    "start": "2384970",
    "end": "2390319"
  },
  {
    "text": "that's George's problem. It's just a data\nrepresentation problem. So let's assume we have these\nrectangles to work with.",
    "start": "2390320",
    "end": "2395500"
  },
  {
    "text": " OK. ",
    "start": "2395500",
    "end": "2402310"
  },
  {
    "text": "Now the idea of this,\nremember what's got to happen. Somehow we have to worry\nabout taking the figure",
    "start": "2402310",
    "end": "2409440"
  },
  {
    "text": "and scaling it to fit some\nrectangle that you give it, that's the basic thing\nyou have to arrange,",
    "start": "2409440",
    "end": "2416809"
  },
  {
    "text": "that these pictures can do. ",
    "start": "2416810",
    "end": "2422335"
  },
  {
    "text": "How do we think about that? Well, one way to\nthink about that is that any time I give\nyou a rectangle, that",
    "start": "2422335",
    "end": "2437730"
  },
  {
    "text": "defines, in some\nsense, a transformation from the standard square\ninto that rectangle.",
    "start": "2437730",
    "end": "2445685"
  },
  {
    "text": "Let me say what I mean. By the standard\nsquare, I'll mean something, which is a square\nwhose coordinates are 0,0,",
    "start": "2445685",
    "end": "2453140"
  },
  {
    "text": "and 1,0, and 0,1 and 1,1.",
    "start": "2453140",
    "end": "2461829"
  },
  {
    "text": "And there's some sort of the\nobvious scaling transformation, which maps this to that and this\nto that, and sort of, stretches",
    "start": "2461830",
    "end": "2470890"
  },
  {
    "text": "everything uniformly. So we take a line\nsegment like this",
    "start": "2470890",
    "end": "2481030"
  },
  {
    "text": "and end up mapping it to\na line segment like that,",
    "start": "2481030",
    "end": "2486310"
  },
  {
    "text": "so some point xy goes to\nsome other point up there.",
    "start": "2486310",
    "end": "2493000"
  },
  {
    "text": "And although it's not important,\nwith a little vector algebra, you could write that formula.",
    "start": "2493000",
    "end": "2499190"
  },
  {
    "text": "The thing that xy goes to,\nthe point that xy goes to is gotten by taking the\norigin of the rectangle",
    "start": "2499190",
    "end": "2508300"
  },
  {
    "text": "and then adding that\nas a vector to-- well, take x, the\nx coordinate, which",
    "start": "2508300",
    "end": "2513910"
  },
  {
    "text": "is something between\nzero and one, multiply that by the horizontal\nvector of the rectangle;",
    "start": "2513910",
    "end": "2527450"
  },
  {
    "text": "and take the y coordinate, which\nis also something between zero and one and multiply that\nby the vertical vector",
    "start": "2527450",
    "end": "2535200"
  },
  {
    "text": "of the rectangle. That's just a little\nlinear algebra. Anyway, that's\nthe formula, which",
    "start": "2535200",
    "end": "2540680"
  },
  {
    "text": "is the right obvious\ntransformation that takes things into\nthe unit square,",
    "start": "2540680",
    "end": "2546100"
  },
  {
    "text": "into the interior\nof that rectangle. ",
    "start": "2546100",
    "end": "2551790"
  },
  {
    "text": "OK well, let's actually\nlook at that as a procedure. So what we want\nis the thing which",
    "start": "2551790",
    "end": "2558609"
  },
  {
    "text": "tells us that particular\ntransformation that a rectangle defines.",
    "start": "2558610",
    "end": "2564070"
  },
  {
    "text": "So here's the procedure. I'll call it coordinate-map. Coordinate-map is\nthe thing that takes",
    "start": "2564070",
    "end": "2570450"
  },
  {
    "text": "as its argument a rectangle\nand returns for you a procedure",
    "start": "2570450",
    "end": "2577105"
  },
  {
    "text": "on points.  Right, so for each\nrectangle you get",
    "start": "2577105",
    "end": "2582599"
  },
  {
    "text": "a way of transforming a\npoint xy into that rectangle. And how do you get it?",
    "start": "2582600",
    "end": "2588020"
  },
  {
    "text": "Well I just-- writing in\nLisp what I wrote there on the blackboard-- I add to the origin\nof the rectangle",
    "start": "2588020",
    "end": "2598299"
  },
  {
    "text": "the result of adding-- I take the horizontal\npart of the rectangle;",
    "start": "2598300",
    "end": "2605100"
  },
  {
    "text": "I scale that by the x\ncoordinate of the point. I take the vertical\nvector of the rectangle.",
    "start": "2605100",
    "end": "2613750"
  },
  {
    "text": "I scale that by the y\ncoordinate of the point, and then add all\nthose three things up.",
    "start": "2613750",
    "end": "2620380"
  },
  {
    "text": "That's the procedure. That is the procedure that\nI'm going to apply to a point. ",
    "start": "2620380",
    "end": "2626890"
  },
  {
    "text": "And this whole thing is\ngenerated for each rectangle.",
    "start": "2626890",
    "end": "2633170"
  },
  {
    "text": "So any rectangle defines\na coordinate MAP, which is a procedure on points.",
    "start": "2633170",
    "end": "2639360"
  },
  {
    "text": "OK. ",
    "start": "2639360",
    "end": "2646720"
  },
  {
    "text": "All right, so for\nexample, George here, my original George,\nmight have been something",
    "start": "2646720",
    "end": "2653349"
  },
  {
    "text": "that I specified by\nsegments in the unit square,",
    "start": "2653350",
    "end": "2659660"
  },
  {
    "text": "and then for each rectangle\nI give this thing, I'm going to draw those\nsegments inside that rectangle.",
    "start": "2659660",
    "end": "2668180"
  },
  {
    "text": "How actually do I do that? Well I take each segment in\nmy original reference George",
    "start": "2668180",
    "end": "2675700"
  },
  {
    "text": "that was specified,\nand to each of the end points of those segments, I\napplied the coordinate MAP",
    "start": "2675700",
    "end": "2682290"
  },
  {
    "text": "of the particular rectangle\nI want to draw it in. So for example, this\nlower rectangle, this George as a\nfat kid rectangle,",
    "start": "2682290",
    "end": "2689230"
  },
  {
    "text": "has its coordinate MAP. And if I want to\ndraw this image, what",
    "start": "2689230",
    "end": "2695590"
  },
  {
    "text": "I do is for each segment\nhere, say for this segment, I transformed that point\nby the coordinate MAP,",
    "start": "2695590",
    "end": "2703198"
  },
  {
    "text": "transform that point\nby the coordinate MAP. That will give me this\npoint and that point and draw the segment\nbetween them.",
    "start": "2703198",
    "end": "2710150"
  },
  {
    "text": "Right, that's the idea. Right, and if I give it\na different rectangle like this one, that's a\ndifferent coordinate MAP,",
    "start": "2710150",
    "end": "2716232"
  },
  {
    "text": "so I get a different image\nof those line segments. Well how do we actually get\na picture to start with?",
    "start": "2716232",
    "end": "2722500"
  },
  {
    "text": "I can build a picture to start\nwith out of a list of line segments initially.",
    "start": "2722500",
    "end": "2727750"
  },
  {
    "text": "Here's a procedure\nthat builds what I'll call a primitive\npicture, meaning",
    "start": "2727750",
    "end": "2733667"
  },
  {
    "text": "one I, sort of, got that\ndidn't come out of Beside or Rotate or something. It starts with a list\nof line segments,",
    "start": "2733667",
    "end": "2742922"
  },
  {
    "text": "and now it does what I said. What's a picture have to be? First of all it's a procedure\nthat's defined on rectangles.",
    "start": "2742923",
    "end": "2748790"
  },
  {
    "text": " What does it do? It says for each--",
    "start": "2748790",
    "end": "2754880"
  },
  {
    "text": "this is going to be a\nlist of line segments-- for each segment,\nfor each s, which",
    "start": "2754880",
    "end": "2761030"
  },
  {
    "text": "is a segment in this list of\nsegments, well it draws a line.",
    "start": "2761030",
    "end": "2767410"
  },
  {
    "text": "What line does it draw? It gets the start\npoint of that segment,",
    "start": "2767410",
    "end": "2775290"
  },
  {
    "text": "transforms that by\nthe coordinate MAP of the rectangle. That's the first new\npoint it wants to do.",
    "start": "2775290",
    "end": "2781700"
  },
  {
    "text": "Then it takes the\nendpoint of the segment, transforms that\nby the coordinate MAP of the rectangle, and\nthen draws a line between.",
    "start": "2781700",
    "end": "2787990"
  },
  {
    "text": "Let's assume drawline\nis some primitive that's built into the\nsystem that actually draws a line on the display.",
    "start": "2787990",
    "end": "2793792"
  },
  {
    "text": "All right, so it transforms\nthe endpoints by the coordinate MAP of the rectangle,\ndraws a line between them,",
    "start": "2793792",
    "end": "2799750"
  },
  {
    "text": "does that for each s in\nthis list of segments.",
    "start": "2799750",
    "end": "2806220"
  },
  {
    "text": "And now remember\nagain, a picture is a procedure that takes\na rectangle as argument.",
    "start": "2806220",
    "end": "2811550"
  },
  {
    "text": "So when you hand it a\nrectangle, this is what it does: draws those lines.",
    "start": "2811550",
    "end": "2817140"
  },
  {
    "text": "All right, so there's-- how would I actually\nuse this thing? Let's make it a little\nbit more concrete.",
    "start": "2817140",
    "end": "2823325"
  },
  {
    "text": " Right, I would say\nfor instance, define R",
    "start": "2823325",
    "end": "2835510"
  },
  {
    "text": "to be make-rectangle\nof some stuff,",
    "start": "2835510",
    "end": "2844460"
  },
  {
    "text": "and I'd have to specify some\nvectors here using make-vector.",
    "start": "2844460",
    "end": "2850080"
  },
  {
    "text": "And then I could say, define\nsay, G to be make-picture,",
    "start": "2850080",
    "end": "2864790"
  },
  {
    "text": "and then some stuff. And what I'd have\nto specify here is a list of line segments,\nright, using make segment.",
    "start": "2864790",
    "end": "2875190"
  },
  {
    "text": "Make-segment might be\nmade out of vectors, and vectors might be\nmade out of points. And then if I actually\nwanted to see the image of G",
    "start": "2875190",
    "end": "2883570"
  },
  {
    "text": "inside a rectangle,\nwell a picture is a procedure that takes\na rectangle as argument.",
    "start": "2883570",
    "end": "2891940"
  },
  {
    "text": "So if I then called\nG with an input of R,",
    "start": "2891940",
    "end": "2897609"
  },
  {
    "text": "that would cause whatever\nimage G is worrying about to be drawn inside the\nrectangle R. Right,",
    "start": "2897610",
    "end": "2904370"
  },
  {
    "text": "so that's how you'd use that. [MUSIC PLAYING]",
    "start": "2904370",
    "end": "2948072"
  },
  {
    "text": "PROFESSOR: Well why is it that\nI say this example is nice? You probably don't\nthink it's nice.",
    "start": "2948072",
    "end": "2953680"
  },
  {
    "text": "You probably think it's\nmore weird than nice. Right, representing\nthese pictures as procedures, which\ndo complicated things",
    "start": "2953680",
    "end": "2959870"
  },
  {
    "text": "with rectangles. So why is it nice? ",
    "start": "2959870",
    "end": "2965460"
  },
  {
    "text": "The reason it's nice\nis that once you've implemented the\nprimitives in this way,",
    "start": "2965460",
    "end": "2970779"
  },
  {
    "text": "the means of combination\njust fall out by implementing procedures.",
    "start": "2970780",
    "end": "2976233"
  },
  {
    "text": "Let me show you what I mean. Suppose we want to\nimplement Beside. ",
    "start": "2976233",
    "end": "2981980"
  },
  {
    "text": "So I'd like to-- suppose I've got a picture. Let's call it P1.",
    "start": "2981980",
    "end": "2987620"
  },
  {
    "text": "P1 is going to be--\nand now remember what a picture really is. It's a thing that if you\ncan hand it some rectangle,",
    "start": "2987620",
    "end": "2996630"
  },
  {
    "text": "it will cause an image\nto be drawn in whatever rectangle you hand it.",
    "start": "2996630",
    "end": "3003520"
  },
  {
    "text": "And suppose P2 two is\nsome other picture, and you hand that a rectangle.",
    "start": "3003520",
    "end": "3009570"
  },
  {
    "text": "And whatever rectangle you\nhand it, it draws some picture. ",
    "start": "3009570",
    "end": "3014920"
  },
  {
    "text": "And now if I'd like to\nimplement Beside of P1 and P2",
    "start": "3014920",
    "end": "3025230"
  },
  {
    "text": "with a scale factor A, well\nwhat does that have to be? That's got to be picture. It's got to be a thing that\nyou hand it a rectangle,",
    "start": "3025230",
    "end": "3032270"
  },
  {
    "text": "and it draws something\nin that rectangle. So if hand Beside\nthis rectangle--",
    "start": "3032270",
    "end": "3038350"
  },
  {
    "text": "let's hand it a rectangle. Well what's it going to do? it's going to take\nthis rectangle",
    "start": "3038350",
    "end": "3044960"
  },
  {
    "text": "and split it into two at a\nratio of A and one minus A.",
    "start": "3044960",
    "end": "3052645"
  },
  {
    "text": "And it will say, oh sure,\nnow I've got two rectangles. ",
    "start": "3052645",
    "end": "3062370"
  },
  {
    "text": "And now it goes off to P1 and\nsays P1, well draw yourself in this rectangle, and\ngoes off to P2, and says,",
    "start": "3062370",
    "end": "3069420"
  },
  {
    "text": "P2, fine, draw yourself\nin this rectangle. The only computation\nit has to do",
    "start": "3069420",
    "end": "3074860"
  },
  {
    "text": "is figure out what\nthese rectangles are. Remember a rectangle\nis specified by an origin and a horizontal\nvector and a vertical vector,",
    "start": "3074860",
    "end": "3084140"
  },
  {
    "text": "so it's got to figure out\nwhat these things are. So for this first\nrectangle, the origin",
    "start": "3084140",
    "end": "3089970"
  },
  {
    "text": "turns out to be the origin\nof the original rectangle, and the vertical vector is the\nsame as the vertical vector",
    "start": "3089970",
    "end": "3096539"
  },
  {
    "text": "of the original rectangle. The horizontal vector\nis the horizontal vector",
    "start": "3096540",
    "end": "3103329"
  },
  {
    "text": "of the original\nrectangle scaled by A. And that's the first rectangle.",
    "start": "3103330",
    "end": "3109680"
  },
  {
    "text": "The second rectangle, the\norigin is the original origin",
    "start": "3109680",
    "end": "3115390"
  },
  {
    "text": "plus that horizontal\nvector scaled by A. The horizontal vector\nof the second rectangle",
    "start": "3115390",
    "end": "3123180"
  },
  {
    "text": "is the rest of the horizontal\nvector of the first one, which is 1 minus A times\nthe original H,",
    "start": "3123180",
    "end": "3132220"
  },
  {
    "text": "and the vertical\nvector is still v. But basically it goes\nand constructs these two",
    "start": "3132220",
    "end": "3137515"
  },
  {
    "text": "rectangles, and the important\npoint is having constructed the rectangles, it says OK,\np1, you draw yourself in there,",
    "start": "3137515",
    "end": "3143140"
  },
  {
    "text": "and p2, you draw\nyourself in there, and that's all Beside has to do. All right, let's look\nat that piece of code.",
    "start": "3143140",
    "end": "3149115"
  },
  {
    "start": "3149115",
    "end": "3154500"
  },
  {
    "text": "Beside of a picture and another\npicture with some scaling ratio",
    "start": "3154500",
    "end": "3167890"
  },
  {
    "text": "is first of all, since it's\na picture, a procedure that's going to take a\nrectangle as argument.",
    "start": "3167890",
    "end": "3175590"
  },
  {
    "text": "What's it going to do? It says, p1 draw yourself\nin some rectangle and p2 draw yourself in\nsome other rectangle.",
    "start": "3175590",
    "end": "3183112"
  },
  {
    "text": "And now what are\nthose rectangles? Well here's the computation. It makes a rectangle,\nand this is the algebra I just\ndid on the board:",
    "start": "3183113",
    "end": "3189090"
  },
  {
    "text": "the origin, something; the\nhorizontal vector, something; and the vertical\nvector, something. And for p2, the\nrectangle it wants",
    "start": "3189090",
    "end": "3196480"
  },
  {
    "text": "has some other origin\nand horizontal vector and vertical vector. But the important point\nis that all it's saying",
    "start": "3196480",
    "end": "3202470"
  },
  {
    "text": "is, p1, go do your thing\nin one rectangle, and p2, go do your thing in\nanother rectangle.",
    "start": "3202470",
    "end": "3207890"
  },
  {
    "text": "That's all the Beside has to do. OK, similarly Rotate-- see\nif I have this picture A,",
    "start": "3207890",
    "end": "3223089"
  },
  {
    "text": "and I want to look at say\nrotating A by 90 degrees, what that should mean is, well take\nthis rectangle, which is origin",
    "start": "3223090",
    "end": "3235350"
  },
  {
    "text": "and horizontal vector\nand vertical vector, and now pretend that it's\nreally the rectangle that looks",
    "start": "3235350",
    "end": "3242410"
  },
  {
    "text": "like this, which has an\norigin and a horizontal vector up here, and a\nvertical vector there,",
    "start": "3242410",
    "end": "3249690"
  },
  {
    "text": "and now draw yourself with\nrespect to that rectangle. Let me show you\nthat as a procedure.",
    "start": "3249690",
    "end": "3257120"
  },
  {
    "text": "All right, so we'll Rotate 90\nof the picture, because again, a procedure for rectangle,\nwhich says, OK picture,",
    "start": "3257120",
    "end": "3264610"
  },
  {
    "text": "draw yourself in some\nrectangle; and then this algebra is\nthe transformation",
    "start": "3264610",
    "end": "3269871"
  },
  {
    "text": "on the rectangle. It's the one which makes it look\nlike the rectangle is sideways, the origin is someplace\nelse and the vertical vector",
    "start": "3269872",
    "end": "3275720"
  },
  {
    "text": "is someplace else, and the\nhorizontal vector is someplace else, and vertical\nvector is someplace else.",
    "start": "3275720",
    "end": "3281704"
  },
  {
    "text": "OK? OK. ",
    "start": "3281704",
    "end": "3286890"
  },
  {
    "text": "OK, again notice, the crucial\nthing that's going on here is you're using the\nrepresentation of pictures",
    "start": "3286890",
    "end": "3296880"
  },
  {
    "text": "as procedures to automatically\nget the closure property,",
    "start": "3296880",
    "end": "3301910"
  },
  {
    "text": "because what happens is,\nBeside just has this thing p1. Beside doesn't care if that's a\nprimitive picture or it's line",
    "start": "3301910",
    "end": "3308670"
  },
  {
    "text": "segments or if p1 is,\nitself, the result of doing Aboves or Besides or Rotates. All Beside has to\nknow about, say,",
    "start": "3308670",
    "end": "3315570"
  },
  {
    "text": "p1 is that if you\nhand p1 a rectangle, it will cause\nsomething to be drawn.",
    "start": "3315570",
    "end": "3321069"
  },
  {
    "text": "And above that level,\nBeside just doesn't-- it's none of its business how\np1 accomplishes that drawing.",
    "start": "3321070",
    "end": "3327321"
  },
  {
    "text": "All right, so you're using\nthe procedural representation to ensure this closure. ",
    "start": "3327321",
    "end": "3334440"
  },
  {
    "text": "OK. So implementing\npictures as procedures makes these means\nof combination,",
    "start": "3334440",
    "end": "3341299"
  },
  {
    "text": "you know, both pretty simple\nand also, I think, elegant. But that's not the\nreal punchline.",
    "start": "3341300",
    "end": "3349370"
  },
  {
    "text": "The real punchline\ncomes when you look at the means of\nabstraction in this language.",
    "start": "3349370",
    "end": "3354870"
  },
  {
    "text": "Because what have we done? We've implemented the means\nof combination themselves",
    "start": "3354870",
    "end": "3362400"
  },
  {
    "text": "as procedures.  And what that means\nis that when we",
    "start": "3362400",
    "end": "3367640"
  },
  {
    "text": "go to abstract in this\nlanguage, everything that Lisp supplies us for\nmanipulating procedures",
    "start": "3367640",
    "end": "3375880"
  },
  {
    "text": "is automatically\navailable to do things in this picture language.",
    "start": "3375880",
    "end": "3382010"
  },
  {
    "text": "The technical term I\nwant to say is not only is this language implemented\nin Lisp, obviously it is,",
    "start": "3382010",
    "end": "3389630"
  },
  {
    "text": "but the language is\nnicely embedded in Lisp. ",
    "start": "3389630",
    "end": "3397750"
  },
  {
    "text": "What I mean is by embedding\nthe language in this way,",
    "start": "3397750",
    "end": "3402910"
  },
  {
    "text": "all the power of\nLisp is automatically available as an extension\nto whatever you want to do.",
    "start": "3402910",
    "end": "3409880"
  },
  {
    "text": "And what do I mean by that? Example: say, suppose I\nwant to make a thing that",
    "start": "3409880",
    "end": "3417150"
  },
  {
    "text": "takes four pictures\nA, B, C and D,",
    "start": "3417150",
    "end": "3423869"
  },
  {
    "text": "and makes a configuration\nthat looks like this. ",
    "start": "3423870",
    "end": "3432512"
  },
  {
    "text": "Well you might call\nthat, you know, four pictures or something,\nfour-pict configuration. How do I do that?",
    "start": "3432512",
    "end": "3437740"
  },
  {
    "text": "Well I can obviously do that. I just write a procedure that\ntakes B above D and A above C",
    "start": "3437740",
    "end": "3446140"
  },
  {
    "text": "and puts those things\nbeside each other. So I automatically\nhave Lisp's ability to do procedure composition.",
    "start": "3446140",
    "end": "3453090"
  },
  {
    "text": "And I didn't have to\nmake that specifically in the picture language. It's automatic from the fact\nthat the means of combination",
    "start": "3453090",
    "end": "3458710"
  },
  {
    "text": "are themselves procedures. Or suppose I wanted to do\nsomething a little bit more complicated.",
    "start": "3458710",
    "end": "3464200"
  },
  {
    "text": "I wanted to put in a parameter\nso that for each of these, I could independently specify\na rotation by 90 degrees.",
    "start": "3464200",
    "end": "3470530"
  },
  {
    "text": "That's just putting a\nparameter in the procedure. It's automatically there. Right, it automatically\ncomes from the embedding.",
    "start": "3470530",
    "end": "3478470"
  },
  {
    "text": "Or even more, suppose I wanted\nto, you know, use recursion.",
    "start": "3478470",
    "end": "3484849"
  },
  {
    "text": "Let's look at a recursive means\nof combination on pictures.",
    "start": "3484850",
    "end": "3490740"
  },
  {
    "text": "I could say define-- let's see if you can figure\nout what this one is-- suppose I say define what it\nmeans to right-push",
    "start": "3490740",
    "end": "3498170"
  },
  {
    "text": "a picture, right-push a\npicture and some integer",
    "start": "3498170",
    "end": "3507140"
  },
  {
    "text": "N and some scale\nfactor A. I'll define",
    "start": "3507140",
    "end": "3512380"
  },
  {
    "text": "this to say if N equals 0,\nthen the answer is the picture.",
    "start": "3512380",
    "end": "3522339"
  },
  {
    "text": "Otherwise I'm going to put--",
    "start": "3522340",
    "end": "3529724"
  },
  {
    "text": "oops, name change: P. Otherwise,\nI'm going to take P and put it",
    "start": "3529724",
    "end": "3539600"
  },
  {
    "text": "beside the results of\nrecursively right-pushing P",
    "start": "3539600",
    "end": "3549460"
  },
  {
    "text": "with N minus 1 and A and\nuse a scale factor of A. OK,",
    "start": "3549460",
    "end": "3565290"
  },
  {
    "text": "so if N0 , it's P. Otherwise\nI put P with a scale factor",
    "start": "3565290",
    "end": "3570580"
  },
  {
    "text": "of A-- I'm sorry I didn't\nalign this right-- recursively beside the\nresult of right-pushing P,",
    "start": "3570580",
    "end": "3576380"
  },
  {
    "text": "N minus 1 times with\na scale factor of A. There's a recursive\nmeans of combination.",
    "start": "3576380",
    "end": "3583860"
  },
  {
    "text": "What's that look like? Well, here's what it looks like. There's George right-pushed\nagainst himself twice",
    "start": "3583860",
    "end": "3594060"
  },
  {
    "text": "with a scale factor of 0.75.",
    "start": "3594060",
    "end": "3599520"
  },
  {
    "text": "OK. Where'd that come from? How did I get all\nthis fancy recursion? And the answer is just\nautomatic, absolutely",
    "start": "3599520",
    "end": "3604730"
  },
  {
    "text": "automatic. Since these are procedures,\nthe embedding says, well sure, I can define\nrecursive procedures.",
    "start": "3604730",
    "end": "3610440"
  },
  {
    "text": "I didn't have to arrange that. And of course, we can do\nmore complicated things",
    "start": "3610440",
    "end": "3615780"
  },
  {
    "text": "of the same sort. I could make something\nthat does an up-push. Right, that sort\nof goes like this,",
    "start": "3615780",
    "end": "3620880"
  },
  {
    "text": "by recursively putting\nsomething above. Or I could make something\nthat, sort of, was this scheme.",
    "start": "3620880",
    "end": "3626589"
  },
  {
    "text": "I might start out with a picture\nand then, sort of, recursively",
    "start": "3626590",
    "end": "3633930"
  },
  {
    "text": "both push it aside\nand above, and that might put something there.",
    "start": "3633930",
    "end": "3639420"
  },
  {
    "text": "And then up here I put\nthe same recursive thing, and I might end up with\nsomething like this.",
    "start": "3639420",
    "end": "3645220"
  },
  {
    "text": "Right, so there's\na procedure that's a little bit more complicated\nthan right-push but not much.",
    "start": "3645220",
    "end": "3653799"
  },
  {
    "text": "I just do an Above and a Beside,\nrather than just a Beside. ",
    "start": "3653800",
    "end": "3661380"
  },
  {
    "text": "Now if I take that\nand apply that with the idea of putting\nfour pictures together,",
    "start": "3661380",
    "end": "3667550"
  },
  {
    "text": "which I can surely do; and\nI go and I apply that to Q,",
    "start": "3667550",
    "end": "3672970"
  },
  {
    "text": "which we defined\nbefore, right, what I end up with this\nis this thing, which",
    "start": "3672970",
    "end": "3680410"
  },
  {
    "text": "is, sort of, the square\nlimit of Q, done twice. ",
    "start": "3680410",
    "end": "3687970"
  },
  {
    "text": "Right, and then we can compare\nthat with Escher's \"Square Limit.\"",
    "start": "3687970",
    "end": "3693010"
  },
  {
    "text": "And you see, it's\nsort of the same idea. Escher's is, of course,\nmuch, much prettier. If we go back and look at\nGeorge, right, if we go",
    "start": "3693010",
    "end": "3703120"
  },
  {
    "text": "look at George here-- see, I started with a\nfairly arbitrary design, this picture of George\nand did things with it.",
    "start": "3703120",
    "end": "3711170"
  },
  {
    "text": "Right, whereas if we go look\nat the Escher picture, right, the Escher picture is\nnot an arbitrary design.",
    "start": "3711170",
    "end": "3716200"
  },
  {
    "text": "It's this very,\nvery clever thing, so that when you\ntake this fish body",
    "start": "3716200",
    "end": "3721835"
  },
  {
    "text": "and Rotate it and\nshrink it down, it bleeds into the\nnext one really nicely. ",
    "start": "3721835",
    "end": "3727619"
  },
  {
    "text": "And of course with\nGeorge, I didn't really do anything like that. So if we look at George, right,\nthere's a little bit of match",
    "start": "3727620",
    "end": "3736628"
  },
  {
    "text": "up, but not very nice,\nand it's pretty arbitrary. One very nice\nproject, by the way,",
    "start": "3736628",
    "end": "3742329"
  },
  {
    "text": "would be to write\na procedure that could take some basic figure\nlike this George thing",
    "start": "3742330",
    "end": "3747800"
  },
  {
    "text": "and start moving the\nends of the lines around, so you got a really nice\none when you went and did",
    "start": "3747800",
    "end": "3752890"
  },
  {
    "text": "that \"Square Limit\" process. That'd be a really nice\nthing to think about.",
    "start": "3752890",
    "end": "3758359"
  },
  {
    "text": "Well so, we can combine things. We can recursive procedures. We can do all kinds of things,\nand that's all automatic.",
    "start": "3758360",
    "end": "3764300"
  },
  {
    "text": "Right, the important\npoint, the difference between merely implementing\nsomething in a language and embedding something\nin the language,",
    "start": "3764300",
    "end": "3770510"
  },
  {
    "text": "so that you don't lose the\noriginal power of the language, and what Lisp is\ngreat at, see Lisp is a lousy language for\ndoing any particular problem.",
    "start": "3770510",
    "end": "3777599"
  },
  {
    "text": "What it's good for is figuring\nout the right language that you want and\nembedding that in Lisp. That's the real power of\nthis approach to design.",
    "start": "3777600",
    "end": "3785672"
  },
  {
    "text": "Of course, we can go further. See, you saw the other\nthing that we can do in Lisp is capture general\nmethods of doing things",
    "start": "3785672",
    "end": "3796200"
  },
  {
    "text": "as higher order procedures. And you probably\njust from me drawing it got the idea that right-push\nand the analogous thing where",
    "start": "3796200",
    "end": "3804940"
  },
  {
    "text": "you push something up\nand up and up and up and this corner push thing\nare all generalizations",
    "start": "3804940",
    "end": "3812500"
  },
  {
    "text": "of a common kind of idea. So just to illustrate\nand give you practice in looking at a fairly\nconvoluted use of higher order",
    "start": "3812500",
    "end": "3820010"
  },
  {
    "text": "procedures, let me show\nyou the general idea of pushing some\nmeans of combination",
    "start": "3820010",
    "end": "3825910"
  },
  {
    "text": "to recursively repeat it. So here's a good\none to puzzle out.",
    "start": "3825910",
    "end": "3831240"
  },
  {
    "text": "We'll define it what\nit means to push",
    "start": "3831240",
    "end": "3838720"
  },
  {
    "text": "using a means of combination. Comb is going to be something\nlike the Beside or Above.",
    "start": "3838720",
    "end": "3845582"
  },
  {
    "text": "Well what's that going to be. That's going to be a procedure,\nremember what Beside actually",
    "start": "3845582",
    "end": "3851510"
  },
  {
    "text": "was, right. It took a picture, took two\npictures and a scale factor.",
    "start": "3851510",
    "end": "3858700"
  },
  {
    "text": "Using that I produced\nsomething that took a level number and a\npicture and a scale factor,",
    "start": "3858700",
    "end": "3864350"
  },
  {
    "text": "that I called right-push. So this is going to be something\nthat takes a picture, a level",
    "start": "3864350",
    "end": "3870090"
  },
  {
    "text": "number and a scale factor,\nand it's going to say-- ",
    "start": "3870090",
    "end": "3876320"
  },
  {
    "text": "I'm going to do some\nrepeated operation. I'm going to repeatedly\napply the procedure which",
    "start": "3876320",
    "end": "3885770"
  },
  {
    "text": "takes a picture and applies\nthe means of combination",
    "start": "3885770",
    "end": "3891340"
  },
  {
    "text": "to the picture and the\noriginal picture and the one I took in here and\nthe scale factor,",
    "start": "3891340",
    "end": "3902340"
  },
  {
    "text": "and I do the thing which\nrepeats this procedure N times,",
    "start": "3902340",
    "end": "3912020"
  },
  {
    "text": "and I apply that whole thing\nto my original picture. ",
    "start": "3912020",
    "end": "3919599"
  },
  {
    "text": "Repeated here, in case\nyou haven't seen it, is another higher\norder procedure that takes a\nprocedure and a number",
    "start": "3919600",
    "end": "3929660"
  },
  {
    "text": "and returns for you\nanother procedure that applies this\nprocedure N times.",
    "start": "3929660",
    "end": "3936150"
  },
  {
    "text": "And I think some\nof you have already written repeated as an exercise,\nbut if you haven't, it's a very good exercise in thinking\nabout higher order procedures.",
    "start": "3936150",
    "end": "3943786"
  },
  {
    "text": "But in any case, the\nresult of this repeated is what I apply to picture. ",
    "start": "3943787",
    "end": "3949510"
  },
  {
    "text": "And having done that,\nthat's going to capture-- that is the thing, the way I\ngot from the idea of Beside",
    "start": "3949510",
    "end": "3956619"
  },
  {
    "text": "to the idea of\nright-push So having done that, I could say\ndefine right-push to be",
    "start": "3956620",
    "end": "3969470"
  },
  {
    "text": "push of Beside. ",
    "start": "3969470",
    "end": "3977640"
  },
  {
    "text": "Or if I say, define up-push\nto be push of Beside, I'd get the analogous\nthing or define corner-push",
    "start": "3977640",
    "end": "3982650"
  },
  {
    "text": "to be push of some appropriate\nthing that did both the Beside and Above, or I\ncould push anything.",
    "start": "3982650",
    "end": "3988340"
  },
  {
    "text": "Anyway this is, if you're\nhaving trouble with lambdas, this is an excellent exercise\nin figuring out what this means.",
    "start": "3988340",
    "end": "3996099"
  },
  {
    "text": "OK, well there's a lot to\nlearn from this example.",
    "start": "3996100",
    "end": "4002130"
  },
  {
    "text": "The main point I've\nbeen dwelling on is the notion of\nnicely embedding",
    "start": "4002130",
    "end": "4008019"
  },
  {
    "text": "a language inside\nanother language. Right, so that all the power\nof this language like Lisp",
    "start": "4008020",
    "end": "4014600"
  },
  {
    "text": "of the surrounding language\nis still accessible to you and appears as a natural\nextension of the language",
    "start": "4014600",
    "end": "4019670"
  },
  {
    "text": "that you built. That's one\nthing that this example shows very well.",
    "start": "4019670",
    "end": "4026140"
  },
  {
    "text": "OK. Another thing is, if you go\nback and think about that, what's procedures\nand what's data.",
    "start": "4026140",
    "end": "4032180"
  },
  {
    "text": "You know, by the time\nwe get up to here, my God, what's going on. I mean, this is some\nprocedure, and it",
    "start": "4032180",
    "end": "4037630"
  },
  {
    "text": "takes a picture and an\nargument, and what's a picture. Well, a picture itself, as\nyou remember, was a procedure, and that took a rectangle.",
    "start": "4037630",
    "end": "4043693"
  },
  {
    "text": "And a rectangle is\nsome abstraction. And I hope now\nthat by now you're completely lost as to the\nquestion of what in the system",
    "start": "4043693",
    "end": "4052382"
  },
  {
    "text": "is procedure and what's data. You see, there isn't\nany difference. There really isn't.",
    "start": "4052382",
    "end": "4057965"
  },
  {
    "text": "And you might think of a\npicture sometimes as a procedure and sometimes as data,\nbut that's just, sort of,",
    "start": "4057965",
    "end": "4063230"
  },
  {
    "text": "you know, making you\nfeel comfortable. It's really both in some sense\nor neither in some sense.",
    "start": "4063230",
    "end": "4068640"
  },
  {
    "text": "OK, there's a more general\npoint about the structure",
    "start": "4068640",
    "end": "4074710"
  },
  {
    "text": "of the system as\ncreating a language,",
    "start": "4074710",
    "end": "4082530"
  },
  {
    "text": "viewing the engineering\ndesign process as one of creating\nlanguage or rather",
    "start": "4082530",
    "end": "4090190"
  },
  {
    "text": "one of creating a sort of\nsequence of layers of language. You see, there's\nthis methodology,",
    "start": "4090190",
    "end": "4097310"
  },
  {
    "text": "or maybe I should say mythology,\nthat's, sort of, charitably called software,\nquote, engineering.",
    "start": "4097310",
    "end": "4104778"
  },
  {
    "text": "All right, and what\ndoes it say, it's says well, you go and you\nfigure out your task, and you figure out exactly\nwhat you want to do.",
    "start": "4104779",
    "end": "4110520"
  },
  {
    "text": "And once you figure out\nexactly what you want to do, you find out that it breaks\nout into three sub-tasks, and you go and you\nstart working on--",
    "start": "4110520",
    "end": "4115830"
  },
  {
    "text": "and you work on this\nsub-task, and you figure out exactly what that is. And you find out\nthat that breaks down into three sub-tasks, and\nyou specify them completely,",
    "start": "4115830",
    "end": "4122868"
  },
  {
    "text": "and you go and you\nwork on those two, and you work on this sub-one,\nand you specify that exactly. And then finally\nwhen you're done,",
    "start": "4122868",
    "end": "4128285"
  },
  {
    "text": "you come back way\nup here, and you work on your second sub-task,\nand specify that out and work it out.",
    "start": "4128285",
    "end": "4133370"
  },
  {
    "text": "And then you end up with-- you end up at the end with\nthis beautiful edifice. Right, you end up\nwith a marvelous tree,",
    "start": "4133370",
    "end": "4142676"
  },
  {
    "text": "where you've broken\nyour task into sub-tasks and broken each of\nthese into sub-tasks and broken those into\nsub-tasks, right.",
    "start": "4142677",
    "end": "4150370"
  },
  {
    "text": "And each of these nodes\nis exactly and precisely defined to do the\nwonderful, beautiful task",
    "start": "4150370",
    "end": "4156950"
  },
  {
    "text": "to make it fit into the\nwhole edifice, right. That's this mythology. See only a computer\nscientist could possibly",
    "start": "4156950",
    "end": "4163049"
  },
  {
    "text": "believe that you build a\ncomplex system like that, right.",
    "start": "4163050",
    "end": "4168219"
  },
  {
    "text": "Contrast that with\nthis Henderson example. It didn't work like that.",
    "start": "4168220",
    "end": "4175318"
  },
  {
    "text": "What happened was that\nthere was a sequence of layers of language.",
    "start": "4175319",
    "end": "4181318"
  },
  {
    "text": "What happened? There was a layer of\na thing that allowed",
    "start": "4181319",
    "end": "4187192"
  },
  {
    "text": "us to build primitive pictures.  There's primitive pictures\nand that was a language.",
    "start": "4187193",
    "end": "4196405"
  },
  {
    "text": "I didn't say much about it. We talked about how\nto construct George, but that was a language where\nyou talked about vectors",
    "start": "4196405",
    "end": "4201550"
  },
  {
    "text": "and line segments\nand points and where they sat in the unit square. And then on top of that,\nright, on top of that--",
    "start": "4201550",
    "end": "4211933"
  },
  {
    "text": "so this is the language\nof primitive pictures. ",
    "start": "4211933",
    "end": "4217100"
  },
  {
    "text": "Right, talking about line\nsegments in particular pictures in the unit square. On top of that was\na whole language.",
    "start": "4217100",
    "end": "4224110"
  },
  {
    "text": "There was a language of\ngeometric combinators,",
    "start": "4224110",
    "end": "4232550"
  },
  {
    "text": "a language of geometric\npositions, which",
    "start": "4232550",
    "end": "4239070"
  },
  {
    "text": "talks about things\nlike Above and Beside",
    "start": "4239070",
    "end": "4244510"
  },
  {
    "text": "and right-push and Rotate. And those things, sort of,\nhappened with reference",
    "start": "4244510",
    "end": "4253200"
  },
  {
    "text": "to the things that are talked\nabout in this language. ",
    "start": "4253200",
    "end": "4258640"
  },
  {
    "text": "And then if we like,\nwe saw that above that there was sort of a language\nof schemes of combination.",
    "start": "4258640",
    "end": "4274809"
  },
  {
    "start": "4274810",
    "end": "4281410"
  },
  {
    "text": "For example, push, which\ntalked about repeatedly doing something over\nwith a scale factor.",
    "start": "4281410",
    "end": "4288540"
  },
  {
    "text": "And the things that were being\ndiscussed in that language were, sort of, the things\nthat happened down here.",
    "start": "4288540",
    "end": "4296280"
  },
  {
    "text": "So what you have\nis, at each level, the objects that are\nbeing talked about",
    "start": "4296280",
    "end": "4304740"
  },
  {
    "text": "are the things that were\nerected at the previous level. What's the difference between\nthis thing and this thing?",
    "start": "4304740",
    "end": "4313270"
  },
  {
    "text": "The answer is that over\nhere in the tree, each node,",
    "start": "4313270",
    "end": "4319660"
  },
  {
    "text": "and in fact, each\ndecomposition down here, is being designed to\ndo a specific task,",
    "start": "4319660",
    "end": "4327480"
  },
  {
    "text": "whereas in the\nother scheme, what you have is a full range of\nlinguistic power at each level.",
    "start": "4327480",
    "end": "4335940"
  },
  {
    "text": "See what's happening\nthere, at any level, it's not being set up\nto do a particular task.",
    "start": "4335940",
    "end": "4343310"
  },
  {
    "text": "It's being set up to talk\nabout a whole range of things. The consequence\nof that for design",
    "start": "4343310",
    "end": "4351160"
  },
  {
    "text": "is that something that's\ndesigned in that method is likely to be more\nrobust, where by robust, I",
    "start": "4351160",
    "end": "4357650"
  },
  {
    "text": "mean that if you go\nand make some change in your description, it's\nmore likely to be captured",
    "start": "4357650",
    "end": "4364310"
  },
  {
    "text": "by a corresponding change, in\nthe way that the language is",
    "start": "4364310",
    "end": "4371070"
  },
  {
    "text": "implemented at\nthe next level up, right, because you've\nmade these levels full.",
    "start": "4371070",
    "end": "4376659"
  },
  {
    "text": "So you're not talking about a\nparticular thing like Beside. You've given yourself\na whole vocabulary",
    "start": "4376660",
    "end": "4381920"
  },
  {
    "text": "to express things of\nthat sort, so if you go and change your\nspecifications a little bit, it's more likely that\nyour methodology will",
    "start": "4381920",
    "end": "4389580"
  },
  {
    "text": "able to adapt to\ncapture that change, whereas a design\nlike this is not going to be robust, because if\nI go and change something that's",
    "start": "4389580",
    "end": "4396875"
  },
  {
    "text": "in here, that might affect the\nentire way that I decomposed everything down,\nfurther down the tree.",
    "start": "4396875",
    "end": "4403239"
  },
  {
    "text": "Right, so very big difference\nin outlook in decomposition, levels of language rather than,\nsort of, a strict hierarchy.",
    "start": "4403240",
    "end": "4410580"
  },
  {
    "text": "Not only that, but when\nyou have levels of language you've given yourself a\ndifferent vocabularies",
    "start": "4410580",
    "end": "4416490"
  },
  {
    "text": "for talking about the\ndesign at different levels. So if we go back and\nlook at George one last time, if I wanted to\nchange this picture George,",
    "start": "4416490",
    "end": "4425639"
  },
  {
    "text": "see suddenly I have a\nwhole different ways of describing the change. Like for example,\nI may want to go",
    "start": "4425640",
    "end": "4431119"
  },
  {
    "text": "to the basic primitive\ndesign and move the endpoint of some vector.",
    "start": "4431120",
    "end": "4437640"
  },
  {
    "text": "That's a change that I would\ndiscuss at the lowest level. I would say the endpoint\nis somewhere else.",
    "start": "4437640",
    "end": "4443222"
  },
  {
    "text": "Or I might come up and\nsay, well the next thing I wanted to do, this\nlittle replicated element,",
    "start": "4443222",
    "end": "4449130"
  },
  {
    "text": "I might want to do\nby something else. I might want to put a scale\nfactor in that Beside. That's a change\nthat I would discuss",
    "start": "4449130",
    "end": "4456890"
  },
  {
    "text": "at the next level of design,\nthe level of combinators. Or I might want to\nsay, I might want to change the basic way\nthat I took this pattern",
    "start": "4456890",
    "end": "4466470"
  },
  {
    "text": "and made some recursive\ndecomposition, maybe not bleeding out toward the\ncorners or something else. That would be a\nchange that I would",
    "start": "4466470",
    "end": "4472780"
  },
  {
    "text": "discuss at the highest level. And because I've structured\nthe system to be this way, I have all these\nvocabularies for talking",
    "start": "4472780",
    "end": "4478500"
  },
  {
    "text": "about change in different\nways and a lot of flexibility to decide which\none's appropriate. ",
    "start": "4478500",
    "end": "4484810"
  },
  {
    "text": "OK, well that's sort of a big\npoint about the difference in software methodology\nthat comes out from Lisp,",
    "start": "4484810",
    "end": "4491280"
  },
  {
    "text": "and it all comes,\nagain, out of the notion that really, the\ndesign process is not",
    "start": "4491280",
    "end": "4496560"
  },
  {
    "text": "so much implementing programs\nas implementing languages. And that's really\nthe powerful of Lisp.",
    "start": "4496560",
    "end": "4502287"
  },
  {
    "text": "OK, thank you. Let's take a break. ",
    "start": "4502287",
    "end": "4534591"
  }
]