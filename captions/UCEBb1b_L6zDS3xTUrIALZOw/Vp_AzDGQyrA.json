[
  {
    "start": "0",
    "end": "177000"
  },
  {
    "text": "okay hello everybody we'll get started um",
    "start": "24800",
    "end": "31679"
  },
  {
    "text": "so um just recapping what we did",
    "start": "31679",
    "end": "37550"
  },
  {
    "text": "[Music] a in the last lecture on tuesday",
    "start": "37550",
    "end": "42640"
  },
  {
    "text": "we um had a it was kind of a two is the second part",
    "start": "42640",
    "end": "48800"
  },
  {
    "text": "of a two lecture sequence on the hierarchy theorem",
    "start": "48800",
    "end": "54079"
  },
  {
    "text": "higher hierarchy theorems for time and space and using the hierarchy theorems to show",
    "start": "54079",
    "end": "60160"
  },
  {
    "text": "that there are that there is a problem which is intractable that's provably outside of",
    "start": "60160",
    "end": "66720"
  },
  {
    "text": "polynomial time and that was this equivalence problem for regular expressions with",
    "start": "66720",
    "end": "72000"
  },
  {
    "text": "exponentiation and then we had a short discussion about oracles",
    "start": "72000",
    "end": "78159"
  },
  {
    "text": "and the possibility that similar methods might you might be used to show that",
    "start": "78159",
    "end": "83280"
  },
  {
    "text": "satisfiability is outside of p which would then of course solve the p versus mp problem and argued that um",
    "start": "83280",
    "end": "90799"
  },
  {
    "text": "it seems unlikely um this kind of a meta theorem not not a well uh",
    "start": "90799",
    "end": "96240"
  },
  {
    "text": "well-defined notion but seems unlikely that the methods that were used for proving",
    "start": "96240",
    "end": "103520"
  },
  {
    "text": "the um uh the intractability of um",
    "start": "103520",
    "end": "109200"
  },
  {
    "text": "equivalence of regular expressions with exponentiation could be used to solve p versus np at least um the the",
    "start": "109200",
    "end": "116399"
  },
  {
    "text": "diagonalization method kind of in a pure form whatever that means uh that's not going to be um enough",
    "start": "116399",
    "end": "124560"
  },
  {
    "text": "so today we're going to shift gears again begin a somewhat different topic which is really kind of",
    "start": "124560",
    "end": "131440"
  },
  {
    "text": "um going to be our uh again a few lectures on probabilistic",
    "start": "131440",
    "end": "138000"
  },
  {
    "text": "computation which is going to wrap round out the semester for us um and we're going to start by talking",
    "start": "138000",
    "end": "144640"
  },
  {
    "text": "about a different model of computation which allows for uh probabilis",
    "start": "144640",
    "end": "149760"
  },
  {
    "text": "probabilism in the measuring the amount of probabilism or measuring the probability allowing for",
    "start": "149760",
    "end": "155040"
  },
  {
    "text": "probabilism in the computation define an associated complexity class uh this class bpp",
    "start": "155040",
    "end": "161200"
  },
  {
    "text": "and then start to start the discussion of an example um about something called branching",
    "start": "161200",
    "end": "166800"
  },
  {
    "text": "programs okay um so uh with that in mind um",
    "start": "166800",
    "end": "174800"
  },
  {
    "text": "uh um a",
    "start": "174800",
    "end": "179920"
  },
  {
    "start": "177000",
    "end": "322000"
  },
  {
    "text": "uh so we're gonna start off by defining the notion of a probabilistic",
    "start": "179920",
    "end": "186400"
  },
  {
    "text": "turing machine or ptm um a probabilistic turing machine is a",
    "start": "186400",
    "end": "191840"
  },
  {
    "text": "lot like the way we have thought about non-deterministic touring machines in that it's a kind of a machine that",
    "start": "191840",
    "end": "199440"
  },
  {
    "text": "can have multiple choices multiple ways to go in its computation so there's not just",
    "start": "199440",
    "end": "204799"
  },
  {
    "text": "going to be a fixed uh deterministic path um of its computation but there's going",
    "start": "204799",
    "end": "209920"
  },
  {
    "text": "to be a tree of possibilities um and for our purposes we're going to limit the",
    "start": "209920",
    "end": "215360"
  },
  {
    "text": "branching in that tree to be either um a step of the computation where",
    "start": "215360",
    "end": "221200"
  },
  {
    "text": "there's no branching where it's a deterministic step uh as shown over here um so every step",
    "start": "221200",
    "end": "227120"
  },
  {
    "text": "of the way leads uniquely to the next step or there might be some steps which have a choice and we're only going to allow",
    "start": "227120",
    "end": "234799"
  },
  {
    "text": "for these purposes uh to keep life simple um having only uh a choice among two",
    "start": "234799",
    "end": "241439"
  },
  {
    "text": "possibilities um and we'll associate to that uh",
    "start": "241439",
    "end": "247840"
  },
  {
    "text": "um the notion of a probability that each choice will have a",
    "start": "247840",
    "end": "255680"
  },
  {
    "text": "50 50 chance of getting taken and this kind of corresponds with the way some of us or some of you think",
    "start": "255680",
    "end": "263199"
  },
  {
    "text": "about non-determinism which is not exactly right up and up until this point is that the machine is kind of taking a",
    "start": "263199",
    "end": "268560"
  },
  {
    "text": "random branch it really we don't think about it randomly until now now we're going to think about the machine as",
    "start": "268560",
    "end": "273840"
  },
  {
    "text": "actually taking sort of picking a random choice among all the different branches that it could",
    "start": "273840",
    "end": "279040"
  },
  {
    "text": "make um and picking the choice kind of uniformly by flipping a coin every time",
    "start": "279040",
    "end": "284320"
  },
  {
    "text": "it has an option of which way to go uh now you could define i'm getting a question here uh",
    "start": "284320",
    "end": "291440"
  },
  {
    "text": "the uh a machine that has several different ways to more than two ways to go and then you would need to have a",
    "start": "291440",
    "end": "297199"
  },
  {
    "text": "three-way coin a four-way coin and so on and you could define it all of that that way as well but it doesn't end up giving you",
    "start": "297199",
    "end": "304000"
  },
  {
    "text": "anything different or anything uh interesting or new for uh for the kinds of things we're going to be discussing",
    "start": "304000",
    "end": "309919"
  },
  {
    "text": "so and it's just going to be simpler to keep the discussion limited to the case where the machine can only have two",
    "start": "309919",
    "end": "315120"
  },
  {
    "text": "possibilities um if it's going to be having a choice at all or or just one possibility when there's no choice",
    "start": "315120",
    "end": "323039"
  },
  {
    "text": "okay so um so now we're going to have to talk about the probability of a",
    "start": "323039",
    "end": "328240"
  },
  {
    "text": "the machine taking a sum branch of its computation so you imagine here here is the same computation tree that we've",
    "start": "328240",
    "end": "335280"
  },
  {
    "text": "seen before in the case of ordinary non-deterministic machines where you have m on w there could be several",
    "start": "335280",
    "end": "341759"
  },
  {
    "text": "different ways to go and there might be some particular branch but now we want to talk about the probability that the",
    "start": "341759",
    "end": "347600"
  },
  {
    "text": "machine actually ends up picking that branch and it's going to be",
    "start": "347600",
    "end": "353600"
  },
  {
    "text": "um uh you know when we talk about uh the machine having a choice of ways to",
    "start": "353600",
    "end": "360319"
  },
  {
    "text": "go we're going to associate that with a coin flip so we're going to call that a coin flip step when the machine has a",
    "start": "360319",
    "end": "365840"
  },
  {
    "text": "possibility of ways to go and so on a particular branch the probability of that branch occurring",
    "start": "365840",
    "end": "372479"
  },
  {
    "text": "is going to be one over two to the number of coin flips",
    "start": "372479",
    "end": "378240"
  },
  {
    "text": "coin flip states on that branch and the reason for i mean this is kind",
    "start": "378240",
    "end": "383919"
  },
  {
    "text": "of the the the definition that makes sense um in",
    "start": "383919",
    "end": "389360"
  },
  {
    "text": "that if you imagine looking at the computation tree here and here is the branch that we're focusing on um of",
    "start": "389360",
    "end": "396000"
  },
  {
    "text": "interest every time there's a coin flip on that branch",
    "start": "396000",
    "end": "401039"
  },
  {
    "text": "there's a 50 50 chance of taking a different branch or staying on that branch",
    "start": "401039",
    "end": "406639"
  },
  {
    "text": "so the more coin flips there are on some particular branch the less likely that branch would be the one that the machine",
    "start": "406639",
    "end": "412880"
  },
  {
    "text": "actually actually ends up taking taking and so it's going to be one over two to the number of coin flips",
    "start": "412880",
    "end": "419360"
  },
  {
    "text": "and that's the way we're defining it now once we have that notion",
    "start": "419360",
    "end": "425039"
  },
  {
    "text": "we can also talk about the probability that the machine ends up accepting because each as before each of these",
    "start": "425039",
    "end": "431599"
  },
  {
    "text": "branches is going to end up at an accept state or reject state i'm thinking about this only in terms of",
    "start": "431599",
    "end": "437599"
  },
  {
    "text": "deciders and the probability of",
    "start": "437599",
    "end": "443280"
  },
  {
    "text": "the machine accepting here is just going to be the sum over all probabilities of",
    "start": "443280",
    "end": "448400"
  },
  {
    "text": "the branches that end up accepting so just add up all of those probabilities of a branch leading to an",
    "start": "448400",
    "end": "454960"
  },
  {
    "text": "accept and we'll call that the probability that the machine accepts its input",
    "start": "454960",
    "end": "461000"
  },
  {
    "text": "[Music] and the probability that the machine rejects is going to be one minus the",
    "start": "461000",
    "end": "467199"
  },
  {
    "text": "probability that it accepts because it's going to the machine um on every branch is either either going to",
    "start": "467199",
    "end": "473759"
  },
  {
    "text": "do one or the other okay um",
    "start": "473759",
    "end": "479199"
  },
  {
    "text": "now if you're thinking about a particular language that the machine is trying to decide",
    "start": "479199",
    "end": "484879"
  },
  {
    "text": "this probabilistic machine now is trying to decide um you know",
    "start": "484879",
    "end": "491440"
  },
  {
    "text": "on on each input some of the branches of the machine may not may give the correct answer they're",
    "start": "491599",
    "end": "497840"
  },
  {
    "text": "going to accept when the input is in the language other branches may give the wrong answer they may reject when the",
    "start": "497840",
    "end": "503120"
  },
  {
    "text": "input is in the language and vice versa so there's going to be a possibility of",
    "start": "503120",
    "end": "508160"
  },
  {
    "text": "error now in the machine in any particular branch it might actually give the wrong answer and what we're going to say is bound",
    "start": "508160",
    "end": "515039"
  },
  {
    "text": "that error over all possible inputs um and so and uh",
    "start": "515039",
    "end": "522080"
  },
  {
    "text": "we'll say that the machine for any epsilon greater than or equal to zero um we will say that the machine decides",
    "start": "522080",
    "end": "528399"
  },
  {
    "text": "the language with error probability epsilon if that's the worst that can possibly",
    "start": "528399",
    "end": "534800"
  },
  {
    "text": "happen you know if every um for every input the machine gives the wrong answer",
    "start": "534800",
    "end": "541200"
  },
  {
    "text": "with probability at most epsilon um equivalently if you like to spell it",
    "start": "541200",
    "end": "547200"
  },
  {
    "text": "out a little bit more you know",
    "start": "547200",
    "end": "551760"
  },
  {
    "text": "a little differently for strings that are in the language the",
    "start": "552560",
    "end": "557680"
  },
  {
    "text": "probability that the machine rejects that input is going to be at most epsilon and for strings in the language",
    "start": "557680",
    "end": "563360"
  },
  {
    "text": "the probability of for strings not in the language the probability that accepts is a most epsilon",
    "start": "563360",
    "end": "569680"
  },
  {
    "text": "so again this is the machine doing the the thing that it's not supposed to be doing for things",
    "start": "569680",
    "end": "576000"
  },
  {
    "text": "in the language it should be rejecting very rarely for things not in the language it should be accepting very",
    "start": "576000",
    "end": "581600"
  },
  {
    "text": "rarely and that's what this bound is doing for you okay um",
    "start": "581600",
    "end": "586860"
  },
  {
    "text": "[Music] so let's just see uh so we'll talk about so i'm getting some",
    "start": "586860",
    "end": "592800"
  },
  {
    "text": "questions here about um",
    "start": "592800",
    "end": "597120"
  },
  {
    "text": "um so let me just look at these one second here",
    "start": "598240",
    "end": "603680"
  },
  {
    "text": "the",
    "start": "603680",
    "end": "605839"
  },
  {
    "text": "yeah so probability zero so there's a possibility that the machine have might",
    "start": "611360",
    "end": "616720"
  },
  {
    "text": "have a probability zero say of accepting that means there are no branches that",
    "start": "616720",
    "end": "621839"
  },
  {
    "text": "end up accepting or probability zero of rejecting there were no rejecting branches um but i think we're going to talk in a",
    "start": "621839",
    "end": "628240"
  },
  {
    "text": "minute about the connection between this and and the standard notion of np um so just hold off on that for a second",
    "start": "628240",
    "end": "636320"
  },
  {
    "text": "uh also about what what about the you know the um the possibility that the machine",
    "start": "636320",
    "end": "642959"
  },
  {
    "text": "is you know being a decider or running in a certain amount of time um so we will look at",
    "start": "642959",
    "end": "650000"
  },
  {
    "text": "time-bounded machines in a second um on the next slide or two um talking",
    "start": "650000",
    "end": "656160"
  },
  {
    "text": "about machines that run in polynomial time so that means all branches have to halt within some polynomial number of",
    "start": "656160",
    "end": "662320"
  },
  {
    "text": "steps um so that's where we're going but for the time being we're only",
    "start": "662320",
    "end": "667600"
  },
  {
    "text": "looking at the siders where the machine has to hold on every branch but some branches might run for a long",
    "start": "667600",
    "end": "674240"
  },
  {
    "text": "time but for now we're not going to be thinking about machines that have branches that",
    "start": "674240",
    "end": "679600"
  },
  {
    "text": "run um forever where all of our machines are deciders so they they hold on every branch",
    "start": "679600",
    "end": "686399"
  },
  {
    "text": "see there's anything else here no so why don't i move on so let's define now the class bpp",
    "start": "686399",
    "end": "693440"
  },
  {
    "start": "688000",
    "end": "1168000"
  },
  {
    "text": "using this notion of a probabilistic turing machine which is now going to be running in polynomial time",
    "start": "693440",
    "end": "700000"
  },
  {
    "text": "so bpp is going to be another one of these complexity classes a collection of languages like p and np and p space and",
    "start": "700000",
    "end": "706079"
  },
  {
    "text": "so on and um but it's going to be now associated with the capabilities of these probabilistic machines the kinds",
    "start": "706079",
    "end": "712639"
  },
  {
    "text": "of languages that they can do so we'll say the class bpp",
    "start": "712639",
    "end": "719519"
  },
  {
    "text": "is the set of languages a such that there's some probabilistic polynomial time",
    "start": "719519",
    "end": "726160"
  },
  {
    "text": "during machines so all branches have to halt within you know to the k for some k",
    "start": "726160",
    "end": "731279"
  },
  {
    "text": "so some polynomial time polynomial time probabilistic turing machine decides a with error possibility",
    "start": "731279",
    "end": "738560"
  },
  {
    "text": "at most one-third so in other words",
    "start": "738560",
    "end": "743600"
  },
  {
    "text": "when it's accepting for some for strings in the language the machine has to reject with at most",
    "start": "743600",
    "end": "750320"
  },
  {
    "text": "one-third so saying it equivalently for strings in the language it has to accept with two-thirds probability and for",
    "start": "750320",
    "end": "757279"
  },
  {
    "text": "strings not in the language it has to reject what two-thirds probability at least in both cases",
    "start": "757279",
    "end": "764399"
  },
  {
    "text": "um okay somehow ended up with",
    "start": "764560",
    "end": "770800"
  },
  {
    "text": "didn't check my animation here but okay that's fine so there is a um uh",
    "start": "770800",
    "end": "776959"
  },
  {
    "text": "now if you look at the one-third here in the definition uh",
    "start": "776959",
    "end": "782399"
  },
  {
    "text": "you know it seems strange to define a complexity class in terms of some arbitrary constant like one-third why",
    "start": "782399",
    "end": "788720"
  },
  {
    "text": "didn't we use one-quarter you know or uh you know one-tenth in the definition of",
    "start": "788720",
    "end": "795519"
  },
  {
    "text": "bpp and say the machine has to get have an error with at most one tenth or one",
    "start": "795519",
    "end": "800800"
  },
  {
    "text": "hundredth uh well it doesn't matter and that's the point of this uh",
    "start": "800800",
    "end": "807040"
  },
  {
    "text": "next statement called the amplification lemma which says that",
    "start": "807040",
    "end": "812399"
  },
  {
    "text": "um you can always if you have a machine that's running in a certain",
    "start": "812399",
    "end": "818240"
  },
  {
    "text": "uh a polynomial time that's running within this with a certain error which it is",
    "start": "818240",
    "end": "823760"
  },
  {
    "text": "most one-half if you have an error one-half it's not interesting because the machine could just flip a coin for every uh",
    "start": "823760",
    "end": "830959"
  },
  {
    "text": "input and it could get uh the right answer with it with probability one-half so probability one-half is not",
    "start": "830959",
    "end": "837279"
  },
  {
    "text": "interesting you have to have probability strictly less than one-half for the machine to actually be doing something",
    "start": "837279",
    "end": "843600"
  },
  {
    "text": "that's meaningful about that language so um if you have a",
    "start": "843600",
    "end": "849839"
  },
  {
    "text": "probabilistic turing machine that has error let's say epsilon one which is at most",
    "start": "849839",
    "end": "855040"
  },
  {
    "text": "one half which is less than one half then you can convert that to any",
    "start": "855040",
    "end": "862720"
  },
  {
    "text": "error probability you want for some other polynomial time probabilistic turing",
    "start": "862720",
    "end": "869199"
  },
  {
    "text": "machine so you can make that error which maybe starts out as one-third and you can drive that error down to one out of",
    "start": "869199",
    "end": "875519"
  },
  {
    "text": "one over or google um and seriously you can really make the error extremely extremely small",
    "start": "875519",
    "end": "884959"
  },
  {
    "text": "using a very simple procedure and and that's simply this so if you're starting out with a machine",
    "start": "886399",
    "end": "892959"
  },
  {
    "text": "that has an error possibility of one-third say so that means two-thirds of the time it's going to get",
    "start": "892959",
    "end": "898160"
  },
  {
    "text": "the right answer and at most one-third of the time at least two-thirds of the time the right answer most one-third of",
    "start": "898160",
    "end": "903360"
  },
  {
    "text": "the time the the incorrect answer whether that's accepting or rejecting um and now you want to get that answer",
    "start": "903360",
    "end": "909199"
  },
  {
    "text": "down to be something much that error down to something much smaller um the the idea is you just you're going to",
    "start": "909199",
    "end": "916800"
  },
  {
    "text": "take that machine and you're going to run it multiple times",
    "start": "916800",
    "end": "923920"
  },
  {
    "text": "it's kind of with independent runs if that me if you want to think about it you sort of more formally speaking but it's sort of intuitive you're just going",
    "start": "923920",
    "end": "930160"
  },
  {
    "text": "to run the machine uh tossing your coins um uh instead of just running it once",
    "start": "930160",
    "end": "937040"
  },
  {
    "text": "you're going to run the machine 100 times or or a million times but you can do that so it's a constant factor",
    "start": "937040",
    "end": "942880"
  },
  {
    "text": "and even a thousand times is going to be enough to increase your confidence in the result tremendously because",
    "start": "942880",
    "end": "950240"
  },
  {
    "text": "if you run the machine a thousand times and 600 of those times the mach the",
    "start": "950240",
    "end": "956160"
  },
  {
    "text": "machine accepts and 400 of the time the machine rejects um",
    "start": "956160",
    "end": "961600"
  },
  {
    "text": "uh it's very powerful evidence that this machine is biased toward accepting that",
    "start": "961600",
    "end": "967680"
  },
  {
    "text": "it's accepting most of the time um so it's um was uh",
    "start": "967680",
    "end": "974320"
  },
  {
    "text": "if it had an error probability of most one-third um uh",
    "start": "974320",
    "end": "979920"
  },
  {
    "text": "the the probability that you're seeing it except",
    "start": "979920",
    "end": "985600"
  },
  {
    "text": "600 times when really two-thirds of the time it's rejecting overall is extremely unlikely",
    "start": "985600",
    "end": "991759"
  },
  {
    "text": "um and you can calculate that uh which we're not going to bother to do but it's a routine probability calculation uh to",
    "start": "991759",
    "end": "998639"
  },
  {
    "text": "show that the the probability that if you run it a whole bunch of times and you see the majority coming up",
    "start": "998639",
    "end": "1005600"
  },
  {
    "text": "um which is not the not the right answer that's extremely",
    "start": "1005600",
    "end": "1011199"
  },
  {
    "text": "the the probability of that is extremely small um so i'm not saying that very clearly but",
    "start": "1011199",
    "end": "1018560"
  },
  {
    "text": "um the the the the method here is you're going to",
    "start": "1018560",
    "end": "1024558"
  },
  {
    "text": "take your original machine which has error probability one-third",
    "start": "1024559",
    "end": "1030558"
  },
  {
    "text": "or whatever it whatever it is some you know you know maybe has error probability 49",
    "start": "1030559",
    "end": "1037360"
  },
  {
    "text": "and you run it uh for a large number of times and then you take the majority vote",
    "start": "1037360",
    "end": "1043438"
  },
  {
    "text": "and it you're kind of sampling the the outcomes of this machine and if you take",
    "start": "1043439",
    "end": "1049039"
  },
  {
    "text": "enough samples it's overwhelmingly likely since you're just doing them uniformly you're taking those samples",
    "start": "1049039",
    "end": "1056000"
  },
  {
    "text": "uniformly it's overwhelmingly likely that you're going to be seeing the predominant one come up more often um",
    "start": "1056000",
    "end": "1063840"
  },
  {
    "text": "and exactly what that right value is we're not going to bother to calculate but that's something that",
    "start": "1063840",
    "end": "1070000"
  },
  {
    "text": "you know if you i will i'll refer you to the textbook or you know that's the kind of thing that comes up in any elementary",
    "start": "1070000",
    "end": "1075360"
  },
  {
    "text": "probability book and it's sort of very intuitive so i don't want to spend the time and do that calculation which is not all that interesting",
    "start": "1075360",
    "end": "1081840"
  },
  {
    "text": "um uh okay so just one quick question here",
    "start": "1081840",
    "end": "1087919"
  },
  {
    "text": "that i'm getting what happens if you bound if the error is greater than a half i don't think",
    "start": "1087919",
    "end": "1093120"
  },
  {
    "text": "that because we're bounding the error so we're not saying the error actually is one you know like sixty percent on",
    "start": "1093120",
    "end": "1100000"
  },
  {
    "text": "everything because then if you knew the error was sixty percent guaranteed you can always just flip the",
    "start": "1100000",
    "end": "1105760"
  },
  {
    "text": "flip your answer around and get your um error to be 40 but you know i'm saying the error is",
    "start": "1105760",
    "end": "1111440"
  },
  {
    "text": "that most whatever epsilon is and so um if it's",
    "start": "1111440",
    "end": "1117039"
  },
  {
    "text": "you're saying the error is at most 60 percent it doesn't tell you anything um",
    "start": "1117039",
    "end": "1123200"
  },
  {
    "text": "okay um [Music]",
    "start": "1123200",
    "end": "1127230"
  },
  {
    "text": "uh another question is does the amplification lemma also justify that",
    "start": "1130160",
    "end": "1135520"
  },
  {
    "text": "the choice of model with binary branching choices is equivalent to any other",
    "start": "1135520",
    "end": "1140640"
  },
  {
    "text": "perhaps you could say that um because you can change those you know if you had through a three-way",
    "start": "1140640",
    "end": "1147280"
  },
  {
    "text": "branching um you can simulate that with two-way branching to any accuracy that",
    "start": "1147280",
    "end": "1152320"
  },
  {
    "text": "you want um you know not going to get it down to zero but you're going to get it very close",
    "start": "1152320",
    "end": "1158000"
  },
  {
    "text": "um so it's maybe it's the amplification level maybe it's yeah sort of all related um",
    "start": "1158000",
    "end": "1165919"
  },
  {
    "text": "okay let's move on um so",
    "start": "1165919",
    "end": "1171039"
  },
  {
    "start": "1168000",
    "end": "1583000"
  },
  {
    "text": "the way that it's helpful to think about this class let's let's contrast it with",
    "start": "1172080",
    "end": "1178720"
  },
  {
    "text": "the other model of non-deterministic computation that we have is non-determinism is np",
    "start": "1178720",
    "end": "1184320"
  },
  {
    "text": "uh so non-deterministic then the model of non-deterministic polynomial time computation was np um the other class",
    "start": "1184320",
    "end": "1192240"
  },
  {
    "text": "and um so the way it's i think one way to look at to think",
    "start": "1192240",
    "end": "1199039"
  },
  {
    "text": "about non-determinism in the case of np is for strings in the language for your np",
    "start": "1199039",
    "end": "1206000"
  },
  {
    "text": "turing machine there's at least one accepting branch so i'm indicating the accepting ones in",
    "start": "1206000",
    "end": "1212240"
  },
  {
    "text": "green and the non-accepting one the rejecting branches in red so you could have",
    "start": "1212240",
    "end": "1218960"
  },
  {
    "text": "almost all of the branches be rejecting branches um for strings in the language as long as",
    "start": "1218960",
    "end": "1225840"
  },
  {
    "text": "there is at least one accepting branch that's just the way non-determinism works the accepting branch overrules all",
    "start": "1225840",
    "end": "1231440"
  },
  {
    "text": "the all of the others it's only when you're not in the language that you that all of the branches turn out to have to",
    "start": "1231440",
    "end": "1236960"
  },
  {
    "text": "be rejecting that's when the rejecting sort of you know it's it has no accepting branch",
    "start": "1236960",
    "end": "1242240"
  },
  {
    "text": "to overroll it um but the situation for bpp is a little different it is is different um there",
    "start": "1242240",
    "end": "1248960"
  },
  {
    "text": "it's kind of majority majority rules so um",
    "start": "1248960",
    "end": "1254960"
  },
  {
    "text": "in the case for strings in the language you you need to have a large or you know the the overwhelming",
    "start": "1254960",
    "end": "1262480"
  },
  {
    "text": "majority of the branches have to be accepting and for strings not in the language the",
    "start": "1262480",
    "end": "1268640"
  },
  {
    "text": "overwhelming majority have to be rejecting what you're not going to allow in the case of",
    "start": "1268640",
    "end": "1274559"
  },
  {
    "text": "bpp is kind of you know an in-between uh",
    "start": "1274559",
    "end": "1279760"
  },
  {
    "text": "state where it's sort of 50-50 um or very very close to 50-50 um those",
    "start": "1279760",
    "end": "1286159"
  },
  {
    "text": "kinds of machines are not don't qualify as",
    "start": "1286159",
    "end": "1292158"
  },
  {
    "text": "uh deciding a language in bpp they always have to kind of lean one way or lean the other way for every input",
    "start": "1292960",
    "end": "1301120"
  },
  {
    "text": "otherwise you won't be able to do the amplification so need to have some bias um away from in half in",
    "start": "1301120",
    "end": "1307919"
  },
  {
    "text": "in accepting or rejecting um so let me so i was going to ask a check-in",
    "start": "1307919",
    "end": "1315440"
  },
  {
    "text": "i think at this point yes let's so just thinking about bpp i hope i was clear so if there's questions about that",
    "start": "1315440",
    "end": "1322559"
  },
  {
    "text": "i think i've somehow didn't i'm not sure i described it totally well",
    "start": "1322559",
    "end": "1328640"
  },
  {
    "text": "here um so i'm going to ask a few questions about ppp but if you have any questions for me first",
    "start": "1328640",
    "end": "1334880"
  },
  {
    "text": "go ahead um",
    "start": "1334880",
    "end": "1340559"
  },
  {
    "text": "okay why don't we just run the check-in",
    "start": "1340559",
    "end": "1344600"
  },
  {
    "text": "um let me launch this and then i can answer questions as you're asking",
    "start": "1349679",
    "end": "1356240"
  },
  {
    "text": "did i start that yeah okay so you have to um",
    "start": "1356240",
    "end": "1362559"
  },
  {
    "text": "check all of these that you think are true um",
    "start": "1362559",
    "end": "1368159"
  },
  {
    "text": "can you think of non-deterministic turing machines as try all branches at once and get the right answer",
    "start": "1368159",
    "end": "1376159"
  },
  {
    "text": "um and bp is guess only one or uh i guess only one branch i don't know um",
    "start": "1376960",
    "end": "1386000"
  },
  {
    "text": "you know i would say a little differently i would say i i would think of non-determinism as you can still just",
    "start": "1386000",
    "end": "1391760"
  },
  {
    "text": "try one branch but you always guess the right one um so there's some sort of a you know",
    "start": "1391760",
    "end": "1399120"
  },
  {
    "text": "magical power that allows you always to guess the right answer if there's a right guess uh if you're in the language",
    "start": "1399120",
    "end": "1404880"
  },
  {
    "text": "uh in the case of bpp you're going to be um picking a random branch no matter what",
    "start": "1404880",
    "end": "1411840"
  },
  {
    "text": "and you know that the random branch is likely to give the right answer but not guaranteed",
    "start": "1411840",
    "end": "1417679"
  },
  {
    "text": "and the implication the amplification limit tells you you can arrange things so that it's extremely likely",
    "start": "1417679",
    "end": "1424559"
  },
  {
    "text": "that the random branch is going to give you the right answer okay let's see how we doing on our uh",
    "start": "1424559",
    "end": "1431120"
  },
  {
    "text": "check-in here um got a lot of vote we've got a lot of support for all candidates",
    "start": "1431120",
    "end": "1438159"
  },
  {
    "text": "um and um",
    "start": "1438159",
    "end": "1444440"
  },
  {
    "text": "i'll give you give you another uh a little bit of time here because",
    "start": "1444799",
    "end": "1450400"
  },
  {
    "text": "there's a bunch of questions almost like four check-ins at once um but we have two more check real",
    "start": "1450400",
    "end": "1456000"
  },
  {
    "text": "check-ins coming later um okay so why don't we uh come and",
    "start": "1456000",
    "end": "1464320"
  },
  {
    "text": "let's uh give another 10 seconds and then i'm going to stop",
    "start": "1464320",
    "end": "1468880"
  },
  {
    "text": "closing down one two three close",
    "start": "1471039",
    "end": "1477360"
  },
  {
    "text": "okay so uh we've got a lot of support here uh and in fact that's good because all of them are true",
    "start": "1478320",
    "end": "1486320"
  },
  {
    "text": "um some of them are easier to see than others so first of all c is very easy to see um",
    "start": "1486320",
    "end": "1492960"
  },
  {
    "text": "because that that's a going to be a machine that has the correct answer all of it all of the time so that's error",
    "start": "1492960",
    "end": "1499360"
  },
  {
    "text": "probability zero um on both accepting and rejecting",
    "start": "1499360",
    "end": "1504880"
  },
  {
    "text": "um this is a little harder d is a little bit harder to see that's in p space but",
    "start": "1504880",
    "end": "1510480"
  },
  {
    "text": "you know you could calculate for every branch um what its probability is and you can",
    "start": "1510480",
    "end": "1517120"
  },
  {
    "text": "just go through all the branches and add up all those probabilities in a p-space machine so um you have to think about a little",
    "start": "1517120",
    "end": "1524240"
  },
  {
    "text": "bit but d is not too hard to see either closure under complement",
    "start": "1524240",
    "end": "1529840"
  },
  {
    "text": "if you just take your your bpp machine and you flip the answer on every branch",
    "start": "1529840",
    "end": "1536720"
  },
  {
    "text": "um that's typically doesn't work in non-determined ordinary non-determinism but it does work here",
    "start": "1536720",
    "end": "1542400"
  },
  {
    "text": "because it's going to change a bias toward accepting into a bias toward rejecting and vice versa so bpp is",
    "start": "1542400",
    "end": "1548720"
  },
  {
    "text": "closed under compliment uh and closure under union it kind of follows from the amplification level as",
    "start": "1548720",
    "end": "1554320"
  },
  {
    "text": "long as you can make the probability extremely small then you can just run the two different",
    "start": "1554320",
    "end": "1559520"
  },
  {
    "text": "machines and even though the they each might make a mistake cumulatively the total",
    "start": "1559520",
    "end": "1566080"
  },
  {
    "text": "the probability that each one of them that either of them will make a mistake is still small and so you can just run",
    "start": "1566080",
    "end": "1571520"
  },
  {
    "text": "to the two machines and take the or of the responses that they get and it's still very likely to give the right",
    "start": "1571520",
    "end": "1576640"
  },
  {
    "text": "answer for the union okay um [Music] let's continue",
    "start": "1576640",
    "end": "1583039"
  },
  {
    "start": "1583000",
    "end": "1703000"
  },
  {
    "text": "uh so what i'm going to do now for the rest of the lecture uh is and",
    "start": "1583039",
    "end": "1589200"
  },
  {
    "text": "it's actually going to spill over into the lecture after thanksgiving because this is going to introduce an important",
    "start": "1589200",
    "end": "1594400"
  },
  {
    "text": "method for us is to look at an example of a problem that's in bpp",
    "start": "1594400",
    "end": "1601120"
  },
  {
    "text": "um i love to teach things by using examples um and so this is a very good example because it has a lot of meat to",
    "start": "1601120",
    "end": "1608000"
  },
  {
    "text": "it and it's a very interesting example in general proving things in bpp which are",
    "start": "1608000",
    "end": "1615679"
  },
  {
    "text": "not trivially there because they're already in p they tend to be uh somewhat more involved than um",
    "start": "1615679",
    "end": "1622320"
  },
  {
    "text": "uh some of the other algorithms we've seen so there are no simple examples of problems in bpp",
    "start": "1622320",
    "end": "1629120"
  },
  {
    "text": "which are not already in p um so this is uh",
    "start": "1629120",
    "end": "1635679"
  },
  {
    "text": "one example that we're going to go through of a problem in bpp that's not known to bnp",
    "start": "1635679",
    "end": "1640960"
  },
  {
    "text": "of course things could collapse down um but uh uh as star as far as we know",
    "start": "1640960",
    "end": "1646799"
  },
  {
    "text": "this is um not this language is not in p so let's let's see what the language is has to do with these things called",
    "start": "1646799",
    "end": "1652720"
  },
  {
    "text": "branching programs the branching program is a structure that looks like this",
    "start": "1652720",
    "end": "1657760"
  },
  {
    "text": "so let's understand what the pieces are first of all it's a graph directed graph",
    "start": "1657760",
    "end": "1664559"
  },
  {
    "text": "and uh we're not we're not going to allow and there is are no cycles allowed in this graph it's a directed acyclic",
    "start": "1666320",
    "end": "1673919"
  },
  {
    "text": "graph um so you can no loops allowed and",
    "start": "1673919",
    "end": "1679919"
  },
  {
    "text": "the nodes are in two categories there are query nodes which are labeled",
    "start": "1679919",
    "end": "1685440"
  },
  {
    "text": "with a variable letter and output nodes which are labeled",
    "start": "1685440",
    "end": "1690559"
  },
  {
    "text": "either zero or one and lastly there is a one of the query",
    "start": "1690559",
    "end": "1696159"
  },
  {
    "text": "nodes is going to be or one of the nodes is going to be designated as a start",
    "start": "1696159",
    "end": "1702158"
  },
  {
    "text": "okay and so what you do is the way um",
    "start": "1702399",
    "end": "1709279"
  },
  {
    "start": "1703000",
    "end": "2213000"
  },
  {
    "text": "this is a model of computation um and the way we actually use a branching program",
    "start": "1709279",
    "end": "1715279"
  },
  {
    "text": "is we have some assignment to the variables",
    "start": "1715279",
    "end": "1721679"
  },
  {
    "text": "that's going to be the input so you take all of the the variables there are three variables in this case",
    "start": "1721679",
    "end": "1726880"
  },
  {
    "text": "um x1 x2 and x3 you assign you give them some truth assignment um so x let's",
    "start": "1726880",
    "end": "1732480"
  },
  {
    "text": "let's say zeros and one so x1 is zero x1 is one or whatever and",
    "start": "1732480",
    "end": "1739279"
  },
  {
    "text": "once you have the truth assignment you start at the start variable",
    "start": "1739279",
    "end": "1745520"
  },
  {
    "text": "and you and you look at its label",
    "start": "1745520",
    "end": "1750158"
  },
  {
    "text": "and you see what value the input has assigned to that variable so if x1 assigned",
    "start": "1750799",
    "end": "1757679"
  },
  {
    "text": "a one you're going to follow down the one branch but assigned to zero you follow you go down the zero branch and",
    "start": "1757679",
    "end": "1763039"
  },
  {
    "text": "then when you get down to the next node that's another",
    "start": "1763039",
    "end": "1768640"
  },
  {
    "text": "variable that you're going to have to query depending upon what the input assignment is",
    "start": "1768640",
    "end": "1773840"
  },
  {
    "text": "and you're just going to continue that process because there are no cycles",
    "start": "1773840",
    "end": "1779440"
  },
  {
    "text": "you're going to end up at one of the output nodes because all of the variable nodes all the all the query nodes",
    "start": "1779440",
    "end": "1785600"
  },
  {
    "text": "have two outgoing edges one labeled zero one labeled one",
    "start": "1785600",
    "end": "1790720"
  },
  {
    "text": "so you're gonna eventually end up at an output node and that's going to be the output of the branching program",
    "start": "1790720",
    "end": "1796240"
  },
  {
    "text": "so we'll do let's do a quick example so if x1 is 1 x2 is 0 and x3 is 1.",
    "start": "1796240",
    "end": "1804320"
  },
  {
    "text": "so we again we start at the start variable the start node that has the indicated with the",
    "start": "1804320",
    "end": "1810720"
  },
  {
    "text": "arrow coming in from nowhere so you're going to start at x1 uh",
    "start": "1810720",
    "end": "1816399"
  },
  {
    "text": "the node labeled x1 so you have to look and see what is x1 in the input it's a 1. so you're going to follow down the",
    "start": "1818159",
    "end": "1823279"
  },
  {
    "text": "one branch now you see the next node oh that's an x3 see what's x3 in the input x3 is a 1.",
    "start": "1823279",
    "end": "1830960"
  },
  {
    "text": "so you go down to one branch again now you have an x2 node take a look at the input x2 is a zero you follow the",
    "start": "1830960",
    "end": "1838000"
  },
  {
    "text": "zero branch now you're at an output branch output node so that's a zero and",
    "start": "1838000",
    "end": "1843039"
  },
  {
    "text": "that's the output of the of the of this computation so um writing it this way and thinking",
    "start": "1843039",
    "end": "1849279"
  },
  {
    "text": "about it as a boolean function which maps you know strings of zeros and ones we have f of one zero one representing",
    "start": "1849279",
    "end": "1856480"
  },
  {
    "text": "those that assign that assignment that equals zero that was the output and",
    "start": "1856480",
    "end": "1861519"
  },
  {
    "text": "uh that's the output of this computation okay um",
    "start": "1861519",
    "end": "1866640"
  },
  {
    "text": "so important to underst we're going to spend a lot of time you know talking about branching programs so it's critical to understand",
    "start": "1866640",
    "end": "1873600"
  },
  {
    "text": "this model i think it's fairly simple but if you didn't get it please ask",
    "start": "1873600",
    "end": "1879840"
  },
  {
    "text": "we can easily correct up any misunderstanding at this point",
    "start": "1880159",
    "end": "1884639"
  },
  {
    "text": "it's not exactly the same as a dfa dfas for one thing can take inputs of any length",
    "start": "1888640",
    "end": "1895039"
  },
  {
    "text": "um this this has inputs of some particular length",
    "start": "1895039",
    "end": "1900480"
  },
  {
    "text": "where the branching program has some fixed number of variables this one has three so this only takes",
    "start": "1900480",
    "end": "1906720"
  },
  {
    "text": "inputs of length three um so there's maybe some connection to thinking these",
    "start": "1906720",
    "end": "1912080"
  },
  {
    "text": "estates and so on but it's a different model so now we'll say that two branching",
    "start": "1912080",
    "end": "1918559"
  },
  {
    "text": "programs um okay let me just ask one more question not all nodes need to be used right",
    "start": "1918559",
    "end": "1926640"
  },
  {
    "text": "um yeah there's no requirement that all nodes",
    "start": "1926640",
    "end": "1932320"
  },
  {
    "text": "need to be used and that even could be inaccessible nodes i'm not preventing that uh that could be okay um so on the",
    "start": "1932320",
    "end": "1939679"
  },
  {
    "text": "particular branch certainly you're not gonna you know when you're executing this branching program on an input obvious",
    "start": "1939679",
    "end": "1946320"
  },
  {
    "text": "certainly you're to have a path that's going to only use some part of the",
    "start": "1946320",
    "end": "1951600"
  },
  {
    "text": "tree part of the graph but there might be some",
    "start": "1951600",
    "end": "1957760"
  },
  {
    "text": "paths that can can never occur you know so if you went down x equal to",
    "start": "1957760",
    "end": "1962799"
  },
  {
    "text": "one here and then x three was zero now you're re-reading x one so you'd",
    "start": "1962799",
    "end": "1969200"
  },
  {
    "text": "never you could you wouldn't go down this branch unless you i think all of the branches in this",
    "start": "1969200",
    "end": "1974880"
  },
  {
    "text": "particular branching program could get used but i didn't check that so maybe i'm wrong um",
    "start": "1974880",
    "end": "1980559"
  },
  {
    "text": "okay so let's continue two branching programs may may or may not compute the",
    "start": "1980559",
    "end": "1985679"
  },
  {
    "text": "same function um we'll say they're equivalent if they do",
    "start": "1985679",
    "end": "1991840"
  },
  {
    "text": "now two branching programs can be equivalent even though they superficially look",
    "start": "1993440",
    "end": "1999919"
  },
  {
    "text": "different from one another and we're interested in the computational problem of given two of",
    "start": "1999919",
    "end": "2006000"
  },
  {
    "text": "these branching programs do they compute the same function do they in other words do they always give the same answer",
    "start": "2006000",
    "end": "2012320"
  },
  {
    "text": "um on the setting of the input uh so we'll define the associated language",
    "start": "2012320",
    "end": "2018720"
  },
  {
    "text": "equivalence problem for branching programs says that you're given two of these branching programs and they're",
    "start": "2018720",
    "end": "2024320"
  },
  {
    "text": "equivalent to be in the language we're going to sometimes write equivalence using the mathematical notation of the",
    "start": "2024320",
    "end": "2030399"
  },
  {
    "text": "three lined equals equal sign the equivalence sign",
    "start": "2030399",
    "end": "2036159"
  },
  {
    "text": "okay that means they compute the same they always give the same answer now that problem",
    "start": "2036159",
    "end": "2041679"
  },
  {
    "text": "turns out to be cohen p complete i've asked you to show on your",
    "start": "2041679",
    "end": "2046880"
  },
  {
    "text": "homework i believe um this is not a super hard reduction um",
    "start": "2046880",
    "end": "2052638"
  },
  {
    "text": "it's the in comp complete by the way is the complement of an mp complete problem or equivalently it's a problem to which",
    "start": "2052639",
    "end": "2059440"
  },
  {
    "text": "all co np problems are polynomial time reducible and it's in coin",
    "start": "2059440",
    "end": "2064840"
  },
  {
    "text": "[Music] so uh",
    "start": "2064840",
    "end": "2069760"
  },
  {
    "text": "this is coin p complete and",
    "start": "2070879",
    "end": "2076079"
  },
  {
    "text": "that's for you to show um but that has an important significance for us right now",
    "start": "2076399",
    "end": "2082560"
  },
  {
    "text": "um because if you if you know looking at the question of whether this problem is in bpp",
    "start": "2082560",
    "end": "2090480"
  },
  {
    "text": "the fact that it's coin co np complete suggests that the answer is no",
    "start": "2090480",
    "end": "2096158"
  },
  {
    "text": "because if a co np complete or np complete problem",
    "start": "2096159",
    "end": "2102560"
  },
  {
    "text": "more in bpp because everything else in np or cmp is reducible to that problem then all of",
    "start": "2102560",
    "end": "2108560"
  },
  {
    "text": "those np or co-np problems would be in bpp for the exactly the same reason that we've seen before",
    "start": "2108560",
    "end": "2115119"
  },
  {
    "text": "um and that's not known to be the case and not believed to be the case um so",
    "start": "2115119",
    "end": "2122000"
  },
  {
    "text": "uh we don't expect that a co-mp complete problem is going to be in bpp um that",
    "start": "2122000",
    "end": "2127680"
  },
  {
    "text": "would be you know an amazing uh and surprising uh uh result so um",
    "start": "2127680",
    "end": "2135200"
  },
  {
    "text": "because i i hope i made it clear in my previous um you know in previous discussion that",
    "start": "2135200",
    "end": "2141520"
  },
  {
    "text": "you know the bpp from a practical standpoint is very close to being like p",
    "start": "2141520",
    "end": "2146800"
  },
  {
    "text": "um because you can make the error probability of the machine so incredibly low um",
    "start": "2146800",
    "end": "2152320"
  },
  {
    "text": "that you know it's a comparable uh",
    "start": "2152320",
    "end": "2157359"
  },
  {
    "text": "you know if you run the machine and the error probability is like one over google um",
    "start": "2157359",
    "end": "2162880"
  },
  {
    "text": "then it's sort of even greater than the probability that some alpha particle came in and flipped",
    "start": "2162880",
    "end": "2168560"
  },
  {
    "text": "the value of what some internal uh memory cell in your in your computation",
    "start": "2168560",
    "end": "2174880"
  },
  {
    "text": "so if you have an extremely low error probability it's pretty good from a practical standpoint um",
    "start": "2174880",
    "end": "2181040"
  },
  {
    "text": "so it would be amazing if np problems were solvable in bpp um",
    "start": "2181359",
    "end": "2186640"
  },
  {
    "text": "so this is not the language we're going to use as our example we're going to look at a related restricted version of this",
    "start": "2186640",
    "end": "2192720"
  },
  {
    "text": "problem about equivalence for branching programs and that i'm going to introduce right now",
    "start": "2192720",
    "end": "2198000"
  },
  {
    "text": "okay any questions here don't see any questions um",
    "start": "2198000",
    "end": "2204640"
  },
  {
    "text": "fading out uh okay um",
    "start": "2204960",
    "end": "2210800"
  },
  {
    "text": "so let's move on so we're going to talk about branching",
    "start": "2210800",
    "end": "2216320"
  },
  {
    "start": "2213000",
    "end": "2522000"
  },
  {
    "text": "programs that are what are called read once read once branching programs",
    "start": "2216320",
    "end": "2222160"
  },
  {
    "text": "and those are simply branching programs that are not allowed to re-read",
    "start": "2222160",
    "end": "2228560"
  },
  {
    "text": "an input that they've previously read so for example",
    "start": "2228560",
    "end": "2234480"
  },
  {
    "text": "is this branching program a read once branching program no",
    "start": "2234480",
    "end": "2240400"
  },
  {
    "text": "this branching program is not a read once branching program because um",
    "start": "2240400",
    "end": "2245440"
  },
  {
    "text": "you can find a path that's going to cause you to",
    "start": "2245440",
    "end": "2251200"
  },
  {
    "text": "read the same variable more than once so it's not going to be a read once um so over here let's not read once",
    "start": "2251200",
    "end": "2257680"
  },
  {
    "text": "because there's two occurrences of an x1 on the same branch",
    "start": "2257680",
    "end": "2263200"
  },
  {
    "text": "now you might ask why would anybody want to do that because you've already read the value of x1 well i mean in the case",
    "start": "2263200",
    "end": "2268960"
  },
  {
    "text": "of this particular branching program there might be a value because you could have got to this x x1 branch by going",
    "start": "2268960",
    "end": "2276000"
  },
  {
    "text": "this way or that way um but that's a separate question",
    "start": "2276000",
    "end": "2282320"
  },
  {
    "text": "if we restrict our attention to read once branching programs then the problem of testing equivalence becomes",
    "start": "2282320",
    "end": "2289680"
  },
  {
    "text": "uh very different in character and in fact we're going to give a",
    "start": "2289680",
    "end": "2296560"
  },
  {
    "text": "probabilistic algorithm uh a bpp algorithm to solve that problem",
    "start": "2296560",
    "end": "2302160"
  },
  {
    "text": "so the equivalence problem for read once branching programs which are not allowed to re-read variables on any path",
    "start": "2302160",
    "end": "2309359"
  },
  {
    "text": "um that's interestingly going to be solvable with a probabilistic",
    "start": "2309359",
    "end": "2314640"
  },
  {
    "text": "uh polynomial time algorithm you know with a small error probability um",
    "start": "2314640",
    "end": "2321040"
  },
  {
    "text": "so i'm going to run a check in now but let's make sure we're all together on this so i got a good question here can",
    "start": "2321040",
    "end": "2326320"
  },
  {
    "text": "every boolean function be described by a branching program yes that's an easy exercise but you can make",
    "start": "2326320",
    "end": "2334320"
  },
  {
    "text": "branch branching programs are um they may be large",
    "start": "2334320",
    "end": "2339520"
  },
  {
    "text": "uh you can describe any boolean function with some branching program that's not hard to show",
    "start": "2339520",
    "end": "2346240"
  },
  {
    "text": "um other questions are we all together on understanding what read once means and branching programs and all that stuff",
    "start": "2346240",
    "end": "2352480"
  },
  {
    "text": "this is a good time to ask if you're not um okay so let's do the check-in",
    "start": "2352480",
    "end": "2360480"
  },
  {
    "text": "so as i pointed out we will show that the equivalence for read once branching",
    "start": "2361200",
    "end": "2366960"
  },
  {
    "text": "programs is solvable in bpp can we use that to solve the general",
    "start": "2366960",
    "end": "2372160"
  },
  {
    "text": "case for branching programs by converting branch general branching programs to read once branching programs",
    "start": "2372160",
    "end": "2378560"
  },
  {
    "text": "and then run running the read once test so",
    "start": "2378560",
    "end": "2383839"
  },
  {
    "text": "what do you think okay i'm seeing a lot of uh",
    "start": "2383839",
    "end": "2388960"
  },
  {
    "text": "correct answers here um so let's let's wrap this one one up quickly um",
    "start": "2388960",
    "end": "2396760"
  },
  {
    "text": "another 10 seconds please",
    "start": "2398000",
    "end": "2401200"
  },
  {
    "text": "okay ready are we all ready one two three closing",
    "start": "2406640",
    "end": "2413119"
  },
  {
    "text": "all right yes most of you have uh",
    "start": "2417200",
    "end": "2422400"
  },
  {
    "text": "answered correctly um well answer a is not a very good answer because we already commented on the",
    "start": "2422400",
    "end": "2428079"
  },
  {
    "text": "previous slide that we don't know how to do the general case in bpp so it would be",
    "start": "2428079",
    "end": "2433920"
  },
  {
    "text": "kind of surprising if right here i'm saying yes we could do it",
    "start": "2433920",
    "end": "2439359"
  },
  {
    "text": "by using the restricted case so",
    "start": "2439359",
    "end": "2444240"
  },
  {
    "text": "you know i think a better answer would be to one of the no's but",
    "start": "2445839",
    "end": "2451200"
  },
  {
    "text": "as i did comment you can always convert you can always do any uh boolean function uh with a",
    "start": "2451200",
    "end": "2459119"
  },
  {
    "text": "well maybe i didn't say it for read once branching programs but you even read once branching programs can do any compute any boolean function um so the",
    "start": "2459520",
    "end": "2466960"
  },
  {
    "text": "the conversion is possible but in general will not be polynomial time and you can if you imagine you've been",
    "start": "2466960",
    "end": "2472640"
  },
  {
    "text": "trying to do the conversion over here you could convert this branching program to read once um but you'd have to",
    "start": "2472640",
    "end": "2478640"
  },
  {
    "text": "basically separate the two uh um you know instead of re-reading the x1",
    "start": "2478640",
    "end": "2485200"
  },
  {
    "text": "you could remember that x1 value but then you would not be you couldn't reconverge over here you'd have to keep",
    "start": "2485200",
    "end": "2491200"
  },
  {
    "text": "those two those two threads of the those two branches of the computation apart",
    "start": "2491200",
    "end": "2496640"
  },
  {
    "text": "those two paths apart from one another and already the branching program would start to increase in size by doing that",
    "start": "2496640",
    "end": "2502720"
  },
  {
    "text": "um and um so in general conversion converting is possible but it",
    "start": "2502720",
    "end": "2509680"
  },
  {
    "text": "requires a big expansion a big increase in the size and then we will",
    "start": "2509680",
    "end": "2515040"
  },
  {
    "text": "not allow a polynomial time algorithm anymore even in probabilistic in the probabilistic case",
    "start": "2515040",
    "end": "2521040"
  },
  {
    "text": "um okay um so now let's start to look at the",
    "start": "2521040",
    "end": "2526400"
  },
  {
    "start": "2522000",
    "end": "2887000"
  },
  {
    "text": "possibility of showing that this equivalence problem is solvable in bpp",
    "start": "2526400",
    "end": "2532240"
  },
  {
    "text": "and it's going to take us in kind of a strange direction but let's let's try to get our intuition going first by",
    "start": "2532240",
    "end": "2538640"
  },
  {
    "text": "doing something which seems like the most obvious obvious approach um",
    "start": "2538640",
    "end": "2543920"
  },
  {
    "text": "so here uh so we're gonna give a an algorithm now um",
    "start": "2543920",
    "end": "2551599"
  },
  {
    "text": "uh which is going to be an attempt it's not going to work but nevertheless it's going to have the germ of the right",
    "start": "2551599",
    "end": "2558160"
  },
  {
    "text": "idea or the or the not the germ but the beginning of the right way to think about it",
    "start": "2558160",
    "end": "2563680"
  },
  {
    "text": "so here are the two branching read once branching programs are b1 and b2",
    "start": "2563680",
    "end": "2568960"
  },
  {
    "text": "and i want to see do they compute the same function or not",
    "start": "2568960",
    "end": "2574000"
  },
  {
    "text": "um so one thing you might try is just running them on a bunch of randomly selected",
    "start": "2574000",
    "end": "2581280"
  },
  {
    "text": "assignments or inputs all right so you're going to you can just um",
    "start": "2581280",
    "end": "2586800"
  },
  {
    "text": "take two randomness input assignments just take x1 flip a coin to say it's one of zero x do",
    "start": "2586800",
    "end": "2594240"
  },
  {
    "text": "the same for x two and so on um then you get some input assignment",
    "start": "2594240",
    "end": "2599680"
  },
  {
    "text": "you run the two branching programs on that assignment and maybe that doesn't give you know even if they agree it doesn't give you a",
    "start": "2599680",
    "end": "2605599"
  },
  {
    "text": "lot of confidence that you got the right answer uh that they're really equivalent so you do it a hundred times whatever some some",
    "start": "2605599",
    "end": "2612720"
  },
  {
    "text": "number of times um and of course",
    "start": "2612720",
    "end": "2618079"
  },
  {
    "text": "if they uh ever disagree on some assignment on one of those assignments then you know they're not",
    "start": "2618079",
    "end": "2624480"
  },
  {
    "text": "equivalent and you can immediately reject um but",
    "start": "2624480",
    "end": "2629760"
  },
  {
    "text": "uh what i'd like to say is if they agree on those",
    "start": "2629760",
    "end": "2636400"
  },
  {
    "text": "you know hundred tries those hundred assignments there then",
    "start": "2636400",
    "end": "2641520"
  },
  {
    "text": "there then they are um uh",
    "start": "2641520",
    "end": "2646960"
  },
  {
    "text": "at least i'll i haven't found a place where they disagree so i'm gonna say",
    "start": "2646960",
    "end": "2652720"
  },
  {
    "text": "that they're equivalent is that a reasonable thing uh to do",
    "start": "2652720",
    "end": "2658319"
  },
  {
    "text": "well it might be uh it depends on k um so the critical thing is what value of k",
    "start": "2658319",
    "end": "2666000"
  },
  {
    "text": "should you pick which is going to be big enough to allow us to draw the conclusion that if you",
    "start": "2666000",
    "end": "2671599"
  },
  {
    "text": "run it for k times and you never see a difference then you can",
    "start": "2671599",
    "end": "2676720"
  },
  {
    "text": "conclude with good confidence that the two branching programs are equivalent",
    "start": "2676720",
    "end": "2681760"
  },
  {
    "text": "because you've tried to look for a difference and you never found one well the thing is is that",
    "start": "2681760",
    "end": "2689359"
  },
  {
    "text": "um k is going to have to be pretty big uh",
    "start": "2689359",
    "end": "2695520"
  },
  {
    "text": "so looking at it this way if the two branching programs were equivalent",
    "start": "2695520",
    "end": "2701920"
  },
  {
    "text": "then certainly they're always going to give the same value um",
    "start": "2702000",
    "end": "2707520"
  },
  {
    "text": "so the probability that the machine accepts is going to be one and that's good because we want for",
    "start": "2707520",
    "end": "2713920"
  },
  {
    "text": "this is a case when we're in the language we want the probability of acceptance to be high and here the probability of acceptance is actually",
    "start": "2713920",
    "end": "2720240"
  },
  {
    "text": "one so it's always going to accept when the two uh branching programs were equivalent",
    "start": "2720240",
    "end": "2726880"
  },
  {
    "text": "but what happens when the branching programs are not equivalent now we want the probability of rejection to be high the probability of acceptance",
    "start": "2726880",
    "end": "2733280"
  },
  {
    "text": "should be very low um right so if if they're not equivalent we",
    "start": "2733280",
    "end": "2739599"
  },
  {
    "text": "want the probability that the machine rejects is going to be high if they're not equivalent because",
    "start": "2739599",
    "end": "2746079"
  },
  {
    "text": "that that's what the correct answer is well the only way the machine is going to reject",
    "start": "2746079",
    "end": "2752079"
  },
  {
    "text": "if it finds um a place where the two branching programs disagree",
    "start": "2752079",
    "end": "2759440"
  },
  {
    "text": "but but those two branching programs even though not equivalent",
    "start": "2759440",
    "end": "2765599"
  },
  {
    "text": "might disagree rarely they might only disagree on one input assignment out of the two to the end",
    "start": "2765599",
    "end": "2772079"
  },
  {
    "text": "possibilities so these two inequivalent branching programs might agree almost everywhere",
    "start": "2772079",
    "end": "2778960"
  },
  {
    "text": "just except at one place and then that's enough for them not to be equivalent but the problem is that if you're just going",
    "start": "2778960",
    "end": "2784640"
  },
  {
    "text": "to do random sampling um the likelihood of finding that one",
    "start": "2784640",
    "end": "2790720"
  },
  {
    "text": "exceptional place where the two disagree is very low you're going to have to do an enormous number of samples before",
    "start": "2790720",
    "end": "2796240"
  },
  {
    "text": "you're likely to actually to to to find that uh that point of difference um and",
    "start": "2796240",
    "end": "2803200"
  },
  {
    "text": "so um in order to be confident that you're",
    "start": "2803200",
    "end": "2809200"
  },
  {
    "text": "going to find that difference if there is one you're going to have to do exponentially many samples and you don't",
    "start": "2809200",
    "end": "2814480"
  },
  {
    "text": "have time to do that with a polynomial time algorithm",
    "start": "2814480",
    "end": "2819119"
  },
  {
    "text": "um you're just going to have to flip too many coins you have to run too many",
    "start": "2819599",
    "end": "2825119"
  },
  {
    "text": "different samples different assignments through these two",
    "start": "2825119",
    "end": "2831040"
  },
  {
    "text": "machines and um because they're almost they're different but they're almost the",
    "start": "2831040",
    "end": "2836240"
  },
  {
    "text": "same um so we're going to need to find a different method and",
    "start": "2836240",
    "end": "2842839"
  },
  {
    "text": "um the the idea is we're going to run these two branching programs",
    "start": "2842839",
    "end": "2850319"
  },
  {
    "text": "in some crazy way instead of running them on zeros and ones that we've been we've been doing it so far we're going to feed in",
    "start": "2850319",
    "end": "2857359"
  },
  {
    "text": "values for the variables which are non-boolean they are going to be going to set x1 to",
    "start": "2857359",
    "end": "2863760"
  },
  {
    "text": "2 x3 to 7 x 4 to 15.",
    "start": "2863760",
    "end": "2870800"
  },
  {
    "text": "of course that doesn't seem to make any sense but it's nevertheless going to turn out to be useful a useful thing to",
    "start": "2870800",
    "end": "2876559"
  },
  {
    "text": "do and it's going to give us some insight into the equivalence or equivalence of these branching programs um",
    "start": "2876559",
    "end": "2884000"
  },
  {
    "text": "okay um so let's just i think are we at the end yeah we're at the break here so why",
    "start": "2884079",
    "end": "2889599"
  },
  {
    "start": "2887000",
    "end": "3180000"
  },
  {
    "text": "don't i i'm getting some questions coming in which is great um i will answer those questions but why don't i",
    "start": "2889599",
    "end": "2895119"
  },
  {
    "text": "start off our uh break and then um",
    "start": "2895119",
    "end": "2901318"
  },
  {
    "text": "okay",
    "start": "2903359",
    "end": "2905680"
  },
  {
    "text": "okay so there's a question about whether these this machine runs deterministically or",
    "start": "2909680",
    "end": "2916319"
  },
  {
    "text": "not so which machine are we talking about so the branching programs themselves",
    "start": "2916319",
    "end": "2921359"
  },
  {
    "text": "that they'd run deterministically you give them an assignment to the um to the input variables",
    "start": "2921359",
    "end": "2927200"
  },
  {
    "text": "that's going to determine a path through each branching program which is eventually going to output a",
    "start": "2927200",
    "end": "2932880"
  },
  {
    "text": "zero or a one and you want to know do those two branching programs always give the same value no matter what the input was",
    "start": "2932880",
    "end": "2940079"
  },
  {
    "text": "but the branching programs themselves were deterministic um now the machine that's trying to",
    "start": "2940079",
    "end": "2947760"
  },
  {
    "text": "make the determination of whether those two branching programs are equivalent that machine that we're going to be",
    "start": "2947760",
    "end": "2953680"
  },
  {
    "text": "arguing is going to be a probabilistic machine so it's a kind of non-deterministic machine that's going",
    "start": "2953680",
    "end": "2959119"
  },
  {
    "text": "to have different possible ways to go depending upon the outcome if it's of its coin tosses",
    "start": "2959119",
    "end": "2965200"
  },
  {
    "text": "so it you can think of as non-determinist you know non-determinism in the ordinary sense about how like that it has a tree of",
    "start": "2965200",
    "end": "2971599"
  },
  {
    "text": "possibilities but um now you know the way we're thinking about",
    "start": "2971599",
    "end": "2976880"
  },
  {
    "text": "acceptance is different you know that instead of accepting if there's just one uh accept branch",
    "start": "2976880",
    "end": "2983359"
  },
  {
    "text": "the machine for it to accept um has to have a majority of the branches be accepting um",
    "start": "2983359",
    "end": "2990319"
  },
  {
    "text": "and uh you know so it's it's there's some similarities but some",
    "start": "2990319",
    "end": "2995920"
  },
  {
    "text": "differences with the usual way we think of non-determinism so what's the motivation behind",
    "start": "2995920",
    "end": "3001119"
  },
  {
    "text": "introducing this type of turing machine well i mean there's a lot",
    "start": "3001119",
    "end": "3006880"
  },
  {
    "text": "i guess there are two motivations uh probabilistic algorithms sometimes",
    "start": "3007359",
    "end": "3013760"
  },
  {
    "text": "called monte carlo algorithms um uh turn out to be useful in practice for a variety of things",
    "start": "3013760",
    "end": "3020160"
  },
  {
    "text": "and um so that led to um people to think about them in the",
    "start": "3020160",
    "end": "3026559"
  },
  {
    "text": "context of complexity um they're related in some ways to quantum computers which are also",
    "start": "3026559",
    "end": "3031839"
  },
  {
    "text": "probabilistic in in a somewhat different way um but they also have a very nice um",
    "start": "3031839",
    "end": "3038319"
  },
  {
    "text": "uh um uh",
    "start": "3038319",
    "end": "3043359"
  },
  {
    "text": "formulation in complexity theory so complexity theorists like to think",
    "start": "3043359",
    "end": "3048400"
  },
  {
    "text": "about probabilistic computation because i mean you can do interesting things with probabilistic machines and the",
    "start": "3048400",
    "end": "3054000"
  },
  {
    "text": "complexity classes associated are also interesting so as you'll see it leads us in an interesting direction",
    "start": "3054000",
    "end": "3059920"
  },
  {
    "text": "uh to consider how to solve this problem this read once branching program problem",
    "start": "3059920",
    "end": "3065040"
  },
  {
    "text": "equivalence with a probabilistic machine it's just just an interesting um algorithm that",
    "start": "3065040",
    "end": "3070800"
  },
  {
    "text": "we're going to come up with um",
    "start": "3070800",
    "end": "3075760"
  },
  {
    "text": "so in our pro in our proof attempt where did we use the probabilistic nature for bpp because we're running the two",
    "start": "3078640",
    "end": "3085280"
  },
  {
    "text": "branching programs on a random input um",
    "start": "3085280",
    "end": "3091520"
  },
  {
    "text": "i mean so you know you have your two branching programs you pick a random input to run those two branching",
    "start": "3092480",
    "end": "3098880"
  },
  {
    "text": "programs and you see what they do that's where that's why it's probabilistic when you're thinking about random",
    "start": "3098880",
    "end": "3104480"
  },
  {
    "text": "behavior of the machine it's a um that's a probabilistic machine",
    "start": "3104480",
    "end": "3109520"
  },
  {
    "text": "so each branch of the machine is going to be like the way we normally",
    "start": "3109520",
    "end": "3115440"
  },
  {
    "text": "think about non-determinism somebody's asking whether we think of the complexity of the machine in terms of all of the branches",
    "start": "3115440",
    "end": "3122480"
  },
  {
    "text": "of the machine or um each branch separately it's we always think about for non-deterministic",
    "start": "3122480",
    "end": "3128319"
  },
  {
    "text": "machines each branch separately um i'm not totally sure i understand the question there so are all the inputs",
    "start": "3128319",
    "end": "3135040"
  },
  {
    "text": "built in and we randomly choose one through coin flips not sure i understand that question",
    "start": "3135040",
    "end": "3140559"
  },
  {
    "text": "either we're given as input the two branching programs and then we flip coins you know kind of",
    "start": "3140559",
    "end": "3148480"
  },
  {
    "text": "using our non-determinism you can think about it equivalent in terms of coin flips to choose the values",
    "start": "3148480",
    "end": "3154559"
  },
  {
    "text": "of the variables so now we have a set of variable inputs to the",
    "start": "3154559",
    "end": "3159839"
  },
  {
    "text": "values of the variables and we use that to um as input to the branching programs to",
    "start": "3159839",
    "end": "3167520"
  },
  {
    "text": "see what whether they to see what answers they give and we in particular whether they give the same",
    "start": "3167520",
    "end": "3172559"
  },
  {
    "text": "answer on that randomly chosen uh input let's move on um",
    "start": "3172559",
    "end": "3180920"
  },
  {
    "text": "all right so now sort of moving us toward um",
    "start": "3181280",
    "end": "3187040"
  },
  {
    "text": "the actual bpp algorithm for uh",
    "start": "3187040",
    "end": "3192400"
  },
  {
    "text": "um read once branching program equivalence testing um",
    "start": "3192400",
    "end": "3197520"
  },
  {
    "text": "we have to think about a different way to um",
    "start": "3197520",
    "end": "3204240"
  },
  {
    "text": "we need an alternate way of thinking about the computation of a branching program",
    "start": "3204400",
    "end": "3210720"
  },
  {
    "text": "it's going to look very similar but it's going to lead us in a direction that's going to allow us to talk about this",
    "start": "3210720",
    "end": "3217359"
  },
  {
    "text": "um these non-boolean inputs that i refer to um just kind of where we're going",
    "start": "3217359",
    "end": "3222800"
  },
  {
    "text": "we're going to be simulating branching programs with polynomials if that helps you sort of as an",
    "start": "3222800",
    "end": "3228559"
  },
  {
    "text": "overarching plan but we'll we'll get there a little slowly so okay here's a branching program",
    "start": "3228559",
    "end": "3235680"
  },
  {
    "text": "read once branching program um we're not going to use the read once feature uh",
    "start": "3235680",
    "end": "3241119"
  },
  {
    "text": "just yet but we'll that'll come later but anyway here's a branching program um",
    "start": "3241119",
    "end": "3248240"
  },
  {
    "text": "and um uh oh here's my branch and i",
    "start": "3249280",
    "end": "3255280"
  },
  {
    "text": "put crashed here start that again um",
    "start": "3255280",
    "end": "3260160"
  },
  {
    "text": "okay so we take an input um whatever it is um",
    "start": "3262480",
    "end": "3268000"
  },
  {
    "text": "and thinking about the computation of the branching process so we're not thinking about the algorithm right now we're just",
    "start": "3268000",
    "end": "3273440"
  },
  {
    "text": "thinking about branching programs for the minute we're going to get back to the algorithm later",
    "start": "3273440",
    "end": "3279760"
  },
  {
    "text": "so the branching program follows a path as i indicated when you have a particular input your x1 is 0",
    "start": "3279760",
    "end": "3287119"
  },
  {
    "text": "x2 is 1 x3 is 1 so the output is going to be 1 in this case",
    "start": "3287119",
    "end": "3293200"
  },
  {
    "text": "okay so",
    "start": "3293200",
    "end": "3298240"
  },
  {
    "text": "the way i want to think about this a little differently is i want to label all of the nodes and",
    "start": "3298240",
    "end": "3304400"
  },
  {
    "text": "all of the edges uh with a value that tells me whether or not this yellow",
    "start": "3304400",
    "end": "3311680"
  },
  {
    "text": "path went through that node or edge it's going to be just a doing the same but",
    "start": "3311680",
    "end": "3318799"
  },
  {
    "text": "you may think this is no difference at all but i want to label all the all of the things on the yellow path",
    "start": "3318799",
    "end": "3324960"
  },
  {
    "text": "i'm going to label them or the one and all of the things that are not on the yellow path i'm going to label with a zero",
    "start": "3324960",
    "end": "3333119"
  },
  {
    "text": "so i'm keeping those trying to keep those labels apart from the original branching program which are written in white these labels",
    "start": "3333119",
    "end": "3339839"
  },
  {
    "text": "are written yellow but these labels have to do with the execution of the branching program on an",
    "start": "3339839",
    "end": "3345520"
  },
  {
    "text": "input so once i have an input that's going to determine a one or a zero",
    "start": "3345520",
    "end": "3352160"
  },
  {
    "text": "label for every node and edge",
    "start": "3352160",
    "end": "3356720"
  },
  {
    "text": "now if we want to look at the output from this branching program after we have that labeling we only have to look at",
    "start": "3360000",
    "end": "3366000"
  },
  {
    "text": "the label of the one output node because that's if that one has a one on it that",
    "start": "3366000",
    "end": "3372000"
  },
  {
    "text": "means that the path went through that one and so therefore we should output output output uh the output is one",
    "start": "3372000",
    "end": "3379520"
  },
  {
    "text": "um uh so i'm going to give you another way of",
    "start": "3379520",
    "end": "3385680"
  },
  {
    "text": "assigning that instead of just coming finding the path first and then coming",
    "start": "3385680",
    "end": "3390720"
  },
  {
    "text": "up with the labeling afterward i'm going to give you a different way of coming up with that labeling kind of building it",
    "start": "3390720",
    "end": "3396000"
  },
  {
    "text": "up inductively starting at the start node and building up that labeling",
    "start": "3396000",
    "end": "3401440"
  },
  {
    "text": "you'll see what i mean by my example so if i have a label on this node",
    "start": "3401440",
    "end": "3408720"
  },
  {
    "text": "so i already know whether or not the path went through that node",
    "start": "3408720",
    "end": "3414480"
  },
  {
    "text": "you know label 1 means the path went through it label 0 means the path doesn't it does not go through it",
    "start": "3414480",
    "end": "3420710"
  },
  {
    "text": "[Music] that's going to tell me how to label the two outgoing edges",
    "start": "3420710",
    "end": "3427520"
  },
  {
    "text": "so if i'm if i've already labeled this with a where a is a zero or one then",
    "start": "3427520",
    "end": "3432960"
  },
  {
    "text": "uh what what expression should i use um to how do",
    "start": "3432960",
    "end": "3439440"
  },
  {
    "text": "under what circumstances will i label what's what's the right label for this one outgoing edge here",
    "start": "3439440",
    "end": "3446720"
  },
  {
    "text": "well if a is zero that means the pair we know the path did not go through this node so there's no",
    "start": "3446720",
    "end": "3453839"
  },
  {
    "text": "way it could go through that edge similarly if x i",
    "start": "3453839",
    "end": "3459760"
  },
  {
    "text": "is a zero that means even if we did go through that node the path would go through the other edge",
    "start": "3459760",
    "end": "3467040"
  },
  {
    "text": "other outgoing edge and not to this one so that tells us that the boolean",
    "start": "3467040",
    "end": "3472480"
  },
  {
    "text": "expression which describes the value the label of this uh node in the execution",
    "start": "3472480",
    "end": "3479040"
  },
  {
    "text": "is going to be the and of the the value on the node and the um the",
    "start": "3479040",
    "end": "3485119"
  },
  {
    "text": "query variable of that node now think about what's the right way to",
    "start": "3485119",
    "end": "3490720"
  },
  {
    "text": "label the other edge the the execution value of the other edge",
    "start": "3490720",
    "end": "3496880"
  },
  {
    "text": "again you have to have go through this node so a has to be one but now you want x i to be 0 in order to go through that",
    "start": "3496880",
    "end": "3504160"
  },
  {
    "text": "edge so that means it's going to be a and the complement of x i",
    "start": "3504160",
    "end": "3509760"
  },
  {
    "text": "okay so this is going to just tell me this i'm writing a formula for how we're labeling these uh these edges",
    "start": "3510319",
    "end": "3518079"
  },
  {
    "text": "based on the label of the of the parent node similarly if i have a bunch of edges",
    "start": "3518079",
    "end": "3524799"
  },
  {
    "text": "where i already know the values the labels uh the execution levels there",
    "start": "3524799",
    "end": "3530559"
  },
  {
    "text": "let's say so i have a1 a2 and a3 what is the right label to put on this node",
    "start": "3530559",
    "end": "3536400"
  },
  {
    "text": "um well if any one of those is a one that means the path went through that",
    "start": "3536400",
    "end": "3542960"
  },
  {
    "text": "edge and so therefore it's going to go through that node so that tells us that the label to put",
    "start": "3542960",
    "end": "3548799"
  },
  {
    "text": "on that node is the or of the labels on the incoming edges",
    "start": "3548799",
    "end": "3554720"
  },
  {
    "text": "okay questions on this",
    "start": "3554720",
    "end": "3559838"
  },
  {
    "text": "so now this is kind of setting the stage for",
    "start": "3561119",
    "end": "3566319"
  },
  {
    "text": "starting to think about this um more toward polynomials instead instead",
    "start": "3566319",
    "end": "3571920"
  },
  {
    "text": "of using a boolean algebra so um",
    "start": "3571920",
    "end": "3578559"
  },
  {
    "text": "quite i'm getting question how do we know what the execution path is which nodes to label we're going to be",
    "start": "3578559",
    "end": "3583920"
  },
  {
    "text": "labeling all of the nodes so we start off with labeling the uh",
    "start": "3583920",
    "end": "3590480"
  },
  {
    "text": "did i say that here we should we start up i didn't say but i should have we label the the start node with one that",
    "start": "3590480",
    "end": "3596960"
  },
  {
    "text": "because the path always goes through the start node so without even talking about a path we just label the start node 1.",
    "start": "3596960",
    "end": "3604720"
  },
  {
    "text": "maybe we'll do an example of this also but now once we label this star this node 1",
    "start": "3604720",
    "end": "3611520"
  },
  {
    "text": "we have an expression that tells us how to label the two outgoing um the two",
    "start": "3611520",
    "end": "3618319"
  },
  {
    "text": "outgoing edges this edge and that edge um and i'm doing it without",
    "start": "3618319",
    "end": "3623520"
  },
  {
    "text": "knowing the values of the variables i'm doing it kind of i'm just making an expression uh which is going to describe",
    "start": "3623520",
    "end": "3629200"
  },
  {
    "text": "what those labels would be once you tell me what the input assignment is",
    "start": "3629200",
    "end": "3635039"
  },
  {
    "text": "okay so i'm just sort of it's almost like a symbolic execution here i'm just writing down the different expressions",
    "start": "3635599",
    "end": "3642400"
  },
  {
    "text": "for how to calculate what these things should be um",
    "start": "3642400",
    "end": "3647839"
  },
  {
    "text": "let's let me um maybe this will become clearer as we",
    "start": "3647839",
    "end": "3653040"
  },
  {
    "text": "continue so the poll now this is the big idea of",
    "start": "3653040",
    "end": "3658400"
  },
  {
    "text": "this proof um we're going to use something called arithmetization",
    "start": "3658400",
    "end": "3664319"
  },
  {
    "text": "we're going to convert from thinking about things in the boolean world to thinking about things in the",
    "start": "3664319",
    "end": "3669680"
  },
  {
    "text": "arithmetical world where we you have arithmetic over integers let's say for now um",
    "start": "3669680",
    "end": "3676079"
  },
  {
    "text": "so instead of ands and ors we're going to be talking about pluses and times",
    "start": "3676079",
    "end": "3681200"
  },
  {
    "text": "um and uh we're going to the way we're going to make the bridge",
    "start": "3681599",
    "end": "3687680"
  },
  {
    "text": "is bishop by showing how to simulate the ands and ors the hand and or operations with the plus",
    "start": "3687680",
    "end": "3694240"
  },
  {
    "text": "and times operations um so um assuming",
    "start": "3694240",
    "end": "3700480"
  },
  {
    "text": "one means true and zero means false if you have",
    "start": "3700480",
    "end": "3706720"
  },
  {
    "text": "the expression a and b as a boolean expression",
    "start": "3706720",
    "end": "3712480"
  },
  {
    "text": "we can represent that as a times b using arithmetic",
    "start": "3712480",
    "end": "3717839"
  },
  {
    "text": "because um it has it computes exactly the same",
    "start": "3717839",
    "end": "3723039"
  },
  {
    "text": "value when we have um the boolean",
    "start": "3723039",
    "end": "3728400"
  },
  {
    "text": "representation of true and false uh being one and zero so you know",
    "start": "3728400",
    "end": "3733520"
  },
  {
    "text": "one and one is one and one times one is one",
    "start": "3733520",
    "end": "3738640"
  },
  {
    "text": "and anything else you know one and zero zero and one zero and zero",
    "start": "3738640",
    "end": "3744160"
  },
  {
    "text": "if you if you applied the times operator you're going to get the same value so times is very much like and in this",
    "start": "3744160",
    "end": "3750000"
  },
  {
    "text": "sense okay we're going to write it as just a b usually without the time symbol",
    "start": "3750000",
    "end": "3756960"
  },
  {
    "text": "so if we have a complement how would we simulate that with arithmetic",
    "start": "3757359",
    "end": "3764000"
  },
  {
    "text": "well again here we're just flipping one and zero",
    "start": "3764000",
    "end": "3769839"
  },
  {
    "text": "in using the complement operation that's going to be the same as subtracting the",
    "start": "3770079",
    "end": "3775119"
  },
  {
    "text": "value from one that also flips it from uh between one and zero",
    "start": "3775119",
    "end": "3781200"
  },
  {
    "text": "um how about or if you have a or b well um",
    "start": "3781200",
    "end": "3786720"
  },
  {
    "text": "it's slightly more complicated because you use a plus b",
    "start": "3786720",
    "end": "3792880"
  },
  {
    "text": "um but you have to subtract off the product because",
    "start": "3792880",
    "end": "3798480"
  },
  {
    "text": "what you want is this this simulation should be",
    "start": "3798480",
    "end": "3803680"
  },
  {
    "text": "give you exactly the same value so what if you have one or one",
    "start": "3803680",
    "end": "3809280"
  },
  {
    "text": "you want that to be a one a one answer you don't want it to be a two so you have to subtract off the product",
    "start": "3809280",
    "end": "3815440"
  },
  {
    "text": "um uh and the goal is is to have a faithful",
    "start": "3815440",
    "end": "3821359"
  },
  {
    "text": "simulation of the and and or by using plus and times so you get exactly the same answers out",
    "start": "3821359",
    "end": "3827599"
  },
  {
    "text": "when you put in boolean values here okay so",
    "start": "3827599",
    "end": "3832960"
  },
  {
    "text": "um just to say where we're going what this is going to",
    "start": "3832960",
    "end": "3838559"
  },
  {
    "text": "um you know it sounds it's superficially we haven't really done anything",
    "start": "3838559",
    "end": "3844640"
  },
  {
    "text": "um this is but um what this is going to enable us to do is",
    "start": "3844640",
    "end": "3851280"
  },
  {
    "text": "plug in values which are not boolean because you know it doesn't make sense",
    "start": "3851280",
    "end": "3856880"
  },
  {
    "text": "to talk about it makes sense to talk about one and zero but it doesn't make sense to talk about two and three",
    "start": "3856880",
    "end": "3864240"
  },
  {
    "text": "but it does talk it makes sense to talk about two times three and that's going to be",
    "start": "3864240",
    "end": "3870319"
  },
  {
    "text": "a useful um okay so let's just see um",
    "start": "3870319",
    "end": "3877520"
  },
  {
    "text": "remember that that that um that inductive labeling procedure that i",
    "start": "3879520",
    "end": "3886160"
  },
  {
    "text": "described before um where i labeled gave the execution",
    "start": "3886160",
    "end": "3891280"
  },
  {
    "text": "labels on the edges depending upon the label of the parent node and which node which variable is",
    "start": "3891280",
    "end": "3897440"
  },
  {
    "text": "being queried um so if i know that this value is an a but",
    "start": "3897440",
    "end": "3902640"
  },
  {
    "text": "now the uh okay so i'm just going to write this down",
    "start": "3902640",
    "end": "3908400"
  },
  {
    "text": "using uh arithmetic instead of using boolean uh operations",
    "start": "3908400",
    "end": "3914079"
  },
  {
    "text": "uh so before we have this was a an a and x i if you remember from the previous slide",
    "start": "3914079",
    "end": "3920079"
  },
  {
    "text": "um now what are we going to use instead because we're going to use this conversion here instead of and we're",
    "start": "3920079",
    "end": "3925200"
  },
  {
    "text": "going to use multiplication that's just a times x i",
    "start": "3925200",
    "end": "3930400"
  },
  {
    "text": "what about on this side here was a and the complement of x i",
    "start": "3930400",
    "end": "3936640"
  },
  {
    "text": "now the complement of x i is one minus x i in the uh arithmetically so this becomes",
    "start": "3936640",
    "end": "3943760"
  },
  {
    "text": "a times one minus x i okay um",
    "start": "3943760",
    "end": "3949280"
  },
  {
    "text": "similarly here we did the or",
    "start": "3949280",
    "end": "3954480"
  },
  {
    "text": "to get the label on the node from its the labels of its incoming edges now we're going to do something a little",
    "start": "3954480",
    "end": "3960559"
  },
  {
    "text": "strange um because we have a formula here for or but for technical reasons that will come",
    "start": "3960559",
    "end": "3966480"
  },
  {
    "text": "up later this is not a convenient representation for us what i'm going to use instead of this",
    "start": "3966480",
    "end": "3972799"
  },
  {
    "text": "one i'm just going to simply say just take the sum",
    "start": "3972799",
    "end": "3978240"
  },
  {
    "text": "why is that good enough in this case this is still going to be a",
    "start": "3978240",
    "end": "3984480"
  },
  {
    "text": "faithful representation and give the right answer all of the time and that's because",
    "start": "3984480",
    "end": "3990960"
  },
  {
    "text": "for our branching programs read once or otherwise read once is not",
    "start": "3990960",
    "end": "3997359"
  },
  {
    "text": "coming in yet for our branching programs",
    "start": "3997359",
    "end": "4003119"
  },
  {
    "text": "they're a cyclic so they can never enter a node on two",
    "start": "4003119",
    "end": "4008559"
  },
  {
    "text": "different paths there's at most one way to come into a node uh um on a path through the on an",
    "start": "4008559",
    "end": "4015280"
  },
  {
    "text": "execution path through the branching program if it comes in through uh through to this edge",
    "start": "4015280",
    "end": "4021280"
  },
  {
    "text": "um there's no way for it to for this edge to also have a path because that means you have to go out and come back",
    "start": "4021280",
    "end": "4028000"
  },
  {
    "text": "and and have a cycle in the branching program which is",
    "start": "4028000",
    "end": "4034480"
  },
  {
    "text": "disallowed so at most one of these edges can have the path go through it",
    "start": "4034480",
    "end": "4040160"
  },
  {
    "text": "so at most one of these a's can be a one the others are going to be zero and therefore just taking the sum",
    "start": "4040160",
    "end": "4047039"
  },
  {
    "text": "is going to give us a value of either 0 or 1 but it's never going to give a value higher and so you don't have to",
    "start": "4047039",
    "end": "4052799"
  },
  {
    "text": "subtract off these product terms okay a little bit complicated here if you didn't totally get that",
    "start": "4052799",
    "end": "4058799"
  },
  {
    "text": "um don't worry for now you know we're um you know more concerned that you get the",
    "start": "4058799",
    "end": "4064640"
  },
  {
    "text": "the big picture of what's going on um",
    "start": "4064640",
    "end": "4069359"
  },
  {
    "text": "okay so um i think we're almost um",
    "start": "4069680",
    "end": "4075119"
  },
  {
    "text": "let me just see how far we are yeah so i'm just going to work through an",
    "start": "4075119",
    "end": "4080640"
  },
  {
    "text": "example and i think that'll bring us uh let's just see any questions here",
    "start": "4080640",
    "end": "4087760"
  },
  {
    "text": "not seeing any it means you're either all totally understanding or or you're",
    "start": "4087760",
    "end": "4094079"
  },
  {
    "text": "totally lost i never can tell um so feel free to ask a question if you're even if you're confused um",
    "start": "4094079",
    "end": "4101520"
  },
  {
    "text": "you know i'll do my best okay maybe this example might help",
    "start": "4101520",
    "end": "4108640"
  },
  {
    "text": "um so now what we're going to do is using this sort of arithmetical",
    "start": "4108640",
    "end": "4114000"
  },
  {
    "text": "view of the way i branching program's computation um you",
    "start": "4114000",
    "end": "4121278"
  },
  {
    "text": "know is executed when when we're running it uh um",
    "start": "4121279",
    "end": "4126400"
  },
  {
    "text": "you know an input through it um this is going to allow us now to give a meaning",
    "start": "4126400",
    "end": "4132159"
  },
  {
    "text": "to running the branching program on non-boolean inputs so maybe this example will illustrate that",
    "start": "4132159",
    "end": "4137758"
  },
  {
    "text": "um so let's just take this particular branching program here",
    "start": "4137759",
    "end": "4144480"
  },
  {
    "text": "okay um this branching program it's just on two variables x1 and x2 and actually",
    "start": "4144480",
    "end": "4150159"
  },
  {
    "text": "computes a familiar function this is the exclusive or function if you look at it for a minute you'll see that",
    "start": "4150159",
    "end": "4155838"
  },
  {
    "text": "this is going to give you x1 exclusive or x2 so it's going to be",
    "start": "4155839",
    "end": "4161758"
  },
  {
    "text": "one if either of the x1 or x2 are one but it's going to be zero if they're both one that's what this branching",
    "start": "4161759",
    "end": "4168318"
  },
  {
    "text": "program computes now but let's take a look um at running this branching",
    "start": "4168319",
    "end": "4175359"
  },
  {
    "text": "program instead of on the usual boolean values let's run it on x1 equal to 2 and x2 equal to 3.",
    "start": "4175359",
    "end": "4184480"
  },
  {
    "text": "now uh um you know a common confusion",
    "start": "4185040",
    "end": "4190400"
  },
  {
    "text": "might be that you're looking you know when you do the x1 query you're looking for",
    "start": "4190400",
    "end": "4196239"
  },
  {
    "text": "another outgoing edge which is labeled two no that's not what i'm doing what i'm doing",
    "start": "4196239",
    "end": "4202640"
  },
  {
    "text": "here is i'm somehow uh through this execution by assigning these other values i'm kind",
    "start": "4202640",
    "end": "4209280"
  },
  {
    "text": "of blending together the computation of x x uh 1 equal to 0 and x1 equal to 1",
    "start": "4209280",
    "end": "4216400"
  },
  {
    "text": "together i don't know if that makes any sense but let's look through the example",
    "start": "4216400",
    "end": "4222080"
  },
  {
    "text": "um so first of all these are the labeling rules that i had from",
    "start": "4222080",
    "end": "4227600"
  },
  {
    "text": "uh the previous slide when i used plus and times instead of and or",
    "start": "4227600",
    "end": "4233920"
  },
  {
    "text": "okay now i'm going to show you how to use that to label the nodes and edges of",
    "start": "4233920",
    "end": "4240159"
  },
  {
    "text": "this graph based on this input and that'll determine an output",
    "start": "4240159",
    "end": "4246239"
  },
  {
    "text": "would be the value on the uh the one node okay so we always start out by labeling",
    "start": "4246239",
    "end": "4252560"
  },
  {
    "text": "the start node with one that's just the rule um",
    "start": "4252560",
    "end": "4259360"
  },
  {
    "text": "and uh okay sorry let's let's think about it together",
    "start": "4259360",
    "end": "4264400"
  },
  {
    "text": "before i blurt out the answer what's going to be the label on this edge",
    "start": "4264400",
    "end": "4271440"
  },
  {
    "text": "so this is one of the outgoing edges uh from a node that already has a label so",
    "start": "4271440",
    "end": "4276719"
  },
  {
    "text": "that's going to be this case here and what we do is if we take we take the label of that node",
    "start": "4276719",
    "end": "4284080"
  },
  {
    "text": "and since it's a one edge that's outgoing we multiply that label",
    "start": "4284080",
    "end": "4289679"
  },
  {
    "text": "by um the value of uh that",
    "start": "4289679",
    "end": "4294960"
  },
  {
    "text": "uh variable of the the assignment to that variable",
    "start": "4294960",
    "end": "4301760"
  },
  {
    "text": "so x1 is two so we take the the it's good this the a",
    "start": "4301760",
    "end": "4306880"
  },
  {
    "text": "here is one x1 is a assigned to two so it's going to be one times two",
    "start": "4306880",
    "end": "4313520"
  },
  {
    "text": "is going to be the value the execution value we put on this edge so it's going to be 2.",
    "start": "4313520",
    "end": "4321280"
  },
  {
    "text": "what's going to be the value we put on the other edge the other edge the 0 outgoing edge from x1",
    "start": "4322400",
    "end": "4328800"
  },
  {
    "text": "so once you think about that for a second",
    "start": "4328800",
    "end": "4332639"
  },
  {
    "text": "so now we're going to use this expression it's a times 1 minus x i",
    "start": "4335600",
    "end": "4342880"
  },
  {
    "text": "and so x i again is two so one minus x i is one minus two",
    "start": "4342880",
    "end": "4349120"
  },
  {
    "text": "um does that mean that's how complementary but okay let's say that so it's one",
    "start": "4349120",
    "end": "4354320"
  },
  {
    "text": "minus 2 so that's minus 1 times the label 1 here so you get minus 1 as the label",
    "start": "4354320",
    "end": "4361120"
  },
  {
    "text": "on this edge now",
    "start": "4361120",
    "end": "4367600"
  },
  {
    "text": "keep in mind that if i had plugged in and this is very important if i had plugged in",
    "start": "4367679",
    "end": "4373440"
  },
  {
    "text": "boolean values here i would be getting out the same boolean values that you would get just by",
    "start": "4373440",
    "end": "4379600"
  },
  {
    "text": "following through the path you know the things on the path would be one the things off the path would be",
    "start": "4379600",
    "end": "4385040"
  },
  {
    "text": "zero um but uh",
    "start": "4385040",
    "end": "4390560"
  },
  {
    "text": "but with what's kind of uh what's happening here is that",
    "start": "4390560",
    "end": "4395760"
  },
  {
    "text": "there's still a meaning when the inputs are not boolean so let's continue here how about what's",
    "start": "4395760",
    "end": "4401280"
  },
  {
    "text": "going to be the value on this node so think with me i think it will help",
    "start": "4401280",
    "end": "4406960"
  },
  {
    "text": "you so now we're using this rule here we add up all the values on the incoming edges",
    "start": "4406960",
    "end": "4412960"
  },
  {
    "text": "there's only one incoming edge which is value two so that means this guy's going to get a two and similar on this one",
    "start": "4412960",
    "end": "4418800"
  },
  {
    "text": "this guy's going to get a minus one now let's take a look at this edge",
    "start": "4418800",
    "end": "4423920"
  },
  {
    "text": "so this is a the zero outgoing edge from a node label two with with label x2",
    "start": "4423920",
    "end": "4430719"
  },
  {
    "text": "so this is the zero outgoing edge the node the label is two so it's going to be two times",
    "start": "4430719",
    "end": "4437440"
  },
  {
    "text": "one minus the x2 value x2 is 3 so 1 minus 3 is minus 2. it's going to be 2",
    "start": "4437440",
    "end": "4443199"
  },
  {
    "text": "times -2 which is minus 4. so similarly you can get the value here",
    "start": "4443199",
    "end": "4450640"
  },
  {
    "text": "the value on the the one outgoing edge is going to be",
    "start": "4450640",
    "end": "4455760"
  },
  {
    "text": "2 times x the x2 value which is 3 so that's going to be 6.",
    "start": "4455760",
    "end": "4463199"
  },
  {
    "text": "and these two here uh um",
    "start": "4463199",
    "end": "4469120"
  },
  {
    "text": "so you know now we have a minus one and the outgoing is a it's a it's a zero edge so it's one",
    "start": "4469120",
    "end": "4475840"
  },
  {
    "text": "minus three and here it's going to be one times minus three",
    "start": "4475840",
    "end": "4481440"
  },
  {
    "text": "no 1 times 3 i'm sorry 1 times 3. um",
    "start": "4481440",
    "end": "4486880"
  },
  {
    "text": "so you get the out the answer is minus 3. so now what's the label on the zero",
    "start": "4486880",
    "end": "4492000"
  },
  {
    "text": "output edge so you have to add in add up the two incoming edges here so we have",
    "start": "4492000",
    "end": "4498719"
  },
  {
    "text": "uh this this edge here was a two",
    "start": "4498719",
    "end": "4503599"
  },
  {
    "text": "this edge coming in here is a six so it's going to be two plus six it's eight and what about this edge this",
    "start": "4504000",
    "end": "4511520"
  },
  {
    "text": "node here this is an important node because this is going to be the output so",
    "start": "4511520",
    "end": "4516560"
  },
  {
    "text": "it has um uh",
    "start": "4516560",
    "end": "4522400"
  },
  {
    "text": "you know minus three coming in and a minus four coming in so you add those together",
    "start": "4522400",
    "end": "4527840"
  },
  {
    "text": "you get a minus seven i mean you may wonder what",
    "start": "4527840",
    "end": "4533600"
  },
  {
    "text": "what the world is going on here um just a lot of mumbo jumbo uh",
    "start": "4533600",
    "end": "4539520"
  },
  {
    "text": "but we're gonna make sense of all this not today uh we're gonna have to argue why this is",
    "start": "4539520",
    "end": "4546000"
  },
  {
    "text": "what the meaning that we're gonna get out of this is gonna be um but the point point is",
    "start": "4546000",
    "end": "4551360"
  },
  {
    "text": "that this is going to lead to a new algorithm for testing this is again getting back",
    "start": "4551360",
    "end": "4558000"
  },
  {
    "text": "to what we were doing this is the equivalence problem for read once branching programs so now what the new",
    "start": "4558000",
    "end": "4565120"
  },
  {
    "text": "algorithm is going to do is going to pick a random non-boolean assignment so it's going to randomly assign",
    "start": "4565120",
    "end": "4572080"
  },
  {
    "text": "values to the x's and to some non-boolean values instead",
    "start": "4572080",
    "end": "4577120"
  },
  {
    "text": "of zeros and ones we're going to plug in random integer values we'll make that clear",
    "start": "4577120",
    "end": "4582239"
  },
  {
    "text": "next time what's what this what the domain is going to be um [Music]",
    "start": "4582239",
    "end": "4588080"
  },
  {
    "text": "and then once we have that non-boolean assignment we're going to value b1 and b2",
    "start": "4588080",
    "end": "4594880"
  },
  {
    "text": "and if they disagree out there in that extended domain",
    "start": "4594880",
    "end": "4600000"
  },
  {
    "text": "then we have to show that they're not equivalent and will reject and we'll also show that",
    "start": "4600000",
    "end": "4605600"
  },
  {
    "text": "if they were equivalent then even when we evaluate them",
    "start": "4605600",
    "end": "4611360"
  },
  {
    "text": "then we have to show that if if they're not equivalent that they're very likely to to have a difference in the",
    "start": "4612880",
    "end": "4619120"
  },
  {
    "text": "non-boolean uh domain and so um if they agree it it",
    "start": "4619120",
    "end": "4625199"
  },
  {
    "text": "it gives you evidence that the two are really equivalent um so the completeness proof will come",
    "start": "4625199",
    "end": "4632159"
  },
  {
    "text": "after thanksgiving so with that um i'm gonna wish you all a nice uh break um oh",
    "start": "4632159",
    "end": "4639520"
  },
  {
    "text": "we have a check in here sorry oh yeah this is a good one i don't know how if you're following me",
    "start": "4639520",
    "end": "4645120"
  },
  {
    "text": "uh but um if i plug in one for x1",
    "start": "4645120",
    "end": "4651520"
  },
  {
    "text": "and y for x2 does it do the inputs in the assignment",
    "start": "4651520",
    "end": "4656560"
  },
  {
    "text": "need to be distinct no it could be the same value i could be",
    "start": "4656560",
    "end": "4661679"
  },
  {
    "text": "uh two and two here that's perfectly valid but here i'm going to plug in 1 for x1",
    "start": "4661679",
    "end": "4667679"
  },
  {
    "text": "i'm going to plug in a variable for x2 y and i'm going to do the whole",
    "start": "4667679",
    "end": "4672880"
  },
  {
    "text": "calculation that i just did and now what's going to be the output",
    "start": "4672880",
    "end": "4678440"
  },
  {
    "text": "and i mean this looks like a pain to figure out you could do it it looks like a pain but let me give you a big hint",
    "start": "4679040",
    "end": "4686080"
  },
  {
    "text": "um remember that this thing is supposed to be calculating the",
    "start": "4686080",
    "end": "4693280"
  },
  {
    "text": "original branching program calculates the exclusive or function and that means when i plug in",
    "start": "4693280",
    "end": "4700400"
  },
  {
    "text": "um a boolean value i should get the exclusive or value coming out",
    "start": "4700400",
    "end": "4707120"
  },
  {
    "text": "so if i already know that x1 is one which of these is consistent",
    "start": "4707120",
    "end": "4713199"
  },
  {
    "text": "with getting a value uh that the exclusive or function would",
    "start": "4713199",
    "end": "4718560"
  },
  {
    "text": "compute so let me launch the poll on that",
    "start": "4718560",
    "end": "4724719"
  },
  {
    "text": "so we're at a time",
    "start": "4724880",
    "end": "4727840"
  },
  {
    "text": "so let's just let this run for another 10 seconds okay",
    "start": "4730480",
    "end": "4736320"
  },
  {
    "text": "i'm going to close this ready um",
    "start": "4736320",
    "end": "4742320"
  },
  {
    "text": "yes indeed a is the right answer because that's one if i know that one variable is one then",
    "start": "4743840",
    "end": "4749199"
  },
  {
    "text": "the exclusive or is going to be the complement of the other variable which is one minus y so that's what you",
    "start": "4749199",
    "end": "4755760"
  },
  {
    "text": "would get if you calculated this um because this is what we did today",
    "start": "4755760",
    "end": "4761840"
  },
  {
    "text": "and um feel free to ask questions so let me just so we're going to spend a good",
    "start": "4761840",
    "end": "4766880"
  },
  {
    "text": "chunk i'll review this what we've done so far but then we're going to carry it forward and spend a",
    "start": "4766880",
    "end": "4773199"
  },
  {
    "text": "good chunk of tuesday's lecture after the thanksgiving break uh proving that this",
    "start": "4773199",
    "end": "4779440"
  },
  {
    "text": "uh procedure that i just subscribed worked and works and it's um it's an interesting but somewhat",
    "start": "4779440",
    "end": "4786719"
  },
  {
    "text": "you know it's not such an easy proof uh so we're going to spend the try to do it slowly and clearly and then um but this",
    "start": "4786719",
    "end": "4794000"
  },
  {
    "text": "notion of arithmetization is going to be this is this was you know",
    "start": "4794000",
    "end": "4799440"
  },
  {
    "text": "it's it's an important notion in complexity and so um we'll",
    "start": "4799440",
    "end": "4804560"
  },
  {
    "text": "we'll see it again coming up in another proof afterwards in about interactive proof systems",
    "start": "4804560",
    "end": "4810480"
  },
  {
    "text": "okay um so please ask questions so the output is the value of the one",
    "start": "4810480",
    "end": "4816320"
  },
  {
    "text": "output one state yes that was a question i got",
    "start": "4816320",
    "end": "4822320"
  },
  {
    "text": "other questions somebody's saying minus seven is not the xor of two and three",
    "start": "4822320",
    "end": "4829600"
  },
  {
    "text": "what is the xor of two and three so by the way i i should say we kind of ran a little short on time i'm not",
    "start": "4830639",
    "end": "4837360"
  },
  {
    "text": "saying that we discovered some fundamental new truth about xor here",
    "start": "4837360",
    "end": "4842480"
  },
  {
    "text": "um because that would be bizarre it really depends on the arbitrary decision that we made to say true is one",
    "start": "4842480",
    "end": "4850400"
  },
  {
    "text": "and false is zero we could have come up with a different representation for true and false and",
    "start": "4850400",
    "end": "4855600"
  },
  {
    "text": "then you would get a different value for xor coming out of that you know from the arithmetization that i just",
    "start": "4855600",
    "end": "4860880"
  },
  {
    "text": "described um but uh for this particular way of representing true and false that's how",
    "start": "4860880",
    "end": "4867679"
  },
  {
    "text": "xor and this particular branching program that's how uh what how xor evaluates",
    "start": "4867679",
    "end": "4873840"
  },
  {
    "text": "the the remainder of the proof so somebody's asking which is it which is true the fundamental theorem of algebra",
    "start": "4873840",
    "end": "4879600"
  },
  {
    "text": "which talks about polynomials and the number of roots that you can have that's going to be that's going to be critical",
    "start": "4879600",
    "end": "4885360"
  },
  {
    "text": "um uh so the that is the fundamental theorem of algebra that's where we're going good good question",
    "start": "4885360",
    "end": "4892239"
  },
  {
    "text": "well you know so the somebody's complaining that you know we're not taking the",
    "start": "4892239",
    "end": "4897280"
  },
  {
    "text": "digit binary representation of two and three and taking the",
    "start": "4897280",
    "end": "4902560"
  },
  {
    "text": "bit by bit um xor well that's i'm not you know",
    "start": "4902560",
    "end": "4908320"
  },
  {
    "text": "binary representation is not a part of this we're thinking of these as two elements of a field",
    "start": "4908320",
    "end": "4914159"
  },
  {
    "text": "um of a finite field which we'll talk about later represent the binary representation is",
    "start": "4914159",
    "end": "4920159"
  },
  {
    "text": "isn't is not is not entering into this discussion um",
    "start": "4920159",
    "end": "4926560"
  },
  {
    "text": "so talk about why just doing the sum is enough um",
    "start": "4926560",
    "end": "4933520"
  },
  {
    "text": "i think that was so why is it i mean here it is why is just doing the sum when i'm",
    "start": "4935920",
    "end": "4943360"
  },
  {
    "text": "looking at the um the how to describe the value of this node",
    "start": "4943360",
    "end": "4948960"
  },
  {
    "text": "based upon the values of all the incoming nodes and remember the point of the the",
    "start": "4948960",
    "end": "4954000"
  },
  {
    "text": "starting point of this is that we have to faithfully represent the boolean logic with the arithmetic",
    "start": "4954000",
    "end": "4961920"
  },
  {
    "text": "and then we're going to use that and extend it to non-boolean values but as a starting point we have to faithfully",
    "start": "4961920",
    "end": "4967199"
  },
  {
    "text": "represent the boolean values now the boolean values on the incoming edges at most one of",
    "start": "4967199",
    "end": "4973520"
  },
  {
    "text": "them can be can be a one because the ones correspond to the",
    "start": "4973520",
    "end": "4980320"
  },
  {
    "text": "edges of the execution path and you can't make an execution path",
    "start": "4980320",
    "end": "4986719"
  },
  {
    "text": "um that's going to have two branches that's going to go through a node twice",
    "start": "4986719",
    "end": "4992320"
  },
  {
    "text": "because then you have a loop and we don't have there's no cycles allowed",
    "start": "4992320",
    "end": "4997360"
  },
  {
    "text": "okay so i think where it's at four um i want to say farewell to all you all",
    "start": "4997360",
    "end": "5003679"
  },
  {
    "text": "have a great uh week and i'll see you when you get back",
    "start": "5003679",
    "end": "5010440"
  },
  {
    "text": "you",
    "start": "5020560",
    "end": "5022639"
  }
]