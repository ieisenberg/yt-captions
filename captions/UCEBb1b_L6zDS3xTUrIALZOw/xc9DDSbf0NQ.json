[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6950"
  },
  {
    "text": "offer high quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "6950",
    "end": "13500"
  },
  {
    "text": "hundreds of MIT courses visit\nMIT OpenCourseWare at ocw.mit.edu.",
    "start": "13500",
    "end": "18680"
  },
  {
    "text": " PROFESSOR: So today we're\ngoing to talk about bit hacking, which is a topic that\nhas a long, long history in",
    "start": "18680",
    "end": "32419"
  },
  {
    "text": "computer science. We'll only cover on a few\nof the techniques.",
    "start": "32420",
    "end": "40985"
  },
  {
    "text": " So let's just get going.",
    "start": "40985",
    "end": "46420"
  },
  {
    "text": "So I want to swap\ntwo integers.",
    "start": "46420",
    "end": "51920"
  },
  {
    "text": "So I think most of you would\nknow how to write a program to swap two integers. And it would look something\nlike this.",
    "start": "51920",
    "end": "57540"
  },
  {
    "text": "And mostly this is pseudocode. I'm not going to be doing\ndeclarations of types and",
    "start": "57540",
    "end": "63250"
  },
  {
    "text": "writing full code, in order to\nmake sure things get on slides and so forth. So what do you do? You assign a temporary\nto the value of x.",
    "start": "63250",
    "end": "72890"
  },
  {
    "text": "You then let x take\nthe value of y. And then you let y take the\nvalue of the temporary.",
    "start": "72890",
    "end": "80479"
  },
  {
    "text": "What could be simpler? Well how about doing it\nwithout a temporary? ",
    "start": "80480",
    "end": "87770"
  },
  {
    "text": "So how do you swap two numbers\nwithout a temporary?",
    "start": "87770",
    "end": "94204"
  },
  {
    "text": " So here's one way. ",
    "start": "94205",
    "end": "109980"
  },
  {
    "text": "So what's going on there? So the carrot is an XOR,\nexclusive or, OK?",
    "start": "109980",
    "end": "118790"
  },
  {
    "text": "So here's what's going on. So let's do an example first. So I have x and y.",
    "start": "118790",
    "end": "125530"
  },
  {
    "text": "I then let x be the\nXOR of x and y.",
    "start": "125530",
    "end": "131990"
  },
  {
    "text": "So, as you see, that first bit\nis the XOR of one and zero.",
    "start": "131990",
    "end": "137300"
  },
  {
    "text": "The second bit is the XOR of\nzero and zero, which is zero. The third bit is the\nXOR of one and one.",
    "start": "137300",
    "end": "143220"
  },
  {
    "text": "That's zero. And so forth throughout\nthe bits. ",
    "start": "143220",
    "end": "149630"
  },
  {
    "text": "So then I let y be the\nXOR of x and y.",
    "start": "149630",
    "end": "157970"
  },
  {
    "text": "And then, finally, I let x be\nthe XOR of x and y again.",
    "start": "157970",
    "end": "163400"
  },
  {
    "text": "And now, if you notice,\nthat number is the same as that number. And that number is the\nsame as that number.",
    "start": "163400",
    "end": "169254"
  },
  {
    "text": " Magic.",
    "start": "169255",
    "end": "174950"
  },
  {
    "text": "We're going to see a lot of\nmagic today actually. OK? We're going to see a lot of\nmagic today, no temporary.",
    "start": "174950",
    "end": "181940"
  },
  {
    "text": "Why does this work? So the reason this works as a\ngreat property of XOR is that it's its own inverse.",
    "start": "181940",
    "end": "190560"
  },
  {
    "text": "So if you take x exclusive or\ny, and you exclusive or that",
    "start": "190560",
    "end": "198060"
  },
  {
    "text": "with y, you get x. If you were to exclusive or that\nwith x you would get y.",
    "start": "198060",
    "end": "205930"
  },
  {
    "text": "So that first step is basically\nputting in here the",
    "start": "205930",
    "end": "212310"
  },
  {
    "text": "XOR of x and y so that when you\nend up on the next step",
    "start": "212310",
    "end": "217630"
  },
  {
    "text": "computing the XOR of y\nand this, you get x.",
    "start": "217630",
    "end": "224780"
  },
  {
    "text": "So now you've got x here. And you've now got the original\nx XORed with y here.",
    "start": "224780",
    "end": "232520"
  },
  {
    "text": "So to get back the value of\ny you just XOR out the x. So it swaps them.",
    "start": "232520",
    "end": "240060"
  },
  {
    "text": "Whose brain hurts? ",
    "start": "240060",
    "end": "246730"
  },
  {
    "text": "You can study these later on. But a pretty neat trick,\npretty neat trick.",
    "start": "246730",
    "end": "254290"
  },
  {
    "text": "Does it perform well? Turns out not really. And the other way is actually\na better way of doing it,",
    "start": "254290",
    "end": "261440"
  },
  {
    "text": "generally, with most compilers\nand architectures. And the reason is because the\nother way of doing it you can",
    "start": "261440",
    "end": "267819"
  },
  {
    "text": "actually, essentially, pull two\nthings out of memory, one into a temporary one--",
    "start": "267820",
    "end": "273539"
  },
  {
    "text": "and then stick them\nback like this. That's what the compiler\nends up doing. Where as this one, it has\nto wait for each step.",
    "start": "273540",
    "end": "281610"
  },
  {
    "text": "And so you don't get to exploit\ninstruction-level parallelism. Remember from last time\ninstruction-level parallelism",
    "start": "281610",
    "end": "287850"
  },
  {
    "text": "is the fact that a processor\ncan issue more than one instruction at a given step.",
    "start": "287850",
    "end": "293730"
  },
  {
    "text": "And here, this sequence of\noperations, each step has to wait until the previous\none is computed",
    "start": "293730",
    "end": "300090"
  },
  {
    "text": "before it can execute. So you get no instruction\nparallelism in this. So it's not particularly\nhigh performing.",
    "start": "300090",
    "end": "306759"
  },
  {
    "text": "But there are other places\nwhere we'll use this kind of property. But it's a neat bit hack,\nswap two things",
    "start": "306760",
    "end": "313720"
  },
  {
    "text": "without using a temporary.  Now here's a real bit hack.",
    "start": "313720",
    "end": "319440"
  },
  {
    "text": "And a real useful one. Finding the minimum of two\nintegers, x and y.",
    "start": "319440",
    "end": "325730"
  },
  {
    "text": "Gee whiz, let me just call a\nsub routine or something.",
    "start": "325730",
    "end": "331440"
  },
  {
    "text": "So you might be tempted to write\nsomething like this; if x is less than y then\nthe result is x.",
    "start": "331440",
    "end": "339870"
  },
  {
    "text": "Otherwise, the result is y. Seems pretty straightforward. Or if you know a little bit more\nc, you can write it with",
    "start": "339870",
    "end": "349740"
  },
  {
    "text": "this sort of cryptic if x is\nless than y, then x else y.",
    "start": "349740",
    "end": "355610"
  },
  {
    "text": "So those are two equivalent\nc ways of doing things. ",
    "start": "355610",
    "end": "362699"
  },
  {
    "text": "So what's wrong with that?  Well nothing if you don't\nmind slow code.",
    "start": "362700",
    "end": "369840"
  },
  {
    "text": "In fact, for something like\nthis the compiler actually will optimize it to\ndeal with it. But let me just point\nout a couple things.",
    "start": "369840",
    "end": "376980"
  },
  {
    "text": "First of all, the processor\nhas within it a branch",
    "start": "376980",
    "end": "384300"
  },
  {
    "text": "prediction unit. Whenever it comes to a branch\nit guesses which way the",
    "start": "384300",
    "end": "390830"
  },
  {
    "text": "branch is going to go, and\nproceeds to speculatively execute along that path.",
    "start": "390830",
    "end": "396520"
  },
  {
    "text": "If it turns out to be wrong it\nsays, whoa, hold your horses, got to go that way.",
    "start": "396520",
    "end": "403570"
  },
  {
    "text": "To do that, it empties the\nprocessor pipeline. And that takes, on the\nmachines we're using, around 16 cycles.",
    "start": "403570",
    "end": "409855"
  },
  {
    "text": " So you don't want to have\nbranches that are",
    "start": "409855",
    "end": "416520"
  },
  {
    "text": "mis-predicted. And, in particular, what\nyou want to look for in conditional instructions, is\nwhether they're predictable.",
    "start": "416520",
    "end": "424326"
  },
  {
    "text": " So something that's almost all\nthe time branching the same",
    "start": "424326",
    "end": "431130"
  },
  {
    "text": "way, that's a predictable\nbranch. The hardware is very smart\nabout figuring out how to",
    "start": "431130",
    "end": "439100"
  },
  {
    "text": "predict that, and will make\nthe right prediction. And you won't pay any\nperformance penalty.",
    "start": "439100",
    "end": "445370"
  },
  {
    "text": "But if you have something where\nyou don't know which way it goes, so in a code like this,\nthe architecture isn't",
    "start": "445370",
    "end": "454100"
  },
  {
    "text": "going to know. If you just throw at it various\npairs of x and y it's",
    "start": "454100",
    "end": "459479"
  },
  {
    "text": "a 50/50 guess as to whether\nit guesses right. So half the time it's going to\npredict the wrong thing.",
    "start": "459480",
    "end": "466280"
  },
  {
    "text": " So the compiler might\nbe smart enough.",
    "start": "466280",
    "end": "473280"
  },
  {
    "text": "But maybe not. But you can be sure. And here's a way\nof being sure.",
    "start": "473280",
    "end": "479150"
  },
  {
    "text": "You write this code. ",
    "start": "479150",
    "end": "484560"
  },
  {
    "text": "What is going on there? ",
    "start": "484560",
    "end": "490350"
  },
  {
    "text": "So here we go. We're taking x less than y,\nand taking a minus sign.",
    "start": "490350",
    "end": "498060"
  },
  {
    "text": "Yikes, what's that do? Well c represents the Boolean's\ntrue and false with the integers one and\nzero, respectively.",
    "start": "498060",
    "end": "505680"
  },
  {
    "text": "So if you execute the operator\nx less than y, as opposed to",
    "start": "505680",
    "end": "510970"
  },
  {
    "text": "doing a conditional based on x\nbit less than y, it returns to either a zero or a one,\ndepending upon whether it was",
    "start": "510970",
    "end": "518440"
  },
  {
    "text": "successful. So when you take the negation\nof that, this is",
    "start": "518440",
    "end": "525920"
  },
  {
    "text": "either zero or one. It's either going to\nbe zero or minus 1.",
    "start": "525920",
    "end": "530950"
  },
  {
    "text": "And what is minus 1 in two's\ncomplement arithmetic?",
    "start": "530950",
    "end": "536110"
  },
  {
    "text": "It's a word filled\nall with ones. So you either get a word all\nfilled with zeros or you get a",
    "start": "536110",
    "end": "545459"
  },
  {
    "text": "word all filled with ones. So if x is less than y you get\na word all filled with one's.",
    "start": "545460",
    "end": "551410"
  },
  {
    "text": "So then what are you doing? You're doing x XOR\ny, and you're",
    "start": "551410",
    "end": "556440"
  },
  {
    "text": "ending it with all ones. Well that's a noop to end\nit with all ones.",
    "start": "556440",
    "end": "562780"
  },
  {
    "text": "To mask something-- if I do an\nand of anything with one, I get whatever the thing is. So this expression ends up\nevaluating to just x XOR y.",
    "start": "562780",
    "end": "573490"
  },
  {
    "text": "Great, then what? I take y here and I XOR it, I\nget back x because of that",
    "start": "573490",
    "end": "580330"
  },
  {
    "text": "inverse property of XOR. So if x is less than y, then\nr gets the value of x.",
    "start": "580330",
    "end": "587880"
  },
  {
    "start": "587880",
    "end": "594640"
  },
  {
    "text": "If x is greater or equal to\ny then this expression evaluates to zero.",
    "start": "594640",
    "end": "599740"
  },
  {
    "text": "And a word of zeroes ended with\nx or y gives you a word of zeroes because zero is\nan annihilator for and.",
    "start": "599740",
    "end": "607754"
  },
  {
    "text": " Wherever you and with zero, it\ndoesn't matter what it is.",
    "start": "607755",
    "end": "612930"
  },
  {
    "text": "You get zero. So therefore this just becomes\nr equals y because",
    "start": "612930",
    "end": "630660"
  },
  {
    "text": "y XOR zero is y.",
    "start": "630660",
    "end": "637009"
  },
  {
    "text": "So pretty clever, is\nthis really better? Seems like an awful\nlot of operations.",
    "start": "637010",
    "end": "643150"
  },
  {
    "text": "Well the answer is yes it is,\nbecause all of this goes on within the processing unit\nrather than with anything",
    "start": "643150",
    "end": "652190"
  },
  {
    "text": "having to do with memory. It gets the values for x and y\nto begin with and then it's",
    "start": "652190",
    "end": "657740"
  },
  {
    "text": "all instructions within\nthe processing unit. Those typically take\none cycle. And if there's any parallelism\nin it the parallelism will be",
    "start": "657740",
    "end": "668310"
  },
  {
    "text": "able to execute even more than\none operation per cycle. In fact, the machines we're\nusing have are six issue.",
    "start": "668310",
    "end": "676622"
  },
  {
    "text": "They can run six operation\nsimultaneously, each taking a cycle.",
    "start": "676622",
    "end": "684420"
  },
  {
    "text": "So the difference between that\nand going out to memory is really quite considerable.",
    "start": "684420",
    "end": "691010"
  },
  {
    "text": "So everybody follow that? Pretty cute trick, how\nto make it go fast. Yes, question?",
    "start": "691010",
    "end": "697060"
  },
  {
    "text": "AUDIENCE: Doesn't the expression\nthat's tested, doesn't it have to be\n[? weighed for ?] the inner",
    "start": "697060",
    "end": "703920"
  },
  {
    "text": "expression before you take-- PROFESSOR: There's no--\nthis is a comparison. This is operated like a--",
    "start": "703920",
    "end": "712199"
  },
  {
    "text": "so there's no compare\ninstruction there. It's a CPU operation.",
    "start": "712200",
    "end": "721350"
  },
  {
    "text": "It's an arithmetic and logical\noperation of the CPU that it can do in one cycle,\nis to compare.",
    "start": "721350",
    "end": "727690"
  },
  {
    "text": "The normal thing that you're\ntrying to do if you have an if is you're trying to change\nthe program counter.",
    "start": "727690",
    "end": "733680"
  },
  {
    "text": "And that's what's costly. Not the actual doing the test of\nthe branch, test of whether",
    "start": "733680",
    "end": "742380"
  },
  {
    "text": "x is less y. OK? AUDIENCE: Would you have to wait\nfor that to finish before",
    "start": "742380",
    "end": "747617"
  },
  {
    "text": "you can do the negation? PROFESSOR: Yes you do. So that's one cycle, two cycles,\nwe can add it up here,",
    "start": "747617",
    "end": "755190"
  },
  {
    "text": "three cycles. This can be going\non in parallel. So it's really only\ntwo cycles total.",
    "start": "755190",
    "end": "761990"
  },
  {
    "text": "Three cycles, four cycles, so in\nfour cycles you can get the",
    "start": "761990",
    "end": "767959"
  },
  {
    "text": "minimum done. The L1 cache in the architecture\nwe're using costs",
    "start": "767960",
    "end": "775980"
  },
  {
    "text": "you four cycles to fetch\nsomething if you get a cache hit in the L1 cache.",
    "start": "775980",
    "end": "782350"
  },
  {
    "text": "That's the cheapest memory\noperation you can do, is four cycles. This computed the whole minimum\nin four cycles.",
    "start": "782350",
    "end": "787690"
  },
  {
    "start": "787690",
    "end": "795520"
  },
  {
    "text": "Here's another one,\nmodular addition. So sometimes you know something\nthat the compiler",
    "start": "795520",
    "end": "803580"
  },
  {
    "text": "doesn't know. Like suppose that you know that\nx is between zero and",
    "start": "803580",
    "end": "808709"
  },
  {
    "text": "some value n, and y is between\nzero and some value n, and you",
    "start": "808710",
    "end": "814330"
  },
  {
    "text": "want to compute their sum. So what is that the sum is going\nto be less than what?",
    "start": "814330",
    "end": "821820"
  },
  {
    "text": "2n.  So normally a modular operation\nis very expensive",
    "start": "821820",
    "end": "830180"
  },
  {
    "text": "because it involves a divide. Now multiply is normally more\nexpensive than an ordinary ALU",
    "start": "830180",
    "end": "836240"
  },
  {
    "text": "operation that's just a bitwise\noperation, like addition, or XORing bitwise\nXORs, or comparison,",
    "start": "836240",
    "end": "843480"
  },
  {
    "text": "or what have you. Those are very cheap one\ncycle operations. Multiply is usually a many\ncycle operation.",
    "start": "843480",
    "end": "850700"
  },
  {
    "text": "Divide is often implemented by\ndoing repeated multiplies using any of a variety of\ntechniques, including Newton",
    "start": "850700",
    "end": "858060"
  },
  {
    "text": "techniques. Sometimes there is a divider,\nor a divide step.",
    "start": "858060",
    "end": "863240"
  },
  {
    "text": "But divide is, generally, in any\ncase more expensive, even though it's doing operations\nall within the processor.",
    "start": "863240",
    "end": "870510"
  },
  {
    "text": "So if you actually compute mod\nusing your percent thing.",
    "start": "870510",
    "end": "877910"
  },
  {
    "text": "This actually can be quite\nexpensive unless you're dividing by a power of two.",
    "start": "877910",
    "end": "884110"
  },
  {
    "text": "If you mod a power of two\nthat's easy because the processor, if knows it's a power\nof two, if the compiler",
    "start": "884110",
    "end": "889550"
  },
  {
    "text": "knows it's a power of two,\nit'll just do a masking operation on the low order bits\nto give you whatever the",
    "start": "889550",
    "end": "899080"
  },
  {
    "text": "remainder is, mod2 to the n. But if you're not in that\nsituation, n may not be a",
    "start": "899080",
    "end": "905339"
  },
  {
    "text": "power of two, you still want\nto do something modn, there still are some tricks you can\nplay but the compiler won't-",
    "start": "905340",
    "end": "911980"
  },
  {
    "text": "this is one the compiler\ngenerally won't play for you because the compiler won't\nknow that these are",
    "start": "911980",
    "end": "917410"
  },
  {
    "text": "preconditions in your code. By the way, one of the most\ncommon things is just doing x",
    "start": "917410",
    "end": "922589"
  },
  {
    "text": "plus 1 modn. Very, very common thing to be\ndoing, x plus 1 modn, where",
    "start": "922590",
    "end": "929970"
  },
  {
    "text": "you're wrapping around\nin some index space. ",
    "start": "929970",
    "end": "936910"
  },
  {
    "text": "Here's another way\nyou could do it. So divide is expensive. Here you could just say\nz equals x plus y.",
    "start": "936910",
    "end": "943410"
  },
  {
    "text": "And then if z is less than n,\ngive z otherwise z minus n. ",
    "start": "943410",
    "end": "950620"
  },
  {
    "text": "The problem with this\nis that it's got an unpredictable branch. To execute this code, I could\nhave written it out with an if",
    "start": "950620",
    "end": "956510"
  },
  {
    "text": "statement, it's got to change\nthe program counter to execute either this or this.",
    "start": "956510",
    "end": "963205"
  },
  {
    "text": " so not very fast because you\nhave an unpredictable branch.",
    "start": "963205",
    "end": "969680"
  },
  {
    "text": "And we already talked about that\nhas to empty the pipeline if it's wrong in the guess.",
    "start": "969680",
    "end": "975529"
  },
  {
    "text": "So here's a way of doing\nit which doesn't have an explicit branch.",
    "start": "975530",
    "end": "984060"
  },
  {
    "text": "So we compute x plus y. And now what we do is we look\nat whether z is greater than",
    "start": "984060",
    "end": "990360"
  },
  {
    "text": "or equal to n.  And if it is, we're basically\ngoing to take the negation.",
    "start": "990360",
    "end": "997899"
  },
  {
    "text": "So that if it's is greater or\nequal to n, the negation here is all ones, once again,\nis minus 1.",
    "start": "997900",
    "end": "1004589"
  },
  {
    "text": "And so this becomes n and-ed\nwith minus one.",
    "start": "1004590",
    "end": "1010260"
  },
  {
    "text": "That gives me n. And so then I'll\ntake z minus n. That's what I want",
    "start": "1010260",
    "end": "1016250"
  },
  {
    "text": "However, if this is z is less\nthan n, then this will",
    "start": "1016250",
    "end": "1022730"
  },
  {
    "text": "evaluate to zero. Minus zero is zero. And n and zero is zero.",
    "start": "1022730",
    "end": "1028319"
  },
  {
    "text": "And so I'll end up just\ngetting the x plus y. So it's basically the same\ntrick with a couple of",
    "start": "1028319",
    "end": "1034650"
  },
  {
    "text": "twiddles on the minimum that we\nsaw on the previous foil.",
    "start": "1034650",
    "end": "1042829"
  },
  {
    "text": " Who's having fun?",
    "start": "1042829",
    "end": "1048470"
  },
  {
    "text": " Good. As I said, we're going to\nsee lots of tricks,",
    "start": "1048470",
    "end": "1054800"
  },
  {
    "text": "magic tricks even. ",
    "start": "1054800",
    "end": "1061140"
  },
  {
    "text": "Round up to a power of two. This is a common thing that\nyou want to do here. This, for example, goes on in\nmemory allocators, which we'll",
    "start": "1061140",
    "end": "1068630"
  },
  {
    "text": "talk about later\nin the course. So in a memory allocator,\nsomebody asks for a hunk of",
    "start": "1068630",
    "end": "1073669"
  },
  {
    "text": "storage of size 19, most memory\nallocators want to give",
    "start": "1073670",
    "end": "1080020"
  },
  {
    "text": "out chunks that are powers of\ntwo for reasons we will discover later.",
    "start": "1080020",
    "end": "1085940"
  },
  {
    "text": "So you want to round up to the\nnext higher power of two.",
    "start": "1085940",
    "end": "1092100"
  },
  {
    "text": "So how do you do that? So here's an example.",
    "start": "1092100",
    "end": "1097570"
  },
  {
    "text": "So what I do is I decrement n,\nand then I update n or-ing it",
    "start": "1097570",
    "end": "1105610"
  },
  {
    "text": "with the left shift of n, and\nthen or-ing that with- sorry, the right shift of n by one.",
    "start": "1105610",
    "end": "1111870"
  },
  {
    "text": "Then the right shift of n by\ntwo, et cetera, et cetera. So here's an example. ",
    "start": "1111870",
    "end": "1119810"
  },
  {
    "text": "So here's my original number. And what I want is to round it\nup to the next power of two.",
    "start": "1119810",
    "end": "1125120"
  },
  {
    "text": "This is what I'm going to\nend up with in the end. See I've got the next\nhigher power of two? Just one bit is on if I've\nrounded up to the next higher",
    "start": "1125120",
    "end": "1131430"
  },
  {
    "text": "power of two. So what do I do? I basically decrement and then\nI take this word and I shift",
    "start": "1131430",
    "end": "1143790"
  },
  {
    "text": "it by one to the right\nand or it in. ",
    "start": "1143790",
    "end": "1153570"
  },
  {
    "text": "And then I shift it by\ntwo and or it in. And then I shift it by\nfour and or it in.",
    "start": "1153570",
    "end": "1161159"
  },
  {
    "text": "And then, in fact, I shift\nit by eight and or it in. And I didn't do that. And since this isn't a 64-bit\nword I skipped the last two",
    "start": "1161160",
    "end": "1166590"
  },
  {
    "text": "instructions. So what's going on when I'm\nshifting and or-ing it in, by one, by two, by four.",
    "start": "1166590",
    "end": "1174090"
  },
  {
    "text": "What's happening? Yeah? AUDIENCE: [INAUDIBLE] this way\nthere's no number of ones",
    "start": "1174090",
    "end": "1181344"
  },
  {
    "text": "starting from the one. PROFESSOR: Yeah basically, from\nthe most significant bit, if you look at what's happening\nwith the most",
    "start": "1181344",
    "end": "1186640"
  },
  {
    "text": "significant bit, you're\nshifting it by one. Then you're shifting\nit by two.",
    "start": "1186640",
    "end": "1192320"
  },
  {
    "text": "You're flooding the low\norder bits with ones. And because it's an or, as soon\nas something gets set to",
    "start": "1192320",
    "end": "1198700"
  },
  {
    "text": "one, it stays a one. So it doesn't matter what's\nactually happening in the low order bits. The only bit that we care\nabout is this bit.",
    "start": "1198700",
    "end": "1205070"
  },
  {
    "text": "And it basically floods all of\nthe other bits with one. ",
    "start": "1205070",
    "end": "1212200"
  },
  {
    "text": "And then, once I've flooded them\nall with one I increment. And that gives me a carry out to\nthis position and gives me",
    "start": "1212200",
    "end": "1221230"
  },
  {
    "text": "the next higher power. So why did I decrement here,\nand then increment there?",
    "start": "1221230",
    "end": "1227760"
  },
  {
    "text": "What's the decrement for? Yeah? AUDIENCE: So that you can flood\nwith one because you",
    "start": "1227760",
    "end": "1234950"
  },
  {
    "text": "want to get yourself back. So you want to the\nadd the one-- PROFESSOR: But why did\nI decrement first?",
    "start": "1234950",
    "end": "1241703"
  },
  {
    "text": "AUDIENCE: If you were not to\ndecrement, it would just flood everything with ones.",
    "start": "1241703",
    "end": "1247340"
  },
  {
    "text": "PROFESSOR: Well here, if I\ndidn't decrement right here, I would have gotten\nthe same result.",
    "start": "1247340",
    "end": "1252520"
  },
  {
    "text": " If you already have\na power of two.",
    "start": "1252520",
    "end": "1258809"
  },
  {
    "text": "If I already have a power of two\nand I flood the low order bits, then I increment,\nI'll get the next",
    "start": "1258810",
    "end": "1265790"
  },
  {
    "text": "higher power of two. So by subtracting one I make\nsure that I'm handling that",
    "start": "1265790",
    "end": "1272490"
  },
  {
    "text": "base case when n is\na power of two. Yeah? AUDIENCE: Does the [INAUDIBLE]\noperate [INAUDIBLE]",
    "start": "1272490",
    "end": "1282252"
  },
  {
    "text": "PROFESSOR: It actually, the\ncompiler is not going to care in this case. But it does make sure that it\ndoesn't bother to try to",
    "start": "1282252",
    "end": "1289030"
  },
  {
    "text": "return and keep around\nthe old value. But it's smart enough to\nnot worry about that.",
    "start": "1289030",
    "end": "1295130"
  },
  {
    "text": " Yeah, I mean, some people like\npost-fix decrementing, and",
    "start": "1295130",
    "end": "1302770"
  },
  {
    "text": "some people like pre-fix\ndecrementing and it doesn't matter in most cases.",
    "start": "1302770",
    "end": "1309930"
  },
  {
    "text": "But sometimes doing it after-- there are situations where doing\nit post-decrementing",
    "start": "1309930",
    "end": "1315530"
  },
  {
    "text": "costs you a cycle.  So everybody got\nthe idea here?",
    "start": "1315530",
    "end": "1321310"
  },
  {
    "text": "So basically round up\nto a next power two. ",
    "start": "1321310",
    "end": "1328380"
  },
  {
    "text": "How about computing a\nmask of the least significant one in a word? So I want to mask which is the\npower of two, the word that's",
    "start": "1328380",
    "end": "1336720"
  },
  {
    "text": "all zeros except for one in the\nleast significant one bit.",
    "start": "1336720",
    "end": "1342370"
  },
  {
    "text": "Any ideas how to do that? ",
    "start": "1342370",
    "end": "1356280"
  },
  {
    "text": "This is a classic trick. Everybody should know\nthis trick.",
    "start": "1356280",
    "end": "1361290"
  },
  {
    "text": "You take x and you and it with\nits two's complement. ",
    "start": "1361290",
    "end": "1368380"
  },
  {
    "text": "Take x and and it with it's\ntwo's complement. Why does that work? So here's x, some value here.",
    "start": "1368380",
    "end": "1374590"
  },
  {
    "text": "The two's complement is the\none's complement plus one.",
    "start": "1374590",
    "end": "1379870"
  },
  {
    "text": "Right? If you remember. So one's complement just means\nI compliment every bit. The two's complement\nis I compliment",
    "start": "1379870",
    "end": "1385570"
  },
  {
    "text": "every bit and add one. So when I compliment every bit\nand add one, basically I go",
    "start": "1385570",
    "end": "1392140"
  },
  {
    "text": "all the way to the least\nsignificant bit and then I get zeros after it. So right up to there I get--",
    "start": "1392140",
    "end": "1398980"
  },
  {
    "text": "it's one's complement and then\nit's basically- would have been 0, 1, 1, 1, 1, 1, plus 1.",
    "start": "1398980",
    "end": "1404940"
  },
  {
    "text": "The carrot pulls you\nback up to there. And so then when you and them\ntogether, oh look at that.",
    "start": "1404940",
    "end": "1411730"
  },
  {
    "text": "There's our least significant\nbit sitting there. ",
    "start": "1411730",
    "end": "1420370"
  },
  {
    "text": "Pretty good one? So so how do you find\nan index of the bit?",
    "start": "1420370",
    "end": "1426740"
  },
  {
    "start": "1426740",
    "end": "1432240"
  },
  {
    "text": "So by an index I mean\nthis is bit 01234.",
    "start": "1432240",
    "end": "1440975"
  },
  {
    "text": "Well it turns out these days\nmany machines have a special",
    "start": "1440975",
    "end": "1447280"
  },
  {
    "text": "instruction to do that. And so if you look around and\nyou find the right library that calls that instruction, you\ncan use that instruction",
    "start": "1447280",
    "end": "1455270"
  },
  {
    "text": "pretty cheaply. But there's still a lot of\nmachines, especially things like Mobile machines, et cetera,\nwhere they have a",
    "start": "1455270",
    "end": "1462820"
  },
  {
    "text": "depleted instruction set. Where they have no instruction\nto convert from a power of two",
    "start": "1462820",
    "end": "1469460"
  },
  {
    "text": "to essentially it's\nlog base two. So LG is the notation\nfor log base two.",
    "start": "1469460",
    "end": "1474760"
  },
  {
    "text": " So how do you go about\ndoing that? ",
    "start": "1474760",
    "end": "1482690"
  },
  {
    "text": "So what we're going to do is do\nsome magic to motivate the",
    "start": "1482690",
    "end": "1492200"
  },
  {
    "text": "solution to this. So one way to do it is to\nuse the ESP instruction.",
    "start": "1492200",
    "end": "1498980"
  },
  {
    "text": "Are people familiar with\nthe ESP instruction?  What's that?",
    "start": "1498980",
    "end": "1506580"
  },
  {
    "text": "The stack [? order? ?] No, no, that's BSP\non some things.",
    "start": "1506580",
    "end": "1512160"
  },
  {
    "text": "Or yeah, right, so in the\nextended instruction set--",
    "start": "1512160",
    "end": "1518560"
  },
  {
    "text": "yeah, OK. Yeah, so the ESP instruction;\nExtra Sensory Perception.",
    "start": "1518560",
    "end": "1524535"
  },
  {
    "text": " And we have today the tremendous\nmagician Tautology",
    "start": "1524535",
    "end": "1543970"
  },
  {
    "text": "who is going to demonstrate the\ntheory behind finding the",
    "start": "1543970",
    "end": "1550679"
  },
  {
    "text": "index of the bit. So please give a warm\nhand for Tautology.",
    "start": "1550680",
    "end": "1556200"
  },
  {
    "start": "1556200",
    "end": "1580590"
  },
  {
    "text": "TAUTOLOGY: How about now? Can everyone hear me? ",
    "start": "1580590",
    "end": "1586110"
  },
  {
    "text": "So, as my good friend Professor\nLeiserson has mentioned, I am the\namazing Tautology.",
    "start": "1586110",
    "end": "1592610"
  },
  {
    "text": "And today I am going to show\nyou an amazing card trick which will baffle your minds for\napproximately five minutes",
    "start": "1592610",
    "end": "1599550"
  },
  {
    "text": "until he shows you\nthe next slide.  All right, but to do this I will\nneed five volunteers from",
    "start": "1599550",
    "end": "1607452"
  },
  {
    "text": "the audience. PROFESSOR: Who can follow\ninstructions. [LAUGHTER]",
    "start": "1607452",
    "end": "1616040"
  },
  {
    "text": "So who would like to volunteer\nto participate in real magic? Here we go, one, two, three,\nfour, only four?",
    "start": "1616040",
    "end": "1628830"
  },
  {
    "text": " We need one more. So come on up and line up\nalong the front here.",
    "start": "1628830",
    "end": "1635310"
  },
  {
    "text": "We need one more, one\nmore volunteer. ",
    "start": "1635310",
    "end": "1640760"
  },
  {
    "text": "One more volunteer, you\nget extra points. Remember participation is\npart of your grade.",
    "start": "1640760",
    "end": "1648580"
  },
  {
    "text": "OK I'm going to cold call. ",
    "start": "1648580",
    "end": "1653710"
  },
  {
    "text": "Here we go. ",
    "start": "1653710",
    "end": "1660065"
  },
  {
    "text": "TAUTOLOGY: All right,\nexcellent. Please cut this deck.",
    "start": "1660066",
    "end": "1665630"
  },
  {
    "text": "PROFESSOR: First you gotta\nshow it's a random deck. TAUTOLOGY: All right, I will\nfirst show you that's it's a",
    "start": "1665630",
    "end": "1670920"
  },
  {
    "text": "random deck. ",
    "start": "1670920",
    "end": "1680540"
  },
  {
    "text": "PROFESSOR: It's only 32 cards. It's only 32 cards.",
    "start": "1680540",
    "end": "1686480"
  },
  {
    "text": "So he pulled out some\nof the other cards. But they're in a pretty\nrandom order there.",
    "start": "1686480",
    "end": "1692370"
  },
  {
    "text": "So we want to give everybody a\nchance to shuffle the deck here by doing a cut. ",
    "start": "1692370",
    "end": "1724240"
  },
  {
    "text": "Look at it, but don't show\nit to Tautology. ",
    "start": "1724240",
    "end": "1735860"
  },
  {
    "text": "Why don't you go around\nthe back so that the class can see the cards?",
    "start": "1735860",
    "end": "1741190"
  },
  {
    "start": "1741190",
    "end": "1747259"
  },
  {
    "text": "So hide your cards while\nhe runs around behind. And then turn them around so\nthat the class can see what",
    "start": "1747260",
    "end": "1754810"
  },
  {
    "text": "the cards are. TAUTOLOGY: All right, are you\nguys ready to turn around?",
    "start": "1754810",
    "end": "1760250"
  },
  {
    "text": "Cool, excellent. PROFESSOR: I'm not going\nto look at them either. There are no dupes.",
    "start": "1760250",
    "end": "1767010"
  },
  {
    "text": "This is all done by ESP. TAUTOLOGY: All right, now-",
    "start": "1767010",
    "end": "1772410"
  },
  {
    "text": "PROFESSOR: Why don't you\ncome over here where you can see the class? TAUTOLOGY: Hello everybody. I'm going to tell you what is\non those five cards, which I",
    "start": "1772410",
    "end": "1779420"
  },
  {
    "text": "have not seen. Behold I have not seen them. OK, are you guys ready?",
    "start": "1779420",
    "end": "1788230"
  },
  {
    "text": "PROFESSOR: Now you've got\nto think about it. You've got to think hard about\nwhat your card is. If you're not sure\nyou can check. But you've got to think real\nhard about what your card is.",
    "start": "1788230",
    "end": "1795790"
  },
  {
    "text": "TAUTOLOGY: Okay. ",
    "start": "1795790",
    "end": "1801864"
  },
  {
    "text": "PROFESSOR: Are you guys\nthinking hard? ",
    "start": "1801864",
    "end": "1809289"
  },
  {
    "text": "I think you need some\ntechnological assistance. TAUTOLOGY: I could use some\ntechnological assistance.",
    "start": "1809290",
    "end": "1814595"
  },
  {
    "start": "1814595",
    "end": "1819640"
  },
  {
    "text": "PROFESSOR: There we go. ",
    "start": "1819640",
    "end": "1826610"
  },
  {
    "text": "This is our brain amplifier. It amplifies the brain waves\ncoming from you.",
    "start": "1826610",
    "end": "1834420"
  },
  {
    "text": "OK, give it a go. TAUTOLOGY: Hang on,\nis this thing on? There we go. Now it's on.",
    "start": "1834420",
    "end": "1840110"
  },
  {
    "text": "OK, here I go. ",
    "start": "1840110",
    "end": "1848830"
  },
  {
    "text": "All right guys I'm having\nkind of an off day. So I'm going to need a\nlittle bit of help.",
    "start": "1848830",
    "end": "1856300"
  },
  {
    "text": "Can you guys just raise\nyour hand if you're holding a red card? ",
    "start": "1856300",
    "end": "1867312"
  },
  {
    "text": "So that's a red? PROFESSOR: Red, red,\nblack, red. ",
    "start": "1867312",
    "end": "1873160"
  },
  {
    "text": "They did it right, right? ",
    "start": "1873160",
    "end": "1879355"
  },
  {
    "text": "TAUTOLOGY: Now let me\ngive this a shot. So red, black, red, red, red.",
    "start": "1879355",
    "end": "1885942"
  },
  {
    "text": "PROFESSOR: No, red, red - yes\nOK you do it your way.",
    "start": "1885942",
    "end": "1891320"
  },
  {
    "start": "1891320",
    "end": "1896850"
  },
  {
    "text": "TAUTOLOGY: Now, now\nI might be wrong. But I think- am I seeing a\ndiamond with a seven on it?",
    "start": "1896850",
    "end": "1908470"
  },
  {
    "text": "Is that what I'm seeing? PROFESSOR: Oh!",
    "start": "1908470",
    "end": "1913530"
  },
  {
    "text": "How impressive is that? TAUTOLOGY: OK, one\ndown, four to go.",
    "start": "1913530",
    "end": "1918764"
  },
  {
    "text": " What else am I seeing?",
    "start": "1918764",
    "end": "1925280"
  },
  {
    "text": "I believe I am seeing. You're going to have to think\nabout this card pretty hard.",
    "start": "1925280",
    "end": "1930890"
  },
  {
    "text": "I'm having an off day. So I think I'm seeing\na spade, with a six.",
    "start": "1930890",
    "end": "1938825"
  },
  {
    "start": "1938825",
    "end": "1946620"
  },
  {
    "text": "Thank you for your honesty. Thank you. It does mean a lot to me.",
    "start": "1946620",
    "end": "1952720"
  },
  {
    "text": "All right, so I'm seeing a-\nnow what am I seeing now?",
    "start": "1952720",
    "end": "1964039"
  },
  {
    "text": "What could this be? It's some kind of a heart.",
    "start": "1964040",
    "end": "1969860"
  },
  {
    "text": " I think, just maybe, it\nhas a value of five.",
    "start": "1969860",
    "end": "1978330"
  },
  {
    "text": " PROFESSOR: Oh!",
    "start": "1978330",
    "end": "1983550"
  },
  {
    "text": "Three in a row! I don't think he's doing\nthis at random. There must be ESP\nat work here.",
    "start": "1983550",
    "end": "1989585"
  },
  {
    "text": "TAUTOLOGY: Clearly. It's all the hat to be honest. It's all the technology, just\nthe latest technology.",
    "start": "1989585",
    "end": "1996460"
  },
  {
    "text": "All right, so- PROFESSOR: It gets\nharder as we go. TAUTOLOGY: It does get\nharder as we go.",
    "start": "1996460",
    "end": "2004440"
  },
  {
    "text": "But, what is this? do I- I think- no it can't\nbe- can it be?",
    "start": "2004440",
    "end": "2014240"
  },
  {
    "text": "The three of hearts? It's the three of hearts! My old nemesis the\nthree of hearts.",
    "start": "2014240",
    "end": "2022800"
  },
  {
    "text": "OK just one more card. [LAUGHTER] Did you just swap cards?",
    "start": "2022800",
    "end": "2029084"
  },
  {
    "text": "I think I just watched\nyou swap you cards. Well I'm just going\nfor in the set- PROFESSOR: And they did it\nwithout a temporary notice.",
    "start": "2029084",
    "end": "2035310"
  },
  {
    "text": " They must have xor-ed them\ntogether or something.",
    "start": "2035310",
    "end": "2041840"
  },
  {
    "text": " TAUTOLOGY: So the last card,\nwhich may or may not be in the",
    "start": "2041840",
    "end": "2049480"
  },
  {
    "text": "last person's hands. Let me see if I can see it. ",
    "start": "2049480",
    "end": "2055983"
  },
  {
    "text": "What could it be?  What could it be?",
    "start": "2055984",
    "end": "2061717"
  },
  {
    "text": " No, no!",
    "start": "2061717",
    "end": "2069540"
  },
  {
    "text": "No, anything, not\nthe- not that! Not the 6 of diamonds!",
    "start": "2069540",
    "end": "2075242"
  },
  {
    "text": " PROFESSOR: All right,\nfive out of five!",
    "start": "2075243",
    "end": "2083580"
  },
  {
    "text": "Thank you, thank you. OK guys go back to your seats.",
    "start": "2083580",
    "end": "2088830"
  },
  {
    "text": " So that was a pretty\neasy trick, right?",
    "start": "2088830",
    "end": "2094524"
  },
  {
    "text": "TAUTOLOGY: Yeah, pretty easy. PROFESSOR: So how\ndoes it work? ",
    "start": "2094525",
    "end": "2101980"
  },
  {
    "text": "What's the basic\nidea behind it? ",
    "start": "2101980",
    "end": "2110589"
  },
  {
    "text": "What's the basic\nidea behind it? So key thing is how many bits\nof information did he get?",
    "start": "2110590",
    "end": "2117780"
  },
  {
    "text": "Five bits of information. And there were how many\ncards in the deck?",
    "start": "2117780",
    "end": "2123980"
  },
  {
    "text": "Thirty-two. So the pattern of the five bits,\nof which cards were read",
    "start": "2123980",
    "end": "2134359"
  },
  {
    "text": "let him know where in the cyclic\nsequence of cards he",
    "start": "2134360",
    "end": "2139580"
  },
  {
    "text": "was, right? Because the cards really\nweren't random. They just looked random. ",
    "start": "2139580",
    "end": "2146099"
  },
  {
    "text": "And so five bits is enough. But that means that every the\nsequence of five cards in that",
    "start": "2146100",
    "end": "2153540"
  },
  {
    "text": "deck, as you rotate it\naround, has to have a different bit pattern. ",
    "start": "2153540",
    "end": "2161790"
  },
  {
    "text": "So does anybody know a name\nfor that property? ",
    "start": "2161790",
    "end": "2168119"
  },
  {
    "text": "A circular sequence that\nhas that property? ",
    "start": "2168120",
    "end": "2174150"
  },
  {
    "text": "The property is that if\nyou- well, let's see.",
    "start": "2174150",
    "end": "2180369"
  },
  {
    "text": "Maybe I have it up here. ",
    "start": "2180370",
    "end": "2185560"
  },
  {
    "text": "So here's our magic code,\nwhich is going to",
    "start": "2185560",
    "end": "2192360"
  },
  {
    "text": "compute the log of x. And it's using what's called\na De Bruijn sequence.",
    "start": "2192360",
    "end": "2198720"
  },
  {
    "text": "So let's come back to the\nmagic trick in a minute. And let's look to see\nhow we compute this.",
    "start": "2198720",
    "end": "2207080"
  },
  {
    "text": "And then we'll understand\nhow both work. ",
    "start": "2207080",
    "end": "2212320"
  },
  {
    "text": "There's a magic number here\ncalled De Bruijn.",
    "start": "2212320",
    "end": "2218130"
  },
  {
    "text": "De Bruijn was a Dutch\nmathematician.  And then there's this funny\nconversion table.",
    "start": "2218130",
    "end": "2226360"
  },
  {
    "text": "And to find the log of x, where\nx is a power of two, I multiply x by this magic\nnumber here.",
    "start": "2226360",
    "end": "2235350"
  },
  {
    "text": "Right shifted 58 places.",
    "start": "2235350",
    "end": "2240390"
  },
  {
    "text": "This is keeping how many bits\nafter the multiply here? ",
    "start": "2240390",
    "end": "2246940"
  },
  {
    "text": "Six bits because it's\na 64-bit word. And then looking it\nup in this table.",
    "start": "2246940",
    "end": "2253105"
  },
  {
    "start": "2253105",
    "end": "2258310"
  },
  {
    "text": "So let's take a look at\nwhat's going on there. So a De Bruijn sequence, s, of\nlength 2 to the k, is a cyclic",
    "start": "2258310",
    "end": "2267890"
  },
  {
    "text": "zero one sequence, such that\neach of the two to the zero one strings of length k occurs\nexactly once as a",
    "start": "2267890",
    "end": "2277230"
  },
  {
    "text": "substring of s. That's a mouthful. Let's do an example, smaller.",
    "start": "2277230",
    "end": "2284760"
  },
  {
    "text": "So for example k equals 3. So here's a sequence, 0, 0,\n0, 1, 1, 1, 0, 1, base 2.",
    "start": "2284760",
    "end": "2293369"
  },
  {
    "text": "If I look at the first three\nbits it's 0, 0, 0.",
    "start": "2293370",
    "end": "2298730"
  },
  {
    "text": "The second three bits\nis 0, 0, 1. And notice that as I go through\nhere every sequence,",
    "start": "2298730",
    "end": "2305340"
  },
  {
    "text": "and these are wrapping around\nthe end, taking the last bit and then the first\ntwo of the end.",
    "start": "2305340",
    "end": "2311779"
  },
  {
    "text": "Every one of these gives you\nan index of every different bit pattern of length 3.",
    "start": "2311780",
    "end": "2319430"
  },
  {
    "text": "So these came up because people\nplayed with those",
    "start": "2319430",
    "end": "2326000"
  },
  {
    "text": "keypads where you have to enter\na combination, right?",
    "start": "2326000",
    "end": "2331010"
  },
  {
    "text": "And if you have a keypad\nand you want to enter a combination- let's say the\nkeypad has only two numbers on",
    "start": "2331010",
    "end": "2336920"
  },
  {
    "text": "it, 0 and 1. And you have to hit the right\nsequence of k numbers.",
    "start": "2336920",
    "end": "2344710"
  },
  {
    "text": "So the naive way of doing it\nwould be to say well let's try 0,0,0,0,0,0,0.",
    "start": "2344710",
    "end": "2351599"
  },
  {
    "text": "Then let's try 0,0,0,0,0,0,1,\nthen 0,0,0,0,0,1,0.",
    "start": "2351600",
    "end": "2358850"
  },
  {
    "text": "So what that'll do is you'll\nhave to go through 2 to the k numbers, each of which is k bits\nlong, for k times 2 to",
    "start": "2358850",
    "end": "2368970"
  },
  {
    "text": "the k punches in order to be\nsure that you've hit every number to open the lock.",
    "start": "2368970",
    "end": "2376690"
  },
  {
    "text": "The De Bruijn sequence takes\nit from k times 2 to the k down to 2 to the k. Still exponential in k, but\nthere's k at the front because",
    "start": "2376690",
    "end": "2385190"
  },
  {
    "text": "it's making it so that each\nsequence that you have nests into the previous one.",
    "start": "2385190",
    "end": "2393260"
  },
  {
    "text": "And that's basically what's\ngoing on here. Every sequence of length\n3 exists in",
    "start": "2393260",
    "end": "2399950"
  },
  {
    "text": "the De Bruijn sequence. And so this one here is a De\nBruijn sequence of length 64",
    "start": "2399950",
    "end": "2408880"
  },
  {
    "text": "as it turns out. And what we had in the magic\ntrick was a De Bruijn sequence",
    "start": "2408880",
    "end": "2415790"
  },
  {
    "text": "of length 32. So that when you cut the cards\nand you looked at the first five cards that was a unique\npattern of reds and blacks.",
    "start": "2415790",
    "end": "2427115"
  },
  {
    "text": "It told you where you were in\nthe rotation of the sequence. ",
    "start": "2427115",
    "end": "2432430"
  },
  {
    "text": "And then there's a little bit\nof cleverness to how it is that you translate\nthat into cards. Because remembering 32 cards,\nand what their sequence was,",
    "start": "2432430",
    "end": "2439860"
  },
  {
    "text": "and so forth, that's\npretty hard. But it turns out you\ncan just do an encoding of the five bits.",
    "start": "2439860",
    "end": "2446970"
  },
  {
    "text": "Two of the bits encode\nthe suit. So the high order bit encodes\nthe suit, the two bits encode",
    "start": "2446970",
    "end": "2455700"
  },
  {
    "text": "the suit, and then the last\nthree bits tell what the number is, 1 through 8.",
    "start": "2455700",
    "end": "2463770"
  },
  {
    "text": "So that's how that worked. It wasn't really magic\nafter all.",
    "start": "2463770",
    "end": "2469760"
  },
  {
    "text": "Who's surprised?  So how can we use this in\nthis particular code?",
    "start": "2469760",
    "end": "2477040"
  },
  {
    "text": "So for this, basically\nthe convert table does the following. It says, well, if you've got\nzero, the offset, the shift of",
    "start": "2477040",
    "end": "2484700"
  },
  {
    "text": "this amount here, is zero. And if you've got one, then\nthe shift is one.",
    "start": "2484700",
    "end": "2490990"
  },
  {
    "text": "And if you have a six-\nwhere's six in here? ",
    "start": "2490990",
    "end": "2500760"
  },
  {
    "text": "Sorry if I have a two here,\nthen that's going to be that I'm six.",
    "start": "2500760",
    "end": "2507520"
  },
  {
    "text": "So this table is inverting\nthis number. Do people see the relationship\nthere?",
    "start": "2507520",
    "end": "2514930"
  },
  {
    "text": "So if I know what the pattern is\nI can do a look up and tell how much did I shift by?",
    "start": "2514930",
    "end": "2522390"
  },
  {
    "text": "If I am shifting by a\ngiven amount there, or circularly shifting. So here's the way\nthat code works.",
    "start": "2522390",
    "end": "2530520"
  },
  {
    "text": "Let's say we've got a number\nlike 2 to the fourth that I'm trying to figure out what\nthe exponent is. It's always a power of 2.",
    "start": "2530520",
    "end": "2537600"
  },
  {
    "text": "So I'm looking at 2 to\nthe fourth and I want to extract 4. But all I have is the mask\nthat's 16, which",
    "start": "2537600",
    "end": "2543800"
  },
  {
    "text": "has the one bit on. What I do is I multiply this\nnumber, the De Bruijn sequence",
    "start": "2543800",
    "end": "2550109"
  },
  {
    "text": "number, by 16. Well what happens when you\nmultiply by a power of 2?",
    "start": "2550110",
    "end": "2555839"
  },
  {
    "text": " It shifts it by 4 bits.",
    "start": "2555840",
    "end": "2561920"
  },
  {
    "text": " So it's shifted the\nbits by 4 bits.",
    "start": "2561920",
    "end": "2567670"
  },
  {
    "text": "And now if I right shift\nit by 8 minus 3, I capture the top 3 bits.",
    "start": "2567670",
    "end": "2572860"
  },
  {
    "text": " In this case, 1, 1,\n0, which is 6.",
    "start": "2572860",
    "end": "2580940"
  },
  {
    "text": "Then I convert 6. It says I had a shift of 4. ",
    "start": "2580940",
    "end": "2602770"
  },
  {
    "text": "And just with 64 bits it's a\nlonger De Bruijn sequence. ",
    "start": "2602770",
    "end": "2608420"
  },
  {
    "text": "So it's performance is limited\nby the fact that you have to do a multiply and\na table look up. But it's generally fairly\ncompetitive for many machines",
    "start": "2608420",
    "end": "2615800"
  },
  {
    "text": "that do not actually have a log\nbase 2 of a power of 2. These days machine instructions\nare getting-",
    "start": "2615800",
    "end": "2623480"
  },
  {
    "text": "there are instructions that\nwill do that in a single instruction for you. But if you don't happen to have\none on your architecture",
    "start": "2623480",
    "end": "2632630"
  },
  {
    "text": "and need to do this fast\nthis is a reasonably fast way to do it. Even with a table look\nup and the thing.",
    "start": "2632630",
    "end": "2639950"
  },
  {
    "text": "The other way of doing it, of\ncourse, would be to shift by one, shift by one, shift by one,\nuntil you get the one.",
    "start": "2639950",
    "end": "2646119"
  },
  {
    "text": "And there's some other\ntechniques as well that you can use. You can do divide and conquer in\na binary way, where you do",
    "start": "2646120",
    "end": "2651990"
  },
  {
    "text": "binary search for where the\nbit is, by shifting and so forth, and hone in.",
    "start": "2651990",
    "end": "2657250"
  },
  {
    "text": "But the problem with those\ntechniques, the binary search in particular, is what? If I try to binary search\nto find a bit what's",
    "start": "2657250",
    "end": "2666339"
  },
  {
    "text": "that going to be? Yeah, branching. You're going to have\nunpredictable branches.",
    "start": "2666340",
    "end": "2671490"
  },
  {
    "text": "And each of those will\ncost you 16 cycles. And so with a 64-bit word you've\ngot 16 cycles times six",
    "start": "2671490",
    "end": "2680920"
  },
  {
    "text": "bits that you're trying to\ndecode, times however many instructions it actually\ntakes you.",
    "start": "2680920",
    "end": "2687140"
  },
  {
    "text": "It adds up to a lot of cycles.  But that can sometimes\nbe an effective way",
    "start": "2687140",
    "end": "2692930"
  },
  {
    "text": "of doing it as well. And there are other ways. You can look byte by byte.",
    "start": "2692930",
    "end": "2699789"
  },
  {
    "text": "There are a variety of\nother techniques. Anyway, but this\nis a cute one. ",
    "start": "2699790",
    "end": "2705840"
  },
  {
    "text": "Here's another one,\npopulation count. Count up the number of\none bits in a word.",
    "start": "2705840",
    "end": "2711420"
  },
  {
    "start": "2711420",
    "end": "2716710"
  },
  {
    "text": "So here's one way of doing it. I start out r at zero.",
    "start": "2716710",
    "end": "2722080"
  },
  {
    "text": "And I keep incrementing r. And what I do is I quit\nwhen x is zero.",
    "start": "2722080",
    "end": "2730640"
  },
  {
    "text": "And what I do is I do that\ntrick of x, ending it with x minus 1.",
    "start": "2730640",
    "end": "2737060"
  },
  {
    "text": "Which does what?  Eliminates the low order bit,\nthat's one, the low order one.",
    "start": "2737060",
    "end": "2745640"
  },
  {
    "text": "So basically I go through and\nI just kick out one of the ones, kick out another one of\nthe ones, kick out another one",
    "start": "2745640",
    "end": "2751150"
  },
  {
    "text": "of the ones, until I'm done. This has a branch in it. But in some sense it's a\npredictable branch because",
    "start": "2751150",
    "end": "2758369"
  },
  {
    "text": "almost all the time you're\ngoing through the loop.  However, it has downside, which\nis that suppose you're",
    "start": "2758370",
    "end": "2769940"
  },
  {
    "text": "given minus 1. ",
    "start": "2769940",
    "end": "2775210"
  },
  {
    "text": "Then you have to do 64\niterations of this loop before",
    "start": "2775210",
    "end": "2781260"
  },
  {
    "text": "you can get your final answer. And so that's a lot of\niterations to do.",
    "start": "2781260",
    "end": "2789410"
  },
  {
    "text": "So here's what's going\non in your loop. Here's x. Here's x minus 1.",
    "start": "2789410",
    "end": "2794970"
  },
  {
    "text": "And now if I and them it's\nvery similar to the other trick that I taught you. You and them, notice you have\nthe same number you started",
    "start": "2794970",
    "end": "2801700"
  },
  {
    "text": "with except it's missing\nthe one low order bit. ",
    "start": "2801700",
    "end": "2813420"
  },
  {
    "text": "So this is fast if the\npopulation count is small. If you know there's only a\ncouple of its on in the word,",
    "start": "2813420",
    "end": "2820820"
  },
  {
    "text": "then this can be a pretty\neffective technique. But in the worst case it's going\nto take it's going to be",
    "start": "2820820",
    "end": "2825860"
  },
  {
    "text": "proportional to the number\nof bits in the word. Because you're only getting\nrid of one bit at a time. But it's better, in some sense,\nthan looking one bit at",
    "start": "2825860",
    "end": "2834350"
  },
  {
    "text": "a time because you have the off\nchance that the number of one bits will be sparse.",
    "start": "2834350",
    "end": "2840800"
  },
  {
    "text": "Whereas if you just looked at\nthe low order bit, then the next bit, then the next bit,\nthat would definitely take you",
    "start": "2840800",
    "end": "2847820"
  },
  {
    "text": "worst case every single time. Here's another way to do it.",
    "start": "2847820",
    "end": "2853080"
  },
  {
    "text": "It's a table look up. So you have to pay, but if\nyou're doing this a lot maybe",
    "start": "2853080",
    "end": "2859180"
  },
  {
    "text": "all of this is an L1 so the\ntable look up only costs you four cycles if it's\nan L1 cache.",
    "start": "2859180",
    "end": "2866950"
  },
  {
    "text": "So what is this sequence? This tells for any given byte,\nso there's 256 values, how",
    "start": "2866950",
    "end": "2874410"
  },
  {
    "text": "many ones are in the world. So zero has zero one bits. One has one one bit.",
    "start": "2874410",
    "end": "2881890"
  },
  {
    "text": "Two has one one bit, three\nhas two one bits. Four has one one bit, five has\ntwo, six has two, seven has",
    "start": "2881890",
    "end": "2888859"
  },
  {
    "text": "three, eight has\none, et cetera. So that's this table. I didn't fill out the\nrest of the table.",
    "start": "2888860",
    "end": "2894610"
  },
  {
    "text": "And now what you're doing in\nthis loop is you're basically taking a look at\nthe value of x.",
    "start": "2894610",
    "end": "2901650"
  },
  {
    "text": "You're right shifting it and\nthen your indexing, masking with the low order byte.",
    "start": "2901650",
    "end": "2909710"
  },
  {
    "text": "So you may ask the\nlow order byte. You add that to the count by\ndoing a look up, which",
    "start": "2909710",
    "end": "2916079"
  },
  {
    "text": "hopefully only takes you four\ncycles if the table is in L1.",
    "start": "2916080",
    "end": "2921470"
  },
  {
    "text": "And then just run around this\nloop until you've got no more things in your word.",
    "start": "2921470",
    "end": "2927850"
  },
  {
    "text": "So how many are in byte one, how\nmany are in byte two, how many are in byte three,\nand so forth. ",
    "start": "2927850",
    "end": "2936910"
  },
  {
    "text": "For things that use table look\nup you have to be careful because if you have a great big\ntable why not look up two",
    "start": "2936910",
    "end": "2943590"
  },
  {
    "text": "bytes at a time? Well two bytes is\n65,000 entries.",
    "start": "2943590",
    "end": "2952070"
  },
  {
    "text": "So why not look up four\nbytes at a time?",
    "start": "2952070",
    "end": "2958700"
  },
  {
    "text": "Four bytes is four\nbillion entries. At that point you're going out\nto memory and starting to consume a lot of space.",
    "start": "2958700",
    "end": "2965260"
  },
  {
    "text": "So here's some common numbers. These are sort of approximate.",
    "start": "2965260",
    "end": "2970830"
  },
  {
    "text": "But generally if you're doing\noperations on registers, one cycles, and plus you can issue\nsix per core, per cycle.",
    "start": "2970830",
    "end": "2979510"
  },
  {
    "text": "So L1 cache is going to cost\nyou around four cycles, L2 cache about 10, L3 about\n50, and D RAM",
    "start": "2979510",
    "end": "2986190"
  },
  {
    "text": "about 150 to 200 cycles. When you access these you get,\nin fact, generally for all",
    "start": "2986190",
    "end": "2991900"
  },
  {
    "text": "these, you tend to get\na 64 byte cache line. So you're getting\nmore than one.",
    "start": "2991900",
    "end": "2996980"
  },
  {
    "text": "But if what you're doing is\nrandom access in a table it doesn't help that all those\nother bytes are coming in. ",
    "start": "2996980",
    "end": "3007250"
  },
  {
    "text": "Population count three using\nparallel, divide, and conquer. Here's the clever one. ",
    "start": "3007250",
    "end": "3014770"
  },
  {
    "text": "Here's the code.  It's all register operations\nbasically.",
    "start": "3014770",
    "end": "3022290"
  },
  {
    "text": " So it's creating some masks.",
    "start": "3022290",
    "end": "3030600"
  },
  {
    "text": "So let's just take a look\nat what does this first instruction do? ",
    "start": "3030600",
    "end": "3036790"
  },
  {
    "text": "It's taking minus one. It's shifting it left 32 bits.",
    "start": "3036790",
    "end": "3042900"
  },
  {
    "text": "So that gives all ones in the\nhigher order half of the word, and all zeros in\nthe lower half. And then it's xor-ing\nit with minus one.",
    "start": "3042900",
    "end": "3050960"
  },
  {
    "text": "But with all minus ones. So that gives you a mask\nof ones in the low order half of the word.",
    "start": "3050960",
    "end": "3057280"
  },
  {
    "text": "Yeah question? AUDIENCE: Why don't you just do\nnegative one right shifted.",
    "start": "3057280",
    "end": "3063363"
  },
  {
    "text": "Isn't there a type of- PROFESSOR: Yeah you\ncan do that. I was trying to be\nconsistent here. And, in fact, for these first\ntwo operations there are",
    "start": "3063363",
    "end": "3068950"
  },
  {
    "text": "actually more clever ways of\ndoing this that take fewer operations. AUDIENCE: Isn't there a right\nshift operator that",
    "start": "3068950",
    "end": "3075395"
  },
  {
    "text": "[? pulls some ?] zeros\nin the top level? PROFESSOR: Yeah, so there's\nlogical versus arithmetic",
    "start": "3075395",
    "end": "3080960"
  },
  {
    "text": "right shift. Yeah. AUDIENCE: [INAUDIBLE] PROFESSOR: That's right.",
    "start": "3080960",
    "end": "3086890"
  },
  {
    "text": "But then I wouldn't have\nthe pattern that I'm setting up here. So yes, in fact, if you want to\nplay with it yourself you",
    "start": "3086890",
    "end": "3095340"
  },
  {
    "text": "can optimize these first\ntwo statements. They don't need to be as\ncomplicated as this one.",
    "start": "3095340",
    "end": "3101450"
  },
  {
    "text": "But basically what you're doing\nin every step is your shifting it over, half\nthe word, xor-ing it.",
    "start": "3101450",
    "end": "3106539"
  },
  {
    "text": "And then the second one is you\nget a block of 16 bits of zeros, 16 ones, 16\nzeros, 16 ones.",
    "start": "3106540",
    "end": "3114450"
  },
  {
    "text": "The next one you get a block of\neight zeros, eight one's, eight zeros, eight ones.",
    "start": "3114450",
    "end": "3120369"
  },
  {
    "text": "And so basically you're\ngenerating masks for that. So by the time you get down to\nthe last one you're having",
    "start": "3120370",
    "end": "3125850"
  },
  {
    "text": "every other bit is zero. You're alternating\nzeros and ones.",
    "start": "3125850",
    "end": "3131380"
  },
  {
    "text": "And then, basically-\nwell let me not go through the code here. Let me show with an example. The main thing to observe is\nthat it takes log n time where",
    "start": "3131380",
    "end": "3138940"
  },
  {
    "text": "n is the word length\nto do this. ",
    "start": "3138940",
    "end": "3144069"
  },
  {
    "text": "So here's population count on\n32 bits, same kind of thing.",
    "start": "3144070",
    "end": "3150610"
  },
  {
    "text": "So here's the idea.  We extract every other bit\nfor the two words.",
    "start": "3150610",
    "end": "3159160"
  },
  {
    "text": "So you saw how I extracted\nthat right? So we extract. So I can do that with\na mask and a shift.",
    "start": "3159160",
    "end": "3168660"
  },
  {
    "text": "And then I add them together. ",
    "start": "3168660",
    "end": "3174340"
  },
  {
    "text": "So just so we can see what's\nbeing added here.  And when I add them together the\nlargest value I'm going to",
    "start": "3174340",
    "end": "3181580"
  },
  {
    "text": "have in any one of these\nthings is what? AUDIENCE: Two. PROFESSOR: And [? that, ?]\nfortunately, fits in two bits.",
    "start": "3181580",
    "end": "3188630"
  },
  {
    "text": " So we can get off the ground.",
    "start": "3188630",
    "end": "3194839"
  },
  {
    "text": "So now every two bits has\nthe sum of the two bits that were there. The bits that I'm not showing\nare all zeros because it's",
    "start": "3194840",
    "end": "3202480"
  },
  {
    "text": "done 64 bit words. The bits I'm showing\nare all zeros. So now what do we do?",
    "start": "3202480",
    "end": "3208640"
  },
  {
    "text": " We mask and shift and take off\nevery two pairs of bits and",
    "start": "3208640",
    "end": "3217820"
  },
  {
    "text": "then add them together. ",
    "start": "3217820",
    "end": "3223770"
  },
  {
    "text": "So now this guy is saying\nthere's four bit that were originally in the\nword that began.",
    "start": "3223770",
    "end": "3232040"
  },
  {
    "text": "This one says there are two bits\nin that range, one bit, one bit, two bits, three bits,\ntwo bits, two bits.",
    "start": "3232040",
    "end": "3240100"
  },
  {
    "text": "So we do it again.  Add it together.",
    "start": "3240100",
    "end": "3246030"
  },
  {
    "text": " And we just keep going. ",
    "start": "3246030",
    "end": "3254640"
  },
  {
    "text": "And then finally we add\nthem all together. ",
    "start": "3254640",
    "end": "3260460"
  },
  {
    "text": "It says there are 17 ones in\nthe word, which there were.",
    "start": "3260460",
    "end": "3265859"
  },
  {
    "text": "I should have probably left the\nword up there or something so we could verify that. But Yeah there are 17 ones.",
    "start": "3265860",
    "end": "3272080"
  },
  {
    "text": "So everybody see it's parallel,\ndivide, and conquer because you're adding many\nwords, many sub-pieces pieces",
    "start": "3272080",
    "end": "3280400"
  },
  {
    "text": "of the word [UNINTELLIGIBLE]. And the key thing is to make\nit so that no carries are propagating out of\ntheir range.",
    "start": "3280400",
    "end": "3286510"
  },
  {
    "text": "But the numbers are just getting\nsmaller and smaller. When you're done you're only\ngoing to have six bits here that are significant anyway.",
    "start": "3286510",
    "end": "3292480"
  },
  {
    "text": "All of these will be zeros. ",
    "start": "3292480",
    "end": "3298000"
  },
  {
    "text": "Is that cool? ",
    "start": "3298000",
    "end": "3303310"
  },
  {
    "text": "So there's a 17, yeah. ",
    "start": "3303310",
    "end": "3311720"
  },
  {
    "text": "Here's a problem for which\nbit representations are a lot of fun. Last year we gave this as\na problem to students.",
    "start": "3311720",
    "end": "3318760"
  },
  {
    "text": "This year we're giving you a\ndifferent problem so that lets me lecture on it.",
    "start": "3318760",
    "end": "3324280"
  },
  {
    "text": "So many people are probably\nfamiliar with this problem. It's an old chess nut.",
    "start": "3324280",
    "end": "3330460"
  },
  {
    "text": "But basically the queen's\nproblems is to place n queens on an n by n chess board so that\nno queen attacks another.",
    "start": "3330460",
    "end": "3337650"
  },
  {
    "text": "So there are no two Queens in\nany row, column, or diagonal.",
    "start": "3337650",
    "end": "3343109"
  },
  {
    "text": "So queen's kind of\nmove like this. It's got to be clear. If I did that around any one\nof these guys they wouldn't",
    "start": "3343110",
    "end": "3349950"
  },
  {
    "text": "hit anybody else. In fact, this arrangement here\nis, I think, one of the few symmetric ones. Maybe it's the only\nsymmetric one.",
    "start": "3349950",
    "end": "3356430"
  },
  {
    "text": "It's radially symmetric. Most of them are\nmore scattered.  So the question is how do you\nfind such a thing, or count",
    "start": "3356430",
    "end": "3363790"
  },
  {
    "text": "the number of solutions,\nis another popular one, et cetera. ",
    "start": "3363790",
    "end": "3370820"
  },
  {
    "text": "A popular strategy for this is\ncalled backtracking search. And we're going to have in\nyour homework a different",
    "start": "3370820",
    "end": "3376069"
  },
  {
    "text": "backtracking search. And the idea is you just simply\ntry to place the queens",
    "start": "3376070",
    "end": "3382490"
  },
  {
    "text": "row by row. So, for example, we start out\nwith the first row, row zero,",
    "start": "3382490",
    "end": "3389750"
  },
  {
    "text": "and we place a queen. Then we go to the next row. And we try to see if a queen\nworks on that square, nope,",
    "start": "3389750",
    "end": "3397640"
  },
  {
    "text": "nope, yes it works there. Now we go on to the next row.",
    "start": "3397640",
    "end": "3403410"
  },
  {
    "text": "So this is making progress. We're placing queens. We're going to more rows. We're going to get to the\nend of the rows, right?",
    "start": "3403410",
    "end": "3410420"
  },
  {
    "text": "So we keep- yep, we found it.",
    "start": "3410420",
    "end": "3420030"
  },
  {
    "text": "And we keep going. This is easy. Found it right after\ntwo there.",
    "start": "3420030",
    "end": "3425750"
  },
  {
    "text": "That's pretty good. ",
    "start": "3425750",
    "end": "3436824"
  },
  {
    "text": "Found it there. Look, we're making\ngreat progress. ",
    "start": "3436824",
    "end": "3443440"
  },
  {
    "text": "Doesn't go there, doesn't go\nthere, doesn't go there, doesn't go there, oops\ndoesn't go anywhere.",
    "start": "3443440",
    "end": "3450740"
  },
  {
    "text": "So what do we do? We backtrack. We say, gee, if it didn't fit\nin any those but it had",
    "start": "3450740",
    "end": "3458340"
  },
  {
    "text": "nothing to do with the placement\nthere, it's the fault of the guy who\ncame before me.",
    "start": "3458340",
    "end": "3464490"
  },
  {
    "text": "So that position is not a valid\nposition, at least with that prefix. So we continue with him.",
    "start": "3464490",
    "end": "3469900"
  },
  {
    "start": "3469900",
    "end": "3476150"
  },
  {
    "text": "Aha, we found another\nplace for him.  So then we try this one.",
    "start": "3476150",
    "end": "3482140"
  },
  {
    "start": "3482140",
    "end": "3488910"
  },
  {
    "text": "Oops this doesn't look good,\naha, got to backtrack.",
    "start": "3488910",
    "end": "3496059"
  },
  {
    "text": "Whoops that's the last\none in the row, got to backtrack again.",
    "start": "3496060",
    "end": "3501490"
  },
  {
    "text": "So that means that guy\ncan't go there. ",
    "start": "3501490",
    "end": "3508950"
  },
  {
    "text": "Found a place, now we get\nto go forward, hooray. And you keep going on. So you backtrack, et cetera,\nuntil you finally",
    "start": "3508950",
    "end": "3515010"
  },
  {
    "text": "find a place for them. So the backtracking search\nis pretty interesting.",
    "start": "3515010",
    "end": "3522260"
  },
  {
    "text": "But the question is how do you\nrepresent it so that it can go really fast.",
    "start": "3522260",
    "end": "3528290"
  },
  {
    "text": " So here's some ideas. The first idea you might come up\nwith is to use an array of",
    "start": "3528290",
    "end": "3536020"
  },
  {
    "text": "n squared bytes, where you put a\nvalue in the byte if there's a queen there.",
    "start": "3536020",
    "end": "3542360"
  },
  {
    "text": "You should, at this point,\nfigure out that, gee all I have to know is whether a\nqueen is there or not.",
    "start": "3542360",
    "end": "3548349"
  },
  {
    "text": "So why should I keep a byte? Why not just keep a bit? That'll be smaller and have\na smaller representing.",
    "start": "3548350",
    "end": "3555560"
  },
  {
    "text": "So let's keep n squared bits. ",
    "start": "3555560",
    "end": "3561340"
  },
  {
    "text": "Well let's see. If I'm only putting a queen in\none place in every row I never",
    "start": "3561340",
    "end": "3568320"
  },
  {
    "text": "have to have more than one\nbit set in any row.",
    "start": "3568320",
    "end": "3574510"
  },
  {
    "text": "So why not just say the column\nnumber in the row that I'm in?",
    "start": "3574510",
    "end": "3582420"
  },
  {
    "text": "So rather than using an array of\nn bits for every row let me",
    "start": "3582420",
    "end": "3590500"
  },
  {
    "text": "just use an index of a byte to\nsay which row that one queen",
    "start": "3590500",
    "end": "3599010"
  },
  {
    "text": "is in because there can't be any\nother Queens in that row in a legal configuration. ",
    "start": "3599010",
    "end": "3605330"
  },
  {
    "text": "So that's actually\nmore clever. And that's the way most\npeople code it. But we're going to look at a\nsolution that was originally",
    "start": "3605330",
    "end": "3612000"
  },
  {
    "text": "due to Edsger Dijkstra of using\nthree bit vectors to",
    "start": "3612000",
    "end": "3618390"
  },
  {
    "text": "represent the board. And the idea is we want to make\nthings go- we're going to",
    "start": "3618390",
    "end": "3628810"
  },
  {
    "text": "use three bit vectors that\nare relatively small. So it turns out the\nn queens is an",
    "start": "3628810",
    "end": "3634190"
  },
  {
    "text": "exponential search problem. And so you really can't run n\nqueens on 128 by 128 board.",
    "start": "3634190",
    "end": "3643920"
  },
  {
    "text": "You can run that if you're\ninterested in one solution. You can't count up how\nmany solutions. And if you go to Wikipedia and\nlook at n Queens they will",
    "start": "3643920",
    "end": "3651450"
  },
  {
    "text": "tell you what all the latest\nrecords are for who has computed how many solutions\nthere are on an n by n board",
    "start": "3651450",
    "end": "3659740"
  },
  {
    "text": "for n up to some rather\nsmall number. ",
    "start": "3659740",
    "end": "3666440"
  },
  {
    "text": "So it's a way to get your name\non the web, which, as you know, is very difficult to do.",
    "start": "3666440",
    "end": "3672260"
  },
  {
    "text": " So let's see this three\nbit vector trick.",
    "start": "3672260",
    "end": "3678240"
  },
  {
    "text": "So the idea of the bit vector\ntrick is that, for any partial placement, rather than\nrepresenting where the queens",
    "start": "3678240",
    "end": "3685310"
  },
  {
    "text": "are on the board, what I really\ncare about is which columns have been knocked out. ",
    "start": "3685310",
    "end": "3693310"
  },
  {
    "text": "So, therefore, what I'll do is\nI'll store a one if there's a queen in that column and a zero\nif I don't have a queen",
    "start": "3693310",
    "end": "3701150"
  },
  {
    "text": "in that column.  So the point is I can keep the\nwhole representation of the",
    "start": "3701150",
    "end": "3707410"
  },
  {
    "text": "column mask in a word that just\ntells me whether I have ones or zeros in a column.",
    "start": "3707410",
    "end": "3714970"
  },
  {
    "text": "Now how do I know whether it's\nsafe to place a queen in a given column?",
    "start": "3714970",
    "end": "3720930"
  },
  {
    "start": "3720930",
    "end": "3727380"
  },
  {
    "text": "What's that?  AUDIENCE: [INAUDIBLE]",
    "start": "3727380",
    "end": "3732605"
  },
  {
    "text": "PROFESSOR: How do I know, if\nI try to place a queen say, here, how do I know whether\nthat's OK or not?",
    "start": "3732605",
    "end": "3738530"
  },
  {
    "start": "3738530",
    "end": "3744420"
  },
  {
    "text": "Suppose that my program\nwants to try to put a queen in this space. It can't because there's\nsomething here.",
    "start": "3744420",
    "end": "3752069"
  },
  {
    "text": "It's just some operations on\nwords, which we will see here.",
    "start": "3752070",
    "end": "3757490"
  },
  {
    "text": "So placing a queen in column\nc is not safe if this down were here.",
    "start": "3757490",
    "end": "3763650"
  },
  {
    "text": "When I and it with one shifted\nleft by the number of columns so that I have the position of\nthe queen in the column if",
    "start": "3763650",
    "end": "3774390"
  },
  {
    "text": "that's non-zero because\nit means somebody else is in that column. If it's in a new column when I\ndo the and I'll get all zeros.",
    "start": "3774390",
    "end": "3781829"
  },
  {
    "text": " Everybody follow that? So testing columnists, whether\nit's safe to put it in a given",
    "start": "3781830",
    "end": "3790420"
  },
  {
    "text": "column, from the column attack\nwe can do that really, really efficiently, right?",
    "start": "3790420",
    "end": "3798329"
  },
  {
    "text": "These are all going to\nbe in registers.  No memory operations, no table\nlook ups, no L1 caches, all",
    "start": "3798330",
    "end": "3808850"
  },
  {
    "text": "right in registers.  Well what do we do about\nthe diagonals?",
    "start": "3808850",
    "end": "3817005"
  },
  {
    "text": "So for the diagonals we can\nalso use a bit vector representation for\neach diagonal.",
    "start": "3817005",
    "end": "3823860"
  },
  {
    "text": "Where I look to see if there's\na number along this diagonal, and if there is a queen\nthen it's a one.",
    "start": "3823860",
    "end": "3830220"
  },
  {
    "text": "And if there isn't a queen on\nthe diagonal it's zero. There are more diagonals then\nthere are columns, right?",
    "start": "3830220",
    "end": "3837320"
  },
  {
    "text": "So I have a longer bit vector\nrepresentation. I have to represent that.",
    "start": "3837320",
    "end": "3842550"
  },
  {
    "text": "But I can still do that in one\ncomputer word for things of different size, or even for\nthings that are pretty good",
    "start": "3842550",
    "end": "3848339"
  },
  {
    "text": "size two computer words would\nbe, certainly, ample.",
    "start": "3848340",
    "end": "3854140"
  },
  {
    "text": "So now how do I tell whether\nor not a queen placed on a given square can legally\nbe placed there?",
    "start": "3854140",
    "end": "3866250"
  },
  {
    "text": " So it turns out it's not safe to\nplace it if when I take my",
    "start": "3866250",
    "end": "3873570"
  },
  {
    "text": "writer ray, and I take n minus r\nplus c, and left shift it by",
    "start": "3873570",
    "end": "3879400"
  },
  {
    "text": "that amount, and that's\nnon-zero. So here I'm indexing rows and\ncolumns from the upper left",
    "start": "3879400",
    "end": "3887180"
  },
  {
    "text": "hand corner. And so, basically, you're trying\nto say is, for a given",
    "start": "3887180",
    "end": "3892619"
  },
  {
    "text": "square, notice that if I\nincrease the row, that's this",
    "start": "3892620",
    "end": "3897970"
  },
  {
    "text": "way, I get to the same- of if\nI'm increasing the row, I'm",
    "start": "3897970",
    "end": "3906660"
  },
  {
    "text": "decreasing the diagonal\nthat I'm on. But if I'm increasing the column\nI'm increasing the",
    "start": "3906660",
    "end": "3913460"
  },
  {
    "text": "diagonal I'm on. So that's it's basically\na difference here.",
    "start": "3913460",
    "end": "3919340"
  },
  {
    "text": "And then you just normalize it\nand with essentially very, very few operations I can\ntell whether there's a",
    "start": "3919340",
    "end": "3926650"
  },
  {
    "text": "conflict in a column. Of course, for both this and\nthe other one, if I need to set it now that's pretty\nsimple also.",
    "start": "3926650",
    "end": "3934170"
  },
  {
    "text": "I just take this and\nor it with right. If my test is good, I just take\nthis, or it with right,",
    "start": "3934170",
    "end": "3941630"
  },
  {
    "text": "and now that's my new right. ",
    "start": "3941630",
    "end": "3946960"
  },
  {
    "text": "And left is similar. So, once again, we have these\nguys going this way, placing a",
    "start": "3946960",
    "end": "3952860"
  },
  {
    "text": "queen in row r. And column c is not safe if-\nand now I just look at row",
    "start": "3952860",
    "end": "3958980"
  },
  {
    "text": "plus column because these\ndiagonals increase with both row and column.",
    "start": "3958980",
    "end": "3964280"
  },
  {
    "text": "You're increasing the diagonal\nfor both row and column. And so I'm not going to\ngo through all the details of the code.",
    "start": "3964280",
    "end": "3970059"
  },
  {
    "text": "But you can see that with this\nrepresentation, literally, the inner loop of your program,\nwhich is testing whether",
    "start": "3970060",
    "end": "3978060"
  },
  {
    "text": "queens fit on boards and then\nsetting them if they do, you can do with just three words\nand a few operations.",
    "start": "3978060",
    "end": "3985039"
  },
  {
    "text": "Question? AUDIENCE: Can you mask the three\nbits together and check",
    "start": "3985040",
    "end": "3991688"
  },
  {
    "text": "if one position is taken up? You'd have to do some creative\nstuff with lining up the row",
    "start": "3991688",
    "end": "4000193"
  },
  {
    "text": "and column vectors with\nthe diagonals, but- PROFESSOR: So typically\nhere you're looking at",
    "start": "4000193",
    "end": "4006020"
  },
  {
    "text": "both row and column. So you're adding them, whereas\non the previous one you were",
    "start": "4006020",
    "end": "4011470"
  },
  {
    "text": "subtracting. And then the first one you\ndidn't even care about what the column was.",
    "start": "4011470",
    "end": "4017120"
  },
  {
    "text": "So I'm not sure I would know\nhow to combine those. It's conceivable you\ncould do it.",
    "start": "4017120",
    "end": "4022994"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] column vector, you could add\nthe two together and find",
    "start": "4022995",
    "end": "4028329"
  },
  {
    "text": "specific positions\nthat are free. PROFESSOR: Yeah so you could\nalso do a generation that says",
    "start": "4028330",
    "end": "4033590"
  },
  {
    "text": "here are the ones that are free\nand then use things like the least significant bit trick\nto pull out what is the",
    "start": "4033590",
    "end": "4039470"
  },
  {
    "text": "positions I should\nbother to check.  So here I can test\nthat it's safe.",
    "start": "4039470",
    "end": "4045670"
  },
  {
    "text": "But I could also generate using\nsimilar tricks, which is what you're saying, generate all\nof the bit positions on a",
    "start": "4045670",
    "end": "4053270"
  },
  {
    "text": "given row where it would\nbe safe to put a queen.",
    "start": "4053270",
    "end": "4058290"
  },
  {
    "text": "Yep, yep, good. So fast programs use\nthis technique.",
    "start": "4058290",
    "end": "4067130"
  },
  {
    "text": "So you see that there's a lot\nof cleverness in these kinds of techniques.",
    "start": "4067130",
    "end": "4072735"
  },
  {
    "text": " So there are a whole bunch of\nother bit hacking techniques.",
    "start": "4072735",
    "end": "4081490"
  },
  {
    "text": "One really good resource\nfor it is this webpage.",
    "start": "4081490",
    "end": "4086760"
  },
  {
    "text": "And of course I'll put this up\non the- called bit twiddling hacks, where he's compiled-\nthere's a lot of people that",
    "start": "4086760",
    "end": "4094070"
  },
  {
    "text": "have worked on different\nbit twiddling hacks. And he's done a very good job\nof compiling what he thinks are the best code sequences for\na whole bunch of things,",
    "start": "4094070",
    "end": "4101739"
  },
  {
    "text": "including things like reversing\nthe bits in a word. If you think about it that\ncould be kind of tricky.",
    "start": "4101740",
    "end": "4107620"
  },
  {
    "text": "Actually turns out\nto be relevant to your homework as well.",
    "start": "4107620",
    "end": "4112880"
  },
  {
    "text": "So on your homework, so lab\none will be- it's posted I gather, right?",
    "start": "4112880",
    "end": "4120740"
  },
  {
    "text": "It'll be posted shortly. We have you trying to take\nadvantage of some of these bit",
    "start": "4120740",
    "end": "4127115"
  },
  {
    "text": "tricks in a couple of warm\nup exercises and then a",
    "start": "4127115",
    "end": "4134220"
  },
  {
    "text": "backtracking search algorithm. And so I think you'll find\nit's a lot of fun.",
    "start": "4134220",
    "end": "4140679"
  },
  {
    "text": "You'll learn a lot about all the\nkinds of tricks you can do to make stuff go fast by using\nregister operations locally,",
    "start": "4140680",
    "end": "4148380"
  },
  {
    "text": "and using good representations\nfor your storage. ",
    "start": "4148380",
    "end": "4153429"
  },
  {
    "text": "Yes, also, announcement. Tonight, at 7 o'clock, in 32,\n144, there is a primer on c.",
    "start": "4153430",
    "end": "4164818"
  },
  {
    "text": "So if you want to brush up on\nyour c or if you want to learn c, this is a good time to go.",
    "start": "4164819",
    "end": "4172210"
  },
  {
    "text": "There's a lot of good nuggets\nof wisdom coming out for c.",
    "start": "4172210",
    "end": "4181750"
  },
  {
    "text": "OK, thanks very much. See you Thursday. ",
    "start": "4181750",
    "end": "4186047"
  }
]