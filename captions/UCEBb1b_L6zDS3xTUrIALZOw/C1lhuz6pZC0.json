[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6760"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or to\nview additional materials",
    "start": "6760",
    "end": "13390"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu.",
    "start": "13390",
    "end": "18570"
  },
  {
    "start": "18570",
    "end": "30962"
  },
  {
    "text": "JOHN GUTTAG: All right,\nwelcome to the 60002,",
    "start": "30962",
    "end": "36450"
  },
  {
    "text": "or if you were in 600,\nthe second half of 600. I'm John Guttag.",
    "start": "36450",
    "end": "42440"
  },
  {
    "text": "Let me start with a few\nadministrative things. ",
    "start": "42440",
    "end": "47510"
  },
  {
    "text": "What's the workload? There are problem sets. They'll all be\nprogramming problems",
    "start": "47510",
    "end": "52850"
  },
  {
    "text": "much in the style of 60001. And the goal-- really twofold.",
    "start": "52850",
    "end": "59680"
  },
  {
    "text": "60001 problem sets\nwere mostly about you learning to be a programmer.",
    "start": "59680",
    "end": "66590"
  },
  {
    "text": "A lot of that carries over. No one learns to be a\nprogrammer in half a semester.",
    "start": "66590",
    "end": "72530"
  },
  {
    "text": "So a lot of it is to\nimprove your skills, but also there's a\nlot more, I would say,",
    "start": "72530",
    "end": "78620"
  },
  {
    "text": "conceptual, algorithmic\nmaterial in 60002,",
    "start": "78620",
    "end": "84380"
  },
  {
    "text": "and the problem\nsets are designed to help cement that\nas well as just to give you\nprogramming experience.",
    "start": "84380",
    "end": "91260"
  },
  {
    "text": "Finger exercises, small things. If they're taking you more\nthan 15 minutes, let us know.",
    "start": "91260",
    "end": "99150"
  },
  {
    "text": "They really shouldn't,\nand they're generally designed to help you learn\na single concept, usually",
    "start": "99150",
    "end": "105270"
  },
  {
    "text": "a programming concept. Reading assignments\nin the textbooks,",
    "start": "105270",
    "end": "110670"
  },
  {
    "text": "I've already posted the\nfirst reading assignment, and essentially they should\nprovide you a very different",
    "start": "110670",
    "end": "118439"
  },
  {
    "text": "take on the same\nmaterial we're covering in lectures and recitations.",
    "start": "118440",
    "end": "123540"
  },
  {
    "text": "We've tried to choose\ndifferent examples for lectures and from the textbooks\nfor the most part, so you get to see things in\ntwo slightly different ways.",
    "start": "123540",
    "end": "132330"
  },
  {
    "text": "There'll be a final exam\nbased upon all of the above. All right,\nprerequisites-- experience",
    "start": "132330",
    "end": "138599"
  },
  {
    "text": "writing object-oriented\nprograms in Python, preferably Python 3.5.",
    "start": "138600",
    "end": "147570"
  },
  {
    "text": "Familiarity with concepts\nof computational complexity. You'll see even in\ntoday's lecture,",
    "start": "147570",
    "end": "152950"
  },
  {
    "text": "we'll be assuming that. Familiarity with some\nsimple algorithms. ",
    "start": "152950",
    "end": "160870"
  },
  {
    "text": "If you took 60001 or you\ntook the 60001 advanced standing exam, you'll be fine.",
    "start": "160870",
    "end": "169360"
  },
  {
    "text": "Odds are you'll be\nfine anyway, but that's the safest way to do it. So the programming\nassignments are",
    "start": "169360",
    "end": "176890"
  },
  {
    "text": "going to be a bit\neasier, at least that's what students have\nreported in the past, because they'll be more focused\non the problem to be solved",
    "start": "176890",
    "end": "184930"
  },
  {
    "text": "than on the actual programming. The lecture content,\nmore abstract.",
    "start": "184930",
    "end": "190000"
  },
  {
    "text": "The lectures will be-- and maybe I'm speaking\neuphemistically-- a bit faster paced.",
    "start": "190000",
    "end": "195260"
  },
  {
    "text": "So hang on to your seats. And the course is really\nless about programming",
    "start": "195260",
    "end": "201670"
  },
  {
    "text": "and more about dipping your toe\ninto the exotic world of data science.",
    "start": "201670",
    "end": "207880"
  },
  {
    "text": "We do want you to hone\nyour programming skills. There'll be a few\nadditional bits of Python.",
    "start": "207880",
    "end": "213099"
  },
  {
    "text": "Today, for example, we'll\ntalk about lambda abstraction. Inevitably, some comments\nabout software engineering,",
    "start": "213100",
    "end": "220420"
  },
  {
    "text": "how to structure your code,\nmore emphasis in using packages.",
    "start": "220420",
    "end": "225459"
  },
  {
    "text": "Hopefully it will go\na little bit smoother than in the last\nproblem set in 60001.",
    "start": "225460",
    "end": "231370"
  },
  {
    "text": "And finally, it's the old\njoke about programming that somebody walks up to a\ntaxi driver in New York City",
    "start": "231370",
    "end": "240390"
  },
  {
    "text": "and says, \"I'm lost. How do I get to Carnegie Hall?\" The taxi driver\nturns to the person",
    "start": "240390",
    "end": "245819"
  },
  {
    "text": "and says, \"practice,\npractice, practice.\" And that's really the only\nway to learn to program",
    "start": "245820",
    "end": "252090"
  },
  {
    "text": "is practice, practice, practice. ",
    "start": "252090",
    "end": "257290"
  },
  {
    "text": "The main topic of the\ncourse is what I think of as computational models.",
    "start": "257290",
    "end": "262580"
  },
  {
    "text": "How do we use\ncomputation to understand the world in which we live?",
    "start": "262580",
    "end": "268770"
  },
  {
    "text": "What is a model? To me I think of it as\nan experimental device that can help us to either\nunderstand something that",
    "start": "268770",
    "end": "275880"
  },
  {
    "text": "has happened, to sort of build\na model that explains phenomena",
    "start": "275880",
    "end": "280980"
  },
  {
    "text": "we see every day,\nor a model that will allow us to predict\nthe future, something",
    "start": "280980",
    "end": "286320"
  },
  {
    "text": "that hasn't happened. So you can think of, for\nexample, a climate change model.",
    "start": "286320",
    "end": "292320"
  },
  {
    "text": "We can build models that sort\nof explain how the climate has changed over the\nmillennia, and then we",
    "start": "292320",
    "end": "298380"
  },
  {
    "text": "can build probably a\nslightly different model that might predict what it\nwill be like in the future. ",
    "start": "298380",
    "end": "306629"
  },
  {
    "text": "So essentially\nwhat's happening is science is moving out of the\nwet lab and into the computer.",
    "start": "306630",
    "end": "317639"
  },
  {
    "text": "Increasingly, I'm sure\nyou all see this-- those of you who\nare science majors-- an increasing reliance on\ncomputation rather than",
    "start": "317640",
    "end": "325680"
  },
  {
    "text": "traditional experimentation. As we'll talk about,\ntraditional experimentation",
    "start": "325680",
    "end": "332040"
  },
  {
    "text": "is and will remain\nimportant, but now it has to really be\nsupplemented by computation.",
    "start": "332040",
    "end": "339300"
  },
  {
    "text": "We'll talk about three\nkinds of models-- optimization models, statistical\nmodels, and simulation models.",
    "start": "339300",
    "end": "348240"
  },
  {
    "text": "So let's talk first about\noptimization models. An optimization model\nis a very simple thing.",
    "start": "348240",
    "end": "356219"
  },
  {
    "text": "We start with an objective\nfunction that's either to be maximized or minimized.",
    "start": "356220",
    "end": "363340"
  },
  {
    "text": "So for, example, if I'm going\nfrom New York to Boston, I might want to find a\nroute by car or plane",
    "start": "363340",
    "end": "369400"
  },
  {
    "text": "or train that minimizes\nthe total travel time. So my objective\nfunction would be",
    "start": "369400",
    "end": "375610"
  },
  {
    "text": "the number of minutes spent in\ntransit getting from a to b. ",
    "start": "375610",
    "end": "383380"
  },
  {
    "text": "We then often have to layer on\ntop of that objective function",
    "start": "383380",
    "end": "388520"
  },
  {
    "text": "a set of constraints, sometimes\nempty, that we have to obey.",
    "start": "388520",
    "end": "394379"
  },
  {
    "text": "So maybe the fastest way to\nget from New York to Boston is to take a plane, but I\nonly have $100 to spend.",
    "start": "394380",
    "end": "402570"
  },
  {
    "text": "So that option is off the table. So I have the constraints\nthere on the amount",
    "start": "402570",
    "end": "407690"
  },
  {
    "text": "of money I can spend. Or maybe I have to be\nin Boston before 5:00 PM",
    "start": "407690",
    "end": "413480"
  },
  {
    "text": "and while the bus would\nget me there for $15, it won't get me\nthere before 5:00.",
    "start": "413480",
    "end": "420480"
  },
  {
    "text": "And so maybe what I'm\nleft with is driving, something like that.",
    "start": "420480",
    "end": "425870"
  },
  {
    "text": "So objective function,\nsomething you're either minimizing or maximizing,\nand a set of constraints",
    "start": "425870",
    "end": "432950"
  },
  {
    "text": "that eliminate some solutions. And as we'll see, there's\nan asymmetry here.",
    "start": "432950",
    "end": "439550"
  },
  {
    "text": "We handle these two\nthings differently. ",
    "start": "439550",
    "end": "446849"
  },
  {
    "text": "We use these things\nall the time.  I commute to work using Waze,\nwhich essentially is solving--",
    "start": "446850",
    "end": "455420"
  },
  {
    "text": "not very well, I believe--\nan optimization problem to minimize my time\nfrom home to here.",
    "start": "455420",
    "end": "462380"
  },
  {
    "text": "When you travel, maybe you log\ninto various advisory programs that try and optimize\nthings for you.",
    "start": "462380",
    "end": "471470"
  },
  {
    "text": "They're all over the place. Today you really can't avoid\nusing optimization algorithm",
    "start": "471470",
    "end": "478280"
  },
  {
    "text": "as you get through life.  Pretty abstract.",
    "start": "478280",
    "end": "484020"
  },
  {
    "text": "Let's talk about a specific\noptimization problem called the knapsack problem.",
    "start": "484020",
    "end": "490460"
  },
  {
    "text": "The first time I talked\nabout the knapsack problem I neglected to show a\npicture of a knapsack,",
    "start": "490460",
    "end": "495890"
  },
  {
    "text": "and I was 10 minutes\ninto it before I realized most of the class had\nno idea what a knapsack was.",
    "start": "495890",
    "end": "501889"
  },
  {
    "text": "It's what we old people\nused to call a backpack, and they used to look more\nlike that than they look today.",
    "start": "501890",
    "end": "510389"
  },
  {
    "text": "So the knapsack\nproblem involves-- usually it's told in terms of a\nburglar who breaks into a house",
    "start": "510390",
    "end": "519620"
  },
  {
    "text": "and wants to steal\na bunch of stuff but has a knapsack\nthat will only hold a finite amount of stuff\nthat he or she wishes to steal.",
    "start": "519620",
    "end": "528740"
  },
  {
    "text": "And so the burglar has to\nsolve the optimization problem",
    "start": "528740",
    "end": "533750"
  },
  {
    "text": "of stealing the stuff with\nthe most value while obeying the constraint that it all\nhas to fit in the knapsack.",
    "start": "533750",
    "end": "543110"
  },
  {
    "text": "So we have an\nobjective function. I'll get the most for\nthis when I fence it.",
    "start": "543110",
    "end": "550529"
  },
  {
    "text": "And a constraint, it has\nto fit in my backpack. And you can guess\nwhich of these might be",
    "start": "550530",
    "end": "557100"
  },
  {
    "text": "the most valuable items here.  So here is in words, written\nwords what I just said orally.",
    "start": "557100",
    "end": "567890"
  },
  {
    "text": "There's more stuff\nthan you can carry, and you have to choose\nwhich stuff to take and which to leave behind.",
    "start": "567890",
    "end": "573520"
  },
  {
    "text": " I should point out that\nthere are two variants of it.",
    "start": "573520",
    "end": "579890"
  },
  {
    "text": "There's the 0/1 knapsack\nproblem and the continuous.",
    "start": "579890",
    "end": "586740"
  },
  {
    "text": "The 0/1 would be illustrated\nby something like this.",
    "start": "586740",
    "end": "592160"
  },
  {
    "text": "So the 0/1 knapsack problem\nmeans you either take the object or you don't. I take that whole gold\nbar or I take none of it.",
    "start": "592160",
    "end": "601480"
  },
  {
    "text": "The continuous or so-called\nfractional knapsack problem says I can take pieces of it.",
    "start": "601480",
    "end": "607100"
  },
  {
    "text": "So maybe if I take\nin my gold bar and shaved it into gold\ndust, I then can say,",
    "start": "607100",
    "end": "612130"
  },
  {
    "text": "well, the whole\nthing won't fit in, but I can fit in a\npath, part of it. The continuous knapsack\nproblem is really boring.",
    "start": "612130",
    "end": "620940"
  },
  {
    "text": "It's easy to solve. How do you think you would\nsolve the continuous problem? ",
    "start": "620940",
    "end": "629649"
  },
  {
    "text": "Suppose you had over here a pile\nof gold and a pile of silver and a pile of raisins, and you\nwanted to maximize your value.",
    "start": "629650",
    "end": "640010"
  },
  {
    "text": "Well, you'd fill up\nyour knapsack with gold until you either ran out of\ngold or ran out of space.",
    "start": "640010",
    "end": "645905"
  },
  {
    "text": "If you haven't run\nout of space, you'll now put silver in until\nyou run out of space.",
    "start": "645905",
    "end": "652576"
  },
  {
    "text": "If you still haven't\nrun out of space, well, then you'll take as many\nraisins as you can fit in.",
    "start": "652577",
    "end": "657660"
  },
  {
    "text": "But you can solve it with what's\ncalled a greedy algorithm, and we'll talk much more\nabout this as we go forward.",
    "start": "657660",
    "end": "663410"
  },
  {
    "text": " Where you take the best\nthing first as long as",
    "start": "663410",
    "end": "670920"
  },
  {
    "text": "you can and then you move\non to the next thing. As we'll see, the\n0/1 knapsack problem",
    "start": "670920",
    "end": "678920"
  },
  {
    "text": "is much more complicated because\nonce you make a decision, it will affect the\nfuture decisions.",
    "start": "678920",
    "end": "686950"
  },
  {
    "text": "Let's look at an example, and\nI should probably warn you, if you're hungry, this is not\ngoing to be a fun lecture.",
    "start": "686950",
    "end": "695120"
  },
  {
    "text": "So here is my least\nfavorite because I always want to eat more than\nI'm supposed to eat.",
    "start": "695120",
    "end": "701030"
  },
  {
    "text": "So the point is typically\nknapsack problems are not physical knapsacks\nbut some conceptual idea.",
    "start": "701030",
    "end": "708730"
  },
  {
    "text": "So let's say that I'm allowed\n1,500 calories of food,",
    "start": "708730",
    "end": "713829"
  },
  {
    "text": "and these are my options. I have to go about deciding,\nlooking at this food--",
    "start": "713830",
    "end": "720580"
  },
  {
    "text": "and it's interesting, again,\nthere's things showing up on your screen that are not\nshowing up on my screen,",
    "start": "720580",
    "end": "726050"
  },
  {
    "text": "but they're harmless, things\nlike how my mouse works. Anyway, so I'm trying to take\nsome fraction of this food,",
    "start": "726050",
    "end": "737000"
  },
  {
    "text": "and it can't add up to\nmore than 1,500 calories.",
    "start": "737000",
    "end": "743240"
  },
  {
    "text": "The problem might be that\nonce I take something that's 1,485 calories, I\ncan't take anything",
    "start": "743240",
    "end": "750829"
  },
  {
    "text": "else, or maybe 1,200 calories\nand everything else is more than 300.",
    "start": "750830",
    "end": "756380"
  },
  {
    "text": "So once I take one thing, it\nconstrains possible solutions. A greedy algorithm,\nas we'll see,",
    "start": "756380",
    "end": "762540"
  },
  {
    "text": "is not guaranteed to\ngive me the best answer. Let's look at a\nformalization of it.",
    "start": "762540",
    "end": "769670"
  },
  {
    "text": "So each item is represented by\na pair, the value of the item",
    "start": "769670",
    "end": "775510"
  },
  {
    "text": "and the weight of the item. ",
    "start": "775510",
    "end": "781269"
  },
  {
    "text": "And let's assume the knapsack\ncan accommodate items with the total weight\nof no more than w.",
    "start": "781270",
    "end": "790000"
  },
  {
    "text": "I apologize for the\nshort variable names, but they're easier\nto fit on a slide.",
    "start": "790000",
    "end": "796090"
  },
  {
    "text": "Finally, we're going\nto have a vector l of length n representing\nthe set of available items.",
    "start": "796090",
    "end": "804509"
  },
  {
    "text": "This is assuming we have\nn items to choose from. So each element of the\nvector represents an item.",
    "start": "804510",
    "end": "811840"
  },
  {
    "start": "811840",
    "end": "817290"
  },
  {
    "text": "So those are the items we have. And then another\nvector v is going",
    "start": "817290",
    "end": "823139"
  },
  {
    "text": "to indicate whether or\nnot an item was taken. So essentially I'm going\nto use a binary number",
    "start": "823140",
    "end": "829850"
  },
  {
    "text": "to represent the set of\nitems I choose to take. For item three say,\nif bit three is zero",
    "start": "829850",
    "end": "838810"
  },
  {
    "text": "I'm not taking the item. If bit three is one, then\nI am taking the item.",
    "start": "838810",
    "end": "846270"
  },
  {
    "text": "So it just shows I\ncan now very nicely represent what I've done\nby a single vector of zeros",
    "start": "846270",
    "end": "854201"
  },
  {
    "text": "and ones.  Let me pause for a second.",
    "start": "854201",
    "end": "860000"
  },
  {
    "text": "Does anyone have any\nquestions about this setup? It's important to get\nthis setup because what",
    "start": "860000",
    "end": "865630"
  },
  {
    "text": "we're going to see now depends\nupon that setting in your head.",
    "start": "865630",
    "end": "871840"
  },
  {
    "text": "So I've kind of used mathematics\nto describe the backpack problem.",
    "start": "871840",
    "end": "876860"
  },
  {
    "text": "And that's typically the way\nwe deal with these optimization problems. We start with some\ninformal description,",
    "start": "876860",
    "end": "883870"
  },
  {
    "text": "and then we translate them into\na mathematical representation.",
    "start": "883870",
    "end": "888920"
  },
  {
    "text": "So here it is. We're going to try\nand find a vector v that maximizes the sum\nof V sub i times I sub i.",
    "start": "888920",
    "end": "902430"
  },
  {
    "text": " Now, remember I sub i is\nthe value of the item.",
    "start": "902430",
    "end": "909750"
  },
  {
    "text": "V sub i is either zero or one\nSo if I didn't take the item,",
    "start": "909750",
    "end": "917740"
  },
  {
    "text": "I'm multiplying\nits value by zero. So it contributes\nnothing to the sum.",
    "start": "917740",
    "end": "923410"
  },
  {
    "text": "If I did take the item, I'm\nmultiplying its value by one. So the value of the item\ngets added to the sum.",
    "start": "923410",
    "end": "931269"
  },
  {
    "text": "So that tells me the\nvalue of V. And I want to get the\nmost valuable V I",
    "start": "931270",
    "end": "938160"
  },
  {
    "text": "can get subject\nto the constraint",
    "start": "938160",
    "end": "943290"
  },
  {
    "text": "that if I look at the item's\ndot weight and multiply it by V,",
    "start": "943290",
    "end": "948850"
  },
  {
    "text": "the sum of the weights\nis no greater than w.",
    "start": "948850",
    "end": "954670"
  },
  {
    "text": "So I'm playing the same\ntrick with the values of multiplying each\none by zero or one,",
    "start": "954670",
    "end": "961620"
  },
  {
    "text": "and that's my constraint. ",
    "start": "961620",
    "end": "968480"
  },
  {
    "text": "Make sense? All right, so now we have\nthe problem formalized.",
    "start": "968480",
    "end": "976960"
  },
  {
    "text": "How do we solve it? Well, the most obvious\nsolution is brute force.",
    "start": "976960",
    "end": "984860"
  },
  {
    "text": "I enumerate all\npossible combinations of items; that is to say,\nI generate all subsets",
    "start": "984860",
    "end": "996066"
  },
  {
    "text": "of the items that\nare available-- I don't know why it\nsays subjects here, but we should have said items.",
    "start": "996066",
    "end": "1001520"
  },
  {
    "text": "Let me fix that. This is called the power set.",
    "start": "1001520",
    "end": "1007170"
  },
  {
    "text": "So the power set of a set\nincludes the empty subset. It includes the set\nthat includes everything",
    "start": "1007170",
    "end": "1014670"
  },
  {
    "text": "and everything in between. So subsets of size one,\nsubsets of size two, et cetera.",
    "start": "1014670",
    "end": "1023550"
  },
  {
    "text": "So now I've generated all\npossible sets of items. I can now go through\nand sum up the weights",
    "start": "1023550",
    "end": "1030959"
  },
  {
    "text": "and remove all those sets that\nweigh more than I'm allowed.",
    "start": "1030960",
    "end": "1036459"
  },
  {
    "text": "And then from the\nremaining combinations, choose any one whose\nvalue is the largest.",
    "start": "1036460",
    "end": "1043390"
  },
  {
    "text": "I say choose any\none because there could be ties, in which case\nI don't care which I choose. ",
    "start": "1043390",
    "end": "1050740"
  },
  {
    "text": "So it's pretty obvious\nthat this is going to give you a correct answer.",
    "start": "1050740",
    "end": "1057170"
  },
  {
    "text": "You're considering\nall possibilities and choosing a winner. ",
    "start": "1057170",
    "end": "1063290"
  },
  {
    "text": "Unfortunately, it's\nusually not very practical. What we see here is\nthat's what the power",
    "start": "1063290",
    "end": "1071910"
  },
  {
    "text": "set is if you have 100 vec. Not very practical, right,\neven for a fast computer",
    "start": "1071910",
    "end": "1077790"
  },
  {
    "text": "generating that many\npossibilities is going to take a rather long time.",
    "start": "1077790",
    "end": "1084200"
  },
  {
    "text": "So kind of disappointing. We look at it and say, well,\nwe got a brute force algorithm.",
    "start": "1084200",
    "end": "1089340"
  },
  {
    "text": "It will solve the problem,\nbut it'll take too long. We can't actually do it.",
    "start": "1089340",
    "end": "1095090"
  },
  {
    "text": "100 is a pretty\nsmall number, right. We often end up solving\noptimization problems where n is something\ncloser to 1,000, sometimes",
    "start": "1095090",
    "end": "1102830"
  },
  {
    "text": "even a million. Clearly, brute force\nisn't going to work.",
    "start": "1102830",
    "end": "1107970"
  },
  {
    "text": "So that raises\nthe next question, are we just being stupid? Is there a better algorithm\nthat I should have showed you?",
    "start": "1107970",
    "end": "1114970"
  },
  {
    "text": "I shouldn't say we. Am I just being stupid? Is there a better algorithm that\nwould have given us the answer?",
    "start": "1114970",
    "end": "1122950"
  },
  {
    "text": "The sad answer to that is\nno for the knapsack problem.",
    "start": "1122950",
    "end": "1128960"
  },
  {
    "text": "And indeed many\noptimization problems are inherently exponential.",
    "start": "1128960",
    "end": "1136240"
  },
  {
    "text": "What that means is there\nis no algorithm that provides an exact solution\nto this problem whose worst",
    "start": "1136240",
    "end": "1144880"
  },
  {
    "text": "case running time is not\nexponential in the number of items. ",
    "start": "1144880",
    "end": "1152640"
  },
  {
    "text": "It is an exponentially\nhard problem.  There is no really\ngood solution.",
    "start": "1152640",
    "end": "1161809"
  },
  {
    "text": "But that should not make you\nsad because while there's",
    "start": "1161810",
    "end": "1168010"
  },
  {
    "text": "no perfect solution, we're going\nto look at a couple of really very good solutions that\nwill make this poor woman",
    "start": "1168010",
    "end": "1176020"
  },
  {
    "text": "a happier person. So let's start with\nthe greedy algorithm. I already talked to you\nabout greedy algorithms.",
    "start": "1176020",
    "end": "1184360"
  },
  {
    "text": "So it could hardly be simpler. We say while the\nknapsack is not full,",
    "start": "1184360",
    "end": "1190600"
  },
  {
    "text": "put the best available\nitem into the knapsack. ",
    "start": "1190600",
    "end": "1197916"
  },
  {
    "text": "When it's full, we're done. ",
    "start": "1197916",
    "end": "1203710"
  },
  {
    "text": "You do need to ask a question. What does best mean?",
    "start": "1203710",
    "end": "1209289"
  },
  {
    "text": "Is the best item\nthe most valuable? Is it the least\nexpensive in terms",
    "start": "1209290",
    "end": "1216230"
  },
  {
    "text": "of, say, the fewest\ncalories, in my case? Or is it the highest\nratio of value to units?",
    "start": "1216230",
    "end": "1224049"
  },
  {
    "text": "Now, maybe I think a\ncalorie in a glass of beer is worth more than a calorie\nin a bar of chocolate,",
    "start": "1224050",
    "end": "1230590"
  },
  {
    "text": "maybe vice versa. Which gets me to a\nconcrete example.",
    "start": "1230590",
    "end": "1237380"
  },
  {
    "text": "So you're about to\nsit down to a meal. You know how much you value\nthe various different foods.",
    "start": "1237380",
    "end": "1244190"
  },
  {
    "text": "For example, maybe\nyou like donuts more than you like apples. You have a calorie\nbudget, and here we're",
    "start": "1244190",
    "end": "1250070"
  },
  {
    "text": "going to have a fairly\naustere budget-- it's only one meal;\nit's not the whole day-- of 750 calories, and we're going\nto have to go through menus",
    "start": "1250070",
    "end": "1258919"
  },
  {
    "text": "and choose what to eat. That is as we've seen\na knapsack problem.",
    "start": "1258920",
    "end": "1264720"
  },
  {
    "text": "They should probably\nhave a knapsack solver at every McDonald's\nand Burger King.",
    "start": "1264720",
    "end": "1270210"
  },
  {
    "text": "So here's a menu I just made up\nof wine, beer, pizza, burger,",
    "start": "1270210",
    "end": "1276690"
  },
  {
    "text": "fries, Coke,\napples, and a donut, and the value I might\nplace on each of these",
    "start": "1276690",
    "end": "1284580"
  },
  {
    "text": "and the number of calories that\nactually are in each of these. And we're going to\nbuild a program that",
    "start": "1284580",
    "end": "1292049"
  },
  {
    "text": "will find an optimal menu.  And if you don't like this\nmenu, you can run the program",
    "start": "1292050",
    "end": "1300149"
  },
  {
    "text": "and change the values\nto be whatever you like. ",
    "start": "1300150",
    "end": "1306720"
  },
  {
    "text": "Well, as you saw\nif you took 60001, we like to start with\nan abstract data type,",
    "start": "1306720",
    "end": "1314040"
  },
  {
    "text": "like to organize our program\naround data abstractions. So I've got this class food.",
    "start": "1314040",
    "end": "1320580"
  },
  {
    "text": "I can initialize things. I have a getValue,\na getCost, density,",
    "start": "1320580",
    "end": "1327880"
  },
  {
    "text": "which is going to be the value\ndivided by the cost, and then a string representation.",
    "start": "1327880",
    "end": "1334580"
  },
  {
    "text": "So nothing here that you should\nnot all be very familiar with. ",
    "start": "1334580",
    "end": "1343010"
  },
  {
    "text": "Then I'm going to have a\nfunction called buildMenu, which will take\nin a list of names",
    "start": "1343010",
    "end": "1349409"
  },
  {
    "text": "and a list of values of equal\nlength and a list of calories. They're all the same length.",
    "start": "1349410",
    "end": "1356549"
  },
  {
    "text": "And it will build the menu.  So it's going to be\na menu of tuples--",
    "start": "1356550",
    "end": "1364740"
  },
  {
    "text": "a menu of foods, rather. And I build each food by\ngiving it its name, its value,",
    "start": "1364740",
    "end": "1369990"
  },
  {
    "text": "and its caloric content. Now I have a menu. ",
    "start": "1369990",
    "end": "1377210"
  },
  {
    "text": "Now comes the fun part. Here is an implementation\nof a greedy algorithm.",
    "start": "1377210",
    "end": "1383090"
  },
  {
    "text": "I called it a flexible\ngreedy primarily because of this key function over here.",
    "start": "1383090",
    "end": "1388440"
  },
  {
    "text": " So you'll notice in red there's\na parameter called keyfunction.",
    "start": "1388440",
    "end": "1395590"
  },
  {
    "text": " That's going to be-- map the\nelements of items to numbers.",
    "start": "1395590",
    "end": "1402779"
  },
  {
    "text": " So it will be used\nto sort the items.",
    "start": "1402780",
    "end": "1413590"
  },
  {
    "text": "So I want to sort them\nfrom best to worst, and this function will be used\nto tell me what I mean by best.",
    "start": "1413590",
    "end": "1422650"
  },
  {
    "text": "So maybe keyfunction will\njust return the value or maybe",
    "start": "1422650",
    "end": "1427660"
  },
  {
    "text": "it will return the weight\nor maybe it will return some function of the density.",
    "start": "1427660",
    "end": "1433960"
  },
  {
    "text": "But the idea here\nis I want to use one greedy algorithm\nindependently",
    "start": "1433960",
    "end": "1440830"
  },
  {
    "text": "of my definition of best. So I use keyfunction to\ndefine what I mean by best.",
    "start": "1440830",
    "end": "1447025"
  },
  {
    "text": " So I'm going to come in.",
    "start": "1447025",
    "end": "1452720"
  },
  {
    "text": "I'm going to sort it\nfrom best to worst. And then for i in range\nlen of items sub copy--",
    "start": "1452720",
    "end": "1461020"
  },
  {
    "text": "I'm being good. I've copied it. That's why you sorted\nrather than sort. I don't want to have a side\neffect in the parameter.",
    "start": "1461020",
    "end": "1468669"
  },
  {
    "text": "In general, it's not\ngood hygiene to do that.",
    "start": "1468670",
    "end": "1473750"
  },
  {
    "text": "And so for-- I'll go through\nit in order from best to worst. And if the value is less\nthan the maximum cost,",
    "start": "1473750",
    "end": "1484240"
  },
  {
    "text": "if putting it in would keep\nme under the cost or not over the cost, I put\nit in, and I just",
    "start": "1484240",
    "end": "1490309"
  },
  {
    "text": "do that until I can't\nput anything else in. ",
    "start": "1490310",
    "end": "1496610"
  },
  {
    "text": "So I might skip a few because\nI might get to the point where there's only\na few calories left,",
    "start": "1496610",
    "end": "1502400"
  },
  {
    "text": "and the next best item is\nover that budget but maybe further down I'll find one that\nis not over it and put it in.",
    "start": "1502400",
    "end": "1512040"
  },
  {
    "text": "That's why I can't exit\nas soon as I reach-- as soon as I find an\nitem that won't fit.",
    "start": "1512040",
    "end": "1519600"
  },
  {
    "text": "And then I'll just return. Does this make sense?",
    "start": "1519600",
    "end": "1524782"
  },
  {
    "text": "Does anyone have any doubts\nabout whether this algorithm actually works? ",
    "start": "1524782",
    "end": "1533974"
  },
  {
    "text": "I hope not because I\nthink it does work.  Let's ask the next question.",
    "start": "1533974",
    "end": "1539645"
  },
  {
    "text": " How efficient do we think it is? ",
    "start": "1539645",
    "end": "1547840"
  },
  {
    "text": "What is the efficiency\nof this algorithm? ",
    "start": "1547840",
    "end": "1557250"
  },
  {
    "text": "Let's see where the time goes. That's the algorithm\nwe just looked at.",
    "start": "1557250",
    "end": "1564340"
  },
  {
    "text": "So I deleted the\ncomment, so we'd have a little more\nroom in the slide. ",
    "start": "1564340",
    "end": "1571150"
  },
  {
    "text": "Who wants to make a guess? By the way, this\nis the question. So please go answer\nthe questions.",
    "start": "1571150",
    "end": "1577430"
  },
  {
    "text": "We'll see how people do. But we can think about\nit as well together. ",
    "start": "1577430",
    "end": "1585010"
  },
  {
    "text": "Well, let's see\nwhere the time goes.",
    "start": "1585010",
    "end": "1590110"
  },
  {
    "text": "The first thing is at the sort. So I'm going to\nsort all the items.",
    "start": "1590110",
    "end": "1597940"
  },
  {
    "text": "And we heard from\nProfessor Grimson how long the sort takes.",
    "start": "1597940",
    "end": "1604580"
  },
  {
    "text": "See who remembers. Python uses something\ncalled timsort,",
    "start": "1604580",
    "end": "1610190"
  },
  {
    "text": "which is a variant of something\ncalled quicksort, which has the same worst-case\ncomplexity as merge sort.",
    "start": "1610190",
    "end": "1619940"
  },
  {
    "text": "And so we know that is n\nlog n where n in this case",
    "start": "1619940",
    "end": "1629259"
  },
  {
    "text": "would be the len of items. ",
    "start": "1629260",
    "end": "1637600"
  },
  {
    "text": "So we know we have that. ",
    "start": "1637600",
    "end": "1645780"
  },
  {
    "text": "Then we have a loop. How many times do we\ngo through this loop? ",
    "start": "1645780",
    "end": "1654670"
  },
  {
    "text": "Well, we go through the loop\nn times, once for each item",
    "start": "1654670",
    "end": "1662030"
  },
  {
    "text": "because we do end up\nlooking at every item. ",
    "start": "1662030",
    "end": "1667250"
  },
  {
    "text": "And if we know that,\nwhat's the order? AUDIENCE: [INAUDIBLE].",
    "start": "1667250",
    "end": "1672758"
  },
  {
    "start": "1672758",
    "end": "1679674"
  },
  {
    "text": "JOHN GUTTAG: N log n plus n-- I guess is order n log n, right?",
    "start": "1679674",
    "end": "1689570"
  },
  {
    "text": "So it's pretty efficient. And we can do this for big\nnumbers like a million.",
    "start": "1689570",
    "end": "1697370"
  },
  {
    "text": " Log of a million times a million\nis not a very big number.",
    "start": "1697370",
    "end": "1703190"
  },
  {
    "text": " So it's very efficient.",
    "start": "1703190",
    "end": "1709411"
  },
  {
    "text": " Here's some code\nthat uses greedy. ",
    "start": "1709411",
    "end": "1717000"
  },
  {
    "text": "Takes in the items, the\nconstraint, in this case will be the weight,\nand just calls greedy,",
    "start": "1717000",
    "end": "1726800"
  },
  {
    "text": "but with the keyfunction\nand prints what we have. ",
    "start": "1726800",
    "end": "1736140"
  },
  {
    "text": "So we're going to test greedy. I actually think I used 750 in\nthe code, but we can use 800.",
    "start": "1736140",
    "end": "1742280"
  },
  {
    "text": "It doesn't matter. And here's something\nwe haven't seen before.",
    "start": "1742280",
    "end": "1748430"
  },
  {
    "text": "So used greedy by\nvalue to allocate and calls testGreedy with food,\nmaxUnits and Food.getValue.",
    "start": "1748430",
    "end": "1755570"
  },
  {
    "text": "Notice it's passing\nthe function. That's why it's not-- no closed parentheses after it.",
    "start": "1755570",
    "end": "1761560"
  },
  {
    "text": "Used greedy to allocate. And then we have something\npretty interesting.",
    "start": "1761560",
    "end": "1767238"
  },
  {
    "text": " What's going on\nwith this lambda? ",
    "start": "1767238",
    "end": "1775659"
  },
  {
    "text": "So here we're going to be using\ngreedy by density to allocate--",
    "start": "1775660",
    "end": "1781210"
  },
  {
    "text": "actually, sorry, this\nis greedy by cost. And you'll notice\nwhat we're doing is--",
    "start": "1781210",
    "end": "1787029"
  },
  {
    "text": "we don't want to\npass in the cost, right, because we really want\nthe opposite of the cost.",
    "start": "1787030",
    "end": "1796730"
  },
  {
    "text": "We want to reverse the sort\nbecause we want the cheaper items to get chosen first.",
    "start": "1796730",
    "end": "1802610"
  },
  {
    "text": "The ones that have fewer\ncalories, not the ones that have more calories. As it happens,\nwhen I define cost,",
    "start": "1802610",
    "end": "1810740"
  },
  {
    "text": "I defined it in the obvious way,\nthe total number of calories. So I could have gone and written\nanother function to do it,",
    "start": "1810740",
    "end": "1819020"
  },
  {
    "text": "but since it was so simple,\nI decided to do it in line.",
    "start": "1819020",
    "end": "1824300"
  },
  {
    "text": "So let's talk about lambda\nand then come back to it. Lambda is used to create\nan anonymous function,",
    "start": "1824300",
    "end": "1832880"
  },
  {
    "text": "anonymous in the sense\nthat it has no name. So you start with\nthe keyword lambda.",
    "start": "1832880",
    "end": "1841110"
  },
  {
    "text": "You then give it a\nsequence of identifiers and then some expression.",
    "start": "1841110",
    "end": "1846210"
  },
  {
    "text": " What lambda does is\nit builds a function",
    "start": "1846210",
    "end": "1855559"
  },
  {
    "text": "that evaluates that expression\non those parameters and returns",
    "start": "1855560",
    "end": "1861410"
  },
  {
    "text": "the result of evaluating\nthe expression. So instead of writing def, I\nhave inline defined a function.",
    "start": "1861410",
    "end": "1872130"
  },
  {
    "text": "So if we go back to it here,\nyou can see that what I've done",
    "start": "1872130",
    "end": "1877190"
  },
  {
    "text": "is lambda x one divided\nby Food.getCost of x.",
    "start": "1877190",
    "end": "1884762"
  },
  {
    "text": " Notice food is the\nclass name here.",
    "start": "1884762",
    "end": "1893290"
  },
  {
    "text": "So I'm taking the function\ngetCost from the class food,",
    "start": "1893290",
    "end": "1898480"
  },
  {
    "text": "and I'm passing it the parameter\nx, which is going to be what?",
    "start": "1898480",
    "end": "1906350"
  },
  {
    "text": "What's the type\nof x going to be? ",
    "start": "1906350",
    "end": "1916169"
  },
  {
    "text": "I can wait you out. What is the type of x have to\nbe for this lambda expression",
    "start": "1916170",
    "end": "1922570"
  },
  {
    "text": "to make sense? ",
    "start": "1922570",
    "end": "1929830"
  },
  {
    "text": "Well, go back to the class food. What's the type of the\nargument of getCost?",
    "start": "1929830",
    "end": "1936040"
  },
  {
    "start": "1936040",
    "end": "1942020"
  },
  {
    "text": "What's the name of the\nargument to getCost? That's an easier question. ",
    "start": "1942020",
    "end": "1951211"
  },
  {
    "text": "We'll go back and\nwe'll look at it. ",
    "start": "1951212",
    "end": "1960979"
  },
  {
    "text": "What's the type of the\nargument to getCost? ",
    "start": "1960979",
    "end": "1966310"
  },
  {
    "text": "AUDIENCE: Food. JOHN GUTTAG: Food. Thank you. So I do have--\nspeaking of food, we",
    "start": "1966310",
    "end": "1975140"
  },
  {
    "text": "do have a tradition\nin this class that people who answer\nquestions correctly get",
    "start": "1975140",
    "end": "1980490"
  },
  {
    "text": "rewarded with food. Oh, Napoli would\nhave caught that.",
    "start": "1980490",
    "end": "1987789"
  },
  {
    "text": " So it has to be of\ntype food because it's",
    "start": "1987790",
    "end": "1995750"
  },
  {
    "text": "self in the class food. ",
    "start": "1995750",
    "end": "2008190"
  },
  {
    "text": "So if we go back to here, this\nx has to be of type food, right.",
    "start": "2008190",
    "end": "2015149"
  },
  {
    "start": "2015150",
    "end": "2020450"
  },
  {
    "text": "And sure enough, when\nwe use it, it will be. Let's now use it.",
    "start": "2020450",
    "end": "2028240"
  },
  {
    "text": "I should point out that lambda\ncan be really handy as it",
    "start": "2028240",
    "end": "2034350"
  },
  {
    "text": "is here, and it's\npossible to write amazing, beautiful,\ncomplicated lambda expressions.",
    "start": "2034350",
    "end": "2042270"
  },
  {
    "text": "And back in the good old days of\n6001 people learned to do that.",
    "start": "2042270",
    "end": "2048790"
  },
  {
    "text": "And then they learned\nthat they shouldn't. My view on lambda expressions\nis if I can't fit it",
    "start": "2048790",
    "end": "2055590"
  },
  {
    "text": "in a single line,\nI just go right def and write a\nfunction definition because it's easier to debug.",
    "start": "2055590",
    "end": "2062580"
  },
  {
    "text": "But for one-liners,\nlambda is great. ",
    "start": "2062580",
    "end": "2068690"
  },
  {
    "text": "Let's look at using greedy. So here's this\nfunction testGreedy,",
    "start": "2068690",
    "end": "2074339"
  },
  {
    "text": "takes foods and the\nmaximum number of units. ",
    "start": "2074340",
    "end": "2079520"
  },
  {
    "text": "And it's going to\ngo through and it's going to test all three\ngreedy algorithms.",
    "start": "2079520",
    "end": "2085792"
  },
  {
    "text": " And we just saw that, and\nthen here is the call of it.",
    "start": "2085792",
    "end": "2092340"
  },
  {
    "text": "And so I picked up some\nnames and the values. This is just the menu we saw.",
    "start": "2092340",
    "end": "2097940"
  },
  {
    "text": "I'm going to build the\nmenus, and then I'm going to call testGreedys. So let's go look at the\ncode that does this.",
    "start": "2097940",
    "end": "2106250"
  },
  {
    "text": " So here you have it or maybe\nyou don't, because every time",
    "start": "2106250",
    "end": "2115470"
  },
  {
    "text": "I switch applications\nWindows decides I don't want to show you the screen anyway.",
    "start": "2115470",
    "end": "2121210"
  },
  {
    "start": "2121210",
    "end": "2127720"
  },
  {
    "text": "This really shouldn't\nbe necessary. ",
    "start": "2127720",
    "end": "2135230"
  },
  {
    "text": "Keep changes. Why it keeps forgetting,\nI don't know. Anyway, so here's the code.",
    "start": "2135230",
    "end": "2141270"
  },
  {
    "text": "It's all the code\nwe just looked at. Now let's run it. ",
    "start": "2141270",
    "end": "2147690"
  },
  {
    "text": "Well, what we see\nhere is that we use greedy by value to\nallocate 750 calories,",
    "start": "2147690",
    "end": "2156000"
  },
  {
    "text": "and it chooses a\nburger, the pizza, and the wine for a total of-- a value of 284 happiness\npoints, if you will.",
    "start": "2156000",
    "end": "2167140"
  },
  {
    "text": "On the other hand, if\nwe use greedy by cost, I get 318 happiness points and\na different menu, the apple,",
    "start": "2167140",
    "end": "2176910"
  },
  {
    "text": "the wine, the cola, the\nbeer, and the donut. I've lost the pizza\nand the burger. ",
    "start": "2176910",
    "end": "2185010"
  },
  {
    "text": "I guess this is what\nI signed up for when I put my preferences on. ",
    "start": "2185010",
    "end": "2191819"
  },
  {
    "text": "And here's another solution\nwith 318, apple, wine--",
    "start": "2191820",
    "end": "2202330"
  },
  {
    "text": "yeah, all right. So I actually got\nthe same solution, but it just found them\nin a different order.",
    "start": "2202330",
    "end": "2209760"
  },
  {
    "text": "Why did it find them\nin a different order? Because the sort order was\ndifferent because in this case",
    "start": "2209760",
    "end": "2215200"
  },
  {
    "text": "I was sorting by density. ",
    "start": "2215200",
    "end": "2220390"
  },
  {
    "text": "From this, we see\nan important point about greedy algorithms, right,\nthat we used the algorithm",
    "start": "2220390",
    "end": "2228670"
  },
  {
    "text": "and we got different answers.  Why do we have\ndifferent answers?",
    "start": "2228670",
    "end": "2234625"
  },
  {
    "text": " The problem is that\na greedy algorithm",
    "start": "2234625",
    "end": "2240860"
  },
  {
    "text": "makes a sequence of\nlocal optimizations, chooses the locally optimal\nanswer at every point,",
    "start": "2240860",
    "end": "2249410"
  },
  {
    "text": "and that doesn't\nnecessarily add up to a globally optimal answer.",
    "start": "2249410",
    "end": "2254510"
  },
  {
    "text": "This is often illustrated by\nshowing an example of, say, hill climbing.",
    "start": "2254510",
    "end": "2260730"
  },
  {
    "text": "So imagine you're in a terrain\nthat looks something like this,",
    "start": "2260730",
    "end": "2267410"
  },
  {
    "text": "and you want to get to the\nhighest point you can get.",
    "start": "2267410",
    "end": "2272420"
  },
  {
    "text": "So you might choose\nas a greedy algorithm if you can go up, go up; if\nyou can't go up, you stop.",
    "start": "2272420",
    "end": "2283520"
  },
  {
    "text": "So whenever you get\na choice, you go up. And so if I start here, I\ncould right in the middle",
    "start": "2283520",
    "end": "2294589"
  },
  {
    "text": "maybe say, all right, it's not\nup but it's not down either. So I'll go either left or right.",
    "start": "2294590",
    "end": "2300510"
  },
  {
    "text": " And let's say I go\nright, so I come to here.",
    "start": "2300510",
    "end": "2307120"
  },
  {
    "text": "Then I'll just make my way\nup to the top of the hill, making a locally optimal\ndecision head up at each point,",
    "start": "2307120",
    "end": "2314670"
  },
  {
    "text": "and I'll get here and I'll\nsay, well, now any place I go takes me to a lower point.",
    "start": "2314670",
    "end": "2320190"
  },
  {
    "text": "So I don't want to do it, right,\nbecause the greedy algorithm says never go backwards.",
    "start": "2320190",
    "end": "2327110"
  },
  {
    "text": "So I'm here and I'm happy. On the other hand, if I had\ngone here for my first step,",
    "start": "2327110",
    "end": "2336560"
  },
  {
    "text": "then my next step up would take\nme up, up, up, I'd get to here,",
    "start": "2336560",
    "end": "2341960"
  },
  {
    "text": "and I'd stop and say, OK,\nno way to go but down.",
    "start": "2341960",
    "end": "2348250"
  },
  {
    "text": "I don't want to go down. I'm done. And what I would find is I'm\nat a local maximum rather than",
    "start": "2348250",
    "end": "2354170"
  },
  {
    "text": "a global maximum.  And that's the problem\nwith greedy algorithms,",
    "start": "2354170",
    "end": "2361160"
  },
  {
    "text": "that you can get stuck\nat a local optimal point",
    "start": "2361160",
    "end": "2366380"
  },
  {
    "text": "and not get to the best one. Now, we could ask\nthe question, can",
    "start": "2366380",
    "end": "2377020"
  },
  {
    "text": "I just say don't\nworry about a density will always get me\nthe best answer?",
    "start": "2377020",
    "end": "2383260"
  },
  {
    "text": "Well, I've tried a\ndifferent experiment. Let's say I'm feeling\nexpansive and I'm going to allow myself 1,000 calories.",
    "start": "2383260",
    "end": "2397820"
  },
  {
    "text": "Well, here what we see is the\nwinner will be greedy by value,",
    "start": "2397820",
    "end": "2409800"
  },
  {
    "text": "happens to find a better\nanswer, 424 instead of 413. ",
    "start": "2409800",
    "end": "2415990"
  },
  {
    "text": "So there is no way\nto know in advance. Sometimes this definition\nof best might work.",
    "start": "2415990",
    "end": "2422520"
  },
  {
    "text": "Sometimes that might work. Sometimes no definition\nof best will work,",
    "start": "2422520",
    "end": "2427950"
  },
  {
    "text": "and you can't get\nto a good solution-- you get to a good solution.",
    "start": "2427950",
    "end": "2433170"
  },
  {
    "text": "You can't get to\nan optimal solution with a greedy algorithm. On Wednesday, we'll talk\nabout how do you actually",
    "start": "2433170",
    "end": "2440940"
  },
  {
    "text": "guarantee finding an\noptimal solution in a better way than brute force.",
    "start": "2440940",
    "end": "2446730"
  },
  {
    "text": "See you then. ",
    "start": "2446730",
    "end": "2456229"
  }
]