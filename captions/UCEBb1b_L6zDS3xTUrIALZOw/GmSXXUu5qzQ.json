[
  {
    "start": "0",
    "end": "95000"
  },
  {
    "start": "0",
    "end": "9950"
  },
  {
    "text": "PROFESSOR: So what\nI'm going to do is, I'm going to do these\ntwo units of scheduling.",
    "start": "9950",
    "end": "16580"
  },
  {
    "text": "And I will start with\ntalking a little bit about modern architecture.",
    "start": "16580",
    "end": "22022"
  },
  {
    "text": "So this is this lecture\nand next lecture. We'll see how far\nwe can go today. And then, introduce\ninstruction scheduling,",
    "start": "22022",
    "end": "27770"
  },
  {
    "text": "what we are doing\ninstruction scheduling. Talk about the most basic\nform of scheduling which",
    "start": "27770",
    "end": "33770"
  },
  {
    "text": "is called list scheduling. At the beginning,\nwe'll talk about with a very simple architecture. Then we'll keep improving\nthe architecture.",
    "start": "33770",
    "end": "39990"
  },
  {
    "text": "For example, add\nresource constraints to the architecture. And then, up to\nthis point, we'll",
    "start": "39990",
    "end": "45020"
  },
  {
    "text": "just work within basic blocks. And then, we start going\nacross basic blocks",
    "start": "45020",
    "end": "50150"
  },
  {
    "text": "to say, OK, how to\nschedule large regions. And in the same vein,\none technical to doing",
    "start": "50150",
    "end": "56870"
  },
  {
    "text": "across large regions\nis trace scheduling. I'll go into trace\nscheduling in a little bit. And then, switch\ntopics a little bit",
    "start": "56870",
    "end": "62030"
  },
  {
    "text": "to look at how to\nschedule loops. Because a lot of times,\nperformance is mainly in loops. I will look at things like\nloop unrolling and software",
    "start": "62030",
    "end": "68690"
  },
  {
    "text": "pipelining for loops. And then, go a little\nbit into interactions",
    "start": "68690",
    "end": "75350"
  },
  {
    "text": "with register allocation,\nhow scheduling and register allocation\ninteract with each other. And finally, conclude\nwith scheduling",
    "start": "75350",
    "end": "83840"
  },
  {
    "text": "it's done in hardware\nversus compiler, what are the\ntrade-offs, and what's interesting things in there. So this is a lot of things.",
    "start": "83840",
    "end": "90060"
  },
  {
    "text": "And hopefully, we'll try\nto get to about halfway through in here today.",
    "start": "90060",
    "end": "95280"
  },
  {
    "start": "95000",
    "end": "397000"
  },
  {
    "text": "So interesting thing is when\nwe are compiling in a machine, so till now, most\noptimizations you guys did",
    "start": "95280",
    "end": "103090"
  },
  {
    "text": "didn't deal with the machine. They will run faster in any\nmachine, no matter what.",
    "start": "103090",
    "end": "109510"
  },
  {
    "text": "Now we are switching\ninto, OK, now the compiler actually has\nto know about the machine and how to take\nadvantage of what's",
    "start": "109510",
    "end": "116110"
  },
  {
    "text": "happening in the machine. So you do that\nfirst to understand what the machine looks like.",
    "start": "116110",
    "end": "121320"
  },
  {
    "text": "So the machine basically,\na simple machine, fetches, decodes, and\nexecutes instructions,",
    "start": "121320",
    "end": "126600"
  },
  {
    "text": "and storing stuff. That's what it does, one\ninstruction at a time. And if you have a-- so you go\ninstruction after instruction.",
    "start": "126600",
    "end": "133210"
  },
  {
    "text": "Sometimes when you have branch,\nit might check the condition and might start switching\nfrom somewhere else.",
    "start": "133210",
    "end": "138540"
  },
  {
    "text": "So sometimes this pipeline\ngets stalled in a branch. So if you look at a\nvery simple pipeline,",
    "start": "138540",
    "end": "144390"
  },
  {
    "text": "this is things\nlike 004 pipeline. You probably did this in 004. What happens if there\nare five stages?",
    "start": "144390",
    "end": "150780"
  },
  {
    "text": "It's the first stage,\nget the next instruction, decode, find out what\nthis instruction actually want to do.",
    "start": "150780",
    "end": "156480"
  },
  {
    "text": "Execute the ALU operations. The interesting\nthing is, you only need the values from\nthe previous calculation",
    "start": "156480",
    "end": "163500"
  },
  {
    "text": "at this stage. So you can fetch and\ndecode without knowing any kind of dependencies.",
    "start": "163500",
    "end": "169410"
  },
  {
    "text": "But now if you're using a result\nfrom a previous instruction, it better be available\nat the execute time.",
    "start": "169410",
    "end": "174870"
  },
  {
    "text": "And if it is, for example,\nif the memory of it",
    "start": "174870",
    "end": "180209"
  },
  {
    "text": "might just calculate\nthe address, you store it in the memory. And if you want to write\nback to the register,",
    "start": "180210",
    "end": "186150"
  },
  {
    "text": "you write back at that stage. So this is basically the\nstage you go through. So in a normal very\nsimple machine,",
    "start": "186150",
    "end": "193020"
  },
  {
    "text": "one probably you\ndid it in a 004, you basically do\ninstructional time.",
    "start": "193020",
    "end": "198510"
  },
  {
    "text": "Go to through all the five\nstages of one instruction. You're done with it, you\ndo the next instruction.",
    "start": "198510",
    "end": "203850"
  },
  {
    "text": "But this is very slow, so the\nway you get a lot of speed out of these machines is you\nactually pipeline them.",
    "start": "203850",
    "end": "210360"
  },
  {
    "text": "So what you do is,\neach state, when you're done with the\ninstruction phase,",
    "start": "210360",
    "end": "215640"
  },
  {
    "text": "before the\ninstruction phase will go into the next\ninstruction before the rest of the stages of the\nprevious instruction is done.",
    "start": "215640",
    "end": "222790"
  },
  {
    "text": "So here, what happens is-- oops. What happened?",
    "start": "222790",
    "end": "228170"
  },
  {
    "text": "That's not the right\nbutton to press. [INAUDIBLE] OK. Here's the laser.",
    "start": "228170",
    "end": "233780"
  },
  {
    "text": "So what happens is, assume value\nproduced by this instruction",
    "start": "233780",
    "end": "239600"
  },
  {
    "text": "is going to be used\nby this instruction. And at that point,\nyou can't just execute here, because\nthe right data is not",
    "start": "239600",
    "end": "244700"
  },
  {
    "text": "available until the\nright back stage. So at that point,\nthere's a pipeline stall. So that's basically what\nhappened in pipeline stalls.",
    "start": "244700",
    "end": "252170"
  },
  {
    "text": "And so, that's a\nvery simple way. But when you go to\nreal machines model, things get very a\nlot more complicated.",
    "start": "252170",
    "end": "258419"
  },
  {
    "text": "So for example, good old Pentium\nhad a five-stage pipeline. Just like that. Pentium Pro had a\n10-stage pipeline.",
    "start": "258420",
    "end": "265550"
  },
  {
    "text": "The Pentium, first Pentium\n4 has a 20-stage pipeline. Now it's a 31-stage pipeline.",
    "start": "265550",
    "end": "271500"
  },
  {
    "text": "So these things are going\ngrowing by the minute. It's a much larger\ndeeper pipeline.",
    "start": "271500",
    "end": "276590"
  },
  {
    "text": "So because of that scheduling\nand getting everything right, it's lot more useful and\nvaluable in these machines.",
    "start": "276590",
    "end": "283810"
  },
  {
    "text": "And other thing is,\ndifferent instructions take different amount of time. So if you do an add of two\nintegers that from register,",
    "start": "283810",
    "end": "291910"
  },
  {
    "text": "and in a register,\nit's very fast. On the other hand, if you\nare loading from memory and doing a multiplication\nor a division,",
    "start": "291910",
    "end": "298690"
  },
  {
    "text": "it can take a lot longer. So you need to know\nthe length in there. It's not all the same length.",
    "start": "298690",
    "end": "305240"
  },
  {
    "text": "And what happens is in\nhardware, if the results are not available, pipeline stalls.",
    "start": "305240",
    "end": "310600"
  },
  {
    "text": "So assume I need a device\ndivision instruction and immediately use the result.\nAnd you look at it and say, oops, results are not available.",
    "start": "310600",
    "end": "316490"
  },
  {
    "text": "I can't keep that\nexecuting that instruction. I just have to stall. So this is why instruction\nscheduling is very important.",
    "start": "316490",
    "end": "325550"
  },
  {
    "text": "So there are other things\nin modern machines. There are multiple\nexecution units in a superscalar type machine.",
    "start": "325550",
    "end": "331900"
  },
  {
    "text": "If instructions are\nnicely sequenced, they can execute parallely, get\na lot of parallel performance.",
    "start": "331900",
    "end": "339349"
  },
  {
    "text": "On the other hand, if\nthere are dependencies, if the instructions are not\nplaced exactly the right way the machine can take advantage,\nit's not just only stall,",
    "start": "339350",
    "end": "346660"
  },
  {
    "text": "it's just might only few weeks\ncan work in parallel instead of getting everybody to work.",
    "start": "346660",
    "end": "352180"
  },
  {
    "text": "So it's even more\nimportant to have the right set of instructions\nin the right order.",
    "start": "352180",
    "end": "357520"
  },
  {
    "text": "And what instruction\nscheduling does is basically we reorder\nthe instructions",
    "start": "357520",
    "end": "362590"
  },
  {
    "text": "so that the pipeline\nstalls are minimized. And also, I can add-- you\ncan get the maximum amount of parallelism. So that's basically\nwhat we are trying to do",
    "start": "362590",
    "end": "369053"
  },
  {
    "text": "in instruction scheduling. So we can just go and keep\npre-ordering any instructions",
    "start": "369053",
    "end": "374700"
  },
  {
    "text": "all over the place. There's some-- you have to make\nsure that the original program",
    "start": "374700",
    "end": "379920"
  },
  {
    "text": "behavior is maintained. So the way we manage to maintain\nthe original program behavior is looking at three\ndifferent constraints.",
    "start": "379920",
    "end": "386760"
  },
  {
    "text": "For example, data dependencies,\ncontrol dependencies, and resource constraints.",
    "start": "386760",
    "end": "392470"
  },
  {
    "text": "So there are three\nthings you have to make sure that the program-- that you maintain in there. So data dependencies--\nwhat it means",
    "start": "392470",
    "end": "401240"
  },
  {
    "start": "397000",
    "end": "672000"
  },
  {
    "text": "is if two instructions\naccess the same variable, they are dependent.",
    "start": "401240",
    "end": "406389"
  },
  {
    "text": "And you'd make sure that\naccess pattern, that variable is maintained properly.",
    "start": "406390",
    "end": "412010"
  },
  {
    "text": "So there are three types\nof access methods-- dependencies. It's called true dependency.",
    "start": "412010",
    "end": "417190"
  },
  {
    "text": "True dependency means\nsome guy rise to variable. The next carry the variable. So you better make sure that the\nwrite happened before the read,",
    "start": "417190",
    "end": "425540"
  },
  {
    "text": "and the read in fact get\nthe value of the write. Otherwise, it's incorrect. There are two other types of\ndependence, anti and output.",
    "start": "425540",
    "end": "431830"
  },
  {
    "text": " So since we have\na small class, I'd like to see whether we can\nget a little bit discussion",
    "start": "431830",
    "end": "439270"
  },
  {
    "text": "and interaction going on. So what's anti? Why is anti and\noutput dependencies-- I mean, are they fundamental?",
    "start": "439270",
    "end": "445690"
  },
  {
    "start": "445690",
    "end": "454760"
  },
  {
    "text": "Why is there anti and\noutput dependence? Let's look at anti-dependence. So assume I read a variable\nand then I write it.",
    "start": "454760",
    "end": "462289"
  },
  {
    "text": "Why do I have to\nmaintain that dependence? ",
    "start": "462290",
    "end": "468080"
  },
  {
    "text": "So I have chalk here?",
    "start": "468080",
    "end": "474778"
  },
  {
    "text": "Huh. AUDIENCE: [INAUDIBLE] PROFESSOR: Oh, OK. A lot of chalk.",
    "start": "474778",
    "end": "482080"
  },
  {
    "text": "So I assume I have\nsomething like just-- ",
    "start": "482080",
    "end": "491436"
  },
  {
    "text": "you'll see-- a equals b\nplus 5, and b equals 3.",
    "start": "491436",
    "end": "499570"
  },
  {
    "text": " So why do I have to\nmaintain this dependence?",
    "start": "499570",
    "end": "506159"
  },
  {
    "text": " Why do I have to do this\ninstruction before this?",
    "start": "506160",
    "end": "512687"
  },
  {
    "text": "AUDIENCE: If you had\na processor on this-- I don't think this would happen\nwith the five stage pipeline.",
    "start": "512687",
    "end": "519159"
  },
  {
    "text": "But it could be possible\nthat since b equals 3, is such a simple\nstatement, even though it",
    "start": "519159",
    "end": "524365"
  },
  {
    "text": "comes later and\nbegins execution, or it's dispatched after\nthe first instruction,",
    "start": "524365",
    "end": "530860"
  },
  {
    "text": "that it could be executed first. PROFESSOR: Yeah.",
    "start": "530860",
    "end": "536080"
  },
  {
    "text": "Let's make-- oh, if you\nwant to make it complicated, I can make it 3 plus d. So here's the thing in here.",
    "start": "536080",
    "end": "541480"
  },
  {
    "text": "The thing here is,\nall these variables have some location somewhere. This is the location I keep b.",
    "start": "541480",
    "end": "547120"
  },
  {
    "text": " The thing is, I better\nread this value here",
    "start": "547120",
    "end": "552550"
  },
  {
    "text": "before I overwrite it, because\nit's in the same location. It's a location-based\ndependency.",
    "start": "552550",
    "end": "558070"
  },
  {
    "text": "So if I keep the\nvalue, if I want to-- minute I do this instruction,\nfinish it, this value is gone.",
    "start": "558070",
    "end": "564970"
  },
  {
    "text": "I have a new value here. And if somebody wants\nit, I can't just get rid of the value,\nbecause somebody else",
    "start": "564970",
    "end": "571380"
  },
  {
    "text": "is going to want it. So the anti-dependence\nmeans that if I'm actually using a value, I better\nhave all the instructions",
    "start": "571380",
    "end": "578430"
  },
  {
    "text": "I use that value done\nbefore I actually go and modify that value\nor get rid of the value.",
    "start": "578430",
    "end": "584320"
  },
  {
    "text": "So how do we get rid\nof anti-dependence? ",
    "start": "584320",
    "end": "607904"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: Exactly. Because it's basically--\nthere's no real true use",
    "start": "607904",
    "end": "613300"
  },
  {
    "text": "of the data, the value. But it just because\nit's both [INAUDIBLE] share the same location.",
    "start": "613300",
    "end": "619150"
  },
  {
    "text": "Why don't I just--\ninstead of b, I'll just allocate a new location. I will say, this\nwould be b prime,",
    "start": "619150",
    "end": "625190"
  },
  {
    "text": "which actually gets\nanother block here. And I'm pretty happy. I can now reorder.",
    "start": "625190",
    "end": "630430"
  },
  {
    "text": "So its output is the same. Output basically is,\nif I am writing twice, the last value has to survive.",
    "start": "630430",
    "end": "636820"
  },
  {
    "text": " So you don't want to\nwrite in the wrong order and then the wrong\nvalue survives.",
    "start": "636820",
    "end": "642737"
  },
  {
    "text": "But if you have enough mechanism\nyou can probably figure it out. Of course, if you're\nwriting it twice and the first value is\nnever used, you can say,",
    "start": "642737",
    "end": "649828"
  },
  {
    "text": "wait a minute, why\nam I writing that? I mean, I'm just writing-- its value is dead anyway. So I can get rid of that. So there are a lot of\nother things you can do.",
    "start": "649828",
    "end": "656717"
  },
  {
    "text": "Whereas true dependence\nis actually true. If somebody is using\nmy value, I can't say, well, I'm not going to produce\nit, I'll produce it later.",
    "start": "656717",
    "end": "663170"
  },
  {
    "text": "I better produce it, because\nsomebody is waiting for me. Other things are\nbasically artifacts of how we store things in\nmemory and how we use that.",
    "start": "663170",
    "end": "669920"
  },
  {
    "text": " So what happens is when two\ninstructions are dependent,",
    "start": "669920",
    "end": "677270"
  },
  {
    "start": "672000",
    "end": "880000"
  },
  {
    "text": "the order of execution cannot\nbe reversed unless you do some kind of transformation\nI talk about.",
    "start": "677270",
    "end": "682490"
  },
  {
    "text": "So what it does is it reduces\na possibility of scheduling. So if there are two\ndependency in this, we better maintain that order.",
    "start": "682490",
    "end": "688580"
  },
  {
    "text": " So computing dependency is\nbasically what we want to do",
    "start": "688580",
    "end": "695259"
  },
  {
    "text": "is, these basic\nblocks it's easy. You just work one\ninstruction after another and say, OK, is there a\ndependence between those two",
    "start": "695260",
    "end": "702027"
  },
  {
    "text": "instructions. And identify register\ndependencies are very simple. It's the same register.",
    "start": "702027",
    "end": "707362"
  },
  {
    "text": "So if there are\ntwo same registers, OK, there's a\ndependency somewhere. Things get subtle\nin other things.",
    "start": "707362",
    "end": "713060"
  },
  {
    "text": "So for example,\nmemory access can become arbitrarily complicated. So assume I do something\nlike a base plus offset.",
    "start": "713060",
    "end": "720920"
  },
  {
    "text": "I am getting from the stack. And at that point\nit's like, well, am I getting the\nsame stack location?",
    "start": "720920",
    "end": "726302"
  },
  {
    "text": "This is something\nprobably you guys have to do because\nyou're putting a lot of things in stack. But you already know they\nare not dependent anyways.",
    "start": "726302",
    "end": "731900"
  },
  {
    "text": "But from other information. But if you only know that\nI have access in the stack and say, OK, I'm accessing\nfrom the stack point,",
    "start": "731900",
    "end": "738692"
  },
  {
    "text": "there are four\ndifferent locations. I can look at differently. And then things get\narbitrary complicated when you go things like\ndata dependence analysis.",
    "start": "738692",
    "end": "746279"
  },
  {
    "text": "So for example, if I have\ntwo axises, 2i and 2i plus 1.",
    "start": "746280",
    "end": "753100"
  },
  {
    "text": "Is there any value of i that\nthese two could be dependent or accessing the same value?",
    "start": "753100",
    "end": "759579"
  },
  {
    "text": "No. How about i and i plus 1? ",
    "start": "759580",
    "end": "767850"
  },
  {
    "text": "Instead of ai and ai\nplus 1, what happened? ",
    "start": "767850",
    "end": "776550"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]\nsame value [INAUDIBLE].. PROFESSOR: No, I\nmean, the thing is, what that means is if ai were\nto write an iteration one,",
    "start": "776550",
    "end": "787388"
  },
  {
    "text": "it's going to be the same\nlocation that iteration zero writes ai plus 1. So at some point, some\ndifferent iterations all write.",
    "start": "787388",
    "end": "794170"
  },
  {
    "text": "Whereas i-- 2i and 2i\nplus 1, no iterations, because it's\ncompletely accessing",
    "start": "794170",
    "end": "799670"
  },
  {
    "text": "a different set of locations. So because of that. d that's what data\ndependence analysis does.",
    "start": "799670",
    "end": "806470"
  },
  {
    "text": "Grab these access patterns\nand say, are they overlapping? If they overlap, there are\nsome pattern for overlapping",
    "start": "806470",
    "end": "812620"
  },
  {
    "text": "that I can still take\nadvantage of, stuff like that. And then things get\neven complicated into procedure level.",
    "start": "812620",
    "end": "818550"
  },
  {
    "text": "So assume I get-- I have a global and something\nget passed as a parameter to me-- global variable.",
    "start": "818550",
    "end": "823800"
  },
  {
    "text": "Are they the same? If a and b get passed\nas a parameter, can they be the same? And the difference in\nthe language definition?",
    "start": "823800",
    "end": "830640"
  },
  {
    "text": "It could be the same unless\nyou can prove otherwise. So because of that, you had\nto do globally, we can say, wait a minute. Where did these\nthings originated?",
    "start": "830640",
    "end": "837045"
  },
  {
    "text": "How [INAUDIBLE] get passed? And this can get\narbitrary complicated. And then you go into\npoint alias analysis.",
    "start": "837045",
    "end": "842480"
  },
  {
    "text": "So if you have two\ndifferent pointers, are they point to\nthe same thing? And in a language\nlike Java, this",
    "start": "842480",
    "end": "849240"
  },
  {
    "text": "is a very hard problem to solve. Because at some point it might,\nat some point it might not.",
    "start": "849240",
    "end": "854480"
  },
  {
    "text": "It depends on where\nit's coming from. It depends on all the paths,\nand what different classes",
    "start": "854480",
    "end": "861027"
  },
  {
    "text": "does, and stuff like that. So this can start getting\nvery complicated in doing that analysis.",
    "start": "861027",
    "end": "866350"
  },
  {
    "text": "But this is what you had\nto do if you want to get the full level of analysis. For you guys, it's\nnot that difficult",
    "start": "866350",
    "end": "871480"
  },
  {
    "text": "because you don't have anything\ncomplicated in your programs. So you don't have to do too\nmuch analysis to do this.",
    "start": "871480",
    "end": "881449"
  },
  {
    "start": "880000",
    "end": "1422000"
  },
  {
    "text": "And so, the key thing is how\nto represent these things. So the simple way to do is\nrepresent this dependence",
    "start": "881450",
    "end": "888009"
  },
  {
    "text": "using a directed acyclic graph. Why is it acyclic?",
    "start": "888010",
    "end": "894790"
  },
  {
    "text": "Why is not an arbitrary graph? AUDIENCE: Is it,\nif it was cyclic,",
    "start": "894790",
    "end": "901519"
  },
  {
    "text": "then there's no\nfirst instruction. PROFESSOR: I mean, there's no-- AUDIENCE: [INAUDIBLE] something\nelse already happening.",
    "start": "901520",
    "end": "907790"
  },
  {
    "text": "PROFESSOR: I mean,\nyeah, exactly. You can't have in the\ntemporal ordering, we assume the program-- what\nyou're trying to maintain",
    "start": "907790",
    "end": "912890"
  },
  {
    "text": "is the dependency in\nprogram execution. And if you're doing temporal,\nyou can't have cycles. I mean, that means\nyou're violating",
    "start": "912890",
    "end": "918470"
  },
  {
    "text": "the fact that there has to be\nsequential ordering to execute. And then, sequential\nordering says,",
    "start": "918470",
    "end": "923720"
  },
  {
    "text": "there cannot be cycles in there. And also, instruction\n[INAUDIBLE] are dependencies.",
    "start": "923720",
    "end": "929720"
  },
  {
    "text": "So here's a simple program. So what I'm doing is I am\nreading two different values",
    "start": "929720",
    "end": "937790"
  },
  {
    "text": "out of r1 to r2 and r3. And I am adding r2, r3\nand putting it to r4.",
    "start": "937790",
    "end": "943700"
  },
  {
    "text": "And I'm using r2 to do r5. So the simple\ndependence is this. So what happens is the\ninstruction one produces r2.",
    "start": "943700",
    "end": "953030"
  },
  {
    "text": "And both r3 and r4-- sorry. Instruction three\nan instruction four",
    "start": "953030",
    "end": "959750"
  },
  {
    "text": "depends on that value. r2\nis used in both instruction three and four. And instruction two\nactually get r3,",
    "start": "959750",
    "end": "965870"
  },
  {
    "text": "and instruction three\ndepends on that. ",
    "start": "965870",
    "end": "971610"
  },
  {
    "text": "This is clear? So the one thing you\nwill do in this one",
    "start": "971610",
    "end": "977120"
  },
  {
    "text": "is, we put a latency number\non each of these edges. The latency number says,\nif the instruction--",
    "start": "977120",
    "end": "985160"
  },
  {
    "text": "the first instruction get\nstarted on time 0 or clock 0.",
    "start": "985160",
    "end": "992139"
  },
  {
    "text": "At what clock-- the earliest\nclock that you had to delay, the next instruction\nso that there's not",
    "start": "992140",
    "end": "998500"
  },
  {
    "text": "going to be any stall. So assume both things-- first, if you assume\nthe 1 and 4 in here.",
    "start": "998500",
    "end": "1005160"
  },
  {
    "text": "When I say delay\ntoo, that means, if I start the instruction\none in clock one-- clock zero.",
    "start": "1005160",
    "end": "1010800"
  },
  {
    "text": "And if I start instruction\nflow in clock one,",
    "start": "1010800",
    "end": "1016089"
  },
  {
    "text": "I will stall it, because I\ndidn't have the delay of two. So I had to start\nthe instruction flow",
    "start": "1016090",
    "end": "1021310"
  },
  {
    "text": "for in clock two. Because I need at least\nhave a delay of two, because the value is\nnot available for it",
    "start": "1021310",
    "end": "1027579"
  },
  {
    "text": "in order for it not to stall. So we get this graph. And that gives us a notion\nabout how much stalling",
    "start": "1027579",
    "end": "1032980"
  },
  {
    "text": "you have to do. So here's the interesting thing. So I did a very simple\nchange to this program.",
    "start": "1032980",
    "end": "1038140"
  },
  {
    "text": "Can you see the change I did? What's the change I did? What I did was,\nin one and two, I",
    "start": "1038140",
    "end": "1043929"
  },
  {
    "text": "used the same register, r1, r1. And here what I did was use\nr2 to get the next address.",
    "start": "1043930",
    "end": "1056550"
  },
  {
    "text": "And do you see the change in the\ndependence graph that happened? Because now, the r2, before you\ndo the r2, what you have to do",
    "start": "1056550",
    "end": "1065010"
  },
  {
    "text": "is make sure that\nthe one get executed.",
    "start": "1065010",
    "end": "1071880"
  },
  {
    "text": "So let me do a small\nmodification to this one. So the second instruction,\ninstead of saying r2 plus 4,",
    "start": "1071880",
    "end": "1080130"
  },
  {
    "text": "if I say say-- let me see if this works. ",
    "start": "1080130",
    "end": "1096440"
  },
  {
    "text": "So instead of-- oops. Instead of saying this is r2,\nif I say this is to be r--",
    "start": "1096440",
    "end": "1106370"
  },
  {
    "text": "ah-- to be-- we'll say r-- we will say 5.",
    "start": "1106370",
    "end": "1111530"
  },
  {
    "text": " If I do that, what would\nhappen with my graph?",
    "start": "1111530",
    "end": "1118650"
  },
  {
    "start": "1118650",
    "end": "1129452"
  },
  {
    "text": "AUDIENCE: It would\nlook like the old one. PROFESSOR: Is it? ",
    "start": "1129452",
    "end": "1135220"
  },
  {
    "text": "So what you have-- OK, we have answered-- [INTERPOSING VOICES] PROFESSOR: --that says\nthis thing goes away.",
    "start": "1135220",
    "end": "1140610"
  },
  {
    "text": "AUDIENCE: Four has to\nhappen [INAUDIBLE] to-- PROFESSOR: Four has to happen--",
    "start": "1140610",
    "end": "1146419"
  },
  {
    "text": "oh, sorry. I make it r6. Never mind. r6. I actually want to get 6.",
    "start": "1146420",
    "end": "1152809"
  },
  {
    "text": "Can't write with this one. But OK. I made it r6, some other\nregister that's not here.",
    "start": "1152810",
    "end": "1159070"
  },
  {
    "text": "What happens? ",
    "start": "1159070",
    "end": "1167880"
  },
  {
    "text": "So we have a one solution\nsays, 1 to 2 goes away.",
    "start": "1167880",
    "end": "1173770"
  },
  {
    "text": "What else? ",
    "start": "1173770",
    "end": "1182858"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]\nthe other instruction is not listed there? PROFESSOR: So, hmm? AUDIENCE: There might\nbe other instructions",
    "start": "1182858",
    "end": "1189112"
  },
  {
    "text": "after the fourth one that\naren't listed [INAUDIBLE].. PROFESSOR: Yeah. But that's not even issue. Think about instruction\none and two.",
    "start": "1189112",
    "end": "1194820"
  },
  {
    "text": " Actually, you are right.",
    "start": "1194820",
    "end": "1202080"
  },
  {
    "text": "Getting rid--\nbecause I was trying to do something [INAUDIBLE]. So this is why what\nhappened when you tried",
    "start": "1202080",
    "end": "1208140"
  },
  {
    "text": "to do a question on the run. So getting rid of this one, it\nlooks like the previous one.",
    "start": "1208140",
    "end": "1214280"
  },
  {
    "text": "Yeah. I was trying to see whether\nthere's anti-dependence. But since it's two reads,\nit doesn't have anything.",
    "start": "1214280",
    "end": "1219370"
  },
  {
    "text": "Good. So you got it right first time. You see everything?",
    "start": "1219370",
    "end": "1225110"
  },
  {
    "text": "So on the other hand, if\nthere's a write in here, then you had to make sure\nthat these two instructions--",
    "start": "1225110",
    "end": "1230260"
  },
  {
    "text": "if there's a read and\na write to memory, you maintain that\ntheir center depends. So I was expecting something,\nbut it was not there.",
    "start": "1230260",
    "end": "1235680"
  },
  {
    "text": "Sorry. OK, this one. ",
    "start": "1235680",
    "end": "1241760"
  },
  {
    "text": "What are my edges? Let's try to do that. ",
    "start": "1241760",
    "end": "1254640"
  },
  {
    "text": "What's edge-- is there\nedge between r1 to r2? ",
    "start": "1254640",
    "end": "1265150"
  },
  {
    "text": "AUDIENCE: Yeah. PROFESSOR: Why? AUDIENCE: Because\nyou can't override. PROFESSOR: Exactly. So there's an edge\nbetween r1 to r2.",
    "start": "1265150",
    "end": "1271750"
  },
  {
    "text": "There's edge in here. What else? How about r1 to r3?",
    "start": "1271750",
    "end": "1277559"
  },
  {
    "text": " AUDIENCE: [INAUDIBLE] ",
    "start": "1277560",
    "end": "1283280"
  },
  {
    "text": "PROFESSOR: r1 to r3, why? AUDIENCE: [INAUDIBLE] PROFESSOR: Oops. OK. How about r1 to r4?",
    "start": "1283280",
    "end": "1288880"
  },
  {
    "text": " AUDIENCE: Yeah. Same reason.",
    "start": "1288880",
    "end": "1294070"
  },
  {
    "text": "PROFESSOR: Yeah. How about r2 to r3? ",
    "start": "1294070",
    "end": "1305600"
  },
  {
    "text": "AUDIENCE: Yeah. PROFESSOR: Yeah. Because of R3, actually. Is it true dependence\nor anti-dependence? AUDIENCE: Anti-dependence.",
    "start": "1305600",
    "end": "1312873"
  },
  {
    "text": "PROFESSOR: Yeah. Because this is reading\nit, this is modifying it to [INAUDIBLE]. r2 to r4? ",
    "start": "1312873",
    "end": "1323428"
  },
  {
    "text": "AUDIENCE: No. PROFESSOR: No. So yeah, this is basically\nthe graph you get.",
    "start": "1323428",
    "end": "1328830"
  },
  {
    "text": " And I put some\ndistances in there. So here I have a problem.",
    "start": "1328830",
    "end": "1334590"
  },
  {
    "text": "So assume-- so now you\nprobably even know the answer-- assume instead of this being r1,\nif this was r6, what happens?",
    "start": "1334590",
    "end": "1343009"
  },
  {
    "text": "You retrain the graph.  AUDIENCE: What's\nthe star notation?",
    "start": "1343010",
    "end": "1349700"
  },
  {
    "text": "PROFESSOR: This means I\nam reading the memory. So I am calculating the\naddress, r4 has address.",
    "start": "1349700",
    "end": "1355160"
  },
  {
    "text": "By adding 4 to that\naddress location, I'm reading from memory. Yeah. It's basically it's almost\nlike a point ID reference.",
    "start": "1355160",
    "end": "1364130"
  },
  {
    "text": "Sorry. So if I have r6 plus\n4, what happens? ",
    "start": "1364130",
    "end": "1370500"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: [INAUDIBLE] you. So he is-- OK. AUDIENCE: Yeah, I\ndon't think he can.",
    "start": "1370500",
    "end": "1376780"
  },
  {
    "text": "PROFESSOR: So there's one\nthing you can remove this edge. AUDIENCE: Because\nr6 could be r1. PROFESSOR: R6 could be r1.",
    "start": "1376780",
    "end": "1382620"
  },
  {
    "text": "If you can prove\nr6 is not r1, it's accessing two memory locations. I can remove the edge.",
    "start": "1382620",
    "end": "1388552"
  },
  {
    "text": "But I don't have\nenough information to prove that r6 is not r1. This is basically\nwhat all the point",
    "start": "1388552",
    "end": "1394345"
  },
  {
    "text": "alias analysis is all about. Because I am accessing\ntwo memory location. Is it same? No.",
    "start": "1394345",
    "end": "1399670"
  },
  {
    "text": "I don't know at this point. And if r6 is r1, there is\nactually dependency in there.",
    "start": "1399670",
    "end": "1404980"
  },
  {
    "text": "If r6 is not r1, I can\nget rid of that edge. So as you go into\nmore real programs,",
    "start": "1404980",
    "end": "1410110"
  },
  {
    "text": "you can do all\nthis analysis to-- because otherwise, there\nwould be all these edges all over the place. Because I don't know.",
    "start": "1410110",
    "end": "1415740"
  },
  {
    "text": "And so, that's the\npoint I was going to do in previous example. But this is actually\nthe right way to do. ",
    "start": "1415740",
    "end": "1422710"
  },
  {
    "start": "1422000",
    "end": "1448000"
  },
  {
    "text": "So the control dependencies\nare resource constraints. For now, let's ignore that.",
    "start": "1422710",
    "end": "1428980"
  },
  {
    "text": "We will get to that hopefully\nlater today or next lecture.",
    "start": "1428980",
    "end": "1434020"
  },
  {
    "start": "1434020",
    "end": "1440780"
  },
  {
    "text": "So here is an\nexample program I am going to use for showing you\nwhat happens when you execute",
    "start": "1440780",
    "end": "1451460"
  },
  {
    "text": "and then go and show how\nto do some scheduling. So what happens is, here is\nI put some number of cycles",
    "start": "1451460",
    "end": "1458900"
  },
  {
    "text": "where the resulting\nregister is going to be available value\nin the results register. So load effective\naddress into a register.",
    "start": "1458900",
    "end": "1466280"
  },
  {
    "text": "It's one cycle. And the one I am-- the instruction four,\nin what happens is here,",
    "start": "1466280",
    "end": "1472700"
  },
  {
    "text": "I am doing a load from\nmemory, because I'm doing this off the stack pointer.",
    "start": "1472700",
    "end": "1480410"
  },
  {
    "text": "At that point, it\ntakes three cycles because actually I\ndo load from memory. This one, since I'm writing to\nreading and writing to memory,",
    "start": "1480410",
    "end": "1489500"
  },
  {
    "text": "I didn't actually put any value. Because I don't have a register\nvalue available at then. I'm not changing a register\nbasically in this one.",
    "start": "1489500",
    "end": "1497120"
  },
  {
    "text": "This one, four cycles because\nyou had to not only just load it, you had to actually\ndo and operation also. So you have three cycles\nto load, one cycle to end.",
    "start": "1497120",
    "end": "1503985"
  },
  {
    "text": "So I'm just making up these\nnumbers at this point. And this is a multiplication\nwith multiplications are expensive operations.",
    "start": "1503985",
    "end": "1510110"
  },
  {
    "text": "So it takes some cycles. So what do you do?",
    "start": "1510110",
    "end": "1516380"
  },
  {
    "text": "So what you do is, so first\nyou take the first instruction. No problem.",
    "start": "1516380",
    "end": "1521660"
  },
  {
    "text": "We can execute it. So when you look at the second\ninstruction, what happens?",
    "start": "1521660",
    "end": "1528410"
  },
  {
    "text": "Is there a dependency? That's a dependency\nfor c instruction, because it uses the\nsame register rx.",
    "start": "1528410",
    "end": "1536480"
  },
  {
    "text": "And therefore, but the value\nis available in one cycle. So you don't have no problem.",
    "start": "1536480",
    "end": "1541700"
  },
  {
    "text": "You can execute in here. Third instruction, basically,\nis not depending on anything. It can just go and execute it.",
    "start": "1541700",
    "end": "1548570"
  },
  {
    "text": "The fourth instruction, it's\nnot also dependent on anything. I can go execute it.",
    "start": "1548570",
    "end": "1554330"
  },
  {
    "text": "Fifth instruction, is it\ndependent on anything? ",
    "start": "1554330",
    "end": "1559375"
  },
  {
    "text": "AUDIENCE: The\nfourth instruction. PROFESSOR: yeah, it's dependent\non fourth instruction. How many cycles does it\ntake for fourth instruction",
    "start": "1559375",
    "end": "1564910"
  },
  {
    "text": "to have a value? AUDIENCE: Three. PROFESSOR: Three-cycle. So if I execute fifth\ninstruction now, what happens?",
    "start": "1564910",
    "end": "1573590"
  },
  {
    "text": "It will stalled for two cycles. So it has a stall two cycles\nand the real fifth construction happens in this cycle because\nthe value is starting.",
    "start": "1573590",
    "end": "1581100"
  },
  {
    "text": "So if you go to 6 instruction. There's no dependency. So it can go here. But say, one, the construction\ndepends on two instructions--",
    "start": "1581100",
    "end": "1588860"
  },
  {
    "text": "2 and 6. 2 fortunately it was done a\nlong time ago-- with the valves available. But six, I'm just\ndoing it, the value",
    "start": "1588860",
    "end": "1594684"
  },
  {
    "text": "is not going to be\navailable for cycle. So I'm going to stall. [INAUDIBLE] So this is what happens\nwhen you actually just",
    "start": "1594685",
    "end": "1602790"
  },
  {
    "text": "naively keep executing. Because you execute something\nand [INAUDIBLE] value is not available. Things are going to stop.",
    "start": "1602790",
    "end": "1608700"
  },
  {
    "text": "And this is not good. So this is the pipe-- stages you get.",
    "start": "1608700",
    "end": "1614430"
  },
  {
    "text": "So this is when list\nscheduling come about. So list scheduling is a way to\ngo around and actually schedule",
    "start": "1614430",
    "end": "1620610"
  },
  {
    "text": "so that we don't get the stalls. So algorithm is simple. So the idea is you\ndo a topological sort",
    "start": "1620610",
    "end": "1627690"
  },
  {
    "text": "of this dependence dag. And then, you have to\nconsider instructions that can",
    "start": "1627690",
    "end": "1633480"
  },
  {
    "text": "be schedule without a stall. Because you can have a bunch\nof schedule instructions that can be scheduled.",
    "start": "1633480",
    "end": "1640650"
  },
  {
    "text": "And if the instructions\ndon't cause a stall, you go and schedule it.",
    "start": "1640650",
    "end": "1647160"
  },
  {
    "text": "So you go down the line here. And however, the optimal\nis NP complete problem.",
    "start": "1647160",
    "end": "1653419"
  },
  {
    "text": "Because what that means\nis, a lot of times you have choices of which\ninstruction to select. If you select the\nwrong instruction",
    "start": "1653420",
    "end": "1660029"
  },
  {
    "text": "you might not end up in\nthe optimal schedule. And then you can get\ninto a stall situation. There might be cases that no\nmatter what there will be some",
    "start": "1660030",
    "end": "1666750"
  },
  {
    "text": "stalls. But about how to minimize\nthat is the question. So here's a simple algorithm.",
    "start": "1666750",
    "end": "1672240"
  },
  {
    "text": "You do a topological sort. You have an ID list. That means, all the\ninstructions right now that doesn't have any\ndependencies, that",
    "start": "1672240",
    "end": "1678360"
  },
  {
    "text": "means all the predecessors\nthat has independence already been scheduled. So I can actually run\nthat instruction now.",
    "start": "1678360",
    "end": "1683580"
  },
  {
    "text": "That's in the ready list. And the thing is, you\nhave to pick up one",
    "start": "1683580",
    "end": "1688650"
  },
  {
    "text": "from the ready list, put it in\nthere as the next instruction. And the minute I\nschedule something,",
    "start": "1688650",
    "end": "1694430"
  },
  {
    "text": "a bunch of other instructions\nmight be also schedulable. Because you are\ndepending on that one.",
    "start": "1694430",
    "end": "1699822"
  },
  {
    "text": "And we need to schedule that. So we put those into ready\nlist and you iterate. The question is, when\nyou have multiple things",
    "start": "1699822",
    "end": "1705529"
  },
  {
    "text": "in the ready list,\nhow do you pick? So if you have multiple\ninstructions on the ready list,",
    "start": "1705530",
    "end": "1711500"
  },
  {
    "text": "what kind of heuristics\ncan we use to pick one? ",
    "start": "1711500",
    "end": "1719620"
  },
  {
    "text": "AUDIENCE: How long? AUDIENCE: You might\nwant to [INAUDIBLE] so that other instructions,\nwhen they come later,",
    "start": "1719620",
    "end": "1726850"
  },
  {
    "text": "they'll already have\nsome memory [INAUDIBLE].. PROFESSOR: Yeah. So that's so\ninteresting-- a good one. That says, if that means you\nwant to bias loads to go first.",
    "start": "1726850",
    "end": "1734448"
  },
  {
    "text": "Because load means somebody\nis going to use it anyways. You might as well put it there. That's a good one. What else? AUDIENCE: How long\nthe instruction's",
    "start": "1734448",
    "end": "1740800"
  },
  {
    "text": "been on the ready list? PROFESSOR: That's interesting\none too, how long. Because that means if\n[INAUDIBLE] if you put ready",
    "start": "1740800",
    "end": "1745810"
  },
  {
    "text": "list, just edge it,\nand then get it there. Anything else? ",
    "start": "1745810",
    "end": "1753600"
  },
  {
    "text": "So here are the three things\nthat normally being used.",
    "start": "1753600",
    "end": "1759380"
  },
  {
    "text": "Peak construction with the\nlongest path to the leaf node. Good. That is the one in\nthe critical path.",
    "start": "1759380",
    "end": "1764730"
  },
  {
    "text": "That means, you need that\nvalue, to get the next value, to get the next value in there. And so, if it takes\nthe longest part then,",
    "start": "1764730",
    "end": "1770670"
  },
  {
    "text": "you better get that\npart done fast. So if there's something in the\nlongest path, get that first.",
    "start": "1770670",
    "end": "1777330"
  },
  {
    "text": "If there are multiple things\nthe same longest spot, give something similar\nto what you said, but get the instruction that will\nget a lot more-- that",
    "start": "1777330",
    "end": "1784665"
  },
  {
    "text": "has a lot of successes. That means the minute you get\nthat, you put a lot more things in the ready list. If you take something, that\ndoesn't add anything really,",
    "start": "1784665",
    "end": "1791603"
  },
  {
    "text": "unless you are reducing\nyour schedule a bit. Get things that actually\nbeing used multiple times. Because you want to get\nthose things fast to get",
    "start": "1791603",
    "end": "1798530"
  },
  {
    "text": "more instructions executed. Other thing a little\nbit similar to is, if there are multiple\npipelines, choose",
    "start": "1798530",
    "end": "1806130"
  },
  {
    "text": "something that can show\ninto less busy pipeline. So get those things-- pipelines filled up fast.",
    "start": "1806130",
    "end": "1811780"
  },
  {
    "text": "So this is in a\nsuperscaler type thing. So to do these things,\nthe first thing is to pick a longest part of\nthe leaf going doing that.",
    "start": "1811780",
    "end": "1820990"
  },
  {
    "text": "So you can do a simple\nalgorithm to calculate the longest path of the leaf. The other thing can calculation\nis the number of successes.",
    "start": "1820990",
    "end": "1828437"
  },
  {
    "text": "So for each node, we'll\ncalculate the longest path to leave the number\nof successes. So here's a small program.",
    "start": "1828437",
    "end": "1834690"
  },
  {
    "text": "I will just do this by example. That basically is,\nprevious program I actually added to instructions\nin here just to finish up.",
    "start": "1834690",
    "end": "1842460"
  },
  {
    "text": "And so here's the\ndependence square-- diagram. So in here, here's a\n[INAUDIBLE] for this one.",
    "start": "1842460",
    "end": "1849659"
  },
  {
    "text": "So there are some large\nclump of instructions that are actually together in here.",
    "start": "1849660",
    "end": "1855475"
  },
  {
    "text": "And this is another too small\nclump in this [INAUDIBLE],, just not dependent on anything.",
    "start": "1855475",
    "end": "1860770"
  },
  {
    "text": "So the first thing you want to\ndo is to calculate the depth. So the things that are--",
    "start": "1860770",
    "end": "1869603"
  },
  {
    "text": "there's nothing\ndependent on this. The depth is 0. Because if I need to execute\nit, that part is done.",
    "start": "1869603",
    "end": "1875820"
  },
  {
    "text": "And then, what are other\nplaces, what's the depth?",
    "start": "1875820",
    "end": "1881309"
  },
  {
    "text": "What's the depth of this one? ",
    "start": "1881310",
    "end": "1887289"
  },
  {
    "text": "AUDIENCE: 3. PROFESSOR: 3. OK. I think I have that one next.",
    "start": "1887290",
    "end": "1892930"
  },
  {
    "text": "What's the next step\nyou can calculate?  AUDIENCE: Something [INAUDIBLE].",
    "start": "1892930",
    "end": "1899039"
  },
  {
    "text": "PROFESSOR: The 3. OK, I think we got that. OK, and then what? ",
    "start": "1899040",
    "end": "1906559"
  },
  {
    "text": "AUDIENCE: 0 is four. PROFESSOR: Full. And yeah, it's OK. Now you've got the thing-- this has seven, this\nhas four, this has five.",
    "start": "1906560",
    "end": "1913190"
  },
  {
    "text": "Simple. Just calculate it up. You can do that all the\ninformation available. And then you get the fan out.",
    "start": "1913190",
    "end": "1919130"
  },
  {
    "text": "So most of the things,\nthe fan of 0, 1. We do the fan outing here. And then you get\nto the fun part.",
    "start": "1919130",
    "end": "1924650"
  },
  {
    "text": "So now, what you have is\nwhat's in the ready list? What things are ready\nto execute right now.",
    "start": "1924650",
    "end": "1931790"
  },
  {
    "text": "AUDIENCE: 1, 3, 4, 6? PROFESSOR: Yep, get 1, 3, 4, 6. And if you order in\nthis [INAUDIBLE] order,",
    "start": "1931790",
    "end": "1939750"
  },
  {
    "text": "6 come, 6, 1, 4, 3. So 6 has the highest depth. 1 has the next.",
    "start": "1939750",
    "end": "1946019"
  },
  {
    "text": "4 and-- 4 has the next\ndepth, and 3 has the last. So I got that total.",
    "start": "1946020",
    "end": "1951070"
  },
  {
    "text": "So what I do is, I get the 6-- schedule 6 first. No problem in there.",
    "start": "1951070",
    "end": "1956830"
  },
  {
    "text": "Then I have 1, 4, 3. I get 1, I can schedule\n1, no problem there.",
    "start": "1956830",
    "end": "1963039"
  },
  {
    "text": "And then the minute you\nexecute-- schedule 1, 2 becomes available.",
    "start": "1963040",
    "end": "1970019"
  },
  {
    "text": "Because now, the dependency-- [INAUDIBLE] so I can put\n2 into the ready list. And 2 goes to the top of this.",
    "start": "1970020",
    "end": "1976679"
  },
  {
    "text": "So now what I try to do\nis, OK, time to schedule 2. And minute I try to schedule\n2, I look at my dependencies.",
    "start": "1976680",
    "end": "1983730"
  },
  {
    "text": "Because 1-- 2 is dependent on 1. But since the distance is 1,\nI can go and schedule that.",
    "start": "1983730",
    "end": "1989153"
  },
  {
    "text": "Because there's no problem. It can do it. And the minute I do\n2 and 6, I actually put 7 into the ready list.",
    "start": "1989153",
    "end": "1994200"
  },
  {
    "text": "7 goes on the top. So now I can do is try\nto schedule 7 in there and look at 7.",
    "start": "1994200",
    "end": "2000500"
  },
  {
    "text": "What are the dependencies to\nthe 7 from where and where? ",
    "start": "2000500",
    "end": "2011140"
  },
  {
    "text": "7 depend on from 2 and 6. So from 2 and 6,\nI have dependents. 2-- the dependents\nwhen I am done.",
    "start": "2011140",
    "end": "2018400"
  },
  {
    "text": "But 6, I have to\nwait four cycles. But I have only done three. So now, I can't\nschedule it there.",
    "start": "2018400",
    "end": "2024640"
  },
  {
    "text": "Because if I schedule\nit, I'm going to stall. I had to put the stall. So because of that, I had to\ngive up on 7, I look at 4.",
    "start": "2024640",
    "end": "2030563"
  },
  {
    "text": "And I have no problem. I can do 4 now. And the minute I do 4,\nI ad 5 into the list.",
    "start": "2030563",
    "end": "2036340"
  },
  {
    "text": "And then, now I can pick up 7. Can I do 7 now? Yeah. They can do 7 now.",
    "start": "2036340",
    "end": "2042110"
  },
  {
    "text": "I put 7 in there. And then, the minute I do 7,\nI get 8 and 9 into the list.",
    "start": "2042110",
    "end": "2047900"
  },
  {
    "text": "So can I do three now? Yeah, no problem in here. And then, I get 5--",
    "start": "2047900",
    "end": "2052908"
  },
  {
    "text": "I can do 5. There's no problem. Let me see if they\ncan do 5 from 4 to-- I have 3. I've only done 3.",
    "start": "2052909",
    "end": "2058290"
  },
  {
    "text": "I can do 5. I pick up 8. Can I do 8? Yeah. I can do 8. Can I do 9?",
    "start": "2058290",
    "end": "2065210"
  },
  {
    "text": "You look at 1. I can do 9. So at this point, I got\nmy schedule in here. And it's basically to schedule\nthat it took nine cycles.",
    "start": "2065210",
    "end": "2074780"
  },
  {
    "text": "Compared to if I just do a naive\nrun in the schedule of the 14 cycles, because I had a bunch\nof stall slots in here--",
    "start": "2074780",
    "end": "2083169"
  },
  {
    "text": "five stall. At least you have all your\nidentified five cycles of stalling by doing that. So this is a very simple way.",
    "start": "2083170",
    "end": "2089360"
  },
  {
    "text": "You just-- we did some\nreordering of instructions. But by doing that,\nwe actually make sure that we have a\nvery tight schedule.",
    "start": "2089360",
    "end": "2096879"
  },
  {
    "text": "This is the very\nsimple basic way. I mean, the key thing is that\na lot of heuristics you can do, you came up with\na good heuristic.",
    "start": "2096880",
    "end": "2102280"
  },
  {
    "text": "There are a lot of these things. There's no set saying,\nit's not provably connected",
    "start": "2102280",
    "end": "2107950"
  },
  {
    "text": "to this [INAUDIBLE]\ncomplete problems. So as you look at, people have\ndeveloped heuristics over time.",
    "start": "2107950",
    "end": "2114350"
  },
  {
    "text": "And this is a good\nset of heuristics. Any questions so far?",
    "start": "2114350",
    "end": "2120390"
  },
  {
    "text": "AUDIENCE: What is all the-- in the writing\nwould cause a stall? PROFESSOR: I had\n[INAUDIBLE] at that point.",
    "start": "2120390",
    "end": "2126580"
  },
  {
    "text": "I had just had to figure\nout the slow easiest stall or the minimal\nstall, and do it.",
    "start": "2126580",
    "end": "2132220"
  },
  {
    "text": "I mean, you will\nhave a situation that then, especially,\nthey don't have that many things on the relist. It's going to start.",
    "start": "2132220",
    "end": "2137500"
  },
  {
    "text": "But this is where it\nmight be non-optimal. There might be optimal\nschedule if you do something differently with\nthe global knowledge",
    "start": "2137500",
    "end": "2143920"
  },
  {
    "text": "that you can do without stall. But since we are doing\nthis very local algorithm, you can [INAUDIBLE]\nscores to us.",
    "start": "2143920",
    "end": "2149180"
  },
  {
    "text": "Yeah. It doesn't guarantee\neliminating stalls. So the next thing is,\nmodern architecture",
    "start": "2149180",
    "end": "2156810"
  },
  {
    "start": "2153000",
    "end": "2534000"
  },
  {
    "text": "is a lot more complicated. It has a lot more resources. It's not just one\nthing at a pipeline.",
    "start": "2156810",
    "end": "2162130"
  },
  {
    "text": "So you can run\nparallel operations but with some constraints. And so, if you have\nparallel operations, you actually want to take\nadvantage of that too.",
    "start": "2162130",
    "end": "2169059"
  },
  {
    "text": "So here's a very simple example. So assume I have two\ndifferent execution units. One, I do only register\nto register operations.",
    "start": "2169060",
    "end": "2177030"
  },
  {
    "text": "So no memory\noperations involved. And I can get everything\ndone in one cycle. And the other one if I'm\nnew registered to memory",
    "start": "2177030",
    "end": "2182970"
  },
  {
    "text": "[INAUDIBLE],, memory\nregister, register to memory. So I'm reading from\nregister, putting it to memory, or vise versa.",
    "start": "2182970",
    "end": "2188440"
  },
  {
    "text": "And I assume if I'm loading\nit takes two cycles. And if storing,\nit takes 1 cycle.",
    "start": "2188440",
    "end": "2194490"
  },
  {
    "text": "So if you had to look at them\nwith this very thick book of architecture--\nin each architecture to figure out all these numbers.",
    "start": "2194490",
    "end": "2200700"
  },
  {
    "text": "I mean, how many\ncycles things take. So in here, so\neach pipeline, you",
    "start": "2200700",
    "end": "2208410"
  },
  {
    "text": "can represent the superscaler\nwith multiple pipelines. Before I [INAUDIBLE]\none pipeline, each pipeline with\nsome set of resources.",
    "start": "2208410",
    "end": "2214960"
  },
  {
    "text": "And so, for example,\nhere what I do is, the first a loop,\n[INAUDIBLE] register, I put this a loop. And register to memory,\nI put these two,",
    "start": "2214960",
    "end": "2222570"
  },
  {
    "text": "because it can have two cycles. So I put these two different\npipelines in there.",
    "start": "2222570",
    "end": "2228089"
  },
  {
    "text": "And then, what happens\nis now I modify my-- this algorithm\na little bit to say, and when I'm scheduling it,\nit's not just going to pipeline.",
    "start": "2228090",
    "end": "2235319"
  },
  {
    "text": "I have to figure out\nthe right pipeline and figure out all the\nprecedence constraints in there because all the\ndependence maintain",
    "start": "2235320",
    "end": "2240918"
  },
  {
    "text": "and prop it in the right\nplace in the pipeline. ",
    "start": "2240918",
    "end": "2247090"
  },
  {
    "text": "So here's the same\nprogram again. Now I changed my\ndependence a little bit",
    "start": "2247090",
    "end": "2252460"
  },
  {
    "text": "because to make the life\neasier for every one of us. So now I have my d numbers\nat a distance from the bottom",
    "start": "2252460",
    "end": "2261550"
  },
  {
    "text": "and fan out numbers. And I have my\nready list in here. And so, what happens is now I\npick up the first instruction.",
    "start": "2261550",
    "end": "2268329"
  },
  {
    "text": "It's arithmetic instruction. It's going to the new pipeline. Put it in there, no problem.",
    "start": "2268330",
    "end": "2274390"
  },
  {
    "text": "And the minute I do that, I\ncan add two into the list. I put two in the\nfirst because it has the highest distance in there.",
    "start": "2274390",
    "end": "2280430"
  },
  {
    "text": "Now when I pick up two, what\ntype of instruction is that? ",
    "start": "2280430",
    "end": "2286610"
  },
  {
    "text": "It's a memory operation. So it's actually memory read. So it has to go into this\npipeline, memory pipeline.",
    "start": "2286610",
    "end": "2295220"
  },
  {
    "text": "Where can you put that? I [INAUDIBLE] do\nthis and I'll ask. So the first thing is,\nit also dependent on one.",
    "start": "2295220",
    "end": "2301369"
  },
  {
    "text": "So because of that, only two\ncan go only on these two, because the first instruction\nhas to be done before two",
    "start": "2301370",
    "end": "2307280"
  },
  {
    "text": "is started. Since it's two cycles,\nit goes from in there. So the value is\navailable in here.",
    "start": "2307280",
    "end": "2315440"
  },
  {
    "text": "And then, you take the third\ninstruction, which is-- sorry, sixth instruction,\nwhich is what?",
    "start": "2315440",
    "end": "2321920"
  },
  {
    "text": "Which is arithmetical. Where can I put it there? Which-- is there\ndependence in there? Where can I put it? AUDIENCE: Put it\nin the ALU, yeah.",
    "start": "2321920",
    "end": "2328477"
  },
  {
    "text": "PROFESSOR: Yeah, I\ncan put it in here. So you put it in here. And then, that makes you\nput 7 into this thing.",
    "start": "2328477",
    "end": "2336080"
  },
  {
    "text": "And you pick up a 4, 4\nis also load [INAUDIBLE]..",
    "start": "2336080",
    "end": "2341480"
  },
  {
    "text": "Where can I put 4? ",
    "start": "2341480",
    "end": "2349376"
  },
  {
    "text": "AUDIENCE: Right after\n2 and [INAUDIBLE]?? PROFESSOR: Here?",
    "start": "2349376",
    "end": "2354890"
  },
  {
    "text": "Why not here? ",
    "start": "2354890",
    "end": "2361190"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]? PROFESSOR: Because I had\nno dependents in there. I have some available slots. Put it in there. So I can put it in that one.",
    "start": "2361190",
    "end": "2367240"
  },
  {
    "text": "That's a lead. And so, now I have\na real ring in here. Because I feel as I have this\nearly slot interdependence, just plug it in here.",
    "start": "2367240",
    "end": "2373490"
  },
  {
    "text": "And what that means is, I\nmake 5 available in pipeline. Pick up 7. 7 depends on-- 7 is [INAUDIBLE]\noperation depending on 6 and 2.",
    "start": "2373490",
    "end": "2382180"
  },
  {
    "text": "And you have to put it\nin here, because the 2 has to be done before\nyou can put it there.",
    "start": "2382180",
    "end": "2387190"
  },
  {
    "text": "And then that makes\n8 and 9 go in. And the next one is 3. 3 is arithmetic operation.",
    "start": "2387190",
    "end": "2395079"
  },
  {
    "text": "I can put it in here, because\nthere's no dependence in here. And 5 depends on 4.",
    "start": "2395080",
    "end": "2400870"
  },
  {
    "text": "So 5 is a store operation. It goes here. 8 depends on 7, so it goes here.",
    "start": "2400870",
    "end": "2406809"
  },
  {
    "text": "And 9 depend on 7, but\nit's a memory operation. So it goes parallel with 8. ",
    "start": "2406810",
    "end": "2414800"
  },
  {
    "text": "So do you see that\nhow this works? So we have this-- all this\nthing got packed pretty nicely. So this is my final\nscheduling for this one.",
    "start": "2414800",
    "end": "2421940"
  },
  {
    "start": "2421940",
    "end": "2430472"
  },
  {
    "text": "AUDIENCE: What would be the\n[INAUDIBLE] instructions? PROFESSOR: That's interesting.",
    "start": "2430472",
    "end": "2438380"
  },
  {
    "text": "In some sense, you probably want\nto do 1, 4, 6, 2, 3, 5, 7, 8,",
    "start": "2438380",
    "end": "2449400"
  },
  {
    "text": "9. Because for example, in\nsuperscalar, the market",
    "start": "2449400",
    "end": "2456940"
  },
  {
    "text": "will figure it out. And then if there's\nparallelism loop. On the other hand, if you have\nsomething like a [INAUDIBLE],, you have to probably\nexplicitly say that,",
    "start": "2456940",
    "end": "2463660"
  },
  {
    "text": "because [INAUDIBLE]\ndoesn't automatically try-- architecture doesn't do that. You have to explicitly say, for\nthe execution rate, ALU unit,",
    "start": "2463660",
    "end": "2471850"
  },
  {
    "text": "here are the instruction. And memory root, here\nare the instructions to parallel bundle. So for example, if you\nlook at Itanium machine,",
    "start": "2471850",
    "end": "2478230"
  },
  {
    "text": "they have bundles\nof instruction. So this is my first\nbundle, one and for. My second bundle\nit was 6 times 2.",
    "start": "2478230",
    "end": "2484360"
  },
  {
    "text": "My third bundle is 3 and 5. My fourth bundle is only 7. There's no option\nhere, because there's",
    "start": "2484360",
    "end": "2489880"
  },
  {
    "text": "nothing to put in that bundle. And my fifth bundle is 8 and 9. So you actually give\nexplicit bundles in there, saying the first one\ngo to the first unit,",
    "start": "2489880",
    "end": "2497290"
  },
  {
    "text": "and the second-- the memory\n[INAUDIBLE] the unit. So if you had architected\nsomething like that, you had to do actually do that.",
    "start": "2497290",
    "end": "2505570"
  },
  {
    "text": "So let's see with how far\nyou can push this one. Scheduling across basic blocks.",
    "start": "2505570",
    "end": "2511420"
  },
  {
    "text": "So what we did was we schedule\neach basic block at a time. But it would be fun-- because basic\nblock can be small.",
    "start": "2511420",
    "end": "2518032"
  },
  {
    "text": "And that means you don't\nget that much freedom, that many instructions\nto schedule, don't have a large\nvariety or lists.",
    "start": "2518032",
    "end": "2523230"
  },
  {
    "text": "You can still have stalls. So if you want to\nget better quality, won't actually go across\n[INAUDIBLE] blocks.",
    "start": "2523230",
    "end": "2529860"
  },
  {
    "text": "So yeah, a number of\nbasic blocks instruction-- in the basic blocks smart.",
    "start": "2529860",
    "end": "2535230"
  },
  {
    "start": "2534000",
    "end": "2789000"
  },
  {
    "text": "The key thing about\ngoing across basic blocks is there are\ncontrols-- branches. So how do you head\nactually schedule",
    "start": "2535230",
    "end": "2541390"
  },
  {
    "text": "across control branches-- handle\ncontrol branches properly? So what does it mean?",
    "start": "2541390",
    "end": "2547110"
  },
  {
    "text": "So assume if you\nwant more instruction from above to below, so I have\nan instruction from a that",
    "start": "2547110",
    "end": "2556470"
  },
  {
    "text": "I want to move to-- I had to move to both b and c. But can I move to b and c? ",
    "start": "2556470",
    "end": "2567720"
  },
  {
    "text": "Can we move the c?  No problem. Because if you control\ngoes to a to go through c,",
    "start": "2567720",
    "end": "2574750"
  },
  {
    "text": "can I move to B? ",
    "start": "2574750",
    "end": "2581450"
  },
  {
    "text": "Not really. Because there's a path that can\nreach b without executing a. So if I get an instruction\nfrom a and move it to b,",
    "start": "2581450",
    "end": "2589480"
  },
  {
    "text": "I might actually come\nfrom somewhere else and then executing\nextra instruction there. And that's not doable.",
    "start": "2589480",
    "end": "2594970"
  },
  {
    "text": "So you have to make sure\nthat if I move instruction, that I will-- it's always the\nsame, or same path happens. Because I can't come from\nsomewhere else in there.",
    "start": "2594970",
    "end": "2602020"
  },
  {
    "text": "It's where joints happening. You can't do that. At the same vein here, if I\nwant to move instruction up,",
    "start": "2602020",
    "end": "2607922"
  },
  {
    "text": "I want to make sure that\nthe instruction always get executed. So from b to a, of course,\nthere's a path always. But on the length c to\na, there might be part",
    "start": "2607922",
    "end": "2616210"
  },
  {
    "text": "from c that doesn't reach a. So if I execute instruction\nthat either it's",
    "start": "2616210",
    "end": "2621609"
  },
  {
    "text": "wrong if I could\nchange state, or it's more work because it\nwill never actually get executed if you go another path.",
    "start": "2621610",
    "end": "2627680"
  },
  {
    "text": "So there are-- it's\nnot just-- you just keep moving things up and down. You have to have a lot of\ncorrectness properties.",
    "start": "2627680",
    "end": "2633082"
  },
  {
    "text": "In at worst case, it's\na correctness issue, because you will\nright a wrong value. In the normal case,\nit's just extra work.",
    "start": "2633082",
    "end": "2639640"
  },
  {
    "text": "You just do work without just\nreally requiring do that. ",
    "start": "2639640",
    "end": "2647020"
  },
  {
    "text": "So this, control\ndependency constrains, what you can move across blocks. So there are other\ninteresting things.",
    "start": "2647020",
    "end": "2652280"
  },
  {
    "text": "So assume there's\nno control kind of. So I am doing\nsomething like this. So there's no really\na data dependence,",
    "start": "2652280",
    "end": "2659650"
  },
  {
    "text": "because this condition\ndoesn't write anything. And assume condition is\nnot a conditional on a.",
    "start": "2659650",
    "end": "2665859"
  },
  {
    "text": "Can you move things up? So [INAUDIBLE] condition. We can read b and c.",
    "start": "2665860",
    "end": "2671515"
  },
  {
    "text": " Can I move a equals b or\nc up out of the condition?",
    "start": "2671515",
    "end": "2680430"
  },
  {
    "text": "What do you think?  Conditions can write.",
    "start": "2680430",
    "end": "2686349"
  },
  {
    "text": "I'm saying, it's\nnot even reading a, it's only looking at b and c. ",
    "start": "2686350",
    "end": "2696690"
  },
  {
    "text": "Can I move it? AUDIENCE: [INAUDIBLE]. Sorry. PROFESSOR: No problem.",
    "start": "2696690",
    "end": "2701873"
  },
  {
    "text": "AUDIENCE: If you move\nit, does that mean it'll get unconditionally executed? PROFESSOR: Yeah. AUDIENCE: And it can't move.",
    "start": "2701873",
    "end": "2707959"
  },
  {
    "text": "PROFESSOR: Why? AUDIENCE: Because then it'll\nget unconditionally [INAUDIBLE].. PROFESSOR: Yeah. I mean, what's the reason? I assume you would just--",
    "start": "2707959",
    "end": "2714145"
  },
  {
    "text": "AUDIENCE: Well, it's wrong. [LAUGHTER] PROFESSOR: So here's\na possible process. So I'm trying to move it here. How about my condition is c not\nequals 0, and do a deviation?",
    "start": "2714145",
    "end": "2724980"
  },
  {
    "text": "So you look at it and\nsaid, hey, there's only read read dependence. There's not [INAUDIBLE]\ndependence in here.",
    "start": "2724980",
    "end": "2730352"
  },
  {
    "text": "But actually, you really\nhave to maintain that. Because if I should\ndo that condition,",
    "start": "2730352",
    "end": "2736180"
  },
  {
    "text": "and I'm going to just do\ndivide by 0 otherwise. So things like that.",
    "start": "2736180",
    "end": "2741650"
  },
  {
    "text": "And so, in most cases,\nyou can't do-- so to here. I mean, if I'm checking\nthis is a valid address.",
    "start": "2741650",
    "end": "2748720"
  },
  {
    "text": "So you're moving\nacross projects, you have to be very careful. That's the moral of the story.",
    "start": "2748720",
    "end": "2754630"
  },
  {
    "text": "I mean, it's not just\nsimple dependence test. There might be a lot more\nother things involved that is not a simple test.",
    "start": "2754630",
    "end": "2761920"
  },
  {
    "text": "AUDIENCE: So is this [INAUDIBLE]\nthe scheduling state, or is that the determinative\nstage of [INAUDIBLE]??",
    "start": "2761920",
    "end": "2768830"
  },
  {
    "text": "PROFESSOR: So a lot of\nthings we do earlier stage. We actually do analyze\nand move in sometimes.",
    "start": "2768830",
    "end": "2773980"
  },
  {
    "text": "We might do some things\nlike data flow optimization can move something in there. So I'm trying to see how\nwe can do some movement",
    "start": "2773980",
    "end": "2782500"
  },
  {
    "text": "in the scheduling stage. So data flow\noptimization, you probably had to validate\nwhether it's doable.",
    "start": "2782500",
    "end": "2788230"
  },
  {
    "text": "So one thing you can do,\none thing people have done.",
    "start": "2788230",
    "end": "2793340"
  },
  {
    "start": "2789000",
    "end": "3075000"
  },
  {
    "text": "It's not a class\nproject, but it's a thing called trace scheduling. This is a popular technique.",
    "start": "2793340",
    "end": "2798430"
  },
  {
    "text": "What trace scheduling does\nis, it finds the common path across a large part\nof the program.",
    "start": "2798430",
    "end": "2804700"
  },
  {
    "text": "And it combines this basic\nblocks of the common path to one single path.",
    "start": "2804700",
    "end": "2809980"
  },
  {
    "text": "And we get a much larger\nblock to optimize. So and then you need\nsome cleanup code.",
    "start": "2809980",
    "end": "2815110"
  },
  {
    "text": "Because if you execute\nthem, exit the path. So let me give examples. Assume I have a program like\nthat is bunch of basic blocks",
    "start": "2815110",
    "end": "2821230"
  },
  {
    "text": "conditions. And you realize, most of\nthe common path is this. You can do some kind\nof profile feedback,",
    "start": "2821230",
    "end": "2826840"
  },
  {
    "text": "or the user tells you\nthis is a common path. The other two are uncommon. So what you can do\nis, you can basically",
    "start": "2826840",
    "end": "2833860"
  },
  {
    "text": "take the uncommon things\nout and put it in here and basically get a nice\nlarge gigantic block.",
    "start": "2833860",
    "end": "2840472"
  },
  {
    "text": "But still there are problems. Because there are controls\ngoing in and out of the block. You can't move things\naround that much.",
    "start": "2840472",
    "end": "2848220"
  },
  {
    "text": "So one thing a trace\nscheduling does is trying to create\nblocks where there's a single entry and\nmultiple exits.",
    "start": "2848220",
    "end": "2854970"
  },
  {
    "text": " Because with multiple\nentries create problems.",
    "start": "2854970",
    "end": "2860200"
  },
  {
    "text": "But single entry,\nmultiple exits. And then, what you do\nis, each exit basically",
    "start": "2860200",
    "end": "2865560"
  },
  {
    "text": "try to do compensation\ncode unless you exit from the bottom. So in order to do that,\nwhat you have to do is assume a piece\nof code like this,",
    "start": "2865560",
    "end": "2872099"
  },
  {
    "text": "you can actually do\nsome duplication. So if they're a join, instead\nof really joining and going to one path, you can actually\nduplicate a piece of code.",
    "start": "2872100",
    "end": "2879070"
  },
  {
    "text": "And after you\nduplicate, what happens is you can optimize\neach branch separately. So in here, what happens is,\nyou can duplicate the exits out",
    "start": "2879070",
    "end": "2887970"
  },
  {
    "text": "of each of the branches. So assume we code that branch. And here's the code\nsequence in there.",
    "start": "2887970",
    "end": "2893010"
  },
  {
    "text": "If you go this branch,\nthere are repeated patterns. But now, what happens is you\ncreated this middle block,",
    "start": "2893010",
    "end": "2898599"
  },
  {
    "text": "where you have single entry and\nonly multiple exits in there. So I can do a lot more\noptimizations in that.",
    "start": "2898600",
    "end": "2904230"
  },
  {
    "text": "So that I give a\nlot more freedom to move code around that. Because what matters in\nthe main block anyway,",
    "start": "2904230",
    "end": "2909240"
  },
  {
    "text": "because this is where\nwe know most of the time we are running. And by doing that, you\ncan get this large block--",
    "start": "2909240",
    "end": "2915660"
  },
  {
    "text": "you get a lot more\nopportunities to move instructions [INAUDIBLE]. And sometimes you can even\nmove things across this.",
    "start": "2915660",
    "end": "2922750"
  },
  {
    "text": "So assume I move an\ninstruction that is-- oops. You can't really see. So yes, exiting, yes,\n[INAUDIBLE] here.",
    "start": "2922750",
    "end": "2932130"
  },
  {
    "text": "Let's exit here. So assume [INAUDIBLE]\ninstruction from here to here. Sometimes you can even do it.",
    "start": "2932130",
    "end": "2938470"
  },
  {
    "text": "But if you do it. You might have to put some\ncorrection code into f. So that means I do some thing.",
    "start": "2938470",
    "end": "2944940"
  },
  {
    "text": "But on then, if you do\nthis instruction and then to this exit, then I have\nto go and fix it up here.",
    "start": "2944940",
    "end": "2951660"
  },
  {
    "text": "Since these things are\nnot run that often, it's OK to do fixeup,\nbecause you do a lot",
    "start": "2951660",
    "end": "2956700"
  },
  {
    "text": "more work in there, because\nonce in a while you do that. It doesn't make that\nmuch [INAUDIBLE]..",
    "start": "2956700",
    "end": "2965040"
  },
  {
    "text": "So by doing this, you can\nactually do a lot of-- get much larger\nscheduling regions.",
    "start": "2965040",
    "end": "2970200"
  },
  {
    "text": " Where are we?",
    "start": "2970200",
    "end": "2975910"
  },
  {
    "text": "So I want to stop here\nand in the next lecture start focusing on loops\nand loop optimizations.",
    "start": "2975910",
    "end": "2984040"
  },
  {
    "text": "So I hope everybody had a\ngood time in the last project. Lot of optimizations?",
    "start": "2984040",
    "end": "2990630"
  },
  {
    "text": "Code runs fast? Can you see it actually running\nfaster, what is generating?",
    "start": "2990630",
    "end": "2997327"
  },
  {
    "text": " AUDIENCE: We didn't\nreally have test cases",
    "start": "2997327",
    "end": "3002330"
  },
  {
    "text": "that actually checked the-- PROFESSOR: OK. Yeah. But I mean, the interesting\nthing is, as we said,",
    "start": "3002330",
    "end": "3007430"
  },
  {
    "text": "you did all these stupid\nthings in the front end. You created code that\nlooks really ugly.",
    "start": "3007430",
    "end": "3013430"
  },
  {
    "text": "But now, after these\nnew optimization, they should start looking like\nthe intelligent code that you'd have written by hand, instead\nof all the dumb code that",
    "start": "3013430",
    "end": "3021860"
  },
  {
    "text": "gets generated in there. So sometimes, it's\nfun to actually look at the code generator\nand say, wow, that's an interesting thing.",
    "start": "3021860",
    "end": "3027350"
  },
  {
    "text": "I would have never\nthought about it. A lot of times, when you combine\nthese multiple things, and then your original programming\nand generated code,",
    "start": "3027350",
    "end": "3033650"
  },
  {
    "text": "sometimes it can\neven surprise you. So it's fun. Good. So what I'm going to do next\ntime is finish up scheduling.",
    "start": "3033650",
    "end": "3041630"
  },
  {
    "text": "And in the next lecture, going\nto be on register location. And then finally--\nthen next week, we",
    "start": "3041630",
    "end": "3049880"
  },
  {
    "text": "are going to do trying to\nput everything together and basically close the course.",
    "start": "3049880",
    "end": "3058138"
  },
  {
    "text": "You're almost at the end.  OK, good.",
    "start": "3058138",
    "end": "3064670"
  },
  {
    "start": "3064670",
    "end": "3076000"
  }
]