[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6360"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6360",
    "end": "13320"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu.",
    "start": "13320",
    "end": "18450"
  },
  {
    "text": " ERIK DEMAINE: All right,\nwelcome back to 6.851.",
    "start": "18450",
    "end": "25092"
  },
  {
    "text": "We continue our theme\nof time travel today. Before I get started, I\nwanted to briefly talk",
    "start": "25092",
    "end": "30776"
  },
  {
    "text": "about the project,\nwhich I forgot to talk about in lecture one. Project is sort of the focus of\nyour evaluation in the class,",
    "start": "30776",
    "end": "36710"
  },
  {
    "text": "other than problems\nsets inscribing, it's supposed to be\nthe bulk of the work. Project can be\ntheoretical, trying",
    "start": "36710",
    "end": "42110"
  },
  {
    "text": "to solve an open problem. You don't have to succeed. If you want to do that, you\nshould come to the open problem sessions.",
    "start": "42110",
    "end": "47480"
  },
  {
    "text": "Could be a survey of\nthings, especially not covered in class, or not\ncovered in class in much detail.",
    "start": "47480",
    "end": "54500"
  },
  {
    "text": "Look at a few papers. Could be an implementation of\none of these data structures. A lot of the data structures\nwe're talking about here",
    "start": "54500",
    "end": "60890"
  },
  {
    "text": "have never been implemented. We don't know how well\nthey perform in practice, and it'd cool to find out. Many of them have though,\nso you should do one",
    "start": "60890",
    "end": "67216"
  },
  {
    "text": "that hasn't been done already. Those are the main\nproject types. There will in a\nmonth or so, there",
    "start": "67216",
    "end": "74299"
  },
  {
    "text": "will be a project proposal\ndeadline where you have to pick what you're doing. And then the project itself\nis due last day of classes.",
    "start": "74300",
    "end": "81500"
  },
  {
    "text": "And in the last\nfew lectures, there will be project presentations. So you'll also have to\ngive a talk about it.",
    "start": "81500",
    "end": "87290"
  },
  {
    "text": "You can do group projects. And for more people we\nexpect more stuff to be done, that's all.",
    "start": "87290",
    "end": "93210"
  },
  {
    "text": "Otherwise unconstrained. So in time travel land,\nI guess the most sort",
    "start": "93210",
    "end": "100340"
  },
  {
    "text": "of physically\nrealistic physics land, if time travel is\nbranching universes",
    "start": "100340",
    "end": "105566"
  },
  {
    "text": "where if you make a\nchange in the past you get a totally new universe. That's full persistence. That's last class.",
    "start": "105567",
    "end": "111772"
  },
  {
    "text": "Today we're going to do the\nmore science fiction-y approach to time travel, which\nis you can-- like in",
    "start": "111772",
    "end": "117769"
  },
  {
    "text": "Back to the Future. You can go back in\ntime, make a change, and then return to the\npresent and see all the intervening-- the result of\nall the intervening things that",
    "start": "117769",
    "end": "125750"
  },
  {
    "text": "happen meanwhile. A fun example of this,\nif you haven't seen it, is the movie Time\nCop, where there's",
    "start": "125750",
    "end": "132830"
  },
  {
    "text": "this guy going back\nin time, trying to fight evil time travelers. And when he returns\nto the present,",
    "start": "132830",
    "end": "140420"
  },
  {
    "text": "sometimes, like the\nwhole time travel service is starting to fail. And there's this worry\nthat he'll never be able to return to the present.",
    "start": "140420",
    "end": "146900"
  },
  {
    "text": "So anyway, we want to do\nthat with the data structure. So this is the idea\nof retroactivity.",
    "start": "146900",
    "end": "153440"
  },
  {
    "text": "In general, we think of a data\nstructure as having a timeline. ",
    "start": "153440",
    "end": "166460"
  },
  {
    "text": "We're going to maintain one\nlinear timeline of updates.",
    "start": "166460",
    "end": "172520"
  },
  {
    "text": "So here's time. ",
    "start": "172520",
    "end": "177989"
  },
  {
    "text": "And the idea is, well, maybe at\ntime 0 you do an insert of 7.",
    "start": "177990",
    "end": "185810"
  },
  {
    "text": "And then at time 1, you\nmaybe did an insert of 3.",
    "start": "185810",
    "end": "191599"
  },
  {
    "text": "And then at time 2,\nyou did a delete-min. ",
    "start": "191600",
    "end": "198860"
  },
  {
    "text": "OK, what's that spell? Or, at the end you have-- right now, you'd have\njust the element 7. In general, every data structure\nyou can think of is this.",
    "start": "198860",
    "end": "206900"
  },
  {
    "text": "Now normally, we're always\nappending to the timeline that's working in the present.",
    "start": "206900",
    "end": "213200"
  },
  {
    "text": "You're doing operations\non the present. But we'd like to allow--\nwith retroactive data",
    "start": "213200",
    "end": "218299"
  },
  {
    "text": "structures you can\ngo back in time, say right at the beginning of\ntime, and say actually I",
    "start": "218300",
    "end": "223549"
  },
  {
    "text": "meant to put, at time minus 1, I\nmeant to do something insert 4.",
    "start": "223550",
    "end": "228660"
  },
  {
    "text": "Or actually, insert 2 would\nbe a little more interesting. Insert 2 is interesting,\nbecause that actually",
    "start": "228660",
    "end": "234140"
  },
  {
    "text": "changes what the delete-min\noperation would have done. And so I want to\ngo back in time, do this, and then return to\nthe present, say what's my data",
    "start": "234140",
    "end": "241040"
  },
  {
    "text": "structure look like now. I want to be able to do\nthe regular queries I can. So let's say you can do\nqueries at the present.",
    "start": "241040",
    "end": "249530"
  },
  {
    "text": "This is now. And you can do queries here.",
    "start": "249530",
    "end": "255050"
  },
  {
    "text": "And I want to be able to\nadd and remove operations.",
    "start": "255050",
    "end": "261890"
  },
  {
    "start": "261890",
    "end": "267170"
  },
  {
    "text": "Update operations at any time. ",
    "start": "267170",
    "end": "275430"
  },
  {
    "text": "So that's what's called a\npartially retroactive data structure.",
    "start": "275430",
    "end": "281920"
  },
  {
    "text": "So like persistence, we\nhave partial and full. So in general, we're going\nto have insert at a given",
    "start": "281920",
    "end": "291410"
  },
  {
    "text": "time, a given update. ",
    "start": "291410",
    "end": "296810"
  },
  {
    "text": "Delete the operation\nat a given time.",
    "start": "296810",
    "end": "301970"
  },
  {
    "text": "And query. ",
    "start": "301970",
    "end": "310610"
  },
  {
    "text": "And I'm going to\nuse capital letters to denote retroactive operations\nand lower case letters",
    "start": "310610",
    "end": "318110"
  },
  {
    "text": "to denote regular operations. So it's intentional. This is an uppercase insert. This is a lowercase insert.",
    "start": "318110",
    "end": "323849"
  },
  {
    "text": "So we're inserting an insert\nat time, the time before 0.",
    "start": "323850",
    "end": "329960"
  },
  {
    "text": "What exactly does\ntime mean here? We're not going to work with\nthat too much directly today.",
    "start": "329960",
    "end": "336395"
  },
  {
    "text": "You can think of them\nas just being integers. But it gets awkward if you just\nkeep inserting new operations to do in between 1 and 2.",
    "start": "336395",
    "end": "342919"
  },
  {
    "text": "There aren't very many\nintegers between 1 and 2. One easy solution to this is\nuse the order maintenance data",
    "start": "342920",
    "end": "348919"
  },
  {
    "text": "structure that we mentioned\nin the last class, where you basically are\nmaintaining a linked list and you're able to insert\nnew times in between any two",
    "start": "348920",
    "end": "356600"
  },
  {
    "text": "given times. And you can still do order\nqueries in constant time. But I mean, if you\ndon't mind logs",
    "start": "356600",
    "end": "362229"
  },
  {
    "text": "you could just store the\ntimes in a binary search tree. That's an easy way to do it.",
    "start": "362229",
    "end": "368280"
  },
  {
    "text": "We're not really going to\nworry about that too much here. What we're interested\nhere is how do we",
    "start": "368280",
    "end": "374120"
  },
  {
    "text": "maintain the sort\nof side effects of doing this operation\nearlier in time,",
    "start": "374120",
    "end": "380210"
  },
  {
    "text": "computing all of this,\nor chain reactions that would have happened meanwhile,\nsort of butterfly effect.",
    "start": "380210",
    "end": "386900"
  },
  {
    "text": "All right, I want to define\npartial retroactivity",
    "start": "386900",
    "end": "393979"
  },
  {
    "text": "means queries are always\ndone at the present.",
    "start": "393980",
    "end": "403200"
  },
  {
    "text": "Let's say t equals\ninfinity or now. This is what you might\ncall the Q model,",
    "start": "403200",
    "end": "408790"
  },
  {
    "text": "if you're a Star Trek fan. You can exist in all time\nsimultaneously, do updates whenever you feel\nlike it, do queries",
    "start": "408790",
    "end": "414020"
  },
  {
    "text": "whenever you feel like it. All right model clear.",
    "start": "414020",
    "end": "419780"
  },
  {
    "text": "Now as you might\nexpect, this is hard. You can't always do\nretroactivity super well.",
    "start": "419780",
    "end": "425580"
  },
  {
    "text": "But we'll talk about our\nsituations you can do well and what you can do in general.",
    "start": "425580",
    "end": "430940"
  },
  {
    "text": " Go to an easy case, which\nis still fairly interesting.",
    "start": "430940",
    "end": "440833"
  },
  {
    "text": " Suppose you have\ncommutative updates,",
    "start": "440833",
    "end": "449720"
  },
  {
    "text": "meaning x followed by y is the\nsame thing as y followed by x.",
    "start": "449720",
    "end": "456672"
  },
  {
    "text": "This would be great if\nI could reorder updates, because then I don't really care\nabout the sequence of updates, as long as I'm only\nquerying the final results.",
    "start": "456672",
    "end": "465470"
  },
  {
    "text": "If I want to do an\nupdate in the past-- this would not be an example\nof commutative-- delete-min and insert are not commutative.",
    "start": "465470",
    "end": "471255"
  },
  {
    "text": "But if I was just doing\ninsert and delete for example, delete 7, whatever,\nthen inserting 2 here",
    "start": "471255",
    "end": "478787"
  },
  {
    "text": "is the same thing as\ninserting 2 at the end, as long as I'm only\nquerying the end. So this would be an easy case\nfor partial retroactivity.",
    "start": "478787",
    "end": "486640"
  },
  {
    "start": "486640",
    "end": "491660"
  },
  {
    "text": "If my updates are commutative,\nthen inserting an operation",
    "start": "491660",
    "end": "497450"
  },
  {
    "text": "at time t is the same thing as\ninserting that operation now,",
    "start": "497450",
    "end": "505670"
  },
  {
    "text": "at the end of time.  That's for inserts.",
    "start": "505670",
    "end": "510830"
  },
  {
    "text": "But if I want to\nalso be able to-- for retroactive inserts,\nI should say, capital I.",
    "start": "510830",
    "end": "516110"
  },
  {
    "text": "If I want to be able to\ndo retroactive deletes, I need something else. I need some way--",
    "start": "516110",
    "end": "521900"
  },
  {
    "text": "I still want to only work\nin the present, if I can. And for that I need inversion.",
    "start": "521900",
    "end": "528680"
  },
  {
    "text": "I have invertible updates. ",
    "start": "528680",
    "end": "535480"
  },
  {
    "text": "If there is some way to,\ngiven an operation x, compute a new operation x\ninverse, that does the reverse,",
    "start": "535480",
    "end": "542190"
  },
  {
    "text": "and that's equivalent\nto nothing, then deleting an operation\nis the same thing as doing",
    "start": "542190",
    "end": "548450"
  },
  {
    "text": "the inverse. And if you have\nalso commutativity-- so I'm adding these two\nconstraints-- then delete t",
    "start": "548450",
    "end": "557840"
  },
  {
    "text": "some operation is the same thing\nas inserting now that operation",
    "start": "557840",
    "end": "567091"
  },
  {
    "text": "inverse.  So that's-- if I have\nboth of these properties,",
    "start": "567091",
    "end": "574920"
  },
  {
    "text": "then partial\nretroactivity is trivial. I just do everything\nin the present.",
    "start": "574920",
    "end": "580810"
  },
  {
    "text": "May not seem very exciting, but\nit solves a bunch of problems already for free. So for example, hashing.",
    "start": "580810",
    "end": "588220"
  },
  {
    "text": "If you want a dynamic\nhash table or dictionary, and you want to be able to\nmake retroactive changes,",
    "start": "588220",
    "end": "593820"
  },
  {
    "text": "it really doesn't matter whether\nyou make them in the past or in the present. I'm assuming a little bit here\nthat you don't, for example,",
    "start": "593820",
    "end": "600130"
  },
  {
    "text": "clobber a key and write\nto the same key twice. Then the order would matter.",
    "start": "600130",
    "end": "605490"
  },
  {
    "text": "But if you store all copies of\nall keys, then this is true. ",
    "start": "605490",
    "end": "610936"
  },
  {
    "text": "Slightly more\ninteresting, if you have an array with the\noperation add delta",
    "start": "610936",
    "end": "621250"
  },
  {
    "text": "to a given array element. So if I had an assignment here,\nthen the order would matter. But if I have only\naddition or subtraction,",
    "start": "621250",
    "end": "629000"
  },
  {
    "text": "that's fine, because\naddition and subtraction are commutative. So I can do that.",
    "start": "629000",
    "end": "634690"
  },
  {
    "text": "Not terribly exciting,\nas you might imagine. We're going to get to much\nmore interesting examples.",
    "start": "634690",
    "end": "640000"
  },
  {
    "text": "But a natural question here is\nwhat about full retroactivity? So partial's nice.",
    "start": "640000",
    "end": "646780"
  },
  {
    "text": "But if I have such\nan easy setup, can I achieve full\nretroactivity? It's not so obvious because\nnow working in the present,",
    "start": "646780",
    "end": "653529"
  },
  {
    "text": "it's not correctly\nreflecting the past. To do that, we need--",
    "start": "653530",
    "end": "659170"
  },
  {
    "text": "we cannot do it in\ngeneral, we don't know how. But there is a situation\nwhere we do know how.",
    "start": "659170",
    "end": "665230"
  },
  {
    "text": "First I'll define\na search problem. ",
    "start": "665230",
    "end": "671680"
  },
  {
    "text": "The search problem is-- you've seen many\nexamples of this",
    "start": "671680",
    "end": "676880"
  },
  {
    "text": "in your algorithmic lifetime-- I maintain a set S of objects--",
    "start": "676880",
    "end": "682960"
  },
  {
    "text": "we don't know what they are-- subject to insert, delete,\nand some kind of search query.",
    "start": "682960",
    "end": "690100"
  },
  {
    "start": "690100",
    "end": "699279"
  },
  {
    "text": "And I want to focus in on the\ntypes of queries we allow. So this in particular,\ninsert and delete",
    "start": "699280",
    "end": "705940"
  },
  {
    "text": "are commutative and invertible. They are each other's inverses. So n queries are queries.",
    "start": "705940",
    "end": "712220"
  },
  {
    "text": "This is really just a\nconstraint on updates. So search problems fall\ninto this easy class. So in particular,\nit covers hashing.",
    "start": "712220",
    "end": "718540"
  },
  {
    "text": " Fine, that's a general\nclass of problems.",
    "start": "718540",
    "end": "724570"
  },
  {
    "text": "Here's a slightly less\ngeneral class of problems, which are sort of well-studied.",
    "start": "724570",
    "end": "731180"
  },
  {
    "text": "The old geometric data\nstructures literature. Decomposable search problems. ",
    "start": "731180",
    "end": "737810"
  },
  {
    "text": "This is a concept\nfrom 1980 revitalized. I should mention this\nretroactive paper",
    "start": "737810",
    "end": "743920"
  },
  {
    "text": "is pretty recent. I think the journal\nversion appeared in 2007.",
    "start": "743920",
    "end": "749412"
  },
  {
    "text": "I have 2003 and 2007 here. So those are the two\nversions of the paper. ",
    "start": "749412",
    "end": "757000"
  },
  {
    "text": "So what's a decomposable\nsearch problem? Same thing, but the query\nis of a particular flavor,",
    "start": "757000",
    "end": "764020"
  },
  {
    "text": "has a particular structure. If I want to do a query on the\nunion of two sets, a and b,",
    "start": "764020",
    "end": "772560"
  },
  {
    "text": "it's the same thing as doing\nthe query on the two sets individually and then combining\nthem with some function.",
    "start": "772560",
    "end": "778029"
  },
  {
    "start": "778030",
    "end": "786820"
  },
  {
    "text": "This is a constraint\non what the query is. The problem is still this. I still want to do a\nquery on the entire set.",
    "start": "786820",
    "end": "794290"
  },
  {
    "text": "But I just know this fact,\nthat if I could somehow solve the query\non smaller sets, I",
    "start": "794290",
    "end": "799930"
  },
  {
    "text": "could combine them into the\nunion using this f function. For some, let's say this can\nbe computed in constant time.",
    "start": "799930",
    "end": "805510"
  },
  {
    "text": " That's a decomposable\nsearch problem.",
    "start": "805510",
    "end": "811870"
  },
  {
    "text": "For example, suppose I have\na set of points in the plane. And I want to know, given\na query point, what's",
    "start": "811870",
    "end": "817450"
  },
  {
    "text": "the nearest point in my set? So it would be dynamic\nnearest neighbor.",
    "start": "817450",
    "end": "823209"
  },
  {
    "text": "If I could compute the nearest\nneighbor among one subset of the points, and\nthe nearest neighbor among a different subset, I can\ncompute the nearest neighbor",
    "start": "823210",
    "end": "829660"
  },
  {
    "text": "among the union just by\ntaking the min of the two. Doesn't matter whether\na and b overlap. That will still give\nthe right answer.",
    "start": "829660",
    "end": "836649"
  },
  {
    "text": "Sort of a min over all things. I have some other examples.",
    "start": "836650",
    "end": "842139"
  },
  {
    "text": "Successor on a line. If I'm given a\nquery point, I want to know what the next, the\nnearest item after it is.",
    "start": "842140",
    "end": "849189"
  },
  {
    "text": "That's sort of like\none-sided nearest neighbor. Yeah, point location, we'll\nget to that in the future.",
    "start": "849190",
    "end": "856839"
  },
  {
    "text": "Don't want to time\ntravel too much. OK, so some property-- some\nqueries have this property.",
    "start": "856840",
    "end": "862760"
  },
  {
    "text": "Some don't. If they do-- and we have\ncommutative and invertability-- I claim full retroactivity\nbecomes easy.",
    "start": "862760",
    "end": "870009"
  },
  {
    "text": "Relatively easy. Log factor overhead. So that's what I\nwanted to show you.",
    "start": "870010",
    "end": "875500"
  },
  {
    "text": " Full retro for decomposable\nsearch problems.",
    "start": "875500",
    "end": "883269"
  },
  {
    "start": "883270",
    "end": "888430"
  },
  {
    "text": "Decomposable search\nproblems are automatically computed of an\ninvertible, so I don't need to write that constraint.",
    "start": "888430",
    "end": "894410"
  },
  {
    "text": "In log-- I have n here,\nbut I think I mean m--",
    "start": "894410",
    "end": "901110"
  },
  {
    "text": "overhead.  It's a multiplicative factor.",
    "start": "901110",
    "end": "906790"
  },
  {
    "text": "m here is the number of\nretroactive operations you're doing. So it's the size\nof the timeline. ",
    "start": "906790",
    "end": "915080"
  },
  {
    "text": "OK, we're going to do that\nvia something called a segment",
    "start": "915080",
    "end": "922150"
  },
  {
    "text": "tree, which was introduced\nin the same paper that",
    "start": "922150",
    "end": "929012"
  },
  {
    "text": "dealt with decomposable search\nproblems by Bentley and Saxe in 1980.",
    "start": "929012",
    "end": "934449"
  },
  {
    "text": "They weren't thinking\nabout time travel. Retroactively their\nresult is useful.",
    "start": "934450",
    "end": "940449"
  },
  {
    "text": "So what's a segment tree? It's a tree. Let me draw my favorite picture.",
    "start": "940450",
    "end": "948490"
  },
  {
    "text": "Draw this many times in\nthis class, I'm sure. ",
    "start": "948490",
    "end": "955330"
  },
  {
    "text": "I would like to build a balanced\nbinary search tree on time. Leaves will be time.",
    "start": "955330",
    "end": "960475"
  },
  {
    "text": " Here's time. ",
    "start": "960475",
    "end": "968900"
  },
  {
    "text": "And the idea is, well, if I\nhave my operations, my updates-- which are what the things\nthat live on time are--",
    "start": "968900",
    "end": "975010"
  },
  {
    "text": "are inserts and deletes. And so if I look at an\nelement, at some point it might be inserted.",
    "start": "975010",
    "end": "980890"
  },
  {
    "text": "At some point later\nit might be deleted. I'm going to assume every\nelement is inserted and deleted only once.",
    "start": "980890",
    "end": "987820"
  },
  {
    "text": "Otherwise, if it\nhappens multiple times, think of them as\ndifferent elements. Then every element exists\nfor an interval of time.",
    "start": "987820",
    "end": "996459"
  },
  {
    "text": "So for example, maybe\nI have an element that exists for this\ninterval of time.",
    "start": "996460",
    "end": "1002880"
  },
  {
    "text": "Maybe it gets inserted here\nand then gets deleted here. How should I represent\nthat interval in my tree?",
    "start": "1002880",
    "end": "1010380"
  },
  {
    "text": "Let's call this element a. Well, if I draw a\ncomplete binary tree,",
    "start": "1010380",
    "end": "1016442"
  },
  {
    "text": "there there's an\nobvious way to represent that interval, which is as the\nunion of these four intervals.",
    "start": "1016442",
    "end": "1024871"
  },
  {
    "text": "If you think of this\nnode as representing the interval of\nall of its leaves, descendant leaves, then\nI could put a here.",
    "start": "1024871",
    "end": "1031140"
  },
  {
    "text": "And I could put a here,\nand here, and here.",
    "start": "1031140",
    "end": "1036660"
  },
  {
    "text": "I do that for all my elements. This picture's going\nto get messy quickly. Let me just do one more example.",
    "start": "1036660",
    "end": "1044599"
  },
  {
    "text": "So maybe I have an\nelement from here to here.",
    "start": "1044599",
    "end": "1051880"
  },
  {
    "text": "Then I'm going to\ncall that element b. Then I'll put b here. And I'll put b here.",
    "start": "1051880",
    "end": "1058950"
  },
  {
    "text": "So always putting it\nis as high as I can. I don't want to put b or a in\nall the leaves it appears in,",
    "start": "1058950",
    "end": "1064330"
  },
  {
    "text": "because that would be a\nlinear number of leaves. If I do it like\nthis, there's only log n subtrees I care\nabout, representing",
    "start": "1064330",
    "end": "1070559"
  },
  {
    "text": "the interval as a union of log\nn subtree aligned intervals.",
    "start": "1070560",
    "end": "1077000"
  },
  {
    "text": "OK, now the real picture is\nslightly messier than this. I drew a nice,\ncomplete, perfect tree.",
    "start": "1077000",
    "end": "1083669"
  },
  {
    "text": "In reality, you're inserting\nnew operations in here. And so you've actually\ngot to maintain this as a balanced\nbinary search tree.",
    "start": "1083670",
    "end": "1089843"
  },
  {
    "text": "So use a red-black tree, AVL\ntree, or pick your favorite. As long as it stays balanced,\nyou can still do this.",
    "start": "1089843",
    "end": "1097420"
  },
  {
    "text": "It'll be a little less\nobvious how to do rotations, but let's not worry about\nrotations right now.",
    "start": "1097420",
    "end": "1102660"
  },
  {
    "text": "Now I want to do a query. What's a query look like? Well, I care about\nall the things done up",
    "start": "1102660",
    "end": "1108299"
  },
  {
    "text": "to a certain time. Or really I care\nabout who exists. Let's say I want to do a\nquery on an array here.",
    "start": "1108300",
    "end": "1116876"
  },
  {
    "text": "That's maybe not so exciting. Let's do a query here.",
    "start": "1116876",
    "end": "1123060"
  },
  {
    "text": " I want to know at\nthis time who exists,",
    "start": "1123060",
    "end": "1129510"
  },
  {
    "text": "and perform the\nquery on that time. So really, I'm asking\nabout everything done in this interval,\nfrom the beginning of time",
    "start": "1129510",
    "end": "1138929"
  },
  {
    "text": "to my query time t. So here's query of t.",
    "start": "1138930",
    "end": "1146550"
  },
  {
    "text": "Now we don't know\nwhat the query is. We just know it's on the set. And we know that is decomposable\nin this way by a set union.",
    "start": "1146550",
    "end": "1154720"
  },
  {
    "text": "So the idea is, well I'll do the\nquery on this data structure, because that represents\nwhatever existed at that time.",
    "start": "1154720",
    "end": "1160846"
  },
  {
    "text": "And then I'll do the query\non this data structure, because that represents\nthe things that existed before that.",
    "start": "1160847",
    "end": "1165930"
  },
  {
    "text": " That doesn't look so great.",
    "start": "1165930",
    "end": "1172240"
  },
  {
    "text": "OK, so I need to put\neach element in log n different nodes in\nhere, such that I",
    "start": "1172240",
    "end": "1179310"
  },
  {
    "text": "can answer a query by looking\nat log n different nodes. And a query is asking about\nwhat are all the things that",
    "start": "1179310",
    "end": "1185670"
  },
  {
    "text": "exist at this time. So here it would be ab. Over here it would be nothing.",
    "start": "1185670",
    "end": "1191810"
  },
  {
    "text": "Over here it would be nothing. Yeah? AUDIENCE: If you're\nquerying, the time",
    "start": "1191810",
    "end": "1198812"
  },
  {
    "text": "correspond to\nparticular [INAUDIBLE].. Then you can query all\nthe data structures-- ERIK DEMAINE: OK, maybe I was\njust doing the queries wrong.",
    "start": "1198812",
    "end": "1205900"
  },
  {
    "text": "Good, I think\nthat's a good idea. I guess I'm asking about\nquerying this time.",
    "start": "1205900",
    "end": "1212080"
  },
  {
    "text": "So which node should I do? All the ancestors. ",
    "start": "1212080",
    "end": "1219630"
  },
  {
    "text": "I see. Claim that does it.",
    "start": "1219630",
    "end": "1224880"
  },
  {
    "text": "Gotta think about it. AUDIENCE: And then\nyou carry [INAUDIBLE] ERIK DEMAINE: That\ndefinitely gets a and b.",
    "start": "1224880",
    "end": "1231400"
  },
  {
    "text": "That looks good. All right, exercise to\nprove that this works. ",
    "start": "1231400",
    "end": "1238110"
  },
  {
    "text": "I think that is right. So it's an asymmetry\nbetween queries and updates. For updates, you basically\npartition the interval.",
    "start": "1238110",
    "end": "1248550"
  },
  {
    "text": " AUDIENCE: What happens to\na very short-lived element",
    "start": "1248550",
    "end": "1254783"
  },
  {
    "text": "at the very end of\nthe time travel? [INAUDIBLE]",
    "start": "1254784",
    "end": "1273029"
  },
  {
    "text": "ERIK DEMAINE: So\nmaybe this works. I'll think about\nit offline and I'll send email if it doesn't work.",
    "start": "1273030",
    "end": "1278580"
  },
  {
    "text": "But I think this is right. So for query, you walk up time. And I'm going to query each\nof these data structures.",
    "start": "1278580",
    "end": "1285990"
  },
  {
    "text": "Now this is a logarithmic\nfactor overhead, both in time and space, because\neach element might be stored",
    "start": "1285990",
    "end": "1292230"
  },
  {
    "text": "in log n different structures. Or what are in these\nnodes, by the way? That is your data structure,\nthe non-retroactive version.",
    "start": "1292230",
    "end": "1298535"
  },
  {
    "text": "So we're storing the\nnon-radioactive data structure on these guys in order to--",
    "start": "1298535",
    "end": "1303935"
  },
  {
    "text": "when I add-- if I\nmodify a's interval, I delete it from\nall the places that used to be in and then\nreinsert it into all the places",
    "start": "1303935",
    "end": "1311340"
  },
  {
    "text": "it's now in. So I'm doing inserts\nand deletes on log n of those non-retroactive\ndata structures.",
    "start": "1311340",
    "end": "1318330"
  },
  {
    "text": "OK, and then I combine with\nf which is constant time. So only log factor\noverhead on the queries.",
    "start": "1318330",
    "end": "1325211"
  },
  {
    "text": "OK, a little harder\nthan I thought. ",
    "start": "1325211",
    "end": "1330420"
  },
  {
    "text": "So full retro,\nfull retroactivity, but in this relatively\nsimple special case.",
    "start": "1330420",
    "end": "1336324"
  },
  {
    "text": "Let's talk about\nthe general case. ",
    "start": "1336324",
    "end": "1357630"
  },
  {
    "text": "There's an obvious way to do\nfull retroactivity, which is--",
    "start": "1357630",
    "end": "1362830"
  },
  {
    "text": "let's say partial retroactivity. I want to know what\nhappened in the present. The obvious thing to do is write\ndown all the changes you made.",
    "start": "1362830",
    "end": "1371280"
  },
  {
    "text": "And then if you want to\nmake a retroactive change, you roll back, do your change,\nand then replay everything",
    "start": "1371280",
    "end": "1377580"
  },
  {
    "text": "that happened meanwhile. So this is the rollback method. ",
    "start": "1377580",
    "end": "1405470"
  },
  {
    "text": "So if I need to go back in time\nby a factor of r, by r time",
    "start": "1405470",
    "end": "1411450"
  },
  {
    "text": "units, I pay a factor\nof r overhead in time. And space is reasonable. You just have to remember\neverything that happened.",
    "start": "1411450",
    "end": "1419670"
  },
  {
    "text": "This is pretty obvious. Also old. Unfortunately,\nit's about the best we can do in general,\ndepending on your exact model.",
    "start": "1419670",
    "end": "1427799"
  },
  {
    "start": "1427800",
    "end": "1434492"
  },
  {
    "text": "So we add the lower bound. ",
    "start": "1434492",
    "end": "1454210"
  },
  {
    "text": "This is kind of a fun result\nfrom a philosophy standpoint, philosophy of time travel.",
    "start": "1454210",
    "end": "1460142"
  },
  {
    "text": "It's essentially saying\nthat Back to the Future is impossible. I know, it's sad but true.",
    "start": "1460142",
    "end": "1465610"
  },
  {
    "text": "And there's a good movie\nabout this called Retroactive. This is a very unknown\nmovie, from '97,",
    "start": "1465610",
    "end": "1471760"
  },
  {
    "text": "or so, where they play through\nthis sequence of events.",
    "start": "1471760",
    "end": "1477667"
  },
  {
    "text": "And then there's a time\nmachine which brings them, I forget, an hour into the past.",
    "start": "1477667",
    "end": "1482740"
  },
  {
    "text": "And then they have to\nrelive those events. And they can make changes. But they have to spend\nall that time until they",
    "start": "1482740",
    "end": "1487840"
  },
  {
    "text": "get to the time machine again. They still didn't get it\nright, so they go back in time. And the movie repeats\nlike six times or so,",
    "start": "1487840",
    "end": "1494140"
  },
  {
    "text": "until they finally get it right. Or I shouldn't, whatever,\nforget the ending actually. So that's realistic in that\nwe know from persistence,",
    "start": "1494140",
    "end": "1503020"
  },
  {
    "text": "we can remember the past. And we can jump back into the\npast and then just relive it.",
    "start": "1503020",
    "end": "1508360"
  },
  {
    "text": "And maybe make\nchanges along the way. But the claim is you can't\ndo that any more efficiently",
    "start": "1508360",
    "end": "1513520"
  },
  {
    "text": "than replaying all of those\nevents, in the worst case, and I think even in real life.",
    "start": "1513520",
    "end": "1519760"
  },
  {
    "text": "Should include the worst case. So let me tell you why. All we need to live\nin our universe",
    "start": "1519760",
    "end": "1524919"
  },
  {
    "text": "for this lower bound to hold\nis a very simple computer. ",
    "start": "1524920",
    "end": "1541440"
  },
  {
    "text": "It's a computer with\ntwo registers, x and y. They start at zero. AUDIENCE: Question.",
    "start": "1541440",
    "end": "1546520"
  },
  {
    "text": "ERIK DEMAINE: Yeah? AUDIENCE: When you say that\nthe overhead can be necessary, does that mean that\nit's sometimes not-- ERIK DEMAINE: The can be is\nrelative to the data structure.",
    "start": "1546520",
    "end": "1554194"
  },
  {
    "text": "So there is a data\nstructure where you're guaranteed to need\norder r in the worst case.",
    "start": "1554194",
    "end": "1561429"
  },
  {
    "text": "And probably the average case\nin all sorts of bad things. Yeah, so there are\nsome data structures,",
    "start": "1561430",
    "end": "1566470"
  },
  {
    "text": "like these ones, where\nyou can do better. And this is for\npartial retroactivity.",
    "start": "1566470",
    "end": "1573564"
  },
  {
    "text": "But then there are\nsome data structures, like the one I'm going\nto describe to you, that you cannot do better. ",
    "start": "1573564",
    "end": "1581707"
  },
  {
    "text": "So here are my operations. I can set x to a value. I can add a value to y.",
    "start": "1581707",
    "end": "1589600"
  },
  {
    "text": "I can compute the product of\nx and y and put it into y.",
    "start": "1589600",
    "end": "1595240"
  },
  {
    "text": "And then I have a query,\nwhich is what is y.",
    "start": "1595240",
    "end": "1601350"
  },
  {
    "text": "So this is one of the simplest\ncomputers ever designed. A very basic calculator.",
    "start": "1601350",
    "end": "1607210"
  },
  {
    "text": "But it lets us do-- Here's what the operations\nI'm going to do.",
    "start": "1607210",
    "end": "1613390"
  },
  {
    "text": "First operation-- this\nis in order of time. First I will add a into y.",
    "start": "1613390",
    "end": "1621220"
  },
  {
    "text": "Then I will compute the product. Then I will compute-- then I will add a\nand minus 1 to y.",
    "start": "1621220",
    "end": "1628674"
  },
  {
    "text": "Then I will compute the product. And then at the end, I\nwill add a zero to y.",
    "start": "1628675",
    "end": "1636671"
  },
  {
    "text": "What does that do?  Mathematicians.",
    "start": "1636671",
    "end": "1642724"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ERIK DEMAINE:\nPolynomial evaluation. This is equivalent to\ncomputing a n, x to the n--",
    "start": "1642724",
    "end": "1654650"
  },
  {
    "text": "well, I guess capital X\nto the n, a n minus 1, x to the n minus 1, a0.",
    "start": "1654650",
    "end": "1661655"
  },
  {
    "text": " OK, I didn't set X\nat the beginning. But whatever X was, this\nsequence of operations",
    "start": "1661655",
    "end": "1669400"
  },
  {
    "text": "will evaluate this polynomial. This is called Cramer's rule\nfor evaluating that polynomial. Just keep multiplying\nby X in each round,",
    "start": "1669400",
    "end": "1676660"
  },
  {
    "text": "adding on the next coefficient. OK, so the result--",
    "start": "1676660",
    "end": "1681760"
  },
  {
    "text": "this I'm just going to\ndo at the beginning. It's like regular operations. And now I'm going to do\nthings like insert at time 0",
    "start": "1681760",
    "end": "1693250"
  },
  {
    "text": "that X equals some value. I'm just going to keep--",
    "start": "1693250",
    "end": "1698559"
  },
  {
    "text": "first I'll put it here, then\nright after, then right after-- keep doing those insertions. I completely change what X is.",
    "start": "1698560",
    "end": "1704740"
  },
  {
    "text": "And so I change where I'm\nevaluating this polynomial. And claim is you\nreally can't do that",
    "start": "1704740",
    "end": "1710950"
  },
  {
    "text": "any faster than\nreevaluating the polynomial. In a history independent\nalgebraic decision tree model--",
    "start": "1710950",
    "end": "1725630"
  },
  {
    "text": "which I don't want to\ndefine precisely, but maybe",
    "start": "1725630",
    "end": "1731830"
  },
  {
    "text": "computation tree\nwould be better. Anyway, this is just you draw a\ntree of all the possible things",
    "start": "1731830",
    "end": "1737740"
  },
  {
    "text": "you could do. And the things you can do are\nadditions, multiplications,",
    "start": "1737740",
    "end": "1742750"
  },
  {
    "text": "subtractions, divisions,\nall field operations. So for any field, this would\nwork with reals, would also,",
    "start": "1742750",
    "end": "1753549"
  },
  {
    "text": "should work for\nintegers module LP. Any fields.",
    "start": "1753550",
    "end": "1760690"
  },
  {
    "text": "And the interesting part is\nindependent of preprocessing",
    "start": "1760690",
    "end": "1765909"
  },
  {
    "text": "of the coefficients, you can\nstare at those coefficients however long you like.",
    "start": "1765910",
    "end": "1771039"
  },
  {
    "text": "In the worst case, you need\nmega n field operations,",
    "start": "1771040",
    "end": "1780190"
  },
  {
    "text": "where n is the degree\nof the polynomial. So this is a known\nresult from 2001.",
    "start": "1780190",
    "end": "1786220"
  },
  {
    "text": "And so it tells you that each\nof these retroactive operations, it's n time units in the past.",
    "start": "1786220",
    "end": "1791380"
  },
  {
    "text": "And you need order n\ntime to complete it. Even though these\noperations can be solved in constant time each.",
    "start": "1791380",
    "end": "1798130"
  },
  {
    "text": "So it's a factor n loss. Now this is a particular\nmodel of computation.",
    "start": "1798130",
    "end": "1804299"
  },
  {
    "text": "It implies something like an\ninteger or a random access machine, where you can have\narrays, I don't really care.",
    "start": "1804300",
    "end": "1810120"
  },
  {
    "text": "But as long as the\nway that you're manipulating these objects\nare with field operations, you're in trouble.",
    "start": "1810120",
    "end": "1817470"
  },
  {
    "text": "OK, but there are conceivably\nother things you could do. ",
    "start": "1817470",
    "end": "1823170"
  },
  {
    "text": "If these numbers\nare integers maybe I could split their\nbits into parts and do crazy things with them.",
    "start": "1823170",
    "end": "1828294"
  },
  {
    "text": "That's something we'll get\nto later on in the class. ",
    "start": "1828294",
    "end": "1833970"
  },
  {
    "text": "Even then, you can't do so well. I guess I'll briefly tell\nyou this because there's",
    "start": "1833970",
    "end": "1842122"
  },
  {
    "text": "an interesting lower balance. Oh sorry, interesting\nopen problem. ",
    "start": "1842122",
    "end": "1855140"
  },
  {
    "text": "Cell-probe model, something\nwe'll get into in a deeper way later on in this class. But it just says\nhow many objects,",
    "start": "1855140",
    "end": "1864462"
  },
  {
    "text": "how many words of memory do\nyou need to read in order to solve your problem? So that's a lower bound on time.",
    "start": "1864462",
    "end": "1870930"
  },
  {
    "text": "No matter how you're\ncomputing with those numbers, how many of the objects,\nhow many of the integers do you need to read?",
    "start": "1870930",
    "end": "1877727"
  },
  {
    "text": "Not necessarily just the\nai's You could split them into parts, do all\nkinds of preprocessing, make a hash table,\nbuild whatever",
    "start": "1877727",
    "end": "1884121"
  },
  {
    "text": "data structure you want. How many words of that data\nstructure do you need to read? And the claim is at least square\nroot of r divided by log r.",
    "start": "1884121",
    "end": "1895990"
  },
  {
    "text": "So roughly square root\nof r, open problem, is can you get something\nlike r again in this model?",
    "start": "1895990",
    "end": "1904030"
  },
  {
    "text": "So this is a very powerful\nmodel, not at all realistic. But if you can prove a\nlower bound in this model,",
    "start": "1904030",
    "end": "1909210"
  },
  {
    "text": "then it holds basically all\nmodels you could ever think of. So here's a data\nstructure-- or here's",
    "start": "1909210",
    "end": "1915570"
  },
  {
    "text": "the proof of this lower bound. ",
    "start": "1915570",
    "end": "1921420"
  },
  {
    "text": "Data structure\nmaintains n words.  I should say typically\nin this class,",
    "start": "1921420",
    "end": "1927900"
  },
  {
    "text": "a word is an integer\nof let's say log n--",
    "start": "1927900",
    "end": "1934460"
  },
  {
    "text": "I'll be more precise. w bits. w is at least log n. ",
    "start": "1934460",
    "end": "1941580"
  },
  {
    "text": "We'll talk about\nthis a lot more later in the class when we get\nto integer data structures. But if you were wondering what\na word means, there it is.",
    "start": "1941580",
    "end": "1950850"
  },
  {
    "text": "And the operations, the\nupdates you are allowed to do are arithmetic operations.",
    "start": "1950850",
    "end": "1957520"
  },
  {
    "text": "So it's generalization\nof this problem. You can do addition,\nmultiplication, division,",
    "start": "1957520",
    "end": "1963539"
  },
  {
    "text": "just basic stuff. So that's the data structure\nwe're trying to do. And at the end you can query\nwhat is the value of this word.",
    "start": "1963540",
    "end": "1972419"
  },
  {
    "text": "And now what are we going to do? Before we did polynomial\nevaluation in that model.",
    "start": "1972420",
    "end": "1977850"
  },
  {
    "text": "Now what I'm going to\ndo is compute FFT, fast Fourier transform.",
    "start": "1977850",
    "end": "1983710"
  },
  {
    "text": "If you know how\nto do that great. If not, it's an n\nlog n algorithm. So it's an n log in\noperations you do.",
    "start": "1983710",
    "end": "1989280"
  },
  {
    "text": "I'm just going to write them\ndown as my sequence of updates. At the end I have the\nfast Fourier transform.",
    "start": "1989280",
    "end": "1995340"
  },
  {
    "text": "And the retroactive\nthing I'm going to do is set all of these words,\nall the xi's, and name them.",
    "start": "1995340",
    "end": "2003230"
  },
  {
    "text": "Which changes the input to\nthe fast Fourier transform. And it turns out that dynamic\nfast Fourier transform,",
    "start": "2003230",
    "end": "2012200"
  },
  {
    "text": "where changing one of the\nwords, xi, you can show,",
    "start": "2012200",
    "end": "2021440"
  },
  {
    "text": "or it has been shown-- we're not going to\nprove this here-- requires at least square\nroot of n cell-probes.",
    "start": "2021440",
    "end": "2029539"
  },
  {
    "text": " So this is about-- if you change one thing in\na fast Fourier transform,",
    "start": "2029540",
    "end": "2035840"
  },
  {
    "text": "it doesn't change\neverything, necessarily. But the claim is\nthat you need to look",
    "start": "2035840",
    "end": "2041330"
  },
  {
    "text": "at least root n of\nthe things again, in order to figure out what\nhappened, how the FFT changed.",
    "start": "2041330",
    "end": "2046820"
  },
  {
    "text": "So I mention this mostly\nas an interesting question of whether you can come up\nwith a better lower bound",
    "start": "2046820",
    "end": "2052310"
  },
  {
    "text": "in this data structure. Ideally taking some\nexisting lower bound, plugging it in to this kind\nof retroactive framework,",
    "start": "2052310",
    "end": "2060469"
  },
  {
    "text": "and getting what you want.",
    "start": "2060469",
    "end": "2065739"
  },
  {
    "text": "Enough about the bad news. I want to go to\npositive results again.",
    "start": "2065739",
    "end": "2071040"
  },
  {
    "text": "So we had a very\nsimple thing here. Let's try something\nthat's somewhere in between, where there\nare chain reactions,",
    "start": "2071040",
    "end": "2078980"
  },
  {
    "text": "but it's not impossible. So in general, if\nyou're building-- if you have a data structure\nthat represents an arbitrary",
    "start": "2078980",
    "end": "2084445"
  },
  {
    "text": "computer, you're\nbasically hosed. If you have a data\nstructure where the operations can be\narbitrarily reordered, pretty",
    "start": "2084445",
    "end": "2090949"
  },
  {
    "text": "easy. So our intermediate setting will\nbe priority queues, the example",
    "start": "2090949",
    "end": "2099920"
  },
  {
    "text": "I showed at the very beginning. ",
    "start": "2099920",
    "end": "2110250"
  },
  {
    "text": "So on a priority\nqueue, I'm going to think about two operations,\ninsert and delete-min.",
    "start": "2110250",
    "end": "2115836"
  },
  {
    "text": " This is interesting\nbecause delete-min depends",
    "start": "2115836",
    "end": "2122480"
  },
  {
    "text": "on what the current state is. So if I insert\nsomething early on,",
    "start": "2122480",
    "end": "2127760"
  },
  {
    "text": "it can change every delete-min\nthat happens thereafter, and completely change what\nhappens at the end of the data",
    "start": "2127760",
    "end": "2134119"
  },
  {
    "text": "structure. So the claim is\nwe can solve this with log n time per\noperation, per partially",
    "start": "2134120",
    "end": "2146030"
  },
  {
    "text": "retroactive operation. ",
    "start": "2146030",
    "end": "2151710"
  },
  {
    "text": "It's pretty good because\nin this model, which--",
    "start": "2151710",
    "end": "2157125"
  },
  {
    "text": "what model are we in here? I guess pointer machine\nwould be a reasonable model?",
    "start": "2157125",
    "end": "2162430"
  },
  {
    "text": "Log n is the best you can\nhope for a priority queue. I guess comparison model\nis more relevant then.",
    "start": "2162430",
    "end": "2168560"
  },
  {
    "text": "So you can use priority\nqueues to sort. So log n is the best you can\ndo for regular priority queues. And so to do it also\npartially retroactive",
    "start": "2168560",
    "end": "2176460"
  },
  {
    "text": "is pretty interesting. How do we do this?",
    "start": "2176460",
    "end": "2182260"
  },
  {
    "text": "Well, I don't want to draw\na picture of what these data structures look like. ",
    "start": "2182260",
    "end": "2193230"
  },
  {
    "text": "My picture is keyspace is\ngoing to be the y-axis,",
    "start": "2193230",
    "end": "2198630"
  },
  {
    "text": "and time is the x-axis.  So if someone comes along\nand does an insertion,",
    "start": "2198630",
    "end": "2205619"
  },
  {
    "text": "they do the insertion at some\ntime with some key value. And so I'm going\nto think of that",
    "start": "2205620",
    "end": "2211290"
  },
  {
    "text": "as a rightward pointing\nray, because at that point that element exists. And if nothing happens, it\nwill exist for the end of time.",
    "start": "2211290",
    "end": "2219690"
  },
  {
    "text": "The problem would be if\nsomeone comes along and does a delete-min. A delete-min is going to be a\nray shooting up from infinity,",
    "start": "2219690",
    "end": "2228004"
  },
  {
    "text": "because you always want\nto delete the smallest possible thing. So whatever this\nray hits first, that is the thing that gets deleted.",
    "start": "2228004",
    "end": "2235440"
  },
  {
    "text": "So I want to keep-- I want to draw all those\nrays for the delete-mins. So this is a delete-min.",
    "start": "2235440",
    "end": "2241330"
  },
  {
    "text": " And this is an insert.",
    "start": "2241330",
    "end": "2247410"
  },
  {
    "text": "So I have rightward\nrays for insertions. They start at some point. And I have upward\nrays from infinity.",
    "start": "2247410",
    "end": "2254460"
  },
  {
    "text": "In general, I'm going to\nget a bunch of L shapes. ",
    "start": "2254460",
    "end": "2272010"
  },
  {
    "text": "And the L's will be non\ncrossing in a legitimate picture of an execution\nof the algorithm.",
    "start": "2272010",
    "end": "2278532"
  },
  {
    "text": "AUDIENCE: The vertical stuff is\nwhen you're taking the min out? ERIK DEMAINE: Yeah the\nvertical lines are delete-mins.",
    "start": "2278532",
    "end": "2283829"
  },
  {
    "text": "They're coming from below. They're taking whatever the\nsmallest thing is that exists. So think about like\nthis time right here.",
    "start": "2283830",
    "end": "2290760"
  },
  {
    "text": "Right now these four elements\nare in the data structure. You do a delete-min, you\ndelete the smallest one.",
    "start": "2290760",
    "end": "2296400"
  },
  {
    "text": "So this guy dies. But the three others continue. Maybe there'll be some\nelements that just exist.",
    "start": "2296400",
    "end": "2302800"
  },
  {
    "text": "They don't get deleted. So it's not entirely L's. That's sort of a\nhalf of an L. So you",
    "start": "2302800",
    "end": "2308369"
  },
  {
    "text": "might have some L's like that\nthat just go off to infinity. ",
    "start": "2308370",
    "end": "2313770"
  },
  {
    "text": "But everyone that's\nin an L, this is the insertion that made it. These are the delete-mins\nthat deleted it.",
    "start": "2313770",
    "end": "2319014"
  },
  {
    "text": "We're not going to do arbitrary\ndeletes, just delete-mins. It's hard enough.",
    "start": "2319014",
    "end": "2324109"
  },
  {
    "text": "OK, problem clear? So I want to maintain this. Let me show you what goes wrong,\nthe hard part about this data",
    "start": "2324110",
    "end": "2335850"
  },
  {
    "text": "structure. Let's say I do an insert here.",
    "start": "2335850",
    "end": "2342660"
  },
  {
    "text": "New insertion. Well, that means that this\ndelete-min would have returned this guy instead of this one.",
    "start": "2342660",
    "end": "2348420"
  },
  {
    "text": "So this one would actually\ncontinue to exist. So then this delete-min\nwould have deleted this guy instead of that one.",
    "start": "2348420",
    "end": "2355109"
  },
  {
    "text": "So this guy continues to exist. So this continues to the right.",
    "start": "2355110",
    "end": "2360710"
  },
  {
    "text": "This starts exist\nuntil this delete-min, and now this one exists. OK, and then this one\nexists for the rest of time.",
    "start": "2360710",
    "end": "2368370"
  },
  {
    "text": "In general, you do a\nsingle retroactive insert, everything could change. Or a linear number\nof guys could change.",
    "start": "2368370",
    "end": "2375510"
  },
  {
    "text": " So if you want to maintain this\npicture, you're in trouble.",
    "start": "2375510",
    "end": "2381760"
  },
  {
    "text": "You get an omega r lower bound. So we're not going to\nmaintain this picture. But we're going to\nkeep it in our minds,",
    "start": "2381760",
    "end": "2387686"
  },
  {
    "text": "vaguely, that we wanted to know\nsomething like this picture. What we really need to know\nis that this element now",
    "start": "2387686",
    "end": "2393940"
  },
  {
    "text": "exists in the data structure. If I'm just doing partial\nretroactivity, what I care about is who\nexists at the end of time.",
    "start": "2393940",
    "end": "2401119"
  },
  {
    "text": "So I'm doing an insert\nat a given time t, with a given key x.",
    "start": "2401120",
    "end": "2408290"
  },
  {
    "text": "And if life was good, you\nknow, if I was commutative, then that would be\nequivalent to inserting",
    "start": "2408290",
    "end": "2413590"
  },
  {
    "text": "that key x at the end of time. But it's not. Instead I have to\nfigure out what key gets inserted\nat the end when",
    "start": "2413590",
    "end": "2419740"
  },
  {
    "text": "I insert this key at this time. And similarly for\nadding a delete-min. I won't try to draw that,\nbut exactly the same kind",
    "start": "2419740",
    "end": "2426520"
  },
  {
    "text": "of chain reactions can happen. OK, so we're going to\ndo this in log n time.",
    "start": "2426520",
    "end": "2432609"
  },
  {
    "start": "2432610",
    "end": "2453850"
  },
  {
    "text": "How do we do it? ",
    "start": "2453850",
    "end": "2461130"
  },
  {
    "text": "So I'm going to focus on the\ninsertion case, inserting-- the double insertion case--",
    "start": "2461130",
    "end": "2466440"
  },
  {
    "text": "inserting an insert operation. I guess I'm going to switch\nnotation and call the keys k,",
    "start": "2466440",
    "end": "2471540"
  },
  {
    "text": "instead of x. It doesn't matter. ",
    "start": "2471540",
    "end": "2482440"
  },
  {
    "text": "OK, what I'd like\nto know is that when I do this insertion, what gets\ninserted into the final Q?",
    "start": "2482440",
    "end": "2488712"
  },
  {
    "text": "I'm going to call\nthat Q now, being the the present, the future,\nwhatever you want to call it.",
    "start": "2488712",
    "end": "2493819"
  },
  {
    "text": " I claim this is\nwhat gets inserted.",
    "start": "2493820",
    "end": "2506245"
  },
  {
    "start": "2506245",
    "end": "2513530"
  },
  {
    "text": "If you look at all the keys\nthat get deleted from now on, and you look at the\nkey you're inserting, you take the max\nof all those, that",
    "start": "2513530",
    "end": "2519100"
  },
  {
    "text": "will be the one that survives. That's pretty obvious. The annoying thing is this is\nreally hard to think about.",
    "start": "2519100",
    "end": "2526150"
  },
  {
    "text": "Because who gets deleted\nis something that is a chain reaction effect. What we'd really like to have\nis the word inserted there,",
    "start": "2526150",
    "end": "2533134"
  },
  {
    "text": "because we know what\nthings get inserted when. Those are the operations. We just maintain the list of\noperations, we'd know that.",
    "start": "2533134",
    "end": "2538700"
  },
  {
    "text": "Deleted is a lot\nharder to think about. So we need a Lemma\nthat tells us--",
    "start": "2538700",
    "end": "2545290"
  },
  {
    "text": "there's a nice equation that\nsimplifies this formula for us, or this computation.",
    "start": "2545290",
    "end": "2551030"
  },
  {
    "text": "For that we need the\nnotion of a bridge. A very simple idea.",
    "start": "2551030",
    "end": "2557770"
  },
  {
    "text": "A bridge at time\nt is a time when",
    "start": "2557770",
    "end": "2565150"
  },
  {
    "text": "everything that's\ncurrently in the queue will finally be in the queue. ",
    "start": "2565150",
    "end": "2571880"
  },
  {
    "text": "So this is a bridge. This is a bridge.",
    "start": "2571880",
    "end": "2577630"
  },
  {
    "text": "Because these elements\nexist for the rest of time. This is a bridge.",
    "start": "2577630",
    "end": "2583610"
  },
  {
    "text": "OK, these are basically-- interesting stuff\nhappens between bridges. Bridges are the points of rest\nwhen things are kind of boring.",
    "start": "2583610",
    "end": "2591430"
  },
  {
    "text": "We'll need this for\nthe next statement. ",
    "start": "2591430",
    "end": "2598867"
  },
  {
    "text": "And the other claim is\nit's easy to maintain where the bridges are. That's not a big surprise. Because there's no chain\nreactions at the bridges.",
    "start": "2598867",
    "end": "2605560"
  },
  {
    "start": "2605560",
    "end": "2620330"
  },
  {
    "text": "So if I have a time\nt that I care about-- I want to compute this\nformula for time t--",
    "start": "2620330",
    "end": "2625369"
  },
  {
    "text": "what I do is find\nthe preceding bridge. Call it t prime. This is like-- an\narbitrary time t like here,",
    "start": "2625370",
    "end": "2633002"
  },
  {
    "text": "we're in the middle\nof some action. I want to know what\nthat action is. So I want to go to the\npreceding blue line.",
    "start": "2633002",
    "end": "2638849"
  },
  {
    "text": "So that's t prime. If my query is here,\nt prime will be there.",
    "start": "2638850",
    "end": "2644750"
  },
  {
    "text": " Then, what I want to know is\nthis max of k prime where k",
    "start": "2644750",
    "end": "2654800"
  },
  {
    "text": "prime is deleted after time t.",
    "start": "2654800",
    "end": "2663157"
  },
  {
    "text": " I should say greater equal\nto t, instead of after,",
    "start": "2663157",
    "end": "2670564"
  },
  {
    "text": "a little more precise.  Claim this equals the\nmax over all k prime",
    "start": "2670564",
    "end": "2682660"
  },
  {
    "text": "not in the final queue,\nbecause those guys obviously still exist. ",
    "start": "2682660",
    "end": "2690050"
  },
  {
    "text": "Where k prime is inserted\nat time greater than",
    "start": "2690050",
    "end": "2699930"
  },
  {
    "text": "or equal to t prime. So basically I can turn the word\ndeleted into the word inserted,",
    "start": "2699930",
    "end": "2705930"
  },
  {
    "text": "if I change t to t prime. And I also have to exclude\nthe guys at the top. So we're looking at a\nparticular time like here.",
    "start": "2705930",
    "end": "2714247"
  },
  {
    "text": "I want to know who\nare the things that are deleted after that. Well, this is deleted. This is deleted. All these guys\nare deleted after.",
    "start": "2714247",
    "end": "2721170"
  },
  {
    "text": "I'm going to rewind to t\nprime and say, well, you know there are these\nguys that they survive. They obviously\ndon't get deleted.",
    "start": "2721170",
    "end": "2727015"
  },
  {
    "text": "But if you ignore the guys\nthat end up in the final queue, the guys that get\ndeleted after time t",
    "start": "2727015",
    "end": "2733795"
  },
  {
    "text": "are the same as the ones that\nget inserted after t prime.  That's the claim.",
    "start": "2733795",
    "end": "2739500"
  },
  {
    "text": "Or actually, that set of\nelements is not the same, but the max will be the same. That's all I care about.",
    "start": "2739500",
    "end": "2745384"
  },
  {
    "text": "I only want to know the max. The max among all\nthe ones deleted here is this upper uppermost segment.",
    "start": "2745384",
    "end": "2751529"
  },
  {
    "text": "And that's the same as\nthe max among all the guys that are inserted after here. So it's really just a\nclaim about this one being",
    "start": "2751529",
    "end": "2757560"
  },
  {
    "text": "inserted after this bridge. I won't prove this Lemma.",
    "start": "2757560",
    "end": "2762690"
  },
  {
    "text": "It's just, you think about\nit for long enough, it becomes obvious. Leave it at that.",
    "start": "2762690",
    "end": "2768792"
  },
  {
    "text": "Now we can do some\ndata structures, because now we have something\nthat we can reasonably hope to maintain. ",
    "start": "2768792",
    "end": "2781220"
  },
  {
    "text": "So maintaining\nbridges, one thing-- ",
    "start": "2781220",
    "end": "2787170"
  },
  {
    "text": "Yeah, actually kind\nof an important thing. ",
    "start": "2787170",
    "end": "2792469"
  },
  {
    "text": "So here's where\nwe're going to store. We're going to store the current\nQ as a balanced binary search",
    "start": "2792469",
    "end": "2798040"
  },
  {
    "text": "tree. OK, that's not very exciting.",
    "start": "2798040",
    "end": "2803056"
  },
  {
    "text": "Though the hard part\nis to figure out how Q now is changing at each step. But this will allow us\nto do arbitrary queries",
    "start": "2803056",
    "end": "2809890"
  },
  {
    "text": "on the final result We want to store a balanced\nbinary search tree whose leaves",
    "start": "2809890",
    "end": "2822760"
  },
  {
    "text": "represent insertions. ",
    "start": "2822760",
    "end": "2828400"
  },
  {
    "text": "So lowercase insertions. So that's all of the\nrightward arrows. ",
    "start": "2828400",
    "end": "2835960"
  },
  {
    "text": "And they're are going\nto be sorted by time. ",
    "start": "2835960",
    "end": "2843270"
  },
  {
    "text": "Not by a key value. OK, and I'm going to augment\nthat balanced binary search",
    "start": "2843270",
    "end": "2849160"
  },
  {
    "text": "tree with a fun\nvalue for every node",
    "start": "2849160",
    "end": "2859539"
  },
  {
    "text": "in the balanced\nbinary search tree. I want to know max\nof all the keys",
    "start": "2859540",
    "end": "2864819"
  },
  {
    "text": "not currently in\nthe queue, or not presently in the queue\nat the end of time.",
    "start": "2864820",
    "end": "2870582"
  },
  {
    "text": "That changes is very slowly,\nso this is easy to maintain. ",
    "start": "2870582",
    "end": "2877510"
  },
  {
    "text": "Among all the keys\nthat are inserted in the subtree rooted at x.",
    "start": "2877510",
    "end": "2884210"
  },
  {
    "text": "OK, that's basically this\nvalue, which I want to maintain, but split up over a subtree.",
    "start": "2884210",
    "end": "2890349"
  },
  {
    "text": "And so that lets me\neasily compute this value by taking the max of log n\nof these values at any time.",
    "start": "2890350",
    "end": "2898470"
  },
  {
    "text": "OK, then we store another\nbalanced binary search tree where the leaves\nare all the updates.",
    "start": "2898470",
    "end": "2905410"
  },
  {
    "start": "2905410",
    "end": "2911609"
  },
  {
    "text": "Again they will be\nordered by time. ",
    "start": "2911610",
    "end": "2921040"
  },
  {
    "text": "And they will be augmented. ",
    "start": "2921040",
    "end": "2930360"
  },
  {
    "text": "In each node, I'm going\nto store a number which is 0 plus 1 or minus 1.",
    "start": "2930360",
    "end": "2935440"
  },
  {
    "text": "It's going to be\n0 for an insert. ",
    "start": "2935440",
    "end": "2941587"
  },
  {
    "text": "This is at the leaf\nlevel because the leaves correspond to updates. If that key ends up\nin the final queue.",
    "start": "2941587",
    "end": "2951940"
  },
  {
    "text": "So those we just ignore. It's going to be plus 1 for\nany other kind of insert.",
    "start": "2951940",
    "end": "2958630"
  },
  {
    "text": " Inserting a key where\nk is not in Q now.",
    "start": "2958630",
    "end": "2967430"
  },
  {
    "text": "And it's going to be\nminus 1 for a delete-min. ",
    "start": "2967430",
    "end": "2975810"
  },
  {
    "text": "I'm going to store this. And we're going to\nhave subtree sums.",
    "start": "2975810",
    "end": "2981435"
  },
  {
    "text": " So this is fun\nwith augmentation.",
    "start": "2981435",
    "end": "2989200"
  },
  {
    "text": "Why do I do all that? Because if I store\nall these numbers,",
    "start": "2989200",
    "end": "2997920"
  },
  {
    "text": "it becomes really easy\nto detect bridges. ",
    "start": "2997920",
    "end": "3004442"
  },
  {
    "text": "I claim. ",
    "start": "3004442",
    "end": "3014527"
  },
  {
    "text": "AUDIENCE: Professor? ERIK DEMAINE: Yeah? AUDIENCE: So, what we're\nlooking for is basically we know how the cascade\nwent in any given--",
    "start": "3014527",
    "end": "3023874"
  },
  {
    "text": "ERIK DEMAINE: We want to compute\nhow one of these cascades will end. AUDIENCE: And so we just always\nmaintain that information?",
    "start": "3023874",
    "end": "3029325"
  },
  {
    "text": "ERIK DEMAINE: We're always\ngoing to maintain what's here. We can't afford to\nmaintain this whole picture because it changes too much.",
    "start": "3029325",
    "end": "3035800"
  },
  {
    "text": "But we want to-- we're given this. We want to know the\nresult of the cascade, without having to do all\nthat stuff in the middle.",
    "start": "3035800",
    "end": "3042000"
  },
  {
    "text": "Yeah, that's our goal. And I claim-- this\nis a lot of text. But I claim that\nthis information",
    "start": "3042000",
    "end": "3047800"
  },
  {
    "text": "is enough to do\nthat in log n time. So let me try to convince you. AUDIENCE: So are you storing\nseveral binary searches?",
    "start": "3047800",
    "end": "3055470"
  },
  {
    "text": "ERIK DEMAINE: I'm storing three. I'm storing one that\nrepresents the final result. I'm storing one that's just\nlooking at the insertions.",
    "start": "3055470",
    "end": "3062920"
  },
  {
    "text": "I'm storing one that\nlooks at all the updates. I maintain all three, and\nyou can cross-link them all you want.",
    "start": "3062920",
    "end": "3070700"
  },
  {
    "text": "OK, I claim a bridge\nis now a prefix",
    "start": "3070700",
    "end": "3078910"
  },
  {
    "text": "of updates summing to zero,\naccording to this measure.",
    "start": "3078910",
    "end": "3090250"
  },
  {
    "text": "Because inserts and deletes,\nwhen they all cancel out-- and if we ignore the things\nthat finally end up there,",
    "start": "3090250",
    "end": "3097990"
  },
  {
    "text": "the periods of rest,\nwhen no one is active that will eventually\nget deleted, that's exactly when everyone\nto the left has been deleted",
    "start": "3097990",
    "end": "3106420"
  },
  {
    "text": "or will survive to the end. So these guys counts as\nzeros, so we ignore those.",
    "start": "3106420",
    "end": "3112540"
  },
  {
    "text": "Each of these\ncorresponds to plus 1. Each of these\ncorresponds to a minus 1. So these have all\ncanceled out by now.",
    "start": "3112540",
    "end": "3118460"
  },
  {
    "text": "And when this prefix\nsum, which is everything up to a given point, is\nzero, then that is a bridge.",
    "start": "3118460",
    "end": "3125170"
  },
  {
    "text": "What this lets you do\nis if you have some-- you have this\nbinary search tree.",
    "start": "3125170",
    "end": "3132070"
  },
  {
    "text": "You have some query time t,\nwhich corresponds to a leaf. And now I want to know what\nis the preceding bridge?",
    "start": "3132070",
    "end": "3138490"
  },
  {
    "text": "I want to know t prime, the\nbridge proceeding time t. Then basically I\nwalk up this tree",
    "start": "3138490",
    "end": "3144819"
  },
  {
    "text": "and find the preceding moments-- I actually have to first walk\ndown to compute all the sums.",
    "start": "3144820",
    "end": "3150520"
  },
  {
    "text": "So hanging off on\nthe left of this path are all these times in the past.",
    "start": "3150520",
    "end": "3156895"
  },
  {
    "text": "And I say well, if the sum of\nall of those subtree sums, sum",
    "start": "3156895",
    "end": "3162165"
  },
  {
    "text": "of all the values in those\nleaves, if that's 0 then we're already at a bridge. If not, I basically compute\nthe preceding point where",
    "start": "3162165",
    "end": "3169990"
  },
  {
    "text": "this sum up to that point is 0. And that should be\nrelatively obvious how to do. It's a regular kind of\nwalking up the tree.",
    "start": "3169990",
    "end": "3178300"
  },
  {
    "text": "So log n time I can find\nthe preceding bridge. ",
    "start": "3178300",
    "end": "3187450"
  },
  {
    "text": "Because I have all\nthese subtrees sums I can do that by a tree walk.",
    "start": "3187450",
    "end": "3199300"
  },
  {
    "text": "OK, then it just says\nhere, \"And then you",
    "start": "3199300",
    "end": "3204370"
  },
  {
    "text": "can compute the change to Qnow.\" How do we compute\nthe change to Qnow?",
    "start": "3204370",
    "end": "3209410"
  },
  {
    "text": "We have to compute this\nmax of all the keys that are inserted\nafter time t prime.",
    "start": "3209410",
    "end": "3216230"
  },
  {
    "text": "So this was the\ntree of all updates. ",
    "start": "3216230",
    "end": "3221289"
  },
  {
    "text": "And we have another tree, which\nis just the tree of insertions.",
    "start": "3221290",
    "end": "3226780"
  },
  {
    "text": "And so if we\ncross-link time-- so we find t prime, where\nthe prefix sum is zero.",
    "start": "3226780",
    "end": "3233200"
  },
  {
    "text": "We map over to t prime here. And again we get a\nroot to leaf path.",
    "start": "3233200",
    "end": "3238210"
  },
  {
    "text": "And now we look at all of\nthe elements hanging off the right side. Those are all the\nelements that are",
    "start": "3238210",
    "end": "3244540"
  },
  {
    "text": "inserted after time t prime. And I just take\nthe max of those. So I guess I didn't\nwrite it, but I need to store our subtree--",
    "start": "3244540",
    "end": "3250759"
  },
  {
    "text": "oh no, I store this. Right, this is what I want. For every subtree,\nI want to know the max of the things\nin that subtree,",
    "start": "3250760",
    "end": "3256573"
  },
  {
    "text": "but ignoring the guys\nthat are in Qnow. I take all those maxes\non all those subtrees.",
    "start": "3256573",
    "end": "3265550"
  },
  {
    "text": "And I can find what element\ngets inserted into Qnow in log n",
    "start": "3265550",
    "end": "3276190"
  },
  {
    "text": "time. Then, of course, I have to\nupdate all this information. And I don't want\nto spend any more time on this, no pun intended.",
    "start": "3276190",
    "end": "3284170"
  },
  {
    "text": "You have to-- then Qnow changes. And so you've got to update all\nthese values and these values.",
    "start": "3284170",
    "end": "3290560"
  },
  {
    "text": "But the claim is that you can\ndo all that in log n time. It's not hard.",
    "start": "3290560",
    "end": "3296730"
  },
  {
    "text": "OK, that's priority queues. So I know that was a\nlittle bit tedious. But this is sort of--",
    "start": "3296730",
    "end": "3302626"
  },
  {
    "text": "it's not quite the coolest\nthing we know how to do, but it was the first\ncool thing we knew how to do in the retroactive world.",
    "start": "3302626",
    "end": "3308190"
  },
  {
    "text": "It's this nice borderline\nwhere it looks scary. There are linear-sized\nchain reactions.",
    "start": "3308190",
    "end": "3313680"
  },
  {
    "text": "Yet we can still deal\nwith them in log n time.",
    "start": "3313680",
    "end": "3318839"
  },
  {
    "text": "So not quite the worst\ncase, but also not easy.",
    "start": "3318840",
    "end": "3324000"
  },
  {
    "text": "So in general, if you want\na retroactive data structure for your favorite\ndata structure,",
    "start": "3324000",
    "end": "3329880"
  },
  {
    "text": "you're going to have to\nthink along these lines, see whether you can maintain\nsomething reasonable.",
    "start": "3329880",
    "end": "3336599"
  },
  {
    "text": "Let me tell you briefly about\nother problems, other data",
    "start": "3336600",
    "end": "3342030"
  },
  {
    "text": "structures that we've looked\nat, and other people have looked at. ",
    "start": "3342030",
    "end": "3350140"
  },
  {
    "text": "So a simple one is a queue,\nfirst in, first out first in,",
    "start": "3350140",
    "end": "3355829"
  },
  {
    "text": "last out. One of those. I've got stacks too, probably. You can do constant time\npartial retroactivity.",
    "start": "3355830",
    "end": "3363779"
  },
  {
    "text": "Log n time full\nretroactivity for a deque.",
    "start": "3363780",
    "end": "3369584"
  },
  {
    "text": "I mentioned this last time\nwhere you can insert and delete from either end. We can do log n full\nretroactivity for union-find.",
    "start": "3369584",
    "end": "3381220"
  },
  {
    "text": " You have a bunch of sets. You want to be able\nto take their union.",
    "start": "3381220",
    "end": "3386790"
  },
  {
    "text": "And given an element you want\nto know which set it's in. It's sometimes taught in 6046.",
    "start": "3386790",
    "end": "3392980"
  },
  {
    "text": "The best thing we know is\nlog m fully retroactive.",
    "start": "3392980",
    "end": "3398316"
  },
  {
    "text": " Priority queue we\nalready talked about.",
    "start": "3398316",
    "end": "3403851"
  },
  {
    "text": "But-- AUDIENCE: [INAUDIBLE] ERIK DEMAINE: Is\nthere a question?",
    "start": "3403851",
    "end": "3409565"
  },
  {
    "text": "Priority queue, we already\ndid partial retroactivity. But what if you want\nfull retroactivity? This is pretty much\nan open problem.",
    "start": "3409565",
    "end": "3415550"
  },
  {
    "text": "Best thing we know is square\nroot of m to m's log n. This is via-- we have\na general result that",
    "start": "3415550",
    "end": "3421639"
  },
  {
    "text": "says if you have anything\nthat's partially retroactive, you can make it\nfully retroactive at a huge cost of\nsquare root of m factor.",
    "start": "3421639",
    "end": "3429180"
  },
  {
    "text": "So you could take what we have,\nmake it fully retroactive. Full. AUDIENCE: Is there any\ndifference when you're",
    "start": "3429180",
    "end": "3436365"
  },
  {
    "text": "talking about n [INAUDIBLE] ERIK DEMAINE: n, I\nthink it's supposed to be the current size\nof the data structure.",
    "start": "3436365",
    "end": "3445338"
  },
  {
    "text": "I'm not actually\nsure what that means with a retroactive operation. I'll just make them all m's.",
    "start": "3445339",
    "end": "3450510"
  },
  {
    "text": "I think that's safer. Other question or same one? OK good, thank you.",
    "start": "3450510",
    "end": "3458780"
  },
  {
    "text": "OK, let me tell you about\nthe most important problem in this field. ",
    "start": "3458780",
    "end": "3464730"
  },
  {
    "text": "This is actually\nwhat motivated us to define retroactivity,\nwhich is a particular problem,",
    "start": "3464730",
    "end": "3470310"
  },
  {
    "text": "retroactive successor. So successor problem is I want\nto be able to insert and delete",
    "start": "3470310",
    "end": "3476040"
  },
  {
    "text": "keys in one dimension. And given a query\nkey, I want to know what is the next key\ngreater or equal to it.",
    "start": "3476040",
    "end": "3482640"
  },
  {
    "text": "This is something\nyou can do in log n time with a balanced\nbinary search tree. There's lots of\nother ways to do it,",
    "start": "3482640",
    "end": "3488080"
  },
  {
    "text": "which we will get to\nlater in this class. But what if I want to\ndo it fully retroactive?",
    "start": "3488080",
    "end": "3493170"
  },
  {
    "text": "Partially retroactive\nis really easy, because this is\na search problem.",
    "start": "3493170",
    "end": "3500099"
  },
  {
    "text": "So I can definitely do log\nm partial retroactivity.",
    "start": "3500100",
    "end": "3505550"
  },
  {
    "text": " In fact, it is a-- I just use a regular binary\nsearch tree, or whatever.",
    "start": "3505550",
    "end": "3513900"
  },
  {
    "text": "In fact, it is a\ndecomposable search problem. So I get full\nretroactivity, no problem.",
    "start": "3513900",
    "end": "3519920"
  },
  {
    "text": "But I pay a log\nfactor, so I get log squared m, full retroactivity.",
    "start": "3519920",
    "end": "3525870"
  },
  {
    "text": "And so that's where we\nleft it, back in 2003. But there's a new\nresult, which is",
    "start": "3525870",
    "end": "3532289"
  },
  {
    "text": "that you can actually get\nlog m without the square full retroactivity.",
    "start": "3532290",
    "end": "3538680"
  },
  {
    "text": "This is a complicated result.\nIt's by Goran and Kaplan, 2009. It uses fun techniques like\nfractional cascading, which",
    "start": "3538680",
    "end": "3546060"
  },
  {
    "text": "is next lecture, and van Emde\nBoas, which is lecture 11,",
    "start": "3546060",
    "end": "3551400"
  },
  {
    "text": "and various other tools. So it's a little too\nadvanced to cover now.",
    "start": "3551400",
    "end": "3557790"
  },
  {
    "text": "But it's cool. And it has lots of applications\nin geometry, which we will be talking about next class.",
    "start": "3557790",
    "end": "3563580"
  },
  {
    "text": "So hold your breath\nfor that, I guess. Yeah.",
    "start": "3563580",
    "end": "3568980"
  },
  {
    "text": "I want to go to one\nlast topic, which is a different kind\nof retro activity",
    "start": "3568980",
    "end": "3628329"
  },
  {
    "text": "Nonoblivious retroactivity is\nintroduced by Acar, Blelloch, Tangwongsan in 2007.",
    "start": "3628330",
    "end": "3636320"
  },
  {
    "text": "And it's basically\nanswering the question \"What about my queries?\" So we have this\ntimeline of updates.",
    "start": "3636320",
    "end": "3644720"
  },
  {
    "text": "And we've done\nvarious operations on our data structure,\nwhich are the updates.",
    "start": "3644720",
    "end": "3651924"
  },
  {
    "text": "And we've considered how\nthose can be changed. And then with queries, either\nwe're querying at the end or querying in the middle.",
    "start": "3651924",
    "end": "3657282"
  },
  {
    "text": "But we're always getting\nsort of instantaneous, as the timeline exists\nright now, here's what",
    "start": "3657282",
    "end": "3663200"
  },
  {
    "text": "the result of your query is. But what if I want to do-- I mean, if I really-- normally\nwhen I use a data structure,",
    "start": "3663200",
    "end": "3670369"
  },
  {
    "text": "I do some updates. I do some queries. I do a combination\nof these things.",
    "start": "3670370",
    "end": "3677030"
  },
  {
    "text": "And to make life worse,\nwhen I do a query, the result of that\nquery probably",
    "start": "3677030",
    "end": "3683090"
  },
  {
    "text": "influences what updates\nI do in the future. So real use, I'll just\ncall that the algorithmic use of a data structure.",
    "start": "3683090",
    "end": "3689543"
  },
  {
    "start": "3689543",
    "end": "3696800"
  },
  {
    "text": "Results of queries\ninfluence updates, what updates are going to do.",
    "start": "3696800",
    "end": "3702830"
  },
  {
    "text": " OK, and now this gets a\nlittle dicey, because what",
    "start": "3702830",
    "end": "3712557"
  },
  {
    "text": "does influence mean? We don't know, because\nthat's the user somehow depends on these results.",
    "start": "3712557",
    "end": "3719310"
  },
  {
    "text": "So nonoblivious retroactivity is\ntrying to deal with this issue. Can we get something reasonable?",
    "start": "3719310",
    "end": "3725190"
  },
  {
    "text": "So what we'd like to\ndo is say, oh I now add an update over\nhere, retroactively.",
    "start": "3725190",
    "end": "3730220"
  },
  {
    "text": "So their updates are\nthe same, in some sense. You can retroactively insert and\ndelete updates and queries now.",
    "start": "3730220",
    "end": "3738260"
  },
  {
    "text": "I'd like to know well, did the\nresult of this query change? Maybe you can show-- at the data structure\nlevel we can tell",
    "start": "3738260",
    "end": "3744920"
  },
  {
    "text": "did that query result change. Maybe this one changed,\nbut this one did not.",
    "start": "3744920",
    "end": "3750980"
  },
  {
    "text": "What we'd like to\nreport to the user is what is the first\nquery that changed,",
    "start": "3750980",
    "end": "3756080"
  },
  {
    "text": "because that's like the\nfirst mistake that you made. Like oh you know,\nretroactively oops I should have deposited\n$100 back here.",
    "start": "3756080",
    "end": "3763609"
  },
  {
    "text": "And then these\nqueries which we're checking whether the balance\nwas positive or negative, some of their results might\nchange, some of them might not.",
    "start": "3763610",
    "end": "3772130"
  },
  {
    "text": "If they change, then\nthe algorithm has to-- I mean, it doesn't have\nto rerun these operations, because that's what\nretroactivity buys for you.",
    "start": "3772130",
    "end": "3779000"
  },
  {
    "text": "But it has to say, oh well,\nnow this query has changed. And then you have to rerun\nthe algorithm from that point.",
    "start": "3779000",
    "end": "3785580"
  },
  {
    "text": "But not necessarily entirely. I mean, you look at\nthat and say, oh,",
    "start": "3785580",
    "end": "3790713"
  },
  {
    "text": "did that query actually\nchange anything? This is now the algorithm. Oh yeah, instead of this\nupdate here, I would have made",
    "start": "3790714",
    "end": "3797840"
  },
  {
    "text": "a different update u prime. Well, that's good, we\nknow how to do that. That's a retroactive update.",
    "start": "3797840",
    "end": "3803610"
  },
  {
    "text": "So I can delete this\noperation retroactively and insert this one. So in general, what we\nassume the algorithm does is",
    "start": "3803610",
    "end": "3809900"
  },
  {
    "text": "it looks at the\nfirst error, which is reported by our data structure.",
    "start": "3809900",
    "end": "3815130"
  },
  {
    "text": "And then it then may\nmake various changes from that point onward,\nbut always monotonically",
    "start": "3815130",
    "end": "3821265"
  },
  {
    "text": "left to right, as\nif it was rerun in the algorithm, but just\nchanging what needed to change,",
    "start": "3821266",
    "end": "3827670"
  },
  {
    "text": "until all the\nerrors are resolved. All the queries have been\ncorrected to the right answers.",
    "start": "3827670",
    "end": "3832920"
  },
  {
    "text": "Then it can do\nwhatever it wants. Then it can do retroactive\noperation anytime in the past. OK, so this is an assumption.",
    "start": "3832920",
    "end": "3841050"
  },
  {
    "text": "Assume once there's an error,\nthat the algorithm makes",
    "start": "3841050",
    "end": "3855150"
  },
  {
    "text": "changes, retroactive\nupdates, from left to right.",
    "start": "3855150",
    "end": "3866220"
  },
  {
    "start": "3866220",
    "end": "3871260"
  },
  {
    "text": "And also going to assume that\nit does it at times less than",
    "start": "3871260",
    "end": "3881460"
  },
  {
    "text": "or equal to all errors. ",
    "start": "3881460",
    "end": "3886980"
  },
  {
    "text": "So in general, you\nhave a timeline. And then there are some errors\nwhere bad queries were done.",
    "start": "3886980",
    "end": "3896280"
  },
  {
    "text": "Naturally, you\nwould go right here and fix the first\nerror, because that may influence other errors.",
    "start": "3896280",
    "end": "3901540"
  },
  {
    "text": "And maybe you have-- so then you make that change. Maybe then that causes\nsome other changes",
    "start": "3901540",
    "end": "3906600"
  },
  {
    "text": "right after or\nsomewhere in between. But then I don't want\nto make a change here,",
    "start": "3906600",
    "end": "3912270"
  },
  {
    "text": "because that would be\ndepending on this result, which was incorrect. So first you have to fix this.",
    "start": "3912270",
    "end": "3917280"
  },
  {
    "text": "So you keep going to the right\nand you visit all the stars. That's this assumption.",
    "start": "3917280",
    "end": "3923962"
  },
  {
    "text": " This is a very different\nkind of retroactivity. I would say it's more about\nmaintaining this exact picture",
    "start": "3923962",
    "end": "3934140"
  },
  {
    "text": "of what's happening, but\nbeing able to teleport over the uninteresting stuff.",
    "start": "3934140",
    "end": "3940319"
  },
  {
    "text": "So in this picture, if\nwe're doing priority queues like this, when I\nmake this change,",
    "start": "3940320",
    "end": "3945990"
  },
  {
    "text": "well, that query changes. That query changes. The delete-mins, the mins\nthat they're deleting change.",
    "start": "3945990",
    "end": "3952740"
  },
  {
    "text": "So here they were just updates. But if there's also a query\nhere, which is what is the min, then all of these query\nvalues would change.",
    "start": "3952740",
    "end": "3958890"
  },
  {
    "text": " So you're forced\nnow to pay for that.",
    "start": "3958890",
    "end": "3965390"
  },
  {
    "text": "So in some sense,\nit gets easier. Let's say. For a lot of problems this kind\nof retroactivity is easier.",
    "start": "3965390",
    "end": "3971210"
  },
  {
    "text": "But for many problems,\nit's also more useful. So their example is what if you\nwant to do a dynamic Dijkstra?",
    "start": "3971210",
    "end": "3976640"
  },
  {
    "text": "So you have\nDijkstra's algorithm, and then you say, oh, actually\nthis edge weight was wrong. So you run Dijkstra's\nalgorithm once.",
    "start": "3976640",
    "end": "3982941"
  },
  {
    "text": "You've got a priority\nqueue in there telling you which vertex is next. ",
    "start": "3982941",
    "end": "3989251"
  },
  {
    "text": "And now you say, OK,\nI changed this weight at the beginning of time. I don't want to have to\nrerun Dijkstra entirely",
    "start": "3989251",
    "end": "3994690"
  },
  {
    "text": "if nothing changes. Maybe that weight was\ncompletely irrelevant. If you just do a\nretroactive update and see",
    "start": "3994690",
    "end": "4000422"
  },
  {
    "text": "did any of the query results\nchange, if they didn't change, then great you have\nthe right answer. If they did change,\nthe results change.",
    "start": "4000422",
    "end": "4006089"
  },
  {
    "text": "And so you have to know\nfor every wrong query that oh, I really had to\nchange the shortest pathway.",
    "start": "4006090",
    "end": "4011520"
  },
  {
    "text": "It's not this, it's now this. But hopefully,\nyou will only have to change a very small\namount if your graph",
    "start": "4011520",
    "end": "4016890"
  },
  {
    "text": "didn't change in a big way. So it's hard to proof results\nabout that, but at least",
    "start": "4016890",
    "end": "4022680"
  },
  {
    "text": "this would let you dynamize\nalmost any algorithm that's using the data structure. So it's easier, but useful for\nthat kind of transformation.",
    "start": "4022680",
    "end": "4030960"
  },
  {
    "text": "OK, let me give you an example,\nwhich is priority queues.",
    "start": "4030960",
    "end": "4036420"
  },
  {
    "text": "There's a bunch of results in\ntheir paper, but for symmetry. Tell you about priority queues.",
    "start": "4036420",
    "end": "4041970"
  },
  {
    "text": "This will look completely\ndifferent, so don't worry. ",
    "start": "4041970",
    "end": "4047150"
  },
  {
    "text": "Operations-- well, the\nvisual picture is the same, but the data structuring is\nall completely different.",
    "start": "4047150",
    "end": "4053950"
  },
  {
    "text": "They can do all\nthese things in log m per retroactive operation.",
    "start": "4053950",
    "end": "4061050"
  },
  {
    "text": "Now there's no notion\nof full and partial. It's just nonoblivious\nretroactivity.",
    "start": "4061050",
    "end": "4066420"
  },
  {
    "text": "I didn't write it here, but\nthe data structure always maintains what is the\nearliest error currently.",
    "start": "4066420",
    "end": "4072255"
  },
  {
    "text": " Maintain the earliest\nin time error.",
    "start": "4072255",
    "end": "4082570"
  },
  {
    "text": "That error is a query that\nused to return one result, now returns a new result.",
    "start": "4082570",
    "end": "4089180"
  },
  {
    "text": "OK we have a similar picture.",
    "start": "4089180",
    "end": "4096910"
  },
  {
    "text": "So I cheated-- I've changed\nthings a little bit. I didn't cheat. It's just a slight discrepancy.",
    "start": "4096910",
    "end": "4102670"
  },
  {
    "text": "For retroactive, regular\nretroactive, insert and delete-min were\nmore interesting, because then they\nwere chain reactions.",
    "start": "4102670",
    "end": "4108674"
  },
  {
    "text": "In this world you don't have\nto combine delete and min. You could consider\ndelete separate from min.",
    "start": "4108675",
    "end": "4113889"
  },
  {
    "text": "Because now, updates are\nallowed to depend on queries. So maybe you compute\na min and then you decide to delete that thing.",
    "start": "4113890",
    "end": "4120009"
  },
  {
    "text": "If the min changes, well then,\nthe thing that got deleted might also change. That's the algorithm's choice.",
    "start": "4120010",
    "end": "4125560"
  },
  {
    "text": "What to do. So in this new world of insert,\ndelete, and min, slightly more",
    "start": "4125560",
    "end": "4130689"
  },
  {
    "text": "general, if you look at an item,\nit gets inserted at some time.",
    "start": "4130689",
    "end": "4136049"
  },
  {
    "text": "It might get deleted\nat some time. Sometimes it might\ngo off to infinity, if it never gets deleted.",
    "start": "4136050",
    "end": "4141729"
  },
  {
    "text": "OK, this is our new picture of\nthe priority queue over time.",
    "start": "4141729",
    "end": "4147290"
  },
  {
    "text": "So again, this is the time axis. And this is the key value.",
    "start": "4147290",
    "end": "4152759"
  },
  {
    "text": "So have some inserts, deletes. They're all corresponding\npoints in here. And then you have min queries,\nwhich maybe I will draw in red.",
    "start": "4152760",
    "end": "4159700"
  },
  {
    "text": " So min query would be\nsomething like this.",
    "start": "4159700",
    "end": "4166549"
  },
  {
    "text": "Give me what is the lowest\nsegment at this time. ",
    "start": "4166550",
    "end": "4174100"
  },
  {
    "text": "So that's my sequence\nof operations is the projection onto\ntime, so there's this thing. Then there's this query. Then there's this insertion.",
    "start": "4174100",
    "end": "4179964"
  },
  {
    "text": "Then there's this deletion. Then there's this deletion. Then there's this query. Min query, then\nthere's this insertion. Then there's this query.",
    "start": "4179965",
    "end": "4185909"
  },
  {
    "text": "Then there's this deletion. You get the idea. But this is a way to\ntwo-dimensionalize",
    "start": "4185910",
    "end": "4191240"
  },
  {
    "text": "that picture. AUDIENCE: Can you delete\nwithout the query? ERIK DEMAINE: Sorry? AUDIENCE: Can you delete\nwithout the query?",
    "start": "4191240",
    "end": "4198600"
  },
  {
    "text": "ERIK DEMAINE: You can delete\nwithout a query in this model. Make our life a\nlittle bit harder.",
    "start": "4198600",
    "end": "4203900"
  },
  {
    "text": "Now what we need to support\nare capital insert, and capital delete, retroactive insert\nand delete, of all three",
    "start": "4203900",
    "end": "4210780"
  },
  {
    "text": "of these operations. Before it was just updates. Now we can insert\nand delete queries. A little harder to think about.",
    "start": "4210780",
    "end": "4217180"
  },
  {
    "text": "But it can be done. So for example, let's just--",
    "start": "4217180",
    "end": "4222264"
  },
  {
    "text": "I'm not going to\ndo all the cases, because there's a lot of them. Let's say I delete\nthis deletion.",
    "start": "4222264",
    "end": "4230580"
  },
  {
    "text": "OK, that means that this\nwill just go to the right. ",
    "start": "4230580",
    "end": "4237550"
  },
  {
    "text": "OK, that's bad, because it\nchanges all of these queries. All of these queries\nare now incorrect.",
    "start": "4237550",
    "end": "4243750"
  },
  {
    "text": "We're just going to keep\nthe picture like this and remember that\nthere are errors. And we'll be able to\nmaintain at every moment what",
    "start": "4243750",
    "end": "4249870"
  },
  {
    "text": "is the next error. The errors are these crossings.",
    "start": "4249870",
    "end": "4255000"
  },
  {
    "text": "Crossings are bad. That means you have\nthe wrong picture. But we'll wait for\nthe algorithm-- we'll tell the algorithm\nthis is the next crossing.",
    "start": "4255000",
    "end": "4261690"
  },
  {
    "text": "And it's going to have to fix\nit by say deleting that query and then reinserting it. Then it will get\nthe correct result.",
    "start": "4261690",
    "end": "4266760"
  },
  {
    "text": "But it might do other\nupdates meanwhile. So let's not try to fix them\nall now because they may change.",
    "start": "4266760",
    "end": "4272100"
  },
  {
    "text": "Maybe they'll decide to\nre-insert a deletion here to do that, and then erase\nall of those crossings,",
    "start": "4272100",
    "end": "4277565"
  },
  {
    "text": "if we're lucky. You might also\ninsert an insertion. That's basically the same\nas deleting a deletion.",
    "start": "4277565",
    "end": "4284640"
  },
  {
    "text": "You get a whole\nbunch of crossings. ",
    "start": "4284640",
    "end": "4290050"
  },
  {
    "text": "Inserting an insertion\nand deleting a deletion are about the same. So the other case is\ninserting a deletion",
    "start": "4290050",
    "end": "4296880"
  },
  {
    "text": "or deleting an insertion. So inserting a deletion.",
    "start": "4296880",
    "end": "4304199"
  },
  {
    "text": "Let's say that I\ninsert a deletion here. So now suddenly this\nthing ceases to exist.",
    "start": "4304200",
    "end": "4311219"
  },
  {
    "text": "All of this is gone. We get not a crossing\nerror, but we get what I'll call a\nfloating air, which",
    "start": "4311220",
    "end": "4316493"
  },
  {
    "text": "is that these guys are\ncurrently returning something that there's no segment there.",
    "start": "4316494",
    "end": "4322290"
  },
  {
    "text": "OK, so we can get crossing\nerrors and floating errors. ",
    "start": "4322290",
    "end": "4334660"
  },
  {
    "text": "I want to give you enough\nof this data structure to show that actually you use\nthese data structures to solve",
    "start": "4334660",
    "end": "4340050"
  },
  {
    "text": "it. So in that sense, it's\nactually not that much easier. I said it was easier,\nbut we're going",
    "start": "4340050",
    "end": "4345996"
  },
  {
    "text": "to need a retroactive successor\nin order to solve this problem.",
    "start": "4345996",
    "end": "4351840"
  },
  {
    "text": "OK, some variants. ",
    "start": "4351840",
    "end": "4366836"
  },
  {
    "text": "Man, who used this\ncolored chalk? It's so hard to erase. ",
    "start": "4366836",
    "end": "4383739"
  },
  {
    "text": "Let's say I want to maintain\nthe lowest leftmost crossing.",
    "start": "4383740",
    "end": "4393796"
  },
  {
    "start": "4393796",
    "end": "4400341"
  },
  {
    "text": "So in this picture, where I\nhave a bunch of crossings, this is the one I want to\nmaintain, the bottom left one.",
    "start": "4400341",
    "end": "4405690"
  },
  {
    "text": "Now there's a bit\nof a subtlety here, which is do you do you\nminimize y-coordinate and then x-coordinate?",
    "start": "4405690",
    "end": "4410900"
  },
  {
    "text": "Or vice versa? It turns out these\nare the same thing. ",
    "start": "4410900",
    "end": "4416760"
  },
  {
    "text": "I don't want to prove that here,\nbut because of this assumption that we're always proceeding\nmonotonically left to right,",
    "start": "4416760",
    "end": "4424110"
  },
  {
    "text": "we have a nice invariant that if\nyou look at all the crossings, they involve segments that\nstart to the left of all errors.",
    "start": "4424110",
    "end": "4431144"
  },
  {
    "text": "Because all the\nchanges we've made are to the left of all\nerrors by this property. And so it's really\njust a whole bunch",
    "start": "4431144",
    "end": "4437659"
  },
  {
    "text": "of rays coming in from\nnegative infinity on the left, and a whole bunch of rays\ncoming from minus infinity",
    "start": "4437660",
    "end": "4443630"
  },
  {
    "text": "on the bottom. Sometimes the rays stop. But if you look at\nwhere they cross,",
    "start": "4443630",
    "end": "4448860"
  },
  {
    "text": "there's a uniquely defined\nbottom left corner. OK, so that's this picture.",
    "start": "4448860",
    "end": "4456482"
  },
  {
    "text": "Those rays might go different\namounts from either side, but there is a single\nlower left corner.",
    "start": "4456482",
    "end": "4464909"
  },
  {
    "text": "So we're going to maintain that. And we're also going to maintain\nthe leftmost floating point,",
    "start": "4464910",
    "end": "4478220"
  },
  {
    "text": "floating error, on\neach row separately.",
    "start": "4478220",
    "end": "4484330"
  },
  {
    "text": "So in each horizontal\nline, like here, we'll maintain that there's\na floating error here for this row.",
    "start": "4484330",
    "end": "4489980"
  },
  {
    "text": "But we won't figure out\nthat one till later. That just saves the\nwork we have to do.",
    "start": "4489980",
    "end": "4495880"
  },
  {
    "text": "OK, now let me show you an\noperation let's do insert min.",
    "start": "4495880",
    "end": "4506360"
  },
  {
    "text": "So I want to-- I'm going to use\nx for time here, because it's a little\nbit more intuitive. X-coordinate is time.",
    "start": "4506360",
    "end": "4512660"
  },
  {
    "text": "Suppose I want to\ninsert a query. This is actually an easy\ncase because there's no chain reactions here.",
    "start": "4512660",
    "end": "4519056"
  },
  {
    "text": "It's going to be correct because\nI'm doing the query right now. This is basically a\nfully retroactive query.",
    "start": "4519056",
    "end": "4524300"
  },
  {
    "text": "I'm adding a new\ntime, a new query, and I want to know what is\nthe first ray that I hit. ",
    "start": "4524300",
    "end": "4532830"
  },
  {
    "text": "How do I solve that?  So what's going on here is\nI'm basically manipulating",
    "start": "4532830",
    "end": "4543380"
  },
  {
    "text": "these line segments. I mean, the red lines don't\nreally affect this query.",
    "start": "4543380",
    "end": "4550070"
  },
  {
    "text": "They just might be incorrect. But I don't care if\nthey're incorrect. I just want to know\nfor this query, what is the lowest segment?",
    "start": "4550070",
    "end": "4555186"
  },
  {
    "text": "So really, I have segments. They're changing. Inserting and deleting\nendpoints of the segments.",
    "start": "4555186",
    "end": "4560280"
  },
  {
    "text": "And I want to know\nfrom below, what is the first segment that I hit? This is called\nupward ray-shooting.",
    "start": "4560280",
    "end": "4568810"
  },
  {
    "text": "Or vertical\nray-shooting, I guess, would be the normal\nphrasing, but I want to be a little more specific.",
    "start": "4568810",
    "end": "4574390"
  },
  {
    "text": "Not downward upward. Among dynamic segments. ",
    "start": "4574390",
    "end": "4582589"
  },
  {
    "text": "This is a well-studied problem. ",
    "start": "4582589",
    "end": "4587960"
  },
  {
    "text": "And conveniently, it can\nbe solved in log n time preparation. So you can modify segments and\ndo upward ray-shooting queries",
    "start": "4587960",
    "end": "4595850"
  },
  {
    "text": "in log n type preparation. But you already knew that. Good, you're nodding your head.",
    "start": "4595850",
    "end": "4602630"
  },
  {
    "text": "Because that is\nretroactive successor, if you think about it. A retroactive insertion\noperation in the past",
    "start": "4602630",
    "end": "4609950"
  },
  {
    "text": "is like its fully\nretroactive successor. That's this result.",
    "start": "4609950",
    "end": "4615260"
  },
  {
    "text": "Inserting an insertion,\nthat's like creating a new left endpoint\npoint of a segment. Inserting a deletion is like\ncreating a new right endpoint.",
    "start": "4615260",
    "end": "4622230"
  },
  {
    "text": "Deleting a deletion or\ndeleting an insertion, you could use that\nto move the endpoint.",
    "start": "4622230",
    "end": "4627870"
  },
  {
    "text": "So that's exactly dynamic\nsegments, horizontal segments. And then shooting a ray is--",
    "start": "4627870",
    "end": "4635660"
  },
  {
    "text": "in general-- a general\nray-shooting query is like this. I can be not from\nminus infinity,",
    "start": "4635660",
    "end": "4640670"
  },
  {
    "text": "be at an arbitrary point, and\nask, what do I hit upward next? That is like at this time\ndoing a successor query.",
    "start": "4640670",
    "end": "4649259"
  },
  {
    "text": "OK, now this is a\nspecial kind of successor query, because it's always\nfrom minus infinity. So you might be able\nto solve it easier.",
    "start": "4649259",
    "end": "4654890"
  },
  {
    "text": "But in particular, you can\nsolve it using this result. So regular retroactivity\nhelps you do nonoblivious",
    "start": "4654890",
    "end": "4663710"
  },
  {
    "text": "retroactivity. Cool. ",
    "start": "4663710",
    "end": "4673090"
  },
  {
    "text": "We're out of time. So I will just say, the\nother cases are similar.",
    "start": "4673090",
    "end": "4680686"
  },
  {
    "text": "There's one other\nthing you need to do, which is in addition\nto upward ray-shooting, you have to do rightward\nray-shooting because",
    "start": "4680686",
    "end": "4686747"
  },
  {
    "text": "of things like this. If I delete this\ndeletion, I want to know what do I hit next. So that's a rightward\nray-shooting",
    "start": "4686747",
    "end": "4691810"
  },
  {
    "text": "among dynamic segments,\nwhich all happen to start at minus infinity. So it's again-- it's dynamic\nray-shooting, or successor",
    "start": "4691810",
    "end": "4700050"
  },
  {
    "text": "queries, but in x instead of y. So with those tricks,\nyou can do all",
    "start": "4700050",
    "end": "4705310"
  },
  {
    "text": "of the cases of\ninserting deleting, deleting insertions,\ninserting, all combinations",
    "start": "4705310",
    "end": "4711850"
  },
  {
    "text": "of those things. ",
    "start": "4711850",
    "end": "4718711"
  }
]