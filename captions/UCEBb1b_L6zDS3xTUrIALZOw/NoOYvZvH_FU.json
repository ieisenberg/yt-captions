[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6360"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6360",
    "end": "13320"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu.",
    "start": "13320",
    "end": "18450"
  },
  {
    "text": " ERIK DEMAINE: All right, welcome\nback to Dynamic Optimality.",
    "start": "18450",
    "end": "24680"
  },
  {
    "text": "This is the second\nof two lectures. And today we're going to\nfocus mainly on lower bounds.",
    "start": "24680",
    "end": "29770"
  },
  {
    "text": "So last time we saw this\ngeometric connection to binary search trees. So again, this is about is there\none best binary search tree.",
    "start": "29770",
    "end": "37760"
  },
  {
    "text": "And we represented binary\nsearch trees, or at least the execution of\nthose algorithms, as point sets in time space.",
    "start": "37760",
    "end": "45920"
  },
  {
    "text": "And of course a point\nset corresponded to a valid execution of a BST\ntree where each of these points",
    "start": "45920",
    "end": "52410"
  },
  {
    "text": "represented which nodes got\ntouched during an access. If and only if the point\nset was arborally satisfied,",
    "start": "52410",
    "end": "59300"
  },
  {
    "text": "meaning you take any two\npoints in the point set, if they span a\nrectangle that is not just a horizontal or\nvertical line segment,",
    "start": "59300",
    "end": "65720"
  },
  {
    "text": "there must be a\nthird point somewhere inside that rectangle,\nwhich in the end implies that there's a monotone\npath between those two points.",
    "start": "65720",
    "end": "74310"
  },
  {
    "text": "And then we saw, on\nthe upper bound side, we saw a greedy algorithm, which\nwas the obvious offline thing to do, which is as\nthese points come along,",
    "start": "74310",
    "end": "82010"
  },
  {
    "text": "as you do the accesses,\nthe white dots, you add the necessary\nred dots in order to make it arborally\nsatisfied row by row.",
    "start": "82010",
    "end": "90867"
  },
  {
    "text": "And so that seemed like the\nobvious offline thing to do. Turns out it could be done\nonline up to constant factors.",
    "start": "90867",
    "end": "96140"
  },
  {
    "text": "I sketched that last time. And this is conjectured to\nbe within a constant factor of optimal. We can't prove it.",
    "start": "96140",
    "end": "101810"
  },
  {
    "text": "What I'm going to show\ntoday is our best attempts at proving this is optimal. In particular, there's\nsomething called the signed greedy algorithm,\nwhich is almost the same as",
    "start": "101810",
    "end": "109730"
  },
  {
    "text": "greedy, but it's a lower bound. And greedy is an upper bound. So all you need to do is\nshow these two things are",
    "start": "109730",
    "end": "116090"
  },
  {
    "text": "within a constant factor of\neach other and we're done. We're not going to\nget there, obviously,",
    "start": "116090",
    "end": "121230"
  },
  {
    "text": "because we haven't\nsolved that yet. But along the way,\nwe're going to see tango trees, which achieve this\nlog log n competitive bound.",
    "start": "121230",
    "end": "130639"
  },
  {
    "text": "So we think greedy is\nconstant competitive. The best we know right\nnow is log log n, this is an improvement\nover red black trees,",
    "start": "130639",
    "end": "137330"
  },
  {
    "text": "which achieve log n. Any balance binary search\ntree is within a log n factor of optimal.",
    "start": "137330",
    "end": "143030"
  },
  {
    "text": "So it's all between constant and\nlog n that we're trying to do. Another fun consequence\nof lower bounds",
    "start": "143030",
    "end": "149450"
  },
  {
    "text": "is a particular\nsense in which log n is necessary for some\naccess sequences. So I argued last time\nthat if you take, like,",
    "start": "149450",
    "end": "157340"
  },
  {
    "text": "a random access sequence, or-- for example, if you look\nat a binary search tree",
    "start": "157340",
    "end": "162487"
  },
  {
    "text": "and you say, oh, I'll just\naccess the thing that's deepest in the\ntree, there's always something that's deep in the\ntree of depth, at least log n.",
    "start": "162487",
    "end": "168950"
  },
  {
    "text": "And so for any\nbinary search tree there is an access sequence. No matter what that\nbinary search tree does, I can choose the next\naccess to force you",
    "start": "168950",
    "end": "176300"
  },
  {
    "text": "to take log n per operation. What we're going to see\ntoday in these lower bounds",
    "start": "176300",
    "end": "181370"
  },
  {
    "text": "is one access sequence that\nfor all binary search trees, they must spend log n time.",
    "start": "181370",
    "end": "188780"
  },
  {
    "text": "Just changing the\nquantifiers around. So instead of for every\nbinary search tree",
    "start": "188780",
    "end": "193970"
  },
  {
    "text": "there is an access\nsequence, there's going to be there is\nan access sequence such that for every\nbinary search tree",
    "start": "193970",
    "end": "199069"
  },
  {
    "text": "you need log n time. That's something we'll get\neasily out of these lower bounds.",
    "start": "199070",
    "end": "204470"
  },
  {
    "text": "So let's jump into\nthe lower bounds. And we're going to cover you\ncould say three different lower",
    "start": "204470",
    "end": "209620"
  },
  {
    "text": "bounds. The independent rectangles\nis kind of a generic class of lower bounds. Then we're going to see\ntwo specific choices",
    "start": "209620",
    "end": "216260"
  },
  {
    "text": "of these independent\nrectangles, which are actually older than this\nresult. So this is",
    "start": "216260",
    "end": "221480"
  },
  {
    "text": "sort of a modern interpretation\nof two older results and a more general result.",
    "start": "221480",
    "end": "227060"
  },
  {
    "text": "Signed greedy is going to turn\nout to be the best lower bound. Is It's better than all the\nones that we will cover,",
    "start": "227060",
    "end": "232790"
  },
  {
    "text": "but each of them has their\nown uses for analysis. Each of them is going to\nlet us analyze an algorithm",
    "start": "232790",
    "end": "239300"
  },
  {
    "text": "that we couldn't or\nthat we don't otherwise know how to analyze. So let's do the independent\nrectangle lower bound.",
    "start": "239300",
    "end": "248600"
  },
  {
    "text": "The sort of generic one. ",
    "start": "248600",
    "end": "265540"
  },
  {
    "text": "So these lower\nbounds are all going to refer to the\noriginal point set,",
    "start": "265540",
    "end": "271780"
  },
  {
    "text": "the white dots, the accesses. The idea is you're given an\naccess sequence, a sequence x",
    "start": "271780",
    "end": "277330"
  },
  {
    "text": "i-- x 1 up to x n, and you\nwant to know some lower bound that every binary\nsearch tree requires",
    "start": "277330",
    "end": "283690"
  },
  {
    "text": "a certain number of accesses, a\ncertain number of node touches for that access sequence. You know it's at least n.",
    "start": "283690",
    "end": "289021"
  },
  {
    "text": "You want something\nbigger than n. We've got to at least touch the\nnodes that are being accessed.",
    "start": "289021",
    "end": "294475"
  },
  {
    "text": " I'm going to drop this.",
    "start": "294475",
    "end": "300370"
  },
  {
    "start": "300370",
    "end": "315520"
  },
  {
    "text": "So I want the notion of\nindependent rectangles. And general idea of\ndependent rectangles",
    "start": "315520",
    "end": "324400"
  },
  {
    "text": "would be something like this. ",
    "start": "324400",
    "end": "330328"
  },
  {
    "text": "Ah, I see. ",
    "start": "330328",
    "end": "342610"
  },
  {
    "text": "So these are two rectangles. I consider them dependent\nbecause one of the corners is inside the other rectangle.",
    "start": "342610",
    "end": "348900"
  },
  {
    "text": "This is true no matter\nwhere the points are. So, for example, if I take two\npoints, they span a rectangle.",
    "start": "348900",
    "end": "359750"
  },
  {
    "text": "If I take these two points, for\nexample, they span a rectangle. This corner is inside that one.",
    "start": "359750",
    "end": "366180"
  },
  {
    "text": "So these are considered\ndependent rectangles in either case. So corner here does not\nnecessarily mean a point--",
    "start": "366180",
    "end": "373210"
  },
  {
    "text": "any of the four corners. Rectangle is defined\nby two points, but it has all four corners.",
    "start": "373210",
    "end": "379960"
  },
  {
    "text": "And so, in particular,\nindependent rectangles-- for example, they might\nbe completely disjoint.",
    "start": "379960",
    "end": "386080"
  },
  {
    "text": "Those are going\nto be independent. Something like that\nis independent.",
    "start": "386080",
    "end": "391700"
  },
  {
    "text": "But there are some other cases. You can have rectangles\nthat look like this.",
    "start": "391700",
    "end": "397180"
  },
  {
    "text": "OK? And it doesn't matter\nwhere the points are. Maybe here, here,\nhere, and here. Or the other way.",
    "start": "397180",
    "end": "404210"
  },
  {
    "text": "These are independent. And there's one other kind of\nspecial case, which maybe I'll",
    "start": "404210",
    "end": "412960"
  },
  {
    "text": "use color to draw the\nother one because they're right on top of each other.",
    "start": "412960",
    "end": "417970"
  },
  {
    "start": "417970",
    "end": "423405"
  },
  {
    "text": "So I've got a point here, a\npoint here, and a point here.",
    "start": "423405",
    "end": "430000"
  },
  {
    "text": "These are two rectangles\ndefined on three points. So they both use this point.",
    "start": "430000",
    "end": "436990"
  },
  {
    "text": "And if you check, it does\nsatisfy this condition. So no corner strictly\ninside the other.",
    "start": "436990",
    "end": "443259"
  },
  {
    "text": "But we also need that the\nrectangles are unsatisfied. So this is saying that\nthere's no other point even",
    "start": "443260",
    "end": "448660"
  },
  {
    "text": "on the boundary\nof the rectangle. So this part says, OK, there's\nnothing strictly inside.",
    "start": "448660",
    "end": "454360"
  },
  {
    "text": "But we also need\nthat on the boundary there's no other points. So this is the only\nsort of situation other",
    "start": "454360",
    "end": "460060"
  },
  {
    "text": "than reflections where\nyou get this working out as independent.",
    "start": "460060",
    "end": "465840"
  },
  {
    "text": " AUDIENCE: Last case\nis independent?",
    "start": "465840",
    "end": "472090"
  },
  {
    "text": "ERIK DEMAINE: Last\ncase is independent.  All right?",
    "start": "472090",
    "end": "478800"
  },
  {
    "text": "So this is a definition. If I give you a\nset of rectangles, they're independent.",
    "start": "478800",
    "end": "485070"
  },
  {
    "text": "I mean, I was\nlooking at pairwise. But if they're are\npairwise independent, then they will be independent.",
    "start": "485070",
    "end": "490710"
  },
  {
    "text": "No corner of any\nrectangle strictly inside any other rectangle. And there's no points\nof those rectangles",
    "start": "490710",
    "end": "497940"
  },
  {
    "text": "that are inside others. OK. Cool. ",
    "start": "497940",
    "end": "505390"
  },
  {
    "text": "So what? ",
    "start": "505390",
    "end": "512349"
  },
  {
    "text": "Lower bound says the optimal\noffline binary search tree, or the optimal way to add\ndots to satisfy your point set,",
    "start": "512350",
    "end": "521799"
  },
  {
    "text": "is going to be at least\nthe size of the input-- meaning the number of\ninitial points you have--",
    "start": "521799",
    "end": "528339"
  },
  {
    "text": "plus half the maximum number\nof independent rectangles. ",
    "start": "528340",
    "end": "542591"
  },
  {
    "text": "OK. So this is a max\nindependence set problem. In general, that's NP-complete. Turns out we'll be able to at\nleast approximate the number",
    "start": "542591",
    "end": "550259"
  },
  {
    "text": "of independent rectangles\nwithin a constant factor by the end of class. That's going to\nbe signed greedy.",
    "start": "550260",
    "end": "556220"
  },
  {
    "text": "So signed greedy is\ngoing to be the best way up to constant factors to\nchoose independent rectangles.",
    "start": "556220",
    "end": "561270"
  },
  {
    "text": "For now, someone\nmagically tells you what's the best way or you\njust choose some reasonable--",
    "start": "561270",
    "end": "568770"
  },
  {
    "text": "any choice of\nindependent rectangles will be a lower bound. But you get the best lower\nbound by choosing the max.",
    "start": "568770",
    "end": "574600"
  },
  {
    "text": "OK? So we're going to\nprove this theorem, and then we're going to see\nthree different ways to choose",
    "start": "574600",
    "end": "583432"
  },
  {
    "text": "those independent rectangles. And we'll use them\nfor various things. Wilber 1, Wilber,\n2 and signed greedy",
    "start": "583432",
    "end": "588780"
  },
  {
    "text": "are going to be\nthe three choices for independent rectangles. All right.",
    "start": "588780",
    "end": "594030"
  },
  {
    "text": "To prove this theorem, we're\ngoing to change it a little bit first.",
    "start": "594030",
    "end": "599850"
  },
  {
    "text": "And this is kind of\nthe focus of today-- is the idea of\nsigned rectangles.",
    "start": "599850",
    "end": "604890"
  },
  {
    "text": " If you look at the rectangles\nin the world spanned",
    "start": "604890",
    "end": "611580"
  },
  {
    "text": "by two points, there\nare two different kinds. There's the top right,\nlower left kind.",
    "start": "611580",
    "end": "620459"
  },
  {
    "text": "And then there's the top\nleft, lower right kind. These are positive\nslope or negative slope.",
    "start": "620460",
    "end": "626610"
  },
  {
    "text": " Those are the two\nkinds of rectangles. And it's helpful to think about\njust the positive rectangles",
    "start": "626610",
    "end": "636630"
  },
  {
    "text": "or the slash rectangles and\njust the backslash rectangles separately. So we're going to\ncall a point set--",
    "start": "636630",
    "end": "643920"
  },
  {
    "text": " it's a little hard\nto pronounce--",
    "start": "643920",
    "end": "650400"
  },
  {
    "text": "we used to call\nthis plus satisfied. So maybe it's easiest\nto pronounce it",
    "start": "650400",
    "end": "655620"
  },
  {
    "text": "that way, the symbol formerly\nknown as plus satisfied,",
    "start": "655620",
    "end": "660990"
  },
  {
    "text": "if all plus rectangles\nthat are not",
    "start": "660990",
    "end": "671370"
  },
  {
    "text": "on a horizontal or vertical\nline contain another point. ",
    "start": "671370",
    "end": "683360"
  },
  {
    "text": "So a point set is\narborally satisfied if and only if it is plus\nsatisfied and minus satisfied--",
    "start": "683360",
    "end": "691310"
  },
  {
    "text": "just breaking apart that\ndefinition into two parts. But now, we're going to look\nat point sets that are just plus satisfied or point sets\nthat are just minus satisfied.",
    "start": "691310",
    "end": "699300"
  },
  {
    "text": "And then we can look\nat the optimal solution if you only care\nabout plus rectangles.",
    "start": "699300",
    "end": "706960"
  },
  {
    "text": "So this is the smallest\nplus satisfied point set",
    "start": "706960",
    "end": "723840"
  },
  {
    "text": "containing all the access\npoints, all the given points. So we'll call that the input.",
    "start": "723840",
    "end": "732470"
  },
  {
    "text": "OPT was the smallest\narborally satisfied. OPT plus is the-- you just look at\nplus rectangles.",
    "start": "732470",
    "end": "739483"
  },
  {
    "text": " OK.",
    "start": "739483",
    "end": "744850"
  },
  {
    "text": "Why are we doing this? Well, for now, we're going to\ndo it to prove this theorem. So lemma, which was what\nwe're actually going to prove,",
    "start": "744850",
    "end": "755830"
  },
  {
    "text": "is if you look at\nthis OPT plus thing, it's got to be at least\nthe size of the input--",
    "start": "755830",
    "end": "761010"
  },
  {
    "text": "everything has to at\nleast contain the input-- plus maximum number of\nindependent plus rectangles.",
    "start": "761010",
    "end": "774460"
  },
  {
    "start": "774460",
    "end": "782260"
  },
  {
    "text": "So this is where we're\nactually going to prove. If you want to\nget plus satisfied and you've got k\nindependent plus rectangles,",
    "start": "782260",
    "end": "789240"
  },
  {
    "text": "you need to add at\nleast that many points-- so at least one point\nper plus rectangle.",
    "start": "789240",
    "end": "794850"
  },
  {
    "text": "If you can prove this,\nyou prove the theorem because this holds\nfor minus just as well as plus by symmetry.",
    "start": "794850",
    "end": "801120"
  },
  {
    "text": "And so you take your maximum\nindependent set of rectangles.",
    "start": "801120",
    "end": "806400"
  },
  {
    "text": "At least half of them are\nplus or at least half of them are minus. You apply this bound, and that's\nwhere you get the 1/2 here.",
    "start": "806400",
    "end": "814290"
  },
  {
    "text": "So this is stronger, I\nguess, than the theorem, and this is what we're\nactually going to prove.",
    "start": "814290",
    "end": "820140"
  },
  {
    "text": "And so, in this\nworld, we just are thinking about plus rectangles,\nwhich is a little weird. But it works.",
    "start": "820140",
    "end": "827339"
  },
  {
    "text": " And the proof is going\nto be in three steps.",
    "start": "827340",
    "end": "834365"
  },
  {
    "text": "I'm first going to give you\nan overview of the steps, and then we'll actually do them. So this is like a\ntwo-level proof.",
    "start": "834366",
    "end": "843029"
  },
  {
    "text": "First thing we\ndo, the top level, is we're going to\nfind a rectangle",
    "start": "843030",
    "end": "853589"
  },
  {
    "text": "in the independent\nset, and we're",
    "start": "853590",
    "end": "860370"
  },
  {
    "text": "going to find a vertical line\nthat hits only that rectangle.",
    "start": "860370",
    "end": "867540"
  },
  {
    "start": "867540",
    "end": "873730"
  },
  {
    "text": "So we're going to\nhave some rectangle in the independent set, and we\nwant a vertical line stabbing",
    "start": "873730",
    "end": "883379"
  },
  {
    "text": "it such that no\nother rectangle is stabbed by this vertical line.",
    "start": "883380",
    "end": "888490"
  },
  {
    "text": "So all other rectangles--\nthat's independence, so maybe they look\nsomething like this--",
    "start": "888490",
    "end": "894259"
  },
  {
    "text": "but nothing like this. ",
    "start": "894260",
    "end": "899297"
  },
  {
    "text": "Not obvious that such a\nthing exists, but it does. Actually, not that hard to find. We just need some\nrectangle with some line.",
    "start": "899297",
    "end": "905510"
  },
  {
    "text": " Then, using that\nproperty, we're going",
    "start": "905510",
    "end": "916230"
  },
  {
    "text": "to be able to find some points\nin that rectangle that are also",
    "start": "916230",
    "end": "931199"
  },
  {
    "text": "in the optimal plus\nsolution in the rectangle",
    "start": "931200",
    "end": "943530"
  },
  {
    "text": "crossing the line. ",
    "start": "943530",
    "end": "949950"
  },
  {
    "text": "Let me get another color. So we're going to find\na point on the left",
    "start": "949950",
    "end": "956490"
  },
  {
    "text": "of the line and a point\non the right of the line. And they're\nhorizontally adjacent, meaning there's no other\npoint between them.",
    "start": "956490",
    "end": "963790"
  },
  {
    "text": "So we know there's\nsome point in this box. Because this is a\nplus box, it has got to be satisfied somehow.",
    "start": "963790",
    "end": "969750"
  },
  {
    "text": "And I claim there's\nactually two points on either side of the line. One of them could be equal\nto this or this, but not both",
    "start": "969750",
    "end": "974992"
  },
  {
    "text": "obviously because they're\nhorizontally aligned. ",
    "start": "974992",
    "end": "981270"
  },
  {
    "text": "And then what we're going to\ndo is charge the rectangle",
    "start": "981270",
    "end": "989230"
  },
  {
    "text": "to those points. ",
    "start": "989230",
    "end": "994345"
  },
  {
    "text": "And then, basically, we're\ngoing to remove that rectangle and repeat. And the claim is this charging\nsort of only happens once",
    "start": "994346",
    "end": "1000830"
  },
  {
    "text": "per point. And therefore, the number of\npoints in the optimal solution has to be at least the\nnumber of rectangles-- number",
    "start": "1000830",
    "end": "1008150"
  },
  {
    "text": "of plus rectangles in\nthe independent set. So, basically, this is a way\nof ordering the rectangles.",
    "start": "1008150",
    "end": "1013740"
  },
  {
    "text": "We're going to take one that\nhas one of these vertical lines, find two points that\npay for that rectangle,",
    "start": "1013740",
    "end": "1020630"
  },
  {
    "text": "and therefore argue that OPT\nhas to be at least the number of rectangles. So we have to argue that at\nleast one of these points",
    "start": "1020630",
    "end": "1028250"
  },
  {
    "text": "is not one of the\noriginal points. And that's where we're\ngetting the input plus this.",
    "start": "1028250",
    "end": "1035643"
  },
  {
    "text": "So there's lots of\nthings to check here. Let's do them one at a time. ",
    "start": "1035644",
    "end": "1041559"
  },
  {
    "text": "And throughout, I'm\ngoing to assume-- let me write that the bottom--",
    "start": "1041560",
    "end": "1047150"
  },
  {
    "text": "assume all x- and\ny-coordinates are unique. ",
    "start": "1047150",
    "end": "1059860"
  },
  {
    "text": "This is an idea I mentioned\nlast time as well. If you have lots of\naccesses to the same key,",
    "start": "1059860",
    "end": "1066890"
  },
  {
    "text": "imagine them being accesses\nto slightly different keys. Just skew them a little\nbit, and it doesn't",
    "start": "1066890",
    "end": "1073330"
  },
  {
    "text": "change any of the bounds much. I won't to argue that here,\nbut at the least think of this",
    "start": "1073330",
    "end": "1080290"
  },
  {
    "text": "as just a simplifying assumption\nto make the proofs cleaner. ",
    "start": "1080290",
    "end": "1087010"
  },
  {
    "text": "So how are we going\nto do step one? I need to find some rectangle\nand some vertical line that",
    "start": "1087010",
    "end": "1092710"
  },
  {
    "text": "only stabs that rectangle. And the way we're going\nto do that is just",
    "start": "1092710",
    "end": "1098559"
  },
  {
    "text": "take the widest rectangle that\njust has the maximum x extent.",
    "start": "1098560",
    "end": "1110190"
  },
  {
    "text": "There might be more than one,\nbut just take one of them. So it's very wide.",
    "start": "1110190",
    "end": "1118534"
  },
  {
    "text": "What this tells\nus is that there's no other rectangle like this. This would be independent,\nbut it would be wider.",
    "start": "1118534",
    "end": "1125110"
  },
  {
    "text": "So that's not allowed. ",
    "start": "1125110",
    "end": "1131365"
  },
  {
    "text": "Now, we have to think about\nall sorts of scenarios. So we've got a point\nhere and a point here. It could still be that we\nhave rectangles like this.",
    "start": "1131365",
    "end": "1138960"
  },
  {
    "text": "They just can't go\nfarther to the right. It could be we have\nrectangles that go like this-- just can't go too\nfar to the left.",
    "start": "1138960",
    "end": "1147354"
  },
  {
    "text": "These rectangles\nthat are anchored in the lower left and\nthese rectangles that are anchored in the upper\nright can't touch each other",
    "start": "1147354",
    "end": "1152610"
  },
  {
    "text": "because then one of\nthem would be satisfied. This one's going to\nhave a point down here.",
    "start": "1152610",
    "end": "1158160"
  },
  {
    "text": "This one is going to\nhave a point here. I guess-- yeah, let's\nsee, how would it",
    "start": "1158160",
    "end": "1163200"
  },
  {
    "text": "go if they were touching? ",
    "start": "1163200",
    "end": "1171110"
  },
  {
    "text": "We'd have a corner-- hmm, touching is a little weird. ",
    "start": "1171110",
    "end": "1191000"
  },
  {
    "text": "Ah, I see. Good. This can't happen\nbecause we assume the x-coordinates are distinct.",
    "start": "1191000",
    "end": "1196790"
  },
  {
    "text": "So that's why I did this. That's the reason.",
    "start": "1196790",
    "end": "1201860"
  },
  {
    "text": "So this can't happen. And I also can't have them go\nlike this because then there's",
    "start": "1201860",
    "end": "1207409"
  },
  {
    "text": "a corner in the strict interior\nof the other rectangle. Is that clear?",
    "start": "1207410",
    "end": "1212912"
  },
  {
    "text": "This rectangle\ncan't come over here because then that would\nbe not independent.",
    "start": "1212912",
    "end": "1218090"
  },
  {
    "text": "Rectangle can't come\nright to the same spot because there is no same spot. That would be two points\non the same vertical line.",
    "start": "1218090",
    "end": "1224190"
  },
  {
    "text": "And so what we must\nhave is a picture more like this where there's an\nempty region in between.",
    "start": "1224190",
    "end": "1230809"
  },
  {
    "text": "that not hit by-- there can be\nmany of these rectangles, many of these rectangles.",
    "start": "1230810",
    "end": "1235911"
  },
  {
    "text": "They're independent\nfrom each other. That's like this case here. There can also be some\nrectangles like this.",
    "start": "1235911",
    "end": "1243559"
  },
  {
    "text": "But by the same argument, these\nguys can't touch each other and they can't\noverlap horizontally",
    "start": "1243560",
    "end": "1249380"
  },
  {
    "text": "because then one of the corners\nwould be inside the other. Question? AUDIENCE: For that picture,\nyou drew a rectangle",
    "start": "1249380",
    "end": "1256455"
  },
  {
    "text": "under the other one. ERIK DEMAINE: This\none or this one? AUDIENCE: That one.",
    "start": "1256455",
    "end": "1261531"
  },
  {
    "text": "ERIK DEMAINE: Yeah,\nthis one cannot happen. That's what we claim-- haha, right. So you're right.",
    "start": "1261531",
    "end": "1267140"
  },
  {
    "text": "So we worry about-- interesting. Well, we worry about\nsomething like this.",
    "start": "1267140",
    "end": "1273320"
  },
  {
    "text": " AUDIENCE: Sorry, why\ncan't that happen?",
    "start": "1273320",
    "end": "1279424"
  },
  {
    "text": "ERIK DEMAINE:\nYeah, you're right. I actually drew\nthe wrong picture. Sorry. Kidding. ",
    "start": "1279425",
    "end": "1291080"
  },
  {
    "text": "Yeah. I really meant\nline segment here. I'm sorry. ",
    "start": "1291080",
    "end": "1299640"
  },
  {
    "text": "Poor choice of wording. So vertical line is\nactually just going to go the extent\nof the rectangle--",
    "start": "1299640",
    "end": "1307770"
  },
  {
    "text": "something like this. Sorry. We can't forbid\nrectangles like this.",
    "start": "1307770",
    "end": "1313910"
  },
  {
    "text": "What we can forbid our\nrectangles like this that also try to\ncross that segment.",
    "start": "1313910",
    "end": "1321632"
  },
  {
    "text": "We'll see why this is\nenough in a moment. Sorry about that. ",
    "start": "1321632",
    "end": "1328350"
  },
  {
    "text": "I really only care about the\ninterior of this rectangle. I'm trying to get a vertical\nline that only stabs",
    "start": "1328350",
    "end": "1335370"
  },
  {
    "text": "this rectangle, nothing else-- inside the rectangle. Sorry, poor wording.",
    "start": "1335370",
    "end": "1340740"
  },
  {
    "text": "I don't care about\nthese guys outside because I can't say\nanything about them. They could be all over the\nplace in an independent set.",
    "start": "1340740",
    "end": "1349275"
  },
  {
    "text": "I mean, relative to what\nhits this rectangle, there's stuff on the left. There's stuff on the right. There are these guys. There can also be\nthings like this.",
    "start": "1349275",
    "end": "1357340"
  },
  {
    "text": "But still remaining\nare these regions which are not hit\nby any rectangles,",
    "start": "1357340",
    "end": "1362959"
  },
  {
    "text": "and that's because\nwhat I was saying. These guys can't touch each\nother because then there would be equal x-coordinates. They can't overlap\nbecause then one of them",
    "start": "1362959",
    "end": "1369660"
  },
  {
    "text": "would not be independent\nfrom the other. So I get my vertical lines.",
    "start": "1369660",
    "end": "1378540"
  },
  {
    "text": "I just need one, but it\ncould be any of these. In general, for example, if\nyou take all of these lower",
    "start": "1378540",
    "end": "1386400"
  },
  {
    "text": "left anchored\nrectangles and take just to the right of\nthe rightmost one, that will be a valid\nchoice for your line.",
    "start": "1386400",
    "end": "1393210"
  },
  {
    "text": "Because you can argue none\nof these can overlap it. So that's step one.",
    "start": "1393210",
    "end": "1398550"
  },
  {
    "text": "We just take a widest rectangle. The one thing we\nneeded to forbid was something going like\nthis all the way across.",
    "start": "1398550",
    "end": "1405060"
  },
  {
    "text": " Step two. ",
    "start": "1405060",
    "end": "1411822"
  },
  {
    "text": "Step two is actually\npretty easy. Once you've identified\nthis red line--",
    "start": "1411822",
    "end": "1417490"
  },
  {
    "text": "inside the rectangle, you\nknow there are some points. And I'm going to\ntake the rightmost.",
    "start": "1417490",
    "end": "1423714"
  },
  {
    "text": "And then among all\nthe rightmost points, I'm going to take the\ntopmost point that is to the left of the line\nand inside the rectangle.",
    "start": "1423714",
    "end": "1430420"
  },
  {
    "text": "So let p be the topmost,\nleftmost point--",
    "start": "1430420",
    "end": "1439340"
  },
  {
    "text": "sorry, rightmost-- that\nis both in the rectangle",
    "start": "1439340",
    "end": "1454020"
  },
  {
    "text": "and left of the line. ",
    "start": "1454020",
    "end": "1462240"
  },
  {
    "text": "Let me erase this one for\na little bit more room.",
    "start": "1462240",
    "end": "1468420"
  },
  {
    "text": "So I'm looking at\nall of this region to the left of the\nline in the rectangle. I want to take the\nrightmost and then topmost",
    "start": "1468420",
    "end": "1479130"
  },
  {
    "text": "point-- something like this. How do I know such\na point exists? Because this point\nis such a point.",
    "start": "1479130",
    "end": "1486640"
  },
  {
    "text": "And this point is to\nthe left of the line. So if there's nothing else in\nhere, that is a valid choice.",
    "start": "1486640",
    "end": "1492510"
  },
  {
    "text": "But in general, we go to the\nright as much as possible. Then we go up as\nmuch as possible. So that's a point, which\nwe will call them p.",
    "start": "1492510",
    "end": "1499110"
  },
  {
    "text": "AUDIENCE: Couldn't it be on\nthe border of the rectangle? ERIK DEMAINE: It could\nbe on the border.",
    "start": "1499110",
    "end": "1505200"
  },
  {
    "text": "It could be interior. We don't know. AUDIENCE: When you said\ntopmost, what is your topmost?",
    "start": "1505200",
    "end": "1511890"
  },
  {
    "text": "ERIK DEMAINE: Topmost means\nof maximum y-coordinate. AUDIENCE: Oh, OK. Got it. ERIK DEMAINE: So it\ncould be up here.",
    "start": "1511890",
    "end": "1519490"
  },
  {
    "text": "We don't know. First, we go rightmost. Then, among all the\nthings in that column,",
    "start": "1519490",
    "end": "1525019"
  },
  {
    "text": "we go to the topmost one. So it might be on the top. It might not be. ",
    "start": "1525019",
    "end": "1530760"
  },
  {
    "text": "These are points-- sorry,\nthis is a point in OPT plus.",
    "start": "1530760",
    "end": "1536265"
  },
  {
    "text": " And then q is going\nto be a similar thing.",
    "start": "1536265",
    "end": "1542966"
  },
  {
    "text": "It's going to be the\nbottom-most, leftmost point",
    "start": "1542966",
    "end": "1552779"
  },
  {
    "text": "in OPT plus that\nis in the rectangle",
    "start": "1552780",
    "end": "1563970"
  },
  {
    "text": "and right of the line.  Not totally symmetric, though.",
    "start": "1563970",
    "end": "1569670"
  },
  {
    "text": "We're also going to\nsay and not below p. ",
    "start": "1569670",
    "end": "1576570"
  },
  {
    "text": "So now we're looking at\nthis upper region here.",
    "start": "1576570",
    "end": "1585450"
  },
  {
    "text": "Among all the things\nthat are not below p-- should have drawn\nthis more horizontal-- ",
    "start": "1585450",
    "end": "1593430"
  },
  {
    "text": "and to the right\nof the red line-- so that's up to here, I guess--",
    "start": "1593430",
    "end": "1598960"
  },
  {
    "text": "I want to take the\nleftmost column that has any points in it\nand then among those take the bottom-most\npoint in the column.",
    "start": "1598960",
    "end": "1607370"
  },
  {
    "text": "I claim that's actually\ngoing to be on this line. First thing to check is\nthat such a point exists.",
    "start": "1607370",
    "end": "1612580"
  },
  {
    "text": "Such a point exists\nbecause, in particular, this is such a point. It is to the right of the line.",
    "start": "1612580",
    "end": "1617980"
  },
  {
    "text": "It's above the blue line,\nright of the red line, in the rectangle. But I claim that if we take the\nleftmost, bottom-most one, then",
    "start": "1617980",
    "end": "1625350"
  },
  {
    "text": "they must actually be aligned. Why? So if it was somewhere\nelse, like up here",
    "start": "1625350",
    "end": "1630520"
  },
  {
    "text": "or like this point, then I claim\nthat is an unsatisfied box.",
    "start": "1630520",
    "end": "1636590"
  },
  {
    "text": "Let me draw that picture,\nmake a little clearer.",
    "start": "1636590",
    "end": "1644179"
  },
  {
    "text": "So something like this. ",
    "start": "1644180",
    "end": "1650760"
  },
  {
    "text": "So we've got our red line\nand we've got this picture.",
    "start": "1650760",
    "end": "1659540"
  },
  {
    "text": " This is p, and then actually\nwe don't know anything",
    "start": "1659540",
    "end": "1674000"
  },
  {
    "text": "about down here. ",
    "start": "1674000",
    "end": "1679770"
  },
  {
    "text": "This is q. I claim that these black regions\ncannot have any points in them",
    "start": "1679770",
    "end": "1686230"
  },
  {
    "text": "because, by definition, p\nwas in the rightmost column. So there's nothing in this strip\nand between p and the red line.",
    "start": "1686230",
    "end": "1691677"
  },
  {
    "text": "And it was the topmost within\nthe column, which means there's nothing above p in the column. So that's why all the\npoints are confined",
    "start": "1691677",
    "end": "1697620"
  },
  {
    "text": "to this region over here. Similarly, for q, if you look\nat the things that are above or on this horizontal\nline, which",
    "start": "1697620",
    "end": "1704640"
  },
  {
    "text": "was the blue line\nover there, then we know that there's nothing\nin this strip in between",
    "start": "1704640",
    "end": "1713320"
  },
  {
    "text": "because q is leftmost. And then among leftmost,\nit was bottom-most, so there's nothing down here. So that means, if these guys\nare not horizontally aligned,",
    "start": "1713320",
    "end": "1720360"
  },
  {
    "text": "there is an\nunsatisfied box here. Contradiction. It's a plus box. So in OPT plus, there's got\nto be another point, which",
    "start": "1720360",
    "end": "1728227"
  },
  {
    "text": "was a contradiction. So in fact, p and q must\nbe horizontally aligned. So that was step two.",
    "start": "1728227",
    "end": "1734360"
  },
  {
    "text": " Finally, we get step three. ",
    "start": "1734360",
    "end": "1743250"
  },
  {
    "text": "So the idea with step three-- now we're going to do\na charging argument. We want to say, OK, basically,\nfor every independent",
    "start": "1743250",
    "end": "1753060"
  },
  {
    "text": "rectangle, we want to\nfind a point that's in OPT that was not\nin the original input.",
    "start": "1753060",
    "end": "1759720"
  },
  {
    "text": "And therefore, then\nOPT plus has to be at least the size of the\ninput plus 1 per each",
    "start": "1759720",
    "end": "1765120"
  },
  {
    "text": "of these plus rectangles.  So the idea is the following.",
    "start": "1765120",
    "end": "1772530"
  },
  {
    "text": "Because of all this set-up-- because we made pq\nhorizontally aligned--",
    "start": "1772530",
    "end": "1779340"
  },
  {
    "text": "they're inside the rectangle. And furthermore,\nthey're adjacent and they cross\nthis vertical line.",
    "start": "1779340",
    "end": "1785040"
  },
  {
    "text": "And that vertical line is not\ncrossed by any other rectangle. When I say line, I\nmean line segment.",
    "start": "1785040",
    "end": "1791780"
  },
  {
    "text": "There's no other rectangle\nthat hits this red thing. Therefore, these\ntwo points are not going to get charged\nas a pair ever again.",
    "start": "1791780",
    "end": "1800640"
  },
  {
    "text": "If you remove this rectangle,\nrepeat this process, pq is never going to\nget charged again.",
    "start": "1800640",
    "end": "1809070"
  },
  {
    "text": "So we charge to pq. And the pair never\ncharged again, never",
    "start": "1809070",
    "end": "1826230"
  },
  {
    "text": "be charged by another\nrectangle because no rectangle",
    "start": "1826230",
    "end": "1833860"
  },
  {
    "text": "hits the red thing.",
    "start": "1833860",
    "end": "1839520"
  },
  {
    "start": "1839520",
    "end": "1846600"
  },
  {
    "text": "So no rectangle\ncontains the segment pq,",
    "start": "1846600",
    "end": "1853380"
  },
  {
    "text": "the horizontal segment pq.  So this is almost what we want.",
    "start": "1853380",
    "end": "1859130"
  },
  {
    "text": "We really want a single point\nwhich is not in the input. So we have p and q. They're horizontally aligned.",
    "start": "1859130",
    "end": "1864679"
  },
  {
    "text": "Now, if they're\nhorizontally aligned, we know that not both of them\nare in the original input",
    "start": "1864680",
    "end": "1872090"
  },
  {
    "text": "because all y-coordinates\nare distinct. This is usually true\nbecause you're only accessing one point\nper row, per time step.",
    "start": "1872090",
    "end": "1879799"
  },
  {
    "text": "So one of these might\nbe in the input, but the other one is not.",
    "start": "1879800",
    "end": "1885170"
  },
  {
    "text": "So that's the one I\nwant to hold onto. And say, OK, that's a point\nadded to OPT plus that pays",
    "start": "1885170",
    "end": "1892039"
  },
  {
    "text": "for this rectangle. It's not quite so\nsimple, though, because we might\nhave a whole bunch",
    "start": "1892040",
    "end": "1897230"
  },
  {
    "text": "of horizontally-aligned things. And one rectangle\ncharges to this one.",
    "start": "1897230",
    "end": "1904950"
  },
  {
    "text": "One rectangle\ncharges to this one. One rectangle\ncharges to this pair. ",
    "start": "1904950",
    "end": "1911510"
  },
  {
    "text": "That's OK, though, because\nhere we have four points. Again, one of them\ncould be in the input.",
    "start": "1911510",
    "end": "1917180"
  },
  {
    "text": "The other three\nhave to be added. And so you've got three\nrectangles, three added points, and we're happy.",
    "start": "1917180",
    "end": "1923190"
  },
  {
    "text": "Question? AUDIENCE: Just to make\nthe argument formal, wouldn't you want to say that\nonly when your saying assume",
    "start": "1923190",
    "end": "1931667"
  },
  {
    "text": "that x and y are always\ndistinct-- but then, if you have the\nsame either x or y-- ERIK DEMAINE: Ah, good point.",
    "start": "1931667",
    "end": "1937490"
  },
  {
    "text": "So this is distinct in\nthe input is what I meant. Obviously, in OPT,\nany satisfied set",
    "start": "1937490",
    "end": "1943831"
  },
  {
    "text": "is not going to\nhave this property. Yeah, good. So I want to assume x-\nand y-coordinates are only distinct in the input.",
    "start": "1943832",
    "end": "1949490"
  },
  {
    "text": "OPT will not have that property. And that's why p and q can exist\nand have the same y-coordinate. Another question?",
    "start": "1949490",
    "end": "1955130"
  },
  {
    "text": " AUDIENCE: Does this\nstill [INAUDIBLE]",
    "start": "1955130",
    "end": "1960938"
  },
  {
    "text": "the special case where\nyour two points are the points of the rectangle? ERIK DEMAINE: OK. So the question is can p and q\nbe the points of the rectangle?",
    "start": "1960938",
    "end": "1970560"
  },
  {
    "text": "One of them can be. Like, p could be here, and then\nanother point is over here. So then that will be the\nsegment that you are using,",
    "start": "1970560",
    "end": "1978480"
  },
  {
    "text": "between p and q. Or it could be q is\nhere, and p is over here.",
    "start": "1978480",
    "end": "1983690"
  },
  {
    "text": "Then that's the segment. You can't have them both\nequal because p and q have to be horizontally aligned\nand also because there's got",
    "start": "1983690",
    "end": "1990320"
  },
  {
    "text": "to be another point in there. Yeah, so that should work. You have to check that this\nboundary case is still OK.",
    "start": "1990320",
    "end": "1997710"
  },
  {
    "text": "But the claim is no other\nrectangle touches this red line",
    "start": "1997710",
    "end": "2003350"
  },
  {
    "text": "even on the endpoint. And therefore, no\nother rectangle will wholly contain p and q.",
    "start": "2003350",
    "end": "2008760"
  },
  {
    "text": "And so that means you're only\ncharging to this pair once. And then this pair\ncharging is OK",
    "start": "2008760",
    "end": "2014280"
  },
  {
    "text": "because, luckily, there's three\nedges here, four vertices. One of those vertices\nwe can't charge to,",
    "start": "2014280",
    "end": "2019850"
  },
  {
    "text": "so there's exactly the right\nnumber of things for the edges, and we're OK.",
    "start": "2019850",
    "end": "2026210"
  },
  {
    "text": "Yeah, this can really happen. In fact our favorite\nexample of the pinwheel--",
    "start": "2026210",
    "end": "2034419"
  },
  {
    "text": "if instead of doing the greedy\naddition, we do this addition-- ",
    "start": "2034420",
    "end": "2043740"
  },
  {
    "text": "these are supposed to\nbe horizontally aligned. A little hard without a grid--",
    "start": "2043740",
    "end": "2049770"
  },
  {
    "text": "a graph blackboard\nwould a great. So this is not quite satisfied.",
    "start": "2049770",
    "end": "2054870"
  },
  {
    "text": "You've got to add some more\npoints here or something.",
    "start": "2054870",
    "end": "2059969"
  },
  {
    "text": "But it has the feature that-- here's an independent\nset of rectangles. I can do this one,\nthis one, and this one.",
    "start": "2059969",
    "end": "2073199"
  },
  {
    "text": " So this is three\nindependent rectangles.",
    "start": "2073199",
    "end": "2078330"
  },
  {
    "text": "As the white points go,\nthey're independent rectangles. The corners are not\nstrictly inside each other,",
    "start": "2078330",
    "end": "2084810"
  },
  {
    "text": "and none of the white\npoints satisfies any of the other rectangles. And indeed, if you\napplied this argument,",
    "start": "2084810",
    "end": "2093132"
  },
  {
    "text": "first you take the\nwidest rectangle and say, OK, here is my\nvertical red segment. I'm going to charge to these\ntwo guys, this segment,",
    "start": "2093132",
    "end": "2100597"
  },
  {
    "text": "and then eventually this guy\nwill charge to this segment and this guy will\ncharge to this segment. And luckily, there\nare three added points",
    "start": "2100597",
    "end": "2107460"
  },
  {
    "text": "for exactly the three segments\nfor the three rectangles. There had to be another point. ",
    "start": "2107460",
    "end": "2115079"
  },
  {
    "text": "So that's a lower bound. ",
    "start": "2115080",
    "end": "2121453"
  },
  {
    "text": "A lot of work-- but in the end, it\nsays, look, just find an independent set of\nplus boxes, plus rectangles.",
    "start": "2121453",
    "end": "2128930"
  },
  {
    "text": "That's a lower bound on OPT. So now, the question\nremains, how do we find a good independent\nset of plus boxes?",
    "start": "2128930",
    "end": "2136340"
  },
  {
    "text": "And now we'll go through\nthe three different ways we know how to do it. I'll start actually\nwith Wilber 2.",
    "start": "2136340",
    "end": "2142580"
  },
  {
    "text": "It's called Wilber 2 because\nit was in a paper by Wilber, and I think he called it lower\nbound number 1 and lower bound",
    "start": "2142580",
    "end": "2149090"
  },
  {
    "text": "number 2. But for pragmatic reasons, I'm\ngoing to start with number 2. ",
    "start": "2149090",
    "end": "2160670"
  },
  {
    "text": "It's from 1989, so it's\nactually an old paper. And it was sort of\nlost for a long time.",
    "start": "2160670",
    "end": "2166410"
  },
  {
    "text": "I don't think Wilber\nwrote any other papers. It was in SICOMP, a big journal.",
    "start": "2166410",
    "end": "2171755"
  },
  {
    "text": " so a few years after\nsplay trees and then",
    "start": "2171755",
    "end": "2178400"
  },
  {
    "text": "sort of rediscovered\nin the early 2000s and turns out to be really\nuseful for a lot of theorems.",
    "start": "2178400",
    "end": "2185060"
  },
  {
    "text": "So here's the lower bound. Again, we're\nlooking at the input point set-- no added points,\njust the original points.",
    "start": "2185060",
    "end": "2193970"
  },
  {
    "text": "Look at every point, and\nlook at all the points that you can see from\nthis point downward.",
    "start": "2193970",
    "end": "2200970"
  },
  {
    "text": "What does see mean? I'm interested in\npoints below p that when",
    "start": "2200970",
    "end": "2206210"
  },
  {
    "text": "I draw the rectangle\ncontain no other points. So this is sort of\nlike a lower envelope.",
    "start": "2206210",
    "end": "2213740"
  },
  {
    "text": "It's going to look\nsomething like this-- and maybe some points like this.",
    "start": "2213740",
    "end": "2222180"
  },
  {
    "text": "So all of these rectangles\nhave to be empty. ",
    "start": "2222180",
    "end": "2243540"
  },
  {
    "text": "So these are the downward\nvisible points from p.",
    "start": "2243540",
    "end": "2257670"
  },
  {
    "text": " And now, among these points, you\ncan sort them by y-coordinate.",
    "start": "2257670",
    "end": "2265680"
  },
  {
    "text": "And I want to see\nhow many times do they cross this vertical line.",
    "start": "2265680",
    "end": "2271630"
  },
  {
    "text": "So if I order them\nby y-coordinate-- ",
    "start": "2271630",
    "end": "2277590"
  },
  {
    "text": "so I start here, and\nmaybe I go to here. Then the next one is over\nhere, so that's across.",
    "start": "2277590",
    "end": "2283470"
  },
  {
    "text": "Then I go over here. Then I cross. Then I go here. Then I cross. Go here, here, cross.",
    "start": "2283470",
    "end": "2290670"
  },
  {
    "text": "So if I visit them\nin order, I want to know how many times do\nI cross this vertical line. ",
    "start": "2290670",
    "end": "2299319"
  },
  {
    "text": "So this is the past of p,\nall of the accesses before p. Think of this is how\nmany times you alternate",
    "start": "2299320",
    "end": "2305880"
  },
  {
    "text": "between accessing on\nthe left of the line and accessing on the\nright of the line. ",
    "start": "2305880",
    "end": "2313594"
  },
  {
    "text": "So count number of alternations\nleft or right of p.",
    "start": "2313594",
    "end": "2324270"
  },
  {
    "text": "And again, if we assume\nthat no key is ever accessed more than\nonce, then there will always be left or\nright, never exactly on.",
    "start": "2324270",
    "end": "2329910"
  },
  {
    "start": "2329910",
    "end": "2334931"
  },
  {
    "text": "And then I want to\nsum over all points.  And I claim this\nis a lower bound.",
    "start": "2334931",
    "end": "2343950"
  },
  {
    "text": "Why is it a lower bound? Essentially, I take each\nof these red lines that",
    "start": "2343950",
    "end": "2353580"
  },
  {
    "text": "cross the p vertical line\nand I turn them into a box.",
    "start": "2353580",
    "end": "2360005"
  },
  {
    "text": "So there's one there, one\nthere, one there, and one there.",
    "start": "2360005",
    "end": "2368359"
  },
  {
    "text": "I claim if I do this for\nall p, all those boxes",
    "start": "2368360",
    "end": "2373597"
  },
  {
    "text": "will be independent. All those rectangles will be\nindependent from each other. I won't prove that formally\nhere, but you can check it.",
    "start": "2373597",
    "end": "2381809"
  },
  {
    "text": "So it's obvious for one\np because each of these has a different vertical span. If you do it for all\np-- all the points p--",
    "start": "2381810",
    "end": "2389270"
  },
  {
    "text": "these won't conflict. So by the independent\nrectangle lower bound,",
    "start": "2389270",
    "end": "2395560"
  },
  {
    "text": "this is a lower bound on\nOPT up to a factor of 2.",
    "start": "2395560",
    "end": "2402490"
  },
  {
    "text": "So what? Wilber 2 is quite interesting. For a long time,\nwe've conjectured",
    "start": "2402490",
    "end": "2408520"
  },
  {
    "text": "that it is the right answer. So conjecture-- I know\nit's a weird lower",
    "start": "2408520",
    "end": "2416620"
  },
  {
    "text": "bound to even think of. It's a very hard paper to read. Without the geometric\nview, it's even harder",
    "start": "2416620",
    "end": "2422950"
  },
  {
    "text": "to imagine the\ndefinition of this bound. It's sort of an algorithm.",
    "start": "2422950",
    "end": "2428400"
  },
  {
    "text": "It's a way to assign boxes. It gives you a lower bound. It's a little weird. We conjecture that\nit's proportional",
    "start": "2428400",
    "end": "2434560"
  },
  {
    "text": "to the optimal solution. We can't prove it. We've tried many times.",
    "start": "2434560",
    "end": "2440440"
  },
  {
    "text": "It's a pain to work with,\nbut it is what it is.",
    "start": "2440440",
    "end": "2447630"
  },
  {
    "text": "There's one theorem\nthat uses it, so I want to tell you\nabout that theorem. But I don't want to go\ninto it in too much detail.",
    "start": "2447630",
    "end": "2454200"
  },
  {
    "text": "It's a neat theorem. And it's in a paper\nby Iacono, 2002.",
    "start": "2454200",
    "end": "2462900"
  },
  {
    "text": "And it was the first paper to\nrevitalize the Wilber stuff. So it's like, hey, there's\nthis Wilber 2 bound.",
    "start": "2462900",
    "end": "2468390"
  },
  {
    "text": "We can use it to solve a\nnew problem, which is called key independent optimality. ",
    "start": "2468390",
    "end": "2483960"
  },
  {
    "text": "Briefly, the idea with\nkey independent optimality is, suppose you've heard\nabout dynamic optimality.",
    "start": "2483960",
    "end": "2489640"
  },
  {
    "text": "You know, it's really cool\nbecause splay trees and whatnot seem to really adapt to\nwhatever your inputs are.",
    "start": "2489640",
    "end": "2494940"
  },
  {
    "text": "But suppose your inputs\nreally don't have keys. They're just arbitrary objects\nlabeled however, just randomly.",
    "start": "2494940",
    "end": "2502140"
  },
  {
    "text": "In fact, let's assume that\nthey're labeled randomly. Suppose the keys are\ngenerated randomly because they're meaningless\nor just arbitrary things.",
    "start": "2502140",
    "end": "2508797"
  },
  {
    "text": "So you figure, oh, maybe\nI'll make it better and just randomize\nthem completely.",
    "start": "2508797",
    "end": "2514559"
  },
  {
    "text": "If keys are random,\nthen dynamic OPT",
    "start": "2514560",
    "end": "2526380"
  },
  {
    "text": "is the same thing up to constant\nfactors as the working set bound. ",
    "start": "2526380",
    "end": "2535830"
  },
  {
    "text": "That's the theorem. So this is cool because it\nmeans splay trees are actually optimal in the setting\nwhere keys are random.",
    "start": "2535830",
    "end": "2542070"
  },
  {
    "text": " This is in expectation\nover the randomized keys.",
    "start": "2542070",
    "end": "2550200"
  },
  {
    "text": "And the way this theorem\nis proved is basically-- so what this is saying is,\nif we take a point set--",
    "start": "2550200",
    "end": "2556890"
  },
  {
    "text": "arbitrary point set--\nbut then we re-randomize the x-coordinates-- leave the\ny-coordinates as they are--",
    "start": "2556890",
    "end": "2563350"
  },
  {
    "text": "then you can compute\nhow Wilber 2 behaves. Because now you have\na bunch of points,",
    "start": "2563350",
    "end": "2569730"
  },
  {
    "text": "and you're randomly\nshifting their x-coordinate. So it's like if you're\nrandomly bouncing around an x",
    "start": "2569730",
    "end": "2578069"
  },
  {
    "text": "and you're interested\nin this envelope on the left and the right,\nyou want to know basically how many times--",
    "start": "2578070",
    "end": "2583605"
  },
  {
    "text": " I guess since I last\naccessed p, which is here.",
    "start": "2583605",
    "end": "2591950"
  },
  {
    "text": "We didn't do that here, but\nin the working set bound that's part of the deal. ",
    "start": "2591950",
    "end": "2600960"
  },
  {
    "text": "If you look on the\nleft side, it's like how many times\ndoes the max change.",
    "start": "2600960",
    "end": "2606060"
  },
  {
    "text": "And you may know if\nyou n random numbers and you want to know how many\ntimes does the max changes",
    "start": "2606060",
    "end": "2613530"
  },
  {
    "text": "as I go left to right,\nas I take larger and larger prefixes\nof those n numbers, the answer is log\nn in expectation.",
    "start": "2613530",
    "end": "2620609"
  },
  {
    "text": "Because the more points you\nhave, the less and less likely it is for the max to change.",
    "start": "2620610",
    "end": "2626240"
  },
  {
    "text": "So basically, you show\nthe expected Wilber",
    "start": "2626240",
    "end": "2631880"
  },
  {
    "text": "2 of a point over\nthis randomization",
    "start": "2631880",
    "end": "2637200"
  },
  {
    "text": "is theta log ti, where ti\nis the working set bound.",
    "start": "2637200",
    "end": "2643750"
  },
  {
    "text": "And so, that gives\nyou the theorem. This gives you a lower bound\nof the working set bound.",
    "start": "2643750",
    "end": "2650664"
  },
  {
    "text": "We have upper bounds of\nthe working set bound, and therefore that's OPT. So that's just a\nvery quick sketch.",
    "start": "2650664",
    "end": "2657911"
  },
  {
    "text": "If you're interested,\ncheck out the paper.  That's unfortunately all we\nknow what to do with Wilber 2.",
    "start": "2657911",
    "end": "2665865"
  },
  {
    "text": "But there's this\nother bound, Wilber 1, which seems less good yet we\ncan do a lot more with it.",
    "start": "2665865",
    "end": "2673030"
  },
  {
    "text": "So let me go to that. ",
    "start": "2673030",
    "end": "2694470"
  },
  {
    "text": "It's a lot easier to analyze\nalgorithms with respect to Wilber 1.",
    "start": "2694470",
    "end": "2700440"
  },
  {
    "text": "What's Wilber 1?  We're going to fix something\ncalled a lower bound tree.",
    "start": "2700440",
    "end": "2709870"
  },
  {
    "text": "I'm going to call it\nbecause it's basically going to be a perfect\nbinary tree on my keys.",
    "start": "2709870",
    "end": "2716515"
  },
  {
    "text": " This tree never changes. That's why I say fix.",
    "start": "2716515",
    "end": "2722320"
  },
  {
    "text": "It is not the binary search\ntree you're looking for. It is not the binary search\ntree that you're interested in.",
    "start": "2722320",
    "end": "2729040"
  },
  {
    "text": "It's just a thing\nto think about.  Now, for each node\nof that tree--",
    "start": "2729040",
    "end": "2741400"
  },
  {
    "text": "let's look at this node,\nI'll give the node a name, y. ",
    "start": "2741400",
    "end": "2747880"
  },
  {
    "text": "So here's y.  There's the left subtree\nof y, and there's",
    "start": "2747880",
    "end": "2753960"
  },
  {
    "text": "the right subtree of y. These are a bunch of keys. There's keys that\nare to the left of y.",
    "start": "2753960",
    "end": "2759390"
  },
  {
    "text": "There's keys to the right of y. There's keys\noutside the subtree. We're going to ignore those.",
    "start": "2759390",
    "end": "2764880"
  },
  {
    "text": "I want to look at the accesses\nto these keys and accesses to these keys and see\nhow many times do I",
    "start": "2764880",
    "end": "2770220"
  },
  {
    "text": "switch between left and right. So count the number\nof alternations--",
    "start": "2770220",
    "end": "2779730"
  },
  {
    "text": "so very similar in\nspirit to Wilber 2, it's just relative\nto this weird tree, which is kind of arbitrary--",
    "start": "2779730",
    "end": "2786045"
  },
  {
    "text": " in the access sequence--\nwhich is x1 up to xn--",
    "start": "2786045",
    "end": "2794880"
  },
  {
    "text": "between left and\nright subtrees of y",
    "start": "2794880",
    "end": "2808019"
  },
  {
    "text": "So we're going to ignore\naccesses to y itself. We're going to ignore\naccesses to keys outside of y.",
    "start": "2808020",
    "end": "2813240"
  },
  {
    "text": "Just look at how many times\ndo I switch between x and y. That's a lower bound.",
    "start": "2813240",
    "end": "2818322"
  },
  {
    "text": "That's the claim. ",
    "start": "2818322",
    "end": "2829550"
  },
  {
    "text": "It's a lower bound\nfor the same reason we use the independent\nrectangle lower bound.",
    "start": "2829550",
    "end": "2834800"
  },
  {
    "text": "And the claim is, if you\nlook at these alternations, draw the corresponding\nrectangles--",
    "start": "2834800",
    "end": "2840369"
  },
  {
    "start": "2840370",
    "end": "2846170"
  },
  {
    "text": "so over here, we\nhad a vertical line which corresponded to the key,\nand we see how many times do we cross the line.",
    "start": "2846170",
    "end": "2852020"
  },
  {
    "text": "Basically, the same thing\nover here except now",
    "start": "2852020",
    "end": "2858874"
  },
  {
    "text": "there's one big vertical line\nthat corresponds to the root node, then there's some\nvertical lines that correspond to this\nnode and this node,",
    "start": "2858874",
    "end": "2865670"
  },
  {
    "text": "and you're interested\nin the access sequence. How many times-- let's do some\nkind of access sequence like",
    "start": "2865670",
    "end": "2871591"
  },
  {
    "text": "this--  these are our points--",
    "start": "2871591",
    "end": "2876920"
  },
  {
    "start": "2876920",
    "end": "2882589"
  },
  {
    "text": "and you just look at what\nlines are you crossing. ",
    "start": "2882590",
    "end": "2888830"
  },
  {
    "text": "So like this crosses\nthe big line. So that's going to be one\nalternation between left and right here.",
    "start": "2888830",
    "end": "2894157"
  },
  {
    "text": "Here's another alternation\nbetween left and right. Here is another alternation\nbetween left and right. Here's another alternation\nbetween left and right.",
    "start": "2894157",
    "end": "2902750"
  },
  {
    "text": "And one more. So for the big line,\nfor the root node, that's how many times you\ncross between left and right",
    "start": "2902750",
    "end": "2909530"
  },
  {
    "text": "relative to the root. Then, for the left\nsubtree the root, there's one crossing here.",
    "start": "2909530",
    "end": "2916119"
  },
  {
    "text": "There is one crossing\nhere, one crossing here. ",
    "start": "2916120",
    "end": "2922940"
  },
  {
    "text": "These are touching, but\nthey're not satisfied. So it's OK. The claim is all these\nrectangles will be independent.",
    "start": "2922940",
    "end": "2928540"
  },
  {
    "text": "Again, I won't prove that\nformally, but it's true. ",
    "start": "2928540",
    "end": "2935010"
  },
  {
    "text": "OK? Rough sketch. So that's Wilber 1.",
    "start": "2935010",
    "end": "2940250"
  },
  {
    "text": "It's, again, an independent\nrectangle lower bound. It's a little weird because\nit depends on this tree. You could choose it to\nbe a nice perfect tree.",
    "start": "2940250",
    "end": "2946860"
  },
  {
    "text": "You could choose it to\nbe a different tree. You'll get a different\nlower bound each time. So of course, you take\nthe max over all trees.",
    "start": "2946860",
    "end": "2952260"
  },
  {
    "text": "That will give you the\nbiggest Wilber 1 lower bound. We don't know much about that\nbiggest Wilber 1 lower bound.",
    "start": "2952260",
    "end": "2961140"
  },
  {
    "text": "I guess you could ask the\nfollowing open question.",
    "start": "2961140",
    "end": "2966960"
  },
  {
    "text": "Is it true that for\nevery access sequence there exists a tree p such\nthat Wilber 1 is theta OPT?",
    "start": "2966960",
    "end": "2977700"
  },
  {
    "text": "Or is theta Wilber\n2 or something? Wilber 2 is a single quantity. You compute it.",
    "start": "2977700",
    "end": "2983005"
  },
  {
    "text": "It gives you a bound. Wilber 1, it depends on this p. Maybe if you choose the\nbest p for your sequence",
    "start": "2983005",
    "end": "2988950"
  },
  {
    "text": "you get the right answer. But it's definitely the case\nthat Wilber 1 for a fixed p",
    "start": "2988950",
    "end": "2995550"
  },
  {
    "text": "is not the right answer. I recall that's easy to prove.",
    "start": "2995550",
    "end": "3000740"
  },
  {
    "start": "3000740",
    "end": "3006580"
  },
  {
    "text": "Well, maybe we'll\ncome back to that. Yeah, question? AUDIENCE: So how\ndo you construct",
    "start": "3006580",
    "end": "3011686"
  },
  {
    "text": "this lower bound tree? Like, is it just-- ERIK DEMAINE: I'll tell you\nwhat we're going to use-- the question is how\ndo we construct p.",
    "start": "3011686",
    "end": "3017883"
  },
  {
    "text": "You can make it\nwhatever you want. What we're going to use\nis the perfect tree, which is sort of unique.",
    "start": "3017884",
    "end": "3023730"
  },
  {
    "text": "It's kind of arbitrary,\nbut it works. It has the property that\nits height is log n.",
    "start": "3023730",
    "end": "3028950"
  },
  {
    "text": "That's all we need. We're going to use that\nto get tango trees. Other questions?",
    "start": "3028950",
    "end": "3034500"
  },
  {
    "text": "All right. Let me briefly mention\na fun access sequence. ",
    "start": "3034500",
    "end": "3045315"
  },
  {
    "text": "You may recognize this sequence. This would be in-order\ntraversal in binary.",
    "start": "3045315",
    "end": "3052080"
  },
  {
    "text": "But if I take\nthese bit sequences and read them backwards, then\nI get 0, 4, 2, 6, 1, 5, 3, 7.",
    "start": "3052080",
    "end": "3069311"
  },
  {
    "text": "This is the number 0\nthrough 7 in a funny order. It's called the bit\nreversal sequence. If you access 0, 4, 2, 6, 1, 5,\n3, 7 in a perfect binary tree,",
    "start": "3069311",
    "end": "3084000"
  },
  {
    "text": "it maximizes Wilber 1. So in-order traversal--\n0, 1, 2, 3, 4, 5, 6.",
    "start": "3084000",
    "end": "3096960"
  },
  {
    "text": "Ignore 7. There's not 7 in this tree. ",
    "start": "3096960",
    "end": "3103135"
  },
  {
    "text": "I do 0, 4-- if you look at the\nroot, alternate left,",
    "start": "3103135",
    "end": "3108640"
  },
  {
    "text": "right, left, right, left, right.",
    "start": "3108640",
    "end": "3113819"
  },
  {
    "text": "Because the high-order bit\nis switching every time, and so whether I go to\nthe left of the tree here or the right of the tree,\nit's switching every time.",
    "start": "3113820",
    "end": "3120780"
  },
  {
    "text": "And also, if you\nlook in any subtree, like when I'm accessing things\nwithin the subtree of one, it alternates 0, too.",
    "start": "3120780",
    "end": "3126530"
  },
  {
    "text": "It's too small a tree to\nreally see that happening, but it's true. And so, if you do\nthis for k bits,",
    "start": "3126530",
    "end": "3135380"
  },
  {
    "text": "n equals 2 to the k roughly. And Wilber 1, the\nlower bound, is",
    "start": "3135380",
    "end": "3141680"
  },
  {
    "text": "log n per [INAUDIBLE] because\nthe every access alternates.",
    "start": "3141680",
    "end": "3147210"
  },
  {
    "text": "So if you look at\na subtree, whatever the size of that\nsubtree is, that's how many alternations there are.",
    "start": "3147210",
    "end": "3153060"
  },
  {
    "text": "And so, number of\nalternations is theta n log n",
    "start": "3153060",
    "end": "3158070"
  },
  {
    "text": "because it's the sum over all\nnodes of their subtree sizes. And so OPT is theta n log n.",
    "start": "3158070",
    "end": "3168300"
  },
  {
    "text": "We know we can achieve n log n-- this is to do n accesses--",
    "start": "3168300",
    "end": "3173520"
  },
  {
    "text": "we know we can n log n with\na red-black tree or whatever, but there's actually\na lower bound of n log n, meaning all\nbinary search trees--",
    "start": "3173520",
    "end": "3179730"
  },
  {
    "text": "if you're given this\naccess sequence, doesn't matter what you're\ndoing-- you have to pay n log n.",
    "start": "3179730",
    "end": "3184770"
  },
  {
    "text": "It's kind of cool. A little side effect-- that's Wilber's paper ended.",
    "start": "3184770",
    "end": "3189840"
  },
  {
    "text": "It's like, hey, cool, can\nfind one access sequence that is bad for everybody.",
    "start": "3189840",
    "end": "3197340"
  },
  {
    "text": "But now we're going\nto use Wilber 1 to get one binary search\ntree that's pretty",
    "start": "3197340",
    "end": "3202890"
  },
  {
    "text": "good for all access sequences. Pretty good meaning within a\nlog log n factor of optimal.",
    "start": "3202890",
    "end": "3208590"
  },
  {
    "start": "3208590",
    "end": "3231280"
  },
  {
    "text": "And this is tango\ntrees, which would",
    "start": "3231280",
    "end": "3239152"
  },
  {
    "text": "be log log n competitive\nonline binary search trees.",
    "start": "3239152",
    "end": "3244400"
  },
  {
    "text": " Why are they called tango trees?",
    "start": "3244400",
    "end": "3251269"
  },
  {
    "text": "People made up all sorts of\nreasons, but I can tell you-- because I was there-- they were invented mostly\non a flight from New York",
    "start": "3251270",
    "end": "3260810"
  },
  {
    "text": "to Buenos Aires, which\nis the center of tango. I bought this T-shirt\nI think the day after.",
    "start": "3260810",
    "end": "3266900"
  },
  {
    "text": "And then that week,\nwe wrote the paper, and that was tango trees. So no particular reason,\nbut it sounds good.",
    "start": "3266900",
    "end": "3275630"
  },
  {
    "text": "Always good to have a cool name. So the secret is revealed. The true meaning of tango trees\nis nothing, but you we'll see.",
    "start": "3275630",
    "end": "3286099"
  },
  {
    "text": "So how do they work? It's very simple. Basically, we take Wilber\n1 and we simulate it.",
    "start": "3286100",
    "end": "3295039"
  },
  {
    "text": "So let me be more precise. There's one key idea, which\nis to look at the preferred",
    "start": "3295040",
    "end": "3305870"
  },
  {
    "text": "child of a node. ",
    "start": "3305870",
    "end": "3315870"
  },
  {
    "text": "I'm going to say the\npreferred child is left. Let's see, node y in p.",
    "start": "3315870",
    "end": "3323817"
  },
  {
    "text": "It's left if we accessed some\nnode in the left subtree of y",
    "start": "3323818",
    "end": "3338060"
  },
  {
    "text": "most recently. ",
    "start": "3338060",
    "end": "3343300"
  },
  {
    "text": "It's the right\nchild if we accessed something in the right\nsubtree most recently.",
    "start": "3343300",
    "end": "3348960"
  },
  {
    "text": "So we're just looking at left\nand right subtree accesses, what was most recent?",
    "start": "3348960",
    "end": "3354240"
  },
  {
    "text": "There is a special case\nin the beginning, which is you don't have a preferred\nchild because you haven't accessed either\nleft or right yet.",
    "start": "3354240",
    "end": "3360710"
  },
  {
    "text": "So this is if no access\nto the left or right yet.",
    "start": "3360710",
    "end": "3372365"
  },
  {
    "text": "So that just happens\nin the beginning. Once you've touched\neverything, everybody will have a left or\nright preferred child.",
    "start": "3372365",
    "end": "3379970"
  },
  {
    "text": "So this is just what was\nyour most recent child. This is like a parent\nwith a very short memory.",
    "start": "3379970",
    "end": "3386580"
  },
  {
    "text": "Just whichever child I\nmost recently talked to, that is my preferred\nchild at the moment.",
    "start": "3386580",
    "end": "3394292"
  },
  {
    "text": "It's kind of like\nI don't know when you're going to job interviews. You know, the most\nrecent interview",
    "start": "3394292",
    "end": "3400160"
  },
  {
    "text": "is the one you remember\nmost fondly and so, ah, you like that one the\nbest independent of which is the coolest.",
    "start": "3400160",
    "end": "3405569"
  },
  {
    "text": "So let me draw a picture. And I guess I'm going\nto draw a big picture--",
    "start": "3405570",
    "end": "3412520"
  },
  {
    "text": "my favorite-- a perfectly\nbalanced binary search tree",
    "start": "3412520",
    "end": "3420121"
  },
  {
    "text": "with eight leaves. And so now, suppose that every\nnode has a preferred child.",
    "start": "3420121",
    "end": "3430840"
  },
  {
    "text": "Let's say they all do\njust because it makes a more interesting picture. ",
    "start": "3430840",
    "end": "3437240"
  },
  {
    "text": "I'm going to draw that\nwith a big fat arrow. And now, what does that do?",
    "start": "3437240",
    "end": "3443390"
  },
  {
    "text": "It decomposes our tree. This is the perfect tree. p is\ngoing to be perfectly balanced, log n height.",
    "start": "3443390",
    "end": "3448700"
  },
  {
    "text": "It could be any\nlog n height tree, but we'll make it perfect. And it decomposes\nthat tree into paths.",
    "start": "3448700",
    "end": "3458840"
  },
  {
    "text": "And there's a path here. You just keep following parent\npointers, you get a path--",
    "start": "3458840",
    "end": "3463880"
  },
  {
    "text": "not parent pointers,\npreferred pointers. It's also true if you follow\nparent pointers you get a path, but they'll overlap each other.",
    "start": "3463880",
    "end": "3469160"
  },
  {
    "text": "You follow preferred\nchild pointers, you get non-overlapping paths. ",
    "start": "3469160",
    "end": "3474515"
  },
  {
    "text": "There they are. We also get these singleton\npaths at the leaves. Some of the leaves are\nin singleton paths.",
    "start": "3474515",
    "end": "3481170"
  },
  {
    "text": "These are called\npreferred paths. ",
    "start": "3481170",
    "end": "3492820"
  },
  {
    "text": "Why do I care? So this tells me the most\nrecently accessed element",
    "start": "3492820",
    "end": "3499860"
  },
  {
    "text": "was somebody on this path. I don't quite know who. It could have been this\none, and that would say,",
    "start": "3499860",
    "end": "3504910"
  },
  {
    "text": "OK, this is the most\nrecent direction we went through all of them. Let's say it's that one. Now suppose I access this node.",
    "start": "3504910",
    "end": "3510280"
  },
  {
    "text": "What does that tell me? Well, if I most recently\naccessed left here and now I'm accessing the\nright, if you look at this node,",
    "start": "3510280",
    "end": "3518650"
  },
  {
    "text": "the Wilber 1 bound goes up by 1. Because I just accessed left. Now I accessed right.",
    "start": "3518650",
    "end": "3524170"
  },
  {
    "text": "Also, if I access this node,\nthis guy, his Wilber 1 bound goes up by 1 because now\nhe's going to the right,",
    "start": "3524170",
    "end": "3531430"
  },
  {
    "text": "whereas last time\nhe went to the left. Also, this node previously\nwent to the right and went to the left.",
    "start": "3531430",
    "end": "3537579"
  },
  {
    "text": "So Wilber 1 went up\nbecause of this edge, and it went up\nbecause of this edge.",
    "start": "3537580",
    "end": "3543920"
  },
  {
    "text": "In general, following\nnon-preferred edges, I can pay for because\nWilber 1 goes up by 1",
    "start": "3543920",
    "end": "3550240"
  },
  {
    "text": "every time I use a\nnon-preferred edge. This is another way to\nstate the Wilber 1 bound.",
    "start": "3550240",
    "end": "3555280"
  },
  {
    "text": "This is the cool thing. As long as I can go\nthrough a path quickly--",
    "start": "3555280",
    "end": "3560350"
  },
  {
    "text": " ideally, if I could do\nit in constant time, this would be a\ndynamically-optimal binary",
    "start": "3560350",
    "end": "3567460"
  },
  {
    "text": "search tree. If I could instantly transport\nto where I need to go on a path and then jump off the\npath to the next path,",
    "start": "3567460",
    "end": "3572680"
  },
  {
    "text": "that I can pay for-- I can spend constant\ntime to do that--",
    "start": "3572680",
    "end": "3578589"
  },
  {
    "text": "then I'd be OK. I'm not going to be able\nto do it in constant time, but I'm going to be able\nto do it log log n time.",
    "start": "3578590",
    "end": "3584935"
  },
  {
    "text": "I'm going to be able to jump\nthrough a path in log log n time, and then jump-- figure out where I need\nto diverge from the path",
    "start": "3584935",
    "end": "3591730"
  },
  {
    "text": "because maybe I'm\naccessing this guy. Jump to the next path. Do that in log log n time. I've got to update\nthe path structure",
    "start": "3591730",
    "end": "3597640"
  },
  {
    "text": "because now the preferred\nchild is to the right. It used to be to the left. So I've got to do something that\nwill only cost log log n time.",
    "start": "3597640",
    "end": "3605886"
  },
  {
    "text": "If I can do that, the lower\nbound is the number of edges. The upper bound is the\nnumber of non-preferred edges",
    "start": "3605886",
    "end": "3611390"
  },
  {
    "text": "times log log n. So we get a lower\nbound Wilber 1,",
    "start": "3611390",
    "end": "3621190"
  },
  {
    "text": "which is going to be\nequal to the number of non-preferred edges. ",
    "start": "3621190",
    "end": "3629099"
  },
  {
    "text": "And we're going to\nget an upper bound through tango trees,\nwhich is going",
    "start": "3629099",
    "end": "3635950"
  },
  {
    "text": "to be order number of\nnon-preferred edges times log log n.",
    "start": "3635950",
    "end": "3642079"
  },
  {
    "text": "OK. Why is it log log n? Because each of these paths\nhas length only log n.",
    "start": "3642080",
    "end": "3647710"
  },
  {
    "text": "So put them in a balanced\nbinary search tree, and it has height log log n.",
    "start": "3647710",
    "end": "3653350"
  },
  {
    "text": "So take these paths,\nsquish them into a tree-- it's hard, I don't know\nwhich way you're squishing.",
    "start": "3653350",
    "end": "3661430"
  },
  {
    "text": "It says log n depth. It's a path. I'm going to fold\nit into a tree. So it has height only log log n.",
    "start": "3661430",
    "end": "3667450"
  },
  {
    "text": "Then I can jump around\nit in log log n time. That's the idea\nwith tango trees. You're basically done. A few details in how they work.",
    "start": "3667450",
    "end": "3675550"
  },
  {
    "text": "I don't want to spend\ntoo much time on them, but let's go through\nsome of them. ",
    "start": "3675550",
    "end": "3702410"
  },
  {
    "text": "So we're going to store\neach preferred path",
    "start": "3702410",
    "end": "3713930"
  },
  {
    "text": "as an auxiliary\ntree, which is just--",
    "start": "3713930",
    "end": "3719839"
  },
  {
    "text": "I don't know-- a\nred-black tree, say. ",
    "start": "3719840",
    "end": "3727799"
  },
  {
    "text": "What is the red-black\ntree sorted by? I don't have a choice. Whatever I do has to\nbe a binary search",
    "start": "3727800",
    "end": "3733500"
  },
  {
    "text": "tree among the original keys. So if I take these items\nand I just throw them into a red-black tree, they\nwill be sorted by whatever",
    "start": "3733500",
    "end": "3741854"
  },
  {
    "text": "their x-coordinate is. So this is the max,\nthis is the min. This is somewhere in between. This is to the left of that.",
    "start": "3741854",
    "end": "3748320"
  },
  {
    "text": "So the order is a little weird. I'd really like to store\nthem sorted by depth, but I can't do that.",
    "start": "3748320",
    "end": "3753390"
  },
  {
    "text": "They are sorted by\ntheir key values. ",
    "start": "3753390",
    "end": "3758430"
  },
  {
    "text": "Now, what do I need to do\nwith these auxiliary trees? I mean, the basic thing\nI do is a search, right?",
    "start": "3758430",
    "end": "3766110"
  },
  {
    "text": "I'm searching for a key. It's a binary search tree,\nso I can still do a search. I can figure out this\ntree gets represented",
    "start": "3766110",
    "end": "3772740"
  },
  {
    "text": "as something more like this. That would be a nicely balanced\nversion of these four nodes.",
    "start": "3772740",
    "end": "3779390"
  },
  {
    "text": "So if I called them, I\ndon't know, a, b, c, d.",
    "start": "3779390",
    "end": "3785250"
  },
  {
    "text": "That's their sorted order. It's going to be a, b, c, d.",
    "start": "3785250",
    "end": "3790289"
  },
  {
    "text": "That's also their\nsorted order over here. So if I search for my\nkey, I'll figure out, oh, do I fall off here, here,\nhere, here, or here?",
    "start": "3790290",
    "end": "3798089"
  },
  {
    "text": "Now, each of those\ncorresponds to another path I need to visit. So if I fall off\nthe left side of a,",
    "start": "3798090",
    "end": "3803730"
  },
  {
    "text": "then I should have a\npointer to this structure. If I fall off the--",
    "start": "3803730",
    "end": "3809485"
  },
  {
    "text": "I guess these two are empty. Those correspond to\nthese two places.",
    "start": "3809486",
    "end": "3815819"
  },
  {
    "text": "If I fall off here, the right\nside of c, which is now here,",
    "start": "3815820",
    "end": "3820920"
  },
  {
    "text": "this is going to be a\npointer to my new structure which corresponds to this one.",
    "start": "3820920",
    "end": "3828570"
  },
  {
    "text": "And then this one is going to\ncorrespond to all this stuff-- well, in particular this one. ",
    "start": "3828570",
    "end": "3835960"
  },
  {
    "text": "It's a little hard to draw this\npicture, but you get the idea. You just rebalance\neach of these things.",
    "start": "3835960",
    "end": "3842220"
  },
  {
    "text": "Keep that the pointers\nbetween the preferred paths just as they were. This is uniquely defined\nhow to do this because it's",
    "start": "3842220",
    "end": "3848940"
  },
  {
    "text": "a binary search tree. So leaves point to other--",
    "start": "3848940",
    "end": "3860450"
  },
  {
    "text": "let's call them child\nauxiliary trees. It uniquely defines\nwhich ones they",
    "start": "3860450",
    "end": "3866640"
  },
  {
    "text": "have to point to in\norder to still navigate the whole structure. So it's a weird way of\nrebalancing your tree.",
    "start": "3866640",
    "end": "3873810"
  },
  {
    "text": "And the point is each of these\nred-black trees has height log log n because the number of\nnodes in it is only log n.",
    "start": "3873810",
    "end": "3879750"
  },
  {
    "text": "And that gives us the bound. ",
    "start": "3879750",
    "end": "3895619"
  },
  {
    "text": "Now, key thing to think about is\nwhat happens when you change--",
    "start": "3895620",
    "end": "3903330"
  },
  {
    "text": "I said I have to\nbe able to achieve number of non-preferred\nedges times log log n. So fine.",
    "start": "3903330",
    "end": "3908490"
  },
  {
    "text": "I do a log log n search in here. Maybe I decide I\nhave to go off here. Then I do a log log\nn search in here.",
    "start": "3908490",
    "end": "3914589"
  },
  {
    "text": "And then maybe I\nhave to go this way. So number of\nnon-preferred edges was 2. I did two, maybe three searches.",
    "start": "3914589",
    "end": "3920440"
  },
  {
    "text": "Fine. It's going to be number\nof non-preferred edges plus 1 time log log n. No big deal.",
    "start": "3920440",
    "end": "3925980"
  },
  {
    "start": "3925980",
    "end": "3933600"
  },
  {
    "text": "Now I have to update. Now this is the preferred\nedge from the root, and this is the preferred\nedge from this node.",
    "start": "3933600",
    "end": "3941070"
  },
  {
    "text": "How do I update preferred edges? That's something to think about. So I've got a path represented\nby a red-black tree.",
    "start": "3941070",
    "end": "3949480"
  },
  {
    "text": "And now I fall off here, and\nthere's another path here. I need to convert this into\na path that goes like this",
    "start": "3949480",
    "end": "3960960"
  },
  {
    "text": "and then does this. And separately, a\npath that does this. That's the new version.",
    "start": "3960960",
    "end": "3967110"
  },
  {
    "text": "How do I do that? Conceptually, it's\npretty simple. I want to cut the path here\nand then rejoin along there,",
    "start": "3967110",
    "end": "3978630"
  },
  {
    "text": "like that. So conceptually, if things\nwere stored by depth,",
    "start": "3978630",
    "end": "3983700"
  },
  {
    "text": "this is what we'd call a\nsplit and a concatenate. You should know this from\nregular binary search trees. This is a standard exercise\nfor red-black trees.",
    "start": "3983700",
    "end": "3991530"
  },
  {
    "text": "Given a query, x, you can\ncut this tree into two halves and get two red-black trees,\nwhich represent everything",
    "start": "3991530",
    "end": "3999000"
  },
  {
    "text": "to the left of x and\neverything to the right of x. Similarly, given\ntwo trees that are",
    "start": "3999000",
    "end": "4004499"
  },
  {
    "text": "sorted like this where\nall the elements are less than all the\nelements over here, I can concatenate them\ninto one red-black tree.",
    "start": "4004499",
    "end": "4010070"
  },
  {
    "text": "And all of these\ntake log n time, where n is the number of nodes. Here, that would\nbe log log n time.",
    "start": "4010070",
    "end": "4016790"
  },
  {
    "text": "In this world, it's\nnot quite so simple because things are\nnot sorted by depth. They're sorted by key value.",
    "start": "4016790",
    "end": "4022670"
  },
  {
    "text": "But it's not so bad. Because, if you look at some\npath and you want to say,",
    "start": "4022670",
    "end": "4032730"
  },
  {
    "text": "OK, I want everything\nthat's below this key value",
    "start": "4032730",
    "end": "4041150"
  },
  {
    "text": "or something, then that's\nthe same as saying, well, take everything that is\nwithin this interval of keys.",
    "start": "4041150",
    "end": "4047790"
  },
  {
    "text": "So it's strictly\nbetween here and here. ",
    "start": "4047790",
    "end": "4052900"
  },
  {
    "text": "Let me redraw this slightly. ",
    "start": "4052900",
    "end": "4065020"
  },
  {
    "text": "So if you look at the nodes\nof depth greater than d,",
    "start": "4065020",
    "end": "4074312"
  },
  {
    "text": "I want to cut off\neverybody that's deeper than a\nparticular spot in order to do this kind of change.",
    "start": "4074312",
    "end": "4081760"
  },
  {
    "text": "These are equal to nodes\nin subtree of that.",
    "start": "4081760",
    "end": "4092970"
  },
  {
    "text": "So let me give it a name. Let's say I want to cut here.",
    "start": "4092970",
    "end": "4098830"
  },
  {
    "text": "So I'm going to\nlook at this node y. This is nodes in\nthe subtree of y.",
    "start": "4098830",
    "end": "4104580"
  },
  {
    "text": "All of the nodes\nthat are below y are obviously going to have\nsmaller depth than that path.",
    "start": "4104580",
    "end": "4110790"
  },
  {
    "text": "This is nodes in a path.  And nodes in a subtree\nare equal to nodes",
    "start": "4110790",
    "end": "4121920"
  },
  {
    "text": "with keys in the\nmin of that subtree",
    "start": "4121920",
    "end": "4130109"
  },
  {
    "text": "to the max of that tree. It's an interval. So what do I do? I split at min of y.",
    "start": "4130109",
    "end": "4136589"
  },
  {
    "text": "I split at max of y. That gives me the interval. So here's the picture. I have a tree.",
    "start": "4136590",
    "end": "4142290"
  },
  {
    "text": "I want to cut out this\ninterval of nodes. This is like range\nqueries kind of in 1D.",
    "start": "4142290",
    "end": "4147299"
  },
  {
    "text": "So I split here. I split here. What I will have\nare the things I care about, the things\nto the left of it",
    "start": "4147300",
    "end": "4153159"
  },
  {
    "text": "and the things to\nthe right of it. What I wanted was this\nand everything else. How do I do that? I concatenate-- this is y.",
    "start": "4153160",
    "end": "4164009"
  },
  {
    "text": "This is in the interval\nmin of y to max of y.",
    "start": "4164010",
    "end": "4172380"
  },
  {
    "text": "So I wanted those guys. Those are the nodes\nthat are deeper than d. I also want the nodes\nall together that are less deep than d.",
    "start": "4172380",
    "end": "4178870"
  },
  {
    "text": "That's these nodes\nand these nodes. So I concatenate\nthese together, get one big tree that represents\nthings with depth less than d.",
    "start": "4178870",
    "end": "4185969"
  },
  {
    "text": "These are the things of\ndepth greater than d. OK? So I do two splits,\none concatenate,",
    "start": "4185970",
    "end": "4192810"
  },
  {
    "text": "and that simulates this\nkind of cut operation. Similarly, if I want to\ndo a joint operation,",
    "start": "4192810",
    "end": "4198780"
  },
  {
    "text": "it's a constant number of splits\nand concatenates, and I'm done. Just dealing with the fact that\nthings are in the wrong order",
    "start": "4198780",
    "end": "4203988"
  },
  {
    "text": "here, but it's not so bad. ",
    "start": "4203988",
    "end": "4210510"
  },
  {
    "text": "One more thing, which is-- I basically described\nthe overall structure",
    "start": "4210510",
    "end": "4217100"
  },
  {
    "text": "as a tree of auxiliary trees. In reality, we're in the\nbinary search tree model.",
    "start": "4217100",
    "end": "4222680"
  },
  {
    "text": "We can only have one tree. Not so hard, though. I mean, basically,\nyou want one tree that",
    "start": "4222680",
    "end": "4230060"
  },
  {
    "text": "represents lots of trees that\nare kind of pasted together. So to do that, you\njust mark each node",
    "start": "4230060",
    "end": "4236900"
  },
  {
    "text": "that transitions from\none tree to the next. So each node will say, I am the\nroot of a new auxiliary tree",
    "start": "4236900",
    "end": "4242809"
  },
  {
    "text": "or just say, no, I'm part\nof the same auxiliary tree as my parent. ",
    "start": "4242810",
    "end": "4249530"
  },
  {
    "text": "And then you have to\ndefine these kinds of split and concatenate operations in\nthis setting where you have",
    "start": "4249530",
    "end": "4255080"
  },
  {
    "text": "a tree embedded inside a tree. But you just ignore\nall the nodes that are claimed to be\npart of another tree. Just pretend they weren't\nthere, and it works.",
    "start": "4255080",
    "end": "4262290"
  },
  {
    "text": "So a little hand-wavy there, but\nit's kind of a tedious detail. You can stick all these\ntrees into one tree",
    "start": "4262290",
    "end": "4268610"
  },
  {
    "text": "just by marking these roots. And that's tango trees.",
    "start": "4268610",
    "end": "4274976"
  },
  {
    "text": "I already spoiled the climax,\nwhich is this log log n thing, but it's pretty obvious\nhow to get there.",
    "start": "4274976",
    "end": "4282220"
  },
  {
    "text": "It's just a lot of\ndetails to actually do it. We're just taking\nthe Wilber 1 bound, recasting it in terms of\nthis preferred path thing",
    "start": "4282220",
    "end": "4290070"
  },
  {
    "text": "where it's just the\nnon-preferred edges. Or the non-preferred edges\nare what Wilber 1 counts,",
    "start": "4290070",
    "end": "4295600"
  },
  {
    "text": "and so we can afford\nto spend log log n time for each of them. And the paths themselves\nonly have log n nodes,",
    "start": "4295600",
    "end": "4301100"
  },
  {
    "text": "so you can search through them\nin log log n time pretty easy. This also shows you\nwhy Wilber 1 is not",
    "start": "4301100",
    "end": "4307110"
  },
  {
    "text": "a good bound with a fixed tree. Because here are log n nodes.",
    "start": "4307110",
    "end": "4313730"
  },
  {
    "text": "I can just sit there all day\nbouncing around all of them in random order.",
    "start": "4313730",
    "end": "4319322"
  },
  {
    "text": "I'm definitely going to need\nlog log n time to access them, but Wilber 1 is not\nchanging at all.",
    "start": "4319322",
    "end": "4324460"
  },
  {
    "text": "So Wilber 1 stays\nconstant, like 0. I had to warm it up, but\nafter I test everything,",
    "start": "4324460",
    "end": "4331140"
  },
  {
    "text": "I can just sit there and bounce\naround these guys randomly. I've got to spend log\nlog n time to do that,",
    "start": "4331140",
    "end": "4336730"
  },
  {
    "text": "but Wilber 1 doesn't\njustify it for me. Wilber 2 will go up, but\nWilber 1 with this tree?",
    "start": "4336730",
    "end": "4342719"
  },
  {
    "text": "It's kind of lame. So this is the best\ntango trees could hope to do using Wilber 1.",
    "start": "4342720",
    "end": "4348790"
  },
  {
    "text": " I would guess that tango\ntrees are a log log factor away from optimal, though\nwe don't know that for sure.",
    "start": "4348790",
    "end": "4357400"
  },
  {
    "text": "But greedy we're still\npretty sure is good. It should be a constant\nfactor away from optimal.",
    "start": "4357400",
    "end": "4363031"
  },
  {
    "text": "So I want to talk a\nlittle bit about that. ",
    "start": "4363031",
    "end": "4368170"
  },
  {
    "text": "There's one thing\non this outline we haven't talked about. We did independent rectangles. We did Wilber 1 and 2.",
    "start": "4368170",
    "end": "4373390"
  },
  {
    "text": "We saw applications of them\nin particular tango trees. One thing we haven't\ndone is Signed Greedy. ",
    "start": "4373390",
    "end": "4381617"
  },
  {
    "text": "So let's do Signed Greedy.  Still left here is we\nhave two ways to choose",
    "start": "4381617",
    "end": "4390260"
  },
  {
    "text": "rectangles,\nindependent rectangles. They're different. It would be kind of nice\nto know what the best",
    "start": "4390260",
    "end": "4395690"
  },
  {
    "text": "way to choose rectangles is. And we actually know that-- ",
    "start": "4395690",
    "end": "4405340"
  },
  {
    "text": "Signed Greedy. So there's two kinds\nof Signed Greedy. There's the plus sign\ngreedy, and there's",
    "start": "4405340",
    "end": "4411260"
  },
  {
    "text": "the minus sign greedy. ",
    "start": "4411260",
    "end": "4416640"
  },
  {
    "text": "How does plus greedy work? It's the same as\ngreedy, you just only look at plus rectangles.",
    "start": "4416640",
    "end": "4421969"
  },
  {
    "text": "Remember plus rectangles\nand minus rectangles. So let's look at our\nfavorite example here.",
    "start": "4421970",
    "end": "4429320"
  },
  {
    "text": "With greedy, I would sweep\nup, and every rectangle that was unsatisfied, I\nwould satisfy it.",
    "start": "4429320",
    "end": "4434390"
  },
  {
    "text": "Now I'm going to ignore\nminus rectangles, only look at plus rectangles.",
    "start": "4434390",
    "end": "4440219"
  },
  {
    "text": "So I see this rectangle,\nand I say, oh, I don't care because\nthat's a minus rectangle. Then I see this\none and this one.",
    "start": "4440220",
    "end": "4450880"
  },
  {
    "text": "I say, oh, those\nare plus rectangles. So I'm going to\nadd a point here. I'm going to add a point here.",
    "start": "4450880",
    "end": "4457190"
  },
  {
    "text": "Then I go up to here. I see this rectangle,\nwhich is a plus rectangle.",
    "start": "4457190",
    "end": "4463130"
  },
  {
    "text": "That's bad. So I've got to add a point. I see this minus rectangle\nI don't care about.",
    "start": "4463130",
    "end": "4469670"
  },
  {
    "text": "This is plus greedy. It does not satisfy the set. This rectangle\nnever got satisfied.",
    "start": "4469670",
    "end": "4475790"
  },
  {
    "text": "But it plus satisfies the set. If I do plus greedy, it\nwill be plus satisfied.",
    "start": "4475790",
    "end": "4482780"
  },
  {
    "text": "Every rectangle you draw\nhere, if it's plus rectangle, it's got another point in it. What's kind of nice,\nalso, is if you actually",
    "start": "4482780",
    "end": "4490430"
  },
  {
    "text": "draw the rectangles\nyou are satisfying-- maybe I'm use another color.",
    "start": "4490430",
    "end": "4495830"
  },
  {
    "text": " There was one rectangle here. There was one rectangle here.",
    "start": "4495830",
    "end": "4504650"
  },
  {
    "text": "And there was one\nrectangle here. That's a little awkward\nbecause they're not",
    "start": "4504650",
    "end": "4510170"
  },
  {
    "text": "on the original points. So I can change\nthem a little bit, maybe move this one down to here\nand move this one over to here.",
    "start": "4510170",
    "end": "4521052"
  },
  {
    "text": "You could say that\nthose rectangles came from those points. Then this is a set of\nindependent rectangles",
    "start": "4521052",
    "end": "4527670"
  },
  {
    "text": "on the original points. Maybe not totally\nobvious, but plus greedy",
    "start": "4527670",
    "end": "4534900"
  },
  {
    "text": "always gives an independent\nset of plus rectangles.",
    "start": "4534900",
    "end": "4549219"
  },
  {
    "text": "So it's a lower bound. It's not an upper bound because\nit's not satisfying the point set, but it's a lower bound.",
    "start": "4549220",
    "end": "4555550"
  },
  {
    "text": "I claim it's a very\ngood lower bound. ",
    "start": "4555550",
    "end": "4567420"
  },
  {
    "text": "It by itself might\nnot be great, but you have to consider both of them. So theorem is if I take the\nmax of plus greedy and minus",
    "start": "4567420",
    "end": "4586340"
  },
  {
    "text": "greedy--  each of them is lower\nbound, so the max",
    "start": "4586340",
    "end": "4592210"
  },
  {
    "text": "is a lower bound on optimal-- then this is within\na constant factor",
    "start": "4592210",
    "end": "4597760"
  },
  {
    "text": "of the biggest possible\nindependent rectangle lower bound. ",
    "start": "4597760",
    "end": "4611860"
  },
  {
    "text": "And so this is\nthe way you should choose independent rectangles. Run plus greedy. Run minus greedy. Take the best of the two.",
    "start": "4611860",
    "end": "4617587"
  },
  {
    "text": "That will always be\nwithin a constant factor of the best independent set\nof rectangles, factors like 4",
    "start": "4617587",
    "end": "4624015"
  },
  {
    "text": "or something in the worst case. So let me prove this to you. ",
    "start": "4624015",
    "end": "4632110"
  },
  {
    "text": "It's a kind of a weird argument.  I'm going to define\na new quantity.",
    "start": "4632110",
    "end": "4637765"
  },
  {
    "text": " Let's call this OPT x, I guess.",
    "start": "4637765",
    "end": "4643210"
  },
  {
    "text": " It's sort of like if you\nconsider plus rectangles",
    "start": "4643210",
    "end": "4651940"
  },
  {
    "text": "separately from minus\nrectangles, which is what we're doing. ",
    "start": "4651940",
    "end": "4672440"
  },
  {
    "text": "So I would like a point set-- first, I'd like a plus\nsatisfying point set,",
    "start": "4672440",
    "end": "4677620"
  },
  {
    "text": "and then I'd also like a\nminus satisfying point set. And then I take their union.",
    "start": "4677620",
    "end": "4683020"
  },
  {
    "text": "And I say the cost of that pair\nof plus satisfying and minus",
    "start": "4683020",
    "end": "4688340"
  },
  {
    "text": "satisfying is the\nsize of the union. So I get a bonus point if\nthey happen to overlap.",
    "start": "4688340",
    "end": "4693640"
  },
  {
    "text": "Not a big deal,\njust a factor of 2. So this is not a core\nconcept, but it turns out to be basically what we\nwere doing over here.",
    "start": "4693640",
    "end": "4700510"
  },
  {
    "text": " Let me give you a sequence\nof crazy inequalities.",
    "start": "4700510",
    "end": "4707199"
  },
  {
    "text": "First one is that this\nOPT thing is greater than or equal to size of the input.",
    "start": "4707200",
    "end": "4713980"
  },
  {
    "text": "Each of these inequalities\nis totally obvious, but the conclusion\nis kind of crazy. ",
    "start": "4713980",
    "end": "4723860"
  },
  {
    "text": "The independent rectangle\nlower bound, which we proved, says that if you look at\nplus satisfying things that's",
    "start": "4723860",
    "end": "4729040"
  },
  {
    "text": "going to be at least\nsize of the input plus the max number of\nindependent rectangles. If you look at the\nminus satisfying things,",
    "start": "4729040",
    "end": "4734758"
  },
  {
    "text": "that's also going to be\nat least size of the input plus maximum number of minus\nindependent rectangles.",
    "start": "4734758",
    "end": "4740320"
  },
  {
    "text": "So we already proved this. That, if you look\nat this union, it's going to be at least the\nsize of the input plus half",
    "start": "4740320",
    "end": "4745510"
  },
  {
    "text": "the overall max. So that's what we proved\nat the beginning a lecture.",
    "start": "4745510",
    "end": "4752320"
  },
  {
    "text": "Now, this is the best way to\nuse independent rectangles.",
    "start": "4752320",
    "end": "4757840"
  },
  {
    "text": "This kind of Signed\nGreedy, which is the max of the\ntwo signs, is a way to find independent rectangles.",
    "start": "4757840",
    "end": "4764040"
  },
  {
    "text": "So it's only going to be worse. It's going to be smaller. So we can say is greater\nthan or equal to half",
    "start": "4764040",
    "end": "4772000"
  },
  {
    "text": "the max of plus greedy\nand minus greedy.",
    "start": "4772000",
    "end": "4777630"
  },
  {
    "start": "4777630",
    "end": "4782650"
  },
  {
    "text": "This was the max. So this is another way to do\nit, so it must be smaller. ",
    "start": "4782650",
    "end": "4789920"
  },
  {
    "text": "Now, greedy computes a\nplus satisfying assignment.",
    "start": "4789920",
    "end": "4798710"
  },
  {
    "text": "So I could say, well, if you\nlooked at the optimal plus satisfying assignment--\nthis is something we defined",
    "start": "4798710",
    "end": "4805000"
  },
  {
    "text": "at the beginning of lecture-- and the optimal minus\nsatisfying assignment, that's only going to be smaller\nthan greedy because greedy",
    "start": "4805000",
    "end": "4811869"
  },
  {
    "text": "is an algorithm for\nsolving OPT plus. It can't be better\nthan the optimum.",
    "start": "4811870",
    "end": "4819302"
  },
  {
    "text": "Greedy again has to be\nbigger than the optimum. ",
    "start": "4819302",
    "end": "4824889"
  },
  {
    "text": "Now I just want to turn\nthis max into a plus because the max is always\nat least the average.",
    "start": "4824890",
    "end": "4832550"
  },
  {
    "text": "So if I take the average, which\nturns it into 1/4 OPT plus",
    "start": "4832550",
    "end": "4837670"
  },
  {
    "text": "plus OPT minus. ",
    "start": "4837670",
    "end": "4842990"
  },
  {
    "text": "Then that holds. You turn the max into a plus. If I look at the\noptimal plus satisfying",
    "start": "4842990",
    "end": "4848440"
  },
  {
    "text": "plus the optimal\nminus satisfying, that's only going to be\nbigger than this thing",
    "start": "4848440",
    "end": "4854770"
  },
  {
    "text": "because this can only\nsave like a factor of 2 or whatever over\njust adding them up.",
    "start": "4854770",
    "end": "4860436"
  },
  {
    "text": "I don't even need to\nfactor of 2 thing. I just need that\nif you add them up,",
    "start": "4860436",
    "end": "4865810"
  },
  {
    "text": "that's only going to be\nworse than just counting them as the union. So we get what I\ncall a sandwich.",
    "start": "4865810",
    "end": "4873100"
  },
  {
    "text": "On the one side, we have OPT x. On the other side,\nwe have 1/4 OPT x. I really don't care\nabout OPT x personally.",
    "start": "4873100",
    "end": "4879280"
  },
  {
    "text": "I mean, it's kind of interesting\nto see that it's here. But the point is these are\nwithin a constant factor. Therefore, all of\nthese things in between",
    "start": "4879280",
    "end": "4885618"
  },
  {
    "text": "are within a constant\nfactor of each other. So in particular, this thing,\nmax of the two greedys,",
    "start": "4885618",
    "end": "4891969"
  },
  {
    "text": "is within a constant\nfactor of this thing. This is the independent\nrectangle lower bound,",
    "start": "4891970",
    "end": "4897070"
  },
  {
    "text": "the best one. It also tells you that\nOPT x is basically what we're computing here.",
    "start": "4897070",
    "end": "4903230"
  },
  {
    "text": "So this is weird. I'm going to draw one\nmore picture, which",
    "start": "4903230",
    "end": "4909190"
  },
  {
    "text": "is greedy versus Signed Greedy.",
    "start": "4909190",
    "end": "4916630"
  },
  {
    "text": "Remember greedy\nfrom last lecture. Greedy says, look, I'm going\nto fix plus rectangles,",
    "start": "4916630",
    "end": "4922929"
  },
  {
    "text": "and I'm going to fix\nminus rectangles. It does them both\nat the same time. Signed Greedy says,\nlook, I'm going",
    "start": "4922930",
    "end": "4928600"
  },
  {
    "text": "to do the plus\nrectangles separately, and then I'm going to the\nminus rectangles separately,",
    "start": "4928600",
    "end": "4934510"
  },
  {
    "text": "and then add them up or take\nthe union or take the max. It doesn't matter. It's a constant factor.",
    "start": "4934510",
    "end": "4939760"
  },
  {
    "text": "Just add them separately. This one is an upper bound.",
    "start": "4939760",
    "end": "4944920"
  },
  {
    "text": "It is a binary search tree. This thing is a lower bound. All binary search trees\nmust take at least this.",
    "start": "4944920",
    "end": "4952780"
  },
  {
    "text": "Are they equal up\nto constant factors? We don't know. That's the big question.",
    "start": "4952780",
    "end": "4957970"
  },
  {
    "text": "They look almost identical. But what greedy has to deal with\nis sort of the interrelations.",
    "start": "4957970",
    "end": "4963280"
  },
  {
    "text": "When I fix some\nplus rectangles, I might get new minus rectangles\nthat I have to fix with greedy.",
    "start": "4963280",
    "end": "4969305"
  },
  {
    "text": "Signed Greedy doesn't\nhave to deal with that. It's just the plus rectangles. They might make more\nplus rectangles,",
    "start": "4969305",
    "end": "4974530"
  },
  {
    "text": "but that's all I\nhave to deal with. It doesn't deal\nwith the interaction between plus and\nminus rectangles. Seems like the interaction\nkind of fades away",
    "start": "4974530",
    "end": "4983290"
  },
  {
    "text": "as a geometric series. And therefore, these\nthings are the same up to constant factors. But we have no\nway to prove that.",
    "start": "4983290",
    "end": "4988900"
  },
  {
    "text": "It could be the interaction\nblows you out of the water somehow.",
    "start": "4988900",
    "end": "4994750"
  },
  {
    "text": "That's the best we know\nfor dynamic optimality. Maybe next time I teach this\nclass we'll have a final answer",
    "start": "4994750",
    "end": "5001770"
  },
  {
    "text": "and it'll be constant, but\nthat's where we are today.",
    "start": "5001770",
    "end": "5005730"
  }
]