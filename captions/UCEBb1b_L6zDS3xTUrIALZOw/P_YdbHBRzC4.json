[
  {
    "text": "Now let's turn our attention to compile statement.",
    "start": "380",
    "end": "3880"
  },
  {
    "text": "The first two statement types are pretty easy\nto handle.",
    "start": "3880",
    "end": "7020"
  },
  {
    "text": "Unconditional statements are usually assignment\nexpressions or procedure calls.",
    "start": "7020",
    "end": "11800"
  },
  {
    "text": "We'll simply ask compile_expr to generate\nthe appropriate code.",
    "start": "11800",
    "end": "16960"
  },
  {
    "text": "Compound statements are equally easy.",
    "start": "16960",
    "end": "19460"
  },
  {
    "text": "We'll recursively call compile_statement to\ngenerate code for each statement in turn.",
    "start": "19460",
    "end": "24810"
  },
  {
    "text": "The code for statement_2 will immediately\nfollow the code generated for statement_1.",
    "start": "24810",
    "end": "30210"
  },
  {
    "text": "Execution will proceed sequentially through\nthe code for each statement.",
    "start": "30210",
    "end": "34050"
  },
  {
    "text": "Here we see the simplest form the conditional\nstatement, where we need to generate code",
    "start": "34050",
    "end": "38899"
  },
  {
    "text": "to evaluate the test expression and then,\nif the value in the register is FALSE, skip",
    "start": "38900",
    "end": "44470"
  },
  {
    "text": "over the code that executes the statement\nin the THEN clause.",
    "start": "44470",
    "end": "48400"
  },
  {
    "text": "The simple assembly-language template uses\nrecursive calls to compile_expr and compile_statement",
    "start": "48400",
    "end": "54510"
  },
  {
    "text": "to generate code for the various parts of\nthe IF statement.",
    "start": "54510",
    "end": "59460"
  },
  {
    "text": "The full-blown conditional statement includes\nan ELSE clause, which should be executed if",
    "start": "59460",
    "end": "63480"
  },
  {
    "text": "the value of the test expression is FALSE.",
    "start": "63480",
    "end": "66710"
  },
  {
    "text": "The template uses some branches and labels\nto ensure the course of execution is as intended.",
    "start": "66710",
    "end": "73420"
  },
  {
    "text": "You can see that the compilation process is\nreally just the application of many small",
    "start": "73420",
    "end": "77548"
  },
  {
    "text": "templates that break the code generation task\ndown step-by-step into smaller and smaller",
    "start": "77549",
    "end": "83620"
  },
  {
    "text": "tasks, generating the necessary code to glue\nall the pieces together in the appropriate",
    "start": "83620",
    "end": "88490"
  },
  {
    "text": "fashion.",
    "start": "88490",
    "end": "90210"
  },
  {
    "text": "And here's the template for the WHILE statement,\nwhich looks a lot like the template for the",
    "start": "90210",
    "end": "94130"
  },
  {
    "text": "IF statement with a branch at the end that\ncauses the generated code to be re-executed",
    "start": "94130",
    "end": "99579"
  },
  {
    "text": "until the value of the test expression is\nFALSE.",
    "start": "99580",
    "end": "103490"
  },
  {
    "text": "With a bit of thought, we can improve on this\ntemplate slightly.",
    "start": "103490",
    "end": "107229"
  },
  {
    "text": "We've reorganized the code so that only a\nsingle branch instruction (BT) is executed",
    "start": "107229",
    "end": "113200"
  },
  {
    "text": "each iteration, instead of the two branches\n(BF, BR) per iteration in the original template.",
    "start": "113200",
    "end": "119349"
  },
  {
    "text": "Not a big deal, but little optimizations to\ncode inside a loop can add up to big savings",
    "start": "119349",
    "end": "125719"
  },
  {
    "text": "in a long-running program.",
    "start": "125719",
    "end": "128940"
  },
  {
    "text": "Just a quick comment about another common\niteration statement, the FOR loop.",
    "start": "128940",
    "end": "133530"
  },
  {
    "text": "The FOR loop is a shorthand way of expressing\niterations where the loop index (\"i\" in the",
    "start": "133530",
    "end": "138720"
  },
  {
    "text": "example shown) is run through a sequence of\nvalues and the body of the FOR loop is executed",
    "start": "138720",
    "end": "144420"
  },
  {
    "text": "once for each value of the loop index.",
    "start": "144420",
    "end": "147640"
  },
  {
    "text": "The FOR loop can be transformed into the WHILE\nstatement shown here, which can then be compiled",
    "start": "147640",
    "end": "152890"
  },
  {
    "text": "using the templates shown above.",
    "start": "152890",
    "end": "155880"
  },
  {
    "text": "In this example, we've applied our templates\nto generate code for the iterative implementation",
    "start": "155880",
    "end": "160950"
  },
  {
    "text": "of the factorial function that we've seen\nbefore.",
    "start": "160950",
    "end": "164590"
  },
  {
    "text": "Look through the generated code and you'll\nbe able to match the code fragments with the",
    "start": "164590",
    "end": "169260"
  },
  {
    "text": "templates from last couple of slides.",
    "start": "169260",
    "end": "171840"
  },
  {
    "text": "It's not the most efficient code, but not\nbad given the simplicity of the recursive-descent",
    "start": "171840",
    "end": "176590"
  },
  {
    "text": "approach for compiling high-level programs.",
    "start": "176590",
    "end": "179970"
  },
  {
    "text": "It's a simple matter to modify the recursive-descent\nprocess to accommodate variable values that",
    "start": "179970",
    "end": "185790"
  },
  {
    "text": "are stored in dedicated registers rather than\nin main memory.",
    "start": "185790",
    "end": "190450"
  },
  {
    "text": "Optimizing compilers are quite good at identifying\nopportunities to keep values in registers",
    "start": "190450",
    "end": "195170"
  },
  {
    "text": "and hence avoid the LD and ST operations needed\nto access values in main memory.",
    "start": "195170",
    "end": "202040"
  },
  {
    "text": "Using this simple optimization, the number\nof instructions in the loop has gone from",
    "start": "202040",
    "end": "206200"
  },
  {
    "text": "10 down to 4.",
    "start": "206200",
    "end": "208360"
  },
  {
    "text": "Now the generated code is looking pretty good!",
    "start": "208360",
    "end": "212540"
  },
  {
    "text": "But rather than keep tweaking the recursive-descent\napproach, let's stop here.",
    "start": "212540",
    "end": "216950"
  },
  {
    "text": "In the next segment, we'll see how modern\ncompilers take a more general approach to",
    "start": "216950",
    "end": "220819"
  },
  {
    "text": "generating code.",
    "start": "220820",
    "end": "222220"
  },
  {
    "text": "Still though, the first time I learned about\nrecursive descent, I ran home to write a simple",
    "start": "222220",
    "end": "227610"
  },
  {
    "text": "implementation and marveled at having authored\nmy own compiler in an afternoon!",
    "start": "227610",
    "end": "232280"
  }
]