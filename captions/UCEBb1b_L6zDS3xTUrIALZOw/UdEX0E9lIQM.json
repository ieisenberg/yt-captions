[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "11410"
  },
  {
    "text": "ANA BELL: So let's\nstart today's lecture. We're going to be looking\nat three different topics.",
    "start": "11410",
    "end": "17720"
  },
  {
    "text": "The first is we're going\nto look at a new object type called a string. We briefly mentioned\nthis word last lecture.",
    "start": "17720",
    "end": "24050"
  },
  {
    "text": "Then we're going to see\nhow we can write programs that start to get input from the\nuser and show the user output.",
    "start": "24050",
    "end": "31490"
  },
  {
    "text": "And finally, we're going to\ngo into writing a little bit more interesting programs\nthat make decisions",
    "start": "31490",
    "end": "40629"
  },
  {
    "text": "based on decisions that we\nactually input in the code, so not decision spontaneously\nbut things that we",
    "start": "40630",
    "end": "47200"
  },
  {
    "text": "will code within our programs. But before we go\non to these topics, I just wanted to do\na quick recap of what",
    "start": "47200",
    "end": "53433"
  },
  {
    "text": "we learned last lecture,\njust to make sure we're all on the same page. So we introduced the\nidea of an object.",
    "start": "53433",
    "end": "59110"
  },
  {
    "text": "And every object in Python\nhas a specific type. And the type tells\nPython the kinds of things you're allowed\nto do with that object.",
    "start": "59110",
    "end": "67270"
  },
  {
    "text": "We talked about, once\nyou have objects, you can actually assign\nthese objects to variables. And these variables basically\nbind a name to the object",
    "start": "67270",
    "end": "75170"
  },
  {
    "text": "in memory. With objects, you can\nalso create expressions by combining objects together.",
    "start": "75170",
    "end": "80990"
  },
  {
    "text": "And the expressions\ncan either be things that we've seen in math,\nlike with parentheses",
    "start": "80990",
    "end": "86030"
  },
  {
    "text": "and with object operator object. Or they can be things\nlike this, which",
    "start": "86030",
    "end": "92570"
  },
  {
    "text": "was introduced in programming. It's an expression, but\nit's a different one.",
    "start": "92570",
    "end": "98010"
  },
  {
    "text": "It's more like a command. Or I'm asking Python to\ndo this operation for me.",
    "start": "98010",
    "end": "103430"
  },
  {
    "text": "What is the object that comes\nback from this operation? So today, I'm going to go over\nthis little memory diagram we",
    "start": "103430",
    "end": "112400"
  },
  {
    "text": "started drawing last lecture. And I'm going to use this\nmemory diagram today as well. Here's some lines of code\nthat we wrote last lecture.",
    "start": "112400",
    "end": "119729"
  },
  {
    "text": "So we created-- we\nwrote a line in Python that created an object.",
    "start": "119730",
    "end": "124920"
  },
  {
    "text": "Its value is 3.14,\na float in memory. And the name we gave this\nobject was pi, so just",
    "start": "124920",
    "end": "132530"
  },
  {
    "text": "the name pi, P-I. Radius = 2.2 is another\nassignment statement in Python.",
    "start": "132530",
    "end": "140780"
  },
  {
    "text": "And it binds the name radius\nto the value 2.2 in memory. And once we've created\nthese variables,",
    "start": "140780",
    "end": "146519"
  },
  {
    "text": "we can just invoke their names. We can use their names\nto tell Python to grab for me the values from memory.",
    "start": "146520",
    "end": "152670"
  },
  {
    "text": "So when Python sees pi times\nradius**2, that means take pi,",
    "start": "152670",
    "end": "158150"
  },
  {
    "text": "multiply it with\nthe radius squared. So behind the scenes, Python\ngoes, grabs the value 3.14",
    "start": "158150",
    "end": "163550"
  },
  {
    "text": "from memory, replaces\npi with that value, grabs 2.2 from memory, replaces\nradius with that value,",
    "start": "163550",
    "end": "169640"
  },
  {
    "text": "does the operation according\nto the precedence rules. And then that\nexpression, the thing",
    "start": "169640",
    "end": "175040"
  },
  {
    "text": "on the right hand side of this\nequal sign, becomes a value.",
    "start": "175040",
    "end": "180950"
  },
  {
    "text": "That value is then created\nas a new object in memory right here. And that object in memory is\nthen bound to the name area.",
    "start": "180950",
    "end": "188690"
  },
  {
    "text": "That's exactly what\nthis assignment states. And we can do something\nlike this in Python, which",
    "start": "188690",
    "end": "196250"
  },
  {
    "text": "we can't actually do in math. If we did this in\nmath, the expression would basically say 0 = 1.",
    "start": "196250",
    "end": "201860"
  },
  {
    "text": "But in Python, it's totally\nfine because again, we evaluate the thing on the right\nhand side of the equal sign.",
    "start": "201860",
    "end": "208547"
  },
  {
    "text": "So on the right hand\nside of the equal sign, we say I want to grab the\nvalue of radius, so 2.2,",
    "start": "208547",
    "end": "213890"
  },
  {
    "text": "add 1 to it, 3.2, create\nthis object in memory, here I",
    "start": "213890",
    "end": "219140"
  },
  {
    "text": "have a whole new\nobject in memory 3.2, and then assign it\nto the name radius. So I've lost the binding\nfrom the original 2.2",
    "start": "219140",
    "end": "226970"
  },
  {
    "text": "and rebound the name to 3.2. So we're not modifying\nobjects in memory.",
    "start": "226970",
    "end": "233180"
  },
  {
    "text": "We're creating new\nobjects in memory whenever we do such operations. We're going to see\nhow we can modify",
    "start": "233180",
    "end": "239180"
  },
  {
    "text": "objects way into the future. And just for completion, when\nwe have a line that says var =",
    "start": "239180",
    "end": "246370"
  },
  {
    "text": "type (5*4), Python also\nsees this as an expression. And so as an expression,\nit has a value.",
    "start": "246370",
    "end": "253070"
  },
  {
    "text": "So the right hand side\nof this equal sign says, well, I'm going to\nsystematically evaluate",
    "start": "253070",
    "end": "258578"
  },
  {
    "text": "this and say, what's 5 times 4? It's 20. What's the type of 20?",
    "start": "258579",
    "end": "264040"
  },
  {
    "text": "It's an integer. And so that's what the\nright hand side evaluates, to an integer. And I'm going to bind that\nvalue, int, to the name var.",
    "start": "264040",
    "end": "274240"
  },
  {
    "text": "So var is another variable name. And its value is int,\nthe type of my object,",
    "start": "274240",
    "end": "279430"
  },
  {
    "text": "which is a little strange. So far, we've just put\nnumbers in our memory. But we can put any\nobject type in memory.",
    "start": "279430",
    "end": "287580"
  },
  {
    "text": "OK, so let's move on a little\nbit onto the new object type",
    "start": "287580",
    "end": "292620"
  },
  {
    "text": "called a string. So a string is\nactually a sequence of case sensitive characters.",
    "start": "292620",
    "end": "298409"
  },
  {
    "text": "The characters can be anything. We have lowercase letters,\nuppercase letters, the numbers on your keyboard,\nthe special characters",
    "start": "298410",
    "end": "305400"
  },
  {
    "text": "you see on the keyboard. Even the Enter when you\ndo a new line or a tab has a special character\nassociated with it.",
    "start": "305400",
    "end": "313720"
  },
  {
    "text": "And the way we tell Python\nwe're creating an object of type string is by enclosing\nthe characters",
    "start": "313720",
    "end": "319950"
  },
  {
    "text": "we want to be part of that\nobject in these quotation marks. So when Python sees\nthe quotation mark, it knows you're creating\na string object.",
    "start": "319950",
    "end": "326950"
  },
  {
    "text": "So here, I'm creating\nthe string object which has the lowercase\nletter m, lowercase letter e.",
    "start": "326950",
    "end": "333240"
  },
  {
    "text": "And here, I'm creating\nthe string object which has the lowercase y,\nlowercase o, and lowercase u",
    "start": "333240",
    "end": "338729"
  },
  {
    "text": "letters. And these objects\nare things in Python.",
    "start": "338730",
    "end": "343890"
  },
  {
    "text": "And we're just\ngoing to give them a handle, a binding with\nsome more convenient variable",
    "start": "343890",
    "end": "349300"
  },
  {
    "text": "names, a and z. So in memory, the way this\nwould look in our little memory diagram is we would have\nthe string characters \"me\"",
    "start": "349300",
    "end": "357250"
  },
  {
    "text": "bound to the variable a. So basically what\nwe've seen before.",
    "start": "357250",
    "end": "362340"
  },
  {
    "text": "All right. So now, what are some things\nwe can do with strings? Well, some really\ncommon operations",
    "start": "362340",
    "end": "368330"
  },
  {
    "text": "are that we can\nconcatenate strings or we can repeat strings. So here, I'm not going\nto put the z in memory.",
    "start": "368330",
    "end": "375632"
  },
  {
    "text": "You can imagine how\nthat would look like. But let's say I\ncreate now a variable b equals the letters myself.",
    "start": "375632",
    "end": "384210"
  },
  {
    "text": "What if I do a plus operator\nbetween these two strings? The plus operator\ntells Python that I'm",
    "start": "384210",
    "end": "389660"
  },
  {
    "text": "going to take these two strings,\nthe individual characters in each string, and\njust put them together",
    "start": "389660",
    "end": "394939"
  },
  {
    "text": "to make one new\nobject that is all of these letters put together. So c = a + b is another\nassignment operator.",
    "start": "394940",
    "end": "403820"
  },
  {
    "text": "And on the right hand side,\nwe have an expression, plus operator\nbetween two objects. It's going to put me,\nwhich is the c letters,",
    "start": "403820",
    "end": "412550"
  },
  {
    "text": "and the myself, the b\nletters, all together to create a new object,\nwhich I then give a handle",
    "start": "412550",
    "end": "419510"
  },
  {
    "text": "or a binding, c. So from now on, anytime I\nwant this particular string",
    "start": "419510",
    "end": "425160"
  },
  {
    "text": "of characters, myself, I\ncan just invoke the name c",
    "start": "425160",
    "end": "430590"
  },
  {
    "text": "in my program. That's just the variable\nname that I gave it. Now, notice it didn't\ninsert a space.",
    "start": "430590",
    "end": "437580"
  },
  {
    "text": "It didn't do me space\nmyself because we didn't tell it to do a space. So if we wanted to\ndo a space, we'd",
    "start": "437580",
    "end": "444630"
  },
  {
    "text": "have to put it in ourselves. So we can\nconcatenate-- so we can have a larger expression where\nwe concatenate a with a space",
    "start": "444630",
    "end": "451410"
  },
  {
    "text": "and with b together. So that will give me an\nentirely new object in memory,",
    "start": "451410",
    "end": "456450"
  },
  {
    "text": "the string me space myself. This new object is\nbound to the name d.",
    "start": "456450",
    "end": "464490"
  },
  {
    "text": "Is that OK so far? Does that make sense? OK. All right. So that's concatenation.",
    "start": "464490",
    "end": "469820"
  },
  {
    "text": "It basically takes these\ntwo string characters, puts them together\nin a new object. What about the star?",
    "start": "469820",
    "end": "475090"
  },
  {
    "text": "I briefly talked about\nthis as repeating something last lecture. Well, the star operator works\nbetween a string and a number.",
    "start": "475090",
    "end": "483713"
  },
  {
    "text": "It doesn't work between\na string and a string. It doesn't work between\nthings like that. It works between a\nstring and a number",
    "start": "483713",
    "end": "490300"
  },
  {
    "text": "in either order, so a number\nstring or a string times number. So here, again, it's\nan assignment operator.",
    "start": "490300",
    "end": "497253"
  },
  {
    "text": "The right hand side,\nwe're going to figure out what it evaluates to first. So a times 3 means I'm going to\nrepeat this particular sequence",
    "start": "497253",
    "end": "504750"
  },
  {
    "text": "of characters, me,\nbecause that's what a is, it's me, three times.",
    "start": "504750",
    "end": "509970"
  },
  {
    "text": "So this line of\ncode here is going to create me, me,\nme as a new object.",
    "start": "509970",
    "end": "515580"
  },
  {
    "text": "And the equal sign tells it\nto bind it to the name silly. So any time I want to grab this\nparticular string of characters",
    "start": "515580",
    "end": "522330"
  },
  {
    "text": "from memory, I can just\ntype in silly in my program and that will automatically\ngrab that particular sequence",
    "start": "522330",
    "end": "528509"
  },
  {
    "text": "of characters from memory. All right. Let's do a quick\nexercise to make sure",
    "start": "528510",
    "end": "533949"
  },
  {
    "text": "that you all have this. And as you're thinking\nabout what this does,",
    "start": "533950",
    "end": "539230"
  },
  {
    "text": "I can start typing\nit in to the console. Or you can either even type\nit in to check yourself.",
    "start": "539230",
    "end": "547090"
  },
  {
    "text": "So b is going to be colon. And c is going to be\nthe close parentheses. So if we go here, we have b\nis equal to just this colon.",
    "start": "547090",
    "end": "556550"
  },
  {
    "text": "And c is equal to the\nclose parentheses. And we don't have to do\nall the operations at once.",
    "start": "556550",
    "end": "566720"
  },
  {
    "text": "We can just do\nsomething like 2 times c and figure out what that is. It's just repeating the\nclose parentheses twice.",
    "start": "566720",
    "end": "574129"
  },
  {
    "text": "And then we can\ndo b plus 2 times c to give us colon close\nparenthesis, close parenthesis.",
    "start": "574130",
    "end": "583800"
  },
  {
    "text": "So super happy.  What about the next one?",
    "start": "583800",
    "end": "589060"
  },
  {
    "text": "f is a. g is actually the space b.",
    "start": "589060",
    "end": "596760"
  },
  {
    "text": "So there's a space character\nin there, a little tricky. And h is 3.",
    "start": "596760",
    "end": "603129"
  },
  {
    "text": "Is this the number 3\nor the string 3 for h? Yeah, exactly. It's the string 3.",
    "start": "603130",
    "end": "610190"
  },
  {
    "text": "So what is f plus g? Again, we can do it in pieces. What is f plus g? ",
    "start": "610190",
    "end": "617860"
  },
  {
    "text": "a space b, exactly right. a is by itself. And g is space b.",
    "start": "617860",
    "end": "624670"
  },
  {
    "text": "What is int h?  Yeah, it's just 3.",
    "start": "624670",
    "end": "630420"
  },
  {
    "text": "What's the type of 3? int, exactly. I just cast it to an int.",
    "start": "630420",
    "end": "636010"
  },
  {
    "text": "So if I have f = a, g = space b,\nand h is equal to the string 3,",
    "start": "636010",
    "end": "647620"
  },
  {
    "text": "f plus g, we're doing it\na little bit at a time, is a space b.",
    "start": "647620",
    "end": "653500"
  },
  {
    "text": "And h is just see\nthe string 3 here. So if I cast it to an integer,\nit gives me just the number 3.",
    "start": "653500",
    "end": "664280"
  },
  {
    "text": "And we can wrap each of\nthese in a type command to see the exact type. But we can tell right away.",
    "start": "664280",
    "end": "671899"
  },
  {
    "text": "So if we do f + g\nmultiplied by int of 3--",
    "start": "671900",
    "end": "678940"
  },
  {
    "text": "or sorry, oops, int of\nh, which is just a 3,",
    "start": "678940",
    "end": "683980"
  },
  {
    "text": "it's going to repeat\na space b three times. So there's one, there's\ntwo, and there's three.",
    "start": "683980",
    "end": "690820"
  },
  {
    "text": "What would have\nhappened if I forgot to cast it to an integer? What do you think,\nif I just did h?",
    "start": "690820",
    "end": "699670"
  },
  {
    "text": "An error, yeah, exactly. They're not scary. They're kind of informative\nonce you get to know them.",
    "start": "699670",
    "end": "706880"
  },
  {
    "text": "So it's a type error. Something's wrong\nwith our types. Can't multiply a\nsequence, so an integer--",
    "start": "706880",
    "end": "713019"
  },
  {
    "text": "or a string, a sequence,\nby a non-integer. All right. ",
    "start": "713020",
    "end": "720460"
  },
  {
    "text": "OK. So what are some\nother operations we can do with strings? There are some\ndifferent things we",
    "start": "720460",
    "end": "725740"
  },
  {
    "text": "can do with strings\nthat we actually haven't seen with numbers\nin the last lecture.",
    "start": "725740",
    "end": "732529"
  },
  {
    "text": "One of the more\ncommon operations is to get the\nlength of a string. So this tells us how many\ncharacters are in the string.",
    "start": "732530",
    "end": "738690"
  },
  {
    "text": "So if we say s is\nequal to abc here, I'm creating a string with\ncharacters a, b, and c,",
    "start": "738690",
    "end": "744440"
  },
  {
    "text": "and I'm giving it the name s. Now any time in my\nprogram when I say s, Python will replace that with\nthis string of characters abc.",
    "start": "744440",
    "end": "753240"
  },
  {
    "text": "I can wrap s in this\nlean len command. And this len command\nis an expression.",
    "start": "753240",
    "end": "759420"
  },
  {
    "text": "Basically, Python\nreads this, and it evaluates it to one value,\nso replaces this expression",
    "start": "759420",
    "end": "765330"
  },
  {
    "text": "with one value. How many characters\nare in my string? So len s basically\nbecome the number 3.",
    "start": "765330",
    "end": "772850"
  },
  {
    "text": "So in my program,\nI can say something like another\nassignment statement down here, chars\nis equal to len s.",
    "start": "772850",
    "end": "781100"
  },
  {
    "text": "This is an expression\nlike in the previous line that evaluates to 3. So basically, this line\nsays chars is equal to 3.",
    "start": "781100",
    "end": "788420"
  },
  {
    "text": " OK. That's a pretty simple\noperation with strings.",
    "start": "788420",
    "end": "795230"
  },
  {
    "text": "Now we're going to get into a\nlittle bit more detailed ones that requires you to\nremember this Python syntax.",
    "start": "795230",
    "end": "803210"
  },
  {
    "text": "So one thing we\ncan do with strings is we can grab\nindividual characters",
    "start": "803210",
    "end": "808600"
  },
  {
    "text": "at different positions. So that's called slicing. The syntax, or the way that\nwe actually do this in Python,",
    "start": "808600",
    "end": "817050"
  },
  {
    "text": "is using square brackets. So you can see this here. We have some square\nbracket notation",
    "start": "817050",
    "end": "822870"
  },
  {
    "text": "and this is just\nhow Python does it. So if we have string s is\nequal to the characters abc,",
    "start": "822870",
    "end": "829750"
  },
  {
    "text": "the way we tell Python\nwe'd like to extract a character at a\nparticular position is by indexing into that string.",
    "start": "829750",
    "end": "836620"
  },
  {
    "text": "Now, in Python and modern\nprogramming languages, indexing happens from 0. We count from 0 in programming,\nin computer science.",
    "start": "836620",
    "end": "845870"
  },
  {
    "text": "So what that means is the\nindex of the first character,",
    "start": "845870",
    "end": "851400"
  },
  {
    "text": "the index of a is 0, the index\nof b is 1, and the index of c is 2.",
    "start": "851400",
    "end": "857399"
  },
  {
    "text": "So we can say, what's the\ncharacter at the first position or the first location? But in computer\nscience speak, we",
    "start": "857400",
    "end": "864120"
  },
  {
    "text": "say that's the\ncharacter at index 0. The character at index 1 is\nthe character at location",
    "start": "864120",
    "end": "869610"
  },
  {
    "text": "2 and so on. So when we're indexing\ninto a string, we're always starting\nto count from 0.",
    "start": "869610",
    "end": "877380"
  },
  {
    "text": "So s at index 0, that's\nhow we call this line here.",
    "start": "877380",
    "end": "883950"
  },
  {
    "text": "It's another Python expression. It just looks different than the\nexpressions we've seen so far.",
    "start": "883950",
    "end": "889960"
  },
  {
    "text": "But this entire\nexpression Python evaluates to a particular value. And the value it evaluates it to\nis the character at that index.",
    "start": "889960",
    "end": "899170"
  },
  {
    "text": "So just to show you what\nthat looks like in here, if s is equal to abc,\nall we would type",
    "start": "899170",
    "end": "904889"
  },
  {
    "text": "is this, s at index 0. And this expression evaluates\nto that single character, a.",
    "start": "904890",
    "end": "911899"
  },
  {
    "text": "s at index 1, b,\ns at index 2, c. S at index 3\nbasically says, what",
    "start": "911900",
    "end": "919490"
  },
  {
    "text": "is the character at\nthe fourth position? Well, abc only has\nthree positions. So this will actually\ngive us our second error",
    "start": "919490",
    "end": "926779"
  },
  {
    "text": "of the class, an index error. This is a pretty common\nerror as we start working with more complex programs.",
    "start": "926780",
    "end": "933079"
  },
  {
    "text": "It basically means you've\nindexed too far into the list, either to the right\nor to the left.",
    "start": "933080",
    "end": "938105"
  },
  {
    "text": " You can index into a list\nwith negative indices as well.",
    "start": "938105",
    "end": "945800"
  },
  {
    "text": "So if you ever want to grab the\ncharacter at the last position, so at the rightmost\nplace, that's",
    "start": "945800",
    "end": "951250"
  },
  {
    "text": "the character at\nindex negative 1. It's a really convenient way\nto grab that last character.",
    "start": "951250",
    "end": "957860"
  },
  {
    "text": "You basically ask,\nwhat's s at negative 1? And Python automatically grabs\nfor us that last character.",
    "start": "957860",
    "end": "963990"
  },
  {
    "text": "So we don't have to use an\nexpression like len of s negative 1.",
    "start": "963990",
    "end": "971240"
  },
  {
    "text": "That would be c as well. And here, I've inserted an\nexpression, len s minus 1,",
    "start": "971240",
    "end": "976910"
  },
  {
    "text": "directly in that index. And that's totally fine. Again, Python evaluates things\nin to out, left to right.",
    "start": "976910",
    "end": "983450"
  },
  {
    "text": "It evaluated len\ns minus 1 to be 2. And basically, this\nline became what's",
    "start": "983450",
    "end": "989150"
  },
  {
    "text": "s at index 2, which\nwe knew was c. AUDIENCE: So why did it\nmake negative 1 is c?",
    "start": "989150",
    "end": "996460"
  },
  {
    "text": "ANA BELL: Because when you\nindex into negative numbers, we start counting from\nthe right hand side,",
    "start": "996460",
    "end": "1002160"
  },
  {
    "text": "just Python convention.  And so s at negative\n4 will give us",
    "start": "1002160",
    "end": "1009290"
  },
  {
    "text": "an error as well,\nbecause now we're indexing too far to the left. There's nothing there.",
    "start": "1009290",
    "end": "1014990"
  },
  {
    "text": "OK. So we can index to\nget single characters. That's fine. We just use square\nbrackets and say the index",
    "start": "1014990",
    "end": "1021950"
  },
  {
    "text": "that we'd like to\nget the character at. We can also slice\nto get substrings.",
    "start": "1021950",
    "end": "1027439"
  },
  {
    "text": "So instead of getting\nsingle characters, we can ask Python to\nget us a substring starting from one index,\ngoing up to some other index,",
    "start": "1027440",
    "end": "1035449"
  },
  {
    "text": "and potentially\nskipping characters. You can take every\ncharacter along the way. You can skip every other\ncharacter or some other pattern",
    "start": "1035450",
    "end": "1045230"
  },
  {
    "text": "like that. The syntax for that\nis similar to slicing",
    "start": "1045230",
    "end": "1051750"
  },
  {
    "text": "to get a single character,\nslightly different, though. It's similar in that we have\nsquare brackets involved.",
    "start": "1051750",
    "end": "1058890"
  },
  {
    "text": "Slightly different\nbecause now we have to give three numbers\nwithin those square brackets",
    "start": "1058890",
    "end": "1065100"
  },
  {
    "text": "separated by colons. The first number will represent,\nwhat's the start index?",
    "start": "1065100",
    "end": "1071559"
  },
  {
    "text": "So where do you want to\nstart your substring from? The second is, what's\nthe stop index? So we're going to take every\ncharacter from that start",
    "start": "1071560",
    "end": "1078280"
  },
  {
    "text": "index, going all the way up\nto but not including the stop.",
    "start": "1078280",
    "end": "1083770"
  },
  {
    "text": "And the step means, how\nmany characters do we skip? So if the step is 1, we're\ntaking every character.",
    "start": "1083770",
    "end": "1090370"
  },
  {
    "text": "If the step is 2, we'll\ntake every other character. If the step is 3, we skip\nevery two characters and so on.",
    "start": "1090370",
    "end": "1097820"
  },
  {
    "text": "Now, there's a bunch\nof combinations we can do with\nthese three numbers",
    "start": "1097820",
    "end": "1104950"
  },
  {
    "text": "within the square\nbrackets that, as you work with these exercises,\nyou'll get the hang of.",
    "start": "1104950",
    "end": "1113620"
  },
  {
    "text": "For now, it won't\nhurt to always give it a start, a stop, and a step. That's perfectly fine.",
    "start": "1113620",
    "end": "1120190"
  },
  {
    "text": "But something that's really\ncommon, if you're always going to take every\nsingle character, is to just omit the step part.",
    "start": "1120190",
    "end": "1126610"
  },
  {
    "text": "So if you just give it two\nnumbers, number, colon, number, Python automatically knows that\nyour step will be 1 by default.",
    "start": "1126610",
    "end": "1134330"
  },
  {
    "text": "So you're not skipping anything. If you're just giving it\none number, no colons,",
    "start": "1134330",
    "end": "1140090"
  },
  {
    "text": "we're back to the previous\nslide, where we're just grabbing one element.",
    "start": "1140090",
    "end": "1145520"
  },
  {
    "text": "And I know this is going\nto be a little confusing. We're going to look at an\nexample on the next slide.",
    "start": "1145520",
    "end": "1150929"
  },
  {
    "text": "But this is\nsomething you'll just have to practice a\nlittle bit in the shell with the following\nexample, hopefully,",
    "start": "1150930",
    "end": "1156409"
  },
  {
    "text": "just when you go home, just to\nmake sure that you understand what it's doing.",
    "start": "1156410",
    "end": "1162180"
  },
  {
    "text": "If you have a\nquestion, like what if I put in this\nnumber or this number? just put it in the shell\nand see what happens.",
    "start": "1162180",
    "end": "1169440"
  },
  {
    "text": "So let's take a look at\na couple of examples. So how do we slice\nto get substrings?",
    "start": "1169440",
    "end": "1175560"
  },
  {
    "text": "Let's say our string is\nthis longer thing, abcdefgh. When we slice, the first thing\nwe want to look at is the step.",
    "start": "1175560",
    "end": "1183740"
  },
  {
    "text": "Is it positive or negative? If it's positive-- and remember,\nif you omit it by default,",
    "start": "1183740",
    "end": "1189030"
  },
  {
    "text": "it's plus 1. So if it's positive, we're going\nto work our way left to right, the way we read.",
    "start": "1189030",
    "end": "1194490"
  },
  {
    "text": "If it's negative, we're going\nto work our way right to left. So what if we index\ns from 3, colon, 6?",
    "start": "1194490",
    "end": "1203970"
  },
  {
    "text": "The step is positive\n1, so we're going to work our way left to right. So that means we're going\nto start at index 3,",
    "start": "1203970",
    "end": "1210250"
  },
  {
    "text": "so that's the d. So we're going to grab the D\nand we're going to go up to-- get the substring from d up to\nbut not including the character",
    "start": "1210250",
    "end": "1218440"
  },
  {
    "text": "at index 6, the h-- the g. Sorry, the g.",
    "start": "1218440",
    "end": "1223870"
  },
  {
    "text": "So the characters\nwe're going to grab are the d, the e, and the f. We start at 3, we go up\nto but not including 6,",
    "start": "1223870",
    "end": "1231790"
  },
  {
    "text": "taking every character\nbecause the step is 1. What if the step was 2?",
    "start": "1231790",
    "end": "1236940"
  },
  {
    "text": "So same thing as we just\ndid, except the step is 2. Again, the step is\npositive, so we're going",
    "start": "1236940",
    "end": "1241980"
  },
  {
    "text": "to work our way left to right. We're going to start at index\n3, so we're going to grab the d and we're going to create\na new object, which is",
    "start": "1241980",
    "end": "1248700"
  },
  {
    "text": "going to be the characters d. We're going to skip the\ne because the step is 2.",
    "start": "1248700",
    "end": "1253919"
  },
  {
    "text": "Take the f, and that's it. We've worked our way up\nto, but not including",
    "start": "1253920",
    "end": "1259870"
  },
  {
    "text": "the element at index 6. ",
    "start": "1259870",
    "end": "1265040"
  },
  {
    "text": "There are some other things-- I guess tricks\nare-- you might want to call them that you can do.",
    "start": "1265040",
    "end": "1270500"
  },
  {
    "text": "So if we just put\nan empty colon here, that says just make\nthe same object again.",
    "start": "1270500",
    "end": "1275990"
  },
  {
    "text": "So that will evaluate\nto just abcdefgh again.",
    "start": "1275990",
    "end": "1281870"
  },
  {
    "text": "If we do colon,\ncolon, negative 1, this is shorthand\nnotation for basically",
    "start": "1281870",
    "end": "1288080"
  },
  {
    "text": "grabbing for me the string\nbackward, so hgfedcba.",
    "start": "1288080",
    "end": "1293720"
  },
  {
    "text": "Just make the same string as\nthe original one, but backward. And we can do something\nlike this for 1",
    "start": "1293720",
    "end": "1301490"
  },
  {
    "text": "with a step negative 2. Now the step is negative.",
    "start": "1301490",
    "end": "1307400"
  },
  {
    "text": "So that means we're going to\nwork our way right to left. We're going to start at index 4.",
    "start": "1307400",
    "end": "1313549"
  },
  {
    "text": "So we're going to\ngrab the e, we're going to skip every\nother character. So we're not going to take\nthe d, but we will take the c,",
    "start": "1313550",
    "end": "1322240"
  },
  {
    "text": "and we're going to go down to,\nbut not including the character at index 1. So we're going to\nstop right here.",
    "start": "1322240",
    "end": "1328010"
  },
  {
    "text": "So the characters we took in\nthis order were e and then c. So this entire expression\nevaluates to ec.",
    "start": "1328010",
    "end": "1334130"
  },
  {
    "text": " Yes, question? AUDIENCE: Why did you skip d?",
    "start": "1334130",
    "end": "1339185"
  },
  {
    "text": "ANA BELL: Why do we skip d? Because the step is 2. So when the step is 1,\nwe take every character.",
    "start": "1339185",
    "end": "1344210"
  },
  {
    "text": "If the step is 2,\nskip every other one. Yeah? AUDIENCE: For the first one, s\n3 to 6, why is g not included?",
    "start": "1344210",
    "end": "1352940"
  },
  {
    "text": "ANA BELL: g is not included\njust by definition. We go up to but not\nincluding the stop. So we'll go up to, but not\nincluding the character",
    "start": "1352940",
    "end": "1360530"
  },
  {
    "text": "at index 6. That's just the definition\nof slicing in Python.",
    "start": "1360530",
    "end": "1366640"
  },
  {
    "text": "AUDIENCE: Like a\ncharacter that starts up to and including stop\nminus 1 [INAUDIBLE].. ANA BELL: So up to and\nincluding stop minus 1",
    "start": "1366640",
    "end": "1372700"
  },
  {
    "text": "means we go up to\nand including 5. Right, yeah, exactly. Yep. ",
    "start": "1372700",
    "end": "1381840"
  },
  {
    "text": "OK. So again, if you're unsure\nof what a command does, always try-- you can always try\nit in your console, the shell,",
    "start": "1381840",
    "end": "1388940"
  },
  {
    "text": "and here's an\nopportunity to do that. So here's a string s,\nABC d3f, and I'm actually",
    "start": "1388940",
    "end": "1397040"
  },
  {
    "text": "going to write this one down. Just ABC, space-- there's\na space here, 3d--",
    "start": "1397040",
    "end": "1403100"
  },
  {
    "text": "what do I do? Oh, d3f. ",
    "start": "1403100",
    "end": "1410330"
  },
  {
    "text": "And then another space, and ghi. ",
    "start": "1410330",
    "end": "1418050"
  },
  {
    "text": "So what do you guys think\nthe first one will be? 3, colon, len s minus 1. I'll even do the\nindices here for you.",
    "start": "1418050",
    "end": "1424620"
  },
  {
    "start": "1424620",
    "end": "1431410"
  },
  {
    "text": "What's the start?  Yeah, the space, exactly.",
    "start": "1431410",
    "end": "1437059"
  },
  {
    "text": "So it's going to\nbe a little space. What is len minus 1? ",
    "start": "1437060",
    "end": "1443942"
  },
  {
    "text": "AUDIENCE: That's\nthe length, right? It's not [INAUDIBLE].",
    "start": "1443942",
    "end": "1448958"
  },
  {
    "text": "ANA BELL: Yeah, what's the\nlength-- how many characters are in here? 11, yep. And minus 1 is 10.",
    "start": "1448958",
    "end": "1454650"
  },
  {
    "text": "So when we do this--\nwhen the stop is 10, that means we're\ngoing to go up to, but not including\nthe character at 10.",
    "start": "1454650",
    "end": "1462330"
  },
  {
    "text": "So we're going to\ngo up to this h. So we're going to take\nthe space, d3f, space gh,",
    "start": "1462330",
    "end": "1470120"
  },
  {
    "text": "and we stop. Yeah. AUDIENCE: Why do we start\nthe next thing at 0 again?",
    "start": "1470120",
    "end": "1475179"
  },
  {
    "text": "It's just-- ANA BELL: Convention. AUDIENCE: OK. ANA BELL: Computer science. Programming.",
    "start": "1475180",
    "end": "1481290"
  },
  {
    "text": "Except for MATLAB, I think\nthey still start indexing at 1. Other questions about this one?",
    "start": "1481290",
    "end": "1486690"
  },
  {
    "text": "Is that all right? OK, how about the next one? s\n4, colon, 0, colon, negative 1.",
    "start": "1486690",
    "end": "1493710"
  },
  {
    "text": "What's the element at index 4?  The d, yep.",
    "start": "1493710",
    "end": "1499050"
  },
  {
    "text": "So we're going to grab the d. Are we working our way\nright or-- to the right or to the left?",
    "start": "1499050",
    "end": "1504745"
  },
  {
    "text": "AUDIENCE: Left. ANA BELL: Yeah, exactly. So we're going to go up to,\nbut not including the character at index 0.",
    "start": "1504745",
    "end": "1510260"
  },
  {
    "text": "So we're going to get the d,\nthe space, the c, the B. Am",
    "start": "1510260",
    "end": "1516590"
  },
  {
    "text": "I taking the a? No, exactly. So that's it. D, space, CB.",
    "start": "1516590",
    "end": "1522630"
  },
  {
    "text": "Yes? AUDIENCE: If we want\nto include the A, would the second\nvalue be negative 1?",
    "start": "1522630",
    "end": "1528210"
  },
  {
    "text": "ANA BELL: If you did\nwant to include the A, actually, you would want to do\nsomething different, I think.",
    "start": "1528210",
    "end": "1535920"
  },
  {
    "text": "You can't go to negative\n1 because negative 1 is actually this right here. That's a good question.",
    "start": "1535920",
    "end": "1541390"
  },
  {
    "text": "I'd have to try it out,\nplay around with it. But if you want to include\nit, I think maybe you would just do an empty--",
    "start": "1541390",
    "end": "1549419"
  },
  {
    "text": "sorry, go ahead. You would just probably\ndo an empty colon, and by default, that means\nthe beginning and the end.",
    "start": "1549420",
    "end": "1556990"
  },
  {
    "text": "But I'd have to\ntry it out, yeah.  How about the last one?",
    "start": "1556990",
    "end": "1562809"
  },
  {
    "text": "6, colon, 3. What's the element at index 6?",
    "start": "1562810",
    "end": "1568222"
  },
  {
    "text": "The empty colon work-- OK, perfect. Thanks for trying it out. The empty colon works, yeah. If you wanted to grab B.\nAll right, so s 6, colon, 3,",
    "start": "1568222",
    "end": "1576090"
  },
  {
    "text": "what's the element at index 6? AUDIENCE: The F. ANA BELL: The F. OK, great. And we're working our way\nto the right or to the left?",
    "start": "1576090",
    "end": "1584419"
  },
  {
    "text": "To the right. OK. So we're going to start here,\nbut we need to go this way. But what's the stop index?",
    "start": "1584420",
    "end": "1592220"
  },
  {
    "text": "Yeah. It's not there, it's behind us. So this last one is\nactually an empty string.",
    "start": "1592220",
    "end": "1601430"
  },
  {
    "text": "And I'll even-- we can even-- we\ncan try it with something else, too. So if we have this ABC--",
    "start": "1601430",
    "end": "1607970"
  },
  {
    "text": "if I'm indexing starting from\n2 and I'm going backward to 0,",
    "start": "1607970",
    "end": "1613130"
  },
  {
    "text": "then that gives me\nthe empty string. And the empty string is just\nquote, quote with nothing",
    "start": "1613130",
    "end": "1618500"
  },
  {
    "text": "inside. So that means we didn't\ntake any characters in that particular case.",
    "start": "1618500",
    "end": "1624890"
  },
  {
    "text": " Is that all right? AUDIENCE: Is it valid?",
    "start": "1624890",
    "end": "1631100"
  },
  {
    "text": "ANA BELL: It's valid. We just-- there are no\ncharacters in between the f and behind the f.",
    "start": "1631100",
    "end": "1636615"
  },
  {
    "text": "Yeah.  OK, so I'll mention the strings\nare actually immutable objects.",
    "start": "1636615",
    "end": "1643870"
  },
  {
    "text": "And really, a lot of the\nobjects we've seen so far are immutable. That means they can't be\nmodified once they're created.",
    "start": "1643870",
    "end": "1649690"
  },
  {
    "text": "We've seen this already. When I draw the\nmemory diagrams, when I create a new object, which is,\nfor example, what's the string",
    "start": "1649690",
    "end": "1656770"
  },
  {
    "text": "version of this integer or\nwhen I cast a float to an int, things like that, I'm not\nchanging those original objects",
    "start": "1656770",
    "end": "1663950"
  },
  {
    "text": "I've created, I'm just making\na new green box in my memory and reassigning the name.",
    "start": "1663950",
    "end": "1669700"
  },
  {
    "text": "And we're going to see later\non in this course mutable objects, which means that once\nyou create them in memory,",
    "start": "1669700",
    "end": "1675380"
  },
  {
    "text": "you can modify them, but\nfor now, any time you make a change to\nsuch an object, well,",
    "start": "1675380",
    "end": "1680559"
  },
  {
    "text": "you can't change the object. If you want to get a different\nversion of the object, Python will create a\nnew object in memory",
    "start": "1680560",
    "end": "1688040"
  },
  {
    "text": "and you can reassign the\nvariable to that new object. So in this example,\nif I want to grab--",
    "start": "1688040",
    "end": "1694210"
  },
  {
    "text": "if I have the string\ncar in memory like this and it's bound to\nvariable s and I",
    "start": "1694210",
    "end": "1699760"
  },
  {
    "text": "want to change the first letter\nto a b, I'm not allowed to. Python won't let me do\nsomething like, I want to change",
    "start": "1699760",
    "end": "1706820"
  },
  {
    "text": "the letter at index 0 to a b. That's not allowed. You can get new versions\nof that particular string.",
    "start": "1706820",
    "end": "1715890"
  },
  {
    "text": "So you can do some\nrandom expression to create the bar\nthat you might want.",
    "start": "1715890",
    "end": "1722840"
  },
  {
    "text": "But then the car\nremains in memory. So the car will still\nbe there, we're just",
    "start": "1722840",
    "end": "1729560"
  },
  {
    "text": "losing the binding from it.  So any questions so\nfar on these strings?",
    "start": "1729560",
    "end": "1739670"
  },
  {
    "text": "Mostly they're new data type. You haven't worked with them\nlike you have with numbers, so it's a little bit different.",
    "start": "1739670",
    "end": "1746250"
  },
  {
    "text": "Again, someone had a question. How do you get the A? Backward. Try it out in the console.",
    "start": "1746250",
    "end": "1752419"
  },
  {
    "text": "I'm happy to answer questions,\nhelp you try it-- try it along with you, but that's what\nthe console is there for.",
    "start": "1752420",
    "end": "1758130"
  },
  {
    "text": "The shell. Here, that's what\nit's there for. It's just to try\nquick little things if you ever have a question,\nwhat if this or this and you",
    "start": "1758130",
    "end": "1765560"
  },
  {
    "text": "get to try it out? Now let's move on to\nsome input/output. So far, the programs that we\ncan write are pretty stagnant.",
    "start": "1765560",
    "end": "1773750"
  },
  {
    "text": "There isn't much\ninteresting things that we can do with them. There's no interaction\nwith the user.",
    "start": "1773750",
    "end": "1779870"
  },
  {
    "text": "So so far, when we've tried\nto output things, well,",
    "start": "1779870",
    "end": "1784990"
  },
  {
    "text": "you might think, we have\nbeen outputting things. So when we write in our console\nsomething like 3 plus 2,",
    "start": "1784990",
    "end": "1791950"
  },
  {
    "text": "Python does show\nsomething in the shell. This is maybe how we\ninteract with the user.",
    "start": "1791950",
    "end": "1798029"
  },
  {
    "text": "But this is not\nactual true output. This is-- I call this\npeeking into the value",
    "start": "1798030",
    "end": "1805820"
  },
  {
    "text": "of the expression. But if you were to\nwrite some expression like this in a\nfile editor, Python",
    "start": "1805820",
    "end": "1813560"
  },
  {
    "text": "wouldn't actually print it out. And so here's all the things\nthat we've already tried today.",
    "start": "1813560",
    "end": "1818780"
  },
  {
    "text": "We've created all these strings,\nwe've got the length of s, we indexed. Anytime we typed these\nexpressions in the shell,",
    "start": "1818780",
    "end": "1826220"
  },
  {
    "text": "Python automatically\ngave us our value. But if I were to type those\nexact expressions in a file",
    "start": "1826220",
    "end": "1832550"
  },
  {
    "text": "editor on the left here,\nPython is not actually going to print these out. So this is the file editor.",
    "start": "1832550",
    "end": "1838220"
  },
  {
    "text": "From now on, we're just\ngoing to work with files. I'm going to run it by hitting\nthis little green Run button",
    "start": "1838220",
    "end": "1844100"
  },
  {
    "text": "or hitting F5. Something happened in the shell. My program ran.",
    "start": "1844100",
    "end": "1850310"
  },
  {
    "text": "It says here, it ran this file. But there's no output. Where was the length of s?",
    "start": "1850310",
    "end": "1856235"
  },
  {
    "text": "Where were all these\nindices we've done before? And that's because these\naren't actual outputs. When we type them\ninto the shell,",
    "start": "1856235",
    "end": "1863090"
  },
  {
    "text": "that was just us doing\nquick little expressions in the shell giving us--",
    "start": "1863090",
    "end": "1868490"
  },
  {
    "text": "that's why I call it\npeeking into the value because it's not true output. If you want the\nuser to see output",
    "start": "1868490",
    "end": "1875478"
  },
  {
    "text": "and the shell is how we're\ngoing to show the user output from running a file, we\nhave to explicitly tell Python,",
    "start": "1875478",
    "end": "1881840"
  },
  {
    "text": "hey, I want you to show the\noutput from this expression, or I want you to show the\noutput from this command.",
    "start": "1881840",
    "end": "1889129"
  },
  {
    "text": "And we do this using\nthe print command. So if we take our\nexpression that we want to show the output from\nand wrap it in a print command,",
    "start": "1889130",
    "end": "1896810"
  },
  {
    "text": "Python will then show that\noutput and only that output. Can you imagine if\nwe wrote a file that",
    "start": "1896810",
    "end": "1903380"
  },
  {
    "text": "did all these operations and\nall these intermediary outputs were being shown? That would lead to a\nreally messy file--",
    "start": "1903380",
    "end": "1909600"
  },
  {
    "text": "or a messy program. And so that's why we\nhave a command where you can explicitly tell\nPython just the things you",
    "start": "1909600",
    "end": "1915270"
  },
  {
    "text": "want to show to the user. So here, if you want to\nprint the length of s, we can wrap the length\nof in a print statement",
    "start": "1915270",
    "end": "1924000"
  },
  {
    "text": "and then run the file. And now, the only thing\nthat gets shown to the user is the thing I explicitly\nprinted out, the 3.",
    "start": "1924000",
    "end": "1933090"
  },
  {
    "text": "And then down here, if I want\nto print this other result-- the result of this\nother expression,",
    "start": "1933090",
    "end": "1938520"
  },
  {
    "text": "I can wrap that around a print\nstatement and Python will then print that one as well. But now I'm in charge of showing\nthe user the things that I",
    "start": "1938520",
    "end": "1946350"
  },
  {
    "text": "want to show them.  OK.",
    "start": "1946350",
    "end": "1953600"
  },
  {
    "text": "So whenever you have\na print statement, Python will print that\nresulting expression and then enter a new line.",
    "start": "1953600",
    "end": "1959460"
  },
  {
    "text": "So as you saw here, we had\ntwo print statements one, around len and one\naround s at negative 3.",
    "start": "1959460",
    "end": "1964850"
  },
  {
    "text": "And Python put the result of\nthese expressions, each one on a different line.",
    "start": "1964850",
    "end": "1970250"
  },
  {
    "text": "Sometimes you might want to have\nexpressions on the same line-- or the results of expressions\nall on the same line.",
    "start": "1970250",
    "end": "1977820"
  },
  {
    "text": "So we can do that. We can put all of\nthese different objects within the same print statement.",
    "start": "1977820",
    "end": "1984080"
  },
  {
    "text": "We separate them by a comma\nwithin the print statement. That's down here.",
    "start": "1984080",
    "end": "1989299"
  },
  {
    "text": "Python will print\nall of our objects no matter what type they\nare, and it will separate",
    "start": "1989300",
    "end": "1995299"
  },
  {
    "text": "each object by a space. So there's my object \"the,\"\nthere's my object the number 3;",
    "start": "1995300",
    "end": "2001970"
  },
  {
    "text": "and there's my object\nthe string \"musketeers\" and it printed it all\non one line with a space in between them.",
    "start": "2001970",
    "end": "2007400"
  },
  {
    "text": "And that's what this comma\ndoes, it automatically inserts the space.",
    "start": "2007400",
    "end": "2012690"
  },
  {
    "text": "Now let's say you don't want\na space for whatever reason. What if we try concatenating\nthese objects together?",
    "start": "2012690",
    "end": "2019570"
  },
  {
    "text": "Remember, we saw\nconcatenation, we said it doesn't\nautomatically insert spaces, it just merges the\nstrings together.",
    "start": "2019570",
    "end": "2025410"
  },
  {
    "text": "And we run it? Well, I already gave it away. It's going to be an error,\nbut let's see the error.",
    "start": "2025410",
    "end": "2031230"
  },
  {
    "text": "It's a type error. It says can only concatenate\nstrings, not integers",
    "start": "2031230",
    "end": "2036300"
  },
  {
    "text": "to strings. All right, makes sense. This is a string, this is not\na string, so that's not OK,",
    "start": "2036300",
    "end": "2042960"
  },
  {
    "text": "and this is a string. So instead of concatenating\ndifferent objects together,",
    "start": "2042960",
    "end": "2049590"
  },
  {
    "text": "we now have to remember to\ncast every object that's not a string to a string.",
    "start": "2049590",
    "end": "2056638"
  },
  {
    "text": "So this line is exactly the\nsame as the previous one except that b, which was\nthe number the integer 3,",
    "start": "2056639",
    "end": "2062690"
  },
  {
    "text": "is now being cast to a string. So I'm wrapping the\nb around the str.",
    "start": "2062690",
    "end": "2068388"
  },
  {
    "text": "And that casts my\ninteger to the string, and now Python is\nhappy to concatenate",
    "start": "2068389",
    "end": "2074599"
  },
  {
    "text": "these three strings for me. ",
    "start": "2074600",
    "end": "2083039"
  },
  {
    "text": "OK that's basically what I said. So that's output using\nthe print statement.",
    "start": "2083040",
    "end": "2088560"
  },
  {
    "text": "Now how about input? We can get input from the\nuser, not surprisingly,",
    "start": "2088560",
    "end": "2093860"
  },
  {
    "text": "with a command called input. The format of input\nis usually like this.",
    "start": "2093860",
    "end": "2099859"
  },
  {
    "text": "So we have the input command. In the parentheses,\nwe give it a string. And then we usually want to\nsave the input to a variable.",
    "start": "2099860",
    "end": "2108730"
  },
  {
    "text": "So the next few slides are\ngoing to go through step by step what happens when I\nhave these two lines of code.",
    "start": "2108730",
    "end": "2114630"
  },
  {
    "text": "Text equals input \"Type\nanything,\" and then I'm going to print 5 times text.",
    "start": "2114630",
    "end": "2120170"
  },
  {
    "text": "So when Python sees a line\nthat says input and then some string, Python will\nautomatically take the string",
    "start": "2120170",
    "end": "2128680"
  },
  {
    "text": "within the input-- so in this particular case,\nhere's my input command. The string inside the input is\n\"Type anything,\" colon, space.",
    "start": "2128680",
    "end": "2136809"
  },
  {
    "text": "On the shell, Python will\nput that string for you. And then it will wait.",
    "start": "2136810",
    "end": "2143730"
  },
  {
    "text": "It waits for the user to type\nsome stuff in and hit Enter.",
    "start": "2143730",
    "end": "2149040"
  },
  {
    "text": "As soon as the user hits Enter,\nwhatever the user typed in-- so let's say the user\ntyped in \"howdy.\"",
    "start": "2149040",
    "end": "2155130"
  },
  {
    "text": "Whatever the user\ntypes in, will be saved as a string replacing\nthis input statement.",
    "start": "2155130",
    "end": "2166210"
  },
  {
    "text": "So you can think of the\ninput like an expression. It's a weird one because\nit's waiting for the user",
    "start": "2166210",
    "end": "2172320"
  },
  {
    "text": "to give us something. But in the end, the input gets\nreplaced by the string version",
    "start": "2172320",
    "end": "2179130"
  },
  {
    "text": "of whatever the user typed in. So the user can\ntype in something-- numbers, letters,\ncharacters, anything.",
    "start": "2179130",
    "end": "2185920"
  },
  {
    "text": "As soon as the user hits Enter,\nwhatever the user typed in will be saved as a string\nreplacing this input.",
    "start": "2185920",
    "end": "2193480"
  },
  {
    "text": "So in memory, the way\nthis looks like is-- this is our memory cloud. Here is this-- here is this\nobject that I've created,",
    "start": "2193480",
    "end": "2201430"
  },
  {
    "text": "which is the exact\ncharacters the user typed in. OK, well, if the user\ntyped in \"howdy,\"",
    "start": "2201430",
    "end": "2209220"
  },
  {
    "text": "then what does this line end up? Being text is equal\nto the string \"howdy.\"",
    "start": "2209220",
    "end": "2215340"
  },
  {
    "text": "And that basically is What we've\nseen on the previous two slides when we've worked with strings. We're going to\nassign this variable",
    "start": "2215340",
    "end": "2222450"
  },
  {
    "text": "and bind it to this particular\nstring of characters.",
    "start": "2222450",
    "end": "2227700"
  },
  {
    "text": "Now the next line is easy. We're going to print whatever\nthe result of repeating text",
    "start": "2227700",
    "end": "2233089"
  },
  {
    "text": "is five times. So the print will\nshow on the shell,",
    "start": "2233090",
    "end": "2239000"
  },
  {
    "text": "howdyhowdyhowdyhowdyhowdy. Whatever the user\ntyped in five times. ",
    "start": "2239000",
    "end": "2247289"
  },
  {
    "text": "OK. Let's look at another example. In this particular\none, we're going to ask the user for a number.",
    "start": "2247290",
    "end": "2252930"
  },
  {
    "text": "And I want to print 5 times\nwhatever the user types in. So num1 will, again, grab input.",
    "start": "2252930",
    "end": "2260250"
  },
  {
    "text": "So what we're asking the user\nto do is to type in a number. So when the Python sees this,\nit prints \"Type a number\"",
    "start": "2260250",
    "end": "2269250"
  },
  {
    "text": "and then waits for user input. Let's say the user\ntypes in the number 3. That gets saved as the string 3.",
    "start": "2269250",
    "end": "2278828"
  },
  {
    "text": "Again, so no matter\nwhat the user types in, it's being saved as a string. Even if it's a\nnumber, it's being saved as a string that number.",
    "start": "2278828",
    "end": "2286470"
  },
  {
    "text": "So to Python, it's a character. To us, it's a number, but to\nPython, it's still a character.",
    "start": "2286470",
    "end": "2292840"
  },
  {
    "text": "So num1 in memory basically\nbecomes the string 3, just one single character 3.",
    "start": "2292840",
    "end": "2301510"
  },
  {
    "text": "When I print 5 times num1, what\nis that going to look like? You guys tell me.",
    "start": "2301510",
    "end": "2306710"
  },
  {
    "text": "AUDIENCE: 33333. ANA BELL: Exactly. Right. 33333. Because we're working with a\nstring here, not an integer.",
    "start": "2306710",
    "end": "2315880"
  },
  {
    "text": "If we want to work\nwith an integer, we have to wrap\nour input statement with a cast statement.",
    "start": "2315880",
    "end": "2322670"
  },
  {
    "text": "So again, this is\nwhat Python does. We can combine\nexpressions together. In this particular\ncase, we're going",
    "start": "2322670",
    "end": "2328360"
  },
  {
    "text": "to combine the\ncasting, the input, with the input statement. So now the user can\ntype in for me 3 again.",
    "start": "2328360",
    "end": "2335950"
  },
  {
    "text": "The input itself is\ngoing to be the string 3, but that line\nbecomes num2 equals",
    "start": "2335950",
    "end": "2342700"
  },
  {
    "text": "int, parentheses, string 3. And that-- I did it on\nthe shell earlier today.",
    "start": "2342700",
    "end": "2350020"
  },
  {
    "text": "When we cast a number--\na string to an int, it becomes the number, that int.",
    "start": "2350020",
    "end": "2355680"
  },
  {
    "text": " So num2 is then going to be 3.",
    "start": "2355680",
    "end": "2363290"
  },
  {
    "text": "In memory, num2 is not\nthe string 3 anymore because we've cast it to 3. So when we print\n5 times 3, we're",
    "start": "2363290",
    "end": "2370850"
  },
  {
    "text": "doing the mathematical\noperation 5 times 3, 15.",
    "start": "2370850",
    "end": "2378110"
  },
  {
    "text": "OK. Let's have you code. So I'm going to give\nyou a couple of minutes.",
    "start": "2378110",
    "end": "2383240"
  },
  {
    "text": "I'm going to have you write a\nprogram that is interactive. So it's going to ask\nthe user for something and it's going to print\nsomething back to the user.",
    "start": "2383240",
    "end": "2390570"
  },
  {
    "text": "So we're going to ask\nthe user for a verb, and then I want you to\nprint two things for me. The first is whatever the\nverb that user typed in,",
    "start": "2390570",
    "end": "2397610"
  },
  {
    "text": "you're going to write \"I can\nwhatever better than you\" on one line. And then on the next line-- so\nwith another print statement,",
    "start": "2397610",
    "end": "2404570"
  },
  {
    "text": "I want you to print\nthat verb five times. So if the user types in\n\"run,\" you're going to write \"I can run better than you.\"",
    "start": "2404570",
    "end": "2410359"
  },
  {
    "text": "And then on the next\nline, run run run run run. So the way these You Try\nIts work is I actually",
    "start": "2410360",
    "end": "2417140"
  },
  {
    "text": "have some space here. I've already pre-written\ninstructions for you. And all you have to do\nis fill in the code.",
    "start": "2417140",
    "end": "2424280"
  },
  {
    "text": "So I'll give you a\ncouple of minutes and then we'll write it together\nwith suggestions from you and we'll see how far we can\nget, and we'll definitely--",
    "start": "2424280",
    "end": "2432980"
  },
  {
    "text": "we'll definitely\nfinish it together so you don't have to\nfinish it on your own. ",
    "start": "2432980",
    "end": "2442970"
  },
  {
    "text": "Yeah? AUDIENCE: It this supposed\nto have [INAUDIBLE]?? ",
    "start": "2442970",
    "end": "2448400"
  },
  {
    "text": "ANA BELL: You should\nhave this file. It's part of the zip file\nyou downloaded for today. AUDIENCE: How do\nI-- oh, here it is.",
    "start": "2448400",
    "end": "2454870"
  },
  {
    "text": "ANA BELL: Yeah. ",
    "start": "2454870",
    "end": "2465588"
  },
  {
    "text": "All right, does anyone\nhave a start for me? So how can I ask\nthe user for input?",
    "start": "2465588",
    "end": "2470789"
  },
  {
    "text": "Yeah? AUDIENCE: I think the\nquestion was [INAUDIBLE]..",
    "start": "2470790",
    "end": "2476140"
  },
  {
    "text": " ANA BELL: Yep. That works for me.",
    "start": "2476140",
    "end": "2482049"
  },
  {
    "text": "And I'm adding a little extra\nspace here between the colon or whatever prompt you have just\nso that when the user types it",
    "start": "2482050",
    "end": "2488170"
  },
  {
    "text": "in, it isn't right\nbeside the colon or the end of this string.",
    "start": "2488170",
    "end": "2494530"
  },
  {
    "text": " So as soon as we do\nthis, the user will--",
    "start": "2494530",
    "end": "2499690"
  },
  {
    "text": "the program will wait, and the\nuser will get to type something in. What's the next step? What's the first-- how can you\nhow can you use this input?",
    "start": "2499690",
    "end": "2509400"
  },
  {
    "text": "AUDIENCE: Do print. ANA BELL: Yep. Let's print something. ",
    "start": "2509400",
    "end": "2518190"
  },
  {
    "text": "\"I can\" in quotes. Yep, \"I can.\" AUDIENCE: Could you, like,\noutside of the quotes,",
    "start": "2518190",
    "end": "2523290"
  },
  {
    "text": "put the question\nwithin [INAUDIBLE]?? ANA BELL: Yep. We can put a question. Yep, exactly. \"I can,\" question, comma,\nbecause it's another object,",
    "start": "2523290",
    "end": "2530880"
  },
  {
    "text": "and I'm happy to put\na space in between it. \"I can,\" question, another\nstring, \"better than you.\"",
    "start": "2530880",
    "end": "2536718"
  },
  {
    "text": "Whoops. OK. There. ",
    "start": "2536718",
    "end": "2542930"
  },
  {
    "text": "And we don't need to write\nthe full program right away. We can just test\nthis little bit out. So choose a verb run.",
    "start": "2542930",
    "end": "2548960"
  },
  {
    "text": "The one I gave you is fine. That looks good so far. All right. So then we can keep\nworking on the second part.",
    "start": "2548960",
    "end": "2555349"
  },
  {
    "text": "How can I print that\nverb five times?",
    "start": "2555350",
    "end": "2561670"
  },
  {
    "text": "Yeah? AUDIENCE: Print and\nthen question times 5. ANA BELL: Print\nquestion times 5.",
    "start": "2561670",
    "end": "2567670"
  },
  {
    "text": "OK, let's run it and\nsee what happens. Run.",
    "start": "2567670",
    "end": "2573710"
  },
  {
    "text": "Not quite. I'm missing spaces, but\nthis is an awesome start. How can I add the\nspaces in there?",
    "start": "2573710",
    "end": "2580860"
  },
  {
    "text": "Yeah? AUDIENCE: Parentheses, then\nverb plus, like, quotes",
    "start": "2580860",
    "end": "2586950"
  },
  {
    "text": "with a space. ANA BELL: In parentheses, yep. We can concatenate\nit with a space. Exactly.",
    "start": "2586950",
    "end": "2594600"
  },
  {
    "text": "All of that times 5. Yeah, let's try that. Run. Yep.",
    "start": "2594600",
    "end": "2599910"
  },
  {
    "text": "That looks pretty good. I do want to mention one thing. There is one improvement we\ncan make to this program.",
    "start": "2599910",
    "end": "2607060"
  },
  {
    "text": "If we look at the\noutput here, the thing that we're actually printing\nout is this verb space.",
    "start": "2607060",
    "end": "2614020"
  },
  {
    "text": "There's 1, 2, 3,\n4-- and the last one actually prints it with\na space at the end.",
    "start": "2614020",
    "end": "2620770"
  },
  {
    "text": "So a challenge for you, and the\nanswer is a little bit lower-- I provide you guys with\nthe answers to these,",
    "start": "2620770",
    "end": "2626170"
  },
  {
    "text": "but a challenge for\nyou is think about how you can change it-- change\nthis last print statement so",
    "start": "2626170",
    "end": "2631480"
  },
  {
    "text": "that this last run doesn't\nactually have that extra space. Just think about it.",
    "start": "2631480",
    "end": "2638093"
  },
  {
    "text": "You don't have to\ndo it right now. ",
    "start": "2638093",
    "end": "2643990"
  },
  {
    "text": "OK. So with what we know\nso far, we can actually apply some of these ideas\nto a more numerical example.",
    "start": "2643990",
    "end": "2651140"
  },
  {
    "text": "So Newton's method is\na way to actually grab the roots of a\npolynomial numerically",
    "start": "2651140",
    "end": "2657549"
  },
  {
    "text": "using this idea called\nsuccessive approximation. We can't actually write\nthe full algorithm",
    "start": "2657550",
    "end": "2663010"
  },
  {
    "text": "with what we know so\nfar, but we can write a really important part of it. The part is-- the\npart that we can",
    "start": "2663010",
    "end": "2668170"
  },
  {
    "text": "write is the one that\ngets a next guess based on an initial guess.",
    "start": "2668170",
    "end": "2673920"
  },
  {
    "text": "So you don't need to understand\nhow the algorithm works, but basically, the next guess\nbased on an original guess",
    "start": "2673920",
    "end": "2679820"
  },
  {
    "text": "looks like this. This is the formula. So the next guess is the\noriginal guess minus-- and we evaluate the\nformula for whatever",
    "start": "2679820",
    "end": "2689270"
  },
  {
    "text": "polynomial we want to find\nat the original guess divided by the derivative of that\nfunction at the same guess.",
    "start": "2689270",
    "end": "2699020"
  },
  {
    "text": "So here's just some code we've\ngot asking the user for input.",
    "start": "2699020",
    "end": "2705050"
  },
  {
    "text": "What x do we want to\nfind the cube root of? Then we ask the user\nfor input, what guess do you want to start with?",
    "start": "2705050",
    "end": "2710960"
  },
  {
    "text": "And then we can just print\nthe current estimate cubed. So we just guess cubed.",
    "start": "2710960",
    "end": "2717080"
  },
  {
    "text": "And then the next guess is just\nfollowing the formula up here. The next guess is going to\nsay it's my original guess.",
    "start": "2717080",
    "end": "2724010"
  },
  {
    "text": "So the g that I read\nin from the student-- or from the input minus,\nand now I have a division.",
    "start": "2724010",
    "end": "2730850"
  },
  {
    "text": "The top of it is\ngoing to be f at g. And the computer is\nnot evaluating f.",
    "start": "2730850",
    "end": "2737672"
  },
  {
    "text": "We have to give-- we have\nto actually write down what the formula is-- the function is. We want to evaluate at g,\nso it's g cubed minus x.",
    "start": "2737672",
    "end": "2744680"
  },
  {
    "text": "That's our function up there. Divided by the derivative. And again, the\nprogram is not going",
    "start": "2744680",
    "end": "2750590"
  },
  {
    "text": "to evaluate the\nderivative automatically. We're going to tell it what\nthe derivative is manually. So the derivative of g cubed\nminus x is just 3g squared,",
    "start": "2750590",
    "end": "2759600"
  },
  {
    "text": "so then we just\nhard code that in. And the next guest\nto try is just going to be that particular\ndivision and subtraction.",
    "start": "2759600",
    "end": "2767761"
  },
  {
    "text": "AUDIENCE: Is this a\nfunction of the derivative? ANA BELL: I'm sorry? AUDIENCE: Sorry. Is this a function for the\nderivative of [INAUDIBLE]??",
    "start": "2767761",
    "end": "2773549"
  },
  {
    "text": " ANA BELL: There are\nPython packages that allow you to do that,\nbut for our purposes,",
    "start": "2773550",
    "end": "2779619"
  },
  {
    "text": "we're just going to hard code\nit in this case, but yeah. So the way this looks\nin code is as follows.",
    "start": "2779620",
    "end": "2788910"
  },
  {
    "text": "That's exactly what\nwe had in there. And if we run this\nprogram, all it does is-- let's say we want to\nfind the cube root of, say,",
    "start": "2788910",
    "end": "2794898"
  },
  {
    "text": "27, let's start with,\nI don't know, 5. It tells me that 5 cubed is\n125, way too big, obviously.",
    "start": "2794898",
    "end": "2801900"
  },
  {
    "text": "So the next guest\nto try is 3.69. And that's all the program does.",
    "start": "2801900",
    "end": "2807180"
  },
  {
    "text": "It doesn't take this next\nguess and do another guess. We haven't learned how\nto do such a thing yet,",
    "start": "2807180",
    "end": "2812260"
  },
  {
    "text": "but we will in the next\ncouple of lectures. ",
    "start": "2812260",
    "end": "2818430"
  },
  {
    "text": "One other thing\nI want to mention is this thing\ncalled an f-string. It's something that\nbecame available I",
    "start": "2818430",
    "end": "2825360"
  },
  {
    "text": "think a couple of years ago\nin Python with Python 3.6. It's a way more\nconvenient way for us",
    "start": "2825360",
    "end": "2831900"
  },
  {
    "text": "to print out mixtures of literal\ntext and resulting expressions.",
    "start": "2831900",
    "end": "2839589"
  },
  {
    "text": "So if you have a bunch of\ncomplicated expressions you want to print\nout, an f-string is the way to do it these days.",
    "start": "2839590",
    "end": "2846720"
  },
  {
    "text": "What we know is these\nfirst two lines. This is what we've learned\nin the past couple of slides. So if you wanted to\nhave these two values",
    "start": "2846720",
    "end": "2854310"
  },
  {
    "text": "and print this big number is\nwhatever fraction percent out",
    "start": "2854310",
    "end": "2859680"
  },
  {
    "text": "of the original number, if you\nactually run this in the Python",
    "start": "2859680",
    "end": "2864869"
  },
  {
    "text": "file, you'll see\nthat this comma here puts an extra space between\nmy number and the percent.",
    "start": "2864870",
    "end": "2871246"
  },
  {
    "text": "And that doesn't look very good. When you have 3%, you're\nexpecting the percent sign to be right by the 3.",
    "start": "2871247",
    "end": "2877140"
  },
  {
    "text": "But this comma adds\nfor me an extra space, so it looks a little bit weird.",
    "start": "2877140",
    "end": "2882309"
  },
  {
    "text": "Which means that our solution\nwas to cast things to strings. So if we wanted to have\nthat percent sign be right",
    "start": "2882310",
    "end": "2888910"
  },
  {
    "text": "beside the number, we'd\nconcatenate this cast with the percent.",
    "start": "2888910",
    "end": "2895680"
  },
  {
    "text": "But f-strings allow us\nto do this all in one. So there's no concatenation to\nthink about, there's no casting",
    "start": "2895680",
    "end": "2902280"
  },
  {
    "text": "to think about. f-strings basically are this\nf and then a long string.",
    "start": "2902280",
    "end": "2909540"
  },
  {
    "text": "And it's a mixture of\nexpressions and things that I want to print\nliterally to the screen.",
    "start": "2909540",
    "end": "2915030"
  },
  {
    "text": "So the thing that's not\ninside a curly bracket are all things I'm going to\nprint literally to the screen.",
    "start": "2915030",
    "end": "2921150"
  },
  {
    "text": "So the space is space, and\nthen later on, percent, space, \"of percent,\" those are all\nthings that will literally",
    "start": "2921150",
    "end": "2927420"
  },
  {
    "text": "be printed to the screen. Anything that's\nwithin a curly bracket is considered an\nexpression in Python.",
    "start": "2927420",
    "end": "2933540"
  },
  {
    "text": "And so before Python prints\nout the thing to the screen, it's actually going to evaluate\nwhatever num times fraction is,",
    "start": "2933540",
    "end": "2940290"
  },
  {
    "text": "and it knows these are\ngoing to be variables. And then later on, fraction\ntimes 100, and then later on, none.",
    "start": "2940290",
    "end": "2945750"
  },
  {
    "text": "These are all variables\nor expressions that it will evaluate\nbefore actually putting them",
    "start": "2945750",
    "end": "2950790"
  },
  {
    "text": "on the screen. And now notice,\nthese expressions, we might have had to cast\nto strings beforehand",
    "start": "2950790",
    "end": "2957099"
  },
  {
    "text": "if we wanted to\nconcatenate them, but now we don't because\nthey're in this special format with the curly brackets\nof the f-string.",
    "start": "2957100",
    "end": "2964069"
  },
  {
    "text": "So just something to practice. I'll interchange-- I'll\nuse sometimes this, I'll use sometimes casting,\nI'll use sometimes f-strings,",
    "start": "2964070",
    "end": "2971410"
  },
  {
    "text": "but if you can use\nf-strings whenever you can, that's really the way to\ngo in Python these days.",
    "start": "2971410",
    "end": "2981000"
  },
  {
    "text": "So the big idea, actually,\neven with f-strings, is that you can place\nexpressions anywhere. We saw-- we placed expression--",
    "start": "2981000",
    "end": "2987410"
  },
  {
    "text": "I forget here-- where\nwe indexed-- we placed an expression in the index. Now we're placing expressions\ninside print statements.",
    "start": "2987410",
    "end": "2995390"
  },
  {
    "text": "And now we're placing\nexpressions inside f-strings. So expressions can be\nplaced really anywhere, which is pretty awesome.",
    "start": "2995390",
    "end": "3001180"
  },
  {
    "text": "Very versatile. Python will just\nevaluate them and then just move on to the next lines.",
    "start": "3001180",
    "end": "3008040"
  },
  {
    "text": "OK. So the last topic-- I'm sorry. Any other questions about\nthe inputs and outputs?",
    "start": "3008040",
    "end": "3014359"
  },
  {
    "text": "Is that all right? OK. So the last thing that\nwe'll talk about today--",
    "start": "3014360",
    "end": "3021650"
  },
  {
    "text": "and we will maybe\ntalk a little bit about it next time, is\nconditions for branching.",
    "start": "3021650",
    "end": "3027410"
  },
  {
    "text": "So right now, the kinds\nof programs we can write are basically very linear. We have a bunch of\nlines of code and they",
    "start": "3027410",
    "end": "3035180"
  },
  {
    "text": "get evaluated one by one. There's no way to\nskip around, there's no way to repeat things,\nthere's no decision points",
    "start": "3035180",
    "end": "3040670"
  },
  {
    "text": "in the programs. The values that you\nget are just the values that are in the program. Now we're going to look\nat ways that we can add",
    "start": "3040670",
    "end": "3047960"
  },
  {
    "text": "decision points in our program. So if some value-- if some variable value is less\nthan some other variable value,",
    "start": "3047960",
    "end": "3056060"
  },
  {
    "text": "we want to evaluate some code. And otherwise, we'll\ndo some other code. So some code can now be skipped\nin programs with this new--",
    "start": "3056060",
    "end": "3066020"
  },
  {
    "text": "with this new idea. Before we go on to showing\nyou exactly how to do that,",
    "start": "3066020",
    "end": "3071510"
  },
  {
    "text": "I'm going to talk about another\nnotion of equal in programming, and this might be more\nthe notion of equal",
    "start": "3071510",
    "end": "3076660"
  },
  {
    "text": "you might be used to in math. So the first notion of equal\nis the one we've already seen.",
    "start": "3076660",
    "end": "3081940"
  },
  {
    "text": "It's assignment. It's done with one equal sign. The value on the\nright-hand side is",
    "start": "3081940",
    "end": "3088270"
  },
  {
    "text": "bound to the variable\non the left-hand side. That we've known. Double equal in Python\nis how we tell Python",
    "start": "3088270",
    "end": "3098730"
  },
  {
    "text": "that we'd like to know whether\nthese two expressions are equal-- or equivalent. Sorry, not equal.",
    "start": "3098730",
    "end": "3104470"
  },
  {
    "text": "So if we're going to be\nlooking at equivalency, how do we express equivalency?",
    "start": "3104470",
    "end": "3112590"
  },
  {
    "text": "Well, if something is\nequal to something else, we can say yes or no. We can say true or false.",
    "start": "3112590",
    "end": "3119620"
  },
  {
    "text": "True or false\nshould ring a bell. It's the Boolean data type\nthat we saw last lecture.",
    "start": "3119620",
    "end": "3125170"
  },
  {
    "text": "And so now that\nwe're going to show you equality or\nconditionals in programming,",
    "start": "3125170",
    "end": "3131497"
  },
  {
    "text": "we're going to start talking\nabout Booleans a little bit more. So expressions don't just\nhave to be numerical.",
    "start": "3131497",
    "end": "3138990"
  },
  {
    "text": "Expressions can actually\ngive us Boolean results. So for example, an\nexpression like 2 less than 3",
    "start": "3138990",
    "end": "3150520"
  },
  {
    "text": "is OK in Python, and\nthis expression actually evaluates to a certain value.",
    "start": "3150520",
    "end": "3156340"
  },
  {
    "text": "It's not a number,\nit evaluates to true, the Boolean value true,\nbecause, yes, 2 is less than 3.",
    "start": "3156340",
    "end": "3163390"
  },
  {
    "text": " The equal sign here, this\nnotion with a double equal,",
    "start": "3163390",
    "end": "3171070"
  },
  {
    "text": "is how we ask Python to tell\nus whether two things are equivalent. And this will be the\nBoolean value false.",
    "start": "3171070",
    "end": "3177820"
  },
  {
    "text": " So here's a bunch\nof other operators",
    "start": "3177820",
    "end": "3184380"
  },
  {
    "text": "that we can run on any\ntype, really, in Python. Most of them-- most\nof the time we're",
    "start": "3184380",
    "end": "3190230"
  },
  {
    "text": "going to run them\non numbers, but they can be run on strings and\nthings like that as well.",
    "start": "3190230",
    "end": "3195640"
  },
  {
    "text": "So obviously the double equal\nsign checks for equality. So if i is the same as\nj, this entire expression",
    "start": "3195640",
    "end": "3201780"
  },
  {
    "text": "is replaced with true. And if they're not equivalent,\nthis entire expression is replaced with false.",
    "start": "3201780",
    "end": "3208380"
  },
  {
    "text": "If we want to check\nfor inequality, we use not equal-- so\nexclamation mark equal",
    "start": "3208380",
    "end": "3214650"
  },
  {
    "text": "is-- it means not equal. So if the number-- or whatever object i is\nnot equal to object j,",
    "start": "3214650",
    "end": "3222480"
  },
  {
    "text": "then this entire\nexpression is true. If they are equal, then the\nentire expression is false.",
    "start": "3222480",
    "end": "3230040"
  },
  {
    "text": "And then of course, we've\ngot the less than, less than or equal to, greater,\ngreater than, or equal to",
    "start": "3230040",
    "end": "3235529"
  },
  {
    "text": "to work with as well. We can apply these to strings. And with strings, it's important\nto be careful about case.",
    "start": "3235530",
    "end": "3242940"
  },
  {
    "text": "So for example, lower case\na equivalent to upper case A is false because they\nare not the same character.",
    "start": "3242940",
    "end": "3249780"
  },
  {
    "text": " Now that we're talking\nabout Boolean operators,",
    "start": "3249780",
    "end": "3256910"
  },
  {
    "text": "we can actually start to\ncombine them together. So if I have the expression,\nfor example, 2 less than 3,",
    "start": "3256910",
    "end": "3264920"
  },
  {
    "text": "like I wrote on the\nboard, that's true. But I can combine that\nexpression with another one.",
    "start": "3264920",
    "end": "3270140"
  },
  {
    "text": "Actually by itself, I can say,\nwhat is not 2 less than 3? And that will be false.",
    "start": "3270140",
    "end": "3275990"
  },
  {
    "text": "It's the opposite of it. But I can also combine\nBoolean expressions together. So I can say, what's 2 less\nthan 3 and 3 less than 4?",
    "start": "3275990",
    "end": "3285335"
  },
  {
    "text": " So 2 less than 3 is true.",
    "start": "3285335",
    "end": "3290830"
  },
  {
    "text": "And 3 less than 4 is also true. So the combination of\nthese two expressions--",
    "start": "3290830",
    "end": "3295900"
  },
  {
    "text": "of these two Boolean expressions\nis what is true and true? True.",
    "start": "3295900",
    "end": "3302030"
  },
  {
    "text": "So if one is true and\nthe other one is true, then both of them--\nand both of them",
    "start": "3302030",
    "end": "3307160"
  },
  {
    "text": "together are going to be true. If one of these is false-- so is 3 greater than 4 is false,\nwell, what's false and true",
    "start": "3307160",
    "end": "3317810"
  },
  {
    "text": "is going to be false. So if one of these\noperators is false, then the entire\nexpression is false.",
    "start": "3317810",
    "end": "3325220"
  },
  {
    "text": "And you don't have to\nremember this truth table. You can always\ncheck it like I just did right here in the console.",
    "start": "3325220",
    "end": "3333530"
  },
  {
    "text": "But at a high level, when\nwe're doing the \"and\" operator between two Boolean expressions,\nwe need both of the expressions",
    "start": "3333530",
    "end": "3341000"
  },
  {
    "text": "to be true for the\nresult \"and\" to be true.",
    "start": "3341000",
    "end": "3346210"
  },
  {
    "text": "The \"or\" is the other\none we usually-- we can usually do. The \"or\" is always true except\nfor when both of the operators",
    "start": "3346210",
    "end": "3354760"
  },
  {
    "text": "are false. And it makes sense makes\nsense in English to write.",
    "start": "3354760",
    "end": "3360690"
  },
  {
    "text": "If either operator is true,\nthen the entire result is true. But when both are false,\nthe \"or\" of both of them",
    "start": "3360690",
    "end": "3367350"
  },
  {
    "text": "is false as well. So here's a little\nexample where we can",
    "start": "3367350",
    "end": "3372980"
  },
  {
    "text": "use these operators in Python. So we can draw the little\nmemory diagram as well. So pset_time is 15, there's\nmy variable. sleep_time is 8,",
    "start": "3372980",
    "end": "3380900"
  },
  {
    "text": "there's my other variable. I'm going to print sleep_time\nis greater than pset_time. So here, my print\nstatement is going",
    "start": "3380900",
    "end": "3386420"
  },
  {
    "text": "to grab that expression,\nwhich evaluates to false.",
    "start": "3386420",
    "end": "3392380"
  },
  {
    "text": "8 is less than 15 is false, so\nthat's going to print false.",
    "start": "3392380",
    "end": "3397960"
  },
  {
    "text": "And then I have\ntwo more variables. These ones just\nhappen to be Booleans. derive is true, drink is\nfalse, so drink and derive",
    "start": "3397960",
    "end": "3405010"
  },
  {
    "text": "is going to be false because\none of them is false. And so here, I've got\nthis other variable both,",
    "start": "3405010",
    "end": "3411119"
  },
  {
    "text": "and then I'm going to\nprint false to the console. ",
    "start": "3411120",
    "end": "3417020"
  },
  {
    "text": "OK. Quick You Try It for you guys. So let's have you write\na program that saves",
    "start": "3417020",
    "end": "3423200"
  },
  {
    "text": "a secret number in a variable. So that's going to be\nyour program's secret. Presumably people\nusing your program",
    "start": "3423200",
    "end": "3430095"
  },
  {
    "text": "won't be looking at\nthe program itself, they'll just be interacting\nwith the program in the shell. So save a secret\nnumber in a variable,",
    "start": "3430095",
    "end": "3436339"
  },
  {
    "text": "ask the user to guess a\nnumber, and then print either true or false. If it's the same as\nyour secret or not.",
    "start": "3436340",
    "end": "3442680"
  },
  {
    "text": "So it's here in this\nYou Try It down here.",
    "start": "3442680",
    "end": "3447930"
  },
  {
    "text": "So you can start with\nsomething like secret equals and then put your favorite\nnumber there, 5 whatever,",
    "start": "3447930",
    "end": "3453150"
  },
  {
    "text": "and then write the\nrest of the code. So ask the user\nto guess a number, print a Boolean depending\non whether the guess",
    "start": "3453150",
    "end": "3460290"
  },
  {
    "text": "equals this secret or not. So I'll give you a couple\nof minutes to write that. ",
    "start": "3460290",
    "end": "3467920"
  },
  {
    "text": "Yeah? Sorry. AUDIENCE: Do you put the symbol\n\"and\" similar to [INAUDIBLE]??",
    "start": "3467920",
    "end": "3473820"
  },
  {
    "text": "ANA BELL: If you use a symbol\n\"and,\" it's not the same. You have to actually\ntype out A-N-D in Python.",
    "start": "3473820",
    "end": "3479490"
  },
  {
    "text": "The \"and\" means something else. It's an operator with\nthe bits of the number.",
    "start": "3479490",
    "end": "3485490"
  },
  {
    "text": "So something-- it's not going\nto give the same answers. Yeah.",
    "start": "3485490",
    "end": "3490950"
  },
  {
    "text": "Right, you're thinking about\nJava or C++ or something, right? Yeah. ",
    "start": "3490950",
    "end": "3500740"
  },
  {
    "text": "All right. Does anyone have a start\nfor me for this program? How do I grab the user input? ",
    "start": "3500740",
    "end": "3510300"
  },
  {
    "text": "guess equals input? AUDIENCE: [INAUDIBLE] ANA BELL: Yeah.",
    "start": "3510300",
    "end": "3515520"
  },
  {
    "text": "We can be nice. \"Please guess--\" AUDIENCE: [INAUDIBLE] ANA BELL: What's that? AUDIENCE: [INAUDIBLE]",
    "start": "3515520",
    "end": "3521298"
  },
  {
    "text": "ANA BELL: We want\nthe user to give us an integer-- yeah, a number. Exactly. So-- OK, yeah.",
    "start": "3521298",
    "end": "3530660"
  },
  {
    "text": "If we leave it like that, then\nwe're just grabbing the string.",
    "start": "3530660",
    "end": "3535930"
  },
  {
    "text": "So we have to cast\nit to an integer. Exactly. ",
    "start": "3535930",
    "end": "3541800"
  },
  {
    "text": "Now what? How do I check for\nequivalency between my secret",
    "start": "3541800",
    "end": "3546820"
  },
  {
    "text": "and the guess? AUDIENCE: [INAUDIBLE]",
    "start": "3546820",
    "end": "3552000"
  },
  {
    "text": "ANA BELL: secret\nequal-equal guess. And you want to--",
    "start": "3552000",
    "end": "3558150"
  },
  {
    "text": "print this, yeah. Let's print that. ",
    "start": "3558150",
    "end": "3563380"
  },
  {
    "text": "OK. Run it. Let's guess something\nthat's not the same. False.",
    "start": "3563380",
    "end": "3568940"
  },
  {
    "text": "Run it again. Let's guess something\nthat's the same, true. And we can guess something\nthat's lower to just-- ",
    "start": "3568940",
    "end": "3577849"
  },
  {
    "text": "is everyone-- yeah? AUDIENCE: Do you assign-- like for different\n[INAUDIBLE],, did you assign the [INAUDIBLE] equal\nto guess to a container?",
    "start": "3577850",
    "end": "3587227"
  },
  {
    "text": "ANA BELL: Yep. Yep, exactly. Equal equals this thing.",
    "start": "3587227",
    "end": "3592250"
  },
  {
    "text": "Yep, and then you can do\nwhatever you want with that. Print equal or something. That's the same, but yeah,\nyou can do other things",
    "start": "3592250",
    "end": "3598820"
  },
  {
    "text": "with this variable. Yeah. Exactly. 5. Yeah. ",
    "start": "3598820",
    "end": "3609560"
  },
  {
    "text": "If you want, at\nhome, try to see what would have happened if you\ndidn't cast it to an integer.",
    "start": "3609560",
    "end": "3615160"
  },
  {
    "text": "See if the program\nwould have crashed or not, or if it would\nhave just worked but given a wrong answer.",
    "start": "3615160",
    "end": "3621200"
  },
  {
    "text": "So why do we do Booleans? Booleans are important\nvariables because they allow us to start\nthinking about writing",
    "start": "3621200",
    "end": "3627940"
  },
  {
    "text": "programs that make decisions. The way we talk is\nwe can say something like, if this is true, do\nthis; otherwise, do this.",
    "start": "3627940",
    "end": "3635260"
  },
  {
    "text": "The Boolean part is if\nthat something is true. So the something\nis true is going to be the Boolean that we\ncan create in our programs,",
    "start": "3635260",
    "end": "3643180"
  },
  {
    "text": "and then the do this is\nsome sort of command, and then the otherwise\ndo that is going to be some other set of commands.",
    "start": "3643180",
    "end": "3649000"
  },
  {
    "text": "So a really simple\nBoolean expression could be, it's midnight,\nyou get a free food email,",
    "start": "3649000",
    "end": "3654310"
  },
  {
    "text": "do you go get the free\nfood or do you sleep? That's the very simplest\ndecision point you can make.",
    "start": "3654310",
    "end": "3661640"
  },
  {
    "text": "But with conditionals,\nyou can actually write a pretty cool program\nthat gets you to that free food.",
    "start": "3661640",
    "end": "3668950"
  },
  {
    "text": "So let's say this is a map of\nMIT, this is where you are, that's where the free food is.",
    "start": "3668950",
    "end": "3674240"
  },
  {
    "text": "We can write a really\nsimple algorithm using just conditionals that\ntakes you to that free food.",
    "start": "3674240",
    "end": "3680340"
  },
  {
    "text": "So the algorithm goes like this. So I'm going to say,\nI'm going to walk always in this direction.",
    "start": "3680340",
    "end": "3685650"
  },
  {
    "text": "So I'm either going forward,\nbackward, left, and right, I'm not turning. And I'm going to say\nthe algorithm is always going to have my right\nhand be on a wall.",
    "start": "3685650",
    "end": "3692940"
  },
  {
    "text": "So if the right is\nclear-- so standing here, my right is clear,\nso I'm just going",
    "start": "3692940",
    "end": "3698240"
  },
  {
    "text": "to keep swimming\nuntil I reach a wall. If my right is blocked\nbut my forward is clear,",
    "start": "3698240",
    "end": "3705710"
  },
  {
    "text": "I'm going to keep\ngoing like this all the way to the end of the room.",
    "start": "3705710",
    "end": "3713570"
  },
  {
    "text": "If my right is\nblocked and my forward is blocked as if I would have\nreached the end of the room, I would have gone to the left.",
    "start": "3713570",
    "end": "3720810"
  },
  {
    "text": "And if my right,\nforward, and left is blocked, if I'm over\nthere, I would go backward. So I'd go backward.",
    "start": "3720810",
    "end": "3726500"
  },
  {
    "text": "So basically starting\nfrom here, I've made my way all the\nway around this room and I would go out the\ndoor down the hallway.",
    "start": "3726500",
    "end": "3733580"
  },
  {
    "text": "And if the map of MIT\ndoesn't have islands-- so if the free food\nisn't somewhere in an island in the\nmiddle here, if it's just",
    "start": "3733580",
    "end": "3740359"
  },
  {
    "text": "a regular old maze,\nI would eventually make my way to the free food\nfollowing this really simple",
    "start": "3740360",
    "end": "3746030"
  },
  {
    "text": "conditional algorithm. So how do we actually do\nconditionals in Python?",
    "start": "3746030",
    "end": "3751820"
  },
  {
    "text": "How do we tell Python,\nhey, I want to create-- I want to insert a\ndecision point right here?",
    "start": "3751820",
    "end": "3757070"
  },
  {
    "text": "We do that using\nthe keyword \"if.\" And the \"if\" starts\na decision block.",
    "start": "3757070",
    "end": "3764550"
  },
  {
    "text": "Now the simplest decision\nblock is just an if by itself.",
    "start": "3764550",
    "end": "3769720"
  },
  {
    "text": "So if Python sees that if--\nso there's some code that it's following, and then at some\npoint, it reaches the if,",
    "start": "3769720",
    "end": "3777540"
  },
  {
    "text": "the condition tells\nPython to check",
    "start": "3777540",
    "end": "3782640"
  },
  {
    "text": "whether that condition is true. If the condition is true-- so\nthis is our decision point, then I'm going to deviate\nfrom my main program",
    "start": "3782640",
    "end": "3789870"
  },
  {
    "text": "and potentially-- and\ndo the code that's part of that condition.",
    "start": "3789870",
    "end": "3796550"
  },
  {
    "text": "Those, I guess, two lines,\ndot-dot-dot inside there. If the condition is not false,\nI'm not going to go that route",
    "start": "3796550",
    "end": "3803599"
  },
  {
    "text": "and I'll just keep following\nthe rest of the main program. How does Python know how\nmany code lines to execute",
    "start": "3803600",
    "end": "3810650"
  },
  {
    "text": "that's part of that condition? Well, it looks at\nthe indentation. So notice here, I've put a\nfew spaces, for these two",
    "start": "3810650",
    "end": "3818660"
  },
  {
    "text": "dot-dot-dot code blocks here. Anything that's indented\nright after that if statement",
    "start": "3818660",
    "end": "3823820"
  },
  {
    "text": "and that colon there\nis a set of commands that are part of that block.",
    "start": "3823820",
    "end": "3829020"
  },
  {
    "text": "So anything here will\nget executed all at once. And that's a really simple if.",
    "start": "3829020",
    "end": "3834590"
  },
  {
    "text": "Either you do the\nset of commands, extra commands if the condition\nis true, or you don't.",
    "start": "3834590",
    "end": "3840480"
  },
  {
    "text": "Now you can add an\nexception to that. So if the condition is true--",
    "start": "3840480",
    "end": "3845869"
  },
  {
    "text": "again, we're\nfollowing the program, we reached this if\nconditional here. If the condition is\ntrue, again, we're",
    "start": "3845870",
    "end": "3852230"
  },
  {
    "text": "going to deviate\nfrom the program and execute this other set\nof commands right here.",
    "start": "3852230",
    "end": "3858160"
  },
  {
    "text": "Otherwise, the\ncondition is not true and we're going to execute\nthis other set of commands over here.",
    "start": "3858160",
    "end": "3863350"
  },
  {
    "text": "So these guys over here. So either we do\nthis set of commands or the other set of commands,\nbut we never do both",
    "start": "3863350",
    "end": "3869730"
  },
  {
    "text": "and we never skip both of them. So either we do one\nset or the other. When we're done executing\nall the indented blocks, part",
    "start": "3869730",
    "end": "3876869"
  },
  {
    "text": "of the condition\nor the other one that if the condition\nwasn't true, then we rejoin the rest of the\nprogram and continue executing.",
    "start": "3876870",
    "end": "3884470"
  },
  {
    "text": "So this is all the\nrest of the program is at the same indentation level\nas our original if and else.",
    "start": "3884470",
    "end": "3892030"
  },
  {
    "text": "We can add a whole\nbunch of conditions. Not just an if, do\nthis, otherwise do this.",
    "start": "3892030",
    "end": "3898330"
  },
  {
    "text": "We can actually add\na bunch of things to check using elif,\nwhich basically",
    "start": "3898330",
    "end": "3905170"
  },
  {
    "text": "stands for else, if\nanother condition, do this. So here's our program. We reach a decision point.",
    "start": "3905170",
    "end": "3911920"
  },
  {
    "text": "If the condition is\ntrue like before, we'll execute this set of commands,\nbut otherwise, the condition is",
    "start": "3911920",
    "end": "3917920"
  },
  {
    "text": "not true, we're going to\ncheck another condition. Else, if this other\ncondition is true,",
    "start": "3917920",
    "end": "3926200"
  },
  {
    "text": "we'll execute this\nother set of commands. Otherwise, here's another elif.",
    "start": "3926200",
    "end": "3931780"
  },
  {
    "text": "We'll check another condition. If it's true, we'll execute\nsome other set of commands, otherwise there\ncan be more elifs.",
    "start": "3931780",
    "end": "3939850"
  },
  {
    "text": "And at some point,\nwe're going to rejoin the rest of the program.",
    "start": "3939850",
    "end": "3945260"
  },
  {
    "text": "Now these elifs are going\nto be-- each condition is checked one at a time.",
    "start": "3945260",
    "end": "3950380"
  },
  {
    "text": "The very first one that's true\nis the one that gets executed. So we're never going to\nexecute more than one",
    "start": "3950380",
    "end": "3956110"
  },
  {
    "text": "because this is an if,\nelse if, else if, else if. So even in English, you're\nonly going to do one of these.",
    "start": "3956110",
    "end": "3962770"
  },
  {
    "text": "You're never going\nto do all of them. It is possible to\nskip all of them, though, because if none of\nthose conditions are true,",
    "start": "3962770",
    "end": "3969160"
  },
  {
    "text": "you just don't do any of them. If more than one is true, you\ndo the first one that is true.",
    "start": "3969160",
    "end": "3976960"
  },
  {
    "text": "If you want to have a\ncatch-all, a version of the middle if,\nelif, elif, you just",
    "start": "3976960",
    "end": "3982990"
  },
  {
    "text": "add an else at the end. So if none of those\nconditions are true, you can add an else,\nwhich says you just",
    "start": "3982990",
    "end": "3988869"
  },
  {
    "text": "do this if nothing is true. I like what we had over here.",
    "start": "3988870",
    "end": "3993880"
  },
  {
    "text": "If this one, otherwise do this. Well, if any of these conditions\nare true, do one of them,",
    "start": "3993880",
    "end": "3999560"
  },
  {
    "text": "otherwise do this.  So here's an example.",
    "start": "3999560",
    "end": "4006450"
  },
  {
    "text": "We've got pset_time, we'll just\nput some variables in there. sleep_time, we'll put\nsome variables in there and run it, see what we get.",
    "start": "4006450",
    "end": "4013040"
  },
  {
    "text": "I've got one code block here,\nan if, elif, and an else. So the first code\nblock, the condition",
    "start": "4013040",
    "end": "4019220"
  },
  {
    "text": "is, it checks that the sum of\nthose two is greater than 24 and it does something. This is the block that's\npart of that condition.",
    "start": "4019220",
    "end": "4027020"
  },
  {
    "text": "Notice, it's indented\nby usually four spaces. Elif-- so if this\none was not true,",
    "start": "4027020",
    "end": "4032857"
  },
  {
    "text": "then I'm going to go ahead\nand check the next one. The next condition\nis that the addition is greater than or equal\nto 24, and then we're",
    "start": "4032857",
    "end": "4039020"
  },
  {
    "text": "going to do this\nprint statement here. And if neither of\nthose are true,",
    "start": "4039020",
    "end": "4044360"
  },
  {
    "text": "I'm going to do whatever\nis in this code block here. I'm going to do these two lines. So this is my--",
    "start": "4044360",
    "end": "4050225"
  },
  {
    "text": "I call it a catch-all because\nnone of those other conditions were true, so we're going to\ncatch ourselves and do this--",
    "start": "4050225",
    "end": "4056270"
  },
  {
    "text": "do these commands here. And otherwise, once\nwe finish doing either this one or this one or\ncatching whatever is left over",
    "start": "4056270",
    "end": "4064360"
  },
  {
    "text": "in here, we're going to evaluate\nthe print statement here and we're going to\nprint \"end of day\" because this is the\nrest of my program.",
    "start": "4064360",
    "end": "4071260"
  },
  {
    "text": "Notice, it's at the\nsame indentation level as my original program.",
    "start": "4071260",
    "end": "4076730"
  },
  {
    "text": "So here is this--",
    "start": "4076730",
    "end": "4081800"
  },
  {
    "text": "oops, this program. So if pset_time and\nsleep_time is 22 and 8,",
    "start": "4081800",
    "end": "4089180"
  },
  {
    "text": "the addition is more than 24. So this is going to enter\nthis code block here and print",
    "start": "4089180",
    "end": "4095660"
  },
  {
    "text": "impossible. If it's exactly equal to 24--",
    "start": "4095660",
    "end": "4101290"
  },
  {
    "text": "so 22 and 2, we're not\ngoing to enter this one, but we will enter this one right\nbecause it's exactly equal to,",
    "start": "4101290",
    "end": "4107949"
  },
  {
    "text": "it's not greater\nthan, so then we're going to print full\nschedule and then rejoin the rest of the program\nhere and print \"end of day.\"",
    "start": "4107950",
    "end": "4114113"
  },
  {
    "text": " And otherwise, if this is\nsomething low, less than 24",
    "start": "4114114",
    "end": "4121009"
  },
  {
    "text": "and not equal to 24-- so neither of these\nconditions are true, then we're going\nto enter the else.",
    "start": "4121010",
    "end": "4127250"
  },
  {
    "text": "And we're going to evaluate--\nor run these two lines of code here.",
    "start": "4127250",
    "end": "4132299"
  },
  {
    "text": "So the two lines\nof code here are going to grab the\nabsolute value of 24 minus the pset_time minus\nthe sleep_time figuring out",
    "start": "4132300",
    "end": "4139160"
  },
  {
    "text": "how much time we\nhave left in the day. It's also going to print this\nline here and then rejoin",
    "start": "4139160",
    "end": "4145369"
  },
  {
    "text": "the rest of the program\nto print \"end of day.\" ",
    "start": "4145370",
    "end": "4151200"
  },
  {
    "text": "OK. Quick check. Nothing to run-- nothing to\nwrite here, nothing to run.",
    "start": "4151200",
    "end": "4156369"
  },
  {
    "text": "Think about this program. What is wrong with it? ",
    "start": "4156370",
    "end": "4162130"
  },
  {
    "text": "So I'm grabbing a number\nfor x, a number for y, and then I'm checking\nif x is the same as y,",
    "start": "4162130",
    "end": "4167490"
  },
  {
    "text": "I'm printing x is the same as y. So if I give it 5\nand 5, I'm going to print 5 is the same as 5.",
    "start": "4167490",
    "end": "4173680"
  },
  {
    "text": "And then I'd also like\nto print these are equal. What's the problem\nwith this program? Yeah?",
    "start": "4173680",
    "end": "4179830"
  },
  {
    "text": "AUDIENCE: If x is\nnot equal to y, it's still going to print these\nare equal because it's not [INAUDIBLE].",
    "start": "4179830",
    "end": "4184960"
  },
  {
    "text": "ANA BELL: Exactly. If x is not the same as y, we\nrejoin the rest of the program",
    "start": "4184960",
    "end": "4190299"
  },
  {
    "text": "because the indentation\nlevel of this print statement is the same as the\nrest of our program. So how do we fix it?",
    "start": "4190300",
    "end": "4196540"
  },
  {
    "start": "4196540",
    "end": "4201950"
  },
  {
    "text": "Indent. Yeah. We'll just indent that\nprint statement in to be at the same level\nas the if statement.",
    "start": "4201950",
    "end": "4207890"
  },
  {
    "text": " So we can actually nest\nindentation statements--",
    "start": "4207890",
    "end": "4213780"
  },
  {
    "text": "we can nest conditionals\nbecause once we've created a conditional,\nit's just a code block.",
    "start": "4213780",
    "end": "4221500"
  },
  {
    "text": "So here, I've got\nan if statement with its own code block. And inside that code\nblock, I can actually",
    "start": "4221500",
    "end": "4226800"
  },
  {
    "text": "have more if statements\nthat are just going to be executed whenever\nthis condition is true.",
    "start": "4226800",
    "end": "4234190"
  },
  {
    "text": "So this is the\ninside code block. So for example,\nthe place where we would execute this\ninner code block",
    "start": "4234190",
    "end": "4240930"
  },
  {
    "text": "is when x and y are\nequivalent because then I'm going to enter this code\nblock here, this is true.",
    "start": "4240930",
    "end": "4248900"
  },
  {
    "text": "I'm going to print\nx and y are equal. And then this second conditional\nhere, y is not equal to 0,",
    "start": "4248900",
    "end": "4254870"
  },
  {
    "text": "is also true. And then I'm going to\nprint this one as well.",
    "start": "4254870",
    "end": "4260469"
  },
  {
    "text": "I've already done one\nof the conditionals. They're true, so I'm\ngoing to skip the elif, I'm going to skip\nthe else, and I'm going to rejoin the\nrest of the program.",
    "start": "4260470",
    "end": "4268450"
  },
  {
    "text": "All the other cases,\nwhen one value is different than the other,\nwill either take me here",
    "start": "4268450",
    "end": "4274570"
  },
  {
    "text": "in the else and then rejoin\nthe rest of the program, or when they're\nequivalent, I'm going--",
    "start": "4274570",
    "end": "4282810"
  },
  {
    "text": "or here, I don't have-- I don't actually have a case\nfor that one on the slides. But when they're equivalent\nand y is equal to 0,",
    "start": "4282810",
    "end": "4290400"
  },
  {
    "text": "I'm not actually going to\nenter this inner conditional because y--",
    "start": "4290400",
    "end": "4296250"
  },
  {
    "text": "while x and y were true-- were equivalent, which is\ntrue, y was equal to 0,",
    "start": "4296250",
    "end": "4302280"
  },
  {
    "text": "so that not equal to 0 is false. It's just backward.",
    "start": "4302280",
    "end": "4309117"
  },
  {
    "text": "And then we rejoin the\nrest of the program. Yeah? AUDIENCE: What did you\ndo to float [INAUDIBLE]?? ANA BELL: Oh.",
    "start": "4309118",
    "end": "4314430"
  },
  {
    "text": "I'm casting the\nnumbers to floats. I could cast them\nto ints as well. Yeah. Yeah.",
    "start": "4314430",
    "end": "4320640"
  },
  {
    "text": "Just so I'm not\ncomparing strings. Yeah. So now that I've\nintroduced conditionals,",
    "start": "4320640",
    "end": "4327300"
  },
  {
    "text": "it's important to do a\nlittle bit more practice to get a mental model-- a mental model of how\nto trace the code.",
    "start": "4327300",
    "end": "4333450"
  },
  {
    "text": "And the visual structure of\nthe code actually helps a lot. And Python is\nunique in the sense.",
    "start": "4333450",
    "end": "4338923"
  },
  {
    "text": "There's no other\nlanguages that actually force you to indent things. So other languages\ndon't really force",
    "start": "4338923",
    "end": "4346020"
  },
  {
    "text": "you to have this\nvisual structure to match exactly\nwhat's going on. But it's actually\nreally useful in Python.",
    "start": "4346020",
    "end": "4351480"
  },
  {
    "text": "That's what I like about Python. It just helps you see things\nthat are going on immediately,",
    "start": "4351480",
    "end": "4356700"
  },
  {
    "text": "like this set of code is\npart of this code block. And so it helps you debug a\nlittle bit more efficiently.",
    "start": "4356700",
    "end": "4362973"
  },
  {
    "text": "But the more practice\nyou get, the more you'll get used to tracing the\ncode and knowing exactly",
    "start": "4362973",
    "end": "4368010"
  },
  {
    "text": "if these variables\nhave this value exactly where your code is going to go. So I'm going to\nskip this You Try It",
    "start": "4368010",
    "end": "4373920"
  },
  {
    "text": "because it's just kind\nof tracing the code and I'm going to have\nyou do this one-- or we can write it real quick.",
    "start": "4373920",
    "end": "4379530"
  },
  {
    "text": "Or you can start and then\nwe can write it together. It's a variation of the\nprogram you just wrote.",
    "start": "4379530",
    "end": "4385180"
  },
  {
    "text": "Instead of telling me whether\nthe guess is true or-- is the same as\nthe secret number,",
    "start": "4385180",
    "end": "4390820"
  },
  {
    "text": "I just want you to print whether\nthe guess is too low, too high, or the same as\nthe secret number.",
    "start": "4390820",
    "end": "4396910"
  },
  {
    "text": "So we're going to need to\nput a conditional in there, if some conditional, we're\ngoing to print something.",
    "start": "4396910",
    "end": "4404778"
  },
  {
    "text": "So I'll give you about\na minute and then we can write it together\nand then we can be done. ",
    "start": "4404778",
    "end": "4411420"
  },
  {
    "text": "Oh, yeah? AUDIENCE: Can we have two if\nstatements into the program? ANA BELL: You can have two\nif statements in the program,",
    "start": "4411420",
    "end": "4417280"
  },
  {
    "text": "yeah. And there's actually\nsome exercises I have for you guys to\ntry at home here where there are two if\nstatements in the program,",
    "start": "4417280",
    "end": "4423610"
  },
  {
    "text": "and just to see what happens. That starts two conditionals. So if some conditional,\nthat one can be true,",
    "start": "4423610",
    "end": "4429760"
  },
  {
    "text": "and if some other conditional,\nthat one can also be true, and then both will be evaluated. It's not an else situation.",
    "start": "4429760",
    "end": "4436260"
  },
  {
    "text": "Yeah. That's a good question. ",
    "start": "4436260",
    "end": "4442230"
  },
  {
    "text": "So I'm just going to copy\nthe input from before. Does anyone have a\nstart to my condition?",
    "start": "4442230",
    "end": "4449170"
  },
  {
    "text": "I just copied what we\nhad before for the input. ",
    "start": "4449170",
    "end": "4460670"
  },
  {
    "text": "Yeah? AUDIENCE: So if I have\nif x is [INAUDIBLE]",
    "start": "4460670",
    "end": "4468594"
  },
  {
    "text": "and equal [INAUDIBLE]? ANA BELL: Yep. Yep.",
    "start": "4468594",
    "end": "4474020"
  },
  {
    "text": " AUDIENCE: And then print--",
    "start": "4474020",
    "end": "4479239"
  },
  {
    "text": "ANA BELL: Print. AUDIENCE: Your\nguess is \"too high.\" ANA BELL: Yep. \"too high.\" good.",
    "start": "4479240",
    "end": "4485480"
  },
  {
    "text": "Yep. That's a great start. So we can even run it\nand guess something that we know is too high.",
    "start": "4485480",
    "end": "4491560"
  },
  {
    "text": "Perfect. Too high, yep. ",
    "start": "4491560",
    "end": "4498150"
  },
  {
    "text": "Next. ",
    "start": "4498150",
    "end": "4505468"
  },
  {
    "text": "Do you want to do\nan else or an elif? Yeah? AUDIENCE: Actually, I would\nget rid of the equal sign because if we put in a 5, now\nit will still say too high.",
    "start": "4505468",
    "end": "4513390"
  },
  {
    "text": "ANA BELL: That's a good point. So if we run it now-- let's run\nit with a 5, it says too high.",
    "start": "4513390",
    "end": "4519760"
  },
  {
    "text": "Exactly, yeah. So let's remove the equal sign. It's a good thing\nwe debugged that.",
    "start": "4519760",
    "end": "4526750"
  },
  {
    "text": "So we can do an elif, the guess\nis equivalent to the secret.",
    "start": "4526750",
    "end": "4533390"
  },
  {
    "text": "And then we can print equal. Whoops.",
    "start": "4533390",
    "end": "4538616"
  },
  {
    "start": "4538616",
    "end": "4546410"
  },
  {
    "text": "Does everyone understand why\nwe remove that equal sign from the greater than? Yeah? Because we would\nhave missed, yeah.",
    "start": "4546410",
    "end": "4552110"
  },
  {
    "text": "We would have mistakenly\ngone into that first path. But elif, we can\nhave a case where",
    "start": "4552110",
    "end": "4557659"
  },
  {
    "text": "the guess is equivalent\nto the secret, sure, and then we'll print equal. And then the last one\ncan either be an else",
    "start": "4557660",
    "end": "4564440"
  },
  {
    "text": "because we know the only other\noption is guess is less than, or we can do another\nelif if we want to,",
    "start": "4564440",
    "end": "4569630"
  },
  {
    "text": "but we can leave it\nas an else, and then we can print \"too low.\"",
    "start": "4569630",
    "end": "4575000"
  },
  {
    "text": " And then we can run it and we\ncan guess all the variations.",
    "start": "4575000",
    "end": "4582400"
  },
  {
    "text": "So something that's\ntoo high, something that's the same, and--",
    "start": "4582400",
    "end": "4587786"
  },
  {
    "start": "4587786",
    "end": "4594580"
  },
  {
    "text": "I'm not sure what I did there. I should restart my kernel. ",
    "start": "4594580",
    "end": "4606270"
  },
  {
    "text": "So we did something\nthat's too high, something that is\nequivalent, and then we",
    "start": "4606270",
    "end": "4613020"
  },
  {
    "text": "can do something that's too low. OK-- yeah? AUDIENCE: What's the\ndifference between having",
    "start": "4613020",
    "end": "4619410"
  },
  {
    "text": "else, else-if [INAUDIBLE]? ANA BELL: So there\nis no difference. We can do an elif guess\nis less than secret.",
    "start": "4619410",
    "end": "4626250"
  },
  {
    "text": "That would-- the program\nwould work just the same. The else is just\nquicker because we know there are no\nother options here.",
    "start": "4626250",
    "end": "4634500"
  },
  {
    "text": "AUDIENCE: Why wouldn't we just\nput a row of if statements? ANA BELL: We could also--\nin this particular case,",
    "start": "4634500",
    "end": "4640000"
  },
  {
    "text": "we could also put a bunch\nof if statements in a row, but then we'd have to\nbe careful that they",
    "start": "4640000",
    "end": "4645570"
  },
  {
    "text": "are mutually exclusive. So like in the\nprevious example, if we have a bunch of conditions\nthat might all be true,",
    "start": "4645570",
    "end": "4653070"
  },
  {
    "text": "all those ifs will execute. That's the thing-- because\nthe if starts a block.",
    "start": "4653070",
    "end": "4658530"
  },
  {
    "text": "The elif is just\nassociated with that block. So either you do one or\nthe other or the other. But if you have a\nwhole bunch of ifs,",
    "start": "4658530",
    "end": "4664770"
  },
  {
    "text": "then they might all be true\nand they'll all be executed. Yeah.",
    "start": "4664770",
    "end": "4670890"
  },
  {
    "text": "Yeah? AUDIENCE: Why don't\nwe use parentheses with an else statement? ANA BELL: Oh, we\ncould use parentheses",
    "start": "4670890",
    "end": "4675950"
  },
  {
    "text": "in the if-else statements. You mean like this? Yeah, we can do that,\nespecially if we have a whole bunch of\nexpressions together,",
    "start": "4675950",
    "end": "4681780"
  },
  {
    "text": "but if there's just one,\nPython will automatically know to do the expression\nfirst and then do the if.",
    "start": "4681780",
    "end": "4687830"
  },
  {
    "text": "Yeah. These are all wonderful\nquestions, by the way. OK.",
    "start": "4687830",
    "end": "4694380"
  },
  {
    "text": "So as we saw, there was\na little bug in our code. It's a good thing we ran it. I should have run it with a\nbunch of different options,",
    "start": "4694380",
    "end": "4701052"
  },
  {
    "text": "but it's important to\ndebug early and debug often just to make sure that\nyou don't introduce a bug that will kind of\ncarry on throughout the code.",
    "start": "4701052",
    "end": "4708750"
  },
  {
    "text": "That's another big idea. And then a quick summary\nof what we've learned. Input and outputs obviously\nmake our programs interactive.",
    "start": "4708750",
    "end": "4715290"
  },
  {
    "text": "We added branching\nas a way to introduce decision points in our program. And next time, we're going to\ndo a little bit more branching",
    "start": "4715290",
    "end": "4721930"
  },
  {
    "text": "and then introduce looping-- so ways to repeat\ncommands in our programs. So I went a little\nbit over time.",
    "start": "4721930",
    "end": "4729489"
  },
  {
    "text": "I won't do that again. ",
    "start": "4729490",
    "end": "4738000"
  }
]