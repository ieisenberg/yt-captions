[
  {
    "start": "0",
    "end": "21000"
  },
  {
    "text": " The following\ncontent is provided under a Creative\nCommons license. Your support will help MIT\nOpenCourseWare continue",
    "start": "0",
    "end": "6860"
  },
  {
    "text": "to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6860",
    "end": "13340"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13340",
    "end": "21570"
  },
  {
    "start": "21000",
    "end": "67000"
  },
  {
    "text": "PROFESSOR: So we're going\nto do rolling caches then, we're going to go a little\nbit over amortized analysis",
    "start": "21570",
    "end": "26880"
  },
  {
    "text": "and if we have a\nlot of time left, we're going to talk about\ngood and bad hash functions.",
    "start": "26880",
    "end": "32590"
  },
  {
    "text": "So can someone remind me what's\nthe point of rolling hashes? What's the problem?",
    "start": "32590",
    "end": "38260"
  },
  {
    "text": "What are we trying\nto solve in lectures? ",
    "start": "38260",
    "end": "43980"
  },
  {
    "text": "Be brave. AUDIENCE: Gets faster,\nI think, because like--",
    "start": "43980",
    "end": "49380"
  },
  {
    "text": "PROFESSOR: So what are\nwe trying to solve? You don't need to\ngo ahead, tell me what's the big problem\nthat we're trying to solve.",
    "start": "49380",
    "end": "55130"
  },
  {
    "start": "55130",
    "end": "61505"
  },
  {
    "text": "AUDIENCE: I don't remember/ PROFESSOR: OK, so\nlet's go over that. So we have a big document,\nAKA a long string,",
    "start": "61505",
    "end": "68200"
  },
  {
    "text": "and we're trying to find a\nsmaller string inside it. And we're trying to\ndo that efficiently.",
    "start": "68200",
    "end": "73210"
  },
  {
    "text": "So say the big document is--\nyou might have seen this before.",
    "start": "73210",
    "end": "83220"
  },
  {
    "text": "And we're trying to\nlook for the here.",
    "start": "83220",
    "end": "89130"
  },
  {
    "text": "How do I do that\nwith rolling hashes?  So the slow, nice\nsolution is I get this the",
    "start": "89130",
    "end": "98140"
  },
  {
    "text": "and then I overlap with the\nbeginning of the document, I do a string comparison. If it matches, I say\nthat it's a match.",
    "start": "98140",
    "end": "104410"
  },
  {
    "text": "It's not, I overlap it here. String match, I overlap it here. String match, so\non and so forth.",
    "start": "104410",
    "end": "110829"
  },
  {
    "text": "The problem is this does a lot\nof string matching operations, and the string matching\noperation is how expensive?",
    "start": "110829",
    "end": "117290"
  },
  {
    "text": "What's the running time? AUDIENCE: Order n. PROFESSOR: Order n, where n\nis the size of the string.",
    "start": "117290",
    "end": "122410"
  },
  {
    "text": "So if we have a string,\nsay this is the key that we're looking for and\nn is the document size then",
    "start": "122410",
    "end": "131590"
  },
  {
    "text": "this is going to\nbe order n times k. We want to get to\nsomething better.",
    "start": "131590",
    "end": "137660"
  },
  {
    "text": "So how do I do this\nwith rolling hashes? ",
    "start": "137660",
    "end": "147060"
  },
  {
    "text": "AUDIENCE: We take\nthe strings up, and you come up with\na hash code for it.",
    "start": "147060",
    "end": "155040"
  },
  {
    "text": "PROFESSOR: OK so we're\ngoing to hash this. And let's say this\nis the key hash. OK, very good.",
    "start": "155040",
    "end": "161787"
  },
  {
    "text": "AUDIENCE: And then once\nyou know that, then you'll need to compute the\nnext letter hash, or just add it on\nto that pairing.",
    "start": "161787",
    "end": "169489"
  },
  {
    "text": "PROFESSOR: OK, so\nnext letter for-- AUDIENCE: Yeah.  So you compute the hash of the\nentire string, n, capital n--",
    "start": "169490",
    "end": "181038"
  },
  {
    "text": "PROFESSOR: Let's not do that. Let's compute the hash of\nthe first key characters",
    "start": "181038",
    "end": "187852"
  },
  {
    "text": "in the string. AUDIENCE: Are we separating\nthem by space [? inside? ?] PROFESSOR: Yeah, so this\nis going to be a character.",
    "start": "187852",
    "end": "194862"
  },
  {
    "text": "AUDIENCE: The space will? PROFESSOR: Sorry? AUDIENCE: The space\nwill be a character? PROFESSOR: Yeah. So let's take the\nfirst three characters",
    "start": "194862",
    "end": "200736"
  },
  {
    "text": "and compute the hash of that. And let's call this\nthe our sliding window.",
    "start": "200736",
    "end": "206530"
  },
  {
    "start": "202000",
    "end": "352000"
  },
  {
    "text": "So we're going to say\nthat window has the and then we're going to compute\nthe hash of the characters",
    "start": "206530",
    "end": "214620"
  },
  {
    "text": "in the window, and\nwe're going to see that this matches\nthe hash of the key.",
    "start": "214620",
    "end": "220069"
  },
  {
    "text": "And then we'll figure\nout what to do.  That aside, we're going\nto slide the window",
    "start": "220069",
    "end": "226200"
  },
  {
    "text": "to the right by one\ncharacter so take out key and put in the space. And now the window\nhas HE space, we're",
    "start": "226200",
    "end": "236260"
  },
  {
    "text": "going to compute the\nhash of the window, see that it's not the same\nas this hash of the key.",
    "start": "236260",
    "end": "243400"
  },
  {
    "text": "What do we know in this case? ",
    "start": "243400",
    "end": "251190"
  },
  {
    "text": "Different hashes means-- AUDIENCE: Not the same string. PROFESSOR: For sure\nnot the same string.",
    "start": "251190",
    "end": "256940"
  },
  {
    "text": "So this is not the. OK, now suppose I'm\nsliding my window",
    "start": "256940",
    "end": "263870"
  },
  {
    "text": "so after this I will\nslide my window again, and I would have e space f. Right, so on and so forth.",
    "start": "263870",
    "end": "270290"
  },
  {
    "text": "Suppose I'm happy sliding my\nwindow and then I get here and I have my window be IN\nspace, and the hash the window",
    "start": "270290",
    "end": "279570"
  },
  {
    "text": "happens to match\nthe hash of the key. So we're in the same\nsituation as here.",
    "start": "279570",
    "end": "285550"
  },
  {
    "text": "Now what? AUDIENCE: [INAUDIBLE]. ",
    "start": "285550",
    "end": "291690"
  },
  {
    "text": "PROFESSOR: Very good. We have to check if the\nstring inside the window",
    "start": "291690",
    "end": "297120"
  },
  {
    "text": "is the same as the\nstring inside the key. And if it is, we found a match.",
    "start": "297120",
    "end": "302360"
  },
  {
    "text": "If it isn't, we keep working. All right? And we have to do\nthe same thing here. ",
    "start": "302360",
    "end": "312340"
  },
  {
    "text": "So this is our string\nmatching algorithm. AUDIENCE: Can we somehow\nmake sure that we make a hash",
    "start": "312340",
    "end": "321814"
  },
  {
    "text": "function such that it\nwill never [INAUDIBLE]-- PROFESSOR: Excellent question.",
    "start": "321815",
    "end": "327910"
  },
  {
    "text": "Thank you, I like that. Can we make a hash\nfunction so that we don't have any false\npositives, right?",
    "start": "327910",
    "end": "334110"
  },
  {
    "text": "Let's see. How do hash functions work? What's the argument\nto a hash function and what's the return value?",
    "start": "334110",
    "end": "339465"
  },
  {
    "text": " AUDIENCE: The\nargument is something",
    "start": "339465",
    "end": "345044"
  },
  {
    "text": "that you want to hash.  PROFESSOR: So in this case we're\nworking with three character",
    "start": "345044",
    "end": "352400"
  },
  {
    "start": "352000",
    "end": "471000"
  },
  {
    "text": "strings. But let's say we're\nlooking for a one megabyte string inside the\none gigabyte string.",
    "start": "352400",
    "end": "358970"
  },
  {
    "text": "Say we're a music\ncompany and we're looking for our mp3 file\ninside the big files",
    "start": "358970",
    "end": "367370"
  },
  {
    "text": "off a pirate server\nor something. So this is 1 million\ncharacter strings,",
    "start": "367370",
    "end": "374219"
  },
  {
    "text": "because that's the window size. ",
    "start": "374219",
    "end": "379370"
  },
  {
    "text": "And it's going to return what? ",
    "start": "379370",
    "end": "385830"
  },
  {
    "text": "What do hash functions\nreturn for them to be useful? Integers.",
    "start": "385830",
    "end": "391070"
  },
  {
    "text": "Nice small integers, right? Ideally, the integer would\nfit in a word size, where the word is the register\nsize on our computer.",
    "start": "391070",
    "end": "399650"
  },
  {
    "text": "What are popular word sizes? Does anyone know? AUDIENCE: [INAUDIBLE]. ",
    "start": "399650",
    "end": "405897"
  },
  {
    "text": "AUDIENCE: Excellent. 32-bits, 64-bits integers.",
    "start": "405897",
    "end": "415350"
  },
  {
    "text": "OK, so what's the universe\nsize for this function? How many one million\ncharacter strings are there? ",
    "start": "415350",
    "end": "423534"
  },
  {
    "text": "AUDIENCE: How many\ncharacters are there? PROFESSOR: Excellent. Let's say we're old school\nand we're doing [? SG ?]. We don't care about\nthe rest of the world.",
    "start": "423534",
    "end": "429455"
  },
  {
    "text": "AUDIENCE: 256 characters? PROFESSOR: OK. AUDIENCE: To the\none millionth power.",
    "start": "429455",
    "end": "434992"
  },
  {
    "start": "434993",
    "end": "440474"
  },
  {
    "text": "PROFESSOR: Cool. Let's say we're working\non an old school computer, since we're old school and\nwe have a 32-bit word size.",
    "start": "440474",
    "end": "445620"
  },
  {
    "text": "How many possible values\nfor the hash function? AUDIENCE: 2 to the 32. ",
    "start": "445620",
    "end": "458100"
  },
  {
    "text": "PROFESSOR: The\n[? other ?] is bigger. You're messing with me, right? OK so this is 2 to the 8th.",
    "start": "458100",
    "end": "465540"
  },
  {
    "text": "AUDIENCE: 2 to the\n8 million, right? PROFESSOR: Yup. So this is a lot\nbigger than this.",
    "start": "465540",
    "end": "470699"
  },
  {
    "text": "So if we want to make a\nhash function that gives us no false positives,\nthen we'd have",
    "start": "470700",
    "end": "476210"
  },
  {
    "start": "471000",
    "end": "550000"
  },
  {
    "text": "to be able to-- if we have the\nuniverse of possible inputs and the universe of\npossible outputs,",
    "start": "476210",
    "end": "481550"
  },
  {
    "text": "draw a line from every\ninput to a different output. But if we have-- 2 to the 32 by\nthe way is about four billion.",
    "start": "481550",
    "end": "489330"
  },
  {
    "text": "If we have four billion\noutputs and a lot of inputs",
    "start": "489330",
    "end": "494896"
  },
  {
    "text": "as we draw our lines,\nwe're eventually going to run out of\noutputs and we're going to have to use the\nsame output again and again.",
    "start": "494897",
    "end": "500690"
  },
  {
    "text": "So for a hash function,\npretty much always the universe size is bigger\nthan the output size.",
    "start": "500690",
    "end": "506169"
  },
  {
    "text": "So hash functions will\nalways have collisions. So a collision for\na hash function",
    "start": "506170",
    "end": "511610"
  },
  {
    "text": "is two inputs, x1, x2, so\nthat's x1 is not x2, but h of x1",
    "start": "511610",
    "end": "520219"
  },
  {
    "text": "equals h of x2. ",
    "start": "520220",
    "end": "526865"
  },
  {
    "text": "So this will always happen. There's no way around it. What we're hoping for\nis that the collisions",
    "start": "526866",
    "end": "533259"
  },
  {
    "text": "aren't something dumb. So we're hoping that\nthe hash function acts in a reasonably randomly and\nwe talked about ideal hash",
    "start": "533260",
    "end": "542370"
  },
  {
    "text": "functions that would pretty\nmuch look like they would get a random output for every input.",
    "start": "542370",
    "end": "550209"
  },
  {
    "start": "550000",
    "end": "691000"
  },
  {
    "text": "And we're not going to\nworry too much about that. What matters is that as long as\nthe hash function is reasonably",
    "start": "550209",
    "end": "555230"
  },
  {
    "text": "good, we're not going to have\ntoo many false positives. So say the output set is\nO, so O is 2 to the 32.",
    "start": "555230",
    "end": "568079"
  },
  {
    "text": "Then we're hoping to have\nfalse positives about one every O times.",
    "start": "568080",
    "end": "577480"
  },
  {
    "text": "So 1 out of 2 to the\n32 false positives. ",
    "start": "577480",
    "end": "583360"
  },
  {
    "text": "So what's the running time\nfor when you slide the window",
    "start": "583360",
    "end": "588720"
  },
  {
    "text": "and we're doing this logic here. What's the running time if\nthe hashes aren't the same?",
    "start": "588720",
    "end": "595257"
  },
  {
    "text": "AUDIENCE: What's the running\ntime of the hash function-- PROFESSOR: Of the whole\nmatching algorithm. AUDIENCE: No, no no, of\nthe hash function itself.",
    "start": "595257",
    "end": "602683"
  },
  {
    "text": "Can we make any\nassumptions about that? Very good. What's the running time\nof the hash function?",
    "start": "602683",
    "end": "610170"
  },
  {
    "text": "So we're going to\nhave to implement-- if we implement the\nhash function naively, then the running time for\nhashing a key character string",
    "start": "610170",
    "end": "617430"
  },
  {
    "text": "is order key. But we're going to come up\nwith magic way of doing it",
    "start": "617430",
    "end": "622540"
  },
  {
    "text": "in order one time. So assume hashing is order 1.",
    "start": "622540",
    "end": "628420"
  },
  {
    "text": "What's the running time\nfor everything else? So if the hashes don't match,\nwe know it's not a candidate.",
    "start": "628420",
    "end": "634472"
  },
  {
    "text": "So we're going to keep going. So this is order 1. What if the hashes do match?",
    "start": "634472",
    "end": "641820"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]\ncharacters. PROFESSOR: Order-- AUDIENCE: I mean, but it\ndepends on how many ones match,",
    "start": "641820",
    "end": "647334"
  },
  {
    "text": "but it will be-- PROFESSOR: So for\none match, what's the running time for one match? AUDIENCE: Order k--",
    "start": "647334",
    "end": "654980"
  },
  {
    "text": "PROFESSOR: Order k. Excellent. So the total running time is\nthe number of matches times",
    "start": "654980",
    "end": "663090"
  },
  {
    "text": "order k plus the number of\nnon matches times order 1. So as long as the number\nof false positives",
    "start": "663090",
    "end": "670120"
  },
  {
    "text": "here is really tiny,\nthe math is going to come out to be roughly\norder 1 per character.",
    "start": "670120",
    "end": "677055"
  },
  {
    "text": " AUDIENCE: So the whole\nthing is order in.",
    "start": "677055",
    "end": "682884"
  },
  {
    "text": "PROFESSOR: Everything\nshould be order n, yeah, that's what we're hoping for. ",
    "start": "682884",
    "end": "692070"
  },
  {
    "start": "691000",
    "end": "858000"
  },
  {
    "text": "OK so let's talk about the\nmagic because you asked me what's the running time\nfor the hash function and this is the\ninteresting part.",
    "start": "692070",
    "end": "698649"
  },
  {
    "text": "How do I get to\ncompute these hashes and order 1 instead of order k? We have this data structure\ncalled rolling hash.",
    "start": "698650",
    "end": "707120"
  },
  {
    "start": "707120",
    "end": "712680"
  },
  {
    "text": "So rolling hash--\ndoes anyone remember from lecture what it is? AUDIENCE: Isn't that what\nwe're doing right now?",
    "start": "712680",
    "end": "718730"
  },
  {
    "text": " PROFESSOR: So this\nis a sliding window.",
    "start": "718730",
    "end": "724390"
  },
  {
    "text": "And the data structure\nwill compute fast hashes for the strings inside\nthe sliding window.",
    "start": "724390",
    "end": "730700"
  },
  {
    "text": "So how does it work? I mean not how does it\nwork functionally, what",
    "start": "730700",
    "end": "736389"
  },
  {
    "text": "are the operations for a\nrolling hash, let's try that. AUDIENCE: Oh [INAUDIBLE].",
    "start": "736390",
    "end": "743547"
  },
  {
    "text": "PROFESSOR: OK, so\nwe have two updates. One of them is pop. For some reason, our\nnotes call it skip,",
    "start": "743547",
    "end": "748730"
  },
  {
    "text": "but I like pop\nbetter, so I'm going to write skip and think pop.",
    "start": "748730",
    "end": "754360"
  },
  {
    "text": "And the other one is? AUDIENCE: Always [INAUDIBLE]. ",
    "start": "754360",
    "end": "761459"
  },
  {
    "text": "PROFESSOR: A pen with\na new character, OK? Cool. So these are the updates.",
    "start": "761460",
    "end": "766690"
  },
  {
    "text": "Now what's the point\nof those updates? What's the query\nfor a rolling hash? AUDIENCE: [INAUDIBLE].",
    "start": "766690",
    "end": "772730"
  },
  {
    "text": "You just grab the\nnext character, append that, and then\nskip [INAUDIBLE]. PROFESSOR: OK, so this is\nhow I update the rolling hash",
    "start": "772730",
    "end": "780840"
  },
  {
    "text": "to contain to reflect the\ncontents of my sliding window. And what I do after that? What's the reason for that?",
    "start": "780840",
    "end": "788600"
  },
  {
    "text": "AUDIENCE: You skip\nyour [INAUDIBLE]. PROFESSOR: So don't\nthink too hard, it's a really easy question.",
    "start": "788600",
    "end": "793790"
  },
  {
    "text": "I moved a sliding window here. What do I want to get? AUDIENCE: You want to get\nthe hash of those characters.",
    "start": "793790",
    "end": "799890"
  },
  {
    "text": "PROFESSOR: The hash of\nthose characters, very good. So this is the query.",
    "start": "799890",
    "end": "805630"
  },
  {
    "text": "So a rolling hash has a sequence\nof characters in it, right? Say t, h, e.",
    "start": "805630",
    "end": "810889"
  },
  {
    "text": " And it allows us to append the\ncharacter and pop a character.",
    "start": "810890",
    "end": "822250"
  },
  {
    "text": "Append a character,\npop a character. And then it promises\nthat it's going",
    "start": "822250",
    "end": "828390"
  },
  {
    "text": "to compute the hash\nof whatever's inside the rolling hash really fast. ",
    "start": "828390",
    "end": "836370"
  },
  {
    "text": "Append goes here,\nskip goes here. ",
    "start": "836370",
    "end": "841500"
  },
  {
    "text": "How fast do these\noperations need to be for my algorithm\nto work correctly? ",
    "start": "841500",
    "end": "848612"
  },
  {
    "text": "AUDIENCE: Order 1. PROFESSOR: I promised\nyou that computing hash there is order 1, right?",
    "start": "848612",
    "end": "854290"
  },
  {
    "text": "So I have to-- OK.",
    "start": "854290",
    "end": "859589"
  },
  {
    "text": "Let's see how we're going\nto make this happen. So these are letters. These make sense\nwhen we're trying",
    "start": "859590",
    "end": "864870"
  },
  {
    "text": "to understand string matching. But now we're going to switch\nthe numbers, because after all,",
    "start": "864870",
    "end": "870360"
  },
  {
    "text": "strings are sequences\nof characters, and characters are numbers. And because I know how\nto do math on numbers,",
    "start": "870360",
    "end": "876540"
  },
  {
    "text": "I don't know how to\ndo math on characters. So let's use this list.",
    "start": "876540",
    "end": "881640"
  },
  {
    "text": "Let's say that instead of\nhaving numbers in base 256 which is [INAUDIBLE],\nwe're going to have numbers in base 100,\nbecause it's really easy to do",
    "start": "881640",
    "end": "889020"
  },
  {
    "text": "operations in base 100 on paper. So 3, 14, 15, 92,\n55, 35, 89, 79, 31.",
    "start": "889020",
    "end": "909500"
  },
  {
    "text": "So these are all\nbase 100 numbers. And say my rolling\nwindow is size 5.",
    "start": "909500",
    "end": "916280"
  },
  {
    "text": "One, two, three, four, five. ",
    "start": "916280",
    "end": "921980"
  },
  {
    "text": "So I want to come up with a way\nso that I have the hash of this",
    "start": "921980",
    "end": "927010"
  },
  {
    "text": "and then when I slide my window,\nI will get the hash of this.",
    "start": "927010",
    "end": "932690"
  },
  {
    "text": " What hashing method do we\nuse for rolling hashes?",
    "start": "932690",
    "end": "939370"
  },
  {
    "text": "Does anyone remember? AUDIENCE: [INAUDIBLE]. PROFESSOR: Mod, you said--\nI heard mod something.",
    "start": "939370",
    "end": "947589"
  },
  {
    "text": "AUDIENCE: Yeah,\nthat's what I said. PROFESSOR: OK, so? So? So the hash is?",
    "start": "947590",
    "end": "955740"
  },
  {
    "text": "The hash of a key is? AUDIENCE: It's k mod m or m k. [INAUDIBLE]",
    "start": "955740",
    "end": "961060"
  },
  {
    "text": "PROFESSOR: OK. ",
    "start": "961060",
    "end": "969240"
  },
  {
    "text": "I'm going to say\nk mod something, and I'm going to\nsay that something has to be a prime number\nand we'll see why in a bit.",
    "start": "969240",
    "end": "977649"
  },
  {
    "text": "Let's say our\nprime number is 23. ",
    "start": "977650",
    "end": "982850"
  },
  {
    "text": "So let's compute the value of\nthe hash for the sliding window of the first sliding\nwindow and then we'll",
    "start": "982850",
    "end": "989290"
  },
  {
    "text": "compute the hash for the\nsecond sliding window. Oh, there is some at\nthe computer, sweet.",
    "start": "989290",
    "end": "995900"
  },
  {
    "text": "314159265 modulo 23 is how much?",
    "start": "995900",
    "end": "1012354"
  },
  {
    "text": "OK, while you're doing\nthat, can someone tell me what\ncomputation will he need to do for the second\nsliding window?",
    "start": "1012354",
    "end": "1019199"
  },
  {
    "text": "AUDIENCE: 1519265359. PROFESSOR: 159265359.",
    "start": "1019199",
    "end": "1027920"
  },
  {
    "text": "AUDIENCE: That's a third sign. AUDIENCE: There's\na 1-4 before that. AUDIENCE: The first one is 11. ",
    "start": "1027920",
    "end": "1036349"
  },
  {
    "text": "PROFESSOR: OK. And what's the second one? AUDIENCE: [INAUDIBLE] adding--",
    "start": "1036349",
    "end": "1045530"
  },
  {
    "text": "PROFESSOR: 1415926335 modulo 23. AUDIENCE: 5.",
    "start": "1045530",
    "end": "1050569"
  },
  {
    "text": " PROFESSOR: I heard a 5 and a 7.",
    "start": "1050569",
    "end": "1056400"
  },
  {
    "text": "OK. AUDIENCE: Hold on, hold on. ",
    "start": "1056400",
    "end": "1061615"
  },
  {
    "text": "PROFESSOR: I'll take\nthe average of those two and we can move on, right? AUDIENCE: Three\nfive, and arguably 6.",
    "start": "1061615",
    "end": "1069290"
  },
  {
    "text": "PROFESSOR: All right,\nso let's implement an operation called slide.",
    "start": "1069290",
    "end": "1074405"
  },
  {
    "text": " And slide will take the new\nnumber that I'm sliding in.",
    "start": "1074405",
    "end": "1083059"
  },
  {
    "text": " And the old number\nthat I'm sliding out, making my life really easy.",
    "start": "1083060",
    "end": "1091260"
  },
  {
    "text": "So in this case, the\nnumbers would be-- AUDIENCE: The new one is 35.",
    "start": "1091260",
    "end": "1098880"
  },
  {
    "text": "PROFESSOR: And the old one? AUDIENCE: 3. ",
    "start": "1098880",
    "end": "1106125"
  },
  {
    "text": "PROFESSOR: Excellent. And I want to have an internal\nstate called hash that has 11",
    "start": "1106125",
    "end": "1114940"
  },
  {
    "text": "and I want to get 6 after\nI'm done running slide.",
    "start": "1114940",
    "end": "1120639"
  },
  {
    "text": "This is still too hard for me,\nso before we figure out hash, let's say that we have an\ninternal state called n.",
    "start": "1120640",
    "end": "1127320"
  },
  {
    "text": "And n is this big number here. So I want to get from this\nbig number to this big number.",
    "start": "1127320",
    "end": "1134970"
  },
  {
    "text": "What am I going to do?  AUDIENCE: Mod 3,000 [INAUDIBLE].",
    "start": "1134970",
    "end": "1146580"
  },
  {
    "text": "PROFESSOR: OK, so you want\nto take the big number 159265",
    "start": "1146580",
    "end": "1156140"
  },
  {
    "text": "and mod it. AUDIENCE: [INAUDIBLE] ",
    "start": "1156140",
    "end": "1167206"
  },
  {
    "text": "PROFESSOR: So if I mod\nit to by a big number, that's going to be too slow. So I can't mod it. AUDIENCE: Can't\nyou just divide it?",
    "start": "1167206",
    "end": "1174645"
  },
  {
    "text": "PROFESSOR: Division\nis also slow, I don't like the division. I like subtraction,\nsomeone said subtraction.",
    "start": "1174645",
    "end": "1179670"
  },
  {
    "text": "So what I want to do is I want\nto get from here to a number that-- to this number, right?",
    "start": "1179670",
    "end": "1185929"
  },
  {
    "text": "So I want to get\nrid of the 3 and I want to add 35 at the end. To get rid of the 3,\nwhat do I subtract?",
    "start": "1185930",
    "end": "1193600"
  },
  {
    "text": "AUDIENCE: 3 with a bunch of 0s. PROFESSOR: 3 with a bunch of 0s. Excellent. 1, 2, 3, 4, 5, 6, 7, 8.",
    "start": "1193600",
    "end": "1199880"
  },
  {
    "text": "How many of them are there? AUDIENCE: 8. PROFESSOR: OK, how many\ndigits conveys 100?",
    "start": "1199880",
    "end": "1205802"
  },
  {
    "text": "AUDIENCE: Oh, 2 right? AUDIENCE: 4.",
    "start": "1205802",
    "end": "1210840"
  },
  {
    "text": "AUDIENCE: Oh, oh. PROFESSOR: 4. So base 100, so two numbers--",
    "start": "1210840",
    "end": "1216434"
  },
  {
    "text": "AUDIENCE: One base 100\nnumber is two digits. Yep. PROFESSOR: So 8. yeah, OK, 4.",
    "start": "1216435",
    "end": "1222809"
  },
  {
    "text": "Cool. So let's try to write this\nin a more abstract way.",
    "start": "1222810",
    "end": "1229940"
  },
  {
    "text": "So n is the old n\nminus old, right,",
    "start": "1229940",
    "end": "1238159"
  },
  {
    "text": "so that 3 is old times what\ndo I have to multiply it by",
    "start": "1238160",
    "end": "1243920"
  },
  {
    "text": "to get all those zeros? k minus 1?",
    "start": "1243920",
    "end": "1252620"
  },
  {
    "text": "[INAUDIBLE] to\nthat base whatever. PROFESSOR: OK, so-- base\nto the size to something.",
    "start": "1252620",
    "end": "1261980"
  },
  {
    "text": "K minus 1. So K is 5 in this case, right? My window is 5.",
    "start": "1261980",
    "end": "1267750"
  },
  {
    "text": "And I see a 4 there, so I'm\ngoing to add the minus 1 just because that's\nwhat I need to do.",
    "start": "1267750",
    "end": "1273620"
  },
  {
    "text": "OK, so then I get 14159265.",
    "start": "1273620",
    "end": "1279030"
  },
  {
    "text": "What do I do to tack\non a 35 at the end? AUDIENCE: [INAUDIBLE] 35.",
    "start": "1279030",
    "end": "1285204"
  },
  {
    "text": "PROFESSOR: OK, times\nthe base, so that's going to give me the zeroes. And then this is a minus here.",
    "start": "1285204",
    "end": "1291140"
  },
  {
    "text": "And then I'm going to add 35. Right? 1415926535.",
    "start": "1291140",
    "end": "1300419"
  },
  {
    "text": "Look, it's right. So what do I write here?",
    "start": "1300420",
    "end": "1305769"
  },
  {
    "text": "AUDIENCE: The base first. PROFESSOR: Good point. ",
    "start": "1305770",
    "end": "1316011"
  },
  {
    "text": "OK.  Let me play with this a little\nbit before we go further.",
    "start": "1316011",
    "end": "1321650"
  },
  {
    "text": " I'm going to distribute\nthe base here. So this is n times\nbase minus old times",
    "start": "1321650",
    "end": "1332310"
  },
  {
    "text": "base to the k plus mu.",
    "start": "1332310",
    "end": "1337340"
  },
  {
    "text": "And let's rename base to size\nto be the size of the window, I don't like k.",
    "start": "1337340",
    "end": "1343850"
  },
  {
    "text": "And I'm renaming it\nbecause later on we're going to break our slide\ninto appends and skip",
    "start": "1343850",
    "end": "1350560"
  },
  {
    "text": "and the size won't\nbe constant anymore.  OK so does this make sense?",
    "start": "1350560",
    "end": "1357750"
  },
  {
    "text": "It's all math. So this math here becomes\nabstract math here. But nothing else changes. ",
    "start": "1357750",
    "end": "1367610"
  },
  {
    "text": "OK, so now I want\nto get hash-- I want to get hash out\nof n, how do I do that?",
    "start": "1367610",
    "end": "1375960"
  },
  {
    "text": "AUDIENCE: Mod 23. PROFESSOR: Mod 23, very good. So in a general way,\nI would say mod p.",
    "start": "1375960",
    "end": "1384130"
  },
  {
    "text": " OK so hash is n times\nbase minus old times",
    "start": "1384130",
    "end": "1398450"
  },
  {
    "text": "base to the size plus new mod p.",
    "start": "1398450",
    "end": "1406226"
  },
  {
    "text": "Now let's distribute this. I know I can distribute\nmodulo across addition and subtraction, so I have n\nmod p times base minus old times",
    "start": "1406227",
    "end": "1422790"
  },
  {
    "text": "base to the size mod p plus new.",
    "start": "1422790",
    "end": "1428550"
  },
  {
    "text": "And everything still\nhas to be a mod p. ",
    "start": "1428550",
    "end": "1433670"
  },
  {
    "text": "So can someone tell me\nwhere did I add the mod p?",
    "start": "1433670",
    "end": "1440268"
  },
  {
    "text": " Why did I put it here and here?",
    "start": "1440268",
    "end": "1446005"
  },
  {
    "text": " AUDIENCE: [INAUDIBLE]\nthe original?",
    "start": "1446005",
    "end": "1454380"
  },
  {
    "text": "PROFESSOR: OK, nmodp\nis hash, let's do that. ",
    "start": "1454380",
    "end": "1463150"
  },
  {
    "text": "So what's true about both\nn and base to the size? AUDIENCE: Constant.",
    "start": "1463150",
    "end": "1469370"
  },
  {
    "text": "PROFESSOR: Constant? AUDIENCE: Like can\nyou please repeat it?",
    "start": "1469370",
    "end": "1474850"
  },
  {
    "text": "AUDIENCE: You could [INAUDIBLE]\nbase to the size but you can't [INAUDIBLE] hash,\nI mean [INAUDIBLE]-- PROFESSOR: Hm. OK, so keep this in mind\nthat we can compute this,",
    "start": "1474850",
    "end": "1481853"
  },
  {
    "text": "because we're going to\nwant to do that later. But what I had in mind is\nthe opposite of constant, because n is huge.",
    "start": "1481853",
    "end": "1488130"
  },
  {
    "text": "Right? And base to the size\nis also huge, right?",
    "start": "1488130",
    "end": "1493570"
  },
  {
    "text": "N is this number. Base to the size is\nthis number here.",
    "start": "1493570",
    "end": "1499669"
  },
  {
    "text": "1 followed by this many zeros,\nso these numbers are big. All the other numbers are small.",
    "start": "1499670",
    "end": "1505060"
  },
  {
    "text": "Base is small, old is small,\nnew is small, p is small.",
    "start": "1505060",
    "end": "1510285"
  },
  {
    "text": "PROFESSOR: So I want to\nget rid of the big numbers, because math with\nbig numbers is slow.",
    "start": "1510285",
    "end": "1516370"
  },
  {
    "text": "So unless I get rid\nof the big numbers, I'm not going to get\nto order 1 operation.",
    "start": "1516370",
    "end": "1521390"
  },
  {
    "text": "So we already got rid of\nthis one because it's hash and how do I get\nrid of this one?",
    "start": "1521390",
    "end": "1526515"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ",
    "start": "1526515",
    "end": "1534242"
  },
  {
    "text": "AUDIENCE: There's\nsome 6042 algorithm that does that quickly. AUDIENCE: Well, we definitely\njust went over this in class",
    "start": "1534242",
    "end": "1540157"
  },
  {
    "text": "today. AUDIENCE: Which is why you\nneeded the prime number, right?",
    "start": "1540157",
    "end": "1545705"
  },
  {
    "text": "PROFESSOR: Not quite. There is an algorithm\nthat does it quickly. That algorithm is\ncalled repeated squaring",
    "start": "1545706",
    "end": "1550810"
  },
  {
    "text": "and the quickest-- wait, I'm not\ndone, I promise I'm not done. So the quickest\nthat this guy can",
    "start": "1550810",
    "end": "1558110"
  },
  {
    "text": "run if you do everything right\nis order of [? log ?] size.",
    "start": "1558110",
    "end": "1565520"
  },
  {
    "text": "If the window size\nis 1 megabyte, 10 megabytes, if the\nwindow size keeps growing,",
    "start": "1565520",
    "end": "1571130"
  },
  {
    "text": "if the window size is\npart of the input size, is this constant? Nope. So I can't do that.",
    "start": "1571130",
    "end": "1577610"
  },
  {
    "text": "Someone else gave me\nthe right answer before. ",
    "start": "1577610",
    "end": "1584750"
  },
  {
    "text": "What did you say before? AUDIENCE: Pre-compute it? PROFESSOR: OK. It's a constant, so why\ndon't we pre-compute it?",
    "start": "1584750",
    "end": "1590700"
  },
  {
    "text": "Take it out of here,\ncompute it once, and after that, we can\nuse it all the time.",
    "start": "1590700",
    "end": "1597730"
  },
  {
    "text": "And unless someone has\na better name for it, I'm going to call this magic. ",
    "start": "1597730",
    "end": "1604679"
  },
  {
    "text": "The name has to be\nshort, by the way, because I'll be writing\nthis a few times. ",
    "start": "1604679",
    "end": "1610250"
  },
  {
    "text": "OK, so now we have hash\nequals hash times base minus old times magic\nplus new modulo p.",
    "start": "1610250",
    "end": "1616854"
  },
  {
    "text": "Doesn't look too bad, right? Pretty constant time. Now let's write the pseudo\ncode for the rolling hash,",
    "start": "1616854",
    "end": "1622720"
  },
  {
    "text": "and let's break this\nout into an append and a skip at the same time.",
    "start": "1622720",
    "end": "1628362"
  },
  {
    "text": "AUDIENCE: What if hash is\nbigger than your word size? PROFESSOR: So hash is always\ngoing to be something modulo p.",
    "start": "1628362",
    "end": "1635390"
  },
  {
    "text": "AUDIENCE: Oh that's true, OK. PROFESSOR: So as\nlong as p is decent, it's not going to get too big. AUDIENCE: All right.",
    "start": "1635390",
    "end": "1641050"
  },
  {
    "text": "What if old and\nnew [INAUDIBLE]-- PROFESSOR: So old and new--",
    "start": "1641050",
    "end": "1646190"
  },
  {
    "text": "AUDIENCE: P is a big number . 314159269 is possibly bigger\nthan your word size, right?",
    "start": "1646190",
    "end": "1652494"
  },
  {
    "text": "PROFESSOR: Definitely. So that's why we're\ngetting rid of it. AUDIENCE: That is\ntrue. [INAUDIBLE]",
    "start": "1652494",
    "end": "1659000"
  },
  {
    "text": "PROFESSOR: So this is\nk digits in base b. Too much. Not going to deal with it.",
    "start": "1659000",
    "end": "1664880"
  },
  {
    "text": "Hash is one digit in base p,\nbecause we're doing it mod p. Old and new are\none digit base b.",
    "start": "1664880",
    "end": "1673270"
  },
  {
    "text": "So hopefully small numbers. OK, I haven't seen a\nconstructor in CLRS, so I'm going to say that\nwhen you write pseudocode,",
    "start": "1673270",
    "end": "1680590"
  },
  {
    "text": "the method name\nfor a constructor is in it because we've\nseen this before. And let's say our constructor\nfor a rolling cache",
    "start": "1680590",
    "end": "1687140"
  },
  {
    "text": "starts with the base\nthat we're going to use. And it builds an\nempty rolling hash,",
    "start": "1687140",
    "end": "1693209"
  },
  {
    "text": "so first there's nothing in it. And then you append and you\nskip and you can get the hash. AUDIENCE: What about p? Shouldn't you also do p?",
    "start": "1693209",
    "end": "1698860"
  },
  {
    "text": "PROFESSOR: Sure. Do that. So let's say base and p are set,\nso somethings sets base and p.",
    "start": "1698860",
    "end": "1709100"
  },
  {
    "text": "And we need to compute\nthe initial values for hash and magic. ",
    "start": "1709100",
    "end": "1718049"
  },
  {
    "text": "What's hash? Zero. There's nothing in there, right? The number is 0. What's magic?",
    "start": "1718050",
    "end": "1725180"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. Well, I mean, you can\ncalculate it, right? PROFESSOR: So magic is\nbased to the size mod p.",
    "start": "1725180",
    "end": "1732260"
  },
  {
    "text": "What size? AUDIENCE: [INAUDIBLE] 0. Just one mod p.",
    "start": "1732260",
    "end": "1738076"
  },
  {
    "text": "PROFESSOR: Yep. So when I start, I have\nan empty sliding window. Nothing in there, size\nis 0, base to the size",
    "start": "1738076",
    "end": "1745159"
  },
  {
    "text": "is 1, whatever the size is. Very good. Let's write append.",
    "start": "1745160",
    "end": "1750410"
  },
  {
    "start": "1750410",
    "end": "1757390"
  },
  {
    "text": "Hash is? So here, we're doing both\nan append and the skip.",
    "start": "1757390",
    "end": "1763720"
  },
  {
    "text": "We have to figure out\nwhich operation belongs to the append, which\noperations belong to the skip. So someone help me out.",
    "start": "1763720",
    "end": "1769967"
  },
  {
    "text": " AUDIENCE: We know subtraction\nwould [INAUDIBLE]--",
    "start": "1769967",
    "end": "1776110"
  },
  {
    "text": "AUDIENCE: Multiply\nmod base [INAUDIBLE]. PROFESSOR: Yup. So this is the append, right?",
    "start": "1776110",
    "end": "1781943"
  },
  {
    "text": " And this is the skip.",
    "start": "1781943",
    "end": "1787299"
  },
  {
    "text": " So hash equals hash.",
    "start": "1787300",
    "end": "1793820"
  },
  {
    "text": " Times base plus new mod p.",
    "start": "1793820",
    "end": "1804900"
  },
  {
    "text": "Very good. This is important. If you don't put\nthis in, Python knows how to deal with big numbers.",
    "start": "1804900",
    "end": "1810760"
  },
  {
    "text": "So it will take your\ncode and it'll run it, and you'll get the\ncorrect output. But hash will keep growing\nand growing and growing",
    "start": "1810760",
    "end": "1817059"
  },
  {
    "text": "because you're computing\nn instead of hash. And you'll wonder why\nthe code is so slow.",
    "start": "1817060",
    "end": "1822710"
  },
  {
    "text": "So don't forget this. What else do I need to update? ",
    "start": "1822710",
    "end": "1829720"
  },
  {
    "text": "OK, I don't have a\nconstant for that, but I have a constant\nI for something else.",
    "start": "1829720",
    "end": "1836360"
  },
  {
    "text": "Magic. So magic is base\nto the size mod p. So what happened\nto the window size?",
    "start": "1836360",
    "end": "1842549"
  },
  {
    "text": "AUDIENCE: Oh. Times base [INAUDIBLE]. PROFESSOR: Excellent. The window size grows\nby 1, therefore, I have to multiply this by base.",
    "start": "1842549",
    "end": "1850669"
  },
  {
    "text": "Magic times base mod p.",
    "start": "1850670",
    "end": "1856110"
  },
  {
    "text": "AUDIENCE: Does p always have\nto be less then the base, or can it be anything?",
    "start": "1856110",
    "end": "1861740"
  },
  {
    "text": "PROFESSOR: It can be\nbigger than the base. So if I want to not have\na lot of false positives,",
    "start": "1861740",
    "end": "1868080"
  },
  {
    "text": "then suppose my base\nis 256, because that's an extra character. ",
    "start": "1868080",
    "end": "1874350"
  },
  {
    "text": "I was arguing earlier that\nthe number of false positives that I have is 1/P basically.",
    "start": "1874350",
    "end": "1880620"
  },
  {
    "text": "So I want p to be as close\nto the word size as possible. So p will be around\n2 to the 4 billion.",
    "start": "1880620",
    "end": "1888670"
  },
  {
    "text": "So definitely bigger. It can work either way. It's better if it's\nbigger for the algorithm",
    "start": "1888670",
    "end": "1893850"
  },
  {
    "text": "that we're using there. All right, good\nquestion, thank you. Skip.",
    "start": "1893850",
    "end": "1900110"
  },
  {
    "text": "Let's implement skip.  Hash is?",
    "start": "1900110",
    "end": "1906556"
  },
  {
    "text": "AUDIENCE: Hash minus old\n[INAUDIBLE] then comes magic",
    "start": "1906556",
    "end": "1916016"
  },
  {
    "text": "[INAUDIBLE]. ",
    "start": "1916016",
    "end": "1925510"
  },
  {
    "text": "PROFESSOR: OK, can I\nwrite this in Python? What happens if I write this? AUDIENCE: [INAUDIBLE]\nmagic is, [INAUDIBLE] We",
    "start": "1925510",
    "end": "1936929"
  },
  {
    "text": "won't be able to find it. PROFESSOR: OK so--\nsorry, not in Python. So assume all these are instance\nvariables done the right way,",
    "start": "1936929",
    "end": "1943520"
  },
  {
    "text": "but what happens if old times\nmagic is bigger than hash? ",
    "start": "1943520",
    "end": "1949600"
  },
  {
    "text": "I get a negative number. And in math, people\nassume that if you do something like minus 3 modulo\n23, you're going to get 20.",
    "start": "1949600",
    "end": "1960150"
  },
  {
    "text": " So modulo is always positive\nin modular arithmetic,",
    "start": "1960150",
    "end": "1969190"
  },
  {
    "text": "but in a programming language,\nif you do minus 3 modulo 20,",
    "start": "1969190",
    "end": "1974779"
  },
  {
    "text": "I'm pretty sure you're\ngoing to get minus 3. And things will go back.",
    "start": "1974780",
    "end": "1980580"
  },
  {
    "text": "So we want to get\nto a positive number here so that the\narithmetic modulo",
    "start": "1980580",
    "end": "1986210"
  },
  {
    "text": "p will work just like in math. So we want to add something to\nmake this whole thing positive.",
    "start": "1986210",
    "end": "1992687"
  },
  {
    "text": "AUDIENCE: That's something\ntimes [INAUDIBLE]. PROFESSOR: OK, so if\nwe're working modulo p",
    "start": "1992687",
    "end": "1998100"
  },
  {
    "text": "then we can add anything to\nour number, any multiple of p, and the result modulo\np doesn't change.",
    "start": "1998100",
    "end": "2004769"
  },
  {
    "text": "For example, here to get from\nminus 3 to 20, I added 23. Right?",
    "start": "2004770",
    "end": "2011679"
  },
  {
    "text": "OK, so I want to\nadd a correction factor of p times something.",
    "start": "2011680",
    "end": "2017920"
  },
  {
    "text": "So what should that be?  I want to make sure that\nthis whole thing is positive.",
    "start": "2017920",
    "end": "2023970"
  },
  {
    "start": "2023970",
    "end": "2032855"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ",
    "start": "2032855",
    "end": "2039290"
  },
  {
    "text": "PROFESSOR: So let's see. How big are these\nguys, by the way? Magic is something mod p, right? So it's definitely\nsmaller or equal to p.",
    "start": "2039290",
    "end": "2047010"
  },
  {
    "text": "How about old?  AUDIENCE: [INAUDIBLE]",
    "start": "2047010",
    "end": "2052320"
  },
  {
    "text": "PROFESSOR: OK. So smaller or equal than? AUDIENCE: Base. PROFESSOR: Base.",
    "start": "2052320",
    "end": "2059649"
  },
  {
    "text": "Very good. So this whole\nthing is definitely going to be smaller\nthan [INAUDIBLE].",
    "start": "2059650",
    "end": "2065552"
  },
  {
    "text": "So this is definitely going to\nbe smaller than base time p, right? So let's put that in here. ",
    "start": "2065552",
    "end": "2072620"
  },
  {
    "text": "You can get fancy and say\nhey, this is smaller than p, and this is old, so you can put\nold here instead, same thing.",
    "start": "2072620",
    "end": "2077989"
  },
  {
    "text": " OK so we have hash.",
    "start": "2077989",
    "end": "2083710"
  },
  {
    "text": "Now what do we do to magic? ",
    "start": "2083710",
    "end": "2088879"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] divide\nit by the base and mod p.",
    "start": "2088880",
    "end": "2100219"
  },
  {
    "text": "It seems base [? and p ?]\ndon't share factors. You're allowed to do that?",
    "start": "2100219",
    "end": "2105642"
  },
  {
    "text": " PROFESSOR: OK, so skip part two. ",
    "start": "2105642",
    "end": "2114910"
  },
  {
    "text": "Magic equals-- So what if\nmy magic is something like 5",
    "start": "2114910",
    "end": "2133940"
  },
  {
    "text": "and my base is 100? How is this going to work? ",
    "start": "2133940",
    "end": "2142580"
  },
  {
    "text": "This is where we use fancy math. And I call it fancy\nmath because I",
    "start": "2142580",
    "end": "2147670"
  },
  {
    "text": "didn't learn it in high school. So I'm assuming at least some of\nyou do not know how this works.",
    "start": "2147670",
    "end": "2153190"
  },
  {
    "text": "So if we're working\nmodulo p, you can think 23 if you prefer\nconcrete numbers instead.",
    "start": "2153190",
    "end": "2158750"
  },
  {
    "text": " For any number between\n1 and p minus 1,",
    "start": "2158750",
    "end": "2170270"
  },
  {
    "text": "there's something called\nthe multiplicative inverse, a to the minus 1,\nthat also happens",
    "start": "2170270",
    "end": "2177260"
  },
  {
    "text": "to be an integer\nbetween 1 and p minus 1. And if you multiply, say, a\ntimes b, that's another number.",
    "start": "2177260",
    "end": "2186510"
  },
  {
    "text": "And then you multiply\nthis by a minus 1, you're going to\nget to b modulo p.",
    "start": "2186510",
    "end": "2194370"
  },
  {
    "text": "So a minus 1 cancels\na in a multiplication. Now let's see if you guys\nare paying attention.",
    "start": "2194370",
    "end": "2200160"
  },
  {
    "text": "What's a times a to\nthe minus 1 modulo p? AUDIENCE: 1. PROFESSOR: OK.",
    "start": "2200160",
    "end": "2205170"
  },
  {
    "text": "Sweet.  So suppose I want to find the\nmultiplicative inverse of 6.",
    "start": "2205170",
    "end": "2213770"
  },
  {
    "text": "What is it? AUDIENCE: Is that the mod 23? PROFESSOR: Yeah.",
    "start": "2213770",
    "end": "2219186"
  },
  {
    "text": "Can someone think of\nwhat it should be? AUDIENCE: 4. PROFESSOR: 4, wow, fast.",
    "start": "2219186",
    "end": "2224559"
  },
  {
    "text": "So 6 times 4 equals 24,\nwhich is 1 modulo 23.",
    "start": "2224560",
    "end": "2232230"
  },
  {
    "text": "Now let's see if this magic\nreally works, this math magic. So 6 times 7 equals?",
    "start": "2232230",
    "end": "2239968"
  },
  {
    "text": "AUDIENCE: 42. PROFESSOR: Which is what mod 23? Computer guys.",
    "start": "2239968",
    "end": "2245796"
  },
  {
    "text": "AUDIENCE: Negative 4, so 5. Ah, just kidding. Yeah. ",
    "start": "2245796",
    "end": "2255069"
  },
  {
    "text": "PROFESSOR: OK now\nlet's multiply 19 by 4. What is this?",
    "start": "2255070",
    "end": "2261177"
  },
  {
    "text": "AUDIENCE: 76.  PROFESSOR: All\nright, 76 modulo 23?",
    "start": "2261177",
    "end": "2266190"
  },
  {
    "text": " AUDIENCE: 7 maybe.",
    "start": "2266190",
    "end": "2274210"
  },
  {
    "text": "PROFESSOR: Are you kidding? Did you compute it,\nor did you use-- AUDIENCE: 69 [INAUDIBLE]",
    "start": "2274210",
    "end": "2281040"
  },
  {
    "text": "PROFESSOR: OK. Started with 7, ended with 7. So this works.",
    "start": "2281040",
    "end": "2286414"
  },
  {
    "text": " So as long we're working\nmodulo a prime number,",
    "start": "2286415",
    "end": "2293650"
  },
  {
    "text": "we can always compute\nmultiplicative inverses. And Python has a\nfunction for that,",
    "start": "2293650",
    "end": "2299490"
  },
  {
    "text": "so I'll let you Google\nits standard library to find out what it is. But it can be done,\nthat's what matters",
    "start": "2299490",
    "end": "2304750"
  },
  {
    "text": "as far as we're concerned. So we're going to say that magic\nis magic times base minus 1 mod",
    "start": "2304750",
    "end": "2315880"
  },
  {
    "text": "p, which is the multiplicative\ninverse everything mod p.",
    "start": "2315880",
    "end": "2321230"
  },
  {
    "text": "Now suppose this base\nminus 1 modulo p, this multiplicative inverse\nalgorithm is really slow.",
    "start": "2321230",
    "end": "2328089"
  },
  {
    "text": "What do we do to stay order 1?",
    "start": "2328090",
    "end": "2334820"
  },
  {
    "text": "Pre compute it. Base is not going to change. Very good.",
    "start": "2334820",
    "end": "2339990"
  },
  {
    "text": "So the inverse of base, I\nbase, is base minus 1 mod p.",
    "start": "2339990",
    "end": "2347900"
  },
  {
    "text": " So here I replace\nthis with I base.",
    "start": "2347900",
    "end": "2355580"
  },
  {
    "text": " OK so skip part one is\nthere, skip part two is here.",
    "start": "2355580",
    "end": "2360809"
  },
  {
    "text": " Does this make sense so far? ",
    "start": "2360810",
    "end": "2369050"
  },
  {
    "text": "I see some confusion. AUDIENCE: A lot. PROFESSOR: A lot\nto take in at once?",
    "start": "2369050",
    "end": "2374410"
  },
  {
    "text": "AUDIENCE: Yes. PROFESSOR: OK. So remember this concept.",
    "start": "2374410",
    "end": "2381670"
  },
  {
    "text": "So this is where\nwe started from. Then we computed\nn, then after n, we worked modulo p\nto gets to hashes.",
    "start": "2381670",
    "end": "2389310"
  },
  {
    "text": "So by working module p,\nwe're able to get rid of all the big\nnumbers and we only",
    "start": "2389310",
    "end": "2394330"
  },
  {
    "text": "have small numbers\nin our rolling hash. And there's that\ncurveball there, there",
    "start": "2394330",
    "end": "2401050"
  },
  {
    "text": "is that inverse,\nmultiplicative inverse, but Python computes\nit for you, so as long as it's in\nthe initializer,",
    "start": "2401050",
    "end": "2406937"
  },
  {
    "text": "here you don't need\nto worry about it, because it's not part of\nthe rolling hash operations.",
    "start": "2406937",
    "end": "2412530"
  },
  {
    "text": "By the way, what's the cost of\nthe rolling hash operations? What's the cost of new? ",
    "start": "2412530",
    "end": "2420225"
  },
  {
    "text": "Sorry, what's the\ncost of append? Not thinking here. ",
    "start": "2420226",
    "end": "2426750"
  },
  {
    "text": "Constant. All these are small\nnumbers, so the arithmetic is constant, right?",
    "start": "2426750",
    "end": "2431880"
  },
  {
    "text": "What's the cost of skip? Skip part 1 here,\nskip part two there. What's the cost of skip?",
    "start": "2431880",
    "end": "2439440"
  },
  {
    "text": "Constant. . All the numbers are small. We went through a lot\nof effort to get that, so skip is order 1.",
    "start": "2439440",
    "end": "2446740"
  },
  {
    "text": "We're missing hash. How would we implement\nthe hash operation? A hash query. ",
    "start": "2446740",
    "end": "2455610"
  },
  {
    "text": "It's easy. Sorry? AUDIENCE: [INAUDIBLE]\nlookup [INAUDIBLE].",
    "start": "2455610",
    "end": "2461540"
  },
  {
    "text": "PROFESSOR: So a rolling hash\nhas append, skip, and hash. I want to implement\nthat hash function.",
    "start": "2461540",
    "end": "2469890"
  },
  {
    "text": "Hash. We're computing\nhash all the time.",
    "start": "2469890",
    "end": "2475470"
  },
  {
    "text": "Return. Sorry, I didn't understand\nwhat you meant by lookup. AUDIENCE: It's\none of our states.",
    "start": "2475470",
    "end": "2480980"
  },
  {
    "text": "PROFESSOR: Yeah. Exactly. So the hash function\nreturns hash, right? What's the cost of that?",
    "start": "2480980",
    "end": "2486700"
  },
  {
    "text": " Constant.",
    "start": "2486700",
    "end": "2492240"
  },
  {
    "text": "So append is constant time, yes?",
    "start": "2492240",
    "end": "2497290"
  },
  {
    "text": "Skip is constant time. Hash is constant time. We're done. This works. Any questions on rolling\nhashes before you",
    "start": "2497290",
    "end": "2503510"
  },
  {
    "text": "have to implement\none of your own? AUDIENCE: [INAUDIBLE]\nwouldn't it",
    "start": "2503510",
    "end": "2509750"
  },
  {
    "text": "be easier to use\na shift function? Then you don't have to\nthink about plus and minus.",
    "start": "2509750",
    "end": "2516089"
  },
  {
    "text": "PROFESSOR: A shift function. AUDIENCE: Well I mean like,\nyou can shift bit-wise, right?",
    "start": "2516089",
    "end": "2521970"
  },
  {
    "text": "PROFESSOR: OK. AUDIENCE: So you\ncan just use shift instead of thinking\nabout where to add this, where to subtract this.",
    "start": "2521970",
    "end": "2528841"
  },
  {
    "text": "PROFESSOR: Well so\nI do bit operations if I'm willing to work\nwith these big numbers. AUDIENCE: But then\nyou have to compute",
    "start": "2528841",
    "end": "2534611"
  },
  {
    "text": "the mod of some\nbig number, right? Like just like that. For this one, you don't\nhave to, because you",
    "start": "2534611",
    "end": "2541334"
  },
  {
    "text": "have the original\nhash [INAUDIBLE]. ",
    "start": "2541334",
    "end": "2547429"
  },
  {
    "text": "AUDIENCE: Oh, you\nmean the big number being the actual word\nyou're looking at? AUDIENCE: Yeah.",
    "start": "2547429",
    "end": "2553080"
  },
  {
    "text": "PROFESSOR: So doing shift\nis equivalent to maintaining a list and pushing and\npopping things into the list.",
    "start": "2553080",
    "end": "2559869"
  },
  {
    "text": "And then you have\nto do a hash, it's equivalent to looking\nover the entire list and computing the hash function.",
    "start": "2559870",
    "end": "2565560"
  },
  {
    "text": "Because you'd have a big\nnumber and you have to take it modulo 23. And that's order of the\nsize of the big number.",
    "start": "2565560",
    "end": "2571886"
  },
  {
    "text": "But we're not\nallowed to do that. Hash has to be constant time,\notherwise this thing is slow. ",
    "start": "2571886",
    "end": "2580704"
  },
  {
    "text": "AUDIENCE: Why do we\ncompute magic numbers then? PROFESSOR: Why do\nwe compute magic? We compute magic because\nsomewhere here, we",
    "start": "2580705",
    "end": "2589770"
  },
  {
    "text": "had this base to the size\nmod p and this could get big. ",
    "start": "2589770",
    "end": "2596750"
  },
  {
    "text": "So I can't afford to keep\nit around and do math with it all the time. So I can't compute\nbase to the size every time I want to do append.",
    "start": "2596750",
    "end": "2605346"
  },
  {
    "start": "2605346",
    "end": "2611115"
  },
  {
    "text": "AUDIENCE: Would it be worth\nit if you're computing 100 different values for\nmatching and [INAUDIBLE],",
    "start": "2611115",
    "end": "2617496"
  },
  {
    "text": "so all you'd have to do\nis, when reassigning magic, just look up-- PROFESSOR: So if you\ndo that, then you",
    "start": "2617496",
    "end": "2623920"
  },
  {
    "text": "have to compute values\nfor all the sizes, right?",
    "start": "2623920",
    "end": "2629859"
  },
  {
    "text": "For all the window sizes. AUDIENCE: Right. So if we assume that window\nsizes will be less than 100,",
    "start": "2629860",
    "end": "2635237"
  },
  {
    "text": "it doesn't take very long. PROFESSOR: Well what if the\nwindow size is 1 million? ",
    "start": "2635237",
    "end": "2640810"
  },
  {
    "text": "What if I'm looking\nfor a 1 million character in a 1\ngigabyte string? AUDIENCE: But wouldn't after\nall, wouldn't the size just",
    "start": "2640810",
    "end": "2647550"
  },
  {
    "text": "be around the string, like plus\nor minus the size of the base? So-- AUDIENCE: Only if [INAUDIBLE]",
    "start": "2647550",
    "end": "2653920"
  },
  {
    "text": "So why would the\nsize change again? Why wouldn't it\njust be-- I mean, if you're looking\nat one character.",
    "start": "2653920",
    "end": "2659825"
  },
  {
    "text": "PROFESSOR: So if I have a\nsliding window like this, then it doesn't change. But if I want to\nimplement a rolling hash, that's a bit more general and\nthat supports append and skip.",
    "start": "2659825",
    "end": "2668960"
  },
  {
    "text": "Whenever I append,\nthe size increases. Whenever I skip,\nthe size decreases. AUDIENCE: Oh, you're not doing\nthose at every time step.",
    "start": "2668960",
    "end": "2674688"
  },
  {
    "text": "You're doing them as needed. PROFESSOR: So I'm\ntrying to implement that, that can do\nthem in any sequence.",
    "start": "2674688",
    "end": "2680730"
  },
  {
    "text": "AUDIENCE: Oh. AUDIENCE: OK. I thought we were just\ndoing sliding window. PROFESSOR: So if we're just\ndoing sliding window, you can--",
    "start": "2680730",
    "end": "2687860"
  },
  {
    "text": "AUDIENCE: This is really\nmore caterpillar hash instead of rolling hash, like\nit's more general.",
    "start": "2687860",
    "end": "2693124"
  },
  {
    "text": "PROFESSOR: Yeah. It's a bit more general. So let's look at rolling\nhash for the window. And what you're saying\nis, hey, the window size",
    "start": "2693124",
    "end": "2700269"
  },
  {
    "text": "is constant, so-- AUDIENCE: Why do we\nrepeat magic [INAUDIBLE]?",
    "start": "2700270",
    "end": "2706480"
  },
  {
    "text": "PROFESSOR: Yeah, if the\nwindow size is constant, then we wouldn't re compute it. It wouldn't change. ",
    "start": "2706480",
    "end": "2714040"
  },
  {
    "text": "But with this thing, it's not. OK. AUDIENCE: But I guess it\ndoesn't really matter,",
    "start": "2714040",
    "end": "2721502"
  },
  {
    "text": "but even if you call\nthese in the same order,",
    "start": "2721502",
    "end": "2727238"
  },
  {
    "text": "then isn't that wasting\na lot of computing cycles because just shrinking and then\ngrowing every single operation?",
    "start": "2727238",
    "end": "2736450"
  },
  {
    "text": "PROFESSOR: Oh, well it turns out\nthat a lot of computing cycles is still order one, right? Everything is order one.",
    "start": "2736450",
    "end": "2741720"
  },
  {
    "text": "So as algorithms\npeople, we don't care. If you're doing it in a\nsystem and you actually",
    "start": "2741720",
    "end": "2747380"
  },
  {
    "text": "care about that, then OK. But you're still going\nto have to compute the initial value at some point.",
    "start": "2747380",
    "end": "2753136"
  },
  {
    "text": "AUDIENCE: But if you know\nwindow's staying the same, you don't need to that\ncomputation every time?",
    "start": "2753136",
    "end": "2758320"
  },
  {
    "text": "PROFESSOR: If you-- sorry? AUDIENCE: If you\nknow you're actually just doing a window\nrolling hash-- PROFESSOR: Yup.",
    "start": "2758320",
    "end": "2763355"
  },
  {
    "text": "So then you would\ninitialize magic here to be whatever you\nwant it to be, right?",
    "start": "2763355",
    "end": "2769690"
  },
  {
    "text": "But then when you add the first\nfew characters to the window, you have to figure\nout how to add them.",
    "start": "2769690",
    "end": "2776630"
  },
  {
    "text": "So the code gets more messy. It turns out that\nthis is actually simpler than doing it that way.",
    "start": "2776630",
    "end": "2784070"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]\nmagic I guess I'm just confused because it\nseems like we're still working",
    "start": "2784070",
    "end": "2789540"
  },
  {
    "text": "with the large numbers\nevery time [INAUDIBLE]. PROFESSOR: Oh. Let's see.",
    "start": "2789540",
    "end": "2795020"
  },
  {
    "text": "Mod p, mod p. AUDIENCE: That's not-- so even\nthough you're still multiplying",
    "start": "2795020",
    "end": "2800130"
  },
  {
    "text": "magic times base,\nit doesn't matter. PROFESSOR: After I'm going\nthat, I'm reducing it modulo p.",
    "start": "2800130",
    "end": "2806960"
  },
  {
    "text": "Yeah. AUDIENCE: And then\nbecause we're only working with the smaller values. PROFESSOR: Yup. So everything here stays\nbetween 0 and base or 0 and p.",
    "start": "2806960",
    "end": "2816760"
  },
  {
    "text": "Actually hash is between 0 and\np and magic is between 0 and p.",
    "start": "2816760",
    "end": "2822513"
  },
  {
    "text": "OK. AUDIENCE: How big\ndoes p usually get? PROFESSOR: How big\ndoes p usually get.",
    "start": "2822513",
    "end": "2828450"
  },
  {
    "text": "So And let me get back to this. ",
    "start": "2828450",
    "end": "2834450"
  },
  {
    "text": "So I was arguing that the\nnumber of false positives here is one over O, right? ",
    "start": "2834450",
    "end": "2843390"
  },
  {
    "text": "is the number of values that\nthe hash function can output. How many hash functions can we\noutput using a rolling hash?",
    "start": "2843390",
    "end": "2849360"
  },
  {
    "text": " AUDIENCE: P. PROFESSOR: P. OK. So the number of\nfalse positives is",
    "start": "2849360",
    "end": "2857099"
  },
  {
    "text": "1/P. So what do we want for p? AUDIENCE: We want p to be the\nword size, because but if p's the word size, then--",
    "start": "2857100",
    "end": "2863725"
  },
  {
    "text": "PROFESSOR: So p can't\nbe the word size, because it has to\nbe prime, right? But we want it to be big,\nbecause as p becomes bigger,",
    "start": "2863726",
    "end": "2869700"
  },
  {
    "text": "1/P becomes smaller. So there are two constraints.",
    "start": "2869700",
    "end": "2875840"
  },
  {
    "text": "We want p to be big\nso that we don't have a lot of false positives. And we want p to be\nsmall so that operations",
    "start": "2875840",
    "end": "2883230"
  },
  {
    "text": "don't take a lot of time. So in engineering, this\nis how things work. We call it a tradeoff\nbecause there",
    "start": "2883230",
    "end": "2889410"
  },
  {
    "text": "are forces pushing in\nopposite directions, and it turns out that a\nreasonable answer to the trade off is you make p fit in a word\nso that all those operations",
    "start": "2889410",
    "end": "2898119"
  },
  {
    "text": "are still implementable\nby one CPU instruction. You can't have it\nbe the word size.",
    "start": "2898120",
    "end": "2904040"
  },
  {
    "text": "So if we're working\non a 32-bit computer, I can't have this\nbe 2 to the 32.",
    "start": "2904040",
    "end": "2909390"
  },
  {
    "text": "But I can have a prime number\nthat's just a little bit smaller than 2 to the 32.",
    "start": "2909390",
    "end": "2914640"
  },
  {
    "text": "AUDIENCE: Wait, why can't\nit be the word size? Or why can't it be 2 to the 32?",
    "start": "2914640",
    "end": "2921250"
  },
  {
    "text": "PROFESSOR: So if p would\nbe this instead of a prime, then I can't do this. AUDIENCE: Oh, right right\nright, yeah I knew that.",
    "start": "2921250",
    "end": "2927130"
  },
  {
    "text": "PROFESSOR: There are a\nlot of moving parts here and they're all interconnected. AUDIENCE: You could do that\nfor any prime number, right? PROFESSOR: Yup.",
    "start": "2927130",
    "end": "2932845"
  },
  {
    "text": "So this works for\nprime numbers, but it doesn't work for\nnon prime numbers. AUDIENCE: You could find\nthe multiplicative inverse",
    "start": "2932845",
    "end": "2939310"
  },
  {
    "text": "for any prime number in base 32. Is that true?",
    "start": "2939310",
    "end": "2944545"
  },
  {
    "text": "I mean any odd number is\nwhat I'm trying to say. No, that's not true. PROFESSOR: I refuse to\nanswer hard math questions.",
    "start": "2944545",
    "end": "2950190"
  },
  {
    "text": "AUDIENCE: They need to\nbe relatively prime. They need to share no factors. PROFESSOR: Yes,\nit might be true.",
    "start": "2950190",
    "end": "2955840"
  },
  {
    "text": "AUDIENCE: So an odd will\nnot share a factor with 2 to the 32?",
    "start": "2955840",
    "end": "2961040"
  },
  {
    "text": "PROFESSOR: You're forcing\nme to remember hard math. AUDIENCE: Yeah, I totally\njust thought about this as [INAUDIBLE] number.",
    "start": "2961040",
    "end": "2966880"
  },
  {
    "text": "PROFESSOR: So, no, it\nturns out that there's no-- if you're working modulo\nand non prime base, then",
    "start": "2966880",
    "end": "2973619"
  },
  {
    "text": "there's no\nmultiplicity inverses. So some numbers have no\nmultiplicative inverses, and other numbers have more\nthan one multiplicative inverse.",
    "start": "2973620",
    "end": "2982730"
  },
  {
    "text": "And then the whole\nthing doesn't work. So let me see if I\ncan make this work",
    "start": "2982730",
    "end": "2987970"
  },
  {
    "text": "without having an\nexample by hand. Let's say we're\nworking mod 8, right?",
    "start": "2987970",
    "end": "2993290"
  },
  {
    "text": "Mod 8. So 2 to the minus 1 mod 8 is\nnot going to exist, right?",
    "start": "2993290",
    "end": "2998390"
  },
  {
    "text": "AUDIENCE: Right, but 3 will. PROFESSOR: 3. Let's see what do we use? 3 times 3 is 9, right?",
    "start": "2998390",
    "end": "3004670"
  },
  {
    "text": "So this is 1. How about 3 times 5? ",
    "start": "3004670",
    "end": "3013040"
  },
  {
    "text": "15 mod 8 is 7. So 3 and 5, and then--",
    "start": "3013040",
    "end": "3019051"
  },
  {
    "text": "AUDIENCE: 11. ",
    "start": "3019051",
    "end": "3024207"
  },
  {
    "text": "PROFESSOR: OK.  So 3 times 7 would be 21, 5.",
    "start": "3024207",
    "end": "3030250"
  },
  {
    "text": " OK so 3 and-- 3 is the\nmultiplicative inverse",
    "start": "3030250",
    "end": "3040390"
  },
  {
    "text": "of itself, and 5\nand 7 are-- yeah. I have to build a more\ncomplicated example,",
    "start": "3040390",
    "end": "3045690"
  },
  {
    "text": "but this breaks\ndown in some cases. ",
    "start": "3045690",
    "end": "3052099"
  },
  {
    "text": "I'll have to get back to you. I will look at my notes\nfor modular arithmetic and I'll get back to\nyou guys over email",
    "start": "3052100",
    "end": "3057740"
  },
  {
    "text": "for why and how that breaks. Yes. AUDIENCE: Sorry, can\nyou tell me again why we did the part 2 in skip?",
    "start": "3057740",
    "end": "3063239"
  },
  {
    "text": "Like why did we do that? I'm not really sure [INAUDIBLE].",
    "start": "3063239",
    "end": "3070289"
  },
  {
    "text": "PROFESSOR: So we\nstarted with magic 1 and then we-- in order\nfor this to work,",
    "start": "3070290",
    "end": "3076840"
  },
  {
    "text": "we agree that magic will be\nbase to the size modulo p all the time. So this has to be [INAUDIBLE]\ninvariant for my rolling hash.",
    "start": "3076840",
    "end": "3083900"
  },
  {
    "text": "When I do an append,\nthe size increases by 1. And then I multiply\nby base to modulo p.",
    "start": "3083900",
    "end": "3091010"
  },
  {
    "text": "When I do a skip, the\nsize decreases by 1. So I have to change magic,\nbecause magic is always",
    "start": "3091010",
    "end": "3099360"
  },
  {
    "text": "base times size, so\nI have to update it. So this is why this happened.",
    "start": "3099360",
    "end": "3104740"
  },
  {
    "text": "Because initially,\nI wanted to update by dividing it by base, right? Magic divided by base.",
    "start": "3104740",
    "end": "3111750"
  },
  {
    "text": "But if magic is 5\nand base is 100, we're not going\nto get an integer. And we want to stay\nwithin integers,",
    "start": "3111750",
    "end": "3118630"
  },
  {
    "text": "so that's when I pulled\nout fancy math and-- OK. ",
    "start": "3118630",
    "end": "3125560"
  },
  {
    "text": "OK. So how are we doing\nwith rolling hashes? Good?",
    "start": "3125560",
    "end": "3130764"
  },
  {
    "text": "AUDIENCE: All this math\nwill be in the notes, right? PROFESSOR: Everything. Oh, yeah, everything else\nwill be in the notes.",
    "start": "3130764",
    "end": "3136920"
  },
  {
    "text": "Before we close out, I want\nto show you one cute thing.",
    "start": "3136920",
    "end": "3142880"
  },
  {
    "text": "Who remembers\namortized analysis? I know there's one person\nthat said they understood. ",
    "start": "3142880",
    "end": "3150490"
  },
  {
    "text": "All PROFESSOR: The growing,\nshrinking thing is what we did in lecture. I want to show something else.",
    "start": "3150490",
    "end": "3156290"
  },
  {
    "start": "3151000",
    "end": "3368000"
  },
  {
    "text": "I want to show\nyou a binary tree. A binary search tree, because\nyou've seen this on the PSAT and you already hate it.",
    "start": "3156290",
    "end": "3163300"
  },
  {
    "text": "AUDIENCE: Why'd they\ncall it amortization? Because I looked it up\nonline, it means to kill, and so I'm like, why not say\nlike, attrition or something",
    "start": "3163300",
    "end": "3171760"
  },
  {
    "text": "else that's a little bit less-- PROFESSOR: Amortization is\nalso used in accounting to mean",
    "start": "3171760",
    "end": "3178410"
  },
  {
    "text": "you're-- [INTERPOSING VOICES] ",
    "start": "3178410",
    "end": "3185594"
  },
  {
    "text": "PROFESSOR: Let's use the\ngrowing hash example, because that's good for\nwhy this is the case. So when you're growing your\ntable, you're inserting.",
    "start": "3185594",
    "end": "3193470"
  },
  {
    "text": "If you still have\nspace, that's order one. If not, you have to grow\nyour table to insert.",
    "start": "3193470",
    "end": "3198540"
  },
  {
    "text": "And that is more expensive. That's order n where n is how\nmany elements you had before.",
    "start": "3198540",
    "end": "3204220"
  },
  {
    "text": "So if you graph this\ncosts, if you start off with a table of size one, you\ncan insert the first element",
    "start": "3204220",
    "end": "3210560"
  },
  {
    "text": "for a cost of one. For the second element, you\nhave to resize the table, so it's a cost of two.",
    "start": "3210560",
    "end": "3215720"
  },
  {
    "text": " Now when you're trying to\ninsert the third element, you have to resize the\ntable again to a size of 4.",
    "start": "3215720",
    "end": "3223600"
  },
  {
    "text": "But when you insert the\nfourth element, it's free. Well, cost of one. When you insert\nthe fifth element,",
    "start": "3223600",
    "end": "3230690"
  },
  {
    "text": "you have to resize a table\nto the size of eight, right? So The table size is one, two,\nfour, four, and now it's eight.",
    "start": "3230690",
    "end": "3237540"
  },
  {
    "text": "But because they\nresized this to eight, the next three assertions\nare going to be order one.",
    "start": "3237540",
    "end": "3242730"
  },
  {
    "text": "And then the one after that is\ngoing to make the table be 16. So I can do seven\ninsertions for free",
    "start": "3242730",
    "end": "3251765"
  },
  {
    "text": "and then I'm going\nto have to pay a lot more for the next one.",
    "start": "3251765",
    "end": "3257450"
  },
  {
    "text": "Someone said dampening. I like dampening because\nthe idea behind amortization is that you can take--\nyou have these big costs",
    "start": "3257450",
    "end": "3265160"
  },
  {
    "text": "and they don't occur very often. So you can think of it\nas taking these big costs",
    "start": "3265160",
    "end": "3270190"
  },
  {
    "text": "and chopping them up. For example, I'm going\nto chop this up into four and I'm going to take this\npiece and put it here.",
    "start": "3270190",
    "end": "3278010"
  },
  {
    "text": "This piece and put it here. This piece and put it here. And then I'm going to\nchop this guy into two,",
    "start": "3278010",
    "end": "3283933"
  },
  {
    "text": "and then take this\npiece and put it here. And the beginning's\na little bit weird, let's not worry about\nthat but this guy,",
    "start": "3283933",
    "end": "3291130"
  },
  {
    "text": "if I chop this guy up into\neight, it's going to happen, is it?",
    "start": "3291130",
    "end": "3297600"
  },
  {
    "text": "Well we can put-- so this guy\ngrows exponentially, right?",
    "start": "3297600",
    "end": "3304180"
  },
  {
    "text": "Every time it's multiplied by 2. But the gap size here\nalso is multiplied by 2.",
    "start": "3304180",
    "end": "3309680"
  },
  {
    "text": "So when I chop this up and\nI re distribute the pieces, it turns out that the\npieces are the same size.",
    "start": "3309680",
    "end": "3317040"
  },
  {
    "text": "So if I apply a dampening\nfunction that does this, then the costs are going\nto look-- they're not",
    "start": "3317040",
    "end": "3323170"
  },
  {
    "text": "going to be on\none, they there are going to be three or something. ",
    "start": "3323170",
    "end": "3328690"
  },
  {
    "text": "And they look like this. Now, my CPU time is going\nto look like this, right? That's not going to\nchange, because that's",
    "start": "3328690",
    "end": "3334770"
  },
  {
    "text": "what's really happening. But what I can argue\nfor is that if I look for a bunch of operations,\nsay if I look at the first 16",
    "start": "3334770",
    "end": "3344059"
  },
  {
    "text": "insertions, the cost of those\nis the sum of these guys.",
    "start": "3344060",
    "end": "3350830"
  },
  {
    "text": "So it's not been\nsquared, which is what you would get if you\nlook at the worst cases here, but it's order n.",
    "start": "3350830",
    "end": "3356900"
  },
  {
    "text": "So this is what's\nbeing dampened, the amount of time\nan operation takes. ",
    "start": "3356900",
    "end": "3364857"
  },
  {
    "text": "Does this make some sense?  All right, I want to show you a\ncute example for amortization.",
    "start": "3364857",
    "end": "3372869"
  },
  {
    "start": "3368000",
    "end": "3599000"
  },
  {
    "text": "And I'll try to make it quick. So how do you list the keys in\na binary search tree in order?",
    "start": "3372870",
    "end": "3378308"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: In order\ntraversal, right? OK, there's another\nway of doing it",
    "start": "3378308",
    "end": "3385170"
  },
  {
    "text": "that makes perfect\nintuitive sense. Get the minimum key, right?",
    "start": "3385170",
    "end": "3390970"
  },
  {
    "text": "And then output the\nminimum key, then",
    "start": "3390970",
    "end": "3395980"
  },
  {
    "text": "while you can get the\nnext largest, which is the successor--\nso while this is not,",
    "start": "3395980",
    "end": "3404660"
  },
  {
    "text": "now output that key, right? If you do the thing\nwithin order traversal,",
    "start": "3404660",
    "end": "3410170"
  },
  {
    "text": "you get order end running time. What's the running\ntime for this? AUDIENCE: For n. ",
    "start": "3410170",
    "end": "3418006"
  },
  {
    "text": "You're going through\nall the keys, too. PROFESSOR: Yeah,\nbut next largest-- what's the running\ntime for next largest?",
    "start": "3418006",
    "end": "3424500"
  },
  {
    "text": "AUDIENCE: Log n. PROFESSOR: So this\nguy's log in, right? ",
    "start": "3424500",
    "end": "3430240"
  },
  {
    "text": "So I have n keys, so this\nwhole thing is O of n logn.",
    "start": "3430240",
    "end": "3437640"
  },
  {
    "text": "So it's definitely not\nbigger than n logn. But now, let's look at what\nhappens using the tree.",
    "start": "3437640",
    "end": "3444630"
  },
  {
    "text": "When I call min, I\ngo down on each edge. And then I call successor\nand it outputs this guy.",
    "start": "3444630",
    "end": "3452599"
  },
  {
    "text": "Then I call successor\nand it goes here. Than I call successor and\nit goes up here and here",
    "start": "3452600",
    "end": "3458190"
  },
  {
    "text": "and outputs this guy. Successor goes here. Successor goes here.",
    "start": "3458190",
    "end": "3464850"
  },
  {
    "text": "Successor goes all the way down\nhere, successor goes up here,",
    "start": "3464850",
    "end": "3471010"
  },
  {
    "text": "successor goes here,\nand then successor goes all the way up to\nthe roots and gives up.",
    "start": "3471010",
    "end": "3479045"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]  PROFESSOR: So how many times\ndo I traverse each edge?",
    "start": "3479045",
    "end": "3487720"
  },
  {
    "text": "Exactly twice, right? How many edges in the tree? If I have n nodes, how many\nlines do I use to connect them?",
    "start": "3487720",
    "end": "3495660"
  },
  {
    "text": "[INAUDIBLE] So 1 node, zero lines. 2 nodes, one line.",
    "start": "3495660",
    "end": "3501370"
  },
  {
    "text": "Three nodes, two lines. So n nodes, n minus one. N asymptotically, good.",
    "start": "3501370",
    "end": "3507395"
  },
  {
    "text": "Good answer. Order, n, edges. Right, each edge gets\ntraversed exactly twice.",
    "start": "3507395",
    "end": "3513840"
  },
  {
    "text": "So amortized cost for n next\nlargest operations is order n.",
    "start": "3513840",
    "end": "3521760"
  },
  {
    "text": "So you can do this instead. This code makes a lot more\nsense than in order traversal.",
    "start": "3521760",
    "end": "3528440"
  },
  {
    "text": "OK, and the last part\nis remember that list query that was on the PSAT? ",
    "start": "3528440",
    "end": "3538140"
  },
  {
    "text": "Turns out you can do a\nfind for the lowest element and then call successor\nuntil you see the highest",
    "start": "3538140",
    "end": "3544160"
  },
  {
    "text": "element for the same argument.",
    "start": "3544160",
    "end": "3551069"
  },
  {
    "text": "Well, I couldn't tell\nyou this for the PSAT because we hadn't learned\namortized analysis, so you wouldn't be able to\nprove that your code is fast.",
    "start": "3551070",
    "end": "3558430"
  },
  {
    "text": "But now if you\nget the intuition, you can write it that way. And your code will\nstill be fast.",
    "start": "3558430",
    "end": "3563650"
  },
  {
    "text": "Same running time.  So the intuition for that\nis a bit more complicated.",
    "start": "3563650",
    "end": "3570619"
  },
  {
    "text": "The proof is more complicated. But the intuition is that\nsay this is l and this is h.",
    "start": "3570620",
    "end": "3576280"
  },
  {
    "text": "Then I'm going to go\nin this tree here. So the same edge magic\nis going to happen,",
    "start": "3576280",
    "end": "3582460"
  },
  {
    "text": "except there will be logn\nedges that are unmatched here and logn edges that\naren't unmatched here.",
    "start": "3582460",
    "end": "3588790"
  },
  {
    "text": "Because once I find the\nnode that's next to h, I'll stop, right? So some edges will\nnot be matched.",
    "start": "3588790",
    "end": "3595140"
  },
  {
    "text": "So then I'll say that the total\nrunning time is logn plus a. ",
    "start": "3595140",
    "end": "3601669"
  },
  {
    "text": "AUDIENCE: i being the number of\nelements you pull out, right? PROFESSOR: Yup. So this is amortized analysis.",
    "start": "3601669",
    "end": "3607660"
  },
  {
    "text": " The list is hard. The traversal is easy.",
    "start": "3607660",
    "end": "3613060"
  },
  {
    "text": "Remember the traversal. That's easy to reason\nabout, so that's good. OK.",
    "start": "3613060",
    "end": "3618793"
  },
  {
    "text": "Any questions on\namortized analysis?  So the idea is that you\nlook at all the operations,",
    "start": "3618793",
    "end": "3625660"
  },
  {
    "text": "you don't look at one\noperation at a time. And you're trying to see\nif I look at everything,",
    "start": "3625660",
    "end": "3631310"
  },
  {
    "text": "is it the case that I have\nsome really fast operations and the slow\noperations don't happen too much, because\nif that's the case,",
    "start": "3631310",
    "end": "3637580"
  },
  {
    "text": "then I can make an argument\nfor the average cost, which is better than the argument\nthat says this is the worst",
    "start": "3637580",
    "end": "3644780"
  },
  {
    "text": "case of an operation,\nI'm doing an operation, the total cost is n\ntimes the worst cost. ",
    "start": "3644780",
    "end": "3652740"
  },
  {
    "text": "Make some sense? OK. Cool. All right.",
    "start": "3652740",
    "end": "3658130"
  },
  {
    "text": "Have fun at the next p set.",
    "start": "3658130",
    "end": "3660579"
  }
]