[
  {
    "text": " Today's topic is one of\nthe most important concepts",
    "start": "0",
    "end": "6000"
  },
  {
    "text": "in this area, and it\nis called atomicity. And what we are going\nto do is spend time",
    "start": "6000",
    "end": "11019"
  },
  {
    "text": "understanding what\nthis is as a concept and then understanding how to\nachieve atomicity in systems.",
    "start": "11020",
    "end": "19240"
  },
  {
    "text": "And recall that the main\ngoal is to handle \"failures\", and that is what we talked\nabout the last time.",
    "start": "19240",
    "end": "27636"
  },
  {
    "text": "And we came up with a bunch\nof different ways of thinking about failures and\nhow to cope with it. And one idea that we saw the\nlast time was an idea involving",
    "start": "27636",
    "end": "40110"
  },
  {
    "text": "replicating a\ncomponent, let's say a disk or any component\nwhose failure you",
    "start": "40110",
    "end": "49070"
  },
  {
    "text": "wish to cope with and\nvote on the results. ",
    "start": "49070",
    "end": "55420"
  },
  {
    "text": "And so the idea is that if\nyou are not exactly sure what the right answer should be-- If you are not sure whether\nany given component is working",
    "start": "55420",
    "end": "62960"
  },
  {
    "text": "correctly or not,\nreplicate that component and then give them all the same\ninput, see what output appears",
    "start": "62960",
    "end": "70440"
  },
  {
    "text": "and then vote on the results. And we did see that these\nthings are pretty sophisticated, but the main problem\nwith replicate plus vote",
    "start": "70440",
    "end": "76840"
  },
  {
    "text": "is that often it is extremely\nexpensive to build and very, very hard to get right.",
    "start": "76840",
    "end": "82869"
  },
  {
    "text": "And, second, it often\ndoes not actually work. For example, if you just\ntake a software program,",
    "start": "82870",
    "end": "88790"
  },
  {
    "text": "a software module and you\nmake 100 copies or 95 copies of that software\nmodule and give them",
    "start": "88790",
    "end": "94890"
  },
  {
    "text": "all the same input and\nthen vote on the output, if you have a bug in\none of the modules and it is a bug that\nis actually replicated",
    "start": "94890",
    "end": "101290"
  },
  {
    "text": "in all of the modules\nthen all of the replicas are going to give you\nthe same wrong answer. So the key assumption behind\nreplicating and voting",
    "start": "101290",
    "end": "108930"
  },
  {
    "text": "is that the replicas are\nindependent of each other and have independent\nmodes of failure. And that may not be true\nin all of your modules.",
    "start": "108930",
    "end": "118340"
  },
  {
    "text": "And so the way we are going\nto deal with this problem, and even though it is possible\nto design software systems where the replicas are, in\nfact, independent of each other,",
    "start": "118340",
    "end": "126090"
  },
  {
    "text": "it will turn out that\nit is quite expensive to do in many cases. So what we are going to do, to\nrelax this assumption of having",
    "start": "126090",
    "end": "134470"
  },
  {
    "text": "a system which handles\nfailures by giving the same input to multiple\noutputs and then voting on it,",
    "start": "134470",
    "end": "141219"
  },
  {
    "text": "we are going to relax\nthat and instead look at a different concept\ncalled \"recoverability\".",
    "start": "141220",
    "end": "146595"
  },
  {
    "text": " And the idea here\nis rather is rather",
    "start": "146595",
    "end": "151880"
  },
  {
    "text": "than to try to replicate modules\nso that to the higher layers",
    "start": "151880",
    "end": "156980"
  },
  {
    "text": "it looks as if the underlying\nmodule has never failed because you have replicated\nit, the idea here is to allow",
    "start": "156980",
    "end": "163190"
  },
  {
    "text": "the underlying module to fail. But have it fail, typically\nin a fail fast manner",
    "start": "163190",
    "end": "168570"
  },
  {
    "text": "so that you can\ndetect the failure, and then arrange for that\nmodule to be restarted. And when it restarts\nthe idea is to make it",
    "start": "168570",
    "end": "175440"
  },
  {
    "text": "so that the module\ndoes something such that in the end\nthe state of the system,",
    "start": "175440",
    "end": "181250"
  },
  {
    "text": "after it does that\nthing, usually some kind of recovery procedure\nis that you can get back",
    "start": "181250",
    "end": "186900"
  },
  {
    "text": "to using that module. So it is a little bit\nlike rather than try to build, you know, the analogy\nmight be something like this.",
    "start": "186900",
    "end": "193907"
  },
  {
    "text": "You might imagine, let's say\nthere is a little child who is learning to walk. One approach for\nnature to have adopted",
    "start": "193907",
    "end": "199040"
  },
  {
    "text": "would have been to try to make\nit so the child never falls. And there is a lot of complexity\nassociated with always keeping that child walking.",
    "start": "199040",
    "end": "205385"
  },
  {
    "text": "Or, alternatively,\nyou could have a story or a method by\nwhich every once in a while the child falls but then has a\nplan to get up from that fall",
    "start": "205385",
    "end": "213380"
  },
  {
    "text": "and then restart. So that is the plan that\nwe are going to adopt. And this notion here is\ncalled recoverability.",
    "start": "213380",
    "end": "220522"
  },
  {
    "text": "And the general\nplan is going to be that if you have a module M1\nwhich invokes another module M2",
    "start": "220522",
    "end": "228730"
  },
  {
    "text": "and M2 were to fail then\nthe idea is that M2 fails",
    "start": "228730",
    "end": "236080"
  },
  {
    "text": "and then it recovers and\nyou restart the module. And you want to make sure that\nM2 is left in a situation,",
    "start": "236080",
    "end": "243800"
  },
  {
    "text": "once it recovers, where\nthere is no partial state. And I will define that more\nprecisely as we go along today.",
    "start": "243800",
    "end": "249982"
  },
  {
    "text": "But the main idea is going\nto be to insure that there is no vestige of\nprevious computations",
    "start": "249982",
    "end": "255010"
  },
  {
    "text": "that are in the\nmiddle of being run. So the state of the\nsystem, when it recovers, is at a well-understood\npoint so that M1",
    "start": "255010",
    "end": "261148"
  },
  {
    "text": "can continue to use that. So there is no\n\"partial\" state where partial is in quotes here.",
    "start": "261149",
    "end": "267159"
  },
  {
    "text": "And we will talk about\nwhat it means for something to be in a partial state. The idea is to prevent\nthat from happening.",
    "start": "267160",
    "end": "273759"
  },
  {
    "start": "273760",
    "end": "279040"
  },
  {
    "text": "So we are going to\ndo this by starting with an example,\nand the same example that I mentioned the last time\nwhich was a transfer of money",
    "start": "279040",
    "end": "289410"
  },
  {
    "text": "from one bank\naccount to another. There is a \"from\" account,\nthere is a \"to\" account",
    "start": "289410",
    "end": "294880"
  },
  {
    "text": "and some dollar \"amount\".",
    "start": "294880",
    "end": "300010"
  },
  {
    "text": "And you want to transfer\nmoney from \"from\" to \"to\" and it is whatever\nthe \"amount\" is.",
    "start": "300010",
    "end": "306292"
  },
  {
    "text": "And the problem\nhere is, of course, that in the middle of transfer\nthis procedure might fail,",
    "start": "306292",
    "end": "311770"
  },
  {
    "text": "the system might\ncrash and you might be left in a situation where\na part of this transfer",
    "start": "311770",
    "end": "318440"
  },
  {
    "text": "has already run. To take a specific\nexample, here is an example of what the transfer\nprocedure might look like.",
    "start": "318440",
    "end": "324750"
  },
  {
    "text": "It takes a \"from\" and\na \"to\" and an \"amount\". And the first thing\nit does is to read.",
    "start": "324750",
    "end": "330930"
  },
  {
    "text": "Assume that all of this\ndata is stored on disk. It reads from the \"from\"\naccount and then it reduces,",
    "start": "330930",
    "end": "337380"
  },
  {
    "text": "it debits the amount from the\n\"account\" and then writes back. And it does the same\nthing to the \"to\" account.",
    "start": "337380",
    "end": "345189"
  },
  {
    "text": "So in the end, if this\nprocedure completely ran, then \"from\" account would\nbe reduced by \"amount\" and \"to\"",
    "start": "345189",
    "end": "352010"
  },
  {
    "text": "account would be\nenhanced by \"amount\". Of course, the problem is\nyou might have a failure",
    "start": "352010",
    "end": "357070"
  },
  {
    "text": "anywhere in the middle. And, as a concrete\nexample, if a crash were to happen after the\nfirst three lines shown above,",
    "start": "357070",
    "end": "364680"
  },
  {
    "text": "if you owned this account\nyou would not be very happy because you just lost\nsome money from an account and nothing happened.",
    "start": "364680",
    "end": "372000"
  },
  {
    "text": "No other account got\nmoney added to it, and this is the problem\nthat we want to avoid.",
    "start": "372000",
    "end": "378490"
  },
  {
    "text": "If you think about this for\na moment, what you would like intuitively is that if a\ncrash like this were to happen",
    "start": "378490",
    "end": "385910"
  },
  {
    "text": "and the system were to\nrecover and come back up, there are really only two\nstates that the system should",
    "start": "385910",
    "end": "390990"
  },
  {
    "text": "be in for the system\nto really be correct and to meet what your\nintuition might expect. Either this procedure must\ncompletely be finished, that is",
    "start": "390990",
    "end": "398060"
  },
  {
    "text": "the state of the system must be\nthe same as if this procedure completely ran and finished,\nor the state of the system",
    "start": "398060",
    "end": "405200"
  },
  {
    "text": "must be such that the\nprocedure never ran at all. It is not at all OK to let\nthe state of the system",
    "start": "405200",
    "end": "412069"
  },
  {
    "text": "be equal to whatever the\nstate was, in this example, at the time the crash happened.",
    "start": "412070",
    "end": "420050"
  },
  {
    "text": "What you want is a kind of\nall or nothing behavior. And, of course, if the crash\nhappened as I have shown here,",
    "start": "420050",
    "end": "429619"
  },
  {
    "text": "there is no way for you to have\nprevented those lines of code from being wrong. Those lines of code ran and\nthen the crash happened.",
    "start": "429619",
    "end": "435820"
  },
  {
    "text": "So what you really need\nis a way by which you can back out of these changes. What the system needs\nis a way by which",
    "start": "435820",
    "end": "441425"
  },
  {
    "text": "when the system crashes and\nthen recovers from the crash, during failure\nrecovery the system",
    "start": "441425",
    "end": "447650"
  },
  {
    "text": "has to have a way to back out\nof whatever changes it has made.",
    "start": "447650",
    "end": "452860"
  },
  {
    "text": "In other words, what\nwe want is a concept called recoverability. ",
    "start": "452860",
    "end": "467640"
  },
  {
    "text": "So a more precise\ndefinition of recoverability is shown on this slide, and\nlet me just read it out.",
    "start": "467640",
    "end": "473760"
  },
  {
    "text": "A composite sequence of\nsteps, which we are also going to use the word\n\"action\" for, an action is recoverable if, from the point\nof view of the module that",
    "start": "473760",
    "end": "481040"
  },
  {
    "text": "invokes this action,\nthis sequence either always completes or aborts.",
    "start": "481040",
    "end": "489250"
  },
  {
    "text": "That is if it fails and then\nbacks out, aborts in a way such that it appears that\nthe sequence had never",
    "start": "489250",
    "end": "495040"
  },
  {
    "text": "started to begin with. And, in particular,\nwhat this means is that if a failure were\nto happen in the middle",
    "start": "495040",
    "end": "501180"
  },
  {
    "text": "when the system\nrecovers, it better have a plan of backing\nout the changes. In other words, of\naborting this action.",
    "start": "501180",
    "end": "509975"
  },
  {
    "text": "The way you think\nabout recoverability, the simple way to think about\nit is do it all or not at all.",
    "start": "509975",
    "end": "515909"
  },
  {
    "text": " And our goal is to try to\nsomehow come up with a way",
    "start": "515909",
    "end": "522200"
  },
  {
    "text": "to achieve this goal. ",
    "start": "522200",
    "end": "527739"
  },
  {
    "text": "And before we get into a\nsolution to this problem there are a few other\nconcepts to discuss, and they will turn out to be\nvery related to each other.",
    "start": "527739",
    "end": "535560"
  },
  {
    "text": "And the second concept\nafter recoverability that is very closely\nrelated to this idea has to do with\nconcurrent actions.",
    "start": "535560",
    "end": "542279"
  },
  {
    "start": "542280",
    "end": "547650"
  },
  {
    "text": "Imagine for a moment that\nyou had the same transfer procedure as in this example but\nyou had two transfers running",
    "start": "547650",
    "end": "555220"
  },
  {
    "text": "at the same time\nand they happened to act on the same\ndata items like that.",
    "start": "555220",
    "end": "565440"
  },
  {
    "text": "Let's say that the first\ntransfer moved from a savings account to a checking\naccount, it moved $100.",
    "start": "565440",
    "end": "572139"
  },
  {
    "text": "And the second one moved\nfrom savings to checking, it moved $200. And let's say at the\nbeginning S was $1,000.",
    "start": "572140",
    "end": "580870"
  },
  {
    "text": "And, of course as you\nrecall from several lectures ago, when you have these\ninterleave sequences,",
    "start": "580870",
    "end": "587340"
  },
  {
    "text": "these two threads\nrunning the steps that these threads\nare made of might",
    "start": "587340",
    "end": "593355"
  },
  {
    "text": "be interleave in arbitrary\norder if you don't have a plan to isolate them. And, in particular, you might\nhave many results that show up.",
    "start": "593356",
    "end": "600950"
  },
  {
    "text": "And one result\nthat might show up is both of these transfers\nrunning concurrently read $1,000 from \"from\"\naccount and then both of them",
    "start": "600950",
    "end": "609680"
  },
  {
    "text": "debit by $100 and\n$200 respectively. So at the end of it you might\nbe left with either $800 or $900",
    "start": "609680",
    "end": "616837"
  },
  {
    "text": "left in the account\nwhen the right answer is to have been left\nintuitively, if you ran both these transfers\nyou would like to see",
    "start": "616837",
    "end": "622590"
  },
  {
    "text": "$700 left in that account. So what you\nintuitively want here",
    "start": "622590",
    "end": "628320"
  },
  {
    "text": "is if this is the\nfirst action, A1, and this is the second action,\nA2, what you would like to see",
    "start": "628320",
    "end": "634860"
  },
  {
    "text": "is a sequence-- You don't actually\ncare what the order is between these two transfers. I mean you are\ntransferring money",
    "start": "634860",
    "end": "640840"
  },
  {
    "text": "from one account to another\nand you are doing two of these. You do not actually\ncare in this example, and it will turn\nout all the examples",
    "start": "640840",
    "end": "647690"
  },
  {
    "text": "that we are going to be\ntalking about with this notion that you are not really going\nto care what the order is.",
    "start": "647690",
    "end": "654060"
  },
  {
    "text": "Either order is perfectly\nfine, but the order should be as if it is equivalent\nto either A1 before A2 or A2",
    "start": "654060",
    "end": "665209"
  },
  {
    "text": "before A1. ",
    "start": "665210",
    "end": "672360"
  },
  {
    "text": "And that is what we would like. And, of course, some naīve way\nto achieve this is to insure",
    "start": "672360",
    "end": "679230"
  },
  {
    "text": "that exactly one\naction runs at a time, it finishes and then\nthe second one runs, but that is kind of going\nto be no fun for us to do.",
    "start": "679230",
    "end": "685200"
  },
  {
    "text": "It is the right\nsimplest solution, but we are going to want to\nimprove concurrency as we had wanted to several lectures ago.",
    "start": "685200",
    "end": "691310"
  },
  {
    "text": "So we are going to\ncome up with ways of getting higher\nperformance than running one after the other. But the net effect is if you\nrun it in some serial order,",
    "start": "691310",
    "end": "699350"
  },
  {
    "text": "in some sequential\norder of the actions. That is the result of\nrunning concurrent action has",
    "start": "699350",
    "end": "704470"
  },
  {
    "text": "to be the same as\nsome serial ordering of the individual actions. ",
    "start": "704470",
    "end": "711339"
  },
  {
    "text": "And this idea of A1 before A2\nor A2 before A1 has a name. It is called \"isolation\".",
    "start": "711340",
    "end": "717085"
  },
  {
    "start": "717085",
    "end": "724670"
  },
  {
    "text": "And you should distinguish\nthat in your mind clearly from recoverability. ",
    "start": "724670",
    "end": "732070"
  },
  {
    "text": "So a more precise\ndefinition of isolation is essentially\nwhat I said before. The composite sequence\nof steps is isolated",
    "start": "732070",
    "end": "741930"
  },
  {
    "text": "if its effect from the\npoint of view of its invoker is the same as if the\naction occurred either completely before or completely\nafter every other isolated",
    "start": "741930",
    "end": "750140"
  },
  {
    "text": "action.  And the simple way\nto understand this is you either do it all\nbefore or do it all after.",
    "start": "750140",
    "end": "756924"
  },
  {
    "text": "That is the net effect has to be\nthe same as doing it all before or doing it all after. And it is different from\nrecoverability which is",
    "start": "756924",
    "end": "762640"
  },
  {
    "text": "really do it all or not at all. ",
    "start": "762640",
    "end": "770649"
  },
  {
    "text": "Now, when you have a\nsystem that satisfies both recoverability\nand isolations--",
    "start": "770650",
    "end": "777190"
  },
  {
    "text": "The way to understand\nthis is both of these really, although\nthey are talking about different concepts,\nthis is saying all or nothing",
    "start": "777190",
    "end": "782561"
  },
  {
    "text": "and this is saying all before\nor all after, both of these are getting at the same\nintuitive idea which",
    "start": "782561",
    "end": "788009"
  },
  {
    "text": "is that somehow there is a\nsequence of steps, for example, in this transfer procedure there\nwill be sequences of steps.",
    "start": "788010",
    "end": "794620"
  },
  {
    "text": "And somehow you want to make\nit look as if, for each action, the sequence of steps is not\nvisible to somebody invoking",
    "start": "794620",
    "end": "801880"
  },
  {
    "text": "the action because you do\nnot want the person invoking this action for recoverability. You do not want him to\nknow that it is build out",
    "start": "801880",
    "end": "808120"
  },
  {
    "text": "of a sequence of steps. And if a failure\nhappens in the middle, you do not want the\ninvoker of that action to see some partial state.",
    "start": "808120",
    "end": "813897"
  },
  {
    "text": "Likewise, when you have\nconcurrent actions running together, you do not want\nthe different invokers of that action to somehow\nsee this muddled result",
    "start": "813897",
    "end": "821560"
  },
  {
    "text": "of the interleaving. You want them to\nonly see the results of running these actions\none after the other.",
    "start": "821560",
    "end": "827766"
  },
  {
    "text": "What you really\ntrying to achieve for both of these\nconcepts, although they are distinct concepts,\nis to hide the fact",
    "start": "827766",
    "end": "833600"
  },
  {
    "text": "that this action is a\ncomposite sequence of steps. You want to make it look as if\nit is quite [UNINTELLIGIBLE].",
    "start": "833600",
    "end": "839210"
  },
  {
    "text": "And this idea of wanting\nsomething to look [UNINTELLIGIBLE] is\ncalled \"atomicity\". ",
    "start": "839210",
    "end": "848340"
  },
  {
    "text": "And we are going to be\nbasically hiding the fact that it is composite.",
    "start": "848340",
    "end": "854000"
  },
  {
    "start": "854000",
    "end": "863370"
  },
  {
    "text": "So more precisely\nfor this course, we are going to use the\nword \"atomic\" to mean",
    "start": "863370",
    "end": "869250"
  },
  {
    "text": "recoverable and isolated. And I am going to\nsay for this course because these terms have been\nused in various different ways",
    "start": "869250",
    "end": "878170"
  },
  {
    "text": "for at least probably\nmore than 30 years and I think it is about\ntime we made these precise.",
    "start": "878170",
    "end": "885472"
  },
  {
    "text": "In the literature, you\nwill see the word atomic to often mean recoverable. And sometimes, and\nthis is unfortunate,",
    "start": "885472",
    "end": "892230"
  },
  {
    "text": "you will see the word\nconsistent to mean isolated. And, in particular, you\nwill run into this confusion",
    "start": "892230",
    "end": "898540"
  },
  {
    "text": "when you read the paper\nfor recitation on Thursday,",
    "start": "898540",
    "end": "904380"
  },
  {
    "text": "the System R paper. The problem is those\nterms used historically have not been used\nin a very precise way",
    "start": "904380",
    "end": "910550"
  },
  {
    "text": "so we will define it precisely. When we say something\nis atomic, in general we mean both recoverable\nand isolated.",
    "start": "910550",
    "end": "917274"
  },
  {
    "text": "When we mean only\none of them, we will say atomic with\nrespect to recoverability or recoverable, atomic\nwith respect to isolation",
    "start": "917275",
    "end": "924180"
  },
  {
    "text": "or isolated. And, like I said, atomic means\nrecoverable and isolated.",
    "start": "924180",
    "end": "930220"
  },
  {
    "text": "The general plan\nis to hide the fact that an action is built out of\ncomposite sequence of steps. ",
    "start": "930220",
    "end": "943026"
  },
  {
    "text": "Now, to add to this\nconfusion of terminology, there are actually two other\nterms or two other properties",
    "start": "943026",
    "end": "948390"
  },
  {
    "text": "that you often want\nfrom actions in addition to recoverability and isolation.",
    "start": "948390",
    "end": "954040"
  },
  {
    "text": " And these two other\nproperties are",
    "start": "954040",
    "end": "959140"
  },
  {
    "text": "provided by many\ndatabase systems which are one of the most\ncommon users of these concepts.",
    "start": "959140",
    "end": "965740"
  },
  {
    "text": "The most common system that\nprovides atomicity, one example is a database system. Now, many, many systems\nprovide atomicity.",
    "start": "965740",
    "end": "972650"
  },
  {
    "text": "For example, every computer\ndoes it in its instruction set. You often want\nyour instructions, from the point of view of the\ninvoker of the instruction,",
    "start": "972650",
    "end": "979574"
  },
  {
    "text": "to be atomic. So we are going to be\ndesigning techniques that, in general, operate across\nthe whole range of systems.",
    "start": "979574",
    "end": "985282"
  },
  {
    "text": "But database systems are\nof particular interest because they are very common\nand they exercise these concepts",
    "start": "985282",
    "end": "990680"
  },
  {
    "text": "to a high degree. And two other concepts\nthat many systems provide,",
    "start": "990680",
    "end": "995688"
  },
  {
    "text": "the first one is \"consistency\".  And it is unfortunate that the\nword consistency was previously",
    "start": "995689",
    "end": "1002890"
  },
  {
    "text": "used, to some extent,\nto mean isolated. So it is important not to\nget into that confusion. In some old papers when\nyou see consistency,",
    "start": "1002890",
    "end": "1012484"
  },
  {
    "text": "you should realize\nthat what they really are talking about isolated,\nA1 before A2 or A2 before A1.",
    "start": "1012484",
    "end": "1018640"
  },
  {
    "text": "But we will mean by\nconsistency, and we will get into this next\nweek, is that there is some invariant for the\napplication that is often using",
    "start": "1018640",
    "end": "1027449"
  },
  {
    "text": "atomicity that is maintained. For example, in a\nbanking application,",
    "start": "1027450",
    "end": "1032880"
  },
  {
    "text": "if you take the\ntransfer examples, isolated means that\nyou want the result to be as if the transfers\nran in some serial order.",
    "start": "1032880",
    "end": "1040010"
  },
  {
    "text": "Consistent means that\nthere might be a high level notion that the designer\nof this banking application",
    "start": "1040010",
    "end": "1046359"
  },
  {
    "text": "might have wanted, such as a\nbank might have a rule that says that at the end of each day\nevery checking account should",
    "start": "1046359",
    "end": "1054049"
  },
  {
    "text": "have an amount that\nis at least 10% of the corresponding\nsavings account.",
    "start": "1054050",
    "end": "1060060"
  },
  {
    "text": "Now, during the\nmiddle of the day there might be\nindividual actions that",
    "start": "1060060",
    "end": "1066100"
  },
  {
    "text": "transiently violate that rule. But, at various\npoints, the designer",
    "start": "1066100",
    "end": "1071789"
  },
  {
    "text": "might wish to insure that\na rule is the checking account must have at least\na certain amount of money,",
    "start": "1071790",
    "end": "1078320"
  },
  {
    "text": "some fraction of\nthe savings account. Or in some payroll\napplication for a company,",
    "start": "1078320",
    "end": "1084280"
  },
  {
    "text": "they are modifying the\npayroll and giving raises to various people,\nbut they might have a rule that says\nyou could give whatever",
    "start": "1084280",
    "end": "1090990"
  },
  {
    "text": "raise you want but every manager\nmust make at least 5% more than all of his or\nher direct reports.",
    "start": "1090990",
    "end": "1097217"
  },
  {
    "text": "You might have a rule like that. All of these are applications\nof an invariant that correspond to the\nconsistency of the data that",
    "start": "1097217",
    "end": "1102570"
  },
  {
    "text": "is being maintained in\nthis example in a database. And you can use database systems\nto provide these consistency",
    "start": "1102570",
    "end": "1110160"
  },
  {
    "text": "rules. But that is different\nfrom isolation. Isolation just\nsays that there has",
    "start": "1110160",
    "end": "1116350"
  },
  {
    "text": "to be some equivalent serial\nordering in which things run.",
    "start": "1116350",
    "end": "1121510"
  },
  {
    "text": "And the fourth property after\nrecoverability, isolation and consistency is \"durability\".",
    "start": "1121510",
    "end": "1127415"
  },
  {
    "text": " Durability basically\nsays that the data",
    "start": "1127415",
    "end": "1134110"
  },
  {
    "text": "should last for as long as-- It's an application-specific\nconcept, but what it says",
    "start": "1134110",
    "end": "1139950"
  },
  {
    "text": "is the data must\nlast for as long as some pre-defined duration.",
    "start": "1139950",
    "end": "1145460"
  },
  {
    "text": "For example, you might\nstore data in a database. And, in many\ndatabases, you really want it to last \"forever\".",
    "start": "1145460",
    "end": "1151170"
  },
  {
    "text": "But in reality it is very hard\nto make things last forever so you might define that\nthe data in this database",
    "start": "1151170",
    "end": "1157800"
  },
  {
    "text": "must last for three years, and\nyou work hard to preserve that. Or you might have an\napplication that as long",
    "start": "1157800",
    "end": "1162930"
  },
  {
    "text": "as the thread is running\nyou want the data to last, but after the\nthread is terminated you do not actually\ncare about the data.",
    "start": "1162930",
    "end": "1168960"
  },
  {
    "text": "And that is a different\nnotion of durability. But both of these have talked\nabout the lifetime with which you want to preserve data.",
    "start": "1168960",
    "end": "1177450"
  },
  {
    "text": "Now, when you have a system\nthat provides recoverability and isolation, that is\natomicity, consistency",
    "start": "1177450",
    "end": "1183880"
  },
  {
    "text": "and durability,\nthen we are going to call that a transaction.",
    "start": "1183880",
    "end": "1192150"
  },
  {
    "text": "A set of actions, each\nof which is recoverable, that are isolated\nfrom each other, that",
    "start": "1192150",
    "end": "1198090"
  },
  {
    "text": "has a notion of consistency\nand can achieve it and where the data has\ndurability, those actions",
    "start": "1198090",
    "end": "1204620"
  },
  {
    "text": "are called transactions. And many database systems work\nhard to provide transactions,",
    "start": "1204620",
    "end": "1209957"
  },
  {
    "text": "which means they provide\nall of these features.  But it is certainly\npossible, and we",
    "start": "1209957",
    "end": "1216259"
  },
  {
    "text": "will look at many examples\nwhere you can just design systems that have just\nrecoverability and isolation.",
    "start": "1216260",
    "end": "1222920"
  },
  {
    "text": "And we will not even worry\nabout these other notions. That is what we will start with. We do not want to solve all\nof the problems at once.",
    "start": "1222920",
    "end": "1228510"
  },
  {
    "text": "We will start with the\neasier set of problems and then build from there. ",
    "start": "1228510",
    "end": "1244169"
  },
  {
    "text": "Today, and on\nWednesday, our plan is to come up with ways of\nachieving recoverability. So that is what we are\ngoing to start doing.",
    "start": "1244170",
    "end": "1250833"
  },
  {
    "start": "1250833",
    "end": "1259392"
  },
  {
    "text": "The general approach\nfor how we are going to achieve\nrecoverability of modules is, and recall that\nthe problem here",
    "start": "1259392",
    "end": "1264570"
  },
  {
    "text": "is M2 fails and then M1\nsomehow discovers its failure and then when it\nrestarts you do not want",
    "start": "1264570",
    "end": "1270030"
  },
  {
    "text": "any partial state to be kept. The general plan is to design\nmodules to be failed fast.",
    "start": "1270030",
    "end": "1277449"
  },
  {
    "text": "You need a way to discover\nthat things are not working, and that is the scope of\nthe kinds of systems we are going to be dealing with.",
    "start": "1277449",
    "end": "1284870"
  },
  {
    "text": "And then once the system's\nfailure is detected and then you restart the\nsystem or it recovers,",
    "start": "1284870",
    "end": "1290280"
  },
  {
    "text": "you run some kind of\na repair procedure. This is in general you run\nsome kind of repair procedure",
    "start": "1290280",
    "end": "1296550"
  },
  {
    "text": "that allows that failed\nmodule to recover and then it restarts\nwhere restarts",
    "start": "1296550",
    "end": "1305510"
  },
  {
    "text": "means it allows,\nM1 in this case, allows invokers to start running\non that system, on that module.",
    "start": "1305510",
    "end": "1312139"
  },
  {
    "start": "1312140",
    "end": "1320250"
  },
  {
    "text": "We are going to do\nthis in three steps. The first thing\nwe are going to do is to look at a very specific\nspecial case of this problem",
    "start": "1320250",
    "end": "1327590"
  },
  {
    "text": "which is realize that\nall of these having to do with partial state\noccur because there",
    "start": "1327590",
    "end": "1333880"
  },
  {
    "text": "is some state, once\na module has crashed there is some state\nthat it has remaining. So if it just recovered\nand started running again",
    "start": "1333880",
    "end": "1340860"
  },
  {
    "text": "without doing something\nthen that partial state is visible to the\ninvoker of that module.",
    "start": "1340860",
    "end": "1348090"
  },
  {
    "text": "Now, if the state were all a\nvolatile state like in just RAM, for example,\nand a thread crashed, if it was in its virtual\nmemory and the thread crashed",
    "start": "1348090",
    "end": "1355330"
  },
  {
    "text": "and it recovered then\nyou do not really have to worry about this\nbecause all of the state anywhere has gone away.",
    "start": "1355330",
    "end": "1361507"
  },
  {
    "text": "Primarily, we were\nworried about state that lasts across failures.",
    "start": "1361507",
    "end": "1367130"
  },
  {
    "text": "And an example of\nthat is the state that is maintained on this,\njust as a concrete example.",
    "start": "1367130",
    "end": "1373710"
  },
  {
    "text": "We are going to start first by\nobtaining a recoverable sector.",
    "start": "1373710",
    "end": "1379169"
  },
  {
    "text": " Basically coming up with the\nscheme that allows us to do",
    "start": "1379170",
    "end": "1386700"
  },
  {
    "text": "reads and writes\nof a single sector of a disk in a recoverable way. So we are going to define two\nprocedures, a recoverable \"put\"",
    "start": "1386700",
    "end": "1393090"
  },
  {
    "text": "that allows you to\nput stuff, write stuff onto a single sector of a\ndisk and the recoverable \"get\" that allows\nyou to read stuff",
    "start": "1393090",
    "end": "1398760"
  },
  {
    "text": "of a single sector of a disk\nin a way that is recoverable.",
    "start": "1398760",
    "end": "1404980"
  },
  {
    "text": "And the hard problem\nhere is going to be that as the\nsystem is crashing,",
    "start": "1404980",
    "end": "1410150"
  },
  {
    "text": "for a variety of\nreasons, bad data might get written to a sector. If you just took a regular\nsector of your disk,",
    "start": "1410150",
    "end": "1418840"
  },
  {
    "text": "let's say that the\noperating system is trying to write something\ninto a disk sector, somebody turns off the\npower and random stuff",
    "start": "1418840",
    "end": "1425909"
  },
  {
    "text": "might get written\nout onto the disk. And so when the\nsystem comes back up, the reader of that sector\nmight get some garbage value,",
    "start": "1425910",
    "end": "1433269"
  },
  {
    "text": "a result of some partial write. So that is what we are\ngoing to try to avoid. So we will do that first.",
    "start": "1433270",
    "end": "1440990"
  },
  {
    "text": "And that is for next\ntime, to complete the recoverability story. We are going to use this\nsolution as a building-block",
    "start": "1440990",
    "end": "1450550"
  },
  {
    "text": "for a more general\nsolution because it is not going to be enough for us to\njust be able to read and write single sectors in\na recoverable way",
    "start": "1450550",
    "end": "1456620"
  },
  {
    "text": "because how many applications\nuse only one sector of a disk? What you would like\nto do is to make sure that you have a\ngeneral solution that",
    "start": "1456620",
    "end": "1462630"
  },
  {
    "text": "works across all of the data\nthat is being written and read. We are going to use that to\ncome up with two schemes.",
    "start": "1462630",
    "end": "1467780"
  },
  {
    "text": "The first scheme uses an idea\ncalled a \"version history\". And a second scheme uses an idea\ncalled \"logging\" using logs.",
    "start": "1467780",
    "end": "1480470"
  },
  {
    "text": "And both of these\nschemes will turn out to be very general\nand useful and work, but both of these\nschemes basically",
    "start": "1480470",
    "end": "1486289"
  },
  {
    "text": "will use this technique as\na bootstrapping technique. And so we need a solution\nhere anyway because we",
    "start": "1486290",
    "end": "1493149"
  },
  {
    "text": "are going to build on that to\ndevelop a more sophisticated solution for the general case.",
    "start": "1493150",
    "end": "1498570"
  },
  {
    "text": "And so today we are going to\nstart with a special case. A, because it is\na building block,",
    "start": "1498570",
    "end": "1503730"
  },
  {
    "text": "and, B, because it will\nturn out to show us a rule that we are going to\nreligiously following in coming",
    "start": "1503730",
    "end": "1509000"
  },
  {
    "text": "up with systematic solutions\nto work in a more general case",
    "start": "1509000",
    "end": "1514734"
  },
  {
    "text": "when you have more than\none sector being read. ",
    "start": "1514734",
    "end": "1524710"
  },
  {
    "text": "So let's write out the\nassumptions in the model here for this solution.",
    "start": "1524710",
    "end": "1529711"
  },
  {
    "text": "The first assumption\nwe are going to make, since we are dealing with\nrecoverability and not with isolation. We are going to deal\nwith isolation next week.",
    "start": "1529711",
    "end": "1536425"
  },
  {
    "text": "The first assumption\nwe will make is that there is no\nconcurrency, and we will come up",
    "start": "1536426",
    "end": "1544161"
  },
  {
    "text": "with different\nsolutions for dealing with people concurrently trying\nto write the same sector.",
    "start": "1544161",
    "end": "1549210"
  },
  {
    "start": "1549210",
    "end": "1554922"
  },
  {
    "text": "And this is an assumption\nwe will revisit in a couple of weeks\nto show you how to actually achieve this goal.",
    "start": "1554922",
    "end": "1560470"
  },
  {
    "text": "But we will assume that there\nare no hardware failures, no hardware errors.",
    "start": "1560470",
    "end": "1566330"
  },
  {
    "start": "1566330",
    "end": "1571899"
  },
  {
    "text": "For example, the\nappendix to Chapter 8, which we have assigned\nfor reading later",
    "start": "1571900",
    "end": "1577279"
  },
  {
    "text": "on in the semester,\nactually shows two methods, \"careful put\" and \"careful\nget\" that actually",
    "start": "1577280",
    "end": "1584300"
  },
  {
    "text": "deal with a variety\nof hardware problems. For example, every sector has\na disk \"checks-them\" on it.",
    "start": "1584300",
    "end": "1590820"
  },
  {
    "text": "If you wrote bad data\nand something happened in the middle of that write and\nthen someone went back and read",
    "start": "1590820",
    "end": "1596940"
  },
  {
    "text": "that sector, they would\ndiscover that it is bad because the checks-them\nwould not match. Now, the appendix\nto this chapter, 9B,",
    "start": "1596940",
    "end": "1604030"
  },
  {
    "text": "has a more careful\ndescription of how you deal with a\nvariety of errors so that you can achieve this\ncareful put and careful get",
    "start": "1604030",
    "end": "1610500"
  },
  {
    "text": "of a disk sector. Assume for now that there\nare no hardware errors,",
    "start": "1610500",
    "end": "1615790"
  },
  {
    "text": "there is no decay of data\non the disk and so on. It will turn out the problem\nis still interesting, that it is not easy to\nachieve a recoverable put",
    "start": "1615790",
    "end": "1623740"
  },
  {
    "text": "and get even though\nthe hardware is fine. And that is because there\nare software errors. ",
    "start": "1623740",
    "end": "1633590"
  },
  {
    "text": "And, in particular,\nthe model here is that you have\nsome application and then you have\nthe operating system.",
    "start": "1633590",
    "end": "1640930"
  },
  {
    "text": "And the operating\nsystem has a buffer here of data that it is\nwaiting to write onto disk.",
    "start": "1640930",
    "end": "1648730"
  },
  {
    "text": "Then you have a disk and\nthat is a disk sector.",
    "start": "1648730",
    "end": "1655210"
  },
  {
    "text": "The problem might be\nthat as a failure occurs there is something that happens,\nan error or something that gets",
    "start": "1655210",
    "end": "1660355"
  },
  {
    "text": "triggered in the\noperating system so the buffer gets\ncorrupted and then there is some bad data that gets\nwritten out onto the sector.",
    "start": "1660355",
    "end": "1666950"
  },
  {
    "text": "That is the kind of problem\nthat we want to protect against. The fact that your\nhardware is perfect",
    "start": "1666950",
    "end": "1672560"
  },
  {
    "text": "does not actually\nsolve this problem because this buffer itself has\nbeen corrupted or something happens during the\nprocess of writing",
    "start": "1672560",
    "end": "1678310"
  },
  {
    "text": "this buffer to the sector\nso the data itself is bad, and that is what we\nwant to protect against.",
    "start": "1678310",
    "end": "1683710"
  },
  {
    "start": "1683710",
    "end": "1689179"
  },
  {
    "text": "We are going to build on\nsomething that I have already",
    "start": "1689180",
    "end": "1704559"
  },
  {
    "text": "talked about. We are going to build on two\nprocedures, careful put that",
    "start": "1704559",
    "end": "1711350"
  },
  {
    "text": "puts to a sector,\nit puts some data, and the corresponding careful\nget which reads from a sector",
    "start": "1711350",
    "end": "1720760"
  },
  {
    "text": "and returns the data\nthat is on that sector. And the assumption\nis that careful put and get, once you\ngive it some data there",
    "start": "1720760",
    "end": "1726377"
  },
  {
    "text": "are no hardware failures for\nyou to worry about anymore. ",
    "start": "1726377",
    "end": "1734489"
  },
  {
    "text": "The solution we are going\nto take to this problem is to realize that\nwhen a failure happens,",
    "start": "1734489",
    "end": "1739570"
  },
  {
    "text": "for example, somebody\nturns off the power switch and this buffer gets corrupted,\nwhen the operating systems does",
    "start": "1739570",
    "end": "1746250"
  },
  {
    "text": "a write to that\nsector, the sector might be left in a state\nthat does not actually correspond to the\ndata that was intended",
    "start": "1746250",
    "end": "1751456"
  },
  {
    "text": "to put onto that sector. And so when the system\nrecovers you are sort of stuck because this data in the sector\ncontains some values in it that",
    "start": "1751456",
    "end": "1761210"
  },
  {
    "text": "do not actually correspond\nto any actual intended put of the data, any intended\nwrite of the data.",
    "start": "1761210",
    "end": "1769320"
  },
  {
    "text": "What this suggests is that\na solution to this problem",
    "start": "1769320",
    "end": "1774360"
  },
  {
    "text": "must involve a\ncopy of some kind. You must make sure that if you\nhave just one copy of the data",
    "start": "1774360",
    "end": "1780340"
  },
  {
    "text": "and you write to it and\nsomething fails in the middle and you do not have\na plan to back out to an earlier working version\nthat was correct you are stuck.",
    "start": "1780340",
    "end": "1789278"
  },
  {
    "text": "That suggests that we\nbetter have a solution that involves a copy of data.",
    "start": "1789279",
    "end": "1794769"
  },
  {
    "text": "Later on we will see how\nto systematically [develop a rule?] based on this. ",
    "start": "1794770",
    "end": "1802390"
  },
  {
    "text": "The idea here is very simple. The way we are going to achieve\na \"recoverable get of a sector\"",
    "start": "1802390",
    "end": "1808380"
  },
  {
    "text": "is actually to build a single\nsector, a recoverable sector",
    "start": "1808380",
    "end": "1813480"
  },
  {
    "text": "out of three sectors. The first sector here is going\nto have one copy of the data,",
    "start": "1813480",
    "end": "1819410"
  },
  {
    "text": "the second sector is going to\nhave another copy of the data and we are going to have\na third sector which is going to act as a flag\nthat allows us to choose one",
    "start": "1819410",
    "end": "1828090"
  },
  {
    "text": "version or the other version. Let me call this D0,\nlet me call this D1",
    "start": "1828090",
    "end": "1834429"
  },
  {
    "text": "and let me call\nthis the \"chooser\". ",
    "start": "1834430",
    "end": "1842900"
  },
  {
    "text": "Assume that at some point in\ntime D0 has proper data on it.",
    "start": "1842900",
    "end": "1849460"
  },
  {
    "text": "The idea now is going to\nbe that anybody reading it, the chooser is going to\ncontain the value zero in it.",
    "start": "1849460",
    "end": "1855180"
  },
  {
    "text": "Now, anybody reading is\ngoing to read from D0. Anybody writing\nin recoverable put",
    "start": "1855180",
    "end": "1863150"
  },
  {
    "text": "is not allowed to write\nto D0 because that is what people are reading from. Instead, they will write to D1.",
    "start": "1863150",
    "end": "1868300"
  },
  {
    "text": "When the chooser\nvalue is zero, they will start writing into D1. The plan is going to be that\nif that write succeeds properly",
    "start": "1868300",
    "end": "1876170"
  },
  {
    "text": "then what we will do\nis go ahead and change the chooser from zero to\na one, and then people",
    "start": "1876170",
    "end": "1882390"
  },
  {
    "text": "will start reading from one. But if that write were\nto fail in the middle, if the power fails or\nsomething like that,",
    "start": "1882390",
    "end": "1888370"
  },
  {
    "text": "D1 will be left in sort of\na weird intermediate state. But that is OK because\nnobody is really",
    "start": "1888370",
    "end": "1895010"
  },
  {
    "text": "going to be reading from D1. They are all going to be reading\nfrom D0 because the chooser has",
    "start": "1895010",
    "end": "1900030"
  },
  {
    "text": "not yet been changed. The only other thing\nwe have to worry about is now we are OK, as long\nas the failure happens,",
    "start": "1900030",
    "end": "1907690"
  },
  {
    "text": "if the failure\nhappens in the middle here somewhere where we are\nwriting D1 we are OK because we have not touched the chooser.",
    "start": "1907690",
    "end": "1914900"
  },
  {
    "text": "If the failure happens at\nthe end of writing D1-- So we have written D1\nand then we have not yet",
    "start": "1914900",
    "end": "1920590"
  },
  {
    "text": "started writing the chooser\nand a failure happens here, we are still OK\nbecause everybody",
    "start": "1920590",
    "end": "1926407"
  },
  {
    "text": "will be reading from zero. And that is not going\nto have garbage in it. It is not going to have\nthe latest value in it.",
    "start": "1926407",
    "end": "1931650"
  },
  {
    "text": "But that is OK. We never said that we\nshould see the latest value for recoverability to hold. It is going to be OK for\nus to be reading from D0",
    "start": "1931650",
    "end": "1939960"
  },
  {
    "text": "and continue to read from D0. And really the\ncorrectness of this boils down to understanding\nwhat will happen",
    "start": "1939960",
    "end": "1946340"
  },
  {
    "text": "when a failure happens\nduring the middle of writing this sector. You are starting to\nwrite the chooser sector",
    "start": "1946340",
    "end": "1952190"
  },
  {
    "text": "and the system fails. And we do not have to worry\nabout that because now we have written D1 completely\nand a failure happened",
    "start": "1952190",
    "end": "1958831"
  },
  {
    "text": "in the middle of that. To understand that,\nwe will get back to understanding the\ncorrectness of it,",
    "start": "1958831",
    "end": "1963910"
  },
  {
    "text": "but it helps to see what\npseudo code looks like. ",
    "start": "1963910",
    "end": "1969710"
  },
  {
    "text": "So that is what put looks like. To do a put, you first\nread the chooser sector",
    "start": "1969710",
    "end": "1976137"
  },
  {
    "text": "and then you put\ninto the other place. ",
    "start": "1976137",
    "end": "1981556"
  },
  {
    "text": "This which here\nis the thing that tells you what the value\nof the chooser sector is. It tells you which of the\ntwo copies to write into.",
    "start": "1981556",
    "end": "1989620"
  },
  {
    "text": "And then after you do the\ncareful put, if which is zero, you put it to one, if which\nis one, you put it to zero.",
    "start": "1989620",
    "end": "1996480"
  },
  {
    "text": "After that you\ntwiddle a bit and then you do a put onto\nthe chooser sector.",
    "start": "1996480",
    "end": "2002539"
  },
  {
    "text": "The get is actually easier. You just look at what the\nvalue is of the chooser sector",
    "start": "2002540",
    "end": "2007840"
  },
  {
    "text": "and then get it from\nthe corresponding place. Now, there is a line here, the\nsecond line of this pseudo code",
    "start": "2007840",
    "end": "2014590"
  },
  {
    "text": "which says status \"not-OK\". So status not-OK\nis the key thing. If status not-OK is\nwhat happens when",
    "start": "2014590",
    "end": "2020360"
  },
  {
    "text": "a failure happens in the middle\nof writing the chooser sector. Let's say a failure happens\non this pseudo code,",
    "start": "2020360",
    "end": "2026950"
  },
  {
    "text": "I already explained why there is\nno problem if a failure happens until you get to the\nlast line, until you",
    "start": "2026950",
    "end": "2032210"
  },
  {
    "text": "get to the careful put\nof the chooser sector. Until that line is executed\nnobody sees the new data.",
    "start": "2032210",
    "end": "2038680"
  },
  {
    "text": "Everybody doing a\nget is continuing to see the old data, not\nthe new data that just got written with careful put.",
    "start": "2038680",
    "end": "2044770"
  },
  {
    "text": "After this careful put\nexecutes and returns then everybody is going to see the\nnew data because the chooser",
    "start": "2044770",
    "end": "2050879"
  },
  {
    "text": "sector has been\ncorrectly changed. The only tricky\npart to worry about, we have reduced this problem of\nthe slightly more general case",
    "start": "2050880",
    "end": "2058010"
  },
  {
    "text": "of writing these sectors\nand switching between then to this specific\nproblem of figuring out what happens if a failure occurs\nin the middle of the chooser",
    "start": "2058010",
    "end": "2064950"
  },
  {
    "text": "sector's write. If a failure happens here,\none of the common things that could happen is that this\nparticular sector's checks-them",
    "start": "2064950",
    "end": "2072638"
  },
  {
    "text": "does not match the data\nthat is written here.",
    "start": "2072639",
    "end": "2077690"
  },
  {
    "text": "So when you do a\nget of that sector here, in the first\nline up there, when you do a careful\nget of that, you",
    "start": "2077690",
    "end": "2083270"
  },
  {
    "text": "will find that the\nchecks-them does not match so it returns\na status of not-OK. If the status is\nnot OK, you will",
    "start": "2083270",
    "end": "2089399"
  },
  {
    "text": "have to figure out which\nof the two copies to put. Now, the reason\nyou can pick either",
    "start": "2089400",
    "end": "2094949"
  },
  {
    "text": "and you can arbitrarily pick\nread the data from sector zero.",
    "start": "2094949",
    "end": "2100430"
  },
  {
    "text": "But you could pick\neither of these. And the reason is\nit OK to pick either is you know for sure that the\nfailure must have happened here",
    "start": "2100430",
    "end": "2107590"
  },
  {
    "text": "while writing this\nchooser sector. And because there are no\nconcurrent threads going on,",
    "start": "2107590",
    "end": "2113730"
  },
  {
    "text": "you are assured that there is\nno failure that happened here while writing D0, nor\nwas there any failure",
    "start": "2113730",
    "end": "2120260"
  },
  {
    "text": "that occurred here\nwhile writing D1 because the assumption\nwe have made",
    "start": "2120260",
    "end": "2126130"
  },
  {
    "text": "is that there is no concurrency. A system crashes and\nrecovers and discovers that there is a failure, or\nthe careful-get of the chooser",
    "start": "2126130",
    "end": "2134320"
  },
  {
    "text": "sector did not quite\nwork out, did not give you a status of\nOK, that it was not OK then you know the failure\nhappened while writing here.",
    "start": "2134320",
    "end": "2140869"
  },
  {
    "text": "And what that means is it\nis perfectly OK for you to read from either version. Both of those\ncorrespond to a write",
    "start": "2140869",
    "end": "2148400"
  },
  {
    "text": "to that individual sector that\ndid not fail in the middle. And it does not matter\nwhich of the two you pick.",
    "start": "2148400",
    "end": "2156520"
  },
  {
    "text": "That is the reason why this\napproach basically works. ",
    "start": "2156520",
    "end": "2162579"
  },
  {
    "text": "And if you look\nat this solution, this copy idea is actually\na pretty critical idea for all of our solutions to\nachieving recoverability.",
    "start": "2162580",
    "end": "2170515"
  },
  {
    "text": "And it is going\nto lead to a rule that we are going to\ncall the \"Golden Rule of Recoverability\".",
    "start": "2170515",
    "end": "2176740"
  },
  {
    "text": "The rule says never\nmodify the only copy. ",
    "start": "2176740",
    "end": "2182770"
  },
  {
    "text": "If you were asked to\ncome up with a way to achieve something that is\nrecoverable, one guideline,",
    "start": "2182770",
    "end": "2189449"
  },
  {
    "text": "this is unfortunately not\na sufficient condition. But a necessary condition is\nthat if you have something,",
    "start": "2189449",
    "end": "2195611"
  },
  {
    "text": "and you only have one copy of\nthat which you end up writing, then chances are that if a\nfailure happens in the middle of writing that one copy\nyou cannot back out of it",
    "start": "2195611",
    "end": "2204390"
  },
  {
    "text": "so your scheme would not work.  So never modify the\nonly copy of anything,",
    "start": "2204390",
    "end": "2210640"
  },
  {
    "text": "that is the general rule. ",
    "start": "2210640",
    "end": "2217680"
  },
  {
    "text": "Now, there is another\npoint to observe about this recoverable disk write.",
    "start": "2217680",
    "end": "2223839"
  },
  {
    "text": "And that has to do with\nthat careful put line. Write before that\nline, everybody else",
    "start": "2223840",
    "end": "2230820"
  },
  {
    "text": "reading this recoverable\nsector using recoverable get sees the old\nversion of data.",
    "start": "2230820",
    "end": "2236180"
  },
  {
    "text": "Right after that line has\nfinished, everybody reading it sees the new data.",
    "start": "2236180",
    "end": "2241550"
  },
  {
    "text": "That line is an\nexample of something that we will repeatedly\nvisit and use",
    "start": "2241550",
    "end": "2246670"
  },
  {
    "text": "called a \"commit point\". The successful\ncompletion of that line insures that everybody\nelse following doing gets",
    "start": "2246670",
    "end": "2255410"
  },
  {
    "text": "will see the data that\nwas written by this put. And before that line is run,\neverybody else following",
    "start": "2255410",
    "end": "2263200"
  },
  {
    "text": "will see the older\nversion of the data. Now, if a failure occurs\nin the middle of that line",
    "start": "2263200",
    "end": "2269680"
  },
  {
    "text": "then the answer depends on what\nthe recovery procedure does. And one approach might\nbe that the invoker",
    "start": "2269680",
    "end": "2275710"
  },
  {
    "text": "of this module, the person who\noriginally did the disk write-- If a failure happens in\nthe middle of the write,",
    "start": "2275710",
    "end": "2281100"
  },
  {
    "text": "one plan might be that the\ninvoker of that disk write, upon recovery, tries the write\nagain, tries the put again.",
    "start": "2281100",
    "end": "2290474"
  },
  {
    "text": "And the way he\ntries the put is he first does a get and\nsees what answers return. If the answer is\nthe new answer then",
    "start": "2290474",
    "end": "2296140"
  },
  {
    "text": "he says OK everything is fine. If the answer is\nthe old answer then he says I am going\nto retry the put.",
    "start": "2296140",
    "end": "2302059"
  },
  {
    "text": "And this is an\nexample of something we saw the last time which\nis \"temporal redundancy\". You can retry things. Not only can you\nreplicate in space,",
    "start": "2302060",
    "end": "2308300"
  },
  {
    "text": "but you can retry things in\ntime which is the idea here for achieving fault-tolerance. ",
    "start": "2308300",
    "end": "2321980"
  },
  {
    "text": "An example of this idea\ncalled a commit point is that careful put line. And, in general,\na commit point is",
    "start": "2321980",
    "end": "2327940"
  },
  {
    "text": "a point in a recoverable\naction, in this case. And it will turn out\nto be an idea that is useful for isolated actions\nand for transactions more",
    "start": "2327940",
    "end": "2335150"
  },
  {
    "text": "generally. But a commit point is a point\nwhere before the commit point other people do not see\nthe results of your action.",
    "start": "2335150",
    "end": "2341675"
  },
  {
    "text": "And after the commit\npoint successfully finishes everybody sees\nthe results of your action, and that is the definition\nof a commit point.",
    "start": "2341675",
    "end": "2347720"
  },
  {
    "start": "2347720",
    "end": "2369869"
  },
  {
    "text": "Now we have to generalize this\nidea because what we have seen is a scheme. By the way, is this\nclear to everybody?",
    "start": "2369869",
    "end": "2375120"
  },
  {
    "text": "Do you have any questions\nabout recoverable put and get?",
    "start": "2375120",
    "end": "2380540"
  },
  {
    "text": "What does that mean? No questions or not clear? All right.",
    "start": "2380540",
    "end": "2389470"
  },
  {
    "text": "Good. Now we have to\ngeneralize this idea",
    "start": "2389470",
    "end": "2395300"
  },
  {
    "text": "because the class of programs\nwhere you could just sort of read and write from one\nsector is quite limited.",
    "start": "2395300",
    "end": "2400320"
  },
  {
    "text": " And so to generalize this idea\nof what we are going to do",
    "start": "2400320",
    "end": "2406810"
  },
  {
    "text": "is to change the\nprogramming model for writing recoverable\nactions a little bit.",
    "start": "2406810",
    "end": "2412974"
  },
  {
    "text": "Ideally, what you would\nlike to be able to do, the model we are\ngoing to try to get at is to be able to\ntake a procedure",
    "start": "2412974",
    "end": "2418930"
  },
  {
    "text": "and begin recoverable action\nin front of that procedure, write code for that\nprocedure and just",
    "start": "2418930",
    "end": "2425500"
  },
  {
    "text": "say end recoverable action\nand sort of magically end up with a model where the set\nof steps in that action",
    "start": "2425500",
    "end": "2433109"
  },
  {
    "text": "becomes recoverable. And it will turn out we\nhave come very, very close to achieving this\nvery general model",
    "start": "2433110",
    "end": "2438720"
  },
  {
    "text": "by making some\nslight assumptions, or requiring the\nprogrammer to make some small assumptions in the\nway they write their programs.",
    "start": "2438720",
    "end": "2446455"
  },
  {
    "text": " And this generalization\nto more general actions",
    "start": "2446455",
    "end": "2453440"
  },
  {
    "text": "that are recoverable,\ngeneralizing from a single sector uses\nthis idea of a commit point.",
    "start": "2453440",
    "end": "2460415"
  },
  {
    "text": "The way this is\ngoing to work out is the programmer, for\nany recoverable action,",
    "start": "2460415",
    "end": "2466340"
  },
  {
    "text": "he or she is going to end up\nwriting this special function call called begin\nrecoverable action",
    "start": "2466340",
    "end": "2472619"
  },
  {
    "text": "and then writing the code\nfor that recoverable action. And then at some point in the\nmiddle of this code calling",
    "start": "2472620",
    "end": "2481130"
  },
  {
    "text": "a function called \"commit\". And the idea is that\nuntil this commit",
    "start": "2481130",
    "end": "2487339"
  },
  {
    "text": "is called nobody else sees\nthe results of this action. Which means that if\na failure happened,",
    "start": "2487340",
    "end": "2492570"
  },
  {
    "text": "upon crash recovery or\nonce the system restarts,",
    "start": "2492570",
    "end": "2499020"
  },
  {
    "text": "the result would be as if none\nof the steps of this action ever happened. So they are called commit.",
    "start": "2499020",
    "end": "2504420"
  },
  {
    "text": "And then once commit finished\nthen no matter what happens, a failure could happen\nand the system restarts,",
    "start": "2504420",
    "end": "2509820"
  },
  {
    "text": "but once commit is called\nand it returns then you are guaranteed that all\nother actions see the state",
    "start": "2509820",
    "end": "2515089"
  },
  {
    "text": "changes made by this action. So this is a special call.",
    "start": "2515090",
    "end": "2520540"
  },
  {
    "text": "And then after commit they\nmight have some other lines that they write and then they\nend the recoverable action.",
    "start": "2520540",
    "end": "2528130"
  },
  {
    "text": "Now, in many, many cases,\nthe very last thing that is done before the\nend recoverable action",
    "start": "2528130",
    "end": "2533660"
  },
  {
    "text": "is the commit. But, in general, you might\nhave other things here. And it will turn out that you\ncannot do arbitrary things",
    "start": "2533660",
    "end": "2540910"
  },
  {
    "text": "here. For example, you cannot do disk\nwrites that you want to make recoverable over here because\nthe moment you do that,",
    "start": "2540910",
    "end": "2548540"
  },
  {
    "text": "by definition, if a crash\nhappens after a commit, we do not have a plan\nto back out of it. Because the semantics\nwere that once",
    "start": "2548540",
    "end": "2554750"
  },
  {
    "text": "a commit is done\nthen no matter what happens the state\nof the system is as if all of the things\nin this action finished.",
    "start": "2554750",
    "end": "2561690"
  },
  {
    "text": "The discipline is going to\nbe, this thing is called the \"pre-commit phase\" and\nthis thing here is called",
    "start": "2561690",
    "end": "2568730"
  },
  {
    "text": "the \"post-commit phase\". ",
    "start": "2568730",
    "end": "2573830"
  },
  {
    "text": "And so the idea is that\nin the pre-commit phase you should always be\nprepared to back out.",
    "start": "2573830",
    "end": "2579240"
  },
  {
    "text": "Because, by definition, if the\nfailure occurs before commit is called the result is going to\nbe as if nothing ever happened,",
    "start": "2579240",
    "end": "2586119"
  },
  {
    "text": "which means that any\nchange you make here you better religiously\nfollow that never modify the only copy rule\nand be prepared to back out.",
    "start": "2586120",
    "end": "2595310"
  },
  {
    "text": "In the post-commit\nphase, conversely, you don't have the\noption to back out",
    "start": "2595310",
    "end": "2602074"
  },
  {
    "text": "so you better make sure\nthat once you get here you just run to completion. If a failure occurs out\nhere and you restart,",
    "start": "2602074",
    "end": "2609380"
  },
  {
    "text": "you better make sure that\nyou can run to completion. In fact, there are a\nfew other restrictions out in the post-commit phase.",
    "start": "2609380",
    "end": "2616990"
  },
  {
    "text": "Let me do this by an example. In the pre-commit phase, because\nyou have to be prepared to back out, it often means in practice\nthat you cannot be sending",
    "start": "2616990",
    "end": "2623740"
  },
  {
    "text": "messages out onto the network. You can maintain\nyour local state but you have a way\nto back out of that.",
    "start": "2623740",
    "end": "2631680"
  },
  {
    "text": "But if you are sending messages\nout onto the network and you do not have a bigger\nstory to deal with it--",
    "start": "2631680",
    "end": "2638120"
  },
  {
    "text": "We will talk later about nesting\natomic actions within one another or nesting\nrecoverable actions within one",
    "start": "2638120",
    "end": "2643500"
  },
  {
    "text": "another in a few\nlectures from now. But, in the simple model, if\nyou do anything that you cannot back out of such as sending\na network packet then you are",
    "start": "2643500",
    "end": "2650150"
  },
  {
    "text": "stuck. So all of that stuff like\nprinting out checks or firing a bullet or things like that,\nthat you cannot back out",
    "start": "2650150",
    "end": "2657900"
  },
  {
    "text": "of, you better put out here. All the things that you\ncan back out of go here. Likewise, nothing you can\nback out of can go here.",
    "start": "2657900",
    "end": "2665026"
  },
  {
    "text": "Because, once you reach\nhere and a failure happens, you have to continue\nto completion. What that means is in the\nfirst commit phase, really,",
    "start": "2665026",
    "end": "2671160"
  },
  {
    "text": "you cannot do very many things. I mean you can do things that\ndo not really have, for example,",
    "start": "2671160",
    "end": "2676560"
  },
  {
    "text": "you can do things that\nare OK to keep doing. For example, you can do\nitem put and operation so that if a failure happens\nhere and you recover then",
    "start": "2676560",
    "end": "2683505"
  },
  {
    "text": "you know that you\nare out at this point so you could keep retrying those\nactions over and over again until you insure\nthat it completes.",
    "start": "2683505",
    "end": "2690950"
  },
  {
    "text": "But those are the only rules. There is a pre-commit phase\nand a post-commit phase. There is a commit that\nis explicitly called.",
    "start": "2690950",
    "end": "2698077"
  },
  {
    "text": "Now, in addition\nthere is another call that a programmer can make\nor that the system can invoke automatically and\nthat is called \"abort\".",
    "start": "2698077",
    "end": "2704690"
  },
  {
    "text": " For example, when you are moving\nmoney from savings account",
    "start": "2704690",
    "end": "2711110"
  },
  {
    "text": "to checking account in\nthat transfer example, if you discover in the\nmiddle here that you do not",
    "start": "2711110",
    "end": "2717440"
  },
  {
    "text": "have enough funds to\ncover that transfer, you could just decide to\nabort the recoverable action.",
    "start": "2717440",
    "end": "2726000"
  },
  {
    "text": "And what that means is\nthat abort automatically will insure that the\nstate of the system is at the point right\nbefore the start",
    "start": "2726000",
    "end": "2734299"
  },
  {
    "text": "of the recoverable action. Whatever changes were made\nin the middle until abort was called end up backing out.",
    "start": "2734300",
    "end": "2741151"
  },
  {
    "text": "Now, abort might also be\ninvoked by the system. In a database, there is somebody\nbooking airline tickets, car",
    "start": "2741152",
    "end": "2746300"
  },
  {
    "text": "reservations and all of that,\nand you discover in the middle that you are not\nactually able to find a hotel for the same dates.",
    "start": "2746300",
    "end": "2753640"
  },
  {
    "text": "So you might just abort the\nwhole process, control C the thread you\nare running, which means that all of the\nwork that has been done",
    "start": "2753640",
    "end": "2760460"
  },
  {
    "text": "has to be backed out. And so the system would\nnormally implement that by aborting all of the changes\nthat you have made so far.",
    "start": "2760460",
    "end": "2766260"
  },
  {
    "text": "It will back out of\nyour car reservation, back out of your airline\nreservation and so on.",
    "start": "2766260",
    "end": "2771750"
  },
  {
    "text": "So abort is called in a\nfew different contexts. Sometimes by the program\nitself, sometimes by the system to\nfree up resources,",
    "start": "2771750",
    "end": "2778180"
  },
  {
    "text": "sometimes by the user of\nyour, say, transaction system. I am not going to get into how\nwe implement recoverable action",
    "start": "2778180",
    "end": "2798160"
  },
  {
    "text": "today, but this\nprogramming model is important to understand. I do want to mention\none thing going back to this idea of isolation\nthat we talked about.",
    "start": "2798160",
    "end": "2805840"
  },
  {
    "text": "If you recall,\nisolation is this idea that you have two actions or\nmultiple actions whose net",
    "start": "2805840",
    "end": "2811240"
  },
  {
    "text": "effect is as if they ran\nin some sequential order, some serial order,\nA1 before A2 or A2 before A1 for all implantation\nof A1, A2, A3, etc.",
    "start": "2811240",
    "end": "2821220"
  },
  {
    "text": "Now, this idea is actually\nvery closely related but not the same as stuff\nwe have seen before.",
    "start": "2821220",
    "end": "2826625"
  },
  {
    "text": "Earlier in the\nsemester we looked at ways in which you have\nmultiple threads that",
    "start": "2826625",
    "end": "2831834"
  },
  {
    "text": "need to be synchronized\nwith each other. And we actually did look\nat isolation as a concept then but we specifically\nfocused on things",
    "start": "2831834",
    "end": "2839330"
  },
  {
    "text": "like sequence\ncoordination where you want to have one thread run\nbefore the other thread or one thread run off of\nthe other thread.",
    "start": "2839330",
    "end": "2845650"
  },
  {
    "text": "For example, in a\nproducer-consumer relationship. The point is that in\none significant respect,",
    "start": "2845650",
    "end": "2854790"
  },
  {
    "text": "achieving this idea of\nisolation for actions is harder than achieving\nsequence coordination.",
    "start": "2854790",
    "end": "2862040"
  },
  {
    "text": "And the reason it is\nharder is that everybody who writes an isolated action,\nin general, does not know,",
    "start": "2862040",
    "end": "2867640"
  },
  {
    "text": "any given isolated\naction does not know what other actions\nthere are in the system. So you might have 25\ndifferent actions all of which",
    "start": "2867640",
    "end": "2875000"
  },
  {
    "text": "are touching the same\ndata, but no single action is aware of all of\nthese other actions. That is very different\nfrom sequence coordination.",
    "start": "2875000",
    "end": "2882490"
  },
  {
    "text": "In sequence coordination,\nthere is one or two or a small number of threads\nthat are actually aware",
    "start": "2882490",
    "end": "2887917"
  },
  {
    "text": "of each other. And there is a single\nprogrammer that is actually designing these things\nto specifically interact with each other in some fashion,\nso this thread runs and then",
    "start": "2887917",
    "end": "2894814"
  },
  {
    "text": "this other one\nruns after the data has been produced and so on. In that sense, this\nkind of isolation",
    "start": "2894814",
    "end": "2900230"
  },
  {
    "text": "is harder to achieve because\neach individual action does not",
    "start": "2900230",
    "end": "2905550"
  },
  {
    "text": "know which other\naction there are. But, yet, you want to\nachieve this sequential goal.",
    "start": "2905550",
    "end": "2911312"
  },
  {
    "text": "Now, in one other\nrespect, actually isolated actions are easier\nthan sequence coordination.",
    "start": "2911312",
    "end": "2916720"
  },
  {
    "text": "And the significant way\nin which they are easier is they are easier\nfor programmers. ",
    "start": "2916720",
    "end": "2922300"
  },
  {
    "text": "Because we are not worried about\ncoordinating different actions with each other, once you design\na system that inside the system",
    "start": "2922300",
    "end": "2930680"
  },
  {
    "text": "deals with ways of\nachieving isolation, the programmers do not have to\nthink about locks and unlocks",
    "start": "2930680",
    "end": "2936360"
  },
  {
    "text": "and acquiring and releasing\nlocks or other ways in which they control access to\nvariables that might be shared.",
    "start": "2936360",
    "end": "2944155"
  },
  {
    "text": "What this means is that if we\ncan design isolated actions right and we do not worry\nabout any serial order,",
    "start": "2944155",
    "end": "2950610"
  },
  {
    "text": "A1 can run before\nA2 or A2 before A1, then it makes life a lot\neasier for a programmer.",
    "start": "2950610",
    "end": "2955940"
  },
  {
    "text": "And our goal is to\ncome up with ways of achieving recoverability\nand isolation that require very little\nfrom a programmer that",
    "start": "2955940",
    "end": "2962990"
  },
  {
    "text": "wants these properties. It is a little bit\nlike pixy dust. You might write\na general program",
    "start": "2962990",
    "end": "2968410"
  },
  {
    "text": "and come in and just put a\nbegin recoverable action, end recoverable action and make\na few changes to your program.",
    "start": "2968410",
    "end": "2974177"
  },
  {
    "text": "Or you might just say\nbegin isolated action, end isolated action,\nand magically the system achieves isolation\nor recoverability for you.",
    "start": "2974177",
    "end": "2980450"
  },
  {
    "text": " It can make life much\neasier for a programmer",
    "start": "2980450",
    "end": "2985710"
  },
  {
    "text": "but it is a harder\nproblem for us because no single\naction is aware of all of the other actions\nin the system.",
    "start": "2985710",
    "end": "2991571"
  },
  {
    "text": "Next time we will see how to\nachieve recoverability and then isolation and transactions. ",
    "start": "2991571",
    "end": "3007190"
  },
  {
    "text": "Design Project 2 is\nout on the website now. And the main thing for you\nto make sure you do this week",
    "start": "3007190",
    "end": "3012300"
  },
  {
    "text": "is get project partners and\nsend a list of team members to your teaching assistant\nby Thursday's recitation.",
    "start": "3012300",
    "end": "3019460"
  },
  {
    "text": "Thanks. ",
    "start": "3019460",
    "end": "3029297"
  }
]