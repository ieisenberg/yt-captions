[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6950"
  },
  {
    "text": "offer high-quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "6950",
    "end": "13500"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at ocw.mit.edu.",
    "start": "13500",
    "end": "18680"
  },
  {
    "start": "18680",
    "end": "27869"
  },
  {
    "text": "Let's get going here. ",
    "start": "27870",
    "end": "35990"
  },
  {
    "text": "So this is a lecture that's\nactually appropriate for Halloween, because it's\na scary topic.",
    "start": "35990",
    "end": "46670"
  },
  {
    "text": "Non-deterministic programming. ",
    "start": "46670",
    "end": "52410"
  },
  {
    "text": "So we've been looking mostly\nat deterministic programs. So a program is deterministic\non a given input if every",
    "start": "52410",
    "end": "60290"
  },
  {
    "text": "memory location is updated\nwith the same sequence of values in every execution.",
    "start": "60290",
    "end": "65470"
  },
  {
    "text": " So if you look at the memory of\nthe machine, you can view",
    "start": "65470",
    "end": "72580"
  },
  {
    "text": "that as, essentially, the\nstate of the machine. And if you're always updating\nevery memory location with",
    "start": "72580",
    "end": "79570"
  },
  {
    "text": "exactly the same sequence of\nvalues, then the program is deterministic. Now it may be that two memory\nlocations may be updated in a",
    "start": "79570",
    "end": "89700"
  },
  {
    "text": "different order. So you may have one location\nwhich is updated first in one",
    "start": "89700",
    "end": "96340"
  },
  {
    "text": "execution, and another that's\nsecond, and then in a different execution, they may\nbe a different order.",
    "start": "96340",
    "end": "101490"
  },
  {
    "text": "That's OK, generally. The issue is whether or not\nevery memory location sees the same order.",
    "start": "101490",
    "end": "107869"
  },
  {
    "text": "And if they do, then it's for\nevery execution, then it's a",
    "start": "107870",
    "end": "115800"
  },
  {
    "text": "deterministic program. ",
    "start": "115800",
    "end": "121850"
  },
  {
    "text": "So what's the advantage\nof having a",
    "start": "121850",
    "end": "127850"
  },
  {
    "text": "deterministic program? Yeah? AUDIENCE: It always runs the\nsame way [INAUDIBLE].",
    "start": "127850",
    "end": "135246"
  },
  {
    "text": "PROFESSOR: It always\nruns the same way. So what? What's that good for? AUDIENCE: So you can\nfind bugs easier. PROFESSOR: Yeah, debugging.",
    "start": "135246",
    "end": "142790"
  },
  {
    "text": "It's really easy to find bugs\nif every time you run it it does the same thing. It's much harder to find bugs\nif, when you run it, it might",
    "start": "142790",
    "end": "151360"
  },
  {
    "text": "do something different. So that leads to our first\nmajor rule of thumb about",
    "start": "151360",
    "end": "158400"
  },
  {
    "text": "determinism, which is you\nshould always write deterministic programs. ",
    "start": "158400",
    "end": "166180"
  },
  {
    "text": "Don't write non-deterministic programs. And the only problem is, boy\nis that poor quality there.",
    "start": "166180",
    "end": "174480"
  },
  {
    "text": "So basically, it says, always\nwrite non-deterministic programs unless you can't.",
    "start": "174480",
    "end": "180570"
  },
  {
    "text": "So sometimes, the only way to\nget performance is to do something non-deterministic.",
    "start": "180570",
    "end": "186040"
  },
  {
    "text": " So this lecture is basically\nabout some of the ways of",
    "start": "186040",
    "end": "194900"
  },
  {
    "text": "doing non-deterministic\nprogramming. So it's appropriate that we say\nthis is not for those who",
    "start": "194900",
    "end": "206450"
  },
  {
    "text": "are faint of heart. We are treading into dangerous\nterritory here.",
    "start": "206450",
    "end": "213340"
  },
  {
    "text": " So the basic rule is, as I say,\nany time you can, make",
    "start": "213340",
    "end": "219410"
  },
  {
    "text": "your program deterministic. So we're going to talk about the\nnumber one way that people",
    "start": "219410",
    "end": "226780"
  },
  {
    "text": "introduce non-determinism into\nprograms, which is via mutual exclusion and mutexes, which are\na type of lock, and then",
    "start": "226780",
    "end": "237510"
  },
  {
    "text": "look at some of the anomalies\nthat you get. Besides just things being\nnon-deterministic, you can",
    "start": "237510",
    "end": "245990"
  },
  {
    "text": "also get some very, very\nweird behavior sometimes for the execution.",
    "start": "245990",
    "end": "252099"
  },
  {
    "text": "So we'll start out with\nmutual exclusion. So let's take a look, for\nexample, suppose I'm",
    "start": "252100",
    "end": "258120"
  },
  {
    "text": "implementing a hash table\nas a set of bins. And I'm resolving collisions\nwith chaining.",
    "start": "258120",
    "end": "264639"
  },
  {
    "text": "So here, each slot of my hash\ntable has a chain of all the",
    "start": "264640",
    "end": "269720"
  },
  {
    "text": "values that resolve\nto that slot. And if I have a value x, let's\nsay it has key 81, and I want",
    "start": "269720",
    "end": "280660"
  },
  {
    "text": "to insert x into the table, I\nfirst compute a hash of x.",
    "start": "280660",
    "end": "287920"
  },
  {
    "text": "And let's say it hashes to this\nparticular list here.",
    "start": "287920",
    "end": "293690"
  },
  {
    "text": "And then what I do is\nI say, OK, let me insert x into the table. So I make the next pointer of\nx point to whatever is the",
    "start": "293690",
    "end": "302900"
  },
  {
    "text": "head of the table. And then I make the\ntable 0.2x.",
    "start": "302900",
    "end": "312020"
  },
  {
    "text": "And that effectively inserts\nx into the hash table.",
    "start": "312020",
    "end": "319539"
  },
  {
    "text": "Fairly straightforward\npiece of code. I would expect that most of you\ncould write that even on an exam and get it right.",
    "start": "319540",
    "end": "327759"
  },
  {
    "text": "But what happens when we say,\noh, let's have some",
    "start": "327760",
    "end": "333130"
  },
  {
    "text": "concurrency. Let's have the ability to look\nup things in a hash table in different parallel branches\nof a parallel program.",
    "start": "333130",
    "end": "344080"
  },
  {
    "text": "So here, we have a concurrent\nhash table now where I've got two values, and I'm going to\nhave two different threads",
    "start": "344080",
    "end": "351190"
  },
  {
    "text": "inserting x and y. So one of them is going to do\nthis one, and one of them is",
    "start": "351190",
    "end": "357479"
  },
  {
    "text": "going to do this one. So let's just see how\nthis can screw up.",
    "start": "357480",
    "end": "365580"
  },
  {
    "text": "So first, we hash x,\nand it hashes to this particular slot.",
    "start": "365580",
    "end": "373440"
  },
  {
    "text": "So then we do, just as we're\ndoing before, making its next pointer point to the beginning\nof the array.",
    "start": "373440",
    "end": "378570"
  },
  {
    "text": " Then y gets in the picture,\nand it decides oh,",
    "start": "378570",
    "end": "385140"
  },
  {
    "text": "I'm going to hash. And oh, it hashes to exactly\nthe same slot. ",
    "start": "385140",
    "end": "391910"
  },
  {
    "text": "And then y makes its next\npointer point to the same to the head of the list.",
    "start": "391910",
    "end": "397240"
  },
  {
    "text": "And then it sets the head of\nthe list to point to y. So now y is in the list.",
    "start": "397240",
    "end": "403700"
  },
  {
    "text": "Whoops, now x puts itself in the\nlist, effectively taking y",
    "start": "403700",
    "end": "409020"
  },
  {
    "text": "out of the list. So rather than x and y both\nbeing in the list, we have a concurrency bug.",
    "start": "409020",
    "end": "414550"
  },
  {
    "text": " So this is clearly a race.",
    "start": "414550",
    "end": "423770"
  },
  {
    "text": "So it's a determinacy race,\nbecause we have two parallel",
    "start": "423770",
    "end": "432530"
  },
  {
    "text": "instructions accessing\nessentially the same location, at least one of which-- in\nthis case both of them--",
    "start": "432530",
    "end": "438449"
  },
  {
    "text": "performing a store\nto that location. So that's a determinacy race.",
    "start": "438450",
    "end": "443889"
  },
  {
    "text": "And how things are going to work\nout depends upon which one of these guys goes first.",
    "start": "443890",
    "end": "449540"
  },
  {
    "text": "Notice, as with most race bugs,\nthat if this code all executed before this\ncode, we're OK.",
    "start": "449540",
    "end": "455780"
  },
  {
    "text": "Or if this code all executed\nbefore this code, we're OK. So the bug occurs when they\nhappen to execute at",
    "start": "455780",
    "end": "464810"
  },
  {
    "text": "essentially the same time and\ntheir instructions interleave. ",
    "start": "464810",
    "end": "472379"
  },
  {
    "text": "So this is a race bug. So one of the classic ways of\nfixing this kind of race bug",
    "start": "472380",
    "end": "483610"
  },
  {
    "text": "is to insist on some kind\nof mutual exclusion. ",
    "start": "483610",
    "end": "489819"
  },
  {
    "text": "So a critical section is a piece\nof code that is going to",
    "start": "489820",
    "end": "496830"
  },
  {
    "text": "access shared data that must not\nbe executed by two threads",
    "start": "496830",
    "end": "506349"
  },
  {
    "text": "at the same time. So it shouldn't be accessed by\ntwo threads at the same time.",
    "start": "506350",
    "end": "514809"
  },
  {
    "text": "So it's mutual exclusion. So that's what a critical\nsection is. And we have a mechanism\nthat operating",
    "start": "514809",
    "end": "523640"
  },
  {
    "text": "systems typically provide-- as well as runtime systems, but\nyou can build your own--",
    "start": "523640",
    "end": "528910"
  },
  {
    "text": "called \"mutexes,\" or \"mutex\nlocks,\" or sometimes just \"locks.\" So a mutex is an object\nthat has a lock and",
    "start": "528910",
    "end": "539220"
  },
  {
    "text": "unlock member function.  And any attempt by a thread to\nlock an already locked mutex",
    "start": "539220",
    "end": "548140"
  },
  {
    "text": "causes that thread to block. And \"block\" is, by the way,\na hugely overused word in",
    "start": "548140",
    "end": "555000"
  },
  {
    "text": "computer science. In this case, by \"block,\" they\nmean \"wait.\" It waits until",
    "start": "555000",
    "end": "561540"
  },
  {
    "text": "the mutex is unlocked. So whenever you have something\nthat's locked, somebody else",
    "start": "561540",
    "end": "568680"
  },
  {
    "text": "comes and tries to\ngrab the lock. The mutex mechanism\nonly allows one",
    "start": "568680",
    "end": "573980"
  },
  {
    "text": "thread to access it. The other one waits until\nthe lock is freed. Then this other one\ncan go access it.",
    "start": "573980",
    "end": "586220"
  },
  {
    "text": "So what we can do is build a\nconcurrent hash table by",
    "start": "586220",
    "end": "592370"
  },
  {
    "text": "modifying each slot in the table\nto have both a mutex, L,",
    "start": "592370",
    "end": "599770"
  },
  {
    "text": "and a pointer called \"head\"\nto the slot contents.",
    "start": "599770",
    "end": "605290"
  },
  {
    "text": "And then the idea is that\nwhat we'll do is hash the value to a slot.",
    "start": "605290",
    "end": "611370"
  },
  {
    "text": "But before we access the\nelements of the slot, we're going to grab the lock\non the slot.",
    "start": "611370",
    "end": "617460"
  },
  {
    "text": "So every slot in the table\nhas a lock here. Now, I could have a lock\non the whole table. What's the problem with that?",
    "start": "617460",
    "end": "624820"
  },
  {
    "text": "Sure. AUDIENCE: [INAUDIBLE]  basically can't do anything.",
    "start": "624820",
    "end": "631076"
  },
  {
    "text": "You can't read. You couldn't be reading\nfrom the table. PROFESSOR: Yeah, so\nif you have a lock on the whole table-- AUDIENCE: You would defeat\nthe purpose [INAUDIBLE]",
    "start": "631076",
    "end": "637550"
  },
  {
    "text": "PROFESSOR: You defeat the\npurpose of trying to have a concurrent hash table, right? Because only one thread can\nactually access the",
    "start": "637550",
    "end": "644200"
  },
  {
    "text": "hash table at a time. So in this case, what we'll do\nis we'll lock each slot of the",
    "start": "644200",
    "end": "649270"
  },
  {
    "text": "hash table. And there are actually\nmechanisms where you can lock each element of the\nhash table or a",
    "start": "649270",
    "end": "655780"
  },
  {
    "text": "constant number of elements. But basically, what we're trying\nto do is make it so",
    "start": "655780",
    "end": "661420"
  },
  {
    "text": "that the odds are that if you\nhave a big enough table and relatively few processors you're\nrunning on, the odds",
    "start": "661420",
    "end": "668560"
  },
  {
    "text": "that they'll conflict are\ngoing to be very low.  So what we do is we grab a lock\non the slot, and then we",
    "start": "668560",
    "end": "676779"
  },
  {
    "text": "play the same game of inserting ourselves at the head. And then we unlock the slot.",
    "start": "676780",
    "end": "683269"
  },
  {
    "text": " So what that does is it means\nthat only one of the two",
    "start": "683270",
    "end": "690860"
  },
  {
    "text": "threads in the previous example\ncan actually execute this code at a time.",
    "start": "690860",
    "end": "698260"
  },
  {
    "text": "And so it guarantees that the\ntwo regions of code will either execute in this order or\nin this order, and you'll",
    "start": "698260",
    "end": "705790"
  },
  {
    "text": "never get the instructions\ninterleaved. Now, this is introducing\nnon-determinism.",
    "start": "705790",
    "end": "715150"
  },
  {
    "text": "Why is this going to be\nnon-deterministic? Yes? AUDIENCE: [INAUDIBLE] lock\nfirst, it'll be [INAUDIBLE].",
    "start": "715150",
    "end": "722630"
  },
  {
    "text": "PROFESSOR: Yeah, depending upon\nwhich one gets the lock first, the length list in there\nwill have the elements",
    "start": "722630",
    "end": "730210"
  },
  {
    "text": "in a different order. So a program that depends on\nthe order of that list is",
    "start": "730210",
    "end": "736699"
  },
  {
    "text": "going to behave differently\nfrom run to run. ",
    "start": "736700",
    "end": "742519"
  },
  {
    "text": "So let's recall the definition\nof a determinacy race. It occurs when two logically\nparallel instructions access",
    "start": "742520",
    "end": "749980"
  },
  {
    "text": "the same memory location,\nand at least one of the instructions performs a write.",
    "start": "749980",
    "end": "756080"
  },
  {
    "text": "So that is, we do have a\ndeterminacy race when we",
    "start": "756080",
    "end": "761190"
  },
  {
    "text": "introduce locks. Locks are essentially, we're\ngoing to have an intentional determinacy race.",
    "start": "761190",
    "end": "768680"
  },
  {
    "text": "So a program execution with no\ndeterminacy races means the program is deterministic\non that input.",
    "start": "768680",
    "end": "777350"
  },
  {
    "text": "So if there are no determinacy\nraces, then although",
    "start": "777350",
    "end": "782420"
  },
  {
    "text": "individual locations may be\nupdated in a different order in a parallel execution, every\nmemory location will be",
    "start": "782420",
    "end": "791680"
  },
  {
    "text": "updated by exactly the same\nthing at the same time. The order will be of update\nof operations on any given",
    "start": "791680",
    "end": "798860"
  },
  {
    "text": "location will be the\nsame always.  So that's actually a theorem,\nwhich we're",
    "start": "798860",
    "end": "805350"
  },
  {
    "text": "not going to prove. But I think if you think\nabout it, it's fairly",
    "start": "805350",
    "end": "810700"
  },
  {
    "text": "straightforward. If you never have two guys in\nparallel that could possibly affect the same location, then\nthe behavior always is going",
    "start": "810700",
    "end": "819490"
  },
  {
    "text": "to be the same thing. Things are going to get written\nin the same order. So the program in that case\nalways behaves the same on",
    "start": "819490",
    "end": "827200"
  },
  {
    "text": "that given input, no\nmatter how it's scheduled and executed.",
    "start": "827200",
    "end": "832960"
  },
  {
    "text": "We'll always have essentially\nthe same behavior, even though it may get scheduled\none way or another.",
    "start": "832960",
    "end": "838220"
  },
  {
    "start": "838220",
    "end": "844209"
  },
  {
    "text": "And one of the nice things\nthat we have in our race detection tool Cilkscreen is\nthat if we do have determinacy",
    "start": "844210",
    "end": "851640"
  },
  {
    "text": "races that exist in\nan ostensibly deterministic program-- that is, a program\nwith no mutexes.",
    "start": "851640",
    "end": "858460"
  },
  {
    "text": "If basically it just reads and\nwrites on locations and so",
    "start": "858460",
    "end": "865880"
  },
  {
    "text": "forth, then Cilkscreen\nguarantees to find such a race. So It's nice that we get a\nguarantee out of Cilkscreen.",
    "start": "865880",
    "end": "872980"
  },
  {
    "start": "872980",
    "end": "878639"
  },
  {
    "text": "So this is all beautiful,\nelegant, everything works out great if there are no\ndeterminacy races.",
    "start": "878640",
    "end": "888270"
  },
  {
    "text": "But when we do something like a\nconcurrent hash table, we're intentionally putting in\na determinacy area.",
    "start": "888270",
    "end": "896240"
  },
  {
    "text": "So that asks sort of\na natural question. Why would I want to have a\nconcurrent hash table?",
    "start": "896240",
    "end": "904050"
  },
  {
    "text": "Why not make it so that my\nprogram is deterministic?",
    "start": "904050",
    "end": "909450"
  },
  {
    "text": "Why might a concurrent hash\ntable be an advantageous thing to have in a program that\nyou wanted to go fast?",
    "start": "909450",
    "end": "915070"
  },
  {
    "text": " Some ideas?",
    "start": "915070",
    "end": "920779"
  },
  {
    "text": "Where might you want\nto use it? Yeah? AUDIENCE: Speed? PROFESSOR: Yeah, speed. But I mean, what's\nan application? What's a use case, as the\nentrepreneurs would ask you?",
    "start": "920780",
    "end": "931640"
  },
  {
    "text": "Where is it that you would\nreally want to use a concurrent hash table\nto give you speed? ",
    "start": "931640",
    "end": "938420"
  },
  {
    "text": "Yeah? AUDIENCE: If you started\nusing it [INAUDIBLE] along with your system\n[INAUDIBLE]",
    "start": "938420",
    "end": "945430"
  },
  {
    "text": "values. PROFESSOR: Yeah, it could be\nthat there's some sort of global table that you want a\nlot of people to be able to",
    "start": "945430",
    "end": "953020"
  },
  {
    "text": "access at one time.  So if you lock down and only had\none thread accessing at a",
    "start": "953020",
    "end": "960959"
  },
  {
    "text": "time, you reduce how\nmuch concurrency that you could have. That's a good one. Yeah?",
    "start": "960960",
    "end": "966768"
  },
  {
    "text": "AUDIENCE: Perhaps most of the\ntime, people are just reading. So if you had something\nconcurrent, your reading",
    "start": "966768",
    "end": "972600"
  },
  {
    "text": "should be fine. So in that case, a lot more\nreading high performance",
    "start": "972600",
    "end": "978432"
  },
  {
    "text": "[INAUDIBLE] PROFESSOR: Yeah, so in fact,\nthere's a type of lock called",
    "start": "978432",
    "end": "985090"
  },
  {
    "text": "a reader-writer lock, which\nallows one writer to operate,",
    "start": "985090",
    "end": "991010"
  },
  {
    "text": "but many readers. So that's another type of\nconcurrency control.",
    "start": "991010",
    "end": "997120"
  },
  {
    "text": "So just another place, a common\nplace that you use it, is when you're memoizing.",
    "start": "997120",
    "end": "1002440"
  },
  {
    "text": "Meaning I do a computation, I\nwant to remember the results so that if I see it again, I\ncan look it up rather than",
    "start": "1002440",
    "end": "1009790"
  },
  {
    "text": "having to compute it\nagain from scratch. So you might keep all those\nvalues in a hash table.",
    "start": "1009790",
    "end": "1016060"
  },
  {
    "text": "Well, if I go in the hash table,\nnow I'm going to have concurrent accesses to that\nhash table if I've got a",
    "start": "1016060",
    "end": "1022550"
  },
  {
    "text": "parallel program that wants\nto do memorizing. And there are a bunch\nof other cases.",
    "start": "1022550",
    "end": "1029050"
  },
  {
    "text": "So we have determinacy races. And we have a great guarantee\nthat if there is a race, we",
    "start": "1029050",
    "end": "1035810"
  },
  {
    "text": "guarantee to find it. ",
    "start": "1035810",
    "end": "1040869"
  },
  {
    "text": "Now, there's another type of\nrace, and in fact, you'll hear more about this type of race\nif you read the literature",
    "start": "1040869",
    "end": "1046859"
  },
  {
    "text": "than you hear about\ndeterminacy races. So a data race occurs when you\nhave two logically parallel",
    "start": "1046859",
    "end": "1054440"
  },
  {
    "text": "instructions holding\nno locks in common. And they access the same\nlocation, and at least one of",
    "start": "1054440",
    "end": "1061400"
  },
  {
    "text": "the instructions performs\na write. So this is saying that\nI've got accesses.",
    "start": "1061400",
    "end": "1069309"
  },
  {
    "text": "And if they have no\nlocks in common-- so it could be that you have\na problem where one of them",
    "start": "1069310",
    "end": "1074490"
  },
  {
    "text": "holds a lock L, and another\none holds L prime.",
    "start": "1074490",
    "end": "1079720"
  },
  {
    "text": "And then they access the\nlocation, that's going to be a data race, because they don't\nhold locks in common.",
    "start": "1079720",
    "end": "1088030"
  },
  {
    "text": "But if I have L and L being the\nlocks that the two threads",
    "start": "1088030",
    "end": "1093360"
  },
  {
    "text": "hold, and they access the\nsame location, that's not a data race now. It is a determinacy race,\nbecause it's going to matter",
    "start": "1093360",
    "end": "1100410"
  },
  {
    "text": "which order it is, but it's not\na data race, because the locks, in some sense, are\nprotecting access.",
    "start": "1100410",
    "end": "1107160"
  },
  {
    "text": "So Cilkscreen, in fact,\nunderstands locks and will not report a determinacy race unless\nit is also a data race.",
    "start": "1107160",
    "end": "1114515"
  },
  {
    "text": " However, since codes that use\nlocks are non-deterministic by",
    "start": "1114515",
    "end": "1124530"
  },
  {
    "text": "intention, they actually weaken\nCilkscreen's guarantee.",
    "start": "1124530",
    "end": "1130440"
  },
  {
    "text": "And in particular, in its\nexecution that it does, if it finds a data race, it's going\nto say, I'm going to ignore",
    "start": "1130440",
    "end": "1138250"
  },
  {
    "text": "that data race. But now it is only going to\nfollow one of the two paths",
    "start": "1138250",
    "end": "1144530"
  },
  {
    "text": "that might arise from\nthat data race. ",
    "start": "1144530",
    "end": "1151460"
  },
  {
    "text": "In other words, it doesn't\nfollow both paths. If you could think about it,\nwhen one of them wins--",
    "start": "1151460",
    "end": "1158480"
  },
  {
    "text": "so you have a race between\ntwo critical sections. When one of them wins, you can\nimagine that's one possible",
    "start": "1158480",
    "end": "1165080"
  },
  {
    "text": "outcome of the computation. When the other wins,\nit's another path.",
    "start": "1165080",
    "end": "1171090"
  },
  {
    "text": "And what Cilkscreen does\nis it picks one path. In fact, it picks the path which\nis the one that would",
    "start": "1171090",
    "end": "1176350"
  },
  {
    "text": "occur in the cereal execution. So there's a whole path there\nthat you're not exploring.",
    "start": "1176350",
    "end": "1182210"
  },
  {
    "text": " So Cilkscreen's guarantee is not\ngoing to be strong there.",
    "start": "1182210",
    "end": "1189420"
  },
  {
    "text": "However, if the critical\nsections, in fact, commute-- that is, they do exactly\nthe same thing, no",
    "start": "1189420",
    "end": "1195230"
  },
  {
    "text": "matter what the order. So for example, if they're both\nincrementing a value,",
    "start": "1195230",
    "end": "1200779"
  },
  {
    "text": "then the result, after doing one\nversus after the other is the same value, then you get a\nguarantee out of Cilkscreen.",
    "start": "1200780",
    "end": "1207970"
  },
  {
    "text": " So Cilkscreen could still be\nvery helpful for finding bugs,",
    "start": "1207970",
    "end": "1213460"
  },
  {
    "text": "because typically, when you\norganize your computation, if it occurs in this order,\nthere's typically some",
    "start": "1213460",
    "end": "1222180"
  },
  {
    "text": "execution or input where you can\nmake things occur in the other order. So you can actually cover more\nraces than you might imagine",
    "start": "1222180",
    "end": "1232040"
  },
  {
    "text": "on first blush. But it is a danger. But what we're talking about\ntoday is dangerous",
    "start": "1232040",
    "end": "1238140"
  },
  {
    "text": "programming, non-deterministic\nprogramming. So when you start using\nmutexes, some of the",
    "start": "1238140",
    "end": "1245230"
  },
  {
    "text": "guarantees and so forth\nget much dicier. Any questions about that?",
    "start": "1245230",
    "end": "1250850"
  },
  {
    "text": " Now, if you have no data races\nin your code, that doesn't",
    "start": "1250850",
    "end": "1259840"
  },
  {
    "text": "mean that you have no bugs. So for example, here's a way\nsomebody might fix that",
    "start": "1259840",
    "end": "1269970"
  },
  {
    "text": "insertion code. So we hash the key, we grab a\nlock, we set x next to be",
    "start": "1269970",
    "end": "1278750"
  },
  {
    "text": "whatever is the head\nof the list, and then we do an unlock.",
    "start": "1278750",
    "end": "1283820"
  },
  {
    "text": "And now we lock it again. Now we follow the\nhead to set x--",
    "start": "1283820",
    "end": "1289500"
  },
  {
    "text": "sorry, we set x to be\nthe head of the list and then unlock again. And now notice that in this\ncase, technically, there is no",
    "start": "1289500",
    "end": "1297160"
  },
  {
    "text": "data race if I have two\nconcurrent threads trying to access these at a time, because\nall the axis I'm",
    "start": "1297160",
    "end": "1303800"
  },
  {
    "text": "doing, I'm holding lock L.\nNevertheless, I can get that same interleaving of code\nthat causes the bug.",
    "start": "1303800",
    "end": "1314610"
  },
  {
    "text": "So just because you don't have\na data race doesn't mean that you don't have a bug\nin your code.",
    "start": "1314610",
    "end": "1321279"
  },
  {
    "text": "As I say, this is dangerous\nprogramming.  However, typically, if you\nhave mutexes and no data",
    "start": "1321280",
    "end": "1330490"
  },
  {
    "text": "races, usually it means that you\nwent through and thought about this code. And if you were thinking about\nthis code, you would say, gee,",
    "start": "1330490",
    "end": "1339530"
  },
  {
    "text": "really I'm trying to make these\ntwo instructions be the critical section. Why would I unlock\nand lock again?",
    "start": "1339530",
    "end": "1346590"
  },
  {
    "text": "So most of the time, as a\npractical matter, if you don't have data races, it probably\nmeans you did the right thing",
    "start": "1346590",
    "end": "1353429"
  },
  {
    "text": "in terms of identifying the\ncritical sections that needed to be locked and not unlocking\nthings in the middle of them.",
    "start": "1353430",
    "end": "1361330"
  },
  {
    "text": "So as a practical matter, no\ndata races usually means it's unlikely you have bugs.",
    "start": "1361330",
    "end": "1366960"
  },
  {
    "text": " But no guarantees. As I say, dangerous\nprogramming.",
    "start": "1366960",
    "end": "1373330"
  },
  {
    "text": "Non-deterministic programming\nis dangerous program.  Any questions about that?",
    "start": "1373330",
    "end": "1379230"
  },
  {
    "text": " Anybody scared off yet?",
    "start": "1379230",
    "end": "1386550"
  },
  {
    "text": "Yeah? AUDIENCE: So what you can\ndo is the opposite. You don't have any bugs, but\nyou made the critical",
    "start": "1386550",
    "end": "1393633"
  },
  {
    "text": "distinction to [INAUDIBLE] PROFESSOR: Yes, so certainly\nfrom a performance point of view, one of the problems\nwith locking is that--",
    "start": "1393634",
    "end": "1401080"
  },
  {
    "text": "and we'll talk about this\na little bit later-- with locking is that if you have\na large section that you",
    "start": "1401080",
    "end": "1406300"
  },
  {
    "text": "decide to lock, it means\nother threads can't do work on that section.",
    "start": "1406300",
    "end": "1411870"
  },
  {
    "text": "So they're spinning,\nwasting cycles. So generally, you want\nto try to lock things as small as possible.",
    "start": "1411870",
    "end": "1418970"
  },
  {
    "text": "The other problem is, it turns\nout that there's overhead associated with these locks.",
    "start": "1418970",
    "end": "1424550"
  },
  {
    "text": "So if there's overhead\nassociated with the locks, that's problematic as well,\nbecause now you",
    "start": "1424550",
    "end": "1430610"
  },
  {
    "text": "may be slowing down. If this is in an inner loop,\nnotice that we've now, even if",
    "start": "1430610",
    "end": "1436460"
  },
  {
    "text": "I just have the lock and unlock\nwithout these two spurious ones here, we\nmay be more than",
    "start": "1436460",
    "end": "1443570"
  },
  {
    "text": "doubling the overhead. In fact, locking instructions\ntend to be much more expensive than register operations.",
    "start": "1443570",
    "end": "1450140"
  },
  {
    "text": "They usually cost something on\nthe order of going to L2 cache",
    "start": "1450140",
    "end": "1455770"
  },
  {
    "text": "as a minimum. So it's not even L1 cache. It's like going out\nto L2 cache.",
    "start": "1455770",
    "end": "1461730"
  },
  {
    "text": " Now, it turns out there\nare some times where",
    "start": "1461730",
    "end": "1467740"
  },
  {
    "text": "you have data races. So we say if there are no data\nraces, then you have no guarantee there's no bugs.",
    "start": "1467740",
    "end": "1474539"
  },
  {
    "text": "If there are data races, your\nprogram still may be correct.",
    "start": "1474540",
    "end": "1481440"
  },
  {
    "text": "Here's an example of a code\nwhere you might want to allow",
    "start": "1481440",
    "end": "1488350"
  },
  {
    "text": "a benign data race. So here we have, let's say,\nan array A that has these",
    "start": "1488350",
    "end": "1493470"
  },
  {
    "text": "elements in it. And we want to find,\nwhat is the set of digits in the array?",
    "start": "1493470",
    "end": "1499679"
  },
  {
    "text": "So these are all going to be\nvalues between 0 and 9. And I want to know which\nones are present of",
    "start": "1499680",
    "end": "1505200"
  },
  {
    "text": "the digits 0 to 9. Which ones are not present? So I can write a little\ncode for that.",
    "start": "1505200",
    "end": "1510710"
  },
  {
    "text": "Let me initialize an array\ncalled \"digits\" to have all-zero entries.",
    "start": "1510710",
    "end": "1516900"
  },
  {
    "text": "And now let me go through all\nthe elements of A and set",
    "start": "1516900",
    "end": "1524880"
  },
  {
    "text": "digits of whatever the\ndigit is to be 1. So set at 1 if that\ndigit is present.",
    "start": "1524880",
    "end": "1532920"
  },
  {
    "text": "And I can do that in\nparallel, even.  So what can happen here is I can\nhave, if I've done this in",
    "start": "1532920",
    "end": "1542500"
  },
  {
    "text": "parallel, this particular update\nof digits of 6 will be",
    "start": "1542500",
    "end": "1548580"
  },
  {
    "text": "set to 1 when this one\nis being sent to 1. Is that a problem?",
    "start": "1548580",
    "end": "1554060"
  },
  {
    "text": "In some sense, no. They're both being set to 1. Who cares? But there is a race there.",
    "start": "1554060",
    "end": "1561370"
  },
  {
    "text": "There is a race, but\nit's a benign race. Well, it may or may\nnot be benign.",
    "start": "1561370",
    "end": "1567370"
  },
  {
    "text": "So there's a gotcha\non this one. So this code only works\ncorrectly if the hardware",
    "start": "1567370",
    "end": "1575320"
  },
  {
    "text": "writes the array elements\natomically.  So for example, not\non the x86-64",
    "start": "1575320",
    "end": "1582610"
  },
  {
    "text": "architecture we're using. But on some architectures, you\ncannot write a byte value.",
    "start": "1582610",
    "end": "1589380"
  },
  {
    "text": "You cannot write a byte value\nas an atomic operation. It implements a right to a\nbyte by reading a word,",
    "start": "1589380",
    "end": "1597039"
  },
  {
    "text": "masking out things, changing the\nfield, masking again, and then writing it back out.",
    "start": "1597040",
    "end": "1602720"
  },
  {
    "text": "So you can have a race\non a byte value. In particular, even if I were\ngoing to do this with bits, I could have a race on bits,\nalthough C doesn't let me",
    "start": "1602720",
    "end": "1612360"
  },
  {
    "text": "access bits directly. The smallest unit I can\naccess is a byte.",
    "start": "1612360",
    "end": "1619670"
  },
  {
    "text": "So you have to worry about\nwhat's the level of atomicity provided by your architecture? So the x86 architecture, the\ngrain size of atomic update is",
    "start": "1619670",
    "end": "1629470"
  },
  {
    "text": "you can do a single-byte write,\nand it will do the right, proper thing-- do the right thing\non the write.",
    "start": "1629470",
    "end": "1637020"
  },
  {
    "text": "So we have both things. No bugs. No data races doesn't\nmean no bugs.",
    "start": "1637020",
    "end": "1643370"
  },
  {
    "text": "Presence of data races doesn't\nmean you have bugs. But generally, they're fairly\nwell overlapped.",
    "start": "1643370",
    "end": "1651000"
  },
  {
    "text": "Now, why would I not want to put\nin a lock and unlock here",
    "start": "1651000",
    "end": "1658740"
  },
  {
    "text": "just to get rid of the race? If I run Cilkscreen on this,\nit's going to complain. It's going to say, you've\ngot a race here.",
    "start": "1658740",
    "end": "1666820"
  },
  {
    "text": "Why would I not want to put a\nlock on here, for example? ",
    "start": "1666820",
    "end": "1673757"
  },
  {
    "text": "AUDIENCE: Because then we don't have parallelism anymore? PROFESSOR: No, well, I'd have\nparallelism maybe up to 10,",
    "start": "1673758",
    "end": "1680870"
  },
  {
    "text": "for example, right? Because I have 10 different\nthings that could be going on at a time.",
    "start": "1680870",
    "end": "1686510"
  },
  {
    "text": "But that's one reason. That is one reason. What's another reason why\nI might not want to",
    "start": "1686510",
    "end": "1692310"
  },
  {
    "text": "put locks in here? AUDIENCE: [INAUDIBLE] ",
    "start": "1692310",
    "end": "1698802"
  },
  {
    "text": "PROFESSOR: It could be that\nall the numbers-- that's a case where it doesn't\nget me much speedup.",
    "start": "1698802",
    "end": "1704760"
  },
  {
    "text": "But what's another reason\nI might want to do this? AUDIENCE: [INAUDIBLE] ",
    "start": "1704760",
    "end": "1711927"
  },
  {
    "text": "PROFESSOR: I think you're\non the right track. Overhead. Yeah. Overhead.",
    "start": "1711927",
    "end": "1717040"
  },
  {
    "text": "This is my inner loop. So if I'm locking and unlocking,\nall this is doing is just doing a memory\n[? dereference ?]",
    "start": "1717040",
    "end": "1724309"
  },
  {
    "text": "and an assignment. And that may be fairly cheap,\nwhereas if I grab a lock and",
    "start": "1724310",
    "end": "1729890"
  },
  {
    "text": "then release the lock, those\noperations may be much, much more expensive.",
    "start": "1729890",
    "end": "1735809"
  },
  {
    "text": "So I may be slowing down the\nexecution of this loop by more than I'm going to gain out of\nthe parallelism of this.",
    "start": "1735810",
    "end": "1745860"
  },
  {
    "text": "So I may say, I may reason, hey,\nthere is a good reason why not have a data\nrace there.",
    "start": "1745860",
    "end": "1754530"
  },
  {
    "text": " So I may want to have a data\nrace, and I may want",
    "start": "1754530",
    "end": "1761780"
  },
  {
    "text": "to say that's OK. And if that happens, however,\nyou're now going to get warnings out of Cilkscreen.",
    "start": "1761780",
    "end": "1767059"
  },
  {
    "text": "And I generally recommend that\nyou have no warnings on Cilkscreen when you\nrun your code.",
    "start": "1767060",
    "end": "1773610"
  },
  {
    "text": "So the Cilk environment provides\na mechanism called \"fake locks.\" So a fake lock\nallows you to communicate to",
    "start": "1773610",
    "end": "1785310"
  },
  {
    "text": "Cilkscreen that a race\nis intentional. So what you then do is you put\na fake lock in around this",
    "start": "1785310",
    "end": "1791460"
  },
  {
    "text": "access here. And what happens is when\nCilkscreen runs, it says, oh,",
    "start": "1791460",
    "end": "1796760"
  },
  {
    "text": "you grabbed this lock, so I\nshouldn't report a race. But during execution, no lock\nis actually grabbed, because",
    "start": "1796760",
    "end": "1808610"
  },
  {
    "text": "it's a fake one. So it doesn't slow you down it\nall at runtime, but Cilkscreen",
    "start": "1808610",
    "end": "1815470"
  },
  {
    "text": "still thinks that a lock\nis being acquired. Questions about that?",
    "start": "1815470",
    "end": "1821159"
  },
  {
    "text": "So this is if you want to have\nan intentional race, this is a way you can quiet Cilkscreen.",
    "start": "1821160",
    "end": "1826200"
  },
  {
    "text": "Of course, it's dangerous,\nright? It's yet another example of\nwhat's dangerous here.",
    "start": "1826200",
    "end": "1831610"
  },
  {
    "text": "Because what happens if\nyou did it wrong? What happens if there really\nis a bug there? You're now telling it\nto ignore that bug.",
    "start": "1831610",
    "end": "1838080"
  },
  {
    "text": "So one way that you can\nmake your code-- if you put in fake locks\neverywhere, you could make it",
    "start": "1838080",
    "end": "1844720"
  },
  {
    "text": "so, oh, Cilkscreen runs just\ngreat, and have your code full of race bugs. ",
    "start": "1844720",
    "end": "1851400"
  },
  {
    "text": "So if you use fake locks, you\nshould document very carefully that you're doing so and why\nthat's going to be a safe",
    "start": "1851400",
    "end": "1859340"
  },
  {
    "text": "thing to do. Any questions about that? ",
    "start": "1859340",
    "end": "1867676"
  },
  {
    "text": "By the way, one of the nice\nthings about some of the concurrency platforms like Cilk\nis that they provide a",
    "start": "1867676",
    "end": "1875240"
  },
  {
    "text": "layer of abstraction where\ngenerally, you don't have to do very much locking. If you program with Pthreads,\nfor example, you're locking",
    "start": "1875240",
    "end": "1882670"
  },
  {
    "text": "all the time. So you're writing\nnon-deterministic programs all the time, and you're debugging\nnon-deterministic",
    "start": "1882670",
    "end": "1889500"
  },
  {
    "text": "programs all the time. Whereas Cilk provides a layer\nof programming where you can do most of your programming in\na deterministic fashion.",
    "start": "1889500",
    "end": "1898040"
  },
  {
    "text": "And occasionally, you may want\nto have some non-determinism here or there. But hopefully you can manage\nthat if you do it judiciously.",
    "start": "1898040",
    "end": "1909580"
  },
  {
    "text": "Any questions about\nmutexes and uses for them and so forth?",
    "start": "1909580",
    "end": "1916140"
  },
  {
    "text": "Good. So let's talk about how\nthey get implemented. Because as with all these\nthings, we want to understand",
    "start": "1916140",
    "end": "1922900"
  },
  {
    "text": "not just what the abstractions\nis but how it is that you actually implement these things\nso that you can reason",
    "start": "1922900",
    "end": "1930280"
  },
  {
    "text": "about them more cogently. So there's typically three major\nproperties of mutexes",
    "start": "1930280",
    "end": "1939900"
  },
  {
    "text": "when you look at them. And when you see documentation\nfor mutexes, you should understand what the difference\nis of these things.",
    "start": "1939900",
    "end": "1946740"
  },
  {
    "text": "The first is whether it's\na yielding mutex or a spinning mutex.",
    "start": "1946740",
    "end": "1951850"
  },
  {
    "text": "So a yielding mutex, when you\nspin, it returns control to the operating system.",
    "start": "1951850",
    "end": "1957700"
  },
  {
    "text": "And why might you\nwant to do that? Whereas a spinning one just\nconsumes processor cycles.",
    "start": "1957700",
    "end": "1963700"
  },
  {
    "text": "Why would you want to do that?  Yeah. AUDIENCE: [INAUDIBLE]\nallow other threads.",
    "start": "1963700",
    "end": "1970360"
  },
  {
    "text": "PROFESSOR: Yeah, it can allow\nother threads or other jobs that could be running\nto use the processor",
    "start": "1970360",
    "end": "1976179"
  },
  {
    "text": "while you're waiting. What's the downside of that?  To speak to the-- either one.",
    "start": "1976180",
    "end": "1982289"
  },
  {
    "text": "Go ahead. AUDIENCE: It might be possible\nthat whatever you're trying to",
    "start": "1982290",
    "end": "1987945"
  },
  {
    "text": "do is essential, and you really\nwant to get that done [UNINTELLIGIBLE] everything\nelse executes.",
    "start": "1987945",
    "end": "1993268"
  },
  {
    "text": "So you really want [INAUDIBLE] PROFESSOR: Yeah, context\nswitching a thread out is a",
    "start": "1993268",
    "end": "1999760"
  },
  {
    "text": "heavyweight operation. And It may be, if you end up\ncontext switching out, it may",
    "start": "1999760",
    "end": "2005010"
  },
  {
    "text": "be you only had to wait for a\nhalf a dozen cycles and you'd have the lock.",
    "start": "2005010",
    "end": "2010480"
  },
  {
    "text": "But instead, now you're going\nand you're doing a context switch and may not get access\nto the machine for another",
    "start": "2010480",
    "end": "2016250"
  },
  {
    "text": "hundredth of a second\nor something. So it may be on the order of\n10 to the 6th-- a million",
    "start": "2016250",
    "end": "2023640"
  },
  {
    "text": "instructions before you\nget access again, rather than just a few.",
    "start": "2023640",
    "end": "2029500"
  },
  {
    "text": "The second property of mutexes\nis whether they're",
    "start": "2029500",
    "end": "2034520"
  },
  {
    "text": "reentrant or not. So a reenttrant mutex allows a\nthread that's holding a lock",
    "start": "2034520",
    "end": "2042549"
  },
  {
    "text": "to acquire it again. So I may hold the lock, and then\nI may try to acquire the",
    "start": "2042550",
    "end": "2048219"
  },
  {
    "text": "lock again. Java is full of reentrant locks,\nreentrant mutexes.",
    "start": "2048219",
    "end": "2059138"
  },
  {
    "text": "So why is this a positive\nor negative? What are the pros and\ncons of this one?",
    "start": "2059139",
    "end": "2066129"
  },
  {
    "text": "Why might reentrancy be\na good thing to want? ",
    "start": "2066130",
    "end": "2074690"
  },
  {
    "text": "Why would I bother doing-- why would I grab a lock\nthat I already have?",
    "start": "2074690",
    "end": "2082043"
  },
  {
    "text": "AUDIENCE: It'd be too easy to\ndo a check [INAUDIBLE]. PROFESSOR: It lets\nyou do what? AUDIENCE: It lets you not have\nto worry about locking when",
    "start": "2082043",
    "end": "2089491"
  },
  {
    "text": "you already have a lock. PROFESSOR: It lets you\nnot worry about it. That's right. But why is that valuable? AUDIENCE: It saves you one\nline in an If statment to",
    "start": "2089491",
    "end": "2095158"
  },
  {
    "text": "check if you have\na lock or not. PROFESSOR: That could be. Basically, the If statement\nis embedded in there.",
    "start": "2095159",
    "end": "2102319"
  },
  {
    "text": "But why would I care? Why would I want to be acquiring\nsomething that I already have? ",
    "start": "2102320",
    "end": "2109410"
  },
  {
    "text": "In what programming situation\nmight that arise? This seems kind of\nweird, right?",
    "start": "2109410",
    "end": "2115510"
  },
  {
    "text": "Could be recursion. Yeah. So usually, what it comes from\nis when you have objects, and",
    "start": "2115510",
    "end": "2120880"
  },
  {
    "text": "you have several methods\non the object. And what you'd like to do is,\nif somebody's calling the",
    "start": "2120880",
    "end": "2127070"
  },
  {
    "text": "method from the outside, you\nwould like to be able to",
    "start": "2127070",
    "end": "2133440"
  },
  {
    "text": "execute that particular-- I guess in C++ they don't call\nthem \"methods.\" They call them",
    "start": "2133440",
    "end": "2141650"
  },
  {
    "text": "\"member functions.\" \"Member\nfunctions,\" they call them. In Java, they call them\n\"methods,\" and in C++, they call them \"member functions.\"\nDoesn't matter.",
    "start": "2141650",
    "end": "2149020"
  },
  {
    "text": "It's the same thing. So when you access one of these,\nnormally, from the outside, you want to make sure\nyou grab the lock associated",
    "start": "2149020",
    "end": "2155940"
  },
  {
    "text": "with the object. However, it may be that what\nyou're doing inside the object is you want to be able--",
    "start": "2155940",
    "end": "2161880"
  },
  {
    "text": "one of the operations may be a\nmore complex operation that wants to use one of its\nown implementations.",
    "start": "2161880",
    "end": "2169840"
  },
  {
    "text": "So rather than implementing\nit twice-- once in the locked form, once\nwithout getting the lock--",
    "start": "2169840",
    "end": "2176559"
  },
  {
    "text": "you just implement it once, and\nyou use reentrant locks. And that way, you don't have\nto worry about, in coding",
    "start": "2176560",
    "end": "2183690"
  },
  {
    "text": "those things, whether or not\nyou've already got it. So that's probably the most\ncommon place that I know that",
    "start": "2183690",
    "end": "2189570"
  },
  {
    "text": "people want reentrant locks. Naturally, to acquire a\nreentrant lock, you have to do",
    "start": "2189570",
    "end": "2195420"
  },
  {
    "text": "some kind of If statement,\nwhich is a conditional. And as you know, if it's an\nunpredictable branch, that's",
    "start": "2195420",
    "end": "2201015"
  },
  {
    "text": "going to be very expensive. So generally, there is a cost\nto making it reentrant.",
    "start": "2201015",
    "end": "2210090"
  },
  {
    "text": "The third property is whether\nthe lock is fair or unfair.",
    "start": "2210090",
    "end": "2215640"
  },
  {
    "text": "So a fair mutex puts block\nthreads essentially into a FIFO queue.",
    "start": "2215640",
    "end": "2220970"
  },
  {
    "text": "And the unlock operation\nunblocks the thread that has been waiting the longest.",
    "start": "2220970",
    "end": "2226940"
  },
  {
    "text": "So it makes it so that if you\ntry to acquire a lock, you",
    "start": "2226940",
    "end": "2233450"
  },
  {
    "text": "don't have some other thread\ncoming in and trying to access that lock and getting\nahead of you.",
    "start": "2233450",
    "end": "2239000"
  },
  {
    "text": "It puts you in a queue. So an unfair mutex lets any\nblocked thread go next.",
    "start": "2239000",
    "end": "2244900"
  },
  {
    "text": " So the cheapest thing to\nimplement is a spinning,",
    "start": "2244900",
    "end": "2251030"
  },
  {
    "text": "non-reentrant, unfair lock-- mutex.",
    "start": "2251030",
    "end": "2256109"
  },
  {
    "text": "Those are the cheapest\nones to implement. Very lightweight, very\neasy to use. The heavyweight ones\nare a yielding,",
    "start": "2256110",
    "end": "2262270"
  },
  {
    "text": "reentrant, fair lock. And of course, you can have\ncombinations, because all of",
    "start": "2262270",
    "end": "2268130"
  },
  {
    "text": "these have, as you can see,\ndifferent properties in terms of convenience of use and\nso forth, as well",
    "start": "2268130",
    "end": "2275840"
  },
  {
    "text": "as different overheads. So there's some cases where the\noverhead isn't a big deal",
    "start": "2275840",
    "end": "2280950"
  },
  {
    "text": "because it's not in the inner\nloop of a program or a heavily executed statement.",
    "start": "2280950",
    "end": "2286910"
  },
  {
    "text": " So let's take a look at one of\nthe simplest locks, which is a",
    "start": "2286910",
    "end": "2292400"
  },
  {
    "text": "simple spinning mutex. This is the x86 code for\nhow to acquire a lock.",
    "start": "2292400",
    "end": "2300420"
  },
  {
    "text": " So let's run through this. So we start out at the top.",
    "start": "2300420",
    "end": "2306000"
  },
  {
    "text": "And I check to see if the\nmutex is 0, which is basically, it's going to be 0\nif it's free and 1 if it has",
    "start": "2306000",
    "end": "2312280"
  },
  {
    "text": "been acquired. So we compare it. If it's free, then I jump\nto try to get the mutex.",
    "start": "2312280",
    "end": "2321010"
  },
  {
    "text": "Otherwise, I execute this PAUSE\ninstruction, and this turns out to be a--",
    "start": "2321010",
    "end": "2326140"
  },
  {
    "text": "it's humorous. It's x86 hack to un-confuse\nthe pipeline. So it turns out that in this\ncase, if you don't have a",
    "start": "2326140",
    "end": "2333890"
  },
  {
    "text": "pause here-- which is no-op and\ndoes nothing-- x86 mispredicts something or\nwhatever, and it's more time",
    "start": "2333890",
    "end": "2344970"
  },
  {
    "text": "consuming than if it doesn't\nhave that there. The manual explains very little\nabout this hardware bug",
    "start": "2344970",
    "end": "2352290"
  },
  {
    "text": "except to say, put\nin the pause. So if you didn't get it, then\nyou jump to spin mutex, and",
    "start": "2352290",
    "end": "2357940"
  },
  {
    "text": "try again, check to\nsee if it's free. Now, notice that we're going to\nspin until it's free, and",
    "start": "2357940",
    "end": "2363890"
  },
  {
    "text": "then we're going to\ntry to get it. Why not just try to\nget it first? ",
    "start": "2363890",
    "end": "2374900"
  },
  {
    "text": "Well, think about that while we\ngo through how to get it, and then I'll ask it again. Think about why it is that you\nmight want to get it first.",
    "start": "2374900",
    "end": "2382310"
  },
  {
    "text": "So if I want to get the\nmutex, I first get a value of 1 in my register.",
    "start": "2382310",
    "end": "2390490"
  },
  {
    "text": "And then I compute this exchange\noperation, which exchanges the value of the mutex\nwith the value of the--",
    "start": "2390490",
    "end": "2401210"
  },
  {
    "text": "with the one that I have. So it exchanges the memory\nlocation with the register.",
    "start": "2401210",
    "end": "2406240"
  },
  {
    "text": "Now, this is an expensive\noperation-- exchange-- because it's an atomic exchange,\nand it typically has",
    "start": "2406240",
    "end": "2411970"
  },
  {
    "text": "to go at least out\nto L2 to do this. So it's an expensive operation,\nbecause it's a",
    "start": "2411970",
    "end": "2417809"
  },
  {
    "text": "read-modify-write operation. I'm swapping my register\nvalue with a value",
    "start": "2417810",
    "end": "2425280"
  },
  {
    "text": "that's in the mutex. ",
    "start": "2425280",
    "end": "2430490"
  },
  {
    "text": "So it turns out that if it's\n0, then it means I got it. ",
    "start": "2430490",
    "end": "2439730"
  },
  {
    "text": "So I compare it with 0, and if\nit's equal to 0, I go onto the critical section. When I'm done with the critical\nsection, I release",
    "start": "2439730",
    "end": "2447140"
  },
  {
    "text": "the mutex by basically storing\n0 in there, because I'm the only one who accesses the\nmutex at this point.",
    "start": "2447140",
    "end": "2454620"
  },
  {
    "text": "If I didn't get it, if the\nvalue is 1, notice that because I'm swapping a 1 in,\neven though the 1 got swapped",
    "start": "2454620",
    "end": "2462510"
  },
  {
    "text": "in, well, there was\na 1 there before. So it basically did not affect\nthe value of the mutex.",
    "start": "2462510",
    "end": "2468650"
  },
  {
    "text": "But I discover, oh,\nI don't have it. Then we go all the way back\nup there to spin mutex.",
    "start": "2468650",
    "end": "2474050"
  },
  {
    "text": "So here's the question. Why do I need all this\npreamble code? Why not just go straight to\nGet_Mutex, make the spin mutex",
    "start": "2474050",
    "end": "2481820"
  },
  {
    "text": "here be a jump to Get_Mutex? Yeah? AUDIENCE: Maybe it's because\nthe exchange is expensive.",
    "start": "2481820",
    "end": "2487945"
  },
  {
    "text": "PROFESSOR: Excuse me? AUDIENCE: The exchange is-- PROFESSOR: Yeah, because the\nexchange is expensive. Exactly. So this code here,\nI can compare.",
    "start": "2487945",
    "end": "2496190"
  },
  {
    "text": "And as long as nobody's touching\nanything, this becomes just L1 memory\naccesses.",
    "start": "2496190",
    "end": "2506950"
  },
  {
    "text": "Whereas here, it's going\nto be at least L2 to do the exchange operation.",
    "start": "2506950",
    "end": "2512790"
  },
  {
    "text": "So rather than doing that-- moreover, this one actually\nchanges the value.",
    "start": "2512790",
    "end": "2520290"
  },
  {
    "text": "So what happens when I change\nthe value of the mutex? Even though I change it to the\nsame value, what happens in",
    "start": "2520290",
    "end": "2525970"
  },
  {
    "text": "order to do that exchange? Remember from several\nlectures ago.",
    "start": "2525970",
    "end": "2533320"
  },
  {
    "text": "What's going to happen when\nI make an exchange there? What does the hardware\nhave to do? ",
    "start": "2533320",
    "end": "2543811"
  },
  {
    "text": "What's the hardware going to\ndo on any store to a shared memory location, to a memory\nlocation in shared memory that",
    "start": "2543811",
    "end": "2552380"
  },
  {
    "text": "is actually shared? Yeah? AUDIENCE: [INAUDIBLE] PROFESSOR: Yeah, it's\ngot to invalidate",
    "start": "2552380",
    "end": "2557890"
  },
  {
    "text": "all the other copies. So if everybody spinning here--\nimagine that you have",
    "start": "2557890",
    "end": "2563900"
  },
  {
    "text": "five guys spinning,\ndoing exchanges-- they're all creating all this\ntraffic of invalidations,",
    "start": "2563900",
    "end": "2573310"
  },
  {
    "text": "what's called an \"invalidation\nstorm.\" So they create an invalidation storm as they all\nare invalidating each other so",
    "start": "2573310",
    "end": "2579950"
  },
  {
    "text": "that they can get access to it\nso that they can change the value themselves.",
    "start": "2579950",
    "end": "2585240"
  },
  {
    "text": "But up here, all I'm doing\nis looking at the value. ",
    "start": "2585240",
    "end": "2590672"
  },
  {
    "text": "All I'm doing is looking at the\nvalue to see if it's free. And it's not until the guy\nactually frees the value that",
    "start": "2590672",
    "end": "2606675"
  },
  {
    "text": "it actually-- actually, this is interesting. I think I wrote this with Intel\nsyntax, rather than",
    "start": "2606675",
    "end": "2614470"
  },
  {
    "text": "AT&T, didn't I? The MOV mutex, 0 moves\n0 into the mutex,",
    "start": "2614470",
    "end": "2626020"
  },
  {
    "text": "which is Intel syntax. I probably should have converted\nthis to AT&T,",
    "start": "2626020",
    "end": "2631619"
  },
  {
    "text": "because that's what we're\ngenerally using in the class. I'll fix that before I\nput the slides up.",
    "start": "2631620",
    "end": "2638700"
  },
  {
    "text": "Basically, I pulled this out\nof the Intel manual. ",
    "start": "2638700",
    "end": "2643819"
  },
  {
    "text": "So any questions about\nthis code? Everybody see how it works? It relies on this atomic\nexchange operation.",
    "start": "2643820",
    "end": "2651610"
  },
  {
    "text": "And I'm going to end up sitting\nhere spinning until maybe I can get access to it.",
    "start": "2651610",
    "end": "2657330"
  },
  {
    "text": "When I have a chance to get\naccess to it, I try to get it. If I don't get it, I go\nback to spinning. ",
    "start": "2657330",
    "end": "2666690"
  },
  {
    "text": "How do I convert this\nto a yielding mutex? ",
    "start": "2666690",
    "end": "2675449"
  },
  {
    "text": "AUDIENCE: Instead\nof having that spinning mutex, you should--",
    "start": "2675449",
    "end": "2682295"
  },
  {
    "text": "you shouldn't have that. You should just have something\nthat allows you to just [INAUDIBLE]. PROFESSOR: Yeah, so actually,\nthe way you do it is you",
    "start": "2682295",
    "end": "2688910"
  },
  {
    "text": "replace the PAUSE instruction. Exactly what you're saying. You've got the right\nplace in the code. We basically call a yield.",
    "start": "2688910",
    "end": "2694865"
  },
  {
    "text": "And you can use, for example,\npthread_yield.  What it tells the operating\nsystem is,",
    "start": "2694865",
    "end": "2700770"
  },
  {
    "text": "give up on this quantum. You can schedule me out. Somebody else can\nbe scheduled. Now, if nobody else is there to\nbe scheduled, often you'll",
    "start": "2700770",
    "end": "2708830"
  },
  {
    "text": "just get control back, and\nyou'll jump again and give the operating system another time.",
    "start": "2708830",
    "end": "2714160"
  },
  {
    "text": " Now, one of the things I've seen\nin computer benchmarks",
    "start": "2714160",
    "end": "2723300"
  },
  {
    "text": "that use locking is that they\nall use spin locks.",
    "start": "2723300",
    "end": "2730470"
  },
  {
    "text": "They never use the yielding,\nbecause if you yield, then",
    "start": "2730470",
    "end": "2737880"
  },
  {
    "text": "when the lock comes free, you're\nnot going to be ready to come back in. You may be switched out.",
    "start": "2737880",
    "end": "2744470"
  },
  {
    "text": "So a common thing that all\nthese companies do when they're vying for who's got the\nfastest on this benchmark",
    "start": "2744470",
    "end": "2752319"
  },
  {
    "text": "or fastest on that benchmark\nis they go through and they convert all their yielding\nmutexes into spinning mutexes,",
    "start": "2752320",
    "end": "2761250"
  },
  {
    "text": "then take their measurements,\nwhen in fact, as a practical matter, they can't actually\nship code that way.",
    "start": "2761250",
    "end": "2768100"
  },
  {
    "text": "So you'll see this kind of game\nplayed where people try to get the best performance\nthey can in some kind of",
    "start": "2768100",
    "end": "2775330"
  },
  {
    "text": "laboratory setting. It's not the same as when\nyou're actually doing a real thing.",
    "start": "2775330",
    "end": "2782650"
  },
  {
    "text": "So you have a choice here. ",
    "start": "2782650",
    "end": "2789430"
  },
  {
    "text": "There's kind of a\ntension here. ",
    "start": "2789430",
    "end": "2795880"
  },
  {
    "text": "You'd like to claim the mutex\nsoon after it's released. And you're not going to\nget that if you yield.",
    "start": "2795880",
    "end": "2800885"
  },
  {
    "text": " At the same time, you want\nto behave nicely",
    "start": "2800885",
    "end": "2807080"
  },
  {
    "text": "and waste few cycles. So what's the strategy for being\nable to accomplish both",
    "start": "2807080",
    "end": "2815040"
  },
  {
    "text": "of these goals? So one of these goals is the\nspinning mutex does a great",
    "start": "2815040",
    "end": "2821090"
  },
  {
    "text": "job of claiming the mutex soon\nafter it's released. The yielding mutex behaves\nnicely and wastes few cycles.",
    "start": "2821090",
    "end": "2829630"
  },
  {
    "text": "Is there the best\nof both worlds? There's certainly the worst\nof both worlds, right? ",
    "start": "2829630",
    "end": "2835500"
  },
  {
    "text": "What's the best of\nboth worlds?  How might we accomplish both\nof these goals with small",
    "start": "2835500",
    "end": "2844910"
  },
  {
    "text": "modification to the\nlocking code? ",
    "start": "2844910",
    "end": "2856990"
  },
  {
    "text": "So it turns out you\ncan get within a factor of two of optimal. ",
    "start": "2856990",
    "end": "2867130"
  },
  {
    "text": "How might you do that while\nwasting few cycles?",
    "start": "2867130",
    "end": "2872444"
  },
  {
    "text": " So here's the idea.",
    "start": "2872445",
    "end": "2877920"
  },
  {
    "text": "Spin for a little while, and\nthen, if after a little while",
    "start": "2877920",
    "end": "2887030"
  },
  {
    "text": "you didn't manage to access\nthe mutex, then yield.",
    "start": "2887030",
    "end": "2894480"
  },
  {
    "text": "So that if the new mutex was\nright there available to be accessed, you could access it,\nbut you don't spin for an",
    "start": "2894480",
    "end": "2900099"
  },
  {
    "text": "indefinite amount of time. So the question is, how\nlong do you spin?",
    "start": "2900100",
    "end": "2907490"
  },
  {
    "text": "So we're going to spin for a\nlittle while and then yield. Yeah? AUDIENCE: [INAUDIBLE].",
    "start": "2907490",
    "end": "2912760"
  },
  {
    "text": "PROFESSOR: Yeah, exactly. So what you do is you spin for\nbasically as long as a context",
    "start": "2912760",
    "end": "2918700"
  },
  {
    "text": "switch takes.  So if you spin for as long as\nit takes to do a context",
    "start": "2918700",
    "end": "2924760"
  },
  {
    "text": "switch and then do a context\nswitch, if the mutex became immediately available, well,\nyou're only going to wait",
    "start": "2924760",
    "end": "2931530"
  },
  {
    "text": "double what you would\nhave waited.  And if in the meantime during\nthat first part where you're",
    "start": "2931530",
    "end": "2939010"
  },
  {
    "text": "spinning it becomes available,\nyou're not waiting at all any longer than you actually\nhave to. So in both cases, you're\nwaiting at",
    "start": "2939010",
    "end": "2945710"
  },
  {
    "text": "most a factor of two. In one case, you're waiting\nexactly the right. The other, you can actually\nwait a factor of two.",
    "start": "2945710",
    "end": "2952510"
  },
  {
    "text": "So this is a classic amortized\nkind of argument, that you can",
    "start": "2952510",
    "end": "2958220"
  },
  {
    "text": "amortize the cost\nof the spinning to the context switch. So spin until you spend as much\ntime as it would cost for",
    "start": "2958220",
    "end": "2965859"
  },
  {
    "text": "a context switch. Then do the context switch. Yet another voodoo parameter.",
    "start": "2965860",
    "end": "2971380"
  },
  {
    "start": "2971380",
    "end": "2977440"
  },
  {
    "text": "Yeah, so if the mutex is\nreleased while spinning, that's optimal. If the mutex is released\nafter the yield, you're",
    "start": "2977440",
    "end": "2984280"
  },
  {
    "text": "within twice optimal.  Turns out that 2 is not\nthe optimal value.",
    "start": "2984280",
    "end": "2992820"
  },
  {
    "text": "There's a randomized algorithm\nthat makes it e over e minus 1 competitive where e is the base\nof the natural logarithm.",
    "start": "2992820",
    "end": "3002029"
  },
  {
    "text": " So 2.7 divided by 1.7,\nwhich is what?",
    "start": "3002030",
    "end": "3012990"
  },
  {
    "text": "Who's got a calculator? 2.7 divided by 1.7 is-- I should have calculated\nthis out.",
    "start": "3012990",
    "end": "3018760"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: It's about 1.6. Good. So it's better than 2. ",
    "start": "3018760",
    "end": "3026980"
  },
  {
    "text": "People analyze these\nthings, right? So any questions about\nimplementation of locks?",
    "start": "3026980",
    "end": "3034250"
  },
  {
    "text": "There are many other ways\nof implementing locks. There are other instructions\nthat people use. They do things like\ncompare-and-swap is another",
    "start": "3034250",
    "end": "3042780"
  },
  {
    "text": "operation that's used. There are some machines have\nan operation called load-linked/store-conditional,\nwhich is not on the x86",
    "start": "3042780",
    "end": "3051290"
  },
  {
    "text": "architecture, but it is on\nother architectures. You'll see a lot of other things\nof doing some kind of atomic operation to\nimplement a lock.",
    "start": "3051290",
    "end": "3059130"
  },
  {
    "text": "Uniformly, they're expensive\ncompared to register operations in particular or even\nL1 accesses, typically,",
    "start": "3059130",
    "end": "3066160"
  },
  {
    "text": "in particular. Any questions? ",
    "start": "3066160",
    "end": "3072860"
  },
  {
    "text": "So now that we've decided that\nwe're going to use mutexes, and we understand we're writing\nnon-deterministic code",
    "start": "3072860",
    "end": "3079330"
  },
  {
    "text": "and so forth, well, it turns out\nthere are a host of other system anomalies that occur.",
    "start": "3079330",
    "end": "3084520"
  },
  {
    "text": "So locks are like, they're this\nreally evil mechanism that works really well.",
    "start": "3084520",
    "end": "3091360"
  },
  {
    "text": "It feels so good that\nnobody wants to stop using it, even though--",
    "start": "3091360",
    "end": "3096510"
  },
  {
    "text": "but nobody has better ideas. One of the most interesting\nideas in recent memory is the",
    "start": "3096510",
    "end": "3102440"
  },
  {
    "text": "idea of using what's called\n\"transactional memory,\" which is basically where memory\noperates like a database",
    "start": "3102440",
    "end": "3108800"
  },
  {
    "text": "transaction. And it's allowed to abort, in\nwhich case you roll it back and retry it.",
    "start": "3108800",
    "end": "3115520"
  },
  {
    "text": "Yet, transactional memory has a\nhost of issues with it, and still people use locks.",
    "start": "3115520",
    "end": "3120530"
  },
  {
    "start": "3120530",
    "end": "3126170"
  },
  {
    "text": "So let's talk about some of\nthe bad things that happen when you start doing locks. I'm going to talk about three of\nthem, deadlock, convoying,",
    "start": "3126170",
    "end": "3135430"
  },
  {
    "text": "and contention. So deadlock is probably the most\nimportant one, because it",
    "start": "3135430",
    "end": "3142760"
  },
  {
    "text": "has to do with correctness. So you can have coded-- in fact,\nI've seen people with very fast code that has deadlock\npotential in it.",
    "start": "3142760",
    "end": "3151360"
  },
  {
    "text": "It's like, if you deadlock, then\nyour average running time is infinite if there's\na possibility",
    "start": "3151360",
    "end": "3157860"
  },
  {
    "text": "of a deadlock, right? Because you're averaging\ninfinity with everything else that you might run.",
    "start": "3157860",
    "end": "3164410"
  },
  {
    "text": "So it's not good to have\ndeadlock in your code, regardless.",
    "start": "3164410",
    "end": "3170400"
  },
  {
    "text": "It's kind of like your\ncode seg faulting. No decent code should\nseg fault. It should always catch its\nown errors and terminate",
    "start": "3170400",
    "end": "3178290"
  },
  {
    "text": "gracefully. It shouldn't just seg fault\nin some circumstance. Similarly, your code should\nnot deadlock.",
    "start": "3178290",
    "end": "3184295"
  },
  {
    "text": " So here's sort of a classical\ninstance of deadlock.",
    "start": "3184295",
    "end": "3192540"
  },
  {
    "text": "And deadlock typically occurs\nwhen you hold more than one lock at a time.",
    "start": "3192540",
    "end": "3198670"
  },
  {
    "text": "So here, this guy is going to\ngrab a lock A, going to grab a",
    "start": "3198670",
    "end": "3207250"
  },
  {
    "text": "lock B, then unlock B, unlock\nA, and in there do a critical section. Why might I grab two locks?",
    "start": "3207250",
    "end": "3214650"
  },
  {
    "text": "What's the circumstance where I\nmight have code that looked very similar to this?",
    "start": "3214650",
    "end": "3220480"
  },
  {
    "text": "Use case. AUDIENCE: Two objects? PROFESSOR: sorry? AUDIENCE: You need\ntwo objects. PROFESSOR: You need\ntwo objects. When might that occur?",
    "start": "3220480",
    "end": "3226680"
  },
  {
    "text": " AUDIENCE: Account\ntransactions.",
    "start": "3226680",
    "end": "3231827"
  },
  {
    "text": "PROFESSOR: Yeah, account\ntransactions. That's the classic one. You want to move something from\nthis bank account to that",
    "start": "3231827",
    "end": "3239060"
  },
  {
    "text": "bank account. And you want to make sure that\nas you're updating it, nothing else is occurring.",
    "start": "3239060",
    "end": "3244109"
  },
  {
    "text": "Another place this comes up all\nthe time is when you do graph algorithms. You always want to grab the edge\nand have the two vertices",
    "start": "3244110",
    "end": "3252140"
  },
  {
    "text": "on each end of the edge not move\nwhile you do something across the edge. So lots of cases there.",
    "start": "3252140",
    "end": "3259869"
  },
  {
    "text": "It turns out the order in\nwhich you unlock things doesn't matter, because you can\nalways unlock something.",
    "start": "3259870",
    "end": "3266240"
  },
  {
    "text": "You never hold up\nfor unlocking. The problem with deadlock\nis generally how you acquire locks.",
    "start": "3266240",
    "end": "3271660"
  },
  {
    "text": "So in this example, Thread 2\ngrabs Lock B, then grabs Lock A. So it might be, for example,\nthat you have some",
    "start": "3271660",
    "end": "3279290"
  },
  {
    "text": "random process that's at\nthe node of a graph. And now it's going to\ngrab a lock on the",
    "start": "3279290",
    "end": "3284440"
  },
  {
    "text": "other end of an edge. But you might have the guy at\nthe other end grabbing that vertex and then grabbing\nthe one on your end.",
    "start": "3284440",
    "end": "3292850"
  },
  {
    "text": "And that's basically\nthe situation. So what happens is Thread\n1 acquires a lock here.",
    "start": "3292850",
    "end": "3299990"
  },
  {
    "text": "Thread 2 acquires that lock. And now which one can go? Neither of them.",
    "start": "3299990",
    "end": "3305549"
  },
  {
    "text": "You've got a deadlock. Ultimate loss of performance.",
    "start": "3305550",
    "end": "3311060"
  },
  {
    "text": "So it's really a correctness\nissue. But you can view it, if you\nreally say, oh, correctness,",
    "start": "3311060",
    "end": "3316210"
  },
  {
    "text": "that's for sissies. We do performance. Well, it's still a performance\nissue, because it's the",
    "start": "3316210",
    "end": "3323630"
  },
  {
    "text": "ultimate loss of performance. In fact, that's probably true\nof any correctness issue. No, that's not true. Sometimes you just get\nthe wrong number.",
    "start": "3323630",
    "end": "3330700"
  },
  {
    "text": "Here is a correctness\nissue that your code stops operating. ",
    "start": "3330700",
    "end": "3337710"
  },
  {
    "text": "So there are three conditions\nthat are usually pointed to that you need for deadlock.",
    "start": "3337710",
    "end": "3343319"
  },
  {
    "text": "The first is mutual exclusion. Each thread claims exclusive\ncontrol over the resources",
    "start": "3343320",
    "end": "3349340"
  },
  {
    "text": "that it holds, in this case, the\nresources being the locks.",
    "start": "3349340",
    "end": "3355540"
  },
  {
    "text": "So there's got to be some\nresource that you're grabbing, and that you're the only one\nwho gets to have it.",
    "start": "3355540",
    "end": "3360839"
  },
  {
    "text": "So in this case, it would\nbe the locks. The second is non-preemption.",
    "start": "3360840",
    "end": "3366310"
  },
  {
    "text": "You don't let go of your\nresources until you complete your use of them.",
    "start": "3366310",
    "end": "3372369"
  },
  {
    "text": "So that means you can't let go\nof a lock in a situation.",
    "start": "3372370",
    "end": "3378840"
  },
  {
    "text": "If you're actually\nable to preempt-- so this piece of code over there\nhas grabbed locks, and",
    "start": "3378840",
    "end": "3386020"
  },
  {
    "text": "now I can come in and take them\naway, then you may not have a deadlock potential. You may have other issues,\nbut you won't",
    "start": "3386020",
    "end": "3391560"
  },
  {
    "text": "have a deadlock potential. And the third one is\ncircular waiting. You have a cycle of threads in\nwhich each thread is blocked",
    "start": "3391560",
    "end": "3399430"
  },
  {
    "text": "waiting for resources held by\nthe next thread in the cycle.",
    "start": "3399430",
    "end": "3404790"
  },
  {
    "text": "So let me illustrate this with\na very famous story that some of you may have seen, because\nit is so famous.",
    "start": "3404790",
    "end": "3412900"
  },
  {
    "text": "It's the dining philosophers\nproblem. It's an illustrative story a\ndeadlock that was originally",
    "start": "3412900",
    "end": "3418890"
  },
  {
    "text": "told by Tony Hoare, based on\nan examination question by Edsger Dijkstra.",
    "start": "3418890",
    "end": "3425160"
  },
  {
    "text": "And the story has been\nembellished over the years by many retellers. It's one of these things that\nif you're a computer",
    "start": "3425160",
    "end": "3430610"
  },
  {
    "text": "scientist, you should know\nthis story just because everybody knows this story.",
    "start": "3430610",
    "end": "3436130"
  },
  {
    "text": "So here's how the story goes,\nat least my version of it. I get to retell it now.",
    "start": "3436130",
    "end": "3441810"
  },
  {
    "text": "So each of n philosophers needs\nthe two chopsticks on either side of his or\nher plate to eat the",
    "start": "3441810",
    "end": "3449500"
  },
  {
    "text": "noodles on the plate. So they're not worried about\ngerms here, by the way.",
    "start": "3449500",
    "end": "3455940"
  },
  {
    "text": "So you have five philosophers\nin this case sitting around the table. There are five chopsticks\nbetween them.",
    "start": "3455940",
    "end": "3462470"
  },
  {
    "text": "In order to eat, they need to\ngrab the two chopsticks on either side. Then they can eat.",
    "start": "3462470",
    "end": "3468200"
  },
  {
    "text": "Then they put them down. So here's what philosopher\ni does.",
    "start": "3468200",
    "end": "3476310"
  },
  {
    "text": "So in an infinite loop, the\nphilosopher does thinking,",
    "start": "3476310",
    "end": "3482220"
  },
  {
    "text": "because that's what\nphilosophers do. Then it grabs the lock of\nchopstick i and grabs the lock",
    "start": "3482220",
    "end": "3494660"
  },
  {
    "text": "of chopstick i plus 1. That's the 1. So if we index them, say, to the\nleft of the plate, this is",
    "start": "3494660",
    "end": "3499850"
  },
  {
    "text": "grabbing the chopstick to\nthe left of your plate. This is grabbing the chopstick\nto the right of your plate.",
    "start": "3499850",
    "end": "3504930"
  },
  {
    "text": "Then you can eat. Then you release your\ntwo chopsticks. ",
    "start": "3504930",
    "end": "3510810"
  },
  {
    "text": "So here, that's the code. And then you go back\nto thinking. ",
    "start": "3510810",
    "end": "3516900"
  },
  {
    "text": "I guess they have no other\nbodily functions. ",
    "start": "3516900",
    "end": "3521990"
  },
  {
    "text": "So the problem is, one day they\nall pick up their left chopsticks simultaneously. ",
    "start": "3521990",
    "end": "3530200"
  },
  {
    "text": "Now they go to look for\ntheir right chopstick. It's not there. So what happens? ",
    "start": "3530200",
    "end": "3537150"
  },
  {
    "text": "They starve because their code\ndoesn't let them release--",
    "start": "3537150",
    "end": "3544520"
  },
  {
    "text": "there's no preemption, so they\ncan't release the chopstick they've already got. ",
    "start": "3544520",
    "end": "3551510"
  },
  {
    "text": "And we have a circular\nwaiting. They have mutual exclusion. Only one of them can have\na chopstick at a time.",
    "start": "3551510",
    "end": "3556569"
  },
  {
    "text": "And we have a circular waiting\nthing, because everyone is waiting for the philosopher\non the right.",
    "start": "3556570",
    "end": "3564320"
  },
  {
    "text": "Is that clear to everybody? That's the dining philosophers\nproblem. How do you fix this problem? ",
    "start": "3564320",
    "end": "3571420"
  },
  {
    "text": "What are solutions to\nfixing this problem? ",
    "start": "3571420",
    "end": "3579390"
  },
  {
    "text": "The problem being that you'd\nlike them to eat indefinitely. AUDIENCE: You can index the\nchopstick and say that",
    "start": "3579390",
    "end": "3585401"
  },
  {
    "text": "[INAUDIBLE]. PROFESSOR: Yeah, you can pick\nthe smaller index first. So in general, that means\neverybody would grab the one",
    "start": "3585401",
    "end": "3592330"
  },
  {
    "text": "on their left, then the one on\ntheir right, except for the guy who's going between\n0 and n minus 1.",
    "start": "3592330",
    "end": "3600660"
  },
  {
    "text": "They would do n minus\n1 and then 0. They would do n minus\n1 first, and then 0.",
    "start": "3600660",
    "end": "3608260"
  },
  {
    "text": "Sorry. They would do 0 first,\nand then n minus 1. [INAUDIBLE] Let me say that more\nprecisely.",
    "start": "3608260",
    "end": "3614359"
  },
  {
    "text": "So this is a classic way\nto prevent deadlock. Suppose that we can linearly\norder the mutexes in some",
    "start": "3614360",
    "end": "3622510"
  },
  {
    "text": "order so that whenever a thread\nthat holds a mutex Li and attempts to lock another\nmutex Lj, we have it that Li",
    "start": "3622510",
    "end": "3632359"
  },
  {
    "text": "goes before Lj in\nthe ordering. Then no deadlock can occur. ",
    "start": "3632360",
    "end": "3639890"
  },
  {
    "text": "So always grab the resource so\nif they can all order the",
    "start": "3639890",
    "end": "3644920"
  },
  {
    "text": "resources-- so they're always grabbing them\nin some subsequence of",
    "start": "3644920",
    "end": "3650320"
  },
  {
    "text": "this order, so they're always\ngrabbing one that's larger and larger and larger, and you're\nnever going back and grabbing",
    "start": "3650320",
    "end": "3656859"
  },
  {
    "text": "one smaller, than you\nhave no deadlock. Here's why. Suppose you have a\ncycle of waiting.",
    "start": "3656860",
    "end": "3663010"
  },
  {
    "text": "You have a deadlock\nhas occurred. Let's look at the thread in\nthe cycle that holds the largest mutex that's called\nLmax in the ordering.",
    "start": "3663010",
    "end": "3670710"
  },
  {
    "text": "So whatever is in\nthe ordering. And suppose that it's waiting on\na mutex L held by the next",
    "start": "3670710",
    "end": "3676380"
  },
  {
    "text": "threat in the cycle. That's the condition. Well, then it must be that Lmax\nfalls before L, because",
    "start": "3676380",
    "end": "3683269"
  },
  {
    "text": "we're gathering them always\nin an increasing order. But that contradicts the fact\nthat Lmax is the largest.",
    "start": "3683270",
    "end": "3692210"
  },
  {
    "text": "So a deadlock cannot occur.  Questions?",
    "start": "3692210",
    "end": "3698180"
  },
  {
    "start": "3698180",
    "end": "3705430"
  },
  {
    "text": "Is this clear? Who's seen this before? A few people. OK.",
    "start": "3705430",
    "end": "3711030"
  },
  {
    "text": " Is this clear? So if you grab them in\nincreasing order, then there's",
    "start": "3711030",
    "end": "3716900"
  },
  {
    "text": "always some guy that has the\nlargest one, and nobody is holding one larger. So he can always grab\nthe next one.",
    "start": "3716900",
    "end": "3725770"
  },
  {
    "text": "So in this case of the dining\nphilosophers, what we can do",
    "start": "3725770",
    "end": "3734110"
  },
  {
    "text": "is grab the minimum of i and\ni plus 1 mod n and then the",
    "start": "3734110",
    "end": "3742840"
  },
  {
    "text": "maximum of i and\ni plus 1 mod n. That gives us the same\ntwo chopsticks.",
    "start": "3742840",
    "end": "3748890"
  },
  {
    "text": "And in fact, for most of the\nphilosophers, it's exactly the same order. But for one guy, it's\na different order.",
    "start": "3748890",
    "end": "3756830"
  },
  {
    "text": "It ends up being the guy who\nwould normally have done n",
    "start": "3756830",
    "end": "3762030"
  },
  {
    "text": "minus 1 and 0. Instead, he does 0, n minus 1. So in some sense, it's like\nhaving a left-handed",
    "start": "3762030",
    "end": "3767350"
  },
  {
    "text": "person at the table. You grab your left, then your\nright, except for one guy does right and then left.",
    "start": "3767350",
    "end": "3774030"
  },
  {
    "text": "And that fixes it, OK? That fixes it. ",
    "start": "3774030",
    "end": "3781060"
  },
  {
    "text": "Good. So that's basically the dining\nphilosophers problem. That's one way of fixing it. There are actually other\nways of doing it.",
    "start": "3781060",
    "end": "3787150"
  },
  {
    "text": "One of the problems with this\nparticular solution is you still can have a long\nchain of waiting. ",
    "start": "3787150",
    "end": "3793710"
  },
  {
    "text": "So there are other schemes that\nyou can use where, for example, if every other one\ngrabs left and then right and",
    "start": "3793710",
    "end": "3800700"
  },
  {
    "text": "then right and then left and\nthen left and then right and then right and left and so\nforth, you can end up making",
    "start": "3800700",
    "end": "3808950"
  },
  {
    "text": "it so that nobody has to\nwait to go all the way around the circle. Yeah? AUDIENCE: [INAUDIBLE]",
    "start": "3808950",
    "end": "3814528"
  },
  {
    "text": " PROFESSOR: Well, that would be\na preemption type of thing,",
    "start": "3814528",
    "end": "3820579"
  },
  {
    "text": "where I grab one, and if I\ndidn't get it in time, I release it and then try again. When you have something like\nthat, there's an issue.",
    "start": "3820580",
    "end": "3828120"
  },
  {
    "text": "It's, how do you set\nthe timeout amount? And the second issue that you\nget into when you do timeouts",
    "start": "3828120",
    "end": "3833980"
  },
  {
    "text": "is, how do you know you don't\nthen repeat exactly the same thing and convert a\ndeadlock situation",
    "start": "3833980",
    "end": "3840810"
  },
  {
    "text": "into a livelock situation? So a livelock situation is\nwhere they're not making progress, but they're all\nbusily working, thinking",
    "start": "3840810",
    "end": "3847480"
  },
  {
    "text": "they're making progress. So you timeout. Let's try again. What makes you think that the\nguys that are deadlocking",
    "start": "3847480",
    "end": "3854530"
  },
  {
    "text": "aren't going to do exactly\nthe same thing. AUDIENCE: [INAUDIBLE] PROFESSOR: And exactly.",
    "start": "3854530",
    "end": "3859680"
  },
  {
    "text": "And in fact, that's actually\na workable scheme. And there are schemes\nthat do it. Now, that's much more\ncomplicated.",
    "start": "3859680",
    "end": "3867240"
  },
  {
    "text": "Sometimes has more overhead,\nespecially because things become available. And it's like, no, you're busy\nraiding some random amount of",
    "start": "3867240",
    "end": "3875359"
  },
  {
    "text": "time before you try again. So this is, by the way, the\nprotocol that is used on the",
    "start": "3875360",
    "end": "3880590"
  },
  {
    "text": "Ethernet for doing contention\nresolution.",
    "start": "3880590",
    "end": "3885630"
  },
  {
    "text": "It's what's called \"exponential\nbackoff.\" And various backoff schemes are\nused in order to allow",
    "start": "3885630",
    "end": "3895190"
  },
  {
    "text": "multiple things acquire\nmutually-exclusive access to something without having to\nhave a definite ordering.",
    "start": "3895190",
    "end": "3902960"
  },
  {
    "text": "So there are solutions, but\nthey definitely get more heavyweight. It's not lightweight.",
    "start": "3902960",
    "end": "3909080"
  },
  {
    "text": "Whereas if you can prevent\ndeadlock, that's really good, because you just simply\ndo the natural thing.",
    "start": "3909080",
    "end": "3916900"
  },
  {
    "text": "And that tends to\nbe pretty quick. But yeah, all I'm doing is\nsort of covering the",
    "start": "3916900",
    "end": "3924950"
  },
  {
    "text": "introduction to all\nthese things. There are books written on\nthis type of subject.",
    "start": "3924950",
    "end": "3930150"
  },
  {
    "text": "Any other questions about\ndining philosophers and deadlock and so forth?",
    "start": "3930150",
    "end": "3936630"
  },
  {
    "text": "Now let me tell you how\nto deadlock Cilk++. ",
    "start": "3936630",
    "end": "3942680"
  },
  {
    "text": "So here's a code that\nwill deadlock Cilk++, or has the potential.",
    "start": "3942680",
    "end": "3948240"
  },
  {
    "text": "You might run it a bunch of\ntimes, it looks fine.  Here's what we've done is\nmain routine spawns foo.",
    "start": "3948240",
    "end": "3956330"
  },
  {
    "text": "Here's foo down here. All foo does is grab a lock\nand then unlocks it. Empty critical section.",
    "start": "3956330",
    "end": "3962500"
  },
  {
    "text": "It could do something\nin there. It doesn't matter. Then the main grabs a lock,\ndoes a cilk_sync and then",
    "start": "3962500",
    "end": "3969460"
  },
  {
    "text": "unlocks it. So what can go wrong here?",
    "start": "3969460",
    "end": "3975420"
  },
  {
    "text": "Notice, by the way, this\nis only one lock, L. There's not two locks.",
    "start": "3975420",
    "end": "3982730"
  },
  {
    "text": "So you can deadlock Cilk by\njust introducing one lock. So here's sort of\nwhat's going on.",
    "start": "3982730",
    "end": "3988890"
  },
  {
    "text": "Let's let this be the main\nthread and this be foo. And this will represent\na lock acquire, and",
    "start": "3988890",
    "end": "3995779"
  },
  {
    "text": "this is a lock release. So what happens is we\nperform the lock acquire here in the parent.",
    "start": "3995780",
    "end": "4003970"
  },
  {
    "text": "First, we spawned here, then\nwe acquire the lock here. And now foo tries to get access\nto the lock, and it",
    "start": "4003970",
    "end": "4012300"
  },
  {
    "text": "can't because why? The main routine has the lock.",
    "start": "4012300",
    "end": "4018570"
  },
  {
    "text": "Now what happens? The main routine proceeds to the\nsync, and what does it do",
    "start": "4018570",
    "end": "4023750"
  },
  {
    "text": "at the sync?  It waits for all children\nto be done.",
    "start": "4023750",
    "end": "4029960"
  },
  {
    "text": " And notice now we've created a\ncycle of waiting, even though",
    "start": "4029960",
    "end": "4035420"
  },
  {
    "text": "we didn't use a lock. Main waits, but foo is never\ngoing to complete, because",
    "start": "4035420",
    "end": "4040579"
  },
  {
    "text": "it's waiting for the main thread\nto release it, the main strand here to release it,\nthe main function here.",
    "start": "4040580",
    "end": "4046722"
  },
  {
    "text": "Is that clear? So you can deadlock Cilk too\nby doing non-deterministic",
    "start": "4046722",
    "end": "4053830"
  },
  {
    "text": "programming. So here's the methodology that\nwill help you not do that.",
    "start": "4053830",
    "end": "4060660"
  },
  {
    "text": "So what's bad here? What's bad is holding the\nlock across the sync.",
    "start": "4060660",
    "end": "4066430"
  },
  {
    "text": "That's bad. So don't do that. Doctor, my head hurts.",
    "start": "4066430",
    "end": "4072880"
  },
  {
    "text": "Well, stop hitting it. ",
    "start": "4072880",
    "end": "4079119"
  },
  {
    "text": "So don't hold mutexes\nacross Cilk syncs. Hold mutexes only within\nstrands, only with",
    "start": "4079120",
    "end": "4086289"
  },
  {
    "text": "serially-executing\npieces of code. Now, it turns out that you can\nhold it across syncs and so",
    "start": "4086290",
    "end": "4093780"
  },
  {
    "text": "forth, but you have\nto be careful. And I'm not going to get\ninto the details of",
    "start": "4093780",
    "end": "4099389"
  },
  {
    "text": "how you can do that. If you want to figure that out\non your own, that's fine. And then you're welcome\nto try to do that",
    "start": "4099390",
    "end": "4105720"
  },
  {
    "text": "without deadlocking something. Turns out, basically, if you\ngrab the lock before you do",
    "start": "4105720",
    "end": "4112380"
  },
  {
    "text": "any spawns, and then released\nit after the Cilk sync, you're OK. ",
    "start": "4112380",
    "end": "4120020"
  },
  {
    "text": "You're generally, in\nthat case, OK. ",
    "start": "4120020",
    "end": "4127710"
  },
  {
    "text": "So as always, try to avoid using\nmutexes, but that's not always possible. In other words, try to do\ndeterministic programming.",
    "start": "4127710",
    "end": "4134259"
  },
  {
    "text": "That helps too. And on your homework, you had an\nexample of where it is that",
    "start": "4134260",
    "end": "4141720"
  },
  {
    "text": "deterministic programming can\nactually do a pretty good job.",
    "start": "4141720",
    "end": "4148189"
  },
  {
    "text": "The next anomaly I want to\ntalk about is convoying. Once again, another thing\nthat can happen.",
    "start": "4148189",
    "end": "4153620"
  },
  {
    "text": "This one is actually quite an\nembarrassment, because the original MIT Cilk system that\nwe built had this bug in it.",
    "start": "4153620",
    "end": "4162759"
  },
  {
    "text": "So we had this bug. So let me show you what it is. So here's the idea.",
    "start": "4162760",
    "end": "4168599"
  },
  {
    "text": "We're using random work-stealing\nwhere each thief grabs a mutex on its\nvictim's deck. So in order to steal from a\nvictim, it grabs a mutex on",
    "start": "4168600",
    "end": "4178329"
  },
  {
    "text": "the victim. And now, once it's got the\nmutex, it now is in a position to migrate the work that's\non that victim to",
    "start": "4178330",
    "end": "4186960"
  },
  {
    "text": "actually steal the work. And you want to do\nthat atomically. You don't want two guys getting\nin there trying to steal from each other.",
    "start": "4186960",
    "end": "4194219"
  },
  {
    "text": "So if the victim's deck is\nempty, the thief releases the mutex and tries again\nat random.",
    "start": "4194220",
    "end": "4199770"
  },
  {
    "text": "That makes sense. If there's nothing there to be\nstolen, then just released the mutex and move on.",
    "start": "4199770",
    "end": "4206199"
  },
  {
    "text": "If the victim's deck contains\nwork, the thief then steals the topmost frame and then\nreleases the mutex. ",
    "start": "4206200",
    "end": "4213400"
  },
  {
    "text": "Where's the performance\nbug here? ",
    "start": "4213400",
    "end": "4219760"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] trying to steal from\neach other. Like A steals from B, B steals\nfrom C, C steals from D, and",
    "start": "4219760",
    "end": "4227065"
  },
  {
    "text": "they all have locks on each\nother, and then-- PROFESSOR: No, because in that\ncase, they'll each grab the deck from each other, discover\nit's empty, and release it.",
    "start": "4227065",
    "end": "4234440"
  },
  {
    "text": " OK, let me show the bug.",
    "start": "4234440",
    "end": "4239720"
  },
  {
    "text": "It is very subtle. As I say, we didn't realize we\nhad this bug until we noticed",
    "start": "4239720",
    "end": "4245810"
  },
  {
    "text": "some codes on which we\nweren't getting the speedups we were expecting. Let me show you where\nthis bug comes from.",
    "start": "4245810",
    "end": "4251830"
  },
  {
    "text": "Here's the problem. At the startup, most thieves\nwill quickly converge on the",
    "start": "4251830",
    "end": "4256850"
  },
  {
    "text": "worker P0 containing\nthe initial strand, creating a convoy.",
    "start": "4256850",
    "end": "4262719"
  },
  {
    "text": "So let me show you\nhow that happens. So here we have the startup of\nour Cilk system where one guy",
    "start": "4262720",
    "end": "4269450"
  },
  {
    "text": "has work, and all these\nare workers that have no work to do.",
    "start": "4269450",
    "end": "4275410"
  },
  {
    "text": "So what happens? They all try to steal\nat random. In this case, we have this guy\ntries to steal from this",
    "start": "4275410",
    "end": "4283250"
  },
  {
    "text": "fellow, this guy tries\nto steal from this fellow, et cetera. So of these, this guy, this\nguy, and that guy all are",
    "start": "4283250",
    "end": "4293260"
  },
  {
    "text": "going to discover there's\nnothing there to be stolen, and they're going to\nrepeat the process.",
    "start": "4293260",
    "end": "4298270"
  },
  {
    "text": "This guy and this guy, there's\ngoing to be some arbitration. And one of them is going\nto get the lock.",
    "start": "4298270",
    "end": "4303530"
  },
  {
    "text": "Let's assume it's\nthis one here. So what happens is, this\nguy gets the lock.",
    "start": "4303530",
    "end": "4308900"
  },
  {
    "text": "What does this guy do?  He's going to wait. ",
    "start": "4308900",
    "end": "4315969"
  },
  {
    "text": "Because he's trying to\nacquire the lock. He can't acquire the\nlock, so he waits. So then what happens?",
    "start": "4315970",
    "end": "4322350"
  },
  {
    "text": "This guy now wants to steal\nthe work from this fellow.",
    "start": "4322350",
    "end": "4327470"
  },
  {
    "text": "So he steals a little\nbit of work. Then these guys now,\nwhat do they do?",
    "start": "4327470",
    "end": "4333510"
  },
  {
    "text": "They try again. So this guy tries to steal from\nthere, this guy tries to",
    "start": "4333510",
    "end": "4339449"
  },
  {
    "text": "steal from there, this one\nhappens to try to steal there. This one sees there's work\nthere to be done, so",
    "start": "4339450",
    "end": "4345510"
  },
  {
    "text": "what does it do? It waits. But these guys then try again.",
    "start": "4345510",
    "end": "4352590"
  },
  {
    "text": "Maybe a little bit more\nstuff is moved. They try again.",
    "start": "4352590",
    "end": "4358489"
  },
  {
    "text": "A little bit more stuff. They try again. But every time one tries and\ngets stuck on P0 while we're",
    "start": "4358490",
    "end": "4365870"
  },
  {
    "text": "doing that whole transfer, they\nall are ending up getting",
    "start": "4365870",
    "end": "4371540"
  },
  {
    "text": "stuck waiting for this\nguy to finish. And now, we've got work over\nhere, but how many guys are",
    "start": "4371540",
    "end": "4378300"
  },
  {
    "text": "going to be trying to\nsteal from this guy? None. They're all going to be trying\nto steal from this one,",
    "start": "4378300",
    "end": "4385139"
  },
  {
    "text": "because they all have done a\nlock acquisition, and they're sitting there waiting.",
    "start": "4385140",
    "end": "4390520"
  },
  {
    "text": "So this is called convoying,\nwhere they all pile up on one thing, and now resolving\nthat convoy.",
    "start": "4390520",
    "end": "4396090"
  },
  {
    "text": "So this was a bug in startup. Why wasn't Cilk starting\nup fast?",
    "start": "4396090",
    "end": "4402539"
  },
  {
    "text": "Initially, we just thought, oh,\nthere's system kinds of things going on there.",
    "start": "4402540",
    "end": "4408870"
  },
  {
    "text": "So the work now gets distributed\nvery slowly, because each one is going to\nserially try to get this work, and they're not going\nto try to get the",
    "start": "4408870",
    "end": "4414650"
  },
  {
    "text": "work from each other. What you want is that on the\nsecond phase, half the guys",
    "start": "4414650",
    "end": "4421040"
  },
  {
    "text": "might start hitting this one. So you get some kind of\nexponential distribution of",
    "start": "4421040",
    "end": "4427170"
  },
  {
    "text": "the work in kind of\na tree fashion. And that's what theory\nsays would happen. But the theory is usually done\nwithout worrying about what",
    "start": "4427170",
    "end": "4435420"
  },
  {
    "text": "happens in the implementation\nof the lock. What's the fix for this?",
    "start": "4435420",
    "end": "4441547"
  },
  {
    "text": "Yeah? AUDIENCE: Can you just basically\nshove-- when you're transferring, you should also\nsay, I have work, so that",
    "start": "4441547",
    "end": "4449032"
  },
  {
    "text": "people [INAUDIBLE] waiting for\nthat guy to [INAUDIBLE]. PROFESSOR: You could do that,\nbut in the meantime, it could",
    "start": "4449032",
    "end": "4455790"
  },
  {
    "text": "be that the attempt to steal\ngoes so much faster than the actual getting of the work,\nyou're still going to get half",
    "start": "4455790",
    "end": "4462000"
  },
  {
    "text": "the guys locked up\non this one. And the other half might be\nlocked up on this one.",
    "start": "4462000",
    "end": "4467160"
  },
  {
    "text": " Good idea.",
    "start": "4467160",
    "end": "4472640"
  },
  {
    "text": "What other things can we do? AUDIENCE: Can you check\nhow many people are waiting on the--",
    "start": "4472640",
    "end": "4478350"
  },
  {
    "text": "PROFESSOR: Yeah, so the\nidea is we don't want to use a lock operation. ",
    "start": "4478350",
    "end": "4486349"
  },
  {
    "text": "So here's the idea. We use a non-blocking function\nthat's usually called",
    "start": "4486350",
    "end": "4491369"
  },
  {
    "text": "\"try_lock,\" rather than \"lock.\"\ntry_lock attempts to acquire the mutex.",
    "start": "4491370",
    "end": "4497360"
  },
  {
    "text": "If it succeeds, great. It's got it. If it fails, it doesn't\ngo to spin.",
    "start": "4497360",
    "end": "4503800"
  },
  {
    "text": "It simply returns and\nsay, I failed.  It doesn't go to spin or\nto yield or anything.",
    "start": "4503800",
    "end": "4510350"
  },
  {
    "text": "It just says, oh, I\nfailed, and tells that back to the user.",
    "start": "4510350",
    "end": "4515750"
  },
  {
    "text": "But it doesn't attempt\nto block. So with try_lock now, what can\nthese other processors do?",
    "start": "4515750",
    "end": "4523610"
  },
  {
    "text": "They do a try_lock-- yeah? AUDIENCE: [INAUDIBLE] PROFESSOR: Exactly.",
    "start": "4523610",
    "end": "4530190"
  },
  {
    "text": "Instead of waiting there on\nthe guy that they fail on, they pick another random\none to steal from.",
    "start": "4530190",
    "end": "4537390"
  },
  {
    "text": " So they'll just continually\ntry to get it. If they get it, then they\ncan do their operation.",
    "start": "4537390",
    "end": "4544150"
  },
  {
    "text": "If they don't get it, they just\nlook elsewhere for work.",
    "start": "4544150",
    "end": "4550110"
  },
  {
    "text": "So that's what it does. It just tries to steal again at random, rather than blocking. ",
    "start": "4550110",
    "end": "4557820"
  },
  {
    "text": "And that gets rid of this\nconvoying problem. ",
    "start": "4557820",
    "end": "4564090"
  },
  {
    "text": "As I say, dangerous programming,\nbecause we didn't",
    "start": "4564090",
    "end": "4569250"
  },
  {
    "text": "even know we had a problem. Just our code was slower than\nit could have been. ",
    "start": "4569250",
    "end": "4576740"
  },
  {
    "text": "Questions about convoying? ",
    "start": "4576740",
    "end": "4584210"
  },
  {
    "text": "So try_lock is actually a very\nconvenient thing to use. So in many cases, you may find\nthat, hey, rather than waiting",
    "start": "4584210",
    "end": "4591150"
  },
  {
    "text": "on something with nothing to do,\nlet me go see if there's something else I can\ndo in the meantime.",
    "start": "4591150",
    "end": "4597449"
  },
  {
    "text": " Contention. ",
    "start": "4597450",
    "end": "4603760"
  },
  {
    "text": "So here's an example of a code\nwhere I want to add up some",
    "start": "4603760",
    "end": "4611389"
  },
  {
    "text": "function of the elements\nof some array.",
    "start": "4611390",
    "end": "4617060"
  },
  {
    "text": "So here I've got a value of\nn, which is a million.",
    "start": "4617060",
    "end": "4624470"
  },
  {
    "text": "And I have a type X. So we have\na compute function, which",
    "start": "4624470",
    "end": "4637410"
  },
  {
    "text": "takes a pointer to a-- did I do this right?",
    "start": "4637410",
    "end": "4642640"
  },
  {
    "text": "To value V. So anyway, my C++\nis not as good as my C, and",
    "start": "4642640",
    "end": "4651150"
  },
  {
    "text": "for those who don't know,\nmy C isn't very good. So anyway, we have an array\nof type X of n elements.",
    "start": "4651150",
    "end": "4661025"
  },
  {
    "text": " And what I do is I set result\nto be 0, and then I have a",
    "start": "4661025",
    "end": "4667390"
  },
  {
    "text": "loop here which basically goes\nand adds into result the result of computing on each\nelement of the array.",
    "start": "4667390",
    "end": "4675219"
  },
  {
    "text": "And then it outputs\nthe result. Does everybody understand what's\ngoing on in the code?",
    "start": "4675220",
    "end": "4680940"
  },
  {
    "text": "It's basically compute on every\nelement in the array, take the result, add all\nthose results together.",
    "start": "4680940",
    "end": "4686270"
  },
  {
    "text": "We want to parallelize this. So let's parallelize that.",
    "start": "4686270",
    "end": "4692090"
  },
  {
    "text": "What looks like the best\nopportunity for parallelizing? ",
    "start": "4692090",
    "end": "4698969"
  },
  {
    "text": "Yeah, we go after the for and\nmake it be a cilk_for. Let's add all those guys up.",
    "start": "4698970",
    "end": "4704310"
  },
  {
    "text": "And what's the problem\nwith that? We get a race.",
    "start": "4704310",
    "end": "4709580"
  },
  {
    "text": "What's the race on? AUDIENCE: Result. PROFESSOR: Result. They're all updating\nresult in parallel.",
    "start": "4709580",
    "end": "4716199"
  },
  {
    "text": "Oh, I know how to\nresolve a race. Let's just put a\nlock around it.",
    "start": "4716200",
    "end": "4723800"
  },
  {
    "text": "So here we have the race.  First, let's analyze this.",
    "start": "4723800",
    "end": "4730630"
  },
  {
    "text": "So the work here is order n. What is the span? AUDIENCE: Log n.",
    "start": "4730630",
    "end": "4736239"
  },
  {
    "text": "PROFESSOR: Yeah, the span is log\nn for the control of the stuff here, because this\nis all constant time.",
    "start": "4736240",
    "end": "4744080"
  },
  {
    "text": "So the running time here is\norder n over P plus log n.",
    "start": "4744080",
    "end": "4751760"
  },
  {
    "text": "If you remember the greedy\nscheduling, it's going to be something like this, because\nthis is the work over P plus the span.",
    "start": "4751760",
    "end": "4760080"
  },
  {
    "text": "So we expect that if n over P\nis big compared to log n,",
    "start": "4760080",
    "end": "4765610"
  },
  {
    "text": "we're going to do pretty well,\nbecause we have parallelism over log n. ",
    "start": "4765610",
    "end": "4771370"
  },
  {
    "text": "So let's fix this bug. So this is fast code, but\nit's incorrect code.",
    "start": "4771370",
    "end": "4778030"
  },
  {
    "text": "So let's fix it by getting\nrid of this race.",
    "start": "4778030",
    "end": "4783039"
  },
  {
    "text": "So what we'll do is we'll\nput a lock before. We'll introduce a mutex L, and\nwe'll lock L before we add to",
    "start": "4783040",
    "end": "4792045"
  },
  {
    "text": "the result, and then\nwe'll unlock it. So first of all, this is a bad\nway to do it, because what I",
    "start": "4792045",
    "end": "4800120"
  },
  {
    "text": "really should do is first\ncompute the result of my array",
    "start": "4800120",
    "end": "4805380"
  },
  {
    "text": "and then lock, add it to the\nresult, and then unlock so that we lessen the time\nthat I'm holding the",
    "start": "4805380",
    "end": "4812160"
  },
  {
    "text": "lock in each iteration. Nevertheless, this is still\na lousy piece of code. Why's that?",
    "start": "4812160",
    "end": "4817311"
  },
  {
    "text": "AUDIENCE: It's still\nserialized. PROFESSOR: Yeah, it's\nserialized. Every update to result here\nhas to go on serially.",
    "start": "4817311",
    "end": "4827110"
  },
  {
    "text": "They're n accesses. They're all going to\ngo one at a time. So my running time, instead of\nbeing n over log n, is going",
    "start": "4827110",
    "end": "4834449"
  },
  {
    "text": "to be something like order n. ",
    "start": "4834450",
    "end": "4843489"
  },
  {
    "text": "Believe me, I have seen many\npeople write code where they",
    "start": "4843490",
    "end": "4849390"
  },
  {
    "text": "essentially do exactly this. They take something, they make\nit parallel, they have a race",
    "start": "4849390",
    "end": "4856340"
  },
  {
    "text": "bug, they fix it with a mutex.  Bad idea, because then\nwe end up with",
    "start": "4856340",
    "end": "4865240"
  },
  {
    "text": "contention on this mutex. What's the right way to\nparallelize this? ",
    "start": "4865240",
    "end": "4877900"
  },
  {
    "text": "Yeah? AUDIENCE: Maybe you could\nhave each [INAUDIBLE]",
    "start": "4877900",
    "end": "4884830"
  },
  {
    "text": "have result as an array and\nhave each [INAUDIBLE] one place [INAUDIBLE].",
    "start": "4884830",
    "end": "4890770"
  },
  {
    "text": "And then at the end,\nsome of all the-- PROFESSOR: But won't that\nbe n elements to sum up? AUDIENCE: [INAUDIBLE]",
    "start": "4890770",
    "end": "4897455"
  },
  {
    "text": "AUDIENCE: So basically,\nhave, say. Eight results, instead\nof having-- PROFESSOR: For each thread.",
    "start": "4897455",
    "end": "4902690"
  },
  {
    "text": " Good. So that each one could keep it\nlocal to its own thread.",
    "start": "4902690",
    "end": "4910310"
  },
  {
    "text": "Now, of course, that involves me\nknowing how many processors I'm running on.",
    "start": "4910310",
    "end": "4915770"
  },
  {
    "text": "So now, if that number\nchanges or whatever--",
    "start": "4915770",
    "end": "4921490"
  },
  {
    "text": "there's a way of doing it\ncompletely processor obliviously. AUDIENCE: Divide and conquer. PROFESSOR: Yeah, do divide\nand conquer.",
    "start": "4921490",
    "end": "4928970"
  },
  {
    "text": "Add up recursively the first\nhalf of the elements, add up the second half of\nthe elements,",
    "start": "4928970",
    "end": "4934080"
  },
  {
    "text": "and add them together. Next time, we're going to see\nyet another mechanism for doing that, which gets the\nkind of performance that",
    "start": "4934080",
    "end": "4942060"
  },
  {
    "text": "you're mentioning but without\nhaving to rewrite the For loop as divide and conquer.",
    "start": "4942060",
    "end": "4947780"
  },
  {
    "text": "We'll see that next time.  So in this case, we have lock\ncontention that takes away our",
    "start": "4947780",
    "end": "4953640"
  },
  {
    "text": "parallelism. Unfortunately, very little is\nknown about lock contention.",
    "start": "4953640",
    "end": "4960960"
  },
  {
    "text": "The greedy scheduler, you can\nshow that it achieves T1 over P plus T infinity plus B where\nB is the bondage, that is, if",
    "start": "4960960",
    "end": "4971740"
  },
  {
    "text": "you add the total time of\nall critical sections. That's a lousy bound, because\nit says, even if they're",
    "start": "4971740",
    "end": "4978440"
  },
  {
    "text": "locked by different locks, you\nstill add up the total time of all the critical sections.",
    "start": "4978440",
    "end": "4984100"
  },
  {
    "text": "And generally, although you can\nimprove this in special cases, the general theory for\nunderstanding contention is",
    "start": "4984100",
    "end": "4992119"
  },
  {
    "text": "not understood very well. And this upper bound is weak,\nbut little is known about lock",
    "start": "4992120",
    "end": "4998740"
  },
  {
    "text": "contention. Very little is known about\nlock contention. So to conclude, always\nwrite deterministic",
    "start": "4998740",
    "end": "5008050"
  },
  {
    "text": "programs, unless you can't. ",
    "start": "5008050",
    "end": "5013790"
  },
  {
    "text": "Always write deterministic\nprograms, unless you can't. Great. ",
    "start": "5013790",
    "end": "5026624"
  }
]