[
  {
    "start": "0",
    "end": "0"
  },
  {
    "start": "0",
    "end": "2680"
  },
  {
    "text": "PROFESSOR: Instead of building\nall of our logic functions",
    "start": "2680",
    "end": "5260"
  },
  {
    "text": "directly in CMOS,\nit is easier for us",
    "start": "5260",
    "end": "8140"
  },
  {
    "text": "to create a higher\nlevel of abstraction",
    "start": "8140",
    "end": "10780"
  },
  {
    "text": "known as Boolean gates,\nwhich represent CMOS gates.",
    "start": "10780",
    "end": "14889"
  },
  {
    "text": "Each gate is assigned a\nsymbol, which can then",
    "start": "14890",
    "end": "17620"
  },
  {
    "text": "be used in schematic diagrams\nthat combine multiple logic",
    "start": "17620",
    "end": "21100"
  },
  {
    "text": "gates together.",
    "start": "21100",
    "end": "22840"
  },
  {
    "text": "In order to be\nable to understand",
    "start": "22840",
    "end": "24760"
  },
  {
    "text": "what function any combination\nof logic gates will produce,",
    "start": "24760",
    "end": "28690"
  },
  {
    "text": "we will begin by reviewing\nthe basic gates together",
    "start": "28690",
    "end": "31600"
  },
  {
    "text": "with the truth tables\nthat define their logic.",
    "start": "31600",
    "end": "34960"
  },
  {
    "text": "We begin with an inverter.",
    "start": "34960",
    "end": "37090"
  },
  {
    "text": "An inverter is a gate\nthat has a single input",
    "start": "37090",
    "end": "39610"
  },
  {
    "text": "and a single output.",
    "start": "39610",
    "end": "41260"
  },
  {
    "text": "The output is simply the\ninverse of the input.",
    "start": "41260",
    "end": "44320"
  },
  {
    "text": "When A equals 0, Y equals 1.",
    "start": "44320",
    "end": "47110"
  },
  {
    "text": "And when A equals 1, Y equals 0.",
    "start": "47110",
    "end": "50530"
  },
  {
    "text": "Next, we examine\nAND and OR gates.",
    "start": "50530",
    "end": "53520"
  },
  {
    "text": "The AND function expects all\nof its inputs to be true,",
    "start": "53520",
    "end": "57760"
  },
  {
    "text": "or 1, in order to produce\na 1 as its output.",
    "start": "57760",
    "end": "62320"
  },
  {
    "text": "So its truth table is for A,\nB equals 0, 0, Y equals 0.",
    "start": "62320",
    "end": "68229"
  },
  {
    "text": "For A, B equals\n0, 1, Y equals 0.",
    "start": "68230",
    "end": "71740"
  },
  {
    "text": "For A, B equals\n1, 0, y equals 0.",
    "start": "71740",
    "end": "75579"
  },
  {
    "text": "And for A, B equal\n1, 1, Y equals 1.",
    "start": "75580",
    "end": "80161"
  },
  {
    "text": "The OR function just\nexpects at least one",
    "start": "80161",
    "end": "83220"
  },
  {
    "text": "of its inputs to be true\nin order to produce a 1",
    "start": "83220",
    "end": "86580"
  },
  {
    "text": "as its output.",
    "start": "86580",
    "end": "88270"
  },
  {
    "text": "So for A, B equals\n0, 0, Y equals 0.",
    "start": "88270",
    "end": "92130"
  },
  {
    "text": "But for the other three\ncombinations, Y equals 1.",
    "start": "92130",
    "end": "97039"
  },
  {
    "text": "NAND and NOR gates\nsimply produce",
    "start": "97040",
    "end": "98660"
  },
  {
    "text": "the inverse of AND and OR.",
    "start": "98660",
    "end": "101180"
  },
  {
    "text": "The reason that we like to\nwork with NAND and NOR gates is",
    "start": "101180",
    "end": "104570"
  },
  {
    "text": "because they are\ninverting gates,",
    "start": "104570",
    "end": "106520"
  },
  {
    "text": "and they can be implemented\nas a single CMOS gate,",
    "start": "106520",
    "end": "110000"
  },
  {
    "text": "whereas the AND and\nOR gates cannot.",
    "start": "110000",
    "end": "113480"
  },
  {
    "text": "Finally, the last basic\ngate is an exclusive or.",
    "start": "113480",
    "end": "117660"
  },
  {
    "text": "The exclusive or\nproduces a 1 output",
    "start": "117660",
    "end": "120380"
  },
  {
    "text": "if exactly one of its two\ninputs is a 1 and 0 otherwise.",
    "start": "120380",
    "end": "125240"
  },
  {
    "text": "So for A, B equals\n0, 0, Y equals 0.",
    "start": "125240",
    "end": "129410"
  },
  {
    "text": "For A, B equals\n0, 1, Y equals 1.",
    "start": "129410",
    "end": "133100"
  },
  {
    "text": "For A, B equal to\n1, 0, Y equals 1.",
    "start": "133100",
    "end": "137060"
  },
  {
    "text": "And for A, B equals\nto 1, 1, y equals 0.",
    "start": "137060",
    "end": "143150"
  },
  {
    "start": "142000",
    "end": "142000"
  },
  {
    "text": "The output of one Boolean\ngate can be used as an input",
    "start": "143150",
    "end": "146480"
  },
  {
    "text": "to another Boolean gate.",
    "start": "146480",
    "end": "148430"
  },
  {
    "text": "So multiple gates can\nbe used to generate",
    "start": "148430",
    "end": "150799"
  },
  {
    "text": "more complex functions.",
    "start": "150800",
    "end": "153120"
  },
  {
    "text": "For example, here\nwe have a circuit",
    "start": "153120",
    "end": "155239"
  },
  {
    "text": "that consists of two\ninputs and six gates, which",
    "start": "155240",
    "end": "158870"
  },
  {
    "text": "are an inverter, an AND\ngate, and OR gate, two NOR",
    "start": "158870",
    "end": "162709"
  },
  {
    "text": "gates, and 1 NAND gate.",
    "start": "162710",
    "end": "165140"
  },
  {
    "text": "In order to figure out what\nthis combination of gates",
    "start": "165140",
    "end": "167780"
  },
  {
    "text": "produces as its output,\nwe can work incrementally",
    "start": "167780",
    "end": "171410"
  },
  {
    "text": "through the circuit.",
    "start": "171410",
    "end": "173120"
  },
  {
    "text": "We begin by enumerating all our\nchoices of inputs for A and B.",
    "start": "173120",
    "end": "178400"
  },
  {
    "text": "We know that the\noutput of the inverter",
    "start": "178400",
    "end": "180890"
  },
  {
    "text": "is the complement of B. The AND\nand OR gates use the A and B",
    "start": "180890",
    "end": "186260"
  },
  {
    "text": "inputs directly.",
    "start": "186260",
    "end": "187670"
  },
  {
    "text": "So since we just reviewed\nwhat AND and OR gates produce,",
    "start": "187670",
    "end": "191420"
  },
  {
    "text": "we can fill in these\ncolumns, as well.",
    "start": "191420",
    "end": "193400"
  },
  {
    "start": "193400",
    "end": "197349"
  },
  {
    "text": "Next, we want to see what\nour first NOR gate produces.",
    "start": "197350",
    "end": "201070"
  },
  {
    "text": "Its inputs are A and\nthe complement of B.",
    "start": "201070",
    "end": "204990"
  },
  {
    "text": "We walk through each of\nthe input combinations",
    "start": "204990",
    "end": "207840"
  },
  {
    "text": "and determine the corresponding\noutput for that gate.",
    "start": "207840",
    "end": "211590"
  },
  {
    "text": "For input 0, 1, the output is 0.",
    "start": "211590",
    "end": "215190"
  },
  {
    "text": "For 0, 0, the output is 1.",
    "start": "215190",
    "end": "218190"
  },
  {
    "text": "For inputs 1, 1,\nthe output is 0.",
    "start": "218190",
    "end": "221550"
  },
  {
    "text": "And for input 1,\n0, the output is 0.",
    "start": "221550",
    "end": "225150"
  },
  {
    "text": "In the same manner, we\nevaluate the outputs",
    "start": "225150",
    "end": "227579"
  },
  {
    "text": "for our second NOR gate.",
    "start": "227580",
    "end": "229770"
  },
  {
    "text": "Its inputs are the outputs of\nthe first NOR gate and the AND",
    "start": "229770",
    "end": "234180"
  },
  {
    "text": "gate.",
    "start": "234180",
    "end": "235230"
  },
  {
    "text": "Again, we simply walk through\neach combination of inputs",
    "start": "235230",
    "end": "238409"
  },
  {
    "text": "and specify the outputs\nproduced by the second NOR gate.",
    "start": "238410",
    "end": "242250"
  },
  {
    "text": "When both inputs are\n0, the output is 1.",
    "start": "242250",
    "end": "245760"
  },
  {
    "text": "When one input is 0\nand the other is a 1,",
    "start": "245760",
    "end": "248739"
  },
  {
    "text": "the output is a 0.",
    "start": "248740",
    "end": "250990"
  },
  {
    "text": "Finally, we take those\noutputs, together",
    "start": "250990",
    "end": "253380"
  },
  {
    "text": "with the outputs of the\nOR gate, and generate",
    "start": "253380",
    "end": "256079"
  },
  {
    "text": "the final output of the circuit\nat the output of the NAND gate.",
    "start": "256079",
    "end": "260959"
  },
  {
    "text": "Here, when both inputs\nare 1, we get a 0 output.",
    "start": "260959",
    "end": "265110"
  },
  {
    "text": "Otherwise, the output is a 1.",
    "start": "265110",
    "end": "267840"
  },
  {
    "text": "This NAND column\nof our truth table",
    "start": "267840",
    "end": "270180"
  },
  {
    "text": "is the resulting output H.",
    "start": "270180",
    "end": "275440"
  },
  {
    "start": "274000",
    "end": "274000"
  },
  {
    "text": "Now that we have\nevaluated what our output",
    "start": "275440",
    "end": "277720"
  },
  {
    "text": "H is equal to for each\ncombination of A and B,",
    "start": "277720",
    "end": "281650"
  },
  {
    "text": "we can represent the circuit\nas a single truth table",
    "start": "281650",
    "end": "285040"
  },
  {
    "text": "whose inputs are A\nand B and whose output",
    "start": "285040",
    "end": "287800"
  },
  {
    "text": "is H. At this point, we\ncan express the function",
    "start": "287800",
    "end": "291490"
  },
  {
    "text": "H as a combination of all the\ncases that make H equal to 1.",
    "start": "291490",
    "end": "296590"
  },
  {
    "text": "This occurs if A and\nB are both equal to 0,",
    "start": "296590",
    "end": "300699"
  },
  {
    "text": "or if A equals 0 and B\nequals 1, or if A and B are",
    "start": "300700",
    "end": "306280"
  },
  {
    "text": "both equal to 1.",
    "start": "306280",
    "end": "308230"
  },
  {
    "text": "This can be expressed as\na Boolean logic expression",
    "start": "308230",
    "end": "311200"
  },
  {
    "text": "as follows.",
    "start": "311200",
    "end": "312850"
  },
  {
    "text": "H equals not A\nnot B, or not A B,",
    "start": "312850",
    "end": "319420"
  },
  {
    "text": "or A B. This notation is called\nthe sum of products notation.",
    "start": "319420",
    "end": "326050"
  },
  {
    "text": "Any sum of products can be\nconverted into a simple gate",
    "start": "326050",
    "end": "329379"
  },
  {
    "text": "representation of the function\nusing only inverters, AND,",
    "start": "329380",
    "end": "333580"
  },
  {
    "text": "and OR gates by having one large\nOR gate that receives as input",
    "start": "333580",
    "end": "338229"
  },
  {
    "text": "one AND gate per product term.",
    "start": "338230",
    "end": "340840"
  },
  {
    "text": "Inverters are used as\nneeded to complement",
    "start": "340840",
    "end": "343600"
  },
  {
    "text": "the inputs to the AND gates.",
    "start": "343600",
    "end": "347950"
  },
  {
    "text": "One thing that's\ninteresting to note",
    "start": "347950",
    "end": "349630"
  },
  {
    "text": "about this combination\nof gates is",
    "start": "349630",
    "end": "352060"
  },
  {
    "text": "that it can easily be\nconverted into a circuit that",
    "start": "352060",
    "end": "354639"
  },
  {
    "text": "consists purely of NAND gates.",
    "start": "354640",
    "end": "357130"
  },
  {
    "text": "The way to do this is\nto realize that if you",
    "start": "357130",
    "end": "359410"
  },
  {
    "text": "take the output of a\ngate and invert it twice,",
    "start": "359410",
    "end": "362560"
  },
  {
    "text": "you've produced the\noriginal output.",
    "start": "362560",
    "end": "364960"
  },
  {
    "text": "This means that we can add\ntwo inverters between each AND",
    "start": "364960",
    "end": "368740"
  },
  {
    "text": "output and OR input.",
    "start": "368740",
    "end": "371199"
  },
  {
    "text": "We can draw these\ninverters as bubbles,",
    "start": "371200",
    "end": "373630"
  },
  {
    "text": "which represent\ninversion, where we place",
    "start": "373630",
    "end": "376150"
  },
  {
    "text": "one bubble on the\noutput of the AND gate",
    "start": "376150",
    "end": "378970"
  },
  {
    "text": "and the other bubble at\nthe input to the OR gate.",
    "start": "378970",
    "end": "382360"
  },
  {
    "text": "We know that an AND gate\nfollowed by an inversion",
    "start": "382360",
    "end": "385629"
  },
  {
    "text": "is simply a NAND gate.",
    "start": "385630",
    "end": "387880"
  },
  {
    "text": "We also know that an inverter\nis equivalent to a NAND gate",
    "start": "387880",
    "end": "391570"
  },
  {
    "text": "with both of its\ninputs tied together.",
    "start": "391570",
    "end": "395230"
  },
  {
    "text": "In addition, using\nDe Morgan's law,",
    "start": "395230",
    "end": "398140"
  },
  {
    "text": "we know that not A or not B is\nequivalent to not of A and B.",
    "start": "398140",
    "end": "406420"
  },
  {
    "text": "This means that the bubbles\nfollowed by the OR gate",
    "start": "406420",
    "end": "409810"
  },
  {
    "text": "can also be replaced\nwith a NAND gate,",
    "start": "409810",
    "end": "412880"
  },
  {
    "text": "thus arriving at our\nequivalent circuit",
    "start": "412880",
    "end": "415000"
  },
  {
    "text": "representation consisting\npurely of NAND gates.",
    "start": "415000",
    "end": "419350"
  },
  {
    "text": "The advantage of using NAND\ngates to implement the circuit",
    "start": "419350",
    "end": "422920"
  },
  {
    "text": "is that NAND gates\nare inverting logic,",
    "start": "422920",
    "end": "426760"
  },
  {
    "text": "where each gate can be\nimplemented as a single CMOS",
    "start": "426760",
    "end": "429850"
  },
  {
    "text": "gate.",
    "start": "429850",
    "end": "431080"
  },
  {
    "text": "All functions can be expressed\nas a combination of NAND gates.",
    "start": "431080",
    "end": "435310"
  },
  {
    "text": "So a NAND gate is\nconsidered a universal gate.",
    "start": "435310",
    "end": "439660"
  },
  {
    "text": "NOR gates are also\nuniversal and can be",
    "start": "439660",
    "end": "442420"
  },
  {
    "text": "used to express any function.",
    "start": "442420",
    "end": "445210"
  },
  {
    "text": "Furthermore, any\ncircuit that can",
    "start": "445210",
    "end": "447280"
  },
  {
    "text": "be used to implement\nany other function",
    "start": "447280",
    "end": "450040"
  },
  {
    "text": "is also considered universal.",
    "start": "450040",
    "end": "453990"
  },
  {
    "text": "To determine if a\ngate G is universal,",
    "start": "453990",
    "end": "457020"
  },
  {
    "text": "one needs to check if one can\nconvert G into either a NAND",
    "start": "457020",
    "end": "461789"
  },
  {
    "text": "or NOR gate by simply using\none or more copies of G",
    "start": "461790",
    "end": "465570"
  },
  {
    "text": "together with low and\nhigh constant inputs.",
    "start": "465570",
    "end": "469580"
  },
  {
    "start": "469580",
    "end": "471318"
  }
]