[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "Having talked about the storage resources\nprovided by the Beta ISA, let's design the",
    "start": "989",
    "end": "6029"
  },
  {
    "text": "Beta instructions themselves.",
    "start": "6029",
    "end": "8580"
  },
  {
    "text": "This might be a good time to print a copy\nof the handout called the \"Summary of Beta",
    "start": "8580",
    "end": "12809"
  },
  {
    "text": "Instruction Formats\" so you'll have it for\nhandy reference.",
    "start": "12809",
    "end": "17480"
  },
  {
    "text": "The Beta has three types of instructions:\ncompute instructions that perform arithmetic",
    "start": "17480",
    "end": "21590"
  },
  {
    "text": "and logic operations on register values, load\nand store instructions that access values",
    "start": "21590",
    "end": "26960"
  },
  {
    "text": "in main memory, and branch instructions that\nchange the value of the program counter.",
    "start": "26960",
    "end": "32829"
  },
  {
    "text": "We'll discuss each class of instructions in\nturn.",
    "start": "32830",
    "end": "37320"
  },
  {
    "text": "In the Beta ISA, all the instruction encodings\nare the same size: each instruction is encoded",
    "start": "37320",
    "end": "43640"
  },
  {
    "text": "in 32 bits and hence occupies exactly one\n32-bit word in main memory.",
    "start": "43640",
    "end": "49320"
  },
  {
    "text": "This instruction encoding leads to simpler\ncontrol-unit logic for decoding instructions.",
    "start": "49320",
    "end": "54620"
  },
  {
    "text": "And computing the next value of the program\ncounter is very simple:",
    "start": "54620",
    "end": "58260"
  },
  {
    "text": "for most instructions, the next instruction\ncan be found in the following memory location.",
    "start": "58260",
    "end": "63510"
  },
  {
    "text": "We just need to add 4 to the current value\nof program counter to advance to the next",
    "start": "63510",
    "end": "67770"
  },
  {
    "text": "instruction.",
    "start": "67770",
    "end": "69280"
  },
  {
    "text": "As we saw in Part 1 of the course, fixed-length\nencodings are often inefficient in the sense",
    "start": "69280",
    "end": "74000"
  },
  {
    "text": "that the same information content (in this\ncase, the encoded program) can be encoded",
    "start": "74000",
    "end": "79609"
  },
  {
    "text": "using fewer bits.",
    "start": "79609",
    "end": "81770"
  },
  {
    "text": "To do better we would need a variable-length\nencoding for instructions, where frequently-occurring",
    "start": "81770",
    "end": "86409"
  },
  {
    "text": "instructions would use a shorter encoding.",
    "start": "86409",
    "end": "89819"
  },
  {
    "text": "But hardware to decode variable-length instructions\nis complex since there may be several instructions",
    "start": "89819",
    "end": "95090"
  },
  {
    "text": "packed into one memory word, while other instructions\nmight require loading several memory words.",
    "start": "95090",
    "end": "100678"
  },
  {
    "text": "The details can be worked out, but there's\na performance and energy cost associated with",
    "start": "100679",
    "end": "104880"
  },
  {
    "text": "the more efficient encoding.",
    "start": "104880",
    "end": "107229"
  },
  {
    "text": "Nowadays, advances in memory technology have\nmade memory size less of an issue and the",
    "start": "107229",
    "end": "112520"
  },
  {
    "text": "focus is on the higher-performance needed\nby today's applications.",
    "start": "112520",
    "end": "117700"
  },
  {
    "text": "Our choice of a fixed-length encoding leads\nto larger code size, but keeps the hardware",
    "start": "117700",
    "end": "122590"
  },
  {
    "text": "execution engine small and fast.",
    "start": "122590",
    "end": "126030"
  },
  {
    "start": "126000",
    "end": "126000"
  },
  {
    "text": "The computation performed by the Beta datapath\nhappens in the arithmetic-and-logic unit (ALU).",
    "start": "126030",
    "end": "131540"
  },
  {
    "text": "We'll be using the ALU designed in Part 1\nof the course.",
    "start": "131540",
    "end": "136290"
  },
  {
    "text": "The Beta ALU instructions have 4 instruction\nfields.",
    "start": "136290",
    "end": "139950"
  },
  {
    "text": "There's a 6-bit field specifying the ALU operation\nto be performed - this field is called the",
    "start": "139950",
    "end": "145940"
  },
  {
    "text": "opcode.",
    "start": "145940",
    "end": "147110"
  },
  {
    "text": "The two source operands come from registers\nwhose numbers are specified by the 5-bit \"ra\"",
    "start": "147110",
    "end": "152330"
  },
  {
    "text": "and \"rb\" fields.",
    "start": "152330",
    "end": "153700"
  },
  {
    "text": "So we can specify any register from R0 to\nR31 as a source operand.",
    "start": "153700",
    "end": "159030"
  },
  {
    "text": "The destination register is specified by the\n5-bit \"rc\" field.",
    "start": "159030",
    "end": "164020"
  },
  {
    "text": "This instruction format uses 21 bits of the\n32-bit word, the remaining bits are unused",
    "start": "164020",
    "end": "169120"
  },
  {
    "text": "and should be set to 0.",
    "start": "169120",
    "end": "171540"
  },
  {
    "text": "The diagram shows how the fields are positioned\nin the 32-bit word.",
    "start": "171540",
    "end": "175510"
  },
  {
    "text": "The choice of position for each field is somewhat\narbitrary, but to keep the hardware simple,",
    "start": "175510",
    "end": "180360"
  },
  {
    "text": "when we can we'll want to use the same field\npositions for similar fields in the other",
    "start": "180360",
    "end": "185980"
  },
  {
    "text": "instruction encodings.",
    "start": "185980",
    "end": "187360"
  },
  {
    "text": "For example, the opcode will always be found\nin bits [31:26] of the instruction.",
    "start": "187360",
    "end": "194470"
  },
  {
    "text": "Here's the binary encoding of an ADD instruction.",
    "start": "194470",
    "end": "197400"
  },
  {
    "text": "The opcode for ADD is the 6-bit binary value\n0b100000 - you can find the binary for each",
    "start": "197400",
    "end": "204939"
  },
  {
    "text": "opcode in the Opcode Table in the handout\nmentioned before.",
    "start": "204940",
    "end": "208870"
  },
  {
    "text": "The \"rc\" field specifies that the result of\nthe ADD will be written into R3.",
    "start": "208870",
    "end": "214790"
  },
  {
    "text": "And the \"ra\" and \"rb\" fields specify that\nthe first and second source operands are R1",
    "start": "214790",
    "end": "220260"
  },
  {
    "text": "and R2 respectively.",
    "start": "220260",
    "end": "222620"
  },
  {
    "text": "So this instruction adds the 32-bit values\nfound in R1 and R2, writing the 32-bit sum",
    "start": "222620",
    "end": "228659"
  },
  {
    "text": "into R3.",
    "start": "228660",
    "end": "231270"
  },
  {
    "text": "Note that it's permissible to refer to a particular\nregister several times in the same instruction.",
    "start": "231270",
    "end": "236320"
  },
  {
    "text": "So, for example, we could specify R1 as the\nregister for both source operands AND also",
    "start": "236320",
    "end": "242090"
  },
  {
    "text": "as the destination register.",
    "start": "242090",
    "end": "244470"
  },
  {
    "text": "If we did, we'd be adding R1 to R1 and writing\nthe result back into R1, which would effectively",
    "start": "244470",
    "end": "250380"
  },
  {
    "text": "multiply the value in R1 by 2.",
    "start": "250380",
    "end": "254860"
  },
  {
    "text": "Since it's tedious and error-prone to transcribe\n32-bit binary values, we'll often use hexadecimal",
    "start": "254860",
    "end": "260969"
  },
  {
    "text": "notation for the binary representation of\nan instruction.",
    "start": "260969",
    "end": "265830"
  },
  {
    "text": "In this example, the hexadecimal notation\nfor the encoded instruction is 0x80611000.",
    "start": "265830",
    "end": "272240"
  },
  {
    "text": "However, it's *much* easier if we describe\nthe instructions using a functional notation,",
    "start": "272240",
    "end": "280300"
  },
  {
    "text": "e.g., \"ADD(r1,r2,r3)\".",
    "start": "280300",
    "end": "284080"
  },
  {
    "text": "Here we use a symbolic name for each operation,\ncalled a mnemonic.",
    "start": "284080",
    "end": "287560"
  },
  {
    "text": "For this instruction the mnemonic is \"ADD\",\nfollowed by a parenthesized list of operands,",
    "start": "287560",
    "end": "292749"
  },
  {
    "text": "in this case the two source operands (r1 and\nr2), then the destination (r3).",
    "start": "292749",
    "end": "299460"
  },
  {
    "text": "So we'll understand that ADD(ra,rb,rc) is\nshorthand for asking the Beta to compute the",
    "start": "299460",
    "end": "305199"
  },
  {
    "text": "sum of the values in registers ra and rb,\nwriting the result as the new value of register",
    "start": "305199",
    "end": "310629"
  },
  {
    "text": "rc.",
    "start": "310629",
    "end": "312569"
  },
  {
    "text": "Here's the list of the mnemonics for all the\noperations supported by the Beta.",
    "start": "312569",
    "end": "317039"
  },
  {
    "text": "There is a detailed description of what each\ninstruction does in the Beta Documentation",
    "start": "317039",
    "end": "321650"
  },
  {
    "text": "handout.",
    "start": "321650",
    "end": "322810"
  },
  {
    "text": "Note that all these instructions use same\n4-field template, differing only in the value",
    "start": "322810",
    "end": "327301"
  },
  {
    "text": "of the opcode field.",
    "start": "327301",
    "end": "329719"
  },
  {
    "text": "This first step was pretty straightforward\n- we simply provided instruction encodings",
    "start": "329719",
    "end": "333650"
  },
  {
    "text": "for the basic operations provided by the ALU.",
    "start": "333650",
    "end": "338160"
  },
  {
    "start": "338000",
    "end": "338000"
  },
  {
    "text": "Now that we have our first group of instructions,\nwe can create a more concrete implementation",
    "start": "338160",
    "end": "342800"
  },
  {
    "text": "sketch.",
    "start": "342800",
    "end": "344319"
  },
  {
    "text": "Here we see our proposed datapath.",
    "start": "344319",
    "end": "346430"
  },
  {
    "text": "The 5-bit \"ra\" and \"rb\" fields from the instruction\nare used to select which of the 32 registers",
    "start": "346430",
    "end": "351639"
  },
  {
    "text": "will be used for the two operands.",
    "start": "351639",
    "end": "355060"
  },
  {
    "text": "Note that register 31 isn't actually a read/write\nregister, it's just the 32-bit constant 0,",
    "start": "355060",
    "end": "361650"
  },
  {
    "text": "so that selecting R31 as an operand results\nin using the value 0.",
    "start": "361650",
    "end": "366800"
  },
  {
    "text": "The 5-bit \"rc\" field from the instruction\nselects which register will be written with",
    "start": "366800",
    "end": "371219"
  },
  {
    "text": "the result from the ALU.",
    "start": "371219",
    "end": "374069"
  },
  {
    "text": "Not shown is the hardware needed to translate\nthe instruction opcode to the appropriate",
    "start": "374069",
    "end": "379020"
  },
  {
    "text": "ALU function code - perhaps a 64-location\nROM could be used to perform the translation",
    "start": "379020",
    "end": "384270"
  },
  {
    "text": "by table lookup.",
    "start": "384270",
    "end": "385979"
  },
  {
    "text": "The program counter logic supports simple\nsequential execution of instructions.",
    "start": "385979",
    "end": "390430"
  },
  {
    "text": "It's a 32-bit register whose value is updated\nat the end of each instruction by adding 4",
    "start": "390430",
    "end": "395729"
  },
  {
    "text": "to its current value.",
    "start": "395729",
    "end": "397410"
  },
  {
    "text": "This means the next instruction will come\nfrom the memory location following the one",
    "start": "397410",
    "end": "400860"
  },
  {
    "text": "that holds the current instruction.",
    "start": "400860",
    "end": "403788"
  },
  {
    "text": "In this diagram we see one of the benefits\nof a RISC architecture:",
    "start": "403789",
    "end": "407069"
  },
  {
    "text": "there's not much logic needed to decode the\ninstruction to produce the signals needed",
    "start": "407069",
    "end": "411330"
  },
  {
    "text": "to control the datapath.",
    "start": "411330",
    "end": "412750"
  },
  {
    "text": "In fact, many of the instruction fields are\nused as-is!",
    "start": "412750",
    "end": "416389"
  }
]