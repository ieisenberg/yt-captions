[
  {
    "text": " The following\ncontent is provided under a Creative\nCommons license. Your support will help MIT\nOpenCourseWare continue",
    "start": "0",
    "end": "6860"
  },
  {
    "text": "to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6860",
    "end": "13330"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13330",
    "end": "22080"
  },
  {
    "text": "PROFESSOR: Last\nlecture on sorting. Yay.",
    "start": "22080",
    "end": "27350"
  },
  {
    "text": "And it's one of the coolest\nlectures on sorting, I would say. We're going to talk about\nlinear-time sorting, when it's",
    "start": "27350",
    "end": "33400"
  },
  {
    "text": "possible and when\nit's not possible, and this lecture sort of\nfollows the tried and tested",
    "start": "33400",
    "end": "40370"
  },
  {
    "text": "mathematical structure which is\ntheorem, proof, counterexample.",
    "start": "40370",
    "end": "45920"
  },
  {
    "text": "So we're going to start\nwith a theorem which is that sorting requires n lg n\ntime at least in the worst case",
    "start": "45920",
    "end": "53489"
  },
  {
    "text": "and we're going to then prove\nthat in fact, you can get away with linear time sometimes.",
    "start": "53490",
    "end": "60020"
  },
  {
    "text": "Both of these terms are\ncorrect, but they're slightly different models of computation. Remember models of\ncomputation from lecture two?",
    "start": "60020",
    "end": "66890"
  },
  {
    "text": "So we're going to talk about a\nnew model of computation, which we've sort of been using\nfor most algorithms lately,",
    "start": "66890",
    "end": "73000"
  },
  {
    "text": "called the comparison model. And it's a model of\ncomputations that's really useful for proving\nlower bounds which",
    "start": "73000",
    "end": "78680"
  },
  {
    "text": "we haven't done much of yet. We're going to prove two\nvery simple lower bounds. One is that searching\nrequires lg n time.",
    "start": "78680",
    "end": "84840"
  },
  {
    "text": "This is basically binary\nsearch is optimal. And the other is that\nsorting requires n lg n time. This is that merge\nsort is optimal.",
    "start": "84840",
    "end": "91950"
  },
  {
    "text": "And then we're going to break\noutside of that comparison model, work in a different\nmodel of computation, our more",
    "start": "91950",
    "end": "96960"
  },
  {
    "text": "usual RAM model, and show\nthat in certain situations, we can get linear time.",
    "start": "96960",
    "end": "102420"
  },
  {
    "text": "So that's the plan. Let's start with this\ncomparison model.",
    "start": "102420",
    "end": "109605"
  },
  {
    "start": "109605",
    "end": "116390"
  },
  {
    "text": "So the idea in the\ncomparison model is to restrict what\nkind of operations we can do to be comparisons.",
    "start": "116390",
    "end": "123670"
  },
  {
    "text": "It's very straightforward. All input items are black\nboxes, you could say,",
    "start": "123670",
    "end": "136082"
  },
  {
    "text": "in that you don't really\nknow what they are. And a formal notion\nof black boxes",
    "start": "136082",
    "end": "142246"
  },
  {
    "text": "is something we talked\nabout last class at the end, abstract data type. So it's a data\nstructure, if you will.",
    "start": "142246",
    "end": "147579"
  },
  {
    "text": "Every item that you're\ngiven is a data structure. You want to sort them.",
    "start": "147580",
    "end": "152630"
  },
  {
    "text": "And the data structure\nsupports a single operation which is compared\nto another one. ",
    "start": "152630",
    "end": "158850"
  },
  {
    "text": "Only operation allowed-- I guess\nI should say plural actually--",
    "start": "158850",
    "end": "172420"
  },
  {
    "text": "are comparisons.  I'm going to be nice and I'll\nlet you do less than, less than",
    "start": "172420",
    "end": "181060"
  },
  {
    "text": "or equal to, greater\nthan, whatever. I guess there's only one other. Well, there's two more, greater\nthan or equal to and equals.",
    "start": "181060",
    "end": "189550"
  },
  {
    "text": "So you can do all the\nusual comparisons. You get a binary\nanswer, yes or no, and those the only\noperations you're given.",
    "start": "189550",
    "end": "195620"
  },
  {
    "text": " And basically the\nlast four lectures",
    "start": "195620",
    "end": "202280"
  },
  {
    "text": "have all been about\nalgorithms in this model. So merge sort, it\nmoves items around.",
    "start": "202280",
    "end": "207590"
  },
  {
    "text": "It's changing pointers to\nitems, but the only way it manipulates items\nor evaluates them",
    "start": "207590",
    "end": "213980"
  },
  {
    "text": "is to compare one\nagainst the other. Heaps and heaps sort\nalso only compare.",
    "start": "213980",
    "end": "220540"
  },
  {
    "text": "Binary search\ntrees only compare. Everything we've been seeing\nso far is about comparisons. ",
    "start": "220540",
    "end": "227570"
  },
  {
    "text": "And so all the algorithms we've\nseen so far are in this model and we're going to prove that\nthey are optimal in this model.",
    "start": "227570",
    "end": "233160"
  },
  {
    "text": "That's the plan. I should also define the\ncost of an algorithm.",
    "start": "233160",
    "end": "238959"
  },
  {
    "text": "Time cost is just going to\nbe the number of comparisons. This is the weird part,\nI guess, of the model.",
    "start": "238960",
    "end": "244050"
  },
  {
    "text": " So in everything we've done so\nfar, we've been in, I guess,",
    "start": "244050",
    "end": "251030"
  },
  {
    "text": "pointer machine or\nRAM, either way. We've been showing binary\nsearch trees or AVL trees,",
    "start": "251030",
    "end": "257519"
  },
  {
    "text": "you can do order lg n time,\nin the regular notion of time. But in particular they do\norder lg n comparisons.",
    "start": "257519",
    "end": "264650"
  },
  {
    "text": "And what we're going\nto show on the-- this is only interesting from a\nlower bound perspective-- we're going to show that even\nif you just count comparisons,",
    "start": "264650",
    "end": "271439"
  },
  {
    "text": "you can do whatever other\ncrazy things you want. You need lg n time to search. You need n lg n time to sort.",
    "start": "271439",
    "end": "278210"
  },
  {
    "text": "So that's our goal. ",
    "start": "278210",
    "end": "289160"
  },
  {
    "text": "So to prove that we're\ngoing to introduce the notion of a decision tree.",
    "start": "289160",
    "end": "295629"
  },
  {
    "start": "295630",
    "end": "309210"
  },
  {
    "text": "So the idea is the following: if\nwe know that our algorithms are only comparing items, we\ncan actually sort of draw",
    "start": "309210",
    "end": "317670"
  },
  {
    "text": "all the possible things\nthat an algorithm could do, so any comparison algorithm.",
    "start": "317670",
    "end": "324400"
  },
  {
    "start": "324400",
    "end": "331180"
  },
  {
    "text": "So this focusing\nin on comparisons lets us take a tree perspective\nof what our algorithm does--",
    "start": "331180",
    "end": "369730"
  },
  {
    "text": "all possible comparisons\nand their outcomes",
    "start": "369730",
    "end": "386140"
  },
  {
    "text": "and the resulting answer. ",
    "start": "386140",
    "end": "392242"
  },
  {
    "text": "I think this would be\na lot clearer if we look at an example--\nbinary search,",
    "start": "392242",
    "end": "402500"
  },
  {
    "text": "how you search a\nsimple algorithm. Look at the middle\ncompared to the item you're searching for go\nleft or go right.",
    "start": "402500",
    "end": "409889"
  },
  {
    "text": "And our idea-- I\ndidn't write it here--",
    "start": "409890",
    "end": "417820"
  },
  {
    "text": "is to look at a\nparticular value of n, n being the size of your\nproblem, so binary search,",
    "start": "417820",
    "end": "425000"
  },
  {
    "text": "you're searching among n\nitems for another item. And I'm going to keep it\nsimple, n equals three.",
    "start": "425000",
    "end": "435520"
  },
  {
    "text": "I think I'm going to go a little\nwide, use the whole board.",
    "start": "435520",
    "end": "442789"
  },
  {
    "text": "So n equals 3 we've\ngot array, say",
    "start": "442790",
    "end": "448800"
  },
  {
    "text": "index turning at zero-- pretty\nsimple binary search-- look in the middle, go\nleft or go right.",
    "start": "448800",
    "end": "456150"
  },
  {
    "text": "But I'm going to write out this\nalgorithm explicitly to say, all right, first thing I do\nis compare is A 1 less than x?",
    "start": "456150",
    "end": "467490"
  },
  {
    "text": "That's in all cases,\nno matter what the array is as long\nas n equals three, this is the first\noperation you do.",
    "start": "467490",
    "end": "472570"
  },
  {
    "text": "The answer is either yes or no. ",
    "start": "472570",
    "end": "477970"
  },
  {
    "text": "If the answer is no, that means\nx is less than or equal to A 1,",
    "start": "477970",
    "end": "484250"
  },
  {
    "text": "so it's to the left. Then we compare with A 0. Is A 0 less than x?",
    "start": "484250",
    "end": "491820"
  },
  {
    "text": "Answer is either yes or no.  If the answer is no,\nwe're kind of done.",
    "start": "491820",
    "end": "499170"
  },
  {
    "text": "We know that x is over\nhere or it might actually be equal to A 0.",
    "start": "499170",
    "end": "504217"
  },
  {
    "text": "If you want to figure\nout whether it's equal or less than, there\nwill be one more step. But I'll just stop it here.",
    "start": "504217",
    "end": "509330"
  },
  {
    "text": "We'll say, well in this case,\nx is less than or equal to A 0. I'm going to put it in\na box, say that's done",
    "start": "509330",
    "end": "515409"
  },
  {
    "text": "where the circles\nare the decisions. OK? If the answer is yes-- there's\nno to this question, yes",
    "start": "515409",
    "end": "522890"
  },
  {
    "text": "to this question-- then you know\nthat x falls in between here. Probably need a\nwider box for this.",
    "start": "522890",
    "end": "529440"
  },
  {
    "text": "So we have A 0 is less than\nx-- that was the yes to this--",
    "start": "529440",
    "end": "536070"
  },
  {
    "text": "and the note of this means that\nx is less than or equal to A 1, and so we basically\nidentified where x fits.",
    "start": "536070",
    "end": "542310"
  },
  {
    "text": "It's in between\nthose two values, possibly equal to this one. Again, one more comparison,\nyou could figure that out.",
    "start": "542310",
    "end": "547450"
  },
  {
    "text": " And then if x is to the right\nof A 1, so this is true,",
    "start": "547450",
    "end": "555220"
  },
  {
    "text": "then we check x against A 2 and\nthe answer is either no or yes.",
    "start": "555220",
    "end": "568319"
  },
  {
    "text": "And in the no case-- well I've\nconveniently laid things out here, it's sequential-- in the\nyes case, x is bigger than A 2",
    "start": "568320",
    "end": "577540"
  },
  {
    "text": "so it's outside the array. It's to the right. That's the answer.",
    "start": "577540",
    "end": "584110"
  },
  {
    "text": "Set. Yeah. And in the other case, it's\nin between A 1 and A 2.",
    "start": "584110",
    "end": "590750"
  },
  {
    "start": "590750",
    "end": "596640"
  },
  {
    "text": "It's a tedious process to write\nout an algorithm like this because a binary search-- it's\nnot so bad-- but if you tried",
    "start": "596640",
    "end": "605230"
  },
  {
    "text": "to write a sorting\nalgorithm out like this where the answers are\ndown the bottom, here's the sorted order, and all\nthe comparisons you do here,",
    "start": "605230",
    "end": "613190"
  },
  {
    "text": "the tree will actually\nbe of exponential size. So you don't actually want\nto represent an algorithm like this unless you're\njust trying to analyze it.",
    "start": "613190",
    "end": "621300"
  },
  {
    "text": "But it's nice to think\nof an algorithm this way because you see all possible\nexecutions all at once.",
    "start": "621300",
    "end": "626480"
  },
  {
    "start": "626480",
    "end": "632430"
  },
  {
    "text": "Let me talk about some\nfeatures of this tree versus the algorithm. So every internal\nnode-- actually,",
    "start": "632430",
    "end": "645084"
  },
  {
    "text": "I'm going to go over here. ",
    "start": "645084",
    "end": "652340"
  },
  {
    "text": "So we have a\ndecision tree and we",
    "start": "652340",
    "end": "658640"
  },
  {
    "text": "have an algorithm that\ndecision tree represents.",
    "start": "658640",
    "end": "663790"
  },
  {
    "text": "And so when we have an internal\nnode in the decision tree,",
    "start": "663790",
    "end": "669870"
  },
  {
    "text": "that corresponds to a binary\ndecision in the algorithm.",
    "start": "669870",
    "end": "675740"
  },
  {
    "text": "In this case, we're only\nlooking at comparisons. ",
    "start": "675740",
    "end": "682490"
  },
  {
    "text": "Slight technical\ndetail, decision trees are a little more\ngeneral than comparisons. Could be any binary decision\nhere and everything I say",
    "start": "682490",
    "end": "689740"
  },
  {
    "text": "will be true about any\nbinary decision you make. Comparisons are the ones\nwe kind of care about",
    "start": "689740",
    "end": "695070"
  },
  {
    "text": "because all of our\nalgorithms are doing that. And then a leaf in this tree\ncorresponds to-- it stores",
    "start": "695070",
    "end": "709220"
  },
  {
    "text": "or it represents that\nyou've found the answer. ",
    "start": "709220",
    "end": "714730"
  },
  {
    "text": "Maybe I'll say found. ",
    "start": "714730",
    "end": "721459"
  },
  {
    "text": "When the algorithm terminates,\nreturns some answer to the problem, that's\nwhat we write down here.",
    "start": "721460",
    "end": "728050"
  },
  {
    "text": "Here's where x is in this\narray and, yeah, we're done.",
    "start": "728050",
    "end": "736615"
  },
  {
    "text": "What else do we have?  Here's some puzzles for you. ",
    "start": "736616",
    "end": "745470"
  },
  {
    "text": "If I just wanted to look\nat a single execution of the algorithm, what does\nthat correspond to in the tree?",
    "start": "745470",
    "end": "751600"
  },
  {
    "text": " Yeah. AUDIENCE: Going from the root\nall the way down to the leaf.",
    "start": "751600",
    "end": "758670"
  },
  {
    "text": "PROFESSOR: Going from\nthe root down to a leaf. This is what I normally call a\nroot-to-leaf path, technically",
    "start": "758670",
    "end": "763920"
  },
  {
    "text": "a downward root-to-leaf path. How about the running\ntime of that execution?",
    "start": "763920",
    "end": "772600"
  },
  {
    "text": "How long does it take?  Keep going? AUDIENCE: Lg n.",
    "start": "772600",
    "end": "778730"
  },
  {
    "text": "PROFESSOR: Lg n in binary\nsearch, but in general. AUDIENCE: The\nlength of that path.",
    "start": "778730",
    "end": "784170"
  },
  {
    "text": "PROFESSOR: The\nlength of that path. Yeah. ",
    "start": "784170",
    "end": "791365"
  },
  {
    "text": "Got to make sure we get n cases\nright but I think it's correct, so if here is an execution of\nthe algorithm, when x happens",
    "start": "791365",
    "end": "798630"
  },
  {
    "text": "to be between A 0 and A 1,\nwe do one comparison here, a second comparison here,\nand then we're done.",
    "start": "798630",
    "end": "804810"
  },
  {
    "text": "So the cost was two and indeed\nthe length of this path is two. So it works out, no\noff-by-one errors.",
    "start": "804810",
    "end": "813360"
  },
  {
    "text": "All right, now\nexciting one for us, what we care about all\nthe time in this class",
    "start": "813360",
    "end": "819880"
  },
  {
    "text": "is worst-case running time. This is a feature of\nthe entire algorithm.",
    "start": "819880",
    "end": "825290"
  },
  {
    "text": "What is the worst-case running\ntime of a given decision tree? Yeah.",
    "start": "825290",
    "end": "830675"
  },
  {
    "text": "AUDIENCE: The height of the\nroot, the height of the tree. PROFESSOR: The height\nof the root also called the height of the tree.",
    "start": "830675",
    "end": "835750"
  },
  {
    "text": "Yep. ",
    "start": "835750",
    "end": "843230"
  },
  {
    "text": "Or the depth of the\ndeepest leaf, whatever. So in this case all the\nleaves have the same level, but in general we care\nabout the overall height.",
    "start": "843230",
    "end": "850589"
  },
  {
    "text": "How many levels in\nthis tree are there? It's the number of levels\nminus one, technically.",
    "start": "850590",
    "end": "856140"
  },
  {
    "text": "But the length of\nlongest root-to-leaf path is the definition of height.",
    "start": "856140",
    "end": "861780"
  },
  {
    "text": "Here it's two. In general we know for\nbinary search it's lg n,",
    "start": "861780",
    "end": "867380"
  },
  {
    "text": "but given an arbitrary\ndecision tree, we just have to figure out\nwhat the height of the tree is and we'll figure out the\nworst-case running time.",
    "start": "867380",
    "end": "872946"
  },
  {
    "text": "So this is why decision\ntrees are interesting. Not because it means they're\npretty I guess, but the reason",
    "start": "872946",
    "end": "879860"
  },
  {
    "text": "they're going to be useful is we\nhave this kind of hard question which is how much time do\nyou need to solve a problem?",
    "start": "879860",
    "end": "886640"
  },
  {
    "text": "And we're translating\nit into how low can you make your tree, which is a\nproblem we know a lot about.",
    "start": "886640",
    "end": "893210"
  },
  {
    "text": "Trees are pretty simple. These are binary trees. They're rooted, and so we\nknow lots of good things.",
    "start": "893210",
    "end": "900529"
  },
  {
    "text": " So let's prove\nsome lower bounds. ",
    "start": "900530",
    "end": "925320"
  },
  {
    "text": "So I claim that for\nsearching-- maybe I should define the problem\na little more formally--",
    "start": "925320",
    "end": "932200"
  },
  {
    "text": "I want to claim a\nlg n lower bound. So let's say for searching\nI have n preprocessed items.",
    "start": "932200",
    "end": "942355"
  },
  {
    "start": "942355",
    "end": "949040"
  },
  {
    "text": "Then finding a given item among\nthem in the comparison model,",
    "start": "949040",
    "end": "965355"
  },
  {
    "text": "so all you're allowed to do are\ncompare items and other stuff, but the only things you're\nallowed to do with the items",
    "start": "965355",
    "end": "972370"
  },
  {
    "text": "is compare them. ",
    "start": "972370",
    "end": "978180"
  },
  {
    "text": "Requires omega lg n\ncomparisons in the worst case.",
    "start": "978180",
    "end": "985297"
  },
  {
    "text": "It's kind of tedious to\nwrite down these theorems, but for our first\nlower bounds, I thought I'd be super explicit.",
    "start": "985297",
    "end": "991090"
  },
  {
    "text": " I mentioned here that the\nitems are preprocessed",
    "start": "991090",
    "end": "997091"
  },
  {
    "text": "to mean you could do whatever\nyou want the items ahead of time, that's for free. So I can sort them\nin particular,",
    "start": "997091",
    "end": "1002690"
  },
  {
    "text": "which lets me do binary search. I could build them into an AVL\ntree, could do lots of things,",
    "start": "1002690",
    "end": "1007980"
  },
  {
    "text": "but no matter what I do to find\nanother item takes lg n time. ",
    "start": "1007980",
    "end": "1017851"
  },
  {
    "text": "Can someone tell me why?  Who doesn't have the lecture\nnotes right in front them,",
    "start": "1017851",
    "end": "1024416"
  },
  {
    "text": "that would make it easy. This is a little\nmore interesting,",
    "start": "1024416",
    "end": "1032599"
  },
  {
    "text": "but we had all the tools\nat our disposal now. We want to show that\nthis at least lg n. ",
    "start": "1032599",
    "end": "1040949"
  },
  {
    "text": "Why? Yeah. AUDIENCE: [INAUDIBLE]\nhave a no or yes, right?",
    "start": "1040950",
    "end": "1046579"
  },
  {
    "text": "So it's-- PROFESSOR: Right. AUDIENCE: --omega lg n tree. PROFESSOR: OK. At each step, we only\nhave a no or yes. That's a binary tree.",
    "start": "1046579",
    "end": "1052560"
  },
  {
    "text": " So that makes you think lg n. AUDIENCE: That's possible,\nit could be lg n.",
    "start": "1052560",
    "end": "1059179"
  },
  {
    "text": "PROFESSOR: Maximum actually\ncould be arbitrarily large. You could do a linear search\nand the height will be m.",
    "start": "1059179",
    "end": "1064929"
  },
  {
    "text": "We care about the\nminimum of course. Why does it have to be-- why\ndoes the height of a tree",
    "start": "1064930",
    "end": "1070040"
  },
  {
    "text": "have to be at least lg n? There's one more\nthing we need to say. Yeah. AUDIENCE: The tree has\nto contain all possible--",
    "start": "1070040",
    "end": "1076130"
  },
  {
    "text": "PROFESSOR: Because the\ntree has to contain all possible--\nanswers, let's say. Yeah, exactly.",
    "start": "1076130",
    "end": "1082640"
  },
  {
    "text": "I think that's worth a pillow. See if I can do this-- oh!",
    "start": "1082640",
    "end": "1088880"
  },
  {
    "text": "Ouch. I knew it was only\na matter of time. Sorry.",
    "start": "1088880",
    "end": "1094190"
  },
  {
    "text": "I'll pay you later. Damages. ",
    "start": "1094190",
    "end": "1100627"
  },
  {
    "text": "At least I didn't hit\na laptop or something. ",
    "start": "1100627",
    "end": "1106330"
  },
  {
    "text": "All right, so decision\ntree is binary--",
    "start": "1106330",
    "end": "1114090"
  },
  {
    "text": "that was the first\nthing-- and it must have at least n\nleaves, one for each answer.",
    "start": "1114090",
    "end": "1127970"
  },
  {
    "start": "1127970",
    "end": "1134330"
  },
  {
    "text": "At least. Now, at the leaf you have\nto know what the answer is, but there may be many leaves\nthat have the same answer.",
    "start": "1134330",
    "end": "1141550"
  },
  {
    "text": "That's possible. And indeed that will happen\nnot for binary search but typical algorithm.",
    "start": "1141550",
    "end": "1147630"
  },
  {
    "text": "There's multiple paths\nto get the same answer, so there may be\nmore leaves than n.",
    "start": "1147630",
    "end": "1153990"
  },
  {
    "text": "And in fact, if you want to\nknow this kind of thing, where x fits in this perspective,\nthere's n plus 1 answers.",
    "start": "1153990",
    "end": "1161649"
  },
  {
    "text": "If you want to know\nis it equal or is it strictly between two things\nthere's 2n plus 1 answers. But in all cases, there's\nat least n answers",
    "start": "1161649",
    "end": "1168860"
  },
  {
    "text": "and that's all I need. In particular there's--\nsay x exactly matches one",
    "start": "1168860",
    "end": "1174990"
  },
  {
    "text": "of the given items--\nthere's n items-- so you need to have\nat least n leaves.",
    "start": "1174990",
    "end": "1180860"
  },
  {
    "text": "Maybe have more, I don't care. But it I have a binary tree\nwith at least n leaves, the height has to\nbe at least lg n.",
    "start": "1180860",
    "end": "1187470"
  },
  {
    "start": "1187470",
    "end": "1195360"
  },
  {
    "text": "We're done. The height is the\nworst-case running time. Super, super easy proof.",
    "start": "1195360",
    "end": "1201940"
  },
  {
    "text": " So easy, it's never been\ntaught in 006 before.",
    "start": "1201940",
    "end": "1207660"
  },
  {
    "text": "But I think it's a good warm\nup for the next one which is sorting. Sorting is really\nthe same thing.",
    "start": "1207660",
    "end": "1215630"
  },
  {
    "text": "It's not going to be any harder\nexcept that it's a little more",
    "start": "1215630",
    "end": "1221280"
  },
  {
    "text": "math but really not much more. ",
    "start": "1221280",
    "end": "1227510"
  },
  {
    "text": "So now we know-- we just\nproved two useful facts-- one is that binary search is\noptimal in a comparison model,",
    "start": "1227510",
    "end": "1235200"
  },
  {
    "text": "the other is that binary search\ntrees are actually a good way to solve a problem. If your goal is to solve search\nand all you're allowed to do",
    "start": "1235200",
    "end": "1242620"
  },
  {
    "text": "is comparisons, then\nyou need lg n time. And so the search or next larger\nor next smaller, predecessor,",
    "start": "1242620",
    "end": "1251030"
  },
  {
    "text": "successor, in\nbinary search trees need to take at least lg n time. No matter how you do it,\neven if you don't use a tree.",
    "start": "1251030",
    "end": "1259190"
  },
  {
    "text": "So this justifies why binary\nsearch trees are interesting, because again the\ncomparison model, that's the best you can hope to do.",
    "start": "1259190",
    "end": "1267750"
  },
  {
    "text": "So that's comforting. That's why I like lower bounds\nand theoretical computer science in general because\nyou know when you're done,",
    "start": "1267750",
    "end": "1274830"
  },
  {
    "text": "at least in a given model. Whenever-- we're\nnever actually done, because we can always\nchange the model.",
    "start": "1274830",
    "end": "1282005"
  },
  {
    "text": "At least we understand the\nlimitations of comparisons. So for sorting, we claim\na lower bound of n lg n.",
    "start": "1282005",
    "end": "1288987"
  },
  {
    "text": "You've heard n lg\nn a zillion times. You probably know this\nis true, but now we actually get to\nprove that it's true.",
    "start": "1288988",
    "end": "1296420"
  },
  {
    "text": "So we just follow\nthe same strategy. Decision tree is binary. The question is how many\nleaves does it have to have?",
    "start": "1296420",
    "end": "1305240"
  },
  {
    "text": "So for sorting-- I didn't\ndraw up an example--",
    "start": "1305240",
    "end": "1310908"
  },
  {
    "text": "I'm not going to draw\nan example of sorting because the trees get ginormous. Right? Because of the depth is n\nlog n, the height is n log n,",
    "start": "1310909",
    "end": "1321610"
  },
  {
    "text": "then there's binary\nbranching everywhere. That's a lot of nodes. Two to the n lg n is big.",
    "start": "1321610",
    "end": "1330030"
  },
  {
    "text": "More than two to\nthe n even, so it's hard to draw a picture\neven for n equals 3.",
    "start": "1330030",
    "end": "1335237"
  },
  {
    "text": "You can do it. People have done it. I don't want to. I'm lazy.",
    "start": "1335237",
    "end": "1340590"
  },
  {
    "text": "But the internal nodes\nlook just the same. You're comparing two\nitems, A I verses",
    "start": "1340590",
    "end": "1346440"
  },
  {
    "text": "A J. I'll just draw\nthe generic version. You have A I less than\nA J, question mark.",
    "start": "1346440",
    "end": "1354080"
  },
  {
    "text": "And then you'll\nhave a no and a yes. So that's what a typical\ncomparison looks like. Swaps don't appear\nhere, because we're just",
    "start": "1354080",
    "end": "1362009"
  },
  {
    "text": "looking at the comparisons. And then when you get\ndown to a leaf, a leaf-- this is the interesting part--\nthe leaf will look like this.",
    "start": "1362010",
    "end": "1374440"
  },
  {
    "text": "Well I took the original\nA 5 and that turned out to be the smallest element. Then-- maybe I'll\nwrite it this way--",
    "start": "1374440",
    "end": "1381870"
  },
  {
    "text": "then I have A 7, that turned\nout to be the next smallest element, then A 1\nthen A 0, whatever.",
    "start": "1381870",
    "end": "1393020"
  },
  {
    "text": "Hey, right at the end, somehow\nyou know the sorted order and you can just write it down.",
    "start": "1393020",
    "end": "1398153"
  },
  {
    "text": "We're not charging for this. We're only charging\nfor comparisons. So however, maybe\nyou've done swaps,",
    "start": "1398154",
    "end": "1403730"
  },
  {
    "text": "in the end you know\nwhat the final order is and so you just write it down. And your goal is to make enough\ncomparisons that you figure out",
    "start": "1403730",
    "end": "1411090"
  },
  {
    "text": "what the sorted order is. We claim the number\nof comparisons here has to be at least n lg n. ",
    "start": "1411090",
    "end": "1418410"
  },
  {
    "text": "OK, why? Because the decision tree is\nbinary and the number of leaves",
    "start": "1418410",
    "end": "1432649"
  },
  {
    "text": "has to be at least the\nnumber of possible answers. Could be more because\neach answer could appear",
    "start": "1432650",
    "end": "1438990"
  },
  {
    "text": "in several leaves\nand it probably will in a typical sorting algorithm. And how many possible\nanswers are there?",
    "start": "1438990",
    "end": "1445640"
  },
  {
    "text": " Batter? AUDIENCE: n factorial. PROFESSOR: n factorial,\nnumber of permutations.",
    "start": "1445640",
    "end": "1452880"
  },
  {
    "text": "This is a permutation\nof the input sequence and if all the items\nyou're given are distinct,",
    "start": "1452880",
    "end": "1458200"
  },
  {
    "text": "there will be n factorial\npermutations of them. So that's the worst case.",
    "start": "1458200",
    "end": "1465350"
  },
  {
    "text": "So n factorial. Now the tricky part\nis the algebra.",
    "start": "1465350",
    "end": "1472870"
  },
  {
    "text": "Say, oh, well then\nthe height is at least lg base 2 of n\nfactorial-- lg base 2 because it's a binary tree.",
    "start": "1472870",
    "end": "1481469"
  },
  {
    "text": "You can put a parentheses\nhere if you want, they're not necessary.",
    "start": "1481469",
    "end": "1486510"
  },
  {
    "text": "So now I want to claim\nthat this is n lg n. How do I do that? ",
    "start": "1486510",
    "end": "1493100"
  },
  {
    "text": "Maybe you just know? Yeah. AUDIENCE: We can either use\nStirling's approximation",
    "start": "1493100",
    "end": "1498676"
  },
  {
    "text": "or we could write it\nout as a sum [INAUDIBLE]",
    "start": "1498676",
    "end": "1503910"
  },
  {
    "text": "PROFESSOR: Wow, cool. All right, you could either\nuse Stirling's approximation or write it out as a sum. I've never done it with it sum.",
    "start": "1503910",
    "end": "1510151"
  },
  {
    "text": "Let's do that, that\nsounds like fun. So, right? I like that because you\nknow Stirling's-- it's like",
    "start": "1510151",
    "end": "1517507"
  },
  {
    "text": "you've got to know Stirling\nand that's kind of annoying. What if you don't know Sterling? But we all know the\ndefinition of factorial.",
    "start": "1517507",
    "end": "1523649"
  },
  {
    "text": "I mean, we learned\nin grade school just because it's fun, right? Oh, I guess we-- I mean we\ndid because we're geeks.",
    "start": "1523650",
    "end": "1530990"
  },
  {
    "text": "And then we know the lg of our\nproduct is the sum of the lg's. So this is lg n plus lg n\nminus 1 plus lg 2 plus lg 1.",
    "start": "1530990",
    "end": "1544380"
  },
  {
    "text": " I think at this\npoint it's easier to use summation\nnotation, so sum of lg i.",
    "start": "1544380",
    "end": "1552500"
  },
  {
    "text": "OK now we've got to do sum,\nthis is 1 to n I guess.",
    "start": "1552500",
    "end": "1557950"
  },
  {
    "text": "Now we need to know something\nabout lg's, so it's not so easy. It's easy to show-- I mean,\ncertainly this is at most n lg",
    "start": "1557950",
    "end": "1566630"
  },
  {
    "text": "n, but we need show that\nit's at least n lg n. That's a little trickier. I happen to know it's true.",
    "start": "1566630",
    "end": "1572555"
  },
  {
    "text": " But I'd know it even\nin the summation form",
    "start": "1572555",
    "end": "1577630"
  },
  {
    "text": "because I know that lg-- lg\nlooks like this basically,",
    "start": "1577630",
    "end": "1583360"
  },
  {
    "text": "and so if you're\nadding up, you're taking the area under\nthis curve right? Oh, look at these integrals.",
    "start": "1583360",
    "end": "1588696"
  },
  {
    "text": "Oh, integrals. Brings back memories. This is discrete math class,\nthough, continuous stuff.",
    "start": "1588696",
    "end": "1595555"
  },
  {
    "text": "So you're adding up all\nthese numbers, right? This is lg i over all the\ni's and basically all of them",
    "start": "1595555",
    "end": "1601060"
  },
  {
    "text": "have the same length. Like if you look at\nthe last half, that would be one way to prove it.",
    "start": "1601060",
    "end": "1607029"
  },
  {
    "text": "Ah, it's fun, haven't done\nsummations in so long. Good stuff. [? IS042 ?] material\nbut applied to algorithms",
    "start": "1607030",
    "end": "1615950"
  },
  {
    "text": "and in algorithms it's fun\nbecause you could throw away constant factors\nand life is good.",
    "start": "1615950",
    "end": "1621690"
  },
  {
    "text": "We don't need exact\nanswers really. You can find an exact\nanswer, but let's say you look at the last half.",
    "start": "1621690",
    "end": "1628280"
  },
  {
    "text": "Those are all going\nto be basically lg n. You can prove that. So this is going to be\nat least the sum where",
    "start": "1628280",
    "end": "1635120"
  },
  {
    "text": "i equals n over 2 n of lg i.",
    "start": "1635120",
    "end": "1641550"
  },
  {
    "text": "Here I just throw away the\nfirst out of our two terms. And this is going to be at\nleast sum i equals n over 2",
    "start": "1641550",
    "end": "1648659"
  },
  {
    "text": "to n of lg n over 2. ",
    "start": "1648660",
    "end": "1654650"
  },
  {
    "text": "Each of these terms is\nbigger than lg n over 2 so if I just say, well,\nthey're all lg n over 2 that's",
    "start": "1654650",
    "end": "1659890"
  },
  {
    "text": "going to give me\nsomething even smaller. Now the lg n over 2,\nthat's just lg n minus 1. ",
    "start": "1659890",
    "end": "1668760"
  },
  {
    "text": "I love this. It's going to give\nthe right answer even. So that's an equals and so\nthis equals n lg n minus n.",
    "start": "1668760",
    "end": "1678770"
  },
  {
    "text": "That summation I can do. All the terms are the\nsame, sorry n over 2.",
    "start": "1678770",
    "end": "1685070"
  },
  {
    "text": "Not quite what I wanted. Close enough. ",
    "start": "1685070",
    "end": "1690344"
  },
  {
    "text": "Sorry there is\nonly n over 2 terms here, ignoring\nfloors and ceilings. So I get n lg n divided by 2.",
    "start": "1690344",
    "end": "1698309"
  },
  {
    "text": "This is omega n lg n\nbecause this n term is smaller than n lg n.",
    "start": "1698310",
    "end": "1704720"
  },
  {
    "text": "So this one dominates. Doesn't matter if this one's\nnegative, because it's smaller. This is omega n lg n.",
    "start": "1704720",
    "end": "1711120"
  },
  {
    "text": "We're done. Sorting is omega n lg n. Very easy. Who said summations?",
    "start": "1711120",
    "end": "1717090"
  },
  {
    "text": "All right. Why don't you come\ncollect a pillow, I'm not going to throw that far. Afterwards.",
    "start": "1717090",
    "end": "1722510"
  },
  {
    "text": "OK. That's one way to do it. Another way to do\nit, if you happen to know Stirling's formula\nfor n factorial-- n factorial",
    "start": "1722510",
    "end": "1730540"
  },
  {
    "text": "is about n over e to the n\ntimes square root of 2 pi n.",
    "start": "1730540",
    "end": "1736560"
  },
  {
    "text": "Right? If you do Taylor series\napproximation of n factorial, the first term, which is the\nmost important term for us",
    "start": "1736560",
    "end": "1744000"
  },
  {
    "text": "because as the\nasymptotically dominating term is square root of 2 pi\nn times n over e to the n.",
    "start": "1744000",
    "end": "1749390"
  },
  {
    "text": "Hope I got that right. Yeah, clearly I've\nbeen studying.",
    "start": "1749390",
    "end": "1755600"
  },
  {
    "text": "You take lg's of that and\nyou do the same thing of lg of a product is sum of\nthe lg's and you end up",
    "start": "1755600",
    "end": "1761440"
  },
  {
    "text": "with-- the right answer is\nactually n lg n minus order n.",
    "start": "1761440",
    "end": "1768149"
  },
  {
    "text": "So I was off by a\nfactor of 2 here. The linear term--\nit does appear,",
    "start": "1768150",
    "end": "1774820"
  },
  {
    "text": "but it's smaller than this\nand this is also omega n lg n. If you don't care about\nconstants, it doesn't matter.",
    "start": "1774820",
    "end": "1780250"
  },
  {
    "text": "If you care about constants,\nthe constant is 1. Kind of nice. Easy to prove a one half.",
    "start": "1780250",
    "end": "1786360"
  },
  {
    "text": "And if you look at the lecture\nnotes it works through that. But I think we've seen\nenough of that lower bound.",
    "start": "1786360",
    "end": "1793300"
  },
  {
    "text": "And that's the end of\nour lower bound topic. Any questions on that? So it's really easy.",
    "start": "1793300",
    "end": "1799580"
  },
  {
    "text": "Once you set up this framework\nof comparison trees and now",
    "start": "1799580",
    "end": "1805590"
  },
  {
    "text": "it becomes just a question\nof the height of a comparison tree. Comparison trees are binary.",
    "start": "1805590",
    "end": "1811180"
  },
  {
    "text": "Just count how many leaves\ndo you have to have, take lg of that and you\nget a lower bound of that.",
    "start": "1811180",
    "end": "1816576"
  },
  {
    "text": "AUDIENCE: What is meant\nby n preprocessed items? PROFESSOR: Oh, yeah.",
    "start": "1816576",
    "end": "1822790"
  },
  {
    "text": "For searching I was trying\nto be careful and say, well, if I have n preprocessed items.",
    "start": "1822790",
    "end": "1827950"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: It means you can\ndo whatever the heck you want. So here's the model.",
    "start": "1827950",
    "end": "1833900"
  },
  {
    "text": "I give you n items. You can do all pairwise\ncomparisons between those items for free and then I\ngive you a new item",
    "start": "1833900",
    "end": "1841180"
  },
  {
    "text": "and then I start\ncharging for comparisons. So another way to\nsay it is I only charge between for comparisons\nbetween x and the other items.",
    "start": "1841180",
    "end": "1850800"
  },
  {
    "text": "And even then you need lg n. AUDIENCE: [INAUDIBLE]\ncase for sorting, right? PROFESSOR: With sorting\nthey were not preprocessed.",
    "start": "1850800",
    "end": "1857800"
  },
  {
    "text": "Yeah, I didn't\nwrite the theorem. It's just sorting and given\nitems, no preprocessing. AUDIENCE: What if there\nwere preprocessing?",
    "start": "1857800",
    "end": "1863190"
  },
  {
    "text": "PROFESSOR: If they\nwere preprocessed, you'd be done in\nzero comparisons. Yeah, exactly. This theorem is also true\nif I remove preprocessed,",
    "start": "1863190",
    "end": "1871580"
  },
  {
    "text": "but in fact then\nyou need n time. Unfortunately this\nproof technique will only prove a\nlower bound of log n,",
    "start": "1871580",
    "end": "1877670"
  },
  {
    "text": "because even if these items\nwere not preprocessed, then you have to do linear\nsearch basically.",
    "start": "1877670",
    "end": "1883104"
  },
  {
    "text": "So if you don't know\nanything about the items, you need linear time. But this proof will only\nprove a lower bound of log n.",
    "start": "1883104",
    "end": "1889950"
  },
  {
    "text": "So this technique,\nwhile cool and simple, does not always give\nyou the right answer. It just gives you a lower bound.",
    "start": "1889950",
    "end": "1896170"
  },
  {
    "text": "May not be the right lower\nbound, may not be tight. So searching always requires lg\nn time and what's interesting",
    "start": "1896170",
    "end": "1902870"
  },
  {
    "text": "is it requires it even when\nyou preprocess the items. Sorting, if you haven't\npreprocessed the items,",
    "start": "1902870",
    "end": "1909049"
  },
  {
    "text": "then it takes n lg n. Clear? Good. Now we get to the algorithms\npart of the lecture, always",
    "start": "1909050",
    "end": "1915843"
  },
  {
    "text": "the most fun. The moments you've\nbeen waiting for. Let me erase comparison trees. ",
    "start": "1915843",
    "end": "1923950"
  },
  {
    "text": "Henceforth and I mean not\nonly this lecture, but also the next three lectures\nwhich are about hashing,",
    "start": "1923950",
    "end": "1930380"
  },
  {
    "text": "we will not be in\nthe comparison model because for comparison\nmodel, we're done.",
    "start": "1930380",
    "end": "1936760"
  },
  {
    "text": "We solved search, we solved\nsorting, n lg n three ways. I mean, how much more can we do?",
    "start": "1936760",
    "end": "1942770"
  },
  {
    "text": "So it's time to\nbump it up a notch, increase our model power.",
    "start": "1942770",
    "end": "1949130"
  },
  {
    "text": "We've talked about the RAM\nin particular, Random Access Machine, where\nmemory is in array,",
    "start": "1949130",
    "end": "1955660"
  },
  {
    "text": "you can access anything in\nthe array in constant time. We're going to use that power of\nthe RAM to sort in linear time,",
    "start": "1955660",
    "end": "1965184"
  },
  {
    "text": "sometimes. ",
    "start": "1965185",
    "end": "1972490"
  },
  {
    "text": "A more appropriate title for\nthis section of this lecture would be integer sorting.",
    "start": "1972490",
    "end": "1977850"
  },
  {
    "text": " OK, so far we've been\ntalking about comparison",
    "start": "1977850",
    "end": "1984120"
  },
  {
    "text": "sorting where the items you're\ngiven-- the only thing you know about them is that you can\ncompare them in constant time.",
    "start": "1984120",
    "end": "1991110"
  },
  {
    "text": "But now we're going to\nthink about the situation where the things that\nyou're sorting are integers.",
    "start": "1991110",
    "end": "1996310"
  },
  {
    "text": "That's a big assumption but it's\na practical assumption a lot of the time. If you're not sorting integers\nyou can map whatever the heck",
    "start": "1996310",
    "end": "2003720"
  },
  {
    "text": "you're sorting into integers. And usually it's\nalready been done because you're representing\nit on a computer.",
    "start": "2003720",
    "end": "2009140"
  },
  {
    "text": "You've already represented your\nthing is an integer of sorts. Bad pun. ",
    "start": "2009140",
    "end": "2016870"
  },
  {
    "text": "This is an assumption. So we assume-- going to\nbe a little more precise.",
    "start": "2016870",
    "end": "2023390"
  },
  {
    "text": "The keys you're\nsorting are integers.",
    "start": "2023390",
    "end": "2029200"
  },
  {
    "text": "There's still-- I'm going\nto put a little n here, remember there's n keys. ",
    "start": "2029200",
    "end": "2038100"
  },
  {
    "text": "I'm also going to assume\nthat they're in some range. And for convenience, I'm going\nto assume that they're all",
    "start": "2038100",
    "end": "2044300"
  },
  {
    "text": "non-negative-- it's not hard\nto deal with negative numbers, but it's just\nconvenient to think",
    "start": "2044300",
    "end": "2049719"
  },
  {
    "text": "about non-negative numbers. So if you start at zero,\nthere's some maximum value,",
    "start": "2049719",
    "end": "2055260"
  },
  {
    "text": "say k minus 1. So there's k different\nvalues they could be. K could be anything. It's a parameter.",
    "start": "2055260",
    "end": "2060638"
  },
  {
    "text": "We've always had\nn as a parameter, now we're going to also\nhave k as a parameter. ",
    "start": "2060639",
    "end": "2067750"
  },
  {
    "text": "And just for completeness--\nand each fits in a word.",
    "start": "2067750",
    "end": "2076658"
  },
  {
    "text": "Remember the machine\nword of your RAM machine?",
    "start": "2076659",
    "end": "2082441"
  },
  {
    "text": "Words were the\nthings that we could manipulate in constant time. Now this is a very\nreasonable assumption because we've been\nassuming so far",
    "start": "2082442",
    "end": "2088280"
  },
  {
    "text": "you can compare two keys\nto items in constant time. To get that for\nintegers, you need",
    "start": "2088280",
    "end": "2094230"
  },
  {
    "text": "to assume that your integers\nare fitting in words. We usually don't\nstate this assumption, but I thought I'd throw\nit in just for kicks.",
    "start": "2094230",
    "end": "2099744"
  },
  {
    "text": "So we've got a\nbunch of integers, each one fits in a word. I could compare them,\nthat takes constant time, or I could add them or subtract\nthem or multiply them or divide",
    "start": "2099745",
    "end": "2109510"
  },
  {
    "text": "them or do whatever\nthe heck I want. It turns out you can do a\nlot more than comparisons",
    "start": "2109510",
    "end": "2124582"
  },
  {
    "text": "and it turns out\nthis will help us. ",
    "start": "2124582",
    "end": "2140950"
  },
  {
    "text": "I don't know if I want to\ntell you the answer here. For k-- not too big-- you\ncan sort in linear time.",
    "start": "2140950",
    "end": "2149940"
  },
  {
    "text": " Believe it or not, this\ntopic, integer sorting,",
    "start": "2149940",
    "end": "2156500"
  },
  {
    "text": "is still a major\narea of research. People are still trying\nto solve this problem. One conjecture is that\neven in all cases,",
    "start": "2156500",
    "end": "2165640"
  },
  {
    "text": "you can sort in\nlinear time given any integers that fit in words. This is not yet solved.",
    "start": "2165640",
    "end": "2171660"
  },
  {
    "text": "Best algorithm is n\ntimes square root lg lg n with high probability.",
    "start": "2171660",
    "end": "2177810"
  },
  {
    "text": "So it's almost-- almost n. It's a lot better than n lg n. I'll just write that for fun\ncase you can't parse in words.",
    "start": "2177810",
    "end": "2188620"
  },
  {
    "text": "This is the best\nalgorithms to date. I would conjecture you can do\nlinear time in all situations.",
    "start": "2188620",
    "end": "2194500"
  },
  {
    "text": "We're not going to\ncover this algorithm. That's a little beyond us. It's in advanced algorithms\nif you're interested, 6854.",
    "start": "2194500",
    "end": "2202359"
  },
  {
    "text": "But we're going to show that\nfor a lot of cases of interest when k is not\nginormous, it's really",
    "start": "2202360",
    "end": "2207430"
  },
  {
    "text": "easy to sort in linear time. All right? And our first algorithm to\nachieve this is counting sort.",
    "start": "2207430",
    "end": "2216010"
  },
  {
    "text": " Counting sort does not\nmake any comparisons.",
    "start": "2216010",
    "end": "2223680"
  },
  {
    "text": "It only does other stuff. And it's going to depend on n.",
    "start": "2223680",
    "end": "2229760"
  },
  {
    "text": "It's going to depend on k. We'll get some running times not\nbad as long as k is not giant.",
    "start": "2229760",
    "end": "2234819"
  },
  {
    "text": "So as the name might\nsuggest, what you do is count all the items.",
    "start": "2234820",
    "end": "2241140"
  },
  {
    "text": "So imagine I give you a bunch\nof keys like 3, 5 7, 5, 5, 3, 6,",
    "start": "2241140",
    "end": "2250569"
  },
  {
    "text": "whatever. I'd like to run\nthrough this array and say, ah, I see there\nare two 3's and there",
    "start": "2250570",
    "end": "2257440"
  },
  {
    "text": "are three 5's and there's one 6,\nand one 7, so how do I sort it?",
    "start": "2257440",
    "end": "2264670"
  },
  {
    "text": "I'd like to say, well\n3 is smallest key and there's two of them, so\nI'll write two 3's, then there's three 5's so I'll write three\n5's, and then there's a 6",
    "start": "2264670",
    "end": "2273020"
  },
  {
    "text": "and then there's a 7. That's the intuition. Now how do I-- how I do\nthat with an algorithm?",
    "start": "2273020",
    "end": "2280170"
  },
  {
    "text": "Suggestions? Yeah? AUDIENCE: [INAUDIBLE] ",
    "start": "2280170",
    "end": "2290869"
  },
  {
    "text": "PROFESSOR: Yeah. Allocate an array\nof memory, which is my counters-- I'm\ngoing to count each k.",
    "start": "2290870",
    "end": "2295900"
  },
  {
    "text": "I need an array of\nsize k because there are k possible keys. Convenient those two terms\nstart with the same letter.",
    "start": "2295900",
    "end": "2303460"
  },
  {
    "text": "And then I'll just--\nwhenever I see an-- I'm going to run\nthrough the items in order, when I see an item, I say,\nOK, well that's key 3.",
    "start": "2303460",
    "end": "2310140"
  },
  {
    "text": "I will look at index 3 of this\narray, increment that counter. Then I see 5,\nincrement that counter.",
    "start": "2310140",
    "end": "2316620"
  },
  {
    "text": "I see 7, I see 5, I\nsee 5, and by the end, I'll know that there are three\n5's and two 3's and so on.",
    "start": "2316620",
    "end": "2323859"
  },
  {
    "text": "That's how I count. And then how do\noutput the items? ",
    "start": "2323859",
    "end": "2328890"
  },
  {
    "text": "You want to keep going? AUDIENCE: [INAUDIBLE] ",
    "start": "2328890",
    "end": "2336300"
  },
  {
    "text": "PROFESSOR: Yeah, just\ntraverse the array of counters and the\narray is already",
    "start": "2336300",
    "end": "2343250"
  },
  {
    "text": "written in order by key,\nso it's really easy. I mean I could draw this array\nfor you if you like at 0, 1,",
    "start": "2343250",
    "end": "2350220"
  },
  {
    "text": "2 3. Here's the 3 position, it\nends up with the value 2.",
    "start": "2350220",
    "end": "2355270"
  },
  {
    "text": "And if I just go through, a lot\nof these will have 0's in them, just skip those. When I find a\nnon-zero entry, just",
    "start": "2355270",
    "end": "2361490"
  },
  {
    "text": "write-- oh, that means there's\ntwo 3's there, so I write 3, 3. OK, that algorithm\nwould work but I'm not",
    "start": "2361490",
    "end": "2367920"
  },
  {
    "text": "going to even write it down,\nnot even going to dignify it, because all it does\nis sort integers.",
    "start": "2367920",
    "end": "2375920"
  },
  {
    "text": "But there's a\nsubtlety here which we're going to need in a moment,\nwhich is why I stress it, that really we have n items.",
    "start": "2375920",
    "end": "2382750"
  },
  {
    "text": "Each of them has a key, but\nit might have other stuff too that we'd like to\nbring along for the ride.",
    "start": "2382750",
    "end": "2388290"
  },
  {
    "text": "We'll see why we care\nabout that in a moment. But it's also a\ntypical situation, like you have a spreadsheet and\nyou click sort by this column.",
    "start": "2388290",
    "end": "2397440"
  },
  {
    "text": "Well every row has a\nwhole bunch of data but you're only trying to\nsort by one of those fields, that one column.",
    "start": "2397440",
    "end": "2404240"
  },
  {
    "text": "And that one field\nmay be an integer, but there's all this other\nstuff you'd like to bring along. And when you say, oh,\nthere are two 3's,",
    "start": "2404240",
    "end": "2411910"
  },
  {
    "text": "you know there's this\n3, which you know maybe has a cloud around it.",
    "start": "2411910",
    "end": "2417270"
  },
  {
    "text": "There's this 3 which maybe\nhas a heart around it. That's about the limit\nof my drawing abilities. And now say, oh, there\nare two 3's but which 3?",
    "start": "2417270",
    "end": "2424792"
  },
  {
    "text": "Should the cloud go first,\nshould the heart go first? I mean I don't care\nwhich goes first, maybe-- I do, actually--\nbut I will in a moment.",
    "start": "2424792",
    "end": "2432330"
  },
  {
    "text": "That's another topic. But I'd like to bring\nthat cloud somewhere. I want to put the\ncloud somewhere,",
    "start": "2432330",
    "end": "2437500"
  },
  {
    "text": "want to put the heart somewhere. All right, so here's\na way to do all that. Basically the same algorithm\nbut I'm just going to use lists.",
    "start": "2437500",
    "end": "2453560"
  },
  {
    "text": " Still have an array of k\nthings but no longer counters,",
    "start": "2453560",
    "end": "2460700"
  },
  {
    "text": "now lists. They could be linked lists,\nthey could be python lists. It won't matter for my purposes.",
    "start": "2460700",
    "end": "2466230"
  },
  {
    "text": "And then I'll say for j\nand range of n-- that'd",
    "start": "2466230",
    "end": "2474940"
  },
  {
    "text": "be super pythonic here-- I\nwant to look at the list who's at index a of j\nand append a of j.",
    "start": "2474940",
    "end": "2492500"
  },
  {
    "text": "And then the output is going\nto be an empty list initially.",
    "start": "2492500",
    "end": "2499765"
  },
  {
    "text": " And then I iterate through the\narray their k values for that,",
    "start": "2499765",
    "end": "2507599"
  },
  {
    "text": "and I just say output,\nextend, list i.",
    "start": "2507600",
    "end": "2518170"
  },
  {
    "text": "OK. This is counting sort or a\nversion of counting sort. In your textbook, you'll find\na different version which",
    "start": "2518170",
    "end": "2523440"
  },
  {
    "text": "does not use lists, So it's\nprobably more practical because it uses no data\nstructures whatsoever except three arrays.",
    "start": "2523440",
    "end": "2530369"
  },
  {
    "text": "But it runs in the\nsame amount of time and this is a lot easier\nI think to think about. This is more modern\nperspective, if you well.",
    "start": "2530370",
    "end": "2538920"
  },
  {
    "text": "For every item, if\nyou'd look at them in the given order\nof your array, you see what it's key value is.",
    "start": "2538920",
    "end": "2544410"
  },
  {
    "text": "Maybe that's not exactly\nthe same as the item, so it could be key\nof x is just x. But you know in python\nsort, for example,",
    "start": "2544410",
    "end": "2550910"
  },
  {
    "text": "you're given a key function. So you take that key value. The key is guaranteed to\nbe an integer between 0",
    "start": "2550910",
    "end": "2556630"
  },
  {
    "text": "and k minus 1, so you look at\nthe list, that numbered list, and you just add this\nitem to the list.",
    "start": "2556630",
    "end": "2564320"
  },
  {
    "text": "OK. But the item is\nnot just the key, it's everything-- whatever\nthat data structure is--",
    "start": "2564320",
    "end": "2569460"
  },
  {
    "text": "and then you just go through the\nlist and you concatenate them. OK. How long does this take?",
    "start": "2569460",
    "end": "2574930"
  },
  {
    "text": " How long does this step take?",
    "start": "2574930",
    "end": "2581140"
  },
  {
    "text": "N? Nope. Constant? Nope. OK.",
    "start": "2581140",
    "end": "2587345"
  },
  {
    "text": "Look at all the actions. It's order k time. To create an empty list\ntakes constant time. They're k of them.",
    "start": "2587345",
    "end": "2592599"
  },
  {
    "text": "OK? How long does this step\ntake, just the append? ",
    "start": "2592600",
    "end": "2600330"
  },
  {
    "text": "Constant? Good. Remember, append is constant\ntime from the Python model or your favorite\nmodel, anything.",
    "start": "2600330",
    "end": "2607670"
  },
  {
    "text": "We're assuming the key\ntakes constant time because that's the word,\nso that's an assumption,",
    "start": "2607670",
    "end": "2613370"
  },
  {
    "text": "but in the normal assumption. So total time here is order n.",
    "start": "2613370",
    "end": "2619640"
  },
  {
    "text": "And this thing, well this\ntakes basically the length of Li time.",
    "start": "2619640",
    "end": "2626359"
  },
  {
    "text": "And so when you add\nit up, maybe plus 1-- because to look at an\nempty list you still",
    "start": "2626360",
    "end": "2632660"
  },
  {
    "text": "need to look at it--\nso you add it up and you get order sum of all\nthe Li's is all the items.",
    "start": "2632660",
    "end": "2640661"
  },
  {
    "text": "And then you get plus\n1 for each of them, so you get n plus k. n\nplus k is the running time of this algorithm.",
    "start": "2640662",
    "end": "2648049"
  },
  {
    "text": "Add those up. OK, so counting sort\nis order n plus k. So if k happens to be order\nn, this is linear time.",
    "start": "2648050",
    "end": "2656870"
  },
  {
    "text": "But as soon as it's a little\nbit bigger, you're in trouble. So counting sort's\na good warm up, but it's not ultimately\nwhat we want.",
    "start": "2656870",
    "end": "2663120"
  },
  {
    "start": "2663120",
    "end": "2671060"
  },
  {
    "text": "And a much cooler algorithm\nis called radix sort.",
    "start": "2671060",
    "end": "2680350"
  },
  {
    "start": "2680350",
    "end": "2685467"
  },
  {
    "text": "It's going to use counting\nsort as the subroutine, which is why spent all this time\non a mediocre algorithm.",
    "start": "2685467",
    "end": "2692150"
  },
  {
    "text": "And it's going to get a\nmuch larger range of k and it will still\nbe linear time.",
    "start": "2692150",
    "end": "2700740"
  },
  {
    "text": "I'll tell you the answer. ",
    "start": "2700740",
    "end": "2709040"
  },
  {
    "text": "K can be polynomial in n. So like if all your integers\nare between 0 and n to the 100,",
    "start": "2709040",
    "end": "2718000"
  },
  {
    "text": "you can sort them\nin n lg n time. That's a lot bigger. It's not just like 10 n.",
    "start": "2718000",
    "end": "2724190"
  },
  {
    "text": "I mean you could do 10 n here\nas well with counting sort. And it's not just like n lg\nn, but they can go all the way",
    "start": "2724190",
    "end": "2730480"
  },
  {
    "text": "to n to the 100,\nstill be linear time. So that's what we're\ngoing to achieve.",
    "start": "2730480",
    "end": "2738290"
  },
  {
    "text": "The idea of radix\nsort is simple. It's actually kind of the\nExcel spreadsheet approach.",
    "start": "2738290",
    "end": "2744820"
  },
  {
    "text": "We're going to imagine\nwe want to break each integer into\na bunch of columns.",
    "start": "2744820",
    "end": "2751640"
  },
  {
    "start": "2751640",
    "end": "2763529"
  },
  {
    "text": "How do we do that? Well, the way we normally\nwrite down numbers, except not necessarily in\ndecimal, in some arbitrary base",
    "start": "2763530",
    "end": "2770040"
  },
  {
    "text": "b. So I say, oh, an\ninteger in base b. Well then there's the\nleast significant digit and then the next\none and the next one",
    "start": "2770040",
    "end": "2776593"
  },
  {
    "text": "and the next one, some\nsequence of digits. And if I know that the\nmaximum value is k,",
    "start": "2776593",
    "end": "2782560"
  },
  {
    "text": "I know that the\nnumber of digits, which I'm going to call--\nfor each number which I'm",
    "start": "2782560",
    "end": "2788210"
  },
  {
    "text": "going to call d, is just lg\nbase b of k plus one, whatever.",
    "start": "2788210",
    "end": "2797511"
  },
  {
    "text": "We've got to be\nsuper precise here because if I'm in base b then\nthat's what lg is, right?",
    "start": "2797511",
    "end": "2804146"
  },
  {
    "text": "So normally we\nthink of lg base 2 because we're writing\nthings in binary. Computer scientists\nnormally think that way.",
    "start": "2804146",
    "end": "2810450"
  },
  {
    "text": "And fine, so now we\ndecomposed our integer. I'm not going to actually\ncompute this base b representation, because\nit would take a long time.",
    "start": "2810450",
    "end": "2817730"
  },
  {
    "text": "I'd have to spend n times\nlg k time to do that. I don't want to do that.",
    "start": "2817730",
    "end": "2823830"
  },
  {
    "text": "OK, but just\nimagine it that way. And then the\nalgorithm as follows,",
    "start": "2823830",
    "end": "2828980"
  },
  {
    "text": "sort the integers, all of them,\nby the least significant digit.",
    "start": "2828980",
    "end": "2835350"
  },
  {
    "start": "2835350",
    "end": "2840540"
  },
  {
    "text": "Sort by the next least\nsignificant digit. Dot, dot, dot, sort by the\nmost significant digit.",
    "start": "2840540",
    "end": "2849000"
  },
  {
    "text": "So there are d iterations\nhere, for d digits. Sort all the integers by\nthe least significant,",
    "start": "2849000",
    "end": "2855570"
  },
  {
    "text": "all the integers by\nthe next, and so on. It's like in your-- this is\na useful technique in Excel,",
    "start": "2855570",
    "end": "2861670"
  },
  {
    "text": "if you want to sort\nby several columns-- or your favorite spreadsheet,\ndoesn't have to be Excel, sorry-- you click on the least\nsignificant column first,",
    "start": "2861670",
    "end": "2870480"
  },
  {
    "text": "and then click on all the other\ncolumns in increasing order, you will sort by all\nof them, it turns out.",
    "start": "2870480",
    "end": "2875549"
  },
  {
    "text": "It's kind of magical\nthat this works.  I don't have a ton of\ntime for an example.",
    "start": "2875550",
    "end": "2883030"
  },
  {
    "text": "Let me first analyze\nthe algorithm. We'll see if we have\ntime for an example. So there are d\ndigits-- oh, and I'm",
    "start": "2883030",
    "end": "2892240"
  },
  {
    "text": "going to sort each of these\nsorts of using counting sort.",
    "start": "2892240",
    "end": "2898535"
  },
  {
    "start": "2898535",
    "end": "2907450"
  },
  {
    "text": "This is I guess sort by\ndigit using counting sort.",
    "start": "2907450",
    "end": "2913500"
  },
  {
    "text": "So how long does it\ntake to sort using counting sort in this setting? ",
    "start": "2913500",
    "end": "2923310"
  },
  {
    "text": "Normally, it's n plus k. ",
    "start": "2923310",
    "end": "2928510"
  },
  {
    "text": "Here it is, n plus b. Good. ",
    "start": "2928510",
    "end": "2937300"
  },
  {
    "text": "Because all of our digits\nare between 0 and b minus 1. So we're just sorting by digit.",
    "start": "2937300",
    "end": "2943230"
  },
  {
    "text": "Now here is where we're\nusing this idea of a key. When we say key, I\nwanted our integers.",
    "start": "2943230",
    "end": "2948710"
  },
  {
    "text": "What we do is compute\nthe digit we care about. So if we're in this\nstep, the key function",
    "start": "2948710",
    "end": "2955350"
  },
  {
    "text": "will be compute the least\nsignificant digit, which is like taking it mod\nb to compute the most",
    "start": "2955350",
    "end": "2961070"
  },
  {
    "text": "significant digits like dividing\nby b to the power of d minus 1",
    "start": "2961070",
    "end": "2966940"
  },
  {
    "text": "or so. OK but it's a constant. You do one divide and one\nmod, the constant number",
    "start": "2966940",
    "end": "2972450"
  },
  {
    "text": "of operations. You can extract the\ndigit in constant time. So the key function is constant\ntime and so this works.",
    "start": "2972450",
    "end": "2978630"
  },
  {
    "text": "We don't have to actually\nwrite them all down, just compute them\nas we need them.",
    "start": "2978630",
    "end": "2984930"
  },
  {
    "text": "Cool I guess we could\ncompute them ahead of time. It's not a big deal. Fine.",
    "start": "2984930",
    "end": "2991369"
  },
  {
    "text": "So that's each digit. So the total time\nis just that times",
    "start": "2991370",
    "end": "2997140"
  },
  {
    "text": "d because we have d steps. So it's n plus b times d.",
    "start": "2997140",
    "end": "3003094"
  },
  {
    "text": "Now d was that lg\nthing, lg base b of n.",
    "start": "3003094",
    "end": "3009840"
  },
  {
    "text": "I have this b. What should be b? You gotta love the\nEnglish language.",
    "start": "3009840",
    "end": "3017240"
  },
  {
    "text": "What should I choose\nb to be, or not to be?",
    "start": "3017240",
    "end": "3022510"
  },
  {
    "text": "That's the question. Any suggestions? I want to minimize this, right? I want minimum running time.",
    "start": "3022510",
    "end": "3028760"
  },
  {
    "text": "So I'd like b to kind of\nlarge to make this base large. Sorry, this is not n, this is k.",
    "start": "3028760",
    "end": "3035165"
  },
  {
    "text": "I copied that wrong\nout of excitement. Just copying this over.",
    "start": "3035165",
    "end": "3040430"
  },
  {
    "text": "OK, I'd like b to\nbe large, but I don't want it to be so\nlarge because I don't want it to be bigger than n so\nwhat should I set b to be?",
    "start": "3040430",
    "end": "3046890"
  },
  {
    "text": "AUDIENCE: N. PROFESSOR: N, good choice. It's a good trick\nwhenever you have a sum of things you\nwant to minimize,",
    "start": "3046890",
    "end": "3052960"
  },
  {
    "text": "usually it's when they're equal. Occasionally it's the extreme\nlike when b is 0 or something.",
    "start": "3052960",
    "end": "3058700"
  },
  {
    "text": "B as 0 not a good plan. Base 0 is pretty slow.",
    "start": "3058700",
    "end": "3065220"
  },
  {
    "text": "So if I set-- I'll\nwrite it here-- you can prove it with a\nderivative or whatever.",
    "start": "3065220",
    "end": "3070970"
  },
  {
    "text": "This is going to\nbe minimized when b is-- I'll be vague-- theta n.",
    "start": "3070970",
    "end": "3078980"
  },
  {
    "text": "So then it's going to come\nout to n times lg base n of k.",
    "start": "3078980",
    "end": "3086990"
  },
  {
    "text": "And lo and behold, when\nk is polynomial in n, it's k to some constant,\nthen that will be linear.",
    "start": "3086990",
    "end": "3096920"
  },
  {
    "text": "So let me write that. If k equals n to the c, or\nsay is at most n to the c,",
    "start": "3096920",
    "end": "3106670"
  },
  {
    "text": "then this is going to\nbe order n times c. So if your integers\nare reasonably small,",
    "start": "3106670",
    "end": "3113069"
  },
  {
    "text": "you get a linear time\nsorting algorithm. And reasonably small means\npolynomial in n, in value.",
    "start": "3113070",
    "end": "3119549"
  },
  {
    "text": "That's kind of cool. That's radix sort. And we're out of time. There's an example\nin the textbook or in the notes how this works.",
    "start": "3119550",
    "end": "3125700"
  },
  {
    "text": "You could prove it by\na simple induction. ",
    "start": "3125700",
    "end": "3128353"
  }
]