[
  {
    "start": "0",
    "end": "181000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license.",
    "start": "0",
    "end": "5310"
  },
  {
    "text": "Your support will help\nMIT OpenCourseWare continue to offer high-quality\neducational resources for free.",
    "start": "5310",
    "end": "11610"
  },
  {
    "text": "To make a donation or to\nview additional materials from hundreds of MIT courses,\nvisit MIT OpenCourseWare",
    "start": "11610",
    "end": "18140"
  },
  {
    "text": "at ocw.mit.edu.  CHARLES LEISERSON: It\nis my great pleasure",
    "start": "18140",
    "end": "24300"
  },
  {
    "text": "to welcome Jon Bentley,\nnow retired from Bell Labs.",
    "start": "24300",
    "end": "31320"
  },
  {
    "text": "Jon was my PhD thesis\nsupervisor at Carnegie Mellon. I actually had two supervisors.",
    "start": "31320",
    "end": "36970"
  },
  {
    "text": "The other one was HT Kung,\nwho is now at Harvard. I guess people flee Carnegie\nMellon like the plague",
    "start": "36970",
    "end": "43650"
  },
  {
    "text": "or something.  So Jon is, as you\nknow because you've",
    "start": "43650",
    "end": "51360"
  },
  {
    "text": "studied some of his work, is a\npioneer in software performance",
    "start": "51360",
    "end": "59100"
  },
  {
    "text": "engineering. And he's going to talk today\nabout a particularly neat piece",
    "start": "59100",
    "end": "65760"
  },
  {
    "text": "of algorithmic\nengineering sets that centers around the so-called\ntraveling salesperson problem,",
    "start": "65760",
    "end": "73260"
  },
  {
    "text": "which is an NP-hard problem. NP-complete problem in fact. And so, without further\nado, Jon, why don't you",
    "start": "73260",
    "end": "81660"
  },
  {
    "text": "tell us what you've got to say? JON BENTLEY: As\nCharles mentioned, I want to talk with you--",
    "start": "81660",
    "end": "87460"
  },
  {
    "text": "I want to tell you a story\nabout a cool problem. This is a problem that I first\nheard when I was a young nerd--",
    "start": "87460",
    "end": "94860"
  },
  {
    "text": "not much older than this little\npile of nerds in front of me-- in high school, the traveling\nsalesperson problem.",
    "start": "94860",
    "end": "102120"
  },
  {
    "text": "Who here has heard of\nthe TSP at some point? I heard about this in high\nschool, one of the things",
    "start": "102120",
    "end": "107580"
  },
  {
    "text": "you read about it\nin the math books. And a few years later, I\nhad a chance to work on it.",
    "start": "107580",
    "end": "112710"
  },
  {
    "text": "In 1980, I was doing\nsome consulting, and I said, well, what you\nneed to do is solve a TSP.",
    "start": "112710",
    "end": "119230"
  },
  {
    "text": "Then I went home and\nrealized that all of the stuff that I learned\nabout it was sort of relevant but it didn't solve\nthe problem, so I",
    "start": "119230",
    "end": "125580"
  },
  {
    "text": "started working on it then. Our colleague,\nChristos Papadimitriou,",
    "start": "125580",
    "end": "131287"
  },
  {
    "text": "who's been at Berkeley\nfor a long time after being at a\nlot of other places, once told me the TSP\nis not a problem.",
    "start": "131287",
    "end": "138490"
  },
  {
    "text": "It is an addiction. So I've been hooked for\ncoming up on 40 years now.",
    "start": "138490",
    "end": "144150"
  },
  {
    "text": "And I want to tell you one story\nabout a really cool program I wrote. Because this is one of the--",
    "start": "144150",
    "end": "150459"
  },
  {
    "text": "I've been paid to be a computer\nprogrammer for coming up on 50 years, since I've been\ndoing it for 48 years now.",
    "start": "150460",
    "end": "156689"
  },
  {
    "text": "This is probably the most\nfun, the coolest program I've written over a\ncouple day period.",
    "start": "156690",
    "end": "162180"
  },
  {
    "text": "I want to tell you a story. Start off with what\nrecursive generation is. Then the TSP, what it is.",
    "start": "162180",
    "end": "168810"
  },
  {
    "text": "Then I'll start\nwith one program, and we'll make it faster\nand faster and faster.",
    "start": "168810",
    "end": "174450"
  },
  {
    "text": "Again, I spend my whole\nlife squeezing performance. This is the biggest\nsqueeze ever. And then some\nprinciples behind that.",
    "start": "174450",
    "end": "181799"
  },
  {
    "start": "181000",
    "end": "305000"
  },
  {
    "text": "We'll start, though,\nwith how do you enumerate all the elements in a set?",
    "start": "181800",
    "end": "189330"
  },
  {
    "text": "If I want to count-- enumerate the guys between 1\nand a hundred, I just count. That's no big deal.",
    "start": "189330",
    "end": "195060"
  },
  {
    "text": "But how can I, for\ninstance, enumerate all subsets of the set from\nthe integers from 1 to 5?",
    "start": "195060",
    "end": "203129"
  },
  {
    "text": "How many subsets are there\nof integers from 1 to 5? AUDIENCE: 2 to the 5. JON BENTLEY: Pardon me?",
    "start": "203130",
    "end": "208170"
  },
  {
    "text": " AUDIENCE: 2 to the 5. JON BENTLEY: 2 to the 5, 32. But how do you say\nwhich ones they are?",
    "start": "208170",
    "end": "213720"
  },
  {
    "text": "How do you go through\nand count them? Well, you have to decide\nhow you represent it.",
    "start": "213720",
    "end": "220220"
  },
  {
    "text": "You guys know all about\nset representations. We'll stick with bit\nvectors for the time being.",
    "start": "220220",
    "end": "226890"
  },
  {
    "text": "An iterative solution\nis you just count-- 0, 1, 2, 3, 4, 5, up to 31.",
    "start": "226890",
    "end": "235290"
  },
  {
    "text": "That's pretty easy. But what does it mean to count? What does it mean to go from\none integer to the next?",
    "start": "235290",
    "end": "242400"
  },
  {
    "text": "How do you go from a given\ninteger to the next one? What's the rule for that?",
    "start": "242400",
    "end": "248700"
  },
  {
    "text": "It's pretty easy, actually. You just scan over all the\n0's, turning the-- you start",
    "start": "248700",
    "end": "254760"
  },
  {
    "text": "at the right-hand side, the\nleast significant digit, scan over all the\n0's, turn it to 1.",
    "start": "254760",
    "end": "261694"
  },
  {
    "text": "Oh, I lied to you. You scan over all the\n1's, turning them to 0 until you get to the first 0.",
    "start": "261694",
    "end": "268620"
  },
  {
    "text": "And then you turn that to a 1. So this one goes to 10. This one goes to 11.",
    "start": "268620",
    "end": "273990"
  },
  {
    "text": "This one goes-- that one\nbecomes 0, that one becomes 0. Then it becomes 00100.",
    "start": "273990",
    "end": "280229"
  },
  {
    "text": "So a pretty easy algorithm. You could do it that way. Just scan over all\nthe 1's, turn them",
    "start": "280230",
    "end": "286470"
  },
  {
    "text": "to 0's, take that first\none and flip it around. But that doesn't\ngeneralize nicely.",
    "start": "286470",
    "end": "292050"
  },
  {
    "text": "We're going to see a method\nthat generalizes very nicely. This is a recursive\nsolution to enumerate all 2",
    "start": "292050",
    "end": "299910"
  },
  {
    "text": "to the n subsets\nof a set of size n. And the answer is this\nall sets of size m",
    "start": "299910",
    "end": "309420"
  },
  {
    "start": "305000",
    "end": "463000"
  },
  {
    "text": "is just put a 0 at\nthis end, enumerate all sets of size m minus 1. How many of these will there be?",
    "start": "309420",
    "end": "316289"
  },
  {
    "text": "2 to the m minus 1. How many of those\n2 to the m minus 1? What do they add up to? 2 to the m.",
    "start": "316290",
    "end": "321433"
  },
  {
    "text": "But all of these have\nthe 0 at that end, and the one at that end. Everyone see that recursive\nsketch and how that works?",
    "start": "321433",
    "end": "326835"
  },
  {
    "text": " Here's the example.",
    "start": "326835",
    "end": "332410"
  },
  {
    "text": "A period with 0's at this\nend and you fill it out. You have the 1 at that\nand you fill that out. If you do that, you\nnotice that in fact we're",
    "start": "332410",
    "end": "339030"
  },
  {
    "text": "just counting backwards-- 000, 001, 010, 3, 4, 5, 6, 7.",
    "start": "339030",
    "end": "347610"
  },
  {
    "text": "That's the algorithm. And the cool thing is the\ncode is really simple.",
    "start": "347610",
    "end": "353400"
  },
  {
    "text": "I could probably write a program\nlike that in most languages and get it correct. So if m equals 0 in generate\nall subsets of size m,",
    "start": "353400",
    "end": "362400"
  },
  {
    "text": "this doesn't occur at 1. You have a pointer\ngoing down the array. Otherwise, set the\nrightmost bit to 0,",
    "start": "362400",
    "end": "371010"
  },
  {
    "text": "generate all subsets\nrecursively, set it to 1, do it again recursively.",
    "start": "371010",
    "end": "376379"
  },
  {
    "text": "That's a starting program. If you understand\nthis, everything else is going to be pretty\nstraightforward.",
    "start": "376380",
    "end": "382390"
  },
  {
    "text": "If you don't, please speak up. One thing that-- you\npeople have suffered",
    "start": "382390",
    "end": "391290"
  },
  {
    "text": "the tragedy of 14 or 15 or 16\nyears of educational system",
    "start": "391290",
    "end": "396990"
  },
  {
    "text": "that has sort of beaten\nthe creativity out of you and you're afraid to speak up. So even if something-- even\nif I'm up here spouting",
    "start": "396990",
    "end": "403560"
  },
  {
    "text": "total bullshit, you'll\nignore that fact and just sort of politely\nstare at me and nod.",
    "start": "403560",
    "end": "408810"
  },
  {
    "text": "But this is important. I want you to understand this. If you don't understand this,\nspeak now or forever hold it.",
    "start": "408810",
    "end": "416970"
  },
  {
    "text": "Anyone have any questions? Please, please. AUDIENCE: What does\nmean, [INAUDIBLE]??",
    "start": "416970",
    "end": "422460"
  },
  {
    "text": " JON BENTLEY: I'm sorry.",
    "start": "422460",
    "end": "428290"
  },
  {
    "text": "Why did we set p to the-- AUDIENCE: [INAUDIBLE]. ",
    "start": "428290",
    "end": "434410"
  },
  {
    "text": "JON BENTLEY: So here, first I\ngo out to the extreme rightmost and I set it to 0. Then I recursively\nfill those in.",
    "start": "434410",
    "end": "440500"
  },
  {
    "text": "Then I change it from a 0 to a 1\nthere, and I fill all those in. So this is a program\nthat will go through,",
    "start": "440500",
    "end": "447639"
  },
  {
    "text": "and as it enumerates\na subset, it will call the visit procedure\na total of 2 to the m times,",
    "start": "447640",
    "end": "454389"
  },
  {
    "text": "then it comes down to the\nbottom of the recursion. Thank you, great question. Any other questions\nabout how this works?",
    "start": "454390",
    "end": "461080"
  },
  {
    "text": "OK, we'll come back to this. The traveling\nsalesperson problem.",
    "start": "461080",
    "end": "466270"
  },
  {
    "start": "463000",
    "end": "720000"
  },
  {
    "text": "I apologize.  I will really try to say the\ntraveling salesperson problem,",
    "start": "466270",
    "end": "473600"
  },
  {
    "text": "but I will slip because I\nwas raised with this being the traveling salesman problem. No connotations, no\nintentionality there,",
    "start": "473600",
    "end": "481389"
  },
  {
    "text": "just senility galloping along. It's a cool problem. Abraham Lincoln faced this\nvery problem in the years",
    "start": "481390",
    "end": "489889"
  },
  {
    "text": "1847 to 1853 when he-- everyone here has heard\nof circuit courts?",
    "start": "489890",
    "end": "496419"
  },
  {
    "text": "Why do they call\nthem circuit courts? Because the court used\nto go out and ride a circuit to go to a\nwhole bunch of cities.",
    "start": "496420",
    "end": "503470"
  },
  {
    "text": "Now people in the cities\ncome to the court. But back in the day, in\n1847 to 1853, Lincoln",
    "start": "503470",
    "end": "509200"
  },
  {
    "text": "and all of his homies\nwould hop on their horses-- a judge, defense lawyers,\nprosecutors-- and go around",
    "start": "509200",
    "end": "514929"
  },
  {
    "text": "and ride the circuit here. And so this is the actual\nroute that they rode where they wanted to do this effectively.",
    "start": "514929",
    "end": "521520"
  },
  {
    "text": "It would be really stupid\nto start here in Springfield and go over there,\nthen to come back here,",
    "start": "521520",
    "end": "526899"
  },
  {
    "text": "then to go over\nthere back and forth. What they did was\ntry to find a circuit that minimized the total\namount of distance traveled.",
    "start": "526900",
    "end": "534790"
  },
  {
    "text": "That is the traveling\nsalesperson problem. We're given a set of n things. It might be a general graph.",
    "start": "534790",
    "end": "540760"
  },
  {
    "text": "These happen to be in the plane. But you really-- helicopter\nservice was really bad",
    "start": "540760",
    "end": "546550"
  },
  {
    "text": "in those days, so they didn't\nfly there from point to point. Whether they stayed on roads,\nwhat really matters here is the graph embedded in here.",
    "start": "546550",
    "end": "553100"
  },
  {
    "text": "I'm going to speak at this. Everything I say will\nbe true for a graph. It will be true for geometry.",
    "start": "553100",
    "end": "559210"
  },
  {
    "text": "I'll be sloppy about that. We'll see interfaces, how\nyou handle both, but just cut me some slack for that.",
    "start": "559210",
    "end": "565710"
  },
  {
    "text": "I have actually face this\nmyself when I worked on a system",
    "start": "565710",
    "end": "571060"
  },
  {
    "text": "where we had a big\nmechanical plotter and we wanted to draw\nthese beautiful maps where the maps would fill in dots.",
    "start": "571060",
    "end": "576550"
  },
  {
    "text": "They happened to be precincts. Some of them were red,\nsome of them were blue. And you wanted to draw all the\nred dots first and go around",
    "start": "576550",
    "end": "583510"
  },
  {
    "text": "here. And, in fact, the plotter\nwould draw this red dot, then that red dot, then\nthis one, then that one.",
    "start": "583510",
    "end": "588880"
  },
  {
    "text": "The plotter took an\nhour to draw the map. I was consulted on this.",
    "start": "588880",
    "end": "594580"
  },
  {
    "text": "Aha, you have a traveling\nsalesperson problem. I went down. I reduced the length to about\n1/10 of the original length.",
    "start": "594580",
    "end": "602170"
  },
  {
    "text": "If it took an hour before,\nhow long would it take now? ",
    "start": "602170",
    "end": "607480"
  },
  {
    "text": "Well, it took\nabout half an hour. And the reason is that the\nplotter took about half of its time moving around\nabout, 30 minutes moving around,",
    "start": "607480",
    "end": "615250"
  },
  {
    "text": "and about 30 minutes\njust drawing the symbols. I didn't reduce the time\ndrawing the symbols at all,",
    "start": "615250",
    "end": "620260"
  },
  {
    "text": "but I reduced the time\nmoving things around from about 30 minutes\nto about 3 minutes. That was still a big difference.",
    "start": "620260",
    "end": "626269"
  },
  {
    "text": "So I fixed it there. When I worked at\nBell Labs, we had drills that would go\naround, laser drills,",
    "start": "626270",
    "end": "632100"
  },
  {
    "text": "move around on printed\ncircuit boards to drill holes. They wanted to move it that way I talked to people at\nGeneral Motors at one point.",
    "start": "632100",
    "end": "640580"
  },
  {
    "text": "On any day, they might\nhave a thousand cars go through an assembly line. Some of the cars are red, some\nare white, some are green,",
    "start": "640580",
    "end": "649090"
  },
  {
    "text": "some are yellow. You have to change the paint. Some of them have V6,\nsome of them have V8. Some of them are two doors,\nsome of them are four doors.",
    "start": "649090",
    "end": "656829"
  },
  {
    "text": "In what order do you\nwant to build those cars? Well, every time you\nchange one part of the car, you have to change the line.",
    "start": "656830",
    "end": "663160"
  },
  {
    "text": "And what you want\nto do is examine, as it were, all n factorial\npermutations of putting",
    "start": "663160",
    "end": "669130"
  },
  {
    "text": "the cars through and choose\nthe one that involves the minimum amount of change.",
    "start": "669130",
    "end": "674710"
  },
  {
    "text": "And the change from\none car to another is a well-defined function. Everyone see how that\nweird TSP is in fact a TSP?",
    "start": "674710",
    "end": "683770"
  },
  {
    "text": "So all of these\nare cool problems. Furthermore, as a\ncomputer scientist,",
    "start": "683770",
    "end": "691540"
  },
  {
    "text": "it's the prototypical problem. It's the E. coli of\nalgorithmic problems.",
    "start": "691540",
    "end": "700660"
  },
  {
    "text": "It was literally one\nof the first problems to be proven to be NP-hard. Held-Karp gave a polynomial\ntime algorithm for it.",
    "start": "700660",
    "end": "710699"
  },
  {
    "text": "There are approximation\nalgorithms of this. Kernighan-Lin have\ngiven heuristics. It's a really famous problem.",
    "start": "710700",
    "end": "716800"
  },
  {
    "text": "It's worth studying.  But here is what\nreally happened to me.",
    "start": "716800",
    "end": "723140"
  },
  {
    "start": "720000",
    "end": "911000"
  },
  {
    "text": "Here's why I'm standing\nin front of you today talking about this. My friend Mike Shamos,\nin his 1978 PhD thesis",
    "start": "723140",
    "end": "731240"
  },
  {
    "text": "on computational\ngeometry, talked about a number of problems. One of them was the TSP.",
    "start": "731240",
    "end": "736810"
  },
  {
    "text": "And he shows us and he gives\nan example of this tour. He says, here's a\nset of 16 points.",
    "start": "736810",
    "end": "742620"
  },
  {
    "text": "Here's a tour through them. Here's a traveling\nsalesperson tour through them. And then he says in\na footnote, in fact,",
    "start": "742620",
    "end": "749750"
  },
  {
    "text": "I'm not sure if it's\na really optimal tour. I applied a heuristic\nseveral times. I'm not positive it's\nthe shortest tour.",
    "start": "749750",
    "end": "757460"
  },
  {
    "text": "If you wrote a\nthesis, it would be sort of nice to know\nwhat's going on there.",
    "start": "757460",
    "end": "762889"
  },
  {
    "text": "Can you solve a\nproblem that was-- this tiny little\n16-element problem,",
    "start": "762890",
    "end": "768020"
  },
  {
    "text": "16 points in the plane. Can you really figure out\nwhat the TSP is to that?",
    "start": "768020",
    "end": "773180"
  },
  {
    "text": "At the time, my colleague, our\ncolleague, a really smart guy, couldn't do it.",
    "start": "773180",
    "end": "778190"
  },
  {
    "text": "It was computationally\nbeyond the bounds for him. Well, in 1997 I\ncame back to this,",
    "start": "778190",
    "end": "785029"
  },
  {
    "text": "and I really wondered\nis it possible now? Computers are a whole lot\nfaster in the 20 years.",
    "start": "785030",
    "end": "790922"
  },
  {
    "text": "We were talking about\nthat earlier today. 20 years, computers got faster. A lot of things got better.",
    "start": "790922",
    "end": "796070"
  },
  {
    "text": "Have things changed\nenough so I can write a quick little\nprogram to solve this? I don't know.",
    "start": "796070",
    "end": "801220"
  },
  {
    "text": "We'll see. I did that. I talked about it. I gave a talk at Lehigh\nUniversity 20 years ago.",
    "start": "801220",
    "end": "808700"
  },
  {
    "text": "They liked it. They incorporated it\ninto an algorithms class. The same professor gave it\ntime and time and time again.",
    "start": "808700",
    "end": "814730"
  },
  {
    "text": "Eventually, he retired. They asked me to come over\nand give this talk to them. I can't give a talk about\n20-year-old material.",
    "start": "814730",
    "end": "821870"
  },
  {
    "text": "Computer science\ndoesn't work that way. So I coded things. I wanted to see how things\nchanged in two years.",
    "start": "821870",
    "end": "828640"
  },
  {
    "text": "So this talk is about\na lot of things, but especially it's\nabout how has performance changed in 40 years.",
    "start": "828640",
    "end": "835057"
  },
  {
    "text": "So that's one of the\nreasons we were-- one of things we were\ntalking about earlier today.",
    "start": "835057",
    "end": "840515"
  },
  {
    "text": "I could give a bunch of\ntitles for this talk. For you, the title\nI give is a sampler of performance engineering.",
    "start": "840515",
    "end": "846830"
  },
  {
    "text": "It could be-- next week\nI'll give it at Lehigh. This is their final class in--",
    "start": "846830",
    "end": "852898"
  },
  {
    "text": "one of their final classes in\nalgorithms and data structures. I'm going to try to tie\neverything they learn together. It could be all\nthese other things--",
    "start": "852898",
    "end": "859190"
  },
  {
    "text": "implementing algorithms, a\nlot of recursive generation, applying algorithms, really--",
    "start": "859190",
    "end": "864510"
  },
  {
    "text": " Charles is a fancy\ndancy academic. He's a professor at the\nMassachusetts Institute",
    "start": "864510",
    "end": "872030"
  },
  {
    "text": "of Technology. I'm just a poor dumb\ncomputer programmer, but boy this is a fun program.",
    "start": "872030",
    "end": "878180"
  },
  {
    "text": "What it is not is it's not\nstate-of-the-art TSP algorithm. People have studied the problem\nfor well over a century.",
    "start": "878180",
    "end": "883940"
  },
  {
    "text": "They have beautiful algorithms. I am not going to\ntell you about any of those algorithms\nfor the simple reason that I don't know them.",
    "start": "883940",
    "end": "891200"
  },
  {
    "text": "I could look them up in books,\nbut I've never really lived the fancy state-of-the-art\nalgorithms. And I'm also going to just\nshow you getting the answer.",
    "start": "891200",
    "end": "898700"
  },
  {
    "text": "I could analyze it. I've analyzed much of these. If I had another hour or\nthree, I could do the analysis.",
    "start": "898700",
    "end": "904050"
  },
  {
    "text": "But I can't, so I'm\njust going to do the-- show you some anecdotal speeds\nwithout really the analysis.",
    "start": "904050",
    "end": "912240"
  },
  {
    "start": "911000",
    "end": "3599000"
  },
  {
    "text": "Let's talk about some programs. A simple C program. MAXN is a maximum\nnumber, n int is going",
    "start": "912240",
    "end": "919690"
  },
  {
    "text": "to be n, the number of cities. I'm going to have a\npermutation vector, where if I have the tour going\nfrom city 1 to 7 to 3 to 4,",
    "start": "919690",
    "end": "927740"
  },
  {
    "text": "it says 1734. The distance between\ncities is going",
    "start": "927740",
    "end": "933580"
  },
  {
    "text": "to be given by a\ndistance function. There is this\ndistance d of i, j, the distance from\ncity i to city j.",
    "start": "933580",
    "end": "941629"
  },
  {
    "text": "Here's the first algorithm. What I'm going to do is generate\nall intact real permutations,",
    "start": "941630",
    "end": "947780"
  },
  {
    "text": "look at them, and\nfind the best one. It's not rocket science.",
    "start": "947780",
    "end": "953750"
  },
  {
    "text": "The way I'm going to do\nthis is a recursive function where I happened-- I could have done it\nfrom left to right.",
    "start": "953750",
    "end": "960920"
  },
  {
    "text": "I am a C programmer. I always count down towards 0. So I'm going to count down that\nway, where all of these cities",
    "start": "960920",
    "end": "968110"
  },
  {
    "text": "are already fixed. I'm going to permute these. Here's the program. To search for m--",
    "start": "968110",
    "end": "975770"
  },
  {
    "text": "all of these have\nalready been fixed. What I'm going to do is if\nm equals 1, then I check it. Otherwise, for i equals 0 up\nto m, for each value from 0",
    "start": "975770",
    "end": "984530"
  },
  {
    "text": "to minus 1, I take\nthe ith element. I swap it. swap 3, 7 takes the third\nand seventh positions",
    "start": "984530",
    "end": "991520"
  },
  {
    "text": "and swaps them. I swap that to the final thing. I call it recursively. I then swap it back to leave\nit in exactly the same state I",
    "start": "991520",
    "end": "1000399"
  },
  {
    "text": "found it, and I continue. So here it's going to generate,\nfirst, all nine permuta--",
    "start": "1000400",
    "end": "1007900"
  },
  {
    "text": "put all nine digits\nin the last position. Then for each one\nof those, I'll put all eight digits in the last\nposition, and go on down.",
    "start": "1007900",
    "end": "1015760"
  },
  {
    "text": "This is really interesting,\nimportant, and subtle. If you don't follow this part,\nit's going to be difficult.",
    "start": "1015760",
    "end": "1021650"
  },
  {
    "text": "Are there any questions\nat all about this? Have I lied to you\nyet about this? You're honest enough\nto tell me if I have.",
    "start": "1021650",
    "end": "1028383"
  },
  {
    "text": "AUDIENCE: You're good. JON BENTLEY: Thank you. Anyone else? AUDIENCE: [INAUDIBLE].",
    "start": "1028383",
    "end": "1035272"
  },
  {
    "text": "JON BENTLEY: I'm sorry. Please. AUDIENCE: Sorry. I'm not really understanding\nthe part that's fixed",
    "start": "1035272",
    "end": "1040444"
  },
  {
    "text": "and what you're permuting,\nand why is that hard to fix. JON BENTLEY: So, so far,\nas I recur down with--",
    "start": "1040444",
    "end": "1047289"
  },
  {
    "text": "as m moves down,\nall these are fixed. So I'm going to\nfix these things, and then I'm going to take\ncare of all these later.",
    "start": "1047290",
    "end": "1054230"
  },
  {
    "text": "So, originally, I'm going\nto have this array be 0-- if I have a nine-city TSP,\nit will be 0, 1 2, 3, 4, 5, 6,",
    "start": "1054230",
    "end": "1060960"
  },
  {
    "text": "7, 8, 9. And first I put 0 in\nthe end and do the rest. Then I put 1 in the end,\n[INAUDIBLE] 9 in the end,",
    "start": "1060960",
    "end": "1068330"
  },
  {
    "text": "and recur down. But as the program\nis progressing, if you stop the\nprogram at any time",
    "start": "1068330",
    "end": "1074690"
  },
  {
    "text": "and look at a glance\nat the program, you can see that, given the\nvalue of m, this parameter,",
    "start": "1074690",
    "end": "1080450"
  },
  {
    "text": "the recursive function. So this is a way\nthat I'm essentially building this tree where\nat the top of the tree",
    "start": "1080450",
    "end": "1087559"
  },
  {
    "text": "the branching factor is 9. At each of those nine\nnodes, the branching factor is 8, then 7 and 6.",
    "start": "1087560",
    "end": "1093280"
  },
  {
    "text": "It's going to be a big tree. If n is 10, how big is\nthat tree going to be?",
    "start": "1093280",
    "end": "1098779"
  },
  {
    "text": "What's 10 factorial?  Pardon me?",
    "start": "1098780",
    "end": "1106010"
  },
  {
    "text": "When I was a nerd,\nwe used to try to impress people of\nappropriate genders",
    "start": "1106010",
    "end": "1111260"
  },
  {
    "text": "by going off saying\nthings like 3628800.",
    "start": "1111260",
    "end": "1117320"
  },
  {
    "text": "You can probably guess\nhow effective that was. So 3.6 million.",
    "start": "1117320",
    "end": "1123710"
  },
  {
    "text": "It's going to be a big tree. Any questions about that? Let's go.",
    "start": "1123710",
    "end": "1129680"
  },
  {
    "text": "When I check things, I\njust compute the sum there. I start off with the sum\nbeing the distance from 0",
    "start": "1129680",
    "end": "1134750"
  },
  {
    "text": "to p n minus first. Then I go through and add\nup all the pairwise things and save it. What does it mean to say it?",
    "start": "1134750",
    "end": "1139910"
  },
  {
    "text": "If the sum is less than\nthe minimum sum so far, I just copy those over,\nchange the minsum.",
    "start": "1139910",
    "end": "1145040"
  },
  {
    "text": "And to solve the whole thing,\nI do a search of size n. This is a simple but\npowerful recursive program.",
    "start": "1145040",
    "end": "1151422"
  },
  {
    "text": "You should all feel very\ncomfortable with this. ",
    "start": "1151422",
    "end": "1157010"
  },
  {
    "text": "Is it correct? Does it work? Is it possible to\nwrite a program",
    "start": "1157010",
    "end": "1162260"
  },
  {
    "text": "with about two dozen\nlines of code that works? Not the first time. But after you get rid of a few\nsyntax errors, you check it.",
    "start": "1162260",
    "end": "1169100"
  },
  {
    "text": "How do you make sure it works? I start with n equals\n3, and I put 3.",
    "start": "1169100",
    "end": "1174442"
  },
  {
    "text": "Does it give me a tour? Well, it works. Think about it. For 3, 3 factorial,\nthey're all the same tour.",
    "start": "1174442",
    "end": "1180350"
  },
  {
    "text": "That part wasn't hard. 4, now that's interesting. That one works too.",
    "start": "1180350",
    "end": "1185870"
  },
  {
    "text": "This program, in fact, can work. ",
    "start": "1185870",
    "end": "1191710"
  },
  {
    "text": "Is it going to be\na fast program? How long will it\ntake if n equals 10?",
    "start": "1191710",
    "end": "1197481"
  },
  {
    "text": "How many seconds?  I'm sorry. What class have I stumbled into?",
    "start": "1197482",
    "end": "1204020"
  },
  {
    "text": "Is this in fact Greek Art 303? How long will this\ntake for n equals 10?",
    "start": "1204020",
    "end": "1210954"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. JON BENTLEY: Pardon me? AUDIENCE: 1 second. JON BENTLEY: About a second.",
    "start": "1210954",
    "end": "1216059"
  },
  {
    "text": "Pretty cool. For equal 20, how\nlong will it take? ",
    "start": "1216060",
    "end": "1224110"
  },
  {
    "text": "A lot longer. Technically speaking, it's\ngoing to take a boatload longer. So what I'm going to\ndo here is-- notice",
    "start": "1224110",
    "end": "1230770"
  },
  {
    "text": "that there are n\nfactorial permutations. You do n of those at\neach, total of that,",
    "start": "1230770",
    "end": "1235779"
  },
  {
    "text": "on this fairly fast laptop\nfrom a few years ago. But now they're\nall about the same.",
    "start": "1235780",
    "end": "1243970"
  },
  {
    "text": "At 8 seconds, it took that. At 9 seconds, what should\nbe the ratio-- what would",
    "start": "1243970",
    "end": "1249429"
  },
  {
    "text": "you expect to be the ratio\nbetween its time at 8 and time at 9?",
    "start": "1249430",
    "end": "1254650"
  },
  {
    "text": "Well, about a factor\nof 9, you'd hope. Is 0.5 times 9 about 0.34? Yes, close enough.",
    "start": "1254650",
    "end": "1261820"
  },
  {
    "text": "Here, going down, for 10\nit's 4 seconds, 46 seconds.",
    "start": "1261820",
    "end": "1268450"
  },
  {
    "text": "Yes, it's going up by a factor-- so here I've run\nall my examples. I ran out to 1\nminute of CPU time.",
    "start": "1268450",
    "end": "1274659"
  },
  {
    "text": "After that, I estimate. If this one takes\n3/4 of a minute, 12 times that is 12 minutes--",
    "start": "1274660",
    "end": "1280050"
  },
  {
    "text": "3/4 of that is 9 minutes. For 13, it's 2 hours. How long should\n14 take, ballpark?",
    "start": "1280050",
    "end": "1286580"
  },
  {
    "text": " A day, ballpark.",
    "start": "1286580",
    "end": "1293360"
  },
  {
    "text": "How long will 15 take\nif 14 takes a day? AUDIENCE: Two weeks. JON BENTLEY: Two weeks. How long will 16 take?",
    "start": "1293360",
    "end": "1301320"
  },
  {
    "text": "Eight months. You get the idea. Are you going to go\nout to 20 for this one? No. Are you going to go out\nto 16 with this one?",
    "start": "1301320",
    "end": "1307410"
  },
  {
    "text": "Can you just put this\ninto a thesis right now? No. The problem is it's fast for\nreally small values of n.",
    "start": "1307410",
    "end": "1314649"
  },
  {
    "text": "As it becomes bigger-- how can you make\nthe program faster?",
    "start": "1314650",
    "end": "1320330"
  },
  {
    "text": "If you wanted to make\nthis program faster, what would you do? What are some ideas? Give me some ideas, please. This is performance engineering.",
    "start": "1320330",
    "end": "1326220"
  },
  {
    "text": "You should know this. Ideas for making it faster. Please. AUDIENCE: You can start\nwith arbitrary nodes.",
    "start": "1326220",
    "end": "1332435"
  },
  {
    "text": "So if you take the tour, you\ncan start anywhere, right?",
    "start": "1332435",
    "end": "1338090"
  },
  {
    "text": "JON BENTLEY: OK. So you're saying\njust choose one start",
    "start": "1338090",
    "end": "1347240"
  },
  {
    "text": "and ignore that,\nignore all the others. You don't need to take\neach random start. Fantastic.",
    "start": "1347240",
    "end": "1352360"
  },
  {
    "text": "A factor of n. My friend in the gray T-shirt\njust got a factor of n. How else can you make it faster? What ideas do you have?",
    "start": "1352360",
    "end": "1358308"
  },
  {
    "text": " Please. AUDIENCE: You can\nstart by the distance,",
    "start": "1358308",
    "end": "1365670"
  },
  {
    "text": "and then reject things\nthat were [INAUDIBLE]..",
    "start": "1365670",
    "end": "1372000"
  },
  {
    "text": "JON BENTLEY: Be greedy. Follow the pig principle. If it feels good, do it.",
    "start": "1372000",
    "end": "1377610"
  },
  {
    "text": "Do just local optimization. We'll get to that\nin a long time, but, boy, would that be\na powerful technique.",
    "start": "1377610",
    "end": "1383340"
  },
  {
    "text": "Other ideas, please? AUDIENCE: Parallelize\n[INAUDIBLE].. JON BENTLEY: Ah. Parallelize.",
    "start": "1383340",
    "end": "1388777"
  },
  {
    "text": "I would write that out, but\nthe first I would have to do is remember how many R's and\nL's there are in various places.",
    "start": "1388777",
    "end": "1394110"
  },
  {
    "text": "So I'll write that much. But we'll have a comment\non that at the end. People tried that. Sir?",
    "start": "1394110",
    "end": "1399327"
  },
  {
    "text": "AUDIENCE: Clock the machine. [STUDENTS LAUGH] JON BENTLEY: Unlike you,\nCharles and I, at one point,",
    "start": "1399327",
    "end": "1406250"
  },
  {
    "text": "attended a real\nengineering school at Carnegie Mellon,\nformerly known as CIT,",
    "start": "1406250",
    "end": "1412795"
  },
  {
    "text": "Carnegie Institute\nof Technology. Charles, do you\nremember the cheer? CHARLES LEISERSON: The cheer? JON BENTLEY: The cheer. CHARLES LEISERSON: I\ndon't know how to cheer.",
    "start": "1412795",
    "end": "1419555"
  },
  {
    "text": "JON BENTLEY: 3.14159,\ntangent, secant, cosine, sine. Square root, cube\nroot, log of e.",
    "start": "1419555",
    "end": "1425195"
  },
  {
    "text": "Water-cooled slipstick, CIT. What's a water-cooled slipstick?",
    "start": "1425195",
    "end": "1430603"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. JON BENTLEY: Pardon me? AUDIENCE: [INAUDIBLE]. JON BENTLEY: It's a slide\nrule that you run so fast.",
    "start": "1430603",
    "end": "1436800"
  },
  {
    "text": "It has to be water-cooled. So if you can just\noverclock the machine, just spray it with\na garden hose.",
    "start": "1436800",
    "end": "1442490"
  },
  {
    "text": "And as long as it makes\nover the finish line, you don't care if it\ndies when it collapses.",
    "start": "1442490",
    "end": "1448490"
  },
  {
    "text": "So, sure, you can\nget faster machines. We'll talk about that. ",
    "start": "1448490",
    "end": "1455513"
  },
  {
    "text": "How else can you\nmake this faster? ",
    "start": "1455513",
    "end": "1461840"
  },
  {
    "text": "Other ideas? These are all great ideas. We'll try it.",
    "start": "1461840",
    "end": "1467210"
  },
  {
    "text": "Let's see some ideas. Compiler optimizations. I just said gcc and I ran it.",
    "start": "1467210",
    "end": "1474890"
  },
  {
    "text": "What should I have said instead? Instead of just gcc?",
    "start": "1474890",
    "end": "1481338"
  },
  {
    "text": "AUDIENCE: O3. JON BENTLEY: O3. How much difference\nwill that make? ",
    "start": "1481338",
    "end": "1488360"
  },
  {
    "text": "I used to know the\nanswers to all these. [INAUDIBLE] turn on\noptimization, 10%. Sometimes,\nwhoopee-freaking-do, 15%.",
    "start": "1488360",
    "end": "1495980"
  },
  {
    "text": "Does turning on O3 still\nmake it a 15% difference? We'll see.",
    "start": "1495980",
    "end": "1501559"
  },
  {
    "text": "You could do that. A faster hardware. I did this 20 years ago. I had all that number there.",
    "start": "1501560",
    "end": "1506870"
  },
  {
    "text": "I'll show you some\nof those numbers. Modify the C code. We'll talk about\nall those options, but let's start with\ncompiler optimizations.",
    "start": "1506870",
    "end": "1513320"
  },
  {
    "text": "With no options there--\nhow much faster will it be if I turn on optimization? This is a performance\nengineering class.",
    "start": "1513320",
    "end": "1518750"
  },
  {
    "text": "You should know that thing. Does it matter at all? Is it going to be 15%? Is it going to\nnot matter at all? How much will it matter\nto turn on optimization?",
    "start": "1518750",
    "end": "1525851"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] a lot. JON BENTLEY: How much is a lot? I know this isn't the real\nengineering school of CIT,",
    "start": "1525852",
    "end": "1533450"
  },
  {
    "text": "but pretend like this\nis kind of a semi-- one of the engineering schools. Give me a number for this. AUDIENCE: More than 15%.",
    "start": "1533450",
    "end": "1539150"
  },
  {
    "text": "JON BENTLEY: More than 15%\nDo I hear more than 16%? I was surprised.",
    "start": "1539150",
    "end": "1544580"
  },
  {
    "text": "If I enabled O3, it went\nfrom 4 seconds to 12-- I couldn't even time it here.",
    "start": "1544580",
    "end": "1550790"
  },
  {
    "text": "It wasn't enough\nto time it here. 45 seconds to 1.6 seconds. I can get real times down there.",
    "start": "1550790",
    "end": "1556070"
  },
  {
    "text": "I observed, ballpark here,\nabout a factor of 25. ",
    "start": "1556070",
    "end": "1562130"
  },
  {
    "text": "Holy tamale. On a Raspberry Pi, it\nwas only a factor of 6,",
    "start": "1562130",
    "end": "1567530"
  },
  {
    "text": "and on other machines it was\nsomewhere between the two. Turning on optimization\nreally matters. Enabling that really matters.",
    "start": "1567530",
    "end": "1574010"
  },
  {
    "text": "For now on, I'm only going to\nshow you full optimization. It's cheating not to. But just think about\nthat, a factor of 25.",
    "start": "1574010",
    "end": "1582050"
  },
  {
    "text": "How else can I make if faster? ",
    "start": "1582050",
    "end": "1587250"
  },
  {
    "text": "Two machines. Back in the day, I happened to\nhave some data laying around of running it on a Pentium\nPro at 20 megahertz.",
    "start": "1587250",
    "end": "1594340"
  },
  {
    "text": "Nowadays, I had this. How much faster will this\nmachine be 20 years later? ",
    "start": "1594340",
    "end": "1602000"
  },
  {
    "text": "Again, pretend like you're\nat a real engineering school. What will it be? Please.",
    "start": "1602000",
    "end": "1607205"
  },
  {
    "text": "AUDIENCE: 20 times faster? JON BENTLEY: 20 times faster? How did you get 20 times faster? AUDIENCE: Well, the clock\nspeed is 10 times faster.",
    "start": "1607205",
    "end": "1613965"
  },
  {
    "text": "JON BENTLEY: The\nclock speed about 10. AUDIENCE: But I'm\nguessing that it has much better instructions.",
    "start": "1613965",
    "end": "1619240"
  },
  {
    "text": "JON BENTLEY: Here's\nwhat I found. On this machine, it\nwent from a factor--",
    "start": "1619240",
    "end": "1625780"
  },
  {
    "text": "there is about a hundred-- these factors, I\nfound, consistently",
    "start": "1625780",
    "end": "1630880"
  },
  {
    "text": "were about, over the 20\nyears, about a factor of 150. From Moore's law,\nwhat would it be",
    "start": "1630880",
    "end": "1637779"
  },
  {
    "text": "if you had 20 years if\nyou doubled every two? That's 10 doublings. What is 2 to the 10th?",
    "start": "1637780",
    "end": "1644233"
  },
  {
    "text": "AUDIENCE: It's a thousand. JON BENTLEY: A thousand. So Moore's law\npredicts a thousand. It's more than a factor of 20.",
    "start": "1644233",
    "end": "1650350"
  },
  {
    "text": "I got a factor of\n150 here, which is close to what Moore's\nlaw might predict,",
    "start": "1650350",
    "end": "1656140"
  },
  {
    "text": "but there is some\nslowing down at the end. I'm not at all\ntraumatized by this. A speed-up of about a factor of\n150, where does that come from?",
    "start": "1656140",
    "end": "1664120"
  },
  {
    "text": "My guess is you\nget about a factor of 12 due to a faster clock\nspeed, and another factor of 12",
    "start": "1664120",
    "end": "1669970"
  },
  {
    "text": "due to things like\nwider data paths. You don't have to try\nto its cram everything into 16-bit funnel.",
    "start": "1669970",
    "end": "1675730"
  },
  {
    "text": "You have 64-bit\ndata paths there. Deeper pipelines, more\nappropriate instruction sets, and compilers that\nexploit those instruction sets",
    "start": "1675730",
    "end": "1683440"
  },
  {
    "text": "if O3 is enabled. If O3 is not enabled,\nsucks to be you.",
    "start": "1683440",
    "end": "1688510"
  },
  {
    "text": "Questions about that? Let's go. So we have constant\nfactor improvements,",
    "start": "1688510",
    "end": "1694210"
  },
  {
    "text": "external, modern machines,\nturn on optimization. But a factor of 150 and\na factor 25 is a lot.",
    "start": "1694210",
    "end": "1703568"
  },
  {
    "text": "We were starting off with that. That is a good start. ",
    "start": "1703568",
    "end": "1709629"
  },
  {
    "text": "Back in the day, if you change\nthings from doubles to floats, it got way faster. From floats, the\nanswer was faster yet.",
    "start": "1709630",
    "end": "1715690"
  },
  {
    "text": "Does that change make\nmuch difference nowadays? No. Exactly the same runtime.",
    "start": "1715690",
    "end": "1723280"
  },
  {
    "text": "One thing that does\nmake a difference is-- this is the definition\nof the geometric distance.",
    "start": "1723280",
    "end": "1731320"
  },
  {
    "text": "My j is the square root\nof the sum of the squares of the differences.",
    "start": "1731320",
    "end": "1737230"
  },
  {
    "text": "That's doing an array access, a\nsubtraction, a multiplication, multiplication, two array\naccesses, subtraction,",
    "start": "1737230",
    "end": "1744800"
  },
  {
    "text": "multiplication, addition,\nand a square root. That used to take a long time. If I replace that\nwith a table lookup",
    "start": "1744800",
    "end": "1751570"
  },
  {
    "text": "by filling out\nthis sort of table, the distance for\nalgorithm 2 is just",
    "start": "1751570",
    "end": "1757990"
  },
  {
    "text": "the distance arrays of i sub j. That gave me a speedup\nfactor of 2 and 1/2 or 3.",
    "start": "1757990",
    "end": "1763059"
  },
  {
    "text": "Back in the day, that was\na speedup factor of 25. For you as\nperformance engineers, you have all this intuition.",
    "start": "1763060",
    "end": "1770590"
  },
  {
    "text": "Every piece of intuition\nyou have, that I had, that was really appropriate 10\nyears ago is irrelevant now.",
    "start": "1770590",
    "end": "1778360"
  },
  {
    "text": "You have to go back and\nget models to figure out how much each thing costs. ",
    "start": "1778360",
    "end": "1784600"
  },
  {
    "text": "But, still, it's another\nspeedup factor of 3 just by replacing this arithmetic\nwith a table lookup.",
    "start": "1784600",
    "end": "1794380"
  },
  {
    "text": "Algorithm 3. What we're going to do is choose\nthe ones we need to start with.",
    "start": "1794380",
    "end": "1800919"
  },
  {
    "text": " So we'll start at city 1.",
    "start": "1800920",
    "end": "1806690"
  },
  {
    "text": "We'll leave 9, if we\nhave a 9-element problem, in that position, and\njust search of n minus 1.",
    "start": "1806690",
    "end": "1814843"
  },
  {
    "text": "It doesn't matter\nwhere you start. You're going to go back\nto it, so you can just choose one to start with.",
    "start": "1814843",
    "end": "1820490"
  },
  {
    "text": "Not a lot of code. Permutations are now\nthat, distance at each. So now you've reduced n times\nn factorial to n factorial.",
    "start": "1820490",
    "end": "1828230"
  },
  {
    "text": "Algorithm 4 is I'm computing\nthe same sum each time.",
    "start": "1828230",
    "end": "1834049"
  },
  {
    "text": "Is there a way to avoid\ncomputing the same darn sum each time? We'll carry that\nsum along with you.",
    "start": "1834050",
    "end": "1840740"
  },
  {
    "text": "Instead of recomputing the same\nthing over and over and over, start off with the sum being 0.",
    "start": "1840740",
    "end": "1847549"
  },
  {
    "text": "The parameters are now m and\nthe distance so far. s Then you just add in these remaining\npieces at each point,",
    "start": "1847550",
    "end": "1855270"
  },
  {
    "text": "and you solve it that way. And there it's sort of a\nnice piece of mathematics.",
    "start": "1855270",
    "end": "1861110"
  },
  {
    "text": "I wish I had the\ntime to analyze it. I did a spreadsheet where I\nsaid, what's the ratio of this?",
    "start": "1861110",
    "end": "1866780"
  },
  {
    "text": "And it started off as 3, 3\nand 1/2, 3.6, 3.65, 3.7--",
    "start": "1866780",
    "end": "1875990"
  },
  {
    "text": "3.718281828. What does that mean if you\nsee a constant 3.718281828?",
    "start": "1875990",
    "end": "1883910"
  },
  {
    "text": "It's 1 plus e. And once I knew\nwhat the answer was, even I, in my\nmathematical frailty,",
    "start": "1883910",
    "end": "1890390"
  },
  {
    "text": "was able to prove that it's\n1 plus e times n factorial. I'm not giving you the\nproof, but it's very cool.",
    "start": "1890390",
    "end": "1896510"
  },
  {
    "text": "You run across these things. So here are the four\nalgorithms so far. On an entirely different\nsemi-fast machine,",
    "start": "1896510",
    "end": "1905000"
  },
  {
    "text": "the runtime-- here the real clock\ntimes on this machine were 10, 11, 12, 13.",
    "start": "1905000",
    "end": "1911629"
  },
  {
    "text": "Real times in bold\nare measured times. These other times are\napproximate estimates.",
    "start": "1911630",
    "end": "1918110"
  },
  {
    "text": "And you can see now\nthat for size 13, you go from taking a\nfraction of an hour to taking",
    "start": "1918110",
    "end": "1925100"
  },
  {
    "text": "a third of a minute. We've made some programs faster. That's pretty cool.",
    "start": "1925100",
    "end": "1930880"
  },
  {
    "text": "We feel good about this. This is what we do. ",
    "start": "1930880",
    "end": "1936500"
  },
  {
    "text": "Any questions at all? We got to go faster. How do we go faster?",
    "start": "1936500",
    "end": "1941640"
  },
  {
    "text": " To say precisely, for\nall these experiments,",
    "start": "1941640",
    "end": "1947030"
  },
  {
    "text": "I took one data set. And if I say that\nruntime for size 15,",
    "start": "1947030",
    "end": "1952190"
  },
  {
    "text": "I take the first 15\nelements of that data set. For 16, I take the\nfirst 16 elements. 17, and so on and so forth.",
    "start": "1952190",
    "end": "1958130"
  },
  {
    "text": "It's not great science. I've done the experiments\nwhere I did it on lots of random data. The trends are the same.",
    "start": "1958130",
    "end": "1965110"
  },
  {
    "text": "It smooths out some of the\ncurves, but we'll see this. The times are for initial\nsequence of one random set.",
    "start": "1965110",
    "end": "1971018"
  },
  {
    "text": "It's pretty robust.  But the problem has factorial\ngrowth. it started factorial.",
    "start": "1971018",
    "end": "1978290"
  },
  {
    "text": "It's still factorial. What does that mean?",
    "start": "1978290",
    "end": "1983659"
  },
  {
    "text": "Each factor of n allows us to\nincrease the problem size by 1 in about the same time.",
    "start": "1983660",
    "end": "1988700"
  },
  {
    "text": "Faster machine and all that,\nwe can now push into the teens. What does that mean?",
    "start": "1988700",
    "end": "1994250"
  },
  {
    "text": "You can take Abraham\nLincoln's problem, and they got a tour\nwith this length. The optimal tour looks sort\nof the same on this side,",
    "start": "1994250",
    "end": "2002559"
  },
  {
    "text": "but it's really\ndifferent over here. Charles, what figure is that?",
    "start": "2002560",
    "end": "2009143"
  },
  {
    "text": "I've mentioned yesterday that\nif you work on the traveling salesman, every instance you\nsee turns into a Rorschach test.",
    "start": "2009143",
    "end": "2015180"
  },
  {
    "text": "CHARLES LEISERSON: The first\none is a bunny hopping, and the second one is just\nthe head of the bunny.",
    "start": "2015180",
    "end": "2021013"
  },
  {
    "text": "JON BENTLEY: The bunny head. Everyone see that? Those are in fact\nthe correct answers. He is a psychologically\nsound human being.",
    "start": "2021013",
    "end": "2027400"
  },
  {
    "text": "Does anyone else want to\ngive their Rorschach answers? A free diagnosis.",
    "start": "2027400",
    "end": "2033640"
  },
  {
    "text": "Absolutely no charge. I'll completely diagnose\nyou. but the bunny hopping",
    "start": "2033640",
    "end": "2039760"
  },
  {
    "text": "and the bunny head are in fact\nthe correct answers for here. We'll see more later.",
    "start": "2039760",
    "end": "2045860"
  },
  {
    "text": "So Abraham Lincoln, you've\nsolved his problem now. My friend Mike Shamos\ncould solve his problem.",
    "start": "2045860",
    "end": "2052360"
  },
  {
    "text": "Did he get the optimal tour? Well, over here he\ngot a big part of it. But over here it's really\nsort of a different character.",
    "start": "2052360",
    "end": "2063419"
  },
  {
    "text": "It's a fairly\ndifferent character. Is it far off? Yes, about a third\nof a percent off.",
    "start": "2063420",
    "end": "2068760"
  },
  {
    "text": "So his approach was within\na third of a percent. I've always worked--\nI spent much of my career working on\napproximate solutions to TSPs.",
    "start": "2068760",
    "end": "2076440"
  },
  {
    "text": "Those are often good enough. This algorithm, you can\nprove-- that he applied-- is within 50%.",
    "start": "2076440",
    "end": "2082199"
  },
  {
    "text": "In the real world, it got\nwithin a third of a percent. Wow. But now we can go out and we\ncan solve the whole problem",
    "start": "2082199",
    "end": "2088169"
  },
  {
    "text": "in 16 hours. If you were writing the thesis\nand you happened to do this, would it be worthwhile now\nto sink 16 hours of CPU time",
    "start": "2088170",
    "end": "2096149"
  },
  {
    "text": "into this? You're going to go\naway for a weekend and leave your machine running. At the time,\nCharles, when we had",
    "start": "2096150",
    "end": "2101940"
  },
  {
    "text": "one big computer for 60 or\n70 people in that department, could we have dreamt about\nusing 16 hours for that?",
    "start": "2101940",
    "end": "2109290"
  },
  {
    "text": "On the very border. If you made it a really\nmellow background process, it might finish in\na week or three.",
    "start": "2109290",
    "end": "2115980"
  },
  {
    "text": "All of these things change. The computers get faster. They get more available. You can devote a machine\nto dump 16 hours down this.",
    "start": "2115980",
    "end": "2123660"
  },
  {
    "text": "But can we make it faster yet? Can we ever analyze,\nsay, all permutations of a deck of cards?",
    "start": "2123660",
    "end": "2129480"
  },
  {
    "text": "How many permutations are\nthere of a deck of cards if you take out those jokers? ",
    "start": "2129480",
    "end": "2136338"
  },
  {
    "text": "What's that number? ",
    "start": "2136338",
    "end": "2141404"
  },
  {
    "text": "AUDIENCE: 15 zeros? JON BENTLEY: 1 with\n15 zeros after it? It's a big number, 2 to the--",
    "start": "2141405",
    "end": "2148760"
  },
  {
    "text": "52 factorial. I want to teach you how\nbig 52 factorial is.",
    "start": "2148760",
    "end": "2155417"
  },
  {
    "text": "People say, that problem\nis growing exponentially. What does that mean? It's quick is what people\nusually mean by it.",
    "start": "2155417",
    "end": "2161080"
  },
  {
    "text": "In mathematics, it's\nsome constant to the n for some defined time period n.",
    "start": "2161080",
    "end": "2166450"
  },
  {
    "text": "Factorial growth-- is factorial\ngrowth exponential growth? Why not?",
    "start": "2166450",
    "end": "2171790"
  },
  {
    "text": "Why isn't a factorial\nexponential? AUDIENCE: It's more\nthan exponential? JON BENTLEY: It's\nmore than exponential.",
    "start": "2171790",
    "end": "2177087"
  },
  {
    "text": "It's super exponential. We'll talk about\nthe details here. By Sterling's approximation,\nyou have seen in other classes",
    "start": "2177087",
    "end": "2185829"
  },
  {
    "text": "that log of n factorial is n\nlog n minus n plus O of log n for the natural log.",
    "start": "2185830",
    "end": "2192560"
  },
  {
    "text": "The log base 2 of n factorial\nis about n log n minus 1.386n.",
    "start": "2192560",
    "end": "2198130"
  },
  {
    "text": "Where have you seen\nthis number before? ",
    "start": "2198130",
    "end": "2204190"
  },
  {
    "text": "n log n minus 1-- In an algorithms class, you\ndid a lower bound on a decision",
    "start": "2204190",
    "end": "2210130"
  },
  {
    "text": "tree model of sorting. There were n factorial\nleaves to sort. A sort algorithm must take\nat least as much time.",
    "start": "2210130",
    "end": "2216010"
  },
  {
    "text": "So that gives you that bound. And merge sort is n log n minus\nn, so you're really narrow.",
    "start": "2216010",
    "end": "2221290"
  },
  {
    "text": "Where else have you seen 1.386n? That's the runtime\nof quick sort.",
    "start": "2221290",
    "end": "2226712"
  },
  {
    "text": "All these things are\ncoming back together here, because it's the\nnatural log of e-- I'm sorry-- the log base 2 of e.",
    "start": "2226712",
    "end": "2235870"
  },
  {
    "text": "So n factorial is\nnot 2 to the n. It's 2 to the n log n. It's about n to the n.",
    "start": "2235870",
    "end": "2242110"
  },
  {
    "text": "It's faster than any\nexponential function.",
    "start": "2242110",
    "end": "2248110"
  },
  {
    "text": "How big is 52 factorial? You guessed 10 to the 15th? Was that--",
    "start": "2248110",
    "end": "2253636"
  },
  {
    "text": "AUDIENCE: Yes. JON BENTLEY: OK. If we see here, it's going\nto be something like 2 to the n log n.",
    "start": "2253636",
    "end": "2260470"
  },
  {
    "text": "n is 52. Log of 52 is about six. So that's 2 to the 300.",
    "start": "2260470",
    "end": "2265610"
  },
  {
    "text": "But there's a minus n term. Maybe 2 to the 250. It's about 2 to the 225,\nwhich is 10 to the 67th.",
    "start": "2265610",
    "end": "2275200"
  },
  {
    "text": "That's a big number. How big is it? Let me put it in everyday terms.",
    "start": "2275200",
    "end": "2280960"
  },
  {
    "text": "Try this after class. Set a timer to count down\n52 factorial nanoseconds, 10",
    "start": "2280960",
    "end": "2290003"
  },
  {
    "text": "to the 67th. Stand on the equator-- watch out where you are-- and take one step forward\nevery million years.",
    "start": "2290003",
    "end": "2296859"
  },
  {
    "text": "Don't rush into this. I don't want you to get\nall hyper about this. Eventually, when you\ncircle the Earth once,",
    "start": "2296860",
    "end": "2303910"
  },
  {
    "text": "take a drop of water\nfrom the Pacific Ocean, and keep on going. Be careful about this.",
    "start": "2303910",
    "end": "2309205"
  },
  {
    "text": "But this is an experiment. You're nerds. It's OK. When the Pacific Ocean\nis empty, at that point",
    "start": "2309205",
    "end": "2314620"
  },
  {
    "text": "lay a sheet of paper down,\nrefill the ocean, and carry on. Now keep on doing that.",
    "start": "2314620",
    "end": "2320410"
  },
  {
    "text": "When you're stack of\npaper reaches the Moon, check the timer. You're almost done.",
    "start": "2320410",
    "end": "2326240"
  },
  {
    "text": "This is how big\n10 to the 52nd is. The age of the universe\nso far is about 10",
    "start": "2326240",
    "end": "2331390"
  },
  {
    "text": "to the 26th nanoseconds. 10 to the 52nd is a long time.",
    "start": "2331390",
    "end": "2337180"
  },
  {
    "text": "Can we ever solve a problem\nif we look at all 10 to the 52nd options? What do we have to do instead?",
    "start": "2337180",
    "end": "2344170"
  },
  {
    "text": "AUDIENCE: Quantum computing? JON BENTLEY: Pardon me? AUDIENCE: Quantum computing. JON BENTLEY: Quantum computing.",
    "start": "2344170",
    "end": "2349230"
  },
  {
    "text": "OK. That's great. And I have a really cool bridge\nacross this river out here that I'll sell you after class.",
    "start": "2349230",
    "end": "2355240"
  },
  {
    "text": "Let's talk about that. Is there a nice quantum\napproach to this problem?",
    "start": "2355240",
    "end": "2361750"
  },
  {
    "text": "Maybe. Maybe you could actually phrase\nthis as an optimization problem where you could maybe get\nsome mileage out of that.",
    "start": "2361750",
    "end": "2367040"
  },
  {
    "text": "But we'll see. So one approach is\nquantum computing. What's another approach? What are we going to have to\ndo to make our program surmount",
    "start": "2367040",
    "end": "2375310"
  },
  {
    "text": "this obstacle? Please. AUDIENCE: Limit\nthe search space? JON BENTLEY: Pardon me?",
    "start": "2375310",
    "end": "2380785"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. JON BENTLEY: We're going to\nhave to limit our search space. We're going to have to\nprune the search space.",
    "start": "2380785",
    "end": "2389619"
  },
  {
    "text": " That's the idea.",
    "start": "2389620",
    "end": "2394630"
  },
  {
    "text": "Let's try it. Here's a cool problem. I was at a ceremony\na few weeks ago.",
    "start": "2394630",
    "end": "2401023"
  },
  {
    "text": "A friend of mine said\nhere's this cool problem that his daughter just\nbrought home from high school. How do you solve it?",
    "start": "2401023",
    "end": "2406990"
  },
  {
    "text": "Find all permutations\nof the 10 integer-- the nine integers\n1 through n such that each initial substring\nof length m is divisible by m.",
    "start": "2406990",
    "end": "2415960"
  },
  {
    "text": "So the whole darn thing\nis divisible by 9. Is any permutation of integers\n1 through 9 divisible by 9?",
    "start": "2415960",
    "end": "2424730"
  },
  {
    "text": "Well, they all sum up to\nnumbers divisible by 9. You work that. Is it divisible--\nare the first eight",
    "start": "2424730",
    "end": "2430780"
  },
  {
    "text": "characters divisible by 8? But let's start\nwith an easy one. If you were doing it\nfor size 3, 321 works.",
    "start": "2430780",
    "end": "2439869"
  },
  {
    "text": "Is 321 divisible by 3? Is 32 divisible by 2? Is 3 divisible by 1?",
    "start": "2439870",
    "end": "2445940"
  },
  {
    "text": "Thinking, then, it works. Is 132 divisible by 3? Yes. Is 13 divisible by 2?",
    "start": "2445940",
    "end": "2452844"
  },
  {
    "text": "[MAKES BUZZER SOUND]\nThat doesn't work. So we're going to try\nto solve this problem.",
    "start": "2452844",
    "end": "2458690"
  },
  {
    "text": "My friend Greg Conti, a really\ngreat computer security guy,",
    "start": "2458690",
    "end": "2465170"
  },
  {
    "text": "gave me this problem. How do you solve it? How would you\nsolve this problem? If this high school\nkid says, here's",
    "start": "2465170",
    "end": "2472730"
  },
  {
    "text": "a problem I brought home from\nschool, how do I solve it? What would you do?",
    "start": "2472730",
    "end": "2480089"
  },
  {
    "text": "Ideas?  I'm sorry. Please.",
    "start": "2480090",
    "end": "2486227"
  },
  {
    "text": "AUDIENCE: Yes. You could write a program where\nthe state could be [INAUDIBLE]..",
    "start": "2486227",
    "end": "2491760"
  },
  {
    "text": "Or actually just like\na subset [INAUDIBLE].. Then you iterate\nover [INAUDIBLE]..",
    "start": "2491760",
    "end": "2499748"
  },
  {
    "text": "JON BENTLEY: Great. So there are two\nmain approaches. One is write a program. So you can either think\nor you can compute.",
    "start": "2499748",
    "end": "2507740"
  },
  {
    "text": "Who in this room enjoys\nwriting programs? Who enjoys thinking? Oh, that's an easy call.",
    "start": "2507740",
    "end": "2515990"
  },
  {
    "text": "What's the right approach here? Well, the right answer\nis you think for a while. If you solve it in the\nfirst three minutes,",
    "start": "2515990",
    "end": "2522800"
  },
  {
    "text": "don't write a program. If you spend much more\nthan five minutes on it, let's write a program and see\nwhat we learn from the program.",
    "start": "2522800",
    "end": "2528490"
  },
  {
    "text": "We'll go back and forth. Never think when you\nshould compute, never compute when you should think. How do you know which one to do?",
    "start": "2528490",
    "end": "2533539"
  },
  {
    "text": "Try each. See which one gets\nyou further faster.  If you write a\nprogram for this, What",
    "start": "2533540",
    "end": "2539839"
  },
  {
    "text": "are the basic structures\nyou have to deal with? ",
    "start": "2539840",
    "end": "2545009"
  },
  {
    "text": "You have to deal with\nnine-digit strings that are also nine-digit numbers.",
    "start": "2545010",
    "end": "2550849"
  },
  {
    "text": "What's a good language\nfor dealing with that? What would you-- if you had\nto write a program to do this, what language would you choose?",
    "start": "2550850",
    "end": "2557032"
  },
  {
    "text": " We'll see.",
    "start": "2557032",
    "end": "2562430"
  },
  {
    "text": "How do you generate all\nintact real permutations of the string? Well, I hope you can see this.",
    "start": "2562430",
    "end": "2567770"
  },
  {
    "text": "Here's the way that\nI chose to do it. I chose to have a\nrecursive procedure search.",
    "start": "2567770",
    "end": "2572900"
  },
  {
    "text": "And I'm going to have right be\nthe part that's already fixed,",
    "start": "2572900",
    "end": "2577940"
  },
  {
    "text": "left be the part that\nyou're going to vary. I could've done\nit the other way, but I'll choose\nto do it this way. I start with left equals\nthat, right equals that.",
    "start": "2577940",
    "end": "2586760"
  },
  {
    "text": "I end when the left is empty. So I have to recur down, just\nlike we've been doing so far,",
    "start": "2586760",
    "end": "2591890"
  },
  {
    "text": "but I'm going to do that\nwith strings instead. And if I get to the call search\nof 56-- of 356 with 421978--",
    "start": "2591890",
    "end": "2601920"
  },
  {
    "text": "these are all fixed-- I'll take each one of\nthese in turn, 3, 5, and 6, put it into here.",
    "start": "2601920",
    "end": "2608730"
  },
  {
    "text": "So I'll call search of 56\nwith that, search of 36 with that, search\nof 35 with that.",
    "start": "2608730",
    "end": "2614720"
  },
  {
    "text": "Everyone see how that works? How long will the code be\nin your favorite language?",
    "start": "2614720",
    "end": "2620090"
  },
  {
    "text": " Here's the code in\nmy favorite language.",
    "start": "2620090",
    "end": "2625579"
  },
  {
    "text": "Has anyone here ever used\nthe AWK programming language, written by Aho,\nWeinberger, and Kernighan? They observed that\nnaming a language",
    "start": "2625580",
    "end": "2633740"
  },
  {
    "text": "after the initials\nof the authors shows a certain\npaucity of imagination. But it works.",
    "start": "2633740",
    "end": "2639900"
  },
  {
    "text": "So a function search\nof left, right, that, if left equals 0--\nis null, I'll check it.",
    "start": "2639900",
    "end": "2645440"
  },
  {
    "text": "Otherwise, what will I do here? ",
    "start": "2645440",
    "end": "2651850"
  },
  {
    "text": "The details don't matter. For i equals 1 up to the\nlength of the left-hand side of the string,\nsearch the substring",
    "start": "2651850",
    "end": "2658090"
  },
  {
    "text": "at the left starting at\n1, going for i minus 1, concatenated with the\nsubstring at the left",
    "start": "2658090",
    "end": "2664210"
  },
  {
    "text": "starting at i plus 1. And then take the\nsubstring in the middle, put it out in\nfront of the right. Do that for all i values.",
    "start": "2664210",
    "end": "2670780"
  },
  {
    "text": "Any questions about that? The details don't matter. It's not a big program. ",
    "start": "2670780",
    "end": "2677859"
  },
  {
    "text": "If I do this, and at the\nend, for i equal 1 to length, if the substring of the right\nmod i is nonzero, then return.",
    "start": "2677860",
    "end": "2686250"
  },
  {
    "text": "If it's not that,\nyou print it out. If I run this program,\nhow long, ballpark, will this program take\nfor 9 factorial, ballpark?",
    "start": "2686250",
    "end": "2694465"
  },
  {
    "text": " What was your answer before? AUDIENCE: A second.",
    "start": "2694465",
    "end": "2699579"
  },
  {
    "text": "JON BENTLEY: A second. Great. Well, we'll recycle that. Reduce, reuse, recycle. We'll recycle your answers.",
    "start": "2699580",
    "end": "2705420"
  },
  {
    "text": "If I call it originally\nwith that string, it takes about 3 seconds.",
    "start": "2705420",
    "end": "2712000"
  },
  {
    "text": "And it found that there\nwas-- it searched all 9 factorial, 362880,\n362,000 strings,",
    "start": "2712000",
    "end": "2719380"
  },
  {
    "text": "and found only one string\nthere that matches that. Whoops. ",
    "start": "2719380",
    "end": "2726039"
  },
  {
    "text": "Are these divisible by 9? Well, they sum to a\nmultiple of 9, sure. Is the string that ends\nin 72 divisible by 8?",
    "start": "2726040",
    "end": "2733510"
  },
  {
    "text": "Yes, that works. 7, I'm not going to bother with. All the way down, is\n38 divisible by 2?",
    "start": "2733510",
    "end": "2740160"
  },
  {
    "text": "Is 381 divisible by 3? This one works. That's a pretty cool problem\nfor a high school afternoon.",
    "start": "2740160",
    "end": "2747422"
  },
  {
    "text": " Is 3 seconds fast enough?",
    "start": "2747423",
    "end": "2753839"
  },
  {
    "text": "Yes. The trade-off of\nthinking and programming. Write the darn program. You're done.",
    "start": "2753840",
    "end": "2759220"
  },
  {
    "text": "It's cool. If you wanted to make it faster,\nhow could you make it faster?",
    "start": "2759220",
    "end": "2765349"
  },
  {
    "text": "That's what this\ncourse is all about? Always think about how you\ncould make things faster. Please. AUDIENCE: Well, if you just\nstop searching once you know",
    "start": "2765350",
    "end": "2773290"
  },
  {
    "text": "one number isn't going to work. JON BENTLEY: How early\ncan you stop searching? That's great.",
    "start": "2773290",
    "end": "2778690"
  },
  {
    "text": "So you could get\nconstant factor speedups. Like don't check for\ndivisibility by 1 at the end.",
    "start": "2778690",
    "end": "2785350"
  },
  {
    "text": "You can change\nlanguage, all that. But those are never\ngoing to matter. The big win is going to come\nfrom pruning the search.",
    "start": "2785350",
    "end": "2791200"
  },
  {
    "text": "How can you put in the search? Any winning string must have\nsome properties of this string.",
    "start": "2791200",
    "end": "2797845"
  },
  {
    "text": "What are some properties\nthat that string has that you can check for early? ",
    "start": "2797845",
    "end": "2804300"
  },
  {
    "text": "Please. AUDIENCE: The second from the\nleft [INAUDIBLE] 2, 4, 6 or 8.",
    "start": "2804300",
    "end": "2811640"
  },
  {
    "text": "JON BENTLEY: The eighth position\nhas to be a multiple of 2. Furthermore, if you\nreally think about it,",
    "start": "2811640",
    "end": "2817880"
  },
  {
    "text": "you can get more than that. It has to be divisible by 4. So an even number has to\nbe in the eighth position.",
    "start": "2817880",
    "end": "2825200"
  },
  {
    "text": "Anywhere else you're going\nto need an even number? AUDIENCE: [INAUDIBLE]. JON BENTLEY: This\nposition has to be even,",
    "start": "2825200",
    "end": "2830960"
  },
  {
    "text": "that has to be even, that has\nto be even, that has to be even. In general, what's\nthe general rule?",
    "start": "2830960",
    "end": "2837122"
  },
  {
    "text": "AUDIENCE: All the even\npositions [INAUDIBLE].. JON BENTLEY: Every even position\nhas to contain an even number.",
    "start": "2837122",
    "end": "2844040"
  },
  {
    "text": "There are four even numbers,\nthere are five odd numbers. What other rule might\nyou come up with? ",
    "start": "2844040",
    "end": "2851102"
  },
  {
    "text": "AUDIENCE: The fifth\nposition has to be 5. JON BENTLEY: OK. Every odd position has\nto be an odd number.",
    "start": "2851102",
    "end": "2858710"
  },
  {
    "text": "And, in particular, the\nfifth position has to be a 5.",
    "start": "2858710",
    "end": "2864619"
  },
  {
    "text": "So those are a few rules. Even digits in even positions,\nodd digits in odd positions,",
    "start": "2864620",
    "end": "2870500"
  },
  {
    "text": "digit 5 in position 5. Three simple rules. You can test those easily.",
    "start": "2870500",
    "end": "2875582"
  },
  {
    "text": "The code is pretty\nstraightforward. Will that shrink the\nsize of the search space much at all really?",
    "start": "2875582",
    "end": "2882640"
  },
  {
    "text": "How big was the\nsearch space before? ",
    "start": "2882640",
    "end": "2887890"
  },
  {
    "text": "9 for the first one. Now how big is the search space? For the first, if you\njust had the three rules--",
    "start": "2887890",
    "end": "2893680"
  },
  {
    "text": "evens going evens, odds in\nodds, and 5 in the middle-- how many choices do you\nhave for the first one?",
    "start": "2893680",
    "end": "2900078"
  },
  {
    "text": "AUDIENCE: For the first,\nwe have [INAUDIBLE].. JON BENTLEY: Four choices. For the second one, you have?",
    "start": "2900078",
    "end": "2906202"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. JON BENTLEY: It can't be a 5. It has to be an odd\nnumber, not a 5. You have a 4.",
    "start": "2906202",
    "end": "2912692"
  },
  {
    "text": "So it's 4 by 4 times 3 times 3\ntimes 1 times 2 times 2 times 1 times-- everyone see that?",
    "start": "2912692",
    "end": "2918710"
  },
  {
    "text": "We've reduce the size\nof the search space from a third of a million\nto half a thousand.",
    "start": "2918710",
    "end": "2925609"
  },
  {
    "text": "Isn't it going to be a lot\nof hassle to code that? I mean, is it going to take\na major software development effort to code that?",
    "start": "2925610",
    "end": "2931850"
  },
  {
    "text": "Well, yes, if you define that\nas a major software development effort.",
    "start": "2931850",
    "end": "2937109"
  },
  {
    "text": "If the parity of\nthe string length is equal to the parity of the\ndigit, then you can continue.",
    "start": "2937110",
    "end": "2947130"
  },
  {
    "text": "If you don't have these\nthings, you can't continue. Three lines of code\nallow you to do this.",
    "start": "2947130",
    "end": "2953790"
  },
  {
    "text": "That's the story. Factorial grows quickly. You can never visit the\nentire search space.",
    "start": "2953790",
    "end": "2960780"
  },
  {
    "text": "The key to speed is\npruning the search. We're doing just a baby\nbranch-and-bound, it's called.",
    "start": "2960780",
    "end": "2967760"
  },
  {
    "text": "Some fancy algorithms can be\nimplemented in little code. That's our break. We've learned a\ncouple of things.",
    "start": "2967760",
    "end": "2974540"
  },
  {
    "text": "We're going to go\nback into the fray. Any questions about\nthis diversion before we go back to the TSP?",
    "start": "2974540",
    "end": "2981892"
  },
  {
    "text": "These are important lessons. We'll try to apply them now. ",
    "start": "2981893",
    "end": "2991310"
  },
  {
    "text": "I got great advice\nyesterday from people about how to do this.",
    "start": "2991310",
    "end": "3000720"
  },
  {
    "text": "And I seem to have skipped-- OK, here it is. I've got it.",
    "start": "3000720",
    "end": "3007340"
  },
  {
    "text": "How do we prune our search? Here we had these conditions. How can we prune the search?",
    "start": "3007340",
    "end": "3013970"
  },
  {
    "text": "How can I make the\nprogram faster? What's the way I can\nstop doing the search?",
    "start": "3013970",
    "end": "3020960"
  },
  {
    "text": "Simplest way, don't keep\ndoing what doesn't work. If the sum that\nyou have so far is",
    "start": "3020960",
    "end": "3027830"
  },
  {
    "text": "greater than the minimum\nsum, by adding more to it, are you going to make it less? What can you do?",
    "start": "3027830",
    "end": "3034280"
  },
  {
    "text": "You can stop the\nsearch right there. Is the resulting algorithm\ngoing to be faster? ",
    "start": "3034280",
    "end": "3041260"
  },
  {
    "text": "Maybe. It's a trade-off. I'm doing more work,\nwhich takes some time, but I might be able to\nprune the search space.",
    "start": "3041260",
    "end": "3047410"
  },
  {
    "text": "The question is, is this\nbenefit worth this cost? What do you think?",
    "start": "3047410",
    "end": "3053170"
  },
  {
    "text": "Well, on the same machine,\nalgorithm 4 at size 12",
    "start": "3053170",
    "end": "3062253"
  },
  {
    "text": "took 0.6 seconds. Now it's a factor of 60\nfaster, a factor of 40",
    "start": "3062253",
    "end": "3068020"
  },
  {
    "text": "faster, a factor of 100 faster. Just by-- if it doesn't work,\nif you've already screwed up,",
    "start": "3068020",
    "end": "3075099"
  },
  {
    "text": "just don't keep\nwhat doesn't work. That makes the thing\na whole lot faster. Everyone see that?",
    "start": "3075100",
    "end": "3081700"
  },
  {
    "text": "That's the first big win. Can we do even better than that? Is there any way of stopping\nthe search with more information",
    "start": "3081700",
    "end": "3089170"
  },
  {
    "text": "other than, whoops, I've\nalready gone too far? ",
    "start": "3089170",
    "end": "3094637"
  },
  {
    "text": "Please. AUDIENCE: If the nodes\nyou visited previously-- JON BENTLEY: Wait. Command voice. Speak loudly,",
    "start": "3094637",
    "end": "3100210"
  },
  {
    "text": "AUDIENCE: If the nodes\nyou visited previously are the same, like\nthe same subset",
    "start": "3100210",
    "end": "3105869"
  },
  {
    "text": "but a different word than a\nsearch you've done before, then the answer [INAUDIBLE].",
    "start": "3105870",
    "end": "3111360"
  },
  {
    "text": "JON BENTLEY: That's a\nreally powerful idea that Held and Karp used\nto reduce it from n factorial time to n\nsquared 2 to the n time.",
    "start": "3111360",
    "end": "3118780"
  },
  {
    "text": "We'll get to that. That's really powerful, but\nnow we're looking for something not quite that sophisticated. But that's a great idea.",
    "start": "3118780",
    "end": "3126400"
  },
  {
    "text": "Can I somehow prune the search\nif a sum plus a lower bound on the remaining cities is\ngreater than the minimum sum?",
    "start": "3126400",
    "end": "3133360"
  },
  {
    "text": " What kind of lower\nbound could I get? Well, I could computed\na TSP path through them.",
    "start": "3133360",
    "end": "3141292"
  },
  {
    "text": "That's really powerful. That will give me a\nreally good bound, but it's really\nexpensive to compute.",
    "start": "3141292",
    "end": "3146960"
  },
  {
    "text": "So I could-- if this is\na city I've done so far, I could compute a TSP\npath to the rest, which",
    "start": "3146960",
    "end": "3154420"
  },
  {
    "text": "might in this case looks\nlike this, and hook it up.",
    "start": "3154420",
    "end": "3161200"
  },
  {
    "text": "That's going to be a\nreally powerful heuristic, but it's going to be really\nexpensive to compute.",
    "start": "3161200",
    "end": "3166380"
  },
  {
    "text": "On the other hand, I could\ntake just the distance between two random points.",
    "start": "3166380",
    "end": "3172440"
  },
  {
    "text": "I'm going to choose this\npoint and this point",
    "start": "3172440",
    "end": "3180210"
  },
  {
    "text": "I happened to get the\ndiameter of the set. ",
    "start": "3180210",
    "end": "3186099"
  },
  {
    "text": "And that's a lower bound. It's going to be\nat least that long. And it's really\ncheap to compute,",
    "start": "3186100",
    "end": "3191600"
  },
  {
    "text": "but is it very effective? Nyah.",
    "start": "3191600",
    "end": "3196740"
  },
  {
    "text": "So the first choice is\neffective but too expensive. The second point is\nreally inexpensive but not",
    "start": "3196740",
    "end": "3203700"
  },
  {
    "text": "very effective. I could also compute the\nnearest neighbor of each city. From this city, if I just\ncompute its nearest neighbor",
    "start": "3203700",
    "end": "3209880"
  },
  {
    "text": "among here, so it's that. This one is that. That one has its own\nnearest neighbor.",
    "start": "3209880",
    "end": "3215190"
  },
  {
    "text": "I could compute these distances.  And that's pretty\ninexpensive to compute,",
    "start": "3215190",
    "end": "3222012"
  },
  {
    "text": "and it's a pretty\ngood lower bound. That would work. ",
    "start": "3222012",
    "end": "3227640"
  },
  {
    "text": "Who here knows what a\nminimum spanning tree is? Good.",
    "start": "3227640",
    "end": "3233310"
  },
  {
    "text": "What I'll do here is I'll take\nhere a minimum spanning tree. In cities, a tree\nis n minus 1 edges.",
    "start": "3233310",
    "end": "3242490"
  },
  {
    "text": "This tree is n minus 1 edges. This is a spanning tree\nbecause it touches-- it connects all cities.",
    "start": "3242490",
    "end": "3248070"
  },
  {
    "text": "And, furthermore, it's\na minimum spanning tree, because, of all\nspanning trees, This one has the minimum total distance.",
    "start": "3248070",
    "end": "3255670"
  },
  {
    "text": "Now, the tour is\ngoing to be less-- or greater in distance than\nthe minimum spanning tree.",
    "start": "3255670",
    "end": "3262290"
  },
  {
    "text": "Why is that? If I get a tour of\nthis, I can just",
    "start": "3262290",
    "end": "3271869"
  },
  {
    "text": "knock off the longest edge. ",
    "start": "3271870",
    "end": "3282160"
  },
  {
    "text": "And that now becomes a\nminimum spanning tree. So the minimum spanning\ntree is a pretty good bound,",
    "start": "3282160",
    "end": "3287974"
  },
  {
    "text": "a lower bound. It's cheap to compute. Who here has ever seen an\nalgorithm for computing minimum",
    "start": "3287975",
    "end": "3293660"
  },
  {
    "text": "spanning trees? Good, good. Some of you are awake in\nsome of their classes.",
    "start": "3293660",
    "end": "3299680"
  },
  {
    "text": "What are the odds of that? I mean, what an\namazing coincidence.",
    "start": "3299680",
    "end": "3304810"
  },
  {
    "text": "So what we'll do is say now\nthat a better lower bound is to add the minimum spanning\ntree's remaining points.",
    "start": "3304810",
    "end": "3312250"
  },
  {
    "text": "So I change this program to\nif sum plus the MST distance.",
    "start": "3312250",
    "end": "3318940"
  },
  {
    "text": "And now I'm going to do a trick. I'm going to use\nword parallelism. I'm going to have\nthe representation",
    "start": "3318940",
    "end": "3325030"
  },
  {
    "text": "of the subset of the\ncities as a mask, a bit mask in which if the\nappropriate city is on,",
    "start": "3325030",
    "end": "3330460"
  },
  {
    "text": "the bit is turned on. Otherwise, it's turned off. And I just OR bits\ninto it, and say",
    "start": "3330460",
    "end": "3337540"
  },
  {
    "text": "if I compute the minimum\nspanning tree of this set,",
    "start": "3337540",
    "end": "3342550"
  },
  {
    "text": "I can cut the search and return. And then I just compute the MST\nand bring this along with me,",
    "start": "3342550",
    "end": "3349000"
  },
  {
    "text": "turning things off and on in\nthe bit mask as I go down.",
    "start": "3349000",
    "end": "3354400"
  },
  {
    "text": "Pretty straightforward. How much code will\nit cost to compute a minimum spanning tree? ",
    "start": "3354400",
    "end": "3362590"
  },
  {
    "text": "Ballpark? Yes. AUDIENCE: 30 or\n20 lines of code. JON BENTLEY: About that\nmany lines of code.",
    "start": "3362590",
    "end": "3371835"
  },
  {
    "text": "This is the\nPrim-Dijkstra method. It takes quadratic time. For computing an\nMST of n points,",
    "start": "3371835",
    "end": "3377410"
  },
  {
    "text": "it takes n squared time. It's quite simple.",
    "start": "3377410",
    "end": "3382730"
  },
  {
    "text": "You can do it in\ne log log b time.",
    "start": "3382730",
    "end": "3387790"
  },
  {
    "text": "But this is a simple code. It's pretty straightforward.",
    "start": "3387790",
    "end": "3392800"
  },
  {
    "text": "Will this make the program\nrun slower or faster? ",
    "start": "3392800",
    "end": "3398290"
  },
  {
    "text": "What would the argument be\nthat it might run slower? Holy moly. At every node I'm\ncomputing an MST.",
    "start": "3398290",
    "end": "3404718"
  },
  {
    "text": "That takes long time\nand I will run slower. What's the argument to be\nthat it might run faster?",
    "start": "3404718",
    "end": "3410350"
  },
  {
    "text": "Yes, but I'm getting a\nmuch more powerful pruning. Is it worth it? I should point out that I'm only\nshowing the wins here to you.",
    "start": "3410350",
    "end": "3417340"
  },
  {
    "text": "When I redid this myself, I\nwent down a few wrong paths. I wish I would have\ndocumented them better now. But I might go back and\nsee if I can find them.",
    "start": "3417340",
    "end": "3424410"
  },
  {
    "text": "That would be a good thing. But here it is.",
    "start": "3424410",
    "end": "3429830"
  },
  {
    "text": "It used to take 17 seconds. Now it takes-- or 4 seconds. Now it takes 0.",
    "start": "3429830",
    "end": "3434859"
  },
  {
    "text": "You like algorithms\nto take 0 seconds. You'd like to live in\nthe rounding error.",
    "start": "3434860",
    "end": "3441760"
  },
  {
    "text": "4.40 to 0.2. Down here, this program\nis not only faster,",
    "start": "3441760",
    "end": "3447790"
  },
  {
    "text": "it's a boatload faster. And so now we can\ngo out in this.",
    "start": "3447790",
    "end": "3452850"
  },
  {
    "text": "And notice here\nthat as you go out, the times usually get\nbigger, but they are bumpy,",
    "start": "3452850",
    "end": "3458440"
  },
  {
    "text": "from 2.4 seconds to 0.7\nseconds, to 1.8 seconds. It's because you're\ndoing that one thing. It's just the matter\nof the geometry.",
    "start": "3458440",
    "end": "3465039"
  },
  {
    "text": "The times that were originally\nreally smooth now turn bumpy. I've done experiments where\nI do 10 different data sets,",
    "start": "3465040",
    "end": "3471460"
  },
  {
    "text": "randomly drawing each one,\nand it's a nice smooth line. But I missed doing\nit here to be easy.",
    "start": "3471460",
    "end": "3479470"
  },
  {
    "text": "Before we can go out to size 17. Now we can go out to size 30.",
    "start": "3479470",
    "end": "3485290"
  },
  {
    "text": "Wow. How cool is that? That's pretty powerful. ",
    "start": "3485290",
    "end": "3494500"
  },
  {
    "text": "Can I make this-- please. AUDIENCE: So is it possible\nthat the [INAUDIBLE] is chosen in such a way that\nthis thing doesn't actually",
    "start": "3494500",
    "end": "3502072"
  },
  {
    "text": "prune any bad permutations? JON BENTLEY: That's\nabsolutely true. And I've tried this both\non random point sets.",
    "start": "3502072",
    "end": "3509560"
  },
  {
    "text": "I've tried it on\ndistance matrices. I've tried on points\nwhere they're randomly distributed around the\nperimeter of a circle.",
    "start": "3509560",
    "end": "3517520"
  },
  {
    "text": "And so this could\nbe a lot of time. Almost always, it's\npretty effective.",
    "start": "3517520",
    "end": "3523100"
  },
  {
    "text": "Again, if I had more\ntime, I'd talk about it. But in fact we're going\nto go until 3:45, Charles?",
    "start": "3523100",
    "end": "3530215"
  },
  {
    "text": "CHARLES LEISERSON: 3:55. JON BENTLEY: 3:55? When the big hand is on the 11?",
    "start": "3530215",
    "end": "3535570"
  },
  {
    "text": "Oh. Sucks to be you. [STUDENTS LAUGH]",
    "start": "3535570",
    "end": "3541630"
  },
  {
    "text": "I profiled this bad boy, and\nit shows that most of the time is in building minimum\nspanning trees.",
    "start": "3541630",
    "end": "3548320"
  },
  {
    "text": "Your fear that it\nmight take a long time, it might make it\nslower, has a basis. That's where all\nthe time is going.",
    "start": "3548320",
    "end": "3554110"
  },
  {
    "text": "How can I reduce the\ntime spent in building minimum spanning trees? ",
    "start": "3554110",
    "end": "3560640"
  },
  {
    "text": "As I search this-- please. AUDIENCE: Maybe don't\ndo it every time?",
    "start": "3560640",
    "end": "3565945"
  },
  {
    "text": "JON BENTLEY: I could do some\nincremental minimum spanning trees because they change a lot. And so there are\nseveral responses.",
    "start": "3565945",
    "end": "3571630"
  },
  {
    "text": "One is whenever you're building\nsomething over again, rather than building it from\nscratch, see if you can do",
    "start": "3571630",
    "end": "3576733"
  },
  {
    "text": "an incremental\nalgorithm, where you just change one bit of the\nminimum spanning tree. If I just add one\nedge into the graph,",
    "start": "3576733",
    "end": "3582300"
  },
  {
    "text": "always try an\nincremental algorithm. That's cool. That's one\nsophisticated approach. What is one-- what was another\npretty idiot simpler approach?",
    "start": "3582300",
    "end": "3590910"
  },
  {
    "text": "Whenever you compute\nsomething over and over again, what can you do to reduce\nthe time spent computing it?",
    "start": "3590910",
    "end": "3596410"
  },
  {
    "text": "AUDIENCE: Store it? JON BENTLEY: Store it. Do I ever compute the same\nMST over and over again?",
    "start": "3596410",
    "end": "3601500"
  },
  {
    "text": "I don't know. I think maybe it's worth a try.",
    "start": "3601500",
    "end": "3606670"
  },
  {
    "text": "So what I'll do is\nreturn of caching. Store rather than recompute.",
    "start": "3606670",
    "end": "3612090"
  },
  {
    "text": "Cache MST distances rather\nthan computing them. The code looks like this. The new mask is that.",
    "start": "3612090",
    "end": "3619140"
  },
  {
    "text": "If the MST distance\narray is less than 0, initialize everything to 0. Here I'm just going to store\nthem all in a table of size 2",
    "start": "3619140",
    "end": "3627120"
  },
  {
    "text": "to the n. I can do direct indexing. If it's less than 0, compute\nit, fill in the value.",
    "start": "3627120",
    "end": "3633200"
  },
  {
    "text": "If sum plus that, return. Not much code. But do you really\nwant to store--",
    "start": "3633200",
    "end": "3639270"
  },
  {
    "text": "to blast it out\nand to use a lazy-- I'm using lazy evaluation\nof this table here. Only when I need it\ndo I fill in a value.",
    "start": "3639270",
    "end": "3647310"
  },
  {
    "text": "That's not effective. Rather than storing\nall 2 to the n tables, what can I do instead?",
    "start": "3647310",
    "end": "3654329"
  },
  {
    "text": "What's our favorite data\nstructure for storing stuff? Hash table.",
    "start": "3654330",
    "end": "3660059"
  },
  {
    "text": "A cache via hash. So the key to happiness. You can write that down too.",
    "start": "3660060",
    "end": "3666150"
  },
  {
    "text": "Store them in a hash table. If sum plus MST\ndistance lookup-- oh, but I have to\nimplement a hash table now.",
    "start": "3666150",
    "end": "3672870"
  },
  {
    "text": "How much code is\nthat going to be? Ballpark? ",
    "start": "3672870",
    "end": "3679880"
  },
  {
    "text": "What does it cost to\nbuild a hash table? Roughly. Come on.",
    "start": "3679880",
    "end": "3685920"
  },
  {
    "text": "Yes. About that many lines. So just go down the hash table.",
    "start": "3685920",
    "end": "3695060"
  },
  {
    "text": "If you find it, return it. Otherwise, make a new\nnode, compute the distance, put it in there, fill in\nthe values, and you're done.",
    "start": "3695060",
    "end": "3702060"
  },
  {
    "text": "Is it going to be faster? Oh, we'll see. Who reads xkcd on\na regular basis?",
    "start": "3702060",
    "end": "3707599"
  },
  {
    "text": "The rest of you are\nbad, bad, bad people, and you should feel\nvery guilty until you go to xkcd.com and start\nreading this on a regular basis.",
    "start": "3707600",
    "end": "3715895"
  },
  {
    "text": " I mean, like wow. This is two deep\npsychological insights",
    "start": "3715895",
    "end": "3721789"
  },
  {
    "text": "in one lecture for\nno additional fee. Sir. CHARLES LEISERSON: Were\nyou resolving collisions",
    "start": "3721790",
    "end": "3726840"
  },
  {
    "text": "by chaining them? JON BENTLEY: Right,\nby chaining, yes. CHARLES LEISERSON: Why bother? Why not just store\nthe place value",
    "start": "3726840",
    "end": "3733530"
  },
  {
    "text": "and keep a key to make sure\nthat it's the value associated with the one that you want?",
    "start": "3733530",
    "end": "3738740"
  },
  {
    "text": "JON BENTLEY: That\nis a great question, and the answer is left as an\nexercise for the listener. ",
    "start": "3738740",
    "end": "3745570"
  },
  {
    "text": "We've got about 20\nminutes, Charles. CHARLES LEISERSON:\nCode, less code.",
    "start": "3745570",
    "end": "3750800"
  },
  {
    "text": "JON BENTLEY: It would be, yes. And it's well worth a try. All of these things are\nempirical questions.",
    "start": "3750800",
    "end": "3758190"
  },
  {
    "text": "One thing that's\nreally important to learn as a\nperformance engineer is that your intuition\nis almost always wrong.",
    "start": "3758190",
    "end": "3765839"
  },
  {
    "text": "Always try to experiment to see. It's a great question.",
    "start": "3765840",
    "end": "3771359"
  },
  {
    "text": "When I get home, I'll\nactually-- when I leave here, I'm going to go up to try\nto climb Mount Monadnock.",
    "start": "3771360",
    "end": "3776420"
  },
  {
    "text": "Who here has ever\nclimbed Mount Monadnock? Yes. I finished climbing all\n115 4,000-foot peaks",
    "start": "3776420",
    "end": "3784015"
  },
  {
    "text": "in the Northeastern\nUS last year. I've never climbed Monadnock. I'm really eager to\ngive it a try tomorrow.",
    "start": "3784015",
    "end": "3789819"
  },
  {
    "text": "xkcd. Brute force n factorial. The Held-Karp dynamic\nprogramming algorithm",
    "start": "3789820",
    "end": "3795950"
  },
  {
    "text": "uses the grown-up version\nof dynamic programming for n squared 2 to the\nn, but even better.",
    "start": "3795950",
    "end": "3803390"
  },
  {
    "text": " Algorithm 6 looks like\nthat if I cache the TSPs.",
    "start": "3803390",
    "end": "3810337"
  },
  {
    "text": "Does it have to be faster? No. Is it faster? Oh, by about a\nfactor of 15 there.",
    "start": "3810337",
    "end": "3816350"
  },
  {
    "text": "By about a factor of\n25 there, 26 there.",
    "start": "3816350",
    "end": "3822170"
  },
  {
    "text": "You can go out now\nmuch further, 6 and 8. So we've done that.",
    "start": "3822170",
    "end": "3829790"
  },
  {
    "text": "Is there any other way to\nmake this program faster? We've pruned the\nsearch like crazy.",
    "start": "3829790",
    "end": "3835430"
  },
  {
    "text": "Any other way to make it faster? Please. AUDIENCE: [INAUDIBLE]. ",
    "start": "3835430",
    "end": "3843222"
  },
  {
    "text": "JON BENTLEY: I forget\nwhat happens at 39. Let's see. At 39, it went over a minute.",
    "start": "3843222",
    "end": "3850274"
  },
  {
    "text": "And, like I said, this\nthing goes up and down. I guess it just hit some weird\nbumps in the search space.",
    "start": "3850274",
    "end": "3856623"
  },
  {
    "text": "That's something else. The first algorithm is\ncompletely predictable. The other algorithms, you\nhave to get more and more into analysis.",
    "start": "3856623",
    "end": "3862130"
  },
  {
    "text": "And now the times\ngo up and down. There is a trend. And, basically, I'm taking an\nexponent and I'm lowering--",
    "start": "3862130",
    "end": "3868370"
  },
  {
    "text": "I turned it from super\nexponential to exponential, and then I'm being down\non the exponent right now.",
    "start": "3868370",
    "end": "3875089"
  },
  {
    "text": "Can you make this run faster? What we're going to do is take\nthis idea of a greedy search. ",
    "start": "3875090",
    "end": "3883010"
  },
  {
    "text": "I've can have\nsmarter researching. Better than a random\norder, I'm going to do a better starting tour.",
    "start": "3883010",
    "end": "3888590"
  },
  {
    "text": "And what I'm going to do is\nalways at each point sort the points to look at the\nnearest one to the current one",
    "start": "3888590",
    "end": "3894940"
  },
  {
    "text": "first. Start with a random one. Then for the next\none, always look at the nearest point first,\nthen the second nearest,",
    "start": "3894940",
    "end": "3900140"
  },
  {
    "text": "the third nearest, et cetera. So I'll go in that order. That should make\nthe search smarter, and that should guide\nme rather quickly",
    "start": "3900140",
    "end": "3906442"
  },
  {
    "text": "to the initial starting tour. Rather than just a\nrandom tour, I'll have a good one that will give\nme a better prune of the search",
    "start": "3906442",
    "end": "3912050"
  },
  {
    "text": "space. Will that make a difference? We'll have to include a sort. I'll get two birds\nwith one modification.",
    "start": "3912050",
    "end": "3918890"
  },
  {
    "text": "By a really dumb insertion\nsort, which takes up that many lines of code,\nI'll visit the nearest city",
    "start": "3918890",
    "end": "3925760"
  },
  {
    "text": "first, then others in order. If I do that, here\nit's a factor of 2,",
    "start": "3925760",
    "end": "3931220"
  },
  {
    "text": "there it's a factor\nof 8, a factor of 4. But it seems to work. It gives you some--",
    "start": "3931220",
    "end": "3937619"
  },
  {
    "text": "as you go out especially. I can now go out further.",
    "start": "3937620",
    "end": "3945380"
  },
  {
    "text": "I lied. I didn't stop my search\nat 60 seconds there. But I can now go up further,\nand it seems to be a lot faster.",
    "start": "3945380",
    "end": "3953099"
  },
  {
    "text": "So in 1997, 20 years ago, I was\nreally happy to get out to 30.",
    "start": "3953100",
    "end": "3958490"
  },
  {
    "text": "The question now is,\nin 20 more years, how much bigger can I go? If I just depend on Moore's\nlaw alone, in 20 years",
    "start": "3958490",
    "end": "3965329"
  },
  {
    "text": "a factor of a thousand.  At 30, 30 times 31\ntimes 32, that's",
    "start": "3965330",
    "end": "3973099"
  },
  {
    "text": "a factor I can go\nup by Moore's law. With a [INAUDIBLE] algorithm,\nit would give me two more cities",
    "start": "3973100",
    "end": "3978829"
  },
  {
    "text": "at this size in 20 years. Can I get from 30 on to anything\ninteresting by combining",
    "start": "3978830",
    "end": "3985700"
  },
  {
    "text": "Moore's law, and compiler\ntechnology, and all the algorithms. How far can I go?",
    "start": "3985700",
    "end": "3990958"
  },
  {
    "text": "Well, I was going to\ngive a talk at Lehigh.  So I could go out--\nin under a minute,",
    "start": "3990958",
    "end": "3997130"
  },
  {
    "text": "I could go to the 45-city tour. Charles answered this yesterday,\nso he is completely clear.",
    "start": "3997130",
    "end": "4003310"
  },
  {
    "text": "Rorschach test. Who's willing to go out-- what do you see there? AUDIENCE: A puppy.",
    "start": "4003310",
    "end": "4009050"
  },
  {
    "text": "JON BENTLEY: Dancing doggy. That was my answer,\ndancing doggy. I like that a lot. That's the obvious answer. But Charles-- and this shows\na profoundly profound mind.",
    "start": "4009050",
    "end": "4019420"
  },
  {
    "text": "Professor Leiserson,\nwhat is this? CHARLES LEISERSON: This is a dog\ndoing his business [INAUDIBLE]..",
    "start": "4019420",
    "end": "4029319"
  },
  {
    "text": "JON BENTLEY: OK. So any Freudians, you feel\nfree to go to town on that one.",
    "start": "4029320",
    "end": "4037350"
  },
  {
    "text": "45-city tour, it's pretty cool. Dancing doggy. How far can it go?",
    "start": "4037350",
    "end": "4042940"
  },
  {
    "text": "I got out to 45\nin under a minute. 46-- I broke my rule of this--",
    "start": "4042940",
    "end": "4049509"
  },
  {
    "text": "I went over the minute boundary. This was my Thanksgiving\n2016 cycle test. I was just going hog wild.",
    "start": "4049510",
    "end": "4056440"
  },
  {
    "text": "I was willing to spend the-- I had to give a-- I was doing this\nWednesday night. I had to give a\nlecture on Monday.",
    "start": "4056440",
    "end": "4062890"
  },
  {
    "text": "A hundred hours of CPU time. How far can I go? 47.",
    "start": "4062890",
    "end": "4068529"
  },
  {
    "text": "Yes. Yikes, factor of 5. When do I think? When do I run? Should I go back and\n[? work on it. ?]",
    "start": "4068530",
    "end": "4073980"
  },
  {
    "text": "52-- wouldn't it be sweet to be\nable to go out to 52 factorial? Wouldn't that be cool?",
    "start": "4073980",
    "end": "4079390"
  },
  {
    "text": "48-- that's not bad. That's looking pretty\ngood there, actually. Oh, ouch, ouch.",
    "start": "4079390",
    "end": "4086559"
  },
  {
    "text": "That's going to take a-- so that about 2\nhours right there. But 50, whoo, edge of my seat.",
    "start": "4086560",
    "end": "4095190"
  },
  {
    "text": "The turkey was\nsmelling good, but 51. And can I get to 52?",
    "start": "4095190",
    "end": "4100413"
  },
  {
    "text": "Will it make it? Will I have to go back to my-- whew. 3 hours and 7 minutes.",
    "start": "4100413",
    "end": "4105490"
  },
  {
    "text": "By combining all\nof these things, we're able to go out to\nsomething that is just obscene. 52 is obscenely huge.",
    "start": "4105490",
    "end": "4112420"
  },
  {
    "text": "We're able to get out there\nby a combination of all of these things, of some really\nsimple performance engineering",
    "start": "4112420",
    "end": "4120040"
  },
  {
    "text": "techniques. If you're going to work on a\nreal TSP, read the literature, study that.",
    "start": "4120040",
    "end": "4125097"
  },
  {
    "text": "I hope we can come\nacross some things that I've written about\napproximation algorithms. But if you really need them,\nforget the approximation",
    "start": "4125098",
    "end": "4131787"
  },
  {
    "text": "algorithms because\nthey're too short. There's a huge literature. I haven't told you any of that. Everything that\nI've done here are",
    "start": "4131788",
    "end": "4137859"
  },
  {
    "text": "things that you, as a person\nwho has completed this class, should be able to do.",
    "start": "4137859",
    "end": "4142929"
  },
  {
    "text": "All these things are well\nwithin your scope of practice, as we say. You will not be sued\nfor malpractice.",
    "start": "4142930",
    "end": "4149560"
  },
  {
    "text": "How much code is\nthe final thing? About that much. You build an MST.",
    "start": "4149560",
    "end": "4154750"
  },
  {
    "text": "You had a hash table. Charles points\nout you could nuke three or four of those lines.",
    "start": "4154750",
    "end": "4160179"
  },
  {
    "text": "You have the sort here. Altogether about 160 lines. Where have we been?",
    "start": "4160180",
    "end": "4166120"
  },
  {
    "text": "We started we could\nget out to 11. Store the distances.",
    "start": "4166120",
    "end": "4171979"
  },
  {
    "text": "Out to 12. Fix the starting city. That was a big one. Accumulate distance\nalong the way.",
    "start": "4171979",
    "end": "4177020"
  },
  {
    "text": "These were all good. But then by pruning\nthe search, we started making the big things. Add the MST, store the\ndistances in a hash table,",
    "start": "4177020",
    "end": "4184399"
  },
  {
    "text": "visit the cities in\na greedy algorithm. Each one of these gave\nus more and more and more power as we went out\nthere, till we're finally",
    "start": "4184399",
    "end": "4191509"
  },
  {
    "text": "able to go out pretty far. There are a lot of\nthings you can do.",
    "start": "4191510",
    "end": "4197030"
  },
  {
    "text": "Parallelism, faster\nmachines, more code tuning, better hashing.",
    "start": "4197030",
    "end": "4202520"
  },
  {
    "text": "That malloc is just\nbegging to be removed. Better pruning, a better\nstarting tour, better bounds.",
    "start": "4202520",
    "end": "4209900"
  },
  {
    "text": "I can take the MST\nlength plus the nearest-- that's why I do this MST-- plus the nearest neighbor\nto each of the ends.",
    "start": "4209900",
    "end": "4217130"
  },
  {
    "text": "I can get that. Would that make\na big difference? Empirical question. Easy to find out.",
    "start": "4217130",
    "end": "4222770"
  },
  {
    "text": "Can I move by pruning\ntests earlier? Better sorting. This is really cool.",
    "start": "4222770",
    "end": "4228530"
  },
  {
    "text": "Can I maybe just sort\nonce for each city to get that sorted list,\nthen go through that, precompute and sort, and\nselect the things in order?",
    "start": "4228530",
    "end": "4237020"
  },
  {
    "text": "Is that going to be a\nwin in this context? The main ideas here are caching,\nprecomputing, storing this,",
    "start": "4237020",
    "end": "4244160"
  },
  {
    "text": "avoiding the work. Can I change that n squared\nalgorithm to just a linear time selection?",
    "start": "4244160",
    "end": "4250400"
  },
  {
    "text": "All of these things are\nreally fun to look at. ",
    "start": "4250400",
    "end": "4255768"
  },
  {
    "text": "I've tried to tell you\nabout incremental software development. I started off with around\n30, 40 lines of code.",
    "start": "4255768",
    "end": "4262610"
  },
  {
    "text": "It grew to 160. But altogether all\nthe versions come to about 600 lines of code.",
    "start": "4262610",
    "end": "4270380"
  },
  {
    "text": "You've now seen\nmore than you need for one life about\nrecursive generation.",
    "start": "4270380",
    "end": "4277280"
  },
  {
    "text": "It's a surprisingly\npowerful technique if you ever need to use it. No excuses now.",
    "start": "4277280",
    "end": "4282530"
  },
  {
    "text": "You're obligated to\nbuild it immediately. Storing precomputed results,\npartial sums, early cut-offs.",
    "start": "4282530",
    "end": "4290510"
  },
  {
    "text": "Algorithms and data structures. These are things that sounded\nfancy in your algorithms class, but you just pull them\nout when you need them.",
    "start": "4290510",
    "end": "4296927"
  },
  {
    "text": "Vectors, strings,\narrays and bit vectors, minimum spanning trees,\nhash tables, insertion sort.",
    "start": "4296927",
    "end": "4304130"
  },
  {
    "text": "It's easy. It's a dozen lines of code here.\ntwo dozen lines of code there.",
    "start": "4304130",
    "end": "4309453"
  },
  {
    "text": "I believe that Charles\nmay had mentioned earlier that I wrote a book\nin 1982 about code tuning. At the time, you did these\nin the smaller programs.",
    "start": "4309453",
    "end": "4317570"
  },
  {
    "text": "Now compilers do\nall that for you. But these ideas-- some of\nthese ideas still apply. Store precomputed results.",
    "start": "4317570",
    "end": "4324350"
  },
  {
    "text": "Rather than [INAUDIBLE]\nelimination in an expression, you now put interpoint\ndistances in a matrix",
    "start": "4324350",
    "end": "4330800"
  },
  {
    "text": "or a table of MST lengths. Lazy evaluation. You compute the n\nsquared distances eagerly",
    "start": "4330800",
    "end": "4337250"
  },
  {
    "text": "but only the MSTs that you need. Don't bother computing them all. That's essentially what\nHeld and Karp does.",
    "start": "4337250",
    "end": "4343370"
  },
  {
    "text": "Short-circuiting monotone\nfunctions, reordering tests, word parallelism. These are the things that\nyou as performance engineers",
    "start": "4343370",
    "end": "4350780"
  },
  {
    "text": "can do quite readily. I had a lot of tools\nbehind the scenes.",
    "start": "4350780",
    "end": "4356330"
  },
  {
    "text": "I wish I could come\nback and give you another hour about\nhow I really did this with the analysis and\nthe tools that I used.",
    "start": "4356330",
    "end": "4362210"
  },
  {
    "text": "I had a driver to make\nthe experiments easy, a whole bunch of profilers. Where is the time\nreally going here?",
    "start": "4362210",
    "end": "4367909"
  },
  {
    "text": "What should I focus on? Cost models that allowed\nme to estimate those, how much does an MST cost.",
    "start": "4367910",
    "end": "4375410"
  },
  {
    "text": "A spreadsheet was\nmy lab notebook for graphs of performance,\nall sorts of curve fitting.",
    "start": "4375410",
    "end": "4381320"
  },
  {
    "text": "But these are the main things\nI wanted to tell you about. The big hand is getting about\nnine minutes away from the 11.",
    "start": "4381320",
    "end": "4390560"
  },
  {
    "text": "Professor Leiserson,\nis there anything else that these fine, young\nsemi-humanoids need",
    "start": "4390560",
    "end": "4395690"
  },
  {
    "text": "to know about this material? CHARLES LEISERSON:\nDoes anybody happen to see any analogies with\nthe current project 4.",
    "start": "4395690",
    "end": "4406759"
  },
  {
    "text": "Maybe people could\nchat a little bit about where they see\nanalogies [INAUDIBLE]..",
    "start": "4406759",
    "end": "4413920"
  },
  {
    "text": "JON BENTLEY: I don't\nknow it, but one of my first exposures\nto MIT was when",
    "start": "4413920",
    "end": "4419320"
  },
  {
    "text": "I had Donovan as a\nsoftware systems book, and it was dedicated to\n6.51 graduate students.",
    "start": "4419320",
    "end": "4427540"
  },
  {
    "text": "I saw that I thought,\nthat bastard. I'm sure that the six students\nreally worked hard on it,",
    "start": "4427540",
    "end": "4433000"
  },
  {
    "text": "but to say that the seventh\nstudent worked only a little much more over\nhalfway and then to be",
    "start": "4433000",
    "end": "4439150"
  },
  {
    "text": "so precise, that's just cruel. What a son of a bitch\nthat guy had to be. So I don't know what project\n4 is, but is it Leiserchess?",
    "start": "4439150",
    "end": "4450140"
  },
  {
    "text": "Oh, great. I know what that is. So what things-- have you\nused any of these techniques?",
    "start": "4450140",
    "end": "4455920"
  },
  {
    "text": "Did you ever prune searches? Did you ever store results? What did you do in project 4?",
    "start": "4455920",
    "end": "4461316"
  },
  {
    "start": "4461316",
    "end": "4469420"
  },
  {
    "text": "You're delegating this. That's a natural\nleader right there. ",
    "start": "4469420",
    "end": "4475850"
  },
  {
    "text": "AUDIENCE: We talked about search\npruning-- we already have-- JON BENTLEY: Speak up so all\nof them can hear, please. AUDIENCE: Commander voice. So we already have\n--everybody in this room",
    "start": "4475850",
    "end": "4482744"
  },
  {
    "text": "knows-- alpha-beta pruning. [INAUDIBLE] It's got search. I don't know how many teams\nare already working on search",
    "start": "4482745",
    "end": "4489989"
  },
  {
    "text": "but at least my team\nis working on changing order representation first. So we haven't gotten\ninto pruning search yet,",
    "start": "4489990",
    "end": "4497090"
  },
  {
    "text": "but that's definitely on\nthe horizon [INAUDIBLE].. JON BENTLEY: Is\nthere anyone here from the state of California?",
    "start": "4497090",
    "end": "4503119"
  },
  {
    "text": "I was born in California. When you hear alpha beta,\napart from the search,",
    "start": "4503120",
    "end": "4508159"
  },
  {
    "text": "what do you think of? AUDIENCE: The grocery store. JON BENTLEY: There's a grocery\nstore there called Alpha Beta.",
    "start": "4508160",
    "end": "4513642"
  },
  {
    "text": "And when Knuth wrote\na paper on that topic, he went out and bought\na box of Alpha Beta prunes that he had in his desk.",
    "start": "4513642",
    "end": "4521150"
  },
  {
    "text": "So he was an expert in two\nsenses on alpha beta pruning. So good.",
    "start": "4521150",
    "end": "4528200"
  },
  {
    "text": "Other techniques? ",
    "start": "4528200",
    "end": "4533300"
  },
  {
    "text": "Please. AUDIENCE: The hashing. There's one function\n[INAUDIBLE] takes a long time,",
    "start": "4533300",
    "end": "4542164"
  },
  {
    "text": "and suggested maybe\nyou could somehow keep track of the laser path\nwith a hash table [INAUDIBLE]..",
    "start": "4542164",
    "end": "4548300"
  },
  {
    "start": "4548300",
    "end": "4553320"
  },
  {
    "text": "JON BENTLEY: Great. Did you resolve\ncollisions at all? Or did you just have one\nelement there with a key?",
    "start": "4553320",
    "end": "4560340"
  },
  {
    "text": "How did you address the problem\nthat Charles mentioned of-- what kind of\nhashing did you use?",
    "start": "4560340",
    "end": "4565480"
  },
  {
    "text": "AUDIENCE: So we haven't\nused caching yet. JON BENTLEY: Other techniques?",
    "start": "4565480",
    "end": "4571230"
  },
  {
    "text": "CHARLES LEISERSON: Yes. That's a classic example\nof the fastest way to compute is not\nto compute at all. ",
    "start": "4571230",
    "end": "4580440"
  },
  {
    "text": "JON BENTLEY: In general, in\nlife no problem is so big that it can't be run away from.",
    "start": "4580440",
    "end": "4585449"
  },
  {
    "text": "These things about avoiding\nwork and being lazy are certainly models for\norganizing your own life.",
    "start": "4585450",
    "end": "4591020"
  },
  {
    "text": "The lazy evaluation really\nworks in the real world.",
    "start": "4591020",
    "end": "4597510"
  },
  {
    "text": "Other questions? Was that a question or a\nrandom obscene hand gesture?",
    "start": "4597510",
    "end": "4603934"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. JON BENTLEY: Please. AUDIENCE: [INAUDIBLE]\nstate-of the-art [INAUDIBLE]??",
    "start": "4603934",
    "end": "4610740"
  },
  {
    "text": "JON BENTLEY: Oh. That's a great question. I worked on this problem\na lot in the early 1990s",
    "start": "4610740",
    "end": "4617550"
  },
  {
    "text": "with my colleague David\nJohnson, who literally wrote the book on NP-completeness. An MIT PhD guy.",
    "start": "4617550",
    "end": "4625020"
  },
  {
    "text": "We were really happy we're in-- at the time, in a couple\nof hours of CPU time",
    "start": "4625020",
    "end": "4630510"
  },
  {
    "text": "we could solve 100,000\ncity problems to within a few percent.",
    "start": "4630510",
    "end": "4635610"
  },
  {
    "text": "We were able to solve a million\ncity problems in a day of CPU time to within a few percent.",
    "start": "4635610",
    "end": "4640980"
  },
  {
    "text": "And we were ecstatic. That was really big. So we could go out that big\nto within a few percent.",
    "start": "4640980",
    "end": "4647100"
  },
  {
    "text": "If we worked\nreally, really hard, we can get 10,000 problems\ndown within a half a percent.",
    "start": "4647100",
    "end": "4652710"
  },
  {
    "text": "But if you want\nto go all the way to have not only the optimal\nsolution but a proof that it's",
    "start": "4652710",
    "end": "4657930"
  },
  {
    "text": "optimal, for a while\npeople bragged about we finally solved that problem. This will let you see\nabout what was done.",
    "start": "4657930",
    "end": "4664770"
  },
  {
    "text": "We solved the problem of\nall 48 state capitals. So for a while that was\nthe state of the art.",
    "start": "4664770",
    "end": "4672449"
  },
  {
    "text": "And then that number\nhas crept over time. And now you can\nget exact solutions to some famous problems\ninto the tens of thousands",
    "start": "4672450",
    "end": "4678810"
  },
  {
    "text": "by using lots and lots of\nreally clever searching",
    "start": "4678810",
    "end": "4684470"
  },
  {
    "text": "the branching down with\nreally clever lower bounds to guide it up. And you at one point get a tour,\nand you can make that tour.",
    "start": "4684470",
    "end": "4692429"
  },
  {
    "text": "But then you get a proof\nof a lower bound along with it to do that. CHARLES LEISERSON:\nHey, old man, I",
    "start": "4692430",
    "end": "4698577"
  },
  {
    "text": "want to let you know\nthat there are actually now 50 states in the union. JON BENTLEY: No. ",
    "start": "4698577",
    "end": "4708280"
  },
  {
    "text": "What time did this happen?  You can tell that I am much,\nmuch, much older than Charles,",
    "start": "4708280",
    "end": "4716570"
  },
  {
    "text": "and he never lets me\nhear the end of it. I trust that the\nrest of you-- this",
    "start": "4716570",
    "end": "4721850"
  },
  {
    "text": "is like the third free\ndeep psychology insight, is be kind to old people\nignore the example",
    "start": "4721850",
    "end": "4728030"
  },
  {
    "text": "that the kid over there\nsets and show some class and respect to me and\nmy fellow geezers.",
    "start": "4728030",
    "end": "4736120"
  },
  {
    "text": "CHARLES LEISERSON: We\nwere both born in 1953. JON BENTLEY: But I was born\nin the good part of 1953.",
    "start": "4736120",
    "end": "4745130"
  },
  {
    "text": "In particular, I was\nborn before Her Majesty the Queen of England\nassumed the throne.",
    "start": "4745130",
    "end": "4752393"
  },
  {
    "text": "Can you make the same claim? CHARLES LEISERSON: I\ncannot make the same claim. JON BENTLEY: I'm sorry. He can, but only because\nhe's a sneaky bastard.",
    "start": "4752393",
    "end": "4757730"
  },
  {
    "text": "Can you make it\ntruthfully is the question that I should have asked. Other questions?",
    "start": "4757730",
    "end": "4763040"
  },
  {
    "text": "This class can be\nvery important. Like I said, I spent\nthe past almost half century as a working\ncomputer programmer.",
    "start": "4763040",
    "end": "4769880"
  },
  {
    "text": "The majority of that\nthing I've done most is performance engineering. It's allowed me to do a number\nof really interesting things.",
    "start": "4769880",
    "end": "4776960"
  },
  {
    "text": "I've been able to dabble in all\nsorts of computational systems, ranging from automated\ngerrymandering.",
    "start": "4776960",
    "end": "4783890"
  },
  {
    "text": "Every time you make a\ntelephone call in this country, if it's, say, a call from inside\nan institution like a hospital",
    "start": "4783890",
    "end": "4792020"
  },
  {
    "text": "of a university, it uses\nsome code that I wrote, some of the performance things. If you make a\nlong-distance call,",
    "start": "4792020",
    "end": "4798380"
  },
  {
    "text": "it uses code that I wrote. If you've ever used something\ncalled Google internet search or maps, or\nstocks or anything else,",
    "start": "4798380",
    "end": "4807290"
  },
  {
    "text": "that uses some\nalgorithms I've done. It's incredibly satisfying. It's been a very, very\nfulfilling way for me",
    "start": "4807290",
    "end": "4813949"
  },
  {
    "text": "to spend a big chunk of my life. I am grateful. It's allowed me to\nmake friends, whom",
    "start": "4813950",
    "end": "4822440"
  },
  {
    "text": "I've known for almost\nhalf a century, and to our wonderful\ndear people.",
    "start": "4822440",
    "end": "4827510"
  },
  {
    "text": "And it's been a great\nway for my life. I hope that performance\nengineering is as good to you",
    "start": "4827510",
    "end": "4832820"
  },
  {
    "text": "as it has been to me. Anything else, professor? ",
    "start": "4832820",
    "end": "4838217"
  },
  {
    "text": "CHARLES LEISERSON: Thank\nyou very much, Jon. JON BENTLEY: Thank you. [STUDENTS APPLAUD]",
    "start": "4838217",
    "end": "4845200"
  },
  {
    "start": "4845200",
    "end": "4852319"
  }
]