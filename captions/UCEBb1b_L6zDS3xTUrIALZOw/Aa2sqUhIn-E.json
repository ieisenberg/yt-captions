[
  {
    "start": "0",
    "end": "150000"
  },
  {
    "text": " The following\ncontent is provided under a Creative\nCommons license. Your support will help MIT\nOpenCourseWare continue",
    "start": "0",
    "end": "6860"
  },
  {
    "text": "to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6860",
    "end": "13320"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13320",
    "end": "22120"
  },
  {
    "text": "PROFESSOR: [INAUDIBLE] audio. We're going to have a series\nof lectures on shortest paths.",
    "start": "22120",
    "end": "32310"
  },
  {
    "text": "And one of the big differences\nbetween this module and the previous one, at least\nfrom a mathematical standpoint,",
    "start": "32310",
    "end": "39940"
  },
  {
    "text": "is that we're\ngoing to be looking at graphs that have\nweights on their edges. So when Eric talked about\ndepth first search and breadth",
    "start": "39940",
    "end": "47690"
  },
  {
    "text": "first search in the\nlast couple of lectures, we had directed graphs\nand undirected graphs.",
    "start": "47690",
    "end": "54160"
  },
  {
    "text": "But we didn't really have\nattributes on the edges. In particular, you have\na much richer class",
    "start": "54160",
    "end": "60690"
  },
  {
    "text": "of problems and\napplications if you allow for weights\non graph edges.",
    "start": "60690",
    "end": "67700"
  },
  {
    "text": "And these weights\ncan be integers.",
    "start": "67700",
    "end": "73020"
  },
  {
    "text": "They could be real\nnumbers, irrationals. They could be negative,\nwhat have you. And for different\nclasses of graphs",
    "start": "73020",
    "end": "82030"
  },
  {
    "text": "and different\nrestrictions on weights, there's really a set of\nshortest path algorithms,",
    "start": "82030",
    "end": "89460"
  },
  {
    "text": "that we'll look at in the\nnext few lectures, which are kind of optimized for\na particular application.",
    "start": "89460",
    "end": "97050"
  },
  {
    "text": "So we won't do specific\nalgorithms today. But we'll set up the problem.",
    "start": "97050",
    "end": "103770"
  },
  {
    "text": "We'll talk about\nthe general approach that most shortest\npath algorithms take",
    "start": "103770",
    "end": "108970"
  },
  {
    "text": "to solve a particular\ninstance of a problem. And then we'll\nclose with talking",
    "start": "108970",
    "end": "116810"
  },
  {
    "text": "about a particular property\nthat's pretty important. That's called the optimum or\noptimal substructure property.",
    "start": "116810",
    "end": "123290"
  },
  {
    "text": "That is a technique that most\nshortest path algorithms, or actually all\nshortest path algorithms",
    "start": "123290",
    "end": "128569"
  },
  {
    "text": "use to get efficient complexity.",
    "start": "128570",
    "end": "134690"
  },
  {
    "text": "So asymptotic complexity\nis important, obviously. And we're always looking for\nthe best algorithm with the best",
    "start": "134690",
    "end": "142580"
  },
  {
    "text": "asymptotic complexity. And optimal\nsubstructure is a hammer that we're going\nto use to get that.",
    "start": "142580",
    "end": "150990"
  },
  {
    "start": "150000",
    "end": "315000"
  },
  {
    "text": "So the canonical motivation,\nof course, for shortest paths is-- now, if you\nwant to steal, or I",
    "start": "150990",
    "end": "158010"
  },
  {
    "text": "guess borrow, a\ncannon from Caltech and bring it over\nto MIT, then you",
    "start": "158010",
    "end": "163860"
  },
  {
    "text": "want the fastest way of getting\nhere with your illegal goods.",
    "start": "163860",
    "end": "172510"
  },
  {
    "text": "And you want to find the\nshortest way or the fastest way of getting from one\nlocation to another.",
    "start": "172510",
    "end": "179080"
  },
  {
    "text": "So Google Maps go\nfrom point A to point B. That's a classic application\nof the shortest path problem.",
    "start": "179080",
    "end": "189210"
  },
  {
    "text": "In this case, you could\nimagine that distance would be something that would\nbe a very simple metric that you",
    "start": "189210",
    "end": "196110"
  },
  {
    "text": "could use for the\nweights on the edges. So for this entire\nmodule, we're going",
    "start": "196110",
    "end": "203360"
  },
  {
    "text": "to be looking at\na graph G V, E, W.",
    "start": "203360",
    "end": "211390"
  },
  {
    "text": "And you know what V and E are. They're the vertices\nand the edges.",
    "start": "211390",
    "end": "218360"
  },
  {
    "text": "And W is a weight function\nthat maps edges to weights.",
    "start": "218360",
    "end": "227020"
  },
  {
    "text": "And so we're adding\nthat in here. And so W would be E to R.\nSo the set of real numbers.",
    "start": "227020",
    "end": "239140"
  },
  {
    "text": "We're going to be looking\nat two different algorithms in subsequent lectures.",
    "start": "239140",
    "end": "244630"
  },
  {
    "text": "And you'll implement one of\nthem in your problem set. ",
    "start": "244630",
    "end": "250380"
  },
  {
    "text": "The simpler algorithm,\nwhich we'll look at first, is called Dijkstra, after\nEdsger Dijkstra, who",
    "start": "250380",
    "end": "258510"
  },
  {
    "text": "did some similar work in\nconcurrent programming, won the Turing Award. But on the side invented\nthis cool algorithm--",
    "start": "258510",
    "end": "266790"
  },
  {
    "text": "or at least gets credit for\nit-- called Dijkstra's algorithm that assumes non-negative\nweight edges.",
    "start": "266790",
    "end": "276530"
  },
  {
    "text": "So I should really\nsay non-negative. So read that as non-negative. And that has a complexity\nof order V log V plus E.",
    "start": "276530",
    "end": "291510"
  },
  {
    "text": "All right. So this is practically\nlinear time.",
    "start": "291510",
    "end": "298330"
  },
  {
    "text": "And typically, you're going\nto be dominated in many cases by E. In general, if you talk\nabout a simple graph, what's",
    "start": "298330",
    "end": "310060"
  },
  {
    "text": "the asymptotic relationship\nbetween E and V? ",
    "start": "310060",
    "end": "319430"
  },
  {
    "start": "315000",
    "end": "393000"
  },
  {
    "text": "Can you relate E to V? Can you give me a bound? AUDIENCE: V squared. PROFESSOR: Sorry?",
    "start": "319430",
    "end": "324650"
  },
  {
    "text": "V squared, thanks. That's good. So you can think of E\nas being order V square.",
    "start": "324650",
    "end": "333280"
  },
  {
    "text": "And you can certainly have--\nthat's worth recursion. ",
    "start": "333280",
    "end": "341310"
  },
  {
    "text": "So now, you can kind of\nimagine a complete graph. And a complete\ngraph is something",
    "start": "341310",
    "end": "346390"
  },
  {
    "text": "that has an edge between\neach pair of vertices.",
    "start": "346390",
    "end": "352980"
  },
  {
    "text": "And that's where you'll\nget E being k w squared. So when you say\nsimple graph, you're",
    "start": "352980",
    "end": "359370"
  },
  {
    "text": "saying you have at most one edge\nbetween any pair of vertices. A multigraph is\nsomething that could",
    "start": "359370",
    "end": "365160"
  },
  {
    "text": "have multiple edges\nbetween pairs of vertices. We won't really be\ntalking about multigraphs",
    "start": "365160",
    "end": "370480"
  },
  {
    "text": "in this sequence of lectures. But something to think about or\nkeep in the back of your mind",
    "start": "370480",
    "end": "379419"
  },
  {
    "text": "as we go through\nthese algorithms. And so the dominating factor\nhere, and in many cases really,",
    "start": "379420",
    "end": "385810"
  },
  {
    "text": "is E. And Dijkstra is a\nnice algorithm, because it's linear in the number of edges.",
    "start": "385810",
    "end": "394080"
  },
  {
    "start": "393000",
    "end": "499000"
  },
  {
    "text": "So that's Dijkstra. And that's the first\nof the algorithms that we'll look at next time.",
    "start": "394080",
    "end": "400750"
  },
  {
    "text": "But we'll see the general\nstructure of Dijkstra today. And then there's the\nBellman-Ford algorithm",
    "start": "400750",
    "end": "410880"
  },
  {
    "text": "that works on positive and\nnegative edges, weight edges.",
    "start": "410880",
    "end": "416890"
  },
  {
    "text": "And this has a\ncomplexity order V E.",
    "start": "416890",
    "end": "423630"
  },
  {
    "text": "So you could imagine a\nparticular implementation of Bellman-Ford running\nin order V cubed time.",
    "start": "423630",
    "end": "430060"
  },
  {
    "text": "Because E could be V square. And you've got this\nadditional E factor. So it's order V cubed\nversus order V log V.",
    "start": "430060",
    "end": "437800"
  },
  {
    "text": "So when you have a\nchance, use Dijkstra. When you're stuck, you'd\nwant to do Bellman-Ford,",
    "start": "437800",
    "end": "445670"
  },
  {
    "text": "because you have these\nnegative weight edges. And one of the challenges\nin negative weight edges, and I'll say a little\nbit more as we go along,",
    "start": "445670",
    "end": "452550"
  },
  {
    "text": "is that you end\nup having to have to find cycles that are\nof a negative weight,",
    "start": "452550",
    "end": "461720"
  },
  {
    "text": "because they kind of throw off\nyour shortest path algorithm if you were just assuming that\nshortest path lengths are only",
    "start": "461720",
    "end": "469590"
  },
  {
    "text": "going to decrease. But when you have negative\nweights, you might take a step",
    "start": "469590",
    "end": "475460"
  },
  {
    "text": "and the overall\nweight might decrease. So it's kind of a longer path\nin terms of the number of edges.",
    "start": "475460",
    "end": "481150"
  },
  {
    "text": "But the weight is smaller. And that kind of makes the\nalgorithm more complicated. And it has to do more work.",
    "start": "481150",
    "end": "487362"
  },
  {
    "text": "So that's really why there's\na difference between these two complexities. And I guarantee you, you'll\nunderstand this much better",
    "start": "487362",
    "end": "494200"
  },
  {
    "text": "after we're done with\nthe lectures on Dijkstra and the lectures\non Bellman-Ford.",
    "start": "494200",
    "end": "500019"
  },
  {
    "start": "499000",
    "end": "856000"
  },
  {
    "text": "So that's the set\nup for the problem. That's what we're\ngoing to be looking at. Let's look at a couple\nmore definitions",
    "start": "500019",
    "end": "507830"
  },
  {
    "text": "beyond what I have here with\nrespect to just the notation.",
    "start": "507830",
    "end": "514549"
  },
  {
    "text": "And you can think of path p as\na sequence of vertices-- V0, V1,",
    "start": "514549",
    "end": "526883"
  },
  {
    "text": "et cetera, to Vk. And this is the path\nif Vi, Vi plus 1",
    "start": "526883",
    "end": "537650"
  },
  {
    "text": "belongs to E for 0 less\nthan or equal to i less than",
    "start": "537650",
    "end": "543320"
  },
  {
    "text": "or equal to k. So a path is a\nsequence of edges. And each of those edges\nhas to be in the graph,",
    "start": "543320",
    "end": "550670"
  },
  {
    "text": "has to be in the set of edges E. And W of p, which is\nthe weight of the path,",
    "start": "550670",
    "end": "560090"
  },
  {
    "text": "we know that by the weight\nof edges, those are easy. They're given by the W function. The weight of the path\nis simply the summation",
    "start": "560090",
    "end": "567839"
  },
  {
    "text": "of the weights of the edges. ",
    "start": "567840",
    "end": "573100"
  },
  {
    "text": "All right. So fairly obvious definitions. But obviously, we have to\nget these right in order to actually solve the\nproblem correctly.",
    "start": "573100",
    "end": "580350"
  },
  {
    "text": " And the shortest path problem\nis, as you can imagine,",
    "start": "580350",
    "end": "589760"
  },
  {
    "text": "something that tries to find a\npath p that has minimum weight.",
    "start": "589760",
    "end": "600050"
  },
  {
    "text": "So in general, you have\nsome set up for the problem. But it comes down\nto find p with--",
    "start": "600050",
    "end": "607350"
  },
  {
    "start": "607350",
    "end": "613259"
  },
  {
    "text": "And there are many,\nmany possible paths. You have to understand\nthat there are potentially",
    "start": "613260",
    "end": "618640"
  },
  {
    "text": "an exponential number\nof paths in the graphs that we would consider. And here's a real\nsimple example where",
    "start": "618640",
    "end": "626610"
  },
  {
    "text": "you would have an\nexponential number of paths.",
    "start": "626610",
    "end": "633360"
  },
  {
    "text": "And we'll come back to this\nexample later in the lecture.",
    "start": "633360",
    "end": "638540"
  },
  {
    "text": "But let's assume that all\nthe directions go this way. ",
    "start": "638540",
    "end": "644050"
  },
  {
    "text": "And it's a directed graph. Well, you could have the path\nthat goes all the way here.",
    "start": "644050",
    "end": "649245"
  },
  {
    "text": "But you could have the\npath that goes on top and all the way this way. You have basically two choices\non getting to this vertex.",
    "start": "649245",
    "end": "657510"
  },
  {
    "text": "Then you've got,\ngiven the two ways you have of getting\nto this vertex. You've got four ways\nof getting here.",
    "start": "657510",
    "end": "663580"
  },
  {
    "text": "And then, you have eight\nways of getting there. So on and so forth. So there's an exponential\nnumber of paths potentially.",
    "start": "663580",
    "end": "670750"
  },
  {
    "text": "The other thing that's\ninteresting here, which is important in\nterms of this complexity",
    "start": "670750",
    "end": "675899"
  },
  {
    "text": "is, what's interesting\nabout what you see here with respect to the complexity\nand what you see here.",
    "start": "675900",
    "end": "683380"
  },
  {
    "text": "Anybody want to point that out? So I have this complexity\nhere and order VE out there.",
    "start": "683380",
    "end": "690910"
  },
  {
    "text": "What's an interesting\nobservation if you look at this board\nhere and the two complexities?",
    "start": "690910",
    "end": "697095"
  },
  {
    "text": " Anybody? Yeah, back there.",
    "start": "697095",
    "end": "702580"
  },
  {
    "text": "AUDIENCE: It's not a\nfunction of weight. PROFESSOR: It's not\na function of weight. Great. That's definitely\nworth recursion.",
    "start": "702580",
    "end": "708650"
  },
  {
    "text": "And I'll let you throw this one.  All the way back\nthere, all right?",
    "start": "708650",
    "end": "715990"
  },
  {
    "text": "Right. All right, good. Good, good. That was good. That was better than\nwhat I could do.",
    "start": "715990",
    "end": "721450"
  },
  {
    "text": "No, not really. But I would've been right\nin his hands right there.",
    "start": "721450",
    "end": "729390"
  },
  {
    "text": "Anyway, so that's a great\nobservation, actually. And I should have pointed\nit out right up front.",
    "start": "729390",
    "end": "734940"
  },
  {
    "text": "But I'm glad I\ngot it out of you. W doesn't exist\nin the complexity.",
    "start": "734940",
    "end": "742160"
  },
  {
    "text": "This is pretty important. W could be a large number. I mean, it could\nbe 2 raised to 64.",
    "start": "742160",
    "end": "749029"
  },
  {
    "text": "The fact is that there's only\nE square different values",
    "start": "749030",
    "end": "754640"
  },
  {
    "text": "possible for a weight, right. I mean, roughly speaking. If you have a complete\ngraph, it's a simple graph,",
    "start": "754640",
    "end": "761389"
  },
  {
    "text": "there's order E square\npossible weights. But the range of the weights\ncould be exponential.",
    "start": "761390",
    "end": "769829"
  },
  {
    "text": "I could have an edge\nweight of 0.0001 and a different edge\nweight of 10 raised to 98.",
    "start": "769830",
    "end": "778089"
  },
  {
    "text": "There's nothing\nthat's stopping me from doing that or putting\na specification like that.",
    "start": "778090",
    "end": "784040"
  },
  {
    "text": "But the nice thing about\nDijkstra, and Bellman-Ford, and virtually all\nof the algorithms that are useful in\npractice is that they",
    "start": "784040",
    "end": "790960"
  },
  {
    "text": "don't depend on the dynamic\nrange of the weights. And so keep that in\nmind as you think",
    "start": "790960",
    "end": "797720"
  },
  {
    "text": "of shortest path algorithms. And we'll talk a little bit\nabout this in section tomorrow, or the TAs will, as to why\nbreadth first search and depth",
    "start": "797720",
    "end": "806390"
  },
  {
    "text": "first search aren't directly\napplicable to the shortest path problem.",
    "start": "806390",
    "end": "811610"
  },
  {
    "text": "And the hint really is the\ndynamic range of the weights. So keep that in mind.",
    "start": "811610",
    "end": "817769"
  },
  {
    "text": "So a couple things why this\nis an interesting algorithm, or interesting problem to solve,\nand harder than the problems",
    "start": "817770",
    "end": "824310"
  },
  {
    "text": "we've looked at so far\nlike sorting and search, is that you have an\nexponential number of paths.",
    "start": "824310",
    "end": "829760"
  },
  {
    "text": "And then the dynamic\nrange of the weights can be very, very large. And it's not linear\nby any means.",
    "start": "829760",
    "end": "835540"
  },
  {
    "text": "All right. So these algorithms are going\nto have to have some smarts. And the optimal\nsubstructure property",
    "start": "835540",
    "end": "840810"
  },
  {
    "text": "that we'll look at towards\nthe end of today's lecture will give you a sense of how\nthese algorithms actually",
    "start": "840810",
    "end": "846070"
  },
  {
    "text": "work in basically linear time. Or VE, you could\nthink of that as being",
    "start": "846070",
    "end": "852310"
  },
  {
    "text": "cubic time in terms\nof the vertices.",
    "start": "852310",
    "end": "857330"
  },
  {
    "start": "856000",
    "end": "1026000"
  },
  {
    "text": "So keep that in mind. Let's talk a little bit\nmore about weighted graphs.",
    "start": "857330",
    "end": "863470"
  },
  {
    "text": "I want a little\nbit more notation. ",
    "start": "863470",
    "end": "871940"
  },
  {
    "text": "And what I have is V0\nusing path p to Vk.",
    "start": "871940",
    "end": "878170"
  },
  {
    "text": "So I'm going to write\nthat to say that there's a particular path of V0 to Vk.",
    "start": "878170",
    "end": "883810"
  },
  {
    "text": "Sometimes I'm searching for the\npath p with a minimum weight.",
    "start": "883810",
    "end": "888900"
  },
  {
    "text": "And that's how I'm\ngoing to represent that. V0, which is a\nsingle vertex path,",
    "start": "888900",
    "end": "896120"
  },
  {
    "text": "is the path from V0 to V0. So it's really a 0 length path.",
    "start": "896120",
    "end": "903680"
  },
  {
    "text": "And it has weight 0. So that's one condition.",
    "start": "903680",
    "end": "909410"
  },
  {
    "text": "The other condition\nthat we need to look at, which is the other case, is\nwhat if there isn't a path?",
    "start": "909410",
    "end": "918120"
  },
  {
    "text": "So I want to put those\ntwo things together, the two extremes, and of\ncourse all of the cases",
    "start": "918120",
    "end": "923610"
  },
  {
    "text": "in between, in this definition\nof the shortest pathway.",
    "start": "923610",
    "end": "929810"
  },
  {
    "text": "And so I'm going to talk\nabout the shortest path value of the weight of the\nshortest path between u and v",
    "start": "929810",
    "end": "938990"
  },
  {
    "text": "as delta, u, v. And my\ngoal is to find delta. It's also to find the path.",
    "start": "938990",
    "end": "945560"
  },
  {
    "text": "It doesn't help you\nvery much if you know that there's a way of\ngetting from here to Lexington",
    "start": "945560",
    "end": "953270"
  },
  {
    "text": "within 14 miles if you don't\nknow what that path is, right. So that's one\naspect of it, which",
    "start": "953270",
    "end": "959690"
  },
  {
    "text": "is you want to get the weight. But you want to get\nthe path as well. And these algorithms\nwill do that for you.",
    "start": "959690",
    "end": "966230"
  },
  {
    "text": "And in particular,\nwhat we want is delta u, v to be the minimum\nover all the paths W p,",
    "start": "966230",
    "end": "984100"
  },
  {
    "text": "such that p is in fact\nthe path from u to v.",
    "start": "984100",
    "end": "990730"
  },
  {
    "text": "And this is the case where if\nthere exists any such path,",
    "start": "990730",
    "end": "1000490"
  },
  {
    "text": "and the last thing is you\nwant this to be infinity, the weight to be\ninfinity otherwise.",
    "start": "1000490",
    "end": "1007185"
  },
  {
    "text": " So if you're only talking about\nroads going from here to Tokyo,",
    "start": "1007185",
    "end": "1016490"
  },
  {
    "text": "should have length infinity. A little matter of the\nPacific Ocean in between.",
    "start": "1016490",
    "end": "1024099"
  },
  {
    "text": "So that's the set up\nin terms of the numbers that we want to see.",
    "start": "1024099",
    "end": "1031039"
  },
  {
    "start": "1026000",
    "end": "1446000"
  },
  {
    "text": "If you're starting from\na particular point, you can think of the shortest\npath length from your source",
    "start": "1031040",
    "end": "1038720"
  },
  {
    "text": "as being a 0. Initially, everything\nis infinity because you haven't\nfound any paths yet.",
    "start": "1038720",
    "end": "1044790"
  },
  {
    "text": "And what you're going to do is\ntry and reduce these infinities down for all of\nthe vertices that",
    "start": "1044790",
    "end": "1051970"
  },
  {
    "text": "are reachable from\nthe source vertex. And it's quite possible that\nyou may be given a graph where",
    "start": "1051970",
    "end": "1057580"
  },
  {
    "text": "a particular vertices,\nor in your set V, that can't be reached\nfrom the particular source",
    "start": "1057580",
    "end": "1064030"
  },
  {
    "text": "that you started with. And for those vertices, you're\ngoing to have your delta u,",
    "start": "1064030",
    "end": "1070650"
  },
  {
    "text": "v. If v is unreachable from\nyou, it will stay at infinity.",
    "start": "1070650",
    "end": "1076650"
  },
  {
    "text": "So let's look at an example. ",
    "start": "1076650",
    "end": "1083710"
  },
  {
    "text": "Let's take-- it's going to\nbe an iterative process here",
    "start": "1083710",
    "end": "1092980"
  },
  {
    "text": "of finding the shortest paths.",
    "start": "1092980",
    "end": "1098150"
  },
  {
    "text": "And so let's take\nan example that corresponds to a\nfairly complex graph,",
    "start": "1098150",
    "end": "1107770"
  },
  {
    "text": "or at least a nontrivial one,\nwhere that's my source vertex. And I've labeled these\nother vertices A through F.",
    "start": "1107770",
    "end": "1115419"
  },
  {
    "text": "And I have a bunch of edges. ",
    "start": "1115420",
    "end": "1124780"
  },
  {
    "text": "5. ",
    "start": "1124780",
    "end": "1146130"
  },
  {
    "text": "I got one more here.  So that's what's given to me.",
    "start": "1146130",
    "end": "1151640"
  },
  {
    "text": "And I want to find delta\nS plugged in for u.",
    "start": "1151640",
    "end": "1158720"
  },
  {
    "text": "And A, B, D, et cetera plugged\nin for V for this graph.",
    "start": "1158720",
    "end": "1165390"
  },
  {
    "text": "And let's just do this\nmanually if you will.",
    "start": "1165390",
    "end": "1170850"
  },
  {
    "text": "And just trying to do some\nkind of breadth first search. And we do know\nbreadth first search.",
    "start": "1170850",
    "end": "1176610"
  },
  {
    "text": "We know depth first search. You can imagine trying to use\nthose notions to try and find",
    "start": "1176610",
    "end": "1185580"
  },
  {
    "text": "the shortest paths here. So now we have to\nprove afterwards when we are done that these are,\nin fact, the shortest paths.",
    "start": "1185580",
    "end": "1191370"
  },
  {
    "text": "And that's the hard part of it. But we can certainly try and\nfill in some numbers associated",
    "start": "1191370",
    "end": "1196860"
  },
  {
    "text": "with paths that\nwe do know about. So I'm going to say\nthat the numbers that",
    "start": "1196860",
    "end": "1202635"
  },
  {
    "text": "are inside each of\nthese vertices-- d of u",
    "start": "1202635",
    "end": "1208210"
  },
  {
    "text": "is the current weight. ",
    "start": "1208210",
    "end": "1214090"
  },
  {
    "text": "And so initially, I'm going\nto start with D of S being 0, because that's a source.",
    "start": "1214090",
    "end": "1219699"
  },
  {
    "text": "And all of these\nother ones are going to have-- I'm not going\nto write this down-- but they're going to have\ninfinity for their D of Vs.",
    "start": "1219699",
    "end": "1226940"
  },
  {
    "text": "So D of A is infinity. Do of B is infinity, et cetera. And what I want to do is\ndecrease this D number",
    "start": "1226940",
    "end": "1234500"
  },
  {
    "text": "to the point where I'm confident\nthat all of the D numbers that are inside these vertices,\nthese are the current weights,",
    "start": "1234500",
    "end": "1241230"
  },
  {
    "text": "or end up being\nthe delta numbers. So my algorithm is done when\nmy d numbers shrink down.",
    "start": "1241230",
    "end": "1248520"
  },
  {
    "text": "And I got the delta values,\nthe correct delta values. But if I wanted to do this,\nsort of a seat of the pants",
    "start": "1248520",
    "end": "1257500"
  },
  {
    "text": "approach, just go off\nand try and iteratively reduce these numbers, you say,\nwell, this one was infinity.",
    "start": "1257500",
    "end": "1263860"
  },
  {
    "text": "But clearly, if I start from\nS and I follow the edges in S, I'm going to be able\nto mark this as a one.",
    "start": "1263860",
    "end": "1271980"
  },
  {
    "text": "And similarly here, I'm going\nto be able to mark this as a 2. Now, I could arbitrarily\npick this one",
    "start": "1271980",
    "end": "1279860"
  },
  {
    "text": "here and this A\nvertex, and then start looking at the edges that\nemanate from the A vertex.",
    "start": "1279860",
    "end": "1288090"
  },
  {
    "text": "And I could go off and mark\nthis as 6, for example.",
    "start": "1288090",
    "end": "1296470"
  },
  {
    "text": "And if I start from\nhere, I'd mark this as 3.",
    "start": "1296470",
    "end": "1302380"
  },
  {
    "text": "Now, is it in fact\ntrue that 6 equals",
    "start": "1302380",
    "end": "1308570"
  },
  {
    "text": "delta S comma C equals 6?",
    "start": "1308570",
    "end": "1314669"
  },
  {
    "text": "No. What is in fact-- is there a\nbetter way of getting to C?",
    "start": "1314670",
    "end": "1320549"
  },
  {
    "text": "And what is the weight of that? What vertex do I\nhave to go through?",
    "start": "1320550",
    "end": "1326594"
  },
  {
    "text": "I mean, one way is to go\nfrom S to B to D to C, right?",
    "start": "1326594",
    "end": "1339180"
  },
  {
    "text": "And that would give me 5 right? So that's 5. Can I do better than 5?",
    "start": "1339180",
    "end": "1346530"
  },
  {
    "text": "Not in this graph. OK So it's not the case that the\nshortest length path gave you",
    "start": "1346530",
    "end": "1356680"
  },
  {
    "text": "the smallest weight. I mean, that was\none example of that.",
    "start": "1356680",
    "end": "1362600"
  },
  {
    "text": "And I can go on an and\nbore you with filling in all of these numbers. But you can do that on your own.",
    "start": "1362600",
    "end": "1367980"
  },
  {
    "text": "And it's really not particularly\nedifying to do that.",
    "start": "1367980",
    "end": "1373020"
  },
  {
    "text": "But you get a sense\nof what you need to be able to do in order\nto converge on the delta.",
    "start": "1373020",
    "end": "1379430"
  },
  {
    "text": "And it might take some doing. Because you have to somehow\nenumerate in an implicit way--",
    "start": "1379430",
    "end": "1386002"
  },
  {
    "text": "you can't do it in\nan explicit way, because then there'd be an\nexponential number of paths. But you'd have to\nimplicitly enumerate",
    "start": "1386002",
    "end": "1392670"
  },
  {
    "text": "all the different ways that you\ncan possibly get to a vertex and discover the shortest\npath through that process,",
    "start": "1392670",
    "end": "1401790"
  },
  {
    "text": "all right. And so we have to be able to\ndo that in these shortest path algorithms. And this is a simple graph\nthat has positive weights,",
    "start": "1401790",
    "end": "1411290"
  },
  {
    "text": "non-negative weights with edges. It gets more complicated when\nyou have negative weights.",
    "start": "1411290",
    "end": "1418599"
  },
  {
    "text": "But before I get to that,\nthere's one other thing that I want to talk\nabout here with respect to discovering the actual path.",
    "start": "1418599",
    "end": "1426900"
  },
  {
    "text": "So what we did here\nwas we had delta u, v that corresponded to the\nweight of the shortest path.",
    "start": "1426900",
    "end": "1435890"
  },
  {
    "text": "But if you want\nthe path itself, we need to have a way of finding\nthe sequence of vertices that",
    "start": "1435890",
    "end": "1444090"
  },
  {
    "text": "corresponds to the\nminimum weight path. And in particular,\nwe're going to have",
    "start": "1444090",
    "end": "1450240"
  },
  {
    "text": "to define what we call the\npredecessor relationship.",
    "start": "1450240",
    "end": "1456290"
  },
  {
    "text": "And so what I have is\nd of V is the value",
    "start": "1456290",
    "end": "1465270"
  },
  {
    "text": "inside the circle, which\nis the current weight.",
    "start": "1465270",
    "end": "1471230"
  },
  {
    "text": " And as d is something\nyou're very interested in,",
    "start": "1471230",
    "end": "1478400"
  },
  {
    "text": "eventually you want\nit to go to delta. The other thing that\nyou're very interested in-- and this is really a fairly\nstraightforward data structure",
    "start": "1478400",
    "end": "1485950"
  },
  {
    "text": "corresponding to just the d\nnumber and this predecessor number. And pi of V is the predecessor\nvertex on the best path to V.",
    "start": "1485950",
    "end": "1506820"
  },
  {
    "text": "And you said, pi\nof S equals NIL. ",
    "start": "1506820",
    "end": "1513490"
  },
  {
    "text": "And then you can think of\nthis as this is eventually what we want, and this\ngets modified as well.",
    "start": "1513490",
    "end": "1520600"
  },
  {
    "text": "So right now, when\nyou're working and trying to find the path, you\nhave some particular path",
    "start": "1520600",
    "end": "1527320"
  },
  {
    "text": "that happens to be\nthe current best path. And that's a\nsequence of vertices that you can get by\nfollowing the predecessors.",
    "start": "1527320",
    "end": "1534550"
  },
  {
    "text": "So once you're at a particular\nvertex E, you say all right,",
    "start": "1534550",
    "end": "1540250"
  },
  {
    "text": "right now I can look at pi of\nE. And if that points me to C,",
    "start": "1540250",
    "end": "1546700"
  },
  {
    "text": "then that's good. I'm going to look at pi of\nC. And that might point me",
    "start": "1546700",
    "end": "1552240"
  },
  {
    "text": "to A, and so on and so forth. In this particular\ninstance, pi of E",
    "start": "1552240",
    "end": "1557559"
  },
  {
    "text": "is going to, when you're finally\ndone, is going to point to A. And pi of A is going to point\nto S, all right, because that's",
    "start": "1557560",
    "end": "1566150"
  },
  {
    "text": "the path that is the\nbest path is this one. Like so and like that.",
    "start": "1566150",
    "end": "1572660"
  },
  {
    "text": "And so those are the\ntwo data structures you need to keep in mind\nthat you need to iterate on,",
    "start": "1572660",
    "end": "1578200"
  },
  {
    "text": "this predecessor relationship\nand the current distance.",
    "start": "1578200",
    "end": "1584970"
  },
  {
    "text": "And then this ends\nup being delta. You're done.",
    "start": "1584970",
    "end": "1591370"
  },
  {
    "text": "And at that point, your\npredecessor relationship is correct. ",
    "start": "1591370",
    "end": "1597140"
  },
  {
    "start": "1596000",
    "end": "1896000"
  },
  {
    "text": "So that's the set up. The last complication I\nwant to talk about here is negative weights.",
    "start": "1597140",
    "end": "1604284"
  },
  {
    "text": "And it's, I think, appropriate\nto talk about it when we have Bellman-Ford up here. ",
    "start": "1604284",
    "end": "1613467"
  },
  {
    "text": "Which is really the\ngeneral algorithm. ",
    "start": "1613467",
    "end": "1620410"
  },
  {
    "text": "So let's talk about-- so\nthe first question is why.",
    "start": "1620410",
    "end": "1629190"
  },
  {
    "text": "Why do these things\nexist, other than making our lives more difficult?",
    "start": "1629190",
    "end": "1634380"
  },
  {
    "text": "So give me an example. What is the motivation for a\ngraph with negative weights? ",
    "start": "1634380",
    "end": "1642330"
  },
  {
    "text": "I mean, I really\nwould like to know. The best motivation is\ndefinitely worth recursion. Then I can use it next time.",
    "start": "1642330",
    "end": "1648980"
  },
  {
    "text": "Yeah, go ahead. AUDIENCE: I'm just\nthinking like if your goal,",
    "start": "1648980",
    "end": "1655286"
  },
  {
    "text": "if your goal [INAUDIBLE]. ",
    "start": "1655286",
    "end": "1660709"
  },
  {
    "text": "And some of them cost too much. Some of them get\nyou money, and you want to know what-- you're\ntrying to find [INAUDIBLE].",
    "start": "1660709",
    "end": "1669090"
  },
  {
    "start": "1669090",
    "end": "1675499"
  },
  {
    "text": "PROFESSOR: Sure. Yeah, I mean, I think\nthat's a good motivation. ",
    "start": "1675499",
    "end": "1682750"
  },
  {
    "text": "I think driving, when\nyou think about distances and so on, there's no notion\nof a negative distance, at least physically.",
    "start": "1682750",
    "end": "1689820"
  },
  {
    "text": "But you can imagine that you\ncould have a case where you're getting paid to\ndrive or something,",
    "start": "1689820",
    "end": "1695110"
  },
  {
    "text": "or it costs you to drive,\nand that would be one. Yeah, go ahead. AUDIENCE: It sounds\nlike Monopoly.",
    "start": "1695110",
    "end": "1700366"
  },
  {
    "text": "So the vertices are\nsupposed to be [INAUDIBLE]. PROFESSOR: Oh, if you\nland on something,",
    "start": "1700366",
    "end": "1705680"
  },
  {
    "text": "you have to pay rent. Or sometimes you\nland on something and you actually get money. AUDIENCE: [INAUDIBLE]. ",
    "start": "1705680",
    "end": "1712792"
  },
  {
    "text": "PROFESSOR: Takes you\nforward, backwards, right. Yeah go ahead. AUDIENCE: [INAUDIBLE]. ",
    "start": "1712792",
    "end": "1723710"
  },
  {
    "text": "PROFESSOR: So that is such\nan interesting notion. Sometimes you may want to go.",
    "start": "1723710",
    "end": "1729230"
  },
  {
    "text": "And maybe in this\ncase, you're saying it's better to take\nyour distance metric",
    "start": "1729230",
    "end": "1735490"
  },
  {
    "text": "and go further away in order\nto get the best way of getting there, or something like that.",
    "start": "1735490",
    "end": "1741190"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. ",
    "start": "1741190",
    "end": "1748380"
  },
  {
    "text": "PROFESSOR: Right. Sure. That'd be good. Right. Victor, you had your hand up. AUDIENCE: Yeah. I'm going to give\n[INAUDIBLE] on the highway,",
    "start": "1748380",
    "end": "1755223"
  },
  {
    "text": "you can't [INAUDIBLE]\ndistances [INAUDIBLE] negative. Well, if a government\nuses [INAUDIBLE] police",
    "start": "1755223",
    "end": "1762209"
  },
  {
    "text": "to regulate traffic, then you\nmight have a negative distance. Because obviously, you\ncould go a certain way",
    "start": "1762209",
    "end": "1768696"
  },
  {
    "text": "minus the [INAUDIBLE]. PROFESSOR: Right. Yeah, that's a good example.",
    "start": "1768696",
    "end": "1775120"
  },
  {
    "text": "One of the things that\nwe have to think about is-- and this is something\nthat might come up, by the way, in a problem set\nor a quiz-- which is, is there",
    "start": "1775120",
    "end": "1783620"
  },
  {
    "text": "a way of shifting these weights\nto make them all positive? So the examples we've talked\nabout, not clear to me",
    "start": "1783620",
    "end": "1792250"
  },
  {
    "text": "that in the particular\nsettings that we talked about that you can somehow\ncreate the base",
    "start": "1792250",
    "end": "1799130"
  },
  {
    "text": "case to be 0 rather\nthan being negative. So it may not be possible\nin a particular scenario.",
    "start": "1799130",
    "end": "1807370"
  },
  {
    "text": "But if you can do\nthat-- and the reason I bring this up is if\nyou can do that, suddenly instead of using an\norder V, E algorithm,",
    "start": "1807370",
    "end": "1814760"
  },
  {
    "text": "if you can prove correctness\nof the final solution is exactly what you'd have\ngotten for the initial problem",
    "start": "1814760",
    "end": "1820630"
  },
  {
    "text": "certification, you've gone\nfrom an order V, E algorithm to an order V log V algorithm. So that's a wonderful\nthing to do.",
    "start": "1820630",
    "end": "1826310"
  },
  {
    "text": "So keep that in mind. Try and get rid of negative\nweight edges if you can without changing the\nproblem certification.",
    "start": "1826310",
    "end": "1832730"
  },
  {
    "text": "I saw a hand back there. AUDIENCE: Oh, no. I thought you were just\nasking the question, if we could do that?",
    "start": "1832730",
    "end": "1837984"
  },
  {
    "text": "So I was just gettin\nready to answer. PROFESSOR: OK, yeah, so that's\nsomething to keep in mind.",
    "start": "1837984",
    "end": "1847540"
  },
  {
    "text": "One example that I think has\ncome up here, which came up, I think, the last\ntime I lectured was imagine that you're\ndriving and there",
    "start": "1847540",
    "end": "1854620"
  },
  {
    "text": "are all these advertisements. And you get paid to\ndrive on a freeway. So the reverse toll.",
    "start": "1854620",
    "end": "1860197"
  },
  {
    "text": "I mean, it's a reverse toll,\nbecause you get to go there and you have to\nsee all these ads. And then I guess you drive\npretty fast through those ads.",
    "start": "1860197",
    "end": "1869200"
  },
  {
    "text": "But you have to go through. And so you get paid to go\nthrough those particular roads.",
    "start": "1869200",
    "end": "1874690"
  },
  {
    "text": "And then what about\nsocial networks? I mean, there's liking\npeople and disliking people. I mean, that sounds pretty--\nthat's negative and positive.",
    "start": "1874690",
    "end": "1882037"
  },
  {
    "text": "One could imagine that\nsocial networks would have positive weights\nand negative weights. I'm surprised one\nof you-- I mean,",
    "start": "1882037",
    "end": "1887750"
  },
  {
    "text": "I don't have an\naccount on Facebook. But presumably, you guys do. So think of what's the--\nyeah, that's right.",
    "start": "1887750",
    "end": "1896153"
  },
  {
    "start": "1896000",
    "end": "2246000"
  },
  {
    "text": "Well, I'm not sure\nhow this works. But you guys figure it out. So why?",
    "start": "1896154",
    "end": "1901240"
  },
  {
    "text": "Reverse tolls, social networks. ",
    "start": "1901240",
    "end": "1907080"
  },
  {
    "text": "Lots of things.  Even if you're not\nconvinced by the motivation,",
    "start": "1907080",
    "end": "1913140"
  },
  {
    "text": "I will spend a whole lecture\ntalking about Bellman-Ford. So that's just so that's clear. ",
    "start": "1913140",
    "end": "1921020"
  },
  {
    "text": "So the issue with the\nnegative weight cycles is something that is worth\nspending a minute on.",
    "start": "1921020",
    "end": "1927780"
  },
  {
    "text": "And I talked about\nthe fact that you had an exponential\nnumber of paths.",
    "start": "1927780",
    "end": "1933100"
  },
  {
    "text": "And that causes a\nbit of a problem, even in the case where\nyou have positive weights.",
    "start": "1933100",
    "end": "1938610"
  },
  {
    "text": "And I will revisit that example. But here's an even\nworse problem that corresponds to negative cycles.",
    "start": "1938610",
    "end": "1946955"
  },
  {
    "text": " So eventually, you\nwant to terminate. The faster you\nterminate, and if you",
    "start": "1946955",
    "end": "1952860"
  },
  {
    "text": "can talk about\nasymptotic complexity, obviously that means\nthat you've terminated",
    "start": "1952860",
    "end": "1958100"
  },
  {
    "text": "within a worst\ncase bound of time. And if that's\nexponential, that's bad.",
    "start": "1958100",
    "end": "1963680"
  },
  {
    "text": "You'd want it to be small. But what if you\ndidn't even terminate? So suppose you have\nsomething like this",
    "start": "1963680",
    "end": "1972610"
  },
  {
    "text": "where you have a graph that\nhas negative weights on some",
    "start": "1972610",
    "end": "1982400"
  },
  {
    "text": "of the edges. But others are positive. So this one has a minus 6. ",
    "start": "1982400",
    "end": "1997380"
  },
  {
    "text": "I think I got those right. So 2 for minus 6 over\nhere, 3, 2, 1, and minus 2.",
    "start": "1997380",
    "end": "2006520"
  },
  {
    "text": "So one thing that you\nnotice from this graph is that you got this\nannoying cycle here.",
    "start": "2006520",
    "end": "2013700"
  },
  {
    "text": "That's a negative weight cycle. And that's why I've picked\nthis particular example. Minus 6 plus 2 is minus 4.",
    "start": "2013700",
    "end": "2019860"
  },
  {
    "text": "Minus 4 plus 3 is minus 1. So if you had something where\nyou can't depend on the fact",
    "start": "2019860",
    "end": "2025670"
  },
  {
    "text": "that the D's are going\nto keep reducing.",
    "start": "2025670",
    "end": "2030870"
  },
  {
    "text": "And that eventually,\nthey'll stop reducing. Well, that's true. Eventually, they'll\nstop reducing. Because they're\nlower bounded by 0",
    "start": "2030870",
    "end": "2037350"
  },
  {
    "text": "when you have positive weight\nedges or non-negative weight edges. But if you have a graph with\na negative cycle-- and I mean,",
    "start": "2037350",
    "end": "2045940"
  },
  {
    "text": "this is a recipe for an\ninfinite loop, right-- in your program,\npotentially a bug.",
    "start": "2045940",
    "end": "2050980"
  },
  {
    "text": "But maybe not even a bug,\nnot a bug in implementation, but a bug in the algorithm. Because this determination\ncondition isn't set properly.",
    "start": "2050980",
    "end": "2059415"
  },
  {
    "text": "So you can imagine\nthat you would get to B and the\nfirst time-- whoops, I'm missing a weight here.",
    "start": "2059415",
    "end": "2066860"
  },
  {
    "text": "So you get to B. And\nyou say, well, I'm done.",
    "start": "2066860",
    "end": "2072908"
  },
  {
    "text": "Delta of SB is 4. But that's not true. Because you could get to\nB. And then you could get",
    "start": "2072909",
    "end": "2079658"
  },
  {
    "text": "back to B with the weight of 3. And then you could do it\nagain with the weight of 2, and so on and so forth.",
    "start": "2079659",
    "end": "2085540"
  },
  {
    "text": "So that's a problem. So what would you like\nan algorithm to do? What would you like the\nBellman-Ford to do here?",
    "start": "2085540",
    "end": "2092719"
  },
  {
    "text": "It's not the case that\nall of the delta values, that is the shortest\npath values,",
    "start": "2092719",
    "end": "2098230"
  },
  {
    "text": "are undefined for this graph. Some of them are well defined.",
    "start": "2098230",
    "end": "2103410"
  },
  {
    "text": "This one, you can't\never get back to it. So clearly, delta S, S is 0.",
    "start": "2103410",
    "end": "2110040"
  },
  {
    "text": "Everybody buy that? What about this one? It's 2, right.",
    "start": "2110040",
    "end": "2116640"
  },
  {
    "text": "Delta S, A is 2.  And everybody buys that,\nbecause there's just no way.",
    "start": "2116640",
    "end": "2123340"
  },
  {
    "text": "You can't, you don't touch\na negative weight cycle. You, in fact, don't touch\na negative weight edge. But more importantly, you don't\ntouch a negative weight cycle",
    "start": "2123340",
    "end": "2131400"
  },
  {
    "text": "in order to get\nto A. And there's no way of touching that. On the other hand,\nanything that's in here",
    "start": "2131400",
    "end": "2138970"
  },
  {
    "text": "you could run many times. And you could end up with\nwhatever weight you wanted.",
    "start": "2138970",
    "end": "2144430"
  },
  {
    "text": "There'd be a minus\ninfinity weight. So what you want\nan algorithm that handles in particular\nnegative cycles,",
    "start": "2144430",
    "end": "2151770"
  },
  {
    "text": "which are the hard part here. Negative weights\naren't the hard part if you can't run through\nthese edges more than once.",
    "start": "2151770",
    "end": "2158960"
  },
  {
    "text": "It's actually the negative\ncycles that are hard. And the negative\ncycles are going to make shortest path lengths\nindeterminate, but not",
    "start": "2158960",
    "end": "2168330"
  },
  {
    "text": "necessarily for every\nnode in the graph, like this example shows.",
    "start": "2168330",
    "end": "2174800"
  },
  {
    "text": "So what you want your\nBellman-Ford algorithm to do, or your shortest\npath algorithm that",
    "start": "2174800",
    "end": "2180730"
  },
  {
    "text": "handles negative\ncycles to do, is to finish in reasonable\namounts of time.",
    "start": "2180730",
    "end": "2185809"
  },
  {
    "text": "Order V, E will\ntake and give you the delta numbers for\nall of the vertices",
    "start": "2185810",
    "end": "2193540"
  },
  {
    "text": "that actually have\nfinite numbers and then mark all of\nthese other vertices",
    "start": "2193540",
    "end": "2199150"
  },
  {
    "text": "as being indeterminate, or\nessentially minus infinity. OK So that's your\ntermination condition.",
    "start": "2199150",
    "end": "2205560"
  },
  {
    "text": "It's different from the\ntermination condition if you simply had\nnon-negative edge weights.",
    "start": "2205560",
    "end": "2210920"
  },
  {
    "text": "All right. So remember, it's cycles that\ncause a problem, not just the edges.",
    "start": "2210920",
    "end": "2217230"
  },
  {
    "text": "And you have to do\nsomething about the cycles. But they may not affect the\nentire part of the computation.",
    "start": "2217230",
    "end": "2223210"
  },
  {
    "text": "So if you don't know that\nyou have a cycle or not, then you end up with\nhaving to use Bellman-Ford.",
    "start": "2223210",
    "end": "2232180"
  },
  {
    "text": "And so that also tells you\nsomething which is interesting, which is Bellman-Ford has\nto detect negative cycles.",
    "start": "2232180",
    "end": "2238400"
  },
  {
    "text": "If Bellman-Ford couldn't\ndetect negative cycles, then how could it possibly\nbe a correct algorithm for the arbitrary case?",
    "start": "2238400",
    "end": "2245090"
  },
  {
    "text": "So Dijkstra doesn't\nhave to do that. And that's why\nDijkstra is simpler. All right.",
    "start": "2245090",
    "end": "2250720"
  },
  {
    "start": "2246000",
    "end": "2696000"
  },
  {
    "text": "So let me talk about the general\nstructure of shortest path",
    "start": "2250720",
    "end": "2256820"
  },
  {
    "text": "algorithms. And the 2 important notions\nthat I want to talk about here",
    "start": "2256820",
    "end": "2262750"
  },
  {
    "text": "are the notion of relaxation,\nwhich we sort of did already",
    "start": "2262750",
    "end": "2269030"
  },
  {
    "text": "when we ran through\nthis example. But I need to formalize that. And then we'll go back and\nrevisit this exponential graph",
    "start": "2269030",
    "end": "2279464"
  },
  {
    "text": "example.  So the general structural\nof shortest path algorithms",
    "start": "2279465",
    "end": "2286650"
  },
  {
    "text": "are as follows. We're going to initialize for\nall u belonging to the vertex",
    "start": "2286650",
    "end": "2296470"
  },
  {
    "text": "set, we set d v to be infinity. And we set the\npredecessor to be NIL.",
    "start": "2296470",
    "end": "2306259"
  },
  {
    "text": "And then we'll set\nd of S to be 0.",
    "start": "2306260",
    "end": "2311650"
  },
  {
    "text": "We're talking about a\nsingle source, here. We'll set that to be 0. And what we're going to\ndo is essentially repeat.",
    "start": "2311650",
    "end": "2319740"
  },
  {
    "start": "2319740",
    "end": "2325110"
  },
  {
    "text": "Select some edge u comma v.\nAnd I'm not specifying how.",
    "start": "2325110",
    "end": "2334240"
  },
  {
    "text": "This is going to result\nin a different algorithm depending on the\nspecifics of how. But the important notion is that\nwe're going to relax edge u,",
    "start": "2334240",
    "end": "2347430"
  },
  {
    "text": "v. And what the notion\nof relaxation is is that you're\ngoing to look at it.",
    "start": "2347430",
    "end": "2354140"
  },
  {
    "text": "And you'll say, well, if d\nof v is greater than d of u",
    "start": "2354140",
    "end": "2361880"
  },
  {
    "text": "plus w u, v, then I've\ndiscovered a better",
    "start": "2361880",
    "end": "2369000"
  },
  {
    "text": "way of getting to v\nthen I currently know. So d of v would\ncurrently be infinity,",
    "start": "2369000",
    "end": "2376099"
  },
  {
    "text": "which means I haven't found\na way of getting to v yet. But I know that d of u, for\nexample, is a finite number.",
    "start": "2376100",
    "end": "2383110"
  },
  {
    "text": "And I do know that this edge\nexists from u to v, which means that I can update\nthe value of d of v.",
    "start": "2383110",
    "end": "2388910"
  },
  {
    "text": "And that's what we call\nrelaxation of the edge u, v. And so what you do here\nis if the if is true,",
    "start": "2388910",
    "end": "2397710"
  },
  {
    "text": "then you set d, v to\nbe d, u plus w u, v.",
    "start": "2397710",
    "end": "2405770"
  },
  {
    "text": "And you'll also update the\npredecessor relationship, because the current\nbest predecessor for v",
    "start": "2405770",
    "end": "2416430"
  },
  {
    "text": "is going to be u. So that's the notion\nof relaxation. And I kind of ran\nout of room here.",
    "start": "2416430",
    "end": "2423880"
  },
  {
    "text": "But you keep doing this. This repeat. So what is the repeat?",
    "start": "2423880",
    "end": "2430525"
  },
  {
    "text": "Well, the repeat\nis until all edges",
    "start": "2430525",
    "end": "2442109"
  },
  {
    "text": "have d of v less than or\nequal to d of u plus w u, v.",
    "start": "2442110",
    "end": "2456860"
  },
  {
    "text": "And the assumption here is that\nyou have no negative cycles.",
    "start": "2456860",
    "end": "2461940"
  },
  {
    "text": "We need a different structure. The notion of relaxation is\nstill going to be relevant.",
    "start": "2461940",
    "end": "2467840"
  },
  {
    "text": "But don't think\nof this structure as being the structure\nthat Bellman-Ford uses,",
    "start": "2467840",
    "end": "2474940"
  },
  {
    "text": "or algorithms that can\nhandle negative cycles use. So hopefully, you got\nthe notion of relaxation,",
    "start": "2474940",
    "end": "2483370"
  },
  {
    "text": "which is from a\npictorial standpoint, it's simply\nsomething that we did",
    "start": "2483370",
    "end": "2489420"
  },
  {
    "text": "when we looked at updating the\nvalue of 6 to 5, for example.",
    "start": "2489420",
    "end": "2495150"
  },
  {
    "text": "So we said through\nthis process, if I relax this particular edge\nand d was already set up--",
    "start": "2495150",
    "end": "2502970"
  },
  {
    "text": "let's say d, the\nvertex here had 3. And this was originally 6.",
    "start": "2502970",
    "end": "2509450"
  },
  {
    "text": "And I look at it and\nI say, D of C is 6. On other hand, 6\nis greater than d",
    "start": "2509450",
    "end": "2518530"
  },
  {
    "text": "of the vertex D, which\nhappens to be 3 plus 2. And since 5 is less than\n6, I can relax this edge",
    "start": "2518530",
    "end": "2526370"
  },
  {
    "text": "and update the value of 6 to 5. And then I update the\npredecessor relationship",
    "start": "2526370",
    "end": "2532690"
  },
  {
    "text": "to have a pi of\nC to be D. That's",
    "start": "2532690",
    "end": "2538300"
  },
  {
    "text": "the notion of relaxation. Fundamental notion. Going to use it in every\nalgorithm that we talk about.",
    "start": "2538300",
    "end": "2544860"
  },
  {
    "text": "When do you stop? Well, when you don't\nhave negative cycles, there's a fairly clean\ntermination condition,",
    "start": "2544860",
    "end": "2552740"
  },
  {
    "text": "which says that you can't relax\nany of the edges any more. OK You get to the\npoint where you",
    "start": "2552740",
    "end": "2559040"
  },
  {
    "text": "have values that are\nassociated with each of these vertices inside. And it doesn't matter\nwhat edge you pick,",
    "start": "2559040",
    "end": "2565150"
  },
  {
    "text": "you can't improve them. So this termination\ncondition, it",
    "start": "2565150",
    "end": "2570820"
  },
  {
    "text": "could involve an order E check. So we're not talking\ncomplexity here yet in terms of being efficient.",
    "start": "2570820",
    "end": "2579190"
  },
  {
    "text": "But you can imagine when I\nsay until all edges cannot be relaxed, that you'd have\nto look at all the edges.",
    "start": "2579190",
    "end": "2585720"
  },
  {
    "text": "And if any one of\nthem can be relaxed, it's possible that another\none can now be relaxed.",
    "start": "2585720",
    "end": "2591480"
  },
  {
    "text": "So you've got to keep going\nuntil you get to the point where none of the\nedges can be relaxed.",
    "start": "2591480",
    "end": "2597610"
  },
  {
    "text": "So this is a brute\nforce algorithm. And it'll work. It'll just be slow.",
    "start": "2597610",
    "end": "2603720"
  },
  {
    "text": "It'll work for known\nnegative cycles. And if you just kind of\nrandomly select these edges",
    "start": "2603720",
    "end": "2609290"
  },
  {
    "text": "and just keep\ngoing, I'll give you an example where it works\npretty badly in a minute.",
    "start": "2609290",
    "end": "2616880"
  },
  {
    "text": "But this is an algorithm. So I guess I lied\nwhen I said we weren't going to give you an algorithm.",
    "start": "2616880",
    "end": "2622270"
  },
  {
    "text": "It is an algorithm. It's just an algorithm that\nyou never want to implement. You do want to implement\nthe relaxation condition.",
    "start": "2622270",
    "end": "2629940"
  },
  {
    "text": "But not this random way of\nselecting edges and having",
    "start": "2629940",
    "end": "2635130"
  },
  {
    "text": "this termination condition\nthat, in of itself, is an order E check.",
    "start": "2635130",
    "end": "2641770"
  },
  {
    "text": "And one of the\nreasons why you don't want to implement this\nalgorithm is coming up shortly in our exponential\ngraph example.",
    "start": "2641770",
    "end": "2648710"
  },
  {
    "text": "But let me make sure\nthat people aren't bored. Any questions about\nthe general structure,",
    "start": "2648710",
    "end": "2655040"
  },
  {
    "text": "relaxation, anything? Are we good? OK.",
    "start": "2655040",
    "end": "2660550"
  },
  {
    "text": "So you guys, I walk away\nfrom lecture thinking I've given this spectacular\nlecture and everybody",
    "start": "2660550",
    "end": "2666320"
  },
  {
    "text": "understands. And then Victor tells\nme when he shows up in section in the\nmorning, he says",
    "start": "2666320",
    "end": "2672260"
  },
  {
    "text": "did people understand graphs? And everyone says no. Or did people understand x?",
    "start": "2672260",
    "end": "2677809"
  },
  {
    "text": "And people say no. So at least tomorrow, tell\nVictor that you understood.",
    "start": "2677810",
    "end": "2683460"
  },
  {
    "text": "Whether you did or not. So then I feel better. AUDIENCE: That's going to\nmake my life real easy.",
    "start": "2683460",
    "end": "2689774"
  },
  {
    "text": "PROFESSOR: Yeah, right. So good. Well, you probably like\nhearing stuff from Victor",
    "start": "2689774",
    "end": "2695540"
  },
  {
    "text": "better than me anyway. That's the secret here, right? ",
    "start": "2695540",
    "end": "2702770"
  },
  {
    "text": "All right, so one\nof the reasons why you don't want to\nimplement this algorithm",
    "start": "2702770",
    "end": "2709380"
  },
  {
    "text": "is precisely this\nexample that I put up. And this is a really neat\nexample that I like a lot,",
    "start": "2709380",
    "end": "2716120"
  },
  {
    "text": "because it points out\ntwo different things. It points out that\nexponential number",
    "start": "2716120",
    "end": "2724670"
  },
  {
    "text": "of paths, an exponential\nnumber of paths in a graph, could cause a problem\nwith this algorithm.",
    "start": "2724670",
    "end": "2729864"
  },
  {
    "text": "The other thing\nthat it points out is that we got issues\nwith the weights of edges.",
    "start": "2729864",
    "end": "2735590"
  },
  {
    "text": "One of the nice observations\none of you made earlier on is that we had these neat\nalgorithms that did not",
    "start": "2735590",
    "end": "2742560"
  },
  {
    "text": "depend on the dynamic\nrange of the weights. So let's just say\nthat I in fact had",
    "start": "2742560",
    "end": "2748480"
  },
  {
    "text": "an exponential range\nfor the weights. I know 4 isn't exponential,\nbut at some level,",
    "start": "2748480",
    "end": "2755220"
  },
  {
    "text": "you could imagine that\nit's exponentially related to 1 or 2. And the point here\nis that if I created",
    "start": "2755220",
    "end": "2762390"
  },
  {
    "text": "a graph that looked like this,\nwhere I have V4, V5, V6, V7,",
    "start": "2762390",
    "end": "2773940"
  },
  {
    "text": "V8, and it had this\nstructure, then",
    "start": "2773940",
    "end": "2780390"
  },
  {
    "text": "I'm going to end\nup having something like 2 raised to n\nover 2 weight if I",
    "start": "2780390",
    "end": "2789000"
  },
  {
    "text": "have n vertices in this graph. Or at least the dynamic\nrange of these weights is going to be 2 raised\nto n divided by 2.",
    "start": "2789000",
    "end": "2795730"
  },
  {
    "text": "Everybody buy that?  So think of this graph as being\na fragment of this large graph,",
    "start": "2795730",
    "end": "2803599"
  },
  {
    "text": "which where n could\nbe 100 and the weights could be 2 raised to 50. And 2 raised to\n50 isn't a number",
    "start": "2803600",
    "end": "2809920"
  },
  {
    "text": "that we can't handle\non a computer, right? It's still less\nthan 64 bits, right? So it's a pretty\nreasonable example.",
    "start": "2809920",
    "end": "2816250"
  },
  {
    "text": "And we talked about multiple\nprecision arithmetic, infinite precision arithmetic. So we can handle\narbitrary numbers",
    "start": "2816250",
    "end": "2822520"
  },
  {
    "text": "of an arbitrary position. So there's nothing\nthat's stopping us",
    "start": "2822520",
    "end": "2827940"
  },
  {
    "text": "from putting square root of\n2 and all sorts of things. We won't do imaginary numbers.",
    "start": "2827940",
    "end": "2832990"
  },
  {
    "text": "But you could imagine\nputting numbers with a high dynamic range as\nedges in a particular graph",
    "start": "2832990",
    "end": "2840140"
  },
  {
    "text": "and expect the Dijkstra,\nassuming that all of the edges are non-negative, that Dijkstra\nshould be able to run on it.",
    "start": "2840140",
    "end": "2848090"
  },
  {
    "text": "So what happens\nwith this example? Well, with this example,\nhere's what happens. Let's say that I\nran this algorithm.",
    "start": "2848090",
    "end": "2856340"
  },
  {
    "text": "And initially, I just\nfollowed this chain here.",
    "start": "2856340",
    "end": "2862210"
  },
  {
    "text": "And I get-- this\nstarts with a 0. And this is a 4, because\nI get there with 4.",
    "start": "2862210",
    "end": "2868530"
  },
  {
    "text": "This one is 8. And this is 10. And this is 12, 13, 14.",
    "start": "2868530",
    "end": "2875380"
  },
  {
    "text": " And that's the initial pass.",
    "start": "2875380",
    "end": "2880740"
  },
  {
    "text": "That's the selection. What ends up happening is that\nyou could now relax at this--",
    "start": "2880740",
    "end": "2890020"
  },
  {
    "text": "you see 14. And let's say you\nrelax this edge. You see that 12 and 14,\nyou've turned that into 13.",
    "start": "2890020",
    "end": "2898940"
  },
  {
    "text": "And then when you relax this\nedge, this turns into 12. ",
    "start": "2898940",
    "end": "2905020"
  },
  {
    "text": "So you go through that process. Now, this one stays 12.",
    "start": "2905020",
    "end": "2910510"
  },
  {
    "text": "But now you relax this edge. And so this 12 becomes 10. And then when this\nchanges, you need",
    "start": "2910510",
    "end": "2917310"
  },
  {
    "text": "to-- if you relax\nthis edge first, then this 13 is\ngoing to become 11.",
    "start": "2917310",
    "end": "2925060"
  },
  {
    "text": "It doesn't really matter. This becomes, I guess, 11. And-- is that right?",
    "start": "2925060",
    "end": "2931281"
  },
  {
    "text": "Yup. This is 11 and\nthat's 11 as well. It might start out\nbeing 12 if you",
    "start": "2931281",
    "end": "2937440"
  },
  {
    "text": "relax this edge and that edge. So you might go to 12 to\n11, and so on and so forth.",
    "start": "2937440",
    "end": "2942920"
  },
  {
    "text": "So for a pathological ordering,\nI won't belabor the point. But you see that you're\ngoing 14, 13, 12,",
    "start": "2942920",
    "end": "2949700"
  },
  {
    "text": "11 with a bad ordering\nthat corresponds to the selection of the edges.",
    "start": "2949700",
    "end": "2956990"
  },
  {
    "text": "And so if the overall weight\nhere and overall weight here, when you start\nout with, is going",
    "start": "2956990",
    "end": "2962640"
  },
  {
    "text": "to be order 2\nraised to n over 2. OK And you could be, in\nthis particular graph,",
    "start": "2962640",
    "end": "2969160"
  },
  {
    "text": "relaxing edges an\nexponential number of times in order to finish.",
    "start": "2969160",
    "end": "2976940"
  },
  {
    "text": "And so the number of\ntimes you relax an edge could be of the\norder of the weights",
    "start": "2976940",
    "end": "2982440"
  },
  {
    "text": "that you start out with. And that makes this algorithm\nan exponential time algorithm. So clearly, we have\nto do better than that",
    "start": "2982440",
    "end": "2989050"
  },
  {
    "text": "when it comes to\nDijkstra or Bellman-Ford. So how are we going to\ndo better than that?",
    "start": "2989050",
    "end": "2994840"
  },
  {
    "text": "Yeah, question back there. AUDIENCE: Is it an\nissue that we're starting at the [INAUDIBLE]? ",
    "start": "2994840",
    "end": "3002807"
  },
  {
    "text": "PROFESSOR: You're exactly right. There's an issue with the\nordering that we've chosen. But what you have to show\nis that for any graph,",
    "start": "3002807",
    "end": "3010920"
  },
  {
    "text": "the particular ordering\nthat you choose will result in V log V plus\nE and so on and so forth.",
    "start": "3010920",
    "end": "3016910"
  },
  {
    "text": "So you're exactly right. I mean, it's an issue with\nthe ordering we've chosen. This is a pathological ordering.",
    "start": "3016910",
    "end": "3022049"
  },
  {
    "text": "It's just meaning\nto say that we have to be careful about\nhow we select.",
    "start": "3022050",
    "end": "3027080"
  },
  {
    "start": "3026000",
    "end": "3194000"
  },
  {
    "text": "If you selected wrong,\nyou've got problems. And so the purpose\nof next week is",
    "start": "3027080",
    "end": "3032110"
  },
  {
    "text": "going to be how do we\nselect these edges properly. And so I leave you\nwith this notion of,",
    "start": "3032110",
    "end": "3040070"
  },
  {
    "text": "very simple notion of,\noptimal substructure using two very simple\nterms that you can",
    "start": "3040070",
    "end": "3046430"
  },
  {
    "text": "prove in literally\na line of text. And the first one says as\nsubpaths of a shortest path",
    "start": "3046430",
    "end": "3059410"
  },
  {
    "text": "are shortest paths. ",
    "start": "3059410",
    "end": "3065520"
  },
  {
    "text": "And all that means is if I\nhad V0, and I went to V1,",
    "start": "3065520",
    "end": "3071920"
  },
  {
    "text": "and I went to V2, and\nthese are paths here. So this could be p01, p02, p03.",
    "start": "3071920",
    "end": "3082930"
  },
  {
    "text": "And so there are many vertices\npotentially between V0 and V1. And if you tell me\nthat V0 through V3,",
    "start": "3082930",
    "end": "3090010"
  },
  {
    "text": "the concatenation of\np01, p02, and, sorry, p03 are a shortest path.",
    "start": "3090010",
    "end": "3095484"
  },
  {
    "start": "3095485",
    "end": "3100740"
  },
  {
    "text": "If this is an SP,\nshortest path, then that implies that each of these\nare shortest paths as well.",
    "start": "3100740",
    "end": "3110030"
  },
  {
    "text": "And that makes sense,\nbecause if in fact there was a better way of\ngetting from V0 to V1",
    "start": "3110030",
    "end": "3115740"
  },
  {
    "text": "that was better than p01, why\nwould you ever put p01 in here? You would use that better way.",
    "start": "3115740",
    "end": "3122390"
  },
  {
    "text": "So very simple. That's what's called the\noptimum substructure property. And this notion of the\ntriangle inequality",
    "start": "3122390",
    "end": "3132190"
  },
  {
    "text": "is also related to that. And that simply says that if\nI have something like this,",
    "start": "3132190",
    "end": "3141700"
  },
  {
    "text": "that I have V0, V1,\nand V2, then when",
    "start": "3141700",
    "end": "3148109"
  },
  {
    "text": "I look at the delta\nvalue of V0, V1, and I compare that with the\ndelta values of V0, V2, and V2,",
    "start": "3148110",
    "end": "3158500"
  },
  {
    "text": "V1, then this has got to be\nsmaller than or equal to this",
    "start": "3158500",
    "end": "3166290"
  },
  {
    "text": "plus that. And that again makes sense. Because if this plus this\nwas smaller than that,",
    "start": "3166290",
    "end": "3174090"
  },
  {
    "text": "well remember I'm talking\nabout paths here, not edges. And the better way\nof getting to V1",
    "start": "3174090",
    "end": "3180890"
  },
  {
    "text": "would be to follow--\ngo through V2 rather than following this\npath up on top. Amazingly, these two\nnotions are going",
    "start": "3180890",
    "end": "3187480"
  },
  {
    "text": "to be enough to\ntake this algorithm and turn it into essentially\na linear time algorithm.",
    "start": "3187480",
    "end": "3192980"
  },
  {
    "text": "And we'll do that next time.",
    "start": "3192980",
    "end": "3195530"
  }
]