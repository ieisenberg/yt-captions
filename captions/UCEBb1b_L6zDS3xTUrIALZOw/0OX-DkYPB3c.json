[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "One of the biggest and slowest circuits in\nan arithmetic and logic unit is the multiplier.",
    "start": "1079",
    "end": "6700"
  },
  {
    "text": "We'll start by developing a straightforward\nimplementation and then, in the next section,",
    "start": "6700",
    "end": "11280"
  },
  {
    "text": "look into tradeoffs to make it either smaller\nor faster.",
    "start": "11280",
    "end": "16508"
  },
  {
    "text": "Here's the multiplication operation for two\nunsigned 4-bit operands broken down into its",
    "start": "16509",
    "end": "21510"
  },
  {
    "text": "component operations.",
    "start": "21510",
    "end": "24090"
  },
  {
    "text": "This is exactly how we learned to do it in\nprimary school.",
    "start": "24090",
    "end": "27529"
  },
  {
    "text": "We take each digit of the multiplier (the\nB operand) and use our memorized multiplication",
    "start": "27529",
    "end": "33329"
  },
  {
    "text": "tables to multiply it with each digit of the\nmultiplicand (the A operand),",
    "start": "33330",
    "end": "38540"
  },
  {
    "text": "dealing with any carries into the next column\nas we process the multiplicand right-to-left.",
    "start": "38540",
    "end": "44640"
  },
  {
    "text": "The output from this step is called a partial\nproduct and then we repeat the step for the",
    "start": "44640",
    "end": "49250"
  },
  {
    "text": "remaining bits of the multiplier.",
    "start": "49250",
    "end": "51640"
  },
  {
    "text": "Each partial product is shifted one digit\nto the left, reflecting the increasing weight",
    "start": "51640",
    "end": "56150"
  },
  {
    "text": "of the multiplier digits.",
    "start": "56150",
    "end": "59119"
  },
  {
    "text": "In our case the digits are just single bits,\ni.e., they're 0 or 1 and the multiplication",
    "start": "59119",
    "end": "65120"
  },
  {
    "text": "table is pretty simple!",
    "start": "65120",
    "end": "66610"
  },
  {
    "text": "In fact, the 1-bit-by-1-bit binary multiplication\ncircuit is just a 2-input AND gate.",
    "start": "66610",
    "end": "73010"
  },
  {
    "text": "And look Mom, no carries!",
    "start": "73010",
    "end": "76420"
  },
  {
    "text": "The partial products are N bits wide since\nthere are no carries.",
    "start": "76420",
    "end": "80580"
  },
  {
    "text": "If the multiplier has M bits, there will be\nM partial products.",
    "start": "80580",
    "end": "85450"
  },
  {
    "text": "And when we add the partial products together,\nwe'll get an N+M bit result if we account",
    "start": "85450",
    "end": "90390"
  },
  {
    "text": "for the possible carry-out from the high-order\nbit.",
    "start": "90390",
    "end": "94220"
  },
  {
    "text": "The easy part of the multiplication is forming\nthe partial products - it just requires some",
    "start": "94220",
    "end": "98640"
  },
  {
    "text": "AND gates.",
    "start": "98640",
    "end": "100030"
  },
  {
    "text": "The more expensive operation is adding together\nthe M N-bit partial products.",
    "start": "100030",
    "end": "106610"
  },
  {
    "start": "106000",
    "end": "106000"
  },
  {
    "text": "Here's the schematic for the combinational\nlogic needed to implement the 4x4 multiplication,",
    "start": "106610",
    "end": "112320"
  },
  {
    "text": "which would be easy to extend for larger multipliers\n(we'd need more rows) or larger multiplicands",
    "start": "112320",
    "end": "118080"
  },
  {
    "text": "(we'd need more columns).",
    "start": "118080",
    "end": "119930"
  },
  {
    "text": "The M*N 2-input AND gates compute the bits\nof the M partial products.",
    "start": "119930",
    "end": "126710"
  },
  {
    "text": "The adder modules add the current row's partial\nproduct with the sum of the partial products",
    "start": "126710",
    "end": "131020"
  },
  {
    "text": "from the earlier rows.",
    "start": "131020",
    "end": "133080"
  },
  {
    "text": "Actually there are two types of adder modules.",
    "start": "133080",
    "end": "135640"
  },
  {
    "text": "The full adder is used when the modules needs\nthree inputs.",
    "start": "135640",
    "end": "139880"
  },
  {
    "text": "The simpler half adder is used when only two\ninputs are needed.",
    "start": "139880",
    "end": "144970"
  },
  {
    "text": "The longest path through this circuit takes\na moment to figure out.",
    "start": "144970",
    "end": "148910"
  },
  {
    "text": "Information is always moving either down a\nrow or left to the adjacent column.",
    "start": "148910",
    "end": "153900"
  },
  {
    "text": "Since there are M rows and, in any particular\nrow, N columns, there are at most N+M modules",
    "start": "153900",
    "end": "160349"
  },
  {
    "text": "along any path from input to output.",
    "start": "160349",
    "end": "163690"
  },
  {
    "text": "So the latency is order N, since M and N differ\nby just some constant factor.",
    "start": "163690",
    "end": "170810"
  },
  {
    "text": "Since this is a combinational circuit, the\nthroughput is just 1/latency.",
    "start": "170810",
    "end": "175330"
  },
  {
    "text": "And the total amount of hardware is order\nN^2.",
    "start": "175330",
    "end": "178650"
  },
  {
    "text": "In the next section, we'll investigate how\nto reduce the hardware costs, or, separately,",
    "start": "178650",
    "end": "183890"
  },
  {
    "text": "how to increase the throughput.",
    "start": "183890",
    "end": "186240"
  },
  {
    "text": "But before we do that, let's take a moment\nto see how the circuit would change if the",
    "start": "186240",
    "end": "190160"
  },
  {
    "text": "operands were two's complement integers instead\nof unsigned integers.",
    "start": "190160",
    "end": "195730"
  },
  {
    "start": "195000",
    "end": "195000"
  },
  {
    "text": "With a two's complement multiplier and multiplicand,\nthe high-order bit of each has negative weight.",
    "start": "195730",
    "end": "202110"
  },
  {
    "text": "So when adding together the partial products,\nwe'll need to sign-extend each of the N-bit",
    "start": "202110",
    "end": "206770"
  },
  {
    "text": "partial products to the full N+M-bit width\nof the addition.",
    "start": "206770",
    "end": "211280"
  },
  {
    "text": "This will ensure that a negative partial product\nis properly treated when doing the addition.",
    "start": "211280",
    "end": "215770"
  },
  {
    "text": "And, of course, since the high-order bit of\nthe multiplier has a negative weight, we'd",
    "start": "215770",
    "end": "220740"
  },
  {
    "text": "subtract instead of add the last partial product.",
    "start": "220740",
    "end": "224989"
  },
  {
    "text": "Now for the clever bit.",
    "start": "224989",
    "end": "226590"
  },
  {
    "text": "We'll add 1's to various of the columns and\nthen subtract them later, with the goal of",
    "start": "226590",
    "end": "231160"
  },
  {
    "text": "eliminating all the extra additions caused\nby the sign-extension.",
    "start": "231160",
    "end": "234150"
  },
  {
    "text": "We'll also rewrite the subtraction of the\nlast partial product as first complementing",
    "start": "234150",
    "end": "239500"
  },
  {
    "text": "the partial product and then adding 1.",
    "start": "239500",
    "end": "242900"
  },
  {
    "text": "This is all a bit mysterious butâ€¦",
    "start": "242900",
    "end": "245659"
  },
  {
    "text": "Here in step 3 we see the effect of all the\nstep 2 machinations.",
    "start": "245660",
    "end": "251019"
  },
  {
    "text": "Let's look at the high order bit of the first\npartial product X3Y0.",
    "start": "251019",
    "end": "256150"
  },
  {
    "text": "If that partial product is non-negative, X3Y0\nis a 0, so all the sign-extension bits are",
    "start": "256150",
    "end": "262599"
  },
  {
    "text": "0 and can be removed.",
    "start": "262599",
    "end": "264909"
  },
  {
    "text": "The effect of adding a 1 in that position\nis to simply complement X3Y0.",
    "start": "264909",
    "end": "270689"
  },
  {
    "text": "On the other hand, if that partial product\nis negative, X3Y0 is 1, and all the sign-extension",
    "start": "270689",
    "end": "276779"
  },
  {
    "text": "bits are 1.",
    "start": "276779",
    "end": "278099"
  },
  {
    "text": "Now when we add a 1 in that position, we complement\nthe X3Y0 bit back to 0, but we also get a",
    "start": "278099",
    "end": "284990"
  },
  {
    "text": "carry-out.",
    "start": "284990",
    "end": "286819"
  },
  {
    "text": "When that's added to the first sign-extension\nbit (which is itself a 1), we get zero with",
    "start": "286819",
    "end": "291740"
  },
  {
    "text": "another carry-out.",
    "start": "291740",
    "end": "293219"
  },
  {
    "text": "And so on, with all the sign-extension bits\neventually getting flipped to 0 as the carry",
    "start": "293219",
    "end": "298999"
  },
  {
    "text": "ripples to the end.",
    "start": "298999",
    "end": "301580"
  },
  {
    "text": "Again the net effect of adding a 1 in that\nposition is to simply complement X3Y0.",
    "start": "301580",
    "end": "309240"
  },
  {
    "text": "We do the same for all the other sign-extended\npartial products, leaving us with the results",
    "start": "309240",
    "end": "313969"
  },
  {
    "text": "shown here.",
    "start": "313969",
    "end": "315279"
  },
  {
    "text": "In the final step we do a bit of arithmetic\non the remaining constants to end up with",
    "start": "315279",
    "end": "319319"
  },
  {
    "text": "this table of work to be done.",
    "start": "319319",
    "end": "321729"
  },
  {
    "text": "Somewhat to our surprise, this isn't much\ndifferent than the original table for the",
    "start": "321729",
    "end": "326009"
  },
  {
    "text": "unsigned multiplication.",
    "start": "326009",
    "end": "328169"
  },
  {
    "text": "There are a few partial product bits that\nneed to be complemented, and two 1-bits that",
    "start": "328169",
    "end": "332979"
  },
  {
    "text": "need to be added to particular columns.",
    "start": "332979",
    "end": "335499"
  },
  {
    "text": "The resulting circuitry is shown here.",
    "start": "335499",
    "end": "338159"
  },
  {
    "start": "336000",
    "end": "336000"
  },
  {
    "text": "We've changed some of the AND gates to NAND\ngates to perform the necessary complements.",
    "start": "338159",
    "end": "342860"
  },
  {
    "text": "And we've changed the logic necessary to deal\nwith the two 1-bits that needed to be added",
    "start": "342860",
    "end": "346819"
  },
  {
    "text": "in.",
    "start": "346819",
    "end": "348869"
  },
  {
    "text": "The colored elements show the changes made\nfrom the original unsigned multiplier circuitry.",
    "start": "348869",
    "end": "354029"
  },
  {
    "text": "Basically, the circuit for multiplying two's\ncomplement operands has the same latency,",
    "start": "354029",
    "end": "359410"
  },
  {
    "text": "throughput and hardware costs as the original\ncircuitry.",
    "start": "359410",
    "end": "362419"
  }
]