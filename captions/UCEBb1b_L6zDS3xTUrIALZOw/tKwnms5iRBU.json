[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6360"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6360",
    "end": "13330"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13330",
    "end": "20929"
  },
  {
    "text": "ERIK DEMAINE: All right,\nlet's get started. Today, we have another cool\ngraph algorithm or problem.",
    "start": "20930",
    "end": "28520"
  },
  {
    "text": "Actually, we'll\nhave two algorithms. The problem is called\nminimum spanning tree.",
    "start": "28520",
    "end": "34350"
  },
  {
    "text": "You can probably guess from the\ntitle what it's trying to do. We'll see two\nalgorithms for doing it. Both of them are in the category\nof greedy algorithms, which",
    "start": "34350",
    "end": "42200"
  },
  {
    "text": "is something we've\nseen a couple of times already in 6.046,\nstarting with lecture 1.",
    "start": "42200",
    "end": "48960"
  },
  {
    "text": "This is the definition of\ngreedy algorithm from lecture 1, roughly. The idea is to always make\ngreedy choices, meaning",
    "start": "48960",
    "end": "56850"
  },
  {
    "text": "the choice is locally best. For right now, it seems\nlike a good thing to do,",
    "start": "56850",
    "end": "62360"
  },
  {
    "text": "but maybe in the future\nit will screw you over. And if you have a\ncorrect greedy algorithm,",
    "start": "62360",
    "end": "68800"
  },
  {
    "text": "you prove that it\nwon't screw you over. So it's sort of like\nCookie Monster here, always locally seems like a good\nidea to eat another cookie,",
    "start": "68800",
    "end": "75670"
  },
  {
    "text": "but maybe it'll bite\nyou in the future. So today we will embrace\nour inner Cookie Monster",
    "start": "75670",
    "end": "83299"
  },
  {
    "text": "and eat as many-- eat\nthe largest cookie first, would be the standard\nalgorithm for Cookie Monster.",
    "start": "83300",
    "end": "89396"
  },
  {
    "text": "I don't know if you learned\nthat in Sesame Street, but-- all right.",
    "start": "89397",
    "end": "94470"
  },
  {
    "text": "So what's the problem? Minimum spanning tree. Can anyone tell\nme what a tree is?",
    "start": "94470",
    "end": "100350"
  },
  {
    "text": "Formally, not the outside thing. In graph land.",
    "start": "100350",
    "end": "106590"
  },
  {
    "text": "Acyclic graph, close.  Connected acyclic graph, good.",
    "start": "106590",
    "end": "112911"
  },
  {
    "text": "That's important. ",
    "start": "112912",
    "end": "118850"
  },
  {
    "text": "This is 604.2 stuff.",
    "start": "118850",
    "end": "127900"
  },
  {
    "text": "OK, so how about\na spanning tree? ",
    "start": "127900",
    "end": "135331"
  },
  {
    "text": "Sorry? AUDIENCE: It contains\nall the vertices. ERIK DEMAINE: It contains\nall the vertices. Yeah. So let me go over here.",
    "start": "135331",
    "end": "141705"
  },
  {
    "start": "141705",
    "end": "147350"
  },
  {
    "text": "Spanning means it contains all\nthe vertices, so implicit here, I guess, is subtree or subgraph.",
    "start": "147350",
    "end": "154210"
  },
  {
    "text": "You're given a graph. You want a spanning\ntree of that graph. ",
    "start": "154210",
    "end": "164210"
  },
  {
    "text": "It's going to be a tree\nthat lives inside the graph. So we're going to take\nsome of the edges of G,",
    "start": "164210",
    "end": "169330"
  },
  {
    "text": "make a tree out of them, make\na connected acyclic graph. And that tree should hit\nall the vertices in G.",
    "start": "169330",
    "end": "176319"
  },
  {
    "text": "So this is going to be a subset\nof the edges, or subgraph. ",
    "start": "176320",
    "end": "186060"
  },
  {
    "text": "Those edges should form a tree. ",
    "start": "186060",
    "end": "193520"
  },
  {
    "text": "And, I'll say, hit\nall vertices of G.",
    "start": "193520",
    "end": "206300"
  },
  {
    "text": "OK, if I just said they\nshould form a tree, then I could say, well,\nI'll take no edges, and here's a tree\nwith one vertex.",
    "start": "206300",
    "end": "213160"
  },
  {
    "text": "That's not very interesting. You want a vertex--\nyou want, basically, the vertex set of the tree\nto be the same as the vertex",
    "start": "213160",
    "end": "218659"
  },
  {
    "text": "set of the graph. That's the spanning property. But you still want\nit to be a tree, so you want it to be connected\nand you want it to be acyclic.",
    "start": "218660",
    "end": "226840"
  },
  {
    "text": "Now if G is disconnected,\nthis is impossible. And for that, you could\ndefine a spanning forest",
    "start": "226840",
    "end": "232690"
  },
  {
    "text": "to be like a maximal\nthing like this, but we'll focus on the case\nhere as G is connected.",
    "start": "232690",
    "end": "238239"
  },
  {
    "text": "That's the interesting case. And so we can get\na spanning tree. All right?",
    "start": "238240",
    "end": "243670"
  },
  {
    "text": "So what is this minimum\nspanning tree problem? ",
    "start": "243670",
    "end": "249540"
  },
  {
    "text": "Minimum spanning tree. We're given a weighted\ngraph, just like last time,",
    "start": "249540",
    "end": "262400"
  },
  {
    "text": "with shortest paths. We have an edge weight function\nW giving me a real number, say,",
    "start": "262400",
    "end": "274720"
  },
  {
    "text": "for every edge. And we want to find a spanning\ntree of minimum total weight.",
    "start": "274720",
    "end": "282125"
  },
  {
    "start": "282125",
    "end": "296330"
  },
  {
    "text": "So I'm going to define\nthe weight of a tree T to be the sum over\nall edges in T,",
    "start": "296330",
    "end": "303830"
  },
  {
    "text": "because I'm viewing a spanning\ntree as a set of edges, of the weight of that edge.",
    "start": "303830",
    "end": "311000"
  },
  {
    "text": "OK, so pretty much\nwhat you would expect. Minimum weight spanning tree. ",
    "start": "311000",
    "end": "317050"
  },
  {
    "text": "It's a relatively\nsimple problem, but it's not so easy\nto find an algorithm.",
    "start": "317050",
    "end": "322110"
  },
  {
    "text": "You need to prove a lot to\nmake sure that you really find the right tree.",
    "start": "322110",
    "end": "327550"
  },
  {
    "text": "I guess the really\nnaive algorithm here would be to try\nall spanning trees,",
    "start": "327550",
    "end": "335479"
  },
  {
    "text": "compute the weight\nof each spanning tree and return the minimum. That sounds reasonable.",
    "start": "335480",
    "end": "340830"
  },
  {
    "text": "That's correct. But it's bad, because-- n to\nthe fourth, that would be nice.",
    "start": "340830",
    "end": "354620"
  },
  {
    "text": "It's larger than that. ",
    "start": "354620",
    "end": "361290"
  },
  {
    "text": "Maybe not so obvious, but\nit can be exponential. Here's a graph where the\nnumber of spanning trees",
    "start": "361290",
    "end": "368096"
  },
  {
    "text": "is exponential.  This is a complete\nbipartite graph",
    "start": "368096",
    "end": "376690"
  },
  {
    "text": "with two vertices on one side\nand n vertices on the other, and so you can-- let's\nsay we put these two",
    "start": "376690",
    "end": "384990"
  },
  {
    "text": "edges into the spanning tree. And now, for each\nof these vertices,",
    "start": "384990",
    "end": "390230"
  },
  {
    "text": "we can choose whether it\nconnects to the left vertex or the right vertix. It can only do one, but it could\ndo either one independently.",
    "start": "390230",
    "end": "395861"
  },
  {
    "text": "So maybe this guy\nchooses the left one, this one chooses the right one. This one chooses the\nleft one, and so on.",
    "start": "395861",
    "end": "400880"
  },
  {
    "text": "If I have n vertices down here,\nI have 2 to the n different spanning trees.",
    "start": "400880",
    "end": "406780"
  },
  {
    "text": "So there can be an\nexponential number. So that algorithm\nis not so good.",
    "start": "406780",
    "end": "412479"
  },
  {
    "start": "412480",
    "end": "419400"
  },
  {
    "text": "Exponential bad. Polynomial good. So today, we're going to\nget a polynomial algorithm. In fact, we will get an almost\nlinear time algorithm as fast",
    "start": "419400",
    "end": "427319"
  },
  {
    "text": "as Dijkstra's algorithm. But we can't use\nDijkstra's algorithm, there's no shortest paths here.",
    "start": "427320",
    "end": "433640"
  },
  {
    "text": "Plus, one of the algorithms will\nactually look pretty similar. ",
    "start": "433640",
    "end": "439410"
  },
  {
    "text": "Two lectures ago, the\ndynamic programming lecture, we saw an example where\nwe tried to do greedy,",
    "start": "439410",
    "end": "446510"
  },
  {
    "text": "and it gave the\nwrong answer, and so we fell back on\ndynamic programming. Today, we're going to try\nto do dynamic programming,",
    "start": "446510",
    "end": "453330"
  },
  {
    "text": "it's going to fail, and we're\ngoing to fall back on greedy. It's like the reverse. But the way it's\ngoing to fail is",
    "start": "453330",
    "end": "459040"
  },
  {
    "text": "we're going to get\nexponential time initially, and then greedy will let\nus get polynomial time.",
    "start": "459040",
    "end": "464870"
  },
  {
    "text": "This is actually a bit unusual. I would say more typically,\ndynamic programming can solve anything,\nbut, you know, with n",
    "start": "464870",
    "end": "471890"
  },
  {
    "text": "to the seventh running\ntime, something slow. And then you apply\ngreedy, and you get down to like n or n log\nn running time.",
    "start": "471890",
    "end": "478290"
  },
  {
    "text": "So that's more common. But today, we're going\nto go from exponential down to polynomial. And that's pretty nice.",
    "start": "478290",
    "end": "483490"
  },
  {
    "text": " Cool. So let me tell you a little\nbit about greedy algorithm",
    "start": "483490",
    "end": "494280"
  },
  {
    "text": "theory, so to speak. ",
    "start": "494280",
    "end": "500697"
  },
  {
    "text": "This is from the textbook. ",
    "start": "500697",
    "end": "507070"
  },
  {
    "text": "If your problem can be\nsolved by greedy algorithm,",
    "start": "507070",
    "end": "512159"
  },
  {
    "text": "usually you can\nprove two properties about that algorithm. One of them is called\noptimal substructure.",
    "start": "512159",
    "end": "518974"
  },
  {
    "start": "518975",
    "end": "529399"
  },
  {
    "text": "And the other is called\nthe greedy choice property. Optimal substructure\nshould be familiar idea",
    "start": "529400",
    "end": "539850"
  },
  {
    "text": "because it's essentially\nan encapsulation of dynamic programming. ",
    "start": "539850",
    "end": "573429"
  },
  {
    "text": "Greedy algorithms\nare, in some sense, a special form of\ndynamic programming. ",
    "start": "573429",
    "end": "588300"
  },
  {
    "text": "So this is saying\nsomething like, if you can solve\nsubproblems optimally, smaller subproblems, or\nwhatever, then you can",
    "start": "588300",
    "end": "594550"
  },
  {
    "text": "solve your original problem. And this may happen\nrecursively, whatever. That's essentially\nwhat makes a recurrence",
    "start": "594550",
    "end": "600820"
  },
  {
    "text": "work for dynamic programming. And with dynamic programming,\nfor this to be possible,",
    "start": "600820",
    "end": "609470"
  },
  {
    "text": "we need to guess some\nfeature of the solution. For example, in\nminimum spanning tree,",
    "start": "609470",
    "end": "614720"
  },
  {
    "text": "maybe you guess one of the edges\nthat's in the right answer. ",
    "start": "614720",
    "end": "620290"
  },
  {
    "text": "And then, once you do\nthat, you can reduce it to some other subproblems. And if you can solve\nthose subproblems,",
    "start": "620290",
    "end": "626260"
  },
  {
    "text": "you combine them and\nget an optimal solution to your original thing. So this is a familiar property. I don't usually think of it this\nway for dynamic programming,",
    "start": "626260",
    "end": "634140"
  },
  {
    "text": "but that is essentially what\nwe're doing via guessing. But with greedy algorithms,\nwe're not going to guess.",
    "start": "634140",
    "end": "641210"
  },
  {
    "text": "We're just going to be greedy. Eat the largest cookie. And so that's the\ngreedy choice property.",
    "start": "641210",
    "end": "646795"
  },
  {
    "start": "646795",
    "end": "658990"
  },
  {
    "text": "This says that eating\nthe largest cookie is actually a good thing to do. ",
    "start": "658990",
    "end": "670546"
  },
  {
    "text": "If we keep making\nlocally optimal choices, will end up with a\nglobally optimal solution.",
    "start": "670546",
    "end": "676100"
  },
  {
    "start": "676100",
    "end": "685649"
  },
  {
    "text": "No tummy ache. ",
    "start": "685650",
    "end": "692710"
  },
  {
    "text": "This is something you wouldn't\nexpect to be true in general, but it's going to be true\nfor minimum spanning tree.",
    "start": "692710",
    "end": "698382"
  },
  {
    "text": "And it's true for a\nhandful of other problems. You'll see a bunch more\nin recitation tomorrow. ",
    "start": "698382",
    "end": "706190"
  },
  {
    "text": "This is sort of general\ntheory, but I'm actually going to have a theorem like\nthis for minimum spanning tree",
    "start": "706190",
    "end": "711650"
  },
  {
    "text": "and a theorem like this\nfor minimum spanning tree. This is the prototype, but most\nof today is all about minimum",
    "start": "711650",
    "end": "718290"
  },
  {
    "text": "spanning tree.  And for minimum spanning\ntree, neither of these",
    "start": "718290",
    "end": "724160"
  },
  {
    "text": "is very obvious. So I'm just going to\nshow you these theorems. They're fairly easy to prove,\nin fact, but finding them",
    "start": "724160",
    "end": "732324"
  },
  {
    "text": "is probably the tricky part. ",
    "start": "732324",
    "end": "746880"
  },
  {
    "text": "Actually, I guess optimal\nsubstructure is probably the least intuitive or the\nleast obvious greedy choice.",
    "start": "746880",
    "end": "754496"
  },
  {
    "text": "You're probably\nalready thinking, what are good greedy choices? Minimum weight edge seems\nlike a good starting point,",
    "start": "754496",
    "end": "761100"
  },
  {
    "text": "which we will get to. But there's even\na stronger version of that, which we will prove.",
    "start": "761100",
    "end": "767100"
  },
  {
    "text": "And first, optimal substructure. So here, I'm going to think\nlike a dynamic program.",
    "start": "767100",
    "end": "773750"
  },
  {
    "text": "Let's suppose that we know an\nedge that's in our solution. Suppose we know\nan edge that lives",
    "start": "773750",
    "end": "779820"
  },
  {
    "text": "in a minimum spanning tree. We could guess that. We're not going\nto, but we could.",
    "start": "779820",
    "end": "785880"
  },
  {
    "text": "Either way, let's just\nsuppose than an edge e--",
    "start": "785880",
    "end": "791850"
  },
  {
    "text": "I should mention, I\nguess I didn't say, this graph is undirected. A minimum spanning tree\ndoesn't quite make sense",
    "start": "791850",
    "end": "798460"
  },
  {
    "text": "with directed graphs. There are other\nversions of the problem but here, the graph\nis undirected.",
    "start": "798460",
    "end": "804090"
  },
  {
    "text": "So probably, I should write\nthis as a unordered set, u, v. And there are possibly\nmany minimum spanning trees.",
    "start": "804090",
    "end": "821415"
  },
  {
    "text": "There could be many solutions\nwith the same weight. For example, if all of\nthese edges have weight 1, all of these trees\nare actually minimum.",
    "start": "821416",
    "end": "829610"
  },
  {
    "text": "If all the edges have weight\n1, every spanning tree is minimum, because every\nspanning tree has exactly n minus 1 edges.",
    "start": "829610",
    "end": "835315"
  },
  {
    "text": " But let's suppose we\nknow an edge that's guaranteed to be in some minimum\nspanning tree, at least one.",
    "start": "835315",
    "end": "845060"
  },
  {
    "text": "What I would like to do is take\nthis, so let me draw a picture. I have a graph.",
    "start": "845060",
    "end": "852070"
  },
  {
    "text": "We've identified some edge\nin the graph, e, that lives in some minimum spanning tree.",
    "start": "852070",
    "end": "858970"
  },
  {
    "text": "I'm going to draw some kind\nof tree structure here. ",
    "start": "858970",
    "end": "869399"
  },
  {
    "text": "OK. The wiggly lines are the tree. There are some\nother edges in here,",
    "start": "869400",
    "end": "874644"
  },
  {
    "text": "which I don't want to draw too\nmany of them because it's ugly. Those are other\nedges in the graph. Who knows where they are?",
    "start": "874644",
    "end": "879941"
  },
  {
    "text": "They could be all\nsorts of things. OK? But I've highlighted the\ngraph in a particular way.",
    "start": "879941",
    "end": "888230"
  },
  {
    "text": "Because the minimum\nspanning tree is a tree, if I delete\ne from the tree, then",
    "start": "888230",
    "end": "894470"
  },
  {
    "text": "I get two components. Every edge I remove--\nI'm minimally connected.",
    "start": "894470",
    "end": "899949"
  },
  {
    "text": "So if I delete an edge, I\ndisconnect into two parts, so I've drawn that as the left\ncircle and the right circle.",
    "start": "899950",
    "end": "906529"
  },
  {
    "text": "It's just a general way\nto think about a tree. Now there are other unused\nedges in this picture, who knows where they live?",
    "start": "906530",
    "end": "913961"
  },
  {
    "text": "OK? What I would like to do is\nsomehow simplify this graph and get a smaller problem,\nsay a graph with fewer edges.",
    "start": "913961",
    "end": "922045"
  },
  {
    "text": " Any suggestions\non how to do that?",
    "start": "922045",
    "end": "927360"
  },
  {
    "text": " I don't actually know where\nall these white edges are,",
    "start": "927360",
    "end": "934790"
  },
  {
    "text": "but what I'd like to do is--\nI'm supposing I know where e is, and that's an edge in my\nminimum spanning tree.",
    "start": "934790",
    "end": "941810"
  },
  {
    "text": "So how could I get rid of it? ",
    "start": "941810",
    "end": "948252"
  },
  {
    "text": "Yeah. AUDIENCE: Find\nthe minimum weight spanning tree of the two edges. ERIK DEMAINE: I'd like\nto divide and conquer. Maybe find the\nminimum weight over",
    "start": "948252",
    "end": "954410"
  },
  {
    "text": "here, minimum weight over here. Of course, I don't know\nwhich nodes are in what side. So that's a little trickier.",
    "start": "954410",
    "end": "960180"
  },
  {
    "text": "But what do I do but E itself? Let's start with that. ",
    "start": "960180",
    "end": "966917"
  },
  {
    "text": "Yeah. AUDIENCE: You remove it? ERIK DEMAINE: You\ncould remove it. That's a good idea. Doesn't work, but worth\na Frisbee nonetheless.",
    "start": "966917",
    "end": "976810"
  },
  {
    "text": "If I delete this\nedge, one problem is maybe none of these red\nedges exist and then my graph",
    "start": "976810",
    "end": "982540"
  },
  {
    "text": "is disconnected. Well, maybe that's\nactually a good case. That probably would\nbe a good case.",
    "start": "982540",
    "end": "988380"
  },
  {
    "text": "Then I know how to\ndivide and conquer. I just look at the\nconnected components. In general, if I\ndelete the edge,",
    "start": "988380",
    "end": "996170"
  },
  {
    "text": "and I have these red\nedges, then I maybe find a minimum spanning\ntree on what remains. ",
    "start": "996170",
    "end": "1003750"
  },
  {
    "text": "Maybe I'll end up including\none of these edges. Maybe this edge ends up\nin the spanning tree,",
    "start": "1003750",
    "end": "1009660"
  },
  {
    "text": "and then I can't put E in. So it's a little awkward. Yeah? AUDIENCE: Can you merge\nthe two nodes into one?",
    "start": "1009660",
    "end": "1016158"
  },
  {
    "text": "Merge the two nodes into one. Yes. Purple Frisbee.",
    "start": "1016158",
    "end": "1021450"
  },
  {
    "text": "Impressive. This is what we call\ncontracting the edge. ",
    "start": "1021450",
    "end": "1029919"
  },
  {
    "text": "It just means merge\nthe endpoints. Merge u and v. So I will draw\na new version of the graph.",
    "start": "1029920",
    "end": "1043249"
  },
  {
    "start": "1043249",
    "end": "1049840"
  },
  {
    "text": "So this was u and v before. You've got to put\nthe label inside.",
    "start": "1049840",
    "end": "1054880"
  },
  {
    "text": "And now we have a new\nvertex here, which is uv. Or you can think it\nas the set u, v. We",
    "start": "1054880",
    "end": "1062040"
  },
  {
    "text": "won't really need to\nkeep track of names. And whatever edges\nyou had over here,",
    "start": "1062040",
    "end": "1070120"
  },
  {
    "text": "you're going to have over here. OK? Just collapse u and v.\nThe edge e disappears.",
    "start": "1070120",
    "end": "1076223"
  },
  {
    "text": " And one other thing can happen.",
    "start": "1076223",
    "end": "1083180"
  },
  {
    "text": "Let me-- go over here.",
    "start": "1083180",
    "end": "1088280"
  },
  {
    "start": "1088280",
    "end": "1094040"
  },
  {
    "text": "We could end up with duplicate\nedges by this process. So for example, suppose\nwe have u and v,",
    "start": "1094040",
    "end": "1101750"
  },
  {
    "text": "and they have a common neighbor. Might have many common\nneighbors, who knows.",
    "start": "1101750",
    "end": "1107280"
  },
  {
    "text": "Add some other edges,\nuncommon neighbors. When I merge, I'd\nlike to just have",
    "start": "1107280",
    "end": "1120250"
  },
  {
    "text": "a single edge to that vertex and\na single edge to that vertex. And what I'm going\nto do is, if I",
    "start": "1120250",
    "end": "1125440"
  },
  {
    "text": "have some weights on these\nedges, let's say a and b, and c and d, I'm just\ngoing to take the minimum.",
    "start": "1125440",
    "end": "1132700"
  },
  {
    "start": "1132700",
    "end": "1137779"
  },
  {
    "text": "Because what I'm about to do is\ncompute a minimum spanning tree in this graph.",
    "start": "1137780",
    "end": "1142810"
  },
  {
    "text": "And if I take the minimum\nspanning tree here, and I had multiple\nedges-- one weight a, one weight b-- do you think I\nwould choose the larger weight",
    "start": "1142810",
    "end": "1150150"
  },
  {
    "text": "edge? It does-- they're\nexactly the same edge, but one is higher weight. There's no point in keeping\nthe higher weight one,",
    "start": "1150150",
    "end": "1156010"
  },
  {
    "text": "so I'm just going to throw\naway the higher weight one. Take them in. So this is a particular form\nof edge contraction and graphs.",
    "start": "1156010",
    "end": "1166300"
  },
  {
    "text": "And I claim it's a good\nthing to do, in the sense that if I can find a\nminimum spanning tree",
    "start": "1166300",
    "end": "1172190"
  },
  {
    "text": "in this new graph--\nthis is usually called a G slash e, slash\ninstead of negative, to remove",
    "start": "1172190",
    "end": "1181190"
  },
  {
    "text": "e. I'm contracting e. So this is G slash e.",
    "start": "1181190",
    "end": "1186680"
  },
  {
    "text": "This is G. If I can find a\nminimum spanning tree in G",
    "start": "1186680",
    "end": "1192150"
  },
  {
    "text": "slash e, I claim I can find\none in the original graph G",
    "start": "1192150",
    "end": "1197570"
  },
  {
    "text": "just by adding the edge e. So I'm going to\nsay if G prime is",
    "start": "1197570",
    "end": "1208690"
  },
  {
    "text": "a minimum spanning\ntree, of G slash e,",
    "start": "1208690",
    "end": "1214350"
  },
  {
    "text": "then T prime union e is a\nminimum spanning tree of G.",
    "start": "1214350",
    "end": "1229630"
  },
  {
    "text": "So overall, you\ncan think of this as a recurrence in\na dynamic program, and let me write down\nthat dynamic program.",
    "start": "1229630",
    "end": "1236010"
  },
  {
    "text": " It won't be very\ngood dynamic program,",
    "start": "1236010",
    "end": "1241200"
  },
  {
    "text": "but it's a starting point. ",
    "start": "1241200",
    "end": "1252880"
  },
  {
    "text": "This is conceptually\nwhat we want to do. We're trying to guess\nan edge e that's",
    "start": "1252880",
    "end": "1260340"
  },
  {
    "text": "in a minimum spanning tree. Then we're going to\ncontract that edge.",
    "start": "1260340",
    "end": "1265600"
  },
  {
    "text": " Then we're going to recurse,\nfind the minimum spanning tree",
    "start": "1265600",
    "end": "1273720"
  },
  {
    "text": "on what remains, and then we\nfind the minimum spanning tree. Then we want to\ndecontract the edge,",
    "start": "1273720",
    "end": "1280750"
  },
  {
    "text": "put it back, put the\ngraph back the way it was. And then add e to the\nminimum spanning tree.",
    "start": "1280750",
    "end": "1287150"
  },
  {
    "text": " And what this lemma\ntells us, is that this",
    "start": "1287150",
    "end": "1295216"
  },
  {
    "text": "is a correct algorithm.  If you're lucky-- and we're\ngoing to force luckiness",
    "start": "1295217",
    "end": "1301990"
  },
  {
    "text": "by trying all edges-- but if\nwe start with an edge that is guaranteed to be in some\nminimum spanning tree, call it",
    "start": "1301990",
    "end": "1308140"
  },
  {
    "text": "a safe edge, and\nwe contract, and we find a minimum spanning\ntree on what remains,",
    "start": "1308140",
    "end": "1313710"
  },
  {
    "text": "then we can put e\nback in at the end, and we'll get a minimum spanning\ntree of the original graph.",
    "start": "1313710",
    "end": "1320230"
  },
  {
    "text": "So this gives us correctness\nof this algorithm. Now, this algorithm's\nbad, again,",
    "start": "1320230",
    "end": "1326380"
  },
  {
    "text": "from a complexity standpoint. The running time is\ngoing to be exponential. The number of sub problems we\nmight have to consider here",
    "start": "1326380",
    "end": "1333540"
  },
  {
    "text": "is all subsets of edges. There's no particular way--\nbecause at every step,",
    "start": "1333540",
    "end": "1338940"
  },
  {
    "text": "we're guessing an arbitrary\nedge in the graph, there's no structure. Like, we can't say well,\nit's the first k edges,",
    "start": "1338940",
    "end": "1345860"
  },
  {
    "text": "or some substring of edges. It's just going to be\nsome subset of edges. There's exponentially\nmany subsets, 2 to the e,",
    "start": "1345860",
    "end": "1353080"
  },
  {
    "text": "so this is exponential. ",
    "start": "1353080",
    "end": "1359370"
  },
  {
    "text": "But we're going to\nmake a polynomial by removing the guessing.",
    "start": "1359370",
    "end": "1364794"
  },
  {
    "text": "This is actually a\nreally good prototype for a greedy algorithm. If instead of guessing,\ntrying all edges,",
    "start": "1364794",
    "end": "1370400"
  },
  {
    "text": "if we could find a\ngood edge to choose that's guaranteed to be in\na minimum spanning tree,",
    "start": "1370400",
    "end": "1375870"
  },
  {
    "text": "then we could actually\nfollow this procedure, and this would be like\nan iterative algorithm.",
    "start": "1375870",
    "end": "1381750"
  },
  {
    "text": "If you-- you don't\nguess-- you correctly choose a good-- you\ntake the biggest cookie,",
    "start": "1381750",
    "end": "1388090"
  },
  {
    "text": "you contract it, and then\nyou repeat that process over and over, that\nwould be a prototype for a greedy algorithm and\nthat's what's going to work.",
    "start": "1388090",
    "end": "1394760"
  },
  {
    "text": "There's different ways to\nchoose this greedy edge, and we're going to get\ntwo different algorithms accordingly. But that's where we're going.",
    "start": "1394760",
    "end": "1400440"
  },
  {
    "text": "First, I should prove\nthis claim, cause, you know, where did edge\ncontraction come from? Why does it work?",
    "start": "1400440",
    "end": "1405820"
  },
  {
    "text": " It's not too hard to prove.",
    "start": "1405820",
    "end": "1411970"
  },
  {
    "text": "Let's do it. ",
    "start": "1411970",
    "end": "1426000"
  },
  {
    "text": "Question? Oh. All right. I should be able to do\nthis without looking.",
    "start": "1426000",
    "end": "1433670"
  },
  {
    "text": "So-- Proof of optimal substructure. So we're given a lot. We're told that e belongs\nto a minimize spanning tree.",
    "start": "1433670",
    "end": "1441200"
  },
  {
    "text": "Let's give that\nspanning tree a name. Say we have a minimum spanning\ntree T star, which contains e.",
    "start": "1441200",
    "end": "1450700"
  },
  {
    "text": "So we're assuming that\nexists, then we contract e. And then we're\ngiven T prime, which",
    "start": "1450700",
    "end": "1456600"
  },
  {
    "text": "is a minimum spanning\ntree of G slash e. And then we want to\nanalyze this thing.",
    "start": "1456600",
    "end": "1462250"
  },
  {
    "text": "So I want to claim\nthat this thing is a minimum spanning\ntree, in other words, that the weight of\nthat spanning tree",
    "start": "1462250",
    "end": "1469360"
  },
  {
    "text": "is equal to the weight\nof this spanning tree, because this one is minimum.",
    "start": "1469360",
    "end": "1474600"
  },
  {
    "text": "This is a minimum spanning\nof G. And this is also supposed to be a minimum\nspanning tree of G.",
    "start": "1474600",
    "end": "1484679"
  },
  {
    "text": "OK. Sounds easy, right?",
    "start": "1484680",
    "end": "1489919"
  },
  {
    "text": "I'm going to cheat, sorry. ",
    "start": "1489920",
    "end": "1500330"
  },
  {
    "text": "I see. Right. Duh. Easy, once you know how. So what we're going to do is\nthink about contracting e.",
    "start": "1500330",
    "end": "1509744"
  },
  {
    "text": "OK, we already\nknow we're supposed to be thinking about\ncontracting e in the graph. Let's look at how it changes\nthat given minimum spanning",
    "start": "1509744",
    "end": "1516880"
  },
  {
    "text": "tree. So we have T star,\nminimum spanning tree of the whole graph, and\nthen I'm going to contract e.",
    "start": "1516880",
    "end": "1525900"
  },
  {
    "text": "What I mean is, if\nthat edge happens to be in the spanning\ntree-- it is, actually.",
    "start": "1525900",
    "end": "1531640"
  },
  {
    "text": "We assumed that e is in there. So I'm basically removing,\nI'm just deleting that edge,",
    "start": "1531640",
    "end": "1538090"
  },
  {
    "text": "maybe I should call it minus e. ",
    "start": "1538090",
    "end": "1543159"
  },
  {
    "text": "Then that should be a\nspanning tree of G slash e.",
    "start": "1543160",
    "end": "1553930"
  },
  {
    "text": "So when I contract\nthe edge in the graph, if I throw away the edge\nfrom this spanning tree,",
    "start": "1553930",
    "end": "1559440"
  },
  {
    "text": "I should still have\na spanning tree, and I don't know\nwhether it's minimum. Probably, it is, but we\nwon't prove that right now.",
    "start": "1559440",
    "end": "1566080"
  },
  {
    "text": " I claim it's still\na spanning tree.",
    "start": "1566080",
    "end": "1571105"
  },
  {
    "text": "What would that take? It still hits all the vertices,\nbecause if I removed the edge,",
    "start": "1571105",
    "end": "1577720"
  },
  {
    "text": "things would not be\nconnected together. But this edge was in\nthe spanning tree,",
    "start": "1577720",
    "end": "1583780"
  },
  {
    "text": "and then I fused those\ntwo vertices together, so whatever spanning-- I\nmean, whatever was connected",
    "start": "1583780",
    "end": "1589390"
  },
  {
    "text": "before is still connected. Contraction generally\npreserves connectivity. If these things were already\nconnected directly by an edge",
    "start": "1589390",
    "end": "1596410"
  },
  {
    "text": "when I contract, I still\nhave a connected structure, so I'm still hitting\nall the vertices.",
    "start": "1596410",
    "end": "1602000"
  },
  {
    "text": "And also, the number of\nedges is still exactly right. Before, I had n minus 1 edges.",
    "start": "1602000",
    "end": "1607517"
  },
  {
    "text": "Afterwards, I'll still\nhave n minus 1 edges, because I removed one edge\nand I removed one vertex, in terms of the count.",
    "start": "1607517",
    "end": "1612990"
  },
  {
    "text": "So that proves that it's\nstill a spanning tree, using properties of trees. ",
    "start": "1612990",
    "end": "1620330"
  },
  {
    "text": "Cool. So that means the minimum\nspanning tree, this thing,",
    "start": "1620330",
    "end": "1627390"
  },
  {
    "text": "T prime, the minimum\nspanning tree of G slash e, has a smaller weight\nthan this one.",
    "start": "1627390",
    "end": "1633076"
  },
  {
    "text": "Because this is a\nspanning tree, the minimum is smaller than\nall spanning trees. So we know the\nweight of T prime is",
    "start": "1633077",
    "end": "1639600"
  },
  {
    "text": "less than or equal to the\nweight of T star minus e.",
    "start": "1639600",
    "end": "1645350"
  },
  {
    "text": " Cool.",
    "start": "1645350",
    "end": "1651340"
  },
  {
    "text": "And now we want to know about\nthis thing, the weight of T",
    "start": "1651340",
    "end": "1657309"
  },
  {
    "text": "prime plus e. Well, that's just the weight of\nT prime plus the weight of e,",
    "start": "1657310",
    "end": "1666650"
  },
  {
    "text": "because the weight\nof a tree is just the sum of the\nweights of the edges. So this is less\nthan or equal to w",
    "start": "1666650",
    "end": "1673293"
  },
  {
    "text": "of T star minus e plus e, which\nis just the weight of T star.",
    "start": "1673293",
    "end": "1682130"
  },
  {
    "text": " So we proved that the weight\nof our proposed spanning tree",
    "start": "1682130",
    "end": "1688640"
  },
  {
    "text": "is less than or equal to\nthe weight of the minimum spanning tree in G, and\ntherefore, T prime union",
    "start": "1688640",
    "end": "1695179"
  },
  {
    "text": "e actually is a\nminimum spanning tree. OK? This is really easy. ",
    "start": "1695180",
    "end": "1708527"
  },
  {
    "text": "It actually implies that\nall of these inequalities have to be\nequalities, because we started with something minimum. ",
    "start": "1708527",
    "end": "1715810"
  },
  {
    "text": "Clear? That's the easier half. The More interesting property is\ngoing to be this greedy choice",
    "start": "1715810",
    "end": "1721218"
  },
  {
    "text": "property. This is sort of where the\naction is for greedy algorithms, and this is usually\nthe heart of proving",
    "start": "1721218",
    "end": "1727020"
  },
  {
    "text": "greedy algorithms are correct. We don't yet have\na greedy algorithm, but we're thinking about it. We need some way to\nintelligently choose an edge e,",
    "start": "1727020",
    "end": "1736540"
  },
  {
    "text": "and I'm going to give\nyou a whole bunch of ways to intelligently\nchoose an edge e. ",
    "start": "1736540",
    "end": "1781130"
  },
  {
    "text": "So here's a really\npowerful lemma, and we're going to make it\neven stronger in a moment. ",
    "start": "1781130",
    "end": "1801100"
  },
  {
    "text": "So I'm going to introduce\nthe notion of a cut, that's going to be a similar\npicture to what I had before.",
    "start": "1801100",
    "end": "1807899"
  },
  {
    "text": "I'm going to look at\nsome set of vertices. S here is a subset\nof the vertices,",
    "start": "1807900",
    "end": "1814080"
  },
  {
    "text": "and that leaves in the\ngraph, everything else. This would be V minus\nS. OK, so there's",
    "start": "1814080",
    "end": "1821640"
  },
  {
    "text": "some vertices over here,\nsome vertices over here, there's some edges\nthat are purely",
    "start": "1821640",
    "end": "1827390"
  },
  {
    "text": "inside one side of the cut. And then what I'm\ninterested in are the edges that cross the cut.",
    "start": "1827390",
    "end": "1833960"
  },
  {
    "text": " OK, whatever they look\nlike, these edges.",
    "start": "1833960",
    "end": "1840430"
  },
  {
    "text": "If an edge has one vertex in\nV and one vertex not in V, I call that edge\na crossing edge.",
    "start": "1840430",
    "end": "1846500"
  },
  {
    "start": "1846500",
    "end": "1851680"
  },
  {
    "text": "OK, so let's suppose that e is\na least-weight edge crossing",
    "start": "1851680",
    "end": "1869160"
  },
  {
    "text": "the cut. ",
    "start": "1869160",
    "end": "1875160"
  },
  {
    "text": "So let's say, let me be\nspecific, if e is uv,",
    "start": "1875160",
    "end": "1884120"
  },
  {
    "text": "then I want one of the\nendpoints, let's u, to be in S, and I want the other\none to be not in S,",
    "start": "1884120",
    "end": "1891400"
  },
  {
    "text": "so it's in capital\nV minus S. And that would be a crossing edge, and\namong all the crossing edges,",
    "start": "1891400",
    "end": "1897810"
  },
  {
    "text": "I want to take one\nof minimum weight. There might be many,\nbut pick any one.",
    "start": "1897810",
    "end": "1906140"
  },
  {
    "text": "Then I claim that edge is\nin a minimum spanning tree. ",
    "start": "1906140",
    "end": "1920029"
  },
  {
    "text": "This is our golden\nticket, right? If we can guarantee an edge is\nin the minimum spanning tree,",
    "start": "1920030",
    "end": "1925590"
  },
  {
    "text": "then we plug that in here. Instead of guessing, we'll\njust take that edge-- we know it's in a\nminimum spanning tree--",
    "start": "1925590",
    "end": "1932370"
  },
  {
    "text": "and then we'll contract it\nand repeat this process. So the tricky part-- I mean, it\nis true that the minimum weight",
    "start": "1932370",
    "end": "1939310"
  },
  {
    "text": "edge is in a minimum spanning\ntree, I'll give that away. But the question is,\nwhat you do then?",
    "start": "1939310",
    "end": "1945335"
  },
  {
    "text": " And I guess you\ncontract and repeat but, that will be\nKruskal's algorithm.",
    "start": "1945335",
    "end": "1952639"
  },
  {
    "text": "But this is, in some\nsense, a more general tool that will let us identify\nedges that are guaranteed",
    "start": "1952640",
    "end": "1958940"
  },
  {
    "text": "to be in the minimum\nspanning tree, even after we've already\nidentified some edges as being in the minimum spanning tree,\nso it's a little more powerful.",
    "start": "1958940",
    "end": "1966820"
  },
  {
    "text": "Let's prove this claim. This is where things\nget particularly cool.",
    "start": "1966820",
    "end": "1973750"
  },
  {
    "start": "1973750",
    "end": "1989714"
  },
  {
    "text": "And this is where we're\ngoing to use something called a c and paste argument. ",
    "start": "1989714",
    "end": "1999200"
  },
  {
    "text": "And if you are ever\ntrying to prove a greedy algorithm\ncorrect, the first thing that should come to your\nmind is cut and paste.",
    "start": "1999200",
    "end": "2005895"
  },
  {
    "text": "This is almost universally how\nyou prove greedy algorithms to be correct, which is, suppose\nyou have some optimal solution",
    "start": "2005895",
    "end": "2014529"
  },
  {
    "text": "which doesn't have\nthe property you want, like that it includes e here. And then you modify it,\nusually by cutting out",
    "start": "2014530",
    "end": "2021330"
  },
  {
    "text": "one part of the solution and\npasting in a different part, like e, and prove that you\nstill have an optimal solution,",
    "start": "2021330",
    "end": "2028179"
  },
  {
    "text": "and therefore, there\nis an optimal solution. There is an MST that has\nthe property you want.",
    "start": "2028180",
    "end": "2036149"
  },
  {
    "text": "OK, so we're going to do that\nby starting from an arbitrary minimum spanning tree.",
    "start": "2036150",
    "end": "2042130"
  },
  {
    "text": "So let T star be a minimum\nspanning tree of G,",
    "start": "2042130",
    "end": "2050330"
  },
  {
    "text": "and if the edge e is\nin there, we're done. So presumably, e is not in\nthat minimum spanning tree.",
    "start": "2050330",
    "end": "2057770"
  },
  {
    "text": " We're going to modify\nT star to include e.",
    "start": "2057770",
    "end": "2064388"
  },
  {
    "text": "So again, let me draw the cut.  There's S and V minus\nS. We have some edge e",
    "start": "2064389",
    "end": "2072770"
  },
  {
    "text": "which crosses the\ncut, goes from u to v, that's not in the\nminimum spanning tree.",
    "start": "2072770",
    "end": "2079300"
  },
  {
    "text": "Let's say in blue, I draw\nthe minimum spanning tree.",
    "start": "2079300",
    "end": "2084350"
  },
  {
    "text": "So you know, the\nminimum spanning tree connects everything\ntogether here. ",
    "start": "2084350",
    "end": "2091750"
  },
  {
    "text": "I claim it's got to have some\nedges that cross the cut,",
    "start": "2091750",
    "end": "2096773"
  },
  {
    "text": "because if it has no\nedges that cross the cut, it doesn't connect vertices over\nhere with vertices over here.",
    "start": "2096774",
    "end": "2102030"
  },
  {
    "text": "So it may not use e, but some\nof the edges must cross the cut. So here's a possible\nminimum spanning tree.",
    "start": "2102030",
    "end": "2113289"
  },
  {
    "text": "It happens to have sort of\ntwo components over here in S, maybe. Who knows?",
    "start": "2113290",
    "end": "2119420"
  },
  {
    "text": "But there's got to be at least\none edge the crosses over. In fact, the minimum\nspanning tree, T star,",
    "start": "2119420",
    "end": "2131760"
  },
  {
    "text": "has to connect vertex\nu to vertex v, somehow.",
    "start": "2131760",
    "end": "2137890"
  },
  {
    "text": "It doesn't use e, but there's\ngot to be-- it's a tree, so in fact, there has to\nbe a unique path from u",
    "start": "2137890",
    "end": "2143609"
  },
  {
    "text": "to v in the minimum\nspanning tree.",
    "start": "2143610",
    "end": "2150710"
  },
  {
    "text": "And now u is in S, v is not in\nS. So if you look at that path, for a while, you\nmight stay in S,",
    "start": "2150710",
    "end": "2156630"
  },
  {
    "text": "but eventually you\nhave to leave S, which means there has to be an\nedge like this one, which",
    "start": "2156630",
    "end": "2163650"
  },
  {
    "text": "I'll call it e prime,\nwhich transitions from S to V minus S.",
    "start": "2163650",
    "end": "2171000"
  },
  {
    "text": "So there must be an edge e prime\nin the minimum spanning tree",
    "start": "2171000",
    "end": "2180950"
  },
  {
    "text": "that crosses the cut, because\nu and v are connected by a path",
    "start": "2180950",
    "end": "2190000"
  },
  {
    "text": "and that path starts in S,\nends not in S, so it's got to transition at least once. It might transition many\ntimes, but there has",
    "start": "2190000",
    "end": "2196569"
  },
  {
    "text": "to be at least one such edge. And now what I'm going\nto do is cut and paste.",
    "start": "2196570",
    "end": "2202420"
  },
  {
    "text": "I'm going to remove e\nprime and add an e instead. So I'm going to look at T\nstar minus e prime plus e.",
    "start": "2202420",
    "end": "2215984"
  },
  {
    "text": " I claim that is a\nminimum spanning tree.",
    "start": "2215985",
    "end": "2222440"
  },
  {
    "text": "First I want to claim, this is\nmaybe the more annoying part, that it is a spanning tree. ",
    "start": "2222440",
    "end": "2236589"
  },
  {
    "text": "This is more of a\ngraph theory thing. I guess one comforting\nthing is that you've",
    "start": "2236590",
    "end": "2242930"
  },
  {
    "text": "preserved the number of\nedges, so it should still be if you get one\nproperty, you get",
    "start": "2242930",
    "end": "2249090"
  },
  {
    "text": "the other, because I remove\none edge, add in one edge, I'm still going to\nhave n minus 1 edges.",
    "start": "2249090",
    "end": "2254960"
  },
  {
    "text": "The worry, I guess, is that\nthings become disconnected when you do that, but\nthat's essentially not",
    "start": "2254960",
    "end": "2261490"
  },
  {
    "text": "going to happen\nbecause if I think of removing e prime, again, that\ndisconnects the tree into two",
    "start": "2261490",
    "end": "2266680"
  },
  {
    "text": "parts. And I know, by this path, that\none part contains this vertex,",
    "start": "2266680",
    "end": "2273860"
  },
  {
    "text": "another part\ncontains this vertex, and I know that this\nvertex is connected to u and this vertex is connected\nto v. Maybe I should",
    "start": "2273860",
    "end": "2280380"
  },
  {
    "text": "call this u prime and v prime. I know u and u prime\nare connected by a path.",
    "start": "2280380",
    "end": "2286030"
  },
  {
    "text": "I know v and v prime\nare connected by a path. But I know that by\ndeleting e prime, u prime and v prime are not\nconnected to each other.",
    "start": "2286030",
    "end": "2292900"
  },
  {
    "text": "Therefore, u and v are not\nconnected to each other, after removing e prime. So when I add in e, I newly\nconnect u and v again,",
    "start": "2292900",
    "end": "2300750"
  },
  {
    "text": "and so everything's\nconnected back together. I have exactly the\nright number of edges.",
    "start": "2300750",
    "end": "2306090"
  },
  {
    "text": "Therefore, I'm a spanning tree.  So that's the graph\nthree theory part.",
    "start": "2306090",
    "end": "2311910"
  },
  {
    "text": "Now the interesting part\nfrom a greedy algorithm is to prove to this is minimum,\nthat the weight is not too big.",
    "start": "2311910",
    "end": "2319839"
  },
  {
    "text": "So let's do that over here. ",
    "start": "2319840",
    "end": "2330500"
  },
  {
    "text": "So I have the weight of T\nstar minus e plus-- minus e",
    "start": "2330500",
    "end": "2342430"
  },
  {
    "text": "prime plus e. By linearity, this\nis just the weight of T star minus the weight e\nprime plus the weight of e.",
    "start": "2342430",
    "end": "2353170"
  },
  {
    "text": " And now we're going\nto use this property,",
    "start": "2353170",
    "end": "2358200"
  },
  {
    "text": "we haven't that yet, e is a\nleast-weight edge crossing the cut. So e prime crosses\nthe cut, so does e,",
    "start": "2358200",
    "end": "2366295"
  },
  {
    "text": "but e is the smallest\npossible weight you could have crossing the cut. That means that-- I'll put that\nover here-- the weight of e",
    "start": "2366295",
    "end": "2374880"
  },
  {
    "text": "is less than or equal\nto the weight of e prime, because e prime is\na particular edge crossing",
    "start": "2374880",
    "end": "2380960"
  },
  {
    "text": "the cut, e was the\nsmallest weight of them. So that tells us\nsomething about this.",
    "start": "2380960",
    "end": "2387610"
  },
  {
    "text": "Signs are so difficult.\nI think that means that this is negative or zero.",
    "start": "2387610",
    "end": "2393720"
  },
  {
    "text": " So this should be less than\nor equal to w of T star,",
    "start": "2393720",
    "end": "2402630"
  },
  {
    "text": "and that's what I\nwant, because that says the weight of this\nspanning tree is less than or equal to the optimum\nweight, the minimum weight.",
    "start": "2402630",
    "end": "2409424"
  },
  {
    "text": "So that means, actually,\nthis must be minimum. ",
    "start": "2409424",
    "end": "2414960"
  },
  {
    "text": "So what I've done is I've\nconstructed a new minimum spanning tree. It's just as good as T star,\nbut now it includes my edge e,",
    "start": "2414960",
    "end": "2422554"
  },
  {
    "text": "and that's what I\nwanted to prove. There is a minimum\nspanning tree that contains e, provided e\nis the minimum weight",
    "start": "2422554",
    "end": "2428987"
  },
  {
    "text": "edge crossing a cut.  So that proves this\ngreedy choice property.",
    "start": "2428987",
    "end": "2437900"
  },
  {
    "text": "And I'm going to observe one\nextra feature of this proof,",
    "start": "2437900",
    "end": "2443680"
  },
  {
    "text": "which is that-- so\nwe cut and paste, in the sense that we removed\none thing, which was e prime,",
    "start": "2443680",
    "end": "2450060"
  },
  {
    "text": "and we added a\ndifferent thing, e. And a useful feature is that\nthe things that we change only",
    "start": "2450060",
    "end": "2460420"
  },
  {
    "text": "are edges that cross the cut. So we only, let's say, modified\nedges that cross the cut.",
    "start": "2460420",
    "end": "2471870"
  },
  {
    "start": "2471870",
    "end": "2482860"
  },
  {
    "text": "I'm going to use that later. We removed one edge that crossed\nthe cut, and we put in the one that we wanted.",
    "start": "2482860",
    "end": "2489547"
  },
  {
    "text": "OK so far? There's a bunch of lemmas.",
    "start": "2489548",
    "end": "2494692"
  },
  {
    "text": "Now we actually get to do\nalgorithms using these lemmas. ",
    "start": "2494692",
    "end": "2499930"
  },
  {
    "text": "We'll start with maybe the\nless obvious algorithm, but it's nice because it's\nvery much like Dijkstra.",
    "start": "2499930",
    "end": "2507480"
  },
  {
    "text": "It follows very closely\nto the Dijkstra model. And then we'll get to\nthe one that we've all",
    "start": "2507480",
    "end": "2513021"
  },
  {
    "text": "been thinking about, which\nwas choose a minimum weight edge, contract, and repeat. That doesn't-- well, that does\nwork, but the obvious way is,",
    "start": "2513021",
    "end": "2523790"
  },
  {
    "text": "maybe, slow. We want to do it in\nnear linear time. ",
    "start": "2523790",
    "end": "2540075"
  },
  {
    "text": "Let's start with the\nDijkstra-like algorithm. ",
    "start": "2540075",
    "end": "2546130"
  },
  {
    "text": "This is Prim's algorithm. ",
    "start": "2546130",
    "end": "2556410"
  },
  {
    "text": "Maybe I'll start by\nwriting down the algorithm. It's a little long. ",
    "start": "2556410",
    "end": "2563080"
  },
  {
    "text": "In general, the idea-- we want\nto apply this greedy choice property. To apply the greedy\nchoice property,",
    "start": "2563080",
    "end": "2568710"
  },
  {
    "text": "you need to choose a cut. With Prim, we're going to start\nout with an obvious cut, which",
    "start": "2568710",
    "end": "2574800"
  },
  {
    "text": "is a single vertex. If we have a single\nvertex S, and we say that is our set\ncapital S, then you know,",
    "start": "2574800",
    "end": "2582976"
  },
  {
    "text": "there's some images\ncoming out of it. There's basically S\nversus everyone else.",
    "start": "2582976",
    "end": "2588900"
  },
  {
    "text": "That's a cut. And so I could take\nthe minimum weight edge coming out of that\ncut and put that",
    "start": "2588900",
    "end": "2595280"
  },
  {
    "text": "in my minimum spanning tree. So when I do that, I put it\nin my minimum spanning tree",
    "start": "2595280",
    "end": "2602420"
  },
  {
    "text": "because I know it's in\nsome minimum spanning tree. Now, I'm going to make capital\nS grow a little bit to include",
    "start": "2602420",
    "end": "2608890"
  },
  {
    "text": "that vertex, and repeat. That's actually also a\nvery natural algorithm.",
    "start": "2608890",
    "end": "2614310"
  },
  {
    "text": "Start with a tiny s and just\nkeep growing it one by one. At each stage use this lemma to\nguarantee the edge I'm adding",
    "start": "2614310",
    "end": "2621660"
  },
  {
    "text": "is still in the\nminimum spanning tree. So to make that work\nout, we're always",
    "start": "2621660",
    "end": "2628640"
  },
  {
    "text": "going to need to choose the\nminimum weight edge that's coming out of the cut.",
    "start": "2628640",
    "end": "2636549"
  },
  {
    "text": "And we'll do that\nusing a priority queue,",
    "start": "2636550",
    "end": "2641690"
  },
  {
    "text": "just like we do in Dijkstra. ",
    "start": "2641690",
    "end": "2647819"
  },
  {
    "text": "So for every vertex\nthat's in V minus S, we're going to have that\nvertex in the priority queue.",
    "start": "2647820",
    "end": "2655380"
  },
  {
    "text": "And the question is, what is\nthe key value of that node",
    "start": "2655380",
    "end": "2661869"
  },
  {
    "text": "stored in the priority queue? So the invariant I'm going\nto have is that the key of v",
    "start": "2661870",
    "end": "2669760"
  },
  {
    "text": "is the minimum of the\nweights of the edges",
    "start": "2669760",
    "end": "2676070"
  },
  {
    "text": "that cross the cut into\nv. So for vertex v,",
    "start": "2676070",
    "end": "2681600"
  },
  {
    "text": "I want to look at\nthe-- I'm not going to compute this every time,\nI'm only going to maintain it. I want the minimum weight\nof an edge that starts in S",
    "start": "2681600",
    "end": "2689885"
  },
  {
    "text": "and goes to v, which is not in\nS because v in Q-- Q only stores vertices that are not in\nS-- I want the key value",
    "start": "2689885",
    "end": "2698740"
  },
  {
    "text": "to be that minimum\nweight so if I choose the overall minimum\nvertex, that gives me",
    "start": "2698740",
    "end": "2703790"
  },
  {
    "text": "the edge of minimum weight\nthat crosses the cut. OK? I've sort of divided this\nminimum vertex by vertex.",
    "start": "2703790",
    "end": "2712610"
  },
  {
    "text": "For every vertex\nover here, I'm going to say, what's the minimum\nincoming weight from somebody",
    "start": "2712610",
    "end": "2718740"
  },
  {
    "text": "over here? What's the minimum\nincoming weight from someone over here to there? To here?",
    "start": "2718740",
    "end": "2724716"
  },
  {
    "text": "Take the minimum\nof those things. And of course, the\nmin of all those will be the min of\nall those edges. OK, that's how I'm\ndividing things up.",
    "start": "2724716",
    "end": "2732450"
  },
  {
    "text": "And this will be easier\nto maintain, but let me first initialize everything. ",
    "start": "2732450",
    "end": "2746484"
  },
  {
    "text": "OK, I guess we're going\nto actually initialize with S being the empty set,\nso Q will store everybody,",
    "start": "2746484",
    "end": "2754579"
  },
  {
    "text": "except I'm going to get\nthings started by setting",
    "start": "2754580",
    "end": "2759790"
  },
  {
    "text": "for particular vertex little s. I'm going to set\nits key to zero. ",
    "start": "2759790",
    "end": "2767310"
  },
  {
    "text": "It doesn't matter\nwho little s is. That's just your start vertex.",
    "start": "2767310",
    "end": "2772490"
  },
  {
    "text": " Just pick one vertex\nand set its key to zero.",
    "start": "2772490",
    "end": "2779750"
  },
  {
    "text": "That will force it\nto be chosen first because for everyone else,\nfor v not equal to S,",
    "start": "2779750",
    "end": "2792180"
  },
  {
    "text": "I'm going to set\nthe key to infinity, because we haven't yet seen\nany edges that go in there,",
    "start": "2792180",
    "end": "2800304"
  },
  {
    "text": "but we'll change\nthat in a moment. ",
    "start": "2800304",
    "end": "2816930"
  },
  {
    "text": "OK, so that was the\ninitialization, now we're going to do a loop.",
    "start": "2816930",
    "end": "2823020"
  },
  {
    "text": "We're going to keep going\nuntil the Q is empty, because when the Q is empty,\nthat means S is everybody,",
    "start": "2823020",
    "end": "2830550"
  },
  {
    "text": "and at that point, we'll\nhave a spanning tree on the whole graph, and\nit better be minimum.",
    "start": "2830550",
    "end": "2836005"
  },
  {
    "text": "OK, and we're going to\ndo that by extracting",
    "start": "2836005",
    "end": "2841210"
  },
  {
    "text": "the minimum from\nour priority Q. When",
    "start": "2841210",
    "end": "2849520"
  },
  {
    "text": "we remove Q-- we remove\nvertex u from the queue Q,",
    "start": "2849520",
    "end": "2861390"
  },
  {
    "text": "this means that we're\nadding u to S. OK, by taking it out of Q,\nthat means it enters S,",
    "start": "2861390",
    "end": "2868030"
  },
  {
    "text": "by the invariant at the top. So now we need to\nupdate this invariant,",
    "start": "2868030",
    "end": "2875585"
  },
  {
    "text": "that all the key\nvalues are correct. As soon as we move\na vertex into S, now there are new edges we have\nto consider from S to not S,",
    "start": "2875585",
    "end": "2885490"
  },
  {
    "text": "and we do that just by looking\nat all of the neighbors of u.",
    "start": "2885490",
    "end": "2892840"
  },
  {
    "text": "I haven't written\nthis in a long time, but this is how it's\nusually written in Dijkstra, except in Dijkstra, these\nare the outgoing edges from u",
    "start": "2892840",
    "end": "2900560"
  },
  {
    "text": "and v are the neighbors. Here, it's an undirected\ngraph, so these are all of the neighbors v of u.",
    "start": "2900560",
    "end": "2905579"
  },
  {
    "text": "This as an adjacency list. OK, so we're looking at u,\nwhich has just been added to S,",
    "start": "2905580",
    "end": "2918038"
  },
  {
    "text": "and we're looking at the edges. We want to look at the edge\nas they go to V minus S, only those ones.",
    "start": "2918039",
    "end": "2924040"
  },
  {
    "text": "And then for those vertices v,\nwe need to update their keys, because it used to just\ncount all of these edges that",
    "start": "2924040",
    "end": "2932049"
  },
  {
    "text": "went from the rest of S to\nv. And now we have a new edge uv that v needs to consider,\nbecause u just got added to S.",
    "start": "2932050",
    "end": "2941240"
  },
  {
    "text": "So the first thing I'm\ngoing say is if v in in Q. So we're just going to store\na Boolean for every vertex",
    "start": "2941240",
    "end": "2949020"
  },
  {
    "text": "about whether it's\nin the queue, and so when I extract it\nfrom the queue, I just set that\nBoolean to false.",
    "start": "2949020",
    "end": "2954850"
  },
  {
    "text": "Being in the queue is the\nsame as being not in S, this is what Q represents.",
    "start": "2954850",
    "end": "2960286"
  },
  {
    "text": "So Q is over here, kind of. So if we're in the queue,\nsame as saying v is not in S,",
    "start": "2960286",
    "end": "2971560"
  },
  {
    "text": "then we're going\nto do a check which lets us compute the minimum. This is going to look a\nlot like a relaxation.",
    "start": "2971560",
    "end": "2977369"
  },
  {
    "start": "2977370",
    "end": "2984117"
  },
  {
    "text": "Sorry. ",
    "start": "2984117",
    "end": "3002119"
  },
  {
    "text": "A couple things\ngoing on because I want to compute\nnot just the value of the minimum spanning\ntree, I actually want to find the\nminimum spanning tree,",
    "start": "3002120",
    "end": "3008535"
  },
  {
    "text": "so I'm going to store\nparent pointers. But this is just\nbasically taking a min. I say, if the\nweight of this edge",
    "start": "3008535",
    "end": "3014967"
  },
  {
    "text": "is smaller than what's\ncurrently in the key, then update the key, because the\nkey is supposed to be the min.",
    "start": "3014967",
    "end": "3020410"
  },
  {
    "text": "OK, that's all we need to do to\nmaintain this invariant, this for loop. After the for loop, this\nproperty will be restored,",
    "start": "3020410",
    "end": "3027830"
  },
  {
    "text": "v dot key will be that minimum. And furthermore, we kept track\nof where the minimums came",
    "start": "3027830",
    "end": "3033370"
  },
  {
    "text": "from, so when you end\nup extracting a vertex, you've already figured\nout which edge you",
    "start": "3033370",
    "end": "3042810"
  },
  {
    "text": "added to put that into the set. So in fact, u\nalready had a parent,",
    "start": "3042810",
    "end": "3050140"
  },
  {
    "text": "this would be u\ndot parent, and we",
    "start": "3050140",
    "end": "3056809"
  },
  {
    "text": "want to add that edge into\nthe minimum spanning tree when we add u to S. Overall, let\nme write why this is happening.",
    "start": "3056810",
    "end": "3067950"
  },
  {
    "text": " At the end of the algorithm,\nfor every vertex v,",
    "start": "3067950",
    "end": "3075030"
  },
  {
    "text": "we want the v dot parent. ",
    "start": "3075030",
    "end": "3082710"
  },
  {
    "text": "And that will be our\nminimum spanning tree. Those are the edges that form\nthe minimum spanning tree. ",
    "start": "3082710",
    "end": "3093460"
  },
  {
    "text": "Let's prove that this works. ",
    "start": "3093460",
    "end": "3112995"
  },
  {
    "text": "Actually, let's do an example.  We've done enough\nproofs for a while.",
    "start": "3112995",
    "end": "3119994"
  },
  {
    "text": "Let's do it over here. ",
    "start": "3119995",
    "end": "3130349"
  },
  {
    "text": "I need a little break. Examples are fun, though easy\nto make mistakes, so correct me",
    "start": "3130350",
    "end": "3136420"
  },
  {
    "text": "if you see me making a mistake. And let me draw a graph.",
    "start": "3136420",
    "end": "3142035"
  },
  {
    "start": "3142035",
    "end": "3161173"
  },
  {
    "text": "OK, weights. 14, 3, 8, 5, 6, 12, 7, 9, 15.",
    "start": "3161174",
    "end": "3173890"
  },
  {
    "text": " 10. ",
    "start": "3173890",
    "end": "3181550"
  },
  {
    "text": "OK. Colors. So I want to start\nat this vertex",
    "start": "3181550",
    "end": "3189579"
  },
  {
    "text": "just because I know it\ndoes an interesting thing, or it's a nice example. Here's my weighted\nundirected graph.",
    "start": "3189580",
    "end": "3196360"
  },
  {
    "text": "I want to compute\nminimum spanning tree. I'm going to start\nwith a capital",
    "start": "3196360",
    "end": "3201950"
  },
  {
    "text": "S being-- well actually, I start\nwith capital S being nothing,",
    "start": "3201950",
    "end": "3207030"
  },
  {
    "text": "and all of the weights--\nall of the key values are initially infinity. So I'm going to write\nthe key values in blue.",
    "start": "3207030",
    "end": "3214520"
  },
  {
    "text": "So initially everything is\ninfinity for every vertex,",
    "start": "3214520",
    "end": "3225230"
  },
  {
    "text": "except for S the value is zero. ",
    "start": "3225230",
    "end": "3230720"
  },
  {
    "text": "So all of these things\nare in my priority queue, and so when I extract from the\nqueue, I of course get S. OK,",
    "start": "3230720",
    "end": "3238490"
  },
  {
    "text": "that's the point of that set up. So that's when I draw the red\ncircle containing little s.",
    "start": "3238490",
    "end": "3244640"
  },
  {
    "text": "The red circle here is\nsupposed to be capital S. So at this point, I've\nadded capital S-- little s",
    "start": "3244640",
    "end": "3252160"
  },
  {
    "text": "to capital S, and then I look\nat all of the neighbors v of S.",
    "start": "3252160",
    "end": "3259559"
  },
  {
    "text": "And I make sure that they are\noutside of S. In this case, they all are. All three neighbors, these\nthree guys, are not in S.",
    "start": "3259560",
    "end": "3267885"
  },
  {
    "text": "And then I look at the\nweights of the edges. Here I have a weight 7 edge. That's smaller than\ninfinity, so I'm",
    "start": "3267885",
    "end": "3273990"
  },
  {
    "text": "going to cross out\ninfinity and write 7. And 15 is smaller\nthan infinity, so I'm",
    "start": "3273990",
    "end": "3279430"
  },
  {
    "text": "going to cross out\ninfinity and write 15. And 10, surprise, is\nsmaller than infinity.",
    "start": "3279430",
    "end": "3285139"
  },
  {
    "text": "So I'm going to cross\nout infinity rate 10. So now I've updated the key\nvalues for those three nodes.",
    "start": "3285139",
    "end": "3291069"
  },
  {
    "text": "I should mention in\nthe priority queue, to do that, that is a\ndecrease-key operation.",
    "start": "3291070",
    "end": "3298210"
  },
  {
    "text": "This thing here\nis a decrease-key. You need to update the\npriority queue to say,",
    "start": "3298210",
    "end": "3303320"
  },
  {
    "text": "hey look, the key of\nthis node changed. And so you're going to have\nto move it around in the heap,",
    "start": "3303320",
    "end": "3309920"
  },
  {
    "text": "or whatever. Just like Dijkstra,\nsame thing happens. OK, so I've decreased the\nkey of those three nodes.",
    "start": "3309920",
    "end": "3316860"
  },
  {
    "text": "Now I do another iteration. I look at all of the\nkey values stored. The smallest one is 7, because\nthis node's no longer in there.",
    "start": "3316860",
    "end": "3327200"
  },
  {
    "text": "So I'm going to add\nthis node to capital S. So capital S is going to\ngrow to include that node.",
    "start": "3327200",
    "end": "3334920"
  },
  {
    "text": "I've extracted it\nfrom the queue. And now I look at all the\nneighbors of that node. So, for example,\nhere's a neighbor.",
    "start": "3334920",
    "end": "3342520"
  },
  {
    "text": "9 is less than\ninfinity, so I write 9. Here's a neighbor.",
    "start": "3342520",
    "end": "3347630"
  },
  {
    "text": "12 is less than\ninfinity, so I write 12. 5 is less than\ninfinity, so I write 5.",
    "start": "3347630",
    "end": "3353809"
  },
  {
    "text": "Here's a neighbor,\nbut s is in big S, so we're not going\nto touch that edge.",
    "start": "3353810",
    "end": "3359210"
  },
  {
    "text": "I'm not going to touch s. OK? I will end up looking at every\nedge twice, so no big deal.",
    "start": "3359210",
    "end": "3366070"
  },
  {
    "text": "Right now, who's smallest? 5, I think. It's the smallest blue key.",
    "start": "3366070",
    "end": "3372440"
  },
  {
    "text": "So we're going to\nadd 5 to the set. ",
    "start": "3372440",
    "end": "3377730"
  },
  {
    "text": "Sorry, add this\nvertex to the set S, and then look at all of the\noutgoing edges from here.",
    "start": "3377730",
    "end": "3384369"
  },
  {
    "text": "So 6 is actually less\nthan 12, so this edge is better than that one was.",
    "start": "3384370",
    "end": "3391200"
  },
  {
    "text": "Then, what's that, an 8? 8 Is less than 10. ",
    "start": "3391200",
    "end": "3397820"
  },
  {
    "text": "14 is definitely\nless than infinity. And we look at this\nedge, but that edge",
    "start": "3397820",
    "end": "3403020"
  },
  {
    "text": "stays inside the red set,\nso we forget about it. Next smallest value is 6.",
    "start": "3403020",
    "end": "3410280"
  },
  {
    "text": "So 6, we add this guy in.",
    "start": "3410280",
    "end": "3419240"
  },
  {
    "text": "We look at the edges\nfrom that vertex, but actually nothing happens\nbecause all those vertices are inside capital S, so we\ndon't care about those edges.",
    "start": "3419240",
    "end": "3428700"
  },
  {
    "text": "Next one is 8, so we'll\nadd in this vertex.",
    "start": "3428700",
    "end": "3440349"
  },
  {
    "text": "And there's only one edge that\nleaves the cut, so that's 3, and 3 is indeed better than 14.",
    "start": "3440350",
    "end": "3447074"
  },
  {
    "text": "So never mind. Stop.",
    "start": "3447074",
    "end": "3454470"
  },
  {
    "text": "So good, now I think\nthe smallest key is 3. Notice smallest key is\nsmaller than anything",
    "start": "3454470",
    "end": "3460590"
  },
  {
    "text": "we've seen before, other\nthan 0, but that's OK. I'll just add it in,\nand there's no edges",
    "start": "3460590",
    "end": "3467260"
  },
  {
    "text": "leaving the cut from there. And then over here,\nwe have 9 and 15. So first we'll add 9.",
    "start": "3467260",
    "end": "3473319"
  },
  {
    "text": "There's no edges there. Then we add 15. OK, now s is everything. We're done. Q is empty.",
    "start": "3473320",
    "end": "3478544"
  },
  {
    "text": "Where's the minimal\nspanning tree? I forgot to draw it. Luckily, all of the edges\nhere have different numbers",
    "start": "3478544",
    "end": "3486200"
  },
  {
    "text": "as labels. So when I have a 3\nhere, what I mean is, include 3 in the\nminimum spanning tree,",
    "start": "3486200",
    "end": "3491970"
  },
  {
    "text": "the edge that was labeled 3. OK, so this will be a\nminimum spanning tree edge. 5 will be a minimum\nspanning tree edge.",
    "start": "3491970",
    "end": "3499559"
  },
  {
    "text": "These are actually\nthe parent pointers. 6 will be a minimum\nspanning tree edge. 7, 9, 15, and 8.",
    "start": "3499560",
    "end": "3511645"
  },
  {
    "text": " Every vertex except\nthe starting one",
    "start": "3511645",
    "end": "3517460"
  },
  {
    "text": "will have a parent, which means\nwe'll have exactly n minus 1 edges, that's a good sign.",
    "start": "3517460",
    "end": "3522880"
  },
  {
    "text": "And in fact, this will be\na minimum spanning tree. That's the claim, because\nevery time we grew the circle",
    "start": "3522880",
    "end": "3529460"
  },
  {
    "text": "to include a bigger\nthing, we were guaranteed that this edge was\nin the minimum spanning tree",
    "start": "3529460",
    "end": "3535970"
  },
  {
    "text": "by applying this\nproperty with that cut. ",
    "start": "3535970",
    "end": "3542710"
  },
  {
    "text": "Let me just write that down. ",
    "start": "3542710",
    "end": "3553430"
  },
  {
    "text": "OK, to prove\ncorrectness, you need to prove an invariant that this\nkey, the key of every vertex,",
    "start": "3553430",
    "end": "3559750"
  },
  {
    "text": "always remains this minimum. So this is an invariant. You should prove\nthat by induction. ",
    "start": "3559750",
    "end": "3573770"
  },
  {
    "text": "I won't prove it here.  But we have another invariant,\na more interesting one",
    "start": "3573770",
    "end": "3584280"
  },
  {
    "text": "from an MST\nperspective, you know, it's just a sort of algorithm\nimplementation detail,",
    "start": "3584280",
    "end": "3589680"
  },
  {
    "text": "that the tree T sub S,\nwithin S is always contained",
    "start": "3589680",
    "end": "3599640"
  },
  {
    "text": "in a minimum spanning\ntree of G. So over here,",
    "start": "3599640",
    "end": "3605615"
  },
  {
    "text": "we have this way of computing\nminimum spanning tree for all vertices v,\nbut what I'd like to do is just look\nat v that's currently",
    "start": "3605615",
    "end": "3612470"
  },
  {
    "text": "in S. By the end, that\nwill be the whole thing, but if I look at v in S, and I\nalways look at the edge from v",
    "start": "3612470",
    "end": "3619460"
  },
  {
    "text": "to v dot parent, that\ngives me this tree TS.",
    "start": "3619460",
    "end": "3624580"
  },
  {
    "text": "I claim it will be contained\nin a minimum spanning tree of the entire graph,\nproof by induction.",
    "start": "3624580",
    "end": "3632850"
  },
  {
    "text": "So by induction, let's assume--\ninduction hypothesis will",
    "start": "3632850",
    "end": "3639840"
  },
  {
    "text": "be that, let's say there is\na minimum spanning tree T",
    "start": "3639840",
    "end": "3645430"
  },
  {
    "text": "star, which contains\nT sub S, and then what the algorithm does, is it\nrepeatedly grows S by adding",
    "start": "3645430",
    "end": "3654020"
  },
  {
    "text": "this vertex u to S. So let's\nsuppose that it adds u to S.",
    "start": "3654020",
    "end": "3665240"
  },
  {
    "text": "So I'm actually going to look\nat the edge that it adds. ",
    "start": "3665240",
    "end": "3678990"
  },
  {
    "text": "So we have S and V minus S, and\nwe do this thing, like we just",
    "start": "3678990",
    "end": "3687630"
  },
  {
    "text": "saw, of growing by one. We add one new vertex\nover here to S,",
    "start": "3687630",
    "end": "3694370"
  },
  {
    "text": "and that vertex has a parent\nedge, has a parent pointer. So this edge, I'm\ngoing to call e.",
    "start": "3694370",
    "end": "3701320"
  },
  {
    "text": "So we're adding some vertex u\nthat we extract at the minimum, and we also added an\nedge e to this TS,",
    "start": "3701320",
    "end": "3709230"
  },
  {
    "text": "because we grew S by 1. OK, when I do that,\nall I do is say, look,",
    "start": "3709230",
    "end": "3716680"
  },
  {
    "text": "greedy choice\nproperty guarantees there's a minimum spanning\ntree that contains e.",
    "start": "3716680",
    "end": "3723160"
  },
  {
    "text": "Because we extracted\nthe min from the queue, and the key values are this,\nas I was arguing before,",
    "start": "3723160",
    "end": "3728320"
  },
  {
    "text": "that is the minimum overall\nedge that crosses the cut. e is a minimum weight\nedge that crosses the cut,",
    "start": "3728320",
    "end": "3735599"
  },
  {
    "text": "and so by greedy\nchoice property,",
    "start": "3735600",
    "end": "3749370"
  },
  {
    "text": "there is some minimum\nspanning tree that contains e.",
    "start": "3749370",
    "end": "3755010"
  },
  {
    "text": "But actually, I need that\nthe minimum spanning tree not only contains e, but also\ncontains all the other spanning",
    "start": "3755010",
    "end": "3761400"
  },
  {
    "text": "tree edges that we had\nalready said were in T star. OK, so here's where I'm going\nto use the stronger property.",
    "start": "3761400",
    "end": "3770460"
  },
  {
    "text": "I can modify T star to\ninclude e and T sub S.",
    "start": "3770460",
    "end": "3785960"
  },
  {
    "text": "So we already assumed that T\nstar includes T sub S. I just don't want to break that.",
    "start": "3785960",
    "end": "3791859"
  },
  {
    "text": "And if you remember the proof\nof this greedy choice property, we said, well all we need to do\nis remove one edge that crosses",
    "start": "3791860",
    "end": "3799360"
  },
  {
    "text": "the cut and replace it with e. So here what I'm saying\nis there's some edge, yeah, maybe there's some\nedge over here in T star",
    "start": "3799360",
    "end": "3807480"
  },
  {
    "text": "that we had to remove,\nand then we put e in. And then we get a minimum\nspanning tree again,",
    "start": "3807480",
    "end": "3814170"
  },
  {
    "text": "T star prime. OK, this edge that I remove\ncannot be one of the TS edges",
    "start": "3814170",
    "end": "3822530"
  },
  {
    "text": "because the TS edges\nare all inside S. So because I'm only removing\nan edge that crosses the cut,",
    "start": "3822530",
    "end": "3829270"
  },
  {
    "text": "I'm not disturbing TS. TS will remain inside T star,\nbut then I get the new property",
    "start": "3829270",
    "end": "3836230"
  },
  {
    "text": "that e is inside T star, and so\nI prove this invariant holds.",
    "start": "3836230",
    "end": "3842615"
  },
  {
    "text": "OK? I keep changing T star, but I\nalways preserve the property that all of the spanning\ntree edges that are inside S",
    "start": "3842615",
    "end": "3849109"
  },
  {
    "text": "are contained in some minimum\nspanning tree of G. Maybe I'll add in some for emphasis. ",
    "start": "3849110",
    "end": "3857519"
  },
  {
    "text": "Cool? So that's how we use\nthe greedy choice property to get correctness\nof Prim's algorithm.",
    "start": "3857520",
    "end": "3864640"
  },
  {
    "text": " What's the running time\nof Prim's algorithm? ",
    "start": "3864640",
    "end": "3876050"
  },
  {
    "text": "Same as Dijkstra, good answer. ",
    "start": "3876050",
    "end": "3881190"
  },
  {
    "text": "I guess it depends what\npriority queue you use, but whatever priority queue you\nuse, it's the same as Dijkstra.",
    "start": "3881190",
    "end": "3886500"
  },
  {
    "start": "3886500",
    "end": "3895790"
  },
  {
    "text": "And so in particular, if we\nuse Fibonacci heaps, which, again, we're not covering, we\nget V log V plus E. In general,",
    "start": "3895790",
    "end": "3909646"
  },
  {
    "text": "for every edge, we have\nto do a decrease-key. Actually, for every edge we do\ntwo decrease-key operations, potentially, if\nyou think about it.",
    "start": "3909646",
    "end": "3916720"
  },
  {
    "text": "But this for loop over\nthe adjacency, the cost",
    "start": "3916720",
    "end": "3921780"
  },
  {
    "text": "of this stuff is constant. The cost of this is the\ndegree of the vertex u.",
    "start": "3921780",
    "end": "3930530"
  },
  {
    "text": "And so we're basically\ndoing the sum of the degrees of\nthe vertices, which",
    "start": "3930530",
    "end": "3936650"
  },
  {
    "text": "is the number of edges times 2. That's the handshaking lemma. So for every edge,\nwe're potentially",
    "start": "3936650",
    "end": "3942310"
  },
  {
    "text": "doing one decrease-key\noperation, and with Fibonacci heaps,\nthat's constant time. But we're also doing V extract\nmins those cost log V time,",
    "start": "3942310",
    "end": "3950206"
  },
  {
    "text": "cause the size of\nthe queue is at most V, and so that is actually\nthe right running time. Just like Dijkstra, so\neasy formula to remember.",
    "start": "3950207",
    "end": "3957700"
  },
  {
    "text": " All right, let's do one more\nalgorithm, Kruskal's algorithm.",
    "start": "3957700",
    "end": "3967019"
  },
  {
    "start": "3967020",
    "end": "4001280"
  },
  {
    "text": "Kruskal's algorithm is a\nlittle bit weirder from the S perspective, I guess.",
    "start": "4001280",
    "end": "4008132"
  },
  {
    "text": "We'll see what cuts\nwe're using in a moment, but it's based\naround this idea of,",
    "start": "4008132",
    "end": "4014260"
  },
  {
    "text": "well, the globally\nminimum weight edge is the minimum weight edge\nfor all cuts that cross it,",
    "start": "4014260",
    "end": "4021390"
  },
  {
    "text": "or for all cuts that it crosses. The globally minimum weight edge\nis going to be a valid choice,",
    "start": "4021390",
    "end": "4027160"
  },
  {
    "text": "and so, by this\ntheorem, you pick some S that partitions\nthe endpoints of e,",
    "start": "4027160",
    "end": "4033049"
  },
  {
    "text": "therefore e is in a\nminimum spanning tree. So let's choose that one\nfirst, and then repeat.",
    "start": "4033050",
    "end": "4038510"
  },
  {
    "text": "Conceptually, what we want to\ndo is that DP idea of contract the vertex, sorry,\ncontract the edge",
    "start": "4038510",
    "end": "4044390"
  },
  {
    "text": "and then find the minimum\nweight edge that remains. But the way I'm going to phrase\nit doesn't explicitly contract,",
    "start": "4044390",
    "end": "4050400"
  },
  {
    "text": "although implicitly,\nit's doing that. And there's a catch.",
    "start": "4050400",
    "end": "4056820"
  },
  {
    "text": " The catch is suppose I've\npicked some edges out to be",
    "start": "4056820",
    "end": "4067444"
  },
  {
    "text": "in my minimum spanning tree. Suppose this was\nthe minimum weight and this was the next minimum,\nnext minimum, next minimum, next minimum.",
    "start": "4067444",
    "end": "4072810"
  },
  {
    "text": "Suppose that the next\nlar-- at this point, after contracting those\nedges, the minimum weight edge",
    "start": "4072810",
    "end": "4079710"
  },
  {
    "text": "is this one. Do I want to put this edge\nin my minimum spanning tree?",
    "start": "4079710",
    "end": "4086180"
  },
  {
    "text": "No. That would add a cycle. Cycles are bad. This is the tricky\npart of this algorithm.",
    "start": "4086180",
    "end": "4092560"
  },
  {
    "text": "I have to keep track of\nwhether I should actually add an edge, in other\nwords, whether this vertex",
    "start": "4092560",
    "end": "4099589"
  },
  {
    "text": "and this vertex have already\nbeen connected to each other. And it turns out you've\nalready seen a data structure",
    "start": "4099590",
    "end": "4106189"
  },
  {
    "text": "to do that. This is what I call\nunion-find and the textbook calls it disjoint-set\ndata structure.",
    "start": "4106189",
    "end": "4112089"
  },
  {
    "start": "4112090",
    "end": "4117609"
  },
  {
    "text": "So it's in recitation. Recitation 3. ",
    "start": "4117609",
    "end": "4128430"
  },
  {
    "text": "So I want to maintain\nfor my MST so far, so I'm adding edges\none at a time. And I have some tree-- well,\nit's actually a forest,",
    "start": "4128430",
    "end": "4135599"
  },
  {
    "text": "but I'm still\ngoing to call it T, and I'm going to maintain it\nin a union-find structure,",
    "start": "4135600",
    "end": "4145739"
  },
  {
    "text": "disjoint-set set data structure. Remember, this had three\noperations, make set, union,",
    "start": "4145740",
    "end": "4152770"
  },
  {
    "text": "and find set. Tell me given an item which\nset does it belong to?",
    "start": "4152770",
    "end": "4159539"
  },
  {
    "text": "We're going to use\nthat, the sets are going to be the connected components. So after I've added these edges,\nthese guys, these vertices",
    "start": "4159539",
    "end": "4167664"
  },
  {
    "text": "here, will form one\nconnected component, and, you know,\neverybody else will just be in its own\nseparate component.",
    "start": "4167664",
    "end": "4173739"
  },
  {
    "text": "So to get started, I'm not going\nto have any edges in my tree,",
    "start": "4173740",
    "end": "4180500"
  },
  {
    "text": "and so every vertex is in\nits own connected component. So I represent that by calling\nmake-set v for all vertices.",
    "start": "4180500",
    "end": "4191420"
  },
  {
    "text": "So every vertex lives in\nits own singleton set. OK, now I'd like to do the\nminimum weight edge, and then",
    "start": "4191420",
    "end": "4200245"
  },
  {
    "text": "the next minimum weight edge,\nand the next minimum weight edge. That's also known\nas sorting, so I'm",
    "start": "4200245",
    "end": "4205450"
  },
  {
    "text": "going to sort E by\nweight, increasing weight,",
    "start": "4205450",
    "end": "4216210"
  },
  {
    "text": "so I get to start with\nthe minimum weight edge. ",
    "start": "4216210",
    "end": "4230690"
  },
  {
    "text": "So now I'm going to do a\nfor-loop over the edges,",
    "start": "4230690",
    "end": "4243010"
  },
  {
    "text": "increasing order by weight. ",
    "start": "4243010",
    "end": "4249640"
  },
  {
    "text": "Now I want to know--\nI have an edge, it's basically the minimum\nweight edge among the edges",
    "start": "4249640",
    "end": "4255610"
  },
  {
    "text": "that remain, and so I want to\nknow whether I should add it. I'm going to add it provided\nthe endpoints of the edge",
    "start": "4255610",
    "end": "4261894"
  },
  {
    "text": "are not in the same\nconnected component.  How can I find out\nwhether two vertices",
    "start": "4261894",
    "end": "4269160"
  },
  {
    "text": "are in the same connected\ncomponent, given this setup? ",
    "start": "4269160",
    "end": "4276528"
  },
  {
    "text": "Yeah? AUDIENCE: Call find-set\ntwice and then-- ERIK DEMAINE: Call\nfind-set twice and see whether they're equal, exactly.",
    "start": "4276528",
    "end": "4283110"
  },
  {
    "text": "Good answer.  So if you find-set of u\nis from find-set of v,",
    "start": "4283110",
    "end": "4298520"
  },
  {
    "text": "find-set just returns\nsome identifier. We don't really care\nwhat it is, as long as it returns the same\nthing for the same set.",
    "start": "4298520",
    "end": "4305547"
  },
  {
    "text": "So if u and v are in the\nsame set, in other words, they're in the same\nconnected component, then find-set will return\nthe same thing for both.",
    "start": "4305547",
    "end": "4311290"
  },
  {
    "text": "But provided they're\nnot equal, then we can add this\nedge into our tree.",
    "start": "4311290",
    "end": "4321890"
  },
  {
    "text": "So we add e to the\nset T, and then we have to represent\nthe fact that we just",
    "start": "4321890",
    "end": "4328150"
  },
  {
    "text": "merged the connected\ncomponents of u and v, and we do that\nwith a union call. ",
    "start": "4328150",
    "end": "4337336"
  },
  {
    "text": "And if you're ever\nwondering what the heck do we use union-find\nfor, this is the answer. The union-find data structure\nwas invented in order",
    "start": "4337336",
    "end": "4344640"
  },
  {
    "text": "to implement Kruskal's\nalgorithm faster, OK? In fact, a lot of\ndata structures come from graph algorithms.",
    "start": "4344640",
    "end": "4351210"
  },
  {
    "text": "The reason Fibonacci\nheaps were invented was because there was\nDijkstra's algorithm and we wanted it to run fast.",
    "start": "4351210",
    "end": "4357450"
  },
  {
    "text": "So same deal here, you just\nsaw it in the reverse order. First you saw union-find. Now, union-find, you\nknow you can solve v",
    "start": "4357450",
    "end": "4363710"
  },
  {
    "text": "in alpha of n time, the\ninverse Ackermann function, super, super tiny, slow growing\nfunction, smaller than log",
    "start": "4363710",
    "end": "4369770"
  },
  {
    "text": "log log log log log log.  Really small.",
    "start": "4369770",
    "end": "4375560"
  },
  {
    "text": "But we have this sorting,\nwhich is kind of annoying. So the overall\nrunning time-- we'll worry about correctness\nin a moment.",
    "start": "4375560",
    "end": "4382740"
  },
  {
    "text": "We have to sort--\nto sort E by weight.",
    "start": "4382740",
    "end": "4389940"
  },
  {
    "text": "So I'll just call\nthat's sort of E. Then we have to do some unions.",
    "start": "4389940",
    "end": "4395900"
  },
  {
    "text": "I guess for every edge,\npotentially, we do a union. I'll just write E times alpha\nof v. And then we have to do,",
    "start": "4395900",
    "end": "4409280"
  },
  {
    "text": "well, we also have to\nfind-sets, but same deal. So find-set and union\ncost alpha amortized,",
    "start": "4409280",
    "end": "4414990"
  },
  {
    "text": "so the total cost for\ndoing this for all edges is going to be the number\nof edges times alpha,",
    "start": "4414990",
    "end": "4420340"
  },
  {
    "text": "and then there's like plus v,\nI guess, but that's smaller.",
    "start": "4420340",
    "end": "4425699"
  },
  {
    "text": "That's a connected graph. So other than the sorting time,\nthis algorithm is really good.",
    "start": "4425700",
    "end": "4431000"
  },
  {
    "text": "It's faster. But if you're sorting\nby an n log n algorithm,",
    "start": "4431000",
    "end": "4437120"
  },
  {
    "text": "this is not so great. That's how it goes. I think you can reduce this to\nsorting just v things, instead",
    "start": "4437120",
    "end": "4444719"
  },
  {
    "text": "of E things, with a\nlittle bit of effort, like doing a select operation. But when this algorithm\nis really good",
    "start": "4444720",
    "end": "4451690"
  },
  {
    "text": "is if your weights are integers. If You have weights, let's\nsay weight of e is 0 or 1",
    "start": "4451690",
    "end": "4463540"
  },
  {
    "text": "or, say, n to the c,\nfor some constant c, then I can use rate x\nsort, linear time sorting,",
    "start": "4463540",
    "end": "4471340"
  },
  {
    "text": "and then this will\nbe linear time, and I'm only paying\nE times alpha. So if you have\nreasonably small weights,",
    "start": "4471340",
    "end": "4478100"
  },
  {
    "text": "Kruskal's algorithm is better. Otherwise, I guess you\nprefer Prim's algorithm.",
    "start": "4478100",
    "end": "4484920"
  },
  {
    "text": "But either away.  I actually used a variation\nof this algorithm recently.",
    "start": "4484920",
    "end": "4491660"
  },
  {
    "text": "If you want to generate\na random spanning tree, then you can use exactly\nthe same algorithm.",
    "start": "4491660",
    "end": "4496800"
  },
  {
    "text": "You pick a random manage that\nyou haven't picked already, you see, can I add this\nedge with this test?",
    "start": "4496800",
    "end": "4503239"
  },
  {
    "text": "If you can, add it and repeat. That will give you a\nrandom spanning tree. It will generate all spanning\ntrees uniform leap likely.",
    "start": "4503240",
    "end": "4510989"
  },
  {
    "text": "So that's a fun fact,\nuseful thing for union-find.",
    "start": "4510990",
    "end": "4516080"
  },
  {
    "text": "Let me tell you briefly\nabout correctness. ",
    "start": "4516080",
    "end": "4534012"
  },
  {
    "text": "Again, we proved correctness\nwith an invariant. ",
    "start": "4534012",
    "end": "4550720"
  },
  {
    "text": "Claim that at all\ntimes the tree T of edges that\nwe've picked so far is contained in some minimum\nspanning tree, T star.",
    "start": "4550720",
    "end": "4560790"
  },
  {
    "text": "T start is going to\nchange, but I always want the edges I've chosen to be\ninside a minimum spanning tree.",
    "start": "4560790",
    "end": "4566680"
  },
  {
    "text": "Again, we can prove\nthis by induction. So assume by induction\nthat this is true",
    "start": "4566680",
    "end": "4575000"
  },
  {
    "text": "so far, and then suppose that\nwe're adding an edge here.",
    "start": "4575000",
    "end": "4581910"
  },
  {
    "text": "So we're converting T into\nT prime, which is T union e.",
    "start": "4581910",
    "end": "4587770"
  },
  {
    "text": " By the data structural\nsetup, I know",
    "start": "4587770",
    "end": "4594690"
  },
  {
    "text": "that the endpoints\nof e, u, and v are in different\nconnected components.",
    "start": "4594690",
    "end": "4600469"
  },
  {
    "text": "In general, what my\npicture looks like, is I have some various\nconnected components, maybe there's a single\nvertex, whatever.",
    "start": "4600470",
    "end": "4608320"
  },
  {
    "text": "I've built a minimum\nspanning tree for each one. I built some tree,\nand I actually",
    "start": "4608320",
    "end": "4613429"
  },
  {
    "text": "know that these trees are\ncontained in one global minimum spanning tree.",
    "start": "4613430",
    "end": "4619445"
  },
  {
    "text": "OK, and now we're\nlooking at an edge that goes from some vertex u\nin one connected component",
    "start": "4619445",
    "end": "4625330"
  },
  {
    "text": "to some vertex v in a\ndifferent connected component. This is our edge e.",
    "start": "4625330",
    "end": "4631000"
  },
  {
    "text": "That's our setup. Because the union-find\ndata structure maintains connected\ncomponents, that's",
    "start": "4631000",
    "end": "4636530"
  },
  {
    "text": "another invariant to prove. We're considering adding\nthis edge, which connects two different connected components.",
    "start": "4636530",
    "end": "4643489"
  },
  {
    "text": "So I want to use the greedy\nchoice property with some S.",
    "start": "4643490",
    "end": "4649850"
  },
  {
    "text": "What should S be? ",
    "start": "4649850",
    "end": "4671710"
  },
  {
    "text": "I want e to cross a cut,\nso what's a good cut? ",
    "start": "4671710",
    "end": "4683913"
  },
  {
    "text": "Yeah? AUDIENCE: The\nconnected component of u and then everything else. ERIK DEMAINE:\nConnected component",
    "start": "4683913",
    "end": "4689160"
  },
  {
    "text": "of u and everything else? AUDIENCE: Yeah. ERIK DEMAINE: That\nwould work, which is also the opposite of the\nconnected component containing",
    "start": "4689160",
    "end": "4695550"
  },
  {
    "text": "v. There are many\nchoices that work. I could take basically\nthis cut, which",
    "start": "4695550",
    "end": "4700899"
  },
  {
    "text": "is the connected component\nof you with everything else versus the\nconnected component of v. I could take this cut, which\nis the connected component of u",
    "start": "4700899",
    "end": "4708340"
  },
  {
    "text": "only versus everybody else. Either of those will work. Good. ",
    "start": "4708340",
    "end": "4716370"
  },
  {
    "text": "Good curve, all right. So let's say S equals the\nconnected component of u,",
    "start": "4716370",
    "end": "4724469"
  },
  {
    "text": "or connected component of v.\ne crosses that, all right? Because it goes from u to\nv, and u is on one side,",
    "start": "4724470",
    "end": "4731869"
  },
  {
    "text": "v is on the other side. I wanted to include an\nentire connected component",
    "start": "4731870",
    "end": "4737500"
  },
  {
    "text": "because when I apply the\ngreedy choice property, I modify T star,\nand I don't want",
    "start": "4737500",
    "end": "4743139"
  },
  {
    "text": "to modify, I don't want to\ndelete any of these edges that are already in my\nconnected components,",
    "start": "4743140",
    "end": "4748380"
  },
  {
    "text": "that I've already put in there. But if I choose my\ncut to just be this, I know that the edge\nthat I potentially remove",
    "start": "4748380",
    "end": "4755949"
  },
  {
    "text": "will cross this\ncut, which means it goes between connected\ncomponents, which means I haven't added that yet to T.",
    "start": "4755950",
    "end": "4762060"
  },
  {
    "text": "So when I apply this\ngreedy choice property, I'm not deleting anything\nfrom T. Everything that",
    "start": "4762060",
    "end": "4770470"
  },
  {
    "text": "was in T is still in T star. So that tells me that T prime\nis contained in T star prime.",
    "start": "4770470",
    "end": "4783730"
  },
  {
    "text": "The new T star that I get\nwhen I apply the cut and paste argument, I modify\nT star potentially",
    "start": "4783730",
    "end": "4790350"
  },
  {
    "text": "by removing one edge\nand putting e in. And the edge that\nI remove was not already in T, which means\nI preserve this part,",
    "start": "4790350",
    "end": "4798850"
  },
  {
    "text": "but I also get that\nmy new edge e is in the minimum spanning tree.",
    "start": "4798850",
    "end": "4804360"
  },
  {
    "text": "And so that's how you prove\nby induction that at all times the edges that you've\nchosen so far are in T star.",
    "start": "4804360",
    "end": "4811600"
  },
  {
    "text": "Actually, to apply the\ngreedy choice property, I need not only that e is cut--\nsorry, that e crosses the cut,",
    "start": "4811600",
    "end": "4817710"
  },
  {
    "text": "I also need that e\nis the minimum weight edge crossing the cut. That's a little more\nargument to prove.",
    "start": "4817710",
    "end": "4826590"
  },
  {
    "text": "The rough idea is\nthat if you forget about the edges we've\nalready dealt with, e is the globally\nminimum weight edge.",
    "start": "4826590",
    "end": "4834240"
  },
  {
    "text": "OK, but what about the edges\nwe've already dealt with? Some of them are in the tree.",
    "start": "4834240",
    "end": "4840160"
  },
  {
    "text": "The edges that are in\nthese-- that are in T, those obviously don't cross the cut. That's how we designed the cut.",
    "start": "4840160",
    "end": "4846200"
  },
  {
    "text": "The cup was designed\nnot to cross, not two separate any of\nthese connected components. So all the edges that we've\nadded to T, those are OK.",
    "start": "4846200",
    "end": "4854730"
  },
  {
    "text": "They're not related to the\nedges that cross this cut. But we may have already\nconsidered some lower weight",
    "start": "4854730",
    "end": "4862590"
  },
  {
    "text": "edges that we didn't add to T.\nIf we didn't add an edge to T,",
    "start": "4862590",
    "end": "4868334"
  },
  {
    "text": "that means actually they\nwere in the same set, which means also those are-- I'm going\nto use my other color, blue.",
    "start": "4868334",
    "end": "4877000"
  },
  {
    "text": "Those are extra\nedges in here that are inside a\nconnected component,",
    "start": "4877000",
    "end": "4883290"
  },
  {
    "text": "have smaller weight\nthan e, but they're inside the connected component. So again, they're not crossed.",
    "start": "4883290",
    "end": "4888580"
  },
  {
    "text": "So they don't cross\nthe cut, rather. So e is basically the\nfirst edge that we're",
    "start": "4888580",
    "end": "4894240"
  },
  {
    "text": "considering that\ncrosses this cut, because otherwise we would have\nadded that other edge first. So here, we have to do sort\nof the greedy argument again,",
    "start": "4894240",
    "end": "4902910"
  },
  {
    "text": "considering edges\nby weight and e is going to be the\nfirst edge that crosses this\nparticular cut, which",
    "start": "4902910",
    "end": "4909160"
  },
  {
    "text": "is this connected component\nversus everyone else. So e has to be the minimum\nweight edge crossing the cut,",
    "start": "4909160",
    "end": "4914639"
  },
  {
    "text": "so the greedy choice\nproperty applies. So we can put e in the\nminimum spanning tree,",
    "start": "4914640",
    "end": "4919700"
  },
  {
    "text": "and this algorithm is correct. OK? So we've used that lemma\na zillion times by now.",
    "start": "4919700",
    "end": "4925730"
  },
  {
    "text": "That's minimum spanning\ntree and nearly linear time.",
    "start": "4925730",
    "end": "4929430"
  }
]