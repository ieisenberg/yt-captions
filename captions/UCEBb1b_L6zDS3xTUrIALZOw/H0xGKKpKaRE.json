[
  {
    "start": "0",
    "end": "0"
  },
  {
    "start": "0",
    "end": "500"
  },
  {
    "text": "There are many\napproaches to building",
    "start": "500",
    "end": "2300"
  },
  {
    "text": "a general-purpose computer that\ncan be easily re-programmed",
    "start": "2300",
    "end": "5500"
  },
  {
    "text": "for new problems.",
    "start": "5500",
    "end": "7110"
  },
  {
    "text": "Almost all modern computers are\nbased on the “stored program”",
    "start": "7110",
    "end": "10160"
  },
  {
    "text": "computer architecture developed\nby John von Neumann in 1945,",
    "start": "10160",
    "end": "13320"
  },
  {
    "text": "which is now commonly referred\nto as the “von Neumann model”.",
    "start": "13320",
    "end": "18450"
  },
  {
    "text": "The von Neumann model\nhas three components.",
    "start": "18450",
    "end": "21000"
  },
  {
    "text": "There’s a central processing\nunit (aka the CPU) that",
    "start": "21000",
    "end": "24900"
  },
  {
    "text": "contains a datapath and control\nFSM as described previously.",
    "start": "24900",
    "end": "29800"
  },
  {
    "text": "The CPU is connected\nto a read/write memory",
    "start": "29800",
    "end": "32140"
  },
  {
    "text": "that holds some number W\nof words, each with N bits.",
    "start": "32140",
    "end": "36370"
  },
  {
    "text": "Nowadays, even small\nmemories have a billion words",
    "start": "36370",
    "end": "39530"
  },
  {
    "text": "and the width of each\nlocation is at least 32 bits",
    "start": "39530",
    "end": "42590"
  },
  {
    "text": "(usually more).",
    "start": "42590",
    "end": "44610"
  },
  {
    "text": "This memory is often referred to\nas “main memory” to distinguish",
    "start": "44610",
    "end": "47850"
  },
  {
    "text": "it from other memories\nin the system.",
    "start": "47850",
    "end": "50710"
  },
  {
    "text": "You can think of it as an array:\nwhen the CPU wishes to operate",
    "start": "50710",
    "end": "54399"
  },
  {
    "text": "on values in memory , it sends\nthe memory an array index,",
    "start": "54400",
    "end": "57970"
  },
  {
    "text": "which we call the address, and,\nafter a short delay (currently",
    "start": "57970",
    "end": "61950"
  },
  {
    "text": "10’s of nanoseconds) the memory\nwill return the N-bit value",
    "start": "61950",
    "end": "65920"
  },
  {
    "text": "stored at that address.",
    "start": "65920",
    "end": "68049"
  },
  {
    "text": "Writes to main memory\nfollow the same protocol",
    "start": "68050",
    "end": "70200"
  },
  {
    "text": "except, of course,\nthe data flows",
    "start": "70200",
    "end": "72340"
  },
  {
    "text": "in the opposite direction.",
    "start": "72340",
    "end": "74270"
  },
  {
    "text": "We’ll talk about memory\ntechnologies a couple",
    "start": "74270",
    "end": "76289"
  },
  {
    "text": "of lectures from now.",
    "start": "76290",
    "end": "78200"
  },
  {
    "text": "And, finally, there are\ninput/output devices",
    "start": "78200",
    "end": "80430"
  },
  {
    "text": "that enable the computer\nsystem to communicate",
    "start": "80430",
    "end": "82490"
  },
  {
    "text": "with the outside world or\nto access data storage that,",
    "start": "82490",
    "end": "86079"
  },
  {
    "text": "unlike main memory, will\nremember values even when",
    "start": "86080",
    "end": "88980"
  },
  {
    "text": "turned off.",
    "start": "88980",
    "end": "89570"
  },
  {
    "start": "89570",
    "end": "92220"
  },
  {
    "start": "91000",
    "end": "91000"
  },
  {
    "text": "The key idea is\nto use main memory",
    "start": "92220",
    "end": "93920"
  },
  {
    "text": "to hold the instructions\nfor the CPU as well as data.",
    "start": "93920",
    "end": "97460"
  },
  {
    "text": "Both instructions and data are,\nof course, just binary data",
    "start": "97460",
    "end": "100479"
  },
  {
    "text": "stored in main memory.",
    "start": "100480",
    "end": "102940"
  },
  {
    "text": "Interpreted as an\ninstruction, a value in memory",
    "start": "102940",
    "end": "105830"
  },
  {
    "text": "can be thought of as a set of\nfields containing one or bits",
    "start": "105830",
    "end": "108900"
  },
  {
    "text": "encoding information\nabout the actions",
    "start": "108900",
    "end": "111220"
  },
  {
    "text": "to be performed by the CPU.",
    "start": "111220",
    "end": "114140"
  },
  {
    "text": "The opcode field indicates\nthe operation to be performed",
    "start": "114140",
    "end": "117430"
  },
  {
    "text": "(e.g., ADD, XOR, COMPARE).",
    "start": "117430",
    "end": "120790"
  },
  {
    "text": "Subsequent fields specify which\nregisters supply the source",
    "start": "120790",
    "end": "124660"
  },
  {
    "text": "operands and the\ndestination register",
    "start": "124660",
    "end": "126960"
  },
  {
    "text": "where the result is stored.",
    "start": "126960",
    "end": "129638"
  },
  {
    "text": "The CPU interprets the\ninformation in the instruction",
    "start": "129639",
    "end": "131930"
  },
  {
    "text": "fields and performs the\nrequested operation.",
    "start": "131930",
    "end": "135670"
  },
  {
    "text": "It would then move on to the\nnext instruction in memory,",
    "start": "135670",
    "end": "138260"
  },
  {
    "text": "executing the stored\nprogram step-by-step.",
    "start": "138260",
    "end": "141650"
  },
  {
    "text": "The goal of this\nchapter is to discuss",
    "start": "141650",
    "end": "143540"
  },
  {
    "text": "the details of what operations\nwe want the CPU to perform,",
    "start": "143540",
    "end": "147159"
  },
  {
    "text": "how many registers we\nshould have, and so on.",
    "start": "147160",
    "end": "151070"
  },
  {
    "text": "Of course, some values in\nmemory are not instructions!",
    "start": "151070",
    "end": "154430"
  },
  {
    "text": "They might be binary\ndata representing",
    "start": "154430",
    "end": "156250"
  },
  {
    "text": "numeric values, strings\nof characters, and so on.",
    "start": "156250",
    "end": "160770"
  },
  {
    "text": "The CPU will read these values\ninto its temporary registers",
    "start": "160770",
    "end": "163700"
  },
  {
    "text": "when it needs to operate on them\nand write newly computed values",
    "start": "163700",
    "end": "167140"
  },
  {
    "text": "back into memory.",
    "start": "167140",
    "end": "169420"
  },
  {
    "text": "Mr. Blue is asking a\ngood question: how do we",
    "start": "169420",
    "end": "172150"
  },
  {
    "text": "know which words in\nmemory are instructions",
    "start": "172150",
    "end": "174590"
  },
  {
    "text": "and which are data?",
    "start": "174590",
    "end": "176069"
  },
  {
    "text": "After all, they’re\nboth binary values!",
    "start": "176070",
    "end": "178630"
  },
  {
    "text": "The answer is that we can’t tell\nby looking at the values — it’s",
    "start": "178630",
    "end": "182240"
  },
  {
    "text": "how they are used by the CPU\nthat distinguishes instructions",
    "start": "182240",
    "end": "185910"
  },
  {
    "text": "from data.",
    "start": "185910",
    "end": "186960"
  },
  {
    "text": "If a value is loaded\ninto the datapath,",
    "start": "186960",
    "end": "189060"
  },
  {
    "text": "it’s being used as data.",
    "start": "189060",
    "end": "191120"
  },
  {
    "text": "If a value is loaded\nby the control logic,",
    "start": "191120",
    "end": "193409"
  },
  {
    "text": "it’s being used an instruction.",
    "start": "193410",
    "end": "196160"
  },
  {
    "start": "196000",
    "end": "196000"
  },
  {
    "text": "So this is the digital\nsystem we’ll build to perform",
    "start": "196160",
    "end": "198870"
  },
  {
    "text": "computations.",
    "start": "198870",
    "end": "200519"
  },
  {
    "text": "We’ll start with a datapath\nthat contains some number",
    "start": "200520",
    "end": "203030"
  },
  {
    "text": "of registers to\nhold data values.",
    "start": "203030",
    "end": "205230"
  },
  {
    "text": "We’ll be able to select which\nregisters will supply operands",
    "start": "205230",
    "end": "208150"
  },
  {
    "text": "for the arithmetic and\nlogic unit that will perform",
    "start": "208150",
    "end": "210870"
  },
  {
    "text": "an operation.",
    "start": "210870",
    "end": "212709"
  },
  {
    "text": "The ALU produces a result\nand other status signals.",
    "start": "212710",
    "end": "215870"
  },
  {
    "text": "The ALU result can\nbe written back",
    "start": "215870",
    "end": "217750"
  },
  {
    "text": "to one of the registers\nfor later use.",
    "start": "217750",
    "end": "220170"
  },
  {
    "text": "We’ll provide the datapath with\nmeans to move data to and from",
    "start": "220170",
    "end": "223500"
  },
  {
    "text": "main memory.",
    "start": "223500",
    "end": "224870"
  },
  {
    "text": "There will be a\ncontrol unit that",
    "start": "224870",
    "end": "226360"
  },
  {
    "text": "provides the necessary control\nsignals to the datapath.",
    "start": "226360",
    "end": "229750"
  },
  {
    "text": "In the example\ndatapath shown here,",
    "start": "229750",
    "end": "232040"
  },
  {
    "text": "the control unit would\nprovide ASEL and BSEL",
    "start": "232040",
    "end": "234709"
  },
  {
    "text": "to select two register\nvalues as operands",
    "start": "234710",
    "end": "237780"
  },
  {
    "text": "and DEST to select\nthe register where",
    "start": "237780",
    "end": "239880"
  },
  {
    "text": "the ALU result will be written.",
    "start": "239880",
    "end": "242900"
  },
  {
    "text": "If the datapath had, say,\n32 internal registers,",
    "start": "242900",
    "end": "246319"
  },
  {
    "text": "ASEL, BSEL and DEST\nwould be 5-bit values,",
    "start": "246320",
    "end": "250040"
  },
  {
    "text": "each specifying a particular\nregister number in the range",
    "start": "250040",
    "end": "253209"
  },
  {
    "text": "0 to 31.",
    "start": "253210",
    "end": "253790"
  },
  {
    "text": "The control unit also\nprovides the FN function code",
    "start": "253790",
    "end": "258350"
  },
  {
    "text": "that controls the operation\nperformed by the ALU.",
    "start": "258350",
    "end": "262000"
  },
  {
    "text": "The ALU we designed in\nPart 1 of the course",
    "start": "262000",
    "end": "264250"
  },
  {
    "text": "requires a 6-bit\nfunction code to select",
    "start": "264250",
    "end": "266480"
  },
  {
    "text": "between a variety of arithmetic,\nboolean and shift operations.",
    "start": "266480",
    "end": "270970"
  },
  {
    "text": "The control unit would load\nvalues from main memory",
    "start": "270970",
    "end": "273640"
  },
  {
    "text": "to be interpreted\nas instructions.",
    "start": "273640",
    "end": "276380"
  },
  {
    "text": "The control unit\ncontains a register,",
    "start": "276380",
    "end": "278130"
  },
  {
    "text": "called the “program counter”,\nthat keeps track of the address",
    "start": "278130",
    "end": "281770"
  },
  {
    "text": "in main memory of the next\ninstruction to be executed.",
    "start": "281770",
    "end": "285419"
  },
  {
    "text": "The control unit also\ncontains a (hopefully small)",
    "start": "285420",
    "end": "288450"
  },
  {
    "text": "amount of logic to translate\nthe instruction fields",
    "start": "288450",
    "end": "290930"
  },
  {
    "text": "into the necessary\ncontrol signals.",
    "start": "290930",
    "end": "293880"
  },
  {
    "text": "Note the control unit\nreceives status signals",
    "start": "293880",
    "end": "296330"
  },
  {
    "text": "from the datapath that will\nenable programs to execute",
    "start": "296330",
    "end": "298979"
  },
  {
    "text": "different sequences\nof instructions",
    "start": "298980",
    "end": "301130"
  },
  {
    "text": "if, for example, a particular\ndata value was zero.",
    "start": "301130",
    "end": "305360"
  },
  {
    "text": "The datapath serves as the\nbrawn of our digital system",
    "start": "305360",
    "end": "308409"
  },
  {
    "text": "and is responsible for storing\nand manipulating data values.",
    "start": "308410",
    "end": "312340"
  },
  {
    "text": "The control unit serves as\nthe brain of our system,",
    "start": "312340",
    "end": "314680"
  },
  {
    "text": "interpreting the program\nstored in main memory",
    "start": "314680",
    "end": "317240"
  },
  {
    "text": "and generating the necessary\nsequence of control",
    "start": "317240",
    "end": "319759"
  },
  {
    "text": "signals for the datapath.",
    "start": "319760",
    "end": "322500"
  },
  {
    "text": "Instructions are the\nfundamental unit of work.",
    "start": "322500",
    "end": "325460"
  },
  {
    "start": "323000",
    "end": "323000"
  },
  {
    "text": "They’re fetched by the control\nunit and executed one after",
    "start": "325460",
    "end": "328410"
  },
  {
    "text": "another in the order\nthey are fetched.",
    "start": "328410",
    "end": "331030"
  },
  {
    "text": "Each instruction\nspecifies the operation",
    "start": "331030",
    "end": "333139"
  },
  {
    "text": "to be performed along\nwith the registers",
    "start": "333140",
    "end": "334880"
  },
  {
    "text": "to supply the source operands\nand destination register where",
    "start": "334880",
    "end": "338280"
  },
  {
    "text": "the result will be stored.",
    "start": "338280",
    "end": "340889"
  },
  {
    "text": "In a von Neumann machine,\ninstruction execution",
    "start": "340890",
    "end": "343790"
  },
  {
    "text": "involves the steps shown here:",
    "start": "343790",
    "end": "346000"
  },
  {
    "text": "the instruction is\nloaded from the memory",
    "start": "346000",
    "end": "348250"
  },
  {
    "text": "location whose address is\nspecified by the program",
    "start": "348250",
    "end": "350930"
  },
  {
    "text": "counter.",
    "start": "350930",
    "end": "352080"
  },
  {
    "text": "When the requested data\nis returned by the memory,",
    "start": "352080",
    "end": "354610"
  },
  {
    "text": "the instruction\nfields are converted",
    "start": "354610",
    "end": "356460"
  },
  {
    "text": "to the appropriate control\nsignals for the datapath,",
    "start": "356460",
    "end": "359310"
  },
  {
    "text": "selecting the source operands\nfrom the specified registers,",
    "start": "359310",
    "end": "362610"
  },
  {
    "text": "directing the ALU to perform\nthe specified operation,",
    "start": "362610",
    "end": "365680"
  },
  {
    "text": "and storing the result in the\nspecified destination register.",
    "start": "365680",
    "end": "370090"
  },
  {
    "text": "The final step in\nexecuting an instruction",
    "start": "370090",
    "end": "372120"
  },
  {
    "text": "is updating the\nvalue of the program",
    "start": "372120",
    "end": "373940"
  },
  {
    "text": "counter to be the address\nof the next instruction.",
    "start": "373940",
    "end": "377650"
  },
  {
    "text": "This execution loop is\nperformed again and again.",
    "start": "377650",
    "end": "381139"
  },
  {
    "text": "Modern machines can execute\nup more than a billion",
    "start": "381140",
    "end": "383380"
  },
  {
    "text": "instructions per second!",
    "start": "383380",
    "end": "385700"
  },
  {
    "text": "The discussion so far\nhas been a bit abstract.",
    "start": "385700",
    "end": "388690"
  },
  {
    "start": "386000",
    "end": "386000"
  },
  {
    "text": "Now it’s time to roll up our\nsleeves and figure out what",
    "start": "388690",
    "end": "391100"
  },
  {
    "text": "instructions we want\nour system to support.",
    "start": "391100",
    "end": "394090"
  },
  {
    "text": "The specification of instruction\nfields and their meaning",
    "start": "394090",
    "end": "396919"
  },
  {
    "text": "along with the details\nof the datapath design",
    "start": "396920",
    "end": "399290"
  },
  {
    "text": "are collectively called the\ninstruction set architecture",
    "start": "399290",
    "end": "402540"
  },
  {
    "text": "(ISA) of the system.",
    "start": "402540",
    "end": "405010"
  },
  {
    "text": "The ISA is a detailed functional\nspecification of the operations",
    "start": "405010",
    "end": "408390"
  },
  {
    "text": "and storage\nmechanisms and serves",
    "start": "408390",
    "end": "410470"
  },
  {
    "text": "as a contract\nbetween the designers",
    "start": "410470",
    "end": "412430"
  },
  {
    "text": "of the digital hardware\nand the programmers who",
    "start": "412430",
    "end": "414850"
  },
  {
    "text": "will write the programs.",
    "start": "414850",
    "end": "417170"
  },
  {
    "text": "Since the programs are stored\nin main memory and can hence be",
    "start": "417170",
    "end": "419880"
  },
  {
    "text": "changed, we’ll\ncall them software,",
    "start": "419880",
    "end": "422130"
  },
  {
    "text": "to distinguish them from\nthe digital logic which,",
    "start": "422130",
    "end": "424450"
  },
  {
    "text": "once implemented,\ndoesn’t change.",
    "start": "424450",
    "end": "426900"
  },
  {
    "text": "It’s the combination of hardware\nand software that determine",
    "start": "426900",
    "end": "430190"
  },
  {
    "text": "the behavior of our system.",
    "start": "430190",
    "end": "432950"
  },
  {
    "text": "The ISA is a new\nlayer of abstraction:",
    "start": "432950",
    "end": "435670"
  },
  {
    "text": "we can write programs\nfor the system",
    "start": "435670",
    "end": "437753"
  },
  {
    "text": "without knowing\nthe implementation",
    "start": "437753",
    "end": "439169"
  },
  {
    "text": "details of the hardware.",
    "start": "439170",
    "end": "441460"
  },
  {
    "text": "As hardware\ntechnology improves we",
    "start": "441460",
    "end": "443940"
  },
  {
    "text": "can build faster systems without\nhaving to change the software.",
    "start": "443940",
    "end": "448180"
  },
  {
    "text": "You can see here that over\na fifteen year timespan,",
    "start": "448180",
    "end": "451840"
  },
  {
    "text": "the hardware for executing\nthe Intel x86 instruction set",
    "start": "451840",
    "end": "455530"
  },
  {
    "text": "went from executing 300,000\ninstructions per second",
    "start": "455530",
    "end": "458750"
  },
  {
    "text": "to executing 5 billion\ninstructions per second.",
    "start": "458750",
    "end": "462400"
  },
  {
    "text": "Same software as before, we’ve\njust taken advantage of smaller",
    "start": "462400",
    "end": "466280"
  },
  {
    "text": "and faster MOSFETs to build\nmore complex circuits and faster",
    "start": "466280",
    "end": "470150"
  },
  {
    "text": "execution engines.",
    "start": "470150",
    "end": "472330"
  },
  {
    "text": "But a word of\ncaution is in order!",
    "start": "472330",
    "end": "474780"
  },
  {
    "text": "It’s tempting to make choices\nin the ISA that reflect",
    "start": "474780",
    "end": "478130"
  },
  {
    "text": "the constraints of current\ntechnologies, e.g.,",
    "start": "478130",
    "end": "480970"
  },
  {
    "text": "the number of\ninternal registers,",
    "start": "480970",
    "end": "482890"
  },
  {
    "text": "the width of the operands,\nor the maximum size of main",
    "start": "482890",
    "end": "485590"
  },
  {
    "text": "memory.",
    "start": "485590",
    "end": "487180"
  },
  {
    "text": "But it will be hard to change\nthe ISA when technology",
    "start": "487180",
    "end": "490150"
  },
  {
    "text": "improves since there’s a\npowerful economic incentive",
    "start": "490150",
    "end": "493440"
  },
  {
    "text": "to ensure that old software\ncan run on new machines,",
    "start": "493440",
    "end": "496890"
  },
  {
    "text": "which means that a particular\nISA can live for decades",
    "start": "496890",
    "end": "500520"
  },
  {
    "text": "and span many generations\nof technology.",
    "start": "500520",
    "end": "503699"
  },
  {
    "text": "If your ISA is successful,\nyou’ll have to live with any",
    "start": "503700",
    "end": "506550"
  },
  {
    "text": "bad choices you made\nfor a very long time.",
    "start": "506550",
    "end": "510319"
  },
  {
    "start": "510000",
    "end": "510000"
  },
  {
    "text": "Designing an ISA is hard!",
    "start": "510320",
    "end": "512860"
  },
  {
    "text": "What are the operations\nthat should be supported?",
    "start": "512860",
    "end": "515349"
  },
  {
    "text": "How many internal registers?",
    "start": "515350",
    "end": "517029"
  },
  {
    "text": "How much main memory?",
    "start": "517030",
    "end": "518659"
  },
  {
    "text": "Should we design the\ninstruction encoding",
    "start": "518659",
    "end": "520390"
  },
  {
    "text": "to minimize program size or to\nkeep the logic in the control",
    "start": "520390",
    "end": "524110"
  },
  {
    "text": "unit as simple as possible?",
    "start": "524110",
    "end": "525970"
  },
  {
    "text": "Looking into our\ncrystal ball, what",
    "start": "525970",
    "end": "527449"
  },
  {
    "text": "can we say about the computation\nand storage capabilities",
    "start": "527450",
    "end": "530320"
  },
  {
    "text": "of future technologies?",
    "start": "530320",
    "end": "533070"
  },
  {
    "text": "We’ll answer these questions by\ntaking a quantitative approach.",
    "start": "533070",
    "end": "536580"
  },
  {
    "text": "First we’ll choose a set\nof benchmark programs,",
    "start": "536580",
    "end": "539060"
  },
  {
    "text": "chosen as representative of\nthe many types of programs we",
    "start": "539060",
    "end": "542310"
  },
  {
    "text": "expect to run on our system.",
    "start": "542310",
    "end": "544750"
  },
  {
    "text": "So some of benchmark\nprograms will",
    "start": "544750",
    "end": "546440"
  },
  {
    "text": "perform scientific and\nengineering computations,",
    "start": "546440",
    "end": "549170"
  },
  {
    "text": "some will manipulate\nlarge data sets",
    "start": "549170",
    "end": "551470"
  },
  {
    "text": "or perform database\noperations, some",
    "start": "551470",
    "end": "553910"
  },
  {
    "text": "will require specialized\ncomputations for graphics",
    "start": "553910",
    "end": "556860"
  },
  {
    "text": "or communications, and so on.",
    "start": "556860",
    "end": "559500"
  },
  {
    "text": "Happily, after many\ndecades of computer use,",
    "start": "559500",
    "end": "561970"
  },
  {
    "text": "several standardized\nbenchmark suites",
    "start": "561970",
    "end": "564069"
  },
  {
    "text": "are available for us to use.",
    "start": "564070",
    "end": "566200"
  },
  {
    "text": "We’ll then implement the\nbenchmark programs using",
    "start": "566200",
    "end": "568550"
  },
  {
    "text": "our instruction set and simulate\ntheir execution on our proposed",
    "start": "568550",
    "end": "572209"
  },
  {
    "text": "datapath.",
    "start": "572210",
    "end": "573610"
  },
  {
    "text": "We’ll evaluate the results to\nmeasure how well the system",
    "start": "573610",
    "end": "576690"
  },
  {
    "text": "performs.",
    "start": "576690",
    "end": "578120"
  },
  {
    "text": "But what do we mean by “well”?",
    "start": "578120",
    "end": "580550"
  },
  {
    "text": "That’s where it\ngets interesting:",
    "start": "580550",
    "end": "582100"
  },
  {
    "text": "“well” could refer to execution\nspeed, energy consumption,",
    "start": "582100",
    "end": "585500"
  },
  {
    "text": "circuit size, system cost, etc.",
    "start": "585500",
    "end": "589170"
  },
  {
    "text": "If you’re designing\na smart watch,",
    "start": "589170",
    "end": "590720"
  },
  {
    "text": "you’ll make different choices\nthan if you’re designing",
    "start": "590720",
    "end": "593089"
  },
  {
    "text": "a high-performance graphics\ncard or a data-center server.",
    "start": "593090",
    "end": "597260"
  },
  {
    "text": "Whatever metric you choose to\nevaluate your proposed system,",
    "start": "597260",
    "end": "600340"
  },
  {
    "text": "there’s an important design\nprinciple we can follow:",
    "start": "600340",
    "end": "603170"
  },
  {
    "text": "identify the common\noperations and focus on them",
    "start": "603170",
    "end": "606060"
  },
  {
    "text": "as you optimize your design.",
    "start": "606060",
    "end": "608190"
  },
  {
    "text": "For example, in\ngeneral-purpose computing,",
    "start": "608190",
    "end": "610240"
  },
  {
    "text": "almost all programs\nspend a lot of their time",
    "start": "610240",
    "end": "612839"
  },
  {
    "text": "on simple arithmetic\noperations and accessing values",
    "start": "612840",
    "end": "615960"
  },
  {
    "text": "in main memory.",
    "start": "615960",
    "end": "617320"
  },
  {
    "text": "So those operations\nshould be made as fast",
    "start": "617320",
    "end": "619780"
  },
  {
    "text": "and energy efficient\nas possible.",
    "start": "619780",
    "end": "622370"
  },
  {
    "text": "Now, let’s get to work designing\nour own instruction set",
    "start": "622370",
    "end": "625120"
  },
  {
    "text": "and execution engine, a\nsystem we’ll call the Beta.",
    "start": "625120",
    "end": "629210"
  }
]