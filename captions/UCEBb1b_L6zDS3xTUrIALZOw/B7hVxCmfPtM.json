[
  {
    "text": " The following\ncontent is provided under a Creative\nCommons license. Your support will help MIT\nOpenCourseWare continue",
    "start": "0",
    "end": "6860"
  },
  {
    "text": "to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6860",
    "end": "13330"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13330",
    "end": "22210"
  },
  {
    "text": "PROFESSOR: One of the cutest\nlittle data structures that was ever invented\nis called the heap.",
    "start": "22210",
    "end": "27890"
  },
  {
    "text": "And we're going to use\nthe heap as an example implementation of\na priority queue.",
    "start": "27890",
    "end": "35390"
  },
  {
    "text": "And we'll also use heaps to\nbuild a sorting algorithm,",
    "start": "35390",
    "end": "40850"
  },
  {
    "text": "called heap sort,\nthat is very, very different from either\ninsertion sort or merge sort.",
    "start": "40850",
    "end": "48790"
  },
  {
    "text": "And it has some nice properties\nthat neither insertions sort nor merge sort have.",
    "start": "48790",
    "end": "54520"
  },
  {
    "text": "But what I want to\ndo is get started with motivating the\nheap data structure,",
    "start": "54520",
    "end": "62870"
  },
  {
    "text": "regardless of whether you're\ninterested in sorting or not. So the notion of a\npriority queue, I think,",
    "start": "62870",
    "end": "68790"
  },
  {
    "text": "makes intuitive\nsense to all of you. It's essentially\na structure that",
    "start": "68790",
    "end": "74750"
  },
  {
    "text": "implements a set S of elements.",
    "start": "74750",
    "end": "81785"
  },
  {
    "start": "81785",
    "end": "88340"
  },
  {
    "text": "And each of these elements\nis associated with the key.",
    "start": "88340",
    "end": "94179"
  },
  {
    "start": "94180",
    "end": "103890"
  },
  {
    "text": "And as you can imagine, a\npriority queue is something where you queue\nup for something,",
    "start": "103890",
    "end": "109250"
  },
  {
    "text": "you want to buy something,\nyou want to sell something. You have certain\npriorities assigned to you,",
    "start": "109250",
    "end": "115580"
  },
  {
    "text": "and you want to pick the maximum\npriority or the min priority. You want to be able to\ndelete it from the queue.",
    "start": "115580",
    "end": "122010"
  },
  {
    "text": "You want to be able to insert\nthings into this queue. You want to be able to change\npriorities in the queue.",
    "start": "122010",
    "end": "127430"
  },
  {
    "text": "So all of these operations\nare interesting operations",
    "start": "127430",
    "end": "132620"
  },
  {
    "text": "that should run fast, and\nfor some definition of fast. Obviously we are interested\nin the asymptotic complexity",
    "start": "132620",
    "end": "139530"
  },
  {
    "text": "definition of fast. In that case, we'll be saying\ndoes this operation run an order n time, order\nlog n time, et cetera.",
    "start": "139530",
    "end": "147400"
  },
  {
    "text": "So in general, I think\nfor the next few lectures, you're going to see a\nspecification of data structure",
    "start": "147400",
    "end": "156599"
  },
  {
    "text": "in terms of the operations\nthat the data structure should perform. And those of you who have\ntaken six double O five,",
    "start": "156600",
    "end": "162660"
  },
  {
    "text": "you'll see that it's basically\nan abstract data type that's associated with\nthese operations.",
    "start": "162660",
    "end": "168690"
  },
  {
    "text": "So it's a spec for the\nabstract data type. In six double O\nfive, you had really",
    "start": "168690",
    "end": "174200"
  },
  {
    "text": "spent a lot of time on\nasymptotic complexity, or the efficiency of operations\non the abstract data type.",
    "start": "174200",
    "end": "180400"
  },
  {
    "text": "Here, in double O six,\nyou'll specify this ADT, and specify the set of\noperations or methods",
    "start": "180400",
    "end": "187320"
  },
  {
    "text": "in the ADT. And we'll talk about whether\nthese are order end complexity",
    "start": "187320",
    "end": "192610"
  },
  {
    "text": "log end complexity, and compare\nand contrast different ADTs. So today's ADT is a heap.",
    "start": "192610",
    "end": "200740"
  },
  {
    "text": "And what is the\nset of operations that we'd like to perform\non a priority queue?",
    "start": "200740",
    "end": "208030"
  },
  {
    "text": "So we can use that to motivate\nthe development of the heap. And those are, insert s x.",
    "start": "208030",
    "end": "215080"
  },
  {
    "text": "So you have a set of\nelements s, and you want to be able to insert\nelement x into set s.",
    "start": "215080",
    "end": "227420"
  },
  {
    "text": "You want to be able\nto do max of s, which is return the element of\ns with the largest key.",
    "start": "227420",
    "end": "243130"
  },
  {
    "text": " And different from\nmax of s is extract",
    "start": "243130",
    "end": "251900"
  },
  {
    "text": "max of x, which not only returns\nthe element with the largest",
    "start": "251900",
    "end": "258578"
  },
  {
    "text": "key, but also removes it from s.",
    "start": "258579",
    "end": "267840"
  },
  {
    "text": "So you have a queue, and\nthe person in the queue was serviced, or the element\nin the queue was serviced,",
    "start": "267840",
    "end": "273439"
  },
  {
    "text": "and then removed from the queue. And finally you can\nimagine changing",
    "start": "273440",
    "end": "281950"
  },
  {
    "text": "the priority of a particular\nelement x in the set s. And this priority,\nthere's an associated key",
    "start": "281950",
    "end": "290740"
  },
  {
    "text": "as we have up there\nwith each element. And that key is called a k.",
    "start": "290740",
    "end": "296900"
  },
  {
    "text": "And increase key s x k would\nincrease the value of x's key",
    "start": "296900",
    "end": "313979"
  },
  {
    "text": "to the new value k. ",
    "start": "313980",
    "end": "321900"
  },
  {
    "text": "And k could correspond to,\nit's just called increase.",
    "start": "321900",
    "end": "327990"
  },
  {
    "text": "Most of the time, you're\nincreasing the value in maybe a particular\napplication. You could have suddenly\na decrease key,",
    "start": "327990",
    "end": "334970"
  },
  {
    "text": "and you would have to know\nwhat the previous value was. And is just a matter\nof exactly what operation you want to perform.",
    "start": "334970",
    "end": "340810"
  },
  {
    "text": "You could call it update, or\nincrement, whatever you like.",
    "start": "340810",
    "end": "346430"
  },
  {
    "text": "I'm going to spend most\nof the time here talking about how you maintain a\nrep invariant of this data",
    "start": "346430",
    "end": "355259"
  },
  {
    "text": "structure called the heap,\nthat allows you to do these operations in\nan efficient way.",
    "start": "355260",
    "end": "362940"
  },
  {
    "text": "And we'll talk about\nwhat the efficiency is, and we'll try to analyze the\nefficiency of these algorithms",
    "start": "362940",
    "end": "368330"
  },
  {
    "text": "that we put up.  So let's talk about a heap. A heap is an implementation\nof a priority queue.",
    "start": "368330",
    "end": "377110"
  },
  {
    "text": "It's amazingly and\narray structure, except that you're\nvisualizing this array",
    "start": "377110",
    "end": "390290"
  },
  {
    "text": "as a nearly complete\nbinary tree. ",
    "start": "390290",
    "end": "401130"
  },
  {
    "text": "And what does that mean exactly? Well, the best way\nto understand that",
    "start": "401130",
    "end": "406290"
  },
  {
    "text": "is by looking at an example. ",
    "start": "406290",
    "end": "411379"
  },
  {
    "text": "We got 10 here, so. ",
    "start": "411380",
    "end": "419338"
  },
  {
    "text": "1, 2, 3, 4, 5, 6, 7, 8, 9, 10. ",
    "start": "419338",
    "end": "424390"
  },
  {
    "text": "So here's my array\nof 10 elements. And the elements are\n16, 14, 10, 8, 7.",
    "start": "424390",
    "end": "435690"
  },
  {
    "text": " So some set of elements\nthat are in random order,",
    "start": "435690",
    "end": "442650"
  },
  {
    "text": "clearly not sorted, and\nI'm looking at the indices, and I'm looking at the elements.",
    "start": "442650",
    "end": "447720"
  },
  {
    "text": "I'm going to visualize this as\na nearly complete binary tree. Is not a full binary\ntree, because I only",
    "start": "447720",
    "end": "453940"
  },
  {
    "text": "have 10 elements\nin it, and it would have to have 15 elements to\nbe a complete binary tree.",
    "start": "453940",
    "end": "461430"
  },
  {
    "text": "And we want to be able to do\nthe general case of an arbitrary size array, and so that's why\nwe have nearly complete here.",
    "start": "461430",
    "end": "470400"
  },
  {
    "text": "So what does it mean to\nvisualize this as a tree? Well, index one is\nthe root of the tree,",
    "start": "470400",
    "end": "479660"
  },
  {
    "text": "and that item is\nthe value is 16. And what I have are indices\n2 and 3 are the children,",
    "start": "479660",
    "end": "495400"
  },
  {
    "text": "and 4, 5, 6, and 7 are\nthe children of 2 and 3.",
    "start": "495400",
    "end": "506560"
  },
  {
    "text": "And 8, 9, and 10 are\nthe children of 4 and 5,",
    "start": "506560",
    "end": "519830"
  },
  {
    "text": "in this case. And so that's the\npicture you want to keep in your head for\nthe rest of this lecture.",
    "start": "519830",
    "end": "525290"
  },
  {
    "text": "Any time you see\nan array, and you say we're going to be\nlooking at the heap representation of the array,\nthe picture on the right",
    "start": "525290",
    "end": "531680"
  },
  {
    "text": "tells you what the\nheap looks like. And so that I'm not going\nto fill in all of these. You can, but I'll do a couple.",
    "start": "531680",
    "end": "538970"
  },
  {
    "text": "So you have 10 here,\nand 8, 7, et cetera.",
    "start": "538970",
    "end": "547639"
  },
  {
    "text": "So that's a heap structure. So what's nice about\nthis heap structure,",
    "start": "547640",
    "end": "552920"
  },
  {
    "text": "is that you'll have tree\nrepresentation of an array,",
    "start": "552920",
    "end": "559550"
  },
  {
    "text": "and that lets you do a\nbunch of interesting things. What do you get out\nof this visualization?",
    "start": "559550",
    "end": "567630"
  },
  {
    "text": "Well, the root of the\ntree is the first element",
    "start": "567630",
    "end": "580060"
  },
  {
    "text": "corresponding to i equals 1. The parent of i is i over 2.",
    "start": "580060",
    "end": "592410"
  },
  {
    "text": "The left child of i is 2i. And the right child\nof i is 2i plus 1.",
    "start": "592410",
    "end": "603000"
  },
  {
    "text": " So that's essentially what\nthis mapping corresponds to.",
    "start": "603000",
    "end": "609810"
  },
  {
    "text": "Now on top of that, this is\njust what a heap corresponds to.",
    "start": "609810",
    "end": "615230"
  },
  {
    "text": "We're going to have\nparticular types of heaps that we'll call\nmax-heaps and min-heaps.",
    "start": "615230",
    "end": "623050"
  },
  {
    "text": "And as you can imagine,\nmax-heaps and min-heaps have additional properties\non top of the basic",
    "start": "623050",
    "end": "628380"
  },
  {
    "text": "keep structures. So this is essentially\na definition of a heap. Now I'm going to define what\nthe max-heap property is.",
    "start": "628380",
    "end": "635020"
  },
  {
    "start": "635020",
    "end": "641510"
  },
  {
    "text": "And the max-heap property\nsays that the key of a node",
    "start": "641510",
    "end": "652270"
  },
  {
    "text": "is greater than or equal to\nthe keys of its children.",
    "start": "652270",
    "end": "660385"
  },
  {
    "start": "660385",
    "end": "666120"
  },
  {
    "text": "OK, that's it. It's obviously\nrecursive, in the sense that you have to have this true\nfor every node in the tree.",
    "start": "666120",
    "end": "679220"
  },
  {
    "text": "And when you get down to\nthe leaves of the tree, they're not children\ncorresponding to the leaves,",
    "start": "679220",
    "end": "685660"
  },
  {
    "text": "So that's a trivial property. But at higher levels, you're\ngoing to have children,",
    "start": "685660",
    "end": "691440"
  },
  {
    "text": "and you have to check that. So if you look at\nthis example here,",
    "start": "691440",
    "end": "696630"
  },
  {
    "text": "maybe I should fill\nthis whole thing out. A have eight and seven\nhere, and six would be nine.",
    "start": "696630",
    "end": "703600"
  },
  {
    "text": "And I have three over here,\nand then two, four, one.",
    "start": "703600",
    "end": "711509"
  },
  {
    "text": "So we can look at this\nand check whether it has the max-heap\nproperty or not.",
    "start": "711510",
    "end": "717720"
  },
  {
    "text": "Does it have the\nmax-heap property? This heap? Yeah. All you have to do is\nlook at these nodes.",
    "start": "717720",
    "end": "725110"
  },
  {
    "text": "one, two, three indices,\nindex four, five, six, but you",
    "start": "725110",
    "end": "730209"
  },
  {
    "text": "don't have to look\nat six and seven, because they don't\nhave any children. But you could shop\nwith five here,",
    "start": "730210",
    "end": "737180"
  },
  {
    "text": "and you look at the\nchildren, and there you go. To the parent is greater\nthan or equal to either",
    "start": "737180",
    "end": "745509"
  },
  {
    "text": "of its children, or its only\nchild, in the case of node five. And so you have the\nmax-heap property.",
    "start": "745510",
    "end": "752650"
  },
  {
    "text": "So fairly\nstraightforward property. And you can imagine defining\nthe min-heap property",
    "start": "752650",
    "end": "761940"
  },
  {
    "text": "in an equivalent way. Just replace the greater\nthan or equal to, with less than or equal to.",
    "start": "761940",
    "end": "768050"
  },
  {
    "text": "So right off the\nbat, what operation",
    "start": "768050",
    "end": "774029"
  },
  {
    "text": "is going to be trivially\nperformed on a max-heap?",
    "start": "774030",
    "end": "779630"
  },
  {
    "text": "This is kind of\ntrivial question. Yep.",
    "start": "779630",
    "end": "784715"
  },
  {
    "text": "Just finding the\nbiggest element. Exactly right. The max operation.",
    "start": "784715",
    "end": "790330"
  },
  {
    "text": "Now, what about extract max? Is that trivially\nperformed on a max-heap?",
    "start": "790330",
    "end": "799056"
  },
  {
    "text": "No.  What do I mean by that?",
    "start": "799056",
    "end": "804220"
  },
  {
    "text": "When you say, max is\ntrivially performed, what it means is that\nyou can return the max,",
    "start": "804220",
    "end": "810480"
  },
  {
    "text": "you can find the maximum\nelement, or a maximum element, and you obviously\ndon't modify the heap.",
    "start": "810480",
    "end": "817050"
  },
  {
    "text": "And the heap stays the same,\nso it stays a max-heap. In general, when we talk\nabout data structures,",
    "start": "817050",
    "end": "823000"
  },
  {
    "text": "and this goes back to\nrep invariance, which I've mentioned\nalready, you typically want to maintain\nthis rep invariant.",
    "start": "823000",
    "end": "829440"
  },
  {
    "text": "And so the rep invariant of our\ndata structure, in this case, is a max-heap property.",
    "start": "829440",
    "end": "835650"
  },
  {
    "text": "OK. So we want to maintain\nthe max-heap property as we modify the heat. So if you go from\none heap to another,",
    "start": "835650",
    "end": "842610"
  },
  {
    "text": "you start at the max-heap, you\nwant to end with the max-heap. It makes perfect sense,\nbecause in one of the simplest",
    "start": "842610",
    "end": "850110"
  },
  {
    "text": "things that you want to\ndo in a priority queue, is you want to be able to\ncreate a priority queue,",
    "start": "850110",
    "end": "855270"
  },
  {
    "text": "and you want to be able to run\nextract max on the priority queue, over and over.",
    "start": "855270",
    "end": "860704"
  },
  {
    "text": "And what that means, is that\nyou take the max element, you delete it, take the next\nmax element, delete it,",
    "start": "860704",
    "end": "865820"
  },
  {
    "text": "and so on and so forth. And there you go. It's a bit of a\npreview here, but you",
    "start": "865820",
    "end": "872490"
  },
  {
    "text": "could imagine that if\nyou did that, you would get a sorted list of\nelements in decreasing order.",
    "start": "872490",
    "end": "880460"
  },
  {
    "text": "So you see the\nconnection to sorting, because you could imagine\nthat once we have this heap structure, and we can maintain\nthe max-heap property,",
    "start": "880460",
    "end": "887810"
  },
  {
    "text": "that we could continually\nrun extract max on it. And if you could build extract\nmax in an efficient way,",
    "start": "887810",
    "end": "893790"
  },
  {
    "text": "you might have a fantastic\nsorting algorithm. ",
    "start": "893790",
    "end": "899570"
  },
  {
    "text": "So, the big question\nthat really remains, is how do we maintain\nthe max-heap property",
    "start": "899570",
    "end": "907520"
  },
  {
    "text": "as we modify the heap? And the other question,\nwhich I haven't answered",
    "start": "907520",
    "end": "915029"
  },
  {
    "text": "is-- this array that turns\nout it was a max-heap,",
    "start": "915030",
    "end": "928760"
  },
  {
    "text": "but it's quite\npossible that I have a trivial example of an array.",
    "start": "928760",
    "end": "933884"
  },
  {
    "start": "933885",
    "end": "940960"
  },
  {
    "text": "In fact, let me make this one.  That is not a max-heap.",
    "start": "940960",
    "end": "946870"
  },
  {
    "text": "It's not a max-heap, it's\nnot a min-heap, it's neither. Right? it's just a heap.",
    "start": "946870",
    "end": "951930"
  },
  {
    "text": "So if I just\ntransform, or visualize I should say, this array as a\nheap, I don't have a max-heap,",
    "start": "951930",
    "end": "961200"
  },
  {
    "text": "I don't have a min-heap. So if I'm very interested\nin sorting, and I am,",
    "start": "961200",
    "end": "967076"
  },
  {
    "text": "there's this\nanother thing that's sort of missing here\nthat we have to work on, which is how are we going\nto build a max-heap out",
    "start": "967076",
    "end": "974670"
  },
  {
    "text": "of an initially unsorted array. Which may or may not\nturn into a max-heap.",
    "start": "974670",
    "end": "981210"
  },
  {
    "text": "This trivially happened to\nbe exactly the right thing, because I picked it, and\nit turned into a max-heap",
    "start": "981210",
    "end": "986810"
  },
  {
    "text": "just by visualizing it. But it's quite\npossible that you have arrays that are input to\nyour sorting algorithm that",
    "start": "986810",
    "end": "993020"
  },
  {
    "text": "look like that.  OK, so let's dive\ninto heap operations.",
    "start": "993020",
    "end": "1001060"
  },
  {
    "text": "I'm going to have spend\nsome time describing to you",
    "start": "1001060",
    "end": "1006910"
  },
  {
    "text": "a bunch of different methods\nthat you would call on a heap. And all of these\nmethods are going",
    "start": "1006910",
    "end": "1013779"
  },
  {
    "text": "to have to maintain\nour representation invariant of the\nmax-heap property.",
    "start": "1013780",
    "end": "1019840"
  },
  {
    "text": "So what are the heap\noperations that we have to implement and\nanalyze the complexity for?",
    "start": "1019840",
    "end": "1028910"
  },
  {
    "text": "Well, we're going to\nhave build-max-heap which produces a max-heap\nfrom an arbitrary or unordered",
    "start": "1028910",
    "end": "1044130"
  },
  {
    "text": "array.  So somehow I got to turn\nthis into, for example,",
    "start": "1044130",
    "end": "1053419"
  },
  {
    "text": "four, two, one. Which is in effect,\nsorting this array.",
    "start": "1053420",
    "end": "1060510"
  },
  {
    "text": "Or changing the order. Maybe not fully sorting\nit, but changing the order. So that's what I have to\ndo, and build-max-heap",
    "start": "1060510",
    "end": "1067240"
  },
  {
    "text": "is going to have to do that. In order to do build-max-heap,\nthe first procedure",
    "start": "1067240",
    "end": "1079660"
  },
  {
    "text": "that I'm going to describe to\nyou, is called max-heapify.",
    "start": "1079660",
    "end": "1085320"
  },
  {
    "text": "Heapify. Sounds a little\nstrange, but I guess",
    "start": "1085320",
    "end": "1091440"
  },
  {
    "text": "you can -ify pretty\nmuch anything. So you correct a\nsingle violation",
    "start": "1091440",
    "end": "1104260"
  },
  {
    "text": "of the heap property in a\nsubtree, a subtree's root.",
    "start": "1104260",
    "end": "1121440"
  },
  {
    "text": " And I'll explain what I mean\nby that in just a minute.",
    "start": "1121440",
    "end": "1128250"
  },
  {
    "text": "So max-heapify is the\nfundamental operation that we have to understand here. And we're going to\nuse it over and over.",
    "start": "1128250",
    "end": "1136150"
  },
  {
    "text": "What it does, is\ntake something that is not a heap, not a max-heap.",
    "start": "1136150",
    "end": "1142260"
  },
  {
    "text": "When I say not a\nheap from now on, pretend that I'm\nsaying not a max-heap. We're only going to be\ntalking about max-heaps",
    "start": "1142260",
    "end": "1148580"
  },
  {
    "text": "for the rest of this lecture.  What max-heapify does,\nis take something",
    "start": "1148580",
    "end": "1157500"
  },
  {
    "text": "that is not quite a max-heap. It can't take\nanything arbitrary. It's going to take\nsomething where there's",
    "start": "1157500",
    "end": "1163520"
  },
  {
    "text": "a single violation of\nthe max-heap property at some subtree of this\nheap that is given to you,",
    "start": "1163520",
    "end": "1172440"
  },
  {
    "text": "and there's a single\nviolation of that. And it's going to fix that. And we need to be able\nto do this recursively",
    "start": "1172440",
    "end": "1180480"
  },
  {
    "text": "at different levels\nto go build a max-heap from an unordered array.",
    "start": "1180480",
    "end": "1185622"
  },
  {
    "text": "Then once you have\nthat, you can do all sorts of things like insert\nand extract max, and heap sort, and so on and so forth.",
    "start": "1185622",
    "end": "1192220"
  },
  {
    "text": "So let's take a look at\nmax-heapify using an example. I'm not going to write\npseudocode for max-heapify.",
    "start": "1192220",
    "end": "1200890"
  },
  {
    "text": "I'll run through an example, and\nthe pseudocode is in the notes. The big assumption,\nand you think",
    "start": "1200890",
    "end": "1207660"
  },
  {
    "text": "of this as a precondition,\nfor running max-heapify,",
    "start": "1207660",
    "end": "1213480"
  },
  {
    "text": "is the trees rooted at left\ni and right i are max-heaps.",
    "start": "1213480",
    "end": "1230640"
  },
  {
    "text": " So max-heapify is going\nto look like a comma i.",
    "start": "1230640",
    "end": "1240740"
  },
  {
    "text": "a is simply the array,\nand i is the index. Max-heapify is\nwilling to, you're",
    "start": "1240740",
    "end": "1248640"
  },
  {
    "text": "allowed to crash and\nnot do anything useful",
    "start": "1248640",
    "end": "1253840"
  },
  {
    "text": "if this precondition is\nviolated in max-heapify. But if the precondition is\ntrue, then what you have to do",
    "start": "1253840",
    "end": "1260720"
  },
  {
    "text": "is, you have to return\na max-heap correcting this violation. That's the contract.",
    "start": "1260720",
    "end": "1266170"
  },
  {
    "text": " So let's take a\nlook at an example.",
    "start": "1266170",
    "end": "1273560"
  },
  {
    "text": "I think what I want to\ndo is start over here. ",
    "start": "1273560",
    "end": "1280670"
  },
  {
    "text": "I want you to see all\nof the steps here. So we'll take a simple\nexample, and we'll run through max-heapify. ",
    "start": "1280670",
    "end": "1293550"
  },
  {
    "text": "And let's take a\nlook at 16, four--",
    "start": "1293550",
    "end": "1325720"
  },
  {
    "text": "I'm just going to draw the\nindices for this first example, and then I won't bother. ",
    "start": "1325720",
    "end": "1333230"
  },
  {
    "text": "So there you go. Is this a max-heap? No.",
    "start": "1333230",
    "end": "1338710"
  },
  {
    "text": "Because right here,\nI've got a problem. 4 is less than 14, therefore\nI have a violation.",
    "start": "1338710",
    "end": "1347169"
  },
  {
    "text": "And so, if you look at the\ncall max-heapify A comma 2,",
    "start": "1347170",
    "end": "1358520"
  },
  {
    "text": "this is an index 2,\nand all you have to do is to look at this subtree. And what you need to\nbe satisfied in order",
    "start": "1358520",
    "end": "1367630"
  },
  {
    "text": "to run max-heapify, is that the\nsubtrees of nodes index two,",
    "start": "1367630",
    "end": "1374400"
  },
  {
    "text": "which is this four\nnode, are max-heaps. And if you go look below, you\nsee that this is a max-heap",
    "start": "1374400",
    "end": "1380380"
  },
  {
    "text": "and that's a max-heap. Most of the time,\nby the way, you will be sort of\nworking bottom up,",
    "start": "1380380",
    "end": "1386140"
  },
  {
    "text": "and that's why this is\ngoing to make sense. This will all work\nout, because leaves are by definition max-heaps.",
    "start": "1386140",
    "end": "1393330"
  },
  {
    "text": "Because you don't have\nto check anything. When you put two\nleaves together, and you want to create a tree\nlike that, or a heap like that,",
    "start": "1393330",
    "end": "1402210"
  },
  {
    "text": "then you run max-heapify. And then when you have a\ncouple different max-heaps,",
    "start": "1402210",
    "end": "1407760"
  },
  {
    "text": "and you want to\nput them together to make it a bigger max-heap,\nyou'd have run max-heapify.",
    "start": "1407760",
    "end": "1414289"
  },
  {
    "text": "So that's the way\nit's going to work. So you want to do a\nmax-heapify A comma 2.",
    "start": "1414289",
    "end": "1419471"
  },
  {
    "text": "One of the things that's\ngoing to be important, not in this example, but\nwhen we get to sorting,",
    "start": "1419472",
    "end": "1425040"
  },
  {
    "text": "is that we want to know what\nthe size of the heap is. And in this case,\nthe heap size is 10.",
    "start": "1425040",
    "end": "1431820"
  },
  {
    "text": "So, what does max-heapify do? Well, all max-heapify does\nis exchanges elements.",
    "start": "1431820",
    "end": "1440260"
  },
  {
    "text": "And so, if you looked at\nthe code for max-heapify, and you walked through it,\nthis is what it would do.",
    "start": "1440260",
    "end": "1446700"
  },
  {
    "text": "You're going to\nlook at 4 and 14, and it's going to\nsay, OK, I'm going to look at both my children.",
    "start": "1446700",
    "end": "1452309"
  },
  {
    "text": "And I'm going to go ahead and\nexchange with the bigger child. So I'm going to\nexchange AA[2] with AA[4].",
    "start": "1452310",
    "end": "1461660"
  },
  {
    "text": " And what that would do is,\ntake this, make this 4,",
    "start": "1461660",
    "end": "1475450"
  },
  {
    "text": "and make this 14. And that would be step one.",
    "start": "1475450",
    "end": "1480630"
  },
  {
    "text": "And then when you\nget to this point, recursively, you'd realize\nthat the max-heap property",
    "start": "1480630",
    "end": "1488700"
  },
  {
    "text": "at this level is violated. And so you would go ahead and\ncall max-heapify A comma 4.",
    "start": "1488700",
    "end": "1506270"
  },
  {
    "text": "And when that happens,\nthat call happens,",
    "start": "1506270",
    "end": "1512380"
  },
  {
    "text": "you're going to look at the\ntwo children corresponding to this little subtree\nthere, and you're",
    "start": "1512380",
    "end": "1519679"
  },
  {
    "text": "going to do the exchange. You're going to have\n8 here and 4 here.",
    "start": "1519680",
    "end": "1524900"
  },
  {
    "text": "So you would exchange\nAA[4] with AA[8].",
    "start": "1524900",
    "end": "1536620"
  },
  {
    "text": "And now you're done, so\nthere's no more calls.",
    "start": "1536620",
    "end": "1544770"
  },
  {
    "text": "So, fairly straightforward. It's actually not any more\ncomplicated than this. There may be many steps.",
    "start": "1544770",
    "end": "1551840"
  },
  {
    "text": "What might happen is that you'd\nhave to go all the way down to the leaves. And in this case, you\nwent a couple of steps,",
    "start": "1551840",
    "end": "1558690"
  },
  {
    "text": "and then you got to stop. But obviously, you\ncould have a large heap, and it could take\na bunch of time.",
    "start": "1558690",
    "end": "1564630"
  },
  {
    "text": "So, what is the\ncomplexity of max-heapify?",
    "start": "1564630",
    "end": "1570480"
  },
  {
    "text": "Anybody?  Yeah. Back there. AUDIENCE: Ultimately,\npotentially,",
    "start": "1570480",
    "end": "1576764"
  },
  {
    "text": "if the tree is\ntotally upside down, you could potentially switch\nevery node to make it order in.",
    "start": "1576764",
    "end": "1583900"
  },
  {
    "text": "PROFESSOR: Every node\nto make it order in. Everybody, anybody.",
    "start": "1583900",
    "end": "1589100"
  },
  {
    "text": "Do you have a different answer? AUDIENCE: Log n. PROFESSOR: Why? Why is it log n. AUDIENCE: Because I think\nthe worst case scenario,",
    "start": "1589100",
    "end": "1596170"
  },
  {
    "text": "all of your-- the\nworst case scenario you would have [INAUDIBLE]\non the left-hand side,",
    "start": "1596170",
    "end": "1602539"
  },
  {
    "text": "[INAUDIBLE] right-hand side. And it would be skewed.",
    "start": "1602540",
    "end": "1608146"
  },
  {
    "text": "[INAUDIBLE] ",
    "start": "1608146",
    "end": "1628864"
  },
  {
    "text": "PROFESSOR: So you're\narguing that the solution to the recurrence gives you\na logarithmic complexity.",
    "start": "1628864",
    "end": "1634190"
  },
  {
    "text": "Alright. Not quite. There's an easier\nway of arguing this. this Yeah. Back there.",
    "start": "1634190",
    "end": "1640030"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE].  PROFESSOR: That's right.",
    "start": "1640030",
    "end": "1645840"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE].  PROFESSOR: That's right.",
    "start": "1645840",
    "end": "1651680"
  },
  {
    "text": "So what is the complexity? AUDIENCE: Log n. PROFESSOR: Log n. Great. Excellent. Definitely worth a cushion.",
    "start": "1651680",
    "end": "1657480"
  },
  {
    "text": " Missed you by that much. AUDIENCE: Thank you.",
    "start": "1657480",
    "end": "1662550"
  },
  {
    "text": "PROFESSOR: It's pretty\nsoft, by the way. Right. OK. So, if I hit somebody,\nthey get a cushion.",
    "start": "1662550",
    "end": "1668531"
  },
  {
    "text": "OK. ",
    "start": "1668531",
    "end": "1674130"
  },
  {
    "text": "That's exactly right. Thanks for that description. So, first off, there's\ntwo important aspects",
    "start": "1674130",
    "end": "1681770"
  },
  {
    "text": "to this argument. The first thing is,\nthat we're visualizing this is a nearly\ncomplete binary tree.",
    "start": "1681770",
    "end": "1688505"
  },
  {
    "text": "It is not an unbalanced tree. Alright? We'll talk about unbalanced\ntrees and balanced trees in the next couple of lectures.",
    "start": "1688505",
    "end": "1694930"
  },
  {
    "text": "But the visualization of a heap\nis a nearly complete binary tree. And, in fact, if\nyou had 15 elements,",
    "start": "1694930",
    "end": "1700730"
  },
  {
    "text": "it would be a\nperfect binary tree. So the good news is, that the\nheight of this visualization",
    "start": "1700730",
    "end": "1708220"
  },
  {
    "text": "tree is bounded by log n. That's the good news.",
    "start": "1708220",
    "end": "1713460"
  },
  {
    "text": "And you want to\nexploit that good news by creating algorithms\nthat go level by level.",
    "start": "1713460",
    "end": "1719750"
  },
  {
    "text": "If you can do that, you're going\nto have logarithmic complexity algorithms. So that was one aspect of it.",
    "start": "1719750",
    "end": "1725809"
  },
  {
    "text": "The other aspect of it,\nis the key assumption that we're making, with\nrespect to build-max-heap,",
    "start": "1725810",
    "end": "1730990"
  },
  {
    "text": "that there was a\nsingle violation. It is true that the answer that\nwas given that was order n,",
    "start": "1730990",
    "end": "1737730"
  },
  {
    "text": "would be a problem. I could set it up so that's\nactually the right answer, if I did not have this\nassumption-- where",
    "start": "1737730",
    "end": "1745030"
  },
  {
    "text": "do I have that here-- assume\nthat the trees rooted at left i and right i are max-heaps.",
    "start": "1745030",
    "end": "1750095"
  },
  {
    "text": "So maybe that's what\nyou were thinking. But this is a key assumption. This is going back\nand like making",
    "start": "1750095",
    "end": "1756070"
  },
  {
    "text": "connections between classes. This is a precondition\nthat makes the algorithm more efficient.",
    "start": "1756070",
    "end": "1762500"
  },
  {
    "text": "Makes the implementation easier. And this precondition\nessentially",
    "start": "1762500",
    "end": "1768590"
  },
  {
    "text": "says that you have to just go\ndown and do a number of steps, that's the number of levels in\nthe tree, which is logarithmic.",
    "start": "1768590",
    "end": "1774185"
  },
  {
    "text": " So that's the story here\nwith the max-heapify.",
    "start": "1774185",
    "end": "1780390"
  },
  {
    "text": "It's order log n, in\nterms of complexity. That's the number of\nsteps that you have.",
    "start": "1780390",
    "end": "1786640"
  },
  {
    "text": "And it's a basic building block\nfor all of the other algorithms",
    "start": "1786640",
    "end": "1793740"
  },
  {
    "text": "that we look at for the rest\nof this lecture, and in section tomorrow.",
    "start": "1793740",
    "end": "1800059"
  },
  {
    "text": "Let's talk about how you\nwould take max-heapify and use",
    "start": "1800060",
    "end": "1805610"
  },
  {
    "text": "it to do build-max-heap. So the first step\nnow, let's say that we",
    "start": "1805610",
    "end": "1811050"
  },
  {
    "text": "want to go and get a\nnice sorting algorithm. We don't like insertion sort,\nwe don't like merge sort.",
    "start": "1811050",
    "end": "1817710"
  },
  {
    "text": "We'd like to get a\nheap-based sorting algorithm. One of the things that\nwe need to do, as I said,",
    "start": "1817710",
    "end": "1824059"
  },
  {
    "text": "is to take an unordered\narray, and turn it into a max-heap, which is\na non-trivial thing to do.",
    "start": "1824060",
    "end": "1831250"
  },
  {
    "text": "And once we do that, we can\ndo this extract-max deal to sort the array.",
    "start": "1831250",
    "end": "1837400"
  },
  {
    "text": "So the first step is, we\nwant to convert an array A 1",
    "start": "1837400",
    "end": "1845800"
  },
  {
    "text": "through n into a max-heap.",
    "start": "1845800",
    "end": "1851940"
  },
  {
    "text": "And the key word\nhere is max-heap, because every array can\nbe visualized as a heap.",
    "start": "1851940",
    "end": "1857840"
  },
  {
    "text": "And I am going write the\npseudocode for build-max-heap, because it's just\ntwo lines of code.",
    "start": "1857840",
    "end": "1866190"
  },
  {
    "text": "And that's about the limit\nof a size of a program",
    "start": "1866190",
    "end": "1871570"
  },
  {
    "text": "I can really understand,\nor explain, I should say. ",
    "start": "1871570",
    "end": "1879699"
  },
  {
    "text": "And this is what it looks like. ",
    "start": "1879699",
    "end": "1890960"
  },
  {
    "text": "Alright. that's it. Build-max-heap says go from\ni equals n, by 2, down to 1.",
    "start": "1890960",
    "end": "1900419"
  },
  {
    "text": "Max-heapify A of i. So someone explain to me why\nI can start with n over 2,",
    "start": "1900420",
    "end": "1911940"
  },
  {
    "text": "and why I'm going down to 1. Yep. I saw you first.",
    "start": "1911940",
    "end": "1916948"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE].  PROFESSOR: Leaves are good. Leaves are good.",
    "start": "1916948",
    "end": "1922850"
  },
  {
    "text": "I'll let you go on in a second. Leaves are good, because if you\nlook at elements A of n over 2,",
    "start": "1922850",
    "end": "1934519"
  },
  {
    "text": "plus 1 through n,\nare all leaves.",
    "start": "1934520",
    "end": "1941452"
  },
  {
    "text": "That's a good observation.  And this is true for any array.",
    "start": "1941452",
    "end": "1948090"
  },
  {
    "text": "It doesn't matter what n is. Doesn't have the power of\n2, or 2 [INAUDIBLE] minus 1, or anything like that.",
    "start": "1948090",
    "end": "1953170"
  },
  {
    "text": "And leaves a good,\nbecause they automatically satisfy the backseat property.",
    "start": "1953170",
    "end": "1958390"
  },
  {
    "text": "Continue. AUDIENCE: OK. [INAUDIBLE]. ",
    "start": "1958390",
    "end": "1974911"
  },
  {
    "text": "PROFESSOR: That's exactly right. Beautiful. ",
    "start": "1974911",
    "end": "1980010"
  },
  {
    "text": "I won't hit anybody here. So that's it. The reason this works,\nis because you're",
    "start": "1980010",
    "end": "1988000"
  },
  {
    "text": "calling max-heapify\nmultiple times, but every time you call it,\nyou satisfy the precondition.",
    "start": "1988000",
    "end": "1995780"
  },
  {
    "text": "And the leaves are\nautomatically max-heaps. Then you start with n over 2.",
    "start": "1995780",
    "end": "2003490"
  },
  {
    "text": "You are going to see two\nleaves as your children for the n over 2 node, right? I mean, just pick\nan example here.",
    "start": "2003490",
    "end": "2011040"
  },
  {
    "text": "Our 2 is an A of 5, right? You're out here.",
    "start": "2011040",
    "end": "2016710"
  },
  {
    "text": "In this case, depending\non the value of n, you may have either two\nchildren, or just one child. And you have one child.",
    "start": "2016710",
    "end": "2022130"
  },
  {
    "text": "But regardless of\nthat, that's going to be a max-heap,\nbecause it's a leaf. And so you'll have\ntwo leaves, and you",
    "start": "2022130",
    "end": "2028490"
  },
  {
    "text": "need to put them together. And that's a fairly\nstraightforward process of attaching the\nleaves together.",
    "start": "2028490",
    "end": "2035809"
  },
  {
    "text": "You might have to do a swap,\nbased on what the element is. One operation and you\nget a little small tree,",
    "start": "2035810",
    "end": "2043430"
  },
  {
    "text": "that's a max-heap. And then you do a\nbunch of other things that all work on leaves,\nbecause n over 2 minus 1",
    "start": "2043430",
    "end": "2052300"
  },
  {
    "text": "is probably also\ngoing to have leaves as it's children, given\nthe large value of n.",
    "start": "2052300",
    "end": "2057428"
  },
  {
    "text": "There will be a\nbunch of things where you work on these level\none nodes, if you will,",
    "start": "2057428",
    "end": "2063110"
  },
  {
    "text": "that all have\nleaves as children. And then you work on\nthe level two nodes, and so on and so forth.",
    "start": "2063110",
    "end": "2068719"
  },
  {
    "text": "And as I said before,\nyou're working your way up, and you're only\nworking with max-heaps as your left child\nand your right child.",
    "start": "2068719",
    "end": "2077033"
  },
  {
    "text": "That make sense? ",
    "start": "2077033",
    "end": "2082629"
  },
  {
    "text": "If you do that, and this\nis a fairly straightforward question, if you do\na straightforward",
    "start": "2082630",
    "end": "2088070"
  },
  {
    "text": "analysis of this, what is the\ncomplexity of build-max-heap? ",
    "start": "2088070",
    "end": "2094669"
  },
  {
    "text": "Yep. AUDIENCE: [INAUDIBLE]. PROFESSOR: Right. So that's order.",
    "start": "2094670",
    "end": "2100460"
  },
  {
    "text": " Order n log n. Now, this is through\na simple analysis.",
    "start": "2100460",
    "end": "2108220"
  },
  {
    "text": "Now I'm going to\ngive you a chance to tell me if you can\ndo better than that.",
    "start": "2108220",
    "end": "2115070"
  },
  {
    "text": "Or not. In terms of analysis.  It's a subtle question.",
    "start": "2115070",
    "end": "2122480"
  },
  {
    "text": "It's a subtle question,\nthat I'm asking. I'm saying, this is\nthe algorithm, alright?",
    "start": "2122480",
    "end": "2129160"
  },
  {
    "text": "I don't want you to\nchange the algorithm, but I want you to\nchange your analysis.",
    "start": "2129160",
    "end": "2134340"
  },
  {
    "text": "The analysis that\nyou just did was, you said, I got\n[INAUDIBLE] n steps here,",
    "start": "2134340",
    "end": "2142260"
  },
  {
    "text": "because it's n by 2 steps. Looks like each of the\nsteps is taking log n time.",
    "start": "2142260",
    "end": "2149800"
  },
  {
    "text": "So that's n log n. And I was careful. I put big O here.",
    "start": "2149800",
    "end": "2155950"
  },
  {
    "text": "OK? Because that's an upper bond. So that's a valid answer. Can you do better?",
    "start": "2155950",
    "end": "2161650"
  },
  {
    "text": "Can you do a better\nanalysis-- and I'll let you go first-- can you do\na better analysis that somehow",
    "start": "2161650",
    "end": "2168910"
  },
  {
    "text": "gives me better complexity? AUDIENCE: I think you\nbring it to [INAUDIBLE].",
    "start": "2168910",
    "end": "2174253"
  },
  {
    "text": "PROFESSOR: OK. How? AUDIENCE: So each node get a\nmaximum of two [INAUDIBLE].",
    "start": "2174253",
    "end": "2179672"
  },
  {
    "text": " So, for some n, there will be a\nconstant number of comparisons",
    "start": "2179672",
    "end": "2193616"
  },
  {
    "text": "to max-heapify that [INAUDIBLE]. ",
    "start": "2193616",
    "end": "2203724"
  },
  {
    "text": "PROFESSOR: Yeah. It's hard to explain. You're on the right track. Absolutely on the right track.",
    "start": "2203724",
    "end": "2210556"
  },
  {
    "text": "So it turns out that,\nand I'll do this, it's going to take\na few minutes here, because I write some things out.",
    "start": "2210556",
    "end": "2215780"
  },
  {
    "text": "You have to sum up a bunch of\narithmetic series, and so on. So it's a bit unfair to have\nto speak out the answer,",
    "start": "2215780",
    "end": "2223940"
  },
  {
    "text": "but the correct\nanswer, in fact, is that this is order n complexity.",
    "start": "2223940",
    "end": "2230820"
  },
  {
    "text": "This algorithm\nthat I put up here, if you do a careful\nanalysis of it, you can get order n out of it.",
    "start": "2230820",
    "end": "2236980"
  },
  {
    "text": "And we'll do this\ncareful analysis. And I'll tell you\nwhy it's order n, in terms of a hand\nwavy argument.",
    "start": "2236980",
    "end": "2244880"
  },
  {
    "text": "A hand wavy argument is\nthat you're doing basically,",
    "start": "2244880",
    "end": "2250026"
  },
  {
    "text": "obviously no work\nfor the leaves. But you're not\neven counting that, because you're\nstarting with n over 2. But when you look at\nthe n over 2 node,",
    "start": "2250026",
    "end": "2258090"
  },
  {
    "text": "it's essentially one\noperation, or two operations, in whichever way you\ncount, to build max-heap.",
    "start": "2258090",
    "end": "2265780"
  },
  {
    "text": "And so for that\nfirst level of nodes, it's exactly one operation.",
    "start": "2265780",
    "end": "2271280"
  },
  {
    "text": "The first level that\nare above the leaves. For the next level, you may\nbe doing two operations.",
    "start": "2271280",
    "end": "2277180"
  },
  {
    "text": "And so there is an\nincrease in operations as you get higher and higher up.",
    "start": "2277180",
    "end": "2282570"
  },
  {
    "text": "But there are fewer\nand fewer nodes as you at higher and higher up, right? Because there's only one node\nthat is the highest level node.",
    "start": "2282570",
    "end": "2292190"
  },
  {
    "text": "The root node. That node has logarithmic\nnumber of operations, but it's only one node.",
    "start": "2292190",
    "end": "2299980"
  },
  {
    "text": "The ones down on the bottom\nhave a constant number of operations. So I'll put all of this\ndown, and hopefully you'll",
    "start": "2299980",
    "end": "2306830"
  },
  {
    "text": "be convinced by the time\nwe've done some math here, or some arithmetic here, but\nyou can quantify what I just",
    "start": "2306830",
    "end": "2315370"
  },
  {
    "text": "said fairly easily,\nas long as you're",
    "start": "2315370",
    "end": "2320430"
  },
  {
    "text": "careful about the counting\nthat we have to do. So this is really,\ntruly counting. Analysis has a lot\nto do with counting.",
    "start": "2320430",
    "end": "2327890"
  },
  {
    "text": "And we're just being more\ncareful with the counting, as opposed to this\nstraightforward argument that",
    "start": "2327890",
    "end": "2333340"
  },
  {
    "text": "wasn't particularly\ncareful with the counting. So let's take a look at\nexactly this algorithm.",
    "start": "2333340",
    "end": "2340280"
  },
  {
    "text": "And I want to make\nan observation. Which is what I just did,\nbut I'd like to write it out. Where we say, max-heapify\ntakes constant time",
    "start": "2340280",
    "end": "2358530"
  },
  {
    "text": "for nodes that are one\nlevel above leaves.",
    "start": "2358530",
    "end": "2369380"
  },
  {
    "start": "2369380",
    "end": "2374589"
  },
  {
    "text": "And, in general,\norder L time for nodes",
    "start": "2374590",
    "end": "2391020"
  },
  {
    "text": "that are L levels\nabove the leaves.",
    "start": "2391020",
    "end": "2400615"
  },
  {
    "text": " That's observation number one.",
    "start": "2400615",
    "end": "2409080"
  },
  {
    "text": "Observation number\ntwo is that we have n over 4 nodes\nthat, give or take one,",
    "start": "2409080",
    "end": "2417090"
  },
  {
    "text": "depending on the value of n. I don't want to get hung\nup on floors and ceilings.",
    "start": "2417090",
    "end": "2422326"
  },
  {
    "text": "And in any case,\nwe're eventually going to get an\nasymptotic result, so we don't have to\nworry about that. But we have n over four nodes\nwith level one, n over 8",
    "start": "2422326",
    "end": "2432070"
  },
  {
    "text": "with level two.  And 1 node with log\nn, sort of the log n",
    "start": "2432070",
    "end": "2445860"
  },
  {
    "text": "level, which is the root. So this is decrease in\nterms of nodes as the work",
    "start": "2445860",
    "end": "2454500"
  },
  {
    "text": "that you're doing increases. And that's the careful\naccounting that we have to do.",
    "start": "2454500",
    "end": "2459530"
  },
  {
    "text": "And so all I have to do now\nto prove to you that this is actually an\norder and algorithm,",
    "start": "2459530",
    "end": "2466530"
  },
  {
    "text": "is to write a little\nsummation that sums up all of the work across\nthese different levels.",
    "start": "2466530",
    "end": "2473340"
  },
  {
    "start": "2473340",
    "end": "2480670"
  },
  {
    "text": "And so the total amount\nof work in the 4 loop",
    "start": "2480670",
    "end": "2494970"
  },
  {
    "text": "can be summed as n divided\nby 4, times 1, times c.",
    "start": "2494970",
    "end": "2500180"
  },
  {
    "text": "So this sum, I have\none level here, and I'm going to do some\nconstant amount of work",
    "start": "2500180",
    "end": "2506339"
  },
  {
    "text": "for that one level. So I'm just going\nto put c out there, because eventually I can\ntake away the c, right? That's the beauty\nof asymptotics.",
    "start": "2506340",
    "end": "2513190"
  },
  {
    "text": "So we don't need to\nargue about how much work is done at that one\nlevel, how many swaps,",
    "start": "2513190",
    "end": "2518740"
  },
  {
    "text": "et cetera, et cetera. But the fact is that\nthese n over four nodes are one level above the leaves.",
    "start": "2518740",
    "end": "2523830"
  },
  {
    "text": "That's what's key. And then I have n over 8 times\n2c, plus n over 16 times 3c,",
    "start": "2523830",
    "end": "2534470"
  },
  {
    "text": "plus 1 times log of n c.",
    "start": "2534470",
    "end": "2543170"
  },
  {
    "text": "I've essentially written\nin an arithmetic expression exactly what I have\nobserved on the board above.",
    "start": "2543170",
    "end": "2551839"
  },
  {
    "text": "Stop me if you have questions. Now I'm going to set--\njust to try and make",
    "start": "2551840",
    "end": "2557549"
  },
  {
    "text": "this a little easier to\nlook at, and easy to reason about-- I'm going to set\nn over 4 to 2 raised to k,",
    "start": "2557550",
    "end": "2568900"
  },
  {
    "text": "and I'm going to simplify. I'm just pulling\nout certain things, and this thing is going\nto translate to c times 2",
    "start": "2568900",
    "end": "2574829"
  },
  {
    "text": "raised to k, times 1,\ndivided by 2 raised to 0,",
    "start": "2574830",
    "end": "2584970"
  },
  {
    "text": "2 divided by 2 raised to 1,\n3 divided by 2 raised to 2, et cetera, k plus 1\ndivided by 2 raised to k.",
    "start": "2584970",
    "end": "2594349"
  },
  {
    "text": " Now, if that was\nconfusing, raise your hand,",
    "start": "2594350",
    "end": "2600920"
  },
  {
    "text": "but it's essentially identical\ngiven the substitution and sort of just applying the\ndistributive law.",
    "start": "2600920",
    "end": "2608700"
  },
  {
    "text": "And the reason I did\nthis, is because I wanted you to see the arithmetic\nexpression that's in here.",
    "start": "2608700",
    "end": "2617380"
  },
  {
    "text": "Now we do know that 2 raised\nto k is n over four, of course.",
    "start": "2617380",
    "end": "2623079"
  },
  {
    "text": "But if you look at this\nexpression that's inside here,",
    "start": "2623080",
    "end": "2628100"
  },
  {
    "text": "what is this expression? Anyone? Can you bound this expression?",
    "start": "2628100",
    "end": "2636950"
  },
  {
    "text": "Someone? For the cushion. ",
    "start": "2636950",
    "end": "2644730"
  },
  {
    "text": "Remember your arithmetic\nseries from wherever it was.",
    "start": "2644730",
    "end": "2650994"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Yeah. You know better than I. I guess\nyou took those courses more",
    "start": "2650994",
    "end": "2657980"
  },
  {
    "text": "recently, but what\nhappens with that? Those of you who\nhave calculators,",
    "start": "2657980",
    "end": "2663620"
  },
  {
    "text": "I mean, you could plug\nthat in, and answer that.",
    "start": "2663620",
    "end": "2669200"
  },
  {
    "text": "No one? Go ahead. AUDIENCE: [INAUDIBLE]. You know that it's\ngoing to merge to two.",
    "start": "2669200",
    "end": "2675560"
  },
  {
    "text": "PROFESSOR: That's exactly\nwhat I was looking for. Essentially, well, it's not\nquite two, because you have a 1",
    "start": "2675560",
    "end": "2680980"
  },
  {
    "text": "here, and you have a 1 here,\nbut you're exactly right. I mean, two is good. It's asymptotic,\nI mean, come on.",
    "start": "2680980",
    "end": "2686280"
  },
  {
    "text": "I'm not going to complain\nabout two versus three, right? So the point is it's\nbounded by a constant.",
    "start": "2686280",
    "end": "2692700"
  },
  {
    "text": "It's bounded by a constant. This is a convergent series\nand it's bounded by a constant.",
    "start": "2692700",
    "end": "2699180"
  },
  {
    "text": "And we can argue about\nwhat the constant is. It's less than three.",
    "start": "2699180",
    "end": "2704600"
  },
  {
    "text": "And it doesn't matter\nof k goes to infinity. And you want k to\ngo to infinity, but it doesn't matter if\nk is small or k is large,",
    "start": "2704600",
    "end": "2711440"
  },
  {
    "text": "this is bounded by a constant. ",
    "start": "2711440",
    "end": "2716930"
  },
  {
    "text": "And that's the key observation.",
    "start": "2716930",
    "end": "2722030"
  },
  {
    "text": "What do we have left? What do we have left? We have a constant there. We have a c, which\nis a constant,",
    "start": "2722030",
    "end": "2728300"
  },
  {
    "text": "and we have a 2 raised\nto k, which is really n. So there you go.",
    "start": "2728300",
    "end": "2733560"
  },
  {
    "text": "There you have your\ntheta n complexity. Now I can say theta n,\nbecause I know it's theta n.",
    "start": "2733560",
    "end": "2739160"
  },
  {
    "text": "But big O of n, theta\nn, that's what it is. So that's what I'd say\nis subtle analysis.",
    "start": "2739160",
    "end": "2746310"
  },
  {
    "text": "Clearly a little more\ncomplicated than anything we've done so far, and let me\nsee if there are questions.",
    "start": "2746310",
    "end": "2752370"
  },
  {
    "text": "How many people got this? I did too.",
    "start": "2752370",
    "end": "2757690"
  },
  {
    "text": "Someone who didn't get\nit, ask a question. What didn't you get? What step would you\nlike me to repeat here?",
    "start": "2757690",
    "end": "2765890"
  },
  {
    "text": "Any particular step? AUDIENCE: [INAUDIBLE]. ",
    "start": "2765890",
    "end": "2772515"
  },
  {
    "text": "PROFESSOR: This thing here? Right here? OK, so you're not convinced\nthat this expression got translated to\nthis expression.",
    "start": "2772515",
    "end": "2779830"
  },
  {
    "text": "So let me try and convince\nyou of that, alright? So let's take a look\nat each of the terms.",
    "start": "2779830",
    "end": "2785579"
  },
  {
    "text": "n by 4 is 2 raised to k. I'm just looking at\nthis term and this term. n by 4 is 2 raised to k.",
    "start": "2785580",
    "end": "2793510"
  },
  {
    "text": "c is c. And I just wrote 1 as 1 divided\nby 2 raised to 0, which is 1.",
    "start": "2793510",
    "end": "2804149"
  },
  {
    "text": "And the reason I\nwant you to do this, is because I want to show you an\nexpression where in some sense, this is the term that is the\nsummation for your expression.",
    "start": "2804149",
    "end": "2812800"
  },
  {
    "text": "If we just replace this,\nyou can write this out as i equals 0 through k, I plus\n1 divided by 2 raised to i.",
    "start": "2812800",
    "end": "2825440"
  },
  {
    "text": "That is the symbolic\nform of this expression, which came from here.",
    "start": "2825440",
    "end": "2830750"
  },
  {
    "text": "And then the argument\nwas made that this is a convergent series and\nis bounded by a constant.",
    "start": "2830750",
    "end": "2838490"
  },
  {
    "text": "That make sense? Good. So that's pretty neat, right? I mean, you have the same\nalgorithm and, whala,",
    "start": "2838490",
    "end": "2846520"
  },
  {
    "text": "it suddenly got more efficient. Doesn't always happen,\nbut that tells you that you have to have\nsome care in doing",
    "start": "2846520",
    "end": "2853160"
  },
  {
    "text": "your analysis, because what\nreally happened here, was you did a rudimentary analysis. You said, this was order\nlog n, big O log n,",
    "start": "2853160",
    "end": "2860620"
  },
  {
    "text": "and you said this was theta\nn, and you ended up with this. But in reality, it's\nactually a faster algorithm.",
    "start": "2860620",
    "end": "2867640"
  },
  {
    "text": "So that's the good news. Build-max-heap can be\ndone in order n time.",
    "start": "2867640",
    "end": "2873300"
  },
  {
    "text": "Now in the time that I\nhave left, it turns out, we are essentially all\nthe way to heaps sort.",
    "start": "2873300",
    "end": "2881460"
  },
  {
    "text": "Because all we\nhave to do is use, once we have\nbuild-max-heap, I'll",
    "start": "2881460",
    "end": "2886850"
  },
  {
    "text": "just write out the\ncode for heap sort, and you can take a look\nat examples in the notes.",
    "start": "2886850",
    "end": "2893410"
  },
  {
    "text": " The pseudocode, I should\nsay, for heap sort. And it looks like this.",
    "start": "2893410",
    "end": "2899950"
  },
  {
    "text": "The first step that you\ndo is you build max-heap",
    "start": "2899950",
    "end": "2905040"
  },
  {
    "text": "from the unordered array. ",
    "start": "2905040",
    "end": "2912000"
  },
  {
    "text": "Then you find the\nmaximum element AA[1].",
    "start": "2912000",
    "end": "2917990"
  },
  {
    "text": "All of this I've\nsaid multiple times. Now the key step is, you\ncould do extract max,",
    "start": "2917990",
    "end": "2925210"
  },
  {
    "text": "but one nice way\nof handling this, is to swap the elements\nAA[n] with AA[1].",
    "start": "2925210",
    "end": "2934059"
  },
  {
    "text": " Let me write this\nout and explain exactly what that means.",
    "start": "2934060",
    "end": "2940740"
  },
  {
    "text": "Now the maximum element is\nat the end of the array.",
    "start": "2940740",
    "end": "2947220"
  },
  {
    "text": " When you do the swap.",
    "start": "2947220",
    "end": "2953119"
  },
  {
    "text": "That's the one step\nthat I will have to spend another minute on. Now we discard node\nn from the heap,",
    "start": "2953120",
    "end": "2963859"
  },
  {
    "text": "simply by decrementing\nheap size.",
    "start": "2963860",
    "end": "2970110"
  },
  {
    "text": "So the heap becomes\nn minus 1 in size from n in the first iteration.",
    "start": "2970110",
    "end": "2977640"
  },
  {
    "text": "Now the new root after the\nswap may violate max-heap,",
    "start": "2977640",
    "end": "2987609"
  },
  {
    "text": "we'll call it the\nmax-heap property, but the children are max-heaps.",
    "start": "2987610",
    "end": "2995430"
  },
  {
    "text": " So that's the one node that\ncan possibly violate it.",
    "start": "2995430",
    "end": "3001560"
  },
  {
    "text": "So what that means, is we can\nrun max-heapify to fix this.",
    "start": "3001560",
    "end": "3010860"
  },
  {
    "text": "And that's it . Once you do that, you\ngo back to that step.",
    "start": "3010860",
    "end": "3017530"
  },
  {
    "text": "So what's happened here exactly? Well this part we spent\na bunch of time on.",
    "start": "3017530",
    "end": "3022680"
  },
  {
    "text": "element is the maximum\nelement, so you grab that. And you know that's\na maximum element.",
    "start": "3022680",
    "end": "3029780"
  },
  {
    "text": "One way of doing it is to\nuse extract max, but rather than doing extract max, which\nI haven't explained to you,",
    "start": "3029780",
    "end": "3035450"
  },
  {
    "text": "you could imagine\nthat you go off and you swap the top element\nwith the bottom element,",
    "start": "3035450",
    "end": "3042720"
  },
  {
    "text": "and then you discard it. So here's a trivial\nexample, where let's say I had 4, 2, and\n1, which is a max-heap.",
    "start": "3042720",
    "end": "3056920"
  },
  {
    "text": "What would happen is you'd\nsay, I'm going to take 4 and I'm going swap it with 1.",
    "start": "3056920",
    "end": "3062480"
  },
  {
    "text": "And so you have, 1, 2, and 4.",
    "start": "3062480",
    "end": "3067540"
  },
  {
    "text": "Now four used to be AA[1], and\nthat's the maximum element, and I'm just going to\ndelete it from the heap,",
    "start": "3067540",
    "end": "3074240"
  },
  {
    "text": "which means I'm going to end up\nwith a heap that looks like-- a heap, not a max-heap--\nthat looks like this.",
    "start": "3074240",
    "end": "3079970"
  },
  {
    "text": "And I write down 4 here. 4 is the first element\nin my sorted array. Now I look at 1 and\n2, and 1 and 2 there's",
    "start": "3079970",
    "end": "3088240"
  },
  {
    "text": "obviously not a max-heap. But I can run max-- I know\nthe child is a max-heap, so I can run\nmax-heapify on this.",
    "start": "3088240",
    "end": "3094120"
  },
  {
    "text": "And what this turns\ninto is 2 and 1. And at this point, I know\nthat the max is the root,",
    "start": "3094120",
    "end": "3101240"
  },
  {
    "text": "because I've run max-heapify\nand I take 2 out, and after this, it\nbecomes trivial.",
    "start": "3101240",
    "end": "3107230"
  },
  {
    "text": "But that's the\ngeneral algorithm. So this whole thing\ntakes order n log n time,",
    "start": "3107230",
    "end": "3113150"
  },
  {
    "text": "because even though\nbuild-max-heap is order n and max\nelement is constant time,",
    "start": "3113150",
    "end": "3121880"
  },
  {
    "text": "swapping the elements\nis constant time. But running max-heapify\nis order log n time,",
    "start": "3121880",
    "end": "3130730"
  },
  {
    "text": "and you have n steps. So you have an order\nn log n algorithm.",
    "start": "3130730",
    "end": "3138400"
  },
  {
    "text": "But the first step\nwas order n, which is what we spent a\nbunch of time on. So I'll show you\nexamples in the notes,",
    "start": "3138400",
    "end": "3145589"
  },
  {
    "text": "and that will get\ncovered again in section. I'll stick around for questions.",
    "start": "3145590",
    "end": "3150690"
  },
  {
    "text": "See you next time.",
    "start": "3150690",
    "end": "3152640"
  }
]