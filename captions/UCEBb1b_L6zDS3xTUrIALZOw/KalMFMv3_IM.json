[
  {
    "text": "PROFESSOR: OK, well I'm\ngoing to start now. As I say, I know that the\nwireless course has its final",
    "start": "0",
    "end": "7734"
  },
  {
    "text": "at 11:00, so we might not see\nthe people who are taking it. Is anyone here in the\nwireless course?",
    "start": "7735",
    "end": "14770"
  },
  {
    "text": "OK. Q.E.D. Ipso facto ergo sum.",
    "start": "14770",
    "end": "21860"
  },
  {
    "text": "OK, just to remind you, I think\nwe have Problem Set 10 solutions today. In any case, they'll be\navailable on the web.",
    "start": "21860",
    "end": "29510"
  },
  {
    "text": "The final is next Tuesday. Do bring calculators\nif you have them.",
    "start": "29510",
    "end": "36540"
  },
  {
    "text": "They won't be absolutely\nessential, but they might be useful. ",
    "start": "36540",
    "end": "43219"
  },
  {
    "text": "You may bring five\nsheets of notes. It's a good exercise\nto make these up.",
    "start": "43220",
    "end": "51680"
  },
  {
    "text": "And otherwise, it's\nclosed-book. Ashish will hold a review\nsession tomorrow, 4:00 to",
    "start": "51680",
    "end": "57860"
  },
  {
    "text": "6:00, 26-328, which I'm sure\nwill be excellent as usual.",
    "start": "57860",
    "end": "64084"
  },
  {
    "text": " All right, just to remind you,\nwe're in Chapter 14.",
    "start": "64084",
    "end": "71119"
  },
  {
    "text": "Most of the course we talked\nabout coding for power-limited channels, where basically you\ncould get away with binary",
    "start": "71120",
    "end": "78070"
  },
  {
    "text": "codes with very little\nloss of optimality. For bandwidth-limited, additive\nwhite Gaussian noise",
    "start": "78070",
    "end": "84070"
  },
  {
    "text": "channels, we've got to\nconsider non-binary, multi-level codes, we've really\ngot to go out into",
    "start": "84070",
    "end": "89680"
  },
  {
    "text": "Euclidian space and use\nEuclidian distance as our metric rather than\nHamming distance.",
    "start": "89680",
    "end": "96390"
  },
  {
    "text": "So we started out with a simple\nidea, build a lattice",
    "start": "96390",
    "end": "102750"
  },
  {
    "text": "constellation. A lattice is an infinite set\nof points in end space that",
    "start": "102750",
    "end": "109440"
  },
  {
    "text": "has a group property. That's it, a discrete\nset of points. We take a finite set of them by\nchopping out a region R, a",
    "start": "109440",
    "end": "118450"
  },
  {
    "text": "compact region, which chops out\na finite number of points",
    "start": "118450",
    "end": "123619"
  },
  {
    "text": "in this lattice or in a\ntranslate of the lattice. And we went through this\nexercise of computing the",
    "start": "123620",
    "end": "132060"
  },
  {
    "text": "union-bound estimate, which I\nremind you is a reasonable",
    "start": "132060",
    "end": "137470"
  },
  {
    "text": "estimate for codes that\nare not too complex. We're not going to use this for capacity-approaching codes.",
    "start": "137470",
    "end": "143450"
  },
  {
    "text": "But for codes, where...,\nbasically dominated by minimum",
    "start": "143450",
    "end": "148840"
  },
  {
    "text": "distance properties, how many\nnearest neighbors are there, the likeliest error events are\nall to the nearest neighbors,",
    "start": "148840",
    "end": "156580"
  },
  {
    "text": "we can use the union-bound\nestimate, which basically just tallies the probability of error\nto the nearest neighbor",
    "start": "156580",
    "end": "163940"
  },
  {
    "text": "events by the union-bound, which\nitself is inaccurate if you get too many near\nneighbor events.",
    "start": "163940",
    "end": "170830"
  },
  {
    "text": "And we've got this nice\napproximate expression that the probability of error per n\ndimensions, if we're signaling",
    "start": "170830",
    "end": "179520"
  },
  {
    "text": "in n dimensions, is the number\nof nearest neighbors in the lattice times the Q to the\nsquare root of a function",
    "start": "179520",
    "end": "189310"
  },
  {
    "text": "times an expression, which\ninvolves a coding gain of the lattice, and separably a shaping\ngain of the region",
    "start": "189310",
    "end": "199110"
  },
  {
    "text": "times 3 times SNR norm. So this embodies all kinds\nof simplifications.",
    "start": "199110",
    "end": "205910"
  },
  {
    "text": "It separates the effects of the\nlattice and the region. Basically, we can optimize each\nof these separately to",
    "start": "205910",
    "end": "212709"
  },
  {
    "text": "optimize this expression. And also, by the way, by talking\nabout SNR norm, which",
    "start": "212710",
    "end": "219200"
  },
  {
    "text": "is SNR normalized by 2 to the\nspectral efficiency, it makes",
    "start": "219200",
    "end": "225520"
  },
  {
    "text": "this whole expression\nindependent of rate or equivalently independent\nof spectral efficiency.",
    "start": "225520",
    "end": "231420"
  },
  {
    "text": "We saw this back when we talked\nabout m by m QAM, we got a universal expression.",
    "start": "231420",
    "end": "238285"
  },
  {
    "text": "The probability of error was\nsimply this expression with a 3SNR norm in here - regardless\nof what m was (regardless of",
    "start": "238285",
    "end": "246550"
  },
  {
    "text": "how big the QAM constellation\nwas), we got the same approximate expression. So this is also independent of\nthe size of the constellations",
    "start": "246550",
    "end": "254550"
  },
  {
    "text": "in this large constellation,\nhigh SNR approximation. Once you get to enough points,\neverything sort of washes out.",
    "start": "254550",
    "end": "263450"
  },
  {
    "text": "So it's very useful. And I remind you that the coding\ngain basically depends",
    "start": "263450",
    "end": "271170"
  },
  {
    "text": "on the minimum square distance\nnormalized by the density of",
    "start": "271170",
    "end": "276650"
  },
  {
    "text": "the lattice, if you like,\nnormalized to two dimensions. The shaping gain is basically\nthe shaping gain of an n-cube",
    "start": "276650",
    "end": "285699"
  },
  {
    "text": "divided by-- this is the normalized second\nmoment of an n-cube, this is the normalized second moment of\nyour region, which better",
    "start": "285700",
    "end": "292139"
  },
  {
    "text": "be better than that of an\nn-cube, meaning smaller. And writing it out, it's equal\nto this, where this is the",
    "start": "292140",
    "end": "299920"
  },
  {
    "text": "second moment of your region. And this is the volume, again,\nnormalized to two dimensions.",
    "start": "299920",
    "end": "306840"
  },
  {
    "text": "So the baseline constellations,\nwe showed these were invariant to\nCartesian products.",
    "start": "306840",
    "end": "312840"
  },
  {
    "text": "In any number of dimensions,\nn, we can take the integer lattice or any translate of the\ninteger lattice and we can",
    "start": "312840",
    "end": "321520"
  },
  {
    "text": "take a region, which\nis the n-cube -- which will chop out basically\na square or cubic",
    "start": "321520",
    "end": "328250"
  },
  {
    "text": "constellation, a regular\nconstellation in n dimensions-- and we'll get that the coding\ngain is the shaping gain is 1.",
    "start": "328250",
    "end": "334980"
  },
  {
    "text": "So we'll get just our baseline\nexpression for any integer",
    "start": "334980",
    "end": "342860"
  },
  {
    "text": "lattice shaped by an n-cube\ncentered on the origin.",
    "start": "342860",
    "end": "347879"
  },
  {
    "text": "And this is what\nit looks like. This is back from Chapter\nFour or whatever.",
    "start": "347880",
    "end": "353170"
  },
  {
    "text": "We get this universal curve,\nthe baseline curve, which holds for m-PAM, m by m QAM, or\nyou can Cartesian product",
    "start": "353170",
    "end": "361930"
  },
  {
    "text": "these up into as high a\ndimension as you like. The constellation we're talking\nabout is really m-PAM",
    "start": "361930",
    "end": "368610"
  },
  {
    "text": "Cartesian product to the nth. For any of those constellations,\nif we normalize the probability of\nerror to two dimensions--",
    "start": "368610",
    "end": "376330"
  },
  {
    "text": "which is what I'm recommending\nto you, normalize everything per two dimensions in the\nhigh SNR regime--",
    "start": "376330",
    "end": "383480"
  },
  {
    "text": "then we basically get the number\nof near neighbors in Z-squared, the QAM lattice,\nwhich is 4 times Q to the",
    "start": "383480",
    "end": "391775"
  },
  {
    "text": "square root of 3SNR norm. And it looks like this. We plot probability\nof error per two",
    "start": "391775",
    "end": "398260"
  },
  {
    "text": "dimensions over SNR norm. I think at 10 to the minus\n5, it's 8.4 dB.",
    "start": "398260",
    "end": "404160"
  },
  {
    "text": "Does anybody remember? But it's somewhere\naround 9 dB. And the Shannon limit, as\nwe recall, is for SNR",
    "start": "404160",
    "end": "411540"
  },
  {
    "text": "norm, it's at 0 dB. So this is where we can play. Any code will fall somewhere\nbetween these two curves, and",
    "start": "411540",
    "end": "420090"
  },
  {
    "text": "the name of the game is to get\na code the gets as close to the Shannon limit as possible.",
    "start": "420090",
    "end": "426560"
  },
  {
    "text": "And at least in this moderate\ncomplexity regime, the way we play the game is we try to\noptimize the shaping region,",
    "start": "426560",
    "end": "434020"
  },
  {
    "text": "we try to optimize the lattice,\nwe're going to get a certain gain from shaping, and\na certain gain from coding,",
    "start": "434020",
    "end": "441680"
  },
  {
    "text": "de-rated by the number of\nnearest neighbors, which is",
    "start": "441680",
    "end": "447229"
  },
  {
    "text": "going to turn out to be an\nimportant effect for some well-known lattices because\nthey have huge numbers of near neighbors.",
    "start": "447230",
    "end": "453210"
  },
  {
    "text": "And that will give us some curve\nsomewhere in here, and we plot that and we're done.",
    "start": "453210",
    "end": "458570"
  },
  {
    "text": "We've written a paper for\nthat particular lattice constellation, for\nits performance. ",
    "start": "458570",
    "end": "469358"
  },
  {
    "text": "Today I'm going to talk quickly\nabout shaping, because that's a very easy story,\nand obvious, and",
    "start": "469358",
    "end": "480389"
  },
  {
    "text": "it won't take long. Then I'm going to talk about\nlattices, which is really a",
    "start": "480390",
    "end": "485540"
  },
  {
    "text": "subject in mathematics, what's\nknown about lattices. I guess the decoding part of\nthat story is not mathematics.",
    "start": "485540",
    "end": "493630"
  },
  {
    "text": "That's engineering. And then I'm going to talk about\ntrellis codes, which are",
    "start": "493630",
    "end": "501409"
  },
  {
    "text": "the analog of convolutional\ncodes, and which, similarly to the way convolutional codes\nbeat block codes for the",
    "start": "501410",
    "end": "508090"
  },
  {
    "text": "bandwidth for the power-limited\nregime, trellis codes tend to beat lattice codes\nin terms of performance",
    "start": "508090",
    "end": "515140"
  },
  {
    "text": "versus complexity for the\nbandwidth-limited regime.",
    "start": "515140",
    "end": "520950"
  },
  {
    "text": "So, shaping. Shaping is really an almost\ntrivial story. This really wasn't recognized\nas a separable issue until",
    "start": "520950",
    "end": "532199"
  },
  {
    "text": "perhaps sometime in the '80s,\nwhen trellis-coded modulation",
    "start": "532200",
    "end": "537650"
  },
  {
    "text": "was invented. In '82 was Ungerboeck's paper.",
    "start": "537650",
    "end": "543020"
  },
  {
    "text": "That was really the\nbreakthrough in bandwidth-limited coding, that\ntrellis codes were the first",
    "start": "543020",
    "end": "550240"
  },
  {
    "text": "bandwidth-limited codes that\nwere widely implemented. And after people analyzed them\nfor a while, they realized",
    "start": "550240",
    "end": "555950"
  },
  {
    "text": "that you could separate out the\nshaping effect from the coding effect, which is what\nI've shown by this expression.",
    "start": "555950",
    "end": "563370"
  },
  {
    "text": "So anyone care to guess what\nthe optimum region is in n",
    "start": "563370",
    "end": "568580"
  },
  {
    "text": "dimensions? I guess I've already mentioned\nit last time. The optimum region, what\ndo we want to do?",
    "start": "568580",
    "end": "575540"
  },
  {
    "text": "We want to minimize the\nnormalized second moment-- ",
    "start": "575540",
    "end": "582150"
  },
  {
    "text": "well, a second moment with\nappropriate normalization, what would you do? Well, the optimum region for\njust about anything is an",
    "start": "582150",
    "end": "587870"
  },
  {
    "text": "n-sphere, and it certainly\nis here. So we take Rn equals\nan n-sphere.",
    "start": "587870",
    "end": "594649"
  },
  {
    "text": " If we have a two-dimensional\nsphere, what are its",
    "start": "594650",
    "end": "604399"
  },
  {
    "text": "parameters?  We certainly know that the\nvolume of this region, if this",
    "start": "604400",
    "end": "613810"
  },
  {
    "text": "is R, it's pi times R squared. ",
    "start": "613810",
    "end": "619430"
  },
  {
    "text": "And the second moment of this\nregion, how do we do that?",
    "start": "619430",
    "end": "628500"
  },
  {
    "text": "We integrate ... go to polar\ncoordinates, 0 to 2pi, d pi, 0 to R, rdr.",
    "start": "628500",
    "end": "638190"
  },
  {
    "text": "And then what are\nwe measuring? The second moment is r squared,\nbut we normalize it",
    "start": "638190",
    "end": "645400"
  },
  {
    "text": "per dimension, which is 2.  Oh, and we've got to take the\nuniform distribution over v of",
    "start": "645400",
    "end": "655820"
  },
  {
    "text": "R, and that's one over\npi R squared. So have I got it now?",
    "start": "655820",
    "end": "662129"
  },
  {
    "text": "This is the second moment of\na uniform distribution, a probability distribution\nover the 2-sphere.",
    "start": "662130",
    "end": "669100"
  },
  {
    "text": "And so this will be 1 over\n2pi R squared times",
    "start": "669100",
    "end": "674230"
  },
  {
    "text": "R 4th over 4, right?",
    "start": "674230",
    "end": "679690"
  },
  {
    "text": " Is that all correct? And so p of R over v of R is\nalready not normalized to two",
    "start": "679690",
    "end": "692510"
  },
  {
    "text": "dimensions, so we don't have\nto re-normalize it. ",
    "start": "692510",
    "end": "704620"
  },
  {
    "text": "I didn't get the 2pi in here. ",
    "start": "704620",
    "end": "710949"
  },
  {
    "text": "I need some help, class. When it comes down to\nintegration, I'm not necessarily the world's best.",
    "start": "710950",
    "end": "716680"
  },
  {
    "text": "So R squared over 4... R squared over 4pi R squared,\nso we get 1 over 4pi.",
    "start": "716680",
    "end": "729509"
  },
  {
    "text": "Is that right? That looks about right\nbecause it's fairly close to 1 over 12. ",
    "start": "729510",
    "end": "735370"
  },
  {
    "text": "So what is the shaping\ngain of a 2-sphere? ",
    "start": "735370",
    "end": "742790"
  },
  {
    "text": "And I can just say 2-sphere,\nbecause I know it's invariant to scaling.",
    "start": "742790",
    "end": "748250"
  },
  {
    "text": "Rotation isn't going\nto do much to it. It's 1/12 over this, the\nnormalized second moment, 1",
    "start": "748250",
    "end": "759220"
  },
  {
    "text": "over 4pi, which is pi over 3,\nwhich is about 2/10 of a dB.",
    "start": "759220",
    "end": "767220"
  },
  {
    "text": "OK, so I've improved the second\nmoment by 2/10 of a dB, reduced it to 2/10 of a dB.",
    "start": "767220",
    "end": "773920"
  },
  {
    "text": "This is not very impressive. So of course, a lot of the\nearly work was on shaping",
    "start": "773920",
    "end": "780680"
  },
  {
    "text": "two-dimensional constellations. And this basically says if you\nget a large constellation, you",
    "start": "780680",
    "end": "786270"
  },
  {
    "text": "don't even see this effect\nto, say, 64-QAM. If you have a 64-QAM\nconstellation, 8 by 8--",
    "start": "786270",
    "end": "793955"
  },
  {
    "start": "793955",
    "end": "803870"
  },
  {
    "text": "Somebody at Paradyne noticed\nthat you could improve it slightly by taking the four\ncorner points out and putting",
    "start": "803870",
    "end": "810390"
  },
  {
    "text": "them up here, without reducing\nthe minimum distance. OK, so there is an improved,\nmore spherical 64-point",
    "start": "810390",
    "end": "820860"
  },
  {
    "text": "constellation. It's improved by about 0.1\ndB, as I remember. And what this calculation says\nis if you go up to 256, 1024,",
    "start": "820860",
    "end": "829710"
  },
  {
    "text": "and you simply take all the\npoints in the QAM grid that",
    "start": "829710",
    "end": "835350"
  },
  {
    "text": "are surrounded by a sphere of\nappropriate size to pick out 2 to the n points, for high, large\nconstellations you get a",
    "start": "835350",
    "end": "842860"
  },
  {
    "text": "gain of about 0.2 dB. So this is nothing to\nwrite home about.",
    "start": "842860",
    "end": "849029"
  },
  {
    "text": "What happens as n goes\nto infinity? ",
    "start": "849030",
    "end": "855370"
  },
  {
    "text": "We look up in a math book what\nthe expressions are for the normalized second moment--\nactually, you can do it just",
    "start": "855370",
    "end": "863070"
  },
  {
    "text": "by this kind of calculation. It's easy enough. And just by scaling, you'll find\nthat the shaping gain of",
    "start": "863070",
    "end": "879475"
  },
  {
    "text": "the n-sphere goes to pi times\ne over 6, which is 1.53 dB.",
    "start": "879475",
    "end": "889459"
  },
  {
    "text": "A famous number not only now\nin shaping, but also in quantization, where you're also\ninterested in minimizing",
    "start": "889460",
    "end": "895850"
  },
  {
    "text": "the second moment of a\nquantization cell. ",
    "start": "895850",
    "end": "902210"
  },
  {
    "text": "Or it's something like 0.229\nbits per two dimensions, is another way of expressing it.",
    "start": "902210",
    "end": "908600"
  },
  {
    "text": "All right, so what is this? This is the maximum shaping\ngain you could get by the",
    "start": "908600",
    "end": "915089"
  },
  {
    "text": "optimum region in the optimum\nnumber of dimensions, which is as large as you can go.",
    "start": "915090",
    "end": "921040"
  },
  {
    "text": "So this says this is the\nultimate shaping gain. You can never get a shaping\ngain of more",
    "start": "921040",
    "end": "926120"
  },
  {
    "text": "than 1 and 1/2 dB. So it says when we play this\ngame, we've got about 9 dB",
    "start": "926120",
    "end": "934490"
  },
  {
    "text": "down here that we want to make\nup at 10 to the minus 5, 10 to the minus 6, we can get only 1\nand a 1/2 dB of it by doing",
    "start": "934490",
    "end": "942820"
  },
  {
    "text": "good shaping in large\ndimensions. That's the best we\ncan ever do. So that's a little\nbit discouraging.",
    "start": "942820",
    "end": "949390"
  },
  {
    "text": "It says shaping is never going\nto give you that much. On the other hand, you can't\nget this 1 and a 1/2 dB",
    "start": "949390",
    "end": "957399"
  },
  {
    "text": "in any other way. If you have n-cubed\nconstellations, you will always be limited to be\n1 and a 1/2 dB away",
    "start": "957400",
    "end": "964870"
  },
  {
    "text": "from the Shannon limit. So if you want to approach the\nShannon limit, you do have to",
    "start": "964870",
    "end": "969990"
  },
  {
    "text": "address the shaping problem. You can't ignore it. 1 and a 1/2 dB is enough to be\nnoticed in most applications,",
    "start": "969990",
    "end": "981020"
  },
  {
    "text": "so you should do some\nmoderate shaping. Now, of course we can\nplot the curve.",
    "start": "981020",
    "end": "987240"
  },
  {
    "text": "It's done in the notes for any\nn whatsoever, and you'll see that it goes up fairly\nsteeply at first.",
    "start": "987240",
    "end": "994380"
  },
  {
    "text": "It gets to about 1 dB at 16\ndimensions, so if you shape in",
    "start": "994380",
    "end": "1001450"
  },
  {
    "text": "a 16 dimensional sphere, you\ncan get 1 dB out of this maximum of 1 and a 1/2\ndBs you can ever get.",
    "start": "1001450",
    "end": "1008950"
  },
  {
    "text": "If you go to 32, it's 1.2 dB\nor something like that, it begins to slope out.",
    "start": "1008950",
    "end": "1015839"
  },
  {
    "text": "So that gives you a good\nidea of what you",
    "start": "1015840",
    "end": "1022260"
  },
  {
    "text": "can actually attain. In the V.34 modem, for instance,\na rather simple",
    "start": "1022260",
    "end": "1029199"
  },
  {
    "text": "shaping scheme is used that\ngets up to about 0.8 dB of shaping gain.",
    "start": "1029200",
    "end": "1034609"
  },
  {
    "text": "It's called shaping\non regions. ",
    "start": "1034609",
    "end": "1040630"
  },
  {
    "text": "I just mentioned some techniques\nfor shaping.",
    "start": "1040630",
    "end": "1045699"
  },
  {
    "text": "As with a lot of things, once\nshaping was realized to be a separate subject from coding,\nthere was a flurry",
    "start": "1045700",
    "end": "1053220"
  },
  {
    "text": "of activity on it. People basically proposed a\nnumber of different schemes, particularly in the context of\nthe V.34 modem standards",
    "start": "1053220",
    "end": "1061480"
  },
  {
    "text": "development. Of which trellis shaping,\nI would",
    "start": "1061480",
    "end": "1070010"
  },
  {
    "text": "say, is the most elegant. This is kind of a dual to\ntrellis-coded modulation where",
    "start": "1070010",
    "end": "1078210"
  },
  {
    "text": "we use trellis codes for shaping\nrather than coding. So that's elegant.",
    "start": "1078210",
    "end": "1083290"
  },
  {
    "text": "But a cruder and quite\neffective, just fine",
    "start": "1083290",
    "end": "1088440"
  },
  {
    "text": "technique, shell mapping, was\nused in the V.34 modem.",
    "start": "1088440",
    "end": "1096960"
  },
  {
    "text": "The basic idea here is that\nyou take a two-dimensional constellation, you just divide\nit into shells like this.",
    "start": "1096960",
    "end": "1107000"
  },
  {
    "text": "It turns out in two dimensions,\nif you take a constant delta here, that the\naverage energy goes up, I",
    "start": "1107000",
    "end": "1116540"
  },
  {
    "text": "think, linearly with delta or\nsome way nicely with delta.",
    "start": "1116540",
    "end": "1122960"
  },
  {
    "text": "You take a constellation bigger\nthan you really need,",
    "start": "1122960",
    "end": "1128980"
  },
  {
    "text": "so you have the possibility\nof some redundancy. ",
    "start": "1128980",
    "end": "1136090"
  },
  {
    "text": "So you identify each point in\nthe constellation by which region it lands in.",
    "start": "1136090",
    "end": "1143900"
  },
  {
    "text": "You then go up to 16 dimensions\nor something-- I think it is 16 dimensions\nin the V.34 modem--",
    "start": "1143900",
    "end": "1149770"
  },
  {
    "text": "and you assign each series of\npoints a score depending on",
    "start": "1149770",
    "end": "1157640"
  },
  {
    "text": "which shells its\npoints land in. And you basically have a big\ntable that chooses the lowest",
    "start": "1157640",
    "end": "1167149"
  },
  {
    "text": "energy combinations from all the\npossible series of eight",
    "start": "1167150",
    "end": "1174100"
  },
  {
    "text": "shells, which can be done\nfairly elegantly using generating function\ntechniques.",
    "start": "1174100",
    "end": "1179290"
  },
  {
    "text": "I realize this is just\nhand-waving and you can't get it, but the effect is that you\nuse this shell with very high",
    "start": "1179290",
    "end": "1190100"
  },
  {
    "text": "probability. You sort of get a Gaussian-like\nprobability on the shells.",
    "start": "1190100",
    "end": "1195650"
  },
  {
    "text": "Let me just draw\nthat like this. You don't use the points\nout in this outermost shell very much.",
    "start": "1195650",
    "end": "1201410"
  },
  {
    "text": "You use this a lot, and they\nsort of have an overall Gaussian distribution.",
    "start": "1201410",
    "end": "1207290"
  },
  {
    "text": "And I should mention that this\nis an equivalent way of getting shaping gain. ",
    "start": "1207290",
    "end": "1217010"
  },
  {
    "text": "If we're shaping uniformly over\nan n-sphere in a high number n of dimensions and we\nbasically have constellations",
    "start": "1217010",
    "end": "1226870"
  },
  {
    "text": "which consist of two-dimensional\nQAM points,",
    "start": "1226870",
    "end": "1232880"
  },
  {
    "text": "what is the projection of a\nuniform distribution over an n-sphere down onto\ntwo dimensions?",
    "start": "1232880",
    "end": "1239990"
  },
  {
    "text": "If we look at each\ntwo-dimensional component of these n-dimensional vectors,\nwhat distribution will it have",
    "start": "1239990",
    "end": "1247266"
  },
  {
    "text": "if we impose a uniform spherical\ndistribution on the high dimensional\nconstellation?",
    "start": "1247266",
    "end": "1253830"
  },
  {
    "text": "It will turn out that it\nbecomes Gaussian in two",
    "start": "1253830",
    "end": "1259039"
  },
  {
    "text": "dimensions. Think of the projection of the 2-sphere down on one dimension.",
    "start": "1259040",
    "end": "1264110"
  },
  {
    "text": "The projection of a 2-sphere\non one dimension is something like this.",
    "start": "1264110",
    "end": "1269730"
  },
  {
    "text": "It's not Gaussian, but there's\nmore probability that one of the coordinates will be near 0\nthan it will be out at one of",
    "start": "1269730",
    "end": "1278039"
  },
  {
    "text": "these maxima here. So this is just the same thing\nraised up to n dimensions.",
    "start": "1278040",
    "end": "1284230"
  },
  {
    "text": "So an equivalent way of looking\nat this problem is we want somehow to get a\nGaussian-like distribution on",
    "start": "1284230",
    "end": "1290620"
  },
  {
    "text": "a one- or two-dimensional\nconstellation, and this is one way of doing it.",
    "start": "1290620",
    "end": "1296390"
  },
  {
    "text": "And you can get the same pi\ntimes e over 6 factor by just looking at it from an entropy\npoint of view, the entropy of",
    "start": "1296390",
    "end": "1304679"
  },
  {
    "text": "a two-dimensional Gaussian\ndistribution relative to the entropy of a uniform\ndistribution over a square.",
    "start": "1304680",
    "end": "1311750"
  },
  {
    "text": "That will give you the\nsame factor if you do everything right.",
    "start": "1311750",
    "end": "1317299"
  },
  {
    "text": "OK so basically, shaping\nis easy. These techniques are not\ndifficult to implement.",
    "start": "1317300",
    "end": "1324970"
  },
  {
    "text": "You can get one dB of shaping\ngain quite easily through a variety of techniques.",
    "start": "1324970",
    "end": "1332230"
  },
  {
    "text": "It's worth getting that one dB,\nyou're not going to get it by any other means. But having done that, that's all\nyou're ever going to get,",
    "start": "1332230",
    "end": "1339660"
  },
  {
    "text": "and so end of story\non shaping. So as I said, it was a flurry\nof activity in the '90s, and",
    "start": "1339660",
    "end": "1349260"
  },
  {
    "text": "no one has looked at\nshaping since then. ",
    "start": "1349260",
    "end": "1358270"
  },
  {
    "text": "So that's part of the story.  Let's continue now with\nlattices, an old",
    "start": "1358270",
    "end": "1367179"
  },
  {
    "text": "mathematical subject.  So what we're interested in is,\nwhat's the densest lattice",
    "start": "1367180",
    "end": "1375169"
  },
  {
    "text": "packing in n dimensions?  This appeared in mathematics,\nlong before it appeared in",
    "start": "1375170",
    "end": "1383380"
  },
  {
    "text": "engineering, as Hermite's\nparameter. And Hermite said this was the\nright way to measure the density of a lattice, normalized\nin all the",
    "start": "1383380",
    "end": "1390539"
  },
  {
    "text": "appropriate ways. So any version of a lattice\nis equivalent. A version is something that you\nget by scaling or rotating",
    "start": "1390540",
    "end": "1398960"
  },
  {
    "text": "or even by Cartesian products,\nwhich I'm not sure how",
    "start": "1398960",
    "end": "1404020"
  },
  {
    "text": "widespread that idea is. So what's the densest lattice\nin two dimensions again?",
    "start": "1404020",
    "end": "1410642"
  },
  {
    "text": "We want to find the densest\nlattice, in terms of coding",
    "start": "1410642",
    "end": "1415760"
  },
  {
    "text": "gain or Hermite's parameter\nin n dimensions. ",
    "start": "1415760",
    "end": "1423392"
  },
  {
    "text": "Anyone care to guess what the\ndensest lattice in two dimensions is?",
    "start": "1423392",
    "end": "1429500"
  },
  {
    "text": "It's the hexagonal lattice. So in two dimensions, hexagonal,\nwhich reasons of",
    "start": "1429500",
    "end": "1440660"
  },
  {
    "text": "mathematical history\nis denoted A_2. And its coding gain, I believe\nwe computed it last time, and",
    "start": "1440660",
    "end": "1452190"
  },
  {
    "text": "it was 0.6 dB. ",
    "start": "1452190",
    "end": "1458870"
  },
  {
    "text": "So what's the most we could ever\ndo by fooling around with",
    "start": "1458870",
    "end": "1465280"
  },
  {
    "text": "two-dimensional constellations? Suppose I want the best\npossible 256 point QAM",
    "start": "1465280",
    "end": "1473040"
  },
  {
    "text": "constellation? Well, according to these large\nconstellation approximations,",
    "start": "1473040",
    "end": "1479990"
  },
  {
    "text": "the best I could do would be to\ntake the 256 lowest energy",
    "start": "1479990",
    "end": "1487540"
  },
  {
    "text": "points in some translate of\nthe hexagonal lattice. So I might fool around with\nthe translation vector a",
    "start": "1487540",
    "end": "1493210"
  },
  {
    "text": "little bit to try to find the\nabsolute lowest energy point, but it really wouldn't\nmatter very much",
    "start": "1493210",
    "end": "1499580"
  },
  {
    "text": "regardless of what I did. I could expect 0.6 dB of coding\ngain and 0.2 dB of",
    "start": "1499580",
    "end": "1506240"
  },
  {
    "text": "shaping gain, or 0.8 dB better\nthan the 8 by 8 - sorry the 16",
    "start": "1506240",
    "end": "1514360"
  },
  {
    "text": "by 16 QAM constellation with the\nsame number of points and the same minimum distance.",
    "start": "1514360",
    "end": "1520350"
  },
  {
    "text": " This basically tells you\nwhat your options are.",
    "start": "1520350",
    "end": "1528340"
  },
  {
    "text": "2D, there's not much to do. You remember way back in Chapter\nOne, I gave you this problem about the 16 point,\n2D constellation.",
    "start": "1528340",
    "end": "1536060"
  },
  {
    "text": "That is precisely 16 points from\na certain translate of",
    "start": "1536060",
    "end": "1541690"
  },
  {
    "text": "the hexagonal lattice that fall\nwithin a circle that's just big enough to enclose\n16 points.",
    "start": "1541690",
    "end": "1548370"
  },
  {
    "text": "And it has, I forget, something\nlike a 0.7 dB gain",
    "start": "1548370",
    "end": "1554809"
  },
  {
    "text": "over the 4 by 4 square\nconstellation. We computed that in the\nvery first homework.",
    "start": "1554810",
    "end": "1562809"
  },
  {
    "text": "So again, staying to\ntwo dimensions, things aren't very exciting. ",
    "start": "1562810",
    "end": "1570340"
  },
  {
    "text": "Turns out, it's most\ninteresting to go in powers of two. In four dimensions, the densest\nlattice is something",
    "start": "1570340",
    "end": "1581320"
  },
  {
    "text": "called D4, Schlafly's lattice,\n1850-something.",
    "start": "1581320",
    "end": "1586700"
  },
  {
    "text": "And its coding gain is precisely\nthe square root of",
    "start": "1586700",
    "end": "1594260"
  },
  {
    "text": "2, which is 1.5 dB. ",
    "start": "1594260",
    "end": "1602965"
  },
  {
    "text": "8 dimensions, it's E8, Gosset's\nlattice, about 1900.",
    "start": "1602965",
    "end": "1613610"
  },
  {
    "text": "The D4 and E8 come, again,\nfrom the mathematical literature and have something to\ndo with their relationship",
    "start": "1613610",
    "end": "1619800"
  },
  {
    "text": "to certain groups. Lattices and finite groups are\nvery closely connected.",
    "start": "1619800",
    "end": "1627230"
  },
  {
    "text": "And this has a coding\ngain of 2 or 3 dB.",
    "start": "1627230",
    "end": "1632419"
  },
  {
    "text": "16 dimensions, it's something\njust called lambda 16.",
    "start": "1632420",
    "end": "1638100"
  },
  {
    "text": "It's a Barnes-Wall lattice, as\nall of these are, actually. And it's 2 to the\n3/2, or 4.5 dB.",
    "start": "1638100",
    "end": "1646630"
  },
  {
    "text": "You see a certain\npattern here?  In 32 dimensions, we have two\nlattices that I'll mention.",
    "start": "1646630",
    "end": "1656909"
  },
  {
    "text": "There's the 32-dimensional\nBarnes-Wall lattice, which has",
    "start": "1656910",
    "end": "1663850"
  },
  {
    "text": "a coding gain of 4.6 dB.  Or there's actually Quebbeman in\nthe '60s, I think, came up",
    "start": "1663850",
    "end": "1674330"
  },
  {
    "text": "with a denser lattice. So this is still a subject\nof active investigation,",
    "start": "1674330",
    "end": "1680000"
  },
  {
    "text": "particularly in dimensions like\n19, where it's not so easy to find the densest\nlattice.",
    "start": "1680000",
    "end": "1685290"
  },
  {
    "text": "And this, I forget,\nis maybe 6.2 dB. It's definitely denser.",
    "start": "1685290",
    "end": "1691510"
  },
  {
    "text": "But it's something like that. ",
    "start": "1691510",
    "end": "1699930"
  },
  {
    "text": "This basically goes\nto infinity. You can get denser and denser\nlattices just by following",
    "start": "1699930",
    "end": "1705340"
  },
  {
    "text": "this chain here which is a chain\nof Barnes-Wall lattices. ",
    "start": "1705340",
    "end": "1711630"
  },
  {
    "text": "The nominal coding gain can be\ntaken to infinity, just as we saw with kd over n.",
    "start": "1711630",
    "end": "1721100"
  },
  {
    "text": "That goes to infinity for rate\n1/2 Reed-Muller codes. ",
    "start": "1721100",
    "end": "1727389"
  },
  {
    "text": "But of course, Shannon says we\ncan't ever get more than 9 dB of effective coding gain here.",
    "start": "1727390",
    "end": "1733900"
  },
  {
    "text": "Or actually, we can't get more\nthan 7 and a 1/2 dB if we take into account that 1 and a 1/2\nis going to be given by",
    "start": "1733900",
    "end": "1739150"
  },
  {
    "text": "shaping gain. So what must be happening\nhere?",
    "start": "1739150",
    "end": "1744230"
  },
  {
    "text": "We must be having a huge number\nof near neighbors. The number of nearest neighbors\nin the hexagonal",
    "start": "1744230",
    "end": "1752250"
  },
  {
    "text": "lattice is six. In D4 it's 24, in E8 it's\n240, in lambda 16",
    "start": "1752250",
    "end": "1765830"
  },
  {
    "text": "I think it's 4320-- the correct numbers\nare in the notes.",
    "start": "1765830",
    "end": "1770840"
  },
  {
    "text": "By the time we get up here, we\nget something like a 146,680",
    "start": "1770840",
    "end": "1777100"
  },
  {
    "text": "or something like that. So these lattices are designed\nto have a very",
    "start": "1777100",
    "end": "1784640"
  },
  {
    "text": "high degree of symmetry. That means if you stand on any\npoint, you look around you,",
    "start": "1784640",
    "end": "1791100"
  },
  {
    "text": "they've pushed the neighboring\npoints as far away from you as they can. But now there are a great many\nof them, so you get a uniform",
    "start": "1791100",
    "end": "1798140"
  },
  {
    "text": "sky just filled with points\naround you, a number of dimensions.",
    "start": "1798140",
    "end": "1805100"
  },
  {
    "text": "So that's what the problem is\nand that means that the",
    "start": "1805100",
    "end": "1810880"
  },
  {
    "text": "effective coding gain--  I again do the calculation.",
    "start": "1810880",
    "end": "1816630"
  },
  {
    "text": "I know here we lose\nat least two dB. This is something like 3.8 dB. ",
    "start": "1816630",
    "end": "1824440"
  },
  {
    "text": "OK, so the effective coding gain\nactually sags and begins",
    "start": "1824440",
    "end": "1830029"
  },
  {
    "text": "to top out as you\nget out here. ",
    "start": "1830030",
    "end": "1835690"
  },
  {
    "text": "Maybe nowadays you could think\nof implementing a larger lattice, but I think this is\nthe largest anyone has ever",
    "start": "1835690",
    "end": "1841930"
  },
  {
    "text": "thought about implementing. And what do we get?",
    "start": "1841930",
    "end": "1847900"
  },
  {
    "text": "A coding gain of less\nthan 4 dB -- an effective coding gain. So if you use that,\nyou'd be, say,",
    "start": "1847900",
    "end": "1857140"
  },
  {
    "text": "somewhere around 5 db here.  We go over 6 dB, but then we go\nup by this normalized per",
    "start": "1857140",
    "end": "1869659"
  },
  {
    "text": "two dimensions, so\nwe divide by 16. That's still 10,000, which\nis still 13 factors of 2,",
    "start": "1869660",
    "end": "1880980"
  },
  {
    "text": "which is 2.6 dB. You can see where\nthe problem is. So anyway, we get something\nthat's really this moved way",
    "start": "1880980",
    "end": "1889980"
  },
  {
    "text": "up a lot more, and as a result\nwe get a much steeper curve.",
    "start": "1889980",
    "end": "1895575"
  },
  {
    "text": " This method doesn't work up\nhere, but this might be lambda",
    "start": "1895575",
    "end": "1903480"
  },
  {
    "text": "16 or lambda 32. And then we can get another 1\nand a 1/2 dB of shaping gain.",
    "start": "1903480",
    "end": "1910040"
  },
  {
    "text": "So maybe 4 dB, optimistically. ",
    "start": "1910040",
    "end": "1919740"
  },
  {
    "text": "OK, not really.  So that's a little\ndisappointing.",
    "start": "1919740",
    "end": "1926770"
  },
  {
    "text": "Just by looking up in the math\ntextbooks, we don't do very",
    "start": "1926770",
    "end": "1934130"
  },
  {
    "text": "striking things. I mention in particular the\nBarnes-Wall lattices, and if I",
    "start": "1934130",
    "end": "1942470"
  },
  {
    "text": "had more time I would develop\nthem because they're very much analogous to the Reed-Muller\ncodes.",
    "start": "1942470",
    "end": "1950100"
  },
  {
    "text": "They are constructed by a u, u\nplus v construction in the same way as Reed-Muller codes.",
    "start": "1950100",
    "end": "1956740"
  },
  {
    "text": "They are length-doubling\nconstructions that also double",
    "start": "1956740",
    "end": "1961830"
  },
  {
    "text": "the distance, just as the\nReed-Muller codes do now Euclidian distance.",
    "start": "1961830",
    "end": "1968580"
  },
  {
    "text": "But let me just give you the\nfirst couple of sentences in a discussion of the Barnes-Wall\nlattices, which were only",
    "start": "1968580",
    "end": "1977010"
  },
  {
    "text": "discovered in '59, about\nthe same time as the Reed-Muller codes. ",
    "start": "1977010",
    "end": "1983300"
  },
  {
    "text": "Suppose we take the QAM\ngrid like this. ",
    "start": "1983300",
    "end": "1989770"
  },
  {
    "text": "An important observation is that\nif we take every other point in sort-of checkerboard\nfashion, what do we get?",
    "start": "1989770",
    "end": "1998570"
  },
  {
    "start": "1998570",
    "end": "2004519"
  },
  {
    "text": "Imagine it's going to infinity\nin both directions. ",
    "start": "2004520",
    "end": "2011270"
  },
  {
    "text": "So this is a subset of half\nthe points, basically.",
    "start": "2011270",
    "end": "2016940"
  },
  {
    "text": "Half the density, twice the\nvolume of points that, itself",
    "start": "2016940",
    "end": "2026490"
  },
  {
    "text": "is a rotated and scaled version of the integer lattice. ",
    "start": "2026490",
    "end": "2033150"
  },
  {
    "text": "Take the centers on a\ncheckerboard and they form a 45 degree rotated and square\nroot of 2 scaled version of",
    "start": "2033150",
    "end": "2039659"
  },
  {
    "text": "the integer lattice. If this had minimum squared\ndistance 1 between points,",
    "start": "2039660",
    "end": "2045320"
  },
  {
    "text": "then this has minimum squared\ndistance 2 between points. ",
    "start": "2045320",
    "end": "2050710"
  },
  {
    "text": "So we could label the\npoints red, black, red, black, red, black.",
    "start": "2050710",
    "end": "2056770"
  },
  {
    "text": "If we did that, the red points\nwould be a co-set of this sub-lattice and the black points\nwould be a co-set--",
    "start": "2056770",
    "end": "2065020"
  },
  {
    "text": "meaning a translate-- of this sub-lattice. So let me write that\nas follows.",
    "start": "2065020",
    "end": "2071419"
  },
  {
    "text": "If we take Z-squared, it has a\nsub-lattice which we call RZ",
    "start": "2071420",
    "end": "2076619"
  },
  {
    "text": "squared, r for rotation. Rotation by the Hadamard matrix,\n1, 1, 1 minus 1.",
    "start": "2076620",
    "end": "2083690"
  },
  {
    "start": "2083690",
    "end": "2088819"
  },
  {
    "text": "If I write d min squared, this\nhas d min squared at 1, this",
    "start": "2088820",
    "end": "2094230"
  },
  {
    "text": "has twice the d min squared. So I partition my lattice, or\nany translate of this lattice,",
    "start": "2094230",
    "end": "2102230"
  },
  {
    "text": "into two co-sets of the\nsub-lattice with twice the minimum squared distance.",
    "start": "2102230",
    "end": "2108270"
  },
  {
    "text": "This is the first steps in what\nUngerboeck called set partitioning.",
    "start": "2108270",
    "end": "2114369"
  },
  {
    "text": "So it's an obvious way to\npartition any QAM-type signal set, red and black points.",
    "start": "2114370",
    "end": "2121270"
  },
  {
    "text": "Having done that, I\ncan do it again. Alright, do it again,\nwhat do I get? So now I'm going to take every\nother one of these points,",
    "start": "2121270",
    "end": "2131329"
  },
  {
    "text": "which will leave me, say,\nthese 4 points. Let me call these A, A, A, A.\nThese points might be B, B, B,",
    "start": "2131330",
    "end": "2139410"
  },
  {
    "text": "B, the other ones\nthat I cut out. I could call these C, C, C,\nC and D, D, D, D. Now I've",
    "start": "2139410",
    "end": "2152320"
  },
  {
    "text": "partitioned each of these\nsubsets into two subsets.",
    "start": "2152320",
    "end": "2159150"
  },
  {
    "text": "I've partitioned one into A, B\nand the other into C, D, such that - what does A look like?",
    "start": "2159150",
    "end": "2166130"
  },
  {
    "text": " A is another translate\nof a lattice.",
    "start": "2166130",
    "end": "2174800"
  },
  {
    "text": "This happens to be Z-squared\nscaled by 2. It's not rotated, it's just\nZ-squared scaled by 2.",
    "start": "2174800",
    "end": "2181850"
  },
  {
    "text": "So we get down to 2\ntimes Z-squared. And what's its minimum\nsquared distance? AUDIENCE: 4. PROFESSOR: 4.",
    "start": "2181850",
    "end": "2188300"
  },
  {
    "text": "So I've doubled the\ndistance again. ",
    "start": "2188300",
    "end": "2199010"
  },
  {
    "text": "This is an elementary but\nimportant observation. I can continually go\nthrough these,",
    "start": "2199010",
    "end": "2204120"
  },
  {
    "text": "partitioning into two subsets. Every time I do, I double\nthe distance. I get another version of the\ninteger lattice at a higher",
    "start": "2204120",
    "end": "2214270"
  },
  {
    "text": "scale and, perhaps, rotated. So if I did it again, I would\nget eight subsets with minimum",
    "start": "2214270",
    "end": "2222410"
  },
  {
    "text": "squared distance 8 between\npoints in each subset.",
    "start": "2222410",
    "end": "2228220"
  },
  {
    "text": "So it's just a repeated\ndivide-by-2 scheme.",
    "start": "2228220",
    "end": "2233510"
  },
  {
    "text": "All right, now to get the\nBarnes-Wall lattices, you remember how we got the\nReed-Muller codes. We took, say, two codes of\nlength 2 and we put them",
    "start": "2233510",
    "end": "2244210"
  },
  {
    "text": "together with the u, u plus v\nconstruction and we got codes of length 4 that had the minimum\nsquare distance of the",
    "start": "2244210",
    "end": "2252190"
  },
  {
    "text": "higher distance code, if\nwe chose them properly. That's the same thing\nwe do here.",
    "start": "2252190",
    "end": "2258640"
  },
  {
    "text": "If we put together these two\nlattices, if we choose them--",
    "start": "2258640",
    "end": "2265329"
  },
  {
    "text": "well, just use the u, u plus v\nconstruction where u is from",
    "start": "2265330",
    "end": "2270390"
  },
  {
    "text": "Z-squared and v is\nfrom RZ-squared. So in words, that's\nwhat you do.",
    "start": "2270390",
    "end": "2277290"
  },
  {
    "text": "If you're interested in\nlooking it up, look it up in the notes. What you get is a lattice, D4,\nthat has normalized density",
    "start": "2277290",
    "end": "2287030"
  },
  {
    "text": "halfway between that of\nZ-squared and RZ-squared, it turns out-- sort of analogous to the code--\nand its minimum square",
    "start": "2287030",
    "end": "2294340"
  },
  {
    "text": "distance is 2. Or if you put these two\ntogether, you get something",
    "start": "2294340",
    "end": "2300190"
  },
  {
    "text": "called RD4, whose minimum\nsquare distance is 4. ",
    "start": "2300190",
    "end": "2307690"
  },
  {
    "text": "So you get something whose\nnormalized volume is halfway between that of these two\nnormalized volumes, but it has",
    "start": "2307690",
    "end": "2315650"
  },
  {
    "text": "the same minimum distance as\nthis guy, and that's where you get the coding gain from.",
    "start": "2315650",
    "end": "2321460"
  },
  {
    "text": "This is denser but still has\nthe same minimum distance. ",
    "start": "2321460",
    "end": "2327730"
  },
  {
    "text": "If we do this again, go out to\neight dimensions, we get, it turns out, E8.",
    "start": "2327730",
    "end": "2333670"
  },
  {
    "text": "And this has minimum\nsquare distance 4. But it has the same normalized\nvolume normalized back to two",
    "start": "2333670",
    "end": "2341859"
  },
  {
    "text": "dimensions as this guy, which\nonly had minimum squared distance 2.",
    "start": "2341860",
    "end": "2347300"
  },
  {
    "text": "So that's precisely why\nthis has a nominal coding gain of 2. We've doubled the minimum\nsquare distance without",
    "start": "2347300",
    "end": "2355520"
  },
  {
    "text": "changing its density, normalized\nback to two dimensions. ",
    "start": "2355520",
    "end": "2362140"
  },
  {
    "text": "All right, so you get all the\nBarnes-Wall lattices just by doing this. This turns out to be a\nsub-lattice of this guy.",
    "start": "2362140",
    "end": "2368730"
  },
  {
    "text": "Not surprisingly, just as these\nlattices are nested, just as the Reed-Muller codes\nare nested, so you get a",
    "start": "2368730",
    "end": "2375160"
  },
  {
    "text": "similar tableau. You get a similar construction\nthat you can take out to 16",
    "start": "2375160",
    "end": "2380800"
  },
  {
    "text": "dimensions, 32 dimensions,\nhowever many dimensions you want. And every time you do, you\nincrease the coding gain by a",
    "start": "2380800",
    "end": "2388410"
  },
  {
    "text": "factor of square root of 2, so\nthe coding gain eventually gets driven to infinity,\nand that's the story on",
    "start": "2388410",
    "end": "2394500"
  },
  {
    "text": "Barnes-Wall lattices. So similarly to Reed-Muller\ncodes, these are lattices that",
    "start": "2394500",
    "end": "2400410"
  },
  {
    "text": "are the densest known in certain\nsmall dimensions like 4, 8, and 16.",
    "start": "2400410",
    "end": "2406220"
  },
  {
    "text": "We don't know any\ndenser lattices. You start to get up to 32, 64\ndimensions, then we do know of",
    "start": "2406220",
    "end": "2412270"
  },
  {
    "text": "denser lattices. But they are not nearly as\nnicely structured, and maybe these are still the best from\na complexity point of view.",
    "start": "2412270",
    "end": "2422020"
  },
  {
    "text": "You can play similar games\non building trellis",
    "start": "2422020",
    "end": "2427090"
  },
  {
    "text": "representations of these\nlattices, as we did for Reed-Muller codes. They have similar kinds of\ntrellises because they're",
    "start": "2427090",
    "end": "2433010"
  },
  {
    "text": "based on the same\nconstruction.  So that's the story of\nBarnes-Wall lattices.",
    "start": "2433010",
    "end": "2439579"
  },
  {
    "text": "The most famous lattice is the\nLeech lattice, which is a super-dense lattice\nin 24 dimensions.",
    "start": "2439580",
    "end": "2451000"
  },
  {
    "text": "It has a coding gain of 6 dB. ",
    "start": "2451000",
    "end": "2458630"
  },
  {
    "text": "And unfortunately, it has\n195,560 near neighbors or",
    "start": "2458630",
    "end": "2464619"
  },
  {
    "text": "something like that. ",
    "start": "2464620",
    "end": "2469870"
  },
  {
    "text": "So you can see, it turns out\nit's a very close cousin of this 32-dimensional Barnes-Wall\nlattice.",
    "start": "2469870",
    "end": "2478160"
  },
  {
    "text": "It's related to the 24-12-8\nGolay code in the same way as",
    "start": "2478160",
    "end": "2489960"
  },
  {
    "text": "the Barnes-Wall lattices are\nto the Reed-Muller codes. So the fact that the Golay code\nis so exceptional can be",
    "start": "2489960",
    "end": "2497980"
  },
  {
    "text": "seen just as a projection of\nthe fact that the Leech lattice is so exceptional.",
    "start": "2497980",
    "end": "2503470"
  },
  {
    "text": "This somehow has the Golay code\nburied in it, if you can find it in here.",
    "start": "2503470",
    "end": "2509660"
  },
  {
    "text": "And the Leech lattice is\nparticularly notable not just because it has remarkably\nhigh coding gain for its",
    "start": "2509660",
    "end": "2517890"
  },
  {
    "text": "dimension-- it's remarkably\ndense for its dimension, exceptional--",
    "start": "2517890",
    "end": "2523110"
  },
  {
    "text": "but also because it has\nremarkable symmetries, so it's connected to some of the largest\nexceptional groups,",
    "start": "2523110",
    "end": "2531059"
  },
  {
    "text": "the monster exceptional\ngroups. And it was a key step in the\nclassification of all finite",
    "start": "2531060",
    "end": "2536950"
  },
  {
    "text": "groups to find the symmetry\ngroup of this lattice.",
    "start": "2536950",
    "end": "2543040"
  },
  {
    "text": "Just a little liberal\narts for you. So that's what we can\nget with lattices.",
    "start": "2543040",
    "end": "2549250"
  },
  {
    "text": "By going out to the Leech\nlattice or the Barnes-Wall lattice-- this could equally\nwell be the Leech lattice--",
    "start": "2549250",
    "end": "2555690"
  },
  {
    "text": "again, effective coding gain\nis only about 4 dB or maybe even less because of the\nexceptional number of near",
    "start": "2555690",
    "end": "2562210"
  },
  {
    "text": "neighbors here. ",
    "start": "2562210",
    "end": "2568390"
  },
  {
    "text": "To one digit of significance,\nthat's approximately its coding gain.",
    "start": "2568390",
    "end": "2573690"
  },
  {
    "text": " So how can we go beyond this?",
    "start": "2573690",
    "end": "2581958"
  },
  {
    "text": "As I said already, the next\ngreat breakthrough was trellis",
    "start": "2581958",
    "end": "2589280"
  },
  {
    "text": "codes for which Gottfried\nUngerboeck became famous. ",
    "start": "2589280",
    "end": "2599490"
  },
  {
    "text": "Trellis codes, as I say in the\nnotes, are basically-- first of all, Ungerboeck thought\nabout the problem from",
    "start": "2599490",
    "end": "2607200"
  },
  {
    "text": "a Euclidian distance\npoint of view. So what you had to do\nto break out of",
    "start": "2607200",
    "end": "2612859"
  },
  {
    "text": "Hamming distance thinking. He had the idea that in the\nbandwidth-limited regime, what you want to do is expand the\nconstellation rather than",
    "start": "2612860",
    "end": "2620000"
  },
  {
    "text": "expand the bandwidth. So to send four bits per\nsecond per Hertz.",
    "start": "2620000",
    "end": "2628690"
  },
  {
    "text": "You could do that using uncoded\n16-QAM constellation.",
    "start": "2628690",
    "end": "2634740"
  },
  {
    "text": "Or Ungerboeck saw, well, let's\nmake it into a 32-point constellation.",
    "start": "2634740",
    "end": "2640430"
  },
  {
    "text": "Now we have some redundancy, now\nwe can do some coding on this constellation. ",
    "start": "2640430",
    "end": "2647440"
  },
  {
    "text": "He used the set partitioning\nidea, which I've just explained to you.",
    "start": "2647440",
    "end": "2654360"
  },
  {
    "text": "Initially, he just looked at a\nQAM constellation and he said, let's divide it up into A, B, A,\nB, C, D, C, D, A, B, A, B,",
    "start": "2654360",
    "end": "2667960"
  },
  {
    "text": "C, D, C, D. So let's partition\nit from A, B, C, D into A and",
    "start": "2667960",
    "end": "2677349"
  },
  {
    "text": "D as I've done it here, and B\nand C are these two subsets. And we'll break this up into A\nand D and B and C. And then",
    "start": "2677350",
    "end": "2688320"
  },
  {
    "text": "some theoretical people came\nalong and said, well, this is just Z-squared, this is\nRZ-squared, and this is",
    "start": "2688320",
    "end": "2694810"
  },
  {
    "text": "2Z-squared. ",
    "start": "2694810",
    "end": "2701330"
  },
  {
    "text": "Let's, first of all, partition\nour enlarged constellation. ",
    "start": "2701330",
    "end": "2707100"
  },
  {
    "text": "Now here's the setup we're\ngoing to use for coding. ",
    "start": "2707100",
    "end": "2713040"
  },
  {
    "text": "We are going to bring in our\n...If we're trying to send-- I forget what notation I used in\nthe notes-- b bits per two",
    "start": "2713040",
    "end": "2720119"
  },
  {
    "text": "dimensions. ",
    "start": "2720120",
    "end": "2728570"
  },
  {
    "text": "Let's take one bit per two\ndimensions and put it into a rate 1/2 convolutional code. ",
    "start": "2728570",
    "end": "2736760"
  },
  {
    "text": "So we're going to get\nout two bits.  Everything here is going to be\nper two dimensions because",
    "start": "2736760",
    "end": "2744130"
  },
  {
    "text": "we're going to use a\ntwo-dimensional signal set. And we'll bring in our other\nb minus 1 bits down here.",
    "start": "2744130",
    "end": "2750420"
  },
  {
    "text": "These are called uncoded bits. ",
    "start": "2750420",
    "end": "2755769"
  },
  {
    "text": "For these two bits,\nwe're going to go into a subset selector. ",
    "start": "2755770",
    "end": "2764480"
  },
  {
    "text": "Two bits are going\nto select among-- this going to be something from\nA, B, C, or D. It's going",
    "start": "2764480",
    "end": "2772855"
  },
  {
    "text": "to tell us which\nsubset to use. ",
    "start": "2772855",
    "end": "2778780"
  },
  {
    "text": "All right, then we'll use that\nin combination with these b minus 1 bits to select a point\nfrom a 2 to the b plus 1 bit",
    "start": "2778780",
    "end": "2797990"
  },
  {
    "text": "QAM constellation.  Two dimensions. So this is actually our signal\npoint y, our two-dimensional",
    "start": "2797990",
    "end": "2807650"
  },
  {
    "text": "signal point. Do you see how the\nnumbers work out?",
    "start": "2807650",
    "end": "2814590"
  },
  {
    "text": "We want to send b bits per QAM\npoint, per two dimensions.",
    "start": "2814590",
    "end": "2820280"
  },
  {
    "text": "We're going to use a 2 to the b\nplus 1 point constellation,",
    "start": "2820280",
    "end": "2826410"
  },
  {
    "text": "so 32 instead of 16, say.  Take one bit in here, generate\ntwo streams, one redundant.",
    "start": "2826410",
    "end": "2840279"
  },
  {
    "text": "This will tell us A, B, C, D, so\nthat's two of the bits you need to select one\nof these points.",
    "start": "2840280",
    "end": "2845930"
  },
  {
    "text": " Say, in a 16-point\nconstellation, we'll provide a",
    "start": "2845930",
    "end": "2854640"
  },
  {
    "text": "bit label that looks\nlike this. For A, it will be 0, 0. b is\n0, 1, c is 1, 0, D is 1, 1.",
    "start": "2854640",
    "end": "2861220"
  },
  {
    "text": "That's always the low-order bits\nin any selection for A, B, C, D. And then we'll take\ntwo high-order bits, which",
    "start": "2861220",
    "end": "2868220"
  },
  {
    "text": "then tell us which of these\nfour groups it's in. So we'll have another 0,\n0, 0, 1, 1, 0, 1, 1.",
    "start": "2868220",
    "end": "2876470"
  },
  {
    "text": " Now I'm talking about\nb equals 3.",
    "start": "2876470",
    "end": "2882000"
  },
  {
    "text": "We have two bits that come in\nhere and select one of these blocks, and then two bits that\ncome out of here and select A,",
    "start": "2882000",
    "end": "2889690"
  },
  {
    "text": "B, C, D within the block. There's two parts\nto the label.",
    "start": "2889690",
    "end": "2895329"
  },
  {
    "text": "One of them determines A, B,\nC, D, the other one just determines some larger group.",
    "start": "2895330",
    "end": "2900880"
  },
  {
    "start": "2900880",
    "end": "2906079"
  },
  {
    "text": "These bits are called uncoded\nbecause there's no protection. If you sent point A over here\nand received point A over",
    "start": "2906080",
    "end": "2917369"
  },
  {
    "text": "here, that would look\nlike a perfectly legitimate code word. If we make an error of that far,\nwhich is d min squared",
    "start": "2917370",
    "end": "2928490"
  },
  {
    "text": "equals 4, say. We make an error of size d min\nequal 2 all the way over here,",
    "start": "2928490",
    "end": "2936300"
  },
  {
    "text": "then there's no further\nprotection from this code because this code only\ndetermines the sequence of As,",
    "start": "2936300",
    "end": "2942670"
  },
  {
    "text": "Bs, Cs, and Ds. ",
    "start": "2942670",
    "end": "2949720"
  },
  {
    "text": "This is called a within-subset\nerror. There's no protection on\nwithin subset errors.",
    "start": "2949720",
    "end": "2956380"
  },
  {
    "text": "What the code does is it\nprotects against smaller errors that are between subset\nerrors like A to B, which has",
    "start": "2956380",
    "end": "2966840"
  },
  {
    "text": "squared distance of 1 or A to\nD has a squared distance of two, and so forth.",
    "start": "2966840",
    "end": "2972380"
  },
  {
    "start": "2972380",
    "end": "2979250"
  },
  {
    "text": "Are you with me? Nobody's asking questions. Maybe I haven't permitted it. ",
    "start": "2979250",
    "end": "2988549"
  },
  {
    "text": "Do you follow what the\noverall setup is? I've done everything now,\nexcept choose an exact",
    "start": "2988550",
    "end": "2997880"
  },
  {
    "text": "constellation. For the exact constellation,\nI'll just choose one of the",
    "start": "2997880",
    "end": "3003500"
  },
  {
    "text": "best QAM signal sets. If it's large enough, I'll\nshape it like a circle.",
    "start": "3003500",
    "end": "3008590"
  },
  {
    "text": "Or I might even try to put\nGaussian shaping on it by some",
    "start": "3008590",
    "end": "3013860"
  },
  {
    "text": "completely extraneous\nthing that works only on these clumps. ",
    "start": "3013860",
    "end": "3019750"
  },
  {
    "text": "So shaping takes place on\nthe higher order bits. You can see that, given a large\nenough constellation",
    "start": "3019750",
    "end": "3027630"
  },
  {
    "text": "just by choosing these clumps,\nI can make the constellation sort of have the shape\nof a circle.",
    "start": "3027630",
    "end": "3033085"
  },
  {
    "start": "3033085",
    "end": "3042535"
  },
  {
    "text": "The subsets of A, B, C, and D\npoints have to all be the same size in order for this\nscheme to work.",
    "start": "3042535",
    "end": "3048460"
  },
  {
    "text": "But I can do that within a sort\nof circular constellation if the constellation\nis large enough. Or I can put some Gaussian\ndistribution on these clumps.",
    "start": "3048460",
    "end": "3058650"
  },
  {
    "text": "So I do shaping down here.  Initially, of course,\nUngerboeck",
    "start": "3058650",
    "end": "3065140"
  },
  {
    "text": "didn't worry about shaping. But if I try to do shaping, it's\ndown on this index, which",
    "start": "3065140",
    "end": "3070940"
  },
  {
    "text": "is considered to be the higher\norder bits that determine the growth structure of\nthe constellation.",
    "start": "3070940",
    "end": "3076950"
  },
  {
    "text": "These are the lower order bits,\nthese two bits, and they determine the fine structure\nwhich is",
    "start": "3076950",
    "end": "3082250"
  },
  {
    "text": "determined by this code. So the last thing I have to\nselect is the code, and it",
    "start": "3082250",
    "end": "3088579"
  },
  {
    "text": "turns out that the same code\nwe used in the example is a good code to use here.",
    "start": "3088580",
    "end": "3094530"
  },
  {
    "text": "Suppose we use the four-state\nrate 1/2 example code that",
    "start": "3094530",
    "end": "3102290"
  },
  {
    "text": "I've used before that is\neverybody's favorite example",
    "start": "3102290",
    "end": "3111290"
  },
  {
    "text": "because it has such excellent\ndistance properties. So it looks like this.",
    "start": "3111290",
    "end": "3117680"
  },
  {
    "text": " So that's my rate 1/2 encoder.",
    "start": "3117680",
    "end": "3122740"
  },
  {
    "text": " You remember as a binary code,\nit had minimum Hamming",
    "start": "3122740",
    "end": "3132660"
  },
  {
    "text": "distance 5. And the only minimum\ndistance code word",
    "start": "3132660",
    "end": "3137800"
  },
  {
    "text": "was the impulse response. Let me write the impulse\nresponse as this",
    "start": "3137800",
    "end": "3143290"
  },
  {
    "text": "way: 11, 01, 11.  This is what we get out at time\n0, time 1, and time 2.",
    "start": "3143290",
    "end": "3150200"
  },
  {
    "start": "3150200",
    "end": "3158510"
  },
  {
    "text": "Let me assign the following\nlabels to these subsets. We'll make that 00, this\none 11, this one 01,",
    "start": "3158510",
    "end": "3166370"
  },
  {
    "text": "and that one 10.  In other words, this is the\ncomplement of that.",
    "start": "3166370",
    "end": "3173184"
  },
  {
    "text": "This is the complement\nof that. ",
    "start": "3173185",
    "end": "3185690"
  },
  {
    "text": "What is the nearest neighbor\npoint in Euclidian space for this sequence?",
    "start": "3185690",
    "end": "3193300"
  },
  {
    "text": "If I complement the first two\nbits coming out, then I'm going to go from one of these\nsubsets to another, but within",
    "start": "3193300",
    "end": "3204020"
  },
  {
    "text": "one of these RZ-squared subsets,\nwhich has minimum squared distance 2.",
    "start": "3204020",
    "end": "3210650"
  },
  {
    "text": "So let's remind ourselves that\nthe minimum squared distance within A, B, C, D is 1, within\nA, D or B, C is 2, within",
    "start": "3210650",
    "end": "3218480"
  },
  {
    "text": "2Z-squared is 4. So I'm claiming--",
    "start": "3218480",
    "end": "3223920"
  },
  {
    "text": "there's actually a problem on\nthis on Problem Set 10 if you tried to do it--",
    "start": "3223920",
    "end": "3229900"
  },
  {
    "text": "that any error of this type,\n11, is going to cause me a",
    "start": "3229900",
    "end": "3240779"
  },
  {
    "text": "Euclidian error of minimum\nsquared distance 2, at least. It can only cause me to go from\nA to D, which is always",
    "start": "3240780",
    "end": "3249830"
  },
  {
    "text": "at least squared distance 2, or\nfrom B to C, or vice versa.",
    "start": "3249830",
    "end": "3255850"
  },
  {
    "text": "So in terms of Euclidian\ndistance, d min squared, I'm always going to get a squared\ndistance of 2 at this point.",
    "start": "3255850",
    "end": "3265200"
  },
  {
    "text": "And actually, any place you\ndiverged in the trellis, because of the structure\nof the code, this is going to be true.",
    "start": "3265200",
    "end": "3272210"
  },
  {
    "text": "I'm always going to get a\nsquared distance of 2 when two",
    "start": "3272210",
    "end": "3277800"
  },
  {
    "text": "trellis paths come together\nin the trellis. I always have a binary\ndifference of 11, so by the",
    "start": "3277800",
    "end": "3285770"
  },
  {
    "text": "same argument I'm always going\nto get a Euclidian squared distance of 2 when two trellis\npaths come together.",
    "start": "3285770",
    "end": "3292250"
  },
  {
    "text": "And furthermore, I'm going to\nhave at least one difference somewhere in between, which is\ngoing to, again, in terms of",
    "start": "3292250",
    "end": "3298790"
  },
  {
    "text": "Euclidian distance, lead\nto a Euclidian distance of at least 1.",
    "start": "3298790",
    "end": "3305250"
  },
  {
    "text": "So the conclusion is that\nbetween any two sequences of",
    "start": "3305250",
    "end": "3312080"
  },
  {
    "text": "constellation points that are\nlabeled by two distinct code words here, I'm going to have a\ncumulative Euclidian squared",
    "start": "3312080",
    "end": "3321720"
  },
  {
    "text": "distance of at least 5, by the\nsame argument as I had for the binary code. But now it turns out that I'm\nstill in a regime where binary",
    "start": "3321720",
    "end": "3332740"
  },
  {
    "text": "distance, Hamming distance\ntranslates directly to Euclidian distance.",
    "start": "3332740",
    "end": "3338450"
  },
  {
    "text": "This is what you saw. Basically, what we're using here\nis this is Z-squared, you",
    "start": "3338450",
    "end": "3344760"
  },
  {
    "text": "can think of as the image of\nthe (2, 2) binary code. RZ-squared is the image of the\n(2, 1) binary code, and this",
    "start": "3344760",
    "end": "3354359"
  },
  {
    "text": "2Z-squared is the image of\nthe (2, 0) binary code. You get the same partition\nstructure for these codes and",
    "start": "3354360",
    "end": "3362370"
  },
  {
    "text": "their co-sets. This is the set of all\nfour two-tuples.",
    "start": "3362370",
    "end": "3367829"
  },
  {
    "text": "We divided it into two subsets,\neach of minimum distance 2 here, and here we\ndivide it into four subsets,",
    "start": "3367830",
    "end": "3373530"
  },
  {
    "text": "each of minimum distance\ninfinity.  I'm not going to take the time\nto make this precise, but",
    "start": "3373530",
    "end": "3381240"
  },
  {
    "text": "think of how that\nrelation goes. So I've assured myself of a\nEuclidian squared distance at",
    "start": "3381240",
    "end": "3388200"
  },
  {
    "text": "least 5 between signal point\nsequences that correspond to two different code words.",
    "start": "3388200",
    "end": "3393550"
  },
  {
    "text": " That's excellent. Is the minimum squared distance\nof the code then",
    "start": "3393550",
    "end": "3399910"
  },
  {
    "text": "equal to 5, as it was in\nthe binary case of this trellis code? No, it's not.",
    "start": "3399910",
    "end": "3406200"
  },
  {
    "text": "And the problem is I could make\nthis kind of error, which is completely invisible\nto the code.",
    "start": "3406200",
    "end": "3412660"
  },
  {
    "text": "I can make a within subset\nerror, and this only has minimum square distance of 4.",
    "start": "3412660",
    "end": "3419220"
  },
  {
    "text": "So the conclusion of this\nanalysis is that this is",
    "start": "3419220",
    "end": "3424500"
  },
  {
    "text": "what's called a four-state\ntwo-dimensional trellis code. This four-state two-dimensional\ntrellis code",
    "start": "3424500",
    "end": "3431619"
  },
  {
    "text": "has a minimum squared distance\nof 4, and it has a number of nearest neighbors per\ntwo dimension of 4.",
    "start": "3431620",
    "end": "3438430"
  },
  {
    "text": "That's the number of nearest\nneighbors within 2Z-squared, which is one of these subsets.",
    "start": "3438430",
    "end": "3445320"
  },
  {
    "text": "So the conclusion is that\nalready, this has a legitimate",
    "start": "3445320",
    "end": "3450580"
  },
  {
    "text": "3 dB coding gain. Its coefficient is still just\nthe QAM coefficient, and this",
    "start": "3450580",
    "end": "3457020"
  },
  {
    "text": "very simple code has this\nperformance curve moved over.",
    "start": "3457020",
    "end": "3462170"
  },
  {
    "text": " So it's 3 dB all the\nway up the line.",
    "start": "3462170",
    "end": "3468695"
  },
  {
    "text": " So that's pretty good.",
    "start": "3468695",
    "end": "3474599"
  },
  {
    "text": "This is a trivial code that\ncould be decoding-- by the way, it was, again, done\nby the Viterbi algorithm",
    "start": "3474600",
    "end": "3480120"
  },
  {
    "text": "of a four-state trellis. You just take the sequences\nand it's exactly the same.",
    "start": "3480120",
    "end": "3489380"
  },
  {
    "text": "You measure distance in terms\nof minimum squared distance.",
    "start": "3489380",
    "end": "3494960"
  },
  {
    "text": "The only difference is when\nyou decode, you first find",
    "start": "3494960",
    "end": "3505640"
  },
  {
    "text": "what the closest point\nis within the A, B, C and D subsets. That is what you're going to\ntake as your representative",
    "start": "3505640",
    "end": "3512910"
  },
  {
    "text": "for that subset. So you first make basically an\nuncoded decision, which is the",
    "start": "3512910",
    "end": "3518250"
  },
  {
    "text": "closest point in A? Which is the closest point in B,\nwhich is the closest point in C, which is the closest\npoint in D?",
    "start": "3518250",
    "end": "3525090"
  },
  {
    "text": "You're going to get a metric\nfor each of those. How far is each of those\nfrom the receive point? So then in trellis decoding,\nwhat the trellis is going to",
    "start": "3525090",
    "end": "3532810"
  },
  {
    "text": "look like is something\nlike this. A, D, A, D, B, C,\nand so forth.",
    "start": "3532810",
    "end": "3543380"
  },
  {
    "start": "3543380",
    "end": "3549490"
  },
  {
    "text": "The trellis is going to look\nexactly the same, but here you get A, D, D, A, B, C, C, B.",
    "start": "3549490",
    "end": "3558840"
  },
  {
    "text": "So what metric are we\ngoing to use for each of these branches?",
    "start": "3558840",
    "end": "3565090"
  },
  {
    "text": "First, we find the closest point\nwithin each subset, and then we use the metric\nfor that point.",
    "start": "3565090",
    "end": "3570670"
  },
  {
    "text": "Clearly, if we're going to\nchoose A for this time interval, then we should use the\nclosest point in A as our",
    "start": "3570670",
    "end": "3580020"
  },
  {
    "text": "receive decision. We can get that survivor without\nany memory whatsoever",
    "start": "3580020",
    "end": "3586380"
  },
  {
    "text": "when we make that decision, and\nthen we take the sequences",
    "start": "3586380",
    "end": "3591630"
  },
  {
    "text": "of representatives and find\nthe best of those representatives as our best\ntrellis-coded sequence.",
    "start": "3591630",
    "end": "3597569"
  },
  {
    "text": " Any sequence of points that has\nlabels that correspond to",
    "start": "3597570",
    "end": "3603829"
  },
  {
    "text": "some path through this\ntrellis is a valid point and vice versa. If and only if the sequence of\nlabels is according to this",
    "start": "3603830",
    "end": "3610660"
  },
  {
    "text": "trellis is it a legitimate\ntrellis-coded point.",
    "start": "3610660",
    "end": "3615920"
  },
  {
    "text": "So it's a nice amalgamation. ",
    "start": "3615920",
    "end": "3622640"
  },
  {
    "text": "Great. With a simple four-state code,\nbasically we've doubled the size the constellation.",
    "start": "3622640",
    "end": "3628920"
  },
  {
    "text": "The constellation expansion is\n2, the constellation expansion factor with twice as large a\nconstellation, we've been able",
    "start": "3628920",
    "end": "3636230"
  },
  {
    "text": "to achieve a coding\ngain of 3 dB. Not bad.",
    "start": "3636230",
    "end": "3643109"
  },
  {
    "text": "So how do we extend this idea? First, extension would be to--",
    "start": "3643110",
    "end": "3650710"
  },
  {
    "text": "all right, let's go up\nto an 8 state, 16 state, whatever code. But is that going to improve\nour minimum distance using",
    "start": "3650710",
    "end": "3656960"
  },
  {
    "text": "this block diagram? It's not, because we're\nstill stuck with this",
    "start": "3656960",
    "end": "3662710"
  },
  {
    "text": "within subset distance. So we can never get past d min\nsquared equals 4 with a",
    "start": "3662710",
    "end": "3668550"
  },
  {
    "text": "four-way partition. What we have to do is make one\nmore level of partition and we need to make an eight way\npartition, at which point",
    "start": "3668550",
    "end": "3676830"
  },
  {
    "text": "we're going to get a within\nsubset distance of 8. ",
    "start": "3676830",
    "end": "3689960"
  },
  {
    "text": "I left out one step,\nI'm sorry. I'll come back to it. ",
    "start": "3689960",
    "end": "3696130"
  },
  {
    "text": "We can get a code minimum\nsquared distance up to 8, if we extend the minimum squared\ndistance up to 8.",
    "start": "3696130",
    "end": "3703260"
  },
  {
    "text": "The thing I didn't use, I didn't\ntell you before, was in computing the coding\ngain of this code--",
    "start": "3703260",
    "end": "3711570"
  },
  {
    "text": "let's just call it c-- what should it be? It should be the minimum squared\ndistance of the code",
    "start": "3711570",
    "end": "3717950"
  },
  {
    "text": "over the volume of the code\nper two dimensions. In this case, n is 2 so I'm just\ngoing to do it over the",
    "start": "3717950",
    "end": "3724990"
  },
  {
    "text": "volume of the code. Now what is the volume of\na convolutional code?",
    "start": "3724990",
    "end": "3730420"
  },
  {
    "text": "This is actually an interesting\nproblem, because",
    "start": "3730420",
    "end": "3737030"
  },
  {
    "text": "the Voronoi region of a trellis\ncode is actually an infinite dimensional object.",
    "start": "3737030",
    "end": "3743030"
  },
  {
    "text": "A trellis code is really an\ninfinite dimensional lattice. It's a lattice in infinite\ndimensional space.",
    "start": "3743030",
    "end": "3748490"
  },
  {
    "text": "And if you look at the Voronoi\nregion, it extends out into all these dimensions.",
    "start": "3748490",
    "end": "3754820"
  },
  {
    "text": "It might not for such a\nsimple code, but in principle it does.",
    "start": "3754820",
    "end": "3759930"
  },
  {
    "text": "However, you can find other\nfundamental regions. The way to think about\nthis is instead of",
    "start": "3759930",
    "end": "3767040"
  },
  {
    "text": "putting the volume here-- well, what have we cost\nourselves in volume?",
    "start": "3767040",
    "end": "3772840"
  },
  {
    "text": "We've doubled the size\nof the constellation. And in two dimensions,\nthat means we've doubled the volume.",
    "start": "3772840",
    "end": "3778830"
  },
  {
    "text": " So we've quadrupled the minimum\ndistance at the cost",
    "start": "3778830",
    "end": "3785910"
  },
  {
    "text": "of doubling the volume. We've covered twice as much\nspace now because we have",
    "start": "3785910",
    "end": "3793160"
  },
  {
    "text": "twice as many points. And so, that's where\nwe get the-- this is equal to, for\nthis code, that's 4.",
    "start": "3793160",
    "end": "3801710"
  },
  {
    "text": "We have a factor of 2 loss in\nvolume, and so that's where we get what I said was a coding\ngain of 2 or 3 dB.",
    "start": "3801710",
    "end": "3809795"
  },
  {
    "text": " Just to get you to the bottom\nline, we should replace the",
    "start": "3809795",
    "end": "3817280"
  },
  {
    "text": "volume by two times-- I call it eta of the code--\nwhere eta of the code is its",
    "start": "3817280",
    "end": "3824720"
  },
  {
    "text": "redundancy per two dimensions.",
    "start": "3824720",
    "end": "3831619"
  },
  {
    "text": "In this case, we introduce\none redundant bit per two dimensions, and that's why the\nconstellation has to expand by",
    "start": "3831620",
    "end": "3837400"
  },
  {
    "text": "a factor of 2. You see, we get the\nright answer.",
    "start": "3837400",
    "end": "3843840"
  },
  {
    "text": "The redundancy has increased by\none bit, so this has to be 2 to the b plus 1, so the\nconstellation has to be twice",
    "start": "3843840",
    "end": "3850790"
  },
  {
    "text": "as large, so the volume\nis twice as large. I'll just hand-wave and tell you\nthat's the factor you want",
    "start": "3850790",
    "end": "3857359"
  },
  {
    "text": "down here representing\nvolume -- 2 to the redundancy. And you can prove this by\nfinding a region which you can",
    "start": "3857360",
    "end": "3867992"
  },
  {
    "text": "show is a fundamental region\nof the trellis code and has this volume. But I won't go into that.",
    "start": "3867992",
    "end": "3875730"
  },
  {
    "text": "OK, so that's the calculation\nwhich I should've mentioned before, I skipped\nright over it.",
    "start": "3875730",
    "end": "3881090"
  },
  {
    "text": "Back to what I was saying. To improve trellis codes, the\nfirst thing you can do is to,",
    "start": "3881090",
    "end": "3886450"
  },
  {
    "text": "say, go to an eight-way\npartition. So now we're going to\nhave eight subsets.",
    "start": "3886450",
    "end": "3893270"
  },
  {
    "text": "So we're going to need\nthree bits here. So let's use two bits here and\nuse a rate 2/3 trellis code.",
    "start": "3893270",
    "end": "3901180"
  },
  {
    "text": "We're going to have three bits\ncoming out here to select subsets, and we're going to have\nb minus 2 bits down here",
    "start": "3901180",
    "end": "3908609"
  },
  {
    "text": "to select a point still\na 2b plus 1 point QAM",
    "start": "3908610",
    "end": "3914620"
  },
  {
    "text": "constellation. So our redundancy per two\ndimensions is still one bit per two dimensions.",
    "start": "3914620",
    "end": "3920119"
  },
  {
    "text": "We're still going to lose a\nfactor of 2, but now we can go up to d min squared equals 8 and\nwe can go up to a coding",
    "start": "3920120",
    "end": "3927570"
  },
  {
    "text": "gain of 6 dB. So in his original paper,\nUngerboeck did this.",
    "start": "3927570",
    "end": "3933910"
  },
  {
    "text": "He showed codes going up to 256\nstates in two dimensions",
    "start": "3933910",
    "end": "3939859"
  },
  {
    "text": "that gets you up to a nominal\n6 dB coding gain. And because they have low\ncoefficients here, they get",
    "start": "3939860",
    "end": "3948390"
  },
  {
    "text": "very close to 6 dB of effective\ncoding gain. ",
    "start": "3948390",
    "end": "3954610"
  },
  {
    "text": "Already in Ungerboeck,\nwe have codes-- I mean, eventually you can get\nback to just the within-subset",
    "start": "3954610",
    "end": "3963510"
  },
  {
    "text": "coefficient again, which\nis always 4. You can get up to, say, 6 dB\nwith maybe 512 states of",
    "start": "3963510",
    "end": "3974859"
  },
  {
    "text": "effective coding gain, which\nis considerably better than",
    "start": "3974860",
    "end": "3981160"
  },
  {
    "text": "the densest lattice we would\nthink of using, and also quite",
    "start": "3981160",
    "end": "3987250"
  },
  {
    "text": "reasonable to implement. Now we're going to need\na 256, 512-state Viterbi algorithm decoder.",
    "start": "3987250",
    "end": "3993250"
  },
  {
    "start": "3993250",
    "end": "3998510"
  },
  {
    "text": "This was a stunning\nbreakthrough. Immediately in 1993, everybody\nstarted building turbo codes.",
    "start": "3998510",
    "end": "4008360"
  },
  {
    "text": "Back in 1982, everybody started building trellis codes. It happened to be the time of\nthe V.32 modem, and everybody",
    "start": "4008360",
    "end": "4016820"
  },
  {
    "text": "said boy, this is just what we\nneed to get an additional 3 or 4 dB coding gain in\nthe V.32 modem.",
    "start": "4016820",
    "end": "4024115"
  },
  {
    "text": "What was actually done there\nis this was simply an eight-state convolutional code,\nso it was rate 2/3.",
    "start": "4024115",
    "end": "4033690"
  },
  {
    "text": "And there was tweaking\nof this. It was made rotationally\ninvariant, made nonlinear.",
    "start": "4033690",
    "end": "4039810"
  },
  {
    "text": "And a lot of activity, which was\nvery nice, stimulated by the standards effort.",
    "start": "4039810",
    "end": "4045130"
  },
  {
    "text": "But that was basically the state\nof the art in the '80s. ",
    "start": "4045130",
    "end": "4050269"
  },
  {
    "text": "The one other improvement\nthat was made was",
    "start": "4050270",
    "end": "4056070"
  },
  {
    "text": "the following idea. We really don't like doubling\nthe size of the constellation,",
    "start": "4056070",
    "end": "4061609"
  },
  {
    "text": "particularly for a large\none, mostly for implementation reasons.",
    "start": "4061610",
    "end": "4068160"
  },
  {
    "text": "There were some feelings against\nnonlinearities a larger constellation\nwould cost you.",
    "start": "4068160",
    "end": "4073920"
  },
  {
    "text": "You wanted to minimize the\nconstellation expansion ratio. So how were we ever\ngoing to do that?",
    "start": "4073920",
    "end": "4082730"
  },
  {
    "text": "You can't do it this way\nin two dimensions. The way to do that is to go\nup to four dimensions.",
    "start": "4082730",
    "end": "4089255"
  },
  {
    "text": " So let's do subset partitioning\nin four",
    "start": "4089255",
    "end": "4095140"
  },
  {
    "text": "dimensions.  So now think of four dimensional\nconstellations.",
    "start": "4095140",
    "end": "4100759"
  },
  {
    "text": "In practice, these are just\nbuilt from the Cartesian product of two two-dimensional\nconstellations.",
    "start": "4100760",
    "end": "4107790"
  },
  {
    "text": "We start with Z4. The next one down is D4,\nwhich has a minimum",
    "start": "4107790",
    "end": "4112939"
  },
  {
    "text": "square distance of 2. It's sometimes called a\ncheckerboard constellation in four dimensions.",
    "start": "4112939",
    "end": "4118180"
  },
  {
    "text": "It's just the red-black\nidea again. Then below that, we have a\nfour-way partition into RZ4,",
    "start": "4118180",
    "end": "4126009"
  },
  {
    "text": "which still has minimum\ndistance 2.",
    "start": "4126010",
    "end": "4131299"
  },
  {
    "text": "And one more level of\npartitioning here into something into RD4, which has\nminimum squared distance of 4.",
    "start": "4131300",
    "end": "4142558"
  },
  {
    "text": " So this is an eight-way\npartition of a",
    "start": "4142559",
    "end": "4150160"
  },
  {
    "text": "four-dimensional\nconstellation. This idea was introduced\nby Lee-Fang Wei. ",
    "start": "4150160",
    "end": "4157290"
  },
  {
    "text": "Again, this is an interesting\ncolumn over here. You can think of this as being\nthe (4, 4, 1) code.",
    "start": "4157290",
    "end": "4165200"
  },
  {
    "text": "This is the Euclidian image\nof the (4, 3, 2) code.",
    "start": "4165200",
    "end": "4170376"
  },
  {
    "text": "It kind of expanded\nin the lattice. We know we can't do any\nbetter than (4, 2, 2).",
    "start": "4170376",
    "end": "4175870"
  },
  {
    "text": "Down here, this is the\n(4, 1, 4) code. So again, this is the same\npartition as we get for binary",
    "start": "4175870",
    "end": "4182870"
  },
  {
    "text": "codes with the distances--  again, for binary codes and this\nlevel of partitioning,",
    "start": "4182870",
    "end": "4192609"
  },
  {
    "text": "Hamming distance translates\nto Euclidian distance. It's really just the image of\nthese codes as you go up to",
    "start": "4192609",
    "end": "4201480"
  },
  {
    "text": "the lattices.  Now in this case, what's the\nbest we can ever do?",
    "start": "4201480",
    "end": "4210220"
  },
  {
    "text": "Coding gain. We still can't go up to a\nsquared distance of greater",
    "start": "4210220",
    "end": "4216800"
  },
  {
    "text": "than 4 because our within-subset\ndistance is",
    "start": "4216800",
    "end": "4222829"
  },
  {
    "text": "going to be within RD4. So this is still limited to 4.",
    "start": "4222830",
    "end": "4228240"
  },
  {
    "text": "But now, what's our redundancy\nper two dimensions? Here, say, we're going to\nuse still a rate 2/3",
    "start": "4228240",
    "end": "4237210"
  },
  {
    "text": "convolutional code. We'll now have an eight-subset\nselector in 4D, so everything",
    "start": "4237210",
    "end": "4242570"
  },
  {
    "text": "is per 4D here. So this is going to be 2b minus\ntwo bits and this is",
    "start": "4242570",
    "end": "4255380"
  },
  {
    "text": "going to be, it turns out, a\nconstellation that is twice as",
    "start": "4255380",
    "end": "4260449"
  },
  {
    "text": "large in four dimensions. We still have one redundant bit\nper four dimensions, so we need twice the size of the\nconstellation in four",
    "start": "4260450",
    "end": "4268050"
  },
  {
    "text": "dimensions. But that's only 1/2 a bit of\nredundancy per two dimensions.",
    "start": "4268050",
    "end": "4274670"
  },
  {
    "text": "So this denominator becomes\n2 to the 1/2. Waving hands furiously here.",
    "start": "4274670",
    "end": "4281940"
  },
  {
    "text": "And so this could go up to 2 to\nthe 3/2, which is 4.5 dB.",
    "start": "4281940",
    "end": "4286989"
  },
  {
    "text": " So there's actually a\nparticularly nice eight-state",
    "start": "4286990",
    "end": "4295800"
  },
  {
    "text": "code here that Wei came up with\nwhich, really, in terms",
    "start": "4295800",
    "end": "4301619"
  },
  {
    "text": "of performance versus complexity\nis the only code that anyone has ever come up\nwith that is distinctly better",
    "start": "4301620",
    "end": "4308510"
  },
  {
    "text": "than any of Ungerboeck's\noriginal codes. All of Ungerboeck's original\ncodes were in one dimension,",
    "start": "4308510",
    "end": "4314040"
  },
  {
    "text": "two dimensions, or PSK codes. You could also do this\non phase shift key constellations.",
    "start": "4314040",
    "end": "4320120"
  },
  {
    "text": " So with the Wei code, it gives\nyou a very simple way",
    "start": "4320120",
    "end": "4329260"
  },
  {
    "text": "to get 4 1/2 dB.  Actually, you have to go up to\n16 states to get 4 1/2 dB.",
    "start": "4329260",
    "end": "4338770"
  },
  {
    "text": "The Wei code is only 4.2 dB. And this is basically what was\nadopted for standards in the",
    "start": "4338770",
    "end": "4344900"
  },
  {
    "text": "early '90s. The V.34 modem standard, also\nthe ADSL standard has the same",
    "start": "4344900",
    "end": "4353470"
  },
  {
    "text": "code in it. If you have DSL at home, that's\nwhat it's using in it. Again, with a very simple code,\nthe eight-state Viterbi",
    "start": "4353470",
    "end": "4363460"
  },
  {
    "text": "algorithm, you can get 4.2\ndB of coding gain. The error coefficient in this\ncase, this has 24 nearest",
    "start": "4363460",
    "end": "4373530"
  },
  {
    "text": "neighbors in D4, or 12\nper two dimensions. So you lose 0.15 dB\nor something.",
    "start": "4373530",
    "end": "4385460"
  },
  {
    "text": "I'm sorry, 0.3 dB. ",
    "start": "4385460",
    "end": "4391800"
  },
  {
    "text": "Anyway, this is a\nvery nice code. ",
    "start": "4391800",
    "end": "4401460"
  },
  {
    "text": "There are 32 and 64-state\ncodes in V.34. They don't gain you very much.",
    "start": "4401460",
    "end": "4406610"
  },
  {
    "text": "They each double the complexity\nand only gain you about 0.2 dB for each one.",
    "start": "4406610",
    "end": "4413710"
  },
  {
    "text": "All these things tend\nto saturate. You can't get more than about 5\nto 6 dB of coding gain with",
    "start": "4413710",
    "end": "4419760"
  },
  {
    "text": "a reasonable size\ntrellis code. ",
    "start": "4419760",
    "end": "4425790"
  },
  {
    "text": "So where are we now? We can get 5 or 6 dB of coding\ngain with, say, a 256-state",
    "start": "4425790",
    "end": "4435610"
  },
  {
    "text": "trellis code. We can get another 1 to 1 and\na 1/2 dB of shaping gain.",
    "start": "4435610",
    "end": "4443360"
  },
  {
    "text": "So all together, we're\nup to 6 to 7.5 dB.",
    "start": "4443360",
    "end": "4449590"
  },
  {
    "text": "From here, we're up somewhere\ninto the 2 to 3 dB range.",
    "start": "4449590",
    "end": "4455580"
  },
  {
    "text": "In other words, combining\ntrellis code with, say, 256",
    "start": "4455580",
    "end": "4463980"
  },
  {
    "text": "states with some shaping scheme\nwith maybe 1 dB of",
    "start": "4463980",
    "end": "4473300"
  },
  {
    "text": "shaping gain, this gets you\nmaybe 5 dB or 5.5 dB.",
    "start": "4473300",
    "end": "4481520"
  },
  {
    "text": "We get 6 dB total effective\ngain, and we're still 3 dB or",
    "start": "4481520",
    "end": "4491870"
  },
  {
    "text": "maybe 2 or 3 dB from\nShannon limit. ",
    "start": "4491870",
    "end": "4505440"
  },
  {
    "text": "So, close but not\nquite there yet. Five minutes to go.",
    "start": "4505440",
    "end": "4513250"
  },
  {
    "text": "So in the notes, there's\none page on higher performance schemes. There are higher performance\nschemes.",
    "start": "4513250",
    "end": "4520340"
  },
  {
    "text": "There are turbo codes for the\nbandwidth-limited regime that get you to within 1 dB\nof the Shannon limit.",
    "start": "4520340",
    "end": "4527130"
  },
  {
    "text": "Sequential decoding gets you to\nwithin about 1 and a 1/2 dB of the Shannon limit.",
    "start": "4527130",
    "end": "4533260"
  },
  {
    "text": "The idea of multi-level\ncodes --  you can regard each of these\ntwo-way partitions as being",
    "start": "4533260",
    "end": "4542260"
  },
  {
    "text": "specified by one bit. So with three bits of labels,\nyou can specify",
    "start": "4542260",
    "end": "4548570"
  },
  {
    "text": "an eight-way partition. Another idea is to code on\neach of these levels",
    "start": "4548570",
    "end": "4554100"
  },
  {
    "text": "separately. Use a binary code on each of\nthese levels separately. Each of these corresponds to an\neffective channel that has",
    "start": "4554100",
    "end": "4564079"
  },
  {
    "text": "different characteristics. You've basically got to take the\nGaussian distribution and",
    "start": "4564080",
    "end": "4569350"
  },
  {
    "text": "alias it around in accord with\nwhatever this partition actually is. But you can come up with an\neffective binary channel at",
    "start": "4569350",
    "end": "4579030"
  },
  {
    "text": "each of these levels. It turns out to be a binary\nsymmetric input channel,",
    "start": "4579030",
    "end": "4584239"
  },
  {
    "text": "always in these cases. So you could think of\ntaking a binary--",
    "start": "4584240",
    "end": "4590960"
  },
  {
    "text": "now, each one of these channels\nis going to have its own capacity.",
    "start": "4590960",
    "end": "4596130"
  },
  {
    "text": "It turns out that information\ntheoretically, the capacity of",
    "start": "4596130",
    "end": "4601659"
  },
  {
    "text": "multi-level coding on each of\nthese levels independently is the same as the aggregate\ncapacity of coding it on the",
    "start": "4601660",
    "end": "4609460"
  },
  {
    "text": "whole channel. It's a lovely separability\nresult.",
    "start": "4609460",
    "end": "4615450"
  },
  {
    "text": "So in principle, if you could\ncode at capacity on each of these binary channels, then you\ncould get to the capacity",
    "start": "4615450",
    "end": "4624150"
  },
  {
    "text": "of the aggregate channel, with\na large enough constellation. So that's a good idea.",
    "start": "4624150",
    "end": "4629400"
  },
  {
    "text": "We now know a lot of binary\ncapacity-approaching code, so",
    "start": "4629400",
    "end": "4634469"
  },
  {
    "text": "let's use a turbo code or a\nlow-density parity-check code at each level, an appropriate\ncode.",
    "start": "4634470",
    "end": "4642330"
  },
  {
    "text": "It turns out, as you might\nexpect, that the first level is the really hard level. In this case, you might have\na rate 1/3 or 1/2 code and",
    "start": "4642330",
    "end": "4651470"
  },
  {
    "text": "really work hard\nwith your code. At the next level, the effective\nerror probability is",
    "start": "4651470",
    "end": "4658030"
  },
  {
    "text": "much better. Making hard decisions, you might\nhave a probability of",
    "start": "4658030",
    "end": "4663530"
  },
  {
    "text": "1/10 or lower of making\nan error. So these are really much\neasier problems.",
    "start": "4663530",
    "end": "4669265"
  },
  {
    "text": "It might be a better idea at\nthese levels just to use algebraic coding or something\nthat works very well.",
    "start": "4669265",
    "end": "4675940"
  },
  {
    "text": "The capacity is nearly one per\nbit at each level, so you want to code with very little\nredundancy at these next",
    "start": "4675940",
    "end": "4682780"
  },
  {
    "text": "levels, but it's still capable\nof approaching capacity. Well, it turns out this is a\ngood scenario for Reed-Solomon",
    "start": "4682780",
    "end": "4689690"
  },
  {
    "text": "codes or some kind of\nalgebraic code. So the moral is you only\nreally need your",
    "start": "4689690",
    "end": "4696880"
  },
  {
    "text": "capacity-approaching code at\nmaybe the first or first and second levels. Down here, just use\na very high rate--",
    "start": "4696880",
    "end": "4704820"
  },
  {
    "text": "1,023, 1,003 Reed-Solomon code\nover gf of 2 to the 10th--",
    "start": "4704820",
    "end": "4714170"
  },
  {
    "text": "very little redundancy, and\ndrive the error rate down as low as you like at each\nof these levels.",
    "start": "4714170",
    "end": "4720840"
  },
  {
    "text": "So multi-level coding is a\ngood way in principle. I'm not sure if it's been\ndone in practice.",
    "start": "4720840",
    "end": "4726830"
  },
  {
    "text": "In fact, I don't know of any\ncapacity-approaching code that has been done in practice,\nexcept there's a very crude",
    "start": "4726830",
    "end": "4734380"
  },
  {
    "text": "technique, I would say, called\nBit-Interleaved Coded",
    "start": "4734380",
    "end": "4742449"
  },
  {
    "text": "Modulation, BICM, which is the\nfollowing simple idea.",
    "start": "4742450",
    "end": "4748070"
  },
  {
    "text": " Let's just take a single\nlow-density parity-check code",
    "start": "4748070",
    "end": "4756470"
  },
  {
    "text": "or some capacity-approaching\ncode. It's going to have to be\ndesigned for a BICM channel.",
    "start": "4756470",
    "end": "4763620"
  },
  {
    "text": "Let's totally interleave the\nbits and then let's use them as the bits that control each\nof these levels here.",
    "start": "4763620",
    "end": "4769640"
  },
  {
    "text": "At the output of the channel,\nwe know which level the bits came out of. So at the output of the channel,\nwe know what the",
    "start": "4769640",
    "end": "4776120"
  },
  {
    "text": "appropriate a posteriori\nprobabilities are for each bit. They're going to be\nwildly different.",
    "start": "4776120",
    "end": "4781850"
  },
  {
    "text": "A bit sent through here is going\nto be sent through a very highly reliable channel,\na bit sent through here is going to be sent through a very\nlow reliability channel.",
    "start": "4781850",
    "end": "4788780"
  },
  {
    "text": "But with all this interleaving\nand the independence approximation in the analysis,\nwe're going to be able to",
    "start": "4788780",
    "end": "4796380"
  },
  {
    "text": "design a code for this mixture\nchannel, a mixture of high reliability and low reliability\nbinary channels,",
    "start": "4796380",
    "end": "4803560"
  },
  {
    "text": "that's going to get to the\ncapacity of this mixture channel, which as I've already\ntold you is equal to the",
    "start": "4803560",
    "end": "4810590"
  },
  {
    "text": "capacity of the aggregate\nchannel. ",
    "start": "4810590",
    "end": "4816260"
  },
  {
    "text": "I guess there's some elegant\nfeatures of it. But that's, in practice,\nwhat people use.",
    "start": "4816260",
    "end": "4821739"
  },
  {
    "text": "They use it more because they've\nalready developed a chip for binary channels, and\nthey want to reuse that chip",
    "start": "4821740",
    "end": "4828220"
  },
  {
    "text": "for some large constellation\nchannel, some bandwidth-limited channel.",
    "start": "4828220",
    "end": "4834520"
  },
  {
    "text": "So this was originally advocated\nby Qualcomm as a, quote, pragmatic approach.",
    "start": "4834520",
    "end": "4840740"
  },
  {
    "text": "OK, we've got a chip that works\nfor binary channels, so",
    "start": "4840740",
    "end": "4846030"
  },
  {
    "text": "let's just interleave outputs\nand use it over this",
    "start": "4846030",
    "end": "4851639"
  },
  {
    "text": "multi-level channel and it'll\nprobably work well enough. And, in fact, that's true.",
    "start": "4851640",
    "end": "4856930"
  },
  {
    "text": "And the information support\nfor it, again, is the fact that you don't lose anything\nby coding bit by bit from a",
    "start": "4856930",
    "end": "4866180"
  },
  {
    "text": "capacity point of view. ",
    "start": "4866180",
    "end": "4872820"
  },
  {
    "text": "I think that's the only one\nthat's been used in practice. And on wireless cellular\nchannels for instance, that",
    "start": "4872820",
    "end": "4882800"
  },
  {
    "text": "tends to be what's used.  And of course, I know that\nperhaps a couple of you have",
    "start": "4882800",
    "end": "4892770"
  },
  {
    "text": "an exam at 11:00, so I'll\nmake a point of letting you out of here.",
    "start": "4892770",
    "end": "4897790"
  },
  {
    "text": "I've really enjoyed teaching\nthe course this term. It was the first time I was able\nto get to the analysis of",
    "start": "4897790",
    "end": "4903110"
  },
  {
    "text": "capacity-approaching codes,\nso I enjoyed doing that.",
    "start": "4903110",
    "end": "4908239"
  },
  {
    "text": "At this point, I think the\nsubject of coding for the",
    "start": "4908240",
    "end": "4915000"
  },
  {
    "text": "additive white Gaussian noise\nchannel, the traditional channel, is pretty\nwell wrapped up. I don't think we're going to\nsee any great improvements.",
    "start": "4915000",
    "end": "4922360"
  },
  {
    "text": "There's still some very\ninteresting theoretical questions about the convergence\nof these iterative",
    "start": "4922360",
    "end": "4928159"
  },
  {
    "text": "decoding algorithms. What do they converge to? How fast do they converge? There are interesting\nconnections to statistical",
    "start": "4928160",
    "end": "4935510"
  },
  {
    "text": "physics and inference\nand so forth that people are still exploring. They're interested in graph\ntheoretical properties.",
    "start": "4935510",
    "end": "4942190"
  },
  {
    "text": "There's attempts to\nalgebraically construct these capacity-approaching codes, so\nwe can say a lot more about",
    "start": "4942190",
    "end": "4948120"
  },
  {
    "text": "their parameters and their\nperformance, particularly for lower probabilities like\n10 to the minus 15.",
    "start": "4948120",
    "end": "4954360"
  },
  {
    "text": "So you go to the information\ntheory symposium, you'll still hear a lot of papers about\ncoding effectively for",
    "start": "4954360",
    "end": "4960750"
  },
  {
    "text": "additive white Gaussian noise or\nmemoryless binary symmetric input channels.",
    "start": "4960750",
    "end": "4967110"
  },
  {
    "text": "But people ask me, is\ncoding dead now?",
    "start": "4967110",
    "end": "4973800"
  },
  {
    "text": "Are Fourier transforms dead? No, they're not dead. But they've become sort of part\nof the standard core of",
    "start": "4973800",
    "end": "4981219"
  },
  {
    "text": "what you should know. I think this is a subject that\nanyone in communication should",
    "start": "4981220",
    "end": "4987239"
  },
  {
    "text": "certainly learn, but is it an\narea where people are going to make further advances that are\nimportant from a practical",
    "start": "4987240",
    "end": "4994210"
  },
  {
    "text": "point of view? Obviously not very much, in\nview of the Shannon limit. We are very close to the\nShannon limit for these",
    "start": "4994210",
    "end": "5001030"
  },
  {
    "text": "channels, and have been\nnow for a few years. So it's important to know\nabout these things.",
    "start": "5001030",
    "end": "5007350"
  },
  {
    "text": "It's important to know when\nyou're in the wireless course, for instance. You basically calculate mutual\ninformation and assume that",
    "start": "5007350",
    "end": "5013980"
  },
  {
    "text": "you can go at the mutual\ninformation. This is how you do it. So you should know how it's\ndone, and that's why I think",
    "start": "5013980",
    "end": "5023770"
  },
  {
    "text": "this course continues to\nbe worth teaching. But from a point of view of\nresearch, it's become a rather",
    "start": "5023770",
    "end": "5030739"
  },
  {
    "text": "mature area, and the action\nhas gone off to other kinds of channels. Multi this, multi\nthat, so forth.",
    "start": "5030740",
    "end": "5037120"
  },
  {
    "text": "Anything to do with networks\nor multi-user is where the action in coding is.",
    "start": "5037120",
    "end": "5043410"
  },
  {
    "text": "Data compression, of course, is\na subject that we haven't talked about at all, which\nis also coding.",
    "start": "5043410",
    "end": "5049180"
  },
  {
    "text": "So anyway, I think it's good for\nyou to have all this under your belts.",
    "start": "5049180",
    "end": "5054460"
  },
  {
    "text": "I hope that you find it useful\nin your future lives, and I wish you all well on\nthe final exam.",
    "start": "5054460",
    "end": "5059969"
  },
  {
    "text": "Thank you. ",
    "start": "5059970",
    "end": "5075626"
  }
]