[
  {
    "text": "OPERATOR: -- The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6840"
  },
  {
    "text": "offer high quality educational\nresources for free. To make a donation, or view\nadditional materials from",
    "start": "6840",
    "end": "13389"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at ocw.mit.edu.",
    "start": "13390",
    "end": "22750"
  },
  {
    "text": "PROFESSOR: At the end of the\nlecture on Tuesday, a number of people asked me questions,\nasked Professor Grimson",
    "start": "22750",
    "end": "30310"
  },
  {
    "text": "questions, which made it clear\nthat I had been less than",
    "start": "30310",
    "end": "35540"
  },
  {
    "text": "clear on at least a few things,\nso I want to come back and revisit a couple of the\nthings we talked about at the",
    "start": "35540",
    "end": "43400"
  },
  {
    "text": "end of the lecture. You'll remember that I had drawn\nthis decision tree, in",
    "start": "43400",
    "end": "58110"
  },
  {
    "text": "part because it's an important\nconcept I want you to understand, the concept of\ndecision trees, and also to",
    "start": "58110",
    "end": "65710"
  },
  {
    "text": "illustrate, I hope, visually,\nsome things related to dynamic programming.",
    "start": "65710",
    "end": "71910"
  },
  {
    "text": "So we had in that decision tree,\nis we had the weight",
    "start": "71910",
    "end": "77940"
  },
  {
    "text": "vector, and I just given a very\nsimple one [5,3,2], and",
    "start": "77940",
    "end": "83730"
  },
  {
    "text": "we had a very simple value\nvector, [9,7,8].",
    "start": "83730",
    "end": "92820"
  },
  {
    "text": "And then the way we drew the\ntree, was we started at the",
    "start": "92820",
    "end": "104120"
  },
  {
    "text": "top, and said all right, we're\ngoing to first look at item",
    "start": "104120",
    "end": "113660"
  },
  {
    "text": "number 2, which was the third\nitem in our list of items, of course, and say that we had\nfive pounds left of weight",
    "start": "113660",
    "end": "124200"
  },
  {
    "text": "that our knapsack that could\nhold, and currently had a value of 0.",
    "start": "124200",
    "end": "131849"
  },
  {
    "text": "And then we made a decision, to\nnot put that last item in",
    "start": "131850",
    "end": "138240"
  },
  {
    "text": "the backpack, and said if we\nmade that decision, the next",
    "start": "138240",
    "end": "143780"
  },
  {
    "text": "item we had to consider was\nitem 1, we still had five",
    "start": "143780",
    "end": "148870"
  },
  {
    "text": "pounds available, and we still\nhad a weight 0 available.",
    "start": "148870",
    "end": "155090"
  },
  {
    "text": "Now I, said the next item to\nconsider is item 1, but really",
    "start": "155090",
    "end": "160140"
  },
  {
    "text": "what I meant is, 1 and all of\nthe items proceeding it in the",
    "start": "160140",
    "end": "165640"
  },
  {
    "text": "list. This is my shorthand for\nsaying the list up to and",
    "start": "165640",
    "end": "171790"
  },
  {
    "text": "including items sub 1,\nkind of a normal way to think about it.",
    "start": "171790",
    "end": "178010"
  },
  {
    "text": "And then we finish building\nthe tree, left first step first, looking at all the no\nbranches, 0,5,0 and then we",
    "start": "178010",
    "end": "189310"
  },
  {
    "text": "were done, that was\none branch.",
    "start": "189310",
    "end": "195920"
  },
  {
    "text": "We then backed up, and said\nlet's look at a yes, we'll",
    "start": "195920",
    "end": "201490"
  },
  {
    "text": "include item number 1. Well, what happens here, if\nwe've included that, it uses",
    "start": "201490",
    "end": "213940"
  },
  {
    "text": "up all the available weight,\nand gave us the value of 9. STUDENT: [UNINTELLIGIBLE]",
    "start": "213940",
    "end": "221340"
  },
  {
    "text": "PROFESSOR: Pardon? STUDENT: -- want to be off\nthe bottom branch.",
    "start": "221340",
    "end": "229410"
  },
  {
    "text": "PROFESSOR: Yup, Off by 1. Yeah, I wanted to come off\nthis branch, because I've",
    "start": "229410",
    "end": "234980"
  },
  {
    "text": "backtrack just 1, thank you.",
    "start": "234980",
    "end": "243340"
  },
  {
    "text": "And then I backtrack up\nto this branch, and",
    "start": "243340",
    "end": "249160"
  },
  {
    "text": "from here we got 0,2,7. And I'm not going to draw the\nrest of the tree for you here,",
    "start": "249160",
    "end": "256169"
  },
  {
    "text": "because I drew it last time, and\nyou don't need to see the whole tree. The point I wanted to make is\nthat for every node, except",
    "start": "256170",
    "end": "269330"
  },
  {
    "text": "the leaves, the leaves are the\nbottom of a tree in this case, computer scientists are weird,\nright, they draw trees where",
    "start": "269330",
    "end": "276810"
  },
  {
    "text": "the root is at the top, and the\nleaves are at the bottom. And I don't know why, but since\ntime immemorial that is",
    "start": "276810",
    "end": "284524"
  },
  {
    "text": "the way computer scientists\nhave drawn trees.",
    "start": "284524",
    "end": "289539"
  },
  {
    "text": "That's why we're not biologists,\nI guess. We don't understand\nthese things.",
    "start": "289540",
    "end": "294970"
  },
  {
    "text": "But what I want you to notice is\nthat for each node, except the leaves, the solution for\nthat node can be computed from",
    "start": "294970",
    "end": "305310"
  },
  {
    "text": "the solutions from\nit's children.",
    "start": "305310",
    "end": "310450"
  },
  {
    "text": "So in order to look at the\nsolution of this node, I",
    "start": "310450",
    "end": "316430"
  },
  {
    "text": "choose one of the solutions of\nit's children, a or b, is the",
    "start": "316430",
    "end": "323020"
  },
  {
    "text": "best solution if I'm here, and\nof course this is the better of the 2 solutions.",
    "start": "323020",
    "end": "329360"
  },
  {
    "text": "If I look at this node, I get to\nchoose its solution as the better of the solution for\nthis node, and this node.",
    "start": "329360",
    "end": "339889"
  },
  {
    "text": "All the way up to the top, where\nwhen I have to choose the best solution to the whole\nproblem, it's either the best",
    "start": "339890",
    "end": "347020"
  },
  {
    "text": "solution to the left node,\nor the best solution to the right node. This happens to be a binary\ndecision tree.",
    "start": "347020",
    "end": "358199"
  },
  {
    "text": "There's nothing magic about\nthere being only two nodes, for the knapsack problem, that's\njust the way it works",
    "start": "358200",
    "end": "365409"
  },
  {
    "text": "out, but there are other\nproblems where there might be multiple decisions to make, more\nthan a or yes or no, but",
    "start": "365410",
    "end": "373920"
  },
  {
    "text": "it's always the case here that\nI have what we last time",
    "start": "373920",
    "end": "379790"
  },
  {
    "text": "talked about as what? Optimal sub structure.",
    "start": "379790",
    "end": "396530"
  },
  {
    "text": "As I defined it last time, it\nmeans that I can solve a",
    "start": "396530",
    "end": "402600"
  },
  {
    "text": "problem by finding the optimal\nsolution to smaller sub",
    "start": "402600",
    "end": "408390"
  },
  {
    "text": "problems. Classic divide and\nconquer that we've seen over",
    "start": "408390",
    "end": "414340"
  },
  {
    "text": "and over again in the term. Take a hard problem, say well,\nI can solve it by solving 2",
    "start": "414340",
    "end": "422360"
  },
  {
    "text": "smaller problems and combine\ntheir solution, and this case, the combining is choosing\nthe best, it's a or b.",
    "start": "422360",
    "end": "436700"
  },
  {
    "text": "So then, I went directly from\nthat way of thinking about the problem, to this\nstraightforward, at the top of",
    "start": "436700",
    "end": "446260"
  },
  {
    "text": "the slide here, also at the\ntop of your handout, both yesterday and today, a\nstraightforward implementation",
    "start": "446260",
    "end": "455090"
  },
  {
    "text": "of max val, that basically\njust did this.",
    "start": "455090",
    "end": "464650"
  },
  {
    "text": "And as you might have guessed,\nwhen you're doing this sort of thing, recursion is a very\nnatural way to implement it.",
    "start": "464650",
    "end": "474050"
  },
  {
    "text": "We then ran this, demonstrated\nthat it got the right answer on problems that were small\nenough that we knew with the",
    "start": "474050",
    "end": "480979"
  },
  {
    "text": "right answer was, ran it on a\nbig problem, got what we hoped",
    "start": "480980",
    "end": "488160"
  },
  {
    "text": "was the right answer, but we had\nno good way to check it in our heads, but noticed it\ntook a long time to run.",
    "start": "488160",
    "end": "497830"
  },
  {
    "text": "And then we asked ourselves,\nwhy did it take so long to run? And when we turned on the print\nstatement, what we saw",
    "start": "497830",
    "end": "504800"
  },
  {
    "text": "is because it was doing\nthe same thing over and over again.",
    "start": "504800",
    "end": "511800"
  },
  {
    "text": "Because we had a lot of the\nsub-problems were the same.",
    "start": "511800",
    "end": "517740"
  },
  {
    "text": "It was as if, when we went\nthrough this search tree, we never remembered what we got\nat the bottom, and we just",
    "start": "517740",
    "end": "523300"
  },
  {
    "text": "re-computed things\nover and over. So that led us to look at\nmemoization, the sort of key",
    "start": "523300",
    "end": "531319"
  },
  {
    "text": "idea behind dynamic programming,\nwhich says let's",
    "start": "531320",
    "end": "543370"
  },
  {
    "text": "remember the work we've done and\nnot do it all over again.",
    "start": "543370",
    "end": "548470"
  },
  {
    "text": "We used a dictionary to\nimplement the memo, and that got us to the fast max val,\nwhich got called from max val",
    "start": "548470",
    "end": "558850"
  },
  {
    "text": "0, because I wanted to make\nsure I didn't change the specification of max val by\nintroducing this memo that",
    "start": "558850",
    "end": "567330"
  },
  {
    "text": "users shouldn't know even\nexists, because it's part of the implementation, not part\nof the problem statement.",
    "start": "567330",
    "end": "575089"
  },
  {
    "text": "We did that, and all I did was\ntake the original code and",
    "start": "575090",
    "end": "580340"
  },
  {
    "text": "keep track of what I've done,\nand say have I computed this value before, if so, don't\ncompute it again.",
    "start": "580340",
    "end": "590420"
  },
  {
    "text": "And that's the key idea that\nyou'll see over and over again as you solve problems with\ndynamic programming, is you",
    "start": "590420",
    "end": "597610"
  },
  {
    "text": "say, have I already solved this\nproblem, if so, let me",
    "start": "597610",
    "end": "602839"
  },
  {
    "text": "look up the answer. If I haven't solved the problem,\nlet me solve it, and",
    "start": "602840",
    "end": "608260"
  },
  {
    "text": "store the answer away\nfor later reference.",
    "start": "608260",
    "end": "615240"
  },
  {
    "text": "Very simple idea, and typically\nthe beauty of dynamic programming as you've\nseen here, is not only is the",
    "start": "615240",
    "end": "622370"
  },
  {
    "text": "idea simple, even the\nimplementation is simple. There are a lot of complicated\nalgorithmic ideas, dynamic",
    "start": "622370",
    "end": "630699"
  },
  {
    "text": "programming is not\none of them. Which is one of the reasons\nwe teach it here. The other reason we teach it\nhere, in addition to it being",
    "start": "630700",
    "end": "637810"
  },
  {
    "text": "simple, is that it's\nincredibly useful. It's probably among the most\nuseful ideas there is for",
    "start": "637810",
    "end": "646700"
  },
  {
    "text": "solving complicated problems. All right, now let's\nlook at it.",
    "start": "646700",
    "end": "655240"
  },
  {
    "text": "So here's the fast version, we\nlooked at it last time, I'm not going to bore you by going\nthrough the details of it",
    "start": "655240",
    "end": "660610"
  },
  {
    "text": "again, but we'll run it.",
    "start": "660610",
    "end": "667529"
  },
  {
    "text": "This was the big example we\nlooked at last time, where we",
    "start": "667530",
    "end": "675670"
  },
  {
    "text": "had 30 items we could put in to\nchoose from, so when we do",
    "start": "675670",
    "end": "682560"
  },
  {
    "text": "it exponentially, it looks like\nit's 2 to the 30, which is a big number, but when we ran\nthis, it found the answer,",
    "start": "682560",
    "end": "693290"
  },
  {
    "text": "and it took only 1805 calls.",
    "start": "693290",
    "end": "698630"
  },
  {
    "text": "Now I got really excited about\nthis because, to me it's really amazing, that we've\ntaken a problem that is",
    "start": "698630",
    "end": "706430"
  },
  {
    "text": "apparently exponential, and\nsolved it like that. And in fact, I could double\nthe size of the items to",
    "start": "706430",
    "end": "716240"
  },
  {
    "text": "choose from, and it would\nstill run like. Eh - I'm not very good at\nsnapping my fingers -- it",
    "start": "716240",
    "end": "722160"
  },
  {
    "text": "would still run quickly. All right, so here's the\nquestion: have I found a way",
    "start": "722160",
    "end": "731850"
  },
  {
    "text": "to solve an inherently\nexponential problem in linear time.",
    "start": "731850",
    "end": "737180"
  },
  {
    "text": "Because what we'll see here,\nand we saw a little of this last time, as I double the\nsize of the items, I only",
    "start": "737180",
    "end": "746670"
  },
  {
    "text": "really roughly double\nthe running time. Quite amazing.",
    "start": "746670",
    "end": "752520"
  },
  {
    "text": "So have I done that? Well, I wish I had, because then\nI would be really famous,",
    "start": "752520",
    "end": "759250"
  },
  {
    "text": "and my department head would\ngive me a big raise, and all sorts of wonderful things\nwould follow.",
    "start": "759250",
    "end": "765120"
  },
  {
    "text": "But, I'm not famous, and I\ndidn't solve that problem.",
    "start": "765120",
    "end": "771680"
  },
  {
    "text": "What's going on? Well this particular algorithm\ntakes roughly, and I'll come",
    "start": "771680",
    "end": "778890"
  },
  {
    "text": "back to the roughly question,\norder (n,s) time, where n is",
    "start": "778890",
    "end": "792930"
  },
  {
    "text": "the number of items in the list\nand s, roughly speaking,",
    "start": "792930",
    "end": "801800"
  },
  {
    "text": "is the size of the knapsack.",
    "start": "801800",
    "end": "806980"
  },
  {
    "text": "We should also observe, that\nit takes order and s space.",
    "start": "806980",
    "end": "817279"
  },
  {
    "text": "Because it's not free to\nstore all these values.",
    "start": "817280",
    "end": "826030"
  },
  {
    "text": "So at one level what I'm doing\nis trading time for space.",
    "start": "826030",
    "end": "831810"
  },
  {
    "text": "It can run faster because\nI'm using some space to save things.",
    "start": "831810",
    "end": "839899"
  },
  {
    "text": "So in this case, we had 30 items\nand the wait was 40,",
    "start": "839900",
    "end": "848760"
  },
  {
    "text": "and, you know, this gives\nus 1200 which is kind of where we were.",
    "start": "848760",
    "end": "854000"
  },
  {
    "text": "And I'm really emphasizing kind\nof here, because really what I'm using the available\nsize for, is as a proxy for",
    "start": "854000",
    "end": "863600"
  },
  {
    "text": "the number of items that can\nfit in the knapsack.",
    "start": "863600",
    "end": "868940"
  },
  {
    "text": "Because the actual running time\nof this, and the actual space of this algorithm, is\ngoverned, interestingly",
    "start": "868940",
    "end": "878570"
  },
  {
    "text": "enough, not by the size of the\nproblem alone, but by the size",
    "start": "878570",
    "end": "885930"
  },
  {
    "text": "of the solution.",
    "start": "885930",
    "end": "891050"
  },
  {
    "text": "And I'm going to come\nback to that.",
    "start": "891050",
    "end": "898430"
  },
  {
    "text": "So how long it takes to run is\nrelated to how many items I",
    "start": "898430",
    "end": "905839"
  },
  {
    "text": "end up being able to fit\ninto the knapsack. If you think about it,\nthis make sense.",
    "start": "905840",
    "end": "916070"
  },
  {
    "text": "An entry is made in the memo\nwhenever an item, and an",
    "start": "916070",
    "end": "922280"
  },
  {
    "text": "available size pair\nis considered.",
    "start": "922280",
    "end": "927560"
  },
  {
    "text": "As soon as the available size\ngoes to 0, I know I can't enter any more items into\nthe memo, right?",
    "start": "927560",
    "end": "937510"
  },
  {
    "text": "So the number of items I have to\nremember is related to how",
    "start": "937510",
    "end": "944760"
  },
  {
    "text": "many items I can fit\nin the knapsack.",
    "start": "944760",
    "end": "951030"
  },
  {
    "text": "And of course, the amount of\nrunning time is exactly the number of things I\nhave to remember,",
    "start": "951030",
    "end": "956540"
  },
  {
    "text": "almost exactly, right? So you can see if you think\nabout it abstractly, why the",
    "start": "956540",
    "end": "966330"
  },
  {
    "text": "amount of work I have to do here\nwill be proportional to the number of items I can fit\nin, that is to say, the size",
    "start": "966330",
    "end": "974839"
  },
  {
    "text": "of the solution. This is not the way we'd like\nto talk about complexity.",
    "start": "974840",
    "end": "983949"
  },
  {
    "text": "When we talk about the order,\nor big O, as we keep writing it, of a problem, we always\nprefer to talk about it in",
    "start": "983950",
    "end": "992940"
  },
  {
    "text": "terms of the size\nof the problem. And that makes sense because in\ngeneral we don't know the",
    "start": "992940",
    "end": "1000730"
  },
  {
    "text": "size of the solution until\nwe've solved it. So we'd much rather define big\nO in terms of the inputs.",
    "start": "1000730",
    "end": "1013519"
  },
  {
    "text": "What we have here is\nwhat's called a pseudo-polynomial algorithm.",
    "start": "1013520",
    "end": "1024930"
  },
  {
    "text": "You remember a polynomial\nalgorithm is an algorithm that's polynomial in the\nsize of the inputs.",
    "start": "1024930",
    "end": "1035850"
  },
  {
    "text": "Here we have an algorithm that's\npolynomial in the size of the solution, hence\nthe qualifier pseudo.",
    "start": "1035850",
    "end": "1048789"
  },
  {
    "text": "More formally, and again this is\nnot crucial to get all the details on this, if we think\nabout a numerical algorithm, a",
    "start": "1048790",
    "end": "1059390"
  },
  {
    "text": "pseudo-polynomial algorithm\nhas running time that's",
    "start": "1059390",
    "end": "1065860"
  },
  {
    "text": "polynomial in the numeric\nvalue of the input.",
    "start": "1065860",
    "end": "1082510"
  },
  {
    "text": "I'm using a numeric example\nbecause it's easier to talk about it that way.",
    "start": "1082510",
    "end": "1091000"
  },
  {
    "text": "So you might to look at, say,\nan implementation of factorial, and say its running\ntime is proportional to the",
    "start": "1091000",
    "end": "1099600"
  },
  {
    "text": "numerical value of the number\nwho's factorial. If I'm computing factorial of 8,\nI'll do 8 operations, Right",
    "start": "1099600",
    "end": "1109470"
  },
  {
    "text": "Factorial of 10, I'll\ndo 10 operations.",
    "start": "1109470",
    "end": "1114549"
  },
  {
    "text": "Now the key issue to think about\nhere, is that as we look",
    "start": "1114550",
    "end": "1119870"
  },
  {
    "text": "at this kind of thing, what\nwe'll see is that, if we look",
    "start": "1119870",
    "end": "1128770"
  },
  {
    "text": "at a numeric value, we know that\nthat's exponential number",
    "start": "1128770",
    "end": "1138820"
  },
  {
    "text": "in the number of digits.",
    "start": "1138820",
    "end": "1152190"
  },
  {
    "text": "So that's the key thing to think\nabout, Right That you can take a problem, and\ntypically, when we're actually",
    "start": "1152190",
    "end": "1162750"
  },
  {
    "text": "formally looking at\ncomputational complexity, big O, what we'll define the in\nterms of, is the size of the",
    "start": "1162750",
    "end": "1177780"
  },
  {
    "text": "coding of the input.",
    "start": "1177780",
    "end": "1188070"
  },
  {
    "text": "The number of bits required\nto represent the input in the computer.",
    "start": "1188070",
    "end": "1199180"
  },
  {
    "text": "And so when we say something is\nexponential, we're talking about in terms of the number\nof bits required",
    "start": "1199180",
    "end": "1205600"
  },
  {
    "text": "to represent it. Now why am I going through all\nthis, maybe I should use the",
    "start": "1205600",
    "end": "1214990"
  },
  {
    "text": "word pseudo-theory? Only because I want you to\nunderstand that when we start",
    "start": "1214990",
    "end": "1222380"
  },
  {
    "text": "talking about complexity, it\ncan be really quite subtle.",
    "start": "1222380",
    "end": "1227830"
  },
  {
    "text": "And you have to be very careful\nto think about what you mean, or you can be very\nsurprised at how long",
    "start": "1227830",
    "end": "1234680"
  },
  {
    "text": "something takes to run, or\nhow much space it uses. And you have to understand the\ndifference between, are you",
    "start": "1234680",
    "end": "1243450"
  },
  {
    "text": "defining the performance in\nterms of the size of the problem, or the size\nof the solution.",
    "start": "1243450",
    "end": "1249330"
  },
  {
    "text": "When you talk about the size\nof the problem, what do you mean by that, is it the length\nof an array, is it the size of",
    "start": "1249330",
    "end": "1256940"
  },
  {
    "text": "the elements of the array,\nand it can matter. So when we ask you to tell\nus something about the",
    "start": "1256940",
    "end": "1265620"
  },
  {
    "text": "efficiency, on for example a\nquiz, we want you to be very",
    "start": "1265620",
    "end": "1271270"
  },
  {
    "text": "careful not to just write\nsomething like, order n squared, but to tell\nus what n is.",
    "start": "1271270",
    "end": "1282290"
  },
  {
    "text": "For example, the number of\nelements in the list. But if you have a list of lists, maybe\nit's not just the number",
    "start": "1282290",
    "end": "1290010"
  },
  {
    "text": "elements in the list, maybe\nit depends upon what the elements are.",
    "start": "1290010",
    "end": "1297670"
  },
  {
    "text": "So just sort of a warning to try\nand be very careful as you",
    "start": "1297670",
    "end": "1302960"
  },
  {
    "text": "think about these things,\nall right.",
    "start": "1302960",
    "end": "1311740"
  },
  {
    "text": "So I haven't done magic, I've\ngiven you a really fast way to solve a knapsack problem, but\nit's still exponential deep",
    "start": "1311740",
    "end": "1322220"
  },
  {
    "text": "down in its heart,\nin something. All right, in recitation you'll\nget a chance to look at",
    "start": "1322220",
    "end": "1330610"
  },
  {
    "text": "yet another kind of problem that\ncan be solved by dynamic programming, there\nare many of them.",
    "start": "1330610",
    "end": "1337640"
  },
  {
    "text": "Before we leave the knapsack\nproblem though, I want to take a couple of minutes to\nlook at a slight",
    "start": "1337640",
    "end": "1343350"
  },
  {
    "text": "variation of the problem. So let's look at this one.",
    "start": "1343350",
    "end": "1349770"
  },
  {
    "text": "Suppose I told you that not only\nwas there a limit on the",
    "start": "1349770",
    "end": "1355120"
  },
  {
    "text": "total weight of the items\nin the knapsack, but also on the volume.",
    "start": "1355120",
    "end": "1361580"
  },
  {
    "text": "OK, if I gave you a box of\nballoons, the fact that they didn't weight anything wouldn't\nmean you couldn't",
    "start": "1361580",
    "end": "1368360"
  },
  {
    "text": "put, you could put lots of them\nin the knapsack, right? Sometimes it's the volume not\nthe weight that matters,",
    "start": "1368360",
    "end": "1376940"
  },
  {
    "text": "sometimes it's both. So how would we go about solving\nthis problem if I told",
    "start": "1376940",
    "end": "1382080"
  },
  {
    "text": "you not only was there a maximum\nweight, but there was a maximum volume.",
    "start": "1382080",
    "end": "1387400"
  },
  {
    "text": "Well, we want to go back and\nattack it exactly the way we attacked it the first time,\nwhich was write some",
    "start": "1387400",
    "end": "1394880"
  },
  {
    "text": "mathematical formulas. So you'll remember that when we\nlooked at it, we said that",
    "start": "1394880",
    "end": "1401630"
  },
  {
    "text": "the problem was to maximize the\nsum from i equals 1 to n,",
    "start": "1401630",
    "end": "1408290"
  },
  {
    "text": "of p sub i, x sub i, maybe it\nshould be 0 to n minus 1, but",
    "start": "1408290",
    "end": "1414790"
  },
  {
    "text": "we won't worry about that. And we had to do it subject to\nthe constraint that the sum",
    "start": "1414790",
    "end": "1425509"
  },
  {
    "text": "from 1 to n of the weight sub i\ntimes x sub i, remember x is",
    "start": "1425510",
    "end": "1430530"
  },
  {
    "text": "0 if it was in, 1 if it wasn't,\nwas less than or equal to the cost, as I wrote it\nthis time, which was the",
    "start": "1430530",
    "end": "1438740"
  },
  {
    "text": "maximum allowable weight. What do we do if we want to\nadd volume, is an issue?",
    "start": "1438740",
    "end": "1446350"
  },
  {
    "text": "Does this change? Does the goal change? You're answering. Answer out -- no one else can\nsee you shake your head.",
    "start": "1446350",
    "end": "1453779"
  },
  {
    "text": "STUDENT: No. PROFESSOR: No. The goal does not change, it's\nstill the same goal. What changes?",
    "start": "1453780",
    "end": "1459090"
  },
  {
    "text": "STUDENT: The constraints. PROFESSOR: Yeah, and you\ndon't get another bar.",
    "start": "1459090",
    "end": "1464320"
  },
  {
    "text": "The constraint has to change. I've added a constraint. And, what's the constraint\nI've added?",
    "start": "1464320",
    "end": "1471830"
  },
  {
    "text": "Somebody else -- yeah? STUDENT: You can't exceed\nthe volume that the knapsack can hold.",
    "start": "1471830",
    "end": "1477309"
  },
  {
    "text": "PROFESSOR: Right, but can\nyou state in this kind of formal way? STUDENT: [INAUDIBLE]",
    "start": "1477310",
    "end": "1483620"
  },
  {
    "text": "PROFESSOR: -- sum from\ni equals 1 to n -- STUDENT: [INAUDIBLE] PROFESSOR: Let's say v sub i, x\nsub i, is less than or equal",
    "start": "1483620",
    "end": "1495170"
  },
  {
    "text": "to, we'll write k for the\ntotal allowable volume. Exactly.",
    "start": "1495170",
    "end": "1502040"
  },
  {
    "text": "So the thing to notice here,\nis it's actually quite a simple little change\nwe've made.",
    "start": "1502040",
    "end": "1513919"
  },
  {
    "text": "I've simply added this one extra\nconstraint, nice thing about thinking about it this\nway is it's easy to think",
    "start": "1513920",
    "end": "1520930"
  },
  {
    "text": "about it, and what do you think\nI'll have to do if I want to go change the code?",
    "start": "1520930",
    "end": "1528560"
  },
  {
    "text": "I'm not going to do it for you,\nbut what would I think about doing when I\nchange the code?",
    "start": "1528560",
    "end": "1535769"
  },
  {
    "text": "Well, let's look at the simple\nversion first, because it's easier to look at. At the top.",
    "start": "1535770",
    "end": "1542000"
  },
  {
    "text": "Well basically, all I'd have to\ndo is go through and find every place I checked the\nconstraint, and change it.",
    "start": "1542000",
    "end": "1551929"
  },
  {
    "text": "To incorporate the\nnew constraint. And when I went to the dynamic\nprogramming problem, what",
    "start": "1551930",
    "end": "1558180"
  },
  {
    "text": "would I have to do,\nwhat would change? The memo would have to change,\nas well as the checks, right?",
    "start": "1558180",
    "end": "1567990"
  },
  {
    "text": "Because now, I not only would\nhave to think about how much",
    "start": "1567990",
    "end": "1573970"
  },
  {
    "text": "weight did I have available, but\nI have to think about how much volume did I\nhave available.",
    "start": "1573970",
    "end": "1580350"
  },
  {
    "text": "So whereas before, I had a\nmapping from the item and the",
    "start": "1580350",
    "end": "1587610"
  },
  {
    "text": "weight available, now I would\nhave to have it from a tuple of the weight and the volume.",
    "start": "1587610",
    "end": "1595269"
  },
  {
    "text": "Very small changes. That's one of the things I want\nyou to sort of understand",
    "start": "1595270",
    "end": "1601520"
  },
  {
    "text": "as we look at algorithms, that\nthey're very general, and once",
    "start": "1601520",
    "end": "1607040"
  },
  {
    "text": "you've figured out how to solve\none problem, you can often solve another problem\nby a very straightforward",
    "start": "1607040",
    "end": "1613770"
  },
  {
    "text": "reduction of this\nkind of thing.",
    "start": "1613770",
    "end": "1619990"
  },
  {
    "text": "All right, any questions\nabout that. Yeah? STUDENT: I had a question about\nwhat you were talking",
    "start": "1619990",
    "end": "1625860"
  },
  {
    "text": "about just before. PROFESSOR: The\npseudo-polynomial? STUDENT: Yes. PROFESSOR: Ok. STUDENT: So, how do you come\nto a conclusion as to which you should use then, if you can\ndetermine the size based",
    "start": "1625860",
    "end": "1635464"
  },
  {
    "text": "on solution, or based on input,\nso how do you decide?",
    "start": "1635464",
    "end": "1642010"
  },
  {
    "text": "PROFESSOR: Great question. So the question is, how do you\nchoose an algorithm, why would",
    "start": "1642010",
    "end": "1647940"
  },
  {
    "text": "I choose to use a\npseudo-polynomial algorithm when I don't know how big the\nsolution is likely to be, I",
    "start": "1647940",
    "end": "1653960"
  },
  {
    "text": "think that's one way\nto think about it. Well, so if we think about the\nknapsack problem, we can look",
    "start": "1653960",
    "end": "1662500"
  },
  {
    "text": "at it, and we can ask ourselves,\nwell first of all we know that the brute force\nexponential solution is going",
    "start": "1662500",
    "end": "1670065"
  },
  {
    "text": "to be a loser if the number\nof items is large.",
    "start": "1670065",
    "end": "1675149"
  },
  {
    "text": "Fundamentally in this case, what\nI could look at is the ratio of the number of items to\nthe size of the knapsack,",
    "start": "1675150",
    "end": "1683090"
  },
  {
    "text": "say well, I've got lots items\nto choose from, I probably won't put them all in.",
    "start": "1683090",
    "end": "1690130"
  },
  {
    "text": "But even if I did, it\nwould still only be 30 of them, right?",
    "start": "1690130",
    "end": "1697730"
  },
  {
    "text": "It's hard. Typically what we'll discover\nis the pseudo-polynomial algorithms are usually better,\nand in this case, never worse.",
    "start": "1697730",
    "end": "1713360"
  },
  {
    "text": "So this will never be worse than\nthe brute force one. if I get really unlucky, I end up\nchecking the same number of",
    "start": "1713360",
    "end": "1720270"
  },
  {
    "text": "things, but I'd have to be\nreally, it'd have to be a very strange structure\nto the problem.",
    "start": "1720270",
    "end": "1727779"
  },
  {
    "text": "So it's almost always the case\nthat, if you can find a",
    "start": "1727780",
    "end": "1734500"
  },
  {
    "text": "solution that uses dynamic\nprogramming, it will be better",
    "start": "1734500",
    "end": "1741930"
  },
  {
    "text": "than the brute force, and\ncertainly not, well, maybe use more space, but not\nuse more time.",
    "start": "1741930",
    "end": "1749419"
  },
  {
    "text": "But there is no magic, here, and\nso the question you asked is a very good question.",
    "start": "1749420",
    "end": "1755570"
  },
  {
    "text": "And it's sometimes the case in\nreal life that you don't know",
    "start": "1755570",
    "end": "1760659"
  },
  {
    "text": "which is the better algorithm\non the data you're actually going to be crunching.",
    "start": "1760660",
    "end": "1766440"
  },
  {
    "text": "And you pays your money and you\ntakes your chances, right? And if the data is not what you\nthink it's going to be,",
    "start": "1766440",
    "end": "1774830"
  },
  {
    "text": "you may be wrong in your choice,\nso you typically do have to spend some time thinking\nabout it, what's the",
    "start": "1774830",
    "end": "1780850"
  },
  {
    "text": "data going to actually\nlook like. Very good question. Anything else?",
    "start": "1780850",
    "end": "1788940"
  },
  {
    "text": "All right, a couple of closing\npoints before we leave this,",
    "start": "1788940",
    "end": "1795970"
  },
  {
    "text": "things I would like\nyou to remember. In dynamic programming, one of\nthe things that's going on is",
    "start": "1795970",
    "end": "1809820"
  },
  {
    "text": "we're trading time for space.",
    "start": "1809820",
    "end": "1817899"
  },
  {
    "text": "Dynamic programming is not\nthe only time we do that. We've solved a lot of problems\nthat way, in fact, by trading",
    "start": "1817900",
    "end": "1826679"
  },
  {
    "text": "time for space. Table look-up, for example,\nright, that if you're going to",
    "start": "1826680",
    "end": "1832909"
  },
  {
    "text": "have trig tables, you may want\nto compute them all at once and then just look it up.",
    "start": "1832910",
    "end": "1838509"
  },
  {
    "text": "So that's one thing. Two, don't be intimidated by\nexponential problems. There's",
    "start": "1838510",
    "end": "1858360"
  },
  {
    "text": "a tendency for people to say, oh\nthis problem's exponential, I can't solve it.",
    "start": "1858360",
    "end": "1863799"
  },
  {
    "text": "Well, I solve 2 or 3 exponential\nproblems before breakfast every day.",
    "start": "1863800",
    "end": "1870780"
  },
  {
    "text": "You know things like, how to\nfind my way to the bathroom is inherently exponential, but I\nmanage to solve it anyway.",
    "start": "1870780",
    "end": "1880380"
  },
  {
    "text": "Don't be intimidated. Even though it is apparently\nexponential, a lot of times",
    "start": "1880380",
    "end": "1887150"
  },
  {
    "text": "you can actually solve\nit much, much faster. Other issues.",
    "start": "1887150",
    "end": "1896799"
  },
  {
    "text": "Three: dynamic programming\nis broadly useful.",
    "start": "1896800",
    "end": "1913990"
  },
  {
    "text": "Whenever you're looking at a\nproblem that seems to have a natural recursive solution,\nthink about whether you can",
    "start": "1913990",
    "end": "1922780"
  },
  {
    "text": "attack it with dynamic\nprogramming. If you've got this optimal\nsubstructure, and overlapping",
    "start": "1922780",
    "end": "1930700"
  },
  {
    "text": "sub-problems, you can use\ndynamic programming. So it's good for knapsacks, it's\ngood for shortest paths,",
    "start": "1930700",
    "end": "1939380"
  },
  {
    "text": "it's good for change-making,\nit's good for a whole variety of problems. And so keep it in\nyour toolbox, and when you",
    "start": "1939380",
    "end": "1948260"
  },
  {
    "text": "have a hard problem to solve,\none of the first questions you should ask yourself is, can\nI use dynamic programming?",
    "start": "1948260",
    "end": "1955490"
  },
  {
    "text": "It's great for string-matching\nproblems of a whole variety.",
    "start": "1955490",
    "end": "1960510"
  },
  {
    "text": "It's hugely useful. And finally, I want you to keep\nin mind the whole concept",
    "start": "1960510",
    "end": "1968420"
  },
  {
    "text": "of problem reduction.",
    "start": "1968420",
    "end": "1974660"
  },
  {
    "text": "I started with this silly\ndescription of a burglar, and",
    "start": "1974660",
    "end": "1980340"
  },
  {
    "text": "said : Well this is really the\nknapsack problem, and now I can go Google the knapsack\nproblem and find",
    "start": "1980340",
    "end": "1986550"
  },
  {
    "text": "code to solve it. Any time you can reduce\nsomething to a previously",
    "start": "1986550",
    "end": "1993940"
  },
  {
    "text": "solved problem, that's good.",
    "start": "1993940",
    "end": "1999759"
  },
  {
    "text": "And this is a hugely important\nlesson to learn.",
    "start": "1999760",
    "end": "2005080"
  },
  {
    "text": "People tend not to realize that\nthe first question you should always ask yourself, is\nthis really just something",
    "start": "2005080",
    "end": "2011790"
  },
  {
    "text": "that's well-known in disguise? Is it a shortest path problem? Is it a nearest neighbor\nproblem?",
    "start": "2011790",
    "end": "2018380"
  },
  {
    "text": "Is it what string is this\nmost similar to problem? There are scores of\nwell-understood problems, but",
    "start": "2018380",
    "end": "2027240"
  },
  {
    "text": "only really scores, it's not\nthousands of them, and over",
    "start": "2027240",
    "end": "2032929"
  },
  {
    "text": "time you'll build up a\nvocabulary of these problems, and when you see something in\nyour domain, be it physics or",
    "start": "2032930",
    "end": "2039730"
  },
  {
    "text": "biology or anything else,\nlinguistics, the question you should ask is can I transform\nthis into an existing problem?",
    "start": "2039730",
    "end": "2050210"
  },
  {
    "text": "Ok, double line. If there are no questions I'm\ngoing to make a dramatic",
    "start": "2050210",
    "end": "2056570"
  },
  {
    "text": "change in topic. We're going to temporarily get\noff of this more esoteric",
    "start": "2056570",
    "end": "2064369"
  },
  {
    "text": "stuff, and go back to Python. And for the next, off and on for\nthe next couple of weeks,",
    "start": "2064370",
    "end": "2073429"
  },
  {
    "text": "we'll be talking about Python\nand program organization.",
    "start": "2073430",
    "end": "2091190"
  },
  {
    "text": "And what I want to be talking\nabout is modules of one sort,",
    "start": "2091190",
    "end": "2098880"
  },
  {
    "text": "and of course that's because\nwhat we're interested in is modularity.",
    "start": "2098880",
    "end": "2106510"
  },
  {
    "text": "How do we take a complex\nprogram, again, divide and conquer, I feel like a 1-trick\npony, I keep repeating the",
    "start": "2106510",
    "end": "2114050"
  },
  {
    "text": "same thing over and\nover again. Divide and conquer to make our\nprograms modular so we can",
    "start": "2114050",
    "end": "2121289"
  },
  {
    "text": "write them a little piece at a\ntime and understand them a little piece at a time.",
    "start": "2121290",
    "end": "2126920"
  },
  {
    "text": "Now I think of a module as a collection of related functions.",
    "start": "2126920",
    "end": "2144240"
  },
  {
    "text": "We've already seen these, and\nwe're going to refer to the functions using dot notation.",
    "start": "2144240",
    "end": "2161720"
  },
  {
    "text": "We've been doing this all\nterm, right, probably somewhere around lecture 2, we\nsaid import math, and then",
    "start": "2161720",
    "end": "2172700"
  },
  {
    "text": "somewhere in our program we\nwrote something like math dot sqrt of 11, or some\nother number.",
    "start": "2172700",
    "end": "2185570"
  },
  {
    "text": "And the good news was we didn't\nhave to worry about how math did square root or anything\nlike that, we just",
    "start": "2185570",
    "end": "2191260"
  },
  {
    "text": "got it and we used it. Now we have the dot notation\nto avoid name conflicts.",
    "start": "2191260",
    "end": "2214010"
  },
  {
    "text": "Imagine, for example, that in\nmy program I wrote something",
    "start": "2214010",
    "end": "2219230"
  },
  {
    "text": "like import set, because\nsomebody had written a module",
    "start": "2219230",
    "end": "2225820"
  },
  {
    "text": "that implements mathematical\nsets, and somewhere else I'd",
    "start": "2225820",
    "end": "2231150"
  },
  {
    "text": "written something like import\ntable, because someone had",
    "start": "2231150",
    "end": "2236520"
  },
  {
    "text": "something that implemented\nlook-up tables of some sort, something like dictionaries,\nfor example.",
    "start": "2236520",
    "end": "2244640"
  },
  {
    "text": "And then, I wanted to ask\nsomething like membership. Is something in the set, or\nis something in the table?",
    "start": "2244640",
    "end": "2251960"
  },
  {
    "text": "Well, what I would have written\nis something like table dot member.",
    "start": "2251960",
    "end": "2263120"
  },
  {
    "text": "And then the element and\nmaybe the table.",
    "start": "2263120",
    "end": "2268260"
  },
  {
    "text": "And the dot notation was used\nto disambiguate, because I want the member operation\nfrom table, not the",
    "start": "2268260",
    "end": "2274160"
  },
  {
    "text": "member one from set. This was important because the\npeople who implemented table",
    "start": "2274160",
    "end": "2280670"
  },
  {
    "text": "and set might never have met\neach other, and so they can hardly have been expected not\nto have used the same name",
    "start": "2280670",
    "end": "2286910"
  },
  {
    "text": "somewhere by accident. Hence the use of the\ndot notation.",
    "start": "2286910",
    "end": "2294810"
  },
  {
    "text": "I now want to talk about a\nparticular kind of module, and",
    "start": "2294810",
    "end": "2300660"
  },
  {
    "text": "those are the modules\nthat include classes or that are classes.",
    "start": "2300660",
    "end": "2312730"
  },
  {
    "text": "This is a very important concept\nas we'll see, it's why MIT calls things like 6.00\nsubjects, so that they don't",
    "start": "2312730",
    "end": "2319780"
  },
  {
    "text": "get confused with classes in\nPython, something we really",
    "start": "2319780",
    "end": "2325180"
  },
  {
    "text": "need to remember here. Now they can be used in\ndifferent ways, and they have been historically used\nin different ways.",
    "start": "2325180",
    "end": "2332289"
  },
  {
    "text": "In this subject we're going to\nemphasize using classes in the context of what's called\nobject-oriented programming.",
    "start": "2332290",
    "end": "2345890"
  },
  {
    "text": "And if you go look up at Python\nbooks on the web, or Java books on the web, about 80%\nof them will include the",
    "start": "2345890",
    "end": "2353520"
  },
  {
    "text": "word object-oriented\nin their title. Object-oriented Python\nprogramming for computer",
    "start": "2353520",
    "end": "2360400"
  },
  {
    "text": "games, or who knows what else. And we're going to use this\nobject-oriented programming,",
    "start": "2360400",
    "end": "2370710"
  },
  {
    "text": "typically to create something\ncalled data abstractions.",
    "start": "2370710",
    "end": "2378170"
  },
  {
    "text": "And over the next couple of\ndays, you'll see what we mean by this in detail.",
    "start": "2378170",
    "end": "2383220"
  },
  {
    "text": "A synonym for this is an\nabstract data type. You'll see both terms used on\nthe web, and the literature",
    "start": "2383220",
    "end": "2392910"
  },
  {
    "text": "etc., and think of them as\nsynonyms. Now these ideas of classes, object-oriented\nprogramming, data abstraction,",
    "start": "2392910",
    "end": "2401160"
  },
  {
    "text": "are about 40 years old,\nthey're not new ideas. But they've only been really\nwidely accepted in practice",
    "start": "2401160",
    "end": "2409290"
  },
  {
    "text": "for 10 to 15 years. It was in the mid-70's, people\nbegan to write articles",
    "start": "2409290",
    "end": "2416849"
  },
  {
    "text": "advocating this style of\nprogramming, and actually",
    "start": "2416850",
    "end": "2422530"
  },
  {
    "text": "building programming languages,\nnotably Smalltalk and Clue at MIT in fact, that\nprovided linguistic support",
    "start": "2422530",
    "end": "2430450"
  },
  {
    "text": "for the ideas of data\nabstraction and object-oriented programming. But it really wasn't until, I\nwould say, the arrival of Java",
    "start": "2430450",
    "end": "2440490"
  },
  {
    "text": "that object-oriented\nprogramming caught the popular attention.",
    "start": "2440490",
    "end": "2447570"
  },
  {
    "text": "And then Java, C++ ,\nPython of, course.",
    "start": "2447570",
    "end": "2458810"
  },
  {
    "text": "And today nobody advocates a\nprogramming language that does not support it in some\nsort of way.",
    "start": "2458810",
    "end": "2467720"
  },
  {
    "text": "So what is this all about? What is an object in\nobject-oriented programming?",
    "start": "2467720",
    "end": "2487570"
  },
  {
    "text": "An object is a collection\nof data and functions.",
    "start": "2487570",
    "end": "2509620"
  },
  {
    "text": "In particular functions that\noperate on the data, perhaps on other data as well.",
    "start": "2509620",
    "end": "2518300"
  },
  {
    "text": "The key idea here is to bind\ntogether the data and the",
    "start": "2518300",
    "end": "2525000"
  },
  {
    "text": "functions that operate on that\ndata as a single thing.",
    "start": "2525000",
    "end": "2530630"
  },
  {
    "text": "Now typically that's probably\nnot the way you've been thinking about things. When you think about an int or\na float or a dictionary or a",
    "start": "2530630",
    "end": "2538460"
  },
  {
    "text": "list, you knew that there\nwere functions that operated on them. But when you pass a parameter\nsay, a list, you didn't think",
    "start": "2538460",
    "end": "2547110"
  },
  {
    "text": "that you were not only passing\nthe list, you were also passing the functions\nthat operate on the list. In fact you are.",
    "start": "2547110",
    "end": "2557230"
  },
  {
    "text": "It often doesn't matter, but\nit sometimes really does.",
    "start": "2557230",
    "end": "2565800"
  },
  {
    "text": "The advantage of that, is that\nwhen you pass an object to another part of the program,\nthat part of the program also",
    "start": "2565800",
    "end": "2576910"
  },
  {
    "text": "gets the ability to perform\noperations on the object.",
    "start": "2576910",
    "end": "2583049"
  },
  {
    "text": "Now when the only types we're\ndealing with are the built-in types, the ones that came with\nthe programming language, that",
    "start": "2583050",
    "end": "2590910"
  },
  {
    "text": "doesn't really matter. Because, well, the programming\nlanguage means everybody has",
    "start": "2590910",
    "end": "2596040"
  },
  {
    "text": "access to those operations. But the key idea here is that\nwe're going to be generating",
    "start": "2596040",
    "end": "2603640"
  },
  {
    "text": "user-defined types, we'll invent\nnew types, and as we do",
    "start": "2603640",
    "end": "2613859"
  },
  {
    "text": "that we can't assume that if\nas we pass objects of that type around, that the\nprogramming language is giving",
    "start": "2613860",
    "end": "2622660"
  },
  {
    "text": "us the appropriate operations\non that type.",
    "start": "2622660",
    "end": "2631210"
  },
  {
    "text": "This combining of data and\nfunctions on that data is a",
    "start": "2631210",
    "end": "2636320"
  },
  {
    "text": "very essence of object-oriented\nprogramming. That's really what defines it.",
    "start": "2636320",
    "end": "2643830"
  },
  {
    "text": "And the word that's often used\nfor that is encapsulation.",
    "start": "2643830",
    "end": "2653470"
  },
  {
    "text": "Think of it as we got a capsule,\nlike a pill or",
    "start": "2653470",
    "end": "2658790"
  },
  {
    "text": "something, and in that capsule\nwe've got data and a bunch of functions, which as we'll\nsee are called methods.",
    "start": "2658790",
    "end": "2672710"
  },
  {
    "text": "Don't worry, it doesn't matter\nthat they're called methods, it's a historical artifact.",
    "start": "2672710",
    "end": "2683260"
  },
  {
    "text": "All right, so what's\nan example of this? Well, we could create a circle\nobject, that would store a",
    "start": "2683260",
    "end": "2691720"
  },
  {
    "text": "representation of the circle\nand also provide methods to",
    "start": "2691720",
    "end": "2696750"
  },
  {
    "text": "operate on it, for example, draw\nthe circle on the screen, return the area of the circle,\ninscribe it in a square, who",
    "start": "2696750",
    "end": "2706480"
  },
  {
    "text": "knows what you want\nto do with it. As we talk about this, as people\ntalk about this, in the",
    "start": "2706480",
    "end": "2714010"
  },
  {
    "text": "context of our object-oriented\nprogramming, they typically",
    "start": "2714010",
    "end": "2722400"
  },
  {
    "text": "will talk about it in terms\nof message pass, a message",
    "start": "2722400",
    "end": "2727789"
  },
  {
    "text": "passing metaphor.",
    "start": "2727790",
    "end": "2742620"
  },
  {
    "text": "I want to mention it's just\na metaphor, just a way of thinking about it, it's not\nanything very deep here.",
    "start": "2742620",
    "end": "2750720"
  },
  {
    "text": "So, the way people will talk\nabout this, is one object can",
    "start": "2750720",
    "end": "2756920"
  },
  {
    "text": "pass a message to another\nobject, and the receiving object responds by executing\none of its",
    "start": "2756920",
    "end": "2766609"
  },
  {
    "text": "methods on the object. So let's think about lists.",
    "start": "2766610",
    "end": "2773180"
  },
  {
    "text": "So if l is a list, I can\ncall something like s dot sort, l dot sort.",
    "start": "2773180",
    "end": "2781020"
  },
  {
    "text": "You've seen this. This says, pass the object l\nthe message sort, and that",
    "start": "2781020",
    "end": "2792260"
  },
  {
    "text": "message says find the method\nsort, and apply it to the object l, in this case mutating\nthe object so that",
    "start": "2792260",
    "end": "2801010"
  },
  {
    "text": "the elements are now\nin sorted order.",
    "start": "2801010",
    "end": "2807710"
  },
  {
    "text": "If c is a circle, I might write something like c dot area.",
    "start": "2807710",
    "end": "2815299"
  },
  {
    "text": "And this would say, pass to\nthe object denoted by the variable c, the message area,\nwhich says execute a method",
    "start": "2815300",
    "end": "2825710"
  },
  {
    "text": "called area, and in this case\nthe method might return a float, rather than have\na side-effect.",
    "start": "2825710",
    "end": "2834750"
  },
  {
    "text": "Now again, don't get carried\naway, I almost didn't talk about this whole message-passing\nparadigm, but",
    "start": "2834750",
    "end": "2842390"
  },
  {
    "text": "it's so pervasive in the\nworld I felt you needed to hear about it. But it's nothing very deep, and\nif you want to not think",
    "start": "2842390",
    "end": "2850109"
  },
  {
    "text": "about messages, and just think\noh, c has a method area, a circle has a method area, and\nc as a circle will apply it",
    "start": "2850110",
    "end": "2858599"
  },
  {
    "text": "and do what it says, you won't\nget in any trouble at all.",
    "start": "2858600",
    "end": "2864570"
  },
  {
    "text": "Now the next concept to think\nabout here, is the notion of",
    "start": "2864570",
    "end": "2877100"
  },
  {
    "text": "an instance.",
    "start": "2877100",
    "end": "2883750"
  },
  {
    "text": "So we've already thought about,\nwe create instances of types, so when we looked at\nlists, and we looked at the",
    "start": "2883750",
    "end": "2892349"
  },
  {
    "text": "notion of aliasing, we used the\nword instance, and said this is 1 object, this is\nanother object, each of those",
    "start": "2892350",
    "end": "2899760"
  },
  {
    "text": "objects is an instance of\ntype list. So now that",
    "start": "2899760",
    "end": "2908070"
  },
  {
    "text": "gets us to a class. A class is a collection\nof objects with",
    "start": "2908070",
    "end": "2931730"
  },
  {
    "text": "characteristics in common.",
    "start": "2931730",
    "end": "2945740"
  },
  {
    "text": "So you can think of class\nlist. What is the characteristic that all objects\nof class list have in",
    "start": "2945740",
    "end": "2952700"
  },
  {
    "text": "common, all instances of class\nlist? it's the set of methods that can be applied to lists.",
    "start": "2952700",
    "end": "2959330"
  },
  {
    "text": "Methods like sort, append,\nother things.",
    "start": "2959330",
    "end": "2966740"
  },
  {
    "text": "So you should think of all of\nthe built-in types we've talked about as actually just\nbuilt-in classes, like",
    "start": "2966740",
    "end": "2975990"
  },
  {
    "text": "dictionaries, lists, etc. The beauty of being able to\ndefine your own class is you",
    "start": "2975990",
    "end": "2983839"
  },
  {
    "text": "can now extend the language. So if, for example, you're in\nthe business, God forbid, of",
    "start": "2983840",
    "end": "2990840"
  },
  {
    "text": "writing financial software\ntoday, you might decide, I'd really like to have a class\ncalled tanking stock, or bad",
    "start": "2990840",
    "end": "3000240"
  },
  {
    "text": "mortgage, or something like\nthat or mortgage, right? Which would have a bunch of\noperations, like, I won't go",
    "start": "3000240",
    "end": "3007030"
  },
  {
    "text": "into what they might be. But you'd like to write your\nprogram not in terms of floats and ints and lists, but in terms\nof mortgages, and CDOs,",
    "start": "3007030",
    "end": "3015640"
  },
  {
    "text": "and all of the objects that you\nread about in the paper, the types you read about. And so you get to build your\nown special purpose",
    "start": "3015640",
    "end": "3023170"
  },
  {
    "text": "programming language that helped\nyou solve your problems in biology or finance or\nwhatever, and we'll pick up",
    "start": "3023170",
    "end": "3029600"
  },
  {
    "text": "here again on Tuesday. ",
    "start": "3029600",
    "end": "3033500"
  }
]