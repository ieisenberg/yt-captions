[
  {
    "text": " [MUSIC PLAYING BY J.S. BACH]",
    "start": "0",
    "end": "17814"
  },
  {
    "text": "PROFESSOR: The last time we\nbegan having a look at how languages are constructed. Remember the main point that an\nevaluator for, LISP, say,",
    "start": "17814",
    "end": "26050"
  },
  {
    "text": "has two main elements. There is EVAL, and EVAL's job\nis to take in an expression",
    "start": "26050",
    "end": "36350"
  },
  {
    "text": "and an environment and turn that\ninto a procedure and some",
    "start": "36350",
    "end": "43820"
  },
  {
    "text": "arguments and pass that\noff to APPLY. ",
    "start": "43820",
    "end": "49410"
  },
  {
    "text": "And APPLY takes the procedure\nin the arguments, turns that back into, in a general case,\nanother expression to be",
    "start": "49410",
    "end": "55680"
  },
  {
    "text": "evaluated in another environment\nand passes that off to EVAL, which passes it\nto APPLY, and there's this",
    "start": "55680",
    "end": "60770"
  },
  {
    "text": "whole big circle where things\ngo around and around and around until you get either to\nsome very primitive data or to a primitive procedure.",
    "start": "60770",
    "end": "67740"
  },
  {
    "text": "See, what this cycle has to do\nwith is unwinding the means of combination and the means of\nabstraction in the language.",
    "start": "67740",
    "end": "75020"
  },
  {
    "text": "So for instance, you have\na procedure in LISP-- a procedure is a general way of\nsaying, I want to be able to",
    "start": "75020",
    "end": "81320"
  },
  {
    "text": "evaluate this expression for\nany value of the arguments, and that's sort of what's\ngoing on here.",
    "start": "81320",
    "end": "87670"
  },
  {
    "text": "That's what APPLY does. It says the general thing coming\nin with the arguments reduces to the expression that's\nthe body, and then if",
    "start": "87670",
    "end": "93380"
  },
  {
    "text": "that's a compound expression\nor another procedure application, the thing will go\naround and around the circle.",
    "start": "93380",
    "end": "100440"
  },
  {
    "text": "Anyway, that's sort of the basic\nstructure of gee, pretty much any interpreter. The other thing that you saw\nis once you have the",
    "start": "100440",
    "end": "106720"
  },
  {
    "text": "interpreter in your hands, you\nhave all this power to start playing with the language. So you can make it dynamically\nscoped, or you can put in",
    "start": "106720",
    "end": "113390"
  },
  {
    "text": "normal order evaluation, or you\ncan add new forms to the language, whatever you like. Or more generally, there's this\nnotion of metalinguistic",
    "start": "113390",
    "end": "120570"
  },
  {
    "text": "abstraction, which says that\npart of your perspective as an",
    "start": "120570",
    "end": "127930"
  },
  {
    "text": "engineer, as a software\nengineer, but as an engineer in general is that you can gain\ncontrol of complexity by",
    "start": "127930",
    "end": "135270"
  },
  {
    "text": "inventing new languages\nsometimes. See, one way to think about\ncomputer programming is that",
    "start": "135270",
    "end": "142830"
  },
  {
    "text": "it only incidentally has\nto do with getting a computer to do something. Primarily what a computer\nprogram has to do with, it's a",
    "start": "142830",
    "end": "149220"
  },
  {
    "text": "way of expressing ideas with\ncommunicating ideas. And sometimes when you want to\ncommunicate new kinds of",
    "start": "149220",
    "end": "156300"
  },
  {
    "text": "ideas, you'd like to invent new\nmodes of expressing that. Well, today we're going to apply\nthis framework to build",
    "start": "156300",
    "end": "164300"
  },
  {
    "text": "a new language. See, once we have the basic idea\nof the interpreter, you can pretty much go build any\nlanguage that you like.",
    "start": "164300",
    "end": "170830"
  },
  {
    "text": "So for example, we can go\noff and build Pascal. And gee, we would worry about\nsyntax and parsing and various",
    "start": "170830",
    "end": "178819"
  },
  {
    "text": "kinds of compiler optimizations,\nand there are people who make honest livings\ndoing that, but at the level",
    "start": "178820",
    "end": "185580"
  },
  {
    "text": "of abstraction that we're\ntalking, a Pascal interpreter would not look very different at\nall from what you saw Gerry",
    "start": "185580",
    "end": "193020"
  },
  {
    "text": "do last time. Instead of that, we'll spend\ntoday building a really",
    "start": "193020",
    "end": "198190"
  },
  {
    "text": "different language, a language\nthat encourages you to think",
    "start": "198190",
    "end": "203400"
  },
  {
    "text": "about programming not in terms\nof procedures, but in a really different way.",
    "start": "203400",
    "end": "209090"
  },
  {
    "text": "And the lecture today is going\nto be at two levels simultaneously.",
    "start": "209090",
    "end": "214810"
  },
  {
    "text": "On the one hand, I'm going to\nshow you what this language looks like, and on the other\nhand, I'll show you how it's",
    "start": "214810",
    "end": "220410"
  },
  {
    "text": "implemented. And we'll build an\nimplementation in LISP and see how that works. And you should be drawing\nlessons on two levels.",
    "start": "220410",
    "end": "228730"
  },
  {
    "text": "The first is to realize\njust how different a language can be.",
    "start": "228730",
    "end": "233790"
  },
  {
    "text": "So if you think that the jump\nfrom Fortran to LISP is a big deal, you haven't seen\nanything yet.",
    "start": "233790",
    "end": "241560"
  },
  {
    "text": "And secondly, you'll see that\neven with such a very different language, which will\nturn out to not have",
    "start": "241560",
    "end": "248590"
  },
  {
    "text": "procedures at all and not talk\nabout functions at all, there will still be this basic cycle\nof eval and apply that's",
    "start": "248590",
    "end": "256570"
  },
  {
    "text": "unwinds the means of combination\nand the means an abstraction. And then thirdly, as kind of a\nminor but elegant technical",
    "start": "256570",
    "end": "264430"
  },
  {
    "text": "point, you'll see a nice\nuse of streams to avoid backtracking. ",
    "start": "264430",
    "end": "272330"
  },
  {
    "text": "OK, well, I said that this\nlanguage is very different. To explain that, let's go back\nto the very first idea that we",
    "start": "272330",
    "end": "281620"
  },
  {
    "text": "talked about in this course, and\nthat was the idea of the distinction between the\ndeclarative knowledge of",
    "start": "281620",
    "end": "288780"
  },
  {
    "text": "mathematics-- the definition of a square root\nas a mathematical truth--",
    "start": "288780",
    "end": "295470"
  },
  {
    "text": "and the idea that computer\nscience talks about the how to knowledge-- contrast that definition of\nsquare root with a program to",
    "start": "295470",
    "end": "303700"
  },
  {
    "text": "compute a square root. That's where we started off. Well, wouldn't it be great if\nyou could somehow bridge this",
    "start": "303700",
    "end": "311830"
  },
  {
    "text": "gap and make a programming\nlanguage which sort of did things, but you talked about\nit in terms of truth, in",
    "start": "311830",
    "end": "320510"
  },
  {
    "text": "declarative terms? So that would be a programming\nlanguage in which you specify facts.",
    "start": "320510",
    "end": "327689"
  },
  {
    "text": "You tell it what is. You say what is true. And then when you want an\nanswer, somehow the language",
    "start": "327690",
    "end": "334220"
  },
  {
    "text": "has built into it automatically\ngeneral kinds of how to knowledge so it can just\ntake your facts and it",
    "start": "334220",
    "end": "341200"
  },
  {
    "text": "can evolve these methods on\nits on using the facts you gave it and maybe some general\nrules of logic. ",
    "start": "341200",
    "end": "349330"
  },
  {
    "text": "So for instance, I might go up\nto this program and start telling it some things.",
    "start": "349330",
    "end": "355645"
  },
  {
    "text": "So I might tell it that the\nson of Adam is Abel.",
    "start": "355645",
    "end": "368919"
  },
  {
    "text": "And I might tell it that the\nson of Adam is Cain.",
    "start": "368920",
    "end": "377660"
  },
  {
    "text": "And I might tell it that the\nson of Cain is Enoch.",
    "start": "377660",
    "end": "384670"
  },
  {
    "text": " And I might tell it that the son\nof Enoch is Irad, and all",
    "start": "384670",
    "end": "397550"
  },
  {
    "text": "through the rest of our chapter\nwhatever of Genesis, which ends up ending in Adah, by\nthe way, and this shows the",
    "start": "397550",
    "end": "405010"
  },
  {
    "text": "genealogy of Adah from Cain. Anyway, once you tell\nit these facts, you",
    "start": "405010",
    "end": "412520"
  },
  {
    "text": "might ask it things. You might go up to your language\nand say, who's the",
    "start": "412520",
    "end": "418560"
  },
  {
    "text": "son of Adam? And you can very easily imagine\nhaving a little general purpose search program\nwhich would be able to go",
    "start": "418560",
    "end": "426460"
  },
  {
    "text": "through and in response to that\nsay, oh yeah, there are two answers: the son of\nAdam is Abel and the son of Adam is Cain.",
    "start": "426460",
    "end": "434139"
  },
  {
    "text": "Or you might say, based on the\nvery same facts, who is Cain",
    "start": "434140",
    "end": "439350"
  },
  {
    "text": "the son of? And then you can imagine\ngenerating another slightly",
    "start": "439350",
    "end": "445520"
  },
  {
    "text": "different search program which\nwould be able to go through and checked for who is\nCain, and son of, and",
    "start": "445520",
    "end": "453760"
  },
  {
    "text": "come up with Adam. Or you might say, what's\nthe relationship",
    "start": "453760",
    "end": "460300"
  },
  {
    "text": "between Cain and Enoch? And again, a minor variant\non that search program.",
    "start": "460300",
    "end": "466340"
  },
  {
    "text": "You could figure out that\nit said son of. ",
    "start": "466340",
    "end": "472880"
  },
  {
    "text": "But even here in this very\nsimple example, what you see is that a single fact, see, a\nsingle fact like the son of",
    "start": "472880",
    "end": "480460"
  },
  {
    "text": "Adam is Cain can be\nused to answer different kinds of questions.",
    "start": "480460",
    "end": "486520"
  },
  {
    "text": "You can say, who's the son of,\nor you can say who's the son of Adam, or you can say\nwhat's the relation",
    "start": "486520",
    "end": "492220"
  },
  {
    "text": "between Adam and Cain? Those are different questions\nbeing run by different",
    "start": "492220",
    "end": "497370"
  },
  {
    "text": "traditional procedures all\nbased on the same fact.",
    "start": "497370",
    "end": "502474"
  },
  {
    "text": "And that's going to be the\nessence of the power of this programming style, that one\npiece of declarative knowledge",
    "start": "502474",
    "end": "510050"
  },
  {
    "text": "can be used as the basis for\na lot of different kinds of how-to knowledge, as opposed\nto the kinds of procedures",
    "start": "510050",
    "end": "516440"
  },
  {
    "text": "we're writing where you sort of\ntell it what input you're giving it and what\nanswer you want.",
    "start": "516440",
    "end": "521490"
  },
  {
    "text": "So for instance, our square\nroot program can perfectly well answer the question, what's\nthe square root of 144?",
    "start": "521490",
    "end": "528900"
  },
  {
    "text": "But in principle, the\nmathematical definition of square root tells you\nother things. Like it could say, what is\n17 the square root of?",
    "start": "528900",
    "end": "537590"
  },
  {
    "text": "And that would be have\nto be answered by a different program. So the mathematical definition,\nor in general, the",
    "start": "537590",
    "end": "545700"
  },
  {
    "text": "facts that you give it are\nsomehow unbiased as to what the question is.",
    "start": "545700",
    "end": "550899"
  },
  {
    "text": "Whereas the programs we tend to\nwrite specifically because they are how-to knowledge\ntend to be looking for a specific answer.",
    "start": "550900",
    "end": "557699"
  },
  {
    "text": "So that's going to be one\ncharacteristic of what we're talking about. We can go on.",
    "start": "557700",
    "end": "563480"
  },
  {
    "text": "We can imagine that we've\ngiven our language some sort of facts. Now let's give it some\nrules of inference.",
    "start": "563480",
    "end": "570020"
  },
  {
    "text": "We can say, for instance,\nif the--",
    "start": "570020",
    "end": "575100"
  },
  {
    "text": "make up some syntax here-- if the son of x is y--",
    "start": "575100",
    "end": "581580"
  },
  {
    "text": "I'll put question marks to\nindicate variables here-- if the son of x is y and the\nson of y is z, then the",
    "start": "581580",
    "end": "601800"
  },
  {
    "text": "grandson of x is z.",
    "start": "601800",
    "end": "609320"
  },
  {
    "text": "So I can imagine telling my\nmachine that rule and then",
    "start": "609320",
    "end": "615370"
  },
  {
    "text": "being able to say, for\ninstance, who's the grandson of Adam?",
    "start": "615370",
    "end": "620610"
  },
  {
    "text": "Or who is Irad the\ngrandson of? Or deduce all grandson\nrelationships you possibly can",
    "start": "620610",
    "end": "628079"
  },
  {
    "text": "from this information.  We can imagine somehow the\nlanguage knowing how to do",
    "start": "628080",
    "end": "634579"
  },
  {
    "text": "that automatically. ",
    "start": "634580",
    "end": "642640"
  },
  {
    "text": "Let me give you maybe a little\nbit more concrete example. ",
    "start": "642640",
    "end": "649610"
  },
  {
    "text": "Here's a procedure that merges\ntwo sorted lists. So x and y are two, say, lists\nof numbers, lists of distinct",
    "start": "649610",
    "end": "661370"
  },
  {
    "text": "numbers, if you like, that\nare in increasing order. And what merge does is take\ntwo such lists and combine",
    "start": "661370",
    "end": "668560"
  },
  {
    "text": "them into a list where\neverything's in increasing order, and this is a pretty easy\nprograms that you ought",
    "start": "668560",
    "end": "675329"
  },
  {
    "text": "to be able to write. It says, if x is empty,\nthe answer is y. If y is empty, the\nanswer is x.",
    "start": "675330",
    "end": "681180"
  },
  {
    "text": "Otherwise, you compare the\nfirst two elements. So you pick out the first thing\nin x and the first thing in y, and then depending on\nwhich of those first elements",
    "start": "681180",
    "end": "691060"
  },
  {
    "text": "is less, you stick the lower\none on to the result a recursively merging, either\nchopping the first one off x",
    "start": "691060",
    "end": "700150"
  },
  {
    "text": "or chopping the first\none off y. That's a standard\nkind of program. ",
    "start": "700150",
    "end": "706470"
  },
  {
    "text": "Let's look at the logic. Let's forget about the program\nand look at the logic on which",
    "start": "706470",
    "end": "711660"
  },
  {
    "text": "that procedure is based. See, there's some logic which\nsays, gee, if the first one is",
    "start": "711660",
    "end": "716860"
  },
  {
    "text": "less, then we get the answer by\nsticking something onto the result of recursively merging\nthe rest. So let's try and be",
    "start": "716860",
    "end": "723350"
  },
  {
    "text": "explicit about what that\nlogic is that's making the program work.",
    "start": "723350",
    "end": "728430"
  },
  {
    "text": "So here's one piece. Here's the piece of the program\nwhich recursively",
    "start": "728430",
    "end": "733820"
  },
  {
    "text": "chops down x if the first\nthing in x is smaller.",
    "start": "733820",
    "end": "739980"
  },
  {
    "text": "And if you want to be very\nexplicit about what the logic is there, what's really going on\nis a deduction, which says,",
    "start": "739980",
    "end": "747120"
  },
  {
    "text": "if you know that some list, that\nwe'll call cdr of x, and y merged to form z, and you know\nthat a is less than the",
    "start": "747120",
    "end": "760480"
  },
  {
    "text": "first thing in y, then you know\nthat if you put a onto",
    "start": "760480",
    "end": "767570"
  },
  {
    "text": "the cdr of x, then that result\nand y merge to form a onto z.",
    "start": "767570",
    "end": "775820"
  },
  {
    "text": "And what that is, that's the\nunderlying piece of logic-- I haven't written it as a\nprogram, I wrote it a sort of",
    "start": "775820",
    "end": "781620"
  },
  {
    "text": "deduction that's underneath this\nparticular clause that says we can use the\nrecursion there.",
    "start": "781620",
    "end": "789410"
  },
  {
    "text": "And then similar, here's\nthe other clause just to complete it. The other clause is based on\nthis piece of logic, which is",
    "start": "789410",
    "end": "796880"
  },
  {
    "text": "almost the same and I won't go\nthrough it, and then there's the n cases where we tested for\nnull, and that's based on",
    "start": "796880",
    "end": "802730"
  },
  {
    "text": "the idea that for any x, x and\nthe empty list merge to form an x, or for any y, the empty\nlist and y merge to form y.",
    "start": "802730",
    "end": "810740"
  },
  {
    "text": " OK, so there's a piece of\nprocedure and the logic on",
    "start": "810740",
    "end": "819339"
  },
  {
    "text": "which it's based. And notice a big difference.",
    "start": "819340",
    "end": "824750"
  },
  {
    "text": "The procedure looked\nlike this: it",
    "start": "824750",
    "end": "831050"
  },
  {
    "text": "said there was a box-- and all the things we've been\ndoing have the characteristic we have boxes and things going\nin and things going out--",
    "start": "831050",
    "end": "837889"
  },
  {
    "text": "there was this box called merge,\nand in came an x and y,",
    "start": "837890",
    "end": "844480"
  },
  {
    "text": "and out came an answer. That's the character of the\nprocedure that we wrote. ",
    "start": "844480",
    "end": "853160"
  },
  {
    "text": "These rules don't\nlook like that. These rules talk about\na relation. There's some sort of relation\nthat in those slides I called",
    "start": "853160",
    "end": "863029"
  },
  {
    "text": "mrege-to-form. So I said x and y merge\nto form z, and",
    "start": "863030",
    "end": "869200"
  },
  {
    "text": "somehow this is a function. Right? The answer is a function of x\nand y, and here what I have is",
    "start": "869200",
    "end": "876069"
  },
  {
    "text": "a relation between\nthree things. And I'm not going to specify\nwhich is the input and which",
    "start": "876070",
    "end": "883120"
  },
  {
    "text": "is the output. And the reason I want to say\nthat is because in principle,",
    "start": "883120",
    "end": "888690"
  },
  {
    "text": "we could use exactly those same\nlogic rules to answer a lot of different questions.",
    "start": "888690",
    "end": "894570"
  },
  {
    "text": "So we can say, for instance-- imagine giving our machine\nthose rules of logic. Not the program, the underlying\nrules of logic.",
    "start": "894570",
    "end": "901399"
  },
  {
    "text": "Then it ought to be\nable to say-- we could ask it--",
    "start": "901400",
    "end": "906770"
  },
  {
    "text": "1, 3, 7 and 2, 4, 8 merge\nto form what?",
    "start": "906770",
    "end": "920910"
  },
  {
    "text": "And that's a question it ought\nto be able to answer. That's exactly the same\nquestion that our list",
    "start": "920910",
    "end": "926480"
  },
  {
    "text": "procedure answered. But the exact same rules should\nalso be able to answer",
    "start": "926480",
    "end": "933750"
  },
  {
    "text": "a question like this: 1, 3, 7\nand what merged to form 1, 2,",
    "start": "933750",
    "end": "941760"
  },
  {
    "text": "3, 4, 7, 8? The same rules of logic can\nanswer this, although the",
    "start": "941760",
    "end": "948120"
  },
  {
    "text": "procedure we wrote can't\nanswer that question. Or we might be able to\nsay what and what",
    "start": "948120",
    "end": "956070"
  },
  {
    "text": "else merge to form--",
    "start": "956070",
    "end": "967900"
  },
  {
    "text": "what and what else merge to\nform 1, 2, 3, 4, 7, 8?",
    "start": "967900",
    "end": "973780"
  },
  {
    "text": "And the thing should be able\nto go through, if it really can apply that logic, and deduce\nall, whatever is, 2 to",
    "start": "973780",
    "end": "980470"
  },
  {
    "text": "the sixth answers to\nthat question. ",
    "start": "980470",
    "end": "985600"
  },
  {
    "text": "It could be 1 and the rest, or\nit could be 1, 2 and the rest. Or it could be 1 and 3 and 7 and\nthe rest. There's a whole",
    "start": "985600",
    "end": "992490"
  },
  {
    "text": "bunch of answers. And in principle, the\nlogic should be enough to deduce that.",
    "start": "992490",
    "end": "998550"
  },
  {
    "text": "So there are going to be two big\ndifferences in the kind of",
    "start": "998550",
    "end": "1004540"
  },
  {
    "text": "program we're going to look\nat and not only list, but essentially all the programming\nyou've probably",
    "start": "1004540",
    "end": "1009850"
  },
  {
    "text": "done so far in pretty much any\nlanguage you can think of. The first is, we're not going\nto be computing functions.",
    "start": "1009850",
    "end": "1017620"
  },
  {
    "text": " We're not going to be talking\nabout things that take input",
    "start": "1017620",
    "end": "1023769"
  },
  {
    "text": "and output. We're going to be talking\nabout relations. And that means in principle,\nthese relations don't have",
    "start": "1023770",
    "end": "1029180"
  },
  {
    "text": "directionality. So the knowledge that you\nspecify to answer this",
    "start": "1029180",
    "end": "1034569"
  },
  {
    "text": "question, that same knowledge\nshould also allow you to answer these other questions\nand conversely.",
    "start": "1034569",
    "end": "1041345"
  },
  {
    "text": " And the second issue is that\nsince we're talking about",
    "start": "1041345",
    "end": "1050590"
  },
  {
    "text": "relations, these\nrelations don't necessarily have one answer.",
    "start": "1050590",
    "end": "1055610"
  },
  {
    "text": "So that third question down\nthere doesn't have a particular answer, it has a\nwhole bunch of answers. ",
    "start": "1055610",
    "end": "1062270"
  },
  {
    "text": "Well, that's where\nwe're going. This style of programming, by\nthe way, is called logic",
    "start": "1062270",
    "end": "1068620"
  },
  {
    "text": "programming, for kind\nof obvious reasons. ",
    "start": "1068620",
    "end": "1076160"
  },
  {
    "text": "And people who do logic\nprogramming say that-- they",
    "start": "1076160",
    "end": "1082440"
  },
  {
    "text": "have this little phrase-- they\nsay the point of logic programming is that you use\nlogic to express what is true,",
    "start": "1082440",
    "end": "1090190"
  },
  {
    "text": "you use logic to check whether\nsomething is true, and you use logic to find out\nwhat is true.",
    "start": "1090190",
    "end": "1099200"
  },
  {
    "text": "The best known logic programming\nlanguage, as you probably know, is\ncalled Prolog.",
    "start": "1099200",
    "end": "1105780"
  },
  {
    "text": "The language that we're going\nto implement this morning is",
    "start": "1105780",
    "end": "1111010"
  },
  {
    "text": "something we call the query\nlanguage, and it essentially has the essence of prologue. It can do about the same stuff,\nalthough it's a lot",
    "start": "1111010",
    "end": "1118340"
  },
  {
    "text": "slower because we're going to\nimplement it in LISP rather than building a particular\ncompiler.",
    "start": "1118340",
    "end": "1124210"
  },
  {
    "text": "We're going to interpret it on\ntop of the LISP interpreter. But other than that,\nit can do about the same stuff as prolog.",
    "start": "1124210",
    "end": "1129750"
  },
  {
    "text": "It has about the same power\nand about the same limitations. All right, let's break\nfor question.",
    "start": "1129750",
    "end": "1136120"
  },
  {
    "text": " STUDENT: Yes, could you please\nrepeat what the three things",
    "start": "1136120",
    "end": "1144010"
  },
  {
    "text": "you use logic programming\nto find? In other words, to find what is\ntrue, learn what is true--",
    "start": "1144010",
    "end": "1149120"
  },
  {
    "text": "what is the? PROFESSOR: Right. Sort of a logic programmer's\nlittle catechism.",
    "start": "1149120",
    "end": "1155850"
  },
  {
    "text": "You use logic to express what\nis true, like these rules.",
    "start": "1155850",
    "end": "1162610"
  },
  {
    "text": "You use logic to check whether\nsomething is true, and that's the kind of question I\ndidn't answer here.",
    "start": "1162610",
    "end": "1168550"
  },
  {
    "text": "I might say-- another question I could put\ndown here is to say, is it",
    "start": "1168550",
    "end": "1173620"
  },
  {
    "text": "true that 1, 3, 7 and 2, 4, 8\nmerge to form 1, 2, 6, 10 And",
    "start": "1173620",
    "end": "1181400"
  },
  {
    "text": "that same logic should\nbe enough to say no. So I use logic to check what is\ntrue, and then you also use",
    "start": "1181400",
    "end": "1189190"
  },
  {
    "text": "logic to find out what's true. ",
    "start": "1189190",
    "end": "1204059"
  },
  {
    "text": "All right. Let's break. [MUSIC PLAYING BY J.S. BACH]",
    "start": "1204060",
    "end": "1222106"
  },
  {
    "text": "[MUSIC ENDS]",
    "start": "1222106",
    "end": "1247590"
  },
  {
    "text": "[MUSIC PLAYING BY J.S. BACH]",
    "start": "1247590",
    "end": "1262901"
  },
  {
    "text": "PROFESSOR: OK, let's go ahead\nand take a look at this query language and operation.",
    "start": "1262901",
    "end": "1270520"
  },
  {
    "text": "The first thing you might\nnotice, when I put up that little biblical database, is\nthat it's nice to be able to ask this language questions\nin relation to some",
    "start": "1270520",
    "end": "1278900"
  },
  {
    "text": "collection of facts. So let's start off and make a\nlittle collection of facts.",
    "start": "1278900",
    "end": "1286059"
  },
  {
    "text": "This is a tiny fragment of\npersonnel records for a Boston",
    "start": "1286060",
    "end": "1291700"
  },
  {
    "text": "high tech company, and here's\na piece of the personnel records of Ben Bitdiddle.",
    "start": "1291700",
    "end": "1297500"
  },
  {
    "text": "And Ben Bitdiddle is the\ncomputer wizard in this company, he's the underpaid\ncomputer",
    "start": "1297500",
    "end": "1304659"
  },
  {
    "text": "wizard in this company. His supervisor is all\nOliver Warbucks, and here's his address.",
    "start": "1304660",
    "end": "1312149"
  },
  {
    "text": "So the format is we're giving\nthis information: job, salary, supervisor, address.",
    "start": "1312150",
    "end": "1317299"
  },
  {
    "text": "And there are some other\nconventions. Computer here means that Ben\nworks in the computer division, and his\nposition in the",
    "start": "1317300",
    "end": "1323590"
  },
  {
    "text": "computer division is wizard. Here's somebody else. Alyssa, Alyssa P. Hacker is a\ncomputer programmer, and she",
    "start": "1323590",
    "end": "1333860"
  },
  {
    "text": "works for Ben, and she\nlives in Cambridge. And there's another programmer\nwho works for Ben",
    "start": "1333860",
    "end": "1339990"
  },
  {
    "text": "who's Lem E. Tweakit. And there's a programmer\ntrainee, who is Louis",
    "start": "1339990",
    "end": "1346330"
  },
  {
    "text": "Reasoner, and he works\nfor Alyssa. And the big wheel of the company\ndoesn't work for",
    "start": "1346330",
    "end": "1354830"
  },
  {
    "text": "anybody, right? That's Oliver Warbucks. Anyway, what we're going to do\nis ask questions about that",
    "start": "1354830",
    "end": "1363080"
  },
  {
    "text": "little world. And that'll be a sample\nworld that we're going to do logic in.",
    "start": "1363080",
    "end": "1368660"
  },
  {
    "text": " Let me just write up here, for\nprobably the last time, what I",
    "start": "1368660",
    "end": "1375810"
  },
  {
    "text": "said is the very most important\nthing you should get out of this course, and that\nis, when somebody tells you about a language,\nyou say, fine--",
    "start": "1375810",
    "end": "1383440"
  },
  {
    "text": "what are the primitives, what\nare the means of combination,",
    "start": "1383440",
    "end": "1395049"
  },
  {
    "text": "how do you put the primitives\ntogether, and then how do you abstract them, how do you\nabstract the compound pieces",
    "start": "1395050",
    "end": "1404690"
  },
  {
    "text": "so you can use them as pieces\nto make something more complicated? And we've said this a whole\nbunch of times already, but",
    "start": "1404690",
    "end": "1411440"
  },
  {
    "text": "it's worth saying again.  Let's start.",
    "start": "1411440",
    "end": "1416669"
  },
  {
    "text": "The primitives. Well, there's really only one\nprimitive, and the primitive in this language is\ncalled a query.",
    "start": "1416670",
    "end": "1424400"
  },
  {
    "text": "A primitive query. Let's look at some primitive\nqueries. ",
    "start": "1424400",
    "end": "1432160"
  },
  {
    "text": "Job x. Who is a computer programmer? Or find every fact in the\ndatabase that matches job of",
    "start": "1432160",
    "end": "1444700"
  },
  {
    "text": "the x is computer programmer. And you see a little\nsyntax here. Things without question marks\nare meant to be literal,",
    "start": "1444700",
    "end": "1451330"
  },
  {
    "text": "question mark x means that's a\nvariable, and this thing will match, for example, the fact\nthat Alyssa P. Hacker is a",
    "start": "1451330",
    "end": "1458110"
  },
  {
    "text": "computer programmer, or\nx is Alyssa P. Hacker. ",
    "start": "1458110",
    "end": "1466820"
  },
  {
    "text": "Or more generally, I could\nhave something with two variables in it. I could say, the job of x is\ncomputer something, and",
    "start": "1466820",
    "end": "1479530"
  },
  {
    "text": "that'll match computer wizard. So there's something here: type\nwill match wizard, or",
    "start": "1479530",
    "end": "1484865"
  },
  {
    "text": "type will match programmer,\nor x might match various certain things.",
    "start": "1484865",
    "end": "1490370"
  },
  {
    "text": "So there are, in our little\nexample, only three facts in that database that\nmatch that query. ",
    "start": "1490370",
    "end": "1499210"
  },
  {
    "text": "Let's see, just to show you some\nsyntax, the same query,",
    "start": "1499210",
    "end": "1504909"
  },
  {
    "text": "this query doesn't match the job\nof x, doesn't match Lewis",
    "start": "1504910",
    "end": "1511490"
  },
  {
    "text": "Reasoner, the reason for that\nis when I write something here, what I mean is that this\nis going to be a list of two",
    "start": "1511490",
    "end": "1517159"
  },
  {
    "text": "symbols, of which the first is\nthe word computer, and the",
    "start": "1517160",
    "end": "1522730"
  },
  {
    "text": "second can be anything. And Lewis's job description here\nhas three symbols, so it",
    "start": "1522730",
    "end": "1528130"
  },
  {
    "text": "doesn't match. And just to show you a little\nbit of syntax, the more",
    "start": "1528130",
    "end": "1535360"
  },
  {
    "text": "general thing I might want to\ntype is a thing with a dot here, and this is just standard\nthis notation for",
    "start": "1535360",
    "end": "1542550"
  },
  {
    "text": "saying, this is a list, of which\nthe first element is the word computers, and THE\nREST, is something",
    "start": "1542550",
    "end": "1549350"
  },
  {
    "text": "that I'll call type.  So this one would match.",
    "start": "1549350",
    "end": "1556929"
  },
  {
    "text": "Lewis's job is computer\nprogrammer trainee, and type here would be the cdr of this\nlist. It would be the list",
    "start": "1556930",
    "end": "1564690"
  },
  {
    "text": "programmer trainee. And that kind of dot\nprocessing is done automatically by the\nLISP reader.",
    "start": "1564690",
    "end": "1570460"
  },
  {
    "start": "1570460",
    "end": "1575899"
  },
  {
    "text": "Well, let's actually try this. The idea is I'm going to type\nin queries in this language, and answers will come out.",
    "start": "1575900",
    "end": "1583630"
  },
  {
    "text": "Let's look at this. I can go up and say, who works\nin the computer division?",
    "start": "1583630",
    "end": "1590000"
  },
  {
    "text": "Job of x is computer dot y.",
    "start": "1590000",
    "end": "1599730"
  },
  {
    "text": "Doesn't matter what I call\nthe dummy variables. It says the answers to that, and\nit's found four answers.",
    "start": "1599730",
    "end": "1605690"
  },
  {
    "text": " Or I can go off and say, tell\nme about everybody's",
    "start": "1605690",
    "end": "1611380"
  },
  {
    "text": "supervisor. So I'll put in the query,\nthe primitive query, the",
    "start": "1611380",
    "end": "1616610"
  },
  {
    "text": "supervisor of x is y. ",
    "start": "1616610",
    "end": "1622860"
  },
  {
    "text": "There are all the supervisor\nrelationships I know. Or I could go type in, who\nlives in Cambridge?",
    "start": "1622860",
    "end": "1628830"
  },
  {
    "text": "So I can say, the address of x\nis Cambridge dot anything.",
    "start": "1628830",
    "end": "1640669"
  },
  {
    "text": " And only one person lives\nin Cambridge.",
    "start": "1640670",
    "end": "1646585"
  },
  {
    "text": " OK, so those are primitive\nqueries.",
    "start": "1646585",
    "end": "1652169"
  },
  {
    "text": "And you see what happens to\nbasic interaction with the system is you type in a query,\nand it types out",
    "start": "1652170",
    "end": "1658140"
  },
  {
    "text": "all possible answers. Or another way to say that: it\nfinds out all the possible values of those variables x and\ny or t or whatever I've",
    "start": "1658140",
    "end": "1665330"
  },
  {
    "text": "called them, and it types out\nall ways of taking that query",
    "start": "1665330",
    "end": "1670380"
  },
  {
    "text": "and instantiating it-- remember that from the rule\nsystem lecture-- instantiates",
    "start": "1670380",
    "end": "1676250"
  },
  {
    "text": "the query with all possible\nvalues for those variables and then types out all of them. And there are a lot\nof ways you can",
    "start": "1676250",
    "end": "1682370"
  },
  {
    "text": "arrange a logic language. Prolog, for instance, does\nsomething slightly different. Rather than typing back your\nquery, prolog would type out,",
    "start": "1682370",
    "end": "1688980"
  },
  {
    "text": "x equals this and y equals that,\nor x sequels this and y equals that. And that's a very surface level\nthing, you can decide",
    "start": "1688980",
    "end": "1696430"
  },
  {
    "text": "what you like. OK. All right. So the primitives in\nthis language?",
    "start": "1696430",
    "end": "1703390"
  },
  {
    "text": "Only one, right? Primitive query. ",
    "start": "1703390",
    "end": "1711360"
  },
  {
    "text": "OK. Means of combination. Let's look at some compound\nqueries in this language.",
    "start": "1711360",
    "end": "1719769"
  },
  {
    "text": "Here's one. This one says, tell me all the\npeople who work in the",
    "start": "1719770",
    "end": "1727250"
  },
  {
    "text": "computer division. Tell me all the people who work\nin the computer division",
    "start": "1727250",
    "end": "1732610"
  },
  {
    "text": "together with their\nsupervisors.  The way I write that is\nthe query is and.",
    "start": "1732610",
    "end": "1740220"
  },
  {
    "text": "And the job of the x is computer\nsomething or other. And job of x is computer\ndot y.",
    "start": "1740220",
    "end": "1747560"
  },
  {
    "text": "And the supervisor of x is z. Tell me all the people in\nthe computer division--",
    "start": "1747560",
    "end": "1753570"
  },
  {
    "text": "that's this-- together with\ntheir supervisors. And notice in this query I\nhave three variables--",
    "start": "1753570",
    "end": "1760289"
  },
  {
    "text": "x, y, and z. And this x is supposed to\nbe the same as that x.",
    "start": "1760290",
    "end": "1769450"
  },
  {
    "text": "So x works in the computer\ndivision, and the supervisor of x is z.",
    "start": "1769450",
    "end": "1774810"
  },
  {
    "text": "Let's try another one. So one means of combination\nis and. ",
    "start": "1774810",
    "end": "1781540"
  },
  {
    "text": "Who are all the people who\nmake more than $30,000? And the salary of some person\np is some amount a.",
    "start": "1781540",
    "end": "1791640"
  },
  {
    "text": " And when I go and look at a,\na is greater than $30,000.",
    "start": "1791640",
    "end": "1800600"
  },
  {
    "text": "And LISP value here is a little\npiece of interface that",
    "start": "1800600",
    "end": "1806299"
  },
  {
    "text": "interfaces the query language\nto the underlying LISP. And what the LISP value allows\nyou to do is call any LISP",
    "start": "1806300",
    "end": "1813539"
  },
  {
    "text": "predicate inside a query. So here I'm using the LISP\npredicate greater than, so I",
    "start": "1813540",
    "end": "1819110"
  },
  {
    "text": "say LISP value. This I say and. So all the people whose salary\nis greater than $30,000.",
    "start": "1819110",
    "end": "1828190"
  },
  {
    "text": "Or here's a more complicated\none. Tell me all the people who work\nin the computer division",
    "start": "1828190",
    "end": "1836150"
  },
  {
    "text": "who do not have a supervisor\nwho works in the computer division. ",
    "start": "1836150",
    "end": "1842790"
  },
  {
    "text": "and x works in the computer\ndivision. The job of x is computer\ndot y. And it's not the case that both\nx has a supervisor z and",
    "start": "1842790",
    "end": "1855570"
  },
  {
    "text": "the job of z is computer\nsomething or other. All right, so again, this x has\ngot to be that x, and this",
    "start": "1855570",
    "end": "1864050"
  },
  {
    "text": "z is going to be that z. ",
    "start": "1864050",
    "end": "1869390"
  },
  {
    "text": "And then you see another means\na combination, not. ",
    "start": "1869390",
    "end": "1877272"
  },
  {
    "text": "All right, well, let's\nlook at that. It works the same way.",
    "start": "1877272",
    "end": "1882400"
  },
  {
    "text": "I can go up to the machine and\nsay and the job of the x is",
    "start": "1882400",
    "end": "1893110"
  },
  {
    "text": "computer dot y. ",
    "start": "1893110",
    "end": "1898480"
  },
  {
    "text": "And the supervisor of x is z.",
    "start": "1898480",
    "end": "1906600"
  },
  {
    "text": "And I typed that in\nlike a query. And what it types back, what\nyou see are the queries I",
    "start": "1906600",
    "end": "1915679"
  },
  {
    "text": "typed in instantiated by\nall possible answers. And then you see there\nare a lot of answers.",
    "start": "1915680",
    "end": "1922000"
  },
  {
    "text": "All right. So the means of combination\nin this language-- and this is why it's called\na logic language--",
    "start": "1922000",
    "end": "1927549"
  },
  {
    "text": "are logical operations. Means of combinations are things\nlike AND and NOT and",
    "start": "1927550",
    "end": "1936120"
  },
  {
    "text": "there's one I didn't show\nyou, which is OR. And then I showed you LISP\nvalue, which is not logic, of",
    "start": "1936120",
    "end": "1944309"
  },
  {
    "text": "course, but is a little special\nhack to interface that to LISP so you can\nget more power. Those are the means\nof combination.",
    "start": "1944310",
    "end": "1952690"
  },
  {
    "text": "OK, the means of abstraction. What we'd like to do-- ",
    "start": "1952690",
    "end": "1958330"
  },
  {
    "text": "let's go back for second and\nlook at that last slide. We might like to take very\ncomplicated thing, the idea",
    "start": "1958330",
    "end": "1965010"
  },
  {
    "text": "that someone works in a division\nbut does not have a supervisor in the division.",
    "start": "1965010",
    "end": "1972400"
  },
  {
    "text": "And as before, name that. Well, if someone works in a\ndivision and does not have a",
    "start": "1972400",
    "end": "1978799"
  },
  {
    "text": "supervisor who works in that\ndivision, that means that person is a big shot. So let's make a rule that\nsomebody x is a big shot in",
    "start": "1978800",
    "end": "1988370"
  },
  {
    "text": "some department if x works in\nthe department and it's not",
    "start": "1988370",
    "end": "1996760"
  },
  {
    "text": "the case that x has a supervisor\nwho works in the department. So this is our means\nof abstraction.",
    "start": "1996760",
    "end": "2002940"
  },
  {
    "text": "This is a rule.  And a rule has three parts. ",
    "start": "2002940",
    "end": "2010970"
  },
  {
    "text": "The thing that says\nit's a rule. And then there's the conclusion\nof the rule.",
    "start": "2010970",
    "end": "2017529"
  },
  {
    "text": "And then there's the\nbody of the rule. And you can read this as a piece\nof logic which says, if you know that the body of the\nrule is true, then you can",
    "start": "2017530",
    "end": "2026940"
  },
  {
    "text": "conclude that the conclusion\nis true. Or in order to deduce that\nx is a big shot in some",
    "start": "2026940",
    "end": "2032640"
  },
  {
    "text": "department, it's enough\nto verify that. So that's what rules\nlook like.",
    "start": "2032640",
    "end": "2038820"
  },
  {
    "text": " Let's go back and look at that\nmerge example that I did",
    "start": "2038820",
    "end": "2047180"
  },
  {
    "text": "before the break. Let's look at how that would\nlook in terms of rules. I'm going to take the logic I\nput up and just change it into",
    "start": "2047180",
    "end": "2054030"
  },
  {
    "text": "a bunch of rules\nin this format.  We have a rule.",
    "start": "2054030",
    "end": "2059350"
  },
  {
    "text": "Remember, there was this\nthing merge-to-form. There is a rule that says,\nthe empty list and y",
    "start": "2059350",
    "end": "2068489"
  },
  {
    "text": "merge to form y. This is the rule conclusion.  And notice this particular\nrule has no body.",
    "start": "2068489",
    "end": "2076649"
  },
  {
    "text": "And in this language, a rule\nwith no body is something that is always true. You can always assume\nthat's true.",
    "start": "2076650",
    "end": "2082510"
  },
  {
    "text": " And there was another piece of\nlogic that said anything in",
    "start": "2082510",
    "end": "2087530"
  },
  {
    "text": "the empty list merged to\nform the anything. That's this. A rule y and the empty\nlist merge to form y.",
    "start": "2087530",
    "end": "2095510"
  },
  {
    "text": "Those corresponded to the two\nend cases in our merge procedure, but now we're talking\nabout logic, not about",
    "start": "2095510",
    "end": "2100890"
  },
  {
    "text": "procedures. Then we had another rule, which\nsaid if you know how",
    "start": "2100890",
    "end": "2107560"
  },
  {
    "text": "shorter things merge, you\ncan put them together. So this says, if you have a list\nx and y and z, and if you",
    "start": "2107560",
    "end": "2115340"
  },
  {
    "text": "want to deduce that a dot x--\nthis means constant a onto x, or a list whose first thing\nis a and whose rest is x--",
    "start": "2115340",
    "end": "2123160"
  },
  {
    "text": "so if you want to deduce that\na dot x and b dot y merge to form b dot c-- ",
    "start": "2123160",
    "end": "2130570"
  },
  {
    "text": "that would say you merge these\ntwo lists a x and b y and you're going to get something\nthat starts with b--",
    "start": "2130570",
    "end": "2137680"
  },
  {
    "text": "you can deduce that if you know\nthat it's the case both that a dot x and y merge to form\nz and a is larger than b.",
    "start": "2137680",
    "end": "2148690"
  },
  {
    "text": "So when I merge them, b will\ncome first in the list. That's a little translation of the\nlogic rule that I wrote in",
    "start": "2148690",
    "end": "2156050"
  },
  {
    "text": "pseudo-English before. And then just for completeness, here's the other case.",
    "start": "2156050",
    "end": "2163130"
  },
  {
    "text": "a dot x and b dot y merge to\nform a dot z if x and b dot y",
    "start": "2163130",
    "end": "2168170"
  },
  {
    "text": "merged to form z and\nb is larger than a. So that's a little program that\nI've typed in in this",
    "start": "2168170",
    "end": "2175609"
  },
  {
    "text": "language, and now let's\nlook at it run. ",
    "start": "2175610",
    "end": "2181900"
  },
  {
    "text": "So I typed in the merge rules\nbefore, and I could use this",
    "start": "2181900",
    "end": "2187740"
  },
  {
    "text": "like a procedure. I could say merge to form\n1 and 3 and 2 and 7.",
    "start": "2187740",
    "end": "2199590"
  },
  {
    "text": "So here I'm using it like\nthe LISP procedure. Now it's going to think about\nthat for a while and apply",
    "start": "2199590",
    "end": "2206940"
  },
  {
    "text": "these rules.  So it found an answer.",
    "start": "2206940",
    "end": "2212800"
  },
  {
    "text": "Now it's going to see if there\nare any other answers but it doesn't know a priori there's\nonly one answer.",
    "start": "2212800",
    "end": "2217810"
  },
  {
    "text": "So it's sitting here checking\nall possibilities, and it says, no more. Done. So there I've used those\nrules like a procedure.",
    "start": "2217810",
    "end": "2225210"
  },
  {
    "text": "Or remember the whole point is\nthat I can ask different kinds of questions.",
    "start": "2225210",
    "end": "2230220"
  },
  {
    "text": "I could say merge to form, let's\nsee, how about 2 and a.",
    "start": "2230220",
    "end": "2244590"
  },
  {
    "text": "Some list of two elements which\nI know starts with 2, and the other thing I don't\nknow, and x and some other",
    "start": "2244590",
    "end": "2254599"
  },
  {
    "text": "list merge to form\na 1, 2, 3 and 4. ",
    "start": "2254600",
    "end": "2262760"
  },
  {
    "text": "So now it's going to\nthink about that. It's got to find-- ",
    "start": "2262760",
    "end": "2268070"
  },
  {
    "text": "so it found one possibility. It said a could be 3, and x\ncould be the list 1, 4.",
    "start": "2268070",
    "end": "2273830"
  },
  {
    "text": "And now, again, it's got to\ncheck because it doesn't a priori know that there\naren't any other",
    "start": "2273830",
    "end": "2279050"
  },
  {
    "text": "possibilities going on.  Or like I said, I could say\nsomething like merge to form,",
    "start": "2279050",
    "end": "2290660"
  },
  {
    "text": "like, what and what else merge\nto form 1, 2, 3, 4, 5?",
    "start": "2290660",
    "end": "2297275"
  },
  {
    "start": "2297275",
    "end": "2304339"
  },
  {
    "text": "Now it's going to think\nabout that.  And there are a lot of answers\nthat it might get.",
    "start": "2304340",
    "end": "2310310"
  },
  {
    "text": " And what you see is here you're\nreally paying the price",
    "start": "2310310",
    "end": "2317920"
  },
  {
    "text": "of slowness.  And kind of for three reasons.",
    "start": "2317920",
    "end": "2323880"
  },
  {
    "text": "One is that this language\nis doubly interpreted. Whereas in a real\nimplementation, you would go",
    "start": "2323880",
    "end": "2330099"
  },
  {
    "text": "compile this down to primitive\noperations. The other reason is that this\nparticular algorithm for",
    "start": "2330100",
    "end": "2336410"
  },
  {
    "text": "merges is doubly recursive. So it's going to take\na very long time. And eventually, this is going\nto go through and find--",
    "start": "2336410",
    "end": "2346710"
  },
  {
    "text": "find what? Two to the fifth possible\nanswers. ",
    "start": "2346710",
    "end": "2352140"
  },
  {
    "text": "And you see they come out in\nsome fairly arbitrary order, depending on which order\nit's going to be trying these rules.",
    "start": "2352140",
    "end": "2360160"
  },
  {
    "text": "In fact, what we're going\nto do when they edit the videotape is speed\nall this up. Don't you like taking\nout these weights?",
    "start": "2360160",
    "end": "2366600"
  },
  {
    "text": "And don't you wish you could\ndo that in your demos? ",
    "start": "2366600",
    "end": "2372840"
  },
  {
    "text": "Anyway, it's still\ngrinding there. ",
    "start": "2372840",
    "end": "2379220"
  },
  {
    "text": "Anyway, there are 32\npossibilities-- we won't wait for it to\nprint out all of them. ",
    "start": "2379220",
    "end": "2387849"
  },
  {
    "text": "OK, so the needs of abstraction\nin this language are rules. ",
    "start": "2387850",
    "end": "2393630"
  },
  {
    "text": "So we take some bunch of things\nthat are put together with logic and we name them.",
    "start": "2393630",
    "end": "2400349"
  },
  {
    "text": "And you can think of\nthat as naming a particular pattern of logic. Or you can think of that as\nsaying, if you want to deduce",
    "start": "2400350",
    "end": "2405809"
  },
  {
    "text": "some conclusion, you can apply\nthose rules of logic. And those are three elements\nof this language.",
    "start": "2405810",
    "end": "2413420"
  },
  {
    "text": "Let's break now, and then we'll\ntalk about how it's actually implemented. ",
    "start": "2413420",
    "end": "2422746"
  },
  {
    "text": "STUDENT: Does using LISP value\nprimitive or whatever interfere with your means to go\nboth directions on a query?",
    "start": "2422747",
    "end": "2431769"
  },
  {
    "text": "PROFESSOR: OK, that's a-- the question is, does using LISP\nvalue interfere with the",
    "start": "2431770",
    "end": "2437840"
  },
  {
    "text": "ability to go both directions\non the query? We haven't really talked about\nthe implementation yet, but",
    "start": "2437840",
    "end": "2443850"
  },
  {
    "text": "the answer is, yes, it can. In general, as we'll\nsee at the end--",
    "start": "2443850",
    "end": "2450510"
  },
  {
    "text": "although I really won't\nto go into details-- it's fairly complicated,\nespecially when you use either",
    "start": "2450510",
    "end": "2458140"
  },
  {
    "text": "not or LISP value-- or actually, if you use anything\nbesides only and, it",
    "start": "2458140",
    "end": "2464310"
  },
  {
    "text": "becomes very complicated\nto say when these things will work. They won't work quite\nin all situations.",
    "start": "2464310",
    "end": "2470359"
  },
  {
    "text": "I'll talk about that at the end\nof the second half today. But the answer to your question\nis, yes, by dragging",
    "start": "2470360",
    "end": "2477180"
  },
  {
    "text": "in a lot more power from LISP\nvalue, you lose some of the principal power of logic\nprogramming.",
    "start": "2477180",
    "end": "2484170"
  },
  {
    "text": "That's a trade-off that\nyou have to make. OK, let's take a break.",
    "start": "2484170",
    "end": "2490390"
  },
  {
    "start": "2490390",
    "end": "2509844"
  }
]