[
  {
    "start": "0",
    "end": "500"
  },
  {
    "text": "On our to-do list from\nthe previous section",
    "start": "500",
    "end": "2880"
  },
  {
    "text": "is figuring out how to build AND\nand OR gates with many inputs.",
    "start": "2880",
    "end": "7000"
  },
  {
    "text": "These will be needed\nwhen creating circuit",
    "start": "7000",
    "end": "8760"
  },
  {
    "text": "implementations using a\nsum-of-products equation",
    "start": "8760",
    "end": "11470"
  },
  {
    "text": "as our template.",
    "start": "11470",
    "end": "13320"
  },
  {
    "text": "Let’s assume our gate library\nonly has 2-input gates",
    "start": "13320",
    "end": "16510"
  },
  {
    "text": "and figure how to build wider\ngates using the 2-input gates",
    "start": "16510",
    "end": "19770"
  },
  {
    "text": "as building blocks.",
    "start": "19770",
    "end": "21590"
  },
  {
    "text": "We’ll work on creating\n3- and 4-input gates,",
    "start": "21590",
    "end": "24320"
  },
  {
    "text": "but the approach we use can\nbe generalized to create AND",
    "start": "24320",
    "end": "27640"
  },
  {
    "text": "and OR gates of\nany desired width.",
    "start": "27640",
    "end": "31230"
  },
  {
    "text": "The approach shown here relies\non the associative property",
    "start": "31230",
    "end": "34020"
  },
  {
    "text": "of the AND operator.",
    "start": "34020",
    "end": "35770"
  },
  {
    "text": "This means we can\nperform an N-way",
    "start": "35770",
    "end": "37630"
  },
  {
    "text": "AND by doing pair-wise ANDs\nin any convenient order.",
    "start": "37630",
    "end": "42150"
  },
  {
    "text": "The OR and XOR operations\nare also associative,",
    "start": "42150",
    "end": "45490"
  },
  {
    "text": "so the same approach will work\nfor designing wide OR and XOR",
    "start": "45490",
    "end": "48860"
  },
  {
    "text": "circuits from the\ncorresponding 2-input gate.",
    "start": "48860",
    "end": "52770"
  },
  {
    "text": "Simply substitute 2-input OR\ngates or 2-input XOR gates",
    "start": "52770",
    "end": "57050"
  },
  {
    "text": "for the 2-input AND gates shown\nbelow and you’re good to go!",
    "start": "57050",
    "end": "62120"
  },
  {
    "text": "Let’s start by designing a\ncircuit that computes the AND",
    "start": "62120",
    "end": "65339"
  },
  {
    "text": "of three inputs A, B, and C.",
    "start": "65340",
    "end": "68689"
  },
  {
    "text": "In the circuit shown here,\nwe first compute (A AND B),",
    "start": "68690",
    "end": "72450"
  },
  {
    "text": "then AND that result with C.",
    "start": "72450",
    "end": "77180"
  },
  {
    "text": "Using the same strategy, we\ncan build a 4-input AND gate",
    "start": "77180",
    "end": "80630"
  },
  {
    "text": "from three 2-input AND gates.",
    "start": "80630",
    "end": "83680"
  },
  {
    "text": "Essentially we’re building\na chain of AND gates,",
    "start": "83680",
    "end": "86650"
  },
  {
    "text": "which implement an N-way AND\nusing N-1 2-input AND gates.",
    "start": "86650",
    "end": "92860"
  },
  {
    "text": "We can also associate the\nfour inputs a different way:",
    "start": "92860",
    "end": "95660"
  },
  {
    "text": "computing (A AND B) in\nparallel with (C AND D),",
    "start": "95660",
    "end": "99540"
  },
  {
    "text": "then combining those two\nresults using a third AND gate.",
    "start": "99540",
    "end": "103810"
  },
  {
    "text": "Using this approach, we’re\nbuilding a tree of AND gates.",
    "start": "103810",
    "end": "107200"
  },
  {
    "text": "Which approach is\nbest: chains or trees?",
    "start": "107200",
    "end": "110450"
  },
  {
    "text": "First we have to decide\nwhat we mean by “best”.",
    "start": "110450",
    "end": "113390"
  },
  {
    "text": "When designing circuits\nwe’re interested in cost,",
    "start": "113390",
    "end": "115810"
  },
  {
    "text": "which depends on the number of\ncomponents, and performance,",
    "start": "115810",
    "end": "119170"
  },
  {
    "text": "which we characterize\nby the propagation delay",
    "start": "119170",
    "end": "121600"
  },
  {
    "text": "of the circuit.",
    "start": "121600",
    "end": "123250"
  },
  {
    "text": "Both strategies require the\nsame number of components",
    "start": "123250",
    "end": "125920"
  },
  {
    "text": "since the total number\nof pair-wise ANDs",
    "start": "125920",
    "end": "128240"
  },
  {
    "text": "is the same in both cases.",
    "start": "128240",
    "end": "130750"
  },
  {
    "text": "So it’s a tie when\nconsidering costs.",
    "start": "130750",
    "end": "133630"
  },
  {
    "text": "Now consider propagation delay.",
    "start": "133630",
    "end": "136710"
  },
  {
    "text": "The chain circuit in the middle\nhas a tPD of 3 gate delays,",
    "start": "136710",
    "end": "140530"
  },
  {
    "text": "and we can see that the\ntPD for an N-input chain",
    "start": "140530",
    "end": "143670"
  },
  {
    "text": "will be N-1 gate delays.",
    "start": "143670",
    "end": "146560"
  },
  {
    "text": "The propagation delay\nof chains grows linearly",
    "start": "146560",
    "end": "149282"
  },
  {
    "text": "with the number of inputs.",
    "start": "149282",
    "end": "150364"
  },
  {
    "start": "150365",
    "end": "153110"
  },
  {
    "text": "The tree circuit\non the bottom has",
    "start": "153110",
    "end": "154670"
  },
  {
    "text": "a tPD of 2 gates,\nsmaller than the chain.",
    "start": "154670",
    "end": "158670"
  },
  {
    "text": "The propagation delay of\ntrees grows logarithmically",
    "start": "158670",
    "end": "161370"
  },
  {
    "text": "with the number of inputs.",
    "start": "161370",
    "end": "162980"
  },
  {
    "text": "Specifically, the\npropagation delay",
    "start": "162980",
    "end": "164680"
  },
  {
    "text": "of tree circuits built using\n2-input gates grows as log2(N).",
    "start": "164680",
    "end": "170469"
  },
  {
    "text": "When N is large,\ntree circuits can",
    "start": "170470",
    "end": "172350"
  },
  {
    "text": "have dramatically\nbetter propagation delay",
    "start": "172350",
    "end": "174660"
  },
  {
    "text": "than chain circuits.",
    "start": "174660",
    "end": "176910"
  },
  {
    "text": "The propagation\ndelay is an upper",
    "start": "176910",
    "end": "178570"
  },
  {
    "text": "bound on the worst-case\ndelay from inputs to outputs",
    "start": "178570",
    "end": "181780"
  },
  {
    "text": "and is a good measure\nof performance",
    "start": "181780",
    "end": "183830"
  },
  {
    "text": "assuming that all inputs\narrive at the same time.",
    "start": "183830",
    "end": "187370"
  },
  {
    "text": "But in large circuits,\nA, B, C and D",
    "start": "187370",
    "end": "190500"
  },
  {
    "text": "might arrive at\ndifferent times depending",
    "start": "190500",
    "end": "192670"
  },
  {
    "text": "on the tPD of the circuit\ngenerating each one.",
    "start": "192670",
    "end": "196370"
  },
  {
    "text": "Suppose input D\narrives considerably",
    "start": "196370",
    "end": "198769"
  },
  {
    "text": "after the other inputs.",
    "start": "198770",
    "end": "201250"
  },
  {
    "text": "If we used the tree circuit\nto compute the AND of all four",
    "start": "201250",
    "end": "204330"
  },
  {
    "text": "inputs, the additional\ndelay in computing Z",
    "start": "204330",
    "end": "206760"
  },
  {
    "text": "is two gate delays\nafter the arrival of D.",
    "start": "206760",
    "end": "210629"
  },
  {
    "text": "However, if we use\nthe chain circuit,",
    "start": "210630",
    "end": "212730"
  },
  {
    "text": "the additional\ndelay in computing Z",
    "start": "212730",
    "end": "214750"
  },
  {
    "text": "might be as little\nas one gate delay.",
    "start": "214750",
    "end": "217560"
  },
  {
    "text": "The moral of this story:\nit’s hard to know which",
    "start": "217560",
    "end": "220300"
  },
  {
    "text": "implementation of a subcircuit,\nlike the 4-input AND shown",
    "start": "220300",
    "end": "223540"
  },
  {
    "text": "here, will yield the smallest\noverall tPD unless we know",
    "start": "223540",
    "end": "228010"
  },
  {
    "text": "the tPD of the circuits\nthat compute the values",
    "start": "228010",
    "end": "230590"
  },
  {
    "text": "for the input signals.",
    "start": "230590",
    "end": "232730"
  },
  {
    "text": "In designing CMOS circuits,\nthe individual gates",
    "start": "232730",
    "end": "235650"
  },
  {
    "text": "are naturally inverting, so\ninstead of using AND and OR",
    "start": "235650",
    "end": "239120"
  },
  {
    "text": "gates, for the best\nperformance we want to the use",
    "start": "239120",
    "end": "241830"
  },
  {
    "text": "the NAND and NOR\ngates shown here.",
    "start": "241830",
    "end": "244610"
  },
  {
    "text": "NAND and NOR gates can be\nimplemented as a single CMOS",
    "start": "244610",
    "end": "247540"
  },
  {
    "text": "gate involving one pullup\ncircuit and one pulldown",
    "start": "247540",
    "end": "250469"
  },
  {
    "text": "circuit.",
    "start": "250470",
    "end": "252070"
  },
  {
    "text": "AND and OR gates\nrequire two CMOS gates",
    "start": "252070",
    "end": "254630"
  },
  {
    "text": "in their implementation,\ne.g., a NAND gate",
    "start": "254630",
    "end": "257060"
  },
  {
    "text": "followed by an INVERTER.",
    "start": "257060",
    "end": "259127"
  },
  {
    "text": "We’ll talk about how to build\nsum-of-products circuitry using",
    "start": "259128",
    "end": "261669"
  },
  {
    "text": "NANDs and NORs in\nthe next section.",
    "start": "261670",
    "end": "265090"
  },
  {
    "text": "Note that NAND and NOR\noperations are not associative:",
    "start": "265090",
    "end": "268550"
  },
  {
    "text": "NAND(A,B,C) is not equal\nto NAND(NAND(A,B),C).",
    "start": "268550",
    "end": "276080"
  },
  {
    "text": "So we can’t build a NAND gate\nwith many inputs by building",
    "start": "276080",
    "end": "279389"
  },
  {
    "text": "a tree of 2-input NANDs.",
    "start": "279390",
    "end": "282040"
  },
  {
    "text": "We’ll talk about this\nin the next section too!",
    "start": "282040",
    "end": "285570"
  },
  {
    "text": "We’ve mentioned the\nexclusive-or operation,",
    "start": "285570",
    "end": "288150"
  },
  {
    "text": "sometimes called\nXOR, several times.",
    "start": "288150",
    "end": "291669"
  },
  {
    "text": "This logic function\nis very useful",
    "start": "291670",
    "end": "293830"
  },
  {
    "text": "when building circuitry\nfor arithmetic or parity",
    "start": "293830",
    "end": "296310"
  },
  {
    "text": "calculations.",
    "start": "296310",
    "end": "297790"
  },
  {
    "text": "As you’ll see in Lab 2,\nimplementing a 2-input XOR gate",
    "start": "297790",
    "end": "301650"
  },
  {
    "text": "will take many more NFETs\nand PFETs than required",
    "start": "301650",
    "end": "304800"
  },
  {
    "text": "for a 2-input NAND or NOR.",
    "start": "304800",
    "end": "307569"
  },
  {
    "text": "We know we can come up with\na sum-of-products expression",
    "start": "307570",
    "end": "310210"
  },
  {
    "text": "for any truth table\nand hence build",
    "start": "310210",
    "end": "312289"
  },
  {
    "text": "a circuit implementation\nusing INVERTERs, AND gates,",
    "start": "312290",
    "end": "315690"
  },
  {
    "text": "and OR gates.",
    "start": "315690",
    "end": "317200"
  },
  {
    "text": "It turns out we\ncan build circuits",
    "start": "317200",
    "end": "318860"
  },
  {
    "text": "with the same functionality\nusing only 2-INPUT NAND gates.",
    "start": "318860",
    "end": "322610"
  },
  {
    "text": "We say the the 2-INPUT\nNAND is a universal gate.",
    "start": "322610",
    "end": "326530"
  },
  {
    "text": "Here we show how to implement\nthe sum-of-products building",
    "start": "326530",
    "end": "329020"
  },
  {
    "text": "blocks using just\n2-input NAND gates.",
    "start": "329020",
    "end": "331910"
  },
  {
    "text": "In a minute we’ll show a\nmore direct implementation",
    "start": "331910",
    "end": "334690"
  },
  {
    "text": "for sum-of-products\nusing only NANDs,",
    "start": "334690",
    "end": "336860"
  },
  {
    "text": "but these little schematics are\na proof-of-concept showing that",
    "start": "336860",
    "end": "340000"
  },
  {
    "text": "NAND-only equivalent\ncircuits exist.",
    "start": "340000",
    "end": "343520"
  },
  {
    "text": "2-INPUT NOR gates\nare also universal,",
    "start": "343520",
    "end": "345509"
  },
  {
    "text": "as shown by these\nlittle schematics.",
    "start": "345510",
    "end": "348510"
  },
  {
    "text": "Inverting logic takes a\nlittle getting used to,",
    "start": "348510",
    "end": "350690"
  },
  {
    "text": "but its the key to designing\nlow-cost high-performance",
    "start": "350690",
    "end": "354020"
  },
  {
    "text": "circuits in CMOS.",
    "start": "354020",
    "end": "356129"
  }
]