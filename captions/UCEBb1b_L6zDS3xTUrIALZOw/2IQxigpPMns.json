[
  {
    "start": "0",
    "end": "13000"
  },
  {
    "start": "0",
    "end": "700"
  },
  {
    "text": "We will now review a problem on\nerror correction and detection",
    "start": "700",
    "end": "5220"
  },
  {
    "text": "in order to better\nunderstand how the selected",
    "start": "5220",
    "end": "8010"
  },
  {
    "text": "encoding of a message can\nhelp both detect and correct",
    "start": "8010",
    "end": "11670"
  },
  {
    "text": "transmission errors.",
    "start": "11670",
    "end": "14440"
  },
  {
    "start": "13000",
    "end": "43000"
  },
  {
    "text": "In this problem messages consist\nof 9 data bits and 7 parity",
    "start": "14440",
    "end": "18890"
  },
  {
    "text": "bits.",
    "start": "18890",
    "end": "20130"
  },
  {
    "text": "Each Dij represents\na data bit which",
    "start": "20130",
    "end": "22800"
  },
  {
    "text": "belongs to row i and column j.",
    "start": "22800",
    "end": "26199"
  },
  {
    "text": "The Pij bits are used to\nmake the parity of each row",
    "start": "26200",
    "end": "29880"
  },
  {
    "text": "and column be odd.",
    "start": "29880",
    "end": "32189"
  },
  {
    "text": "The Pxx box, which is in\nthe bottom right corner,",
    "start": "32189",
    "end": "35660"
  },
  {
    "text": "is used to make the parity\nof the entire message odd.",
    "start": "35660",
    "end": "39400"
  },
  {
    "text": "In other words, it makes the\ntotal number of ones be odd.",
    "start": "39400",
    "end": "44640"
  },
  {
    "start": "43000",
    "end": "171000"
  },
  {
    "text": "The first question we\nwant to ask ourselves",
    "start": "44640",
    "end": "47160"
  },
  {
    "text": "is what is the minimum Hamming\nDistance between valid code",
    "start": "47160",
    "end": "50520"
  },
  {
    "text": "words using this encoding?",
    "start": "50520",
    "end": "52910"
  },
  {
    "text": "In order to figure\nthat out, we need",
    "start": "52910",
    "end": "55030"
  },
  {
    "text": "to think about how many\nbits of the encoding",
    "start": "55030",
    "end": "57250"
  },
  {
    "text": "are changed if I want to\nchange one of the data bits.",
    "start": "57250",
    "end": "61320"
  },
  {
    "text": "The easiest way to see\nthis is through an example.",
    "start": "61320",
    "end": "64480"
  },
  {
    "text": "Suppose that I want to\nchange D01 from a 0 to a 1.",
    "start": "64480",
    "end": "67990"
  },
  {
    "text": "The first thing changing\nis my data bit itself.",
    "start": "67990",
    "end": "72280"
  },
  {
    "text": "Then P0x would get flipped\nbecause I just added another 1",
    "start": "72280",
    "end": "76420"
  },
  {
    "text": "to my row which means that\nI need to flip the parity",
    "start": "76420",
    "end": "79460"
  },
  {
    "text": "bit in order for the total\nnumber of 1's in my row",
    "start": "79460",
    "end": "82360"
  },
  {
    "text": "to remain odd.",
    "start": "82360",
    "end": "84560"
  },
  {
    "text": "The next change is\nthat Px1 needs to get",
    "start": "84560",
    "end": "87560"
  },
  {
    "text": "flipped in order to maintain\nan odd parity in my column.",
    "start": "87560",
    "end": "91909"
  },
  {
    "text": "So far, 3 entries\nhave changed which",
    "start": "91910",
    "end": "94330"
  },
  {
    "text": "implies that the parity of\nthe entire message flipped.",
    "start": "94330",
    "end": "97710"
  },
  {
    "text": "In order to keep the parity\nof the entire message odd,",
    "start": "97710",
    "end": "101010"
  },
  {
    "text": "Pxx needs to be flipped\nas well so that there",
    "start": "101010",
    "end": "104420"
  },
  {
    "text": "are a total of 4\nentries being flipped",
    "start": "104420",
    "end": "107020"
  },
  {
    "text": "which will cause the odd\nparity of the entire message",
    "start": "107020",
    "end": "109960"
  },
  {
    "text": "to remain unchanged.",
    "start": "109960",
    "end": "112830"
  },
  {
    "text": "This means that our\nminimum hamming distance",
    "start": "112830",
    "end": "114990"
  },
  {
    "text": "for this encoding equals 4\nbecause any time we flip a data",
    "start": "114990",
    "end": "119450"
  },
  {
    "text": "bit, a total of 4\nentries need to change",
    "start": "119450",
    "end": "122590"
  },
  {
    "text": "to maintain our encoding.",
    "start": "122590",
    "end": "125079"
  },
  {
    "text": "We know that to\ndetect an E-bit error,",
    "start": "125080",
    "end": "127580"
  },
  {
    "text": "the hamming distance (HD)\nhas to be greater than E,",
    "start": "127580",
    "end": "130410"
  },
  {
    "text": "or in other words,\nthe HD >= E + 1.",
    "start": "130410",
    "end": "135910"
  },
  {
    "text": "So to detect a 1-bit\nerror, one needs a HD >= 2.",
    "start": "135910",
    "end": "141770"
  },
  {
    "text": "We also know that to correct\nan E-bit error, the HD > 2E,",
    "start": "141770",
    "end": "147810"
  },
  {
    "text": "or the HD >= 2E + 1.",
    "start": "147810",
    "end": "153459"
  },
  {
    "text": "So to correct a 1-bit error,\none needs to have a HD >= 3.",
    "start": "153460",
    "end": "158350"
  },
  {
    "text": "For this encoding, since our\nhamming distance equals 4,",
    "start": "158350",
    "end": "162910"
  },
  {
    "text": "that means we should\nbe able to both detect",
    "start": "162910",
    "end": "165880"
  },
  {
    "text": "and correct 1-bit errors.",
    "start": "165880",
    "end": "167940"
  },
  {
    "start": "167940",
    "end": "171820"
  },
  {
    "start": "171000",
    "end": "348000"
  },
  {
    "text": "Taking a look at\nthis message, if we",
    "start": "171820",
    "end": "173930"
  },
  {
    "text": "check the parity of each row,\ncolumn, and full message,",
    "start": "173930",
    "end": "178519"
  },
  {
    "text": "we see that in all\ncases our parity is odd.",
    "start": "178520",
    "end": "182230"
  },
  {
    "text": "Since odd parity\nindicates a valid message,",
    "start": "182230",
    "end": "185129"
  },
  {
    "text": "there are no errors\nin this message.",
    "start": "185130",
    "end": "189730"
  },
  {
    "text": "Looking at this message\nwe see that all the row",
    "start": "189730",
    "end": "192720"
  },
  {
    "text": "parities are odd, but the\nparity of column 1 is even.",
    "start": "192720",
    "end": "197300"
  },
  {
    "text": "This means that there\nis an error in column 1.",
    "start": "197300",
    "end": "200390"
  },
  {
    "text": "However, since\nthere were no errors",
    "start": "200390",
    "end": "202530"
  },
  {
    "text": "in the parity of the rows, this\nmeans that the bit in error",
    "start": "202530",
    "end": "206010"
  },
  {
    "text": "is the parity bit itself.",
    "start": "206010",
    "end": "208180"
  },
  {
    "text": "If we flip Px1 from\na 0 to a 1 we now",
    "start": "208180",
    "end": "212060"
  },
  {
    "text": "have a valid message again.",
    "start": "212060",
    "end": "215610"
  },
  {
    "text": "Looking at the parity of each\nrow and column in this message,",
    "start": "215610",
    "end": "219420"
  },
  {
    "text": "we see that row 0\nhas an even parity,",
    "start": "219420",
    "end": "222720"
  },
  {
    "text": "and column 0 has an even parity.",
    "start": "222720",
    "end": "225800"
  },
  {
    "text": "This means that the data bit\nat row 0, column 0 is wrong.",
    "start": "225800",
    "end": "230770"
  },
  {
    "text": "If we flip this bit, we now see\nthat all of our row and column",
    "start": "230770",
    "end": "234800"
  },
  {
    "text": "parities are correct, and\nour total message parity",
    "start": "234800",
    "end": "238370"
  },
  {
    "text": "is correct as well,\nso we have restored",
    "start": "238370",
    "end": "241120"
  },
  {
    "text": "our message by identifying\nthe bit in error.",
    "start": "241120",
    "end": "243950"
  },
  {
    "start": "243950",
    "end": "246480"
  },
  {
    "text": "In this example, all of the row\nparities and column parities",
    "start": "246480",
    "end": "250510"
  },
  {
    "text": "are odd.",
    "start": "250510",
    "end": "251330"
  },
  {
    "text": "However, the parity of the\nentire message is even.",
    "start": "251330",
    "end": "254950"
  },
  {
    "text": "This means that the bit\nin error in this message",
    "start": "254950",
    "end": "257579"
  },
  {
    "text": "is the Pxx bit itself.",
    "start": "257579",
    "end": "260430"
  },
  {
    "text": "Flipping that bottom right\nbit results in a valid message",
    "start": "260430",
    "end": "263580"
  },
  {
    "text": "once again.",
    "start": "263580",
    "end": "266220"
  },
  {
    "text": "Now let's go back to our\noriginal valid message",
    "start": "266220",
    "end": "268840"
  },
  {
    "text": "and see if we can\ncorrect 2-bit errors.",
    "start": "268840",
    "end": "271840"
  },
  {
    "text": "Suppose we flip D11 to 0 and D22\nto 1 to create a 2-bit error.",
    "start": "271840",
    "end": "278970"
  },
  {
    "text": "Now when we look at\nthe parity of each row,",
    "start": "278970",
    "end": "281560"
  },
  {
    "text": "we find that both row 1\nand 2 have a parity error.",
    "start": "281560",
    "end": "287030"
  },
  {
    "text": "Similarly, columns 1 and\n2 have a parity error.",
    "start": "287030",
    "end": "290910"
  },
  {
    "text": "The total message\nparity remains correct.",
    "start": "290910",
    "end": "294220"
  },
  {
    "text": "Given this information, we\nknow that an error occurred",
    "start": "294220",
    "end": "297430"
  },
  {
    "text": "in the transmission\nof this message,",
    "start": "297430",
    "end": "299300"
  },
  {
    "text": "but we cannot identify exactly\nwhich bits are in error",
    "start": "299300",
    "end": "302870"
  },
  {
    "text": "because there is more than one\npossible way to alter two bits",
    "start": "302870",
    "end": "306449"
  },
  {
    "text": "and arrive at a valid message.",
    "start": "306450",
    "end": "309510"
  },
  {
    "text": "This demonstrates that we\ncan detect a 2-bit error,",
    "start": "309510",
    "end": "312940"
  },
  {
    "text": "but we can't correct\na 2-bit error.",
    "start": "312940",
    "end": "315720"
  },
  {
    "text": "Going back to our original\nclaims about hamming distances,",
    "start": "315720",
    "end": "319230"
  },
  {
    "text": "this is in line with\nour expectations.",
    "start": "319230",
    "end": "322340"
  },
  {
    "text": "If E=2, meaning that we want\nto detect a 2-bit error,",
    "start": "322340",
    "end": "326690"
  },
  {
    "text": "then the HD >= E+1\nwhich equals 3.",
    "start": "326690",
    "end": "331200"
  },
  {
    "text": "To correct a 2-bit error, the\nHD >= 2E+1 which equals 5.",
    "start": "331200",
    "end": "340040"
  },
  {
    "text": "Since our hamming distance\nin this problem is 4,",
    "start": "340040",
    "end": "342560"
  },
  {
    "text": "we can only detect 2-bit\nerrors, but not correct them.",
    "start": "342560",
    "end": "347660"
  },
  {
    "start": "347660",
    "end": "348203"
  }
]