[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "Now let's think a bit about what happens if\nthere's an error and one or more of the bits",
    "start": "459",
    "end": "5140"
  },
  {
    "text": "in our encoded data gets corrupted.",
    "start": "5140",
    "end": "7710"
  },
  {
    "text": "We'll focus on single-bit errors, but much\nof what we discuss can be generalized to multi-bit",
    "start": "7710",
    "end": "12760"
  },
  {
    "text": "errors.",
    "start": "12760",
    "end": "13760"
  },
  {
    "text": "For example, consider encoding the results\nof some unpredictable event, e.g., flipping",
    "start": "13760",
    "end": "18929"
  },
  {
    "text": "a fair coin.",
    "start": "18929",
    "end": "19929"
  },
  {
    "text": "There are two outcomes: \"heads\", encoded as,\nsay, 0, and \"tails\" encoded as 1.",
    "start": "19929",
    "end": "26329"
  },
  {
    "text": "Now suppose some error occurs during processing\n- for example, the data is corrupted while",
    "start": "26329",
    "end": "31109"
  },
  {
    "text": "being transmitted from Bob to Alice:\nBob intended to send the message \"heads\",",
    "start": "31109",
    "end": "36649"
  },
  {
    "text": "but the 0 was corrupted and become a 1 during\ntransmission, so Alice receives 1, which she",
    "start": "36650",
    "end": "41760"
  },
  {
    "text": "interprets as \"tails\".",
    "start": "41760",
    "end": "43750"
  },
  {
    "text": "So this simple encoding doesn't work very\nwell if there's the possibility of single-bit",
    "start": "43750",
    "end": "48359"
  },
  {
    "text": "errors.",
    "start": "48359",
    "end": "50160"
  },
  {
    "text": "To help with our discussion, we'll introduce\nthe notion of \"Hamming distance\", defined",
    "start": "50160",
    "end": "53920"
  },
  {
    "text": "as the number of positions in which the corresponding\ndigits differ in two encodings of the same",
    "start": "53920",
    "end": "59480"
  },
  {
    "text": "length.",
    "start": "59480",
    "end": "60480"
  },
  {
    "text": "For example, here are two 7-bit encodings,\nwhich differ in their third and fifth positions,",
    "start": "60480",
    "end": "66280"
  },
  {
    "text": "so the Hamming distance between the encodings\nis 2.",
    "start": "66280",
    "end": "69930"
  },
  {
    "text": "If someone tells us the Hamming distance of\ntwo encodings is 0, then the two encodings",
    "start": "69930",
    "end": "74479"
  },
  {
    "text": "are identical.",
    "start": "74479",
    "end": "76250"
  },
  {
    "text": "Hamming distance is a handy tool for measuring\nhow encodings differ.",
    "start": "76250",
    "end": "81400"
  },
  {
    "start": "81000",
    "end": "81000"
  },
  {
    "text": "How does this help us think about single-bit\nerrors?",
    "start": "81400",
    "end": "84070"
  },
  {
    "text": "A single-bit error changes exactly one of\nthe bits of an encoding, so the Hamming distance",
    "start": "84070",
    "end": "88930"
  },
  {
    "text": "between a valid binary code word and the same\ncode word with a single-bit error is 1.",
    "start": "88930",
    "end": "94740"
  },
  {
    "text": "The difficulty with our simple encoding is\nthat the two valid code words (\"0\" and \"1\")",
    "start": "94740",
    "end": "99970"
  },
  {
    "text": "also have a Hamming distance of 1.",
    "start": "99970",
    "end": "102270"
  },
  {
    "text": "So a single-bit error changes one valid code\nword into another valid code word.",
    "start": "102270",
    "end": "107340"
  },
  {
    "text": "We'll show this graphically, using an arrow\nto indicate that two encodings differ by a",
    "start": "107340",
    "end": "111909"
  },
  {
    "text": "single bit, i.e., that the Hamming distance\nbetween the encodings is 1.",
    "start": "111909",
    "end": "116898"
  },
  {
    "text": "The real issue here is that when Alice receives\na 1, she can't distinguish between an uncorrupted",
    "start": "116899",
    "end": "121750"
  },
  {
    "text": "encoding of tails and a corrupted encoding\nof heads - she can't detect that an error",
    "start": "121750",
    "end": "126798"
  },
  {
    "text": "occurred.",
    "start": "126799",
    "end": "128030"
  },
  {
    "text": "Let's figure how to solve her problem!",
    "start": "128030",
    "end": "130940"
  },
  {
    "start": "130000",
    "end": "130000"
  },
  {
    "text": "The insight is to come up with a set of valid\ncode words such that a single-bit error does",
    "start": "130940",
    "end": "135390"
  },
  {
    "text": "NOT produce another valid code word.",
    "start": "135390",
    "end": "138440"
  },
  {
    "text": "What we need are code words that differ by\nat least two bits, i.e., we want the minimum",
    "start": "138440",
    "end": "143360"
  },
  {
    "text": "Hamming distance between any two code words\nto be at least 2.",
    "start": "143360",
    "end": "148310"
  },
  {
    "text": "If we have a set of code words where the minimum\nHamming distance is 1, we can generate the",
    "start": "148310",
    "end": "152840"
  },
  {
    "text": "set we want by adding a parity bit to each\nof the original code words.",
    "start": "152840",
    "end": "158019"
  },
  {
    "text": "There's \"even parity\" and \"odd parity.\"",
    "start": "158020",
    "end": "160620"
  },
  {
    "text": "Using even parity, the additional parity bit\nis chosen so that the total number of 1 bits",
    "start": "160620",
    "end": "165480"
  },
  {
    "text": "in the new code word are even.",
    "start": "165481",
    "end": "168350"
  },
  {
    "text": "For example, our original encoding for \"heads\"\nwas 0, adding an even parity bit gives us",
    "start": "168350",
    "end": "174060"
  },
  {
    "text": "00.",
    "start": "174060",
    "end": "175610"
  },
  {
    "text": "Adding an even parity bit to our original\nencoding for \"tails\" gives us 11.",
    "start": "175610",
    "end": "180400"
  },
  {
    "text": "The minimum Hamming distance between code\nwords has increased from 1 to 2.",
    "start": "180400",
    "end": "185670"
  },
  {
    "text": "How does this help?",
    "start": "185670",
    "end": "188060"
  },
  {
    "text": "Consider what happens when there's a single-bit\nerror: 00 would be corrupted to 01 or 10,",
    "start": "188060",
    "end": "194030"
  },
  {
    "text": "neither of which is a valid code word.",
    "start": "194030",
    "end": "196510"
  },
  {
    "text": "Aha!",
    "start": "196510",
    "end": "197510"
  },
  {
    "text": "We can detect that a single-bit error has\noccurred.",
    "start": "197510",
    "end": "200819"
  },
  {
    "text": "Similarly, single-bit errors for 11 would\nalso be detected.",
    "start": "200820",
    "end": "205820"
  },
  {
    "text": "Note that the valid code words 00 and 11 both\nhave an even number of 1-bits, but that the",
    "start": "205820",
    "end": "211900"
  },
  {
    "text": "corrupted code words 01 or 10 have an odd\nnumber of 1-bits.",
    "start": "211900",
    "end": "216540"
  },
  {
    "text": "We say that corrupted code words have a \"parity\nerror\".",
    "start": "216540",
    "end": "220510"
  },
  {
    "start": "220000",
    "end": "220000"
  },
  {
    "text": "It's easy to perform a parity check: simply\ncount the number of 1s in the code word.",
    "start": "220510",
    "end": "225150"
  },
  {
    "text": "If it's even, a single-bit error has NOT occurred;\nif it's odd, a single-bit error HAS occurred.",
    "start": "225150",
    "end": "231260"
  },
  {
    "text": "We'll see in a couple of chapters that the\nBoolean function exclusive-or can be used",
    "start": "231260",
    "end": "235569"
  },
  {
    "text": "to perform parity checks.",
    "start": "235570",
    "end": "238150"
  },
  {
    "text": "Note that parity won't help us if there's\nan even number of bit errors, where a corrupted",
    "start": "238150",
    "end": "242450"
  },
  {
    "text": "code word would have an even number of 1-bits\nand hence appear to be okay.",
    "start": "242450",
    "end": "247629"
  },
  {
    "text": "Parity is useful for detecting single-bit\nerrors; we'll need a more sophisticated encoding",
    "start": "247630",
    "end": "252060"
  },
  {
    "text": "to detect more errors.",
    "start": "252060",
    "end": "254750"
  },
  {
    "start": "254000",
    "end": "254000"
  },
  {
    "text": "In general, to detect some number E of errors,\nwe need a minimum Hamming distance of E+1",
    "start": "254750",
    "end": "260479"
  },
  {
    "text": "between code words.",
    "start": "260479",
    "end": "262169"
  },
  {
    "text": "We can see this graphically below which shows\nhow errors can corrupt the valid code words",
    "start": "262169",
    "end": "266659"
  },
  {
    "text": "000 and 111, which have a Hamming distance\nof 3.",
    "start": "266659",
    "end": "271620"
  },
  {
    "text": "In theory this means we should be able to\ndetect up to 2-bit errors.",
    "start": "271620",
    "end": "277000"
  },
  {
    "text": "Each arrow represents a single-bit error and\nwe can see from the diagram that following",
    "start": "277000",
    "end": "281290"
  },
  {
    "text": "any path of length 2 from either 000 or 111\ndoesn't get us to the other valid code word.",
    "start": "281290",
    "end": "287750"
  },
  {
    "text": "In other words, assuming we start with either\n000 or 111, we can detect the occurrence of",
    "start": "287750",
    "end": "294189"
  },
  {
    "text": "up to 2 errors.",
    "start": "294189",
    "end": "296520"
  },
  {
    "text": "Basically our error detection scheme relies\non choosing code words far enough apart, as",
    "start": "296520",
    "end": "300979"
  },
  {
    "text": "measured by Hamming distance, so that E errors\ncan't corrupt one valid code word so that",
    "start": "300979",
    "end": "305930"
  },
  {
    "text": "it looks like another valid code word.",
    "start": "305930",
    "end": "307819"
  }
]