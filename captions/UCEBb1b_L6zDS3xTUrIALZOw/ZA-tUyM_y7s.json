[
  {
    "start": "0",
    "end": "55000"
  },
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "5423"
  },
  {
    "start": "5423",
    "end": "12613"
  },
  {
    "text": "JASON KU: Good\nmorning, everybody. STUDENT: Morning-- JASON KU: My name's Jason Ku.",
    "start": "12613",
    "end": "18320"
  },
  {
    "text": "I'm going to be teaching\nthis class in Introduction to Algorithms with two\nother instructors here--",
    "start": "18320",
    "end": "25820"
  },
  {
    "text": "faculty in the department-- Eric Demaine and Justin Solomon.",
    "start": "25820",
    "end": "31820"
  },
  {
    "text": "They're excellent\npeople, and so they will be working on teaching\nthis class with me.",
    "start": "31820",
    "end": "39329"
  },
  {
    "text": "I will be teaching\nthe first lecture, and we'll have\neach of them teach one of the next two lectures,\nand then we'll go from there.",
    "start": "39330",
    "end": "47890"
  },
  {
    "text": " This is Intro to Algorithms.",
    "start": "47890",
    "end": "53239"
  },
  {
    "text": "OK, so we're going to start\ntalking about this course content now. What is this course about? It's about algorithms--\nintroduction to algorithms.",
    "start": "53240",
    "end": "60710"
  },
  {
    "start": "55000",
    "end": "207000"
  },
  {
    "text": "Really what the\ncourse is about is teaching you to solve\ncomputational problems.",
    "start": "60710",
    "end": "66320"
  },
  {
    "text": "But it's more than that. It's not just about\nteaching you to solve computational problems.",
    "start": "66320",
    "end": "72920"
  },
  {
    "text": "Goal 1-- solve\ncomputational problems.",
    "start": "72920",
    "end": "85590"
  },
  {
    "text": "But it's more than that. It's also about communicating\nthose solutions to others",
    "start": "85590",
    "end": "92730"
  },
  {
    "text": "and being able to communicate\nthat your way of solving the problem is\ncorrect and efficient.",
    "start": "92730",
    "end": "100140"
  },
  {
    "text": "So it's about two more things-- ",
    "start": "100140",
    "end": "106640"
  },
  {
    "text": "prove correctness,\nargue efficiency,",
    "start": "106640",
    "end": "119040"
  },
  {
    "text": "and in general, it's\nabout communication--",
    "start": "119040",
    "end": "125010"
  },
  {
    "text": " I can't spell, by the way--",
    "start": "125010",
    "end": "130860"
  },
  {
    "text": "communication of these ideas. And you'll find that, over\nthe course of this class, you'll be doing a lot\nmore writing than you do",
    "start": "130860",
    "end": "137940"
  },
  {
    "text": "in a lot of your other courses. It really should maybe\nbe a CI kind of class, because you'll be doing a\nlot more writing than you",
    "start": "137940",
    "end": "144780"
  },
  {
    "text": "will be coding, for sure. Of course, solving the\ncomputational problem",
    "start": "144780",
    "end": "150450"
  },
  {
    "text": "is important, but\nreally, the thing that you're getting out of this\nclass and other theory classes that you're not getting in\nother classes in this department",
    "start": "150450",
    "end": "160920"
  },
  {
    "text": "is that we really\nconcentrate on being able to prove that the\nthings you're doing are correct and better\nthan other things,",
    "start": "160920",
    "end": "167319"
  },
  {
    "text": "and being able to communicate\nthose ideas to others, and not just to a computer--",
    "start": "167320",
    "end": "172800"
  },
  {
    "text": "to other people, convince\nthem that it's correct. OK, so that's what\nthis class is about.",
    "start": "172800",
    "end": "179620"
  },
  {
    "text": "So what do I mean when I say\nsolve a computational problem?",
    "start": "179620",
    "end": "184690"
  },
  {
    "text": "What is a problem? What is an algorithm? People make fun of me because\nI start with this question,",
    "start": "184690",
    "end": "191470"
  },
  {
    "text": "but anyone want to\nanswer that question? ",
    "start": "191470",
    "end": "197600"
  },
  {
    "text": "No? What's a problem,\ncomputationally? No?",
    "start": "197600",
    "end": "204060"
  },
  {
    "text": "OK, so it's not such\na stupid question. Yeah? STUDENT: [INAUDIBLE] JASON KU: Something\nyou want to compute--",
    "start": "204060",
    "end": "209209"
  },
  {
    "start": "207000",
    "end": "515000"
  },
  {
    "text": "OK, yes, that's true. Right. But a little bit more\nabstractly, what I'm going to",
    "start": "209210",
    "end": "214820"
  },
  {
    "text": "think of a computational\nproblem being-- and this is where\nyour prerequisite",
    "start": "214820",
    "end": "221930"
  },
  {
    "text": "in discrete mathematics\nshould come in-- a problem is-- you've\ngot a set of inputs.",
    "start": "221930",
    "end": "228800"
  },
  {
    "text": " Maybe I have one, two, three,\nfour, five possible inputs",
    "start": "228800",
    "end": "237650"
  },
  {
    "text": "I could have to my algorithm. Then I have a space of outputs. ",
    "start": "237650",
    "end": "247278"
  },
  {
    "text": "I don't know. Maybe I have more of\nthem than I do inputs, but these are the possible\noutputs to my problem.",
    "start": "247278",
    "end": "254720"
  },
  {
    "text": "And what a problem is\nis a binary relation between these\ninputs and outputs.",
    "start": "254720",
    "end": "260028"
  },
  {
    "text": "Essentially, for each input, I\nspecify which of these outputs is correct.",
    "start": "260029",
    "end": "266890"
  },
  {
    "text": "It doesn't necessarily\nhave to be one. If I say, give me the index in\nan array containing the value",
    "start": "266890",
    "end": "274360"
  },
  {
    "text": "5, there could be multiple\n5's in that array, and so any of those\nindices would be correct.",
    "start": "274360",
    "end": "280470"
  },
  {
    "text": "So maybe this guy maps to that\noutput, and maybe this guy maps",
    "start": "280470",
    "end": "285640"
  },
  {
    "text": "to-- I don't know-- two\nor three outputs. This input goes to one, two--",
    "start": "285640",
    "end": "292598"
  },
  {
    "text": "I don't know. There's some kind\nof mapping here. These edges represent\na binary relation,",
    "start": "292598",
    "end": "298150"
  },
  {
    "text": "and it's kind of a\ngraph, a bipartite graph between these\ninputs and outputs.",
    "start": "298150",
    "end": "303280"
  },
  {
    "text": "And these are specifying\nwhich of these outputs are correct for these inputs.",
    "start": "303280",
    "end": "308550"
  },
  {
    "text": "That's really the\nformal definition of what a problem is. Now, generally, if\nI have a problem--",
    "start": "308550",
    "end": "315270"
  },
  {
    "text": "a computational\nproblem, I'm not going to specify the problem to you\nby saying, OK, for input 1,",
    "start": "315270",
    "end": "323560"
  },
  {
    "text": "the correct answer is\n0, and for input 2, the correct answer's 3,\nand so on and so forth.",
    "start": "323560",
    "end": "328880"
  },
  {
    "text": "That would take forever, right? Usually what we do\nwhen defining a problem is specify some kind of\npredicate, saying that,",
    "start": "328880",
    "end": "336280"
  },
  {
    "text": "oh, we can check-- if I give you an\ninput and an output, I can check whether that\noutput is correct or not.",
    "start": "336280",
    "end": "343240"
  },
  {
    "text": "That's usually how we\ndefine a problem is, if I am checking for whether\nthis index contains a 5,",
    "start": "343240",
    "end": "352060"
  },
  {
    "text": "I can just go to that array,\nlook at index 5, and-- or the index you gave me,\nand see if it equals 5.",
    "start": "352060",
    "end": "358970"
  },
  {
    "text": "So usually, we're putting\nit in terms of predicates because, in general,\nwe don't really want to talk about small\ninstances of problems.",
    "start": "358970",
    "end": "367520"
  },
  {
    "text": "So let's say I had\nthe problem of, among the students in this\nclassroom, do any pair of you",
    "start": "367520",
    "end": "374840"
  },
  {
    "text": "have the same birthday? All right, well, probably, if\nthere's more than 365 of you,",
    "start": "374840",
    "end": "381639"
  },
  {
    "text": "the answer is yes. Right? By what? Pigeonhole\nprinciple-- two of you",
    "start": "381640",
    "end": "387270"
  },
  {
    "text": "must have the same birthday. So let's generalize it\na little bit, say that--",
    "start": "387270",
    "end": "394050"
  },
  {
    "text": "I don't know-- I need a bigger space of\nbirthdays for this question to be interesting.",
    "start": "394050",
    "end": "399130"
  },
  {
    "text": "Maybe I tack on the year. Maybe I tack on the\nhour that you were born.",
    "start": "399130",
    "end": "405180"
  },
  {
    "text": "And that's a bigger\nspace of inputs, and I wouldn't necessarily\nexpect that two of you",
    "start": "405180",
    "end": "410580"
  },
  {
    "text": "would be born in the\nsame year on the same day in the same hour. That would be a\nlittle less likely.",
    "start": "410580",
    "end": "416070"
  },
  {
    "text": "In fact, as long as that\nspace is larger than something like the square of the\nnumber of you, then",
    "start": "416070",
    "end": "424560"
  },
  {
    "text": "I'm less likely than even\nto have a pair of you.",
    "start": "424560",
    "end": "431415"
  },
  {
    "text": "That's a birthday problem\nyou may have seen in 042,",
    "start": "431415",
    "end": "440040"
  },
  {
    "text": "potentially. But in general, I don't-- I'm not going to mess with\nprobability so much here.",
    "start": "440040",
    "end": "446070"
  },
  {
    "text": "I want a deterministic\nalgorithm, right away of checking whether two of\nyou have the same birth time,",
    "start": "446070",
    "end": "452790"
  },
  {
    "text": "let's say. OK, so in general,\nin this class, we're not going to\nconcentrate on inputs such as,",
    "start": "452790",
    "end": "460620"
  },
  {
    "text": "is there a pair of\nyou in this class that have the same birthday? That's kind of boring.",
    "start": "460620",
    "end": "466340"
  },
  {
    "text": " I could do a lot of\ndifferent things,",
    "start": "466340",
    "end": "472629"
  },
  {
    "text": "but what we do in\nthis class-- this is for a fixed classroom of you.",
    "start": "472630",
    "end": "478770"
  },
  {
    "text": "I want to make algorithms that\nare general to any classroom-- to go to your recitation.",
    "start": "478770",
    "end": "484728"
  },
  {
    "text": "I want an algorithm that will\napply to your recitation. I want an algorithm that not\nonly applies to this classroom,",
    "start": "484728",
    "end": "489870"
  },
  {
    "text": "but also the machine\nlearning class before you. I want an algorithm\nthat can change its--",
    "start": "489870",
    "end": "498240"
  },
  {
    "text": "it can accept an\narbitrarily sized input. Here we have a class of\nmaybe 300, 400 students,",
    "start": "498240",
    "end": "505979"
  },
  {
    "text": "but I want my algorithm to\nwork for a billion students. Maybe I'm trying\nto check if there's",
    "start": "505980",
    "end": "511349"
  },
  {
    "text": "a match of something in\nthe Facebook database or something like that. So in general, we are looking\nfor general problems that",
    "start": "511350",
    "end": "528300"
  },
  {
    "start": "515000",
    "end": "665000"
  },
  {
    "text": "have arbitrarily sized inputs.",
    "start": "528300",
    "end": "536160"
  },
  {
    "text": "So these inputs could\ngrow very large, but we want kind of a\nfixed size algorithm",
    "start": "536160",
    "end": "542400"
  },
  {
    "text": "to solve those problems. So what is an algorithm, then? ",
    "start": "542400",
    "end": "559200"
  },
  {
    "text": "I really can't spell-- told you. I didn't lie to you.",
    "start": "559200",
    "end": "565000"
  },
  {
    "text": "So an algorithm is a little\ndifferent than a problem. A problem specification--",
    "start": "565000",
    "end": "570459"
  },
  {
    "text": " I can tell you what\nthis graph looks like.",
    "start": "570460",
    "end": "575620"
  },
  {
    "text": "An algorithm is really-- I don't know what\nthe outputs are. I don't know what\nthese edges are. But I want a fixed size\nmachine or procedure",
    "start": "575620",
    "end": "584620"
  },
  {
    "text": "that, if I give it an input,\nit will generate an output.",
    "start": "584620",
    "end": "589973"
  },
  {
    "text": "And if it generates\nan output, it better be one of these correct outputs. So if I have an algorithm\nthat takes in this input,",
    "start": "589973",
    "end": "598720"
  },
  {
    "text": "I really want it to\noutput this output, or else it's not a\ncorrect algorithm. Similarly, for this one, it\ncould output any of these three",
    "start": "598720",
    "end": "607510"
  },
  {
    "text": "outputs, but if it outputs\nthis guy for this input,",
    "start": "607510",
    "end": "612580"
  },
  {
    "text": "that would not be a\ncorrect algorithm. And so generally, what we want\nis an algorithm is a function.",
    "start": "612580",
    "end": "619130"
  },
  {
    "text": "It takes inputs to outputs. An algorithm is some\nkind of function",
    "start": "619130",
    "end": "624850"
  },
  {
    "text": "that takes these inputs,\nmaps it to a single output, and that output better be\ncorrect based on our problem.",
    "start": "624850",
    "end": "632589"
  },
  {
    "text": "So that's what our algorithm is. It solves the\nproblem if it returns",
    "start": "632590",
    "end": "637690"
  },
  {
    "text": "a correct output for\nevery problem input that is in our domain. ",
    "start": "637690",
    "end": "646709"
  },
  {
    "text": "Does anyone have a\npossible algorithm for checking whether\nany two of you have the same birth time,\nas specified before?",
    "start": "646710",
    "end": "653605"
  },
  {
    "text": " I'm going to let\nsomeone else have a try.",
    "start": "653605",
    "end": "660510"
  },
  {
    "text": "Sure. STUDENT: Just ask everyone\none by one, and every time [INAUDIBLE]",
    "start": "660510",
    "end": "666870"
  },
  {
    "text": "JASON KU: Great-- so what\nyour colleague has said is a great algorithm. Essentially, what\nit's going to do",
    "start": "666870",
    "end": "671940"
  },
  {
    "text": "is I'm going to put\nyou guys in some order, I'm going to give\nyou each of you a number, one through however\nmany number of students there",
    "start": "671940",
    "end": "681029"
  },
  {
    "text": "are in this class. And I'm going to\ninterview you one by one. I'm going to say,\nwhat's your birthday?",
    "start": "681030",
    "end": "686370"
  },
  {
    "text": "And I'm going to write it down. I'm going to put it in\nsome kind of record. And then, as I keep\ninterviewing you,",
    "start": "686370",
    "end": "693899"
  },
  {
    "text": "I'm going to find\nout your birthday. I'm going to check the record. I'm going to look through all\nthe birthdays in the record.",
    "start": "693900",
    "end": "700076"
  },
  {
    "text": "If I find a match,\nthen I return, yay-- I found a pair-- and I can stop.",
    "start": "700077",
    "end": "705760"
  },
  {
    "text": "Otherwise, if I get\nthrough the record list, I don't-- and I\ndon't find a match, I just stick you at\nthe end of the record--",
    "start": "705760",
    "end": "712750"
  },
  {
    "text": "I add you to the\nrecord, and then I move on to the next person. I keep doing this. OK, so that's a\nproposed algorithm",
    "start": "712750",
    "end": "718959"
  },
  {
    "text": "for this birthday problem. For birthday problem,\nwhat's the algorithm here?",
    "start": "718960",
    "end": "731860"
  },
  {
    "text": "Maintain a record. ",
    "start": "731860",
    "end": "740360"
  },
  {
    "text": "Interview students\nin some order.",
    "start": "740360",
    "end": "749380"
  },
  {
    "text": " And what does interviewing\na student mean?",
    "start": "749380",
    "end": "755830"
  },
  {
    "text": "It means two things. It means check if\nbirthday in record.",
    "start": "755830",
    "end": "769279"
  },
  {
    "text": "And if it is, return a pair.  So return pair.",
    "start": "769280",
    "end": "778759"
  },
  {
    "text": "Otherwise, add a new\nstudent to record.",
    "start": "778760",
    "end": "791560"
  },
  {
    "text": "And then, at the very end,\nif I go through everybody and I haven't found\na match yet, I'm going to return\nthat there is none.",
    "start": "791560",
    "end": "798460"
  },
  {
    "text": " OK, so that's a statement\nof an algorithm.",
    "start": "798460",
    "end": "804850"
  },
  {
    "text": "That's kind of the\nlevel of description that we'll be looking for you\nin the three parts of this--",
    "start": "804850",
    "end": "811420"
  },
  {
    "text": "theory questions that we ask\nyou on your problem sets. It's a verbal description\nin words that--",
    "start": "811420",
    "end": "819550"
  },
  {
    "text": "it's maybe not enough for a\ncomputer to know what to do, but if you said this algorithm\nto any of your friends",
    "start": "819550",
    "end": "826480"
  },
  {
    "text": "in this class, right they\nwould at least understand what it is that you're doing. Yeah?",
    "start": "826480",
    "end": "831640"
  },
  {
    "text": "STUDENT: Does an algorithm\nhave to be a pure function in a mathematical sense?",
    "start": "831640",
    "end": "837040"
  },
  {
    "text": "JASON KU: Does an algorithm\nhave to be a pure function in a mathematical sense? As in it needs to map\nto a single output?",
    "start": "837040",
    "end": "844383"
  },
  {
    "text": "STUDENT: As in it can't\nmodify some external state. It can't take in state\nand it can't do I/O.",
    "start": "844383",
    "end": "851960"
  },
  {
    "start": "851000",
    "end": "1036000"
  },
  {
    "text": "JASON KU: So we're\ntalking about kind of a functional programming\ndefinition of a function.",
    "start": "851960",
    "end": "860800"
  },
  {
    "text": "I am talking about\nthe mathematical-- I have a binary\nrelation, and this thing",
    "start": "860800",
    "end": "867310"
  },
  {
    "text": "has an output for every\ninput, and there is exactly one output to every input.",
    "start": "867310",
    "end": "873130"
  },
  {
    "text": "That's the mathematical\ndefinition of function that I'm using for when\nI'm defining an algorithm.",
    "start": "873130",
    "end": "879120"
  },
  {
    "text": "Yeah? STUDENT: Basically, is\nan algorithm like a plan?",
    "start": "879120",
    "end": "885675"
  },
  {
    "text": "JASON KU: Yeah. An algorithm's a\nprocedure that somehow-- I can do whatever\nI want, but I have",
    "start": "885675",
    "end": "890920"
  },
  {
    "text": "to take one of these inputs and\nI have to produce an output. And at the end, it\nbetter be correct.",
    "start": "890920",
    "end": "896488"
  },
  {
    "text": "So it's just a procedure. You can think of it\nas like a recipe. It's just some\nkind of procedure.",
    "start": "896488",
    "end": "902870"
  },
  {
    "text": "It's a sequence of things\nthat you should do, and then, at the end, you\nwill return an output.",
    "start": "902870",
    "end": "908930"
  },
  {
    "text": "S here's a possible algorithm\nfor solving this birthday problem.",
    "start": "908930",
    "end": "915380"
  },
  {
    "text": "Now, I've given you-- what I argue to you, or\nI'm asserting to you,",
    "start": "915380",
    "end": "921769"
  },
  {
    "text": "is a solution to this\nbirthday problem. And maybe you guys\nagree with me, and maybe some of you don't.",
    "start": "921770",
    "end": "928910"
  },
  {
    "text": "So how do I convince you\nthat this is correct? ",
    "start": "928910",
    "end": "937682"
  },
  {
    "text": "If I was just running\nthis algorithm on, say, the four students in\nthe front row here,",
    "start": "937682",
    "end": "945070"
  },
  {
    "text": "I could argue it\npretty well to you. ",
    "start": "945070",
    "end": "950950"
  },
  {
    "text": "I could assign these\nfor people birthdays in various combinations\nof either their--",
    "start": "950950",
    "end": "957550"
  },
  {
    "text": "none of them have the same\nbirthday, some two of them have the same birthday. I could try all\npossibilities, and I",
    "start": "957550",
    "end": "963365"
  },
  {
    "text": "could go through lots of\ndifferent possibilities and I need to check that\nthis algorithm returns the right answer\nin all such cases.",
    "start": "963365",
    "end": "970690"
  },
  {
    "text": "But when I have-- I don't know--\n300 of you, that's going to be a little bit\nmore difficult to argue.",
    "start": "970690",
    "end": "975890"
  },
  {
    "text": "And so if I want to argue\nsomething is correct in-- I want to prove something to you\nfor some large value, what kind",
    "start": "975890",
    "end": "983590"
  },
  {
    "text": "of technique do I use\nto prove such things? Yeah? Induction, right? And in general, what we do\nin this class, what we do",
    "start": "983590",
    "end": "991959"
  },
  {
    "text": "is-- as a computer scientist is\nwe write a constant sized piece of code that can take on any\narbitrarily large size input.",
    "start": "991960",
    "end": "1005329"
  },
  {
    "text": "If the input can be arbitrarily\nlarge, but our code is small, then that code needs\nto loop, or recurse,",
    "start": "1005330",
    "end": "1013000"
  },
  {
    "text": "or repeat some of\nthese lines of code in order to just\nread that output.",
    "start": "1013000",
    "end": "1018910"
  },
  {
    "text": "And so that's another way you\ncan arrive at this conclusion, that we're going\nto probably need to use recursion, induction.",
    "start": "1018910",
    "end": "1026319"
  },
  {
    "text": "And that's part\nof the reason why we ask you to take\na course on proofs, and inductive reasoning,\nand discrete mathematics",
    "start": "1026319",
    "end": "1035109"
  },
  {
    "text": "before this class. OK, so how do we prove\nthat this thing is correct? ",
    "start": "1035109",
    "end": "1049500"
  },
  {
    "start": "1036000",
    "end": "1527000"
  },
  {
    "text": "We got to use induction. So how can we set\nup this induction? ",
    "start": "1049500",
    "end": "1058620"
  },
  {
    "text": "What do I need for\nan inductive proof? Sure. STUDENT: [INAUDIBLE]",
    "start": "1058620",
    "end": "1064350"
  },
  {
    "text": "JASON KU: Base case--\nwe need a base case. We need some kind\nof a predicate.",
    "start": "1064350",
    "end": "1070833"
  },
  {
    "text": "Yeah, but we need\nsome kind of statement of a hypothesis of something\nthat should be maintained.",
    "start": "1070833",
    "end": "1076130"
  },
  {
    "text": "And then we need to have an\ninductive step, which basically says I take a small\nvalue of this thing,",
    "start": "1076130",
    "end": "1081890"
  },
  {
    "text": "I use the inductive\nhypothesis, and I argue it for a larger value of\nmy well-ordered set",
    "start": "1081890",
    "end": "1089150"
  },
  {
    "text": "that I'm inducting over.  For this algorithm,\nif we're going",
    "start": "1089150",
    "end": "1094820"
  },
  {
    "text": "to try to prove correctness,\nwhat I'm going to do is I'm going to-- what do I want to\nprove for this thing?",
    "start": "1094820",
    "end": "1100820"
  },
  {
    "text": "That, at the end of\ninterviewing all of you, that my algorithm has\neither already-- it",
    "start": "1100820",
    "end": "1106910"
  },
  {
    "text": "has returned with\na pair that match, or if we're in a\ncase where there",
    "start": "1106910",
    "end": "1113830"
  },
  {
    "text": "wasn't a pair somewhere in my\nset, that it returned none. Right? That would be correct.",
    "start": "1113830",
    "end": "1120940"
  },
  {
    "text": "So how can I\ngeneralize that concept to make it something\nI can induct on?",
    "start": "1120940",
    "end": "1127120"
  },
  {
    "text": "What I'm going to do\nis I'm going to say-- let's say, after I've\ninterviewed the first K",
    "start": "1127120",
    "end": "1133120"
  },
  {
    "text": "students, if there was a match\nin those first K students,",
    "start": "1133120",
    "end": "1140735"
  },
  {
    "text": "I want to be sure that\nI've returned a pair--  because if, after I\ninterview all of you,",
    "start": "1140735",
    "end": "1148970"
  },
  {
    "text": "I've maintained\nthat property, then I'll be sure, at the\nend of the process, I will have returned\na pair, if one exists.",
    "start": "1148970",
    "end": "1156030"
  },
  {
    "text": "So here's going to be\nmy inductive hypothesis. ",
    "start": "1156030",
    "end": "1169330"
  },
  {
    "text": "If first K students\ncontain a match,",
    "start": "1169330",
    "end": "1188460"
  },
  {
    "text": "algorithm returns a match\nbefore interviewing, say,",
    "start": "1188460",
    "end": "1201919"
  },
  {
    "text": "student K plus 1.",
    "start": "1201920",
    "end": "1207720"
  },
  {
    "text": "So that's going to be\nmy inductive hypothesis. Now, if there's n\nstudents in this class,",
    "start": "1207720",
    "end": "1215460"
  },
  {
    "text": "and at the end of\nmy thing, I'm trying to interview a student n plus\n1-- oh, student n plus 1's",
    "start": "1215460",
    "end": "1220679"
  },
  {
    "text": "not there. If I have maintained this,\nthen, if I replace K with n,",
    "start": "1220680",
    "end": "1227730"
  },
  {
    "text": "then I will have\nreturned a match before interviewing\nthe last student--",
    "start": "1227730",
    "end": "1233850"
  },
  {
    "text": "when I have no\nmore students left. And then this algorithm\nreturns none, as it should.",
    "start": "1233850",
    "end": "1241260"
  },
  {
    "text": "OK, so this inductive hypothesis\nsets up a nice variable",
    "start": "1241260",
    "end": "1246570"
  },
  {
    "text": "to induct on. This K I can have\nincreasing, up to n, starting at some base case.",
    "start": "1246570",
    "end": "1253120"
  },
  {
    "text": "So what's my base case here? ",
    "start": "1253120",
    "end": "1260730"
  },
  {
    "text": "My base case is-- the easiest thing I can do-- sure-- 2?",
    "start": "1260730",
    "end": "1267670"
  },
  {
    "text": "That's an easy thing I could do. I could check those\npossibilities, but there's an even\neasier base case. Yeah?",
    "start": "1267670",
    "end": "1273430"
  },
  {
    "text": "There's an even easier\nbase case than 1. STUDENT: 0-- JASON KU: 0, right? After interviewing 0 students,\nI haven't done any work, right?",
    "start": "1273430",
    "end": "1281740"
  },
  {
    "text": "Certainly, the first\n0 can't have a match. ",
    "start": "1281740",
    "end": "1290190"
  },
  {
    "text": "This inductive\nhypothesis this is true just because this initial\npredicate is false.",
    "start": "1290190",
    "end": "1298830"
  },
  {
    "text": "So I can say, base case 0-- check. Definitely, this\npredicate holds for that.",
    "start": "1298830",
    "end": "1306630"
  },
  {
    "text": "OK. Now we got to go for\nthe meat of this thing.",
    "start": "1306630",
    "end": "1313740"
  },
  {
    "text": " Assume the inductive\nhypothesis true",
    "start": "1313740",
    "end": "1322170"
  },
  {
    "text": "for K equals, say, some K prime.",
    "start": "1322170",
    "end": "1328160"
  },
  {
    "text": "And we're considering\nK prime plus 1. ",
    "start": "1328160",
    "end": "1335299"
  },
  {
    "text": "Then we have two cases. One of the nice\nthings about abduction is that it isolates our problem\nto not consider everything",
    "start": "1335300",
    "end": "1344120"
  },
  {
    "text": "all at once, but break it\ndown into a smaller interface so I can do less\nwork at each step.",
    "start": "1344120",
    "end": "1351270"
  },
  {
    "text": "So there are two cases. Either the first K\nalready had a match--",
    "start": "1351270",
    "end": "1361380"
  },
  {
    "text": " in which case, by our\ninductive hypothesis,",
    "start": "1361380",
    "end": "1366480"
  },
  {
    "text": "we've already returned\na correct answer. The other case is the--",
    "start": "1366480",
    "end": "1373760"
  },
  {
    "text": "it doesn't have a match, and\nwe interview the K plus 1th student-- the K prime plus 1th student.",
    "start": "1373760",
    "end": "1381470"
  },
  {
    "text": "If there is a match in the\nfirst K prime plus 1 students,",
    "start": "1381470",
    "end": "1386840"
  },
  {
    "text": "then it will include K plus-- the student K prime plus\n1, because otherwise,",
    "start": "1386840",
    "end": "1394370"
  },
  {
    "text": "there would have been a match\nin the things before it. So there are two cases. If K contains match, K prime.",
    "start": "1394370",
    "end": "1407900"
  },
  {
    "text": "If first K contains match-- already returned by induction.",
    "start": "1407900",
    "end": "1420978"
  },
  {
    "text": " Else, if K prime plus 1\nstudent's contains match,",
    "start": "1420978",
    "end": "1437010"
  },
  {
    "text": "the algorithm checks all\nof the possibilities-- K prime checks\nagainst all students,",
    "start": "1437010",
    "end": "1450150"
  },
  {
    "text": "essentially by brute force. It's a case analysis. I check all of\nthe possibilities.",
    "start": "1450150",
    "end": "1457560"
  },
  {
    "text": "Check if birthday is in record-- I haven't told you\nhow to do that yet, but if I'm able to\ndo that, I'm going",
    "start": "1457560",
    "end": "1465107"
  },
  {
    "text": "to check if it's in the record. If it's in the record,\nthen there will be a match, and I can return it. Otherwise, I have-- re-establish\nthe inductive hypothesis",
    "start": "1465108",
    "end": "1479710"
  },
  {
    "text": "for the K prime plus 1 students. Does that makes sense, guys? Yeah.",
    "start": "1479710",
    "end": "1485520"
  },
  {
    "text": "OK, so that's how we\nprove correctness.",
    "start": "1485520",
    "end": "1492260"
  },
  {
    "text": "This is a little bit\nmore formal than we would ask you to do in\nthis class all the time,",
    "start": "1492260",
    "end": "1497299"
  },
  {
    "text": "but it's definitely sufficient\nfor the levels of arguments that we will ask you to do.",
    "start": "1497300",
    "end": "1503840"
  },
  {
    "text": "The bar that we're\nusually trying to set is, if you communicated\nto someone else taking",
    "start": "1503840",
    "end": "1510170"
  },
  {
    "text": "this class what\nyour algorithm was, they would be able to code it\nup and tell a stupid computer",
    "start": "1510170",
    "end": "1515750"
  },
  {
    "text": "how to do that thing. ",
    "start": "1515750",
    "end": "1522340"
  },
  {
    "text": "Any questions on induction? You're going to be using\nit throughout this class,",
    "start": "1522340",
    "end": "1528610"
  },
  {
    "start": "1527000",
    "end": "1887000"
  },
  {
    "text": "and so if you are unfamiliar\nwith this line of argument, then you should go\nreview some of that.",
    "start": "1528610",
    "end": "1534480"
  },
  {
    "text": "That would be good. OK, so that's correctness,\nbeing able to communicate",
    "start": "1534480",
    "end": "1540210"
  },
  {
    "text": "that the problem-- the algorithm we\nstated was correct.",
    "start": "1540210",
    "end": "1545460"
  },
  {
    "text": "Now we want to argue\nthat it's efficient. What does efficiency mean? ",
    "start": "1545460",
    "end": "1559580"
  },
  {
    "text": "Efficiency just means\nnot only how fast",
    "start": "1559580",
    "end": "1565260"
  },
  {
    "text": "does this algorithm run,\nbut how fast does it compare to other possible ways\nof approaching this problem?",
    "start": "1565260",
    "end": "1570539"
  },
  {
    "text": " So how could we measure\nhow fast an algorithm runs?",
    "start": "1570540",
    "end": "1578460"
  },
  {
    "text": "This is kind of\na silly question. Yeah? STUDENT: [INAUDIBLE]",
    "start": "1578460",
    "end": "1583805"
  },
  {
    "text": "JASON KU: Yeah. Well, just record the time\nit takes for a computer to do this thing.",
    "start": "1583805",
    "end": "1589110"
  },
  {
    "text": "Now, there's a problem with\njust coding up an algorithm, telling a computer what to do,\nand timing how long it takes.",
    "start": "1589110",
    "end": "1596640"
  },
  {
    "text": "Why? Yeah? STUDENT: [INAUDIBLE]",
    "start": "1596640",
    "end": "1601930"
  },
  {
    "text": "JASON KU: It would depend on\nthe size of your data set. OK, we expect that, but\nthere's a bigger problem there.",
    "start": "1601930",
    "end": "1608000"
  },
  {
    "text": "Yeah? STUDENT: [INAUDIBLE] JASON KU: It depends on the\nstrength of your computer.",
    "start": "1608000",
    "end": "1613460"
  },
  {
    "text": "So I would expect that, if\nI had a watch calculator",
    "start": "1613460",
    "end": "1618470"
  },
  {
    "text": "and I programmed\nit to do something, that might take a lot longer to\nsolve a problem than if I asked",
    "start": "1618470",
    "end": "1628500"
  },
  {
    "text": "IBM's research computer to\nsolve the same problem using",
    "start": "1628500",
    "end": "1634230"
  },
  {
    "text": "the same algorithm,\neven with the same code, because its underlying\noperations are much faster.",
    "start": "1634230",
    "end": "1641700"
  },
  {
    "text": "How it runs is much faster. So I don't want to\ncount how long it would take on a real machine.",
    "start": "1641700",
    "end": "1647980"
  },
  {
    "text": "I want to abstract the\ntime it takes the machine to do stuff out of the picture. What I want to say\nis, let's assume",
    "start": "1647980",
    "end": "1655769"
  },
  {
    "text": "that each kind of fundamental\noperation that the computer can do takes some fixed\namount of time.",
    "start": "1655770",
    "end": "1662970"
  },
  {
    "text": "How many of those kinds\nof fixed operations does the algorithm\nneed to perform to be",
    "start": "1662970",
    "end": "1668760"
  },
  {
    "text": "able to solve this problem? So here we don't measure time.",
    "start": "1668760",
    "end": "1677615"
  },
  {
    "text": " Instead, count\nfundamental operations.",
    "start": "1677615",
    "end": "1690130"
  },
  {
    "text": "OK? We'll get to what some of\nthose fundamental operations are in a second,\nbut the idea is we",
    "start": "1690130",
    "end": "1698429"
  },
  {
    "text": "want a measure of how well\nan algorithm performs, not necessarily\nan implementation",
    "start": "1698430",
    "end": "1704190"
  },
  {
    "text": "of that algorithm-- kind of an abstract notion of\nhow well this algorithm does.",
    "start": "1704190",
    "end": "1709590"
  },
  {
    "text": "And so what we're going to use\nto measure time or efficiency",
    "start": "1709590",
    "end": "1717179"
  },
  {
    "text": "is something called\nasymptotic analysis. Anyone here understand what\nasymptotic analysis is?",
    "start": "1717180",
    "end": "1723090"
  },
  {
    "text": "Probably, since it's in both of\nyour prerequisites, I think--",
    "start": "1723090",
    "end": "1728539"
  },
  {
    "text": "but we will go through\na formal definition of asymptotic notation\nin recitation tomorrow,",
    "start": "1728540",
    "end": "1736580"
  },
  {
    "text": "and you'll get a lot of\npractice in comparing functions using an asymptotic analysis.",
    "start": "1736580",
    "end": "1741860"
  },
  {
    "text": "But just to give you\nan idea, the idea",
    "start": "1741860",
    "end": "1747500"
  },
  {
    "text": "here is we don't measure time. We instead measure ops. And like your colleague\nover here was saying before,",
    "start": "1747500",
    "end": "1753500"
  },
  {
    "text": "we expect performance--",
    "start": "1753500",
    "end": "1761520"
  },
  {
    "text": "I'm going to use performance,\ninstead of time here-- we expect that to depend\non size of our input.",
    "start": "1761520",
    "end": "1775130"
  },
  {
    "text": "If we're trying to\nrun an algorithm to find a birthday\nin this section,",
    "start": "1775130",
    "end": "1782780"
  },
  {
    "text": "we expect the algorithm to run\nin a shorter amount of time than if I were to run the\nalgorithm on all of you.",
    "start": "1782780",
    "end": "1790730"
  },
  {
    "text": "So we expect it to\nperform differently, depending on the\nsize of the input, and how differently is\nhow we measure performance",
    "start": "1790730",
    "end": "1800182"
  },
  {
    "text": "relative to that input. Usually we use n as a variable\nfor what the size of our input",
    "start": "1800182",
    "end": "1805580"
  },
  {
    "text": "is, but that's not\nalways the case. So for example, if we have\nan array that I give you--",
    "start": "1805580",
    "end": "1811130"
  },
  {
    "text": "an n-by-n array, that--\nwe're going to say n, but what's the\nsize of our input?",
    "start": "1811130",
    "end": "1817450"
  },
  {
    "text": "How much information do\nI need to convey to you to give you that information?",
    "start": "1817450",
    "end": "1823110"
  },
  {
    "text": "It's n squared. So that's the size of our\ninput in that context. Or if I give you a graph, it's\nusually the number of vertices",
    "start": "1823110",
    "end": "1831670"
  },
  {
    "text": "plus the number of edges. That's how big--\nhow much space I would need to convey to you\nthat graph, that information.",
    "start": "1831670",
    "end": "1840460"
  },
  {
    "text": "We compare how fast an\nalgorithm is with respect to the size of the input.",
    "start": "1840460",
    "end": "1846570"
  },
  {
    "text": " We'll use the\nasymptotic notation.",
    "start": "1846570",
    "end": "1854440"
  },
  {
    "text": "We have big O notation, which\ncorresponds to upper bounds. ",
    "start": "1854440",
    "end": "1864560"
  },
  {
    "text": "We will have omega, which\ncorresponds to lower bounds. ",
    "start": "1864560",
    "end": "1872970"
  },
  {
    "text": "And we have theta, which\ncorresponds to both.",
    "start": "1872970",
    "end": "1878059"
  },
  {
    "text": "This thing is tight. It is bounded from\nabove and below by a function of this form. ",
    "start": "1878060",
    "end": "1902550"
  },
  {
    "text": "We have a couple\nof common functions that relate an\nalgorithm's input size",
    "start": "1902550",
    "end": "1908370"
  },
  {
    "text": "to its performance, some things\nthat we saw all the time. Can anyone give\nme some of those?",
    "start": "1908370",
    "end": "1914576"
  },
  {
    "text": "STUDENT: [INAUDIBLE] JASON KU: Say again. STUDENT: [INAUDIBLE] JASON KU: Sorry. Sorry. ",
    "start": "1914576",
    "end": "1922480"
  },
  {
    "text": "I'm not asking\nthis question well, but has anyone heard\nof a linear algorithm--",
    "start": "1922480",
    "end": "1929679"
  },
  {
    "text": "a linear time algorithm? That's basically saying that the\nrunning time of my algorithm--",
    "start": "1929680",
    "end": "1935680"
  },
  {
    "text": "performance of my algorithm\nis linear with respect to the size of my input. Right? Yeah?",
    "start": "1935680",
    "end": "1941312"
  },
  {
    "text": "STUDENT: [INAUDIBLE] JASON KU: Say again. STUDENT: Like putting\nsomething in a list-- JASON KU: Like putting\nsomething in a list--",
    "start": "1941312",
    "end": "1947230"
  },
  {
    "text": "OK. There's a lot\nbehind that question that we'll go into\nlater this week.",
    "start": "1947230",
    "end": "1954529"
  },
  {
    "text": "But that's an example of,\nif I do it in a silly way, I stick something in\nthe middle of a list and I have to move everything.",
    "start": "1954530",
    "end": "1961149"
  },
  {
    "text": "That's an operation that\ncould take linear time.  So linear time is\na type of function.",
    "start": "1961150",
    "end": "1968760"
  },
  {
    "text": "We've got a number of these. I'm going to start\nwith this one.",
    "start": "1968760",
    "end": "1973799"
  },
  {
    "text": "Does anyone know this one is? Constant time-- basically, no\nmatter how I change the input,",
    "start": "1973800",
    "end": "1980919"
  },
  {
    "text": "the amount of time\nthis running time-- the performance of my\nalgorithm takes, it",
    "start": "1980920",
    "end": "1985960"
  },
  {
    "text": "doesn't really depend on that. The next one up is\nsomething like this.",
    "start": "1985960",
    "end": "1992899"
  },
  {
    "text": "This is logarithmic time. We have data n, which\nis linear, and log n.",
    "start": "1992900",
    "end": "2005730"
  },
  {
    "text": "Sometimes we call\nthis log linear, but we usually just say n log n.",
    "start": "2005730",
    "end": "2011429"
  },
  {
    "text": "We have a quadratic\nrunning time. In general, if I have a\nconstant power up here,",
    "start": "2011430",
    "end": "2019650"
  },
  {
    "text": "it's n to the c\nfor some constant. This is what we call\npolynomial time,",
    "start": "2019650",
    "end": "2025170"
  },
  {
    "text": "as long as c is some constant. And this right here is\nwhat we mean by efficient,",
    "start": "2025170",
    "end": "2032630"
  },
  {
    "text": "in this class, usually. In other classes, when\nyou have big data sets, maybe this is efficient.",
    "start": "2032630",
    "end": "2039710"
  },
  {
    "text": "But in this class, generally\nwhat we mean is polynomial. And as you get down\nthis thing, things",
    "start": "2039710",
    "end": "2046880"
  },
  {
    "text": "are more and more efficient. There's one class I'm going to\ntalk to you about over here,",
    "start": "2046880",
    "end": "2053309"
  },
  {
    "text": "which is something like-- let's do this-- 2 to the\ntheta of n, exponential time.",
    "start": "2053310",
    "end": "2063590"
  },
  {
    "text": "This is some constant to\na function of n that's, let's say, super linear,\nthat's going to be pretty bad.",
    "start": "2063590",
    "end": "2074695"
  },
  {
    "text": "Why is it pretty bad? If I were to plot some of these\nthings as a function of n--",
    "start": "2074695",
    "end": "2082580"
  },
  {
    "text": "let's say I plot values of up\nto 1,000 on my n scale here.",
    "start": "2082580",
    "end": "2090969"
  },
  {
    "text": "What does constant look like? Maybe this is 1,000 up here.",
    "start": "2090969",
    "end": "2096809"
  },
  {
    "text": "What does a constant look like? Looks like a line-- it looks like a line\nover here somewhere.",
    "start": "2096810",
    "end": "2103050"
  },
  {
    "text": "It could be as high as\nI want, but eventually, anything that's an\nincreasing function",
    "start": "2103050",
    "end": "2108180"
  },
  {
    "text": "will get bigger than this. And on this scale,\nif I use log base",
    "start": "2108180",
    "end": "2113780"
  },
  {
    "text": "2 or some reasonable\nsmall constant, what does log look like?",
    "start": "2113780",
    "end": "2120012"
  },
  {
    "text": "Well, let's do an easier one. What does linear look like? Yeah, this-- that's what I\nsaw what a lot of you doing.",
    "start": "2120012",
    "end": "2129140"
  },
  {
    "text": "That's linear. That's the kind of base that\nwe're comparing everything against. What does log look like?",
    "start": "2129140",
    "end": "2136463"
  },
  {
    "text": "Like this-- OK,\nbut at this scale,",
    "start": "2136464",
    "end": "2143530"
  },
  {
    "text": "really, it's much closer\nto constant than linear. And actually, as n gets\nmuch, much larger this almost",
    "start": "2143530",
    "end": "2152065"
  },
  {
    "text": "looks like a straight line. It almost looks like a constant. So log is almost just\nas good as constant.",
    "start": "2152065",
    "end": "2160210"
  },
  {
    "text": "What does exponential look like? It's the exact\ninverse of this thing.",
    "start": "2160210",
    "end": "2167670"
  },
  {
    "text": "It's almost an exact\nstraight line going up. So this is crap.",
    "start": "2167670",
    "end": "2174570"
  },
  {
    "text": "This is really good. Almost anything in this region\nover here is better right.",
    "start": "2174570",
    "end": "2180600"
  },
  {
    "text": "At least I'm gaining something. ",
    "start": "2180600",
    "end": "2185880"
  },
  {
    "text": "I'm able to not go up too high\nrelative to my input size.",
    "start": "2185880",
    "end": "2191452"
  },
  {
    "text": "So quadratic-- I don't know--\nis something like this, and n log n is\nsomething like this. n log n, after a\nlong time, really",
    "start": "2191452",
    "end": "2197920"
  },
  {
    "text": "starts just looking linear\nwith a constant multiplied in front of it.",
    "start": "2197920",
    "end": "2203599"
  },
  {
    "text": "OK, so these things\ngood, that thing bad-- OK? That's what that's\ntrying to convey.",
    "start": "2203600",
    "end": "2210760"
  },
  {
    "text": "All right, so how do\nwe measure these things if I don't know what my\nfundamental operations are",
    "start": "2210760",
    "end": "2218119"
  },
  {
    "text": "that my computer can use? So we need to define some\nkind of model of computation",
    "start": "2218120",
    "end": "2232720"
  },
  {
    "text": "for what our computer is\nallowed to do in constant time, in a fixed amount of time. ",
    "start": "2232720",
    "end": "2241120"
  },
  {
    "text": "In general, what we use\nin this class is a machine called a word RAM, which we use\nfor its theoretical brevity.",
    "start": "2241120",
    "end": "2250720"
  },
  {
    "text": "Word RAM is kind\nof a loaded term.",
    "start": "2250720",
    "end": "2256197"
  },
  {
    "text": "What do these things mean?  Does someone know\nwhat RAM means?",
    "start": "2256197",
    "end": "2264544"
  },
  {
    "text": "STUDENT: [INAUDIBLE] JASON KU: Random access memory-- it means that I can randomly\naccess different places",
    "start": "2264544",
    "end": "2271810"
  },
  {
    "text": "in memory in constant time. That's the assumption\nof random access memory.",
    "start": "2271810",
    "end": "2277360"
  },
  {
    "text": "Basically, what our\nmodel of a computer is you have memory,\nwhich is essentially",
    "start": "2277360",
    "end": "2284349"
  },
  {
    "text": "just a string of bits. It's just a bunch\nof 1's and 0's.",
    "start": "2284350",
    "end": "2290630"
  },
  {
    "text": "And we have a computer, like\na CPU, which is really small.",
    "start": "2290630",
    "end": "2296930"
  },
  {
    "text": "It can basically hold a\nsmall amount of information, but it can change\nthat information.",
    "start": "2296930",
    "end": "2302690"
  },
  {
    "text": "It can operate on\nthat information, and it also has instructions\nto randomly access different places in memory,\nbring it into the CPU,",
    "start": "2302690",
    "end": "2309410"
  },
  {
    "text": "act on it, and read it back. Does that makes sense? But in general, we\ndon't have an address",
    "start": "2309410",
    "end": "2316670"
  },
  {
    "text": "for every bit in memory,\nevery 0 and 1 in memory. ",
    "start": "2316670",
    "end": "2324380"
  },
  {
    "text": "Does anyone know how modern\ncomputers are addressed? ",
    "start": "2324380",
    "end": "2331440"
  },
  {
    "text": "Yeah? STUDENT: [INAUDIBLE] JASON KU: OK, so we're\ngoing to get there.",
    "start": "2331440",
    "end": "2337690"
  },
  {
    "start": "2337000",
    "end": "2460000"
  },
  {
    "text": "Actually, what a modern\ncomputer is addressed in is bytes, collections of 8 bits.",
    "start": "2337690",
    "end": "2343640"
  },
  {
    "text": "So there's an address\nI have for every 8 bits in memory-- consecutive\n8 bits in memory.",
    "start": "2343640",
    "end": "2348710"
  },
  {
    "text": "And so if I want to pull\nsomething in into the CPU, I give it an address. It'll take some chunk, and bring\nit into the CPU, operate on it,",
    "start": "2348710",
    "end": "2357955"
  },
  {
    "text": "and spit it back. How big is that chunk?",
    "start": "2357955",
    "end": "2363240"
  },
  {
    "text": "This goes to the answer that\nyou were asking, which-- or saying, which is it's some\nsequence of some fixed number",
    "start": "2363240",
    "end": "2372240"
  },
  {
    "text": "of bits, which we call a word. A word is how big of\na chunk that the CPU",
    "start": "2372240",
    "end": "2380700"
  },
  {
    "text": "can take in from memory\nat a time and operate on. In your computers, how\nbig is that word size?",
    "start": "2380700",
    "end": "2388190"
  },
  {
    "text": "64 bits-- that's how much\nI can operate on at a time. When I was growing up,\nwhen I was your age,",
    "start": "2388190",
    "end": "2396380"
  },
  {
    "text": "my word size was 32 bits. And that actually was a\nproblem for my computer,",
    "start": "2396380",
    "end": "2403470"
  },
  {
    "text": "because in order for\nme to be able to read",
    "start": "2403470",
    "end": "2408930"
  },
  {
    "text": "to address in\nmemory, I need to be able to store that address\nin my CPU, in a word.",
    "start": "2408930",
    "end": "2416130"
  },
  {
    "text": " But if I have 32 bits, how\nmany different addresses can",
    "start": "2416130",
    "end": "2423330"
  },
  {
    "text": "I address? I have a limitation on the\nmemory addresses I can address, right?",
    "start": "2423330",
    "end": "2428880"
  },
  {
    "text": "So how many different\nmemory addresses can I address with 32 bits? 2 to the 32, right?",
    "start": "2428880",
    "end": "2434640"
  },
  {
    "text": "That makes sense. Well, if you do that calculation\nout, how big of a hard disk",
    "start": "2434640",
    "end": "2440460"
  },
  {
    "text": "can I have to access? It's about 4 gigabytes. So in my day, all\nthe hard drives",
    "start": "2440460",
    "end": "2447780"
  },
  {
    "text": "were limited to being\npartitioned-- even if you had a bigger than 4\ngigabyte hard drive,",
    "start": "2447780",
    "end": "2454530"
  },
  {
    "text": "I had to partition it into\nthese 4 gigabyte chunks, which the computer could\nthen read onto.",
    "start": "2454530",
    "end": "2462330"
  },
  {
    "start": "2460000",
    "end": "2497000"
  },
  {
    "text": "That was very\nlimiting, actually.  That's a restriction.",
    "start": "2462330",
    "end": "2469260"
  },
  {
    "text": "With 64 bits, what's\nmy limitation on memory",
    "start": "2469260",
    "end": "2474900"
  },
  {
    "text": "that I can address-- byte addressable? Turns out to be something\nlike 20 exabytes--",
    "start": "2474900",
    "end": "2483140"
  },
  {
    "text": "to put this in\ncontext, all data that Google stores on\ntheir servers, on all",
    "start": "2483140",
    "end": "2489170"
  },
  {
    "text": "drives throughout the world-- it's about 10. So we're not going to run out\nof this limitation very soon.",
    "start": "2489170",
    "end": "2498079"
  },
  {
    "start": "2497000",
    "end": "2548000"
  },
  {
    "text": "So what do we got\nwe've got a CPU. It can address memory. What are the operations\nI can do in this CPU?",
    "start": "2498080",
    "end": "2507930"
  },
  {
    "text": "Generally, I have\nbinary operations. I can compare to\nwords in memory,",
    "start": "2507930",
    "end": "2513970"
  },
  {
    "text": "and I can either do integer\narithmetic, logical operations,",
    "start": "2513970",
    "end": "2528700"
  },
  {
    "text": "bitwise operations-- but we're not going to use\nthose so much in this class.",
    "start": "2528700",
    "end": "2534950"
  },
  {
    "text": "And I can write and write\nfrom an address in memory, a word in constant time.",
    "start": "2534950",
    "end": "2542460"
  },
  {
    "text": "Those are the\noperations that I have available to me on most CPUs. Some CPUs give you a\nlittle bit more power,",
    "start": "2542460",
    "end": "2548920"
  },
  {
    "start": "2548000",
    "end": "2738000"
  },
  {
    "text": "but this is generally what we\nanalyze algorithms with respect to. OK? ",
    "start": "2548920",
    "end": "2556670"
  },
  {
    "text": "But you'll notice\nthat my CPU is only built to operate on a constant\namount of information at once--",
    "start": "2556670",
    "end": "2562220"
  },
  {
    "text": "generally, two words in memory. An operation produces a\nthird one, and I spit it out.",
    "start": "2562220",
    "end": "2571620"
  },
  {
    "text": "It takes a constant\namount of time to operate on a constant\namount of memory. If I want to operate on a\nlinear amount of memory--",
    "start": "2571620",
    "end": "2579119"
  },
  {
    "text": "n things-- how long\nis that going to take? If I just want to read\neverything in that thing,",
    "start": "2579120",
    "end": "2586030"
  },
  {
    "text": "it's going to take\nme linear time, because I have to read\nevery part of that thing.",
    "start": "2586030",
    "end": "2591549"
  },
  {
    "text": "OK, so in general,\nwhat we're going to do for the first half\nof this class mostly--",
    "start": "2591550",
    "end": "2598270"
  },
  {
    "text": "first eight lectures, anyway-- is talk about data structures. ",
    "start": "2598270",
    "end": "2607660"
  },
  {
    "text": "And it's going to be\nconcerned about not operating on constant amount of data at\na time, like our CPU is doing,",
    "start": "2607660",
    "end": "2616730"
  },
  {
    "text": "but instead, what it's\ngoing to do is operate on-- store a large amount of data\nand support different operations",
    "start": "2616730",
    "end": "2623780"
  },
  {
    "text": "on that data. So if I had a record\nthat I want to maintain to store those birthdays\nthat we had before,",
    "start": "2623780",
    "end": "2632510"
  },
  {
    "text": "I might use something\nlike a static array, which you guys maybe are not\nfamiliar with, if you",
    "start": "2632510",
    "end": "2640130"
  },
  {
    "text": "have been working in Python is\nyour only programming language. Python has a lot of really\ninteresting data structures,",
    "start": "2640130",
    "end": "2647000"
  },
  {
    "text": "like a list, and a\nset, and a dictionary, and all these kinds\nof things that are actually not in this model.",
    "start": "2647000",
    "end": "2653970"
  },
  {
    "text": "There's actually a lot of code\nbetween you and the computer, and it's not always\nclear how much time",
    "start": "2653970",
    "end": "2660619"
  },
  {
    "text": "that interface is taking. And so what we're going\nto do starting on Thursday",
    "start": "2660620",
    "end": "2666920"
  },
  {
    "text": "is talk about ways of\nstoring a non-constant amount",
    "start": "2666920",
    "end": "2672079"
  },
  {
    "text": "of information to\nmake operations on that information faster. So just before you go,\nI just want to give you",
    "start": "2672080",
    "end": "2679160"
  },
  {
    "text": "a quick overview of the class. To solve an algorithms\nclass-- an algorithm",
    "start": "2679160",
    "end": "2685118"
  },
  {
    "text": "problem in this\nclass, we essentially have two different strategies. We can either reduced to using\nthe solution to a problem we",
    "start": "2685118",
    "end": "2694040"
  },
  {
    "text": "know how to solve,\nor we can design our own algorithm,\nwhich is going to be recursive in nature.",
    "start": "2694040",
    "end": "2700422"
  },
  {
    "text": "We're going to either put\nstuff in the data structure and solve a sorting problem,\nor search in a graph.",
    "start": "2700422",
    "end": "2706829"
  },
  {
    "text": "And then, to design a\nrecursive algorithm, we have various\ndesign paradigms. This is all in your notes,\nbut this is essentially",
    "start": "2706830",
    "end": "2713895"
  },
  {
    "text": "the structure of the class. We're going to spend quiz 1,\nthe first eight lectures on data",
    "start": "2713895",
    "end": "2719220"
  },
  {
    "text": "structures and sorting. Second quiz will be on shortest\npaths, algorithms, and graphs,",
    "start": "2719220",
    "end": "2726090"
  },
  {
    "text": "and then the last one will\nbe on dynamic programming. OK, that's the end\nof the first lecture.",
    "start": "2726090",
    "end": "2731170"
  },
  {
    "text": "Thanks for coming. ",
    "start": "2731170",
    "end": "2738374"
  }
]