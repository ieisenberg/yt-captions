[
  {
    "text": " The following content is\nprovided under a Creative Commons license.",
    "start": "0",
    "end": "5310"
  },
  {
    "text": "Your support will help\nMIT OpenCourseWare continue to offer high quality\neducational resources for free.",
    "start": "5310",
    "end": "11610"
  },
  {
    "text": "To make a donation or to\nview additional materials from hundreds of MIT courses,\nvisit MIT OpenCourseWare",
    "start": "11610",
    "end": "17915"
  },
  {
    "text": "at ocw.mit.edu. ",
    "start": "17915",
    "end": "25270"
  },
  {
    "text": "CHARLES E. LEISERSON:\nOK, let's get started. On Thursday, we are\nreally privileged to have",
    "start": "25270",
    "end": "32990"
  },
  {
    "text": "Jon Bentley, who is one of\nthe masters of performance",
    "start": "32990",
    "end": "39740"
  },
  {
    "text": "engineering, come and\ngive us a guest lecture. In 1982, he wrote this\nwonderful little book",
    "start": "39740",
    "end": "47000"
  },
  {
    "text": "from which we\nadapted the Bentley rules that you folks have seen. And he's also famous for\nthings like kd-trees.",
    "start": "47000",
    "end": "54140"
  },
  {
    "text": "Who's seen kd-trees. trees? Yeah, so he invented kd-trees. And who's ever used the master\nmethod of recurrence solving?",
    "start": "54140",
    "end": "61700"
  },
  {
    "text": "He invented the master\nmethod of recurrence solving. And so he's just a\nwonderful, wonderful fellow,",
    "start": "61700",
    "end": "69290"
  },
  {
    "text": "with lots and lots of insights,\nand just a superior performance",
    "start": "69290",
    "end": "76310"
  },
  {
    "text": "engineer. And he's going to give a\nguest lecture on Thursday. And so I would encourage\nyou to bring your friends.",
    "start": "76310",
    "end": "85520"
  },
  {
    "text": "Bring friends maybe\nwho dropped the class,",
    "start": "85520",
    "end": "90799"
  },
  {
    "text": "and others who if any of\nyou have UROPS, other people in your research group, whether\nthey're graduate students,",
    "start": "90800",
    "end": "97560"
  },
  {
    "text": "they're all welcome to come. Because this is really\none of the opportunities you get to actually meet one\nof the legends of the field,",
    "start": "97560",
    "end": "107550"
  },
  {
    "text": "if you will. And you'll see he's\nvery approachable.",
    "start": "107550",
    "end": "114090"
  },
  {
    "text": "He's very approachable. So anyway, my advertisement\nfor Jon Bentley.",
    "start": "114090",
    "end": "120000"
  },
  {
    "text": "Good. So let's start. I want to talk about speculative\nparallelism for a little bit,",
    "start": "120000",
    "end": "125120"
  },
  {
    "text": "because that's kind of what you\nneed to make the code go fast. So if you look at\ncode like alpha beta,",
    "start": "125120",
    "end": "132140"
  },
  {
    "text": "it turns out that it's\ninherently serial. That is, if you try to\ndo things in parallel,",
    "start": "132140",
    "end": "142550"
  },
  {
    "text": "then you missed the cutoffs. And if you missed\nthe cutoffs, then you",
    "start": "142550",
    "end": "149842"
  },
  {
    "text": "start doing work that\nyou wouldn't necessarily need to do. And so the only way to sort\nof make this type of code run",
    "start": "149843",
    "end": "159500"
  },
  {
    "text": "fast is to use speculation. Which is to say,\nthat you're going",
    "start": "159500",
    "end": "164740"
  },
  {
    "text": "to guess that you can\ndo stuff in parallel and it'll be worthwhile, and\nthen, occasionally, you're",
    "start": "164740",
    "end": "171410"
  },
  {
    "text": "going to be wrong. But the trick is, well, how do\nyou minimize the wasted effort",
    "start": "171410",
    "end": "177020"
  },
  {
    "text": "when things go wrong? So let's just take a look\nat a very simple example",
    "start": "177020",
    "end": "182780"
  },
  {
    "text": "of speculative parallelism,\nwhich is thresholding a sum.",
    "start": "182780",
    "end": "190700"
  },
  {
    "text": "So here we have a little program\nthat is returning a boolean.",
    "start": "190700",
    "end": "196099"
  },
  {
    "text": "It takes as input\nan array of size n. So thresholding a\nsum-- we have an array",
    "start": "196100",
    "end": "202190"
  },
  {
    "text": "of length n and a limit. And these are all\nunsigned integers, say. And I start out the sum at\n0, and what I'm going to do",
    "start": "202190",
    "end": "211310"
  },
  {
    "text": "is add up all the\nelements of the array. And if it exceeds the limit,\nthen I'm going to return.",
    "start": "211310",
    "end": "221420"
  },
  {
    "text": "And so how might I optimize\nthis code a little bit?",
    "start": "221420",
    "end": "227640"
  },
  {
    "text": " Yeah. ",
    "start": "227640",
    "end": "235987"
  },
  {
    "text": "AUDIENCE: Split up [INAUDIBLE]\nfour processes, [INAUDIBLE]",
    "start": "235987",
    "end": "242370"
  },
  {
    "text": "split up an array [INAUDIBLE]. CHARLES E. LEISERSON: No,\nlet's say on processor.",
    "start": "242370",
    "end": "247610"
  },
  {
    "text": "On one processor,\nwhat might you do? AUDIENCE: In the\nmiddle of the loop, you can check [INAUDIBLE].",
    "start": "247610",
    "end": "252740"
  },
  {
    "text": "CHARLES E. LEISERSON:\nYeah, once you check so that once\nyou would exceed it, why keep adding\nthe other numbers?",
    "start": "252740",
    "end": "260898"
  },
  {
    "text": "So here's a code that\ndoes that-- quit early if the partial product\never exceeds the threshold. This isn't necessarily\nan optimization.",
    "start": "260899",
    "end": "267035"
  },
  {
    "text": "Because notice that now\nin the optimization, not only do I have a memory\nreference and an addition,",
    "start": "267035",
    "end": "274620"
  },
  {
    "text": "I also now have an\nunpredictable branch.",
    "start": "274620",
    "end": "284510"
  },
  {
    "text": "Actually, it's\npredictable branch-- predictable branch. But it's still one more\nstep, because it's always",
    "start": "284510",
    "end": "290673"
  },
  {
    "text": "going to predict that it's not\nexceeding until it actually does exceed. So that'll be\npretty predictable. ",
    "start": "290673",
    "end": "298430"
  },
  {
    "text": "But still, I've added\nsomething into the loop so that maybe slower. How might I mitigate\nthat problem?",
    "start": "298430",
    "end": "303540"
  },
  {
    "text": " So I don't want to add too\nmuch into the inner loop.",
    "start": "303540",
    "end": "313332"
  },
  {
    "text": "Yeah. AUDIENCE: It could\nhave an inner loop that goes [INAUDIBLE] them.",
    "start": "313332",
    "end": "320485"
  },
  {
    "text": "CHARLES E. LEISERSON: Yeah. So basically, I can do\nwhat's called strip mining. I replace the loop of n\niterations with a loop of,",
    "start": "320485",
    "end": "329990"
  },
  {
    "text": "let's say, n over\nfour iterations, with an inner loop\nof four iterations.",
    "start": "329990",
    "end": "336229"
  },
  {
    "text": "And every fourth\niteration, I check to see whether or\nnot I've exceeded,",
    "start": "336230",
    "end": "342410"
  },
  {
    "text": "so that the cost of the check\nis going to be relatively small at that point.",
    "start": "342410",
    "end": "349160"
  },
  {
    "text": "So are there ways of making\nthis sort of go fast. So now, we want to make\nthis operate in parallel.",
    "start": "349160",
    "end": "360910"
  },
  {
    "text": " And the problem when\nI operate in parallel",
    "start": "360910",
    "end": "367130"
  },
  {
    "text": "is that as I'm adding\nstuff up, I want to do it.",
    "start": "367130",
    "end": "373560"
  },
  {
    "text": "So I'm going to do this\nhere with a reducer. And so, basically,\nI'm going to add up",
    "start": "373560",
    "end": "381230"
  },
  {
    "text": "the values in the reducer. But now, I'd like\nto do the same thing of being able to quit early.",
    "start": "381230",
    "end": "387775"
  },
  {
    "text": "And so the question\nis, well, how can we parallelize a\nshort-circuited loop?",
    "start": "387775",
    "end": "393290"
  },
  {
    "text": " And so, the way I'm going\nto do this-- and this is sort of by hand\nhere, but it's",
    "start": "393290",
    "end": "400455"
  },
  {
    "text": "going to give you--\nso actually, as you know, underneath the\nloop is really a divide and conquer loop.",
    "start": "400455",
    "end": "405889"
  },
  {
    "text": "And so I could write\nit as a parallel loop.",
    "start": "405890",
    "end": "411950"
  },
  {
    "text": "And now, it becomes, I\nthink, a little bit clearer how I could, in\nthis case, what I'm",
    "start": "411950",
    "end": "417020"
  },
  {
    "text": "going to do is return\nthe value of the sum.",
    "start": "417020",
    "end": "422210"
  },
  {
    "text": "And now the question\nis, well, how can I quit early and save the\nwork if I exceed the threshold?",
    "start": "422210",
    "end": "427415"
  },
  {
    "text": " Understanding that\nwhen I'm executing",
    "start": "427415",
    "end": "432830"
  },
  {
    "text": "this and something\nlike Cilk, it's going to tend to\ngo down one path.",
    "start": "432830",
    "end": "438470"
  },
  {
    "text": "And often, it's going to\nbe a serial execution. So I'd like if it's possible.",
    "start": "438470",
    "end": "443750"
  },
  {
    "text": "So here's one way\nof doing it, which is that I add an abort\nflag to the code, which",
    "start": "443750",
    "end": "454580"
  },
  {
    "text": "is going to say whether\nI should keep going or whether I've actually\nexceeded at that point.",
    "start": "454580",
    "end": "460020"
  },
  {
    "text": "And so I'm going to\nuse that recursively. And now, I take a look, for\neach time through the loop--",
    "start": "460020",
    "end": "469430"
  },
  {
    "text": "or through the\ndivide and conquer-- to see whether the sum\nis greater than a limit.",
    "start": "469430",
    "end": "474560"
  },
  {
    "text": "And I haven't you know\nalready aborted the flag, then I set the abort\nflag to be true.",
    "start": "474560",
    "end": "483620"
  },
  {
    "text": "Why do I bother\ntesting the abort flag before I set it to true? ",
    "start": "483620",
    "end": "490620"
  },
  {
    "text": "So notice that setting\nthe abort flag is a race, isn't it-- a determinancy race.",
    "start": "490620",
    "end": "495710"
  },
  {
    "text": " Because-- great.",
    "start": "495710",
    "end": "502020"
  },
  {
    "text": "Thank you. It's because I have the\nstuff operating in parallel is all trying to set the abort\nflag whenever something aborts.",
    "start": "502020",
    "end": "509910"
  },
  {
    "text": "I can have two guys who\nare in parallel setting the abort flag. But if they're\nsetting it, they're setting it to the same value.",
    "start": "509910",
    "end": "516190"
  },
  {
    "text": "So it's a benign race, assuming\nyour memory model is such",
    "start": "516190",
    "end": "521250"
  },
  {
    "text": "that you can actually\nset the values. So what happens here when--",
    "start": "521250",
    "end": "528330"
  },
  {
    "text": "why do I why do you\nbother checking this? ",
    "start": "528330",
    "end": "538010"
  },
  {
    "text": "So what happens when\nseveral guys in parallel want to write to\nthe same variable? ",
    "start": "538010",
    "end": "546570"
  },
  {
    "text": "This is quiz 1 stuff. Yeah. AUDIENCE: Cache bouncing. CHARLES E. LEISERSON: Yeah. You can have it bouncing\nalong the cache.",
    "start": "546570",
    "end": "553110"
  },
  {
    "text": "It will serialize it. Because if they're\nall trying to write,",
    "start": "553110",
    "end": "559829"
  },
  {
    "text": "then they have to get\nexclusive access for it to write and modify it.",
    "start": "559830",
    "end": "565470"
  },
  {
    "text": "And so that happens-- boom,\nboom, boom-- one at a time. And so by checking it first,\nit can be in a shared state,",
    "start": "565470",
    "end": "572040"
  },
  {
    "text": "and then one guy\nclobbers it, and then it will update all\nthe other ones. So it makes it so\nwe don't continually",
    "start": "572040",
    "end": "578940"
  },
  {
    "text": "have a true sharing race. And then in checking\nto see if it exceeds,",
    "start": "578940",
    "end": "586710"
  },
  {
    "text": "we basically just check to see-- ",
    "start": "586710",
    "end": "594960"
  },
  {
    "text": "we basically call this function.\nwe set the abort flag to false, and then we return the\nsum of all the values.",
    "start": "594960",
    "end": "603300"
  },
  {
    "text": "And if it aborts, then\nit just returns early. So it doesn't have to keep\ngoing through the computation.",
    "start": "603300",
    "end": "611347"
  },
  {
    "text": "And, of course, once\nagain, you can coarsen the leaves and so forth.",
    "start": "611348",
    "end": "616500"
  },
  {
    "text": "So this is nondeterministic\ncode, which we should never write unless we have to.",
    "start": "616500",
    "end": "623399"
  },
  {
    "text": "Because that's the only\nway of getting performance. And you have to make sure you,\nof course, reset the abort flag",
    "start": "623400",
    "end": "630510"
  },
  {
    "text": "after the use.  And then, actually, do\nyou need a memory fence",
    "start": "630510",
    "end": "637380"
  },
  {
    "text": "here on the abort flag? Do you need to set--",
    "start": "637380",
    "end": "643020"
  },
  {
    "text": "where would you\nput an abort flag to make sure that\nthe value was--",
    "start": "643020",
    "end": "648300"
  },
  {
    "start": "648300",
    "end": "653480"
  },
  {
    "text": "yeah. AUDIENCE: Maybe do it by\nsetting default [INAUDIBLE].. CHARLES E. LEISERSON: Yeah.",
    "start": "653480",
    "end": "658570"
  },
  {
    "text": "So what would you have to do? AUDIENCE: Put a [INAUDIBLE].",
    "start": "658570",
    "end": "669058"
  },
  {
    "text": "CHARLES E. LEISERSON: OK. So indeed, it turns out you\ndon't need a memory fence here.",
    "start": "669058",
    "end": "678040"
  },
  {
    "text": "And the reason is because\nthe code is correct, whether it's the\ninitial value false or whether it's become true.",
    "start": "678040",
    "end": "685480"
  },
  {
    "text": "So it doesn't matter\nwhen it becomes true. And so there's an issue of,\nif you put in the fence,",
    "start": "685480",
    "end": "691620"
  },
  {
    "text": "then you know that it\nbecomes true earlier, rather than waiting\nfor the computation.",
    "start": "691620",
    "end": "698715"
  },
  {
    "text": "But that may actually\nslow things down, because memory\nfences are expensive. But because the\ntransition is always",
    "start": "698715",
    "end": "704339"
  },
  {
    "text": "from false to true\nduring the execution, you don't actually need\na memory fence there",
    "start": "704340",
    "end": "711780"
  },
  {
    "text": "in order to make sure that\nyou've got the correct value. Does that makes sense?",
    "start": "711780",
    "end": "717810"
  },
  {
    "text": "So you don't need\na memory fence. So that's a classic instance\nof speculative parallelism.",
    "start": "717810",
    "end": "726310"
  },
  {
    "text": "It occurs when\nour program spawns some parallel work that\nmight not be performed in a serial execution.",
    "start": "726310",
    "end": "733030"
  },
  {
    "text": "So you're performing\nit, anticipating that you're probably\ngoing to need to do it.",
    "start": "733030",
    "end": "738810"
  },
  {
    "text": "And then, typically,\nwhat you want to do is have some way of backing\nout if you discover that you",
    "start": "738810",
    "end": "747899"
  },
  {
    "text": "didn't need to do it that way. Have some way of making sure\nthat you don't do any more.",
    "start": "747900",
    "end": "753330"
  },
  {
    "text": "So basic rule of speculation\nis, don't spawn speculative work",
    "start": "753330",
    "end": "760570"
  },
  {
    "text": "unless there's little other\nopportunity for parallelism and there's a good\nchance it will be needed.",
    "start": "760570",
    "end": "767060"
  },
  {
    "text": "So one of the things I've seen,\nin research papers, no less, is people who say, oh, I'm going\nto have a calculation where",
    "start": "767060",
    "end": "779350"
  },
  {
    "text": "I'm trying to find, say, the\nminimum of a bunch of values. And so I'm going to spawn\noff n things, each of which",
    "start": "779350",
    "end": "790000"
  },
  {
    "text": "is looking for the minimum. As soon as the minimum\none comes back, I'm going to retract all\nthe other computations.",
    "start": "790000",
    "end": "797709"
  },
  {
    "text": "And I'm going to get super\nlinear speed up that way. Because in the\nserial execution, I",
    "start": "797710",
    "end": "804220"
  },
  {
    "text": "might have done the\nlonger one first. And maybe the minimum is not\nthe first one or whatever.",
    "start": "804220",
    "end": "811630"
  },
  {
    "text": "And so they claim\nsuper linear speedup by doing speculative\nparallelism. But that's not really\na good example,",
    "start": "811630",
    "end": "821560"
  },
  {
    "text": "because there was a\nbetter serial code. If that was really a\ngood way of doing it, they should have\nbeen doing what's",
    "start": "821560",
    "end": "827950"
  },
  {
    "text": "called dovetailing,\nwhich is doing a little bit of\nthis computation, a little bit of this,\na little bit of this,",
    "start": "827950",
    "end": "833230"
  },
  {
    "text": "a little bit of this, et\ncetera, and then going back. That would have been a better\nalgorithm for which you",
    "start": "833230",
    "end": "838840"
  },
  {
    "text": "would then use it. And the risk they have is\nthat they're spawning off n things, of which most\nof them may not be needed,",
    "start": "838840",
    "end": "846709"
  },
  {
    "text": "and now they don't\nget any speed up, even though they've just\nused a lot more work.",
    "start": "846710",
    "end": "852310"
  },
  {
    "text": "And that often is a bad choice. So usually, you don't\nwant to speculative work",
    "start": "852310",
    "end": "858130"
  },
  {
    "text": "unless there's little\nother opportunity and there's a good\nchance it'll be needed. ",
    "start": "858130",
    "end": "865330"
  },
  {
    "text": "My experience is, what\nkind of chance do you need? You need to have\ncertainly less than--",
    "start": "865330",
    "end": "875690"
  },
  {
    "text": "for parallelism, if the chance\nthat you're going to need the work-- if you\nhave p processors,",
    "start": "875690",
    "end": "883210"
  },
  {
    "text": "if the chance that it could\nbe not needed is less than--",
    "start": "883210",
    "end": "889728"
  },
  {
    "text": "actually, I have a\ntheorem at the end which all which I've\nI'll refer you to, because it's a little\nbit hard to say,",
    "start": "889728",
    "end": "895420"
  },
  {
    "text": "because I didn't\nput on the slide. But there's a final\nslide for this, which gives a nice\nlittle theorem about when",
    "start": "895420",
    "end": "901900"
  },
  {
    "text": "you should do this. So now, let's talk about\nparallel alpha-beta search, because that's\nkind of what you're",
    "start": "901900",
    "end": "907427"
  },
  {
    "text": "doing with your principal\nvariation search. ",
    "start": "907427",
    "end": "913839"
  },
  {
    "text": "So if you remember the analysis\ndone by Knuth and Morris,",
    "start": "913840",
    "end": "921700"
  },
  {
    "text": "they basically showed\nthat for a game tree with the branching\nfactor b and depth d,",
    "start": "921700",
    "end": "927390"
  },
  {
    "text": "and alpha-beta search\nwith moves searched in best-first order\nexamines it exactly",
    "start": "927390",
    "end": "933220"
  },
  {
    "text": "b to the ceiling of d over\n2 plus b to the floor of d over 2 minus 1 nodes at ply d.",
    "start": "933220",
    "end": "940620"
  },
  {
    "text": "So that's basically square\nrooting the amount of work",
    "start": "940620",
    "end": "948760"
  },
  {
    "text": "that you would need if\nyou did a full depth ply. That's with alpha-beta.",
    "start": "948760",
    "end": "954339"
  },
  {
    "text": "So naive algorithm looks at\nb to the d nodes at depth d.",
    "start": "954340",
    "end": "960130"
  },
  {
    "text": "And so for the same\nwork, the search depth has effectively doubled, or\nthe work is square rooted.",
    "start": "960130",
    "end": "965710"
  },
  {
    "text": "So that we solved last\ntime in Helen's lecture. ",
    "start": "965710",
    "end": "972760"
  },
  {
    "text": "So the key optimization here\nis pruning the game tree. And as I mentioned at\nthe beginning of this,",
    "start": "972760",
    "end": "981100"
  },
  {
    "text": "when you prune the\ngame tree, you've got what's effectively\na serial thing. And if you let\nsomething go ahead,",
    "start": "981100",
    "end": "987100"
  },
  {
    "text": "you may be working on\nsomething that would be pruned. So then how does the parallelism\nreally help you there?",
    "start": "987100",
    "end": "992470"
  },
  {
    "text": "You're just wasting processors\nthat could be better spent perhaps elsewhere. Except, where else\ncan you spend it?",
    "start": "992470",
    "end": "997880"
  },
  {
    "text": "Because there's no other\nparallelism in the code. So we want to find\nsome solution. ",
    "start": "997880",
    "end": "1005010"
  },
  {
    "text": "So the solution\ncomes from an idea",
    "start": "1005010",
    "end": "1010410"
  },
  {
    "text": "from a very nice paper\nby Burkhard Monien and some of his\nstudents in Germany.",
    "start": "1010410",
    "end": "1018660"
  },
  {
    "text": "And they made the observation\nthat in a best-ordered tree, the degree of every node\nis either 1 or maximal.",
    "start": "1018660",
    "end": "1027209"
  },
  {
    "text": "This is not their\nobservation, this is actually the observation\nin the Knuth paper.",
    "start": "1027210",
    "end": "1036179"
  },
  {
    "text": "So when you have a\nbest-ordered tree, if you can get all the moves\nordered in their true order,",
    "start": "1036180",
    "end": "1042959"
  },
  {
    "text": "then it turns out\nthat either you're exploring all the children\nor you are refuting something",
    "start": "1042960",
    "end": "1053160"
  },
  {
    "text": "and you get a cutoff\nfrom the very first one that you look at.",
    "start": "1053160",
    "end": "1059820"
  },
  {
    "text": "And so in this case, for\nexample, it turns out, on the principal variation,\nthose are all full-width--",
    "start": "1059820",
    "end": "1067960"
  },
  {
    "text": "sorry, you have to\nexplore all the children. And then from there\non it alternates.",
    "start": "1067960",
    "end": "1074010"
  },
  {
    "text": "One level, you have\njust a single child that needs to be explored. And when you explore it,\nif it's best-ordered,",
    "start": "1074010",
    "end": "1081030"
  },
  {
    "text": "you will get a beta\ncutoff for the others. And then it alternates,\nand then it's full-width.",
    "start": "1081030",
    "end": "1087400"
  },
  {
    "text": "And so their idea\nwas to say, well, if the first child fails\nto generate a beta cutoff,",
    "start": "1087400",
    "end": "1094530"
  },
  {
    "text": "speculate that in fact\nyou have the best one, and the remaining children\ncan be searched in parallel",
    "start": "1094530",
    "end": "1100440"
  },
  {
    "text": "without wasting any work. So if it fails,\nyou're going to say, oh, I'm going to\nspeculate that this",
    "start": "1100440",
    "end": "1106710"
  },
  {
    "text": "is in fact a full-width thing. Now, in practice,\nyou don't necessarily get things\nbest-ordered, but there",
    "start": "1106710",
    "end": "1112980"
  },
  {
    "text": "are a bunch of heuristics\nin the code we've given you in chess code to make it so\nthat you tend to do things",
    "start": "1112980",
    "end": "1119430"
  },
  {
    "text": "in the proper order. The most important of those is,\nif you've seen the movie before",
    "start": "1119430",
    "end": "1127049"
  },
  {
    "text": "and it's in the\ntransposition table, you use the move that\nyou've seen before, even if it's to a shallower depth.",
    "start": "1127050",
    "end": "1133350"
  },
  {
    "text": "You guess that that's going\nto be their best move still, even if you search deeper. And that's pretty good.",
    "start": "1133350",
    "end": "1139020"
  },
  {
    "text": "And so they call that the young\nsiblings weight algorithm. They actually called it\nthe young brothers weight,",
    "start": "1139020",
    "end": "1145290"
  },
  {
    "text": "but in the modern era, we\ncall it young siblings weight.",
    "start": "1145290",
    "end": "1151100"
  },
  {
    "text": "And we abort subcomputations\nthat proved to be unnecessary.",
    "start": "1151100",
    "end": "1157495"
  },
  {
    "text": "So you're going to\nstart out searching, but then you want\nto get rid of things that you discover, oops, I did\nget a cutoff from searching",
    "start": "1157495",
    "end": "1166448"
  },
  {
    "text": "from one of these things. I don't need to do this. Let's not have it keep\nspawning and generating",
    "start": "1166448",
    "end": "1172570"
  },
  {
    "text": "work and some other\nthing, let's abort it. And here's the idea for\nthe abort mechanism.",
    "start": "1172570",
    "end": "1178950"
  },
  {
    "text": "So what you do is-- the abort can occur\nat any given node.",
    "start": "1178950",
    "end": "1184970"
  },
  {
    "text": "You get a beta cutoff-- you want to abort all the\nchildren that wouldn't have been searched anyway.",
    "start": "1184970",
    "end": "1190559"
  },
  {
    "text": "But they may have\nalready been spawned off. So they have a record in\neach node that tells you",
    "start": "1190560",
    "end": "1197730"
  },
  {
    "text": "whether or not you've aborted. And what you do is you just\nsimply climb up the tree",
    "start": "1197730",
    "end": "1205910"
  },
  {
    "text": "to see, periodically,\nwhether or not you have an ancestor\nwho is aborted.",
    "start": "1205910",
    "end": "1211845"
  },
  {
    "text": "If you have an ancestor\nthat's aborted, it says I'm aborting\nthe side computations,",
    "start": "1211845",
    "end": "1219890"
  },
  {
    "text": "then you say, oh, I'm done,\nand I just have to return. And so you check that\non a regular basis.",
    "start": "1219890",
    "end": "1226445"
  },
  {
    "text": " So do people follow\nwhat that mechanism is?",
    "start": "1226445",
    "end": "1232580"
  },
  {
    "text": "And so, that's\nbasically what you're going to be implementing\nfor the parallelization,",
    "start": "1232580",
    "end": "1239480"
  },
  {
    "text": "is this thing of climbing up. You're going to guess, after\nyou've searched one child,",
    "start": "1239480",
    "end": "1245300"
  },
  {
    "text": "that it's good. Hey, actually some\npeople say, why don't you check two before you\nsearch the others,",
    "start": "1245300",
    "end": "1255740"
  },
  {
    "text": "so that you're even\nmore sure that you don't have a cutoff, because\nneither of the first two aborted.",
    "start": "1255740",
    "end": "1261380"
  },
  {
    "text": "Because, in practice,\nof course, the game tree is not best-ordered.",
    "start": "1261380",
    "end": "1266480"
  },
  {
    "text": "And so you're going\nto waste some work.  But the idea is, you're\ngoing to pull up the tree",
    "start": "1266480",
    "end": "1273255"
  },
  {
    "text": "to see whether or\nnot-- and, of course, you don't want to pull on\nevery evaluation that you do, you want to just\npull frequently.",
    "start": "1273255",
    "end": "1280200"
  },
  {
    "text": "So you may have a\ncounter in there that says, OK, every 10th time,\nI'm going to pull up the tree.",
    "start": "1280200",
    "end": "1286520"
  },
  {
    "text": "You put a voodoo\nparameter there that says how often it makes sense to\nactually check, because there's",
    "start": "1286520",
    "end": "1291530"
  },
  {
    "text": "cost to going up and\nchecking versus exploring more of the tree.",
    "start": "1291530",
    "end": "1296540"
  },
  {
    "text": " And so, I have an example here.",
    "start": "1296540",
    "end": "1302580"
  },
  {
    "text": "And I think this is where\nI'm going to cut this short. So there's an example, which\nI suggest you take a look at.",
    "start": "1302580",
    "end": "1310100"
  },
  {
    "text": "I want to, as I say, spend\ntime doing Q&A, and talking about the other\nparts of the program,",
    "start": "1310100",
    "end": "1315559"
  },
  {
    "text": "and give you folks some\ngood ideas for the thing. So this is sort of\nthe theory thing,",
    "start": "1315560",
    "end": "1321200"
  },
  {
    "text": "and then I have some slides\nthat will explain this with examples in more depth.",
    "start": "1321200",
    "end": "1327350"
  },
  {
    "text": "Because I don't\nexpect that everybody got every detail of this. So I have some examples\nand so forth in here",
    "start": "1327350",
    "end": "1335870"
  },
  {
    "text": "that I'm going to let you\nguys look at on your own. Now, if you parallelization\nthe spawning",
    "start": "1335870",
    "end": "1342860"
  },
  {
    "text": "off loop of the\nyounger siblings,",
    "start": "1342860",
    "end": "1349760"
  },
  {
    "text": "you will get a code with races. And the reason you get races\nis because there are several--",
    "start": "1349760",
    "end": "1355130"
  },
  {
    "text": "the are three data structures-- that the search is employing\nthat are kind of global.",
    "start": "1355130",
    "end": "1363169"
  },
  {
    "text": "The first is the\ntransposition table-- looking things up to see whether\nor not you've seen them before.",
    "start": "1363170",
    "end": "1369650"
  },
  {
    "text": "That's a major optimization. You don't want to get rid\nof the transposition table. And so you have a choice\nwith the transposition table.",
    "start": "1369650",
    "end": "1376220"
  },
  {
    "text": "What are you going\nto do with it? Are you going to lock it\nso that the races become--",
    "start": "1376220",
    "end": "1382480"
  },
  {
    "text": "at least your data-- race-free\nand updated atomically. Or you could replicate it. For example, you could have a\nworker local copy of the data",
    "start": "1382480",
    "end": "1392840"
  },
  {
    "text": "structure, and each worker\nthat is working on it",
    "start": "1392840",
    "end": "1399559"
  },
  {
    "text": "only accesses their\nown local copies. ",
    "start": "1399560",
    "end": "1407039"
  },
  {
    "text": "Or you can make a copy\nwhen things are stolen",
    "start": "1407040",
    "end": "1417440"
  },
  {
    "text": "or you can make just one\nwhere you maintain it locally. Or you can decide that, well,\neven if there's a race there,",
    "start": "1417440",
    "end": "1425360"
  },
  {
    "text": "the odds that it's going to\naffect how I play in the game are not that high, so\nI'll run with the race.",
    "start": "1425360",
    "end": "1433460"
  },
  {
    "text": "Because any other solution is\ngoing to be more expensive.",
    "start": "1433460",
    "end": "1440740"
  },
  {
    "text": "And then maybe you\nget funny answers. So one thing for that\nkind of data structure,",
    "start": "1440740",
    "end": "1451100"
  },
  {
    "text": "let me just recommend\nthat you have some way of turning\nof the data structure",
    "start": "1451100",
    "end": "1457085"
  },
  {
    "text": "so that you can actually\ndo the parallel search and get deterministic,\nrepeatable results.",
    "start": "1457085",
    "end": "1464960"
  },
  {
    "text": "So even though it\nmay be aborting and some things may\nnot be aborting, you want to have some\nway of executing.",
    "start": "1464960",
    "end": "1471362"
  },
  {
    "text": "And so, for example,\nyou want to be able to turn off even the\nspeculation in your code, so you can test all\nthe other things",
    "start": "1471362",
    "end": "1478190"
  },
  {
    "text": "in your code that don't\ndepend on the speculation. Because if you have something\nthat's not deterministic,",
    "start": "1478190",
    "end": "1485090"
  },
  {
    "text": "as I say, it's a\nnightmare to debug. So you're going to do\nthe evaluation function.",
    "start": "1485090",
    "end": "1492980"
  },
  {
    "text": "Hey, if you're testing it,\nturn off the speculation. You should be able to find\nout whether you've got bugs",
    "start": "1492980",
    "end": "1500570"
  },
  {
    "text": "in your evaluation function. There's no point in\ndiscovering you of a bug, and it's like, well, where\ndid it come from or whatever.",
    "start": "1500570",
    "end": "1506972"
  },
  {
    "text": "So you want to have\nthings you're turning out. And also, want to have\nways of turning off, for example, access to\nthe transposition table.",
    "start": "1506973",
    "end": "1512900"
  },
  {
    "text": "Yes, I'm going to\nspeculate, but no, I'm not going to access\nthe transposition table in parallel,\nbecause I may get",
    "start": "1512900",
    "end": "1520130"
  },
  {
    "text": "a race on the entry in\nthe transposition table. ",
    "start": "1520130",
    "end": "1525500"
  },
  {
    "text": "The hint that I will\ngive you for that is that in the code\nfor our program",
    "start": "1525500",
    "end": "1535370"
  },
  {
    "text": "that took second prize in\nthe world computer chess championship many years ago--",
    "start": "1535370",
    "end": "1542990"
  },
  {
    "text": "I think it was in 1999-- where we actually almost\nwon the tournament,",
    "start": "1542990",
    "end": "1555799"
  },
  {
    "text": "and we lost in the playoff. We would have won\nthe tournament,",
    "start": "1555800",
    "end": "1560900"
  },
  {
    "text": "except that our programmer\nsuggested a rule change at the beginning\nof the tournament that everybody agreed\nto, and then we",
    "start": "1560900",
    "end": "1567980"
  },
  {
    "text": "were on the short end of that. Otherwise, we would have\nbeen world champions. And that was the\nlast competition",
    "start": "1567980",
    "end": "1573730"
  },
  {
    "text": "against computers that Deep\nBlue, the IBM computer that beat Kasparov, the\nhuman [INAUDIBLE],,",
    "start": "1573730",
    "end": "1581560"
  },
  {
    "text": "just a few months later. They performed it. And they placed third\nin the tournament.",
    "start": "1581560",
    "end": "1586990"
  },
  {
    "text": "We tied for first. Our only loss was to Deep Blue.",
    "start": "1586990",
    "end": "1592420"
  },
  {
    "text": "And we were running on an\n1,824 node supercomputer at Sandia National Labs, a\ncomputer that probably is today",
    "start": "1592420",
    "end": "1601540"
  },
  {
    "text": "less powerful than this. ",
    "start": "1601540",
    "end": "1607060"
  },
  {
    "text": "But it was very big\ntype of computation. ",
    "start": "1607060",
    "end": "1614230"
  },
  {
    "text": "They basically said,\nif there's a tie, they're going to base who\nwins on strength of opponents.",
    "start": "1614230",
    "end": "1621190"
  },
  {
    "text": "So you take a look at\nyour opponent's records, and if you had\nstronger opponents, you'll win against somebody.",
    "start": "1621190",
    "end": "1626410"
  },
  {
    "text": "And we said, you\nknow, if there's a tie just between\ntwo programs, we should really have them\nface-off against each other",
    "start": "1626410",
    "end": "1635590"
  },
  {
    "text": "as an extra round. And everybody said,\nyeah, that's a good idea. And then, wouldn't\nyou know, at the end, we had the strongest\nopponents, and we",
    "start": "1635590",
    "end": "1645039"
  },
  {
    "text": "were tied with\nanother program called Fritz-- an excellent program. And we were outsearching\nFritz in the playoff game.",
    "start": "1645040",
    "end": "1654490"
  },
  {
    "text": "And then we saw a\nmove that afterwards, when we were able to do\noffline searches deeper,",
    "start": "1654490",
    "end": "1663070"
  },
  {
    "text": "we were outsearching\nthem by like 2 ply.  But then there's\na move that looks",
    "start": "1663070",
    "end": "1669820"
  },
  {
    "text": "like it's a good move for the\ndepth we were looking at it-- doesn't look like\na good move if you search much deeper, or frankly,\nif you search much shallower.",
    "start": "1669820",
    "end": "1678353"
  },
  {
    "text": "It was one of these\nthings where it just looked like a good\nmove for the ply we happened to be searching. Because there's no guarantee--",
    "start": "1678353",
    "end": "1684400"
  },
  {
    "text": "because you can't see\nthe end of the game-- that if you search\ndeeper you're actually going to beat somebody else.",
    "start": "1684400",
    "end": "1691270"
  },
  {
    "text": "Because there's the\nhorizon effect of you just simply can't see what's\ncoming up in the future.",
    "start": "1691270",
    "end": "1696540"
  },
  {
    "text": "You can only see\nsort of on average. So we made this bad move. We almost recovered. We almost tied.",
    "start": "1696540",
    "end": "1702460"
  },
  {
    "text": "Had we tied, we would\nhave been world champions, because we had the stronger-- we won the tiebreaker.",
    "start": "1702460",
    "end": "1707650"
  },
  {
    "text": "And we weren't able to\nrecover from the error. And so we took second prize.",
    "start": "1707650",
    "end": "1713620"
  },
  {
    "text": "It was like-- [LAUGHTER] Anyway, in that\nprogram, we decided",
    "start": "1713620",
    "end": "1720020"
  },
  {
    "text": "that we were just\ngoing to let there be a race on the\ntransposition table.",
    "start": "1720020",
    "end": "1725690"
  },
  {
    "text": "And the reason\nwas, we calculated, what are the odds\nthat the race actually",
    "start": "1725690",
    "end": "1733179"
  },
  {
    "text": "affects the value that you\nwould actually pick that value? And if it affected\nthe value, what",
    "start": "1733180",
    "end": "1738820"
  },
  {
    "text": "are the odds that it affects the\nmove that you're going to make? And if it affects the\nmove you're going to make, what are the odds\nit affects the game?",
    "start": "1738820",
    "end": "1746962"
  },
  {
    "text": "And if it affects the game,\nwhat are the odds that affects your result in the tournament? And when you've figured\nall these things out,",
    "start": "1746963",
    "end": "1753370"
  },
  {
    "text": "it was like, eh, we would\nslow the program down more by putting in, for\nexample, locking--",
    "start": "1753370",
    "end": "1760270"
  },
  {
    "text": " because that would slow\ndown every access-- than we would if we\njust ran the thing.",
    "start": "1760270",
    "end": "1768370"
  },
  {
    "text": "Because one of the things\nthat happens in alpha-beta is if you get an extreme value,\nusually those are lopped off.",
    "start": "1768370",
    "end": "1777100"
  },
  {
    "text": "Because if it's such\na good move for you, your opponent's not\ngoing to let you play it. So if you ended up with\na score that was extreme",
    "start": "1777100",
    "end": "1784690"
  },
  {
    "text": "because it was based on a\nvalue that you were racing on,",
    "start": "1784690",
    "end": "1790809"
  },
  {
    "text": "usually it's going to\nnot even propagate up to the root of the tree. So anyway, we just ran\nnaked, so to speak.",
    "start": "1790810",
    "end": "1798640"
  },
  {
    "text": " So there are two\nother data structures",
    "start": "1798640",
    "end": "1804440"
  },
  {
    "text": "you going to have to worry\nabout to make decision about. Another one is the\nkiller data structure.",
    "start": "1804440",
    "end": "1813750"
  },
  {
    "text": "So the killer data\nstructure is a heuristic that says, at a\ngiven depth of code,",
    "start": "1813750",
    "end": "1822600"
  },
  {
    "text": "you tend to see the same\nmoves that are good. And a move that is good for\none thing at a given depth,",
    "start": "1822600",
    "end": "1829660"
  },
  {
    "text": "tends to be good\nfor something else. So for example, it may be that\nyou play bishop takes queen.",
    "start": "1829660",
    "end": "1836820"
  },
  {
    "text": "So you've won the\nother players queen. And then their response is\nto do something irrelevant.",
    "start": "1836820",
    "end": "1848770"
  },
  {
    "text": "Well, now you mate them. Well, there's a\nlot of other moves",
    "start": "1848770",
    "end": "1855660"
  },
  {
    "text": "where you could make them on\nthat move, for which they're",
    "start": "1855660",
    "end": "1861060"
  },
  {
    "text": "playing things on the\nboard that are irrelevant. and. So the same type of move\ntends to be a killer--",
    "start": "1861060",
    "end": "1868020"
  },
  {
    "text": "always, you're able to, at\nthat depth in that position,",
    "start": "1868020",
    "end": "1876180"
  },
  {
    "text": "make the same move. And if they don't\naddress the issue, that's always a\ngood move to check.",
    "start": "1876180",
    "end": "1882480"
  },
  {
    "text": "And so that ends up being\nordered near the front. So the killer table\nkeeps track of that. And I think, in our code,\nwe have two killers.",
    "start": "1882480",
    "end": "1889710"
  },
  {
    "text": "Is that right, Helen? I think it's set up to allow you\nto do for up to four killers,",
    "start": "1889710",
    "end": "1894730"
  },
  {
    "text": "but we only do two in the\ncode that we gave you. And you can enable it and\nsee whether four killers--",
    "start": "1894730",
    "end": "1900180"
  },
  {
    "text": "but that's a shared\ndata structure. And so one of the\nquestions is, should you be keeping a local copy\nof that or should you",
    "start": "1900180",
    "end": "1907050"
  },
  {
    "text": "be you using a global one that\nthey all share and updating it?",
    "start": "1907050",
    "end": "1913200"
  },
  {
    "text": " The third one is\nthe best move table,",
    "start": "1913200",
    "end": "1920010"
  },
  {
    "text": "which is used to order\nall the low order thing. So the first thing\nthat's most important",
    "start": "1920010",
    "end": "1925350"
  },
  {
    "text": "is, did you get a move out\nof the transposition table? That tends to be quite accurate. And the second is, did you get\na move out of the killer table?",
    "start": "1925350",
    "end": "1936820"
  },
  {
    "text": "And finally, it's,\nstatistically, how good are these moves? Have you seen\nthese a lot before?",
    "start": "1936820",
    "end": "1943235"
  },
  {
    "text": "If you've seen\nthem a lot before, that's how the other\nmoves get ordered. And that's kept in\nthe best move table.",
    "start": "1943235",
    "end": "1948880"
  },
  {
    "text": "And once again,\nthat's a shared table. In the search, you're going\nto have to figure out, do you want to do a\nthread worker local copy,",
    "start": "1948880",
    "end": "1955289"
  },
  {
    "text": "or do you want to\nsynchronize it,",
    "start": "1955290",
    "end": "1960600"
  },
  {
    "text": "or how are you going to\nmanage that data structure? And the answer, I\nwould say, is different",
    "start": "1960600",
    "end": "1967350"
  },
  {
    "text": "compared to what you do\nwith a transposition table. The transposition\ntable, generally, it's",
    "start": "1967350",
    "end": "1972929"
  },
  {
    "text": "not worth locking or whatever. And it is good to share. Because if you have\nseen that move before,",
    "start": "1972930",
    "end": "1979019"
  },
  {
    "text": "that saved you a huge\namount of computation to be able to look\nit up and not do it.",
    "start": "1979020",
    "end": "1985290"
  },
  {
    "text": "So those are some of the tips\nfor parallelization, which we'll get to in the beta 2.",
    "start": "1985290",
    "end": "1990930"
  },
  {
    "text": "But now, I want to\ntalk about, for most of the rest of the time,\nsome of the other things that you can do with the\ncode you've currently got.",
    "start": "1990930",
    "end": "1999930"
  },
  {
    "text": "And let me take\nthese in some order,",
    "start": "1999930",
    "end": "2007010"
  },
  {
    "text": "and then we can ask questions. So opening-- who's contemplating\ndoing an opening book? Anybody?",
    "start": "2007010",
    "end": "2012680"
  },
  {
    "text": "For beta 1? Are you going to do an opening\nbook for beta 1 or beta 2? For beta 1, let me see.",
    "start": "2012680",
    "end": "2019669"
  },
  {
    "text": "OK. Beta 2? Who wants to do an\nopening book better 2? Final?",
    "start": "2019670",
    "end": "2025080"
  },
  {
    "text": "OK. Yeah, OK. So the idea here is to\nprecompute best moves",
    "start": "2025080",
    "end": "2031010"
  },
  {
    "text": "at the beginning of the game. So, well, we know what\nthe starting position is.",
    "start": "2031010",
    "end": "2037470"
  },
  {
    "text": "So why don't I spend $1,000\nor whatever on Amazon, and compute things\nto some ungodly ply,",
    "start": "2037470",
    "end": "2047870"
  },
  {
    "text": "and see what the best moves are\nat the beginning of the game, and put that into a book so\nI don't have to search those?",
    "start": "2047870",
    "end": "2053449"
  },
  {
    "text": " So that's the idea.",
    "start": "2053449",
    "end": "2060829"
  },
  {
    "text": "I think, to begin with,\nthere are lower hanging fruit than the opening book.",
    "start": "2060830",
    "end": "2068419"
  },
  {
    "text": "If you look at it, you're\ngoing to be an opening book, if you're lucky,\nfor six or eight moves.",
    "start": "2068420",
    "end": "2077299"
  },
  {
    "text": "And the games tend\nto last-- have you looked to see how\nlong games tend to last? ",
    "start": "2077300",
    "end": "2085010"
  },
  {
    "text": "What is it? AUDIENCE: [INAUDIBLE] CHARLES E. LEISERSON: No,\nmost games don't go 4,096. We don't let them\ngo that long anyway.",
    "start": "2085010",
    "end": "2092600"
  },
  {
    "text": "So did anybody take a\nlook, statistically, to see how long games are?",
    "start": "2092600",
    "end": "2098570"
  },
  {
    "text": "I think they tend to\nbe like 40 or 50 moves. ",
    "start": "2098570",
    "end": "2103810"
  },
  {
    "text": "I mean, this year is\ndifferent from other years, because we have different rules. But I think it's\nlike 40 or 50 moves.",
    "start": "2103810",
    "end": "2110570"
  },
  {
    "text": "So you're not spending-- you're doing something that will\nhelp you in 10% of the game.",
    "start": "2110570",
    "end": "2117360"
  },
  {
    "text": "Whereas there are\nother places you could do it which are going\nto help you in the whole game. ",
    "start": "2117360",
    "end": "2123110"
  },
  {
    "text": "Nevertheless, we've\nhad teams that did a great job on opening\nbooks and clobbered people by having a fantastic\nopening book.",
    "start": "2123110",
    "end": "2134480"
  },
  {
    "text": "It's actually cheaper to\nkeep separate opening books for each side than to keep one\nopening book for both sides.",
    "start": "2134480",
    "end": "2143240"
  },
  {
    "text": "And in this game, it's\nactually fairly easy to keep a symmetry\nthing and basically",
    "start": "2143240",
    "end": "2148760"
  },
  {
    "text": "have one opening book that\nworks for the side on move.",
    "start": "2148760",
    "end": "2155000"
  },
  {
    "text": "And that allows you to store. You don't have to store-- if I make a given move, if\nI have a given position,",
    "start": "2155000",
    "end": "2163640"
  },
  {
    "text": "I only need, in\nprinciple, to store one answer for that position.",
    "start": "2163640",
    "end": "2169760"
  },
  {
    "text": "Whereas, then, my opponent\nmay make any number of moves for which then I only\nneed to know one move-- what's",
    "start": "2169760",
    "end": "2176360"
  },
  {
    "text": "my best move in that position. So you can see that\nyou have, once again,",
    "start": "2176360",
    "end": "2181610"
  },
  {
    "text": "this property, that\non my move, I only need to have one move stored.",
    "start": "2181610",
    "end": "2186980"
  },
  {
    "text": "My opponent's moves, I need\nto have all the moves stored. And then my move, I\nhave one move store.",
    "start": "2186980",
    "end": "2192860"
  },
  {
    "text": "And that basically means\nthat you're effectively going twice the depth, as\nif you kept all my moves,",
    "start": "2192860",
    "end": "2199160"
  },
  {
    "text": "and then all of\nthe other opponents moves, and then all of those. Because when I do\nthat, it's like, well,",
    "start": "2199160",
    "end": "2204350"
  },
  {
    "text": "why do I need to\nknow the best move.",
    "start": "2204350",
    "end": "2209960"
  },
  {
    "text": "So it's better to\nkeep them separate. When you build the opening\nbook, you'll store a lot less.",
    "start": "2209960",
    "end": "2216073"
  },
  {
    "text": "You'll have a lot\nsmaller storage. You'll be able to store a lot\nmore moves if you do that.",
    "start": "2216073",
    "end": "2221450"
  },
  {
    "text": "But I would say, not\nnecessarily the first thing I would go to optimize.",
    "start": "2221450",
    "end": "2226580"
  },
  {
    "text": " But it's also the\ncase that this is",
    "start": "2226580",
    "end": "2232700"
  },
  {
    "text": "a place where one of the\nteams built a fabulous opening book one year. And one of the things\nabout the opening book",
    "start": "2232700",
    "end": "2241820"
  },
  {
    "text": "is it allows you also\nto sort of threshold and say, in a given\nmove, I don't just have to have one move.",
    "start": "2241820",
    "end": "2247520"
  },
  {
    "text": "Let me have three moves and\npick randomly among them, so that I'm not predictable.",
    "start": "2247520",
    "end": "2253910"
  },
  {
    "text": "What the team did that used\nthe opening book is they observed that everybody was\nsearching from the beginning.",
    "start": "2253910",
    "end": "2260420"
  },
  {
    "text": "So they were all finding\nexactly the same moves at the beginning of the game.",
    "start": "2260420",
    "end": "2265550"
  },
  {
    "text": "And so they knew\nexactly what the path was that all the other\nprograms were going to follow.",
    "start": "2265550",
    "end": "2271220"
  },
  {
    "text": "And so they could make the\nbest move on their move. But if you have something that's\ngot some randomness to it--",
    "start": "2271220",
    "end": "2277970"
  },
  {
    "text": "and there is a jitter in there. Who found the randomness-- the place we insert\nrandomness in the code?",
    "start": "2277970",
    "end": "2286040"
  },
  {
    "text": "So I think Zach had a\ncomment on Piazza about that. So there's a place\nin the code where",
    "start": "2286040",
    "end": "2292370"
  },
  {
    "text": "we dither the amount so that you\nwill get unpredictable results. And that way, you won't always\nplay the same move, just",
    "start": "2292370",
    "end": "2300050"
  },
  {
    "text": "by changing things. Because a hundredth of a\npawn value is not very big.",
    "start": "2300050",
    "end": "2306250"
  },
  {
    "text": "And who cares whether\nor not we have-- ",
    "start": "2306250",
    "end": "2313563"
  },
  {
    "text": "these heuristics\naren't measuring things so closely that we care\nabout a hundredth of a pawn.",
    "start": "2313563",
    "end": "2319220"
  },
  {
    "text": "So you can dither\nthings and have one move be better than\nanother and not really affect the quality of the playing.",
    "start": "2319220",
    "end": "2327500"
  },
  {
    "text": "So it is a good\nidea to do something to not be so predictable.",
    "start": "2327500",
    "end": "2332750"
  },
  {
    "text": "But to build a full\nopening book, that's a lot of work for beta 1.",
    "start": "2332750",
    "end": "2339680"
  },
  {
    "text": "For beta 2 and the final,\nyeah, you'll get to that point. ",
    "start": "2339680",
    "end": "2346550"
  },
  {
    "text": "The next thing is\niterative deepening. Do people understand how this\npart of the search code works?",
    "start": "2346550",
    "end": "2355440"
  },
  {
    "text": "Yeah? No? Let me go over it. So you can imagine, say, I'm\ngoing to search to depth d.",
    "start": "2355440",
    "end": "2362960"
  },
  {
    "text": "And in fact, instead of\njust searching depth d, we do a depth 1 search. If you look at the code there,\nthere's a depth 1 search.",
    "start": "2362960",
    "end": "2370940"
  },
  {
    "text": "And then we do a depth 2 search. Then we do a depth 3 search. Then we do a depth 4 search. And we keep doing that until\nour time control expires.",
    "start": "2370940",
    "end": "2379610"
  },
  {
    "text": "Why is that a good\nstrategy, generally?",
    "start": "2379610",
    "end": "2384670"
  },
  {
    "text": "Well, first of all, the\namount of work with each depth is growing exponentially.",
    "start": "2384670",
    "end": "2390529"
  },
  {
    "text": "So you're only\nspending, in principle, a constant factor more work\nthan you would if you searched",
    "start": "2390530",
    "end": "2396640"
  },
  {
    "text": "to depth d right off the bat. ",
    "start": "2396640",
    "end": "2402220"
  },
  {
    "text": "But the important\nthing is that you can keep move\nordering information",
    "start": "2402220",
    "end": "2407950"
  },
  {
    "text": "as you search deeper. And the move\nordering information, remember, we want our searchers\nto use best-first move ordering",
    "start": "2407950",
    "end": "2417369"
  },
  {
    "text": "so that we get all the\ncutoffs we can possibly get for pruning.",
    "start": "2417370",
    "end": "2422740"
  },
  {
    "text": "And so by searching it\neasier, actually you end up with better\nmove ordering.",
    "start": "2422740",
    "end": "2429010"
  },
  {
    "text": "Because when you find that same\nposition in the transposition table, you say, oh, well. I didn't search it as deep\nas I need to search it now.",
    "start": "2429010",
    "end": "2436240"
  },
  {
    "text": "So I can't use the value\nthat's in the transposition table for the position, because\nmaybe I've searched something",
    "start": "2436240",
    "end": "2443770"
  },
  {
    "text": "that's ply 8 in the\ntransposition table, but I've got it\nsearched to ply 9--",
    "start": "2443770",
    "end": "2449080"
  },
  {
    "text": "not good enough a search. But the value-- the move\nthat you've found at 8--",
    "start": "2449080",
    "end": "2454330"
  },
  {
    "text": "that's probably a\npretty good first move-- pretty good guess at best move.",
    "start": "2454330",
    "end": "2459340"
  },
  {
    "text": " So by doing iterative\ndeepening, you actually get the move ordering for all\nthose intermediate positions",
    "start": "2459340",
    "end": "2468430"
  },
  {
    "text": "really really, really strongly. Because that transposition table\nis the very best information",
    "start": "2468430",
    "end": "2475090"
  },
  {
    "text": "you've got for what\nthe your best move is. ",
    "start": "2475090",
    "end": "2482035"
  },
  {
    "text": "And also, as I mentioned,\nis a good mechanism for time control. Is that clear? So that's why you bother.",
    "start": "2482035",
    "end": "2487817"
  },
  {
    "text": "It's one of these things that\nlooks like it's redundant. Why are you\nsearching-- if you're going to search to depth d,\nwhy search to depth d minus 1?",
    "start": "2487817",
    "end": "2494430"
  },
  {
    "text": "You're going to that\nas part of depth d. Well, no, because you're\ngoing to get move ordering information that's going\nto be really valuable when",
    "start": "2494430",
    "end": "2501130"
  },
  {
    "text": "you search to depth d minus 1. So when you search\nto depth d, you've got much better pruning\nthan if you just",
    "start": "2501130",
    "end": "2506890"
  },
  {
    "text": "went straight to depth\nd and had no information about the move ordering.",
    "start": "2506890",
    "end": "2512023"
  },
  {
    "text": "Does that makes sense? ",
    "start": "2512023",
    "end": "2517869"
  },
  {
    "text": "Endgame database--\nso here's the idea. If there's a few enough\npieces on the board,",
    "start": "2517870",
    "end": "2522910"
  },
  {
    "text": "you can precompute the outcomes\nand store them in a database. ",
    "start": "2522910",
    "end": "2528309"
  },
  {
    "text": "So for example, the most\ncommon database to come up with is the king versus\nking database.",
    "start": "2528310",
    "end": "2534130"
  },
  {
    "text": " So if you do King\nversus King, that",
    "start": "2534130",
    "end": "2539680"
  },
  {
    "text": "means that it's not that you\nexpect the game will end up as king versus king,\nit's that you're",
    "start": "2539680",
    "end": "2544720"
  },
  {
    "text": "going to encounter\nthat in the search. It'd be nice to know who has the\nwin if you're King versus King.",
    "start": "2544720",
    "end": "2550869"
  },
  {
    "text": "Now, the code actually plays\noptimally for king versus king. The code we gave you will play\nthe king versus king perfectly",
    "start": "2550870",
    "end": "2564280"
  },
  {
    "text": "well. And, in fact, there's\njust two heuristics that are responsible for that. One is called k\naggressive heuristic,",
    "start": "2564280",
    "end": "2577660"
  },
  {
    "text": "which basically makes you\nmove towards your opponent. And the other one is\nthe k face heuristic,",
    "start": "2577660",
    "end": "2585290"
  },
  {
    "text": "which makes you point\ntowards your opponent. And those two things turn out\nto do a pretty good job of when",
    "start": "2585290",
    "end": "2592000"
  },
  {
    "text": "there's one there's\ntwo kings and playing, they go through\nthis little endgame. Did everybody do that\nby hand, by the way?",
    "start": "2592000",
    "end": "2597270"
  },
  {
    "text": "Did you play king versus king? A really good idea if you\nwant to understand the game",
    "start": "2597270",
    "end": "2602680"
  },
  {
    "text": "is just go and do a king versus\nking version of the game.",
    "start": "2602680",
    "end": "2608020"
  },
  {
    "text": "Get an eight by eight\nchessboard and just put down two tokens kings that have\norientations, and then just",
    "start": "2608020",
    "end": "2617710"
  },
  {
    "text": "you and a friend, just try to\nsee if one can mate the other. And you'll see that it goes\nthrough a very ritualistic type",
    "start": "2617710",
    "end": "2624610"
  },
  {
    "text": "of behavior which ends up with\none of the Kings being mated. So it's nice to know\nwhich one it's going",
    "start": "2624610",
    "end": "2630300"
  },
  {
    "text": "to be so if you encounter that. But here's the\nquestion, how many games actually make it to an endgame?",
    "start": "2630300",
    "end": "2637120"
  },
  {
    "text": "Once again, you have to look\nat what the odds are there. Because if games are\nending in the middle game,",
    "start": "2637120",
    "end": "2642789"
  },
  {
    "text": "there may not be\nany need to search all the way to the endgame. So that's something\nthat you need to weigh.",
    "start": "2642790",
    "end": "2651790"
  },
  {
    "text": "Now, if you do an\nendgame database, it doesn't suffice to just\nstore win, loss, or draw",
    "start": "2651790",
    "end": "2657040"
  },
  {
    "text": "for a position. And the reason is because\nyou can get into a situation",
    "start": "2657040",
    "end": "2662920"
  },
  {
    "text": "where you've got a\nwinning position, and then you say, OK, well,\nlet me move to another winning position, and another\nwinning position,",
    "start": "2662920",
    "end": "2669809"
  },
  {
    "text": "and another winning position. Oh, and I'm back at my\noriginal winning position.",
    "start": "2669810",
    "end": "2675350"
  },
  {
    "text": "And I just keep going\naround in a circle, always in a winning position,\nnever moving towards the win.",
    "start": "2675350",
    "end": "2682690"
  },
  {
    "text": "And that, of course,\nwill end up in a draw. So you need to know\nwhich direction do you",
    "start": "2682690",
    "end": "2687970"
  },
  {
    "text": "go for the winning position. So the typical thing\nyou do there is you keep the distance to\nmate to avoid cycling.",
    "start": "2687970",
    "end": "2695140"
  },
  {
    "text": "So instead of keeping\njust a boolean value, you say, here's my\ndistance to winning.",
    "start": "2695140",
    "end": "2703390"
  },
  {
    "text": "My distance to winning is 6. Now, when I'm\nsearching, I don't want to go a distance to\nwinning that 7 or 6,",
    "start": "2703390",
    "end": "2709942"
  },
  {
    "text": "I want to go to\ndistance to winning that's 5 when I make my move.",
    "start": "2709942",
    "end": "2715059"
  },
  {
    "text": "So it's very\nimportant to make sure that you maintain the distance\nin order to avoid cycling.",
    "start": "2715060",
    "end": "2721330"
  },
  {
    "text": " Quiescence search-- we\ntalk about quiescence,",
    "start": "2721330",
    "end": "2728349"
  },
  {
    "text": "which is to make sure that when\nyou're doing the evaluation you're not in the\nmiddle of an exchange.",
    "start": "2728350",
    "end": "2734799"
  },
  {
    "text": "So you zap their pawn, they're\ngoing to zap your pawn, or maybe even zap your King.",
    "start": "2734800",
    "end": "2742720"
  },
  {
    "text": "And you don't want evaluate\nin the middle there. And so the idea of\nquiescence is that when you're done with\nthe regular search,",
    "start": "2742720",
    "end": "2748660"
  },
  {
    "text": "you just play off moves\nthat involve captures, and then you evaluate\nthe position. ",
    "start": "2748660",
    "end": "2756970"
  },
  {
    "text": "So that's quieting the position. Make sense? ",
    "start": "2756970",
    "end": "2763720"
  },
  {
    "text": "Another heuristic there\nis null-move pruning. In most positions,\nthere's always something",
    "start": "2763720",
    "end": "2769690"
  },
  {
    "text": "better to do than nothing. So sitting still\nis usually not as good as actually making a move.",
    "start": "2769690",
    "end": "2777430"
  },
  {
    "text": "And so, the idea is, suppose\nthat I can forfeit my move,",
    "start": "2777430",
    "end": "2784809"
  },
  {
    "text": "and search a shallower\ndepth, and I still have the best position-- ",
    "start": "2784810",
    "end": "2792570"
  },
  {
    "text": "then I still am winning. And it generates a cutoff. Then why bother exploring\nany other moves?",
    "start": "2792570",
    "end": "2799270"
  },
  {
    "text": "I probably am in a really\ngood position here. OK And if I don't manage to get\na cutoff from the null-move,",
    "start": "2799270",
    "end": "2806680"
  },
  {
    "text": "then I do the full depth search.",
    "start": "2806680",
    "end": "2815319"
  },
  {
    "text": "So the place this is\ndangerous is in Zugzwang.",
    "start": "2815320",
    "end": "2820570"
  },
  {
    "text": "In chess, it's called\nZugzwang situations. So Zugzwang is a situation\nwhere everything is fine,",
    "start": "2820570",
    "end": "2827750"
  },
  {
    "text": "but if you have to\nmake a move, you lose. So usually, having the\nadvantage of a move,",
    "start": "2827750",
    "end": "2833589"
  },
  {
    "text": "that's called the initiative in\nchess, and that's a good thing. You want the initiative. You want to have the extra\nmove over your opponent.",
    "start": "2833590",
    "end": "2841690"
  },
  {
    "text": "But there are some situations\nwhere if you move, you lose. And so you want to\nmake sure you don't",
    "start": "2841690",
    "end": "2846910"
  },
  {
    "text": "have a Zugzwang situation. I don't actually know\nif there's a Zugzwang situation in Leiserchess.",
    "start": "2846910",
    "end": "2852549"
  },
  {
    "text": "So if somebody\ncomes up with one, I'd be interested to see\nthat, where if I had to move, I lose--",
    "start": "2852550",
    "end": "2858370"
  },
  {
    "text": "but if I sit there. So in chess, what they\ndo, is in the end game-- that's when Zugzwangs come up--",
    "start": "2858370",
    "end": "2863470"
  },
  {
    "text": "they turn off the\nnull-move pruning. ",
    "start": "2863470",
    "end": "2868840"
  },
  {
    "text": "So is this clear what\nnull-move does for you? What's going on there? I see some people\nwho are quizzical.",
    "start": "2868840",
    "end": "2874030"
  },
  {
    "text": "Anybody want to ask a question? I see some people with sort of\nquizzical looks on their faces.",
    "start": "2874030",
    "end": "2879760"
  },
  {
    "text": " So the idea is for\nnull-move, my position",
    "start": "2879760",
    "end": "2884800"
  },
  {
    "text": "is so good, that even if\nI do nothing, I still win.",
    "start": "2884800",
    "end": "2891202"
  },
  {
    "text": "So I don't want to search\nanymore in this part of it, because I get a\nbeta cutoff, you're not going to let\nme make this move--",
    "start": "2891202",
    "end": "2898040"
  },
  {
    "text": "the move that got me here. Yeah, question? AUDIENCE: That was it.",
    "start": "2898040",
    "end": "2903329"
  },
  {
    "text": "CHARLES E. LEISERSON: OK. That was it. OK, good. My move is so good, I can\ndo nothing, and I still win.",
    "start": "2903330",
    "end": "2910270"
  },
  {
    "text": "And so why bother? Let me verify that\nwithout necessarily doing as deep a search.",
    "start": "2910270",
    "end": "2915940"
  },
  {
    "text": "So null-move is\nfairly cheap to do, and it often results, in a\nlot of positions, for cutoff.",
    "start": "2915940",
    "end": "2924173"
  },
  {
    "text": "And if I don't get a\ncutoff, then I just do the normal search. ",
    "start": "2924173",
    "end": "2929632"
  },
  {
    "text": "This is a pretty complicated\npiece of code, isn't it?  Pretty complicated.",
    "start": "2929632",
    "end": "2935215"
  },
  {
    "text": " There are other situations. We mentioned killers.",
    "start": "2935215",
    "end": "2942610"
  },
  {
    "text": "There's also move extensions. So typical move extensions\nthat people look at",
    "start": "2942610",
    "end": "2948370"
  },
  {
    "text": "is you grant an\nextra ply in chess if the king is in check,\nor for certain captures,",
    "start": "2948370",
    "end": "2953980"
  },
  {
    "text": "or if you have a forced move. So suppose you have\na move and it's the only move you can make,\nthen don't count that as ply.",
    "start": "2953980",
    "end": "2964480"
  },
  {
    "text": "So you can search\ndeeper along lines where there are forced moves. That's what they do in chess. In Leiserchess, not quite\nso clear what you do--",
    "start": "2964480",
    "end": "2972970"
  },
  {
    "text": "which ones you would\ndo extensions for. ",
    "start": "2972970",
    "end": "2981380"
  },
  {
    "text": "Because it's rare\nthat you have just one move in Leiserchess,\ncompared to an in chess.",
    "start": "2981380",
    "end": "2987982"
  },
  {
    "text": "By force move, it's like,\nif you don't do this, you're going to get captured,\nor mated, or what have you.",
    "start": "2987982",
    "end": "2994940"
  },
  {
    "text": "So that may come\nup in Leiserchess. But anyway, it's\nsomething to think about.",
    "start": "2994940",
    "end": "3001760"
  },
  {
    "text": "So the transposition\ntable, we talk about this as a search\ntree, but it's really a dag, because I can get to the same\nposition by transposing moves.",
    "start": "3001760",
    "end": "3011080"
  },
  {
    "text": "This guy does a, this guy\ndoes b, this guy just c, this guy does d.",
    "start": "3011080",
    "end": "3017030"
  },
  {
    "text": "It's the same thing\nby doing a, d, c, b.",
    "start": "3017030",
    "end": "3023860"
  },
  {
    "text": "I transpose those\ntwo moves, and I get to exactly the same position. And so I'd like not to\nsearch that position again",
    "start": "3023860",
    "end": "3031109"
  },
  {
    "text": "if I've seen it. And that's what the\ntransposition does.",
    "start": "3031110",
    "end": "3036299"
  },
  {
    "text": "There's a quality score that is\nin the transposition table that tells you how good\nto move you've made.",
    "start": "3036300",
    "end": "3041609"
  },
  {
    "text": "And the quality is\nessentially the depth that you had to search\nin order to establish the value that stored in\nthe transposition table.",
    "start": "3041610",
    "end": "3049170"
  },
  {
    "text": "And so you don't want to use\nsomething of too low quality when you're searching. If you have to\nsearch the depth d,",
    "start": "3049170",
    "end": "3054600"
  },
  {
    "text": "something of quality d\nminus 1 is not good enough. Because, otherwise, you'll not\nbe searching the full tree.",
    "start": "3054600",
    "end": "3062550"
  },
  {
    "text": "But something typically\nthat is deeper-- if I'm looking at depth\nd and I find something",
    "start": "3062550",
    "end": "3069990"
  },
  {
    "text": "in the transposition table\nthat's d plus 1 or d plus 2, that's great to use.",
    "start": "3069990",
    "end": "3075200"
  },
  {
    "text": "That just gave me\nan even deeper view of what's behind that move.",
    "start": "3075200",
    "end": "3080977"
  },
  {
    "text": "And so if you look\nat the logic there, you'll see that\nthat's how they do it. It's very tricky. One of the things\nthat's tricky is",
    "start": "3080977",
    "end": "3087630"
  },
  {
    "text": "when you find a mate, how you\nstore that in the transposition table. And you'll see,\nthere's special code",
    "start": "3087630",
    "end": "3092830"
  },
  {
    "text": "for handling mate positions. And the reason is\nbecause what you're interested in doing\nwhen you find a mate is",
    "start": "3092830",
    "end": "3099059"
  },
  {
    "text": "knowing your distance to mate. But not from that position-- the distance to mate from\nthe root of your search.",
    "start": "3099060",
    "end": "3106710"
  },
  {
    "text": "So, for example, let's say\nthis is the root of my search,",
    "start": "3106710",
    "end": "3114900"
  },
  {
    "text": "and I search down\nto a given point. And now, I do a lookup in\nthe transposition table,",
    "start": "3114900",
    "end": "3120720"
  },
  {
    "text": "and I discover that\nthere's a mate in 5 here. ",
    "start": "3120720",
    "end": "3126269"
  },
  {
    "text": "And this, let's say I've\nsearched 9 ply or something.",
    "start": "3126270",
    "end": "3132120"
  },
  {
    "text": "Well, if I store that\nthis is a mate in 5, and I store the\nvalue for mate in 5,",
    "start": "3132120",
    "end": "3138000"
  },
  {
    "text": "then if it makes it\nup to the top here, it thinks there's a mate and 5.",
    "start": "3138000",
    "end": "3143250"
  },
  {
    "text": "But there isn't a mate in\n5, there's a mate in 14. ",
    "start": "3143250",
    "end": "3148350"
  },
  {
    "text": "So when you look it\nup and you discover there's a mate and\n5 in the table, you have to do a little bit of\na calculation to translate that",
    "start": "3148350",
    "end": "3154799"
  },
  {
    "text": "into being a mate\nin 14 as the value",
    "start": "3154800",
    "end": "3160140"
  },
  {
    "text": "that's going to be used here,\nrather than a mate in 5. Does that makes sense? So you'll see, that's the logic\nthat's in there for dealing",
    "start": "3160140",
    "end": "3167190"
  },
  {
    "text": "with mates. So a mate basically takes\na very large number-- way larger than all the\nmaterial on the board--",
    "start": "3167190",
    "end": "3174450"
  },
  {
    "text": "and then it subtracts\nwhat your number of ply is to get to mate.",
    "start": "3174450",
    "end": "3181619"
  },
  {
    "text": "So some big number-- I don't know, 32,000\nor something--",
    "start": "3181620",
    "end": "3187440"
  },
  {
    "text": "minus the depth to mate is\nhow you represent a mate.",
    "start": "3187440",
    "end": "3194849"
  },
  {
    "text": "So it's some very,\nvery big number and then minus the depth.",
    "start": "3194850",
    "end": "3200700"
  },
  {
    "text": "And that way, you can\nmake sure that you're going for a mate in 13\ninstead of a mate in 14,",
    "start": "3200700",
    "end": "3206040"
  },
  {
    "text": "for example, preferring that\nyou take the shorter path. Makes sense?",
    "start": "3206040",
    "end": "3212460"
  },
  {
    "text": "So that's one of the\nthings to look at in there. And there's also a\nlot of stuff in there.",
    "start": "3212460",
    "end": "3218970"
  },
  {
    "text": "The transposition table has-- we talked about caching--",
    "start": "3218970",
    "end": "3224010"
  },
  {
    "text": "it's actually a k-way\nassociative cache.",
    "start": "3224010",
    "end": "3229800"
  },
  {
    "text": "And so you can vary\nk to see what's the best choice of how many\nentries you should have.",
    "start": "3229800",
    "end": "3239040"
  },
  {
    "text": "The more entries\nyou have, the longer it'll take you to search them. On the other hand,\nthe more likely",
    "start": "3239040",
    "end": "3245400"
  },
  {
    "text": "it is that good move\nstay in the cache. So you can decide what's\nthe right trade-off there.",
    "start": "3245400",
    "end": "3253650"
  },
  {
    "text": "So there's a good tuning\noptimization there. ",
    "start": "3253650",
    "end": "3258870"
  },
  {
    "text": "Questions? Any questions about\ntransposition table? Transposition table is\na major optimization.",
    "start": "3258870",
    "end": "3266020"
  },
  {
    "text": "So Zobrist hashing--\nso most of these, Helen",
    "start": "3266020",
    "end": "3272540"
  },
  {
    "text": "talked about at some level. But I wanted to give a chance\nto have people ask questions. Nobody's asking questions.",
    "start": "3272540",
    "end": "3277940"
  },
  {
    "text": "I came here for Q&A.\nAll you're getting is A. [LAUGHTER]",
    "start": "3277940",
    "end": "3285740"
  },
  {
    "text": "So let me explain Zobrist\nhashing again a little bit. ",
    "start": "3285740",
    "end": "3292700"
  },
  {
    "text": "So Zobrist hashing--\nvery clever idea. So we have our board with\na bunch of pieces on it.",
    "start": "3292700",
    "end": "3306200"
  },
  {
    "text": " That's probably the wrong\nnumber of squares, right?",
    "start": "3306200",
    "end": "3311820"
  },
  {
    "text": "That's seven by six. OK, who cares. ",
    "start": "3311820",
    "end": "3318080"
  },
  {
    "text": "So the idea is that\nwhat I'm going to do is have a table\nof random numbers",
    "start": "3318080",
    "end": "3323286"
  },
  {
    "text": "that I'm going to\ncompute in advance. And this is going to be indexed\nby my row, my column, my piece",
    "start": "3323286",
    "end": "3333170"
  },
  {
    "text": "type, and my orientation. ",
    "start": "3333170",
    "end": "3342290"
  },
  {
    "text": "And every different combination\nof row, column, type, and orientation corresponds\nto a different random number",
    "start": "3342290",
    "end": "3348950"
  },
  {
    "text": "in the table. So we have some sort\nof random number there. ",
    "start": "3348950",
    "end": "3359750"
  },
  {
    "text": "And what my hash\nfunction is is it's the XOR of all of the\nvalues of all the pieces",
    "start": "3359750",
    "end": "3368240"
  },
  {
    "text": "that are on this table\nwith their orientations. OK so if I have a king\nhere, that's a white king--",
    "start": "3368240",
    "end": "3375920"
  },
  {
    "text": "I guess I need to\nknow not just what the type is, I also need to know\nwhether it's white or black--",
    "start": "3375920",
    "end": "3383450"
  },
  {
    "text": "so the side.  I think, actually, that\ngets encoded somehow.",
    "start": "3383450",
    "end": "3389480"
  },
  {
    "text": "But in any case, I\nthink maybe in the type we actually keep whether it's\na white pawn or black pawn.",
    "start": "3389480",
    "end": "3395390"
  },
  {
    "text": "Yeah, it's in the type, I\nthink, is the way we actually implemented that. So there's white king, black\nking, white pawn, black pawn,",
    "start": "3395390",
    "end": "3405560"
  },
  {
    "text": "or space. So if I have a king there, that\ncorresponds to a certain value.",
    "start": "3405560",
    "end": "3411410"
  },
  {
    "text": "If I end up with a pawn here-- let's say, a white pawn-- then that will be another\none, and I XOR those together.",
    "start": "3411410",
    "end": "3418730"
  },
  {
    "text": "And I take the\nblack king and I XOR his position is, and the\nblack pawn, XOR that in.",
    "start": "3418730",
    "end": "3429320"
  },
  {
    "text": "So I XOR all these four values. That's the hash\nfunction that I use to do things like look up things\nin the transposition table.",
    "start": "3429320",
    "end": "3437990"
  },
  {
    "text": "Now, if I had to\ncompute this every time I changed the position, that's\nif I have a lot of pieces--",
    "start": "3437990",
    "end": "3446220"
  },
  {
    "text": "how many pieces I've\ngot, 7, 8, 16 pieces?",
    "start": "3446220",
    "end": "3454670"
  },
  {
    "text": "Each side has seven\npawns and a King. So 16 pieces-- I have\nto do 16 XORs in order",
    "start": "3454670",
    "end": "3460670"
  },
  {
    "text": "to compute my hash function. So Zobrist hashing\nis really clever.",
    "start": "3460670",
    "end": "3465830"
  },
  {
    "text": "It takes advantage\nof that XOR trick that I taught you in the first-- no, it wasn't the first, it\nwas in the second lecture?",
    "start": "3465830",
    "end": "3475470"
  },
  {
    "text": "Yeah, the bit tricks lecture. And that is that XOR\nis its own inverse.",
    "start": "3475470",
    "end": "3483930"
  },
  {
    "text": "So if I want to\nremove a piece-- let's say I'm going to move this\npawn from here to here.",
    "start": "3483930",
    "end": "3491130"
  },
  {
    "text": "So I remove this piece. What do I do to my hash\nfunction to remove a piece?",
    "start": "3491130",
    "end": "3499289"
  },
  {
    "text": "I look up the value for\nthat pawn in the hash table and I XOR that into\nmy hash for the table.",
    "start": "3499290",
    "end": "3507510"
  },
  {
    "text": "And I now have a hash for\nthose three pieces left. Does that make sense?",
    "start": "3507510",
    "end": "3514370"
  },
  {
    "text": "So I have my hash\nfunction, which is a hash of the four things. I'm not sure you guys\ncan see very well there.",
    "start": "3514370",
    "end": "3520430"
  },
  {
    "text": "And I simply XOR it with\nthe hash of the pawn",
    "start": "3520430",
    "end": "3525650"
  },
  {
    "text": "that I removed in this case.",
    "start": "3525650",
    "end": "3531010"
  },
  {
    "text": "And now, I moved it to here. So what do I do? I look up that one and\nI XOR that value in here",
    "start": "3531010",
    "end": "3539738"
  },
  {
    "text": "for the new position-- ",
    "start": "3539738",
    "end": "3545190"
  },
  {
    "text": "the new pawn position-- and that gives me, now,\nthe hash for the new table",
    "start": "3545190",
    "end": "3553800"
  },
  {
    "text": "with the pawn in that position. So any move that I\nmake, I can basically update my hash function\nwith only two XORs.",
    "start": "3553800",
    "end": "3561030"
  },
  {
    "text": "And XORs are very fast. They're one instruction. And they can do lots\nof XORs and stuff.",
    "start": "3561030",
    "end": "3566690"
  },
  {
    "text": "So this is actually a very,\nvery cheap thing to do-- a very cheap thing. So that Zobrist hashing, that\nyou can keep these things up",
    "start": "3566690",
    "end": "3575920"
  },
  {
    "text": "to date. And that's something\nwe implemented for you. That's an optimization\nthat was a freebie.",
    "start": "3575920",
    "end": "3581250"
  },
  {
    "text": "We could have given you\nthe hash function like this and had you implement\nthat, but this",
    "start": "3581250",
    "end": "3587430"
  },
  {
    "text": "is one of the ones we gave you\nas a freebie for optimization. You're not all saying, thank you\nvery much, Professor Leiserson?",
    "start": "3587430",
    "end": "3594704"
  },
  {
    "text": "[LAUGHTER]  No, in some sense I took away\nan opportunity for optimization,",
    "start": "3594704",
    "end": "3601665"
  },
  {
    "text": "didn't I, there?  And so in the\ntransposition table,",
    "start": "3601665",
    "end": "3608400"
  },
  {
    "text": "there are records for the\nZobrist key, the score, the move, the quality,\nalso a bound type,",
    "start": "3608400",
    "end": "3614309"
  },
  {
    "text": "whether it's upper,\nlower, or exact. Because when I return\nsomething from alpha-beta,",
    "start": "3614310",
    "end": "3619380"
  },
  {
    "text": "I only know a bound on it, if\nit's greater than alpha or less than beta.",
    "start": "3619380",
    "end": "3625250"
  },
  {
    "text": "And in some sense, the age\nof how old is this move. Because as things\nget older, I also",
    "start": "3625250",
    "end": "3630360"
  },
  {
    "text": "want to age them\nout of the table. There are several\naging things there. And you'll see the best\nmove table also has",
    "start": "3630360",
    "end": "3636930"
  },
  {
    "text": "an aging process, whereas every\ntime it updates the values and gives a new value, it\nages all the other values",
    "start": "3636930",
    "end": "3644819"
  },
  {
    "text": "so that they gradually\ndisappear and aren't relevant.",
    "start": "3644820",
    "end": "3650460"
  },
  {
    "text": "One of the ones that\npeople get confused about is the Late Move Reductions--",
    "start": "3650460",
    "end": "3656540"
  },
  {
    "text": "so-called LMR. This is the situation where\nI'm going to do, let's say,",
    "start": "3656540",
    "end": "3663860"
  },
  {
    "text": "my parallel search\nof all my moves.",
    "start": "3663860",
    "end": "3669590"
  },
  {
    "text": "And the question is-- once again, you're trying\nto prune everything you can. And so the idea is, which\nare the moves that are more",
    "start": "3669590",
    "end": "3678230"
  },
  {
    "text": "important to search deeper? The ones near the beginning\nof your move list, if it's sorted in\nbest-first order?",
    "start": "3678230",
    "end": "3684380"
  },
  {
    "text": "Or the ones towards the\nend of your move list? ",
    "start": "3684380",
    "end": "3690890"
  },
  {
    "text": "So where is it most\nimportant to search deeply? For things that you\nthink are possibly",
    "start": "3690890",
    "end": "3697279"
  },
  {
    "text": "the best move or the ones that\nyou think are the worst moves? Yeah.",
    "start": "3697280",
    "end": "3702650"
  },
  {
    "text": "AUDIENCE: Search\nfor the best move. CHARLES E. LEISERSON:\nYeah, it makes sense to search the best moves, right?",
    "start": "3702650",
    "end": "3708080"
  },
  {
    "text": "So the idea is,\nwell, if something is way down on the move ordering\nlist, why search it as deeply?",
    "start": "3708080",
    "end": "3716720"
  },
  {
    "text": "It's probably not\nas good a move. And so, let me search\nit more shallowly? I probably don't lose\nmuch of an opportunity",
    "start": "3716720",
    "end": "3725069"
  },
  {
    "text": "to discover that that's\nactually is indeed a bad move.",
    "start": "3725070",
    "end": "3731670"
  },
  {
    "text": "There's a reason that got\nit ordered down there. And so that's a\nlate move reduction.",
    "start": "3731670",
    "end": "3737970"
  },
  {
    "text": "So with a good move\nordering, a beta cutoff will either occur right\naway or not at all. So you search the first\nfew moves normally,",
    "start": "3737970",
    "end": "3744750"
  },
  {
    "text": "and then you start reducing\nthe depth for moves. I believe, in our code,\nwe have two numbers where",
    "start": "3744750",
    "end": "3749940"
  },
  {
    "text": "we reduce by depth 1 after\na certain number of moves and reduce by depth 2 after a\ncertain number of other moves.",
    "start": "3749940",
    "end": "3756780"
  },
  {
    "text": "Those are things\nthat you can tune. I wouldn't tune them very much. I don't think. ",
    "start": "3756780",
    "end": "3763312"
  },
  {
    "text": "And once again, I could\nprobably be wrong here, and someone will discover,\noh, if you tune it like this,",
    "start": "3763312",
    "end": "3768810"
  },
  {
    "text": "it's way better. But that's the idea of\nthe late move reductions. ",
    "start": "3768810",
    "end": "3776370"
  },
  {
    "text": "Probably one of the most\nimportant things to think about is the representation\nof the board.",
    "start": "3776370",
    "end": "3783110"
  },
  {
    "text": "Right now, we represent\nthe board as it is. That's a terrible\nrepresentation.",
    "start": "3783110",
    "end": "3788460"
  },
  {
    "text": "It's very time-consuming. There's sort of two\nmajor ways you can do it.",
    "start": "3788460",
    "end": "3795990"
  },
  {
    "text": "Oh, I didn't put\nthe other one here. Well, anyway, one of\nthem is bitboards. Here, you use a 64-bit to\nrepresent, for example,",
    "start": "3795990",
    "end": "3802830"
  },
  {
    "text": "where all the pawns are on\nthe 64 squares of the board.",
    "start": "3802830",
    "end": "3808880"
  },
  {
    "text": "And then you can use\nPOPCOUNT and other bit tricks to do move generation and to\nimplement other chess concepts.",
    "start": "3808880",
    "end": "3815130"
  },
  {
    "text": "So if you're looking\nto see what are the possible places a pawn\ncan move, and you want to say,",
    "start": "3815130",
    "end": "3821130"
  },
  {
    "text": "can they move right? And let's say it's stored\nin row major order, you can just do a\nright shift by 1,",
    "start": "3821130",
    "end": "3826700"
  },
  {
    "text": "and that tells you\nwhere all the places that those pawns could move. And now, you can just\npick them off one bit",
    "start": "3826700",
    "end": "3833280"
  },
  {
    "text": "at a time to generate\nyour move list. And then you can do it that way.",
    "start": "3833280",
    "end": "3840042"
  },
  {
    "text": "If you're going to\nmove up a thing, well, then you're actually\ndoing a shift by or down. You're doing shift by how much?",
    "start": "3840042",
    "end": "3846360"
  },
  {
    "text": " By eight, to move up\nor down, if you're",
    "start": "3846360",
    "end": "3853180"
  },
  {
    "text": "storing things in row major. That makes sense, right? So if it's 8 by 8, and you're\nkeeping a bit for each thing,",
    "start": "3853180",
    "end": "3864630"
  },
  {
    "text": "then if I want to generate\nwhere is this one? If I shift this whole thing\nstored in row major order",
    "start": "3864630",
    "end": "3870849"
  },
  {
    "text": "by 8, if I shift it right,\nit basically puts it there.",
    "start": "3870850",
    "end": "3876370"
  },
  {
    "text": "So I'm moving by 7, 8,\nand 9, that gives you--",
    "start": "3876370",
    "end": "3881530"
  },
  {
    "text": "and then shifting\nit by 1 or minus 1 gives you this, or left by 1.",
    "start": "3881530",
    "end": "3887170"
  },
  {
    "text": "And then, similarly,\nyou can do by shifting by 7, 8, or 9 that way.",
    "start": "3887170",
    "end": "3892290"
  },
  {
    "text": "And I can generate all\nthe possible moves. So that's one way of doing move\ngeneration is using bitboard.",
    "start": "3892290",
    "end": "3898240"
  },
  {
    "text": "And there are a lot of things,\nfor example, that you can do with bitboards in parallel. Because you can say, did\nI make a capture here?",
    "start": "3898240",
    "end": "3905090"
  },
  {
    "text": "Or let me use a bitboard to\nrepresent where the laser goes. Did I make a move that is going\nto affect the path of laser?",
    "start": "3905090",
    "end": "3915310"
  },
  {
    "start": "3915310",
    "end": "3922010"
  },
  {
    "text": "Because one of the\nmajor optimizations you can do is in the evaluations\nin dealing with the laser.",
    "start": "3922010",
    "end": "3930037"
  },
  {
    "text": "Because you're\nspending a lot of time stroking out laser positions. What's the point of doing that--",
    "start": "3930038",
    "end": "3935510"
  },
  {
    "text": "if you made a move\nof something and it didn't affect where the laser\ngoes why bother doing it out?",
    "start": "3935510",
    "end": "3943070"
  },
  {
    "text": "You can just cache what\nthe value of the laser is. And there are a lot more good\nstuff on the chess programming",
    "start": "3943070",
    "end": "3950960"
  },
  {
    "text": "wiki. So, yeah, question? AUDIENCE: How do you\n[INAUDIBLE] a right shift when",
    "start": "3950960",
    "end": "3957320"
  },
  {
    "text": "the [INAUDIBLE]\nif the shift by 8, and it's clear when it\nfalls off [INAUDIBLE].. CHARLES E. LEISERSON: Yeah. You got be careful there, right?",
    "start": "3957320",
    "end": "3964100"
  },
  {
    "text": "Because if I do a\nshift to the right, for example, what'll I do? I'll just do a mask to\neliminate all the things that",
    "start": "3964100",
    "end": "3972100"
  },
  {
    "text": "got wrapped around. So two instructions or whatever. Yeah, details.",
    "start": "3972100",
    "end": "3977800"
  },
  {
    "text": "Yes. Details are good though. Good question. Good question.",
    "start": "3977800",
    "end": "3983950"
  },
  {
    "text": "Whose timed their program? Where are the\nopportunities that you see for performance\nengineering for a first pass?",
    "start": "3983950",
    "end": "3992609"
  },
  {
    "text": "What are the expensive things? What do you have as\nan expensive thing? AUDIENCE: Add laser paths-- [INAUDIBLE]",
    "start": "3992610",
    "end": "3999099"
  },
  {
    "text": "CHARLES E. LEISERSON: Sorry the? AUDIENCE: Marking\nthe laser path. CHARLES E. LEISERSON:\nMarking laser path, yep. Good.",
    "start": "3999100",
    "end": "4004380"
  },
  {
    "text": "What else is time expensive? AUDIENCE: Laser coverage. [INAUDIBLE] CHARLES E. LEISERSON:\nYeah, laser coverage.",
    "start": "4004380",
    "end": "4009730"
  },
  {
    "text": "Boy, that is really expensive. That is really expensive. So where else is expensive?",
    "start": "4009730",
    "end": "4016270"
  },
  {
    "text": " What else is expensive? So I would definitely\ngo after l cover.",
    "start": "4016270",
    "end": "4024240"
  },
  {
    "text": "That's a huge one to go after. One of the things, by the way,\nif you are making your changes",
    "start": "4024240",
    "end": "4032579"
  },
  {
    "text": "to the code and you're going\nto change the representation, leave the old\nrepresentation there.",
    "start": "4032580",
    "end": "4040800"
  },
  {
    "text": "Take it out at the end. Add the new\nrepresentation and put in assertions that say\nthat things are equivalent",
    "start": "4040800",
    "end": "4046770"
  },
  {
    "text": "or whatever. But don't get rid\nof the old stuff, because you'll end\nup with broken code.",
    "start": "4046770",
    "end": "4052590"
  },
  {
    "text": "And definitely, used\nthings like perft to tell you whether or not you\nmade any change If you touch",
    "start": "4052590",
    "end": "4061230"
  },
  {
    "text": "anything with move generation.",
    "start": "4061230",
    "end": "4066240"
  },
  {
    "text": "So where else is expensive? Yeah. AUDIENCE: Can you explain\nthe laser [INAUDIBLE]??",
    "start": "4066240",
    "end": "4072680"
  },
  {
    "text": "CHARLES E. LEISERSON: Sure. How much detail do you want? How it actually works?",
    "start": "4072680",
    "end": "4077690"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] CHARLES E. LEISERSON: OK. So what is supposed to do\nis figure out how safe--",
    "start": "4077690",
    "end": "4090470"
  },
  {
    "text": "the idea is, I want my laser\nto get closer to your king,",
    "start": "4090470",
    "end": "4096439"
  },
  {
    "text": "and I want your laser not\nto be close to my king.",
    "start": "4096439",
    "end": "4101960"
  },
  {
    "text": "And if I can move\ninto positions where my laser is closer to your\nking but your laser doesn't",
    "start": "4101960",
    "end": "4107960"
  },
  {
    "text": "get closer to my King,\nthat's a good sort of thing. But when we say get\nthe laser close, what",
    "start": "4107960",
    "end": "4113210"
  },
  {
    "text": "happens when I've got, say-- let me do it this way-- ",
    "start": "4113210",
    "end": "4120889"
  },
  {
    "text": "a position like this.  So here's the-- ",
    "start": "4120890",
    "end": "4130299"
  },
  {
    "text": "OK. Suppose I look at this position. How close does the laser get?",
    "start": "4130300",
    "end": "4137140"
  },
  {
    "text": "Let's say I'm black here,\nand I look at the laser. Well, the path of laser is it\nbounces there and goes across.",
    "start": "4137140",
    "end": "4145540"
  },
  {
    "text": "So I didn't get very\nclose to the king there, but I'm one move away from\ngetting it pretty close.",
    "start": "4145540",
    "end": "4153068"
  },
  {
    "text": "Because if I just move\nthis guy out of the way, now I've got it\nreally quite close.",
    "start": "4153069",
    "end": "4158920"
  },
  {
    "text": "So if I compare that to,\nlet's say, a situation where instead of\nthe pawns are there,",
    "start": "4158920",
    "end": "4166540"
  },
  {
    "text": "let's say a pawn is here. ",
    "start": "4166540",
    "end": "4172410"
  },
  {
    "text": "Now, the laser is actually\ncloser to the King than it was in the\nfirst position,",
    "start": "4172410",
    "end": "4178839"
  },
  {
    "text": "but it's a much worse position. The first one was\nmuch better when I had the pawns here and\nhere, because I was simply",
    "start": "4178840",
    "end": "4186220"
  },
  {
    "text": "one move away from\ngetting it really close. And so if you use just\nthe direct laser thing--",
    "start": "4186220",
    "end": "4193540"
  },
  {
    "text": "and we did some tests on this-- this turns out to be not very-- it doesn't guide the\nprogram very well",
    "start": "4193540",
    "end": "4200320"
  },
  {
    "text": "on getting into situations\nwhere my laser is getting close to your king. Does that make sense?",
    "start": "4200320",
    "end": "4207220"
  },
  {
    "text": "So then we said,\nwell, how should we measure how close\nthe laser gets?",
    "start": "4207220",
    "end": "4212680"
  },
  {
    "text": "So what we said is,\nwell, let's take a look at all the possible moves\nfrom here of one move",
    "start": "4212680",
    "end": "4219730"
  },
  {
    "text": "and then look to see\nhow close we get things. And the way we did\nthat is we said--",
    "start": "4219730",
    "end": "4226960"
  },
  {
    "text": "actually, Helen and I\nworked on this really hard, because this is a new\nheuristic that we have not",
    "start": "4226960",
    "end": "4232750"
  },
  {
    "text": "used in previous years. And it works great, it's\njust slow as anything.",
    "start": "4232750",
    "end": "4238080"
  },
  {
    "text": "But it works well, so\nyou have to evaluate, is it worth doing something\nif it's really slow?",
    "start": "4238080",
    "end": "4243670"
  },
  {
    "text": "It may be that you'd do better\nto use a simpler heuristic and get deeper search\nthan it is spending",
    "start": "4243670",
    "end": "4250300"
  },
  {
    "text": "a lot of time evaluating. But anyway, we gave you\none, that if you can make it go fast, should be really good.",
    "start": "4250300",
    "end": "4256120"
  },
  {
    "text": "So the idea is\nthat what we do is we look at all the different\npaths from moving any one piece",
    "start": "4256120",
    "end": "4265150"
  },
  {
    "text": "and look at the\npaths of the laser. And what we do is we go we\ncount 1 for every position",
    "start": "4265150",
    "end": "4270832"
  },
  {
    "text": "that we go away-- 2, 3, 4, 5, 6, 7, et cetera.",
    "start": "4270832",
    "end": "4276580"
  },
  {
    "text": "We actually add an extra\nvalue if we bounce off an opponent's-- how much do we add, Helen, do\nwe add 1 or 2 if we bounce off",
    "start": "4276580",
    "end": "4283600"
  },
  {
    "text": "an opponent? AUDIENCE: 2. CHARLES E. LEISERSON:\nI think, 2. Yeah. So if this is an\nopponent's pawn,",
    "start": "4283600",
    "end": "4289210"
  },
  {
    "text": "we would basically go\nfrom 3 to 5, 6, 7, 8, 9.",
    "start": "4289210",
    "end": "4298120"
  },
  {
    "text": "And we basically do\nthat for all the moves. And the way we\ncombine them is we take the minimum number\nthat I can get there.",
    "start": "4298120",
    "end": "4307210"
  },
  {
    "text": "What's the what's the cheapest\nway I can get to every square that the laser goes?",
    "start": "4307210",
    "end": "4312550"
  },
  {
    "text": "So we take all the different\nmoves, we stroke them out, and we take the minimum. So if I have another\npath, let's say",
    "start": "4312550",
    "end": "4320020"
  },
  {
    "text": "by turning the king\nit will go this way, and there's a you know\nthere's another one here",
    "start": "4320020",
    "end": "4325510"
  },
  {
    "text": "that's my pawn, then I may get\nthere in 1, 2, 3, 4, 5, 6 7.",
    "start": "4325510",
    "end": "4334239"
  },
  {
    "text": "And so then this would\nbecome a value of 7 here. so that's the first\nthing is we basically get",
    "start": "4334240",
    "end": "4340210"
  },
  {
    "text": "a map of how close are things. And the second thing\nwe do is say, well, how valuable is it to have these\nto be near the particular king?",
    "start": "4340210",
    "end": "4352120"
  },
  {
    "text": "And then what we ended up\nwith is something where if I look at the\ndistance that I am away--",
    "start": "4352120",
    "end": "4364570"
  },
  {
    "text": "let's say, this one,\nfor example, is one row and one column away,\nthis is 0 row 0 column--",
    "start": "4364570",
    "end": "4370660"
  },
  {
    "text": "we use, I think, it's\n1 over the row plus 1, times 1 over the column\nplus 1, as a multiplier",
    "start": "4370660",
    "end": "4381400"
  },
  {
    "text": "to weight how good it is that\nwe've been close to the king. And we invert these\nvalues so that it's better",
    "start": "4381400",
    "end": "4393160"
  },
  {
    "text": "to have a smaller number\nthere, and then we add them up. ",
    "start": "4393160",
    "end": "4399770"
  },
  {
    "text": "We don't quite add them up. No, I'm sorry. What we do is we\nlook at these things as a fraction of my\nshortest path distance.",
    "start": "4399770",
    "end": "4407690"
  },
  {
    "text": "Sorry, that's what we did. Yes, I'm sorry. That was a previous heuristic. So here, for example--\nlet's say this is the 9--",
    "start": "4407690",
    "end": "4415420"
  },
  {
    "text": "the shortest way of getting\nthere is 1, 2, 3 4, 5, 6 7, 8. So this would actually,\nwhen we do the conversion,",
    "start": "4415420",
    "end": "4422560"
  },
  {
    "text": "would give a value of 8/9\nfor being in that square. So we didn't get it.",
    "start": "4422560",
    "end": "4427680"
  },
  {
    "text": "Whereas this one, the\nshortest path distance is 7 because of this path,\nand you can get there in 7.",
    "start": "4427680",
    "end": "4433210"
  },
  {
    "text": "This would have a value of 1. So this is better. And so we do that\nfor all the squares.",
    "start": "4433210",
    "end": "4439090"
  },
  {
    "text": "So we get a fraction\nof how much do we do. And then we wait it by\nsomething like this, which falls away quickly.",
    "start": "4439090",
    "end": "4446020"
  },
  {
    "text": "But it's important, in\nheuristics like this, to have a smooth path, so that\nyou can get things closer.",
    "start": "4446020",
    "end": "4452190"
  },
  {
    "text": "If I made all these\nthings be 0, it wouldn't know that it could move\nup and get a little bit better",
    "start": "4452190",
    "end": "4459670"
  },
  {
    "text": "in the second or third\norder digit to get closer. And so then we add\nit all up, and that",
    "start": "4459670",
    "end": "4466389"
  },
  {
    "text": "ends up being a\nnumber, we discovered, that's sort of in the range of-- ",
    "start": "4466390",
    "end": "4474760"
  },
  {
    "text": "what did we figure\nthe range was there? It was up to like\n4, or so, right?",
    "start": "4474760",
    "end": "4481290"
  },
  {
    "text": "Something like 4 would be the\nmaximum value it would be. And then we said,\nOK, then we have",
    "start": "4481290",
    "end": "4486820"
  },
  {
    "text": "this magic constant multiplier\nthat you can play with, that says, OK, let's represent\nthat as a fraction of a pawn.",
    "start": "4486820",
    "end": "4493420"
  },
  {
    "text": "How much is that worth? And we multiplied by that value. So that's what we're doing.",
    "start": "4493420",
    "end": "4500020"
  },
  {
    "text": "So that it makes\nit so that we do tend to move our\nlaser closer, we subtract how close the\nopponent can get from us,",
    "start": "4500020",
    "end": "4507460"
  },
  {
    "text": "and then we say\nthat's the evaluation. Now, if you have a better way of\ndetermining whether a laser is",
    "start": "4507460",
    "end": "4513520"
  },
  {
    "text": "getting close than this one,\nthat's cheaper to compute,",
    "start": "4513520",
    "end": "4518680"
  },
  {
    "text": "that's good. For first pass, I\nwould just simply try to make this go fast.",
    "start": "4518680",
    "end": "4524770"
  },
  {
    "text": "Because for many of the moves\nthat you're going to look at, it's going to be moving\nthis pawn to there.",
    "start": "4524770",
    "end": "4531030"
  },
  {
    "text": "Nothing changed. There's no point in stroking\nthis out, and calculating all the minimum, et\ncetera, because it",
    "start": "4531030",
    "end": "4536470"
  },
  {
    "text": "didn't touch the laser path. Things that are going\nto touch a laser path are things that you\nmove on or off the path.",
    "start": "4536470",
    "end": "4542590"
  },
  {
    "text": "So why bother? And so if there's a clever\nway of caching it so that you",
    "start": "4542590",
    "end": "4550300"
  },
  {
    "text": "can do things, that's good too.",
    "start": "4550300",
    "end": "4555573"
  },
  {
    "text": "Any questions about other\nthings that could be done? So another place, I'll tell you,\nthat's a good idea to look at is--",
    "start": "4555573",
    "end": "4561150"
  },
  {
    "text": "especially once you get this\nheuristic top rate a little bit faster-- is the sorting of moves is\nactually pretty expensive.",
    "start": "4561150",
    "end": "4570190"
  },
  {
    "text": " Once you figure out,\nhere all the moves-- there are a lot of moves--",
    "start": "4570190",
    "end": "4575739"
  },
  {
    "text": "now you go through\nand you do a sort. And if you think about it, in a\nbest move order tree, sometimes",
    "start": "4575740",
    "end": "4585470"
  },
  {
    "text": "you only explore one of those. So why'd you bother\nsorting all of them? ",
    "start": "4585470",
    "end": "4591920"
  },
  {
    "text": "On the other hand, sometimes\nyou do need to sort all of them. So how you optimize\nthat sort so that you",
    "start": "4591920",
    "end": "4599303"
  },
  {
    "text": "don't waste time sorting\nstuff that you're not going to actually\never explore, that's another opportunity\nfor optimization.",
    "start": "4599303",
    "end": "4607135"
  },
  {
    "text": "Yeah, question? AUDIENCE: How do you sort\nthe moves [INAUDIBLE]?? CHARLES E. LEISERSON: The moves\nare sorted by these things",
    "start": "4607135",
    "end": "4612560"
  },
  {
    "text": "like-- there's a sort key in\nthere that represents",
    "start": "4612560",
    "end": "4617900"
  },
  {
    "text": "a whole bunch of things,\nlike whether it was a killer. If it's a killer or it's a\ntransposition table value,",
    "start": "4617900",
    "end": "4623140"
  },
  {
    "text": "it's a very big value. If it's a statistical thing\nthat the history table says,",
    "start": "4623140",
    "end": "4628340"
  },
  {
    "text": "historically, this has\nbeen a pretty good move, then you get another value. And then exchanges get\nordered and so forth.",
    "start": "4628340",
    "end": "4636030"
  },
  {
    "text": "So there's a bunch\nof things that are where you end\nup with information, and then it sorts those things.",
    "start": "4636030",
    "end": "4643130"
  },
  {
    "text": "So that's actually kind\nof complicated logic in terms of what the actual\nvalues that are used there.",
    "start": "4643130",
    "end": "4649680"
  },
  {
    "text": "But the idea is, here\nall the moves, now let's figure out what's our\nbest guess as to what they are.",
    "start": "4649680",
    "end": "4655928"
  },
  {
    "text": "Most of the good\nmoves are coming out of the transposition table. But sometimes, the\ntransition table it says it's",
    "start": "4655928",
    "end": "4664850"
  },
  {
    "text": "not a very good move, and\nthere may be a better move. So the quality of what you\nget out of transposition table",
    "start": "4664850",
    "end": "4670520"
  },
  {
    "text": "is good, but that doesn't\nmean that that's always the best move.",
    "start": "4670520",
    "end": "4676730"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] CHARLES E. LEISERSON: Yeah. Any other questions about\nwhat should be worked on?",
    "start": "4676730",
    "end": "4683579"
  },
  {
    "text": "Let me just make sure I-- OK, go ahead. AUDIENCE: Where does\nthat sorting happen? I've never [INAUDIBLE].",
    "start": "4683580",
    "end": "4690473"
  },
  {
    "text": "CHARLES E. LEISERSON: Where\ndoes the sorting happen? That happens, I think,\nat the move generation.",
    "start": "4690473",
    "end": "4695900"
  },
  {
    "text": "Is that where it is? Is it stored in the\nmove generation? AUDIENCE: In search. CHARLES E. LEISERSON:\nOr is it in search? I think it's in search.",
    "start": "4695900",
    "end": "4701599"
  },
  {
    "text": "I think you're right. Search calls move generation\nand then sorts it. I think that's right.",
    "start": "4701600",
    "end": "4707200"
  },
  {
    "text": "Yeah, question? AUDIENCE: So one\nof the things we did that we were\nproviding [INAUDIBLE],,",
    "start": "4707200",
    "end": "4713642"
  },
  {
    "text": "we have a very tiny\nboard implementation. CHARLES E. LEISERSON: A very\ntiny board implementation. AUDIENCE: Yeah, [INAUDIBLE].",
    "start": "4713642",
    "end": "4719260"
  },
  {
    "text": "You can do a lot of\nmatrix on it as well. But it's like maybe [INAUDIBLE]\nreplace it everywhere. CHARLES E. LEISERSON: Yes.",
    "start": "4719260",
    "end": "4724378"
  },
  {
    "text": "AUDIENCE: So what's\na good strategy? CHARLES E. LEISERSON: Well, as\nI say, keep the old one around. AUDIENCE: [INAUDIBLE]\nstill use [INAUDIBLE]..",
    "start": "4724378",
    "end": "4731140"
  },
  {
    "text": "CHARLES E. LEISERSON:\nWell, you use the old one while you're still\ngetting the new one right.",
    "start": "4731140",
    "end": "4736690"
  },
  {
    "text": "It's also good to be able to\ngo from old representation to new representation and\nhaving conversion functions.",
    "start": "4736690",
    "end": "4744250"
  },
  {
    "text": "But, yeah, making representation\nchanges, painful, painful.",
    "start": "4744250",
    "end": "4750130"
  },
  {
    "text": "And boy, if there\nwas one tool I would love that would automate stuff\nlike that, that would be it,",
    "start": "4750130",
    "end": "4756910"
  },
  {
    "text": "to be able to change\nrepresentations of things and still have things go well. I should have\nmentioned, by the way, the other representation\nbesides bitboard.",
    "start": "4756910",
    "end": "4764020"
  },
  {
    "text": "Another one is just to\nkeep a list of the pieces and their positions.",
    "start": "4764020",
    "end": "4771482"
  },
  {
    "text": "Because that's going to\nbe smaller than keeping this great big board. And do you keep this list sorted\nor do you not keep it sorted?",
    "start": "4771482",
    "end": "4780240"
  },
  {
    "text": "But the advantage of\nthat is, particularly as the game goes on, that\nlist gets shorter and shorter.",
    "start": "4780240",
    "end": "4786780"
  },
  {
    "text": "And so if you're doing less\nin manipulating the board",
    "start": "4786780",
    "end": "4791980"
  },
  {
    "text": "position, that's\ngenerally a good thing. AUDIENCE: So for the\nboard reputation,",
    "start": "4791980",
    "end": "4797320"
  },
  {
    "text": "my recommendation is to\nrefactor all the board axes into a function. And then you would still\nuse the old representation",
    "start": "4797320",
    "end": "4803950"
  },
  {
    "text": "in the function. Then you can validate that you\nrefactor everything correctly. And then you can easily change\nthe board representation",
    "start": "4803950",
    "end": "4809320"
  },
  {
    "text": "to whatever you want\nand keep changing it without having to do it a\nlot of refactor after that.",
    "start": "4809320",
    "end": "4814390"
  },
  {
    "text": "So find all the board axes and\nrefactor that to a function call before you modify it. CHARLES E. LEISERSON: Yeah.",
    "start": "4814390",
    "end": "4819460"
  },
  {
    "text": "Because the compiler\nwill inline that stuff. So putting in a function call\nis not necessarily a bad idea.",
    "start": "4819460",
    "end": "4828858"
  },
  {
    "text": "And if it doesn't, you\ncan put it in macro, and it'll be effectively\nthe same thing.",
    "start": "4828858",
    "end": "4833900"
  },
  {
    "text": "So great idea. Great idea.",
    "start": "4833900",
    "end": "4839140"
  },
  {
    "text": "Yeah, question? AUDIENCE: Anything\nelse that wasn't there that you would highly\nrecommend for us to look at?",
    "start": "4839140",
    "end": "4844970"
  },
  {
    "text": "CHARLES E. LEISERSON:\nTesting, testing, testing. If you can test and know\nthat when you make a change it's correct and\nthat you're not--",
    "start": "4844970",
    "end": "4853040"
  },
  {
    "text": "that's probably the number\none hole that people go into is they don't test adequately. So having good test\ninfrastructure is good.",
    "start": "4853040",
    "end": "4862280"
  },
  {
    "text": "Yeah? AUDIENCE: Some questions\nabout codes counts-- I saw on Piazza\nthere was [INAUDIBLE]",
    "start": "4862280",
    "end": "4869028"
  },
  {
    "text": "if the beta changed the\n[INAUDIBLE] count will stay the same. CHARLES E. LEISERSON:\nAs long as you're doing it deterministically, yes? AUDIENCE: Yeah.",
    "start": "4869028",
    "end": "4874335"
  },
  {
    "text": "But even the\nreferences limitation is nondeterministic\nserially for [INAUDIBLE].. CHARLES E. LEISERSON:\nThat's because there's",
    "start": "4874335",
    "end": "4880820"
  },
  {
    "text": "a randomness thing. There's a little variable,\nand you can set the variable to be not random.",
    "start": "4880820",
    "end": "4886857"
  },
  {
    "text": "And then it will be. AUDIENCE: Is that a part\nof the set option RNG? CHARLES E. LEISERSON: Yes. AUDIENCE: When that's set,\nit's still nondeterministic.",
    "start": "4886857",
    "end": "4893492"
  },
  {
    "text": "CHARLES E. LEISERSON:\nRun serially? AUDIENCE: Yeah. I checked the-- is\nthere anything else that",
    "start": "4893492",
    "end": "4899644"
  },
  {
    "text": "should be done? Or should it just\nbe that seed option? CHARLES E. LEISERSON:\nI think that's-- AUDIENCE: [INAUDIBLE]",
    "start": "4899644",
    "end": "4907152"
  },
  {
    "text": "CHARLES E. LEISERSON:\n[INAUDIBLE],, can give to her the mic? AUDIENCE: Yeah. AUDIENCE: [INAUDIBLE]. ",
    "start": "4907152",
    "end": "4913180"
  },
  {
    "text": "Yeah. Did you try the things\nthat [INAUDIBLE] include [INAUDIBLE] like [INAUDIBLE]. AUDIENCE: Yeah.",
    "start": "4913180",
    "end": "4918800"
  },
  {
    "text": "I got out of the opening book\nand I set the RNG option. AUDIENCE: OK Let\nme test it again.",
    "start": "4918800",
    "end": "4924290"
  },
  {
    "text": "Because when I tested it\n, it was deterministic. So [INAUDIBLE]. AUDIENCE: OK. AUDIENCE: [INAUDIBLE]",
    "start": "4924290",
    "end": "4930042"
  },
  {
    "text": "CHARLES E. LEISERSON: Yeah. It shouldn't be--\nif you run serially, the only things that\nshould be doing things is",
    "start": "4930042",
    "end": "4936960"
  },
  {
    "text": "if you're doing-- it should be deterministic if\nyou turn off the random number",
    "start": "4936960",
    "end": "4943080"
  },
  {
    "text": "generator. So as I say, that's\nput in so that it will behave nonpredictably.",
    "start": "4943080",
    "end": "4948840"
  },
  {
    "text": "But that's exactly\nthe kind of thing you want to find right\nat the beginning. So that's exactly\nthe thing is find out",
    "start": "4948840",
    "end": "4954000"
  },
  {
    "text": "all the ways of making\nit deterministic, and that would be really\nimportant for beta 2.",
    "start": "4954000",
    "end": "4959490"
  },
  {
    "text": "So Thursday, we have Jon\nBentley, legend of the field,",
    "start": "4959490",
    "end": "4967800"
  },
  {
    "text": "opportunity to meet a celebrity. Bring friends.",
    "start": "4967800",
    "end": "4973050"
  },
  {
    "text": "He's going to give\na great lecture. ",
    "start": "4973050",
    "end": "4982978"
  }
]