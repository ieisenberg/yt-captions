[
  {
    "text": " [MUSIC PLAYING]",
    "start": "0",
    "end": "21130"
  },
  {
    "text": "PROFESSOR: Well, last time we\ntalked about compound data, and there were two main points\nto that business.",
    "start": "21130",
    "end": "29800"
  },
  {
    "text": "First of all, there was\na methodology of data abstraction, and the point of\nthat was that you could",
    "start": "29800",
    "end": "35010"
  },
  {
    "text": "isolate the way that data\nobjects are used from the way",
    "start": "35010",
    "end": "40500"
  },
  {
    "text": "that they're represented: this\nidea that there's this guy, George, and you go out make a\ncontract with him; and it's",
    "start": "40500",
    "end": "45600"
  },
  {
    "text": "his business to represent the\ndata objects; and at the moment you are using them,\nyou don't think about George's problem.",
    "start": "45600",
    "end": "52220"
  },
  {
    "text": "And then secondly, there was\nthis particular way that Lisp has of gluing together things to\nform objects called pairs,",
    "start": "52220",
    "end": "60770"
  },
  {
    "text": "and that's done with cons, car\nand cdr. And the way that cons, car and cdr are\nimplemented is basically",
    "start": "60770",
    "end": "66479"
  },
  {
    "text": "irrelevant. That's sort of George's\nproblem of how to build those things. It could be done\nas primitives. It could be done using\nprocedures in some weird way,",
    "start": "66480",
    "end": "73780"
  },
  {
    "text": "but we're not going to\nworry about that. And as an example, we looked at\nrational number arithmetic.",
    "start": "73780",
    "end": "80229"
  },
  {
    "text": "We looked at vectors,\nand here's just a review of vectors. Here's an operation that takes\nthe sum of of two vectors, so",
    "start": "80230",
    "end": "88355"
  },
  {
    "text": "we want to add this vector, v1,\nand this vector, v2, and we get the sum.",
    "start": "88355",
    "end": "94680"
  },
  {
    "text": "And the sum is the vector whose\ncoordinates are the sum of the coordinates of the\npieces you're adding.",
    "start": "94680",
    "end": "101380"
  },
  {
    "text": "So I can say, to define\nmake-vect, right, to add two vectors I make a vector, whose x\ncoordinate is the sum of the",
    "start": "101380",
    "end": "110710"
  },
  {
    "text": "two x coordinates, and whose y\ncoordinate is the sum of the two y coordinates.",
    "start": "110710",
    "end": "116759"
  },
  {
    "text": "And then similarly, we could\nhave an operation that scales",
    "start": "116760",
    "end": "123520"
  },
  {
    "text": "vectors, so here's a procedure\nscale that multiplies a",
    "start": "123520",
    "end": "129448"
  },
  {
    "text": "vector, v, by some number, s. So here's v, v goes from there\nto there and I scale v, and I",
    "start": "129449",
    "end": "137270"
  },
  {
    "text": "get a vector in the same\ndirection that's longer. And again, to scale a vector,\nI multiply the successive",
    "start": "137270",
    "end": "143850"
  },
  {
    "text": "coordinates. So I make a vector, whose x\ncoordinate is the scale factor",
    "start": "143850",
    "end": "149090"
  },
  {
    "text": "times the x coordinate and\nwhose y coordinate is the scale factor times\nthe y coordinate.",
    "start": "149090",
    "end": "154340"
  },
  {
    "text": "So those are two operations that\nare implemented using the representation of vectors.",
    "start": "154340",
    "end": "160570"
  },
  {
    "text": "And the representation of\nvectors, for instance, is something that we can build\nin terms of pairs.",
    "start": "160570",
    "end": "165640"
  },
  {
    "text": "So George has gone out and\nimplemented for us make-vector and x coordinate and y\ncoordinate, and this could be",
    "start": "165640",
    "end": "173959"
  },
  {
    "text": "done, for instance, using cons,\ncar and cdr; and notice",
    "start": "173960",
    "end": "184380"
  },
  {
    "text": "here, I wrote this in a slightly\ndifferent way. The procedures we've seen\nbefore, I've said something",
    "start": "184380",
    "end": "190660"
  },
  {
    "text": "like say, make-vector of x\nand y: cons of x and y.",
    "start": "190660",
    "end": "196170"
  },
  {
    "text": "And here I just wrote\nmake-vector cons. And that means something\nslightly different. Previously we'd say, define\nmake-vector to be a procedure",
    "start": "196170",
    "end": "203990"
  },
  {
    "text": "that takes two arguments,\nx and y, and does cons of x and y. And here I am saying define\nmake-vector to be the thing",
    "start": "203990",
    "end": "212870"
  },
  {
    "text": "that cons is, and that's almost\nthe same as the other",
    "start": "212870",
    "end": "218629"
  },
  {
    "text": "way we've been writing things. And I just want you to get\nused to the idea that procedures can be objects, and\nthat you can name them.",
    "start": "218630",
    "end": "226360"
  },
  {
    "text": " OK, well there's vector\nrepresentation, and again, if",
    "start": "226360",
    "end": "232640"
  },
  {
    "text": "that was all there was\nto it, this would all be pretty boring. And the point is, remember, that\nyou can use cons to glue",
    "start": "232640",
    "end": "240290"
  },
  {
    "text": "together not just numbers to\nform pairs, but to glue together arbitrary things. So for instance, if we'd like\nto represent a line segment,",
    "start": "240290",
    "end": "251500"
  },
  {
    "text": "say the line segment that goes\nfrom a certain vector: say,",
    "start": "251500",
    "end": "256959"
  },
  {
    "text": "the segment from the vector 2,3\nto the point represented",
    "start": "256959",
    "end": "267160"
  },
  {
    "text": "by the vector 5,1. If we want to represent that\nline segment, then we can",
    "start": "267160",
    "end": "273770"
  },
  {
    "text": "build that as a pair of pairs. ",
    "start": "273770",
    "end": "281130"
  },
  {
    "text": "So again, we can represent\nline segments. We can make a constructor that\nmakes a segment using cons,",
    "start": "281130",
    "end": "288150"
  },
  {
    "text": "selects out the start of a\nsegment, selects out the end point of the segment; and then\nif we actually look at that,",
    "start": "288150",
    "end": "297310"
  },
  {
    "text": "if we peel away the abstraction\nlayers, and say what's that really is a pair\nof pairs, we'd say",
    "start": "297310",
    "end": "305160"
  },
  {
    "text": "well that's a pair. Here's the segment. ",
    "start": "305160",
    "end": "310320"
  },
  {
    "text": "It's car, right, it's car\npointer is a pair, and it's cdr is also a pair, and then\nwhat the car is-- here's the",
    "start": "310320",
    "end": "321130"
  },
  {
    "text": "car, that itself is\na pair of 2 and 3. And similarly the cdr is\na pair of 2 and 3.",
    "start": "321130",
    "end": "328090"
  },
  {
    "text": "And let me remind you again,\nthat a lot of people have some idea that if I'd taken this\narrow and somehow written it",
    "start": "328090",
    "end": "335110"
  },
  {
    "text": "to point down, that would\nmean something else. That's irrelevant. It's only how these are\nconnected and not whether this",
    "start": "335110",
    "end": "340900"
  },
  {
    "text": "arrow happens to go vertically\nor horizontally. ",
    "start": "340900",
    "end": "347770"
  },
  {
    "text": "And again just to remind\nyou, there was this notion of closure.",
    "start": "347770",
    "end": "352860"
  },
  {
    "text": "See, closure was the thing\nthat allowed us to start",
    "start": "352860",
    "end": "362900"
  },
  {
    "text": "building up complexity, that\ndidn't trap us in pairs. Particularly what I mean is\nthe things that we make,",
    "start": "362900",
    "end": "372610"
  },
  {
    "text": "having combined things using\ncons to get a pair, those things themselves can be\ncombined using cons to make",
    "start": "372610",
    "end": "381330"
  },
  {
    "text": "more complicated things. Or as a mathematician might say,\nthe set of data objects",
    "start": "381330",
    "end": "387360"
  },
  {
    "text": "in List is closed under the\noperation of forming pairs.",
    "start": "387360",
    "end": "394129"
  },
  {
    "text": "That's the thing that allows\nus to build complexity. And that seems obvious, but\nremember, a lot of the things",
    "start": "394130",
    "end": "400000"
  },
  {
    "text": "in the computer languages that\npeople use are not closed. So for example, forming arrays\nin basic and Fortran is not a",
    "start": "400000",
    "end": "407120"
  },
  {
    "text": "closed operation, because you\ncan make an array of numbers or character strings or\nsomething, but you can't make",
    "start": "407120",
    "end": "412690"
  },
  {
    "text": "an array of arrays. And when you look at means of\ncombination, you should be",
    "start": "412690",
    "end": "419259"
  },
  {
    "text": "should be asking yourself\nwhether things are closed under that means\nof combination. ",
    "start": "419260",
    "end": "425280"
  },
  {
    "text": "Well in any case, because we\ncan form pairs of pairs, we can start using pairs to glue\nthings together in all sorts",
    "start": "425280",
    "end": "431980"
  },
  {
    "text": "of different ways. So for instance if I'd like to\nglue together the four things,",
    "start": "431980",
    "end": "437300"
  },
  {
    "text": "1, 2, 3 and 4, there are a\nlot of ways I can do it. I could, for example, like we\ndid with that line segment, I",
    "start": "437300",
    "end": "445050"
  },
  {
    "text": "could make a pair that\nhad a 1 and a 2 and",
    "start": "445050",
    "end": "452990"
  },
  {
    "text": "a 3 and a 4, right? Or if I liked, I could do\nsomething like this.",
    "start": "452990",
    "end": "460090"
  },
  {
    "text": "I could make a pair, whose first\nthing is a pair, whose",
    "start": "460090",
    "end": "466580"
  },
  {
    "text": "car is 1, and his cdr is itself\na pair that has the 2",
    "start": "466580",
    "end": "473009"
  },
  {
    "text": "and the 3, and then I could\nput the 4 up here. So you see, there are a lot of\ndifferent ways that I can",
    "start": "473010",
    "end": "479420"
  },
  {
    "text": "start using pairs to glue things\ntogether, and so it'll be a good idea to establish\nsome kind of conventions,",
    "start": "479420",
    "end": "487540"
  },
  {
    "text": "right, that allow us to deal\nwith this thing in some conventional way, so we're\nnot constantly",
    "start": "487540",
    "end": "492590"
  },
  {
    "text": "making an ad hoc choice. And List has a particular\nconvention for representing a",
    "start": "492590",
    "end": "501650"
  },
  {
    "text": "sequence of things as,\nessentially, a chain of pairs,",
    "start": "501650",
    "end": "506729"
  },
  {
    "text": "and that's called a List.",
    "start": "506730",
    "end": "514581"
  },
  {
    "text": "And what a List is is\nessentially just a convention for representing a sequence.",
    "start": "514581",
    "end": "520929"
  },
  {
    "text": "I would represent the sequence\n1, 2, 3 and 4 by a sequence of pairs.",
    "start": "520929",
    "end": "528420"
  },
  {
    "text": "I'd put 1 here and then the\ncdr of this would point to",
    "start": "528420",
    "end": "533920"
  },
  {
    "text": "another pair whose car was the\nnext thing in the sequence,",
    "start": "533920",
    "end": "541490"
  },
  {
    "text": "and the cdr would point to\nanother pair whose car was the next thing in the sequence--\nso there's 3--",
    "start": "541490",
    "end": "548400"
  },
  {
    "text": "and then another one. So for each item in the\nsequence, I'll get a pair.",
    "start": "548400",
    "end": "555450"
  },
  {
    "text": "And now there are no more, so\nI put a special marker that",
    "start": "555450",
    "end": "561130"
  },
  {
    "text": "means there's nothing more in\nthe List. OK, so that's a",
    "start": "561130",
    "end": "568760"
  },
  {
    "text": "conventional way to glue things\ntogether if you want to represent a sequence, right.",
    "start": "568760",
    "end": "574450"
  },
  {
    "text": "And what it is is a bunch of\npairs, the successive cars of",
    "start": "574450",
    "end": "582570"
  },
  {
    "text": "each pair are the items that you\nwant to glue together, and the cdr pointer points\nto the next pair.",
    "start": "582570",
    "end": "590329"
  },
  {
    "text": "Now if I actually wanted to\nconstruct that, what I would type into List is this: I'd\nactually construct that as",
    "start": "590330",
    "end": "597630"
  },
  {
    "text": "saying, well this thing is the\ncons of 1 onto the cons of 2",
    "start": "597630",
    "end": "607640"
  },
  {
    "text": "onto the cons of 3 onto\nthe cons of 4 onto,",
    "start": "607640",
    "end": "614390"
  },
  {
    "text": "well, this thing nil. And what nil is is a name for\nthe end of List marker.",
    "start": "614390",
    "end": "621050"
  },
  {
    "text": "It's a special name, which means\nthis is the end of the List. OK, so that's how I would\nactually construct that.",
    "start": "621050",
    "end": "629980"
  },
  {
    "start": "629980",
    "end": "637195"
  },
  {
    "text": "Of course, it's a terrible drag\nto constantly have to write something like the cons\nof 1 onto the cons of 2 onto",
    "start": "637195",
    "end": "643000"
  },
  {
    "text": "the cons of 3, whenever you\nwant to make this thing. So List has an operation that's\ncalled List, and List",
    "start": "643000",
    "end": "654270"
  },
  {
    "text": "is just an abbreviation for\nthis nest of conses. So I could say, I could\nconstruct that by saying that",
    "start": "654270",
    "end": "662310"
  },
  {
    "text": "is the List of 1, 2, 3 and 4.",
    "start": "662310",
    "end": "668010"
  },
  {
    "text": "And all this is is another\nway, a piece of syntactic sugar, a more convenient\nway for writing",
    "start": "668010",
    "end": "673550"
  },
  {
    "text": "that chain of conses-- cons of cons of cons of cons\nof cons of cons onto nil. So for example, I could build\nthis thing and say, I'll",
    "start": "673550",
    "end": "681810"
  },
  {
    "text": "define 1-TO-4 to be the\nList of 1, 2, 3 and 4.",
    "start": "681810",
    "end": "699150"
  },
  {
    "start": "699150",
    "end": "708070"
  },
  {
    "text": "OK, well notice some of the\nconsequences of using this convention.",
    "start": "708070",
    "end": "714190"
  },
  {
    "text": "First of all if I have this\nList, this 1, 2, 3 and 4, the car of the whole thing\nis the first element",
    "start": "714190",
    "end": "719290"
  },
  {
    "text": "in the List, right. How do I get 2?",
    "start": "719290",
    "end": "725399"
  },
  {
    "text": "Well, 2 would be the car of the\ncdr of this thing 1-TO-4,",
    "start": "725400",
    "end": "741850"
  },
  {
    "text": "it would be 2, right. I take this thing, I take the\ncdr of it, which is this much,",
    "start": "741850",
    "end": "750050"
  },
  {
    "text": "and the car of that is 2, and\nthen similarly, the car of the",
    "start": "750050",
    "end": "758760"
  },
  {
    "text": "cdr of the cdr of 1-TO-4,\ncdr, cdr, car--",
    "start": "758760",
    "end": "768060"
  },
  {
    "text": "would give me 3, and so on. Let's take a look at that\non the computer",
    "start": "768060",
    "end": "774650"
  },
  {
    "text": "screen for a second.  I could come up to List, and I\ncould type define 1-TO-4 to be",
    "start": "774650",
    "end": "787050"
  },
  {
    "text": "the List of 1, 2,\n3 and 4, right.",
    "start": "787050",
    "end": "794190"
  },
  {
    "text": "And I'll tell that to List, and\nit says, fine, that's the",
    "start": "794190",
    "end": "799690"
  },
  {
    "text": "definition of 1-TO-4. And I could say, for instance,\nwhat's the car of the cdr of",
    "start": "799690",
    "end": "808949"
  },
  {
    "text": "the cdr of 1-TO-4, close\nparen, close paren.",
    "start": "808950",
    "end": "818096"
  },
  {
    "text": "Right, so the car of the cdr\nof the cdr would be 3.",
    "start": "818096",
    "end": "823916"
  },
  {
    "text": "Right, or I could say,\nwhat's 1-TO-4 itself.",
    "start": "823916",
    "end": "831660"
  },
  {
    "text": "And you see what List typed out\nis 1, 2, 3, 4, enclosed in parentheses, and this notation,\ntyping the elements",
    "start": "831660",
    "end": "839629"
  },
  {
    "text": "of the List enclosed in\nparentheses is List's conventional way for printing\nback this chain of pairs that",
    "start": "839630",
    "end": "847660"
  },
  {
    "text": "represents a sequence. So for example, if I said,\nwhat's the cdr of 1-TO-4,",
    "start": "847660",
    "end": "859520"
  },
  {
    "text": "that's going to be the rest of\nthe List. That's the thing pointed to by the first pair,\nwhich is, again, a sequence",
    "start": "859520",
    "end": "865410"
  },
  {
    "text": "that starts off with 2. Or for example, I go off and\nsay, what's the cdr of the cdr",
    "start": "865410",
    "end": "876740"
  },
  {
    "text": "of 1-TO-4; then that's 3,4.",
    "start": "876740",
    "end": "884990"
  },
  {
    "text": "Or if I say, what's the cdr of\nthe cdr of the cdr of the cdr",
    "start": "884990",
    "end": "898205"
  },
  {
    "text": "of 1-TO-4, and I'm down there\nlooking at the end of List",
    "start": "898205",
    "end": "907090"
  },
  {
    "text": "pointer itself, and List prints\nthat as just open paren, close paren. You can think of that as a List\nwith nothing in there.",
    "start": "907090",
    "end": "913805"
  },
  {
    "text": "All right, see at the end what\nI did there was I looked at the cdr of the cdr of the cdr\nof 1-TO-4, and I'm just left",
    "start": "913805",
    "end": "922150"
  },
  {
    "text": "with the end of List\npointer itself. And that gets printed\nas open close. ",
    "start": "922150",
    "end": "934350"
  },
  {
    "text": "All right, well that's a\nconventional way you can see for working down a\nList by taking",
    "start": "934350",
    "end": "942079"
  },
  {
    "text": "successive cdrs of things. It's called cdring down a\nList. And of course it's",
    "start": "942080",
    "end": "947470"
  },
  {
    "text": "pretty much of a drag to type\nall those cdrs by hand. You don't do that. You write procedures\nthat do that.",
    "start": "947470",
    "end": "953220"
  },
  {
    "text": "And in fact one very, very\ncommon thing to do in List is to write procedures that, sort\nof, take a List of things and",
    "start": "953220",
    "end": "962290"
  },
  {
    "text": "do something to every element in\nList, and return you a List of the results.",
    "start": "962290",
    "end": "967400"
  },
  {
    "text": "So what I mean for example, is\nI might write a procedure called Scale-List, and\nScale-List I might say I want",
    "start": "967400",
    "end": "978440"
  },
  {
    "text": "to scale by 10 the entire List\n1-TO-4, and that would return",
    "start": "978440",
    "end": "987640"
  },
  {
    "text": "for me the List 10,\n20, 30, 40.",
    "start": "987640",
    "end": "996513"
  },
  {
    "text": "[UNINTELLIGIBLE PHRASE] Right, it returns List, and well\nyou can see that there's",
    "start": "996513",
    "end": "1006360"
  },
  {
    "text": "going to be some kind\nof recursive strategy for doing it. How would I actually write\nthat procedure?",
    "start": "1006360",
    "end": "1012800"
  },
  {
    "text": "The idea would be, well if you'd\nlike to build up a List where you've multiplied every\nelement by 10, what you'd say",
    "start": "1012800",
    "end": "1021140"
  },
  {
    "text": "is well you imagine that you'd\ntaken the rest of the List-- right, the thing represented\nby the cdr of the List, and",
    "start": "1021140",
    "end": "1028560"
  },
  {
    "text": "suppose I'd already built a List\nwhere each of these was multiplied by 10--",
    "start": "1028560",
    "end": "1036470"
  },
  {
    "text": "that would be Scale-List of the\ncdr of the List. And then all I have to do is multiply the\ncar of the List by 10, and",
    "start": "1036470",
    "end": "1045099"
  },
  {
    "text": "then cons that onto the rest,\nand I'll get a List. Right and then similarly, to\nhave scaled the cdr of the",
    "start": "1045099",
    "end": "1051610"
  },
  {
    "text": "List, I'll scale the cdr of\nthat and cons onto that 2 multiplied by 10.",
    "start": "1051610",
    "end": "1056830"
  },
  {
    "text": "And finally when I get all the\nway down to the end, and I only have this end\nof List pointer. All right, this thing whose\nname is nil-- well I just",
    "start": "1056830",
    "end": "1063640"
  },
  {
    "text": "returned an end of\nList pointer. So there's a recursive strategy\nfor doing that. Here's the actual procedure\nthat does that.",
    "start": "1063640",
    "end": "1071179"
  },
  {
    "text": "Right, this is an example of\nthe general strategy of cdr-ing down a List and\nso called cons-ing",
    "start": "1071180",
    "end": "1076800"
  },
  {
    "text": "up the result, right. So to Scale a List l by some\nscale factor s, what do I do?",
    "start": "1076800",
    "end": "1086090"
  },
  {
    "text": "Well there's a test, and List\nhas the predicate called null. Null means is this thing the\nend of List pointer, or",
    "start": "1086090",
    "end": "1094060"
  },
  {
    "text": "another way to think of that is\nare there any elements in this List, right. But in any case if I'm looking\nat the end of List pointer,",
    "start": "1094060",
    "end": "1100820"
  },
  {
    "text": "then I just return the\nend of List pointer. I just return nil, otherwise I\ncons together the result of",
    "start": "1100820",
    "end": "1112290"
  },
  {
    "text": "doing what I'm going to do to\nthe first element in the List, namely taking the car of l and\nmultiplying it by s, and I",
    "start": "1112290",
    "end": "1120919"
  },
  {
    "text": "cons that onto recursively\nscaling the rest of the List.",
    "start": "1120920",
    "end": "1130240"
  },
  {
    "text": "OK, so again, the general idea\nis that you recursively do something to the rest of the\nList, to the cdr of the List,",
    "start": "1130240",
    "end": "1136740"
  },
  {
    "text": "and then you cons that onto\nactually doing something to the first element of the List.\nWhen you get down to the end",
    "start": "1136740",
    "end": "1142230"
  },
  {
    "text": "here, you return the end of\nList pointer, and that's a",
    "start": "1142230",
    "end": "1147809"
  },
  {
    "text": "general pattern for doing\nsomething to a List. Well of",
    "start": "1147810",
    "end": "1156400"
  },
  {
    "text": "course you should know by now\nthat the very fact that there's a general pattern there\nmeans I shouldn't be writing this procedure at all.",
    "start": "1156400",
    "end": "1163139"
  },
  {
    "text": "What I should do is write a\nprocedure that's the general pattern itself that says, do\nsomething to everything in the",
    "start": "1163140",
    "end": "1168350"
  },
  {
    "text": "List and define this thing\nin terms of that. Right, make some higher order\nprocedure, and here's the higher order procedure\nthat does that.",
    "start": "1168350",
    "end": "1174390"
  },
  {
    "text": "It's called MAP, and what MAP\ndoes is it takes a List, takes",
    "start": "1174390",
    "end": "1180100"
  },
  {
    "text": "a List l, and it takes a\nprocedure p, and it returns",
    "start": "1180100",
    "end": "1185700"
  },
  {
    "text": "the List of the elements gotten\nby applying p to each successive element in the List.\nAll right, so p to v1, p",
    "start": "1185700",
    "end": "1193445"
  },
  {
    "text": "to v2, p of en. Right, so I think of taking this\nList and transforming it",
    "start": "1193445",
    "end": "1199669"
  },
  {
    "text": "by applying p to each element. And you see all this procedure\nis is exactly the general",
    "start": "1199670",
    "end": "1206200"
  },
  {
    "text": "strategy I said. Instead of multiply by 10,\nit's do the procedure. If the List is empty,\nreturn nil.",
    "start": "1206200",
    "end": "1213150"
  },
  {
    "text": "Otherwise, apply p to the first\nelement of the List. Right, apply p to car of l, and\ncons that onto the result",
    "start": "1213150",
    "end": "1221990"
  },
  {
    "text": "of applying p to everything in\nthe cdr of the List, so that's a general procedure\ncalled MAP.",
    "start": "1221990",
    "end": "1230110"
  },
  {
    "text": "And I could define Scale-List\nin terms of MAP.",
    "start": "1230110",
    "end": "1239590"
  },
  {
    "text": "Let me show you that first. But I could say Scale-List is\nanother way to define it is",
    "start": "1239590",
    "end": "1246650"
  },
  {
    "text": "just MAP along the List by the\nprocedure, which takes an item",
    "start": "1246650",
    "end": "1253950"
  },
  {
    "text": "and multiplies it by s.  Right, so this is really the\nway I should think about",
    "start": "1253950",
    "end": "1261260"
  },
  {
    "text": "scaling the List, build that\nactual recursion into the general strategy, not to every\nparticular procedure I write.",
    "start": "1261260",
    "end": "1267570"
  },
  {
    "text": "And of course, one of the values\nof doing this is that you start to see commonality. Right, again you're capturing\ngeneral patterns of usage.",
    "start": "1267570",
    "end": "1276420"
  },
  {
    "text": "For instance, if I said MAP,\nthe square procedure, down",
    "start": "1276420",
    "end": "1282610"
  },
  {
    "text": "this List 1-TO-4, then I'd end\nup with 1, 4, 9 and 16.",
    "start": "1282610",
    "end": "1292690"
  },
  {
    "text": "Right, or if I said MAP down\nthis List, lambda of x plus",
    "start": "1292690",
    "end": "1302710"
  },
  {
    "text": "x10, if I MAP that down 1-TO-4,\nthen I'd get the List",
    "start": "1302710",
    "end": "1311020"
  },
  {
    "text": "where everything had 10 added\nto it: right, so I'd get 11, 12, 13, 14.",
    "start": "1311020",
    "end": "1320400"
  },
  {
    "text": "And you can see that's going\nto be a very, very common idea: doing something to every\nelement in the List.",
    "start": "1320400",
    "end": "1328760"
  },
  {
    "text": "One thing you might think about\nis writing MAP in an iterative style. The one I wrote happens to\nevolve a recursive process,",
    "start": "1328760",
    "end": "1335460"
  },
  {
    "text": "but we could just as easily have\nmade one that evolves an iterative process. But see the interesting thing\nabout it is that once you",
    "start": "1335460",
    "end": "1341610"
  },
  {
    "text": "start thinking in\nterms of MAP-- see, once you say scale is just\nMAP, you stop thinking",
    "start": "1341610",
    "end": "1347170"
  },
  {
    "text": "about whether it's iterative\nor recursive, and you just say, well there's this\naggregate, there's this List,",
    "start": "1347170",
    "end": "1352380"
  },
  {
    "text": "and what I do is transform every\nitem in the List, and I stop thinking about the\nparticular control structure in order.",
    "start": "1352380",
    "end": "1359049"
  },
  {
    "text": "That's a very, very important\nidea, and it, I guess it",
    "start": "1359050",
    "end": "1365190"
  },
  {
    "text": "really comes out of APL. It's, sort of, the really\nimportant idea in APL that you stop thinking about control\nstructures, and you start",
    "start": "1365190",
    "end": "1372020"
  },
  {
    "text": "thinking about operations on\naggregates, and then about halfway through this course,\nwe'll see when we talk about",
    "start": "1372020",
    "end": "1378330"
  },
  {
    "text": "something called stream\nprocessing, how that view of the world really comes\ninto its glory. This is just us a, sort\nof, cute idea.",
    "start": "1378330",
    "end": "1385400"
  },
  {
    "text": "But we'll see much more\napplications of that later on. Well let me mention that there's\nsomething that's very",
    "start": "1385400",
    "end": "1393560"
  },
  {
    "text": "similar to MAP that's also a\nuseful idea, and that's-- see, MAP says I take a List, I\napply something to each item,",
    "start": "1393560",
    "end": "1403130"
  },
  {
    "text": "and I return a List of the\nsuccessive values. There's another thing I might\ndo, which is very, very",
    "start": "1403130",
    "end": "1408200"
  },
  {
    "text": "similar, which is take a List\nand some action you want to do and then do it to each item\nin the List in sequence.",
    "start": "1408200",
    "end": "1416470"
  },
  {
    "text": "Don't make a List of the\nvalues, just do this particular action, and that's\nsomething that's very much like MAP.",
    "start": "1416470",
    "end": "1425040"
  },
  {
    "text": "It's called for-each, and\nfor-each takes a procedure and a List, and what it's going to\ndo is do something to every",
    "start": "1425040",
    "end": "1432970"
  },
  {
    "text": "item in the List. So basically\nwhat it does: it says if the List is not empty, right, if\nthe List is not null, then",
    "start": "1432970",
    "end": "1442250"
  },
  {
    "text": "what I do is, I apply my\nprocedure to the first item in the List, and then I do this\nthing to the rest of the List.",
    "start": "1442250",
    "end": "1452130"
  },
  {
    "text": "I apply for-each to the\ncdr of the List. All right, so I do it to the\nfirst of the List, do it to",
    "start": "1452130",
    "end": "1457660"
  },
  {
    "text": "the rest of the List, and of\ncourse, when I call it recursively, that's going to do\nit to the rest of the rest",
    "start": "1457660",
    "end": "1462920"
  },
  {
    "text": "of the List and so on. And finally, when I get done, I\nhave to just do something to say I'm done, so we'll return\nthe message \"done.\" So that's",
    "start": "1462920",
    "end": "1470930"
  },
  {
    "text": "very, very similar to MAP. It's mostly different\nin what it returns. And so for example, if I had\nsome procedure that printed",
    "start": "1470930",
    "end": "1478920"
  },
  {
    "text": "things on the screen, if I\nwanted to print everything in the List, I could say for-each,\nprint this List. Or",
    "start": "1478920",
    "end": "1487160"
  },
  {
    "text": "if I had a List of figures, and\nI wanted to draw them on the display, I could say\nfor-each, display on the",
    "start": "1487160",
    "end": "1493900"
  },
  {
    "text": "screen this figure.  Let's take questions.",
    "start": "1493900",
    "end": "1500970"
  },
  {
    "text": "AUDIENCE: Does it create a new\ncopy with something done to it, unless you explicitly\ntell it to do that?",
    "start": "1500970",
    "end": "1506744"
  },
  {
    "text": "Is that correct? PROFESSOR: Right. Yeah, that's right. For-each does not create\na List. It just",
    "start": "1506744",
    "end": "1514020"
  },
  {
    "text": "sort of does something. So if you have a bunch of things\nyou want to do and you're not worried about\nvalues like printing",
    "start": "1514020",
    "end": "1519720"
  },
  {
    "text": "something, or drawing something\non the screen, or ringing the bell on the\nterminal, or for something, you can say for-each, you know,\ndo this for-each of",
    "start": "1519720",
    "end": "1526760"
  },
  {
    "text": "those things in the List,\nwhereas MAP actually builds you this new collection\nof values that you",
    "start": "1526760",
    "end": "1531780"
  },
  {
    "text": "might want to use. It's just a subtle difference\nbetween them. AUDIENCE: Could you write MAP\nusing for-each, so that you",
    "start": "1531780",
    "end": "1537590"
  },
  {
    "text": "did some sort of cons or\nsomething to build the List back up? PROFESSOR: Well, sort of. I mean, I probably could.",
    "start": "1537590",
    "end": "1544570"
  },
  {
    "text": "I can't think of how to do it\nright offhand, but yeah, I could arrange something.",
    "start": "1544570",
    "end": "1551380"
  },
  {
    "text": "AUDIENCE: The vital difference\nbetween MAP and for-each is one is recursive and the other\nis not in the sense you",
    "start": "1551380",
    "end": "1557320"
  },
  {
    "text": "defined early yesterday,\nI believe. PROFESSOR: Yeah, about MAP and\nfor-each and recursion.",
    "start": "1557320",
    "end": "1563659"
  },
  {
    "text": "Yeah, that's a good point. ",
    "start": "1563660",
    "end": "1569420"
  },
  {
    "text": "For the MAP procedure I\nwrote, that happens to be a recursive process. And the reason for that is that\nwhen you've done this",
    "start": "1569420",
    "end": "1576130"
  },
  {
    "text": "thing to the rest of the List,\nyou're waiting for that value so that you can stick it on to\nthe beginning of the List,",
    "start": "1576130",
    "end": "1581830"
  },
  {
    "text": "whereas for-each doesn't\nreally have any values to wait for. So that turns out to be\nan iterative process. That's not fundamental.",
    "start": "1581830",
    "end": "1587590"
  },
  {
    "text": "I could have defined MAP so\nthat it's evolved by an iterative process. I just didn't happen to.",
    "start": "1587590",
    "end": "1593670"
  },
  {
    "text": "AUDIENCE: If you were to cons\nfor each with a List that had embedded Lists, I imagine\nit would work, right?",
    "start": "1593670",
    "end": "1603210"
  },
  {
    "text": "It would give you the internal\nelements of each of those internal Lists?",
    "start": "1603210",
    "end": "1608940"
  },
  {
    "text": "PROFESSOR: OK, the question\nis if I [UNINTELLIGIBLE] for each or MAP, for that\nmatter, with a List that had",
    "start": "1608940",
    "end": "1614420"
  },
  {
    "text": "Lists in it-- although we haven't really\nlooked at that yet--",
    "start": "1614420",
    "end": "1619430"
  },
  {
    "text": "would that work. The answer is yes in the sense\nI mean work and no in the",
    "start": "1619430",
    "end": "1624610"
  },
  {
    "text": "sense that you mean work,\nbecause all that-- see if I give you a List, where\nhanging off here is, you",
    "start": "1624610",
    "end": "1636190"
  },
  {
    "text": "know, is something that's not\na number, maybe another List or you know, another cons or\nsomething, for-each just says",
    "start": "1636190",
    "end": "1642669"
  },
  {
    "text": "do something to each item in\nthis List. It goes down successively looking\nat the cdrs. AUDIENCE: OK. PROFESSOR: And as far as it's\nconcerned, the first item in",
    "start": "1642670",
    "end": "1649140"
  },
  {
    "text": "this List is whatever\nis hanging off here. AUDIENCE: Mhm. PROFESSOR: That might or might\nnot be the right thing. AUDIENCE: So it wouldn't\ngo down into the--",
    "start": "1649140",
    "end": "1655670"
  },
  {
    "text": "PROFESSOR: Absolutely not. I could certainly write\nsomething else. There's another, what you're\nlooking for is a common",
    "start": "1655670",
    "end": "1660930"
  },
  {
    "text": "pattern of usage called tree\nrecursion, where you take a List, and you actually go all\nthe way down to the what's",
    "start": "1660930",
    "end": "1666523"
  },
  {
    "text": "called the leaves of the tree. And you could write such a\nthing, but that's not for-each and it's not MAP.",
    "start": "1666523",
    "end": "1672420"
  },
  {
    "text": "Remember, these things\nare really being very simple minded. OK, no more questions? All right, let's break.",
    "start": "1672420",
    "end": "1678998"
  },
  {
    "text": "[MUSIC PLAYING]",
    "start": "1678998",
    "end": "1722480"
  },
  {
    "text": "PROFESSOR: What I'd like to do\nnow is spend the rest of this time talking about one example,\nand this example, I",
    "start": "1722480",
    "end": "1730960"
  },
  {
    "text": "think, pretty much summarizes\neverything that we've done up until now: all right, and that's\nList structure and",
    "start": "1730960",
    "end": "1738050"
  },
  {
    "text": "issues of abstraction, and\nrepresentation and capturing commonality with higher order\nprocedures, and also is going",
    "start": "1738050",
    "end": "1745620"
  },
  {
    "text": "to introduce something we\nhaven't really talked about a lot yet-- what I said is the\nmajor third theme in this",
    "start": "1745620",
    "end": "1753160"
  },
  {
    "text": "course: meta-linguistic\nabstraction, which is the idea that one of the ways of\ntackling complexity in",
    "start": "1753160",
    "end": "1760929"
  },
  {
    "text": "engineering design is to build\na suitable powerful language.",
    "start": "1760930",
    "end": "1767750"
  },
  {
    "text": "You might recall what I said was\npretty much the very most important thing that we're\ngoing to tell you in this",
    "start": "1767750",
    "end": "1773620"
  },
  {
    "text": "course is that when you think\nabout a language, you think",
    "start": "1773620",
    "end": "1779010"
  },
  {
    "text": "about it in terms of what are\nthe primitives; what are the means of combination--",
    "start": "1779010",
    "end": "1786225"
  },
  {
    "text": " right, what are the things that\nallow you to build bigger",
    "start": "1786225",
    "end": "1792310"
  },
  {
    "text": "things; and then what are the\nmeans of abstraction. ",
    "start": "1792310",
    "end": "1801169"
  },
  {
    "text": "How do you take those bigger\nthings that you've built and put black boxes around them and\nuse them as elements in",
    "start": "1801170",
    "end": "1809620"
  },
  {
    "text": "making something even\nmore complicated? Now the particular language I'm\ngoing to talk about is an",
    "start": "1809620",
    "end": "1818169"
  },
  {
    "text": "example that was made up\nby a friend of ours called Peter Henderson. ",
    "start": "1818170",
    "end": "1828130"
  },
  {
    "text": "Peter Henderson is\nat the University of Stirling in Scotland. And what this language is about\nis making figures that",
    "start": "1828130",
    "end": "1839170"
  },
  {
    "text": "sort of look like this. This is this is a woodcut by\nEscher called \"Square Limit.\"",
    "start": "1839170",
    "end": "1849470"
  },
  {
    "text": "You, sort of, see it has this\ncomplicated, kind of, recursive, sort of, recursive\nkind of figure, where there's",
    "start": "1849470",
    "end": "1859170"
  },
  {
    "text": "this fish pattern in the middle\nand things sort of bleed out smaller and smaller\nin self similar ways.",
    "start": "1859170",
    "end": "1864570"
  },
  {
    "text": " Anyway, Peter Henderson's\nlanguage was for describing",
    "start": "1864570",
    "end": "1871450"
  },
  {
    "text": "figures that look like that and\ndesigning new ones that look like that and drawing\nthem on a display screen.",
    "start": "1871450",
    "end": "1880240"
  },
  {
    "text": "There's another theme that we'll\nsee illustrated by this",
    "start": "1880240",
    "end": "1886929"
  },
  {
    "text": "example, and that's the issue\nof what Gerry and I have already mentioned a lot: that\nthere's no real difference, in",
    "start": "1886930",
    "end": "1894300"
  },
  {
    "text": "some sense, between procedures\nand data. And anyway I hope by the end of\nthis morning, if you're not",
    "start": "1894300",
    "end": "1901820"
  },
  {
    "text": "already, you will be completely\nconfused about what the difference between\nprocedures and data are, if",
    "start": "1901820",
    "end": "1907715"
  },
  {
    "text": "you're not confused about\nthat already. Well in any case, let's start\ndescribing Peter's language.",
    "start": "1907715",
    "end": "1915370"
  },
  {
    "text": "I should start by telling you\nwhat the primitives are. This language is very\nsimple because there's only one primitive.",
    "start": "1915370",
    "end": "1920940"
  },
  {
    "text": " A primitive is not quite\nwhat you think it is.",
    "start": "1920940",
    "end": "1927480"
  },
  {
    "text": "There's only one primitive\ncalled a picture, and a picture is not quite what\nyou think it is. Here's an example.",
    "start": "1927480",
    "end": "1933950"
  },
  {
    "text": "This is a picture of George. ",
    "start": "1933950",
    "end": "1938980"
  },
  {
    "text": "The idea is that a picture in\nthis language is going to be",
    "start": "1938980",
    "end": "1943990"
  },
  {
    "text": "something that draws a figure\nscaled to fit a rectangle that",
    "start": "1943990",
    "end": "1950640"
  },
  {
    "text": "you specify. So here you see in [? Saint ?] [? Lawrence's ?] outline of a rectangle, that's\nnot really part of the",
    "start": "1950640",
    "end": "1957070"
  },
  {
    "text": "picture, but the picture--",
    "start": "1957070",
    "end": "1963210"
  },
  {
    "text": "you'll give it a rectangle, and\nit will draw this figure scaled to fit the rectangle. So for example, there's\nGeorge, and here,",
    "start": "1963210",
    "end": "1970929"
  },
  {
    "text": "this is also George. It's the same picture,\nright, just scaled to fit a different rectangle.",
    "start": "1970930",
    "end": "1977919"
  },
  {
    "text": "Here's George as a fat kid.  That's the same George.",
    "start": "1977920",
    "end": "1983920"
  },
  {
    "text": "It's all the same figure. All of these three things\nare the same picture in this language.",
    "start": "1983920",
    "end": "1989670"
  },
  {
    "text": "I'm just giving it different\nrectangles to scale itself in. ",
    "start": "1989670",
    "end": "1996300"
  },
  {
    "text": "OK, those are the primitives. That is the primitive.",
    "start": "1996300",
    "end": "2001420"
  },
  {
    "text": "Now let's start talking about\nthe means of combination and the operations. There is, for example, an\noperation called Rotate.",
    "start": "2001420",
    "end": "2011080"
  },
  {
    "text": "And what Rotate does is, if I\nhave a picture, say a picture that draws an \"A\" in some\nrectangle that I give it, the",
    "start": "2011080",
    "end": "2022080"
  },
  {
    "text": "Rotate of that-- say the Rotate by 90 degrees\nwould, if I give it a",
    "start": "2022080",
    "end": "2027490"
  },
  {
    "text": "rectangle, draw the same image,\nbut again, scaled to",
    "start": "2027490",
    "end": "2032850"
  },
  {
    "text": "fit that rectangle.  So that's Rotate\nby 90 degrees.",
    "start": "2032850",
    "end": "2038400"
  },
  {
    "text": "There's another operation called\nFlip that can flip something, either horizontally\nor vertically.",
    "start": "2038400",
    "end": "2044351"
  },
  {
    "text": "All right, so those are, sort\nof, operations, or you can think of those as means of\ncombination of one element.",
    "start": "2044351",
    "end": "2051010"
  },
  {
    "text": "I can put things together. There's a means of combination\ncalled Beside, and what Beside",
    "start": "2051010",
    "end": "2057349"
  },
  {
    "text": "does: it'll take two pictures,\nlet's say A and B--",
    "start": "2057350",
    "end": "2064524"
  },
  {
    "text": " and by picture I mean something\nthat's going to draw",
    "start": "2064525",
    "end": "2071230"
  },
  {
    "text": "an image in a specified\nrectangle-- and what Beside will do--",
    "start": "2071230",
    "end": "2078158"
  },
  {
    "text": "I have to say, Beside of A and\nB, the side of two pictures and some number, s.",
    "start": "2078159",
    "end": "2085590"
  },
  {
    "text": "And s will be a number\nbetween zero and one. ",
    "start": "2085590",
    "end": "2090960"
  },
  {
    "text": "And Beside will draw a picture\nthat looks like this. It will take the rectangle\nyou give it and scale its base by s.",
    "start": "2090960",
    "end": "2096480"
  },
  {
    "text": "Say s is 0.5.  And then over here\nit will draw--",
    "start": "2096480",
    "end": "2104980"
  },
  {
    "text": "it'll put the first picture,\nand over here it'll put the",
    "start": "2104980",
    "end": "2112070"
  },
  {
    "text": "second picture. Or for instance if I gave it a\ndifferent value of s, if I",
    "start": "2112070",
    "end": "2117250"
  },
  {
    "text": "said Beside with a 0.25, it\nwould do the same thing,",
    "start": "2117250",
    "end": "2127390"
  },
  {
    "text": "except the A would\nbe much skinnier.  So it would draw something\nlike that.",
    "start": "2127390",
    "end": "2138230"
  },
  {
    "text": "So there's a means of\ncombination Beside, and similarly there's an Above,\nwhich does the same thing",
    "start": "2138230",
    "end": "2143410"
  },
  {
    "text": "except it puts them vertically\ninstead of horizontally.  Well let's look at that.",
    "start": "2143410",
    "end": "2150470"
  },
  {
    "text": "All right, there's George and\nhis kid brother, which is,",
    "start": "2150470",
    "end": "2158830"
  },
  {
    "text": "right, constructed by taking\nGeorge and putting him Beside",
    "start": "2158830",
    "end": "2170630"
  },
  {
    "text": "the Above-- taking the empty picture, and\nthere's a thing called the empty picture, which does\nthe obvious thing--",
    "start": "2170630",
    "end": "2176650"
  },
  {
    "text": "putting the empty picture above\na copy of George, and then putting that whole\nthing Beside George. ",
    "start": "2176650",
    "end": "2188900"
  },
  {
    "text": "Here's something called P which\nis, again, George Beside",
    "start": "2188900",
    "end": "2198230"
  },
  {
    "text": "Flipping George, I think,\nhorizontally in this case, and then Rotating the whole result\n180 degrees and putting them",
    "start": "2198230",
    "end": "2206400"
  },
  {
    "text": "Beside one another with the\nbasic rectangle divided at 0.5, right, and I can call that\nP. And then I can take P,",
    "start": "2206400",
    "end": "2219320"
  },
  {
    "text": "and put it above the Flipped\ncopy of itself, and I can call that Q.",
    "start": "2219320",
    "end": "2229650"
  },
  {
    "text": "Notice how rapidly that we've\nbuilt up complexity, just in,",
    "start": "2229650",
    "end": "2235569"
  },
  {
    "text": "you know, 15 seconds, you've\ngotten from George to that thing Q. Why is that?",
    "start": "2235570",
    "end": "2242260"
  },
  {
    "text": "How are how we able to\ndo that so fast? The answer is the closure\nproperty.",
    "start": "2242260",
    "end": "2248670"
  },
  {
    "text": "See, it's the fact that when\nI take a picture and put it Beside another picture, that's\nthen, again, a picture that I",
    "start": "2248670",
    "end": "2255560"
  },
  {
    "text": "can go and Rotate and Flip or\nput Above something else. Right, and when I take that\nelement P, which is the Beside",
    "start": "2255560",
    "end": "2261645"
  },
  {
    "text": "or the Flip or the Rotate\nof something, that's, again, a picture. Right, the world of pictures is\nclosed under those means of",
    "start": "2261645",
    "end": "2269420"
  },
  {
    "text": "combination. So whenever I have something,\nI can turn right around and use that as an element\nin something else.",
    "start": "2269420",
    "end": "2276480"
  },
  {
    "text": "So maybe better than List and\nsegments, that just gives you an image for how fast you can\nbuild up complexity, because",
    "start": "2276480",
    "end": "2282020"
  },
  {
    "text": "operations are closed. ",
    "start": "2282020",
    "end": "2287500"
  },
  {
    "text": "OK, well before we go on with\nbuilding more things, let's talk about how this language\nis actually implemented.",
    "start": "2287500",
    "end": "2294345"
  },
  {
    "text": " The basic element that sits\nunder the table here is a",
    "start": "2294345",
    "end": "2303270"
  },
  {
    "text": "thing called a rectangle, and\nwhat a rectangle is going to be, it's a thing that specified\nby an origin that's",
    "start": "2303270",
    "end": "2316900"
  },
  {
    "text": "going to be some vector\nthat says where the rectangle starts. And then there's going to be\nsome other vector that I'm",
    "start": "2316900",
    "end": "2324019"
  },
  {
    "text": "going to call the horizontal\npart of the rectangle, and another picture called the",
    "start": "2324020",
    "end": "2337650"
  },
  {
    "text": "vertical part of the rectangle. And those three pieces are the\nelements: where the lower",
    "start": "2337650",
    "end": "2343789"
  },
  {
    "text": "vertex is, how you get to the\nnext vertex over here, and how you get to the vertex\nover there.",
    "start": "2343790",
    "end": "2349630"
  },
  {
    "text": "The three vectors specify\na rectangle. ",
    "start": "2349630",
    "end": "2356080"
  },
  {
    "text": "Now to actually build\nrectangles, what I'll assume is that we have a constructor\ncalled \"make rectangle,\" or",
    "start": "2356080",
    "end": "2363380"
  },
  {
    "text": "\"make-rect,\" and selectors for\nhoriz and vert and origin that",
    "start": "2363380",
    "end": "2377910"
  },
  {
    "text": "get out the pieces of\nthat rectangle. And well, you know a lot of\nways you can do this now. You can do it by using pairs in\nsome way or other standard",
    "start": "2377910",
    "end": "2387190"
  },
  {
    "text": "List or not. But in any case, the\nimplementation of these things, that's George's\nproblem. It's just a data representation\nproblem.",
    "start": "2387190",
    "end": "2393300"
  },
  {
    "text": "So let's assume we have these\nrectangles to work with. ",
    "start": "2393300",
    "end": "2398902"
  },
  {
    "text": "OK.  Now the idea of this, remember\nwhat's got to happen.",
    "start": "2398902",
    "end": "2405090"
  },
  {
    "text": "Somehow we have to worry about\ntaking the figure and scaling",
    "start": "2405090",
    "end": "2410250"
  },
  {
    "text": "it to fit some rectangle that\nyou give it, that's the basic",
    "start": "2410250",
    "end": "2415260"
  },
  {
    "text": "thing you have to arrange, that\nthese pictures can do. ",
    "start": "2415260",
    "end": "2422440"
  },
  {
    "text": "How do we think about that? Well, one way to think about\nthat is that any time I give you a rectangle, that defines,\nin some sense, a",
    "start": "2422440",
    "end": "2440050"
  },
  {
    "text": "transformation from\nthe standard square into that rectangle.",
    "start": "2440050",
    "end": "2445685"
  },
  {
    "text": "Let me say what I mean. By the standard square, I'll\nmean something, which is a square whose coordinates are\n0,0, and 1,0, and 0,1 and 1,1.",
    "start": "2445685",
    "end": "2458420"
  },
  {
    "text": " And there's some sort of\nthe obvious scaling",
    "start": "2458420",
    "end": "2464590"
  },
  {
    "text": "transformation, which maps this\nto that and this to that,",
    "start": "2464590",
    "end": "2470180"
  },
  {
    "text": "and sort of, stretches\neverything uniformly. So we take a line segment like\nthis and end up mapping it to",
    "start": "2470180",
    "end": "2482755"
  },
  {
    "text": "a line segment like that, so\nsome point xy goes to some",
    "start": "2482755",
    "end": "2491390"
  },
  {
    "text": "other point up there. And although it's not important,\nwith a little",
    "start": "2491390",
    "end": "2496870"
  },
  {
    "text": "vector algebra, you could\nwrite that formula. The thing that xy goes to, the\npoint that xy goes to is",
    "start": "2496870",
    "end": "2503670"
  },
  {
    "text": "gotten by taking the origin of\nthe rectangle and then adding",
    "start": "2503670",
    "end": "2508950"
  },
  {
    "text": "that as a vector to-- well, take x, the x coordinate,\nwhich is something",
    "start": "2508950",
    "end": "2514300"
  },
  {
    "text": "between zero and one, multiply\nthat by the horizontal vector",
    "start": "2514300",
    "end": "2521030"
  },
  {
    "text": "of the rectangle; and take the\ny coordinate, which is also",
    "start": "2521030",
    "end": "2529670"
  },
  {
    "text": "something between zero and one\nand multiply that by the vertical vector of\nthe rectangle.",
    "start": "2529670",
    "end": "2536690"
  },
  {
    "text": "That's just a little\nlinear algebra. Anyway, that's the formula,\nwhich is the right obvious",
    "start": "2536690",
    "end": "2542600"
  },
  {
    "text": "transformation that takes things\ninto the unit square, into the interior of\nthat rectangle.",
    "start": "2542600",
    "end": "2547760"
  },
  {
    "text": " OK well, let's actually look\nat that as a procedure.",
    "start": "2547760",
    "end": "2555200"
  },
  {
    "text": "So what we want is the thing\nwhich tells us that particular transformation that a\nrectangle defines.",
    "start": "2555200",
    "end": "2564070"
  },
  {
    "text": "So here's the procedure. I'll call it coordinate-map. Coordinate-map is the thing that\ntakes as its argument a",
    "start": "2564070",
    "end": "2571180"
  },
  {
    "text": "rectangle and returns for you\na procedure on points.",
    "start": "2571180",
    "end": "2577605"
  },
  {
    "text": " Right, so for each rectangle you\nget a way of transforming",
    "start": "2577605",
    "end": "2583599"
  },
  {
    "text": "a point xy into that\nrectangle. And how do you get it? Well I just--",
    "start": "2583600",
    "end": "2588750"
  },
  {
    "text": "writing in List what I wrote\nthere on the blackboard-- I add to the origin\nof the rectangle",
    "start": "2588750",
    "end": "2598299"
  },
  {
    "text": "the result of adding-- I take the horizontal part of\nthe rectangle; I scale that by",
    "start": "2598300",
    "end": "2606080"
  },
  {
    "text": "the x coordinate of the point. I take the vertical vector\nof the rectangle.",
    "start": "2606080",
    "end": "2613750"
  },
  {
    "text": "I scale that by the y coordinate\nof the point, and then add all those\nthree things up.",
    "start": "2613750",
    "end": "2620380"
  },
  {
    "text": "That's the procedure. That is the procedure that I'm\ngoing to apply to a point. ",
    "start": "2620380",
    "end": "2626890"
  },
  {
    "text": "And this whole thing is\ngenerated for each rectangle.",
    "start": "2626890",
    "end": "2633170"
  },
  {
    "text": "So any rectangle defines a\ncoordinate MAP, which is a procedure on points.",
    "start": "2633170",
    "end": "2639369"
  },
  {
    "text": "OK. ",
    "start": "2639370",
    "end": "2646720"
  },
  {
    "text": "All right, so for example,\nGeorge here, my original",
    "start": "2646720",
    "end": "2652020"
  },
  {
    "text": "George, might have been\nsomething that I specified by segments in the unit square, and\nthen for each rectangle I",
    "start": "2652020",
    "end": "2660970"
  },
  {
    "text": "give this thing, I'm going to\ndraw those segments inside",
    "start": "2660970",
    "end": "2667599"
  },
  {
    "text": "that rectangle. How actually do I do that? Well I take each segment in my\noriginal reference George that",
    "start": "2667600",
    "end": "2675819"
  },
  {
    "text": "was specified, and to each of\nthe end points of those segments, I applied the\ncoordinate MAP of the",
    "start": "2675820",
    "end": "2682490"
  },
  {
    "text": "particular rectangle I\nwant to draw it in. So for example, this lower\nrectangle, this George as a",
    "start": "2682490",
    "end": "2687530"
  },
  {
    "text": "fat kid rectangle, has\nits coordinate MAP. And if I want to draw this\nimage, what I do is for each",
    "start": "2687530",
    "end": "2696310"
  },
  {
    "text": "segment here, say for this\nsegment, I transformed that",
    "start": "2696310",
    "end": "2701500"
  },
  {
    "text": "point by the coordinate MAP,\ntransform that point by the coordinate MAP. That will give me this point\nand that point and draw the",
    "start": "2701500",
    "end": "2707890"
  },
  {
    "text": "segment between them. Right, that's the idea.",
    "start": "2707890",
    "end": "2712970"
  },
  {
    "text": "Right, and if I give it a\ndifferent rectangle like this one, that's a different\ncoordinate MAP, so I get a different image of those\nline segments.",
    "start": "2712970",
    "end": "2719281"
  },
  {
    "text": "Well how do we actually get\na picture to start with? I can build a picture to start\nwith out of a List of line",
    "start": "2719281",
    "end": "2725250"
  },
  {
    "text": "segments initially. Here's a procedure that builds\nwhat I'll call a primitive",
    "start": "2725250",
    "end": "2731680"
  },
  {
    "text": "picture, meaning one I, sort of,\ngot that didn't come out of Beside or Rotate\nor something.",
    "start": "2731680",
    "end": "2737680"
  },
  {
    "text": "It starts with a List of\nline segments, and now",
    "start": "2737680",
    "end": "2743270"
  },
  {
    "text": "it does what I said. What's a picture have to be? First of all it's a procedure\nthat's defined on rectangles.",
    "start": "2743270",
    "end": "2748790"
  },
  {
    "text": " What does it do? It says for each--",
    "start": "2748790",
    "end": "2754880"
  },
  {
    "text": "this is going to be a List\nof line segments-- for each segment, for each s,\nwhich is a segment in this",
    "start": "2754880",
    "end": "2762510"
  },
  {
    "text": "List of segments, well\nit draws a line. What line does it draw?",
    "start": "2762510",
    "end": "2770690"
  },
  {
    "text": "It gets the start point of that\nsegment, transforms that",
    "start": "2770690",
    "end": "2776230"
  },
  {
    "text": "by the coordinate MAP\nof the rectangle. That's the first new point\nit wants to do.",
    "start": "2776230",
    "end": "2781829"
  },
  {
    "text": "Then it takes the endpoint of\nthe segment, transforms that by the coordinate MAP of the\nrectangle, and then draws a",
    "start": "2781830",
    "end": "2787309"
  },
  {
    "text": "line between. Let's assume drawline is some\nprimitive that's built into the system that actually draws\na line on the display.",
    "start": "2787310",
    "end": "2794250"
  },
  {
    "text": "All right, so it transforms\nthe endpoints by the coordinate MAP of the rectangle,\ndraws a line between them, does that\nfor each s in",
    "start": "2794250",
    "end": "2803109"
  },
  {
    "text": "this List of segments. And now remember again, a\npicture is a procedure that",
    "start": "2803110",
    "end": "2809000"
  },
  {
    "text": "takes a rectangle as argument. So when you hand it a rectangle,\nthis is what it does: draws those lines.",
    "start": "2809000",
    "end": "2817140"
  },
  {
    "text": "All right, so there's-- how would I actually\nuse this thing? Let's make it a little\nbit more concrete.",
    "start": "2817140",
    "end": "2823325"
  },
  {
    "text": " Right, I would say for instance,\ndefine R to be",
    "start": "2823325",
    "end": "2841069"
  },
  {
    "text": "make-rectangle of some stuff,\nand I'd have to specify some",
    "start": "2841070",
    "end": "2846520"
  },
  {
    "text": "vectors here using\nmake-vector. And then I could say, define\nsay, G to be make-picture, and",
    "start": "2846520",
    "end": "2865010"
  },
  {
    "text": "then some stuff. And what I'd have to specify\nhere is a List of line",
    "start": "2865010",
    "end": "2871540"
  },
  {
    "text": "segments, right, using\nmake segment. Make-segment might be made out\nof vectors, and vectors might",
    "start": "2871540",
    "end": "2877480"
  },
  {
    "text": "be made out of points. And then if I actually wanted to\nsee the image of G inside a",
    "start": "2877480",
    "end": "2883970"
  },
  {
    "text": "rectangle, well a picture is\na procedure that takes a",
    "start": "2883970",
    "end": "2890280"
  },
  {
    "text": "rectangle as argument. So if I then called G with an\ninput of R, that would cause",
    "start": "2890280",
    "end": "2898720"
  },
  {
    "text": "whatever image G is worrying\nabout to be drawn inside the rectangle R. Right, so that's\nhow you'd use that.",
    "start": "2898720",
    "end": "2906722"
  },
  {
    "text": "[MUSIC PLAYING]",
    "start": "2906722",
    "end": "2948072"
  },
  {
    "text": "PROFESSOR: Well why is it that\nI say this example is nice? You probably don't\nthink it's nice.",
    "start": "2948072",
    "end": "2953680"
  },
  {
    "text": "You probably think it's\nmore weird than nice. Right, representing these\npictures as procedures, which",
    "start": "2953680",
    "end": "2958740"
  },
  {
    "text": "do complicated things\nwith rectangles. So why is it nice? ",
    "start": "2958740",
    "end": "2965460"
  },
  {
    "text": "The reason it's nice is that\nonce you've implemented the primitives in this way, the\nmeans of combination just fall",
    "start": "2965460",
    "end": "2972670"
  },
  {
    "text": "out by implementing\nprocedures. Let me show you what I mean. Suppose we want to\nimplement Beside.",
    "start": "2972670",
    "end": "2978650"
  },
  {
    "text": " So I'd like to--",
    "start": "2978650",
    "end": "2984040"
  },
  {
    "text": "suppose I've got a picture. Let's call it P1. P1 is going to be-- and\nnow remember what a",
    "start": "2984040",
    "end": "2989500"
  },
  {
    "text": "picture really is. It's a thing that if you can\nhand it some rectangle, it",
    "start": "2989500",
    "end": "2996800"
  },
  {
    "text": "will cause an image to be drawn\nin whatever rectangle you hand it.",
    "start": "2996800",
    "end": "3003520"
  },
  {
    "text": "And suppose P2 two is some other\npicture, and you hand that a rectangle.",
    "start": "3003520",
    "end": "3009570"
  },
  {
    "text": "And whatever rectangle\nyou hand it, it draws some picture. ",
    "start": "3009570",
    "end": "3014920"
  },
  {
    "text": "And now if I'd like to implement\nBeside of P1 and P2",
    "start": "3014920",
    "end": "3025230"
  },
  {
    "text": "with a scale factor A, well\nwhat does that have to be? That's got to be picture. It's got to be a thing that you\nhand it a rectangle, and",
    "start": "3025230",
    "end": "3032440"
  },
  {
    "text": "it draws something in\nthat rectangle. So if hand Beside\nthis rectangle--",
    "start": "3032440",
    "end": "3038350"
  },
  {
    "text": "let's hand it a rectangle. Well what's it going to do? it's going to take this\nrectangle and split it into",
    "start": "3038350",
    "end": "3045900"
  },
  {
    "text": "two at a ratio of A and one\nminus A. And it will say, oh",
    "start": "3045900",
    "end": "3053470"
  },
  {
    "text": "sure, now I've got\ntwo rectangles. ",
    "start": "3053470",
    "end": "3062370"
  },
  {
    "text": "And now it goes off to P1 and\nsays P1, well draw yourself in this rectangle, and goes off\nto P2, and says, P2, fine,",
    "start": "3062370",
    "end": "3070220"
  },
  {
    "text": "draw yourself in\nthis rectangle. The only computation it has to\ndo is figure out what these",
    "start": "3070220",
    "end": "3075690"
  },
  {
    "text": "rectangles are. Remember a rectangle is\nspecified by an origin and a",
    "start": "3075690",
    "end": "3081660"
  },
  {
    "text": "horizontal vector and a vertical\nvector, so it's got to figure out what\nthese things are.",
    "start": "3081660",
    "end": "3087400"
  },
  {
    "text": "So for this first rectangle, the\norigin turns out to be the origin of the original\nrectangle, and the vertical",
    "start": "3087400",
    "end": "3094369"
  },
  {
    "text": "vector is the same as the\nvertical vector of the original rectangle. The horizontal vector is the\nhorizontal vector of the",
    "start": "3094370",
    "end": "3103510"
  },
  {
    "text": "original rectangle\nscaled by A. And that's the first rectangle.",
    "start": "3103510",
    "end": "3109680"
  },
  {
    "text": "The second rectangle, the origin\nis the original origin",
    "start": "3109680",
    "end": "3115390"
  },
  {
    "text": "plus that horizontal vector\nscaled by A. The horizontal",
    "start": "3115390",
    "end": "3121910"
  },
  {
    "text": "vector of the second rectangle\nis the rest of the horizontal vector of the first one, which\nis 1 minus A times the",
    "start": "3121910",
    "end": "3130780"
  },
  {
    "text": "original H, and the vertical\nvector is still v. But basically it goes and\nconstructs these two",
    "start": "3130780",
    "end": "3137569"
  },
  {
    "text": "rectangles, and the important\npoint is having constructed the rectangles, it says OK,\np1, you draw yourself in",
    "start": "3137570",
    "end": "3142940"
  },
  {
    "text": "there, and p2, you draw yourself\nin there, and that's all Beside has to do. All right, let's look at\nthat piece of code.",
    "start": "3142940",
    "end": "3149115"
  },
  {
    "start": "3149115",
    "end": "3154500"
  },
  {
    "text": "Beside of a picture and another\npicture with some",
    "start": "3154500",
    "end": "3165420"
  },
  {
    "text": "scaling ratio is first of all,\nsince it's a picture, a",
    "start": "3165420",
    "end": "3171030"
  },
  {
    "text": "procedure that's going to take\na rectangle as argument. What's it going to do?",
    "start": "3171030",
    "end": "3177050"
  },
  {
    "text": "It says, p1 draw yourself in\nsome rectangle and p2 draw yourself in some other\nrectangle.",
    "start": "3177050",
    "end": "3183190"
  },
  {
    "text": "And now what are those\nrectangles? Well here's the computation. It makes a rectangle, and this\nis the algebra I just did on",
    "start": "3183190",
    "end": "3188680"
  },
  {
    "text": "the board: the origin,\nsomething; the horizontal vector, something; and the\nvertical vector, something. And for p2, the rectangle it\nwants has some other origin",
    "start": "3188680",
    "end": "3197790"
  },
  {
    "text": "and horizontal vector\nand vertical vector. But the important point is that\nall it's saying is, p1,",
    "start": "3197790",
    "end": "3203330"
  },
  {
    "text": "go do your thing in one\nrectangle, and p2, go do your thing in another rectangle. That's all the Beside\nhas to do.",
    "start": "3203330",
    "end": "3210920"
  },
  {
    "text": "OK, similarly Rotate--",
    "start": "3210920",
    "end": "3217059"
  },
  {
    "text": "see if I have this picture A,\nand I want to look at say",
    "start": "3217060",
    "end": "3224180"
  },
  {
    "text": "rotating A by 90 degrees, what\nthat should mean is, well take",
    "start": "3224180",
    "end": "3231050"
  },
  {
    "text": "this rectangle, which is origin\nand horizontal vector",
    "start": "3231050",
    "end": "3237010"
  },
  {
    "text": "and vertical vector, and now\npretend that it's really the rectangle that looks like this,\nwhich has an origin and",
    "start": "3237010",
    "end": "3245710"
  },
  {
    "text": "a horizontal vector up here, and\na vertical vector there, and now draw yourself with\nrespect to that rectangle.",
    "start": "3245710",
    "end": "3253619"
  },
  {
    "text": "Let me show you that\nas a procedure. All right, so we'll Rotate 90 of\nthe picture, because again,",
    "start": "3253620",
    "end": "3261570"
  },
  {
    "text": "a procedure for rectangle, which\nsays, OK picture, draw yourself in some rectangle; and\nthen this algebra is the",
    "start": "3261570",
    "end": "3269190"
  },
  {
    "text": "transformation on\nthe rectangle. It's the one which makes it\nlook like the rectangle is sideways, the origin is\nsomeplace else and the",
    "start": "3269190",
    "end": "3275220"
  },
  {
    "text": "vertical vector is someplace\nelse, and the horizontal vector is someplace else,\nand vertical vector is someplace else.",
    "start": "3275220",
    "end": "3281704"
  },
  {
    "text": "OK? OK. ",
    "start": "3281704",
    "end": "3286890"
  },
  {
    "text": "OK, again notice, the crucial\nthing that's going on here is you're using the representation\nof pictures as",
    "start": "3286890",
    "end": "3297080"
  },
  {
    "text": "procedures to automatically\nget the closure property, because what happens is, Beside\njust has this thing p1.",
    "start": "3297080",
    "end": "3305319"
  },
  {
    "text": "Beside doesn't care if that's\na primitive picture or it's line segments or if p1 is,\nitself, the result of doing",
    "start": "3305320",
    "end": "3311760"
  },
  {
    "text": "Aboves or Besides or Rotates. All Beside has to know about,\nsay, p1 is that if you hand p1",
    "start": "3311760",
    "end": "3317380"
  },
  {
    "text": "a rectangle, it will cause\nsomething to be drawn. And above that level, Beside\njust doesn't--",
    "start": "3317380",
    "end": "3323550"
  },
  {
    "text": "it's none of its business how p1\naccomplishes that drawing. All right, so you're using the\nprocedural representation to",
    "start": "3323550",
    "end": "3331140"
  },
  {
    "text": "ensure this closure.  OK. So implementing pictures as\nprocedures makes these means",
    "start": "3331140",
    "end": "3340010"
  },
  {
    "text": "of combination, you know, both\npretty simple and also, I think, elegant.",
    "start": "3340010",
    "end": "3346040"
  },
  {
    "text": "But that's not the\nreal punchline. The real punchline comes when\nyou look at the means of",
    "start": "3346040",
    "end": "3352030"
  },
  {
    "text": "abstraction in this language. Because what have we done? We've implemented the means of\ncombination themselves as",
    "start": "3352030",
    "end": "3362760"
  },
  {
    "text": "procedures.  And what that means is that when\nwe go to abstract in this",
    "start": "3362760",
    "end": "3368869"
  },
  {
    "text": "language, everything that List\nsupplies us for manipulating",
    "start": "3368870",
    "end": "3374890"
  },
  {
    "text": "procedures is automatically\navailable to do things in this",
    "start": "3374890",
    "end": "3380599"
  },
  {
    "text": "picture language. The technical term I want to\nsay is not only is this language implemented in List,\nobviously it is, but the",
    "start": "3380600",
    "end": "3389900"
  },
  {
    "text": "language is nicely embedded\nin List. What I mean is by",
    "start": "3389900",
    "end": "3399890"
  },
  {
    "text": "embedding the language in this\nway, all the power of List is automatically available\nas an extension to",
    "start": "3399890",
    "end": "3407680"
  },
  {
    "text": "whatever you want to do. And what do I mean by that? Example: say, suppose I want\nto make a thing that takes",
    "start": "3407680",
    "end": "3417410"
  },
  {
    "text": "four pictures A, B, C and D, and\nmakes a configuration that",
    "start": "3417410",
    "end": "3426089"
  },
  {
    "text": "looks like this. ",
    "start": "3426090",
    "end": "3432870"
  },
  {
    "text": "Well you might call that, you\nknow, four pictures or something, four-pict\nconfiguration. How do I do that? Well I can obviously do that.",
    "start": "3432870",
    "end": "3438700"
  },
  {
    "text": "I just write a procedure that\ntakes B above D and A above C",
    "start": "3438700",
    "end": "3446140"
  },
  {
    "text": "and puts those things\nbeside each other. So I automatically have List's\nability to do procedure",
    "start": "3446140",
    "end": "3451150"
  },
  {
    "text": "composition. And I didn't have to make\nthat specifically in the picture language. It's automatic from the fact\nthat the means of combination",
    "start": "3451150",
    "end": "3458710"
  },
  {
    "text": "are themselves procedures. Or suppose I wanted to do\nsomething a little bit more complicated.",
    "start": "3458710",
    "end": "3464200"
  },
  {
    "text": "I wanted to put in a parameter\nso that for each of these, I could independently specify\na rotation by 90 degrees.",
    "start": "3464200",
    "end": "3470530"
  },
  {
    "text": "That's just putting a parameter\nin the procedure. It's automatically there. Right, it automatically comes\nfrom the embedding.",
    "start": "3470530",
    "end": "3478470"
  },
  {
    "text": "Or even more, suppose I wanted\nto, you know, use recursion.",
    "start": "3478470",
    "end": "3484849"
  },
  {
    "text": "Let's look at a recursive\nmeans of combination on pictures.",
    "start": "3484850",
    "end": "3490740"
  },
  {
    "text": "I could say define-- let's see if you can figure out\nwhat this one is-- suppose I say define what it means\nto right-push a picture,",
    "start": "3490740",
    "end": "3502990"
  },
  {
    "text": "right-push a picture and some\ninteger N and some scale",
    "start": "3502990",
    "end": "3508770"
  },
  {
    "text": "factor A. I'll define this to\nsay if N equals 0, then the",
    "start": "3508770",
    "end": "3520000"
  },
  {
    "text": "answer is the picture. Otherwise I'm going to put--",
    "start": "3520000",
    "end": "3529724"
  },
  {
    "text": "oops, name change: P. Otherwise,\nI'm going to take P",
    "start": "3529724",
    "end": "3539080"
  },
  {
    "text": "and put it beside the results of\nrecursively right-pushing P",
    "start": "3539080",
    "end": "3549460"
  },
  {
    "text": "with N minus 1 and A and use a\nscale factor of A. OK, so if",
    "start": "3549460",
    "end": "3565660"
  },
  {
    "text": "N0 , it's P. Otherwise I put P\nwith a scale factor of A--",
    "start": "3565660",
    "end": "3571079"
  },
  {
    "text": "I'm sorry I didn't align\nthis right-- recursively beside the result of\nright-pushing P, N minus 1",
    "start": "3571080",
    "end": "3577070"
  },
  {
    "text": "times with a scale\nfactor of A. There's a recursive means\nof combination.",
    "start": "3577070",
    "end": "3583860"
  },
  {
    "text": "What's that look like? Well, here's what\nit looks like. There's George right-pushed\nagainst himself twice with a",
    "start": "3583860",
    "end": "3594250"
  },
  {
    "text": "scale factor of 0.75.",
    "start": "3594250",
    "end": "3599520"
  },
  {
    "text": "OK. Where'd that come from? How did I get all this\nfancy recursion? And the answer is just automatic, absolutely automatic.",
    "start": "3599520",
    "end": "3605240"
  },
  {
    "text": "Since these are procedures, the\nembedding says, well sure, I can define recursive\nprocedures.",
    "start": "3605240",
    "end": "3610440"
  },
  {
    "text": "I didn't have to arrange that. And of course, we can\ndo more complicated things of the same sort.",
    "start": "3610440",
    "end": "3616440"
  },
  {
    "text": "I could make something\nthat does an up-push. Right, that sort of goes like\nthis, by recursively putting",
    "start": "3616440",
    "end": "3621740"
  },
  {
    "text": "something above. Or I could make something\nthat, sort of, was this scheme. I might start out with a picture\nand then, sort of,",
    "start": "3621740",
    "end": "3633430"
  },
  {
    "text": "recursively both push it aside\nand above, and that might put something there.",
    "start": "3633430",
    "end": "3639420"
  },
  {
    "text": "And then up here I put the same\nrecursive thing, and I might end up with something\nlike this.",
    "start": "3639420",
    "end": "3645220"
  },
  {
    "text": "Right, so there's a procedure\nthat's a little bit more complicated than right-push\nbut not much.",
    "start": "3645220",
    "end": "3653799"
  },
  {
    "text": "I just do an Above\nand a Beside, rather than just a Beside. ",
    "start": "3653800",
    "end": "3661380"
  },
  {
    "text": "Now if I take that and apply\nthat with the idea of putting four pictures together, which I\ncan surely do; and I go and",
    "start": "3661380",
    "end": "3669500"
  },
  {
    "text": "I apply that to Q, which we\ndefined before, right, what I",
    "start": "3669500",
    "end": "3676460"
  },
  {
    "text": "end up with this is this thing,\nwhich is, sort of, the",
    "start": "3676460",
    "end": "3682310"
  },
  {
    "text": "square limit of Q, done twice. ",
    "start": "3682310",
    "end": "3687970"
  },
  {
    "text": "Right, and then we can compare\nthat with Escher's \"Square Limit.\" And you see, it's\nsort of the same idea.",
    "start": "3687970",
    "end": "3695109"
  },
  {
    "text": "Escher's is, of course,\nmuch, much prettier. If we go back and look at\nGeorge, right, if we go look",
    "start": "3695110",
    "end": "3703250"
  },
  {
    "text": "at George here-- see, I started with a fairly\narbitrary design, this picture of George and did\nthings with it.",
    "start": "3703250",
    "end": "3711170"
  },
  {
    "text": "Right, whereas if we go look at\nthe Escher picture, right, the Escher picture is not\nan arbitrary design.",
    "start": "3711170",
    "end": "3716200"
  },
  {
    "text": "It's this very, very clever\nthing, so that when you take this fish body and Rotate it and\nshrink it down, it bleeds",
    "start": "3716200",
    "end": "3723589"
  },
  {
    "text": "into the next one\nreally nicely.  And of course with George,\nI didn't really do",
    "start": "3723590",
    "end": "3730320"
  },
  {
    "text": "anything like that. So if we look at George, right,\nthere's a little bit of",
    "start": "3730320",
    "end": "3736299"
  },
  {
    "text": "match up, but not very nice,\nand it's pretty arbitrary. One very nice project, by the\nway, would be to write a",
    "start": "3736300",
    "end": "3743710"
  },
  {
    "text": "procedure that could take some\nbasic figure like this George thing and start moving the ends\nof the lines around, so",
    "start": "3743710",
    "end": "3750050"
  },
  {
    "text": "you got a really nice one when\nyou went and did that \"Square Limit\" process. That'd be a really nice\nthing to think about.",
    "start": "3750050",
    "end": "3758359"
  },
  {
    "text": "Well so, we can combine\nthings. We can recursive procedures. We can do all kinds of things,\nand that's all automatic.",
    "start": "3758360",
    "end": "3764680"
  },
  {
    "text": "Right, the important point, the\ndifference between merely implementing something in\na language and embedding something in the language, so\nthat you don't lose the",
    "start": "3764680",
    "end": "3771570"
  },
  {
    "text": "original power of the language,\nand what List is great at, see List is a lousy\nlanguage for doing any",
    "start": "3771570",
    "end": "3776680"
  },
  {
    "text": "particular problem. What it's good for is figuring\nout the right language that you want and embedding that in\nList. That's the real power of",
    "start": "3776680",
    "end": "3784000"
  },
  {
    "text": "this approach to design. Of course, we can go further. See, you saw the other thing\nthat we can do in List is",
    "start": "3784000",
    "end": "3790970"
  },
  {
    "text": "capture general methods of doing\nthings as higher order",
    "start": "3790970",
    "end": "3796800"
  },
  {
    "text": "procedures. And you probably just from me\ndrawing it got the idea that right-push and the analogous\nthing where you push something",
    "start": "3796800",
    "end": "3805600"
  },
  {
    "text": "up and up and up and up and this\ncorner push thing are all",
    "start": "3805600",
    "end": "3811570"
  },
  {
    "text": "generalizations of a common\nkind of idea. So just to illustrate and give\nyou practice in looking at a",
    "start": "3811570",
    "end": "3818210"
  },
  {
    "text": "fairly convoluted use of higher\norder procedures, let me show you the general idea\nof pushing some means of",
    "start": "3818210",
    "end": "3825280"
  },
  {
    "text": "combination to recursively\nrepeat it. So here's a good one\nto puzzle out.",
    "start": "3825280",
    "end": "3831240"
  },
  {
    "text": "We'll define it what it means\nto push using a means of",
    "start": "3831240",
    "end": "3839550"
  },
  {
    "text": "combination. Comb is going to be something\nlike the Beside or Above.",
    "start": "3839550",
    "end": "3845582"
  },
  {
    "text": "Well what's that going to be. That's going to be a procedure,\nremember what Beside actually was, right.",
    "start": "3845582",
    "end": "3853480"
  },
  {
    "text": "It took a picture, took two\npictures and a scale factor.",
    "start": "3853480",
    "end": "3858700"
  },
  {
    "text": "Using that I produced something\nthat took a level number and a picture and a scale\nfactor, that I called",
    "start": "3858700",
    "end": "3864800"
  },
  {
    "text": "right-push. So this is going to be something\nthat takes a picture, a level number and\na scale factor, and",
    "start": "3864800",
    "end": "3872700"
  },
  {
    "text": "it's going to say--  I'm going to do some\nrepeated operation.",
    "start": "3872700",
    "end": "3879520"
  },
  {
    "text": "I'm going to repeatedly apply\nthe procedure which takes a",
    "start": "3879520",
    "end": "3886100"
  },
  {
    "text": "picture and applies the means of\ncombination to the picture",
    "start": "3886100",
    "end": "3893540"
  },
  {
    "text": "and the original picture and the\none I took in here and the scale factor, and I do the\nthing which repeats this",
    "start": "3893540",
    "end": "3906099"
  },
  {
    "text": "procedure N times, and I apply\nthat whole thing to my",
    "start": "3906100",
    "end": "3915370"
  },
  {
    "text": "original picture.  Repeated here, in case you\nhaven't seen it, is another",
    "start": "3915370",
    "end": "3923390"
  },
  {
    "text": "higher order procedure that\ntakes a procedure and a number",
    "start": "3923390",
    "end": "3929660"
  },
  {
    "text": "and returns for you another\nprocedure that applies this procedure N times.",
    "start": "3929660",
    "end": "3936150"
  },
  {
    "text": "And I think some of you have\nalready written repeated as an exercise, but if you haven't,\nit's a very good exercise in",
    "start": "3936150",
    "end": "3941520"
  },
  {
    "text": "thinking about higher\norder procedures. But in any case, the result of\nthis repeated is what I apply to picture.",
    "start": "3941520",
    "end": "3947570"
  },
  {
    "text": " And having done that, that's\ngoing to capture--",
    "start": "3947570",
    "end": "3952880"
  },
  {
    "text": "that is the thing, the way I got\nfrom the idea of Beside to the idea of right-push So having\ndone that, I could say",
    "start": "3952880",
    "end": "3960760"
  },
  {
    "text": "define right-push to\nbe push of Beside.",
    "start": "3960760",
    "end": "3972790"
  },
  {
    "text": " Or if I say, define up-push to\nbe push of Beside, I'd get the",
    "start": "3972790",
    "end": "3980769"
  },
  {
    "text": "analogous thing or define\ncorner-push to be push of some appropriate thing that did both\nthe Beside and Above, or I could push anything.",
    "start": "3980770",
    "end": "3988340"
  },
  {
    "text": "Anyway this is, if you're having\ntrouble with lambdas, this is an excellent exercise\nin figuring",
    "start": "3988340",
    "end": "3993839"
  },
  {
    "text": "out what this means. OK, well there's a lot to\nlearn from this example.",
    "start": "3993840",
    "end": "4002190"
  },
  {
    "text": "The main point I've been\ndwelling on is the notion of nicely embedding a language\ninside another language.",
    "start": "4002190",
    "end": "4010760"
  },
  {
    "text": "Right, so that all the power of\nthis language like List of the surrounding language is\nstill accessible to you and",
    "start": "4010760",
    "end": "4017270"
  },
  {
    "text": "appears as a natural\nextension of the language that you built. That's one thing that this\nexample shows very well.",
    "start": "4017270",
    "end": "4026140"
  },
  {
    "text": "OK. Another thing is, if you go\nback and think about that, what's procedures\nand what's data.",
    "start": "4026140",
    "end": "4032180"
  },
  {
    "text": "You know, by the time we\nget up to here, my God, what's going on. I mean, this is some procedure,\nand it takes a",
    "start": "4032180",
    "end": "4038619"
  },
  {
    "text": "picture and an argument,\nand what's a picture. Well, a picture itself, as you\nremember, was a procedure, and that took a rectangle.",
    "start": "4038620",
    "end": "4043630"
  },
  {
    "text": "And a rectangle is\nsome abstraction. And I hope now that by now\nyou're completely lost as to",
    "start": "4043630",
    "end": "4051300"
  },
  {
    "text": "the question of what\nin the system is procedure and what's data. You see, there isn't\nany difference. There really isn't.",
    "start": "4051300",
    "end": "4058020"
  },
  {
    "text": "And you might think of a\npicture sometimes as a procedure and sometimes as data,\nbut that's just, sort of, you know, making you\nfeel comfortable.",
    "start": "4058020",
    "end": "4064860"
  },
  {
    "text": "It's really both in some sense\nor neither in some sense. OK, there's a more general point\nabout the structure of",
    "start": "4064860",
    "end": "4076369"
  },
  {
    "text": "the system as creating a\nlanguage, viewing the",
    "start": "4076370",
    "end": "4083510"
  },
  {
    "text": "engineering design process as\none of creating language or rather one of creating\na sort of sequence",
    "start": "4083510",
    "end": "4092730"
  },
  {
    "text": "of layers of language. You see, there's this\nmethodology, or maybe I should",
    "start": "4092730",
    "end": "4098009"
  },
  {
    "text": "say mythology, that's, sort\nof, charitably called software, quote, engineering.",
    "start": "4098010",
    "end": "4104988"
  },
  {
    "text": "All right, and what does it say,\nit's says well, you go and you figure out your task,\nand you figure out exactly what you want to do.",
    "start": "4104989",
    "end": "4110520"
  },
  {
    "text": "And once you figure out exactly\nwhat you want to do, you find out that it breaks out\ninto three sub-tasks, and you go and you start working\non-- and you work on this",
    "start": "4110520",
    "end": "4116710"
  },
  {
    "text": "sub-task, and you figure out\nexactly what that is. And you find out that that\nbreaks down into three sub-tasks, and you specify them\ncompletely, and you go",
    "start": "4116710",
    "end": "4123380"
  },
  {
    "text": "and you work on those two, and\nyou work on this sub-one, and you specify that exactly. And then finally when you're\ndone, you come back way up",
    "start": "4123380",
    "end": "4128990"
  },
  {
    "text": "here, and you work on your\nsecond sub-task, and specify that out and work it out. And then you end up with--",
    "start": "4128990",
    "end": "4135490"
  },
  {
    "text": "you end up at the end with\nthis beautiful edifice. Right, you end up with a\nmarvelous tree, where you've",
    "start": "4135490",
    "end": "4143120"
  },
  {
    "text": "broken your task into sub-tasks\nand broken each of these into sub-tasks\nand broken those into sub-tasks, right.",
    "start": "4143120",
    "end": "4150369"
  },
  {
    "text": "And each of these nodes is\nexactly and precisely defined to do the wonderful, beautiful\ntask to make it fit into the",
    "start": "4150370",
    "end": "4157778"
  },
  {
    "text": "whole edifice, right. That's this mythology. See only a computer scientist\ncould possibly believe that",
    "start": "4157779",
    "end": "4163970"
  },
  {
    "text": "you build a complex system\nlike that, right. Contrast that with this\nHenderson example.",
    "start": "4163970",
    "end": "4172700"
  },
  {
    "text": "It didn't work like that. What happened was that\nthere was a sequence of layers of language.",
    "start": "4172700",
    "end": "4181318"
  },
  {
    "text": "What happened? There was a layer of a thing\nthat allowed us to build",
    "start": "4181319",
    "end": "4187770"
  },
  {
    "text": "primitive pictures.  There's primitive pictures\nand that was a language.",
    "start": "4187770",
    "end": "4196440"
  },
  {
    "text": "I didn't say much about it. We talked about how to construct\nGeorge, but that was a language where you talked\nabout vectors and line",
    "start": "4196440",
    "end": "4201949"
  },
  {
    "text": "segments and points and where\nthey sat in the unit square. And then on top of that,\nright, on top of that--",
    "start": "4201950",
    "end": "4212000"
  },
  {
    "text": "so this is the language\nof primitive pictures. ",
    "start": "4212000",
    "end": "4217100"
  },
  {
    "text": "Right, talking about line\nsegments in particular pictures in the unit square. On top of that was\na whole language.",
    "start": "4217100",
    "end": "4224110"
  },
  {
    "text": "There was a language of\ngeometric combinators, a",
    "start": "4224110",
    "end": "4233110"
  },
  {
    "text": "language of geometric positions,\nwhich talks about",
    "start": "4233110",
    "end": "4241340"
  },
  {
    "text": "things like Above and Beside\nand right-push and Rotate.",
    "start": "4241340",
    "end": "4248239"
  },
  {
    "text": "And those things, sort of,\nhappened with reference to the",
    "start": "4248240",
    "end": "4253600"
  },
  {
    "text": "things that are talked about\nin this language. ",
    "start": "4253600",
    "end": "4258640"
  },
  {
    "text": "And then if we like, we saw that\nabove that there was sort of a language of schemes\nof combination.",
    "start": "4258640",
    "end": "4274810"
  },
  {
    "start": "4274810",
    "end": "4281410"
  },
  {
    "text": "For example, push, which talked\nabout repeatedly doing something over with\na scale factor.",
    "start": "4281410",
    "end": "4288540"
  },
  {
    "text": "And the things that were being\ndiscussed in that language were, sort of, the things\nthat happened down here.",
    "start": "4288540",
    "end": "4296280"
  },
  {
    "text": "So what you have is, at each\nlevel, the objects that are",
    "start": "4296280",
    "end": "4301309"
  },
  {
    "text": "being talked about are the\nthings that were erected at the previous level.",
    "start": "4301310",
    "end": "4308270"
  },
  {
    "text": "What's the difference between\nthis thing and this thing? The answer is that over here in\nthe tree, each node, and in",
    "start": "4308270",
    "end": "4319890"
  },
  {
    "text": "fact, each decomposition down\nhere, is being designed to do a specific task, whereas in\nthe other scheme, what you",
    "start": "4319890",
    "end": "4329639"
  },
  {
    "text": "have is a full range\nof linguistic power at each level.",
    "start": "4329640",
    "end": "4335940"
  },
  {
    "text": "See what's happening there, at\nany level, it's not being set",
    "start": "4335940",
    "end": "4341340"
  },
  {
    "text": "up to do a particular task. It's being set up to talk about\na whole range of things.",
    "start": "4341340",
    "end": "4347710"
  },
  {
    "text": "The consequence of that for\ndesign is that something that's designed in that method\nis likely to be more robust,",
    "start": "4347710",
    "end": "4356620"
  },
  {
    "text": "where by robust, I mean that if\nyou go and make some change in your description, it's more\nlikely to be captured by a",
    "start": "4356620",
    "end": "4366820"
  },
  {
    "text": "corresponding change, in the\nway that the language is implemented at the next level\nup, right, because you've made",
    "start": "4366820",
    "end": "4375460"
  },
  {
    "text": "these levels full. So you're not talking about a\nparticular thing like Beside. You've given yourself a whole\nvocabulary to express things",
    "start": "4375460",
    "end": "4382880"
  },
  {
    "text": "of that sort, so if you go and\nchange your specifications a little bit, it's more likely\nthat your methodology will",
    "start": "4382880",
    "end": "4389580"
  },
  {
    "text": "able to adapt to capture that\nchange, whereas a design like this is not going to be robust,\nbecause if I go and",
    "start": "4389580",
    "end": "4395770"
  },
  {
    "text": "change something that's in here,\nthat might affect the entire way that I decomposed\neverything down,",
    "start": "4395770",
    "end": "4400840"
  },
  {
    "text": "further down the tree. Right, so very big difference\nin outlook in decomposition,",
    "start": "4400840",
    "end": "4406350"
  },
  {
    "text": "levels of language\nrather than, sort of, a strict hierarchy. Not only that, but when you have\nlevels of language you've",
    "start": "4406350",
    "end": "4413750"
  },
  {
    "text": "given yourself a different\nvocabularies for talking about the design at different\nlevels.",
    "start": "4413750",
    "end": "4418780"
  },
  {
    "text": "So if we go back and look at\nGeorge one last time, if I wanted to change this picture\nGeorge, see suddenly I have a",
    "start": "4418780",
    "end": "4426610"
  },
  {
    "text": "whole different ways of\ndescribing the change. Like for example, I may want to\ngo to the basic primitive",
    "start": "4426610",
    "end": "4432320"
  },
  {
    "text": "design and move the endpoint\nof some vector.",
    "start": "4432320",
    "end": "4437639"
  },
  {
    "text": "That's a change that I would\ndiscuss at the lowest level. I would say the endpoint\nis somewhere else.",
    "start": "4437640",
    "end": "4443420"
  },
  {
    "text": "Or I might come up and say, well\nthe next thing I wanted to do, this little replicated\nelement, I might want to do by",
    "start": "4443420",
    "end": "4450320"
  },
  {
    "text": "something else. I might want to put a scale\nfactor in that Beside. That's a change that I would\ndiscuss at the next level of",
    "start": "4450320",
    "end": "4457850"
  },
  {
    "text": "design, the level\nof combinators. Or I might want to say, I might\nwant to change the basic way that I took this pattern\nand made some recursive",
    "start": "4457850",
    "end": "4467510"
  },
  {
    "text": "decomposition, maybe not\nbleeding out toward the corners or something else. That would be a change\nthat I would discuss",
    "start": "4467510",
    "end": "4473150"
  },
  {
    "text": "at the highest level. And because I've structured the\nsystem to be this way, I have all these vocabularies for\ntalking about change in",
    "start": "4473150",
    "end": "4479120"
  },
  {
    "text": "different ways and a lot of\nflexibility to decide which one's appropriate. ",
    "start": "4479120",
    "end": "4484810"
  },
  {
    "text": "OK, well that's sort of a big\npoint about the difference in software methodology that comes\nout from List, and it",
    "start": "4484810",
    "end": "4491470"
  },
  {
    "text": "all comes, again, out of the\nnotion that really, the design process is not so much\nimplementing programs as",
    "start": "4491470",
    "end": "4498429"
  },
  {
    "text": "implementing languages. And that's really the powerful\nof List. OK, thank you. Let's take a break.",
    "start": "4498430",
    "end": "4504480"
  },
  {
    "start": "4504480",
    "end": "4534591"
  }
]