[
  {
    "text": " The following\ncontent is provided under a Creative\nCommons license. Your support will help MIT\nOpenCourseWare continue",
    "start": "0",
    "end": "6880"
  },
  {
    "text": "to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6880",
    "end": "13349"
  },
  {
    "text": "from hundreds of\nMIT courses, visit MIT OpenCourseWare\nat ocw.mit.edu",
    "start": "13350",
    "end": "21994"
  },
  {
    "text": "PROFESSOR: All right,\nlet's get started. We return today to graph search.",
    "start": "21994",
    "end": "27810"
  },
  {
    "text": "Last time we saw breadth-first\nsearch, today we're going to do depth-first search. It's a simple algorithm, but\nyou can do lots of cool things",
    "start": "27810",
    "end": "34130"
  },
  {
    "text": "with it. And that's what I'll\nspend most of today on, in particular, telling\nwhether your graph has a cycle,",
    "start": "34130",
    "end": "39680"
  },
  {
    "text": "and something called\ntopological sort. As usual, basically in\nall graph algorithms",
    "start": "39680",
    "end": "45970"
  },
  {
    "text": "in this class, the input, the\nway the graph is specified is as an adjacency list, or I\nguess adjacency list plural.",
    "start": "45970",
    "end": "52840"
  },
  {
    "text": "So you have a bunch of lists,\neach one says for each vertex, what are the vertices\nI'm connected to?",
    "start": "52840",
    "end": "58550"
  },
  {
    "text": "What are the vertices I can\nget to in one step via an edge? So that's our\ninput and our goal,",
    "start": "58550",
    "end": "65040"
  },
  {
    "text": "in general, with graph search\nis to explore the graph. In particular, the\nkind of exploration",
    "start": "65040",
    "end": "70390"
  },
  {
    "text": "we're going to be doing today\nis to visit all the vertices, in some order, and visit\neach vertex only once.",
    "start": "70390",
    "end": "77416"
  },
  {
    "text": "So the way we did\nbreadth-first search, breadth-first search\nwas really good. It explored things\nlayer by layer,",
    "start": "77416",
    "end": "82830"
  },
  {
    "text": "and that was nice because\nit gave us shortest paths, it gave us the fastest\nway to get to everywhere,",
    "start": "82830",
    "end": "88829"
  },
  {
    "text": "from a particular\nsource, vertex s. But if you can't get\nfrom s to your vertex,",
    "start": "88830",
    "end": "94210"
  },
  {
    "text": "than the shortest way to\nget there is infinity, there's no way to get there.",
    "start": "94210",
    "end": "99440"
  },
  {
    "text": "And BFS is good for detecting\nthat, it can tell you which vertices are\nunreachable from s.",
    "start": "99440",
    "end": "106490"
  },
  {
    "text": "DFS can do that as\nwell, but it's often used to explore the\nwhole graph, not just",
    "start": "106490",
    "end": "112390"
  },
  {
    "text": "the part reachable\nfrom s, and so we're going to see\nhow to do that today. This trick could be used\nfor be BFS or for DFS,",
    "start": "112390",
    "end": "118580"
  },
  {
    "text": "but we're going to do it\nhere for DFS, because that's more common, let's say. ",
    "start": "118580",
    "end": "127079"
  },
  {
    "text": "So DFS. ",
    "start": "127080",
    "end": "141110"
  },
  {
    "text": "So depth-first search is kind\nof like how you solve a maze. Like, the other weekend\nI was at the big corn",
    "start": "141110",
    "end": "147349"
  },
  {
    "text": "maze in central\nMassachusetts, and it's easy to get lost in\nthere, in particular,",
    "start": "147350",
    "end": "154584"
  },
  {
    "text": "because I didn't bring\nany bread crumbs. The proper way to solve a\nmaze, if you're in there and all you can do is see which\nway to go next and then walk",
    "start": "154584",
    "end": "161950"
  },
  {
    "text": "a little bit to\nthe next junction, and then you have to\nkeep making decisions. Unless you have a really\ngood memory, which I do not,",
    "start": "161950",
    "end": "169490"
  },
  {
    "text": "teaching staff can attest to\nthat, then an easy way to do it is to leave bread\ncrumbs behind, say,",
    "start": "169490",
    "end": "175720"
  },
  {
    "text": "this is the last way\nI went from this node, so that when I\nreach a deadend, I",
    "start": "175720",
    "end": "180974"
  },
  {
    "text": "have to turn around\nand backtrack. I reach a breadcrumb that\nsay, oh, last time you went this way, next time\nyou should go this way,",
    "start": "180974",
    "end": "187160"
  },
  {
    "text": "and in particular, keep track\nat each node, which of the edges have I visited, which ones\nare still left to visit.",
    "start": "187160",
    "end": "194890"
  },
  {
    "text": "And this can be done very easily\non a computer using recursion. ",
    "start": "194890",
    "end": "210520"
  },
  {
    "text": "So high-level\ndescription is we're going to just recursively\nexplore the graph,",
    "start": "210520",
    "end": "217400"
  },
  {
    "text": "backtracking as necessary, kind\nof like how you solve a maze.",
    "start": "217400",
    "end": "222495"
  },
  {
    "start": "222495",
    "end": "234980"
  },
  {
    "text": "In fact, when I was\nseven years old, one of the first\ncomputer programs I wrote",
    "start": "234980",
    "end": "240960"
  },
  {
    "text": "was for solving a maze. I didn't know it was\ndepth-first search at the time, but now I know. ",
    "start": "240960",
    "end": "251050"
  },
  {
    "text": "It was so much harder\ndoing algorithms when I didn't know\nwhat they were. Anyway, I'm going to write some\ncode for depth-first search,",
    "start": "251050",
    "end": "260778"
  },
  {
    "text": "it is super simple code, the\nsimplest graph algorithm.",
    "start": "260779",
    "end": "266900"
  },
  {
    "start": "266900",
    "end": "289175"
  },
  {
    "text": "It's four lines. ",
    "start": "289175",
    "end": "305590"
  },
  {
    "text": "That's it. I'm going to write a little\nbit of code after this, but this is basic\ndepth-first search.",
    "start": "305590",
    "end": "311500"
  },
  {
    "text": "This will visit all\nthe vertices reachable from a given source, vertex s. So we're given the\nadjacency list.",
    "start": "311500",
    "end": "319780"
  },
  {
    "text": "I don't know why I put v\nhere, you could erase it, it's not necessary. And all we do is, we\nhave our vertex b, sorry,",
    "start": "319780",
    "end": "329030"
  },
  {
    "text": "we have our vertex s. We look at all of the\noutgoing edges from s.",
    "start": "329030",
    "end": "335930"
  },
  {
    "text": "For each one, we'll\ncall it v, we check,",
    "start": "335930",
    "end": "340949"
  },
  {
    "text": "have I visited this\nvertex already?  A place where we\nneed to be careful",
    "start": "340950",
    "end": "346880"
  },
  {
    "text": "is to not repeat vertices. We need to do this\nin BFS as well. ",
    "start": "346880",
    "end": "356110"
  },
  {
    "text": "So, the way we're\ngoing to do that is by setting the\nparent of a node, we'll see what that\nactually means later.",
    "start": "356110",
    "end": "363210"
  },
  {
    "text": "But for now, it's just, are you\nin the parent structure or not? This is initially, we've\nseen s, so we give it",
    "start": "363210",
    "end": "369600"
  },
  {
    "text": "a parent of nothing, but it\nexists in this dictionary. If the vertex b that\nwe're looking at",
    "start": "369600",
    "end": "376830"
  },
  {
    "text": "is not in our dictionary,\nwe haven't seen it yet, we mark it as seen by\nsetting its parent to s,",
    "start": "376830",
    "end": "383190"
  },
  {
    "text": "and then we\nrecursively visit it. That's it. Super simple, just recurse.",
    "start": "383190",
    "end": "389120"
  },
  {
    "text": "Sort of the magical part\nis the preventing yourself from repeating. As you explore the graph,\nif you reach something",
    "start": "389120",
    "end": "397250"
  },
  {
    "text": "you've already seen before\nyou just skip it again. So you only visit every\nvertex once, at most once.",
    "start": "397250",
    "end": "405010"
  },
  {
    "text": "This will not visit\nthe entire graph, it will only visit the\nvertices reachable from s.",
    "start": "405010",
    "end": "410840"
  },
  {
    "text": "The next part of the\ncode I'd like to give you is for visiting all the\nvertices, and in the textbook",
    "start": "410840",
    "end": "416920"
  },
  {
    "text": "this is called the DFS,\nwhereas this is just called DFS visit, that's\nsort of the recursive part,",
    "start": "416920",
    "end": "422180"
  },
  {
    "text": "and this is sort of a\ntop level algorithm.",
    "start": "422180",
    "end": "428330"
  },
  {
    "text": "Here we are going to use\nthe set of vertices, b,",
    "start": "428330",
    "end": "439840"
  },
  {
    "text": "and here we're just going\nto iterate over the s's. ",
    "start": "439840",
    "end": "467960"
  },
  {
    "text": "So it looks almost the same,\nbut what we're iterating over is different. Here we're iterating over\nthe outgoing edges from s,",
    "start": "467960",
    "end": "475720"
  },
  {
    "text": "here were iterating\nover the choices of s. ",
    "start": "475720",
    "end": "483190"
  },
  {
    "text": "So the idea here\nis we don't really know where to start our search. If it's a disconnected graph or\nnot a strongly connected graph,",
    "start": "483190",
    "end": "489154"
  },
  {
    "text": "we might have to start\nour search multiple times. This DFS algorithm is finding\nall the possible places",
    "start": "489154",
    "end": "495520"
  },
  {
    "text": "you might start the search\nand trying them all. So it's like, OK, let's\ntry the first vertex.",
    "start": "495520",
    "end": "501320"
  },
  {
    "text": "If that hasn't been visited,\nwhich initially nothing's been visited, then visit it,\nrecursively, everything",
    "start": "501320",
    "end": "507380"
  },
  {
    "text": "reachable from s. Then you go on to\nthe second vertex. Now, you may have already\nvisited it, then you skip it.",
    "start": "507380",
    "end": "512479"
  },
  {
    "text": "Third vertex, maybe\nyou visited it already. Third, fourth\nvertex, keep going, until you find some vertex\nyou haven't visited at all.",
    "start": "512480",
    "end": "519049"
  },
  {
    "text": "And then you recursively visit\neverything reachable from it, and you repeat.",
    "start": "519049",
    "end": "525399"
  },
  {
    "text": "This will find all the\ndifferent clusters, all the different strongly\nconnected components",
    "start": "525400",
    "end": "530480"
  },
  {
    "text": "of your graph. Most of the work is being\ndone by this recursion, but then there's\nthis top level, just",
    "start": "530480",
    "end": "535970"
  },
  {
    "text": "to make sure that all\nthe vertices get visited. Let's do a little example,\nso this is super clear,",
    "start": "535970",
    "end": "543380"
  },
  {
    "text": "and then it will also\nlet me do something called edge classification.",
    "start": "543380",
    "end": "549480"
  },
  {
    "text": "Once we see every\nedge in the graph gets visited by DFS\nin one way or another,",
    "start": "549480",
    "end": "555870"
  },
  {
    "text": "and it's really helpful to\nthink about the different ways they can be visited.",
    "start": "555870",
    "end": "560910"
  },
  {
    "text": "So here's a graph. I think its a similar\nto one from last class.",
    "start": "560910",
    "end": "569010"
  },
  {
    "start": "569010",
    "end": "586160"
  },
  {
    "text": "It's not strongly\nconnected, I don't think, so you can't get from\nthese vertices to c.",
    "start": "586160",
    "end": "593959"
  },
  {
    "text": "You can get from\nc to everywhere, it looks like, but not\nstrongly connected.",
    "start": "593960",
    "end": "600110"
  },
  {
    "text": "And we're going to run\nDFS, and I think, basically in alphabetical order\nis how we're imagining--",
    "start": "600110",
    "end": "606480"
  },
  {
    "text": "these vertices have\nto be ordered somehow, we don't really care how, but\nfor sake of example I care.",
    "start": "606480",
    "end": "612680"
  },
  {
    "text": "So we're going to\nstart with a, that's the first vertex in here. We're going to recursively visit\neverything reachable from a,",
    "start": "612680",
    "end": "619570"
  },
  {
    "text": "so we enter here\nwith s equals a. So I'll mark this s1, to be the\nfirst value of s at this level.",
    "start": "619570",
    "end": "630275"
  },
  {
    "text": " So we consider-- I'm going\nto check the order here--",
    "start": "630275",
    "end": "637180"
  },
  {
    "text": "first edge we look at,\nthere's two outgoing edges, let's say we look\nat this one first. ",
    "start": "637180",
    "end": "646230"
  },
  {
    "text": "We look at b, b has\nnot been visited yet, has no parent pointer. This one has a\nparent pointer of 0.",
    "start": "646230",
    "end": "654040"
  },
  {
    "text": "B we're going to give a parent\npointer of a, that's here.",
    "start": "654040",
    "end": "659560"
  },
  {
    "text": "Then we recursively\nvisit everything for b. So we look at all the outgoing\nedges from b, there's only one.",
    "start": "659560",
    "end": "664670"
  },
  {
    "text": "So we visit this edge.  for b to e. e has\nnot been visited,",
    "start": "664670",
    "end": "671160"
  },
  {
    "text": "so we set as parent pointer to\nb, an now we recursively visit e.",
    "start": "671160",
    "end": "676451"
  },
  {
    "text": "e has only one outgoing edge, so\nwe look at it, over here to d.",
    "start": "676451",
    "end": "682589"
  },
  {
    "text": " d has not been visited, so\nwe set a parent pointer to e,",
    "start": "682590",
    "end": "689286"
  },
  {
    "text": "and we look at all the\noutgoing edges from d. d has one outgoing\nedge, which is to b. b has already\nbeen visited,",
    "start": "689286",
    "end": "695760"
  },
  {
    "text": "so we skip that\none, nothing to do. That's the else case\nof this if, so we",
    "start": "695760",
    "end": "702720"
  },
  {
    "text": "do nothing in the else case,\nwe just go to the next edge. But there's no next edge\nfor d, so we're done.",
    "start": "702720",
    "end": "708449"
  },
  {
    "text": "So this algorithm returns\nto the next level up. Next level up was\ne, we were iterating",
    "start": "708450",
    "end": "714220"
  },
  {
    "text": "over the outgoing edges from e. But there was only one, so\nwe're done, so e finishes.",
    "start": "714220",
    "end": "719870"
  },
  {
    "text": "Then we backtrack to b,\nwhich is always going back",
    "start": "719870",
    "end": "725339"
  },
  {
    "text": "along the parent pointer,\nbut it's also just in the recursion. We know where to go back to.",
    "start": "725340",
    "end": "730915"
  },
  {
    "text": "We were going over the outgoing\nedges from b, there's only one, we're done. So we go back to a.",
    "start": "730915",
    "end": "736959"
  },
  {
    "text": "We only looked at one\noutgoing edge from a. There's another outgoing\nedge, which is this one,",
    "start": "736960",
    "end": "742129"
  },
  {
    "text": "but we've already visited\nd, so we skip over that one, too, so we're done\nrecursively visiting",
    "start": "742130",
    "end": "747240"
  },
  {
    "text": "everything reachable from a. Now we go back to this\nloop, the outer loop.",
    "start": "747240",
    "end": "754189"
  },
  {
    "text": "So we did a, next we look at b,\nwe say, oh b has been visited, we don't need to do\nanything from there.",
    "start": "754190",
    "end": "760000"
  },
  {
    "text": "Then we go to c, c\nhasn't been visited so we're going to loop\nfrom c, and so this",
    "start": "760000",
    "end": "766210"
  },
  {
    "text": "is our second choice\nof s in this recursion, or in this outer loop.",
    "start": "766210",
    "end": "773460"
  },
  {
    "text": "And so we look at the\noutgoing edges from s2, let me match the\norder in the notes.",
    "start": "773460",
    "end": "779210"
  },
  {
    "text": "Let's say first we go to f. f has not been visited, so we\nset its parent pointer to c.",
    "start": "779210",
    "end": "788149"
  },
  {
    "text": "Then we look at all the\noutgoing edges from f. There's one outgoing edge\nfrom f, it goes to f.",
    "start": "788150",
    "end": "793710"
  },
  {
    "text": "I guess I shouldn't\nreally bold this, sorry.",
    "start": "793710",
    "end": "798860"
  },
  {
    "text": "I'll say what the bold\nedges mean in a moment.  This is just a regular edge.",
    "start": "798860",
    "end": "805300"
  },
  {
    "text": "We follow the edge from f to f. We see, oh, f has\nalready been visited, it already has a parent\npointer, so there's",
    "start": "805300",
    "end": "811400"
  },
  {
    "text": "no point going down there. We're done with f, that's\nthe only outgoing edge. We go back to c, there's\none other outgoing edge,",
    "start": "811400",
    "end": "817649"
  },
  {
    "text": "but it leads to a vertex we've\nalready visited, namely e, and so we're done with visiting\neverything reachable from c.",
    "start": "817650",
    "end": "824600"
  },
  {
    "text": "We didn't visit\neverything reachable from c, because some of it\nwas already visited from a. Then we go back to the outer\nloop, say, OK, what about d?",
    "start": "824600",
    "end": "831685"
  },
  {
    "text": "D has been visited,\nwhat about e? E's been visited, what about f? F's been visited. So we're visiting\nthese vertices again,",
    "start": "831685",
    "end": "837790"
  },
  {
    "text": "but should only be twice\nin total, and in the end",
    "start": "837790",
    "end": "843639"
  },
  {
    "text": "we visit all the vertices,\nand, in a certain sense, all the edges as well. ",
    "start": "843640",
    "end": "852440"
  },
  {
    "text": "Let's talk about running time.",
    "start": "852440",
    "end": "858070"
  },
  {
    "start": "858070",
    "end": "867597"
  },
  {
    "text": "What do you think the running\ntime of this algorithm is? ",
    "start": "867597",
    "end": "878120"
  },
  {
    "text": "Anyone? Time to wake up. AUDIENCE: Upper bound?",
    "start": "878120",
    "end": "883897"
  },
  {
    "text": "PROFESSOR: Upper bound, sure. AUDIENCE: V? PROFESSOR: V? AUDIENCE: [INAUDIBLE]. PROFESSOR: V is a little bit\noptimistic, plus e, good,",
    "start": "883897",
    "end": "895690"
  },
  {
    "text": "collaborative effort. It's linear time, just like BFS. This is what we\ncall linear time,",
    "start": "895690",
    "end": "902520"
  },
  {
    "text": "because this is the\nsize of the input.",
    "start": "902520",
    "end": "907550"
  },
  {
    "text": "It's theta V plus E\nfor the whole thing. The size of the\ninput was v plus e.",
    "start": "907550",
    "end": "912800"
  },
  {
    "text": "We needed v slots\nin an array, plus we needed e items in these linked\nlists, one for each edge.",
    "start": "912800",
    "end": "920399"
  },
  {
    "text": "We have to traverse\nthat whole structure. The reason it's order v plus e\nis-- first, as you were saying,",
    "start": "920400",
    "end": "927029"
  },
  {
    "text": "you're visiting every vertex\nonce in this outer loop, so not worrying about the\nrecursion in DFS alone,",
    "start": "927030",
    "end": "946160"
  },
  {
    "text": "so that's order b. Then have to worry\nabout this recursion, but we know that whenever we\ncall DFS visit on a vertex,",
    "start": "946160",
    "end": "956160"
  },
  {
    "text": "that it did not have\na parent before. Right before we\ncalled DFS visit, we set its parent\nfor the first time.",
    "start": "956160",
    "end": "963170"
  },
  {
    "text": "Right before we called\nDFS visit on v here, we set as parent\nfor the first time, because it wasn't set before.",
    "start": "963170",
    "end": "969930"
  },
  {
    "text": "So DFS visit, and I'm\ngoing to just write of v,",
    "start": "969930",
    "end": "977880"
  },
  {
    "text": "meaning the last argument here. ",
    "start": "977880",
    "end": "985520"
  },
  {
    "text": "It's called once, at\nmost once, per vertex b.",
    "start": "985520",
    "end": "992660"
  },
  {
    "text": " But it does not\ntake constant time. This takes constant time per\nvertex, plus a recursive call.",
    "start": "992660",
    "end": "1001310"
  },
  {
    "text": "This thing, this takes constant\ntime, but there's a for loop here. We have to pay for however\nmany outgoing edges",
    "start": "1001310",
    "end": "1007140"
  },
  {
    "text": "there are from b, that's\nthe part you're missing. ",
    "start": "1007140",
    "end": "1012880"
  },
  {
    "text": "And we pay length of adjacency\nof v for that vertex.",
    "start": "1012880",
    "end": "1020560"
  },
  {
    "text": "So the total in\naddition to this v is going to be the order, sum\noverall vertices, v in capital",
    "start": "1020560",
    "end": "1028300"
  },
  {
    "text": "V, of length of the\nadjacency, list for v,",
    "start": "1028300",
    "end": "1033400"
  },
  {
    "text": "which is E. This\nis the handshaking",
    "start": "1033400",
    "end": "1042150"
  },
  {
    "text": "lemma from last time. It's twice e for\nundirected graphs, it's e for directed graphs.",
    "start": "1042150",
    "end": "1049550"
  },
  {
    "text": "I've drawn directed graphs here,\nit's a little more interesting. OK, so it's linear time, just\nlike the BFS, so you could say,",
    "start": "1049550",
    "end": "1057559"
  },
  {
    "text": "who cares, but DFS offers a\nlot of different properties than BFS.",
    "start": "1057560",
    "end": "1062870"
  },
  {
    "text": "They each have their niche. BFS is great for shortest paths. You want to know the fastest\nway to solve the Rubik's cube,",
    "start": "1062870",
    "end": "1069080"
  },
  {
    "text": "BFS will find it. You want to find the fastest\nway to solve the Rubik's cube, DFS will not find it.",
    "start": "1069080",
    "end": "1075149"
  },
  {
    "text": "It's not following\nshortest paths here. Going from a to\nd, we use the path of length 3, that's\nthe bold edges.",
    "start": "1075150",
    "end": "1081324"
  },
  {
    "text": "We could have gone\ndirectly from a to d, so it's a\ndifferent kind of search, but sort of the inverse.",
    "start": "1081324",
    "end": "1087340"
  },
  {
    "text": "But it's extremely useful,\nin particular, in the way that it classifies edges.",
    "start": "1087340",
    "end": "1093082"
  },
  {
    "text": "So let me talk about\nedge classification. ",
    "start": "1093082",
    "end": "1107630"
  },
  {
    "text": "You can check every edge\nin this graph gets visited. In a directed graph every\nedge gets visited once,",
    "start": "1107630",
    "end": "1114060"
  },
  {
    "text": "in an undirected\ngraph, every edge gets visited twice,\nonce from each side. ",
    "start": "1114060",
    "end": "1120200"
  },
  {
    "text": "And when you visit\nthat edge, there's sort of different categories\nof what could happen to it.",
    "start": "1120200",
    "end": "1125710"
  },
  {
    "text": "Maybe the edge led to something\nunvisited, when you went there.",
    "start": "1125710",
    "end": "1130919"
  },
  {
    "text": "We call those tree edges. ",
    "start": "1130920",
    "end": "1150360"
  },
  {
    "text": "That's what the parent\npointers are specifying and all the bold edges here\nare called three edges.",
    "start": "1150360",
    "end": "1156420"
  },
  {
    "text": "This is when we visit a\nnew vertex via that edge.",
    "start": "1156420",
    "end": "1167410"
  },
  {
    "text": " So we look at the\nother side of the edge, we discover a new vertex.",
    "start": "1167410",
    "end": "1173024"
  },
  {
    "text": "Those are what we\ncall tree edges, it turns out they form\na tree, a directed tree. That's a lemma you can prove.",
    "start": "1173024",
    "end": "1179929"
  },
  {
    "text": "You can see it here. We just have a path, actually a\nforest would be more accurate. We have a path abed,\nand we have an edge cf,",
    "start": "1179930",
    "end": "1188916"
  },
  {
    "text": "but, in general, it's a forest. So for example, if there\nwas another thing coming from e here, let's modify my\ngraph, we would, at some point,",
    "start": "1188916",
    "end": "1197540"
  },
  {
    "text": "visit that edge and say,\noh, here's a new way to go, and now that bold structure\nforms an actual tree.",
    "start": "1197540",
    "end": "1204250"
  },
  {
    "text": "These are called tree edges,\nyou can call them forest edges if you feel like it.",
    "start": "1204250",
    "end": "1210080"
  },
  {
    "text": "There are other edges in\nthere, the nonbold edges, and the textbook distinguishes\nthree types, three types?",
    "start": "1210080",
    "end": "1217260"
  },
  {
    "text": "Three types, so many types. ",
    "start": "1217260",
    "end": "1222500"
  },
  {
    "text": "They are forward edges,\nbackward edges, and cross edges.",
    "start": "1222500",
    "end": "1240580"
  },
  {
    "text": " Some of these are more useful\nto distinguish than others,",
    "start": "1240580",
    "end": "1247740"
  },
  {
    "text": "but it doesn't hurt\nto have them all. So, for example, this edge I'm\ngoing to call a forward edge,",
    "start": "1247740",
    "end": "1257590"
  },
  {
    "text": "just write f,\nthat's unambiguous, because it goes, in some\nsense, forward along the tree.",
    "start": "1257590",
    "end": "1264430"
  },
  {
    "text": "It goes from the root of\nthis tree to a descendant.",
    "start": "1264430",
    "end": "1269730"
  },
  {
    "text": "There is a path\nin the tree from a to d, so we call\nit a forward edge. By contrast, this edge I'm\ngoing to call a backward edge,",
    "start": "1269730",
    "end": "1280770"
  },
  {
    "text": "because it goes from\na node in the tree to an ancestor in the trees.",
    "start": "1280770",
    "end": "1286389"
  },
  {
    "text": "If you think of parents, I\ncan go from d to its parent to its parent, and that's\nwhere the edge goes, so that's a backward\nedge-- double check I",
    "start": "1286390",
    "end": "1293460"
  },
  {
    "text": "got these not reversed,\nyeah, that's right. Forward edge because I could\ngo from d to its parent",
    "start": "1293460",
    "end": "1299334"
  },
  {
    "text": "to its parent to its\nparent and the edge went the other way,\nthat's a forward edge. So forward edge goes from a node\nto a descendant in the tree.",
    "start": "1299334",
    "end": "1309169"
  },
  {
    "text": " Backward edge goes from a node\nto an ancestor in the tree.",
    "start": "1309170",
    "end": "1316660"
  },
  {
    "start": "1316660",
    "end": "1322670"
  },
  {
    "text": "And when I say,\ntree, I mean forest.  And then all the other\nedges are cross edges.",
    "start": "1322670",
    "end": "1330169"
  },
  {
    "text": " So I guess, here,\nthis is a cross edge.",
    "start": "1330170",
    "end": "1337669"
  },
  {
    "text": "In this case, it goes from\none tree to another, doesn't have to go between\ndifferent trees. For example, let's say\nI'm visiting d, then",
    "start": "1337670",
    "end": "1348540"
  },
  {
    "text": "I go back to e, I visit g,\nor there could be this edge. If this edge existed, it\nwould be a cross edge,",
    "start": "1348540",
    "end": "1357720"
  },
  {
    "text": "because g and d are\nnot ancestor related, neither one is an\nancestor of the other,",
    "start": "1357720",
    "end": "1362980"
  },
  {
    "text": "they are siblings actually. So there's, in\ngeneral, there's going to be some subtree over\nhere, some subtree over here,",
    "start": "1362980",
    "end": "1371210"
  },
  {
    "text": "and this is a cross edge\nbetween two different subtrees. This cross edge is between two,\nsort of, non ancestor related,",
    "start": "1371210",
    "end": "1387960"
  },
  {
    "text": "I think is the shortest way to\nwrite this, subtrees or nodes.",
    "start": "1387960",
    "end": "1396955"
  },
  {
    "start": "1396955",
    "end": "1406519"
  },
  {
    "text": "A little puzzle for\nyou, well, I guess the first question is, how do\nyou compute this structure?",
    "start": "1406520",
    "end": "1411620"
  },
  {
    "text": "How do you compute\nwhich edges are which? This is not hard, although I\nhaven't written it in the code",
    "start": "1411620",
    "end": "1416670"
  },
  {
    "text": "here. You can check the textbook\nfor one way to do it.",
    "start": "1416670",
    "end": "1422289"
  },
  {
    "text": "The parent structure tells you\nwhich edges are tree edges. So that part we have done.",
    "start": "1422290",
    "end": "1427980"
  },
  {
    "text": "Every parent pointer corresponds\nto the reverse of a tree edge, so at the same time you could\nmark that edge a tree edge,",
    "start": "1427980",
    "end": "1435250"
  },
  {
    "text": "and you'd know which\nedges are tree edges and which edges\nare nontree edges. If you want to know which are\nforward, which are backward,",
    "start": "1435250",
    "end": "1441290"
  },
  {
    "text": "which are cross edges, the\nkey thing you need to know is, well, in particular,\nfor backward edges, one way",
    "start": "1441290",
    "end": "1454140"
  },
  {
    "text": "to compute them is\nto mark which nodes you are currently exploring.",
    "start": "1454140",
    "end": "1459880"
  },
  {
    "text": "So when we do a DFS\nvisit on a node, we could say at\nthe beginning here,",
    "start": "1459880",
    "end": "1465160"
  },
  {
    "text": "basically, we're starting\nto visit s, say, start s,",
    "start": "1465160",
    "end": "1471230"
  },
  {
    "text": "and then at the end of\nthis for loop, we write, we're finished with s. ",
    "start": "1471230",
    "end": "1478190"
  },
  {
    "text": "And you could mark that\nin the s structure. You could say s dot in\nprocess is true up here,",
    "start": "1478190",
    "end": "1483720"
  },
  {
    "text": "s dot in process\nequals false down here. Keep track of which nodes are\ncurrently in the recursion",
    "start": "1483720",
    "end": "1489470"
  },
  {
    "text": "stack, just by marking\nthem and unmarking them at the beginning and the end.",
    "start": "1489470",
    "end": "1495430"
  },
  {
    "text": "Then we'll know, if we follow\nan edge and it's an edge to somebody who's\nalready in the stack,",
    "start": "1495430",
    "end": "1501220"
  },
  {
    "text": "then it's a backward edge,\nbecause that's-- everyone in the stack is an ancestor\nfrom our current node.",
    "start": "1501220",
    "end": "1510690"
  },
  {
    "text": "Detecting forward edges,\nit's a little trickier. ",
    "start": "1510690",
    "end": "1518940"
  },
  {
    "text": "Forward edges\nversus cross edges, any suggestions on an\neasy way to do that?",
    "start": "1518940",
    "end": "1525220"
  },
  {
    "text": " I don't think I know\nan easy way to do that.",
    "start": "1525220",
    "end": "1531840"
  },
  {
    "text": "It can be done. The way the textbook does\nit is a little bit more sophisticated, in that when\nthey start visiting a vertex,",
    "start": "1531840",
    "end": "1541030"
  },
  {
    "text": "they record the time\nthat it got visited. What's time?",
    "start": "1541030",
    "end": "1546620"
  },
  {
    "text": "You could think of it as\nthe clock on your computer, another way to do\nit is, every time you do a step in this algorithm,\nyou increment a counter.",
    "start": "1546620",
    "end": "1555000"
  },
  {
    "text": "So every time anything happens,\nyou increment a counter, and then you store\nthe value of that counter here for s, that\nwould be the start time for s,",
    "start": "1555000",
    "end": "1562910"
  },
  {
    "text": "you store the finish\ntime for s down here, and then this gives\nyou, this tells you",
    "start": "1562910",
    "end": "1568039"
  },
  {
    "text": "when a node was\nvisited, and you can use that to compute when\nan edge is a forward edge and otherwise it's a cross edge.",
    "start": "1568040",
    "end": "1574924"
  },
  {
    "text": "It's not terribly exciting,\nthough, so I'm not going to detail that. You can look at the textbook\nif you're interested.",
    "start": "1574924",
    "end": "1582450"
  },
  {
    "text": "But here's a fun puzzle. In an undirected graph, which\nof these edges can exist?",
    "start": "1582450",
    "end": "1592920"
  },
  {
    "text": "We can have a vote, do some\ndemocratic mathematics.",
    "start": "1592920",
    "end": "1598790"
  },
  {
    "text": "How many people think tree edges\nexist in undirected graphs? ",
    "start": "1598790",
    "end": "1604510"
  },
  {
    "text": "You, OK. Sarini does. That's a good sign. How many people\nthink forward edges exist in an undirected graph?",
    "start": "1604510",
    "end": "1610919"
  },
  {
    "text": " A couple. How many people\nthink backward edges",
    "start": "1610920",
    "end": "1616370"
  },
  {
    "text": "exist in an undirected graph? Couple. How many people\nthink cross edges",
    "start": "1616370",
    "end": "1621850"
  },
  {
    "text": "exist in undirected graph? More people, OK. I think voting worked.",
    "start": "1621850",
    "end": "1627870"
  },
  {
    "text": "They all exist, no,\nthat's not true. This one can exist and\nthis one can exist.",
    "start": "1627870",
    "end": "1633216"
  },
  {
    "text": "I actually wrote the\nwrong ones in my notes, so it's good to trick you,\nno, it's I made a mistake.",
    "start": "1633217",
    "end": "1639020"
  },
  {
    "text": "It's very easy to\nget these mixed up and you can think\nabout why this is true,",
    "start": "1639020",
    "end": "1644360"
  },
  {
    "text": "maybe I'll draw some\npictures to clarify. ",
    "start": "1644360",
    "end": "1650080"
  },
  {
    "text": "This is something, you remember\nthe-- there was BFS diagram,",
    "start": "1650080",
    "end": "1655570"
  },
  {
    "text": "I talked a little bit\nabout this last class. Tree edges better exist,\nthose are the things",
    "start": "1655570",
    "end": "1660649"
  },
  {
    "text": "you use to visit new vertices. So that always happens,\nundirected or otherwise. Forward edges, though,\nforward edge of",
    "start": "1660650",
    "end": "1667640"
  },
  {
    "text": "would be, OK, I visited\nthis, then I visited this. Those were tree edges.",
    "start": "1667640",
    "end": "1672770"
  },
  {
    "text": " Then I backtrack and I\nfollow an edge like this.",
    "start": "1672770",
    "end": "1678552"
  },
  {
    "text": "This would be a forward edge. And in a directed\ngraph that can happen. In an undirected graph,\nit can also happen, right?",
    "start": "1678552",
    "end": "1691320"
  },
  {
    "text": "Oh, no, it can't, it can't. OK. So confusing. undirected graph, if\nyou look like this,",
    "start": "1691320",
    "end": "1697970"
  },
  {
    "text": "you start-- let's say this is s. You start here, and suppose\nwe follow this edge.",
    "start": "1697970",
    "end": "1704000"
  },
  {
    "text": "We get to here, then we follow\nthis edge, we get to here. Then we will follow this\nedge in the other direction,",
    "start": "1704000",
    "end": "1711390"
  },
  {
    "text": "and that's guaranteed to\nfinish before we get back to s. So, in order to\nbe a forward edge,",
    "start": "1711390",
    "end": "1716970"
  },
  {
    "text": "this one has to be\nvisited after this one, from s, but in this scenario,\nif you follow this one first,",
    "start": "1716970",
    "end": "1723030"
  },
  {
    "text": "you'll eventually\nget to this vertex and then you will come back,\nand then that will be classified as a backward edge in\nan undirected graph.",
    "start": "1723030",
    "end": "1729669"
  },
  {
    "text": "So you can never have forward\nedges in an undirected graph. ",
    "start": "1729670",
    "end": "1740899"
  },
  {
    "text": "But I have a backward edge\nhere, that would suggest I can have backward edges\nhere, and no cross edges.",
    "start": "1740900",
    "end": "1748190"
  },
  {
    "text": "Well, democracy did not work, I\nwas swayed by the popular vote.",
    "start": "1748190",
    "end": "1754409"
  },
  {
    "text": "So I claim, apparently,\ncross edges do not exist. Let's try to draw this. So a cross edge typical\nscenario would be either here,",
    "start": "1754410",
    "end": "1766240"
  },
  {
    "text": "you follow this\nedge, you backtrack, you follow another\nedge, and then",
    "start": "1766240",
    "end": "1771950"
  },
  {
    "text": "you discover there's was an\nedge back to some other subtree that you've already visited. That can happen in\nan undirected graph.",
    "start": "1771950",
    "end": "1778365"
  },
  {
    "text": "For the same reason, if\nI follow this one first, and this edge exists undirected,\nthen I will go down that way.",
    "start": "1778365",
    "end": "1786240"
  },
  {
    "text": "So it will be actually tree\nedge, not a cross edge. OK, phew.",
    "start": "1786240",
    "end": "1791670"
  },
  {
    "text": "That means my\nnotes were correct. I was surprised,\nbecause they were",
    "start": "1791670",
    "end": "1797910"
  },
  {
    "text": "copied from the textbook,\nuncorrect my correction.",
    "start": "1797910",
    "end": "1804355"
  },
  {
    "text": "Good. ",
    "start": "1804355",
    "end": "1810080"
  },
  {
    "text": "So what? Why do I care about these\nedge classifications?",
    "start": "1810080",
    "end": "1815930"
  },
  {
    "text": "I claim they're super handy for\ntwo problems, cycle detection,",
    "start": "1815930",
    "end": "1821970"
  },
  {
    "text": "which is pretty\nintuitive problem. Does my graph have any cycles? In the directed case, this\nis particularly interesting.",
    "start": "1821970",
    "end": "1829890"
  },
  {
    "text": "I want to know, does a graph\nhave any directed cycles? And another problem\ncalled topological sort,",
    "start": "1829890",
    "end": "1835360"
  },
  {
    "text": "which we will get to. ",
    "start": "1835360",
    "end": "1841500"
  },
  {
    "text": "So let's start with\ncycle detection. This is actually a warmup\nfor topological sort.",
    "start": "1841500",
    "end": "1848870"
  },
  {
    "text": " So does my graph\nhave any cycles?",
    "start": "1848870",
    "end": "1855680"
  },
  {
    "text": "G has a cycle, I claim. This happens, if and only if, G\nhas a back edge, or let's say,",
    "start": "1855680",
    "end": "1870660"
  },
  {
    "text": "a depth-first search of\nthat graph has a back edge. ",
    "start": "1870660",
    "end": "1877250"
  },
  {
    "text": "So it doesn't matter\nwhere I start from or how this algorithm-- I run\nthis top level DFS algorithm,",
    "start": "1877250",
    "end": "1882944"
  },
  {
    "text": "explore the whole\ngraph, because I want to know in the whole\ngraph is there a cycle? I claim, if there's a back\nedge, then there's a cycle.",
    "start": "1882944",
    "end": "1889580"
  },
  {
    "text": " So it all comes\ndown to back edges.",
    "start": "1889580",
    "end": "1895729"
  },
  {
    "text": "This will work for both\ndirected and undirected graphs. Detecting cycles is pretty\neasy in undirected graphs.",
    "start": "1895729",
    "end": "1901070"
  },
  {
    "text": "It's a little more subtle\nwith directed graphs, because you have to worry\nabout the edge directions.",
    "start": "1901070",
    "end": "1906750"
  },
  {
    "text": "So let's prove this. We haven't done a\nserious proof in a while,",
    "start": "1906750",
    "end": "1912770"
  },
  {
    "text": "so this is still a pretty easy\none, let's think about it. What do you think is\nthe easier direction",
    "start": "1912770",
    "end": "1918880"
  },
  {
    "text": "to prove here, left or right? To more democracy. How many people\nthink left is easy?",
    "start": "1918880",
    "end": "1927292"
  },
  {
    "text": "A couple. How many people\nthink right is easy? A whole bunch more.",
    "start": "1927292",
    "end": "1932410"
  },
  {
    "text": "I disagree with you. I guess it depends\nwhat you consider easy.",
    "start": "1932410",
    "end": "1938320"
  },
  {
    "text": "Let me show you\nhow easy left is. Left is, I have a back edge, I\nwant to claim there's a cycle.",
    "start": "1938320",
    "end": "1945779"
  },
  {
    "text": "What is the back edge look like? Well, it's an edge to\nan ancestor in the tree.",
    "start": "1945780",
    "end": "1954049"
  },
  {
    "text": "If this node is a\ndescendant of this node and this node is an ancestor\nof this node, that's",
    "start": "1954050",
    "end": "1959920"
  },
  {
    "text": "saying there are\ntree edges, there's a path, a tree path, that\nconnects one to the other.",
    "start": "1959920",
    "end": "1965820"
  },
  {
    "text": " So these are tree\nedges, because this",
    "start": "1965820",
    "end": "1974159"
  },
  {
    "text": "is supposed to be an\nancestor, and this is supposed to be a descendant. ",
    "start": "1974160",
    "end": "1983670"
  },
  {
    "text": "And that's the definition\nof a back edge.",
    "start": "1983670",
    "end": "1988770"
  },
  {
    "text": "Do you see a cycle? I see a cycle. This is a cycle, directed cycle.",
    "start": "1988770",
    "end": "1997549"
  },
  {
    "text": "So if there's a back edge, by\ndefinition, it makes a cycle. Now, it's harder to say\nif I have 10 back edges,",
    "start": "1997550",
    "end": "2004289"
  },
  {
    "text": "how many cycles are there? Could be many. But if there's a\nback edge, there's definitely at least one cycle.",
    "start": "2004290",
    "end": "2010410"
  },
  {
    "text": " The other direction\nis also not too hard,",
    "start": "2010410",
    "end": "2015790"
  },
  {
    "text": "but I would hesitate\nto call it easy. Any suggestions if, I\nknow there is a cycle,",
    "start": "2015790",
    "end": "2022690"
  },
  {
    "text": "how do I prove that there's\na back edge somewhere? Think about that,\nlet me draw a cycle.",
    "start": "2022690",
    "end": "2029110"
  },
  {
    "start": "2029110",
    "end": "2051439"
  },
  {
    "text": "There's a length k cycle.  Where do you think,\nwhich of these edges",
    "start": "2051439",
    "end": "2057879"
  },
  {
    "text": "do you think is going\nto be a back edge? Let's hope it's\none of these edges. ",
    "start": "2057880",
    "end": "2063349"
  },
  {
    "text": "Sorry? AUDIENCE: Vk to v zero. PROFESSOR: Vk to v zero. That's a good idea, maybe\nthis is a back edge.",
    "start": "2063350",
    "end": "2071000"
  },
  {
    "text": "Of course, this is\nsymmetric, why that edge? I labeled it in\na suggestive way,",
    "start": "2071000",
    "end": "2076780"
  },
  {
    "text": "but I need to say something\nbefore I know actually which edge is going to\nbe the back edge.",
    "start": "2076780",
    "end": "2082403"
  },
  {
    "text": "AUDIENCE: You have to\nsay you start to v zero? PROFESSOR: Start at v zero. If I started a search\nof v zero, that",
    "start": "2082404",
    "end": "2088460"
  },
  {
    "text": "looks good, because\nthe search is kind of going to go\nin this direction. vk will maybe be the\nlast thing to be visited,",
    "start": "2088460",
    "end": "2093949"
  },
  {
    "text": "that's not actually true. Could be there's an edge\ndirectly from v zero to vk, but intuitively vk\nwill kind of later,",
    "start": "2093949",
    "end": "2100700"
  },
  {
    "text": "and then when this\nedge gets visited, this will be an ancestor\nand it will be a back edge. Of course, we may not\nstart a search here,",
    "start": "2100700",
    "end": "2110270"
  },
  {
    "text": "so calling it the\nstart of the search is not quite right,\na little different.",
    "start": "2110270",
    "end": "2116079"
  },
  {
    "text": "AUDIENCE: First vertex\nthat gets hit [INAUDIBLE]. PROFESSOR: First vertex\nthat gets hit, good.",
    "start": "2116079",
    "end": "2121550"
  },
  {
    "text": "I'm going to start the\nnumbering , v zero, let's assume v 0 is the\nfirst vertex in the cycle,",
    "start": "2121550",
    "end": "2138460"
  },
  {
    "text": "visited by the\ndepth-first search. ",
    "start": "2138460",
    "end": "2147100"
  },
  {
    "text": "Together, if you want some\npillows if you like them,",
    "start": "2147100",
    "end": "2154060"
  },
  {
    "text": "especially convenient\nthat they're in front. So right, if it's\nnot v zero, say",
    "start": "2154060",
    "end": "2159130"
  },
  {
    "text": "v3 was the first one visited. We will just change\nthe labeling, so that's v zero, that's\nv1, that's v, and so on.",
    "start": "2159130",
    "end": "2166260"
  },
  {
    "text": "So set this labeling,\nso that v0 first one, first vertex that gets visited.",
    "start": "2166260",
    "end": "2172430"
  },
  {
    "text": "Then, I claim that-- let me\njust write the claim first.",
    "start": "2172430",
    "end": "2180230"
  },
  {
    "text": "This edge vkv0 will\nbe a back edge. ",
    "start": "2180230",
    "end": "2186350"
  },
  {
    "text": "We'll just say, is back edge. And I would say this is not\nobvious, be a little careful.",
    "start": "2186350",
    "end": "2192780"
  },
  {
    "start": "2192780",
    "end": "2210420"
  },
  {
    "text": "We have to somehow exploit\nthe depth-first nature of DFS, the fact that it goes deep-- it\ngoes as deep as it can before",
    "start": "2210420",
    "end": "2218820"
  },
  {
    "text": "backtracking. If you think about\nit, we're starting, at this point we are starting a\nsearch relative to this cycle.",
    "start": "2218820",
    "end": "2225690"
  },
  {
    "text": "No one has been visited,\nexcept v zero just got visited, has a parent\npointer off somewhere else.",
    "start": "2225690",
    "end": "2230930"
  },
  {
    "start": "2230930",
    "end": "2235990"
  },
  {
    "text": "What do we do next? Well, we visit all the\noutgoing edges from v zero, there might be many\nof them. it could be edge from v zero to v1,\nit could an edge from v zero",
    "start": "2235990",
    "end": "2243480"
  },
  {
    "text": "to v3, it could be an edge\nfrom v zero to something else.",
    "start": "2243480",
    "end": "2248750"
  },
  {
    "text": "We don't know which one's\ngoing to happen first. But the one thing I\ncan claim is that v1",
    "start": "2248750",
    "end": "2259760"
  },
  {
    "text": "will be visited before we\nfinish visiting v zero.",
    "start": "2259760",
    "end": "2266610"
  },
  {
    "start": "2266610",
    "end": "2272124"
  },
  {
    "text": "From v zero, we might\ngo somewhere else, we might go somewhere\nelse that might eventually lead to v1 by some other\nroute, but in particular, we",
    "start": "2272124",
    "end": "2278130"
  },
  {
    "text": "look at that edge\nfrom v zero to v1. And so, at some point,\nwe're searching,",
    "start": "2278130",
    "end": "2283730"
  },
  {
    "text": "we're visiting all the things\nreachable from v zero, that includes v1, and\nthat will happen,",
    "start": "2283730",
    "end": "2289830"
  },
  {
    "text": "we will touch v1\nfor the first time, because it hasn't\nbeen touched yet. We will visit it before\nwe finish visiting v zero.",
    "start": "2289830",
    "end": "2297932"
  },
  {
    "text": "The same goes actually for all\nof v i's, because they're all reachable from v zero.",
    "start": "2297932",
    "end": "2303510"
  },
  {
    "text": "You can prove this by induction. You'll have to visit v1 before\nyou finish visiting v zero.",
    "start": "2303510",
    "end": "2309860"
  },
  {
    "text": "You'll have to visit v2\nbefore you finish visiting v1, although you might\nactually visit v2 before v1.",
    "start": "2309860",
    "end": "2315592"
  },
  {
    "text": "You would definitely\nfinish, you'll finished v2 before you\nfinish v1, and so on.",
    "start": "2315592",
    "end": "2321880"
  },
  {
    "text": "So vi will be visited before\nyou finish vi minus 1,",
    "start": "2321880",
    "end": "2327423"
  },
  {
    "text": "but in particular,\nwhat we care about is that vk is visited\nbefore we finish v zero.",
    "start": "2327424",
    "end": "2338760"
  },
  {
    "text": " And it will be entirely visited. We will finish\nvisiting vk before we",
    "start": "2338760",
    "end": "2345930"
  },
  {
    "text": "finish visiting v zero. We will start decay vk\nafter we start to v zero, because v zero is first.",
    "start": "2345930",
    "end": "2352330"
  },
  {
    "text": "So the order is going to\nlook like, start v zero, at some point we will start vk.",
    "start": "2352330",
    "end": "2360940"
  },
  {
    "text": "Then we'll finish vk,\nthen we'll finish v zero.",
    "start": "2360940",
    "end": "2367950"
  },
  {
    "text": "This is something the\ntextbook likes to call, and I like to call,\nbalanced parentheses.",
    "start": "2367950",
    "end": "2373200"
  },
  {
    "text": "You can think of it as, we\nstart v zero, then we start vk,",
    "start": "2373200",
    "end": "2378690"
  },
  {
    "text": "then we finish vk,\nthen we finish v zero. And these match up\nand their balanced.",
    "start": "2378690",
    "end": "2384289"
  },
  {
    "text": " Depth-first search\nalways looks like that, because once you\nstart a vertex, you",
    "start": "2384290",
    "end": "2390630"
  },
  {
    "text": "keep chugging until you visited\nall the things reachable from it. Then you finish it. You won't finish v zero\nbefore you finish vk,",
    "start": "2390630",
    "end": "2397560"
  },
  {
    "text": "because it's part\nof the recursion. You can't return\nat a higher level before you return\nat the lower levels.",
    "start": "2397560",
    "end": "2404942"
  },
  {
    "text": "So we've just argued\nthat the order is like this, because\nv zero was first, so vk starts after v zero, and\nalso we're going to finish vk",
    "start": "2404942",
    "end": "2411599"
  },
  {
    "text": "before we finish v zero, because\nit's reachable, and hasn't been visited before.",
    "start": "2411600",
    "end": "2417000"
  },
  {
    "text": "So, in here, we\nconsider vkv zero.",
    "start": "2417000",
    "end": "2425200"
  },
  {
    "text": " When we consider that edge,\nit will be a back edge.",
    "start": "2425200",
    "end": "2432070"
  },
  {
    "text": " Why? Because v zero is currently\non the recursion stack,",
    "start": "2432070",
    "end": "2439640"
  },
  {
    "text": "and so you will have marked v\nzero as currently in process. So when you look at that edge,\nyou see it's a back edge,",
    "start": "2439640",
    "end": "2444760"
  },
  {
    "text": "it's an edge to your ancestor. That's the proof. ",
    "start": "2444760",
    "end": "2451700"
  },
  {
    "text": "Any questions about that?  It's pretty easy once you set\nup the starting point, which",
    "start": "2451700",
    "end": "2459460"
  },
  {
    "text": "is look at the first\ntime you visit the cycle, than just think about how\nyou walk around the cycle. There's lots of ways you\nmight walk around the cycle,",
    "start": "2459460",
    "end": "2465940"
  },
  {
    "text": "but it's guaranteed you'll\nvisit vk at some point, then you'll look at the edge.\nv0 is still in the stack, so it's a back edge.",
    "start": "2465940",
    "end": "2472730"
  },
  {
    "text": "And so this proves\nthat having a cycle is equivalent to\nhaving a back edge. This gives you an easy linear\ntime algorithm to tell,",
    "start": "2472730",
    "end": "2478980"
  },
  {
    "text": "does my graph have a cycle? And if it does, it's\nactually easy to find one, because we find a back edge,\njust follow the tree edges,",
    "start": "2478980",
    "end": "2486102"
  },
  {
    "text": "and you get your cycle.  So if someone gives\nyou a graph and say,",
    "start": "2486102",
    "end": "2491230"
  },
  {
    "text": "hey, I think this is acyclic,\nyou can very quickly say, no, it's not, here's\na cycle, or say,",
    "start": "2491230",
    "end": "2496590"
  },
  {
    "text": "yeah, I agree, no back edges,\nI only have tree, forward, and cross edges.",
    "start": "2496590",
    "end": "2501611"
  },
  {
    "start": "2501611",
    "end": "2509150"
  },
  {
    "text": "OK, that was application 1. ",
    "start": "2509150",
    "end": "2516609"
  },
  {
    "text": "Application 2 is\ntopological sort, which we're going to\nthink about in the setting",
    "start": "2516610",
    "end": "2522790"
  },
  {
    "text": "of a problem called\njob scheduling.  So job scheduling, we are\ngiven a directed acyclic graph.",
    "start": "2522790",
    "end": "2534859"
  },
  {
    "start": "2534860",
    "end": "2541770"
  },
  {
    "text": "I want to order the vertices\nso that all edges point",
    "start": "2541770",
    "end": "2559090"
  },
  {
    "text": "from lower order to high order.",
    "start": "2559090",
    "end": "2566090"
  },
  {
    "start": "2566090",
    "end": "2572520"
  },
  {
    "text": "Directed acyclic\ngraph is called a DAG, you should know that from 042.",
    "start": "2572520",
    "end": "2579830"
  },
  {
    "text": "And maybe I'll\ndraw one for kicks. ",
    "start": "2579830",
    "end": "2612030"
  },
  {
    "text": "Now, I've drawn the graph so\nall the edges go left to right, so you can see that\nthere's no cycles here,",
    "start": "2612030",
    "end": "2617110"
  },
  {
    "text": "but generally you'd run DFS and\nyou'd detect there's no cycles. And now, imagine these\nvertices represent",
    "start": "2617110",
    "end": "2623170"
  },
  {
    "text": "things you need to do. The textbook has a funny example\nwhere you're getting dressed,",
    "start": "2623170",
    "end": "2629080"
  },
  {
    "text": "so you have these\nconstraints that say, well, I've got to put my socks\non before put my shoes on. And then I've got to put\nmy underwear on before I",
    "start": "2629080",
    "end": "2635620"
  },
  {
    "text": "put my pants on, and all\nthese kinds of things. You would code that as a\ndirected acyclic graph.",
    "start": "2635620",
    "end": "2641460"
  },
  {
    "text": "You hope there's no\ncycles, because then you can't get dressed. And there's some\nthings, like, well, I",
    "start": "2641460",
    "end": "2646830"
  },
  {
    "text": "could put my glasses on\nwhenever, although actually I should put my glasses on\nbefore I do anything else, otherwise there's problems.",
    "start": "2646830",
    "end": "2652730"
  },
  {
    "text": "I don't know, you could put\nyour watch on at any time, unless you need to\nknow what time is. So there's some disconnected\nparts, whatever.",
    "start": "2652730",
    "end": "2660287"
  },
  {
    "text": "There's some unrelated\nthings, like, I don't care the order between\nmy shirt and my pants or whatever, some things\naren't constrained.",
    "start": "2660287",
    "end": "2668780"
  },
  {
    "text": "What you'd like to do is choose\nan actual order to do things. Say you're a\nsequential being, you can only do one\nthing at a time, so I",
    "start": "2668780",
    "end": "2675630"
  },
  {
    "text": "want to compute a total order. First I'll do g,\nthen I'll do a, then I can do h, because I've done\nboth of the predecessors.",
    "start": "2675630",
    "end": "2682900"
  },
  {
    "text": "Then I can't do be,\nbecause I haven't done d, so maybe I'll do d first, and\nthen b, and than e, then c,",
    "start": "2682900",
    "end": "2689039"
  },
  {
    "text": "then f, then i. That would be a valid order,\nbecause all edges point from an earlier number\nto a later number.",
    "start": "2689040",
    "end": "2695579"
  },
  {
    "text": "So that's the goal. And these are real job\nscheduling problems that come up, you'll\nsee more applications",
    "start": "2695580",
    "end": "2701670"
  },
  {
    "text": "in your problem set. How do we do this?",
    "start": "2701670",
    "end": "2707199"
  },
  {
    "text": "Well, at this point we\nhave two algorithms, and I pretty much\nrevealed it is DFS. DFS will do this.",
    "start": "2707199",
    "end": "2713099"
  },
  {
    "text": "It's a topological sort, is\nwhat this algorithm is usually called. ",
    "start": "2713100",
    "end": "2720010"
  },
  {
    "text": "Topological sort because\nyou're given a graph, which you could think\nof as a topology.",
    "start": "2720010",
    "end": "2725070"
  },
  {
    "text": "You want to sort it,\nin a certain sense. It's not like\nsorting numbers, it's sorting vertices in a graph,\nso, hence, topological sort.",
    "start": "2725070",
    "end": "2732370"
  },
  {
    "text": "That's the name\nof the algorithm. And it's run DFS, and\noutput the reverse",
    "start": "2732370",
    "end": "2746250"
  },
  {
    "text": "of the finishing\ntimes of vertices.",
    "start": "2746250",
    "end": "2755192"
  },
  {
    "text": "so this is another\napplication where you really want to visit all the\nvertices in the graph, so we use this top level DFS,\nso everybody gets visited.",
    "start": "2755192",
    "end": "2765099"
  },
  {
    "text": "And there are these\nfinishing times, so every time I finish a vertex,\nI could add it to a list.",
    "start": "2765100",
    "end": "2771470"
  },
  {
    "text": "Say OK, that one\nwas finished next, than this one is finished,\nthan this one's finished. I take that order\nand I reverse it.",
    "start": "2771470",
    "end": "2778320"
  },
  {
    "text": "That will be a\ntopological order. Why? Who knows.",
    "start": "2778320",
    "end": "2784190"
  },
  {
    "text": "Let's prove it. ",
    "start": "2784190",
    "end": "2794440"
  },
  {
    "text": "We've actually done pretty\nmuch the hard work, which is to say-- we're assuming\nour graph has no cycles,",
    "start": "2794440",
    "end": "2802560"
  },
  {
    "text": "so that tells us by\nthis cycle detection that there are no back edges. Back edges are kind\nof the annoying part.",
    "start": "2802560",
    "end": "2809780"
  },
  {
    "text": "Now they don't exist here. So all the edges are tree edges,\nforward edges, and cross edges,",
    "start": "2809780",
    "end": "2816970"
  },
  {
    "text": "and we use that to\nprove the theorem. ",
    "start": "2816970",
    "end": "2825019"
  },
  {
    "text": "So we want to prove that all\nthe edges point from an earlier",
    "start": "2825020",
    "end": "2830570"
  },
  {
    "text": "number to a later number.  So what that means\nis for an edge,",
    "start": "2830570",
    "end": "2837080"
  },
  {
    "text": "uv, we want to show that\nv finishes before u.",
    "start": "2837080",
    "end": "2842830"
  },
  {
    "start": "2842830",
    "end": "2852010"
  },
  {
    "text": "That's the reverse,\nbecause what we're taking is the reverse of\nthe finishing order.",
    "start": "2852010",
    "end": "2858610"
  },
  {
    "text": "So edge uv, I want to make\nsure v finishes first, so that u will be ordered first. ",
    "start": "2858610",
    "end": "2865917"
  },
  {
    "text": "Well, there are two cases. ",
    "start": "2865917",
    "end": "2871290"
  },
  {
    "text": "Case 1 is that u\nstarts before v. Case 2",
    "start": "2871290",
    "end": "2879010"
  },
  {
    "text": "is that he v before u. ",
    "start": "2879010",
    "end": "2886690"
  },
  {
    "text": "At some point they\nstart, because we visit the whole graph. ",
    "start": "2886690",
    "end": "2893160"
  },
  {
    "text": "This top loop guarantees that. So consider what order we visit\nthem first, at the beginning,",
    "start": "2893160",
    "end": "2901440"
  },
  {
    "text": "and then we'll think\nabout how they finish. Well, this case is kind of\nsomething we've seen before.",
    "start": "2901440",
    "end": "2907400"
  },
  {
    "text": "We visit u, we have\nnot yet visited v, but v is reachable from\nu, so maybe via this edge,",
    "start": "2907400",
    "end": "2915440"
  },
  {
    "text": "or maybe via some other\npath, we will eventually visit v in the recursion for u.",
    "start": "2915440",
    "end": "2921190"
  },
  {
    "text": "So before u finishes,\nwe will visit v, visit v",
    "start": "2921190",
    "end": "2928950"
  },
  {
    "text": "before u finishes. That sentence is just\nlike this sentence,",
    "start": "2928950",
    "end": "2938560"
  },
  {
    "text": "so same kind of argument. We won't go into detail,\nbecause we already did that several times.",
    "start": "2938560",
    "end": "2944470"
  },
  {
    "text": "So that means we'll visit v,\nwe will completely visit v, we will finish v\nbefore we finish u",
    "start": "2944470",
    "end": "2950040"
  },
  {
    "text": "and that's what we\nwanted to prove. So in that case is good. The other cases is\nthat v starts before u.",
    "start": "2950040",
    "end": "2958820"
  },
  {
    "text": "Here, you might get\nslightly worried. So we have an edge, uv,\nstill, same direction.",
    "start": "2958820",
    "end": "2964809"
  },
  {
    "text": "But now we start at v, u\nhas not yet been visited.",
    "start": "2964810",
    "end": "2969930"
  },
  {
    "text": "Well, now we worry\nthat we visit u.",
    "start": "2969930",
    "end": "2975646"
  },
  {
    "text": "If we visit u, we're going to\nfinish u before we finish v, but we want it to be\nthe other way around. Why can't that happen?",
    "start": "2975646",
    "end": "2983096"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Because there's\na back edge somewhere here. In particular, the graph\nwould have to be cyclic.",
    "start": "2983096",
    "end": "2988609"
  },
  {
    "text": "This is a cycle, so this\ncan't happen, a contradiction.",
    "start": "2988610",
    "end": "2994830"
  },
  {
    "text": "So v will finish before\nwe visit u at all.",
    "start": "2994830",
    "end": "3000350"
  },
  {
    "text": " So v will still finish first,\nbecause we don't even touch u,",
    "start": "3000350",
    "end": "3007829"
  },
  {
    "text": "because there's no cycles. So that's actually the proof\nthat topological sort gives you",
    "start": "3007830",
    "end": "3013280"
  },
  {
    "text": "a valid job schedule,\nand it's kind of-- there are even more things\nyou can do with DFS.",
    "start": "3013280",
    "end": "3021200"
  },
  {
    "text": "We'll see some in recitations,\nmore in the textbook. But simple algorithm, can do\na lot of nifty things with it,",
    "start": "3021200",
    "end": "3028280"
  },
  {
    "text": "very fast, linear time.",
    "start": "3028280",
    "end": "3030930"
  }
]