[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "Okay, now let's apply all this analysis to\nimproving the performance of our circuits.",
    "start": "380",
    "end": "5980"
  },
  {
    "text": "The latency of a combinational logic circuit\nis simply its propagation delay t_PD.",
    "start": "5980",
    "end": "11519"
  },
  {
    "text": "And the throughput is just 1/t_PD since we\nstart processing the next input only after",
    "start": "11519",
    "end": "16949"
  },
  {
    "text": "finishing the computation on the current input.",
    "start": "16949",
    "end": "21088"
  },
  {
    "text": "Consider a combinational system with three\ncomponents: F, G, and H, where F and G work",
    "start": "21089",
    "end": "26029"
  },
  {
    "text": "in parallel to produce the inputs to H.\nUsing this timing diagram we can follow the",
    "start": "26029",
    "end": "31630"
  },
  {
    "text": "processing of a particular input value X.\nSometime after X is valid and stable, the",
    "start": "31630",
    "end": "37840"
  },
  {
    "text": "F and G modules produce their outputs F(X)\nand G(X).",
    "start": "37840",
    "end": "43080"
  },
  {
    "text": "Now that the inputs to H are valid and stable,\nthe H module will produce the system output",
    "start": "43080",
    "end": "47910"
  },
  {
    "text": "P(X) after a delay set by the propagation\ndelay of H.",
    "start": "47910",
    "end": "52640"
  },
  {
    "text": "The total elapsed time from valid input to\nvalid output is determined by the propagation",
    "start": "52640",
    "end": "57450"
  },
  {
    "text": "delays of the component modules.",
    "start": "57450",
    "end": "60000"
  },
  {
    "text": "Assuming we use those modules as-is, we can't\nmake any improvements on this latency.",
    "start": "60000",
    "end": "64739"
  },
  {
    "text": "But what about the system's throughput?",
    "start": "64739",
    "end": "68729"
  },
  {
    "text": "Observe that after producing their outputs,\nthe F and G modules are sitting sitting idle,",
    "start": "68729",
    "end": "73678"
  },
  {
    "text": "just holding their outputs stable while H\nperforms its computation.",
    "start": "73679",
    "end": "78380"
  },
  {
    "text": "Can we figure out a way for F and G to get\nstarted processing the next input while still",
    "start": "78380",
    "end": "83069"
  },
  {
    "text": "letting H do its job on the first input?",
    "start": "83069",
    "end": "86460"
  },
  {
    "text": "In other words, can we divide the processing\nof the combinational circuit into two stages",
    "start": "86460",
    "end": "91069"
  },
  {
    "text": "where the first stage computes F(X) and G(X),\nand the second stage computes H(X)?",
    "start": "91069",
    "end": "97740"
  },
  {
    "text": "If we can, then we can increase the throughput\nof the system.",
    "start": "97740",
    "end": "102258"
  },
  {
    "start": "102000",
    "end": "102000"
  },
  {
    "text": "Mr. Blue's inspiration is to use registers\nto hold the values F(X) and G(X) for use by",
    "start": "102259",
    "end": "108109"
  },
  {
    "text": "H, while the F and G modules start working\non the next input value.",
    "start": "108109",
    "end": "113389"
  },
  {
    "text": "To make our timing analysis a little easier,\nwe'll assume that our pipelining registers",
    "start": "113389",
    "end": "117399"
  },
  {
    "text": "have a zero propagation delay and setup time.",
    "start": "117399",
    "end": "121700"
  },
  {
    "text": "The appropriate clock period for this sequential\ncircuit is determined by the propagation delay",
    "start": "121700",
    "end": "125811"
  },
  {
    "text": "of the slowest processing stage.",
    "start": "125811",
    "end": "127670"
  },
  {
    "text": "In this example, the stage with F and G needs\na clock period of at least 20 ns to work correctly.",
    "start": "127670",
    "end": "135810"
  },
  {
    "text": "And the stage with H needs a clock period\nof 25 ns to work correctly.",
    "start": "135810",
    "end": "140840"
  },
  {
    "text": "So the second stage is the slowest and sets\nthe system clock period at 25 ns.",
    "start": "140840",
    "end": "147030"
  },
  {
    "text": "This will be our general plan for increasing\nthe throughput of combinational logic:",
    "start": "147030",
    "end": "150940"
  },
  {
    "text": "we'll use registers to divide the processing\ninto a sequence of stages, where the registers",
    "start": "150940",
    "end": "156380"
  },
  {
    "text": "capture the outputs from one processing stage\nand hold them as inputs for the next processing",
    "start": "156380",
    "end": "161720"
  },
  {
    "text": "stage.",
    "start": "161720",
    "end": "162920"
  },
  {
    "text": "A particular input will progress through the\nsystem at the rate of one stage per clock",
    "start": "162920",
    "end": "167540"
  },
  {
    "text": "cycle.",
    "start": "167540",
    "end": "169319"
  },
  {
    "text": "In this example, there are two stages in the\nprocessing pipeline and the clock period is",
    "start": "169320",
    "end": "173340"
  },
  {
    "text": "25 ns, so the latency of the pipelined system\nis 50 ns, i.e., the number of stages times",
    "start": "173340",
    "end": "180950"
  },
  {
    "text": "the system's clock period.",
    "start": "180950",
    "end": "183410"
  },
  {
    "text": "The latency of the pipeline system is a little\nlonger than the latency of the unpipelined",
    "start": "183410",
    "end": "187990"
  },
  {
    "text": "system.",
    "start": "187990",
    "end": "188990"
  },
  {
    "text": "However, the pipeline system produces 1 output\nevery clock period, or 25 ns.",
    "start": "188990",
    "end": "194980"
  },
  {
    "text": "The pipeline system has considerably better\nthroughput at the cost of a small increase",
    "start": "194980",
    "end": "199519"
  },
  {
    "text": "in latency.",
    "start": "199520",
    "end": "201950"
  },
  {
    "start": "201000",
    "end": "201000"
  },
  {
    "text": "Pipeline diagrams help us visualize the operation\nof a pipelined system.",
    "start": "201950",
    "end": "206620"
  },
  {
    "text": "The rows of the pipeline diagram represent\nthe pipeline stages and the columns are successive",
    "start": "206620",
    "end": "211599"
  },
  {
    "text": "clock cycles.",
    "start": "211600",
    "end": "213660"
  },
  {
    "text": "At the beginning of clock cycle i the input\nX_i becomes stable and valid.",
    "start": "213660",
    "end": "219790"
  },
  {
    "text": "Then during clock cycle i the F and G modules\nprocess that input and at the end of the cycle",
    "start": "219790",
    "end": "224760"
  },
  {
    "text": "the results F(X_i) and G(X_i) are captured\nby the pipeline registers between the first",
    "start": "224760",
    "end": "231019"
  },
  {
    "text": "and second stages.",
    "start": "231020",
    "end": "233010"
  },
  {
    "text": "Then in cycle i+1, H uses the captured values\ndo its share of the processing of X_i.",
    "start": "233010",
    "end": "239269"
  },
  {
    "text": "And, meanwhile, the F and G modules are working\non X_i+1.",
    "start": "239270",
    "end": "245510"
  },
  {
    "text": "You can see that the processing for a particular\ninput value moves diagonally through the diagram,",
    "start": "245510",
    "end": "251099"
  },
  {
    "text": "one pipeline stage per clock cycle.",
    "start": "251100",
    "end": "254570"
  },
  {
    "text": "At the end of cycle i+1, the output of H is\ncaptured by the final pipeline register and",
    "start": "254570",
    "end": "259510"
  },
  {
    "text": "is available for use during cycle i+2.",
    "start": "259510",
    "end": "262900"
  },
  {
    "text": "The total time elapsed between the arrival\nof an input and the availability of the output",
    "start": "262900",
    "end": "267870"
  },
  {
    "text": "is two cycles.",
    "start": "267870",
    "end": "270410"
  },
  {
    "text": "The processing continues cycle after cycle,\nproducing a new output every clock cycle.",
    "start": "270410",
    "end": "276550"
  },
  {
    "text": "Using the pipeline diagram we can track how\na particular input progresses through the",
    "start": "276550",
    "end": "280090"
  },
  {
    "text": "system or see what all the stages are doing\nin any particular cycle.",
    "start": "280090",
    "end": "284780"
  },
  {
    "text": "We'll define a K-stage pipeline (or K-pipeline\nfor short) as an acyclic circuit having exactly",
    "start": "284780",
    "end": "292060"
  },
  {
    "start": "285000",
    "end": "285000"
  },
  {
    "text": "K registers on every path from input to output.",
    "start": "292060",
    "end": "296120"
  },
  {
    "text": "An unpipelined combinational circuit is thus\na 0-stage pipeline.",
    "start": "296120",
    "end": "300919"
  },
  {
    "text": "To make it easy to build larger pipelined\nsystems out of pipelined components, we'll",
    "start": "300920",
    "end": "305340"
  },
  {
    "text": "adopt the convention that every pipeline stage,\nand hence every K-stage pipeline, has a register",
    "start": "305340",
    "end": "311870"
  },
  {
    "text": "on its output.",
    "start": "311870",
    "end": "312919"
  },
  {
    "text": "We'll use the techniques we learned for analyzing\nthe timing of sequential circuits to ensure",
    "start": "312920",
    "end": "317960"
  },
  {
    "text": "the clock signal common to all the pipeline\nregisters has a period sufficient to ensure",
    "start": "317960",
    "end": "323340"
  },
  {
    "text": "correct operation of each stage.",
    "start": "323340",
    "end": "326370"
  },
  {
    "text": "So for every register-to-register and input-to-register\npath, we need to compute the sum of the propagation",
    "start": "326370",
    "end": "332740"
  },
  {
    "text": "delay of the input register, plus the propagation\ndelay of the combinational logic, plus the",
    "start": "332740",
    "end": "337470"
  },
  {
    "text": "setup time of the output register.",
    "start": "337470",
    "end": "340050"
  },
  {
    "text": "Then we'll choose the system's clock period\nto be greater than or equal to the largest",
    "start": "340050",
    "end": "344080"
  },
  {
    "text": "such sum.",
    "start": "344080",
    "end": "345599"
  },
  {
    "text": "With the correct clock period and exactly\nK-registers along each path from system input",
    "start": "345600",
    "end": "350290"
  },
  {
    "text": "to system output, we are guaranteed that the\nK-pipeline will compute the same outputs as",
    "start": "350290",
    "end": "355590"
  },
  {
    "text": "the original unpipelined combinational circuit.",
    "start": "355590",
    "end": "359750"
  },
  {
    "text": "The latency of a K-pipeline is K times the\nperiod of the system's clock.",
    "start": "359750",
    "end": "364720"
  },
  {
    "text": "And the throughput of a K-pipeline is the\nfrequency of the system's clock, i.e., 1 over",
    "start": "364720",
    "end": "369970"
  },
  {
    "text": "the clock period.",
    "start": "369970",
    "end": "370789"
  }
]