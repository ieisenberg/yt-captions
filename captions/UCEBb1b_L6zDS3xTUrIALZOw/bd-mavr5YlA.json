[
  {
    "start": "0",
    "end": "105000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license.",
    "start": "0",
    "end": "5310"
  },
  {
    "text": "Your support will help\nMIT OpenCourseWare continue to offer high quality\neducational resources for free.",
    "start": "5310",
    "end": "11610"
  },
  {
    "text": "To make a donation or to\nview additional materials from hundreds of MIT courses,\nvisit MIT OpenCourseWare",
    "start": "11610",
    "end": "18140"
  },
  {
    "text": "at ocw.mit.edu.  PROFESSOR: So it's my pleasure\nto introduce Professor Saman",
    "start": "18140",
    "end": "26040"
  },
  {
    "text": "Amarasignhe as our\nguest lecturer today. So Saman Amarasignhe\nis a professor",
    "start": "26040",
    "end": "31530"
  },
  {
    "text": "in the EECS Department at MIT. And he's also the\nassociate department head. He's an expert in compilers,\ndomain specific languages,",
    "start": "31530",
    "end": "40559"
  },
  {
    "text": "and autotuning. In fact, he was the designer\nof the OpenTuner framework that you've been using for\nyour homework assignments.",
    "start": "40560",
    "end": "48149"
  },
  {
    "text": "So today Saman is\ngoing to tell us about some of his recent work\non domain specific languages",
    "start": "48150",
    "end": "53190"
  },
  {
    "text": "and also on autotuning. So let's give Saman Amarasignhe\na round of applause. [APPLAUSE]",
    "start": "53190",
    "end": "59160"
  },
  {
    "text": "SAMAN AMARASIGNHE: Thank you. OK, so I used to teach this\nclass for many, many years.",
    "start": "59160",
    "end": "66930"
  },
  {
    "text": "Unfortunately, now I am\nadministrator, so I don't-- Julian and Charles get to have\nthe fun teaching the class.",
    "start": "66930",
    "end": "73740"
  },
  {
    "text": "So hopefully you\nguys enjoyed your-- now you're starting-- you\nare done project one, two,",
    "start": "73740",
    "end": "79409"
  },
  {
    "text": "and three and going\ninto project four? Yeah, project four\nis really fun and-- [LAUGHTER]",
    "start": "79410",
    "end": "85790"
  },
  {
    "text": "It will look big and\ndaunting, but at the end, you'll enjoy it, and especially\nall the amount of time people",
    "start": "85790",
    "end": "93450"
  },
  {
    "text": "spend working on it. So I think I'm making you\nscared here, more than anything. OK, so let's get\ninto the talk today.",
    "start": "93450",
    "end": "100420"
  },
  {
    "text": "So I will talk to you about\ndomain specific languages and a little bit\nabout autotuning, how it leads to autotuning.",
    "start": "100420",
    "end": "105720"
  },
  {
    "start": "105000",
    "end": "385000"
  },
  {
    "text": "So why is domain\nspecific languages? So we are all used to\ngeneral purpose languages",
    "start": "105720",
    "end": "114360"
  },
  {
    "text": "that we use all day. And those languages\nare set up to capture a very large sort\nof what people might",
    "start": "114360",
    "end": "121380"
  },
  {
    "text": "want to do in programming. However, a lot of\ntimes there are specific areas, specific\ndomains, either some area in--",
    "start": "121380",
    "end": "131580"
  },
  {
    "text": "that you want to implement, or\nthe certain patterns you want to implement code that has a\nlot of interesting properties",
    "start": "131580",
    "end": "137640"
  },
  {
    "text": "that in a general\npurpose language it's very hard to describe. And a lot of times it's\nbasically very hard,",
    "start": "137640",
    "end": "145770"
  },
  {
    "text": "especially from compiler point\nof view, to take advantage. Because it has to\nwork for everybody.",
    "start": "145770",
    "end": "151349"
  },
  {
    "text": "So domain specific\nlanguages basically has this lot of\nintegrated benefits.",
    "start": "151350",
    "end": "156360"
  },
  {
    "text": "Because if you know that you\nare-- what you're building has a certain shape,\ncertain set of properties,",
    "start": "156360",
    "end": "162360"
  },
  {
    "text": "if the language captured this,\nand if you're building on that, it could be much\neasier to build.",
    "start": "162360",
    "end": "168150"
  },
  {
    "text": "It should have a lot of clarity. It's very easy to maintain\nthat kind of thing. It's very easy to test.",
    "start": "168150",
    "end": "174660"
  },
  {
    "text": "And also, the other thing is,\nit's very easy to understand. Because the domain is\nvery clearly described.",
    "start": "174660",
    "end": "180990"
  },
  {
    "text": "If-- you can build a\nlibrary, but somebody can go and do weird\nthings in library. If it is built into the\nlanguage, it's set in stone.",
    "start": "180990",
    "end": "188752"
  },
  {
    "text": "You can't go and\nsay, oh, yeah, I'm going to change something here. Let me do some weird thing here. It's built into the language.",
    "start": "188752",
    "end": "194519"
  },
  {
    "text": "So it stays there. It makes it much easier for\nprogrammers [INAUDIBLE].. But from my point of view,\nthe domain specific language",
    "start": "194520",
    "end": "202170"
  },
  {
    "text": "I really like are\nthe languages where I know I can take advantage of\nknowledge of the domain experts",
    "start": "202170",
    "end": "210210"
  },
  {
    "text": "to get really good performance. So a lot of times,\ndomain experts say, ah ha, in this\ndomain, I can do--",
    "start": "210210",
    "end": "215793"
  },
  {
    "text": "OK, there's some linear algebra,\nbut I know this kind of algebra that I can do to\nsimplify the expression.",
    "start": "215793",
    "end": "220890"
  },
  {
    "text": "That algebra might only\nwork on that domain. It's very hard to put some\ncomplex algebra into C++ or C.",
    "start": "220890",
    "end": "227700"
  },
  {
    "text": "But in that domain, I can\nsay, ha, I can call it up. So you can write any expression\nthat I can simplify it.",
    "start": "227700",
    "end": "234450"
  },
  {
    "text": "And also, there are a lot\nof idioms in each domain. So some domain\nmight say, OK, look,",
    "start": "234450",
    "end": "240220"
  },
  {
    "text": "I am going to represent a graph\nthat I'm going to talk about. In the normal C++, you\ncreate a bunch of classes.",
    "start": "240220",
    "end": "246270"
  },
  {
    "text": "You do these very\ncomplicated things. The idiom is hidden in there. First of all, C++ doesn't know\nthat I had to look for graphs.",
    "start": "246270",
    "end": "252870"
  },
  {
    "text": "But even if you had\nlook for graphs, you can try graphs in\nhundreds of millions of ways. But if it is a first class\nsupporting the language,",
    "start": "252870",
    "end": "260130"
  },
  {
    "text": "I don't have to work\nheroically to extract that. It's there. I can easily see that. So most of my compiler can be\ndoing useful things in there.",
    "start": "260130",
    "end": "267630"
  },
  {
    "text": "And most of the\ntime, the other thing is, if you build a domain\nspecific language right, you can leave the complex,\nthe lower level decision,",
    "start": "267630",
    "end": "275729"
  },
  {
    "text": "to the compiler. And if you-- C++, you might\nbe tempted to say, eh, I know some optimization.",
    "start": "275730",
    "end": "281400"
  },
  {
    "text": "Let me do something here. Oh, let me do some of\nthe optimizations here. So I have been working on\noptimization all my life.",
    "start": "281400",
    "end": "288550"
  },
  {
    "text": "And a lot of times, when you\nwrite a compile optimization part, you spend half of or more\nthan half of your time undoing",
    "start": "288550",
    "end": "294750"
  },
  {
    "text": "the crazy optimization\nthe programmer did, like you guys are learning. So this-- you think\nyou know better.",
    "start": "294750",
    "end": "300600"
  },
  {
    "text": "You go do something. And that might work well\nthen, but believe me, that code survives\n20 years later.",
    "start": "300600",
    "end": "306390"
  },
  {
    "text": "And 20 years later, that looks\nlike a really stupid thing to do. And then you look at\nit and say, OK, now I",
    "start": "306390",
    "end": "311430"
  },
  {
    "text": "had to undo everything\nin the compiler, do the right thing in\nthe current architecture. And because of that, if you\ncapture the right level,",
    "start": "311430",
    "end": "320020"
  },
  {
    "text": "I will let the compiler\ndo the work in here. And then as the\narchitectures keep maturing, as the problems keep changing,\nI don't have to worry.",
    "start": "320020",
    "end": "327370"
  },
  {
    "text": "I don't have to undo\nthese parts in here. So again, I'm coming to the\nperformance engineering class",
    "start": "327370",
    "end": "334319"
  },
  {
    "text": "and telling you guys, leave the\nperformance to the compiler. But that's the nice thing,\nthat if the compiler can do the most of your\nwork, much nicer job.",
    "start": "334320",
    "end": "342569"
  },
  {
    "text": "So don't doubt the compiler. So I'm going to talk\nabout three parts in here.",
    "start": "342570",
    "end": "350097"
  },
  {
    "text": "One is three different\nprogramming languages in here, domain specific\nlanguages, GraphIt, Halide,",
    "start": "350097",
    "end": "355199"
  },
  {
    "text": "and then OpenTuner, which\nis not just the language, but the framework in here. And between GraphIt and Halide,\nyou will see some patterns.",
    "start": "355200",
    "end": "363240"
  },
  {
    "text": "And then we'll see whether\nyou found the pattern that we are working on in here. So GraphIt, this is a product\nthat I worked with Julian.",
    "start": "363240",
    "end": "371310"
  },
  {
    "text": "So if you have any questions\nof GraphIt after today, you can definitely\ngo ask Julian.",
    "start": "371310",
    "end": "376360"
  },
  {
    "text": "He knows probably more\nabout graphs and GraphIt-- more about graphs than probably\nanybody on this planet.",
    "start": "376360",
    "end": "381620"
  },
  {
    "text": "So he's a good resource\nto talk about graphs. So talking about graphs,\ngraphs everywhere.",
    "start": "381620",
    "end": "389050"
  },
  {
    "start": "385000",
    "end": "631000"
  },
  {
    "text": "So if you go to something like\nGoogle and do some search,",
    "start": "389050",
    "end": "395879"
  },
  {
    "text": "Google has represented\nthe entire knowledge on the internet as a big graph. They have done a huge amount\nof graph processing behind you.",
    "start": "395880",
    "end": "402570"
  },
  {
    "text": "That is how-- what guides\nyour search in there. Or if you go, again, maps,\nor something like Uber,",
    "start": "402570",
    "end": "412810"
  },
  {
    "text": "it will find your directions. The entire road\nnetwork is a graph. And it's trying to find\nthings like shortest path",
    "start": "412810",
    "end": "418520"
  },
  {
    "text": "in this graph to\ngive you the map. And if you go to a\nrecommendation engine to get a recommendation for a movie, if\nyou get a really cool movie you",
    "start": "418520",
    "end": "426540"
  },
  {
    "text": "like, that's because there's\na huge graph between everybody who's-- which movie\nthey've watched,",
    "start": "426540",
    "end": "431910"
  },
  {
    "text": "and their likings\nto those movies. And they are looking and\ncomparing you to them and recommending that.",
    "start": "431910",
    "end": "436949"
  },
  {
    "text": "That's all can be viewed\nas graphs in here. And even if you go to an ATM\nand try to do a transaction,",
    "start": "436950",
    "end": "447000"
  },
  {
    "text": "there's a very fast\ngraph analysis back to say is this a fraudulent\ntransaction or not? So most of the transactions\npeople have done,",
    "start": "447000",
    "end": "454380"
  },
  {
    "text": "all the connectivities\nin the back in there, before the time that actually\nthe money pops out of your ATM",
    "start": "454380",
    "end": "459660"
  },
  {
    "text": "machine, it has done a bunch of\ngraph processes to understand, OK, this seems like\na good transaction.",
    "start": "459660",
    "end": "465180"
  },
  {
    "text": "So I will actually\ngive you the money. Sometimes you say-- you\nget this other message that mean the graph\nprocessing decided",
    "start": "465180",
    "end": "471930"
  },
  {
    "text": "there might be some weird\nthing going on there. So a lot of these things\nthat some of them,",
    "start": "471930",
    "end": "477510"
  },
  {
    "text": "like maps and graphs has-- maps and these transactions\nhave very fine latency thing",
    "start": "477510",
    "end": "483400"
  },
  {
    "text": "in there. You have to get this\nthing done right. You have to get good directions. Especially if you\ntake a wrong turn, you need to get the\nnext set of directions",
    "start": "483400",
    "end": "489990"
  },
  {
    "text": "done very fast before you go hit\nsome Boston bad weird traffic. So these things\nhave to work fast.",
    "start": "489990",
    "end": "495270"
  },
  {
    "text": "And other things, like\nrecommendations and Google Search, is huge graph. They build the entire web,\nthen all the recommendations",
    "start": "495270",
    "end": "502710"
  },
  {
    "text": "have to do a huge\namount of processing. So performance matters a\nlot in these applications.",
    "start": "502710",
    "end": "510780"
  },
  {
    "text": "So let me dive down a\nlittle bit deeper into show what graphs means, what\ngraph processing means.",
    "start": "510780",
    "end": "519179"
  },
  {
    "text": "So one of the very well\nknown graph algorithms is called PageRank.",
    "start": "519179",
    "end": "527820"
  },
  {
    "text": "Anybody knows [INAUDIBLE] page? How many have heard of PageRank? OK, what does page\nstand in page rank?",
    "start": "527820",
    "end": "535830"
  },
  {
    "text": "AUDIENCE: Larry Page. SAMAN AMARASIGNHE: Larry Page. So the first\nalgorithm Google did-- I don't think this is anywhere\nnear Google at this point--",
    "start": "535830",
    "end": "542250"
  },
  {
    "text": "was this algorithm, PageRank. So it ranked these pages. But it was developed\nby Larry Page.",
    "start": "542250",
    "end": "549030"
  },
  {
    "text": "So it depends on either page--\nit's web pages or Larry Page.",
    "start": "549030",
    "end": "554400"
  },
  {
    "text": "We don't know. But people think it's\nLarry Page is PageRank. So you have a graph in here.",
    "start": "554400",
    "end": "559830"
  },
  {
    "text": "So this graph\nalgorithm, what it does it is [INAUDIBLE]\nto some iterations, either it's max_iter on to\nsome convergence in here.",
    "start": "559830",
    "end": "566980"
  },
  {
    "text": "So what it first do is\nit will go around, look at all its neighbors,\nand calculate,",
    "start": "566980",
    "end": "576170"
  },
  {
    "text": "basically rank a new rank\nout of all my neighbors. So that means what is--",
    "start": "576170",
    "end": "582470"
  },
  {
    "text": "how good are my neighbors? What's their rank? And what's their\ncontribution to me? So it means being\nknown to a good person",
    "start": "582470",
    "end": "589640"
  },
  {
    "text": "and having a connection\nto a very well known-- in this case, a super web\npage-- means I am highly ranked.",
    "start": "589640",
    "end": "595628"
  },
  {
    "text": "So I am more\ninfluential, because I'm closer to something in there. So what it does is,\nbasically, it will go--",
    "start": "595628",
    "end": "602240"
  },
  {
    "text": "each node calculates some\nvalue, and propagate to all the neighbors, and aggregating. So entire graph\nparticipating in that.",
    "start": "602240",
    "end": "608990"
  },
  {
    "text": "And then, what\nhappens is each node will go about calculating\nits new rank in there.",
    "start": "608990",
    "end": "614540"
  },
  {
    "text": "From looking at old rank,\nit get modified a little bit towards a new rank. And then they swap old\nranks and new ranks.",
    "start": "614540",
    "end": "620990"
  },
  {
    "text": "So this is the two computations\nthat you iterate over that. And you have to do for\nthe entire graph in here.",
    "start": "620990",
    "end": "626690"
  },
  {
    "text": "So, of course, you can run this. This will run very, very\nslowly if you run this. So if you want to\nget performance,",
    "start": "626690",
    "end": "631779"
  },
  {
    "start": "631000",
    "end": "696000"
  },
  {
    "text": "you write this piece of code. So this piece of code,\nbasically, is huge.",
    "start": "631780",
    "end": "639480"
  },
  {
    "text": "And it runs 23 times\nfaster than what's in the previous graph in\nhere on a 12 core machine.",
    "start": "639480",
    "end": "644950"
  },
  {
    "text": "It basically had\nmulti-threaded so we'd get parallel performance. It is load balanced\nbecause, as you know,",
    "start": "644950",
    "end": "651010"
  },
  {
    "text": "graphs are very unbalanced. So you get load balance. If you have non-uniform\nmemory access machines, things",
    "start": "651010",
    "end": "656780"
  },
  {
    "text": "like multiple socket machines,\nit will take advantage of that. It advantage of caches-- a lot of things happening\nin this piece of code.",
    "start": "656780",
    "end": "664160"
  },
  {
    "text": "But, of course, you know\nthis is hard to write this piece of code. But also, worse, you\nmight not know what to do,",
    "start": "664160",
    "end": "671445"
  },
  {
    "text": "what the right optimizing--\nyou might only iterate. You might try many things. And this is very hard.",
    "start": "671445",
    "end": "676460"
  },
  {
    "text": "Every time you change\nsomething, if you say, ah, I want to do something\na little bit different, that I had to write a very\ncomplicated piece of code,",
    "start": "676460",
    "end": "683509"
  },
  {
    "text": "get it all right, get everything\nworking before I test in here.",
    "start": "683510",
    "end": "688670"
  },
  {
    "text": "So this is why we can\nuse a DSL for this one. So let me go a little bit,\ntalk about graph algorithms",
    "start": "688670",
    "end": "696889"
  },
  {
    "start": "696000",
    "end": "928000"
  },
  {
    "text": "and say this seems like\na new set of [INAUDIBLE].. So what do people\ndo with graphs?",
    "start": "696890",
    "end": "703243"
  },
  {
    "text": "So when they say\ngraph algorithms, I'm going to go a\nlittle bit deep down to show you what type of\nthings represent these graphs.",
    "start": "703243",
    "end": "710570"
  },
  {
    "text": "There's one class\nof graph algorithms that are called\ntopology-driven algorithms. That means the entire\ngraph participates",
    "start": "710570",
    "end": "717440"
  },
  {
    "text": "in the computation. For example, Google Search-- before you do Google\nSearch, it will",
    "start": "717440",
    "end": "724290"
  },
  {
    "text": "do the entire basic collection\nof all the web links. It will build this\nhuge graph and do",
    "start": "724290",
    "end": "731120"
  },
  {
    "text": "huge amount of processing\nto basically able to do the search in here.",
    "start": "731120",
    "end": "736220"
  },
  {
    "text": "Recommendation engine-- so\nevery, probably few weeks, or whatever it is, it\nwill collect everybody's",
    "start": "736220",
    "end": "741620"
  },
  {
    "text": "recommendations,\nhave this huge data, and you're going to process\nthat and do this recommendation engine. So this is applied\nfor the entire graphs,",
    "start": "741620",
    "end": "748340"
  },
  {
    "text": "and sometimes billions\nor trillions of nodes have to go into\nthis computation.",
    "start": "748340",
    "end": "753500"
  },
  {
    "text": "Another set of algorithms is\ncalled data-driven algorithms. So what that means is you\nstart with certain nodes.",
    "start": "753500",
    "end": "759740"
  },
  {
    "text": "And then you keep going to its\nneighbors and its neighbors processing data in\nhere as we do that.",
    "start": "759740",
    "end": "767170"
  },
  {
    "text": "And the kind of algorithms\nthat fit in this category",
    "start": "767170",
    "end": "772769"
  },
  {
    "text": "are things like\nif you have a map, if I had to find the shortest\npath, that means I have, probably two paths.",
    "start": "772770",
    "end": "778170"
  },
  {
    "text": "I don't have to get in from\ndirection from here to Boston. I don't have to go through\nNew York nodes in New York.",
    "start": "778170",
    "end": "785310"
  },
  {
    "text": "I just have to go through my\nneighbors connected to me. So I am basically\noperating on a certain area",
    "start": "785310",
    "end": "790860"
  },
  {
    "text": "with some connections\nand processing that. So these are\ndata-driven algorithms. So I might have a huge graph.",
    "start": "790860",
    "end": "797760"
  },
  {
    "text": "But my computation\nmight only work on a small region or a\nsmall part of the graph in these algorithms.",
    "start": "797760",
    "end": "803886"
  },
  {
    "text": " So when you traversing\nthrough a graph doing that,",
    "start": "803886",
    "end": "811680"
  },
  {
    "text": "there are multiple ways\nof doing graph traversals. And this is why\noptimization is hard.",
    "start": "811680",
    "end": "817110"
  },
  {
    "text": "Because there are many\ndifferent ways of doing things. And each has different set\nof outcomes you can get.",
    "start": "817110",
    "end": "824820"
  },
  {
    "text": "So I see a lot of\ngraph algorithms. I need to get something\nfrom my neighbors.",
    "start": "824820",
    "end": "832020"
  },
  {
    "text": "One way to get something\nmy neighbors is I can calculate what the\nneighbor-- all my neighbors might want and give it\nto all the neighbors.",
    "start": "832020",
    "end": "839980"
  },
  {
    "text": "Or I can go change all the\nneighbors to update my value. So why do you think-- OK, you have done some\nprogramming in here.",
    "start": "839980",
    "end": "847312"
  },
  {
    "text": "What do you think about this? Is this a good way? So if I want to\nupdate everybody, I will calculate what\nI will do, and I'll",
    "start": "847312",
    "end": "853770"
  },
  {
    "text": "go change everybody,\nall my neighbors. ",
    "start": "853770",
    "end": "861089"
  },
  {
    "text": "AUDIENCE: This is not as\nparallel as it could be. SAMAN AMARASIGNHE: Not as\nparallel as it could be. I think you are\ngetting to a point.",
    "start": "861089",
    "end": "867160"
  },
  {
    "text": "But why is not that parallel? AUDIENCE: Well, if you're\ndoing the same thing with the neighbors, you might\nas well just tell your neighbors",
    "start": "867160",
    "end": "875209"
  },
  {
    "text": "to do the work for you. SAMAN AMARASIGNHE: Yeah, but-- that's a very good point. So if you are doing a\ndata-driven, if I'm doing,",
    "start": "875210",
    "end": "880370"
  },
  {
    "text": "that's not good. But if everybody is doing\nthat to their neighbor, so then I have parallelism.",
    "start": "880370",
    "end": "885950"
  },
  {
    "text": "So everybody might say, you\nare updated your neighbor. You are updating\nyour-- everybody is updating their neighbors. So now there's another\nproblem showing up.",
    "start": "885950",
    "end": "892790"
  },
  {
    "text": "What's the problem\nif everybody tried to update their neighbors? Back there. AUDIENCE: There's a\ndeterminancy race. SAMAN AMARASIGNHE:\nThere's a race in there.",
    "start": "892790",
    "end": "898850"
  },
  {
    "text": "Because everybody's\ngoing right in there. So if you want to get\nthis actually right, you have a bunch of issues here.",
    "start": "898850",
    "end": "905210"
  },
  {
    "text": "You want to basically\ndo atomic updates. Because you need\nto lock that thing. So it has get atomically\nupdated in here.",
    "start": "905210",
    "end": "912560"
  },
  {
    "text": "And this is nice. But I don't have to\ntraverse anything. Because everybody\nI need to update, I actually go and update it.",
    "start": "912560",
    "end": "917870"
  },
  {
    "text": "That's nice way to\ndo that, especially if it is not a global thing. So if I'm propagating, I\nwill update my neighbors.",
    "start": "917870",
    "end": "924530"
  },
  {
    "text": "And I can propagate that down. Another way to do\nthat is pull schedule.",
    "start": "924530",
    "end": "932000"
  },
  {
    "start": "928000",
    "end": "1246000"
  },
  {
    "text": "That means if I-- everybody look at-- ask their\nneighbors, OK, do you have-- what you have to--",
    "start": "932000",
    "end": "937459"
  },
  {
    "text": "give it to me. And I collect everything\nfrom my neighbors. And I update myself. So is there a race\ncondition now?",
    "start": "937460",
    "end": "943420"
  },
  {
    "start": "943420",
    "end": "948940"
  },
  {
    "text": "How many people say\nthere is a race? How many people think\nthere's no race? So what happens is I'm reading\nfrom all the neighbors.",
    "start": "948940",
    "end": "956020"
  },
  {
    "text": "Everybody is reading\nfrom the neighbors. But I am only updating myself. So because of that, I'm the\nonly one who's writing me.",
    "start": "956020",
    "end": "961270"
  },
  {
    "text": "So I don't have a race. So it is really nice\nyou don't have a race. But I might-- if I'm doing a\ndata-driven transformation,",
    "start": "961270",
    "end": "968380"
  },
  {
    "text": "I might not know that\nI need to get updated. Because the update\ncomes from that person. And that means I\nmight be asking you,",
    "start": "968380",
    "end": "974122"
  },
  {
    "text": "do you have anything to send? And you might say no. So in that sense,\nI might basically doing a lot of extra\ncomputation than necessary.",
    "start": "974122",
    "end": "981880"
  },
  {
    "text": "Because I might not know that\nI have data I need to get. But I had to ask you\nwhether I should do this.",
    "start": "981880",
    "end": "988029"
  },
  {
    "text": "But I don't have any, basically,\nneed to do any synchronization.",
    "start": "988030",
    "end": "996790"
  },
  {
    "text": "Another interesting thing\nis I can take this graph, and I can basically\npartition the graph.",
    "start": "996790",
    "end": "1002690"
  },
  {
    "text": "And once I partition\nthe graph, I can basically say, OK,\nthis core get this graph.",
    "start": "1002690",
    "end": "1007800"
  },
  {
    "text": "This core get this graph. Or this processor\nnode get this graph. What's the advantage of\npartitioning a graph?",
    "start": "1007800",
    "end": "1013750"
  },
  {
    "text": " Why do I want to partition\na graph-- large graph into small pieces?",
    "start": "1013750",
    "end": "1019450"
  },
  {
    "start": "1019450",
    "end": "1025400"
  },
  {
    "text": "Of course, you had to\ndo a good partition. You can't do\narbitrary partition. So what happens if I\ndo a good partitioning?",
    "start": "1025400",
    "end": "1031910"
  },
  {
    "text": "I don't tell the word, because\nthen the answer comes out in there. OK, let me see if anybody\nelse, you have answered--",
    "start": "1031910",
    "end": "1038089"
  },
  {
    "text": "anybody else want to answer? Come on. You have to-- [INAUDIBLE].",
    "start": "1038089",
    "end": "1044669"
  },
  {
    "text": "What happened if I take apart,\nand find two different groups, and separate them, and give\nthis one to one and this one",
    "start": "1044670",
    "end": "1051170"
  },
  {
    "text": "to another? What do I get? AUDIENCE: You get\nsome parallelism. SAMAN AMARASIGNHE: I\nget parallelism, also.",
    "start": "1051170",
    "end": "1056752"
  },
  {
    "text": "But other thing, if I have a\nlot of connected things going to-- these connected things\ngoing to that person, what else can I get?",
    "start": "1056752",
    "end": "1064510"
  },
  {
    "text": "Locality-- have you heard? Did you do locality\nin the class? So that means-- the\npartition means my--",
    "start": "1064510",
    "end": "1071720"
  },
  {
    "text": "the thing I'm working, I am\nonly working on a small amount. And that might, if I'm\nlucky, fit in my cache.",
    "start": "1071720",
    "end": "1077490"
  },
  {
    "text": "And that would be very\nnice then everybody's has to go to every node in here.",
    "start": "1077490",
    "end": "1083690"
  },
  {
    "text": "So if I partition\nthis properly, I will get good locality in here.",
    "start": "1083690",
    "end": "1089200"
  },
  {
    "text": "It's actually written\nthere, whoops. So my answer was in there,\nso improved locality.",
    "start": "1089200",
    "end": "1095120"
  },
  {
    "text": "But, of course, now I might have\na little bit extra overhead. Because I know I might have\nto replicate some nodes,",
    "start": "1095120",
    "end": "1100830"
  },
  {
    "text": "stuff like that. Because it's in both sides. ",
    "start": "1100830",
    "end": "1107980"
  },
  {
    "text": "So another interesting\nin properties of graphs is when you look at data\nstructures until now,",
    "start": "1107980",
    "end": "1113620"
  },
  {
    "text": "things like arrays,\nthe size matters. These represent what\narray fits in the cache, and stuff like that.",
    "start": "1113620",
    "end": "1118700"
  },
  {
    "text": "Graphs, there are\nsome other properties of the graphs in here.",
    "start": "1118700",
    "end": "1124269"
  },
  {
    "text": "So if you go to\nsocial networks-- social network is a graph--",
    "start": "1124270",
    "end": "1130030"
  },
  {
    "text": "what's the interesting\nproperty in social networks you have observed? ",
    "start": "1130030",
    "end": "1138180"
  },
  {
    "text": "AUDIENCE: Connectedness. SAMAN AMARASIGNHE:\nConnectedness-- there are people\nlike me that probably have 20 friends in\nthere and has a very",
    "start": "1138180",
    "end": "1144350"
  },
  {
    "text": "little number of connections. And then there are\ncelebrities who have millions of connections in here. So the interesting thing is,\nif you look at a social network",
    "start": "1144350",
    "end": "1151790"
  },
  {
    "text": "graph, you have this\nrelationship called power law relationship.",
    "start": "1151790",
    "end": "1157520"
  },
  {
    "text": "That means-- there's\nexponential code. There are some people here,\nlike very well-known celebrities",
    "start": "1157520",
    "end": "1164960"
  },
  {
    "text": "that might have millions and\nmillions of users in here-- connections in\nneighbors, or likes,",
    "start": "1164960",
    "end": "1170390"
  },
  {
    "text": "or whatever it is in that node. And there are people\nlike me sitting here that has very little\npeople connected",
    "start": "1170390",
    "end": "1176419"
  },
  {
    "text": "to the rest of the world. So this is normally-- people\nhave observed these big social network type graphs-- you have this kind of\nexponential relationship",
    "start": "1176420",
    "end": "1183125"
  },
  {
    "text": "in here. So the web has\nexponential relationship. A social network has this\nkind of relationship in there.",
    "start": "1183125",
    "end": "1190220"
  },
  {
    "text": "So those things you have to\ndo very interesting things when you process these graphs. Because there are certain\nconnections that matter,",
    "start": "1190220",
    "end": "1196490"
  },
  {
    "text": "certain nodes that\nmatter a lot, or has a big impact than other nodes. ",
    "start": "1196490",
    "end": "1202929"
  },
  {
    "text": "Then there are other\ngraphs that have a bounded-degree distribution. If you have a road network,\nthe maximum connection,",
    "start": "1202930",
    "end": "1210070"
  },
  {
    "text": "probably you might\nhave an intersection that has six roads coming\nto together in there. You don't have a million roads\nconnecting into one place",
    "start": "1210070",
    "end": "1216920"
  },
  {
    "text": "anywhere in there. So that doesn't happen. So this is a lot more\nflatter, a lot more bounded-degree distribution\ngraphs in here.",
    "start": "1216920",
    "end": "1224106"
  },
  {
    "text": "They have lots of\nexcellent locality in here because, of course, all\nthe roads in Cambridge",
    "start": "1224107",
    "end": "1229450"
  },
  {
    "text": "might be connected. But roads in Cambridge\ncan be separated from roads in New York City. So there they are separated.",
    "start": "1229450",
    "end": "1235340"
  },
  {
    "text": "They are locality--\nnice locality in these kind of graphs. So even the-- if\nyou say the graph be",
    "start": "1235340",
    "end": "1241120"
  },
  {
    "text": "the same size, the\nshape of the graph matters in computation,\na lot of times. ",
    "start": "1241120",
    "end": "1247820"
  },
  {
    "start": "1246000",
    "end": "1386000"
  },
  {
    "text": "So what happens is\nnow when you want to operate on these\ngraphs, you have to look at three\ninteresting properties.",
    "start": "1247820",
    "end": "1255500"
  },
  {
    "text": "One property is, OK,\nhow much parallelism my algorithm, what I'm\ntrying to do to this graph is going to get?",
    "start": "1255500",
    "end": "1262269"
  },
  {
    "text": "It's like a\nGoldilocks type thing. You don't want too\nmuch parallelism. If you say, I have\nalgorithm that huge amount",
    "start": "1262270",
    "end": "1267530"
  },
  {
    "text": "of parallelism, if I can't take\nadvantage, it's not useful. So you need to get a\nparallelism good enough that I can actually use it.",
    "start": "1267530",
    "end": "1274570"
  },
  {
    "text": "Then I really like\nto have locality. Because if I have a locality,\nmy caches will work.",
    "start": "1274570",
    "end": "1281260"
  },
  {
    "text": "Everything will be nearby. I can get-- runs things fast. If I, every time, I have to\nget something from main memory, it can be very, very slow.",
    "start": "1281260",
    "end": "1287460"
  },
  {
    "text": "So I want to get locality. But the interesting\nthing about graphs is to get localities\nand get some of these,",
    "start": "1287460",
    "end": "1294550"
  },
  {
    "text": "you might have to\ndo some extra work. So if you saw that\ngraph got divided into two different graphs, I\nhad to add extra nodes in here.",
    "start": "1294550",
    "end": "1302590"
  },
  {
    "text": "I might write some\nextra data structures, so do some extra computation. So I might have to do\nsome extra work in here.",
    "start": "1302590",
    "end": "1308380"
  },
  {
    "text": "So in certain things, I might\nnot be that work efficient. So I might get really good\nparallelism and locality,",
    "start": "1308380",
    "end": "1314870"
  },
  {
    "text": "but I am doing too much work. So, for example, if I want to-- assume I want to find\none node's neighbor,",
    "start": "1314870",
    "end": "1324375"
  },
  {
    "text": "very way to get\ngood parallelism, everybody finds their neighbor. OK, but that's not efficient.",
    "start": "1324375",
    "end": "1329995"
  },
  {
    "text": "I mean, most of the\ncomputation's not useful. So there, you can do\nthings that you are doing extra work than necessary.",
    "start": "1329995",
    "end": "1335590"
  },
  {
    "text": "Then that can get much\nfaster other things. But you have to be\ncareful on doing that.",
    "start": "1335590",
    "end": "1340870"
  },
  {
    "text": "So you have this\nbalance in there. So certain algorithms will fit\nin different places in here",
    "start": "1340870",
    "end": "1346720"
  },
  {
    "text": "in this tradeoff space. So push algorithm\nwill fit in here. So, for example, if\nyou go to something like a pull algorithm,\nwhat you might find",
    "start": "1346720",
    "end": "1353470"
  },
  {
    "text": "is you are doing\nless work efficient. Because you might do a\nlittle bit more work.",
    "start": "1353470",
    "end": "1358550"
  },
  {
    "text": "But it might be better in\nlocality and parallelism, because you don't have\nto do locks in here.",
    "start": "1358550",
    "end": "1364030"
  },
  {
    "text": "And then you do something\nlike partitioning. It gets really good\nlocality in partitioning. But you are doing extra work.",
    "start": "1364030",
    "end": "1370000"
  },
  {
    "text": "And also, because\nin your partition, you might limit your\nparallelism in here. So you might less\nparallelism, but you",
    "start": "1370000",
    "end": "1375460"
  },
  {
    "text": "get really good locality. So all this is basically\nlarge tradeoff space in here. And then when you keep\nadding more and more things",
    "start": "1375460",
    "end": "1382510"
  },
  {
    "text": "you can do, it fits into\nthis big tradeoff space. So how do you decide what to go\nin the tradeoff space is a very",
    "start": "1382510",
    "end": "1390250"
  },
  {
    "start": "1386000",
    "end": "1482000"
  },
  {
    "text": "important thing-- decision. So it depends on the graphs. If you have power law graphs,\nyou might want to do something.",
    "start": "1390250",
    "end": "1396220"
  },
  {
    "text": "If you have a more\nlimited distributed graph, you want to do something else.",
    "start": "1396220",
    "end": "1402742"
  },
  {
    "text": "And the power law\ngraphs, sometimes you might do something different\nfor the high connected edges versus others.",
    "start": "1402742",
    "end": "1408190"
  },
  {
    "text": "You might not even\ndifferentiate between that. It depends on the algorithm. So if you are doing--",
    "start": "1408190",
    "end": "1414222"
  },
  {
    "text": "visiting all the nodes, whereas\nas a data-driven algorithm, you might do\nsomething different. It also depends on the\nhardware you're running.",
    "start": "1414222",
    "end": "1421370"
  },
  {
    "text": "So, for example, if you\nare doing a Google search, basically indexing,\nyou're running",
    "start": "1421370",
    "end": "1426970"
  },
  {
    "text": "an algorithm that has to operate\non the entire graph in here. And the graph is a\npower law graph in that.",
    "start": "1426970",
    "end": "1432909"
  },
  {
    "text": "And you're running on a cluster. So the right thing\nmight be something like a pull schedule with some\npartitioning and something",
    "start": "1432910",
    "end": "1439330"
  },
  {
    "text": "like a vertex\nparallel, or some kind of a parallelism scheme\nin here might give you the best performance.",
    "start": "1439330",
    "end": "1445330"
  },
  {
    "text": "But in the other\nside of the Google, if you're trying to do\na map, and if you're trying to give you\ndirections, you have a very different\ntype of a graph.",
    "start": "1445330",
    "end": "1452620"
  },
  {
    "text": "You are doing a data-driven\nalgorithm in that graph. And you might be running\non a single machine. Because you need\nto give direction",
    "start": "1452620",
    "end": "1458057"
  },
  {
    "text": "fast for each individual time. You might have a very\ndifferent type of algorithm you want to run\nthis graph, the push",
    "start": "1458057",
    "end": "1463690"
  },
  {
    "text": "algorithm in vertex\nparallel, perhaps, some combination in there. And, of course, if you get a\nbad algorithm or bad set of--",
    "start": "1463690",
    "end": "1471910"
  },
  {
    "text": "way of doing it,\nyou can be very bad. You can get hundreds of\nthousands times slower than the best you can achieve.",
    "start": "1471910",
    "end": "1478370"
  },
  {
    "text": "So it matters to\nfind the right thing, right way of doing things. So this is where\nGraphIt came in.",
    "start": "1478370",
    "end": "1484520"
  },
  {
    "text": "GraphIt is a domain specific\nlanguage, basically, we developed. And one thing GraphIt did\nwas we said, OK, look,",
    "start": "1484520",
    "end": "1491950"
  },
  {
    "text": "the algorithm is\nmostly constant. But how you process\nthe-- how you go about it",
    "start": "1491950",
    "end": "1497410"
  },
  {
    "text": "is very different. So we want to\nseparate these things. So the first thing\nwe did was come up",
    "start": "1497410",
    "end": "1503779"
  },
  {
    "text": "with the algorithm, which is\nwhat do you want to compute? It's very high level. It don't tell you how we are\ncomputing that-- saying this",
    "start": "1503780",
    "end": "1510740"
  },
  {
    "text": "is my algorithm. I aim to process these nodes. And this is the computation\nI want to do in there.",
    "start": "1510740",
    "end": "1517210"
  },
  {
    "text": "And you separate it with\nan optimizational schedule how to compute. So we'd say, OK, to\ndo this algorithm,",
    "start": "1517210",
    "end": "1524340"
  },
  {
    "text": "you had to do a push schedule,\ndo this type of parallelism-- each separately. And the nice thing is that\nis now, if the graph changed",
    "start": "1524340",
    "end": "1531940"
  },
  {
    "text": "or if the matching\nchanged, I can give you a different schedule in here. So let me show\nyou some examples.",
    "start": "1531940",
    "end": "1538669"
  },
  {
    "text": "First, look at the\nalgorithm in here. So we show three different\ntypes of things you want to do.",
    "start": "1538670",
    "end": "1545190"
  },
  {
    "start": "1541000",
    "end": "1677000"
  },
  {
    "text": "So you want to do the\nentire graph in here, have the data-driven. Or I might want to just operate\non the vertices in here.",
    "start": "1545190",
    "end": "1553040"
  },
  {
    "text": "So this one we have-- the language provides a very\nsimple way of doing that.",
    "start": "1553040",
    "end": "1558610"
  },
  {
    "text": "Language has this\nfunction saying, if there are edges, all the\nedges of the graph, apply-- you can give a function.",
    "start": "1558610",
    "end": "1564440"
  },
  {
    "text": "The function takes the,\nbasically, nodes and the edges, basically-- it to\nbasically carry out",
    "start": "1564440",
    "end": "1570080"
  },
  {
    "text": "this computation, a very\nsimple way of doing that. So this is the representation. So the nice thing, the\nsimplicity of programming now.",
    "start": "1570080",
    "end": "1576290"
  },
  {
    "text": "If I write it in C, it will look\nlike a big blob of ugly code. In the domain specific language,\nall you have to write is this--",
    "start": "1576290",
    "end": "1583550"
  },
  {
    "text": "make life very simple. Or if you're a\ndata-driven language, I have to say, OK, I start\nwith this set of vertices",
    "start": "1583550",
    "end": "1590060"
  },
  {
    "text": "to compute in here. And here are the vertices\nI am going to in here, the vertex sent here.",
    "start": "1590060",
    "end": "1596471"
  },
  {
    "text": "And then I do some filtering. Because I might not\ngo visit everybody. There are some filtering\nof what you can do.",
    "start": "1596472",
    "end": "1603072"
  },
  {
    "text": "And then once you figure\nout exactly the things you are computing,\nhere's a function to go and apply to that. So I can give you some very\nnice way of basically subsetting",
    "start": "1603072",
    "end": "1610640"
  },
  {
    "text": "my graph with\ncertain properties, select those things, and\nnow go compute there. And if you're only\ndoing vertices,",
    "start": "1610640",
    "end": "1616800"
  },
  {
    "text": "say, OK, for each\nvertices, again, I can filter, saying this\nsubset or something go to that computation.",
    "start": "1616800",
    "end": "1622250"
  },
  {
    "text": "So language-wise,\nit's very simple. This is what all you had to do. Now if you look at\nPageRank, PageRank",
    "start": "1622250",
    "end": "1630770"
  },
  {
    "text": "has two interesting\nupdate functions. What is-- one is\nupdating, going-- looking at edges.",
    "start": "1630770",
    "end": "1636389"
  },
  {
    "text": "So what it says is new rank,\nI get the destination edge. And it gets updated using\nall the source edges in here.",
    "start": "1636390",
    "end": "1642830"
  },
  {
    "text": "This is the update function,\nvery simple update function. And then once you do that\nfor each, basically, vertex,",
    "start": "1642830",
    "end": "1649220"
  },
  {
    "text": "I go do internal update. I give these two functions and\nput them together into driver.",
    "start": "1649220",
    "end": "1654620"
  },
  {
    "text": "And the driver says run this\nfunction, run this function, and I'm done. OK, so I can write this\ncode at higher level, much",
    "start": "1654620",
    "end": "1662720"
  },
  {
    "text": "simpler, much nicer,\nmuch more elegant way. It's much easier to understand. It's easier than even the\nsimple C++ code to understand",
    "start": "1662720",
    "end": "1669620"
  },
  {
    "text": "what's going on if you\nwrite it in this way. So this is the first advantage\nof a domain specific language.",
    "start": "1669620",
    "end": "1675830"
  },
  {
    "text": "I can do this. Then the next thing\nyou can do is now I can come up with the schedule.",
    "start": "1675830",
    "end": "1681130"
  },
  {
    "start": "1677000",
    "end": "1789000"
  },
  {
    "text": "So schedules should\nbe easy to use. And it should be\npowerful enough I should be able to get\nthe best speed possible.",
    "start": "1681130",
    "end": "1686720"
  },
  {
    "text": "Because I can tell you\nall the crazy things I can do to the code. So here's my program\nhere for PageRank.",
    "start": "1686720",
    "end": "1695660"
  },
  {
    "text": "And so what I can do\nis, for this algorithm, I can provide this\nschedule in here.",
    "start": "1695660",
    "end": "1701110"
  },
  {
    "text": "And this schedule basically\nsays, OK, look at this guy, s1. I marked it in there.",
    "start": "1701110",
    "end": "1707030"
  },
  {
    "text": "For s1, I want to do\nSparsePush type computation. This is how I want\nto process this one.",
    "start": "1707030",
    "end": "1713780"
  },
  {
    "text": "And then, by looking at that,\nI can generate a pseudo code that looks like this\nthat basically first goes",
    "start": "1713780",
    "end": "1719419"
  },
  {
    "text": "through a source node,\nbecause I'm doing push from source to destination. And then I'm going through\nall the destination",
    "start": "1719420",
    "end": "1725090"
  },
  {
    "text": "nodes of that source. And I'm going to actually\ngo and update them. So I can do this very\nsimple updating here.",
    "start": "1725090",
    "end": "1732077"
  },
  {
    "text": "But this might not get\nyou that performance. I say, ah ha, I want to\ndo this in parallelism.",
    "start": "1732077",
    "end": "1737330"
  },
  {
    "text": "I want to run this parallel. And then when I do that, it\nwill automatically generate, say ah ha, now, I will\nmake this two parallel.",
    "start": "1737330",
    "end": "1744283"
  },
  {
    "text": "And now I can't\ndo simple updates. I have to atomic add. So here's my atomic\nadd operation-- so the graph in here.",
    "start": "1744283",
    "end": "1751010"
  },
  {
    "text": "Then you might think, and say,\nmm, do I want to do the push? Can I do a pull? So if I do a pull chain, it\nwill basically switch the--",
    "start": "1751010",
    "end": "1759210"
  },
  {
    "text": "in here. Now I am going from\ndestination to source. I changed order in there. And now I don't have to\ndo that atomic update.",
    "start": "1759210",
    "end": "1765080"
  },
  {
    "text": "Because I am pulling everything\nto my node and updating here.",
    "start": "1765080",
    "end": "1770269"
  },
  {
    "text": "And then, of course, if\nyou want to do some kind of partitioning, I can\nalso say partitioning, it's-- now we created\na sub-graph in here.",
    "start": "1770270",
    "end": "1776603"
  },
  {
    "text": "And for the sub-graph, I\nam doing this partitioning. So I can keep changing\nall these things. Look, I didn't touch this.",
    "start": "1776603",
    "end": "1782270"
  },
  {
    "text": "My algorithm still stays same. I'm changing my scheduling. I can play with this schedule.",
    "start": "1782270",
    "end": "1789710"
  },
  {
    "start": "1789000",
    "end": "1817000"
  },
  {
    "text": "Nice thing about\nthat is now if you keep playing with\nthe schedule, here's the kind of performance I get. The first guy was sequential,\npretty bad performance.",
    "start": "1789710",
    "end": "1797419"
  },
  {
    "text": "The next guy, I just\nparallelized in here. I got some performance in here. But it had all the\nsynchronization.",
    "start": "1797420",
    "end": "1804160"
  },
  {
    "text": "So I changed the\norder of execution. And I got an even\nbetter performance. And now I partitioned, got\n[INAUDIBLE] performance.",
    "start": "1804160",
    "end": "1810430"
  },
  {
    "text": "So this is the\norder of doing that. But, of course, you can play\nwith many, many different combinations.",
    "start": "1810430",
    "end": "1815600"
  },
  {
    "text": "And what GraphIt\nhas is huge number of different combinations\nyou can play with.",
    "start": "1815600",
    "end": "1822260"
  },
  {
    "start": "1817000",
    "end": "1869000"
  },
  {
    "text": "So there are a lot of\ndifferent optimizations. You can do direction\noptimizations, push, pull, doing a\nsparse, dense, different",
    "start": "1822260",
    "end": "1829130"
  },
  {
    "text": "parallelization, cache,\nNUMA optimization, and also",
    "start": "1829130",
    "end": "1834610"
  },
  {
    "text": "data layout, things like\nstructures of arrays, array of structure layout,\nadditional data structures that",
    "start": "1834610",
    "end": "1841450"
  },
  {
    "text": "simplify computation. All these things I\ncan specify in here. And then you can play with it. It's not clear which one wins.",
    "start": "1841450",
    "end": "1848480"
  },
  {
    "text": "It depends on the algorithm,\ndepending on the graph shape, graph size, depending\non the machine you run.",
    "start": "1848480",
    "end": "1853520"
  },
  {
    "text": "So most of the time, if you\nare a performance engineer, you'll be trying\ndifferent things, and looking at the\nperformance, and say, this",
    "start": "1853520",
    "end": "1861087"
  },
  {
    "text": "doesn't get good cache behavior. OK, let me try different things. So you want to iterate. And these iterations,\nyou want to do fast.",
    "start": "1861087",
    "end": "1866710"
  },
  {
    "text": "And this will do that. So let me tell you a\nlittle bit of results. This is a--",
    "start": "1866710",
    "end": "1871740"
  },
  {
    "start": "1869000",
    "end": "2035000"
  },
  {
    "text": "I have to explain. This a little bit of\na complicated graph. So what we looked at\nwas shown against bunch",
    "start": "1871740",
    "end": "1877840"
  },
  {
    "text": "of different benchmarks, a\nbunch of different frameworks that do graphs. So what they says is here is\na program, PageRank, ran all",
    "start": "1877840",
    "end": "1887290"
  },
  {
    "text": "on a graph like\ngeneral graph in here. One means it ran the fastest. This ran about 8% slower.",
    "start": "1887290",
    "end": "1893520"
  },
  {
    "text": "This ran 50% slower. This ran 3x slower, and\n8x lower for that graph.",
    "start": "1893520",
    "end": "1899860"
  },
  {
    "text": "The interesting thing is as\nyou add more different graphs, the performance changes. So, in fact, even\nthough we ran fastest",
    "start": "1899860",
    "end": "1906430"
  },
  {
    "text": "for this road graph, which are\na very different type of graph, this framework ran the--",
    "start": "1906430",
    "end": "1912909"
  },
  {
    "text": "provided-- got the\nfastest result. Because the graph is different. So it might be doing\nsomething that's better.",
    "start": "1912910",
    "end": "1918855"
  },
  {
    "text": "The interesting\nthing is since we had-- because most\nof other frameworks will have a couple of\nbuilt in things they try.",
    "start": "1918855",
    "end": "1925030"
  },
  {
    "text": "They don't do, give\nyou all this ability to try all this optimizing. They say, ah ha, I know this. This is really good.",
    "start": "1925030",
    "end": "1930070"
  },
  {
    "text": "I will do that. It works for certain\nthings, not for everybody. And so if you look at the entire\ndifferent breadth-first search,",
    "start": "1930070",
    "end": "1938530"
  },
  {
    "text": "connected components, shortest\npath algorithms, what you find is some frameworks\nare good sometimes.",
    "start": "1938530",
    "end": "1947900"
  },
  {
    "text": "They might be really\nbad in other times, to either some algorithms,\nsome type of data, they can be really bad.",
    "start": "1947900",
    "end": "1953350"
  },
  {
    "text": "So this algorithm was really\nkind of good at this data set, but really bad in this\ndata, and really kind",
    "start": "1953350",
    "end": "1959530"
  },
  {
    "text": "of not good in this algorithm. We are most of the\ntime good all the time. The reason is we don't\nmake a few decisions.",
    "start": "1959530",
    "end": "1966850"
  },
  {
    "text": "In GraphIt, what it will do is\nit will give you this ability to try different things.",
    "start": "1966850",
    "end": "1971860"
  },
  {
    "text": "And depending on the graph,\ndepending on the algorithm, some optimizations might\nwork better than the other.",
    "start": "1971860",
    "end": "1978680"
  },
  {
    "text": "This is exactly what you guys\nhave been doing in the class. You are trying different\noptimizations by hand.",
    "start": "1978680",
    "end": "1984803"
  },
  {
    "text": "The difference is every time\nyou thought about optimizing, you had to go change the entire\nprogram to make that work.",
    "start": "1984803",
    "end": "1990370"
  },
  {
    "text": "Here you just change the\nscheduling language one way, recompile, run, measure,\nand you can do this fast.",
    "start": "1990370",
    "end": "1996960"
  },
  {
    "text": "Any questions so far\nbefore I switch gears? ",
    "start": "1996960",
    "end": "2004789"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] SAMAN AMARASIGNHE: OK. So I'm going to switch\nto another domain",
    "start": "2004790",
    "end": "2011690"
  },
  {
    "text": "specific language. You will find a lot of\nsimulated, lot of parallelism",
    "start": "2011690",
    "end": "2017040"
  },
  {
    "text": "in here. This was intentional. I could have talked on\nmany different domain specific languages. But I took another\none that you-- almost",
    "start": "2017040",
    "end": "2024770"
  },
  {
    "text": "has kind of a mirror\nsimilarities of what's going on. And you will see a pattern\nin here, hopefully.",
    "start": "2024770",
    "end": "2031120"
  },
  {
    "text": "And after this, I will ask\nyou what the patterns are. This language is Halide.",
    "start": "2031120",
    "end": "2036600"
  },
  {
    "start": "2035000",
    "end": "2091000"
  },
  {
    "text": "It was originally developed\nfor image processing. And its focus is-- the graphs\nfocus on this past graph data",
    "start": "2036600",
    "end": "2043580"
  },
  {
    "text": "structures. Halide's focused\non-- because images are dense, regular structures.",
    "start": "2043580",
    "end": "2049219"
  },
  {
    "text": "You do regular\ncomputation on the images. And you process this thing. And you have a very\ncomplex pipeline. Like, for example,\ncamera pipeline",
    "start": "2049219",
    "end": "2055497"
  },
  {
    "text": "do many very complex\nalgorithms to the image before you get from the\nbits coming out of your CCD",
    "start": "2055497",
    "end": "2062719"
  },
  {
    "text": "to the beautiful picture\nyou see in Facebook. ",
    "start": "2062719",
    "end": "2070649"
  },
  {
    "text": "And the primary\ngoal of Halide was you want to match and exceed\nthe hand-optimized performance, basically.",
    "start": "2070650",
    "end": "2076110"
  },
  {
    "text": "This was the property\nwe want to do. And we want to reduce the\nrote amount of programming",
    "start": "2076110",
    "end": "2081399"
  },
  {
    "text": "that normally a\nperformance engineer has to do to achieve this thing. And we want to also increase\nthe portability, the ability",
    "start": "2081400",
    "end": "2087340"
  },
  {
    "text": "to take that program\nfrom different machines to different. So let me give you an example. Here is a three by\nthree blur example.",
    "start": "2087340",
    "end": "2096799"
  },
  {
    "start": "2091000",
    "end": "2316000"
  },
  {
    "text": "So what this does is this\n[INAUDIBLE] two loops go in the x direction and do a\nblur in x direction, get the--",
    "start": "2096800",
    "end": "2105190"
  },
  {
    "text": "average the three values\nnext to each other. And then it will go-- the result of that, do it in\ny direction, and average that.",
    "start": "2105190",
    "end": "2112660"
  },
  {
    "text": "OK, very simple filter that\nyou might want to do for image,",
    "start": "2112660",
    "end": "2118839"
  },
  {
    "text": "you can run this. This is valid C code. But if you want to\nget performance, you want to generate this guy.",
    "start": "2118840",
    "end": "2126730"
  },
  {
    "text": "This thing, on the other\nhand, ran about 11 times faster than this one.",
    "start": "2126730",
    "end": "2131890"
  },
  {
    "text": "This has done tile. It has fused multiple loops. It has vectorized. It has multi-threaded.",
    "start": "2131890",
    "end": "2137650"
  },
  {
    "text": "It had to do some\nredundant computation I'll get to a little bit later. And it basically gives a near\nroof-line optimum performance.",
    "start": "2137650",
    "end": "2144020"
  },
  {
    "text": "That means it's using the\nmachine resources to this max. Because this has a bunch of\nfloating point operations.",
    "start": "2144020",
    "end": "2150410"
  },
  {
    "text": "So it's basically\nfloating point unit is running at the max performance. So there's nothing much else\nyou could do to this one.",
    "start": "2150410",
    "end": "2157450"
  },
  {
    "text": "But you write this thing. And this is not that easy. So this project started some\ntime ago with one of my--",
    "start": "2157450",
    "end": "2169269"
  },
  {
    "text": "the person who did\nit-- going to Adobe. He went to Adobe. And they had this thing\ncalled a local laplacian",
    "start": "2169270",
    "end": "2177670"
  },
  {
    "text": "filter in Camera\nRaw, and Lightroom, and Photoshop projects in here. The reference implementation\nwas about 300 lines of code.",
    "start": "2177670",
    "end": "2187180"
  },
  {
    "text": "But the implementation\nthat they used was about 1,500 lines of code. It took three months of\none of their best engineers",
    "start": "2187180",
    "end": "2194020"
  },
  {
    "text": "to get to that performance. But it made sense. Because that engineer\nwas able to get",
    "start": "2194020",
    "end": "2199330"
  },
  {
    "text": "10x faster by trial and\nerror for this piece of code.",
    "start": "2199330",
    "end": "2204560"
  },
  {
    "text": "It's a non-trivial piece of\ncoding here to go do that. So the student, Jonathan, who's\nnow a professor at Berkeley,",
    "start": "2204560",
    "end": "2213609"
  },
  {
    "text": "he basically, in one day,\nin 60 lines of Halide, he was able to beat 2x of\nAdobe code in some sense.",
    "start": "2213610",
    "end": "2224640"
  },
  {
    "text": "And then Adobe, in\nthose days, didn't generate any code for GPUs.",
    "start": "2224640",
    "end": "2231220"
  },
  {
    "text": "Because they decided GPUs\nare changed too fast. And they can't keep up updating\nfor GPUs in every generation.",
    "start": "2231220",
    "end": "2237570"
  },
  {
    "text": "Then they-- because of\nthat, they were not-- the Adobe applications\nwere not using GPUs. So if you ran Photoshop,\nit's not going to use a GPU.",
    "start": "2237570",
    "end": "2244320"
  },
  {
    "text": "Even if you mention\nit has a GPU. So Jonathan still had\nsome time left in the day. So he said, OK, let me\ntry to write on GPUs.",
    "start": "2244320",
    "end": "2250750"
  },
  {
    "text": "So he just-- basically\nthe same code, he changed GPUs and got a 9x\nfaster than the fastest Adobe",
    "start": "2250750",
    "end": "2258940"
  },
  {
    "text": "had ever had for\nthis piece of code. So how did he do it? Again, the key principle\nhere is decoupling algorithm",
    "start": "2258940",
    "end": "2268060"
  },
  {
    "text": "from schedule. So algorithm, again,\nis what is computed. And the algorithm\ndefined the pipeline",
    "start": "2268060",
    "end": "2274230"
  },
  {
    "text": "of very simple pure\nfunctions operating in there. And execution order,\nparallelism, all those things",
    "start": "2274230",
    "end": "2280930"
  },
  {
    "text": "is left for the schedule. The pipeline of\nHalide just looks like this for the blur filter.",
    "start": "2280930",
    "end": "2286680"
  },
  {
    "text": "It says, OK, get the\nimage in x dimension. And do it a blur\nin the y dimension.",
    "start": "2286680",
    "end": "2292680"
  },
  {
    "text": "That's all. And the image size is-- because it's operating\non the entire image, you don't have loops in here.",
    "start": "2292680",
    "end": "2297980"
  },
  {
    "text": "That's all you\nhave to say there. Then you have to come\nup with a schedule. Again, the same way when\nand where it's computed,",
    "start": "2297980",
    "end": "2307720"
  },
  {
    "text": "to be simple, that you need\nto be able to tell that. And it has be powerful. You need to be able to get\nthe hand-optimized performance",
    "start": "2307720",
    "end": "2313755"
  },
  {
    "text": "or better by doing this.  Something looks a\nlittle bit familiar.",
    "start": "2313755",
    "end": "2320090"
  },
  {
    "start": "2316000",
    "end": "2402000"
  },
  {
    "text": "Because it's all these\nthings, a lot of work you do performance kind\nof fit into this genre.",
    "start": "2320090",
    "end": "2326410"
  },
  {
    "text": "You need to do a trade off\nbetween locality, parallelism, and redundant work. That's what you\nlook for in here.",
    "start": "2326410",
    "end": "2332420"
  },
  {
    "text": " So let's look at the three\nthings you need to do.",
    "start": "2332420",
    "end": "2342300"
  },
  {
    "text": "First, you need to\nget parallelism. Parallelism is you need to\nkeep the multi-cores and vector units happy and\nprobably the GPU busy.",
    "start": "2342300",
    "end": "2349768"
  },
  {
    "text": "But if you have too\nmuch parallelism, it's not going to help you. I mean, nobody is going to\ntake advantage [INAUDIBLE] parallelism.",
    "start": "2349768",
    "end": "2355500"
  },
  {
    "text": "So let's look at a\npiece of code in here.  So assume I am going\nto say, I'm going",
    "start": "2355500",
    "end": "2362120"
  },
  {
    "text": "to run all these things\nparallel and all these things parallel afterwards. If you have three cores--",
    "start": "2362120",
    "end": "2367150"
  },
  {
    "text": "great, I got a lot\nmore parallelism. I got six times parallelism. Hurrah, nobody's\ngoing to use that.",
    "start": "2367150",
    "end": "2373330"
  },
  {
    "text": "It's not that useful to get\nsix times parallelism in here. On the other hand, if you\nrun like this, one at a time,",
    "start": "2373330",
    "end": "2381069"
  },
  {
    "text": "you have parallelism of one. That's not that good. Because you're going\nto not use the machine. So what you really want\nis something basically--",
    "start": "2381070",
    "end": "2389590"
  },
  {
    "text": "OK, wait till it's\ndone-- that actually do parallelisms\nof three might be the best way of\nrunning that machine",
    "start": "2389590",
    "end": "2395109"
  },
  {
    "text": "to get best performance. You don't want too much. You don't want too little. You want to get the\nexact right thing.",
    "start": "2395110",
    "end": "2400263"
  },
  {
    "text": " The next interesting thing\nyou need to get is locality.",
    "start": "2400263",
    "end": "2407960"
  },
  {
    "start": "2402000",
    "end": "2539000"
  },
  {
    "text": "Normally, when you do image\nprocessing, what you do is you change everything\nin the image in one filter.",
    "start": "2407960",
    "end": "2413977"
  },
  {
    "text": "Then the next filter has to\ngo in and change everything in the image. So what happens\nif one filter ran",
    "start": "2413978",
    "end": "2419440"
  },
  {
    "text": "through the entire\nimage and the next come and start running\nthrough the entire image? What happens, basically?",
    "start": "2419440",
    "end": "2426500"
  },
  {
    "text": "Is that good? I give the entire\nimage, say you, do my first color correction.",
    "start": "2426500",
    "end": "2431839"
  },
  {
    "text": "And I will do some kind\nof aberration correction afterwards. So what happens if you\ndo something like that?",
    "start": "2431840",
    "end": "2439369"
  },
  {
    "text": "Entire image,\nprocess one filter, then the next filter takes the\nimage and process the entire [INAUDIBLE] or whatever\nmulti-megapixel image--",
    "start": "2439370",
    "end": "2446510"
  },
  {
    "text": " oh, you-- you're\non a [INAUDIBLE].. OK, back there. AUDIENCE: You end up\nkicking [INAUDIBLE]..",
    "start": "2446510",
    "end": "2453317"
  },
  {
    "text": "SAMAN AMARASIGNHE:\n[INAUDIBLE] cache. Because if the image is large,\nit doesn't fit in the cache. It's not that great to do this.",
    "start": "2453318",
    "end": "2459000"
  },
  {
    "text": "You won't get things\nin the cache in here. So assume I go like this,\nprocessing the entire first row",
    "start": "2459000",
    "end": "2467370"
  },
  {
    "text": "before you go to the second row. So what happens now here is we\nneed to start touch this one--",
    "start": "2467370",
    "end": "2473880"
  },
  {
    "text": "I need to read these two values. And those two\nare-- the last time I read them was way\nbefore I started.",
    "start": "2473880",
    "end": "2481200"
  },
  {
    "text": "So I [INAUDIBLE] them. I went through all the image. And I come back to that. And this distance-- by\nthe time I reach here,",
    "start": "2481200",
    "end": "2488613"
  },
  {
    "text": "I might-- these two might\nbe out of the cache. And when I go back there,\noops, it's not in the cache.",
    "start": "2488613",
    "end": "2493650"
  },
  {
    "text": "I have a problem in that. So the other way, a\nright way to do that might be trying it this way.",
    "start": "2493650",
    "end": "2500540"
  },
  {
    "text": "If I run it like\nthis, basically, what happens is as you run--",
    "start": "2500540",
    "end": "2506180"
  },
  {
    "text": "when I touch this,\nI won't have-- I want to get these\nthree to run this thing. Last time I read this\none was just before,",
    "start": "2506180",
    "end": "2513210"
  },
  {
    "text": "in the previous iteration. So to get to that-- I just touched it. So the next guy uses it, the\nnext guy, and after, after.",
    "start": "2513210",
    "end": "2520420"
  },
  {
    "text": "I go to my window. I've never touched that again. I have a really good\nlocality in here. So I want to\noperate it that way.",
    "start": "2520420",
    "end": "2526610"
  },
  {
    "text": "I won't get good\nlocality in here. So redundant work is a\nvery interesting thing. Sometimes, if you want to get\nboth locality and parallelism,",
    "start": "2526610",
    "end": "2535050"
  },
  {
    "text": "you might have to\ndo some extra work, a little bit of extra work. So assume in this one I had to\nprocess these elements parallel",
    "start": "2535050",
    "end": "2545520"
  },
  {
    "start": "2539000",
    "end": "2819000"
  },
  {
    "text": "if I want to run these three. Because these three needs all\nthese four elements in there.",
    "start": "2545520",
    "end": "2552250"
  },
  {
    "text": "These three need these four. If I want to run these\ntwo parallel in two different cores, it\nmight be better if both",
    "start": "2552250",
    "end": "2559410"
  },
  {
    "text": "calculates these two values. Because I don't have to\nsynchronize and stuff. I can say, the left guy,\ncalculate four values.",
    "start": "2559410",
    "end": "2565410"
  },
  {
    "text": "And then I can do the three. The right guy, calculate\nthe four values. And then I can do the three. I can do that parallelly.",
    "start": "2565410",
    "end": "2570570"
  },
  {
    "text": "But now the middle two guys,\nthese two get calculated twice. Because both needs it.",
    "start": "2570570",
    "end": "2576930"
  },
  {
    "text": "And so what that means is--\noops, you can keep that. So sometimes, to\ndo everything, I",
    "start": "2576930",
    "end": "2583348"
  },
  {
    "text": "might have to do\nsome redundant work. So the way to look at\nthat is I can put this into this scheduling framework.",
    "start": "2583348",
    "end": "2591870"
  },
  {
    "text": "I can map my\ncomputation bandwidth. That means coarse interleaving\nwith low locality. That means I finish\neverything before I go back",
    "start": "2591870",
    "end": "2598869"
  },
  {
    "text": "in here between two things. If I run two things,\nI finish this one before I go to the next one.",
    "start": "2598870",
    "end": "2604410"
  },
  {
    "text": "Fine interleaving means I\nprocess one element one, duh duh duh duh, go back\nand back and forth in here.",
    "start": "2604410",
    "end": "2609900"
  },
  {
    "text": "That's my two options here. Other side is\nstorage granularity. What that means is--",
    "start": "2609900",
    "end": "2617760"
  },
  {
    "text": "storage granularity very low\nmeans I calculate something, I don't remember. Next time I want it, I\nrecalculate it again.",
    "start": "2617760",
    "end": "2626760"
  },
  {
    "text": "Very high storage granularity\nmeans once I calculate it, I will remember it forever. Anytime you need that value,\nI have it back for you.",
    "start": "2626760",
    "end": "2633630"
  },
  {
    "text": "So that means I have to\nget it to you from anywhere I calculated. Storage granularity low means\nmy process, I calculate, I use,",
    "start": "2633630",
    "end": "2639960"
  },
  {
    "text": "I throw it out. If anybody else want it,\nthey'll recalculate again. So now you can have many\ndifferent computations",
    "start": "2639960",
    "end": "2647310"
  },
  {
    "text": "in different places\nof this space in here. So if you want to\ncompute something here, this is the scheduling language.",
    "start": "2647310",
    "end": "2653849"
  },
  {
    "text": "That means I run this\none, and I run this one. I have no redundant\ncomputation, very coarse grained interleaving.",
    "start": "2653850",
    "end": "2660990"
  },
  {
    "text": "That means I run the\nentire thing, and then the next entire thing. You can go very fine\n[INAUDIBLE] in here.",
    "start": "2660990",
    "end": "2667440"
  },
  {
    "text": "I'll calculate this one. And I'll calculate these three\nagain, these three again. So everything is\ncalculated multiple times.",
    "start": "2667440",
    "end": "2674430"
  },
  {
    "text": "When you need it, I recalculate\nevery time I need something. I don't store anything in here. So it's good.",
    "start": "2674430",
    "end": "2679769"
  },
  {
    "text": "I have a lot of locality. But I'm doing a lot\nof recomputation. And then here,\nyou have something",
    "start": "2679770",
    "end": "2686070"
  },
  {
    "text": "like a sliding window. Basically, you are not\nrecalculating anything. But you are sliding in there.",
    "start": "2686070",
    "end": "2692040"
  },
  {
    "text": "You have a little\nbit less parallelism. And then you could capture\nthis entire spectrum in between in here.",
    "start": "2692040",
    "end": "2699780"
  },
  {
    "text": "And you can get different\nlevels of fusion of these tiles. And you can calculate--",
    "start": "2699780",
    "end": "2706230"
  },
  {
    "text": "so I don't recalculate\neverything. I recalculate a\nfew things in here. These two get recalculated.",
    "start": "2706230",
    "end": "2711480"
  },
  {
    "text": " And then you can-- I'll go through this\nfast [INAUDIBLE]..",
    "start": "2711480",
    "end": "2716675"
  },
  {
    "text": "You can use all\nthese operations. So here is the\ninteresting thing. So here is I am showing\nyou different schedules",
    "start": "2716675",
    "end": "2723359"
  },
  {
    "text": "at different points in here. So I'm going to run this game. This is on time.",
    "start": "2723360",
    "end": "2728400"
  },
  {
    "text": "So what it says\nis this is doing-- you're going through\nthe first input, [INAUDIBLE] the middle one,\n[INAUDIBLE] the output in here.",
    "start": "2728400",
    "end": "2734640"
  },
  {
    "text": "So this has all locality,\nlot of redundant work, good patterns of locality.",
    "start": "2734640",
    "end": "2739680"
  },
  {
    "text": "All patterns have\nnot good locality. In here is some kind\nof intermediate thing. So what it shows is\nthese are no good.",
    "start": "2739680",
    "end": "2745410"
  },
  {
    "text": "A good balance between\nlocality, parallelism, and some redundant work\nseem to do really well. This guy finished the fastest.",
    "start": "2745410",
    "end": "2752052"
  },
  {
    "text": "So what you do is you\nwrite different schedules for these things. And you keep running. And we figured out\nwhat schedule works.",
    "start": "2752052",
    "end": "2758490"
  },
  {
    "text": "So this is kind of\ntrial and error part you have to do in here. ",
    "start": "2758490",
    "end": "2769670"
  },
  {
    "text": "So if you look at\nwhat's going on in here, what you see here is--",
    "start": "2769670",
    "end": "2778220"
  },
  {
    "text": "there's some example-- is\nbilateral filter computation here. What it says is the original\nis about 122 lines of C++ code.",
    "start": "2778220",
    "end": "2786369"
  },
  {
    "text": "And you found something with\na good parallelism in here. But we could write it in\n32 lines of Halide in here.",
    "start": "2786370",
    "end": "2795580"
  },
  {
    "text": "And we were able to get\nabout 6x faster than CPU. But the best algorithm\nwas somebody hand",
    "start": "2795580",
    "end": "2803860"
  },
  {
    "text": "wrote for the paper on GPUs. And what it did it was it\ngave up some parallelism for much better locality.",
    "start": "2803860",
    "end": "2810470"
  },
  {
    "text": "And if you give up some\nparallelism, much better locality, because we\ncan optimize in that, we got faster than their\nhandwritten algorithm.",
    "start": "2810470",
    "end": "2817060"
  },
  {
    "text": "So we can change something. Here's, again,\nanother algorithm that",
    "start": "2817060",
    "end": "2823030"
  },
  {
    "text": "is doing segmenting in here. And it was written in MATLAB.",
    "start": "2823030",
    "end": "2828070"
  },
  {
    "text": "And MATLAB is a lot less\nlines of code, of course. But in Halide, it's a\nlittle bit more line,",
    "start": "2828070",
    "end": "2833080"
  },
  {
    "text": "because you're not just\ncalling library functions. And Halide was 70 times faster.",
    "start": "2833080",
    "end": "2839330"
  },
  {
    "text": "And if you run into GPU verses\nMATLAB, it's about 100-- 1,000 times faster.",
    "start": "2839330",
    "end": "2846250"
  },
  {
    "text": "It's not because you're\nrunning bad MATLAB loops. In fact, what MATLAB did was it\ncalled very well hand-optimized",
    "start": "2846250",
    "end": "2854260"
  },
  {
    "text": "libraries. But the problem with calling\nlibraries, there's no locality. I called a really fast\nlibrary for first routine.",
    "start": "2854260",
    "end": "2860780"
  },
  {
    "text": "It runs really fast. And then you call\nthe next routine that has to [INAUDIBLE]\nthe entire image again.",
    "start": "2860780",
    "end": "2865908"
  },
  {
    "text": "And now my image is\ncompletely off the cache. So what happens is between\nthese very fast libraries, you're bringing the\nimage from cache.",
    "start": "2865908",
    "end": "2872210"
  },
  {
    "text": "And when you have\nsomething like a library, you can't fuse library\nfunctions together.",
    "start": "2872210",
    "end": "2877300"
  },
  {
    "text": "In Halide, we can\nconfuse them together and say, oh, I take\nthis line of the image, and I will do everything\non that before I",
    "start": "2877300",
    "end": "2883030"
  },
  {
    "text": "move to the next thing. So I can do much faster. My feeling is each\nfunction probably, in MATLAB was faster, because\nthey have a handwritten really",
    "start": "2883030",
    "end": "2891490"
  },
  {
    "text": "fast thing. But the copying of data from-- the moving from cache,\nthe cache effects,",
    "start": "2891490",
    "end": "2897040"
  },
  {
    "text": "was really slowing it down. So here's the thing\nthat we showed before.",
    "start": "2897040",
    "end": "2904150"
  },
  {
    "text": "This is a very\ncomplicated algorithm. It's what we call a\npyramidal algorithm. So what it does is you\ntake a [INAUDIBLE] in here.",
    "start": "2904150",
    "end": "2910810"
  },
  {
    "text": "And you divide it into a\nbunch of blocks in here in each level of pyramid. And you do some computation,\ndo some look up, and do some",
    "start": "2910810",
    "end": "2920109"
  },
  {
    "text": "up sampling in here. You do some addition\ncomputation and compute that. And then you create more and\nmore smaller and smaller images",
    "start": "2920110",
    "end": "2927680"
  },
  {
    "text": "in here. You do-- you basically\n[INAUDIBLE] image pyramid in here. And so to do this right,\nit's not that simple.",
    "start": "2927680",
    "end": "2935380"
  },
  {
    "text": "What that means, in\neach of these level, there are different\nbalances you want to be. If you have a lot of\ndata, parallelism is not",
    "start": "2935380",
    "end": "2942722"
  },
  {
    "text": "that important at that point. Because you have\nparallelism anyways. You probably had to focus\na lot more on locality. But when you get to\nthe smaller amount,",
    "start": "2942722",
    "end": "2949150"
  },
  {
    "text": "I think parallelism matters. So you have to come up with\nvery interesting balances between those. So many, many things\nto tune at every level.",
    "start": "2949150",
    "end": "2956390"
  },
  {
    "text": "There's not three things. There's hundreds of\ndifferent levels. So the nice thing\nabout Halide is you can play with\nall these things.",
    "start": "2956390",
    "end": "2963370"
  },
  {
    "text": "You can play with all\nthese different concepts and figure out which\nactually gives the fastest performance in that. ",
    "start": "2963370",
    "end": "2971910"
  },
  {
    "start": "2970000",
    "end": "3026000"
  },
  {
    "text": "So a little bit of, I\nwould say, bragging rights in here for Halide, Halide\nleft MIT about, I think,",
    "start": "2971910",
    "end": "2981800"
  },
  {
    "text": "six years ago. And right now, it's\neverywhere in Google. So it's on Android phones.",
    "start": "2981800",
    "end": "2989056"
  },
  {
    "text": "It started to Google Glass. It doesn't exist\nanymore, but in that--",
    "start": "2989056",
    "end": "2994849"
  },
  {
    "text": "and in fact, any-- all the images, all the videos\nuploaded to YouTube right now,",
    "start": "2994850",
    "end": "3001030"
  },
  {
    "text": "they do front end processing. And that processing pipeline\nis written in Halide. And they switched to Halide\nbecause Halide code was about,",
    "start": "3001030",
    "end": "3011110"
  },
  {
    "text": "I think 4-5% faster than\nthe previous version. And 4-5% faster for Google\nwas multi-million dollars",
    "start": "3011110",
    "end": "3019480"
  },
  {
    "text": "saved for them, because\nthere's so many videos getting downloaded from that. ",
    "start": "3019480",
    "end": "3026290"
  },
  {
    "start": "3026000",
    "end": "3599000"
  },
  {
    "text": "So recently, there's a\nPhotoshop announcement that's saying they have an\nIOS version of Photoshop",
    "start": "3026290",
    "end": "3031750"
  },
  {
    "text": "from Adobe. They just announced it. I don't think it's even out yet. And the entire\nPhotoshop filters are",
    "start": "3031750",
    "end": "3037960"
  },
  {
    "text": "written in this new\nversion using Halide. ",
    "start": "3037960",
    "end": "3046280"
  },
  {
    "text": "Qualcomm released this processor\ncalled Snapdragon image processor. So they built that processor to\ndo image processing in there.",
    "start": "3046280",
    "end": "3053950"
  },
  {
    "text": "And the programming language\nto program that processor is basically Halide. So you write the code in Halide.",
    "start": "3053950",
    "end": "3060589"
  },
  {
    "text": "So that is the kind\nof-- the assembly level that makes it available\nfor this in here.",
    "start": "3060590",
    "end": "3065599"
  },
  {
    "text": "And also, Intel is using that. So there's lot of use of this\nsystem at this point, which",
    "start": "3065600",
    "end": "3071089"
  },
  {
    "text": "is really fun to see academic\nproject getting to a point it's very heavily used.",
    "start": "3071090",
    "end": "3076910"
  },
  {
    "text": "And part of that is\nbecause it's very useful. Because people realize\nthey need to optimize",
    "start": "3076910",
    "end": "3082370"
  },
  {
    "text": "these code, because cameras\nand stuff, performance matter. And it needs to look-- having\nsome poor engineer spending",
    "start": "3082370",
    "end": "3089900"
  },
  {
    "text": "months in the corner, just\ntrying out those things, you can try the same things,\nand lot more by do it faster.",
    "start": "3089900",
    "end": "3097410"
  },
  {
    "text": "OK so let me ask you a question. So now between Halide and\nGraphIt, what did you find?",
    "start": "3097410",
    "end": "3104750"
  },
  {
    "text": " A bunch of similarities-- I want to figure out are there\nany interesting similarities",
    "start": "3104750",
    "end": "3112589"
  },
  {
    "text": "you guys found between\nthese two projects? ",
    "start": "3112590",
    "end": "3124490"
  },
  {
    "text": "AUDIENCE: They both allow you to\ntry optimizations really fast. SAMAN AMARASIGNHE:\nSo part of that",
    "start": "3124490",
    "end": "3129730"
  },
  {
    "text": "is also a lot of times\ncompilers are kind of black box. We know everything,\njust feed us,",
    "start": "3129730",
    "end": "3136150"
  },
  {
    "text": "we'll give you the\nreally fast code. And the problem is,\nthey're never the fastest. So if you really care about\nperformance, you get 90%.",
    "start": "3136150",
    "end": "3143670"
  },
  {
    "text": "Then you get really\nfrustrated-- now what do I do? But this was, OK,\nI'm not going to-- you are better at what to do.",
    "start": "3143670",
    "end": "3149800"
  },
  {
    "text": "But I'll make you life simpler. So we still want the\nperformance engineer. It's not the person who just\ndon't understand performance",
    "start": "3149800",
    "end": "3157480"
  },
  {
    "text": "feed, you get fast code. We need a performance--\nbut we want to make performance\nengineers life easier. So both of them, said, OK,\nwe need performance engineer.",
    "start": "3157480",
    "end": "3164675"
  },
  {
    "text": "We can't automate it. We don't know how to\nautomate all these things. There's too much complexity. But we will let you, performance\nengineer, explain what to do.",
    "start": "3164675",
    "end": "3173050"
  },
  {
    "text": "But we'll make your\nlife very simple. What else? AUDIENCE: Something\nthat was cool",
    "start": "3173050",
    "end": "3178534"
  },
  {
    "text": "was both of these\nlanguages can do algorithmic level\noptimizations [INAUDIBLE],, which is pretty different\nfrom what compilers like GCC",
    "start": "3178534",
    "end": "3187756"
  },
  {
    "text": "are explained [INAUDIBLE]. SAMAN AMARASIGNHE:\nYeah, because-- I wouldn't say alg-- you can do a lot of domain\nspecific optimization.",
    "start": "3187757",
    "end": "3194910"
  },
  {
    "text": "So algorithmic optimization\nis one level higher. You can say, ah ha, I\nhave a better algorithm. So, OK, I don't want to\ndo a quick search here.",
    "start": "3194910",
    "end": "3201520"
  },
  {
    "text": "I can do insertion sort. Because quick\nsorting and insertion sort might be faster for\na certain class in there.",
    "start": "3201520",
    "end": "3207140"
  },
  {
    "text": "So that is level\nchange we don't do. Or, worse yet, I can say-- this happens in a lot of things\nin machine learning-- yeah,",
    "start": "3207140",
    "end": "3214120"
  },
  {
    "text": "if I just drop a\nnumber here, I'm OK. I don't have to get the\ncompute exactly right. Oh yeah, if I-- I don't have to\ncalculate everything.",
    "start": "3214120",
    "end": "3220270"
  },
  {
    "text": "If I calculate for 10\npeople, it's good enough. So that kind of\nchanges, you can't do. Because that's very contextual.",
    "start": "3220270",
    "end": "3226329"
  },
  {
    "text": "Like, for example,\na lot of time, if you are doing things\nlike machine learning, there's no right answer.",
    "start": "3226330",
    "end": "3232269"
  },
  {
    "text": "You need to have a good answer. So sometimes good means you\ncan not do certain things. And you need to find what things\nyou shouldn't-- you cannot do,",
    "start": "3232270",
    "end": "3240310"
  },
  {
    "text": "that you get a huge benefit,\nbut you don't lose that much. That level you can't do that. That's the next level of\n[INAUDIBLE] is saying, OK,",
    "start": "3240310",
    "end": "3246950"
  },
  {
    "text": "how do you do that? How do you-- when\nsomebody say, OK, look, I can train it for 10\niterations versus 100--",
    "start": "3246950",
    "end": "3253000"
  },
  {
    "text": "ah, 10 is good enough. I can't-- if your code is\nwritten to train for 100 iterations, I can't tell you,\noh yeah, 10 is good enough.",
    "start": "3253000",
    "end": "3259660"
  },
  {
    "text": "That is a decision that has to\nbe a lot higher level than what I can make. So that's a-- that-- there's\nan interesting level that",
    "start": "3259660",
    "end": "3266500"
  },
  {
    "text": "can still exist on top of that,\nwhich we can't automate that easily. But we might be\nable to make, still,",
    "start": "3266500",
    "end": "3273222"
  },
  {
    "text": "a language, like a schedule\nlanguage, give you that option. That's a cool\noption to give, say try some of these things that\nactually change the algorithm.",
    "start": "3273222",
    "end": "3280089"
  },
  {
    "text": "But within the algorithm,\nthat means I'll still give you the same answer. I will try different things.",
    "start": "3280090",
    "end": "3286128"
  },
  {
    "start": "3286128",
    "end": "3291492"
  },
  {
    "text": "Any other things? Any other things you guys\nthought that was interesting?",
    "start": "3291492",
    "end": "3296816"
  },
  {
    "text": " How about from somewhere here?",
    "start": "3296816",
    "end": "3303540"
  },
  {
    "text": "What are the interesting\nthings you found?  Back there.",
    "start": "3303540",
    "end": "3308950"
  },
  {
    "text": "AUDIENCE: They both involve\na lot of trial and error. SAMAN AMARASIGNHE:\nYes, both involve a lot of trial and error. I mean, this is the\nmodern computer systems.",
    "start": "3308950",
    "end": "3317230"
  },
  {
    "text": "Everything is\nextremely complicated. There's no right\nway of doing things when you look at this\npretty large piece of code.",
    "start": "3317230",
    "end": "3323272"
  },
  {
    "text": "And there might be\na lot of-- there are caches, parallelism,\nlocality, a lot of things",
    "start": "3323272",
    "end": "3329530"
  },
  {
    "text": "that can go right. And so you might have\nto try out many things. So if you know the answer,\nif you come up with the,",
    "start": "3329530",
    "end": "3334780"
  },
  {
    "text": "I know exactly, every time,\nI have the right answer, that's amazing. But even the best\nperformance person",
    "start": "3334780",
    "end": "3340330"
  },
  {
    "text": "might not be able to look at a\npiece of code and say, ah ha, I know your solution. You do a lot of trial and error.",
    "start": "3340330",
    "end": "3345490"
  },
  {
    "text": "This kind of supports that. And you probably have\nfigured that one out for most of your projects. It's not like you went and\nsay, ah, I know what to do.",
    "start": "3345490",
    "end": "3352119"
  },
  {
    "text": "You probably did many\ndifferent trials. And I know from\nthis, lot of things, you actually either have no\nimpact or slow down the code.",
    "start": "3352120",
    "end": "3358510"
  },
  {
    "text": "And you say, oh,\nthat didn't work. And all if-- [INAUDIBLE]\nyou leave in your codes shows all the crazy\nthings you've tried,",
    "start": "3358510",
    "end": "3365119"
  },
  {
    "text": "and nothing happened. So that's an interesting thing. What else? ",
    "start": "3365120",
    "end": "3375160"
  },
  {
    "text": "Anything else, a\nlittle bit differently that you see on this one? ",
    "start": "3375160",
    "end": "3385100"
  },
  {
    "text": "AUDIENCE: I was just wondering,\nare there other similar domains that don't have something\nlike this [INAUDIBLE]??",
    "start": "3385100",
    "end": "3395266"
  },
  {
    "text": "SAMAN AMARASIGNHE: So\ninteresting question-- are there any other domains that\ndon't have something like this?",
    "start": "3395267",
    "end": "3401390"
  },
  {
    "text": "People are working\non similar things to machine learning these days. That seems to be their\ndomain, and tensor flow,",
    "start": "3401390",
    "end": "3408380"
  },
  {
    "text": "and all those people\nare trying to do-- to build systems like\nsimilar-- like frameworks",
    "start": "3408380",
    "end": "3414533"
  },
  {
    "text": "that you can get that.  I mean, that's a very-- I think-- the way\nI have operated",
    "start": "3414533",
    "end": "3422180"
  },
  {
    "text": "is I go talk to people. And sometimes you find\nthis poor graduate student,",
    "start": "3422180",
    "end": "3427760"
  },
  {
    "text": "or postdoc who want to do\nsome research but spending all of their time basically\noptimizing their piece of code,",
    "start": "3427760",
    "end": "3433882"
  },
  {
    "text": "because they can't\nget their performance. And then that might\nbe a good domain. You find these\npeople in physics.",
    "start": "3433882",
    "end": "3439010"
  },
  {
    "text": "You find these\npeople in biology. And I am actually talking to-- because, for\nexample, in biology,",
    "start": "3439010",
    "end": "3444500"
  },
  {
    "text": "a lot of this gene\nsequencing stuff is-- there are very similar\nthings you have to do. But they seem to be\nspending all this time",
    "start": "3444500",
    "end": "3451250"
  },
  {
    "text": "writing the code, and then-- mired in code complexity. OK, can you do\nsomething in that?",
    "start": "3451250",
    "end": "3457160"
  },
  {
    "text": "I mean, the key thing is this\nis a good way to-- a nice thing about MIT is there are good--\na lot of very smart people",
    "start": "3457160",
    "end": "3463040"
  },
  {
    "text": "in many different domains trying\nto push the state of the art. And who's spending all this time\ncursing in front of a computer",
    "start": "3463040",
    "end": "3468740"
  },
  {
    "text": "program to get to a\npoint they want to do, because-- not because they\ndon't know the algorithm,",
    "start": "3468740",
    "end": "3474470"
  },
  {
    "text": "because the amount of data\nthey have to deal with-- astronomy, I mean they get\nthese multiple telescopes,",
    "start": "3474470",
    "end": "3481310"
  },
  {
    "text": "that deluge of data. And most of the time, they\nknow what they have to do. They just have to--\ncan't write the program",
    "start": "3481310",
    "end": "3487152"
  },
  {
    "text": "to do it fast enough. So there might be domains like\nthat, if you look at that. And there might be domains\nfrom application and domains",
    "start": "3487152",
    "end": "3492877"
  },
  {
    "text": "from patterns. Like sparse matrices\nor graphs are patterns, which-- or not\nonly on a single application.",
    "start": "3492877",
    "end": "3498410"
  },
  {
    "text": "I mean, it works\nin multiple places. There might be other patterns. Say, this is-- if you\nwant to do research,",
    "start": "3498410",
    "end": "3504167"
  },
  {
    "text": "this might be interesting\npiece of doing research. And I have spent my life finding\ndifferent domains and a bunch",
    "start": "3504167",
    "end": "3511070"
  },
  {
    "text": "of people that spend their\nlifetime just hand hacking things and telling them,\nOK, let me see if we",
    "start": "3511070",
    "end": "3517400"
  },
  {
    "text": "can do some nice abstraction. Anything that you guys\nfound that's interesting?",
    "start": "3517400",
    "end": "3524869"
  },
  {
    "text": "So to both of them,\nwhat are-- what's the space that they operated\non to optimize programs?",
    "start": "3524870",
    "end": "3532265"
  },
  {
    "start": "3532265",
    "end": "3539194"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. SAMAN AMARASIGNHE:\nDone for me, no. What I'm saying is,\nwhat are the things that you're trying to optimize?",
    "start": "3539195",
    "end": "3544630"
  },
  {
    "text": "There's a nice space of\nthree different things-- parallelism, locality,\nand redundant work.",
    "start": "3544630",
    "end": "3551470"
  },
  {
    "text": "My feeling is, as you go as a\nperformance engineer, that's going to be your life.",
    "start": "3551470",
    "end": "3556785"
  },
  {
    "text": "If I add additional\nthings, there might be algorithmic things that\nyou completely get rid of well. But most of the time, we are--",
    "start": "3556785",
    "end": "3562690"
  },
  {
    "text": "all of you will be\n[INAUDIBLE] performance will be working on some kind\nof multi-core vector GPU type",
    "start": "3562690",
    "end": "3568100"
  },
  {
    "text": "units. You have to get parallelism. So getting parallelism\nis important. But then, if you don't have\nlocality, it doesn't matter.",
    "start": "3568100",
    "end": "3575174"
  },
  {
    "text": "Because most of the time\nyou're waiting to get data from all the way from memory. So you had to get good locality. And then more-- a\nlot of times you",
    "start": "3575175",
    "end": "3581800"
  },
  {
    "text": "can do that really well if\nyou do some extra computation. But if you do too much extra\nthings, that's going to,",
    "start": "3581800",
    "end": "3587410"
  },
  {
    "text": "oh well, that's not\ngoing to help you. So it's all about\nplaying the distribution. You've got a final project. That's exactly what\nyou're going to do.",
    "start": "3587410",
    "end": "3593330"
  },
  {
    "text": "You might say, ah, if I\ncan do some extra work, OK, I can do this faster. But oops, no, this extra\npre-compute pass, or whatever,",
    "start": "3593330",
    "end": "3599950"
  },
  {
    "text": "it's not-- I can't amortize the cost. So there's these three things\nthat you're trading over that.",
    "start": "3599950",
    "end": "3607330"
  },
  {
    "text": "So that's one interesting thing. Another thing is we made it\navailable for the programmers",
    "start": "3607330",
    "end": "3615150"
  },
  {
    "text": "to do this scheduling language. But can you make it--",
    "start": "3615150",
    "end": "3620685"
  },
  {
    "text": "can you think of\na way to make it a little bit easier\nfor programmers than doing a\nscheduling language? What can I do?",
    "start": "3620685",
    "end": "3627037"
  },
  {
    "text": "What's the nice thing\nabout scheduling languages?  It's very simple.",
    "start": "3627038",
    "end": "3634089"
  },
  {
    "text": "It has a very simple pattern. AUDIENCE: [INAUDIBLE]",
    "start": "3634090",
    "end": "3639483"
  },
  {
    "text": "SAMAN AMARASIGNHE: Yeah, I\nmean, that's-- the number of options-- it's not like you can\nwrite any program. There are certain things\nyou can do in the schedule.",
    "start": "3639483",
    "end": "3647480"
  },
  {
    "text": "So if you know that\nspace, you can sort of use doing that smartly.",
    "start": "3647480",
    "end": "3652790"
  },
  {
    "text": "What else can we do with it? AUDIENCE: Test them all. SAMAN AMARASIGNHE:\nTest them all.",
    "start": "3652790",
    "end": "3658110"
  },
  {
    "text": "That's one approach there. AUDIENCE: Use autotuning,\ntrying to find [INAUDIBLE].. SAMAN AMARASIGNHE:\nWe can do autotuning.",
    "start": "3658110",
    "end": "3663187"
  },
  {
    "text": "So that switched into the\nautotuning part of this talk. So performance engineering\nbasically, most of the time,",
    "start": "3663187",
    "end": "3670200"
  },
  {
    "text": "is finding right\nthese crazy things. Like you start looking\nat, I think, probably",
    "start": "3670200",
    "end": "3676560"
  },
  {
    "text": "as Charles talked, what\nthis voodoo parameters, like, OK, what's the\nright block size? And it has a big\nimpact, finding that.",
    "start": "3676560",
    "end": "3683220"
  },
  {
    "text": "A newer memory\nallocation project, you had to find\nthe right strategy, right memory allocation. You searched through a\nbunch of these things.",
    "start": "3683220",
    "end": "3689930"
  },
  {
    "text": "You and GCC compiler,\nthere are, I think, about 400\ndifferent flags for GCC.",
    "start": "3689930",
    "end": "3698400"
  },
  {
    "text": "And you can actually get\nfactor of four performance by having a [INAUDIBLE]\n200 flags into GCC.",
    "start": "3698400",
    "end": "3707330"
  },
  {
    "text": "It's crazy. And that 200 flags is not\nthe same for every program. And, of course, some programs\nwill crash in some places.",
    "start": "3707330",
    "end": "3714630"
  },
  {
    "text": "Most of the time, it'll\nslow down or speed up. So you can just give all the\nflags of GCC and autotune that.",
    "start": "3714630",
    "end": "3720850"
  },
  {
    "text": "And you can get factor of two\nto four performance in there. It's just crazy. And then, because it do weird\nthings in there, and then 01,",
    "start": "3720850",
    "end": "3726809"
  },
  {
    "text": "02, 03 will only\ndo certain amount. So 03 doesn't-- it's\nnot always right. You can try all these things.",
    "start": "3726810",
    "end": "3732480"
  },
  {
    "text": "So you can tune that. And scheduling Halide,\nscheduling GraphIt,",
    "start": "3732480",
    "end": "3738210"
  },
  {
    "text": "all these things\ncan be autotuned. So before autotuning, when\nyou have a large search space,",
    "start": "3738210",
    "end": "3745500"
  },
  {
    "text": "what do we normally do? The thing that when we think\nwe are smart, what we do",
    "start": "3745500",
    "end": "3751050"
  },
  {
    "text": "is we build models. We have model for a cache. And say, can we\nunderstand the cache? We have all these\nnice models in here.",
    "start": "3751050",
    "end": "3757080"
  },
  {
    "text": "And using the model,\nI can predict, ah ha, this is the right block size. So what's the problem when\nyou try to do a model?",
    "start": "3757080",
    "end": "3763910"
  },
  {
    "start": "3763910",
    "end": "3769333"
  },
  {
    "text": "AUDIENCE: Sometime it\ndoesn't work [INAUDIBLE].. SAMAN AMARASIGNHE:\nExactly, because most of the time, when you try to do\na model, you have to abstract.",
    "start": "3769333",
    "end": "3777818"
  },
  {
    "text": "And most of the time,\nyou-- what you abstract out might be the most important\npart of the darn thing that we didn't consider.",
    "start": "3777818",
    "end": "3782840"
  },
  {
    "text": "So we built a model for cache. But oops, I could--\ndidn't figure out pages. Well, the pages made\na big difference.",
    "start": "3782840",
    "end": "3788170"
  },
  {
    "text": "So there might be\nthings in real life that matters that didn't\nfit into your model, or you didn't know it needed\nto be fit into a model.",
    "start": "3788170",
    "end": "3794530"
  },
  {
    "text": "If you try to put\neverything, that's too complicated of a model. So you abstract something out. You can say, I have optimal\nresult for this model.",
    "start": "3794530",
    "end": "3802830"
  },
  {
    "text": "But that optimal\nresult might be way off than the simple\nresult you can get. Because the thing that\nyou didn't put into",
    "start": "3802830",
    "end": "3809785"
  },
  {
    "text": "the model are the\nimportant ones. So model doesn't work. The next thing is what you\ndo, heuristic-based thing.",
    "start": "3809785",
    "end": "3814990"
  },
  {
    "text": "This is where these old\npeople come and say, I know how to do this. In order to do this, you need\nto do this thing, this thing,",
    "start": "3814990",
    "end": "3821155"
  },
  {
    "text": "this thing. You can come up with some\nkind of the old grandmother's",
    "start": "3821155",
    "end": "3828460"
  },
  {
    "text": "solution type thing. There are certain things\nthat will always work. And you hardcode them. So you can say if the matrix\ndimension is more than 1,000,",
    "start": "3828460",
    "end": "3837790"
  },
  {
    "text": "always go to block, or some\nkind of rules like that. These rules work\nmost of the time.",
    "start": "3837790",
    "end": "3843550"
  },
  {
    "text": "But obviously, there are certain\ncases that rules doesn't work.",
    "start": "3843550",
    "end": "3848820"
  },
  {
    "text": "Worse, that rules might be\nset for a certain machine, certain architecture,\nall those things. I'll give you the story.",
    "start": "3848820",
    "end": "3854720"
  },
  {
    "text": "So GCC has this fast\ntable sort routine.",
    "start": "3854720",
    "end": "3865330"
  },
  {
    "text": "So fast table sort\nroutine says sort using a parallel quick sort.",
    "start": "3865330",
    "end": "3871930"
  },
  {
    "text": "And when the number exceeds\n16, switch to in session sort.",
    "start": "3871930",
    "end": "3877030"
  },
  {
    "text": "It's hardcoded in GCC. It's like, wow, some\namazing person figured out 16, this amazing\nnumber, has to switch",
    "start": "3877030",
    "end": "3884020"
  },
  {
    "text": "from parallel quick\nsort to insertion sort. So we are trying to\nfigure out, what's the profoundness of this number?",
    "start": "3884020",
    "end": "3889930"
  },
  {
    "text": "The profoundness of this\nnumber is somewhere around 1995 when this code was released.",
    "start": "3889930",
    "end": "3895900"
  },
  {
    "text": "In those machines, that\nwas the right number. That 16 was a really good number\nto switch from parallelism",
    "start": "3895900",
    "end": "3902170"
  },
  {
    "text": "to doing that, because the\ncache size, stuff like that. But that 16 survived\nfrom 1995 [INAUDIBLE] even two dates there.",
    "start": "3902170",
    "end": "3908200"
  },
  {
    "text": "Today that number\nshould be like 500. But it's in there,\nbecause somebody",
    "start": "3908200",
    "end": "3913750"
  },
  {
    "text": "thought 16 is the right,\nit's hardcoded in there. It didn't change. So there are a lot of things\nin compilers code like that,",
    "start": "3913750",
    "end": "3920275"
  },
  {
    "text": "that they draw, that\nsome programmer said, I know what works here. This fits in there. You put it in there.",
    "start": "3920275",
    "end": "3925660"
  },
  {
    "text": "But there's no rhyme or reason. Because at that time,\nthey had a reason. But it doesn't scale. So a lot of these heuristics\nget out of focus very fast.",
    "start": "3925660",
    "end": "3935115"
  },
  {
    "text": "And there's no\ntheory behind this to say, now, how do you update? You had to ask people,\nwhy did you put that? And then it's, oh yeah,\nbecause my machine",
    "start": "3935115",
    "end": "3941510"
  },
  {
    "text": "has a 32 kilobytes of cache. It's like, oh, OK, that's\na different machine what we have today.",
    "start": "3941510",
    "end": "3947810"
  },
  {
    "text": "So that's the problem in here. And then other thing is you\ncan do exhaustive search. You can say, OK, I'll\ntry every possible thing.",
    "start": "3947810",
    "end": "3953950"
  },
  {
    "text": "The problem here is\nsometimes my search base is 10 to the power 10.",
    "start": "3953950",
    "end": "3959650"
  },
  {
    "text": "You don't have enough\nseconds in your lifetime to do that search.",
    "start": "3959650",
    "end": "3964840"
  },
  {
    "text": "So it would be too complicated. And that's where the\nautotuner comes in. So-- oh, OK, actually I have\na little bit more slides here.",
    "start": "3964840",
    "end": "3972060"
  },
  {
    "text": "So model based\nsolution is you come up with this comprehensive\nmodel, like a cache model, or something like that.",
    "start": "3972060",
    "end": "3977200"
  },
  {
    "text": "And you do that. And you can exactly show what's\nright for the optimal solution",
    "start": "3977200",
    "end": "3983500"
  },
  {
    "text": "in here. But the problem is\nhard to build models, cannot model everything, and\nmost of the time modeling is",
    "start": "3983500",
    "end": "3990880"
  },
  {
    "text": "the most important thing. Heuristic-based\nthings are the rule of the thumb kind of solution\nthat you come up and say,",
    "start": "3990880",
    "end": "3997342"
  },
  {
    "text": "it's hardcoded in there. And it's very simple and easy. It works most of the\ntime, if you get it right.",
    "start": "3997342",
    "end": "4003660"
  },
  {
    "text": "But the problem\nis too simplistic. It doesn't scale. It doesn't stand the test of\ntime, most of the time in here.",
    "start": "4003660",
    "end": "4010400"
  },
  {
    "text": "An exhaustive search is great. But the problem is\njust way too much",
    "start": "4010400",
    "end": "4016980"
  },
  {
    "text": "possibility of searching in\nhere, too big of search base.",
    "start": "4016980",
    "end": "4022290"
  },
  {
    "text": "You can't do that. So this is where you want\nto prune the search base. And the pruning, the\nbest way to do that",
    "start": "4022290",
    "end": "4028560"
  },
  {
    "text": "is basically use autotuning. So what autotuning you can do\nis you can define the space",
    "start": "4028560",
    "end": "4033870"
  },
  {
    "text": "of acceptable values nicely,\nchoose a value at random-- that's what the system\nwill do, try it out there--",
    "start": "4033870",
    "end": "4040980"
  },
  {
    "text": "and evaluate the performance\nof that value end to end. Because end to end matters. Because if you try to\npredict, most of the time,",
    "start": "4040980",
    "end": "4046340"
  },
  {
    "text": "it might not work. And if satisfies the performance\nthat you need, you're done.",
    "start": "4046340",
    "end": "4053819"
  },
  {
    "text": "Otherwise, choose a new\nvalue and iterate over there, go to three in there. So this is the kind of thing. And what you have\nto do is you need",
    "start": "4053820",
    "end": "4059970"
  },
  {
    "text": "to have a system to figure out\nhow to do this fast, basically",
    "start": "4059970",
    "end": "4065430"
  },
  {
    "text": "what space to basically do that,\nwhen to basically think you're done, how to go through the\niterating loops through that.",
    "start": "4065430",
    "end": "4072220"
  },
  {
    "text": "So this is the kind of--\nwith cartoonish way, what happens is you give\na value candidate, you compile the program, you\nrun it with bunch of data,",
    "start": "4072220",
    "end": "4079720"
  },
  {
    "text": "you are running\nthrough the bunch, otherwise you are all fitting. You can't run it with one. And you get the results. And you get something\nlike average.",
    "start": "4079720",
    "end": "4085900"
  },
  {
    "text": "And if you go through\nthis loop in here. And what OpenTuner\nhas done is come up",
    "start": "4085900",
    "end": "4093100"
  },
  {
    "text": "with the ensemble of techniques. So the idea there is when you're\nsearching through a space,",
    "start": "4093100",
    "end": "4098318"
  },
  {
    "text": "you might be at the bottom\nof a hill of the space. So what that means is there\nare certain value, if you keep",
    "start": "4098319",
    "end": "4104049"
  },
  {
    "text": "improving in value, that\nyou are getting good better, and better, and better. And at that time, something\nlike a hill climber-- ",
    "start": "4104050",
    "end": "4112509"
  },
  {
    "text": "hill climber, or somebody like\nan [INAUDIBLE] hill climber can actually give you\nthe best performance. You're going very fast in there.",
    "start": "4112510",
    "end": "4118672"
  },
  {
    "text": "But meet you at the top of the\nhill for that pyramid, oops, there's no place to go. So that if you\ntried to hill climb,",
    "start": "4118673",
    "end": "4124450"
  },
  {
    "text": "it's not going to be helpful. So at that time, what\ndo you want to do is do something like a\nrandom search in here.",
    "start": "4124450",
    "end": "4130759"
  },
  {
    "text": "So what this system do,\nOpenTuner, you do it, it will basically test\nthis request in there.",
    "start": "4130760",
    "end": "4137830"
  },
  {
    "text": "And if something\nis doing very well, it will give it more time.",
    "start": "4137830",
    "end": "4142839"
  },
  {
    "text": "If not, what it will do\nis it will say, OK, look, this is-- this technique\nis not working.",
    "start": "4142840",
    "end": "4148128"
  },
  {
    "text": "Let's try something else. It'll basically allocate\nthe time in here. So it do this search much faster\nthan otherwise you can do.",
    "start": "4148128",
    "end": "4155949"
  },
  {
    "text": "So I want to finish this\nby showing what you need for autotuning for GraphIt. So we have algorithm,\nand you have a schedule.",
    "start": "4155950",
    "end": "4162380"
  },
  {
    "text": "It's a pain to\nwrite this schedule. In fact, there's a\ngood [? interesting ?] thing in-- when\nyou do Halide, we",
    "start": "4162380",
    "end": "4170500"
  },
  {
    "text": "decided, OK, it should be\nsimilar to write the algorithm for Halide and the schedule.",
    "start": "4170500",
    "end": "4176290"
  },
  {
    "text": "Google very fast realized\nmany people won't use Halide. And they-- at about two\nyears, they had about hundreds",
    "start": "4176290",
    "end": "4182740"
  },
  {
    "text": "of programmers who can\nwrite the algorithm. But they only had\nfive people who could write the really good schedule.",
    "start": "4182740",
    "end": "4188380"
  },
  {
    "text": "To write a really\ngood schedule, you need to understand a little\nbit of the algorithm. You need to understand a\nlittle bit of the architecture, a little bit of everything.",
    "start": "4188380",
    "end": "4194229"
  },
  {
    "text": "And that's much harder\nfor people to learn. So getting the schedule\nright is not that easy.",
    "start": "4194229",
    "end": "4200362"
  },
  {
    "text": "And same thing in\nhere, because you need to understand a lot\nunless you do kind of random-- you've got certain arbitrary,\nbut to do it right,",
    "start": "4200362",
    "end": "4208329"
  },
  {
    "text": "you need to know\na little bit more. So what we can do\nis we can basically",
    "start": "4208330",
    "end": "4213550"
  },
  {
    "text": "give some idea about\nthe graphs and some idea about the algorithm in there. We can autotune\nthese things in there",
    "start": "4213550",
    "end": "4219892"
  },
  {
    "text": "and then generate the schedule. And so what we found was to\ngenerate this schedule, if you",
    "start": "4219892",
    "end": "4226300"
  },
  {
    "text": "do exhaustive search,\nit runs for days. But if you're using\nautotuner, OpenTuner,",
    "start": "4226300",
    "end": "4231580"
  },
  {
    "text": "you can find a really\ngood schedule for-- in less than two hours.",
    "start": "4231580",
    "end": "4237040"
  },
  {
    "text": "And, in fact, a few\ncases we found schedules that run better\nthan what we thought",
    "start": "4237040",
    "end": "4242798"
  },
  {
    "text": "was the best possible schedule. Because it was able to-- because it was able to search\nmuch better than our intuition",
    "start": "4242798",
    "end": "4250960"
  },
  {
    "text": "would say in here. And when-- and even if\nour intuition know it, it has more time to try\nmany different combinations",
    "start": "4250960",
    "end": "4256420"
  },
  {
    "text": "and trying something in--\ncome something better in here. So that's all I have today.",
    "start": "4256420",
    "end": "4263850"
  },
  {
    "start": "4263850",
    "end": "4281805"
  }
]