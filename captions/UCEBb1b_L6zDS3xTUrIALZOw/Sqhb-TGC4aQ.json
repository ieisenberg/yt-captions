[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "A compiler is a program that translates a\nhigh-level language program into a functionally",
    "start": "979",
    "end": "5700"
  },
  {
    "text": "equivalent sequence of machine instructions,\ni.e., an assembly language program.",
    "start": "5700",
    "end": "10518"
  },
  {
    "text": "A compiler first checks that the high-level\nprogram is correct, i.e., that the statements",
    "start": "10519",
    "end": "15959"
  },
  {
    "text": "are well formed, the programmer isn't asking\nfor nonsensical computations,",
    "start": "15959",
    "end": "20460"
  },
  {
    "text": "e.g., adding a string value and an integer,\nor attempting to use the value of a variable",
    "start": "20460",
    "end": "26140"
  },
  {
    "text": "before it has been properly initialized.\nThe compiler may also provide warnings when",
    "start": "26140",
    "end": "31578"
  },
  {
    "text": "operations may not produce the expected results,\ne.g., when converting from a floating-point",
    "start": "31579",
    "end": "37320"
  },
  {
    "text": "number to an integer, where the floating-point\nvalue may be too large to fit in the number",
    "start": "37320",
    "end": "42170"
  },
  {
    "text": "of bits provided by the integer.\nIf the program passes scrutiny, the compiler",
    "start": "42170",
    "end": "47109"
  },
  {
    "text": "then proceeds to generate efficient sequences\nof instructions, often finding ways to rearrange",
    "start": "47110",
    "end": "52829"
  },
  {
    "text": "the computation so that the resulting sequences\nare shorter and faster.",
    "start": "52829",
    "end": "58250"
  },
  {
    "text": "It's hard to beat a modern optimizing compiler\nat producing assembly language, since the",
    "start": "58250",
    "end": "62879"
  },
  {
    "text": "compiler will patiently explore alternatives\nand deduce properties of the program that",
    "start": "62879",
    "end": "67970"
  },
  {
    "text": "may not be apparent to even diligent assembly\nlanguage programmers.",
    "start": "67970",
    "end": "73190"
  },
  {
    "text": "In this section, we'll look at a simple technique\nfor compiling C programs into assembly.",
    "start": "73190",
    "end": "78720"
  },
  {
    "text": "Then, in the next section, we'll dive more\ndeeply into how a modern compiler works.",
    "start": "78720",
    "end": "85280"
  },
  {
    "start": "85000",
    "end": "85000"
  },
  {
    "text": "There are two main routines in our simple\ncompiler: compile_statement and compile_expr.",
    "start": "85280",
    "end": "90810"
  },
  {
    "text": "The job of compile_statement is to compile\na single statement from the source program.",
    "start": "90810",
    "end": "96750"
  },
  {
    "text": "Since the source program is a sequence of\nstatements, we'll be calling compile_statement",
    "start": "96750",
    "end": "102060"
  },
  {
    "text": "repeatedly.\nWe'll focus on the compilation technique for",
    "start": "102060",
    "end": "105770"
  },
  {
    "text": "four types of statements.\nAn unconditional statement is simply an expression",
    "start": "105770",
    "end": "110929"
  },
  {
    "text": "that's evaluated once.\nA compound statement is simply a sequence",
    "start": "110930",
    "end": "115520"
  },
  {
    "text": "of statements to be executed in turn.\nConditional statements, sometimes called \"if",
    "start": "115520",
    "end": "120939"
  },
  {
    "text": "statements\", compute the value of an test\nexpression, e.g., a comparison such as \"A",
    "start": "120940",
    "end": "126040"
  },
  {
    "text": "< B\".\nIf the test is true then statement_1 is executed,",
    "start": "126040",
    "end": "130218"
  },
  {
    "text": "otherwise statement_2 is executed.\nIteration statements also contain a test expression.",
    "start": "130219",
    "end": "136459"
  },
  {
    "text": "In each iteration, if the test true, then\nthe statement is executed, and the process",
    "start": "136459",
    "end": "140900"
  },
  {
    "text": "repeats.\nIf the test is false, the iteration is terminated.",
    "start": "140900",
    "end": "147310"
  },
  {
    "text": "The other main routine is compile_expr whose\njob it is to generate code to compute the",
    "start": "147310",
    "end": "152499"
  },
  {
    "text": "value of an expression, leaving the result\nin some register.",
    "start": "152499",
    "end": "157349"
  },
  {
    "text": "Expressions take many forms:\nsimple constant values",
    "start": "157349",
    "end": "161340"
  },
  {
    "text": "values from scalar or array variables,\nassignment expressions that compute a value",
    "start": "161340",
    "end": "166840"
  },
  {
    "text": "and then store the result in some variable,\nunary or binary operations that combine the",
    "start": "166840",
    "end": "173069"
  },
  {
    "text": "values of their operands with the specified\noperator.",
    "start": "173069",
    "end": "177010"
  },
  {
    "text": "Complex arithmetic expressions can be decomposed\ninto sequences of unary and binary operations.",
    "start": "177010",
    "end": "182890"
  },
  {
    "text": "And, finally, procedure calls, where a named\nsequence of statements will be executed with",
    "start": "182890",
    "end": "188629"
  },
  {
    "text": "the values of the supplied arguments assigned\nas the values for the formal parameters of",
    "start": "188629",
    "end": "193329"
  },
  {
    "text": "the procedure.\nCompiling procedures and procedure calls is",
    "start": "193329",
    "end": "197250"
  },
  {
    "text": "a topic that we'll tackle next lecture since\nthere are some complications to understand",
    "start": "197250",
    "end": "202389"
  },
  {
    "text": "and deal with.\nHappily, compiling the other types of expressions",
    "start": "202389",
    "end": "206900"
  },
  {
    "text": "and statements is straightforward, so let's\nget started.",
    "start": "206900",
    "end": "210950"
  },
  {
    "text": "What code do we need to put the value of a\nconstant into a register?",
    "start": "210950",
    "end": "215499"
  },
  {
    "start": "211000",
    "end": "211000"
  },
  {
    "text": "If the constant will fit into the 16-bit constant\nfield of an instruction, we can use CMOVE",
    "start": "215499",
    "end": "221249"
  },
  {
    "text": "to load the sign-extended constant into a\nregister.",
    "start": "221249",
    "end": "224769"
  },
  {
    "text": "This approach works for constants between\n-32768 and +32767.",
    "start": "224769",
    "end": "231989"
  },
  {
    "text": "If the constant is too large, it's stored\nin a main memory location and we use a LD",
    "start": "231989",
    "end": "236719"
  },
  {
    "text": "instruction to get the value into a register.\nLoading the value of a variable is much the",
    "start": "236719",
    "end": "242489"
  },
  {
    "text": "same as loading the value of a large constant.\nWe use a LD instruction to access the memory",
    "start": "242489",
    "end": "247629"
  },
  {
    "text": "location that holds the value of the variable.\nPerforming an array access is slightly more",
    "start": "247629",
    "end": "254609"
  },
  {
    "text": "complicated: arrays are stored as consecutive\nlocations in main memory, starting with index",
    "start": "254609",
    "end": "260359"
  },
  {
    "text": "0.\nEach element of the array occupies some fixed",
    "start": "260360",
    "end": "264030"
  },
  {
    "text": "number bytes.\nSo we need code to convert the array index",
    "start": "264030",
    "end": "268560"
  },
  {
    "text": "into the actual main memory address for the\nspecified array element.",
    "start": "268560",
    "end": "274030"
  },
  {
    "text": "We first invoke compile_expr to generate code\nthat evaluates the index expression and leaves",
    "start": "274030",
    "end": "279600"
  },
  {
    "text": "the result in Rx.\nThat will be a value between 0 and the size",
    "start": "279600",
    "end": "285100"
  },
  {
    "text": "of the array minus 1.\nWe'll use a LD instruction to access the appropriate",
    "start": "285100",
    "end": "290560"
  },
  {
    "text": "array entry, but that means we need to convert\nthe index into a byte offset, which we do",
    "start": "290560",
    "end": "295190"
  },
  {
    "text": "by multiplying the index by bsize, the number\nof bytes in one element.",
    "start": "295190",
    "end": "301060"
  },
  {
    "text": "If b was an array of integers, bsize would\nbe 4.",
    "start": "301060",
    "end": "305889"
  },
  {
    "text": "Now that we have the byte offset in a register,\nwe can use LD to add the offset to the base",
    "start": "305890",
    "end": "311100"
  },
  {
    "text": "address of the array computing the address\nof the desired array element, then load the",
    "start": "311100",
    "end": "316170"
  },
  {
    "text": "memory value at that address into a register.\nAssignment expressions are easy",
    "start": "316170",
    "end": "322130"
  },
  {
    "text": "Invoke compile_expr to generate code that\nloads the value of the expression into a register,",
    "start": "322130",
    "end": "327950"
  },
  {
    "text": "then generate a ST instruction to store the\nvalue into the specified variable.",
    "start": "327950",
    "end": "334140"
  },
  {
    "text": "Arithmetic operations are pretty easy too.\nUse compile_expr to generate code for each",
    "start": "334140",
    "end": "338890"
  },
  {
    "text": "of the operand expressions, leaving the results\nin registers.",
    "start": "338890",
    "end": "342560"
  },
  {
    "text": "Then generate the appropriate ALU instruction\nto combine the operands and leave the answer",
    "start": "342560",
    "end": "348910"
  },
  {
    "text": "in a register.\nLet's look at example to see how all this",
    "start": "348910",
    "end": "352560"
  },
  {
    "start": "350000",
    "end": "350000"
  },
  {
    "text": "works.\nHere have an assignment expression that requires",
    "start": "352560",
    "end": "355910"
  },
  {
    "text": "a subtract, a multiply, and an addition to\ncompute the required value.",
    "start": "355910",
    "end": "361410"
  },
  {
    "text": "Let's follow the compilation process from\nstart to finish as we invoke compile_expr",
    "start": "361410",
    "end": "366060"
  },
  {
    "text": "to generate the necessary code.\nFollowing the template for assignment expressions",
    "start": "366060",
    "end": "370970"
  },
  {
    "text": "from the previous page, we recursively call\ncompile_expr to compute value of the right-hand-side",
    "start": "370970",
    "end": "376850"
  },
  {
    "text": "of the assignment.\nThat's a multiply operation, so, following",
    "start": "376850",
    "end": "381401"
  },
  {
    "text": "the Operations template, we need to compile\nthe left-hand operand of the multiply.",
    "start": "381401",
    "end": "387260"
  },
  {
    "text": "That's a subtract operation, so, we call compile_expr\nagain to compile the left-hand operand of",
    "start": "387260",
    "end": "393220"
  },
  {
    "text": "the subtract.\nAha, we know how to get the value of a variable",
    "start": "393220",
    "end": "398000"
  },
  {
    "text": "into a register. So we generate a LD instruction\nto load the value of x into r1.",
    "start": "398000",
    "end": "404930"
  },
  {
    "text": "The process we're following is called \"recursive\ndescent\".",
    "start": "404930",
    "end": "408870"
  },
  {
    "text": "We've used recursive calls to compile_expr\nto process each level of the expression tree.",
    "start": "408870",
    "end": "414500"
  },
  {
    "text": "At each recursive call the expressions get\nsimpler, until we reach a variable or constant,",
    "start": "414500",
    "end": "420330"
  },
  {
    "text": "where we can generate the appropriate instruction\nwithout descending further.",
    "start": "420330",
    "end": "425150"
  },
  {
    "text": "At this point we've reach a leaf of the expression\ntree and we're done with this branch of the",
    "start": "425150",
    "end": "430370"
  },
  {
    "text": "recursion.\nNow we need to get the value of the right-hand",
    "start": "430370",
    "end": "434030"
  },
  {
    "text": "operand of the subtract into a register.\nIn case it's a small constant, so we generate",
    "start": "434030",
    "end": "440060"
  },
  {
    "text": "a CMOVE instruction.\nNow that both operand values are in registers,",
    "start": "440060",
    "end": "445700"
  },
  {
    "text": "we return to the subtract template and generate\na SUB instruction to do the subtraction.",
    "start": "445700",
    "end": "451960"
  },
  {
    "text": "We now have the value for the left-hand operand\nof the multiply in r1.",
    "start": "451960",
    "end": "458199"
  },
  {
    "text": "We follow the same process for the right-hand\noperand of the multiply, recursively calling",
    "start": "458200",
    "end": "463360"
  },
  {
    "text": "compile_expr to process each level of the\nexpression until we reach a variable or constant.",
    "start": "463360",
    "end": "469870"
  },
  {
    "text": "Then we return up the expression tree, generating\nthe appropriate instructions as we go, following",
    "start": "469870",
    "end": "475561"
  },
  {
    "text": "the dictates of the appropriate template from\nthe previous slide.",
    "start": "475561",
    "end": "480060"
  },
  {
    "text": "The generated code is shown on the left of\nthe slide.",
    "start": "480060",
    "end": "483210"
  },
  {
    "text": "The recursive-descent technique makes short\nwork of generating code for even the most",
    "start": "483210",
    "end": "487419"
  },
  {
    "text": "complicated of expressions.\nThere's even opportunity to find some simple",
    "start": "487420",
    "end": "492590"
  },
  {
    "text": "optimizations by looking at adjacent instructions.\nFor example, a CMOVE followed by an arithmetic",
    "start": "492590",
    "end": "498900"
  },
  {
    "text": "operation can often be shorted to a single\narithmetic instruction with the constant as",
    "start": "498900",
    "end": "503810"
  },
  {
    "text": "its second operand.\nThese local transformations are called \"peephole",
    "start": "503810",
    "end": "508169"
  },
  {
    "text": "optimizations\" since we're only considering\njust one or two instructions at a time.",
    "start": "508170",
    "end": "512449"
  }
]