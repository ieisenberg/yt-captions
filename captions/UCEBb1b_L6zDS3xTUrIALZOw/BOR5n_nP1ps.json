[
  {
    "text": " We are continuing our\ndiscussion of fault-tolerance and atomicity.",
    "start": "0",
    "end": "8360"
  },
  {
    "text": "And sort of teaching\nthese lectures makes me feel, in the beginning,\nlike those TV shows where",
    "start": "8360",
    "end": "14170"
  },
  {
    "text": "they always, before\na new episode, tell you everything that\nhappened so far in the season.",
    "start": "14170",
    "end": "20370"
  },
  {
    "text": "So we will do the same thing. The story so far here is that\nin order to deal with failures,",
    "start": "20370",
    "end": "29130"
  },
  {
    "text": "we came up with this idea\nof making modules have this property of atomicity,\nwhich actually has",
    "start": "29130",
    "end": "37789"
  },
  {
    "text": "two aspects to it, one of which\nis an all or nothing aspect, which we call recoverability,\nand the other is a way",
    "start": "37790",
    "end": "49399"
  },
  {
    "text": "to coordinate multiple\nconcurrent activities so you get this illusion that they are\nall separate from each other.",
    "start": "49400",
    "end": "55870"
  },
  {
    "text": "And we call that isolation. And the basic rule here for\nachieving recoverability",
    "start": "55870",
    "end": "61530"
  },
  {
    "text": "was we repeatedly\napplied this one rule that we called the \"Golden Rule\nof Recoverability\" which is",
    "start": "61530",
    "end": "66880"
  },
  {
    "text": "to never modify the only copy.",
    "start": "66880",
    "end": "72140"
  },
  {
    "text": " And we used that\nrule to build up this idea of recoverable\nsector and we",
    "start": "72140",
    "end": "79060"
  },
  {
    "text": "used that idea of\nrecoverable sector to come up with two schemes\nfor achieving recoverability, one using version\nhistories where",
    "start": "79060",
    "end": "86200"
  },
  {
    "text": "you had a special case\nof this \"Never Modify the Only Copy Rule\" which\nwas never modify anything.",
    "start": "86200",
    "end": "92490"
  },
  {
    "text": "So, for any given\nvariable, you must create lots and lots of\nversions never updating anything in place.",
    "start": "92490",
    "end": "99100"
  },
  {
    "text": "And then we decided\nthat it is inefficient, so we came up with a different\nway of achieving recoverability using logging.",
    "start": "99100",
    "end": "106759"
  },
  {
    "text": "Then for isolation,\nwe did this last time where we talked\nabout serializability",
    "start": "106760",
    "end": "118540"
  },
  {
    "text": "where the goal was to allow the\nsteps of the different actions to run in such a way that\nthe result is as if they",
    "start": "118540",
    "end": "127000"
  },
  {
    "text": "ran in some serial order.  And we talked about a\nway of achieving that",
    "start": "127000",
    "end": "133540"
  },
  {
    "text": "with cell storage. In particular, we talked about\nusing locks as an abstraction,",
    "start": "133540",
    "end": "141470"
  },
  {
    "text": "as a programming primitive\nto achieve isolation. ",
    "start": "141470",
    "end": "148170"
  },
  {
    "text": "And, in particular, the\nkey idea that we saw here was that serializability\nimplied that there",
    "start": "148170",
    "end": "155610"
  },
  {
    "text": "were no cycles in this data\nstructure called the action graph. And, as long as you\ncould argue that",
    "start": "155610",
    "end": "162220"
  },
  {
    "text": "for a given method of locking,\nas long as you could argue that the resulting action\ngraph had no cycles,",
    "start": "162220",
    "end": "168750"
  },
  {
    "text": "you were guaranteed\nserializability. And, therefore, the\nscheme provided isolation. And, in particular, a scheme\nwe looked at near the end",
    "start": "168750",
    "end": "176450"
  },
  {
    "text": "was two-phase locking. ",
    "start": "176450",
    "end": "181930"
  },
  {
    "text": "Where the idea is that you never\nacquire a lock for any item if you have done a\nrelease of any other lock",
    "start": "181930",
    "end": "189570"
  },
  {
    "text": "in the atomic action so far. And that's the reason why\nthis is called two-phase",
    "start": "189570",
    "end": "194750"
  },
  {
    "text": "locking because if you\nlook at the two phases being a lock acquisition phase\nwhere the only thing that",
    "start": "194750",
    "end": "201020"
  },
  {
    "text": "is happening is locks\nare being acquired and nothing is being released\nso the number of locks is strictly\nincreasing with time.",
    "start": "201020",
    "end": "207185"
  },
  {
    "text": "And then there is\na certain point of the action after which\nyou can only release locks. And you cannot acquire a lock\nthe moment you have released",
    "start": "207185",
    "end": "213890"
  },
  {
    "text": "any given lock. And the way we argued this\nprotocol achieved isolation was",
    "start": "213890",
    "end": "219400"
  },
  {
    "text": "to consider the\naction graph resulting from some execution\nof two-phase locking",
    "start": "219400",
    "end": "228069"
  },
  {
    "text": "and argued that if there was a\ncycle in that resulting action graph then two-phase\nlocking gets violated.",
    "start": "228070",
    "end": "234030"
  },
  {
    "text": "And, therefore,\ntwo-phase locking provides an action graph\nwhich does not have cycles",
    "start": "234030",
    "end": "239647"
  },
  {
    "text": "and, therefore, achieves\nserializability.  Two-phase locking is fine\nand is a really good idea",
    "start": "239647",
    "end": "247319"
  },
  {
    "text": "if you're into using locks. It has the property that you\ndo not actually need to know, the action does not need to\nknow at the beginning which",
    "start": "247320",
    "end": "254580"
  },
  {
    "text": "data items it is going to\naccess which means that all you need to do is to make sure that\nyou do not release anything",
    "start": "254580",
    "end": "261170"
  },
  {
    "text": "until everything\nhas been acquired. But you do not have to\nknow which ones to acquire before the start of the action.",
    "start": "261170",
    "end": "268740"
  },
  {
    "text": "You just have to keep\nacquiring sort of on demand until typically you get\nto the commit point.",
    "start": "268740",
    "end": "275240"
  },
  {
    "text": "And once you commit you\ncan release the locks. ",
    "start": "275240",
    "end": "280400"
  },
  {
    "text": "Now, in theory you can release\na lock at any given time",
    "start": "280400",
    "end": "286139"
  },
  {
    "text": "once you are sure that you are\nnot going to acquire anymore locks, but that\ntheoretical approach only",
    "start": "286140",
    "end": "294270"
  },
  {
    "text": "works if you are\nguaranteed that there will be no aborts happening. Now, in general, you cannot know\nbeforehand when an action might",
    "start": "294270",
    "end": "302761"
  },
  {
    "text": "abort. I mean the system\nmight decide to abort an action for a\nvariety of reasons, and we will see\nsome reasons today.",
    "start": "302761",
    "end": "310021"
  },
  {
    "text": "In practice, what\nends up happening is that when you abort\nyou have to go back",
    "start": "310022",
    "end": "316260"
  },
  {
    "text": "and look through the log\nand undo the actions, run the undo steps\nassociated with steps",
    "start": "316260",
    "end": "322384"
  },
  {
    "text": "that happened in the action. Which means that because\nthe undo goes ahead",
    "start": "322384",
    "end": "328060"
  },
  {
    "text": "into cell storage and uninstalls\nwhatever changes were made, it better be the case that when\nabort starts undoing things,",
    "start": "328060",
    "end": "335389"
  },
  {
    "text": "it better be the case that\nthe cell storage items that are being undone have locks\nowned by this action that",
    "start": "335390",
    "end": "341840"
  },
  {
    "text": "is doing the undo. What this means is that if you\nhave a set of statements here",
    "start": "341840",
    "end": "347690"
  },
  {
    "text": "that are doing read of x and a\nwrite of y and things like that",
    "start": "347690",
    "end": "354450"
  },
  {
    "text": "and then you have commit here -- But this is the last\npoint in time at which",
    "start": "354450",
    "end": "361110"
  },
  {
    "text": "you are reading and writing. And after that you are doing\nsome computation here not involving any reads or writes.",
    "start": "361110",
    "end": "367215"
  },
  {
    "text": " The action might abort anywhere\nhere because the process,",
    "start": "367215",
    "end": "375400"
  },
  {
    "text": "I mean this thread\nmight be terminated and the action\nwill have to abort. What that means is that a\nrelease for a data item that",
    "start": "375400",
    "end": "384120"
  },
  {
    "text": "is required by abort in\norder to undo the state changes that have\nbeen made, that lock",
    "start": "384120",
    "end": "390449"
  },
  {
    "text": "had better not be\nreleased before here. Because if the lock\ngot released here then some other action could\nhave acquired the lock",
    "start": "390450",
    "end": "397680"
  },
  {
    "text": "and gone ahead and started\nworking with the changes made by this action. And now it is too late to abort.",
    "start": "397680",
    "end": "403741"
  },
  {
    "text": "Someone else has\nalready seen the changes that have been made. In fact, you cannot be\nguaranteed now that later",
    "start": "403742",
    "end": "409820"
  },
  {
    "text": "on you actually can regain the\nlock and the results would be wrong.",
    "start": "409820",
    "end": "415450"
  },
  {
    "text": "So, in fact, the two-phase\nlocking rule really is that you",
    "start": "415450",
    "end": "421490"
  },
  {
    "text": "cannot release any lock until\nall of the locks have been acquired.",
    "start": "421490",
    "end": "427520"
  },
  {
    "text": "And, moreover, any locks that\nare needed in order for abort to successfully\nrun had better not",
    "start": "427520",
    "end": "434120"
  },
  {
    "text": "be released until you are\nsure that the action won't abort anymore. And the only time\nyou can be sure that the action\nwon't abort anymore",
    "start": "434120",
    "end": "439998"
  },
  {
    "text": "is once commit has been done. What that really means\nis that the release",
    "start": "439998",
    "end": "448360"
  },
  {
    "text": "of the locks of all\nof the items that are required for\nundoing this action had better happen\nafter the commit point.",
    "start": "448360",
    "end": "455210"
  },
  {
    "text": "And, moreover, no\nitem locks should be released until all of\nthe acquires have been done.",
    "start": "455210",
    "end": "461440"
  },
  {
    "text": "Now the reason I've\nsaid this in two parts is that if you are just\nreading a data item, you actually don't need to\nhold onto the lock of that item",
    "start": "461440",
    "end": "468120"
  },
  {
    "text": "in order to do the undo\nbecause all you did was read x. There is no change that\nhappened to the variable",
    "start": "468120",
    "end": "473240"
  },
  {
    "text": "x, which means although you\nneed to acquire the lock of x in order to read it because\nyou don't want to have other people making changes to\nit while you are reading it,",
    "start": "473240",
    "end": "481810"
  },
  {
    "text": "you don't actually need to hold\nonto the lock of x in order to do the undo because\nyou are not actually writing x during the undo step.",
    "start": "481810",
    "end": "489690"
  },
  {
    "text": " So that's the amendment to\nthe two-phase locking rule.",
    "start": "489690",
    "end": "495590"
  },
  {
    "text": "Things that you need in\norder to do undos for should only be\nreleased after you are sure that no aborts\nwill be done, which",
    "start": "495590",
    "end": "502930"
  },
  {
    "text": "means after the commit point. ",
    "start": "502930",
    "end": "509122"
  },
  {
    "text": "This way of doing\ntwo-phase locking is actually a\npretty good scheme. And it turns out\nthat, in many ways,",
    "start": "509122",
    "end": "516669"
  },
  {
    "text": "it is the most efficient\nand most general method. What that means is that there\nmight be special cases where",
    "start": "516669",
    "end": "522740"
  },
  {
    "text": "other ways of other protocols\nfor doing locks of objects perform better under\ncertain special cases",
    "start": "522740",
    "end": "528460"
  },
  {
    "text": "compared to two-phase\nlocking, but if you've bought into using locks in\norder to do concurrency control",
    "start": "528460",
    "end": "535209"
  },
  {
    "text": "and you don't know very\nmuch about the nature of the actions involved\nthen two-phase locking",
    "start": "535210",
    "end": "540580"
  },
  {
    "text": "is quite efficient. I mean there are variants\nof two-phase locking but, by and large, this\nidea, it's very hard",
    "start": "540580",
    "end": "546190"
  },
  {
    "text": "to do much better than this\nin a very general sense if you're using locking for\ndoing concurrency control.",
    "start": "546190",
    "end": "552330"
  },
  {
    "text": " But there are a set of problems. It's not two-phase locking, as\nwe have described it so far,",
    "start": "552330",
    "end": "559980"
  },
  {
    "text": "completely solves the\nproblem of insuring that actions perform well.",
    "start": "559980",
    "end": "565079"
  },
  {
    "text": "And a particular\nproblem that happens any time you use locks\nlike here is deadlocks. ",
    "start": "565079",
    "end": "575102"
  },
  {
    "text": "And we have actually\nseen deadlocks before in an\nearlier chapter when we talked about\nsynchronization of threads,",
    "start": "575102",
    "end": "582582"
  },
  {
    "text": "and it is exactly\nthe same problem. And the way you deal with it\npretty much is almost the same.",
    "start": "582582",
    "end": "587899"
  },
  {
    "text": " What is the problem here? Well, what could happen\nis that one action does",
    "start": "587900",
    "end": "594470"
  },
  {
    "text": "read x and write y and the other\naction does read y and write x.",
    "start": "594470",
    "end": "602608"
  },
  {
    "text": "And now you intersperse\nthe acquires and releases so you do an acquire of\nlx here and maybe you",
    "start": "602609",
    "end": "608670"
  },
  {
    "text": "do an acquire of ly here and\nhere you do an acquire of ly",
    "start": "608670",
    "end": "614510"
  },
  {
    "text": "and you do an acquire of lx. And what could happen is that\nonce you get to this stage",
    "start": "614510",
    "end": "619920"
  },
  {
    "text": "where this action has come this\nfar and is about to run this and this other action\nhas come up to here,",
    "start": "619920",
    "end": "626540"
  },
  {
    "text": "now you are stuck\nbecause this action has to wait until that is\nreleased and this action has to wait until that is released\nand neither can make progress.",
    "start": "626540",
    "end": "633820"
  },
  {
    "start": "633820",
    "end": "639382"
  },
  {
    "text": "So there are a few different\nways of dealing with it. And the simplest way and\nthe way that turns out",
    "start": "639382",
    "end": "645470"
  },
  {
    "text": "to be one that is often\nused in practice both because it is simple and\nbecause once you implement",
    "start": "645470",
    "end": "653219"
  },
  {
    "text": "the technique you don't\nhave to do very much else is to just set\ntimers on actions. So it's just to timeout.",
    "start": "653219",
    "end": "659649"
  },
  {
    "text": "And if you notice that\nfor a period of time an action has not\nmade any progress",
    "start": "659650",
    "end": "665250"
  },
  {
    "text": "then have a timeout that is\nassociated with the action. And if the action\nitself notices that it",
    "start": "665250",
    "end": "672810"
  },
  {
    "text": "hasn't made any progress,\nperhaps in another thread, then just go ahead\nand abort this thread.",
    "start": "672810",
    "end": "678080"
  },
  {
    "text": "Now, it is perfectly\nOK to abort. And, in this particular\ncase, aborting either of these\nactions is enough",
    "start": "678080",
    "end": "684820"
  },
  {
    "text": "and the other will make\nprogress and then you are done. And then the action that\ngot aborted can retry.",
    "start": "684820",
    "end": "693210"
  },
  {
    "text": "So the first solution\nis to just use a timer. ",
    "start": "693210",
    "end": "701378"
  },
  {
    "text": "And there is a school\nof thought that believes that in\npractice deadlocks should not be very common.",
    "start": "701379",
    "end": "707836"
  },
  {
    "text": "And the reason is that\ndeadlocks occur if there is, you know, there has to be\na contention for resources and there has to be contention\nfor multiple threads",
    "start": "707836",
    "end": "715630"
  },
  {
    "text": "for the same resources. And it has to be more\nthan one resource, because if you just have one\nresource you cannot really get",
    "start": "715630",
    "end": "722010"
  },
  {
    "text": "a deadlock which means that you\nare sort of running multiple actions that are contending for\na number of different shared",
    "start": "722010",
    "end": "729255"
  },
  {
    "text": "objects. ",
    "start": "729255",
    "end": "734420"
  },
  {
    "text": "And what that\nsuggests is if there is a high degree of concurrency\nlike that and shared contention",
    "start": "734420",
    "end": "740339"
  },
  {
    "text": "then it may be hard for you\nto get high performance. A lot of people think\nthat the right way",
    "start": "740340",
    "end": "745620"
  },
  {
    "text": "to be designing\napplications is to try hard to insure that the degree\nof sharing between objects",
    "start": "745620",
    "end": "752040"
  },
  {
    "text": "is actually quite small. For example, rather\nthan set up a lock on an entire big\ndatabase table, you",
    "start": "752040",
    "end": "758209"
  },
  {
    "text": "might set up locks at\nfinal granularities. And if you set up locks\nat final granularities the chances of multiple\nactions wanting to gain access",
    "start": "758210",
    "end": "765530"
  },
  {
    "text": "to the same exact\nfine-grained entry in a table might be small.",
    "start": "765530",
    "end": "771220"
  },
  {
    "text": "And in that situation,\ngiven that the chances of a deadlock\noccurring are rare, timing out every once in a\nwhile and aborting an action",
    "start": "771220",
    "end": "778636"
  },
  {
    "text": "is not going to be catastrophic. It's OK. It is a rare event. So rather than spend a\nwhole lot of complexity dealing with that\nrare event, just",
    "start": "778637",
    "end": "785010"
  },
  {
    "text": "go ahead and let\nsomething abort. Let an action that hasn't\nmade any progress abort.",
    "start": "785010",
    "end": "790740"
  },
  {
    "text": "Moreover, these\ntimers are necessary anyway because an\naction might end up getting stuck in\nan infinite loop",
    "start": "790740",
    "end": "796842"
  },
  {
    "text": "or it might end up getting\nstuck in a situation where it is not really waiting for a\nlock there is just a bug in it. There is a problem with\nit, it is not really",
    "start": "796842",
    "end": "804170"
  },
  {
    "text": "making any progress and maybe\nit is consuming resources and no one else\ncan make progress. So the system anyway needs a\nway to abort those actions.",
    "start": "804170",
    "end": "810910"
  },
  {
    "text": "And it needs a timeout\nmechanism anyway. So why not just use\nthat same mechanism to deal with deadlocks as well.",
    "start": "810910",
    "end": "820060"
  },
  {
    "text": "Probably somewhat a minority,\nbut some other people believe that deadlocks\nmight happen. And, when they do\nhappen, perhaps",
    "start": "820060",
    "end": "826180"
  },
  {
    "text": "because the granularity\nof locking in your system is not fine-grained then you\ndo not want to get stuck.",
    "start": "826180",
    "end": "832144"
  },
  {
    "text": "And you want to\noptimize, at least you want to do reasonably\nwell rather than waiting for some\nlong timeout period before aborting an action.",
    "start": "832144",
    "end": "838960"
  },
  {
    "text": "And people who believe that\nbuild a data structured called",
    "start": "838960",
    "end": "845120"
  },
  {
    "text": "the \"Waits-For Graph\". ",
    "start": "845120",
    "end": "850932"
  },
  {
    "text": "And the best way\nto understand this is imagine you have a database\nsystem that supports isolation",
    "start": "850932",
    "end": "860530"
  },
  {
    "text": "and any time you want\nto acquire a lock you send a message to this\nentity in the database system called lock manager\nasking to acquire a lock.",
    "start": "860530",
    "end": "867870"
  },
  {
    "text": "And any time you release\nit you do the same thing. What that lock manager\ncan do, for each lock",
    "start": "867870",
    "end": "874759"
  },
  {
    "text": "it can keep track of which\nactions running concurrently has acquired that lock and which\naction is waiting for a lock.",
    "start": "874760",
    "end": "883050"
  },
  {
    "text": "And what you can do now is build\nup a graph of actions and locks and look to see whether there\nis some kind of cycle where you",
    "start": "883050",
    "end": "889390"
  },
  {
    "text": "have action A waiting\nfor lock B and lock B is being held by action C and\naction C is waiting for lock D",
    "start": "889390",
    "end": "895649"
  },
  {
    "text": "and lock D is being\nheld by action A. When you have a\ncycle in this graph then you know that\nyou have a deadlock",
    "start": "895650",
    "end": "902649"
  },
  {
    "text": "and none of those actions\ncan make progress so go ahead and kill one. And you can be\nsophisticated about deciding",
    "start": "902650",
    "end": "909020"
  },
  {
    "text": "which one to kill. You might kill the\none, for example, that has been waiting the\nshortest amount of time",
    "start": "909020",
    "end": "914160"
  },
  {
    "text": "because the others have been\nwaiting longer so they might make progress, or you might\nhave other policies for deciding",
    "start": "914160",
    "end": "919769"
  },
  {
    "text": "which ones to kill. In practice, both these\nsystems are used sometimes",
    "start": "919770",
    "end": "925750"
  },
  {
    "text": "by the same system\ncombining these ideas. For example, if you look at\nlike an Oracle database system,",
    "start": "925750",
    "end": "933370"
  },
  {
    "text": "it uses primarily timers. At least from what\nI could tell, it does not seem to\nhave any mechanisms for really doing this\ncheck of a Waits-For graph.",
    "start": "933370",
    "end": "940680"
  },
  {
    "text": "It just uses timers. And one of the oldest\ntransaction processing systems",
    "start": "940680",
    "end": "946610"
  },
  {
    "text": "was a system called\nCICS from IBM which also basically\nused timers,",
    "start": "946610",
    "end": "951920"
  },
  {
    "text": "but there are other systems. For instance, IBM has this\nsystem called DB2 and Microsoft",
    "start": "951920",
    "end": "958630"
  },
  {
    "text": "Sequence server that both use\nthis Waits-For data structure. And, in fact,\nMicrosoft's system seems",
    "start": "958630",
    "end": "964420"
  },
  {
    "text": "to have a hundred thousand\ndifferent knobs for deciding how to turn off deadlocks,\nincluding the ability",
    "start": "964420",
    "end": "970090"
  },
  {
    "text": "to set various priorities\non different actions that might be running. And it is not actually apparent\nthat those knobs actually",
    "start": "970090",
    "end": "976045"
  },
  {
    "text": "are usual for anything\nor how you set them but that they have a lot of\nthings that you could set.",
    "start": "976045",
    "end": "981209"
  },
  {
    "text": "Sounds familiar. ",
    "start": "981210",
    "end": "986669"
  },
  {
    "text": "Now, you can combine these two. And I think certain products\ncombine these two ideas.",
    "start": "986669",
    "end": "993112"
  },
  {
    "text": "One decision you have to\nmake is to decide when to check this Waits-For graph. And an aggressive way of\ndoing it is the moment anybody",
    "start": "993112",
    "end": "999500"
  },
  {
    "text": "does an acquire or\nanybody does a release, in particular an acquire, you\nupdate your lock manager's data",
    "start": "999500",
    "end": "1005529"
  },
  {
    "text": "structure and immediately look\nto see if you have a cycle. Of course that takes\ntime and effort. You might decide not to\nboth but rather periodically",
    "start": "1005530",
    "end": "1013170"
  },
  {
    "text": "look for cycles in\nthis Waits-For graph when a timer fires, so\nevery three seconds go ahead and look for cycles. So you might combine these ideas\nin a bunch of different ways.",
    "start": "1013170",
    "end": "1022110"
  },
  {
    "text": "Now, if you recall from\nseveral lectures ago, another way of\ndealing with deadlock is to order all of the\nlocks that an action might",
    "start": "1022110",
    "end": "1030173"
  },
  {
    "text": "be able to acquire\nin a particular order and insure that\nall of the actions acquire the locks in\nexactly the same order.",
    "start": "1030173",
    "end": "1035586"
  },
  {
    "text": "And that will insure there\nare no cycles because you have to go in the same order,\nbut that idea requires",
    "start": "1035586",
    "end": "1042179"
  },
  {
    "text": "you to know beforehand\nwhich data items you wish to gain access to. And that's often not possible\nin many systems in which you",
    "start": "1042180",
    "end": "1050770"
  },
  {
    "text": "care about isolations. So that's usually not adopted\nat least in any database system.",
    "start": "1050770",
    "end": "1056309"
  },
  {
    "text": "OK, so we talked\nabout deadlocks.",
    "start": "1056310",
    "end": "1062240"
  },
  {
    "text": "We talked about when you can\nrelease a lock that you acquire in order to abort because you\ncannot release it typically,",
    "start": "1062240",
    "end": "1070820"
  },
  {
    "text": "in reality, until the\ncommit point is done. The last issue we\nneed to talk about is an interaction\nbetween logs and locks.",
    "start": "1070820",
    "end": "1077414"
  },
  {
    "text": " And this interaction\nhas to do with,",
    "start": "1077415",
    "end": "1083180"
  },
  {
    "text": "so we already saw what\nhappens when you abort. When you abort you need\nto undo so you better make sure that to\ndo the undo you",
    "start": "1083180",
    "end": "1089180"
  },
  {
    "text": "have the locks for\nthose cell items. You don't have to abort\nbut suppose you crash.",
    "start": "1089180",
    "end": "1096070"
  },
  {
    "text": "Suppose the system\ncrashes and recovers. At that point, when\nit recovers, it",
    "start": "1096070",
    "end": "1102750"
  },
  {
    "text": "is going to run a\nrecovery procedure which has some combination\nof redoing the winners and undoing the losers.",
    "start": "1102750",
    "end": "1109491"
  },
  {
    "text": "Now, when it's undoing\nthings and redoing things it needs access to\nitems in the cell store.",
    "start": "1109491",
    "end": "1117300"
  },
  {
    "text": "And we've already seen\nwhen the system is normally running, in order to change\nitems in your cell store you need to gain\naccess to locks.",
    "start": "1117300",
    "end": "1124880"
  },
  {
    "text": "The question now is\nduring crash recovery when the system is running\nthis redo undo thing, where do you get these\nlocks from and do you need",
    "start": "1124880",
    "end": "1133403"
  },
  {
    "text": "to gain access to the locks?  Now, in general, the\nanswer to the question",
    "start": "1133404",
    "end": "1139330"
  },
  {
    "text": "might be that you need\nto be very careful and perhaps need\naccess to the locks when you're running recovery.",
    "start": "1139330",
    "end": "1145370"
  },
  {
    "text": "But there is one simplification\nthat systems typically",
    "start": "1145370",
    "end": "1152309"
  },
  {
    "text": "make that eliminates\nthat requirement. And that simplification is\nthat during crash recovery",
    "start": "1152310",
    "end": "1157539"
  },
  {
    "text": "you don't really allow new\nactions to run on your system. So when a system crashes\nand it is recovering,",
    "start": "1157540",
    "end": "1165040"
  },
  {
    "text": "do not allow new actions to\nrun until recovery is complete. And only then do you\nstart new actions.",
    "start": "1165040",
    "end": "1170522"
  },
  {
    "text": "What this means is\nnow we just have to worry about insuring\nisolation clearly during recovery without\nhaving new actions coming",
    "start": "1170522",
    "end": "1179940"
  },
  {
    "text": "in and muddling things up. The question really\nto think about",
    "start": "1179940",
    "end": "1185030"
  },
  {
    "text": "is whether before the\ncrash, because the log is",
    "start": "1185030",
    "end": "1190240"
  },
  {
    "text": "the only thing you\nhave in order to do recover, whether in\nthe log you actually need to keep track\nof which locks",
    "start": "1190240",
    "end": "1195670"
  },
  {
    "text": "were being held when the\nsystem was running just fine.",
    "start": "1195670",
    "end": "1201340"
  },
  {
    "text": "And if it turns out\nthat the log has to encode in it the locks\nthat were being held, it could be quite complicated\nand a little bit messy.",
    "start": "1201340",
    "end": "1209762"
  },
  {
    "text": "But if you think about\nit, the nice thing is that we don't actually have\nto encode the locks at all, store the locks at all.",
    "start": "1209762",
    "end": "1215059"
  },
  {
    "text": "The locks can be completely\ninvolved in the storage. And that is because\nwhen you start off,",
    "start": "1215060",
    "end": "1220740"
  },
  {
    "text": "when you have a log which\nhas various redo items and undo items, in any\nelement of the log,",
    "start": "1220740",
    "end": "1227520"
  },
  {
    "text": "let's say an item x has been\nupdated in that log entry.",
    "start": "1227520",
    "end": "1232710"
  },
  {
    "text": "Then you know for\nsure that at the time this log entry was\nwritten, the action",
    "start": "1232710",
    "end": "1238539"
  },
  {
    "text": "that was making this update\ndid hold onto this lock and that this change\nbeing made here",
    "start": "1238540",
    "end": "1244350"
  },
  {
    "text": "that got written to the log\nwas, in fact, isolated assuming the locking protocol\nwas correct, was, in fact, isolated from\neverything else concurrently",
    "start": "1244350",
    "end": "1250753"
  },
  {
    "text": "that was going on. And so, although the\nlocks are not explicit,",
    "start": "1250753",
    "end": "1260279"
  },
  {
    "text": "the log encodes in it the actual\nserial order, some serial order of execution that did provide\nisolation before the crash.",
    "start": "1260280",
    "end": "1267320"
  },
  {
    "text": "Therefore, if you just blindly\ngo back through the log and make those changes\nin sequential order",
    "start": "1267320",
    "end": "1274070"
  },
  {
    "text": "then you are assured\nthat the changes you make are, in fact, going to be\nisolated from one another. So you do not\nactually have to worry",
    "start": "1274070",
    "end": "1280160"
  },
  {
    "text": "about storing the locks\nbefore the crash into the log, and that makes\nlife quite simple. ",
    "start": "1280160",
    "end": "1298280"
  },
  {
    "text": "That wraps up the discussion of\natomicity and, in particular,",
    "start": "1298280",
    "end": "1304390"
  },
  {
    "text": "isolations. For the rest of\ntoday and next time we are going to be talking\nabout some uses of atomicity.",
    "start": "1304390",
    "end": "1310805"
  },
  {
    "start": "1310805",
    "end": "1318671"
  },
  {
    "text": "And the plan is the following. The plan is the first\napplication of atomicity which actually is the umbrella\nfor a number of things",
    "start": "1318671",
    "end": "1324890"
  },
  {
    "text": "we are going to be looking\nat is a transaction. And a transaction is\ndefined as an atomic action",
    "start": "1324890",
    "end": "1331680"
  },
  {
    "text": "that has a few other\nproperties that it holds. And the first property\nis consistency",
    "start": "1331680",
    "end": "1339470"
  },
  {
    "text": "and the second\nproperty is durability. ",
    "start": "1339470",
    "end": "1346420"
  },
  {
    "text": "And the second thing we\nare going to look at, next lecture\nactually, is atomicity",
    "start": "1346420",
    "end": "1355419"
  },
  {
    "text": "when you have a\ndistributed system. It is using atomicity\non one computer",
    "start": "1355420",
    "end": "1363510"
  },
  {
    "text": "to build out a system\nthat provides atomicity in a distributed system. ",
    "start": "1363510",
    "end": "1372785"
  },
  {
    "text": "So we will talk about\nconsistency the rest of today and the recitation\nfor tomorrow looks at a paper for reconciling\nreplicas, which",
    "start": "1372785",
    "end": "1379980"
  },
  {
    "text": "is a particular\naspect of consistency. And then next\nlecture next week we will talk about\nmulti-site atomicity.",
    "start": "1379980",
    "end": "1386680"
  },
  {
    "text": "And the recitation next week\nwe will talk about durability. And once we do all of\nthat, that kind of wraps up",
    "start": "1386680",
    "end": "1393690"
  },
  {
    "text": "this fault-tolerance\npart of 6.033.",
    "start": "1393690",
    "end": "1399629"
  },
  {
    "text": "Let me first talk a little\nbit about transactions. ",
    "start": "1399630",
    "end": "1407081"
  },
  {
    "text": "Transaction is an\natomic action that has two other properties\nassociated with it. And people in the literature\noften, in collegial terms,",
    "start": "1407081",
    "end": "1416190"
  },
  {
    "text": "refer to transactions\nas having a property called the ACID\nproperty where ACID stands for atomicity,\nconsistency, isolation",
    "start": "1416190",
    "end": "1425000"
  },
  {
    "text": "and durability. And you will see this\nterm a great deal in the literature and people\nwill use this all the time.",
    "start": "1425000",
    "end": "1430890"
  },
  {
    "text": "And, for various\nreasons, the way we have done things in this\nclass, some of these terms",
    "start": "1430890",
    "end": "1436430"
  },
  {
    "text": "are used in slightly different\nways from the ACID term. When most people, at least\nin distributed systems",
    "start": "1436430",
    "end": "1446340"
  },
  {
    "text": "and database systems, use the\nword atomicity, what they mean is what we meant\nby recoverability.",
    "start": "1446340",
    "end": "1453020"
  },
  {
    "text": "So it is all or nothing. When they use the letter\nI here for isolation, they mean exactly the same\nthing here that we did.",
    "start": "1453020",
    "end": "1460750"
  },
  {
    "text": "And consistency and\ndurability unfortunately are going to mean\nthe exact same thing.",
    "start": "1460750",
    "end": "1466860"
  },
  {
    "text": "But really the\npoint to notice is that these two properties,\natomicity and isolation are things that are\nindependent of an application.",
    "start": "1466860",
    "end": "1476070"
  },
  {
    "text": "They just are properties\nof atomic actions that an atomic action\ncan be recoverable",
    "start": "1476070",
    "end": "1482120"
  },
  {
    "text": "and can be isolated. And you do not have to worry\nabout what the application is. It could be an application\nin database systems.",
    "start": "1482120",
    "end": "1488570"
  },
  {
    "text": "It could be something\nin a processor where you are trying to\nprovide recoverability or isolation for instructions.",
    "start": "1488570",
    "end": "1494530"
  },
  {
    "text": "These are properties\nthat are, in some sense, somewhat more fundamental\nand lower layer properties than these\nother two properties.",
    "start": "1494530",
    "end": "1502310"
  },
  {
    "text": "What consistency\nmeans is the property of an atomic action that is some\napplication-specific invariant.",
    "start": "1502310",
    "end": "1510580"
  },
  {
    "start": "1510580",
    "end": "1517850"
  },
  {
    "text": "Consistency of a\ntransaction says that if you have\na transaction that commits then some set of\nconsistency invariants",
    "start": "1517850",
    "end": "1523990"
  },
  {
    "text": "must hold. I will describe some\nexamples of what this means. Consistent just\nsays that there is",
    "start": "1523990",
    "end": "1530350"
  },
  {
    "text": "some application-specific\ninvariants that must hold. ",
    "start": "1530350",
    "end": "1537480"
  },
  {
    "text": "And durability says that if\na transaction commits then the state changes\nthat it has made,",
    "start": "1537480",
    "end": "1543179"
  },
  {
    "text": "that the data items\nthat it has changed has to last for\nsome period of time.",
    "start": "1543180",
    "end": "1548879"
  },
  {
    "text": "And the period of time\nthat they have to last for is defined by the application. And there are many examples.",
    "start": "1548880",
    "end": "1554710"
  },
  {
    "text": "A simple example\nof durability might be that the changes\nmade by an atomic action just have to last until\nthe entire thread finishes.",
    "start": "1554710",
    "end": "1562590"
  },
  {
    "text": "And, at the other\nextreme, you could get into semantics\nof durability which",
    "start": "1562590",
    "end": "1567950"
  },
  {
    "text": "say that the changes\nmade by an atomic action have to last for three\nyears or for five years or for forever which is a\nreally hard thing to solve.",
    "start": "1567950",
    "end": "1576690"
  },
  {
    "text": "But you might define\nsemantics that relates to the permanence of data. For how long do you\nwant the changes",
    "start": "1576690",
    "end": "1583170"
  },
  {
    "text": "that you made to\nlast and be visible to other atomic actions? ",
    "start": "1583170",
    "end": "1602490"
  },
  {
    "text": "There are two cases\nfor consistency that we need to talk about.",
    "start": "1602490",
    "end": "1609000"
  },
  {
    "text": "The first one is consistency\nin a centralized system. ",
    "start": "1609000",
    "end": "1617790"
  },
  {
    "text": "An example of this, and the\nmost common example of this is in database systems\nthat support transaction",
    "start": "1617790",
    "end": "1624450"
  },
  {
    "text": "where you might have rules\nthat are also called integrity rules for deciding whether\nyou are allowing a transaction",
    "start": "1624450",
    "end": "1636630"
  },
  {
    "text": "to commit or not. Let me give you a couple\nof examples of this. ",
    "start": "1636630",
    "end": "1643140"
  },
  {
    "text": "Let's say that you have\na type of database system",
    "start": "1643140",
    "end": "1648840"
  },
  {
    "text": "as a relational database\nsystem where all of the data is stored in tables.",
    "start": "1648840",
    "end": "1654390"
  },
  {
    "text": "For example, you might have\na table storing a student ID, a student name and\nlet's say the department",
    "start": "1654390",
    "end": "1665030"
  },
  {
    "text": "that the student belongs to. And let's say the\ndepartments have IDs.",
    "start": "1665030",
    "end": "1671760"
  },
  {
    "text": "And you might have another\ntable in your system that stores a department\nID and a department name.",
    "start": "1671760",
    "end": "1682590"
  },
  {
    "text": " Now, you might\nhave a transaction",
    "start": "1682590",
    "end": "1687950"
  },
  {
    "text": "that makes updates to entries\nin this table, you know, one or more rows in this table\ncould actually make updates",
    "start": "1687950",
    "end": "1695240"
  },
  {
    "text": "to just specific\ncells of this table. It could add a new\nstudent ID, add a name",
    "start": "1695240",
    "end": "1702410"
  },
  {
    "text": "and add some department ID. ",
    "start": "1702410",
    "end": "1707508"
  },
  {
    "text": "Now, the kind of constraint\nwe are worried about, the kind of invariants\nwe are worried about are things where the person\nwho has designed this database",
    "start": "1707509",
    "end": "1715700"
  },
  {
    "text": "might say that you are not\nallowed to add a department ID that is nonexistent.",
    "start": "1715700",
    "end": "1722930"
  },
  {
    "text": "And what that means is that\nthere are these two tables. And you should not\nallow any transaction to write the department ID which\nis not already in this table.",
    "start": "1722930",
    "end": "1730260"
  },
  {
    "text": "So if 43 might be in this table\nand 25 might be on this table, but a number that is not in this\ntable should not be added here.",
    "start": "1730260",
    "end": "1738740"
  },
  {
    "text": "And so the transaction\nprocessing system might decide, will, in fact, not\nallow this transaction",
    "start": "1738740",
    "end": "1743910"
  },
  {
    "text": "to commit if it is\nwriting a value that is not in this other table. And, for those familiar with\ndatabases, relation databases,",
    "start": "1743910",
    "end": "1753299"
  },
  {
    "text": "there are these two\ntables called T1 and T2. This might be a primary key. Department ID might\nbe a primary key",
    "start": "1753300",
    "end": "1759880"
  },
  {
    "text": "of T2 defined as what is called\na foreign key in T1, which",
    "start": "1759880",
    "end": "1765120"
  },
  {
    "text": "means that you are not actually\nallowed to add something to a foreign key if\nit is not already in the other table where that\nsame column is a primary key.",
    "start": "1765120",
    "end": "1774850"
  },
  {
    "text": "So there are rules like this\nin most relational database systems and there are\na variety of rules",
    "start": "1774850",
    "end": "1779900"
  },
  {
    "text": "like this that all have to do\nwith maintaining the integrity of the data that you add here.",
    "start": "1779900",
    "end": "1786420"
  },
  {
    "text": "Now, this has nothing\nto do with isolation. It has to do with atomicity\nbecause these rules are",
    "start": "1786420",
    "end": "1793490"
  },
  {
    "text": "typically checked\nat the commit point, because until then\nanything could happen. So, right before\nyou commit, there",
    "start": "1793490",
    "end": "1798610"
  },
  {
    "text": "are these invariants\non the data that are application-specific\nthat you need to check. But it has nothing\nto do with locks.",
    "start": "1798610",
    "end": "1804410"
  },
  {
    "text": "It has nothing to\ndo with anything. It sort of presumes\natomicity, and after that it checks these\napplication-specific rules.",
    "start": "1804410",
    "end": "1810291"
  },
  {
    "text": "And you can get\nquite sophisticated. Some of these things about\nprimary keys and secondary keys are things that are\nchecked by most transaction",
    "start": "1810291",
    "end": "1817510"
  },
  {
    "text": "processing systems, but you\ncould get quite sophisticated about these rules. For example, you\ncould have rules.",
    "start": "1817510",
    "end": "1824529"
  },
  {
    "text": "Let's say you have\na database storing employees and their salaries. You could have rules that\nsay any time an employee gets",
    "start": "1824530",
    "end": "1831960"
  },
  {
    "text": "a raise then everybody\nelse in the same peer group also gets some kind of raise.",
    "start": "1831960",
    "end": "1837900"
  },
  {
    "text": "And so you wouldn't\nallow any transaction to commit that did not insure\nthat invariant to hold.",
    "start": "1837900",
    "end": "1843420"
  },
  {
    "text": "And checking these things\ncould be quite difficult, and most systems do not\nactually do a really good job of checking these things.",
    "start": "1843420",
    "end": "1849760"
  },
  {
    "text": "The sets of rules they\nallow you to write is quite limited because\nchecking it is quite hard, because when you are trying\nto commit a transaction now",
    "start": "1849760",
    "end": "1856691"
  },
  {
    "text": "you might have to check\na large number of rules. And some of them could be both\ntime-consuming and complicated.",
    "start": "1856691",
    "end": "1863179"
  },
  {
    "text": "But the main point here\nis that these rules are application-specific.",
    "start": "1863180",
    "end": "1868550"
  },
  {
    "text": "And that is what defines\nconsistency of the data",
    "start": "1868550",
    "end": "1873650"
  },
  {
    "text": "that you have. The more interesting\ncase for consistency and the thing that\nis going to occupy us",
    "start": "1873650",
    "end": "1881260"
  },
  {
    "text": "for the rest of\ntoday and tomorrow is consistency in\ndistributed systems. ",
    "start": "1881260",
    "end": "1890750"
  },
  {
    "text": "In particular,\nwhen the same data gets distributed, typically\nfor fault-tolerance and for availability, to\ninsure that the data is",
    "start": "1890750",
    "end": "1896790"
  },
  {
    "text": "available at\ndifferent locations, you end up with\nconsistency problems. And we have already seen\na few examples of this.",
    "start": "1896790",
    "end": "1905480"
  },
  {
    "text": "One example of this is in\nthe \"Domain Name System\" which maintains mapping between\ndomain names and IP addresses.",
    "start": "1905480",
    "end": "1913240"
  },
  {
    "text": "And, if you remember, in\norder to achieve availability and good performance,\nthese mappings",
    "start": "1913240",
    "end": "1920200"
  },
  {
    "text": "between DNS names and\nIP addresses where cached essentially on demand.",
    "start": "1920200",
    "end": "1925230"
  },
  {
    "text": "Whenever a name\nserver on the Internet made an access to\nthat name it address",
    "start": "1925230",
    "end": "1930570"
  },
  {
    "text": "cached the mapping results. And so now you\nhave to worry about whether the data that is cached\nsomewhere out on the Internet",
    "start": "1930570",
    "end": "1937450"
  },
  {
    "text": "is, in fact, the correct\ndata where correct is defined as the data that is being\nmaintained by the primary name",
    "start": "1937450",
    "end": "1942530"
  },
  {
    "text": "server. And if you think about\nDNS did, it actually",
    "start": "1942530",
    "end": "1948530"
  },
  {
    "text": "used a mechanism\nof expiration times",
    "start": "1948530",
    "end": "1955870"
  },
  {
    "text": "to keep this cache consistent. And what that means\nis that the only time",
    "start": "1955870",
    "end": "1963020"
  },
  {
    "text": "you are guaranteed that\nthe data in a cache is, in fact, the data that\nis stored at the primary name",
    "start": "1963020",
    "end": "1969260"
  },
  {
    "text": "server for that name is when\nthis expiration time finishes.",
    "start": "1969260",
    "end": "1975740"
  },
  {
    "text": "And the first access\nafter the expiration time requires the name server to go\nto the original primary name",
    "start": "1975740",
    "end": "1981410"
  },
  {
    "text": "server and do a\nlook up of the name. ",
    "start": "1981410",
    "end": "1987646"
  },
  {
    "text": "So the rest of the time you\ncannot actually be guaranteed that the data is consistent. And, in other words,\nyou are not getting",
    "start": "1987646",
    "end": "1995640"
  },
  {
    "text": "what is considered\nstrong consistency.  What is strong consistency?",
    "start": "1995640",
    "end": "2001905"
  },
  {
    "start": "2001905",
    "end": "2007550"
  },
  {
    "text": "One way to define\nthe semantics of what it means for data to be\nconsistent in a distributed",
    "start": "2007550",
    "end": "2013240"
  },
  {
    "text": "system is it is sort of a\nnatural definition which is to see that any time\nyou do a read anywhere,",
    "start": "2013240",
    "end": "2020360"
  },
  {
    "text": "any node does a\nread of some data, read returns the result\nof the late write. ",
    "start": "2020360",
    "end": "2034010"
  },
  {
    "text": "That is one notion\nof consistency. And a system provides\nstrong consistency",
    "start": "2034010",
    "end": "2039530"
  },
  {
    "text": "if you can insure that\nevery read returns the result of the last write\nthat was done on the data.",
    "start": "2039530",
    "end": "2045350"
  },
  {
    "text": " And this is really\nhard to provide",
    "start": "2045350",
    "end": "2050908"
  },
  {
    "text": "because what it typically means\nis that the data is widely",
    "start": "2050909",
    "end": "2056069"
  },
  {
    "text": "replicated or cached. Any time anybody\nchanges the data you have to make sure that all\nof the copies get that change.",
    "start": "2056070",
    "end": "2063024"
  },
  {
    "text": "And, even if you work really\nhard to invalidate all the entries and\nmake changes to it, there are these small windows\nof vulnerability where --",
    "start": "2063025",
    "end": "2069760"
  },
  {
    "text": "In fact, in DNS, for example,\neven the first access that you make the server\nafter the expiration time",
    "start": "2069760",
    "end": "2075158"
  },
  {
    "text": "may not guaranty that\nwhen the response returns, the response is, in\nfact, the newest response because the primary name\nserver could send a response.",
    "start": "2075159",
    "end": "2082638"
  },
  {
    "text": "And, while it is coming back to\nthe person who made the query, the data could get changed\nat the primary name server",
    "start": "2082639",
    "end": "2088560"
  },
  {
    "text": "so it is really hard\nto guaranty this, at all points in time,\nin a distributed system.",
    "start": "2088560",
    "end": "2094364"
  },
  {
    "text": "And it gets much\nharder when there are failures making\ncertain copies unavailable or making access to a primary\nin the DNS case unavailable.",
    "start": "2094364",
    "end": "2101840"
  },
  {
    "text": " In practice, in most\nsystems, the kind",
    "start": "2101840",
    "end": "2107480"
  },
  {
    "text": "of consistency that people try\nto get is eventual consistency",
    "start": "2107480",
    "end": "2114970"
  },
  {
    "text": "or they try to approximate\nstrong consistency in some other way. And eventually\nconsistency just --",
    "start": "2114970",
    "end": "2120730"
  },
  {
    "text": "It is a little bit of a loser\nnotion, but what it says is that there might\nbe periods of time",
    "start": "2120730",
    "end": "2126029"
  },
  {
    "text": "where things are consistent or\nthat the system is doing work in the background to\nmake sure that all",
    "start": "2126030",
    "end": "2132340"
  },
  {
    "text": "of the copies of a given data\nitem are, in fact, the same and are the result of the\nlast write to that data.",
    "start": "2132340",
    "end": "2142442"
  },
  {
    "text": "Again, the notion of\neventual consistency depends a lot on\nthe application. So, really, to specify\nthis precisely you",
    "start": "2142442",
    "end": "2148619"
  },
  {
    "text": "have to look at in the\ncontext of the application. Different applications\nyou have different notions of consistency and\neventual consistency.",
    "start": "2148620",
    "end": "2157670"
  },
  {
    "text": "So we looked at\nDNS as an example. Another example to\nlook at is something",
    "start": "2157670",
    "end": "2163070"
  },
  {
    "text": "you might be familiar with\nwhich is \"Web caches\".",
    "start": "2163070",
    "end": "2170130"
  },
  {
    "text": "Web caches, for example, your\nbrowser has a cache in it. And there might be Web\ncaches located elsewhere",
    "start": "2170130",
    "end": "2176819"
  },
  {
    "text": "in the network that\ncapture your requests. And people use Web\ncaches to save latency",
    "start": "2176820",
    "end": "2182760"
  },
  {
    "text": "or to prevent slamming a Web\nserver that might otherwise",
    "start": "2182760",
    "end": "2187790"
  },
  {
    "text": "get overloaded. The semantics here are\nusually that you do not just",
    "start": "2187790",
    "end": "2195530"
  },
  {
    "text": "return stale data. If the data has changed\non the Web server, it might be that you\nactually want to return",
    "start": "2195530",
    "end": "2200930"
  },
  {
    "text": "good data to the client. The way this is normally\ndone is for the client",
    "start": "2200930",
    "end": "2206640"
  },
  {
    "text": "or for any cache to first\ncheck with the Web server to see if the data\nhas been changed",
    "start": "2206640",
    "end": "2212430"
  },
  {
    "text": "since the last cached version. Let's say that the cache\nwent to the Web server",
    "start": "2212430",
    "end": "2218230"
  },
  {
    "text": "at 9:00 in the morning and had\nto go there because it did not have the data in the cache. And it got some data back.",
    "start": "2218230",
    "end": "2224890"
  },
  {
    "text": "The data has a timestamp on it. Then the next time somebody\nmakes a request to the cache,",
    "start": "2224890",
    "end": "2231880"
  },
  {
    "text": "the cache does not just\nreturn the data immediately. What the cache usually does\nis to go to the Web server",
    "start": "2231880",
    "end": "2237980"
  },
  {
    "text": "and ask the Web server\nif the data has changed since 9:00 in the morning. If the data has changed\nsince 9:00 in the morning",
    "start": "2237980",
    "end": "2243740"
  },
  {
    "text": "you might retrieve the data. You would retrieve the\ndata for the server. If not then go ahead and\nreturn the data to the client.",
    "start": "2243740",
    "end": "2251339"
  },
  {
    "text": "This is also called\n\"If-Modified-Since\"",
    "start": "2251340",
    "end": "2259160"
  },
  {
    "text": "because what you are saying is\nthe cache is telling the server send me the data if it has been\nmodified since the last time I",
    "start": "2259160",
    "end": "2266400"
  },
  {
    "text": "know the version of\nthe data that I have. And a convenient way\nto represent that is as a timestamp.",
    "start": "2266400",
    "end": "2271990"
  },
  {
    "text": "It's just a version of the data. So you can see\nthat this actually provides a more stronger\nconsistency semantics than DNS.",
    "start": "2271990",
    "end": "2279900"
  },
  {
    "text": "Because in DNS the\ndata could have changed and your cache just\nhas outdated data.",
    "start": "2279900",
    "end": "2287800"
  },
  {
    "text": "But for the application\nthat DNS is used for it is perfectly OK for\nthat to be the case.",
    "start": "2287800",
    "end": "2296170"
  },
  {
    "text": "Now, in general, in\ndistributed systems there is a tradeoff\nbetween the consistency",
    "start": "2296170",
    "end": "2301910"
  },
  {
    "text": "of data at the different\nreplicas and availability. Availability just means\nthat clients wanting data",
    "start": "2301910",
    "end": "2309690"
  },
  {
    "text": "should get some\ncopy of the data. Now, if the system is strongly\nconsistent then the copy",
    "start": "2309690",
    "end": "2315540"
  },
  {
    "text": "of data that you\nget is, in fact, the result of the last write.",
    "start": "2315540",
    "end": "2321089"
  },
  {
    "text": "But the tradeoff occurs between\navailability and consistency because in many\ndistributed systems",
    "start": "2321090",
    "end": "2327690"
  },
  {
    "text": "your networks are not reliable\nor nodes themselves are not reliable and they might fail. So in the presence of failures,\nsay network partitions",
    "start": "2327690",
    "end": "2335720"
  },
  {
    "text": "or failures of\nnodes, it turns out to be really hard to guaranty\nboth high availability",
    "start": "2335720",
    "end": "2341660"
  },
  {
    "text": "and strong consistency. As sort of a trivial\nexistent example of this,",
    "start": "2341660",
    "end": "2349410"
  },
  {
    "text": "if you have three\ncopies of the data and you were not very careful\nabout figuring out your",
    "start": "2349410",
    "end": "2356400"
  },
  {
    "text": "write protocol. Let's say that your write\nprotocol was to sort of write to one version and\nthen your read protocol",
    "start": "2356400",
    "end": "2362090"
  },
  {
    "text": "was to just read from\nsome other version and for some process\nin the background to transfer the replica\nfrom the first version",
    "start": "2362090",
    "end": "2369370"
  },
  {
    "text": "that the client wrote to,\nto all of the other copies, then there would be periods\nof time of the network where partitioned you\ncould end up in a situation",
    "start": "2369370",
    "end": "2376350"
  },
  {
    "text": "where the version that a\ngiven client is reading is not actually the last version\nof the data that was written.",
    "start": "2376350",
    "end": "2384289"
  },
  {
    "text": "In fact, if you started thinking\nabout DP2, Design Project 2, really, one part of it gets at\nhow you manage replicated data.",
    "start": "2384290",
    "end": "2394150"
  },
  {
    "text": "For example, when the utility\nthat does the archiving",
    "start": "2394150",
    "end": "2400220"
  },
  {
    "text": "publishes data, one\napproach it might take is to publish the\ndata that it wants",
    "start": "2400220",
    "end": "2405460"
  },
  {
    "text": "to archive to all of the copies,\nto all of the replica machines. And the read protocol might\nbe to read from one of them.",
    "start": "2405460",
    "end": "2415490"
  },
  {
    "text": "Now, if you insure that\nthe write protocol finishes and succeeds only when all\nof the replica machines",
    "start": "2415490",
    "end": "2422609"
  },
  {
    "text": "are updated then you can try\nto get at a decent version of consistency.",
    "start": "2422610",
    "end": "2428089"
  },
  {
    "text": "But you need to be able to\ndo that when failures occur. The network might fail\nor nodes might fail, and you need to figure\nout how to do that.",
    "start": "2428089",
    "end": "2437010"
  },
  {
    "text": "But you might decide that\nwriting to end copies and reading from one copy is\ndifficult or has high overhead",
    "start": "2437010",
    "end": "2443260"
  },
  {
    "text": "so you might think about ways\nof writing to certain subsets, writing to a subset\nof the machines",
    "start": "2443260",
    "end": "2448460"
  },
  {
    "text": "and reading from a\nsubset of the machines to try to see whether\nyou could come up with ways to get a consistent\nversion of the data.",
    "start": "2448460",
    "end": "2458052"
  },
  {
    "text": "Or you might decide that the\nright way to solve the problem is not to try to achieve\nreally strong consistency in all situations but to\nrelax the kind of consistency",
    "start": "2458052",
    "end": "2466750"
  },
  {
    "text": "you want and maybe a different\nversion of semantics. As long as you are precise\nabout the semantics",
    "start": "2466750",
    "end": "2473240"
  },
  {
    "text": "that your system\nprovides, it might be a different solution\nor reasonable solution to the problem. ",
    "start": "2473240",
    "end": "2489519"
  },
  {
    "text": "So one interesting\nway in which people achieve reasonable\nstrong consistency",
    "start": "2489520",
    "end": "2494700"
  },
  {
    "text": "in tightly coupled distributed\nsystems, and distributed systems that are not across the\nInternet where a network could",
    "start": "2494700",
    "end": "2503030"
  },
  {
    "text": "arbitrarily fail, but in\nmore tightly coupled systems is in a multiprocessor.",
    "start": "2503030",
    "end": "2508750"
  },
  {
    "text": " If you have a computer\nthat has many processors --",
    "start": "2508750",
    "end": "2514337"
  },
  {
    "start": "2514337",
    "end": "2524079"
  },
  {
    "text": "And the abstraction here\nfor this multiprocessor is that of shared memory. You actually have memory\nsitting outside here,",
    "start": "2524080",
    "end": "2532890"
  },
  {
    "text": "and these processors\nare reading and writing data to this memory.",
    "start": "2532890",
    "end": "2539070"
  },
  {
    "text": "The latency to get to\nmemory and back is high. So, as you know, processors\nhave caches on them.",
    "start": "2539070",
    "end": "2544740"
  },
  {
    "start": "2544740",
    "end": "2551810"
  },
  {
    "text": "As long as the memory locations\nthat are being written and read",
    "start": "2551810",
    "end": "2558640"
  },
  {
    "text": "are not shared between\nthem these caches could function just fine. And when there is an\ninstruction running",
    "start": "2558640",
    "end": "2564440"
  },
  {
    "text": "on one of these processors that\nwants to access some memory location, you could just\nread and write from the cache",
    "start": "2564440",
    "end": "2570730"
  },
  {
    "text": "so things would just work out. The problem arises when there\nis a memory location being",
    "start": "2570730",
    "end": "2577119"
  },
  {
    "text": "read here that\nactually was previously written by this processor.",
    "start": "2577120",
    "end": "2583270"
  },
  {
    "text": "And, if you read\nit here, then you might get an old\nversion of the data. And if you think of just memory\nas the basic abstraction,",
    "start": "2583270",
    "end": "2592520"
  },
  {
    "text": "virtual memory then\nthis is bad semantics because your programs wouldn't\nfunction the same way as they",
    "start": "2592520",
    "end": "2598210"
  },
  {
    "text": "did when you just\nhad one processor or when you didn't\nhave the caches at all and you just went\ndirectly to memory",
    "start": "2598210",
    "end": "2604500"
  },
  {
    "text": "from multiple processors. The question is how do you know\nwhether the data in a cache",
    "start": "2604500",
    "end": "2611740"
  },
  {
    "text": "is good or bad? Now, like in the Web caches\ncase, checking on every access",
    "start": "2611740",
    "end": "2617940"
  },
  {
    "text": "whether the data\nhas changed is not going to be useful here\nbecause the amount of work it takes to check something is\nabout the same as the amount",
    "start": "2617940",
    "end": "2625210"
  },
  {
    "text": "of work it takes to\nread or write something because you have taken\nthe latency hit for that.",
    "start": "2625210",
    "end": "2631350"
  },
  {
    "text": "So that approach is\nnot going to work. The solution that is\nfollowed in many systems",
    "start": "2631350",
    "end": "2638980"
  },
  {
    "text": "is to use two ideas. The first idea is that\nof a \"Write-Thru Cache\". What a write-thru\ncache says is if there",
    "start": "2638980",
    "end": "2645710"
  },
  {
    "text": "is a write that happens\nhere, or store instruction,",
    "start": "2645710",
    "end": "2652580"
  },
  {
    "text": "the cache gets updated. But, in addition to the\ncache getting updated, the data also gets\nwritten through",
    "start": "2652580",
    "end": "2658960"
  },
  {
    "text": "on the bus to the\nmemory location here. So that is the first idea,\nto use a write-thru cache.",
    "start": "2658960",
    "end": "2668150"
  },
  {
    "start": "2668150",
    "end": "2678390"
  },
  {
    "text": "The second is because this\nis a bus all of these nodes",
    "start": "2678390",
    "end": "2683569"
  },
  {
    "text": "can actually snoop\non this bus and see what activity there is on the\nbus because it is a shared bus. It is a very special kind\nof network, as I said.",
    "start": "2683570",
    "end": "2690009"
  },
  {
    "text": "You cannot apply\nthis idea in general. It is a very special\nkind of network where because it is a\nbus and nothing fails,",
    "start": "2690010",
    "end": "2695252"
  },
  {
    "text": "or the assumption\nis nothing fails, everybody can check to see\nwhat is going on on the bus.",
    "start": "2695252",
    "end": "2700619"
  },
  {
    "text": "And any time there is any\nactivity on the bus that corresponds to something that\nis stored in any node's cache",
    "start": "2700620",
    "end": "2706720"
  },
  {
    "text": "you can do two things. You can actually\ninvalidate that cache entry but you can actually also see\nwhat the update is and go ahead",
    "start": "2706720",
    "end": "2714590"
  },
  {
    "text": "and look at the change\nthat was being done and update your cache.",
    "start": "2714590",
    "end": "2719609"
  },
  {
    "text": "And this idea is sometimes\ncalled a \"Snoopy Cache\" because you have\nthese caches that are snooping on activity that\nis occurring in your system.",
    "start": "2719610",
    "end": "2729380"
  },
  {
    "text": " And this is one way in which\nyou can achieve something that",
    "start": "2729380",
    "end": "2734880"
  },
  {
    "text": "resembles strong consistency. But it actually turns out,\nif you think hard about it, a precise version of\nstrong consistency",
    "start": "2734880",
    "end": "2741437"
  },
  {
    "text": "is really hard to achieve. In fact, it is very,\nvery hard to even define what it means for\nany read to see",
    "start": "2741437",
    "end": "2749100"
  },
  {
    "text": "the result of the last\nwrite because when you have multiple people\nreading and writing things,",
    "start": "2749100",
    "end": "2754190"
  },
  {
    "text": "when you get down to\nthe instruction level, it turns out to be really\nhard to even define the right semantics.",
    "start": "2754190",
    "end": "2759370"
  },
  {
    "text": "A lot of people are working\non this kind of thing. But this is a little\nbit of a special case",
    "start": "2759370",
    "end": "2766100"
  },
  {
    "text": "because this kind of\nsolution applies only in a very tightly coupled\nsystem where you do not really",
    "start": "2766100",
    "end": "2771240"
  },
  {
    "text": "have failures and everybody\ncan listen to everything else. But it is interesting\nto note that there",
    "start": "2771240",
    "end": "2776900"
  },
  {
    "text": "are cases when\nyou can achieve it and that is why\nthis is interesting. It is practically useful. ",
    "start": "2776900",
    "end": "2786549"
  },
  {
    "text": "So the main thing\nabout Design Project 2",
    "start": "2786550",
    "end": "2791780"
  },
  {
    "text": "that relates to the\nconsistency discussion is for you to try to, I mean\nat least one part of it, in case it was not clear from\nthe description of the project",
    "start": "2791780",
    "end": "2800340"
  },
  {
    "text": "is for you to think about what\nkind of consistency you want and come up with ways to manage\nthese different replicas.",
    "start": "2800340",
    "end": "2806950"
  },
  {
    "text": "We are going to stop here. Next week we will talk\nabout multi-site atomicity.",
    "start": "2806950",
    "end": "2812599"
  },
  {
    "text": "Tomorrow's recitation\nis on a system called Unison which also looks\nat consistency when you have",
    "start": "2812600",
    "end": "2818130"
  },
  {
    "text": "mobile computers that are\ntrying to synchronize data with servers. ",
    "start": "2818130",
    "end": "2828677"
  }
]