[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6360"
  },
  {
    "text": "continue to offer high-quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6360",
    "end": "13339"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13340",
    "end": "21720"
  },
  {
    "text": "PROFESSOR: All right, welcome\nto the final lecture of 6046. Today we continue our theme\nof cache oblivious algorithms.",
    "start": "21720",
    "end": "28617"
  },
  {
    "text": "We're going to look\nat two of the most basic problems in\ncomputer science-- searching and sorting,\na little bit of each.",
    "start": "28617",
    "end": "36079"
  },
  {
    "text": "And then I'll tell you a\nlittle bit about what class you might take after this one.",
    "start": "36080",
    "end": "41449"
  },
  {
    "text": "So brief recap of the model,\nwe introduced two models of computation although one was\njust a variation of the other.",
    "start": "41450",
    "end": "48430"
  },
  {
    "text": "The base model is an\nexternal memory model. This is a two-level\nmemory hierarchy.",
    "start": "48430",
    "end": "53820"
  },
  {
    "text": "CPU and cache, we view as one. So there's instant\ncommunication between them, which means what\nyou're computing on",
    "start": "53820",
    "end": "60760"
  },
  {
    "text": "can involve this cache of size\nm-- total size of the cache is m-- words.",
    "start": "60760",
    "end": "67320"
  },
  {
    "text": "The cache is divided into\nthese blocks of size b each. So they're m over b blocks.",
    "start": "67320",
    "end": "74110"
  },
  {
    "text": "And your problem doesn't\nfit here, presumably, or the problem's not\nvery interesting.",
    "start": "74110",
    "end": "79729"
  },
  {
    "text": "So your problem size n is\ngoing to require storing your information on disk. So the input is really\nprovided over here.",
    "start": "79730",
    "end": "86400"
  },
  {
    "text": "Disk is basically\ninfinite in size. It's also partitioned\ninto blocks. And you can't access\nindividual items here.",
    "start": "86400",
    "end": "92930"
  },
  {
    "text": "You can only access\nentire blocks. So the model is you say,\nI want to read this block and put it here.",
    "start": "92930",
    "end": "98670"
  },
  {
    "text": "I want to write this\nblock out and put it here. That's what you're allowed to\ndo in the external memory model. And what we count is how many\nblock-memory transfers we do.",
    "start": "98670",
    "end": "106609"
  },
  {
    "text": "We call those memory transfers. So you want to minimize that. And usually you\ndon't worry too much about what happens in here,\nalthough you could also",
    "start": "106609",
    "end": "113575"
  },
  {
    "text": "minimize regular running\ntime as we usually do. The cache oblivious variation\nis that the algorithm is not",
    "start": "113575",
    "end": "120260"
  },
  {
    "text": "allowed to know the\ncache parameters. It's not allowed to\nknow the block size. Sorry, it's also block\nsize b in the disk.",
    "start": "120260",
    "end": "126700"
  },
  {
    "text": "So they match. And you're not allowed to\nknow the cache size, m.",
    "start": "126700",
    "end": "133150"
  },
  {
    "text": "Because of that, all the\nblock reads and writes are done automatically. So the model is, whenever\nyou access an item,",
    "start": "133150",
    "end": "140190"
  },
  {
    "text": "you view the disk\nas just written row by row-- sequentially\nblock by block.",
    "start": "140190",
    "end": "145569"
  },
  {
    "text": "So in linear eyes, it looks like\nthis, partitioned into blocks.",
    "start": "145570",
    "end": "150610"
  },
  {
    "text": "And so whenever\nyou touch an item, the system automatically\nloads that block. If it's not already in\ncache, it loads it in.",
    "start": "150610",
    "end": "157520"
  },
  {
    "text": "If it's already in\ncache, it's free. When you load a block\nin, you probably",
    "start": "157520",
    "end": "163042"
  },
  {
    "text": "already have something there. So if the cache is\nalready full, you have to decide\nwhich one to evict.",
    "start": "163042",
    "end": "168250"
  },
  {
    "text": "And we had a couple\nof strategies. But the one I defined was the\nleast-recently-used block. So whichever one in the\ncache that's least recently",
    "start": "168250",
    "end": "175290"
  },
  {
    "text": "been used by the\nCPU, that's the one that gets written\nout, back to disk where it originally came from.",
    "start": "175290",
    "end": "181460"
  },
  {
    "text": "And that's it. That's the model. OK, this is a pretty good\nmodel of how real caches work.",
    "start": "181460",
    "end": "188970"
  },
  {
    "text": "Although this last part is\nnot how all real caches work. It's close.",
    "start": "188970",
    "end": "194280"
  },
  {
    "text": "And at the very end, I\nmentioned this theorem that Why LRU is good.",
    "start": "194280",
    "end": "200610"
  },
  {
    "text": "And if you take\nthe number of block evictions-- the\nnumber of block reads,",
    "start": "200610",
    "end": "208930"
  },
  {
    "text": "equivalently-- then LRU has\nto do on a cache of size m.",
    "start": "208930",
    "end": "214530"
  },
  {
    "text": "Then that's going to be,\nat most, twice whatever the best possible\nthing you could do",
    "start": "214530",
    "end": "220260"
  },
  {
    "text": "is given a cache\nof size m over 2. So we're restricting OPT. We're kind of tying OPT's hands\nbehind his back a little bit",
    "start": "220260",
    "end": "227680"
  },
  {
    "text": "by decreasing m\nby a factor of 2. But then we get a factor of\n2 approximation, basically.",
    "start": "227680",
    "end": "233150"
  },
  {
    "text": "So this was the\nresource augmentation. And this is regular\napproximation algorithms. In general, this is a world\ncalled online algorithms, which",
    "start": "233150",
    "end": "242880"
  },
  {
    "text": "is a whole field. I'm just going to\nmention it briefly here.",
    "start": "242880",
    "end": "249430"
  },
  {
    "text": "The distinction here\nis LRU, or whatever we implement in a\nreal system, has to make a decision based only\non the past of what's happened.",
    "start": "249430",
    "end": "259359"
  },
  {
    "text": "The system, we're assuming,\ndoesn't know the future. So in a compiler, maybe you\ncould try to predict the future",
    "start": "259360",
    "end": "265789"
  },
  {
    "text": "and do something. But on a CPU, it\ndoesn't know what instruction's going to come\nnext, 10 steps in the future.",
    "start": "265790",
    "end": "272039"
  },
  {
    "text": "So you just have to\nmake a decision now, sort of your best guess. And least recently used\nis a good best guess.",
    "start": "272040",
    "end": "278490"
  },
  {
    "text": "OPT, on the other hand,\nwe're giving a lot of power. This is what we call\nan offline algorithm.",
    "start": "278490",
    "end": "284245"
  },
  {
    "text": " It's like the Q in Star\nTrek: Next Generation",
    "start": "284245",
    "end": "290879"
  },
  {
    "text": "or some other mythical being. It lives outside\nof the timeline. It can see all of time and say,\nI think I'll evict this block.",
    "start": "290880",
    "end": "298910"
  },
  {
    "text": "This is like the waste\nof Q's resources. But I'll evict this\nblock because I know it's going to be used\nfor this in the future.",
    "start": "298910",
    "end": "305880"
  },
  {
    "text": "LRU is evicting the thing that\nwas used farthest in the past. There's a difference there.",
    "start": "305880",
    "end": "311380"
  },
  {
    "text": "And it could be\na big difference. But it turns out they're\nrelated in this way. So this is what we call\nan online algorithm,",
    "start": "311380",
    "end": "317830"
  },
  {
    "text": "meaning you have to make\ndecisions as you go. The offline algorithm\ngets to see the future and optimize accordingly.",
    "start": "317830",
    "end": "324000"
  },
  {
    "text": "Both are computable, but this\none's only computable if you know the future, which we don't.",
    "start": "324000",
    "end": "329169"
  },
  {
    "text": " What I haven't done\nis prove this theorem. It's actually really easy proof.",
    "start": "329170",
    "end": "337015"
  },
  {
    "text": "So let's do it.  I want to take the timeline\nand divide it into phases.",
    "start": "337015",
    "end": "351612"
  },
  {
    "text": "Phases sounds cool. ",
    "start": "351612",
    "end": "372312"
  },
  {
    "text": "So this is going\nto be an analysis. And in an analysis,\nwe're allowed to know the future because\nwe're trying to imagine what",
    "start": "372312",
    "end": "377630"
  },
  {
    "text": "OPT could do relative to LRU. So we're fixing the algorithm. It's obviously not\nusing the future. When we analyze it, we're\nassuming we do know the future.",
    "start": "377631",
    "end": "384340"
  },
  {
    "text": "We know the entire timeline. So all the algorithms\nwe covered last time, all the ones we covered today\nyou can think of as just making",
    "start": "384340",
    "end": "390340"
  },
  {
    "text": "a sequence of accesses. They're making sequences\nof accesses to elements. But if we assume\nwe know what b is,",
    "start": "390341",
    "end": "398130"
  },
  {
    "text": "that's just a sequence\nof accesses to blocks. OK so you can just\nthink of the timeline",
    "start": "398130",
    "end": "403590"
  },
  {
    "text": "as a sequence of block IDs. And if you access a block that's\ncurrently stored in cache,",
    "start": "403590",
    "end": "410680"
  },
  {
    "text": "it's free. Otherwise, you pay 1. All right, so I'm just going\nto look at the timeline of all",
    "start": "410680",
    "end": "415970"
  },
  {
    "text": "these accesses and say, well,\ntake a prefix of the accesses",
    "start": "415970",
    "end": "421530"
  },
  {
    "text": "until I get to m over b\ndistinct blocks, block IDs.",
    "start": "421530",
    "end": "428639"
  },
  {
    "text": "Keep going until,\nif I went one more, I'd have m over b plus\n1 distinct blocks.",
    "start": "428640",
    "end": "434229"
  },
  {
    "text": "So it's a maximal prefix of\nm over b distinct blocks. Cut there. And then repeat.",
    "start": "434230",
    "end": "439939"
  },
  {
    "text": "So start over. Start counting at zero. Extend until I have m over\nb distinct block accesses.",
    "start": "439940",
    "end": "446400"
  },
  {
    "text": "And if I went one more, I'd\nhave m over b plus 1 and so on. So the timeline gets divided.",
    "start": "446400",
    "end": "452159"
  },
  {
    "text": "Who knows? It could be totally irregular. If you access the same\nblocks many times, you could get along for a\nvery long time and only access",
    "start": "452160",
    "end": "460150"
  },
  {
    "text": "m over b distinct blocks. Who knows? The algorithm\ndefinitely doesn't know because it doesn't know m or b. But from an analysis\nperspective,",
    "start": "460150",
    "end": "466570"
  },
  {
    "text": "we can just count these things. So each of these has exactly\nm over b distinct accesses,",
    "start": "466570",
    "end": "475990"
  },
  {
    "text": "distinct block IDs. So I have two claims\nabout such a phase.",
    "start": "475990",
    "end": "485610"
  },
  {
    "text": "First claim is that LRU with\na cache of size m on one phase",
    "start": "485610",
    "end": "497939"
  },
  {
    "text": "is, at most, what? ",
    "start": "497940",
    "end": "504410"
  },
  {
    "text": "It's easy.  STUDENT: M over b.",
    "start": "504410",
    "end": "509496"
  },
  {
    "text": "PROFESSOR: M over b.  The claim is, at most,\nm over b basically",
    "start": "509497",
    "end": "516690"
  },
  {
    "text": "because the LRU\nis not brain dead. ",
    "start": "516690",
    "end": "521789"
  },
  {
    "text": "Well, you're accessing\nthese blocks. And they've all been\naccessed more recently.",
    "start": "521789",
    "end": "527480"
  },
  {
    "text": "I mean, let's look\nat this phase. All the blocks\nthat you touch here have been accessed more recently\nthan whatever came before.",
    "start": "527480",
    "end": "532570"
  },
  {
    "text": "That's the definition\nof this timeline. This is an order by time. So anything you\nload in here, you",
    "start": "532570",
    "end": "537980"
  },
  {
    "text": "will keep preferentially\nover the things that are not in the phase because\neverything in the phase has been accessed more recently.",
    "start": "537980",
    "end": "544190"
  },
  {
    "text": "So maybe, eventually, you\nload all m over b blocks that are in the phase.",
    "start": "544190",
    "end": "549269"
  },
  {
    "text": "Everything else you touch,\nby definition of a phase, are the same blocks. So they will remain in cache.",
    "start": "549270",
    "end": "555400"
  },
  {
    "text": "And that's all it\nwill cost, m over b memory transfers per phase. So this is basically ignoring\nany carry over from phase",
    "start": "555400",
    "end": "562351"
  },
  {
    "text": "to phase. This is a conservative\nupper bounds. But it's an upper bounds.",
    "start": "562351",
    "end": "568237"
  },
  {
    "text": "And then the other question\nis, what could OPT do? ",
    "start": "568237",
    "end": "577260"
  },
  {
    "text": "So OPT-- remember, we're tying\nits hands behind its back. It only has a cache\nof size m over 2.",
    "start": "577260",
    "end": "584834"
  },
  {
    "text": "And then we're\nevaluating on a phase. ",
    "start": "584834",
    "end": "590290"
  },
  {
    "text": "I want to claim that OPT is,\nwell, at least half of that if I want to get a factor of 2.",
    "start": "590290",
    "end": "595650"
  },
  {
    "text": " So I claim it's at\nleast 1/2 m over b.",
    "start": "595650",
    "end": "603700"
  },
  {
    "text": "Why? Now we have to think\nabout carry over. So OPT did something\nin this phase.",
    "start": "603700",
    "end": "611019"
  },
  {
    "text": "And then we're wondering what\nhappens in the very next phase. So some of these blocks may\nbe shared with these blocks.",
    "start": "611019",
    "end": "616520"
  },
  {
    "text": "We don't know. I mean, there's\nsome set of blocks. We know that this very first\nblock was not in the set,",
    "start": "616520",
    "end": "621589"
  },
  {
    "text": "otherwise the phase\nwould have been longer. But maybe some\nlater block happens to repeat some block\nthat's over there.",
    "start": "621590",
    "end": "627105"
  },
  {
    "text": "We don't really know. There could be some carry over. So how lucky could OPT be? At this moment in\ntime, at the beginning",
    "start": "627105",
    "end": "634770"
  },
  {
    "text": "of the phase we're\nlooking at, it could be the entire cache\nhas things that we want,",
    "start": "634770",
    "end": "641060"
  },
  {
    "text": "has blocks that\nappear in this phase. That's the maximum carry\nover, the entire cache.",
    "start": "641060",
    "end": "647800"
  },
  {
    "text": "So sort of the best case for\nOPT is that the entire cache",
    "start": "647800",
    "end": "656750"
  },
  {
    "text": "is useful, meaning it\ncontains blocks in the phase",
    "start": "656750",
    "end": "668067"
  },
  {
    "text": "that we're interested in--\nthe phase we're looking at-- at the start of the phase. ",
    "start": "668067",
    "end": "676845"
  },
  {
    "text": "That's the best case. But because we gave up only m\nover 2, that means, at most,",
    "start": "676845",
    "end": "683639"
  },
  {
    "text": "one half m over b blocks. This was cache size. This is the number of\nblocks in the cache.",
    "start": "683640",
    "end": "690140"
  },
  {
    "text": " At most, this many\nblocks will be free,",
    "start": "690140",
    "end": "696790"
  },
  {
    "text": "won't cost anything for OPT. But by definition, the phase\nhas m over b distinct blocks.",
    "start": "696790",
    "end": "703242"
  },
  {
    "text": "So half of them will be free. The other half, OPT is\ngoing to have to load in. So it's a kind of\ntrivial analysis.",
    "start": "703242",
    "end": "710500"
  },
  {
    "text": "It's amazing this\nproof is so simple. It's all about setting\nthings up right.",
    "start": "710500",
    "end": "716519"
  },
  {
    "text": "If you define phases\nthat are good for LRU, then they're also\nbad for OPT when",
    "start": "716520",
    "end": "721545"
  },
  {
    "text": "it has cache at half the size. And so OPT has to pay\nat least half what LRU is definitely paying.",
    "start": "721545",
    "end": "727560"
  },
  {
    "text": "Here we can forget\nabout carry over. Here we're bounding\nthe carry over just by making the cache smaller.",
    "start": "727560",
    "end": "732920"
  },
  {
    "text": "That's it. So this is a most twice that. And so we get the theorem.",
    "start": "732920",
    "end": "739230"
  },
  {
    "text": "I mean, changing the cache\nsize could dramatically change the number of cache\nreads that you have to do",
    "start": "739230",
    "end": "745010"
  },
  {
    "text": "or disk reads it you\nhave to do into cache. But in all of the\nalgorithms we will cover,",
    "start": "745010",
    "end": "752360"
  },
  {
    "text": "we're giving some\nbound in terms of m. That bound will\nalways be, at most, some polynomial dependence in m.",
    "start": "752360",
    "end": "758850"
  },
  {
    "text": "Usually it's like a 1 over\nm, 1 over square root of m, 1 over log m,\nsomething like that.",
    "start": "758850",
    "end": "765089"
  },
  {
    "text": "All of those bounds\nwill only be affected by a constant factor when you\nchange m by a constant factor.",
    "start": "765090",
    "end": "770610"
  },
  {
    "text": "So this is good enough for\ncache oblivious algorithms. ",
    "start": "770610",
    "end": "776820"
  },
  {
    "text": "All right, so that's\nsort of review of why this model is reasonable.",
    "start": "776820",
    "end": "782580"
  },
  {
    "text": "LRU is good. So now we're going to talk about\ntwo basic problems-- searching",
    "start": "782580",
    "end": "788030"
  },
  {
    "text": "for stuff in array, sorting an\narray in both of these models.",
    "start": "788030",
    "end": "793986"
  },
  {
    "text": "We won't be able to\ndo everything cache obliviously today. But they're are all possible. It just takes more\ntime than we have.",
    "start": "793986",
    "end": "801510"
  },
  {
    "text": "We'll give you more of a flavor\nof how these things work. Again, the theme is going to\nbe divide and conquer, my glass",
    "start": "801510",
    "end": "808141"
  },
  {
    "text": "class. ",
    "start": "808141",
    "end": "817240"
  },
  {
    "text": "So let's say we have n elements. Let's say, for simplicity,\nwe're in the comparison models.",
    "start": "817240",
    "end": "823007"
  },
  {
    "text": "So all we can really\ndo with those elements is compare them-- less\nthan, greater than, equal. ",
    "start": "823007",
    "end": "829670"
  },
  {
    "text": "And let's say we\nwant to do search in the comparison model, which\nI'll think of as a predecessor",
    "start": "829670",
    "end": "835601"
  },
  {
    "text": "search. ",
    "start": "835601",
    "end": "841769"
  },
  {
    "text": "So given a new element\nx, I want to find, what is the previous element? What's the largest element\nsmaller than x in my set?",
    "start": "841770",
    "end": "849520"
  },
  {
    "text": "I'm thinking of these n\nelements as static, let's say. You can generalize\neverything I say to have",
    "start": "849520",
    "end": "855990"
  },
  {
    "text": "insertions and deletions. But let's not worry\nabout that for now.",
    "start": "855990",
    "end": "862030"
  },
  {
    "text": "I just want to\nstore them somehow in order to enable search. So any suggestions in external\nmemory model or cache oblivious",
    "start": "862030",
    "end": "870810"
  },
  {
    "text": "model? How would you do this? [STUDENT COUGHS] ",
    "start": "870810",
    "end": "878490"
  },
  {
    "text": "This may sound\neasy, but it's not. But that's OK. You know, I like easy\nanswers, simple answers.",
    "start": "878490",
    "end": "884370"
  },
  {
    "text": " There's two simple answers. One is correct, one is wrong.",
    "start": "884370",
    "end": "891160"
  },
  {
    "text": "But I like both, so I\nwant to analyze both. Yeah? STUDENT: Store them\nsorted in order?",
    "start": "891160",
    "end": "898740"
  },
  {
    "text": "PROFESSOR: Store them\nsorted in order, good. That's how we'd normally\nsolve this problem. So let's see how it does.",
    "start": "898740",
    "end": "904850"
  },
  {
    "text": " I thought I had\nsolution, too, here.",
    "start": "904850",
    "end": "910540"
  },
  {
    "text": "But that's OK. Binary search in a sorted array,\nsort the elements in order.",
    "start": "910540",
    "end": "925960"
  },
  {
    "text": "And then to do a query,\nbinary search on it. So you remember binary search. You've got an array.",
    "start": "925960",
    "end": "932050"
  },
  {
    "text": "You start in the middle. Then let's say the element\nlooking for is way over here. So then we'll go over this way\nand go there, this way, there,",
    "start": "932050",
    "end": "940930"
  },
  {
    "text": "this way, log n time. I mean, binary search\nis, in a certain sense,",
    "start": "940930",
    "end": "947039"
  },
  {
    "text": "a divide and conquer algorithm. You only recurse on one side,\nbut it's divide and conquer. So divide and conquer is good.",
    "start": "947039",
    "end": "953180"
  },
  {
    "text": "Surely binary search is good. If only it were that simple.",
    "start": "953180",
    "end": "958190"
  },
  {
    "text": "So sort of orthogonal\nto this picture-- maybe I'll just draw\nit on one side--",
    "start": "958190",
    "end": "963620"
  },
  {
    "text": "there's a division into blocks. And in a cache\noblivious setting, we don't know where that falls.",
    "start": "963620",
    "end": "970120"
  },
  {
    "text": "But the point is,\nfor the most part, every one of these\naccesses we do",
    "start": "970120",
    "end": "977345"
  },
  {
    "text": "as we go farther and farther to\nthe right-- almost all of them will be in a different block.",
    "start": "977345",
    "end": "982860"
  },
  {
    "text": "The middle one is very far\naway from the 3/4 mark. It is very far away from\nthe 7/8 mark, and so on,",
    "start": "982860",
    "end": "988800"
  },
  {
    "text": "up until the very end. Let's say we're\nsearching for the max. So this will hold\nfor all of them. At the end, once we're within\na problem of size order b,",
    "start": "988800",
    "end": "998425"
  },
  {
    "text": "then there's only a\nconstant number of blocks that we're touching. And so from then on, everything\nwill be free, basically.",
    "start": "998425",
    "end": "1004440"
  },
  {
    "text": "So if you think\nabout it carefully, the obvious upper\nbound-- this is",
    "start": "1004440",
    "end": "1011040"
  },
  {
    "text": "our usual recurrence for binary\nsearch-- would be constant.",
    "start": "1011040",
    "end": "1019074"
  },
  {
    "text": "And what we hope to gain here\nis, basically, a better base case. And I claim that all you\nget in terms of base case here is t of b equals order 1.",
    "start": "1019074",
    "end": "1028349"
  },
  {
    "text": "And, if you think\nabout it, this just solves to log n\nminus log b, which",
    "start": "1028349",
    "end": "1036369"
  },
  {
    "text": "is the same thing as\nlog n over b, which",
    "start": "1036369",
    "end": "1042089"
  },
  {
    "text": "is a small improvement\nover just regular log n but not a big improvement. I claim we can do better.",
    "start": "1042089",
    "end": "1049992"
  },
  {
    "text": "You've actually seen\nhow to do better.  But maybe we didn't tell you.",
    "start": "1049992",
    "end": "1057140"
  },
  {
    "text": "So it's a data structure you've\nseen already-- b tree, yeah. ",
    "start": "1057140",
    "end": "1067809"
  },
  {
    "text": "So because we weren't thinking\nabout this memory hierarchy business when we\nsaid b tree, we meant",
    "start": "1067810",
    "end": "1074300"
  },
  {
    "text": "like 2-4 trees or 5-10\ntrees or some constant bound",
    "start": "1074300",
    "end": "1080520"
  },
  {
    "text": "on the degree of each node. But if you make the degree of\nthe node b-- or some theta b,",
    "start": "1080520",
    "end": "1088740"
  },
  {
    "text": "b approximate-- so you allow\na big branching factor. It's got to be somewhere, let's\nsay, between b over 2 and b.",
    "start": "1088740",
    "end": "1096340"
  },
  {
    "text": "Then we can store all of these\npointers and all of these keys in a constant number of blocks.",
    "start": "1096340",
    "end": "1101790"
  },
  {
    "text": "And so if we're doing just\nsearch, as we navigate down the b tree we'll spend\norder 1 block reads",
    "start": "1101790",
    "end": "1110220"
  },
  {
    "text": "to load in this node and then\nfigure out which way to go. And then let's\nsay it's this way. And then we'll spend\norder 1 memory transfers",
    "start": "1110220",
    "end": "1117320"
  },
  {
    "text": "to read this node then\nfigure out which way to go. So the cost is going to be\nproportional to the height of the tree, which is\njust log base b of n",
    "start": "1117320",
    "end": "1128050"
  },
  {
    "text": "up to the constant\nfactors because we're between b over 2 and b.",
    "start": "1128050",
    "end": "1133090"
  },
  {
    "text": "But that will affect\nthis by a factor of 2. ",
    "start": "1133090",
    "end": "1138760"
  },
  {
    "text": "So we can do search in\na b tree in the log base b of n memory transfers.",
    "start": "1138760",
    "end": "1144419"
  },
  {
    "start": "1144420",
    "end": "1151900"
  },
  {
    "text": "OK, remember, log base b of\nn is log n divided by log b.",
    "start": "1151900",
    "end": "1159310"
  },
  {
    "text": "So this is a lot better. Here we had log n minus log b. Now we have log n\ndivided by log b.",
    "start": "1159310",
    "end": "1164910"
  },
  {
    "text": "And this turns\nout to be optimal. In the comparison model, this\nis the best you can hope to do,",
    "start": "1164910",
    "end": "1170809"
  },
  {
    "text": "so good news. The bad news is we kind\nof critically needed",
    "start": "1170810",
    "end": "1176054"
  },
  {
    "text": "to know what b was. ",
    "start": "1176054",
    "end": "1181539"
  },
  {
    "text": "B trees really only make\nsense if you what b is. You need to know the\nbranching factor.",
    "start": "1181540",
    "end": "1188309"
  },
  {
    "text": "So this is not a cache\noblivious data structure. But it has other nice things. We can actually do inserts\nand deletes, as well.",
    "start": "1188310",
    "end": "1193770"
  },
  {
    "text": "So I said static, but if\nyou want dynamic insert and deleting elements, you\ncan also do those in log base",
    "start": "1193770",
    "end": "1198850"
  },
  {
    "text": "b of n memory transfers using\nexactly the algorithms we've seen with splits and merges. So all that's good.",
    "start": "1198850",
    "end": "1204700"
  },
  {
    "text": " But I want to do it cache\nobviously-- just the search",
    "start": "1204700",
    "end": "1211760"
  },
  {
    "text": "for now. ",
    "start": "1211760",
    "end": "1217400"
  },
  {
    "text": "And this is not obvious. But it's our good\nfriend van Emde Boas.",
    "start": "1217400",
    "end": "1222580"
  },
  {
    "start": "1222580",
    "end": "1231419"
  },
  {
    "text": "So despite the name, this\nis not a data structure that van Emde Boas.",
    "start": "1231420",
    "end": "1237720"
  },
  {
    "text": "But it's inspired by the data\nstructure that we covered. And it's actually a solution\nby Harold [INAUDIBLE],",
    "start": "1237720",
    "end": "1244350"
  },
  {
    "text": "who did the m-edge\nthesis on this work. In the conclusion, it's\nlike, oh, by the way, here's how you do search.",
    "start": "1244350",
    "end": "1249950"
  },
  {
    "text": "It seems like the best\npage of that thesis. And then I think we called\nit van Emde Boas because we",
    "start": "1249950",
    "end": "1256330"
  },
  {
    "text": "thought it was reminiscent. So here's the idea.",
    "start": "1256330",
    "end": "1261960"
  },
  {
    "text": "Take all the items\nyou want to store. And you're really tempted to\nstore them in sorted order, but I'm not going to do that.",
    "start": "1261960",
    "end": "1267820"
  },
  {
    "text": "I'm going to use some other\ndivide and conquer order. First thing I'm going to\ndo is take those elements, put them in a perfectly\nbalanced binary search tree.",
    "start": "1267820",
    "end": "1276280"
  },
  {
    "text": "So this is a BSTT-- not a\nb tree, just a binary tree",
    "start": "1276280",
    "end": "1281780"
  },
  {
    "text": "because I don't know what b is. So then maybe the\nmedian's up here. And then there's two\nchildren and so on.",
    "start": "1281780",
    "end": "1289200"
  },
  {
    "text": "OK, the mean's over here. The max is over\nhere, a regular BST. Now we know how to\nsearch in a tree.",
    "start": "1289200",
    "end": "1294360"
  },
  {
    "text": "You just walk down. The big question\nis, in what order should I store these nodes?",
    "start": "1294360",
    "end": "1300755"
  },
  {
    "text": "If I just store them\nin a random order, this is going to be super\nbad-- log n memory transfers.",
    "start": "1300755",
    "end": "1305790"
  },
  {
    "text": "But I claim, if I\ndo a clever order, I can achieve log base b\nof n, which is optimal.",
    "start": "1305790",
    "end": "1312320"
  },
  {
    "text": "So van Emde Boas suggests\ncutting this tree",
    "start": "1312320",
    "end": "1319220"
  },
  {
    "text": "in the middle. Why in the middle? This was n nodes over here.",
    "start": "1319220",
    "end": "1324730"
  },
  {
    "text": "And we're breaking it up\ninto a square root of n nodes at the top because the height\nof this overall tree is log n.",
    "start": "1324730",
    "end": "1334530"
  },
  {
    "text": "If we split it in half,\nthe height of the tree is half log n. 2 to the half log n is root n.",
    "start": "1334530",
    "end": "1341310"
  },
  {
    "text": "I'm losing some\nconstant factors, but let's just call it root n. Then we've got, at the bottom,\neverything looks the same.",
    "start": "1341310",
    "end": "1347649"
  },
  {
    "text": "We're going to have a whole\nbunch of trees of size square root of n, hopefully.",
    "start": "1347650",
    "end": "1355780"
  },
  {
    "text": "OK, that's what happens when\nI cut in the middle level.",
    "start": "1355780",
    "end": "1361340"
  },
  {
    "text": "Then I recurse. And what am I recursing? What am I doing? This is a layout.",
    "start": "1361340",
    "end": "1367060"
  },
  {
    "text": "Last time, we did a very\nsimilar thing with matrices. We had an n by n matrix.",
    "start": "1367060",
    "end": "1372210"
  },
  {
    "text": "We divided it into four n\nover 2 by n over 2 matrices. We recursively laid out the\n1/4, wrote those out in order",
    "start": "1372210",
    "end": "1380530"
  },
  {
    "text": "so it was consecutive. Then we laid out the next\nquarter, next quarter, next quarter. The order of the\nquarters didn't matter.",
    "start": "1380530",
    "end": "1387240"
  },
  {
    "text": "What mattered is that\neach quarter of the matrix was stored as a consecutive\nunit so when recursed, good things happened.",
    "start": "1387240",
    "end": "1393150"
  },
  {
    "text": "Same thing here, except now\nI have roughly square root of n plus 1.",
    "start": "1393150",
    "end": "1398720"
  },
  {
    "text": "Chunks, little\ntriangles-- I'm going to recursively lay them out. ",
    "start": "1398720",
    "end": "1412590"
  },
  {
    "text": "And then I'm going to\nconcatenate those layouts. So this one, I'm going\nto recursively figure out",
    "start": "1412590",
    "end": "1418879"
  },
  {
    "text": "what order to store those\nnodes and then put those all as consecutive in the array. And then this one goes here.",
    "start": "1418880",
    "end": "1425750"
  },
  {
    "text": "This one goes here. Actually, the order\ndoesn't matter. But you might as well\npreserve the order.",
    "start": "1425750",
    "end": "1431260"
  },
  {
    "text": "So do the top one, then\nthe bottom ones in order. And so, recursively,\neach of these ones",
    "start": "1431260",
    "end": "1436930"
  },
  {
    "text": "is going to get\ncut in the middle. Recursively lay out the\ntop, then the next one. Let's do an example. ",
    "start": "1436930",
    "end": "1451940"
  },
  {
    "text": "Let's do an actual tree. This is actually my favorite\ndiagram to draw or something.",
    "start": "1451940",
    "end": "1460350"
  },
  {
    "text": "My most frequently drawn\ndiagram, complete binary tree",
    "start": "1460350",
    "end": "1467580"
  },
  {
    "text": "on eight children, eight leaves. So this is 15 nodes.",
    "start": "1467580",
    "end": "1473156"
  },
  {
    "text": "It happens to have a\nheight that's a power of 2, so this algorithm\nworks especially well. So I'm going to\nsplit it in half,",
    "start": "1473156",
    "end": "1479800"
  },
  {
    "text": "then recursively\nlay out the top. To lay out the top, I'm\ngoing to split it in half. Then I'm going to\nrecursively lay out the top.",
    "start": "1479800",
    "end": "1485260"
  },
  {
    "text": "Well, single node-- it's pretty\nclear what order to put it in with respect to itself. So that goes first,\nthen this, then this.",
    "start": "1485260",
    "end": "1493740"
  },
  {
    "text": "Then I finish the\nfirst recursion. Next, I'm going to\nrecursively lay out this thing",
    "start": "1493740",
    "end": "1499800"
  },
  {
    "text": "by cutting it in\nhalf, laying out the top, then the bottom parts. OK, then I'm going to\nrecursively layout this-- 7, 8,",
    "start": "1499800",
    "end": "1509150"
  },
  {
    "text": "9, 10, 11, 12, 13, 14, 15.",
    "start": "1509150",
    "end": "1516530"
  },
  {
    "text": "It gets even more exciting\nthe next level up. But it would take a\nlong time to draw this.",
    "start": "1516530",
    "end": "1522030"
  },
  {
    "text": "But just imagine this repeated. So that would be just the\ntop half of some tree. Cut here, and then you\ndo the same thing here",
    "start": "1522030",
    "end": "1529450"
  },
  {
    "text": "and here and here. This is very different\nfrom in-order traversal or any other order\nthat we've seen. This is the van Emde Boas order.",
    "start": "1529450",
    "end": "1537159"
  },
  {
    "text": "And this numbering is\nsupposed to be the order that I store the nodes. So when I write\nthis into memory,",
    "start": "1537160",
    "end": "1542299"
  },
  {
    "text": "it's going to look like this--\njust the nodes in order. And when I'm drawing\na circle-- wow,",
    "start": "1542300",
    "end": "1548757"
  },
  {
    "text": "this is going to get tedious.  And then there's pointers here.",
    "start": "1548757",
    "end": "1554732"
  },
  {
    "text": "Every time I draw\na circle, there's a left pointer and\na right pointer. So 1's going to\npoint to 2 and 3.",
    "start": "1554732",
    "end": "1560380"
  },
  {
    "text": "2 is going to point to 4 and 7. So just take the regular\nbinary search tree,",
    "start": "1560380",
    "end": "1566690"
  },
  {
    "text": "but store it in this\nreally weird order. I claim this will work really\nwell, log base b of n search.",
    "start": "1566690",
    "end": "1573750"
  },
  {
    "text": "Let's analyze it. ",
    "start": "1573750",
    "end": "1578850"
  },
  {
    "text": "Good first time, this is\na cache oblivious layout. I didn't use b at all. There's no b here.",
    "start": "1578850",
    "end": "1584380"
  },
  {
    "text": "Start with a binary tree. And I just do this recursion. It gives me a linear\norder to put the nodes in.",
    "start": "1584380",
    "end": "1590539"
  },
  {
    "text": "I'm just going to store\nthem in that order. It's linear size, all that. ",
    "start": "1590539",
    "end": "1598630"
  },
  {
    "text": "Now in the analysis, again,\nI'm allowed to know b. So let's say b is b.",
    "start": "1598630",
    "end": "1605735"
  },
  {
    "text": "And let's consider the\nlevel of recursion.",
    "start": "1605735",
    "end": "1611179"
  },
  {
    "start": "1611180",
    "end": "1618070"
  },
  {
    "text": "Let's say the first\nlevel of recursion, where the triangles have less\nthan or equal to b nodes.",
    "start": "1618070",
    "end": "1629030"
  },
  {
    "text": "So I'm thinking of this picture. I cut in the middle. Then I recursively cut in\nthe middle of all the pieces.",
    "start": "1629030",
    "end": "1635755"
  },
  {
    "text": "Then I recursively\ncut in the middle. I started out with a\nheight of log n and size n.",
    "start": "1635755",
    "end": "1642320"
  },
  {
    "text": "I keep cutting, basically\nsquare rooting the size. At some point, when I\ncut, I get triangles",
    "start": "1642320",
    "end": "1648030"
  },
  {
    "text": "that are size, at\nmost, square root of b. So the tree now will\nlook-- actually,",
    "start": "1648030",
    "end": "1657832"
  },
  {
    "text": "let me draw a bigger picture. ",
    "start": "1657832",
    "end": "1675670"
  },
  {
    "text": "Let's start down here. So I've got triangle less\nthan or equal to b, triangle less than or equal to b.",
    "start": "1675670",
    "end": "1681429"
  },
  {
    "start": "1681430",
    "end": "1727650"
  },
  {
    "text": "This is some attempt\nto draw a general tree. And first we cut in\nthe middle level.",
    "start": "1727650",
    "end": "1733865"
  },
  {
    "text": "Then we cut in\nthe middle levels. And let's say, at that moment,\nall of the leftover trees",
    "start": "1733865",
    "end": "1739480"
  },
  {
    "text": "have, at most, b nodes in them. It's going to happen\nat some point. It's going to happen\nafter roughly log n minus",
    "start": "1739480",
    "end": "1748780"
  },
  {
    "text": "log b levels of recursion. The heights here will\nbe roughly log b.",
    "start": "1748780",
    "end": "1754580"
  },
  {
    "text": " We keep cutting in half,\nstill with height log b.",
    "start": "1754580",
    "end": "1759800"
  },
  {
    "text": "Then we know the size of it's b.  OK, so this is a picture\nthat exists in some sense.",
    "start": "1759800",
    "end": "1766920"
  },
  {
    "text": "What we know is that\neach of these triangles is stored consecutively. By this recursive\nlayout, we guarantee",
    "start": "1766920",
    "end": "1774440"
  },
  {
    "text": "that, at any level of\nrecursion, each chunk is stored consecutively.",
    "start": "1774440",
    "end": "1780400"
  },
  {
    "text": "So, in particular, this\nlevel-- level b-- is nice.",
    "start": "1780400",
    "end": "1787020"
  },
  {
    "text": "So what that tells us is that\neach triangle with, at most, b elements is\nconsecutive, which means",
    "start": "1787020",
    "end": "1800790"
  },
  {
    "text": "it occupies at most two blocks.",
    "start": "1800790",
    "end": "1807280"
  },
  {
    "text": "If we're lucky, it's one. But if we're unlucky in\nterms of-- here's memory. Here's how it's\nsplit into blocks.",
    "start": "1807280",
    "end": "1813600"
  },
  {
    "text": "Maybe it's consecutive, but\nit crosses a block boundary.",
    "start": "1813600",
    "end": "1819260"
  },
  {
    "text": "But the distance between\nthese two lines is b and b. And the length of\nthe blue thing is b.",
    "start": "1819260",
    "end": "1826210"
  },
  {
    "text": "So you can only cross one line. So you fit in two blocks. Each of these triangles\nfits in two blocks.",
    "start": "1826210",
    "end": "1832809"
  },
  {
    "text": "Now, let's think about\nsearch algorithm. We're going to do regular binary\nsearch in a binary search tree.",
    "start": "1832810",
    "end": "1840100"
  },
  {
    "text": "We start at the root. We compare to x. We go left to right. Then we go left to\nright, left to right.",
    "start": "1840100",
    "end": "1845260"
  },
  {
    "text": "Eventually we find the\npredecessor or the successor or, ideally, the element\nwe're actually searching for.",
    "start": "1845260",
    "end": "1850590"
  },
  {
    "text": "And so what we're\ndoing is following some root-to-node\npath in the tree.",
    "start": "1850590",
    "end": "1859210"
  },
  {
    "text": "Maybe we stop early. In the worst case,\nwe go down to a leaf. But it's a vertical path. You only go down.",
    "start": "1859210",
    "end": "1866500"
  },
  {
    "text": "Over here, same thing. Let's say, because these\nare the ones I drew,",
    "start": "1866500",
    "end": "1871900"
  },
  {
    "text": "you go here somewhere. ",
    "start": "1871900",
    "end": "1877830"
  },
  {
    "text": "But in general, you're following\nsome root-to-node path. And you're visiting some\nsequence of triangles.",
    "start": "1877830",
    "end": "1885990"
  },
  {
    "text": "Each triangle fits in,\nbasically, one block. Let's assume, as usual,\nm over b is at least two.",
    "start": "1885990",
    "end": "1892679"
  },
  {
    "text": "So you can store at\nleast two blocks, which means, once you\nstart touching a triangle, all further touches are free. The first one, you have\nto pay the load in,",
    "start": "1892679",
    "end": "1899310"
  },
  {
    "text": "maybe these two blocks. Every subsequent touch as you\ngo down this path is free. Then you go to a new triangle.",
    "start": "1899310",
    "end": "1905960"
  },
  {
    "text": "That could be somewhere\ncompletely different. We don't really now, but\nit's some other two blocks. And as long as you stay within\nthe triangle, it's free.",
    "start": "1905960",
    "end": "1913250"
  },
  {
    "text": "So the cost is going to be,\nat most, twice the number of triangles that you visit.",
    "start": "1913250",
    "end": "1918650"
  },
  {
    "text": " MTN is going to be, at\nmost, twice the number",
    "start": "1918650",
    "end": "1927610"
  },
  {
    "text": "of triangles visited\nby a root-to-node path,",
    "start": "1927610",
    "end": "1936350"
  },
  {
    "text": "a downward path in the\nbinary search tree. ",
    "start": "1936350",
    "end": "1942840"
  },
  {
    "text": "OK, now to figure\nthat out we need not only an upper bound on how\nbig the triangles are but also a lower bound.",
    "start": "1942840",
    "end": "1948809"
  },
  {
    "text": "I said the height of\nthe tree is about log b. It's close. Maybe you have\ntriangles of size b",
    "start": "1948810",
    "end": "1955620"
  },
  {
    "text": "plus 1, which is a\nlittle bit too big. So let's think about that case. You have b plus 1 nodes.",
    "start": "1955620",
    "end": "1962820"
  },
  {
    "text": "And then you end up cutting\nin the middle level. So before, you had a height of\nalmost log b-- slightly more",
    "start": "1962820",
    "end": "1969400"
  },
  {
    "text": "than log b. Then, when you cut it\nin half, the new heights will be half log b.",
    "start": "1969400",
    "end": "1976360"
  },
  {
    "text": "And then you'll have\nonly square root of b items in the triangle. So that may seem problematic.",
    "start": "1976360",
    "end": "1982179"
  },
  {
    "text": "These things are, at most, b. They're also at\nleast square root b. ",
    "start": "1982180",
    "end": "1989180"
  },
  {
    "text": "The height of a\ntriangle at this level",
    "start": "1989180",
    "end": "1995360"
  },
  {
    "text": "is somewhere between\nhalf log b and log b.",
    "start": "1995360",
    "end": "2001975"
  },
  {
    "text": " Basically, we're binary\nsearching on height. We're stopping when\nwe divide it by 2.",
    "start": "2001975",
    "end": "2008840"
  },
  {
    "text": "And we get something less\nthan log B in height. Luckily, we only\ncare about heights.",
    "start": "2008840",
    "end": "2014490"
  },
  {
    "text": "We don't care that there's\nonly root b items here. That may seem inefficient, but\nbecause everything's in a log",
    "start": "2014490",
    "end": "2019720"
  },
  {
    "text": "here-- because we\nonly care about log b in the running time, and\nwe're basically approximating",
    "start": "2019720",
    "end": "2025150"
  },
  {
    "text": "log b within a factor\nof 2-- everything's going to work up to\nconstant factors.",
    "start": "2025150",
    "end": "2030860"
  },
  {
    "text": "In other words, if\nyou look at this path, we know the length\nof the path is log n. We know the height of\neach of these triangles",
    "start": "2030860",
    "end": "2038399"
  },
  {
    "text": "is at least half log b. That means the number\nof triangles you visit",
    "start": "2038400",
    "end": "2043490"
  },
  {
    "text": "is log n divided by half log b.",
    "start": "2043490",
    "end": "2052040"
  },
  {
    "start": "2052040",
    "end": "2066320"
  },
  {
    "text": "And the length of\nthe path is log n.",
    "start": "2066320",
    "end": "2073030"
  },
  {
    "text": "So the number of triangles on\nthe path is, at most, log n",
    "start": "2073030",
    "end": "2082210"
  },
  {
    "text": "divided by how much progress we\nmake for each triangle, which is half log b-- also known\nas 2 times log base b of n.",
    "start": "2082210",
    "end": "2090960"
  },
  {
    "text": " And then we get the\nnumber of memory transfers",
    "start": "2090960",
    "end": "2096739"
  },
  {
    "text": "is, at most, twice that. So the number of memory\ntransfers is going to be,",
    "start": "2096739",
    "end": "2102080"
  },
  {
    "text": "at most, 4 times\nlog base b of n. ",
    "start": "2102080",
    "end": "2107550"
  },
  {
    "text": "And that's order log base\nb of n, which is optimal. Now we don't need to know b.",
    "start": "2107550",
    "end": "2113890"
  },
  {
    "text": " How's that for a cheat?",
    "start": "2113890",
    "end": "2120350"
  },
  {
    "text": "So we get optimal running time,\nexcept for the constant factor. Admittedly, this is not perfect.",
    "start": "2120350",
    "end": "2125840"
  },
  {
    "text": "B trees get basically 1\ntimes log base b of n. This cache oblivious binary\nsearch gives you 4 times",
    "start": "2125840",
    "end": "2133270"
  },
  {
    "text": "log base b of n. But this was a rough analysis. You can actually get that\ndown to like 1.4 times",
    "start": "2133270",
    "end": "2139880"
  },
  {
    "text": "log base b of n. And that's tight. So you can't do quite\nas well with cache oblivious as external\nmemory but close.",
    "start": "2139880",
    "end": "2148850"
  },
  {
    "text": "And that's sort\nof the story here. If you ignore constant\nfactors, all is good. In practice, where\nyou potentially",
    "start": "2148850",
    "end": "2154670"
  },
  {
    "text": "win is that, if you designed\na b tree for specific b, you're going to do really great\nfor that level of the memory",
    "start": "2154670",
    "end": "2160950"
  },
  {
    "text": "hierarchy. But in reality, there's many\nlevels to the memory hierarchy. They all matter. Cache oblivious is\ngoing to win a lot",
    "start": "2160950",
    "end": "2167440"
  },
  {
    "text": "because it's optimal at\nall levels simultaneously. It's really hard to\nbuild a b tree that's optimal for many values\nof b simultaneously.",
    "start": "2167440",
    "end": "2174220"
  },
  {
    "text": " OK so that is search.",
    "start": "2174220",
    "end": "2180490"
  },
  {
    "text": "Any questions before\nwe go on to source? [STUDENTS COUGHING]",
    "start": "2180490",
    "end": "2186160"
  },
  {
    "text": " One obvious question\nis, what about dynamic?",
    "start": "2186160",
    "end": "2191190"
  },
  {
    "text": "Again, I said static. Obviously the elements\naren't changing here. Just doing search\nin log base b of n,",
    "start": "2191190",
    "end": "2198244"
  },
  {
    "text": "it turns out you can do insert,\ndelete, and search in log base b of n memory transfers\nper operation.",
    "start": "2198245",
    "end": "2209119"
  },
  {
    "text": "This was my first result\nin cache oblivious land. It's when I met Charles\nLeiserson, actually.",
    "start": "2209120",
    "end": "2215440"
  },
  {
    "start": "2215440",
    "end": "2231960"
  },
  {
    "text": "But I'm not going to cover it. If you want to know how, you\nshould take 6851, Advanced Data Structures, which talks about\nall sorts of things like this",
    "start": "2231960",
    "end": "2239510"
  },
  {
    "text": "but dynamic.  It turns out there's a lot more\nto say about this universe.",
    "start": "2239510",
    "end": "2250359"
  },
  {
    "text": "And I want to go in to sorting\ninstead of talking about how to make that dynamic because,\noh, OK, search log base",
    "start": "2250360",
    "end": "2256310"
  },
  {
    "text": "b of n, that was optimal. I said, oh, you can also do\ninsert and delete in log base b of n. It turns out that's not optimal.",
    "start": "2256310",
    "end": "2263440"
  },
  {
    "text": "It's as good as b trees. But you can do better. B trees are not good at updates.",
    "start": "2263440",
    "end": "2269560"
  },
  {
    "text": "And if you've ever worked with\na database, you may know this. If you have a lot of updates,\nb trees are really slow.",
    "start": "2269560",
    "end": "2274800"
  },
  {
    "text": "They're good for searches,\nnot good for updates. You can do a lot better. And that will be\nexhibited by sorting.",
    "start": "2274800",
    "end": "2281819"
  },
  {
    "text": "So sorting-- I think\nyou know the problem. You're given n elements in an\narray in some arbitrary order.",
    "start": "2281820",
    "end": "2287316"
  },
  {
    "text": "You want to put them\ninto sorted order. Or, equivalently, you want to\nput them into a van Emde Boas order. Once their sorted, it's\nnot too hard to transfer",
    "start": "2287316",
    "end": "2294010"
  },
  {
    "text": "into this order. So you can do search\nfast or whatever. Sorting is a very basic\nthing we like to do.",
    "start": "2294010",
    "end": "2301080"
  },
  {
    "text": "And the obvious way\nto sort when you have, basically, a-- let's pretend\nwe have this b tree data",
    "start": "2301080",
    "end": "2307950"
  },
  {
    "text": "structure, cache oblivious even. Or we just use regular b trees. Let's use regular b trees. Forget about cache oblivious.",
    "start": "2307950",
    "end": "2313230"
  },
  {
    "text": "External memory, we\nknow how to do b trees. We know how to\ninsert into a b tree. So the obvious way to sort is to\ndo n inserts into, if you want,",
    "start": "2313230",
    "end": "2326700"
  },
  {
    "text": "a cache oblivious b tree\nor just a regular b tree. How long does that take?",
    "start": "2326700",
    "end": "2332990"
  },
  {
    "text": "N times log base b of n. ",
    "start": "2332990",
    "end": "2345290"
  },
  {
    "text": "It sounds OK. But it's not optimal. It's actually really slow\ncompared to what you can do.",
    "start": "2345290",
    "end": "2352145"
  },
  {
    "text": "You can do, roughly,\na factor of b faster. ",
    "start": "2352145",
    "end": "2359109"
  },
  {
    "text": "But it's the best we\nknow how to do so far. So the goal is to do better. And, basically, what's going\non is we can do inserts.",
    "start": "2359109",
    "end": "2365640"
  },
  {
    "text": "In this universe, we can\ndo inserts and deletes faster than we can do searches,\nwhich is a little weird.",
    "start": "2365640",
    "end": "2372570"
  },
  {
    "text": "It will become clearer\nas we go through. So what's another\nnatural way to sort?",
    "start": "2372570",
    "end": "2379370"
  },
  {
    "text": "What means to sorting\nalgorithm that we've covered are optimal in\nthe comparison model? STUDENT: Merge sort.",
    "start": "2379370",
    "end": "2385151"
  },
  {
    "text": "PROFESSOR: Merge sort,\nthat's a good one. We could do quick\nsort, too, I guess. I'll stick to merge sort.",
    "start": "2385152",
    "end": "2391490"
  },
  {
    "text": "Merge sort's nice because\nA, it's divide and conquer. And we like divide and conquer. It seems to work,\nif we do it right.",
    "start": "2391490",
    "end": "2398570"
  },
  {
    "text": "And it's also cache oblivious. There's no b in merge sort. We didn't even know what b was. So great, merge sort\nis divide and conquer",
    "start": "2398570",
    "end": "2405645"
  },
  {
    "text": "and cache oblivious. So how much does it cost? Well, let's think\nabout merge sort.",
    "start": "2405645",
    "end": "2411020"
  },
  {
    "text": "You take an array. You divide it in half. That takes zero time.",
    "start": "2411020",
    "end": "2416569"
  },
  {
    "text": "That's just a conceptual thing. You recursively sort this part. You recursively sort this part. That looks good because\nthose items are consecutive.",
    "start": "2416570",
    "end": "2423560"
  },
  {
    "text": "So that recursion is going\nto be an honest to goodness recursion on an array. So we can write a recurrence.",
    "start": "2423560",
    "end": "2430470"
  },
  {
    "text": "And then we have to\nmerge the two parts. So in merge, we take the\nfirst element of each guy.",
    "start": "2430470",
    "end": "2436710"
  },
  {
    "text": "We compare them,\noutput one of them, advance that one, compare,\noutput one of them, advance that guy.",
    "start": "2436710",
    "end": "2443789"
  },
  {
    "text": "That's three parallel scans. We're scanning in this array. We're scanning in this array.",
    "start": "2443790",
    "end": "2448920"
  },
  {
    "text": "We're always advancing\nforward, which means as long as we\nstore the first block",
    "start": "2448920",
    "end": "2454505"
  },
  {
    "text": "of this guy and the first\nblock of this guy who knows how it's aligned-- But we'll read these\nitems one by one",
    "start": "2454505",
    "end": "2462470"
  },
  {
    "text": "until we finish that block. Then we'll just read the next\nblock, read those one by one.",
    "start": "2462470",
    "end": "2467890"
  },
  {
    "text": "And similarly for\nthe output array, we first start filling a block. Once it's filled, we\ncan kick that one out",
    "start": "2467890",
    "end": "2474660"
  },
  {
    "text": "and read the next one. As long as m over\nb is at least 3, we can afford this\nthree-parallel scan.",
    "start": "2474660",
    "end": "2483199"
  },
  {
    "text": "It's not really parallel. It's more like inter-leaf scans. But we're basically\nscanning in here while we're also\nscanning in here",
    "start": "2483199",
    "end": "2489414"
  },
  {
    "text": "and scanning in\nthe output array. And we can merge\ntwo sorted arrays",
    "start": "2489414",
    "end": "2495400"
  },
  {
    "text": "into a new sorted array in\nscan time, n over be plus 1.",
    "start": "2495400",
    "end": "2502319"
  },
  {
    "text": "So that means the number\nof memory transfers",
    "start": "2502320",
    "end": "2508710"
  },
  {
    "text": "is 2 times the number of memory\ntransfers for half the size, like regular merge sort,\nplus n over b plus 1.",
    "start": "2508710",
    "end": "2518960"
  },
  {
    "text": "That's our recurrence. Now we just need to solve it. Well, before we solve\nit, in this case we always have to be\ncareful with the base case.",
    "start": "2518960",
    "end": "2527390"
  },
  {
    "text": "Base case is MT of m.",
    "start": "2527390",
    "end": "2532433"
  },
  {
    "text": "This is the best base\ncase we could use. Let's use it. When I reach an array of size\nm, I read the whole thing.",
    "start": "2532434",
    "end": "2540860"
  },
  {
    "text": "And then that's all I can pay. So I won't incur any\nmore cost as long",
    "start": "2540860",
    "end": "2545980"
  },
  {
    "text": "as I stay within that\nregion of size m. Maybe I should put\nsome constant times m because this is not in\nplace algorithm, so maybe",
    "start": "2545980",
    "end": "2554020"
  },
  {
    "text": "1/3 m something. As long as I'm not too\nclose to the cache size,",
    "start": "2554020",
    "end": "2559630"
  },
  {
    "text": "I will only pay m over\nb memory transfers.  So far so good.",
    "start": "2559630",
    "end": "2565170"
  },
  {
    "start": "2565170",
    "end": "2575450"
  },
  {
    "text": "Now we just solve\nthe recurrence. This is a nice recurrence,\nvery similar to the old merge-sort recurrence.",
    "start": "2575450",
    "end": "2581660"
  },
  {
    "text": "We just have a different\nthing in the additive term. And we have a\ndifferent base case. The way I like to\nsolve nice recurrences",
    "start": "2581660",
    "end": "2588360"
  },
  {
    "text": "is with recursion trees. This is actually a trick I\nlearned by teaching this class. Before this, cache oblivious\nwas really painful to me",
    "start": "2588360",
    "end": "2594960"
  },
  {
    "text": "because I could never\nsolve the currencies. Then I thought the class and\nwas like, oh, this is easy. I hope the same\ntransformation happens to you.",
    "start": "2594960",
    "end": "2601840"
  },
  {
    "text": "You'll see how easy it is\nonce we do this example. ",
    "start": "2601840",
    "end": "2608400"
  },
  {
    "text": "OK, this is merge sort. Remember recursion\ntree, in every node you put the additive cost\nso that, if you added up",
    "start": "2608400",
    "end": "2617220"
  },
  {
    "text": "the cost of all of\nthese nodes, you would get the total\nvalue of this expands to because we're\nbasically making",
    "start": "2617220",
    "end": "2622970"
  },
  {
    "text": "two children of size n over 2. And then we're\nputting, at the root, this cost, which means, if\nyou add up all of these nodes,",
    "start": "2622970",
    "end": "2631020"
  },
  {
    "text": "you're getting all\nof these costs. And that's the total cost. So it's n over b at the top.",
    "start": "2631020",
    "end": "2636440"
  },
  {
    "text": "Then it's going to be n over\n2 divided by b and so on. I'm omitting the plus\n1 just for cleanliness.",
    "start": "2636440",
    "end": "2642290"
  },
  {
    "text": "You'd actually have to count. And this keeps going until\nwe hit the base case.",
    "start": "2642290",
    "end": "2647660"
  },
  {
    "text": "This is where\nthings are a little different from\nregular merge sort, other than the divided by b.",
    "start": "2647660",
    "end": "2653360"
  },
  {
    "text": "We stop when we reach\nsomething at size m. So at the leaf level,\nwe have something",
    "start": "2653360",
    "end": "2658690"
  },
  {
    "text": "of size m, which\nmeans we basically have m over b in each leaf.",
    "start": "2658690",
    "end": "2664355"
  },
  {
    "text": "And then we should think about\nhow many leaves there are. ",
    "start": "2664355",
    "end": "2673020"
  },
  {
    "text": "This is just n over\nm leaves, I guess. There's lots of\nways to see that.",
    "start": "2673020",
    "end": "2678650"
  },
  {
    "text": "One way to think about it\nis we're conserving mass. We started with n items. Split it in half,\nsplit it in half.",
    "start": "2678650",
    "end": "2684370"
  },
  {
    "text": "So the number of items\nis remaining fixed. Then at the bottom\nwe have m items. And so the number of leaves\nhas to be exactly n over m",
    "start": "2684370",
    "end": "2691280"
  },
  {
    "text": "because the total should be n. You can also think of it as\n2 to the power log of that.",
    "start": "2691280",
    "end": "2698309"
  },
  {
    "text": "We have, usually, log n levels. But we're cutting off\na log m at the bottom. So it's log n minus\nlog m as the height.",
    "start": "2698310",
    "end": "2706240"
  },
  {
    "text": "I'll actually need that. The height of this tree is\nlog n minus log m, also known",
    "start": "2706240",
    "end": "2714040"
  },
  {
    "text": "as log n/m.  OK, so we've drawn this tree.",
    "start": "2714040",
    "end": "2721140"
  },
  {
    "text": "Now, what we usually do\nis add up level by level. That usually gives\na very clean answer.",
    "start": "2721140",
    "end": "2726290"
  },
  {
    "text": "So we add up the top level. That's n over b. We add up the second level. That's n over b, by\nconservation of mass",
    "start": "2726290",
    "end": "2733660"
  },
  {
    "text": "again and because this\nwas a linear function. So each level, in fact, is going\nto be exactly n over b cost.",
    "start": "2733660",
    "end": "2741604"
  },
  {
    "text": "We should be a little\ncareful about the bottom because the base\ncase-- I mean, it happens that the base\ncase matches this. But it's always good practice\nto think about the leaf level",
    "start": "2741604",
    "end": "2748938"
  },
  {
    "text": "separately. But the leaf level is just\nm over b times n over m The m's cancel, so m\nover b times n over m.",
    "start": "2748938",
    "end": "2760720"
  },
  {
    "text": "This is n over b. So every level is n over b.",
    "start": "2760720",
    "end": "2766632"
  },
  {
    "text": "The number of levels\nis log of n over m. ",
    "start": "2766632",
    "end": "2774660"
  },
  {
    "text": "Cool. So the number of\nmemory transfers is just the product\nof those two things.",
    "start": "2774660",
    "end": "2780150"
  },
  {
    "text": " It's n over b times\nthat log, log n over m.",
    "start": "2780150",
    "end": "2791720"
  },
  {
    "text": "Now let's compare.  That's sorting.",
    "start": "2791720",
    "end": "2797559"
  },
  {
    "text": "Over here, we had a running\ntime of n times log base b of n. ",
    "start": "2797560",
    "end": "2804430"
  },
  {
    "text": "So this is n log n\ndivided by log b.",
    "start": "2804430",
    "end": "2811619"
  },
  {
    "text": "Log base b is the same\nas dividing by log b. So n log n divided by log--\nwe had regular sorting time.",
    "start": "2811620",
    "end": "2817130"
  },
  {
    "text": "And then we divided by log b. Over here, we have basically\nregular sorting time.",
    "start": "2817130",
    "end": "2822860"
  },
  {
    "text": "But now we're dividing by b. That's a huge improvement-- a\nb divided by log b improvement.",
    "start": "2822860",
    "end": "2830840"
  },
  {
    "text": "I mean, think of the b\nbeing like a million. So before we were dividing\nby 20, which is OK.",
    "start": "2830840",
    "end": "2838569"
  },
  {
    "text": "But now we're\ndividing by a million. That's better. So this way of sorting\nis so much better",
    "start": "2838570",
    "end": "2844980"
  },
  {
    "text": "than this way of sorting. It's still not optimal,\nbut we're getting better.",
    "start": "2844980",
    "end": "2851830"
  },
  {
    "start": "2851830",
    "end": "2865650"
  },
  {
    "text": "We can actually get sort of the\nbest of both worlds-- divide by b and divide\nby log b, I claim.",
    "start": "2865650",
    "end": "2874800"
  },
  {
    "text": "But we need a new algorithm. Any suggestions for\nanother algorithm? ",
    "start": "2874800",
    "end": "2889170"
  },
  {
    "text": "STUDENT: Divide\ninto block size b. PROFESSOR: I want to\ndivide into block size b.",
    "start": "2889170",
    "end": "2897119"
  },
  {
    "text": "So, you mean a merge sort? STUDENT: Yes. PROFESSOR: So merge\nsort, I take my array. I divide it into\nblocks the size b.",
    "start": "2897120",
    "end": "2904306"
  },
  {
    "text": "I could sort each one\nin one memory transfer. And then I need to merge them.",
    "start": "2904306",
    "end": "2911120"
  },
  {
    "text": "So then I've got n divided\nby b sorted arrays.",
    "start": "2911120",
    "end": "2916680"
  },
  {
    "text": "I don't know how to merge them. It's going to be\nhard, but very close. So the answer is\nindeed merge sort.",
    "start": "2916680",
    "end": "2924460"
  },
  {
    "text": " What we covered before\nis binary merge sort.",
    "start": "2924460",
    "end": "2931670"
  },
  {
    "text": "You split into two groups. What I want to do now is\nsplit into some other number",
    "start": "2931670",
    "end": "2937530"
  },
  {
    "text": "of groups. So that was n over b groups. That's too many because merging\nn over b arrays is hard.",
    "start": "2937530",
    "end": "2943920"
  },
  {
    "text": "Merging two arrays was easy. Assuming m over\nb was at least 3, I could merge these guys\njust by parallel scans.",
    "start": "2943920",
    "end": "2950795"
  },
  {
    "text": " So you have the right bound? STUDENT: B way.",
    "start": "2950795",
    "end": "2956440"
  },
  {
    "text": "PROFESSOR: B way, maybe.",
    "start": "2956440",
    "end": "2961586"
  },
  {
    "text": "STUDENT: Square root of b. PROFESSOR: Square root of b? That's what I like\nto call root beer.",
    "start": "2961586",
    "end": "2966680"
  },
  {
    "text": "[LAUGHTER]  Nope. I do call it that.",
    "start": "2966680",
    "end": "2973170"
  },
  {
    "text": "Yeah? STUDENT: M over b? PROFESSOR: M over b, that's\nwhat I'm looking for!",
    "start": "2973170",
    "end": "2978350"
  },
  {
    "text": "Why m over b? STUDENT: I was just\nthinking of the bottom layer of the [INAUDIBLE]\nbinary merge sort.",
    "start": "2978350",
    "end": "2984865"
  },
  {
    "text": "PROFESSOR: Because\nm over b is up here? Nice. [LAUGHTER]  Not the right reason, but\nyou get a Frisbee anyway.",
    "start": "2984865",
    "end": "2992557"
  },
  {
    "text": "All right, let's see\nif I can do this. Would you like another one? Add to your collection.",
    "start": "2992558",
    "end": "2998130"
  },
  {
    "text": "All right, so m over b is the\nright answer-- wrong reason, but that's OK.",
    "start": "2998130",
    "end": "3005080"
  },
  {
    "text": "It all comes down\nto this merge step. So m over b way means I\ntake my problem of size n.",
    "start": "3005080",
    "end": "3010500"
  },
  {
    "text": "Let's draw it out. I divide into chunks. I want the number of\nchunks that I divide into",
    "start": "3010500",
    "end": "3018369"
  },
  {
    "text": "to be m over b, meaning each of\nthese has size n over m over b.",
    "start": "3018370",
    "end": "3025830"
  },
  {
    "text": "That's weird. This is natural because\nthis is how many blocks I can have in cache.",
    "start": "3025830",
    "end": "3032310"
  },
  {
    "text": "I care about that because, if\nI want to do a multi-way merge, you can mimic the\nsame binary merge. You look at the first item\nof each of the sorted arrays.",
    "start": "3032310",
    "end": "3040609"
  },
  {
    "text": "You compare them. In this model,\ncomparisons are free. Let's not even worry about it. In reality, use a priority\nqueue, but all right.",
    "start": "3040610",
    "end": "3046760"
  },
  {
    "text": "So you find the\nminimum of these. Let's say it's this one. And you output that,\nand then you advance.",
    "start": "3046760",
    "end": "3052570"
  },
  {
    "text": "Same algorithm, that will merge\nhowever many arrays you have. The issue is, for this to be\nefficient like it was here,",
    "start": "3052570",
    "end": "3060130"
  },
  {
    "text": "we need to be able to store\nthe first block of each of these arrays. How many blocks\nwe have room for?",
    "start": "3060130",
    "end": "3066970"
  },
  {
    "text": "M over b. This is maxing out merge sort. This is exactly the number\nof blocks that we can store.",
    "start": "3066970",
    "end": "3072620"
  },
  {
    "text": "And so if we do m over\nb way merge sort, merge remains cheap.",
    "start": "3072620",
    "end": "3078080"
  },
  {
    "text": "An m over b way merge\ncosts n over b plus 1,",
    "start": "3078080",
    "end": "3086790"
  },
  {
    "text": "just like before. It's m over b parallel scans.",
    "start": "3086790",
    "end": "3091810"
  },
  {
    "text": "M over b is exactly the\nnumber of scans we can handle. OK, technically we\nhave, with this picture,",
    "start": "3091810",
    "end": "3097500"
  },
  {
    "text": "m over b plus 1 scans. So I need to write\nm over b minus 1. But it won't make a difference.",
    "start": "3097500",
    "end": "3104994"
  },
  {
    "text": "OK, so let's write\ndown the recurrence. It's pretty similar. Memory transfer's size m.",
    "start": "3104995",
    "end": "3110460"
  },
  {
    "text": "We have m over b sub problems\nof size n divided by m over b.",
    "start": "3110460",
    "end": "3118710"
  },
  {
    "text": "It's Still conservation of mass. And then we have plus\nthe same thing as before, n over b plus 1.",
    "start": "3118710",
    "end": "3126200"
  },
  {
    "text": "So it's exactly the same\nrecurrence we had before. We're splitting\ninto more problems. But the sums are\ngoing to be the same.",
    "start": "3126200",
    "end": "3131960"
  },
  {
    "text": "It's still going to add up\nto n over b at each step because conservation of mass. And we didn't change this. So level by level\nlooks the same.",
    "start": "3131960",
    "end": "3138750"
  },
  {
    "text": "The only thing that changes\nis the number of levels. Now we're taking n.",
    "start": "3138750",
    "end": "3143890"
  },
  {
    "text": "We're dividing by m\nover b in each step. So the height of\nthe tree, the number",
    "start": "3143890",
    "end": "3148922"
  },
  {
    "text": "of levels of the\nrecursion tree now",
    "start": "3148922",
    "end": "3155170"
  },
  {
    "text": "is-- before it was log\nbase 2 of n over n.",
    "start": "3155170",
    "end": "3160400"
  },
  {
    "text": "Now it's going to be log\nbase m over b of n over m.",
    "start": "3160400",
    "end": "3168500"
  },
  {
    "text": " If you're careful,\nI guess there's a plus 1 for the leaf level.",
    "start": "3168500",
    "end": "3175105"
  },
  {
    "text": "I actually want to\nmention this plus 1. Unlike the other\nplus 1's, I've got to mention this one because\nthis is not how I usually",
    "start": "3175105",
    "end": "3182290"
  },
  {
    "text": "think of the number of levels. I'll show you why. If you just change\nit by one, you",
    "start": "3182290",
    "end": "3187770"
  },
  {
    "text": "get a slightly cleaner formula. This has got m's\nall over the place. ",
    "start": "3187770",
    "end": "3194030"
  },
  {
    "text": "So I just want to\nrewrite n over m here. Then we'll see how good this is.",
    "start": "3194030",
    "end": "3200280"
  },
  {
    "text": "This is just pedantics. Log base m over b of n--\nI really want n over b.",
    "start": "3200280",
    "end": "3207829"
  },
  {
    "text": "To make this n over b, I need\nto multiply by b, divide by m. OK, these are the same thing.",
    "start": "3207830",
    "end": "3214010"
  },
  {
    "text": "M over m, b's cancel. But I have a log of a product.",
    "start": "3214010",
    "end": "3219140"
  },
  {
    "text": "I can separate that out. Let's go over here. This is log base m over b of n\nover b-- this is what I like--",
    "start": "3219140",
    "end": "3232970"
  },
  {
    "text": "and then, basically, minus\nlog base m over b of m over b.",
    "start": "3232970",
    "end": "3239342"
  },
  {
    "text": "STUDENT: It's b over m. PROFESSOR: I put a\nminus, so it's m over b. If I put a plus, it\nwould be b over m.",
    "start": "3239342",
    "end": "3245105"
  },
  {
    "text": "But, in fact, m\nis bigger than b. So I want it this way. And now it's obvious this is 1.",
    "start": "3245105",
    "end": "3251400"
  },
  {
    "text": "So these cancel. So that's why I wanted the\n1, just to get rid of that. It doesn't really\nmatter, just a plus 1.",
    "start": "3251400",
    "end": "3257500"
  },
  {
    "text": "But it's a cooler way to\nsee that, in some sense, this is the right answer\nof the height of the tree.",
    "start": "3257500",
    "end": "3264300"
  },
  {
    "text": "Now, we're paying n over\nb at each recursive level. So the total cost is what's\ncalled the sorting bound.",
    "start": "3264300",
    "end": "3273280"
  },
  {
    "text": "This is optimal, n over b times\nlog base m over b of n over b.",
    "start": "3273280",
    "end": "3280900"
  },
  {
    "text": "Oh my gosh, what a mouthful. But every person who does\nexternal memory algorithms and cache oblivious\nalgorithms knows this.",
    "start": "3280900",
    "end": "3287240"
  },
  {
    "text": "It is the truth, it turns out. There's a matching lower bound. It's a weird bound. But let's compare\nit to what we know.",
    "start": "3287240",
    "end": "3294040"
  },
  {
    "text": "So we started out with n\nlog n divided by log b. Then we got n log\nn divided by b.",
    "start": "3294040",
    "end": "3301420"
  },
  {
    "text": "Let's ignore-- I mean,\nthis has almost no effect, the part in here. Now we have n log n divided by\nb and divided by log m over b.",
    "start": "3301420",
    "end": "3311400"
  },
  {
    "text": "It's not quite\ndividing by log b. But it turns out it's\nalmost always the same.",
    "start": "3311400",
    "end": "3317170"
  },
  {
    "text": "In some sense, this\ncould be better. If you're cache is big, now\nyou're dividing by log m, roughly.",
    "start": "3317170",
    "end": "3322270"
  },
  {
    "text": "Before, you were only\ndividing by log b. And it turns out this\nis the best you can do.",
    "start": "3322270",
    "end": "3327540"
  },
  {
    "text": "So this is going to be a little\nbit better than merge sort. If your cache is 16 gigabytes,\nlike your RAM caching",
    "start": "3327540",
    "end": "3336940"
  },
  {
    "text": "your disk, then log\nm is pretty big.",
    "start": "3336940",
    "end": "3341984"
  },
  {
    "text": "It's going to be 32 or\nsomething, 34 I guess log m.",
    "start": "3341985",
    "end": "3348635"
  },
  {
    "text": "OK, I have to divide by b. So it's not that good. But still, I'm getting an\nimprovement over regular binary merge sort.",
    "start": "3348635",
    "end": "3354250"
  },
  {
    "text": "And you would see\nthat improvement. These are big factors. The big thing, of course,\nis dividing it by b.",
    "start": "3354250",
    "end": "3359440"
  },
  {
    "text": "But dividing by log of m over\nb is also nice and the best you can do.",
    "start": "3359440",
    "end": "3364790"
  },
  {
    "text": "OK, obviously I needed to\nknow what m and b were here. So the natural question next\nis cache oblivious sorting.",
    "start": "3364790",
    "end": "3374290"
  },
  {
    "text": "And that would take\nanother lecture to cover. So I'm not going to do it here. But it can be done.",
    "start": "3374290",
    "end": "3379600"
  },
  {
    "text": "Cache obliviously, you can\nachieve the same thing. And I'll give you the intuition.",
    "start": "3379600",
    "end": "3384760"
  },
  {
    "text": "There's one catch. Let me mention the catch. ",
    "start": "3384760",
    "end": "3403930"
  },
  {
    "text": "So cache oblivious sorting--\nto do optimal cache oblivious",
    "start": "3403930",
    "end": "3413434"
  },
  {
    "text": "sorting like that\nbound, it turns out you need an assumption called\nthe tall-cache assumption.",
    "start": "3413435",
    "end": "3420605"
  },
  {
    "start": "3420605",
    "end": "3431840"
  },
  {
    "text": "Simple form of the\ntall-cache assumption is that m is at least b squared.",
    "start": "3431840",
    "end": "3439810"
  },
  {
    "text": "What that means is m\nover b is at least b.",
    "start": "3439810",
    "end": "3445250"
  },
  {
    "text": "In other words, the cache\nis taller than it is wide, the way I've been drawing it. That's why it's called\nthe tall-cache assumption.",
    "start": "3445250",
    "end": "3452100"
  },
  {
    "text": "And if you look at real caches,\nthis is usually the case. I don't know of a great reason\nwhy it should be the case.",
    "start": "3452100",
    "end": "3458380"
  },
  {
    "text": "But it usually is,\nso all is well. You can do cache\noblivious sorting. It turns out, if you don't\nhave this assumption,",
    "start": "3458380",
    "end": "3464860"
  },
  {
    "text": "you cannot achieve this bound. We don't know what\nbound you can achieve. But we just know this\none is not possible.",
    "start": "3464860",
    "end": "3471060"
  },
  {
    "text": "You can get a contradiction\nif you achieve that without tall cache. So it's a little bit weird. You have to make one\nbonus assumption.",
    "start": "3471060",
    "end": "3477329"
  },
  {
    "text": "You can make a somewhat\nweaker form of it, which is m is omega\nb to the 1.000000001.",
    "start": "3477330",
    "end": "3488869"
  },
  {
    "text": "That will do. In general, 1 plus epsilon. Any epsilon will be fine. We just mean that\nthe number of blocks",
    "start": "3488870",
    "end": "3495540"
  },
  {
    "text": "is at least some\nb to the epsilon, where epsilon's a\nconstant bigger than zero.",
    "start": "3495540",
    "end": "3501867"
  },
  {
    "text": "OK, then you can do\ncache oblivious sorting. Let me tell you how. We want to do m over\nb way merge sort.",
    "start": "3501867",
    "end": "3509109"
  },
  {
    "text": "But we don't know how to do--\nwe don't know what m over b is. So instead, we're going\nto do something like n",
    "start": "3509110",
    "end": "3515110"
  },
  {
    "text": "to the epsilon way merge sort. ",
    "start": "3515110",
    "end": "3523230"
  },
  {
    "text": "That's a so-so interpretation. This is back to\nyour idea roughly. We're dividing into\na lot of chunks.",
    "start": "3523230",
    "end": "3532130"
  },
  {
    "text": "And then we don't know\nhow to merge them anymore because we can't do regular\nmerge with n to the epsilon",
    "start": "3532130",
    "end": "3538589"
  },
  {
    "text": "chunks it could be n to\nthe epsilon's too big. So how do we do it? We do a divide\nand conquer merge.",
    "start": "3538590",
    "end": "3544770"
  },
  {
    "text": "This is actually\ncalled funnel sort because the way you do a\ndivide and conquer merge looks",
    "start": "3544770",
    "end": "3552810"
  },
  {
    "text": "kind of like a funnel. Actually, it looks a\nlot like the triangles we were drawing earlier. It's just a lot\nmessier to analyze.",
    "start": "3552810",
    "end": "3558510"
  },
  {
    "text": "So I'm not going to do it here. It would take another\n40 minutes or so.",
    "start": "3558510",
    "end": "3563570"
  },
  {
    "text": "But that's some intuition of\nhow you do cache oblivious merge sort. ",
    "start": "3563570",
    "end": "3570270"
  },
  {
    "text": "That's what I want to say\ncache oblivious stuff. Oh, one more thing!",
    "start": "3570270",
    "end": "3575600"
  },
  {
    "text": "One more cool thing you can\ndo-- I'm a data structures guy.",
    "start": "3575600",
    "end": "3581580"
  },
  {
    "text": "So sorting is nice. But what I really like\nare priority queues because they're more\ngeneral than sorting.",
    "start": "3581580",
    "end": "3589400"
  },
  {
    "text": "We started out by\nsaying, hey, look. If you want to sort\nand you use a b tree, you get a really\nbad running time.",
    "start": "3589400",
    "end": "3595310"
  },
  {
    "text": "That's weird because\nusually BST sort is good in a regular\ncomparison model. It's n log n.",
    "start": "3595310",
    "end": "3601804"
  },
  {
    "text": "So b trees are clearly\nnot what we want. Is there some other\nthing we want? And it turns out, yes. ",
    "start": "3601804",
    "end": "3609330"
  },
  {
    "text": "You can build a\npriority queue, which supports insert and\ndelete min and a bunch",
    "start": "3609330",
    "end": "3615070"
  },
  {
    "text": "of other operations. Each of those operations costs\n1 over b log base m over b of n",
    "start": "3615070",
    "end": "3621944"
  },
  {
    "text": "over b amortized memory\ntransfers-- a bit of a mouthful",
    "start": "3621945",
    "end": "3634170"
  },
  {
    "text": "again. But if you compare this\nbound with this bound,",
    "start": "3634170",
    "end": "3639420"
  },
  {
    "text": "it's exactly the same. But I divided by n, which means\nif I insert with this cost n",
    "start": "3639420",
    "end": "3647220"
  },
  {
    "text": "times, I pay the sorting bound. If I delete min with\nthis bound n times, I get the sorting bound.",
    "start": "3647220",
    "end": "3653570"
  },
  {
    "text": "So if I insert n times and\nthen delete all the items out, I've sorted the items\nin sorting bound time.",
    "start": "3653570",
    "end": "3659790"
  },
  {
    "text": "So this is the data\nstructure generalization of that sorting algorithm. Now, this is even harder to do.",
    "start": "3659790",
    "end": "3667774"
  },
  {
    "text": "Originally, it was\ndone external memory. It's called buffer trees. Then we did it\ncache obliviously.",
    "start": "3667774",
    "end": "3672967"
  },
  {
    "text": "It's called cache\noblivious priority queues. We weren't very creative. But it can be done. And, again, if you\nwant to learn more,",
    "start": "3672967",
    "end": "3679910"
  },
  {
    "text": "you should take 6851,\nAdvanced Data Structures,",
    "start": "3679910",
    "end": "3685010"
  },
  {
    "text": "which leads us into\nthe next topic, what class you should take\nnext-- classes, that's",
    "start": "3685010",
    "end": "3691028"
  },
  {
    "text": "what I mean to say. ",
    "start": "3691029",
    "end": "3704510"
  },
  {
    "text": "So a lot of bias here. And well I'm just going\nto give a lot of classes. There's a lot of them.",
    "start": "3704510",
    "end": "3709850"
  },
  {
    "text": "I believe this is in roughly\nnumerical order almost. It changed a little\nbit-- so many classes.",
    "start": "3709850",
    "end": "3717890"
  },
  {
    "text": " Are you OK with numbers,\nor do you want titles? ",
    "start": "3717890",
    "end": "3726030"
  },
  {
    "text": "The obvious follow-on\ncourse to this class is 6854, which is\nAdvanced Algorithms. It's the first graduate\nalgorithms class.",
    "start": "3726030",
    "end": "3733330"
  },
  {
    "text": "This is the last undergraduate\nclass, roughly speaking, with the exception of 6047. But in terms of straight,\ngeneral algorithms,",
    "start": "3733330",
    "end": "3740420"
  },
  {
    "text": "this would be the natural class. It's only in the fall--\nsadly, not next fall. But in general,\nit's a cool class.",
    "start": "3740420",
    "end": "3746410"
  },
  {
    "text": "It's a very broad overview of\nalgorithms but much more hard core, I guess.",
    "start": "3746410",
    "end": "3753300"
  },
  {
    "text": "It's an intense class but\ncovers a lot of fields, a lot of areas of algorithms. Then all the other\nones I'm going to list",
    "start": "3753300",
    "end": "3759120"
  },
  {
    "text": "are more specialized. So 6047 is\nComputational Biology. So if you're\ninterested in biology,",
    "start": "3759120",
    "end": "3764430"
  },
  {
    "text": "you want algorithms\napplied to biology. That's a cool class. It's also an undergrad class. Everything else here-- I\nmean, you know the story.",
    "start": "3764430",
    "end": "3771040"
  },
  {
    "text": "You take grad\nclasses all the time, or you will soon if you\nwant to do more algorithms.",
    "start": "3771040",
    "end": "3778020"
  },
  {
    "text": "So 6850 is\ncomputational geometry. I think it's called\nGeometric Algorithms.",
    "start": "3778020",
    "end": "3784059"
  },
  {
    "text": "So we've seen a\ncouple examples, like the convex hull\ndivide-and-conquer algorithm and the range trees.",
    "start": "3784059",
    "end": "3790354"
  },
  {
    "text": "Those are two examples\nof geometric algorithms where you have points and\nlines and stuff-- maybe in two dimensions, maybe\nin three dimensions,",
    "start": "3790354",
    "end": "3796225"
  },
  {
    "text": "maybe log n dimensions. If you like that\nstuff, you should take computational geometry.",
    "start": "3796225",
    "end": "3801955"
  },
  {
    "text": "This is the devil that\nlad me into algorithms in the first place. Cool stuff. 6849 is my class on\nfolding algorithms.",
    "start": "3801956",
    "end": "3810089"
  },
  {
    "text": "This is a special type\nof geometric algorithms where we think about paper\nfolding and robotic arm folding",
    "start": "3810090",
    "end": "3817710"
  },
  {
    "text": "and protein folding\nand things like that. So that's a bit of\na specialized class. 6851, I've mentioned three times\nnow-- Advanced Data Structures.",
    "start": "3817710",
    "end": "3826720"
  },
  {
    "text": "Then we've got\n6852, its neighbor. This is Nancy's Distributed\nAlgorithms class. So if you liked the week\nof distributed algorithms,",
    "start": "3826720",
    "end": "3833730"
  },
  {
    "text": "there's a whole class on it. She wrote the textbook for it. Then there's 6853.",
    "start": "3833730",
    "end": "3841660"
  },
  {
    "text": "This is Algorithmic Game Theory. If you care about\nalgorithms involving",
    "start": "3841660",
    "end": "3847290"
  },
  {
    "text": "multiple players-- and the\nplayers are each selfish. And they have no reason\nto tell you the truth. And still you want\nto compute something",
    "start": "3847290",
    "end": "3853620"
  },
  {
    "text": "like minimum spanning tree,\nor pick your favorite thing. Everyone's lying about\nthe edge weights. And still you want\nto figure out how",
    "start": "3853620",
    "end": "3859360"
  },
  {
    "text": "to design a mechanism\nlike an auction so that you actually end up\nbuying a minimum spanning tree.",
    "start": "3859360",
    "end": "3865170"
  },
  {
    "text": "You can do that. And if you want to know\nhow, you should take 6853. What else do we have?",
    "start": "3865170",
    "end": "3872290"
  },
  {
    "text": "6855 is Network Optimization. So this is like the natural\nfollow on of network flows.",
    "start": "3872290",
    "end": "3878750"
  },
  {
    "text": "If you like network flows\nand things like that, there's a whole universe\ncalled network optimization.",
    "start": "3878750",
    "end": "3883760"
  },
  {
    "text": "It has lots of fancy,\nbasically, graph algorithms where you're minimizing\nor maximizing something. ",
    "start": "3883760",
    "end": "3891089"
  },
  {
    "text": "OK, this is\nfortuitous alignment. 6856 is kind of\na friend of 6854.",
    "start": "3891090",
    "end": "3898079"
  },
  {
    "text": "These are both taught\nby David Carter. This is Randomized Algorithms. So this is a more\nspecialized approach.",
    "start": "3898080",
    "end": "3906015"
  },
  {
    "text": "I don't think you need\none to take the other. But this is the\nusual starting class. And this is specifically\nabout how randomization makes",
    "start": "3906015",
    "end": "3913349"
  },
  {
    "text": "algorithms faster or simpler. Usually they're\nharder to analyze. But you get very simple\nalgorithms that run just",
    "start": "3913350",
    "end": "3918680"
  },
  {
    "text": "as well as their\ndeterministic versions. Sometimes you can\ndo even better than the deterministic versions.",
    "start": "3918680",
    "end": "3924900"
  },
  {
    "text": "Then there's the\nsecurity universe. This is a great\nnumerical coincidence--",
    "start": "3924900",
    "end": "3930606"
  },
  {
    "text": "probably not a coincidence. But there's 6857 and 6875. I have to remember\nwhich is which.",
    "start": "3930606",
    "end": "3936360"
  },
  {
    "text": "6857 is Applied Cryptography. 6875 is Theoretical\nCryptography, at least as I read it.",
    "start": "3936360",
    "end": "3942530"
  },
  {
    "text": "So they have similar topics. But this is more thinking\nabout how you really achieve security and crypto\nsystems and things like that.",
    "start": "3942530",
    "end": "3949559"
  },
  {
    "text": "And this one is more\nalgorithm based. And what kind of\ntheoretical assumptions do you need to prove\ncertain things?",
    "start": "3949560",
    "end": "3955440"
  },
  {
    "text": "This is more proof based. And this is more connecting\nto systems, both great topics.",
    "start": "3955440",
    "end": "3963839"
  },
  {
    "text": "And I have one\nmore out of order, I guess just because\nit's a recent addition. 6816 is Multicore Programming.",
    "start": "3963840",
    "end": "3971475"
  },
  {
    "text": "That has a lot of\nalgorithms, too. And this is all about\nparallel computation.",
    "start": "3971475",
    "end": "3977974"
  },
  {
    "text": "When you have multiple\ncores on your computer, how can you compute\nthings like these things faster than\neverything we've done?",
    "start": "3977974",
    "end": "3984339"
  },
  {
    "text": "It's yet another universe\nthat we haven't even touched on in this class. But it's cool stuff, and\nyou might consider it.",
    "start": "3984340",
    "end": "3991030"
  },
  {
    "text": "Then we move on to\nother theory classes. That was algorithms.",
    "start": "3991030",
    "end": "3997099"
  },
  {
    "text": "Some more obvious candidates,\nif you like pure theory, are 6045 6840. This is the undergrad version.",
    "start": "3997100",
    "end": "4003230"
  },
  {
    "text": "This is the grad version. Although, by now the\nclasses are quite different. So they cover different things. Some of you are\nalready taking 6045.",
    "start": "4003230",
    "end": "4008790"
  },
  {
    "text": "It's right before this lecture. These are general theory of\ncomputation classes, atomita,",
    "start": "4008790",
    "end": "4015190"
  },
  {
    "text": "complexity, things like that. If you like the brief\nNP completeness lecture,",
    "start": "4015190",
    "end": "4020230"
  },
  {
    "text": "then you might like this stuff. There's so many more complexity\nclasses and other cool things you can do.",
    "start": "4020230",
    "end": "4026060"
  },
  {
    "text": "If you really like it, there's\nadvanced complexity theory. There's, basically,\nrandomized complexity theory--",
    "start": "4026060",
    "end": "4032280"
  },
  {
    "text": "how randomness affects\njust the complexity side, not algorithms. Then there's quantum\ncomplexity theory",
    "start": "4032280",
    "end": "4039329"
  },
  {
    "text": "if you care about\nquantum computers. As Scott says,\nit's proving things you can't do with\ncomputers we don't have.",
    "start": "4039330",
    "end": "4046110"
  },
  {
    "text": "[LAUGHTER]  It's complexity. It's all about lower bounds.",
    "start": "4046110",
    "end": "4052790"
  },
  {
    "text": "And then there's coding theory,\nwhich is another universe. It's actually closely\nrelated to-- it comes out",
    "start": "4052790",
    "end": "4059190"
  },
  {
    "text": "of signals and systems and\nelectrical engineering. But by now it's closely\nrelated to complexity theory.",
    "start": "4059190",
    "end": "4065349"
  },
  {
    "text": "You can use bounds on\ncodes to prove things about complexity theory. Anyway, choose\nyour own adventure.",
    "start": "4065350",
    "end": "4074220"
  },
  {
    "text": "Now I have one last topic,\nwhich was not on the outline. This is a bit of a surprise. ",
    "start": "4074220",
    "end": "4081042"
  },
  {
    "text": "It's a boring surprise. I want to remind you to fill\nout student evaluations. [LAUGHTER]",
    "start": "4081042",
    "end": "4087200"
  },
  {
    "text": " Because, you know, we\nwant to know how we did and how we can continue\nto improve the class. But really we want to know\nwho's the better teacher.",
    "start": "4087200",
    "end": "4096200"
  },
  {
    "text": "But more importantly than\nwho is the better teacher, I think we all have a dying\nquestion, which is who",
    "start": "4096200",
    "end": "4103330"
  },
  {
    "text": "is the better Frisbee thrower? So I want to invite Srini\nDevadas, our co-lecturer here,",
    "start": "4103330",
    "end": "4110710"
  },
  {
    "text": "to a duel. [LAUGHTER AND APPLAUSE] ",
    "start": "4110710",
    "end": "4118978"
  },
  {
    "text": "SRINI DEVADAS: I think\nyou mean, no contest. [LAUGHTER] ",
    "start": "4118978",
    "end": "4124089"
  },
  {
    "text": "PROFESSOR: Not so sure. Maybe-- actually,\nI'm pretty sure. [LAUGHTER]",
    "start": "4124090",
    "end": "4129460"
  },
  {
    "text": " I want to take you on, man. Blue or purple?",
    "start": "4129460",
    "end": "4135207"
  },
  {
    "text": "SRINI DEVADAS: Blue. PROFESSOR: Good choice. SRINI DEVADAS: Blue's\nbetter, remember? [LAUGHTER] PROFESSOR: Purple's\nbetter, remember?",
    "start": "4135207",
    "end": "4140391"
  },
  {
    "text": "[LAUGHTER]  All right, so how are\nwe going to do this? SRINI DEVADAS: So, you\nguys get to cheer and bet.",
    "start": "4140391",
    "end": "4148063"
  },
  {
    "text": "PROFESSOR: Bet? I don't think we can\ncondone them betting money. I think maybe they can\nbet their Frisbees.",
    "start": "4148063",
    "end": "4154792"
  },
  {
    "text": "Anyone got a Frisbee on them? We can bet those. SRINI DEVADAS: Yeah, all right. PROFESSOR: All right, maybe not.",
    "start": "4154792",
    "end": "4160489"
  },
  {
    "text": "SRINI DEVADAS: Put your\nFrisbees on me here. PROFESSOR: All right. SRINI DEVADAS: All right,\nso some rules here--",
    "start": "4160490",
    "end": "4168600"
  },
  {
    "text": "we actually talked about this.  So the way this is\ngoing to work-- I mean,",
    "start": "4168600",
    "end": "4174049"
  },
  {
    "text": "it's going to be\nalgorithmic, obviously. And we get to choose\nour algorithm, maybe with a little game theory here.",
    "start": "4174050",
    "end": "4179729"
  },
  {
    "text": "We're going to toss the coin. And we're going to\ndecide who goes first. So won't spin the Frisbee.",
    "start": "4179729",
    "end": "4185199"
  },
  {
    "text": "Remember what\nhappened with that? So you get to call heads or\ntails while it's spinning.",
    "start": "4185200",
    "end": "4190452"
  },
  {
    "text": "PROFESSOR: Oh,\nwhile it's spinning. SRINI DEVADAS:\nWhile it's spinning. This is our Super Bowl.",
    "start": "4190452",
    "end": "4195610"
  },
  {
    "text": "PROFESSOR: Heads! Oh, a trick. Tails. SRINI DEVADAS: Tails, all right.",
    "start": "4195610",
    "end": "4202500"
  },
  {
    "text": "You're going to throw first. PROFESSOR: OK,\nthat's your choice. SRINI DEVADAS: And I\ndon't know if you've heard the legend of William Tell.",
    "start": "4202500",
    "end": "4209720"
  },
  {
    "text": "How many of you have heard\nthe legend of William Tell? All right. So that was a 14th\ncentury Swiss legend",
    "start": "4209720",
    "end": "4217070"
  },
  {
    "text": "where there was this archer\nwho was renowned for his skill.",
    "start": "4217070",
    "end": "4222679"
  },
  {
    "text": "And he was forced by\nthis villainous king to shoot an apple off the\ntop of his son's head.",
    "start": "4222680",
    "end": "4229661"
  },
  {
    "text": "PROFESSOR: Yikes. SRINI DEVADAS: So we're\ngoing to reenact that. [LAUGHTER]  PROFESSOR: Did you\nbring your daughter?",
    "start": "4229662",
    "end": "4236165"
  },
  {
    "text": "[LAUGHTER AND APPLAUSE]  SRINI DEVADAS: I\nwas thinking TAs.",
    "start": "4236165",
    "end": "4242435"
  },
  {
    "text": " PROFESSOR: Our \"sons.\" SRINI DEVADAS: But\nthere's a big difference",
    "start": "4242435",
    "end": "4247551"
  },
  {
    "text": "between the 21st century\nand the 14th century. What is that? STUDENT: You get sued. [INTERPOSING VOICES]",
    "start": "4247551",
    "end": "4252610"
  },
  {
    "text": "PROFESSOR: You get sued, yeah. SRINI DEVADAS: Now\nthere's many more lawsuits in the 21st century. So we want to avoid lawsuits.",
    "start": "4252610",
    "end": "4258770"
  },
  {
    "text": "STUDENT: Genetically\nmodified apples. PROFESSOR: And genetically\nmodified apples, also. SRINI DEVADAS: Electronically\nmodified Apples,",
    "start": "4258770",
    "end": "4263920"
  },
  {
    "text": "yeah that's going to\nbe another difference. So we decided we'd just\nthrow Frisbees at each other. ",
    "start": "4263920",
    "end": "4270406"
  },
  {
    "text": "PROFESSOR: So I'm\ngoing to throw to you and try to hit an\napple off of your head. SRINI DEVADAS:\nYeah, well you might want to tell them what we\ndecided about the apple.",
    "start": "4270406",
    "end": "4277140"
  },
  {
    "text": "PROFESSOR: Well, I brought\nan easy-to-hit apple, a nice big apple,\nthe cowboy hat. SRINI DEVADAS: Cowboy hat.",
    "start": "4277140",
    "end": "4282964"
  },
  {
    "text": "PROFESSOR: That should\nbe a little easier. SRINI DEVADAS: So I get to wear\nthat had first because you're going to throw first.",
    "start": "4282964",
    "end": "4288410"
  },
  {
    "text": "PROFESSOR: OK. SRINI DEVADAS: And this\nis really simple, guys. Knock the hat off, I guess from\nthe furthest distance, and win.",
    "start": "4288410",
    "end": "4299000"
  },
  {
    "text": "In your case, lose but yeah. PROFESSOR: Now for the PETA\npeople in the audience, I want your assure\nno humans will",
    "start": "4299000",
    "end": "4305170"
  },
  {
    "text": "be harmed during this\nperformance, only professors. [LAUGHTER] And maybe egos, pride.",
    "start": "4305170",
    "end": "4312150"
  },
  {
    "text": " SRINI DEVADAS: Seven. I think seven is a good number.",
    "start": "4312150",
    "end": "4317824"
  },
  {
    "text": "PROFESSOR: Seven for-- SRINI DEVADAS: You get to-- PROFESSOR: I'm going\nto grab purple. SRINI DEVADAS: You get to pick. You can stand right here.",
    "start": "4317824",
    "end": "4323720"
  },
  {
    "text": "That's probably\nwhat's good for you. [LAUGHTER]  Or you can go all\nthe way up there.",
    "start": "4323720",
    "end": "4330760"
  },
  {
    "text": "And after you\nknock this hat off, I'm going to have to match you. PROFESSOR: All right. SRINI DEVADAS: So\nfurthest away wins.",
    "start": "4330760",
    "end": "4336877"
  },
  {
    "text": "PROFESSOR: I think I'll\ntry from about here. SRINI DEVADAS: Right. Ah! I've got to look good here, man.",
    "start": "4336877",
    "end": "4343299"
  },
  {
    "text": "PROFESSOR: I have to\ndo it without looking. SRINI DEVADAS: I'm going\nto stand right here. PROFESSOR: OK.",
    "start": "4343299",
    "end": "4349920"
  },
  {
    "text": "SRINI DEVADAS: OK. Ah! [LAUGHTER]  I've got to gear up for this.",
    "start": "4349920",
    "end": "4355080"
  },
  {
    "text": "PROFESSOR: OK. SRINI DEVADAS: Look, I\nknow how well you throw. PROFESSOR: Are you scared? ",
    "start": "4355080",
    "end": "4361190"
  },
  {
    "text": "That's embarrassing. SRINI DEVADAS: Ah! I can't deal with this.",
    "start": "4361190",
    "end": "4368110"
  },
  {
    "text": "I just have no confidence\nin the way you throw. So I borrowed this.",
    "start": "4368110",
    "end": "4373310"
  },
  {
    "text": "[LAUGHTER] ",
    "start": "4373310",
    "end": "4379420"
  },
  {
    "text": "Since this is mine,\nit's going to cost you a throw to wear this. PROFESSOR: Hey! SRINI DEVADAS: No, all right.",
    "start": "4379420",
    "end": "4385138"
  },
  {
    "text": "Whatever, fair. All right. Now I'm feeling much\nbetter about this. I won't claim to\nhave a pretty face.",
    "start": "4385138",
    "end": "4391630"
  },
  {
    "text": "But I like it just the way\nit is, just the way it is. PROFESSOR: All right. Well, since we have a\nlittle more protection,",
    "start": "4391630",
    "end": "4398410"
  },
  {
    "text": "maybe I'll start\nfrom farther back. SRINI DEVADAS: All right. I think I'll hold this\nup here like that. PROFESSOR: OK. So I just have to hit\nthe hat off, right?",
    "start": "4398410",
    "end": "4404719"
  },
  {
    "text": "Easy. SRINI DEVADAS: Yup. [LAUGHTER] ",
    "start": "4404720",
    "end": "4415659"
  },
  {
    "text": "PROFESSOR: You can keep that. Oh right, so I'm\ngoing to get closer. One step closer.",
    "start": "4415660",
    "end": "4421690"
  },
  {
    "text": "Luckily, my steps are much\nbigger than your steps. OK, throw 2. [LAUGHTER]",
    "start": "4421690",
    "end": "4428390"
  },
  {
    "text": " Throw three. [LAUGHTER]",
    "start": "4428390",
    "end": "4434061"
  },
  {
    "text": " Throw four. SRINI DEVADAS: That\ndidn't even hurt. Come on, man!",
    "start": "4434061",
    "end": "4441340"
  },
  {
    "text": "Throw a little harder here! PROFESSOR: Oh! [CHEERING AND APPLAUSE]",
    "start": "4441340",
    "end": "4446557"
  },
  {
    "text": " SRINI DEVADAS: All\nright, mark it. PROFESSOR: All right,\nI marked my spot.",
    "start": "4446558",
    "end": "4452680"
  },
  {
    "text": "SRINI DEVADAS: You've got\na couple more throws here to do better. PROFESSOR: More throws? SRINI DEVADAS:\nYou can do better. PROFESSOR: Wait, to go back. SRINI DEVADAS: You've\ngot a couple more, yeah.",
    "start": "4452680",
    "end": "4459466"
  },
  {
    "start": "4459466",
    "end": "4465172"
  },
  {
    "text": "PROFESSOR: You almost hit me. [LAUGHTER]  [GROANING] I'm getting better!",
    "start": "4465172",
    "end": "4472202"
  },
  {
    "text": "Not much-- can I go back now? SRINI DEVADAS: Yeah, sure. PROFESSOR: I don't\nknow the rules.",
    "start": "4472202",
    "end": "4478160"
  },
  {
    "text": "[APPLAUSE]  SRINI DEVADAS: Goodness.",
    "start": "4478160",
    "end": "4484931"
  },
  {
    "text": "PROFESSOR: No contest, right? SRINI DEVADAS: I'm getting\na little worried here. PROFESSOR: One more Frisbee.",
    "start": "4484932",
    "end": "4489986"
  },
  {
    "text": "Two more Frisbees. Hey, that was your Frisbee. SRINI DEVADAS: One more.",
    "start": "4489986",
    "end": "4497320"
  },
  {
    "text": "All right. PROFESSOR: I think we've\ndone binary search here. [APPLAUSE]",
    "start": "4497320",
    "end": "4502460"
  },
  {
    "text": " SRINI DEVADAS: You need this. And you don't really need\nthis, but I'll give it to you.",
    "start": "4502460",
    "end": "4510460"
  },
  {
    "text": "PROFESSOR: So much confidence. Well, I have so much\nconfidence in you I brought some extra Frisbees.",
    "start": "4510460",
    "end": "4516656"
  },
  {
    "text": "[LAUGHTER] ",
    "start": "4516656",
    "end": "4521969"
  },
  {
    "text": "SRINI DEVADAS: I get to\nuse all of them, huh? PROFESSOR: You need it, man. SRINI DEVADAS: All right. No, we're going to be fair.",
    "start": "4521970",
    "end": "4527835"
  },
  {
    "text": "You threw seven. I'm going to throw seven. 1, 2, 3, 4, 5, 6, 7.",
    "start": "4527835",
    "end": "4537140"
  },
  {
    "text": "You've got a bit\nof a big head here. PROFESSOR: Do this. All right, so I put\nthe hat on the head.",
    "start": "4537140",
    "end": "4543690"
  },
  {
    "text": "OK. Where were you\nstanding, by the way? Way back here, right? SRINI DEVADAS: No, nope.",
    "start": "4543690",
    "end": "4549580"
  },
  {
    "text": "I was right there. PROFESSOR: OK. SRINI DEVADAS: Right there. PROFESSOR: All\nright, right here.",
    "start": "4549580",
    "end": "4555600"
  },
  {
    "text": "Can I hold onto the hat? SRINI DEVADAS: No! You can hold on to your helmet! PROFESSOR: All right.",
    "start": "4555600",
    "end": "4561469"
  },
  {
    "text": "SRINI DEVADAS: Wow. PROFESSOR: Ah! [LAUGHTER]",
    "start": "4561470",
    "end": "4566477"
  },
  {
    "text": " How many throws-- SRINI DEVADAS: Maybe I\nshould start from right here.",
    "start": "4566478",
    "end": "4572190"
  },
  {
    "text": "[GROANING] PROFESSOR: Phew. That was close. ",
    "start": "4572190",
    "end": "4578674"
  },
  {
    "text": "SRINI DEVADAS: Oh, I grazed it! But it's supposed to fall off.",
    "start": "4578674",
    "end": "4584040"
  },
  {
    "text": "PROFESSOR: What, my head? [LAUGHTER] SRINI DEVADAS: Getting\nkind of tight here, guys. ",
    "start": "4584040",
    "end": "4591123"
  },
  {
    "text": "Wow. ",
    "start": "4591123",
    "end": "4596776"
  },
  {
    "text": "[YELLING AND GROANING] Does that count? STUDENT: No! SRINI DEVADAS: It does count. STUDENT: No!",
    "start": "4596776",
    "end": "4601987"
  },
  {
    "text": "SRINI DEVADAS: It's a tie. So far, it's a tie. So far, it's a tie! All right, if I\nknock it off, I win.",
    "start": "4601987",
    "end": "4607690"
  },
  {
    "text": "[LAUGHTER] [GROANING] There you you. PROFESSOR: Is that it?",
    "start": "4607690",
    "end": "4613364"
  },
  {
    "text": "[APPLAUSE]  SRINI DEVADAS: This\nwas fair and square.",
    "start": "4613364",
    "end": "4620400"
  },
  {
    "text": "We want the world to\nknow that we did not deflate these Frisbees. [LAUGHTER]",
    "start": "4620400",
    "end": "4626503"
  },
  {
    "text": " [APPLAUSE] ",
    "start": "4626503",
    "end": "4635180"
  },
  {
    "text": "So not only did we do a bad\njob of throwing Frisbee to you guys, we didn't throw enough\nFrisbees, as you can see,",
    "start": "4635180",
    "end": "4642420"
  },
  {
    "text": "through the term. So if you want a\nFrisbee, pick one up. And if you're embarrassed\nabout throwing Frisbees",
    "start": "4642420",
    "end": "4649890"
  },
  {
    "text": "with this lettering on\nit, I've got two words for you-- paint remover. All right, have a good summer.",
    "start": "4649890",
    "end": "4656390"
  },
  {
    "text": "And have fun on the final exam. [APPLAUSE]",
    "start": "4656390",
    "end": "4660880"
  }
]