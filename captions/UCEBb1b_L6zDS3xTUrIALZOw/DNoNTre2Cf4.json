[
  {
    "text": " PROFESSOR: This time we're\nactually going to be able to do a little work that I hope\nwill give you a good idea of",
    "start": "0",
    "end": "6069"
  },
  {
    "text": "why it is that at least\nlow-density parity-check codes work and even broader classes\nof capacity-achieving codes.",
    "start": "6070",
    "end": "17510"
  },
  {
    "text": "But I think we're going to limit\nourselves to a week, so that we can say something next\nweek about everything we've",
    "start": "17510",
    "end": "24050"
  },
  {
    "text": "been talking about as binary\ncodes for the power limited additive white Gaussian\nnoise channel.",
    "start": "24050",
    "end": "29520"
  },
  {
    "text": "We've completely left aside\ncodes for the bandwidth limited channel, where we're\ngoing to have to talk about",
    "start": "29520",
    "end": "34960"
  },
  {
    "text": "non-binary codes of some kind. So next week I'll give you a\nvery rushed overview of that",
    "start": "34960",
    "end": "41940"
  },
  {
    "text": "kind of code. And it's my intention, by the\nway, that last week, you'll",
    "start": "41940",
    "end": "50290"
  },
  {
    "text": "not be held responsible for on\nthe exams, so that we kind have a nice, pleasant week\nwithout worrying about whether",
    "start": "50290",
    "end": "58760"
  },
  {
    "text": "we're responsible\nfor it or not. And the last homework set, I\nwill prepare a homework set on",
    "start": "58760",
    "end": "64569"
  },
  {
    "text": "the bandwidth limited\ntype codes. On Wednesday, I'll hand it out,\nbut I won't expect you to",
    "start": "64569",
    "end": "70690"
  },
  {
    "text": "give it back. It's good to do it. I'll hand out solutions on the\nfinal day of the exam.",
    "start": "70690",
    "end": "78600"
  },
  {
    "text": "OK, so any questions\nabout where we are, what we're doing?",
    "start": "78600",
    "end": "83939"
  },
  {
    "text": "All right, let's get into it. We've been building up\nto this for a while.",
    "start": "83940",
    "end": "91130"
  },
  {
    "text": "First we did trellis representations of block codes.",
    "start": "91130",
    "end": "97030"
  },
  {
    "text": "As a warm-up for codes on\ngraphs, we found that some of the things we discovered about\ntrellises were important",
    "start": "97030",
    "end": "104180"
  },
  {
    "text": "particularly in the context\nof the cut-set bound. The cut-set bound says, where\nyou have a cut-set, the",
    "start": "104180",
    "end": "110100"
  },
  {
    "text": "complexity at that point must\nbe at least as great as that of a trellis diagram which\ndivides the two parts of the",
    "start": "110100",
    "end": "117720"
  },
  {
    "text": "code into two halves,\nand the past and future in the same way. And from that we concluded\nthat we're",
    "start": "117720",
    "end": "124430"
  },
  {
    "text": "going to need cycles. Because we'd already proved\nback in chapter 10 that trellis complexity needed to go\nup exponentially with block",
    "start": "124430",
    "end": "133890"
  },
  {
    "text": "length, at least for codes\nthat maintained a nonzero relative minimum distance\nas well as a",
    "start": "133890",
    "end": "140030"
  },
  {
    "text": "nonzero relative rate. So we're going to need cycles\nin our graph we think --",
    "start": "140030",
    "end": "145180"
  },
  {
    "text": "to get to capacity. Chapter 12 was a fairly short\nchapter introducing the",
    "start": "145180",
    "end": "150700"
  },
  {
    "text": "sum-product algorithm. I believe that you don't\nreally understand the sum-product algorithm till you\ndo it once, so that's on this",
    "start": "150700",
    "end": "157720"
  },
  {
    "text": "week's homework. You will do it once for a very\nsimple case, and then I think you'll understand it.",
    "start": "157720",
    "end": "162950"
  },
  {
    "text": " We developed the sum-product\nalgorithm for cycle-free",
    "start": "162950",
    "end": "171230"
  },
  {
    "text": "graphs, where it's a theorem\nthat the sum-product algorithm does APP decoding for every\nvariable in any cycle-free",
    "start": "171230",
    "end": "179600"
  },
  {
    "text": "graph in a very systematic\nand efficient way. It's a finite and exact\nalgorithm in that case.",
    "start": "179600",
    "end": "185810"
  },
  {
    "text": "It takes a number of steps\napproximately equal to diameter of the graph. And when it's finished you\nhave the exact APPs",
    "start": "185810",
    "end": "192950"
  },
  {
    "text": "everywhere.  OK, but we really want to have\na decoding algorithm for",
    "start": "192950",
    "end": "199305"
  },
  {
    "text": "graphs with cycles. Having developed the sum-product\ndecoding algorithm, we see that it has a\nnice, simple update rule at",
    "start": "199305",
    "end": "208490"
  },
  {
    "text": "each computation node. It's a local kind\nof algorithm.",
    "start": "208490",
    "end": "213630"
  },
  {
    "text": "Why don't we just let her\nrip, start it off and see how it does? And, in our case, we can make\nthat work by designing graphs",
    "start": "213630",
    "end": "224450"
  },
  {
    "text": "that have, in particular, very\nlarge girths such that the graph looks--",
    "start": "224450",
    "end": "230320"
  },
  {
    "text": "the term-of-art is locally\ntree-like. In the neighborhood of any node,\nif you go out some fixed",
    "start": "230320",
    "end": "239140"
  },
  {
    "text": "diameter from that node, you\nwon't run into any repetition. So locally the graph\nlooks like a tree.",
    "start": "239140",
    "end": "245760"
  },
  {
    "text": "And we're going to, ultimately,\nbe looking at asymptotically long codes, so\nwe'll be able to make that",
    "start": "245760",
    "end": "252770"
  },
  {
    "text": "locally tree-like assumption\nhold for as far out as we need to.",
    "start": "252770",
    "end": "258829"
  },
  {
    "text": "Other disciplines are not\nso fortunate as to be able to do that. OK, so in this chapter we're\nfinally going to get capacity",
    "start": "258829",
    "end": "267699"
  },
  {
    "text": "approaching codes. I'm first just going to mention\na couple of classes of",
    "start": "267700",
    "end": "273080"
  },
  {
    "text": "codes, the most famous and\nimportant ones, show you what their graphs look like.",
    "start": "273080",
    "end": "279940"
  },
  {
    "text": "From that, you will know\neverything up to schedule what there sum-product decoding\nalgorithm should be.",
    "start": "279940",
    "end": "288669"
  },
  {
    "text": "I'll tell you what the\nconventional schedules for decoding these graphs\nwith cycles are.",
    "start": "288670",
    "end": "296750"
  },
  {
    "text": "And that'll be an\nintroduction. And then we'll get into actual\nanalysis, in particular, for",
    "start": "296750",
    "end": "304620"
  },
  {
    "text": "low-density parity-check codes\nwhich are, really, the simplest of these codes\nand therefore the",
    "start": "304620",
    "end": "309950"
  },
  {
    "text": "most amenable to analysis. And we'll see that, under the\nlocally tree-like assumption,",
    "start": "309950",
    "end": "315010"
  },
  {
    "text": "we can do an exact analysis\nfirst, on the binary erasure channel. Then I'll at least discuss\nwhat's involved on more",
    "start": "315010",
    "end": "322500"
  },
  {
    "text": "general channels, where we can\ndo a fairly precise analysis.",
    "start": "322500",
    "end": "327590"
  },
  {
    "text": "So that's where we're\ngoing in chapter 13. Questions, comments? ",
    "start": "327590",
    "end": "334800"
  },
  {
    "text": "OK, so let's talk about\nlow-density parity-check codes.",
    "start": "334800",
    "end": "340389"
  },
  {
    "text": "These codes have a fascinating\nhistory. They were invented by Professor\nGallager in his",
    "start": "340390",
    "end": "349240"
  },
  {
    "text": "doctoral thesis in 1961. He was a student\nof Peter Elias.",
    "start": "349240",
    "end": "354930"
  },
  {
    "text": "What people were doing at MIT\nthen was trying to figure out ways to actually build codes\nthat get to capacity.",
    "start": "354930",
    "end": "362250"
  },
  {
    "text": "At MIT the emphasis was on so\ncalled probabilistic codes. Namely ones that had sort of the\nrandom-like elements that",
    "start": "362250",
    "end": "371780"
  },
  {
    "text": "Shannon basically prescribed. People here were not\nso interested in the algebraic codes.",
    "start": "371780",
    "end": "378910"
  },
  {
    "text": "And Gallager basically had the\nidea that if you take a code",
    "start": "378910",
    "end": "387705"
  },
  {
    "text": "-- you can describe it by\na generator matrix or parity-check matrix. If you make a sparse generator\nmatrix, that's not going to be",
    "start": "387705",
    "end": "394870"
  },
  {
    "text": "any good, a random, sparse\ngenerator matrix, because a sparse generator matrix will\nnaturally have some low-weight",
    "start": "394870",
    "end": "401170"
  },
  {
    "text": "code words in it. If the rows are sparse,\nthen it will have low, minimum distance.",
    "start": "401170",
    "end": "407680"
  },
  {
    "text": "But maybe if we make the\nparity-check matrix sparse,",
    "start": "407680",
    "end": "412940"
  },
  {
    "text": "very few ones in the\nparity-check matrix, we can still get a code that's\nquasi-random.",
    "start": "412940",
    "end": "419660"
  },
  {
    "text": "And therefore we can hope that\nthe codes, as they get along,",
    "start": "419660",
    "end": "425100"
  },
  {
    "text": "will come close to doing what\nShannon said random codes should easily be able to do.",
    "start": "425100",
    "end": "430840"
  },
  {
    "text": "The amazing thing about\nShannon's proof is he showed that you pick any code out of a\nhat, and it's highly likely",
    "start": "430840",
    "end": "436140"
  },
  {
    "text": "to be good. So, basically, Gallager was\ntrying to replicate that.",
    "start": "436140",
    "end": "442110"
  },
  {
    "text": "And he came up the idea of\nsparse or low-density parity-check matrices and was\nable to prove quite a few",
    "start": "442110",
    "end": "452290"
  },
  {
    "text": "things about them. That they couldn't quite get\nto capacity the way he formulated them, but that they\ncould get very close.",
    "start": "452290",
    "end": "459270"
  },
  {
    "text": "They had a threshold a little\nbit below capacity. He came up with the APP decoding\nalgorithm for them",
    "start": "459270",
    "end": "465780"
  },
  {
    "text": "which is probably the first\ninstance of the sum-product algorithm in any literature,\ncertainly the first",
    "start": "465780",
    "end": "471640"
  },
  {
    "text": "that I'm aware of. And he simulated them.",
    "start": "471640",
    "end": "477340"
  },
  {
    "text": "At that time, what\nMIT had was-- over in Building 26 on the first\nfloor, where I think",
    "start": "477340",
    "end": "484890"
  },
  {
    "text": "there's a library now. It sticks out into the\nadjacent parking lot. That room was full of IBM\nequipment, 70, 90 computer.",
    "start": "484890",
    "end": "493360"
  },
  {
    "text": "And there were people\nin white coats who attended all that equipment. And by running that computer\nfor hours, he was able to",
    "start": "493360",
    "end": "500370"
  },
  {
    "text": "simulate low-density\nparity-check codes down to an error probability of about\nten to the minus fourth.",
    "start": "500370",
    "end": "505540"
  },
  {
    "text": "And he showed that he could get\ndown to 10 to the minus fourth, pretty close\nto capacity.",
    "start": "505540",
    "end": "512649"
  },
  {
    "text": "I don't remember exactly how\nclose, but it was enough to be convincing. ",
    "start": "512650",
    "end": "519719"
  },
  {
    "text": "Actually, in 1962 there was a\nlittle company form called Codex Corporation. ",
    "start": "519720",
    "end": "527300"
  },
  {
    "text": "It was what we would now\ncall a start-up. Back then, there was no\ntradition of start-ups.",
    "start": "527300",
    "end": "533670"
  },
  {
    "text": "And it was basically founded to\nexploit Gallager's patents, which he took out on low-density\nparity-check",
    "start": "533670",
    "end": "540550"
  },
  {
    "text": "codes, and Jim Massey's patents\non threshold decoding, which is an extremely simple\ndecoding technique that we",
    "start": "540550",
    "end": "547430"
  },
  {
    "text": "haven't even talked about,\nvery low complexity. And I joined that company in\n1965 when I finish my thesis.",
    "start": "547430",
    "end": "555130"
  },
  {
    "text": "And I was director of research\nand advanced product planning. And I can assure you that in\nthe 20 years that those",
    "start": "555130",
    "end": "561030"
  },
  {
    "text": "patents lived, we never\nconsidered once using Gallager's low-density\nparity-check codes, because",
    "start": "561030",
    "end": "566130"
  },
  {
    "text": "they were obviously far too\ncomplicated for the technology of the '60s and '70s.",
    "start": "566130",
    "end": "572160"
  },
  {
    "text": "We didn't have rooms full of\ncomputers to decode them. And more generally, in the\ncommunity, they were pretty",
    "start": "572160",
    "end": "580860"
  },
  {
    "text": "completely forgotten about. There's a key paper by Michael\nTanner in 1981",
    "start": "580860",
    "end": "587280"
  },
  {
    "text": "where he kind of-- that's the founding paper for\nthe field of codes on graphs.",
    "start": "587280",
    "end": "592360"
  },
  {
    "text": "he puts it all into a\ncodes-on-graphs context, develops all the\nbasic results. It's a great paper.",
    "start": "592360",
    "end": "597540"
  },
  {
    "text": "It too, was forgotten about. And the whole thing was pretty\nmuch forgotten about by us",
    "start": "597540",
    "end": "605180"
  },
  {
    "text": "until other people, outside the\ncommunity, rediscovered it right after turbo codes\nwere invented.",
    "start": "605180",
    "end": "610740"
  },
  {
    "text": "Turbo codes were first\npresented in 1993",
    "start": "610740",
    "end": "615750"
  },
  {
    "text": "at the ICC in Geneva. They had actually been invented\nsome four or five years before that by Claude\nBerrou in France.",
    "start": "615750",
    "end": "625350"
  },
  {
    "text": "And nobody could believe how\ngood the performance was. This guy is not even a\ncommunications guy.",
    "start": "625350",
    "end": "631690"
  },
  {
    "text": "He must have made a three\ndB mistake, didn't divide by two somewhere.",
    "start": "631690",
    "end": "639030"
  },
  {
    "text": "He showed you could get within\nabout a dB of capacity with two simple codes. And we'll see that\nin a second.",
    "start": "639030",
    "end": "646700"
  },
  {
    "text": "But, sure enough, people went\nand verified that these codes",
    "start": "646700",
    "end": "651830"
  },
  {
    "text": "work the way he said they did. And, all of a sudden, there's\nan explosion of interest. And low-density parity-check\ncodes were rediscovered by a",
    "start": "651830",
    "end": "661010"
  },
  {
    "text": "couple of people, notably David\nMacKay who also was a",
    "start": "661010",
    "end": "666290"
  },
  {
    "text": "physicist like Berrou,\nin England. But he had an interest in\ninformation theory, at least",
    "start": "666290",
    "end": "673010"
  },
  {
    "text": "he was trying to solve\nthe right problem. And he had similar ideas to\nwhat Gallager had had.",
    "start": "673010",
    "end": "679310"
  },
  {
    "text": "And he simulated them-- by now,\nyou can simulate these codes on a desktop computer--",
    "start": "679310",
    "end": "685430"
  },
  {
    "text": "and found that they got within a\ndB of capacity and so forth.",
    "start": "685430",
    "end": "692080"
  },
  {
    "text": "And so then we were off to the\nraces, and the whole paradigm of coding changed. But it certainly is an\nembarrassment to those of us",
    "start": "692080",
    "end": "698990"
  },
  {
    "text": "who were faithfully in the\nfield for 30, 35 years. Why didn't it occur to us that\nby the '90s the technology was",
    "start": "698990",
    "end": "706790"
  },
  {
    "text": "far enough advanced that we\ncould go back and look at what Gallager did and realize that\nthese were actually pretty",
    "start": "706790",
    "end": "714420"
  },
  {
    "text": "good codes and now\nimplementable? So I think that's\na nice story. It's kind of humbling to those\nof us in the field.",
    "start": "714420",
    "end": "721840"
  },
  {
    "text": "On the other hand, we can say\nthat, jeez, Gallager did it back in 1960. What's the big deal\nabout turbo codes?",
    "start": "721840",
    "end": "729430"
  },
  {
    "text": "Depends what perspective\nyou take. ",
    "start": "729430",
    "end": "737790"
  },
  {
    "text": "I never know whether I should\ntell a lot of stories or not so many stories in this class.",
    "start": "737790",
    "end": "744840"
  },
  {
    "text": "If you like more stories,\njust ask. ",
    "start": "744840",
    "end": "750000"
  },
  {
    "text": "Anyone have any questions\nat this point?  All right, low-density\nparity-check codes, Gallager",
    "start": "750000",
    "end": "756085"
  },
  {
    "text": "in 1961, forgotten until 1995,\nrediscovered by David MacKay,",
    "start": "756085",
    "end": "763660"
  },
  {
    "text": "Niclas Wiberg, and others. And this was what\nthey look like.",
    "start": "763660",
    "end": "770050"
  },
  {
    "text": "The basic idea is we have a\nparity-check representation of the code, a long code.",
    "start": "770050",
    "end": "778930"
  },
  {
    "text": "So the code is the set of all\ny such that yht equals 0.",
    "start": "778930",
    "end": "788760"
  },
  {
    "start": "788760",
    "end": "795690"
  },
  {
    "text": "And that's standard. And the idea now is that this\nparity-check matrix should be",
    "start": "795690",
    "end": "802569"
  },
  {
    "text": "low density or sparse.  In fact, the number\nof ones in it--",
    "start": "802570",
    "end": "809630"
  },
  {
    "text": "It's a matrix, so that you would\nthink a random matrix is 0s and ones.",
    "start": "809630",
    "end": "816560"
  },
  {
    "text": "m minus k by n matrix would\nhave a number of ones that goes up as n squared.",
    "start": "816560",
    "end": "823259"
  },
  {
    "text": "As n becomes large, let's make\nsure that the number of ones only goes up linearly\nwith n, as the block",
    "start": "823260",
    "end": "829580"
  },
  {
    "text": "length n becomes large. So sparse h means number\nof ones linear with n.",
    "start": "829580",
    "end": "847750"
  },
  {
    "text": "And we'll see that implies that\nthe complexity of the graph is linear with n.",
    "start": "847750",
    "end": "852830"
  },
  {
    "text": " The ones are going to\ncorrespond to the",
    "start": "852830",
    "end": "857970"
  },
  {
    "text": "edges in the graph. And we'll have a linear number\nof edges, also a linear number of nodes or vertices.",
    "start": "857970",
    "end": "867160"
  },
  {
    "text": "OK, in general, what does a\ncode like this look like?",
    "start": "867160",
    "end": "876360"
  },
  {
    "text": "We have y 0, y one through--",
    "start": "876360",
    "end": "881910"
  },
  {
    "text": "what does its graph look\nlike, I should say-- yn minus one. ",
    "start": "881910",
    "end": "889150"
  },
  {
    "text": "And then, so we're going to\nhave n symbols, which in",
    "start": "889150",
    "end": "894180"
  },
  {
    "text": "normal graphs we write\nas equals nodes. Then over here we're going to\nhave n minus k, a lesser",
    "start": "894180",
    "end": "900930"
  },
  {
    "text": "number of constraints or checks,\nwhich in our notation we've been writing like this.",
    "start": "900930",
    "end": "908470"
  },
  {
    "text": " And we're going to have an edge\nfor each one in here.",
    "start": "908470",
    "end": "916660"
  },
  {
    "text": "You can easily see that every\none in the parity-check matrix",
    "start": "916660",
    "end": "921800"
  },
  {
    "text": "ensures that it says that one of\nthe symbols participates in one of the checks.",
    "start": "921800",
    "end": "927700"
  },
  {
    "text": "And therefore, the number\nof edges is equal to the number of ones. So this is equal number\nof edges in graph.",
    "start": "927700",
    "end": "937920"
  },
  {
    "text": "Not counting these little half\nedges out over here, again. So there's some random\nnumber of edges.",
    "start": "937920",
    "end": "945195"
  },
  {
    "start": "945195",
    "end": "950825"
  },
  {
    "text": "We won't have them got\nto the same place. ",
    "start": "950825",
    "end": "956160"
  },
  {
    "text": "But this also is only\nlinear with n, here. ",
    "start": "956160",
    "end": "965300"
  },
  {
    "text": "And, in fact, let's choose\nthese edges.",
    "start": "965300",
    "end": "974680"
  },
  {
    "text": "These edges are like a telephone\nswitchboard. It's just a giant plug board\nwhere everything that goes out",
    "start": "974680",
    "end": "983830"
  },
  {
    "text": "here, you can consider\ngoing into a socket. ",
    "start": "983830",
    "end": "989660"
  },
  {
    "text": "So let's draw, for instance, for\na regular code, let's draw the same number of\nsockets going out",
    "start": "989660",
    "end": "997060"
  },
  {
    "text": "for each of the symbols. Each symbol is going to\nparticipate in the same number of checks.",
    "start": "997060",
    "end": "1002070"
  },
  {
    "text": "Each one is going to have the\nsame degree, so that's why, in graph terms, it's regular.",
    "start": "1002070",
    "end": "1007490"
  },
  {
    "text": "And each one of these checks,\nwe're also going to say has the same degree.",
    "start": "1007490",
    "end": "1012720"
  },
  {
    "text": " So this was basically\nthe way Gallager",
    "start": "1012720",
    "end": "1018319"
  },
  {
    "text": "constructed codes, regular. We'll later see if there's an\nadvantage to making these somewhat irregular, these\ndegree distributions.",
    "start": "1018320",
    "end": "1027300"
  },
  {
    "text": "But this is certainly\nthe simplest case. All right, how do we make a\nrandom parity-check code?",
    "start": "1027300",
    "end": "1037859"
  },
  {
    "text": "So that we're going to\nspecify n, n minus k. We're going to specify\nthese degrees.",
    "start": "1037859",
    "end": "1044459"
  },
  {
    "text": "So that's not random. But we'll connect the edges\nthrough a big switch board",
    "start": "1044460",
    "end": "1052840"
  },
  {
    "text": "which is denoted by pi, which\nstands for permutations.",
    "start": "1052840",
    "end": "1059659"
  },
  {
    "text": "This is basically just\na permutation. We've got to have the same\nnumber of sockets on this side",
    "start": "1059660",
    "end": "1064740"
  },
  {
    "text": "as on this side. And this is a just a reordering\nof these sockets. That's what a telephone\nswitchboard does.",
    "start": "1064740",
    "end": "1071580"
  },
  {
    "text": "Or it's very often in the\nliterature called an",
    "start": "1071580",
    "end": "1077130"
  },
  {
    "text": "interleaver, but, probably,\npermutation would've been a",
    "start": "1077130",
    "end": "1082160"
  },
  {
    "text": "better word. All right, so one way of doing\nit is just to take this edge",
    "start": "1082160",
    "end": "1091840"
  },
  {
    "text": "here, this socket here and, at\nrandom, we have-- let's say,",
    "start": "1091840",
    "end": "1097640"
  },
  {
    "text": "e, for number of edges-- e\nsockets over here and just pick one of those sockets\nat random.",
    "start": "1097640",
    "end": "1105610"
  },
  {
    "text": "Take the next one and take the\ne minus one that are left and connect that to one of the the\ne minus one at random.",
    "start": "1105610",
    "end": "1112930"
  },
  {
    "text": "So this would give you one of\nthe e factorial permutations",
    "start": "1112930",
    "end": "1118160"
  },
  {
    "text": "of e objects.  And it'll give you one\nof them equiprobably.",
    "start": "1118160",
    "end": "1124710"
  },
  {
    "text": "So we're basically talking\nabout an equiprobable distribution over all possible\npermutations of e elements.",
    "start": "1124710",
    "end": "1134570"
  },
  {
    "text": "All right, so we consider all\nthese are equally likely when we come to our analysis.",
    "start": "1134570",
    "end": "1140530"
  },
  {
    "text": "This is why these codes are\ncalled probabilistic. We set up some elements of their\nstructure, but then let",
    "start": "1140530",
    "end": "1147900"
  },
  {
    "text": "others be chosen randomly. Clearly it's not going to matter\nfor the complexity of",
    "start": "1147900",
    "end": "1153310"
  },
  {
    "text": "the decoding algorithm\nhow this is done. It might have something to do\nwith the performance of the decoding algorithm, but any\ndecoding algorithm is going to",
    "start": "1153310",
    "end": "1161559"
  },
  {
    "text": "work the same way. It's just a matter of when you\nsend a message in here, where does it come out here\nor vice versa.",
    "start": "1161560",
    "end": "1167610"
  },
  {
    "text": "So it doesn't really\naffect complexity. ",
    "start": "1167610",
    "end": "1173100"
  },
  {
    "text": "Let's see, there has to be some\nrelation between the left",
    "start": "1173100",
    "end": "1178530"
  },
  {
    "text": "degree d lambda and the right\ndegree d rho here in order",
    "start": "1178530",
    "end": "1185490"
  },
  {
    "text": "that we have the same number\nof edges on each side. We have e equals n times\nd lambda, if we",
    "start": "1185490",
    "end": "1197370"
  },
  {
    "text": "look at the left side. But it's also equal to n minus\nk times the degree on the",
    "start": "1197370",
    "end": "1205360"
  },
  {
    "text": "right side. Again, I'm only counting the\ninternal degree here and leaving aside the\nexternal guy.",
    "start": "1205360",
    "end": "1213460"
  },
  {
    "text": "And this gives us the following\nrelationship that n",
    "start": "1213460",
    "end": "1219020"
  },
  {
    "text": "minus k over n is equal\nd lambda over d rho.",
    "start": "1219020",
    "end": "1227850"
  },
  {
    "text": "Or, equivalently, with this is\none minus the rate of the code, or we can write rate\nequals one minus d",
    "start": "1227850",
    "end": "1238850"
  },
  {
    "text": "lambda over d rho.  So that by deciding what left\ndegree and what right degree",
    "start": "1238850",
    "end": "1246490"
  },
  {
    "text": "to have, we're basically\nenforcing this relationship which comes out as the\nrate of the code.",
    "start": "1246490",
    "end": "1254130"
  },
  {
    "text": "For instance, the choice that\nwe're going to talk about throughout is we're going to\ntake a left degree equal to",
    "start": "1254130",
    "end": "1259429"
  },
  {
    "text": "three, right degree equal\nto six, as I drew it. If you do that, then you're\ngoing to get a code of",
    "start": "1259430",
    "end": "1266000"
  },
  {
    "text": "nominal rate 1/2.  It's only a nominal\nrate because what",
    "start": "1266000",
    "end": "1272990"
  },
  {
    "text": "could happen here?  I'm basically choosing a random\nparity-check matrix,",
    "start": "1272990",
    "end": "1279650"
  },
  {
    "text": "and there's nothing that ensures\nthat all the rows of this parity-check matrix are\ngoing to be independent.",
    "start": "1279650",
    "end": "1287020"
  },
  {
    "text": "So I could have fewer than n\nminus k independent rows in the matrix, which would actually\nmean the rate would",
    "start": "1287020",
    "end": "1295730"
  },
  {
    "text": "be higher than my design\nrate, my nominal rate. In fact, you can ignore\nthis possibility.",
    "start": "1295730",
    "end": "1302755"
  },
  {
    "text": " It's very low probability even\nif you choose it at random.",
    "start": "1302755",
    "end": "1308590"
  },
  {
    "text": "If it does happen, people are\ngoing to forget about the dependent row and pick another\nindependent row.",
    "start": "1308590",
    "end": "1315039"
  },
  {
    "text": "So I won't make a big deal. We'll just call this the rate.",
    "start": "1315040",
    "end": "1320690"
  },
  {
    "text": " So if this were three here but\nonly four here, then we would",
    "start": "1320690",
    "end": "1330510"
  },
  {
    "text": "have a rate 1/4 code.  Well, we'd have to have 3/4s\nas many checks as we have",
    "start": "1330510",
    "end": "1337789"
  },
  {
    "text": "symbols in order for everything\nto add up.",
    "start": "1337790",
    "end": "1343040"
  },
  {
    "text": " So that's really,\nbasically, it.",
    "start": "1343040",
    "end": "1350309"
  },
  {
    "text": "Let's just specify the degrees\non the left, the degree on the",
    "start": "1350310",
    "end": "1356280"
  },
  {
    "text": "right, pick our permutation\nat random, pick n or e.",
    "start": "1356280",
    "end": "1364120"
  },
  {
    "text": "We've designed a low-density\nparity-check code.",
    "start": "1364120",
    "end": "1369150"
  },
  {
    "text": "And now, how do we\ndo we decode it? ",
    "start": "1369150",
    "end": "1376098"
  },
  {
    "text": "Well, we use the sum-product\nalgorithm. We've got a code on a graph. In fact, it's a very simple\ngraph, notice it's",
    "start": "1376098",
    "end": "1382370"
  },
  {
    "text": "characteristic. It's, again, just got equality\nnodes and zero-sum nodes or",
    "start": "1382370",
    "end": "1388530"
  },
  {
    "text": "check nodes. These are really the\nsimplest codes. We could, more generally, have\nmore elaborate codes here.",
    "start": "1388530",
    "end": "1396450"
  },
  {
    "text": "That's one of the things Tanner\ndid in is 1981 paper. But this is very simple.",
    "start": "1396450",
    "end": "1404910"
  },
  {
    "text": "All of our internal variables\nare binary. ",
    "start": "1404910",
    "end": "1409990"
  },
  {
    "text": "I, for one, thought that it\nwould be necessary to go beyond binary internal variables\nin order to get to",
    "start": "1409990",
    "end": "1415160"
  },
  {
    "text": "capacity but that proved\nnot to be the case. Really, this structure is\nall you need to get to",
    "start": "1415160",
    "end": "1422180"
  },
  {
    "text": "capacity it turns out. Except for one thing,\nyou need to make these degrees irregular.",
    "start": "1422180",
    "end": "1429640"
  },
  {
    "text": "And for the most part, you only\nneed to make the left degrees irregular. So we'll get far enough\nto see why that is",
    "start": "1429640",
    "end": "1438320"
  },
  {
    "text": "going to do the trick.  But right now, I talked about\nthe decoding algorithm.",
    "start": "1438320",
    "end": "1444630"
  },
  {
    "text": "So the decoding algorithm is\npretty much what you would think, I would hope. Now that you've seen some\nproduct decoding.",
    "start": "1444630",
    "end": "1451910"
  },
  {
    "text": "You receive something on each of\nthese lines, depending what the channel is. If it's an additive white\nGaussian noise channel, you",
    "start": "1451910",
    "end": "1459140"
  },
  {
    "text": "get a real number, received\nvector that gives you some intrinsic information about the\nrelative likelihoods of 0",
    "start": "1459140",
    "end": "1468549"
  },
  {
    "text": "and one on each of\nthese lines. So each of these points, you get\nan in going message based",
    "start": "1468550",
    "end": "1474520"
  },
  {
    "text": "on what you receive. At a repetition node that\nmessage is simply propagated,",
    "start": "1474520",
    "end": "1484270"
  },
  {
    "text": "if you look at the equations of\nthe sum-product algorithm. Repetition nodes just propagate\nwhat they receive at",
    "start": "1484270",
    "end": "1491480"
  },
  {
    "text": "one terminal on all the\noutput terminals. ",
    "start": "1491480",
    "end": "1496629"
  },
  {
    "text": "All the d minus one terminals\nare determined by the by one terminal. So we get the same thing going\nas and output message.",
    "start": "1496630",
    "end": "1503179"
  },
  {
    "text": "This, very often, is drawn\nas a Tanner graph. In that case, all we have\nhere is symbols.",
    "start": "1503180",
    "end": "1508690"
  },
  {
    "text": "That's natural to just take the\nlikelihoods of the symbols and send them out. So we haven't done anything\nmore than that.",
    "start": "1508690",
    "end": "1516350"
  },
  {
    "text": "These messages all arrive here\nas incoming messages from",
    "start": "1516350",
    "end": "1521970"
  },
  {
    "text": "various far and distant lands. ",
    "start": "1521970",
    "end": "1530090"
  },
  {
    "text": "To find the outgoing message\nsay, on this line here, what's our rule? ",
    "start": "1530090",
    "end": "1537890"
  },
  {
    "text": "Our rule is to take the incoming\nmessages on all d",
    "start": "1537890",
    "end": "1543410"
  },
  {
    "text": "minus one of these nodes and\ncombine their likelihoods",
    "start": "1543410",
    "end": "1548920"
  },
  {
    "text": "according to which of these is\nconsistent with a 0 output",
    "start": "1548920",
    "end": "1554710"
  },
  {
    "text": "here, and which of these\nis consistent with the one going out here. We get a bunch of weights\nfor 0, and a bunch",
    "start": "1554710",
    "end": "1559830"
  },
  {
    "text": "of weights for one. We add them all up. And that gives us now, a\nre-computed likelihood.",
    "start": "1559830",
    "end": "1567290"
  },
  {
    "text": "A message consisting of\nprobability of 0 given what we've seen so far, and\nprobability of one given what",
    "start": "1567290",
    "end": "1573390"
  },
  {
    "text": "we've seen so far. But now it goes out. Hopefully that's got some\nimproved information in it now",
    "start": "1573390",
    "end": "1581740"
  },
  {
    "text": "coming from all different parts\nof the graph, extrinsic. So this, eventually, will come\nback somewhere say, here and",
    "start": "1581740",
    "end": "1590430"
  },
  {
    "text": "similarly on all the\nother lines. And now this will give you\nadditional information.",
    "start": "1590430",
    "end": "1600000"
  },
  {
    "text": "You combine these, and now what\nyou have coming out here is a combination of what you had\ncoming in here, which was",
    "start": "1600000",
    "end": "1607590"
  },
  {
    "text": "originally a state of complete\nignorance, but now you combine these you get more information\ngoing out and so forth.",
    "start": "1607590",
    "end": "1618330"
  },
  {
    "text": "So you iterate. You basically do a left side\niteration, then a right side iteration, a left\nside iteration,",
    "start": "1618330",
    "end": "1624505"
  },
  {
    "text": "a right side iteration. Hopefully the quality of your\nAPP vectors is continually",
    "start": "1624505",
    "end": "1631600"
  },
  {
    "text": "increasing during this. You're somehow incorporating\nmore and more information.",
    "start": "1631600",
    "end": "1636940"
  },
  {
    "text": "You're hopefully converging. And so, you just keep going\nback and forth.",
    "start": "1636940",
    "end": "1643929"
  },
  {
    "text": "And low-density parity-check\ncodes you can do this typically 100 times,\n200 times.",
    "start": "1643930",
    "end": "1649490"
  },
  {
    "text": "It's a very simple\ncalculation. You can do it a lot. So you can do that.",
    "start": "1649490",
    "end": "1656070"
  },
  {
    "text": "When do you stop?  A very popular stopping\nrule is to stop as",
    "start": "1656070",
    "end": "1665370"
  },
  {
    "text": "soon as you've got-- If you made hard decisions\non the basis of all these messages, that would give\nyou binary values.",
    "start": "1665370",
    "end": "1673030"
  },
  {
    "text": "And if all those binary values\ncheck at all these places,",
    "start": "1673030",
    "end": "1679080"
  },
  {
    "text": "then that's a code word. Or that's a trajectory that's\nconsistent with the code word.",
    "start": "1679080",
    "end": "1684640"
  },
  {
    "text": "Basically, everything that's\nover here then has to be a code word. So whenever all the checks,\ncheck just based on hard",
    "start": "1684640",
    "end": "1692940"
  },
  {
    "text": "decisions, you stop. So if there's very little noise\nto start with, this can happen very quickly\nand terminate the",
    "start": "1692940",
    "end": "1698960"
  },
  {
    "text": "calculation well short. Or you have some maximum number\nof iterations you're",
    "start": "1698960",
    "end": "1704296"
  },
  {
    "text": "going to allow yourself. If you go 200 iterations, and\nthese things still don't",
    "start": "1704296",
    "end": "1710309"
  },
  {
    "text": "check, probably you would\nsay this, I've detected a decoding error.",
    "start": "1710310",
    "end": "1716280"
  },
  {
    "text": "One characteristic of\nlow-density parity-check codes, is they tend to have\ngood minimum distance.",
    "start": "1716280",
    "end": "1723730"
  },
  {
    "text": "They tend to have a minimum\ndistance that's sort of what you would get in a random-like\ncode, which goes up linearly",
    "start": "1723730",
    "end": "1731059"
  },
  {
    "text": "with the block length. So for a rate 1/2 of code of\nlength a 1,000, a random code",
    "start": "1731060",
    "end": "1741320"
  },
  {
    "text": "would have a minimum distance\nof about 110. And a low-density parity-check\ncode would typically have a",
    "start": "1741320",
    "end": "1750440"
  },
  {
    "text": "large, maybe not 110, but a\nlarge minimum distance, unless you were just unlucky.",
    "start": "1750440",
    "end": "1757200"
  },
  {
    "text": "So the probability of your\nactually converging to an incorrect code word is tiny.",
    "start": "1757200",
    "end": "1762850"
  },
  {
    "text": "You don't actually make\ndecoding errors. All of your errors\nare detectable. Which is a nice systems\nadvantage some of the time for",
    "start": "1762850",
    "end": "1770020"
  },
  {
    "text": "low-density parity-check\ncodes. Yes? AUDIENCE: [INAUDIBLE]",
    "start": "1770020",
    "end": "1776110"
  },
  {
    "text": "possible that if you add one\nvariation [INAUDIBLE] PROFESSOR: Possible in principal\nbut extraordinarily",
    "start": "1776110",
    "end": "1782690"
  },
  {
    "text": "improbable. And once you've converged to a\ncode word, basically, you've",
    "start": "1782690",
    "end": "1790670"
  },
  {
    "text": "got all of all the messages\nlined up in the same way.",
    "start": "1790670",
    "end": "1795790"
  },
  {
    "text": "It's like a piece of iron ore\nwhere you've got all of magnets going in the\nsame direction.",
    "start": "1795790",
    "end": "1804050"
  },
  {
    "text": "What is there in that that's\ngoing to cause them to flip? There's no impetus for\nany of these to--",
    "start": "1804050",
    "end": "1813040"
  },
  {
    "text": "They'll tend to get more and\nmore convinced that what they're doing is right. They'll reinforce each other.",
    "start": "1813040",
    "end": "1820330"
  },
  {
    "text": "So, as a practical matter, I\ndon't think you would ever--",
    "start": "1820330",
    "end": "1826190"
  },
  {
    "text": "The kind of landscape of these\ncodes is that there's large",
    "start": "1826190",
    "end": "1831840"
  },
  {
    "text": "areas of the parameters where\nit doesn't tell you to go in any particular direction. And then there are deep wells\naround code words.",
    "start": "1831840",
    "end": "1843010"
  },
  {
    "text": "So, typically, the decoding\nalgorithm is kind of wandering around the desert here, but then\nonce it gets into a well,",
    "start": "1843010",
    "end": "1851300"
  },
  {
    "text": "it goes wrong boom, down to\nthe bottom of that well. And once it's down here, it's\nextremely unlikely that it'll",
    "start": "1851300",
    "end": "1861360"
  },
  {
    "text": "spontaneously work itself out\ncome back over here again. ",
    "start": "1861360",
    "end": "1867700"
  },
  {
    "text": "Powerful basins of\nattraction here. Which is another reason why when\nwe design the code, we're",
    "start": "1867700",
    "end": "1876180"
  },
  {
    "text": "basically designing\nthis landscape. And we can design it to-- ",
    "start": "1876180",
    "end": "1884570"
  },
  {
    "text": "when it starts to converge,\nit really converges fast. That's why some classes\nof these codes are",
    "start": "1884570",
    "end": "1890019"
  },
  {
    "text": "called tornado codes. They wander for a while, and\nthen when they get the idea,",
    "start": "1890020",
    "end": "1895040"
  },
  {
    "text": "then [WOOM], everything\nchecks very quickly. Yes?",
    "start": "1895040",
    "end": "1900070"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ",
    "start": "1900070",
    "end": "1906516"
  },
  {
    "text": "so you would compute the-- ",
    "start": "1906516",
    "end": "1911850"
  },
  {
    "text": "at each [UNINTELLIGIBLE] ",
    "start": "1911850",
    "end": "1917650"
  },
  {
    "text": "calculate one of the so do you\ncalculate all of the messages",
    "start": "1917650",
    "end": "1924853"
  },
  {
    "text": "that go back from each\n[UNINTELLIGIBLE] first and then propagate then back-- PROFESSOR: Yes, correct.",
    "start": "1924853",
    "end": "1929899"
  },
  {
    "text": "I'm sorry. We nominally calculate this one,\nbut at the same time, we",
    "start": "1929900",
    "end": "1935570"
  },
  {
    "text": "calculate every other one. All e of them. Each one of these is based\non the d rho minus one--",
    "start": "1935570",
    "end": "1944920"
  },
  {
    "text": "other inputs. So it ignores the message\nthat's coming in on that",
    "start": "1944920",
    "end": "1950780"
  },
  {
    "text": "particular edge. It uses all the other messages\nto give and extrinsic",
    "start": "1950780",
    "end": "1958029"
  },
  {
    "text": "message going out. Which you could combine back\nhere or here, there the same",
    "start": "1958030",
    "end": "1964520"
  },
  {
    "text": "thing, to give you your best\noverall APP right now from",
    "start": "1964520",
    "end": "1969660"
  },
  {
    "text": "your right going in your\nleft going messages. But you don't. You now use this new\ninformation in your",
    "start": "1969660",
    "end": "1978000"
  },
  {
    "text": "next round over here. And the same thing\non this side. You always compute one on the\nbasis of all of the others.",
    "start": "1978000",
    "end": "1984419"
  },
  {
    "text": " And the initialization is that\ninitially you have no",
    "start": "1984420",
    "end": "1993200"
  },
  {
    "text": "information coming this way. You can represent that by an\nAPP vector that's 1/2, 1/2.",
    "start": "1993200",
    "end": "1999380"
  },
  {
    "text": "Probability of one is 1/2,\nprobability of 0 is 1/2.",
    "start": "1999380",
    "end": "2005200"
  },
  {
    "text": "Any other questions?  OK, so that's how it works.",
    "start": "2005200",
    "end": "2012880"
  },
  {
    "text": "And it works great. And, as we'll see,\neven with regular",
    "start": "2012880",
    "end": "2020409"
  },
  {
    "text": "codes you can get within-- additive white Gaussian noise\nchannel terms, you can get",
    "start": "2020410",
    "end": "2027910"
  },
  {
    "text": "within about a dB, a dB and\na half of capacity. And merely by making these\ndegree distributions",
    "start": "2027910",
    "end": "2035659"
  },
  {
    "text": "irregular, this is how,\nSae-Young Chung got the results that I showed, I think,\nin chapter one, where",
    "start": "2035660",
    "end": "2042480"
  },
  {
    "text": "you get within 0.04 dB of white\nGaussian noise capacity and that's it.",
    "start": "2042480",
    "end": "2049500"
  },
  {
    "text": "So we knew how to get to\ncapacity since 1961 almost, we just didn't realize it.",
    "start": "2049500",
    "end": "2054839"
  },
  {
    "text": "Yeah? AUDIENCE: With the LDPC regular\n[UNINTELLIGIBLE]",
    "start": "2054839",
    "end": "2060539"
  },
  {
    "text": "PROFESSOR: I'm sorry,\nI missed-- AUDIENCE: With regular LDPC\nyou can still have a certain gap or?",
    "start": "2060539",
    "end": "2068646"
  },
  {
    "text": "PROFESSOR: With regular LDPC\nthere's a threshold below which the algorithm works,\nabove which the algorithm",
    "start": "2068646",
    "end": "2075520"
  },
  {
    "text": "doesn't work, as we'll\nsee shortly. And the threshold\nis not capacity.",
    "start": "2075520",
    "end": "2081169"
  },
  {
    "text": "It's somewhat below capacity. By going to irregular you can\nmake that threshold as close",
    "start": "2081170",
    "end": "2088210"
  },
  {
    "text": "to capacity as you like. You can never make it\nequal to capacity. ",
    "start": "2088210",
    "end": "2097110"
  },
  {
    "text": "All right, so let's talk\nabout turbo codes. ",
    "start": "2097110",
    "end": "2102240"
  },
  {
    "text": "None of these ideas is very\ndifficult, which is, again, humbling to those of us in the\ncommunity who failed to think",
    "start": "2102240",
    "end": "2109130"
  },
  {
    "text": "of them for 35 years. ",
    "start": "2109130",
    "end": "2114300"
  },
  {
    "text": "And I really hope some historian\nof science someday does a nice job on culture, and\nwhy some people were blind",
    "start": "2114300",
    "end": "2122990"
  },
  {
    "text": "to this and some people\nsaw it and so forth. OK, so this is Berrou, Glavieux,\nand Thitimajshima--",
    "start": "2122990",
    "end": "2132569"
  },
  {
    "text": "which I always have problems\nspelling-- in 1993.",
    "start": "2132570",
    "end": "2138470"
  },
  {
    "text": "And their idea was pretty\nsimple too. ",
    "start": "2138470",
    "end": "2144290"
  },
  {
    "text": "Their idea is based on two, rate\n1/2, convolutional codes.",
    "start": "2144290",
    "end": "2149760"
  },
  {
    "text": "Let me use notation. We have a certain u of\nd, which is a set",
    "start": "2149760",
    "end": "2156780"
  },
  {
    "text": "of information bits. ",
    "start": "2156780",
    "end": "2167650"
  },
  {
    "text": "And to make a rate 1/2\nconvolutional code, all I have",
    "start": "2167650",
    "end": "2176770"
  },
  {
    "text": "to do is pass that through\na certain g of d. So I'm saying my generator\nmatrix for the convolutional",
    "start": "2176770",
    "end": "2184960"
  },
  {
    "text": "code is one and g of d. That'll make a rate 1/2 code.",
    "start": "2184960",
    "end": "2191580"
  },
  {
    "text": "And this, I'm going to call that\na parity bit sequence,",
    "start": "2191580",
    "end": "2200260"
  },
  {
    "text": "occurring at the same rate as\nthe information bit sequence. ",
    "start": "2200260",
    "end": "2208090"
  },
  {
    "text": "Easy enough, now, let me take\nthis same information bit",
    "start": "2208090",
    "end": "2213720"
  },
  {
    "text": "sequence, and let me put it\nthrough a large permutation. Which, again, I'll\nrepresent by pi.",
    "start": "2213720",
    "end": "2221200"
  },
  {
    "text": "And I want you to think of this\nas taking a 1,000 bit block and mixing it all up\nor something like that.",
    "start": "2221200",
    "end": "2228200"
  },
  {
    "text": "Actually, it's better to use\na so-called convolutional permutation which is kind of\nstream based, continuous, the",
    "start": "2228200",
    "end": "2236300"
  },
  {
    "text": "same way that convolutional\ncodes are. All right, but it's basically\nthe same sequence permuted.",
    "start": "2236300",
    "end": "2244900"
  },
  {
    "text": "And let's also put that through\nanother g prime of d,",
    "start": "2244900",
    "end": "2251859"
  },
  {
    "text": "which, very often, is g of d. So I'll just call that\ng of d again. And this is second parity\nbit sequence.",
    "start": "2251860",
    "end": "2260380"
  },
  {
    "text": " And this all together, I will\ncall a rate 1/3 code.",
    "start": "2260380",
    "end": "2271140"
  },
  {
    "text": "For every one information\nbit in, there are three information bits out. Same sense as convolutional.",
    "start": "2271140",
    "end": "2278190"
  },
  {
    "text": "All right, so the second\ncode, g prime of d is one g prime of d.",
    "start": "2278190",
    "end": "2284130"
  },
  {
    "text": " And the interesting thing is,\nthese codes don't need to be",
    "start": "2284130",
    "end": "2293640"
  },
  {
    "text": "very complicated. One thing they realized is\nthey do want this to be a",
    "start": "2293640",
    "end": "2299519"
  },
  {
    "text": "recursive code. In other words, g of d should\nlook like n of d over d of d.",
    "start": "2299520",
    "end": "2311700"
  },
  {
    "text": "And one particular purpose of\nthat is that so a single information bit will\nring forever.",
    "start": "2311700",
    "end": "2318279"
  },
  {
    "text": "The impulse response\nto a single information bit is infinite. It takes at least two.",
    "start": "2318280",
    "end": "2324710"
  },
  {
    "text": "And you can prove to yourself\nthere's always some sequence of length two in order to get\na finite number of parity",
    "start": "2324710",
    "end": "2331780"
  },
  {
    "text": "bits, a finite number\nof nonzero parity bits out of here. And when those two bits are\npermuted, they're going to",
    "start": "2331780",
    "end": "2338010"
  },
  {
    "text": "come up in totally different\nplaces, so they are going to look like two individual\ninformation bits down here,",
    "start": "2338010",
    "end": "2343440"
  },
  {
    "text": "and therefore they're going to\nring for very long time. The basic idea is, you don't\nwant an information sequence",
    "start": "2343440",
    "end": "2349349"
  },
  {
    "text": "which gives you a short code\nword out of here and a short code word out of here.",
    "start": "2349350",
    "end": "2354430"
  },
  {
    "text": "And making it recursive, have\nfeedback is what that means,",
    "start": "2354430",
    "end": "2360920"
  },
  {
    "text": "is what you need to do\nto prevent that. It also gives you better codes,\nbut I don't think that's really why--",
    "start": "2360920",
    "end": "2367869"
  },
  {
    "text": "If you have g of d over n of\nd, this is going to be equivalent to the code we're\nmultiplying to the",
    "start": "2367870",
    "end": "2375869"
  },
  {
    "text": "non-recursive feedback\nfree code, which is d of d, n of d, right?",
    "start": "2375870",
    "end": "2380910"
  },
  {
    "text": "We worked all that out. It's equivalent to the code\nwhere you multiply through by the denominator.",
    "start": "2380910",
    "end": "2386550"
  },
  {
    "text": "And so you get the same code\nwith d of d, n of d, but you don't want to do that, because\nyou are concerned here about",
    "start": "2386550",
    "end": "2393770"
  },
  {
    "text": "the input output relationship\nbetween input bits and the",
    "start": "2393770",
    "end": "2399280"
  },
  {
    "text": "encoded bits. And you want the information bit\nsequence to come through",
    "start": "2399280",
    "end": "2405829"
  },
  {
    "text": "by itself, because it's\ngoing to be reused. You want the information bit\nsequence to be in common",
    "start": "2405830",
    "end": "2411980"
  },
  {
    "text": "between these two. That's going to be the length\nwhen we decode these codes.",
    "start": "2411980",
    "end": "2417780"
  },
  {
    "text": "Basically, the messages\nconcerning the information bit sequences is what's going\nto go back and forth",
    "start": "2417780",
    "end": "2422820"
  },
  {
    "text": "between the two codes. ",
    "start": "2422820",
    "end": "2427960"
  },
  {
    "text": "All right, do you get\nthe set up here? I gave you a very different\nperspective on it by drawing",
    "start": "2427960",
    "end": "2434060"
  },
  {
    "text": "the graph of this code. I mean this is a graph\nof the code, but it's not one we want.",
    "start": "2434060",
    "end": "2439540"
  },
  {
    "text": " Let's draw the graph\nof this code.",
    "start": "2439540",
    "end": "2446210"
  },
  {
    "text": "So turbo code graph, I'll draw\na normal graph, but again, if",
    "start": "2446210",
    "end": "2453020"
  },
  {
    "text": "you like to do it as a Tanner\nstyle, be my guest.",
    "start": "2453020",
    "end": "2458160"
  },
  {
    "text": "All right, this first code-- ",
    "start": "2458160",
    "end": "2467490"
  },
  {
    "text": "Let me do this in two steps. First of all, a rate\n1/2 code graph.",
    "start": "2467490",
    "end": "2472839"
  },
  {
    "text": "So for one of these code,\nwhat does it look like? It's a trellis graph. Which in the normal graph\npicture is a very",
    "start": "2472840",
    "end": "2479549"
  },
  {
    "text": "simple chain graph. It looks like this.",
    "start": "2479550",
    "end": "2485589"
  },
  {
    "text": "Here's the information\nsequence. Here are the states. ",
    "start": "2485590",
    "end": "2491930"
  },
  {
    "text": "So these might be\nsimple codes. These are typically four to 16\nstates, so two to four bits of",
    "start": "2491930",
    "end": "2498850"
  },
  {
    "text": "state information, not\nvery complicated. ",
    "start": "2498850",
    "end": "2504300"
  },
  {
    "text": "So this is what it looks like. We get one of these for each.",
    "start": "2504300",
    "end": "2510500"
  },
  {
    "text": "This is the branch constraint\nfor each unit of time. This would be y0, y1, y2, y3,\nyou get two bits out for each",
    "start": "2510500",
    "end": "2521500"
  },
  {
    "text": "unit of time.  And this case, one of these is\nactually the input at that",
    "start": "2521500",
    "end": "2528990"
  },
  {
    "text": "time, u0, u2. Or we could adopt some other\nindexing scheme.",
    "start": "2528990",
    "end": "2537190"
  },
  {
    "text": "It's systematic so, we think of\nthese as the inputs sort of",
    "start": "2537190",
    "end": "2542940"
  },
  {
    "text": "driving an output. So maybe a better way\nto do this is--",
    "start": "2542940",
    "end": "2549510"
  },
  {
    "text": "an alternative way of doing\nit is like this. ",
    "start": "2549510",
    "end": "2556740"
  },
  {
    "text": "But it's all the same\nthing, right? It's what you've already seen. So I just want you to get used\nto this way of writing the",
    "start": "2556740",
    "end": "2565330"
  },
  {
    "text": "graph of a trellis of a\nrate 1/2 systematic convolutional code. Here are these systematic bits,\nwhich are both inputs",
    "start": "2565330",
    "end": "2573090"
  },
  {
    "text": "and, ultimately, outputs\non to the channel. And these are the parity\nbits which are only",
    "start": "2573090",
    "end": "2579610"
  },
  {
    "text": "output onto the channel. All right, and these\nare the branch constraints for each time.",
    "start": "2579610",
    "end": "2585650"
  },
  {
    "text": "And these are the state's\nbasis for each time. So that I can always draw\nthat, that way.",
    "start": "2585650",
    "end": "2592570"
  },
  {
    "text": "All right, now up here, I\nreally have two of these codes, possibly identical.",
    "start": "2592570",
    "end": "2600590"
  },
  {
    "text": "And what's the connection\nbetween them? The connection between them\nis that they have the same",
    "start": "2600590",
    "end": "2606460"
  },
  {
    "text": "information, but in some\nrandom order, some pseudo-random interleaved\norder.",
    "start": "2606460",
    "end": "2614760"
  },
  {
    "text": "So I draw a graph of that,\nagain, focus on the",
    "start": "2614760",
    "end": "2620790"
  },
  {
    "text": "interleaver. Make it nice and big now. There's always going to be a big\ninterleaver in the center",
    "start": "2620790",
    "end": "2626790"
  },
  {
    "text": "of all our charts. This is always the random-like\nelement. Now, let me draw my first\nconvolutional code over here.",
    "start": "2626790",
    "end": "2634980"
  },
  {
    "start": "2634980",
    "end": "2640250"
  },
  {
    "text": "I'm just going to tilt\nthis on its side. I'm going to put the parity bits\non this side, the first",
    "start": "2640250",
    "end": "2646210"
  },
  {
    "text": "parity sequence.  So now this is running\nin time either up to",
    "start": "2646210",
    "end": "2652660"
  },
  {
    "text": "down or down to up. I don't care. So forth, down to here,\net cetera, dot, dot,",
    "start": "2652660",
    "end": "2661460"
  },
  {
    "text": "dot, dot, dot, dot-- And I'll put the information\nbit over here. And I'm going to do\nit in this way.",
    "start": "2661460",
    "end": "2667829"
  },
  {
    "text": "The information bits\nare, first of all, used in this code. So I have a little equality.",
    "start": "2667830",
    "end": "2675356"
  },
  {
    "text": "So these are going to be\nin my information bits. But then they're going to go\nthrough this permutation and",
    "start": "2675356",
    "end": "2681350"
  },
  {
    "text": "also be used in another code\nover on the right side. ",
    "start": "2681350",
    "end": "2690140"
  },
  {
    "text": "Is this clear? ",
    "start": "2690140",
    "end": "2695740"
  },
  {
    "text": "So this is everything\nup to here. I'm about to go into\nthe interleaver. ",
    "start": "2695740",
    "end": "2703760"
  },
  {
    "text": "Stop me with questions\nif anything is mysterious about this. OK, after some huge\npermutation, they",
    "start": "2703760",
    "end": "2711850"
  },
  {
    "text": "come out over here. And now these are information\nbits that go into another",
    "start": "2711850",
    "end": "2717180"
  },
  {
    "text": "identical trellis-- or could be identical. So we have a trellis over on\nthis side that's connected to",
    "start": "2717180",
    "end": "2728430"
  },
  {
    "text": "one parity bit and one\ninformation bit. It's another rate 1/2 trellis.",
    "start": "2728430",
    "end": "2735060"
  },
  {
    "text": "This is parity bits, these\nare, again, info bits.",
    "start": "2735060",
    "end": "2742910"
  },
  {
    "text": "Same information bit sequence\nbut drastically permuted. Is that clear?",
    "start": "2742910",
    "end": "2750080"
  },
  {
    "text": "So again this is the same idea\nof a switchboard with sockets we have the same number sockets\non the left side and",
    "start": "2750080",
    "end": "2758059"
  },
  {
    "text": "on the right side. And we make a huge permutation\nthat ties one to the other.",
    "start": "2758060",
    "end": "2766280"
  },
  {
    "text": "It's only edges in here.  Notice there's no computation\nthat ever takes place in the",
    "start": "2766280",
    "end": "2772440"
  },
  {
    "text": "interleaver. This is , again, it's purely\nedges, purely sending messages through here. So the analogy of a switchboard",
    "start": "2772440",
    "end": "2779250"
  },
  {
    "text": "is a very good one. Even though we don't have\nswitchboards anymore. Maybe some of you don't even\nknow what a telephone",
    "start": "2779250",
    "end": "2785600"
  },
  {
    "text": "switchboard is?  It's a quaint but apt analogy.",
    "start": "2785600",
    "end": "2793170"
  },
  {
    "text": "All right, so this is the normal\ngraph of a turbo code. ",
    "start": "2793170",
    "end": "2801575"
  },
  {
    "text": "I've drawn it to emphasize its\ncommonality with low-density parity-check code. The biggest element is this big\ninterleaver in here, and",
    "start": "2801575",
    "end": "2810420"
  },
  {
    "text": "that's key to the thing\nworking well. All right, so how would we\napply the sum-product",
    "start": "2810420",
    "end": "2815610"
  },
  {
    "text": "algorithm to this code? What would our decoding\nschedule be? In this case, when we observe\nthe channel, we get messages",
    "start": "2815610",
    "end": "2825120"
  },
  {
    "text": "in all these places. So we get intrinsic information\ncoming in for all",
    "start": "2825120",
    "end": "2834290"
  },
  {
    "text": "the external symbols. ",
    "start": "2834290",
    "end": "2844730"
  },
  {
    "text": "First step might be to",
    "start": "2844730",
    "end": "2852832"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ",
    "start": "2852832",
    "end": "2861230"
  },
  {
    "text": "PROFESSOR: That's first\nstep, we can--",
    "start": "2861230",
    "end": "2866330"
  },
  {
    "text": "In the same way, this is just\na distribution node when originally all else\nis ignorance.",
    "start": "2866330",
    "end": "2872290"
  },
  {
    "text": "So these same messages just\npropagate out here, and if we like, we can get them\nout over here.",
    "start": "2872290",
    "end": "2880780"
  },
  {
    "text": "All these are available too. OK, somebody else. What's the next step?",
    "start": "2880780",
    "end": "2889039"
  },
  {
    "text": "Somebody was just\nabout to say it. Be bold, somebody. AUDIENCE: [INAUDIBLE]",
    "start": "2889040",
    "end": "2895440"
  },
  {
    "text": "PROFESSOR: Excuse me? AUDIENCE: The trellis\ndecoding-- PROFESSOR: Trellis\ndecoding, right.",
    "start": "2895440",
    "end": "2900555"
  },
  {
    "text": "If we forget about that side\nand just look at what the sum-product algorithm does over\nhere, we're doing the",
    "start": "2900555",
    "end": "2909435"
  },
  {
    "text": "sum-product algorithm on a\ntrellis, a BCJR algorithm. ",
    "start": "2909435",
    "end": "2915260"
  },
  {
    "text": "So given all these messages,\nwe do our backward forward",
    "start": "2915260",
    "end": "2923430"
  },
  {
    "text": "algorithm, alphas and betas,\neventually epsilons, extrinsic",
    "start": "2923430",
    "end": "2928650"
  },
  {
    "text": "information coming out on\nall nodes there, there, there, and so forth.",
    "start": "2928650",
    "end": "2934630"
  },
  {
    "text": "And that requires going up and\ndown the whole trellis. If this is a 1,000 bit block,\nas it often is, or larger it",
    "start": "2934630",
    "end": "2943230"
  },
  {
    "text": "means going from top to bottom\nthrough the whole block and doing one sweep of a BCJR\nalgorithm through that block,",
    "start": "2943230",
    "end": "2950470"
  },
  {
    "text": "which will generate a\nbunch of extrinsic information over here. ",
    "start": "2950470",
    "end": "2958020"
  },
  {
    "text": "Now, we have more over here. We still got the same intrinsic\ninformation coming in here, but now we can take\nthis new extrinsic information",
    "start": "2958020",
    "end": "2965950"
  },
  {
    "text": "and combine it with this\nintrinsic information and, hopefully, get an improved,\nhigher quality information.",
    "start": "2965950",
    "end": "2973740"
  },
  {
    "text": "Because we've incorporated all\nthe information from all these receive symbols on this side,\nand we send that over here.",
    "start": "2973740",
    "end": "2980045"
  },
  {
    "text": " And if you think of it in signal\nto noise ratio terms,",
    "start": "2980045",
    "end": "2986170"
  },
  {
    "text": "as some people do, you hopefully\nhave improved the signal to noise ratio in your\ninformation that's coming out.",
    "start": "2986170",
    "end": "2992040"
  },
  {
    "text": "It's as though you received\nthese bits over a higher quality channel. They tell you more about the\ninformation bits then you got",
    "start": "2992040",
    "end": "3002190"
  },
  {
    "text": "just from looking at the raw\ndata from the channel. That's basically where\nturbo comes from.",
    "start": "3002190",
    "end": "3010590"
  },
  {
    "text": "You then do BCJR over here using\nthis improved intrinsic",
    "start": "3010590",
    "end": "3017330"
  },
  {
    "text": "information, of course,\nthe parity information hasn't improved.",
    "start": "3017330",
    "end": "3022370"
  },
  {
    "text": "You might think of ways\nto improve this too. But this was the basic scheme.",
    "start": "3022370",
    "end": "3028150"
  },
  {
    "text": "It works just fine. You come over here. You then do a complete sweep\nthrough a 1,000 bits or",
    "start": "3028150",
    "end": "3034059"
  },
  {
    "text": "whatever, and you develop\noutgoing messages here. Which again, let's hope we've\nimproved the signal-noise",
    "start": "3034060",
    "end": "3041530"
  },
  {
    "text": "ratio a little bit more, that\nthese are even more informative about\nthe input bits.",
    "start": "3041530",
    "end": "3047070"
  },
  {
    "text": "And they come back, and now,\nwith this further improved",
    "start": "3047070",
    "end": "3052140"
  },
  {
    "text": "information, we can sweep\nthrough here again. That's where the turbo\ncomes from. You keep recycling the\ninformation left to right and",
    "start": "3052140",
    "end": "3059900"
  },
  {
    "text": "right to left. And, hopefully, you\nbuild up power. You lower the signal-noise\nratio each time.",
    "start": "3059900",
    "end": "3066859"
  },
  {
    "text": "Yes? AUDIENCE: [INAUDIBLE] and then you [UNINTELLIGIBLE]\nthe other side is kind of",
    "start": "3066860",
    "end": "3073063"
  },
  {
    "text": "[? encouraging. ?] Now, why can't you, because on\nthis side, actually, the equilibrium is just the\n[UNINTELLIGIBLE] version of",
    "start": "3073063",
    "end": "3079414"
  },
  {
    "text": "the other side. Why would you do it\n[UNINTELLIGIBLE] carry out, and do it again?",
    "start": "3079414",
    "end": "3086170"
  },
  {
    "text": "PROFESSOR: So a good question. You certainly could. ",
    "start": "3086170",
    "end": "3093760"
  },
  {
    "text": "So after you've done it twice,\nyou basically processed all the same things as this thing\ndoes in one iteration, you",
    "start": "3093760",
    "end": "3100720"
  },
  {
    "text": "spent twice as much effort. The question is, is now the\nquality of your information",
    "start": "3100720",
    "end": "3107280"
  },
  {
    "text": "any better? And I haven't done this myself,\nbut I suspect people in the business did this, and\nthey found they didn't get",
    "start": "3107280",
    "end": "3114440"
  },
  {
    "text": "enough improvement to make\nup for the additional computation.",
    "start": "3114440",
    "end": "3119540"
  },
  {
    "text": "But that's an alternative that\nyou could reasonably try. AUDIENCE: The reason I say that\nis because if you do it",
    "start": "3119540",
    "end": "3126407"
  },
  {
    "text": "that way, that means for the\nsecond decoding process of the left side, the information\nis very fresh.",
    "start": "3126407",
    "end": "3135480"
  },
  {
    "text": "Because it's sort of [? right ?]\ninformation. If you do this and this and\nthis, it looks like there is enough propogation of the same\nprovision to itself.",
    "start": "3135480",
    "end": "3143384"
  },
  {
    "text": "PROFESSOR: There certainly is. There are certainly cycles\nin this graph.",
    "start": "3143384",
    "end": "3148624"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: OK, well, these\nare great questions.",
    "start": "3148624",
    "end": "3155300"
  },
  {
    "text": "What I hope that you will get\nfrom this class is that you will be able to go back and\nsay, well why don't we try",
    "start": "3155300",
    "end": "3162740"
  },
  {
    "text": "doing it this way? Whereas everybody else has just\nbeen following what they read in the literature, and it\nsays, to do it first here, and",
    "start": "3162740",
    "end": "3169165"
  },
  {
    "text": "then there, and then there. Try it. Maybe it's good. You're suggesting that suppose\nthis guy it actually has poor",
    "start": "3169165",
    "end": "3179590"
  },
  {
    "text": "information. He could actually make things\nworse over here. AUDIENCE: Yeah, and\nalso [INAUDIBLE]",
    "start": "3179590",
    "end": "3185490"
  },
  {
    "text": "PROFESSOR: So then if this guy\njust operated on the fresh information. It's a probabilistic thing\nwhether this would work better",
    "start": "3185490",
    "end": "3194890"
  },
  {
    "text": "on the average. I don't know. I suspect that, once upon a\ntime, all these things have",
    "start": "3194890",
    "end": "3201270"
  },
  {
    "text": "been tried. But certainly, if you're in any\nkind of new situation, new channel, new code, you might\nthink to try it again.",
    "start": "3201270",
    "end": "3211217"
  },
  {
    "text": "It's a very reasonable\nsuggestion. ",
    "start": "3211218",
    "end": "3219470"
  },
  {
    "text": "Because computation is not\nfree, there is a marked",
    "start": "3219470",
    "end": "3225490"
  },
  {
    "text": "difference in turbo decoding in\nthat you're spending a lot more time decoding each side.",
    "start": "3225490",
    "end": "3232090"
  },
  {
    "text": "This PCJR algorithm is a lot\nmore complicated than just executing-- well, it's gone\nnow-- but the sum-product",
    "start": "3232090",
    "end": "3239119"
  },
  {
    "text": "update rule for equals\nor 0 sum node. That's a very simple\noperation.",
    "start": "3239120",
    "end": "3244730"
  },
  {
    "text": "On the other hand, it doesn't\nget that much done. You can think of this as doing\na lot of processing on this",
    "start": "3244730",
    "end": "3252910"
  },
  {
    "text": "information over here before\npassing it back. Then this does a lot of\nprocessing before passing it",
    "start": "3252910",
    "end": "3258490"
  },
  {
    "text": "back again.  And so for turbo codes,\ntypically, they only do 10 or",
    "start": "3258490",
    "end": "3268170"
  },
  {
    "text": "20 iterations.  Whereas for low-density\nparity-check codes, one does",
    "start": "3268170",
    "end": "3274760"
  },
  {
    "text": "hundreds of iterations, of\nmuch simpler iterations.",
    "start": "3274760",
    "end": "3279820"
  },
  {
    "text": "But, in either case, you've got\nto deal with the fact that as you get up in the number of\niterations, you are getting to",
    "start": "3279820",
    "end": "3286670"
  },
  {
    "text": "the region where cycles begin\nto have an effect, where you are re-processing old\ninformation as though it was",
    "start": "3286670",
    "end": "3294830"
  },
  {
    "text": "new, independent information. This tends to make you\noverconfident. ",
    "start": "3294830",
    "end": "3302010"
  },
  {
    "text": "Once you get in the vicinity\nof a decision or of a fixed point, whether it's a decision\nor not, it tends to lock you",
    "start": "3302010",
    "end": "3309880"
  },
  {
    "text": "into that fixed point. Your processing, after a while,\njust reinforces itself.",
    "start": "3309880",
    "end": "3316470"
  },
  {
    "text": " Now, another thing, turbo\ncodes in contrast to",
    "start": "3316470",
    "end": "3322940"
  },
  {
    "text": "low-density parity-check codes,\ngenerally have terrible minimum distance. ",
    "start": "3322940",
    "end": "3329535"
  },
  {
    "text": "If you can work through the\nalgebra, and there's always some weight 2 code word that\nproduces maybe eight things",
    "start": "3329535",
    "end": "3339630"
  },
  {
    "text": "out here and 10 out here. So the total minimum distance is\nonly 20, no matter how long",
    "start": "3339630",
    "end": "3347910"
  },
  {
    "text": "the turbo code gets. All right, so when I say\nterrible, I don't mean two,",
    "start": "3347910",
    "end": "3353810"
  },
  {
    "text": "but I mean 20 or 30 could be a\nnumber for minimum distance. ",
    "start": "3353810",
    "end": "3360500"
  },
  {
    "text": "Certainly, this is called\nparallel concatenation, where you have these two codes in\nparallel, and just pass",
    "start": "3360500",
    "end": "3368430"
  },
  {
    "text": "information bits back and\nforth between them. It's typical that you get poor\nminimum distance which",
    "start": "3368430",
    "end": "3374810"
  },
  {
    "text": "eventually shows up\nas an error floor.",
    "start": "3374810",
    "end": "3380490"
  },
  {
    "text": "In all these codes, when you\ndraw the performance curve, as we always draw it, you tend to\nget what's called a waterfall",
    "start": "3380490",
    "end": "3388810"
  },
  {
    "text": "region, where things behave\nin a very steep Gaussian like measure.",
    "start": "3388810",
    "end": "3394369"
  },
  {
    "text": "When you measure distance from\nthe capacity, you might be-- Oh, let's do this first,\nassess an r norm.",
    "start": "3394370",
    "end": "3401810"
  },
  {
    "text": "So capacity is always at 0dB. And this is probability\nof error.",
    "start": "3401810",
    "end": "3407440"
  },
  {
    "text": "So this is your distance from\ncapacity, and this might be 1dB, or 3/10 dB, or something\nvery good.",
    "start": "3407440",
    "end": "3416460"
  },
  {
    "text": "But then, as you get down below,\nsome cases it could be",
    "start": "3416460",
    "end": "3421800"
  },
  {
    "text": "10 to the minus three or four,\nsome cases it could be 10 to the minus seven. So where it starts\nis important.",
    "start": "3421800",
    "end": "3429710"
  },
  {
    "text": "Then this tends to flatten\nout like that. And this is simply what you\nget from the union-bound",
    "start": "3429710",
    "end": "3437180"
  },
  {
    "text": "estimate for poor distance.",
    "start": "3437180",
    "end": "3443319"
  },
  {
    "text": "So, in this region, other things\nhurt you worse than the distance did.",
    "start": "3443320",
    "end": "3448890"
  },
  {
    "text": "If you are purely limited by\ndistance, then you would have a performance like this. There a very, tiny number of\nminimum distance code words.",
    "start": "3448890",
    "end": "3459680"
  },
  {
    "text": "There may be only a few in 1,000\nlength block, so the",
    "start": "3459680",
    "end": "3465109"
  },
  {
    "text": "error coefficient\nis very small. That's why this is\nway down here. The interleaver tends to give\nyou a 1/n effect on the error",
    "start": "3465110",
    "end": "3473950"
  },
  {
    "text": "coefficient. So this is way down here, and\nit doesn't bother you in the waterfall region,\nbut then at some",
    "start": "3473950",
    "end": "3479599"
  },
  {
    "text": "point it becomes dominant. You can think of these as being\ntwo types of curves. This is the iterative\ndecoding curve.",
    "start": "3479600",
    "end": "3485610"
  },
  {
    "text": "This is simple maximum\nlikelihood of decoding when you have minimum distance\nof d with a small error",
    "start": "3485610",
    "end": "3490920"
  },
  {
    "text": "coefficient. And so where this error floor\nis an important issue for",
    "start": "3490920",
    "end": "3497600"
  },
  {
    "text": "turbo codes. In some communications\napplications really all you're",
    "start": "3497600",
    "end": "3502680"
  },
  {
    "text": "interested in is 10 to\nthe minus four, 10 to the minus five. And then you really want to put\nall of your emphasis on",
    "start": "3502680",
    "end": "3508730"
  },
  {
    "text": "the waterfall region and just\nkeep the error floor from being not too bad.",
    "start": "3508730",
    "end": "3515300"
  },
  {
    "text": "So that would be a very good\napplication for turbo code. But if, as some people think\nthey want, error probabilities",
    "start": "3515300",
    "end": "3522920"
  },
  {
    "text": "like 10 to the minus 12, or 10\nto the minus 15, probably turbo code is not going to\nbe your best candidate.",
    "start": "3522920",
    "end": "3528565"
  },
  {
    "text": " And it's not that you couldn't\ncreate a code with better",
    "start": "3528565",
    "end": "3535470"
  },
  {
    "text": "minimum distance, but it's\ngoing to get harder.",
    "start": "3535470",
    "end": "3541000"
  },
  {
    "text": "I don't know that much effort\nhas gone into this, because we have low-density parity-check\ncodes for this other",
    "start": "3541000",
    "end": "3546200"
  },
  {
    "text": "application. ",
    "start": "3546200",
    "end": "3552300"
  },
  {
    "text": "Any questions on turbo code? That's about all I'm\ngoing to say. Yeah? AUDIENCE: Why not expurgate\nthe bad code words?",
    "start": "3552300",
    "end": "3558953"
  },
  {
    "text": "PROFESSOR: Expurgate\nthe bad code words. Well, how exactly are you\ngoing to do that? AUDIENCE: Any malady report.",
    "start": "3558954",
    "end": "3567350"
  },
  {
    "text": "We disallow certain using\n[? passes. ?]  PROFESSOR: So you're not going\nto mess with the g of d, but",
    "start": "3567350",
    "end": "3578799"
  },
  {
    "text": "you're going to go through, you\ngoing to find all the u of d's that lead to low weight\nsequences, and then you're",
    "start": "3578800",
    "end": "3585214"
  },
  {
    "text": "going to expurgate them. Of course, it's a linear code,\nso if there's a low weight",
    "start": "3585215",
    "end": "3595150"
  },
  {
    "text": "sequence in the neighborhood of\n0, then there is going to be a corresponding sequence in\nthe neighborhood of any of the",
    "start": "3595150",
    "end": "3600710"
  },
  {
    "text": "code words. So you're going to have to\nexpurgate, somehow, around all the code words. I don't know how to do it.",
    "start": "3600710",
    "end": "3605869"
  },
  {
    "text": "AUDIENCE: You would\nsacrifice rate. PROFESSOR: You will\nsacrifice rate?",
    "start": "3605870",
    "end": "3613484"
  },
  {
    "text": "Oh, one other thing\nI should mention. Very commonly in turbo codes,\nthey don't send",
    "start": "3613485",
    "end": "3620830"
  },
  {
    "text": "all of these bits. They send fewer bits, which.",
    "start": "3620830",
    "end": "3626170"
  },
  {
    "text": "in effect, raises the rate. But then, of course, makes\ndecoding harder, because you",
    "start": "3626170",
    "end": "3631870"
  },
  {
    "text": "don't get any received\ninformation from the bits that you don't send. But there are various\nphilosophies of what's called",
    "start": "3631870",
    "end": "3639670"
  },
  {
    "text": "puncturing-- that I'm certainly\nno expert on--",
    "start": "3639670",
    "end": "3645000"
  },
  {
    "text": "and it's possible that by\nbeing very clever about puncturing you could\ndo something",
    "start": "3645000",
    "end": "3652609"
  },
  {
    "text": "about minimum distance.  Shortening is where you hold\nsome of these bits to 0 and",
    "start": "3652610",
    "end": "3659609"
  },
  {
    "text": "don't send them. Puncturing mean to let them go\nfree and don't send them.",
    "start": "3659610",
    "end": "3666650"
  },
  {
    "text": "So I don't know. But I don't think this is a\nvery profitable way to go.",
    "start": "3666650",
    "end": "3672529"
  },
  {
    "text": " But it's certainly a reasonable\nquestion to ask. Any time that you get into a\nminimum distance limited",
    "start": "3672530",
    "end": "3681900"
  },
  {
    "text": "situation, you should think\nabout, is there some way I can just expurgate that small\nfraction of code words in the",
    "start": "3681900",
    "end": "3690420"
  },
  {
    "text": "neighborhood of every\ncode word that have that minimum distance. ",
    "start": "3690420",
    "end": "3701550"
  },
  {
    "text": "This, as I said, is called\nparallel concatenation. ",
    "start": "3701550",
    "end": "3709680"
  },
  {
    "text": "Sorry, I didn't mean to cut off questions about turbo codes. I did say, I'm not going to\ntalk about them again.",
    "start": "3709680",
    "end": "3714910"
  },
  {
    "text": "They, of course, gotten a\nlot of publicity, are very popular initially.",
    "start": "3714910",
    "end": "3723560"
  },
  {
    "text": "This was a revolution\nin coding. Turbo codes got into all the\nnew standards and so forth.",
    "start": "3723560",
    "end": "3729660"
  },
  {
    "text": "Every communications company had\na small group simulating turbo codes.",
    "start": "3729660",
    "end": "3735470"
  },
  {
    "text": "And so they got a tremendous\namount of momentum. Low-density parity-check codes\nreally didn't get looked at",
    "start": "3735470",
    "end": "3742790"
  },
  {
    "text": "till a couple years later. As you'll see, there's a lot\nmore analytical work you can",
    "start": "3742790",
    "end": "3749599"
  },
  {
    "text": "do a low-density parity-check\ncodes, so they're popular in the academic community\nfor that reason.",
    "start": "3749600",
    "end": "3755040"
  },
  {
    "text": "But, in fact, it turned out that\nthe analysis allowed you to do fine tuning of the\ndesign of low-density",
    "start": "3755040",
    "end": "3762330"
  },
  {
    "text": "parity-check codes. There are more knobs that you\ncan do, such that you really",
    "start": "3762330",
    "end": "3767960"
  },
  {
    "text": "can get closer to capacity with\nlow-density parity-check codes than with turbo codes.",
    "start": "3767960",
    "end": "3773349"
  },
  {
    "text": "They have other differences in\ncharacteristics, but, for both",
    "start": "3773350",
    "end": "3778530"
  },
  {
    "text": "of these reasons, there is\ncertainly a move now. The low-density parity-check\ncodes seem to be the favored",
    "start": "3778530",
    "end": "3785800"
  },
  {
    "text": "ones in any new standards. But we still have a lot of\nexisting standards, and people",
    "start": "3785800",
    "end": "3791740"
  },
  {
    "text": "who've already developed turbo\ncode chips and so forth who have a vested interest\nagainst moving.",
    "start": "3791740",
    "end": "3797289"
  },
  {
    "text": "Perhaps analog devices\nis one like that. ",
    "start": "3797290",
    "end": "3802350"
  },
  {
    "text": "So, although you can see the\ntrend is toward low-density parity-check codes, there\nare many industrial and",
    "start": "3802350",
    "end": "3809920"
  },
  {
    "text": "competitive factors and\ninertia factors. They'll both be around\nfor a long time.",
    "start": "3809920",
    "end": "3816210"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] turbo code they have a patent\nyou have to pay a royalty to",
    "start": "3816210",
    "end": "3821660"
  },
  {
    "text": "the company. And with LDPC you\ndon't have to-- PROFESSOR: Yes, since this is\na theoretical class, but, of",
    "start": "3821660",
    "end": "3828220"
  },
  {
    "text": "course, issues like patents\nare very important. Berrou, Glavieux, and all\nwere working at ENST",
    "start": "3828220",
    "end": "3836700"
  },
  {
    "text": "Bretagne up in Brittany. They were funded by\nFrance Telecom. France Telecom went out and\nowns all the turbo code",
    "start": "3836700",
    "end": "3846760"
  },
  {
    "text": "patents and has decided\nto enforce them. Whereas Bob Gallager's\npatents all--",
    "start": "3846760",
    "end": "3853599"
  },
  {
    "text": "We owned the ball. We never made a dime. They all duly expired\naround 1980.",
    "start": "3853600",
    "end": "3861119"
  },
  {
    "text": "And no one needs to worry about\nat least basic patents on low-density parity-check\ncodes.",
    "start": "3861120",
    "end": "3866619"
  },
  {
    "text": "Of course, refinements can\nalways be patented. So I don't know what the\nsituation is there.",
    "start": "3866620",
    "end": "3872920"
  },
  {
    "text": "And that often makes a big\ndifference as to what people want to see standardized\nand used in practice.",
    "start": "3872920",
    "end": "3879405"
  },
  {
    "text": "So, excellent point. ",
    "start": "3879405",
    "end": "3885880"
  },
  {
    "text": "All right, well, we can come\nback to this at any point. Serial concatenation-- Here the idea is you, basically,\ngo through one",
    "start": "3885880",
    "end": "3895190"
  },
  {
    "text": "code, then you interleave,\nand then you go",
    "start": "3895190",
    "end": "3900589"
  },
  {
    "text": "through another code. This is the kind of setup that\nI talked about back when we",
    "start": "3900590",
    "end": "3911470"
  },
  {
    "text": "talked about-- This could be a small block\ncode or convolutional code",
    "start": "3911470",
    "end": "3921160"
  },
  {
    "text": "that you do maximum likelihood\ndecoding on, need to do a Viterbi algorithm. And this could be a Reed-Solomon\ncode, and the",
    "start": "3921160",
    "end": "3928339"
  },
  {
    "text": "interleaver might be in there\nfor some kind of burst protection or to decorrelate\nany memory in",
    "start": "3928340",
    "end": "3935980"
  },
  {
    "text": "the channel out here.  So that's the context in which\nconcatenated codes were",
    "start": "3935980",
    "end": "3944790"
  },
  {
    "text": "originally invented.  That's the way they're used on\nspace channel for instance,",
    "start": "3944790",
    "end": "3953420"
  },
  {
    "text": "additive white Gaussian\nnoise channel. But here we're talking about\nthe same block diagram, but",
    "start": "3953420",
    "end": "3959250"
  },
  {
    "text": "we're talking about much\nsimpler codes. And again, the idea is to build\na big code using very",
    "start": "3959250",
    "end": "3965650"
  },
  {
    "text": "simple component codes, which is\nwhat we did in low-density parity-check codes. That's a big code built up,\nbasically, out of 0 sum and",
    "start": "3965650",
    "end": "3974319"
  },
  {
    "text": "repetition codes. Turbo code is a code built\nup out of two simple",
    "start": "3974320",
    "end": "3980800"
  },
  {
    "text": "convolutional codes. Here, I'm going to talk about\nrepeat-accumulate codes just",
    "start": "3980800",
    "end": "3991820"
  },
  {
    "text": "because they are so simple. These were proposed by Divsalar\nand McEliece really",
    "start": "3991820",
    "end": "3998670"
  },
  {
    "text": "for the purpose of trying to\nfind a simple enough turbo code so you could prove some\ntheorems about it.",
    "start": "3998670",
    "end": "4005100"
  },
  {
    "text": "There are hardly any theorems\nabout turbo code. It's all empirical. ",
    "start": "4005100",
    "end": "4013690"
  },
  {
    "text": "We've got now some nice\nanalytical tools. In particular, the exit chart,\nwhich was a very nice,",
    "start": "4013690",
    "end": "4019770"
  },
  {
    "text": "empirical engineering chart like\nBode plots and Nyquist plots, things like that.",
    "start": "4019770",
    "end": "4025600"
  },
  {
    "text": "It has a real engineering\nflavor, but it works very well. The repeat accumulate code\nis basically this.",
    "start": "4025600",
    "end": "4035630"
  },
  {
    "text": "We take input bits here.  We repeat n times.",
    "start": "4035630",
    "end": "4045109"
  },
  {
    "text": "So this, if you like, is an\nn one n repetition code. That's pretty simple.",
    "start": "4045110",
    "end": "4050850"
  },
  {
    "text": " We have a stream and a long\nblock, we would then permute",
    "start": "4050850",
    "end": "4056900"
  },
  {
    "text": "everything within the block. And then this is a rate one or\none over one convolutional",
    "start": "4056900",
    "end": "4068210"
  },
  {
    "text": "code called an accumulator. This is the code with transfer\nfunction one over one plus d,",
    "start": "4068210",
    "end": "4077310"
  },
  {
    "text": "that means that y k plus\none is equal to y k",
    "start": "4077310",
    "end": "4086090"
  },
  {
    "text": "plus x k plus one. So we have x coming in.",
    "start": "4086090",
    "end": "4092070"
  },
  {
    "text": "Here is one delay element. Here's y k coming out.",
    "start": "4092070",
    "end": "4098000"
  },
  {
    "text": "And there is what\nthat looks like. Xk plus one.",
    "start": "4098000",
    "end": "4103109"
  },
  {
    "text": "yk plus one. So it's a very simple rate one\nconvolutional encoder with",
    "start": "4103109",
    "end": "4110580"
  },
  {
    "text": "feedback where I guess we\ntake this as the output. That's called an accumulator\nbecause, if you look at it,",
    "start": "4110580",
    "end": "4118899"
  },
  {
    "text": "what is yk doing? You can show that yk plus one is\nsimply the sum up to k plus",
    "start": "4118899",
    "end": "4126960"
  },
  {
    "text": "one of all the xk prime. k prime equals whatever it\nstarts at through k plus one",
    "start": "4126960",
    "end": "4134714"
  },
  {
    "text": "of all the xk prime. ",
    "start": "4134715",
    "end": "4140149"
  },
  {
    "text": "It's nothing more than saying\nthan saying, g of d equals one over one plus d, equals one plus\nd plus e squared plus d.",
    "start": "4140149",
    "end": "4148759"
  },
  {
    "text": "The impulse response to\nthis is infinite. And every past xk shows\nup in every y.",
    "start": "4148760",
    "end": "4158229"
  },
  {
    "text": "This is just the sum\nof all the xks. But, of course, in the binary\nfield it's the mod 2 sum, so",
    "start": "4158229",
    "end": "4163270"
  },
  {
    "text": "it's only going to\nbe 0 and one. Well, it's a little two-state,\nrate one convolutional code.",
    "start": "4163270",
    "end": "4171318"
  },
  {
    "text": "About as simple as you can get\nand obviously useless as a standalone coded.",
    "start": "4171319",
    "end": "4176339"
  },
  {
    "text": "Rate one coders have\nno redundancy. They can't protect\nagainst anything.",
    "start": "4176340",
    "end": "4183170"
  },
  {
    "text": "So that's the structure which\nprior to turbo codes or",
    "start": "4183170",
    "end": "4189979"
  },
  {
    "text": "capacity approaching codes,\nyou would have said, what? What are we trying to\nachieve with this? ",
    "start": "4189979",
    "end": "4197950"
  },
  {
    "text": "And the reason I talk about\nthem it that the codes actually does pretty well.",
    "start": "4197950",
    "end": "4203960"
  },
  {
    "text": "All right, what's its\ngraph look like? Over here we have input bits.",
    "start": "4203960",
    "end": "4209380"
  },
  {
    "text": "The input bits aren't actually\npart of the output in this case, so I won't draw\nthe dongle.",
    "start": "4209380",
    "end": "4214920"
  },
  {
    "text": "We just have an equals sign with\nn call n equals three,",
    "start": "4214920",
    "end": "4221310"
  },
  {
    "text": "repetition from each. Oh, what's the overall\nrate of this code?",
    "start": "4221310",
    "end": "4228270"
  },
  {
    "text": "Here we have a rate\none over n code. We don't do anything to the rate\nhere, so the overall rate is one over n.",
    "start": "4228270",
    "end": "4236230"
  },
  {
    "text": "So let's take a rate 1/3. So the graph, dot, dot, dot,\nlooks something like this.",
    "start": "4236230",
    "end": "4243540"
  },
  {
    "start": "4243540",
    "end": "4248790"
  },
  {
    "text": "And then, as always,\nthis element.",
    "start": "4248790",
    "end": "4254020"
  },
  {
    "text": "We take these bits in. We permute them in some sort\nof random permutation.",
    "start": "4254020",
    "end": "4262630"
  },
  {
    "text": "And then over here,\nwhat do we have? Well, we have a trellis again. ",
    "start": "4262630",
    "end": "4268460"
  },
  {
    "text": "In this case, I can draw the\ntrellis very explicitly. ",
    "start": "4268460",
    "end": "4273880"
  },
  {
    "text": "If we consider this to be the\ninformation bit, and this to",
    "start": "4273880",
    "end": "4280699"
  },
  {
    "text": "be the previous state\nbit, so this is yk.",
    "start": "4280700",
    "end": "4287190"
  },
  {
    "text": "And here's-- ",
    "start": "4287190",
    "end": "4292370"
  },
  {
    "text": "We're considering the y's to be\nthe output, so this is xk. ",
    "start": "4292370",
    "end": "4299730"
  },
  {
    "text": "I think it works either way. Let's call this x k plus one\nplus y k equals y k plus one.",
    "start": "4299730",
    "end": "4308070"
  },
  {
    "text": "So this enforces\nthe constraint. This is really the branch. This is just to propagate\nthe y k and",
    "start": "4308070",
    "end": "4315000"
  },
  {
    "text": "present them as outputs. So this little two state\ncode, here's the state.",
    "start": "4315000",
    "end": "4323120"
  },
  {
    "text": "The state is also the output. The state is what's in here. And this is what it's\ntrellis looks like.",
    "start": "4323120",
    "end": "4330280"
  },
  {
    "start": "4330280",
    "end": "4341730"
  },
  {
    "text": "That's the way this looks. Of course, again, we need an\nequal number of sockets on this side and on this side.",
    "start": "4341730",
    "end": "4347610"
  },
  {
    "start": "4347610",
    "end": "4353719"
  },
  {
    "text": "So how would you decode\nthis code now? ",
    "start": "4353720",
    "end": "4361070"
  },
  {
    "text": "What do we see initially? We initially get received\ndata, measured intrinsic",
    "start": "4361070",
    "end": "4367120"
  },
  {
    "text": "information, for each of the\nbits that we actually send over the channel.",
    "start": "4367120",
    "end": "4374330"
  },
  {
    "text": "And what's our next step? ",
    "start": "4374330",
    "end": "4380060"
  },
  {
    "text": "Trellis? Yeah. We do the sum-product algorithm\non this trellis.",
    "start": "4380060",
    "end": "4386400"
  },
  {
    "text": "So we just do BCJR ignoring the\nfact that it's rate one. That doesn't matter.",
    "start": "4386400",
    "end": "4392580"
  },
  {
    "text": " And so we will get some\ninformation for each of these",
    "start": "4392580",
    "end": "4399570"
  },
  {
    "text": "guys that we compute from the\nforward backward algorithm. We'll ultimately get messages\ngoing in this direction.",
    "start": "4399570",
    "end": "4408790"
  },
  {
    "text": "Which come over here when\nwe get them all. And again, from these two\nmessages, we can compute an",
    "start": "4408790",
    "end": "4416350"
  },
  {
    "text": "output message here, from these\ntwo, compute one there, from these two, compute\none there.",
    "start": "4416350",
    "end": "4421989"
  },
  {
    "text": "So we combine and re-propagate\nall these messages.",
    "start": "4421990",
    "end": "4428942"
  },
  {
    "text": "And that gives us new\ninformation over here. ",
    "start": "4428942",
    "end": "4434430"
  },
  {
    "text": "And now, based on that,\nwe can do BCJR again. So again, it's this left right\nsort of alternation, one side,",
    "start": "4434430",
    "end": "4441010"
  },
  {
    "text": "other side which, eventually,\nspreads out the data through",
    "start": "4441010",
    "end": "4450739"
  },
  {
    "text": "the whole block. We can use all the received data\nin a block to decode all the data in the block.",
    "start": "4450740",
    "end": "4456769"
  },
  {
    "text": "Now does this work as well as\neither of the two previous ones I put up, low-density\nparity-check or turbo?",
    "start": "4456770",
    "end": "4464440"
  },
  {
    "text": "Not quite, but it works\namazingly well.",
    "start": "4464440",
    "end": "4470610"
  },
  {
    "text": "This is the moral here. That even this incredibly\nsimple code, where nothing is going on--",
    "start": "4470610",
    "end": "4477880"
  },
  {
    "text": "Again, all we have is binary\nstate variables. We have equals and 0 sum\nnodes, that's it.",
    "start": "4477880",
    "end": "4485900"
  },
  {
    "text": "It's made out of the simplest\npossible elements. Even this code can get\nwithin a dB or",
    "start": "4485900",
    "end": "4492920"
  },
  {
    "text": "two of channel capacity. And I'm old enough to know that\nin 1993, we would have",
    "start": "4492920",
    "end": "4500200"
  },
  {
    "text": "thought that was a miracle. So if this had been the first\ncode proposed at the ICC in",
    "start": "4500200",
    "end": "4505760"
  },
  {
    "text": "Geneva in 1993, and people had\nsaid, we can get a dB and a half from capacity, everyone\nwould have said, totally",
    "start": "4505760",
    "end": "4513349"
  },
  {
    "text": "unbelievable until they went\nhome and simulated it. So I put this up just to\nillustrate the power of these",
    "start": "4513350",
    "end": "4524739"
  },
  {
    "text": "ideas, and where\nthey come from. ",
    "start": "4524740",
    "end": "4529900"
  },
  {
    "text": "Of course, this idea of using\nthe permutation as your pseudo-random element so that\nyou, from very simple",
    "start": "4529900",
    "end": "4537610"
  },
  {
    "text": "components, you get the effect\nof a large pseudo-random code, could be a block length, a\n1,000, 10,000, what have you,",
    "start": "4537610",
    "end": "4546990"
  },
  {
    "text": "this is absolutely key. And this, basically, is what\nGallager had when he said, if I just use my parity-check\nmatrix at random, even if it",
    "start": "4546990",
    "end": "4556567"
  },
  {
    "text": "is sparse, it's going to give me\na random-like, which means a pretty good, code, because\nthat's the intuition I get",
    "start": "4556567",
    "end": "4564510"
  },
  {
    "text": "from Shannon and Elias. ",
    "start": "4564510",
    "end": "4570869"
  },
  {
    "text": "That's the important part of\nthe code construction, but then the decoding part of the\npower is the sum-product",
    "start": "4570870",
    "end": "4581610"
  },
  {
    "text": "algorithm used in an\niterative way. The idea that you can simply let\nthis algorithm run, and,",
    "start": "4581610",
    "end": "4589260"
  },
  {
    "text": "if the code is properly\ndesigned, it will eventually",
    "start": "4589260",
    "end": "4595179"
  },
  {
    "text": "integrate all the information\nover the block and converge to some fixed point.",
    "start": "4595180",
    "end": "4602489"
  },
  {
    "text": "Although, even for such a simple\ncode as this, for this code McEliece and his students\nhave a few theorems and can",
    "start": "4602490",
    "end": "4610820"
  },
  {
    "text": "say something about the\nconvergence behavior, and what",
    "start": "4610820",
    "end": "4616380"
  },
  {
    "text": "it's actually going to do. Even for this code, they can't\nget anything very definitive,",
    "start": "4616380",
    "end": "4622170"
  },
  {
    "text": "I would say. So to me, the more important\nthing about--",
    "start": "4622170",
    "end": "4629100"
  },
  {
    "text": "these are called RA codes-- is that incredibly simple\ncodes can do better than",
    "start": "4629100",
    "end": "4636940"
  },
  {
    "text": "concatenation of a 1,000 byte\nReed-Solomon code over g f of",
    "start": "4636940",
    "end": "4646699"
  },
  {
    "text": "two to the 10 with a two to the\n14 state Viterbi decoder.",
    "start": "4646700",
    "end": "4652330"
  },
  {
    "text": "That doesn't do as well as this\ncrummy little thing does.",
    "start": "4652330",
    "end": "4658620"
  },
  {
    "text": "So that's good to know. Any questions?",
    "start": "4658620",
    "end": "4663630"
  },
  {
    "text": " Well, it's a good\nstopping place.",
    "start": "4663630",
    "end": "4669310"
  },
  {
    "text": "So next time, now, if you kind\nof have an impressionistic idea of how we do these codes.",
    "start": "4669310",
    "end": "4677730"
  },
  {
    "text": "Next time, I'm going to\nanalyze low-density parity-check codes over the\nbinary erasure channel, where",
    "start": "4677730",
    "end": "4689050"
  },
  {
    "text": "you can do exact analysis, at\nleast in the asymptotic case. And that will show very clearly\nhow it is that these",
    "start": "4689050",
    "end": "4697310"
  },
  {
    "text": "codes actually work. It's a good model for all\nthe codes in general.",
    "start": "4697310",
    "end": "4702730"
  },
  {
    "text": "I guess that means that\nyou can't do a lot of the homework again.",
    "start": "4702730",
    "end": "4708190"
  },
  {
    "text": "So for Wednesday, what\nshould we do?",
    "start": "4708190",
    "end": "4713949"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] on Friday then? PROFESSOR: Friday or Monday?",
    "start": "4713950",
    "end": "4721192"
  },
  {
    "text": "Monday seems to be popular.  So for Wednesday, just do--",
    "start": "4721192",
    "end": "4729490"
  },
  {
    "text": " There's one problem left over\nfrom problem set eight.",
    "start": "4729490",
    "end": "4735558"
  },
  {
    "text": " And that's kind of a grungy\nproblem but worthwhile doing.",
    "start": "4735558",
    "end": "4746020"
  },
  {
    "text": "Try to do the sum-product\nalgorithm at least once. So just do that for Wednesday,\nand then for next Monday, a",
    "start": "4746020",
    "end": "4755290"
  },
  {
    "text": "week from today, problem set\nnine other than that. ",
    "start": "4755290",
    "end": "4763110"
  },
  {
    "text": "I'll see you Wednesday. ",
    "start": "4763110",
    "end": "4774527"
  }
]