[
  {
    "text": "The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6360"
  },
  {
    "text": "continue to offer high-quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6360",
    "end": "13350"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13350",
    "end": "27030"
  },
  {
    "text": "GEORGE VERGHESE:\nOK, let's continue. So we're going to\ncontinue with linear codes",
    "start": "27030",
    "end": "34110"
  },
  {
    "text": "and talk today about\nerror correction. So let me just remind you,\nwe're thinking of linear codes",
    "start": "34110",
    "end": "45809"
  },
  {
    "text": "very concretely\nas being generated through a process like this. We put this up on the\nboard several times.",
    "start": "45810",
    "end": "53100"
  },
  {
    "text": "You've got the\ndata bits and then the parity bits being generated\nby the data bits multiplying",
    "start": "53100",
    "end": "68180"
  },
  {
    "text": "into a so-called\ngenerator matrix. You've seen this in lecture\non recitation as well.",
    "start": "68180",
    "end": "74940"
  },
  {
    "start": "74940",
    "end": "84890"
  },
  {
    "text": "And we've considered different\nways to think of this matrix. One way is to think of it as\nmade up of a bunch of rows,",
    "start": "84890",
    "end": "94430"
  },
  {
    "text": "and what you're doing is\ntaking linear combinations",
    "start": "94430",
    "end": "99830"
  },
  {
    "text": "of these rows to\ngenerate a code word. So the dimensions here--\nthis is going to be n.",
    "start": "99830",
    "end": "107952"
  },
  {
    "text": "So when you take a linear\ncombination of these, you're generating a\nword that's n bits long. But the underlying\ndegrees of freedom only",
    "start": "107952",
    "end": "114980"
  },
  {
    "text": "correspond to k bits,\nbecause you're just doing a weighted\ncombination of k of these. OK?",
    "start": "114980",
    "end": "121200"
  },
  {
    "text": "Now, we talk of these as\nthough they're vectors, you're combining them, take the\nlinear combinations, and so on.",
    "start": "121200",
    "end": "129780"
  },
  {
    "text": "And I just wanted to\nsay a word about in what",
    "start": "129780",
    "end": "135080"
  },
  {
    "text": "sense this is a vector. So this is an array of n bits. ",
    "start": "135080",
    "end": "143270"
  },
  {
    "text": "So we're talking\nabout something-- I'll call it v, let's say-- which is an array of n bits.",
    "start": "143270",
    "end": "153380"
  },
  {
    "text": "And the question is, in\nwhat sense is that a vector? In what sense does it\nlive in a vector space?",
    "start": "153380",
    "end": "160420"
  },
  {
    "text": "So when we say vector\nspace, we're usually thinking of arrays of n elements\nwith real numbers in them,",
    "start": "160420",
    "end": "166610"
  },
  {
    "text": "and the kind that you\nuse in physics, where you take linear combinations\nof them with real numbers",
    "start": "166610",
    "end": "172760"
  },
  {
    "text": "and you get new vectors. This is the same kind\nof thing, except it's working over not the real\nfield, but as we've seen, gf2.",
    "start": "172760",
    "end": "181550"
  },
  {
    "text": "So this is a vector\nspace over gf2.",
    "start": "181550",
    "end": "189620"
  },
  {
    "text": "It's a funny vector\nspace, again, because it has a finite\nnumber of elements. The vectors that we're\nused to thinking of--",
    "start": "189620",
    "end": "196310"
  },
  {
    "text": "Euclidean vector space has\nan infinity of elements, because you can have an\narray of n components,",
    "start": "196310",
    "end": "202100"
  },
  {
    "text": "but each component could\nbe any real number. So any point in 3D space\nwould be a vector in r3.",
    "start": "202100",
    "end": "209780"
  },
  {
    "text": "So this is a vector\nspace over gf2, and it only has a finite\nnumber of components--",
    "start": "209780",
    "end": "217400"
  },
  {
    "text": "only has 2 to the\nn possible vectors. It's a finite set of vectors,\nso it's strange that way too.",
    "start": "217400",
    "end": "225350"
  },
  {
    "text": "So in what sense is\nthat a vector space? Well, it turns out that\nthey're pretty abstract things",
    "start": "225350",
    "end": "232670"
  },
  {
    "text": "that you can refer to\nas vectors, provided they satisfy certain axioms. So what you want\nto be able to do",
    "start": "232670",
    "end": "238340"
  },
  {
    "text": "is define a sum\nof these objects. You need to have\na set of scanners",
    "start": "238340",
    "end": "244100"
  },
  {
    "text": "and define a scalar times\nvector multiplication. ",
    "start": "244100",
    "end": "252490"
  },
  {
    "text": "And then you need a\n0 vector, a vector that, when you add\nto another vector, gives you the same\nvector back again.",
    "start": "252490",
    "end": "258799"
  },
  {
    "text": "You need certain\ndistributivity properties.",
    "start": "258800",
    "end": "264080"
  },
  {
    "text": "So if you take a scalar\ntimes the sum of two vectors, you get things like that.",
    "start": "264080",
    "end": "272227"
  },
  {
    "text": "So you can list a bunch\nof these properties. I'm not trying to teach\nyou are the axioms are that define the vector space.",
    "start": "272227",
    "end": "277340"
  },
  {
    "text": "But there's a set of\naxioms, and you'll recognize very quickly that\nEuclidean space satisfies those axioms.",
    "start": "277340",
    "end": "282800"
  },
  {
    "text": "But the point is there\nare other objects that satisfy the same axioms, and you\ncan work with them as vectors--",
    "start": "282800",
    "end": "288169"
  },
  {
    "text": "so notions of independence\nof vectors, a basis in terms",
    "start": "288170",
    "end": "293330"
  },
  {
    "text": "of which you write\nother vectors-- all of these. Now, I'm not assuming you've\ndone a linear algebra course. I'm assuming you've\npicked up some",
    "start": "293330",
    "end": "299637"
  },
  {
    "text": "of this in the course of\ndoing physics, and so on. I'm just trying to\ntalk intuitively here.",
    "start": "299637",
    "end": "305090"
  },
  {
    "text": "One thing we don't have here is\na notion of an inner product,",
    "start": "305090",
    "end": "310970"
  },
  {
    "text": "or a dot product,\nor a scalar product. So if you had two n component\nvectors in Euclidean space--",
    "start": "310970",
    "end": "323128"
  },
  {
    "text": "you're probably used\nto this from physics-- you'll take inner products\ndefined in this fashion. Well, we can certainly do\nthis kind of computation",
    "start": "323128",
    "end": "329780"
  },
  {
    "text": "with the elements\nof a vector here, but the resulting object\ndoesn't have the properties",
    "start": "329780",
    "end": "335030"
  },
  {
    "text": "of an inner product. For instance, you can take the-- if you take the inner product\nof two non-zero vectors in real",
    "start": "335030",
    "end": "342470"
  },
  {
    "text": "vector space, you'll never get-- well, you can get\nthe inner product",
    "start": "342470",
    "end": "350360"
  },
  {
    "text": "to be 0 under very\nspecial conditions. There's a notion\nof orthogonality. It turns out that\ndoesn't actually work quite the same way\nhere over this space.",
    "start": "350360",
    "end": "358590"
  },
  {
    "text": "So what do we do have is\nwe set aside orthogonality. We'll talk about linear\ncombinations of vectors.",
    "start": "358590",
    "end": "367100"
  },
  {
    "start": "367100",
    "end": "372410"
  },
  {
    "text": "We'll talk about a\nset of basis vectors.",
    "start": "372410",
    "end": "377940"
  },
  {
    "text": "So a set of basis vectors\nwould be a set of vectors that you can take linear\ncombinations of to get",
    "start": "377940",
    "end": "383120"
  },
  {
    "text": "other vectors in the space-- and a minimal such set.",
    "start": "383120",
    "end": "388730"
  },
  {
    "text": "So we'll be using a bit of\nthe language of vector spaces. You might have some\nnotions of that might come from what\nyou've done with physics.",
    "start": "388730",
    "end": "395120"
  },
  {
    "text": "And that's all really\nthat we want to depend on. ",
    "start": "395120",
    "end": "404290"
  },
  {
    "text": "All right, so back to\nthis-- what we have is these arrays of n bits.",
    "start": "404290",
    "end": "410300"
  },
  {
    "text": "We think of them as\nvectors in some space. The dimension of the space\nis the number of vectors",
    "start": "410300",
    "end": "417410"
  },
  {
    "text": "that you need in order\nto generate other vectors by linear combination. So the question is, can\nI generate some vector",
    "start": "417410",
    "end": "428240"
  },
  {
    "text": "by taking alpha 1 v1 plus\nalpha 2 v2 plus alpha 3 v3?",
    "start": "428240",
    "end": "436009"
  },
  {
    "text": "So I'd like to be able to\ngenerate a vector in the space by taking a linear\ncombination of other vectors.",
    "start": "436010",
    "end": "441870"
  },
  {
    "text": "So if you ask for what's the\nminimum number of such vectors you need here in order\nto be able to generate",
    "start": "441870",
    "end": "448130"
  },
  {
    "text": "any vector by taking a\nlinear combination, that's the dimension of the space. So in that sense, it turns\nout that these anaerobes",
    "start": "448130",
    "end": "456440"
  },
  {
    "text": "live in an n-dimensional space. But they don't span all\nof n-dimensional space,",
    "start": "456440",
    "end": "463520"
  },
  {
    "text": "because you're just-- you've just got k of them here. It turns out that\nwhat you get by taking",
    "start": "463520",
    "end": "469940"
  },
  {
    "text": "linear combinations of these\nis a k-dimensional subspace of an n-dimensional space.",
    "start": "469940",
    "end": "476875"
  },
  {
    "text": "So in some sense,\nwhen you define a code, what you're\ndoing is you're saying, I have this n dimensional space\nthat my words can live in,",
    "start": "476875",
    "end": "485840"
  },
  {
    "text": "but I'm going to restrict\nmyself to words that live in a k-dimensional subspace\nso that, if a vector pops out",
    "start": "485840",
    "end": "493580"
  },
  {
    "text": "of that subspace, I recognize\nit as being an error. So that's the general idea.",
    "start": "493580",
    "end": "498830"
  },
  {
    "text": "All of this can be\ndone more carefully using the notion\nof vector spaces. I just wanted to give\nyou a rough idea of that.",
    "start": "498830",
    "end": "504667"
  },
  {
    "text": " This is one way\nof thinking over. Here was another way of thinking\nof it, which was column-wise.",
    "start": "504667",
    "end": "512680"
  },
  {
    "start": "512680",
    "end": "522396"
  },
  {
    "text": "We think of the generator\nmatrix as being made up of a bunch of columns. ",
    "start": "522396",
    "end": "534180"
  },
  {
    "text": "And that's useful\nwhen you want to think about how a parity\nbit is defined",
    "start": "534180",
    "end": "539970"
  },
  {
    "text": "in terms of the data bits. So here's what you see when\nyou think of this column-wise.",
    "start": "539970",
    "end": "546420"
  },
  {
    "start": "546421",
    "end": "553020"
  },
  {
    "text": "So let's take p1 here. ",
    "start": "553020",
    "end": "558750"
  },
  {
    "text": "Actually, let me\nspecialize this further. We've already said that, because\nof the form in which we set up",
    "start": "558750",
    "end": "565320"
  },
  {
    "text": "our code words, this is in\nwhat's called systematic form.",
    "start": "565320",
    "end": "570450"
  },
  {
    "start": "570450",
    "end": "576137"
  },
  {
    "text": "We've got the data\nbits sitting there, and then we add in\nthe parity bits. Because of that, we've said that\nthere's an identity matrix here",
    "start": "576137",
    "end": "583620"
  },
  {
    "text": "all the way down as 1's. And then we've got\nsome other matrix here, which is something\nwe'll denote by A.",
    "start": "583620",
    "end": "597839"
  },
  {
    "text": "OK, so when we do this\nmultiplication in the first k",
    "start": "597840",
    "end": "604800"
  },
  {
    "text": "positions, we just\npick up d1 to dk. In the next position over,\nI get the expression for p1.",
    "start": "604800",
    "end": "611160"
  },
  {
    "text": "So p1 is going to be d1\ntimes the first entry there plus d2 times the\nsecond entry, and so on.",
    "start": "611160",
    "end": "618280"
  },
  {
    "text": "So here's what I get.  Let me call this A11\nin that first row.",
    "start": "618280",
    "end": "629310"
  },
  {
    "text": "Here's A21, all\nthe way up to Ak1.",
    "start": "629310",
    "end": "634890"
  },
  {
    "text": "So these are just numbering the\nentries down that first row. ",
    "start": "634890",
    "end": "656020"
  },
  {
    "text": "So I'm taking a\ncombination like that, a linear combination\nof the data bits to get that first parity bit.",
    "start": "656020",
    "end": "661775"
  },
  {
    "start": "661775",
    "end": "674210"
  },
  {
    "text": "So the j-th parity bit\nis found by going over to the j-th column. The entries here are A1j\nall the way up to Akj.",
    "start": "674210",
    "end": "686090"
  },
  {
    "text": "So the way matrix\nmultiplication works-- if I'm looking for\nthe j-th entry-- the j-th parity bit here, I\ntake this and do the dot product",
    "start": "686090",
    "end": "695390"
  },
  {
    "text": "kind of expression with the j-th\ncolumn, so this is what I get. So this is a typical\nparity relation.",
    "start": "695390",
    "end": "700894"
  },
  {
    "start": "700895",
    "end": "707000"
  },
  {
    "text": "And it goes the other way too. ",
    "start": "707000",
    "end": "712399"
  },
  {
    "text": "If you had this expression,\nand not the matrix, you can just take those numbers\nand translate them back in.",
    "start": "712400",
    "end": "719019"
  },
  {
    "text": "And these numbers are\njust 0, 1 in our-- in the case of a binary field\nthat we're working over.",
    "start": "719020",
    "end": "726990"
  },
  {
    "text": "That is just 0, 1. So you either have the data\nbit there or you don't.",
    "start": "726990",
    "end": "732380"
  },
  {
    "text": "All additions or modulo\n2 additions, of course. ",
    "start": "732380",
    "end": "743640"
  },
  {
    "text": "Actually, let me call\nthis the parity--  it's the parity definition.",
    "start": "743640",
    "end": "749450"
  },
  {
    "text": "I may have had another\nterm for it in my slides. Let's see here--\nthis parity equation.",
    "start": "749450",
    "end": "757550"
  },
  {
    "text": "It just defines\nthe parity better. Here's what I think of\nas a parity relation. ",
    "start": "757550",
    "end": "770449"
  },
  {
    "text": "What is this sum?  What does that sum\nwork out to be?",
    "start": "770450",
    "end": "776885"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] GEORGE VERGHESE: Sorry? AUDIENCE: [INAUDIBLE] GEORGE VERGHESE: 0--\nbecause I'm adding",
    "start": "776885",
    "end": "783589"
  },
  {
    "text": "pj to itself, and then gf2. That gives me 0. And this is what I think\nof as a parity relation.",
    "start": "783590",
    "end": "790550"
  },
  {
    "start": "790550",
    "end": "797390"
  },
  {
    "text": "So a parity equation\ndefines my parity bits, but I get immediately from that\na parody relation that relates",
    "start": "797390",
    "end": "804710"
  },
  {
    "text": "my parity bit to my data bits. ",
    "start": "804710",
    "end": "809840"
  },
  {
    "text": "Turns out this is\nimportant for the way we're going to talk\nabout our correction.",
    "start": "809840",
    "end": "815520"
  },
  {
    "text": "OK, so let me step\noff the dime here.",
    "start": "815520",
    "end": "821070"
  },
  {
    "text": "And this is a\nparticular example. I just wanted to set\nup the general notation",
    "start": "821070",
    "end": "826275"
  },
  {
    "text": "before we got back to this. We've looked at this before-- 9, 4, 4 rectangular code.",
    "start": "826275",
    "end": "832970"
  },
  {
    "text": "So what might that be? How many data bits?",
    "start": "832970",
    "end": "838160"
  },
  {
    "text": " 9, 4, 4--",
    "start": "838160",
    "end": "844370"
  },
  {
    "text": "4 data bits, right? So how would I get in 9, 4, 4? I'd have D1, D2, D3, D4.",
    "start": "844370",
    "end": "853010"
  },
  {
    "text": "And then, depending on how I\nnumber this, P1, P2, P3, P4,",
    "start": "853010",
    "end": "859520"
  },
  {
    "text": "P5 would be one\nway to number it. I don't know if that\ncorresponds to what's up here. Can we check?",
    "start": "859520",
    "end": "864710"
  },
  {
    "text": " So what's P1? P1 is going to be D1 times 1\nplus D2 times 1, and that's it.",
    "start": "864710",
    "end": "875850"
  },
  {
    "text": "So it's d1 plus D2. So P1 is indeed that\nelement there on the board.",
    "start": "875850",
    "end": "882750"
  },
  {
    "text": "And so you can check\neach of these entries. Let's see. P5-- that's the\nlast entry up there.",
    "start": "882750",
    "end": "890510"
  },
  {
    "text": "That's going to be this\nrow inner producted or dot producted with all\nthe sequence of 1's",
    "start": "890510",
    "end": "898040"
  },
  {
    "text": "there, so it's going to be D1\nplus D2 plus D3 plus D4, which is indeed how that overall\nparity bit is defined.",
    "start": "898040",
    "end": "907460"
  },
  {
    "text": " So again, you see in\nthe generator matrix,",
    "start": "907460",
    "end": "912470"
  },
  {
    "text": "you have the identity\nmatrix there, and then you have this matrix\nthat we're referring to as A.",
    "start": "912470",
    "end": "919018"
  },
  {
    "text": "Now, the notation is\na little bit different reading chapters 5\nand 6, by the way. I've tried to stick with the\nnotation I had in lecture",
    "start": "919018",
    "end": "925280"
  },
  {
    "text": "last time in the chapter\n5 notation, which uses capital D for the\ndata bit vector and capital",
    "start": "925280",
    "end": "932389"
  },
  {
    "text": "C for the code word. So you'll see slightly\ndifferent notation in chapter 6, but I think you'll\nnavigate fine.",
    "start": "932390",
    "end": "940640"
  },
  {
    "text": "One other term here-- we say that these code words\nlive in the row space of G. So",
    "start": "940640",
    "end": "949280"
  },
  {
    "text": "the space that we generate,\nthe space of vectors, the subspace of the big\nspace that we generate by taking linear\ncombinations of these rows",
    "start": "949280",
    "end": "955910"
  },
  {
    "text": "is referred to as\nthe row space of G. So we define the\ncode by defining",
    "start": "955910",
    "end": "961190"
  },
  {
    "text": "a G. If the code's going\nto be in systematic form, we have the identity here,\nand then some matrix.",
    "start": "961190",
    "end": "967129"
  },
  {
    "text": "This is all for linear codes. And then the code words live in\nthe row space of this matrix.",
    "start": "967130",
    "end": "972197"
  },
  {
    "text": "In other words, they're obtained\nby taking linear combinations of the rows. ",
    "start": "972197",
    "end": "982550"
  },
  {
    "text": "Here's what I already\nhave on the board.  And it's just to say that the\nmatrix A that's sitting out",
    "start": "982550",
    "end": "990769"
  },
  {
    "text": "here-- this piece-- is\nobtained directly from the parity relations.",
    "start": "990770",
    "end": "999029"
  },
  {
    "text": "OK, so let's think about this. ",
    "start": "999030",
    "end": "1004120"
  },
  {
    "text": "Can two columns of the\nmatrix A be the same? ",
    "start": "1004120",
    "end": "1010500"
  },
  {
    "text": "What happens if two\ncolumns of A are the same? ",
    "start": "1010500",
    "end": "1019446"
  },
  {
    "text": "Let's say these two columns\nare identical to each other. ",
    "start": "1019447",
    "end": "1025439"
  },
  {
    "text": "What is that telling us\nabout the code that we have? ",
    "start": "1025440",
    "end": "1031939"
  },
  {
    "text": "Yeah? AUDIENCE: [INAUDIBLE] GEORGE VERGHESE: Yeah. And so basically, one\nof those parity bits",
    "start": "1031940",
    "end": "1038650"
  },
  {
    "text": "is not buying you\nanything, right? Yeah. OK, so if you did discover\ntwo columns two columns were",
    "start": "1038650",
    "end": "1048279"
  },
  {
    "text": "identical, then one\nof those parity bits is not checking a different\nlinear combination-- checking the same\nlinear combination,",
    "start": "1048280",
    "end": "1055350"
  },
  {
    "text": "and so it's not\nbuying you anything. What about two rows? ",
    "start": "1055350",
    "end": "1062780"
  },
  {
    "text": "Can two rows of the\nmatrix be identical? ",
    "start": "1062780",
    "end": "1071560"
  },
  {
    "text": "So let's actually think of them.",
    "start": "1071560",
    "end": "1077460"
  },
  {
    "text": "Erase that-- can I have two\nidentical rows here in A?",
    "start": "1077460",
    "end": "1083000"
  },
  {
    "start": "1083000",
    "end": "1094580"
  },
  {
    "text": "And if I did, what\nwould it mean? OK, let's say I have\ntwo identical rows.",
    "start": "1094580",
    "end": "1100100"
  },
  {
    "text": "What does it mean? What does it signify? Someone? ",
    "start": "1100100",
    "end": "1106690"
  },
  {
    "text": "Yeah? AUDIENCE: [INAUDIBLE] GEORGE VERGHESE:\nCould you speak up? Sorry. My hearing's not good. AUDIENCE: [INAUDIBLE]",
    "start": "1106690",
    "end": "1116543"
  },
  {
    "text": "GEORGE VERGHESE: So\nthere'll be two data bits that are entering the same\nway in every parity relation.",
    "start": "1116543",
    "end": "1122049"
  },
  {
    "text": "If two rows are the\nsame here, then there are two data bits\nhere that are entering every parity relationship in\nexactly the same combination.",
    "start": "1122050",
    "end": "1130799"
  },
  {
    "text": "And so you're not going\nto be able to distinguish between an error that happens\nin one of them and the-- and an error that\nhappens in another one.",
    "start": "1130800",
    "end": "1138100"
  },
  {
    "text": "So this is a problem. All right, so there are\ncertain conditions at the A",
    "start": "1138100",
    "end": "1144670"
  },
  {
    "text": "he has to satisfy.  All right, here's\nanother important matrix.",
    "start": "1144670",
    "end": "1151659"
  },
  {
    "text": "You may have already\nseen it in reading. You may not have seen\nit yet in recitation. And it's a matrix\nthat we call H.",
    "start": "1151660",
    "end": "1159130"
  },
  {
    "text": "And let's just think\nabout what it's doing.",
    "start": "1159130",
    "end": "1165250"
  },
  {
    "text": "What I'm trying\nto do is basically summarize this set of\nequations, the parity relations in matrix form.",
    "start": "1165250",
    "end": "1173650"
  },
  {
    "text": "So let's take a parity\nrelation that we had in this particular case.",
    "start": "1173650",
    "end": "1179680"
  },
  {
    "text": "In fact, let's go back\nto a specific one. ",
    "start": "1179680",
    "end": "1185679"
  },
  {
    "text": "Let's take the first\nparity relationship that we had over there. We said that P1 for this\ncode was D1 plus D2, right?",
    "start": "1185680",
    "end": "1195700"
  },
  {
    "text": "That's the equation\nfor the parity. The parity relationship is this.",
    "start": "1195700",
    "end": "1201310"
  },
  {
    "text": " How would I express\nthat in matrix form,",
    "start": "1201310",
    "end": "1206679"
  },
  {
    "text": "as part of a matrix equation? Well, that's what we're\nstarting to assemble here.",
    "start": "1206680",
    "end": "1212240"
  },
  {
    "text": "So let me show you what that is. Let's look at the\ntop row out here. What's the top row telling us?",
    "start": "1212240",
    "end": "1218860"
  },
  {
    "text": "It says 1 times D1 plus 1 times\nD2 plus 1 times P1 equals 0.",
    "start": "1218860",
    "end": "1227020"
  },
  {
    "text": "That's all that enters. So that first row is capturing\nthe first parity relationship.",
    "start": "1227020",
    "end": "1232550"
  },
  {
    "text": "And you can go down here. Go to the second row. This is saying D3 plus\nD4 plus P2 is equal to 0.",
    "start": "1232550",
    "end": "1242410"
  },
  {
    "text": "That's indeed the\nparity relationship associated with the second\nrow in the rectangular code.",
    "start": "1242410",
    "end": "1248350"
  },
  {
    "text": "So all that this is doing\nis listing all the parity relationships. So how many of\nthese do you have?",
    "start": "1248350",
    "end": "1254300"
  },
  {
    "text": "Well, you have as\nmany relationships as you have parity bits. So this is n minus\nk times n matrix,",
    "start": "1254300",
    "end": "1261580"
  },
  {
    "text": "and it's just listing\nthe parity relations.",
    "start": "1261580",
    "end": "1267279"
  },
  {
    "text": "We call this matrix\nH, and interestingly-- let's see-- there's an\nidentity matrix sitting here,",
    "start": "1267280",
    "end": "1274610"
  },
  {
    "text": "and the reason is that\neach of these equations involves only one parity bit. There's only a single PI\nthat's involved in each parity",
    "start": "1274610",
    "end": "1281740"
  },
  {
    "text": "relation, and so there\nshould be only one of these columns\npicked as a 1 when",
    "start": "1281740",
    "end": "1288370"
  },
  {
    "text": "you get to this segment that\nmultiplies the parity bits. So there's an identity\nmatrix sitting there,",
    "start": "1288370",
    "end": "1294460"
  },
  {
    "text": "and then there's\nthe rest of it here. So here's the identity matrix\nand here's the rest of it.",
    "start": "1294460",
    "end": "1301150"
  },
  {
    "text": "And not surprisingly,\nthe rest of it-- well, it comes from the\nsame set of coefficients,",
    "start": "1301150",
    "end": "1307750"
  },
  {
    "text": "and so it relates\nto the A matrix. And if you look at\nit carefully, it turns out, well, it is the A\nmatrix, but turned on its side.",
    "start": "1307750",
    "end": "1314440"
  },
  {
    "text": " A superscript T\nmeans A transposed--",
    "start": "1314440",
    "end": "1321370"
  },
  {
    "start": "1321370",
    "end": "1326640"
  },
  {
    "text": "IE, rows become columns. ",
    "start": "1326640",
    "end": "1333965"
  },
  {
    "text": "We're taking the a\nmatrix, and in some sense, turning it on its side. ",
    "start": "1333965",
    "end": "1339890"
  },
  {
    "text": "So that makes sense, because\nwhat defined the first parity relationship?",
    "start": "1339890",
    "end": "1346160"
  },
  {
    "text": "Well, we found it in the\ncolumns of A here before. That's what defined the\nparity relationships.",
    "start": "1346160",
    "end": "1352650"
  },
  {
    "text": "And now we're writing\nit out in this row form, so you've got to\ntranspose things. You've got to take what was a\ncolumn in A and make it a row.",
    "start": "1352650",
    "end": "1360120"
  },
  {
    "text": "So what you're seeing\nout here at the top-- that was the first\ncolumn of A. So now it's",
    "start": "1360120",
    "end": "1365179"
  },
  {
    "text": "the first row of A transpose. This was the second\ncolumn of A. Now it becomes the second row\nof A transpose, and so on.",
    "start": "1365180",
    "end": "1373160"
  },
  {
    "text": "So that's what that\nrelationship is. ",
    "start": "1373160",
    "end": "1384110"
  },
  {
    "text": "So I can write the parity\nrelationships in the form H",
    "start": "1384110",
    "end": "1393920"
  },
  {
    "text": "times C equals a\nwhole bunch of 0's.",
    "start": "1393920",
    "end": "1399140"
  },
  {
    "text": "This is k parody relationships. This is k 0's here. ",
    "start": "1399140",
    "end": "1408880"
  },
  {
    "text": "But I could read write the\nsame thing turned on its side, and that's what you're\nseeing over here.",
    "start": "1408880",
    "end": "1414320"
  },
  {
    "text": "So if H is the matrix\nthere, what is H transpose?",
    "start": "1414320",
    "end": "1420240"
  },
  {
    "text": " Let's see. I'm going to change-- interchange rows and columns.",
    "start": "1420240",
    "end": "1426940"
  },
  {
    "text": "So what's going to happen\nis that the first row of H is going to become the\nfirst column of H transpose.",
    "start": "1426940",
    "end": "1434410"
  },
  {
    "text": "And so if you imagine how\nthis gets turned on its side, here's what H\ntranspose looks like. ",
    "start": "1434410",
    "end": "1442930"
  },
  {
    "text": "H transpose looks like that. So when you transpose a matrix\nwhose entries are blocks, you end up flipping\nthe matrix around,",
    "start": "1442930",
    "end": "1450790"
  },
  {
    "text": "but also transposing\neach of the blocks. So that's A transpose. ",
    "start": "1450790",
    "end": "1462830"
  },
  {
    "text": "Oh, actually, sorry. I wrote this one\nwrong, didn't I? What is our vector C?",
    "start": "1462830",
    "end": "1469471"
  },
  {
    "text": "C is this vector. It's a code word.  When I set this up in matrix\nform, I got a column vector,",
    "start": "1469472",
    "end": "1478807"
  },
  {
    "text": "so I've got to\ntranspose this as well. That's what I was missing. That's C transpose\nthat I'm looking at.",
    "start": "1478807",
    "end": "1484380"
  },
  {
    "text": " So when I write down the\nparity relationships,",
    "start": "1484380",
    "end": "1489600"
  },
  {
    "text": "I've got this, but I could\nalso write it in the form-- ",
    "start": "1489600",
    "end": "1496357"
  },
  {
    "text": "when you transpose a product\nof things, what do you get? Well, it turns out, if I\ntranspose the product of two",
    "start": "1496357",
    "end": "1504149"
  },
  {
    "text": "things, I get the product\nof the transposes,",
    "start": "1504150",
    "end": "1513008"
  },
  {
    "text": "but in the reverse order.  So these are just different\nways of arranging the equations.",
    "start": "1513008",
    "end": "1519190"
  },
  {
    "text": "So I could have\nwritten it in this form",
    "start": "1519190",
    "end": "1524367"
  },
  {
    "text": "or I could take the\ntranspose of both sides, and I get something that\nlooks slightly different. So here, this would\nbe a row of 0's.",
    "start": "1524367",
    "end": "1537899"
  },
  {
    "text": "So this is just to get you\ncomfortable with the matrix operations. You'll see lots of\nthis in chapter 6. You want to get a little\ncomfortable with that.",
    "start": "1537900",
    "end": "1544750"
  },
  {
    "start": "1544750",
    "end": "1554660"
  },
  {
    "text": "Here's a question for you. Here's my H matrix. ",
    "start": "1554660",
    "end": "1561080"
  },
  {
    "text": "Here's my code words. ",
    "start": "1561080",
    "end": "1566169"
  },
  {
    "text": "If I have a code word\nof minimum weight, how many 1's would\nit have in it?",
    "start": "1566170",
    "end": "1572160"
  },
  {
    "text": " In this particular case,\nthis is a 9, 4, 4 code.",
    "start": "1572160",
    "end": "1579780"
  },
  {
    "text": "If I had a code word\nof minimum weight, how many 1's would\nit have in it? ",
    "start": "1579780",
    "end": "1593300"
  },
  {
    "text": "I heard something,\nbut I didn't hear where it came from, or\ndidn't hear it very clearly. Yeah? AUDIENCE: 4--",
    "start": "1593300",
    "end": "1598450"
  },
  {
    "text": "GEORGE VERGHESE: 4? Yeah, OK. [INAUDIBLE] heard there. OK. So the code word\nof minimum weight",
    "start": "1598450",
    "end": "1603649"
  },
  {
    "text": "would have weight 4, because\nthis is a code of distance 4.",
    "start": "1603650",
    "end": "1609200"
  },
  {
    "text": "It's a linear code. The minimum Hamming\ndistance is 4. It's a linear code, so we\nknow, for a linear code,",
    "start": "1609200",
    "end": "1616730"
  },
  {
    "text": "the minimum weight you'll find\namong all code words is 4. OK, so we've got a vector\nhere that has four 1's in it,",
    "start": "1616730",
    "end": "1623540"
  },
  {
    "text": "and everything else is 0. So when I take this\ncomputation, what",
    "start": "1623540",
    "end": "1629480"
  },
  {
    "text": "is it that I'm actually doing? If I take the matrix\nH and I multiplied",
    "start": "1629480",
    "end": "1634580"
  },
  {
    "text": "by a vector that\nhas four 1's in it, and everything else is 0,\nwhat is it that I'm actually doing to that matrix?",
    "start": "1634580",
    "end": "1640912"
  },
  {
    "text": "Yeah? AUDIENCE: [INAUDIBLE] GEORGE VERGHESE: Of the rows?",
    "start": "1640912",
    "end": "1645980"
  },
  {
    "text": "Am I taking combination\nof the rows? AUDIENCE: [INAUDIBLE] GEORGE VERGHESE: When\nI do a multiplication",
    "start": "1645980",
    "end": "1652520"
  },
  {
    "text": "in this fashion with the\nvector on the right-hand side, I end up doing the opposite\nof what I was doing here.",
    "start": "1652520",
    "end": "1658370"
  },
  {
    "text": "When I have the vector on\nthe left and I multiply, I'm taking the\ncombinations of the rows. When I've matrix\ntimes vector, I'm",
    "start": "1658370",
    "end": "1664610"
  },
  {
    "text": "taking combination\nof the columns. So if I had a vector\nyear with four 1's in it,",
    "start": "1664610",
    "end": "1670040"
  },
  {
    "text": "and everything's 0-- everything else\n0, I'd be taking-- I'd be picking out four\ncolumns of this to add,",
    "start": "1670040",
    "end": "1678170"
  },
  {
    "text": "and the result\nwould be a 0 vector.  Yeah?",
    "start": "1678170",
    "end": "1683445"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]\nall 0 [INAUDIBLE] GEORGE VERGHESE: All 0's here?",
    "start": "1683445",
    "end": "1688630"
  },
  {
    "text": "AUDIENCE: All 0's\nfor your code--  GEORGE VERGHESE:\nWere you asking,",
    "start": "1688630",
    "end": "1694010"
  },
  {
    "text": "why all 0's for the code? AUDIENCE: Well, why\nyou can't have all 0's? GEORGE VERGHESE:\nYou can have all 0. AUDIENCE: [INAUDIBLE]",
    "start": "1694010",
    "end": "1699532"
  },
  {
    "text": "GEORGE VERGHESE: Sorry. The minimum weight non-zero\nvector is the Hamming distance. Sorry. I may have dropped that word.",
    "start": "1699532",
    "end": "1704760"
  },
  {
    "text": "For a linear code, we know that\nthe minimum Hamming distance is the minimum weight\nnon-zero vector. That's what I meant to say.",
    "start": "1704760",
    "end": "1710650"
  },
  {
    "text": "I may have neglected\nto say that. Thanks for catching that. So we have a\nnon-zero vector here. It's got four 1's in it.",
    "start": "1710650",
    "end": "1716420"
  },
  {
    "text": "What that tells us is that there\nare four columns here that we can add together and\nget the 0 vector.",
    "start": "1716420",
    "end": "1722023"
  },
  {
    "text": "Do you think it's going to\nbe possible to find three columns here that we could add\ntogether and get the 0 vector?",
    "start": "1722023",
    "end": "1727129"
  },
  {
    "start": "1727130",
    "end": "1735800"
  },
  {
    "text": "I'm not asking\nyou to actually do the computation in\nyour head, but based on the reasoning we just had,\nif you found three columns that",
    "start": "1735800",
    "end": "1743150"
  },
  {
    "text": "could be added together to\ngive you the 0 vector, that would mean you'd have a vector\nhere, a code word with--",
    "start": "1743150",
    "end": "1750110"
  },
  {
    "text": "or any vector here\nwith three ones in it, everything else 0, such\nthat this product was 0.",
    "start": "1750110",
    "end": "1755875"
  },
  {
    "text": "So it would be a\nvalid code word.  Is that possible to take a\nvector here with just three 1's",
    "start": "1755875",
    "end": "1765409"
  },
  {
    "text": "in it, everything else 0,\nand have a valid code word? ",
    "start": "1765410",
    "end": "1770940"
  },
  {
    "text": "No, right? We said the minimum\nHamming distance is 4, the minimum weight\ncode word here is--",
    "start": "1770940",
    "end": "1777722"
  },
  {
    "text": "has got weight 4. You'll not find a valid\ncode word of weight 3. So you can actually\nlook at this H matrix",
    "start": "1777722",
    "end": "1784663"
  },
  {
    "text": "and figure out what the\nminimum Hamming distance is. It's basically the\nminimum number of columns that you can add to\nget the 0 vector.",
    "start": "1784663",
    "end": "1793610"
  },
  {
    "text": "Now, does that tell\nyou, by the way, why you can't, in this instance, have--",
    "start": "1793610",
    "end": "1800067"
  },
  {
    "text": "well, if you discovered\nthat you could add two columns together\nand get the 0 vector, what would that tell you?",
    "start": "1800067",
    "end": "1805730"
  },
  {
    "text": "If two columns of A transpose\nwere identical or two rows of A were identical,\nthat would tell you",
    "start": "1805730",
    "end": "1812840"
  },
  {
    "text": "that you can add two columns\nand get the 0 vector. That would mean that the Hamming\ndistance is 2, not 4, right?",
    "start": "1812840",
    "end": "1819779"
  },
  {
    "text": "A Hamming distance 2\ncode is not worth much.",
    "start": "1819780",
    "end": "1825020"
  },
  {
    "text": "It's no good for\nerror correction. That comes back to what I said\nearlier in these questions.",
    "start": "1825020",
    "end": "1835809"
  },
  {
    "text": " If A had two rows the\nsame, well, there's",
    "start": "1835810",
    "end": "1843760"
  },
  {
    "text": "two data bits that\nare always entering in the same combination,\nso you're not protecting against\nindividual errors there.",
    "start": "1843760",
    "end": "1850268"
  },
  {
    "text": "And so it's exactly that\nissue that we're seeing. The Hamming distance\nends up being 2, if you have two rows\nof A that are identical.",
    "start": "1850268",
    "end": "1858020"
  },
  {
    "text": "OK, so there's a lot\nthat can be gleaned from the generator matrix\nand the parity check matrix.",
    "start": "1858020",
    "end": "1867640"
  },
  {
    "text": "So this is what I\njust went through-- that, if you have\nthe H matrix, you can get the minimum\ndistance D by looking",
    "start": "1867640",
    "end": "1875672"
  },
  {
    "text": "to see what's the minimum\nnumber of columns you can add to get the 0 vector. ",
    "start": "1875672",
    "end": "1881830"
  },
  {
    "text": "All right, now, how\ndoes decoding work? We've gone through this effort\nto generate a code word,",
    "start": "1881830",
    "end": "1897530"
  },
  {
    "text": "and then, at the receiving\nend, we get some word. ",
    "start": "1897530",
    "end": "1902780"
  },
  {
    "text": "This is some received\nword, and it's going to be a code word\nplus possibly an error.",
    "start": "1902780",
    "end": "1908440"
  },
  {
    "start": "1908440",
    "end": "1914779"
  },
  {
    "text": "And now we want\nto figure out, is the thing we received\nalready a code word? Or if it's not, what code\nword can I correct it to?",
    "start": "1914780",
    "end": "1922635"
  },
  {
    "text": "And we're going to assume we\nhave just single-bit errors. ",
    "start": "1922635",
    "end": "1928980"
  },
  {
    "text": "So one way to do it is just\nan exhaustive search, which is you've got this\nreceived code word,",
    "start": "1928980",
    "end": "1935660"
  },
  {
    "text": "you know that it's going\nto be one of 2 to the k-- so it's going to be no more than\nhaving distance 1 from the 2",
    "start": "1935660",
    "end": "1943670"
  },
  {
    "text": "to the k code words that\nyou have in your code set.",
    "start": "1943670",
    "end": "1948820"
  },
  {
    "text": " So you can compare against\nthose 2 to the k code words,",
    "start": "1948820",
    "end": "1955370"
  },
  {
    "text": "and whichever one it's\nhaving distance 1 away from, that's the one that\nyou're going to announce.",
    "start": "1955370",
    "end": "1962269"
  },
  {
    "text": "So that'd be one way to do it. The thing is that that's\nnot exploiting anything",
    "start": "1962270",
    "end": "1968660"
  },
  {
    "text": "nice about the structure\nof linear code, so what I want to\ntalk to you about now is a way to actually\ncapture this error",
    "start": "1968660",
    "end": "1975980"
  },
  {
    "text": "in the case of a linear code. So this builds on\nthe relationships",
    "start": "1975980",
    "end": "1981950"
  },
  {
    "text": "that we've been developing\nsome intuition for here. So here's what happens.",
    "start": "1981950",
    "end": "1987510"
  },
  {
    "text": "You get a received\nvector and bits,",
    "start": "1987510",
    "end": "1992970"
  },
  {
    "text": "which is valid code word\nplus a vector E that has a single 1 in it,\nand everything else 0,",
    "start": "1992970",
    "end": "1999799"
  },
  {
    "text": "or is completely 0. So if you were receiving\nthe code word correctly, you've had no errors,\nand this is what you get.",
    "start": "1999800",
    "end": "2006898"
  },
  {
    "text": "But if you've had\na single bit error, then E is a vector\nwith a single 1 in it. It's n bits long, has\na single one in it,",
    "start": "2006898",
    "end": "2014770"
  },
  {
    "text": "and that gets added\nto the code word to give you what you receive. So here's what\nwe're going to do.",
    "start": "2014770",
    "end": "2020620"
  },
  {
    "text": "We're going to exploit\nthe relationships that we had up here.",
    "start": "2020620",
    "end": "2026110"
  },
  {
    "text": "We know that H times is a\nvalid code word equals 0.",
    "start": "2026110",
    "end": "2032350"
  },
  {
    "text": "Or I can write it the other\nway around if I want to do row multiplications-- sorry--",
    "start": "2032350",
    "end": "2038590"
  },
  {
    "text": "C times H equals 0.  So I'm going to take\nthe receipt vector",
    "start": "2038590",
    "end": "2045010"
  },
  {
    "text": "and do that\nmultiplication with it. And in this case, I've\nchosen to write it as H times the transpose.",
    "start": "2045010",
    "end": "2052929"
  },
  {
    "text": "So if the received vector\nwas a valid code word, I'm going to get 0.",
    "start": "2052929",
    "end": "2058480"
  },
  {
    "text": "If the received vector\nwas not a valid code word, I'll get something else. And that's what we refer\nto as a syndrome vector.",
    "start": "2058480",
    "end": "2065770"
  },
  {
    "text": "OK, so let's expand this out. We've got R is C plus E--\nso C plus E transpose.",
    "start": "2065770",
    "end": "2072129"
  },
  {
    "text": "That's the multiplication\nwe're going to do. This matrix\nmultiplication will be",
    "start": "2072130",
    "end": "2078042"
  },
  {
    "text": "the sum of the individual\nmatrix multiplications, so it's going to be\nH times C plus H-- sorry-- H times C transpose\nplus H times E transpose.",
    "start": "2078042",
    "end": "2086969"
  },
  {
    "text": "So let's write that out. ",
    "start": "2086969",
    "end": "2103240"
  },
  {
    "text": "So we've got H\ntimes R transpose is going to be H times C transpose\nplus H times E transpose.",
    "start": "2103240",
    "end": "2113160"
  },
  {
    "text": "We know this is 0. It's a 0 vector. ",
    "start": "2113160",
    "end": "2121460"
  },
  {
    "text": "n minus k here, the number\nof parity relations-- that's how long\nthat 0 vector is.",
    "start": "2121460",
    "end": "2126910"
  },
  {
    "text": "Yeah. And then we've got\nsome other vector, which we're referring\nto as a syndrome vector.",
    "start": "2126910",
    "end": "2132367"
  },
  {
    "text": " OK? ",
    "start": "2132367",
    "end": "2139769"
  },
  {
    "text": "So let's see. What does HE\ntranspose look like. E transpose is going to\nhave just a single 1 in it",
    "start": "2139770",
    "end": "2146700"
  },
  {
    "text": "somewhere. ",
    "start": "2146700",
    "end": "2152750"
  },
  {
    "text": "And here's H. Let's see.",
    "start": "2152750",
    "end": "2164070"
  },
  {
    "text": "A transpose stacked up next\nto the identity-- that's what H looked like.",
    "start": "2164070",
    "end": "2170030"
  },
  {
    "text": "So when we compute-- let me write this better-- I didn't write that well-- this is H.",
    "start": "2170030",
    "end": "2178400"
  },
  {
    "text": "And what I'm writing\nhere is HE transpose.",
    "start": "2178400",
    "end": "2185119"
  },
  {
    "text": "So what is HE transpose doing? ",
    "start": "2185120",
    "end": "2192610"
  },
  {
    "text": "When I multiply a\nmatrix like this by a vector that has\njust a single 1 in it, what am I doing?",
    "start": "2192610",
    "end": "2198402"
  },
  {
    "text": "What do I end up doing?  Sorry. I heard a voice\nfrom somewhere here.",
    "start": "2198402",
    "end": "2204789"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] GEORGE VERGHESE: Picking\nup one column, right? I'm just selecting\nout a column of H.",
    "start": "2204790",
    "end": "2210880"
  },
  {
    "text": "So each error that you\ncan get will give you a syndrome that corresponds\nto picking on one column of H.",
    "start": "2210880",
    "end": "2220735"
  },
  {
    "text": "And column of H is\nassociated with data bits here or parity bits here.",
    "start": "2220735",
    "end": "2226600"
  },
  {
    "text": " So really, this is\nall that you have",
    "start": "2226600",
    "end": "2232660"
  },
  {
    "text": "to do to do your\nerror correction. You can pre-compute, or store\nbasically the columns of H",
    "start": "2232660",
    "end": "2241300"
  },
  {
    "text": "in your database-- compute H times the received\nvector to get the syndrome.",
    "start": "2241300",
    "end": "2250420"
  },
  {
    "text": "That's really H times\nthe error, which is giving you the syndrome. That's just a single column\nof H. So the syndromes",
    "start": "2250420",
    "end": "2257050"
  },
  {
    "text": "that you can possibly get\nare individual columns of H. So you know what H is. You've got it stored.",
    "start": "2257050",
    "end": "2263320"
  },
  {
    "text": "Compute the syndrome,\nand see which column of H it corresponds to. That's the bit\nthat has the error.",
    "start": "2263320",
    "end": "2270698"
  },
  {
    "text": "And actually, the only\ncases you're interested in are where you are going\nto correct the data bit, so this is really all\nthe part that you really",
    "start": "2270698",
    "end": "2278440"
  },
  {
    "text": "have to focus on. So you compute the syndromes. You compare against the columns\nof H, which are your syndrome",
    "start": "2278440",
    "end": "2284980"
  },
  {
    "text": "vectors, and then you're done. I think I see the\nsame thing over here.",
    "start": "2284980",
    "end": "2290890"
  },
  {
    "text": "Let's just look\nat it concretely-- again, for the same code,\nthe rectangular code",
    "start": "2290890",
    "end": "2297460"
  },
  {
    "text": "with all the parity bits there. So this is how you\ngenerated a code word.",
    "start": "2297460",
    "end": "2304119"
  },
  {
    "text": "Sorry. OK, let's take the data bit-- the data vector being all 1's.",
    "start": "2304120",
    "end": "2310869"
  },
  {
    "text": "This is the code word\nthat goes with it. It happens with\nthis particular code that all the parity\nbits then are 0.",
    "start": "2310870",
    "end": "2316635"
  },
  {
    "text": " What you receive ends up being\nthis, because one of the data",
    "start": "2316635",
    "end": "2322809"
  },
  {
    "text": "bits ends up getting corrupted. When you take that received\nvector and pre-multiplied by H,",
    "start": "2322810",
    "end": "2331610"
  },
  {
    "text": "here's the resulting\nsyndrome vector that you get.",
    "start": "2331610",
    "end": "2339350"
  },
  {
    "text": " And what error does\non correspond to?",
    "start": "2339350",
    "end": "2345060"
  },
  {
    "text": "Well, actually, if you\nlook in the columns of H, you'll see that what\nyou've pulled out",
    "start": "2345060",
    "end": "2350100"
  },
  {
    "text": "is the second\ncolumn, so that means a second data bit is an error. And that's the\nchange that you make.",
    "start": "2350100",
    "end": "2356113"
  },
  {
    "text": "So it really is that simple. You take the received\nword pre-multiplied",
    "start": "2356113",
    "end": "2361770"
  },
  {
    "text": "by the parity check matrix H,\nlook at the syndrome vector,",
    "start": "2361770",
    "end": "2367200"
  },
  {
    "text": "and see which of the columns\nof H that corresponds to. That's the bit\nyou're going to flip.",
    "start": "2367200",
    "end": "2372930"
  },
  {
    "text": "All right?  So now you're actually only\ndealing with this many vectors.",
    "start": "2372930",
    "end": "2384460"
  },
  {
    "text": "It's a number of\nvectors equal to-- how many is that?",
    "start": "2384460",
    "end": "2389770"
  },
  {
    "text": " We've got to do\nthe multiplication,",
    "start": "2389770",
    "end": "2395930"
  },
  {
    "text": "but you just have to compare\nwith the number of vectors in those columns.",
    "start": "2395930",
    "end": "2402220"
  },
  {
    "text": "So it's a much simpler\ntask, computationally. ",
    "start": "2402220",
    "end": "2409000"
  },
  {
    "text": "OK, I think we've said all this. And so let me just\nwind up on linear block",
    "start": "2409000",
    "end": "2416769"
  },
  {
    "text": "codes with a quick\nsummary, and then we'll go on to talk about\nsome extensions here.",
    "start": "2416770",
    "end": "2422870"
  },
  {
    "text": "We've seen all this. We know what the rate of a\nlinear code is-- k over n-- how many errors we can correct.",
    "start": "2422870",
    "end": "2430640"
  },
  {
    "text": "And we've seen all this--\nwhat a parity bit does, whether repetition code--\nit's called replication",
    "start": "2430640",
    "end": "2436400"
  },
  {
    "text": "code in the notes, but the\nmore familiar term-- actually, the more commonly used\nterm is repetition code.",
    "start": "2436400",
    "end": "2441800"
  },
  {
    "text": "We've looked at Hamming codes\nand the rectangular code as well. And so these are\nthe ones that you want to have in mind\nas particular examples",
    "start": "2441800",
    "end": "2449539"
  },
  {
    "text": "to work with when you're trying\nto come up with examples that",
    "start": "2449540",
    "end": "2455420"
  },
  {
    "text": "will either prove or disprove-- that will illustrate\na conjecture or disprove a\nconjecture, for instance.",
    "start": "2455420",
    "end": "2460850"
  },
  {
    "text": "And you'll see many\nproblems on past quizzes that are of that type. ",
    "start": "2460850",
    "end": "2468410"
  },
  {
    "text": "And then what we did today was\nlooking at syndrome decoding. All right, so this was all\nfocused on single error",
    "start": "2468410",
    "end": "2475580"
  },
  {
    "text": "correction in linear codes. But the point is that\nthat may or may not",
    "start": "2475580",
    "end": "2481820"
  },
  {
    "text": "be the situation that\nyou're dealing with. We actually said that, to\nget better error protection",
    "start": "2481820",
    "end": "2491383"
  },
  {
    "text": "while maintaining\nhigh data rates, you probably want to work\nwith longer and longer strings of data. Well, if you work with\nlonger strings of data,",
    "start": "2491383",
    "end": "2497240"
  },
  {
    "text": "you're going to get\nmore bits and error. So you may not be\nable to limit yourself to thinking about\nsingle-bit error correction.",
    "start": "2497240",
    "end": "2506900"
  },
  {
    "text": "We have talked a bit-- and you've done this in\nrecitation too, I imagine--",
    "start": "2506900",
    "end": "2512120"
  },
  {
    "text": "well, you've probably done more\nin recitation than in lecture-- with independent corruption\nof multiple bits.",
    "start": "2512120",
    "end": "2519590"
  },
  {
    "text": "So let me say a few\nwords about that. ",
    "start": "2519590",
    "end": "2531250"
  },
  {
    "text": "Let's think of a\nsystematic code, for instance, still k bits\nhere, and then parity bits here.",
    "start": "2531250",
    "end": "2540390"
  },
  {
    "start": "2540390",
    "end": "2546299"
  },
  {
    "text": "But what if you could have\nup to t errors, not just a single error-- so if you wanted to\nprotect against t errors?",
    "start": "2546300",
    "end": "2559674"
  },
  {
    "text": " So in some sense, you\nwant your n minus k bits",
    "start": "2559675",
    "end": "2565860"
  },
  {
    "text": "here to signal all\nthose possibilities,",
    "start": "2565860",
    "end": "2571580"
  },
  {
    "text": "so you need the number\nof possibilities that can be signaled by\nn minus k parity bits",
    "start": "2571580",
    "end": "2577530"
  },
  {
    "text": "to be greater than or\nequal to the number of possible conditions\nthat correspond to having up to t errors.",
    "start": "2577530",
    "end": "2584510"
  },
  {
    "text": "And we've said a\nlittle bit about this, but you can have now either\nno error at all, which",
    "start": "2584510",
    "end": "2590099"
  },
  {
    "text": "is one condition; or an error\nin one of these bits, which is n separate conditions;\nor you could have two bits",
    "start": "2590100",
    "end": "2599010"
  },
  {
    "text": "out of here being an error. So how many conditions is that? ",
    "start": "2599010",
    "end": "2606660"
  },
  {
    "text": "n choose 2 and so on-- I'll leave you to figure out\nwhere you end up on that. So I just wanted to say--",
    "start": "2606660",
    "end": "2612540"
  },
  {
    "text": " you've seen this in recitation,\nbut I haven't mentioned it in lecture.",
    "start": "2612540",
    "end": "2617970"
  },
  {
    "text": "I don't want to say\nlater that, oh, I didn't know it was something\nwe had to know for a quiz. We do expect that\nwhat n choose m means.",
    "start": "2617970",
    "end": "2626250"
  },
  {
    "text": "So n choose m is\nthe number of ways of picking m things\nfrom n things,",
    "start": "2626250",
    "end": "2633030"
  },
  {
    "text": "and we assume that what that-- how that's done. So you've got n objects.",
    "start": "2633030",
    "end": "2639930"
  },
  {
    "text": "You want to pick m\nthings from there. So you can pick the first one\nin n ways, the second one in n",
    "start": "2639930",
    "end": "2646069"
  },
  {
    "text": "minus 1 ways, and keep\non going until you get to n minus n plus 1, which\nis also n factorial over n",
    "start": "2646070",
    "end": "2659910"
  },
  {
    "text": "minus m factorial. But when you did\nthat picking, you",
    "start": "2659910",
    "end": "2665160"
  },
  {
    "text": "were paying attention to the\norder in which you collected the things, but if the ordering\ndoesn't matter to you-- if all these objects\nare interchangeable--",
    "start": "2665160",
    "end": "2672120"
  },
  {
    "text": "then you've actually\novercounted. So you've got m things,\nbut the order in which you pick them doesn't matter,\nbecause they're all",
    "start": "2672120",
    "end": "2677728"
  },
  {
    "text": "interchangeable. And so you've overcounted. You've got to divide by the\nnumber of ways of rearranging m",
    "start": "2677728",
    "end": "2683760"
  },
  {
    "text": "things, and so that's how\nyou get that expression.",
    "start": "2683760",
    "end": "2689550"
  },
  {
    "text": "So you start off with thinking\nabout how you pick m things, and then make a\nlittle correction,",
    "start": "2689550",
    "end": "2694619"
  },
  {
    "text": "and so this is\nwhat n choose m is. Another thing that I\njust threw in for fun, because it's something\nyou might want",
    "start": "2694620",
    "end": "2701040"
  },
  {
    "text": "to carry around in your head-- if you don't have a feel for\nhow n factorial grows with n,",
    "start": "2701040",
    "end": "2707610"
  },
  {
    "text": "well, it actually\ngrows pretty fast. It's actually growing\nlike n to the n.",
    "start": "2707610",
    "end": "2714060"
  },
  {
    "text": "This is a very famous\napproximation, referred to as Sterling's approximation. So when you get out to\nlarge n, the right-hand side",
    "start": "2714060",
    "end": "2720690"
  },
  {
    "text": "here is a very good\napproximation to n factorial. And you see that it's sort\nof like n to the n, which",
    "start": "2720690",
    "end": "2727140"
  },
  {
    "text": "makes sense, because you\nseem to be multiplying n by itself n times. Except you're multiplying\nby a little bit less than n",
    "start": "2727140",
    "end": "2733440"
  },
  {
    "text": "each time, so the e over there\nends up compensating for it, it turns out.",
    "start": "2733440",
    "end": "2739170"
  },
  {
    "text": "And then there's an extra\nn to the 1/2 out there. OK, so we'll assume that\nhow to do the combinatorics.",
    "start": "2739170",
    "end": "2746900"
  },
  {
    "text": "And now, what this\nis saying is, what's the probability\nof getting m bits and error in an n-bit word?",
    "start": "2746900",
    "end": "2754319"
  },
  {
    "text": "Well, if you've got\nm bits in error, that's because those m\nbits flipped independently,",
    "start": "2754320",
    "end": "2759480"
  },
  {
    "text": "each with probability p. The remaining n\nminus m did not flip, so that's the probability of\ngetting one such configuration.",
    "start": "2759480",
    "end": "2767130"
  },
  {
    "text": "And then you count all the\npossible configurations. So what that top expression is\nis the probability of getting",
    "start": "2767130",
    "end": "2772770"
  },
  {
    "text": "m bits in error out\nof n, and that's something that we want you\nto be comfortable with.",
    "start": "2772770",
    "end": "2778160"
  },
  {
    "text": "OK, now, just to\nwind up here, I want",
    "start": "2778160",
    "end": "2785940"
  },
  {
    "text": "to go back to this\nlast bullet, which is that, in many\nsituations, the errors don't",
    "start": "2785940",
    "end": "2791820"
  },
  {
    "text": "occur independently\nin the different bits. If you think of a CD with\na scratch or a thumb print",
    "start": "2791820",
    "end": "2797070"
  },
  {
    "text": "or something on\nit, that's local, and so if you get\none bit corrupted,",
    "start": "2797070",
    "end": "2803670"
  },
  {
    "text": "that increases the\nchances that the next bit is corrupted as well. So errors can occur in bursts. ",
    "start": "2803670",
    "end": "2811319"
  },
  {
    "text": "If you're trying to make\na phone call from a car, and you're suddenly\nshielded from an antenna--",
    "start": "2811320",
    "end": "2818470"
  },
  {
    "text": "a nearby antenna,\nthen you're going to lose a whole bunch\nof bits in sequence. So bits can be in\nerror in clusters,",
    "start": "2818470",
    "end": "2826240"
  },
  {
    "text": "and what we've talked about so\nfar doesn't quite manage that. So here's an idea for\nhow to do that, which",
    "start": "2826240",
    "end": "2836010"
  },
  {
    "text": "is referred to as interleaving. So if we had B\ndifferent code words",
    "start": "2836010",
    "end": "2844388"
  },
  {
    "text": "that we were going to transmit,\nand we did it the normal way, we would send out the first\none, second one, and so on.",
    "start": "2844388",
    "end": "2850230"
  },
  {
    "text": "This little shading\nhere is supposed to indicate the parity bits\ngoing along with the data bits.",
    "start": "2850230",
    "end": "2856200"
  },
  {
    "text": "If we had a burst of errors,\nwe could lose two entire words over there--",
    "start": "2856200",
    "end": "2862500"
  },
  {
    "text": "nothing to be done. They derive entirely corrupted,\nand we wouldn't get them back. The idea of interleaving\nis stack up B words",
    "start": "2862500",
    "end": "2871079"
  },
  {
    "text": "that you want to\ntransmit, but transmit the bits out one at a time\nfrom each of the B words.",
    "start": "2871080",
    "end": "2878400"
  },
  {
    "text": "So you transmit the first\nbit from the first word, first bit from the\nsecond word, and so on. And so this is the\nsequence in which",
    "start": "2878400",
    "end": "2884760"
  },
  {
    "text": "you're doing the transmission. Now, if you've got\na burst of errors, you're corrupting a\nmore localized set",
    "start": "2884760",
    "end": "2892440"
  },
  {
    "text": "of bits in each of the\nwords, and there's some hope that your error correction\nthen can recover.",
    "start": "2892440",
    "end": "2898390"
  },
  {
    "text": "So this is very often done. ",
    "start": "2898390",
    "end": "2904080"
  },
  {
    "text": "I don't think I want\nto actually walk you through a particular\nscheme for it, but we'll have it on the\nslides for you to look through.",
    "start": "2904080",
    "end": "2913030"
  },
  {
    "text": "But basically, it actually\nturns out to work very well.",
    "start": "2913030",
    "end": "2918090"
  },
  {
    "text": "And that may be all I\nwant to do for today. We'll see you next time.",
    "start": "2918090",
    "end": "2923790"
  },
  {
    "text": "We're going to talk about\nlinear codes next time, but a much more\nelaborate kind of code called a convolutional code.",
    "start": "2923790",
    "end": "2930360"
  },
  {
    "text": "Thank you. ",
    "start": "2930360",
    "end": "2935000"
  }
]