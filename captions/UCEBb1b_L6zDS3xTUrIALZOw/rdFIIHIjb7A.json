[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "7759"
  },
  {
    "text": " YAEL KALAI: Before\nwe go to the test,",
    "start": "7760",
    "end": "13920"
  },
  {
    "text": "I just want to point out\nthis PCP is nonadaptive. What are the queries\nof the verifier?",
    "start": "13920",
    "end": "21660"
  },
  {
    "text": "He behaves like a verifier of\nthe GKR or, in other words,",
    "start": "21660",
    "end": "28170"
  },
  {
    "text": "a verifier for sum-check. And sum-check is a\npublic coin protocol. So the messages don't\ndepend on anything.",
    "start": "28170",
    "end": "34500"
  },
  {
    "text": "You just choose some randomness,\nand that defines the queries. So it is a nonadaptive--\nthe questions you ask",
    "start": "34500",
    "end": "42950"
  },
  {
    "text": "don't depend on the\nanswers you get. This is because the\nsum-check is public coin",
    "start": "42950",
    "end": "48450"
  },
  {
    "text": "so that we do get nonadaptive. And as we said,\nthough, we do need to check that the witness\nsitting in the PCP",
    "start": "48450",
    "end": "56390"
  },
  {
    "text": "is of low degree. So let me just do that quickly. ",
    "start": "56390",
    "end": "62950"
  },
  {
    "text": "So how do we check it? So the prover, what he does,\nthere's the H to the m.",
    "start": "62950",
    "end": "71350"
  },
  {
    "text": "He should put some\nwitness here, 0, 1, 0, 2-- w0, w1, w2, and so on.",
    "start": "71350",
    "end": "79540"
  },
  {
    "text": "So all the up to wm-- m is up to--",
    "start": "79540",
    "end": "87130"
  },
  {
    "text": "let me call the number\nof bits in the witness s. We'll just have a lot of\n0's appendage just so--",
    "start": "87130",
    "end": "94810"
  },
  {
    "text": "because m mistaken to be\nlog s, so not to confuse. And now he's giving kind\nof he takes the extension.",
    "start": "94810",
    "end": "101720"
  },
  {
    "text": "So this is f to the m. And this should be-- this is just what it should be.",
    "start": "101720",
    "end": "106970"
  },
  {
    "text": "This is what the prover does. This is the low-degree\nextension of H to the m, which should\nbe of degree H minus 1",
    "start": "106970",
    "end": "116320"
  },
  {
    "text": "in each coordinate. ",
    "start": "116320",
    "end": "124180"
  },
  {
    "text": "And I want to check that. Now here's the sad truth. I can't actually check this.",
    "start": "124180",
    "end": "130220"
  },
  {
    "text": "This thing is low\ndegree with degree H minus 1 in each coordinate. I can't check it because\nmaybe it is, but here, he",
    "start": "130220",
    "end": "139420"
  },
  {
    "text": "put something bad. I can't check it. I mean, I'm not good. The verifier has small queries.",
    "start": "139420",
    "end": "147650"
  },
  {
    "text": "So he can't actually check\nthat this is low degree. That's impossible. So what does he do?",
    "start": "147650",
    "end": "153200"
  },
  {
    "text": "What does he do instead? He's going to check that\nit's close to low degree.",
    "start": "153200",
    "end": "158680"
  },
  {
    "text": "So here's the guarantee. The guarantee we want is to\nsay that I'm going to check.",
    "start": "158680",
    "end": "163960"
  },
  {
    "text": "I'm going to do a test. And if the test\npasses the guarantee I want, not that this is\nlow degree, but it's close.",
    "start": "163960",
    "end": "171950"
  },
  {
    "text": "There's another\npolynomial of low degree that agrees with\nthis on most points.",
    "start": "171950",
    "end": "179770"
  },
  {
    "text": "So we have a low\ndegree test is a check.",
    "start": "179770",
    "end": "188610"
  },
  {
    "text": "At the end of the check,\nwhat the verifier-- the guarantee the verifier has\nis the guarantee we want is that",
    "start": "188610",
    "end": "195840"
  },
  {
    "text": "with high probability, there\nexists a low degree polynomial,",
    "start": "195840",
    "end": "208800"
  },
  {
    "text": "W tilde such that-- W tilde such that for most z or\nthe probability of a random z",
    "start": "208800",
    "end": "225300"
  },
  {
    "text": "that Wz equals is greater than 1\nminus epsilon for some epsilon.",
    "start": "225300",
    "end": "237550"
  },
  {
    "text": "That's what we want\nto check for most. Now if we got this check,\nif we succeeded in this,",
    "start": "237550",
    "end": "244260"
  },
  {
    "text": "if we succeeded in this check,\nthen now what we know is that--",
    "start": "244260",
    "end": "249430"
  },
  {
    "text": "let's think in our head that\nthis is-- he put this up there. Yeah, he put this.",
    "start": "249430",
    "end": "255100"
  },
  {
    "text": "But they're so close. Let's pretend he\nput this up there. Anyway, the probability\nthat we'll ask",
    "start": "255100",
    "end": "260430"
  },
  {
    "text": "and a z for which they're\ndifferent is only epsilon. Mostly, they agree.",
    "start": "260430",
    "end": "265660"
  },
  {
    "text": "So all we need is to\nverify that there's--",
    "start": "265660",
    "end": "272400"
  },
  {
    "text": "because we check V0 and a random\nz at the end, most likely,",
    "start": "272400",
    "end": "277800"
  },
  {
    "text": "it's the z's for\nwhich they agree. So all we need to check is that\nthey agree almost everywhere.",
    "start": "277800",
    "end": "283270"
  },
  {
    "text": "The fact that there\nare few locations that they don't agree-- A, there's nothing\nI can do about it because if I don't query them,\nI don't know if they exist.",
    "start": "283270",
    "end": "289727"
  },
  {
    "text": "I don't know what's\nsitting there. But, actually, I\ndon't care that much because they're not going to--",
    "start": "289727",
    "end": "295180"
  },
  {
    "text": "I'm not going to query them\nanyway with high probability. So really, all I want\nto say is that there",
    "start": "295180",
    "end": "301070"
  },
  {
    "text": "exists a w tilde\nthat is low degree and agrees with\nhigh probability.",
    "start": "301070",
    "end": "306080"
  },
  {
    "text": "How do I do that? How do I check that\nthis W, that this V--",
    "start": "306080",
    "end": "312470"
  },
  {
    "text": "completely malicious V0 tilde--",
    "start": "312470",
    "end": "317810"
  },
  {
    "text": "behaves close at\nleast-- as I said, we can't assume it's totally,\nbut close to low degree-- agrees with the low degree\npolynomial in many places.",
    "start": "317810",
    "end": "326630"
  },
  {
    "text": "Yeah? STUDENT: [INAUDIBLE]  YAEL KALAI: Exactly.",
    "start": "326630",
    "end": "332789"
  },
  {
    "text": "Exactly. Let's check on some random. Let's do a random sample. The way it's done-- so there are\nmany low degree tests out there,",
    "start": "332790",
    "end": "340040"
  },
  {
    "text": "by the way. But one kind of common\none is the following. I'm going to take a\nrandom line in f to the m,",
    "start": "340040",
    "end": "348740"
  },
  {
    "text": "and I'm going to check-- I'm going to ask,\nopen this random line.",
    "start": "348740",
    "end": "356240"
  },
  {
    "text": "Now this random line should be\nof degree m times H minus 1.",
    "start": "356240",
    "end": "364830"
  },
  {
    "text": "That's what it should be. I'm going to check that. That's the degree. If it's not the\ndegree I reject, then",
    "start": "364830",
    "end": "372110"
  },
  {
    "text": "you're immediately rejected. So now what I know is\nthat, on a random line,",
    "start": "372110",
    "end": "380930"
  },
  {
    "text": "you agree with the\nlow degree polynomial because, otherwise,\nyou're rejected.",
    "start": "380930",
    "end": "387380"
  },
  {
    "text": "Now one needs to argue\nthat because you agree on a random line with a\nlow degree polynomial,",
    "start": "387380",
    "end": "393420"
  },
  {
    "text": "why does that mean that you're\nactually close to a low degree polynomial all around?",
    "start": "393420",
    "end": "399355"
  },
  {
    "text": "But this is the test. This is really one of the low\ndegree tests that's out there. So this is sitting in the PCP.",
    "start": "399355",
    "end": "406010"
  },
  {
    "text": "The verifier will choose a\nrandom line, and he will test--",
    "start": "406010",
    "end": "411280"
  },
  {
    "text": "you can even test m times H,\nrandom points on this line. He'll take m times-- or\nyou can test this plus 1.",
    "start": "411280",
    "end": "420650"
  },
  {
    "text": "It doesn't really matter,\ndepending on the soundness you want. But you can even\ntake this plus 1.",
    "start": "420650",
    "end": "426910"
  },
  {
    "text": "This defines polynomial of\nlow degree of this degree.",
    "start": "426910",
    "end": "433400"
  },
  {
    "text": "And now you check that the\nadditional point agrees with it. Or, if you want, you can ask\nthe entire f is only anyway,",
    "start": "433400",
    "end": "440240"
  },
  {
    "text": "only polylog s bit. So you can just read\nthe entire thing and see that, by interpolation,\nthat it's a low degree",
    "start": "440240",
    "end": "447460"
  },
  {
    "text": "polynomial, and if\nit's not, you reject. And then one needs\nto check, though.",
    "start": "447460",
    "end": "455060"
  },
  {
    "text": "So a random line agrees with\na low degree polynomial. Why does it imply\nthat everything agrees",
    "start": "455060",
    "end": "461140"
  },
  {
    "text": "with the low degree polynomial? That's a leap-- or\nwith high probability.",
    "start": "461140",
    "end": "468040"
  },
  {
    "text": "So I have a good homework\nproblem around that. So let's leave that alone.",
    "start": "468040",
    "end": "475884"
  },
  {
    "text": "I have a lot of this-- I have a lot of good\nhomework problems today,",
    "start": "475885",
    "end": "482200"
  },
  {
    "text": "which is nice because it\nsummarizes all the information theory part of the class. ",
    "start": "482200",
    "end": "489650"
  },
  {
    "text": "Any questions before we proceed? ",
    "start": "489650",
    "end": "494770"
  },
  {
    "text": "Yeah? STUDENT: So is\nthere some argument here that if the polynomial\nis low degree, then",
    "start": "494770",
    "end": "499870"
  },
  {
    "text": "it corresponds to some\nweakness in this, like, PCP? ",
    "start": "499870",
    "end": "505535"
  },
  {
    "text": "YAEL KALAI: So if\nthe argument-- if you can argue that this is\nclose to low degree,",
    "start": "505535",
    "end": "511130"
  },
  {
    "text": "then take the actual low\ndegree that it's close to. Now this defines a witness.",
    "start": "511130",
    "end": "516490"
  },
  {
    "text": "STUDENT: Oh, by\nevaluating on each-- I see. YAEL KALAI: Yeah,\nand now this is going to be the witness that\nyou violated on, exactly.",
    "start": "516490",
    "end": "523460"
  },
  {
    "text": "Exactly. Great. ",
    "start": "523460",
    "end": "528990"
  },
  {
    "text": "Yeah? STUDENT: [INAUDIBLE]\nwe don't really need to do a [INAUDIBLE] circuit\nbecause if the [INAUDIBLE],",
    "start": "528990",
    "end": "541630"
  },
  {
    "text": "and you can just do a\nsingle subtract to do it. YAEL KALAI: To do the\nAND, you're saying?",
    "start": "541630",
    "end": "546660"
  },
  {
    "text": "STUDENT: Yes, some\nkind of things right there because we\ndon't need to subtract the first [INAUDIBLE].",
    "start": "546660",
    "end": "552029"
  },
  {
    "text": "YAEL KALAI: Yeah, so what you're\nsaying is-- what you're saying, look, there may be ways\nto do optimizations here.",
    "start": "552030",
    "end": "557430"
  },
  {
    "text": "The way I showed you is\nvery kind of generic. It said, well,\nthis is low depth.",
    "start": "557430",
    "end": "565710"
  },
  {
    "text": "Now I say wait. It's not just low depth. Look, it's a very\nspecific circuit. It's one big AND with\nthree ORs, and maybe you",
    "start": "565710",
    "end": "573449"
  },
  {
    "text": "can do it much better. So let me say\nyou're 100% correct. There's a lot of\noptimizations on GKR.",
    "start": "573450",
    "end": "580120"
  },
  {
    "text": "I kind of showed you just\nkind of a feasibility result. But, as I said, these\nthings are used, and they're not used as I showed\nit because they're optimized.",
    "start": "580120",
    "end": "589950"
  },
  {
    "text": "So there's a lot of\noptimizations that they do, and a lot on the circuit\nlevel, as you say.",
    "start": "589950",
    "end": "595170"
  },
  {
    "text": "What's the best way to\narithmetize the circuit? No, we don't want to just\nmaybe open it to just random--",
    "start": "595170",
    "end": "602779"
  },
  {
    "text": "degree 2, degree 2, degree 2. Maybe we don't want to\ndo exactly the go doc. Maybe we want to\ndo something else.",
    "start": "602780",
    "end": "608360"
  },
  {
    "text": "How to generate\nthe circuit to make it the most efficient\npossible-- there's",
    "start": "608360",
    "end": "614210"
  },
  {
    "text": "a lot of optimizations\non that part. So yeah, I showed you. And, as I said today, you\ncan use GKR to be like--",
    "start": "614210",
    "end": "621380"
  },
  {
    "text": "the GKR protocol can\nbe linear time prover. They manage to get to--\nactually, I don't actually-- I know how they got\nto quasi linear.",
    "start": "621380",
    "end": "630000"
  },
  {
    "text": "The linear is\nactually a new work that I didn't yet have\ntime to dive into. But, apparently, they have\nreally nice optimizations",
    "start": "630000",
    "end": "636680"
  },
  {
    "text": "that they use. And most of them, I\nthink, is exactly-- and the circuit level around\nideas that you mentioned.",
    "start": "636680",
    "end": "644660"
  },
  {
    "text": "Great. So any other questions? You guys have great great\nquestions, so this is fantastic.",
    "start": "644660",
    "end": "653130"
  },
  {
    "text": "So I want to say a few things\nthat I didn't talk about. Maybe they'll show\nup in the homework.",
    "start": "653130",
    "end": "658699"
  },
  {
    "text": "Maybe not. And it's related to\nquestions that people asked,",
    "start": "658700",
    "end": "663860"
  },
  {
    "text": "that Leo asked and others. So, first of all, I said--",
    "start": "663860",
    "end": "670580"
  },
  {
    "text": "I showed poly log. I said we can go all\nthe way down to 3.",
    "start": "670580",
    "end": "675959"
  },
  {
    "text": "Let me just mention, 3\nis the best we can do. We cannot go below 3.",
    "start": "675960",
    "end": "681140"
  },
  {
    "text": "From poly log n, you can\ndo kind of log log n. Using recursion, you can do\nPCP on the poly log n queries.",
    "start": "681140",
    "end": "688740"
  },
  {
    "text": "You can recurse. And then, from the log\nlog n to 3, you can do-- there are these\nexponential-sized proofs.",
    "start": "688740",
    "end": "695520"
  },
  {
    "text": "But to take a log\nlog n and make it-- there's exponential-sized\nPCP with only three queries.",
    "start": "695520",
    "end": "700910"
  },
  {
    "text": "So you apply an\nexponential-sized PCP to this log log n sized PCP. They have all these cool tricks,\nand they manage to get to 3.",
    "start": "700910",
    "end": "711100"
  },
  {
    "text": "Three bits. Three bits. Can you go to two bits? No.",
    "start": "711100",
    "end": "716470"
  },
  {
    "text": "Yeah? STUDENT: Is that only for\nsoundness half, like if-- YAEL KALAI: No. Any constant soundness. No-- STUDENT: What about for\nnegligible soundness?",
    "start": "716470",
    "end": "725890"
  },
  {
    "text": "YAEL KALAI: No,\nconstant soundness. Constant soundness.",
    "start": "725890",
    "end": "731200"
  },
  {
    "text": "For constant soundness,\nwe can get 3. The constant, I think, is\nbetter than half, but whatever.",
    "start": "731200",
    "end": "738310"
  },
  {
    "text": "But you can get 3. And can you get constant\nsoundness for 2? No.",
    "start": "738310",
    "end": "743685"
  },
  {
    "text": " No, I think you just can't. So I don't want to get--",
    "start": "743685",
    "end": "750680"
  },
  {
    "text": "yeah, I don't want to get-- and can you get 1? Definitely not. So can you get 2? No. However, you can\nget 2 if you make",
    "start": "750680",
    "end": "759399"
  },
  {
    "text": "each the answer to each\nquery like a block. So if you want two queries where\neach query gives you an answer",
    "start": "759400",
    "end": "766120"
  },
  {
    "text": "bit, you cannot have PCP. And the reason\nactually-- intuitively,",
    "start": "766120",
    "end": "771440"
  },
  {
    "text": "the reason you cannot have a\nPCP is because two SAT is easy. If you have only\ntwo kind of queries,",
    "start": "771440",
    "end": "780700"
  },
  {
    "text": "intuitively, the reason why\nit's because two SAT is easy. I don't want to go into. Maybe it can be homework,\nso let's leave that.",
    "start": "780700",
    "end": "787390"
  },
  {
    "text": "But what you can\nhave-- and we do have--",
    "start": "787390",
    "end": "792400"
  },
  {
    "text": "it's not just do-- we do have PCPs that\nhave only two queries, but the answers are large.",
    "start": "792400",
    "end": "800529"
  },
  {
    "text": "I mean, OK, you can have\none query if the answer is the size of the witness. OK, that's easy. But we can have two queries\nwhere the size of each answer",
    "start": "800530",
    "end": "808210"
  },
  {
    "text": "is poly log. OK, but not one. Or constant for all I know.",
    "start": "808210",
    "end": "815520"
  },
  {
    "text": "So maybe, we'll do\nsome homework kind of to get intuitions\naround these things. Yeah.",
    "start": "815520",
    "end": "820920"
  },
  {
    "text": "AUDIENCE: Actually,\nI think we do have to be qualitative\nif we're allowed to have imperfect completeness.",
    "start": "820920",
    "end": "828100"
  },
  {
    "text": "[INAUDIBLE] YAEL KALAI: Oh, if you allow\nto have imperfect completeness, then you're right.",
    "start": "828100",
    "end": "835180"
  },
  {
    "text": "Sorry. Everything I'm saying is\nfor perfect completeness. Once you allow to reduce\ncompleteness to 1 minus epsilon,",
    "start": "835180",
    "end": "844050"
  },
  {
    "text": "things change. So what do we know,\nyeah, with two--",
    "start": "844050",
    "end": "851580"
  },
  {
    "text": "if you have. Yeah I'm not I don't remember\noff the top of my head what's two.",
    "start": "851580",
    "end": "856600"
  },
  {
    "text": "But what's the soundness. Two queries, constant soundness. 2 bits. AUDIENCE: One third, two third. YAEL KALAI: One\nthird, two third.",
    "start": "856600",
    "end": "861850"
  },
  {
    "text": "OK. OK. AUDIENCE: [INAUDIBLE] YAEL KALAI: Yeah,\nyeah, yeah, yeah. OK, yeah. You're right. So here, I'm assuming-- yeah. You're right.",
    "start": "861850",
    "end": "866942"
  },
  {
    "text": "Yeah, good point. Thank you. Yeah, so if you're willing\nto relax completeness, we can get 2.",
    "start": "866942",
    "end": "873210"
  },
  {
    "text": "But perfect\ncompleteness, you can't. Yeah. AUDIENCE: Wait. When you say, \"blocks,\" and\nwhen there are two blocks is",
    "start": "873210",
    "end": "879540"
  },
  {
    "text": "possible, are you talking\nabout contiguous bits, blocks [INAUDIBLE]. YAEL KALAI: Yeah. So yeah. Think about it-- each query\nyou read-- so the PCP consists",
    "start": "879540",
    "end": "886710"
  },
  {
    "text": "of instead of bit, bit, bit. Think about it like a word,\na word, a word, a word.",
    "start": "886710",
    "end": "892660"
  },
  {
    "text": "And each word is poly\nlog and bits for example. And now, you can\nread only two words. So you can say I want to\nread word i and word j.",
    "start": "892660",
    "end": "901110"
  },
  {
    "text": "AUDIENCE: OK. YAEL KALAI: Yeah. Yes. AUDIENCE: Don't we not\nhave perfect completeness",
    "start": "901110",
    "end": "906480"
  },
  {
    "text": "right now because of\nthe low-degree test that has [INAUDIBLE]? YAEL KALAI: OK, good. No. So good question.",
    "start": "906480",
    "end": "912490"
  },
  {
    "text": "So the question is, now, do\nwe have perfect completeness? And the answer is yes,\nbecause if you're honest--",
    "start": "912490",
    "end": "917967"
  },
  {
    "text": "perfect completeness\nmeans if you're honest, you'll be accepted\nwith probability 1. So if you're honest,\nyou are going",
    "start": "917967",
    "end": "923250"
  },
  {
    "text": "to give w tilde, which is\nthe low-degree extension of your witness. And when I take a random line,\nit's going to be of low degree.",
    "start": "923250",
    "end": "930900"
  },
  {
    "text": "For sure. Everything is low degree. If you're malicious, then-- AUDIENCE: So the\nsoundness is [INAUDIBLE].",
    "start": "930900",
    "end": "937947"
  },
  {
    "text": "YAEL KALAI: The soundness. Exactly. You lose-- you're right. Good point. What you mentioned is you say,\nbecause we do the low degree.",
    "start": "937947",
    "end": "943568"
  },
  {
    "text": "We lose a little\nbit in the soundness because maybe you're\na little malicious and we don't catch you.",
    "start": "943568",
    "end": "948950"
  },
  {
    "text": "Or and that goes, yeah. So you need to make the\nsoundness a little bigger so",
    "start": "948950",
    "end": "954410"
  },
  {
    "text": "that you can eat\nup what you lose a little bit in the low degree. Yeah, yeah. Great question. Yeah. AUDIENCE: When you're\ndoing the protocol",
    "start": "954410",
    "end": "960410"
  },
  {
    "text": "to bring the standards down,\ncan you just use the same tools and just check the\ndifferent randomness? YAEL KALAI: Yeah, yeah, yeah. Good.",
    "start": "960410",
    "end": "965540"
  },
  {
    "text": "So the question is\nwhen you repeat, so let's say you're not happy. We have soundness half. We're not happy.",
    "start": "965540",
    "end": "971100"
  },
  {
    "text": "What do you do? You need to actually\nrepeat the entire PCP or-- no you don't because\nthe prover will just give you",
    "start": "971100",
    "end": "979400"
  },
  {
    "text": "the same PCP over and over. So no. You keep the same PCP. All you do is you run the\nverifier, the PCP verifier,",
    "start": "979400",
    "end": "986090"
  },
  {
    "text": "fresh with fresh\nrandomness more times. So if you have\nsoundness happen, you want to have soundness\n1 over 2 to the k,",
    "start": "986090",
    "end": "993339"
  },
  {
    "text": "what you do is you run\nthe PCP verifier k times. So it generates\none set of queries,",
    "start": "993340",
    "end": "999950"
  },
  {
    "text": "you run them fresh again,\nanother set of queries, fresh again. Each time is going to be\nrejected, probably half,",
    "start": "999950",
    "end": "1006960"
  },
  {
    "text": "independently of the other time. So you just get\nthat is rejected.",
    "start": "1006960",
    "end": "1012910"
  },
  {
    "text": "He's accepted probability\n1 over 2 to the k. Yeah. So just the verifiers\nneeds to repeat.",
    "start": "1012910",
    "end": "1019630"
  },
  {
    "text": "The prover is not\ninvolved in this. Great question, guys. Any other questions?",
    "start": "1019630",
    "end": "1026112"
  },
  {
    "text": "AUDIENCE: What's the reference\nfor this two-query thing?  YAEL KALAI: I can put it in--",
    "start": "1026112",
    "end": "1033254"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] YAEL KALAI: Yeah, I can put\nit in Canvas, in the website.",
    "start": "1033254",
    "end": "1039839"
  },
  {
    "text": "OK, if I don't\nremember, remind me. OK. So before we move to\ncrypto, I just want",
    "start": "1039839",
    "end": "1045930"
  },
  {
    "text": "to wrap up kind of the\ninformation theory part and say that in some\nsense, I taught you almost",
    "start": "1045930",
    "end": "1054180"
  },
  {
    "text": "like, OK, so what's missing? What did you not\nget a chance to see?",
    "start": "1054180",
    "end": "1059230"
  },
  {
    "text": "You didn't get a chance\nto see the three query. So you didn't get\na chance to see the recursion, and the Hadamard,\nand this nice way to getting",
    "start": "1059230",
    "end": "1066240"
  },
  {
    "text": "three PCPs. There's another beautiful,\nbeautiful result by Reingold,",
    "start": "1066240",
    "end": "1074370"
  },
  {
    "text": "and Rothblum, and\nRothblum from 2018.",
    "start": "1074370",
    "end": "1079620"
  },
  {
    "text": "'16? '18? Yeah. AUDIENCE: [INAUDIBLE] '16,\nbut now when you look at it, it says '18 because they-- the [INAUDIBLE].",
    "start": "1079620",
    "end": "1085710"
  },
  {
    "text": "YAEL KALAI: Yeah, OK. Well, it started in '16. And since then, there's work. But essentially,\nhere's the question.",
    "start": "1085710",
    "end": "1092500"
  },
  {
    "text": "This is kind of a question\nthat's still missing. And here's the question.",
    "start": "1092500",
    "end": "1098559"
  },
  {
    "text": "The question is, we have\nefficient, doubly-efficient",
    "start": "1098560",
    "end": "1104970"
  },
  {
    "text": "protocol for bounded depth. Can we construct\ndoubly-efficient protocol",
    "start": "1104970",
    "end": "1110030"
  },
  {
    "text": "for bounded space? Now, look. We know that we cannot hope\nto have doubly efficient,",
    "start": "1110030",
    "end": "1116360"
  },
  {
    "text": "or not doubly efficient for that\nmatter, for more than p space. We know that ip equals p space.",
    "start": "1116360",
    "end": "1123200"
  },
  {
    "text": "So you can't have\ninteractive proof be the prover efficient or not\nefficient for more than p space.",
    "start": "1123200",
    "end": "1132480"
  },
  {
    "text": "OK, so we're stuck with p space. Now, you can exchange. You can go from depth to space. Actually, there's a\nway to convert depth",
    "start": "1132480",
    "end": "1139310"
  },
  {
    "text": "to space and vice versa. But it doesn't\npreserve efficiency. So you can go from bounded\ndepth to bounded space.",
    "start": "1139310",
    "end": "1146678"
  },
  {
    "text": "Now, you must go\nbecause I showed you a double-efficient double rooted\nbounded space if it required more than poly space,\nsomething in the world",
    "start": "1146678",
    "end": "1153320"
  },
  {
    "text": "would go wrong because we\nknow ip equals p space. So the point is we do know.",
    "start": "1153320",
    "end": "1158570"
  },
  {
    "text": "We can convert a\nbounded-depth computation to a bounded-space computation.",
    "start": "1158570",
    "end": "1165170"
  },
  {
    "text": "But this conversion\ndoesn't respect the efficiency of the circuit.",
    "start": "1165170",
    "end": "1171270"
  },
  {
    "text": "So if you take a\nbounded-depth circuit and convert it to a\nbounded-space circuit,",
    "start": "1171270",
    "end": "1177150"
  },
  {
    "text": "the bounded-space circuit,\nor bounded-space computation, I should say the\nbounded-space computation now",
    "start": "1177150",
    "end": "1183110"
  },
  {
    "text": "will just be very, very long. Even if the bounded-depth\ncircuit, let's say,",
    "start": "1183110",
    "end": "1188570"
  },
  {
    "text": "was only size s polynomial,\nthe bounded-space computation",
    "start": "1188570",
    "end": "1193700"
  },
  {
    "text": "can be exponential. OK, so it doesn't respect\nkind of the efficiency",
    "start": "1193700",
    "end": "1198755"
  },
  {
    "text": "of the computation when\nyou do the transition from bounded depth to\nbounded space, or vice versa.",
    "start": "1198755",
    "end": "1204150"
  },
  {
    "text": "So now, there's a question. Can you do-- let's say you have\na bounded-space computation, not a bounded depth.",
    "start": "1204150",
    "end": "1210049"
  },
  {
    "text": "Yeah, you can convert a\nbounded depth and pay a price. But you don't want to.",
    "start": "1210050",
    "end": "1216410"
  },
  {
    "text": "Can you do a\nbounded-space computation, make it doubly efficient?",
    "start": "1216410",
    "end": "1223000"
  },
  {
    "text": "OK, so here is kind of a goal. And those who've been working\nwith me for a while maybe",
    "start": "1223000",
    "end": "1231070"
  },
  {
    "text": "traumatized by this goal\nbecause I tormented them. ",
    "start": "1231070",
    "end": "1238539"
  },
  {
    "text": "I think this is one of the most\ninteresting problems out there. It's really frustrating to\nme that there's no solution.",
    "start": "1238540",
    "end": "1244790"
  },
  {
    "text": "I'll give you an\nincentive in a second. But here's the-- ",
    "start": "1244790",
    "end": "1250269"
  },
  {
    "text": "OK. So here's my question. If you have any time T space\nS computation, t of n, s of n.",
    "start": "1250270",
    "end": "1268300"
  },
  {
    "text": "Here's the goal. Goal, we want an\ninteractive proof such",
    "start": "1268300",
    "end": "1278680"
  },
  {
    "text": "that prover runtime\nis efficient, poly t.",
    "start": "1278680",
    "end": "1285410"
  },
  {
    "text": " We want verifier runtime, or--\nlet's count, OK, verify runtime.",
    "start": "1285410",
    "end": "1295320"
  },
  {
    "text": "Well, the poor guy has\nto read the input length. So x plus times I'll be nice\nwith you, times whatever.",
    "start": "1295320",
    "end": "1303519"
  },
  {
    "text": "It can be even poly. I'm happy even with poly if\nyou want to put poly here. I'll be generous-- times\npoly and the space,",
    "start": "1303520",
    "end": "1314230"
  },
  {
    "text": "not depending on T. So he can read the input\nand run times the space.",
    "start": "1314230",
    "end": "1319420"
  },
  {
    "text": "And usually, we want the\ncomplex, the communication complexity, to grow\nonly like poly space.",
    "start": "1319420",
    "end": "1325330"
  },
  {
    "text": "But if you want to\nput x in there, fine. Be my guest. This is what we want.",
    "start": "1325330",
    "end": "1331270"
  },
  {
    "text": "This is open. So we want a doubly-efficient\ninteractive proof for p space.",
    "start": "1331270",
    "end": "1337195"
  },
  {
    "text": "Let me tell you what Reingold\nand the Rothblum brothers did. They almost did this.",
    "start": "1337195",
    "end": "1342970"
  },
  {
    "text": "But here's this annoying part. The verifier runtime and\nthe communication complexity",
    "start": "1342970",
    "end": "1351210"
  },
  {
    "text": "is S, great, but times\nT to the epsilon.",
    "start": "1351210",
    "end": "1359370"
  },
  {
    "text": "And this epsilon\nhas to be a constant because the communication\ncomplexity grows with 2 to the something, o\ntilde, I think 1 over epsilon,",
    "start": "1359370",
    "end": "1368081"
  },
  {
    "text": "or something like that. So there's exponential\ngrowth in epsilon. So you can't take-- you can\nmaybe take epsilon, like,",
    "start": "1368082",
    "end": "1377130"
  },
  {
    "text": "1 over log, log, or log, log and\nlike log, log, log n over log--",
    "start": "1377130",
    "end": "1382770"
  },
  {
    "text": "1 over log, log n. Think of it as constant. You don't really gain\nby trying some constant.",
    "start": "1382770",
    "end": "1388090"
  },
  {
    "text": "It's not giving you much. So they present the result\nas epsilon being a constant. So this is really\nannoying because now",
    "start": "1388090",
    "end": "1394529"
  },
  {
    "text": "the verifier, if T is\npolynomial, is super polynomial, the verifier is\nnot even efficient. So this is really\nfor p, actually.",
    "start": "1394530",
    "end": "1402600"
  },
  {
    "text": "I want to get rid of this\nand do for big T. OK, this is still an open question.",
    "start": "1402600",
    "end": "1408809"
  },
  {
    "text": "OK, now, I need now OK. I'm begging you guys,\na plea for the smart,",
    "start": "1408810",
    "end": "1414490"
  },
  {
    "text": "all you smart MIT\nstudents, or Harvard, or at BU, or Northeastern,\nor whoever you are.",
    "start": "1414490",
    "end": "1420539"
  },
  {
    "text": "This is a personal favor. Can someone please solve this? And I know I need to\ngive you guys incentive.",
    "start": "1420540",
    "end": "1427170"
  },
  {
    "text": "So beyond probably I don't\nknow, like a ACM PhD award",
    "start": "1427170",
    "end": "1434430"
  },
  {
    "text": "or whatever, that's nothing. But I'm willing to\ngive you a $500 prize.",
    "start": "1434430",
    "end": "1441310"
  },
  {
    "text": "AUDIENCE: Whoa. YAEL KALAI: So-- AUDIENCE: You're\noutbidding [INAUDIBLE].",
    "start": "1441310",
    "end": "1447382"
  },
  {
    "text": "YAEL KALAI: That didn't\ngive a prize on this, right? He gave like a fake\ncheap prize or something. AUDIENCE: But it was, like, $15.",
    "start": "1447383",
    "end": "1454615"
  },
  {
    "text": "YAEL KALAI: OK. AUDIENCE: He was a\ngood [INAUDIBLE]. YAEL KALAI: OK, so this.",
    "start": "1454615",
    "end": "1460160"
  },
  {
    "text": "You get rid of the T, do this. You can take pictures. So you can actually\nwork on this, please.",
    "start": "1460160",
    "end": "1465328"
  },
  {
    "text": "OK. Let's move on. OK, so this\nessentially concludes",
    "start": "1465328",
    "end": "1472490"
  },
  {
    "text": "the unit on information theory. OK, there's another\nproof system that I didn't talk about, which is a\nmulti-prover interactive proofs.",
    "start": "1472490",
    "end": "1480620"
  },
  {
    "text": "The reason I didn't\ntalk about them is because they're\nreally equivalent to probabilistically-checkable\nproofs.",
    "start": "1480620",
    "end": "1485880"
  },
  {
    "text": "They're not much different. Maybe I'll put something along\nthese lines in the homework. I don't know.",
    "start": "1485880",
    "end": "1491210"
  },
  {
    "text": "I need to think about it. But that's another\nthing we did not cover. But the really, an\nequivalent thing to PCP.",
    "start": "1491210",
    "end": "1498240"
  },
  {
    "text": "But it's another\nproof model that was considered in the literature. OK, so that concludes\ninformation theory.",
    "start": "1498240",
    "end": "1507570"
  },
  {
    "text": "So that's all we know. We're stuck with p space. Actually, we don't even--",
    "start": "1507570",
    "end": "1513880"
  },
  {
    "text": "and we can get a very\nefficient verification. But then, we have a very\nlong proof like the PCP.",
    "start": "1513880",
    "end": "1519259"
  },
  {
    "text": "You can verify things super\nefficiently, like fantastic. But you need to write somewhere\nthis gigantic PCP proof.",
    "start": "1519260",
    "end": "1527930"
  },
  {
    "text": "That's the PCP. And note, it's very\nimportant that the verifier,",
    "start": "1527930",
    "end": "1534804"
  },
  {
    "text": "that this PCP is written. If the PCP is not\nwritten somewhere, and he's talking with the\nprover and telling him, look,",
    "start": "1534805",
    "end": "1540970"
  },
  {
    "text": "I know you have a PCP\nwritten there somewhere, can you give me locations i,\nj and k, a cheating prover",
    "start": "1540970",
    "end": "1546490"
  },
  {
    "text": "will choose the locations\nbased on i, j, and k And then for i, j, k,\nhe'll put in location i 0,",
    "start": "1546490",
    "end": "1554080"
  },
  {
    "text": "and maybe for i and\nj prime k prime, he will then put\nlocation i 1, and cheat. So it's very important\nthat the PCP is written.",
    "start": "1554080",
    "end": "1562460"
  },
  {
    "text": "And now when you ask query\ni, it's what's written there. The answer cannot depend\non query j or query k.",
    "start": "1562460",
    "end": "1570160"
  },
  {
    "text": "So it seems like it's\na very nice model. It's fantastic. But where is this huge\nthing going to be written?",
    "start": "1570160",
    "end": "1576160"
  },
  {
    "text": "OK, so if we want-- at the end of the day,\nhere's our goal really. What we're after really is\nto take an actual proof,",
    "start": "1576160",
    "end": "1585370"
  },
  {
    "text": "like a witness, and shrink it. It's big. I don't like big. Shrink.",
    "start": "1585370",
    "end": "1591080"
  },
  {
    "text": "Make it small. Here. Now, it's smaller. Now, of course, we can't do it. So or can do it.",
    "start": "1591080",
    "end": "1596540"
  },
  {
    "text": "So now we start\nchanging the model and say, OK, you know what? Let's try interactive. You know what?",
    "start": "1596540",
    "end": "1602120"
  },
  {
    "text": "Let's try PCP. All these are very nice. But they all have\nreally strong problems.",
    "start": "1602120",
    "end": "1610399"
  },
  {
    "text": "OK, like the interactive proof\none, it's very, very specific. It's an interactive proof. I can talk to Tina.",
    "start": "1610400",
    "end": "1616460"
  },
  {
    "text": "I can talk to Sue. I can talk to Leo. But it's per person. What if I want to give\na proof to the world?",
    "start": "1616460",
    "end": "1624039"
  },
  {
    "text": "I can't do an interactive proof. I want to prove\nsome of my proof.",
    "start": "1624040",
    "end": "1629669"
  },
  {
    "text": "OK, now I can do PCP. I can post that,\nbut it's really big. So if I want to make\nit succinct, I can't.",
    "start": "1629670",
    "end": "1635789"
  },
  {
    "text": "So I want to be able, again,\nmy goal, to take a proof and just shrink it\nand put it somewhere.",
    "start": "1635790",
    "end": "1644280"
  },
  {
    "text": "Now, of course, you're\nlike, OK, it's nice.",
    "start": "1644280",
    "end": "1649380"
  },
  {
    "text": "It's good that you have desires. Well, it's good that you want. But actually, what's\nreally interesting is",
    "start": "1649380",
    "end": "1656549"
  },
  {
    "text": "that using the magic\nof cryptography, we can get these things. So now, what I'm\ngoing to do next",
    "start": "1656550",
    "end": "1661680"
  },
  {
    "text": "is we're going to dive into\nthe world of cryptography and see how we can\nuse cryptography",
    "start": "1661680",
    "end": "1667020"
  },
  {
    "text": "to get towards kind\nof these succinct, non-interactive proofs. ",
    "start": "1667020",
    "end": "1683250"
  },
  {
    "text": "OK, so let's start. So the first way we're going\nto change the proof model is to say to\nconsider what we call",
    "start": "1683250",
    "end": "1691830"
  },
  {
    "text": "computationally-sound\nproofs, also known in the literature as arguments.",
    "start": "1691830",
    "end": "1697180"
  },
  {
    "text": "So let me explain. So instead of talking about\nstatistical proofs, which",
    "start": "1697180",
    "end": "1703098"
  },
  {
    "text": "is what we talked\nabout so far, we're going to think about\ncomputationally-sound proofs.",
    "start": "1703098",
    "end": "1714103"
  },
  {
    "text": " OK, so what is a\ncomputationally-sound proof?",
    "start": "1714103",
    "end": "1720789"
  },
  {
    "text": "It's a proof that has a much\nweaker guarantee, soundness guarantees, than\nthe standard one.",
    "start": "1720790",
    "end": "1727090"
  },
  {
    "text": "So the completeness is the same. It's a proof you want to prove. If something is\ntrue, you succeed.",
    "start": "1727090",
    "end": "1733059"
  },
  {
    "text": "But that soundness proof, so\nthis is also called an argument. ",
    "start": "1733060",
    "end": "1739470"
  },
  {
    "text": "So the difference between a\nactual proof and an argument",
    "start": "1739470",
    "end": "1745620"
  },
  {
    "text": "is in soundness. That's the only difference,\nthe soundness condition. So let me just tell you what\nthe soundness condition is here.",
    "start": "1745620",
    "end": "1753530"
  },
  {
    "text": "So it's a computational\nsoundness condition. ",
    "start": "1753530",
    "end": "1764030"
  },
  {
    "text": "And what it says is\nthat, so let's say",
    "start": "1764030",
    "end": "1770480"
  },
  {
    "text": "for some language\nL, what it says",
    "start": "1770480",
    "end": "1778160"
  },
  {
    "text": "is that for any\ncomputationally-bounded,",
    "start": "1778160",
    "end": "1787040"
  },
  {
    "text": "only if the prover is bounded. ",
    "start": "1787040",
    "end": "1792539"
  },
  {
    "text": "If you know that\nthe prover is bound, resources are bounded, its\ncomputationally-bounded runtime.",
    "start": "1792540",
    "end": "1801150"
  },
  {
    "text": "So only for a prover\nthat's runtime is bounded, and for every x not in the\nlanguage, the probability that p",
    "start": "1801150",
    "end": "1813170"
  },
  {
    "text": "star, and v, and x that the\nverifier accepts is small.",
    "start": "1813170",
    "end": "1820340"
  },
  {
    "text": "OK, let's say negligible. OK, smaller than half. Whatever. Usually in the\nlanguage of arguments,",
    "start": "1820340",
    "end": "1829760"
  },
  {
    "text": "we convert this constant to\nnegligible and non-negligible. We'll talk about\nthat in a minute.",
    "start": "1829760",
    "end": "1834890"
  },
  {
    "text": "But now, we say, you know what? How do we get around all\nthese negative results? So the idea, we\nsay, you know what?",
    "start": "1834890",
    "end": "1841670"
  },
  {
    "text": "Actually, why do we care\nthat there exists a time 2",
    "start": "1841670",
    "end": "1846980"
  },
  {
    "text": "to the 1,000 prover\nthat can cheat? Nobody can run at that time.",
    "start": "1846980",
    "end": "1852800"
  },
  {
    "text": "OK, there's not enough\nmolecules in the universe. Like, there's no-- so these\nthings, they don't exist.",
    "start": "1852800",
    "end": "1859350"
  },
  {
    "text": "So why do we care? Let's only consider provers\nthat run in bounded time.",
    "start": "1859350",
    "end": "1864973"
  },
  {
    "text": "Now, you can say,\nwhat is bounded? We'll talk about that. Is bounded, what? There's an input length n? Is n and n cubed?",
    "start": "1864973",
    "end": "1871750"
  },
  {
    "text": "2 to the n? What's the bound? So yeah, each-- we'll\ntalk how we bound it. But the first idea,\nlet's bound his runtime.",
    "start": "1871750",
    "end": "1879380"
  },
  {
    "text": "Let's consider a prover that\nis runtime we know is bounded. Now, let's try to\nargue soundness only",
    "start": "1879380",
    "end": "1886539"
  },
  {
    "text": "against such provers. OK, so you take the\nbound to be something that you believe is realistic. Yes.",
    "start": "1886540",
    "end": "1892963"
  },
  {
    "text": "AUDIENCE: Do we have\nsome distribution over x? Or literally-- YAEL KALAI: No. For any x. So yeah. So the question is,\njust distribution?",
    "start": "1892963",
    "end": "1898550"
  },
  {
    "text": "No. I still want to\nsay, look, I don't want to say that you\ncan cheat on any x.",
    "start": "1898550",
    "end": "1904280"
  },
  {
    "text": "So look, I want\nthe same guarantee. I want to have the same\nsoundness guarantee. Say, look, nobody can convince\nyou of any false statement.",
    "start": "1904280",
    "end": "1911980"
  },
  {
    "text": "AUDIENCE: But couldn't your\nprover just, like, memorize the proof of some easy x?",
    "start": "1911980",
    "end": "1918925"
  },
  {
    "text": "YAEL KALAI: OK. Good. Good. Good. Right. So you're saying, wait. What do you mean? If you have an x, you take a\nproof, and you put it there.",
    "start": "1918925",
    "end": "1926730"
  },
  {
    "text": "I'm defining here-- yeah, so OK. So what you're saying is, you\ncan't have this non-interactive.",
    "start": "1926730",
    "end": "1935375"
  },
  {
    "text": "You're saying, if you want\na non-interactive proof, this is impossible,\neven computationally. Why? I'm a cheating prover.",
    "start": "1935375",
    "end": "1941260"
  },
  {
    "text": "I'm going to have one\nbad x, x on the language, I'm going to hardwire\none bad proof",
    "start": "1941260",
    "end": "1946350"
  },
  {
    "text": "because we assume it exists. It's just hard to find. Fine. It's one. So I can kind of think\nof a non-uniform model.",
    "start": "1946350",
    "end": "1952250"
  },
  {
    "text": "I'm going to hardwire it,\nand now I'm going to give it. You're right. We do not have\nnon-interactive proofs,",
    "start": "1952250",
    "end": "1961200"
  },
  {
    "text": "computationally-sound proofs. But we almost do. Almost. So we'll talk about\nwhat I mean by almost.",
    "start": "1961200",
    "end": "1967465"
  },
  {
    "text": "Yes. AUDIENCE: Is that one\nrandom [INAUDIBLE]? YAEL KALAI: Yeah, exactly. We, OK. So I'll jump ahead\nand say, the way",
    "start": "1967465",
    "end": "1975270"
  },
  {
    "text": "we have it is we assume\nsome common random string, some common reference. Let's say we all agree\nthere is some hash function.",
    "start": "1975270",
    "end": "1981930"
  },
  {
    "text": "And we're going to\nuse this hash function when we construct the proofs. And now, we're going to argue\nthe only way you can cheat",
    "start": "1981930",
    "end": "1988860"
  },
  {
    "text": "is by breaking this function. So we are going to at the\nend get exactly what we want.",
    "start": "1988860",
    "end": "1997030"
  },
  {
    "text": "So this is kind\nof jumping ahead. We will actually be able\nto construct these succinct proofs and non-interactive.",
    "start": "1997030",
    "end": "2004679"
  },
  {
    "text": "However, we assume that both\nthe verifier and the prover kind of agree on some\ncommon reference string",
    "start": "2004680",
    "end": "2010340"
  },
  {
    "text": "that both agree. It's universal. It doesn't depend on x. It's some hash function. And we all agree it's same\nas chapter 56, whatever",
    "start": "2010340",
    "end": "2017900"
  },
  {
    "text": "any kind of hard\nfor those who do cryptography and are\nfamiliar with these kind of off-the-shelf hash functions.",
    "start": "2017900",
    "end": "2022985"
  },
  {
    "text": "For those who\ndon't, don't worry. Whatever. We agree on some\nreference string. And now, we're going to argue\nthat if a cheating prover can",
    "start": "2022985",
    "end": "2029870"
  },
  {
    "text": "come up with x not in the\nlanguage, and a false proof, it means he broke something\nabout the common reference",
    "start": "2029870",
    "end": "2037870"
  },
  {
    "text": "string. So this kind of-- the idea is why-- so I already said it actually.",
    "start": "2037870",
    "end": "2044150"
  },
  {
    "text": "But when you first think about\nit, you want to say, look. I want to get around the fact\nthat ip is only p space, all",
    "start": "2044150",
    "end": "2052839"
  },
  {
    "text": "these kind of barriers. I want to be able to construct\nthese succinct proofs. Now, we know we can't.",
    "start": "2052840",
    "end": "2058219"
  },
  {
    "text": "So we need to change the model. And one way we say no, let's\nconsider bounded provers.",
    "start": "2058219",
    "end": "2064020"
  },
  {
    "text": "Why not? Let's assume my prover runs in\ntime less than 2 to the 500. Would anybody object? Is there any proof of the\nruntime more than 2 to the 500?",
    "start": "2064020",
    "end": "2071210"
  },
  {
    "text": "No. So fine. We didn't lose anything. The question is,\nwhat did we gain?",
    "start": "2071210",
    "end": "2076280"
  },
  {
    "text": "Is it easier? OK, we said the prover has to\nrun time most 2 to the 500. So what-- how do we use that?",
    "start": "2076280",
    "end": "2083679"
  },
  {
    "text": "And the reason we\nuse that, the way we use that is\nusing cryptography. Now, we can say our prover\ncannot break a cryptographic",
    "start": "2083679",
    "end": "2090280"
  },
  {
    "text": "assumption. So we add some cryptographic\nassumption to our proofs. And we can assume that\nthe prover can break it.",
    "start": "2090280",
    "end": "2095739"
  },
  {
    "text": "Now, whoo. Like, a whole new world opened\nup to us, and which we can use.",
    "start": "2095739",
    "end": "2103300"
  },
  {
    "text": "OK? So what I'm going to show you\nnext is actually how to use--",
    "start": "2103300",
    "end": "2110240"
  },
  {
    "text": "so here is a theorem. I'm first going to show\nan interactive protocol.",
    "start": "2110240",
    "end": "2116630"
  },
  {
    "text": "Still interactive,\nbut very strong. So here's what I'm\ngoing to show you. This is a theorem due to a\nKilian and Micali 92 and 94,",
    "start": "2116630",
    "end": "2134980"
  },
  {
    "text": "which are really the kind\nof results that kind of laid the foundation for this field.",
    "start": "2134980",
    "end": "2141280"
  },
  {
    "text": "And what they showed\nis the following. They showed how to take any PCP\nand some little cryptographic",
    "start": "2141280",
    "end": "2149303"
  },
  {
    "text": "tool called the\ncollision-resistant hash function, I'll define what\nthat is, and take these two",
    "start": "2149303",
    "end": "2154560"
  },
  {
    "text": "and construct a succinct\nfour-message, so not non-interactive,\nfour-message argument.",
    "start": "2154560",
    "end": "2162610"
  },
  {
    "text": "So computationally-sound proof. So essentially,\nwhat they show is, give me this long PCP that\ncan be efficiently checked.",
    "start": "2162610",
    "end": "2172109"
  },
  {
    "text": "I'm going to use cryptography\nto kind of shrink this PCP, put it in a little box,\nsend it to the verifier,",
    "start": "2172110",
    "end": "2182170"
  },
  {
    "text": "and then convince the verifier\nthat's what in this box is an accepting proof. So they use cryptography\ntogether with PCP",
    "start": "2182170",
    "end": "2191310"
  },
  {
    "text": "to construct with the\nfollowing, assuming",
    "start": "2191310",
    "end": "2200100"
  },
  {
    "text": "collision-resistant\nhash function, I'll define in a minute,\na cryptographic primitive.",
    "start": "2200100",
    "end": "2206050"
  },
  {
    "start": "2206050",
    "end": "2214500"
  },
  {
    "text": "For any language in NP, there\nexists a four-message argument",
    "start": "2214500",
    "end": "2228705"
  },
  {
    "text": "system.  OK, now let me define the\nargument system more formally,",
    "start": "2228705",
    "end": "2237270"
  },
  {
    "text": "because here was\njust kind of a bit-- And now, I'm-- ",
    "start": "2237270",
    "end": "2244410"
  },
  {
    "text": "OK. So when we talk about--\nonce we use cryptography,",
    "start": "2244410",
    "end": "2256200"
  },
  {
    "text": "when cryptography\ncomes along, then we use some cryptographic\nprimitives. And these cryptographic\nprimitives",
    "start": "2256200",
    "end": "2262950"
  },
  {
    "text": "have some security parameter\nassociated with them. The security parameter\nintuitively tells you how much--",
    "start": "2262950",
    "end": "2272060"
  },
  {
    "text": "so when I say I want, let's\nsay, 100 bits of security,",
    "start": "2272060",
    "end": "2279770"
  },
  {
    "text": "we usually in cryptography,\nessentially what we mean as a prover that runs in time\n2 to the 100 cannot break",
    "start": "2279770",
    "end": "2285859"
  },
  {
    "text": "the scheme. Or in time depends\non the security, cannot break the scheme. So whereas statistically,\nwe say when we say,",
    "start": "2285860",
    "end": "2294260"
  },
  {
    "text": "we want a, I don't\nknow, security epsilon, we say probability\nof breaking, any--",
    "start": "2294260",
    "end": "2299567"
  },
  {
    "text": "you can have whatever\npower you want. But the probability is epsilon. Once we're in crypto\nland, usually the security",
    "start": "2299568",
    "end": "2305870"
  },
  {
    "text": "talks about the runtime. Like, what is the bound you\nplace on the prover's runtime?",
    "start": "2305870",
    "end": "2313859"
  },
  {
    "text": "And usually, we think of\nthe soundness as negligible. OK, so negligible meaning\nsmaller than any polynomial.",
    "start": "2313860",
    "end": "2321410"
  },
  {
    "text": "I'll explain in more detail. But so when we talk about\na cryptographic primitive, it's associated with\nthe security perimeter.",
    "start": "2321410",
    "end": "2328680"
  },
  {
    "text": "And we don't-- in practice, when\nthey write things, they write, usually they just set security\nperimeter to be 128 bits,",
    "start": "2328680",
    "end": "2335790"
  },
  {
    "text": "256 bits. They set a number. But here, we're in\ncomplexity land.",
    "start": "2335790",
    "end": "2340800"
  },
  {
    "text": "So we have a parameter, lambda. That's the security parameter. And we keep it as a parameter.",
    "start": "2340800",
    "end": "2346290"
  },
  {
    "text": "And in real world, the people\nset it to their heart's desire. But we're going to think\nof it as a parameter here.",
    "start": "2346290",
    "end": "2354616"
  },
  {
    "text": "OK, so here's the guarantee. ",
    "start": "2354616",
    "end": "2359900"
  },
  {
    "text": "OK, so this four-message\nargument system, let me start with the\ncomplexity, actually.",
    "start": "2359900",
    "end": "2365230"
  },
  {
    "text": " The proof of runtime will be\npoly N, the instance length,",
    "start": "2365230",
    "end": "2380720"
  },
  {
    "text": "and lambda security parameter. ",
    "start": "2380720",
    "end": "2391540"
  },
  {
    "text": "And v, runtime, is going to be\nonly polling security parameter.",
    "start": "2391540",
    "end": "2401830"
  },
  {
    "text": "And also in our case, also\nin the plus, VPCP runtime.",
    "start": "2401830",
    "end": "2408960"
  },
  {
    "text": " So of course, he needs\nto read the input,",
    "start": "2408960",
    "end": "2414370"
  },
  {
    "text": "and he needs behave\nlike a PCP verifier. But the PCP verifier\nis very efficient. The problem is the Oracle.",
    "start": "2414370",
    "end": "2419630"
  },
  {
    "text": "So now, there's Oracle. But his runtime is like the\nruntime of the PCP verifier, so which uses some PCP.",
    "start": "2419630",
    "end": "2433240"
  },
  {
    "text": "And you can think of the PCP\nI just showed you, poly log n, poly log n.",
    "start": "2433240",
    "end": "2438910"
  },
  {
    "text": "So we use some PCP. So that's the complexity. It's four messages. The prover runtime is efficient.",
    "start": "2438910",
    "end": "2445079"
  },
  {
    "text": "And poly of course and in it. And the verifier\nis very efficient. AUDIENCE: So [INAUDIBLE]\ngiven the PCP or something?",
    "start": "2445080",
    "end": "2452319"
  },
  {
    "text": "YAEL KALAI: Oh, Oh, Oh, sorry. P. Yeah, OK. sorry P given\nx and w and the witness.",
    "start": "2452320",
    "end": "2459730"
  },
  {
    "text": "Yeah, thank, you. The prover is given x and\nthe witness in the language. And he's going to be efficient.",
    "start": "2459730",
    "end": "2466630"
  },
  {
    "text": "He's going to run in\ntime n and lambda. Let me just mention, OK I\nmentioned that in a second",
    "start": "2466630",
    "end": "2473240"
  },
  {
    "text": "actually. So the completeness is 2",
    "start": "2473240",
    "end": "2479610"
  },
  {
    "text": "It just says that for every\nX, and L, and witness.",
    "start": "2479610",
    "end": "2485233"
  },
  {
    "text": " W, the probability that P with\nwitness W and V, both of them",
    "start": "2485233",
    "end": "2495840"
  },
  {
    "text": "have X. And security\nparameter, there are some security\nparameters involved.",
    "start": "2495840",
    "end": "2501450"
  },
  {
    "text": "The probability that the\nverifier outputs 1 is 1. So the verifier always\naccepts if you're honest.",
    "start": "2501450",
    "end": "2508398"
  },
  {
    "text": "If the prover is honest, he\nhas a witness corresponding to x with any security\nparameter he accepts.",
    "start": "2508398",
    "end": "2514890"
  },
  {
    "text": "OK, actually, almost,\nit's assuming--",
    "start": "2514890",
    "end": "2520086"
  },
  {
    "start": "2520086",
    "end": "2528030"
  },
  {
    "text": "no. It accepts. No ifs and buts. OK, what about the soundness?",
    "start": "2528030",
    "end": "2536309"
  },
  {
    "text": "Soundness says that\nfor any p star of size,",
    "start": "2536310",
    "end": "2549135"
  },
  {
    "text": "now, you can say, for instance,\nif size poly lambda, poly in the security parameter,\nthen you can say,",
    "start": "2549135",
    "end": "2557280"
  },
  {
    "text": "let's say that for every\nx not in the language, the probability\nthat p star-- now,",
    "start": "2557280",
    "end": "2565390"
  },
  {
    "text": "he doesn't have a\nwitness because it's not in the language. This is a cheater. I want to say for any p\nstar that tries to cheat.",
    "start": "2565390",
    "end": "2571940"
  },
  {
    "text": "But he's bounded. He's poly lambda. And for every x not\nin the language,",
    "start": "2571940",
    "end": "2579080"
  },
  {
    "text": "the probability and x in lambda\nthat the verifier outputs 1",
    "start": "2579080",
    "end": "2588350"
  },
  {
    "text": "is very small. It's negligible in lambda.",
    "start": "2588350",
    "end": "2594440"
  },
  {
    "text": "And negligible in\nlambda is just a way to say it vanishes faster\nthan 1 over poly for any poly.",
    "start": "2594440",
    "end": "2601980"
  },
  {
    "text": "OK, this just means\nthat for any poly p,",
    "start": "2601980",
    "end": "2609440"
  },
  {
    "text": "there exists some lambda star\nsuch that for any lambda bigger",
    "start": "2609440",
    "end": "2616190"
  },
  {
    "text": "than lambda star, p\nlambda, the negligible,",
    "start": "2616190",
    "end": "2627200"
  },
  {
    "text": "is smaller than 1 over p lambda. So it vanishes\nfaster than any poly",
    "start": "2627200",
    "end": "2634830"
  },
  {
    "text": "if you go above some constant. OK? So the neg 0 it vanishes quicker\nthan 1 over poly for any poly.",
    "start": "2634830",
    "end": "2642750"
  },
  {
    "text": "That's the definition\nof negligible. Yeah. AUDIENCE: Interested\nin for what size means. So we're assuming all\nthese things are circuits?",
    "start": "2642750",
    "end": "2648230"
  },
  {
    "text": " YAEL KALAI: OK. Yeah. Yeah. Yeah. OK, good. Good. Good. Good. OK. Yeah, we're thinking of--\nusually in cryptography,",
    "start": "2648230",
    "end": "2655740"
  },
  {
    "text": "we always allow our\nadversaries to be non-uniform, because they may get advice. So usually, we model them\nas polynomial size circuits.",
    "start": "2655740",
    "end": "2664079"
  },
  {
    "text": "This is opposed to saying p star\nthat runs in time poly lambda. So we say has size poly lambda.",
    "start": "2664080",
    "end": "2671460"
  },
  {
    "text": "It's just to say he has--\nit's another word say, he runs in time poly lambda,\nbut he may have advice.",
    "start": "2671460",
    "end": "2678615"
  },
  {
    "text": "We allow him to have some\nkind of fixed advice. That's what we say size. Yeah.",
    "start": "2678615",
    "end": "2683875"
  },
  {
    "text": "Great question. Yes. AUDIENCE: But if lambda is\nless than the size of x, how",
    "start": "2683875",
    "end": "2689320"
  },
  {
    "text": "do you even fit in the x bits? ",
    "start": "2689320",
    "end": "2694582"
  },
  {
    "text": "YAEL KALAI: Good. OK, so OK. The problem is actually, yeah. The problem is we don't--",
    "start": "2694582",
    "end": "2701800"
  },
  {
    "text": "OK, what you're saying is, look. So that's why I have my red\npen coming up, my red chalk.",
    "start": "2701800",
    "end": "2707470"
  },
  {
    "text": "You're saying, if x is smaller\nthan, let's say, lambda to the epsilon, if\nx is of size epsilon",
    "start": "2707470",
    "end": "2713410"
  },
  {
    "text": "we allow p star to\nbe of size poly. So what you're saying\nis I'm saying, wow. Wait.",
    "start": "2713410",
    "end": "2718850"
  },
  {
    "text": "That's weird. You're not even allowing that\nif lambda is smaller than x, p star can't even read x.",
    "start": "2718850",
    "end": "2726160"
  },
  {
    "text": "He can't even read it. His runtime is less than x. True if x is bigger than\npoly lambda, any poly lambda.",
    "start": "2726160",
    "end": "2734079"
  },
  {
    "text": "That's first, because he\ncan't run in any time. We allow p star to runs\nin time any poly lambda.",
    "start": "2734080",
    "end": "2740890"
  },
  {
    "text": "So x can be of size any kind of\nif you take a sequence of x's",
    "start": "2740890",
    "end": "2746349"
  },
  {
    "text": "that are each of size kind\nof for any lambda, if you have x sub la-- so\nI'm a cheating prover. And for any lambda,\nI have x sub lambda",
    "start": "2746350",
    "end": "2753820"
  },
  {
    "text": "that I'm going to cheat on. And as long as\nthese x sub lambda are at most lambda to the 100,\nI can run time lambda to the 100",
    "start": "2753820",
    "end": "2761349"
  },
  {
    "text": "here. This is theory land,\nso I can do that. But sometimes, we\nwant to actually",
    "start": "2761350",
    "end": "2767109"
  },
  {
    "text": "have communication complexity,\nwhich is, like, poly log n. So now the security parameter\nneeds to be poly log n.",
    "start": "2767110",
    "end": "2774590"
  },
  {
    "text": "And now, you can't even read. So the reason I wrote size\npoly lambda is because this",
    "start": "2774590",
    "end": "2785980"
  },
  {
    "text": "will allow us to have-- so the communication grows\npolynomial with lambda.",
    "start": "2785980",
    "end": "2791920"
  },
  {
    "text": "If I allow the prover to\nrun at most poly lambda, it will allow me to rely the--",
    "start": "2791920",
    "end": "2800050"
  },
  {
    "text": "I can assume that\nmy cryptography, whatever I use here,\ncollision-resistant hash function, or one-way function,\nwhatever cryptographic",
    "start": "2800050",
    "end": "2807630"
  },
  {
    "text": "assumption I use, the\nassumption is a polynomial time,",
    "start": "2807630",
    "end": "2812650"
  },
  {
    "text": "a polynomial size,\ncheater cannot break it. But I can let me\nstrengthen the assumption.",
    "start": "2812650",
    "end": "2818740"
  },
  {
    "text": "I'm going to say that it--  so I'm going to say for every\np star of size 2 to the lambda",
    "start": "2818740",
    "end": "2827430"
  },
  {
    "text": "to the o of 1, as long as\nyour running time at most 2 to the lambda to epsilon to find\nsome epsilon, you can't break.",
    "start": "2827430",
    "end": "2839380"
  },
  {
    "text": "Now, x can be like\na poly log n lambda.",
    "start": "2839380",
    "end": "2848970"
  },
  {
    "text": "The thing is now, I'm assuming\nthat a p star that runs in time,",
    "start": "2848970",
    "end": "2854520"
  },
  {
    "text": "this cannot break my\ncryptography with security parameter lambda. It's a stronger assumption.",
    "start": "2854520",
    "end": "2860240"
  },
  {
    "text": "So there is a delicate\nissue here with soundness, which I glossed over in the\ndefinition above, where I said,",
    "start": "2860240",
    "end": "2867890"
  },
  {
    "text": "computationally bounded. Well, what's the bound? So again, the reason these\ncomputationally-sound proofs",
    "start": "2867890",
    "end": "2876920"
  },
  {
    "text": "are useful is because then,\nwe can use cryptography. So now, we say, let's\nuse cryptography",
    "start": "2876920",
    "end": "2882050"
  },
  {
    "text": "in our proof system. When we use\ncryptography, there's a security parameter, lambda. Now, typically, we assume\nthat, so now, we want to say,",
    "start": "2882050",
    "end": "2891570"
  },
  {
    "text": "our cryptography\ncannot be broken. And therefore, our\nscheme is secure. OK, cannot be\nbroken in what time?",
    "start": "2891570",
    "end": "2897440"
  },
  {
    "text": "So typically, we\nwould like to say, oh in time poly lambda\ncannot be broken. That's kind of our\npolynomial assumption.",
    "start": "2897440",
    "end": "2902730"
  },
  {
    "text": "That's kind of what we think\nof standard assumptions in cryptography, that some\nassumption with security",
    "start": "2902730",
    "end": "2908119"
  },
  {
    "text": "parameter lambda cannot be\nbroken time poly lambda. We call that a\npolynomial assumption.",
    "start": "2908120",
    "end": "2914569"
  },
  {
    "text": "This is what we want. But then, you're right to say,\nwell, it's weird, because then,",
    "start": "2914570",
    "end": "2920450"
  },
  {
    "text": "if you want to think of lambda\nas being, like, poly log n, if you want, then they\nwant succinct proofs.",
    "start": "2920450",
    "end": "2926940"
  },
  {
    "text": "So let's say we\nhave x of size n. And suppose we want the\nsuccinct to be like poly log n, like in GKR.",
    "start": "2926940",
    "end": "2933500"
  },
  {
    "text": "So now, lambda needs to be of\nsize poly log n in a sense. So it's like, wait, the cheating\nprover can't even read x.",
    "start": "2933500",
    "end": "2942380"
  },
  {
    "text": "What a weird kind of-- so I'm-- the honest prover runs\nin time more than the cheating",
    "start": "2942380",
    "end": "2949420"
  },
  {
    "text": "prover? That's bizarre. So the answer is, OK,\nso the answer is look.",
    "start": "2949420",
    "end": "2956160"
  },
  {
    "text": " It depends on how much risk\nyou're willing to take.",
    "start": "2956160",
    "end": "2965359"
  },
  {
    "text": "What do I mean, how much risk? If you want to say, look,\nI'm very, very conservative. I'm not willing to assume--",
    "start": "2965360",
    "end": "2973480"
  },
  {
    "text": "my trust in cryptography\nis very limited, and I'm only willing to\nassume if I use a lambda bit",
    "start": "2973480",
    "end": "2978880"
  },
  {
    "text": "of security, I want my\nassumption is that a poly lambda cannot break it. I don't want to assume that a\n2-to-the-lambda person cannot",
    "start": "2978880",
    "end": "2985780"
  },
  {
    "text": "break it, 2 to the\nlambda to the epsilon. No, maybe he can. I don't trust that assumption. That's all I'm\nwilling to assume.",
    "start": "2985780",
    "end": "2993160"
  },
  {
    "text": "Now, but here's the thing. Once you bound the\ncheating prover to be poly lambda,\nessentially, what we're saying",
    "start": "2993160",
    "end": "3000450"
  },
  {
    "text": "is that in the world,\nthere's no way you can run time more than poly lambda.",
    "start": "3000450",
    "end": "3005530"
  },
  {
    "text": "If you can, then this has\nno meaning in a sense. So now, we're saying, look. In this world, you can't\nrun more than this time.",
    "start": "3005530",
    "end": "3013510"
  },
  {
    "text": "Whatever it is, this, this. Otherwise, this\ncomputationally bounded is, like, a bit meaningless.",
    "start": "3013510",
    "end": "3019020"
  },
  {
    "text": "So if that's all the\ntime you can run in, the x's are-- can't\nbe bigger than that,",
    "start": "3019020",
    "end": "3024090"
  },
  {
    "text": "in a sense, because nobody\ncan run at that time. Nobody can read that x. So essentially, what you're\nsaying is you're saying, look.",
    "start": "3024090",
    "end": "3030190"
  },
  {
    "text": "I'm telling you, I\nwant a cheating prover that runs in time at\nmost 2 to the 500. You're saying, well, what if\nthere's an input of length 2",
    "start": "3030190",
    "end": "3036780"
  },
  {
    "text": "to the 1,000? OK, look. Whatever. He still can run a time\nwhen most 2 to the 500.",
    "start": "3036780",
    "end": "3042420"
  },
  {
    "text": "The fact that I'm not going\nto give him more runtime, it's ridiculous. I still want to\nsay, for every x.",
    "start": "3042420",
    "end": "3047970"
  },
  {
    "text": "But I don't want to give\nnow the prover more runtime. No. In this world, provers run in\ntime at most some security.",
    "start": "3047970",
    "end": "3055020"
  },
  {
    "text": "This is about the world, about\nthe security of the world. I give a bound on what I\nthink is a reasonable runtime",
    "start": "3055020",
    "end": "3061890"
  },
  {
    "text": "of real-world adversaries. Nobody can run in more time.",
    "start": "3061890",
    "end": "3067450"
  },
  {
    "text": "OK, now you're saying,\nwell, it's weird. You're giving him\nless time than--",
    "start": "3067450",
    "end": "3072590"
  },
  {
    "text": "what if for an x that\nis size 2 to the 1,000, that honest prover, well, there\nis no honest prover that will",
    "start": "3072590",
    "end": "3078119"
  },
  {
    "text": "prove something about\nx of size 2 the 1,000. So anyway we bound,\nand even if they're,",
    "start": "3078120",
    "end": "3085369"
  },
  {
    "text": "like, x's that are\nbigger than this, yeah, our pool can't run\nin time bigger than this. Still, our poor guy needs to\nprove something about x that he",
    "start": "3085370",
    "end": "3094099"
  },
  {
    "text": "cannot even read. Fine. The point is, in our world,\nthese are our adversaries. That's how we\nshould think of it.",
    "start": "3094100",
    "end": "3101900"
  },
  {
    "text": "OK. Yeah. AUDIENCE: So the reason we're\ngiving the honest prover",
    "start": "3101900",
    "end": "3107240"
  },
  {
    "text": "this extra poly of\nn, is that we're assuming that they have to do\nsomething with the witness? Is that the-- YAEL KALAI: Exactly.",
    "start": "3107240",
    "end": "3112513"
  },
  {
    "text": "So the prover, the\nhonest prover, of course, he needs to read the witness. Essentially, he needs\nto look at the input,",
    "start": "3112513",
    "end": "3118650"
  },
  {
    "text": "he needs to read the witness,\nhe'll need to generate a PCP, or whatever. He needs to do something. So the honest prover, of\ncourse, he needs to run in time.",
    "start": "3118650",
    "end": "3125370"
  },
  {
    "text": "That depends on x. But the point is you\nshould think, OK, what if honest prover works\nwith x and that is the size 2",
    "start": "3125370",
    "end": "3132140"
  },
  {
    "text": "to the 1,000. Yeah, but it doesn't exist. It's a theory. It's a mental experiment.",
    "start": "3132140",
    "end": "3137350"
  },
  {
    "text": "We don't have these things. But yeah. He would run. And now, you're\nsaying our adversary? No, he can't run\nbecause our adversaries",
    "start": "3137350",
    "end": "3143690"
  },
  {
    "text": "don't have that power. Nor do our honest prover. They don't exist for that sizes.",
    "start": "3143690",
    "end": "3149660"
  },
  {
    "text": "Yeah. AUDIENCE: [INAUDIBLE]\nso before, when we were talking about the\ninformation theoretic, ips,",
    "start": "3149660",
    "end": "3155930"
  },
  {
    "text": "and the soundness, I mentioned\nthat as long as the soundness is less than a half or something,\nyou can just repeat it over",
    "start": "3155930",
    "end": "3161956"
  },
  {
    "text": "and over to get better\nand better soundness. YAEL KALAI: Yeah. And your-- AUDIENCE: [INAUDIBLE] YAEL KALAI: Good. Yes. So Yes.",
    "start": "3161957",
    "end": "3168720"
  },
  {
    "text": "The same applies here. So you can ask in a sense,\nwhy is here-- so OK.",
    "start": "3168720",
    "end": "3177529"
  },
  {
    "text": "Let me-- it's yes. But we need to be careful. ",
    "start": "3177530",
    "end": "3185024"
  },
  {
    "text": "In a interactive argument, you\ncan-- if the soundness here is only half, you\ncan reduce soundness",
    "start": "3185024",
    "end": "3191780"
  },
  {
    "text": "by repetition exponentially. However, you will need\nto do it sequentially.",
    "start": "3191780",
    "end": "3198440"
  },
  {
    "text": "OK, so you'll need to do\none interactive protocol after the other after the\nother after the other.",
    "start": "3198440",
    "end": "3204890"
  },
  {
    "text": "Actually, it was a open\nquestion for a while was if you have an\ninteractive argument,",
    "start": "3204890",
    "end": "3211300"
  },
  {
    "text": "and you just-- because people\ndon't like-- people care about round complexity. They don't like protocols\nthat take a gazillion rounds.",
    "start": "3211300",
    "end": "3218089"
  },
  {
    "text": "So they say, well, why don't\nyou repeat interactive-- if you take an interactive\nproof and you repeat it",
    "start": "3218090",
    "end": "3223930"
  },
  {
    "text": "in parallel many times with\nfresh randomness, everything fresh, just independently, but\nin parallel, the soundness go",
    "start": "3223930",
    "end": "3230020"
  },
  {
    "text": "down exponentially\nlike you want. Now, you can say, does the\nsame thing hold for argument?",
    "start": "3230020",
    "end": "3236170"
  },
  {
    "text": "So this was actually an\nopen problem for a while. And then at some point--\nit was a long time ago.",
    "start": "3236170",
    "end": "3242630"
  },
  {
    "text": "It was when [Name] was a\npostdoc, probably 15 years ago.",
    "start": "3242630",
    "end": "3247930"
  },
  {
    "text": "He actually gave an\nexample of, oh, sorry. No, no, no.",
    "start": "3247930",
    "end": "3253250"
  },
  {
    "text": "There was-- sorry. So there was an example. I'm messing up the--",
    "start": "3253250",
    "end": "3258898"
  },
  {
    "text": "Baioumy, Meo, and\ntwo other people. I don't remember now. They showed actually, no.",
    "start": "3258898",
    "end": "3264260"
  },
  {
    "text": "There is an example of\nan interactive argument that if you repeat\nit in parallel,",
    "start": "3264260",
    "end": "3270620"
  },
  {
    "text": "soundness doesn't\ngo down at all. So you have to repeat\nit sequentially. So when you repeat interactive\narguments in parallel,",
    "start": "3270620",
    "end": "3278890"
  },
  {
    "text": "the crypto doesn't\nwork in parallel as-- it's not really true.",
    "start": "3278890",
    "end": "3284928"
  },
  {
    "text": "It's like, they're\ncontrived examples where you can show that the\ncrypto soundness doesn't reduce like you would hope.",
    "start": "3284928",
    "end": "3291425"
  },
  {
    "text": "And therefore, the\nsoundness doesn't go down. Now, the examples that we\nhave are pretty contrived. OK?",
    "start": "3291425",
    "end": "3296720"
  },
  {
    "text": "It's not like, but there's\nno-- definitely, it's not true in general. It's not true in general that if\nyou take an interactive argument",
    "start": "3296720",
    "end": "3302818"
  },
  {
    "text": "and you repeat it in parallel\nwith fresh randomness, many times, soundness\ndoes not go down. Even though if [Tak?] showed\nthat there is a way to repeat it",
    "start": "3302818",
    "end": "3311140"
  },
  {
    "text": "in parallel, but you need\nto be a little clever. Don't just repeat-- a very\nweird trick he had of,",
    "start": "3311140",
    "end": "3317430"
  },
  {
    "text": "with some probability,\nyou abort. The verifier says,\nyou know what-- I don't want to\ncontinue in this.",
    "start": "3317430",
    "end": "3323080"
  },
  {
    "text": "Just a weird abort. He added a weird\nabort condition, and then all of a sudden, things\nkind of the soundness vanished.",
    "start": "3323080",
    "end": "3329830"
  },
  {
    "text": "So OK. So I guess my answer\nto your question. If you repeat it in\nsequentially, yes.",
    "start": "3329830",
    "end": "3336130"
  },
  {
    "text": "Air goes down exponentially\nexactly like we would hope. It goes from s to s to the\nk if you repeat it k times.",
    "start": "3336130",
    "end": "3342400"
  },
  {
    "text": "If you repeat it in\nparallel naively, no in their counterexamples. Yet, there are ways to repeat in\nparallel a little less naively",
    "start": "3342400",
    "end": "3351280"
  },
  {
    "text": "with some abort kind of thing\nthat then it does go down. So I guess the short\nanswer, it's complicated.",
    "start": "3351280",
    "end": "3359398"
  },
  {
    "text": "AUDIENCE: OK. Thank you. YAEL KALAI: OK, great. But typically, we\njust write negligible because of this issue.",
    "start": "3359398",
    "end": "3365230"
  },
  {
    "text": "It's like we like\nto just, we like to write-- when we talk in\ncryptography, we usually we",
    "start": "3365230",
    "end": "3371820"
  },
  {
    "text": "write, 1 minus negligible,\nor 1 for completeness, and then negligible\nfor soundness.",
    "start": "3371820",
    "end": "3379310"
  },
  {
    "text": "OK, so this is the theorem.",
    "start": "3379310",
    "end": "3384750"
  },
  {
    "text": "Any questions about-- I need to define what a\ncollision-resistant hash",
    "start": "3384750",
    "end": "3391010"
  },
  {
    "text": "function is. But any questions\nbefore I define?",
    "start": "3391010",
    "end": "3396619"
  },
  {
    "text": "OK, so by the way, just so\nI know who I'm talking to, how many people know what\na collision-resistant hash",
    "start": "3396620",
    "end": "3403850"
  },
  {
    "text": "function is? OK, a lot. But it's actually not important.",
    "start": "3403850",
    "end": "3411859"
  },
  {
    "text": "And I'll define it in a minute. ",
    "start": "3411860",
    "end": "3418550"
  },
  {
    "text": "OK. So let me just define.",
    "start": "3418550",
    "end": "3425480"
  },
  {
    "text": "So a collision-resistant\nhash family,",
    "start": "3425480",
    "end": "3438050"
  },
  {
    "text": "it's actually a family,\nit's not a function, h, consists of two algorithms.",
    "start": "3438050",
    "end": "3444676"
  },
  {
    "start": "3444676",
    "end": "3451790"
  },
  {
    "text": "OK, first is Gen. Gen is\nan algorithm that generates a key to the hash function.",
    "start": "3451790",
    "end": "3458250"
  },
  {
    "text": "So Gen takes his input. So Gen is a PPT, probabilistic\npolynomial time algorithm.",
    "start": "3458250",
    "end": "3465200"
  },
  {
    "text": "It takes as input 1 to\nthe security parameter.",
    "start": "3465200",
    "end": "3473790"
  },
  {
    "text": "So in crypto, we have\nthis hack that we assume our algorithms take\nas input 1 to the security",
    "start": "3473790",
    "end": "3480320"
  },
  {
    "text": "parameter instead of security\nparameter, which is it's a bit like I feel like a\nmoron saying 1 to the security",
    "start": "3480320",
    "end": "3486080"
  },
  {
    "text": "parameter. The only reason we\nwrite it this way is because we want to\nthink of our algorithm as efficient poly time. And poly is in the input.",
    "start": "3486080",
    "end": "3492640"
  },
  {
    "text": "And all our algorithms\nrun in time poly in the security parameter. So to say that our algorithms\nare efficient, our poly time,",
    "start": "3492640",
    "end": "3500720"
  },
  {
    "text": "we always write the\nsecurity parameter in unary because that's the input. So it's just kind of a hack to\nmake the theory kind of nice.",
    "start": "3500720",
    "end": "3509500"
  },
  {
    "text": "OK? And it outputs a hash key.",
    "start": "3509500",
    "end": "3515079"
  },
  {
    "text": "So this hash key is\na size poly lambda. Yeah, because this\nalgorithm is polynomial,",
    "start": "3515080",
    "end": "3520760"
  },
  {
    "text": "it takes an input\nlambda in unary. So it can output something\nonly a size poly lambda.",
    "start": "3520760",
    "end": "3527060"
  },
  {
    "text": "And then there's\nthe eval algorithm. And the eval algorithm\ntakes as input--",
    "start": "3527060",
    "end": "3532359"
  },
  {
    "text": "it's a poly time algorithm that\ntakes as input hash key and x,",
    "start": "3532360",
    "end": "3546520"
  },
  {
    "text": "any x, in 01 star. ",
    "start": "3546520",
    "end": "3551859"
  },
  {
    "text": "And it outputs, you\ncan also restrict. You can restrict the x to be,\nlet's say, you can restrict it.",
    "start": "3551860",
    "end": "3559160"
  },
  {
    "text": "But let's think of any input. And outputs a value v\nin 01 to the lambda.",
    "start": "3559160",
    "end": "3571300"
  },
  {
    "text": "OK, what's important? The way hash functions\nare used, what's important about hash functions\nis that they're shrinking. So you can think it\ntakes an input any x,",
    "start": "3571300",
    "end": "3579430"
  },
  {
    "text": "you can think of that it\ntakes as input like something of size 2 lambda, like\ntakes 2 lambda 2 lambda.",
    "start": "3579430",
    "end": "3585200"
  },
  {
    "text": "You can even think lambda\nplus 1 2 lambda if you want. But so there's many\nways people define it.",
    "start": "3585200",
    "end": "3591520"
  },
  {
    "text": "Let me go with star any input. OK, and now, the security\nsays that a polynomial time,",
    "start": "3591520",
    "end": "3600850"
  },
  {
    "text": "or a poly size algorithm that\nis given a hash key should not",
    "start": "3600850",
    "end": "3607770"
  },
  {
    "text": "be able to find two different\nx's that hash to the same value. That's the assumption.",
    "start": "3607770",
    "end": "3613750"
  },
  {
    "text": "Yeah. AUDIENCE: Can the hash\nkey be an empty string? YAEL KALAI: What? AUDIENCE: The hash key,\ncan it be empty string?",
    "start": "3613750",
    "end": "3620350"
  },
  {
    "text": "YAEL KALAI: It can\nbe the empty string. But then, there's no--\nit won't be secure. And I'll explain why. So it's a good question.",
    "start": "3620350",
    "end": "3627365"
  },
  {
    "text": "It's a good question. The question, do we\nreally need the hash key? Or can we just make that empty? So the answer is a bit-- it's\nagain, it's a modeling answer.",
    "start": "3627365",
    "end": "3638250"
  },
  {
    "text": "But I'll get to it. I'll answer your\nquestion in a second. Let me just write the security.",
    "start": "3638250",
    "end": "3643330"
  },
  {
    "text": "And then we'll talk about it\nbecause it is a great question. OK, the security, the\ncollision-resistant requirement,",
    "start": "3643330",
    "end": "3654150"
  },
  {
    "text": "says that for any poly\nlambda size adversary",
    "start": "3654150",
    "end": "3662279"
  },
  {
    "text": "A, the probability that A, given\nhash key, where hash key is",
    "start": "3662280",
    "end": "3671220"
  },
  {
    "text": "chosen by Gen, the probability\nthat it outputs x and x",
    "start": "3671220",
    "end": "3679530"
  },
  {
    "text": "prime such that x is different,\nnot the same, and eval",
    "start": "3679530",
    "end": "3690180"
  },
  {
    "text": "of hash key and x is equal\nto eval of hash key and x",
    "start": "3690180",
    "end": "3696540"
  },
  {
    "text": "prime is negligible. So for every poly size A, there\nexists a negligible function mu",
    "start": "3696540",
    "end": "3712800"
  },
  {
    "text": "such that for every\nlambda security parameter,",
    "start": "3712800",
    "end": "3725000"
  },
  {
    "text": "so maybe I'll write it better. For any poly size.",
    "start": "3725000",
    "end": "3730420"
  },
  {
    "text": " For any poly size A, there\nexists some negative function.",
    "start": "3730420",
    "end": "3737250"
  },
  {
    "text": "So a function that vanishes\nfaster than any polynomial such",
    "start": "3737250",
    "end": "3742580"
  },
  {
    "text": "that for any security parameter,\nif you generate a hash key using",
    "start": "3742580",
    "end": "3748460"
  },
  {
    "text": "the security parameter, you\ngive the adversary the hash key, his goal is to output\ntwo different inputs that",
    "start": "3748460",
    "end": "3755690"
  },
  {
    "text": "hash to the same value. The probability\nthat he does this is at most negligible in lambda.",
    "start": "3755690",
    "end": "3764780"
  },
  {
    "text": "So as lambda grows\nbig, this becomes tiny.",
    "start": "3764780",
    "end": "3769910"
  },
  {
    "text": "Yeah. AUDIENCE: Is A's size meant to\nbe polynomial in the hash key? YAEL KALAI: Good. Yes. Exactly. When I say poly size, I\nmean poly in the input.",
    "start": "3769910",
    "end": "3776275"
  },
  {
    "text": "AUDIENCE: OK. YAEL KALAI: So poly lambda. AUDIENCE: OK. YAEL KALAI: OK,\nthat's the definition.",
    "start": "3776275",
    "end": "3782290"
  },
  {
    "text": "Now I want to first answer your\nquestion, which is, do we really need a hash key?",
    "start": "3782290",
    "end": "3787609"
  },
  {
    "text": "Can we just tell him, this\nis the security parameter? Why do we need a hash key? And the answer is,\nactually, we don't--",
    "start": "3787610",
    "end": "3793850"
  },
  {
    "text": "it's interesting. We don't quite need a hash key. And actually, the hash\nfunctions we use in practice",
    "start": "3793850",
    "end": "3800740"
  },
  {
    "text": "don't have a hash\nkey in a sense. Well, they're fixed. OK, practice is a\ndifferent story.",
    "start": "3800740",
    "end": "3806750"
  },
  {
    "text": "But the reason why we have\na hash key is we allow--",
    "start": "3806750",
    "end": "3812110"
  },
  {
    "text": "it's a question of modeling. Who is our adversary? What kind of adversaries\nare we thinking about?",
    "start": "3812110",
    "end": "3817700"
  },
  {
    "text": "If we think about\nadversaries that are poly size, that are\ncircuits, or Turing machines",
    "start": "3817700",
    "end": "3824380"
  },
  {
    "text": "that have some non-uniform\nadvice, then what if the adversary just has\nin his belly, somehow,",
    "start": "3824380",
    "end": "3831430"
  },
  {
    "text": "someone gave him\nadvice, x and x prime that are different and\nhash to the same value?",
    "start": "3831430",
    "end": "3836500"
  },
  {
    "text": "Someone gave him two x's\nthat hash to the same value. Then, he'll just [INAUDIBLE] it. Of course he has collisions.",
    "start": "3836500",
    "end": "3842109"
  },
  {
    "text": "I mean, collisions exist\nby pigeonhole principle. I mean, huge, yeah? It goes to small. These exist.",
    "start": "3842110",
    "end": "3848019"
  },
  {
    "text": "We want to say\nthey're hard to find. But if we think of a non-uniform\nadversary that has advice,",
    "start": "3848020",
    "end": "3853393"
  },
  {
    "text": "he may have this as advice\nand then he'll output it. So if we think of a\nnon-uniform model, then we have to have a hash key.",
    "start": "3853393",
    "end": "3859990"
  },
  {
    "text": "Another option is to\nthink of a uniform model. Let's think of A not as\npoly sized, poly time.",
    "start": "3859990",
    "end": "3865490"
  },
  {
    "text": "He's uniform. Then we don't need\nto have a hash key. We just, because we can assume\nthat small axes don't collide",
    "start": "3865490",
    "end": "3873880"
  },
  {
    "text": "because we'll just make the hash\nfunction so they won't collide. And then big ones, you\ncan't hold in your belly",
    "start": "3873880",
    "end": "3881200"
  },
  {
    "text": "because you're bounded. You're uniform. You have only constant sizes\nkind of your constant size",
    "start": "3881200",
    "end": "3887290"
  },
  {
    "text": "description. So actually, there\nhave been works",
    "start": "3887290",
    "end": "3893530"
  },
  {
    "text": "in the literature in the\ntheoretical cryptography literature that talk about\nhash functions with no keys.",
    "start": "3893530",
    "end": "3902619"
  },
  {
    "text": "But then, they need to talk\nabout uniform adversaries. And this is something that is\nconsidered and talked about.",
    "start": "3902620",
    "end": "3910539"
  },
  {
    "text": "But the most standard is to talk\nabout non-uniform adversaries. And then, we need to have keys.",
    "start": "3910540",
    "end": "3917700"
  },
  {
    "text": "Yeah? OK. Any questions?",
    "start": "3917700",
    "end": "3923927"
  },
  {
    "text": "OK. So oh, our time's\nup in five minutes. So good.",
    "start": "3923927",
    "end": "3930430"
  },
  {
    "text": "So now, what I want to do is\nI want to prove this theorem",
    "start": "3930430",
    "end": "3936190"
  },
  {
    "text": "and I want to give you a\nconstruction of a hash function that we use. Now, let me tell you, actually,\nwe use a hash function",
    "start": "3936190",
    "end": "3943950"
  },
  {
    "text": "with an additional property. For this theorem, we\nuse a hash function with an additional property.",
    "start": "3943950",
    "end": "3949030"
  },
  {
    "text": "We don't need to assume it\nbecause we can construct it from a hash function.",
    "start": "3949030",
    "end": "3954100"
  },
  {
    "text": "So that's why I didn't\nwrite it as an assumption, because I can construct it. But really, the primitive we\nneed for the theorem is we",
    "start": "3954100",
    "end": "3963990"
  },
  {
    "text": "want an additional-- we want a hash function with\nwhat we call local opening.",
    "start": "3963990",
    "end": "3970895"
  },
  {
    "text": "What do we mean\nby local opening? Here, a hash function,\nwe say, look. There's an eval that takes a\nhash key x, output a value.",
    "start": "3970895",
    "end": "3979200"
  },
  {
    "text": "Now, if you want to\ncheck, I'll give you-- let's say I hashed a value. I told you, here's v.\nNow, you're saying,",
    "start": "3979200",
    "end": "3985900"
  },
  {
    "text": "OK, I want to know\nwhat you committed to. Fine. I can give you my x. And what you hash-- sorry.",
    "start": "3985900",
    "end": "3991962"
  },
  {
    "text": "Which value you hashed? I'm like, no problem. Here's my x, and you can check. But what I really\nwant for this theorem,",
    "start": "3991962",
    "end": "3998579"
  },
  {
    "text": "and it's something I want from,\nthis is a common primitive that we need in many\napplications, is I want to say,",
    "start": "3998580",
    "end": "4004530"
  },
  {
    "text": "OK, I hashed-- I took a hash function. I hashed a value. I want to argue, look,\nI hashed a value.",
    "start": "4004530",
    "end": "4011099"
  },
  {
    "text": "I don't want to give\nyou my entire value. It's too big. You guys are not the verifiers. You can't even read\neverything I wrote in my--",
    "start": "4011100",
    "end": "4017450"
  },
  {
    "text": "I can't give you what I hashed. It's too big. I want to open one bit. I'm going to tell you,\nlook, I hashed a value.",
    "start": "4017450",
    "end": "4023660"
  },
  {
    "text": "But the ith bit of the\nvalue I hashed is 0.",
    "start": "4023660",
    "end": "4029530"
  },
  {
    "text": "How do I know? How do you know that it's 0? Oh, I'm going to convince you. I can kind of give kind of\na local opening to this x.",
    "start": "4029530",
    "end": "4038140"
  },
  {
    "text": "This is what I want. So what I defined here\nis just a hash function. But then, I can define\nanother primitive,",
    "start": "4038140",
    "end": "4045680"
  },
  {
    "text": "which is a hash function\nwith local opening. ",
    "start": "4045680",
    "end": "4053710"
  },
  {
    "text": "And that's what we actually\nneed for the theorem. ",
    "start": "4053710",
    "end": "4071559"
  },
  {
    "text": "So a hash function\nwith local opening has two additional algorithms\ncorresponding to it.",
    "start": "4071560",
    "end": "4077860"
  },
  {
    "text": "There is an open algorithm,\nwhich allows you kind of to open to show kind of\na, essentially give you",
    "start": "4077860",
    "end": "4084670"
  },
  {
    "text": "a little proof that the\nith bit of what I hashed is a certain value. And then there's a verify\nalgorithm that verifies it.",
    "start": "4084670",
    "end": "4093099"
  },
  {
    "text": "OK, since we have only two\nminutes, I think I'll skip-- next time, I'll show\nyou the local opening.",
    "start": "4093100",
    "end": "4098930"
  },
  {
    "text": "But maybe I'll just tell you\none minute of the idea behind-- ",
    "start": "4098930",
    "end": "4109600"
  },
  {
    "text": "is my theorem hiding somewhere? Maybe here? Oh yeah. Sorry. It's the opposite.",
    "start": "4109600",
    "end": "4115089"
  },
  {
    "text": "OK, behind this theorem. So the idea is what\nI want to do is",
    "start": "4115090",
    "end": "4120909"
  },
  {
    "text": "the idea at a high\nlevel, what they do, they take, the prover will\ntake this ginormous PCP.",
    "start": "4120910",
    "end": "4127159"
  },
  {
    "text": "He wants to give\nit to the verifier, but the verifier can't hold it. So what are you going to do? He's going to give him\na hash of this PCP.",
    "start": "4127160",
    "end": "4134820"
  },
  {
    "text": "Take this PCP and just\ngive him the hash value. Just slam the bits. Now the verifier\nhas this hash value.",
    "start": "4134821",
    "end": "4141399"
  },
  {
    "text": "Now, in some sense,\nnow, the prover-- now, the hash value,\nnow the verifier",
    "start": "4141399",
    "end": "4147540"
  },
  {
    "text": "is going to tell him,\nOK, thank you very much. I'm going to behave\nas a PCP verifier.",
    "start": "4147540",
    "end": "4153310"
  },
  {
    "text": "So I'm going to\ngenerate randomness, ask to look at locations i1,\ni2, up to il in your PCP.",
    "start": "4153310",
    "end": "4161020"
  },
  {
    "text": "Give me an opening. Show me. Show open-- Don't give me the entire PCP. I can't hold it.",
    "start": "4161020",
    "end": "4166120"
  },
  {
    "text": "Give me only location\ni1, i2, up to il. Now, the prover-- once\nagain, here, no problem.",
    "start": "4166120",
    "end": "4172299"
  },
  {
    "text": "It's b1, b2, up to bl. But the verifier needs\nto be-- how does he know that it's indeed\nthe opening of the hash?",
    "start": "4172300",
    "end": "4179290"
  },
  {
    "text": "So we're going to use a hash\nfunction that you can open. So he's going to give him\nthe bits with openings.",
    "start": "4179290",
    "end": "4185170"
  },
  {
    "text": "See? Here's an opening,\nor a little proof, that in location i1 is\nsitting b1, location I2,",
    "start": "4185170",
    "end": "4192790"
  },
  {
    "text": "I have B2, and so\non and so forth. And then the verifier\nis just going to check the opening\nthat they're good",
    "start": "4192790",
    "end": "4198810"
  },
  {
    "text": "and accept if the\nPCP verifier accepts. So essentially,\nall the idea, you",
    "start": "4198810",
    "end": "4204719"
  },
  {
    "text": "combine this PCP with kind of\nthis cryptography technology",
    "start": "4204720",
    "end": "4211590"
  },
  {
    "text": "that kind of smushes this\nPCP into a small thing, and allows you to kind\nof look kind of only at--",
    "start": "4211590",
    "end": "4217980"
  },
  {
    "text": "allows the prover,\nin a sense, to look only at specific\nlocations computationally.",
    "start": "4217980",
    "end": "4223530"
  },
  {
    "text": "Like, you can give\nhim little proofs that open specific locations.",
    "start": "4223530",
    "end": "4228630"
  },
  {
    "text": "And that's it. That's what you get. So next time, we're going\nto define the local opening,",
    "start": "4228630",
    "end": "4234639"
  },
  {
    "text": "we're going to see the\ninteractive argument in detail,",
    "start": "4234640",
    "end": "4239760"
  },
  {
    "text": "and prove that it satisfies\nthe guarantees written here. OK, so we'll see\nyou next Friday.",
    "start": "4239760",
    "end": "4245260"
  },
  {
    "text": "Thanks. ",
    "start": "4245260",
    "end": "4248000"
  }
]