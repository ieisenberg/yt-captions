[
  {
    "start": "0",
    "end": "22000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6910"
  },
  {
    "text": "offer high quality, educational resources for free. To make a donation or view\nadditional materials from",
    "start": "6910",
    "end": "13460"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at",
    "start": "13460",
    "end": "19290"
  },
  {
    "text": "ocw.mit.edu.  PROFESSOR: We ended up the last\nlecture talking about",
    "start": "19290",
    "end": "25820"
  },
  {
    "start": "22000",
    "end": "440000"
  },
  {
    "text": "dynamic programming. And we'll spend all of\ntoday on that topic. We showed how it could be used\nto provide a practical",
    "start": "25820",
    "end": "34550"
  },
  {
    "text": "solution to the shortest path\nproblem, a solution that would",
    "start": "34550",
    "end": "40070"
  },
  {
    "text": "allow us to solve what\nwas, in principle, a complex problem quickly.",
    "start": "40070",
    "end": "46060"
  },
  {
    "text": "And we talked about the\nproperties that make it possible to solve that problem\nand, in general, the",
    "start": "46060",
    "end": "53370"
  },
  {
    "text": "properties we need to make\ndynamic programming applicable.",
    "start": "53370",
    "end": "59570"
  },
  {
    "text": "So let's return to that\ntopic right now. ",
    "start": "59570",
    "end": "68850"
  },
  {
    "text": "What we looked at is we looked\nat two properties. The first was optimal\nsubstructure.",
    "start": "68850",
    "end": "74770"
  },
  {
    "start": "74770",
    "end": "84979"
  },
  {
    "text": "And you recall what this meant\nis that we can construct a globally optimal solution by\ncombining solutions to local",
    "start": "84980",
    "end": "94390"
  },
  {
    "text": "subproblems. So we've looked at a lot of\nproblems already this term",
    "start": "94390",
    "end": "99590"
  },
  {
    "text": "that have optimal\nsubstructure-- merge sort, for example, which\nexploits the fact that a list",
    "start": "99590",
    "end": "106850"
  },
  {
    "text": "can be sorted by first sorting\ncomponents of it and then combining those.",
    "start": "106850",
    "end": "113070"
  },
  {
    "text": "So merge sort exhibited\noptimal substructure. ",
    "start": "113070",
    "end": "119410"
  },
  {
    "text": "The second property we looked\nat was overlapping subproblems.",
    "start": "119410",
    "end": "124880"
  },
  {
    "start": "124880",
    "end": "132480"
  },
  {
    "text": "And what this meant was that in\nthe course of running our",
    "start": "132480",
    "end": "138340"
  },
  {
    "text": "algorithm, we would end\nup solving the same problem more than once.",
    "start": "138340",
    "end": "145170"
  },
  {
    "text": "And that is what gave us the\npower of using memoization, to",
    "start": "145170",
    "end": "151020"
  },
  {
    "text": "use table lookup instead of\nre-computing the solution.",
    "start": "151020",
    "end": "156050"
  },
  {
    "text": "Notice that merge_sort does\nnot have overlapping subproblems.",
    "start": "156050",
    "end": "162280"
  },
  {
    "text": "There's no reason that we would\nexpect, if we're sorting a list, that we would\never encounter the",
    "start": "162280",
    "end": "168880"
  },
  {
    "text": "same sublist twice. And so in fact, we cannot\nuse dynamic",
    "start": "168880",
    "end": "176420"
  },
  {
    "text": "programming to solve sorting. Because it has one of these\nproperties, but not both.",
    "start": "176420",
    "end": "182435"
  },
  {
    "text": " So how about shortest path?",
    "start": "182435",
    "end": "188769"
  },
  {
    "text": "Does it have these properties? Well, let's first think about\noptimal substructure.",
    "start": "188770",
    "end": "197620"
  },
  {
    "text": "You might begin by asking the\nquestion if I knew the shortest path from A to B, and\nI knew the shortest path from",
    "start": "197620",
    "end": "207110"
  },
  {
    "text": "B to C, can I necessarily\ncombine those to get the shortest path from A to C?",
    "start": "207110",
    "end": "214175"
  },
  {
    "text": " No, exactly right. Because for example, maybe\nthere's a direct link from A",
    "start": "214175",
    "end": "221849"
  },
  {
    "text": "to C. So we can't combine\nthem that way.",
    "start": "221850",
    "end": "228340"
  },
  {
    "text": "So that gives us\nthe question-- Oh, pardon?",
    "start": "228340",
    "end": "234260"
  },
  {
    "text": "[INAUDIBLE] PROFESSOR: --Almost\ngot it there. So that gives us the question,\nwhat is the optimal",
    "start": "234260",
    "end": "241180"
  },
  {
    "text": "substructure here? Well, there is something we do\nknow about shortest path, that",
    "start": "241180",
    "end": "249160"
  },
  {
    "text": "if I have the shortest path\nfrom one node to another.",
    "start": "249160",
    "end": "256239"
  },
  {
    "text": "And I take any sub path\nof that, I will have--",
    "start": "256240",
    "end": "262440"
  },
  {
    "text": "so let's say I have a path\nthat goes from-- let's say I know that the\nshortest path from A to C is A",
    "start": "262440",
    "end": "270421"
  },
  {
    "text": "to B to D to E to C. If this is\nthe shortest path from A to",
    "start": "270421",
    "end": "280807"
  },
  {
    "text": "C, I know that this is\nthe shortest path from B to E. Right?",
    "start": "280808",
    "end": "289120"
  },
  {
    "text": "Because otherwise, I wouldn't\nhave bothered going through D. If there were, for example, a\nlink directly from B to E,",
    "start": "289120",
    "end": "297090"
  },
  {
    "text": "then the shortest path\nfrom A to C would not have included this. ",
    "start": "297090",
    "end": "303220"
  },
  {
    "text": "So that's the optimal\nsubstructure I have, and that's the substructure that I\nexploited last time in showing",
    "start": "303220",
    "end": "312670"
  },
  {
    "text": "you the dynamic programming\nsolution to the shortest path problem. ",
    "start": "312670",
    "end": "320280"
  },
  {
    "text": "You also recall that we looked\nat the shortest path. We'd found overlapping\nsubproblems.",
    "start": "320280",
    "end": "328650"
  },
  {
    "text": "Because I would end up solving\nthe same intermediate problem multiple times, figuring\nout how to get",
    "start": "328650",
    "end": "336650"
  },
  {
    "text": "from one node to another. So indeed, we saw that the\nshortest path problem",
    "start": "336650",
    "end": "343290"
  },
  {
    "text": "exhibited both of these\nproperties and therefore, was amenable to solution by the\ndynamic programming.",
    "start": "343290",
    "end": "350580"
  },
  {
    "text": "And in fact, we ran it and we\nsaw that it ran quite quickly. ",
    "start": "350580",
    "end": "357850"
  },
  {
    "text": "It's not immediately obvious,\nbut the 0-1 knapsack problem",
    "start": "357850",
    "end": "363400"
  },
  {
    "text": "also exhibits both of\nthese properties.  You'll recall a few lectures\nago, and also in a problem set",
    "start": "363400",
    "end": "373570"
  },
  {
    "text": "not so long ago, we looked at\na recursive solution to the",
    "start": "373570",
    "end": "380990"
  },
  {
    "text": "0-1 knapsack problem. It's called \"solve\"\nin this code.",
    "start": "380990",
    "end": "387730"
  },
  {
    "text": "It uses backtracking to\nimplement the decision tree.",
    "start": "387730",
    "end": "393760"
  },
  {
    "text": "if we look at the decision\ntree we had there-- ",
    "start": "393760",
    "end": "411080"
  },
  {
    "text": "I gave you a small example\nhere of the 0-1 knapsack problem. I've got A, B, C and D. I've got\nsome values, and I've got",
    "start": "411080",
    "end": "418740"
  },
  {
    "text": "some weights. We started by saying at the\nbeginning, we looked at this",
    "start": "418740",
    "end": "425670"
  },
  {
    "text": "node here, where we had decided\nnot to take anything .",
    "start": "425670",
    "end": "432240"
  },
  {
    "text": "We still had the list A, B,\nC, and D to consider. ",
    "start": "432240",
    "end": "440669"
  },
  {
    "text": "The total value of our items was\n0, and for our example, I",
    "start": "440670",
    "end": "445950"
  },
  {
    "text": "think we had 5 pounds\nof material left, or 5 units of weight.",
    "start": "445950",
    "end": "452020"
  },
  {
    "text": "We then considered a decision. What happens if we take A?",
    "start": "452020",
    "end": "458210"
  },
  {
    "text": "Well, if we take A, we have B,\nC, and D left to consider.",
    "start": "458210",
    "end": "463889"
  },
  {
    "text": "We now look at this node\nand say, all right, our value is 6 -- the value of A. But we only\nhave 2 pounds left.",
    "start": "463890",
    "end": "470974"
  },
  {
    "text": " We then considered going\ndepth first, left",
    "start": "470975",
    "end": "477490"
  },
  {
    "text": "first in this case. This is the depth-\nfirst search. We've looked at that before. All right, let's consider\nthe next branch.",
    "start": "477490",
    "end": "487090"
  },
  {
    "text": "Well the next branch we'll\nconsider C. Well we discover--",
    "start": "487090",
    "end": "496669"
  },
  {
    "text": "no we'd consider B rather. We can't take B, because\nB weighs 3.",
    "start": "496670",
    "end": "503120"
  },
  {
    "text": "So this is a branch that\nwe can't get to. We can elect the other decision\nnot to take B, in",
    "start": "503120",
    "end": "511230"
  },
  {
    "text": "which case we still have C\nand D left to consider. And still 6 and 2.",
    "start": "511230",
    "end": "518490"
  },
  {
    "text": "We then proceed and said right,\nwell can we take C? Yes we can.",
    "start": "518490",
    "end": "523580"
  },
  {
    "text": " And that leaves us with\na value of 14",
    "start": "523580",
    "end": "529160"
  },
  {
    "text": "and no weight left. So since we have no available\nweights, we might as well stop",
    "start": "529160",
    "end": "534440"
  },
  {
    "text": "considering things. So this is a terminal node. We then back up, and said all\nright, let's consider the",
    "start": "534440",
    "end": "542140"
  },
  {
    "text": "decision where we don't\ntake C. Can we take D?",
    "start": "542140",
    "end": "547990"
  },
  {
    "text": "And the answer is no because\nit weighs too much. And then we're done.",
    "start": "547990",
    "end": "553980"
  },
  {
    "text": "And so we see on this side of\nthe tree, we've explored various possibilities.",
    "start": "553980",
    "end": "559380"
  },
  {
    "text": "And this is our best\noption so far.  And we can walk through and now\nwe consider well, what if",
    "start": "559380",
    "end": "566860"
  },
  {
    "text": "we don't take A? Well then we have these\ndecisions to make.",
    "start": "566860",
    "end": "572080"
  },
  {
    "text": "And eventually, we can\nlook at the whole thing and make a decision. By the way, I noticed this\nmorning that there was an",
    "start": "572080",
    "end": "579380"
  },
  {
    "text": "error on your handout. I chose not to correct it in\nthe slide so that you would",
    "start": "579380",
    "end": "585100"
  },
  {
    "text": "notice it was in your\nhandout as well. What should node 18 be? ",
    "start": "585100",
    "end": "593530"
  },
  {
    "text": "What's the error here?  Pardon? [INAUDIBLE]",
    "start": "593530",
    "end": "599705"
  },
  {
    "text": " PROFESSOR: Right. That should be the empty one.",
    "start": "599705",
    "end": "605030"
  },
  {
    "text": "Right? Because we considered\neverything. And in fact, typically all of\nyour bottom nodes should",
    "start": "605030",
    "end": "612170"
  },
  {
    "text": "either have 0 weights or no\nitems left to consider. Not very deep, just a typo but\nhas the advantage that by",
    "start": "612170",
    "end": "621550"
  },
  {
    "text": "looking for it, you can see\nwhether you understand how we're constructing these\ndecision trees.",
    "start": "621550",
    "end": "626831"
  },
  {
    "text": "So this is a very common\nway to deal with an optimization problem. You consider all combinations\nof decisions in",
    "start": "626831",
    "end": "634240"
  },
  {
    "text": "a systematic way. And when you're done, you\nchoose the best one.",
    "start": "634240",
    "end": "639260"
  },
  {
    "text": "So this is using depth-first\nsearch and backtracking. And this is essentially what you\ndid in your problem set.",
    "start": "639260",
    "end": "648350"
  },
  {
    "text": "Now what you saw in your problem\nset is that if the set",
    "start": "648350",
    "end": "653670"
  },
  {
    "text": "of items is even moderately\nlarge, this algorithm can take",
    "start": "653670",
    "end": "659240"
  },
  {
    "text": "a very long time to run. How long? Well, at each level of the tree\nwe're deciding whether to",
    "start": "659240",
    "end": "668620"
  },
  {
    "text": "keep or not keep one item.",
    "start": "668620",
    "end": "673700"
  },
  {
    "text": "So what's the maximum\ndepth of the tree? How many levels can\nthis tree go?",
    "start": "673700",
    "end": "682750"
  },
  {
    "text": "If we have n items-- Pardon? [INAUDIBLE] PROFESSOR: n levels--",
    "start": "682750",
    "end": "688630"
  },
  {
    "text": "exactly. So if we have n items,\nit can go n levels-- ",
    "start": "688630",
    "end": "696930"
  },
  {
    "text": "Good grab. All right, how many nodes do\nwe have at each level?",
    "start": "696930",
    "end": "702709"
  },
  {
    "text": "Well, at level 0 we\nhave only 1 node. But what's the down\nat the bottom?",
    "start": "702710",
    "end": "709470"
  },
  {
    "text": "Let's say we have an enormous\namount of weight so that in fact we never run out of\nweight in our knapsack. ",
    "start": "709470",
    "end": "717140"
  },
  {
    "text": "We'll have quite a broad\ntree, right?",
    "start": "717140",
    "end": "722650"
  },
  {
    "text": "How many nodes at level 2? ",
    "start": "722650",
    "end": "729920"
  },
  {
    "text": "At each level, right? Down here we have up\nto 4 nodes, up to 8 nodes, up to 16 nodes.",
    "start": "729920",
    "end": "737270"
  },
  {
    "text": "So if we had say, 39, 40 items,\nat level 39 we'd have 2",
    "start": "737270",
    "end": "742920"
  },
  {
    "text": "to the 39th nodes-- pretty darn big tree. All right?",
    "start": "742920",
    "end": "748029"
  },
  {
    "text": "Not very deep, but very bushy. So we know that for any\nreasonable number of items and",
    "start": "748030",
    "end": "755420"
  },
  {
    "text": "a reasonable amount of\nweight, this is just not going to work. And that's why when you wrote\nyour problem set, and you were",
    "start": "755420",
    "end": "762920"
  },
  {
    "text": "trying to solve the optimal set\nof courses to take, you could only run it on a small\nsubset of the courses at MIT.",
    "start": "762920",
    "end": "770320"
  },
  {
    "text": "Because if we gave you\neverything-- and we gave you a lot for a test-- you noticed it effectively\njust wouldn't finish.",
    "start": "770320",
    "end": "776959"
  },
  {
    "text": " So now we have to ask the\nquestion well, can we use",
    "start": "776960",
    "end": "782770"
  },
  {
    "text": "dynamic programming to\nsolve this problem? And in particular, that boils\ndown to the question of does",
    "start": "782770",
    "end": "792319"
  },
  {
    "text": "this solution exhibit optimal\nsubstructure and overlapping",
    "start": "792320",
    "end": "797360"
  },
  {
    "text": "subproblems?  Well, optimal substructure is\neasily visible in both the",
    "start": "797360",
    "end": "809050"
  },
  {
    "text": "decision tree and the code. Right? Each parent node combines\nthe solution--",
    "start": "809050",
    "end": "815950"
  },
  {
    "text": "We can look at the code\nsince you have the subtree in your handout--",
    "start": "815950",
    "end": "821676"
  },
  {
    "text": "or the decision tree\nin your handout. ",
    "start": "821676",
    "end": "830740"
  },
  {
    "start": "830000",
    "end": "895000"
  },
  {
    "text": "And the key place in the code is\nwhere we combine decisions",
    "start": "830740",
    "end": "836570"
  },
  {
    "text": "from lower down in the\ntree as we go up. So at each parent node,\nwe select the",
    "start": "836570",
    "end": "843310"
  },
  {
    "text": "better of the two children.  Right? If the left child is better\nthan the right child, we",
    "start": "843310",
    "end": "850250"
  },
  {
    "text": "select the left. Otherwise, we select\nthe right. And we just percolate\nup the tree.",
    "start": "850250",
    "end": "856700"
  },
  {
    "text": "So there's clearly optimal\nsubstructure here, that we can",
    "start": "856700",
    "end": "862690"
  },
  {
    "text": "solve the higher nodes with\nsolutions to the lower nodes. ",
    "start": "862690",
    "end": "868850"
  },
  {
    "text": "And we see that again in the\ncode where it says choose better branch. ",
    "start": "868850",
    "end": "875910"
  },
  {
    "text": "It's less obvious to answer the\nquestion whether or not there are overlapping\nsubproblems.",
    "start": "875910",
    "end": "881960"
  },
  {
    "text": " If we go back and look\nat the tree-- ",
    "start": "881960",
    "end": "896529"
  },
  {
    "start": "895000",
    "end": "958000"
  },
  {
    "text": "At first glance, it may appear\nthat there are no overlapping subproblems.",
    "start": "896530",
    "end": "903100"
  },
  {
    "text": "You'll notice that at\neach node we're solving a different problem. Right? The problem is described in some\nsense by this fortuple.",
    "start": "903100",
    "end": "911810"
  },
  {
    "text": "But if I've already taken A and\nC, and I have D left to consider, what should I do?",
    "start": "911810",
    "end": "918199"
  },
  {
    "text": "Where up here I've taken A, and\nI have B, C, and D left to consider, what should I do?",
    "start": "918200",
    "end": "923320"
  },
  {
    "text": "And by design of the decision\ntree, each node is different.",
    "start": "923320",
    "end": "929210"
  },
  {
    "text": "Right? We're not considering the same\nthing over and over again. So you might look at it and say,\nwell, we're out of luck.",
    "start": "929210",
    "end": "934899"
  },
  {
    "text": "There are no overlapping\nsubproblems. Not true.",
    "start": "934900",
    "end": "940360"
  },
  {
    "text": "So let's think hard for a second\nand ask in what sense are there overlapping\nsubproblems?",
    "start": "940360",
    "end": "946589"
  },
  {
    "text": "When are we potentially,\nat least, solving the same problem? ",
    "start": "946590",
    "end": "954450"
  },
  {
    "text": "Well what is the problem\nwe're actually solving? ",
    "start": "954450",
    "end": "959670"
  },
  {
    "start": "958000",
    "end": "1422000"
  },
  {
    "text": "We're solving the problem that\ncan in some sense be stated as follows- at each node, we're\nsaying what should we do about",
    "start": "959670",
    "end": "978470"
  },
  {
    "text": "the nodes left to consider? ",
    "start": "978470",
    "end": "985460"
  },
  {
    "text": "So we're solving a problem\ngiven a set of items-- ",
    "start": "985460",
    "end": "993430"
  },
  {
    "text": "what items we have at a node. ",
    "start": "993430",
    "end": "1001079"
  },
  {
    "text": "Given an available weight, which\nitems should we take?",
    "start": "1001080",
    "end": "1022395"
  },
  {
    "start": "1022395",
    "end": "1034970"
  },
  {
    "text": "What's missing from this? ",
    "start": "1034970",
    "end": "1040230"
  },
  {
    "text": "It says nothing about the items\nyou've already taken. ",
    "start": "1040230",
    "end": "1045869"
  },
  {
    "text": "In order to decide what to take\nnext, we need to know how much weight we have available.",
    "start": "1045869",
    "end": "1053700"
  },
  {
    "text": "But we don't need to know why\nwe have that much weight available, which items we have\npreviously decided to take.",
    "start": "1053700",
    "end": "1061680"
  },
  {
    "start": "1061680",
    "end": "1068782"
  },
  {
    "text": "That part of the for tuple turns\nout not to be relevant to the problem I still\nhave to solve.",
    "start": "1068782",
    "end": "1075274"
  },
  {
    "text": " Why is that important?",
    "start": "1075275",
    "end": "1081809"
  },
  {
    "text": "Because there may be many\ndifferent sets of items I could take. It would add up to the\nsame total weight.",
    "start": "1081810",
    "end": "1089510"
  },
  {
    "text": "Therefore, leaving me the\nsame problem to solve. ",
    "start": "1089510",
    "end": "1100300"
  },
  {
    "text": "And that's the key observation\nthat tells us we can use dynamic programming to solve\nthe 0-1 knapsack problem.",
    "start": "1100300",
    "end": "1107575"
  },
  {
    "text": " Does that-- I should ask the positive\nquestion-- does that make",
    "start": "1107575",
    "end": "1113910"
  },
  {
    "text": "sense to anybody? Raise your hand if\nit makes sense-- ",
    "start": "1113910",
    "end": "1120550"
  },
  {
    "text": "a small number of hands. Raise your hands if it\ndoesn't make sense.",
    "start": "1120550",
    "end": "1125779"
  },
  {
    "text": "OK. Can any of you to whom\nit doesn't make sense formulate a question? ",
    "start": "1125780",
    "end": "1133850"
  },
  {
    "text": "No, it's hard. ",
    "start": "1133850",
    "end": "1139679"
  },
  {
    "text": "AUDIENCE: Total weight, or\nthe same total value? PROFESSOR: The same\ntotal weight. Because--",
    "start": "1139680",
    "end": "1145559"
  },
  {
    "text": "the question is are there many\nsets of items with the same total value or the same\ntotal weight? There might be many with the\nsame total value, but that",
    "start": "1145560",
    "end": "1153100"
  },
  {
    "text": "doesn't really matter. Because in choosing what to do\nnext, as I go down the tree, I",
    "start": "1153100",
    "end": "1160560"
  },
  {
    "text": "don't care what the value\nis above the tree. Because I'll still try and find\nthe best solution I can",
    "start": "1160560",
    "end": "1168130"
  },
  {
    "text": "to the remaining subproblem.  If a value above is a million,\nor the value above is 3, it",
    "start": "1168130",
    "end": "1176830"
  },
  {
    "text": "doesn't matter what\nI should do next. ",
    "start": "1176830",
    "end": "1184756"
  },
  {
    "text": "AUDIENCE: Which makes sense. But if you use different things\nto get that weight, wouldn't you have a different\nset of items to choose from?",
    "start": "1184756",
    "end": "1192210"
  },
  {
    "text": "PROFESSOR: Right. So the question is it makes\nsense if there are many different sets of items that\nwould have the same total",
    "start": "1192210",
    "end": "1197980"
  },
  {
    "text": "weight, but what\nI'm going to-- but, wouldn't I have different\nitems to choose from?",
    "start": "1197980",
    "end": "1203549"
  },
  {
    "text": "Well you'll notice that I\ndo have to look at what items I have left. ",
    "start": "1203550",
    "end": "1210780"
  },
  {
    "text": "But as I go through-- let's assume here that I have\na list of items to take.",
    "start": "1210780",
    "end": "1221860"
  },
  {
    "text": " As I go through from the front,\nsay, I'll label each",
    "start": "1221860",
    "end": "1230760"
  },
  {
    "text": "node of the tree. Each item will have either a 0\nor a 1, depending upon whether",
    "start": "1230760",
    "end": "1235950"
  },
  {
    "text": "I decided to take it or not. And then what I have\nto consider is",
    "start": "1235950",
    "end": "1244140"
  },
  {
    "text": "the remaining items. ",
    "start": "1244140",
    "end": "1249290"
  },
  {
    "text": "And let's say the values of\nthe first two items--",
    "start": "1249290",
    "end": "1254410"
  },
  {
    "text": "the first four items-- were, well, let's say they were\nall one, just to make",
    "start": "1254410",
    "end": "1262340"
  },
  {
    "text": "life simple. Well that'll be confusing, since\nI'm using that for taken or not taken.",
    "start": "1262340",
    "end": "1267810"
  },
  {
    "text": "Let's say their values\nwere all 2. ",
    "start": "1267810",
    "end": "1275980"
  },
  {
    "text": "When I get here, and I'm\ndeciding what to do with these items, I might--",
    "start": "1275980",
    "end": "1285790"
  },
  {
    "text": "so this tells me that\nI've used up 4 pounds of my allotment. Right?",
    "start": "1285790",
    "end": "1291000"
  },
  {
    "text": "But if I had done this one, I\nwould also use up 4 pounds of",
    "start": "1291000",
    "end": "1297630"
  },
  {
    "text": "my allotment. And so, which of these I take\nor don't take is independent",
    "start": "1297630",
    "end": "1304800"
  },
  {
    "text": "of how I got here. I do have to keep track of\nwhich items are still",
    "start": "1304800",
    "end": "1310520"
  },
  {
    "text": "available to me. But I don't care how I've\nused up those 4 pounds. ",
    "start": "1310520",
    "end": "1320600"
  },
  {
    "text": "And obviously, there are a lot\nof ways to choose two that will use up 4 pounds\nhere, right?",
    "start": "1320600",
    "end": "1326950"
  },
  {
    "text": "But the solution to this part\nof the problem will be independent of which\ntwo I took.",
    "start": "1326950",
    "end": "1335180"
  },
  {
    "text": "That make sense now? Therefore, as long as there is\na prefix of my list of items,",
    "start": "1335180",
    "end": "1344950"
  },
  {
    "text": "such that multiple things add up\nto the same weight, I will have overlapping subproblems.",
    "start": "1344950",
    "end": "1351059"
  },
  {
    "text": " Now you could imagine a\nsituation in which no",
    "start": "1351060",
    "end": "1357000"
  },
  {
    "text": "combination added to the same\nweight, in which case dynamic programming wouldn't\nbuy me anything.",
    "start": "1357000",
    "end": "1363550"
  },
  {
    "text": "It would still find the right\nanswer, but it wouldn't speed anything up.",
    "start": "1363550",
    "end": "1369660"
  },
  {
    "text": "But in practice, for most 0-1\nknapsack problems-- they may not be this simple-- but you could expect--",
    "start": "1369660",
    "end": "1376630"
  },
  {
    "text": "and we'll see this complexity\nlater-- that as long as your possible\nweights are being chosen from",
    "start": "1376630",
    "end": "1383040"
  },
  {
    "text": "a relatively small set, you'll\nhave many things add up to the",
    "start": "1383040",
    "end": "1388070"
  },
  {
    "text": "same thing-- particularly as you get further\ndown this list and have a lot longer prefix\nto consider.",
    "start": "1388070",
    "end": "1396480"
  },
  {
    "text": "So indeed I do have overlapping\nsubproblems.",
    "start": "1396480",
    "end": "1402900"
  },
  {
    "text": "That answer the question? All right, now.",
    "start": "1402900",
    "end": "1408049"
  },
  {
    "text": "People feel better about\nwhat's going on? OK. Maybe looking at some code\nwill make it even",
    "start": "1408050",
    "end": "1417740"
  },
  {
    "text": "clearer, and maybe not. ",
    "start": "1417740",
    "end": "1424500"
  },
  {
    "start": "1422000",
    "end": "1865000"
  },
  {
    "text": "Anyway, I do appreciate\nthe questions. Since it's sometimes hard for me\nto appreciate what's coming",
    "start": "1424500",
    "end": "1430810"
  },
  {
    "text": "across and what's not\ncoming across. You should get rewarded for\ngood questions, as well as",
    "start": "1430810",
    "end": "1436070"
  },
  {
    "text": "good answers. All right, so now\nlet's look at a",
    "start": "1436070",
    "end": "1441880"
  },
  {
    "text": "dynamic programming solution. ",
    "start": "1441880",
    "end": "1450120"
  },
  {
    "text": "I've just taken the\npreviously-- the example we looked at\nbefore was solve--",
    "start": "1450120",
    "end": "1456540"
  },
  {
    "text": "made it fast solve. And I've added a parameter\nof memo.",
    "start": "1456540",
    "end": "1462549"
  },
  {
    "text": "This is the same kind of trick\nwe used last time for our shortest path problem.",
    "start": "1462550",
    "end": "1469330"
  },
  {
    "text": "I should point out\nthat I'm using-- this calls to mind a dirty,\nlittle secret of Python, one I",
    "start": "1469330",
    "end": "1477350"
  },
  {
    "text": "have previously been hiding\nbecause it's so ugly I just hate to talk about it.",
    "start": "1477350",
    "end": "1483490"
  },
  {
    "text": "But I figured at some point,\nhonesty is the right policy. ",
    "start": "1483490",
    "end": "1490090"
  },
  {
    "text": "What I'd like is the first\ntime I call fast solve, I",
    "start": "1490090",
    "end": "1495820"
  },
  {
    "text": "shouldn't have to know that\nthere's even a memo. Fast solve should have the\nsame interface as solve.",
    "start": "1495820",
    "end": "1506910"
  },
  {
    "text": "The items to consider and the\navailable weight, and that's all you should need to know. Because the memo is part of the\nimplementation, not part",
    "start": "1506910",
    "end": "1515830"
  },
  {
    "text": "of the specification\nof solving the 0-1 knapsack problem. We've made that argument\nseveral times,",
    "start": "1515830",
    "end": "1522909"
  },
  {
    "text": "earlier in the semester. And so you might think that what\nI should therefore do is",
    "start": "1522910",
    "end": "1534370"
  },
  {
    "text": "to initialize the memo to,\nsay the empty dictionary. I'm going to use dictionaries\nfor memos, as before.",
    "start": "1534370",
    "end": "1543150"
  },
  {
    "text": "And then just check and if it's\nthe empty one, that means it's the first-- I can know whether it's\nthe-- it'll work fine",
    "start": "1543150",
    "end": "1550500"
  },
  {
    "text": "for the first call. Well it doesn't work fine. And here's the dirty,\nlittle secret.",
    "start": "1550500",
    "end": "1557200"
  },
  {
    "text": "In Python, when you have a\nparameter with a default",
    "start": "1557200",
    "end": "1562679"
  },
  {
    "text": "value, that default value\nis evaluated once.",
    "start": "1562680",
    "end": "1567915"
  },
  {
    "text": " So the way the Python system\nworks is it will process all",
    "start": "1567915",
    "end": "1575720"
  },
  {
    "text": "of the def statements\nand evaluate the",
    "start": "1575720",
    "end": "1582020"
  },
  {
    "text": "right-hand side here once. And then every time the function\nis called, without",
    "start": "1582020",
    "end": "1590630"
  },
  {
    "text": "this optional argument, it will\nuse the value it found when it evaluated the\ndef statement.",
    "start": "1590630",
    "end": "1596789"
  },
  {
    "text": "Now if this value is immutable,\nit doesn't matter.",
    "start": "1596790",
    "end": "1604790"
  },
  {
    "text": "None will be none forever. 28 will be 28 forever. 3.7 will be 3.7 forever.",
    "start": "1604790",
    "end": "1612779"
  },
  {
    "text": "But if this is a mutable value,\nfor example a dict,",
    "start": "1612780",
    "end": "1619030"
  },
  {
    "text": "then what will happen is it will\ncreate an object which",
    "start": "1619030",
    "end": "1625330"
  },
  {
    "text": "will be initially an\nempty dictionary. But then every time fast solve\nis called without this",
    "start": "1625330",
    "end": "1634510"
  },
  {
    "text": "argument, it will access\nthe same object. ",
    "start": "1634510",
    "end": "1642600"
  },
  {
    "text": "So if I call fast solve to solve\none problem, and in the course of that, it builds\nup a big dictionary.",
    "start": "1642600",
    "end": "1651910"
  },
  {
    "text": "And then I call it again to\nsolve another problem, instead of starting with the empty\ndictionary, it will start with",
    "start": "1651910",
    "end": "1661279"
  },
  {
    "text": "the same object it started with\nthe first time, which is by now a dictionary filled\nwith values. ",
    "start": "1661280",
    "end": "1669430"
  },
  {
    "text": "And so I will get the\nwrong answer.  This is a subtlety, and it's a\ncommon kind of bug in Python.",
    "start": "1669430",
    "end": "1680020"
  },
  {
    "text": "And I confess to having been\nbitten by it very recently, as in yesterday, myself.",
    "start": "1680020",
    "end": "1688050"
  },
  {
    "text": "So it's worth remembering. And there's a simple workaround,\nwhich is the",
    "start": "1688050",
    "end": "1693400"
  },
  {
    "text": "default value is the\nimmutable value. I chose none. And what I say when I enter it\nis if the memo is none, it",
    "start": "1693400",
    "end": "1701290"
  },
  {
    "text": "means it's been invoked. And now I'll initialize it\nto the empty dictionary.",
    "start": "1701290",
    "end": "1707580"
  },
  {
    "text": "And now every time it will get\na new one, because we know what this statement says is\nallocate a new object of type",
    "start": "1707580",
    "end": "1715790"
  },
  {
    "text": "dict, and initialize\nit to empty. This will happen dynamically\nwhen the thing is invoked,",
    "start": "1715790",
    "end": "1722880"
  },
  {
    "text": "rather than statically\nat the time Python processes the diffs.",
    "start": "1722880",
    "end": "1728700"
  },
  {
    "text": "It's a silly little problem. I hate to bring it up. I don't think it should\nwork that way, but it",
    "start": "1728700",
    "end": "1734669"
  },
  {
    "text": "does work that way. So we're stuck. Yeah. [INAUDIBLE] ",
    "start": "1734670",
    "end": "1739772"
  },
  {
    "text": "PROFESSOR: I'm sorry. You've have to speak\nmore loudly. [INAUDIBLE] ",
    "start": "1739772",
    "end": "1746993"
  },
  {
    "text": "PROFESSOR: Well, why doesn't\nmy first call-- So the question is when I go to\ntest it, say, why don't I",
    "start": "1746993",
    "end": "1755890"
  },
  {
    "text": "start by calling it with fast\nsolve in an empty dictionary? And it's because, as we'll see\nwhen I get there, I want solve",
    "start": "1755890",
    "end": "1768170"
  },
  {
    "text": "and fast solve, in this case,\nto have the same interface.",
    "start": "1768170",
    "end": "1777980"
  },
  {
    "text": "And in fact, you can say I want\nthem to have the same specification. ",
    "start": "1777980",
    "end": "1786970"
  },
  {
    "text": "Because in fact, imagine that\nyou wrote a program that",
    "start": "1786970",
    "end": "1792340"
  },
  {
    "text": "called solve many times. And it was slow, and then\nyou took 6.00--",
    "start": "1792340",
    "end": "1798120"
  },
  {
    "text": "So, I know why it's\nslow, because I've used a stupid solve. Let me use dynamic\nprogramming.",
    "start": "1798120",
    "end": "1805270"
  },
  {
    "text": "I want to then be able to not\nname the new one fast solve, but replace the old solve\nby the new solve.",
    "start": "1805270",
    "end": "1813380"
  },
  {
    "text": "And have all the programs that\nyou solve still work. That will not happen if I insist\nthat the new solve has",
    "start": "1813380",
    "end": "1821450"
  },
  {
    "text": "an extra argument.  Now I could put what's called\na wrapper in and call solve,",
    "start": "1821450",
    "end": "1829395"
  },
  {
    "text": "and then have it call fast solve\nwith the extra argument. And that would work too.",
    "start": "1829395",
    "end": "1836060"
  },
  {
    "text": "That would be an equally\ngood solution to address this problem.",
    "start": "1836060",
    "end": "1843710"
  },
  {
    "text": "But does that make sense? So either one would work.",
    "start": "1843710",
    "end": "1850020"
  },
  {
    "text": "I chose this one but what\nwouldn't work in a practical engineering sense is to change\nthe specification of solve.",
    "start": "1850020",
    "end": "1858630"
  },
  {
    "text": " All right?",
    "start": "1858630",
    "end": "1863840"
  },
  {
    "text": "So it's a silly little thing,\nbut since people do get bitten by it, I figure I should\ntell you about it.",
    "start": "1863840",
    "end": "1873380"
  },
  {
    "start": "1865000",
    "end": "1985000"
  },
  {
    "text": "And I guess while I'm on the\nsubject of silly little things, I'll tell you one more\nthing before we go back to",
    "start": "1873380",
    "end": "1879170"
  },
  {
    "text": "this algorithm. Down here in the place where\nI'm testing it, you'll note",
    "start": "1879170",
    "end": "1888549"
  },
  {
    "text": "that I've imported something\ncalled sys, and then said sys.setrecursionlimit to 2000.",
    "start": "1888550",
    "end": "1898040"
  },
  {
    "text": "In Python, there's a maximum\ndepth of recursion.",
    "start": "1898040",
    "end": "1903410"
  },
  {
    "text": "When this is exceeded, it\nraises an exception-- depth exceeded.",
    "start": "1903410",
    "end": "1909290"
  },
  {
    "text": "As it happens, the default\nvalue for that is some tiny number-- I forget what it is--",
    "start": "1909290",
    "end": "1916090"
  },
  {
    "text": "such that when I run this on an\ninteresting size example, it crashes that exception.",
    "start": "1916090",
    "end": "1922740"
  },
  {
    "text": "So all I'm doing here\nis saying no, I know what I'm doing. It's OK to recurse to\na greater depth.",
    "start": "1922740",
    "end": "1929620"
  },
  {
    "text": "And I've set it to 2000\nhere, which is plenty for what I need. I could set it to 20,000.",
    "start": "1929620",
    "end": "1935390"
  },
  {
    "text": "I could set it to 50,000. Again, if you're writing a\nserious program, you'll",
    "start": "1935390",
    "end": "1941940"
  },
  {
    "text": "probably find that the default\nvalue for the depth of recursion is not enough, and\nyou might want to reset it.",
    "start": "1941940",
    "end": "1949410"
  },
  {
    "text": "I don't expect you to remember\nhow to do this. I expect you to remember\nthat it's possible.",
    "start": "1949410",
    "end": "1954540"
  },
  {
    "text": "And if you need to do it, you\ncan Google \"recursion limit Python\" and it will tell\nyou how to change it.",
    "start": "1954540",
    "end": "1961350"
  },
  {
    "text": "But again, I've found\nin testing this, the default was too small. ",
    "start": "1961350",
    "end": "1972519"
  },
  {
    "text": "Ok. Let's go look at the code\nnow for fast solve. ",
    "start": "1972520",
    "end": "1985040"
  },
  {
    "text": "It's got the items to consider,\nwhat's available, the available weight,\nand a memo.",
    "start": "1985040",
    "end": "1992660"
  },
  {
    "text": "And I'm going to keep track\nof the number of calls. Just for pedagogical\nreasons, we'll want to review that later.",
    "start": "1992660",
    "end": "1998580"
  },
  {
    "start": "1998580",
    "end": "2007640"
  },
  {
    "text": "OK, so I'll initialize\nthe memo if it's the first time through. ",
    "start": "2007640",
    "end": "2013940"
  },
  {
    "text": "And then the first thing I'll do\nis I'm going to code what I",
    "start": "2013940",
    "end": "2020580"
  },
  {
    "start": "2015000",
    "end": "2105000"
  },
  {
    "text": "have available essentially the\nway I've coded it here-- so what items are remaining\nby using an index.",
    "start": "2020580",
    "end": "2030850"
  },
  {
    "text": "So my items are going to\nbe a set of lists. And I'm going to just sort\nof keep track of",
    "start": "2030850",
    "end": "2035909"
  },
  {
    "text": "where I am in the list--  just march through exactly the\nway I'd marched through here.",
    "start": "2035910",
    "end": "2045510"
  },
  {
    "text": "And so if the list of\nthings to consider, the length of it--",
    "start": "2045510",
    "end": "2052379"
  },
  {
    "text": "because every time the length\nis the same, it will be the same list. Since I'm systematically\nexamining a prefix.",
    "start": "2052380",
    "end": "2059690"
  },
  {
    "text": "I'm not shuffling the\nlist each time. So the length can be used\nto tell me what I've",
    "start": "2059690",
    "end": "2066250"
  },
  {
    "text": "already looked at. So if I've looked at that\nsublist before, with this",
    "start": "2066250",
    "end": "2073138"
  },
  {
    "text": "available weight, it will\nbe in the memo. And I'll just look\nup the solution--",
    "start": "2073139",
    "end": "2079658"
  },
  {
    "text": "result equals memo of\n[UNINTELLIGIBLE] to consider avail. So those will be my keys\nfor my dictionary.",
    "start": "2079659",
    "end": "2090560"
  },
  {
    "text": "The key will be a pair of\nessentially which items I have left to consider, which is coded\nby a number, and the",
    "start": "2090560",
    "end": "2100900"
  },
  {
    "text": "amount of weight,\nanother number. Or if there's nothing left to\nconsider, or there's no weight",
    "start": "2100900",
    "end": "2109190"
  },
  {
    "start": "2105000",
    "end": "2225000"
  },
  {
    "text": "available, then I'll return\n0 and the empty tuple--",
    "start": "2109190",
    "end": "2116650"
  },
  {
    "text": "no value, didn't\ntake anything.  Otherwise, I'm now in the\ninteresting case.",
    "start": "2116650",
    "end": "2123810"
  },
  {
    "text": " If to consider subzero, the\nfirst one here, if the weight",
    "start": "2123810",
    "end": "2136690"
  },
  {
    "text": "of that is greater than what I\nhave available, then I know I",
    "start": "2136690",
    "end": "2144990"
  },
  {
    "text": "can't take it. Right? So I'll just lop it off and call\nfast solve recursively",
    "start": "2144990",
    "end": "2154050"
  },
  {
    "text": "with the remaining list-- same old value of avail\nand the same old memo.",
    "start": "2154050",
    "end": "2160120"
  },
  {
    "text": " Otherwise, well now I have an\noption of taking the first",
    "start": "2160120",
    "end": "2167849"
  },
  {
    "text": "element in the list. I'll set the item to that\nelement, and I'll",
    "start": "2167850",
    "end": "2173369"
  },
  {
    "text": "consider taking it. So I'll call fast solve\nwith to consider",
    "start": "2173370",
    "end": "2183040"
  },
  {
    "text": "without the first item. But the amount of weight will\nbe available now is what was",
    "start": "2183040",
    "end": "2190570"
  },
  {
    "text": "available before minus the\nweight of that item. This is my left branch,\nif you will, where I",
    "start": "2190570",
    "end": "2197000"
  },
  {
    "text": "decide to take the item. And so now I'm solving\na smaller problem.",
    "start": "2197000",
    "end": "2203280"
  },
  {
    "text": "The list is smaller, and\nI have less weight. ",
    "start": "2203280",
    "end": "2209280"
  },
  {
    "text": "The next thing I'll do is\nconsider not taking the item.",
    "start": "2209280",
    "end": "2215440"
  },
  {
    "text": "So I'll call fast solve\nagain with the remainder of the list.",
    "start": "2215440",
    "end": "2220740"
  },
  {
    "text": "But avail and memo\nare not changed. That's the right branch. And you'll remember our decision\ntree the right branch",
    "start": "2220740",
    "end": "2228500"
  },
  {
    "start": "2225000",
    "end": "2405000"
  },
  {
    "text": "avail and weight were\nnever changed. Because I elected not\nto take that item.",
    "start": "2228500",
    "end": "2235619"
  },
  {
    "text": "Then I'll just choose the\nbetter of the two alternatives, as before. ",
    "start": "2235620",
    "end": "2242090"
  },
  {
    "text": "And when I'm done, I'll update\nthe memo with the solution to",
    "start": "2242090",
    "end": "2247420"
  },
  {
    "text": "the problem I just solved. All right?",
    "start": "2247420",
    "end": "2253190"
  },
  {
    "text": "So it's exactly the same as\nthe recursive solution you",
    "start": "2253190",
    "end": "2258740"
  },
  {
    "text": "looked at a few weeks ago. Except I've added this notion\nof a memo to keep track of",
    "start": "2258740",
    "end": "2266619"
  },
  {
    "text": "what we've already done. Well let's see how\nwell it works. ",
    "start": "2266620",
    "end": "2273200"
  },
  {
    "text": "So I've got this test program. ",
    "start": "2273200",
    "end": "2278930"
  },
  {
    "text": "Just so things are repeatable,\nI'd set the C to 0 --",
    "start": "2278930",
    "end": "2284240"
  },
  {
    "text": "doesn't matter what I set it to,\nthis just says instead of getting a random value each\ntime, I'll get the same C so",
    "start": "2284240",
    "end": "2292540"
  },
  {
    "text": "I'll get the same sequence of\npseudo-random numbers-- makes it easier to debug.",
    "start": "2292540",
    "end": "2297770"
  },
  {
    "text": " I'll have this global\nvariable num calls.",
    "start": "2297770",
    "end": "2303660"
  },
  {
    "text": "I'm arbitrarily setting the\ncapacity to eight times the maximum weight.",
    "start": "2303660",
    "end": "2308960"
  },
  {
    "text": "So I'm saying the maximum\nvalue of an item is 10. The maximum weight is 10.",
    "start": "2308960",
    "end": "2314820"
  },
  {
    "text": "This just says runs slowly is\nfalse, as in don't run the",
    "start": "2314820",
    "end": "2321020"
  },
  {
    "text": "slow version. Run only the fast version. We'll come back to that. I set the capacity of\nthe Knapsack to 8",
    "start": "2321020",
    "end": "2327740"
  },
  {
    "text": "times the max weight. And then for the number of\nitems-- and I'm just going to",
    "start": "2327740",
    "end": "2333140"
  },
  {
    "text": "go through a different\nnumber of items, 4, 8 16, up to 1024--",
    "start": "2333140",
    "end": "2338930"
  },
  {
    "text": "I'm going to call build\nmany items. Again, we've seen this\nprogram before. That just takes a number of\nitems, a maximum value, and a",
    "start": "2338930",
    "end": "2346340"
  },
  {
    "text": "maximum weight, and builds some\nset of items, choosing",
    "start": "2346340",
    "end": "2351430"
  },
  {
    "text": "the values and weights at random\nfrom the ones we've offered it.",
    "start": "2351430",
    "end": "2357760"
  },
  {
    "text": "This saves me. I wasn't going to type a\nset of 1024 items, I guarantee you that. ",
    "start": "2357760",
    "end": "2365030"
  },
  {
    "text": "If it runs slowly, then I'm\ngoing to test it on both fast",
    "start": "2365030",
    "end": "2370290"
  },
  {
    "text": "solve and solve. Notice that these are the names\nof the functions, not",
    "start": "2370290",
    "end": "2376390"
  },
  {
    "text": "invocations of the functions. Because remember functions,\nlike everything else in Python, are just objects.",
    "start": "2376390",
    "end": "2383640"
  },
  {
    "text": "Otherwise, my tests will be\nonly the tuple fast solve.",
    "start": "2383640",
    "end": "2389450"
  },
  {
    "text": "And then for each function in\ntests, I'm going to set the number of calls to 0.",
    "start": "2389450",
    "end": "2394530"
  },
  {
    "text": "I'm going to load up a timer,\njust because I'm curious how long it takes.",
    "start": "2394530",
    "end": "2399790"
  },
  {
    "text": "And then I'll call the func. Notice again, getting back to\nwhat we talked about before,",
    "start": "2399790",
    "end": "2406570"
  },
  {
    "start": "2405000",
    "end": "3219000"
  },
  {
    "text": "both fast solve and\nsolve get called with the same arguments.",
    "start": "2406570",
    "end": "2412690"
  },
  {
    "text": "I could not have done this\ntrick if fast solve had required an extra parameter. ",
    "start": "2412690",
    "end": "2420620"
  },
  {
    "text": "And then I'll just see\nhow well it did. So let's start with this\nequal to true.",
    "start": "2420620",
    "end": "2436070"
  },
  {
    "text": "So in that case we'll\ntest both of them. And let's see how we do. ",
    "start": "2436070",
    "end": "2449500"
  },
  {
    "text": "So it's chugging along.  And we see that if I have 4\nitems, fast solve made 29",
    "start": "2449500",
    "end": "2457980"
  },
  {
    "text": "calls, took this much time. The good news, by the way,\nyou'll notice that fast solve",
    "start": "2457980",
    "end": "2463740"
  },
  {
    "text": "and solve gave me the same\nvalue each time.",
    "start": "2463740",
    "end": "2468890"
  },
  {
    "text": "We would hope so, right? Because they're both supposed\nto find an optimal solution.",
    "start": "2468890",
    "end": "2474640"
  },
  {
    "text": "They could find different\nsets of items. That would be OK. But they better add up\nto the same value.",
    "start": "2474640",
    "end": "2479680"
  },
  {
    "start": "2479680",
    "end": "2485240"
  },
  {
    "text": "But we seem to be stuck here. So you'll notice at 16,\nSolve made 131,000",
    "start": "2485240",
    "end": "2492869"
  },
  {
    "text": "calls, fast solve 3,500-- only took a third of a second.",
    "start": "2492870",
    "end": "2498440"
  },
  {
    "text": "But we seem to be kind\nof stuck at-- actually, fast solve\nonly made 1,200.",
    "start": "2498440",
    "end": "2504710"
  },
  {
    "text": "At 32, fast solve made\n3,500 calls. But solve seems to be stuck.",
    "start": "2504710",
    "end": "2510920"
  },
  {
    "text": " Should this be a shocker that\ngoing from 16 to 32 made a big",
    "start": "2510920",
    "end": "2517290"
  },
  {
    "text": "difference? Well remember here we're talking\nabout 2 to the 16",
    "start": "2517290",
    "end": "2523859"
  },
  {
    "text": "possibilities to investigate,\nwhich is not a huge number. But now we're at 2 to the 32,\nwhich is quite a large number.",
    "start": "2523860",
    "end": "2533060"
  },
  {
    "text": "And so we could wait quite\na long time for solve to",
    "start": "2533060",
    "end": "2538670"
  },
  {
    "text": "actually finish. And in fact, we're not going\nto wait that long.",
    "start": "2538670",
    "end": "2545290"
  },
  {
    "text": "We'll interrupt it. So let's see how well\nfast solve works.",
    "start": "2545290",
    "end": "2551615"
  },
  {
    "start": "2551615",
    "end": "2561930"
  },
  {
    "text": "We just call that. So we'll set this to false. It says don't run slowly, i.e.",
    "start": "2561930",
    "end": "2567060"
  },
  {
    "text": "Don't call solve. ",
    "start": "2567060",
    "end": "2580200"
  },
  {
    "text": "So not only did we not get stuck\nat 32 items way up here,",
    "start": "2580200",
    "end": "2585450"
  },
  {
    "text": "we didn't get stuck\nat 1024 items.",
    "start": "2585450",
    "end": "2590650"
  },
  {
    "text": "Huge difference, right? Instead of only being able to\nprocess a set of 16, we can",
    "start": "2590650",
    "end": "2596680"
  },
  {
    "text": "process a set of over 1,000. And in fact, I don't know how\nmuch higher we can go. I didn't try anything bigger.",
    "start": "2596680",
    "end": "2603770"
  },
  {
    "text": "But even this-- big difference between getting\nstuck here and not getting stuck here.",
    "start": "2603770",
    "end": "2610490"
  },
  {
    "text": "And in fact, not only did\nnot get stuck, it was only two seconds.",
    "start": "2610490",
    "end": "2616350"
  },
  {
    "text": "So let's ask ourselves\nthe question-- how fast is this growing? ",
    "start": "2616350",
    "end": "2624170"
  },
  {
    "text": "Not very fast-- more or less, what we see\nhere-- and this is not",
    "start": "2624170",
    "end": "2629410"
  },
  {
    "text": "something we can guarantee. But in this case, what we see is\nas we double the number of",
    "start": "2629410",
    "end": "2635290"
  },
  {
    "text": "items, the number of calls\nkind of doubles as well.",
    "start": "2635290",
    "end": "2641000"
  },
  {
    "text": " So we're actually growing\npretty slowly.",
    "start": "2641000",
    "end": "2647520"
  },
  {
    "start": "2647520",
    "end": "2653080"
  },
  {
    "text": "Well, OK that's good. But suppose we want to look at\nit a little bit more carefully",
    "start": "2653080",
    "end": "2660359"
  },
  {
    "text": "and consider the question of\nwhat does govern the running",
    "start": "2660360",
    "end": "2665370"
  },
  {
    "text": "time of fast solve. ",
    "start": "2665370",
    "end": "2670640"
  },
  {
    "text": "Well we know that looking\nthings up in the dict is constant time.",
    "start": "2670640",
    "end": "2677270"
  },
  {
    "text": "So that's OK. So what's going to govern it is\nevery time we have to add",
    "start": "2677270",
    "end": "2685850"
  },
  {
    "text": "an element to the memo, it's\ngoing to slow us down. Because you're gonna have\nto solve a problem.",
    "start": "2685850",
    "end": "2692250"
  },
  {
    "text": "Every time we can just look\nsomething up in the memo, we'll get our answer back\ninstantaneously.",
    "start": "2692250",
    "end": "2697444"
  },
  {
    "text": " So if we think about the running\ntime, it's going to be",
    "start": "2697445",
    "end": "2703060"
  },
  {
    "text": "related to how many different\nkey value pairs might we have",
    "start": "2703060",
    "end": "2711110"
  },
  {
    "text": "to compute for the memo. Well what governs that?",
    "start": "2711110",
    "end": "2716680"
  },
  {
    "text": "So we know that the keys in\nthe memo are pairs of to",
    "start": "2716680",
    "end": "2723390"
  },
  {
    "text": "consider and avail.",
    "start": "2723390",
    "end": "2729039"
  },
  {
    "text": " And so we know that the number\nof possible different keys",
    "start": "2729040",
    "end": "2741300"
  },
  {
    "text": "will be the number of possible\nvalues in to consider, multiplied by the number of\npossible values of avail.",
    "start": "2741300",
    "end": "2750400"
  },
  {
    "text": "Right?  How many possible values of\nto consider are there?",
    "start": "2750400",
    "end": "2756150"
  },
  {
    "text": " What governs that?",
    "start": "2756150",
    "end": "2763530"
  },
  {
    "text": "That's the easy question. Number of items, right?",
    "start": "2763530",
    "end": "2769420"
  },
  {
    "start": "2769420",
    "end": "2776780"
  },
  {
    "text": "Because I'm just marching across\nthis list, chopping off one item at a time.",
    "start": "2776780",
    "end": "2783200"
  },
  {
    "text": "At most I can chop off\nn items, if the list is of length n. ",
    "start": "2783200",
    "end": "2791920"
  },
  {
    "text": "Avail is more complicated. What does avail depend upon? ",
    "start": "2791920",
    "end": "2802079"
  },
  {
    "text": "It depends upon, well, the\ninitial available weight.",
    "start": "2802080",
    "end": "2807950"
  },
  {
    "text": " If the initial available weight\nis 0, well then it's",
    "start": "2807950",
    "end": "2815000"
  },
  {
    "text": "gonna end really quickly. If it's really big, I might\nhave to churn longer.",
    "start": "2815000",
    "end": "2824640"
  },
  {
    "text": "But it also depends-- and this is the key thing--",
    "start": "2824640",
    "end": "2829859"
  },
  {
    "text": "on the number of different\nweights, that sets of items",
    "start": "2829860",
    "end": "2853470"
  },
  {
    "text": "can add up to. ",
    "start": "2853470",
    "end": "2863310"
  },
  {
    "text": "Because you'll recall the whole\nsecret here was that we said that different sets of\nitems could actually have the",
    "start": "2863310",
    "end": "2870770"
  },
  {
    "text": "same total weight. And that's why we had this\nbusiness of overlapping",
    "start": "2870770",
    "end": "2877390"
  },
  {
    "text": "subproblems.  Now here, since I only had 10\npossible weights, that tells",
    "start": "2877390",
    "end": "2888660"
  },
  {
    "text": "me that I can't have very many\ndifferent combinations. ",
    "start": "2888660",
    "end": "2893800"
  },
  {
    "text": "Right? That any set of say, one item\nhas to be 0 through 10, or 0",
    "start": "2893800",
    "end": "2901510"
  },
  {
    "text": "through 9, I forget\nwhich it was. But either way, that means\nthat alI only have 10",
    "start": "2901510",
    "end": "2909369"
  },
  {
    "text": "different possible sums\nfor sets of length 1.",
    "start": "2909370",
    "end": "2916690"
  },
  {
    "text": "Whereas if my weights ranged\nover 100, I would have 100 different possibilities\nfor sets of length 1.",
    "start": "2916690",
    "end": "2925000"
  },
  {
    "text": "So that's an important factor\nin governing it. ",
    "start": "2925000",
    "end": "2939000"
  },
  {
    "text": "So it's a complicated situation,\nbut just to see what happens, try and remember\nhow long this took for 1024.",
    "start": "2939000",
    "end": "2949110"
  },
  {
    "text": "It took 2.2 seconds. I'm going to allow 20\ndifferent weights. ",
    "start": "2949110",
    "end": "2957440"
  },
  {
    "text": "And let's see what happens. ",
    "start": "2957440",
    "end": "2971640"
  },
  {
    "text": "It took roughly twice as long. ",
    "start": "2971640",
    "end": "2978650"
  },
  {
    "text": "So that's sort of what we\nwould have expected. So again, we're going to\nsee the running time is related to that.",
    "start": "2978650",
    "end": "2987769"
  },
  {
    "text": "So we can see that\nit's actually a fairly complicated thing. Suppose I did something really\nnasty and went up here where I",
    "start": "2987770",
    "end": "3002680"
  },
  {
    "text": "built my items-- ",
    "start": "3002680",
    "end": "3016390"
  },
  {
    "text": "so here you'll see, when I built\nmy items I chose the weight between 1\nand max weight.",
    "start": "3016390",
    "end": "3021849"
  },
  {
    "text": " And these were all integers--",
    "start": "3021850",
    "end": "3028490"
  },
  {
    "text": "ints. Suppose instead of\nthat, I do this. ",
    "start": "3028490",
    "end": "3045160"
  },
  {
    "text": "So here after I choose my value\nbetween 1 and 10, I'm",
    "start": "3045160",
    "end": "3050780"
  },
  {
    "text": "going to multiply it by some\nrandom number between 0 and 1. ",
    "start": "3050780",
    "end": "3058340"
  },
  {
    "text": "We've all seen random.random. So now how many possible\ndifferent weights",
    "start": "3058340",
    "end": "3063770"
  },
  {
    "text": "am I going to have?  A huge number, right?",
    "start": "3063770",
    "end": "3070900"
  },
  {
    "text": "The number of random numbers,\nreal floats between 0 and 1 is",
    "start": "3070900",
    "end": "3077680"
  },
  {
    "text": "close to infinite, right? And so in fact, now I'm going\nto see that with reasonable",
    "start": "3077680",
    "end": "3084030"
  },
  {
    "text": "probability, every single item\nwill have a different weight.",
    "start": "3084030",
    "end": "3090480"
  },
  {
    "text": "And so, things adding up to the\nsame could still happen, even if they're all different.",
    "start": "3090480",
    "end": "3095840"
  },
  {
    "text": "But it's not very probable. So let's see what happens\nwhen I run it now.",
    "start": "3095840",
    "end": "3101750"
  },
  {
    "start": "3101750",
    "end": "3111170"
  },
  {
    "text": "It's slowing down\npretty quickly.  Pretty much where the other\none stopped right?",
    "start": "3111170",
    "end": "3118420"
  },
  {
    "text": "Remember we got through\n16 with Slowsolve but not through 32?",
    "start": "3118420",
    "end": "3124450"
  },
  {
    "text": "Because effectively, I've now\nreduced the fast solve to the",
    "start": "3124450",
    "end": "3129859"
  },
  {
    "text": "same as solve. It will never find anything\nin the memo, so it's doing exactly the same amount of\nwork that solve did.",
    "start": "3129860",
    "end": "3136980"
  },
  {
    "text": "And it will run very slowly.  OK, life is hard.",
    "start": "3136980",
    "end": "3143850"
  },
  {
    "text": "But this is what you'd expect,\nbecause deep down we know the 0-1 knapsack problem is\nexponential, inherently",
    "start": "3143850",
    "end": "3153640"
  },
  {
    "text": "exponential. And while I think dynamic\nprogramming is kind of miraculous how well it usually\nworks, it's not miraculous in",
    "start": "3153640",
    "end": "3163180"
  },
  {
    "text": "the liturgical sense, right? It's not actually performing\na miracle in solving an exponential problem\nin linear time.",
    "start": "3163180",
    "end": "3171140"
  },
  {
    "text": "It can in all things go bad. The exponential, and that's\nwhat it is here.",
    "start": "3171140",
    "end": "3177270"
  },
  {
    "text": "This kind of algorithm is called\npseudo-polynomial. ",
    "start": "3177270",
    "end": "3185440"
  },
  {
    "text": "It kind of runs in polynomial\ntime, but not when things are",
    "start": "3185440",
    "end": "3191380"
  },
  {
    "text": "really bad.  And I won't go into the details\nof pseudo-polynomial,",
    "start": "3191380",
    "end": "3198960"
  },
  {
    "text": "but if any of you are in Course\n6, you'll hear about it in 6.006 and 6.046.",
    "start": "3198960",
    "end": "3205039"
  },
  {
    "text": "OK, we can adjourn. I'll see you all on Thursday. ",
    "start": "3205040",
    "end": "3212420"
  },
  {
    "text": "And we're not going to\nwait for this to finish, because it won't. ",
    "start": "3212420",
    "end": "3219988"
  }
]