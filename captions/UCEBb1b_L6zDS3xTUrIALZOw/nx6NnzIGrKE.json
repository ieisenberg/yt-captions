[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "7410"
  },
  {
    "text": "offer high-quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "7410",
    "end": "13960"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at ocw.mit.edu.",
    "start": "13960",
    "end": "19140"
  },
  {
    "text": " PROFESSOR: By way of review,\nwe're going to",
    "start": "19140",
    "end": "25110"
  },
  {
    "text": "start off with loops. So, what are two loops that\nwe've covered in lecture or",
    "start": "25110",
    "end": "31990"
  },
  {
    "text": "two types of loops? AUDIENCE: FOR and WHILE. ",
    "start": "31990",
    "end": "37930"
  },
  {
    "text": "PROFESSOR: OK. Yeah. FOR and WHILE. I'm going to start with WHILE\nloops because that's what I have first.",
    "start": "37930",
    "end": "42940"
  },
  {
    "text": " Can someone walk me through the\nsyntax of a WHILE loop? ",
    "start": "42940",
    "end": "52700"
  },
  {
    "text": "AUDIENCE: WHILE condition. PROFESSOR: WHILE condition and\nwhat type is this condition? AUDIENCE: [INAUDIBLE]",
    "start": "52700",
    "end": "59160"
  },
  {
    "text": "PROFESSOR: OK. And then I have-- AUDIENCE: [INAUDIBLE] PROFESSOR: And then a block\nof code, indicated by",
    "start": "59160",
    "end": "68990"
  },
  {
    "text": "indentation. OK. Next question is, what\ndoes this code do?",
    "start": "68990",
    "end": "75347"
  },
  {
    "start": "75347",
    "end": "82652"
  },
  {
    "text": "AUDIENCE:Executes the loop and\nreturns Boolean values. PROFESSOR: Right. That's a little bit\ntoo high level.",
    "start": "82652",
    "end": "89490"
  },
  {
    "text": "Specifically, what does\nthis loop do? AUDIENCE: Prints the even\nnumbers from 2 to 10.",
    "start": "89490",
    "end": "94663"
  },
  {
    "text": "PROFESSOR: Perfect. ",
    "start": "94663",
    "end": "104570"
  },
  {
    "text": "That's exactly the kind of\ncomment we're looking for. When you're doing your problem\nsets or you're just coding in general, you want to have a\ncomment that describes in an",
    "start": "104570",
    "end": "113560"
  },
  {
    "text": "abstract way what's going on\nin the chunks of code. You don't want to have\na comment that says",
    "start": "113560",
    "end": "120610"
  },
  {
    "text": "assigns 2 to a. Continues looping\nuntil a is 10.",
    "start": "120610",
    "end": "129340"
  },
  {
    "text": "Comments like that aren't really\nhelpful because you can get that by reading the code. So that's exactly right.",
    "start": "129340",
    "end": "135079"
  },
  {
    "text": "It's perfect. I don't have candy to\npass out, though. Next question is what's the\ndecrementing function?",
    "start": "135080",
    "end": "141694"
  },
  {
    "start": "141695",
    "end": "147050"
  },
  {
    "text": "The way to think of a\ndecrementing function is that it's a statement that moves\nthe loop closer to",
    "start": "147050",
    "end": "153400"
  },
  {
    "text": "termination. In this case-- AUDIENCE: 10 minus a. ",
    "start": "153400",
    "end": "161800"
  },
  {
    "text": "PROFESSOR: Yeah, 10 minus\na or a plus equal 2. As we're incrementing a, we're\ngetting closer and closer to",
    "start": "161800",
    "end": "167985"
  },
  {
    "text": "10 and that's going to cause\nus to kick out of the loop. ",
    "start": "167985",
    "end": "178420"
  },
  {
    "text": "Next thing. Is a a good variable name? ",
    "start": "178420",
    "end": "186409"
  },
  {
    "text": "The answer is no, otherwise,\nI wouldn't have asked it. But a better variable name\nmight be even_number.",
    "start": "186410",
    "end": "193030"
  },
  {
    "text": " Because, instead of just a being\nan integer, now we know",
    "start": "193030",
    "end": "200140"
  },
  {
    "text": "what it's supposed to represent\nin the code.  And it becomes clearer when we\ngo to execute it or run it.",
    "start": "200140",
    "end": "211230"
  },
  {
    "start": "211230",
    "end": "217180"
  },
  {
    "text": "For loops, same thing. Could someone walk me through\nthe syntax for a FOR loop?",
    "start": "217180",
    "end": "223970"
  },
  {
    "text": " And first question, does this\nloop do the same thing as a",
    "start": "223970",
    "end": "231930"
  },
  {
    "text": "WHILE loop? ",
    "start": "231930",
    "end": "239010"
  },
  {
    "text": "If this is our WHILE\nloop, does this loop do the same thing? ",
    "start": "239010",
    "end": "245758"
  },
  {
    "text": "AUDIENCE: Yes. PROFESSOR: OK. Let's see. The WHILE loop printed out 4,\n6,8,10 and 12; this is going",
    "start": "245758",
    "end": "255060"
  },
  {
    "text": "to print out, 8 and 10. The reason is where we have\nthe increment, right?",
    "start": "255060",
    "end": "263790"
  },
  {
    "text": "If we had done this, they would\nprint out both the same.",
    "start": "263790",
    "end": "279470"
  },
  {
    "text": "A little aside. That was a bug I just caught. ",
    "start": "279470",
    "end": "284900"
  },
  {
    "text": "Someone walk me through the\nsyntax for a FOR loop. ",
    "start": "284900",
    "end": "293028"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]  PROFESSOR: A FOR keyword and\nthen what do we have here?",
    "start": "293028",
    "end": "302030"
  },
  {
    "text": "A variable of some sort. Then we have in keyword and then\nwe have this thing here.",
    "start": "302030",
    "end": "311250"
  },
  {
    "text": "We're going to get to tuples\nin a second, but this is a tuple literal.",
    "start": "311250",
    "end": "316420"
  },
  {
    "text": "And for FOR loops, a FOR loop\nrequires something that is enumerable, which means that we\ncan take one element after",
    "start": "316420",
    "end": "323530"
  },
  {
    "text": "the other and assign it\nto the variable i. ",
    "start": "323530",
    "end": "330030"
  },
  {
    "text": "FOR loops iterate over\nenumerable items.",
    "start": "330030",
    "end": "337450"
  },
  {
    "text": "Thank you. That's exactly what I\nwas talking about. If I'm speaking too low, just\njack your thumbs up.",
    "start": "337450",
    "end": "343690"
  },
  {
    "text": " This construction is\ninconvenient though.",
    "start": "343690",
    "end": "350310"
  },
  {
    "text": "If we wanted to list all\nthe numbers that we wanted to print-- 2 to 10 is not too hard.",
    "start": "350310",
    "end": "356180"
  },
  {
    "text": "But let's say we wanted\nall the even numbers between 2 and 100. I don't want to have to write\nout all 50 of those.",
    "start": "356180",
    "end": "364360"
  },
  {
    "text": "So we get to the\nrange function. You've seen this before.",
    "start": "364360",
    "end": "369770"
  },
  {
    "text": "We just haven't ever\nexplained it.  All the range function does is\nit takes between one and three",
    "start": "369770",
    "end": "377140"
  },
  {
    "text": "parameters and returns\na list of integers. So let's say that I pass\nit one parameter.",
    "start": "377140",
    "end": "385580"
  },
  {
    "text": "I'm going to give it\nthe integer 100. This is going to give\nme nothing because I",
    "start": "385580",
    "end": "391330"
  },
  {
    "text": "didn't print it out. ",
    "start": "391330",
    "end": "397020"
  },
  {
    "text": "This is going to give\nme integers 0 to 99.",
    "start": "397020",
    "end": "402254"
  },
  {
    "start": "402255",
    "end": "408710"
  },
  {
    "text": "If I give it two parameters,\nwhat it's going to do is give me? The integers between\n1 and 100.",
    "start": "408710",
    "end": "420400"
  },
  {
    "text": "In this case, it starts off\nat 1 and it gets to 99. ",
    "start": "420400",
    "end": "426050"
  },
  {
    "text": "One important point is that\nwhen you give it two parameters, the first one is\ninclusive and the second",
    "start": "426050",
    "end": "432570"
  },
  {
    "text": "parameter is exclusive.  Does everyone follow that?",
    "start": "432570",
    "end": "438640"
  },
  {
    "text": " Finally, the third form is\nwith three parameters.",
    "start": "438640",
    "end": "446669"
  },
  {
    "text": "I have a start, an end, start\ninclusive, end exclusive, and",
    "start": "446670",
    "end": "452070"
  },
  {
    "text": "then a step. This will give me all the odd\nnumbers between 1 and 100.",
    "start": "452070",
    "end": "466030"
  },
  {
    "text": "We can also go in reverse. If I want to go count down from\n100 to 1, I can give it a",
    "start": "466030",
    "end": "477120"
  },
  {
    "text": "negative step. ",
    "start": "477120",
    "end": "482570"
  },
  {
    "text": "If you want help on using the\nrange function, there's a handy command called help,\nwhich you can type in the",
    "start": "482570",
    "end": "488860"
  },
  {
    "text": "interactive prompt. ",
    "start": "488860",
    "end": "494939"
  },
  {
    "text": "This gives you the syntax\nfor using range. You can do this for any\nfunction in Python.",
    "start": "494940",
    "end": "501680"
  },
  {
    "text": "It's going to tell you,\nhere's the name. Here's a parameter start.",
    "start": "501680",
    "end": "507010"
  },
  {
    "text": "Here's a parameter stop. Here's a parameter step. This little arrow here means\nthis is what it returns, a",
    "start": "507010",
    "end": "513940"
  },
  {
    "text": "list of integers.  When you type help and you see\none of these square brackets",
    "start": "513940",
    "end": "521005"
  },
  {
    "text": "that means the perimeter\nis optional. ",
    "start": "521005",
    "end": "526560"
  },
  {
    "text": "A start is optional. Step is optional. Stop, we always have a stop.",
    "start": "526560",
    "end": "531880"
  },
  {
    "text": "We always know when we're\nstopping a range. That's why we can pass one,\ntwo, or three parameters.",
    "start": "531880",
    "end": "538815"
  },
  {
    "text": "Is anyone confused on that? AUDIENCE: If you only put stop,\nit will start with 0?",
    "start": "538815",
    "end": "545370"
  },
  {
    "text": "PROFESSOR: Right. If you only put one parameter,\nthen it will start from 0. So the start is implicit.",
    "start": "545370",
    "end": "551870"
  },
  {
    "text": " Are we good on this? ",
    "start": "551870",
    "end": "568100"
  },
  {
    "text": "So, we can code our FOR loop\nlike that, which for five",
    "start": "568100",
    "end": "574860"
  },
  {
    "text": "numbers is not too inconvenient,\nor is convenient. But if we have 500 numbers, it\nmakes it a lot easier to just",
    "start": "574860",
    "end": "583440"
  },
  {
    "text": "change one end point than\nit is to type in 500 numbers, right?",
    "start": "583440",
    "end": "588850"
  },
  {
    "text": " OK. ",
    "start": "588850",
    "end": "600628"
  },
  {
    "text": "AUDIENCE: Can you create\na range for floats? So let's say you want to\ndo it by float size?",
    "start": "600628",
    "end": "606095"
  },
  {
    "text": "PROFESSOR: That's\na good question. We should try it. Why don't we give it a shot? ",
    "start": "606095",
    "end": "615160"
  },
  {
    "text": "The question was can we make\na range of floats?  Let's try 1.02 to 10.0.",
    "start": "615160",
    "end": "628200"
  },
  {
    "text": "It'll give us an\nanswer, right? But it also gives\nus a warning. It says that an integer\nargument is expected.",
    "start": "628200",
    "end": "636150"
  },
  {
    "text": "Let's say I do this. ",
    "start": "636150",
    "end": "642250"
  },
  {
    "text": "Will this work? What's it's going to\ndo is it's going to truncate the floats.",
    "start": "642250",
    "end": "648550"
  },
  {
    "text": "It's going to truncate the start\nto 1 and it's going to truncate the end to 10. Then it'll just return the\nintegers as required.",
    "start": "648550",
    "end": "657000"
  },
  {
    "text": "So you can, but it doesn't\nwork the way you think it would. ",
    "start": "657000",
    "end": "665970"
  },
  {
    "text": "Moving on, you hit tuples\nin lecture this week.",
    "start": "665970",
    "end": "672329"
  },
  {
    "text": "So we're done with the\nold review stuff.",
    "start": "672330",
    "end": "678080"
  },
  {
    "text": "Can anyone tell me\nwhat a tuple is? ",
    "start": "678080",
    "end": "687800"
  },
  {
    "text": "It's a non-scalar data type\nthat can hold many items.",
    "start": "687800",
    "end": "695893"
  },
  {
    "text": " What does non-scalar mean? ",
    "start": "695893",
    "end": "705260"
  },
  {
    "text": "AUDIENCE: It's multiple elements\nthat you can search individually.",
    "start": "705260",
    "end": "710420"
  },
  {
    "text": "AUDIENCE: It's a field that\nyou can hold only one value at a time. PROFESSOR: You're both right. A scalar can hold only one\nelement at a time.",
    "start": "710420",
    "end": "718130"
  },
  {
    "text": "A non-scalar can hold more than\none element at a time. Tuples are actually the\nsecond scalar data",
    "start": "718130",
    "end": "724910"
  },
  {
    "text": "type that we've seen. A string is the first. A string can have multiple\ncharacters.",
    "start": "724910",
    "end": "730255"
  },
  {
    "text": " Tuples are flexible. We can have tuples of numbers. ",
    "start": "730255",
    "end": "738130"
  },
  {
    "text": "This syntax, the parentheses\nwith a set of elements",
    "start": "738130",
    "end": "743350"
  },
  {
    "text": "separated by commas,\nthis is the literal syntax for a tuple.",
    "start": "743350",
    "end": "749390"
  },
  {
    "text": "All we're saying is that my\ntuple of numbers has the approximation of\npi, 2, 1, -100.",
    "start": "749390",
    "end": "756750"
  },
  {
    "text": "We can have tuples of strings. We can have tuples of anything,\nbut you'll get to",
    "start": "756750",
    "end": "762600"
  },
  {
    "text": "that in a second.  AUDIENCE: Can you mix the data\ntypes inside of that?",
    "start": "762600",
    "end": "770589"
  },
  {
    "text": "PROFESSOR: Yes, we're going\nto get to that.  The question was, can\nyou mix data types?",
    "start": "770590",
    "end": "777230"
  },
  {
    "text": "The answer is yes. We'll get to that in a second. To access individual elements\nof a tuple, we do something",
    "start": "777230",
    "end": "785870"
  },
  {
    "text": "called indexing. We specify an index by-- if I have tuple_of_numbers, my\nvariable name, I have a left",
    "start": "785870",
    "end": "794350"
  },
  {
    "text": "square bracket and a right\nsquare bracket, and I have an integer in between.",
    "start": "794350",
    "end": "800440"
  },
  {
    "text": "This would give me the item\nin the tuple that exists at index 0.",
    "start": "800440",
    "end": "807490"
  },
  {
    "text": "Tuples are indexed starting at\n0 and in increments of 1.",
    "start": "807490",
    "end": "815520"
  },
  {
    "text": "When I say tuple_of_numbers[0],\nwhat should this print out?",
    "start": "815520",
    "end": "820589"
  },
  {
    "text": "AUDIENCE: 3.14159. PROFESSOR: Right. It will print out 3.14159.",
    "start": "820590",
    "end": "825900"
  },
  {
    "text": "Now if I change this to 1,\nwhat will this print out? AUDIENCE: 2.",
    "start": "825900",
    "end": "831140"
  },
  {
    "text": "PROFESSOR: Exactly. It doesn't matter what data type\nis contained in tuple.",
    "start": "831140",
    "end": "839120"
  },
  {
    "text": "If it's string, it'll just print\nout whatever's here,",
    "start": "839120",
    "end": "844339"
  },
  {
    "text": "which is 'what'. You can also use negative\nindices.",
    "start": "844340",
    "end": "851260"
  },
  {
    "text": "Negative indices tell Python\nthat I want to go to one past the end of the tuple.",
    "start": "851260",
    "end": "858360"
  },
  {
    "text": "In this case, tuple_of_\nstrings, I'm out here somewhere, and then walk\nback 1, or however",
    "start": "858360",
    "end": "864259"
  },
  {
    "text": "many the integer is. I have here tuple_of_strings\nminus 1. Python's going to go to\nsomewhere around here and then",
    "start": "864260",
    "end": "872480"
  },
  {
    "text": "walk back one and\ngive me 'name'. ",
    "start": "872480",
    "end": "880890"
  },
  {
    "text": "Now what if I do minus 3? ",
    "start": "880890",
    "end": "886910"
  },
  {
    "text": "What's that going\nto print out? Is. ",
    "start": "886910",
    "end": "897220"
  },
  {
    "text": "Let's see who is paying\nattention. What's this going to do? AUDIENCE: [INAUDIBLE]",
    "start": "897220",
    "end": "903440"
  },
  {
    "text": " AUDIENCE: My name,\nor name, rather?",
    "start": "903440",
    "end": "909490"
  },
  {
    "text": "PROFESSOR: Remember we index\ntuples at 0, right? AUDIENCE: That's going\nto give an error. PROFESSOR: Exactly.",
    "start": "909490",
    "end": "915460"
  },
  {
    "text": "It's going to tell us\nindex out of range. We have four elements in\ntuple strings 0, 1, 2,",
    "start": "915460",
    "end": "924210"
  },
  {
    "text": "3, oops, we're off. ",
    "start": "924210",
    "end": "929600"
  },
  {
    "text": "You can get outside of a\ntuple and get an error. ",
    "start": "929600",
    "end": "934660"
  },
  {
    "text": "To avoid that-- sorry? AUDIENCE: The thing is when you\nsaid for tuple_of_numbers, you said 1 and 3.141, number,\nwhich would technically be 0",
    "start": "934660",
    "end": "944970"
  },
  {
    "text": "in this case, wouldn't it? PROFESSOR: No, I switched it. AUDIENCE: You switched it. PROFESSOR: Yeah. ",
    "start": "944970",
    "end": "951190"
  },
  {
    "text": "Just to make you feel better-- AUDIENCE: I see it now. PROFESSOR: You got it? OK.",
    "start": "951190",
    "end": "957330"
  },
  {
    "text": " It's always possible that\nI made an error.",
    "start": "957330",
    "end": "963230"
  },
  {
    "text": " In your code, in order to avoid\nthat, you can check",
    "start": "963230",
    "end": "969080"
  },
  {
    "text": "yourself by getting the length\nof tuple_of_numbers. So there's a function len. ",
    "start": "969080",
    "end": "977540"
  },
  {
    "text": "It's going to tell us that tuple_of_numbers has 6 elements. We can count them:\n1, 2, 3, 4, 5, 6.",
    "start": "977540",
    "end": "984800"
  },
  {
    "text": "What's the last index\nof this tuple?",
    "start": "984800",
    "end": "990110"
  },
  {
    "text": "5, right? ",
    "start": "990110",
    "end": "996500"
  },
  {
    "text": "Back to your question, tuples\ncan hold different data types. ",
    "start": "996500",
    "end": "1009290"
  },
  {
    "text": "They can hold data types that\nare different from each other. I'm wording that improperly.",
    "start": "1009290",
    "end": "1016389"
  },
  {
    "text": "So, here we have a float\nand three strings. This is a heterogeneous\ndata structure.",
    "start": "1016390",
    "end": "1022750"
  },
  {
    "text": "A homogeneous data structure\nwould be one that you would say only hold ints only\nholds floats.",
    "start": "1022750",
    "end": "1029069"
  },
  {
    "text": "But tuples are very flexible. So, we have a float here\nand some strings. Then you could also\nhave tuples that",
    "start": "1029069",
    "end": "1035369"
  },
  {
    "text": "contain other tuples.  In this case, how many\nelements does",
    "start": "1035369",
    "end": "1044260"
  },
  {
    "text": "tuple_of_tuples have? AUDIENCE: 3. PROFESSOR: 3.",
    "start": "1044260",
    "end": "1051430"
  },
  {
    "text": "The first element is a tuple,\nthe second element is 'got',",
    "start": "1051430",
    "end": "1056740"
  },
  {
    "text": "and the third element\nis 'real'.  What should this print out?",
    "start": "1056740",
    "end": "1063865"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: Yeah. ",
    "start": "1063865",
    "end": "1070370"
  },
  {
    "text": "I had to sanitize that quote. AUDIENCE: Why does it print\nout the strings? PROFESSOR: Python's behavior,\nwhen it sees a tuple data type",
    "start": "1070370",
    "end": "1079270"
  },
  {
    "text": "and you call it with the print\nstatement, is it represents as a string a tuple the\nway you would",
    "start": "1079270",
    "end": "1086179"
  },
  {
    "text": "literally write out a tuple.",
    "start": "1086180",
    "end": "1091680"
  },
  {
    "text": "'Stuff, just' is a tuple\nwith the two strings 'stuff' and 'just'. Python is going to print out the\nliteral representation of",
    "start": "1091680",
    "end": "1101679"
  },
  {
    "text": "that tuple.  Another way to try and explain\nit, let's say that I print out",
    "start": "1101680",
    "end": "1112640"
  },
  {
    "text": "the entire tuple. What should this look like?",
    "start": "1112640",
    "end": "1117760"
  },
  {
    "text": "Well, It's going to be\njust the literal representation of the tuple. ",
    "start": "1117760",
    "end": "1127600"
  },
  {
    "text": "What does it mean for the data\ntype to be immutable? ",
    "start": "1127600",
    "end": "1139150"
  },
  {
    "text": "AUDIENCE: You can't change it. You can't add another\nelement to it? PROFESSOR: You can't\nchange it. If I try to change the first\nelement of tuple_of_numbers,",
    "start": "1139150",
    "end": "1149270"
  },
  {
    "text": "it's going to tell me\nit doesn't support-- or Python's going to tell me\nit doesn't support item assignment.",
    "start": "1149270",
    "end": "1155510"
  },
  {
    "text": "You'll see this error. ",
    "start": "1155510",
    "end": "1169010"
  },
  {
    "text": "Tuples support something called\nslicing, which means that if I have a\ntuple_of_numbers",
    "start": "1169010",
    "end": "1178059"
  },
  {
    "text": "and I give it a-- where I normally put just a\nsingle integer for an index, if I give it a start index and\nan end index, separated by",
    "start": "1178060",
    "end": "1187149"
  },
  {
    "text": "this colon, Python's going to\nget the item at index 1 to",
    "start": "1187150",
    "end": "1194060"
  },
  {
    "text": "whatever this end element\nis minus 1. It helps if I just\nprint it out.",
    "start": "1194060",
    "end": "1202180"
  },
  {
    "text": "To make it a little bit\neasier to follow. ",
    "start": "1202180",
    "end": "1212259"
  },
  {
    "text": "I've said I've told Python that\nI want a slice out of this tuple from 1 to 3.",
    "start": "1212260",
    "end": "1218640"
  },
  {
    "text": "What Python's going to go do is\nlook into tuple_of_numbers.",
    "start": "1218640",
    "end": "1223960"
  },
  {
    "text": "This is element 0. This is index 1; it's\ngoing to pull in 2.",
    "start": "1223960",
    "end": "1229490"
  },
  {
    "text": "This is index 2; i it's\ngoing to pull in 1. Then 3--",
    "start": "1229490",
    "end": "1235200"
  },
  {
    "text": "in Python, we go 1 past the end\nof the range that we want.",
    "start": "1235200",
    "end": "1240730"
  },
  {
    "text": "It's going to return\na tuple of 2, 1. This is slicing a tuple. ",
    "start": "1240730",
    "end": "1248340"
  },
  {
    "text": "Anyone confused by that? No? Wow. ",
    "start": "1248340",
    "end": "1255270"
  },
  {
    "text": "There are many different ways\nthat we can slice a tuple. We can have an implicit start.",
    "start": "1255270",
    "end": "1261320"
  },
  {
    "text": "If you see this, where there's\nno number before the colon,",
    "start": "1261320",
    "end": "1266519"
  },
  {
    "text": "that tells Python start\nat index 0. ",
    "start": "1266520",
    "end": "1272760"
  },
  {
    "text": "Then, in complimentary fashion,\nif you see this,",
    "start": "1272760",
    "end": "1279820"
  },
  {
    "text": "where you have an integer on the\nleft side and nothing on the right side, it tells Python\ngo from index 1 all the",
    "start": "1279820",
    "end": "1287120"
  },
  {
    "text": "way to the end of the tuple. ",
    "start": "1287120",
    "end": "1294410"
  },
  {
    "text": "What happens is I do this? ",
    "start": "1294410",
    "end": "1303920"
  },
  {
    "text": "What's that telling\nPython to do? AUDIENCE: [INAUDIBLE] PROFESSOR: Yeah.",
    "start": "1303920",
    "end": "1309050"
  },
  {
    "text": "It looks redundant but it will\nbecome important to us when we get to lists and something\ncalled aliasing.",
    "start": "1309050",
    "end": "1316840"
  },
  {
    "text": "What this does is it tells\nPython to take a slice that is the entire tuple. ",
    "start": "1316840",
    "end": "1324250"
  },
  {
    "text": "Then when we do these\nslices, we can also use negative indices.",
    "start": "1324250",
    "end": "1329530"
  },
  {
    "text": "This is going to tell Python\nto go from 0 to the last",
    "start": "1329530",
    "end": "1335220"
  },
  {
    "text": "element minus 1. It'll look like that. ",
    "start": "1335220",
    "end": "1345000"
  },
  {
    "text": "Everyone following? We good? AUDIENCE: It was minuses\nfrom the end-- PROFESSOR: Yeah. AUDIENCE: --of the tuple? PROFESSOR: Okay.",
    "start": "1345000",
    "end": "1352060"
  },
  {
    "text": "I wonder if this would work? I don't know. ",
    "start": "1352060",
    "end": "1357530"
  },
  {
    "text": "No, it has unexpected\nbehavior. I don't know why. I'll have to look that up.",
    "start": "1357530",
    "end": "1363470"
  },
  {
    "text": " Tuples are also--",
    "start": "1363470",
    "end": "1370670"
  },
  {
    "text": "we already said earlier\nthat they were enumerable items, right? So we can use a FOR\nloop with them. If I want to print out all the\nnumbers in tuple_of_numbers, I",
    "start": "1370670",
    "end": "1380570"
  },
  {
    "text": "have my FOR loop, my variable,\nin, and then my enumerable object.",
    "start": "1380570",
    "end": "1386090"
  },
  {
    "text": " OK?",
    "start": "1386090",
    "end": "1392050"
  },
  {
    "text": " I have a question now.",
    "start": "1392050",
    "end": "1398220"
  },
  {
    "text": " Who thinks this will work?",
    "start": "1398220",
    "end": "1403350"
  },
  {
    "text": "We know that tuples\nare immutable. ",
    "start": "1403350",
    "end": "1413427"
  },
  {
    "text": "AUDIENCE: Yeah. But you have to change\nthe inside. PROFESSOR: Right. It's going to work.",
    "start": "1413427",
    "end": "1419090"
  },
  {
    "text": " I still have print up here. ",
    "start": "1419090",
    "end": "1426960"
  },
  {
    "text": "What I'm doing is I'm taking\ntuple_of_numbers and I'm printing before. Then what I'm doing here is\nI'm telling Python to take",
    "start": "1426960",
    "end": "1435740"
  },
  {
    "text": "this tuple and this tuple and\nadd them together and reassign",
    "start": "1435740",
    "end": "1442130"
  },
  {
    "text": "it back to tuple_of_numbers.  So, It looks like I'm\nmodifying the tuple.",
    "start": "1442130",
    "end": "1451910"
  },
  {
    "text": "But in reality, what's\nhappening is I'm creating a new tuple. ",
    "start": "1451910",
    "end": "1460130"
  },
  {
    "text": "Let's say I have ton here. Ton is short for\ntuple_of_numers.",
    "start": "1460130",
    "end": "1466660"
  },
  {
    "text": "Originally, it's telling Python\nthat some chunk of",
    "start": "1466660",
    "end": "1472110"
  },
  {
    "text": "memory has a tuple\nof 1, 2, 3, 4.",
    "start": "1472110",
    "end": "1479320"
  },
  {
    "text": "When I say a statement like\nton equal ton plus another",
    "start": "1479320",
    "end": "1487090"
  },
  {
    "text": "tuple, what it's telling Python\nto do is create another chunk of memory that includes\nton, whatever's in ton, and",
    "start": "1487090",
    "end": "1498730"
  },
  {
    "text": "the other tuple.  Then this assignment statement\ntells Python that ton now",
    "start": "1498730",
    "end": "1507540"
  },
  {
    "text": "points to this new object. You had a question?",
    "start": "1507540",
    "end": "1513856"
  },
  {
    "text": "AUDIENCE:Does Python have\na garbage collector? PROFESSOR: It's an advanced\nquestion.",
    "start": "1513857",
    "end": "1519350"
  },
  {
    "text": "The question was, does Python\nhave a garbage collector to discard this memory that's\nno longer being used.",
    "start": "1519350",
    "end": "1525860"
  },
  {
    "text": "The answer is yes. If you don't know what a garbage\ncollector is, don't worry about it. You don't need to.",
    "start": "1525860",
    "end": "1531230"
  },
  {
    "text": "But to answer your question,\nyes, it does. ",
    "start": "1531230",
    "end": "1538166"
  },
  {
    "text": "I don't want to get\ntoo far into it. ",
    "start": "1538166",
    "end": "1543299"
  },
  {
    "text": "Does everyone follow that? That also is going to be\nimportant when we get to lists",
    "start": "1543300",
    "end": "1548365"
  },
  {
    "text": "and aliasing, that type of\nobject creation modification. ",
    "start": "1548365",
    "end": "1557350"
  },
  {
    "text": "We won't get to that\nfor a while. Everyone's good with this? I can move on? All right.",
    "start": "1557350",
    "end": "1562972"
  },
  {
    "text": " Python has what some might\nconsider a wart,",
    "start": "1562972",
    "end": "1571200"
  },
  {
    "text": "when it comes to tuples. That is when you want to create\na tuple with a single",
    "start": "1571200",
    "end": "1577409"
  },
  {
    "text": "element in it. ",
    "start": "1577410",
    "end": "1583370"
  },
  {
    "text": "People just starting out with\nPython would sometimes mistake",
    "start": "1583370",
    "end": "1588680"
  },
  {
    "text": "the tuple literal of a single\nelement to be this: So, parenthesis with a\nsingle integer.",
    "start": "1588680",
    "end": "1594730"
  },
  {
    "text": "The problem is that parentheses\nare the grouping operatorS in Python,\nbut they're also",
    "start": "1594730",
    "end": "1600460"
  },
  {
    "text": "used for making tuples. They serve a dual purpose. What Python will say is, oh,\nI've got a number between two",
    "start": "1600460",
    "end": "1608880"
  },
  {
    "text": "parentheses. Well, this person really wants\nthis integer to have high precedence.",
    "start": "1608880",
    "end": "1614010"
  },
  {
    "text": "We're going to make an integer\n50 and assign it to oopsie. But it's not what we want.",
    "start": "1614010",
    "end": "1619880"
  },
  {
    "text": "We want a tuple with\n50 as one element. The way you do that is you have\na lone comma after the",
    "start": "1619880",
    "end": "1629780"
  },
  {
    "text": "first element.  If we run this and we look at\nwhat it prints out, you see",
    "start": "1629780",
    "end": "1636610"
  },
  {
    "text": "that oopsie has the integer 50,\nwhich is not what we want. We want what's in onesie.",
    "start": "1636610",
    "end": "1642150"
  },
  {
    "start": "1642150",
    "end": "1654460"
  },
  {
    "text": "Anyone confused by that? ",
    "start": "1654460",
    "end": "1660250"
  },
  {
    "text": "We're zooming along here. ",
    "start": "1660250",
    "end": "1665720"
  },
  {
    "text": "Strings, they're actually\na lot like tuples.",
    "start": "1665720",
    "end": "1671990"
  },
  {
    "text": "They're immutable. You can't change them. They're non-scalar.",
    "start": "1671990",
    "end": "1677150"
  },
  {
    "text": "They have multiple characters\nwithin them. If I printed out-- everyone's\nseen this--",
    "start": "1677150",
    "end": "1683310"
  },
  {
    "text": "I can get to individual\ncharacters. If I want to get to the first\ncharacter in name, I use 0.",
    "start": "1683310",
    "end": "1690650"
  },
  {
    "text": "If I want to get to the second\ncharacter, I can use 1. ",
    "start": "1690650",
    "end": "1703940"
  },
  {
    "text": "Then of course they're\nimmutable, so that's going to tell me that I can't do that. ",
    "start": "1703940",
    "end": "1716650"
  },
  {
    "text": "They also support iteration.  So, if I want to print out all\nthe letters in name, one on",
    "start": "1716650",
    "end": "1725430"
  },
  {
    "text": "each line, I can do this. Not too useful, but it works.",
    "start": "1725430",
    "end": "1734010"
  },
  {
    "text": "You looked confused. AUDIENCE: How did that happen? PROFESSOR: How did\nthat happen?",
    "start": "1734010",
    "end": "1740130"
  },
  {
    "text": " So, name is a string. Follow that?",
    "start": "1740130",
    "end": "1746320"
  },
  {
    "text": "String is just a bunch\nof characters. ",
    "start": "1746320",
    "end": "1753170"
  },
  {
    "text": "It is enumerable, meaning that\nwe can go one character at a time through the string.",
    "start": "1753170",
    "end": "1759409"
  },
  {
    "text": " That's what the FOR loop does.",
    "start": "1759410",
    "end": "1765715"
  },
  {
    "text": " AUDIENCE: Do spaces count\nas characters?",
    "start": "1765715",
    "end": "1770810"
  },
  {
    "text": "PROFESSOR: Good. The question was do spaces\ncount as characters. The answer is yes, they do.",
    "start": "1770810",
    "end": "1775840"
  },
  {
    "text": "If I write spaces there and I\nrun this again, as I iterate",
    "start": "1775840",
    "end": "1788880"
  },
  {
    "text": "through the string, I get a\nspace where I'm supposed to. ",
    "start": "1788880",
    "end": "1801429"
  },
  {
    "text": "Is everyone good with this? OK. ",
    "start": "1801430",
    "end": "1806990"
  },
  {
    "text": "Like tuples, you can\ntake slices. ",
    "start": "1806990",
    "end": "1815330"
  },
  {
    "text": "That's going to give me 'it'.  Strings also have\nmany functions.",
    "start": "1815330",
    "end": "1824495"
  },
  {
    "text": " This is an incomplete list of\nfunctions that you can use on",
    "start": "1824495",
    "end": "1832110"
  },
  {
    "text": "string objects. I can make everything uppercase,\nlowercase.",
    "start": "1832110",
    "end": "1843880"
  },
  {
    "start": "1843880",
    "end": "1849920"
  },
  {
    "text": "I can also find characters. ",
    "start": "1849920",
    "end": "1861000"
  },
  {
    "text": "What find does is it\nfinds the index of the left-most character.",
    "start": "1861000",
    "end": "1866970"
  },
  {
    "text": "If I want to find i, it returns\n1, because i is at",
    "start": "1866970",
    "end": "1873150"
  },
  {
    "text": "index 1 in the string. I could also do something\nlike this.",
    "start": "1873150",
    "end": "1879539"
  },
  {
    "text": "I can find an entire string. 'tch', the substring,\nstarts at index 2.",
    "start": "1879540",
    "end": "1887350"
  },
  {
    "start": "1887350",
    "end": "1893110"
  },
  {
    "text": "AUDIENCE: What does it return\nif it can't find it? PROFESSOR: If it doesn't\nfind it--",
    "start": "1893110",
    "end": "1899260"
  },
  {
    "text": "let's put in garbage--  you get negative 1.",
    "start": "1899260",
    "end": "1905100"
  },
  {
    "start": "1905100",
    "end": "1915320"
  },
  {
    "text": "We can also call a\nreplace function. If I want to replace\nm with p-- ",
    "start": "1915320",
    "end": "1922510"
  },
  {
    "text": "it doesn't make sense\nanymore-- I can do that. The question is, how would I use\nthis to change the string?",
    "start": "1922510",
    "end": "1929580"
  },
  {
    "text": " Think back to how we\nmodified the tuple.",
    "start": "1929580",
    "end": "1938409"
  },
  {
    "text": "We created a new object and\nthen we assigned it to a variable of the same name.",
    "start": "1938410",
    "end": "1944570"
  },
  {
    "text": "If I know that replace is going\nto return a string with m replaced, I can do that.",
    "start": "1944570",
    "end": "1956625"
  },
  {
    "start": "1956625",
    "end": "1966070"
  },
  {
    "text": "Does everyone follow that?  AUDIENCE: Is the version\nthat that captures your string function?",
    "start": "1966070",
    "end": "1972570"
  },
  {
    "text": "PROFESSOR: That's\na good question. That also gives me a perfect\nopportunity to demonstrate",
    "start": "1972570",
    "end": "1978020"
  },
  {
    "text": "another command that you'll\nfind helpful. If you're working with an object\nlike string, you can",
    "start": "1978020",
    "end": "1984740"
  },
  {
    "text": "use a command in the interactive\neditor called dir. If you type dir str, it's going\nto return all of the",
    "start": "1984740",
    "end": "1995320"
  },
  {
    "text": "symbols that exist within\nthe str object. You can also type help str, and\nit will give you a nicer",
    "start": "1995320",
    "end": "2004110"
  },
  {
    "text": "version of this.  AUDIENCE: In this case, the\nfirst character indicates what",
    "start": "2004110",
    "end": "2010347"
  },
  {
    "text": "you're trying to replace and\nthe second is what you're replacing it with? PROFESSOR: Right.",
    "start": "2010347",
    "end": "2015780"
  },
  {
    "text": "We can do help str replace,\nand it'll tell us.",
    "start": "2015780",
    "end": "2021350"
  },
  {
    "text": "AUDIENCE: OK. So it did one. And then the count in this\ncase would be if you had",
    "start": "2021350",
    "end": "2027074"
  },
  {
    "text": "multiple instances? PROFESSOR: Yes. AUDIENCE: OK. So like if you had your name\na couple times, you could",
    "start": "2027074",
    "end": "2032106"
  },
  {
    "text": "replace it a few times. PROFESSOR: Right. If I were particularly\nnarcissistic that day, I could",
    "start": "2032106",
    "end": "2038720"
  },
  {
    "text": "replace it multiple times. So let's demonstrate\nthat because some people might be confused.",
    "start": "2038720",
    "end": "2044820"
  },
  {
    "text": " Let's say, I want\nto replace t.",
    "start": "2044820",
    "end": "2051388"
  },
  {
    "start": "2051389",
    "end": "2057230"
  },
  {
    "text": "I'm going to replace\nit with r. ",
    "start": "2057230",
    "end": "2065908"
  },
  {
    "text": "Whoops. Well, why didn't it replace\nthese to t's here? ",
    "start": "2065909",
    "end": "2073118"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: Right. In strings, you differentiate\nbetween lowercase and uppercase.",
    "start": "2073119",
    "end": "2079280"
  },
  {
    "text": " If I wanted to get the behavior\nthat I was hoping",
    "start": "2079280",
    "end": "2084780"
  },
  {
    "text": "for, I could do it this way. ",
    "start": "2084780",
    "end": "2095658"
  },
  {
    "text": "Now I have something that's\nnot even remotely looking like English. Or, I could do something\nlike this.",
    "start": "2095659",
    "end": "2102200"
  },
  {
    "text": " I'm going to make everything\nlowercase, and",
    "start": "2102200",
    "end": "2111640"
  },
  {
    "text": "then replace the t. ",
    "start": "2111640",
    "end": "2116673"
  },
  {
    "text": "AUDIENCE: So that's\npretty exact that you have to be, lower-- PROFESSOR: Remember what I said\nfirst recitation that",
    "start": "2116674",
    "end": "2123600"
  },
  {
    "text": "computers will do exactly what\nyou tell them to do and nothing more or less. ",
    "start": "2123600",
    "end": "2129910"
  },
  {
    "text": "There we go. AUDIENCE: It's good though. It figured out [INAUDIBLE] PROFESSOR: Python is a\nvery nice language.",
    "start": "2129910",
    "end": "2137640"
  },
  {
    "text": "It's one of my favorite\nlanguages right now. Because, it's not as fussy as\nsome other languages, like",
    "start": "2137640",
    "end": "2145000"
  },
  {
    "text": "MATLAB or C or C++ or TCL.",
    "start": "2145000",
    "end": "2152850"
  },
  {
    "text": "Anyone of those. Is everyone good on strings? I can move on?",
    "start": "2152850",
    "end": "2158930"
  },
  {
    "text": "Just remember, if you need help\non any of these commands, just remember you have the help\ncommand at your disposal. AUDIENCE: It'll automatically\ndefault to do everything,",
    "start": "2158930",
    "end": "2165444"
  },
  {
    "text": "unless you tell it something to\ndo like two of the letters. PROFESSOR: Yes.",
    "start": "2165445",
    "end": "2170599"
  },
  {
    "text": "We didn't demonstrate that. Demonstrations are worth\na thousand words. If I wanted to, for whatever\nreason, only replace the first",
    "start": "2170600",
    "end": "2179030"
  },
  {
    "text": "two t's, I could tell it to only\nreplace two t's within the string. ",
    "start": "2179030",
    "end": "2186570"
  },
  {
    "text": "It leaves the other t alone. AUDIENCE: How would you pick\nout the last field?",
    "start": "2186570",
    "end": "2193275"
  },
  {
    "text": "PROFESSOR: That's\na good question.  I don't have a ready\nanswer for you.",
    "start": "2193275",
    "end": "2198860"
  },
  {
    "start": "2198860",
    "end": "2209310"
  },
  {
    "text": "You see these functions with\nr in front of them?",
    "start": "2209310",
    "end": "2215610"
  },
  {
    "text": "The string object often has\nfunctions that will start from",
    "start": "2215610",
    "end": "2221620"
  },
  {
    "text": "the right side as opposed\nto the left side. The find command I showed you\nhas an rfind command as well.",
    "start": "2221620",
    "end": "2229390"
  },
  {
    "text": "This guy right here. I'm pointing on if there is\nthe analog to replace.",
    "start": "2229390",
    "end": "2238040"
  },
  {
    "text": "Can I get back to you? I don't want to spend all our\ntime searching for this and then fail spectacularly.",
    "start": "2238040",
    "end": "2243840"
  },
  {
    "text": " I'll get back to you on that.",
    "start": "2243840",
    "end": "2248870"
  },
  {
    "text": "Is it possible? Yeah. Is there a one-liner function? I can't tell you\nat the moment.",
    "start": "2248870",
    "end": "2254350"
  },
  {
    "start": "2254350",
    "end": "2259960"
  },
  {
    "text": "But again, that's why you\nhave dir and help. You can find this\nout on your own. ",
    "start": "2259960",
    "end": "2269940"
  },
  {
    "text": "Next thing, BREAK. We're done with strings. We're done with tuples.",
    "start": "2269940",
    "end": "2276480"
  },
  {
    "text": "We're still working on loops. Everyone's seen this function\nbefore, right? This is our find-the-cube-ro\not-of-a-perfect-cube function.",
    "start": "2276480",
    "end": "2289030"
  },
  {
    "text": "If I give it 27, and I tell\nPython to stop printing my name, that's what this does.",
    "start": "2289030",
    "end": "2305440"
  },
  {
    "text": "As a toy example to illustrate\nthe BREAK statement--",
    "start": "2305440",
    "end": "2311180"
  },
  {
    "text": "first of all, can someone tell\nme in English what the BREAK statement does? AUDIENCE: Would it just\nstop the program.",
    "start": "2311180",
    "end": "2319830"
  },
  {
    "text": "PROFESSOR: Well, It doesn't stop\nthe program, but it kicks you out of the loop. ",
    "start": "2319830",
    "end": "2326620"
  },
  {
    "text": "We can rewrite the cube root\nprogram to work like this.",
    "start": "2326620",
    "end": "2334630"
  },
  {
    "text": "Instead of our stopping criteria\nbeing answer cubed",
    "start": "2334630",
    "end": "2340259"
  },
  {
    "text": "less than the absolute value\nof the number, we're just going to tell the FOR loop to\ngo from a range 0 to the",
    "start": "2340260",
    "end": "2350540"
  },
  {
    "text": "absolute value of the\ninput plus 1. Why do we have the\nplus 1 there? AUDIENCE: So it goes to the\nabsolute value of x.",
    "start": "2350540",
    "end": "2357550"
  },
  {
    "text": "PROFESSOR: Yeah. Because, otherwise, it would\ngo to 1 before the absolute value of x.",
    "start": "2357550",
    "end": "2362800"
  },
  {
    "text": "Then we break out of this loop,\nif answer cubed is equal",
    "start": "2362800",
    "end": "2367850"
  },
  {
    "text": "to absolute value of x. As soon as we see that it's\nequal to x, we're going to",
    "start": "2367850",
    "end": "2373590"
  },
  {
    "text": "call BREAK. That's going to immediately kick\nus out to here, without executing any more\nof the FOR loop.",
    "start": "2373590",
    "end": "2379890"
  },
  {
    "start": "2379890",
    "end": "2387170"
  },
  {
    "text": "Do people understand that? Are people good with that? AUDIENCE: Does it break you\nof the innermost loop? or [INAUDIBLE]",
    "start": "2387170",
    "end": "2394120"
  },
  {
    "text": "PROFESSOR: Yes. Good question. Does it break you out\nof the innermost loop or all the loops?",
    "start": "2394120",
    "end": "2400320"
  },
  {
    "text": "The answer is the\ninnermost loop. When he says innermost,\nwhat he's talking about are nested loops.",
    "start": "2400320",
    "end": "2406040"
  },
  {
    "text": "Let's say I have something\nlike this. I'm creating on the fly\nnow, so excuse my",
    "start": "2406040",
    "end": "2417110"
  },
  {
    "text": "inability to type. ",
    "start": "2417110",
    "end": "2445060"
  },
  {
    "text": "What is this going to do? This is an example\nof a nested loop.",
    "start": "2445060",
    "end": "2451319"
  },
  {
    "text": "We have an outer loop\nhere, then we have an inner loop here. ",
    "start": "2451320",
    "end": "2458109"
  },
  {
    "text": "All the outer loop is doing is\nit's going from the integers 0, 1, 2, 3 to 9. ",
    "start": "2458110",
    "end": "2465730"
  },
  {
    "text": "And then we have an inner loop,\nwhich looks like it should go from the integers\n10 to 100.",
    "start": "2465730",
    "end": "2473190"
  },
  {
    "text": "But we have the statement\nin here if j mod 2--",
    "start": "2473190",
    "end": "2479000"
  },
  {
    "text": "that's what the percent\nsign is, modulus-- is equal to 0. What we're saying is if j is\nevenly divisible by 2, we're",
    "start": "2479000",
    "end": "2488700"
  },
  {
    "text": "going to break. Now, the question is-- ",
    "start": "2488700",
    "end": "2498610"
  },
  {
    "text": "this is obviously going\nto break when j is 10.",
    "start": "2498610",
    "end": "2506130"
  },
  {
    "text": "This loop is going\nto execute once.  The question is does it print\nout only one set of i,j",
    "start": "2506130",
    "end": "2522045"
  },
  {
    "text": "values, or does it\nprint out 10? ",
    "start": "2522045",
    "end": "2528200"
  },
  {
    "text": "I'm getting to the answer\nto this question. If BREAK statement breaks out\nof all the loops, then we would only see one printout\nof i and j.",
    "start": "2528200",
    "end": "2536710"
  },
  {
    "text": "But if it only breaks out of\nthis inner loop, then we should see 10, followed\nby 'here'.",
    "start": "2536710",
    "end": "2545180"
  },
  {
    "text": "So it breaks out of\nthe inner loop. Long answer, but\ndemonstration. ",
    "start": "2545180",
    "end": "2551876"
  },
  {
    "text": "Is anyone confused by that? ",
    "start": "2551876",
    "end": "2558620"
  },
  {
    "text": "Is so, anyone too\nshy to admit it?  There's office hours.",
    "start": "2558620",
    "end": "2564400"
  },
  {
    "text": " Or, you can talk to\nme afterwards. ",
    "start": "2564400",
    "end": "2578029"
  },
  {
    "text": "PROFESSOR: Now we're going to\nget to functions, which are triple underlined and circled\nover here because they're extraordinarily important\nfor you to understand.",
    "start": "2578030",
    "end": "2584660"
  },
  {
    "text": " Can someone wing it and\ntell me what they",
    "start": "2584660",
    "end": "2590040"
  },
  {
    "text": "think a function is? ",
    "start": "2590040",
    "end": "2599778"
  },
  {
    "text": "AUDIENCE: It's a snippet of code\nthat takes some input, does something to it, and\nreturns some output. PROFESSOR: Perfect.",
    "start": "2599778",
    "end": "2605020"
  },
  {
    "text": "It's a bit of code. It's named, so you\ncan refer to it. It takes input, does something\nwith it, and returns",
    "start": "2605020",
    "end": "2612930"
  },
  {
    "text": "something, some value. The way that we define a\nfunction in Python is like so.",
    "start": "2612930",
    "end": "2622240"
  },
  {
    "text": "Let's say I have a\nfunction cube. It consists of a few parts.",
    "start": "2622240",
    "end": "2628920"
  },
  {
    "text": "We've got the DEF keyword. We've got a name, cube.",
    "start": "2628920",
    "end": "2634170"
  },
  {
    "text": "The name should be meaningful\nfor functions. Like variables, the name should\nmean something So, this",
    "start": "2634170",
    "end": "2639780"
  },
  {
    "text": "would be a bad name\nfor this function. You want it to be meaningful.",
    "start": "2639780",
    "end": "2645465"
  },
  {
    "text": "It has a set of parameters. In this case, it only\nhas one parameter. This is what we pass to the\nfunction when we call it.",
    "start": "2645465",
    "end": "2656720"
  },
  {
    "text": "We'll talk about that\nin another second. It has this string. This is called a doc string.",
    "start": "2656720",
    "end": "2663990"
  },
  {
    "text": "It's the specification\nfor this function. When you write functions, it's\ngood to have this string here.",
    "start": "2663990",
    "end": "2671280"
  },
  {
    "text": "What it allows you to do is\ndescribe what the function does, what it expects for\ninput, and what it",
    "start": "2671280",
    "end": "2679330"
  },
  {
    "text": "gives you as output.  In this case, it's\nvery simple.",
    "start": "2679330",
    "end": "2685140"
  },
  {
    "text": "This is the body of\nthe function. Again we denote the block\nby indenting.",
    "start": "2685140",
    "end": "2692030"
  },
  {
    "text": "All it does is it takes a\nnumber, which is passed into it and raises it to\nthe third power.",
    "start": "2692030",
    "end": "2699880"
  },
  {
    "text": "This RETURN statement tells\nPython to send that back to whoever called the function. ",
    "start": "2699880",
    "end": "2707980"
  },
  {
    "text": "As an example if this working,\nlet's look at",
    "start": "2707980",
    "end": "2718609"
  },
  {
    "text": "this line of code. What it's doing is-- we've seen the print\nstatement, so we know what it does.",
    "start": "2718610",
    "end": "2725190"
  },
  {
    "text": "It's going to name cube and\nit's going to call it.",
    "start": "2725190",
    "end": "2731109"
  },
  {
    "text": "Python knows it's calling it\nbecause it's got the name of the function with the\ninput parameters.",
    "start": "2731110",
    "end": "2736830"
  },
  {
    "text": "So, 3 is being passed to cube\nto be, well, cubed.",
    "start": "2736830",
    "end": "2747140"
  },
  {
    "text": "What's going on here is that\nPython is breaking out of its normal flow of execution,\nsending 3, calling it number",
    "start": "2747140",
    "end": "2758550"
  },
  {
    "text": "in the function, and then\nraising it to the third power. If we run this, we see 27.",
    "start": "2758550",
    "end": "2764135"
  },
  {
    "start": "2764135",
    "end": "2769160"
  },
  {
    "text": "We can pass it any number\nthat we want.",
    "start": "2769160",
    "end": "2775720"
  },
  {
    "text": "Is anyone confused by this? AUDIENCE: The things you're\nrunning between quotation",
    "start": "2775720",
    "end": "2781255"
  },
  {
    "text": "marks, doesn't that kind of-- PROFESSOR: They don't\ndo anything. The question was, this string\nhere between the quotation",
    "start": "2781255",
    "end": "2790340"
  },
  {
    "text": "marks, this doesn't\ndo anything. No, this is a comment. This is so that you can tell\nyourself, six months down the",
    "start": "2790340",
    "end": "2795770"
  },
  {
    "text": "road, what you were thinking. Or so that you could tell\nanother programmer what this function does.",
    "start": "2795770",
    "end": "2801270"
  },
  {
    "text": "It's a way of documenting\nyour code. AUDIENCE: So cube in this\ncase is something that is built to go around.",
    "start": "2801270",
    "end": "2808400"
  },
  {
    "text": "PROFESSOR: Yeah. This is just a toy example. I wanted to keep it simple.",
    "start": "2808400",
    "end": "2814829"
  },
  {
    "text": "I'm illustrating concepts. It wouldn't be too hard\njust to do this.",
    "start": "2814830",
    "end": "2822335"
  },
  {
    "start": "2822335",
    "end": "2829070"
  },
  {
    "text": "I'm going to move on. Everyone's good with\nfunctions? ",
    "start": "2829070",
    "end": "2834235"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ",
    "start": "2834235",
    "end": "2840103"
  },
  {
    "text": "Can you say x equals number-- can you keep the number, and\njust keep the number, and just",
    "start": "2840103",
    "end": "2847438"
  },
  {
    "text": "make it into a variable without\nthe RETURN function.  Do you have to use the RETURN\nfunction on that?",
    "start": "2847438",
    "end": "2855400"
  },
  {
    "text": "PROFESSOR: I was just\ngetting to that. The question is, do you have\nto use a RETURN function. The answer is well, it depends\non what you want to do.",
    "start": "2855400",
    "end": "2862760"
  },
  {
    "start": "2862760",
    "end": "2869840"
  },
  {
    "text": "So, let's take a look\nat a new function. Can someone tell me\nwhat this does?",
    "start": "2869840",
    "end": "2876660"
  },
  {
    "text": "First, what does the\nfunction do? Or what is it supposed to do? ",
    "start": "2876660",
    "end": "2882787"
  },
  {
    "text": "AUDIENCE: Takes the number\nand doubles it. PROFESSOR: You got that by\nreading the writing on the wall, right?",
    "start": "2882788",
    "end": "2889540"
  },
  {
    "text": "Really, it's too easy. In the body of the function,\nall it does is it creates a",
    "start": "2889540",
    "end": "2896010"
  },
  {
    "text": "new variable, answer, and it\nassigns number times 2 to it. ",
    "start": "2896010",
    "end": "2901740"
  },
  {
    "text": "What's going to print\nout here? ",
    "start": "2901740",
    "end": "2907450"
  },
  {
    "text": "Why don't we run it and see?  That's not doing\nwhat we wanted.",
    "start": "2907450",
    "end": "2913680"
  },
  {
    "text": "When you don't have a RETURN\nstatement, Python returns",
    "start": "2913680",
    "end": "2918750"
  },
  {
    "text": "implicitly none to whoever\ncalls the function. ",
    "start": "2918750",
    "end": "2925310"
  },
  {
    "text": "Ok. In this case, this function\nobviously doesn't have a RETURN statement Python\nsays, OK.",
    "start": "2925310",
    "end": "2932180"
  },
  {
    "text": "I'm just going to return none. Whatever work it did in the\nfunction is lost in this case.",
    "start": "2932180",
    "end": "2939210"
  },
  {
    "text": "To get the right functionality,\nwe have to add a RETURN statement. ",
    "start": "2939210",
    "end": "2946600"
  },
  {
    "text": "And it works. Was that what you\nwere getting at? OK.",
    "start": "2946600",
    "end": "2952345"
  },
  {
    "text": " Anyone confused? Can I move on? ",
    "start": "2952345",
    "end": "2965700"
  },
  {
    "text": "Functions have something\ncalled variable scope. ",
    "start": "2965700",
    "end": "2971630"
  },
  {
    "text": "I apologize for the punning. I was getting tired\nwhen I wrote this. ",
    "start": "2971630",
    "end": "2978740"
  },
  {
    "text": "In this chunk of code,\nI define a global variable, all_hope. ",
    "start": "2978740",
    "end": "2984890"
  },
  {
    "text": "I also define a function that\ntakes a parameter, variables.",
    "start": "2984890",
    "end": "2990180"
  },
  {
    "text": " It says it steals all the\nvariables, but I don't know how it does that\nin a computer.",
    "start": "2990180",
    "end": "2997420"
  },
  {
    "text": "It doesn't return anything. In the body of the function,\nI create another variable,",
    "start": "2997420",
    "end": "3002970"
  },
  {
    "text": "called my_variable, and\nI assign it a string.",
    "start": "3002970",
    "end": "3008800"
  },
  {
    "text": "I'm not actually returning\nanything right because I've said I'm not returning\nanything. All this is doing is it's\njust printing stuff out.",
    "start": "3008800",
    "end": "3015040"
  },
  {
    "text": "It's printing out what the\nparameter passed into it was. It's printing out variables.",
    "start": "3015040",
    "end": "3022610"
  },
  {
    "text": "It's printing out all_hope,\nwhich is a global variable that we define up here. It's printing out my_variable,\nwhich is a local variable in",
    "start": "3022610",
    "end": "3031450"
  },
  {
    "text": "the function.  Down here I'm defining a\nvariable, old_meme_is_old.",
    "start": "3031450",
    "end": "3040440"
  },
  {
    "text": "I'm calling the function. ",
    "start": "3040440",
    "end": "3045680"
  },
  {
    "text": "It does what we expect\nit to do. What I want to illustrate,\nthough is what",
    "start": "3045680",
    "end": "3052770"
  },
  {
    "text": "happens if I do this? ",
    "start": "3052770",
    "end": "3063010"
  },
  {
    "text": "As you might expect,\nit's going to give me an error, right? The reason is that my_variable\nhas local scope to this",
    "start": "3063010",
    "end": "3072450"
  },
  {
    "text": "function, all\n_your_vars_are_belong_to_us. ",
    "start": "3072450",
    "end": "3080900"
  },
  {
    "text": "Is anyone confused by this? No one's confused by this? OK.",
    "start": "3080900",
    "end": "3086320"
  },
  {
    "text": " Let's try something else. ",
    "start": "3086320",
    "end": "3119960"
  },
  {
    "text": "Let's not do that. If I run this code, we can tell\nfrom the function that",
    "start": "3119960",
    "end": "3133700"
  },
  {
    "text": "it's taking one parameter. It's incrementing\nthat parameter. It's incrementing this\nglobal int that",
    "start": "3133700",
    "end": "3140460"
  },
  {
    "text": "we've defined up here. It's returning the parameter\nthat it's just incremented. ",
    "start": "3140460",
    "end": "3147670"
  },
  {
    "text": "Erase my corny humor. ",
    "start": "3147670",
    "end": "3167260"
  },
  {
    "text": "The question now is, let's say\nthat I have a variable y, and I give it a value of 10.",
    "start": "3167260",
    "end": "3172609"
  },
  {
    "text": "I'm being completely\narbitrary. If I call the variable, inc_it,\non y, first of all,",
    "start": "3172610",
    "end": "3181671"
  },
  {
    "text": "what's going to print? ",
    "start": "3181671",
    "end": "3187500"
  },
  {
    "text": "If I print out the value of\ny, what's going to print? ",
    "start": "3187500",
    "end": "3192510"
  },
  {
    "text": "We want to run it. ",
    "start": "3192510",
    "end": "3202310"
  },
  {
    "text": "Uh-oh, I'm failing. ",
    "start": "3202310",
    "end": "3217460"
  },
  {
    "text": "I'm stepping on myself here. This is why you don't debug\ncode on the fly.",
    "start": "3217460",
    "end": "3223550"
  },
  {
    "text": "If I have a global variable and\nI need to reference it, I",
    "start": "3223550",
    "end": "3229681"
  },
  {
    "text": "use a global keyword. You should never have\nto do this. ",
    "start": "3229681",
    "end": "3235940"
  },
  {
    "text": "Ink_it is going to\nreturn 11, right? Because it's taken y, which\nis 10, and it's called x",
    "start": "3235940",
    "end": "3242319"
  },
  {
    "text": "equal x plus 1. Then it's returned this x. ",
    "start": "3242320",
    "end": "3249640"
  },
  {
    "text": "If I look at what y is, after\nI've run this, y is still 10.",
    "start": "3249640",
    "end": "3255490"
  },
  {
    "text": "This is because when we've\npassed in x here and we've",
    "start": "3255490",
    "end": "3262150"
  },
  {
    "text": "called x equal x plus 1, it's\nactually shadowing itself. It's overriding what's in\nthe local parameter.",
    "start": "3262150",
    "end": "3268569"
  },
  {
    "text": "But it's not overriding the\nactual variable, y.",
    "start": "3268570",
    "end": "3275240"
  },
  {
    "text": "We'll get more into\nthis later on. The important thing to\nunderstand in this case is",
    "start": "3275240",
    "end": "3282500"
  },
  {
    "text": "that the changes that you make\nto this parameter stay within the function.",
    "start": "3282500",
    "end": "3287760"
  },
  {
    "text": "We good? All right. I need to move pretty quickly\nnow to gotchas.",
    "start": "3287760",
    "end": "3296330"
  },
  {
    "text": " I guarantee you someone's going\nto make this mistake.",
    "start": "3296330",
    "end": "3302579"
  },
  {
    "text": "Print is not RETURN. ",
    "start": "3302580",
    "end": "3309190"
  },
  {
    "text": "When you call print\nprint_is_not_return, it's going to call this function.",
    "start": "3309190",
    "end": "3314570"
  },
  {
    "text": "It will print out this\nstring, but it's not returning the string.",
    "start": "3314570",
    "end": "3319700"
  },
  {
    "text": "What it's returning\nis none, because there's no return statement. That's where this\nnone comes from.",
    "start": "3319700",
    "end": "3325830"
  },
  {
    "text": " RETURN is not print.",
    "start": "3325830",
    "end": "3332059"
  },
  {
    "text": "So, if I say print this return\nvalue, it will print this; it will return a string.",
    "start": "3332060",
    "end": "3337470"
  },
  {
    "text": "But if I just call this, it's\nnot going to print it again.",
    "start": "3337470",
    "end": "3345234"
  },
  {
    "text": " It's going to print nothing. ",
    "start": "3345235",
    "end": "3355170"
  },
  {
    "text": "You'll just have to\nmake the mistake. ",
    "start": "3355170",
    "end": "3363150"
  },
  {
    "text": "One thing to be careful\nof in Python-- remember I said everything\nis an object?",
    "start": "3363150",
    "end": "3369360"
  },
  {
    "text": "Functions are no different. Functions are objects. If you just reference the\nfunction's name, cube, which",
    "start": "3369360",
    "end": "3380670"
  },
  {
    "text": "is not defined now, it's going\nto print something out that",
    "start": "3380670",
    "end": "3391960"
  },
  {
    "text": "looks like that. ",
    "start": "3391960",
    "end": "3396990"
  },
  {
    "text": "This is what the object\nlooks like to Python.",
    "start": "3396990",
    "end": "3402600"
  },
  {
    "text": "In order to call it, you have\nto have the parentheses with the parameters. ",
    "start": "3402600",
    "end": "3410069"
  },
  {
    "text": "Python's not going\nto complain. Some programming languages\nwill complain. Python won't. It's possible when you're\nrunning your code, if you're",
    "start": "3410070",
    "end": "3416660"
  },
  {
    "text": "trying to call a function and\nyou forget the parentheses, and Python's just not\ncomplaining, it will merrily",
    "start": "3416660",
    "end": "3422700"
  },
  {
    "text": "do what you tell it to do. AUDIENCE: [INAUDIBLE]",
    "start": "3422700",
    "end": "3428510"
  },
  {
    "text": "PROFESSOR: What's that? AUDIENCE: [INAUDIBLE] ",
    "start": "3428510",
    "end": "3436600"
  },
  {
    "text": "PROFESSOR: I'm sorry,\ncan you speak up? AUDIENCE: Print q open\nparentheses [INAUDIBLE]",
    "start": "3436600",
    "end": "3445010"
  },
  {
    "text": "PROFESSOR: OK. Is x defined? AUDIENCE: [INAUDIBLE]",
    "start": "3445010",
    "end": "3450502"
  },
  {
    "text": " PROFESSOR: Yeah.",
    "start": "3450502",
    "end": "3455650"
  },
  {
    "start": "3455650",
    "end": "3461204"
  }
]