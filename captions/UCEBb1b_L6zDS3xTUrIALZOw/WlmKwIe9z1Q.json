[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6060"
  },
  {
    "text": "continue to offer high-quality\neducational resources for free. To make a donation or to\nview additional materials",
    "start": "6060",
    "end": "12700"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "12700",
    "end": "27414"
  },
  {
    "text": "PROFESSOR: All right. So let's get started\nwith the second lecture",
    "start": "27415",
    "end": "33220"
  },
  {
    "text": "in our stunning series\non web security. So to start off the\nclass today, I actually",
    "start": "33220",
    "end": "38740"
  },
  {
    "text": "want to go over\nsome quick demos. So as you know, demos\nalmost never work.",
    "start": "38740",
    "end": "43937"
  },
  {
    "text": "So hopefully, you won't just\nbe seeing my empty terminal up here. But the basic idea\nis that I first wanted to show you an\nexample of the Shellshock bug",
    "start": "43937",
    "end": "51815"
  },
  {
    "text": "that you may have heard of. This has been a pretty\nsort of popular topic in the security literature.",
    "start": "51815",
    "end": "57320"
  },
  {
    "text": "And people were\nsaying that Heartbleed was like a 10 out of\n10 security [? bug. ?] But people were saying, like,\nwe should not have reserved",
    "start": "57320",
    "end": "63640"
  },
  {
    "text": "10 out of 10 for Heartbleed. This is potentially worse. All right? And so I thought that this would\nbe a great idea for you guys to see some living history, and\nfor you to tell your parents",
    "start": "63640",
    "end": "70790"
  },
  {
    "text": "that, you know, they're getting\ntheir tuition's worth out of MIT. So what is the basic idea\nbehind the Shellshock bug?",
    "start": "70790",
    "end": "78350"
  },
  {
    "text": "Well, it's a really\ngreat example of why it's so difficult\nto build secure web applications that span\nmultiple technology",
    "start": "78350",
    "end": "85520"
  },
  {
    "text": "stacks, multiple languages,\nmultiple OS's, so on and so forth. So the basic idea\nis that Shellshock",
    "start": "85520",
    "end": "91100"
  },
  {
    "text": "is going to take\nadvantage of the fact that the attacker can\ncraft a special HTTP",
    "start": "91100",
    "end": "97610"
  },
  {
    "text": "request to a server and\ncontrol the headers that are in that request. And so I've written\nan example up here.",
    "start": "97610",
    "end": "105502"
  },
  {
    "text": "It's very simple. So let's say that the attacker\nwants to send some GET query. They're going to send that\nquery to some CGI interface.",
    "start": "105502",
    "end": "113890"
  },
  {
    "text": "And then there's going\nto be some question mark. The person wants\nto search for cats, because that's all\nthat people search for.",
    "start": "113890",
    "end": "119165"
  },
  {
    "text": "And then there's some\nstandard headers here, like host, for example. So this is saying\nthat this URL here",
    "start": "119165",
    "end": "126610"
  },
  {
    "text": "is hanging off of example.com. Now, note that the attacker can\nalso specify custom headers.",
    "start": "126610",
    "end": "132360"
  },
  {
    "text": "Right? So the attacker can\njust say, I want it to find some\napplication-specific header called Custom-header, and I want\nto specify some value there,",
    "start": "132360",
    "end": "139122"
  },
  {
    "text": "because you can imagine that\na web application might define certain functionalities\nthat can't be expressed using the simple,\npre-defined HTTP headers.",
    "start": "139122",
    "end": "145811"
  },
  {
    "text": "OK. So that all seems\nfairly innocuous. But what ends up happening is\nthat in a lot of these CGI web",
    "start": "145811",
    "end": "152000"
  },
  {
    "text": "servers, they will actually\ntake these custom header values and use them to set\nenvironment variables for Bash.",
    "start": "152000",
    "end": "159430"
  },
  {
    "text": "OK? So they will use this header\nto create a Bash variable name custom header. Then they will take\nthis value here",
    "start": "159430",
    "end": "165970"
  },
  {
    "text": "that the attacker\nhas supplied, and use that to be the value of\nthat Bash variable, right?",
    "start": "165970",
    "end": "171360"
  },
  {
    "text": "And then once that\nvariable is set up, then the CGI server\nwill do some processing",
    "start": "171360",
    "end": "177110"
  },
  {
    "text": "in the context of\nthat environment. Right? So this is clearly bad. You can probably see\nwhere this is going.",
    "start": "177110",
    "end": "182440"
  },
  {
    "text": "Web servers should not be\ntaking these arbitrary values from arbitrary unwashed masses. So in the particular example\nof the Shellshock bug,",
    "start": "182440",
    "end": "189780"
  },
  {
    "text": "what ended up happening is that\nif you set your Bash variable to this, this kind of malformed,\nevil-looking thing, then",
    "start": "189780",
    "end": "197280"
  },
  {
    "text": "there's going to be\ninsanity that happens. Basically, this is a malformed\n[? Select ?] function definition in the Bash\nscripting language.",
    "start": "197280",
    "end": "204597"
  },
  {
    "text": "You don't have to worry\nabout the specifics of it. But what was intended to\nhappen, if Bash were correct,",
    "start": "204597",
    "end": "210019"
  },
  {
    "text": "is that this part over\nhere wouldn't be executed. So basically, you just defined\nsome stupid function here",
    "start": "210020",
    "end": "215334"
  },
  {
    "text": "that doesn't do anything. And in the [INAUDIBLE]\nterminate here. But this sequence of\ncharacters actually",
    "start": "215335",
    "end": "220370"
  },
  {
    "text": "confuses the Bash parser. And so what ends up happening\nis that it sort of stumbles through this nonsense here.",
    "start": "220370",
    "end": "226180"
  },
  {
    "text": "And then it says, oh, I\nmight as well keep on parsing and execute some\ncommands here, right? And so in this case, this\njust does the bin/id command,",
    "start": "226180",
    "end": "233262"
  },
  {
    "text": "which displays some\ninformation about the user. But this could be\nany code right here. So that's the heart\nof the vulnerability.",
    "start": "233262",
    "end": "239267"
  },
  {
    "text": "So I'll give you a very\nsimple example here, so you see up on the screen. So basically, we've got a very\nsimple Python server here,",
    "start": "239267",
    "end": "247400"
  },
  {
    "text": "just the dumbest one you\ncould possibly imagine. It's got this do GET method. And so with the\ndo GET method, it",
    "start": "247400",
    "end": "253200"
  },
  {
    "text": "is going to basically iterate\nthrough all of the HTTP headers",
    "start": "253200",
    "end": "258708"
  },
  {
    "text": "in the request. OK? So that's what this four\nkey value for the header and the value in this request.",
    "start": "258709",
    "end": "265787"
  },
  {
    "text": "And then it'll just print out\nthe headers that it finds. And then in this\ndirt-simple example, it's going to do\nsomething very dumb, which",
    "start": "265787",
    "end": "271690"
  },
  {
    "text": "is execute the system\ncall and just directly set the environment value to the\nvalue specified in the header.",
    "start": "271691",
    "end": "279639"
  },
  {
    "text": "So that's the whole\nroot of vulnerability. So if I come over here and I\nstart my victim web server--",
    "start": "279640",
    "end": "285465"
  },
  {
    "text": "OK, so it's now ready\nto accept requests. And then I can write my special\nShellshock client like so.",
    "start": "285465",
    "end": "292140"
  },
  {
    "text": "And this is actually\npretty dirt-simple. So here, I just define one\nof these malformed strings.",
    "start": "292140",
    "end": "298900"
  },
  {
    "text": "So I have these kind of janky\ncharacters at the beginning. And then I know that everything\nafter this is essentially",
    "start": "298900",
    "end": "304229"
  },
  {
    "text": "going to be executed on my\nbehalf on the server side. So in this case, I\npick something that was actually pretty innocuous.",
    "start": "304230",
    "end": "310083"
  },
  {
    "text": "It just says, echo,\nI own your machine. But this could be anything here. You could start another Bash\nshell kind of like I do here.",
    "start": "310083",
    "end": "317170"
  },
  {
    "text": "And then, echo attacker command,\nwhere in the real world, that could actually be\nsomething very dangerous.",
    "start": "317170",
    "end": "322889"
  },
  {
    "text": "So then I set the headers\nand my custom request. And then I just use Python\nto create an HTTP connection",
    "start": "322890",
    "end": "329655"
  },
  {
    "text": "and just send it to server. So what ends up happening? So I execute my\nShellshock client here.",
    "start": "329655",
    "end": "337190"
  },
  {
    "text": "So it's saying that\nI had a 404 here, because it doesn't matter\nwhat file I requested. So I just put in some index,\nan HTML that doesn't exist.",
    "start": "337190",
    "end": "344759"
  },
  {
    "text": "But if we look over here, this\nis the output for the server. And so what you see is\nthat you have this output,",
    "start": "344760",
    "end": "351450"
  },
  {
    "text": "I OWN UR MACHINE,\nand ATTACKER CMD. And that's because as the\nserver got that header, it set the Bash variable.",
    "start": "351450",
    "end": "358120"
  },
  {
    "text": "It set it with this\nweird thing here. And as a result, an\nATTACKER-controlled command got the run.",
    "start": "358120",
    "end": "363800"
  },
  {
    "text": "So does that all make sense? AUDIENCE: So does this happen if\nthe program is run under that?",
    "start": "363800",
    "end": "372714"
  },
  {
    "text": "I'm still unclear on, like-- PROFESSOR: Yeah. So the specifics of how\nthe attack works actually",
    "start": "372714",
    "end": "377840"
  },
  {
    "text": "depends on are you running\nApache, like what exactly your web server looks like. So in this example, it's\na little bit contrived,",
    "start": "377840",
    "end": "383900"
  },
  {
    "text": "because I actually called\n[INAUDIBLE] explicitly spawned off another Bash shell, set the\nenvironment variable in there,",
    "start": "383900",
    "end": "389932"
  },
  {
    "text": "and then we were ready to go. But you could imagine that\nif you were spawning off a different process for\neach incoming connection,",
    "start": "389932",
    "end": "395827"
  },
  {
    "text": "you could set the environment\nvariable for that directly if that guy was using--\nwas living inside of a Bash environment.",
    "start": "395827",
    "end": "401905"
  },
  {
    "text": "AUDIENCE: So if you go back\nto your web server code, it seems that you have a\nmuch worse vulnerability",
    "start": "401905",
    "end": "407599"
  },
  {
    "text": "than the Shellshock, because\nyou're calling [? though ?] a system. And I can execute a command just\nby setting the custom header",
    "start": "407600",
    "end": "415116"
  },
  {
    "text": "to something [? that I ?]. I wouldn't have to use the\nShellshock bug in this example. PROFESSOR: That's correct. Yeah.",
    "start": "415117",
    "end": "420229"
  },
  {
    "text": "So in this particular web\nserver, which is something I wrote just for sort\nof teaching value, yeah, this thing you\nshouldn't trust for anything.",
    "start": "420230",
    "end": "426233"
  },
  {
    "text": "AUDIENCE: But the\nShellshock exploit was on assigning something\nmalicious to an environment variable using [? set N ?]\nor something like that,",
    "start": "426233",
    "end": "432760"
  },
  {
    "text": "which is something [INAUDIBLE]. PROFESSOR: Oh, yeah, yeah. So that gets back\nto his question. That's right. So if you had, like,\nlet's say, Apache up here,",
    "start": "432760",
    "end": "437954"
  },
  {
    "text": "Apache's a little bit\ntricky to sort of configure in a way that's obviously\nwhat's going on. But you're exactly right. So Apache would\ncall Set nth, which",
    "start": "437954",
    "end": "444580"
  },
  {
    "text": "is another way that you can\ndirectly set the environment value for whatever\nparticular service [? I ?] process you have.",
    "start": "444580",
    "end": "449745"
  },
  {
    "text": "But you also actually\nhave some servers like this that you can\nimagine that they actually do a spawn of a separate process\nand do something very morally",
    "start": "449745",
    "end": "456370"
  },
  {
    "text": "equivalent to this. But you're exactly\nright, that the way that a patch in\nparticular was violated was the way that you described.",
    "start": "456370",
    "end": "464580"
  },
  {
    "text": "So does it all make sense?  OK. So that's sort of a\nquick and dirty example",
    "start": "464580",
    "end": "472724"
  },
  {
    "text": "of Shellshock stuff. And so another example\nI wanted to give you was an example of\na cross-site scripting.",
    "start": "472725",
    "end": "481460"
  },
  {
    "text": "And so the Shellshock\nbug was sort of an example of how content\nsanitization is very important.",
    "start": "481460",
    "end": "486885"
  },
  {
    "text": "So as we'd just been\ndiscussing, you shouldn't just take inputs from\nan arbitrary person and them use them directly\nin commands of any type.",
    "start": "486885",
    "end": "494000"
  },
  {
    "text": "So cross-site scripting\nattacks are another example of how something can go wrong. So in this example,\nI have another sort",
    "start": "494000",
    "end": "501669"
  },
  {
    "text": "of dumb CGI server here. And if we look at\nthis CGI server,",
    "start": "501670",
    "end": "508000"
  },
  {
    "text": "so what is it going to do? So once again, I've written\nsomething very simple in Python. This is going to\nbe the handle that",
    "start": "508000",
    "end": "513990"
  },
  {
    "text": "executes when a request\ncomes in from the client. And so essentially,\nwhat happens is that up here, I'm going to print\nsome headers for the response.",
    "start": "513990",
    "end": "522701"
  },
  {
    "text": "So I'm going to\nsay, my response is going to be of type text HTML. This line here we'll\nactually explain in a second.",
    "start": "522701",
    "end": "528934"
  },
  {
    "text": "So as it turns out, browsers\nhave some security mechanisms to try to prevent the attack\nthat I'm about to show you.",
    "start": "528934",
    "end": "534250"
  },
  {
    "text": "So I put this example-- I\nput that header line in there to turn some of the\nprotections off. And then what the\nCGI script does",
    "start": "534250",
    "end": "541640"
  },
  {
    "text": "is it gets access to all of the\nfields and the CGI requests. So imagine that everything\nin a query string",
    "start": "541640",
    "end": "549180"
  },
  {
    "text": "after this question mark-- like\nthese header and value things, that's what goes into\nthat form example there.",
    "start": "549180",
    "end": "555740"
  },
  {
    "text": "And so what the CGI script\ndoes is something very simple. It just directly prints\nthe value of something that",
    "start": "555740",
    "end": "562960"
  },
  {
    "text": "was passed from the attacker. So same basic idea. This is a bad idea, because\nthis Print statement,",
    "start": "562960",
    "end": "568600"
  },
  {
    "text": "it's printing directly\ninto the HTML itself. So what can happen\nis as follows.",
    "start": "568600",
    "end": "575840"
  },
  {
    "text": "So let's say that I have a\nbunch of queries I want to run. So in this first query here, I'm\njust setting the message value",
    "start": "575840",
    "end": "584760"
  },
  {
    "text": "to Hello. So if I go over here\nand I run that page,",
    "start": "584760",
    "end": "590566"
  },
  {
    "text": "well, then you're going to\nsee that this Hello shows up, because once again, the\nserver was taking directly what I pass to it.",
    "start": "590567",
    "end": "595740"
  },
  {
    "text": "And it prints Hello. So no big surprises there. Now let's say I realize\nthat I can actually",
    "start": "595740",
    "end": "601890"
  },
  {
    "text": "pass arbitrary HTML in there. So now I actually try to\nembed some styling in there.",
    "start": "601890",
    "end": "609930"
  },
  {
    "text": "So I say, h1 and\nthen Hello again /h1. So that worked, right? So once again, we're printing\ndirectly into the [? pake. ?]",
    "start": "609930",
    "end": "616310"
  },
  {
    "text": "So now you might think,\nOK, we're in business now. This is cool. So let's just directly embed\nsome JavaScript code in there.",
    "start": "616310",
    "end": "623529"
  },
  {
    "text": "All right. And so I do this. And here, I've actually just\nput in-- for the message, I put script.",
    "start": "623530",
    "end": "629050"
  },
  {
    "text": "And then I want it to just\nalert XSS and then script.",
    "start": "629050",
    "end": "634067"
  },
  {
    "text": "So now that's interesting. So it seems like something\ndidn't quite work. So I don't see any output. I didn't see the alert either.",
    "start": "634067",
    "end": "639569"
  },
  {
    "text": "And if I actually look at the\noutput for the web server-- and what I see is\nthat here, the web",
    "start": "639569",
    "end": "646700"
  },
  {
    "text": "server itself didn't actually\nget that trailing script tag. So it seems like the\nbrowser itself has somehow",
    "start": "646700",
    "end": "652190"
  },
  {
    "text": "detected something evil\neven though I tried to disable the XSS filter.",
    "start": "652190",
    "end": "658243"
  },
  {
    "text": "So that's interesting. We're going to come to this\ndefense mechanism a bit in the lecture.",
    "start": "658244",
    "end": "663430"
  },
  {
    "text": "But suffice it to say,\nit seems like the browser is trying to resist this\ncross-site scripting attack. But of course, what\nwe can take advantage",
    "start": "663430",
    "end": "669530"
  },
  {
    "text": "of is the fact that HTML,\nand CSS, and JavaScript, they're extremely\ncomplex languages.",
    "start": "669530",
    "end": "675910"
  },
  {
    "text": "And they compose in these very\ndifficult to understand ways. So here, this is what I've been\nsetting my attack string here.",
    "start": "675910",
    "end": "681509"
  },
  {
    "text": "This is malform URL. I'm saying, image, and\nthen three quotation marks in a row, and\nthen a script tag.",
    "start": "681510",
    "end": "687339"
  },
  {
    "text": "Like, this shouldn't\nactually parse. But what's going\nto end up happening is that the browser's\ngoing to get confused here.",
    "start": "687340",
    "end": "694740"
  },
  {
    "text": "So it's built-in cross-site\nscripting detection actually fails here.",
    "start": "694740",
    "end": "700210"
  },
  {
    "text": "And so what ends up happening\nis that now you see the alert. OK? And what's interesting\nis that if you actually look at the contents of the page\nnow, it's kind of messed up.",
    "start": "700210",
    "end": "708130"
  },
  {
    "text": "Like, where did this quotation\nmark and brace come in? If we do a Control,\nU, we can see",
    "start": "708130",
    "end": "713690"
  },
  {
    "text": "that this does not make the\nbrowser happy in some way. That's a little bit unclear.",
    "start": "713690",
    "end": "718740"
  },
  {
    "text": "But it doesn't matter\nif we're their attacker. We saw that alert. That means that\n[? our code ?] got the run.",
    "start": "718740",
    "end": "724800"
  },
  {
    "text": "And from the perspective\nof the attacker, who cares that the page is messed up now? Because I could\nhave used that code to steal the cookie\nor things like that.",
    "start": "724800",
    "end": "731931"
  },
  {
    "text": "So does that all make-- yeah? AUDIENCE: What's the\ncross-site aspect? PROFESSOR: Ah. So the cross-site aspect is that\nif the attacker can convince",
    "start": "731932",
    "end": "741199"
  },
  {
    "text": "the user to go to\na URL like this, then the attacker's the\none who's specifying",
    "start": "741200",
    "end": "746269"
  },
  {
    "text": "that stuff in the message. It's the attacker who's\nspecifying the alert XSS or something like that.",
    "start": "746270",
    "end": "751660"
  },
  {
    "text": "And so essentially,\nwhat's happening is that the victim\npage is executing code on behalf of someone\nthat is not that page.",
    "start": "751660",
    "end": "760110"
  },
  {
    "text": "AUDIENCE: Can you explain\nexactly what the browser roles are for sanitizing\n[? games ?] for [? play? ?] PROFESSOR: Yeah, yeah.",
    "start": "760110",
    "end": "765470"
  },
  {
    "text": "So we'll get to\nthat in a second. So we'll get to\nthat in a second. OK. So that is all for story time.",
    "start": "765470",
    "end": "775745"
  },
  {
    "text": "And let's see here. So I guess I can\nturn this guy on. And maybe he will\n[INAUDIBLE] guy here.",
    "start": "775745",
    "end": "787990"
  },
  {
    "text": "This guy here. AUDIENCE: Front wall. PROFESSOR: Ah, OK. There you go. All right. Eighth time's the charm.",
    "start": "787991",
    "end": "793245"
  },
  {
    "text": "OK, thanks. OK. So yeah, so those are just two\nquick demos to sort of show you the filthy and dirty world\nthat we live in right now.",
    "start": "793245",
    "end": "799810"
  },
  {
    "text": "So why is cross-site\nscripting so prevalent? Why are these problems\nsuch a big deal?",
    "start": "799810",
    "end": "805780"
  },
  {
    "text": "Well, the reason\nis that websites are increasingly more\nand more dynamic, and they want to incorporate\na user content a lot of times,",
    "start": "805780",
    "end": "812940"
  },
  {
    "text": "or they want to incorporate\ncontent from other domains. So think about the Comment\nsection on a news article.",
    "start": "812940",
    "end": "818810"
  },
  {
    "text": "Those comments come\nfrom untrusted folks, from the users. So somehow, these sites\nhave to figure out,",
    "start": "818810",
    "end": "823950"
  },
  {
    "text": "what are the rules for\ncomposing those types of things? And also, the websites might\nhost user-submitted documents,",
    "start": "823950",
    "end": "830410"
  },
  {
    "text": "a thing like Google Docs\nor Office 365, for example. Those documents all come\nfrom untrusted folks,",
    "start": "830410",
    "end": "836010"
  },
  {
    "text": "but somehow, they have\nto live with each other and with the large\ninfrastructure from Google or from\nMicrosoft or whatnot.",
    "start": "836010",
    "end": "843530"
  },
  {
    "text": "So what are some of the\ncross-site scripting defenses we can use? This kind of gets\nto your question.",
    "start": "843530",
    "end": "848826"
  },
  {
    "text": "So we'll actually look\nat some of those now. ",
    "start": "848827",
    "end": "856139"
  },
  {
    "text": "So one type of defense\nis to basically have cross-site scripting\nfilters in the browser itself.",
    "start": "856140",
    "end": "866600"
  },
  {
    "text": " And so these filters\nwill essentially",
    "start": "866600",
    "end": "872730"
  },
  {
    "text": "try to detect when there's a\npotential cross-site scripting",
    "start": "872730",
    "end": "878089"
  },
  {
    "text": "attack. And so we actually saw one\nof those filters in action. And I think that was the third\nexample that we looked at.",
    "start": "878090",
    "end": "885560"
  },
  {
    "text": "If you have some website--\nor some URL-- excuse me-- that looks like\nthis-- so foo.com.",
    "start": "885560",
    "end": "893850"
  },
  {
    "text": "And then you have some question\nmark and then some query string",
    "start": "893850",
    "end": "899279"
  },
  {
    "text": "you're going to submit. This is very similar to the\nexample that I tried third.",
    "start": "899280",
    "end": "906830"
  },
  {
    "text": "So I just set this\nsource to something like evil.com/cookiestealer.js.",
    "start": "906830",
    "end": "922149"
  },
  {
    "text": "And so what ended\nup happening was that when I tried an\nexample similar to this, the browser actually\nrejected it out of hand.",
    "start": "922150",
    "end": "928460"
  },
  {
    "text": "So we saw that it\ndidn't even work. And the reason\nwhy it didn't work is because the browser\nlooked and said,",
    "start": "928460",
    "end": "934330"
  },
  {
    "text": "is there an embedded\nscript tag in a URL?",
    "start": "934330",
    "end": "940451"
  },
  {
    "text": "So basically, it's a\nvery simple heuristic for figuring out if something\nevil's probably going on, because no legitimate\ndeveloper-- or no developer",
    "start": "940451",
    "end": "947570"
  },
  {
    "text": "that's sane-- should be\ndoing stuff like this. So there's actually these\nconfiguration options in your browser you can use to\nturn these things on and off.",
    "start": "947570",
    "end": "954209"
  },
  {
    "text": "Occasionally, this\nis useful for testing if you just want to inject\nsome JavaScript really quick and dirty. But this is almost always\nassigned [INAUDIBLE].",
    "start": "954209",
    "end": "961530"
  },
  {
    "text": "So for example, Chrome and IE\nhave a built-in filter that will look at your URL\nvalue in the address bar, look for things like this.",
    "start": "961530",
    "end": "968240"
  },
  {
    "text": "And if it's there, they will\ndo things like maybe delete this whole thing completely. They will maybe change\nthe source to be empty,",
    "start": "968240",
    "end": "975420"
  },
  {
    "text": "stuff like that. And so essentially, to\nget to your question, there's a bunch of heuristics\nthat the browsers have",
    "start": "975420",
    "end": "981310"
  },
  {
    "text": "to identify things like this. And if you look\nat the OWASP site, they actually collect\nexamples of heuristics",
    "start": "981310",
    "end": "987509"
  },
  {
    "text": "you can use to detect\ncross-site scripting, as well as tricks you can\nuse to bypass those filters.",
    "start": "987509",
    "end": "993906"
  },
  {
    "text": "So it was very funny. So the first thing I\nwanted to do for the demo is do something like\nthis, and it didn't work. So then I went to the\nOWASP cheat sheet.",
    "start": "993906",
    "end": "1000060"
  },
  {
    "text": "I looked at, like, the\nthird thing they suggested, and the third thing\nthey suggested worked, which was that sort of\nbroken image syntax type stuff.",
    "start": "1000060",
    "end": "1007460"
  },
  {
    "text": "So the basic problem\nwith just relying on this is that, like I said, there's\na lot of different ways",
    "start": "1007460",
    "end": "1012910"
  },
  {
    "text": "to force the CSS and HTML\nparsers to mal-parse something. So these things are\nnot complete solutions.",
    "start": "1012910",
    "end": "1019080"
  },
  {
    "text": "They don't have the\nperfect coverage. AUDIENCE: Shouldn't this\njust be like the lead-in from the browsers? Because it seems like not\nthe browser's job to do this.",
    "start": "1019080",
    "end": "1027449"
  },
  {
    "text": "PROFESSOR: You mean it's\nnot the browser's job to sanitize this kind of stuff? AUDIENCE: Yeah. PROFESSOR: I mean,\nyou could imagine sort of having a browser sit\natop a proxy, for example.",
    "start": "1027449",
    "end": "1035119"
  },
  {
    "text": "And maybe the proxy did\nsort of cleaning like this. I mean, intuitive reason\nwhy it might make sense to do it inside the\nbrowser is because so many",
    "start": "1035119",
    "end": "1041944"
  },
  {
    "text": "of the legitimate parsing\nengines are inside the browser. So presumably, if you're closer\nto where the actual parsing's",
    "start": "1041945",
    "end": "1048060"
  },
  {
    "text": "being done, it's better. But you're right. In practice, you can imagine\nthere being sort of defense in layers, basically.",
    "start": "1048060",
    "end": "1053190"
  },
  {
    "text": "AUDIENCE: I think\nwhat he might be saying is that it's the\nweb developer's job, not the client's job\nto sanitize this.",
    "start": "1053190",
    "end": "1059960"
  },
  {
    "text": "PROFESSOR: But, I mean, that's\nkind of like saying-- so in a certain sense, we could\nsay that about processes, too, in Unix or Windows.",
    "start": "1059960",
    "end": "1066360"
  },
  {
    "text": "So we could say it's\nsort of developers' jobs to make sure those\nthings stay isolated. But in fact, the\nOS and the hardware",
    "start": "1066360",
    "end": "1073090"
  },
  {
    "text": "as well has an\nimportant role to play, because [INAUDIBLE] trusted\nwhereas any two arbitrary programs developed by any\ntwo arbitrary developers",
    "start": "1073090",
    "end": "1079170"
  },
  {
    "text": "may or may not be trusted to\nsort of implement security correctly. But you're correct. And in fact, frameworks\nlike Django or whatnot,",
    "start": "1079170",
    "end": "1085100"
  },
  {
    "text": "they actually try to\nhelp you to get around some of these problems. So anyways, so yeah, so filters\nare not a perfect solution.",
    "start": "1085100",
    "end": "1091350"
  },
  {
    "text": "And also, filters\ncan't prevent what's",
    "start": "1091350",
    "end": "1098460"
  },
  {
    "text": "known as a persistent--\npersistent-- cross-site",
    "start": "1098460",
    "end": "1107120"
  },
  {
    "text": "scripting attacks. This is known as sort of a\nreflected or transient one,",
    "start": "1107120",
    "end": "1112429"
  },
  {
    "text": "because this script code just\nsort of lives in the URL. Then once the user's\nclosed that URL,",
    "start": "1112430",
    "end": "1117460"
  },
  {
    "text": "basically, the attack's gone. But you could imagine\nthat you could have someone who-- user puts\nmalicious HTML in the Comment",
    "start": "1117460",
    "end": "1131509"
  },
  {
    "text": "section for a website.  And if the web server actually\naccepts that comment is valid,",
    "start": "1131510",
    "end": "1143570"
  },
  {
    "text": "then that comment, with\nthis malicious payload, can essentially\nlive there forever. So whenever any user\ngoes there, they",
    "start": "1143570",
    "end": "1149330"
  },
  {
    "text": "would be exposed to\nthat malicious content. Another example,\nwhich is sort of funny and sad, as\nall these things,",
    "start": "1149330",
    "end": "1155750"
  },
  {
    "text": "is if you look at\ndating websites. ",
    "start": "1155750",
    "end": "1161090"
  },
  {
    "text": "So some dating\nwebsites actually allow users to put full-blown\nHTML in their profile.",
    "start": "1161090",
    "end": "1169600"
  },
  {
    "text": "So what does that mean? So when someone else is\nlonely, presumably, or looking to find their one true soul\nmatch, they go to your website.",
    "start": "1169600",
    "end": "1178200"
  },
  {
    "text": "They're going to\nrun HTML that you've crafted in the context\nof their session.",
    "start": "1178200",
    "end": "1183450"
  },
  {
    "text": "And so that can also be a\nvery damaging attack as well. So just doing these\nkinds of filters don't protect against\nthings like that.",
    "start": "1183450",
    "end": "1189901"
  },
  {
    "text": "AUDIENCE: So [INAUDIBLE]\nin the Comments section presumably does\nthat by setting a post--",
    "start": "1189901",
    "end": "1195673"
  },
  {
    "text": "the information goes to the\nserver in a post variable or something like that? PROFESSOR: So there's a\nbunch of different ways",
    "start": "1195673",
    "end": "1201220"
  },
  {
    "text": "you could imagine doing it. Yeah. So one way you could\nimagine doing it is a post. Another way you could imagine\ndoing it is a dynamic XML",
    "start": "1201220",
    "end": "1206795"
  },
  {
    "text": "HTTP request. AUDIENCE: OK. But if it's like a post, why\ncan't you just scan through it and do the same thing\nthat you have in the--",
    "start": "1206795",
    "end": "1213430"
  },
  {
    "text": "PROFESSOR: Yes. So you're exactly\ncorrect about that, and we'll discuss some\nof that in a second. But you're exactly\ncorrect that the server",
    "start": "1213430",
    "end": "1218915"
  },
  {
    "text": "side of the\napplication should be very defensive and\nmistrustful of this stuff. So you're exactly right. So you could imagine that\nwhen the server maybe",
    "start": "1218915",
    "end": "1225860"
  },
  {
    "text": "saw something like\nthis, [INAUDIBLE] even if the browser did not. You're correct about that.",
    "start": "1225860",
    "end": "1232399"
  },
  {
    "text": "All right. So that's basically a survey\nof these cross-site filters in the browser.",
    "start": "1232400",
    "end": "1237410"
  },
  {
    "text": "So another defense against\ncross-site scripting",
    "start": "1237410",
    "end": "1243510"
  },
  {
    "text": "is something known\nas HTTP-only cookies.",
    "start": "1243510",
    "end": "1249480"
  },
  {
    "text": " And so the basic\nidea behind this is that a server can\nactually tell the browser",
    "start": "1249480",
    "end": "1258550"
  },
  {
    "text": "that client-side\nJavaScript should not be able to access a\nparticular cookie.",
    "start": "1258550",
    "end": "1263970"
  },
  {
    "text": "And so basically,\nthe server can just send a header value in response\nin the set Cookie field.",
    "start": "1263970",
    "end": "1270187"
  },
  {
    "text": "It can say, hey, don't let\nclients like JavaScript manipulate this cookie. So only the server\ncould do this. And so this is only a\npartial defense, though,",
    "start": "1270187",
    "end": "1277019"
  },
  {
    "text": "because the attacker can\nstill issue requests that contain the user's cookies.",
    "start": "1277020",
    "end": "1284309"
  },
  {
    "text": "So this was the\ncross-site request forgery that we looked at\nin last lecture.",
    "start": "1284310",
    "end": "1290130"
  },
  {
    "text": "So even if JavaScript code\ncan't manipulate cookies, the attacker can still\ndo things like conjure",
    "start": "1290130",
    "end": "1295766"
  },
  {
    "text": "up a URL to some e-commerce\nsite, let's say buy.com. The attacker can put whatever\nitem the attacker wants to buy.",
    "start": "1295766",
    "end": "1304149"
  },
  {
    "text": "So puts a Ferrari, for example. And then the attacker can then\nsay, who should this go to?",
    "start": "1304150",
    "end": "1312039"
  },
  {
    "text": "This should go to the attacker. And so even though\nclients like JavaScript can't access the\ncookie, there's nothing",
    "start": "1312040",
    "end": "1318789"
  },
  {
    "text": "that prevents the attacker\nfrom just conjuring up a URL like this. This is what some\nof the CSRF tokens",
    "start": "1318789",
    "end": "1324671"
  },
  {
    "text": "help to prevent\nagainst, which we'll talk about a little bit later. So another thing\nthat you can try",
    "start": "1324671",
    "end": "1332330"
  },
  {
    "text": "to do to prevent these\ncross-site scripting attacks is privilege separation.",
    "start": "1332330",
    "end": "1338809"
  },
  {
    "text": " And so the idea\nhere is basically",
    "start": "1338810",
    "end": "1346669"
  },
  {
    "text": "that you want to use a separate\ndomain for all the content that",
    "start": "1346670",
    "end": "1356630"
  },
  {
    "text": "is untrusted.  And so for example, a lot of\nthe online server providers",
    "start": "1356630",
    "end": "1366400"
  },
  {
    "text": "were things like email or\nonline productivity suites. So think Google Docs, Office\n365, so on and so forth.",
    "start": "1366400",
    "end": "1372620"
  },
  {
    "text": "They actually use\na separate domain to host user-submitted content. So Google, I think\nthey still use this.",
    "start": "1372620",
    "end": "1380990"
  },
  {
    "text": "They used to put all\nthe stuff that users submitted into\nsome special domain called googleusercontent.com. ",
    "start": "1380990",
    "end": "1391492"
  },
  {
    "text": "And so here, they\nwould put things like cached copies of pages,\nyour Gmail [INAUDIBLE], and things like this.",
    "start": "1391492",
    "end": "1397320"
  },
  {
    "text": "And at least as of\na year or two ago, this is like one of the top 25\n[? Alexa-visited ?] domains,",
    "start": "1397320",
    "end": "1402990"
  },
  {
    "text": "because Google services\nwere so popular. And so what's the advantage\nof putting stuff in here?",
    "start": "1402990",
    "end": "1408669"
  },
  {
    "text": "Well, the hope, at\nleast, is that if there is some type of cross-site\nscripting vulnerability",
    "start": "1408670",
    "end": "1414700"
  },
  {
    "text": "or something like this in\na user-submitted content, then hopefully, the\ndaemons would just",
    "start": "1414700",
    "end": "1420240"
  },
  {
    "text": "be limited to that domain. It wouldn't actually affect\nthe full-blown google.com.",
    "start": "1420240",
    "end": "1426122"
  },
  {
    "text": "This isn't a perfect\ndefense, though, because user-submitted\ncontent may have references to things from google.com.",
    "start": "1426122",
    "end": "1431695"
  },
  {
    "text": "And so once again,\nthis is only sort of a partial fix for a much\nmore pervasive problem.",
    "start": "1431695",
    "end": "1438325"
  },
  {
    "text": "Now, another thing\nyou could do-- and this gets back to the\ngentleman's suggestion",
    "start": "1438326",
    "end": "1443429"
  },
  {
    "text": "over here is that\nwe can actually do content sanitization.",
    "start": "1443430",
    "end": "1448695"
  },
  {
    "start": "1448695",
    "end": "1454269"
  },
  {
    "text": "And so the idea here is that,\nessentially, whenever you--",
    "start": "1454270",
    "end": "1461570"
  },
  {
    "text": "where you can be the browser,\nwhere you can be the web server, or whatever-- whenever\nyou receive untrusted content,",
    "start": "1461570",
    "end": "1467730"
  },
  {
    "text": "you don't trust it at all. And so you go through it, and\nyou do things to sort of render it sort of neutral such\nthat it can't actually",
    "start": "1467730",
    "end": "1475210"
  },
  {
    "text": "execute code or subvert\nyour system in any way. And so an example of this is\nthe Django template system.",
    "start": "1475210",
    "end": "1485820"
  },
  {
    "text": " And so Django is an\nexample of a web framework.",
    "start": "1485820",
    "end": "1493896"
  },
  {
    "text": "So basically, the\nhigh-level web framework is something that helps\nto automate and secure",
    "start": "1493896",
    "end": "1499560"
  },
  {
    "text": "some of the sort of tedious\ntasks of developing a website. So it will help you with\nmaking database access easier.",
    "start": "1499560",
    "end": "1506740"
  },
  {
    "text": "It'll help you with doing\nthings like session management. And it will also help you with\nmaintaining a consistent look",
    "start": "1506740",
    "end": "1513520"
  },
  {
    "text": "and feel across your website. And so one way to maintain\nthat consistent look and feel is to use this\nnotion of templates.",
    "start": "1513520",
    "end": "1520040"
  },
  {
    "text": "So all of your\npages automatically start out with the\nsame CSS and things like that, the same styles.",
    "start": "1520040",
    "end": "1525700"
  },
  {
    "text": "But then there's these\nportions in the web page where you can specialize\nit with the particular news",
    "start": "1525700",
    "end": "1530840"
  },
  {
    "text": "article that's at the top of\neverybody's mind that day, or something like that,\nor user-specific content.",
    "start": "1530840",
    "end": "1536630"
  },
  {
    "text": "So for example, in Django,\nyou can look at a template, and it might look like\nsomething like this.",
    "start": "1536630",
    "end": "1542950"
  },
  {
    "text": "So you have a bold tag. It says, Hello.",
    "start": "1542950",
    "end": "1548350"
  },
  {
    "text": "And then you have these braces\nhere, these double braces. And it says, name. ",
    "start": "1548350",
    "end": "1555639"
  },
  {
    "text": "And so essentially,\nwhat this means is that this is like a\nplaceholder variable.",
    "start": "1555640",
    "end": "1561000"
  },
  {
    "text": "So essentially, these pages\nget dynamically generated. So when the user goes\nto a Django site,",
    "start": "1561000",
    "end": "1566780"
  },
  {
    "text": "the Django server says,\nOK, well, this name is going to be somewhere,\nwho knows, in the cookie.",
    "start": "1566780",
    "end": "1571850"
  },
  {
    "text": "Maybe it's going to be in\na CGI string, whatever. And so as the Django\nserver dynamically generates the page\n[? to return ?] to user,",
    "start": "1571850",
    "end": "1577990"
  },
  {
    "text": "it replaces this\nspecial reference here with whatever the value\nof this variable is.",
    "start": "1577990",
    "end": "1583339"
  },
  {
    "text": "So it's pretty straightforward. This is kind of like that\ndinky CGI server I showed you. So just reflecting\nuser-submitted content",
    "start": "1583339",
    "end": "1589480"
  },
  {
    "text": "right here. But Django actually does it\nbetter than the silly CGI server that I showed you,\nbecause it uses this notion",
    "start": "1589480",
    "end": "1596260"
  },
  {
    "text": "of content sanitization. So Django expects that\nusers may be adversarial.",
    "start": "1596260",
    "end": "1601387"
  },
  {
    "text": "So it's not just\ngoing to directly put the value of the\nname variable here. Instead, it is going to\nencode it in such a way",
    "start": "1601387",
    "end": "1607460"
  },
  {
    "text": "that this content will\nnever be able to escape out of the HTML context\nand execute JavaScript",
    "start": "1607460",
    "end": "1613292"
  },
  {
    "text": "or something like this. So for example,\none thing it'll do is it'll take the\nangle brackets,",
    "start": "1613292",
    "end": "1620180"
  },
  {
    "text": "and it will translate them\ninto these HTML entities.",
    "start": "1620180",
    "end": "1625350"
  },
  {
    "text": "So the less than character\ngets transformed into this. The greater than character\ngets translated into this.",
    "start": "1625350",
    "end": "1636060"
  },
  {
    "text": "Double quotations get\ntranslated into ampersand quote,",
    "start": "1636060",
    "end": "1644720"
  },
  {
    "text": "and so on and so forth. And so what this ensures is\nthat if the content the user put",
    "start": "1644720",
    "end": "1650200"
  },
  {
    "text": "in name actually tries\nto contain angle brackets or things like this, then\nit'll basically be neutered.",
    "start": "1650200",
    "end": "1655367"
  },
  {
    "text": "And it'll be translated\ninto something that would not be\ninterpreted as HTML on the client-side browser.",
    "start": "1655367",
    "end": "1661540"
  },
  {
    "text": "So does that make sense? So now I know that this is not\na completely foolproof defense",
    "start": "1661540",
    "end": "1668361"
  },
  {
    "text": "against some of this\ncross-site scripting stuff. And the reason, as we\nshowed in the example, is that these grammars for\nHTML, and CSS, and JavaScript",
    "start": "1668361",
    "end": "1675799"
  },
  {
    "text": "are so complicated that\nit's very easy to confuse the browser's parser.",
    "start": "1675800",
    "end": "1681490"
  },
  {
    "text": "So for example, let's say that\nyou had something like this.",
    "start": "1681490",
    "end": "1687020"
  },
  {
    "text": "And this is a very\ncommon thing to do in frameworks like Django.",
    "start": "1687020",
    "end": "1692510"
  },
  {
    "text": "So you have some div. And then you want to set\nits class dynamically.",
    "start": "1692510",
    "end": "1700380"
  },
  {
    "text": "So you set its class to some\nvar, so on and so forth.",
    "start": "1700380",
    "end": "1706692"
  },
  {
    "text": "So the idea is that when\nDjango processes this, it should figure out what the\ncurrent styling is and then put it in here. Well, one thing\nyou can do is maybe",
    "start": "1706692",
    "end": "1713850"
  },
  {
    "text": "the attacker supplies something\nlike a string like this. So attacker will say, class 1.",
    "start": "1713850",
    "end": "1721690"
  },
  {
    "text": "OK, so far so good, because\nthat seems like a valid CSS expression. But then the attacker\nwill then try",
    "start": "1721690",
    "end": "1727510"
  },
  {
    "text": "to put some JavaScript here. So it might say, onclick\nequals-- and then put",
    "start": "1727510",
    "end": "1737980"
  },
  {
    "text": "JavaScript URL. And then put some\nfunction call here.",
    "start": "1737980",
    "end": "1746740"
  },
  {
    "text": "So this is malformed. The browser should probably\njust do a fail-stop here.",
    "start": "1746740",
    "end": "1752787"
  },
  {
    "text": "But the problem is\nthat if you've ever looked at the HTML for a\nreal web page, all of it's broken, even for like\nlegitimate, benevolent sites.",
    "start": "1752787",
    "end": "1760250"
  },
  {
    "text": "People just can't hack HTML. So if the browser\nwere to be fail-stop, literally, no site that you\nenjoy would ever work ever.",
    "start": "1760250",
    "end": "1767910"
  },
  {
    "text": "If you ever want to be\ndisappointed by the world if I haven't helped\nyou do that enough, open up your JavaScript console\nwhen you browse a website",
    "start": "1767910",
    "end": "1775620"
  },
  {
    "text": "and see how many\nerrors get spit out. Like, go to CNN and just see\nhow many errors get spit out.",
    "start": "1775620",
    "end": "1781399"
  },
  {
    "text": "CNN basically kind of works,\nbut it's very disturbing, because if you were to\nopen up Acrobat reader",
    "start": "1781400",
    "end": "1786600"
  },
  {
    "text": "and you're just\nconstantly throwing null pointer\nexceptions, you would feel a bit cheated by life. But in the web, apparently,\nwe've learned to accept this.",
    "start": "1786600",
    "end": "1793072"
  },
  {
    "text": "So because browsers have to be\nso tolerant of these things, they will actually try\nto massage malformed code into something that\nseems reasonable.",
    "start": "1793072",
    "end": "1799490"
  },
  {
    "text": "And therein lies a\nsecurity vulnerability. ",
    "start": "1799490",
    "end": "1805060"
  },
  {
    "text": "So I guess the\ntake-home point for this is that content\nsanitization kind of works.",
    "start": "1805060",
    "end": "1812666"
  },
  {
    "text": "So it is literally\nbetter than nothing. It can actually\ncatch a lot of cases. But in many cases, it\nis not a full defense.",
    "start": "1812666",
    "end": "1821140"
  },
  {
    "text": "And so one thing you might\nactually think about doing is-- actually, let's\nput this over here.",
    "start": "1821140",
    "end": "1828200"
  },
  {
    "text": "You might think about sort of\nusing a less expressive markup",
    "start": "1828200",
    "end": "1836808"
  },
  {
    "text": "language.  So what do I mean by that?",
    "start": "1836808",
    "end": "1842540"
  },
  {
    "text": "So HTML and CSS and JavaScript\nare [? touring ?] complete. They allow you to do all kinds\nof fun things, but-- yeah?",
    "start": "1842540",
    "end": "1849721"
  },
  {
    "text": "AUDIENCE: Sorry to bother you. When does content\nsanitization not work? PROFESSOR: When does content--",
    "start": "1849721",
    "end": "1855400"
  },
  {
    "text": "AUDIENCE: In many\ncases, it doesn't work. PROFESSOR: Oh, yeah. So like in this\ncase, for example, Django will probably not be\nable to statically determine",
    "start": "1855400",
    "end": "1861630"
  },
  {
    "text": "this is a bad thing. Like, in this particular case. But in the case where I inserted\nthat malformed image tag--",
    "start": "1861630",
    "end": "1869450"
  },
  {
    "text": "I basically said-- AUDIENCE: In that\nparticular case, I would expect the\nclass=assignment to be in quotes and then for that\nthing to not have any effect.",
    "start": "1869450",
    "end": "1877600"
  },
  {
    "text": "So Django could enforce\ncodes that [INAUDIBLE]. PROFESSOR: Well, see, there's\na little bit trickiness there,",
    "start": "1877600",
    "end": "1883330"
  },
  {
    "text": "because if we assumed that\nall pages were written-- well, pull me back up a little bit.",
    "start": "1883330",
    "end": "1889380"
  },
  {
    "text": "If we assume the HTML\ngrammar was well specified and the CSS grammar\nwas well specified",
    "start": "1889380",
    "end": "1895080"
  },
  {
    "text": "and so on and so\nforth, then you could imagine a world in which\nperfect parsers would be able to sort of\ncatch these problems",
    "start": "1895080",
    "end": "1902059"
  },
  {
    "text": "or somehow convert\nthem to normal things. But in fact, the HTML\ngrammars and the CSS grammars are not well specified.",
    "start": "1902060",
    "end": "1908860"
  },
  {
    "text": "And then on top of that,\nbrowsers don't implement specs. So it's like Babushka\ndolls of terror.",
    "start": "1908860",
    "end": "1915010"
  },
  {
    "text": "So I mean, this, in fact,\ngets into this notion here. Because I think essentially\nwhat you're saying is, well, look, if we have\nthe grammar for something,",
    "start": "1915010",
    "end": "1921650"
  },
  {
    "text": "that should mean something. And as it turns\nout, if you stick to a less expressive grammar,\nthen it is actually much easier",
    "start": "1921650",
    "end": "1929346"
  },
  {
    "text": "to do content sanitization.  There's some language.",
    "start": "1929346",
    "end": "1934620"
  },
  {
    "text": "It's called Markdown\ninstead of markup.",
    "start": "1934620",
    "end": "1940740"
  },
  {
    "text": "[? Wall, ?] right? And so with Markdown,\nthe basic idea is that it's designed\nto be a language that",
    "start": "1940740",
    "end": "1947100"
  },
  {
    "text": "allows, for example,\nusers to submit comments, but it doesn't actually have\nthings like the blank tag,",
    "start": "1947100",
    "end": "1952415"
  },
  {
    "text": "and applet support,\nand stuff like that. And so in Markdown, it's\nactually much easier to do what you suggested, which\nseems like a reasonable thing",
    "start": "1952415",
    "end": "1959360"
  },
  {
    "text": "at first glance. Just define the grammar\nunambiguously and then just enforce that grammar.",
    "start": "1959360",
    "end": "1965880"
  },
  {
    "text": "So it's much easier\nto do sanitization in a simple language than\nin the full-blown HTML, CSS,",
    "start": "1965880",
    "end": "1972410"
  },
  {
    "text": "and JavaScript. And in a certain\nsense, think about it like the difference between\nunderstanding gnarly C",
    "start": "1972410",
    "end": "1977680"
  },
  {
    "text": "code versus gnarly Python code. There's actually\na big difference in trying to understand that\nmuch more expressive language.",
    "start": "1977680",
    "end": "1984820"
  },
  {
    "text": "Because it can do\nmany more things. By constraining\nexpressivity, you oftentimes improve security.",
    "start": "1984820",
    "end": "1990135"
  },
  {
    "text": " Does that all make sense? ",
    "start": "1990135",
    "end": "1997440"
  },
  {
    "text": "All right. So another thing\nthat you can imagine doing to protect against\ncross-site scripting attacks",
    "start": "1997440",
    "end": "2004270"
  },
  {
    "text": "is to use something called\nCSP, Content Security Policy.",
    "start": "2004270",
    "end": "2011040"
  },
  {
    "start": "2011040",
    "end": "2016750"
  },
  {
    "text": "And so the idea behind\nCSP is that it's going to allow a web server to-- oh.",
    "start": "2016750",
    "end": "2023295"
  },
  {
    "text": "AUDIENCE: Yeah, I'm just curious\nabout this Markdown language. So all browsers know how\nto parse this language?",
    "start": "2023295",
    "end": "2030864"
  },
  {
    "text": "PROFESSOR: No, no, no. So what happens with a lot\nof these types of languages is that you essentially--\nyou can convert them.",
    "start": "2030864",
    "end": "2036640"
  },
  {
    "text": "You can pile them down to\nHTML, but they're not natively understood by the\nbrowser, typically.",
    "start": "2036640",
    "end": "2042700"
  },
  {
    "text": "So in other words, you've got\nsome comment submission system.",
    "start": "2042700",
    "end": "2049119"
  },
  {
    "text": "It internally expresses\nstuff in Markdown. But then before it can\nbe rendered to the page, it essentially goes to\nthe Markdown compiler.",
    "start": "2049120",
    "end": "2056224"
  },
  {
    "text": "The Markdown compiler then\ntranslates it to HTML. AUDIENCE: I see. Thanks. [INAUDIBLE] Markdown\nmight not be",
    "start": "2056224",
    "end": "2063725"
  },
  {
    "text": "the best trick\n[? to use Markdown ?] [INAUDIBLE]. PROFESSOR: So Markdown\ndoes allow inline HTML.",
    "start": "2063725",
    "end": "2068850"
  },
  {
    "text": "As far as I know,\nthere's a way to disable that in the compiler. I could be wrong about that. But I believe that\nthere's a flag",
    "start": "2068850",
    "end": "2074595"
  },
  {
    "text": "you can pass to get rid of it. But you're correct. If you use a\nconstrained language but then you embed an\nunconstrained language,",
    "start": "2074595",
    "end": "2082379"
  },
  {
    "text": "then that-- I mean, the\nterrorists have won. So you're right about that. OK.",
    "start": "2082380",
    "end": "2087899"
  },
  {
    "text": "Yeah. So another thing you can\ndo to improve security is this thing called\nContent Security Policy.",
    "start": "2087900",
    "end": "2093550"
  },
  {
    "text": "So like I was saying, what\nthis allows the server to do is to tell a web browser\nwhat types of content",
    "start": "2093550",
    "end": "2101140"
  },
  {
    "text": "can be loaded in the\npage it's sending back, and also where that\ncontent should come from.",
    "start": "2101140",
    "end": "2106510"
  },
  {
    "text": "So for example, in\nan HTTP response, the server might be able\nto say something like this.",
    "start": "2106510",
    "end": "2114060"
  },
  {
    "text": "It'd include the Content\nSecurity Policy header.",
    "start": "2114060",
    "end": "2120640"
  },
  {
    "text": "And then it might say\nsomething like the default",
    "start": "2120640",
    "end": "2126390"
  },
  {
    "text": "source is going to equal self. ",
    "start": "2126390",
    "end": "2134811"
  },
  {
    "text": "And it will also accept things\nfrom asterisk mydomain.com. ",
    "start": "2134811",
    "end": "2143270"
  },
  {
    "text": "So what does this mean? So essentially, the server\nis saying the content",
    "start": "2143270",
    "end": "2150300"
  },
  {
    "text": "from this site should\nonly come from whatever it is that the domain is\nfor the particular page.",
    "start": "2150300",
    "end": "2156250"
  },
  {
    "text": "And any other subdomain\nfrom mydomain.com. So what that means,\nbasically, is",
    "start": "2156250",
    "end": "2162640"
  },
  {
    "text": "that let's say if self\nwas bound to foo.com,",
    "start": "2162640",
    "end": "2167744"
  },
  {
    "text": "let's say, that's the origin\nof the server that's sending this thing back to the browser. So if, somehow, there is\na cross-site scripting",
    "start": "2167745",
    "end": "2174540"
  },
  {
    "text": "attack and the page tried\nto generate a reference to, let's say, bar.com,\nthe browser would say, OK, bar.com is not self.",
    "start": "2174540",
    "end": "2181960"
  },
  {
    "text": "Bar.com is also not in this\nsort of set of domains. So therefore, the\nbrowser can just say,",
    "start": "2181960",
    "end": "2187320"
  },
  {
    "text": "I will not allow that\nrequest to go forward. So this is actually a\npretty powerful mechanism.",
    "start": "2187320",
    "end": "2193960"
  },
  {
    "text": "And you can actually specify\nmore fine-grained controls here. You can say, my images\nshould come from here.",
    "start": "2193960",
    "end": "2199880"
  },
  {
    "text": "My scripts should come from\nhere, so on and so forth. This is actually pretty nice.",
    "start": "2199880",
    "end": "2205150"
  },
  {
    "text": "And one nice thing\nabout this, too, is that it actually\nprevents inline JavaScript.",
    "start": "2205150",
    "end": "2210440"
  },
  {
    "text": "So you can't have script tag\nand then some literal JavaScript and close script tag. Everything has to come from\na script tag with a source.",
    "start": "2210440",
    "end": "2217350"
  },
  {
    "text": "So it can be validated\nthrough this. And also, a Content\nSecurity Policy prevents these danger\nstatements like eval.",
    "start": "2217350",
    "end": "2225230"
  },
  {
    "text": "So eval basically\nallows a web page to check dynamically\ngenerated JavaScript code. And so if the CSP\nheader is specified,",
    "start": "2225230",
    "end": "2233070"
  },
  {
    "text": "the browser does\nnot execute evals. So does that all make sense?",
    "start": "2233070",
    "end": "2239358"
  },
  {
    "text": "AUDIENCE: So since it's a\nkind of ad-hoc set of things, is that like a complete set\nof things that it [INAUDIBLE]?",
    "start": "2239358",
    "end": "2246246"
  },
  {
    "text": "PROFESSOR: No. So there's a whole\nlist of resources that it actually protects. So this is sort of like the\nmost blanket type protection",
    "start": "2246247",
    "end": "2254057"
  },
  {
    "text": "you could get. But like I said,\nit actually allows you to specify, I think,\nlike, where CSS can come from, like a bunch of\ndifferent things.",
    "start": "2254057",
    "end": "2259586"
  },
  {
    "text": "AUDIENCE: But on preventing\nevals, that seems like the system's [INAUDIBLE]. Are there are other\nthings [INAUDIBLE]?",
    "start": "2259586",
    "end": "2265050"
  },
  {
    "text": "PROFESSOR: So yeah, there are. So there's always this\nquestion of completeness. ",
    "start": "2265050",
    "end": "2271580"
  },
  {
    "text": "So for example, eval\nis not the only way JavaScript can actually\ngenerate code dynamically. There's the function\nconstructor, for example.",
    "start": "2271580",
    "end": "2278250"
  },
  {
    "text": "There's certain ways you\ncan call a set timeout. You pass in a string. You can evaluate code that way. So I believe that CSP actually\nshuts down those vectors",
    "start": "2278250",
    "end": "2285590"
  },
  {
    "text": "as well. But if you're asking, is this\nprovably complete in terms of what it isolates, no.",
    "start": "2285590",
    "end": "2291746"
  },
  {
    "text": "And I don't think that\nany of these solutions are provably complete.",
    "start": "2291746",
    "end": "2296830"
  },
  {
    "text": "AUDIENCE: One really\ninteresting thing about CSP is the fact that you can set\nit to disallow all inline",
    "start": "2296830",
    "end": "2301860"
  },
  {
    "text": "[? dom ?] script on a page. PROFESSOR: Yeah. That's right. Yeah, yeah. AUDIENCE: Which [? helps ?]\n[INAUDIBLE] to be sanitized.",
    "start": "2301860",
    "end": "2307234"
  },
  {
    "text": "PROFESSOR: Yeah. AUDIENCE: [INAUDIBLE]\nprevents an attacker from--",
    "start": "2307234",
    "end": "2312410"
  },
  {
    "text": "PROFESSOR: So that\nhelps with some things. But that still would allow,\nlike, [INAUDIBLE] to use eval.",
    "start": "2312410",
    "end": "2318400"
  },
  {
    "text": "So that's why it's\nimportant to try to get rid of all of those dynamically. All of those interfaces\n[? use dynamic ?]",
    "start": "2318400",
    "end": "2324102"
  },
  {
    "text": "code generation. AUDIENCE: If you list your tag\nwith a source but then also inline code, is there like\nstandardized [INAUDIBLE] that",
    "start": "2324102",
    "end": "2330260"
  },
  {
    "text": "all browsers do with-- PROFESSOR: Yeah. So what should happen\nis that the inline code",
    "start": "2330260",
    "end": "2337960"
  },
  {
    "text": "should be ignored. The browser should\nalways get the code from the source attribute.",
    "start": "2337960",
    "end": "2343940"
  },
  {
    "text": "I actually don't know\nif all browsers do that. I've actually\npersonally experienced browsers exhibit different\nbehavior [? in that. ?]",
    "start": "2343940",
    "end": "2350490"
  },
  {
    "text": "This was a couple years\nago, so I'm not sure. And so yeah. So one thing to keep in\nmind about doing work",
    "start": "2350490",
    "end": "2357840"
  },
  {
    "text": "in web security is\nthat in a sense, it's almost like\na natural science. So it's like people\nactually propose theories",
    "start": "2357840",
    "end": "2364180"
  },
  {
    "text": "about how browsers work. And then you go\nseeing them do that. And so that can be a\nlittle bit disappointing, because we're taught, yay,\nalgorithms, and proofs,",
    "start": "2364180",
    "end": "2371790"
  },
  {
    "text": "and stuff like that. But these browsers are\nso ill-behaved that a lot of times, the answer\nis maybe or maybe not.",
    "start": "2371790",
    "end": "2379440"
  },
  {
    "text": "And then [? you go ?]\nsee, as we'll see. They keep on adding features. It gets back to\nyour question about,",
    "start": "2379440",
    "end": "2384890"
  },
  {
    "text": "are these things\nprovably complete? I think web vendors have punted\non this notion of creating",
    "start": "2384890",
    "end": "2392260"
  },
  {
    "text": "a browser that is\nprovably [INAUDIBLE]. Basically, what\nthey try to do is just try to keep one step\nahead of the attackers.",
    "start": "2392260",
    "end": "2398386"
  },
  {
    "text": "And we'll see some examples of\nthat further in the lecture. So yeah. So CSP is actually pretty cool.",
    "start": "2398386",
    "end": "2404309"
  },
  {
    "text": "Another thing that's useful is\nthat the server can set this",
    "start": "2404310",
    "end": "2409920"
  },
  {
    "text": "HTTP header called\nX-Content-Type-Options,",
    "start": "2409920",
    "end": "2416500"
  },
  {
    "text": "and then can say, nosniff. And so what this means is\nthat this prevents the browser",
    "start": "2416500",
    "end": "2423395"
  },
  {
    "text": "from doing some of those, quote,\nunquote, helpful optimizations, like we discussed last lecture,\nwhere it will say, a-ha,",
    "start": "2423395",
    "end": "2429595"
  },
  {
    "text": "there's a mismatch\nbetween the file extension and the actual [? bytes ?] that\nI have sniffed in the contents. So let me somehow\nmassage this content",
    "start": "2429595",
    "end": "2435660"
  },
  {
    "text": "to some different thing. And then all of a sudden, you've\ngiven the barbarians the keys to the kingdom. So you can set this\nheader to basically say,",
    "start": "2435660",
    "end": "2442453"
  },
  {
    "text": "browser, do not do that. And so that can be\nuseful in mitigating some types of attacks as well.",
    "start": "2442453",
    "end": "2448430"
  },
  {
    "text": "All right. So that's kind of a\nquick survey of some of these cross-site\nscripting vulnerabilities.",
    "start": "2448430",
    "end": "2455352"
  },
  {
    "text": "So now let's look at another\npopular vector for attacks.",
    "start": "2455352",
    "end": "2463030"
  },
  {
    "text": "And that vector is\ngoing to be SQL.",
    "start": "2463030",
    "end": "2468524"
  },
  {
    "text": "And so you've probably heard\nof these SQL injection attacks.",
    "start": "2468524",
    "end": "2475440"
  },
  {
    "text": "And so what these attacks do is\nthey take advantage of the fact that on the back end,\nfor a lot of websites,",
    "start": "2475440",
    "end": "2482720"
  },
  {
    "text": "there's some type of database. And so to dynamically\nconstruct a page that's shown to the user,\nthere have to be some database queries that are\nissued to that back-end server.",
    "start": "2482720",
    "end": "2491190"
  },
  {
    "text": "So imagine that you have some\nquery that looked like this.",
    "start": "2491190",
    "end": "2497369"
  },
  {
    "text": "So you do a SELECT asterisk. So give me all the values\nfrom this query FROM",
    "start": "2497370",
    "end": "2505600"
  },
  {
    "text": "some particular table,\nWHERE the User ID field",
    "start": "2505600",
    "end": "2518970"
  },
  {
    "text": "is equal to something\nthat is specified",
    "start": "2518970",
    "end": "2527820"
  },
  {
    "text": "over the web from some\npotentially untrusted source.",
    "start": "2527820",
    "end": "2533986"
  },
  {
    "text": "So at this point, I may think\nwe all know how this story ends. It ends very badly\nThere are no survivors. So basically, if this comes\nfrom someone untrusted,",
    "start": "2533986",
    "end": "2540990"
  },
  {
    "text": "then you can do all kinds of\n[? chicaner ?] stuff here. So one thing you could do\nis if you want to be a jerk,",
    "start": "2540990",
    "end": "2547380"
  },
  {
    "text": "you could just set\nthis to the string, 0",
    "start": "2547380",
    "end": "2552519"
  },
  {
    "text": "and then something\nlike DELETE TABLE. ",
    "start": "2552520",
    "end": "2561330"
  },
  {
    "text": "So what happens here? So basically, the database\nserver's going to say, OK, I'll set the user ID to 0;.",
    "start": "2561330",
    "end": "2568249"
  },
  {
    "text": "Here's a sort of a new command. DELETE TABLE. OK, cheers, there\ngoes your table. And you're done. And in fact, there\nwas a viral image that",
    "start": "2568249",
    "end": "2574320"
  },
  {
    "text": "went around a couple years ago. It's unclear if it\nwas true, like many of these viral images. But it was that\npeople in Germany",
    "start": "2574320",
    "end": "2579750"
  },
  {
    "text": "had license plates that\nactually said 0; DELETE TABLE. [LAUGHTER]",
    "start": "2579750",
    "end": "2585000"
  },
  {
    "text": "Because the idea is that\nthe security cameras, they would use OCR, Optical\nCharacter Recognition,",
    "start": "2585000",
    "end": "2591160"
  },
  {
    "text": "to figure out what your license\nplate was, and then put it in a SQL database. And there were images\nfloating around.",
    "start": "2591160",
    "end": "2597365"
  },
  {
    "text": "These Volkswagens,\npeople would have this as their license plate. I don't know if that works.",
    "start": "2597365",
    "end": "2602710"
  },
  {
    "text": "It's funny. So I like to believe\nthat it's true. But who knows. But you get the basic\nidea behind that. So once again, the\nidea is you want",
    "start": "2602710",
    "end": "2609859"
  },
  {
    "text": "to be sure to sanitize this\ncontent that you're getting from these untrusted sources.",
    "start": "2609860",
    "end": "2615880"
  },
  {
    "text": "And so note that\nthere may be some sort of straightforward things\nthat don't quite work. So you might think,\nOK, well then why",
    "start": "2615880",
    "end": "2621603"
  },
  {
    "text": "can't I just put another\nquote here and then",
    "start": "2621603",
    "end": "2626720"
  },
  {
    "text": "put another quote here\nsuch that whatever it is that the attacker\nsubmits, it's going",
    "start": "2626720",
    "end": "2632490"
  },
  {
    "text": "to be enclosed in a string? So this doesn't work, because\nthen the attacker can always just put a quote inside\nhis or her attack string.",
    "start": "2632490",
    "end": "2639079"
  },
  {
    "text": "So a lot of times, these\nsort of half-hearted hacks don't really get you the\nsecurity you think they might.",
    "start": "2639080",
    "end": "2644680"
  },
  {
    "text": "So the solution here\nis that you need",
    "start": "2644680",
    "end": "2650470"
  },
  {
    "text": "to rigorously encode your data. ",
    "start": "2650470",
    "end": "2659420"
  },
  {
    "text": "And once again, that just means\nthat when you get information from an untrusted source,\ndon't just stick it",
    "start": "2659420",
    "end": "2666359"
  },
  {
    "text": "in the system sort of as it is. Make sure that, for\nexample, it can actually",
    "start": "2666360",
    "end": "2672299"
  },
  {
    "text": "escape from whatever\nsandbox or whatnot you think you're actually putting into. So for example, you want to\nput in an Escape function that",
    "start": "2672300",
    "end": "2680750"
  },
  {
    "text": "would prevent\nmaybe the semicolon operator from showing up in a\nraw form and things like this.",
    "start": "2680750",
    "end": "2685850"
  },
  {
    "text": "And so a lot of\nthese web frameworks like Django will actually have\nbuilt-in libraries to do things",
    "start": "2685850",
    "end": "2692850"
  },
  {
    "text": "like character escaping\nfor SQL queries to try to prevent\nsome of this stuff. And a lot of these\nframeworks actually",
    "start": "2692850",
    "end": "2698210"
  },
  {
    "text": "encourage developers not\nto ever directly interface with the database. So it's like Django\nitself would provide",
    "start": "2698210",
    "end": "2703330"
  },
  {
    "text": "some high-level interface which\ndoes sanitization for you. It takes care of some of\nthese icky corner cases.",
    "start": "2703330",
    "end": "2710160"
  },
  {
    "text": "But performance,\nperformance, performance. Sometimes people think\nthat these web frameworks are too slow. So you will still see, on\nthe back end a lot of time,",
    "start": "2710160",
    "end": "2716928"
  },
  {
    "text": "people will still make\nthese raw SQL queries. And that can lead to problems.",
    "start": "2716928",
    "end": "2723330"
  },
  {
    "text": "So you can also\nimagine that there are problems if the web\nserver takes in path names",
    "start": "2723330",
    "end": "2733280"
  },
  {
    "text": "from untrusted images. So imagine that\nsomewhere in your server,",
    "start": "2733280",
    "end": "2738430"
  },
  {
    "text": "you do something like this. You have an open call. And then you say\nthat you're going to read from the WWW directory.",
    "start": "2738430",
    "end": "2744355"
  },
  {
    "text": "You're going to read from the\nimages subdirectory in there.",
    "start": "2744355",
    "end": "2749500"
  },
  {
    "text": "And then you're going to read\nfrom some file name that, once again, is supplied by the user.",
    "start": "2749500",
    "end": "2756110"
  },
  {
    "text": "So as we saw in some of the\ndiscussion of [? Troot ?] and things like this, what\nif this file name maps",
    "start": "2756110",
    "end": "2763270"
  },
  {
    "text": "to something like a bunch\nof instances of the dot dot",
    "start": "2763270",
    "end": "2768475"
  },
  {
    "text": "character? ",
    "start": "2768475",
    "end": "2773830"
  },
  {
    "text": "So if you're not careful,\nthen the untrusted entity can specify basically\nglub, glub, glub, glub,",
    "start": "2773830",
    "end": "2780984"
  },
  {
    "text": "and go down to etc\npassword and may be able to do some evil here. So once again, if you want\nto be able to use the web",
    "start": "2780984",
    "end": "2786950"
  },
  {
    "text": "server or the web\nframework, you need to be able to detect these\ndangerous characters,",
    "start": "2786950",
    "end": "2792319"
  },
  {
    "text": "escape them in\nsome way to prevent sort of those raw\ncommands from executing.",
    "start": "2792320",
    "end": "2798150"
  },
  {
    "text": "So yeah, it's all\npretty straightforward. OK. So let's move on from\nthe discussion of content",
    "start": "2798150",
    "end": "2805760"
  },
  {
    "text": "sanitization, and now let's\ntalk a little bit about cookies. ",
    "start": "2805760",
    "end": "2812670"
  },
  {
    "text": "So cookies are a\nvery popular way to do session\nmanagement, to bind",
    "start": "2812670",
    "end": "2822620"
  },
  {
    "text": "the user to some\nset of resources",
    "start": "2822620",
    "end": "2827920"
  },
  {
    "text": "that exist on the server side. And so a lot of frameworks\nlike Django, like [? zoobar ?] that you see in this\nclass, they actually",
    "start": "2827920",
    "end": "2835300"
  },
  {
    "text": "put a random session\nID inside the cookie. And so the idea is that\nthis session ID is the index",
    "start": "2835300",
    "end": "2843630"
  },
  {
    "text": "into some server-side table. So you just supply\nthe session ID there.",
    "start": "2843630",
    "end": "2850410"
  },
  {
    "text": "And this is where\nyour user info lives. And so as a result, this session\nID and cookies, by extension,",
    "start": "2850410",
    "end": "2860690"
  },
  {
    "text": "are very sensitive entities. And so that's why\na lot of attacks involve stealing of\nthe cookie in order",
    "start": "2860690",
    "end": "2866859"
  },
  {
    "text": "to get that session ID. And so as we discussed\nin the last lecture, the same origin policy can\nhelp you, to a certain extent,",
    "start": "2866860",
    "end": "2872975"
  },
  {
    "text": "against some of these\ncookie-stealing attacks, because there are\norigin-based rules that prevent arbitrary\ntampering with cookies.",
    "start": "2872975",
    "end": "2880050"
  },
  {
    "text": "But one thing that's\na little bit subtle is that you shouldn't share\na domain or a subdomain",
    "start": "2880050",
    "end": "2887000"
  },
  {
    "text": "with someone that\nyou don't trust. Because as we discussed\nin last lecture, there are these sort\nof very subtle rules",
    "start": "2887000",
    "end": "2893500"
  },
  {
    "text": "in which two origins with\nthe same domain or possibly some subdomain relationship,\nthey can actually",
    "start": "2893500",
    "end": "2900500"
  },
  {
    "text": "access each other's cookies. And so if you trust a\ndomain that you shouldn't, then that domain may be able\nto do things like directly",
    "start": "2900500",
    "end": "2908019"
  },
  {
    "text": "set the session ID in that\ncookie that both of you can access.",
    "start": "2908020",
    "end": "2913680"
  },
  {
    "text": "And that can do things\nlike allow the attacker to force the user to use a\nsession ID of the attacker's choosing.",
    "start": "2913680",
    "end": "2919540"
  },
  {
    "text": "And then, for\nexample-- let's say the attacker sets the user's\nGmail cookie, let's say.",
    "start": "2919540",
    "end": "2926310"
  },
  {
    "text": "The user goes to Gmail,\ntypes some emails. The attacker, later on,\ncan then use that cookie or specifically use\nthat session ID,",
    "start": "2926310",
    "end": "2933780"
  },
  {
    "text": "load up Gmail, and\nthen access Gmail as if he or she were the\nuser who was victimized.",
    "start": "2933780",
    "end": "2939040"
  },
  {
    "text": "So there's a lot of subtleties\nwith using these cookies for session management. So there's a lot more we\ncould talk about cookies.",
    "start": "2939040",
    "end": "2946490"
  },
  {
    "text": "We'll discuss some of it\ntoday and last lecture. So you might be thinking, well,\ncan we just get rid of cookies? Cookies just seem more\ntrouble than they're worth,",
    "start": "2946490",
    "end": "2952765"
  },
  {
    "text": "just like [? dribbels. ?] So can\nwe just not have these cookies? So one thing you could imagine\nis you could imagine basically",
    "start": "2952765",
    "end": "2958920"
  },
  {
    "text": "having some notion\nof stateless cookies,",
    "start": "2958920",
    "end": "2965569"
  },
  {
    "text": "of somehow getting rid of the\nnotion of sessions altogether and preventing this\nnasty attack vector that",
    "start": "2965570",
    "end": "2972631"
  },
  {
    "text": "seems to be sort of prevalent\nin all these discussions that we have. So the basic idea here is if you\nwant to go sort of stateless,",
    "start": "2972631",
    "end": "2980210"
  },
  {
    "text": "then this essentially\nmeans you have to authenticate every request.",
    "start": "2980210",
    "end": "2986285"
  },
  {
    "text": " Because the nice\nthing about cookies",
    "start": "2986285",
    "end": "2992560"
  },
  {
    "text": "is that they basically\nfollow you wherever you go. So you authenticate\nonce, and then every subsequent\nrequest you make has this little token in it.",
    "start": "2992560",
    "end": "2998570"
  },
  {
    "text": "But if you want to get rid of\nthose things, well then now you essentially have to have\nsome proof of your authority in every request that you make.",
    "start": "2998570",
    "end": "3005747"
  },
  {
    "text": "And so one way you\ncould imagine doing this is by using something\ncalled MAX, or Message",
    "start": "3005747",
    "end": "3013580"
  },
  {
    "text": "Authentication Codes.  And so the basic way to\nthink about one of these MAX,",
    "start": "3013580",
    "end": "3023020"
  },
  {
    "text": "it's like a hash that\ntakes in a key as well. So the method\nauthentication code",
    "start": "3023020",
    "end": "3028440"
  },
  {
    "text": "is the hash of some key\nand then some message.",
    "start": "3028440",
    "end": "3034290"
  },
  {
    "text": "And so the basic idea is\nthat the client, the user,",
    "start": "3034290",
    "end": "3039410"
  },
  {
    "text": "and the server are going to\nshare some secret key, k. And so the client uses that\nkey to produce a signature",
    "start": "3039410",
    "end": "3048060"
  },
  {
    "text": "over the message that\nit sends to the server. And then the server,\nwho also knows the key, can then use this\nsame function here",
    "start": "3048060",
    "end": "3055710"
  },
  {
    "text": "to validate if a\nsignature is correct. OK. So let's look at a very specific\nexample of how this works.",
    "start": "3055710",
    "end": "3063650"
  },
  {
    "text": "So one real service\nthat uses these types of stateless cookies\nis Amazon Web Services.",
    "start": "3063650",
    "end": "3069740"
  },
  {
    "text": "So like x3, for example. And so basically, Amazon, AWS,\ngives each user two things--",
    "start": "3069740",
    "end": "3081950"
  },
  {
    "text": "gives that user a secret key. ",
    "start": "3081950",
    "end": "3088950"
  },
  {
    "text": "And so this is\nequivalent to the k that we were\ndiscussing over there. And it also gives them\na-- just think of it",
    "start": "3088950",
    "end": "3097319"
  },
  {
    "text": "like an AWS user ID. ",
    "start": "3097320",
    "end": "3102840"
  },
  {
    "text": "So this part is not\nsecret, but this part is. And so every time you want to\nsend a request to AWS via HTTP,",
    "start": "3102840",
    "end": "3109570"
  },
  {
    "text": "you have to send it\nin a special format. So you'll have the first\nline of the GET request.",
    "start": "3109570",
    "end": "3117040"
  },
  {
    "text": "So you want to\naccess some photos.",
    "start": "3117040",
    "end": "3124680"
  },
  {
    "text": "No surprises here. And then you will put\nthe host from which",
    "start": "3124680",
    "end": "3134370"
  },
  {
    "text": "you expect to get it. That's not super important. So this is just some\nAWS server that's there.",
    "start": "3134370",
    "end": "3139731"
  },
  {
    "text": "You'll have the date.  So maybe this is Monday, June 4.",
    "start": "3139731",
    "end": "3148829"
  },
  {
    "text": "Whatever. And then you have this\nthing that's essentially",
    "start": "3148830",
    "end": "3154215"
  },
  {
    "text": "the Authorization field.  And this is where the message\nauthentication code comes in.",
    "start": "3154215",
    "end": "3161620"
  },
  {
    "text": "So essentially, what\nthis looks like is",
    "start": "3161620",
    "end": "3167520"
  },
  {
    "text": "you've got some string here. This represents your\naccess ID, the user ID.",
    "start": "3167520",
    "end": "3176368"
  },
  {
    "text": " And then you've\ngot something here,",
    "start": "3176368",
    "end": "3183530"
  },
  {
    "text": "some other seemingly\nrandom letters. And then these things\nare a signature",
    "start": "3183530",
    "end": "3193349"
  },
  {
    "text": "that use this Message\nAuthentication Code here. So what does that\nsignature look like?",
    "start": "3193350",
    "end": "3200730"
  },
  {
    "text": "So the details are a\nlittle bit complicated. But basically, this\nsignature is over a string",
    "start": "3200730",
    "end": "3207630"
  },
  {
    "text": "that encapsulates a bunch\nof details of this request. So essentially,\nthe string assigned",
    "start": "3207630",
    "end": "3216500"
  },
  {
    "text": "looks something like this. So you put the\nHTTP verb in there.",
    "start": "3216500",
    "end": "3223359"
  },
  {
    "text": "So in this case,\nthat verb is GET. And then you put\n[? indy5 ?] checksum",
    "start": "3223360",
    "end": "3233376"
  },
  {
    "text": "of the message content.  And then you also\nput the content type.",
    "start": "3233376",
    "end": "3241335"
  },
  {
    "text": "So it's html or\nimage or whatever. And put in the date. ",
    "start": "3241335",
    "end": "3247575"
  },
  {
    "text": "And then the resource name,\nwhich is essentially the path",
    "start": "3247575",
    "end": "3254915"
  },
  {
    "text": "that you see over here. So in other words,\nthis string here is the message that you pass\ninto the H MAC over here.",
    "start": "3254915",
    "end": "3266619"
  },
  {
    "text": "And so note that the server\ncan see all this stuff",
    "start": "3266620",
    "end": "3272230"
  },
  {
    "text": "in clear text in the request. And so that's what\nallows the server to validate that that\nmessage authentication",
    "start": "3272230",
    "end": "3278270"
  },
  {
    "text": "code was correct. Because note that the server\nshares that key with the user.",
    "start": "3278270",
    "end": "3283965"
  },
  {
    "text": "So that allows the server to\nvalidate that kind of stuff. So does that all make sense?",
    "start": "3283965",
    "end": "3289065"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]? PROFESSOR: Oh. So in this case,\nfor the content, that's probably going to be\nnothing, like the empty string.",
    "start": "3289065",
    "end": "3295603"
  },
  {
    "text": "But you can imagine there's like\na post or something like that. You'd actually have\nthe data of the HTTP.",
    "start": "3295603",
    "end": "3300900"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] which\nis kind of an unfortunate choice nowadays. PROFESSOR: So I\nbelieve that they do.",
    "start": "3300900",
    "end": "3307059"
  },
  {
    "text": "So I checked the Amazon\ndocumentation yesterday. So I believe they do use it. But I think-- I could be wrong,\nbut I think they actually",
    "start": "3307060",
    "end": "3313734"
  },
  {
    "text": "use a stronger hash here. So that helps a little bit. But you're right.\n[? Indy5 ?] is not the best.",
    "start": "3313734",
    "end": "3319584"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]\nthis works. PROFESSOR: OK. So allow me to help\nyou, hopefully,",
    "start": "3319584",
    "end": "3326059"
  },
  {
    "text": "even though I'm the\nguy who confused you in the first place. So the basic idea\nis that we want",
    "start": "3326060",
    "end": "3332180"
  },
  {
    "text": "to get rid of this notion of\nthis persistent cookie that's always following\nthe user around. Now, the problem, though,\nis that the server",
    "start": "3332180",
    "end": "3339125"
  },
  {
    "text": "needs some way to identify\nwhich client it's talking to. So what we're going\nto do is we're",
    "start": "3339125",
    "end": "3344930"
  },
  {
    "text": "going to ensure that\neach client shares a unique key with the server.",
    "start": "3344930",
    "end": "3352470"
  },
  {
    "text": "And so basically, whenever\nthe client sends a message to the server, the\nclient is going",
    "start": "3352470",
    "end": "3358500"
  },
  {
    "text": "to send the message\nbefore and then also send this special\ncryptographic operation, the result of this\noperation here.",
    "start": "3358500",
    "end": "3364780"
  },
  {
    "text": "AUDIENCE: Oh, OK. [INAUDIBLE]\nand then again, you hash it. PROFESSOR: Yeah. So basically, to\nfirst approximation,",
    "start": "3364780",
    "end": "3371280"
  },
  {
    "text": "like imagine in\nthe regular world, like, this would\nbe some cookie here instead of the authorization. But now we're getting rid of\nthe cookie, and we're saying,",
    "start": "3371280",
    "end": "3378556"
  },
  {
    "text": "here's this clear text message. And then here's\nthis crypto thing, which basically allows\nthe server to figure out",
    "start": "3378556",
    "end": "3384160"
  },
  {
    "text": "who this thing came from. And so the server knows who\nthe user is, because that's",
    "start": "3384160",
    "end": "3390460"
  },
  {
    "text": "embedded in the clear. That's not a secret, right? But this basically\nallows the server to say, aha, I know which\nsecret key this user",
    "start": "3390460",
    "end": "3397005"
  },
  {
    "text": "should have been using\nto create this if that is, in fact, the real user. AUDIENCE: Nice.",
    "start": "3397005",
    "end": "3402706"
  },
  {
    "text": "OK. Thanks. AUDIENCE: So what prevents the\nattacker from finding the key? Where is this secret key? PROFESSOR: Yeah,\nthat's a good question.",
    "start": "3402706",
    "end": "3409358"
  },
  {
    "text": "So in a lot of cases,\nthe client for AWS",
    "start": "3409358",
    "end": "3414770"
  },
  {
    "text": "is not a browser, but some\nVM running in the cloud, for example. So you'll see sort of just\nVM and VM communication.",
    "start": "3414770",
    "end": "3422200"
  },
  {
    "text": "You can also imagine,\ntoo, that users can sort of hand out these links\nor embed them somehow in HTML.",
    "start": "3422200",
    "end": "3430990"
  },
  {
    "text": "So it's like you just have\nsort of this-- inside the HTML",
    "start": "3430990",
    "end": "3436750"
  },
  {
    "text": "or JavaScript source\ncode, you'd have the code to create a request like this. So that's almost like me\ngiving you a capability.",
    "start": "3436750",
    "end": "3442590"
  },
  {
    "text": "So if I give you\none of these things, you can make that request\non my behalf, basically. AUDIENCE: So would\nit be possible to use",
    "start": "3442590",
    "end": "3448835"
  },
  {
    "text": "MACs on the normal\nclients [INAUDIBLE]? PROFESSOR: For a normal--\nyou mean like browsers?",
    "start": "3448835",
    "end": "3455000"
  },
  {
    "text": "AUDIENCE: For normal users. PROFESSOR: Well, I mean,\nyou get into these questions like, where does\nthe key live, which was [? kind of like what ?]\nhe was asking.",
    "start": "3455000",
    "end": "3460930"
  },
  {
    "text": "So in a certain extent, the\nissue of where the key lives is actually super,\nsuper important. Because if the key can be stolen\njust as easily as the cookie,",
    "start": "3460930",
    "end": "3468010"
  },
  {
    "text": "well then we're sort\nof back to square one. So in many cases, this\nstuff is actually just, as I said, sort of\nserver to server,",
    "start": "3468010",
    "end": "3474200"
  },
  {
    "text": "like a VM to VM\nsomewhere in the cloud. So the application\ndeveloper runs a VM that sort of outsources a\nbunch of stored stuff to AWS.",
    "start": "3474200",
    "end": "3483518"
  },
  {
    "text": "AUDIENCE: So do you\nthink [INAUDIBLE] but isn't that kind of like\na bad way of preventing--",
    "start": "3483518",
    "end": "3489979"
  },
  {
    "text": "I mean, they have\nnetwork latency, so it can't be like too\nfine-grained of a constraint that they're putting on. If an attacker sends the same\nrequest again really quickly",
    "start": "3489979",
    "end": "3497251"
  },
  {
    "text": "after the user, wouldn't\nthey be able to [INAUDIBLE]? PROFESSOR: Yeah, yeah, yeah. So suffice it to say that\nsecure timestamping is",
    "start": "3497251",
    "end": "3504849"
  },
  {
    "text": "like several\npeople's PhD theses. But you're exactly right that if\nthis-- just as a crude example.",
    "start": "3504850",
    "end": "3511650"
  },
  {
    "text": "So imagine this just\nsaid, Monday, June 4. Then if, somehow, the\nattacker could get access",
    "start": "3511650",
    "end": "3518470"
  },
  {
    "text": "to this entire\nthing and there was nothing that was\ndifferent about it-- so there was no [? knocks, ?]\nno random stuff like that,",
    "start": "3518470",
    "end": "3524370"
  },
  {
    "text": "then that's right. Then that request\ncould be [INAUDIBLE]. Now, one thing that\nAWS actually does",
    "start": "3524370",
    "end": "3531270"
  },
  {
    "text": "is you can actually\ninclude an expiration date in these things. So one thing you\ncan actually do is",
    "start": "3531270",
    "end": "3538820"
  },
  {
    "text": "add sort of an Expires\nfield, essentially,",
    "start": "3538820",
    "end": "3545670"
  },
  {
    "text": "have that thing be assigned. Then I can hand that reference\nto a bunch of different people. Kind of like I was saying\nin response to his question,",
    "start": "3545670",
    "end": "3551930"
  },
  {
    "text": "it acts as a capability. The server can then check\nthat expiration date from when it actually sees\nit and then not actually--",
    "start": "3551930",
    "end": "3558200"
  },
  {
    "text": "AUDIENCE: But even if\nthe expiration date is like 200 milliseconds in\nthe future or something, as long as the attacker\nhas [INAUDIBLE] latency,",
    "start": "3558200",
    "end": "3564518"
  },
  {
    "text": "then they might\nsend two [INAUDIBLE] two copies instead of one.",
    "start": "3564518",
    "end": "3569683"
  },
  {
    "text": "PROFESSOR: Yeah. That's exactly right. That's exactly right. So yeah, if the\nattacker can somehow--",
    "start": "3569684",
    "end": "3575090"
  },
  {
    "text": "like a network\nattacker, for example, is seeing these things go over\nthe wire-- and you're right. If there's enough wiggle\nroom in the expiration date,",
    "start": "3575090",
    "end": "3583379"
  },
  {
    "text": "then they can exactly\ndo that attack. That's right. OK.",
    "start": "3583379",
    "end": "3589030"
  },
  {
    "text": "So that is an overview of how\nthese stateless cookies work.",
    "start": "3589030",
    "end": "3594260"
  },
  {
    "text": "And so one question\nthat's interesting is you might think, well,\nwhat does it mean to log out with this type of cookie?",
    "start": "3594260",
    "end": "3600670"
  },
  {
    "text": "And the answer is that\nyou don't really log out. I mean, you have this key. And so whenever you want to send\na request, you just send it.",
    "start": "3600670",
    "end": "3608210"
  },
  {
    "text": "You include this\ndude right here, and then you're ready to go. Now, one thing the server\ncould do, for example,",
    "start": "3608210",
    "end": "3613419"
  },
  {
    "text": "though, is revoke your key. So the server revokes your key. Then you can generate\none of these things.",
    "start": "3613419",
    "end": "3618862"
  },
  {
    "text": "But when you send the\nmessage over there, the server's going to say, aha,\nI know what your user ID is. You've been revoked, so I'm not\ngoing to honor your request.",
    "start": "3618862",
    "end": "3626310"
  },
  {
    "text": "But it's a little\nbit interesting. And revocation, as we'll\ntalk more about with things like SSL, is always a tricky\nissue, because as it turns out,",
    "start": "3626310",
    "end": "3634390"
  },
  {
    "text": "taking authority\naway from human users is often much more difficult\nthan giving it to them in the first place.",
    "start": "3634390",
    "end": "3640550"
  },
  {
    "text": "So that's the basic\nidea behind these sort of stateless cookies.",
    "start": "3640550",
    "end": "3646971"
  },
  {
    "text": "So there's also a\ncouple other things that you can use if\nyou want to avoid",
    "start": "3646971",
    "end": "3654029"
  },
  {
    "text": "traditional cookies for\nimplementing authentication. So one thing you\ncan imagine doing",
    "start": "3654030",
    "end": "3660572"
  },
  {
    "text": "is actually using DOM storage to\nhold client-side authentication",
    "start": "3660572",
    "end": "3677870"
  },
  {
    "text": "information. This says \"alternatives\" in case\nyou couldn't [? read that. ?] So one thing you could\ndo is to use DOM storage",
    "start": "3677870",
    "end": "3684240"
  },
  {
    "text": "to hold some of\nthat session state that you would ordinarily\nput inside of a cookie. So if you remember\nfrom last lecture,",
    "start": "3684240",
    "end": "3690270"
  },
  {
    "text": "DOM storage is essentially\na key value interface that the browser\nprovides to each origin.",
    "start": "3690270",
    "end": "3696049"
  },
  {
    "text": "So you can say GET and PUT\nin both the key and eval [? strings. ?] So you could\nimagine putting authentication",
    "start": "3696050",
    "end": "3701654"
  },
  {
    "text": "stuff inside there. Now, the nice thing about this\nis that DOM storage actually",
    "start": "3701654",
    "end": "3707060"
  },
  {
    "text": "has much less wacky\nrules with respect to the same origin policy. So if it were\ncookies, you can do",
    "start": "3707060",
    "end": "3712605"
  },
  {
    "text": "all these tricks with\nsubdomains and stuff like that. It got kind of weird. DOM storage is actually strictly\ntied to a single origin.",
    "start": "3712605",
    "end": "3720036"
  },
  {
    "text": "You can't do any of this\nsubdomain expansion, all that kind of stuff. And so frameworks like\nMeteor use DOM storage",
    "start": "3720036",
    "end": "3725610"
  },
  {
    "text": "for this very reason. But now, note that if you\nwant to store authentication information in DOM\nstorage, then you have to write JavaScript code\nyourself to actually pass",
    "start": "3725610",
    "end": "3733460"
  },
  {
    "text": "that authentication\ninformation to the server to do the [? encryption ?]\nthat's necessary and so on and so forth.",
    "start": "3733460",
    "end": "3739319"
  },
  {
    "text": "So that's one\nthing you could do. Another thing you\ncould do is actually use client-side certificates.",
    "start": "3739320",
    "end": "3748360"
  },
  {
    "text": "So for example, like\nan x.509 format.",
    "start": "3748360",
    "end": "3754510"
  },
  {
    "text": "And so what's nice\nabout these certificates is that, basically, JavaScript\nhas no explicit interface",
    "start": "3754510",
    "end": "3760480"
  },
  {
    "text": "to access these things. So unlike cookies, where\nthere's always this arms race to find these weird\nsame-origin bugs,",
    "start": "3760480",
    "end": "3767646"
  },
  {
    "text": "there's no explicit JavaScript\ninterface for that stuff. So that's very nice from\na security perspective.",
    "start": "3767646",
    "end": "3773312"
  },
  {
    "text": "One problem that I\nmentioned very briefly that we'll look at in more\ndetail in later lectures is that the\nrevocation [? store ?]",
    "start": "3773312",
    "end": "3778940"
  },
  {
    "text": "is kind of hard for these. So once a user leaves\nyour organization, how do you take back\ntheir certificates?",
    "start": "3778940",
    "end": "3784570"
  },
  {
    "text": "And it becomes a\nlittle bit tricky. Also, these things don't\nhave great usability,",
    "start": "3784570",
    "end": "3790014"
  },
  {
    "text": "because who wants to install\na bunch of certificates for each site that you go to? So as a result, these things\nhave a lot of friction,",
    "start": "3790014",
    "end": "3795900"
  },
  {
    "text": "and these are not super\npopular except for in companies or organizations that are\nsuper security-conscious.",
    "start": "3795900",
    "end": "3800910"
  },
  {
    "text": " All right. So that concludes our\ndiscussion of cookies.",
    "start": "3800910",
    "end": "3809859"
  },
  {
    "text": "And so now let's talk about\nprotocol vulnerabilities",
    "start": "3809860",
    "end": "3818130"
  },
  {
    "text": "in the web stack. ",
    "start": "3818130",
    "end": "3825489"
  },
  {
    "text": "And so one kind of\ninteresting attack",
    "start": "3825489",
    "end": "3831520"
  },
  {
    "text": "is that there are all\nthese bugs in the way that different browser\ncomponents parse URLs,",
    "start": "3831520",
    "end": "3838222"
  },
  {
    "text": "for example. So how can URL parsing\nget us into trouble?",
    "start": "3838222",
    "end": "3845710"
  },
  {
    "text": "So suppose that we have a\nURL that looks like this. HTTP comes from example.com.",
    "start": "3845710",
    "end": "3853080"
  },
  {
    "start": "3853080",
    "end": "3858150"
  },
  {
    "text": "And then it's got an explicit\nport specifies that it's 80. And then for some\nunknown reason,",
    "start": "3858150",
    "end": "3864710"
  },
  {
    "text": "it embeds this @ character here.",
    "start": "3864710",
    "end": "3870380"
  },
  {
    "text": "So the question is,\nwell, what is the origin of this particular URL?",
    "start": "3870380",
    "end": "3877230"
  },
  {
    "text": "So as it turns\nout, so Flash would say that the host name portion\nof this was example.com.",
    "start": "3877230",
    "end": "3889060"
  },
  {
    "text": "However, when the\nbrowser would parse this,",
    "start": "3889060",
    "end": "3895040"
  },
  {
    "text": "it would say that the host\nname part of the origin was actually foo.com.",
    "start": "3895040",
    "end": "3900680"
  },
  {
    "text": "So this is clearly a bad\nthing, because once you have two different\nentities who are confused about the origin of\nthe same resource,",
    "start": "3900680",
    "end": "3907540"
  },
  {
    "text": "then you can get into all\nkinds of nasty problems. So for example,\nthe Flash code can",
    "start": "3907540",
    "end": "3914717"
  },
  {
    "text": "be malicious, can download\nstuff from example.com. If it was embedded in\nthe page from foo.com, it could then do some\nevil things there.",
    "start": "3914717",
    "end": "3922245"
  },
  {
    "text": "And it takes some\ncode from example.com and run it with the\nauthority of foo.com. So there's a lot of\ncomplex parsing rules like that that make\nlife very difficult.",
    "start": "3922245",
    "end": "3929690"
  },
  {
    "text": "This is a continuing theme. Like, as we just saw with\nthe content sanitization-- so the basic idea that\nit's oftentimes much better",
    "start": "3929690",
    "end": "3937150"
  },
  {
    "text": "to have simpler parsing\nrules for this kind of stuff. It's difficult to do\nthat in retrospect, though, because HTML's\nalready out there.",
    "start": "3937150",
    "end": "3943380"
  },
  {
    "text": "So all aboard the wam-bulance. So this next one,\nthis is actually",
    "start": "3943380",
    "end": "3949010"
  },
  {
    "text": "my all-time favorite\nsecurity vulnerability. ",
    "start": "3949010",
    "end": "3954800"
  },
  {
    "text": "So it basically attacks\nthe way that the browser [? rule 1 ?] JAR files,\nbasically Java applets.",
    "start": "3954800",
    "end": "3963369"
  },
  {
    "text": "So in 2007, I\nthink-- yeah, 2007. So lifehacker.com--\ngreat website if you haven't been to it.",
    "start": "3963370",
    "end": "3969280"
  },
  {
    "text": "Lifehacker.com\nbasically explains how you can embed ZIP\nfiles inside of images.",
    "start": "3969280",
    "end": "3978330"
  },
  {
    "text": "Now, it's not quite\nclear who you're trying to hide from by doing this. But Lifehacker says you\ncan do it, so hurray.",
    "start": "3978330",
    "end": "3984210"
  },
  {
    "text": "So basically, what they take\nadvantage of is the fact that if you look at image\nformats like GIF, for example,",
    "start": "3984210",
    "end": "3993200"
  },
  {
    "text": "typically, the way the\nparser works is the parser works from the top, down. So it finds information\nin the header.",
    "start": "3993200",
    "end": "3999390"
  },
  {
    "text": "And then it sort of computes\non the rest of the bits here. Now, what was interesting\nis that, as it turns out,",
    "start": "3999390",
    "end": "4008330"
  },
  {
    "text": "programs which manipulate\nZIP files typically work from the bottom up. So they find some information\nin the footer of the file.",
    "start": "4008330",
    "end": "4016250"
  },
  {
    "text": "Then they work up to try to\nextract what's inside of it. So what Lifehacker\nbasically said is that if you wanted to\nhide a ZIP file on a merger",
    "start": "4016250",
    "end": "4025600"
  },
  {
    "text": "or something like this, then you\ncould actually post a GIF there",
    "start": "4025600",
    "end": "4031130"
  },
  {
    "text": "that has this ZIP file here. It will pass all the validation\nchecks on Flickr or whatever",
    "start": "4031130",
    "end": "4037170"
  },
  {
    "text": "as an image. It will actually display as\nan image in your browser. Aha, but only you\nknow the hidden truth,",
    "start": "4037170",
    "end": "4043582"
  },
  {
    "text": "that if you take this file\nhere, you can pass it to unzip, and it will unzip [INAUDIBLE]\ninformation there.",
    "start": "4043582",
    "end": "4050363"
  },
  {
    "text": "OK, fine, this seems like it's\nsort of like a cheap parlor trick. OK, that's nice. Now, attackers, of\ncourse, never sleep,",
    "start": "4050364",
    "end": "4056080"
  },
  {
    "text": "and they want to ruin our life. So what did they realize? They realize that JAR files\nare basically derivatives",
    "start": "4056080",
    "end": "4065140"
  },
  {
    "text": "of the .ZIP format. So this meant that\nyou could actually",
    "start": "4065140",
    "end": "4070829"
  },
  {
    "text": "create a GIF or\nan image that had a JAR file, executable\nJavaScript code,",
    "start": "4070830",
    "end": "4076849"
  },
  {
    "text": "at the bottom of it. So then people\ncalled this attack--",
    "start": "4076850",
    "end": "4082130"
  },
  {
    "text": "they called it the GIFAR attack. [LAUGHTER] Half GIF, half JAR, all evil.",
    "start": "4082130",
    "end": "4090619"
  },
  {
    "text": "Because this was amazing. And so what did this\nmean that you could do?",
    "start": "4090620",
    "end": "4095750"
  },
  {
    "text": "Well, it's actually\nquite subtle. Because people first\ndiscovered this, they thought it was amazing,\nbut they didn't quite",
    "start": "4095750",
    "end": "4100930"
  },
  {
    "text": "know how to exploit it. But as it turns out, you can\ndo things like the following. So first of all, how do you\nmake one of these things?",
    "start": "4100930",
    "end": "4106729"
  },
  {
    "text": "You just use CAD. There is literally\nno [? trickeration ?] that you have to do. Take this, take\nthis, you CAD it.",
    "start": "4106729",
    "end": "4113143"
  },
  {
    "text": "Boom, you've got a GIF/JAR. So once you have\nthat, what can you do? Well, there are\nsome sensitive sites",
    "start": "4113143",
    "end": "4119299"
  },
  {
    "text": "that will allow\nusers to submit data, but not arbitrary types of data. So [INAUDIBLE]\nFlickr or something",
    "start": "4119300",
    "end": "4125626"
  },
  {
    "text": "like that, it may not allow\nyou to submit arbitrary ActiveX or whatever, arbitrary HTML. But it will allow\nyou to submit images.",
    "start": "4125626",
    "end": "4133439"
  },
  {
    "text": "So what you could do is\nconstruct one of these things, submit it to one of these\nsensitive sites that does",
    "start": "4133439",
    "end": "4138920"
  },
  {
    "text": "allow you to submit images. And then what can you do? Well, the next thing you\nneed to do is-- so yes,",
    "start": "4138920",
    "end": "4146700"
  },
  {
    "text": "the first thing you do is you\nsubmit one of these things to the sensitive [? cycle. ?]",
    "start": "4146700",
    "end": "4155150"
  },
  {
    "text": "And then the next\nthing that you can do is if you have an\nXSS attack, if you",
    "start": "4155150",
    "end": "4161022"
  },
  {
    "text": "have a cross-site\nvulnerability, then you can use the cross-site\nscripting to inject something",
    "start": "4161022",
    "end": "4169330"
  },
  {
    "text": "like this.  And due to poor\nboard management,",
    "start": "4169330",
    "end": "4174770"
  },
  {
    "text": "I will draw this over here. So you can inject an applet,\nwrite JavaScript code that has,",
    "start": "4174770",
    "end": "4187889"
  },
  {
    "text": "as its sort of source,\nyou just say, cats.gif.",
    "start": "4187890",
    "end": "4193980"
  },
  {
    "text": " And so what's\ninteresting about this",
    "start": "4193980",
    "end": "4200739"
  },
  {
    "text": "is that this code, because we're\nusing a cross-site scripting vulnerability, runs in the\ncontext of the vulnerable site.",
    "start": "4200740",
    "end": "4207620"
  },
  {
    "text": "This has been uploaded to\nthe vulnerable site's origin. So this will pass\nthe same origin test.",
    "start": "4207620",
    "end": "4214220"
  },
  {
    "text": "But however, this code was\nspecified by the attacker. So now what happens\nis that the attacker gets to run that Java applet\nin the context of the victim's",
    "start": "4214220",
    "end": "4223130"
  },
  {
    "text": "site with all the\nauthority of that origin even though the GIFAR passed\nthe vulnerable site's image",
    "start": "4223130",
    "end": "4232440"
  },
  {
    "text": "validation code. Because one of these\nthings will actually parse correctly as a GIF.",
    "start": "4232440",
    "end": "4238660"
  },
  {
    "text": "But it has this\nhidden code in here. And so [INAUDIBLE]\nwhen the browser tries to execute the JAR\npart of it, once again, it starts from the\nbottom, comes up here,",
    "start": "4238660",
    "end": "4245660"
  },
  {
    "text": "and just ignores that part. So this is actually\npretty amazing. And so there's some fairly\nstraightforward ways",
    "start": "4245660",
    "end": "4251460"
  },
  {
    "text": "you can fix something like this. So for example, you can actually\nhave the applet loader actually",
    "start": "4251460",
    "end": "4258490"
  },
  {
    "text": "understand that there should\nnot be random junk up here, for example. What was happening in many cases\nis that there was information",
    "start": "4258490",
    "end": "4265932"
  },
  {
    "text": "in the metadata saying, here's\nthe length of this resource. And then if it said, the\nlength, it stops here, they would just say, who\ncares what's the rest.",
    "start": "4265932",
    "end": "4272810"
  },
  {
    "text": "It's probably zero. But in this case, it wasn't. What I love about\nthis is that it really",
    "start": "4272810",
    "end": "4278270"
  },
  {
    "text": "shows how wide the software\nstack is for the web. So sort of taking these two\nformats, GIF and then JAR,",
    "start": "4278270",
    "end": "4287510"
  },
  {
    "text": "we can actually create\nthis really nasty attack. You can actually do\nthis for PDFs, too. You can put PDFs here. I think that was called,\nlike, the [? PDFR ?]",
    "start": "4287510",
    "end": "4294106"
  },
  {
    "text": "attack or something like this. So people had a field\nday with this for a day. These vulnerabilities\nhave been closed now.",
    "start": "4294106",
    "end": "4299455"
  },
  {
    "text": "AUDIENCE: So what can\nyou do with this attack that you can't do\nwith [INAUDIBLE] XSS or your own [INAUDIBLE]?",
    "start": "4299455",
    "end": "4304530"
  },
  {
    "text": "PROFESSOR: So what's\nnice-- yeah, yeah. So good question. So what's nice about this\nis that Java oftentimes can be more powerful than just\nrunning regular JavaScript,",
    "start": "4304530",
    "end": "4312659"
  },
  {
    "text": "because it has slightly\ndifferent rules on, [? same origin ?] policy\nand stuff like that. [INAUDIBLE] get more\nlower-level access",
    "start": "4312660",
    "end": "4318805"
  },
  {
    "text": "to the file systems\nor things like that. But you're right, that if you\ncan do cross-site scripting,",
    "start": "4318805",
    "end": "4324960"
  },
  {
    "text": "running JavaScript's\nalready pretty damaging. But the main advantage\nof this is, once again, running inside the applet. ",
    "start": "4324960",
    "end": "4333600"
  },
  {
    "text": "All right. Yeah. So like I said, that's my\nfavorite attack of all time, mainly just because it forced\nserious-minded security",
    "start": "4333600",
    "end": "4340330"
  },
  {
    "text": "individuals to say\nGIFAR all the time. So if you're easily\namused, like myself, then",
    "start": "4340330",
    "end": "4345830"
  },
  {
    "text": "this was a bonanza for you. So another thing\nthat's interesting",
    "start": "4345830",
    "end": "4351139"
  },
  {
    "text": "is that there are\nactually attacks",
    "start": "4351140",
    "end": "4356320"
  },
  {
    "text": "that are based on a time. So you might not think of\ntime as a resource which",
    "start": "4356320",
    "end": "4364350"
  },
  {
    "text": "could be a vector for attacks. But as I was discussing with\nsomeone a few minutes ago,",
    "start": "4364350",
    "end": "4371900"
  },
  {
    "text": "yeah, time can actually be a way\nthat a system can be exploited. And so these attacks are\ncalled-- the particular attack",
    "start": "4371900",
    "end": "4378925"
  },
  {
    "text": "I'm going to talk\nto you about is a specific example of a\ncovert channel attack.",
    "start": "4378925",
    "end": "4384079"
  },
  {
    "text": " And so the idea behind\nthe covert channel attack",
    "start": "4384080",
    "end": "4390390"
  },
  {
    "text": "is that, essentially,\nthe attacker has found some way\nfor two applications to exchange information.",
    "start": "4390390",
    "end": "4397100"
  },
  {
    "text": "And that exchange vector is\nnot an officially sanctioned vector. The attacker is somehow\nleveraging some other part",
    "start": "4397100",
    "end": "4403980"
  },
  {
    "text": "of the system to pass\nbits of information between two different entities.",
    "start": "4403980",
    "end": "4409520"
  },
  {
    "text": "So a good example of\nsome of this stuff is something called\nCSS-based sniffing attacks.",
    "start": "4409520",
    "end": "4419974"
  },
  {
    "text": " So what is this\nattack all about?",
    "start": "4419974",
    "end": "4428282"
  },
  {
    "text": "So attacker has a website\nthat the user can visit.",
    "start": "4428282",
    "end": "4437059"
  },
  {
    "text": "And once again, getting\na user to visit a website is actually usually\npretty straightforward. You create ads. You send them a phishing\nemail, whatever.",
    "start": "4437059",
    "end": "4443268"
  },
  {
    "text": "So the attacker has a\nwebsite that the user visits. ",
    "start": "4443268",
    "end": "4450020"
  },
  {
    "text": "And the goal of the\nattacker is to learn",
    "start": "4450020",
    "end": "4456240"
  },
  {
    "text": "what other websites\nthe user has visited.",
    "start": "4456240",
    "end": "4462257"
  },
  {
    "text": " And the attacker might want to\nknow this for several reasons.",
    "start": "4462257",
    "end": "4469040"
  },
  {
    "text": "Maybe they're trying to figure\nout what kinds of search terms the user's looking for. Maybe they're\ntrying to figure out",
    "start": "4469040",
    "end": "4474500"
  },
  {
    "text": "where that person's\nemployed, or maybe they want to know if they've\naccessed some type of embarrassing material,\nso on and so forth.",
    "start": "4474500",
    "end": "4481810"
  },
  {
    "text": "So how is the\nattacker going to do that if the only thing\nthat the attacker controls is a website that he or she\ncan convince the user to visit?",
    "start": "4481810",
    "end": "4490130"
  },
  {
    "text": "Well, the exploit is to\nleverage link colors.",
    "start": "4490130",
    "end": "4498870"
  },
  {
    "text": " So you know like when\nyou go to a web page and you click on a link, the\nnext time you see that link,",
    "start": "4498870",
    "end": "4505740"
  },
  {
    "text": "it is now a different color. So zoinks, that's actually\na security vulnerability.",
    "start": "4505740",
    "end": "4511579"
  },
  {
    "text": "Because what that means is\nthat in this attacker website, if the attacker can trick\nyou into visiting it,",
    "start": "4511580",
    "end": "4518810"
  },
  {
    "text": "then the attacker can generate\na huge list of candidate URLs that you might have\nvisited and then",
    "start": "4518810",
    "end": "4525179"
  },
  {
    "text": "use JavaScript to see\nwhat color those URLs are.",
    "start": "4525180",
    "end": "4530530"
  },
  {
    "text": "And if the URL color\nis purple, that means, aha, you have visited that site.",
    "start": "4530530",
    "end": "4537430"
  },
  {
    "text": "So this was very subtle. And what's\ninteresting about this is that you don't even have to\ndisplay the URLs in many cases",
    "start": "4537430",
    "end": "4543995"
  },
  {
    "text": "to the user. You can just sort of\nconjure up a domino that has a particular href and\njust look at its style,",
    "start": "4543995",
    "end": "4549585"
  },
  {
    "text": "and then see if it has\nthe visited color or not. So this is actually\npretty subtle. So you might be\nthinking, well, isn't",
    "start": "4549585",
    "end": "4555470"
  },
  {
    "text": "it going to be inefficient\nto scan through all these candidate URLs? We can do all kinds of\nclever optimizations.",
    "start": "4555470",
    "end": "4561340"
  },
  {
    "text": "So for example, you can\nhave multiple passes. In your first pass,\nyou could only",
    "start": "4561340",
    "end": "4566480"
  },
  {
    "text": "see if the user had\nvisited top-level URLs-- cnn.com, Facebook.com,\nso on and so forth.",
    "start": "4566480",
    "end": "4572340"
  },
  {
    "text": "If the answer is\nyes, you can then do sort of a depth-first\nsearch on those hits that you found at the top level.",
    "start": "4572340",
    "end": "4578705"
  },
  {
    "text": "So you can actually\nreally constrain the search space this way. So this was really,\nreally funny, too,",
    "start": "4578705",
    "end": "4584440"
  },
  {
    "text": "if you have a demented\nsense of humor, because it showed that\nthis very innocuous feature",
    "start": "4584440",
    "end": "4590370"
  },
  {
    "text": "that browsers support-- they're\njust trying to help you out. They're trying to\nsay, hey, buddy, here's where you visited. It can actually reveal this\nvery damaging information.",
    "start": "4590370",
    "end": "4597090"
  },
  {
    "text": "So what is a solution for this? So in practice, what the\nbrowser [? runners ?] did",
    "start": "4597090",
    "end": "4602680"
  },
  {
    "text": "is that they made it such that\nthe browser lies to JavaScript about the color of links.",
    "start": "4602680",
    "end": "4609440"
  },
  {
    "text": "So basically, when JavaScript\ntries to look at the link and look at its styling, the\nbrowser always says, unvisited.",
    "start": "4609440",
    "end": "4616230"
  },
  {
    "text": "OK. So that seems\nsomewhat unfortunate, but it prevents this attack.",
    "start": "4616230",
    "end": "4621750"
  },
  {
    "text": "So I guess we can live with it. JavaScript not being able\nto read link colors, eh, not the end of the world.",
    "start": "4621750",
    "end": "4627080"
  },
  {
    "text": "So are we done, though? Does this fix the\nproblem of the attacker being able to figure\nout where you've been?",
    "start": "4627080",
    "end": "4633480"
  },
  {
    "text": "The answer, of course, is no. So the next attack that\nthe attacker can do",
    "start": "4633480",
    "end": "4640300"
  },
  {
    "text": "is a cache-based attack. And so the intuition here is\nthat, once again, the goals",
    "start": "4640300",
    "end": "4650260"
  },
  {
    "text": "are the same. Attacker wants to know\nwhat sites you visited. The exploit vector\nis that information that has been cached\nis quicker to access.",
    "start": "4650260",
    "end": "4658270"
  },
  {
    "text": "That, in fact, is the whole\nreason why you cache it in the first place. So once again, the\nattacker can generate",
    "start": "4658270",
    "end": "4664660"
  },
  {
    "text": "a list of candidate objects\nthat the attacker thinks you might have visited\nand then just time",
    "start": "4664660",
    "end": "4670390"
  },
  {
    "text": "how quickly those objects\ncome back to the attacker. And so if the objects\ncome back quickly,",
    "start": "4670390",
    "end": "4675525"
  },
  {
    "text": "you know [? you need some ?]\nthreshold, the attacker can guess\nthat you, in fact, have been to those objects before. So does that make sense?",
    "start": "4675525",
    "end": "4681740"
  },
  {
    "text": "Once again, the browser's\njust trying to help you out. But you can leverage these\ntechniques to figure out",
    "start": "4681740",
    "end": "4687160"
  },
  {
    "text": "some evil knowledge. And what's\ninteresting about this is that this attack\ncan actually leverage",
    "start": "4687160",
    "end": "4693790"
  },
  {
    "text": "some very interesting\ngeographic location information. So imagine that we're doing\nattacks on Google Map tiles,",
    "start": "4693790",
    "end": "4702090"
  },
  {
    "text": "for example. So if I detect that\nyou've actually accessed a series\nof Google Map tiles, that probably means you\nare either in that place",
    "start": "4702090",
    "end": "4709900"
  },
  {
    "text": "or you're interested\nin other people who might be in that place. So it's actually a\npretty powerful attack.",
    "start": "4709900",
    "end": "4716080"
  },
  {
    "text": "So OK. So how can you fix this one? Well, this one is\nnot quite clear.",
    "start": "4716080",
    "end": "4723035"
  },
  {
    "text": "You could have a site that\ndoesn't cache anything at all. And then your site's\ngoing to be slow. So that kind of sucks.",
    "start": "4723035",
    "end": "4728199"
  },
  {
    "text": "So it's not quite clear\nhow you get around this. But OK. Let's suppose that we have the\ndefense we put in place here--",
    "start": "4728200",
    "end": "4733900"
  },
  {
    "text": "JavaScript can't\nread link colors. Let's assume that\nthe site is super paranoid it caches nothing.",
    "start": "4733900",
    "end": "4740010"
  },
  {
    "text": "So have we completely defended\nourselves against this attack? One second. So the answer is no.",
    "start": "4740010",
    "end": "4746325"
  },
  {
    "text": "Because the attacker can\nactually launch DNS-based attacks. ",
    "start": "4746325",
    "end": "4754099"
  },
  {
    "text": "So the intuition is that even if\nyou don't cache anything, when you access a resource\nfor the first time,",
    "start": "4754100",
    "end": "4761074"
  },
  {
    "text": "you have to generate a DNS\nrequest for the hosting that's associated with that resource. So once again, the\nattacker can look in time",
    "start": "4761075",
    "end": "4767490"
  },
  {
    "text": "and see how long it\ntakes for the attacker to access these candidate\nobjects the attacker thinks you may have accessed.",
    "start": "4767490",
    "end": "4773400"
  },
  {
    "text": "And if they come back\nquickly, then that's perhaps a good hint that\nyou've resulted the DNS",
    "start": "4773400",
    "end": "4780260"
  },
  {
    "text": "name for that host before. And so this works even if\nyou don't cache anything,",
    "start": "4780260",
    "end": "4786120"
  },
  {
    "text": "because the DNS cache lives with\nthe OS, not with the browser. AUDIENCE: You've mentioned, I\nthink last class, the ability",
    "start": "4786120",
    "end": "4793060"
  },
  {
    "text": "to get JavaScript\nto take screenshots. PROFESSOR: Yeah, yeah. AUDIENCE: So can you just\nrender the [? link ?]",
    "start": "4793060",
    "end": "4798580"
  },
  {
    "text": "as a single pixel, and\nthen take a screenshot, and [INAUDIBLE] that pixel? PROFESSOR: Yeah. Well-- so you could.",
    "start": "4798580",
    "end": "4804229"
  },
  {
    "text": "So rendering stuff is\nalways a little bit tricky, because you have to\nplay these games. If you want to show\nsomething to the user, it has to flash really quickly.",
    "start": "4804229",
    "end": "4810435"
  },
  {
    "text": "Or else they might see\nthat someone's entering this huge list of URLs. But you're right. If you have access to\nthe screen-sharing API,",
    "start": "4810435",
    "end": "4815540"
  },
  {
    "text": "a lot of this becomes\na lot simpler. AUDIENCE: And if you just have\nsome kind of animated image",
    "start": "4815540",
    "end": "4820570"
  },
  {
    "text": "that looks mostly\nrandom, then you just pay attention to\none pixel of it? PROFESSOR: You're exactly right.",
    "start": "4820570",
    "end": "4826470"
  },
  {
    "text": "I mean, in general, I think\nthe screen-sharing API is a bad idea. I'm not the president of\nthe world, so what can I do?",
    "start": "4826470",
    "end": "4832320"
  },
  {
    "text": "So anyways, so DNS-based\nattacks work even if there is no caching that takes place.",
    "start": "4832320",
    "end": "4838190"
  },
  {
    "text": "OK. So as the final\npiece de resistance, so you might think, OK, what\nif we only use raw IP addresses",
    "start": "4838190",
    "end": "4844825"
  },
  {
    "text": "for all of our host names? We don't cache a thing! OK? And we're running on an updated\nbrowser that doesn't expose",
    "start": "4844825",
    "end": "4852700"
  },
  {
    "text": "link colors to JavaScript. So surely we're fine. I'm here to tell you\nyou are not fine.",
    "start": "4852700",
    "end": "4858100"
  },
  {
    "text": "Because what the\nattacker can actually do is take advantage of\nrendering attacks.",
    "start": "4858100",
    "end": "4863850"
  },
  {
    "text": " So the basic idea here is\nthat it is typically faster",
    "start": "4863850",
    "end": "4873140"
  },
  {
    "text": "to render a URL that\nyou have visited before for various\nwacky reasons that",
    "start": "4873140",
    "end": "4878446"
  },
  {
    "text": "have to deal with how\nbrowsers [INAUDIBLE] rendering [INAUDIBLE] internal. And so what the attacker\ncan do is actually",
    "start": "4878446",
    "end": "4884889"
  },
  {
    "text": "create a candidate iframe, let's\nsay, puts some content in there that the attacker thinks you\nmay have visited, and then",
    "start": "4884890",
    "end": "4891340"
  },
  {
    "text": "constantly see if the attacker\nloses access to that iframe. Because as that\niframe is loading,",
    "start": "4891340",
    "end": "4898150"
  },
  {
    "text": "the browser typically\nthinks that iframe belongs to the attacker's page. And then as soon as that\ndifferent origin content",
    "start": "4898150",
    "end": "4904540"
  },
  {
    "text": "comes in, then you'll start\ngetting these access errors. Because now that different\norigin [INAUDIBLE].",
    "start": "4904540",
    "end": "4909634"
  },
  {
    "text": "So now the attacker\ncan't touch anymore. So the attacker can do\nthings like this still to see if there's caching,\nrendering information",
    "start": "4909634",
    "end": "4916350"
  },
  {
    "text": "[INAUDIBLE] browser for\nthese candidate sites. So anyways, so those are\nthe only hopes and dreams",
    "start": "4916350",
    "end": "4921699"
  },
  {
    "text": "I want to crush in you today. I believe we're\nrunning out of time. But I will see you next time.",
    "start": "4921700",
    "end": "4927960"
  }
]