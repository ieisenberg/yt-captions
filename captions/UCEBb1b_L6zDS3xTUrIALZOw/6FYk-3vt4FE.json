[
  {
    "start": "0",
    "end": "45000"
  },
  {
    "start": "0",
    "end": "7797"
  },
  {
    "text": "SRINI DEVADAS: Good\nmorning, everyone. So we come to the end-- one\nlast lecture and puzzle.",
    "start": "7797",
    "end": "13870"
  },
  {
    "text": "Today, we're going to look at\na little coin row game and talk about, obviously, an\nalgorithm to solve the game,",
    "start": "13870",
    "end": "21520"
  },
  {
    "text": "code the algorithm. And I'm going to introduce this\nnotion of dynamic programming",
    "start": "21520",
    "end": "31330"
  },
  {
    "text": "to you which is an algorithmic\ntechnique that's going to be useful in this game. Though it's not\nessential to solving it,",
    "start": "31330",
    "end": "40030"
  },
  {
    "text": "it's going to be\nimportant in improving the efficiency of this first\nalgorithm that we come up with.",
    "start": "40030",
    "end": "46510"
  },
  {
    "start": "45000",
    "end": "63000"
  },
  {
    "text": "So the game itself is\nvery straightforward. You have coins in\na row given to you.",
    "start": "46510",
    "end": "56230"
  },
  {
    "text": "So each of these has\ndifferent values.",
    "start": "56230",
    "end": "61930"
  },
  {
    "text": "And you can think of all\nof them as being positive, but it doesn't really matter.",
    "start": "61930",
    "end": "67300"
  },
  {
    "start": "63000",
    "end": "133000"
  },
  {
    "text": "And your job is to pick coins\nto maximize total value.",
    "start": "67300",
    "end": "83440"
  },
  {
    "text": " And obviously, that's\nnot very interesting.",
    "start": "83440",
    "end": "89750"
  },
  {
    "text": "You just pick all of them\nif they're all positive. And if some of them\nhappen to be negative, you wouldn't pick those.",
    "start": "89750",
    "end": "95016"
  },
  {
    "text": "So that's not\nparticularly interesting. But it becomes much\nmore interesting",
    "start": "95016",
    "end": "100540"
  },
  {
    "text": "if you add the constraint\nthat if you pick a coin,",
    "start": "100540",
    "end": "113490"
  },
  {
    "text": "you can't pick the next\none, the immediate next one.",
    "start": "113490",
    "end": "121580"
  },
  {
    "start": "121580",
    "end": "130300"
  },
  {
    "text": "All right? So if I pick 3, I can't pick 27. If I pick 14, I can't pick\n3, but I could pick 27.",
    "start": "130300",
    "end": "137810"
  },
  {
    "text": "So clearly, I can alternate. Because I could pick, skip,\npick, skip, et cetera,",
    "start": "137810",
    "end": "145550"
  },
  {
    "text": "but I just can't pick, pick. But I could go pick,\nskip, skip, pick",
    "start": "145550",
    "end": "151400"
  },
  {
    "text": "if I wanted a value\nthat corresponds",
    "start": "151400",
    "end": "156530"
  },
  {
    "text": "to that fourth location. So there's nothing\nthat's stopping me from doing 14 and 4.",
    "start": "156530",
    "end": "162681"
  },
  {
    "text": "I mean, the only thing\nthat's stopping me from doing that is I drop this\n27, which is a large value, and it seems like a bad idea.",
    "start": "162682",
    "end": "169880"
  },
  {
    "text": "But on the other hand, you can\nthink of a different situation",
    "start": "169880",
    "end": "176870"
  },
  {
    "text": "where you wanted 27 and 15. And so maybe you want\nto skip 4 and 5, right?",
    "start": "176870",
    "end": "185480"
  },
  {
    "text": "So what is the maximum value\nfor this particular puzzle that you can come up with?",
    "start": "185480",
    "end": "191120"
  },
  {
    "text": "And what are the coins that\nyou would pick in this case? ",
    "start": "191120",
    "end": "198424"
  },
  {
    "text": "Someone? AUDIENCE: 56. SRINI DEVADAS: 56. How did you get 56?",
    "start": "198424",
    "end": "204049"
  },
  {
    "text": "AUDIENCE: By using\n14, 27, and 15. SRINI DEVADAS: You went 14, 27.",
    "start": "204050",
    "end": "209210"
  },
  {
    "text": "And then you went skip, skip. You didn't want to pick 5. You could have picked 5. You can't pick 4.",
    "start": "209210",
    "end": "214700"
  },
  {
    "text": "But you decided that\n15 was much better.",
    "start": "214700",
    "end": "220530"
  },
  {
    "text": "So you ended up\npicking 15, right? And if, in fact, you had\nsomething like 11 here--",
    "start": "220530",
    "end": "231799"
  },
  {
    "text": "so let me just write that first. So if you did that, it's 56. And you're picking\n14, 27, and 15.",
    "start": "231800",
    "end": "242540"
  },
  {
    "text": "So is that right? Is that 56? Yes, that is 56.",
    "start": "242540",
    "end": "248080"
  },
  {
    "text": "Good. But if I had something\nslightly different,",
    "start": "248080",
    "end": "256880"
  },
  {
    "text": "someone else tell me\nwhat I should pick here. What's the maximum\nvalue and what should I",
    "start": "256880",
    "end": "263130"
  },
  {
    "text": "pick in terms of coins? ",
    "start": "263130",
    "end": "271100"
  },
  {
    "text": "Yeah, go ahead, George. AUDIENCE: The\nmaximum value is 57 if you just take every\nother coin, starting 14.",
    "start": "271100",
    "end": "276490"
  },
  {
    "text": "SRINI DEVADAS: So\nif you go 14, 27-- that's 41. Now you want to pick\n5, so that's 46.",
    "start": "276490",
    "end": "285110"
  },
  {
    "text": "And then you can't pick\n15, but you get to pick 11. And so you go 57. ",
    "start": "285110",
    "end": "293810"
  },
  {
    "text": "Yeah, so this one was\nalternation, pretty much strict alternation.",
    "start": "293810",
    "end": "300389"
  },
  {
    "text": "So, well, you guys are\ngetting good at this.",
    "start": "300390",
    "end": "306810"
  },
  {
    "start": "303000",
    "end": "335000"
  },
  {
    "text": "So I'll give you a hard one. ",
    "start": "306810",
    "end": "329886"
  },
  {
    "text": "Is that enough or\nshall we go for more?  All right, this was the\nfinal question, final exam.",
    "start": "329886",
    "end": "338729"
  },
  {
    "start": "335000",
    "end": "645000"
  },
  {
    "text": "You got 10 minutes-- seconds-- 10 seconds. [LAUGHS]",
    "start": "338730",
    "end": "344940"
  },
  {
    "text": "So clearly, this\nis not something you want to do manually. It's going to take a while.",
    "start": "344940",
    "end": "352419"
  },
  {
    "text": "There's a lot of\ncombinations here, right? There's a lot of\ncombinations here. And if you do this,\nyou're going to go--",
    "start": "352420",
    "end": "358770"
  },
  {
    "text": "well, you can do\nit in a greedy way. You can say, I'll\njust do alternation.",
    "start": "358770",
    "end": "364680"
  },
  {
    "text": "And so you go 3 plus 17-- you guys are going to\nhave to help me here because these numbers\nare going to get large--",
    "start": "364680",
    "end": "370916"
  },
  {
    "text": "but that's 20. And then I can't pick 23, so\nI go 20 plus 11, which is 31.",
    "start": "370916",
    "end": "376950"
  },
  {
    "text": "31 plus 4, 35. 35 plus 17, 52.",
    "start": "376950",
    "end": "382230"
  },
  {
    "text": "52 plus 34-- check\nmy math, please--",
    "start": "382230",
    "end": "387300"
  },
  {
    "text": "86. 86 plus 18 is 104.",
    "start": "387300",
    "end": "393810"
  },
  {
    "text": "104 plus 12 is 116,\nis a possibility.",
    "start": "393810",
    "end": "401880"
  },
  {
    "text": "But at this point,\nyou have no idea-- I know, so I have some idea\nwhether 116 is the highest",
    "start": "401880",
    "end": "412260"
  },
  {
    "text": "or not. And I'll tell you\nthat it's not, OK? It's not the highest,\nyou can do better.",
    "start": "412260",
    "end": "418889"
  },
  {
    "text": "And you can maybe go and see\nif you can twiddle things here a little bit. But remember that\nyou, obviously, just",
    "start": "418890",
    "end": "425250"
  },
  {
    "text": "don't want to drop something. But if you just drop something,\nyou want to pick something up. Because if you just drop\nsomething, you'd lower 116.",
    "start": "425250",
    "end": "434377"
  },
  {
    "text": "And if you want to\ndo better than 116, you absolutely have\nto pick something up.",
    "start": "434377",
    "end": "439710"
  },
  {
    "text": "Especially when\nyou're alternating, clearly, you could have done-- I mean, can you do\na little bit better?",
    "start": "439710",
    "end": "445020"
  },
  {
    "text": "My last thing that\nI picked was 12. And because of that,\nyou know what happened.",
    "start": "445020",
    "end": "451680"
  },
  {
    "text": "So can I do a little\nbit better than 116? Yeah, by dropping\n12 and grabbing 15,",
    "start": "451680",
    "end": "457710"
  },
  {
    "text": "and I get a plus 3. And you might think\nthat 119 is the optimum.",
    "start": "457710",
    "end": "463320"
  },
  {
    "text": "But it turns out that's\nnot even the optimum. And so there's a\nlot of combinations. And I just looked\nat something local",
    "start": "463320",
    "end": "469620"
  },
  {
    "text": "here to try and improve things. But maybe I should--\nyou know, it's probably",
    "start": "469620",
    "end": "475400"
  },
  {
    "text": "was good that I picked the 34,\nbut I don't really know that. I mean, it's possible that\nif I hadn't picked the 34,",
    "start": "475400",
    "end": "482880"
  },
  {
    "text": "that I could've picked\nthe 23 and the 17, and that is 40, right? So maybe that was better.",
    "start": "482880",
    "end": "490919"
  },
  {
    "text": "So this is non-trivial. This is a very simple--",
    "start": "490920",
    "end": "496170"
  },
  {
    "text": "at least to describe-- puzzle,. But this is non-trivial in terms\nof finding the optimum solution",
    "start": "496170",
    "end": "502281"
  },
  {
    "text": "as it gets --longer, the row gets longer. The numbers being large\nis not really the issue.",
    "start": "502281",
    "end": "510960"
  },
  {
    "text": "It's the number of numbers\nthat's the issue, right? So how are we going\nto solve this?",
    "start": "510960",
    "end": "516270"
  },
  {
    "text": "What can we do? And let's not worry\nabout efficiency.",
    "start": "516270",
    "end": "523058"
  },
  {
    "text": "How could we solve this? And obviously,\nwe've been talking about recursive\nalgorithms and we've",
    "start": "523059",
    "end": "529400"
  },
  {
    "text": "solved nQueens, which\nhas lots of combinations. Sudoku, even more combinations.",
    "start": "529400",
    "end": "537362"
  },
  {
    "text": "There's a lot of\ncombinations here. But honestly, the\nnumber of combinations",
    "start": "537362",
    "end": "543230"
  },
  {
    "text": "is dwarfed by the\nnumber of combinations we've already handled in\nthese other puzzles, right?",
    "start": "543230",
    "end": "548980"
  },
  {
    "text": "So yeah, so someone wants\nto give me some sense of how this could be done? ",
    "start": "548980",
    "end": "557779"
  },
  {
    "text": "Go ahead, Fadi. AUDIENCE: So if I want\nto choose numbers here, we need to know that\nat least there's going to be a gap between-- at least a gap of one\nnumber between any two",
    "start": "557780",
    "end": "565760"
  },
  {
    "text": "consecutive numbers. SRINI DEVADAS: Yeah, you\nwant a gap of at least one. AUDIENCE: So what\nwe can do with that,",
    "start": "565760",
    "end": "571043"
  },
  {
    "text": "we can iterate, for example,\nif we have seven numbers,",
    "start": "571043",
    "end": "576240"
  },
  {
    "text": "we have at most four\nnumbers to pick.",
    "start": "576240",
    "end": "581360"
  },
  {
    "text": "Or, for example, if\nwe have more numbers,",
    "start": "581360",
    "end": "586920"
  },
  {
    "text": "we then have more options. If we can do it, we can carry\nthe gap slice between each two",
    "start": "586920",
    "end": "593650"
  },
  {
    "text": "consecutive numbers\nand iterate over that, and see what combination\ngives us the high stuff. SRINI DEVADAS: Yeah,\nyou're basically",
    "start": "593650",
    "end": "599351"
  },
  {
    "text": "trying to create some\nsort of exhaustive search. Your algorithm was\niterating over the gaps.",
    "start": "599351",
    "end": "608120"
  },
  {
    "text": "And there's many\ngaps, by the way. You have a gap of one at\nleast, and another gap",
    "start": "608120",
    "end": "613610"
  },
  {
    "text": "of one, another gap of one if\nI had the strict alternation. And you have to vary\none of the gaps to two.",
    "start": "613610",
    "end": "618950"
  },
  {
    "text": "And that, obviously, impacts the\nnumbers you picked even for-- the gap might stay the same\nfor the next pair of numbers,",
    "start": "618950",
    "end": "625160"
  },
  {
    "text": "but the numbers will be shifted\nin the coin row sequence. And it's fairly complicated, OK?",
    "start": "625160",
    "end": "630980"
  },
  {
    "text": "If you are willing to\ngive up efficiency, and you have a set of n items,\nthen how many different ways,",
    "start": "630980",
    "end": "648260"
  },
  {
    "text": "how many different subsets of\nn items do I actually have?",
    "start": "648260",
    "end": "653300"
  },
  {
    "text": "When you have n elements-- you might have learned\nthis in set algebra.",
    "start": "653300",
    "end": "659570"
  },
  {
    "text": "But if you haven't, we'll\ngo over it here real quick.",
    "start": "659570",
    "end": "665210"
  },
  {
    "text": "But how many combinations,\nhow many subsets do you have when you\nhave a set of n elements?",
    "start": "665210",
    "end": "671820"
  },
  {
    "text": "You have to count the empty\nset and the entire set, right? So if I, say, have a\nset of one element,",
    "start": "671820",
    "end": "680670"
  },
  {
    "text": "then the empty set is a\nsubset of the one element set. And then, obviously,\nthe one element set",
    "start": "680670",
    "end": "686280"
  },
  {
    "text": "is a subset of itself,\nso that's two, right? And then if I had two elements,\nA and B, then it's empty,",
    "start": "686280",
    "end": "695640"
  },
  {
    "text": "A, B, and AB. That's four. So you get a pattern here?",
    "start": "695640",
    "end": "701880"
  },
  {
    "text": "So it's 2 to the n, right? So I can generate the 2 to\nthe n subsets that correspond",
    "start": "701880",
    "end": "711060"
  },
  {
    "start": "709000",
    "end": "777000"
  },
  {
    "text": "to the n-element set. And there's actually library\nfunctions in Python, powerset,",
    "start": "711060",
    "end": "716130"
  },
  {
    "text": "that lets you do this. But that's cheating\nfor this class because you can't\nuse libraries, OK?",
    "start": "716130",
    "end": "724079"
  },
  {
    "text": "Real programmers\ndon't use libraries. That's actually not true at all. [LAUGHS] That is probably\nthe most dishonest statement",
    "start": "724080",
    "end": "731640"
  },
  {
    "text": "made in this course. Real programmers actually\nexploit libraries.",
    "start": "731640",
    "end": "737329"
  },
  {
    "text": "But introductory programmers\nshould learn programming by programming from\nscratch, right?",
    "start": "737330",
    "end": "743220"
  },
  {
    "text": " But you can generate\nthe 2 to the n subsets,",
    "start": "743220",
    "end": "748890"
  },
  {
    "text": "for example, by just-- I can show you code\nfor this offline--",
    "start": "748890",
    "end": "754440"
  },
  {
    "text": "by running through and\nincrementing an integer to go from 0 to 2 raised to n.",
    "start": "754440",
    "end": "761519"
  },
  {
    "text": "You know, 2 raised to\nn could be a million, which is not that bad. And then this you could encode\nas-- you turn it into binary.",
    "start": "761520",
    "end": "769080"
  },
  {
    "text": "So if n happens be 4, then\nthis turns into 0000, 0001.",
    "start": "769080",
    "end": "777450"
  },
  {
    "text": "And each of these is a\ndistinct subset, right? This means none of the\nelements are in there.",
    "start": "777450",
    "end": "783480"
  },
  {
    "text": "This means that last\nelement is in there. This means that all four\nelements are in there. And somewhere in here, if\nyou have something like this,",
    "start": "783480",
    "end": "790120"
  },
  {
    "text": "the second one is in there and\nthe fourth one is in there. So you could,\nessentially, use iteration",
    "start": "790120",
    "end": "796770"
  },
  {
    "text": "to generate all of the subsets. And you're not done yet. What do you have to do now that\nI've given you all the subsets?",
    "start": "796770",
    "end": "803730"
  },
  {
    "text": "It's two, three lines of\ncode to solve our problem. Someone tell me what those\ntwo, three lines of code",
    "start": "803730",
    "end": "808920"
  },
  {
    "text": "are from a standpoint\nof operations required. I'm not looking at\neach of the subsets.",
    "start": "808920",
    "end": "816120"
  },
  {
    "text": "What do I need to do\nfor a given subset? Yeah, go ahead, Ryan.",
    "start": "816120",
    "end": "821591"
  },
  {
    "text": "AUDIENCE: To iterate\nthrough the subset and find the sum\nof all the values. SRINI DEVADAS: That's right. I could iterate\nthrough the subset",
    "start": "821591",
    "end": "827986"
  },
  {
    "text": "and find the sum of\nsecond plus fourth. I do that for-- do I do that for all the\nsubsets and pick the maximum?",
    "start": "827986",
    "end": "836950"
  },
  {
    "text": "Or do I do that for a\nsubset of the subsets and pick the maximum?",
    "start": "836950",
    "end": "842204"
  },
  {
    "text": "AUDIENCE: from subsets SRINI DEVADAS: What\nhappens with this one? This is picking every number.",
    "start": "842204",
    "end": "848110"
  },
  {
    "text": "So this is obviously\ngoing to be bigger than all of the other ones. So did I have to\nenumerate all of them?",
    "start": "848110",
    "end": "854220"
  },
  {
    "text": "What is wrong with\nthis picture here? What is wrong with\nwhat I just said?",
    "start": "854220",
    "end": "859595"
  },
  {
    "text": "AUDIENCE: violates\nthe constraint. SRINI DEVADAS: Someone\nother than Ganatra, what is wrong with this solution\nwhich picks all the numbers?",
    "start": "859595",
    "end": "868385"
  },
  {
    "text": " It's on the board, the\nanswer is on the board.",
    "start": "868385",
    "end": "877040"
  },
  {
    "text": "Yeah, go ahead, Ryan. AUDIENCE: It violates\nthe constraint. SRINI DEVADAS: Yeah, it\nviolates the constraint.",
    "start": "877040",
    "end": "882335"
  },
  {
    "text": " So not all of the subsets--",
    "start": "882335",
    "end": "887812"
  },
  {
    "text": "I mean, if all of\nthe subsets work, then you don't have to\nenumerate all of the subsets. You would just pick the\nnumbers, all the numbers, right?",
    "start": "887812",
    "end": "894149"
  },
  {
    "text": "So you have to now check that-- and there is some code, too.",
    "start": "894150",
    "end": "899529"
  },
  {
    "text": "I lied. I guess, I haven't finished\nwith my dishonesty.",
    "start": "899530",
    "end": "905149"
  },
  {
    "text": "But it's not two, three lines\nof code, it's a little bit more than that-- to check that particular\nsubset, whether it violates",
    "start": "905149",
    "end": "913772"
  },
  {
    "start": "909000",
    "end": "1187000"
  },
  {
    "text": "the constraints or not.  And so what is the check--",
    "start": "913772",
    "end": "920160"
  },
  {
    "text": "it's going to be four\nor five lines of code-- what is the simple check\nif I give you a bit string?",
    "start": "920160",
    "end": "926140"
  },
  {
    "text": "What is the simple check that\nyou need to perform in order to check the violation of\nthe constraint in terms",
    "start": "926140",
    "end": "933810"
  },
  {
    "text": "of 0's and 1's? Yeah, go ahead. AUDIENCE: No two\nconsecutive 1's.",
    "start": "933810",
    "end": "939009"
  },
  {
    "text": "SRINI DEVADAS: Yeah, you\ndo not do consecutive 1's. If you ever see two or more\nconsecutive 1's, you've",
    "start": "939010",
    "end": "945150"
  },
  {
    "text": "got a problem, right? So that's easy to check. And this constraint is\nno two consecutive 1's.",
    "start": "945150",
    "end": "954460"
  },
  {
    "text": " So you can imagine\ncoding this up. And if you coded\nthat strategy up,",
    "start": "954460",
    "end": "963160"
  },
  {
    "text": "it turns out that this\nparticular thing, it's",
    "start": "963160",
    "end": "968329"
  },
  {
    "text": "a reasonable strategy\nif n is small. And it turns out that\nit would tell you",
    "start": "968330",
    "end": "975290"
  },
  {
    "text": "that you want to pick 15, 23,\n4, interesting enough, 17, 34.",
    "start": "975290",
    "end": "987300"
  },
  {
    "text": "So double skip over there\nbecause you would really want to get to 17. This 34, and 18,\nand you want 15.",
    "start": "987300",
    "end": "999951"
  },
  {
    "text": "That makes sense. You don't want 12. And so this ends up\nadding up to 126, which happens to be the optimal.",
    "start": "999952",
    "end": "1007150"
  },
  {
    "text": "So you can certainly do that.  You can, as I said,\nuse the powerset",
    "start": "1007150",
    "end": "1013480"
  },
  {
    "text": "to save yourself some trouble. But you still have to code\nthe violation of constraints, right?",
    "start": "1013480",
    "end": "1019820"
  },
  {
    "text": "We want to do substantially\nbetter than this. Because if n happens to\nbe a 50, 2 raised to 50",
    "start": "1019820",
    "end": "1027880"
  },
  {
    "text": "is way too large a number. And we don't want\nto be enumerating all of these subsets. In fact, there's a way\nof doing this, certainly,",
    "start": "1027880",
    "end": "1037449"
  },
  {
    "text": "in polynomial time. And it's going to\nbe something where",
    "start": "1037450",
    "end": "1043660"
  },
  {
    "text": "we're going to be able to run\nthis algorithm in linear time.",
    "start": "1043660",
    "end": "1048820"
  },
  {
    "text": "We can make a pass\nthrough this list and get that 126\nnumber blazingly fast",
    "start": "1048820",
    "end": "1057129"
  },
  {
    "text": "using the notion of\nmemoization, which is related to dynamic programming.",
    "start": "1057130",
    "end": "1063550"
  },
  {
    "text": "And so this is a powerful\nalgorithmic technique that you'll see over and over,\nespecially if you take classes",
    "start": "1063550",
    "end": "1070029"
  },
  {
    "text": "like 006 and 046. That gives you exponential\nimprovements in runtime.",
    "start": "1070030",
    "end": "1076360"
  },
  {
    "text": "Rather than 2 raised to n,\ngrowing as 2 raised to n, you grow as n, which is a\nhuge difference, obviously.",
    "start": "1076360",
    "end": "1083740"
  },
  {
    "text": "Now, usually, when we talk\nabout dynamic programming, we start with a\nrecursive strategy, not",
    "start": "1083740",
    "end": "1090850"
  },
  {
    "text": "this enumerative\nsubset strategy, to generate the\ndifferent solutions.",
    "start": "1090850",
    "end": "1099080"
  },
  {
    "text": "And one of the\nproblems with this is you're generating a\nlot of solutions, a lot",
    "start": "1099080",
    "end": "1104830"
  },
  {
    "text": "of incorrect, invalid subsets. Because 1111 is\nan invalid subset.",
    "start": "1104830",
    "end": "1110680"
  },
  {
    "text": "And there's a lot of\nthem that are invalid. A better approach, which\nwould still be exponential,",
    "start": "1110680",
    "end": "1116620"
  },
  {
    "text": "but it is better in terms of\nnumbers than 2 raised to n,",
    "start": "1116620",
    "end": "1122470"
  },
  {
    "text": "is to only generate recursively\nthe legal combinations",
    "start": "1122470",
    "end": "1129010"
  },
  {
    "text": "and then pick the best\nlegal combination. And the legal\ncombination, of course,",
    "start": "1129010",
    "end": "1136090"
  },
  {
    "text": "in this case, as\nwe described, was no two consecutive 1's, right?",
    "start": "1136090",
    "end": "1142330"
  },
  {
    "text": "Now, we've done recursion. We've looked at recursive code. So the key thing when you write\nrecursive code is, remember,",
    "start": "1142330",
    "end": "1150820"
  },
  {
    "text": "you want to get subproblems\nthat look like the problem",
    "start": "1150820",
    "end": "1156370"
  },
  {
    "text": "that you're solving, right? They look exactly like the\nproblem you're solving. Because then you\ncan invoke yourself",
    "start": "1156370",
    "end": "1163450"
  },
  {
    "text": "as a procedure with\ndifferent arguments. And we kind of went through\nthis a couple of times.",
    "start": "1163450",
    "end": "1169840"
  },
  {
    "text": "So this problem is\nactually less complicated than the tiling problem.",
    "start": "1169840",
    "end": "1175159"
  },
  {
    "text": "It is basically\na row of numbers. And let's just say you have\nnumbers a, b, c, d, e, f.",
    "start": "1175160",
    "end": "1185230"
  },
  {
    "text": " Try to think of a recursive\nstrategy that says, I want--",
    "start": "1185230",
    "end": "1194590"
  },
  {
    "text": "let's call it Coinrow. And Coinrow is going to have\na through f as an argument.",
    "start": "1194590",
    "end": "1203770"
  },
  {
    "text": "That's the list. I'm just using pseudocode here. And I want Coinrow to\ndo some computation.",
    "start": "1203770",
    "end": "1211510"
  },
  {
    "text": "And it's going to call\nCoinrow maybe multiple times.",
    "start": "1211510",
    "end": "1217060"
  },
  {
    "text": "But the key thing is,\nwhat are the arguments",
    "start": "1217060",
    "end": "1226210"
  },
  {
    "text": "that you have inside of those\nrecursive calls for Coinrow?",
    "start": "1226210",
    "end": "1233169"
  },
  {
    "text": "And that's the biggest question. The easier question\nto answer is,",
    "start": "1233170",
    "end": "1240220"
  },
  {
    "text": "what happens when you\nhave the base case? And you end up,\nessentially, saying,",
    "start": "1240220",
    "end": "1247360"
  },
  {
    "text": "you've got one coin on the row.",
    "start": "1247360",
    "end": "1252960"
  },
  {
    "text": "So you've got one\ncoin problem, right? What happens then? What is the base case?",
    "start": "1252960",
    "end": "1258659"
  },
  {
    "text": "What do you do? You pick the coin, OK? Because if you had two\nof them, if you happened",
    "start": "1258660",
    "end": "1265200"
  },
  {
    "text": "to choose the base case to\nbe 2, in this case, e and f, what would you do in that case?",
    "start": "1265200",
    "end": "1272760"
  },
  {
    "text": "Compare the two and pick\nthe bigger one, right? But you have to be a\nlittle bit careful here.",
    "start": "1272760",
    "end": "1278710"
  },
  {
    "text": "Because when you make\nthe recursive calls, obviously, you can't have--",
    "start": "1278710",
    "end": "1284930"
  },
  {
    "text": "would this work if you picked 8? If I did something like this--",
    "start": "1284930",
    "end": "1291210"
  },
  {
    "text": "I do 8 plus Coinrow.",
    "start": "1291210",
    "end": "1296370"
  },
  {
    "text": "So inside here, I do a\nplus Coinrow b through f.",
    "start": "1296370",
    "end": "1304600"
  },
  {
    "text": "If I wrote this code as a\nplus Coinrow b through f, what would happen?",
    "start": "1304600",
    "end": "1311669"
  },
  {
    "text": "What would happened\nif I had Coinrow, and then I said I'm going to\nreturn a plus Coinrow b through",
    "start": "1311670",
    "end": "1318330"
  },
  {
    "text": "f, and then I have\na base case that says that if I have a single-- I still need a base case.",
    "start": "1318330",
    "end": "1323710"
  },
  {
    "text": "This is just the recursive step. I need a base case so\nthis would complete. And then I say that if I ever\nhave an argument of length 1,",
    "start": "1323710",
    "end": "1330580"
  },
  {
    "text": "I'm going to return\nthat argument. So what would happen\nwith this code? Any ideas?",
    "start": "1330580",
    "end": "1335880"
  },
  {
    "text": " Go ahead, Kye. AUDIENCE: Pick all the coins.",
    "start": "1335880",
    "end": "1341030"
  },
  {
    "text": "SRINI DEVADAS: It would\npick all the coins. It would just totally\npick all the coins. Because it would go a plus,\nand then it'd go b through f.",
    "start": "1341030",
    "end": "1347540"
  },
  {
    "text": "The constraint hasn't been\nencoded in here, right? So we would just\npick all the coins. So that doesn't make sense.",
    "start": "1347540",
    "end": "1354210"
  },
  {
    "text": "So I have to-- I have some choices here. And so this was a giveaway\nthat this would not work.",
    "start": "1354210",
    "end": "1362250"
  },
  {
    "text": "Because it's not\ndoing any choices, it's just picking all the coins. So what happens if I pick a?",
    "start": "1362250",
    "end": "1371620"
  },
  {
    "text": "What does it mean? If I pick a, what\ndoes that mean? What does that mean\nto my value that I",
    "start": "1371620",
    "end": "1378149"
  },
  {
    "text": "want to return, which eventually\nneeds to be the maximum value? And what does it mean with\nrespect to the subproblems?",
    "start": "1378150",
    "end": "1388440"
  },
  {
    "text": "So the first question is easier. What does it mean with\nrespect to my value?",
    "start": "1388440",
    "end": "1393620"
  },
  {
    "text": "I need to add it to\nthe value, right? The second question is,\nwhat happens to the--",
    "start": "1393620",
    "end": "1399400"
  },
  {
    "text": "if I pick a, what happens to the\ncoin row problem that remains? What can I say\nabout the coin row",
    "start": "1399400",
    "end": "1405230"
  },
  {
    "text": "problem that remains that\nyou're going to tell me about? If I picked a-- so this might be\npick the first one.",
    "start": "1405230",
    "end": "1412909"
  },
  {
    "text": "Pick first, in this\ncase, which is a. We'll just put that in brackets.",
    "start": "1412910",
    "end": "1419550"
  },
  {
    "text": "So what do I need to send\nas an argument to Coinrow? As one possibility, what do\nI need to send as an argument",
    "start": "1419550",
    "end": "1427009"
  },
  {
    "text": "to Coinrow? Someone who has an answer? That should use the constraint.",
    "start": "1427010",
    "end": "1435570"
  },
  {
    "text": "What do I need to send as\nan argument to Coinrow? ",
    "start": "1435570",
    "end": "1441990"
  },
  {
    "text": "Yeah, go ahead, I saw Kye first. Go ahead. AUDIENCE: c through f. SRINI DEVADAS: c\nthrough f, exactly.",
    "start": "1441990",
    "end": "1448190"
  },
  {
    "text": "I cannot pick b right? So I encode the constraint\nin the recursive call",
    "start": "1448190",
    "end": "1454639"
  },
  {
    "text": "by saying that if\nI picked a then I encode this as c\ndot dot dot f, OK?",
    "start": "1454640",
    "end": "1464240"
  },
  {
    "text": "I'll just say c dash f. And let me go ahead and\nerase this to give myself",
    "start": "1464240",
    "end": "1471560"
  },
  {
    "start": "1471000",
    "end": "1580000"
  },
  {
    "text": "a little bit more room. But I'm not done yet. So if I ended up\npicking a, and I go--",
    "start": "1471560",
    "end": "1479179"
  },
  {
    "text": "if I don't write any\nmore code and I ended up picking up a plus the value that\nI get from Coinrow c through f,",
    "start": "1479180",
    "end": "1487340"
  },
  {
    "text": "and if I don't\nwrite any more code, what does that correspond\nto in terms of an algorithm?",
    "start": "1487340",
    "end": "1492790"
  },
  {
    "text": "We've actually used\nthat algorithm. What does that correspond to if\nI only make one recursive call,",
    "start": "1492790",
    "end": "1498419"
  },
  {
    "text": "and I pick a, and\nI go c through f? What does that correspond to\nwith respect to an algorithm?",
    "start": "1498420",
    "end": "1503540"
  },
  {
    "text": " Someone who hasn't answered? This is the your last\nchance, last lecture.",
    "start": "1503540",
    "end": "1513430"
  },
  {
    "text": "Yeah, you're thinking about it? Go ahead. AUDIENCE: It violates\nthe constraint because c and d and e and f.",
    "start": "1513430",
    "end": "1520450"
  },
  {
    "text": "SRINI DEVADAS: So\nStyliani right? So Styliani says, basically,\nit's an alternation algorithm.",
    "start": "1520450",
    "end": "1528340"
  },
  {
    "text": "You're going to end up picking\na, and then c, and then e, and then f. You can't pick f because\nyou had to skip f.",
    "start": "1528340",
    "end": "1535540"
  },
  {
    "text": "So it's alternation. We did this\nalternation algorithm. We knew it wasn't\ngoing to be optimal.",
    "start": "1535540",
    "end": "1541240"
  },
  {
    "text": "So clearly, it's not a\nsolution to our problem, algorithmically speaking,\nbecause it's only going to give you the\nalternating coins.",
    "start": "1541240",
    "end": "1548200"
  },
  {
    "text": "And that might work out,\nbut it didn't work out in the case of our\nlonger problem, right?",
    "start": "1548200",
    "end": "1554120"
  },
  {
    "text": "We got-- what was it-- 116. So that doesn't work.",
    "start": "1554120",
    "end": "1559600"
  },
  {
    "text": "So what else do I do? What is the other\ncase that corresponds do what I have here?",
    "start": "1559600",
    "end": "1565600"
  },
  {
    "text": "I can pick the coin and? ",
    "start": "1565600",
    "end": "1570630"
  },
  {
    "text": "I could skip the coin. I could pick the coin and\nI could skip the coin.",
    "start": "1570630",
    "end": "1576240"
  },
  {
    "text": "Skip first, a. Aha, what now can I pass\ninto the Coinrow argument?",
    "start": "1576240",
    "end": "1586320"
  },
  {
    "text": "What can I pass into the\nCoinrow argument if I skip a?",
    "start": "1586320",
    "end": "1592634"
  },
  {
    "text": "Go ahead, Ryan. AUDIENCE: b through f. SRINI DEVADAS: b\nthrough f, exactly. So it's different, b through f.",
    "start": "1592635",
    "end": "1598770"
  },
  {
    "text": "That's it, that's our algorithm. This is now four lines of code\nin terms of recursive calls.",
    "start": "1598770",
    "end": "1605520"
  },
  {
    "text": "One last thing, I\ndid these two things, I'm going to get values\nback for each of these.",
    "start": "1605520",
    "end": "1616549"
  },
  {
    "text": "Because I'm going\nto get a value back. That's essentially\nwhat I'm doing. When I'm picking, I'm\ngoing to add the value a.",
    "start": "1616550",
    "end": "1621920"
  },
  {
    "text": "And then I'm going to add it to\nthe return value corresponding to Coinrow c through f.",
    "start": "1621920",
    "end": "1628400"
  },
  {
    "text": "And then, in this case, I'm\ngoing to get simply the value corresponding to b through f. What do I do with val1 and val2?",
    "start": "1628400",
    "end": "1636272"
  },
  {
    "text": "What do I do with\nthese two values? Do I look at them? ",
    "start": "1636272",
    "end": "1641497"
  },
  {
    "text": "Yeah. AUDIENCE: return them? SRINI DEVADAS: What is the\nvalue for the original-- what",
    "start": "1641498",
    "end": "1647940"
  },
  {
    "text": "is the value that\nI want to return for the original problem? Just like with all of\nthe things we've done,",
    "start": "1647940",
    "end": "1653590"
  },
  {
    "text": "we've taken values of\nsubproblems, solutions to subproblems, and we've\nactually done something",
    "start": "1653590",
    "end": "1660520"
  },
  {
    "text": "with them to return\nthe value or solution for the original problem. So what do I need to do?",
    "start": "1660520",
    "end": "1666400"
  },
  {
    "text": "What line of code\ndo I need to write to return a value for\nthe original coin row problem that had a through\nf as its arguments?",
    "start": "1666400",
    "end": "1674630"
  },
  {
    "text": "It's one line of code. What is that line of code? Go ahead, George.",
    "start": "1674630",
    "end": "1679720"
  },
  {
    "text": "AUDIENCE: Put it in the max. SRINI DEVADAS: Return the max. That's exactly right. You return max val1, val2.",
    "start": "1679720",
    "end": "1690820"
  },
  {
    "text": " And so let me show\nyou the code for that. ",
    "start": "1690820",
    "end": "1698670"
  },
  {
    "text": "So this is a little bit better\nthan the subset solution",
    "start": "1698670",
    "end": "1707180"
  },
  {
    "text": "that we described. But as it turns out, it's\nnot a whole lot better,",
    "start": "1707180",
    "end": "1713860"
  },
  {
    "text": "and we'll talk about that. But this code now should\nnot be surprising to you",
    "start": "1713860",
    "end": "1719340"
  },
  {
    "text": "because we talked about it and\neffectively, collectively we wrote it, right? That was a collective\ncoding exercise",
    "start": "1719340",
    "end": "1726659"
  },
  {
    "text": "called cooperative coding. Not really, but close enough.",
    "start": "1726660",
    "end": "1732150"
  },
  {
    "text": "And so you see what\nI have up there. And there's only\none thing that I",
    "start": "1732150",
    "end": "1738150"
  },
  {
    "text": "didn't describe to you,\nwhich is something that we're",
    "start": "1738150",
    "end": "1743550"
  },
  {
    "text": "going to get to in a second. But you see something\ncalled table in there, which is\nessentially something that keeps the maximum value\ncorresponding to the smaller",
    "start": "1743550",
    "end": "1754820"
  },
  {
    "text": "problems that we are looking at. So it keeps that around.",
    "start": "1754820",
    "end": "1760580"
  },
  {
    "text": "But you can see that there's a\nbase case if you forget table. And there's a reason\nthat table is in here.",
    "start": "1760580",
    "end": "1766590"
  },
  {
    "text": "And I'm going to ask\nyou why in a minute. But forget about\ntable for a second. And if len is 0, you're\ngoing to return 0.",
    "start": "1766590",
    "end": "1772460"
  },
  {
    "text": "That's a base case. If len is 1, you're going\nto return that coin. That's also another base case.",
    "start": "1772460",
    "end": "1779360"
  },
  {
    "text": "And you might end up\nwith one or the other. Because, obviously, you're\nskipping coins, right?",
    "start": "1779360",
    "end": "1785539"
  },
  {
    "text": "So it's possible that you\nneed to take into account both of these base cases. You say, why do I\nneed two base cases?",
    "start": "1785540",
    "end": "1791240"
  },
  {
    "text": "Well, you're taking away a coin. So you might end up with\nsomething that's empty, right? So you need both of\nthose base cases.",
    "start": "1791240",
    "end": "1796850"
  },
  {
    "text": "And then pick equals\ncoin row, table. This thing over here\nis picking the coin.",
    "start": "1796850",
    "end": "1805919"
  },
  {
    "text": "And then 2 colon says\nthat you're dropping-- in our case, we picked a, but\nwe dropped b and started with c.",
    "start": "1805920",
    "end": "1814670"
  },
  {
    "text": "And skip is you're skipping it. So you just skipped it\nand you go row 1 colon.",
    "start": "1814670",
    "end": "1819950"
  },
  {
    "text": "Makes perfect sense, right? And I don't know if you\nguys have ever returned--",
    "start": "1819950",
    "end": "1826760"
  },
  {
    "text": "I think you have in exercises--\nif you returned multiple values in the return statement.",
    "start": "1826760",
    "end": "1833400"
  },
  {
    "text": "And so this thing\nover here is-- the 0 says that I'm going to look at\nthe first value, not the table.",
    "start": "1833400",
    "end": "1840922"
  },
  {
    "text": "Because that's a value, and\nI'm going to add two values up. And I'm only concerned\nwith this value here. But I'm actually returning\nthis table thing.",
    "start": "1840922",
    "end": "1847700"
  },
  {
    "text": "And this table thing, as\nyou can see from here, is simply computing\nthe optimum values",
    "start": "1847700",
    "end": "1855320"
  },
  {
    "text": "that correspond to problems\nof the entire problem",
    "start": "1855320",
    "end": "1862610"
  },
  {
    "text": "and, essentially, the\nproblems that are smaller.",
    "start": "1862610",
    "end": "1868850"
  },
  {
    "text": "And so then you end up-- you're skipping\nfrom the beginning. And so when you look at\nthe table len row minus 1,",
    "start": "1868850",
    "end": "1879150"
  },
  {
    "text": "that is effectively-- since you're going from\nthe beginning of the list-- that is telling you what the\noptimum is, len row minus 1.",
    "start": "1879150",
    "end": "1888210"
  },
  {
    "text": "Sorry, len row minus 1-- yeah, that's right. The number of entries in\nthe table is len raw plus 1.",
    "start": "1888210",
    "end": "1897320"
  },
  {
    "text": "The total number of entries in\nthe table starts with 0 always, so it's len row plus 1. And so table len\nrow is the entirety,",
    "start": "1897320",
    "end": "1905360"
  },
  {
    "text": "that's what you want\nfor the original thing. And len row minus 1 looks\nat an optimum for that,",
    "start": "1905360",
    "end": "1910910"
  },
  {
    "text": "skipping the first\none, and so on. So you're skipping from the\nbeginning, so remember that.",
    "start": "1910910",
    "end": "1917210"
  },
  {
    "text": "Why do you think we\nhave this table in here if we're only concerned\nwith the maximum value?",
    "start": "1917210",
    "end": "1924650"
  },
  {
    "text": "Or are we only concerned\nwith the maximum value? What did I do when I\ngot these numbers up?",
    "start": "1924650",
    "end": "1931520"
  },
  {
    "text": "What else did I do other than\npointing out these numbers? I also gave you more\ninformation, right?",
    "start": "1931520",
    "end": "1939000"
  },
  {
    "text": "I just said 126. So if I just told you it was\n126, would you believe me?",
    "start": "1939000",
    "end": "1945465"
  },
  {
    "text": "AUDIENCE: It is hard to check. SRINI DEVADAS: Well, it's\nreally hard to check.",
    "start": "1945465",
    "end": "1950490"
  },
  {
    "text": "It was credible\nbecause I said 126 and then I told you by circling\nthem what the numbers were,",
    "start": "1950490",
    "end": "1957090"
  },
  {
    "text": "right? So if you don't have\nthis table stuff in here, it turns out that you don't\nhave enough information",
    "start": "1957090",
    "end": "1965400"
  },
  {
    "text": "to figure out what\ncoins were picked. You'll get the correct answer. It is guaranteed to\nbe a correct answer.",
    "start": "1965400",
    "end": "1970659"
  },
  {
    "text": "But you don't have the\ninformation about 15, 23, skipping 11\nand 3, and getting",
    "start": "1970660",
    "end": "1975750"
  },
  {
    "text": "4, and so on and so forth. So we need more code that takes\nthis collection of subproblems",
    "start": "1975750",
    "end": "1983730"
  },
  {
    "text": "that each have been solved. So we actually solved all of\nthe subproblems corresponding to picking this, and picking\nthat, and then picking this,",
    "start": "1983730",
    "end": "1990750"
  },
  {
    "text": "and so on and so forth. And you need to use\nthose values in order to discover, using a traceback\nprocedure, what the coins are.",
    "start": "1990750",
    "end": "2001325"
  },
  {
    "text": "Or you could do\nmore work in here. I chose to-- you'll see why-- I chose to do it this way where\nI'm collecting up everything",
    "start": "2001325",
    "end": "2008810"
  },
  {
    "text": "into table. And I'm going to\neventually-- and we'll",
    "start": "2008810",
    "end": "2014500"
  },
  {
    "text": "talk about this code,\nat least briefly. But this code, traceback, is\ntaking the original problem",
    "start": "2014500",
    "end": "2023380"
  },
  {
    "text": "and a table and is just\niteratively going through-- there's no\nenumeration here, this",
    "start": "2023380",
    "end": "2029530"
  },
  {
    "text": "is very efficient--\nis iteratively going through row and\ntable and discovering",
    "start": "2029530",
    "end": "2035139"
  },
  {
    "text": "what the selected coins are. And so that's something that\nwe'll look at in just a minute.",
    "start": "2035140",
    "end": "2044679"
  },
  {
    "text": "Actually not just a minute,\nbut after we go back to this. And I'm going to\ntell you or ask you",
    "start": "2044680",
    "end": "2051879"
  },
  {
    "text": "about this in terms of its\ncomputational complexity, OK? So anyway, assume that\nwe've done traceback.",
    "start": "2051880",
    "end": "2059690"
  },
  {
    "text": "And it's not hard to do if\nyou have the table of results. Then let's go back\nto this and let's",
    "start": "2059690",
    "end": "2066290"
  },
  {
    "text": "talk about the recursive calls. And let's take a look at what's\ngoing on here with respect",
    "start": "2066290",
    "end": "2072020"
  },
  {
    "start": "2072000",
    "end": "2252000"
  },
  {
    "text": "to how many recursive\ncalls are made. And then we'll\nget to memoization",
    "start": "2072020",
    "end": "2082560"
  },
  {
    "text": "in dynamic programming. So let me just say,\nif I had Coins that--",
    "start": "2082560",
    "end": "2089230"
  },
  {
    "text": "this is the number of elements-- so I have 5.",
    "start": "2089230",
    "end": "2095110"
  },
  {
    "text": "Then I'm going to call Coins 4\nand I'm going to call Coins 3.",
    "start": "2095110",
    "end": "2105510"
  },
  {
    "text": "And so here, I\nskipped the first one. Here, I picked the first\none, and therefore, I",
    "start": "2105510",
    "end": "2112930"
  },
  {
    "text": "had to skip the second one,\nso I have 3 here, right? That makes sense? And then over here,\nwhat do I need",
    "start": "2112930",
    "end": "2121600"
  },
  {
    "text": "to write here if I follow\nexactly the pattern? I'm going to write\nCoins 3, right?",
    "start": "2121600",
    "end": "2128560"
  },
  {
    "text": "So I have Coins 3 over here,\nand here, it's Coins 2. ",
    "start": "2128560",
    "end": "2135950"
  },
  {
    "text": "And here, I'm just going\nto write the numbers down-- 2, 1.",
    "start": "2135950",
    "end": "2143000"
  },
  {
    "text": "And again, I've got\n2, 1, and so on.",
    "start": "2143000",
    "end": "2149210"
  },
  {
    "text": "Now, the base case-- you might keep going even after\n2 because the base cases are--",
    "start": "2149210",
    "end": "2154450"
  },
  {
    "text": "you go 1, 0, 1, 0.",
    "start": "2154450",
    "end": "2160119"
  },
  {
    "text": "What do you see in here\nthat's a little bothersome? What do you see here\nthat's bothersome?",
    "start": "2160120",
    "end": "2166808"
  },
  {
    "start": "2166808",
    "end": "2174280"
  },
  {
    "text": "What is that, symbolically? If I had some number of\nelements, n elements,",
    "start": "2174280",
    "end": "2180090"
  },
  {
    "text": "what do I put here? It's n, right? And what do you see here?",
    "start": "2180090",
    "end": "2187390"
  },
  {
    "text": "It's getting pretty big. So down here, it's\ngetting pretty big.",
    "start": "2187390",
    "end": "2192720"
  },
  {
    "text": "So that's the problem. And one of the reasons\nit's getting pretty big",
    "start": "2192720",
    "end": "2197760"
  },
  {
    "text": "is because you're doing\nwork over and over. You see, Coins 3 here\ncouple of places,",
    "start": "2197760",
    "end": "2204210"
  },
  {
    "text": "Coins 2 in three places. And if this were larger,\nyou'd see a lot of subproblems",
    "start": "2204210",
    "end": "2211140"
  },
  {
    "text": "being solved over and over. So this code that you\nsee up on the screen",
    "start": "2211140",
    "end": "2217230"
  },
  {
    "text": "is incredibly\ninefficient because it's solving the same problem\nover and over, OK?",
    "start": "2217230",
    "end": "2225990"
  },
  {
    "text": "In particular, you would\nsolve Coins 4 exactly once, but Coins 3 twice,\nCoins 2 three times.",
    "start": "2225990",
    "end": "2233700"
  },
  {
    "text": "And if I just went up and\nmade this 10, Coins 10,",
    "start": "2233700",
    "end": "2239010"
  },
  {
    "text": "then you would see things\nthat are solved tens of times. And eventually,\nyou'll see things that",
    "start": "2239010",
    "end": "2244200"
  },
  {
    "text": "are solved hundreds of times. You're just repeating\nwork over and over.",
    "start": "2244200",
    "end": "2249510"
  },
  {
    "text": "You can actually write a\nrecurrence relationship that says that if you\nhad an n-element coin row",
    "start": "2249510",
    "end": "2263050"
  },
  {
    "start": "2252000",
    "end": "2552000"
  },
  {
    "text": "problem, then your\nrecurrence corresponds",
    "start": "2263050",
    "end": "2274060"
  },
  {
    "text": "to the number of\ncalls that are made. Number of operations\ntherefore that are performed",
    "start": "2274060",
    "end": "2280360"
  },
  {
    "text": "is A n equals A n minus\n1 plus A n minus 2. And then the base cases are\nA0 equals 1 and A1 equals 1,",
    "start": "2280360",
    "end": "2290000"
  },
  {
    "text": "because you're\njust picking that. And so if you look at\nwhat A2 would be, A2 is 2.",
    "start": "2290000",
    "end": "2297369"
  },
  {
    "text": "But then A3 is 2 plus-- initially it grows\nfairly slowly.",
    "start": "2297370",
    "end": "2303100"
  },
  {
    "text": "But then, when you get to\nA4, it becomes 5, and so on. And have you seen this number\nbefore, this recurrence",
    "start": "2303100",
    "end": "2311200"
  },
  {
    "text": "relationship before? It's called Fibonacci. It's called the\nFibonacci recurrence,",
    "start": "2311200",
    "end": "2316850"
  },
  {
    "text": "and this actually shows up here. So this has a\nrelationship to Fibonacci. And the number of computations\nin a recursive Fibonacci",
    "start": "2316850",
    "end": "2325300"
  },
  {
    "text": "is exactly the same\nas in this problem.",
    "start": "2325300",
    "end": "2330590"
  },
  {
    "text": "But if I told you to compute\nthe Fibonacci number F of n,",
    "start": "2330590",
    "end": "2337780"
  },
  {
    "text": "can you do that quickly?  If I wanted for you just to\ncompute the Fibonacci number,",
    "start": "2337780",
    "end": "2345756"
  },
  {
    "text": "then you would just\ndo that iteratively like I'm doing here, right? The numbers would get\nbigger, but there's no reason to do exponential\nwork for Fibonacci.",
    "start": "2345756",
    "end": "2353703"
  },
  {
    "text": "But here, of course, we're\ndoing something much more sophisticated than\njust Fibonacci,",
    "start": "2353704",
    "end": "2358930"
  },
  {
    "text": "in the sense that we are\nworking with a coin row problem. But this should give you a\nsense of the efficiency that",
    "start": "2358930",
    "end": "2366430"
  },
  {
    "text": "is possible here by thinking\nabout the relationship between recursive\nFibonacci that would",
    "start": "2366430",
    "end": "2371920"
  },
  {
    "text": "look a lot like this\nstructure that you see here-- just calling Fib of n.",
    "start": "2371920",
    "end": "2380640"
  },
  {
    "text": "Sorry, for Fib of n, you're\ncalling Fib of n minus 1 and you're calling Fib\nof n minus 2 recursively,",
    "start": "2380640",
    "end": "2386680"
  },
  {
    "text": "you're adding them up. And the base cases\nare exactly the same as you have here, returning\nfor the 0 case, F 0,",
    "start": "2386680",
    "end": "2395220"
  },
  {
    "text": "you're returning 1,\nand so on and so forth. And even Fibonacci,\nyou end up having redundancy in the recursive\nformulation, which",
    "start": "2395220",
    "end": "2402160"
  },
  {
    "text": "is exactly the redundancy\nthat you see here, OK? And so basically, it\nturns out that if you want",
    "start": "2402160",
    "end": "2411250"
  },
  {
    "text": "to go exponential to linear-- and you kind of see\nwhere this is going. The recursive was exponential.",
    "start": "2411250",
    "end": "2418760"
  },
  {
    "text": "The iterative, in the case\nof Fibonacci, is linear. So two things-- one,\nyou can take this",
    "start": "2418760",
    "end": "2429250"
  },
  {
    "text": "and you can turn it into\niteration and make it linear. But that is actually a more\ndramatic transformation",
    "start": "2429250",
    "end": "2439420"
  },
  {
    "text": "of the code. You can do something that\nis equivalent in efficiency",
    "start": "2439420",
    "end": "2445869"
  },
  {
    "text": "to the iterative version-- both for Fibonacci and\nfor our coin row problem, and we'll do it for\nour coin row problem--",
    "start": "2445870",
    "end": "2452829"
  },
  {
    "text": "that corresponds to,\nas I said, the more local modification\nof this code that",
    "start": "2452830",
    "end": "2458260"
  },
  {
    "text": "eliminates redundancy,\nthat eliminates redundant computations.",
    "start": "2458260",
    "end": "2463310"
  },
  {
    "text": "And all of these\nthings are equivalent and they're all part\nof dynamic programming. And we have four lectures on\ndynamic programming in 006.",
    "start": "2463310",
    "end": "2470830"
  },
  {
    "text": "So in 10 minutes or\n15 minutes, you're just going to get some sense\nfor what this is all about.",
    "start": "2470830",
    "end": "2476770"
  },
  {
    "text": "And so this is really a\npreview or an elevator pitch perhaps, a trailer, right?",
    "start": "2476770",
    "end": "2483790"
  },
  {
    "text": "So you end up, essentially,\ndoing equivalent work in the recursive memoized\nversion of this code",
    "start": "2483790",
    "end": "2492520"
  },
  {
    "text": "that I'll show you\nin just a minute that adds three lines of code to\nthis and makes the complexity go",
    "start": "2492520",
    "end": "2498250"
  },
  {
    "text": "from exponential to linear. And all you do in this code\nthat makes this complexity",
    "start": "2498250",
    "end": "2503350"
  },
  {
    "text": "equivalent into the iterative\nand that's very efficient is you remember the results.",
    "start": "2503350",
    "end": "2510430"
  },
  {
    "text": "You memoize the results\nof the computation. And you remember\nthat you've solved",
    "start": "2510430",
    "end": "2517170"
  },
  {
    "text": "Coins 4, which doesn't\nreally help you in this particular instance. But you remember that\nyou've solved Coins 3,",
    "start": "2517170",
    "end": "2524860"
  },
  {
    "text": "so you don't end up\ndoing all of this work. You end up just saying, OK--",
    "start": "2524860",
    "end": "2531760"
  },
  {
    "text": "I'm sorry, it depends on\nwhich direction you went. Let's say that, for\nargument's sake, you went in this\ndirection first, OK?",
    "start": "2531760",
    "end": "2539902"
  },
  {
    "text": "It totally depends on which\ndirection you went first. And since I drew this out and\nI don't want to change it, let's just assume that you\nwent in terms of Coins 3 first.",
    "start": "2539902",
    "end": "2548920"
  },
  {
    "text": "Which, in fact, is correct\nin terms of the code because if you see\nwhat I have there,",
    "start": "2548920",
    "end": "2554800"
  },
  {
    "start": "2552000",
    "end": "2912000"
  },
  {
    "text": "I went in the pick\ndirection first, which meant that I would go ahead\nand pick that first value.",
    "start": "2554800",
    "end": "2560710"
  },
  {
    "text": "And then I'd go in the right\ndirection, the right-hand side direction. So if I did all of that,\nI do all of this work,",
    "start": "2560710",
    "end": "2566849"
  },
  {
    "text": "now there's also memoization\ngoing on inside of here. So it's not like I'm\ndoing all of this work. I'm not only getting\nit just a factor of 2",
    "start": "2566850",
    "end": "2574120"
  },
  {
    "text": "in terms of improvement. But definitely, once I do\nthis and I get the value,",
    "start": "2574120",
    "end": "2580030"
  },
  {
    "text": "I can just return\nthat value here and I don't have to do all\nthe work underneath this. That's why I put\nthis in a square, OK?",
    "start": "2580030",
    "end": "2586150"
  },
  {
    "text": "And remember that this is\nbeing done recursively. So I'm going to\ndo it for Coins 2.",
    "start": "2586150",
    "end": "2591280"
  },
  {
    "text": "And so if I had multiple\nCoins 2's, then I wouldn't have to do that. And then over here, if I had\na longer coin row problem",
    "start": "2591280",
    "end": "2598900"
  },
  {
    "text": "to begin with, there's a lot\nof memoization that goes on. And you end up only solving--",
    "start": "2598900",
    "end": "2605560"
  },
  {
    "text": "this is the key-- you end up only solving each\nsubproblem how many times?",
    "start": "2605560",
    "end": "2613030"
  },
  {
    "text": "Once. Now the aha moment. How many subproblems are there?",
    "start": "2613030",
    "end": "2621060"
  },
  {
    "text": "How many coin row problems are\nthere, given an n-element coin",
    "start": "2621060",
    "end": "2627510"
  },
  {
    "text": "raw problem? How many? All of you together.",
    "start": "2627510",
    "end": "2634260"
  },
  {
    "text": "How many coin row\nproblems are there? n, that's it. There's only n\ncoin row problems.",
    "start": "2634260",
    "end": "2643190"
  },
  {
    "text": "It's like you had a through\nf, you had b through f, you had c through f, you had d\nthrough f, you had e, f, and f.",
    "start": "2643190",
    "end": "2652190"
  },
  {
    "text": "So if you only solve\ncoin row problem once,",
    "start": "2652190",
    "end": "2658700"
  },
  {
    "text": "and there's only n\ncoin row problems, the complexity clearly\ncannot be exponential,",
    "start": "2658700",
    "end": "2666710"
  },
  {
    "text": "it's going to be linear. Because whatever work\nyou did for that problem",
    "start": "2666710",
    "end": "2672110"
  },
  {
    "text": "is all that you have to do. And so maybe there's\na constant factor. But let's say that the number\nof operations-- obviously,",
    "start": "2672110",
    "end": "2678200"
  },
  {
    "text": "this is just the max. It's not complicated. We know what that is. So it would be the\ncomplexity of solving",
    "start": "2678200",
    "end": "2685450"
  },
  {
    "text": "a subproblem times the\nnumber of subproblems. The complexity of solving\na subproblem is constant.",
    "start": "2685450",
    "end": "2694100"
  },
  {
    "text": "It's just a small\nnumber of operations. And the number of\nsubproblems is linear.",
    "start": "2694100",
    "end": "2699680"
  },
  {
    "text": "So it's linear time,\nwhich is exactly the same as the iterative version. This is an incredibly\npowerful notion,",
    "start": "2699680",
    "end": "2706980"
  },
  {
    "text": "which is why there's\nclasses on this topic, just this very topic. And we spend a lot of time on\nthis in 006 as well as 046.",
    "start": "2706980",
    "end": "2715910"
  },
  {
    "text": "So what I'm going to do,\nthe main thing I want to do is show you this code that is\nan incremental modification",
    "start": "2715910",
    "end": "2726350"
  },
  {
    "text": "of the code I showed you before\nthat takes this complexity",
    "start": "2726350",
    "end": "2731570"
  },
  {
    "text": "and turns it from\nexponential to linear using this notion of memoization.",
    "start": "2731570",
    "end": "2737390"
  },
  {
    "text": "And then I want to tell you a\nlittle bit about the traceback code because that's interesting.",
    "start": "2737390",
    "end": "2742640"
  },
  {
    "text": "But from a standpoint of\njust getting the value back, you're all good without even\nunderstanding traceback.",
    "start": "2742640",
    "end": "2750390"
  },
  {
    "text": "So all I've done here\nis I've taken table",
    "start": "2750390",
    "end": "2755970"
  },
  {
    "text": "and I've turned it\ninto a dictionary, OK?",
    "start": "2755970",
    "end": "2761240"
  },
  {
    "text": "And I had to do a\nlittle bit of work here with respect\nto the memoization.",
    "start": "2761240",
    "end": "2768740"
  },
  {
    "text": "So if I look at the\nbase cases, it's pretty much exactly the same.",
    "start": "2768740",
    "end": "2773920"
  },
  {
    "text": "I just have a memo in a table. And all of these are\nessentially the same.",
    "start": "2773920",
    "end": "2781990"
  },
  {
    "text": "I'm sorry, all of these up\nhere are essentially the same. And then I'm looking at\na particular problem.",
    "start": "2781990",
    "end": "2789210"
  },
  {
    "text": "I see whether the memo\ntable that I have-- if len row in memo, then\nif it's in the dictionary,",
    "start": "2789210",
    "end": "2795280"
  },
  {
    "text": "that means I've already\nseen this problem before. And I just return the values\nstored in that dictionary.",
    "start": "2795280",
    "end": "2803260"
  },
  {
    "text": "And the value stored in that\ndictionary is, essentially,",
    "start": "2803260",
    "end": "2809290"
  },
  {
    "text": "a pair which corresponds to not\njust the value of the problem,",
    "start": "2809290",
    "end": "2818710"
  },
  {
    "text": "but also I'm storing-- I'm sorry, I take that back.",
    "start": "2818710",
    "end": "2824620"
  },
  {
    "text": "So memo itself is\njust like table. This memo here is\nsimply because overall I",
    "start": "2824620",
    "end": "2831850"
  },
  {
    "text": "want to return both the\nvalue and the memo table. So this memo table is exactly\nlike the original table.",
    "start": "2831850",
    "end": "2839530"
  },
  {
    "text": "It's simply a set of key-value\npairs that go memo 5 equals 56,",
    "start": "2839530",
    "end": "2849460"
  },
  {
    "text": "memo 4 maybe equals\n42, et cetera. So that's just a\nsimple memo table.",
    "start": "2849460",
    "end": "2857380"
  },
  {
    "text": "And I just need to\nreturn the memo. And so that's why I\nhad this memo out here. And this looks exactly\nthe same as it did before.",
    "start": "2857380",
    "end": "2863770"
  },
  {
    "text": "These three lines\nare exactly the same. This is an important line. So these lines were\nadded because I",
    "start": "2863770",
    "end": "2869680"
  },
  {
    "text": "wanted to memoize and look\nup what I solved before. And this line was added--",
    "start": "2869680",
    "end": "2876014"
  },
  {
    "text": "well, added in the sense\nthat it was added for memo, but I already had it for table. So it's just a\nsimple replacement,",
    "start": "2876014",
    "end": "2881440"
  },
  {
    "text": "so perhaps I shouldn't\nhave said added. But this is\nimportant because I'm putting it into the memo table.",
    "start": "2881440",
    "end": "2887740"
  },
  {
    "text": "And it's really this if\nstatement that's the key. Don't do redundant work.",
    "start": "2887740",
    "end": "2893770"
  },
  {
    "text": "So if you get to\nthis if statement, you're obviously getting\nto a return, which means you're not making\nthese recursive calls, which",
    "start": "2893770",
    "end": "2899356"
  },
  {
    "text": "is exactly going over here and\nremembering that you solved Coins 3 and returning\nthe value of Coins 3",
    "start": "2899356",
    "end": "2906339"
  },
  {
    "text": "the moment you see it. All right? That makes sense? Everybody is good with that?",
    "start": "2906340",
    "end": "2911605"
  },
  {
    "text": "Excellent. Let's just run this. And I want to show you\nwhat this gives you",
    "start": "2911605",
    "end": "2918040"
  },
  {
    "start": "2912000",
    "end": "3092000"
  },
  {
    "text": "just so you get some\nsense of what's going on. There's a couple of\ndifferent problems and I'm running them\nwith the different code.",
    "start": "2918040",
    "end": "2926545"
  },
  {
    "text": "And so you're getting\nthe same answers. That's just for\nverification purposes. So if you focus in\non what happens here,",
    "start": "2926545",
    "end": "2934450"
  },
  {
    "text": "this is, essentially, solving\nour first smaller problem. And it's telling you that if\nyou have the entire problem",
    "start": "2934450",
    "end": "2941950"
  },
  {
    "text": "with the seven\ncoins, which is what I have up there, the\nfirst problem here, then what you have is 56.",
    "start": "2941950",
    "end": "2950109"
  },
  {
    "text": "And if, in fact, you\nended up dropping-- it you're looking at the subproblem\nthat goes from 3 to 1,",
    "start": "2950110",
    "end": "2958119"
  },
  {
    "text": "and you drop 14, the optimum\nvalue for that is 42.",
    "start": "2958120",
    "end": "2963520"
  },
  {
    "text": "And then, if you drop both 14\nand 3, and you went with that, then you need to go\nbackwards from here--",
    "start": "2963520",
    "end": "2969309"
  },
  {
    "text": "56, 42. It's still 42. ",
    "start": "2969310",
    "end": "2975980"
  },
  {
    "text": "So if you drop 14, it's 42. If you drop 3, it's still 42\nbecause 27 and 15 give you",
    "start": "2975980",
    "end": "2984160"
  },
  {
    "text": "your 42. And that makes sense. And so you can see that. And then this other thing\nhere is the bigger problem.",
    "start": "2984160",
    "end": "2994270"
  },
  {
    "text": "It says, table equals-- sorry, yikes, Python shell.",
    "start": "2994270",
    "end": "3006690"
  },
  {
    "text": "Let me just point\nwith the cursor. This large thing here\nis our bigger problem.",
    "start": "3006690",
    "end": "3012150"
  },
  {
    "text": "And you can see the\ntable for this-- 126. If you dropped the first\none, you'd still get 126.",
    "start": "3012150",
    "end": "3018339"
  },
  {
    "text": "Then if you drop the\nfirst two, 3 and 15, you get, obviously, a smaller\nresult, and so on and so forth.",
    "start": "3018340",
    "end": "3025570"
  },
  {
    "text": "And this table that\nI'm getting back, which is basically the\noriginal table that you could",
    "start": "3025570",
    "end": "3033285"
  },
  {
    "text": "be thinking of as a list,\nthat turned into a dictionary when I wanted to memoize\nbecause I wanted to look it up",
    "start": "3033285",
    "end": "3039000"
  },
  {
    "text": "very efficiently. I could have left it, in\nthis case, as a Python list.",
    "start": "3039000",
    "end": "3046230"
  },
  {
    "text": "I did not need to\nuse a dictionary. I didn't need the\ngenerality of a dictionary",
    "start": "3046230",
    "end": "3052540"
  },
  {
    "text": "where the indices to a list can\nbe strings or negative numbers.",
    "start": "3052540",
    "end": "3058830"
  },
  {
    "text": "I'm just indexing into this. So the dictionary is a\nbit of a red herring. I just happened to use it.",
    "start": "3058830",
    "end": "3064470"
  },
  {
    "text": "But in general, you\nuse dictionaries because you may have\nto look up things that are more complicated\nthan just integer values.",
    "start": "3064470",
    "end": "3073930"
  },
  {
    "text": "But here, I could just\nnumber the subproblems 0 through 7, what have you,\nand then just look it up.",
    "start": "3073930",
    "end": "3079590"
  },
  {
    "text": "So the bottom line is I need\nthat information in order to compute or figure out\nwhat coins were selected.",
    "start": "3079590",
    "end": "3088320"
  },
  {
    "text": "And so the last thing\nthat I will show you is the traceback routine, which\nI just put up there briefly.",
    "start": "3088320",
    "end": "3096999"
  },
  {
    "start": "3092000",
    "end": "3244000"
  },
  {
    "text": "But I just want to\nspend one minute on this and we will close. And this traceback routine is\ntaking the values that you saw",
    "start": "3096999",
    "end": "3105150"
  },
  {
    "text": "and figuring out whether\nyou picked a coin or not.",
    "start": "3105150",
    "end": "3110250"
  },
  {
    "text": "So what it does is it\nlooks at the entire thing and it knows that the\nentire thing is 56.",
    "start": "3110250",
    "end": "3117010"
  },
  {
    "text": "And then it says, if I drop\nthe first one, and I get 42.",
    "start": "3117010",
    "end": "3122670"
  },
  {
    "text": "And it compares 56 with 42\nand says, wait a minute, the difference there is 14.",
    "start": "3122670",
    "end": "3129030"
  },
  {
    "text": "And that is exactly the value\nof the first element, right?",
    "start": "3129030",
    "end": "3134730"
  },
  {
    "text": "So what this tells me is that\nif I had the original problem, I got 56. If I drop the first one,\nI get 42 as optimal.",
    "start": "3134730",
    "end": "3143640"
  },
  {
    "text": "So that implies that for\nthe original problem, I picked the first coin. Because 56 minus 42\nis 14, that's it.",
    "start": "3143640",
    "end": "3152170"
  },
  {
    "text": "That's pretty much\nall you have to do. You just have to do\nthat over and over. And it's a little bit\nmore complicated than that",
    "start": "3152170",
    "end": "3157920"
  },
  {
    "text": "only because you don't want\nto get into negative indices for tables. And so the only reason\nthat first line-- table len",
    "start": "3157920",
    "end": "3165125"
  },
  {
    "text": "row minus i equals\nequals raw i-- is there is for the corner case where\nyou have a single-element list.",
    "start": "3165125",
    "end": "3172500"
  },
  {
    "text": "And you don't want to get\ninto a situation where-- this thing here\ncannot be negative.",
    "start": "3172500",
    "end": "3178770"
  },
  {
    "text": "If this is negative,\nthen the program crashes. So you don't want to\nget to this statement. It becomes negative, and\nit's a degenerate case.",
    "start": "3178770",
    "end": "3185567"
  },
  {
    "text": "And you don't want to get there. This or takes care of that. You essentially check for\nthe singleton equality.",
    "start": "3185567",
    "end": "3191880"
  },
  {
    "text": "And then you don't fall\nthrough the second-- if this part of the\nstatement is true,",
    "start": "3191880",
    "end": "3197160"
  },
  {
    "text": "then this doesn't get computed. So if table len row i\nequals equals row i is true,",
    "start": "3197160",
    "end": "3202860"
  },
  {
    "text": "then you don't compute that,\nyou don't get a negative index, and everything works on. But it comes down to\n56 minutes 42 is 14,",
    "start": "3202860",
    "end": "3210030"
  },
  {
    "text": "and you're all good to go. All right, good. So that's all I had, well, for\nthis lecture, for the class.",
    "start": "3210030",
    "end": "3218050"
  },
  {
    "text": "I'm going to be co-lecturing\n6006 next semester. I notice that some of\nyou were preregistered,",
    "start": "3218050",
    "end": "3223170"
  },
  {
    "text": "so I guess it's not goodbye. But it doesn't have to be\ngoodbye for the rest of you. You know what I said-- happy to talk algorithms\nand computer science.",
    "start": "3223170",
    "end": "3230670"
  },
  {
    "text": "Thanks for being an\nattentive audience. [APPLAUSE]",
    "start": "3230670",
    "end": "3236600"
  },
  {
    "start": "3236600",
    "end": "3244546"
  }
]