[
  {
    "text": " The following\ncontent is provided under a Creative\nCommons license. Your support will help MIT\nOpenCourseWare continue",
    "start": "0",
    "end": "6860"
  },
  {
    "text": "to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6860",
    "end": "13330"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13330",
    "end": "22120"
  },
  {
    "text": "PROFESSOR: A trilogy,\nif you will, on hashing. We did a lot of\ncool hashing stuff.",
    "start": "22120",
    "end": "28230"
  },
  {
    "text": "In some sense, we already have\nwhat we want with hashing. Hashing with chaining, we can\ndo constant expected time,",
    "start": "28230",
    "end": "37220"
  },
  {
    "text": "I should say, constant\nas long as-- yeah.",
    "start": "37220",
    "end": "43610"
  },
  {
    "text": "If we're doing insert,\ndelete, and exact search. Is this key in there?",
    "start": "43610",
    "end": "48750"
  },
  {
    "text": "If so, return the item. Otherwise, say no. And we do that with\nhashing with chaining.",
    "start": "48750",
    "end": "54390"
  },
  {
    "text": "Under the analysis we did was\nwith simple uniform hashing. An alternative is to use\nuniversal hashing, which",
    "start": "54390",
    "end": "61140"
  },
  {
    "text": "is not really in this class. But if you find this weird,\nthen this is less weird.",
    "start": "61140",
    "end": "67970"
  },
  {
    "text": "And hashing with\nchaining, the idea was we had this giant universe\nof all keys, could be actually",
    "start": "67970",
    "end": "73950"
  },
  {
    "text": "all integers. So it's infinite. But then what we actually\nare storing in our structure",
    "start": "73950",
    "end": "79390"
  },
  {
    "text": "is some finite set of n keys. Here, I'm labeling them\nk1 through k4, n is four.",
    "start": "79390",
    "end": "85000"
  },
  {
    "text": "But in general, you don't\nknow what they're going to be. We reduce that to\na table of size m",
    "start": "85000",
    "end": "92970"
  },
  {
    "text": "by this hash function\nh-- stuff drawn in red. And so here I have a\nthree way collision.",
    "start": "92970",
    "end": "97980"
  },
  {
    "text": "These three keys all\nmap to one, and so I store a linked list\nof k1, k4 and k2.",
    "start": "97980",
    "end": "104560"
  },
  {
    "text": "They're in no particular order. That's the point\nof that picture. Here k3 happens to\nmap to its own slot.",
    "start": "104560",
    "end": "110718"
  },
  {
    "text": "And the other slots\nare empty, so they just have a null saying there's\nan empty linked list there.",
    "start": "110719",
    "end": "117250"
  },
  {
    "text": "Total size of this\nstructure is n plus m. There's m to store the table.",
    "start": "117250",
    "end": "124520"
  },
  {
    "text": "There's n to store the sum of\nthe lengths of all the lists is going to be n.",
    "start": "124520",
    "end": "130459"
  },
  {
    "text": "And then we said the\nexpected chain length, if everything's uniform,\nthen the probability",
    "start": "130460",
    "end": "138209"
  },
  {
    "text": "of a particular key going\nto a particular slot is 1/m. And if everything's\nnice and independent",
    "start": "138210",
    "end": "144650"
  },
  {
    "text": "or if you use\nuniversal hashing, you can show that the total\nexpected chain length is n/m.",
    "start": "144650",
    "end": "152020"
  },
  {
    "text": "n independent trials,\neach probability 1/m of falling here. And we call that\nalpha, the load factor.",
    "start": "152020",
    "end": "159500"
  },
  {
    "text": "And we concluded that\nthe operation time to do an insert, delete, or\nsearch was order 1 plus alpha.",
    "start": "159500",
    "end": "165724"
  },
  {
    "text": " So that's n expectation.",
    "start": "165725",
    "end": "170940"
  },
  {
    "text": "So that was hashing\nwith chaining. This is good news. As long as alpha is a\nconstant, we get constant time.",
    "start": "170940",
    "end": "177540"
  },
  {
    "text": "And just for\nrecollection, today we're not really going to be thinking\ntoo much about what the hash",
    "start": "177540",
    "end": "183970"
  },
  {
    "text": "function is, but just\nremember two of them I talked about-- this one we actually\nwill use today, where you just",
    "start": "183970",
    "end": "190890"
  },
  {
    "text": "take the key and\ntake it module m. That's one easy way of mapping\nall integers into the space zero through m minus 1.",
    "start": "190890",
    "end": "197174"
  },
  {
    "text": "That's called the\ndivision method. Multiplication\nmethod is more fancy. You multiply by\na random integer,",
    "start": "197174",
    "end": "202990"
  },
  {
    "text": "and then you look at the\nmiddle of that multiplication. And that's where lots\nof copies of the key k",
    "start": "202990",
    "end": "209690"
  },
  {
    "text": "get mixed up together and that's\nsort of the name of hashing. And that's a better hash\nfunction in the real world.",
    "start": "209690",
    "end": "219069"
  },
  {
    "text": "So that's hashing with chaining. Cool? Now, it seemed like\na complete picture,",
    "start": "219070",
    "end": "225430"
  },
  {
    "text": "but there's one crucial thing\nthat we're missing here. Any suggestions? If I went to go to implement\nthis data structure,",
    "start": "225430",
    "end": "235490"
  },
  {
    "text": "what don't I know how to do?  And one answer could\nbe the hash function,",
    "start": "235490",
    "end": "241930"
  },
  {
    "text": "but we're going to ignore that. I know you know the answer. Does anyone else\nknow the answer? Yeah.",
    "start": "241930",
    "end": "247270"
  },
  {
    "text": "AUDIENCE: Grow the table. PROFESSOR: Grow the table. Yeah. The question is,\nwhat should m be?",
    "start": "247270",
    "end": "254650"
  },
  {
    "text": "OK, we have to create\na table size m, and we put our keys into it. We know we'd like m to\nbe about the same as n.",
    "start": "254650",
    "end": "263043"
  },
  {
    "text": "But the trouble\nis we don't really know n because\ninsertions come along, and then we might have\nto grow the table.",
    "start": "263044",
    "end": "268670"
  },
  {
    "text": "If n gets really\nbig relative to m, we're in trouble because\nthis factor will go up",
    "start": "268670",
    "end": "275100"
  },
  {
    "text": "and it will be no\nlonger constant time. The other hand, if we\nset m to be really big,",
    "start": "275100",
    "end": "280600"
  },
  {
    "text": "we're also kind of wasteful. The whole point\nof this structure was to avoid having one\nslot for every possible key",
    "start": "280600",
    "end": "287950"
  },
  {
    "text": "because that was giant. We want it to save space. So we want m to be big enough\nthat our structure is fast,",
    "start": "287950",
    "end": "295440"
  },
  {
    "text": "but small enough that it's\nnot wasteful in space. And so that's the\nremaining question. ",
    "start": "295440",
    "end": "312710"
  },
  {
    "text": "We want m to be theta n. We want it to be omega n.",
    "start": "312710",
    "end": "319200"
  },
  {
    "text": "So we want it to be at\nleast some constant times n, in order to make\nalpha be a constant. And we want it to be\nbig O of n in order",
    "start": "319200",
    "end": "326290"
  },
  {
    "text": "to make the space linear. ",
    "start": "326290",
    "end": "336620"
  },
  {
    "text": "And the way we're going to\ndo this, as we suggested, is to grow the table. ",
    "start": "336620",
    "end": "346630"
  },
  {
    "text": "We're going to start with\nm equals some constant. Pick your favorite constant. ",
    "start": "346630",
    "end": "352370"
  },
  {
    "text": "That's 20. My favorite constant's 7. Probably want it to be a power\nof two, but what the hell?",
    "start": "352370",
    "end": "360440"
  },
  {
    "text": "And then we're going to grow\nand shrink as necessary.",
    "start": "360440",
    "end": "366580"
  },
  {
    "text": "This is a pretty obvious idea. The interesting part\nis to get it to work.",
    "start": "366580",
    "end": "372449"
  },
  {
    "text": "And it's going to introduce\na whole new concept, which is amortization. ",
    "start": "372450",
    "end": "380340"
  },
  {
    "text": "So it's going to be cool. Trust me. Not only are we going to\nsolve this problem of how",
    "start": "380340",
    "end": "386630"
  },
  {
    "text": "to choose m, we're also going to\nfigure out how the Python data structure called list, also\nknown as array, is implemented.",
    "start": "386630",
    "end": "394840"
  },
  {
    "text": "So it's the exactly\nthe same problem. I'll get to that in a moment. So for example, let's\nsay that we-- I said m",
    "start": "394840",
    "end": "408720"
  },
  {
    "text": "should be theta n. Let's say we want m to be\nat least n at all times.",
    "start": "408720",
    "end": "415550"
  },
  {
    "text": "So what happens, we\nstart with m equals 8. And so, let's say we\nstart with an empty hash",
    "start": "415550",
    "end": "422620"
  },
  {
    "text": "table, an empty dictionary. And then I insert eight things. And then I go to\ninsert the ninth thing.",
    "start": "422620",
    "end": "429280"
  },
  {
    "text": "And I say, oh, now\nm is bigger than n. What should I do? ",
    "start": "429280",
    "end": "440030"
  },
  {
    "text": "So this would be like at the\nend of an insertion algorithm.",
    "start": "440030",
    "end": "445190"
  },
  {
    "text": "After I insert something and\nsay oh, if m is greater than n, then I'm getting worried that m\nis getting much bigger than n.",
    "start": "445190",
    "end": "450610"
  },
  {
    "text": "So I'd like to grow the table. OK? Let's take a little diversion\nto what does grow a table mean.",
    "start": "450610",
    "end": "457530"
  },
  {
    "start": "457530",
    "end": "464020"
  },
  {
    "text": "So maybe I have\ncurrent size m and I'd like to go to a\nnew size, m prime.",
    "start": "464020",
    "end": "471707"
  },
  {
    "text": "This would actually work if\nyou're growing or shrinking, but m could be bigger\nor smaller than m prime.",
    "start": "471707",
    "end": "478130"
  },
  {
    "text": "What should I do--\nwhat do I need to do in order to build\na new table of this size? ",
    "start": "478130",
    "end": "487680"
  },
  {
    "text": "Easy warm up. Yeah? AUDIENCE: Allocate the memory\nand then rehash [INAUDIBLE].",
    "start": "487680",
    "end": "493284"
  },
  {
    "text": "PROFESSOR: Yeah. Allocate the memory and rehash. So we have all these keys. They're stored with some\nhash function in here,",
    "start": "493284",
    "end": "500659"
  },
  {
    "text": "in table size m. I need to build an\nentirely new table, size m prime, and then I\nneed to rehash everything.",
    "start": "500660",
    "end": "508205"
  },
  {
    "start": "508205",
    "end": "534660"
  },
  {
    "text": "One way to think of this is\nfor each item in the old table,",
    "start": "534660",
    "end": "542180"
  },
  {
    "text": "insert into the\nnew table, T prime.",
    "start": "542180",
    "end": "551490"
  },
  {
    "text": "I think that's worth a cushion. You got one?",
    "start": "551490",
    "end": "557360"
  },
  {
    "text": "You don't want to get hit. It's fine. We're not burning through\nthese questions fast enough, so answer more questions.",
    "start": "557360",
    "end": "562740"
  },
  {
    "text": " OK. So how much time does this take? That's the main point\nof this exercise.",
    "start": "562740",
    "end": "569285"
  },
  {
    "start": "569285",
    "end": "578011"
  },
  {
    "text": "Yeah? AUDIENCE: Order n. PROFESSOR: Order n. Yeah, I think as long as\nm and m prime are theta n,",
    "start": "578011",
    "end": "586060"
  },
  {
    "text": "this is order n. In general, it's going to\nbe n plus m plus m prime,",
    "start": "586060",
    "end": "593269"
  },
  {
    "text": "but you're right. Most of the time\nthat's-- I mean, in the situation we're\ngoing to construct, this will be theta n.",
    "start": "593270",
    "end": "600310"
  },
  {
    "text": "But in general, there's this\nissue that, for example, to iterate over every\nitem in the table you have to look at every slot.",
    "start": "600310",
    "end": "606410"
  },
  {
    "text": "And so you have to\npay order m just to visit every slot, order n\nto visit all those lists, m",
    "start": "606410",
    "end": "612290"
  },
  {
    "text": "prime just to build the\nnew table, size m prime. Initialize it all to nil.",
    "start": "612290",
    "end": "618110"
  },
  {
    "text": "Good.  I guess another\nmain point here is",
    "start": "618110",
    "end": "623900"
  },
  {
    "text": "that we have to build\na new hash function. Why do we need to build\na new hash function? Because the hash function--\nwhy did I call it f prime?",
    "start": "623900",
    "end": "632200"
  },
  {
    "text": "Calling it h prime. ",
    "start": "632200",
    "end": "637300"
  },
  {
    "text": "The hash function is all about\nmapping the universe of keys to a table of size m. So if m changes, we definitely\nneed a new hash function.",
    "start": "637300",
    "end": "644556"
  },
  {
    "text": "If you use the\nold hash function, you would just use the\nbeginning of the table. If you add more slots down here,\nyou're not going to use them.",
    "start": "644556",
    "end": "651610"
  },
  {
    "text": "For every key you've\ngot to rehash it, figure out where it goes. I think I've drilled\nthat home enough times.",
    "start": "651610",
    "end": "657959"
  },
  {
    "text": "So the question becomes when we\nsee that our table is too big,",
    "start": "657960",
    "end": "664347"
  },
  {
    "text": "we need to make it bigger. But how much bigger? Suggestions?",
    "start": "664347",
    "end": "670156"
  },
  {
    "text": "Yeah? AUDIENCE: 2x. PROFESSOR: 2x. Twice m. Good suggestion. Any other suggestions?",
    "start": "670156",
    "end": "676056"
  },
  {
    "text": " 3x? ",
    "start": "676056",
    "end": "681340"
  },
  {
    "text": "OK. m prime equals 2 m is\nthe correct answer.",
    "start": "681340",
    "end": "687910"
  },
  {
    "text": "But for fun, or\nfor pain I guess, let's think about the wrong\nanswer, which would be,",
    "start": "687910",
    "end": "693660"
  },
  {
    "text": "just make it one bigger. That'll make m equal\nto n again, so that seems-- it's at least safe.",
    "start": "693660",
    "end": "699790"
  },
  {
    "text": "It will maintain my invariant\nthat m is at least n. I get this wrong-- sorry,\nthat's the wrong way.",
    "start": "699790",
    "end": "708510"
  },
  {
    "text": "n is greater than m. I want m to be greater\nthan or equal to n.",
    "start": "708510",
    "end": "714699"
  },
  {
    "text": "So if we just incremented\nour table size, then the question becomes, what\nis the cost of n insertions?",
    "start": "714700",
    "end": "722795"
  },
  {
    "text": " So say we start\nwith an empty table",
    "start": "722795",
    "end": "728180"
  },
  {
    "text": "and it has size\neight or whatever, some constant, and\nwe insert n times.",
    "start": "728180",
    "end": "735100"
  },
  {
    "text": "Then after eight insertions\nwhen we insert we have to rebuild\nour entire table. That takes linear time.",
    "start": "735100",
    "end": "740709"
  },
  {
    "text": "After we insert one\nmore, we have to rebuild. That takes linear time. And so the cost is going\nto be something like,",
    "start": "740710",
    "end": "748500"
  },
  {
    "text": "after you get to 8, it's going\nto be 1 plus 2 plus 3 plus 4. So a triangular number.",
    "start": "748500",
    "end": "754540"
  },
  {
    "text": "Every time we insert, we\nhave to rebuild everything. So this is quadratic,\nthis is bad.",
    "start": "754540",
    "end": "761035"
  },
  {
    "text": " Fortunately, if all we do\nis double m, we're golden.",
    "start": "761035",
    "end": "770939"
  },
  {
    "text": "And this is sort\nof the point of why it's called table-- I call\nit table resizing there.",
    "start": "770940",
    "end": "776862"
  },
  {
    "text": "Or to not give it\naway, but this is a technique called\ntable doubling. ",
    "start": "776862",
    "end": "782380"
  },
  {
    "text": "And let's just think of\nthe cost of n insertions. There's also deletions. But if we just, again,\nstart with an empty table,",
    "start": "782380",
    "end": "790060"
  },
  {
    "text": "and we repeatedly\ninsert, then the cost we get-- if we double each\ntime and we're inserting,",
    "start": "790060",
    "end": "799459"
  },
  {
    "text": "after we get to 8, we\ninsert, we double to 16. Then we insert eight more\ntimes, then we double to 32.",
    "start": "799460",
    "end": "806540"
  },
  {
    "text": "Then we insert 16 times,\nthen we double to 64. All these numbers\nare roughly the same.",
    "start": "806540",
    "end": "812180"
  },
  {
    "text": "They're within a factor\nof two of each other. Every time we're\nrebuilding in linear time, but we're only doing\nit like log end times.",
    "start": "812180",
    "end": "820990"
  },
  {
    "text": "If we're going from one to\nn, their log end growths-- log end doublings\nthat we're able to do.",
    "start": "820990",
    "end": "827029"
  },
  {
    "text": "So you might think,\noh, it's n log n. But we don't want n log n. That would be\nbinary search trees.",
    "start": "827030",
    "end": "832386"
  },
  {
    "text": "We want to do\nbetter than n log n. If you think about\nthe costs here, the cost to rebuild the first\ntime is concepts, like 8.",
    "start": "832386",
    "end": "841467"
  },
  {
    "text": "And then the cost to\nrebuild the second time is 16, so twice that. The cost to build\nthe next time is 64.",
    "start": "841467",
    "end": "850490"
  },
  {
    "text": "So these go up geometrically. You've got to get from 1\nto n with log end steps.",
    "start": "850490",
    "end": "857200"
  },
  {
    "text": "The natural way to\ndo it is by doubling, and you can prove that\nindeed this is the case.",
    "start": "857200",
    "end": "862230"
  },
  {
    "text": "So this is a geometric series. Didn't mean to\ncross it out there. And so this is theta n.",
    "start": "862230",
    "end": "867473"
  },
  {
    "text": " Now, it's a little strange\nto be talking about theta n.",
    "start": "867473",
    "end": "872670"
  },
  {
    "text": "This is a data\nstructure supposed to be constant\ntime per operation. This data structure is not\nconstant time per operation.",
    "start": "872670",
    "end": "880520"
  },
  {
    "text": "Even ignoring all\nthe hashing business, all you're trying to\ndo is grow a table.",
    "start": "880520",
    "end": "885630"
  },
  {
    "text": "It takes more than constant\ntime for some operations. Near the end, you have\nto rebuild the last time,",
    "start": "885630",
    "end": "892760"
  },
  {
    "text": "you're restructuring\nthe entire table. That take linear time\nfor one operation.",
    "start": "892760",
    "end": "899470"
  },
  {
    "text": "You might say that's bad. But the comforting\nthing is that there are only a few operations,\nlog end of them,",
    "start": "899470",
    "end": "905640"
  },
  {
    "text": "that are really expensive. The rest are all constant time. You don't do anything. You just add into the table.",
    "start": "905640",
    "end": "911560"
  },
  {
    "text": "So this is an idea\nwe call amortization. ",
    "start": "911560",
    "end": "924000"
  },
  {
    "text": "Maybe I should write here--\nwe call this table doubling. ",
    "start": "924000",
    "end": "938084"
  },
  {
    "text": "So the idea with amortization,\nlet me give you a definition. ",
    "start": "938085",
    "end": "958618"
  },
  {
    "text": "Actually, I'm going to be\na little bit vague here and just say-- T of n. Let me see what it\nsays in my notes.",
    "start": "958618",
    "end": "965006"
  },
  {
    "text": " Yeah. I say T of n.",
    "start": "965006",
    "end": "970270"
  },
  {
    "start": "970270",
    "end": "997590"
  },
  {
    "text": "So we're going to use\na concept of-- usually we say running time is T of n.",
    "start": "997590",
    "end": "1003889"
  },
  {
    "text": "And we started saying\nthe expected running time is some T of n plus\nalpha or whatever.",
    "start": "1003890",
    "end": "1011790"
  },
  {
    "text": "Now, we're going to be able to\nsay the amortized running time is T of n, or the running\ntime is T of n amortized.",
    "start": "1011790",
    "end": "1019440"
  },
  {
    "text": "That's what this is saying. And what that means\nis that it's not",
    "start": "1019440",
    "end": "1024569"
  },
  {
    "text": "any statement about\nthe individual running time of the operations. It's saying if you do a whole\nbunch of operations, k of them,",
    "start": "1024569",
    "end": "1031040"
  },
  {
    "text": "then the total running time\nis, at most, k times T of n. This is a way to\namortize, or to-- yeah,",
    "start": "1031040",
    "end": "1038189"
  },
  {
    "text": "amortize-- this is in the\neconomic sense of amortize, I guess. You spread out the high costs\nso that's it's cheap on average",
    "start": "1038190",
    "end": "1047470"
  },
  {
    "text": "all the time. It's kind of like-- normally,\nwe pay rent every month.",
    "start": "1047470",
    "end": "1052639"
  },
  {
    "text": "But you could think of\nit instead as you're only paying $50 a day or something\nfor your monthly rent.",
    "start": "1052640",
    "end": "1059490"
  },
  {
    "text": "It's maybe-- if you want\nto smooth things out, that would be a nice way\nto think about paying rent,",
    "start": "1059490",
    "end": "1065790"
  },
  {
    "text": "or every second you're\npaying a penny or something. ",
    "start": "1065790",
    "end": "1072610"
  },
  {
    "text": "It's close, actually. Little bit off, factor or two. Anyway, so that's the idea.",
    "start": "1072610",
    "end": "1079919"
  },
  {
    "text": "So you can think\nof-- this is kind",
    "start": "1079920",
    "end": "1091944"
  },
  {
    "text": "of like saying that the\nrunning time of an operation is T of n on average. But put that in quotes.",
    "start": "1091944",
    "end": "1097600"
  },
  {
    "text": "We don't usually use\nthat terminology. Maybe put a Tilda here. ",
    "start": "1097600",
    "end": "1105440"
  },
  {
    "text": "Where the average is taken\nover all the operations.",
    "start": "1105440",
    "end": "1111424"
  },
  {
    "start": "1111425",
    "end": "1116641"
  },
  {
    "text": "So this is something\nthat only makes sense for data structures. Data structures are things that\nhave lots of operations on them",
    "start": "1116641",
    "end": "1122780"
  },
  {
    "text": "over time. And if you just-- instead of\ncounting individual operation times and then adding them up,\nif you add them up and then",
    "start": "1122780",
    "end": "1130820"
  },
  {
    "text": "divide by the number\nof operations, that's your amortized\nrunning time. So the point is,\nin table doubling,",
    "start": "1130820",
    "end": "1138740"
  },
  {
    "text": "the amortized running\ntime is beta 1.",
    "start": "1138740",
    "end": "1146120"
  },
  {
    "text": "Because it's n in\ntotal-- at this point we've only analyzed insertions. We haven't talked\nabout deletions.",
    "start": "1146120",
    "end": "1151880"
  },
  {
    "start": "1151880",
    "end": "1163340"
  },
  {
    "text": "So k inserts. ",
    "start": "1163340",
    "end": "1168480"
  },
  {
    "text": "If we're just doing insertions,\ntake beta k time in total. So this means constant\namortized per insert.",
    "start": "1168480",
    "end": "1184415"
  },
  {
    "text": "OK, it's a simple\nidea, but a useful one because typically-- unless\nyou're in like a real time",
    "start": "1184415",
    "end": "1190759"
  },
  {
    "text": "system-- you typically only\ncare about the overall running time of your algorithm,\nwhich might use a data",
    "start": "1190760",
    "end": "1196600"
  },
  {
    "text": "structure as a sub routine. You don't care if\nindividual operations are expensive as long as all the\noperations together are cheap.",
    "start": "1196600",
    "end": "1204620"
  },
  {
    "text": "You're using hashing to\nsolve some other problem, like counting duplicate\nwords in doc dist.",
    "start": "1204620",
    "end": "1210714"
  },
  {
    "text": "You just care about the running\ntime of counting duplicate words. You don't care about how long\neach step of the for loop",
    "start": "1210714",
    "end": "1217040"
  },
  {
    "text": "takes, just the aggregate. So this is good\nmost of the time. And we've proved\nit for insertions.",
    "start": "1217040",
    "end": "1224550"
  },
  {
    "text": "It's also true when\nyou have deletions.",
    "start": "1224550",
    "end": "1230430"
  },
  {
    "text": "You have k inserts and deletes. ",
    "start": "1230430",
    "end": "1238530"
  },
  {
    "text": "They certainly\ntake order k time. Actually, this is easy\nto prove at this point",
    "start": "1238530",
    "end": "1244240"
  },
  {
    "text": "because we haven't\nchanged delete. So, what delete does is\nit just deletes something from the table, leaves\nthe table the same size.",
    "start": "1244240",
    "end": "1249965"
  },
  {
    "text": " And so it actually\nmakes life better for us",
    "start": "1249965",
    "end": "1256750"
  },
  {
    "text": "because if it decreases m,\nin order to make m big again, you have to do more insertions\nthan you had to before.",
    "start": "1256750",
    "end": "1263820"
  },
  {
    "text": "And the only extra cost\nwe're thinking about here is the growing, the rebuild\ncost from inserting too big.",
    "start": "1263820",
    "end": "1270890"
  },
  {
    "text": "And so this is still true. Deletions only help us. If you have k total inserts and\ndeletes, then still be order k.",
    "start": "1270890",
    "end": "1279022"
  },
  {
    "text": "So still get constant amortized.  But this is not\ntotally satisfying",
    "start": "1279022",
    "end": "1286980"
  },
  {
    "text": "because of table\nmight get big again. m might become\nmuch larger than n.",
    "start": "1286980",
    "end": "1292799"
  },
  {
    "text": "For example, suppose\nI do n inserts and then I do n deletes.",
    "start": "1292800",
    "end": "1297820"
  },
  {
    "text": "So now I have an empty\ntable, n equals 0, but m is going to be around\nthe original value of n,",
    "start": "1297820",
    "end": "1304990"
  },
  {
    "text": "or the maximum value\nof n over time. ",
    "start": "1304990",
    "end": "1310050"
  },
  {
    "text": "So we can fix that. Suggestions on how to fix that?",
    "start": "1310050",
    "end": "1316159"
  },
  {
    "text": " This is a little more subtle.",
    "start": "1316160",
    "end": "1323040"
  },
  {
    "text": "There's two obvious answers. One is correct and the\nother is incorrect.",
    "start": "1323040",
    "end": "1328460"
  },
  {
    "text": "Yeah? AUDIENCE: [INAUDIBLE] ",
    "start": "1328460",
    "end": "1334220"
  },
  {
    "text": "PROFESSOR: Good. So option one is if the\ntable becomes half the size,",
    "start": "1334220",
    "end": "1343440"
  },
  {
    "text": "then shrink-- to half the size?",
    "start": "1343440",
    "end": "1350980"
  },
  {
    "text": "Sure. ",
    "start": "1350980",
    "end": "1357390"
  },
  {
    "text": "OK. That's on the right track. Anyone see a problem with that? Yeah?",
    "start": "1357390",
    "end": "1363240"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] when\nyou're going from like 8 to 9, you can go from 8 to\n9, 9 to 8, [INAUDIBLE]. PROFESSOR: Good.",
    "start": "1363240",
    "end": "1368710"
  },
  {
    "text": "So if you're sizing and say you\nhave eight items in your table,",
    "start": "1368710",
    "end": "1377149"
  },
  {
    "text": "you add a ninth item\nand so you double to 16. Then you delete that ninth\nitem, you're back to eight.",
    "start": "1377150",
    "end": "1383820"
  },
  {
    "text": "And then you say oh,\nnow m equals n/2, so I'm going to shrink\nto half the size. And if I insert again--\ndelete, insert, delete,",
    "start": "1383820",
    "end": "1390960"
  },
  {
    "text": "insert-- I spend linear\ntime for every operation. So that's the problem. ",
    "start": "1390960",
    "end": "1398810"
  },
  {
    "text": "This is slow.  If we go from 2 to the\nk to 2 to the k plus 1,",
    "start": "1398810",
    "end": "1407830"
  },
  {
    "text": "we go this way via-- oh\nsorry, 2 to the k plus 1. Then, I said it right,\ninsert to go to the right,",
    "start": "1407830",
    "end": "1416010"
  },
  {
    "text": "delete to go to the left. Then we'll get linear\ntime for operation. ",
    "start": "1416010",
    "end": "1424550"
  },
  {
    "text": "That is that. So, how do we fix this? Yeah.",
    "start": "1424550",
    "end": "1430310"
  },
  {
    "text": "AUDIENCE: Maybe m\nequal m/3 or something? PROFESSOR: M equals n over 3. Yep. AUDIENCE: And then still\nleave it [INAUDIBLE].",
    "start": "1430310",
    "end": "1436699"
  },
  {
    "start": "1436699",
    "end": "1444926"
  },
  {
    "text": "PROFESSOR: Good. I'm going to do 4,\nif you don't mind. I'll keep it powers of 2. Any number bigger\nthan 3 will work--",
    "start": "1444926",
    "end": "1450240"
  },
  {
    "text": "or any number bigger\nthan 2 will work here. But it's kind of nice to\nstick to powers of two.",
    "start": "1450240",
    "end": "1457700"
  },
  {
    "text": "Just for fun. I mean, doesn't really\nmatter because, as you say, we're still going to\nshrink to half the size,",
    "start": "1457700",
    "end": "1462910"
  },
  {
    "text": "but we're only going to trigger\nit when we are 3/4 empty. We're only using a\nquarter of the space.",
    "start": "1462910",
    "end": "1469289"
  },
  {
    "text": "Then, it turns\nout you can afford to shrink to half the\nsize because in order to explode again, in order\nto need to grow again,",
    "start": "1469290",
    "end": "1476340"
  },
  {
    "text": "you have to still insert\nn over m-- m over 2 items.",
    "start": "1476340",
    "end": "1482900"
  },
  {
    "text": "Because it's half empty. So when you're only\na quarter full, you shrink to become a half\nfull because then to grow again",
    "start": "1482900",
    "end": "1489740"
  },
  {
    "text": "requires a lot of insertions. I haven't proved anything\nhere, but it turns out if you do this, the amortized\ntime becomes constant.",
    "start": "1489740",
    "end": "1502430"
  },
  {
    "text": " For k insertions and deletions,\narbitrary combination,",
    "start": "1502430",
    "end": "1509360"
  },
  {
    "text": "you'll maintain linear\nsize because of these two-- because you're\nmaintaining the invariant that m is between n and 4n.",
    "start": "1509360",
    "end": "1521830"
  },
  {
    "text": " You maintain that invariant. That's easy to check. So you always have linear size.",
    "start": "1521830",
    "end": "1528850"
  },
  {
    "text": "And the amortized running\ntime becomes constant. We don't really have time\nto prove that in the class.",
    "start": "1528850",
    "end": "1534050"
  },
  {
    "text": "It's a little bit tricky. Read the textbook if\nyou want to know it. ",
    "start": "1534050",
    "end": "1541640"
  },
  {
    "text": "That's table doubling. Questions?  All right.",
    "start": "1541640",
    "end": "1547790"
  },
  {
    "text": "Boring. No. It's cool because\nnot only can we solve the hashing problem\nof how do we set m in order",
    "start": "1547790",
    "end": "1555000"
  },
  {
    "text": "to keep alpha a constant, we\ncan also solve Python lists. Python lists are also\nknown as resizable arrays.",
    "start": "1555000",
    "end": "1562919"
  },
  {
    "text": " You may have wondered\nhow they work. Because they offer\nrandom access,",
    "start": "1562920",
    "end": "1569120"
  },
  {
    "text": "we can go to the ith\nitem in constant time and modify it or get the value.",
    "start": "1569120",
    "end": "1574929"
  },
  {
    "text": "We can add a new item at\nthe end in constant time. That's append. list.append.",
    "start": "1574930",
    "end": "1580140"
  },
  {
    "text": " And we can delete the last\nitem in constant time.",
    "start": "1580140",
    "end": "1588830"
  },
  {
    "text": "One version is list.pop. It's also delete list,\nsquare bracket minus 1.",
    "start": "1588830",
    "end": "1595300"
  },
  {
    "text": "You should know that\ndeleting the first item is not constant time. That takes linear\ntime because what it does is it copies\nall the values over.",
    "start": "1595300",
    "end": "1602860"
  },
  {
    "text": "Python lists are\nimplemented by arrays. But how do you support\nthis dynamicness where you can increase the\nlength and decrease the length,",
    "start": "1602860",
    "end": "1609470"
  },
  {
    "text": "and still keep linear space? Well, you do table doubling. And I don't know\nwhether Python uses",
    "start": "1609470",
    "end": "1615360"
  },
  {
    "text": "two or some other\nconstant, but any constant will do, as long as the\ndeletion constant is",
    "start": "1615360",
    "end": "1620710"
  },
  {
    "text": "smaller than the\ninsertion constant. And that's how they work.",
    "start": "1620710",
    "end": "1626690"
  },
  {
    "text": "So in fact, list.append\nand list.pop are constant amortized.",
    "start": "1626690",
    "end": "1632240"
  },
  {
    "text": "Before, we just\nsaid for simplicity, they're constant time\nand for the most part you can just think of\nthem as constant time.",
    "start": "1632240",
    "end": "1638544"
  },
  {
    "text": "But in reality, they\nare constant amortized. Now for fun, just in\ncase you're curious, you can do all of this\nstuff in constant worst case",
    "start": "1638544",
    "end": "1646190"
  },
  {
    "text": "time per operation. May be a fun exercise. Do you want to know how?",
    "start": "1646190",
    "end": "1653090"
  },
  {
    "text": "Yeah? Rough idea is when you\nrealize that you're",
    "start": "1653090",
    "end": "1659679"
  },
  {
    "text": "getting kind of full, you\nstart building on the side a new table of twice the size.",
    "start": "1659680",
    "end": "1665740"
  },
  {
    "text": "And every time you insert\ninto the actual table, you move like five of the\nitems over to the new table,",
    "start": "1665740",
    "end": "1672279"
  },
  {
    "text": "or some constant-- it needs\nto be a big enough constant. So that by the time\nyou're full, you just switch over immediately\nto the other structure.",
    "start": "1672280",
    "end": "1678880"
  },
  {
    "text": "It's kind of cool. It's very tricky to\nactually get that to work. But if you're in a\nreal time system,",
    "start": "1678880",
    "end": "1684200"
  },
  {
    "text": "you might care to know that. For the most part, people\ndon't implement those things because they're\ncomplicated, but it",
    "start": "1684200",
    "end": "1689789"
  },
  {
    "text": "is possible to get rid\nof all these amortized.  Cool.",
    "start": "1689790",
    "end": "1697450"
  },
  {
    "text": "Let's move onto the next topic,\nwhich is more hashing related.",
    "start": "1697450",
    "end": "1703734"
  },
  {
    "text": "This was sort of\ngeneral data structures in order to implement\nhashing with chaining, but didn't really care\nabout hashing per se.",
    "start": "1703734",
    "end": "1712649"
  },
  {
    "text": "We assumed here that we can\nevaluate the hash function in constant time, that we can\ndo insertion in constant time,",
    "start": "1712650",
    "end": "1717660"
  },
  {
    "text": "but that's the name\nof the game here. But otherwise, we\ndidn't really care-- as long as the rebuilding\nwas linear time,",
    "start": "1717660",
    "end": "1723059"
  },
  {
    "text": "this technique works. ",
    "start": "1723060",
    "end": "1728240"
  },
  {
    "text": "Now we're going to look\nat a new problem that",
    "start": "1728240",
    "end": "1735280"
  },
  {
    "text": "has lots of practical\napplications. I mentioned some\nof these problems in the last class, which\nis string matching.",
    "start": "1735280",
    "end": "1742750"
  },
  {
    "text": "This is essentially the problem. How many people have\nused Grep in their life? OK, most of you.",
    "start": "1742750",
    "end": "1749510"
  },
  {
    "text": "How many people have used\nFind in a text editor? OK, the rest of you.",
    "start": "1749510",
    "end": "1755648"
  },
  {
    "text": "And so this are the\nsame sorts of problems. You want to search for\na pattern, which is just",
    "start": "1755649",
    "end": "1760669"
  },
  {
    "text": "going to be a substring\nin some giant string which is your document, your\nfile, if you will.",
    "start": "1760670",
    "end": "1766850"
  },
  {
    "text": "So state this formally--\ngiven two strings, s and t,",
    "start": "1766850",
    "end": "1780150"
  },
  {
    "text": "you want to know does s\noccur as a substring of t?",
    "start": "1780150",
    "end": "1794460"
  },
  {
    "text": "So for example, maybe\ns is a string 6006",
    "start": "1794460",
    "end": "1800730"
  },
  {
    "text": "and t is your entire--\nthe mail that you've ever",
    "start": "1800730",
    "end": "1806679"
  },
  {
    "text": "received in your life or\nyour inbox, or something. So t is big, typically,\nand s is small.",
    "start": "1806680",
    "end": "1812920"
  },
  {
    "text": "It's what you type usually. Maybe you're searching\nfor all email from Piazza, so you put the Piazza\nfrom string or whatever.",
    "start": "1812920",
    "end": "1820039"
  },
  {
    "text": "You're searching for\nthat in this giant thing and you'd like to\ndo that quickly. ",
    "start": "1820040",
    "end": "1826600"
  },
  {
    "text": "Another application, s is\nwhat you type in Google. t is the entire web.",
    "start": "1826600",
    "end": "1831620"
  },
  {
    "text": "That's what Google does. It searches for the\nstring in the entire web. I'm not joking.",
    "start": "1831620",
    "end": "1839230"
  },
  {
    "text": "OK? Fine. So we'd like to do that.",
    "start": "1839230",
    "end": "1845140"
  },
  {
    "text": "What's the obvious way\nto search for a substring in a giant string?",
    "start": "1845140",
    "end": "1851967"
  },
  {
    "text": "Yeah? AUDIENCE: Check each\nsubstring of that length. PROFESSOR: Just check each\nsubstring of the right length.",
    "start": "1851968",
    "end": "1858420"
  },
  {
    "text": "So it's got to be\nthe length of s. And there's only a linear number\nof them, so check each one.",
    "start": "1858420",
    "end": "1864800"
  },
  {
    "text": "Let's analyze that. ",
    "start": "1864800",
    "end": "1885460"
  },
  {
    "text": "So a simple\nalgorithm-- actually,",
    "start": "1885460",
    "end": "1896740"
  },
  {
    "text": "just for fun, I have\npseudocode for it. ",
    "start": "1896740",
    "end": "1903462"
  },
  {
    "text": "I have Python code for it. Even more cool. ",
    "start": "1903462",
    "end": "1929370"
  },
  {
    "text": "OK. I don't know if you know\nall these Python features, but you should. They're super cool. This is string splicing.",
    "start": "1929370",
    "end": "1935509"
  },
  {
    "text": "So we're looking in t--\nlet me draw the picture. Here we have s, here we have t.",
    "start": "1935510",
    "end": "1942660"
  },
  {
    "text": "Think of it as a big string. We'd like to\ncompare s like that,",
    "start": "1942660",
    "end": "1947710"
  },
  {
    "text": "and then we'd like to compare\ns shifted over one to see whether all of the\ncharacters match there.",
    "start": "1947710",
    "end": "1954409"
  },
  {
    "text": "And then shifted over\none more, and so on. And so we're looking at a\nsubstring of t from position",
    "start": "1954410",
    "end": "1960200"
  },
  {
    "text": "i the position i\nplus the length of s, not including the last one. So that's of length\nexactly, length of s.",
    "start": "1960200",
    "end": "1966980"
  },
  {
    "text": "This is s. This is t. And so each of these\nlooks like that pattern.",
    "start": "1966980",
    "end": "1973080"
  },
  {
    "text": "We compare s to t. What this comparison\noperation does in Python is it checks\nthe first characters, see if they're equal.",
    "start": "1973080",
    "end": "1979260"
  },
  {
    "text": "If they are, keep going\nuntil they find a mismatch. If there's no mismatch,\nthen you return true.",
    "start": "1979260",
    "end": "1984510"
  },
  {
    "text": "Otherwise, you return false. And then we do this\nroughly length of t times",
    "start": "1984510",
    "end": "1990770"
  },
  {
    "text": "because that's how many shifts\nthere are, except at the end we run out of room. We don't care if we\nshift beyond the right",
    "start": "1990770",
    "end": "1996570"
  },
  {
    "text": "because that's clearly\nnot going to match. And so it's actually length\nof t minus like of s. That's the number of iterations.",
    "start": "1996570",
    "end": "2002970"
  },
  {
    "text": "Hopefully I got all the\nindex arithmetic right. And there's no plus\nones or minus ones. I think this is correct.",
    "start": "2002970",
    "end": "2010220"
  },
  {
    "text": "We want to know whether\nany of these match. If so, the answer is yes, s\noccurs as a substring of t.",
    "start": "2010220",
    "end": "2019040"
  },
  {
    "text": "Of course, in reality you want\nto know not just do any match, but show them to me,\nthings like that.",
    "start": "2019040",
    "end": "2024170"
  },
  {
    "text": "But you can change that. Same amount of time. So what's the running\ntime of this algorithm?",
    "start": "2024170",
    "end": "2030015"
  },
  {
    "text": " So my relevant things\nare the length of s",
    "start": "2030015",
    "end": "2037940"
  },
  {
    "text": "and the length of t. What's the running time?",
    "start": "2037940",
    "end": "2043044"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: Sorry? AUDIENCE: [INAUDIBLE] PROFESSOR: T by-- t\nmultiplied by s, yeah.",
    "start": "2043044",
    "end": "2048520"
  },
  {
    "text": "Exactly. Technically, it's length of\ns times length of t minus s.",
    "start": "2048520",
    "end": "2054738"
  },
  {
    "text": " But typically, this\nis just s times t.",
    "start": "2054739",
    "end": "2064429"
  },
  {
    "text": "And it's always\nat most s times t, and it's usually the same thing\nbecause s is usually smaller-- at least a constant\nfactor than t.",
    "start": "2064429",
    "end": "2070239"
  },
  {
    "text": " This is kind of slow. If you're searching for a big\nstring, it's not so great.",
    "start": "2070239",
    "end": "2078839"
  },
  {
    "text": "I mean, certainly\nyou need s plus t. You've got to look\nat the strings. But s times t is kind of--\nit could be quadratic,",
    "start": "2078840",
    "end": "2085935"
  },
  {
    "text": "if you're searching for a really\nlong string in another string. So what we'd like\nto do today is use hashing to get this\ndown to linear time.",
    "start": "2085935",
    "end": "2096290"
  },
  {
    "text": "So, ideas? How could we do that? ",
    "start": "2096290",
    "end": "2109349"
  },
  {
    "text": "Using hashing. Subtle hint. Yeah?",
    "start": "2109350",
    "end": "2114571"
  },
  {
    "text": "AUDIENCE: If we take something\ninto account [INAUDIBLE]. ",
    "start": "2114571",
    "end": "2124916"
  },
  {
    "text": "PROFESSOR: OK, so you want\nto decompose your string into words and use\nthe fact that there are fewer words than characters.",
    "start": "2124916",
    "end": "2130786"
  },
  {
    "text": "You could probably get\nsomething out of that, and old search engines\nused to do that.",
    "start": "2130786",
    "end": "2137049"
  },
  {
    "text": "But it's not\nnecessary, turns out. And it will also depend on what\nyour average word length is.",
    "start": "2137050",
    "end": "2144470"
  },
  {
    "text": "We are, in the end, today, we're\nnot going to analyze it fully, but we are going to\nget an algorithm that",
    "start": "2144470",
    "end": "2149590"
  },
  {
    "text": "runs in this time guaranteed. In expectation because\nof a randomized-- yeah?",
    "start": "2149590",
    "end": "2156890"
  },
  {
    "text": "AUDIENCE: If we were to hash\n[INAUDIBLE] size s, that would [INAUDIBLE] and then we would\ncheck the hash [INAUDIBLE].",
    "start": "2156891",
    "end": "2166165"
  },
  {
    "text": "PROFESSOR: Good. So the idea is to--\nwhat we're looking at is a rolling window\nof t always of size s.",
    "start": "2166165",
    "end": "2172070"
  },
  {
    "text": "And at each time we want to\nknow, is it the same as s? Now, if somehow-- it's\nexpensive to check",
    "start": "2172070",
    "end": "2177667"
  },
  {
    "text": "whether a string is\nequal to a string. There's no way\ngetting around that. Well, there are ways, but\nthere isn't a way for just",
    "start": "2177667",
    "end": "2184609"
  },
  {
    "text": "given two strings. But if somehow instead of\nchecking the strings we could check a hash\nfunction of the strings,",
    "start": "2184610",
    "end": "2190630"
  },
  {
    "text": "because strings are\nbig, potentially. We don't know how big s is. And so the universe\nof strings of length s",
    "start": "2190630",
    "end": "2197790"
  },
  {
    "text": "is potentially very big. It's expensive to\ncompare things. If we could just hash it\ndown to some reasonable size,",
    "start": "2197790",
    "end": "2203190"
  },
  {
    "text": "to something that\nfits in a word, then we can compare whether\nthose two words are equal, whether those two\nhash values are equal,",
    "start": "2203190",
    "end": "2208760"
  },
  {
    "text": "whether there's a\ncollision in the table. That would somehow-- that\nwould make things go faster.",
    "start": "2208760",
    "end": "2215500"
  },
  {
    "text": "We could do that in\nconstant time per operation. How could we do that?",
    "start": "2215500",
    "end": "2221760"
  },
  {
    "text": "That's the tricky part, but\nthat is exactly the right idea. So-- make some space.",
    "start": "2221760",
    "end": "2232410"
  },
  {
    "start": "2232410",
    "end": "2248130"
  },
  {
    "text": "I think I'm going to do\nthings a little out of order from what I have in\nmy notes, and tell you",
    "start": "2248130",
    "end": "2254200"
  },
  {
    "text": "about something\ncalled rolling hashes. And then we'll see\nhow they're used.",
    "start": "2254200",
    "end": "2260869"
  },
  {
    "text": "So shelve that idea. We're going to come back to it. We need a data structure\nto help us do this.",
    "start": "2260870",
    "end": "2268430"
  },
  {
    "text": "Because if we just compute the\nhash function of this thing, compare it to the hash\nfunction of this thing, and then compute the hash\nfunction of the shifted value",
    "start": "2268430",
    "end": "2274971"
  },
  {
    "text": "of t and compare\nit, we don't have to recompute the hash of s. That's going to be free\nonce you do it once.",
    "start": "2274971",
    "end": "2280960"
  },
  {
    "text": "But computing the\nhash function of this and then the hash\nfunction of this and the hash function\nof this, usually to compute each of\nthose hash function",
    "start": "2280960",
    "end": "2286773"
  },
  {
    "text": "would take length of s time. And so we're not\nsaving any time. Somehow, if we have the\nhash function of this,",
    "start": "2286773",
    "end": "2293660"
  },
  {
    "text": "the first substring\nof length s, we'd like to very quickly\ncompute the hash function of the next substring\nin constant time.",
    "start": "2293660",
    "end": "2301706"
  },
  {
    "text": "Yeah? AUDIENCE: You already\nhave, like, s minus 1 of the characters of the-- PROFESSOR: Yeah. If you look at this portion\nof s and this portion of s,",
    "start": "2301706",
    "end": "2310690"
  },
  {
    "text": "they share s minus\n1 of the characters. Just one character different. First one gets deleted,\nlast character gets added.",
    "start": "2310690",
    "end": "2318980"
  },
  {
    "text": "So here's what we want.  Given a hash value-- maybe\nI should call this r.",
    "start": "2318980",
    "end": "2327960"
  },
  {
    "text": "It's not the hash function.  Give it a rolling hash value.",
    "start": "2327960",
    "end": "2333670"
  },
  {
    "text": "You might say, I'd like to be\nable to append a character. I should say, r\nmaintains a string.",
    "start": "2333670",
    "end": "2345480"
  },
  {
    "text": " There's some string,\nlet's call it x.",
    "start": "2345480",
    "end": "2353740"
  },
  {
    "text": "And what r.append\nof c does is add character c to the end of x.",
    "start": "2353740",
    "end": "2362715"
  },
  {
    "text": " And then we also\nwant an operation which is-- you might call\nit pop left in Python.",
    "start": "2362715",
    "end": "2370160"
  },
  {
    "text": "I'm going to call it skip. Shorter. Delete the first character of x.",
    "start": "2370160",
    "end": "2380880"
  },
  {
    "text": " And assuming it's c.",
    "start": "2380880",
    "end": "2392690"
  },
  {
    "text": "So we can do this\nbecause over here, what we want to do is\nadd this character, which",
    "start": "2392690",
    "end": "2398610"
  },
  {
    "text": "is like t of length of s. And we want to\ndelete this character",
    "start": "2398610",
    "end": "2403730"
  },
  {
    "text": "from the front, which is t of 0. Then we will get\nthe next strength.",
    "start": "2403730",
    "end": "2410125"
  },
  {
    "text": "And at all times, r--\nwhat's the point of this r?",
    "start": "2410125",
    "end": "2415200"
  },
  {
    "text": "You can say r-- let's\nsay open paren, close paren-- this will\ngive you a hash value",
    "start": "2415200",
    "end": "2422030"
  },
  {
    "text": "of the current strength. So this is basically h of\nx for some hash function",
    "start": "2422030",
    "end": "2429930"
  },
  {
    "text": "h, some reasonable\nhash function. If we could do this\nand we could do each of these operations\nin constant time,",
    "start": "2429930",
    "end": "2437390"
  },
  {
    "text": "then we can do string matching. Let me tell you how. This is called the Karp-Rabin\nstring matching algorithm.",
    "start": "2437390",
    "end": "2445530"
  },
  {
    "start": "2445530",
    "end": "2456269"
  },
  {
    "text": "And if it's not clear\nexactly what's allowed here, you'll see it as we use it. ",
    "start": "2456269",
    "end": "2472740"
  },
  {
    "text": "First thing I'd like to do is\ncompute the hash function of s. I only need to do that\nonce, so I'll do it.",
    "start": "2472740",
    "end": "2477992"
  },
  {
    "text": "In this data structure, the\nonly thing you're allowed to do is add characters. Initially you have\nan empty string.",
    "start": "2477992",
    "end": "2483110"
  },
  {
    "text": "And so for each character\nin s I'll just append it, and now rs gives me\na hash value of s.",
    "start": "2483110",
    "end": "2490510"
  },
  {
    "text": "OK? Now, I'd like to get\nstarted and compute",
    "start": "2490510",
    "end": "2497339"
  },
  {
    "text": "the hash function of the\nfirst s characters of t. ",
    "start": "2497340",
    "end": "2503840"
  },
  {
    "text": "So this would be t\nup to length of s. ",
    "start": "2503840",
    "end": "2511650"
  },
  {
    "text": "And I'm going to call\nthis thing rt, that's my rolling hash for t. ",
    "start": "2511650",
    "end": "2519693"
  },
  {
    "text": "And append those characters. So now rs is a\nrolling hash of s. rt is a rolling hash of the\nfirst s characters in t.",
    "start": "2519694",
    "end": "2527934"
  },
  {
    "text": "So I should check\nwhether they're equal. If they're not,\nshift over by one. Add one character at the\nend, delete character",
    "start": "2527934",
    "end": "2534706"
  },
  {
    "text": "from the beginning. I'm going to have to\ndo this many times. So I guess technically,\nI need to check",
    "start": "2534706",
    "end": "2543359"
  },
  {
    "text": "whether these are equal first.  If they're equal, then we'll\ntalk about it in a moment.",
    "start": "2543360",
    "end": "2551052"
  },
  {
    "text": "The main thing I\nneed to do is this for loop, which checks\nall of the other. ",
    "start": "2551052",
    "end": "2565530"
  },
  {
    "text": "And all I need to do is throw\naway the first letter, which I know is t of i\nminus length of s.",
    "start": "2565530",
    "end": "2573425"
  },
  {
    "text": " And add the next letter,\nwhich is going to be t of i.",
    "start": "2573425",
    "end": "2579970"
  },
  {
    "text": " And then after I do\nthat, I don't change hs",
    "start": "2579970",
    "end": "2587376"
  },
  {
    "text": "because that's fixed. That's just-- or,\nsorry, I switched from h to-- in my notes I have h.",
    "start": "2587376",
    "end": "2593859"
  },
  {
    "text": "I've been switching to r,\nso all those h's are r's. Sorry about that.",
    "start": "2593860",
    "end": "2600440"
  },
  {
    "text": "So then if rs equals rt, then\npotentially that substring of t",
    "start": "2600440",
    "end": "2616410"
  },
  {
    "text": "matches s. But it's potentially\nbecause we're hashing. Things are only\ntrue in expectation.",
    "start": "2616410",
    "end": "2624829"
  },
  {
    "text": "There's some\nprobability of failure. Just because the hash function\nof two strings comes out equal",
    "start": "2624830",
    "end": "2630820"
  },
  {
    "text": "doesn't mean the strings\nthemselves are equal, because there are collisions. Even distinct strings may map\nto the same slot in the table.",
    "start": "2630820",
    "end": "2638520"
  },
  {
    "text": "So what we do in this\nsituation is check",
    "start": "2638520",
    "end": "2644810"
  },
  {
    "text": "whether s equals t-- I did\nit slightly less conveniently",
    "start": "2644810",
    "end": "2653630"
  },
  {
    "text": "than before-- it's like i minus\nlength of s plus 1 to i plus 1.",
    "start": "2653630",
    "end": "2663099"
  },
  {
    "text": "Oh well. It wasn't very\nbeautiful but it works.",
    "start": "2663100",
    "end": "2668790"
  },
  {
    "text": "So in this case, I'm going\nto check it character by character. OK?",
    "start": "2668790",
    "end": "2674840"
  },
  {
    "text": "If they're equal,\nthen we found a match. So it's kind of OK that I spent\nall this time to check them.",
    "start": "2674840",
    "end": "2682537"
  },
  {
    "text": "In particular, if I'm just\nlooking for the first match-- like you're searching\nthrough a text document, you just care about the first\nmatch-- then you're done.",
    "start": "2682537",
    "end": "2690660"
  },
  {
    "text": "So yeah, I spent order\ns time to do this, but if they're equal it's\nsort of worth that effort.",
    "start": "2690660",
    "end": "2696660"
  },
  {
    "text": "I found the match. If they're not\nequal, we basically",
    "start": "2696660",
    "end": "2702950"
  },
  {
    "text": "hope or we will\nengineer it so that this happens with\nprobability at most 1/s.",
    "start": "2702950",
    "end": "2709770"
  },
  {
    "start": "2709770",
    "end": "2720840"
  },
  {
    "text": "If we can do that, then the\nexpected time here is constant. ",
    "start": "2720840",
    "end": "2733910"
  },
  {
    "text": "So that would be good because\nthen, if skip and append",
    "start": "2733910",
    "end": "2740530"
  },
  {
    "text": "take constant time and this\nsort of double checking only takes constant expected\ntime-- except when we find",
    "start": "2740530",
    "end": "2747180"
  },
  {
    "text": "matches and then\nwe're OK with it-- then this overall thing\nwill take linear time.",
    "start": "2747180",
    "end": "2752760"
  },
  {
    "text": "In fact, the proper thing would\nbe this is you pay s plus t,",
    "start": "2752760",
    "end": "2762570"
  },
  {
    "text": "then you also pay-- for each\nmatch that you want to report, you pay length of s.",
    "start": "2762570",
    "end": "2768730"
  },
  {
    "text": " I'm not sure whether you\ncan get rid of that term. But in particular, if you\njust care about one match,",
    "start": "2768730",
    "end": "2775196"
  },
  {
    "text": "this is linear time.  It's pretty cool.",
    "start": "2775196",
    "end": "2780250"
  },
  {
    "text": " There's one remaining\nquestion, which",
    "start": "2780250",
    "end": "2785280"
  },
  {
    "text": "is how do you build\nthis data structure? Is the algorithm clear though?",
    "start": "2785280",
    "end": "2790700"
  },
  {
    "text": "I mean, I wrote it\nout in gory detail so you can really\nsee what's happening, also because you need to\ndo it in your problem set",
    "start": "2790700",
    "end": "2796070"
  },
  {
    "text": "so I give you as much code\nto work from as possible. Question? AUDIENCE: What is rs?",
    "start": "2796070",
    "end": "2802300"
  },
  {
    "text": "PROFESSOR: rs is going to\nrepresent a hash value of s.",
    "start": "2802300",
    "end": "2809100"
  },
  {
    "text": "You could just say h of s. But what I like to show\nis that all you need are these operations.",
    "start": "2809100",
    "end": "2815644"
  },
  {
    "text": "And so given a\ndata structure that will compute a hash function,\ngiven the append operation,",
    "start": "2815644",
    "end": "2821620"
  },
  {
    "text": "what I did up here was just\nappend every letter of s into this thing, and\nthen rs open paren,",
    "start": "2821620",
    "end": "2828970"
  },
  {
    "text": "close paren gives me\nthe hash function of s. AUDIENCE: You said you\ncan do r.append over here, but then you said rs--",
    "start": "2828970",
    "end": "2835690"
  },
  {
    "text": "PROFESSOR: Yeah. So there are two rolling hashes. One's called rs and\none's called rt.",
    "start": "2835690",
    "end": "2842500"
  },
  {
    "text": "This was an ADT and I didn't\nsay it at the beginning-- line one I say rs equals a new\nrolling hash. rt equals",
    "start": "2842500",
    "end": "2848640"
  },
  {
    "text": "a new rolling hash. Sorry, I should\nbind my variables. So I'm using two\nof them because I",
    "start": "2848640",
    "end": "2853990"
  },
  {
    "text": "want to compare their\nvalues, like this. ",
    "start": "2853990",
    "end": "2859390"
  },
  {
    "text": "Other questions? It's actually a pretty big idea. This is an algorithm from the\n'90s, so it's fairly recent.",
    "start": "2859390",
    "end": "2868570"
  },
  {
    "text": " And it's one of\nthe first examples",
    "start": "2868570",
    "end": "2874290"
  },
  {
    "text": "of really using randomization\nin a super cool way, other than just hashing\nas a data structure.",
    "start": "2874290",
    "end": "2880070"
  },
  {
    "text": " All right. So the remaining thing\nto do is figure out",
    "start": "2880070",
    "end": "2888400"
  },
  {
    "text": "how to build this ADT. What's the data\nstructure that implements this, spending constant time\nfor each of these operations.",
    "start": "2888400",
    "end": "2895015"
  },
  {
    "start": "2895015",
    "end": "2904369"
  },
  {
    "text": "Now, to tell you\nthe truth, doing it depends on which hashing\nmethod you use, which hash function you want to use.",
    "start": "2904370",
    "end": "2910916"
  },
  {
    "text": "I just erased the\nmultiplication method because it's a pain to use\nthe multiplication method. ",
    "start": "2910916",
    "end": "2920360"
  },
  {
    "text": "Though I'll bet you\ncould use it, actually. That's an exercise\nfor you think about. I'm going to use\nthe division method",
    "start": "2920360",
    "end": "2926750"
  },
  {
    "text": "because it's the\nsimplest hash function. And it turns out, in this\nsetting it does work. We're not going to\nprove that this is true.",
    "start": "2926750",
    "end": "2933760"
  },
  {
    "text": "This is going to be\ntrue in expectation. Expected time. ",
    "start": "2933760",
    "end": "2942110"
  },
  {
    "text": "But Karp and Rabin proved\nthat this running time holds, even if you\njust use a simple hash",
    "start": "2942110",
    "end": "2949040"
  },
  {
    "text": "function of the\ndivision method where m is chosen to be\na random prime. ",
    "start": "2949040",
    "end": "2958799"
  },
  {
    "text": "Let's say about is big\nas-- let's say at least as big as length of s.",
    "start": "2958800",
    "end": "2966049"
  },
  {
    "text": "The bigger you make it,\nthe higher probability this is going to be true. But length of s will\ngive you this on average.",
    "start": "2966050",
    "end": "2974484"
  },
  {
    "text": "So we're not going to\ntalk about in this class how to find a random\nprime, but the algorithm",
    "start": "2974484",
    "end": "2979619"
  },
  {
    "text": "is choose a random number\nof about the right size and check whether it's prime. If it's not, do it again.",
    "start": "2979620",
    "end": "2986030"
  },
  {
    "text": "And by the prime number\ntheorem, after log end trials you will find a prime.",
    "start": "2986030",
    "end": "2991779"
  },
  {
    "text": "And we're not going\nto talk about how to check whether a number's\nprime, but it can be done.",
    "start": "2991779",
    "end": "2997870"
  },
  {
    "text": "All right. So we're basically done. The point is to look at-- if\nyou look at an append operation",
    "start": "2997870",
    "end": "3010630"
  },
  {
    "text": "and you think about how\nthis hash function changes when you add a single character.",
    "start": "3010630",
    "end": "3017349"
  },
  {
    "text": "Oh, I should tell you. We're going to treat the string\nx as a multi digit number.",
    "start": "3017350",
    "end": "3025950"
  },
  {
    "text": " This is the sort of\nprehash function.",
    "start": "3025950",
    "end": "3031220"
  },
  {
    "start": "3031220",
    "end": "3036480"
  },
  {
    "text": "And the base is the\nsize of your alphabet. ",
    "start": "3036480",
    "end": "3042750"
  },
  {
    "text": "So if you're using\nAscii, it's 256. If you're using some unique\ncode, it might be larger.",
    "start": "3042750",
    "end": "3048859"
  },
  {
    "text": "But whatever the size of your\ncharacters in your string, then when I add a character,\nthis is like taking my number,",
    "start": "3048860",
    "end": "3056950"
  },
  {
    "text": "shifting it over by one,\nand then adding a new value. So how do I shift over by one?",
    "start": "3056950",
    "end": "3062390"
  },
  {
    "text": "I multiply by a. So if I have some value,\nsome current hash value u,",
    "start": "3062390",
    "end": "3070329"
  },
  {
    "text": "it changes to u\ntimes a-- or sorry, this is the number\nrepresented by the string.",
    "start": "3070330",
    "end": "3077890"
  },
  {
    "text": "I multiply by a and then\nI add on the character. Or, in Python you'd write\nord of the character.",
    "start": "3077890",
    "end": "3083619"
  },
  {
    "text": "That's the number associated\nwith that character. That gives me the new string.",
    "start": "3083620",
    "end": "3089160"
  },
  {
    "text": "Very easy. If I want to do is skip,\nit's slightly more annoying. But skip means just\nannihilate this value.",
    "start": "3089160",
    "end": "3097290"
  },
  {
    "text": "And so it's like u goes to u\nminus the character times a",
    "start": "3097290",
    "end": "3105310"
  },
  {
    "text": "to the power size of u minus 1. I have to shift this character\nover to that position",
    "start": "3105310",
    "end": "3112080"
  },
  {
    "text": "and then annihilated\nit with a minus sign. You could also do x or. And when I do this, I\njust think about how",
    "start": "3112080",
    "end": "3118820"
  },
  {
    "text": "the hash function is changing. Everything is just modulo m. So if I have some\nhash value here, r,",
    "start": "3118820",
    "end": "3125370"
  },
  {
    "text": "I take r times a plus\nord of c and I just do that computation\nmodulo m, and I'll",
    "start": "3125370",
    "end": "3133210"
  },
  {
    "text": "get the new hash value. Do the same thing down here,\nI'll get the new hash value.",
    "start": "3133210",
    "end": "3138630"
  },
  {
    "text": "So what r stores is\nthe current hash value. And it stores a to the\npower length of u or length",
    "start": "3138630",
    "end": "3147810"
  },
  {
    "text": "of x, whatever you\nwant to call it. I guess that would\nbe a little better.",
    "start": "3147810",
    "end": "3153606"
  },
  {
    "text": "And then it can do these\nin constant a number of operations. Just compute\neverything modulo m, one multiplication,\none addition.",
    "start": "3153606",
    "end": "3160124"
  },
  {
    "text": "You can do append and\nskip, and then you have the hash value instantly. It's just stored. And then you can\nmake all this work.",
    "start": "3160124",
    "end": "3167330"
  }
]