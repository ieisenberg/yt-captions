[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6910"
  },
  {
    "text": "offer high quality educational\nresources for free. To make a donation, or view\nadditional materials from",
    "start": "6910",
    "end": "13460"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at ocw.mit.edu.",
    "start": "13460",
    "end": "18640"
  },
  {
    "start": "18640",
    "end": "26770"
  },
  {
    "text": "PROFESSOR: Hello. ",
    "start": "26770",
    "end": "32330"
  },
  {
    "text": "Welcome to the second\nlecture in 6.01. I hope you had a good\ntime last week. ",
    "start": "32330",
    "end": "40600"
  },
  {
    "text": "Last lecture, we looked at\nwhat is probably the most",
    "start": "40600",
    "end": "45699"
  },
  {
    "text": "important theme in this course,\nwhich is, how do you organize your thoughts, your\ndesign, the things that you",
    "start": "45700",
    "end": "53410"
  },
  {
    "text": "do, in order to manage\ncomplexity when you're trying to build a complicated system?",
    "start": "53410",
    "end": "61430"
  },
  {
    "text": "The mantra for this\nclass is PCAP-- primitives, combinations,\nabstractions, and patterns.",
    "start": "61430",
    "end": "70530"
  },
  {
    "text": "And last time, we saw how at\nthe very most elementary level, Python provides some\ntools with which we can",
    "start": "70530",
    "end": "81880"
  },
  {
    "text": "achieve this goal of defining\nprimitives, combining them",
    "start": "81880",
    "end": "87320"
  },
  {
    "text": "into more complicated ideas,\nabstracting the important information, and generating and\ncapturing new patterns.",
    "start": "87320",
    "end": "96380"
  },
  {
    "text": "And so, for example, we saw\nthat Python has a defined statement that lets you\nassociate a sequence of",
    "start": "96380",
    "end": "104950"
  },
  {
    "text": "operations with a name-- both of those things are\nimportant, the sequence represents a combination, the\nname represents a way that we",
    "start": "104950",
    "end": "113560"
  },
  {
    "text": "can abstract the behavior of the\ncombination and treat it as though it were primitive\noperation.",
    "start": "113560",
    "end": "120340"
  },
  {
    "text": "We saw that we could do the same\nsort of thing for data structures. And in particular, the list\nstructure in Python allows us",
    "start": "120340",
    "end": "130590"
  },
  {
    "text": "to generate hierarchical\nheterogeneous structures in much the same way.",
    "start": "130590",
    "end": "135709"
  },
  {
    "text": "Then variables allow us to\nassociate names with those structures.",
    "start": "135710",
    "end": "141849"
  },
  {
    "text": "And finally, we saw that classes\nallow us to combine not only data, but also\nprocedures --",
    "start": "141850",
    "end": "148090"
  },
  {
    "text": "all into one object\nof related things.",
    "start": "148090",
    "end": "153550"
  },
  {
    "text": "So that's PCAP at the most\nprimitive level. What I want to do today\nis talk about",
    "start": "153550",
    "end": "160730"
  },
  {
    "text": "PCAP at higher levels. How do you build upon that\nframework to continue this",
    "start": "160730",
    "end": "167260"
  },
  {
    "text": "idea of building with\nabstraction and modularity? How do you make--",
    "start": "167260",
    "end": "173400"
  },
  {
    "text": "how do you combine primitive\noperations into powerful operations? How do you combine primitive\ndata into powerful data?",
    "start": "173400",
    "end": "180830"
  },
  {
    "text": "And what I want to do is think\nabout the next level above the most rudimentary level\nin Python.",
    "start": "180830",
    "end": "186920"
  },
  {
    "text": "So we'll look first at some\nprogramming styles, and how that affects your ability to\ndefine useful abstractions.",
    "start": "186920",
    "end": "194990"
  },
  {
    "text": "And then I'll look at something\nmuch higher level, which is state machines, which\nis the way that we will think about the construction\nof robot controls.",
    "start": "194990",
    "end": "202739"
  },
  {
    "start": "202740",
    "end": "208590"
  },
  {
    "text": "So I'll start with just a few\nwords about how you-- the different ways that you\ncould structure a program.",
    "start": "208590",
    "end": "215620"
  },
  {
    "text": " The reason for doing this is\nthat the basic structure that",
    "start": "215620",
    "end": "221580"
  },
  {
    "text": "you use can have an important\neffect on your ability to abstract.",
    "start": "221580",
    "end": "228700"
  },
  {
    "text": "We'll look at three different\nmethodologies for constructing a program.",
    "start": "228700",
    "end": "235420"
  },
  {
    "text": "I'll refer to the first one as\nimperative, also procedural.",
    "start": "235420",
    "end": "241060"
  },
  {
    "text": "That's kind of the most basic\nway you could think about writing a program. It's kind of a recipe.",
    "start": "241060",
    "end": "246940"
  },
  {
    "text": "It's kind of like cooking\nwith a recipe. Take this, add this, stir this,\nbake for 30 minutes,",
    "start": "246940",
    "end": "252709"
  },
  {
    "text": "that kind of thing. So if you define a procedure,\nif you organize the way you",
    "start": "252710",
    "end": "259329"
  },
  {
    "text": "think about it in terms of step\nby step instructions for, what should I do next? We refer to that kind of an\napproach as imperative.",
    "start": "259329",
    "end": "270210"
  },
  {
    "text": "We'll look at functional\nprogramming. There, even though you implement\nprecisely the same",
    "start": "270210",
    "end": "276880"
  },
  {
    "text": "algorithm, the perspective is\na little bit different. There, rather than focusing\nquite so narrowly on the step",
    "start": "276880",
    "end": "285560"
  },
  {
    "text": "by step, how do you get from A\nto B, the idea is going to be, think about the structure of\nthe problem in terms of",
    "start": "285560",
    "end": "292700"
  },
  {
    "text": "functions in a mathematical\nsense. By which I mean, functions\nthat eat inputs, generate",
    "start": "292700",
    "end": "301710"
  },
  {
    "text": "outputs, and don't have\nside effects. Side effects are things like\nsetting variables that you can",
    "start": "301710",
    "end": "307450"
  },
  {
    "text": "later look at.  Then I'll look at\nobject-oriented programming.",
    "start": "307450",
    "end": "313300"
  },
  {
    "text": "Again, you could be implementing\nprecisely the same algorithm by using an\nobject-oriented approach, but",
    "start": "313300",
    "end": "319849"
  },
  {
    "text": "here the focus will be on\nbuilding collections of data with procedures that are\nrelated, and organizing the",
    "start": "319850",
    "end": "327650"
  },
  {
    "text": "solution to your problem in\nterms of a hierarchy of such structures.",
    "start": "327650",
    "end": "333210"
  },
  {
    "text": "So what I'd like to start off\ntoday with is to look at an example problem and how you\ncould program it using any of",
    "start": "333210",
    "end": "342790"
  },
  {
    "text": "these three approaches. So the example program is going\nto be, find a sequence",
    "start": "342790",
    "end": "348400"
  },
  {
    "text": "of operations-- by which I mean, an operation\nis either increment or square--",
    "start": "348400",
    "end": "353650"
  },
  {
    "text": " the idea is that the operations\nare things that we will do to integers.",
    "start": "353650",
    "end": "361080"
  },
  {
    "text": "Find a sequence of operations,\neither increment or square, that transforms one integer,\nwhich is the initial value, i,",
    "start": "361080",
    "end": "369060"
  },
  {
    "text": "into a goal, which\nI'll call, g. So I want to think about\nthe problem of",
    "start": "369060",
    "end": "374990"
  },
  {
    "text": "finding such sequences. So for example, the sequence\nincrement increment increment",
    "start": "374990",
    "end": "380130"
  },
  {
    "text": "square, when applied to\n1, would give 16.",
    "start": "380130",
    "end": "386090"
  },
  {
    "text": "So I'm thinking about the first\nincrement increments 1 to give you 2.",
    "start": "386090",
    "end": "391560"
  },
  {
    "text": "The second increment increments\n2 to give you 3. The third increment increments\n3 to give you 4.",
    "start": "391560",
    "end": "398080"
  },
  {
    "text": "Then square squares\n4 to give you 16. So I'll refer to this as having\nfound the sequence of",
    "start": "398080",
    "end": "404130"
  },
  {
    "text": "operations, increment increment\nincrement square, that transforms 1 into 16.",
    "start": "404130",
    "end": "411380"
  },
  {
    "text": "Everybody with me? OK, I'll be the judge of that.",
    "start": "411380",
    "end": "416650"
  },
  {
    "text": "So, to prove that you're with\nme, what's the minimum length sequence of increment and square\noperations needed to",
    "start": "416650",
    "end": "423590"
  },
  {
    "text": "transform 1 into 100. You've got thirty seconds to\ndiscuss it with your neighbor,",
    "start": "423590",
    "end": "431230"
  },
  {
    "text": "come to an agreement, and I'm\ngonna ask you to raise your hands with a number of fingers,\n(1), (2), (3), (4),",
    "start": "431230",
    "end": "436680"
  },
  {
    "text": "or (5), indicating\nthe right answer. [AUDIENCE DISCUSSION]",
    "start": "436680",
    "end": "494900"
  },
  {
    "text": "PROFESSOR: OK, everybody\nraise your hand. Tell me a number of fingers\nequal to the right answer, raise your hand, show me\na number of fingers.",
    "start": "494900",
    "end": "501245"
  },
  {
    "text": " OK, I'm seeing-- OK. So keep in mind the number\nof fingers is the",
    "start": "501245",
    "end": "508870"
  },
  {
    "text": "thing before the colon.  That avoids the awkward way\nof saying less than 4.",
    "start": "508870",
    "end": "517140"
  },
  {
    "text": "OK? So I want the number\nbefore the colon. So what is the minimum\nlength sequence?",
    "start": "517140",
    "end": "523428"
  },
  {
    "text": "Raise your hand, indicate\na number of fingers. OK, the answers are improving.",
    "start": "523429",
    "end": "529390"
  },
  {
    "text": "Higher so I can see you. OK, it's about 90%\ncorrect, I think. OK, most people said (3), which\nis another name for 5.",
    "start": "529390",
    "end": "538850"
  },
  {
    "text": "OK.  So how do you get\nthe answer 5?",
    "start": "538850",
    "end": "545160"
  },
  {
    "text": "What's the answer? Somebody explain that answer? Yeah. AUDIENCE: Increment increment\nsquare increment square?",
    "start": "545160",
    "end": "550984"
  },
  {
    "text": "PROFESSOR: That's\nexactly right. So since I have two operators,\nincrements and squares, and",
    "start": "550984",
    "end": "558060"
  },
  {
    "text": "since I'm trying to cover a big\ndistance, 1 to 100, square",
    "start": "558060",
    "end": "563980"
  },
  {
    "text": "increases faster-- at least for bigger numbers,\nthan increment does. So what you'd like to do is\nfigure out a way of coercing",
    "start": "563980",
    "end": "570730"
  },
  {
    "text": "as many squares as possible. So a good thing to do is to\nstart at the end, and you can",
    "start": "570730",
    "end": "576230"
  },
  {
    "text": "take the square root of the\nfirst one evenly, and that gives you 10. But then you can't take the\nsquare root of 10, so you back",
    "start": "576230",
    "end": "582660"
  },
  {
    "text": "off and you get 9, and then you\ncan take the square root of 9, et cetera. So there's any number of ways\nyou could solve this problem,",
    "start": "582660",
    "end": "589550"
  },
  {
    "text": "the point is, that there's a\nsimple solution which is, the answer (3), which is\na pseudonym for 5.",
    "start": "589550",
    "end": "596920"
  },
  {
    "text": "So 5 operations will get\nyou from 1 to 100.",
    "start": "596920",
    "end": "601930"
  },
  {
    "text": "So what I want to do now-- now that you know the answer\nto the question, I want to write a program to\nfind that answer.",
    "start": "601930",
    "end": "607949"
  },
  {
    "text": " The most straightforward\napproach that you could use is",
    "start": "607950",
    "end": "613660"
  },
  {
    "text": "what we would call, imperative\nor procedural. The idea is to solve the problem\nby walking your way",
    "start": "613660",
    "end": "622600"
  },
  {
    "text": "through it in some premeditated\nfashion. ",
    "start": "622600",
    "end": "627700"
  },
  {
    "text": "A reasonable premeditated\nfashion would be, think about the sequences and order\nthem by length.",
    "start": "627700",
    "end": "636610"
  },
  {
    "text": "Think about all the sequences\nof length one, see if they work. Think about all the sequences\nof length",
    "start": "636610",
    "end": "641975"
  },
  {
    "text": "two, see if they work. Three, see if they work. And just keep going until\nyou find one that works.",
    "start": "641975",
    "end": "647710"
  },
  {
    "text": "That's a very reasonable-- that's a procedure. Start by thinking about short\nsequences, and proceed by",
    "start": "647710",
    "end": "655930"
  },
  {
    "text": "making them longer and longer\nuntil you run into one that happens to solve your problem. So that's what's\ngoing on here.",
    "start": "655930",
    "end": "662000"
  },
  {
    "text": "First I gave a name to the\noperator, increment. Then I give a name to the\noperator, square--",
    "start": "662000",
    "end": "667230"
  },
  {
    "text": "that's just for convenience. Then what I want to do\nis write a program--",
    "start": "667230",
    "end": "673140"
  },
  {
    "text": "find sequence, that will start\nat some initial value, say 1, and go to some goal, say 100.",
    "start": "673140",
    "end": "680089"
  },
  {
    "text": "And the way I'll do that is to\nenumerate over the lengths of sequences that are possible --",
    "start": "680090",
    "end": "687180"
  },
  {
    "text": "1, 2, 3, et cetera.  I'll represent each one of those\nsequences of operations",
    "start": "687180",
    "end": "697079"
  },
  {
    "text": "by this kind of a\nrepresentation, I'll make a tuple that has a string\nthat tells me in",
    "start": "697080",
    "end": "703199"
  },
  {
    "text": "English, what did I do? And an integer that tells\nme what the answer is",
    "start": "703200",
    "end": "709470"
  },
  {
    "text": "after I've done that. So looking ahead, this is the\nidea-- this is the program",
    "start": "709470",
    "end": "715320"
  },
  {
    "text": "that I'm trying to construct. I would like the output of the\nprogram to start by thinking",
    "start": "715320",
    "end": "720790"
  },
  {
    "text": "about all sequences of length\none, then sequences of length two, then sequences of length\nthree, then sequences of",
    "start": "720790",
    "end": "727890"
  },
  {
    "text": "length four.  For each sequence of length one,\nI'd like to think about,",
    "start": "727890",
    "end": "734160"
  },
  {
    "text": "what are all the possible\nsequences? Well, I could start with 1 and\nincrement it to get 2. Or I could start with 1 and\nI could square it to 1.",
    "start": "734160",
    "end": "741980"
  },
  {
    "text": "That's all the possible\nsequences of length one. Then I go on to length two,\nthree, four, by the time I'm",
    "start": "741980",
    "end": "747480"
  },
  {
    "text": "down here to length four, I\ncould start with 1, increment square square increment, and\nthat would give me 17.",
    "start": "747480",
    "end": "754050"
  },
  {
    "text": "That's the structure\nof the program that I'm trying to make. Everybody with it? ",
    "start": "754050",
    "end": "760389"
  },
  {
    "text": "So I'm going to define find\nsequence, I'm going to loop over all those lengths, I'm\ngoing to keep track of all the",
    "start": "760390",
    "end": "768370"
  },
  {
    "text": "different sequences I found\nas a list of tuples. After last week you're\nsupposed to be very",
    "start": "768370",
    "end": "774510"
  },
  {
    "text": "comfortable with those\nkinds of words. Each one of the sequences is a\ntuple, a string and a final",
    "start": "774510",
    "end": "780700"
  },
  {
    "text": "value, and the list is\nall possibilities. And I'm going to try the ones of\nlength one, then I'm going",
    "start": "780700",
    "end": "786550"
  },
  {
    "text": "to append to each one to make\nsequences of two, and then I gonna append to that to make\nsequences of three, four,",
    "start": "786550",
    "end": "793440"
  },
  {
    "text": "five, and keep on going. So the point is, that this is a\nvery simple-minded, easy to",
    "start": "793440",
    "end": "800450"
  },
  {
    "text": "conceive recipe for how to\nsearch through a large number",
    "start": "800450",
    "end": "805610"
  },
  {
    "text": "of sequences and find the one\nwith the minimum length. So when you write that program,\nit iterates down",
    "start": "805610",
    "end": "812170"
  },
  {
    "text": "until it finds number 5, the\n5-length sequence here it came up with the answer 100,\nso that's the answer.",
    "start": "812170",
    "end": "821170"
  },
  {
    "text": "The point is, that it was an\neasy way to write the program. We just think about telling\nsomebody with a pencil and",
    "start": "821170",
    "end": "829310"
  },
  {
    "text": "paper, what would you do? And we tell Python, rather than\nthe person with the piece",
    "start": "829310",
    "end": "834320"
  },
  {
    "text": "of paper, what to do. The approach is straightforward.",
    "start": "834320",
    "end": "840580"
  },
  {
    "text": "The only ugliness is that\nit ended up with three levels of loops.",
    "start": "840580",
    "end": "849230"
  },
  {
    "text": "And the most common kind of\nerror in this kind of programming is you just\nbotch the indices.",
    "start": "849230",
    "end": "855329"
  },
  {
    "text": "Because it's got three nested\nlayers of loops, it's very easy to lose track --\nwhen you're thinking of layer three --",
    "start": "855330",
    "end": "860880"
  },
  {
    "text": "about what's happening\nin layer two. So that's the only difficulty\nin this approach.",
    "start": "860880",
    "end": "868189"
  },
  {
    "text": "The challenge is just to keep\nall the indices consistent. But it works. There's nothing wrong\nwith this approach.",
    "start": "868190",
    "end": "874199"
  },
  {
    "text": "It doesn't necessarily lead to\nthe most modular designs, but you can write functional\nprograms that work this way.",
    "start": "874200",
    "end": "879370"
  },
  {
    "text": " A different way to structure the\nprogram, I'll refer it--",
    "start": "879370",
    "end": "886730"
  },
  {
    "text": "here's a different version of\nthe same program, the same algorithm, but I'm going\nto refer to this one as",
    "start": "886730",
    "end": "891910"
  },
  {
    "text": "functional program. Here the idea is to focus on\nprocedures that implement functions of a mathematical\ntype.",
    "start": "891910",
    "end": "900230"
  },
  {
    "text": "I want to recast the problem,\nthis time thinking about, how would I divide it up\ninto functions",
    "start": "900230",
    "end": "907480"
  },
  {
    "text": "that calculate things. So rather than focusing on,\nwhat's the set of nested loops",
    "start": "907480",
    "end": "913030"
  },
  {
    "text": "that I have to make, I want\nto ask, what would be a meaningful calculation that\nI would want to do to solve this problem?",
    "start": "913030",
    "end": "919710"
  },
  {
    "text": "So the first thing I might do,\nfocusing on this part, I might write a function, apply,\nwhere apply --",
    "start": "919710",
    "end": "928960"
  },
  {
    "text": "I'm using the methodology of\nfunctional programming -- apply is a pure function. It's going to eat some inputs,\ngenerate an output, and have",
    "start": "928960",
    "end": "935779"
  },
  {
    "text": "no side effects. So what I want it to do, I\nwant to feed it a list of",
    "start": "935780",
    "end": "942660"
  },
  {
    "text": "functions and ask it,\nwhat's the answer?",
    "start": "942660",
    "end": "949569"
  },
  {
    "text": "So apply is going to have as its\nfirst argument a list, but",
    "start": "949570",
    "end": "954640"
  },
  {
    "text": "the list is going to be\na list of operations. It's not a list of strings, it's\nnot a list of integers,",
    "start": "954640",
    "end": "963120"
  },
  {
    "text": "it's a list of functions. And what the procedure apply is\ngoing to do is step through",
    "start": "963120",
    "end": "970730"
  },
  {
    "text": "that list, applying\nthe functions one by one to argument.",
    "start": "970730",
    "end": "975815"
  },
  {
    "text": " So the final goal is\nwritten down here. If I apply nothing to 7, the\nanswer ought to be 7.",
    "start": "975815",
    "end": "987180"
  },
  {
    "text": "If I apply increment to 7,\nthe answer ought to be 8.",
    "start": "987180",
    "end": "992450"
  },
  {
    "text": "If I apply square to 7, the\nanswer ought to be 49. And if I apply increment\nsquare to 7, the",
    "start": "992450",
    "end": "999580"
  },
  {
    "text": "answer ought to be 64.  There's a couple things you're\nsupposed to see here.",
    "start": "999580",
    "end": "1005280"
  },
  {
    "text": "First off, apply is\na pure function, it has no side effects. It eats its input, it does a\ncalculation, it tells you an",
    "start": "1005280",
    "end": "1011180"
  },
  {
    "text": "answer, and it's done. There's no extra things that's\ngoing on behind your back, it's not setting a variable, or\ncreating a list, or doing",
    "start": "1011180",
    "end": "1017690"
  },
  {
    "text": "anything like that. It has inputs, from those inputs\nit generates an output,",
    "start": "1017690",
    "end": "1023440"
  },
  {
    "text": "and that's the end\nof the story.  Another thing that you should\nsee is that I'm treating",
    "start": "1023440",
    "end": "1030079"
  },
  {
    "text": "procedures as first-class\nobjects. That's another tenet of\nfunctional programming.",
    "start": "1030079",
    "end": "1037270"
  },
  {
    "text": "Rather than sending the input\nto apply as a list of text",
    "start": "1037270",
    "end": "1043020"
  },
  {
    "text": "strings, or as a list of\nintegers, I'm giving it a list of function names.",
    "start": "1043020",
    "end": "1048590"
  },
  {
    "text": "I'm treating functions just\nas though it were any other kind of data. I'm making a list of functions\njust the same as I could make",
    "start": "1048590",
    "end": "1055679"
  },
  {
    "text": "a list of integers, or if I made\na list of strings, I'm just making a list\nof functions.",
    "start": "1055680",
    "end": "1062309"
  },
  {
    "text": "So another important feature\nof this program is the idea that the functions\nare being treated",
    "start": "1062310",
    "end": "1070560"
  },
  {
    "text": "as first-class objects.  The next procedure\nis addLevel.",
    "start": "1070560",
    "end": "1080580"
  },
  {
    "text": "addLevel is going to be a\nsecond pure function. The idea there is that I'm\ngoing to use addLevel to",
    "start": "1080580",
    "end": "1087169"
  },
  {
    "text": "construct all the different\nsequences of operations that are possible.",
    "start": "1087170",
    "end": "1092820"
  },
  {
    "text": "Each sequence is going to be\na list, so the entire--",
    "start": "1092820",
    "end": "1098909"
  },
  {
    "text": "all possible sequences will\nbe a list of lists. So the idea in addLevel was\ngoing to be that you take the",
    "start": "1098910",
    "end": "1107190"
  },
  {
    "text": "list of lists and you generate\nfrom that list of lists a new",
    "start": "1107190",
    "end": "1113320"
  },
  {
    "text": "list of lists that has\none more element.",
    "start": "1113320",
    "end": "1119929"
  },
  {
    "text": "So if the first list of lists\nhad four elements in it, how many lists are in the second\nlist of lists?",
    "start": "1119930",
    "end": "1126735"
  },
  {
    "text": " Five. ",
    "start": "1126735",
    "end": "1133770"
  },
  {
    "text": "Four, five? The first list of lists\nrepresents some number of",
    "start": "1133770",
    "end": "1140390"
  },
  {
    "text": "different sequence\nof operations. My second list of lists-- what\nI want to do is think about",
    "start": "1140390",
    "end": "1145549"
  },
  {
    "text": "all the different ways that\ncould be extended from a length-4 sequence to a\nlength-5 sequence. How many ways can you extend\na length-4 sequence to a",
    "start": "1145550",
    "end": "1153090"
  },
  {
    "text": "length-5 sequence?  Eight.",
    "start": "1153090",
    "end": "1159539"
  },
  {
    "text": "So four becomes eight. Why does four become eight? AUDIENCE: You've got like\ntwo possibilities.",
    "start": "1159540",
    "end": "1166020"
  },
  {
    "text": "PROFESSOR: Because there's two\npossibilities for the way that you could extend it. I could extend the length-4\nsequence by adding on an",
    "start": "1166020",
    "end": "1174260"
  },
  {
    "text": "increment operator, or I could\nextend it by adding on a square operator. So every time I addLevel, it's\ngoing to create a new list of",
    "start": "1174260",
    "end": "1182060"
  },
  {
    "text": "lists with double as many\nelements in it as the old list of lists. Does that make sense?",
    "start": "1182060",
    "end": "1189800"
  },
  {
    "text": "Other than that, the program\nworks very much the same-- I should illustrate that. So addLevel applied to the\nlist of lists, increment.",
    "start": "1189800",
    "end": "1200170"
  },
  {
    "text": "I'm only considering one\nsequence of length-1, so how",
    "start": "1200170",
    "end": "1206340"
  },
  {
    "text": "many ways can I change that if\nI'm willing to add procedures increment or square?",
    "start": "1206340",
    "end": "1212289"
  },
  {
    "text": "Well, I could end up with\nincrement increment by taking that one and that one. Or I could end up with increment\nsquare by taking",
    "start": "1212290",
    "end": "1219680"
  },
  {
    "text": "that one and that one. So if I were to extend the\nsequence, increment, two",
    "start": "1219680",
    "end": "1227580"
  },
  {
    "text": "possible ways, by either\nincrementing again or by squaring again, I end up with\ntwo possibilities represented",
    "start": "1227580",
    "end": "1233889"
  },
  {
    "text": "by this list of two\ndifferent lists. Is that clear?",
    "start": "1233890",
    "end": "1239650"
  },
  {
    "text": "The important point is that I'm\ntreating functions as any",
    "start": "1239650",
    "end": "1244980"
  },
  {
    "text": "other kind of data element that\ncould be added to a list. ",
    "start": "1244980",
    "end": "1252960"
  },
  {
    "text": "And when you run that program,\nyou get an answer that's very similar to the program that we\nlooked at previously, the",
    "start": "1252960",
    "end": "1262180"
  },
  {
    "text": "imperative program. Except that the answer now\nis a list of functions.",
    "start": "1262180",
    "end": "1271470"
  },
  {
    "text": "So rather than generating a\ntext-string like the previous example did, this program\ngenerates a list as the",
    "start": "1271470",
    "end": "1279280"
  },
  {
    "text": "answer-- the program generates\na list, which is a list of functions. The first element in the list\nis increment, the second",
    "start": "1279280",
    "end": "1285110"
  },
  {
    "text": "element in the list is the\nfunction increment, the third element is square increment\nsquare.",
    "start": "1285110",
    "end": "1290540"
  },
  {
    "text": "So it gave you the same answer,\nit just represented it differently. Here I'm representing the answer\nas a list of functions.",
    "start": "1290540",
    "end": "1296605"
  },
  {
    "text": " That make sense? ",
    "start": "1296605",
    "end": "1303990"
  },
  {
    "text": "So there's a number of\nadvantages to this approach. One of them is that it kind of\nautomatically coerces you to",
    "start": "1303990",
    "end": "1312260"
  },
  {
    "text": "think about modules.  By specifically focusing my\nattention on, how could I",
    "start": "1312260",
    "end": "1319590"
  },
  {
    "text": "break up that problem by\ndefining functions? I end up with a bunch\nof functions",
    "start": "1319590",
    "end": "1326010"
  },
  {
    "text": "here, apply and addLevel.",
    "start": "1326010",
    "end": "1331730"
  },
  {
    "text": "And being functions,\nthey're modules. They are things that are easy\nto manipulate in other",
    "start": "1331730",
    "end": "1336809"
  },
  {
    "text": "contexts, and in particular,\nit's very easy to debug them. Especially in an interpretive\nenvironment like Python.",
    "start": "1336810",
    "end": "1345000"
  },
  {
    "text": "It's very easy to figure out\nif your program works by figuring out if each\nmodule works.",
    "start": "1345000",
    "end": "1352330"
  },
  {
    "text": "That's one of the important\nfeatures of modular",
    "start": "1352330",
    "end": "1357399"
  },
  {
    "text": "programming. When you have a module, it means\nthat you can use that module in multiple\ndifferent ways.",
    "start": "1357400",
    "end": "1363790"
  },
  {
    "text": "It's easy to break apart the\ndebugging problem so that rather than trying to debug\nthe one, monolithic",
    "start": "1363790",
    "end": "1370200"
  },
  {
    "text": "structure-- which was the procedural program\nthat we wrote in the first part, here we can debug\nthe individual components,",
    "start": "1370200",
    "end": "1378720"
  },
  {
    "text": "which happen to be functions. So I can ask, what happens\nwhen I apply the empty list to 7?",
    "start": "1378720",
    "end": "1384700"
  },
  {
    "text": "Well, my answer better be 7. So that provides a\nway of checking.",
    "start": "1384700",
    "end": "1391080"
  },
  {
    "text": "So one of the features of\nthinking about the algorithm as being broken up into a number\nof functions is the",
    "start": "1391080",
    "end": "1398300"
  },
  {
    "text": "greater modularity that\nallows you, for example, easier debugging.",
    "start": "1398300",
    "end": "1406060"
  },
  {
    "text": "A much more important reason for\nthinking this way though, is the clarity of thought.",
    "start": "1406060",
    "end": "1414800"
  },
  {
    "text": "And that can be derived from\nanother feature of the definition of apply.",
    "start": "1414800",
    "end": "1422210"
  },
  {
    "text": "The particular way I\ndefined apply is what we call recursive.",
    "start": "1422210",
    "end": "1428279"
  },
  {
    "text": "It's recursive in the sense that\nthe definition of apply",
    "start": "1428280",
    "end": "1433910"
  },
  {
    "text": "calls apply. OK, that sounds like\na bad idea, right?",
    "start": "1433910",
    "end": "1441530"
  },
  {
    "text": "How do I define something\nin terms of itself? The idea is that each\napplication, every time apply",
    "start": "1441530",
    "end": "1452570"
  },
  {
    "text": "calls itself-- the idea is to structure the\nprocedure so that the new",
    "start": "1452570",
    "end": "1457650"
  },
  {
    "text": "incarnation is in some sense,\nsimpler than the previous one.",
    "start": "1457650",
    "end": "1463070"
  },
  {
    "text": "If you can guarantee that, it\nwill reduce the complexity of the problem from something that\nyou don't know how to",
    "start": "1463070",
    "end": "1469370"
  },
  {
    "text": "solve, to something that you\ndo know how to solve. And for that reason, it\nrepresents a powerful way to",
    "start": "1469370",
    "end": "1476010"
  },
  {
    "text": "think about structuring\nprograms.  So as an example of that--",
    "start": "1476010",
    "end": "1482570"
  },
  {
    "text": "as an example of structuring\nprograms as recursions, think about raising a number to a\nnon-negative integer power.",
    "start": "1482570",
    "end": "1489880"
  },
  {
    "text": " So if I'm trying to raise b to\nthe n, if n is 0, and if n is",
    "start": "1489880",
    "end": "1501779"
  },
  {
    "text": "a non-negative integer-- well,\nif n is 0, b to the n is 1.",
    "start": "1501780",
    "end": "1507280"
  },
  {
    "text": "And if n is a non-negative\ninteger, then b to the n can be reduced to b times b\nto the (n minus 1).",
    "start": "1507280",
    "end": "1516740"
  },
  {
    "text": "Rewriting that functionally, if\nI say that my function b to the n can be represented\nby f of n.",
    "start": "1516740",
    "end": "1524120"
  },
  {
    "text": "This statement is precisely\nequivalent to saying that f of n is 1, if n is 0, or b times\nf of (n minus 1) if n is",
    "start": "1524120",
    "end": "1534060"
  },
  {
    "text": "bigger than 0. So the idea then, is that I may\nnot know how to raise 2 to",
    "start": "1534060",
    "end": "1540204"
  },
  {
    "text": "the 10th, but I can use the rule\nto say 2 to the 10th, oh,",
    "start": "1540204",
    "end": "1545780"
  },
  {
    "text": "that must be 2 times\n2 to the 9th. Great, I don't know how to\ndo 2 to the 9th, either.",
    "start": "1545780",
    "end": "1553100"
  },
  {
    "text": "But 2 to the 9th is 2\ntimes 2 to the 8th. And eventually, I boil it down\nto a case that I do know the",
    "start": "1553100",
    "end": "1561580"
  },
  {
    "text": "answer to, in particular,\nb to the 0 is 1. I would express that idea in\nPython this way, define",
    "start": "1561580",
    "end": "1568750"
  },
  {
    "text": "exponent of b, n. If n is 0, return 1, otherwise\nreturn b times exponent of b, (n minus 1).",
    "start": "1568750",
    "end": "1574606"
  },
  {
    "text": " OK, so what that does then\nwhen you invoke it--",
    "start": "1574606",
    "end": "1582080"
  },
  {
    "text": "invoking exponent of 2, 6, in\nfact, invokes exponent an",
    "start": "1582080",
    "end": "1588909"
  },
  {
    "text": "additional six times. ",
    "start": "1588910",
    "end": "1594950"
  },
  {
    "text": "If I ask Python to evaluate\nexponent of 2, 6 it will end",
    "start": "1594950",
    "end": "1600679"
  },
  {
    "text": "up calling exponent of 2, 5. But to evaluate that, it will\ncall exponent of 2, 4--",
    "start": "1600680",
    "end": "1609129"
  },
  {
    "text": "3, 2, 1, 0. Then finally, it gets\nto the base case.",
    "start": "1609130",
    "end": "1615320"
  },
  {
    "text": "When it gets to the call\nexponent of 2, 0 it falls into this case which returns\n1 always.",
    "start": "1615320",
    "end": "1621840"
  },
  {
    "text": " So now exponent of 2, 0 returns\n1, but then that can",
    "start": "1621840",
    "end": "1629380"
  },
  {
    "text": "pick up where call exponent\nof 2, 1 left off. When I did 2, 1 it fell into\nthis case, where it was trying",
    "start": "1629380",
    "end": "1636630"
  },
  {
    "text": "to take 2 times exponent of\n2, 0 Now it knows the answer to 2, 0 is 1.",
    "start": "1636630",
    "end": "1643620"
  },
  {
    "text": "So I can multiply by 2 and get\nthe answer is 2, and it backs out then all of the\nother answers.",
    "start": "1643620",
    "end": "1650900"
  },
  {
    "text": "So that's an example of how I\ncould use recursion to reduce",
    "start": "1650900",
    "end": "1656800"
  },
  {
    "text": "a complicated case to a base\ncase-- a simple case that I know the answer to.",
    "start": "1656800",
    "end": "1662750"
  },
  {
    "text": "Here, the recruitment with the\npower of n causes a linear",
    "start": "1662750",
    "end": "1668500"
  },
  {
    "text": "increase in the number of\ninvocations, so we would call that a linear process. So the idea then is that\nrecursion is a good way to",
    "start": "1668500",
    "end": "1677049"
  },
  {
    "text": "reduce a complicated problem\nto a simpler problem.",
    "start": "1677050",
    "end": "1682490"
  },
  {
    "text": "Now that algorithm wasn't\nparticularly fast. If I imagine doing a big\nnumber like 1024.",
    "start": "1682490",
    "end": "1689510"
  },
  {
    "text": "Raising a number to the 1024\npower, that could take awhile. How long will it take?",
    "start": "1689510",
    "end": "1695031"
  },
  {
    "text": " 1024 is going to-- it will make\n1024 calls to reduce it",
    "start": "1695031",
    "end": "1703510"
  },
  {
    "text": "to the base case. Here's a way I could\nspeed it up. ",
    "start": "1703510",
    "end": "1709910"
  },
  {
    "text": "Here I'm trying to make\nsomething called fast exponentiation, where I'm going\nto take advantage of another rule for the way\nexponentiation works.",
    "start": "1709910",
    "end": "1719049"
  },
  {
    "text": "Not only is it true that I can\nwrite b to the n as b times b to the n minus 1, but if n\nhappens to be even, there's",
    "start": "1719050",
    "end": "1726820"
  },
  {
    "text": "another rule that I can use. If b is even, then I can raise\nb to the n over 2, and square",
    "start": "1726820",
    "end": "1734600"
  },
  {
    "text": "the answer. OK, that's more knowledge about\nthe way exponents work.",
    "start": "1734600",
    "end": "1740700"
  },
  {
    "text": "The point is, that when I\nthink about the problem recursively, when I think\nabout the problem as a",
    "start": "1740700",
    "end": "1747610"
  },
  {
    "text": "function, there's a natural way\nto take advantage of that additional information.",
    "start": "1747610",
    "end": "1754170"
  },
  {
    "text": "So what I can do then is\nimplement in Python in a scheme that looks very similar\nto the one that I used for the",
    "start": "1754170",
    "end": "1760850"
  },
  {
    "text": "simple exponentiation,\nbut it has a new rule embedded in there.",
    "start": "1760850",
    "end": "1766060"
  },
  {
    "text": "So I can say, if n is 0 -- that was my original base\ncase, if n is 0",
    "start": "1766060",
    "end": "1771340"
  },
  {
    "text": "the answer is 1. If the modulus of n when divided\nby 2 is 1, if it's",
    "start": "1771340",
    "end": "1780250"
  },
  {
    "text": "odd, use the old rule-- which says b times the exponent\nof b, n minus 1.",
    "start": "1780250",
    "end": "1787470"
  },
  {
    "text": "However, if it's neither 0 nor\nodd, then use this new rule. ",
    "start": "1787470",
    "end": "1797170"
  },
  {
    "text": "If I use that procedure compared\nto the previous program, exponent, how many\ninvocations of fastExponent is",
    "start": "1797170",
    "end": "1807820"
  },
  {
    "text": "generated by a call to\nfastExponent of 2, 10? ",
    "start": "1807820",
    "end": "1814010"
  },
  {
    "text": "So talk to your neighbor,\nfigure out an answer, raise your hand. Use the number before the dot,\njust to keep you alert.",
    "start": "1814010",
    "end": "1821350"
  },
  {
    "text": "[AUDIENCE DISCUSSION]",
    "start": "1821350",
    "end": "1907504"
  },
  {
    "text": "PROFESSOR: So how many\ninvocations of fastExponent is generated when you call it\nwith the arguments 2, 10?",
    "start": "1907504",
    "end": "1915410"
  },
  {
    "text": "Everybody raise your hand, tell\nme a number of fingers. ",
    "start": "1915410",
    "end": "1921059"
  },
  {
    "text": "OK, it's about 90%, something\nlike that. The most common answer is five,\nhow did you get five?",
    "start": "1921060",
    "end": "1926860"
  },
  {
    "text": " So do you think of reducing\nfastExponent of 2, 10?",
    "start": "1926860",
    "end": "1936550"
  },
  {
    "text": "What happens the first call? ",
    "start": "1936550",
    "end": "1942208"
  },
  {
    "text": "AUDIENCE: It goes to\n[UNINTELLIGIBLE]  divided by 2 is 5.",
    "start": "1942208",
    "end": "1950080"
  },
  {
    "text": "PROFESSOR: So the first thing\nthat happens, is that it realizes that the 10 is even,\nso the 10 is not 0, it's not",
    "start": "1950080",
    "end": "1957090"
  },
  {
    "text": "odd, it goes into this case. So it tries to run it with 5.",
    "start": "1957090",
    "end": "1963300"
  },
  {
    "text": "Then when it tries to\nrun fastExponent with 5, what happens? ",
    "start": "1963300",
    "end": "1970030"
  },
  {
    "text": "OK, so 5 is not 0, so it's\nnot the base case. It is odd, so 5 gets\nreduced to 4.",
    "start": "1970030",
    "end": "1980480"
  },
  {
    "text": "4 gets reduced to 2. 2 gets reduced to-- et cetera.",
    "start": "1980480",
    "end": "1986419"
  },
  {
    "text": "So the idea is that we get a\nfaster convergence because,",
    "start": "1986420",
    "end": "1993360"
  },
  {
    "text": "just like in the very first\nexample we did, we can do two different kinds of\noperations--",
    "start": "1993360",
    "end": "1999940"
  },
  {
    "text": "either decrement, or in this\ncase half, and half works faster when the numbers are\nbigger than decrement does, so",
    "start": "1999940",
    "end": "2008140"
  },
  {
    "text": "it's the same idea as in\nthat first program. So the idea, then, is that this\nrequires 5 where we would",
    "start": "2008140",
    "end": "2015010"
  },
  {
    "text": "have expected in the previous\nexponent procedure, it would have required 10.",
    "start": "2015010",
    "end": "2020940"
  },
  {
    "text": "And that difference just gets\nbigger and bigger as we make n bigger and bigger. ",
    "start": "2020940",
    "end": "2028350"
  },
  {
    "text": "Much more importantly though,\nthan the fact that we can make something fast, is the idea\nthat this is expressive.",
    "start": "2028350",
    "end": "2038630"
  },
  {
    "text": "The idea is that by structuring\nthe program this way, it was perfectly obvious\nhow to incorporate more",
    "start": "2038630",
    "end": "2046430"
  },
  {
    "text": "knowledge about the way\nexponents work. I could have done it by using\na procedural approach.",
    "start": "2046430",
    "end": "2059330"
  },
  {
    "text": "Do this, then do this,\nthen do this. But then I have very complicated\nindices. Check if it's-- check if it's\nsquared, check if it's",
    "start": "2059330",
    "end": "2066280"
  },
  {
    "text": "whatever, and it's inside\nthe loop, right? So I complicate my looping\nstructure, where here--",
    "start": "2066280",
    "end": "2072750"
  },
  {
    "text": "because I'm using the functional\napproach, it's very easy to understand that it just\nintroduces another case.",
    "start": "2072750",
    "end": "2079340"
  },
  {
    "text": "It's nothing complicated. So it's much more important--\nthe reason we think about recursion isn't so much that\nit's fast, it's because it's",
    "start": "2079340",
    "end": "2086250"
  },
  {
    "text": "expressive. It's a way to incorporate\nknowledge about an answer into",
    "start": "2086250",
    "end": "2091510"
  },
  {
    "text": "a solution, and that's\nwhat we'd like to do. We want to have a way of making complicated things simply.",
    "start": "2091510",
    "end": "2099310"
  },
  {
    "text": "Here's a way to incorporate\nknowledge about a procedure in",
    "start": "2099310",
    "end": "2105600"
  },
  {
    "text": "a very straightforward\nfashion. All we have is a second case. Rather than making the loops\nmore complicated, all we have",
    "start": "2105600",
    "end": "2113240"
  },
  {
    "text": "is a simple new case\nin this statement. And that's especially important\nwhen you think about",
    "start": "2113240",
    "end": "2118490"
  },
  {
    "text": "harder problems. Here is a much harder problem. So Tower of Hanoi, you\nprobably played",
    "start": "2118490",
    "end": "2124070"
  },
  {
    "text": "with this as a kid. I want to transfer all the disks\nfrom Post A to Post B-- I have a typo on your\nhandout, by the way.",
    "start": "2124070",
    "end": "2130650"
  },
  {
    "text": "I typed C on the handout,\nand then I wrote the program the other way. That should have been a B.",
    "start": "2130650",
    "end": "2136090"
  },
  {
    "text": "Transfer a stack of disks from\nPost A to Post B by moving the disks one at a time, never\nplacing a bigger disk on top",
    "start": "2136090",
    "end": "2142300"
  },
  {
    "text": "of a smaller disk.  OK, that's kind of a challenging\nproblem.",
    "start": "2142300",
    "end": "2150650"
  },
  {
    "text": "It's a very challenging\nproblem if you try to structure it as loops. If you try to structure it as\nloops I would recommend that",
    "start": "2150650",
    "end": "2157300"
  },
  {
    "text": "you do this gazillions of\ntimes until you get the pattern stuck in your\nhead, because the",
    "start": "2157300",
    "end": "2162970"
  },
  {
    "text": "pattern's not obvious.  But the pattern is obvious\nif you think",
    "start": "2162970",
    "end": "2169619"
  },
  {
    "text": "about it as a recursion.  I don't know how to move n from\nPost A to Post B. How",
    "start": "2169620",
    "end": "2178040"
  },
  {
    "text": "about this algorithm, take the\ntop n minus 1, move those to",
    "start": "2178040",
    "end": "2183850"
  },
  {
    "text": "C-- get them out of the way. I don't know how you're going to\ndo that, but just trust me, just do it.",
    "start": "2183850",
    "end": "2189500"
  },
  {
    "text": "So move n minus 1 of them off\nthe top, put them over on C, that exposes the bottom one.",
    "start": "2189500",
    "end": "2198160"
  },
  {
    "text": "Move the bottom one to\nB, which is where I'd like it to be. And then by this mysterious\nprocess of moving n minus 1,",
    "start": "2198160",
    "end": "2204230"
  },
  {
    "text": "bring the n minus 1 back from\nC back on top of B. OK, what did I just do?",
    "start": "2204230",
    "end": "2210190"
  },
  {
    "text": "I just started with a\nproblem that I don't know the answer to. How do I move n disks from\nthis post to that post?",
    "start": "2210190",
    "end": "2219040"
  },
  {
    "text": "And I broke it into a sequence\nof three operations, two of",
    "start": "2219040",
    "end": "2224420"
  },
  {
    "text": "which I don't know how to do,\nbut one of which I know. The one will fortuitously\nbe the base case--",
    "start": "2224420",
    "end": "2230670"
  },
  {
    "text": "or at least similar\nto the base case. So the idea is, if I want to\ntransfer the n, do two",
    "start": "2230670",
    "end": "2236720"
  },
  {
    "text": "versions of the n minus 1\nproblem and glue them together with this middle step.",
    "start": "2236720",
    "end": "2244060"
  },
  {
    "text": "OK, well I don't know how to\ndo the n minus 1 problem either, just recurse. How do I do the n minus 1 one? Well, I'll do the\nn minus 2 one.",
    "start": "2244060",
    "end": "2252270"
  },
  {
    "text": "I don't know how to\ndo that either. Well, then do the\nn minus 3 one. Keep going until I\nget it down to 1.",
    "start": "2252270",
    "end": "2259670"
  },
  {
    "text": "Because when I get down to 1,\nI do know how to move 1. ",
    "start": "2259670",
    "end": "2265370"
  },
  {
    "text": "Does that make sense? This is supposed to illustrate\nthat the power of recursion is",
    "start": "2265370",
    "end": "2271670"
  },
  {
    "text": "in thinking. Some algorithms are easy to\ndescribe recursively.",
    "start": "2271670",
    "end": "2280840"
  },
  {
    "text": "That set, is the set when the\nhard problem can be reduced to",
    "start": "2280840",
    "end": "2286340"
  },
  {
    "text": "a problem of the same type that\nis in some sense simpler. Here simpler means taking the\nindex n, and turning it",
    "start": "2286340",
    "end": "2294320"
  },
  {
    "text": "into n minus 1. If you write this simple little\nPython snippet and run",
    "start": "2294320",
    "end": "2301610"
  },
  {
    "text": "it, you get this procedure. And if you-- so the procedure means, take the\ntop disk off A, put it on",
    "start": "2301610",
    "end": "2308650"
  },
  {
    "text": "B. Take the top disk off A, put\nit on C. Take the top disk off B, put it on C.",
    "start": "2308650",
    "end": "2314190"
  },
  {
    "text": "If you do that procedure, it\nwill magically do exactly the right thing.",
    "start": "2314190",
    "end": "2319900"
  },
  {
    "text": "If you try to see the pattern\nhere, so that you were to write this in a procedural\napproach, the pattern is very",
    "start": "2319900",
    "end": "2327120"
  },
  {
    "text": "peculiar, but the algorithm for\ndoing it is very simple.",
    "start": "2327120",
    "end": "2332990"
  },
  {
    "text": "So the idea-- one of the reasons that we like\nrecursion, is this idea of expressability.",
    "start": "2332990",
    "end": "2339170"
  },
  {
    "text": "It makes it easy to express\nwhat we're trying to do. ",
    "start": "2339170",
    "end": "2345110"
  },
  {
    "text": "OK, so that's a quick view of\nthe first two ways to do the first problem that\nI talked about.",
    "start": "2345110",
    "end": "2351220"
  },
  {
    "text": "We started thinking about a\nsequence of operations, either increment or square,\nthat transforms an integer i into g.",
    "start": "2351220",
    "end": "2359260"
  },
  {
    "text": "The first thing we looked at\nwas a procedural approach where I just gave\nyou a recipe-- do this, do this, do this. The issue there is that I ended\nup with nested loops",
    "start": "2359260",
    "end": "2367280"
  },
  {
    "text": "three deep. The issue there is keeping track\nof the indices for all",
    "start": "2367280",
    "end": "2372490"
  },
  {
    "text": "of the different loops. We just talked about a\nfunctional approach. That can have an advantage,\nespecially whenever the",
    "start": "2372490",
    "end": "2382029"
  },
  {
    "text": "functional approach has a very\nsimple implementation. The last approach I want to\ntalk about very briefly is",
    "start": "2382030",
    "end": "2388780"
  },
  {
    "text": "object-oriented approach. Here-- I'm doing the same problem\nagain, find the sequence of",
    "start": "2388780",
    "end": "2394450"
  },
  {
    "text": "operations that transforms\ni into g, 1 into 100. Here I'm doing the same\nalgorithm again.",
    "start": "2394450",
    "end": "2401740"
  },
  {
    "text": "I mean, I haven't really changed\nthe algorithm in going from the procedural approach to\nthe functional approach, to",
    "start": "2401740",
    "end": "2407260"
  },
  {
    "text": "here, the object-oriented\napproach. I have changed the\nrepresentation of the program, and that's the point.",
    "start": "2407260",
    "end": "2414200"
  },
  {
    "text": "Here the representation\nof the program is in terms of objects. Here what I'm going to do is\nthink about organizing all the",
    "start": "2414200",
    "end": "2422080"
  },
  {
    "text": "sequences of operations that\nare possible in a tree. So the sequences that I could\ndo, I could do no operation",
    "start": "2422080",
    "end": "2430180"
  },
  {
    "text": "followed by increment\nincrement increment. Or I could do nothing increment\nincrement square.",
    "start": "2430180",
    "end": "2436580"
  },
  {
    "text": "Or I could do nothing square\nincrement square. So I'm thinking about all the\npossible sequences, but this",
    "start": "2436580",
    "end": "2441880"
  },
  {
    "text": "time, I'm not thinking about it\nis a text-string, I'm not thinking about it as a list of\nfunctions that I need to call.",
    "start": "2441880",
    "end": "2449670"
  },
  {
    "text": "I'm thinking about it as this\ntree, this tree of objects.",
    "start": "2449670",
    "end": "2456740"
  },
  {
    "text": "And in the object-oriented\napproach, what I'm going to do is think about the solution in\nterms of building up the tree",
    "start": "2456740",
    "end": "2464290"
  },
  {
    "text": "until I find the answer. So the key in the\nobject-oriented approach is to",
    "start": "2464290",
    "end": "2470250"
  },
  {
    "text": "think of a useful object. What would I like to remember\nwhen I'm constructing the",
    "start": "2470250",
    "end": "2478050"
  },
  {
    "text": "solution as this\nkind of a tree? Well, if I call every circle a\nnode, I can define a class",
    "start": "2478050",
    "end": "2489770"
  },
  {
    "text": "that will keep track of\nall the important things about each node. And then I can structure my\nprogram as creating nodes,",
    "start": "2489770",
    "end": "2499790"
  },
  {
    "text": "connecting them up into\nthat tree, and looking for the answer.",
    "start": "2499790",
    "end": "2506260"
  },
  {
    "text": "So each one of these nodes,\neach one of these circles, ought to have a parent, they\nought to have an action, and",
    "start": "2506260",
    "end": "2517220"
  },
  {
    "text": "they ought to have an answer. So, for example, let's say\nthat I started with the",
    "start": "2517220",
    "end": "2523160"
  },
  {
    "text": "initial value i equals 1. Then this node right here\nmight say, whatever your",
    "start": "2523160",
    "end": "2531930"
  },
  {
    "text": "answer was at this point,\nthe answer here was 1. So the answer here is going\nto be 1 after it's been",
    "start": "2531930",
    "end": "2539210"
  },
  {
    "text": "incremented, so answer\nshould be 2. So associated with each\none of these nodes is going to be a parent.",
    "start": "2539210",
    "end": "2544880"
  },
  {
    "text": "The parent of this guy is this\nguy, the parent of this guy is this guy, the parent of\nthis guy is that guy.",
    "start": "2544880",
    "end": "2550730"
  },
  {
    "text": "Associated with each node is\ngoing to be an action. When I'm here, my action\nis to increment.",
    "start": "2550730",
    "end": "2556089"
  },
  {
    "text": "When I'm here, my action\nis to square. And associated with each node\nis going to be the answer.",
    "start": "2556090",
    "end": "2563599"
  },
  {
    "text": "So if I started at 1, by the\ntime I get here, the answer's going to be 2, 4, 16.",
    "start": "2563600",
    "end": "2571025"
  },
  {
    "text": " So the idea is that I'm\nstructuring the",
    "start": "2571025",
    "end": "2577050"
  },
  {
    "text": "problem as a tree. Each node has a couple things it\nwants to remember, it wants",
    "start": "2577050",
    "end": "2582570"
  },
  {
    "text": "to know who it's parent was. It wants to know, what's\nthe operation associated with this node?",
    "start": "2582570",
    "end": "2587840"
  },
  {
    "text": "And it wants to know the\nanswer at this node.  Also associated with each\nnode, a method.",
    "start": "2587840",
    "end": "2596220"
  },
  {
    "text": "And the method will be to print\nout the answer if this node is the answer. So the print routine is going to\nhave to say, OK, I ended up",
    "start": "2596220",
    "end": "2605010"
  },
  {
    "text": "here and that happens\nto be the answer. Well, how did I get here? Well, I have a parent, who has\na parent, who has a parent,",
    "start": "2605010",
    "end": "2610610"
  },
  {
    "text": "who is none. So this routine is supposed to\nfigure out the sequence of",
    "start": "2610610",
    "end": "2616960"
  },
  {
    "text": "operations that led me from the\ninitial value up at the top to the final answer that\njust happens to be goal.",
    "start": "2616960",
    "end": "2624655"
  },
  {
    "text": "Is that clear? So then I structure the program\nin terms of building",
    "start": "2624655",
    "end": "2631720"
  },
  {
    "text": "those node structures. I start off by making a node,\nwhich is the top node.",
    "start": "2631720",
    "end": "2637390"
  },
  {
    "text": "It has no parent, it has no\naction, and the answer to the top node is 1.",
    "start": "2637390",
    "end": "2643570"
  },
  {
    "text": "And then I just think through\nloops that are very similar to the loops that I was\nusing before.",
    "start": "2643570",
    "end": "2650750"
  },
  {
    "text": "They're structured similarly\nto the way they were structured in the case of the\nimperative program, except now",
    "start": "2650750",
    "end": "2659460"
  },
  {
    "text": "the iterations are generating\nnew nodes. The iterations are simpler,\nbecause each one just",
    "start": "2659460",
    "end": "2667319"
  },
  {
    "text": "generates a node. It's not like in the imperative\ncase where I treated separately, what was\nthe ASCII string that",
    "start": "2667320",
    "end": "2674110"
  },
  {
    "text": "represented the answer,\nand what was the cumulative answer?",
    "start": "2674110",
    "end": "2680460"
  },
  {
    "text": "Here I don't have two pieces\nof things that I need to do inside my loop, I just\nmake a node.",
    "start": "2680460",
    "end": "2686660"
  },
  {
    "text": "So the idea is that when I solve\nthe problem using this approach, what I'm trying to do\nis build a representation",
    "start": "2686660",
    "end": "2693200"
  },
  {
    "text": "for the solution out\nof pieces that make sense for this problem. ",
    "start": "2693200",
    "end": "2701750"
  },
  {
    "text": "So the important idea that I\nwant to get across was to think about modularity at\nthe next higher level.",
    "start": "2701750",
    "end": "2710410"
  },
  {
    "text": "We started last time with\nmodularity at the most microscopic level in Python,\nand we saw how Python had",
    "start": "2710410",
    "end": "2717310"
  },
  {
    "text": "primitives that allowed us\nto build more complicated structures and simplified\nour task of",
    "start": "2717310",
    "end": "2723850"
  },
  {
    "text": "understanding complex designs. We looked at the most\nprimitive level in the first lecture.",
    "start": "2723850",
    "end": "2729730"
  },
  {
    "text": "What I just went over was how\neven within the structure of Python, you can structure\nprograms that are",
    "start": "2729730",
    "end": "2736400"
  },
  {
    "text": "more or less modular. And the important point is that\nthe way you structure the",
    "start": "2736400",
    "end": "2742270"
  },
  {
    "text": "program influences the degree\nof modularity that you get.",
    "start": "2742270",
    "end": "2749050"
  },
  {
    "text": "So the structure of the program\nhas a significant effect on how modular\nyour solution is.",
    "start": "2749050",
    "end": "2758450"
  },
  {
    "text": " What I want to do for the rest\nof the time today is jump one",
    "start": "2758450",
    "end": "2765080"
  },
  {
    "text": "higher level yet. So last time, primitives\nwithin Python.",
    "start": "2765080",
    "end": "2770790"
  },
  {
    "text": "First half of this hour,\nimperative programming,",
    "start": "2770790",
    "end": "2775970"
  },
  {
    "text": "functional programming,\nobject-oriented programming, approaches that affect the\nmodularity of your solution.",
    "start": "2775970",
    "end": "2781420"
  },
  {
    "text": "Now I want to go up one more\nlevel and think about abstraction and modularity\nat a much higher level.",
    "start": "2781420",
    "end": "2789630"
  },
  {
    "text": "And there, I'm going to think\nabout programs that control the evolution of processes.",
    "start": "2789630",
    "end": "2794830"
  },
  {
    "text": "What's a process? A process is some set\nof procedures that evolve over time.",
    "start": "2794830",
    "end": "2801619"
  },
  {
    "text": "An example was a bank account.  OK, with the problems that we've\nbeen thinking about so",
    "start": "2801620",
    "end": "2808180"
  },
  {
    "text": "far, there was a clear answer. What's the minimum-length\nsequence that blah, blah, blah. Right? There was a clear answer\nto that problem.",
    "start": "2808180",
    "end": "2814640"
  },
  {
    "text": "Here there isn't a clear answer\nto the problem, what's the answer to the\nbank account?",
    "start": "2814640",
    "end": "2821020"
  },
  {
    "text": "The bank represents a process,\nit's something that changes with time. There are transactions.",
    "start": "2821020",
    "end": "2828560"
  },
  {
    "text": "Every time you make a deposit\nor a withdrawal, you do a transaction that causes some\naction to happen in the bank.",
    "start": "2828560",
    "end": "2836170"
  },
  {
    "text": "So there isn't an answer,\nthere's an evolving answer. So those are the kinds\nof problems I want",
    "start": "2836170",
    "end": "2841890"
  },
  {
    "text": "to think about now. Graphical user interfaces. Again, there's no\nanswer to Excel.",
    "start": "2841890",
    "end": "2848760"
  },
  {
    "text": " Right, you can't say calculate\nthe answer to Excel.",
    "start": "2848760",
    "end": "2854740"
  },
  {
    "text": "Because whatever-- so the right answer for Excel\ndepends on, what's the sequence of buttons that you're\npressing, and what's",
    "start": "2854740",
    "end": "2860490"
  },
  {
    "text": "the sequence of pull-down menus\nthat you're doing, and all that sort of stuff. So graphical user interfaces\nare processes.",
    "start": "2860490",
    "end": "2867010"
  },
  {
    "text": "They're things that\nevolve over time. So they take a sequence of\ninputs, and they generate a",
    "start": "2867010",
    "end": "2872400"
  },
  {
    "text": "sequence of outputs, just\nlike a bank does. Controllers.",
    "start": "2872400",
    "end": "2878430"
  },
  {
    "text": "How do you make a\nrobotic steerer? That's a process.",
    "start": "2878430",
    "end": "2883810"
  },
  {
    "text": "There are inputs-- so for example, where are you\nin the middle of the lane? What time is it? How many pedestrians are\nyou about to hit?",
    "start": "2883810",
    "end": "2890760"
  },
  {
    "text": "There's all of those\nkinds of inputs. And then there is things\nthat you output-- which is like, keep going.",
    "start": "2890760",
    "end": "2897480"
  },
  {
    "text": "So some of the steering rules\nare particularly simple. Other steering rules are you\nknow, avoid the guy this--",
    "start": "2897480",
    "end": "2903520"
  },
  {
    "text": "well, anyway. So the idea is that when you\nwere controlling processes,",
    "start": "2903520",
    "end": "2909589"
  },
  {
    "text": "we're going to want to think\nabout other kinds of programming structures. And even though the programming\nstructures are",
    "start": "2909590",
    "end": "2917070"
  },
  {
    "text": "going to be different, we're\nstill going to want to have this idea of modularity. We're going to want to be able\nto think about, what are the",
    "start": "2917070",
    "end": "2924230"
  },
  {
    "text": "primitives that we have, how can\nwe combine them, what are the important abstractions,\nand how",
    "start": "2924230",
    "end": "2930050"
  },
  {
    "text": "do we capture patterns? We're still going to\nwant to do PCAP. But we're going to want to do\nPCAP at a much higher level.",
    "start": "2930050",
    "end": "2938430"
  },
  {
    "text": "And the programming module that\nI want to introduce is the idea of a state machine.",
    "start": "2938430",
    "end": "2944900"
  },
  {
    "text": "A state machine is a very\nconvenient structure to capture the behavior\nof a process.",
    "start": "2944900",
    "end": "2951930"
  },
  {
    "text": "A state machine has an input,\na state, and an output. The idea is that\nit's a process.",
    "start": "2951930",
    "end": "2959330"
  },
  {
    "text": "It's operated upon in steps. Every step there's\na new input.",
    "start": "2959330",
    "end": "2965170"
  },
  {
    "text": "From that input, the state\nmachine can calculate an output and the next state.",
    "start": "2965170",
    "end": "2972440"
  },
  {
    "text": "By keeping track of the state,\nthis state machine can remember everything it needs\nto know so that it can",
    "start": "2972440",
    "end": "2980619"
  },
  {
    "text": "continue the process\ninto the future. So the idea is that this\nis going to represent a",
    "start": "2980620",
    "end": "2986370"
  },
  {
    "text": "fundamental programming element,\nthat we'll be able to use to construct things that\nare like processes.",
    "start": "2986370",
    "end": "2994060"
  },
  {
    "text": "And in particular, we use this\nto represent the calculations that are done within\nour robot.",
    "start": "2994060",
    "end": "3000120"
  },
  {
    "text": "We'll think about the robot\nas being a process. It's not got an answer, you\ncan't ask the question, what's",
    "start": "3000120",
    "end": "3006580"
  },
  {
    "text": "the answer, to the robot. But you can answer the question,\nif I were trying to steer and the sonar said\n(x,y,z), how fast should you",
    "start": "3006580",
    "end": "3017510"
  },
  {
    "text": "turn the wheels? You can think about that\nas a state machine. There's some state\nof the robot.",
    "start": "3017510",
    "end": "3023140"
  },
  {
    "text": "There are some inputs-- which is what the sonars are\ncurrently telling us, and there's some output-- which is how fast we're\ndriving the wheels.",
    "start": "3023140",
    "end": "3030050"
  },
  {
    "text": "So we want to think about this\nkind of a representation for processes that evolve\nover time.",
    "start": "3030050",
    "end": "3039440"
  },
  {
    "text": "OK, here's a very simple\nexample, a turnstile. So we can think about the\nturnstile as a state machine.",
    "start": "3039440",
    "end": "3049830"
  },
  {
    "text": "The turnstile has two states-- think about getting\nonto the T--",
    "start": "3049830",
    "end": "3054940"
  },
  {
    "text": "either it's locked, or\nit's not locked. Those are the two states\nof the turnstile. ",
    "start": "3054940",
    "end": "3062300"
  },
  {
    "text": "There are some inputs. The inputs are, I put a coin\nin it, or I walk through it",
    "start": "3062300",
    "end": "3071609"
  },
  {
    "text": "and the turnstile turns,\nor I don't do anything.",
    "start": "3071610",
    "end": "3077700"
  },
  {
    "text": "And based on those inputs, and\nbased on the current state, the turnstile has\nsome outputs.",
    "start": "3077700",
    "end": "3085060"
  },
  {
    "text": "So the turnstile can either\nallow you to enter, or ask you to pay.",
    "start": "3085060",
    "end": "3090940"
  },
  {
    "text": "So the output might be an LED\nsign that says, please enter.",
    "start": "3090940",
    "end": "3096250"
  },
  {
    "text": "Or it could have an LED sign\nthat says, please pay. So those are out all of the\nelements of a state machine.",
    "start": "3096250",
    "end": "3103869"
  },
  {
    "text": "And so we can think about a\ngraphical representation for the turnstile in terms\nof states.",
    "start": "3103870",
    "end": "3110559"
  },
  {
    "text": "Here I'm representing the\nstates as circles. There are two states in the\nturnstile, the turnstiles is",
    "start": "3110560",
    "end": "3117789"
  },
  {
    "text": "either locked or unlocked. You move between states\nby getting inputs.",
    "start": "3117790",
    "end": "3124500"
  },
  {
    "text": "So the inputs are represented\nby the arcs-- it's the top identifier on each\narc is the input, the",
    "start": "3124500",
    "end": "3134010"
  },
  {
    "text": "bottom identifier is the output,\nand the special arrow says I start here.",
    "start": "3134010",
    "end": "3140400"
  },
  {
    "text": "So the turnstiles start out\nlocked in the morning-- the turnstile is locked.",
    "start": "3140400",
    "end": "3146210"
  },
  {
    "text": "If you drop a coin in it, you'll\nmove into the unlocked state and it will\noutput enter.",
    "start": "3146210",
    "end": "3153150"
  },
  {
    "text": "It will tell you that it's OK to\nenter because you've put a coin in it now. Then as long as you stay there\nand do nothing, it'll continue",
    "start": "3153150",
    "end": "3162170"
  },
  {
    "text": "to say enter-- none enter. Or if you keep dropping coins\nin it, it'll say hey, keep",
    "start": "3162170",
    "end": "3168360"
  },
  {
    "text": "going, and it'll continue to eat\nyour coins and continue to say enter--",
    "start": "3168360",
    "end": "3173760"
  },
  {
    "text": "being very nice. So in those cases it remains\nunlocked, it continues to tell",
    "start": "3173760",
    "end": "3179310"
  },
  {
    "text": "you that you can enter, and that\nstate persists until you",
    "start": "3179310",
    "end": "3184690"
  },
  {
    "text": "turn the turnstile. When you turn the turnstile,\nthis particular turnstile",
    "start": "3184690",
    "end": "3190470"
  },
  {
    "text": "forgets how many coins you gave\nit and it simply locks",
    "start": "3190470",
    "end": "3197040"
  },
  {
    "text": "and it tells you you've\ngot to pay more. So the idea is that we can\ncapture the desired behavior",
    "start": "3197040",
    "end": "3204165"
  },
  {
    "text": "of the turnstile-- the turnstile is a process,\nit's a thing that evolves over time.",
    "start": "3204165",
    "end": "3209990"
  },
  {
    "text": "But we can capture the essence\nof what we would like the turnstile to do in terms\nof this diagram.",
    "start": "3209990",
    "end": "3217289"
  },
  {
    "text": "We'll call this a\nstate diagram. And then we can think about\nbehaviors in terms of a set of",
    "start": "3217290",
    "end": "3226810"
  },
  {
    "text": "outputs as a function of time. So imagine that as a\nfunction of time--",
    "start": "3226810",
    "end": "3233029"
  },
  {
    "text": "say I started in the\nstate locked, and the input is nothing.",
    "start": "3233030",
    "end": "3240520"
  },
  {
    "text": "So you wake up in the morning,\nyou go to the T, overnight the turnstiles have all\nbeen locked.",
    "start": "3240520",
    "end": "3247100"
  },
  {
    "text": "They all say that they're\nlocked, they all say, pay, as their output. If I don't do anything it just\nsits there and it says pay.",
    "start": "3247100",
    "end": "3255420"
  },
  {
    "text": "If I drop a coin, it says enter\nand it moves into the unlocked state.",
    "start": "3255420",
    "end": "3263020"
  },
  {
    "text": "If I don't do anything\nenter persists and it stays unlocked.",
    "start": "3263020",
    "end": "3268050"
  },
  {
    "text": "If I walk through it, it eats\nthe coin and it says, OK, you gotta pay now, and it locks.",
    "start": "3268050",
    "end": "3274120"
  },
  {
    "text": "So you can think about the\nevolution of this process-- the evolution of the turnstile\nin terms of the diagram with",
    "start": "3274120",
    "end": "3280960"
  },
  {
    "text": "regard to time.  And the idea then is that this\nis a kind of a representation",
    "start": "3280960",
    "end": "3289820"
  },
  {
    "text": "that allows us to succinctly\ncapture the important information about how\nprocesses work.",
    "start": "3289820",
    "end": "3296710"
  },
  {
    "text": " One of the important features of\nthis representation is that",
    "start": "3296710",
    "end": "3304119"
  },
  {
    "text": "it removes you one level away\nfrom the looping structure. Somewhere somebody's keeping\ntrack of the loop.",
    "start": "3304120",
    "end": "3311710"
  },
  {
    "text": "Something's going from time 0 to\ntime 1, to time 2, to 3 -- we'll talk about that later. But for the time being, this\nrepresentation focuses on what",
    "start": "3311710",
    "end": "3320360"
  },
  {
    "text": "do you do at each instance\nin time? So it's a way of tearing apart\nthe time part from the state",
    "start": "3320360",
    "end": "3329090"
  },
  {
    "text": "transition part. So separate out the loop from\nthe essence, it's very much",
    "start": "3329090",
    "end": "3335590"
  },
  {
    "text": "like the functional example\nthat I did. The functions divorce themselves\nfrom the looping",
    "start": "3335590",
    "end": "3342240"
  },
  {
    "text": "structure that we saw in the\nimperative approach, and you could define the functions\nindependent of the looping.",
    "start": "3342240",
    "end": "3348250"
  },
  {
    "text": "We're doing the same\nthing here. We can define the state\nmachine representation independent of the looping.",
    "start": "3348250",
    "end": "3354279"
  },
  {
    "text": "And most importantly,\nthis idea of state machines is modular. ",
    "start": "3354280",
    "end": "3360810"
  },
  {
    "text": "Let me show you how that\nplays out when we think about the robot. Think about the problem that I\nshowed you last time where",
    "start": "3360810",
    "end": "3368620"
  },
  {
    "text": "we're trying to have the robot\ngo from point A to point B.",
    "start": "3368620",
    "end": "3374500"
  },
  {
    "text": "Where, for example, it knows\nwhere it is -- say it has GPS or something.",
    "start": "3374500",
    "end": "3380260"
  },
  {
    "text": "It knows-- from a map say, where it wants\nto be, but it has no idea of",
    "start": "3380260",
    "end": "3386630"
  },
  {
    "text": "the obstacles between where it\nis and where it wants to be. So we can think about that kind\nof a problem-- we looked",
    "start": "3386630",
    "end": "3393610"
  },
  {
    "text": "at this last time. It takes a step, it\nuses its sonars-- which are depicted by these\nlines, to infer that there are",
    "start": "3393610",
    "end": "3401640"
  },
  {
    "text": "some walls-- that's the black dots. So it gets a reflection off the\nsonar that tells it that",
    "start": "3401640",
    "end": "3408660"
  },
  {
    "text": "there's some obstacle\nin the way. That means it's not a good\nidea to try to plow straightforward, so if I back\nup, the original plan, it had",
    "start": "3408660",
    "end": "3416310"
  },
  {
    "text": "no idea what was between it and\nits destination, so its plan was just buzz\nstraight through.",
    "start": "3416310",
    "end": "3421370"
  },
  {
    "text": " At the end of its first step, it\nhas got back sonar reports",
    "start": "3421370",
    "end": "3429490"
  },
  {
    "text": "that tell it that there's a wall\nhere, and here, and here, and here, and here, and here.",
    "start": "3429490",
    "end": "3434700"
  },
  {
    "text": "And based on where the wall is,\nand the size of the robot, it can't get into any of\nthese red squares.",
    "start": "3434700",
    "end": "3441280"
  },
  {
    "text": "It's too big. So it knows its original path,\nwhich went from here to here,",
    "start": "3441280",
    "end": "3446980"
  },
  {
    "text": "isn't going to work because\nit can't fit through. So it computes a new path,\nand then repeat.",
    "start": "3446980",
    "end": "3456990"
  },
  {
    "text": "So the idea is that\nwe're solving a very complicated problem-- the robot 's solving a very\ncomplicated problem, and what",
    "start": "3456990",
    "end": "3464680"
  },
  {
    "text": "I'd like to do now is\nthink through a solution to that problem. As the robot's moving along,\non every step it's getting",
    "start": "3464680",
    "end": "3473840"
  },
  {
    "text": "some new input-- it's behaving just like\na state machine. On every step it gets new\ninput from the sonars.",
    "start": "3473840",
    "end": "3479850"
  },
  {
    "text": "Based on that new\ninput, it knows where there's new obstacles. Based on that knowledge,\nit has a better idea of",
    "start": "3479850",
    "end": "3485549"
  },
  {
    "text": "what the map is. Based on that knowledge, it has\na better idea of finding a plan that might work.",
    "start": "3485550",
    "end": "3491810"
  },
  {
    "text": " And then based on that\nknowledge, it knows how to",
    "start": "3491810",
    "end": "3497310"
  },
  {
    "text": "tell the wheels to\nmove forward. So think about where\nit is right now. ",
    "start": "3497310",
    "end": "3503400"
  },
  {
    "text": "It has done, logically, three\ndifferent things.",
    "start": "3503400",
    "end": "3508880"
  },
  {
    "text": "It has figured out where\nthe walls are. That's the thing represented\nin black and red.",
    "start": "3508880",
    "end": "3515940"
  },
  {
    "text": "We'll call that --\nit made a map.  Given the map, it\nmade a plan--",
    "start": "3515940",
    "end": "3522760"
  },
  {
    "text": "that's the blue thing.  Given the plan, it figured out\nhow to turn the wheels.",
    "start": "3522760",
    "end": "3531180"
  },
  {
    "text": "It's going straight ahead. So there are logically three\nthings going on,",
    "start": "3531180",
    "end": "3537690"
  },
  {
    "text": "all at the same time. You can imagine writing an\nimperative program to capture",
    "start": "3537690",
    "end": "3543320"
  },
  {
    "text": "that behavior, but that's\ncomplicated. Not impossible, you\nwould structure it",
    "start": "3543320",
    "end": "3549099"
  },
  {
    "text": "as a bunch of loops. You know, it would-- unless you're a crack\nprogrammer, and I'm sure you are--",
    "start": "3549100",
    "end": "3555646"
  },
  {
    "text": "it will end up being\nan ugly program. The idea is, that by using the\nstate machine representation",
    "start": "3555646",
    "end": "3562660"
  },
  {
    "text": "we'll be able to think\nabout how to pull apart those three pieces. ",
    "start": "3562660",
    "end": "3568950"
  },
  {
    "text": "So in particular, we can think\nabout the state machine for",
    "start": "3568950",
    "end": "3574130"
  },
  {
    "text": "the robot-- which would take the sensory\ninput from the sonars and turn it into an action, which\nis turning the wheels--",
    "start": "3574130",
    "end": "3581670"
  },
  {
    "text": "we can think about that as\nhaving three modules. There's the mapmaker module,\nwhich just looks at the",
    "start": "3581670",
    "end": "3588020"
  },
  {
    "text": "sensory input. Doesn't care what the plan is,\ndoesn't care how it's turning the wheels right now.",
    "start": "3588020",
    "end": "3594030"
  },
  {
    "text": "All it the cares about\nis, what was the -- what's my current state?",
    "start": "3594030",
    "end": "3599070"
  },
  {
    "text": "And what new information\ncan I infer about the map from the sonars?",
    "start": "3599070",
    "end": "3604539"
  },
  {
    "text": "So given the sonars and my\ncurrent state, what's the most recent version of the map\nlikely to look like.",
    "start": "3604540",
    "end": "3612619"
  },
  {
    "text": "Then there's a planner that\nsays, given the sonars and the map, how would I construct\nthis blue line?",
    "start": "3612620",
    "end": "3621360"
  },
  {
    "text": "Given my current understanding\nof the map of the world, how would I get from where I am,\nto where I want to be?",
    "start": "3621360",
    "end": "3630130"
  },
  {
    "text": "That's a plan. Then from that plan--",
    "start": "3630130",
    "end": "3635170"
  },
  {
    "text": "say the robot is here, from the\nplan you can see that the thing the robot should do\nis move straight ahead.",
    "start": "3635170",
    "end": "3643180"
  },
  {
    "text": "So the mover can take\nthe heading-- the heading is just simply the\ncoordinates of the first",
    "start": "3643180",
    "end": "3650130"
  },
  {
    "text": "destination point in the plan. So the mover can look at the\nheading, the first destination",
    "start": "3650130",
    "end": "3656100"
  },
  {
    "text": "point, and figure out how\nto make the wheels turn. So the idea is that the state\nmachine representation will",
    "start": "3656100",
    "end": "3661970"
  },
  {
    "text": "let us parse a very complicated\nproblem. A process-- the process by which the robot\ngets from here to there, a",
    "start": "3661970",
    "end": "3671200"
  },
  {
    "text": "very complicated process. We're going to be able to\nbreak it up into pieces. The pieces are going\nto be much easier.",
    "start": "3671200",
    "end": "3679029"
  },
  {
    "text": "They're going to be modular. We will be able to write this\npiece, and debug it and make",
    "start": "3679030",
    "end": "3685180"
  },
  {
    "text": "sure that it all works,\nindependent of these other pieces. Because we just have it do any\narbitrary walk around task or",
    "start": "3685180",
    "end": "3692930"
  },
  {
    "text": "no walk around at all and ask\nwhether the set of sensory inputs generates the\ncorrect map.",
    "start": "3692930",
    "end": "3700880"
  },
  {
    "text": "Similarly, this will\nbe a module. This will be something that we\ncan debug as well without",
    "start": "3700880",
    "end": "3705920"
  },
  {
    "text": "having the other\npieces working. We'll be able to say, OK, well,\nwhat if I fed a map that",
    "start": "3705920",
    "end": "3710930"
  },
  {
    "text": "I hand constructed\nto the robot-- ignore this, just forget\nthis, assume",
    "start": "3710930",
    "end": "3717160"
  },
  {
    "text": "there is none of these-- I can hand make a map, feed it\nto this guy, give it sensory",
    "start": "3717160",
    "end": "3722340"
  },
  {
    "text": "input and see if it comes up\nwith the right heading. It's just like in that\nfunctional approach example",
    "start": "3722340",
    "end": "3728019"
  },
  {
    "text": "that I did. Having made the individual\nfunctions, we were able to test them individually because\nthey were modules.",
    "start": "3728020",
    "end": "3735670"
  },
  {
    "text": "Having made these individual\nstate machines, we'll be able to test them individually\nbecause they're modules.",
    "start": "3735670",
    "end": "3742319"
  },
  {
    "text": "Then at the end we'll be able to\npaste them all together and get a very complicated\nbehavior-- much more complicated than you\nwould expect from the sum of",
    "start": "3742320",
    "end": "3749980"
  },
  {
    "text": "the three programming\nactivities. That's what we want. That's how we want to\nstructure things. We want to be able to combine\nsimple things and get",
    "start": "3749980",
    "end": "3757470"
  },
  {
    "text": "something that seems more\npowerful than the linear combination, because it is. ",
    "start": "3757470",
    "end": "3764440"
  },
  {
    "text": "Okay, so that's the goal. To do that, we're going to\ninvent some new Python structures.",
    "start": "3764440",
    "end": "3769609"
  },
  {
    "text": "And we're going to think about\nthe representation of the state machine in Python and\nwe will use objects.",
    "start": "3769610",
    "end": "3779050"
  },
  {
    "text": "In fact, we use objects\nat three levels. We'll think about the highest\nlevel of abstraction of this",
    "start": "3779050",
    "end": "3786200"
  },
  {
    "text": "problem as a state machine. So there's going to be\nstate machine class.",
    "start": "3786200",
    "end": "3791490"
  },
  {
    "text": "The state machine class is going\nto have all the things in it that all state machines\nhave to know about.",
    "start": "3791490",
    "end": "3798100"
  },
  {
    "text": "All state machines, as we define\nthem, are going to have to know how to start, how to\nmake one step, and how to",
    "start": "3798100",
    "end": "3808300"
  },
  {
    "text": "combine single steps into a\nsequence of steps-- and we'll call that operation\nof transduction.",
    "start": "3808300",
    "end": "3814490"
  },
  {
    "text": "So if you give me a list of\ninputs, transduce will make a list of outputs.",
    "start": "3814490",
    "end": "3821120"
  },
  {
    "text": "So all state machines are\ngoing to be able to-- all state machines are going to\nhave to know how to start,",
    "start": "3821120",
    "end": "3826580"
  },
  {
    "text": "step, and transduce. Then for particular types\nof state machines--",
    "start": "3826580",
    "end": "3832390"
  },
  {
    "text": "like the turnstile, we will\ngenerate a subclass. ",
    "start": "3832390",
    "end": "3838960"
  },
  {
    "text": "The subclass of turnstiles are\ngoing to have to know-- all of those are going to have to\ndo some other things.",
    "start": "3838960",
    "end": "3845280"
  },
  {
    "text": "All turnstiles are going to have\nto have a rule for what happens when you're in state\nA and you get input i--",
    "start": "3845280",
    "end": "3853250"
  },
  {
    "text": "what should you do? Well there's going to be a\ngeneral pattern that all turnstiles will subscribe to.",
    "start": "3853250",
    "end": "3860380"
  },
  {
    "text": "We'll put those in the\nsubclass, turnstile. Then individual turnstiles.",
    "start": "3860380",
    "end": "3868450"
  },
  {
    "text": "The first one in the Kendall\nstop, the second one in the Kendall stop, the first one in\nthe Central stop, the third one in the Harvard stop--",
    "start": "3868450",
    "end": "3874820"
  },
  {
    "text": "particular turnstiles\nwill be instances of the turnstile class.",
    "start": "3874820",
    "end": "3880390"
  },
  {
    "text": "So the way this plays out, we'll\nhave a generic state machine class defined here.",
    "start": "3880390",
    "end": "3887500"
  },
  {
    "text": "The state machine class will\nhave a method, start. Start will create the instance\nvariable, state.",
    "start": "3887500",
    "end": "3896240"
  },
  {
    "text": "Every instance of a turnstile\nhas to remember where it is, that's an instance variable.",
    "start": "3896240",
    "end": "3902510"
  },
  {
    "text": "That instance variable gets\ncreated by the start routine. So the very first thing you do\nif you want to talk about a",
    "start": "3902510",
    "end": "3907890"
  },
  {
    "text": "new turnstile, is you have to\ninstantiate the turnstile. Then you have to make\nan instance--",
    "start": "3907890",
    "end": "3914579"
  },
  {
    "text": "and you do that by\ncalling start. Every state machine has to\nhave a start routine.",
    "start": "3914580",
    "end": "3920160"
  },
  {
    "text": "Every start routine will do\nthis-- it'll create an instance variable.",
    "start": "3920160",
    "end": "3926940"
  },
  {
    "text": "Every state machine has to\nknow how to take a step. We will make a generic method\ncalled, getNextValues, which",
    "start": "3926940",
    "end": "3938100"
  },
  {
    "text": "will include all of the rules\nfor how the class turnstile",
    "start": "3938100",
    "end": "3944980"
  },
  {
    "text": "generates a new output, and a\nnew state from the implant.",
    "start": "3944980",
    "end": "3952020"
  },
  {
    "text": "And every subclass of state\nmachine will have to define",
    "start": "3952020",
    "end": "3957180"
  },
  {
    "text": "what one of those looks like. The important thing here is that\nevery state machine has",
    "start": "3957180",
    "end": "3964369"
  },
  {
    "text": "to have a step routine, and\nthe way we've decided to implement the step routine is\nto call the getNextValues,",
    "start": "3964370",
    "end": "3971830"
  },
  {
    "text": "that is particular to the\nsubclass of interest. So for example, the\ngetNextValues for a turnstile,",
    "start": "3971830",
    "end": "3978390"
  },
  {
    "text": "might be different from the\ngetNextValues for a planner or a for a mapper.",
    "start": "3978390",
    "end": "3983960"
  },
  {
    "text": " Then we will subclass state\nmachine according to the kind",
    "start": "3983960",
    "end": "3993970"
  },
  {
    "text": "of state machine we're making. A planner, a mapper, a\nmover, a turnstile.",
    "start": "3993970",
    "end": "4000380"
  },
  {
    "text": "So a turnstile will be a class,\nwhich is a subclass of state machine, and that's where\nwe'll define how do you",
    "start": "4000380",
    "end": "4007170"
  },
  {
    "text": "do getNextValues. If you're a turnstile, here's\nthe way you ought to do",
    "start": "4007170",
    "end": "4012869"
  },
  {
    "text": "getNextValues. When I call getNextValues, I'll\ntell you your current",
    "start": "4012870",
    "end": "4017990"
  },
  {
    "text": "state and the current input, and\nfrom those two you ought to be able to figure out the\nnext state and the output.",
    "start": "4017990",
    "end": "4027070"
  },
  {
    "text": "So the getNextValues method for\nthe turnstile class ought",
    "start": "4027070",
    "end": "4035610"
  },
  {
    "text": "to take state and input-- the input, and the current\nstate, and it generates a",
    "start": "4035610",
    "end": "4042069"
  },
  {
    "text": "tuple, which is the new\nstate and the output.",
    "start": "4042070",
    "end": "4049480"
  },
  {
    "text": "And this is the rule by\nwhich it happens. All turnstiles also have\nthe same start state.",
    "start": "4049480",
    "end": "4057420"
  },
  {
    "text": "So if you look back again at\nstate machine, state machine created the instance\nvariable, state, by",
    "start": "4057420",
    "end": "4064470"
  },
  {
    "text": "looking at start's state. All turnstiles have the\nsame start state,",
    "start": "4064470",
    "end": "4071260"
  },
  {
    "text": "they all start locked. And then finally, the way we'll\nuse this, is we will",
    "start": "4071260",
    "end": "4078280"
  },
  {
    "text": "instantiate a turnstile, we\nwill make an instance of turnstile, put it into TS,\nturnstile, so this could be",
    "start": "4078280",
    "end": "4086690"
  },
  {
    "text": "Central Square 16,\nfor example. And then that instance, we'll\nbe able to do things like",
    "start": "4086690",
    "end": "4093869"
  },
  {
    "text": "start, step, and transduce. So if I transduced this the\ninput, none, coin, none, turn,",
    "start": "4093870",
    "end": "4102189"
  },
  {
    "text": "turn, coin, coin, on a\nparticular turnstile, I'll generate some sequence\nof outputs like so.",
    "start": "4102189",
    "end": "4108930"
  },
  {
    "text": " So that's a complicated example\nusing turnstiles.",
    "start": "4108930",
    "end": "4114250"
  },
  {
    "text": "Let me do something simpler\njust to make sure you get the idea. Let's think about a simpler\nclass, a subclass of state",
    "start": "4114250",
    "end": "4121299"
  },
  {
    "text": "machines, a subclass\ncalled accumulator. That subclass always has a start\nstate of 0, and has a",
    "start": "4121300",
    "end": "4130939"
  },
  {
    "text": "getNextValues that returns the\nsame value for the next state and for the output.",
    "start": "4130939",
    "end": "4137040"
  },
  {
    "text": "It always adds the current\nstate to the input-- hence the name accumulator. It accumulates the input by\ntaking the current state,",
    "start": "4137040",
    "end": "4147159"
  },
  {
    "text": "adding the currently input\nto generate a new state-- that's just like\na bank account.",
    "start": "4147160",
    "end": "4153270"
  },
  {
    "text": "The bank account would\naccumulate transactions.",
    "start": "4153270",
    "end": "4158830"
  },
  {
    "text": "So if the input to the\naccumulator is 7, then the",
    "start": "4158830",
    "end": "4165210"
  },
  {
    "text": "state gets incremented by 7, and\nthe output is the value of the new state.",
    "start": "4165210",
    "end": "4170330"
  },
  {
    "text": "So that's what this says, the\nstarting state is always 0, the getNextValues always returns\nfor this new state--",
    "start": "4170330",
    "end": "4176910"
  },
  {
    "text": "state plus input, and for the\ncurrent output, the same thing as the current state.",
    "start": "4176910",
    "end": "4183399"
  },
  {
    "text": "Everybody's clear? ",
    "start": "4183399",
    "end": "4188500"
  },
  {
    "text": "So the question is, what would\nhappen if I did this sequence of operations?",
    "start": "4188500",
    "end": "4193689"
  },
  {
    "text": "Let's say that I have the state\nmachine class, I have the accumulator subclass.",
    "start": "4193689",
    "end": "4199220"
  },
  {
    "text": "I make an instance A, I do some\nstuff to A, I make an instance B. I do some stuff\nto B, I do some stuff to",
    "start": "4199220",
    "end": "4205960"
  },
  {
    "text": "A, and I type this. What gets printed? ",
    "start": "4205960",
    "end": "4211239"
  },
  {
    "text": "Take 30 seconds, talk to your\nneighbor, figure out what the answer is. [AUDIENCE DISCUSSION]",
    "start": "4211240",
    "end": "4378030"
  },
  {
    "text": "PROFESSOR: OK.  What will get printed by\nthe print statement?",
    "start": "4378030",
    "end": "4384620"
  },
  {
    "text": "Answer (1), (2), (3),\n(4), or (5). Everybody raise your hand\nwith an answer.",
    "start": "4384620",
    "end": "4390752"
  },
  {
    "text": "Excellent, excellent,\nalmost 100%. I don't think I see a\nsingle wrong answer.",
    "start": "4390752",
    "end": "4396820"
  },
  {
    "text": "So everybody seems\nto be saying (2). (2), OK, so what's going on?",
    "start": "4396820",
    "end": "4403490"
  },
  {
    "text": "So A is an accumulator, we\nstart it, we step it. B is an accumulator, we start\nit, we step it, we step.",
    "start": "4403490",
    "end": "4409739"
  },
  {
    "text": "So what is going to be A,\nhow did you get five? Well, A started at 0 that's\nwhat the start",
    "start": "4409740",
    "end": "4416460"
  },
  {
    "text": "method does, right? Stepping it stepped it to 7.",
    "start": "4416460",
    "end": "4422750"
  },
  {
    "text": "B made a new one, we can ignore\nthat because it's a separate instance.",
    "start": "4422750",
    "end": "4428690"
  },
  {
    "text": "The idea is that the state is\nassociated with the instance. So when we perturb the state of\nB by doing B.step, we are",
    "start": "4428690",
    "end": "4438250"
  },
  {
    "text": "touching the state of A-- because they're instance\nvariables. So that means when we\ndecrement it, we're",
    "start": "4438250",
    "end": "4444050"
  },
  {
    "text": "decrementing the 7 to get 5.  OK, seems reasonable.",
    "start": "4444050",
    "end": "4449720"
  },
  {
    "text": "So the answer is either\n(1), or (2), or none.  Why is it the same (21, 21) (21,\n21), when we called the",
    "start": "4449720",
    "end": "4460510"
  },
  {
    "text": "A.getNextValues, and here we're\ncalling the B. Why are",
    "start": "4460510",
    "end": "4466469"
  },
  {
    "text": "they the same?  AUDIENCE: Because it sets\nthe state [INAUDIBLE].",
    "start": "4466470",
    "end": "4472910"
  },
  {
    "text": "PROFESSOR: So getNextValues\nis a pure function.",
    "start": "4472910",
    "end": "4478540"
  },
  {
    "text": "So it gets passed in the state,\nthe first number is the",
    "start": "4478540",
    "end": "4483900"
  },
  {
    "text": "state, the second number\nis the input. So it doesn't pay any attention\nto the instance",
    "start": "4483900",
    "end": "4490780"
  },
  {
    "text": "variable state, it uses the\nthing they got passed in.",
    "start": "4490780",
    "end": "4495869"
  },
  {
    "text": "Furthermore, the getNextValues\nassociated with A, is precisely the same as the\ngetNextValues associated with",
    "start": "4495870",
    "end": "4502429"
  },
  {
    "text": "B, because getNextValues is\nsomething that's in the",
    "start": "4502430",
    "end": "4508240"
  },
  {
    "text": "accumulator subclass. So they're exactly the same\nbecause it's the same method.",
    "start": "4508240",
    "end": "4513980"
  },
  {
    "text": "So what should be in your\nhead, is a picture that looks like this.",
    "start": "4513980",
    "end": "4519160"
  },
  {
    "text": "When we said create a state\nmachine, that was something we put in our library, and that\nmakes this environment.",
    "start": "4519160",
    "end": "4528190"
  },
  {
    "text": "When we said subclass of state\nmachine to make accumulator,",
    "start": "4528190",
    "end": "4534300"
  },
  {
    "text": "that made a new class,\na new environment. And then when we made A and\nB by saying that A equals",
    "start": "4534300",
    "end": "4542890"
  },
  {
    "text": "accumulator, and B equals accumulator, that made instances. The instances were initially\nempty, but when I say A.start,",
    "start": "4542890",
    "end": "4550909"
  },
  {
    "text": "that created the state variable\nin the A instance, and in the B instance, and\nassociated values with them.",
    "start": "4550910",
    "end": "4558630"
  },
  {
    "text": "So with the picture that you're\nsupposed to have in mind, is that there's an\nenvironment associated with state machine.",
    "start": "4558630",
    "end": "4565579"
  },
  {
    "text": "There's a separate environment\nassociated with accumulator, but just one of those.",
    "start": "4565580",
    "end": "4572730"
  },
  {
    "text": "But there's two instances. So there's two sets of instance\nvariables, one associated with A and B. So\nthe answer was number (2).",
    "start": "4572730",
    "end": "4582420"
  },
  {
    "text": "Now the robot example was\nsupposed to motivate this idea that what we're going to do\nwith state machines is put",
    "start": "4582420",
    "end": "4588690"
  },
  {
    "text": "them together modularly. So what we're going to do-- and\nyou start to do that this",
    "start": "4588690",
    "end": "4594140"
  },
  {
    "text": "week, and also continuing into\nnext week, we'll figure out how to compose state machine\nM1 and M2 in a cascade.",
    "start": "4594140",
    "end": "4602349"
  },
  {
    "text": "That means the output of the\nfirst one becomes the input to the second one.",
    "start": "4602350",
    "end": "4607739"
  },
  {
    "text": "We'll put things together in\nparallel, we'll put things together with feedback. So what we'll do, is we'll\nfigure out operators.",
    "start": "4607740",
    "end": "4615140"
  },
  {
    "text": "PCAP-- primitives, means\nof combination, abstraction, patterns. The primitives are going to be\nthe state machines, the ways",
    "start": "4615140",
    "end": "4622719"
  },
  {
    "text": "we combine them are going to be\nthese kinds of structures. Cascade them, put them in\nparallel, that kind of stuff.",
    "start": "4622720",
    "end": "4630140"
  },
  {
    "text": "And that's going to allow us to\nmake complicated brains out of simple ones.",
    "start": "4630140",
    "end": "4635400"
  },
  {
    "text": "Here's a very simple example,\nwhat if I had a state machine A, which is an accumulator,\nso A is an instance of",
    "start": "4635400",
    "end": "4641710"
  },
  {
    "text": "accumulator. B is an instance of accumulator,\nthere's two separate instances.",
    "start": "4641710",
    "end": "4646880"
  },
  {
    "text": "And C is a new state composed\nby cascading A and B. What",
    "start": "4646880",
    "end": "4656100"
  },
  {
    "text": "would happen if I typed out\nC.transduce so ([7, 3, 4])? ",
    "start": "4656100",
    "end": "4664960"
  },
  {
    "text": "What's the answer to C.transduce\n([7,3,4])? [AUDIENCE DISCUSSION]",
    "start": "4664960",
    "end": "4722469"
  },
  {
    "text": "PROFESSOR: So what happens\nwhen I transduce C? Well C is a composition of A\nand B. In particular, it's",
    "start": "4722470",
    "end": "4732280"
  },
  {
    "text": "this composition. C is just the cascade of A into\nB. What that means is",
    "start": "4732280",
    "end": "4738980"
  },
  {
    "text": "that if I put some sequence of\ninputs into the first machine, and if I put some sequence of\nthe inputs into C, it's the",
    "start": "4738980",
    "end": "4746340"
  },
  {
    "text": "same as putting it into A. The output of the composite\nmachine is the output of B.",
    "start": "4746340",
    "end": "4754440"
  },
  {
    "text": "And the input to B is the same\nas the output of A. So the ([7,3,4]) goes through A, which\nis an accumulator, and",
    "start": "4754440",
    "end": "4762040"
  },
  {
    "text": "comes out [7, 10, 14]. It accumulates, that's\nwhat accumulators do.",
    "start": "4762040",
    "end": "4768820"
  },
  {
    "text": "That clear? Then [7, 10, 14] goes into B and comes\nout [7, 17, 31].",
    "start": "4768820",
    "end": "4774175"
  },
  {
    "text": " So C, which is the cascade of\ntwo accumulators, ends up",
    "start": "4774175",
    "end": "4782170"
  },
  {
    "text": "transforming [7, 3, 4] into [7, 17, 31]. ",
    "start": "4782170",
    "end": "4789690"
  },
  {
    "text": "So that's the idea for how\nwe're going to compose complicated behaviors out of\nsimple ones, and that's what",
    "start": "4789690",
    "end": "4797590"
  },
  {
    "text": "the assignment is\nfor this week. ",
    "start": "4797590",
    "end": "4808085"
  }
]