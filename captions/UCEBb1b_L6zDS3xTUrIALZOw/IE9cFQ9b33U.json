[
  {
    "start": "0",
    "end": "80000"
  },
  {
    "text": "In this lecture, we're going to use the circuit\npipelining techniques we learned in Part 1",
    "start": "1280",
    "end": "5540"
  },
  {
    "text": "of the course to improve the performance of\nthe 32-bit Beta CPU design we developed in",
    "start": "5540",
    "end": "10660"
  },
  {
    "text": "Part 2 of the course.",
    "start": "10660",
    "end": "11999"
  },
  {
    "text": "This CPU design executes one Beta instruction\nper clock cycle.",
    "start": "11999",
    "end": "16560"
  },
  {
    "text": "Hopefully you remember the design!",
    "start": "16560",
    "end": "18570"
  },
  {
    "text": "If not, you might find it worthwhile to review\nLecture 13, Building the Beta, from Part 2.",
    "start": "18570",
    "end": "25289"
  },
  {
    "text": "At the beginning of the clock cycle, this\ncircuit loads a new value into the program",
    "start": "25290",
    "end": "28950"
  },
  {
    "text": "counter, which is then sent to main memory\nas the address of the instruction to be executed",
    "start": "28950",
    "end": "33969"
  },
  {
    "text": "this cycle.",
    "start": "33969",
    "end": "35730"
  },
  {
    "text": "When the 32-bit word containing the binary\nencoding of the instruction is returned by",
    "start": "35730",
    "end": "39730"
  },
  {
    "text": "the memory, the opcode field is decoded by\nthe control logic to determine the control",
    "start": "39730",
    "end": "44739"
  },
  {
    "text": "signals for the rest of the data path.",
    "start": "44739",
    "end": "47780"
  },
  {
    "text": "The operands are read from the register file\nand routed to the ALU to perform the desired",
    "start": "47780",
    "end": "52570"
  },
  {
    "text": "operation.",
    "start": "52570",
    "end": "53839"
  },
  {
    "text": "For memory operations, the output of the ALU\nserves as the memory address and, in the case",
    "start": "53839",
    "end": "58300"
  },
  {
    "text": "of load instructions, the main memory supplies\nthe data to be written into the register file",
    "start": "58300",
    "end": "62749"
  },
  {
    "text": "at the end of the cycle.",
    "start": "62749",
    "end": "64408"
  },
  {
    "text": "PC+4 and ALU values can also be written to\nthe register file.",
    "start": "64409",
    "end": "69640"
  },
  {
    "text": "The clock period of the Beta is determined\nby the cumulative delay through all the components",
    "start": "69640",
    "end": "74390"
  },
  {
    "text": "involved in instruction execution.",
    "start": "74390",
    "end": "76329"
  },
  {
    "text": "Today's question is: how can we make this\nfaster?",
    "start": "76329",
    "end": "80210"
  },
  {
    "start": "80000",
    "end": "80000"
  },
  {
    "text": "We can characterize the time spent executing\na program as the product of three terms.",
    "start": "80210",
    "end": "85360"
  },
  {
    "text": "The first term is the total number of instructions\nexecuted.",
    "start": "85360",
    "end": "88280"
  },
  {
    "text": "Since the program usually contains loops and\nprocedure calls, many of the encoded instructions",
    "start": "88280",
    "end": "93890"
  },
  {
    "text": "will be executed many times.",
    "start": "93890",
    "end": "96390"
  },
  {
    "text": "We want the total count of instructions executed,\nnot the static size of the program as measured",
    "start": "96390",
    "end": "101229"
  },
  {
    "text": "by the number of encoded instructions in memory.",
    "start": "101229",
    "end": "104590"
  },
  {
    "text": "The second term is the average number of clock\ncycles it takes to execute a single instruction.",
    "start": "104590",
    "end": "110229"
  },
  {
    "text": "And the third term is the duration of a single\nclock cycle.",
    "start": "110229",
    "end": "115130"
  },
  {
    "text": "As CPU designers it's the last two terms which\nare under our control: the cycles per instruction",
    "start": "115130",
    "end": "121108"
  },
  {
    "text": "(CPI) and the clock period (t_CLK).",
    "start": "121109",
    "end": "123960"
  },
  {
    "text": "To affect the first term, we would need to\nchange the ISA or write a better compiler!",
    "start": "123960",
    "end": "130250"
  },
  {
    "text": "Our design for the Beta was able to execute\nevery instruction in a single clock cycle,",
    "start": "130250",
    "end": "135420"
  },
  {
    "text": "so our CPI is 1.",
    "start": "135420",
    "end": "137950"
  },
  {
    "text": "As we discussed in the previous slide, t_CLK\nis determined by the longest path through",
    "start": "137950",
    "end": "142129"
  },
  {
    "text": "the Beta circuitry.",
    "start": "142129",
    "end": "143480"
  },
  {
    "text": "For example, consider the execution of an\nOP-class instruction, which involves two register",
    "start": "143480",
    "end": "148940"
  },
  {
    "text": "operands and an ALU operation.",
    "start": "148940",
    "end": "151990"
  },
  {
    "text": "The arrow shows all the components that are\ninvolved in the execution of the instruction.",
    "start": "151990",
    "end": "157049"
  },
  {
    "text": "Aside from a few muxes, the main memory, register\nfile, and ALU must all have time to do their",
    "start": "157049",
    "end": "164920"
  },
  {
    "text": "thing.",
    "start": "164920",
    "end": "165920"
  },
  {
    "text": "The worst-case execution time is for the LD\ninstruction.",
    "start": "165920",
    "end": "170110"
  },
  {
    "text": "In one clock cycle we need to fetch the instruction\nfrom main memory (t_IFETCH),",
    "start": "170110",
    "end": "174370"
  },
  {
    "text": "read the operands from the register file (t_RF),\nperform the address addition in the ALU (t_ALU),",
    "start": "174370",
    "end": "179680"
  },
  {
    "text": "read the requested location from main memory\n(t_MEM),",
    "start": "179680",
    "end": "182459"
  },
  {
    "text": "and finally write the memory data to the destination\nregister (t_WB).",
    "start": "182459",
    "end": "187599"
  },
  {
    "text": "The component delays add up and the result\nis a fairly long clock period and hence it",
    "start": "187599",
    "end": "192870"
  },
  {
    "text": "will take a long time to run the program.",
    "start": "192870",
    "end": "196040"
  },
  {
    "text": "And our two example execution paths illustrate\nanother issue:",
    "start": "196040",
    "end": "199730"
  },
  {
    "text": "we're forced to choose the clock period to\naccommodate the worst-case execution time,",
    "start": "199730",
    "end": "204799"
  },
  {
    "text": "even though we may be able to execute some\ninstructions faster since their execution",
    "start": "204799",
    "end": "209659"
  },
  {
    "text": "path through the circuitry is shorter.",
    "start": "209659",
    "end": "212980"
  },
  {
    "text": "We're making all the instructions slower just\nbecause there's one instruction that has a",
    "start": "212980",
    "end": "216879"
  },
  {
    "text": "long critical path.",
    "start": "216879",
    "end": "218680"
  },
  {
    "text": "So why not have simple instructions execute\nin one clock cycle and more complex instructions",
    "start": "218680",
    "end": "224659"
  },
  {
    "text": "take multiple cycles instead of forcing all\ninstructions to execute in a single, long",
    "start": "224659",
    "end": "229550"
  },
  {
    "text": "clock cycle?",
    "start": "229550",
    "end": "230849"
  },
  {
    "text": "As we'll see in the next few slides, we have\na good answer to this question, one that will",
    "start": "230849",
    "end": "235420"
  },
  {
    "text": "allow us to execute *all* instructions with\na short clock period.",
    "start": "235420",
    "end": "239689"
  },
  {
    "text": "We're going to use pipelining to address these\nissues.",
    "start": "239689",
    "end": "242769"
  },
  {
    "start": "240000",
    "end": "240000"
  },
  {
    "text": "We're going to divide the execution of an\ninstruction into a sequence of steps, where",
    "start": "242769",
    "end": "246980"
  },
  {
    "text": "each step is performed in successive stages\nof the pipeline.",
    "start": "246980",
    "end": "250870"
  },
  {
    "text": "So it will take multiple clock cycles to execute\nan instruction as it travels through the stages",
    "start": "250870",
    "end": "255659"
  },
  {
    "text": "of the execution pipeline.",
    "start": "255659",
    "end": "257889"
  },
  {
    "text": "But since there are only one or two components\nin each stage of the pipeline, the clock period",
    "start": "257890",
    "end": "262690"
  },
  {
    "text": "can be much shorter and the throughput of\nthe CPU can be much higher.",
    "start": "262690",
    "end": "267710"
  },
  {
    "text": "The increased throughput is the result of\noverlapping the execution of consecutive instructions.",
    "start": "267710",
    "end": "274220"
  },
  {
    "text": "At any given time, there will be multiple\ninstructions in the CPU, each at a different",
    "start": "274220",
    "end": "278400"
  },
  {
    "text": "stage of its execution.",
    "start": "278400",
    "end": "280949"
  },
  {
    "text": "The time to execute all the steps for a particular\ninstruction (i.e., the instruction latency)",
    "start": "280950",
    "end": "287130"
  },
  {
    "text": "may be somewhat higher than in our unpipelined\nimplementation.",
    "start": "287130",
    "end": "290729"
  },
  {
    "text": "But we will finish the last step of executing\nsome instruction in each clock cycle, so the",
    "start": "290729",
    "end": "295979"
  },
  {
    "text": "instruction throughput is 1 per clock cycle.",
    "start": "295979",
    "end": "299080"
  },
  {
    "text": "And since the clock cycle of our pipelined\nCPU is quite a bit shorter, the instruction",
    "start": "299080",
    "end": "303229"
  },
  {
    "text": "throughput is quite a bit higher.",
    "start": "303230",
    "end": "306199"
  },
  {
    "text": "All this sounds great, but, not surprisingly,\nthere are few issues we'll have to deal with.",
    "start": "306199",
    "end": "311470"
  },
  {
    "text": "There are many ways to pipeline the execution\nof an instruction.",
    "start": "311470",
    "end": "315580"
  },
  {
    "text": "We're going to look at the design of the classic\n5-stage instruction execution pipeline, which",
    "start": "315580",
    "end": "320710"
  },
  {
    "text": "was widely used in the integrated circuit\nCPU designs of the 1980's.",
    "start": "320710",
    "end": "326560"
  },
  {
    "text": "The 5 pipeline stages correspond to the steps\nof executing an instruction in a von-Neumann",
    "start": "326560",
    "end": "331860"
  },
  {
    "text": "stored-program architecture.",
    "start": "331860",
    "end": "334030"
  },
  {
    "text": "The first stage (IF) is responsible for fetching\nthe binary-encoded instruction from the main",
    "start": "334030",
    "end": "338889"
  },
  {
    "text": "memory location indicated by the program counter.",
    "start": "338890",
    "end": "342340"
  },
  {
    "text": "The 32-bit instruction is passed to the register\nfile stage (RF) where the required register",
    "start": "342340",
    "end": "348030"
  },
  {
    "text": "operands are read from the register file.",
    "start": "348030",
    "end": "351289"
  },
  {
    "text": "The operand values are passed to the ALU stage\n(ALU), which performs the requested operation.",
    "start": "351289",
    "end": "359580"
  },
  {
    "text": "The memory stage (MEM) performs the second\naccess to main memory to read or write the",
    "start": "359580",
    "end": "365539"
  },
  {
    "text": "data for LD, LDR, or ST instructions, using\nthe value from the ALU stage as the memory",
    "start": "365539",
    "end": "371490"
  },
  {
    "text": "address.",
    "start": "371490",
    "end": "373240"
  },
  {
    "text": "For load instructions, the output of the MEM\nstage is the read data from main memory.",
    "start": "373240",
    "end": "378710"
  },
  {
    "text": "For all other instructions, the output of\nthe MEM stage is simply the value from the",
    "start": "378710",
    "end": "382550"
  },
  {
    "text": "ALU stage.",
    "start": "382550",
    "end": "384629"
  },
  {
    "text": "In the final write-back stage (WB), the result\nfrom the earlier stages is written to the",
    "start": "384630",
    "end": "389830"
  },
  {
    "text": "destination register in the register file.",
    "start": "389830",
    "end": "393030"
  },
  {
    "text": "Looking at the execution path from the previous\nslide, we see that each of the main components",
    "start": "393030",
    "end": "397240"
  },
  {
    "text": "of the unpipelined design is now in its own\npipeline stage.",
    "start": "397240",
    "end": "401800"
  },
  {
    "text": "So the clock period will now be determined\nby the slowest of these components.",
    "start": "401800",
    "end": "407849"
  },
  {
    "text": "Having divided instruction execution into\nfive stages, would we expect the clock period",
    "start": "407849",
    "end": "412889"
  },
  {
    "text": "to be one fifth of its original value?",
    "start": "412889",
    "end": "415830"
  },
  {
    "text": "Well, that would only happen if we were able\nto divide the execution so that each stage",
    "start": "415830",
    "end": "420439"
  },
  {
    "text": "performed exactly one fifth of the total work.",
    "start": "420440",
    "end": "423720"
  },
  {
    "text": "In real life, the major components have somewhat\ndifferent latencies, so the improvement in",
    "start": "423720",
    "end": "428110"
  },
  {
    "text": "instruction throughput will be a little less\nthan the factor of 5 a perfect 5-stage pipeline",
    "start": "428110",
    "end": "433288"
  },
  {
    "text": "could achieve.",
    "start": "433289",
    "end": "435490"
  },
  {
    "text": "If we have a slow component, e.g., the ALU,\nwe might choose to pipeline that component",
    "start": "435490",
    "end": "441340"
  },
  {
    "text": "into further stages, or, interleave multiple\nALUs to achieve the same effect.",
    "start": "441340",
    "end": "446870"
  },
  {
    "text": "But for this lecture, we'll go with the 5-stage\npipeline described above.",
    "start": "446870",
    "end": "451810"
  },
  {
    "text": "So why isn't this a 20-minute lecture?",
    "start": "451810",
    "end": "454699"
  },
  {
    "start": "452000",
    "end": "452000"
  },
  {
    "text": "After all we know how pipeline combinational\ncircuits:",
    "start": "454699",
    "end": "457650"
  },
  {
    "text": "We can build a valid k-stage pipeline by drawing\nk contours across the circuit diagram and",
    "start": "457650",
    "end": "463350"
  },
  {
    "text": "adding a pipeline register wherever a contour\ncrosses a signal.",
    "start": "463350",
    "end": "467270"
  },
  {
    "text": "What's the big deal here?",
    "start": "467270",
    "end": "469270"
  },
  {
    "text": "Well, is this circuit combinational?",
    "start": "469270",
    "end": "471500"
  },
  {
    "text": "No!",
    "start": "471500",
    "end": "472500"
  },
  {
    "text": "There's state in the registers and memories.",
    "start": "472500",
    "end": "475270"
  },
  {
    "text": "This means that the result of executing a\ngiven instruction may depend on the results",
    "start": "475270",
    "end": "479319"
  },
  {
    "text": "from earlier instructions.",
    "start": "479319",
    "end": "481610"
  },
  {
    "text": "There are loops in the circuit where data\nfrom later pipeline stages affects the execution",
    "start": "481610",
    "end": "486189"
  },
  {
    "text": "of earlier pipeline stages.",
    "start": "486190",
    "end": "488389"
  },
  {
    "text": "For example, the write to the register file\nat the end of the WB stage will change values",
    "start": "488389",
    "end": "493629"
  },
  {
    "text": "read from the register file in the RF stage.",
    "start": "493629",
    "end": "496240"
  },
  {
    "text": "In other words, there are execution dependencies\nbetween instructions and these dependencies",
    "start": "496240",
    "end": "501979"
  },
  {
    "text": "will need to be taken into account when we're\ntrying to pipeline instruction execution.",
    "start": "501979",
    "end": "507419"
  },
  {
    "text": "We'll be addressing these issues as we examine\nthe operation of our execution pipeline.",
    "start": "507419",
    "end": "513700"
  },
  {
    "text": "Sometimes execution of a given instruction\nwill depend on the results of executing a",
    "start": "513700",
    "end": "517710"
  },
  {
    "start": "514000",
    "end": "514000"
  },
  {
    "text": "previous instruction.",
    "start": "517710",
    "end": "519010"
  },
  {
    "text": "Two are two types of problematic dependencies.",
    "start": "519010",
    "end": "523010"
  },
  {
    "text": "The first, termed a data hazard, occurs when\nthe execution of the current instruction depends",
    "start": "523010",
    "end": "527970"
  },
  {
    "text": "on data produced by an earlier instruction.",
    "start": "527970",
    "end": "530279"
  },
  {
    "text": "For example, an instruction that reads R0\nwill depend on the execution of an earlier",
    "start": "530280",
    "end": "536230"
  },
  {
    "text": "instruction that wrote R0.",
    "start": "536230",
    "end": "538250"
  },
  {
    "text": "The second, termed a control hazard, occurs\nwhen a branch, jump, or exception changes",
    "start": "538250",
    "end": "542920"
  },
  {
    "text": "the order of execution.",
    "start": "542920",
    "end": "544850"
  },
  {
    "text": "For example, the choice of which instruction\nto execute after a BNE depends on whether",
    "start": "544850",
    "end": "549610"
  },
  {
    "text": "the branch is taken or not.",
    "start": "549610",
    "end": "553410"
  },
  {
    "text": "Instruction execution triggers a hazard when\nthe instruction on which it depends is also",
    "start": "553410",
    "end": "558500"
  },
  {
    "text": "in the pipeline, i.e., the earlier instruction\nhasn't finished execution!",
    "start": "558500",
    "end": "563680"
  },
  {
    "text": "We'll need to adjust execution in our pipeline\nto avoid these hazards.",
    "start": "563680",
    "end": "568920"
  },
  {
    "text": "Here's our plan of attack:\nWe'll start by designing a 5-stage pipeline",
    "start": "568920",
    "end": "573160"
  },
  {
    "text": "that works with sequences of instructions\nthat don't trigger hazards, i.e., where instruction",
    "start": "573160",
    "end": "578440"
  },
  {
    "text": "execution doesn't depend on earlier instructions\nstill in the pipeline.",
    "start": "578440",
    "end": "583340"
  },
  {
    "text": "Then we'll fix our pipeline to deal correctly\nwith data hazards.",
    "start": "583340",
    "end": "587220"
  },
  {
    "text": "And finally, we'll address control hazards.",
    "start": "587220",
    "end": "589250"
  }
]