[
  {
    "start": "0",
    "end": "60000"
  },
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "6422"
  },
  {
    "start": "6422",
    "end": "13360"
  },
  {
    "text": "JASON KU: Welcome to our\nfourth problem session. We're going to be talking about\nbinary trees mostly, today.",
    "start": "13360",
    "end": "21460"
  },
  {
    "text": "We'll talk a little bit\nabout binary heaps, which is a topic we won't\ncover until next Tuesday,",
    "start": "21460",
    "end": "27650"
  },
  {
    "text": "but it will appear\nin very small ways",
    "start": "27650",
    "end": "32710"
  },
  {
    "text": "on your problem set 4, which\nwill be due next Friday. So I'm going to go over a little\nbit of that material today.",
    "start": "32710",
    "end": "40660"
  },
  {
    "text": "But it's mostly concerning-- the subject material for\ntoday is mostly binary trees,",
    "start": "40660",
    "end": "48880"
  },
  {
    "text": "specifically, being applied\nto set data structures and sequence data structures,\nas Professor Demaine talked",
    "start": "48880",
    "end": "57400"
  },
  {
    "text": "to you earlier this week. But for now-- actually,\nas of yesterday--",
    "start": "57400",
    "end": "66100"
  },
  {
    "start": "60000",
    "end": "430000"
  },
  {
    "text": "you've seen all of the data\nstructures that we're going to cover to-- that will implement the set\ninterface and the sequence",
    "start": "66100",
    "end": "73179"
  },
  {
    "text": "interface. Those nice tables that Professor\nDemaine has been showing you,",
    "start": "73180",
    "end": "81160"
  },
  {
    "text": "those are now complete. We have some data\nstructures that are really good-- constant time\noperations for some operations.",
    "start": "81160",
    "end": "88930"
  },
  {
    "text": "So we might use them\nfor some applications. And this week, we've\nbeen describing",
    "start": "88930",
    "end": "96520"
  },
  {
    "text": "to you trees, which\nachieve, really, pretty good, for any type of\nquery operation on my sets",
    "start": "96520",
    "end": "103660"
  },
  {
    "text": "or sequences-- pretty good meaning logarithmic\ntime, not quite constant. But for our purposes, log n is--",
    "start": "103660",
    "end": "111895"
  },
  {
    "text": "I mean, on your\ncomputer, practically-- not asymptotically,\nbut practically-- log n is going to be at most\nwhat on your computer?",
    "start": "111895",
    "end": "120430"
  },
  {
    "text": " Something like 64, right?",
    "start": "120430",
    "end": "127030"
  },
  {
    "text": "Any input that you're operating\non with, in machine words, is your input.",
    "start": "127030",
    "end": "134000"
  },
  {
    "text": "You need to be able to\naddress all those machine words in your input. And on your computer, the size\nof your machine word addresses",
    "start": "134000",
    "end": "142840"
  },
  {
    "text": "is 64 bits, right? And we assume that the\nword size is at least log the size of your input so\nthat you can address the input.",
    "start": "142840",
    "end": "153700"
  },
  {
    "text": "So for your purposes,\non your computer, log n is going to\nbe no more than 64,",
    "start": "153700",
    "end": "159099"
  },
  {
    "text": "which means you would get\nmaybe a 50 times overhead, or for smaller instances,\nit could be more like 10,",
    "start": "159100",
    "end": "165670"
  },
  {
    "text": "if you've got 1,000 things\nthat you're working on. It's not that bad, right? It's a constant-- it's not\na constant factor for theory",
    "start": "165670",
    "end": "173739"
  },
  {
    "text": "purposes, but for your purposes,\nlog n is much better than a polynomial factor--",
    "start": "173740",
    "end": "179980"
  },
  {
    "text": "another factor of n. You've seen all of the code.",
    "start": "179980",
    "end": "185800"
  },
  {
    "text": "You've seen implementations of\nall of these set and sequence interfaces, right? So I went ahead and\nwrote a little--",
    "start": "185800",
    "end": "192550"
  },
  {
    "text": "I compiled all of that code\nfrom your recitation notes, of all of the different\ninterface implementations.",
    "start": "192550",
    "end": "198610"
  },
  {
    "text": "And what I did was, I\nwrote a little test program to see how they ran\non a real machine.",
    "start": "198610",
    "end": "205960"
  },
  {
    "text": "I have a little test code here. I have a little folder that\nlists an array implementing",
    "start": "205960",
    "end": "215410"
  },
  {
    "text": "a sequence, a binary\ntree implementing a sequence, a dynamic\narray implementing-- all of these kinds of things.",
    "start": "215410",
    "end": "221170"
  },
  {
    "text": "Then set things-- a sorted array\nbeing a set in a binary tree, and a hash table.",
    "start": "221170",
    "end": "226600"
  },
  {
    "text": "These are our implementations. I'm not using Python\ndictionaries for hash tables, I'm using the implementations\nthat are in your recitation.",
    "start": "226600",
    "end": "235330"
  },
  {
    "text": "And I'm going to\nrun this little test efficiency Python code\nthat basically is just going to free each one.",
    "start": "235330",
    "end": "240550"
  },
  {
    "text": "It's going to do a bunch of\nthese different operations and measure to see\nhow much time it took.",
    "start": "240550",
    "end": "245650"
  },
  {
    "text": "I'm just logging how\nmuch time it took. It's not an asymptotic\nanalysis, but hopefully, we",
    "start": "245650",
    "end": "251380"
  },
  {
    "text": "see some separation. So when you press that,\nit runs a bunch of tests.",
    "start": "251380",
    "end": "256390"
  },
  {
    "text": "Let's take a look. OK. I've got a bunch of\nsequence operations.",
    "start": "256390",
    "end": "263660"
  },
  {
    "text": "We've got build, set_at,\nget-at, insert, delete, at the various places.",
    "start": "263660",
    "end": "270880"
  },
  {
    "text": "And these are the actual\ntimings to some scale--",
    "start": "270880",
    "end": "276250"
  },
  {
    "text": "to some resolution that I had\nfor these data structures. And you can see build--",
    "start": "276250",
    "end": "281680"
  },
  {
    "text": "actually, build,\non this machine, just allocating some\narray and clearing it, is a really efficient thing that\nPython is going to do for me.",
    "start": "281680",
    "end": "289849"
  },
  {
    "text": "And so that's actually-- it's\nmislabelling that as log n. But these other things,\nget_at and set_at--",
    "start": "289850",
    "end": "297970"
  },
  {
    "text": "really, really fast, right? That's constant time. And then these other\nthings, I essentially can't do better than\nloop through the thing,",
    "start": "297970",
    "end": "305020"
  },
  {
    "text": "and so it takes linear time. And again, sequence stuff,\nsetting_at and getting_at",
    "start": "305020",
    "end": "311500"
  },
  {
    "text": "is slow, but deleting and\nremoving from the first thing, I'm just re-linking\nthe pointer, right?",
    "start": "311500",
    "end": "317800"
  },
  {
    "text": "Dynamic arrays. Again, set_at, get_at is\nfast, because it's just",
    "start": "317800",
    "end": "323440"
  },
  {
    "text": "regular arrays. And then inserting-\nand deleting-last, that's getting,\nessentially, constant time.",
    "start": "323440",
    "end": "330010"
  },
  {
    "text": "Now, I'm actually-- when I'm\nrunning these tests to deal with averages, I'm\nactually running these things, a lot of times,\nand testing their performance.",
    "start": "330010",
    "end": "336979"
  },
  {
    "text": "And so I'm not seeing the\nworst case happen here, right? I'm averaging over all\nof the things, which",
    "start": "336980",
    "end": "343420"
  },
  {
    "text": "is exactly what\namortization means. That's why I'm getting\ngood performance here.",
    "start": "343420",
    "end": "350560"
  },
  {
    "text": "A hash table. Again, really--\noh, so this is what",
    "start": "350560",
    "end": "356710"
  },
  {
    "text": "we talked about\nin problem session last week, implementing\nkind of a double-ended queue",
    "start": "356710",
    "end": "364180"
  },
  {
    "text": "with a hash table. This is that implementation. I just wanted to show it to you. But it's actually pretty good.",
    "start": "364180",
    "end": "370460"
  },
  {
    "text": "This is what JavaScript\nuses for arrays. And then a binary sequence\nrepresented as a binary tree--",
    "start": "370460",
    "end": "379240"
  },
  {
    "text": "a balanced binary tree. This is our AVL code that I had. And all of the other things\nhave been really pretty bad",
    "start": "379240",
    "end": "385720"
  },
  {
    "text": "at insert_at and\ndelete_at, but this one does comparable to all\nof the other things. Now, you see these are a\nlittle bit more machine",
    "start": "385720",
    "end": "394060"
  },
  {
    "text": "cycles than the other things,\nbut not so bad, actually.",
    "start": "394060",
    "end": "399230"
  },
  {
    "text": "And then, on the\nset side of things, again, we had a sorted array.",
    "start": "399230",
    "end": "404419"
  },
  {
    "text": "Sorry, this is a\nset from an array. Basically, it's\nan unsorted array. I'm just looking for all of the\nthings-- that's very bad times.",
    "start": "404420",
    "end": "412480"
  },
  {
    "text": "Sorted array does these\nfind operations great, but inserting and\ndeleting is poor.",
    "start": "412480",
    "end": "418040"
  },
  {
    "text": "That's why we need binary trees. Hash tables get good dictionary\noperations, but really",
    "start": "418040",
    "end": "425080"
  },
  {
    "text": "bad order operations. And then the binary search\ntree, a set binary tree, again,",
    "start": "425080",
    "end": "433990"
  },
  {
    "start": "430000",
    "end": "540000"
  },
  {
    "text": "does quite good on\nall of these things. In fact, it's getting\nreally quite good--",
    "start": "433990",
    "end": "440449"
  },
  {
    "text": "it's getting better,\nfor some reason, than the sorted array even did.",
    "start": "440450",
    "end": "446199"
  },
  {
    "text": "I don't know why. Our implementations are\nnot optimized at all. But it does pretty\nwell asymptotically.",
    "start": "446200",
    "end": "451890"
  },
  {
    "text": "Yeah? AUDIENCE: Could\nyou explain again why the first data\ntreasury [INAUDIBLE] log n?",
    "start": "451890",
    "end": "458470"
  },
  {
    "text": "JASON KU: This is just\nlabeled based off the timings. It happens to be that,\nprobably, there's",
    "start": "458470",
    "end": "463930"
  },
  {
    "text": "a C intrinsic underneath Python\nthat allocates this thing, and so it does it really fast.",
    "start": "463930",
    "end": "469060"
  },
  {
    "text": "My program that's\nlooking at these numbers and trying to guess what the\nasymptotic running time is,",
    "start": "469060",
    "end": "474350"
  },
  {
    "text": "these are just labels based\non these things, ranges. I just-- it's mischaracterized. AUDIENCE: [INAUDIBLE]",
    "start": "474350",
    "end": "481605"
  },
  {
    "text": "JASON KU: Yeah. Well, I mean, in actuality,\nif it was C code--",
    "start": "481605",
    "end": "486940"
  },
  {
    "text": "if all of this stuff\nwas in C, probably, we would see that bar be\nlonger, because it's actually",
    "start": "486940",
    "end": "492820"
  },
  {
    "text": "having to go through and\ntouch all of that memory. It's still doing that here,\nbut all of the Python stuff",
    "start": "492820",
    "end": "498250"
  },
  {
    "text": "is super crufty. It's, like, 100 times slower\nthan anything that C does. And so you're seeing\nthat disparity.",
    "start": "498250",
    "end": "506729"
  },
  {
    "text": "Does that make sense? OK. I just wanted to show you that. We might release this for\nyou to play around with,",
    "start": "506730",
    "end": "513849"
  },
  {
    "text": "but just wanted to give\nyou a taste of that. OK, any questions\nbefore we move on?",
    "start": "513850",
    "end": "521010"
  },
  {
    "text": "How do I turn this off? Up, and off.",
    "start": "521010",
    "end": "526960"
  },
  {
    "text": "Shut down.  Yes.",
    "start": "526960",
    "end": "532780"
  },
  {
    "text": "OK. ",
    "start": "532780",
    "end": "538440"
  },
  {
    "text": "Moving on to problems--\nworking some problems. You have your set\nof problems here.",
    "start": "538440",
    "end": "544660"
  },
  {
    "start": "540000",
    "end": "720000"
  },
  {
    "text": "The first one is, we're going\nto look at a sequence AVL tree. This is a sequence AVL tree.",
    "start": "544660",
    "end": "550649"
  },
  {
    "text": "How do I know that?  You don't, necessarily.",
    "start": "550650",
    "end": "556760"
  },
  {
    "text": "But these things\nare certainly not in sorted order of the things\nI'm storing in them, Yeah?",
    "start": "556760",
    "end": "563450"
  },
  {
    "text": "So it had better not\nbe a set AVL tree. Is it an AVL tree? Is it balanced--\nheight balanced?",
    "start": "563450",
    "end": "570510"
  },
  {
    "text": "Yeah, basically. Actually, if you compute\nthe size of each subtree,",
    "start": "570510",
    "end": "576810"
  },
  {
    "text": "the left and right subtrees\non all of these-- you can confirm for\nyourself-- are balanced. They're within plus or\nminus 1 of each other.",
    "start": "576810",
    "end": "583950"
  },
  {
    "text": "Actually, this is about\nas far away from balanced as you could get\nfor this many nodes",
    "start": "583950",
    "end": "590550"
  },
  {
    "text": "while still maintaining\nheight balance-- maintaining AVL\nproperty-- which is why this is an instructive example.",
    "start": "590550",
    "end": "596040"
  },
  {
    "text": "It's kind of at the limit. And what am I going to do?",
    "start": "596040",
    "end": "602370"
  },
  {
    "text": "What's missing in this\npicture if I'm claiming this is a sequence AVL tree?",
    "start": "602370",
    "end": "608790"
  },
  {
    "text": "Any ideas what's missing? What does the sequence AVL\ntree store that I'm not",
    "start": "608790",
    "end": "614699"
  },
  {
    "text": "showing in this picture? AUDIENCE: Counts. JASON KU: What? AUDIENCE: Counts. JASON KU: Counts. And? ",
    "start": "614700",
    "end": "622520"
  },
  {
    "text": "It's a sequence AVL tree. Heights, right? Sequence AVL trees,\ndifferent than set AVL trees,",
    "start": "622520",
    "end": "629470"
  },
  {
    "text": "are augmented by\ntwo things, right? Because I need to be\nmaintaining balance during",
    "start": "629470",
    "end": "634690"
  },
  {
    "text": "rotations, and so I\nneed to store heights. I need to be able to tell what\nthe heights of these subtrees are in constant time\nwhen I'm walking up",
    "start": "634690",
    "end": "641440"
  },
  {
    "text": "the tree, fixing things. And the sequence requires me\nto store their subtree numbers",
    "start": "641440",
    "end": "647440"
  },
  {
    "text": "there. I don't know-- I'm\nnot going to draw it for all of these things, but\nhow about for number four?",
    "start": "647440",
    "end": "655270"
  },
  {
    "text": "What's its height?  1, 2, 3.",
    "start": "655270",
    "end": "660839"
  },
  {
    "text": "That's the longest path from\nthe root subtree of that. So this is height equals 3.",
    "start": "660840",
    "end": "669210"
  },
  {
    "text": "That came from height equals\n2 and height equals 1. Does everyone see that?",
    "start": "669210",
    "end": "675000"
  },
  {
    "text": "Yeah? And then the size\nhere, how big is that? That's 1, 2, 3, 4, 5, 6, 7.",
    "start": "675000",
    "end": "682440"
  },
  {
    "text": "This is-- I'm going to\nput size equals 7 here. And that's coming from\nthis guy, 1, 2, 3, 4.",
    "start": "682440",
    "end": "691770"
  },
  {
    "text": "And this guy is 2.  So how do I compute\nthe subtree size?",
    "start": "691770",
    "end": "699700"
  },
  {
    "text": "It's my left subtree size plus\nmy right subtree size plus 1. And my height is taking\nthe max of the 2 plus 1.",
    "start": "699700",
    "end": "707100"
  },
  {
    "text": "All right. So we did all that yesterday. I'm just labeling these things.",
    "start": "707100",
    "end": "712860"
  },
  {
    "text": "And what I'm asking of you is\nto perform a delete operation.",
    "start": "712860",
    "end": "719730"
  },
  {
    "text": "This is a sequence tree. So I'm finding things by\ntheir index in the tree.",
    "start": "719730",
    "end": "726190"
  },
  {
    "start": "720000",
    "end": "910000"
  },
  {
    "text": "So I'm going to ask you\nto delete the eighth thing in my sequence. What is the 8th\nthing in my sequence?",
    "start": "726190",
    "end": "734769"
  },
  {
    "text": "Yeah? AUDIENCE: Just to clarify,\nsince delete-8 is not delete the number. JASON KU: Correct. Well, delete_at 8.",
    "start": "734770",
    "end": "741360"
  },
  {
    "text": "Do you see that? It's a sequence operation. AUDIENCE: Oh, OK. [INAUDIBLE] JASON KU: Yeah. So this is very\nimportant, that you",
    "start": "741360",
    "end": "747160"
  },
  {
    "text": "differentiate between\nsequence and set semantics. If I'm dealing\nwith the sequence, I had better not be\nlooking up intrinsic things",
    "start": "747160",
    "end": "755440"
  },
  {
    "text": "on this data structure, because\nit's not an intrinsic data structure. It doesn't support that. If I wanted to support find,\nsay, the index of key 8,",
    "start": "755440",
    "end": "766870"
  },
  {
    "text": "or something like that,\nthen all I could do is-- it's similar to an array.",
    "start": "766870",
    "end": "771993"
  },
  {
    "text": "I would just have to loop\nthrough the whole sequence and tell me if the\nthing is in it. Can't really do better\nthan linear time.",
    "start": "771993",
    "end": "778165"
  },
  {
    "text": "This data structure is\nnot designed for that. What is it designed for? It's designed to find things\nby their index in the sequence.",
    "start": "778165",
    "end": "785139"
  },
  {
    "text": "So how do I find the 8th index?",
    "start": "785140",
    "end": "792130"
  },
  {
    "text": "Well, I mean, I'm\nlooking at the tree, and I can just count\nalong in-order traversal.",
    "start": "792130",
    "end": "797140"
  },
  {
    "text": "What's the in-order traversal? 0, 1, 2, 3, 4, 5, 6, 7.",
    "start": "797140",
    "end": "804850"
  },
  {
    "text": "OK, found 8. But what does a\nsequence AVL tree do? ",
    "start": "804850",
    "end": "812620"
  },
  {
    "text": "I'm storing subtree\nsizes, and when I'm here, I don't know what index I'm at.",
    "start": "812620",
    "end": "818110"
  },
  {
    "text": "How can I find out what\nindex I'm at from the root? I look at my left subtree,\nsee how many it is.",
    "start": "818110",
    "end": "824980"
  },
  {
    "text": "There are seven things here. 1, 2, 3, 4, 5, 6, 7.",
    "start": "824980",
    "end": "832910"
  },
  {
    "text": "Yeah. Because I'm looking for\nthe 9th item by index 8. This is saying that\nI'm the 8th item.",
    "start": "832910",
    "end": "841060"
  },
  {
    "text": "I'm the guy at index 7. Does that make sense? Because I'm looking at\nthe subtree size here.",
    "start": "841060",
    "end": "847310"
  },
  {
    "text": "So what do I know? I know that the index that I'm\nlooking for is to my right.",
    "start": "847310",
    "end": "853240"
  },
  {
    "text": "I go down over here\nand I happen to know-- what index am I looking\nfor in this subtree?",
    "start": "853240",
    "end": "863470"
  },
  {
    "text": "0, right? I want the first\nthing in the subtree. My search index has changed\nnow, because I essentially dealt",
    "start": "863470",
    "end": "872380"
  },
  {
    "text": "with all of those eight items. Here, I'm looking for the\n0th thing in my index.",
    "start": "872380",
    "end": "878990"
  },
  {
    "text": "I look to my left-- if I didn't have a left subtree,\nI would be the 0th thing, and I would return me.",
    "start": "878990",
    "end": "885010"
  },
  {
    "text": "But there is stuff in here. So I'm looking for the 0th thing\nin here, which is just him,",
    "start": "885010",
    "end": "891850"
  },
  {
    "text": "and I return it. And actually, what I'm\ndoing is, I'm deleting it.",
    "start": "891850",
    "end": "896890"
  },
  {
    "text": "So I delete it. Yuck.",
    "start": "896890",
    "end": "902610"
  },
  {
    "text": "What's the problem here? AUDIENCE: [INAUDIBLE] JASON KU: Not height balanced.",
    "start": "902610",
    "end": "907920"
  },
  {
    "text": "What's not height balanced here? AUDIENCE: The left subtree is-- or, sorry.",
    "start": "907920",
    "end": "913150"
  },
  {
    "text": "[INAUDIBLE] JASON KU: This guy is not\nheight balanced, right? AUDIENCE: --right subtree\nof the right [INAUDIBLE].. JASON KU: This guy's subtree\nis not height balanced, right?",
    "start": "913150",
    "end": "919558"
  },
  {
    "text": "This guy's 2. This guy's 1. So how do we fix it? AUDIENCE: Rotate.",
    "start": "919558",
    "end": "925740"
  },
  {
    "text": "JASON KU: We do some rotations. This is actually\nthe bad case that-- the third bad case that\nwe talked about yesterday.",
    "start": "925740",
    "end": "933569"
  },
  {
    "text": "If I tried to just\nleft-rotate this guy, what would it look like? It would put 12 here.",
    "start": "933570",
    "end": "940740"
  },
  {
    "text": "It would put 10 here. And 8 would be attached to that. Now it's height balanced wrong\nin the other direction, right?",
    "start": "940740",
    "end": "948089"
  },
  {
    "text": "That's no good. So the way to handle\nthis case, where",
    "start": "948090",
    "end": "953490"
  },
  {
    "text": "I am badly skewed to the\nright but my right subtree",
    "start": "953490",
    "end": "959100"
  },
  {
    "text": "is skewed to the left, I\nhave to do a rotation here, right rotation, and\nthen do a rotation.",
    "start": "959100",
    "end": "966810"
  },
  {
    "text": "That's the formula. Here, we first do\na right rotation at 10, which gives me something\nthat looks like 8, 10.",
    "start": "966810",
    "end": "981440"
  },
  {
    "start": "980000",
    "end": "1175000"
  },
  {
    "text": "Now, obviously, this is not\nbetter than what was before, but it was an intermediate\nstep so that we can fix it.",
    "start": "981440",
    "end": "988750"
  },
  {
    "text": "We right-rotate here and\nthen we left-rotate here. The default is that we\nwould left-rotate here,",
    "start": "988750",
    "end": "994290"
  },
  {
    "text": "but because this had the\nskew in the wrong direction, I need to right-rotate this one\nfirst and then we can do it.",
    "start": "994290",
    "end": "1001390"
  },
  {
    "text": "So now I rotate\nall of these guys over and put 12 down\nhere, 8 here, 10 here.",
    "start": "1001390",
    "end": "1010005"
  },
  {
    "text": " Everyone see that that's\nwhat a rotation looks like?",
    "start": "1010005",
    "end": "1016700"
  },
  {
    "text": "OK. It takes a little while to get\nyour mind wrapped around what the transformation is, but\nhopefully, you guys all",
    "start": "1016700",
    "end": "1022970"
  },
  {
    "text": "followed that transformation. There was a little magic\nwhile I was trying to draw. Yeah? AUDIENCE: I still don't\nfeel like this tree is",
    "start": "1022970",
    "end": "1028500"
  },
  {
    "text": "height balanced. JASON KU: It's not. Good observation. Why is that?",
    "start": "1028500",
    "end": "1033890"
  },
  {
    "text": "This thing still has height 3. What is the height\nof this thing? 1, right?",
    "start": "1033890",
    "end": "1039020"
  },
  {
    "text": "This is height 1. And actually, when I\nwas doing that rotation, I needed to update all\nof these augmentations.",
    "start": "1039020",
    "end": "1047318"
  },
  {
    "text": "Which augmentations\ndid I really need to-- which subtrees have\nchanged during those things? ",
    "start": "1047318",
    "end": "1056380"
  },
  {
    "text": "I don't remember what\nthe thing looked like. What did the thing look like?",
    "start": "1056380",
    "end": "1061780"
  },
  {
    "text": "10 had 8 in its subtree, so\nits subtree definitely changed.",
    "start": "1061780",
    "end": "1066860"
  },
  {
    "text": "8's subtree changed. AUDIENCE: [INAUDIBLE] JASON KU: 12 didn't change-- eventually. AUDIENCE: These are\n10 and 8 [INAUDIBLE]..",
    "start": "1066860",
    "end": "1074498"
  },
  {
    "text": "JASON KU: OK. So there's the case analysis\nthat's in your lecture notes and was done in recitation.",
    "start": "1074498",
    "end": "1080050"
  },
  {
    "text": "It tells you that\nthese A, B, C, D kind of subtress,\nthe ones that could",
    "start": "1080050",
    "end": "1086860"
  },
  {
    "text": "change in these things,\nthose subtrees don't change. The only subtree that\nchanged during one",
    "start": "1086860",
    "end": "1092290"
  },
  {
    "text": "of these fix operations, when\nyou do one or two rotations, is either two nodes\nor three nodes",
    "start": "1092290",
    "end": "1098860"
  },
  {
    "text": "whose subtree has changed. Here, it could have been the\ncase that three subtrees have",
    "start": "1098860",
    "end": "1103900"
  },
  {
    "text": "changed. But in the easy case, only\ntwo nodes-- x and y, I think,",
    "start": "1103900",
    "end": "1109780"
  },
  {
    "text": "in the notes-- could have changed. And so when I do that, I have\nto recompute their augmentations",
    "start": "1109780",
    "end": "1116710"
  },
  {
    "text": "from their augmentations\nof their children, but it's only a constant\nnumber of those,",
    "start": "1116710",
    "end": "1122110"
  },
  {
    "text": "so I just recompute them,\nbecause the subtrees below me haven't changed.",
    "start": "1122110",
    "end": "1127430"
  },
  {
    "text": "OK. So we have a height\nmismatch here. Yeah? AUDIENCE: [INAUDIBLE] ",
    "start": "1127430",
    "end": "1136743"
  },
  {
    "text": "JASON KU: Right. So, originally,\nin the picture, 12 has a bunch of things\nin its subtree--",
    "start": "1136743",
    "end": "1144010"
  },
  {
    "text": "10 and 8, and we just deleted 7. So its subtree\ndefinitely changed.",
    "start": "1144010",
    "end": "1149850"
  },
  {
    "text": "There used to be three-- AUDIENCE: [INAUDIBLE] JASON KU: Oh, no, sorry, it did. Yeah. So here, three node\nsubtrees have changed.",
    "start": "1149850",
    "end": "1158040"
  },
  {
    "text": "But that's actually the most. I'm showing you the worst case.",
    "start": "1158040",
    "end": "1163620"
  },
  {
    "text": "Only three nodes\npossible in doing one of these\ndouble-rotation things could have changed\ntheir subtrees.",
    "start": "1163620",
    "end": "1169559"
  },
  {
    "text": "And so we just have to fix the\naugmentation of those three things. In the easy case,\nit's just two things.",
    "start": "1169560",
    "end": "1176880"
  },
  {
    "start": "1175000",
    "end": "1310000"
  },
  {
    "text": "All right. We have unbalanced. How can we fix this? ",
    "start": "1176880",
    "end": "1183520"
  },
  {
    "text": "I could have been mean. I want to be able to\nright-rotate here,",
    "start": "1183520",
    "end": "1189070"
  },
  {
    "text": "to re-balance I could have been\nmean and switched these two.",
    "start": "1189070",
    "end": "1194139"
  },
  {
    "text": "If I switched those\ntwo, then I would have to do two rotations\nto fix this thing, because the middle one is\nheavier than the left one",
    "start": "1194140",
    "end": "1201039"
  },
  {
    "text": "against what I'm doing. But I'm not that mean, so\nI'm going to right-rotate.",
    "start": "1201040",
    "end": "1209140"
  },
  {
    "text": "How do I do that? Well, a right-rotate\nat 6 is going to bring all of\nthis down below 4",
    "start": "1209140",
    "end": "1216940"
  },
  {
    "text": "and stick this subtree\nas the left child of 6. Does that makes sense? Yuck.",
    "start": "1216940",
    "end": "1222438"
  },
  {
    "text": "That's going to be fun to draw. ",
    "start": "1222438",
    "end": "1228100"
  },
  {
    "text": "I'm just going to redraw it. That makes more sense, right? 4, 11, 3, 2, 1, and\nthen 6, 5, 9, 8, 12, 10.",
    "start": "1228100",
    "end": "1254020"
  },
  {
    "text": "That's the right rotation at 6. Is everyone cool with this?",
    "start": "1254020",
    "end": "1260520"
  },
  {
    "text": "The rotation-- my\nx is 6, my y is 4. I have A, B, C subtrees.",
    "start": "1260520",
    "end": "1269400"
  },
  {
    "text": "What I'm doing is kind of\nswitching which of x and y is the root here.",
    "start": "1269400",
    "end": "1275610"
  },
  {
    "text": "So now y is the root, and B\nand C subtrees here now become",
    "start": "1275610",
    "end": "1283080"
  },
  {
    "text": "the children of x underneath y. And notice that, hopefully,\nthrough all of that process,",
    "start": "1283080",
    "end": "1289110"
  },
  {
    "text": "my in-order traversal\nhas not changed. We had to update our\naugmentations along the way,",
    "start": "1289110",
    "end": "1295600"
  },
  {
    "text": "but it's a constant every\ntime we walk up the tree. And we walk up the tree only\na logarithmic number of times.",
    "start": "1295600",
    "end": "1301510"
  },
  {
    "text": "Yeah? Yes. AUDIENCE: [INAUDIBLE]. So every time we do a\nrotation, do you just",
    "start": "1301510",
    "end": "1306778"
  },
  {
    "text": "update the augmentation\nvia the [INAUDIBLE] before we do any other rotation? JASON KU: Exactly. AUDIENCE: The second part. Updating the\naugmentation just means",
    "start": "1306778",
    "end": "1313870"
  },
  {
    "start": "1310000",
    "end": "1390000"
  },
  {
    "text": "updating the count, and\nthe height, and just, the properties that stay-- JASON KU: Yeah.",
    "start": "1313870",
    "end": "1319135"
  },
  {
    "text": "Basically what we\ndid, we defined-- when we augmented-- Professor Demaine\nyesterday defined for you",
    "start": "1319135",
    "end": "1324610"
  },
  {
    "text": "what a subtree property is. It meant a property\nthat I can compute only",
    "start": "1324610",
    "end": "1330490"
  },
  {
    "text": "by looking at my children-- the augmentations of my\nchildren, recursively.",
    "start": "1330490",
    "end": "1336250"
  },
  {
    "text": "So here, instead of\ntrying to increment or try to think about, locally, what\nthis augmentation should be,",
    "start": "1336250",
    "end": "1344440"
  },
  {
    "text": "I'm going to throw away\nmy old augmentation and just recompute\nit from my children, because those, recursively,\nhad better be correct.",
    "start": "1344440",
    "end": "1351905"
  },
  {
    "text": "Does that make sense? Yeah? AUDIENCE: So just looking\nat how the rotation works. I'm having trouble\nwrapping my head around.",
    "start": "1351905",
    "end": "1358420"
  },
  {
    "text": "So basically, you're swapping\n4 and 6, and that way, 4 becomes the parent node\nand 6 becomes the right node.",
    "start": "1358420",
    "end": "1367390"
  },
  {
    "text": "JASON KU: I'm going\nto draw this picture. It's just something\nyou've got to memorize. ",
    "start": "1367390",
    "end": "1375420"
  },
  {
    "text": "This is x, B, C, and A.\nCan you see that picture?",
    "start": "1375420",
    "end": "1385640"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] JASON KU: What? AUDIENCE: [INAUDIBLE] JASON KU: Yeah. It's in your notes.",
    "start": "1385640",
    "end": "1391090"
  },
  {
    "start": "1390000",
    "end": "1625000"
  },
  {
    "text": "It's not a big deal. But if you've got\nthis structure, where x has a left child--",
    "start": "1391090",
    "end": "1399010"
  },
  {
    "text": "and these subtrees\nmay be empty or not. Doesn't really matter. What I can do is, I can\nmove from here to there--",
    "start": "1399010",
    "end": "1405490"
  },
  {
    "text": "has the same in-order\ntraversal order,",
    "start": "1405490",
    "end": "1410780"
  },
  {
    "text": "but it's got a different shape. And in particular,\nsubtree heights have changed, which means it\ncan help us re-balance the tree.",
    "start": "1410780",
    "end": "1417740"
  },
  {
    "text": "And that's the\nwhole point of AVL. Does that make sense? AUDIENCE: That's\nthe right rotation?",
    "start": "1417740",
    "end": "1423320"
  },
  {
    "text": "JASON KU: This one is-- this is a right rotation. This is a left rotation.",
    "start": "1423320",
    "end": "1428960"
  },
  {
    "text": "Any other questions? Yeah? AUDIENCE: [INAUDIBLE]",
    "start": "1428960",
    "end": "1434776"
  },
  {
    "text": " JASON KU: As I'm\nwalking up the tree,",
    "start": "1434776",
    "end": "1440510"
  },
  {
    "text": "every node I might have\nto fix with a re-balance, but that re-balance does\nat most two rotations,",
    "start": "1440510",
    "end": "1447289"
  },
  {
    "text": "and there is at most log\nn ancestors that I have, because my tree was\nheight balanced at 2",
    "start": "1447290",
    "end": "1456350"
  },
  {
    "text": "log n or something like that. Which means that,\nat max, I might",
    "start": "1456350",
    "end": "1461809"
  },
  {
    "text": "have to do four log n rotations,\nbecause each one could do two rotations.",
    "start": "1461810",
    "end": "1467310"
  },
  {
    "text": "Does that makes sense? Now, in actuality, you can prove\nthat, in a delete operation, it's possible that you have\nto do a logarithmic number",
    "start": "1467310",
    "end": "1474050"
  },
  {
    "text": "of these rotations up the tree. This was that bad case. The original tree I gave you\nis called a Fibonacci tree.",
    "start": "1474050",
    "end": "1480980"
  },
  {
    "text": "It's the few-- it's the\nhighest height balanced tree you can have on a\ngiven number of nodes.",
    "start": "1480980",
    "end": "1487385"
  },
  {
    "start": "1487385",
    "end": "1492620"
  },
  {
    "text": "Yeah, the fewest nodes\nfor a certain height. You can think of it either way. And if you generalize that\nto a large enough thing,",
    "start": "1492620",
    "end": "1499529"
  },
  {
    "text": "then that thing will\ntake a logarithmic number of rotations going up. Now, actually,\nwith an insertion,",
    "start": "1499530",
    "end": "1505070"
  },
  {
    "text": "you can actually prove-- you can\ngo through the case analysis. An insertion operation will\nalways re-balance the tree",
    "start": "1505070",
    "end": "1512090"
  },
  {
    "text": "after one re-balance\noperation, which could include two rotations. Does that makes sense?",
    "start": "1512090",
    "end": "1519350"
  },
  {
    "text": "Yeah? AUDIENCE: [INAUDIBLE] ",
    "start": "1519350",
    "end": "1527280"
  },
  {
    "text": "JASON KU: Yeah. Right rotation, this guy\nbecomes a right child. AUDIENCE: Yeah. So can you not-- are there\ncertain rotations that you",
    "start": "1527280",
    "end": "1533550"
  },
  {
    "text": "can't perform, depending on\nwhether you had a child-- JASON KU: Yeah. If I didn't have a left subtree,\ncan't perform a right rotation",
    "start": "1533550",
    "end": "1543070"
  },
  {
    "text": "there. A right rotation necessitates\nthat I have a left child. So if you're doing it--",
    "start": "1543070",
    "end": "1548520"
  },
  {
    "text": "and you'll see,\nour code actually checks to make sure\nyou have a left child. ",
    "start": "1548520",
    "end": "1557500"
  },
  {
    "text": "That's an assertion\nthat you might want to fire before you ever\ndo one of these rotations.",
    "start": "1557500",
    "end": "1562960"
  },
  {
    "text": "Anything else? Yeah? AUDIENCE: Just to\nreiterate, so an insertion may take two rotations\nat most [INAUDIBLE]??",
    "start": "1562960",
    "end": "1569096"
  },
  {
    "text": "JASON KU: Mhm. A constant number of\nrotations, and the deletion could take a logarithmic\nnumber of rotations.",
    "start": "1569097",
    "end": "1574540"
  },
  {
    "text": "Now, that's not something\nyou need to know. It's not something I'm\nproving here to you. Just something\nthat's interesting.",
    "start": "1574540",
    "end": "1581649"
  },
  {
    "text": "There are rebalancing\nschemes, like in CRS. They introduce a red-black\ntree to introduce balance.",
    "start": "1581650",
    "end": "1591310"
  },
  {
    "text": "And those trees actually\nhave a weaker bound on-- it's not as tightly\nbalanced as an AVL tree is.",
    "start": "1591310",
    "end": "1599680"
  },
  {
    "text": "It allows higher than skew 2. And because it's kind\nof a weaker restriction,",
    "start": "1599680",
    "end": "1606400"
  },
  {
    "text": "they get away with only doing a\nconstant number of rotations-- that they can afford that\nbefore they fix the tree.",
    "start": "1606400",
    "end": "1614559"
  },
  {
    "text": "But a little more complicated. AUDIENCE: [INAUDIBLE] ",
    "start": "1614560",
    "end": "1620457"
  },
  {
    "text": "JASON KU: Very nice. OK. Any questions on this? ",
    "start": "1620457",
    "end": "1626090"
  },
  {
    "start": "1625000",
    "end": "1650000"
  },
  {
    "text": "OK, so now, this is more of\na mechanical question you'll get on your problem sets.",
    "start": "1626090",
    "end": "1631750"
  },
  {
    "text": "And now we get more on to\nthe theory-type questions. These are going to be a\nreduction-type questions.",
    "start": "1631750",
    "end": "1639230"
  },
  {
    "text": "OK. This first problem, Fick Nury.",
    "start": "1639230",
    "end": "1645250"
  },
  {
    "text": "This is-- anyone? Nick Fury, right? So it's an Avengers reference.",
    "start": "1645250",
    "end": "1651280"
  },
  {
    "start": "1650000",
    "end": "3599000"
  },
  {
    "text": "So basically, what\nhappens in this thing, he's got a list of\nsuperheroes that each",
    "start": "1651280",
    "end": "1658210"
  },
  {
    "text": "have an opinion on whether\nthey should go fight Sanos. ",
    "start": "1658210",
    "end": "1663820"
  },
  {
    "text": "And their opinion can\nbe strongly positive",
    "start": "1663820",
    "end": "1669220"
  },
  {
    "text": "or strongly negative. And so what Fick\nis trying to do is",
    "start": "1669220",
    "end": "1674320"
  },
  {
    "text": "find, from among\nhis Revengers, what",
    "start": "1674320",
    "end": "1679960"
  },
  {
    "text": "the log n most extreme-opinion\nRevengers are so that he can talk to them.",
    "start": "1679960",
    "end": "1685888"
  },
  {
    "text": "He doesn't want to\ntalk to everybody. He wants to talk to a\nlogarithmic number of them. OK.",
    "start": "1685888",
    "end": "1691030"
  },
  {
    "text": "It's kind of-- whatever. Basically, we have a\nclassified situation",
    "start": "1691030",
    "end": "1698799"
  },
  {
    "text": "where you're given, as a\nread-only input data store of these things in an array.",
    "start": "1698800",
    "end": "1703980"
  },
  {
    "text": " And I want to find the log\nn ones with the strongest",
    "start": "1703980",
    "end": "1711975"
  },
  {
    "text": "opinions. Does that make sense? And I want to do it--\nand the first problem is in linear time.",
    "start": "1711975",
    "end": "1719440"
  },
  {
    "text": "You actually don't know\nhow to do this yet. You'll know how to do it with\nmaterial that you cover in--",
    "start": "1719440",
    "end": "1727810"
  },
  {
    "text": "well, they teach you\none way to do it in 046, but we're not going to\nget you there right now.",
    "start": "1727810",
    "end": "1733690"
  },
  {
    "text": "We'll teach you another\nway to do it on Tuesday,",
    "start": "1733690",
    "end": "1739399"
  },
  {
    "text": "which is via binary heaps. Binary heaps are an\ninteresting thing. It implements a subset\nof the set interface.",
    "start": "1739400",
    "end": "1754390"
  },
  {
    "text": "Really, it just-- you can\nbuild on some iterable x.",
    "start": "1754390",
    "end": "1763150"
  },
  {
    "text": "I collect a bunch of things. These items have keys. It's a key data structure\nin the same way.",
    "start": "1763150",
    "end": "1769090"
  },
  {
    "text": "It's implementing what we call\na priority queue interface. I can build these things. I can insert things, but I'm\nnot going to do that here.",
    "start": "1769090",
    "end": "1779380"
  },
  {
    "text": "All I really need here,\nfor this situation, is a delete_superlative\nkind of operation--",
    "start": "1779380",
    "end": "1787150"
  },
  {
    "text": "in this case, probably max. Delete_max. ",
    "start": "1787150",
    "end": "1797559"
  },
  {
    "text": "So this is like-- I've got a data structure,\nI'm calling these things. Does that makes sense?",
    "start": "1797560",
    "end": "1802630"
  },
  {
    "text": "Yeah? AUDIENCE: What's\na priority queue? JASON KU: Yes. A priority queue is\nessentially something that implements these two things.",
    "start": "1802630",
    "end": "1808450"
  },
  {
    "text": "Actually, there's a third one\nwhere I can insert a new thing, but I'm not going to\nneed that right now. So that's what a\npriority queue is.",
    "start": "1808450",
    "end": "1814738"
  },
  {
    "text": "And actually, a set-- this is a subset of\nthe set interface. Right?",
    "start": "1814738",
    "end": "1820300"
  },
  {
    "text": "The nice thing about a heap-- which, I won't to show\nyou how it's done, but what a heap can do--",
    "start": "1820300",
    "end": "1827380"
  },
  {
    "text": "if I had both of these\noperations implemented using a set AVL tree, how long\nwould these things take me?",
    "start": "1827380",
    "end": "1834520"
  },
  {
    "start": "1834520",
    "end": "1841430"
  },
  {
    "text": "How long does it take\nto build a set AVL tree? ",
    "start": "1841430",
    "end": "1846970"
  },
  {
    "text": "n log n, right? Because essentially, I'm\ngetting a sorted order out of this thing if I'm\ninserting these things",
    "start": "1846970",
    "end": "1853299"
  },
  {
    "text": "one at a time-- or I could sort them,\nand then put them in a tree in linear time,\nlike you saw a couple of days",
    "start": "1853300",
    "end": "1860500"
  },
  {
    "text": "ago in recitation. But I have to sort them\nat some point, right?",
    "start": "1860500",
    "end": "1865840"
  },
  {
    "text": "I'm kind of-- I need to take at\nleast n log n time, because if I'm going to be able\nto return their traversal order",
    "start": "1865840",
    "end": "1874120"
  },
  {
    "text": "in linear time, and I have\nthis lower bound of n log n on sorting, I kind of needed\nto spend n log n time here,",
    "start": "1874120",
    "end": "1881799"
  },
  {
    "text": "right? And how long would\nthis delete_max take? AUDIENCE: It's sorted, so log n.",
    "start": "1881800",
    "end": "1888632"
  },
  {
    "text": "JASON KU: Log n, right? So it's a set AVL tree. Where is my max? It's the right-most thing. I can just walk down\nthe thing, take it off.",
    "start": "1888632",
    "end": "1895520"
  },
  {
    "text": "Maybe I have to re-balance. But that's a log n operation. It's the same as\ninsert-last in my subtree.",
    "start": "1895520",
    "end": "1904400"
  },
  {
    "text": "For a set AVL tree,\nthis is n log n. This is log n. ",
    "start": "1904400",
    "end": "1910610"
  },
  {
    "text": "Now, there's another data\nstructure that does better for one of these operations. And the same for the other one\nthat we've learned earlier.",
    "start": "1910610",
    "end": "1921020"
  },
  {
    "text": "Anyone remember? Set AVL tree didn't\nactually give us anything over a sorted\narray in a dynamic array.",
    "start": "1921020",
    "end": "1931910"
  },
  {
    "text": "What that did was, we have a-- we could sort it in n log n time\nusing merge sort or something",
    "start": "1931910",
    "end": "1937730"
  },
  {
    "text": "like that. And then we could just pop\noff the last one n times. That would be an amortized--",
    "start": "1937730",
    "end": "1943790"
  },
  {
    "text": "I mean, if I didn't\ncare about taking up that size, I could do it, in\nworst case, constant time.",
    "start": "1943790",
    "end": "1949130"
  },
  {
    "text": "I just read off the\nfirst-- the last one. I don't need to resize\nthe array, ever. I can just ignore that.",
    "start": "1949130",
    "end": "1955940"
  },
  {
    "text": "Does that makes sense? OK. But that's-- OK. If I had a data structure\nthat implemented these two",
    "start": "1955940",
    "end": "1963230"
  },
  {
    "text": "operations, can someone\ntell me an algorithm",
    "start": "1963230",
    "end": "1969770"
  },
  {
    "text": "to generate fixed lists-- don't worry about running\ntime right now-- but that just uses these two operations?",
    "start": "1969770",
    "end": "1975800"
  },
  {
    "text": " Yeah? AUDIENCE: So we build\nthis data structure.",
    "start": "1975800",
    "end": "1983530"
  },
  {
    "text": "It's ordered from\nleast to greatest toward absolute value of x. JASON KU: Don't worry\nabout where things are",
    "start": "1983530",
    "end": "1991880"
  },
  {
    "text": "ordered or anything like that. I don't tell you how these\nthings are implemented, right? All I'm saying is, I can\naccept a bunch of these things,",
    "start": "1991880",
    "end": "2000330"
  },
  {
    "text": "and I can remove the\nmaximum and return it. OK? AUDIENCE: I think\nwe just build it--",
    "start": "2000330",
    "end": "2006830"
  },
  {
    "text": "make sure that you build it\nsuch that the opinion levels are the absolute value of\nthe opinion levels, not-- JASON KU: Sure.",
    "start": "2006830",
    "end": "2012060"
  },
  {
    "text": "OK. So that's a nice thing. What I'm going to do, as\nyour colleague is saying, is, I'm going to look through\nall of the things in my input.",
    "start": "2012060",
    "end": "2019830"
  },
  {
    "text": "I'm going to copy it over to\nsome writable memory store. That read-only thing is\nnot relevant to this part",
    "start": "2019830",
    "end": "2027150"
  },
  {
    "text": "of the problem. What I'm going to do is-- ",
    "start": "2027150",
    "end": "2036950"
  },
  {
    "text": "right. Sorry. I'm thinking about your\nproblem set that we're writing. I'm mixing it up. OK, so we copy it over to\nour new linear-sized array.",
    "start": "2036950",
    "end": "2049790"
  },
  {
    "text": "But instead of putting\ntheir values there, I'm going to put the absolute\nvalues of their values. Does that make sense? I just check if it's negative.",
    "start": "2049790",
    "end": "2055419"
  },
  {
    "text": "If it is, I put the\npositive thing there. OK? And then I stick that\narray in this build.",
    "start": "2055420",
    "end": "2063440"
  },
  {
    "text": "I put that there. That will take some--\nwhatever this build time is.",
    "start": "2063440",
    "end": "2069199"
  },
  {
    "text": "And then I can\ndelete max k times. Or I can delete max some number\nof times, however many things",
    "start": "2069199",
    "end": "2078169"
  },
  {
    "text": "that I need. Right? If I want log n highest things,\nI can just do that log n times,",
    "start": "2078170",
    "end": "2084050"
  },
  {
    "text": "right? So for this-- if I had\nsuch a data structure, I could do this in one\nrun of this operation",
    "start": "2084050",
    "end": "2091580"
  },
  {
    "text": "and log n runs of\nthis operation. Does that make sense? I could solve this\nproblem reducing",
    "start": "2091580",
    "end": "2097610"
  },
  {
    "text": "to this data structure. Now, for a sorted array\nor a set AVL tree,",
    "start": "2097610",
    "end": "2105980"
  },
  {
    "text": "this operation kind\nof kills me already. It takes n log n time. The nice thing\nabout a binary heap",
    "start": "2105980",
    "end": "2113359"
  },
  {
    "text": "is, it does this\noperation in linear time. ",
    "start": "2113360",
    "end": "2120060"
  },
  {
    "text": "You will see that on Tuesday. And it does this\noperation in log n time.",
    "start": "2120060",
    "end": "2126290"
  },
  {
    "text": " What's the running time\nif I use a binary heap",
    "start": "2126290",
    "end": "2134220"
  },
  {
    "text": "to implement this\ndata structure? Order of n times order\nlog n times log n.",
    "start": "2134220",
    "end": "2142020"
  },
  {
    "text": "How big is log n squared-- log squared n-- compared to n?",
    "start": "2142020",
    "end": "2148551"
  },
  {
    "text": "It's smaller, right? So if I add those two\nrunning times together, it's still linear.",
    "start": "2148551",
    "end": "2154260"
  },
  {
    "text": "That's how you solve\nthe first problem. I didn't have to tell you\nwhat a binary heap was",
    "start": "2154260",
    "end": "2159750"
  },
  {
    "text": "or how it did what it did. All I needed to\ntell you is that it did this operation\nin linear time and it did this\noperation log n time.",
    "start": "2159750",
    "end": "2165990"
  },
  {
    "text": " All right.",
    "start": "2165990",
    "end": "2171720"
  },
  {
    "text": "The magic will be shown\nto you on Tuesday. Part B says, now, suppose\nFick's computer is only",
    "start": "2171720",
    "end": "2179730"
  },
  {
    "text": "allowed to write to,\nat most, log n space. Well, OK. That's a problem here. Because before, we copied\nover the entire array,",
    "start": "2179730",
    "end": "2189570"
  },
  {
    "text": "filtered it out, and\nthen did some operations. But we couldn't even\nafford this if we",
    "start": "2189570",
    "end": "2195720"
  },
  {
    "text": "couldn't store the whole thing\nexternally in writable memory. So we can't do that.",
    "start": "2195720",
    "end": "2202090"
  },
  {
    "text": "So in some sense, this is a\nmore restrictive environment. I can do less things.",
    "start": "2202090",
    "end": "2209590"
  },
  {
    "text": "It's less powerful than my\nprevious situation, where I had as much space\nas I wanted to use.",
    "start": "2209590",
    "end": "2217500"
  },
  {
    "text": "So it kind of makes\nsense that I, maybe, couldn't get the running time\nbound that we had before.",
    "start": "2217500",
    "end": "2227490"
  },
  {
    "text": "Maybe I have to\nsacrifice something because I'm in a more restricted\ncomputational setting.",
    "start": "2227490",
    "end": "2233060"
  },
  {
    "text": " Now, this is something you\ncould solve with binary heaps,",
    "start": "2233060",
    "end": "2239563"
  },
  {
    "text": "but you don't have to. You can solve it\nwith set AVL trees.",
    "start": "2239563",
    "end": "2247859"
  },
  {
    "text": "Does anyone have an idea\nof how you could solve this using a set AVL tree? I'm limited by my number of--\nmy space is, at most, log n.",
    "start": "2247860",
    "end": "2257430"
  },
  {
    "text": " AUDIENCE: So how much space\ndoes a set AVL tree take?",
    "start": "2257430",
    "end": "2263473"
  },
  {
    "text": "JASON KU: Right. Space-- there's constant\nnumber of pointers for each one of these nodes.",
    "start": "2263473",
    "end": "2269030"
  },
  {
    "text": "And I'm storing in\nnotes and space. Basically every data structure\nwe've shown you takes space--",
    "start": "2269030",
    "end": "2277520"
  },
  {
    "text": "the order of the things\nthat we're storing. It's not using additional space. It might take more time\nto do certain things,",
    "start": "2277520",
    "end": "2285500"
  },
  {
    "text": "but the space takes\nthe number of items that we're storing plus,\nmaybe, a constant factor.",
    "start": "2285500",
    "end": "2291540"
  },
  {
    "text": " So I'm going to draw my input\nhere, which I can only read--",
    "start": "2291540",
    "end": "2298430"
  },
  {
    "text": "I can't write. Do I give it a-- I'm just going to call\nit A. So this is my list",
    "start": "2298430",
    "end": "2306170"
  },
  {
    "text": "of all the Revenger opinions. I can only read it.",
    "start": "2306170",
    "end": "2311660"
  },
  {
    "text": "But my computer can only write\nto this logarithmic amount of space. ",
    "start": "2311660",
    "end": "2322660"
  },
  {
    "text": "What can I put in that space? AUDIENCE: The log [INAUDIBLE]?",
    "start": "2322660",
    "end": "2329500"
  },
  {
    "text": "JASON KU: Well, I can certainly\nput log n things in there. So if I'm given\nthat restriction,",
    "start": "2329500",
    "end": "2335090"
  },
  {
    "text": "I probably want to build a\ndata structure of that size, containing that\nnumber of things.",
    "start": "2335090",
    "end": "2340360"
  },
  {
    "text": "Does that make sense? Because what else\nare you going to do? ",
    "start": "2340360",
    "end": "2348000"
  },
  {
    "text": "So I gave you an idea. Maybe we could use\na set AVL here. I see a logarithm in my answer.",
    "start": "2348000",
    "end": "2356460"
  },
  {
    "text": "It's very possible that we\nmight have sorted arrays or set AVL things.",
    "start": "2356460",
    "end": "2363299"
  },
  {
    "text": "Those things give me a log\nsomewhere in my running times, right? So kind of makes sense\nthat I might have,",
    "start": "2363300",
    "end": "2370930"
  },
  {
    "text": "maybe, a set AVL tree here. Why would a set AVL\ntree be helpful for me?",
    "start": "2370930",
    "end": "2377810"
  },
  {
    "text": "Yeah? AUDIENCE: Because\nit's sorted and you don't have the\ntraversal order, you can calculate the traversal\norder and insert [INAUDIBLE]??",
    "start": "2377810",
    "end": "2385305"
  },
  {
    "text": "JASON KU: Sure. I can do all of those things. But in particular,\nit's going to help me be able to find a\nlarge one quickly, right?",
    "start": "2385305",
    "end": "2394860"
  },
  {
    "text": "If I have a set of\nthings, it's going to be--",
    "start": "2394860",
    "end": "2400340"
  },
  {
    "text": "and I'm maintaining\nthis data structure by adding things\nincrementally to it,",
    "start": "2400340",
    "end": "2405960"
  },
  {
    "text": "I can find out what\nthe biggest one is-- or the smallest one--\npretty fast in log n time.",
    "start": "2405960",
    "end": "2412710"
  },
  {
    "text": "So if I have log n\nthings in a tree here,",
    "start": "2412710",
    "end": "2417780"
  },
  {
    "text": "what's the height of that thing? AUDIENCE: [INAUDIBLE] JASON KU: Log log n. That looks familiar.",
    "start": "2417780",
    "end": "2423325"
  },
  {
    "text": "So what can I afford? I can afford a linear number\nof opt set AVL tree operations",
    "start": "2423325",
    "end": "2431760"
  },
  {
    "text": "on this data structure. OK, you had a question? AUDIENCE: [INAUDIBLE] JASON KU: OK, I'm sorry.",
    "start": "2431760",
    "end": "2437330"
  },
  {
    "text": "Yeah? AUDIENCE: For that\nto be an AVL tree, does it have to be a BTS tree?",
    "start": "2437330",
    "end": "2442680"
  },
  {
    "text": "JASON KU: Uh, BTS-- BSTs. So when I talk about--",
    "start": "2442680",
    "end": "2448110"
  },
  {
    "text": "someone likes Korean K-Pop. OK. So BST-- but in natural--",
    "start": "2448110",
    "end": "2455820"
  },
  {
    "text": "kind of in the lingo\nthat you're probably used to hearing\nin other contexts,",
    "start": "2455820",
    "end": "2460860"
  },
  {
    "text": "what we mean, in this\nclass, is a set AVL tree. Now, sometimes, what\npeople refer to as a",
    "start": "2460860",
    "end": "2468240"
  },
  {
    "text": "binary search tree doesn't\nhave balance semantics-- so what we might call, in\nthis class, a set binary tree.",
    "start": "2468240",
    "end": "2476190"
  },
  {
    "text": "But really, they're useful\nbecause they're balanced. So we're going to\nusually just assume",
    "start": "2476190",
    "end": "2482309"
  },
  {
    "text": "that we're talking about\nbalanced things here. Now, a set AVL tree has these\nbinary search tree semantics",
    "start": "2482310",
    "end": "2488730"
  },
  {
    "text": "where the keys are ordered. These items have keys\nand they're ordered. It's a set interface.",
    "start": "2488730",
    "end": "2494370"
  },
  {
    "text": "Whereas we also presented\nto you a sequence interface, for which these\nthings don't even have keys.",
    "start": "2494370",
    "end": "2501900"
  },
  {
    "text": "How could I store\nset semantics there? So that's the\ndistinction that we",
    "start": "2501900",
    "end": "2507060"
  },
  {
    "text": "mean when we say binary search\ntree versus, really, a set AVL",
    "start": "2507060",
    "end": "2513360"
  },
  {
    "text": "tree versus [INAUDIBLE]. Yeah? AUDIENCE: So if we look at it\nto make an AVL tree out of this, would that mean that, when\nwe make a node, we tell it,",
    "start": "2513360",
    "end": "2520650"
  },
  {
    "text": "we are keying on the absolute\nvalue of [INAUDIBLE]?? JASON KU: OK, when you're\nmaking a set AVL tree,",
    "start": "2520650",
    "end": "2529350"
  },
  {
    "text": "you've got to tell us what--\nif you're storing objects, you've got to tell\nme what their key is. You're just storing\nsome numbers,",
    "start": "2529350",
    "end": "2535170"
  },
  {
    "text": "like what I'm doing here. Now, this isn't a set AVL tree. But if I'm just\nstoring numbers, I",
    "start": "2535170",
    "end": "2541560"
  },
  {
    "text": "have to tell you the items\nthat I'm storing are the keys. And then everything follows.",
    "start": "2541560",
    "end": "2546684"
  },
  {
    "text": "But if you've got an\nobject that you're trying to sort, like the\nstudents in this room, you've got a lot of properties.",
    "start": "2546685",
    "end": "2553130"
  },
  {
    "text": "I want all of the people\nwith phone number--",
    "start": "2553130",
    "end": "2558599"
  },
  {
    "text": "maybe I want to key you on\nphone number for some reason. That's going to help me\nfind out where you live?",
    "start": "2558600",
    "end": "2564150"
  },
  {
    "text": "I don't-- this is\ngetting a little-- I don't want to go there. But if I give you\na set AVL tree,",
    "start": "2564150",
    "end": "2570283"
  },
  {
    "text": "I've got to tell you\nwhat it's keyed on. If I give you a\nsequence AVL tree,",
    "start": "2570283",
    "end": "2575790"
  },
  {
    "text": "it's obvious what\nmy traversal order is going to be because\nI'm giving you a sequence. That's what the input was.",
    "start": "2575790",
    "end": "2583740"
  },
  {
    "text": "Does that make sense? All right, so I've got this\nset AVL tree of size log n.",
    "start": "2583740",
    "end": "2590250"
  },
  {
    "text": "What should it be keyed by? AUDIENCE: Absolute value. JASON KU: The absolute\nvalue of their preference--",
    "start": "2590250",
    "end": "2595920"
  },
  {
    "text": "or of their opinion. I don't remember\nwhat this is called. But what log n things\ndo I put in here?",
    "start": "2595920",
    "end": "2603490"
  },
  {
    "text": " I don't know.",
    "start": "2603490",
    "end": "2610550"
  },
  {
    "text": "I don't know anything\nabout these things. What makes one\nbetter than another? Let's just put the\nfirst log n things.",
    "start": "2610550",
    "end": "2617900"
  },
  {
    "text": "Does that make sense? All right. What could that tell me?",
    "start": "2617900",
    "end": "2623900"
  },
  {
    "text": "Now, I've put this thing in it. How long did that take? AUDIENCE: [INAUDIBLE]",
    "start": "2623900",
    "end": "2629640"
  },
  {
    "text": "JASON KU: Log n times\nlog log n time, right?",
    "start": "2629640",
    "end": "2635760"
  },
  {
    "text": "But that's much less\nthan our running time that we're looking for,\nso I don't really care.",
    "start": "2635760",
    "end": "2641800"
  },
  {
    "text": "I mean, I want you to\nsay how long it took, but for my purposes,\nI know that it's lower than the running\ntime I'm looking for.",
    "start": "2641800",
    "end": "2648360"
  },
  {
    "text": "And I did that operation once. I don't really care\nabout it anymore. Yeah? AUDIENCE: How did you get\nthe log n times log log n?",
    "start": "2648360",
    "end": "2654720"
  },
  {
    "text": "JASON KU: Because\nthe number of things I'm storing in this\nthing is log n. And so if I pattern match\nthe build time of an AVL tree",
    "start": "2654720",
    "end": "2664050"
  },
  {
    "text": "and I stick log n in there,\nthen it's log n times log n.",
    "start": "2664050",
    "end": "2669870"
  },
  {
    "text": "OK. AUDIENCE: So that's\njust for one iteration? JASON KU: Well, right now,\nI've just built this thing.",
    "start": "2669870",
    "end": "2676920"
  },
  {
    "text": "Maybe-- I just built it once. I'm asserting, too, that maybe\nI don't need to build it again.",
    "start": "2676920",
    "end": "2684630"
  },
  {
    "text": "What could I-- so,\nby now, I know-- I haven't filtered\nmy data at all.",
    "start": "2684630",
    "end": "2691289"
  },
  {
    "text": "I'm just storing these things\nin sorted order in some way. What can I do to\nmaybe start processing",
    "start": "2691290",
    "end": "2699780"
  },
  {
    "text": "the rest of the data? Yeah? AUDIENCE: [INAUDIBLE] try\nto scroll through the list A",
    "start": "2699780",
    "end": "2706490"
  },
  {
    "text": "and try to find someone\nthat's bigger than-- try to keep the\nmaximum [INAUDIBLE]..",
    "start": "2706490",
    "end": "2713430"
  },
  {
    "text": "JASON KU: Sweep this guy\nover inserting things, and always maintaining--",
    "start": "2713430",
    "end": "2718980"
  },
  {
    "text": "if I do that, and I\nkeep sticking things n I'll have this sorted\nof thing at the end. And now I can just read\noff the biggest k things.",
    "start": "2718980",
    "end": "2728910"
  },
  {
    "text": "However, as I'm inserting\nthings across here, my thing's growing.",
    "start": "2728910",
    "end": "2734610"
  },
  {
    "text": "AUDIENCE: Well, just\ndelete the smallest one. JASON KU: Oh,\ndelete small stuff. I like that idea. AUDIENCE: So\nbasically replace it.",
    "start": "2734610",
    "end": "2739710"
  },
  {
    "text": "JASON KU: Yeah,\nbasically replace it. Right. What I'm going to do-- here's a proposal.",
    "start": "2739710",
    "end": "2744810"
  },
  {
    "text": "We're going to take the\nnext guy, stick it in. Awesome.",
    "start": "2744810",
    "end": "2751520"
  },
  {
    "text": "Which one don't\nI care about now? The smallest one there. So kick the smallest one out.",
    "start": "2751520",
    "end": "2757850"
  },
  {
    "text": "Now, this one that\nI stuck in may. Be the smallest. So I just kind of passed\nit through this thing,",
    "start": "2757850",
    "end": "2763580"
  },
  {
    "text": "but how long did that take me? ",
    "start": "2763580",
    "end": "2770032"
  },
  {
    "text": "It took me the\nheight of this tree. What's the height of this tree? AUDIENCE: [INAUDIBLE] JASON KU: Log log n.",
    "start": "2770032",
    "end": "2775300"
  },
  {
    "text": "So I put one in,\nI popped one out. That's the smallest, right?",
    "start": "2775300",
    "end": "2780638"
  },
  {
    "text": "And I keep doing that all\nthe way down the thing. How long did that take me? JASON KU: [INAUDIBLE] ",
    "start": "2780638",
    "end": "2788415"
  },
  {
    "text": "JASON KU: Yeah. Processing n minus log n\nthings, which is basically n.",
    "start": "2788415",
    "end": "2794890"
  },
  {
    "text": "And each one of those\noperations took me height of the tree time. That gives me the\nrunning time that we're",
    "start": "2794890",
    "end": "2800920"
  },
  {
    "text": "looking for, n log log n.",
    "start": "2800920",
    "end": "2805960"
  },
  {
    "text": "sense? AUDIENCE: Is this reminiscent\nof a sliding window technique? JASON KU: Yeah. It's kind of a sliding\nwindow technique. You may have been\nusing one recently.",
    "start": "2805960",
    "end": "2813100"
  },
  {
    "text": " OK. Everyone OK with this?",
    "start": "2813100",
    "end": "2818322"
  },
  {
    "text": "Yeah? AUDIENCE: Could you just\nremind me of the context that we're talking about is log\nlog n, like tree and where--",
    "start": "2818322",
    "end": "2825170"
  },
  {
    "text": "JASON KU: So this thing--\nthe size of this thing is log log n? AUDIENCE: Yeah. JASON KU: I mean-- sorry, log n.",
    "start": "2825170",
    "end": "2830453"
  },
  {
    "text": "And the height of this\nthing is a log of the size. AUDIENCE: I'm sorry, in relation\nto our little log n size",
    "start": "2830453",
    "end": "2839065"
  },
  {
    "text": "[INAUDIBLE] small\nlog log n trees, or--",
    "start": "2839065",
    "end": "2845270"
  },
  {
    "text": "JASON KU: No, so-- sorry. I'm taking this stuff-- there's no intermediate\ndata structure here--",
    "start": "2845270",
    "end": "2852040"
  },
  {
    "text": "I'm just sticking all of\nthese things into set AVL.",
    "start": "2852040",
    "end": "2857105"
  },
  {
    "text": "Yeah? AUDIENCE: [INAUDIBLE] JASON KU: Into one\nset AVL of size log n.",
    "start": "2857105",
    "end": "2863200"
  },
  {
    "text": "I'm sticking a guy in,\npopping the worst guy out.",
    "start": "2863200",
    "end": "2868497"
  },
  {
    "text": "Going through all of the things. I need to make sure,\nwhen I'm sticking it in, I'm keeping track of\nwhich Revenger it is,",
    "start": "2868497",
    "end": "2875740"
  },
  {
    "text": "and that I'm taking\nthe absolute value, and all of those nitty\ngritty kind of things. But that's the basic idea.",
    "start": "2875740",
    "end": "2882250"
  },
  {
    "text": "I'm just taking this, I'm\nsliding the window in, putting something in,\ntaking something out",
    "start": "2882250",
    "end": "2887830"
  },
  {
    "text": "that may or may not-- probably\nis not-- the same thing. And at the end of\nthis procedure,",
    "start": "2887830",
    "end": "2894490"
  },
  {
    "text": "the invariant I'm\nmaintaining here is that my thing always has the\nk largest opinions of the ones",
    "start": "2894490",
    "end": "2903730"
  },
  {
    "text": "that I've processed so far. That's obviously true\nat the beginning, when I build this thing. And when I get to the end, I've\nprocessed all of the things,",
    "start": "2903730",
    "end": "2911319"
  },
  {
    "text": "and this has size log n, and\nso I have the log n largest--",
    "start": "2911320",
    "end": "2918310"
  },
  {
    "text": "highest-- extremist opinions. And then I can just do\nan in-order traversal",
    "start": "2918310",
    "end": "2923990"
  },
  {
    "text": "of this thing and return. Does that make sense? And I've only used\nlogarithmic space.",
    "start": "2923990",
    "end": "2930130"
  },
  {
    "text": " Yeah? AUDIENCE: Wait, I don't get it. Are all of the opinions\nin that AVL tree?",
    "start": "2930130",
    "end": "2940089"
  },
  {
    "text": "JASON KU: Are all of the\nopinions in that AVL tree? All of these opinions\nare in the AVL tree.",
    "start": "2940090",
    "end": "2945520"
  },
  {
    "text": "And at some point, I\nwill insert every opinion",
    "start": "2945520",
    "end": "2952180"
  },
  {
    "text": "into this AVL tree. But I'll be removing the\nones that I don't care about",
    "start": "2952180",
    "end": "2957640"
  },
  {
    "text": "as I go. Does that makes sense? I'm always maintaining\nthe invariants",
    "start": "2957640",
    "end": "2962859"
  },
  {
    "text": "that this thing, before\nI insert something, has exactly log n items\nin it, and then I'm",
    "start": "2962860",
    "end": "2969100"
  },
  {
    "text": "maintaining that invariant by\nsticking one in, taking one out. AUDIENCE: Oh, OK, so then\nwhich one are you deleting?",
    "start": "2969100",
    "end": "2975178"
  },
  {
    "text": "JASON KU: Always\nthe min, because I'm wanting the largest ones. AUDIENCE: And the min\nof the absolute value.",
    "start": "2975178",
    "end": "2980500"
  },
  {
    "text": "JASON KU: Yeah. I'm keying by the absolute\nvalue of these opinions. Yeah?",
    "start": "2980500",
    "end": "2985710"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]? JASON KU: Total runtime here?",
    "start": "2985710",
    "end": "2991390"
  },
  {
    "text": "It's bookkeeping. It took me log n\ntimes log log n time",
    "start": "2991390",
    "end": "3001470"
  },
  {
    "text": "to build this data\nstructure at the beginning, plus n times log log n.",
    "start": "3001470",
    "end": "3011040"
  },
  {
    "text": "I did, basically, n operation--\nasymptotically, n operations. This way, it's actually\nn minus log n operations.",
    "start": "3011040",
    "end": "3019620"
  },
  {
    "text": "And each one of those\ntree operations-- doing one insert, one delete--",
    "start": "3019620",
    "end": "3025350"
  },
  {
    "text": "each one of those took the\nheight of the tree time. And so this is that.",
    "start": "3025350",
    "end": "3031440"
  },
  {
    "text": "Good? Yeah? AUDIENCE: If, instead of one,\nwe just insert and delete, can you do a comparison and then--",
    "start": "3031440",
    "end": "3039030"
  },
  {
    "text": "JASON KU: The\ninserting and deleting a set AVL tree is\nactually doing comparisons",
    "start": "3039030",
    "end": "3045930"
  },
  {
    "text": "within its data structures. AUDIENCE: Just\ncompare with the min. And then-- JASON KU: Sure,\nyou could do that. I could do it the other way.",
    "start": "3045930",
    "end": "3052410"
  },
  {
    "text": "I could remove the\nsmallest element here, to start with, right?",
    "start": "3052410",
    "end": "3058860"
  },
  {
    "text": "And then I compare\nit with this guy, and then whichever is\nbigger, I stick it back in.",
    "start": "3058860",
    "end": "3064370"
  },
  {
    "text": "Same thing. It's just, am I doing the delete\nfirst and then the insertion, or am I doing the insertion\nfirst and then the deletion?",
    "start": "3064370",
    "end": "3072940"
  },
  {
    "text": "Any other questions? Lots of questions. All right. Well, I'm probably going\nto have to skip a problem.",
    "start": "3072940",
    "end": "3078940"
  },
  {
    "text": "We're going to move on to CS-- no, SCLR. ",
    "start": "3078940",
    "end": "3087040"
  },
  {
    "text": "What's the reference here? AUDIENCE: [INAUDIBLE] JASON KU: Yeah, CLRS.",
    "start": "3087040",
    "end": "3092230"
  },
  {
    "text": "These are four academics\nwho wrote a popular textbook in computer science.",
    "start": "3092230",
    "end": "3097519"
  },
  {
    "text": "This is the same kind\nof k kind of thing. They found first editions and\nthey want to auction them off.",
    "start": "3097520",
    "end": "3104769"
  },
  {
    "text": "People can go on\nto their website. They have a bidder ID. It's a unique identifier.",
    "start": "3104770",
    "end": "3109900"
  },
  {
    "text": "And they can place a bid\nfor one of these books. And they can change it\nduring the bidding period,",
    "start": "3109900",
    "end": "3117400"
  },
  {
    "text": "but at the end of\nthe bidding period, the academics want\nto know who the--",
    "start": "3117400",
    "end": "3126111"
  },
  {
    "text": "what is the expected\nrevenue I'll get by selling to the\nk highest bidders? Does that makes sense?",
    "start": "3126112",
    "end": "3133470"
  },
  {
    "text": "Yeah? OK. Note that, before I build\nthis data structure,",
    "start": "3133470",
    "end": "3142560"
  },
  {
    "text": "I know what k is.\nk is a fixed thing.  Because my running time of this\nget-revenue depends on this k,",
    "start": "3142560",
    "end": "3151230"
  },
  {
    "text": "it's not an input\nto that operation. So k is kind of I don't\nknow what it is, a priori.",
    "start": "3151230",
    "end": "3157530"
  },
  {
    "text": "It could be n over 2. It could be log n. It could be 1.",
    "start": "3157530",
    "end": "3163589"
  },
  {
    "text": " But the data structure\nI build needs to satisfy these\nrunning time properties,",
    "start": "3163590",
    "end": "3170940"
  },
  {
    "text": "no matter what choice of k\nthat the academics told me. Does that make sense?",
    "start": "3170940",
    "end": "3177900"
  },
  {
    "text": "What I need to do is, as\nfar as time is going on,",
    "start": "3177900",
    "end": "3183089"
  },
  {
    "text": "people are placing new bids\nand updating their bids. And those updates\ncan take log n time.",
    "start": "3183090",
    "end": "3191890"
  },
  {
    "text": "But as soon as I\nclose the window, I want to be able to tell,\nin constant time, what",
    "start": "3191890",
    "end": "3201250"
  },
  {
    "text": "the k highest bidders are. Any ideas on how to do this?",
    "start": "3201250",
    "end": "3206460"
  },
  {
    "text": "What are the operations\nthat I have to do? I have to be able\nto place a new bid.",
    "start": "3206460",
    "end": "3212920"
  },
  {
    "text": "Associated with a bidder\nis an idea and a bid, which is also an integer--",
    "start": "3212920",
    "end": "3219440"
  },
  {
    "text": "how many dollars I'm going\nto pay for this book.  Update the bid.",
    "start": "3219440",
    "end": "3225700"
  },
  {
    "text": "In some sense, I need to find\nwhether that person placed the bid before, in\nmy data structure.",
    "start": "3225700",
    "end": "3231830"
  },
  {
    "text": "So at some point, I'm going\nto need a find on bidder ID. Does that seem possible?",
    "start": "3231830",
    "end": "3237500"
  },
  {
    "text": "So I might want to have\nsome kind of dictionary on bidder IDs. When I say that I want to have\na dictionary on something,",
    "start": "3237500",
    "end": "3245260"
  },
  {
    "text": "right I'm not\nspecifying to you yet how I'm going to\nimplement that dictionary.",
    "start": "3245260",
    "end": "3251080"
  },
  {
    "text": "What are my usual options? A hash table. But what if I need\nworst-case time?",
    "start": "3251080",
    "end": "3256750"
  },
  {
    "text": " A set AVL tree, right? That's going to be your\ngo-to for a dictionary,",
    "start": "3256750",
    "end": "3263740"
  },
  {
    "text": "because that's going to give\nme log n time to find things via a key. It's the only thing--\nwell, except for a sorted--",
    "start": "3263740",
    "end": "3271560"
  },
  {
    "text": "you could also use\na sorted array, but that's going\nto not be dynamic. And here, we're updating\nwho's in my data structure",
    "start": "3271560",
    "end": "3278700"
  },
  {
    "text": "all the time. People are going in\nand placing bids--",
    "start": "3278700",
    "end": "3283850"
  },
  {
    "text": "new people placing bids. So my set of things\nthat I care about is changing all of the time. So that's probably\ngoing to steer me away",
    "start": "3283850",
    "end": "3290280"
  },
  {
    "text": "from sorted arrays,\nbecause they're not good with dynamic operations.",
    "start": "3290280",
    "end": "3295920"
  },
  {
    "text": "So I'm going to need some kind\nof dictionary on bidder IDs, but I'm also going to need\nto maintain the sum of the k",
    "start": "3295920",
    "end": "3306120"
  },
  {
    "text": "highest bidders. Does that makes sense? And so, in some\nsense, I need to keep track of an ordered notion of\nthe bidders, the bids, that",
    "start": "3306120",
    "end": "3318878"
  },
  {
    "text": "are in my data structure. Does that make sense? So order is going to be\nimportant on the bids.",
    "start": "3318878",
    "end": "3324460"
  },
  {
    "text": "I'm going to need a\nlook-up on bidder ID. And that's about it, right?",
    "start": "3324460",
    "end": "3331329"
  },
  {
    "text": "OK. Yeah? AUDIENCE: Just checking. So if something\nthat's worst-case runs at worst-case time,\nruns expected [INAUDIBLE]..",
    "start": "3331330",
    "end": "3338549"
  },
  {
    "text": "JASON KU: Yes. Correct. Yeah. That's a very good observation.",
    "start": "3338550",
    "end": "3344190"
  },
  {
    "text": "If it runs in worst\ncase time, it also runs in expected at time, right? Because there's essentially\nno randomization",
    "start": "3344190",
    "end": "3349805"
  },
  {
    "text": "that I'm talking about here. AUDIENCE: [INAUDIBLE]? JASON KU: Yeah.",
    "start": "3349805",
    "end": "3355450"
  },
  {
    "text": "And so there's a stronger notion\nwhich we want you to specify, which is that, actually, there\nis no randomization here.",
    "start": "3355450",
    "end": "3361769"
  },
  {
    "text": "We're not using a hash table. In this class, really, that's\nthe only situation where",
    "start": "3361770",
    "end": "3367973"
  },
  {
    "text": "that's going to be an issue.  But if it is, what this problem\nis saying for each [INAUDIBLE],,",
    "start": "3367973",
    "end": "3376450"
  },
  {
    "text": "whether your running time is\nworst case expected and/or amortized, what we're really\ntrying to get you to say is",
    "start": "3376450",
    "end": "3382349"
  },
  {
    "text": "what's the--  evaluate the running\ntime of your algorithm",
    "start": "3382350",
    "end": "3388170"
  },
  {
    "text": "with the proper qualifications. If it took worst\ncase, I want you to say that it took worst case.",
    "start": "3388170",
    "end": "3395030"
  },
  {
    "text": "If it took-- if you\nused a hash table, I want you to say expected. And if these operations\nwere sometimes really bad,",
    "start": "3395030",
    "end": "3403850"
  },
  {
    "text": "but on average, they're really\ngood-- if I did a lot of them, that's amortized.",
    "start": "3403850",
    "end": "3409550"
  },
  {
    "text": "Or if I reduced to\nusing a dynamic array, or if I reduced to\nusing a hash table,",
    "start": "3409550",
    "end": "3414920"
  },
  {
    "text": "those dynamic operations\nwould still be amortized. OK.",
    "start": "3414920",
    "end": "3420350"
  },
  {
    "text": "The dynamic ones. The nice thing about\nlinked data structures is that dynamic operations\naren't amortized.",
    "start": "3420350",
    "end": "3427148"
  },
  {
    "text": "So we're going to\nbe able to get one. Now, for this problem, we can\nactually get worst case bounds, so we're going to try for that.",
    "start": "3427148",
    "end": "3433860"
  },
  {
    "text": "You can also do it in expected\nusing some hash tables for that dictionary.",
    "start": "3433860",
    "end": "3440240"
  },
  {
    "text": "When you approach\na data structures problem in this class,\nyou want to tell me",
    "start": "3440240",
    "end": "3446630"
  },
  {
    "text": "what it is you're\nstoring, first off. Tell me what's supposed\nto be in those things--",
    "start": "3446630",
    "end": "3454300"
  },
  {
    "text": "some invariants on\nthis data structure to make sure that, when\nI do queries later,",
    "start": "3454300",
    "end": "3460520"
  },
  {
    "text": "that these things\nare being maintained, so that if I'm maintaining\na sorted array,",
    "start": "3460520",
    "end": "3469520"
  },
  {
    "text": "and I'm supporting an\noperation to find the maximum, I had better-- anything I do to\nthis data structure had better be maintaining\nthe invariants",
    "start": "3469520",
    "end": "3476448"
  },
  {
    "text": "that these things\nare in sorted order and the last thing\nhas the maximum item. Because my max-return\nthing is going",
    "start": "3476448",
    "end": "3483770"
  },
  {
    "text": "to look there and return that. Does that makes sense? So you want to tell me\nwhat is being stored",
    "start": "3483770",
    "end": "3490520"
  },
  {
    "text": "at a generic point in\ntime during your data structure, what is\nbeing maintained-- so",
    "start": "3490520",
    "end": "3495860"
  },
  {
    "text": "that, when I support the\ndynamic operation or a query, in a dynamic operation, where\nI'm inserting and leading",
    "start": "3495860",
    "end": "3503630"
  },
  {
    "text": "things from this thing, I\nneed to make sure that I'm maintaining those invariants. And when I'm querying,\nI can actually",
    "start": "3503630",
    "end": "3510050"
  },
  {
    "text": "rely on those invariants\nto answer my query. Does that makes sense?",
    "start": "3510050",
    "end": "3516380"
  },
  {
    "text": "So, for this\nproblem-- this is 4-3. ",
    "start": "3516380",
    "end": "3523830"
  },
  {
    "text": "Any ideas? I have two kind of keys that\nI might have to deal with.",
    "start": "3523830",
    "end": "3530030"
  },
  {
    "text": "One's a bid ID and\none's a bid, right?",
    "start": "3530030",
    "end": "3535520"
  },
  {
    "text": "So how could I, if I have two\nkeys that I might want to, maybe, order on one\nand look up on another,",
    "start": "3535520",
    "end": "3543619"
  },
  {
    "text": "how many data structures do\nyou think I'm going to use? AUDIENCE: Two. JASON KU: Two. That's a pretty good guess.",
    "start": "3543620",
    "end": "3550130"
  },
  {
    "text": "So one of them-- let's just guess, right? I need to be able\nto look up on bid,",
    "start": "3550130",
    "end": "3555920"
  },
  {
    "text": "so let's store these bidders\nin some kind of dictionary",
    "start": "3555920",
    "end": "3564109"
  },
  {
    "text": "that's going to be able to\nlook up those things fast. So two data structures. One is a dictionary\nkeyed on bidder ID.",
    "start": "3564110",
    "end": "3581222"
  },
  {
    "text": " What else am I going to want?",
    "start": "3581222",
    "end": "3587890"
  },
  {
    "text": "What's up?  The other way around, a\ndictionary stored on the bids?",
    "start": "3587890",
    "end": "3596380"
  },
  {
    "text": "Is a dictionary\nwhat I want here? AUDIENCE: [INAUDIBLE] set\nup AVL tree [INAUDIBLE]??",
    "start": "3596380",
    "end": "3601480"
  },
  {
    "text": "JASON KU: I want to\nmaintain order somehow. Because I want to\nmaintain the biggest things that I've seen so far.",
    "start": "3601480",
    "end": "3607780"
  },
  {
    "text": "Right now, if I have--\nat some point in time, what's going to happen?",
    "start": "3607780",
    "end": "3613060"
  },
  {
    "text": "If I'm maintaining the k\nlargest at any point in time, it's possible that\none of those bidders",
    "start": "3613060",
    "end": "3619630"
  },
  {
    "text": "maybe decreases his bid so\nit's no longer in the highest. I'm going to also need to\nkeep track of the other guys",
    "start": "3619630",
    "end": "3627309"
  },
  {
    "text": "to see who I should add back\ninto that set, for example. Here's an idea.",
    "start": "3627310",
    "end": "3633880"
  },
  {
    "text": "I'm going to keep not just one\nother data structure, but two other data structures. Maybe this is a leap.",
    "start": "3633880",
    "end": "3640810"
  },
  {
    "text": "You don't have to do this. There's a way to do it\nwith just one other. But I'm going to store two more.",
    "start": "3640810",
    "end": "3646910"
  },
  {
    "text": "One is kind of an-- a data structure to\nstore bidders with a--",
    "start": "3646910",
    "end": "3661099"
  },
  {
    "text": "store the k highest bidders,\nand a data structure",
    "start": "3661100",
    "end": "3674020"
  },
  {
    "text": "to store the n minus\nk highest bidders.",
    "start": "3674020",
    "end": "3682570"
  },
  {
    "text": "Does that make sense? This separates my problem\nquite nicely, right?",
    "start": "3682570",
    "end": "3691190"
  },
  {
    "text": "Every time someone does an\ninteraction with this data structure, I can check\nto see whether it's",
    "start": "3691190",
    "end": "3701360"
  },
  {
    "text": "bigger than the\nsmallest thing in here. If it is, I can do the same\nkind of trick I did before.",
    "start": "3701360",
    "end": "3708320"
  },
  {
    "text": "I can remove it and stick\nmy new one in there. And we're going--\nbut I removed it.",
    "start": "3708320",
    "end": "3714200"
  },
  {
    "text": "I have to maintain\nthis property. So I stick it in here. There's another case.",
    "start": "3714200",
    "end": "3719450"
  },
  {
    "text": "What's the other case?  It's smaller.",
    "start": "3719450",
    "end": "3725460"
  },
  {
    "text": "In which case, I\ndon't do anything to this data structure, and\nI just stick it into here. Does that makes sense?",
    "start": "3725460",
    "end": "3732390"
  },
  {
    "text": "What are the operations\nthese data structures need to maintain? Finding the minimum or the\nmaximum of these two sets.",
    "start": "3732390",
    "end": "3739410"
  },
  {
    "text": "Does that make sense? Actually, really, the--\nwhere are those operations?",
    "start": "3739410",
    "end": "3745230"
  },
  {
    "text": "I don't have them anymore. But they were the\npriority queue operations. They had delete_max--\nand also insert--",
    "start": "3745230",
    "end": "3753750"
  },
  {
    "text": "were things that it did well on. So any priority\nqueue, anything that",
    "start": "3753750",
    "end": "3760200"
  },
  {
    "text": "can deal with maxes\nand mins, is good.",
    "start": "3760200",
    "end": "3765270"
  },
  {
    "text": "And what's a data\nstructure you know that can deal with maxes\nand mins pretty efficiently?",
    "start": "3765270",
    "end": "3770910"
  },
  {
    "text": "The set AVL, right? So instead of data\nstructure here, I'm going to say, set AVL.",
    "start": "3770910",
    "end": "3779075"
  },
  {
    "text": " And obviously, it's going\nto be cheered by bid.",
    "start": "3779075",
    "end": "3792168"
  },
  {
    "text": "Because that's the thing that\nI'm going to want to find maxes and mins over. ",
    "start": "3792168",
    "end": "3798069"
  },
  {
    "text": "Everyone following\nthe logic here of why I'm maintaining\nthese things?",
    "start": "3798070",
    "end": "3803583"
  },
  {
    "text": "This is the level\nof an invariants that I want to maintain,\nbecause when I go to, for example, do this\nquery, get-revenue,",
    "start": "3803583",
    "end": "3813430"
  },
  {
    "text": "I can just run through and\nsum all of these things. Oh, wait. How much time do I have?",
    "start": "3813430",
    "end": "3820780"
  },
  {
    "text": "Do I have k time? No, I don't have k time. So I don't-- I can't afford\nto sum up all of these things",
    "start": "3820780",
    "end": "3828790"
  },
  {
    "text": "at the end of my thread. I have to return it to\nyou in constant time. Any ideas?",
    "start": "3828790",
    "end": "3834880"
  },
  {
    "text": "Yeah, just compute--\nupdate a sum. Along with this\ndata structure, I'm",
    "start": "3834880",
    "end": "3842830"
  },
  {
    "text": "going to keep a\nfourth thing, which is just total of their bids.",
    "start": "3842830",
    "end": "3853120"
  },
  {
    "text": "I'm going to call it t. ",
    "start": "3853120",
    "end": "3858670"
  },
  {
    "text": "And that's something\nI'm maintaining. It's part of my data structure. You can think of it\nas, I'm augmenting",
    "start": "3858670",
    "end": "3864370"
  },
  {
    "text": "this thing with a number. And the point of augmenting\nthis thing with a number",
    "start": "3864370",
    "end": "3870130"
  },
  {
    "text": "is that I can just-- if I need to know what the\ntotal of this stuff is, I can just look at that number.",
    "start": "3870130",
    "end": "3875800"
  },
  {
    "text": "Does that make sense? All right. So now, I think,\nwe're almost done.",
    "start": "3875800",
    "end": "3881920"
  },
  {
    "text": "We're basically done, right? How do we do this? Someone walk through to\nme how I would get revenue",
    "start": "3881920",
    "end": "3891220"
  },
  {
    "text": "with this data structure. I basically kind of told you.",
    "start": "3891220",
    "end": "3896870"
  },
  {
    "text": "Look at this number. Return it. Because that's the invariant\nthat I've maintained on my data",
    "start": "3896870",
    "end": "3902580"
  },
  {
    "text": "structure. I'm relying on this invariant. Now, I'd better make\nsure this is good when I do dynamic operations.",
    "start": "3902580",
    "end": "3909350"
  },
  {
    "text": "I make sure I maintain it. But if I, by induction, I ensure\nthat all of this stuff is good,",
    "start": "3909350",
    "end": "3915973"
  },
  {
    "text": "and when I do a dynamic\noperation, all of that stuff is maintained,\nthen I'm all good.",
    "start": "3915973",
    "end": "3921230"
  },
  {
    "text": "So get-revenue, after I did all\nthis extra work, is very easy.",
    "start": "3921230",
    "end": "3928050"
  },
  {
    "text": "I just look at this\nnumber and return then. When we're grading a\ndata structures problem,",
    "start": "3928050",
    "end": "3933619"
  },
  {
    "text": "usually we give you some points,\nfirst, for setting up your data structure, separately\nfrom the operations,",
    "start": "3933620",
    "end": "3939109"
  },
  {
    "text": "and then we give you\npoints per operation that you successfully\ndeal with, and then",
    "start": "3939110",
    "end": "3944360"
  },
  {
    "text": "some points for correctness\nand running time. Yeah, you had a question?",
    "start": "3944360",
    "end": "3949619"
  },
  {
    "text": "AUDIENCE: So would\ntotal be a thing that we update\nwhenever we mess around",
    "start": "3949620",
    "end": "3954770"
  },
  {
    "text": "with the highest bidder tree\nand then n minus k bidder tree? JASON KU: I'm sorry,\nsay that again?",
    "start": "3954770",
    "end": "3960760"
  },
  {
    "text": "AUDIENCE: Are we treating\nthe total to an augmentation that we update every\ntime we do something? JASON KU: Yeah. Yeah.",
    "start": "3960760",
    "end": "3966250"
  },
  {
    "text": "So it's just one number. It's not really\na data structure, it's just one number that\nI'm storing with my database.",
    "start": "3966250",
    "end": "3972770"
  },
  {
    "text": " All right. How do I implement\na new bid operation?",
    "start": "3972770",
    "end": "3983010"
  },
  {
    "text": "Yeah? AUDIENCE: I have a question. Can we assume that the\nbids will also be unique? JASON KU: Can you assume\nthat the bids may be unique?",
    "start": "3983010",
    "end": "3989510"
  },
  {
    "text": "No.  That's actually something that\nis a really useful observation.",
    "start": "3989510",
    "end": "3999049"
  },
  {
    "text": "We've been talking about\nset data structures as requiring unique keys.",
    "start": "3999050",
    "end": "4007390"
  },
  {
    "text": "How can I deal with\nnon-unique keys? It actually turns\nout that, hash table, it's really important\nthat these be unique keys.",
    "start": "4007390",
    "end": "4014650"
  },
  {
    "text": "Because I need to check\nwhether it's in there. I'm looking for that single key. When I find it,\nI have to return.",
    "start": "4014650",
    "end": "4021340"
  },
  {
    "text": "If I had multiple\nthings with that key, I might not return the\none that I'm looking for. Doesn't even make sense.",
    "start": "4021340",
    "end": "4028240"
  },
  {
    "text": "But you can generalize\nthe set infrastructure",
    "start": "4028240",
    "end": "4037240"
  },
  {
    "text": "to deal with multi-sets. How can I do that? Well, with each key--",
    "start": "4037240",
    "end": "4044859"
  },
  {
    "text": "again, I'm storing unique keys. With each key, I can link it\nto a sequence set of structure,",
    "start": "4044860",
    "end": "4050109"
  },
  {
    "text": "or any other data structure. And what I'm going to do is,\nI'm going to do-- anything that has that key,\nI'm going to stick it",
    "start": "4050110",
    "end": "4056440"
  },
  {
    "text": "in that data structure. So instead of storing\none item there, I have the possibility of\nstoring many things there.",
    "start": "4056440",
    "end": "4062267"
  },
  {
    "text": "Now, I have to change\nthe semantics here. If I'm saying, find on this\nkey, well, now, I could say,",
    "start": "4062267",
    "end": "4068800"
  },
  {
    "text": "I'm going to return all of\nthe things with that key, or I'm going to store\nsome thing with that key.",
    "start": "4068800",
    "end": "4075010"
  },
  {
    "text": "But you get the idea. All I have to do is map it\nto some other data structure to maintain [INAUDIBLE].",
    "start": "4075010",
    "end": "4081160"
  },
  {
    "text": "Like, maybe, I want all of\nthe things with that key.",
    "start": "4081160",
    "end": "4086380"
  },
  {
    "text": "I want to find the one\nwith this other key. So maybe I link to\na set data structure",
    "start": "4086380",
    "end": "4091474"
  },
  {
    "text": "that can search on\nother things, right? But the idea here\nis, we maintain this uniqueness key property.",
    "start": "4091475",
    "end": "4098109"
  },
  {
    "text": "I have to relax my\nsemantics so that I'm storing multiple things\nat that key location.",
    "start": "4098109",
    "end": "4103609"
  },
  {
    "text": "Does that makes sense? Yeah? AUDIENCE: Why does it\nmatter whether the set AVL tree has unique keys or not? ",
    "start": "4103609",
    "end": "4111220"
  },
  {
    "text": "JASON KU: It's going to matter\nhere because I have bids. And the bids could\nbe non-unique.",
    "start": "4111220",
    "end": "4118899"
  },
  {
    "text": "Two people could\nhave the same bid. And by our definition\nof a set data structure,",
    "start": "4118899",
    "end": "4126850"
  },
  {
    "text": "it had to have unique keys. So if I stuck in all of\nthese things keyed by bidder, you've got a problem.",
    "start": "4126850",
    "end": "4133509"
  },
  {
    "text": "Now, in actuality,\nwe can get away with that by storing,\nbasically, a linked list of all of the things with\nthat key, and we would be fine.",
    "start": "4133510",
    "end": "4140528"
  },
  {
    "text": " And then, whenever I want to\nreturn one, I could just do it.",
    "start": "4140529",
    "end": "4146259"
  },
  {
    "text": "But actually, a\nbinary tree actually is flexible enough that,\nin most implementations,",
    "start": "4146260",
    "end": "4152949"
  },
  {
    "text": "you can just store a\nbunch of those things. But, actually, our\nrun times do worse.",
    "start": "4152950",
    "end": "4160839"
  },
  {
    "text": "What does it mean to\nfind-next in my sequence? What does it mean to\nreturn the next larger",
    "start": "4160840",
    "end": "4169750"
  },
  {
    "text": "thing above this key? Doesn't really make\nsense, because there could be multiple ones.",
    "start": "4169750",
    "end": "4174818"
  },
  {
    "text": "Which one do I return? And if I repeatedly do find-next\non this data structure,",
    "start": "4174819",
    "end": "4181270"
  },
  {
    "text": "I might not loop through\nall of the things. So some stuff breaks\ndown in our interface.",
    "start": "4181270",
    "end": "4189170"
  },
  {
    "text": "So I would prefer you use unique\nkeys in this kind of situation.",
    "start": "4189170",
    "end": "4194980"
  },
  {
    "text": "Next Tuesday, I think,\nwith binary heaps, we'll deal with non-unique keys.",
    "start": "4194980",
    "end": "4202720"
  },
  {
    "text": "That's fine. But if you're going to use\nnon-unique keys in here,",
    "start": "4202720",
    "end": "4209440"
  },
  {
    "text": "you've just got\nto be a little bit careful about the semantics. Yeah? AUDIENCE: [INAUDIBLE]?",
    "start": "4209440",
    "end": "4215410"
  },
  {
    "start": "4215410",
    "end": "4224500"
  },
  {
    "text": "JASON KU: You would\nget the same running time-- you have to\nchange the semantics",
    "start": "4224500",
    "end": "4229960"
  },
  {
    "text": "on what you mean by\n\"find something.\" I just want to return\nanything with this key.",
    "start": "4229960",
    "end": "4235570"
  },
  {
    "text": "AUDIENCE: What if\neverything has the same key. Then-- JASON KU: Then it\ntakes constant time. I just return the first thing.",
    "start": "4235570",
    "end": "4241150"
  },
  {
    "text": " I mean, these are\nspecial cases that you",
    "start": "4241150",
    "end": "4248409"
  },
  {
    "text": "have to think about, right? I don't like\nthinking about them. So I just like\nhaving unique keys.",
    "start": "4248410",
    "end": "4255460"
  },
  {
    "text": "And if I want a situation\nwhere I have non-unique keys, I'm going to basically\nput collisions at that key",
    "start": "4255460",
    "end": "4262869"
  },
  {
    "text": "into a new data structure. It's just easier for\nme to separate out in my head on what's happening.",
    "start": "4262870",
    "end": "4268300"
  },
  {
    "text": "Because, all of the running\ntimes that we proposed, there's very strong\ndefinitions for unique key.",
    "start": "4268300",
    "end": "4274539"
  },
  {
    "text": "When you're dealing\nwith a multi-set, it's a little bit\nmore prevalent.",
    "start": "4274540",
    "end": "4280150"
  },
  {
    "text": "Any other questions? We really need to kind\nof move on here, right?",
    "start": "4280150",
    "end": "4285910"
  },
  {
    "text": "Dictionary keyed on bidder. We still haven't implemented\nany dynamic operations.",
    "start": "4285910",
    "end": "4291670"
  },
  {
    "text": "New bid. What do I do? What am I going to\nneed for my update?",
    "start": "4291670",
    "end": "4298030"
  },
  {
    "text": "I'm going to be able to\nneed to essentially find, in each of these\ndata structures,",
    "start": "4298030",
    "end": "4304120"
  },
  {
    "text": "where that bidder is. And if I just have a\nthing keyed on their bid,",
    "start": "4304120",
    "end": "4311889"
  },
  {
    "text": "the interface doesn't tell\nme what their old bid was. It just tells me what\ntheir bidder ID is.",
    "start": "4311890",
    "end": "4317200"
  },
  {
    "text": "So if I just had their bidder ID\nand their new bid, how the heck am I going to find out\nwhich of these data-- where",
    "start": "4317200",
    "end": "4324429"
  },
  {
    "text": "in these data\nstructures they are? What I can do is, I can\nstore, in this dictionary--",
    "start": "4324430",
    "end": "4331630"
  },
  {
    "text": "which I can look up in\nsome amount of time-- a pointer to where it\nexists in these things.",
    "start": "4331630",
    "end": "4338050"
  },
  {
    "text": "Does that make sense? This is called cross-linking. You may have done that\na little bit in problem",
    "start": "4338050",
    "end": "4344800"
  },
  {
    "text": "set 2, or something like that. Yeah? AUDIENCE: Restoring a\npointer to a specific bidder?",
    "start": "4344800",
    "end": "4350590"
  },
  {
    "text": "JASON KU: Yeah, exactly. The invariant we\nhave is that all of the bidders we've\nprocessed so far",
    "start": "4350590",
    "end": "4355720"
  },
  {
    "text": "exist in these data structures-- in one of these\ndata structures--",
    "start": "4355720",
    "end": "4361060"
  },
  {
    "text": "because we've used\na set AVL tree. In particular, it\nexists in a node of one of these data structures.",
    "start": "4361060",
    "end": "4367659"
  },
  {
    "text": "What we can do\nis, in this thing, maintain pointers mapping\neach of the bidder IDs",
    "start": "4367660",
    "end": "4376480"
  },
  {
    "text": "to their location in\nthese data structures. And why is that going\nto be a useful thing? ",
    "start": "4376480",
    "end": "4384219"
  },
  {
    "text": "Say I map this dictionary. What could I use\nfor this dictionary to get the running\ntime we're looking for?",
    "start": "4384220",
    "end": "4390580"
  },
  {
    "text": "I could use a hash\ntable or a set AVL. If it's a set AVL, I'm going\nto get logarithmic time, worst",
    "start": "4390580",
    "end": "4396520"
  },
  {
    "text": "case. With a hash table, I'm\ngetting constant time, but it's expected. So it could be linear\ntime in the worst case.",
    "start": "4396520",
    "end": "4404920"
  },
  {
    "text": "We're going to use a set\nAVL tree, because that's what we do right now.",
    "start": "4404920",
    "end": "4410330"
  },
  {
    "text": "And that's going to\ngive us worst case. What I'm going to do is, for\neach one of these things, I'm going to store that pointer.",
    "start": "4410330",
    "end": "4416393"
  },
  {
    "text": "What I'm going to\ndo is, first, I'm going to do that\noperation we had. If I'm adding a new bidder,\nI'm going to take the D and B--",
    "start": "4416393",
    "end": "4429100"
  },
  {
    "text": "these two values, that\nobject, that bidder object, or whatever--",
    "start": "4429100",
    "end": "4434820"
  },
  {
    "text": "I'm going to look at the\nsmallest thing in this data structure, see if its bid\nis bigger than the thing",
    "start": "4434820",
    "end": "4446470"
  },
  {
    "text": "I'm inserting. If it is, then I'm not going\nto touch this data structure. I'm just going to\ninsert it in here.",
    "start": "4446470",
    "end": "4451840"
  },
  {
    "text": "And now, after I\ninsert in here, I know exactly where it is\nin the data structure. I just inserted it.",
    "start": "4451840",
    "end": "4459370"
  },
  {
    "text": "So now, holding\nthat in my hand-- the node-- I can go and\ninsert that bidder into here",
    "start": "4459370",
    "end": "4467679"
  },
  {
    "text": "by bid ID. So it's going to\ntake logarithm time. And now I can store, with\nthat node, my pointer",
    "start": "4467680",
    "end": "4476409"
  },
  {
    "text": "to this data structure. Does that makes sense? And in the other case, I\nkind of do the same thing.",
    "start": "4476410",
    "end": "4481780"
  },
  {
    "text": "If it's bigger than the smallest\nthing here, I pop that smaller thing out, stick it in there,\nand I stick my new guy in here,",
    "start": "4481780",
    "end": "4488619"
  },
  {
    "text": "cross-linking each of those\npointers along the way. Does that make sense, hopefully?",
    "start": "4488620",
    "end": "4497469"
  },
  {
    "text": "Kind of? Kind of? OK. And for update, very similar.",
    "start": "4497470",
    "end": "4503469"
  },
  {
    "text": "If I want to update\na certain bidder, I look in this data\nstructure, find the bidder,",
    "start": "4503470",
    "end": "4511550"
  },
  {
    "text": "traverse that\npointer to wherever it is in one of these\nAVL trees, right?",
    "start": "4511550",
    "end": "4516980"
  },
  {
    "text": "If it's in this one, I just\nremove it from the tree,",
    "start": "4516980",
    "end": "4522050"
  },
  {
    "text": "or I remove it from\nthe tree and then I re-insert with\nwhatever the new bid is.",
    "start": "4522050",
    "end": "4529070"
  },
  {
    "text": "And if it's in\nthis one, again, I remove it from the tree,\nre-insert in whichever",
    "start": "4529070",
    "end": "4535190"
  },
  {
    "text": "of these things is,\nand then I might have to swap a constant\nnumber of things back and forth here to maintain\nthat this has the k highest.",
    "start": "4535190",
    "end": "4543020"
  },
  {
    "text": "And when I do those\ndynamic operations, I'm always removing\nsome constant number",
    "start": "4543020",
    "end": "4550369"
  },
  {
    "text": "of nodes in each of these\ntrees and adding back in a constant number of things. And while I do that, I just\nmake sure to update this total",
    "start": "4550370",
    "end": "4557630"
  },
  {
    "text": "as I go. This total was the sum of\nall of the bids in here.",
    "start": "4557630",
    "end": "4564680"
  },
  {
    "text": "And if I insert a\nnew bid in here, I have to add to that total. And if I remove one, I have\nto remove from that total.",
    "start": "4564680",
    "end": "4571858"
  },
  {
    "text": "But again, it's a\nconstant number of things I'm moving in and out of\nthese data structures, and so it can update\nthis in constant time.",
    "start": "4571858",
    "end": "4578060"
  },
  {
    "text": "Does that makes sense? Now, the lookup here, and\nthe insertion and deletion",
    "start": "4578060",
    "end": "4583760"
  },
  {
    "text": "in here, those each took\nlogarithmic time, worst case.",
    "start": "4583760",
    "end": "4589130"
  },
  {
    "text": "But I did a constant\nnumber of them. So again, logarithm time. Does that makes sense? That's, essentially,\nthis problem.",
    "start": "4589130",
    "end": "4597680"
  },
  {
    "text": "It's difficult, right? There's a lot of\nmoving parts here. But if you just break it\nup and to describe to me--",
    "start": "4597680",
    "end": "4604610"
  },
  {
    "text": "like, you really do a\ngood job on this part, describe well to me what\nyour data structure has, then",
    "start": "4604610",
    "end": "4610789"
  },
  {
    "text": "those descriptions\nof those algorithms can be pretty brief, actually. ",
    "start": "4610790",
    "end": "4617120"
  },
  {
    "text": "In this one, you tell me\nthese three data structures, you tell me this guy's\nmapping to its location",
    "start": "4617120",
    "end": "4623630"
  },
  {
    "text": "and these things, I'm\nmaintaining this guy, and then you just maintain those\nthings with dynamic operations",
    "start": "4623630",
    "end": "4631520"
  },
  {
    "text": "and then use those things\nfor query operations. Does that make sense? ",
    "start": "4631520",
    "end": "4639630"
  },
  {
    "text": "Wow, we have 10 more minutes? ",
    "start": "4639630",
    "end": "4645810"
  },
  {
    "text": "I'm going to briefly\ndo 4-4 for you.",
    "start": "4645810",
    "end": "4652830"
  },
  {
    "text": "Receiver roster. We've got a coach. She's got a bunch of\nfootball players--",
    "start": "4652830",
    "end": "4658980"
  },
  {
    "text": "receivers. And wanting to\nstart on her team,",
    "start": "4658980",
    "end": "4665790"
  },
  {
    "text": "some number of players that\nhave the highest performance. And by performance, we\nmean the average number",
    "start": "4665790",
    "end": "4672929"
  },
  {
    "text": "of points they've played\nin games that they have logged in their system. But actually, their\ndata is incomplete.",
    "start": "4672930",
    "end": "4680280"
  },
  {
    "text": "They don't know which games,\nand how much they scored, and all of these things. There could be errors. And so these interns,\nthey're constantly",
    "start": "4680280",
    "end": "4688320"
  },
  {
    "text": "updating this database with\nqueries like, oh, never mind,",
    "start": "4688320",
    "end": "4695369"
  },
  {
    "text": "this person didn't\nplay in this game, or actually, they did, and they\nscored this number of points.",
    "start": "4695370",
    "end": "4701850"
  },
  {
    "text": "That's the-- clear\nand record things. And then, at some\npoint in time, like",
    "start": "4701850",
    "end": "4708360"
  },
  {
    "text": "when we want to\nplay a game, I want to be able to return the\njersey with the kth highest",
    "start": "4708360",
    "end": "4716760"
  },
  {
    "text": "performance in log n time. This is kind of a\nrank query, right?",
    "start": "4716760",
    "end": "4725370"
  },
  {
    "text": "The kth highest.  Now, in actuality, I might want\nto return all k highest players",
    "start": "4725370",
    "end": "4733500"
  },
  {
    "text": "so that that might be my roster. But this is a more\ngeneralized query.",
    "start": "4733500",
    "end": "4740070"
  },
  {
    "text": "It's more specific, more-- it's not really comparable. But you get an idea for why that\nmight be useful to the coach.",
    "start": "4740070",
    "end": "4747358"
  },
  {
    "text": "I don't know. Maybe not. So what's the idea here? We have a lot of different\nthings floating around.",
    "start": "4747358",
    "end": "4753750"
  },
  {
    "text": "We've got games. They have IDs-- unique IDs. We've got receivers. They have unique IDs.",
    "start": "4753750",
    "end": "4759630"
  },
  {
    "text": "And each receiver could\nplay in many games. Oh, that's kind of worrisome.",
    "start": "4759630",
    "end": "4766590"
  },
  {
    "text": "And many receivers could\nplay in the same game. These kind of\nmany-to-one mappings",
    "start": "4766590",
    "end": "4772680"
  },
  {
    "text": "are a little confusing. And then we've got each player--",
    "start": "4772680",
    "end": "4779110"
  },
  {
    "text": "receiver-- having a certain\nnumber of points per game. And we're trying to sort them,\nkind of, by their performance,",
    "start": "4779110",
    "end": "4785930"
  },
  {
    "text": "which is a rational number. Ugh, right? Which has to do with the\nnumber of games they've played",
    "start": "4785930",
    "end": "4792880"
  },
  {
    "text": "and the total number of points. Now, I see rational number,\nI can't compute that.",
    "start": "4792880",
    "end": "4799420"
  },
  {
    "text": "That's what we're talking about\nlast problem session, right? But what I can do\nis, I could store",
    "start": "4799420",
    "end": "4804448"
  },
  {
    "text": "the total number of\ngames they played and the total number\nof points they have. And you can imagine,\nby augmentation",
    "start": "4804448",
    "end": "4809830"
  },
  {
    "text": "similar to this, every\ntime I add a game, one of these small operations, I\ncan update that information",
    "start": "4809830",
    "end": "4818980"
  },
  {
    "text": "for each player.  If one of these\ndynamic operations",
    "start": "4818980",
    "end": "4825040"
  },
  {
    "text": "is affecting only\none receiver, I can update whatever it\nis in constant time,",
    "start": "4825040",
    "end": "4831550"
  },
  {
    "text": "probably, if I just store\nwith the player what their total number of games\nis as recorded by the database",
    "start": "4831550",
    "end": "4838732"
  },
  {
    "text": "and how many points\nthey've scored. Then, if I have a\ndata structure that needs to sort the receivers\nby their performance",
    "start": "4838732",
    "end": "4847790"
  },
  {
    "text": "so I might be able\nto find the kth one-- the kth largest-- then I can't\ncompute that performance.",
    "start": "4847790",
    "end": "4856739"
  },
  {
    "text": "But what can I do? I can compare two players based\non their performance using",
    "start": "4856740",
    "end": "4862820"
  },
  {
    "text": "cross-multiplication. Because I have the\nnumerator and denominator of each of these\nrationals and I can",
    "start": "4862820",
    "end": "4869240"
  },
  {
    "text": "cross-multiply and\nfigure out whether one's bigger or smaller. And as long as I\nhave a comparitor,",
    "start": "4869240",
    "end": "4875030"
  },
  {
    "text": "I can do set AVL stuff. Does that makes sense? OK.",
    "start": "4875030",
    "end": "4880610"
  },
  {
    "text": "I'm just going to outline kind\nof the components of this data structure.",
    "start": "4880610",
    "end": "4886239"
  },
  {
    "text": " Well, first off, I'm going\nto need to record a receiver.",
    "start": "4886240",
    "end": "4892730"
  },
  {
    "text": "And a receiver could\nhave a lot of games. But the important-- this is\nkind of a receiver-centric kind of problem.",
    "start": "4892730",
    "end": "4898230"
  },
  {
    "text": "Does that makes\nsense to you guys? I'm not ever wanting to\nfilter on all of the receivers playing a game.",
    "start": "4898230",
    "end": "4904489"
  },
  {
    "text": "I'm never removing a\ngame from the system,",
    "start": "4904490",
    "end": "4910490"
  },
  {
    "text": "I'm removing a\nreceiver from ever playing in a specific game. Does that makes sense?",
    "start": "4910490",
    "end": "4915630"
  },
  {
    "text": "So if I'm storing a\nreceiver, and each receiver has some games\nassociated with them,",
    "start": "4915630",
    "end": "4921980"
  },
  {
    "text": "kind of makes sense I might\nwant to have a nested data structure where with--",
    "start": "4921980",
    "end": "4928160"
  },
  {
    "text": "maybe I have a\ndictionary on receivers. And for each one, I\nstore all the games",
    "start": "4928160",
    "end": "4934400"
  },
  {
    "text": "that they've played in\nsome other data structure. With each receiver, I store\nanother-- its own data",
    "start": "4934400",
    "end": "4940347"
  },
  {
    "text": "structure containing\nall of its games. Does that makes sense? OK, so that's the idea.",
    "start": "4940347",
    "end": "4946280"
  },
  {
    "text": "We have some kind of-- I need to be able to\nlook up receivers,",
    "start": "4946280",
    "end": "4951590"
  },
  {
    "text": "because I'm clearing them\nor I'm recording them. So I'm going to have\na dictionary or--",
    "start": "4951590",
    "end": "4960320"
  },
  {
    "text": "here, I'm looking for\nworst-case log n time. So I'm going to skip the\ndictionary abstraction",
    "start": "4960320",
    "end": "4965870"
  },
  {
    "text": "and go straight for the set AVL. AVL keyed on receivers.",
    "start": "4965870",
    "end": "4980150"
  },
  {
    "text": "I before E, except\nafter C. It is I--",
    "start": "4980150",
    "end": "4986730"
  },
  {
    "text": "E-I?  That rule never works.",
    "start": "4986730",
    "end": "4991850"
  },
  {
    "text": "OK. Set AVL tree on receivers,\nand each one of those nodes",
    "start": "4991850",
    "end": "4997940"
  },
  {
    "text": "with each one of those\nreceivers, I'm going to store--",
    "start": "4997940",
    "end": "5003010"
  },
  {
    "text": "for each, store a\nset AVL on games.",
    "start": "5003010",
    "end": "5012250"
  },
  {
    "text": " Why do I store a\nset AVL on games?",
    "start": "5012250",
    "end": "5018460"
  },
  {
    "text": "Why don't I just store a\nlist of all of the games? Because if I want to remove\nthis game from a receiver,",
    "start": "5018460",
    "end": "5025360"
  },
  {
    "text": "I need to do that in log n time. And here, what we're saying is\nthat n is the number of games,",
    "start": "5025360",
    "end": "5031520"
  },
  {
    "text": "but that the number of\nreceivers on the team is always less than\nthe number of games.",
    "start": "5031520",
    "end": "5036760"
  },
  {
    "text": "If I search in this AVL tree\nand I search in its AVL tree,",
    "start": "5036760",
    "end": "5042039"
  },
  {
    "text": "I can be assured that those two\nsearches was only log n time.",
    "start": "5042040",
    "end": "5047050"
  },
  {
    "text": "Because I need to\nremove game, right? So there you go. Then what am I doing?",
    "start": "5047050",
    "end": "5053290"
  },
  {
    "text": "I'm returning the kth\nhighest performance. Well, I need-- with each one\nof these guys, I also store--",
    "start": "5053290",
    "end": "5061099"
  },
  {
    "text": "what was this augmentation? The sum of the points\nstored in these games.",
    "start": "5061100",
    "end": "5068030"
  },
  {
    "text": "Sum of points and-- ",
    "start": "5068030",
    "end": "5075350"
  },
  {
    "text": "what was it-- number games. Because if I store both of\nthose things in constant time,",
    "start": "5075350",
    "end": "5083130"
  },
  {
    "text": "I'm going to be able to\ncompute their performance, where I'm going to be\nable to have the data",
    "start": "5083130",
    "end": "5089000"
  },
  {
    "text": "I need to compare performances. AUDIENCE: [INAUDIBLE]? JASON KU: Yeah, it is. Just numbers.",
    "start": "5089000",
    "end": "5094969"
  },
  {
    "text": "These are data structures. This is a data structure. These are just numbers. ",
    "start": "5094970",
    "end": "5100400"
  },
  {
    "text": "And I'm storing that\nwith each receiver.  But that's not going to help\nme find the kth highest player.",
    "start": "5100400",
    "end": "5108860"
  },
  {
    "text": "None of these things are\nsorted by performance. So I need a last data structure.",
    "start": "5108860",
    "end": "5115635"
  },
  {
    "start": "5115635",
    "end": "5122760"
  },
  {
    "text": "Five, I need to store\nsomething dynamically sorted",
    "start": "5122760",
    "end": "5131130"
  },
  {
    "text": "by performance. AUDIENCE: Set AVL? JASON KU: Set AVL, yeah. Set AVL storing receivers\nkeyed on performance.",
    "start": "5131130",
    "end": "5150940"
  },
  {
    "text": "Now, when I say\nkeyed on performance, you want to mention\nsomething about",
    "start": "5150940",
    "end": "5157200"
  },
  {
    "text": "the cross-pot multiplication. Like, I'm storing, with\neach one of these things, this augmentation, and when\nI'm comparing two things,",
    "start": "5157200",
    "end": "5164070"
  },
  {
    "text": "I'm using cross-multiplication. But other than that, then we\ncan abstract it away, right? We've abstracted\nthat function call.",
    "start": "5164070",
    "end": "5170699"
  },
  {
    "text": "And I can imagine\ncomparing two keys. I can do this. This is a theory thing.",
    "start": "5170700",
    "end": "5175950"
  },
  {
    "text": "I'm not asking you\nto implement that. But that's sufficient for me,\nas a reader of your solution,",
    "start": "5175950",
    "end": "5182280"
  },
  {
    "text": "to be able to say, yeah, you\nknow what you're talking about. All right.",
    "start": "5182280",
    "end": "5188100"
  },
  {
    "text": "How do I connect these things? The thing is, I'm\ngoing to need to be-- I need to update these things\nwhen I insert or remove a game.",
    "start": "5188100",
    "end": "5198800"
  },
  {
    "text": " So how do I know where are these\nreceivers are in this thing?",
    "start": "5198800",
    "end": "5207600"
  },
  {
    "text": "I store a pointer into\nthis data structure, right? So up here, I store\na pointer to where",
    "start": "5207600",
    "end": "5217710"
  },
  {
    "text": "it is in the data structure. Again, I'm storing\nall of the receivers. This has the same size\nas the number 1 data",
    "start": "5217710",
    "end": "5224070"
  },
  {
    "text": "structure up there-- has the\nsame number of receivers. ",
    "start": "5224070",
    "end": "5229590"
  },
  {
    "text": "But we're not quite done\nyet, because I'm not wanting to know who has\nthe best performance.",
    "start": "5229590",
    "end": "5241350"
  },
  {
    "text": "I want to know who has\nthe kth best performance. Ugh.",
    "start": "5241350",
    "end": "5247410"
  },
  {
    "text": "How do I find the kth\nbest thing in this tree? I've got a tree. ",
    "start": "5247410",
    "end": "5254070"
  },
  {
    "text": "Set AVL tree. It's mapped on performance. I know where the last one is. But if I want to find\nthe kth one from the end,",
    "start": "5254070",
    "end": "5261390"
  },
  {
    "text": "how do I do that? It's an AVL tree-- a set AVL tree.",
    "start": "5261390",
    "end": "5267300"
  },
  {
    "text": "All I'm storing is heights. Is there an operation\nthat you've thought about?",
    "start": "5267300",
    "end": "5274690"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] you're\nnot storing the size of each. JASON KU: A set AVL\ntree, by default,",
    "start": "5274690",
    "end": "5280770"
  },
  {
    "text": "does not store sizes, right? That's what a sequence does. But you think maybe that would\nbe helpful in this situation?",
    "start": "5280770",
    "end": "5288370"
  },
  {
    "text": "Yeah. So, actually, if I decided\nto augment by sizes also, I could do the exact same kind\nof sequence find_at operation,",
    "start": "5288370",
    "end": "5297240"
  },
  {
    "text": "and I could be able to look\nup the n minus kth item",
    "start": "5297240",
    "end": "5302670"
  },
  {
    "text": "in here using the exact same\nfunction for subtree at that I",
    "start": "5302670",
    "end": "5308190"
  },
  {
    "text": "had in the sequence\nAVL tree stuff. Actually, in CLRS,\nthey don't even",
    "start": "5308190",
    "end": "5313920"
  },
  {
    "text": "bother with sequence AVL trees. They go straight to, if I wanted\nthis rank-find functionality",
    "start": "5313920",
    "end": "5319710"
  },
  {
    "text": "on a sorted order\nof things, then I could augment\nthe subtree sizes.",
    "start": "5319710",
    "end": "5327330"
  },
  {
    "text": "But it's actually a much\nmore useful general property, so we decided to present it to\nyou in the context of sequence",
    "start": "5327330",
    "end": "5334500"
  },
  {
    "text": "AVL trees, because then I\ncan just basically reduce to it when I get to here. So that's kind of a\nstructure of a data structure",
    "start": "5334500",
    "end": "5341130"
  },
  {
    "text": "that work on this problem. I leave it to you as an\nexercise to implement all of these operations\nfor yourself,",
    "start": "5341130",
    "end": "5346920"
  },
  {
    "text": "or take a look at the solutions. The last one is going\nto be put online--",
    "start": "5346920",
    "end": "5353460"
  },
  {
    "text": "the solution. It's pretty complicated. It's what's called-- you can\nthink of the size augmentation",
    "start": "5353460",
    "end": "5359490"
  },
  {
    "text": "finding-rank as a\none-sided range query. It's basically, how many things\nare to the right of this value?",
    "start": "5359490",
    "end": "5367410"
  },
  {
    "text": "What the last problem\ndoes is walks you through a two-sided\nrange query, where I want to know how many nodes\nare between these two values.",
    "start": "5367410",
    "end": "5377070"
  },
  {
    "text": "So it's a walkthrough. All right. Thanks, guys. AUDIENCE: Thank you.",
    "start": "5377070",
    "end": "5382099"
  },
  {
    "start": "5382100",
    "end": "5387000"
  }
]