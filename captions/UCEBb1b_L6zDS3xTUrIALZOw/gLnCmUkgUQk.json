[
  {
    "text": "[SQUEAKING]\n[RUSTLING] [CLICKING]",
    "start": "0",
    "end": "11310"
  },
  {
    "text": "ANA BELL: All right, let's\nbegin today's lecture. So last class, we\nbegan our adventure",
    "start": "11310",
    "end": "19020"
  },
  {
    "text": "with creating our\nown data types. Today, we're going to start off\nwith a little bit of a recap, just to remind you of\nsome of the details",
    "start": "19020",
    "end": "27300"
  },
  {
    "text": "about creating our\nown data types. And then we're going to build\nupon that coordinate class we",
    "start": "27300",
    "end": "33150"
  },
  {
    "text": "started on last class. We'll build a circle class. And then we'll build\nsome fraction data types.",
    "start": "33150",
    "end": "41040"
  },
  {
    "text": "All right, so the first\nthing I'd like to mention is to remind you guys about\nwriting code from these two",
    "start": "41040",
    "end": "49020"
  },
  {
    "text": "different perspectives. So just like when\nwe wrote functions, we were writing the definition\nof the function, telling Python",
    "start": "49020",
    "end": "56760"
  },
  {
    "text": "we have this function that\nwe're defining abstractly and this is what it does. And then we were calling\nthe function later",
    "start": "56760",
    "end": "62579"
  },
  {
    "text": "on in the program\nmany, many times. Well, the same thing exists-- the same idea exists\nnow that we're",
    "start": "62580",
    "end": "69330"
  },
  {
    "text": "creating our own data types. We have to write code from\nthe point of view of somebody who's implementing\nthe class, so deciding",
    "start": "69330",
    "end": "76060"
  },
  {
    "text": "all of these details that goes\ninto creating the class itself, versus somebody who's just\nusing a class that's already",
    "start": "76060",
    "end": "84070"
  },
  {
    "text": "been written, where\nwe create instances, a bunch of different\nobjects that just happen to be this data type.",
    "start": "84070",
    "end": "90470"
  },
  {
    "text": "So when we implement\nthe class, what were some of the things we did? Well, we're telling Python\nthat this object now exists.",
    "start": "90470",
    "end": "98080"
  },
  {
    "text": "We're telling Python the\nname of the data type that we're creating,\nsomething we choose.",
    "start": "98080",
    "end": "103960"
  },
  {
    "text": "We're making these\ndesign decisions where we decide what\nattributes make up our class. So the attributes are either\ndata, like the properties--",
    "start": "103960",
    "end": "111548"
  },
  {
    "text": "what are the variables\nthat make up your object-- and the behaviors\nthrough methods.",
    "start": "111548",
    "end": "117670"
  },
  {
    "text": "So that's implementing\nthe class. And then when we're\nusing the class, we're now saying, all right,\nlet's assume that this class",
    "start": "117670",
    "end": "124780"
  },
  {
    "text": "definition exists. There's this object\nthat has these behaviors and these data attributes. Let's now create a\nwhole bunch of objects",
    "start": "124780",
    "end": "132940"
  },
  {
    "text": "that are of this type. And this is when we're\ncreating these instances, and then manipulating\nall of these instances",
    "start": "132940",
    "end": "138700"
  },
  {
    "text": "by running methods on\nthem, things like that. So when we're implementing\nthe class, this thing",
    "start": "138700",
    "end": "144100"
  },
  {
    "text": "on the left-hand\nside, we're basically telling Python, in\nabstract terms, what",
    "start": "144100",
    "end": "150489"
  },
  {
    "text": "are the common property and\nbehaviors of our data type. And then when we're\nusing the class--",
    "start": "150490",
    "end": "155890"
  },
  {
    "text": "the thing on the\nright-hand side here-- we're creating actual objects\nwith very specific values",
    "start": "155890",
    "end": "161740"
  },
  {
    "text": "for their data\nattributes that we can manipulate in different ways. So let's remember\nthis coordinate class",
    "start": "161740",
    "end": "168710"
  },
  {
    "text": "that we wrote last lecture. This is not new, but I will\njust go over it real quick.",
    "start": "168710",
    "end": "175140"
  },
  {
    "text": "So first line here tells Python\nwe're creating a new data type. Its name is coordinate.",
    "start": "175140",
    "end": "181250"
  },
  {
    "text": "And this keyword\nclass tells Python we're creating the data type. The parentheses here is object,\nwhich stands for the Python",
    "start": "181250",
    "end": "189140"
  },
  {
    "text": "object data type. So it's something\nreally generic. And this, in the\nparentheses here,",
    "start": "189140",
    "end": "195230"
  },
  {
    "text": "is the parent of our class. So anything that a regular\nPython object can do,",
    "start": "195230",
    "end": "201409"
  },
  {
    "text": "the very basic things,\nour class can do as well. Last lecture, I mentioned an\nexample of such a basic thing",
    "start": "201410",
    "end": "207860"
  },
  {
    "text": "is to take a variable name and\nassign it to an object type that we create.",
    "start": "207860",
    "end": "213940"
  },
  {
    "text": "The very first\nmethod that we should write for a new data type that\nwe create is the init method.",
    "start": "213940",
    "end": "219640"
  },
  {
    "text": "And this I called\na dunder method because it starts with double\nunderscores before the init",
    "start": "219640",
    "end": "227680"
  },
  {
    "text": "and ends with double\nunderscores after the init. And that's the actual name\nof this method, __init__.",
    "start": "227680",
    "end": "235360"
  },
  {
    "text": "So this method is like a\nconstructor for the class. It tells Python\nhow do you create an actual object of this type.",
    "start": "235360",
    "end": "241900"
  },
  {
    "text": "So it's a function. It's just a function that\nworks only with objects",
    "start": "241900",
    "end": "247990"
  },
  {
    "text": "of type coordinate. So as a function,\nit takes parameters. You can see it takes\nthree parameters here--",
    "start": "247990",
    "end": "254680"
  },
  {
    "text": "the self, the x, and the y. Now, when we're actually\ncreating objects of type coordinate, we\nonly pass in parameters",
    "start": "254680",
    "end": "263110"
  },
  {
    "text": "for everything other than self\nbecause self is a variable name",
    "start": "263110",
    "end": "268270"
  },
  {
    "text": "that we use to describe having\nan instance of the class without actually creating one\nyet because remember what we're",
    "start": "268270",
    "end": "275540"
  },
  {
    "text": "doing here in this definition. We're telling Python that\nthis object type now exists. We're writing it as we speak.",
    "start": "275540",
    "end": "282389"
  },
  {
    "text": "But we don't have an actual\ninstance to manipulate yet. This is just the definition. And so the self\ntells Python that,",
    "start": "282390",
    "end": "289730"
  },
  {
    "text": "when we're writing\nthis code, we're going to use the self\nvariable name as a formal name",
    "start": "289730",
    "end": "296960"
  },
  {
    "text": "to be able to run\nthis method on. So we're going to see in the\nnext slide exactly what maps",
    "start": "296960",
    "end": "302990"
  },
  {
    "text": "to self when we run it. But that's what the self means\ninside the parameter list here and here.",
    "start": "302990",
    "end": "309700"
  },
  {
    "text": "And then beyond that, we use\nself within the init method to tell Python which\none of these variables",
    "start": "309700",
    "end": "316990"
  },
  {
    "text": "are actually data attributes\nversus which of these variables are just plain old variables\nas we've been working with.",
    "start": "316990",
    "end": "323260"
  },
  {
    "text": "So any variable that's\ndefined using self.-- so here, I've got and\nself.x and self.y--",
    "start": "323260",
    "end": "329470"
  },
  {
    "text": "are data attributes. So that means any object\nI create that's of type",
    "start": "329470",
    "end": "334570"
  },
  {
    "text": "coordinate I know will\nhave a variable x and y associated with it because I've\ndefined these x's and y's using",
    "start": "334570",
    "end": "342610"
  },
  {
    "text": "and self.x and self.y. Now, in the last\nlecture, I actually had these parameter lists--",
    "start": "342610",
    "end": "348610"
  },
  {
    "text": "the parameters in this list\nhere be different than x and y. I think I had xval, yval.",
    "start": "348610",
    "end": "354310"
  },
  {
    "text": "And then I had\nself.x equals xval, where this x here to the\nright of the equal sign",
    "start": "354310",
    "end": "359620"
  },
  {
    "text": "is the x from the\nparameter list. So in that sense, it doesn't\nmatter what these variables",
    "start": "359620",
    "end": "366280"
  },
  {
    "text": "are in the parameter list. They're just going to\nbe the same over here on the right-hand side\nof the equal sign.",
    "start": "366280",
    "end": "371820"
  },
  {
    "text": "But the actual parameters-- sorry, the actual\ndata attributes are self.x and\nself.y of my object.",
    "start": "371820",
    "end": "382470"
  },
  {
    "text": "OK. So then we had one method\nthat we wrote last lecture. It was called distance. And it took two parameters--\nso the first one, of course,",
    "start": "382470",
    "end": "390310"
  },
  {
    "text": "is self. And this self\nrepresents the thing, this object that you're\ngoing to call the method on.",
    "start": "390310",
    "end": "396240"
  },
  {
    "text": "I don't have that\nobject yet, so I'm just calling it self for now because\nthis is the class definition.",
    "start": "396240",
    "end": "401790"
  },
  {
    "text": "And then this other parameter\nis some other coordinate object that I'm going\nto run this method on.",
    "start": "401790",
    "end": "409090"
  },
  {
    "text": "So the body of distance\nsays, all right, well, how do I find the distance\nbetween two points in the 2D",
    "start": "409090",
    "end": "416140"
  },
  {
    "text": "plane? It's just Pythagoras, right? So that means grab the x\nvalue of 1 of my points,",
    "start": "416140",
    "end": "421950"
  },
  {
    "text": "subtract the x value of the\nother point, square them. Same with the y's, square them,\nadd them, take the square root.",
    "start": "421950",
    "end": "428400"
  },
  {
    "text": "So what's the x\nvalue of one point? Well, one of the\npoints is going to be the thing that I'm calling\nthe distance method on, self.",
    "start": "428400",
    "end": "435540"
  },
  {
    "text": "So I grab the x\nvalue of self using this dot notation, self.x. And then what's the x value of\nthis other coordinate point?",
    "start": "435540",
    "end": "444400"
  },
  {
    "text": "Well, it's called other\nin my parameter list. So I'm going to grab\nthe x value of other,",
    "start": "444400",
    "end": "449680"
  },
  {
    "text": "again using dot notation. And then we just do the math.",
    "start": "449680",
    "end": "455640"
  },
  {
    "text": "Yes? STUDENT: Can you\nonly call functions on a class that were\ndefined like this?",
    "start": "455640",
    "end": "464889"
  },
  {
    "text": "ANA BELL: Yeah, so\nyou can make methods. You can make methods\nfor a particular class.",
    "start": "464890",
    "end": "470155"
  },
  {
    "text": "STUDENT: Right, but you can\nonly call those functions that you define? You can't call\nanother functions? ANA BELL: Exactly, yeah.",
    "start": "470155",
    "end": "476590"
  },
  {
    "text": "Yeah. Yeah? STUDENT: Is there a way we could\ndefine a class as something",
    "start": "476590",
    "end": "483220"
  },
  {
    "text": "other than an object? ANA BELL: A class as something\nother than an object? STUDENT: Right, like say we\nput coordinate and then object,",
    "start": "483220",
    "end": "490190"
  },
  {
    "text": "then you put something else. ANA BELL: In the parentheses? Yes, we can put other\nthings in the parentheses.",
    "start": "490190",
    "end": "495360"
  },
  {
    "text": "So that's actually what\nMonday's lecture will be about. In that case, the thing\nin the parentheses",
    "start": "495360",
    "end": "500750"
  },
  {
    "text": "becomes the parent of the class\nthat you're currently writing. So I won't go into\ntoo much detail.",
    "start": "500750",
    "end": "506570"
  },
  {
    "text": "But to have this other object as\na parent means that everything that that object can do\nautomatically your object",
    "start": "506570",
    "end": "514039"
  },
  {
    "text": "can do as well. And then on top of\nthat, you can decide a bunch of additional\nstuff your new object does.",
    "start": "514039",
    "end": "521150"
  },
  {
    "text": "But in a sense, your\ncoordinate object is a whatever this thing\nin the parentheses is.",
    "start": "521150",
    "end": "527460"
  },
  {
    "text": "And then it can do a bunch\nof other stuff as well. Yes? STUDENT: Similarly, how\nyou can copy and paste",
    "start": "527460",
    "end": "534460"
  },
  {
    "text": "the square brackets? ANA BELL: Yeah? STUDENT: How can you do that?",
    "start": "534460",
    "end": "540860"
  },
  {
    "text": "ANA BELL: Oh, to make\na copy of the object? Or-- STUDENT: To make a\ncopy of the class.",
    "start": "540860",
    "end": "546200"
  },
  {
    "text": "ANA BELL: Oh, so here, you\ncan't make a copy of the class here specifically because\nwe're just defining the class.",
    "start": "546200",
    "end": "553500"
  },
  {
    "text": "But when you're creating\ncoordinate objects, then you could define a\nmethod that copies your object",
    "start": "553500",
    "end": "561620"
  },
  {
    "text": "into another object. So in essence, it would\nreturn a new object of type",
    "start": "561620",
    "end": "567240"
  },
  {
    "text": "coordinate with whatever\nparameters you'd want it to do.",
    "start": "567240",
    "end": "572580"
  },
  {
    "text": "So yeah, all of these\nthings are possible. So let's add one more\nmethod to this class.",
    "start": "572580",
    "end": "579370"
  },
  {
    "text": "Let's call it to_origin. So this distance method,\njust to remind ourselves,",
    "start": "579370",
    "end": "586870"
  },
  {
    "text": "returned a number. So it just took the difference\nbetween these two points and it returned a number,\njust how far away they are.",
    "start": "586870",
    "end": "594970"
  },
  {
    "text": "But this to_origin\nmethod is going to do something\nslightly different. Essentially, what I'm going\nto have this method do",
    "start": "594970",
    "end": "601660"
  },
  {
    "text": "is to take my point from\nwherever it is in my 2D plane that it has been\ninitialized to and say I'm",
    "start": "601660",
    "end": "608589"
  },
  {
    "text": "going to reset it\nback to the origin. So to do that, all\nthat means is I'm",
    "start": "608590",
    "end": "615160"
  },
  {
    "text": "going to make its x value\nand its y value be 0. So I can manipulate\nthe x and y data",
    "start": "615160",
    "end": "622990"
  },
  {
    "text": "attributes of this\nparticular object to be whatever I\nwant them to be. So I can reset\nthem both to be 0.",
    "start": "622990",
    "end": "629649"
  },
  {
    "text": "So if I ever call this method on\nan object whose x and y values are something other than\n0, they'll be reset to 0.",
    "start": "629650",
    "end": "638510"
  },
  {
    "text": "So let's actually run the\ncode that we just wrote. So here, I've got two coordinate\nobjects being created.",
    "start": "638510",
    "end": "644670"
  },
  {
    "text": "So the beauty of writing\nthis class for us is that now we can create\nas many coordinate objects",
    "start": "644670",
    "end": "649760"
  },
  {
    "text": "as we'd like. They all will have\nan x value and a y value associated with them. It's just that the\nspecific values for x and y",
    "start": "649760",
    "end": "657020"
  },
  {
    "text": "will be different. So here, I've got a coordinate\nobject with x 3 and y 4",
    "start": "657020",
    "end": "662840"
  },
  {
    "text": "being created. And it's going to be bound\nby the variable name c and here a coordinate\nobject with x and y values",
    "start": "662840",
    "end": "669320"
  },
  {
    "text": "both 0 bound to a\nvariable named origin. So then I can use\nthis dot notation",
    "start": "669320",
    "end": "676550"
  },
  {
    "text": "that we talked about last\nlecture to access either data or to run methods on the object.",
    "start": "676550",
    "end": "684270"
  },
  {
    "text": "So in this printf\nstatement here, I'm using dot notation\non c and origin",
    "start": "684270",
    "end": "691759"
  },
  {
    "text": "to grab the x values of c over\nhere and origin over here.",
    "start": "691760",
    "end": "698210"
  },
  {
    "text": "And then I'm running the\ndistance method on c. So remember, dot notation says\nthe thing before the dot is",
    "start": "698210",
    "end": "705020"
  },
  {
    "text": "going to be an object. The thing after the dot is\ngoing to be the method name that",
    "start": "705020",
    "end": "712029"
  },
  {
    "text": "can run on this object of type\nwhatever this is, coordinate. And then in the parentheses,\nit's just a function.",
    "start": "712030",
    "end": "718029"
  },
  {
    "text": "We just pass in\nall the variables that that method expects. ",
    "start": "718030",
    "end": "724500"
  },
  {
    "text": "So c.distance will print\nhowever far away it is, 5, because those are nice numbers.",
    "start": "724500",
    "end": "731910"
  },
  {
    "text": "So then if we run this function\nthat we just wrote, .to_origin, this function,\njust to remind you,",
    "start": "731910",
    "end": "738000"
  },
  {
    "text": "doesn't actually\nreturn anything. It just resets the\nvariables x and y",
    "start": "738000",
    "end": "743010"
  },
  {
    "text": "for that particular\nobject back to 0. So in here, when I\ncall this method here--",
    "start": "743010",
    "end": "750759"
  },
  {
    "text": "again, dot notation, the thing\nbefore the dot is an object. It's c. Its x and y values\nare currently 3 and 4.",
    "start": "750760",
    "end": "759220"
  },
  {
    "text": "But after I run this function--\nit returns none, by the way-- its x and y values will\nbe changed to 0 and 0.",
    "start": "759220",
    "end": "767980"
  },
  {
    "text": "So if I look at my code here-- so here's this printf statement.",
    "start": "767980",
    "end": "774880"
  },
  {
    "text": "So c's x value is 3 and c's--\nand origin's x is 0, fine.",
    "start": "774880",
    "end": "781030"
  },
  {
    "text": "And then I've got these two\ncalls here-- so c.to_origin. I'm making this function call.",
    "start": "781030",
    "end": "787300"
  },
  {
    "text": "Before the function call,\nc's x is 3 and c's y is 4. And after the function\ncall, you can see c's x is 0",
    "start": "787300",
    "end": "793660"
  },
  {
    "text": "and c's y is 0. So I'm literally changing the x\nand y values of this object, c.",
    "start": "793660",
    "end": "799260"
  },
  {
    "text": " All right, so questions so far?",
    "start": "799260",
    "end": "806769"
  },
  {
    "text": "So far so good? Hopefully recap? OK. So again, sort similar\nto the first slide",
    "start": "806770",
    "end": "813010"
  },
  {
    "text": "we started with, so we've got\nthis class coordinate object. The class name is our type. So this object I'm creating\nis of type coordinate.",
    "start": "813010",
    "end": "820600"
  },
  {
    "text": "We're defining the\nclass in a generic way, in an abstract way. So we have to use the\nself variable either",
    "start": "820600",
    "end": "829810"
  },
  {
    "text": "in the parameter list\nto tell Python what's the thing before the dot\ngoing to map to-- well, it's going to map to self\nin my parameter list.",
    "start": "829810",
    "end": "837720"
  },
  {
    "text": "Or we use the self to tell\nPython what the data attributes of this object are.",
    "start": "837720",
    "end": "842800"
  },
  {
    "text": "So anything defined with\nself. some variable name will be a data attribute.",
    "start": "842800",
    "end": "847860"
  },
  {
    "text": "That's common across\nall the instances I create of this type. When we create actual\ninstances, that's",
    "start": "847860",
    "end": "855149"
  },
  {
    "text": "when our blueprint,\nour abstract definition now gets put into use.",
    "start": "855150",
    "end": "861269"
  },
  {
    "text": "And now, I'm creating\nactual objects that I can grab x values from,\nchange x values from, get",
    "start": "861270",
    "end": "867870"
  },
  {
    "text": "distances between other\nobjects, and so on, and so on. OK. So what I'd like to do next is\nto take this coordinate class",
    "start": "867870",
    "end": "877810"
  },
  {
    "text": "and build a circle\nclass with it. So this comes hand\nin hand with the idea",
    "start": "877810",
    "end": "885760"
  },
  {
    "text": "of when you're deciding\nhow to create a class, you get to make the\ndesign decision. So when the Finger Exercise\nfor Monday's lecture--",
    "start": "885760",
    "end": "893740"
  },
  {
    "text": "today's Wednesday, yes. Monday's lecture-- you guys\nhad to create a center--",
    "start": "893740",
    "end": "899440"
  },
  {
    "text": "sorry, a circle class. But the way we defined\nthe circle class in that Finger\nExercise was basically",
    "start": "899440",
    "end": "906250"
  },
  {
    "text": "by that circle's radius. That's the only way we\nabstracted that circle.",
    "start": "906250",
    "end": "912850"
  },
  {
    "text": "But now, in this\nlecture, we're going to make a different\ndesign decision and say that a circle will now\nbe defined using two things.",
    "start": "912850",
    "end": "923730"
  },
  {
    "text": "The first is the radius. So I'm going to say\nthat that's an integer. And the second is going to\nbe the center of the circle.",
    "start": "923730",
    "end": "932180"
  },
  {
    "text": "So as in the picture\nthere, I'm going to say that a circle is based\non the center and this radius.",
    "start": "932180",
    "end": "938450"
  },
  {
    "text": "And the center is not\ngoing to be a float. It's not going to be a tuple. It's not going to be an int.",
    "start": "938450",
    "end": "943907"
  },
  {
    "text": "It's going to be a\ncoordinate object, the data type that we were just writing.",
    "start": "943907",
    "end": "949675"
  },
  {
    "text": " All right, good. It's not a secret.",
    "start": "949675",
    "end": "956572"
  },
  {
    "text": "I didn't lower my\nvoice on purpose. I just wanted to\nlet that sink in. So one of our data attributes\nfor the circle class",
    "start": "956572",
    "end": "964390"
  },
  {
    "text": "is a coordinate object. So we're using an\nobject that we just wrote to create a more\ncomplex object, a circle.",
    "start": "964390",
    "end": "972930"
  },
  {
    "text": "So here's my class definition. The data type is called circle. Again, it inherits all--",
    "start": "972930",
    "end": "979350"
  },
  {
    "text": "the parent of circle is just\na generic Python object. First method we have to\nwrite is the init method.",
    "start": "979350",
    "end": "986820"
  },
  {
    "text": "First parameter is\nself, so this thing that I'm creating right now. And I say that to\ncreate a circle,",
    "start": "986820",
    "end": "992190"
  },
  {
    "text": "I have to give it a center. And I have to give it a radius.",
    "start": "992190",
    "end": "997370"
  },
  {
    "text": "The data attributes\nof the circle class-- so the two attributes that\nmake up my circle are this",
    "start": "997370",
    "end": "1005710"
  },
  {
    "text": "self.center-- so the center variable\nhere-- and self.radius. So these two things together\nmake up our circle object.",
    "start": "1005710",
    "end": "1015500"
  },
  {
    "text": "And initially, in\nthe init method and when we\nconstruct our object, we're just going\nto set these two",
    "start": "1015500",
    "end": "1020595"
  },
  {
    "text": "things to be whatever is\npassed in as parameters in the constructor.",
    "start": "1020595",
    "end": "1028689"
  },
  {
    "text": "All right, so what\nI'd like to say is that this center parameter\nwill be a coordinate object",
    "start": "1028690",
    "end": "1038500"
  },
  {
    "text": "and radius will be an int. Now, notice in this code, I'm\nnot actually enforcing this.",
    "start": "1038500",
    "end": "1043810"
  },
  {
    "text": "I could create a circle object\nby just passing in two strings.",
    "start": "1043810",
    "end": "1050290"
  },
  {
    "text": "At this point, this\ncode doesn't care. Nowhere am I enforcing the fact\nthat center is a coordinate",
    "start": "1050290",
    "end": "1056527"
  },
  {
    "text": "and radius will be an int. But that's just\nsomething that we know. So then when we create the\nactual object down here,",
    "start": "1056527",
    "end": "1067350"
  },
  {
    "text": "my_circle is going to\nbe a variable that's bound to my circle object.",
    "start": "1067350",
    "end": "1072760"
  },
  {
    "text": "So here, I'm invoking the\nname of my class, circle. And then what are the two\nparameters I'm passing in?",
    "start": "1072760",
    "end": "1079140"
  },
  {
    "text": "Well, the first one,\nI said right up here that it should be a\ncoordinate object.",
    "start": "1079140",
    "end": "1085500"
  },
  {
    "text": "So center is a variable name. And what is it? Well, I had to create\nthis coordinate object.",
    "start": "1085500",
    "end": "1094140"
  },
  {
    "text": "So I'm just invoking\nthe name of coordinate, this class that creates\nfor me a coordinate object. And I happen to put the\ncenter of the circle at 2, 2.",
    "start": "1094140",
    "end": "1104040"
  },
  {
    "text": "Yeah, OK. So this center thing\nis a coordinate object.",
    "start": "1104040",
    "end": "1110010"
  },
  {
    "text": "It's not a tuple, or\na float, or whatever. It's a coordinate object. And then the radius of\nthis circle is 2, an int.",
    "start": "1110010",
    "end": "1116276"
  },
  {
    "text": " Everyone OK with that? OK.",
    "start": "1116276",
    "end": "1122419"
  },
  {
    "text": "So what I'd like\nyou to do next is to modify this init\nmethod just slightly, just to show you that the\ninit method doesn't just",
    "start": "1122420",
    "end": "1129860"
  },
  {
    "text": "always set the data\nattributes and it's done. It can do a lot of\ninitialization code.",
    "start": "1129860",
    "end": "1136190"
  },
  {
    "text": "One of the more important\nthings it can do is to try to enforce the\ntypes on the parameters here.",
    "start": "1136190",
    "end": "1145100"
  },
  {
    "text": "So what I'd like you to\ndo is add to this code to check that the type\nof center is a coordinate",
    "start": "1145100",
    "end": "1152690"
  },
  {
    "text": "and the type of\nradius is an integer. And only if those\ntwo things are true,",
    "start": "1152690",
    "end": "1158460"
  },
  {
    "text": "then do you set the\ntwo data attributes. And otherwise, raise\nfor me a value error.",
    "start": "1158460",
    "end": "1166910"
  },
  {
    "text": "So that should be\naround line 48. ",
    "start": "1166910",
    "end": "1172970"
  },
  {
    "text": "OK. Does anyone have\nsome code for me? ",
    "start": "1172970",
    "end": "1180630"
  },
  {
    "text": "Yeah? STUDENT: In type of center\ndoes not equal coordinate [INAUDIBLE]",
    "start": "1180630",
    "end": "1187539"
  },
  {
    "text": "ANA BELL: Not equal coordinate-- Yep, so that's\nraise value error.",
    "start": "1187540",
    "end": "1193025"
  },
  {
    "text": "STUDENT: Value error. ANA BELL: Yep. Cool so that takes care of one. Yep?",
    "start": "1193025",
    "end": "1199691"
  },
  {
    "text": "STUDENT: And they're the same\nper radius, but with the-- ANA BELL: Yep. So if the type of radius,\nbecause that's the parameter",
    "start": "1199691",
    "end": "1208050"
  },
  {
    "text": "passed in, not equal to\nint, raise value error.",
    "start": "1208050",
    "end": "1213662"
  },
  {
    "text": " So if we drop into any of\nthese if's, then we immediately",
    "start": "1213662",
    "end": "1221299"
  },
  {
    "text": "raise the value error. The code doesn't complete. And then only if we didn't\ndrop into this one or this one",
    "start": "1221300",
    "end": "1227870"
  },
  {
    "text": "do we then go on to\ncreate my object. So then here we are.",
    "start": "1227870",
    "end": "1232940"
  },
  {
    "text": "These two lines\nhere will succeed. So there is no error raised\nor anything like that.",
    "start": "1232940",
    "end": "1238800"
  },
  {
    "text": "But then this line here\nraises our value error because we tried to\ncreate a circle where",
    "start": "1238800",
    "end": "1245260"
  },
  {
    "text": "the center is an\ninteger, obviously not a coordinate object. And then here, again,\nwe raised a value error",
    "start": "1245260",
    "end": "1251080"
  },
  {
    "text": "because we tried to pass\nin a string as the radius. Any questions about this code?",
    "start": "1251080",
    "end": "1256600"
  },
  {
    "text": " Oh yeah, sorry. STUDENT: So [INAUDIBLE] it's\nvery important for these two",
    "start": "1256600",
    "end": "1262840"
  },
  {
    "text": "statements [INAUDIBLE]? ANA BELL: Yeah, so it's\nimportant to place them before you actually create\nthe object because you don't",
    "start": "1262840",
    "end": "1269890"
  },
  {
    "text": "want to create it unless-- yeah, unless\neverything's appropriate.",
    "start": "1269890",
    "end": "1275050"
  },
  {
    "text": " OK.",
    "start": "1275050",
    "end": "1281220"
  },
  {
    "text": "So now, let's add one\nmore useful method to our class, circle.",
    "start": "1281220",
    "end": "1288240"
  },
  {
    "text": "Now that we've defined\na circle using a center point and a radius, we can\nadd this little function",
    "start": "1288240",
    "end": "1295400"
  },
  {
    "text": "that checks if another\ncoordinate object is inside",
    "start": "1295400",
    "end": "1300730"
  },
  {
    "text": "our circle. So again, I'm not going\nto be able to enforce",
    "start": "1300730",
    "end": "1307149"
  },
  {
    "text": "that this point is\na coordinate object. But you could do it\nin the docstring, or you could do a check,\nor something like that.",
    "start": "1307150",
    "end": "1313550"
  },
  {
    "text": "But again, we're\njust going to assume the user using this method\nis going to follow the rules. So how is this\nmethod going to work?",
    "start": "1313550",
    "end": "1320620"
  },
  {
    "text": "The idea here is\nthat we're going to use the center, which\nis a coordinate object, and some other point,\np, wherever it may be.",
    "start": "1320620",
    "end": "1329020"
  },
  {
    "text": "What we're going to do\nis we're going to say, what's the distance\nbetween this point and the center of the circle?",
    "start": "1329020",
    "end": "1335050"
  },
  {
    "text": "If it's greater\nthan the radius, we know the point is\noutside the circle. If it's smaller\nthan the radius, we",
    "start": "1335050",
    "end": "1340690"
  },
  {
    "text": "know the point is in the circle. So this code is\njust enforcing that.",
    "start": "1340690",
    "end": "1346010"
  },
  {
    "text": "So we have just a\nsimple return statement that's going to run\nthe distance method.",
    "start": "1346010",
    "end": "1353980"
  },
  {
    "text": "This is a method that we wrote\nback in the coordinate class.",
    "start": "1353980",
    "end": "1361740"
  },
  {
    "text": "That's fine because\nyou know what? Point is an object\nof type coordinate.",
    "start": "1361740",
    "end": "1368100"
  },
  {
    "text": "And self.center-- so the\ncenter of this circle object I'm trying to manipulate to tell\nif another point is inside me",
    "start": "1368100",
    "end": "1375840"
  },
  {
    "text": "or not-- is also a coordinate object. So why not?",
    "start": "1375840",
    "end": "1380970"
  },
  {
    "text": "We already wrote the code\nthat calculates the distance between these two points. So let's call it. So here, I've got the\nthing before the dot,",
    "start": "1380970",
    "end": "1387360"
  },
  {
    "text": "a coordinate object,\ndot notation, the method I want to run\non this coordinate object.",
    "start": "1387360",
    "end": "1392550"
  },
  {
    "text": "And then in parentheses, this\nis another coordinate object. So this will just tell me\nsome number for how far",
    "start": "1392550",
    "end": "1397770"
  },
  {
    "text": "away these two points are. And all we do is return\nwhether that number is less than the radius. ",
    "start": "1397770",
    "end": "1405485"
  },
  {
    "text": "Does that make sense?  And again, this\nonly works if point,",
    "start": "1405485",
    "end": "1412040"
  },
  {
    "text": "the thing that's passed in\nhere, is a coordinate object. Otherwise, this code\nwill fail because it's",
    "start": "1412040",
    "end": "1417410"
  },
  {
    "text": "going to try to pass in-- it's going to try to run the\ndistance method on a string, for example.",
    "start": "1417410",
    "end": "1422940"
  },
  {
    "text": "And of course, the string\ndoesn't have a distance method. So down here, these two lines\nare exactly as we had before.",
    "start": "1422940",
    "end": "1430710"
  },
  {
    "text": "We create a circle object\nwhose center is at 2, 2 and radius is 2.",
    "start": "1430710",
    "end": "1435930"
  },
  {
    "text": "And then I've got another\ncoordinate object down here. It's at 1 comma 1, so\nclearly within the circle.",
    "start": "1435930",
    "end": "1443640"
  },
  {
    "text": "So that print statement\nwill then print true. So that's just\nbasically what I wrote.",
    "start": "1443640",
    "end": "1449700"
  },
  {
    "text": "This is a coordinate object. This is the method. This is another\ncoordinate object.",
    "start": "1449700",
    "end": "1454760"
  },
  {
    "text": "All right, so let's run it. ",
    "start": "1454760",
    "end": "1459788"
  },
  {
    "text": "So this is exactly the\ncode from the slide. So if I run this method on a\ncoordinate object that's 1, 1, somewhere in here, so true.",
    "start": "1459788",
    "end": "1466940"
  },
  {
    "text": "And otherwise, if I run\nit on coordinate object here, 10, 10, clearly outside\nthe circle, it prints false.",
    "start": "1466940",
    "end": "1475145"
  },
  {
    "text": " Questions?",
    "start": "1475145",
    "end": "1480530"
  },
  {
    "text": " OK. ",
    "start": "1480530",
    "end": "1487570"
  },
  {
    "text": "Yes, that's exactly\nwhat I said already. OK, good. So now, I want you to\nanswer this question.",
    "start": "1487570",
    "end": "1494070"
  },
  {
    "text": "Nothing to code here, but\nI've got these two is_inside methods.",
    "start": "1494070",
    "end": "1499510"
  },
  {
    "text": "So the first one here,\nis_inside1, is exactly the one that we just saw. It runs this distance method\nwith point and self.center.",
    "start": "1499510",
    "end": "1508760"
  },
  {
    "text": "is_inside2 looks\nslightly different, the differences I've\nhighlighted in this box. What I'd like you to tell me--\nwe can do a show of hands--",
    "start": "1508760",
    "end": "1515720"
  },
  {
    "text": "is are these two methods\nfunctionally equivalent? That is, will they\nreturn the same thing",
    "start": "1515720",
    "end": "1523400"
  },
  {
    "text": "given the same input? So think about it. And then I will do\na show of hands.",
    "start": "1523400",
    "end": "1531050"
  },
  {
    "text": " So who thinks yes they are\nfunctionally equivalent?",
    "start": "1531050",
    "end": "1540730"
  },
  {
    "text": "Given the same input, they\nwill both return true or false?",
    "start": "1540730",
    "end": "1545890"
  },
  {
    "text": "Who thinks no they are not\nfunctionally equivalent? Some? Half and half.",
    "start": "1545890",
    "end": "1552320"
  },
  {
    "text": "OK. Well, let's think about what\nthe distance method is doing. ",
    "start": "1552320",
    "end": "1558540"
  },
  {
    "text": "It's being run on an\nobject of type what? ",
    "start": "1558540",
    "end": "1565902"
  },
  {
    "text": "STUDENT: Coordinate? ANA BELL: Coordinate, exactly. So in here, is point an\nobject of type coordinate?",
    "start": "1565902",
    "end": "1573340"
  },
  {
    "text": "Yes, OK. And then here, what\nis the parameter to the distance method?",
    "start": "1573340",
    "end": "1578919"
  },
  {
    "text": "Is it an object of\ntype coordinate? self.center is an object\nof type coordinate, yes.",
    "start": "1578920",
    "end": "1586530"
  },
  {
    "text": "So now, let's look\nat is_inside2. What is the type of self.center?",
    "start": "1586530",
    "end": "1591600"
  },
  {
    "text": "STUDENT: Coordinate. ANA BELL: Coordinate. And we're running\nthe distance method on this object of\ntype coordinate.",
    "start": "1591600",
    "end": "1597370"
  },
  {
    "text": "And what is the object in\nthe parameter list here? What's its type?",
    "start": "1597370",
    "end": "1602583"
  },
  {
    "text": "STUDENT: Coordinate. ANA BELL: Coordinate. So when we wrote\nthe distance method, does it matter which object\nwe call the method on",
    "start": "1602583",
    "end": "1611220"
  },
  {
    "text": "to get the distance\nbetween these two points? No, right? Because the distance between--",
    "start": "1611220",
    "end": "1617259"
  },
  {
    "text": "saying I want the distance\nbetween this point and this point is\nthe same as saying I want the distance between\nthis point and this point.",
    "start": "1617260",
    "end": "1625090"
  },
  {
    "text": "It's just the\norder is different. So just the way that this\ndistance method works,",
    "start": "1625090",
    "end": "1632140"
  },
  {
    "text": "it doesn't actually matter which\nobject I call the method on,",
    "start": "1632140",
    "end": "1637950"
  },
  {
    "text": "as long as they're both corded\nobjects, which they are. ",
    "start": "1637950",
    "end": "1643855"
  },
  {
    "text": "Does that make sense? Is that all right? Any questions about this for\nthose who were in the no pot? Yeah.",
    "start": "1643855",
    "end": "1648900"
  },
  {
    "text": "STUDENT: So there's\nno [INAUDIBLE]",
    "start": "1648900",
    "end": "1653990"
  },
  {
    "text": "ANA BELL: self.center? self.center is an object of\ntype coordinate, not circle.",
    "start": "1653990",
    "end": "1660860"
  },
  {
    "text": "So self is a circle because self\nis talking about me, the class",
    "start": "1660860",
    "end": "1666890"
  },
  {
    "text": "that I'm currently defining. And the class I'm currently\ndefining is a circle.",
    "start": "1666890",
    "end": "1672149"
  },
  {
    "text": "But self.center--\nwe even wrote code-- we would like to enforce that\nit is a coordinate object.",
    "start": "1672150",
    "end": "1680115"
  },
  {
    "start": "1680115",
    "end": "1686400"
  },
  {
    "text": "So we could have put parentheses\naround this self.center, if we wanted to, and then\ncall the distance on that.",
    "start": "1686400",
    "end": "1692620"
  },
  {
    "text": "Does that make sense? OK.",
    "start": "1692620",
    "end": "1697750"
  },
  {
    "text": "All right, so that's all I had\nregarding the circle class. Now, we're going to switch\ngears and we're going",
    "start": "1697750",
    "end": "1703150"
  },
  {
    "text": "to look at fractions-- so numerator/denominator\nsituation here.",
    "start": "1703150",
    "end": "1708710"
  },
  {
    "text": "So we're going to create a\nnew data type to represent a number as a fraction.",
    "start": "1708710",
    "end": "1715250"
  },
  {
    "text": "So first thing we need to do\nis make the design decision-- what data will\nrepresent our fraction?",
    "start": "1715250",
    "end": "1721370"
  },
  {
    "text": "So think about it. You guys tell me. What do you think? What's a reasonable set of\ndata that could represent",
    "start": "1721370",
    "end": "1728290"
  },
  {
    "text": "our number as a fraction?  When you think of a-- yeah?",
    "start": "1728290",
    "end": "1734690"
  },
  {
    "text": "STUDENT: [INAUDIBLE].  ANA BELL: Yeah, a\nset of two things,",
    "start": "1734690",
    "end": "1740410"
  },
  {
    "text": "maybe integers, one\nrepresenting the numerator, the thing above the line,\nand one the denominator,",
    "start": "1740410",
    "end": "1746980"
  },
  {
    "text": "the thing below the line. Good, that's exactly\nwhat I had in mind. What are some\nbehaviors of fractions?",
    "start": "1746980",
    "end": "1754399"
  },
  {
    "text": "You guys tell me. What things should fractions do?",
    "start": "1754400",
    "end": "1759910"
  },
  {
    "text": "Yeah? STUDENT: [INAUDIBLE]. ANA BELL: Yeah.",
    "start": "1759910",
    "end": "1765260"
  },
  {
    "text": "Yes, adding them, multiplying\nfractions together, dividing them, inverting\na fraction also something",
    "start": "1765260",
    "end": "1772310"
  },
  {
    "text": "we could do, so 1 over what it\ncurrently is, things like that. All right, so we're going\nto write it together.",
    "start": "1772310",
    "end": "1778230"
  },
  {
    "text": "The full code is actually\nin the Python file. So mostly, I'm going to\ngo through the slides, just because it's incremental,\nso it's easier for me",
    "start": "1778230",
    "end": "1785159"
  },
  {
    "text": "to talk about it. But the exact full code is\nalready in the Python file, if you're running it later.",
    "start": "1785160",
    "end": "1792100"
  },
  {
    "text": "So the first thing\nwe're going to do is create this fraction class. And I'm actually going to\nname it SimpleFraction instead",
    "start": "1792100",
    "end": "1799390"
  },
  {
    "text": "of fraction because\nwe're going to improve upon this SimpleFraction\nobject in a little bit.",
    "start": "1799390",
    "end": "1806059"
  },
  {
    "text": "So this one I'm just going\nto call SimpleFraction. Like before, its parent is\nthe generic Python object.",
    "start": "1806060",
    "end": "1814600"
  },
  {
    "text": "So again, very, very simple. It doesn't do\nanything special yet.",
    "start": "1814600",
    "end": "1821860"
  },
  {
    "text": "The first method we need to\nwrite is the init method. So how do we initialize\na fraction object?",
    "start": "1821860",
    "end": "1827140"
  },
  {
    "text": "Obviously, we don't want the\nnumerator or the denominator to be empty. So when we create a\nSimpleFraction object,",
    "start": "1827140",
    "end": "1833690"
  },
  {
    "text": "we want the user to tell us\nthe values for the numerator and the denominator. So those are the two parameters\nthat I would love the user",
    "start": "1833690",
    "end": "1841630"
  },
  {
    "text": "to initiate this fraction with. And then what will be\nthe two data attributes",
    "start": "1841630",
    "end": "1850230"
  },
  {
    "text": "that we had decided on? Well, numerator-- so\nself.num and self.denom will",
    "start": "1850230",
    "end": "1855960"
  },
  {
    "text": "be the two data attributes. So self.num and self.denom\nare data attributes. And they're going\nto be set initially",
    "start": "1855960",
    "end": "1862860"
  },
  {
    "text": "to whatever is passed in\nthat constructor call.",
    "start": "1862860",
    "end": "1869410"
  },
  {
    "text": "OK. So far so good? Let's write a method that\nhelps us multiply two fraction",
    "start": "1869410",
    "end": "1875310"
  },
  {
    "text": "objects together. So we'll call it times. So this times method will be\ncalled on an object, the thing",
    "start": "1875310",
    "end": "1882420"
  },
  {
    "text": "before the dot. That object, the\nthing before the dot, will get mapped to self.",
    "start": "1882420",
    "end": "1887970"
  },
  {
    "text": "And then the thing in\nthe parentheses, the one other parameter, will\nbe mapped to oth.",
    "start": "1887970",
    "end": "1895350"
  },
  {
    "text": "So how do we multiply two\nfraction objects together? Take the numerators, multiply\nthem, take the denominators,",
    "start": "1895350",
    "end": "1901920"
  },
  {
    "text": "multiply them, you've\ngot your new numerator and you've got your\nnew denominator. So how do we grab the numerators\nof both of these objects?",
    "start": "1901920",
    "end": "1910150"
  },
  {
    "text": "So the numerator of\nthe thing before the dot that maps to\nself is self.num.",
    "start": "1910150",
    "end": "1917640"
  },
  {
    "text": "And the numerator of\nthe other object that's going to be in\nthe parameter list",
    "start": "1917640",
    "end": "1922680"
  },
  {
    "text": "is the name of my parameter,\noth dot their numerator, num.",
    "start": "1922680",
    "end": "1930340"
  },
  {
    "text": "Everyone OK so far? Yes, OK. I saw some head nods.",
    "start": "1930340",
    "end": "1935840"
  },
  {
    "text": "That's good. The denominator\nwill be the same. So my new denominator is just\nmultiplying my denominator,",
    "start": "1935840",
    "end": "1942470"
  },
  {
    "text": "the thing before the\ndot, with the thing in the parameter's denominator.",
    "start": "1942470",
    "end": "1947970"
  },
  {
    "text": "So I've got my new numerator,\nmy new denominator. And all I'm going to\ndo is do the division and return this value.",
    "start": "1947970",
    "end": "1953850"
  },
  {
    "text": "What's the type of\nthe return here? What's this method\ngoing to return? What type? STUDENT: A float? ANA BELL: A float, exactly.",
    "start": "1953850",
    "end": "1960000"
  },
  {
    "text": "Yeah, good. Yep, because all I'm doing\nis dividing one number by another number. ",
    "start": "1960000",
    "end": "1967600"
  },
  {
    "text": "OK, perfect. So that's what\nI've already said.",
    "start": "1967600",
    "end": "1973820"
  },
  {
    "text": "Now, we can define\nanother method, plus, to add two fraction\nobjects together.",
    "start": "1973820",
    "end": "1979610"
  },
  {
    "text": "Very similar thing,\nexcept the top is going to be slightly\ndifferent, right? You take the numerator of\none times the denominator",
    "start": "1979610",
    "end": "1986750"
  },
  {
    "text": "of the other plus the\nnumerator of the other times the denominator of the first\none, the criss-cross thing.",
    "start": "1986750",
    "end": "1993800"
  },
  {
    "text": "The denominator is the\nsame, just multiply the denom's together. And again, we return\nthe division-- top",
    "start": "1993800",
    "end": "1999650"
  },
  {
    "text": "divided by bottom-- again,\nthe return of this method will be a float.",
    "start": "1999650",
    "end": "2004880"
  },
  {
    "text": "So even though I'm multiplying\nor adding these two fraction objects together, my\nreturn will be a float.",
    "start": "2004880",
    "end": "2010780"
  },
  {
    "text": "Fine. So let's run the code. I'm creating two simple\nfraction objects.",
    "start": "2010780",
    "end": "2017340"
  },
  {
    "text": "First one is going\nto be accessed using variable named f1. So this one represents\nthe number 3 over 4.",
    "start": "2017340",
    "end": "2025780"
  },
  {
    "text": "Second one is accessed\nby variable named f2. And this one represents\nthe fraction 1 over 4.",
    "start": "2025780",
    "end": "2034820"
  },
  {
    "text": "So now, if I access\nthe numerator of f1, Python says, well, what's\nthe object before the dot?",
    "start": "2034820",
    "end": "2041640"
  },
  {
    "text": "It's f1. So what is your numerator? Well, I set it to 3. So this one tells me it's 3.",
    "start": "2041640",
    "end": "2047430"
  },
  {
    "text": "Pretty simple. Same thing with the\ndenominator of f1 again, it looks at the\nthing before the dot.",
    "start": "2047430",
    "end": "2053580"
  },
  {
    "text": "It's a fraction object. It says, do you have a\ndenom data attribute? You do. And its value is 4.",
    "start": "2053580",
    "end": "2059070"
  },
  {
    "text": "So that's 4. Now, what's the\nresult of f1.plus(f2)?",
    "start": "2059070",
    "end": "2065649"
  },
  {
    "text": "Super weird way to write it. But it's what we've got so far. So the thing before\nthe dot is an object.",
    "start": "2065650",
    "end": "2074609"
  },
  {
    "text": "It's a simple fraction object. And the thing before\nthe dot, remember,",
    "start": "2074610",
    "end": "2079940"
  },
  {
    "text": "maps to self in\nmy parameter list because it's just a function.",
    "start": "2079940",
    "end": "2085559"
  },
  {
    "text": "So like usual functions\na bunch of lectures ago, we basically map the\nactual parameters",
    "start": "2085560",
    "end": "2091730"
  },
  {
    "text": "when we run the function to the\nformal parameters, the things from my function definition.",
    "start": "2091730",
    "end": "2097430"
  },
  {
    "text": "So the actual\nparameter here for self is the thing before the dot, f1.",
    "start": "2097430",
    "end": "2103270"
  },
  {
    "text": "And the parameter f2\ngets mapped to oth.",
    "start": "2103270",
    "end": "2108560"
  },
  {
    "text": "That's how we read that. So this is just\ndoing the addition. So this will give me 1.0\nbecause it's a float.",
    "start": "2108560",
    "end": "2118369"
  },
  {
    "text": "Same with the the, thing\nbefore the dot maps to self. And every other parameter\nin the parameter list",
    "start": "2118370",
    "end": "2123890"
  },
  {
    "text": "maps to everything\nelse except for self. So this one will do 3\nover 16 to give me 0.1875.",
    "start": "2123890",
    "end": "2132750"
  },
  {
    "text": "OK. Everyone OK so far? The trick here is to remember\nthat the thing before the dot",
    "start": "2132750",
    "end": "2138590"
  },
  {
    "text": "maps to self in the\nmethod definition. And then everything else maps\nto everything other than self.",
    "start": "2138590",
    "end": "2146980"
  },
  {
    "text": "OK. I'm glad everything's\nOK so far because I'm going to get you to\nwrite this code here.",
    "start": "2146980",
    "end": "2154130"
  },
  {
    "text": "It looks like a lot,\nbut the first half of it is just redefining the init\nmethod for SimpleFraction.",
    "start": "2154130",
    "end": "2161290"
  },
  {
    "text": "I want you to write\nthese two methods. And they're going to be\none liners basically. So get_inverse will\nreturn something.",
    "start": "2161290",
    "end": "2170840"
  },
  {
    "text": "And it returns a float\nrepresenting 1 over myself. So if the input, as\nin this example here,",
    "start": "2170840",
    "end": "2178580"
  },
  {
    "text": "if I have a SimpleFraction\nobject representing 3 over 4, if I call get_inverse on it\nright here, f1.get_inverse,",
    "start": "2178580",
    "end": "2187650"
  },
  {
    "text": "self becomes f1. And I would like it to return,\nand therefore print, 4 over 3,",
    "start": "2187650",
    "end": "2194040"
  },
  {
    "text": "so 1.3333333. That's get_inverse. And then invert is a method\nthat doesn't return anything.",
    "start": "2194040",
    "end": "2202750"
  },
  {
    "text": "So it returns none. And instead, it just internally\nswitches the numerator",
    "start": "2202750",
    "end": "2208920"
  },
  {
    "text": "and the denominator of self. So self's numerator becomes\nwhatever its denominator is and the other way around.",
    "start": "2208920",
    "end": "2216400"
  },
  {
    "text": "So when you call it, this\none doesn't print anything. But instead, if we access f1's\nnumerator and denominator,",
    "start": "2216400",
    "end": "2222480"
  },
  {
    "text": "they will have been switched.  So this is down on line 133.",
    "start": "2222480",
    "end": "2233962"
  },
  {
    "text": "I'll Give you a\ncouple of moments. And then we can\nwrite it together. It should not be a lot of code.",
    "start": "2233962",
    "end": "2239880"
  },
  {
    "text": "OK. How do we write the get_inverse? So remember, you have\nto return something.",
    "start": "2239880",
    "end": "2245090"
  },
  {
    "text": "How do we return-- yea? 1 over-- STUDENT: Does it just\nreturn over self?",
    "start": "2245090",
    "end": "2250640"
  },
  {
    "text": "ANA BELL: 1 over self? So remember, self is an\nobject of type SimpleFraction.",
    "start": "2250640",
    "end": "2256970"
  },
  {
    "text": "So we need to manipulate its\nnumerator and the denominator, if we want to do the return,\nbecause if we just do this--",
    "start": "2256970",
    "end": "2265430"
  },
  {
    "text": "is it this one? Yep, this one here,\nthen Python says--",
    "start": "2265430",
    "end": "2270570"
  },
  {
    "text": "oh sorry, it's trying\nto divide 1, an integer, by an object of\ntype SimpleFraction.",
    "start": "2270570",
    "end": "2277710"
  },
  {
    "text": "And that's the error\nthat we get here. And it doesn't know how to do\na division between an integer and a SimpleFraction.",
    "start": "2277710",
    "end": "2283530"
  },
  {
    "text": "So how can we do that by\nworking with actual numbers that are part of my simple fraction?",
    "start": "2283530",
    "end": "2288920"
  },
  {
    "start": "2288920",
    "end": "2297400"
  },
  {
    "text": "Anyone? Yeah? STUDENT: [INAUDIBLE]. ",
    "start": "2297400",
    "end": "2305802"
  },
  {
    "text": "ANA BELL: self.denom\ndivided by self.num. Yeah, we can do that,\nyep, or 1 over self.num",
    "start": "2305802",
    "end": "2312320"
  },
  {
    "text": "divided by self.denom. That's also fine. Yeah, but this is a\nlittle bit cleaner. So now, denom is\nan integer, right?",
    "start": "2312320",
    "end": "2318920"
  },
  {
    "text": "Because when we create\nit, we pass in int. So denom and num\nare integers, which",
    "start": "2318920",
    "end": "2324560"
  },
  {
    "text": "means that Python knows how to\ndo a division between a number and another number, yeah.",
    "start": "2324560",
    "end": "2331579"
  },
  {
    "text": "So if we run that, now it\nprints 1.33333 exactly.",
    "start": "2331580",
    "end": "2338720"
  },
  {
    "text": "OK. How do we do the invert\nfunction-- method, sorry.",
    "start": "2338720",
    "end": "2344395"
  },
  {
    "text": "Yeah? Sorry, go ahead. STUDENT: I first\nassigned [INAUDIBLE]",
    "start": "2344395",
    "end": "2351860"
  },
  {
    "text": "equals self.numerator. ANA BELL: Yep. STUDENT: [INAUDIBLE].",
    "start": "2351860",
    "end": "2356930"
  },
  {
    "start": "2356930",
    "end": "2363040"
  },
  {
    "text": "ANA BELL: Yep. STUDENT: [INAUDIBLE] is\nequal to new_num [INAUDIBLE]..",
    "start": "2363040",
    "end": "2370714"
  },
  {
    "start": "2370715",
    "end": "2377630"
  },
  {
    "text": "ANA BELL: Like that, yeah. Yep, that's one way to do it.",
    "start": "2377630",
    "end": "2383670"
  },
  {
    "text": "Yep, so you can see now\naccessing the new numerator and denominator\ngives me 4 over 3. Any other ways that\nyou've done it?",
    "start": "2383670",
    "end": "2389280"
  },
  {
    "text": "Yeah? STUDENT: I used the [INAUDIBLE]",
    "start": "2389280",
    "end": "2402800"
  },
  {
    "text": "ANA BELL: Yep, the tuple trick. I like it. self.num, yep.",
    "start": "2402800",
    "end": "2409270"
  },
  {
    "text": "Perfect. Yes? STUDENT: [INAUDIBLE] I just\nsaid self.num equals self.denom.",
    "start": "2409270",
    "end": "2416190"
  },
  {
    "text": "But I didn't say both of them. ANA BELL: Oh, OK, yeah. That also works, yeah. ",
    "start": "2416190",
    "end": "2422170"
  },
  {
    "text": "Perfect. All very valid ways\nof doing it, nice. Yep, so notice there's\nno return for this one.",
    "start": "2422170",
    "end": "2429220"
  },
  {
    "text": "I didn't want to\nreturn anything. Python will automatically\nreturn none. And these internal\nnumerator and denominators",
    "start": "2429220",
    "end": "2436210"
  },
  {
    "text": "will have been flipped, perfect. Questions about this code?",
    "start": "2436210",
    "end": "2443580"
  },
  {
    "text": "OK. So let's try it out\na little bit more. So here, I've got\nthese two additions.",
    "start": "2443580",
    "end": "2451980"
  },
  {
    "text": "So this is exactly\nwhat we had previously, the exact same code.",
    "start": "2451980",
    "end": "2457140"
  },
  {
    "text": "What's weird though-- and you\nmight have been weirded out by this too when we first ran\nit-- is I am doing operations",
    "start": "2457140",
    "end": "2465690"
  },
  {
    "text": "with two fraction objects. And yet, the plus\nand the times methods",
    "start": "2465690",
    "end": "2471270"
  },
  {
    "text": "give me floats, which is\na little weird, right? Ideally, if we're working\nwith fraction objects,",
    "start": "2471270",
    "end": "2477420"
  },
  {
    "text": "I would like the return\nto also be a fraction object, so I can then work with\nmole fraction objects later on.",
    "start": "2477420",
    "end": "2483509"
  },
  {
    "text": "That's one weird thing. Another weird thing is if we\nthen print one of our objects",
    "start": "2483510",
    "end": "2489599"
  },
  {
    "text": "that we've created,\nf1 in this case-- we use print statements often,\nto debug and things like that.",
    "start": "2489600",
    "end": "2495060"
  },
  {
    "text": "If I use the print statement\non an object of a type that I've created-- in this case, a SimpleFraction--",
    "start": "2495060",
    "end": "2500970"
  },
  {
    "text": "Python spits this out. It says, hey, your object is an\nobject of type SimpleFraction",
    "start": "2500970",
    "end": "2507900"
  },
  {
    "text": "at this memory location. No thank you. That's not very\nuseful to me, right?",
    "start": "2507900",
    "end": "2513460"
  },
  {
    "text": "What I'd like to know is\nmaybe a nice representation of my fraction object, like 3/4.",
    "start": "2513460",
    "end": "2520690"
  },
  {
    "text": "I don't care about what\nmemory location it's at. And one more thing we'd\nlike to try to do--",
    "start": "2520690",
    "end": "2526470"
  },
  {
    "text": "this is a class that\nrepresents something numerical. So something that people\nmight instinctually want to do",
    "start": "2526470",
    "end": "2534690"
  },
  {
    "text": "is to use operators like\nthe star, or the plus, or the slash to divide, add,\nmultiply these fraction things.",
    "start": "2534690",
    "end": "2543339"
  },
  {
    "text": "But if we run the star\noperator between object of type SimpleFraction\ntimes another object of type",
    "start": "2543340",
    "end": "2551250"
  },
  {
    "text": "SimpleFraction, Python\ngives us an error. And I'll even show you\nthe error, so here.",
    "start": "2551250",
    "end": "2564109"
  },
  {
    "text": "So here, I am\nprinting my object. So it spits this out, which\nis fine, but not what I want.",
    "start": "2564110",
    "end": "2570410"
  },
  {
    "text": "This one, obviously, we've seen\nthis already prints this out. And then if I try to multiply\nmy two SimpleFraction",
    "start": "2570410",
    "end": "2576079"
  },
  {
    "text": "objects together, it says,\nI don't know how to do that.",
    "start": "2576080",
    "end": "2581780"
  },
  {
    "text": "So it's unsupported\noperand types. So the operand SimpleFraction\nand SimpleFraction are not supported with\nthe star operator.",
    "start": "2581780",
    "end": "2589010"
  },
  {
    "text": "Well, no surprise there. How is Python\nsupposed to know how to multiply two SimpleFraction\nobjects together?",
    "start": "2589010",
    "end": "2594800"
  },
  {
    "text": "Right before I even\nran this program, it didn't even know what a\nsimple fraction object was.",
    "start": "2594800",
    "end": "2600260"
  },
  {
    "text": "So we need to tell it\nall of these details. And we will do just that.",
    "start": "2600260",
    "end": "2606570"
  },
  {
    "text": "So all of these operators-- print, len that\nwe've been using,",
    "start": "2606570",
    "end": "2612920"
  },
  {
    "text": "star, add, less than, greater\nthan, even the square brackets to index into something,\nthese are actually",
    "start": "2612920",
    "end": "2620090"
  },
  {
    "text": "shorthand notations. They're really common\noperations that you want to do.",
    "start": "2620090",
    "end": "2625680"
  },
  {
    "text": "And Python lets you use these\ncommon operations instead",
    "start": "2625680",
    "end": "2630750"
  },
  {
    "text": "of writing these really\nverbose function names. But really, behind\nthe scenes, all",
    "start": "2630750",
    "end": "2638270"
  },
  {
    "text": "of these shorthand operations\nactually run a method.",
    "start": "2638270",
    "end": "2643350"
  },
  {
    "text": "Again, not a secret-- I'm not lowering my voice\nbecause it's a secret, but it's just really cool. So all of these operations, like\nthe multiplication or the print",
    "start": "2643350",
    "end": "2651990"
  },
  {
    "text": "statement, just gets\nreplaced with a method. And the method names\nlook like this.",
    "start": "2651990",
    "end": "2658170"
  },
  {
    "text": "They are dunder methods,\njust like the init method was a special method\nthat Python ran when something special happened,\nlike you're creating an object.",
    "start": "2658170",
    "end": "2666280"
  },
  {
    "text": "Well, when something\nspecial happens, like you're using the plus\noperator between an object",
    "start": "2666280",
    "end": "2671339"
  },
  {
    "text": "of your type and\nsomething else, Python will also run this\nspecial dunder method behind the scenes.",
    "start": "2671340",
    "end": "2678450"
  },
  {
    "text": "And same here, if I want\nto multiply my object with something else, Python will\nrun this special dunder method",
    "start": "2678450",
    "end": "2684330"
  },
  {
    "text": "behind the scenes. If I want to print\nan object of my type, Python will run this\nspecial dunder method",
    "start": "2684330",
    "end": "2690510"
  },
  {
    "text": "behind the scenes. Even something\nlike casting, if I want to cast my\nobject to a float,",
    "start": "2690510",
    "end": "2696540"
  },
  {
    "text": "or to a string, or\nsomething, Python will run this special dunder\nmethod behind the scenes.",
    "start": "2696540",
    "end": "2701835"
  },
  {
    "text": "And then there's a whole\nbunch of other ones, even indexing into a list--\nor sorry, not a list, indexing",
    "start": "2701835",
    "end": "2706950"
  },
  {
    "text": "into an object of your type. So if you make an object\nlike a queue or a stack, where you know you have a\nbunch of sequences of objects,",
    "start": "2706950",
    "end": "2714390"
  },
  {
    "text": "you can tell Python how to index\ninto an object of your type, into an object that's a queue.",
    "start": "2714390",
    "end": "2721259"
  },
  {
    "text": "So all of these things-- all of these methods need\nto be implemented somewhere.",
    "start": "2721260",
    "end": "2727740"
  },
  {
    "text": "Now, most of them are not\nimplemented in the basic Python",
    "start": "2727740",
    "end": "2732990"
  },
  {
    "text": "object, except for the str. So the str method actually\njust prints the memory location",
    "start": "2732990",
    "end": "2738480"
  },
  {
    "text": "of this object. That's exactly what we had\nseen by the default behavior. But none of these other\nones are really implemented.",
    "start": "2738480",
    "end": "2745329"
  },
  {
    "text": "And so if you want the\nobject that you're currently writing to work with\nthe star, or the plus,",
    "start": "2745330",
    "end": "2751770"
  },
  {
    "text": "or the double equal sign\nto test for equality between this object\nand something else, you have to write the method\nin your class definition.",
    "start": "2751770",
    "end": "2762260"
  },
  {
    "text": "So you have to implement\nit to tell Python that this is what you\nwant to do when somebody uses this special\nshorthand notation.",
    "start": "2762260",
    "end": "2769890"
  },
  {
    "text": "So let's start with\nthe print because it's the most basic thing you\nprobably want to implement when you create a new data type.",
    "start": "2769890",
    "end": "2776120"
  },
  {
    "text": "For debugging purposes, you'll\nfind yourself instinctually saying, hey, print f1 to\nprint this fraction object",
    "start": "2776120",
    "end": "2782839"
  },
  {
    "text": "to see what it looks like. And so the str method is one\nof the really basic things you should implement right\nafter the init method.",
    "start": "2782840",
    "end": "2791590"
  },
  {
    "text": "So let's look at\nit in the context of the coordinate object. So here, I've got my\ncoordinate object, 3, 4.",
    "start": "2791590",
    "end": "2798340"
  },
  {
    "text": "And even when I print\nthis coordinate object, Python tells me this still\nuninformative message",
    "start": "2798340",
    "end": "2803920"
  },
  {
    "text": "that this object is of type\ncoordinate at this memory location. OK, I don't care.",
    "start": "2803920",
    "end": "2810270"
  },
  {
    "text": "Instead, what I would\nreally like to do is say, hey, I want to represent\na coordinate object by something like this--",
    "start": "2810270",
    "end": "2816690"
  },
  {
    "text": "angle bracket the value\nof the x-coordinate comma the value of the y-coordinate\nclose angle bracket.",
    "start": "2816690",
    "end": "2824120"
  },
  {
    "text": "So that would be a far more\ninformative print statement than what memory location\nthis thing is at.",
    "start": "2824120",
    "end": "2830480"
  },
  {
    "text": "So let's do that. Well, here we are-- our coordinate object,\nthe distance the init",
    "start": "2830480",
    "end": "2839960"
  },
  {
    "text": "like we had before. And here, I'm defining my\nstr method, so __str__,",
    "start": "2839960",
    "end": "2846942"
  },
  {
    "text": "no other parameters\nexcept for self, so me calling this\nmethod on an object.",
    "start": "2846942",
    "end": "2853710"
  },
  {
    "text": "And what is this going to do? It will return not\nprint, return a string.",
    "start": "2853710",
    "end": "2862570"
  },
  {
    "text": "And the string is going\nto represent the thing you want to be printed out. So it returns a string,\ndoesn't print it.",
    "start": "2862570",
    "end": "2869019"
  },
  {
    "text": "However you want to make\nup the string is up to you. So here, I've just\nused concatenation",
    "start": "2869020",
    "end": "2874750"
  },
  {
    "text": "of a bunch of stuff. So I'm concatenating\nthe angle bracket with the x value of\nmy current object cast",
    "start": "2874750",
    "end": "2882820"
  },
  {
    "text": "to a string, concatenated\nwith the comma, concatenated with the y value of my current\nobject cast to a string,",
    "start": "2882820",
    "end": "2889270"
  },
  {
    "text": "concatenated with a\nclosed angle bracket. That's the design\ndecision we made",
    "start": "2889270",
    "end": "2894280"
  },
  {
    "text": "for how a coordinate\nobject should be printed. Everyone OK so far?",
    "start": "2894280",
    "end": "2901099"
  },
  {
    "text": "OK. So if you want to use an\nf-string to make up this thing",
    "start": "2901100",
    "end": "2906590"
  },
  {
    "text": "to return, totally fine. If you want to make a\nvariable in between the return and the definition here that you\njust keep concatenating with,",
    "start": "2906590",
    "end": "2914990"
  },
  {
    "text": "so you can concatenate it\nwith new lines and things like that, also totally fine. At the end, you\njust have to return",
    "start": "2914990",
    "end": "2920840"
  },
  {
    "text": "that string that\nrepresents the thing you want to be printed out.",
    "start": "2920840",
    "end": "2925970"
  },
  {
    "text": "So now, let's see what happens\nwhen we actually run the code. So here, I'm creating\na coordinate object.",
    "start": "2925970",
    "end": "2932420"
  },
  {
    "text": "And then I'm printing\nthat coordinate object. Well, Python says, hey, you\njust called a special shorthand",
    "start": "2932420",
    "end": "2938920"
  },
  {
    "text": "notation on an object\nof type coordinate. Let me see if you\nimplemented the str method.",
    "start": "2938920",
    "end": "2944530"
  },
  {
    "text": "It looks in the\nclass definition. It sees the str method\nimplemented here. And then it runs the\ncode inside and says,",
    "start": "2944530",
    "end": "2951710"
  },
  {
    "text": "oh, you want to grab c's\nx value and c's y value and concatenate it\nwith these things here.",
    "start": "2951710",
    "end": "2957400"
  },
  {
    "text": "Sure, I can do that for you. And then it goes and prints\nthis out to the screen.",
    "start": "2957400",
    "end": "2964340"
  },
  {
    "text": "OK. Very cool, right? Now, we can decide how to\nprint objects that we create.",
    "start": "2964340",
    "end": "2970130"
  },
  {
    "text": "All right, so let's try to wrap\nour minds around types here. So if we print this\nc, c is an instance",
    "start": "2970130",
    "end": "2980670"
  },
  {
    "text": "of a coordinate object. It's an actual object\nthat we're manipulating.",
    "start": "2980670",
    "end": "2986160"
  },
  {
    "text": "It's not the class definition. It's not anything\nabstract like that. It's an actual object, like the\ninteger 3 is an actual object.",
    "start": "2986160",
    "end": "2994480"
  },
  {
    "text": "So if we print that c,\nPython uses the str method. Well, what if we\nprint the type of c?",
    "start": "2994480",
    "end": "2999990"
  },
  {
    "text": "Somebody tell me,\nwhat's the type of c? STUDENT: Coordinate.",
    "start": "2999990",
    "end": "3006815"
  },
  {
    "text": "ANA BELL: Coordinate. Yeah, it's the class\nname that we defined. So when we print the\ntype of c, Python says,",
    "start": "3006815",
    "end": "3012760"
  },
  {
    "text": "this is a class coordinate,\nwhich makes sense because if we just replace\ntype of c here with what it is,",
    "start": "3012760",
    "end": "3019720"
  },
  {
    "text": "coordinate, we'll get\nthe same print statement. If we just print\ncoordinate, Python says this is a class\nof type coordinate.",
    "start": "3019720",
    "end": "3026850"
  },
  {
    "text": "All right, so those two\nlines are equivalent. And then let me blow your\nminds a little bit more.",
    "start": "3026850",
    "end": "3032839"
  },
  {
    "text": "What if we print the\ntype of coordinate? Well, what is coordinate?",
    "start": "3032840",
    "end": "3038420"
  },
  {
    "text": "It's a type.  We're defining a new type in\nPython called a coordinate.",
    "start": "3038420",
    "end": "3046589"
  },
  {
    "text": "So coordinate is a new\ndata type in Python. So its type is type.",
    "start": "3046590",
    "end": "3052190"
  },
  {
    "text": " So everything in Python\nis an object, even types.",
    "start": "3052190",
    "end": "3060050"
  },
  {
    "text": "OK. One more thing-- so we've\nused the type of something equals something\nelse when we checked",
    "start": "3060050",
    "end": "3066150"
  },
  {
    "text": "that the type of the circle's\ncenter was a coordinate. That's one way to\ncheck for types.",
    "start": "3066150",
    "end": "3071710"
  },
  {
    "text": "Another way is to use this\nisinstance function, just as an aside. So you can check that c\nis an instance of type",
    "start": "3071710",
    "end": "3081360"
  },
  {
    "text": "coordinate by using\nthis isinstance method. And this will tell you true. And just to draw a parallel,\nyou can say isinstance 3, int.",
    "start": "3081360",
    "end": "3091019"
  },
  {
    "text": "That would also say true because\n3 is an object of type integer. So it's just another\nway to check for types.",
    "start": "3091020",
    "end": "3098870"
  },
  {
    "text": "OK. So the remainder\nof this class, I would like to go back\nto our fraction class",
    "start": "3098870",
    "end": "3105520"
  },
  {
    "text": "and make it better. Now that we know\ndunder methods, let's",
    "start": "3105520",
    "end": "3113550"
  },
  {
    "text": "implement a whole bunch of\ndunder methods to help us and people who want to\nuse our class use it",
    "start": "3113550",
    "end": "3121020"
  },
  {
    "text": "in a more efficient way. So we're going to\nimplement the star operator, the plus operator.",
    "start": "3121020",
    "end": "3126269"
  },
  {
    "text": "We're going to\nimplement the print. And then we're\ngoing to implement converting to a float.",
    "start": "3126270",
    "end": "3133390"
  },
  {
    "text": "All right, so the first thing\nthat we should probably add is the str method\nbecause then it",
    "start": "3133390",
    "end": "3139990"
  },
  {
    "text": "will help us in\ndebugging when we print an object of type fraction. So let's define __str__--",
    "start": "3139990",
    "end": "3149369"
  },
  {
    "text": "again, no parameters\nexcept for self because that's the object\nwe're calling this method on.",
    "start": "3149370",
    "end": "3156990"
  },
  {
    "text": "And again, however you want to\nform this string is up to you. You can use f-strings\nor a variable",
    "start": "3156990",
    "end": "3162690"
  },
  {
    "text": "that you keep adding on to. I just did it straight in\nhere with concatenation.",
    "start": "3162690",
    "end": "3168100"
  },
  {
    "text": "So I've got the numerator\nslash the denominator as a very reasonable way\nto represent a string--",
    "start": "3168100",
    "end": "3173940"
  },
  {
    "text": "so 3/4 as 3 over 4.",
    "start": "3173940",
    "end": "3179210"
  },
  {
    "text": "OK. So one thing, I\nguess, to keep track of is if you're\nconcatenating, you just",
    "start": "3179210",
    "end": "3184730"
  },
  {
    "text": "have to remember to\ncast the strings, if it's a number or something\nthat's not a string.",
    "start": "3184730",
    "end": "3190370"
  },
  {
    "text": "So let's try it out. I've got three\nfraction objects here.",
    "start": "3190370",
    "end": "3195640"
  },
  {
    "text": "So the first two\nwe've already seen. So I've got a fraction\nrepresenting 3 over 4, a fraction\nrepresenting 1 over 4.",
    "start": "3195640",
    "end": "3202090"
  },
  {
    "text": "And f3 is now going to be a\nfraction representing 5 over 1.",
    "start": "3202090",
    "end": "3208480"
  },
  {
    "text": "If we print f1,\nagain, Python asks, hey did you implement\nan str method in your class definition?",
    "start": "3208480",
    "end": "3215740"
  },
  {
    "text": "Yes, you did. Good job. Let me use it. So then it uses this. So it grabs the numerator of f1\nslash the numerator of-- sorry,",
    "start": "3215740",
    "end": "3224380"
  },
  {
    "text": "the denominator of f1. So this will print 3,\nthe numerator of f1, slash the denominator of f1.",
    "start": "3224380",
    "end": "3232040"
  },
  {
    "text": "Same with f2,\nexcept that now it's going to grab f2's numerator\nand denominator, 1/4.",
    "start": "3232040",
    "end": "3240320"
  },
  {
    "text": "So notice, now it's\nnot doing the divisions like it did before-- or sorry, never mind. We're not there yet.",
    "start": "3240320",
    "end": "3246329"
  },
  {
    "text": "There's nothing to divide. It's just grabbing the\nnumerators and denominators and just printing them out.",
    "start": "3246330",
    "end": "3252680"
  },
  {
    "text": "It's not doing any divisions. Now when we print 5-- ",
    "start": "3252680",
    "end": "3260349"
  },
  {
    "text": "the fraction object representing\n5 over 1, it prints 5/1.",
    "start": "3260350",
    "end": "3265790"
  },
  {
    "text": "I don't like that\nbecause it looks weird. ",
    "start": "3265790",
    "end": "3271270"
  },
  {
    "text": "Do you like that? No. So then I'm going\nto have you fix it.",
    "start": "3271270",
    "end": "3277300"
  },
  {
    "text": "Change the str method\njust a little bit such that if the\ndenominator is 1, just",
    "start": "3277300",
    "end": "3285440"
  },
  {
    "text": "have it print the numerator. And otherwise,\nthe representation",
    "start": "3285440",
    "end": "3290480"
  },
  {
    "text": "should be as before,\nnumerator slash denominator. ",
    "start": "3290480",
    "end": "3297500"
  },
  {
    "text": "So this should be\ndown line 140-- ",
    "start": "3297500",
    "end": "3303980"
  },
  {
    "text": "where is it? ",
    "start": "3303980",
    "end": "3311260"
  },
  {
    "text": "Very far down, 265.",
    "start": "3311260",
    "end": "3318870"
  },
  {
    "text": "OK. Anyone have some code for me? ",
    "start": "3318870",
    "end": "3327260"
  },
  {
    "text": "Yes? STUDENT: [INAUDIBLE]. ",
    "start": "3327260",
    "end": "3338216"
  },
  {
    "text": "ANA BELL: Yep. STUDENT: And then\ndo an else statement and put the figures that\nwe had underneath the else?",
    "start": "3338217",
    "end": "3345030"
  },
  {
    "text": "ANA BELL: Yep, we\ncan do an else. That else is not\nneeded, I don't think, because if we dropped into the\nif, we just immediately return.",
    "start": "3345030",
    "end": "3352770"
  },
  {
    "text": "Otherwise, we would just\ndo the remaining thing, but perfectly fine. Yeah, and let's run it.",
    "start": "3352770",
    "end": "3359895"
  },
  {
    "text": " So a is a fraction\nrepresenting 1 over 4.",
    "start": "3359895",
    "end": "3365960"
  },
  {
    "text": "So it nicely printed 1 over 4. And b, the fraction 3\nover 1 is just printing 3.",
    "start": "3365960",
    "end": "3372560"
  },
  {
    "text": "Good. Questions about this code?",
    "start": "3372560",
    "end": "3378599"
  },
  {
    "text": "OK. For the remaining\nlecture though, we're not going to use this\nmodified, this nicer, better",
    "start": "3378600",
    "end": "3385065"
  },
  {
    "text": "str method. So let's just forget\nwhat we just did and just remember that\nit looks like this.",
    "start": "3385065",
    "end": "3390750"
  },
  {
    "text": " OK. So now, let's implement\nthe dunder methods",
    "start": "3390750",
    "end": "3396150"
  },
  {
    "text": "for addition, multiplication,\ndivision, things like that. So I'm going to do the\nmultiplication just",
    "start": "3396150",
    "end": "3401640"
  },
  {
    "text": "because it's not as long\nfor the numerator, so just convenience factor here. The left-hand side, I've got\nour old simple fraction code.",
    "start": "3401640",
    "end": "3411330"
  },
  {
    "text": "And the right-hand side\nhas my new fraction code. So the old SimpleFraction\ncode, remember,",
    "start": "3411330",
    "end": "3419309"
  },
  {
    "text": "had this times method\nthat took in self and oth",
    "start": "3419310",
    "end": "3424680"
  },
  {
    "text": "and calculated a new\nnumerator, a new denominator, and returned this.",
    "start": "3424680",
    "end": "3429690"
  },
  {
    "text": "Now, my new fraction code will\nno longer need to call times. So we're not even\ngoing to implement",
    "start": "3429690",
    "end": "3436140"
  },
  {
    "text": "a method called times. Instead, we're\ngoing to implement the method behind the scenes\nfor the shorthand notation star",
    "start": "3436140",
    "end": "3444930"
  },
  {
    "text": "to multiply two\nfraction objects. So we need to\nimplement def __mul__.",
    "start": "3444930",
    "end": "3452460"
  },
  {
    "text": "Parameter list is the\nsame because we still have a thing before\nthe star and a thing after the star as\nthe two fraction",
    "start": "3452460",
    "end": "3458680"
  },
  {
    "text": "objects we'd like to multiply. Within the code itself,\nthe calculations",
    "start": "3458680",
    "end": "3464500"
  },
  {
    "text": "of the new numerator\nand the denominator are the same as well. We're still grabbing the\nnumerators of self and other,",
    "start": "3464500",
    "end": "3470800"
  },
  {
    "text": "the denominators\nof self and other, and multiplying those together. What's different is\nin the returns, right?",
    "start": "3470800",
    "end": "3477900"
  },
  {
    "text": "What was the return type\nfor the times method? ",
    "start": "3477900",
    "end": "3483775"
  },
  {
    "text": "STUDENT: [INAUDIBLE]. ANA BELL: A decimal. Yeah, a float, exactly. What's the return type of\nmy new method, the mul?",
    "start": "3483775",
    "end": "3493942"
  },
  {
    "text": "STUDENT: A fraction? ANA BELL: A fraction, exactly. So yes, I am operating\nwith fraction objects.",
    "start": "3493942",
    "end": "3499990"
  },
  {
    "text": "So I'm expecting that the return\ntype of this method, the star,",
    "start": "3499990",
    "end": "3505770"
  },
  {
    "text": "__mul__, is also\na fraction object. So then I can just keep\nworking with fraction objects",
    "start": "3505770",
    "end": "3511020"
  },
  {
    "text": "throughout my code, not\nhaving to worry about whether this thing is\nnow a float or not. All right, so how are we\ncreating this fraction object?",
    "start": "3511020",
    "end": "3519060"
  },
  {
    "text": "Well, just like we would create\na regular fraction object up in the previous slides, so here.",
    "start": "3519060",
    "end": "3526200"
  },
  {
    "text": "Here's an example of us\ncreating a new fraction object-- numerator 1, denominator 4.",
    "start": "3526200",
    "end": "3532290"
  },
  {
    "text": "Well, same here, this method\nwill return a new fraction object whose numerator is the\nthing that I just calculated,",
    "start": "3532290",
    "end": "3540270"
  },
  {
    "text": "the top. And the denominator is the thing\nthat I just calculated, bottom.",
    "start": "3540270",
    "end": "3546635"
  },
  {
    "text": "Does that make sense?  OK.",
    "start": "3546635",
    "end": "3552440"
  },
  {
    "text": "So this one returns a float. This one returns a fraction.",
    "start": "3552440",
    "end": "3558030"
  },
  {
    "text": "Let's run it. So a is fraction 1\nover 4. b is a fraction representing 3 over 4.",
    "start": "3558030",
    "end": "3563930"
  },
  {
    "text": "Good, those are the numbers\nwe've been working with. If we print a, the\nprint statement says, this is the fraction object 1/4,\nwhose representation is 1/4.",
    "start": "3563930",
    "end": "3573320"
  },
  {
    "text": "Now, if I use the star\noperator between a and b, the thing before\nthe star is kind",
    "start": "3573320",
    "end": "3579115"
  },
  {
    "text": "of like the thing\nbefore the dot. It's the self. It gets mapped to\nself in my __mul__.",
    "start": "3579115",
    "end": "3584630"
  },
  {
    "text": "And the thing after the\nstar, the second parameter so to speak, is the one\nparameter that my method takes,",
    "start": "3584630",
    "end": "3594200"
  },
  {
    "text": "other. So this will run the mul\nmethod behind the scenes.",
    "start": "3594200",
    "end": "3600339"
  },
  {
    "text": "So Python, when\nit sees that star, asks, do you have a\nmul method implemented in your class fraction?",
    "start": "3600340",
    "end": "3605890"
  },
  {
    "text": "Because the thing before the\nstar is a fraction object. Yes, we do.",
    "start": "3605890",
    "end": "3610900"
  },
  {
    "text": "What does it return? Well, it does the\nmultiplication. And in the end, the return of\nthis method is this thing here.",
    "start": "3610900",
    "end": "3617650"
  },
  {
    "text": "So I literally just made this-- I just copied this\nfrom the return",
    "start": "3617650",
    "end": "3622750"
  },
  {
    "text": "using the numbers of a and b. So it creates a new fraction\nobject whose numerator is 3 and denominator is 16.",
    "start": "3622750",
    "end": "3630950"
  },
  {
    "text": "So c equals fraction parentheses\n3, 16, basically just",
    "start": "3630950",
    "end": "3637280"
  },
  {
    "text": "another fraction object. So now, when I\nprint c, It's going",
    "start": "3637280",
    "end": "3642520"
  },
  {
    "text": "to use the str method\nfor a fraction object because c is a fraction\nobject right there.",
    "start": "3642520",
    "end": "3649270"
  },
  {
    "text": "That's exactly what c was. So this will also\nprint the way we asked to print fraction\nobjects, numerator slash",
    "start": "3649270",
    "end": "3656480"
  },
  {
    "text": "denominator, 3/16. Everyone OK so far?",
    "start": "3656480",
    "end": "3661500"
  },
  {
    "start": "3661500",
    "end": "3667500"
  },
  {
    "text": "OK. So the following lines\nare all equivalent. ",
    "start": "3667500",
    "end": "3673600"
  },
  {
    "text": "Using the shorthand notation-- very nice, very Pythonic way\nto multiply two fractions",
    "start": "3673600",
    "end": "3679600"
  },
  {
    "text": "together. But behind the scenes, this\nis just running a method.",
    "start": "3679600",
    "end": "3685220"
  },
  {
    "text": "So of course, if\nyou really want to, you can just use the same\nold way of calling a method--",
    "start": "3685220",
    "end": "3692740"
  },
  {
    "text": "thing before the dot, dot,\nmethod name, parentheses, parameter list.",
    "start": "3692740",
    "end": "3698820"
  },
  {
    "text": "So here, thing before the dot\nis a dot the name of my method, __mul__, parentheses, all\nof the parameter list except",
    "start": "3698820",
    "end": "3707930"
  },
  {
    "text": "for the thing I'm calling it on. So those two are equivalent. And of course, last\ntime, I mentioned a way",
    "start": "3707930",
    "end": "3714980"
  },
  {
    "text": "to hopefully demystify\nrunning these methods where the self becomes this\nthing before the dot.",
    "start": "3714980",
    "end": "3721700"
  },
  {
    "text": "You could call the method on\nthe name of your data type,",
    "start": "3721700",
    "end": "3728030"
  },
  {
    "text": "the type that you're\ncurrently creating, fraction. So fraction is not an instance.",
    "start": "3728030",
    "end": "3733280"
  },
  {
    "text": "a was an instance. It was an actual\nobject that we created. But fraction is just\nthe name of my class.",
    "start": "3733280",
    "end": "3739050"
  },
  {
    "text": "So if you call the method\non the name of your class, then Python expects the\nfull parameter list--",
    "start": "3739050",
    "end": "3744980"
  },
  {
    "text": "so something for self,\nsomething for other, something for whatever\nparameters you have. And so there, we would\nexplicitly pass in both a and b",
    "start": "3744980",
    "end": "3752810"
  },
  {
    "text": "as part of my parameter\nlist because the thing before the dot is not an object. So it doesn't map it to self.",
    "start": "3752810",
    "end": "3759670"
  },
  {
    "text": "But I would never ever,\never run a line of code",
    "start": "3759670",
    "end": "3765390"
  },
  {
    "text": "like this, this last one here. This is just for\nyour information. It's non-Pythonic. It's just very verbose.",
    "start": "3765390",
    "end": "3772380"
  },
  {
    "text": "And so these dunder methods\nhelp us abstract away",
    "start": "3772380",
    "end": "3778720"
  },
  {
    "text": "a bunch of these details. So how annoying would it be\nto always use dot notation",
    "start": "3778720",
    "end": "3784450"
  },
  {
    "text": "when we want to multiply an\ninteger with another integer? Can you imagine constantly\nwriting 3.__mul__(4)?",
    "start": "3784450",
    "end": "3792160"
  },
  {
    "text": "That would be very bad code. It would take forever to read. And so we're abstracting\naway all the details",
    "start": "3792160",
    "end": "3798010"
  },
  {
    "text": "for calling these methods into\nthese nice little shorthand notations. And as I said, these\nshorthand notations",
    "start": "3798010",
    "end": "3803260"
  },
  {
    "text": "exist for a lot of\ndifferent operations. We saw print. You can do length\ncomparisons, like equality,",
    "start": "3803260",
    "end": "3809529"
  },
  {
    "text": "even indexing into things. You can always\nabstract all of those away into shorthand notations.",
    "start": "3809530",
    "end": "3817930"
  },
  {
    "text": "And behind the scenes,\nthese methods will be run. OK. So big idea,\nexactly what I said,",
    "start": "3817930",
    "end": "3826045"
  },
  {
    "text": "all these special\noperations that we've been using already, behind the\nscenes, these methods get run.",
    "start": "3826045",
    "end": "3832910"
  },
  {
    "text": "And these methods were written\ninside the class definition for the types that\nwe've been using.",
    "start": "3832910",
    "end": "3838940"
  },
  {
    "text": "So when we index into a list, l\nsquare brackets 3 or whatever, there's a method being called\nbehind the scenes in the list",
    "start": "3838940",
    "end": "3846890"
  },
  {
    "text": "class to grab the\nelement at index 3. I don't remember the dunder\nmethod name for that,",
    "start": "3846890",
    "end": "3852650"
  },
  {
    "text": "but probably like __index__. I don't know. But there is some method\nbehind the scenes.",
    "start": "3852650",
    "end": "3859940"
  },
  {
    "text": "All right, let's do\na couple more things. Sorry? STUDENT: If we forget the\ndunder name for something,",
    "start": "3859940",
    "end": "3866820"
  },
  {
    "text": "is there a way to ask Python? ANA BELL: You can't\nask Python, but you can look at the documentation.",
    "start": "3866820",
    "end": "3872099"
  },
  {
    "text": "I think it's in python.org. There's a website that lists\nbasically everything that's",
    "start": "3872100",
    "end": "3878070"
  },
  {
    "text": "a dunder method, yeah,\nunder categories, like all the indexing type\nstuff, all the numerical type",
    "start": "3878070",
    "end": "3883410"
  },
  {
    "text": "stuff, yeah.  OK. So let's do one more thing.",
    "start": "3883410",
    "end": "3889360"
  },
  {
    "text": "Let's say that-- well, we're\nworking with fraction objects. And so the dunder methods\nthat we're writing",
    "start": "3889360",
    "end": "3896490"
  },
  {
    "text": "are now returning\nother fraction objects. So let's allow the\nuser the opportunity",
    "start": "3896490",
    "end": "3903540"
  },
  {
    "text": "to cast one of these\nfraction objects to a float, just in case they would like to\ngrab the float value of 3/16.",
    "start": "3903540",
    "end": "3914310"
  },
  {
    "text": "That's a very reasonable\nthing they might want to do. So let's get ahead\nof them and add that",
    "start": "3914310",
    "end": "3919440"
  },
  {
    "text": "as part of our class definition. So to cast things to a float,\nin this particular case,",
    "start": "3919440",
    "end": "3925720"
  },
  {
    "text": "the dunder method for\nthat is __float__. And all it's going to do is\ngrab the numerator of self",
    "start": "3925720",
    "end": "3934080"
  },
  {
    "text": "and divide it by the\ndenominator of self. So this will just do a division. self.num is a number.\nself.denom is another number.",
    "start": "3934080",
    "end": "3941310"
  },
  {
    "text": "It does the division. And this returns a float. So here, when we multiply\nc is equal to a times b,",
    "start": "3941310",
    "end": "3948310"
  },
  {
    "text": "remember that c became a\nfraction object with numerator",
    "start": "3948310",
    "end": "3953470"
  },
  {
    "text": "3 and denominator 16. Do you remember that? So then when we cast it to a\nfloat, down here, Python says,",
    "start": "3953470",
    "end": "3962510"
  },
  {
    "text": "hey, did you implement the\ndunder method __float__? Oh yeah, you did.",
    "start": "3962510",
    "end": "3967780"
  },
  {
    "text": "Let me just go ahead\nand do the thing that you want me\nto do inside it. So it takes the 3, divides it\nby the 16, and it prints 0.1875.",
    "start": "3967780",
    "end": "3980400"
  },
  {
    "text": "OK. Let's try it out\na little bit more. So here, I've got 2\nfraction objects--",
    "start": "3980400",
    "end": "3985880"
  },
  {
    "text": "one representing 1\nover 4, the other one representing 2 over 3. I multiply those two together.",
    "start": "3985880",
    "end": "3991730"
  },
  {
    "text": "Again, this gives\nme a fraction object because it's running\nthe mul dunder method. And the mul dunder\nmethod gives me",
    "start": "3991730",
    "end": "3999470"
  },
  {
    "text": "a fraction object with a new\nnumerator and denominator. So when I print the return\nof that, when I print c,",
    "start": "3999470",
    "end": "4006190"
  },
  {
    "text": "this prints the new\nnumerator, which is 2 times 1, divided by the new denominator,\nwhich is 4 times 3.",
    "start": "4006190",
    "end": "4012160"
  },
  {
    "text": "So it prints 2 over 12. Does that look OK to you?",
    "start": "4012160",
    "end": "4018410"
  },
  {
    "text": "I mean, it looks OK. But suppose you're\ndoing calculations with a whole bunch of numbers.",
    "start": "4018410",
    "end": "4023660"
  },
  {
    "text": "And at some point, you get\ntwo really big numerators and really big denominators.",
    "start": "4023660",
    "end": "4028960"
  },
  {
    "text": "But then you stare\nat it long enough and realize that big numerator\ndivided by that big denominator",
    "start": "4028960",
    "end": "4035860"
  },
  {
    "text": "is actually something\nlike 1 over 4. So this is not\nreduced, which is fine.",
    "start": "4035860",
    "end": "4044230"
  },
  {
    "text": "Our code is not\ndoing the reduction. But it would be nice to write\na method that allows the user",
    "start": "4044230",
    "end": "4051990"
  },
  {
    "text": "to reduce a fraction. That would be really nice. So can we fix this?",
    "start": "4051990",
    "end": "4058260"
  },
  {
    "text": "Yes, we can. Otherwise, we wouldn't be here. So let's write this method\nto reduce a fraction object.",
    "start": "4058260",
    "end": "4066160"
  },
  {
    "text": "It looks like a lot,\nbut it's not, trust me. It's just a bunch of if/else's.",
    "start": "4066160",
    "end": "4072430"
  },
  {
    "text": "So the first part of it is a\nlittle helper function, not a method.",
    "start": "4072430",
    "end": "4078670"
  },
  {
    "text": "Notice, there's no self going\non in this gcd function. This is just a regular\nfunction that I",
    "start": "4078670",
    "end": "4085780"
  },
  {
    "text": "will use to help\nme get the greatest common divisor for the\ntwo parameters, n and d.",
    "start": "4085780",
    "end": "4094510"
  },
  {
    "text": "Because when I have two numbers,\nif I want to reduce them, I find the greatest\ncommon divisors.",
    "start": "4094510",
    "end": "4100269"
  },
  {
    "text": "And I'm going to divide the top\nand the bottom by that divisor. And that will help me reduce it.",
    "start": "4100270",
    "end": "4105890"
  },
  {
    "text": "So this gcd function helps\nme find this greatest common divisor.",
    "start": "4105890",
    "end": "4111115"
  },
  {
    "text": "All right, so here, I'm\njust defining the function. I'm not actually using it. And then I've got\nan if and an elif.",
    "start": "4111115",
    "end": "4120170"
  },
  {
    "text": "So if the denominator is\n0, something's super weird. So I'm just going to\nreturn none because having",
    "start": "4120170",
    "end": "4125540"
  },
  {
    "text": "a fraction where the\ndenominator is 0, maybe something went wrong. Else, if the\ndenominator is 1, we",
    "start": "4125540",
    "end": "4131778"
  },
  {
    "text": "don't need to do any reduction. No reducing is needed. So we just return the numerator.",
    "start": "4131779",
    "end": "4138028"
  },
  {
    "text": "And else, I do have two\nactual numbers that I maybe",
    "start": "4138029",
    "end": "4143219"
  },
  {
    "text": "could potentially reduce. So let's just reduce them. The first line here\nruns this function,",
    "start": "4143220",
    "end": "4150120"
  },
  {
    "text": "this helper function\nthat I wrote, on the numerator and\ndenominator to grab the greatest common divisor.",
    "start": "4150120",
    "end": "4156609"
  },
  {
    "text": "So if it's 2 over\n12, it'll find 2. Then the next line here\ntakes the numerator",
    "start": "4156609",
    "end": "4165778"
  },
  {
    "text": "and divides by that\ngreatest common divisor and casts it to an int\nbecause I want my numerator",
    "start": "4165779",
    "end": "4171600"
  },
  {
    "text": "to be an int and my\ndenominator to be an int. So it'll take the numerator\nand divide by, for example, 2.",
    "start": "4171600",
    "end": "4177939"
  },
  {
    "text": "Same with denominator, I'm\ngoing to take my denominator and divide by that same gcd\nI found, casting to an int.",
    "start": "4177939",
    "end": "4186278"
  },
  {
    "text": "So my new top and my\nnew bottom will now be used to create a new fraction\nobject that is in reduced form,",
    "start": "4186279",
    "end": "4197270"
  },
  {
    "text": "so 1/6 for the example 2/12. All right, so here it is.",
    "start": "4197270",
    "end": "4202800"
  },
  {
    "text": "This is my previous\nexample, where I multiplied that thing that gave me 2/12.",
    "start": "4202800",
    "end": "4210200"
  },
  {
    "text": "And then if I do\nc.reduce, Python will call the\nreduce method on c,",
    "start": "4210200",
    "end": "4215210"
  },
  {
    "text": "so the object whose numerator\nis 2 and denominator is 12. And then this will\nreduce it to 1 over 6.",
    "start": "4215210",
    "end": "4222050"
  },
  {
    "text": "And it will print, call\nthe printstr method on an object of type\nfraction to give me 1 over 6.",
    "start": "4222050",
    "end": "4229685"
  },
  {
    "text": " Everyone OK? Yes?",
    "start": "4229685",
    "end": "4234945"
  },
  {
    "text": "STUDENT: [INAUDIBLE].  ANA BELL: You could put\nit outside the reduce.",
    "start": "4234945",
    "end": "4241560"
  },
  {
    "text": "But since it's being used\nspecifically in the reduce, we'd like to just\nkeep it within.",
    "start": "4241560",
    "end": "4249030"
  },
  {
    "text": "If it doesn't need to\nbe used by other things, we'll just keep it only to the\nscope where it needs to exist.",
    "start": "4249030",
    "end": "4256050"
  },
  {
    "text": "But it can be outside, yeah. ",
    "start": "4256050",
    "end": "4262340"
  },
  {
    "text": "OK. So one thing is weird\nhere, though, right? This elif here.",
    "start": "4262340",
    "end": "4268690"
  },
  {
    "text": " What is the type that gets\nreturned from the else?",
    "start": "4268690",
    "end": "4275460"
  },
  {
    "text": "You guys tell me. What's this type here that\ngets returned down in the else? Fraction. What is the type being\nreturned in the elif?",
    "start": "4275460",
    "end": "4284944"
  },
  {
    "text": "STUDENT: Is it an int? ANA BELL: Yes, an int. So if the denominator\nhappens to be a 1,",
    "start": "4284944",
    "end": "4293770"
  },
  {
    "text": "this method, reduce,\nreturns an integer. If it's not, it\nreturns a fraction.",
    "start": "4293770",
    "end": "4300570"
  },
  {
    "text": "So if at some point in\nthe future you're mixing-- you happen to reduce something\nthat has a denominator of 1,",
    "start": "4300570",
    "end": "4307820"
  },
  {
    "text": "you're now working\nwith integers. And then potentially, you'd\nbe doing further operations",
    "start": "4307820",
    "end": "4313219"
  },
  {
    "text": "by mixing that with\nfraction objects. So as an example here, I've\ngot a fraction object--",
    "start": "4313220",
    "end": "4320060"
  },
  {
    "text": "a, 4 over 1; b, 3 over 9. Reducing a gives me a 4.",
    "start": "4320060",
    "end": "4325250"
  },
  {
    "text": "Fine, it's the integer 4. And reducing b\ngives me 1 over 3. It's a fraction, 1 over 3.",
    "start": "4325250",
    "end": "4331750"
  },
  {
    "text": "So the type, just to show you\nexactly that I'm not lying--",
    "start": "4331750",
    "end": "4337030"
  },
  {
    "text": "the type of the a\nreduced is an int. That's what the code is doing. And the type of b\nreduced is a fraction.",
    "start": "4337030",
    "end": "4344810"
  },
  {
    "text": "So then when we do the star\noperator between ar and br, Python is going to\nsay, you're trying",
    "start": "4344810",
    "end": "4350500"
  },
  {
    "text": "to multiply an int\nwith a fraction. Did you ever tell\nme how to do that? No, right?",
    "start": "4350500",
    "end": "4357160"
  },
  {
    "text": "We told it how to multiply a\nfraction and another fraction, but not an int with a fraction.",
    "start": "4357160",
    "end": "4362820"
  },
  {
    "text": "And so Python will fail here. So one thing that\nyou can do to fix it",
    "start": "4362820",
    "end": "4370520"
  },
  {
    "text": "is to change this elif here. So let's have\neverything consistent.",
    "start": "4370520",
    "end": "4377310"
  },
  {
    "text": "So I want you to do this change. Instead of returning\nself.num, return for me a fraction object\nrepresenting the numerator.",
    "start": "4377310",
    "end": "4387810"
  },
  {
    "text": "All right, does anyone know? Just a small change. Instead of returning self.num,\nwhat should I return?",
    "start": "4387810",
    "end": "4394680"
  },
  {
    "text": "How do I make a fraction object? Just invoke the name\nof a fraction, right?",
    "start": "4394680",
    "end": "4400180"
  },
  {
    "text": "What's the numerator of this\nfraction object supposed to be? It's already there, self.num.",
    "start": "4400180",
    "end": "4406699"
  },
  {
    "text": "What's the denominator\nof this fraction object? STUDENT: [INAUDIBLE]. ANA BELL: Yeah, exactly.",
    "start": "4406700",
    "end": "4412160"
  },
  {
    "text": "So it just returns\na fraction object whose numerator is self.num\nand denominator is 1, exactly.",
    "start": "4412160",
    "end": "4419620"
  },
  {
    "text": "All right, so now, all\nthe different cases except for this randomly\nweird denominator being 0--",
    "start": "4419620",
    "end": "4425470"
  },
  {
    "text": "in case that happens,\nsomething's gone wrong, maybe-- all the other\ncases are returning",
    "start": "4425470",
    "end": "4430690"
  },
  {
    "text": "a fraction object, which is good\nbecause now it's consistent. STUDENT: [INAUDIBLE]? ",
    "start": "4430690",
    "end": "4440275"
  },
  {
    "text": "ANA BELL: Oh yeah, exactly. So we did say we didn't\nwant it to be 5 over 1. But this is actually\nusing the old str method,",
    "start": "4440275",
    "end": "4447030"
  },
  {
    "text": "where we didn't do that check. So it will print 5 over 1. But if we do the check if\nself.denom == 1 then return str",
    "start": "4447030",
    "end": "4456405"
  },
  {
    "text": "self.num-- if we add that, then\nit won't do that, yeah. But this is just using the\nold method that doesn't",
    "start": "4456405",
    "end": "4464430"
  },
  {
    "text": "do that nice formatting for us. Questions?",
    "start": "4464430",
    "end": "4471502"
  },
  {
    "text": "All right, we've\nbeen working a lot with returning new\nobjects of the same type that we're writing.",
    "start": "4471502",
    "end": "4477420"
  },
  {
    "text": "That's a new thing today. OK.",
    "start": "4477420",
    "end": "4484890"
  },
  {
    "text": "So what's the purpose\nof these two lectures?",
    "start": "4484890",
    "end": "4490200"
  },
  {
    "text": "So hopefully, it shows that\nit's very useful to bundle data",
    "start": "4490200",
    "end": "4499300"
  },
  {
    "text": "and behaviors together. So the ultimate goal when\nwe're writing programs",
    "start": "4499300",
    "end": "4504460"
  },
  {
    "text": "is to write code that's\nmodular and organized",
    "start": "4504460",
    "end": "4509650"
  },
  {
    "text": "because, in the\nfuture, you might want to build upon this code. In the future, you might\nwant to read this code",
    "start": "4509650",
    "end": "4515020"
  },
  {
    "text": "to use it for something else. In the future, other people\nmight want to read this code or use this code, this\nclass that you wrote,",
    "start": "4515020",
    "end": "4521830"
  },
  {
    "text": "to build more complex\nclasses, like we used the coordinate class\nto build a circle class. Other people might use your\ncircle class to build--",
    "start": "4521830",
    "end": "4529192"
  },
  {
    "text": "I don't know-- a sphere\nclass or something like that, something more complicated. And so it's really nice to\ncreate these little data types",
    "start": "4529192",
    "end": "4536260"
  },
  {
    "text": "that are organized, modular. And so we're basically\nbundling together these data--",
    "start": "4536260",
    "end": "4543550"
  },
  {
    "text": "so what makes up your object--\nand behaviors together, so we can use these objects\nin a nicely consistent way.",
    "start": "4543550",
    "end": "4549949"
  },
  {
    "text": "So remember, back when we\nwere learning about functions, the ideas of decomposition\nand abstraction",
    "start": "4549950",
    "end": "4556219"
  },
  {
    "text": "were very important. Functions basically\ntook a chunk of code and decomposed them\ninto one module",
    "start": "4556220",
    "end": "4562639"
  },
  {
    "text": "that we could reuse many,\nmany different places. And we abstracted away the\ndetails of the function",
    "start": "4562640",
    "end": "4569119"
  },
  {
    "text": "through docstrings,\nso people didn't have to slog through\na whole bunch of code to figure out what\nthe function did. All they did was\nread the docstring",
    "start": "4569120",
    "end": "4575659"
  },
  {
    "text": "and they knew exactly\nwhat we wanted. Now, object-oriented\nprogramming in Python classes",
    "start": "4575660",
    "end": "4581610"
  },
  {
    "text": "have that same big decomposition\nand abstraction energy, right? They've got a bunch of modules\nthat we're creating here,",
    "start": "4581610",
    "end": "4588960"
  },
  {
    "text": "where we're bundling\ntogether data and behaviors, so we can create a\nwhole bunch of objects",
    "start": "4588960",
    "end": "4594060"
  },
  {
    "text": "that behave in the\nexact same way-- nicely consistent-- so that we\nknow that if I create",
    "start": "4594060",
    "end": "4599550"
  },
  {
    "text": "a coordinate object\nhere, it's going to have an x and a y value. And if I create another\ncoordinate object, it's also going to have\nan x and a y value.",
    "start": "4599550",
    "end": "4605880"
  },
  {
    "text": "It's not suddenly going to\nhave an x, y, and z value. So creating these objects\nthat work in a consistent way",
    "start": "4605880",
    "end": "4612599"
  },
  {
    "text": "is a very-- decomposition and\nabstraction are",
    "start": "4612600",
    "end": "4621450"
  },
  {
    "text": "working with the ideas of\ndecomposition abstraction just like functions did. OK.",
    "start": "4621450",
    "end": "4626460"
  },
  {
    "text": "So next lecture, we\nwill be starting on-- we'll do a little bit\nmore of these classes.",
    "start": "4626460",
    "end": "4632350"
  },
  {
    "text": "And then we'll start on\ninheritance, so having parents be objects that we created.",
    "start": "4632350",
    "end": "4637470"
  },
  {
    "text": "All right. ",
    "start": "4637470",
    "end": "4646000"
  }
]