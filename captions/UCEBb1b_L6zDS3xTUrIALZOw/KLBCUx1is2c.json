[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "6916"
  },
  {
    "start": "6916",
    "end": "12850"
  },
  {
    "text": "ERIK DEMAINE: All right\nwelcome back to 006, Dynamic Programming. We're now in step\ntwo out of four--",
    "start": "12850",
    "end": "19390"
  },
  {
    "text": "going to see a bunch\nmore examples-- three more examples of\ndynamic programming-- longest common subsequence,\nlongest increasing subsequence,",
    "start": "19390",
    "end": "25900"
  },
  {
    "text": "and kind of a made\nup problem from 006, alternating coin game.",
    "start": "25900",
    "end": "30910"
  },
  {
    "text": "And through those\nexamples, we're going to explore a\nfew new ideas, things",
    "start": "30910",
    "end": "36760"
  },
  {
    "text": "we haven't seen in action\nbefore yet-- dealing with multiple sequences,\ninstead of just one; dealing with substrings\nof sequences,",
    "start": "36760",
    "end": "42880"
  },
  {
    "text": "instead of prefixes\nand suffixes; parent pointers so we\ncan recover solutions, like in shortest paths.",
    "start": "42880",
    "end": "48580"
  },
  {
    "text": "And a big one, which will\nmostly be fleshed out in the next lecture, is\nsubproblem constraint and expansion.",
    "start": "48580",
    "end": "55030"
  },
  {
    "text": "This is all part of\nthe SRTBOT paradigm-- remember, subproblems,\nrelations, topological order,",
    "start": "55030",
    "end": "64900"
  },
  {
    "text": "base case, original\nproblem, and time. Here is subproblems\nand relations. I've written down both\nwhat these things are",
    "start": "64900",
    "end": "71500"
  },
  {
    "text": "and the key lessons we got from\nthe first dynamic programming lecture. Namely, we want to split up\nour problem into multiple",
    "start": "71500",
    "end": "78399"
  },
  {
    "text": "subproblems, and if your\ninput is a sequence-- that's the main case\nwe've seen so far--",
    "start": "78400",
    "end": "84130"
  },
  {
    "text": "like the bowling\nproblem, for example, then the natural\nsubproblems to try",
    "start": "84130",
    "end": "89649"
  },
  {
    "text": "are prefixes, suffixes,\nor substrings. Prefixes and suffixes are nice,\nbecause there's few of them.",
    "start": "89650",
    "end": "95187"
  },
  {
    "text": "There's only a linear\nnumber of them. In general, we want\na polynomial number. Sometimes you can get\naway with one of these.",
    "start": "95188",
    "end": "101330"
  },
  {
    "text": "They're usually about the same. Sometimes you need substrings. There's quadratically\nmany of those.",
    "start": "101330",
    "end": "108979"
  },
  {
    "text": "Then, once you set up\nthe subproblems, which-- it's easy to set\nup some problems,",
    "start": "108980",
    "end": "114939"
  },
  {
    "text": "but hard to do it right-- to test whether you\ndid it right is, can I write a\nrecurrence relation",
    "start": "114940",
    "end": "120400"
  },
  {
    "text": "that relates one subproblem\nsolution to smaller subproblems solutions?",
    "start": "120400",
    "end": "125619"
  },
  {
    "text": "And the general\ntrick for doing this is to identify some feature\nof the solution you're",
    "start": "125620",
    "end": "131530"
  },
  {
    "text": "looking for. So you're trying to\nsolve some subproblem, and you try to ask a question\nwhose answer would let you",
    "start": "131530",
    "end": "137710"
  },
  {
    "text": "reduce to a smaller subproblem. So if you can figure out\nwhat that question is, and that question only has a\npolynomial number of answers,",
    "start": "137710",
    "end": "143618"
  },
  {
    "text": "then boom-- and you've\nonly got polynomial number of subproblems, then you will\nget a polynomial running time.",
    "start": "143618",
    "end": "148730"
  },
  {
    "text": "So I have, I think,\nanother way to say this. We just locally brute\nforce all possible answers",
    "start": "148730",
    "end": "154450"
  },
  {
    "text": "to whatever question\nwe come up with, as long as there's\npolynomially many. And then each of them is going\nto recursively call the smaller",
    "start": "154450",
    "end": "163180"
  },
  {
    "text": "subproblems, but\nbecause we memoize, we'll only solve\neach subproblem once. And so on the end,\nthe running time",
    "start": "163180",
    "end": "168760"
  },
  {
    "text": "will be, at most, the\nnumber of subproblems times the non-recursive\nwork done in that relation.",
    "start": "168760",
    "end": "174910"
  },
  {
    "text": "For that to work, of course, the\nrelations between subproblems must be acyclic, so\nwe'd like to give",
    "start": "174910",
    "end": "180849"
  },
  {
    "text": "an explicit topological order. Usually it's a\ncouple of for loops. But this is a topological\norder in the subproblem",
    "start": "180850",
    "end": "187450"
  },
  {
    "text": "DAG, which I defined somewhat\ninformally last time. the. Vertices are\nsubproblems, and I want",
    "start": "187450",
    "end": "193840"
  },
  {
    "text": "to draw an edge from a smaller\nproblem to a bigger problem, meaning that, if evaluating\nb in this relation calls a,",
    "start": "193840",
    "end": "202269"
  },
  {
    "text": "then I'll draw an\narrow from a to b, from the things I need\nto do first to the things I'll do later.",
    "start": "202270",
    "end": "208880"
  },
  {
    "text": "So then topological\norder will be ready-- by the time\nI try to compute b,",
    "start": "208880",
    "end": "214060"
  },
  {
    "text": "I will have already computed a. And of course, the relation\nalso needs base cases.",
    "start": "214060",
    "end": "219860"
  },
  {
    "text": "And then sometimes the original\nproblem we want to solve is just one of\nthose subproblems.",
    "start": "219860",
    "end": "225410"
  },
  {
    "text": "Sometimes we need\nto combine multiple. We'll see that today. So that's a review\nof this framework.",
    "start": "225410",
    "end": "231770"
  },
  {
    "text": "And let's dive into\nlongest common subsequence. ",
    "start": "231770",
    "end": "238060"
  },
  {
    "text": "This is kind of a\nclassic problem. ",
    "start": "238060",
    "end": "247280"
  },
  {
    "text": "It even has\napplications to things like computational biology. You have two DNA sequences.",
    "start": "247280",
    "end": "252490"
  },
  {
    "text": "You want to measure\nhow in common they are. One version of that-- might see other\nversions in recitation--",
    "start": "252490",
    "end": "259209"
  },
  {
    "text": "called edit distance-- this is\na simplest, cleanest version, where I give you two sequences--",
    "start": "259209",
    "end": "264990"
  },
  {
    "text": "I have an example here. So for example, it could\nbe a sequence of letters.",
    "start": "264990",
    "end": "271090"
  },
  {
    "start": "271090",
    "end": "277010"
  },
  {
    "text": "So my first sequence\nspells hieroglyphology-- study of hieroglyphs.",
    "start": "277010",
    "end": "283450"
  },
  {
    "text": "And second sequence\nspells Michelangelo. ",
    "start": "283450",
    "end": "292390"
  },
  {
    "text": "And what I'd like\nis a subsequence. So remember, substring has\nto be some continuous range,",
    "start": "292390",
    "end": "298780"
  },
  {
    "text": "some interval. Subsequence-- you\ncan take any subset of the letters in your\nsequence or any subset",
    "start": "298780",
    "end": "305860"
  },
  {
    "text": "of the items in your sequence. So you can have\nblanks in between. You can skip over items.",
    "start": "305860",
    "end": "311110"
  },
  {
    "text": "And so what we want is\nthe longest sequence that is a subsequence of\nboth the first string,",
    "start": "311110",
    "end": "317650"
  },
  {
    "text": "the first sequence,\nand the second string. And if you stare at\nthis long enough, the longest common subsequence--",
    "start": "317650",
    "end": "324250"
  },
  {
    "text": "I don't think it's\nunique, but there is a longest common sequence,\nwhich is hello hiding in there.",
    "start": "324250",
    "end": "332830"
  },
  {
    "text": " And that is a longest\ncommon subsequence.",
    "start": "332830",
    "end": "338440"
  },
  {
    "text": "So given that input, the\ngoal is to compute hello,",
    "start": "338440",
    "end": "344410"
  },
  {
    "text": "or whatever the longest\ncommon subsequence is. So we're given-- write\nthis down carefully--",
    "start": "344410",
    "end": "349660"
  },
  {
    "text": "given two sequences. Let me name them\nA and B. We want",
    "start": "349660",
    "end": "358120"
  },
  {
    "text": "to find the longest\nsequence L that's",
    "start": "358120",
    "end": "368290"
  },
  {
    "text": "a subsequence both A and B. So\nthat's the problem definition,",
    "start": "368290",
    "end": "378862"
  },
  {
    "text": "and we're going to\nsee how to solve it using dynamic programming. And whereas, in the\nbowling problem,",
    "start": "378862",
    "end": "386440"
  },
  {
    "text": "we just had a single\nsequence of numbers-- the values of the bowling pins--",
    "start": "386440",
    "end": "391780"
  },
  {
    "text": "here we have two sequences. And so we need a new trick. Before, we said, OK, if our\nsubproblems-- or sorry--",
    "start": "391780",
    "end": "399108"
  },
  {
    "text": "if our input consists\nof a single sequence, we'll try prefixes,\nsuffixes, or substrings. Now we've got two\nsequences, so somehow we",
    "start": "399108",
    "end": "405370"
  },
  {
    "text": "need to combine multiple\ninputs together.",
    "start": "405370",
    "end": "413090"
  },
  {
    "text": "And so here's a general trick-- subproblems for multiple inputs.",
    "start": "413090",
    "end": "424700"
  },
  {
    "text": "It's a very simple trick. We just take the product,\nmultiply the subproblem spaces.",
    "start": "424700",
    "end": "436044"
  },
  {
    "text": " OK.",
    "start": "436045",
    "end": "441520"
  },
  {
    "text": "In the sense of cross product\nof sets, and in particular, from a combinatorial\nperspective--",
    "start": "441520",
    "end": "447540"
  },
  {
    "text": "so we have two inputs,\nthe first sequence A and the second sequence\nB. For each of them,",
    "start": "447540",
    "end": "452772"
  },
  {
    "text": "there's a natural choice, or\nthere's three natural choices. We could do one of these. I will choose suffixes\nfor A and suffixes for B.",
    "start": "452772",
    "end": "459640"
  },
  {
    "text": "You could do some\nother combination, but that would be\nenough for here. And then I want to\nmultiply these spaces,",
    "start": "459640",
    "end": "465550"
  },
  {
    "text": "meaning the number\nof subproblems is going to be the product\nof the number of suffixes here times the number\nof suffixes here.",
    "start": "465550",
    "end": "473810"
  },
  {
    "text": "And in other words,\nevery subproblem in LCS is going to be a\npair of suffixes.",
    "start": "473810",
    "end": "480260"
  },
  {
    "text": "So let me write that down.",
    "start": "480260",
    "end": "485400"
  },
  {
    "text": "So for LCS, our\nsubproblems are L of i, j--",
    "start": "485400",
    "end": "500490"
  },
  {
    "text": "this is going to be the\nlongest common subsequence-- of the suffix of A starting\nat i and the suffix of B",
    "start": "500490",
    "end": "507180"
  },
  {
    "text": "starting at j.  And just to be clear\nhow many there are,",
    "start": "507180",
    "end": "515750"
  },
  {
    "text": "I'll give the\nranges for i and j-- ",
    "start": "515750",
    "end": "521909"
  },
  {
    "text": "not going to assume\nthe sequences are the same length,\nlike in the example.",
    "start": "521909",
    "end": "526980"
  },
  {
    "text": "So I'll write lengths of\nA and lengths of B. I like to include the empty suffix. So when j equals the length\nof B that's 0 items in it,",
    "start": "526980",
    "end": "535730"
  },
  {
    "text": "because that makes for\nreally easy base cases. So I'd like to include\nthose in my problems.",
    "start": "535730",
    "end": "541320"
  },
  {
    "text": "So that was the S in SRTBOT. Now I claim that set subproblems\nis enough to do a relation--",
    "start": "541320",
    "end": "553160"
  },
  {
    "text": "recursive relation among them. So I'd like to solve\nevery subproblems L i, j.",
    "start": "553160",
    "end": "558251"
  },
  {
    "text": " Relation is actually\npretty simple,",
    "start": "558252",
    "end": "563779"
  },
  {
    "text": "but it's maybe not so obvious. So the idea is, because\nwe're looking at suffixes,",
    "start": "563780",
    "end": "570800"
  },
  {
    "text": "we should always\nthink about what happens in the first\nletter, because if we",
    "start": "570800",
    "end": "576500"
  },
  {
    "text": "remove that first letter,\nthen we get a smaller suffix. If you're doing prefixes,\nyou should always look at the last letter.",
    "start": "576500",
    "end": "581910"
  },
  {
    "text": "Either one would work\nfor this problem. So we're doing suffixes. So we look at A of i\nand we look at B of j.",
    "start": "581910",
    "end": "589480"
  },
  {
    "text": " That's the first letter in\nthe suffix A starting at i",
    "start": "589480",
    "end": "598290"
  },
  {
    "text": "and the suffix B starting at j. And there are two cases. They could be\nequal or different.",
    "start": "598290",
    "end": "606225"
  },
  {
    "text": " I think the easier\ncase to think about is",
    "start": "606226",
    "end": "611760"
  },
  {
    "text": "when they're different. So like in hieroglyphology\nand Michelangelo, if we look at the whole\nstring, say, the first letter",
    "start": "611760",
    "end": "618768"
  },
  {
    "text": "in the top one is H. The\nfirst letter in the second one is M. Those are\ndifferent letters, so clearly, one of\nthose letters is not",
    "start": "618768",
    "end": "626820"
  },
  {
    "text": "in the common subsequence,\nbecause they don't match. I can't start with an H.\nWell, I can start with an H,",
    "start": "626820",
    "end": "634470"
  },
  {
    "text": "I could start with an M,\nbut I can't start with both. One of those letters\nis not in the output.",
    "start": "634470",
    "end": "639750"
  },
  {
    "text": "In this example, it's M.\nBut I don't know which one,",
    "start": "639750",
    "end": "644950"
  },
  {
    "text": "so I have this question. I want to identify\nsome question. And the question is, should I--",
    "start": "644950",
    "end": "651810"
  },
  {
    "text": "do I know that the H is\nnot in the answer or do I know that M is\nnot in the answer-- the final longest\ncommon subsequence?",
    "start": "651810",
    "end": "659070"
  },
  {
    "text": "We don't know which,\nso we'll just try both. And then we're\ntrying to maximize",
    "start": "659070",
    "end": "664608"
  },
  {
    "text": "the length of our\ncommon subsequence, so we'll take the max of L i\nplus 1 j and L i, j minus 1.",
    "start": "664608",
    "end": "678660"
  },
  {
    "text": " So the intuition\nhere is one of--",
    "start": "678660",
    "end": "684970"
  },
  {
    "text": " at least one of Ai and\nBj is not in the LCS.",
    "start": "684970",
    "end": "696105"
  },
  {
    "text": " Got this wrong.",
    "start": "696105",
    "end": "701480"
  },
  {
    "text": "j plus 1-- sorry-- thinking about\nsubstrings already.",
    "start": "701480",
    "end": "707010"
  },
  {
    "text": "Yeah. These are the beginning points,\nso I want exclude the i-th letter-- so if Ai is not in, then I\nwant to look at the suffix",
    "start": "707010",
    "end": "713640"
  },
  {
    "text": "starting at i plus 1. If Bj is not in, then I\nwant to look at the suffix starting at j plus 1. So the indices are\nalways increasing",
    "start": "713640",
    "end": "720240"
  },
  {
    "text": "in the function calls. And the other case is\nthat they're equal.",
    "start": "720240",
    "end": "726090"
  },
  {
    "text": "So this one I have a little\nbit harder time arguing. I'm going to write the\nanswer, and then prove that the answer is correct.",
    "start": "726090",
    "end": "732010"
  },
  {
    "text": " Here I claim you don't\nneed to make any choices.",
    "start": "732010",
    "end": "737870"
  },
  {
    "text": "There's no question\nyou need to answer. You can actually\nguarantee that Ai and Bj",
    "start": "737870",
    "end": "743860"
  },
  {
    "text": "might as well be in the\nlongest common subsequence. And so I get one point for\nthat and then I recurse",
    "start": "743860",
    "end": "751089"
  },
  {
    "text": "on all the remaining letters-- so from i plus 1 on\nand from j plus 1 on. Why is this OK?",
    "start": "751090",
    "end": "756939"
  },
  {
    "text": "Well, we have A, B. We're\nstarting at position i,",
    "start": "756940",
    "end": "762040"
  },
  {
    "text": "and starting at\nposition j for B.",
    "start": "762040",
    "end": "767440"
  },
  {
    "text": "Think of some optimal\nsolution, some longest common subsequence. So it pairs up\nletters in some way.",
    "start": "767440",
    "end": "774490"
  },
  {
    "text": "This would be some non-crossing\npairing between equal letters. ",
    "start": "774490",
    "end": "781839"
  },
  {
    "text": "So first case is\nthat maybe i and j aren't paired with anything. Well, that's silly,\nbecause if they're not paired with anything,\nyou have some bearing",
    "start": "781840",
    "end": "788019"
  },
  {
    "text": "on the rest of the items. You can add this pair, and that\nwould be a longer subsequence. So that would be\na contradiction.",
    "start": "788020",
    "end": "793090"
  },
  {
    "text": "If we're taking-- imagining some\nhypothetical optimal solution, it has to pair one of\nthese with something.",
    "start": "793090",
    "end": "800050"
  },
  {
    "text": "Maybe it pairs i with\nsomething else, though. Well, if we have a\nlongest common subsequence",
    "start": "800050",
    "end": "805690"
  },
  {
    "text": "that looks like that, I can\njust instead pair i with Bj.",
    "start": "805690",
    "end": "811930"
  },
  {
    "text": "If I had this pairing,\nI'm actually not using any of these letters, so why don't\nI just use this letter instead?",
    "start": "811930",
    "end": "818510"
  },
  {
    "text": "So you can argue there is the\nlongest common subsequence that matches Ai with\nBj, and so then we",
    "start": "818510",
    "end": "823630"
  },
  {
    "text": "can guarantee by\nthat little proof that we get one point\nfor matching them up--",
    "start": "823630",
    "end": "830199"
  },
  {
    "text": "that we don't have to\nmax this with anything. OK, so two cases-- pretty simple formula.",
    "start": "830200",
    "end": "837430"
  },
  {
    "text": "And then we're basically done. We just need to fill\nin the rest of SRTBOT. So next is topological order.",
    "start": "837430",
    "end": "843500"
  },
  {
    "start": "843500",
    "end": "849230"
  },
  {
    "text": "So this I'll write as for loops. ",
    "start": "849230",
    "end": "860493"
  },
  {
    "text": "Because I'm dealing\nwith suffixes, we want to start with\nthe empty suffixes, and then work our way to\nlarger and larger suffixes.",
    "start": "860493",
    "end": "866080"
  },
  {
    "text": "So this might seem backwards. If you're doing prefixes, it\nwould be an increasing order. There's all sorts of orders. You could flip the i and j.",
    "start": "866080",
    "end": "872410"
  },
  {
    "text": "It's very symmetric, so\nit doesn't really matter. But anything that's generally\ndecreasing i and j is good.",
    "start": "872410",
    "end": "879670"
  },
  {
    "text": "Then we have base cases.  These are when one of\nthe sequences is empty.",
    "start": "879670",
    "end": "886660"
  },
  {
    "text": "I don't care how many items are\nin B, but if A has no items, there's no common subsequence.",
    "start": "886660",
    "end": "892030"
  },
  {
    "text": "It's empty. And same for no\nmatter how big A is,",
    "start": "892030",
    "end": "897670"
  },
  {
    "text": "if I have exhausted\nthe B string-- I start from beyond\nthe last item-- then I should get 0.",
    "start": "897670",
    "end": "905020"
  },
  {
    "text": "Then the original problem\nwe want to solve is L 0, 0--",
    "start": "905020",
    "end": "912670"
  },
  {
    "text": "that's just the\nlongest common sequence of the entire A\nand the entire B--",
    "start": "912670",
    "end": "918340"
  },
  {
    "text": "and time.  OK, so for time, we need to know\nhow many subproblems there are.",
    "start": "918340",
    "end": "926060"
  },
  {
    "text": "It's A plus 1 times B plus 1. I'll just call that theta\nA, B. Assume these are not",
    "start": "926060",
    "end": "933759"
  },
  {
    "text": "empty subsequences. So this is the number\nof subproblems.",
    "start": "933760",
    "end": "940149"
  },
  {
    "text": "And then what we care about\nis, how much time do we spend for each sub problem\nin evaluating this recurrence",
    "start": "940150",
    "end": "946300"
  },
  {
    "text": "relation? So we ignore the cost\nto recursively call these L's, because they\nare smaller subproblems.",
    "start": "946300",
    "end": "951510"
  },
  {
    "text": "They're already dealt\nwith when I multiply by the number of subproblems. So I just care about this max\ncomputation and this equality",
    "start": "951510",
    "end": "958089"
  },
  {
    "text": "check, and we'll say those\neach cost constant time. So this is quadratic time.",
    "start": "958090",
    "end": "969360"
  },
  {
    "text": "If the two strings are\nsize n, this is n squared. In general, it's the product\nof the two string sizes.",
    "start": "969360",
    "end": "974700"
  },
  {
    "text": "And that's longest\ncommon substring-- so pretty straightforward.",
    "start": "974700",
    "end": "982260"
  },
  {
    "text": "Other than this little\nargument understanding the case when they're\nequal, the easy case where they're unequal, we just try\nthe only two things we could do.",
    "start": "982260",
    "end": "990524"
  },
  {
    "text": "One of Ai and Bj is not in the\nlongest common subsequence, so what I like to say is\nwe guess which of those",
    "start": "990525",
    "end": "998279"
  },
  {
    "text": "is the correct one that\nis not in the longest common subsequence. And if we guess that\nit's in A, then we'll",
    "start": "998280",
    "end": "1003980"
  },
  {
    "text": "recurse on that side. If we guess that it's in\nj, then we'll recurse on-- by increasing j.",
    "start": "1003980",
    "end": "1009190"
  },
  {
    "text": " I'd like to assume--",
    "start": "1009190",
    "end": "1014210"
  },
  {
    "text": "not really-- that we always\nmake the correct guess, that we made the correct\nchoice, whether it's i or j.",
    "start": "1014210",
    "end": "1019580"
  },
  {
    "text": "Now, we don't actually\nknow how to do that, so instead, we brute force. We try both of them, and\nthen, because we're trying",
    "start": "1019580",
    "end": "1024859"
  },
  {
    "text": "to maximize, we take the max-- just another way of\nthinking about it. But overall, very\nstraightforward-- the only",
    "start": "1024859",
    "end": "1031880"
  },
  {
    "text": "added complication here is we\nhad to deal with two sequences simultaneously, and we\njust took the product",
    "start": "1031880",
    "end": "1038060"
  },
  {
    "text": "of those-- pretty easy. In general, if you have some\nconstant number of sequences,",
    "start": "1038060",
    "end": "1043937"
  },
  {
    "text": "you can afford to do this. You'll still get polynomial. But of course, once\nyou go to n sequences, you can't afford this.",
    "start": "1043937",
    "end": "1049200"
  },
  {
    "text": "You would an n to\nthe n behavior, so that's a limit to\nhow far you could go.",
    "start": "1049200",
    "end": "1054620"
  },
  {
    "text": "Two sequences is\nfine, three sequences is fine, but n sequences-- there probably is no\npolynomial time algorithm",
    "start": "1054620",
    "end": "1061580"
  },
  {
    "text": "for this problem. Cool-- I want to\nshow you an example. ",
    "start": "1061580",
    "end": "1067710"
  },
  {
    "text": "I have an example here. I didn't want to try\nout hieroglyphology",
    "start": "1067710",
    "end": "1072930"
  },
  {
    "text": "versus Michelangelo, so I\ncame up with another example. Their habit is to say hi.",
    "start": "1072930",
    "end": "1080100"
  },
  {
    "text": "So the longest common\nsubsequence of there and habit is HI. And it's a giant--",
    "start": "1080100",
    "end": "1086460"
  },
  {
    "text": "well, not that giant-- it looks\nkind of like a grid graph. The base cases are out here,\nbecause those correspond--",
    "start": "1086460",
    "end": "1093630"
  },
  {
    "text": " each of these nodes\nis a subproblem, and this corresponds to, what is\nthe longest common subsequence",
    "start": "1093630",
    "end": "1101070"
  },
  {
    "text": "between EIR and ABIT? And it should be I. It's\nthe only letter they have",
    "start": "1101070",
    "end": "1107900"
  },
  {
    "text": "in common, and that's\nwhy there's a 1 here to say that the longest\ncommon subsequence has a 1-- has size 1.",
    "start": "1107900",
    "end": "1113909"
  },
  {
    "text": "The base cases are when\neither their has been emptied or when habit has been\nemptied, so those all have 0's",
    "start": "1113910",
    "end": "1119880"
  },
  {
    "text": "on the outside. And then the problem we\ncare about is this one. It's their versus habit.",
    "start": "1119880",
    "end": "1125520"
  },
  {
    "text": "Claim is the length is 2. And what I've drawn in here are\nwhat I'll call parent pointers,",
    "start": "1125520",
    "end": "1131640"
  },
  {
    "text": "like we talked about with BFS,\nand shortest paths, and so on.",
    "start": "1131640",
    "end": "1136980"
  },
  {
    "text": " So we had this choice--",
    "start": "1136980",
    "end": "1142380"
  },
  {
    "text": "sometimes we had a choice-- on whether we recursed\nhere or recursed here",
    "start": "1142380",
    "end": "1147929"
  },
  {
    "text": "was the best thing to do. I'll draw in red the arrow\nfrom L i, j-- sorry-- to L",
    "start": "1147930",
    "end": "1155309"
  },
  {
    "text": "i, j from one of\nthese in this case. And in this case,\nthere was no choice, but I'll still draw\nin red that arrow.",
    "start": "1155310",
    "end": "1163650"
  },
  {
    "text": "So these diagonal edges\nare exactly the cases where the letters match. Here H equals H.\nI equals I here,",
    "start": "1163650",
    "end": "1171060"
  },
  {
    "text": "so I draw this diagonal edge. That's that first case,\nwhere the letters are equal, and so I recurse by\nincreasing i and j.",
    "start": "1171060",
    "end": "1177780"
  },
  {
    "text": "That's why I get\na diagonal edge. There's also one over\nhere, where T equals T.",
    "start": "1177780",
    "end": "1184559"
  },
  {
    "text": "So for those, we're\ngetting a 1 plus. You see this 1 is 1\nlarger than the 0. This 2 is 1 larger than the 1.",
    "start": "1184560",
    "end": "1190260"
  },
  {
    "text": "This 1 is one larger than the 0. And for every other\nvertex, we are rehearsing",
    "start": "1190260",
    "end": "1195840"
  },
  {
    "text": "this way and this way. We see what those two numbers\nare, and we take the max.",
    "start": "1195840",
    "end": "1201240"
  },
  {
    "text": "So this whole diagram\nis just filled in by-- for each position,\nwhere they're not equal.",
    "start": "1201240",
    "end": "1208210"
  },
  {
    "text": "We look at the guy below. We look at the guy to the right. Those are the slightly\nsmaller substrings.",
    "start": "1208210",
    "end": "1213390"
  },
  {
    "text": "We look at those values. We take the max. As long as you compute\nthis in a generally right-to-left and bottom-up\nfashion, whenever you're",
    "start": "1213390",
    "end": "1221310"
  },
  {
    "text": "trying to compute\na guy, you will have the-- its predecessors\nalready computed. That's the topological\norder of this graph.",
    "start": "1221310",
    "end": "1228030"
  },
  {
    "text": "And then, at the end, we\nget our answer, which is 2. And now, if we pay attention\nto where we came from--",
    "start": "1228030",
    "end": "1233490"
  },
  {
    "text": "for example, this vertex had\nto come from this direction-- 2 is the max of 2 and 1,\nso I highlight the 2 edge.",
    "start": "1233490",
    "end": "1241800"
  },
  {
    "text": "And if I follow this path,\nthere should be a unique path to some base case.",
    "start": "1241800",
    "end": "1248039"
  },
  {
    "text": "We don't know which one. And in this case,\nthe diagonal edges correspond to my\nmatching letters.",
    "start": "1248040",
    "end": "1254070"
  },
  {
    "text": "So there's the H here,\nfollowed by the I here.",
    "start": "1254070",
    "end": "1259590"
  },
  {
    "text": "And so HI is our longest\ncommon substring. In general, we just\nfollow these pointers backward-- the red pointers--\nand we get our answer.",
    "start": "1259590",
    "end": "1268090"
  },
  {
    "text": "So not only do we compute\nthe length of the LCS, but we actually can find the\nLCS using parent pointers.",
    "start": "1268090",
    "end": "1274740"
  },
  {
    "start": "1274740",
    "end": "1290390"
  },
  {
    "text": "And this is a concept you can\nuse in most dynamic programs, including all the\nones from today.",
    "start": "1290390",
    "end": "1296480"
  },
  {
    "text": "OK, any questions about LCS? ",
    "start": "1296480",
    "end": "1302370"
  },
  {
    "text": "All right-- perfectly clear\nto everyone in the audience. ",
    "start": "1302370",
    "end": "1308880"
  },
  {
    "text": "Now we move onto longest\nincreasing subsequence, which--",
    "start": "1308880",
    "end": "1314430"
  },
  {
    "text": "did I lose a page here? I just disordered them. ",
    "start": "1314430",
    "end": "1321140"
  },
  {
    "text": "OK, this problem has\nalmost the same name, but is quite different\nand behavior-- longest increasing subsequence--",
    "start": "1321140",
    "end": "1331390"
  },
  {
    "text": " LIS, instead of LCS--",
    "start": "1331390",
    "end": "1337720"
  },
  {
    "text": " both famous problems, examples\nof dynamic programming.",
    "start": "1337720",
    "end": "1345470"
  },
  {
    "text": "Here we're just given one\nsequence, like carbohydrate.",
    "start": "1345470",
    "end": "1353140"
  },
  {
    "text": " So this is a\nsequence of letters,",
    "start": "1353140",
    "end": "1359510"
  },
  {
    "text": "and I want to find the longest\nsubsequence of this sequence that is increasing--\nstrictly increasing,",
    "start": "1359510",
    "end": "1365930"
  },
  {
    "text": "let's say-- so in this\ncase, alphabetically. I could include CR, for\nexample, but not CB.",
    "start": "1365930",
    "end": "1373760"
  },
  {
    "text": "That would be a\ndescending subsequence. In this example,\nthe right answer--",
    "start": "1373760",
    "end": "1380840"
  },
  {
    "text": "or a right answer is abort. There aren't very many English\nwords that are increasing,",
    "start": "1380840",
    "end": "1387200"
  },
  {
    "text": "but there are some, and I\nlooked through all of them. As I just implemented\nthis dynamic program",
    "start": "1387200",
    "end": "1392930"
  },
  {
    "text": "we're about to write down,\nit took me like two minutes to write down the\nDP, and then more",
    "start": "1392930",
    "end": "1398240"
  },
  {
    "text": "work to read the dictionary\nand look for cool examples. So in general, we're\ngiven some sequence A,",
    "start": "1398240",
    "end": "1408680"
  },
  {
    "text": "and we want to find the longest\nincreasing subsequence of A--",
    "start": "1408680",
    "end": "1414350"
  },
  {
    "text": "the longest sequence that\nis increasing, strictly. ",
    "start": "1414350",
    "end": "1422350"
  },
  {
    "text": "We could use the same thing to\nsolve not strictly increasing, but-- ",
    "start": "1422350",
    "end": "1428679"
  },
  {
    "text": "so here things are going\nto be a little trickier. It's easy, in that we just\nhave a single sequence. So again, we think, OK,\nlet's look at our chart here.",
    "start": "1428680",
    "end": "1436360"
  },
  {
    "text": "We could try prefixes,\nsuffixes, or substrings. I personally prefer suffixes. Jason prefers prefixes.",
    "start": "1436360",
    "end": "1442630"
  },
  {
    "text": "Whatever you prefer is fine, but\nalways, generally, start there,",
    "start": "1442630",
    "end": "1449317"
  },
  {
    "text": "because there's nothing\nin this problem that makes me think I need to\ndelete things from both ends. AUDIENCE: I have a question.",
    "start": "1449317",
    "end": "1454600"
  },
  {
    "text": "ERIK DEMAINE: Yeah-- question? AUDIENCE: Isn't the answer\nto this problem always 26? ",
    "start": "1454600",
    "end": "1460560"
  },
  {
    "text": "ERIK DEMAINE: Is the\nanswer always, at most, 26? Yes, if you're dealing\nwith English words--",
    "start": "1460560",
    "end": "1467110"
  },
  {
    "text": "so when I say sequence here,\nthis is a sequence of arbitrary integers-- word size integers.",
    "start": "1467110",
    "end": "1472430"
  },
  {
    "text": "So there you can have\na ton of variety. This is just for the fun of\nexamples, I've drawn this.",
    "start": "1472430",
    "end": "1477760"
  },
  {
    "text": "But even if the answer is\n26, finding that longest common subsequence is-- the obvious algorithm would be\nto take all substrings of size",
    "start": "1477760",
    "end": "1486340"
  },
  {
    "text": "26, which is n to the 26. We're going to do much\nfaster than that here.",
    "start": "1486340",
    "end": "1491920"
  },
  {
    "text": "N squared time. And then, if you remove\nthe strictly increasing, then it can be\narbitrarily large.",
    "start": "1491920",
    "end": "1499840"
  },
  {
    "text": "OK, so let's try to do this. ",
    "start": "1499840",
    "end": "1507760"
  },
  {
    "text": "Maybe I won't be so pessimistic\nto write attempt here. Let's just go for it.",
    "start": "1507760",
    "end": "1513130"
  },
  {
    "text": " So I want some subproblems, and\nI'm going to choose suffixes.",
    "start": "1513130",
    "end": "1518830"
  },
  {
    "text": "So I'm going to define L of i\nto be the longest increasing subsequence of the suffix\nof A starting at i.",
    "start": "1518830",
    "end": "1526870"
  },
  {
    "text": "That's the obvious thing to do. And now I'm going to leave\nmyself a little space,",
    "start": "1526870",
    "end": "1533200"
  },
  {
    "text": "and then I'd like a\nrelation on these. So I'd like to say\nwhat L of i is.",
    "start": "1533200",
    "end": "1543260"
  },
  {
    "text": "And what do I have to work with? Well, I have live\nthings larger than i. Those would be smaller suffixes.",
    "start": "1543260",
    "end": "1551570"
  },
  {
    "text": "But let's go back to, what\nis a question that I could ask about this subproblem\nthat might help me figure out",
    "start": "1551570",
    "end": "1560120"
  },
  {
    "text": "what the longest increasing\nsubsequence looks like? So we're looking at a-- ",
    "start": "1560120",
    "end": "1566420"
  },
  {
    "text": "here's A from i on. Longest increasing subsequence\nis some subsequence.",
    "start": "1566420",
    "end": "1571970"
  },
  {
    "text": "And we'd like to\nremove letter i. Now, when we do that,\nthere are two choices. Maybe i is in the longest\nincreasing subsequence,",
    "start": "1571970",
    "end": "1578840"
  },
  {
    "text": "or it's not in. So the question I\nwould like to answer is, is i in the longest\nincreasing subsequence of A--",
    "start": "1578840",
    "end": "1588620"
  },
  {
    "text": "of A from i onwards?  This is a binary question.",
    "start": "1588620",
    "end": "1594590"
  },
  {
    "text": "There are two options-- so again, just like before. And so I can brute\nforce those two options.",
    "start": "1594590",
    "end": "1601340"
  },
  {
    "text": "And then I want the longest one,\nso I'm going to take the max. So I'd like to take the max\nof something like Li plus 1.",
    "start": "1601340",
    "end": "1609980"
  },
  {
    "text": "So in the case that I don't put\ni in the solution, that's fine. Then I just look at i plus 1 on,\nand recursively compute that,",
    "start": "1609980",
    "end": "1619370"
  },
  {
    "text": "and that would be my answer. And the other\noption is that I do put i in the longest increasing\nsubsequence, so I do 1",
    "start": "1619370",
    "end": "1625130"
  },
  {
    "text": "plus the rest L i plus 1.",
    "start": "1625130",
    "end": "1631830"
  },
  {
    "text": "If I close this\nbrace, this would be a very strange recurrence,\nbecause this is always bigger than this one.",
    "start": "1631830",
    "end": "1638570"
  },
  {
    "text": "There's something wrong\nhere, and the something wrong is I haven't enforced\nincreasing at all.",
    "start": "1638570",
    "end": "1644753"
  },
  {
    "text": "There's no constraints here. It's just saying, well, I'll\ni put in, and then I'll do whatever remains, and I'll\npray that that's increasing--",
    "start": "1644753",
    "end": "1651970"
  },
  {
    "text": "probably won't be, because\nindeed, if i is a letter--",
    "start": "1651970",
    "end": "1657429"
  },
  {
    "text": "or is a number that is\nstrictly greater than i plus 1, then this will be wrong. So I really can't\nalways do this.",
    "start": "1657430",
    "end": "1666820"
  },
  {
    "text": "I could check whether i plus\n1 is in the answer, but some-- but I don't.",
    "start": "1666820",
    "end": "1672550"
  },
  {
    "text": "I can check whether the letter\ni is less than letter i plus 1. But maybe I put this in the\nlongest increasing subsequence",
    "start": "1672550",
    "end": "1679733"
  },
  {
    "text": "and then I put this in the\nlongest increasing subsequence, and so I need to\ncompare these two items. But I don't know when\nthat's going to happen.",
    "start": "1679733",
    "end": "1686290"
  },
  {
    "text": "Things seem really hard. And indeed, there's no way,\nfrom this subproblem definition,",
    "start": "1686290",
    "end": "1692259"
  },
  {
    "text": "to write down a relation. But there is a slight\ntweak to this definition",
    "start": "1692260",
    "end": "1699260"
  },
  {
    "text": "that makes it work. So the trouble we have\nhere-- and this is the idea",
    "start": "1699260",
    "end": "1705500"
  },
  {
    "text": "of subproblem constraints\nor conditions-- the trouble we have\nis, when we recursively",
    "start": "1705500",
    "end": "1712010"
  },
  {
    "text": "compute the longest increasing\nsubsequence on the remainder, we don't know the first\nitem in that answer.",
    "start": "1712010",
    "end": "1720919"
  },
  {
    "text": "Maybe it's i plus 1. Maybe it's some guy over here. If we knew who it\nwas, then we could compare that item to item i.",
    "start": "1720920",
    "end": "1727850"
  },
  {
    "text": "And so what we'd like to\ndo is add a constraint",
    "start": "1727850",
    "end": "1733340"
  },
  {
    "text": "to the subproblem that somehow\nlets us know where the longest increasing subsequence starts.",
    "start": "1733340",
    "end": "1739018"
  },
  {
    "text": "So what I would like to say is\nlong as increasing subsequence of that suffix that\nstarts with A of i.",
    "start": "1739018",
    "end": "1752390"
  },
  {
    "text": "So in other words,\nit includes A of i. ",
    "start": "1752390",
    "end": "1759660"
  },
  {
    "text": "This was a separate question.  OK, this is a bit of\na funny constraint.",
    "start": "1759660",
    "end": "1766410"
  },
  {
    "text": "It changes the problem. It's no longer what\nwe want to solve. If you think about\nthe original problem,",
    "start": "1766410",
    "end": "1774510"
  },
  {
    "text": "before, it was solving L of 0. We just want the longest\nincreasing subsequence of the whole thing.",
    "start": "1774510",
    "end": "1779710"
  },
  {
    "text": "Now it's not necessarily L of 0. L of 0 means, what is the\nlongest increasing sub sequence",
    "start": "1779710",
    "end": "1784800"
  },
  {
    "text": "of the whole sequence A that\nincludes the first letter of A?",
    "start": "1784800",
    "end": "1790800"
  },
  {
    "text": "And maybe we do include\nthe first letter of A, maybe we don't we don't\nknow where the longest increasing subsequence starts.",
    "start": "1790800",
    "end": "1795960"
  },
  {
    "text": "Here, for example, it didn't. It started at the second letter. But conveniently, it's\nOK that we don't know,",
    "start": "1795960",
    "end": "1803450"
  },
  {
    "text": "because that's just\nanother question we could ask is, where do we start?",
    "start": "1803450",
    "end": "1808610"
  },
  {
    "text": "Where might the LIS start? Could start at the first\nletter, second letter, third letter-- there's\nonly n choices,",
    "start": "1808610",
    "end": "1813769"
  },
  {
    "text": "and let's just take\nthe max of all of them. So before I get to the relation,\nlet's solve this problem.",
    "start": "1813770",
    "end": "1819740"
  },
  {
    "text": "I just want the max\nof L of i for all i. ",
    "start": "1819740",
    "end": "1829305"
  },
  {
    "text": "I guess we've been\nwriting size of A here. OK, the maximum will\nbe the overall longest",
    "start": "1829305",
    "end": "1837062"
  },
  {
    "text": "increasing subsequence. So if I could find longest\nincreasing sub sequence that includes the first letter, or\nthe longest one that includes",
    "start": "1837062",
    "end": "1843450"
  },
  {
    "text": "the second letter, and so on-- so it starts at\nthe first letter, starts at the second\nletter-- then this max",
    "start": "1843450",
    "end": "1848520"
  },
  {
    "text": "will be the longest overall. This subproblem is not\nwhat I really wanted, but it's still good\nenough, because it lets",
    "start": "1848520",
    "end": "1855150"
  },
  {
    "text": "me solve my original problem. And this is adding an extra\nconstraint to my problem.",
    "start": "1855150",
    "end": "1862019"
  },
  {
    "text": "And doing this is challenging. Thinking about what the right\nconstraint that would let you",
    "start": "1862020",
    "end": "1867659"
  },
  {
    "text": "solve your problem is tricky,\nespecially in the beginning. But for now, let's just take\nthis as a thing that works.",
    "start": "1867660",
    "end": "1873840"
  },
  {
    "text": "Why does it work? Because now I can say-- well, this term was fine, max--",
    "start": "1873840",
    "end": "1880620"
  },
  {
    "text": "so I'm trying to write longest\nincreasing subsequence starting with the i-th letter, versus--",
    "start": "1880620",
    "end": "1885900"
  },
  {
    "text": " yeah, actually, no. This is just going\nto be different.",
    "start": "1885900",
    "end": "1891442"
  },
  {
    "text": " OK, so now I get to the\ncentral issue, which is I",
    "start": "1891442",
    "end": "1897940"
  },
  {
    "text": "know, by the definition of L\nof i, that I include letter i. This is going to be in my\nlongest increasing subsequence.",
    "start": "1897940",
    "end": "1904690"
  },
  {
    "text": "That's what I'm looking\nfor, this definition. But I don't know what\nthe second letter is--",
    "start": "1904690",
    "end": "1912019"
  },
  {
    "text": "could be i plus 1,\ncould be i plus 2, could be anything bigger. Whenever there's\nsomething I don't know,",
    "start": "1912020",
    "end": "1918240"
  },
  {
    "text": "I'll just brute force it. I don't care that I don't know. I'll just take a max over\nall the possible choices.",
    "start": "1918240",
    "end": "1925470"
  },
  {
    "text": "Let's say that the next\nletter included in the longest increasing subsequence i is j.",
    "start": "1925470",
    "end": "1931590"
  },
  {
    "text": "Then I would like\nto look at L of j. Now, I don't know what j is,\nbut I'll just brute force",
    "start": "1931590",
    "end": "1937860"
  },
  {
    "text": "all possible choices for j. So that's going to be\ni strictly less than j, because I don't want include\nthe same letter i again.",
    "start": "1937860",
    "end": "1946290"
  },
  {
    "text": "And otherwise, I would get\nan infinite recursive loop, if I put less than\nor equal to here.",
    "start": "1946290",
    "end": "1951330"
  },
  {
    "text": "And maybe I don't do\nanything else to n.",
    "start": "1951330",
    "end": "1956419"
  },
  {
    "text": "OK, not quite done-- now-- this is the\ninteresting part--",
    "start": "1956420",
    "end": "1961880"
  },
  {
    "text": "I can enforce increasing,\nbecause I can't just choose any letter j to the right of i.",
    "start": "1961880",
    "end": "1968000"
  },
  {
    "text": "Also, the number-- or letter\nthat's written in here has to be greater than the\nnumber that's written here.",
    "start": "1968000",
    "end": "1974360"
  },
  {
    "text": "That's the strictly\nincreasing property. So I can add as a constraint\nin this max to say A of i",
    "start": "1974360",
    "end": "1986820"
  },
  {
    "text": "am strictly less than A of j. And if you wanted\nnon-strictly increasing, you would add an equal there.",
    "start": "1986820",
    "end": "1994480"
  },
  {
    "text": "This is mathematical notation. In Python, you would say max\nopen paren of this thing for j",
    "start": "1994480",
    "end": "2001200"
  },
  {
    "text": "in this range, if this holds. So I'm just doing for\nloop, but I only do--",
    "start": "2001200",
    "end": "2007680"
  },
  {
    "text": "I only look at the\npossible choices for j when the strict\nincreasing property holds.",
    "start": "2007680",
    "end": "2015550"
  },
  {
    "text": "And then, when that\nholds, I put-- check this. Now, this set might be empty. I need to define what the\nmax is when it's empty.",
    "start": "2015550",
    "end": "2024030"
  },
  {
    "text": "Oh, I also need a\n1 plus, don't I? ",
    "start": "2024030",
    "end": "2029280"
  },
  {
    "text": "Let me just do 1 plus. So we're told that i is in the\nanswer, so we always get 1.",
    "start": "2029280",
    "end": "2035760"
  },
  {
    "text": "And then the remainder\nis this or 0. ",
    "start": "2035760",
    "end": "2046200"
  },
  {
    "text": "If there are no Aj's\ngreater than Ai, then we'll default to 0 and\nsay that i is the only item",
    "start": "2046200",
    "end": "2054929"
  },
  {
    "text": "in my increasing subsequence. OK, so there are a few\ndetails to get right,",
    "start": "2054929",
    "end": "2060600"
  },
  {
    "text": "but in general, once you figure\nout what these recurrences look like, they're very simple. This is one line of code, and\nthen all you need in addition",
    "start": "2060600",
    "end": "2070869"
  },
  {
    "text": "to this is the\noriginal subproblem and some other things.",
    "start": "2070870",
    "end": "2077230"
  },
  {
    "text": "We need the base cases, but\nI should do them in order.",
    "start": "2077230",
    "end": "2082658"
  },
  {
    "text": "Topological order is\njust the usual for loop,",
    "start": "2082659",
    "end": "2088510"
  },
  {
    "text": "because I'm doing suffixes. It's going to be i equals\nlength of A down to 0.",
    "start": "2088510",
    "end": "2095440"
  },
  {
    "text": "Base case is going\nto be L of length",
    "start": "2095440",
    "end": "2100925"
  },
  {
    "text": "of A, which is 0,\nbecause there's no letters in that suffix.",
    "start": "2100925",
    "end": "2106480"
  },
  {
    "text": "And we already did\nO, and then time-- ",
    "start": "2106480",
    "end": "2111500"
  },
  {
    "text": "is a little different\nfrom the past examples. So number of subproblems,\njust like usual, is linear length\nof A subproblems.",
    "start": "2111500",
    "end": "2120660"
  },
  {
    "text": " It's only one sequence\nwe're thinking about now,",
    "start": "2120660",
    "end": "2125875"
  },
  {
    "text": "unlike the previous example. But the work we're\ndoing in this relation now is non-trivial work.",
    "start": "2125875",
    "end": "2131040"
  },
  {
    "text": "Before we were just guessing\namong two different choices. Now we're guessing among\nup to n different choices.",
    "start": "2131040",
    "end": "2136920"
  },
  {
    "text": "This n here is length of A.",
    "start": "2136920",
    "end": "2142130"
  },
  {
    "text": "And so we have\ntheta length of A,",
    "start": "2142130",
    "end": "2149619"
  },
  {
    "text": "non-recursive work that we're\ndoing in each subproblem.",
    "start": "2149620",
    "end": "2160990"
  },
  {
    "text": "Or you might think of this as\nchoices that we're considering.",
    "start": "2160990",
    "end": "2166210"
  },
  {
    "text": "And for each choice,\nwe're just spending-- I mean, we're just taking a\nmax of those items, adding 1. So that's a constant overhead.",
    "start": "2166210",
    "end": "2172610"
  },
  {
    "text": "And so we just get this\nproduct, which is A squared--",
    "start": "2172610",
    "end": "2177910"
  },
  {
    "text": " cool.",
    "start": "2177910",
    "end": "2182960"
  },
  {
    "text": "So that's longest\nincreasing subsequence. Make sure I didn't\nmiss anything else--",
    "start": "2182960",
    "end": "2188819"
  },
  {
    "text": "so we're using this idea\nof asking a question, and guessing or brute\nforcing the answer",
    "start": "2188820",
    "end": "2195320"
  },
  {
    "text": "to that question in two places. One place is we're\npromising-- we're",
    "start": "2195320",
    "end": "2203900"
  },
  {
    "text": "requesting that the longest\nincreasing subsequence starts at i, so then the\nquestion is, well,",
    "start": "2203900",
    "end": "2209000"
  },
  {
    "text": "what is the very\nsecond item that's",
    "start": "2209000",
    "end": "2214450"
  },
  {
    "text": "in the longest increasing\nsubsequence that starts with i? We're calling that\nj, and we're brute",
    "start": "2214450",
    "end": "2220600"
  },
  {
    "text": "forcing all the possible\nchoices that j could be, which conveniently\nlets us check,",
    "start": "2220600",
    "end": "2226210"
  },
  {
    "text": "confirm that it's actually an\nincreasing subsequence locally from i to j. And then L of j will\ntake care of the rest.",
    "start": "2226210",
    "end": "2233320"
  },
  {
    "text": "By induction, the rest\nof the longest increase in subsequence starting at\nj will also be increasing. And so this guarantees, by\ninduction, the whole thing",
    "start": "2233320",
    "end": "2240550"
  },
  {
    "text": "will be increasing. Then we also use this\nlocal brute force",
    "start": "2240550",
    "end": "2246190"
  },
  {
    "text": "to solve the original problem. So we added this constraint\nof starting at i, but we didn't actually know\noverall where to start.",
    "start": "2246190",
    "end": "2252340"
  },
  {
    "text": "But that's fine, because\nthere's only A choices. So I should mention, in\nthe running time analysis--",
    "start": "2252340",
    "end": "2258590"
  },
  {
    "text": "so they're solving\nthe subproblems. That's fine, but\nthen there's also a plus whatever it costs to\nsolve the original problem.",
    "start": "2258590",
    "end": "2266050"
  },
  {
    "text": "But that's OK. That's length of A. All of this plus length of A\nis still length of A squared.",
    "start": "2266050",
    "end": "2274900"
  },
  {
    "text": " But if you're doing exponential\nwork here, that would be bad.",
    "start": "2274900",
    "end": "2280849"
  },
  {
    "text": "We have to do some\nreasonable amount of work to solve the original problem\nin terms of all the subproblems.",
    "start": "2280850",
    "end": "2285980"
  },
  {
    "text": "I have an example hiding here. ",
    "start": "2285980",
    "end": "2292410"
  },
  {
    "text": "This is a little\nharder to stare at. Here I have empathy.",
    "start": "2292410",
    "end": "2297510"
  },
  {
    "text": "And this example is not--\ndoesn't have much empathy, because the longest increasing\nsubsequence of empathy is empty.",
    "start": "2297510",
    "end": "2303704"
  },
  {
    "text": " Empty is one of the few English\nwords that's increasing.",
    "start": "2303705",
    "end": "2311350"
  },
  {
    "text": "And the hard part here\nis drawing the DAG. It's almost the complete\ngraph, but we only",
    "start": "2311350",
    "end": "2318790"
  },
  {
    "text": "draw edges from smaller\nletters to bigger letters. So we draw from E\nto M, from E to P,",
    "start": "2318790",
    "end": "2325510"
  },
  {
    "text": "from E not to A-- there's\nno edge from E to A-- from E to T, not from E to H,\nbut yes from E to Y.",
    "start": "2325510",
    "end": "2333760"
  },
  {
    "text": "And then we also draw\nfrom E to the base case, which is there's\nno more letters. That edge to the base case is--",
    "start": "2333760",
    "end": "2342491"
  },
  {
    "text": " corresponds to this 0, or I\nguess this n, where we say,",
    "start": "2342491",
    "end": "2350760"
  },
  {
    "text": "oh, let's just recurse. Let's just throw away--",
    "start": "2350760",
    "end": "2356085"
  },
  {
    "text": "actually, maybe we don't need\nthe union 0 there, in fact, because we include L of n,\nwhich is the empty substring.",
    "start": "2356085",
    "end": "2365060"
  },
  {
    "text": "Then the definition of\nL is a little funny. What does it mean to say\nyou start with A of n?",
    "start": "2365060",
    "end": "2370410"
  },
  {
    "text": "Hm? AUDIENCE: If we define A of n. ERIK DEMAINE: Right,\nA of n is not defined, so that's not so nice.",
    "start": "2370410",
    "end": "2375650"
  },
  {
    "text": "So maybe fix that. n equals case.",
    "start": "2375650",
    "end": "2383565"
  },
  {
    "text": "OK, but I'm still\ngoing to draw an edge there-- conceptually say, oh,\nwe're just done at that point.",
    "start": "2383565",
    "end": "2388880"
  },
  {
    "text": "That's the base case, where\nwe have no string left--",
    "start": "2388880",
    "end": "2394160"
  },
  {
    "text": "cool. And when I said from to to\nactually, I meant the reverse. All the edges go\nfrom right to left.",
    "start": "2394160",
    "end": "2400410"
  },
  {
    "text": "And then what we're doing\nis looking for the longest path in this DAG.",
    "start": "2400410",
    "end": "2405950"
  },
  {
    "text": "Longest path is maybe a problem\nwe've talked about in problem session, because it's a DAG--",
    "start": "2405950",
    "end": "2412730"
  },
  {
    "text": "well, longest path is the\nsame thing as shortest path, if you just negate\nall the weights. There are no weights\nin this picture,",
    "start": "2412730",
    "end": "2418619"
  },
  {
    "text": "so if you just put negative\n1 on all these edges and ask for the shortest path\nfrom the base to anywhere--",
    "start": "2418620",
    "end": "2428630"
  },
  {
    "text": "so single source shortest\npaths from this base-- then we would end up\ngetting this path, which,",
    "start": "2428630",
    "end": "2436740"
  },
  {
    "text": "if you look at it,\nis E-M-P-T-Y, empty.",
    "start": "2436740",
    "end": "2441880"
  },
  {
    "text": "And so that shortest path\nis indeed the right answer. What I've drawn here is\nthe shortest path tree.",
    "start": "2441880",
    "end": "2447340"
  },
  {
    "text": "So also, if you wanted the\nlongest increasing subsequence starting at A, then it is\nA-T-Y, just by following",
    "start": "2447340",
    "end": "2454630"
  },
  {
    "text": "the red arrows here. And how do you get that? You just draw the\nparent pointers,",
    "start": "2454630",
    "end": "2459700"
  },
  {
    "text": "just like we did before. I didn't mention, but\nthis example can also be solved with shortest paths.",
    "start": "2459700",
    "end": "2465080"
  },
  {
    "text": "Once I construct this graph,\nyou can do the shortest path from some base--",
    "start": "2465080",
    "end": "2471530"
  },
  {
    "text": "I don't know which one-- to here. If you put negative 1 on\nall of the diagonal edges",
    "start": "2471530",
    "end": "2481030"
  },
  {
    "text": "and you put weight\n0 everywhere else, then that corresponds to-- the shortest path\nin that graph will",
    "start": "2481030",
    "end": "2487360"
  },
  {
    "text": "correspond to the longest-- the path with the\nmost diagonal edges. And that makes sense, because\nthe diagonal is where we",
    "start": "2487360",
    "end": "2492880"
  },
  {
    "text": "actually get letters in common. And so in this case, it's 2.",
    "start": "2492880",
    "end": "2498070"
  },
  {
    "text": "So both of these dynamic\nprograms could instead-- instead of writing them\nas a recursive thing with memoization or writing\nthem bottom-up as a for loop",
    "start": "2498070",
    "end": "2506980"
  },
  {
    "text": "and then doing the\ncomputation, you could instead construct\na graph and then",
    "start": "2506980",
    "end": "2512410"
  },
  {
    "text": "run DAG shortest paths on it. But the point is these\nare the same thing. It's actually a lot\nsimpler to just write",
    "start": "2512410",
    "end": "2518890"
  },
  {
    "text": "the dynamic programming\ncode, because it's just a for loop and\nthen a recurrence.",
    "start": "2518890",
    "end": "2524240"
  },
  {
    "text": "So you're just\nupdating an array. Because you already know what\nthe topological order is,",
    "start": "2524240",
    "end": "2530240"
  },
  {
    "text": "you don't have to write a\ngeneric depth for search algorithm, take the\nfinishing order,",
    "start": "2530240",
    "end": "2535460"
  },
  {
    "text": "reverse it, and then run this--",
    "start": "2535460",
    "end": "2541070"
  },
  {
    "text": "run DAG shortest paths\nwith relaxation-- much simpler to just\nwrite down the recurrence,",
    "start": "2541070",
    "end": "2547380"
  },
  {
    "text": "once you figured it out. But they are the same\nin these examples. In Fibonacci, for example,\nyou cannot write Fibonacci",
    "start": "2547380",
    "end": "2554480"
  },
  {
    "text": "as a single source\nshortest paths problem, but a lot of DPs you can write\nas shortest paths problem--",
    "start": "2554480",
    "end": "2561250"
  },
  {
    "text": "just a connection to\nthings we've seen. All right, last example,\nlast problem for today--",
    "start": "2561250",
    "end": "2572440"
  },
  {
    "text": "we'll do more next week. ",
    "start": "2572440",
    "end": "2582350"
  },
  {
    "text": "Alternating coin game--\nthis is a two player game. We're going to find the\noptimal strategy in this game.",
    "start": "2582350",
    "end": "2589960"
  },
  {
    "text": "In general, you have\na sequence of coins,",
    "start": "2589960",
    "end": "2597560"
  },
  {
    "text": "and we have two players. They take turns. So given coins of value\nv0 to v n minus 1--",
    "start": "2597560",
    "end": "2615700"
  },
  {
    "text": "so it's a sequence. They're given in order-- in some order-- for\nexample, 5, 10, 100,",
    "start": "2615700",
    "end": "2625930"
  },
  {
    "text": "25-- not necessarily\nsorted order. And the rules of the game are\nwe're going to take turns. I'm going to take\nturns with you.",
    "start": "2625930",
    "end": "2631970"
  },
  {
    "text": "I'm going to use I and you\nto refer to the two players. And so in each turn, either\none-- whoever's turn it is,",
    "start": "2631970",
    "end": "2640390"
  },
  {
    "text": "I get to-- we get to choose either the\nfirst coin or the last coin among the coins that remain.",
    "start": "2640390",
    "end": "2646400"
  },
  {
    "text": "So at the beginning,\nI can choose 5 or 25. And I might think,\noh, 25's really good. That's better than 5.",
    "start": "2646400",
    "end": "2651995"
  },
  {
    "text": "I should choose that. But then, of course,\nyou're going next, and you're going to choose\n100, and you'll win the game.",
    "start": "2651995",
    "end": "2657490"
  },
  {
    "text": "You'll get more of the\ntotal value of the coins. So in this is example,\na better strategy is to take the 5, because then\nthe 100 is still in the middle.",
    "start": "2657490",
    "end": "2666290"
  },
  {
    "text": "And so once I take 5, you\nget to choose 10 or 25.",
    "start": "2666290",
    "end": "2672280"
  },
  {
    "text": "At this point, you'd\nprobably prefer 25, because that's better than 10. But whichever you choose,\nI can take the 100.",
    "start": "2672280",
    "end": "2678350"
  },
  {
    "text": "And so I get 105 points, and\nyou're going to get 35 points.",
    "start": "2678350",
    "end": "2683670"
  },
  {
    "text": "OK-- good example for me. So that's easy for\na simple example,",
    "start": "2683670",
    "end": "2689740"
  },
  {
    "text": "but in general, there are\nexponentially many strategies here. At each step, either of us\ncould go left or right--",
    "start": "2689740",
    "end": "2695610"
  },
  {
    "text": "choose is the leftmost\nor the rightmost. And we're going to give a\ndynamic programming algorithm",
    "start": "2695610",
    "end": "2700620"
  },
  {
    "text": "that just solves this fast. I didn't mention-- so this\nalgorithm is quadratic time,",
    "start": "2700620",
    "end": "2708250"
  },
  {
    "text": "but it can be made n log n time. It's a fun exercise. Using a lot of the data\nstructure augmentation stuff",
    "start": "2708250",
    "end": "2714460"
  },
  {
    "text": "we've done, you can\nmake this n log n. This algorithm, I think, is\ngoing to be n squared time.",
    "start": "2714460",
    "end": "2721750"
  },
  {
    "text": " So I won't right\nthe problem exactly,",
    "start": "2721750",
    "end": "2730670"
  },
  {
    "text": "but I think you know the rules. Choose leftmost or rightmost\ncoin, alternating moves.",
    "start": "2730670",
    "end": "2736130"
  },
  {
    "text": "So I'd like to define\nsome subproblems. And this is a problem that's\nvery naturally a substring",
    "start": "2736130",
    "end": "2743180"
  },
  {
    "text": "problem. If I just looked at suffixes,\nthat would deal great with-- if I'm deleting coins from the\nleft, but as soon as I delete--",
    "start": "2743180",
    "end": "2751340"
  },
  {
    "text": "and if I delete coins\nonly from the right, that would give me prefixes. But I'll tell you now,\nthere's no dynamic programming",
    "start": "2751340",
    "end": "2757850"
  },
  {
    "text": "where the answer is\nsuffixes and prefixes. You can do suffixes or\nprefixes, but if you need both,",
    "start": "2757850",
    "end": "2763830"
  },
  {
    "text": "you almost certainly need\nsubstring, because as soon as I delete the first\ncoin, and then maybe you",
    "start": "2763830",
    "end": "2769880"
  },
  {
    "text": "take the second coin-- that's exactly the optimal\nstrategy here-- now you have an arbitrary\nsubstring in the middle.",
    "start": "2769880",
    "end": "2775775"
  },
  {
    "text": "But substrings are\nenough, because we're only leading from the ends. We'll look at substrings. ",
    "start": "2775775",
    "end": "2783500"
  },
  {
    "text": "So more precisely-- this\nis just the intuition-- we're going to define\nsome generic x of i,",
    "start": "2783500",
    "end": "2791715"
  },
  {
    "text": "j is going to be what is\nthe maximum total value I",
    "start": "2791715",
    "end": "2804300"
  },
  {
    "text": "can get from this game, if we\nplay it on coins of value Vi",
    "start": "2804300",
    "end": "2821890"
  },
  {
    "text": "to Vj. So that's a substring.",
    "start": "2821890",
    "end": "2827340"
  },
  {
    "text": "So this is one way to\nwrite down the subproblems, and it's also a good way.",
    "start": "2827340",
    "end": "2833790"
  },
  {
    "text": "You could write down a\nrelation on this definition",
    "start": "2833790",
    "end": "2841450"
  },
  {
    "text": "of subproblems. But I'm low on time. There's two ways to\nsolve this problem. This is a reasonable\nway, exploiting",
    "start": "2841450",
    "end": "2847690"
  },
  {
    "text": "that the game is zero-sum. But I'd like to change just\na little bit to give you,",
    "start": "2847690",
    "end": "2852880"
  },
  {
    "text": "I think, what's a cleaner way\nto solve the problem, which is to add a third coordinate\nto my subproblems.",
    "start": "2852880",
    "end": "2860430"
  },
  {
    "text": "So now it's parameterized\nby three things. P here is-- only\nhas two choices.",
    "start": "2860430",
    "end": "2868150"
  },
  {
    "text": "It's me or you. And this gets at a point\nthat's maybe not totally",
    "start": "2868150",
    "end": "2873880"
  },
  {
    "text": "clear from this definition-- max total value that I can get\nfrom these-- this substring",
    "start": "2873880",
    "end": "2879800"
  },
  {
    "text": "of coins. But this is not\nobviously what I need. So obviously, at the beginning,\nI want the whole string",
    "start": "2879800",
    "end": "2886870"
  },
  {
    "text": "and I want to know what my\nmaximum value is-- fine. And I go first in this game.",
    "start": "2886870",
    "end": "2892090"
  },
  {
    "text": "I didn't specify, but I do. [INAUDIBLE]",
    "start": "2892090",
    "end": "2898750"
  },
  {
    "text": "But as soon as I do a move-- as\nsoon as I take the first coin, for example-- it's now your turn.",
    "start": "2898750",
    "end": "2904300"
  },
  {
    "text": "And so I don't really want to\nknow the maximum total value that I would get if I go first.",
    "start": "2904300",
    "end": "2910809"
  },
  {
    "text": "I'd like to say, if\nplayer P goes first.",
    "start": "2910810",
    "end": "2917020"
  },
  {
    "text": "I'd really like to\nknow what happens in the case where you go first.",
    "start": "2917020",
    "end": "2923380"
  },
  {
    "text": "So for some of the\nsubstrings, I want to know what happens when you\ngo first, and for some of them,",
    "start": "2923380",
    "end": "2928540"
  },
  {
    "text": "I want to know what\nhappens when I go first, because as soon as I make\na move, it's your turn. And so we're going to flip back\nand forth between P being me",
    "start": "2928540",
    "end": "2935530"
  },
  {
    "text": "and P being you-- P-U. So you don't\nhave to parameterize.",
    "start": "2935530",
    "end": "2941810"
  },
  {
    "text": "There's a way to write\nthe recurrence otherwise, but this is, I think,\na lot more intuitive, because now we can do a\nvery simple relation, which",
    "start": "2941810",
    "end": "2953339"
  },
  {
    "text": "is as follows. So I'm going to\nsplit into two cases.",
    "start": "2953340",
    "end": "2958450"
  },
  {
    "text": "One is x of i, j, me and\nthe other is x of i, j, you. ",
    "start": "2958450",
    "end": "2965609"
  },
  {
    "text": "So x of i, j, me-- so I have some\nsubstring from i to j.",
    "start": "2965610",
    "end": "2970905"
  },
  {
    "text": " What could I do? I could take the first coin or\nI could take the second coin.",
    "start": "2970905",
    "end": "2977570"
  },
  {
    "text": "Which should I do? That's my question. What is my first move? Should I take the first\ncoin or the second coin?",
    "start": "2977570",
    "end": "2983510"
  },
  {
    "text": "So this is my question. What is the first move? ",
    "start": "2983510",
    "end": "2991040"
  },
  {
    "text": "There are exactly two possible\nanswers to that question, so we can afford to just brute\nforce them and take the max.",
    "start": "2991040",
    "end": "2999290"
  },
  {
    "text": "If we're moving, we\nwant the maximum number of points we can get-- maximum\ntotal value of the two choices.",
    "start": "2999290",
    "end": "3007569"
  },
  {
    "text": "So if I take from the\ni side, the left side, that would be x sub i plus 1, j.",
    "start": "3007570",
    "end": "3014663"
  },
  {
    "text": "Sorry. And now, crucially,\nwe flip players, because then it's your turn.",
    "start": "3014664",
    "end": "3021070"
  },
  {
    "text": "And if I take from the j side,\nthat will make it j minus 1. This is what I\naccidentally wrote",
    "start": "3021070",
    "end": "3026470"
  },
  {
    "text": "at the beginning of lecture. ",
    "start": "3026470",
    "end": "3031630"
  },
  {
    "text": "Also flip players. So either I shrink on the i\nside or I shrink on the j side. Oh, I should add on here the\nvalue of the coin that I get,",
    "start": "3031630",
    "end": "3041500"
  },
  {
    "text": "and add on the value\nthe coin that I took.",
    "start": "3041500",
    "end": "3046900"
  },
  {
    "text": "This is an expression\ninside the max. That sum.",
    "start": "3046900",
    "end": "3051994"
  },
  {
    "text": "And if I take the max those\ntwo options, that will give-- that is my local brute force\nthe best choice of how many--",
    "start": "3051995",
    "end": "3059275"
  },
  {
    "text": "what are the total\nvalue of coins I will get out of the\nremainder, given that you start, plus this coin that I took\nright now in the first step,",
    "start": "3059275",
    "end": "3066640"
  },
  {
    "text": "and for the two possible\nchoices of what that coin is? OK, what remains is, how do\nwe define this x of i, j, you.",
    "start": "3066640",
    "end": "3074770"
  },
  {
    "text": "This is a little bit funnier,\nbut it's conceptually similar. I'm going to write basically the\nsame thing here, but with me,",
    "start": "3074770",
    "end": "3085150"
  },
  {
    "text": "instead of you--\nbecause again, it flips. ",
    "start": "3085150",
    "end": "3090670"
  },
  {
    "text": "This is, if you go first, then\nthe very next move will be me. So this is just the\nsymmetric formula here.",
    "start": "3090670",
    "end": "3103079"
  },
  {
    "text": "I can even put the braces in-- so far, the same.",
    "start": "3103080",
    "end": "3108230"
  },
  {
    "text": "Now, I don't put in the plus Vi\nand I don't put in the plus Vj here, because if you're moving,\nI don't get those points.",
    "start": "3108230",
    "end": "3114987"
  },
  {
    "text": "So there's an asymmetry\nin this definition. You could define it\nin different ways, but this is the\nmaximum total value that I would get if you start.",
    "start": "3114988",
    "end": "3122420"
  },
  {
    "text": "So in your first move,\nyou get some points, but I don't get any\npoints out of that. So there's no plus Vi.",
    "start": "3122420",
    "end": "3128240"
  },
  {
    "text": "There's no plus Vj. It's just you either\nchoose the i-th coin or you choose the j-th\ncoin, and then the coins",
    "start": "3128240",
    "end": "3133820"
  },
  {
    "text": "that remain for me\nshrink accordingly. Now, you're kind of\na pain in the ass.",
    "start": "3133820",
    "end": "3139895"
  },
  {
    "text": "You're an adversary\nyou're trying to minimize my score\npotentially because you're trying to maximize your score.",
    "start": "3139895",
    "end": "3145780"
  },
  {
    "text": "This is a 0 sum game. So anything that\nyou get I don't get. If you want to\nmaximize your score,",
    "start": "3145780",
    "end": "3151750"
  },
  {
    "text": "you're trying to\nminimize my score. These are symmetric things. And so if you think for a while,\nthe right thing to put here",
    "start": "3151750",
    "end": "3157619"
  },
  {
    "text": "is min. From our perspective,\nwe're imagining what is the worst case that\ncould happen, no matter",
    "start": "3157620",
    "end": "3163410"
  },
  {
    "text": "what you do. And we don't have\ncontrol over what you do, and so we'd really like\nto see, what score would I",
    "start": "3163410",
    "end": "3171748"
  },
  {
    "text": "get if you chose the i-th coin? What score do you get if\nyou chose the j-th coin?",
    "start": "3171748",
    "end": "3177360"
  },
  {
    "text": "And then what we get is going\nto be the worst of those two possibilities. So when we get to\nchoose, we're maximizing.",
    "start": "3177360",
    "end": "3184800"
  },
  {
    "text": "And this is a general\ntwo player phenomenon that, when you choose,\nwe end up minimizing, because that's the saddest\nthing that could happen to us.",
    "start": "3184800",
    "end": "3192869"
  },
  {
    "text": "OK, this is one way to\nwrite a recurrence relation.",
    "start": "3192870",
    "end": "3198480"
  },
  {
    "text": "We have, of course,\nall of SRTBOT to do,",
    "start": "3198480",
    "end": "3205480"
  },
  {
    "text": "so the topological order\nhere is in increasing length of substance.",
    "start": "3205480",
    "end": "3211190"
  },
  {
    "text": "So the T is\nincreasing j minus i. Start with empty strings.",
    "start": "3211190",
    "end": "3217040"
  },
  {
    "text": "So base case is that\nx of i, i, me is Vi.",
    "start": "3217040",
    "end": "3226120"
  },
  {
    "text": "So here I'm inclusive in\nboth ends in this definition. So there is a coin I\ncan take at the end.",
    "start": "3226120",
    "end": "3232532"
  },
  {
    "text": "But if you move last and\nthere's one coin left, then I don't get it, so it's 0. Then we have the original\nproblem that is x i, j, me--",
    "start": "3232532",
    "end": "3242110"
  },
  {
    "text": "sorry-- x 0, n. That's the entire coin\nset, starting with me.",
    "start": "3242110",
    "end": "3247900"
  },
  {
    "text": "That was the problem\nI wanted to do. And then the running time we get\nis the number of subproblems--",
    "start": "3247900",
    "end": "3253240"
  },
  {
    "text": "that's theta n squared, because\nwe're doing substrings-- times the amount of\nnon-recursive work I do here.",
    "start": "3253240",
    "end": "3259960"
  },
  {
    "text": "That's just a max\nof two numbers. Very simple. Constant time.",
    "start": "3259960",
    "end": "3265210"
  },
  {
    "text": "So this is quadratic. ",
    "start": "3265210",
    "end": "3271099"
  },
  {
    "text": "Let me show you an example.  This is hard to draw, but\nwhat I've described here",
    "start": "3271100",
    "end": "3278049"
  },
  {
    "text": "is called solution\n2 in the notes. So here's our sequence-- 5, 10, 100, 25--",
    "start": "3278050",
    "end": "3283540"
  },
  {
    "text": "in both directions. And what we're interested\nin is all substrings. So over here I've\nwritten the choice for i.",
    "start": "3283540",
    "end": "3293050"
  },
  {
    "text": "So we start at one of these,\nand if you start here, you can't end\nearlier than there. So that's why we're in the\nupper diagonal of this matrix.",
    "start": "3293050",
    "end": "3301250"
  },
  {
    "text": "And then there's two\nversions of each problem-- the white version\nand the blue version just down and to\nthe right of it.",
    "start": "3301250",
    "end": "3306515"
  },
  {
    "text": "If you can't see\nwhat blue is, this is the version where you start. This is the version\nwhere I start.",
    "start": "3306515",
    "end": "3311740"
  },
  {
    "text": "And I've labeled here all\nof the different numbers. Please admire, because this\ntook a long time to draw.",
    "start": "3311740",
    "end": "3317470"
  },
  {
    "text": "But in particular,\nwe have 105 here, meaning that the maximum\npoints I can get 105.",
    "start": "3317470",
    "end": "3322630"
  },
  {
    "text": "And that's the case because,\nif we look over there, it is the max of these\ntwo incoming values",
    "start": "3322630",
    "end": "3331960"
  },
  {
    "text": "plus the Vi that I get. So either I go to the left and\nI take that item or I go down",
    "start": "3331960",
    "end": "3338290"
  },
  {
    "text": "and I take that item. So the option here is I\nwent to the left and took--",
    "start": "3338290",
    "end": "3347970"
  },
  {
    "text": "well, that's going to\nbe tricky to do in time. The claim is that\nthe best answer here",
    "start": "3347970",
    "end": "3353170"
  },
  {
    "text": "is to go here with the 100 and\ntake the 5, because going down",
    "start": "3353170",
    "end": "3358329"
  },
  {
    "text": "corresponds to\nremoving the last item. If I went to the left,\nthat corresponds to-- sorry-- the first item.",
    "start": "3358330",
    "end": "3363785"
  },
  {
    "text": "If I went to the\nleft, that corresponds to removing the last\nitem, so my options are 10 plus 25, which is\n35, versus 100 plus 5.",
    "start": "3363785",
    "end": "3374390"
  },
  {
    "text": "105 wins, so that's why\nthere's a red edge here showing that was my better choice.",
    "start": "3374390",
    "end": "3379460"
  },
  {
    "text": "And in general, if you follow\nthese parent pointers back, it gives you the optimal\nstrategy in what you should do.",
    "start": "3379460",
    "end": "3385855"
  },
  {
    "text": "First, you should take the 5 is\nwhat this is saying, because we just clipped off the 5. We used to start\nhere, and now we",
    "start": "3385855",
    "end": "3391750"
  },
  {
    "text": "start here in this subinterval. Then our opponents, to be\nannoying, will take the 25--",
    "start": "3391750",
    "end": "3399280"
  },
  {
    "text": "doesn't actually\nmatter, I think. Then we will take the\n100, and then they",
    "start": "3399280",
    "end": "3404710"
  },
  {
    "text": "take the 10, and it's game over. OK, all the numbers\nhere are how many points",
    "start": "3404710",
    "end": "3410340"
  },
  {
    "text": "we get-- doesn't say how many\npoints the opponent gets. Of course, you could\nadd that as well. It's just the total\nsum minus what we get.",
    "start": "3410340",
    "end": "3420060"
  },
  {
    "text": "Now, let me come back\nto high level here. What we're really doing\nis subproblem expansion,",
    "start": "3420060",
    "end": "3427289"
  },
  {
    "text": "and this is an idea that we\nwill expand on next lecture. ",
    "start": "3427290",
    "end": "3435790"
  },
  {
    "text": "And the idea is\nthat sometimes you start with the obvious\nsubproblems of prefixes, suffixes, or substrings.",
    "start": "3435790",
    "end": "3441310"
  },
  {
    "text": "Here, the obvious\nversion was substrings, because we were\nmoving from both ends. If you don't know, probably\nsuffixes or prefixes",
    "start": "3441310",
    "end": "3448295"
  },
  {
    "text": "are enough.  So we start there,\nbut sometimes that's still not enough subproblems.",
    "start": "3448295",
    "end": "3455710"
  },
  {
    "text": "Here, as soon as we made\na move, our problem almost turned upside-down,\nbecause now it's your turn, instead of my turn.",
    "start": "3455710",
    "end": "3461530"
  },
  {
    "text": "And that was just\nannoying to deal with, and so we could-- whenever you\nrun into a new type of problem,",
    "start": "3461530",
    "end": "3467260"
  },
  {
    "text": "just build more subproblems. As long as it stays\npolynomial number, we'll get polynomial time.",
    "start": "3467260",
    "end": "3473240"
  },
  {
    "text": "And so here we doubled\nthe number of subproblems to just the me case\nand the you case, and that made this recurrence\nreally easy to write.",
    "start": "3473240",
    "end": "3478990"
  },
  {
    "text": "In the notes, you'll see\na messier way to write it, if you don't do that. In the examples we'll\nsee next lecture, we're going to do a\nlot more expansion,",
    "start": "3478990",
    "end": "3486430"
  },
  {
    "text": "maybe multiplying the number\nof problems by n or n squared. And this will give us--",
    "start": "3486430",
    "end": "3492100"
  },
  {
    "text": "it will let us add more\nconstraints to our subproblems,",
    "start": "3492100",
    "end": "3497800"
  },
  {
    "text": "like we did in longest\nincreasing subsequence. We added this constraint that\nwe start with a particular item.",
    "start": "3497800",
    "end": "3505339"
  },
  {
    "text": "The more subproblems we have, we\ncan consider more constraints, because we'll just brute force\nall the possible constraints",
    "start": "3505340",
    "end": "3511329"
  },
  {
    "text": "that could apply. Well, we'll see more\nof that next time. That's it for today.",
    "start": "3511330",
    "end": "3516750"
  },
  {
    "start": "3516750",
    "end": "3523186"
  }
]