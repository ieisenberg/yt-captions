[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6950"
  },
  {
    "text": "offer high quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "6950",
    "end": "13500"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at ocw.mit.edu.",
    "start": "13500",
    "end": "18680"
  },
  {
    "text": " PROFESSOR: Let's get started.",
    "start": "18680",
    "end": "25450"
  },
  {
    "text": "So today, I'm going to talk\na little bit more about performance issues in\nparallelization.",
    "start": "25450",
    "end": "33200"
  },
  {
    "text": "A little bit more out\nof the [INAUDIBLE] to what people are\ndoing otherwise.",
    "start": "33200",
    "end": "39170"
  },
  {
    "text": "So normally what we have done so\nfar, is we looked at Cilk. It provides a very robust\nand environment for",
    "start": "39170",
    "end": "46100"
  },
  {
    "text": "parallelization. It hides many issues and\neliminates many of the problems out there if you find\nother areas of parallelization",
    "start": "46100",
    "end": "56120"
  },
  {
    "text": "that you deal with. And in last lectures, we looked\nat things like cache [UNINTELLIGIBLE]",
    "start": "56120",
    "end": "61140"
  },
  {
    "text": "algorithims, algorithmic\nissues, like looking at work and spend.",
    "start": "61140",
    "end": "66710"
  },
  {
    "text": "And in fact, in your projects,\nyou're going to use all these nice concepts to get you a nice\nparallel learning CorD.",
    "start": "66710",
    "end": "73660"
  },
  {
    "text": "But if you look at a lot of\nthese CorD [UNINTELLIGIBLE]",
    "start": "73660",
    "end": "80640"
  },
  {
    "text": "the very people normally for\nparallelized CorD outside probably Cilk.",
    "start": "80640",
    "end": "85800"
  },
  {
    "text": "And there are a lot of other\nissues that arise, things like synchronization issues\nand memory issues.",
    "start": "85800",
    "end": "93159"
  },
  {
    "text": "Today, I think we are going to\nfocus mostly on memory issues. And we are going to use open\nOpenMP instead of [INAUDIBLE].",
    "start": "93160",
    "end": "99450"
  },
  {
    "text": "And most of these issues\nwill be affected on Cilk sometimes, too. But Cilk tries to hide\nthem from you.",
    "start": "99450",
    "end": "105990"
  },
  {
    "text": "There's a layer of abstract. And it's hard to kind of get\nto those issues in there. So we are going to look at\nthis thing called OpenMP.",
    "start": "105990",
    "end": "113200"
  },
  {
    "text": "So today, we are going to\naddress things like granularity of parallelism.",
    "start": "113200",
    "end": "118820"
  },
  {
    "text": "There are so many things\nthat just went out on the page, I guess. True sharing, false sharing,\nload balancing issues, the",
    "start": "118820",
    "end": "125060"
  },
  {
    "text": "[UNINTELLIGIBLE]. So from the license and keep\ntalking about that we want to",
    "start": "125060",
    "end": "130569"
  },
  {
    "text": "be out of all this not dealing\nwith Voodoo parameter. Today, we actually are dealing\nmainly with Voodoo.",
    "start": "130570",
    "end": "136350"
  },
  {
    "text": "So I guess this should\nbe basically the Halloween lecture.",
    "start": "136350",
    "end": "141670"
  },
  {
    "text": "So we are all about Voodoo today\nand see how we can deal with Voodoo issues.",
    "start": "141670",
    "end": "147760"
  },
  {
    "text": "So if you look at a Cilk\nprogram, here is a nice simple matrix multiply, seem\nto be [INAUDIBLE]",
    "start": "147760",
    "end": "154740"
  },
  {
    "text": "example these days. What you can do is you can put\na Cilk formula in these two loops and get a nice parallel\nperformance.",
    "start": "154740",
    "end": "162069"
  },
  {
    "text": "However, [UNINTELLIGIBLE] from where how the memory\nis arranged is",
    "start": "162070",
    "end": "167269"
  },
  {
    "text": "up to the Cilk scheduler. Cilk scheduler is doing\nsome work stealing. Depending on how the work gets\ndistributed, the process will",
    "start": "167270",
    "end": "174420"
  },
  {
    "text": "get worked, it will happen. Hopefully, everything\nwill go nicely. And so what that means is it\nties the distribution and load",
    "start": "174420",
    "end": "182269"
  },
  {
    "text": "balancing issues. So it's nice if you have access\nto Cilk, but many other",
    "start": "182270",
    "end": "187640"
  },
  {
    "text": "[UNINTELLIGIBLE] you\nmight not be. And even within Cilk, some of\nthese issues might show up. So what we are going\nto do is step one",
    "start": "187640",
    "end": "195390"
  },
  {
    "text": "below the Cilk scheduler. So there's this system\ncalled OpenMP.",
    "start": "195390",
    "end": "202470"
  },
  {
    "text": "It's a more simplified\nmodel of parallelism. So what it tries to do is\ninstead of giving this very",
    "start": "202470",
    "end": "209665"
  },
  {
    "text": "[UNINTELLIGIBLE] system, it lets you basically\ndirect access to the processors.",
    "start": "209665",
    "end": "215109"
  },
  {
    "text": "So what that means is there's\nnormally what we call a fork-join model. [UNINTELLIGIBLE] we have with Cilk, basically.",
    "start": "215110",
    "end": "223580"
  },
  {
    "text": "We can do fork into different\nworkers and join. And more or less, you can\nactually bind these workers to",
    "start": "223580",
    "end": "229750"
  },
  {
    "text": "[UNINTELLIGIBLE] sometimes or make sure\nthat the number-- I'll give you some techniques\nhow to do that as I go on.",
    "start": "229750",
    "end": "236799"
  },
  {
    "text": "So for parallel loops, you can\ndo data parallelism, different [UNINTELLIGIBLE]",
    "start": "236800",
    "end": "242340"
  },
  {
    "text": "parallelism you can do something\nlike fork-join. And you can see a bunch\nof static or",
    "start": "242340",
    "end": "247620"
  },
  {
    "text": "dynamic scheduling policies. So for example in OpenMP, you\ncan see for this loop that add",
    "start": "247620",
    "end": "256790"
  },
  {
    "text": "a pragma to [UNINTELLIGIBLE] in front of this loop and\nsay this is OpenMP. Parallel loop in here.",
    "start": "256790",
    "end": "262449"
  },
  {
    "text": "Parallel full loop\nin this one. And schedule it using\nstatic chunk. I will tell you what\nexactly that means.",
    "start": "262450",
    "end": "269610"
  },
  {
    "text": "And that gives you direct access\nto how each of these",
    "start": "269610",
    "end": "274680"
  },
  {
    "text": "parts will be run. So let me get a little\nbit in detail. So assume you have\n[UNINTELLIGIBLE] courses in",
    "start": "274680",
    "end": "281730"
  },
  {
    "text": "there, [UNINTELLIGIBLE]\nprocessors. So now in OpenMP, you are\nbasically opening the entire world underneath.",
    "start": "281730",
    "end": "286990"
  },
  {
    "text": "And you have to kind of\nsee what's going on. And if you say, schedule a\nstatic chunk of four, assume",
    "start": "286990",
    "end": "295330"
  },
  {
    "text": "you have 16 iterations. Here are my 16 iterations. So each of these dots represent\na value for i.",
    "start": "295330",
    "end": "302990"
  },
  {
    "text": "So what it says is you take\nchunks of four and basically send it across it.",
    "start": "302990",
    "end": "308950"
  },
  {
    "text": "So what happens is the first\nfour iterations will go to [UNINTELLIGIBLE] or core zero. Next four will go to core one,\ncore two and core three.",
    "start": "308950",
    "end": "315650"
  },
  {
    "text": "So you know exactly which\niterations run where. It's a very static thing.",
    "start": "315650",
    "end": "320660"
  },
  {
    "text": "You have full control\nof what's going on. Whereas in Cilk, it's\nup to the scheduler.",
    "start": "320660",
    "end": "326980"
  },
  {
    "text": "So the nice thing here is you\ncan have full control. But you get enough room\nto harm yourself if you do things wrong.",
    "start": "326980",
    "end": "332259"
  },
  {
    "text": "So this is a double-edged\nsword in that sense. So instead of doing static\nfive you do static two.",
    "start": "332260",
    "end": "339990"
  },
  {
    "text": "You're assigning chunks\nof size two. What it will do is it will\nassign chunks of size two to",
    "start": "339990",
    "end": "346125"
  },
  {
    "text": "the four cores. And then you're not done yet. And then you start with again\ncore zero and assign",
    "start": "346125",
    "end": "352620"
  },
  {
    "text": "chunks of size two. This is called block\ncyclic schedule.",
    "start": "352620",
    "end": "357880"
  },
  {
    "text": "And if you do a chunk\nof size one, it's called a cyclic schedule. [UNINTELLIGIBLE] cycles just\nassigning iterations to cores.",
    "start": "357880",
    "end": "368190"
  },
  {
    "text": "OK. So far so good? OK.",
    "start": "368190",
    "end": "373780"
  },
  {
    "text": "So I want to do something. So I have this program.",
    "start": "373780",
    "end": "379740"
  },
  {
    "text": "This is again your run-of-the-mill matrix multiply. And I ran a sequential single\nmachine, and I got this",
    "start": "379740",
    "end": "390070"
  },
  {
    "text": "performance. Then, I said look, I want to\nparallelize the outer loop. So I parallelize this loop.",
    "start": "390070",
    "end": "397640"
  },
  {
    "text": "What should I get? [UNINTELLIGIBLE] fast or slow. I want to just check whether\nyou are awake or sleep.",
    "start": "397640",
    "end": "406970"
  },
  {
    "text": "How do [UNINTELLIGIBLE PHRASE] to run slower. ",
    "start": "406970",
    "end": "413030"
  },
  {
    "text": "It's not a trick question. This is just to make sure that\nactually participate. How do people think\nit's run faster?",
    "start": "413030",
    "end": "419229"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: OK. Good. What do others think?",
    "start": "419230",
    "end": "425234"
  },
  {
    "text": "OK. They're probably checking their\nemail or something. OK.",
    "start": "425234",
    "end": "430550"
  },
  {
    "text": "So actually it ran faster. The source not run on the\ncommon cloud machines.",
    "start": "430550",
    "end": "438910"
  },
  {
    "text": "This was a previous generation\nthat I ran. So [UNINTELLIGIBLE] was\nseven times faster. So this was great.",
    "start": "438910",
    "end": "444290"
  },
  {
    "text": "I parallized outer loop. What happens if I parallize\ninner loop? So this test, this i loop,\nruns parallel.",
    "start": "444290",
    "end": "451570"
  },
  {
    "text": "Here, I launch the\n[UNINTELLIGIBLE] parallel. How much people thinks\nthis runs faster?",
    "start": "451570",
    "end": "458138"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: Compared\nto this one. How many people thinks\nthis runs slower?",
    "start": "458138",
    "end": "465289"
  },
  {
    "text": "OK. There's some consistent\nanswers here.",
    "start": "465290",
    "end": "470530"
  },
  {
    "text": "Why do you think it\nwould run slower? ",
    "start": "470530",
    "end": "476130"
  },
  {
    "text": "So OK. It ran slower, so it\ncan improve that. And that's a little bit slow.",
    "start": "476130",
    "end": "482270"
  },
  {
    "text": "Why is it slow? AUDIENCE: [INAUDIBLE]",
    "start": "482270",
    "end": "488250"
  },
  {
    "text": "PROFESSOR: Exactly. So what it's doing here, it's\nbasically spawning many, many times in here. Because every time you have\nparallelism, you chunkify into",
    "start": "488250",
    "end": "497530"
  },
  {
    "text": "the processor. Here you are getting a lot more\nsmaller chunks inside. So let's look at how this\nis basically run.",
    "start": "497530",
    "end": "504700"
  },
  {
    "text": "So normally, you can think about\nan OpenMP program as you",
    "start": "504700",
    "end": "511075"
  },
  {
    "text": "have one sequential thread. You run the main program. And then assume you have, in\ncores, you might have n minus",
    "start": "511075",
    "end": "517760"
  },
  {
    "text": "1 other thread just\nwaiting for work. And then, when you finally\ncome to the parallel",
    "start": "517760",
    "end": "525269"
  },
  {
    "text": "loop, it says, OK. Set up. What do you want to run\non other basic cores.",
    "start": "525270",
    "end": "532079"
  },
  {
    "text": "And release it. Release these waiting people. And let them start working\non the parallel work. And also, I will start doing\non my own chunk.",
    "start": "532080",
    "end": "539650"
  },
  {
    "text": "So suddenly, when you say\nparallel four, it releases all other cores to go run that\npart of the core.",
    "start": "539650",
    "end": "547310"
  },
  {
    "text": "And once it's done, it's\nwill say, OK, I'm done. I have to wait until\neverybody is done.",
    "start": "547310",
    "end": "553140"
  },
  {
    "text": "So even if the main guy is done,\nit has to wait until everybody is finished.",
    "start": "553140",
    "end": "558200"
  },
  {
    "text": "And then, start executing the\nsequence [UNINTELLIGIBLE]. So this is the gist of how\nOpenMP program is run.",
    "start": "558200",
    "end": "567670"
  },
  {
    "text": "And if you realize that it all\nheads here because you have basically make sure all these\ncases are broken up.",
    "start": "567670",
    "end": "573150"
  },
  {
    "text": "So there's some things that\nhas to be issued. And there's a delay between\nthese guys can start if",
    "start": "573150",
    "end": "578589"
  },
  {
    "text": "everybody has equal work. Despite not finishing on time\nbecause it may take some time for this to start. And then, it has to also tell\nthis back OK, I am done.",
    "start": "578590",
    "end": "586490"
  },
  {
    "text": "So there's a lot of\nsynchronization going on. Locks and unlocks. Here it's called various\nsynchronization here. ",
    "start": "586490",
    "end": "594085"
  },
  {
    "text": "And so if this work is small,\nthis synchronization starts dominating.",
    "start": "594085",
    "end": "600070"
  },
  {
    "text": "So what happens is\n[UNINTELLIGIBLE] fine grain parallelism.",
    "start": "600070",
    "end": "605490"
  },
  {
    "text": "Do a little work in the\nparallel region, and synchronization will basically\nstart dominating your time.",
    "start": "605490",
    "end": "610880"
  },
  {
    "text": "So how do you take this? And sometimes when you run\nsomething parallel, it might even run slow because the\namount of stuff in the",
    "start": "610880",
    "end": "619150"
  },
  {
    "text": "parallel region is so small,\n[UNINTELLIGIBLE] will start dominating. And that's not a good way. And also, sometimes\nyou assume.",
    "start": "619150",
    "end": "626700"
  },
  {
    "text": "And you keep increasing\nthe number of cores. Hopefully, you want to see a\nnice parallelism increase, but",
    "start": "626700",
    "end": "632750"
  },
  {
    "text": "it doesn't, even though you\nhave enough information. But that means you're running\na lot of small chunks, even",
    "start": "632750",
    "end": "637880"
  },
  {
    "text": "though you seem to have a lot\nof parallelism available.  And also, you can make sure\nthe synchronization in the",
    "start": "637880",
    "end": "646160"
  },
  {
    "text": "time in the parallel region. If the parallel regions\nare on a very short time, this happens. We saw this effect when\nwe were doing Cilk.",
    "start": "646160",
    "end": "654779"
  },
  {
    "text": "Remember? When did we see this granularity\naffecting Cilk? And what did he do?",
    "start": "654780",
    "end": "660750"
  },
  {
    "text": " When you write Cilk programs. You write [UNINTELLIGIBLE] programs.",
    "start": "660750",
    "end": "666949"
  },
  {
    "text": "Where did the granularity\nstart showing up on us?",
    "start": "666950",
    "end": "672500"
  },
  {
    "text": "It may not be exactly this\nbecause the scheduling is complicated. OK. Yes? AUDIENCE: The two by two\nmatrix [INAUDIBLE]",
    "start": "672500",
    "end": "679280"
  },
  {
    "text": "PROFESSOR: Yeah. Something like two by-- for example, that's the reason\nwe wanted to have a large base case.",
    "start": "679280",
    "end": "684580"
  },
  {
    "text": "Because if you didn't put a\nlarge base case, it keeps dividing into smaller and\nsmaller problems.",
    "start": "684580",
    "end": "690110"
  },
  {
    "text": "And if the schedule is\nsmart, it won't be doing exactly this. But it's always good to have\nthese large granulated chunks",
    "start": "690110",
    "end": "697350"
  },
  {
    "text": "at the bottom.  So how to get [UNINTELLIGIBLE]",
    "start": "697350",
    "end": "703890"
  },
  {
    "text": "granulated parallelism. What we need to do is reduce the\nnumber of [UNINTELLIGIBLE] equations. So you want to always try to\nlook for the outer most loop",
    "start": "703890",
    "end": "711760"
  },
  {
    "text": "you can get at all the really\nlarge independent regions. So you go look, and not\n[UNINTELLIGIBLE]",
    "start": "711760",
    "end": "717040"
  },
  {
    "text": "thing you want to parallelize. You go up, up, up, up until the\npoint you can parallelize. And that's the best way to\nget good performance.",
    "start": "717040",
    "end": "725490"
  },
  {
    "text": "OK?  So if you really compare these\nthree programs here, again,",
    "start": "725490",
    "end": "733850"
  },
  {
    "text": "what you see-- of course, this has no\nsynchronization. This has n amount of\nsynchronizations.",
    "start": "733850",
    "end": "739399"
  },
  {
    "text": "Here in [UNINTELLIGIBLE]\nsynchronization, that's obviously a lot more\nsynchronization going on. And that is where this\n[UNINTELLIGIBLE] comes from.",
    "start": "739400",
    "end": "747190"
  },
  {
    "text": "OK. So now, I am switching\na little bit in here. I want you guys to look at this\nprogram a little bit.",
    "start": "747190",
    "end": "753450"
  },
  {
    "text": "So what am I doing here? I have two [UNINTELLIGIBLE]. And I am just basically adding\nmatrix B to matrix A. OK?",
    "start": "753450",
    "end": "765110"
  },
  {
    "text": "And then I have another loop\ntest here, adding matrix C to matrix A. And what am\nI doing in here?",
    "start": "765110",
    "end": "772120"
  },
  {
    "text": "I am basically going through\nmatrix A in another direction in here.",
    "start": "772120",
    "end": "779020"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]  PROFESSOR: It's not really\na transpose. I'm not transposing.",
    "start": "779020",
    "end": "784590"
  },
  {
    "text": "What I'm doing is I'm actually\ndoing a mirror because the C gets mirrored on ix.",
    "start": "784590",
    "end": "790210"
  },
  {
    "text": "It's because [UNINTELLIGIBLE] ix [UNINTELLIGIBLE] the other direction. OK? So it's not really\na transpose. So I do a mirror addition.",
    "start": "790210",
    "end": "796960"
  },
  {
    "text": "And then I'm asking\nfor the two outer most loops to be parallel.",
    "start": "796960",
    "end": "802130"
  },
  {
    "text": "So if you run this\nsequential-- OK, you get about 30\nmilliseconds, I",
    "start": "802130",
    "end": "809870"
  },
  {
    "text": "guess, to run in here. So that is in [UNINTELLIGIBLE]. But if you're running parallel,\nwhat do you get?",
    "start": "809870",
    "end": "815580"
  },
  {
    "text": "Should you get faster\nor slower? ",
    "start": "815580",
    "end": "820960"
  },
  {
    "text": "OK. Anyone want to take a guess\n[UNINTELLIGIBLE] Sometimes some of these\nquestions, you might not have",
    "start": "820960",
    "end": "826995"
  },
  {
    "text": "enough information to answer. But it's still good to just take\na stand on one direction or another. How many people think\nit runs faster?",
    "start": "826995",
    "end": "834120"
  },
  {
    "text": "How many people think\nit runs slower? OK. Some.",
    "start": "834120",
    "end": "839550"
  },
  {
    "text": "Oops. What happened? ",
    "start": "839550",
    "end": "847310"
  },
  {
    "text": "What happened in here? ",
    "start": "847310",
    "end": "859750"
  },
  {
    "text": "Can anybody point out why it\nmight be running slower",
    "start": "859750",
    "end": "865150"
  },
  {
    "text": "parallely than running\nsequentially? ",
    "start": "865150",
    "end": "871275"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: Yeah. There's a cache issue. Watch the possible cache\nissue in here.",
    "start": "871275",
    "end": "878611"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: Yeah. ",
    "start": "878611",
    "end": "884610"
  },
  {
    "text": "If you think about, the first\nequations of, I guess, the",
    "start": "884610",
    "end": "890610"
  },
  {
    "text": "first core-- I have some diagram. I'll show it to you in there. And here, only the last data\nelements we'll get for the",
    "start": "890610",
    "end": "896850"
  },
  {
    "text": "first iterations because\nwe are going in the other direction. So if you look at it a little\nmore deeply into",
    "start": "896850",
    "end": "903500"
  },
  {
    "text": "what's going on. Number of instructions seem\nto be a little higher.",
    "start": "903500",
    "end": "908709"
  },
  {
    "text": "This one I couldn't actually\nexplain why this might be the case in here. If anybody has an idea,\nyou can say that.",
    "start": "908710",
    "end": "915530"
  },
  {
    "text": "But this was kind of\n[UNINTELLIGIBLE]. This might be [UNINTELLIGIBLE]\nthe cycles.",
    "start": "915530",
    "end": "921500"
  },
  {
    "text": "Huh. ",
    "start": "921500",
    "end": "927830"
  },
  {
    "text": "OK. I can explain this. Because this is a sequential\nrun, this is a sum total of a",
    "start": "927830",
    "end": "934730"
  },
  {
    "text": "parallel run. So because of all the overhead\nthat happens because this was",
    "start": "934730",
    "end": "940560"
  },
  {
    "text": "running on, I think, an\neight core machine. So you're running eight times\nof small companies.",
    "start": "940560",
    "end": "945630"
  },
  {
    "text": "There's a lot of overhead that\ngoes around, synchronization, and stuff like that. So a number of instructions\njust blows up.",
    "start": "945630",
    "end": "952050"
  },
  {
    "text": "But for each core, you don't\nhave this blow up. AUDIENCE: [INAUDIBLE]",
    "start": "952050",
    "end": "957248"
  },
  {
    "text": " Cilk? Because does Cilk have different\nprocessor affinity,",
    "start": "957248",
    "end": "963468"
  },
  {
    "text": "things that open\n[UNINTELLIGIBLE]? Because it seems like if the\nprogram, the language--",
    "start": "963468",
    "end": "971960"
  },
  {
    "text": "PROFESSOR: [INAUDIBLE]. Let's see if we can process\nthe affinity information or if not.",
    "start": "971960",
    "end": "978670"
  },
  {
    "text": "It's just pure [UNINTELLIGIBLE]. AUDIENCE: [INAUDIBLE]",
    "start": "978670",
    "end": "983780"
  },
  {
    "text": "PROFESSOR: Yeah. I mean if you like executed\nlocally if you have good cache [UNINTELLIGIBLE]",
    "start": "983780",
    "end": "988899"
  },
  {
    "text": "with them. But if there's no cache\n[UNINTELLIGIBLE] you might steal something\nwhere data might be somewhere else. AUDIENCE: But you'll still\nmimic the cache behavior,",
    "start": "988900",
    "end": "997296"
  },
  {
    "text": "considerably, except\nfor when you steal. [INAUDIBLE]",
    "start": "997296",
    "end": "1004601"
  },
  {
    "text": "PROFESSOR: Yeah. So OK. We don't have a mic in here. OK.",
    "start": "1004601",
    "end": "1009640"
  },
  {
    "text": "There's a mic. There we go.  But if you have two different of\nthese regions, the way the",
    "start": "1009640",
    "end": "1017110"
  },
  {
    "text": "parallelization happens\ncan be different. AUDIENCE: In Cilk, what\nhappens is the code is",
    "start": "1017110",
    "end": "1026439"
  },
  {
    "text": "mimicking, for the most part,\nexactly what the C or C++ code would be doing.",
    "start": "1026440",
    "end": "1031929"
  },
  {
    "text": "And so you get exactly the same\ncache hits and misses. Except when you steal, it's\nlike starting over with an",
    "start": "1031930",
    "end": "1039689"
  },
  {
    "text": "empty cache. OK? But as long as you have\nsufficient parallelism, the steals don't occur very often.",
    "start": "1039690",
    "end": "1049080"
  },
  {
    "text": "And so therefore, you end up\ngetting the same kind of behavior that you would get\nout of the serial code. PROFESSOR: Yeah.",
    "start": "1049080",
    "end": "1054120"
  },
  {
    "text": "But Charles, in this one,\nbecause you had to steal everything here, the between\nhere and here, the parallelism",
    "start": "1054120",
    "end": "1061240"
  },
  {
    "text": "would be different. AUDIENCE: There would be no\naffinity between those two. PROFESSOR: No [? affinity ?]\nwill be there. Yeah, exactly. So in the sequential one,\neverything that fits in the",
    "start": "1061240",
    "end": "1068180"
  },
  {
    "text": "cache, so that would be affinity\nbecause we are not doing parallelism. And that's what I think\nhappened here.",
    "start": "1068180",
    "end": "1073510"
  },
  {
    "text": "Because you had no\n[? affinity-- ?] AUDIENCE: No in a serial code,\nthere's no [? affinity. ?] PROFESSOR: No. Serial code-- if this fits in\nthe cache, it's then running",
    "start": "1073510",
    "end": "1080919"
  },
  {
    "text": "on one core. So if it fits in the one core's\ncache, you're happy.",
    "start": "1080920",
    "end": "1087900"
  },
  {
    "text": "AUDIENCE: So the issue is--\nright-- is if you only access it once, by the time you\nfill up the cache--",
    "start": "1087900",
    "end": "1094860"
  },
  {
    "text": "It takes some time to fill\nup the cache to get them synchronized. PROFESSOR: So it fits in the\none core's cache, it's OK. Otherwise, it has no\naffinity in here.",
    "start": "1094860",
    "end": "1101210"
  },
  {
    "text": "So the key difference in here\nis, of course, CPI is slow.",
    "start": "1101210",
    "end": "1106289"
  },
  {
    "text": "We don't know exactly why. But in [UNINTELLIGIBLE]. So what you find is that there's\na huge amount of cache",
    "start": "1106290",
    "end": "1111480"
  },
  {
    "text": "in [UNINTELLIGIBLE] going on. So that should give you a\nfeeling of what's going on. So let's look at what\nmight happen.",
    "start": "1111480",
    "end": "1117370"
  },
  {
    "text": "So I'm showing this matches\n[UNINTELLIGIBLE] last year on-- what we had were\nCagnode machines that",
    "start": "1117370",
    "end": "1126950"
  },
  {
    "text": "were basically code\nto quad processor. So we had eight codes in here. And I put them-- you\ndon't have to now",
    "start": "1126950",
    "end": "1132956"
  },
  {
    "text": "look at this table. I put them in the slides so\nyou can look at it later. And so this is the last\nyear's machine.",
    "start": "1132956",
    "end": "1138919"
  },
  {
    "text": "And of course, this year's\nmachine is different. We have two six core\nprocessors in here.",
    "start": "1138920",
    "end": "1144610"
  },
  {
    "text": "So this is what we\n[UNINTELLIGIBLE] this year. [UNINTELLIGIBLE] OK.",
    "start": "1144610",
    "end": "1150390"
  },
  {
    "text": "And so right now, I'm showing\nnumbers for this one. And later, I will show\nwhat happened in the",
    "start": "1150390",
    "end": "1155830"
  },
  {
    "text": "[UNINTELLIGIBLE]. So if you look at a cache-- so what happened is each of the\ndata items in the cache",
    "start": "1155830",
    "end": "1165390"
  },
  {
    "text": "can be in multiple states. This is called MSI\nprotocol here. What that means is the item\nmight be modified.",
    "start": "1165390",
    "end": "1173120"
  },
  {
    "text": "If it is modified, it can\nbe only in one cache. If anybody else wants to touch\nit, it has to get it out of",
    "start": "1173120",
    "end": "1180220"
  },
  {
    "text": "the modified state. Or it can be sharing. Sharing means it's reading.",
    "start": "1180220",
    "end": "1186190"
  },
  {
    "text": "So that means that item is\nread by multiple people. And that can have\nmultiple covers. So sharing items can be\nin multiple places.",
    "start": "1186190",
    "end": "1193375"
  },
  {
    "text": " However if you're modifying,\n[UNINTELLIGIBLE]",
    "start": "1193375",
    "end": "1199220"
  },
  {
    "text": "items in everybody else. So that means if I modify\nsomething, it can only be in mine.",
    "start": "1199220",
    "end": "1204230"
  },
  {
    "text": "If other people had that\ndata, I had to go in and validate this. So if you modify this, I had\nto go in and validate it.",
    "start": "1204230",
    "end": "1209470"
  },
  {
    "text": "So that's a sharing state. That means I'm [UNINTELLIGIBLE]\neverybody [UNINTELLIGIBLE] read this. But if I ever want to change\nthat, I have to go in and",
    "start": "1209470",
    "end": "1216290"
  },
  {
    "text": "validate this one. So what that means is when I\nstart writing, I am validating it from everybody.",
    "start": "1216290",
    "end": "1221750"
  },
  {
    "text": "So even if everybody kept a copy\nand they start modifying, I had to get my own copy.",
    "start": "1221750",
    "end": "1228540"
  },
  {
    "text": "And everybody else\nwill invalidate. And then, if somebody else\nwanted to read-- for example, if this\nguy wants to read--",
    "start": "1228540",
    "end": "1234410"
  },
  {
    "text": "basically, this has\nto make this a sharing and back to sharing. That means I have to get the\nvalue 13, propogate it, and",
    "start": "1234410",
    "end": "1240080"
  },
  {
    "text": "this becomes sharing again. OK. Did you get that? What's going on in here?",
    "start": "1240080",
    "end": "1245770"
  },
  {
    "text": "In the cache? So reads, everybody can keep\na copy if they want.",
    "start": "1245770",
    "end": "1251050"
  },
  {
    "text": "Write-- only one guy\ncan keep a copy. So what happens then\nis true sharing. So you have these two\ndifferent cores.",
    "start": "1251050",
    "end": "1258280"
  },
  {
    "text": "So I want to read something. So I get it from outside\nprobably on main memory, and I put it in my cache in here.",
    "start": "1258280",
    "end": "1264820"
  },
  {
    "text": "And then, the next guy wants\nto write the same thing. Assume I'm writing that.",
    "start": "1264820",
    "end": "1271200"
  },
  {
    "text": "And once I want to write that,\nI can keep this copy I had invalidated from here\nand get a copy here.",
    "start": "1271200",
    "end": "1276920"
  },
  {
    "text": "And then, if this way, I want\nto write it again, I have to basically invalidate it from\nhere and get a copy. If I'm reading, both of us can\nkeep a copy and just kind of",
    "start": "1276920",
    "end": "1283400"
  },
  {
    "text": "keep bouncing back and forth,\nback and forth. And so if you bounce too many\ntimes, you get all of these",
    "start": "1283400",
    "end": "1290350"
  },
  {
    "text": "invalidations. So the fact I looked at that I\nhave invalidations basically tells me something like\nthis is going on.",
    "start": "1290350",
    "end": "1297770"
  },
  {
    "text": "So what's happening\nin this program?  When I parallelize this four\nloop, my four cores--",
    "start": "1297770",
    "end": "1306419"
  },
  {
    "text": "basically since I am doing\nhere [UNINTELLIGIBLE]-- are going to get this\nnice distribution of",
    "start": "1306420",
    "end": "1311710"
  },
  {
    "text": "data into the caches. Assume it fits in cache. OK. So all this data nicely fits\ninto cache, and now I'm pretty",
    "start": "1311710",
    "end": "1319050"
  },
  {
    "text": "happy when I run this one\nbecause I got this data into the cache. And I write it. But the minute I go in here,\nbasically this data has to",
    "start": "1319050",
    "end": "1327860"
  },
  {
    "text": "[UNINTELLIGIBLE].  OK, because I am going this is n\nminus i in here so this data",
    "start": "1327860",
    "end": "1334690"
  },
  {
    "text": "has a flip route. And by doing this, basically,\nI incur this huge amount of [UNINTELLIGIBLE], and\nit slows down.",
    "start": "1334690",
    "end": "1342090"
  },
  {
    "text": "OK? So that's why it didn't\nwork well. So what can you do?",
    "start": "1342090",
    "end": "1348990"
  },
  {
    "text": " When you have these read,\nwrite and write, write",
    "start": "1348990",
    "end": "1358230"
  },
  {
    "text": "conflicts in here. And you have to actually move\nthe data across in here.",
    "start": "1358230",
    "end": "1364420"
  },
  {
    "text": "And what you can do is look\nfor this true sharing. You can look at the\n[UNINTELLIGIBLE]",
    "start": "1364420",
    "end": "1369549"
  },
  {
    "text": "and see if we have excessive [UNINTELLIGIBLE], we have a problem. And how do we eliminate that?",
    "start": "1369550",
    "end": "1374990"
  },
  {
    "text": "You want to make the\nsharing minimal.  If you want to get some data\ninto a cache, you want to try",
    "start": "1374990",
    "end": "1381984"
  },
  {
    "text": "to keep it there as\nmuch as possible. And if you're using, you'd\nwant to try to align everything across.",
    "start": "1381984",
    "end": "1388080"
  },
  {
    "text": "So even across different\nregions, it'll use the same kind of things. And/or enforce some kind of\n[UNINTELLIGIBLE] technique to",
    "start": "1388080",
    "end": "1395120"
  },
  {
    "text": "keep the data alive. So there are a lot of techniques\nin there, but true sharing can be an interesting\nproblem. So in here, simple\nchange, yes.",
    "start": "1395120",
    "end": "1403090"
  },
  {
    "text": "You're, basically, instead of\nchanging A, you change C. So",
    "start": "1403090",
    "end": "1408380"
  },
  {
    "text": "you write A the same way. But now what I have done is\nI am doing the mirror by",
    "start": "1408380",
    "end": "1413580"
  },
  {
    "text": "changing the axis to C, is to\n[UNINTELLIGIBLE] is the same as this axis.",
    "start": "1413580",
    "end": "1418590"
  },
  {
    "text": "So these two are\nthe same thing. And the minute I\ndo that, voila! I get good speed up.",
    "start": "1418590",
    "end": "1424210"
  },
  {
    "text": "Because if you look at that, my\ninundations has gone down. My L1 cache [UNINTELLIGIBLE]\nhas now really, really gone down.",
    "start": "1424210",
    "end": "1429610"
  },
  {
    "text": "I'm not doing anything. And of course, I am doing more\ninstructions here than this",
    "start": "1429610",
    "end": "1434820"
  },
  {
    "text": "one because-- I think, the difference between\ninstruction here and",
    "start": "1434820",
    "end": "1440070"
  },
  {
    "text": "here is because a lot of times\nsynchronization operations are dynamic because in the\n[UNINTELLIGIBLE]",
    "start": "1440070",
    "end": "1445530"
  },
  {
    "text": "miscounted as the instructions,\nyou are busy waiting in there. So this number is not really\na constant number.",
    "start": "1445530",
    "end": "1453350"
  },
  {
    "text": "OK, question. AUDIENCE: Not a question. So another thing one could do\nhere is do loop fusion.",
    "start": "1453350",
    "end": "1459019"
  },
  {
    "text": "PROFESSOR: Yes. Yes. Here is a nice way of putting\nboth of the loops into one and",
    "start": "1459020",
    "end": "1464100"
  },
  {
    "text": "do loop fusion. And that works. In this case, you can do that. AUDIENCE: So loop fusion is\nwhere you take two loops, and",
    "start": "1464100",
    "end": "1471360"
  },
  {
    "text": "you convert it into one loop. So in this case, you could have\njust written one nest,",
    "start": "1471360",
    "end": "1477050"
  },
  {
    "text": "which has two things\ngoing on inside.  And then you would save all\nthe loop overhead and the",
    "start": "1477050",
    "end": "1484580"
  },
  {
    "text": "scheduling overhead. So rather than doing it twice,\nyou actually have reduced the overhead to just the parallelism\nof the one loop.",
    "start": "1484580",
    "end": "1492890"
  },
  {
    "text": "So if you look at that, you'll\nrealize that you could somehow make it just be a single nest\nwith two statements in there,",
    "start": "1492890",
    "end": "1499670"
  },
  {
    "text": "rather than one. PROFESSOR: So basically, instead\nof [UNINTELLIGIBLE] entire thing and move plus\nC into here, basically.",
    "start": "1499670",
    "end": "1508190"
  },
  {
    "text": "And I could have just done\nit in one loop nest. That's what loop fusion\nwould do here. So we can actually\n[UNINTELLIGIBLE]",
    "start": "1508190",
    "end": "1513750"
  },
  {
    "text": "much nicer in here. But just for example purposes,\nso now I really reduced this",
    "start": "1513750",
    "end": "1519190"
  },
  {
    "text": "one and got that. So this is great. Cagnodes really showed\nthis classic problem in the computer.",
    "start": "1519190",
    "end": "1525820"
  },
  {
    "text": "And so I'm like, OK. Now we have new machines. Let's try it and see\nwhat happens. ",
    "start": "1525820",
    "end": "1534090"
  },
  {
    "text": "What does this show? This is your nice cloud machines\nwe've got now.",
    "start": "1534090",
    "end": "1541240"
  },
  {
    "text": "I have no slow down. I was really disappointed\nbecause beforehand, I had this",
    "start": "1541240",
    "end": "1547570"
  },
  {
    "text": "for sharing going on\nin here and had a really big slow down. But this one, in fact, the\ndifference is very small.",
    "start": "1547570",
    "end": "1554070"
  },
  {
    "text": "And when you look at any kind of\nperformance counters, they are pretty comparable. There's nothing much\ngoing on here.",
    "start": "1554070",
    "end": "1560220"
  },
  {
    "text": "So what do you think is\ngoing on in this new architecture now?",
    "start": "1560220",
    "end": "1566130"
  },
  {
    "text": "Why this might be? ",
    "start": "1566130",
    "end": "1575730"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ",
    "start": "1575730",
    "end": "1586030"
  },
  {
    "text": "PROFESSOR: That's an interesting\nobservation, but also we have--",
    "start": "1586030",
    "end": "1592050"
  },
  {
    "text": "yes, core seven basically is\ntwo by two in the die. But we also have two different\nprocessors.",
    "start": "1592050",
    "end": "1598650"
  },
  {
    "text": "So that's there, too. So in some sense, when you\nget our two-way process [UNINTELLIGIBLE]",
    "start": "1598650",
    "end": "1604670"
  },
  {
    "text": "So that's there. That might help. That's an interesting\nobservation. What else might be\ngoing on here?",
    "start": "1604670",
    "end": "1610340"
  },
  {
    "text": "Why do you think they manage\nto get this one? What might be another answer? ",
    "start": "1610340",
    "end": "1618789"
  },
  {
    "text": "What can hide these kind of\ndelays that can happen? Load delays, and cache misses,\nand stuff like that.",
    "start": "1618790",
    "end": "1626990"
  },
  {
    "text": "What techniques and hardware\ncan hide those? ",
    "start": "1626990",
    "end": "1635299"
  },
  {
    "text": "Just [UNINTELLIGIBLE]\na speculation. Prefetching. So most hardware has an\ninternal mechanism.",
    "start": "1635300",
    "end": "1642290"
  },
  {
    "text": "When you start fetching\ndata, you say, aha! I see a pattern. I know you want to\nget this thing.",
    "start": "1642290",
    "end": "1647650"
  },
  {
    "text": "Let me go forward and bring more\ndata, thinking you are going to follow that pattern.",
    "start": "1647650",
    "end": "1654240"
  },
  {
    "text": "OK. All or most of the\n[UNINTELLIGIBLE] for, I think, have\n[UNINTELLIGIBLE] even a Pentium had something for\nprefetching going on.",
    "start": "1654240",
    "end": "1662280"
  },
  {
    "text": "But most of the time, what\nhappens is the prefetching engine can't keep up. If you are getting there,\nit's [UNINTELLIGIBLE]",
    "start": "1662280",
    "end": "1667929"
  },
  {
    "text": "a little bit further. You are going to catch up, and\nyou're going to start because you have more [UNINTELLIGIBLE]\nhere.",
    "start": "1667930",
    "end": "1673026"
  },
  {
    "text": "I think [UNINTELLIGIBLE] has a really, really\ngood prefetcher. And then, we saw it in our\narchitecture slides, too.",
    "start": "1673026",
    "end": "1682170"
  },
  {
    "text": "That a lot of things that used\nto happen before is gone. So this is really good. What that means is a lot of\nweird stuff that's going on",
    "start": "1682170",
    "end": "1691330"
  },
  {
    "text": "[UNINTELLIGIBLE] making them disappear. So these kind of problems\ndon't show up. So that's the nice story.",
    "start": "1691330",
    "end": "1697260"
  },
  {
    "text": "The other part is, OK. Now if you start really tweaking\nyour programs to one",
    "start": "1697260",
    "end": "1702630"
  },
  {
    "text": "architecture, you wait\na generation. And then now, we have done\neither the tweaking--",
    "start": "1702630",
    "end": "1708300"
  },
  {
    "text": "the best case, tweaking has\nno impact, and it's",
    "start": "1708300",
    "end": "1713910"
  },
  {
    "text": "not affecting anything. In most of the time, worst case,\ntweaking actually slows down the program because you\nare trying to do something",
    "start": "1713910",
    "end": "1719160"
  },
  {
    "text": "complicated. That's just not needed\nanymore. So even though these kind\nof things showed up in",
    "start": "1719160",
    "end": "1726990"
  },
  {
    "text": "[UNINTELLIGIBLE] architecture, it's\nnot an issue. But if you go to many of the\nsmaller architectures that",
    "start": "1726990",
    "end": "1732250"
  },
  {
    "text": "have that don't have that\nmuch of the very popular prefetchers, this kind of\nissue you would see.",
    "start": "1732250",
    "end": "1737620"
  },
  {
    "text": "So for example, if you go to a\ncell phone [UNINTELLIGIBLE], you would probably see these\nkind of issues happening.",
    "start": "1737620",
    "end": "1743770"
  },
  {
    "text": "Any questions here so far? So that's the good news. You guys don't have to worry\nabout it too much. But at least it's good to know\nthe technique because you'll",
    "start": "1743770",
    "end": "1751440"
  },
  {
    "text": "see it in other architectures. So now, I want to switch a\nlittle bit into looking at",
    "start": "1751440",
    "end": "1758110"
  },
  {
    "text": "programs that don't have what\nwe call data parallelism. That means you can start and\nsay, [UNINTELLIGIBLE]",
    "start": "1758110",
    "end": "1764320"
  },
  {
    "text": "parallels. Everybody get the different\nchunk and run. And we are going a little bit\nmore deeply into looking at",
    "start": "1764320",
    "end": "1770110"
  },
  {
    "text": "programs that are a little\nbit different. So I wanted to come up with this\nlittle representation to",
    "start": "1770110",
    "end": "1776540"
  },
  {
    "text": "represent the program. And so if you think about\niteration space--",
    "start": "1776540",
    "end": "1782090"
  },
  {
    "text": "actually before you, I'll\ngo down to dependence. I'll also do a little\nbit of load balance. So here's a loop that\nin my iterations--",
    "start": "1782090",
    "end": "1789889"
  },
  {
    "text": "the first one I transformed\nzero to eight. But J only runs from\none to eight.",
    "start": "1789890",
    "end": "1795669"
  },
  {
    "text": "So each I, I have less\nand less amount of J iterations, basically.",
    "start": "1795670",
    "end": "1802160"
  },
  {
    "text": "OK? It's a triangular loop. OK? ",
    "start": "1802160",
    "end": "1810049"
  },
  {
    "text": "OK. So this is the way to represent\niteration space, so I will represent data and\nget back to this again.",
    "start": "1810050",
    "end": "1815600"
  },
  {
    "text": "So if you look at a data space,\nyou can assume data iteration space could be this\nfunky, triangular, hyperplane",
    "start": "1815600",
    "end": "1823740"
  },
  {
    "text": "type of thing. Whereas data is mostly\n[? rectangulineum ?],",
    "start": "1823740",
    "end": "1828990"
  },
  {
    "text": "multi-dimensional rectangle. So for example, if I have\n[UNINTELLIGIBLE] and it's a one-dimensional\none, this is basically a",
    "start": "1828990",
    "end": "1835140"
  },
  {
    "text": "two-dimensional data. And you can have\nthree-dimensional cubes and stuff like that. You can represent\ndata like that. So this is a way to\nnicely represent.",
    "start": "1835140",
    "end": "1841170"
  },
  {
    "text": "And when you start thinking\nabout it, we can look at what's going on. OK?",
    "start": "1841170",
    "end": "1846780"
  },
  {
    "text": "So now you have this\nloop again. So here's the basic\n[UNINTELLIGIBLE] iterations.",
    "start": "1846780",
    "end": "1852820"
  },
  {
    "text": "And here's the data. Assume this is both A and B.\nThere will be another one for matrix [UNINTELLIGIBLE] B. One data into each iteration\nis going to touch.",
    "start": "1852820",
    "end": "1859870"
  },
  {
    "text": "So these are the data that\nneed to get touched, and here's the iterations you\nare going to run. So we can say OpenMP\nparallel four.",
    "start": "1859870",
    "end": "1869720"
  },
  {
    "text": "So what happens when you\ndo parallel four? So I am going to get parallel. And so core one gets this one,\nanother core, another core,",
    "start": "1869720",
    "end": "1877930"
  },
  {
    "text": "another core get these\niterations running. So what happens if\nyou do this one? ",
    "start": "1877930",
    "end": "1886519"
  },
  {
    "text": "Do you get really good\nperformance? Why?",
    "start": "1886520",
    "end": "1891851"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: It's not balanced. The load is not balanced\nin here.",
    "start": "1891852",
    "end": "1896899"
  },
  {
    "text": "So basically if you run\nsequential and if you run block distribution, I get about\n3x performance in here.",
    "start": "1896900",
    "end": "1905990"
  },
  {
    "text": "So if I look at closely, here\nis the number of iterations given to each core.",
    "start": "1905990",
    "end": "1911340"
  },
  {
    "text": "The first core gets almost\nnothing, and the last guy gets a lot of work. Here's where something like the\nCilk runtime can come into",
    "start": "1911340",
    "end": "1918510"
  },
  {
    "text": "play because with Cilk runtime,\nbasically, this guy will finish the [UNINTELLIGIBLE] start stealing from\nsomebody else.",
    "start": "1918510",
    "end": "1924620"
  },
  {
    "text": "And so it would be\ndone nicely. But whereas if you do a\nstatic schedule, you",
    "start": "1924620",
    "end": "1929860"
  },
  {
    "text": "are in this big bind. You don't have too many\nthings going on. ",
    "start": "1929860",
    "end": "1937990"
  },
  {
    "text": "And basically, this is what\nwe call load imbalance. So what you can do is figure out\na complicated partitioning",
    "start": "1937990",
    "end": "1944760"
  },
  {
    "text": "so you can statically\npartition this out. Or you can do something like the\ndynamic scheduler like the",
    "start": "1944760",
    "end": "1951810"
  },
  {
    "text": "[UNINTELLIGIBLE] scheduler for a solution. So how to detect\nload imbalance?",
    "start": "1951810",
    "end": "1956970"
  },
  {
    "text": " Basically, what you might want\nto do is for each of the",
    "start": "1956970",
    "end": "1964120"
  },
  {
    "text": "different sections you are\nrunning, you want to look at the time mistakes. And in the [UNINTELLIGIBLE] axis\nvarying, huge varying,",
    "start": "1964120",
    "end": "1970530"
  },
  {
    "text": "that means there's a load\nimbalance going on. So you might want to check and\nmake sure each of the parallel regions time is taking.",
    "start": "1970530",
    "end": "1978330"
  },
  {
    "text": "And that gives you this view. How to eliminate load imbalance\nor the use of",
    "start": "1978330",
    "end": "1984620"
  },
  {
    "text": "dynamic scheduler that\nwill deal with that. Or you can do a different\ndistribution statically.",
    "start": "1984620",
    "end": "1992220"
  },
  {
    "text": "That will not partition\nin this large block. So let me show you a static part\nbecause we have already learned the dynamic\npart before.",
    "start": "1992220",
    "end": "1998440"
  },
  {
    "text": "So now instead of doing that,\nwe do a cyclic distribution. We use a static one. That means if you have a lot\nmore than and a little bit",
    "start": "1998440",
    "end": "2007690"
  },
  {
    "text": "better distribution so what\nhappens to the processor? Zero gets this one\nand this one.",
    "start": "2007690",
    "end": "2013809"
  },
  {
    "text": "One gets this one\nand this one. So on and so forth. So that would be a little bit\nbetween balancing there.",
    "start": "2013810",
    "end": "2019380"
  },
  {
    "text": "But if you have enough of\ncyclic, the imbalance would be much lower.",
    "start": "2019380",
    "end": "2025549"
  },
  {
    "text": "So should we run faster? ",
    "start": "2025550",
    "end": "2031070"
  },
  {
    "text": "So here's the iterations\neach guy gets in here.",
    "start": "2031070",
    "end": "2036470"
  },
  {
    "text": "This looks very balanced because\nI had a lot more iterations than this\neight one.",
    "start": "2036470",
    "end": "2041809"
  },
  {
    "text": "This is not that balanced here\nbecause this guy gets a lot more than the first one. The first one gets six.",
    "start": "2041810",
    "end": "2046820"
  },
  {
    "text": "And the second and last\none gets a lot more. ",
    "start": "2046820",
    "end": "2053774"
  },
  {
    "text": "Uh oh. What do you think is\nhappening here now? ",
    "start": "2053775",
    "end": "2062040"
  },
  {
    "text": "I ran again slower.  See I guess the people in class\nlast year had things",
    "start": "2062040",
    "end": "2068429"
  },
  {
    "text": "worse because they had this\nold processor that did all these crazy things on them. and you guys get the fast one\nthat doesn't do that.",
    "start": "2068429",
    "end": "2075830"
  },
  {
    "text": "So why do you think cyclic\ndistribution is",
    "start": "2075830",
    "end": "2081310"
  },
  {
    "text": "running a lot slower? What might be going? AUDIENCE: [INAUDIBLE] ",
    "start": "2081310",
    "end": "2087419"
  },
  {
    "text": "PROFESSOR: Spoiling\n[UNINTELLIGIBLE] it's not that much because if you don't run\nthis and synchronize, what you do is you run the same amount of\ntread and say, now, instead",
    "start": "2087420",
    "end": "2094929"
  },
  {
    "text": "of running continuously, you\nrun jumping all iterations. You should run zero and nine\nor whatever jump over",
    "start": "2094929",
    "end": "2101810"
  },
  {
    "text": "iterations. ",
    "start": "2101810",
    "end": "2112500"
  },
  {
    "text": "Why do you think? AUDIENCE: [INAUDIBLE] PROFESSOR: Yeah, there's\na cache issue. All this time and the question\nis not sure, it's probably a",
    "start": "2112500",
    "end": "2119980"
  },
  {
    "text": "cache issue. What type of cache issue do\nyou think is going on? AUDIENCE: [INAUDIBLE] ",
    "start": "2119980",
    "end": "2128920"
  },
  {
    "text": "PROFESSOR: Yeah. [UNINTELLIGIBLE]. But let me show you\nwhat happens.",
    "start": "2128920",
    "end": "2134280"
  },
  {
    "text": "So you get off then. OK, so if you look at-- the data is here so let's\nlook at what happens.",
    "start": "2134280",
    "end": "2140150"
  },
  {
    "text": "So this is running a\n[UNINTELLIGIBLE] lower. It's showing a lot more\ninstructions, but instruction",
    "start": "2140150",
    "end": "2145460"
  },
  {
    "text": "doesn't tell you too much\nbecause a lot of them might be missing synchronization\ncosts in here. So instruction is not that\nilluminating here.",
    "start": "2145460",
    "end": "2152690"
  },
  {
    "text": "The big illumination here\nis this one again. Invalidations. I have a huge amount of\ninvalidations going on.",
    "start": "2152690",
    "end": "2159300"
  },
  {
    "text": "So here is a case of\nfalse sharing.",
    "start": "2159300",
    "end": "2164330"
  },
  {
    "text": "So what happens is now things\nnext to each other, you want to multiply different\nprocessors.",
    "start": "2164330",
    "end": "2169550"
  },
  {
    "text": "We're not touching\nthe same data. Everybody's looking at\nsomebody else's data. So what happens is assume I want\nto write this data item.",
    "start": "2169550",
    "end": "2176290"
  },
  {
    "text": "I like that data item. But I get the entire cache line\nbecause when I ask for",
    "start": "2176290",
    "end": "2182430"
  },
  {
    "text": "that, I get my synchronization\nby the cache line. I get this entire cache line\ncoming in here into this one.",
    "start": "2182430",
    "end": "2188830"
  },
  {
    "text": "And the next guys\n[UNINTELLIGIBLE] at me. This core won't write this\ndata because instead of blocks, I basically\ngive each strips.",
    "start": "2188830",
    "end": "2196000"
  },
  {
    "text": "There's a lot of overlap\nbetween strips. So this guy says not to write\nthis one, I had to get the entire cache line\ngoing back here.",
    "start": "2196000",
    "end": "2203580"
  },
  {
    "text": "And so if you want to write that\nagain, I had to get the entire cache line going back\neven though we are writing different data.",
    "start": "2203580",
    "end": "2208790"
  },
  {
    "text": "Because we are sharing\ncache lines in here. This thinking was in back\nand forth, back and",
    "start": "2208790",
    "end": "2213880"
  },
  {
    "text": "forth, back and forth. I have a lot of cache\n[UNINTELLIGIBLE]. Things are really shot.",
    "start": "2213880",
    "end": "2219200"
  },
  {
    "text": "OK? And so what happens here is if\nyou look at the cache lines-- there's my animation.",
    "start": "2219200",
    "end": "2225140"
  },
  {
    "text": "So cache lines basically\nmess this all up. You can see that really\ncarefully. What happens is between these\nlines, there would be some",
    "start": "2225140",
    "end": "2232500"
  },
  {
    "text": "overlap of cache lines.  And this overlap in cache lines\nkeeps bouncing back and",
    "start": "2232500",
    "end": "2237890"
  },
  {
    "text": "forth, back and forth in here. And so what happens is basically\ncache lines are",
    "start": "2237890",
    "end": "2243630"
  },
  {
    "text": "bigger than the data size, or\nthere's overlap in here, and",
    "start": "2243630",
    "end": "2248849"
  },
  {
    "text": "the cache line is shared when\nthe data is not shared. And so how to detect false\nsharing in too many conflicts.",
    "start": "2248850",
    "end": "2257050"
  },
  {
    "text": "You assume this is a nice\nparallelism, but suddenly, you don't have a speed up, and you\nhave a lot of conflicts here,",
    "start": "2257050",
    "end": "2263840"
  },
  {
    "text": "even though there isn't\nsomething to be sharing. And how to eliminate\nfalse sharing.",
    "start": "2263840",
    "end": "2269770"
  },
  {
    "text": "Make data used by each\ncontiguous in memory. That's a good way\nof doing that.",
    "start": "2269770",
    "end": "2275550"
  },
  {
    "text": "Or pad at the end. So these kind of at the corners,\nthere's not going to be any overlapping.",
    "start": "2275550",
    "end": "2282830"
  },
  {
    "text": "So in here, one thing you can\ndo is, you can measure each thing that each of\nthe cores get.",
    "start": "2282830",
    "end": "2290370"
  },
  {
    "text": "We can make [UNINTELLIGIBLE]. But before what happens was\na core used to get this line and this line.",
    "start": "2290370",
    "end": "2295970"
  },
  {
    "text": "There are different\nplaces in memory. But you can make these two\ncontiguous in memory by basically now, instead of\nhaving a two-dimensional",
    "start": "2295970",
    "end": "2302190"
  },
  {
    "text": "array, you made that a three-dimensional or disarrays. AUDIENCE: Can you\nsay that again?",
    "start": "2302190",
    "end": "2307890"
  },
  {
    "text": "PROFESSOR: So before you what\njust happened was each of them were going to get this line\nand this line, each core.",
    "start": "2307890",
    "end": "2314210"
  },
  {
    "text": "All these lines that were in\ndifferent parts of the memory. In here, each would get\nonly two lines.",
    "start": "2314210",
    "end": "2320510"
  },
  {
    "text": "But they're in a different\nplace. So if you have more cyclic,\nyou'll get a lot more lines or lower memory. So what we can do is we\ncan arrange the cache.",
    "start": "2320510",
    "end": "2327830"
  },
  {
    "text": "So if you think about this, you\ncan think the cache, now the data, is instead of\ntwo-dimensions is",
    "start": "2327830",
    "end": "2333220"
  },
  {
    "text": "three-dimensional data. One dimension is this\ncyclic part in here.",
    "start": "2333220",
    "end": "2338359"
  },
  {
    "text": "So we can do that. And then, you can change any way\nthat the cyclic part, the",
    "start": "2338360",
    "end": "2344030"
  },
  {
    "text": "one that I got this line and\nthis line, now become contiguous. So you think about data\nas a two-dimension.",
    "start": "2344030",
    "end": "2350390"
  },
  {
    "text": "You think about it as a cube. And you kind of change the cube\nfor the inner dimension to be the one that's\ncontiguous.",
    "start": "2350390",
    "end": "2356670"
  },
  {
    "text": "So you can do data\n[UNINTELLIGIBLE] transformation and get there. ",
    "start": "2356670",
    "end": "2363290"
  },
  {
    "text": "So now what happens is the role\nof core zero just gets",
    "start": "2363290",
    "end": "2369130"
  },
  {
    "text": "contiguous in memory. And core one gets contiguous\nin memory. So if you're trying to make it\ncontiguous, that's great.",
    "start": "2369130",
    "end": "2374600"
  },
  {
    "text": "So between padding and making\nthings contiguous, you can get good performance. And if you do data\ntransformation, voila!",
    "start": "2374600",
    "end": "2381520"
  },
  {
    "text": "My invalidations just went\ndown drastically. I again have a nice load\nbalancing here.",
    "start": "2381520",
    "end": "2387900"
  },
  {
    "text": "Invalidations went\ndown drastically. That means my [UNINTELLIGIBLE]\nincreased a little bit and I",
    "start": "2387900",
    "end": "2393660"
  },
  {
    "text": "get really nice speed up. So here are the kind of crazy\nthings you are to do if you",
    "start": "2393660",
    "end": "2401320"
  },
  {
    "text": "are doing things like\nalgorithms that are not cache obvious.",
    "start": "2401320",
    "end": "2407099"
  },
  {
    "text": "And if you are doing directly\nparallizing yourself without letting a nice [UNINTELLIGIBLE] time to help you.",
    "start": "2407100",
    "end": "2412660"
  },
  {
    "text": "Something like a\n[UNINTELLIGIBLE] assistant. So I'm just going to\nsummarize this",
    "start": "2412660",
    "end": "2419710"
  },
  {
    "text": "because this is important. We looked at a bunch\nof cache issues. We looked at cold missiles,\ncapacity missiles, and",
    "start": "2419710",
    "end": "2425420"
  },
  {
    "text": "conflict missiles before. And today, here are\nsome examples of true sharing missiles.",
    "start": "2425420",
    "end": "2431339"
  },
  {
    "text": "What happened was I am actually\nreally using data, but I set up my parallelism\nin such a way that between",
    "start": "2431340",
    "end": "2441880"
  },
  {
    "text": "different executions, my data\nhas to move across. [UNINTELLIGIBLE]",
    "start": "2441880",
    "end": "2447030"
  },
  {
    "text": "So I am truly sharing data,\nbut the data has to go to somebody else's cache.",
    "start": "2447030",
    "end": "2452250"
  },
  {
    "text": "So I've got a lot of\n[UNINTELLIGIBLE] violations here. More into this one is more like\nfalse sharing, where you",
    "start": "2452250",
    "end": "2458420"
  },
  {
    "text": "assume there's no sharing, nice\nparallelism, everything, except the program\nruns very slow. And that can be because\nof false sharing.",
    "start": "2458420",
    "end": "2465610"
  },
  {
    "text": "So we just kind of touch\non these two topics. OK?",
    "start": "2465610",
    "end": "2470660"
  },
  {
    "text": "So let me switch gears a little\nbit about dependences. We touched on the dependences\na little bit.",
    "start": "2470660",
    "end": "2476380"
  },
  {
    "text": "And these are two fine\nprograms that are not completely parallel. So normally, what happens is a\ntrue dependence means that I'm",
    "start": "2476380",
    "end": "2484710"
  },
  {
    "text": "writing and reading\n[UNINTELLIGIBLE] other way out. And if two guys are both\nfighting, then the order has",
    "start": "2484710",
    "end": "2490400"
  },
  {
    "text": "to maintiain us out would\nbe dependence. And did our dependence\neven loop, because",
    "start": "2490400",
    "end": "2498650"
  },
  {
    "text": "these are single items. So if you have an error here,\nthis is becoming a lot more",
    "start": "2498650",
    "end": "2503759"
  },
  {
    "text": "complicated. Because there's no simple\nthing in here. Because it's not just using\nthe same iteration. You might be using data from\ndifferent iterations.",
    "start": "2503760",
    "end": "2511910"
  },
  {
    "text": "So what happens is there's\na dynamic instance of iterations. So one iteration writes the\ndata, and somebody else might",
    "start": "2511910",
    "end": "2519230"
  },
  {
    "text": "be reading the data. And that is basically\nthe order we have to [UNINTELLIGIBLE]. Let me give you an example.",
    "start": "2519230",
    "end": "2525060"
  },
  {
    "text": "This kind of demonstrates\nwhat's going on. OK? And when you edit, you say\nlook, this is where you",
    "start": "2525060",
    "end": "2530500"
  },
  {
    "text": "[UNINTELLIGIBLE] complicated. So in order to give you\nand example, let me look at this program.",
    "start": "2530500",
    "end": "2535876"
  },
  {
    "text": "I have a simple program here. Ai equals Ai plus one. My iterations-- I'm running five iterations\nin here.",
    "start": "2535876",
    "end": "2541570"
  },
  {
    "text": "So this is my iteration space. I have a large array, so\nthis is my data space. ",
    "start": "2541570",
    "end": "2548090"
  },
  {
    "text": "And now, I keep running\nthis program. So what happens is this is\ntime going down in here. So the first situation\nbasically, I first read and",
    "start": "2548090",
    "end": "2555930"
  },
  {
    "text": "then write. Same in the second iteration,\nI read and write. Third iteration read\nand write. Fourth iteration,\nread and write.",
    "start": "2555930",
    "end": "2562770"
  },
  {
    "text": "Do you see how this is going\non these four situations? Second iteration, third\niteration, fourth iteration, [UNINTELLIGIBLE].",
    "start": "2562770",
    "end": "2568115"
  },
  {
    "text": "OK. So what happens is first\niteration read this value is zero.",
    "start": "2568115",
    "end": "2573810"
  },
  {
    "text": "And write the value as zero\nin the menu writing. Second iteration A1,\nA1, A2, A2, A3, A3.",
    "start": "2573810",
    "end": "2580930"
  },
  {
    "text": "So now, when this is writing,\nthat's a dependence",
    "start": "2580930",
    "end": "2587290"
  },
  {
    "text": "between these two. You see the true and entire\noutput dependence between these two. ",
    "start": "2587290",
    "end": "2595545"
  },
  {
    "text": "What type of dependence\ndo we have? [UNINTELLIGIBLE] dependence. ",
    "start": "2595545",
    "end": "2604240"
  },
  {
    "text": "True dependence is what? What to what? What's the first thing\nthat occurs?",
    "start": "2604240",
    "end": "2609940"
  },
  {
    "text": "What's the next thing\nthat occurs? Anybody want to answer? ",
    "start": "2609940",
    "end": "2620820"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: Write to read. So you have the first thing\nhas to be write to read. Watch this.",
    "start": "2620820",
    "end": "2626570"
  },
  {
    "text": "This is a read to write. So what type of dependence\nis this? This is anti-dependent.",
    "start": "2626570",
    "end": "2632240"
  },
  {
    "text": "So here is ante-dependence\nin here. But the nice thing about that is\nthis dependent didn't cross",
    "start": "2632240",
    "end": "2637710"
  },
  {
    "text": "the iteration boundary. So these black lines are my\niteration boundaries. So these are for situations\nthat [UNINTELLIGIBLE].",
    "start": "2637710",
    "end": "2643190"
  },
  {
    "text": "So there's no iteration\ncrossing in here. You can kind of [UNINTELLIGIBLE]\nit using each",
    "start": "2643190",
    "end": "2649360"
  },
  {
    "text": "of these iterations and my\ndependencies within the very same iteration. So the same iteration I have\ndependency [UNINTELLIGIBLE].",
    "start": "2649360",
    "end": "2658116"
  },
  {
    "text": "OK? This is a simpler case. So let's look at something a\nlittle bit more complicated.",
    "start": "2658116",
    "end": "2664059"
  },
  {
    "text": "So I have Ai plus 1\nequals Ai plus 1. So what happens is first\nI am reading Ai.",
    "start": "2664060",
    "end": "2672430"
  },
  {
    "text": "And then, I am writing Ai plus\n1 in the same iteration.",
    "start": "2672430",
    "end": "2679270"
  },
  {
    "text": "The next iteration, I\nam reading now Ai [UNINTELLIGIBLE] this is A0 and 1. This is A is 1.",
    "start": "2679270",
    "end": "2685890"
  },
  {
    "text": "[UNINTELLIGIBLE] I am writing Ai plus 1. I am writing 2. ",
    "start": "2685890",
    "end": "2691609"
  },
  {
    "text": "So I have a dependence\nlike this now. What type of dependence\nis this? ",
    "start": "2691610",
    "end": "2698190"
  },
  {
    "text": "This is a true dependence\nbecause I am writing. And this is actually reading\nwhat what it is writing.",
    "start": "2698190",
    "end": "2704610"
  },
  {
    "text": "So does this look parallel? No. Because what happens is if you\nlook at each iteration depends",
    "start": "2704610",
    "end": "2713790"
  },
  {
    "text": "on the previous iteration. So you have to actually have\nthis dependence going back and forth, back and forth in here.",
    "start": "2713790",
    "end": "2720890"
  },
  {
    "text": "So let's look at a couple\nmore other things. So here is Ai equals\nAi plus 2.",
    "start": "2720890",
    "end": "2726830"
  },
  {
    "text": "So I am basically reading\nAi plus 2. So I am reading this one. I am writing this one.",
    "start": "2726830",
    "end": "2733220"
  },
  {
    "text": "Reading this one. Writing this one. Here is my dependence\nthat's in here. You see the two are\nanti in here.",
    "start": "2733220",
    "end": "2739620"
  },
  {
    "text": " This is anti-dependence because\nI am going from a reading to a write in here.",
    "start": "2739620",
    "end": "2747160"
  },
  {
    "text": "Can this loop be parallel? ",
    "start": "2747160",
    "end": "2755240"
  },
  {
    "text": "Can this loop run parallel? AUDIENCE: [INAUDIBLE]",
    "start": "2755240",
    "end": "2760440"
  },
  {
    "text": "PROFESSOR: So can every\niteration run parallel? There could be basically. No because what happens is if\nyou look at that, there's a",
    "start": "2760440",
    "end": "2767590"
  },
  {
    "text": "dependence that goes\nlike this. And of course, there\nare two chains. So if you are interested, you\ncan run at least two-way",
    "start": "2767590",
    "end": "2774170"
  },
  {
    "text": "parallelism. You can run one chain parallel\nto another chain when you do get that much parallelism.",
    "start": "2774170",
    "end": "2781130"
  },
  {
    "text": "How about this one?  2i and 2i plus 1.",
    "start": "2781130",
    "end": "2786970"
  },
  {
    "text": "[UNINTELLIGIBLE]  Is there independence in here? ",
    "start": "2786970",
    "end": "2794740"
  },
  {
    "text": "Nope because one is-- you are reading all the elements\nand even writing elements [UNINTELLIGIBLE] dependence. So you can have a missing\nparallel.",
    "start": "2794740",
    "end": "2802100"
  },
  {
    "text": "OK? So this is the kind of\ninteresting thing that is going on. So next, I want to look at\nsomething a little bit more",
    "start": "2802100",
    "end": "2811150"
  },
  {
    "text": "complicated. So let's look at this. So here's a classic algorithm\ncalled successive over",
    "start": "2811150",
    "end": "2819849"
  },
  {
    "text": "relaxation. So it kind of simulates a lot of\ntimes things like heat flow",
    "start": "2819850",
    "end": "2825050"
  },
  {
    "text": "through a plane. So the idea there is-- let me illustrate\nwhat he does.",
    "start": "2825050",
    "end": "2830500"
  },
  {
    "text": "So assume you have a\nbig metal sheet.",
    "start": "2830500",
    "end": "2836750"
  },
  {
    "text": "And you put some kind of heat\nsource in one place. And after sometime, it all\nreaches a steady state.",
    "start": "2836750",
    "end": "2843640"
  },
  {
    "text": "The other side might be cold. And you want to know part of\nthe sheet's temperature. ",
    "start": "2843640",
    "end": "2851069"
  },
  {
    "text": "Because temperature\ncan leak out. And there are more things like\nyou have a heat source and",
    "start": "2851070",
    "end": "2860515"
  },
  {
    "text": "others that [UNINTELLIGIBLE]\nto work a glass of water or some kind of a sink. So what is the heat\ndistribution?",
    "start": "2860515",
    "end": "2867650"
  },
  {
    "text": "So one way to compare that this\nis basically the same [UNINTELLIGIBLE]. The heat value here is basically\nthe average around",
    "start": "2867650",
    "end": "2875230"
  },
  {
    "text": "all these other values\nright now. Because if something is too\nhot, the heat is going to",
    "start": "2875230",
    "end": "2881700"
  },
  {
    "text": "propagate something\nthat is too cold. The heat is going to propagate\nbecause it kind of has to be average around that.",
    "start": "2881700",
    "end": "2886820"
  },
  {
    "text": "Then, you take the\naverage in here. So what it's doing\nis calculating the average in here. And then, you have to do\nit many, many times.",
    "start": "2886820",
    "end": "2892810"
  },
  {
    "text": "So if you have a heat source,\nat that point, it would be very hard. And then, it will start\npropagating slowly and kind of propagate down.",
    "start": "2892810",
    "end": "2898810"
  },
  {
    "text": "And the cold side in this way\nor after running many times, it basically stabilizes. And at that point, you have the\nkind of heat distribution",
    "start": "2898810",
    "end": "2905349"
  },
  {
    "text": "that we [UNINTELLIGIBLE] have. This is the kind of calculation\nyou do. So this is the calculation. So what you're doing is\ncalculating this.",
    "start": "2905350",
    "end": "2911410"
  },
  {
    "text": "You are creating this,\nthis, this, and this and updating that. And then, you do it\nfor t time stamps.",
    "start": "2911410",
    "end": "2918480"
  },
  {
    "text": "So you just go around doing each\nof these things first and doing it for t time stamps.",
    "start": "2918480",
    "end": "2924284"
  },
  {
    "text": "OK? So we would like to\nrun this parallel. ",
    "start": "2924284",
    "end": "2929619"
  },
  {
    "text": "So here's my basically\ndata space. There's my data items.",
    "start": "2929620",
    "end": "2935270"
  },
  {
    "text": "So here's my array,\ntwo-dimensional array. So this is how I'm\ntrying to update. I'm reading all this file. So here's my iteration space.",
    "start": "2935270",
    "end": "2941760"
  },
  {
    "text": "So what I have looked at this. I don't want to-- it's hard to give you\na 3D diagram. I don't have a 3D projector.",
    "start": "2941760",
    "end": "2948190"
  },
  {
    "text": "So what I'm showing here is\nthree-dimension here. So this is the previous\niteration, first iteration.",
    "start": "2948190",
    "end": "2953849"
  },
  {
    "text": "So if I still go tij. So you go through t, and then\nyou go through i in here, and",
    "start": "2953850",
    "end": "2959800"
  },
  {
    "text": "then, when you're done, you\ngo to the [UNINTELLIGIBLE] iteration and you go this way. So here's how you\nwould iterate.",
    "start": "2959800",
    "end": "2964819"
  },
  {
    "text": "So you run this one, this one,\nthis one, this one, this one, this one, this one, this\none, this one. And then increase t by\n1, and go like this.",
    "start": "2964820",
    "end": "2971500"
  },
  {
    "text": "And right now, we are here. We are trying to update\nthis one.",
    "start": "2971500",
    "end": "2977140"
  },
  {
    "text": "That's what we are\ntrying to do. And that means we are already\nfinished up to this point.",
    "start": "2977140",
    "end": "2982570"
  },
  {
    "text": "All these points are\nfinished up. Now, what we have to do is\nfigure out when I'm reading,",
    "start": "2982570",
    "end": "2990160"
  },
  {
    "text": "who actually wrote this value. OK? First of all, let's figure out\nwhich iterations might be able",
    "start": "2990160",
    "end": "2996829"
  },
  {
    "text": "to write this value. So if you look at\nthis value, this",
    "start": "2996830",
    "end": "3004460"
  },
  {
    "text": "relationship in between here. This one, basically, is ij. And this is ij, ij, ij.",
    "start": "3004460",
    "end": "3011030"
  },
  {
    "text": "These three iterations\ncan write this one. So and these iterations\ncan write this one.",
    "start": "3011030",
    "end": "3017650"
  },
  {
    "text": "Let me go to this one. This is a pretty darn\ncomplicated [UNINTELLIGIBLE]. So what that means is in\nthis one, this one",
    "start": "3017650",
    "end": "3026650"
  },
  {
    "text": "already wrote something. This is what I'm reading\nin here. This one already wrote\nsomething.",
    "start": "3026650",
    "end": "3032500"
  },
  {
    "text": "This is what I'm reading here. This iteration wrote\nsomething. I read it here. OK. Everybody following so far?",
    "start": "3032500",
    "end": "3038849"
  },
  {
    "text": "How about this, guys? Who wrote the value I am reading\nin these iterations? ",
    "start": "3038850",
    "end": "3047530"
  },
  {
    "text": "In this one, I haven't\nreached there yet. So who has written that?",
    "start": "3047530",
    "end": "3053130"
  },
  {
    "text": "So I assume this\nis t equals 1. [UNINTELLIGIBLE] somebody has to write\nthose things.",
    "start": "3053130",
    "end": "3059259"
  },
  {
    "text": "So what that means is this also\nwrote all of those values because I have done\nthose iterations.",
    "start": "3059260",
    "end": "3064520"
  },
  {
    "text": "But the interesting thing is\nsome of these values got overwritten. This value got overwritten ,\nthis value got overwritten.",
    "start": "3064520",
    "end": "3069650"
  },
  {
    "text": "So these two values disappear. This value got overwritten\nby this guy.",
    "start": "3069650",
    "end": "3075720"
  },
  {
    "text": "This value got overwritten\nby this guy. OK. But we haven't overwritten this\nvalue, this value, and",
    "start": "3075720",
    "end": "3082400"
  },
  {
    "text": "this value yet. This one, basically,\nI've just updated. But I [UNINTELLIGIBLE] this one.",
    "start": "3082400",
    "end": "3088894"
  },
  {
    "text": "Do you see this? Is everybody following me?",
    "start": "3088894",
    "end": "3093954"
  },
  {
    "text": "AUDIENCE: Once again, sir. I got lost. So what are [INAUDIBLE]",
    "start": "3093954",
    "end": "3100630"
  },
  {
    "text": "PROFESSOR: So what happens is I\nam trying to update in this iteration because this array\nget rid of multiple times.",
    "start": "3100630",
    "end": "3106779"
  },
  {
    "text": "But in each iteration, you are\nonly doing one update. So I am trying to read\nand write in here.",
    "start": "3106780",
    "end": "3112220"
  },
  {
    "text": "So I need to read all\nof these five elements in this iteration. So I want to figure out\nwho wrote that.",
    "start": "3112220",
    "end": "3118450"
  },
  {
    "text": "OK? This one can be written by this\nguy and this iteration. Could this iteration write\nits value in here?",
    "start": "3118450",
    "end": "3125440"
  },
  {
    "text": " OK? [UNINTELLIGIBLE] This iteration write because\nwe see it's writing ij.",
    "start": "3125440",
    "end": "3131990"
  },
  {
    "text": "I mean my diagram is not that\ngreat because I have three in here and five in here.",
    "start": "3131990",
    "end": "3138660"
  },
  {
    "text": "So just bear with me on that. So assume I am writing\nij in here. ",
    "start": "3138660",
    "end": "3144760"
  },
  {
    "text": "So my iterations go from 1 to n,\nbut my data goes from 0 to n plus 1, basically. 1 to n minus 1 iterations.",
    "start": "3144760",
    "end": "3150990"
  },
  {
    "text": "0 to n plus 1 data. So data is bigger than iteration\nspace because of [UNINTELLIGIBLE].",
    "start": "3150990",
    "end": "3156289"
  },
  {
    "text": "So what happens is when I'm in\nthis iteration, we'll say this is 1 2 iteration.",
    "start": "3156290",
    "end": "3164770"
  },
  {
    "text": "I will write this value. This iteration will also\nwrite this value.",
    "start": "3164770",
    "end": "3172370"
  },
  {
    "text": "OK? You see that? All of these iterations\nare the same. This iteration we will also\nwrite this value.",
    "start": "3172370",
    "end": "3178170"
  },
  {
    "text": "But right now, who is the\nlast guy who wrote it? The last guy that wrote\nit is this guy. ",
    "start": "3178170",
    "end": "3185125"
  },
  {
    "text": "Because this iteration wrote\nit, and after that, it got ordered in this one. But this one hadn't occurred\nyet, so it hadn't been ordered",
    "start": "3185125",
    "end": "3191330"
  },
  {
    "text": "by this guy. So the last guy who wrote\nit was this one. So that's why I had\nto eliminate this.",
    "start": "3191330",
    "end": "3196819"
  },
  {
    "text": "But this data value-- I haven't executed this\niteration yet. So nobody had written this\none in this time stamp.",
    "start": "3196820",
    "end": "3204260"
  },
  {
    "text": "So it has to be from the\nprevious time stamp. So I read two values from the\ncurrent time stamp, three",
    "start": "3204260",
    "end": "3212300"
  },
  {
    "text": "values from the previous\ntime stamp. These three values have\nto come from the previous time stamp. These two values that come from\nthe current time stamp.",
    "start": "3212300",
    "end": "3218670"
  },
  {
    "text": "You see that? OK. Good. So what that means is because\ndependence means--",
    "start": "3218670",
    "end": "3225250"
  },
  {
    "text": "OK. This line, this dark, red line.",
    "start": "3225250",
    "end": "3230455"
  },
  {
    "text": "See. I am reading a value in a\ncurrent iteration that was written by this iteration.",
    "start": "3230455",
    "end": "3236070"
  },
  {
    "text": "So that means I have no\ndependence between these two iterations. OK. This line, this dark,\nred line.",
    "start": "3236070",
    "end": "3243930"
  },
  {
    "text": "I am reading a value written\nby this iteration. So I have a dependency\nin here. This line means I have a\ndependence between this",
    "start": "3243930",
    "end": "3250070"
  },
  {
    "text": "iteration to the current one. This line means I have\ndependence between this iteration and the current one. This line means I have\ndependence between this",
    "start": "3250070",
    "end": "3255980"
  },
  {
    "text": "iteration and the current one. You see that? ",
    "start": "3255980",
    "end": "3262480"
  },
  {
    "text": "OK. So now, I want to see how we\ncan parallelize this group.",
    "start": "3262480",
    "end": "3268560"
  },
  {
    "text": "So what can I do? So I look at all this\ndependence. At this point, I don't have to\nthink about all this where who",
    "start": "3268560",
    "end": "3274720"
  },
  {
    "text": "wrote what. I can say this is dependence. In order to do this equation,\nall these iterations have to",
    "start": "3274720",
    "end": "3283310"
  },
  {
    "text": "be done because I am losing the\nvalues produced by them. So these have to be finished\nbefore I can patch that.",
    "start": "3283310",
    "end": "3289740"
  },
  {
    "text": "So the parallelism\nmeans I tried to do things in parallel. So can we parallelize\nthis loop?",
    "start": "3289740",
    "end": "3296900"
  },
  {
    "text": " Can we run each time\nstamp separately? ",
    "start": "3296900",
    "end": "3305109"
  },
  {
    "text": "No because I am using these\nthree values from the previous time stamp. So I can't run this time stamp,\nB equals 1, until B",
    "start": "3305110",
    "end": "3314030"
  },
  {
    "text": "equals 0 is done. Or B plus 2 [UNINTELLIGIBLE] B plus 1 is done. OK? So I can't parallelize\nthis loop.",
    "start": "3314030",
    "end": "3322690"
  },
  {
    "text": "OK. Can I parallelize this loop? Why?",
    "start": "3322690",
    "end": "3327850"
  },
  {
    "text": "Will dependence stop me from\nparallelizing this one? ",
    "start": "3327850",
    "end": "3336070"
  },
  {
    "text": "So I'm looking at i. This is my i dimension. How many lines, at\nleast, tell me.",
    "start": "3336070",
    "end": "3341720"
  },
  {
    "text": "How many dependencies\nare going to stop me from doing that?",
    "start": "3341720",
    "end": "3346850"
  },
  {
    "text": "OK. Good. I have [UNINTELLIGIBLE]. Somebody says three. Somebody says one. OK. Let's get a vote.",
    "start": "3346850",
    "end": "3351930"
  },
  {
    "text": "How many people think\nit's three?  OK. There's one vote for three.",
    "start": "3351930",
    "end": "3358759"
  },
  {
    "text": "How many people think\nit's three? How many people think\nit's one? ",
    "start": "3358760",
    "end": "3363770"
  },
  {
    "text": "Wait a minute. One vote for three and\ntwo votes for one? OK. Where's the rest?",
    "start": "3363770",
    "end": "3370100"
  },
  {
    "text": "For two? For 0? Can't be 0 if the\n0 is parallel. OK. So we'll start parallelizing.",
    "start": "3370100",
    "end": "3376150"
  },
  {
    "text": "OK. So what happens in here? Right now, this is\nactually one.",
    "start": "3376150",
    "end": "3381210"
  },
  {
    "text": "This one. Because these things don't\nparticipate because this has",
    "start": "3381210",
    "end": "3386900"
  },
  {
    "text": "already happened. When you go to ij iterations,\nthese are already done.",
    "start": "3386900",
    "end": "3393030"
  },
  {
    "text": "So you're going from t. So you're looking at the current\niterations because you're ending in two loops.",
    "start": "3393030",
    "end": "3398680"
  },
  {
    "text": "So the t is done. So these all are already\ndone when you go try to parallelize sides. So I don't have to worry\nabout these three.",
    "start": "3398680",
    "end": "3404740"
  },
  {
    "text": "In here because actually I'm\nlosing t of something here, I am in trouble.",
    "start": "3404740",
    "end": "3411480"
  },
  {
    "text": "So when you go look at this\none, I have this one. So every dimension has\na dependence in here.",
    "start": "3411480",
    "end": "3419020"
  },
  {
    "text": "So I can't run it in parallel. So does this mean that there's\nno parallelism? ",
    "start": "3419020",
    "end": "3428160"
  },
  {
    "text": "Who think there's\nno parallelism?  Who thinks there is?",
    "start": "3428160",
    "end": "3433339"
  },
  {
    "text": "Oh, somebody thinks there's\nno parallelism. Who thinks there's\nparallelism? OK. More people think there's\nparallelism. Let's see what we can do.",
    "start": "3433340",
    "end": "3440090"
  },
  {
    "text": "Question? AUDIENCE: Do you really\nthink [INAUDIBLE] ",
    "start": "3440090",
    "end": "3454214"
  },
  {
    "text": "I'm trying to figure out\nhow to word this. Do you really want to have dependence on the same concept? [INAUDIBLE]?",
    "start": "3454214",
    "end": "3460394"
  },
  {
    "text": " PROFESSOR: Yeah. I mean you can do--",
    "start": "3460394",
    "end": "3465730"
  },
  {
    "text": "this is the way this SOR\nis sitting so there's a dependence between time stamp. There's another SOR.",
    "start": "3465730",
    "end": "3471750"
  },
  {
    "text": "What they do is kind\nof a red, black. So when you calculate the next\ntime stamp, you calculate it right and complete\nthe new array.",
    "start": "3471750",
    "end": "3477760"
  },
  {
    "text": "So there's no dependence. So that's a different\nalgorithm. This algorithm, basically,\nuses sum value from",
    "start": "3477760",
    "end": "3483799"
  },
  {
    "text": "[UNINTELLIGIBLE] because the\nvalue-- the algorithm you're talking-- you already created\nthe other copies. You had two copies. You're bouncing back\nand forth.",
    "start": "3483800",
    "end": "3489170"
  },
  {
    "text": "Nice. No real problem in here. But then you had to have twice\nthe amount of storage. Here, you are updating in.",
    "start": "3489170",
    "end": "3494320"
  },
  {
    "text": "And since this is kind of\nrunning enough iterations until it converges, it doesn't\nseem to matter that the",
    "start": "3494320",
    "end": "3503190"
  },
  {
    "text": "[UNINTELLIGIBLE PHRASE].  OK. So we cannot find a loop,\nwhat we call doall loop.",
    "start": "3503190",
    "end": "3512380"
  },
  {
    "text": "The doall loop means there's no\nloop carried dependences. It's fully parallel. This is the best case.",
    "start": "3512380",
    "end": "3518900"
  },
  {
    "text": "So what happens is when\nyou get there, everybody can run parallel. And when you're done, you can\nstop and then do that.",
    "start": "3518900",
    "end": "3524770"
  },
  {
    "text": "So this is the doall loop. Of course, there's\nno doall loop. We can look at every\ndimension. We had some kind\nof dependence.",
    "start": "3524770",
    "end": "3530290"
  },
  {
    "text": "So there's another choice, what\nwe call doacross loop. What that means is we have some\nloop carried dependence.",
    "start": "3530290",
    "end": "3537200"
  },
  {
    "text": "There's something I\nhave to use for the previous iteration. But it's only one thing. I have a lot of other things I\ncan run around that only I",
    "start": "3537200",
    "end": "3545150"
  },
  {
    "text": "just have to wait one thing. One is done. I can just keep running. And if I calculate and send this\none early, then I can do",
    "start": "3545150",
    "end": "3551020"
  },
  {
    "text": "my other calculations later. This is not that great. If you look at the\ndifference here. This definitely has very little\noverhead in here.",
    "start": "3551020",
    "end": "3559350"
  },
  {
    "text": "This can run slow. And of course, this thing\ngets produced very late. It's [? almost ?] sequential.",
    "start": "3559350",
    "end": "3564790"
  },
  {
    "text": "So I hope you can just-- it the\nother guy wants something, I can immediately send\nit very early.",
    "start": "3564790",
    "end": "3569809"
  },
  {
    "text": "And then I can run there. So you can get some kind of\ndoacross patterns in here.",
    "start": "3569810",
    "end": "3575600"
  },
  {
    "text": "So if you want to\ndo this one-- this is a little bit\ncrazy in here. But they'll do it in here.",
    "start": "3575600",
    "end": "3581580"
  },
  {
    "text": "And so what first we are to\ndo is you are to say, OK. Look. I'm running this loop, the\ni loop in parallel.",
    "start": "3581580",
    "end": "3588569"
  },
  {
    "text": "But I have to exchange\nsome data. Before I want to run this one,\nI have to basically get the",
    "start": "3588570",
    "end": "3595730"
  },
  {
    "text": "previous i value produced. And when it's done, I can say\nthe next guy can use it. So this is a very\ncomplicated one.",
    "start": "3595730",
    "end": "3602490"
  },
  {
    "text": "I don't want you to understand\nit too well. So the reason I put it is to\nshow that OK, if you want to",
    "start": "3602490",
    "end": "3609210"
  },
  {
    "text": "spend a week trying to really\ncall this up and understand and make sure that\nit works OK.",
    "start": "3609210",
    "end": "3614230"
  },
  {
    "text": "So you can do things\nlike that. OK? Aha. So this is the true\nvoodooness.",
    "start": "3614230",
    "end": "3621410"
  },
  {
    "text": "OK. AUDIENCE: So in Cilk, if you\ndo this with divide and",
    "start": "3621410",
    "end": "3628150"
  },
  {
    "text": "conquer, you can make it be what\nI called in the Tableau",
    "start": "3628150",
    "end": "3634400"
  },
  {
    "text": "construction. Each layer here is basically\nconstructing a Tableau. And so if you do it with divide\nand conquer, you can do",
    "start": "3634400",
    "end": "3641078"
  },
  {
    "text": "it with a very simple\nrecursive code. But you can also do it with a\nloop that goes diagonally.",
    "start": "3641078",
    "end": "3649160"
  },
  {
    "text": "AUDIENCE: [INTERPOSING VOICES] PROFESSOR: Yes. I'm going to get that. That's next. AUDIENCE: Sorry. PROFESSOR: That's OK.",
    "start": "3649160",
    "end": "3654540"
  },
  {
    "text": "So the reason that I'm showing\nthat is because this class is",
    "start": "3654540",
    "end": "3661080"
  },
  {
    "text": "not just about how to make the\ncores exactly run faster. Think about algorithmic issues\nand stuff like that.",
    "start": "3661080",
    "end": "3667630"
  },
  {
    "text": "So sometimes, when you look at\na problem, it looks crazy. And there might be some changes\nyou can do that you",
    "start": "3667630",
    "end": "3673240"
  },
  {
    "text": "can get to run things\nin parallel. So I'm actually doing\nnot diagonal.",
    "start": "3673240",
    "end": "3678890"
  },
  {
    "text": "I'm actually doing something\nvery simple. So what I have done here\nis I have all these",
    "start": "3678890",
    "end": "3686120"
  },
  {
    "text": "dependences in here. OK? So the problem here is I can't\nfind a single [UNINTELLIGIBLE]",
    "start": "3686120",
    "end": "3694380"
  },
  {
    "text": "that basically has\nno crossing. But if you look at this\n[UNINTELLIGIBLE]",
    "start": "3694380",
    "end": "3699500"
  },
  {
    "text": "diagonal here. What you see is, in fact,\nthere's nothing that crosses",
    "start": "3699500",
    "end": "3704779"
  },
  {
    "text": "the diagonal.  OK? So this one basically\ndoesn't depend on",
    "start": "3704780",
    "end": "3711599"
  },
  {
    "text": "this one or this one. It only depends on\nthe previous one. So I can run everything in\nthe diagonal parallel in",
    "start": "3711600",
    "end": "3717230"
  },
  {
    "text": "here in this one. So of course, I can't write\nanything [UNINTELLIGIBLE] in here, but there's a cute\ntrick you can do.",
    "start": "3717230",
    "end": "3723260"
  },
  {
    "text": "What you can do is you\ncan take iteration space and skew it. ",
    "start": "3723260",
    "end": "3730619"
  },
  {
    "text": "So what I have done is now\ninstead off the same thing, instead of this being a square,\nnow I skewed it a",
    "start": "3730620",
    "end": "3737851"
  },
  {
    "text": "little bit. OK? So what that means is when I'm\nrunning first i, I basically",
    "start": "3737851",
    "end": "3748730"
  },
  {
    "text": "don't run any here. Then, I run this one and\nthis iteration here. So what I have done is I have\nkind of moved my iteration",
    "start": "3748730",
    "end": "3754220"
  },
  {
    "text": "space around. Do you see how this might be? So now, the interesting thing\nis when I skew, if I look at",
    "start": "3754220",
    "end": "3762900"
  },
  {
    "text": "this line, I can parallelize\nin this one because all the",
    "start": "3762900",
    "end": "3776635"
  },
  {
    "text": "dependences come from the\nprevious iteration. Am I right? [UNINTELLIGIBLE] ",
    "start": "3776635",
    "end": "3783532"
  },
  {
    "text": "Yeah. I skewed it. ",
    "start": "3783532",
    "end": "3790864"
  },
  {
    "text": "Yes, everything in here, these\nones are parallel.",
    "start": "3790864",
    "end": "3796440"
  },
  {
    "text": "OK? And any dependence comes from\nthe previous iteration. There's no current iteration\nin here.",
    "start": "3796440",
    "end": "3802670"
  },
  {
    "text": "Everything in this\none is parallel. So I can parallelize this. So this one doesn't depend\non this one or this one.",
    "start": "3802670",
    "end": "3809020"
  },
  {
    "text": "So this is all parallel. This is a little bit\nmore complicated. So if you're interested\nto go deep, just go",
    "start": "3809020",
    "end": "3816990"
  },
  {
    "text": "stare at the slides. I have the slides out there to\nunderstand how that happens. So if you think about what I'm\nrunning here in parallel is",
    "start": "3816990",
    "end": "3823170"
  },
  {
    "text": "the one basically this\ndiagonal in here. So what happens is if you run\nthis, this, and this parallel,",
    "start": "3823170",
    "end": "3830869"
  },
  {
    "text": "there's no dependence. I don't need this one or this\none to run this one. So I can run this, this,\nthis, this, all",
    "start": "3830870",
    "end": "3836550"
  },
  {
    "text": "this diagonal in parallel. But the trouble with just the\ndiagonal is I don't have a place in here to say\n[UNINTELLIGIBLE]",
    "start": "3836550",
    "end": "3841849"
  },
  {
    "text": "for a diagonal. So I basically skewed\nit and then made a diagonal into one loop. So then, now what happens\nis basically j",
    "start": "3841850",
    "end": "3852780"
  },
  {
    "text": "loop I can run parallel. This one.",
    "start": "3852780",
    "end": "3857800"
  },
  {
    "text": "So I can do it four\n[UNINTELLIGIBLE] four. OK? So here's something you found\na problem that has no nice",
    "start": "3857800",
    "end": "3867910"
  },
  {
    "text": "parallelism. But you realize there's kind of\na what you call a wavefront going on here. Wave going on here.",
    "start": "3867910",
    "end": "3873530"
  },
  {
    "text": "So not the given dimension, but\nthere's another dimension that you can parallel. So you kind of skewed your\nspace to get that nice",
    "start": "3873530",
    "end": "3881089"
  },
  {
    "text": "[UNINTELLIGIBLE] line. And you run parallel. So that's all I have for today.",
    "start": "3881090",
    "end": "3887099"
  },
  {
    "start": "3887100",
    "end": "3888350"
  }
]