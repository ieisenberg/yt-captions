[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "6292"
  },
  {
    "start": "6292",
    "end": "13379"
  },
  {
    "text": "PROFESSOR: So our\nlast class, which is happy, because we\nget to go on break, but there's so much more\nI want to tell you guys.",
    "start": "13380",
    "end": "20320"
  },
  {
    "text": "But that's all we have time for. There are cookies here to\nmake our last class sweet.",
    "start": "20320",
    "end": "26020"
  },
  {
    "text": "So please come and\nget some if you want. They're very small. So you can take two. ",
    "start": "26020",
    "end": "33722"
  },
  {
    "text": "If you didn't want to\ncommit to a large cookie, you don't need to. ",
    "start": "33722",
    "end": "39760"
  },
  {
    "text": "So today, finally, we're going\nto actually construct the SNARGs that we've been after.",
    "start": "39760",
    "end": "45219"
  },
  {
    "text": "That was kind of the goal is\nto construct SNARGs, Succinct",
    "start": "45220",
    "end": "50610"
  },
  {
    "text": "Non-Interactive Arguments,\nand like this entire course was a buildup to\nconstruct these SNARGs.",
    "start": "50610",
    "end": "57165"
  },
  {
    "text": "And today we're going to\nsee how to construct them. There are cookies, guys-- cookies, if you want, from\nflour-- really good ones.",
    "start": "57165",
    "end": "65080"
  },
  {
    "text": "So feel free to take some. So what we're going\nto do today is show",
    "start": "65080",
    "end": "70740"
  },
  {
    "text": "how to construct these SNARGs. And we're going to-- last class,\nZhengzhong showed you",
    "start": "70740",
    "end": "78240"
  },
  {
    "text": "his really beautiful work\nand constructing BARGs, which are Batch Argument.",
    "start": "78240",
    "end": "84600"
  },
  {
    "text": "And on their own, you\ncan say, why do we care about batch argument?",
    "start": "84600",
    "end": "90340"
  },
  {
    "text": "I'm going to recall\nthe definition. But I mean, it's\ninteresting on its own. But what makes it\nsuper interesting",
    "start": "90340",
    "end": "96600"
  },
  {
    "text": "is that we can use it in a\npretty straightforward manner to construct SNARGs.",
    "start": "96600",
    "end": "101820"
  },
  {
    "text": "So that's what we're\ngoing to see today. We're going to see how to\nuse these BARGs, that I'm",
    "start": "101820",
    "end": "106958"
  },
  {
    "text": "going to recall the\ndefinition in a second, and also how to use-- I think Zhengzhong called it\nsomewhere statistically binding",
    "start": "106958",
    "end": "114810"
  },
  {
    "text": "hash functions. It's also known in the\nliterature as somewhere extractable hash functions. Both are used.",
    "start": "114810",
    "end": "120070"
  },
  {
    "text": "So I'm just going\nto use the other, just so you're familiar with\nboth formulations, both names.",
    "start": "120070",
    "end": "128649"
  },
  {
    "text": "So what we're going\nto see today is how to use these BARGs\nwith these hash functions",
    "start": "128650",
    "end": "133750"
  },
  {
    "text": "to get SNARGs. That's kind of the\nplan for today. So let me first recall\nwhat a BARG is really fast.",
    "start": "133750",
    "end": "142700"
  },
  {
    "text": "So a BARG, you want to prove\nthat many instances belong",
    "start": "142700",
    "end": "148390"
  },
  {
    "text": "to an NP language. So a BARG for an NP language L\nconsists of three algorithms.",
    "start": "148390",
    "end": "153519"
  },
  {
    "text": "Gen takes as input a security\nparameter, the number",
    "start": "153520",
    "end": "158980"
  },
  {
    "text": "of instances you want to batch. Maybe I'll close-- thank you. Can you close the door? Thanks. ",
    "start": "158980",
    "end": "166410"
  },
  {
    "text": "k, which is the number of\ninstances you want to batch, and n, which is the\nlength of each instance.",
    "start": "166410",
    "end": "172200"
  },
  {
    "text": "And then output some CRS. ",
    "start": "172200",
    "end": "178790"
  },
  {
    "text": "Note lambda is given in\nunary because we want them to run in time poly lambda.",
    "start": "178790",
    "end": "184070"
  },
  {
    "text": "But k and n are given in binary. So because it's a\npolynomial time algorithm, it runs in time polylog in k and\npolylog in n, the instant size.",
    "start": "184070",
    "end": "192680"
  },
  {
    "text": "And then the prover algorithm\ntakes as input the CRS,",
    "start": "192680",
    "end": "199640"
  },
  {
    "text": "and then x1 up to xn-- xk-- sorry. So k elements with witnesses\nand outputs, a proof pi--",
    "start": "199640",
    "end": "215569"
  },
  {
    "text": "but importantly, this\nproof should be small. So this pi is of size poly log--",
    "start": "215570",
    "end": "227099"
  },
  {
    "text": "or poly n security\nparameter, but log k.",
    "start": "227100",
    "end": "232110"
  },
  {
    "text": "That's important. We want it to depend only\npolylogarithmically on k.",
    "start": "232110",
    "end": "238340"
  },
  {
    "text": "That's kind of our goal. And then, maybe\nideally, also log n. But the point is we\nwant it to be succinct.",
    "start": "238340",
    "end": "245100"
  },
  {
    "text": "Otherwise, it's trivial. You just output the witnesses. And the verifier takes as\ninput CRS, the instances,",
    "start": "245100",
    "end": "254420"
  },
  {
    "text": "and the proof. And it outputs 0, 1-- ",
    "start": "254420",
    "end": "260609"
  },
  {
    "text": "accept or reject. And this, when I say the size\nof the proof is this, actually,",
    "start": "260610",
    "end": "267420"
  },
  {
    "text": "you can make it\nbigger or smaller, but we want it to be succinct. Sorry.",
    "start": "267420",
    "end": "273060"
  },
  {
    "text": "Sorry. I didn't-- we want it to depend\nonly logarithmically in k",
    "start": "273060",
    "end": "278280"
  },
  {
    "text": "and so on, but we allow it\nto depend polynomially in one",
    "start": "278280",
    "end": "286990"
  },
  {
    "text": "witness. So I can put it here, a\nsingle witness, one, not many.",
    "start": "286990",
    "end": "293597"
  },
  {
    "text": "I really want to be as\nsuccinct as possible, but what we can get is\na BARG that depends--",
    "start": "293597",
    "end": "298960"
  },
  {
    "text": "grows with one instance,\none witness, as opposed to k instances.",
    "start": "298960",
    "end": "306560"
  },
  {
    "text": "So this is kind\nof the algorithms, then we want completeness\nand soundness.",
    "start": "306560",
    "end": "312270"
  },
  {
    "text": "Completeness is the\nusual thing that just says, if P\nhas valid witnesses and it generates\na BARG, this BARG",
    "start": "312270",
    "end": "320630"
  },
  {
    "text": "is going to be accepting with\nprobability 1 over the CRS generation. So that's the\nstandard completeness.",
    "start": "320630",
    "end": "327419"
  },
  {
    "text": "And then the soundness\nproperty that we have,",
    "start": "327420",
    "end": "332910"
  },
  {
    "text": "ideally, you would\nwant to say that-- so in soundness,\ncomputational soundness,",
    "start": "332910",
    "end": "338550"
  },
  {
    "text": "we have adaptive soundness\nand non-adaptive soundness. And we want to say that a\ncheating prover cannot convince",
    "start": "338550",
    "end": "345530"
  },
  {
    "text": "you of a false statement. So he cannot generate-- he\ncannot give you x's that are not",
    "start": "345530",
    "end": "351620"
  },
  {
    "text": "all in the language\nwith a valid proof. That's soundness. There's an issue with it.",
    "start": "351620",
    "end": "357440"
  },
  {
    "text": "When does the cheating prover\nget to choose these x's? Is it before he sees the CRS\nor after he sees the CRS?",
    "start": "357440",
    "end": "365550"
  },
  {
    "text": "If he needs to decide that\nbefore he sees the CRS, then it's not adaptive. If you get to decide it\nafter, then it's adaptive.",
    "start": "365550",
    "end": "373250"
  },
  {
    "text": "Ideally, we want to say\nit's a cure for all very--",
    "start": "373250",
    "end": "379790"
  },
  {
    "text": "as big class\nprovers as possible. And thus we would like to have\nsomething against adaptive",
    "start": "379790",
    "end": "384980"
  },
  {
    "text": "provers to say, even if a\ncheating prover chooses this x1 of xk, adaptively,\nafter seeing the CRS,",
    "start": "384980",
    "end": "392570"
  },
  {
    "text": "if one of them is false,\nhe cannot generate a proof. That's what we\nwould like to say.",
    "start": "392570",
    "end": "398500"
  },
  {
    "text": "What we can say is what's called\na semi-adaptive, something in between.",
    "start": "398500",
    "end": "403600"
  },
  {
    "text": "So let me just write it here. So semi-adaptive soundness just\nsays the adversary needs to tell",
    "start": "403600",
    "end": "418500"
  },
  {
    "text": "you which-- so he's going to\ngive you k instances. He can choose them\nadaptively, but he",
    "start": "418500",
    "end": "426180"
  },
  {
    "text": "needs to choose the i on\nwhich he's going to cheat. So he's a cheater. So one of the xi's is\nnot in the language.",
    "start": "426180",
    "end": "433450"
  },
  {
    "text": "Which i, which\nlocation i, the xi, is going to be not\nin the language? That should not\ndepend on the CRS.",
    "start": "433450",
    "end": "440780"
  },
  {
    "text": "So it says that for\nany poly size P star",
    "start": "440780",
    "end": "449030"
  },
  {
    "text": "and for every i, which,\nof course, may depend on lambda, because\nfor any lambda",
    "start": "449030",
    "end": "456620"
  },
  {
    "text": "you have an i, because\nthe i is between 1 and k. And k grows with-- can grow with lambda.",
    "start": "456620",
    "end": "462750"
  },
  {
    "text": "So for any i, you want\nto say the probability that P star, given the CRS\noutput x1 up to xk and pi,",
    "start": "462750",
    "end": "475720"
  },
  {
    "text": "such that xi is not in the\nlanguage and pi is accepted",
    "start": "475720",
    "end": "481870"
  },
  {
    "text": "is negligible. So xi, one of them is-- the\nxi one is not in the language.",
    "start": "481870",
    "end": "487240"
  },
  {
    "text": "And the i was chosen\nbefore he saw the CRS. So for any P star,\nhe tells you, I'm",
    "start": "487240",
    "end": "494050"
  },
  {
    "text": "going to cheat on location i. Now, he's given a CRS.",
    "start": "494050",
    "end": "499280"
  },
  {
    "text": "The probability\nthat he gives you an accepting proof for x1 of\nxk that he chose adaptively",
    "start": "499280",
    "end": "505370"
  },
  {
    "text": "after seeing the CRS,\nthe probability that it's accepting-- so CRS x1\nup to xk and pi is 1.",
    "start": "505370",
    "end": "514885"
  },
  {
    "start": "514885",
    "end": "519969"
  },
  {
    "text": "And x is not in the language. xi is negligible.",
    "start": "519970",
    "end": "525860"
  },
  {
    "text": "This equals a negligible. ",
    "start": "525860",
    "end": "532430"
  },
  {
    "text": "So again, for any cheating\nprover, he needs ahead of time, I'm going to choose my xi and xk\nadaptively after I see the CRS.",
    "start": "532430",
    "end": "540899"
  },
  {
    "text": "But I'm going to\ncheat on location i. The probability that\nhe succeeds in cheating",
    "start": "540900",
    "end": "546740"
  },
  {
    "text": "in location i in the\naccepting way is negligible.",
    "start": "546740",
    "end": "552529"
  },
  {
    "text": "That's the\nsemi-adaptive soundness. And last class,\nZhengzhong kind of",
    "start": "552530",
    "end": "561170"
  },
  {
    "text": "showed you the high\nlevel of how you construct such a-- like the\nconstruction of such a BARG.",
    "start": "561170",
    "end": "568580"
  },
  {
    "text": "Any questions? Yes. AUDIENCE: Is this required? The indices other\nthan i, are those required to be in the language?",
    "start": "568580",
    "end": "575882"
  },
  {
    "text": "PROFESSOR: No, we don't care. So yeah, good question. So the P star can choose\nthe rest of the x's however",
    "start": "575882",
    "end": "581693"
  },
  {
    "text": "he wants-- in the language,\noutside the language-- however he wants. But he wins if the xi\nis not in the language",
    "start": "581693",
    "end": "590250"
  },
  {
    "text": "and the pi is accepting. And he wins with\nnegligible probability. Yes. AUDIENCE: Does the--\ntransforming it",
    "start": "590250",
    "end": "597380"
  },
  {
    "text": "into fully adaptive,\nwould it imply guessing? PROFESSOR: Yeah.",
    "start": "597380",
    "end": "603709"
  },
  {
    "text": "OK, good. So the question is,\ncan we transform this",
    "start": "603710",
    "end": "609259"
  },
  {
    "text": "into a fully adaptive SNARG? So converting it into a fully\nadaptive SNARG is non-trivial.",
    "start": "609260",
    "end": "621570"
  },
  {
    "text": "And I'll tell you why. You can guess i. You can guess i.",
    "start": "621570",
    "end": "626660"
  },
  {
    "text": "And you'll guess it correctly\nwith probability 1/k in general. But here is-- so you can do it.",
    "start": "626660",
    "end": "634470"
  },
  {
    "text": "But here is the issue. I'll tell you what\nthe complication is.",
    "start": "634470",
    "end": "640399"
  },
  {
    "text": "In the analysis--\nso I don't want to recall too much\nof the construction, but the high level idea of how\nthese BARGs are analyzed, even",
    "start": "640400",
    "end": "648110"
  },
  {
    "text": "without knowing\nthe construction, the way they're analyzed--\nin the CRS, so in the proof,",
    "start": "648110",
    "end": "654500"
  },
  {
    "text": "in the analysis, we say, suppose\nthere exists some cheating prover that cheats on some i.",
    "start": "654500",
    "end": "661370"
  },
  {
    "text": "In the CRS, I'm going\nto change the CRS now. I'm going to tell the cheating\nprover, here's a new CRS.",
    "start": "661370",
    "end": "667680"
  },
  {
    "text": "And in this new CRS, I'm\ngoing to hard wire i. I'm going to put some\ninformation about i",
    "start": "667680",
    "end": "673350"
  },
  {
    "text": "in a way that's unnoticeable. And when we'll see, I'm\ngoing to call the somewhere extractable hash,\nor what Zhengzhong",
    "start": "673350",
    "end": "680329"
  },
  {
    "text": "called SSB hash, somewhere\nstatistically binding. And then I'll remind you\na little bit how we--",
    "start": "680330",
    "end": "686000"
  },
  {
    "text": "where we stick the index i. But in the analysis,\nwe say, let me change",
    "start": "686000",
    "end": "691310"
  },
  {
    "text": "the CRS to a different CRS. It has a very\ndifferent distribution, but it's indistinguishable. It looks like the original CRS.",
    "start": "691310",
    "end": "698330"
  },
  {
    "text": "So P star can't distinguish\nbetween the two. So he'll still give\nme a valid BARG.",
    "start": "698330",
    "end": "704330"
  },
  {
    "text": "And now I'm going to\nsay, in this new CRS, actually, there's no way\nhe can cheat on location i.",
    "start": "704330",
    "end": "710390"
  },
  {
    "text": "There's no way he can cheat. What is the issue? So now you're saying,\nwhy do we need-- why can't we do fully adaptive?",
    "start": "710390",
    "end": "717830"
  },
  {
    "text": "The issue is it may be the case\nthat once we switch the CRS,",
    "start": "717830",
    "end": "723720"
  },
  {
    "text": "it switches where he's cheating. So here's an alternative way. Let's say the prover\ntells you, you know what?",
    "start": "723720",
    "end": "729745"
  },
  {
    "text": "I'm going to cheat\nin location i. But I can be adaptive--\nchosen based on the CRS.",
    "start": "729745",
    "end": "734839"
  },
  {
    "text": "So now in the analysis,\nI'm going to say-- I'm going to guess\nwhere he cheated. I'm going to say, let's guess\nhe cheated in location 7.",
    "start": "734840",
    "end": "740570"
  },
  {
    "text": "I'm going to hardwire\nkind of the CRS to depend on this location. And then the cheating\nprover doesn't cheat on 7.",
    "start": "740570",
    "end": "747680"
  },
  {
    "text": "It cheats on something else. He can kind of evade me. Now, you're saying, oh, if\nhe cheated on something else,",
    "start": "747680",
    "end": "754259"
  },
  {
    "text": "I can tell the difference. So I shouldn't be able to tell. But the thing is you don't know\nwhat's in the language, what's",
    "start": "754260",
    "end": "760580"
  },
  {
    "text": "not in the language. So the problem is whether\nxi is in the language or not in the language\ncan be very hard to tell.",
    "start": "760580",
    "end": "768170"
  },
  {
    "text": "It may take-- and that's why\nkind of getting adaptive--",
    "start": "768170",
    "end": "773860"
  },
  {
    "text": "just guessing is not good\nenough, because he needs to--",
    "start": "773860",
    "end": "780720"
  },
  {
    "text": "the issue is if you\ncould tell efficiently whether x is in the language or\nnot in the language, then, yes.",
    "start": "780720",
    "end": "787089"
  },
  {
    "text": "But because it can\nbe very hard, that's where things become tricky.",
    "start": "787090",
    "end": "792570"
  },
  {
    "text": "So that's-- so you can guess,\nbut it's not good enough is",
    "start": "792570",
    "end": "798330"
  },
  {
    "text": "the answer.  Yeah.",
    "start": "798330",
    "end": "803810"
  },
  {
    "text": "AUDIENCE: Even if he commits-- PROFESSOR: Huh? AUDIENCE: Even if he commits\nto doing it, [INAUDIBLE]?",
    "start": "803810",
    "end": "811600"
  },
  {
    "text": "PROFESSOR: Well, he can--\nwhat do you mean he commits? So you're saying let's\nchange the scheme kind of",
    "start": "811600",
    "end": "817360"
  },
  {
    "text": "and have him add commitments? AUDIENCE: Well, I guess\nit might be different.",
    "start": "817360",
    "end": "824470"
  },
  {
    "text": "PROFESSOR: I guess the issue\nis-- look, when he's cheating, we don't know whether-- he gives you x1 up\nto xk and a proof pi.",
    "start": "824470",
    "end": "831750"
  },
  {
    "text": "Now, he cheats if one of\nthem is not in the language. That's when he cheats. It's hard to know whether one\nof them is in the language",
    "start": "831750",
    "end": "839280"
  },
  {
    "text": "or not in the language. And the concern is he can say i. He can say whatever he wants. He's going to cheat.",
    "start": "839280",
    "end": "844323"
  },
  {
    "text": "So nothing he says we believe. And the concern\nis that maybe when",
    "start": "844323",
    "end": "850020"
  },
  {
    "text": "we switch the CRS\nto depend on i, also the xi becomes in the language.",
    "start": "850020",
    "end": "856350"
  },
  {
    "text": "And then what do you do? And now you can say you can't\ntell the difference, because xi in the language and outside the\nlanguage, they look the same.",
    "start": "856350",
    "end": "862079"
  },
  {
    "text": "So that's why guessing is, in\nsome sense, not good enough.",
    "start": "862080",
    "end": "867190"
  },
  {
    "text": "It's not helpful. So this is-- any\nother questions?",
    "start": "867190",
    "end": "872480"
  },
  {
    "text": " So this is one ingredient\nthat we're going to use to construct our SNARG.",
    "start": "872480",
    "end": "878500"
  },
  {
    "text": "The other ingredient is a\nsomewhere extractable hash,",
    "start": "878500",
    "end": "884710"
  },
  {
    "text": "or SSB hash. So let me write it out. I'm going to write it here,\nso we'll keep it on the board.",
    "start": "884710",
    "end": "891470"
  },
  {
    "text": "So let me just recall\nthe definition. Somewhere extractable\nhash family",
    "start": "891470",
    "end": "899019"
  },
  {
    "text": "consists of many\nseveral PPT algorithms.",
    "start": "899020",
    "end": "904125"
  },
  {
    "text": "Let me start writing. So the first one is gen. So\nnow we're constructing a hash.",
    "start": "904125",
    "end": "912820"
  },
  {
    "text": "So gen takes a\nsecurity parameter, the length, how many\nbits we're going to hash.",
    "start": "912820",
    "end": "918820"
  },
  {
    "text": "So let's say n bits\nwe're going to hash. And how many-- so let's\nsay in the location i,",
    "start": "918820",
    "end": "924880"
  },
  {
    "text": "this is going to be i and n. This is where we're\ngoing to be binding on, or where we want to\nbe extractable on.",
    "start": "924880",
    "end": "930960"
  },
  {
    "text": "And it outputs a hash\nkey and a trapdoor.",
    "start": "930960",
    "end": "937950"
  },
  {
    "text": "This trapdoor is\ngoing to be-- we're going to use it to\nextract from the hash the i-th location\nof what we hashed.",
    "start": "937950",
    "end": "946300"
  },
  {
    "text": "So there's a hash\nkey and a trapdoor. I know when Zhengzhong taught\nit, then he just said, hash key, and he put kind of the\ntrapdoor at the end.",
    "start": "946300",
    "end": "952779"
  },
  {
    "text": "So I'm going to write\nit with a trapdoor. So gen outputs a hash\nkey and a trapdoor.",
    "start": "952780",
    "end": "958959"
  },
  {
    "text": "And then you have\neval algorithm. It just takes the hash key,\nan input x and 0, 1 to the n,",
    "start": "958960",
    "end": "969190"
  },
  {
    "text": "and then outputs a hash value v. And then you have\nopen, where you",
    "start": "969190",
    "end": "977830"
  },
  {
    "text": "take a hash key, the\nx, and some index j that you want to open to.",
    "start": "977830",
    "end": "985180"
  },
  {
    "text": "And it outputs an\nopening rho or rho J. And this should be in 0, 1 to\nthe lambda, or poly lambda.",
    "start": "985180",
    "end": "995209"
  },
  {
    "text": "Similarly here, this\nshould be small-- 0, 1 to the lambda\nor poly lambda. ",
    "start": "995210",
    "end": "1005790"
  },
  {
    "text": "And then there's\nver that verifies. So ver takes a\nhash key, a value.",
    "start": "1005790",
    "end": "1012540"
  },
  {
    "text": "And now let's say\nyou want to say, I'm going to open location j.",
    "start": "1012540",
    "end": "1017710"
  },
  {
    "text": "Here's my b that opens. And here's the opening. And he checks.",
    "start": "1017710",
    "end": "1022839"
  },
  {
    "text": "Is it a valid opening or not? So it outputs 0 or 1.",
    "start": "1022840",
    "end": "1030099"
  },
  {
    "text": " And finally, so it consists\nof five PPT algorithms.",
    "start": "1030099",
    "end": "1039640"
  },
  {
    "text": "So first, you generate a\nhash key with a trapdoor. Then there's an eval algorithm\nthat given an n-bit string",
    "start": "1039640",
    "end": "1047680"
  },
  {
    "text": "outputs the hash value v-- short, succinct. Then there's open\nthat you can open,",
    "start": "1047680",
    "end": "1054560"
  },
  {
    "text": "given that you can generate an\nopening for a specific index j.",
    "start": "1054560",
    "end": "1060650"
  },
  {
    "text": "So you generate row j,\nwhich is an opening, and anybody can verify\nthe opening using",
    "start": "1060650",
    "end": "1067210"
  },
  {
    "text": "only the succinct hash value. So given a hash key, the\nsuccinct hash value, the index,",
    "start": "1067210",
    "end": "1073279"
  },
  {
    "text": "the bit, you can\nverify the opening. And finally, that's\nthe extract algorithm.",
    "start": "1073280",
    "end": "1078500"
  },
  {
    "text": " And it takes the trapdoor and\nthe value, and it outputs a bit.",
    "start": "1078500",
    "end": "1088910"
  },
  {
    "text": "And this bit should be xi.",
    "start": "1088910",
    "end": "1094290"
  },
  {
    "text": "So let me say, the properties--",
    "start": "1094290",
    "end": "1099450"
  },
  {
    "text": "so the first property\nis completeness.",
    "start": "1099450",
    "end": "1106760"
  },
  {
    "text": "That's kind of usually the\nstraightforward property, which,",
    "start": "1106760",
    "end": "1114592"
  },
  {
    "text": "essentially, says, look,\nif everybody's honest, you get what you expect,\nwhich means, one,",
    "start": "1114592",
    "end": "1119820"
  },
  {
    "text": "the verifier would\naccept the opening, and b, the extract will\noutput the i-th bit.",
    "start": "1119820",
    "end": "1125659"
  },
  {
    "text": "So it says that\nthe probability-- so for every x, for every\nlambda, for every n, which",
    "start": "1125660",
    "end": "1136250"
  },
  {
    "text": "is at most 2 to the\nlambda, we always restrict the length of what\nwe're hashing to be at most 2",
    "start": "1136250",
    "end": "1142130"
  },
  {
    "text": "to the lambda, and\nfor every i, we",
    "start": "1142130",
    "end": "1149400"
  },
  {
    "text": "say that the probability\nthat an open--",
    "start": "1149400",
    "end": "1159380"
  },
  {
    "text": "sorry-- that ver a hash\nkey generated from gen,",
    "start": "1159380",
    "end": "1165410"
  },
  {
    "text": "which is the eval, for every j. ",
    "start": "1165410",
    "end": "1174409"
  },
  {
    "text": "j rho generated by open.",
    "start": "1174410",
    "end": "1179880"
  },
  {
    "text": "It always outputs 1. It outputs 1, probability 1. And extract-- I'll\njust denote by--",
    "start": "1179880",
    "end": "1187710"
  },
  {
    "text": "extract, let me denote by just\nx for simplicity, given trapdoor",
    "start": "1187710",
    "end": "1192779"
  },
  {
    "text": "and the output xi. And this holds with\nprobability 1, where",
    "start": "1192780",
    "end": "1198270"
  },
  {
    "text": "the probability is over what? Hash key and trapdoor are\nin gen. So essentially--",
    "start": "1198270",
    "end": "1207202"
  },
  {
    "text": "I won't write it. But the hash key is\ngenerated by this. v is generated by this eval.",
    "start": "1207202",
    "end": "1213780"
  },
  {
    "text": "Rho-- or I'll call rho j-- is generated by open.",
    "start": "1213780",
    "end": "1219840"
  },
  {
    "text": "And this just says if\neverything was done correctly, the var always accepts,\nand the extract indeed",
    "start": "1219840",
    "end": "1227280"
  },
  {
    "text": "will extract the correct bit. So this is just if everybody\nfollows the protocol,",
    "start": "1227280",
    "end": "1232340"
  },
  {
    "text": "everything should\nbe as you expect. The soundness or binding,\nor the statistical binding,",
    "start": "1232340",
    "end": "1244940"
  },
  {
    "text": "I should say, somewhere-- or\nI can call the FSB somewhere statistically binding condition\nsays that on location--",
    "start": "1244940",
    "end": "1255299"
  },
  {
    "text": "Oh, before I go to FSB,\nthere's another property, which is index hiding.",
    "start": "1255300",
    "end": "1260325"
  },
  {
    "text": " Index hiding means that the\nhash key hides the index.",
    "start": "1260325",
    "end": "1270640"
  },
  {
    "text": "If you see just hash key,\nyou have no idea what i is. So it just says that\nfor every i and j,",
    "start": "1270640",
    "end": "1279440"
  },
  {
    "text": "if you look at hash\nkey generated by-- I don't know-- call it i,\nor hash key generated by j,",
    "start": "1279440",
    "end": "1290389"
  },
  {
    "text": "they're indistinguishable. This is just a notation to say\nhash key generated where here I",
    "start": "1290390",
    "end": "1297434"
  },
  {
    "text": "have i. And this is just\na notation saying this is a hash key generated\nby giving j to gen. So the hash",
    "start": "1297435",
    "end": "1307950"
  },
  {
    "text": "key hides the index for any i\nand j, the hash key generated",
    "start": "1307950",
    "end": "1313330"
  },
  {
    "text": "with i, the hash key generated\nwith j, they look the same. So that's the index hiding.",
    "start": "1313330",
    "end": "1319540"
  },
  {
    "text": "And finally is the\nbinding condition. And the binding\ncondition says that--",
    "start": "1319540",
    "end": "1327009"
  },
  {
    "text": "so the SSB, the Somewhere\nStatistical Binding, says that for the location i,\nthat we're binding on, even",
    "start": "1327010",
    "end": "1339340"
  },
  {
    "text": "an all powerful adversary\nthat is given hash key cannot",
    "start": "1339340",
    "end": "1345559"
  },
  {
    "text": "generate v and two different\nopenings to location i,",
    "start": "1345560",
    "end": "1351290"
  },
  {
    "text": "an opening to 0, an\nopening to 1 on location i. So on location i, you're\nreally [INAUDIBLE]",
    "start": "1351290",
    "end": "1359690"
  },
  {
    "text": "theoretically bounded. So again, even in an all\npowerful adversary that is given",
    "start": "1359690",
    "end": "1365855"
  },
  {
    "text": "the hash key with respect to i,\na location i cannot open both",
    "start": "1365855",
    "end": "1372140"
  },
  {
    "text": "to 0 and to 1, except with\nnegligible probability. So I hope to put everything on\nthat, but I'll add one here.",
    "start": "1372140",
    "end": "1383490"
  },
  {
    "text": "So I'll put here the\nbinding condition, so the SSB binding, the\nsomewhere statistically binding",
    "start": "1383490",
    "end": "1391210"
  },
  {
    "text": "says that for every all\npowerful adversary a,",
    "start": "1391210",
    "end": "1399450"
  },
  {
    "text": "the probability that a and hash\nkey, where hash key is generated",
    "start": "1399450",
    "end": "1408710"
  },
  {
    "text": "from gen 1 lambda n\nand i, the probability",
    "start": "1408710",
    "end": "1414950"
  },
  {
    "text": "that he outputs any value\nv and rho 0 and rho 1 such",
    "start": "1414950",
    "end": "1425760"
  },
  {
    "text": "that they would accept\nboth, such that for every b, both 0 and 1 there on hash\nkey vi b rho b outputs 1,",
    "start": "1425760",
    "end": "1440250"
  },
  {
    "text": "this is negligible.  So on index i, the\none that we're--",
    "start": "1440250",
    "end": "1450090"
  },
  {
    "text": "the hash came from that we're\nbinding on, he cannot open to both 0 and open to 1 in\nan accepting way with accept",
    "start": "1450090",
    "end": "1460122"
  },
  {
    "text": "negligible probability. Yeah. AUDIENCE: Does v have to\nbe generated from eval here or maybe [INAUDIBLE]? PROFESSOR: No, no. Good, good.",
    "start": "1460122",
    "end": "1465549"
  },
  {
    "text": "Great question. v is malicious. There is no-- a can\nbe-- so the adversary,",
    "start": "1465550",
    "end": "1472360"
  },
  {
    "text": "he's not following\nany guidelines. He's completely malicious. He generates v according\nto his own will,",
    "start": "1472360",
    "end": "1478740"
  },
  {
    "text": "generating rho 0, rho\n1 however he wants. And he's all powerful.",
    "start": "1478740",
    "end": "1484090"
  },
  {
    "text": "He still cannot generate two\naccepting openings for location",
    "start": "1484090",
    "end": "1490809"
  },
  {
    "text": "i. Yeah. AUDIENCE: I'm just going\nto follow-up on that. That's the only reason that\nwe don't get this for free",
    "start": "1490810",
    "end": "1497290"
  },
  {
    "text": "from extraction. PROFESSOR: Exactly. Good, good, good, very good. So let me just repeat\nwhat [INAUDIBLE] said.",
    "start": "1497290",
    "end": "1504340"
  },
  {
    "text": "Look, in extraction, we\nsaid that we're binding, completely binding, because\nguess what-- from v,",
    "start": "1504340",
    "end": "1509750"
  },
  {
    "text": "we can actually-- we can actually\nlearn the bit xi.",
    "start": "1509750",
    "end": "1515980"
  },
  {
    "text": "So xi is sitting there. So yeah, if you're honest\nxi is sitting there.",
    "start": "1515980",
    "end": "1521540"
  },
  {
    "text": "But if you're malicious, you\ncan do whatever you want. And maybe for a malicious\nv, maybe there's",
    "start": "1521540",
    "end": "1527230"
  },
  {
    "text": "no-- you can't extract\nanything from it. Yeah.",
    "start": "1527230",
    "end": "1532389"
  },
  {
    "text": "AUDIENCE: Is it the same\nas saying the probability there exists v [INAUDIBLE]? ",
    "start": "1532390",
    "end": "1538672"
  },
  {
    "text": "PROFESSOR: Right. Good, good, good, very good. Yes, yes, yes. This is the same as saying\nthat there exists a v rho",
    "start": "1538672",
    "end": "1547570"
  },
  {
    "text": "0 for any hash-- for almost all hash\nkeys, the probability",
    "start": "1547570",
    "end": "1552970"
  },
  {
    "text": "that there exists\nv rho 0 rho 1 is 0. So they don't exist.",
    "start": "1552970",
    "end": "1558580"
  },
  {
    "text": "For almost all hash keys, this\ntriplet that satisfies this does not exist.",
    "start": "1558580",
    "end": "1564020"
  },
  {
    "text": "Yes. Yeah. Very good. Any other questions?",
    "start": "1564020",
    "end": "1571650"
  },
  {
    "text": "So the plan for today is to show\nhow to use these two building blocks to get a SNARG.",
    "start": "1571650",
    "end": "1578030"
  },
  {
    "text": "But before I do that, I\nwant to say a few more-- first, I want to give you time\nto digest and to ask questions.",
    "start": "1578030",
    "end": "1585728"
  },
  {
    "text": "Also, I want to say\na few more things about these two primitives. ",
    "start": "1585728",
    "end": "1591680"
  },
  {
    "text": "Any questions before I-- OK. So one thing I\nwant to mention is",
    "start": "1591680",
    "end": "1598610"
  },
  {
    "text": "even though the binding\ncondition was only an i, I said only on this\nspecific i, I promise you,",
    "start": "1598610",
    "end": "1607179"
  },
  {
    "text": "you can't open two\ndifferent ways. What about the other i? What about j? j can address to open\ntwo different ways?",
    "start": "1607180",
    "end": "1613144"
  },
  {
    "text": " And the answer is no.",
    "start": "1613145",
    "end": "1618280"
  },
  {
    "text": "Actually, he can't. And we don't need to\nstate that explicitly. From the FSB and\nthe index hiding,",
    "start": "1618280",
    "end": "1626170"
  },
  {
    "text": "I want to argue already we\ncan conclude that a poly size",
    "start": "1626170",
    "end": "1631230"
  },
  {
    "text": "adversary cannot open a poly\nsize-- not all powerful, but a poly size adversary\ncannot generate v any index j,",
    "start": "1631230",
    "end": "1642420"
  },
  {
    "text": "and two openings that\nwill be accepted, except non-zero probability.",
    "start": "1642420",
    "end": "1648910"
  },
  {
    "text": "So in other words, I'm\nsaying binding holds-- this local binding\nholds for every j.",
    "start": "1648910",
    "end": "1654280"
  },
  {
    "text": "Not against all powerful,\nbut for any PPT or poly size A, we get this binding\ncondition for every j.",
    "start": "1654280",
    "end": "1663049"
  },
  {
    "text": " Why? ",
    "start": "1663050",
    "end": "1670507"
  },
  {
    "text": "AUDIENCE: Is it because of the\nindex hiding property where you cannot distinguish [INAUDIBLE]\nindex is higher or something",
    "start": "1670507",
    "end": "1676270"
  },
  {
    "text": "else then? PROFESSOR: Precisely. So the reason is this A, he\ndoesn't know if hash key came",
    "start": "1676270",
    "end": "1681789"
  },
  {
    "text": "from index i or index j. They're indistinguishable. So now if he can\ngenerate it for index j,",
    "start": "1681790",
    "end": "1689920"
  },
  {
    "text": "then he should be able to\ngenerate it also for index-- so let's replace\nthis with index j. He can't distinguish.",
    "start": "1689920",
    "end": "1695240"
  },
  {
    "text": "So he'll follow the same\nj again at some point. And there'll be a contradiction. So because he has no\nidea what's sitting here,",
    "start": "1695240",
    "end": "1702540"
  },
  {
    "text": "the fact that he cannot\ndo it for that index i, even information theoretically\nmeans he can't do it for any",
    "start": "1702540",
    "end": "1708380"
  },
  {
    "text": "other index. Yeah. AUDIENCE: So this index had\nto get really [INAUDIBLE]. PROFESSOR: No, this\nis [INAUDIBLE].",
    "start": "1708380",
    "end": "1713430"
  },
  {
    "text": "It's computational, actually. AUDIENCE: [INAUDIBLE] PROFESSOR: Oh, good, good, good. So the corollary is,\nfor any poly size,",
    "start": "1713430",
    "end": "1724600"
  },
  {
    "text": "the corollary says\nthat only any poly size A, the probability\nthat A on hash key,",
    "start": "1724600",
    "end": "1732500"
  },
  {
    "text": "let's say from i, same hash key,\noutputs v or v, j rho 0 and rho",
    "start": "1732500",
    "end": "1739930"
  },
  {
    "text": "1, such that the same\nthing here holds. Namely, for every b\nhe generates accepting",
    "start": "1739930",
    "end": "1746890"
  },
  {
    "text": "answers for both 0\nand 1 is negligible.",
    "start": "1746890",
    "end": "1752340"
  },
  {
    "text": "Because if there\nexists some j that he does that for\nnon-negligible probability,",
    "start": "1752340",
    "end": "1758600"
  },
  {
    "text": "then let's replace hk with\nhash key generating that's binding on this, that's actually\nstatistically binding on this j.",
    "start": "1758600",
    "end": "1766960"
  },
  {
    "text": "A can't distinguish. So we'll still do\nthis for that j with some non-negligible\nprobability.",
    "start": "1766960",
    "end": "1772450"
  },
  {
    "text": "And that he cannot do with\nthat information theoretically. So that's why we get, like--",
    "start": "1772450",
    "end": "1777880"
  },
  {
    "text": "because index hiding,\nactually, just getting statistically binding\non one of them is good enough.",
    "start": "1777880",
    "end": "1783730"
  },
  {
    "text": "It will imply computational\nbinding on all the rest. Another thing I\nwant to mention--",
    "start": "1783730",
    "end": "1790360"
  },
  {
    "text": "and this we'll use, actually,\nin our construction today-- I said that the hash is\nbinding on one location, on xi.",
    "start": "1790360",
    "end": "1799110"
  },
  {
    "text": "We can get it binding, actually,\non l locations, not just one. How do I get it\nbinding on l locations?",
    "start": "1799110",
    "end": "1807250"
  },
  {
    "text": "I'm going to just generate\nhk1, hk2, up to hkl, where the first l is\nbinding, and the first--",
    "start": "1807250",
    "end": "1813400"
  },
  {
    "text": "I'm just going to\ngenerate l hashes. I'm going to ask the-- generate\nthe eval on all these hashes.",
    "start": "1813400",
    "end": "1821100"
  },
  {
    "text": "So the hash value now\nis going to be v1 up to vl, where the\nhonest eval is going",
    "start": "1821100",
    "end": "1827780"
  },
  {
    "text": "to take the x you\nwant to hash and do eval hk1 of x, eval hk2 of x.",
    "start": "1827780",
    "end": "1834500"
  },
  {
    "text": "So just hash the same\nx with all l keys. So now the hash value\ngrows by a factor of l.",
    "start": "1834500",
    "end": "1843620"
  },
  {
    "text": "And then when you open a\ncertain bit, a certain location, you'll generate\nall the openings.",
    "start": "1843620",
    "end": "1849529"
  },
  {
    "text": "So just do the same\nthing kind of l times, just repeat it l times.",
    "start": "1849530",
    "end": "1854670"
  },
  {
    "text": "And now what do\nwe have from that? If you-- by repeating l\ntimes, so let me write it.",
    "start": "1854670",
    "end": "1860790"
  },
  {
    "start": "1860790",
    "end": "1869990"
  },
  {
    "text": "Let me erase the corollary. So I'll have room. ",
    "start": "1869990",
    "end": "1875210"
  },
  {
    "text": "So note, remark, by\nrepeating l times,",
    "start": "1875210",
    "end": "1893090"
  },
  {
    "text": "we get a somewhere\nextractable hash that's",
    "start": "1893090",
    "end": "1898250"
  },
  {
    "text": "extractable on l locations.",
    "start": "1898250",
    "end": "1904756"
  },
  {
    "text": " And moreover, another property\nthat we're going to need--",
    "start": "1904756",
    "end": "1913340"
  },
  {
    "text": "even if I, let's say, gave\nyou the trapdoor corresponding",
    "start": "1913340",
    "end": "1918710"
  },
  {
    "text": "to some of the l-- not all\nthe l locations-- let's say I give you trapdoor 1,\ntrapdoor 2, and trapdoor 3,",
    "start": "1918710",
    "end": "1924950"
  },
  {
    "text": "still, what's the\nlocation hidden in hk4?",
    "start": "1924950",
    "end": "1930440"
  },
  {
    "text": "You have no idea what it is. So even if I reveal\nsome of the trapdoors, the other indices remain hidden.",
    "start": "1930440",
    "end": "1939650"
  },
  {
    "text": "And we're going to\nuse this property. So again, if we repeat l times,\nwe're binding on l locations.",
    "start": "1939650",
    "end": "1949180"
  },
  {
    "text": "But even if I dest-- I kind of reveal the\ntrapdoor corresponding to--",
    "start": "1949180",
    "end": "1954309"
  },
  {
    "text": "I don't know-- a location to\na couple locations, the rest of the-- so of course, if\nI give you the trapdoor,",
    "start": "1954310",
    "end": "1959990"
  },
  {
    "text": "then all bets are off. You learn everything. You learn the i. You learn everything. And the trapdoor\nor trapdoors are",
    "start": "1959990",
    "end": "1966730"
  },
  {
    "text": "such that once I give you the\ntrapdoor, you learn the index. You learn everything. But the other indices that do\nnot correspond to the trapdoors",
    "start": "1966730",
    "end": "1977770"
  },
  {
    "text": "that I gave are still\ncompletely hidden, because I did them\ncompletely independent.",
    "start": "1977770",
    "end": "1983535"
  },
  {
    "text": "And this is\nsomething we're going to use when we're going\nto construct our SNARGs. ",
    "start": "1983535",
    "end": "1989380"
  },
  {
    "text": "So that's one thing\nwe're going to use. I want to mention a little-- I want to talk a little\nbit about the construction,",
    "start": "1989380",
    "end": "1996380"
  },
  {
    "text": "because I think maybe in\nZhengzhong lecture last time, this was missed a little,\nbecause he said it,",
    "start": "1996380",
    "end": "2002995"
  },
  {
    "text": "I think, a little too fast. So I want to say a few words\nabout the construction. But before I talk\nabout the construction,",
    "start": "2002995",
    "end": "2009130"
  },
  {
    "text": "I want to say one more\nproperty about the BARGs that we're going to also use. So what we're going\nto use about the BARG,",
    "start": "2009130",
    "end": "2015970"
  },
  {
    "text": "so we said that\nthese gen P and V are polynomial time algorithm,\nprobabilistic polynomial time",
    "start": "2015970",
    "end": "2022320"
  },
  {
    "text": "algorithms. In particular, V, I want to talk\nabout V. V is a polynomial time algorithm.",
    "start": "2022320",
    "end": "2027570"
  },
  {
    "text": "But V's input is really large. It has x1 up to xk. So polynomial time means it\nruns at least in time poly k.",
    "start": "2027570",
    "end": "2034620"
  },
  {
    "text": "It needs to read its input. However, it turns out\nthat the BARGs we have--",
    "start": "2034620",
    "end": "2040770"
  },
  {
    "text": "this is what Zhengzhong called\na BARG for index languages-- if there exists a\nsuccinct description",
    "start": "2040770",
    "end": "2047340"
  },
  {
    "text": "of these x1 up to\nxk, the verifier only needs to run in time that\ndepends on the description.",
    "start": "2047340",
    "end": "2054339"
  },
  {
    "text": "In other words, we can replace-- so if-- I didn't bring my--",
    "start": "2054340",
    "end": "2064349"
  },
  {
    "text": "I forgot to bring\nmy colorful chalk. Sorry. But at least you have cookies.",
    "start": "2064350",
    "end": "2070270"
  },
  {
    "text": "I mean, what would you prefer,\ncolorful chalks or cookies? So if you can\ngenerate these x1 up",
    "start": "2070270",
    "end": "2078780"
  },
  {
    "text": "to xk, if there's kind of\na succinct description, then the verify runs\nin polynomial time",
    "start": "2078780",
    "end": "2085610"
  },
  {
    "text": "in the description. So if, let's say, there\nexists some machine M",
    "start": "2085610",
    "end": "2093419"
  },
  {
    "text": "such that for\nevery i, xi is just",
    "start": "2093420",
    "end": "2102339"
  },
  {
    "text": "kind of the Turing\nmachine on input i.",
    "start": "2102340",
    "end": "2107600"
  },
  {
    "text": "So this kind of machine, you\nshould think this algorithm, you should think it has kind of\na succinct description of all",
    "start": "2107600",
    "end": "2113980"
  },
  {
    "text": "the x1 up to xk. And you give him i. It always gives you the xi.",
    "start": "2113980",
    "end": "2118990"
  },
  {
    "text": "If this is the case, then V the\nruntime, or I say time of V,",
    "start": "2118990",
    "end": "2132150"
  },
  {
    "text": "it grows with the size\nof m as opposed to k.",
    "start": "2132150",
    "end": "2139730"
  },
  {
    "text": "So it grows with m and\ndoes not grow with k.",
    "start": "2139730",
    "end": "2149090"
  },
  {
    "text": "So of course, if you\ngive him x1 up to xk, he needs to read his input. His runtime grows with k. But if you can generate\nin a succinct way,",
    "start": "2149090",
    "end": "2156710"
  },
  {
    "text": "then he doesn't\nneed to grow with k. So you should-- another\nway to think about it,",
    "start": "2156710",
    "end": "2163410"
  },
  {
    "text": "you can think of\nxi as m comma i.",
    "start": "2163410",
    "end": "2169940"
  },
  {
    "text": "And the instance just says\nif you run m on i, xi, then xi is in the language.",
    "start": "2169940",
    "end": "2175328"
  },
  {
    "text": "And that's why it's called\nindex language, because it's like there's an index. Yeah. AUDIENCE: So this means that\nthere's still a log k dependence",
    "start": "2175328",
    "end": "2181640"
  },
  {
    "text": "in V's runtime, right? PROFESSOR: Yeah, yeah, yeah. There is a log k\ndependence, 100%. Sorry. Yeah, yeah. It just means-- yeah, exactly.",
    "start": "2181640",
    "end": "2187230"
  },
  {
    "text": "That runs in time log k. Actually, yeah, you have\ni here, which is log k. So there is a log k dependence.",
    "start": "2187230",
    "end": "2193920"
  },
  {
    "text": "Yeah. AUDIENCE: [INAUDIBLE] the CRS\nis sublinear in k as well. Is that true?",
    "start": "2193920",
    "end": "2199859"
  },
  {
    "text": "PROFESSOR: The length of\nthe CRS in general, you want it to be sublinear in k. In the SNARG construction,\nit's poly log k.",
    "start": "2199860",
    "end": "2208260"
  },
  {
    "text": "Yes. But when we'll\ntalk about SNARGs-- so in the BARG construction,\nwe have the CRS.",
    "start": "2208260",
    "end": "2215315"
  },
  {
    "text": " Most of our construction in\nthe CRS is of size poly log k.",
    "start": "2215315",
    "end": "2222040"
  },
  {
    "text": "The one under LWE\nthat Zhengzhong showed is of size poly log k.",
    "start": "2222040",
    "end": "2228582"
  },
  {
    "text": "AUDIENCE: So I know\nthat if we have a BARG that satisfies\nthese properties and is a more tractable\nhash function,",
    "start": "2228582",
    "end": "2234780"
  },
  {
    "text": "I guess you can always kind of\nadd the property that you want here of being able to extract\nthe witness from the BARG group",
    "start": "2234780",
    "end": "2241770"
  },
  {
    "text": "itself. Is there a world--\nlike, do we have any BARGs without\nthe assumptions that we need for somewhere\nextractable hash functions?",
    "start": "2241770",
    "end": "2249382"
  },
  {
    "text": "PROFESSOR: You're\nasking, is there a BARG for which we don't\nknow how to extract.",
    "start": "2249383",
    "end": "2254687"
  },
  {
    "text": "AUDIENCE: Yes. PROFESSOR: Is that\nwhat you're asking? OK, OK. So let me-- you're\nasking a great question. Let me kind of--",
    "start": "2254687",
    "end": "2260015"
  },
  {
    "text": " so when we said--",
    "start": "2260015",
    "end": "2265819"
  },
  {
    "text": "the soundness condition just\nsays that a cheating prover cannot cheat--",
    "start": "2265820",
    "end": "2273330"
  },
  {
    "text": "cannot generate x1 up\nto xk, that one of them, the i-th is not in the\nlanguage, and yet convince.",
    "start": "2273330",
    "end": "2278480"
  },
  {
    "text": "Oftentime, also in our SNARG,\nin our SNARG construction, we want something stronger.",
    "start": "2278480",
    "end": "2284430"
  },
  {
    "text": "What we want is that I can\nactually extract a witness from this cheating prover.",
    "start": "2284430",
    "end": "2291380"
  },
  {
    "text": "So I want to say\nthis cheating prover, I can't extract\nall the witnesses.",
    "start": "2291380",
    "end": "2296720"
  },
  {
    "text": "But for some i, I can generate\na CRS that looks like--",
    "start": "2296720",
    "end": "2303619"
  },
  {
    "text": "just standard CRS-- but I can\nchange the distribution of a CRS to be such that using some\ntrapdoor about the CRS,",
    "start": "2303620",
    "end": "2311640"
  },
  {
    "text": "I can actually extract from\nP star a witness for xi.",
    "start": "2311640",
    "end": "2316662"
  },
  {
    "text": "And once I extract a\nwitness, of course, it has to be in\nthe language, xi. I argue not only\nit's in the language. I can even find-- get\na witness from him.",
    "start": "2316663",
    "end": "2324260"
  },
  {
    "text": "So that's called\nsomewhere-- this is a somewhere extractable BARG. Now, what Ali was saying is\nthat the BARG that Zhengzhong",
    "start": "2324260",
    "end": "2333320"
  },
  {
    "text": "showed you last time had the\nsomewhere extractable property. It was extractable.",
    "start": "2333320",
    "end": "2338880"
  },
  {
    "text": "Actually, let me\ntell you, we also will need BARGs that are\nsomewhere extractable. I didn't write that here.",
    "start": "2338880",
    "end": "2344130"
  },
  {
    "text": "Why didn't I write it here? And this is where the n-- AUDIENCE: [INAUDIBLE] PROFESSOR: Exactly. The answer is any BARG, we can\nmake it somewhere extractable",
    "start": "2344130",
    "end": "2352530"
  },
  {
    "text": "by just adding a hash. So we can kind of-- we don't need to\nworry about somewhere",
    "start": "2352530",
    "end": "2358440"
  },
  {
    "text": "extractability of a BARG,\nbecause what we can always do is add--",
    "start": "2358440",
    "end": "2364470"
  },
  {
    "text": "put a hash of all the witnesses. If you have a somewhere\nextractable hash, if you have a somewhere\nextractable hash,",
    "start": "2364470",
    "end": "2370630"
  },
  {
    "text": "you can tell the verifier-- put a somewhere extractable\nhash of all your witnesses.",
    "start": "2370630",
    "end": "2376060"
  },
  {
    "text": "So take witness 1, witness 2,\nwitness 3, up to witness k, hash them, and in the\nanalysis, just jumping ahead,",
    "start": "2376060",
    "end": "2383523"
  },
  {
    "text": "we're going to be extractable on\nall the locations corresponding to witness i. And now we're\ngoing to tell him--",
    "start": "2383523",
    "end": "2389800"
  },
  {
    "text": "we're going to say,\ngive me a BARG. The BARG is not for the\noriginal language l.",
    "start": "2389800",
    "end": "2395730"
  },
  {
    "text": "The BARG says-- the BARG that\nxi is in the language now says there is an opening\nfor the hash value",
    "start": "2395730",
    "end": "2404010"
  },
  {
    "text": "that [INAUDIBLE] the\nlocations correspond to wi. If you opened, you would\nget a valid witness.",
    "start": "2404010",
    "end": "2409800"
  },
  {
    "text": "BARG that language. So instead of BARGing\nthe original language l, BARG a little bit kind\nof upgraded language",
    "start": "2409800",
    "end": "2417300"
  },
  {
    "text": "that, again, says there's\na-- so the verifier will give you a hash\nof all the witnesses.",
    "start": "2417300",
    "end": "2423660"
  },
  {
    "text": "And it will prove-- for every i, he won't prove\njust excising the language.",
    "start": "2423660",
    "end": "2428820"
  },
  {
    "text": "He's going to prove for every\ni, I have openings corresponding to witness i.",
    "start": "2428820",
    "end": "2435750"
  },
  {
    "text": "So the eight openings are valid. And BWI is in the language l. That's the BARG he's\ngoing to give you.",
    "start": "2435750",
    "end": "2442950"
  },
  {
    "text": "And now the fact that\nyou're in the language means that it must be that\nif you take the trapdoor",
    "start": "2442950",
    "end": "2450960"
  },
  {
    "text": "and look into it, it\nmust be by soundness. It must be. That's what's sitting there,\nbecause you're binding.",
    "start": "2450960",
    "end": "2457220"
  },
  {
    "text": "If you're going to be\nbinding on that part, that's what's sitting there. It must be the correct witness.",
    "start": "2457220",
    "end": "2462770"
  },
  {
    "text": "So that's kind of\nwhy, actually, we don't need to construct\nBARGs with extractability.",
    "start": "2462770",
    "end": "2471119"
  },
  {
    "text": "We can always attach a somewhere\nextractable hash to them. AUDIENCE: Yeah. I was actually wondering\nsomething about assumptions,.",
    "start": "2471120",
    "end": "2477590"
  },
  {
    "text": "Do we have any constructions\nof BARGs from assumptions weaker than those needed\nto construct a somewhere extractable hash?",
    "start": "2477590",
    "end": "2483260"
  },
  {
    "text": "PROFESSOR: I see. AUDIENCE: Which would then\nmake it, I guess, interesting. PROFESSOR: I see\nwhat you're saying. I see. AUDIENCE: I don't [INAUDIBLE].",
    "start": "2483260",
    "end": "2488930"
  },
  {
    "text": "PROFESSOR: Yeah,\nI don't think so. I don't think so. AUDIENCE: [INAUDIBLE]\nprobably shouldn't. ",
    "start": "2488930",
    "end": "2496543"
  },
  {
    "text": "PROFESSOR: Yeah. I don't know how\nto construct a BARG from an assumption for which\nI don't know how to construct a somewhere extractable hash.",
    "start": "2496543",
    "end": "2502560"
  },
  {
    "text": "Yeah. OK. Any other questions? ",
    "start": "2502560",
    "end": "2511240"
  },
  {
    "text": "So I want to get to the\nconstruction of the SNARG. But before I do so,\nI do want to spend",
    "start": "2511240",
    "end": "2518250"
  },
  {
    "text": "a little more time on the\nsomewhere extractable hash and say a little bit about\nthe way we construct it,",
    "start": "2518250",
    "end": "2523270"
  },
  {
    "text": "because I just want to make\nsure that you didn't miss",
    "start": "2523270",
    "end": "2531770"
  },
  {
    "text": "a part from last\nlecture that I think was a bit said too succinctly. So the high level idea of\nhow you construct a somewhere",
    "start": "2531770",
    "end": "2539840"
  },
  {
    "text": "extractable hash is using\nfully homomorphic encryption.",
    "start": "2539840",
    "end": "2545540"
  },
  {
    "text": "So I don't want to get into-- I don't want to recall\ntoo much the definition, but I'll give you a high level.",
    "start": "2545540",
    "end": "2551310"
  },
  {
    "text": "So the basic idea,\nwhich doesn't work-- let me first tell you the\nidea that doesn't work,",
    "start": "2551310",
    "end": "2556430"
  },
  {
    "text": "because that's very natural. And I think maybe that's what\nyou got from last lecture. So the basic idea that doesn't\nwork is to say that gen--",
    "start": "2556430",
    "end": "2566329"
  },
  {
    "start": "2566330",
    "end": "2572740"
  },
  {
    "text": "well, just the output,\nencryption, so we'll",
    "start": "2572740",
    "end": "2578630"
  },
  {
    "text": "give you a public key\nand encryption of i",
    "start": "2578630",
    "end": "2583819"
  },
  {
    "text": "with this public key.  And the trapdoor, that's\ngoing to be the hash key.",
    "start": "2583820",
    "end": "2592250"
  },
  {
    "text": "And the trapdoor is going\nto be the secret key. ",
    "start": "2592250",
    "end": "2597270"
  },
  {
    "text": "So just the hash key is going to\nbe an encryption of the index. Now, I want x1 up to xn.",
    "start": "2597270",
    "end": "2608280"
  },
  {
    "text": "Let me assume for\nsimplicity that N-- suppose N is a power of 2.",
    "start": "2608280",
    "end": "2618660"
  },
  {
    "text": "Otherwise, you know, pad. So let's say big\nN is a power of 2. So it's some 2 to the small n.",
    "start": "2618660",
    "end": "2624750"
  },
  {
    "text": "Now, here's what\nI'm going to do. Let me-- so when I\nsay encryption of i, let's think of it as\nbit by bit encryption.",
    "start": "2624750",
    "end": "2631360"
  },
  {
    "text": "So it's encryption of i1\nup to encryption of in.",
    "start": "2631360",
    "end": "2638520"
  },
  {
    "text": " And now the idea is--",
    "start": "2638520",
    "end": "2643615"
  },
  {
    "text": " what we'll do is for each pair--",
    "start": "2643615",
    "end": "2651143"
  },
  {
    "text": " so I'm going to do\nkind of a Merkle hash. And for each pair\nI'm going to encrypt,",
    "start": "2651143",
    "end": "2658720"
  },
  {
    "text": "so I'm going to do this Merkle\nhash, where for each node I'm going to associate\na ciphertext.",
    "start": "2658720",
    "end": "2664510"
  },
  {
    "text": "And the output is going to be\nthe ciphertext of the root. That's my hash value. The hash value is going to\nbe a ciphertext of the root.",
    "start": "2664510",
    "end": "2670900"
  },
  {
    "text": "And this ciphertext\ncan be a ciphertext. It's an re-encryption of xi.",
    "start": "2670900",
    "end": "2676270"
  },
  {
    "text": "How do I associate? So of course, I can\ncompute encryption of xi. This is a homomorphic\nencryption. Given x and encryption of\ni, I can do computation",
    "start": "2676270",
    "end": "2684130"
  },
  {
    "text": "under the hood. So I can compute\nencryption of x sub i. So because this is a fully\nhomomorphic encryption,",
    "start": "2684130",
    "end": "2692620"
  },
  {
    "text": "given x and\nencryption of i, I can",
    "start": "2692620",
    "end": "2698680"
  },
  {
    "text": "compute encryption of x sub i. Of course, there's public keys.",
    "start": "2698680",
    "end": "2704090"
  },
  {
    "text": "I'm omitting them for\nsuccinctness of notation. This is because I can\ncompute under the hood.",
    "start": "2704090",
    "end": "2711670"
  },
  {
    "text": "The value of the route is\ngoing to be encryption of xi. But what kind of encryption?",
    "start": "2711670",
    "end": "2717490"
  },
  {
    "text": "It's not any-- so let me\ntell you exactly how we compute this encryption. So the idea would be--",
    "start": "2717490",
    "end": "2725170"
  },
  {
    "text": "and not only that,\nhow do I open? I want to do a local opening. So the way I'm going\nto do it is as follows.",
    "start": "2725170",
    "end": "2732460"
  },
  {
    "text": "For each pair, I'm going to\nencrypt only one of them. I'm going to either put\nhere encryption of x1",
    "start": "2732460",
    "end": "2738370"
  },
  {
    "text": "or encryption of x2. Which one? Depending on i1. So let's start with i1.",
    "start": "2738370",
    "end": "2743690"
  },
  {
    "text": "If i1 is 0, I'm going\nto-- so I'm going to, let's say, choose x1.",
    "start": "2743690",
    "end": "2749240"
  },
  {
    "text": "If i1 is 1, I'm\ngoing to choose x2. I'm going to choose the\neven-odd, so that the output will be the correct one.",
    "start": "2749240",
    "end": "2755950"
  },
  {
    "text": "So I'm going to-- the i1, depending\non encryption of i1,",
    "start": "2755950",
    "end": "2761320"
  },
  {
    "text": "that's going to tell me\nwhich one to put here. 0, I put on the left, like\nthe left children, or 1,",
    "start": "2761320",
    "end": "2768490"
  },
  {
    "text": "I put the right children. And then I do the\nexact same thing. Given these, whether I\nchoose the left or right",
    "start": "2768490",
    "end": "2775340"
  },
  {
    "text": "depends on the encryption of i2. If i2 is 0, I choose the left. If i2 is 1, I choose the\nright, and so on and so forth.",
    "start": "2775340",
    "end": "2783470"
  },
  {
    "text": "That's the idea. AUDIENCE: Is this like an OT? PROFESSOR: It's like an OT.",
    "start": "2783470",
    "end": "2789350"
  },
  {
    "text": "It's really like an OT. Exactly, exactly. I didn't define what OT is,\nbut it's exactly like an OT. ",
    "start": "2789350",
    "end": "2796940"
  },
  {
    "text": "This does not work.  It almost works, but\nit does not work.",
    "start": "2796940",
    "end": "2804480"
  },
  {
    "text": "So let me tell you why it\nseems like it should work. And then I just want to\nmention the subtlety here.",
    "start": "2804480",
    "end": "2815240"
  },
  {
    "text": "So the reason-- so first, how do\nyou generate the local opening? Well, you check-- so if you\nwant to open xi, I'll tell you,",
    "start": "2815240",
    "end": "2824390"
  },
  {
    "text": "give me x1 and x2 so I can\ncheck that this is correct. And then give me the\nhash in ciphertext here.",
    "start": "2824390",
    "end": "2831910"
  },
  {
    "text": "And I can check that\nthis is correct, because each ciphertext\nis some FHE valuation that",
    "start": "2831910",
    "end": "2840670"
  },
  {
    "text": "depends on the two children\nand the hash key, which is encryption.",
    "start": "2840670",
    "end": "2846860"
  },
  {
    "text": "So in layer J, it depends\non the two children",
    "start": "2846860",
    "end": "2852310"
  },
  {
    "text": "and encryption of ij. Each time the node--",
    "start": "2852310",
    "end": "2859339"
  },
  {
    "text": "the ciphertext\ncorresponding to some node is a deterministic function of\nthe ciphertext corresponding",
    "start": "2859340",
    "end": "2868070"
  },
  {
    "text": "to the children, and the hash\nkey corresponding to that level. So encryption of, let's\nsay, ij, because, remember,",
    "start": "2868070",
    "end": "2877430"
  },
  {
    "text": "if I'm, let's say, in level\n2, I have here a ciphertext. I have a 1 in ciphertext 2.",
    "start": "2877430",
    "end": "2883290"
  },
  {
    "text": "Then I do-- the way I compute\nthe parent ciphertext is just",
    "start": "2883290",
    "end": "2892970"
  },
  {
    "text": "a homomorphic\nevaluation that takes-- if i2 is 0, it\ntakes ciphertext 2.",
    "start": "2892970",
    "end": "2902900"
  },
  {
    "text": "If i2 is 1, it takes-- I'm sorry. So if it's a 1, otherwise,\nit takes ciphertext 2.",
    "start": "2902900",
    "end": "2908430"
  },
  {
    "text": "So this is really just a\ndeterministic homomorphic evaluation. And so that's how I open.",
    "start": "2908430",
    "end": "2913530"
  },
  {
    "text": "I just open all the\nrelevant ciphertext and the verifier will check that\nthe homomorphic evaluation was",
    "start": "2913530",
    "end": "2919020"
  },
  {
    "text": "done correctly. So you can local opening-- you can do local opening,\nbut it's not binding.",
    "start": "2919020",
    "end": "2924930"
  },
  {
    "text": "Or I don't know how to\nprove that it's binding is the problem. And probably, you\ncan find a weird FHE",
    "start": "2924930",
    "end": "2931700"
  },
  {
    "text": "for which it's not binding. I don't know-- maybe for natural\nconstructions, it is binding. I don't know. I don't know how to prove it.",
    "start": "2931700",
    "end": "2937388"
  },
  {
    "text": "But there's a\nproblem with binding. And the problem with binding is\nthat a cheating-- so it seems",
    "start": "2937388",
    "end": "2943400"
  },
  {
    "text": "like it should be\nbinding because, look, here it's sitting\nencryption of xi. But the thing is the\nreason why it's not",
    "start": "2943400",
    "end": "2951160"
  },
  {
    "text": "binding is because a\nmalicious adversary,",
    "start": "2951160",
    "end": "2958470"
  },
  {
    "text": "he may give ciphertexts\nthat are garbage-- are completely garbage.",
    "start": "2958470",
    "end": "2963540"
  },
  {
    "text": "They don't actually-- they're\nnot legal ciphertexts. And if he gives ciphertexts\nthat are garbage,",
    "start": "2963540",
    "end": "2969390"
  },
  {
    "text": "I don't know why would\nthere be binding. So I mean, maybe\nextract doesn't work.",
    "start": "2969390",
    "end": "2976560"
  },
  {
    "text": "Here's me. I'm a malicious person. i-- nothing-- no, you\ncan't extract anything.",
    "start": "2976560",
    "end": "2982300"
  },
  {
    "text": "I just want to ruin the binding. My whole goal is to-- kind of ruin binding here.",
    "start": "2982300",
    "end": "2989130"
  },
  {
    "text": "I'm going to give you v that\ndoesn't encrypt anything. It's a junk v. And I'm going to\nopen it in two different ways.",
    "start": "2989130",
    "end": "2996090"
  },
  {
    "text": "Maybe I can generate a v.\nLike I call it ciphertext,",
    "start": "2996090",
    "end": "3002040"
  },
  {
    "text": "but it's just a bunch of\nbits that have no meaning-- cannot be decrypted at all. And maybe I can somehow\ngenerate valid openings.",
    "start": "3002040",
    "end": "3010470"
  },
  {
    "text": "And we don't know how to\nargue that you cannot do that. So in order to\nactually get soundness,",
    "start": "3010470",
    "end": "3017820"
  },
  {
    "text": "I need to make sure that\nthe things are well-formed, that these are actually\nvalid ciphertexts,",
    "start": "3017820",
    "end": "3023730"
  },
  {
    "text": "or what I open to is\na valid ciphertext. And the way we get\nthis is by making",
    "start": "3023730",
    "end": "3032580"
  },
  {
    "text": "this a little more cumbersome. So the way we get\nthis is we actually",
    "start": "3032580",
    "end": "3038400"
  },
  {
    "text": "don't use one public key. We use small and public keys. So for each layer, we'll\nuse a different public key.",
    "start": "3038400",
    "end": "3046840"
  },
  {
    "text": "And what we encrypt-- so what we do is we have public\nkey j for j goes from 1 to n.",
    "start": "3046840",
    "end": "3058950"
  },
  {
    "text": "So we have n public keys. And with public key\nj, we encrypt ij.",
    "start": "3058950",
    "end": "3067730"
  },
  {
    "text": "But also, so when i has i1\nup to in, we encrypt ij.",
    "start": "3067730",
    "end": "3073400"
  },
  {
    "text": "But we also encrypt skj minus 1.",
    "start": "3073400",
    "end": "3078559"
  },
  {
    "text": "I want to have the decryption. It's important to me to\nhave the decryption key.",
    "start": "3078560",
    "end": "3085180"
  },
  {
    "text": "Now, so the important bit is\nthe homomorphic evaluation",
    "start": "3085180",
    "end": "3091930"
  },
  {
    "text": "I'm doing here, I need\nto know the secret key, because I'm not\njust going to say--",
    "start": "3091930",
    "end": "3097750"
  },
  {
    "text": "before I said, what's going\non underneath under the hood? I'm saying, look, I have i1.",
    "start": "3097750",
    "end": "3103242"
  },
  {
    "text": "I have two ciphertexts. Give me one of them. No, no, no, no. What I want to do is to say\nthe following under the hood.",
    "start": "3103242",
    "end": "3110230"
  },
  {
    "text": "Decrypt this. Decrypt this. ",
    "start": "3110230",
    "end": "3117050"
  },
  {
    "text": "And give me only\nthe relevant one. So that even if this\ndoes not decrypt--",
    "start": "3117050",
    "end": "3124260"
  },
  {
    "text": "so here's the point. Let's say I want to open to x2. ",
    "start": "3124260",
    "end": "3130680"
  },
  {
    "text": "He gives me x1. These are valid. So this is valid. Good.",
    "start": "3130680",
    "end": "3135790"
  },
  {
    "text": "But now, ciphertext 2 can\nbe completely not valid.",
    "start": "3135790",
    "end": "3140910"
  },
  {
    "text": "Because when he opens, he gives\nme ciphertext 1 with these two. So I know this was\nvalid, because this",
    "start": "3140910",
    "end": "3146100"
  },
  {
    "text": "is a different computation. And then I give\nhim ciphertext 2. And I do this evaluation.",
    "start": "3146100",
    "end": "3151520"
  },
  {
    "text": "And then he gives me--\nso the sibling ciphertext that he gives me,\nthey may not be valid.",
    "start": "3151520",
    "end": "3158250"
  },
  {
    "text": "I want to ensure, even\nif they're not valid, even if they're not valid,\nthis is going to be valid.",
    "start": "3158250",
    "end": "3165620"
  },
  {
    "text": "The openings are going to be\nvalid, kind of on the path, things are going to be valid,\neven though the siblings that",
    "start": "3165620",
    "end": "3173180"
  },
  {
    "text": "are given in order to just kind\ndo the-- verify the opening, even if they're not\nvalid, the opening path",
    "start": "3173180",
    "end": "3180470"
  },
  {
    "text": "will be kind of\nvalid ciphertext. So why are they\ngoing to be valid? Because the way that--\nwhat is-- so now,",
    "start": "3180470",
    "end": "3189680"
  },
  {
    "text": "what is the\ndeterministic computation that's happening here? Or the evaluation, the\nevaluated ciphertext?",
    "start": "3189680",
    "end": "3196230"
  },
  {
    "text": "The way we do the\nevaluation is the following. I decrypt this,\nand I decrypt this.",
    "start": "3196230",
    "end": "3201440"
  },
  {
    "text": "And then I take the\ndecrypted value.",
    "start": "3201440",
    "end": "3206740"
  },
  {
    "text": "And I encrypt it with\nthe next public key. So the point is, even\nif this didn't decrypt--",
    "start": "3206740",
    "end": "3213790"
  },
  {
    "text": "maybe this didn't decrypt-- I don't care. And this is still\ngoing to be valid.",
    "start": "3213790",
    "end": "3219760"
  },
  {
    "text": " So the point is, even if\nthe sibling ciphertexts",
    "start": "3219760",
    "end": "3227010"
  },
  {
    "text": "that are given only for\nverifying the opening, even if these sibling\nciphertexts are malformed,",
    "start": "3227010",
    "end": "3235370"
  },
  {
    "text": "if you give me the opening\nand the entire path, I get the guarantee that on\nthe path, not on the siblings,",
    "start": "3235370",
    "end": "3241620"
  },
  {
    "text": "on the path, things\nare well formed. And I mean well-formed\nciphertext. These are ciphertext\nthat decrypt correctly.",
    "start": "3241620",
    "end": "3248750"
  },
  {
    "text": "And that's what I need\nfor the soundness. So it's important to\ndo the decryption. This is really crucial.",
    "start": "3248750",
    "end": "3255313"
  },
  {
    "text": "AUDIENCE: Are you\ndoing it on each node? I didn't fully follow. PROFESSOR: Again, what\nam I doing on each node? Good, good, good.",
    "start": "3255313",
    "end": "3260690"
  },
  {
    "text": "So here's what I'm\ndoing on each node. The evaluation function takes\nkind of ij secret key j minus 1",
    "start": "3260690",
    "end": "3268789"
  },
  {
    "text": "and two ciphertexts,\nciphertext 0 and ciphertext 1. And what it does is\nthe following-- decrypt",
    "start": "3268790",
    "end": "3275450"
  },
  {
    "text": "ciphertext 0, so it decrypts\nwith SKJ minus 1 ciphertext 0--",
    "start": "3275450",
    "end": "3282140"
  },
  {
    "text": "ciphertext b for every b. It gets some bit-- I don't know-- an alpha B.",
    "start": "3282140",
    "end": "3290920"
  },
  {
    "text": "And then it outputs one of them.",
    "start": "3290920",
    "end": "3296589"
  },
  {
    "text": "I know alpha, b star, alpha ij. ",
    "start": "3296590",
    "end": "3302660"
  },
  {
    "text": "So it gets two bits, and\nhe chooses one of them, which one depending\non the ij you want.",
    "start": "3302660",
    "end": "3308400"
  },
  {
    "text": "So what you-- the point\nis what you will get is really an encryption. So the point is, let's say if--",
    "start": "3308400",
    "end": "3315349"
  },
  {
    "text": "AUDIENCE: You're doing\nit homomorphically. PROFESSOR: I do\nit under the hood. This is a computation that\nis done under the hood.",
    "start": "3315350",
    "end": "3320770"
  },
  {
    "text": "Yes. So this is going to\nbe encrypted in a box. But what I'm going to do\nunder the box is to say--",
    "start": "3320770",
    "end": "3328390"
  },
  {
    "text": "so these, I have-- so sorry. These two are-- ij and\nskj minus 1 are in a box.",
    "start": "3328390",
    "end": "3335080"
  },
  {
    "text": "And the computation that\nI'm doing inside the box is I'm saying, I\nhave these in a box.",
    "start": "3335080",
    "end": "3340610"
  },
  {
    "text": "I have these in the clear. Inside the box, what\nI do is the following. I say, I have the secret\nkey j minus 1 and these two",
    "start": "3340610",
    "end": "3347819"
  },
  {
    "text": "ciphertexts. Let me decrypt both of them. I'm going to get two\nbits, alpha 0 and alpha 1.",
    "start": "3347820",
    "end": "3353090"
  },
  {
    "text": "Now, maybe one of\nthem is bad, so bad. So maybe one of them\ndoesn't decrypt.",
    "start": "3353090",
    "end": "3358140"
  },
  {
    "text": "So the one that doesn't\ndecrypt output bad. And then the output\nwill be the relevant one",
    "start": "3358140",
    "end": "3365970"
  },
  {
    "text": "that, according if it's 0,\nI'm going to output alpha 0. If it's 1, I'm going\nto output alpha 1.",
    "start": "3365970",
    "end": "3371250"
  },
  {
    "text": "And now what I can argue\nis on the path itself, everything has to\nbe well-formed.",
    "start": "3371250",
    "end": "3377400"
  },
  {
    "text": "So I'm actually going to\nget the correct ciphertext.",
    "start": "3377400",
    "end": "3382599"
  },
  {
    "text": "And I can argue\nthat by induction. And here, of course,\nthis is well-formed,",
    "start": "3382600",
    "end": "3387910"
  },
  {
    "text": "because this is just a\ndeterministic computation that's done locally. Now, the point is--",
    "start": "3387910",
    "end": "3393430"
  },
  {
    "text": "so let's say, like,\nI want to output-- I want to-- I'm binding on x1.",
    "start": "3393430",
    "end": "3398500"
  },
  {
    "text": "x1 is what I want to open. So this must be well-formed. And now the point is, even\nif this is not well-formed,",
    "start": "3398500",
    "end": "3407000"
  },
  {
    "text": "what will I do under the hood? I'm going to open\nthis and open this. This is going to be\nthe correct value. This is not going to be maybe\nthe correct-- this may be bad.",
    "start": "3407000",
    "end": "3414490"
  },
  {
    "text": "But this is the one I choose. And then I encrypt it. So I have it here. And then, again,\nthis may be bad.",
    "start": "3414490",
    "end": "3421559"
  },
  {
    "text": "I'm going to decrypt it. It may be bad, but this\nis going to be good, and this is the one I choose.",
    "start": "3421560",
    "end": "3426600"
  },
  {
    "text": "So one can argue\nkind of by induction that this is going to\nbe encryption of x1. This is going to be encryption\nof blah blah blah. everyone",
    "start": "3426600",
    "end": "3433347"
  },
  {
    "text": "encryption of x1 until the end. So there's no way you can\nopen two different roads. You have to open x1. AUDIENCE: And the\nverifier is also",
    "start": "3433347",
    "end": "3439500"
  },
  {
    "text": "going to do the same\ncomputation to check? PROFESSOR: Exactly! The verifier does the exact\nsame computation to check.",
    "start": "3439500",
    "end": "3444930"
  },
  {
    "text": "Yes.  Yeah. AUDIENCE: [INAUDIBLE] can\nonly open the [INAUDIBLE]",
    "start": "3444930",
    "end": "3451990"
  },
  {
    "text": "that you generated, right? This is not opening a general i. PROFESSOR: Good. So this-- exactly. This shows that the specific--",
    "start": "3451990",
    "end": "3460310"
  },
  {
    "text": "so this-- this shows that the\nspecific i that's encrypted",
    "start": "3460310",
    "end": "3472720"
  },
  {
    "text": "here-- so there's one-- the hash\nkey is binding on one i,",
    "start": "3472720",
    "end": "3477890"
  },
  {
    "text": "on a specific i. The i on which you're\nbinding, you can only",
    "start": "3477890",
    "end": "3484130"
  },
  {
    "text": "open in one way statistically. And then by the index hiding,\nit means that you can--",
    "start": "3484130",
    "end": "3491110"
  },
  {
    "text": "for any j, you can only open\none-way computationally, because you can't distinguish.",
    "start": "3491110",
    "end": "3496730"
  },
  {
    "text": "Yeah. AUDIENCE: Can you avoid\nthis chain of keys if you are happy to just\nencrypt the secret key at the same [INAUDIBLE]? PROFESSOR: Good,\nvery good, good.",
    "start": "3496730",
    "end": "3502950"
  },
  {
    "text": "Yes. You can avoid using\nmany public keys. You can just use one public key.",
    "start": "3502950",
    "end": "3510030"
  },
  {
    "text": "Encrypt the secret\nkey, and rely on what's called circular security. That's another\noption, if you wish.",
    "start": "3510030",
    "end": "3516950"
  },
  {
    "text": "Sorry it doesn't want to do it. But yes, exactly. Exactly.",
    "start": "3516950",
    "end": "3522870"
  },
  {
    "text": "Yeah. AUDIENCE: You can get\ncollision resistance? PROFESSOR: OK.",
    "start": "3522870",
    "end": "3528110"
  },
  {
    "text": "So yeah, So you're asking,\nwill you get a collision-- like collision resistance? And the answer is yes, because\nfor this specific i that you--",
    "start": "3528110",
    "end": "3538269"
  },
  {
    "text": "for the specific i that kind of\nyou encrypted in the hash key,",
    "start": "3538270",
    "end": "3544250"
  },
  {
    "text": "you get a binding statistically. There's no way you can\nopen two different ways.",
    "start": "3544250",
    "end": "3550380"
  },
  {
    "text": " AUDIENCE: What you\nhave at [INAUDIBLE]",
    "start": "3550380",
    "end": "3555680"
  },
  {
    "text": "is just the encryption\nof that index, right? PROFESSOR: Right. So you're asking\nabout a different j?",
    "start": "3555680",
    "end": "3561925"
  },
  {
    "text": "Oh, sorry. AUDIENCE: No, that you have two\nx's that have the same index.",
    "start": "3561925",
    "end": "3568710"
  },
  {
    "text": "They have the same\n[INAUDIBLE], the index, but the rest are different.",
    "start": "3568710",
    "end": "3573985"
  },
  {
    "text": "Will you get a different output\nof the hash if you take those two different x's? PROFESSOR: Good, good, good.",
    "start": "3573986",
    "end": "3579867"
  },
  {
    "text": "So if you take two\ndifferent x's for which, let's say, they\nhave the same x1.",
    "start": "3579867",
    "end": "3585030"
  },
  {
    "text": "And let's say the hash key\nis binding on location 1,",
    "start": "3585030",
    "end": "3590400"
  },
  {
    "text": "the value you would get if\nyou hash them honestly will be actually very different.",
    "start": "3590400",
    "end": "3596400"
  },
  {
    "text": "But because you use\ndifferent x's, but so you'll get different values. But if you decrypt, these values\ncorrespond to a ciphertext.",
    "start": "3596400",
    "end": "3604650"
  },
  {
    "text": "As values, they're going\nto look very different. But if you decrypt, you will\nget the same bit, which is x1.",
    "start": "3604650",
    "end": "3611850"
  },
  {
    "text": "Yeah. Good. So anyway, if you didn't\nfollow the exact construction,",
    "start": "3611850",
    "end": "3618848"
  },
  {
    "text": "it doesn't really matter. I just wanted to make sure that\nit was clear that you really",
    "start": "3618848",
    "end": "3625519"
  },
  {
    "text": "need to do this decryption. Yeah. AUDIENCE: The reason you\ndon't need circular security as it is for this FHE is that\neach of these computations",
    "start": "3625520",
    "end": "3633560"
  },
  {
    "text": "is simple enough that you\ndon't need to bootstrap. Is that-- PROFESSOR: The reason? The reason I don't need\na circular security",
    "start": "3633560",
    "end": "3643250"
  },
  {
    "text": "is I'm never encrypting a\nsecret key under its public key.",
    "start": "3643250",
    "end": "3652610"
  },
  {
    "text": "So sorry. AUDIENCE: I think he was asking\nwhy is it FHE that you're using, not [INAUDIBLE] unbounded.",
    "start": "3652610",
    "end": "3658005"
  },
  {
    "text": "PROFESSOR: Oh! Oh! OK. OK. You're saying-- OK. Sorry, sorry. You're asking me-- OK, got it.",
    "start": "3658006",
    "end": "3664530"
  },
  {
    "text": "You're saying, while in general,\nif we want arbitrary FHE, we need to assume circular\nsecure LW inside it, kind of.",
    "start": "3664530",
    "end": "3671435"
  },
  {
    "text": "And you're asking, do\nwe not need to assume-- you're kind of going into the-- you're saying, do we\nactually need fully, fully,",
    "start": "3671435",
    "end": "3677342"
  },
  {
    "text": "fully homomorphic encryption? Because if we do,\nthen, actually, we need to rely on a circular\nsecurity assumption inside, too.",
    "start": "3677342",
    "end": "3683280"
  },
  {
    "text": "The answer is we\nbecause the computation is very specific and\nvery small depth,",
    "start": "3683280",
    "end": "3688450"
  },
  {
    "text": "you don't need to-- there's no--\nyou don't need full, full FHE. You need FHE for very\nbounded depth computations.",
    "start": "3688450",
    "end": "3695640"
  },
  {
    "text": "Yeah. Great. Thank you. Any other questions?",
    "start": "3695640",
    "end": "3703090"
  },
  {
    "text": "So let's SNARG. Well, let me just make sure I\ncovered everything I wanted to.",
    "start": "3703090",
    "end": "3711700"
  },
  {
    "text": "AUDIENCE: After three\nmonths, we SNARG. PROFESSOR: We SNARG. The last kind of\ntwo hours in class,",
    "start": "3711700",
    "end": "3717160"
  },
  {
    "text": "last, we're going to SNARG. ",
    "start": "3717160",
    "end": "3723049"
  },
  {
    "text": "So now the SNARG\nis really simple. It's like as simple as one\ncan-- like, essentially,",
    "start": "3723050",
    "end": "3728640"
  },
  {
    "text": "you can do it. Done, we're done. So how do we--",
    "start": "3728640",
    "end": "3733930"
  },
  {
    "text": "we can go home. ",
    "start": "3733930",
    "end": "3741119"
  },
  {
    "text": "Anybody want a cookie\nbefore we SNARG? I feel like these grandmothers\nthat kind of constantly",
    "start": "3741120",
    "end": "3747119"
  },
  {
    "text": "feed you. So here's the idea. The idea is very simple. Take any-- so SNARG.",
    "start": "3747120",
    "end": "3753970"
  },
  {
    "start": "3753970",
    "end": "3762270"
  },
  {
    "text": "So let me first say kind\nof the high level idea. The high level idea\nis the following.",
    "start": "3762270",
    "end": "3767380"
  },
  {
    "text": "Here is what the prover will do. So the prover wants to convince\nthat x is in the language.",
    "start": "3767380",
    "end": "3773190"
  },
  {
    "text": "There's some\nverification circuit. So you have x. Let's start with-- let's\ntake x in the language.",
    "start": "3773190",
    "end": "3780240"
  },
  {
    "text": "There is some-- for any x-- it doesn't matter-- for any x,\nyou have a circuit, C sub x.",
    "start": "3780240",
    "end": "3789150"
  },
  {
    "text": "And C sub x takes a\nwitness and outputs 0 or 1, like it's a\nverification circuit.",
    "start": "3789150",
    "end": "3795756"
  },
  {
    "text": "You can also think\nof it, if you want, C as taking x and a\nwitness, and outputs",
    "start": "3795757",
    "end": "3802140"
  },
  {
    "text": "0 if it's not a valid witness\nand 1 if it's a valid witness. If it's a deterministic\ncomputation, there's no witness.",
    "start": "3802140",
    "end": "3808611"
  },
  {
    "text": "You just take x,\nand output 0 or 1. It does the computation. So when I talk about\nSNARG here, you",
    "start": "3808612",
    "end": "3814400"
  },
  {
    "text": "can think of a SNARG\nof non-deterministic and a SNARG of a\ndeterministic-- any language l. I don't even want\nto go too specific.",
    "start": "3814400",
    "end": "3820300"
  },
  {
    "text": "But I have a\nlanguage l, you know what does it mean a language? Well, there's some circuit.",
    "start": "3820300",
    "end": "3826420"
  },
  {
    "text": "It takes the instance,\nmaybe with a witness. And the circuit kind\nof does some checks",
    "start": "3826420",
    "end": "3832110"
  },
  {
    "text": "to decide if it's\nvalid or not valid. Now, I want to convince\nyou I have an x.",
    "start": "3832110",
    "end": "3839800"
  },
  {
    "text": "I want to give you a SNARG\nthat this C, an x outputs 1. Either that there is a\nwitness that outputs 1,",
    "start": "3839800",
    "end": "3846730"
  },
  {
    "text": "or maybe it's deterministic. So just C of x outputs 1. Here's what I'm going to do.",
    "start": "3846730",
    "end": "3852480"
  },
  {
    "text": "What I'm going to do,\nI'm going to compute all the wires of this circuit. I'm Include all\nthe wires, and I'm",
    "start": "3852480",
    "end": "3858960"
  },
  {
    "text": "going to give you a\nhash of all the wires. Now, there's a lot of wires. So it's going to be\na shrinking hash.",
    "start": "3858960",
    "end": "3865780"
  },
  {
    "text": "I'm going to actually use a\nsomewhere extractable hash. So let's say we\nagreed on a hash key",
    "start": "3865780",
    "end": "3872350"
  },
  {
    "text": "for a somewhere\nextractable hash. I, the prover, I'm going\nto compute all the wires",
    "start": "3872350",
    "end": "3877570"
  },
  {
    "text": "of this verification circuit. And I'm going to give\nyou the hash, the hash",
    "start": "3877570",
    "end": "3882970"
  },
  {
    "text": "of the values of all the wires. The hash, what are you\ngoing to do with that?",
    "start": "3882970",
    "end": "3889420"
  },
  {
    "text": "So the other thing I'm\ngoing to give you is I'm going to give you\na BARG, a proof.",
    "start": "3889420",
    "end": "3894810"
  },
  {
    "text": "A BARG of what? The BARG I'm going to give\nyou is that every gate here",
    "start": "3894810",
    "end": "3900210"
  },
  {
    "text": "is satisfied. So I committed to all the wires. I can commit to anything.",
    "start": "3900210",
    "end": "3905579"
  },
  {
    "text": "I mean, I had all the wires. Now, I'm going to prove to you\nthat for any gate, if you look at the two input wires to\nthe gate and the output",
    "start": "3905580",
    "end": "3915480"
  },
  {
    "text": "wire of the gate,\nthey satisfy the gate. So for all-- every\ngate in the circuit,",
    "start": "3915480",
    "end": "3923289"
  },
  {
    "text": "I'm going to prove to you that\nthere exists an opening for this",
    "start": "3923290",
    "end": "3929030"
  },
  {
    "text": "wire and an opening for\nthis wire and for this wire, so that these\nopenings are valid,",
    "start": "3929030",
    "end": "3934619"
  },
  {
    "text": "and that the values\nthat I open accept the-- kind of respect the gate.",
    "start": "3934620",
    "end": "3942960"
  },
  {
    "text": "And I'm going to prove\nto you that the output-- so I said that I\nhashed all the wires.",
    "start": "3942960",
    "end": "3950621"
  },
  {
    "text": "I'm going to argue I'm going\nto open the output wire. So you see? And end output is 1. So again, what am I going to do?",
    "start": "3950622",
    "end": "3956800"
  },
  {
    "text": "I want to convince you\nthat the output here is 1. I'm going to hash\nall the wires--",
    "start": "3956800",
    "end": "3963310"
  },
  {
    "text": "the value of all the\nwires in the circuit. I'm going to prove that every\ngate is kind of satisfied.",
    "start": "3963310",
    "end": "3970090"
  },
  {
    "text": "I have an opening that kind of\nrespects each and every gate. And the output wire is 1. ",
    "start": "3970090",
    "end": "3977480"
  },
  {
    "text": "That's my SNARG. Yeah. AUDIENCE: How is this\ndifferent from GKR? PROFESSOR: OK.",
    "start": "3977480",
    "end": "3982970"
  },
  {
    "text": "How is this different from GKR? OK, so GKR is very\ndifferent in many ways.",
    "start": "3982970",
    "end": "3990180"
  },
  {
    "text": "First of all, it's\ninteractive protocol. Now, you can apply Fiat-Shamir\nto it, but, essentially, in GKR,",
    "start": "3990180",
    "end": "3998599"
  },
  {
    "text": "you take the circuit. You compute all the\nwires in the circuit. But actually, I don't BARG--",
    "start": "3998600",
    "end": "4005440"
  },
  {
    "text": "say, look, all the\nwires are satisfied. Instead, I'm going to-- kind\nof we're doing an interactive process, saying, I'm going to--",
    "start": "4005440",
    "end": "4011650"
  },
  {
    "text": "I argue the output wire is 1. And then we do a\nlittle sum checker, some interactive process to\nreduce checking that value,",
    "start": "4011650",
    "end": "4018680"
  },
  {
    "text": "to checking a value\nin one layer below. And then we do an\ninteractive process to say, OK, if that\nwas false, then",
    "start": "4018680",
    "end": "4027010"
  },
  {
    "text": "the layer below needs to be\nfalse until we reach the leaves. And then you can\napply Fiat-Shamir",
    "start": "4027010",
    "end": "4032620"
  },
  {
    "text": "to that to make it a SNARG. Here, we're doing\nsomething very differently.",
    "start": "4032620",
    "end": "4037930"
  },
  {
    "text": "We're starting with a BARG. Now, it's true that the\nconstruction you saw for BARG uses Fiat-Shamir also,\nbut some constructions",
    "start": "4037930",
    "end": "4044328"
  },
  {
    "text": "don't use Fiat-Shamir,\nactually, for BARGs. There are various\nconstructions of BARGs. You saw one of them,\nbut there are others.",
    "start": "4044328",
    "end": "4050069"
  },
  {
    "text": "So we take any BARG. And there's no interaction here.",
    "start": "4050070",
    "end": "4055180"
  },
  {
    "text": "Besides, maybe they're\ninside the BARG, but maybe the BARG doesn't have\nany Fiat-Shamir or anything to it. And we're saying just hash\nall the wires of the circuit",
    "start": "4055180",
    "end": "4063840"
  },
  {
    "text": "and prove that\neverything is consistent. That's it. That's really what we're doing.",
    "start": "4063840",
    "end": "4070790"
  },
  {
    "text": "So let me write this down. So it will be-- so my ingredients that\nI have for my SNARG is--",
    "start": "4070790",
    "end": "4079317"
  },
  {
    "text": "so ingredients, maybe\nI'll write it here. ",
    "start": "4079317",
    "end": "4085569"
  },
  {
    "text": "So my ingredients is a BARG,\nand some are extractable hash.",
    "start": "4085570",
    "end": "4097910"
  },
  {
    "text": "These are my ingredients. And I'm going to\nshow you my SNARG. So a SNARG has three algorithms.",
    "start": "4097910",
    "end": "4105330"
  },
  {
    "text": "We have a gen algorithm. ",
    "start": "4105330",
    "end": "4111170"
  },
  {
    "text": "And here is what my gen\nalgorithm is going to do. It's going to-- let's say the\ngen also has an input length.",
    "start": "4111170",
    "end": "4117955"
  },
  {
    "text": " We don't need it.",
    "start": "4117955",
    "end": "4124095"
  },
  {
    "text": "Here's what it's going to-- OK, let's say it\nhas an input length. So this says, you're\ngoing to prove",
    "start": "4124095",
    "end": "4131470"
  },
  {
    "text": "to me statements of length--\nthat the input x is of length n. So here's what\nwe're going to do.",
    "start": "4131470",
    "end": "4137605"
  },
  {
    "text": "The first thing we\ndo is we're going to generate a hash key\nfor gen of the somewhere",
    "start": "4137605",
    "end": "4153580"
  },
  {
    "text": "extractable hash. So generate a hash\nkey corresponding to the somewhere\nextractable hash.",
    "start": "4153580",
    "end": "4158600"
  },
  {
    "text": "This is going to be\na security parameter. n is going to be--",
    "start": "4158600",
    "end": "4164830"
  },
  {
    "text": "this is going to be the number\nof wires in the circuit C.",
    "start": "4164830",
    "end": "4171339"
  },
  {
    "text": "This is the circuit that takes x\nof length n, possibly a witness, and outputs 0 or 1.",
    "start": "4171340",
    "end": "4178180"
  },
  {
    "text": "So this is going to be\nthe number of wires. And take any i. I don't know,\nwhatever. i equals 1.",
    "start": "4178180",
    "end": "4184299"
  },
  {
    "text": "Take any i in between 1 to n. It doesn't matter. Choose it arbitrarily,\nyour favorite number.",
    "start": "4184300",
    "end": "4191729"
  },
  {
    "text": "So that's first thing. And then you also generate\na CRS for the BARG. So you generate\na CRS for a BARG.",
    "start": "4191729",
    "end": "4201495"
  },
  {
    "text": " This is for the BARG.",
    "start": "4201495",
    "end": "4207809"
  },
  {
    "text": "And this will be with input 1-- with the script 1 to the lambda. K, the number of statements\nis like the number",
    "start": "4207810",
    "end": "4215400"
  },
  {
    "text": "of gates in the circuit. So K is going to be the\nnumber of gates in C,",
    "start": "4215400",
    "end": "4223409"
  },
  {
    "text": "because we're going\nto-- remember, we're going to say-- we're going\nto prove that for every gate, it's satisfied.",
    "start": "4223410",
    "end": "4229320"
  },
  {
    "text": "So usually, K and\nN are very similar. It's like essentially\nthe same number. But let me just\nbe clear that this",
    "start": "4229320",
    "end": "4235844"
  },
  {
    "text": "is-- we're going to have\nthe number of gates. And the length n there--",
    "start": "4235845",
    "end": "4240990"
  },
  {
    "text": "let me call it n prime. We'll see what it is. We'll see what this n\nprime is in a minute.",
    "start": "4240990",
    "end": "4246489"
  },
  {
    "text": "So we're going to BARG\nstatements not of length n,",
    "start": "4246490",
    "end": "4252210"
  },
  {
    "text": "but of a different\nlength, n prime. We're going to see what that is. But the output is just a--",
    "start": "4252210",
    "end": "4257870"
  },
  {
    "text": " It was going to be\ncalled the CRS BARG.",
    "start": "4257870",
    "end": "4263590"
  },
  {
    "text": "So you output CRS, which is\nequal to hash key and CRS BARG. ",
    "start": "4263590",
    "end": "4276850"
  },
  {
    "text": "So that's how you generate. So the key generation,\nthe CRS has a CRS for the BARG and a hash key.",
    "start": "4276850",
    "end": "4284220"
  },
  {
    "text": "Now, we're going to--  what does the prover do?",
    "start": "4284220",
    "end": "4290610"
  },
  {
    "text": "So the prover gets as input x. Maybe a witness, if it's an NP.",
    "start": "4290610",
    "end": "4296550"
  },
  {
    "text": "Maybe there is no witness. Let me say, generally,\nwith a witness. But actually, the BARB we're\ngoing to construct today",
    "start": "4296550",
    "end": "4303900"
  },
  {
    "text": "is going to be for\ndeterministic languages. But let me write it also,\nbecause I'm going to show you a general framework.",
    "start": "4303900",
    "end": "4310440"
  },
  {
    "text": "So P is going to get a CRS,\nan x, and maybe a witness",
    "start": "4310440",
    "end": "4317370"
  },
  {
    "text": "if it's an NP. And it needs to\ngenerate a SNARG. So what does it do?",
    "start": "4317370",
    "end": "4324390"
  },
  {
    "text": "Compute all the\nwires in the circuit.",
    "start": "4324390",
    "end": "4329630"
  },
  {
    "text": "So x is fixed. Let's think of x as, like,\nthat's not part of the wires because it's fixed. But let's compute all\nthe w1 up to wn, which",
    "start": "4329630",
    "end": "4340870"
  },
  {
    "text": "is the wires of the circuit. You can think of the first\nn as the actual witness.",
    "start": "4340870",
    "end": "4346820"
  },
  {
    "text": "Let's say if you have a\nwitness and it's of length m, w1 wm is the witness, but\nthen the rest are the wires.",
    "start": "4346820",
    "end": "4353180"
  },
  {
    "text": "So I'm thinking the\nwires include the witness and everything above. And if there is no witness, then\nit doesn't include a witness.",
    "start": "4353180",
    "end": "4359710"
  },
  {
    "text": "So I compute. These are all the\nwires in C, except x,",
    "start": "4359710",
    "end": "4371159"
  },
  {
    "text": "except the input\nwires corresponding-- the input wires\ncorresponding to x, because that's-- kind\nof we know what it is. The verifier knows it.",
    "start": "4371160",
    "end": "4378660"
  },
  {
    "text": "So you compute all the wires. And then you compute\nthe hash of--",
    "start": "4378660",
    "end": "4385170"
  },
  {
    "text": "you compute z, which is a hash,\nthe eval with hash key of w1 up",
    "start": "4385170",
    "end": "4392610"
  },
  {
    "text": "to wn. So you hash all\nthese wires together. So the verifier\ncomputed all the wires",
    "start": "4392610",
    "end": "4398700"
  },
  {
    "text": "of the circuit,\nhashed all the wires. ",
    "start": "4398700",
    "end": "4405920"
  },
  {
    "text": "Actually, let me just say-- sorry. ",
    "start": "4405920",
    "end": "4412590"
  },
  {
    "text": "When you generate a key,\nI said use a somewhere extractable hash. Yes, exactly.",
    "start": "4412590",
    "end": "4418840"
  },
  {
    "text": "But you don't need to\njust use one index. So let's use it with\na few index, il.",
    "start": "4418840",
    "end": "4426599"
  },
  {
    "text": "Now you can ask, what is l? We'll see. You can think of it as--",
    "start": "4426600",
    "end": "4431830"
  },
  {
    "text": "a few l's, you can\nthink of polylog l. The bigger the l is,\nthe less succinct",
    "start": "4431830",
    "end": "4436840"
  },
  {
    "text": "the SNARG is going to be. So the SNARG is going to\ngrow with l because the hash",
    "start": "4436840",
    "end": "4443079"
  },
  {
    "text": "key grows with L.\nIt's like L hash keys, essentially, because\nwe're repeating. So here I'm going to be\nbinding on l locations.",
    "start": "4443080",
    "end": "4450706"
  },
  {
    "text": " The hash value grows with\nl, because you're computing,",
    "start": "4450706",
    "end": "4457000"
  },
  {
    "text": "essentially, l hash values. So the bigger l is, in\nsome sense, the more secure",
    "start": "4457000",
    "end": "4464588"
  },
  {
    "text": "we're going to get. We'll see. But the more non-succinct\nit's going to be. So l now is going\nto be a parameter.",
    "start": "4464588",
    "end": "4471140"
  },
  {
    "text": "And when we talk\nabout the analysis, we'll see which l we want. Yeah. AUDIENCE: Is there any hope for\ngetting a sublinear dependence",
    "start": "4471140",
    "end": "4477313"
  },
  {
    "text": "on l, like, any\nother construction instead of the direct\nproduct construction? PROFESSOR: So in\nV, there's no way",
    "start": "4477313",
    "end": "4484210"
  },
  {
    "text": "to get sublinear in l,\nbecause you need to extract. It's like there-- it\nmust have information.",
    "start": "4484210",
    "end": "4490460"
  },
  {
    "text": "So in v, there's no way to have. In the hash key,\non the other hand--",
    "start": "4490460",
    "end": "4496510"
  },
  {
    "text": " OK. If the i, i1 up to il,\ncan be shrunk somehow,",
    "start": "4496510",
    "end": "4505450"
  },
  {
    "text": "if there is a succinct\ndescription of i1 to il-- for example, in the\ncase of a witness,",
    "start": "4505450",
    "end": "4511179"
  },
  {
    "text": "I want to be extractable\non witness i. These are consecutive\nlocations, so I",
    "start": "4511180",
    "end": "4516490"
  },
  {
    "text": "don't need to write location\ni, i plus 1, i plus 2. You can just say\ni, and go from i10. There's a very\nsuccinct description.",
    "start": "4516490",
    "end": "4522940"
  },
  {
    "text": "In the case where\nthere's a description, you can hope to get\nthe hash key smaller.",
    "start": "4522940",
    "end": "4529290"
  },
  {
    "text": "And we do know how to\nget the hash key smaller. But in general, for the v value,\nthere's no way-- information,",
    "start": "4529290",
    "end": "4536070"
  },
  {
    "text": "theoretically. Great question. ",
    "start": "4536070",
    "end": "4543490"
  },
  {
    "text": "So you compute the hash\nvalue of all the wires, and then you add a BARG. So the last thing you do\nis you compute the P BARG.",
    "start": "4543490",
    "end": "4554690"
  },
  {
    "text": "You take the BARG prover. And here's our BARG prover.",
    "start": "4554690",
    "end": "4559829"
  },
  {
    "text": "You give it CRS of BARG. ",
    "start": "4559830",
    "end": "4565140"
  },
  {
    "text": "And you have x's and witnesses. Now, what are the x's\nand the witnesses? I want to use--",
    "start": "4565140",
    "end": "4571350"
  },
  {
    "text": "I want to argue I'm\ngoing to generate a bunch of x's and witnesses\nand generate a proof.",
    "start": "4571350",
    "end": "4576690"
  },
  {
    "text": "So what is it that I'm-- so I'm going to give you x1\nstar xk star and w1 star.",
    "start": "4576690",
    "end": "4585080"
  },
  {
    "text": "I'll tell you what\nthese are in a second-- wk star. So this is going to be pi. This is going to\nbe compute pi BARG.",
    "start": "4585080",
    "end": "4599460"
  },
  {
    "text": "So you BARG k statements. But what are these statements? So let me just tell you\nwhat these and these are.",
    "start": "4599460",
    "end": "4608099"
  },
  {
    "text": "So x star j is--",
    "start": "4608100",
    "end": "4616820"
  },
  {
    "text": "essentially, it's going\nto be hash key value nj.",
    "start": "4616820",
    "end": "4622685"
  },
  {
    "text": " That's x.",
    "start": "4622685",
    "end": "4627880"
  },
  {
    "text": "So what I'm going to prove,\nthat for each gate j,",
    "start": "4627880",
    "end": "4634090"
  },
  {
    "text": "I have an opening to the\ninput wires of the gate and the upper wire\nof the gate with--",
    "start": "4634090",
    "end": "4640600"
  },
  {
    "text": "I have an opening with respect\nto v that satisfies the gate. So the xj is going to be--\nwell, I have the hash key.",
    "start": "4640600",
    "end": "4649099"
  },
  {
    "text": "I have the hash\nvalue and gate j. And the witness for gate\nj is going to be opening.",
    "start": "4649100",
    "end": "4660180"
  },
  {
    "text": "So I'm going to have a\nbit, like a left child,",
    "start": "4660180",
    "end": "4665930"
  },
  {
    "text": "right child, output child-- not child-- output, the parent.",
    "start": "4665930",
    "end": "4673380"
  },
  {
    "text": "So left child, right child,\nand parent of the gate opening,",
    "start": "4673380",
    "end": "4678960"
  },
  {
    "text": "rho of left child, rho of\nright child, rho of the output. ",
    "start": "4678960",
    "end": "4686710"
  },
  {
    "text": "That's going to be a witness. And it's a valid witness. If B0 rho 0 are valid opening\nof the left child of kj.",
    "start": "4686710",
    "end": "4700840"
  },
  {
    "text": "b1 rho 1 are a valid opening\nof the right child of kj.",
    "start": "4700840",
    "end": "4707440"
  },
  {
    "text": "b out and rho out\nare valid openings of the output wire of kj. And these satisfy the gate.",
    "start": "4707440",
    "end": "4716199"
  },
  {
    "text": "So if it's an AND gate,\nthis and this is this.",
    "start": "4716200",
    "end": "4722500"
  },
  {
    "text": "That's what-- that's going to--\nso a valid witness is a six tuple like this that all\nthese openings are accepted,",
    "start": "4722500",
    "end": "4732010"
  },
  {
    "text": "and these bits satisfy the gate. And our valid opening with\nrespect to which wires,",
    "start": "4732010",
    "end": "4738780"
  },
  {
    "text": "the wires that I've\ndefined by the gate. So think of it, we\nhave this circuit C.",
    "start": "4738780",
    "end": "4744360"
  },
  {
    "text": "The gates are kind of numbered. And for any gates j, we know\nthere's-- we know the number",
    "start": "4744360",
    "end": "4750330"
  },
  {
    "text": "of the input and output wire,\nbecause this is uniform. Everything of the\ncircuit is uniform.",
    "start": "4750330",
    "end": "4755920"
  },
  {
    "text": "So for every gate J,\nit corresponds to-- I know i, wire i,\nwire j, and wire k.",
    "start": "4755920",
    "end": "4764380"
  },
  {
    "text": "And so these openings\nshould be with respect to wire i, wire j, and wire k. AUDIENCE: Do you use the same\nhash key for all of them?",
    "start": "4764380",
    "end": "4771230"
  },
  {
    "text": "PROFESSOR: Same hash\nkey for all of them. Yeah, because I\nused one hash key. I mean, one hash key that's\nbinding on l locations.",
    "start": "4771230",
    "end": "4777870"
  },
  {
    "text": "But I'm now I'm thinking just\none hash key that's binding. How I construct it, we'll\nabstract that for now.",
    "start": "4777870",
    "end": "4785610"
  },
  {
    "text": "But yeah, I have one hash key\nthat's binding on l locations. I hash all the\nvalues of the values",
    "start": "4785610",
    "end": "4791947"
  },
  {
    "text": "of all the wires with respect\nto this specific hash key. And then I add a\nBARG for any gate j",
    "start": "4791947",
    "end": "4798710"
  },
  {
    "text": "that I have an opening for\nthe input, the two input children, the output wire of\ngate j that satisfy the gate.",
    "start": "4798710",
    "end": "4810540"
  },
  {
    "text": "Yeah. AUDIENCE: So the only\ndifference between the xj is the index j itself. So it's like, what are the\nindex [INAUDIBLE] things?",
    "start": "4810540",
    "end": "4816963"
  },
  {
    "text": "PROFESSOR: Yeah, yeah, yeah. Good, good, good. So you're saying,\nwhere's j here? Where's j?",
    "start": "4816963",
    "end": "4822110"
  },
  {
    "text": "You're saying-- AUDIENCE: No. More like x, j star, and xj-- PROFESSOR: The only\ndifference is j.",
    "start": "4822110",
    "end": "4828170"
  },
  {
    "text": "So this is an index\nkind of language. This note, this is kind of-- it's the x1 and\nx1 star, x2 star,",
    "start": "4828170",
    "end": "4835530"
  },
  {
    "text": "are the same hash key.\nvk1, 2, 3, 4 up to k. So it's kind of\nan index language.",
    "start": "4835530",
    "end": "4841510"
  },
  {
    "text": "We're going to get\nback to it when-- because we want the efficiency\nof v. So we'll talk about that.",
    "start": "4841510",
    "end": "4846585"
  },
  {
    "text": "But yes.  Any question about\nthe prover here?",
    "start": "4846585",
    "end": "4853295"
  },
  {
    "text": " So now the verifier, what\nthe verifier does is--",
    "start": "4853295",
    "end": "4863030"
  },
  {
    "text": "so now let's write the\nverifier somewhere. Oh, that's sad. I wanted to keep this.",
    "start": "4863030",
    "end": "4868685"
  },
  {
    "text": " If you don't mind, we'll\nwrite the verifier here.",
    "start": "4868685",
    "end": "4877310"
  },
  {
    "text": "So what does the verifier do? V takes as input a CRS, which\nis a hash key and CRS BARG.",
    "start": "4877310",
    "end": "4885885"
  },
  {
    "text": " That's the CRS.",
    "start": "4885885",
    "end": "4891220"
  },
  {
    "text": "And it takes an\ninstant X and a proof. What is the proof?",
    "start": "4891220",
    "end": "4897080"
  },
  {
    "text": "A proof is a value and a\nBARG, a hash value and a BARG.",
    "start": "4897080",
    "end": "4907100"
  },
  {
    "text": "So the verifier, he gets the\nCRS, which is of this form. He gets an input x.",
    "start": "4907100",
    "end": "4914130"
  },
  {
    "text": "And he gets a SNARG. A SNARG is-- oh, did\nI say what it outputs? Sorry.",
    "start": "4914130",
    "end": "4919420"
  },
  {
    "text": "Sorry. Compute, output. ",
    "start": "4919420",
    "end": "4925880"
  },
  {
    "text": "v in pi BARG. ",
    "start": "4925880",
    "end": "4933840"
  },
  {
    "text": "So now he takes the SNARG,\nwhich is a hash and a BARG.",
    "start": "4933840",
    "end": "4944929"
  },
  {
    "text": "And it just outputs\n1, an output. ",
    "start": "4944930",
    "end": "4952690"
  },
  {
    "text": "The output of v BARG,\nhe accepts if and only if the BARG is accepting.",
    "start": "4952690",
    "end": "4958670"
  },
  {
    "text": "What do we mean the BARG-- v\nBARG takes CRS BARG and x1 star",
    "start": "4958670",
    "end": "4967480"
  },
  {
    "text": "up to xk star, which are\nessentially an index language corresponding to hk, v, and j.",
    "start": "4967480",
    "end": "4975740"
  },
  {
    "start": "4975740",
    "end": "4982130"
  },
  {
    "text": "So it accepts if and only\nif the BARG is accepted.",
    "start": "4982130",
    "end": "4987239"
  },
  {
    "text": " That's the SNARG. ",
    "start": "4987240",
    "end": "5001380"
  },
  {
    "text": "One thing I-- so\nagain, you generate a-- again, what is the SNARG?",
    "start": "5001380",
    "end": "5007140"
  },
  {
    "text": "In the CRS generation,\nyou generate a hash key for the somewhere\nextractable hash,",
    "start": "5007140",
    "end": "5012360"
  },
  {
    "text": "and you generate a\nCRS for the BARG. The prover computes the\nvalues of all the wires",
    "start": "5012360",
    "end": "5018490"
  },
  {
    "text": "in the circuits, hashes it\nusing the hash key to generate a value, a hash value\nV, and then he proves--",
    "start": "5018490",
    "end": "5025930"
  },
  {
    "text": "it gives a BARG that all\nthe gates are satisfied. Namely, for every gate\nhe has an opening valid",
    "start": "5025930",
    "end": "5032050"
  },
  {
    "text": "that's satisfied--\nthat respects the gate. And the output gate is 1. That's another thing.",
    "start": "5032050",
    "end": "5037480"
  },
  {
    "text": "He also proves that--\nthe BARG also proves that the output gate is 1. So for the output gate, you\nprove it respects, namely--",
    "start": "5037480",
    "end": "5043570"
  },
  {
    "text": "you prove it's 1.  Good. So that's-- and\nhow do you verify?",
    "start": "5043570",
    "end": "5049960"
  },
  {
    "text": "You just verify the BARG. Now, here's one\nimportant thing to note.",
    "start": "5049960",
    "end": "5055210"
  },
  {
    "text": "This v BARG takes as input\nthe BARG of length k. k is like the number of\nwires in the circuit.",
    "start": "5055210",
    "end": "5062890"
  },
  {
    "text": "We do not want the\nverifier to run in time k. That would be the\nsize of the circuit.",
    "start": "5062890",
    "end": "5068480"
  },
  {
    "text": "No, we want the verifier\nto be very efficient. But that's OK,\nbecause he actually",
    "start": "5068480",
    "end": "5074349"
  },
  {
    "text": "doesn't need to run in time k,\nbecause, actually, it's what's called an index language.",
    "start": "5074350",
    "end": "5080000"
  },
  {
    "text": "Namely, x1 up to xk\nstar, essentially,",
    "start": "5080000",
    "end": "5085580"
  },
  {
    "text": "it's like an index on hash k\nand v. So you can generate them.",
    "start": "5085580",
    "end": "5091600"
  },
  {
    "text": "You can express them\nvery succinctly.",
    "start": "5091600",
    "end": "5096640"
  },
  {
    "text": "You can express them by hash\nkey V, and all the index between 1 and k.",
    "start": "5096640",
    "end": "5102520"
  },
  {
    "text": "That's it. So because they have a\nsuccinct representation, the runtime of the verifier\nonly grows with hash key nv,",
    "start": "5102520",
    "end": "5109630"
  },
  {
    "text": "polynomial with hash key nv. He does not need to grow with k. That's kind of the efficiency\nproperty of index languages.",
    "start": "5109630",
    "end": "5118096"
  },
  {
    "text": "And that's very important. Without it, we can't\nuse it for the SNARG.",
    "start": "5118097",
    "end": "5123570"
  },
  {
    "text": "So in terms of efficiency, if\nthe BARG has good efficiency, let's say the dependence\nis polylog on k,",
    "start": "5123570",
    "end": "5130980"
  },
  {
    "text": "then the v is going to\nbe-- so what is the--",
    "start": "5130980",
    "end": "5137040"
  },
  {
    "text": "the SNARG grows with v\nand with a BARG proof. The BARG proof is very--",
    "start": "5137040",
    "end": "5142739"
  },
  {
    "text": "it grows\npolylogarithmically with k. It's like poly log\nthe circuit size. It's very efficient.",
    "start": "5142740",
    "end": "5149040"
  },
  {
    "text": "v grows with the number of\nindices we're binding on.",
    "start": "5149040",
    "end": "5154320"
  },
  {
    "text": "So it grows with l. So it grows with l. We'll try to minimize l. We ideally want l\nto be polylog k.",
    "start": "5154320",
    "end": "5162420"
  },
  {
    "text": "So that's what we want. We'll see what we get. But ideally, this\nshould be polylog k. And the runtime of the verifier,\nbecause it's an index language,",
    "start": "5162420",
    "end": "5171090"
  },
  {
    "text": "is also going to be\npolylog k, assuming a--",
    "start": "5171090",
    "end": "5176730"
  },
  {
    "text": "sorry-- and he needs to-- ",
    "start": "5176730",
    "end": "5182579"
  },
  {
    "text": "he does run in time\nx, because he also needs to check this pi BARG is\npi BARG comma of x, because when",
    "start": "5182580",
    "end": "5191430"
  },
  {
    "text": "you check the validity that\neach gate is satisfied,",
    "start": "5191430",
    "end": "5196590"
  },
  {
    "text": "the gates in layer\n1 depend on x. So the gates in layer 1, the\ninput wires are x, xi, xj.",
    "start": "5196590",
    "end": "5206010"
  },
  {
    "text": "So the BARG needs to know x. The verifier, of\ncourse, needs to know x. But that's it. So he doesn't need\nto run in time--",
    "start": "5206010",
    "end": "5212380"
  },
  {
    "text": "linear in x. But the BARG itself\nis very short. So this log is very short.",
    "start": "5212380",
    "end": "5217599"
  },
  {
    "text": "The verifier, of course,\nneeds to run time x. It needs to read the\ninput, but that's it. ",
    "start": "5217600",
    "end": "5225330"
  },
  {
    "text": "So any questions? So let's take a break, a\ncookie break, a fun break.",
    "start": "5225330",
    "end": "5234463"
  },
  {
    "text": "And let's start,\nagain, like 10 minutes, and then we'll talk about\nthe analysis and when-- but this is all--\nbut that's done.",
    "start": "5234463",
    "end": "5239469"
  },
  {
    "text": "We're done with\nthe construction. This is your SNARG. We built up to it. Here it is. And then we'll analyze\nit after the break.",
    "start": "5239470",
    "end": "5247500"
  },
  {
    "start": "5247500",
    "end": "5248000"
  }
]