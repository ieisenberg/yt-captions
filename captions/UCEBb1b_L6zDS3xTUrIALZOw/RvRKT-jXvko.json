[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "7029"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "7030",
    "end": "13990"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13990",
    "end": "30709"
  },
  {
    "text": "PROFESSOR: Quick, quick recap\nof what we did last time. So last time we introduced\nthis idea of decomposition",
    "start": "30709",
    "end": "36830"
  },
  {
    "text": "and abstraction. And we started putting\nthat into our programs. And these were sort of\nhigh level concepts, and we achieved them using\nthese concrete things called",
    "start": "36830",
    "end": "45170"
  },
  {
    "text": "functions in our programs. And functions\nallowed us to create code that was coherent, that\nhad some structure to it,",
    "start": "45170",
    "end": "53180"
  },
  {
    "text": "and was reusable. OK. And from now on in problem\nsets and in lectures,",
    "start": "53180",
    "end": "59487"
  },
  {
    "text": "I'm going to be using\nfunctions a lot. So make sure that you\nunderstand how they work and all of those details.",
    "start": "59487",
    "end": "65449"
  },
  {
    "text": "So today, we're going to\nintroduce two new data types. And they're called\ncompound data types,",
    "start": "65450",
    "end": "71300"
  },
  {
    "text": "because they're actually\ndata types that are made up of other data types,\nparticularly ints, floats,",
    "start": "71300",
    "end": "77120"
  },
  {
    "text": "Booleans, and strings. And actually not just these,\nbut other data types as well.",
    "start": "77120",
    "end": "82219"
  },
  {
    "text": "So that's why they're\ncalled compound data types. So we're going to\nlook at a new data type called a tuple and a\nnew data type called a list.",
    "start": "82220",
    "end": "90776"
  },
  {
    "text": "And then we're going to\ntalk about these ideas that come about with--\nspecifically with lists.",
    "start": "90776",
    "end": "98110"
  },
  {
    "text": "All right. So let's go right into tuples. So if you recall\nstrings, strings",
    "start": "98110",
    "end": "104130"
  },
  {
    "text": "were sequences of characters. Tuples are going to be similar\nto strings in that they're",
    "start": "104130",
    "end": "110640"
  },
  {
    "text": "going to be sequences\nof something, except that tuples aren't\njust sequences of characters, they can be sequences\nof anything.",
    "start": "110640",
    "end": "117540"
  },
  {
    "text": "They're a collection\nof data where that data can be of any type. ",
    "start": "117540",
    "end": "125310"
  },
  {
    "text": "So a tuple can contain\nelements that are integers, floats, strings, and so on.",
    "start": "125310",
    "end": "130469"
  },
  {
    "text": " Tuples are immutable. And if you recall, we talked\nabout this word a little bit",
    "start": "130470",
    "end": "137280"
  },
  {
    "text": "when we talked about strings. So that means once you\ncreate a tuple object, you can't modify it.",
    "start": "137280",
    "end": "142720"
  },
  {
    "text": "So when you created\na string object, you were not allowed\nto modify it. ",
    "start": "142720",
    "end": "150280"
  },
  {
    "text": "So the way we create tuples\nare with these open and close parentheses.",
    "start": "150280",
    "end": "156270"
  },
  {
    "text": "This shouldn't be\nconfused with a function, because there's\nnothing-- there's no--",
    "start": "156270",
    "end": "161329"
  },
  {
    "text": "this isn't a function call. It's just how you\nrepresent a tuple. For a function call,\nyou'd have something right",
    "start": "161330",
    "end": "166879"
  },
  {
    "text": "before the parentheses. This is just how we chose\nto represent a tuple.",
    "start": "166880",
    "end": "173010"
  },
  {
    "text": "And just a plain open\nand close parentheses represents an empty tuple. So it's of length 0. There's nothing in it.",
    "start": "173010",
    "end": "180500"
  },
  {
    "text": "You can create a\ntuple that contains some elements by separating\neach element with a comma.",
    "start": "180500",
    "end": "187110"
  },
  {
    "text": "So in this case,\nthis is a tuple that can be accessed with a variable\nt that contains three elements.",
    "start": "187110",
    "end": "194680"
  },
  {
    "text": "The first is an integer,\nthe second is a string, and the third is\nanother integer.",
    "start": "194680",
    "end": "200370"
  },
  {
    "text": "Much like strings, we can\nindex into tuples to find out values at particular indices.",
    "start": "200370",
    "end": "207330"
  },
  {
    "text": "So you read this\nas t at position 0. So the tuple represented by\na variable t at position 0",
    "start": "207330",
    "end": "214800"
  },
  {
    "text": "will evaluate to 2,\nbecause again, we start counting from 0\nin computer science.",
    "start": "214800",
    "end": "219900"
  },
  {
    "text": "So that brings us-- gives\nus the first element. Just like strings, we can\nconcatenate tuples together.",
    "start": "219900",
    "end": "226060"
  },
  {
    "text": "That just means\nadd them together. So if we add these\ntwo tuples together, we just get back\none larger tuple",
    "start": "226060",
    "end": "232390"
  },
  {
    "text": "that's just those two-- the\nelements of those tuples",
    "start": "232390",
    "end": "237640"
  },
  {
    "text": "just put together\nin one larger tuple. Again, much like strings,\nwe can slice into tuples.",
    "start": "237640",
    "end": "244330"
  },
  {
    "text": "So t sliced from\nindex 1 until index 2.",
    "start": "244330",
    "end": "249560"
  },
  {
    "text": "Remember, we go until\nthis stop minus 1. So this only gives us one\nelement inside the tuple.",
    "start": "249560",
    "end": "259609"
  },
  {
    "text": "And this is not a mistake. This extra comma here actually\nrepresents a tuple object.",
    "start": "259610",
    "end": "266259"
  },
  {
    "text": "If I didn't have\nthis comma here, then this would\njust be a string.",
    "start": "266260",
    "end": "271800"
  },
  {
    "text": "The parentheses would\njust-- wouldn't really make any difference. But the comma here\nmakes it clear to Python",
    "start": "271800",
    "end": "278370"
  },
  {
    "text": "that this is a tuple with\nonly one element in it. We can slice even further to\nget a tuple with two elements.",
    "start": "278370",
    "end": "287140"
  },
  {
    "text": "And we can do the\nusual operations like get the length of a tuple,\nwhich says, how many elements are in my tuple?",
    "start": "287140",
    "end": "293199"
  },
  {
    "text": "And len of this t\nwould evaluate to 3, because there are three\nelements inside the tuple.",
    "start": "293200",
    "end": "299680"
  },
  {
    "text": "Each element, again,\nseparated by the comma. And just like strings,\nif we try to change",
    "start": "299680",
    "end": "305530"
  },
  {
    "text": "a value inside the\ntuple-- in this case, I wanted to try to change the\nvalue of the second element",
    "start": "305530",
    "end": "315970"
  },
  {
    "text": "to 4-- Python\ndoesn't allow that, because tuples are immutable. ",
    "start": "315970",
    "end": "323442"
  },
  {
    "text": "So why would we\nwant to use tuples? Tuples are actually useful in a\ncouple of different scenarios.",
    "start": "323442",
    "end": "330360"
  },
  {
    "text": "So recall a few years ago,\nwe looked at this code where we tried to swap the\nvalues of variables x and y.",
    "start": "330360",
    "end": "336852"
  },
  {
    "text": "And this first code\nactually didn't work, because you're\noverwriting the value for x.",
    "start": "336852",
    "end": "342180"
  },
  {
    "text": "So instead, what\nwe ended up doing was creating this\ntemporary variable where we stored the value of\nx, and then we overwrote it,",
    "start": "342180",
    "end": "349320"
  },
  {
    "text": "and then we used the\ntemporary variable. Well, turns out this\nthree liner code right here can actually be written\nin one line using tuples.",
    "start": "349320",
    "end": "356900"
  },
  {
    "text": "So you say x comma y\nis equal to y comma x. And Python goes in and\nsays, what's the value of y?",
    "start": "356900",
    "end": "364630"
  },
  {
    "text": "And assigns it to x. And then what's the value of x? And assigns it to y. ",
    "start": "364630",
    "end": "375140"
  },
  {
    "text": "Extending on that,\nwe can actually use tuples to return more than\none value from a function.",
    "start": "375140",
    "end": "382410"
  },
  {
    "text": "So functions, you're only\nallowed to return one object. So you're not allowed to\nreturn more than one object.",
    "start": "382410",
    "end": "389450"
  },
  {
    "text": "However, if we use\na tuple object, and if that's the\nthing that we return,",
    "start": "389450",
    "end": "394840"
  },
  {
    "text": "we can actually get\naround this sort of rule by putting in as\nmany values as we",
    "start": "394840",
    "end": "402159"
  },
  {
    "text": "want inside the tuple object. And then we can return as\nmany values as we'd like.",
    "start": "402160",
    "end": "407800"
  },
  {
    "text": "So in this specific\nexample, I'm trying to calculate the\nquotient and remainder when we divide x by a y.",
    "start": "407800",
    "end": "413979"
  },
  {
    "text": "So this is a function\ndefinition here. And down here I'm calling\nthe function with 4 and 5.",
    "start": "413980",
    "end": "421670"
  },
  {
    "text": "So when I make\nthe function call, 4 gets assigned to x and\n5 gets assigned to y.",
    "start": "421670",
    "end": "430480"
  },
  {
    "text": "So then q is going to be\nthe integer division when",
    "start": "430480",
    "end": "436880"
  },
  {
    "text": "x is divided by y. And this double\nslash just means-- it's like casting the\nresult to an integer.",
    "start": "436880",
    "end": "444260"
  },
  {
    "text": "It says divide it, keep\nthe whole number part, and just delete everything\nelse beyond the decimal point.",
    "start": "444260",
    "end": "452430"
  },
  {
    "text": "So when you divide\n4 by 5, this q is actually going to be 0,\nbecause it's 0 point something, and I don't care about\nthe point something.",
    "start": "452430",
    "end": "459690"
  },
  {
    "text": "And then the remainder is just\nusing the percent operator. So I divide 4 by 5, the\nremainder is going to be 4.",
    "start": "459690",
    "end": "467840"
  },
  {
    "text": "And notice that I'm\ngoing to be returning q and r, which are these\ntwo values that I calculated inside my function.",
    "start": "467840",
    "end": "474250"
  },
  {
    "text": "And I'm returning them in\nthe context of this tuple. So I'm only returning one\nobject, which is a tuple.",
    "start": "474250",
    "end": "480760"
  },
  {
    "text": "It just so happens that\nI'm populating that object with a few different values. ",
    "start": "480760",
    "end": "488400"
  },
  {
    "text": "So when the function\nreturns here, this is going to say 0 comma 4.",
    "start": "488400",
    "end": "493600"
  },
  {
    "text": "That's the tuple\nit's going to return. Q is going to be 0 and\nr is going to be 4.",
    "start": "493600",
    "end": "499590"
  },
  {
    "text": "So then this line\nhere-- quot, rem equals 0, 4-- is\nbasically this--",
    "start": "499590",
    "end": "506130"
  },
  {
    "text": "it's sort of like\nwhat we did up here. So it assigns quot to 4-- sorry. Quot to 0 and rem to 4.",
    "start": "506130",
    "end": "511840"
  },
  {
    "text": " So we can use tuples. This is very useful.",
    "start": "511840",
    "end": "517058"
  },
  {
    "text": "We can use them to return more\nthan one value from a function.",
    "start": "517059",
    "end": "522260"
  },
  {
    "text": "So tuples are great. Might seem a little\nbit confusing at first, but they're actually\npretty useful, because they hold\ncollections of data.",
    "start": "522260",
    "end": "530129"
  },
  {
    "text": "So here, I wrote\na function which I can apply to any set of data.",
    "start": "530130",
    "end": "537112"
  },
  {
    "text": "And I'll explain what\nthis function does, and then we can apply\nit to some data. And you can see that you\ncan extract some very basic",
    "start": "537112",
    "end": "542650"
  },
  {
    "text": "information from whatever\nset of data that you happen to collect. So here's a function\ncalled get_data,",
    "start": "542650",
    "end": "548830"
  },
  {
    "text": "and it does all of\nthis stuff in here. And in the actual code\nassociated with the lecture,",
    "start": "548830",
    "end": "553920"
  },
  {
    "text": "I actually said what the\ncondition on a tuple was. So it has to be a\ntuple of a certain--",
    "start": "553920",
    "end": "560550"
  },
  {
    "text": "that looks a certain way. And this is the\nway it has to look. So it's one tuple.",
    "start": "560550",
    "end": "568580"
  },
  {
    "text": "The outer parentheses out\nhere represent the fact that it's a tuple.",
    "start": "568580",
    "end": "574829"
  },
  {
    "text": "And the elements of this tuple\nare actually other tuples. So the first element\nis a tuple object,",
    "start": "574830",
    "end": "581140"
  },
  {
    "text": "the second element\nis a tuple object, and third one is a\ntuple object, and so on. ",
    "start": "581140",
    "end": "587150"
  },
  {
    "text": "And each one of these\ninner tuple objects are actually going to\ncontain two elements,",
    "start": "587150",
    "end": "592610"
  },
  {
    "text": "the first being an integer\nand the second being a string. So that's sort of\nthe precondition that this function\nassumes on a tuple",
    "start": "592610",
    "end": "601000"
  },
  {
    "text": "before it can-- before\nit actually can work.",
    "start": "601000",
    "end": "606580"
  },
  {
    "text": "All right. So given a tuple\nthat looks like that, what's the function going to do?",
    "start": "606580",
    "end": "611829"
  },
  {
    "text": " It's first creating\ntwo empty tuple.",
    "start": "611830",
    "end": "617250"
  },
  {
    "text": "One is called nums and\none is called words. And then there's a for loop. And notice here the for loop\nis going to iterate over",
    "start": "617250",
    "end": "624600"
  },
  {
    "text": "every element inside the tuple. Remember in strings when we\nwere able to use for loops that",
    "start": "624600",
    "end": "630240"
  },
  {
    "text": "iterated over the characters\ndirectly as opposed to over the indices? Well, we're doing the\nsame sort of thing here.",
    "start": "630240",
    "end": "636540"
  },
  {
    "text": "Instead of iterating\nover the indices, we're going to iterate over the\ntuple object at each position.",
    "start": "636540",
    "end": "642900"
  },
  {
    "text": "So first time through\nthe loop, t here is going to be this first tuple.",
    "start": "642900",
    "end": "649212"
  },
  {
    "text": "The second time\nthrough the loop, t is going to be this tuple. And the third time, it's going\nto be this exact tuple object.",
    "start": "649212",
    "end": "654375"
  },
  {
    "text": " So each time through\nthe loop, what I'm doing",
    "start": "654375",
    "end": "660120"
  },
  {
    "text": "is I'm going to have\nthis nums tuple that I'm going to keep adding to. And each time I'm going\nto create a new object",
    "start": "660120",
    "end": "666450"
  },
  {
    "text": "and reassign it to\nthis variable nums. And each time\nthrough the loop, I'm looking at what the\nprevious value of nums was.",
    "start": "666450",
    "end": "674500"
  },
  {
    "text": "So what was my previous tuple? And I'm going to add it\nwith this singleton tuple.",
    "start": "674500",
    "end": "680800"
  },
  {
    "text": "So it's a tuple of one\ncharacter or one element. ",
    "start": "680800",
    "end": "686290"
  },
  {
    "text": "This element being\nt at position zero. So you have to sort of\nwrap your mind around",
    "start": "686290",
    "end": "691397"
  },
  {
    "text": "how this is working. So if t is going to be this\ntuple element right here,",
    "start": "691397",
    "end": "697389"
  },
  {
    "text": "then t at position zero is\ngoing to be this blue bar here. So it represents the integer\nportion of the tuple.",
    "start": "697390",
    "end": "705340"
  },
  {
    "text": "So as we're going\nthrough the loop, this nums is going to\nget populated with all of the integers from\nevery one of my tuple--",
    "start": "705340",
    "end": "712960"
  },
  {
    "text": "inside tuple objects.  So that's basically what\nthis line here is doing.",
    "start": "712960",
    "end": "718660"
  },
  {
    "text": " At the same time, I'm also\npopulating this words tuple.",
    "start": "718660",
    "end": "727420"
  },
  {
    "text": "And the words tuple is\na little bit different, because I'm not adding every\nsingle one of these string objects.",
    "start": "727420",
    "end": "733740"
  },
  {
    "text": "So t at position one being the\nstring part of the inner tuple. I'm actually adding the string\npart only if it's not already",
    "start": "733740",
    "end": "741829"
  },
  {
    "text": "in my words list. So here, I'm\nessentially grabbing",
    "start": "741830",
    "end": "746850"
  },
  {
    "text": "all of the unique\nstrings from my list. ",
    "start": "746850",
    "end": "752519"
  },
  {
    "text": "These last sort of three\nlines-- three, four lines here just do a little bit of\narithmetic on it saying,",
    "start": "752520",
    "end": "758640"
  },
  {
    "text": "OK, now I have\nall of the numbers here, what's the minimum\nout of all of these, and then what's the maximum\namount of all these?",
    "start": "758640",
    "end": "766350"
  },
  {
    "text": "And then this unique\nwords variable tells me how many unique words\ndo I have in my original tuple.",
    "start": "766350",
    "end": "774459"
  },
  {
    "text": "So this feels sort of generic,\nso let's run it on some data.",
    "start": "774460",
    "end": "779720"
  },
  {
    "text": "So here I have it-- I\ntested it on some test data.",
    "start": "779720",
    "end": "785000"
  },
  {
    "text": "And then I got some actual data. And this actual data\nthat I wanted to analyze",
    "start": "785000",
    "end": "790860"
  },
  {
    "text": "was Taylor Swift data. And representing\nthe integer portion",
    "start": "790860",
    "end": "798260"
  },
  {
    "text": "of the tuple representing a\nyear and the string portion of the tuple representing\nthe person who she",
    "start": "798260",
    "end": "805880"
  },
  {
    "text": "wrote a song about that year.  So some real world data that\nwe're working with here.",
    "start": "805880",
    "end": "815180"
  },
  {
    "text": "Very important that we\nknow this information. OK. So with this data,\nI can run it--",
    "start": "815180",
    "end": "821449"
  },
  {
    "text": "I can plug it into this\nfunction that I wrote up here. And I'm going to actually\ncomment this out,",
    "start": "821450",
    "end": "828020"
  },
  {
    "text": "so it doesn't get cluttered. And if I run it--\nthis is the part",
    "start": "828020",
    "end": "838660"
  },
  {
    "text": "where I'm calling my function. I'm calling it with\nthis data here. tswift being this\ntuple of tuples.",
    "start": "838660",
    "end": "847420"
  },
  {
    "text": "And what I get\nback is-- up here, line 38-- is the return from the\nfunction being a large tuple.",
    "start": "847420",
    "end": "856060"
  },
  {
    "text": "And that large tuple,\nI'm then assigning it to my own tuple in my program. And then I'm just writing out--\nprinting out some statement",
    "start": "856060",
    "end": "863080"
  },
  {
    "text": "here. So I'm getting the minimum\nyear, the maximum year, and then the number of people.",
    "start": "863080",
    "end": "868950"
  },
  {
    "text": "So I can show you that\nit works if I replace one of these names\nwith another one that I already have in here.",
    "start": "868950",
    "end": "875272"
  },
  {
    "text": "So instead of writing a\nsong about five people, she would have wrote a\nsong about four people. Yay, it worked. ",
    "start": "875272",
    "end": "888180"
  },
  {
    "text": "So that's tuples. And remeber or recall-- keep\nin mind, tuples were immutable.",
    "start": "888180",
    "end": "894894"
  },
  {
    "text": "Now we're going to look at\na very, very similar data structure to tuples\ncalled lists, except that instead of\nlists being immutable,",
    "start": "894894",
    "end": "902890"
  },
  {
    "text": "lists are going to\nbe mutable objects. So much like lists,\nthey're going",
    "start": "902890",
    "end": "909170"
  },
  {
    "text": "to contain elements of any\ntype or objects of any type. You denote them with--\nyou denote a list",
    "start": "909170",
    "end": "915870"
  },
  {
    "text": "with square brackets\ninstead of parentheses. And the difference\nbeing that they're",
    "start": "915870",
    "end": "922180"
  },
  {
    "text": "going to be immutable\nobjects instead of immutable. So creating an\nempty list, you just",
    "start": "922180",
    "end": "929230"
  },
  {
    "text": "do open close square brackets. You can have a list of\nelements of different types,",
    "start": "929230",
    "end": "936420"
  },
  {
    "text": "even a list of lists.",
    "start": "936420",
    "end": "942160"
  },
  {
    "text": "So one of the\nelements being a list.  As usual, you can\napply length on a list,",
    "start": "942160",
    "end": "949170"
  },
  {
    "text": "and that tells you how\nmany elements are in it. This is going to tell\nyou how many elements are in your list l.",
    "start": "949170",
    "end": "955380"
  },
  {
    "text": "So it's not going to look\nany further than that. So it's going to say, this is\nan integer, this is a string, this is an integer,\nthis is a list.",
    "start": "955380",
    "end": "962410"
  },
  {
    "text": "It's not going to say how many\nelements are in this list. It's just going to look at the\nouter-- the shell of elements.",
    "start": "962410",
    "end": "971709"
  },
  {
    "text": "Indexing and slicing\nworks the same way. So l at position 0\ngives you the value 2.",
    "start": "971710",
    "end": "977950"
  },
  {
    "text": "You can index into a list,\nand then do something with the value\nthat you get back. So l at position 2 says--\nthat's this value there",
    "start": "977950",
    "end": "985090"
  },
  {
    "text": "and add one to it. L at position 3, that's\ngoing to be this list here.",
    "start": "985090",
    "end": "992271"
  },
  {
    "text": "Notice it evaluates\nto another list.  You're not allowed\nto index outside",
    "start": "992271",
    "end": "998500"
  },
  {
    "text": "of the length of the list. So that's going to give you\nan error, because we only have four elements. ",
    "start": "998500",
    "end": "1005150"
  },
  {
    "text": "And you can also have\nexpressions for your index. So this-- Python just replaces\ni with 2 here and says,",
    "start": "1005150",
    "end": "1013550"
  },
  {
    "text": "what's l at position 1? And then grabs\nthat from in there. OK. So very, very similar to\nthe kinds of operations",
    "start": "1013550",
    "end": "1020390"
  },
  {
    "text": "we've seen on\nstrings and tuples. The one difference,\nand that's what we're going to focus on\nfor the rest of this class,",
    "start": "1020390",
    "end": "1027045"
  },
  {
    "text": "is that lists are\nmutable objects. So what does that\nmean internally?",
    "start": "1027045",
    "end": "1033089"
  },
  {
    "text": "Internally, that means\nlet's say we have a list l, and we assign it-- sorry. Let's say we have a variable l\nthat's going to point to a list",
    "start": "1033089",
    "end": "1041880"
  },
  {
    "text": "with three elements,\n2, 1, and 3. OK. They're all-- each\nelement is an integer.",
    "start": "1041880",
    "end": "1049770"
  },
  {
    "text": "When we were dealing with\ntuples or with strings, if we re-assign-- if we try\nto do this line right here,",
    "start": "1049770",
    "end": "1056880"
  },
  {
    "text": "we've had an error. But this is actually\nallowed with lists. So when you execute\nthat line, Python",
    "start": "1056880",
    "end": "1064070"
  },
  {
    "text": "is going to look at\nthat middle element, and it's going to change\nits value from a 1 to a 5.",
    "start": "1064070",
    "end": "1070846"
  },
  {
    "text": "And that's just due to the\nmutability nature of the list. ",
    "start": "1070846",
    "end": "1076990"
  },
  {
    "text": "So notice that this list\nvariable, this variable l,",
    "start": "1076990",
    "end": "1082120"
  },
  {
    "text": "which originally\npointed to this list, points to the exact same list. We haven't created a\nnew object in memory.",
    "start": "1082120",
    "end": "1088750"
  },
  {
    "text": "We're just modifying the\nsame object in memory. And you're going to see\nwhy this is important",
    "start": "1088750",
    "end": "1094000"
  },
  {
    "text": "as we look at a few\nside effects that can happen when you have this. ",
    "start": "1094000",
    "end": "1102240"
  },
  {
    "text": "So I've said this a\ncouple of times before, but it'll make your\nlife a lot easier",
    "start": "1102240",
    "end": "1112000"
  },
  {
    "text": "if you try to think\nof-- when you want to iterate through a list if\nyou try to think about iterating",
    "start": "1112000",
    "end": "1118299"
  },
  {
    "text": "through the elements directly. It's a lot more Pythonic. I've used that word before.",
    "start": "1118300",
    "end": "1123679"
  },
  {
    "text": "So this is sort of\na common pattern that you're going to see where\nyou're iterating over the list elements directly.",
    "start": "1123680",
    "end": "1129460"
  },
  {
    "text": "We've done it over tuples. We've done it over strings.  So these are identical codes.",
    "start": "1129460",
    "end": "1135670"
  },
  {
    "text": "They do the exact same\nthing, except on the left, you're going from-- you're going\nthrough 0, 1, 2, 3, and so on.",
    "start": "1135670",
    "end": "1145010"
  },
  {
    "text": "And then you're indexing into\neach one of these numbers",
    "start": "1145010",
    "end": "1152150"
  },
  {
    "text": "to get the element value. Whereas on the right,\nthis loop variable i",
    "start": "1152150",
    "end": "1158480"
  },
  {
    "text": "is going to have the\nelement value itself. So this code on the\nright is a lot cleaner.",
    "start": "1158480",
    "end": "1164315"
  },
  {
    "text": " OK. So now let's look\nat some operations",
    "start": "1164315",
    "end": "1171460"
  },
  {
    "text": "that we can do on lists. So there's a lot more\noperations that we can do on lists, because\nof their mutability aspect",
    "start": "1171460",
    "end": "1177970"
  },
  {
    "text": "than we can do on tuples\nor strings, for example. So here's a few of them. And they're going\nto take advantage",
    "start": "1177970",
    "end": "1183850"
  },
  {
    "text": "of this mutability concept. So we can add elements\ndirectly to the end of the list using this funky\nlooking notation L.append.",
    "start": "1183850",
    "end": "1193690"
  },
  {
    "text": "And then the element we\nwant to add to the end. And this operation\nmutates the list.",
    "start": "1193690",
    "end": "1200120"
  },
  {
    "text": "So if I have L is\nequal to 2, 1, 3, and I append the element\n5 to the end, then L-- the same L is going to\npoint to the same object,",
    "start": "1200120",
    "end": "1208930"
  },
  {
    "text": "except it's going to have\nan extra number at the end. 5. ",
    "start": "1208930",
    "end": "1214840"
  },
  {
    "text": "But now what's this dot? We haven't really\nseen this before. And it's going to\nbecome apparent",
    "start": "1214840",
    "end": "1222919"
  },
  {
    "text": "what it means in a\nfew lectures from now. But for the moment,\nyou can think of this dot as an operation.",
    "start": "1222920",
    "end": "1232020"
  },
  {
    "text": "It's like applying a function,\nexcept that the function that you're applying\ncan only work",
    "start": "1232020",
    "end": "1237870"
  },
  {
    "text": "on certain types of objects. So in this case,\nappend, for example,",
    "start": "1237870",
    "end": "1243690"
  },
  {
    "text": "is the function we're\ntrying to apply. And we want to\napply it to whatever",
    "start": "1243690",
    "end": "1250230"
  },
  {
    "text": "is before the dot,\nwhich is the object. And append has only been defined\nto work with a list object,",
    "start": "1250230",
    "end": "1257980"
  },
  {
    "text": "for example, which is why we're\nusing the dot in this case. ",
    "start": "1257980",
    "end": "1263480"
  },
  {
    "text": "We wouldn't be able to\nuse append on an integer, for example, because\nthat sort of function is not defined on the integer.",
    "start": "1263480",
    "end": "1270480"
  },
  {
    "text": "So for now, you'll sort\nof have to remember--",
    "start": "1270480",
    "end": "1276270"
  },
  {
    "text": "which are functions\nthat work with a dot and which are functions\nlike [? ln, ?] that",
    "start": "1276270",
    "end": "1282419"
  },
  {
    "text": "aren't with a dot. But in a couple of lectures, I\npromise it'll be a lot clearer.",
    "start": "1282420",
    "end": "1288274"
  },
  {
    "text": "So for now, just think\nof it as whatever is before the dot is the object\nyou're applying a function to,",
    "start": "1288274",
    "end": "1294220"
  },
  {
    "text": "and whatever is after the\ndot is the function you're applying on the object. ",
    "start": "1294220",
    "end": "1302540"
  },
  {
    "text": "So we can add things\nto the end of our list. We can also combine\nlists together using the plus operator.",
    "start": "1302540",
    "end": "1309190"
  },
  {
    "text": "The plus operator does\nnot mutate the list. Instead, it gives\nyou a new list that's the sum of those\ntwo lists combined.",
    "start": "1309190",
    "end": "1316480"
  },
  {
    "text": "So in this case, if L1 is\n2,1,3 and L2 is 4, 5, 6, when we add those\ntwo lists together,",
    "start": "1316480",
    "end": "1322400"
  },
  {
    "text": "that's going to give us an\nentirely new list leaving L1 and L2 the same.",
    "start": "1322400",
    "end": "1327850"
  },
  {
    "text": "And that's why we have to assign\nthe result of the addition",
    "start": "1327850",
    "end": "1336660"
  },
  {
    "text": "to a new list. Otherwise, the result is lost. ",
    "start": "1336660",
    "end": "1342150"
  },
  {
    "text": "If you want to mutate a\nlist directly and make it longer by the elements\nwithin another list, then",
    "start": "1342150",
    "end": "1350040"
  },
  {
    "text": "you can use this extend\nfunction or extent method.",
    "start": "1350040",
    "end": "1355860"
  },
  {
    "text": "And this is going to\nmutate L1 directly. So if L1 was 2,1,3, if you\nextend it by the list 0,6,",
    "start": "1355860",
    "end": "1364780"
  },
  {
    "text": "it's just going to tack\non 0,6 to L1 directly. So notice L1 has been mutated. ",
    "start": "1364780",
    "end": "1377860"
  },
  {
    "text": "So that's adding\nthings to lists. We can also delete\nthings from lists.",
    "start": "1377860",
    "end": "1383112"
  },
  {
    "text": "We don't just want to\nkeep adding to our lists, because then they\nbecome very, very big. So let's see how we can delete\nsome items from our list.",
    "start": "1383112",
    "end": "1389720"
  },
  {
    "text": "There's a few ways. First one being can\nuse this del function.",
    "start": "1389720",
    "end": "1395600"
  },
  {
    "text": "And this says\ndelete from the list L the element at this index.",
    "start": "1395600",
    "end": "1401980"
  },
  {
    "text": "So you give it\nthe index 0, 1, 2, or whatever you want\nto-- whatever index you want to delete\nthe element at.",
    "start": "1401980",
    "end": "1407857"
  },
  {
    "text": "If you just want to\ndelete the element at the end of the list,\nthat's the farthest right, you do L.pop.",
    "start": "1407857",
    "end": "1415150"
  },
  {
    "text": "If you want to remove a\nspecific element-- so you know there's somewhere in your\nlist there's the number 5,",
    "start": "1415150",
    "end": "1420640"
  },
  {
    "text": "and you want to delete it\nfrom the list-- then you say L.remove and you say what\nelement you want to remove.",
    "start": "1420640",
    "end": "1427450"
  },
  {
    "text": "And that only removes the\nvery first occurrence of it. So if there's two\nfives in your list, then it's only going to\nremove the very first one.",
    "start": "1427450",
    "end": "1435610"
  },
  {
    "text": "So let's take a look at this\nsort of sequence of commands.",
    "start": "1435610",
    "end": "1441010"
  },
  {
    "text": "So we have first L is equl\nto this long list here.",
    "start": "1441010",
    "end": "1446327"
  },
  {
    "text": "And I want to mention that\nall of these operations are going to mutate\nour list, which is why I wrote this comment here\nthat says assume that you're",
    "start": "1446327",
    "end": "1453630"
  },
  {
    "text": "doing these in order. So as you're doing\nthese in order, you're going to be\nmutating your list. And if you're\nmutating your list,",
    "start": "1453630",
    "end": "1459180"
  },
  {
    "text": "you have to remember\nthat you're working with this new mutated list.",
    "start": "1459180",
    "end": "1464256"
  },
  {
    "text": "So the first thing\nwe're doing is we're removing 2 from our list.",
    "start": "1464256",
    "end": "1469320"
  },
  {
    "text": "So when you remove\n2, this says look for an element with the value 2\nand take it away from the list.",
    "start": "1469320",
    "end": "1476310"
  },
  {
    "text": "So that's the very\nfirst one here. So the list we're left with\nis just everything after it.",
    "start": "1476310",
    "end": "1484350"
  },
  {
    "text": "Then I want to remove\n3 from the list and notice there's two of them. There's this 3 here and\nthere's this 3 here.",
    "start": "1484350",
    "end": "1489760"
  },
  {
    "text": "So we're going to remove\nonly the first one, which is this one here. So the list we're left\nwith is 1,6,3,7,0.",
    "start": "1489760",
    "end": "1499588"
  },
  {
    "text": "Then we're going to\ndelete from the list L the element at position 1.",
    "start": "1499588",
    "end": "1505670"
  },
  {
    "text": "So starting counting from\n0, the element at position 1 is this one here. So we've removed that, and\nwe're left with 1, 3, 7, 0.",
    "start": "1505670",
    "end": "1514940"
  },
  {
    "text": "And then when we\ndo L.pop, that's going to delete the element\nfurthest to the right. So at the end of the\nlist, which is that 0.",
    "start": "1514940",
    "end": "1520870"
  },
  {
    "text": " So then we're left\nwith only 1, 3, and 7.",
    "start": "1520870",
    "end": "1530279"
  },
  {
    "text": "And L.pop is often useful,\nbecause it tells you the return value from L.pop is\ngoing to be the value that it",
    "start": "1530280",
    "end": "1537970"
  },
  {
    "text": "removed. So in this case, it's\ngoing to return 0. ",
    "start": "1537970",
    "end": "1543740"
  },
  {
    "text": "I want to mention, though,\nthat some of the-- so these functions all mutate the list.",
    "start": "1543740",
    "end": "1549470"
  },
  {
    "text": "You have to be careful\nwith return values. So these are all-- you\ncan think of all of these",
    "start": "1549470",
    "end": "1555050"
  },
  {
    "text": "as functions that\noperate on the list. Except that what these functions\ndo is they take in the list,",
    "start": "1555050",
    "end": "1560540"
  },
  {
    "text": "and they modify it. But as functions, they\nobviously return something",
    "start": "1560540",
    "end": "1565760"
  },
  {
    "text": "back to whoever called them. And oftentimes, they're going\nto return the value none.",
    "start": "1565760",
    "end": "1571490"
  },
  {
    "text": "So for example, if you are\ngoing to do L.remove 2, and you print that out, that\nmight print out none for you.",
    "start": "1571490",
    "end": "1578900"
  },
  {
    "text": "So you can't just assign the\nvalue of this to a variable and expect it to be\nthe mutated list.",
    "start": "1578900",
    "end": "1586580"
  },
  {
    "text": "The list got mutated. The list that got\nmutated is the list that was passed into to here.",
    "start": "1586580",
    "end": "1592100"
  },
  {
    "text": "We're going look at one\nexample in a few slides that's going to show this. OK. Another thing that we can do,\nand this is often useful when",
    "start": "1592100",
    "end": "1599330"
  },
  {
    "text": "you're working with\ndata, is to convert lists to strings and then\nstrings to lists.",
    "start": "1599330",
    "end": "1605420"
  },
  {
    "text": "Sometimes it might be useful\nto work with strings as opposed to a list and vice versa.",
    "start": "1605420",
    "end": "1612809"
  },
  {
    "text": "So this first line here,\nlist s takes in a string and casts it to a list.",
    "start": "1612810",
    "end": "1618770"
  },
  {
    "text": "So much like when we cast\na float to an integer, for example. You're just casting a\nstring to a list here.",
    "start": "1618770",
    "end": "1624950"
  },
  {
    "text": "And when you do\nthat up this line-- so if this is your s\nhere-- when you do list s,",
    "start": "1624950",
    "end": "1629990"
  },
  {
    "text": "this is going to\ngive you a list-- looks like this-- where\nevery single character in s is going to be its own element.",
    "start": "1629990",
    "end": "1636919"
  },
  {
    "text": "So that means every character\nis going to be a string, and it's going to be\nseparated by a comma, so including spaces.",
    "start": "1636920",
    "end": "1641924"
  },
  {
    "text": " Sometimes you don't want\neach character in the list",
    "start": "1641925",
    "end": "1647820"
  },
  {
    "text": "to be its own element. Sometimes you want, for example,\nif you're given a sentence, you might want to have\neverything in between spaces",
    "start": "1647820",
    "end": "1654960"
  },
  {
    "text": "being its own element. So that will give you every word\nin the sentence, for example. ",
    "start": "1654960",
    "end": "1661230"
  },
  {
    "text": "In that case, you're\ngoing to use split. In this case, I've split\nover the less than sign.",
    "start": "1661230",
    "end": "1667490"
  },
  {
    "text": "But again, if you're doing\nthe sentence example, you might want to\nsplit on the space.",
    "start": "1667490",
    "end": "1674360"
  },
  {
    "text": "So this is going to take\neverything in between the sign that you're interested in-- in\nthis case, the less than sign--",
    "start": "1674360",
    "end": "1679910"
  },
  {
    "text": "and it's going to set it as a\nseparate element in the list. ",
    "start": "1679910",
    "end": "1687620"
  },
  {
    "text": "So that's how you\nconvert strings to lists. And sometimes\nyou're given a list,",
    "start": "1687620",
    "end": "1694075"
  },
  {
    "text": "and you might want to\nconvert it to a string. So that's where this join\nmethod or function is useful.",
    "start": "1694075",
    "end": "1701880"
  },
  {
    "text": "So this is an empty string. So it's just open\nclose quote right away. No space. So this just joins every one\nof the elements in the list",
    "start": "1701880",
    "end": "1710531"
  },
  {
    "text": "together. So it'll return the string abc. And then you can join on any\ncharacter that you would want.",
    "start": "1710531",
    "end": "1715630"
  },
  {
    "text": "So in this case, you can\njoin on the underscore. So it'll put whatever characters\nin here in between every one",
    "start": "1715630",
    "end": "1721320"
  },
  {
    "text": "of the elements in your list. So pretty useful functions.",
    "start": "1721320",
    "end": "1728220"
  },
  {
    "text": "OK. Couple other operations\nwe can do on lists-- and these are also pretty\nuseful-- is to sort lists",
    "start": "1728220",
    "end": "1733870"
  },
  {
    "text": "and to reverse lists\nand many, many others in the Python documentation.",
    "start": "1733870",
    "end": "1741740"
  },
  {
    "text": "So sort and sorted both\nsort lists, but one of them",
    "start": "1741740",
    "end": "1746809"
  },
  {
    "text": "mutates the list and\nthe other one does not. And sometimes it's\nuseful to use one, and sometimes it's\nuseful to use the other.",
    "start": "1746810",
    "end": "1754070"
  },
  {
    "text": "So if I have this list\nL is equal to 9,6,0,3,",
    "start": "1754070",
    "end": "1759549"
  },
  {
    "text": "sorted-- you can think\nof it as giving me the sorted version\nof L-- gives you back",
    "start": "1759550",
    "end": "1767610"
  },
  {
    "text": "the sorted version of L. So\nit returns a new list that's the sorted version of the input\nlist and does not mutate L.",
    "start": "1767610",
    "end": "1774690"
  },
  {
    "text": "So it keeps L the\nexact same way.  So this will be replaced\nby the sorted version",
    "start": "1774690",
    "end": "1782600"
  },
  {
    "text": "of the list, which you\ncan assign to a variable, and then do whatever\nyou want with it. Like L2 is equal to\nsorted L, for example.",
    "start": "1782600",
    "end": "1790845"
  },
  {
    "text": " And it keeps L the same.",
    "start": "1790845",
    "end": "1795940"
  },
  {
    "text": "On the other hand, if you\njust want to mutate L, and you don't care about getting\nanother copy that's sorted,",
    "start": "1795940",
    "end": "1800950"
  },
  {
    "text": "you just do L.sort. And that's going to\nautomatically sort L for you,",
    "start": "1800950",
    "end": "1807049"
  },
  {
    "text": "and L now-- L is now the\nsorted version of L. Similarly,",
    "start": "1807050",
    "end": "1814220"
  },
  {
    "text": "reverse is going to take L and\nreverse all the character-- all the elements in it. So the last one is the first\none, the second to last one",
    "start": "1814220",
    "end": "1821173"
  },
  {
    "text": "is the second one, and so on. So lists are mutable.",
    "start": "1821173",
    "end": "1826520"
  },
  {
    "text": "We've said that so many\ntimes this lecture. But what exactly does that mean? What implications\ndoes that have?",
    "start": "1826520",
    "end": "1833690"
  },
  {
    "text": "Once again, this next part\nof the lecture, Python tutor.",
    "start": "1833690",
    "end": "1839480"
  },
  {
    "text": "Just paste all the code\nin and go step by step to see exactly what's happening.",
    "start": "1839480",
    "end": "1847420"
  },
  {
    "text": "So lists are mutable. ",
    "start": "1847420",
    "end": "1852460"
  },
  {
    "text": "As you have variable\nnames-- so for example, L is equal to some\nlist-- that L is",
    "start": "1852460",
    "end": "1860710"
  },
  {
    "text": "going to be pointing\nto the list in memory. And since it's a mutable\nobject, this list,",
    "start": "1860710",
    "end": "1866570"
  },
  {
    "text": "you can have more\nthan one variable that points to the exact\nsame object in memory.",
    "start": "1866570",
    "end": "1873250"
  },
  {
    "text": "And if you have more\nthan one variable that points to the same\nobject in memory, if that object in\nmemory is changed, then",
    "start": "1873250",
    "end": "1880340"
  },
  {
    "text": "when you access it through\nany one of these variables, they're all going to give\nyou the changed object value.",
    "start": "1880340",
    "end": "1890860"
  },
  {
    "text": "So the key phrase\nto keep in mind when you're dealing\nwith lists is what side effects could happen?",
    "start": "1890860",
    "end": "1896050"
  },
  {
    "text": "If you're mutating a list,\nif you're doing operations on lists, what side effects--\nwhat variables might",
    "start": "1896050",
    "end": "1903370"
  },
  {
    "text": "be affected by this change? Let's come back down\nto earth for a second.",
    "start": "1903370",
    "end": "1909250"
  },
  {
    "text": "This will wake a\nlot of people up.  So let's do an\nanalogy with people.",
    "start": "1909250",
    "end": "1917940"
  },
  {
    "text": "Let's say we have a person. A person-- this\ncase, Justin Bieber-- is going to be an object.",
    "start": "1917940",
    "end": "1925350"
  },
  {
    "text": "I'm an object. I'm like the number three. Bieber's an object. He's like number five.",
    "start": "1925350",
    "end": "1930690"
  },
  {
    "text": "Different objects. Were both of type people. OK.",
    "start": "1930690",
    "end": "1936940"
  },
  {
    "text": "Let's say a person has\ndifferent attributes. Let's say we can--\nlet's say he gets",
    "start": "1936940",
    "end": "1943870"
  },
  {
    "text": "two attributes to begin with. He's a singer and he's rich. ",
    "start": "1943870",
    "end": "1950530"
  },
  {
    "text": "I can refer to this person\nobject by many different names. His full name, his stage\nname, all of the fan girls",
    "start": "1950530",
    "end": "1956980"
  },
  {
    "text": "call him by these\nnames, people who dislike him call\nhim by other names that they didn't put up here.",
    "start": "1956980",
    "end": "1963490"
  },
  {
    "text": "But he's known by all\nthese different names. They're all aliases or nicknames\nthat point to this same person",
    "start": "1963490",
    "end": "1968560"
  },
  {
    "text": "object. OK. So originally, let's say\nI say Justin Bieber is",
    "start": "1968560",
    "end": "1973720"
  },
  {
    "text": "a singer and rich. Those are the two\nattributes I've originally assigned to him. And then let's say I want to\nassign a different attribute",
    "start": "1973720",
    "end": "1980860"
  },
  {
    "text": "to him and say Justin\nBieber's a singer, rich, and a troublemaker. I'm being kind here.",
    "start": "1980860",
    "end": "1987929"
  },
  {
    "text": "OK. So if I say Justin Bieber\nhas these three attributes-- so it's the same person\nI'm referring to-- then",
    "start": "1987930",
    "end": "1995160"
  },
  {
    "text": "all of his nicknames\nare going to refer to this exact same person. So all of his\nnicknames or aliases",
    "start": "1995160",
    "end": "2003289"
  },
  {
    "text": "will refer to the\nsame person object with these changed attributes.",
    "start": "2003290",
    "end": "2008590"
  },
  {
    "text": "Does that makes sense? OK. So that sort of idea\narises in lists.",
    "start": "2008590",
    "end": "2015549"
  },
  {
    "text": "So a list is like\na person object whose value-- whose attributes\ncan change, for example.",
    "start": "2015550",
    "end": "2020940"
  },
  {
    "text": "And as they change, all\nof the different aliases for this object will point\nto this changed object.",
    "start": "2020940",
    "end": "2026525"
  },
  {
    "text": " So let's see a few examples. I apologize if this\nis a little small,",
    "start": "2026525",
    "end": "2033640"
  },
  {
    "text": "but this I basically\ncopied and pasted from the Python\ntutor, which is just",
    "start": "2033640",
    "end": "2038860"
  },
  {
    "text": "from the code from\ntoday's lecture. So I have these\nlines of code here.",
    "start": "2038860",
    "end": "2045130"
  },
  {
    "text": "The first couple of\nlines really just show what happens\nwhen you're dealing with non-mutable objects. So with non-mutable\nobjects, you have",
    "start": "2045130",
    "end": "2051429"
  },
  {
    "text": "two separate objects that\nget their own values, and that's it. End of story.",
    "start": "2051429",
    "end": "2057010"
  },
  {
    "text": "With lists, however,\nthere's something different that happens. So I have warm is a variable.",
    "start": "2057010",
    "end": "2065260"
  },
  {
    "text": "And it's going to be\nequal to this list. So warm is going to\npoint to this list here. Red, yellow, orange.",
    "start": "2065260",
    "end": "2071149"
  },
  {
    "text": "It contains three elements. Hot is equal to warm. It means I'm creating\nan alias for this list.",
    "start": "2071150",
    "end": "2079080"
  },
  {
    "text": "And the alias is going to\nbe with this variable hot. So notice warm and hot point\nto the exact same object.",
    "start": "2079080",
    "end": "2088879"
  },
  {
    "text": "So on line 8 when I append\nthis string pink to my object,",
    "start": "2088880",
    "end": "2094869"
  },
  {
    "text": "since both of\nthese two variables point to the exact\nsame object, if I'm trying to access this object\nthrough either variable,",
    "start": "2094870",
    "end": "2103000"
  },
  {
    "text": "they're both going to\nprint out the same thing. ",
    "start": "2103000",
    "end": "2108329"
  },
  {
    "text": "And that's the side effect. That's the side effect\nof lists mutable. ",
    "start": "2108330",
    "end": "2117299"
  },
  {
    "text": "If you want to create an\nentirely new copy of the list, then you can clone it,\nwhich sounds really cool.",
    "start": "2117300",
    "end": "2125220"
  },
  {
    "text": "But really, it's just\nmaking a copy of the list. And you clone it using\nthis little notation here,",
    "start": "2125220",
    "end": "2131140"
  },
  {
    "text": "which is open close square\nbrackets with a colon. And we've sort of seen\nthis notation here.",
    "start": "2131140",
    "end": "2136180"
  },
  {
    "text": "And this tells Python\nthis is 0-- sorry. This is 0 and this is length.",
    "start": "2136180",
    "end": "2142780"
  },
  {
    "text": "Cool.  But it basically says\ntake every element,",
    "start": "2142780",
    "end": "2147940"
  },
  {
    "text": "create a new list with\nthose exact same elements, and assign it to\nthe variable chill.",
    "start": "2147940",
    "end": "2155670"
  },
  {
    "text": "So here, if I\noriginally have cool is equal to blue,\ngreen, gray right here, when I clone it on line\n2 with that funky notation,",
    "start": "2155670",
    "end": "2165180"
  },
  {
    "text": "I'm creating a new copy of it. And then on the\nnext line when I'm appending another\nelement to the copy,",
    "start": "2165180",
    "end": "2174000"
  },
  {
    "text": "notice I'm just\naltering the copy. The original stayed the\nsame, because I've cloned it.",
    "start": "2174000",
    "end": "2181360"
  },
  {
    "text": "So if you don't want to\nhave the side effects-- side effect issue, then\nyou should clone your variable-- your list.",
    "start": "2181360",
    "end": "2190300"
  },
  {
    "text": " So let's see a slightly\nmore complicated example",
    "start": "2190300",
    "end": "2199370"
  },
  {
    "text": "where you're going to see\nthe difference between sort and sorted in the context\nof this mutability and side",
    "start": "2199370",
    "end": "2208770"
  },
  {
    "text": "effects issue. OK. So once again, let's create this\nwarm is equal to red, yellow,",
    "start": "2208770",
    "end": "2214170"
  },
  {
    "text": "orange. So that's what warm is going\nto point to, this list.",
    "start": "2214170",
    "end": "2220019"
  },
  {
    "text": "And then sorted warm\nis equal to warm.sort. So .sort mutates.",
    "start": "2220020",
    "end": "2226500"
  },
  {
    "text": "So as soon as I do\nthat, that list warm is now the sorted version of it.",
    "start": "2226500",
    "end": "2233480"
  },
  {
    "text": "And notice that I've\nassigned the return of this to sorted warm. And the return is none,\nbecause L.sort or .sort mutated",
    "start": "2233480",
    "end": "2246170"
  },
  {
    "text": "the list. It didn't return a sorted\nversion of the list. It mutated the list itself.",
    "start": "2246170",
    "end": "2252349"
  },
  {
    "text": "OK. So when I print warm\nand I print sorted warm, I'm printing the mutated\nversion and then this one here.",
    "start": "2252350",
    "end": "2260480"
  },
  {
    "text": "Sorted, on the other\nhand, returns-- it doesn't-- sorted does not\nsort the list that's given",
    "start": "2260480",
    "end": "2270950"
  },
  {
    "text": "to it. And instead, it returns a\nsorted version of the list. So in this case, if cool is\nequal to these three colors--",
    "start": "2270950",
    "end": "2277820"
  },
  {
    "text": "gray, green, blue--\nif I do sorted cool, it's going to return the sorted\nversion of that list, which",
    "start": "2277820",
    "end": "2285350"
  },
  {
    "text": "is blue, green, gray. And it's assigned to the\nvariable sorted cool. So when I print them,\nit's going to show",
    "start": "2285350",
    "end": "2290796"
  },
  {
    "text": "me the two separate lists. One being the\noriginal unsorted one, and one being the\nsorted version.",
    "start": "2290796",
    "end": "2296330"
  },
  {
    "text": " Last ones a little\nbit more complicated,",
    "start": "2296330",
    "end": "2303680"
  },
  {
    "text": "but it shows that even\nthough you have nested-- even though you can have nested\nlists, you still-- you're not--",
    "start": "2303680",
    "end": "2313099"
  },
  {
    "text": "you don't escape this\nidea of side effects.",
    "start": "2313100",
    "end": "2320630"
  },
  {
    "text": "So first, I'm going to create\nwarm is equal to these two colors, yellow, orange.",
    "start": "2320630",
    "end": "2326180"
  },
  {
    "text": "So warm points to\nthese two colors. Hot is equal to this one\nlist-- a list with one element.",
    "start": "2326180",
    "end": "2334000"
  },
  {
    "text": "Bright colors is\ngoing to be a list. And the element inside\nthe list is a list itself.",
    "start": "2334000",
    "end": "2342360"
  },
  {
    "text": "So since it's a list--\nthis is your list, and the element inside here,\nwhich is a list itself,",
    "start": "2342360",
    "end": "2348240"
  },
  {
    "text": "is actually just pointing\nto whatever warm is. That object. ",
    "start": "2348240",
    "end": "2356700"
  },
  {
    "text": "Then I do-- then I append\nhot to my bright colors. So the next element\nhere is going",
    "start": "2356700",
    "end": "2362250"
  },
  {
    "text": "to be another list, which\nmeans it's just pointing to this other list here. It's not creating a copy of it.",
    "start": "2362250",
    "end": "2370164"
  },
  {
    "text": "So each one of\nthese elements here is actually just pointing\nto these two lists here.",
    "start": "2370164",
    "end": "2375540"
  },
  {
    "text": "So if I modified\neither one of these, then bright colors\nwould also be modified. So let's say I add pink\nhere to my hot list.",
    "start": "2375540",
    "end": "2385260"
  },
  {
    "text": "We have red and pink. Then notice that bright\ncolors-- the first element",
    "start": "2385260",
    "end": "2390729"
  },
  {
    "text": "points to this list,\nand the second element points to this list,\nwhich I've just modified.",
    "start": "2390729",
    "end": "2396459"
  },
  {
    "text": "Last thing is-- I'll\nlet you try this as an exercise in Python Tutor--\nbut the idea here being you",
    "start": "2396459",
    "end": "2402020"
  },
  {
    "text": "should be careful as you're\nwriting a for loop that iterates over a list that you're\nmodifying inside the list.",
    "start": "2402020",
    "end": "2408500"
  },
  {
    "text": "In this case, I'm trying\nto go through the list L1. And if I find an item\nthat's in L1 and L2,",
    "start": "2408500",
    "end": "2415130"
  },
  {
    "text": "I want to delete it from L1. So 1 and 2 are also in L2.",
    "start": "2415130",
    "end": "2420680"
  },
  {
    "text": "So I want to delete them from\nL1 and be left with 3, 4. However, the code on the\nleft here doesn't actually",
    "start": "2420680",
    "end": "2426200"
  },
  {
    "text": "do what I think it's\ndoing, because here I'm",
    "start": "2426200",
    "end": "2431710"
  },
  {
    "text": "modifying a list as\nI'm iterating over it. And behind the\nscenes, Python keeps this-- keeps track of the index\nand doesn't update the index",
    "start": "2431710",
    "end": "2440220"
  },
  {
    "text": "as you're changing the list. So it figures out the\nlength of the list to begin with and how\nmany indices it has.",
    "start": "2440220",
    "end": "2448490"
  },
  {
    "text": "It doesn't update it as you're\nremoving items from the list. So the solution to that is\nto make a copy of the list",
    "start": "2448490",
    "end": "2455589"
  },
  {
    "text": "first, iterate over the copy,\nwhich will remain intact,",
    "start": "2455590",
    "end": "2461530"
  },
  {
    "text": "and modify the list that you\nwant to modify inside the loop. So please run both of\nthese in the Python Tutor,",
    "start": "2461530",
    "end": "2468923"
  },
  {
    "text": "and you'll see that what ends\nup happening is on the left, you're going to skip\nover one element. So your code-- so that's\ngoing to be the wrong code.",
    "start": "2468924",
    "end": "2477880"
  },
  {
    "text": "All right. ",
    "start": "2477880",
    "end": "2487088"
  }
]