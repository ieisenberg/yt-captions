[
  {
    "text": "The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6350"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6350",
    "end": "13330"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13330",
    "end": "22537"
  },
  {
    "text": "PROFESSOR: All right, today we\ncontinue our exciting adventure into dynamic programming. Are you excited?",
    "start": "22537",
    "end": "28630"
  },
  {
    "text": "I'm excited, super excited. Dynamic programming,\nas you recall way back",
    "start": "28630",
    "end": "34190"
  },
  {
    "text": "before Thanksgiving, is a super\nexciting powerful technique to design algorithms, especially\nto solve optimization problems",
    "start": "34190",
    "end": "41690"
  },
  {
    "text": "where you want to maximize\nor minimize something. Last time, we saw how two\nalgorithms we already knew--",
    "start": "41690",
    "end": "49030"
  },
  {
    "text": "namely, how to compute the\nnth Fibonacci number and how to compute shortest\npaths via Bellman-Ford--",
    "start": "49030",
    "end": "56129"
  },
  {
    "text": "are really dynamic\nprograms in disguise. And indeed for, at\nleast for Bellman-Ford,",
    "start": "56130",
    "end": "61270"
  },
  {
    "text": "that's how they were invented,\nwas to apply a general technique which we're going to\nsee today in full generality,",
    "start": "61270",
    "end": "69159"
  },
  {
    "text": "more or less-- most of\nthis is generality-- in five easy steps. And we're going to see\nthat technique applied",
    "start": "69160",
    "end": "75570"
  },
  {
    "text": "to two new problems\nwhich are much more interesting than the ones\nwe've already solved-- namely, how to make your text\nlook nice in a paragraph,",
    "start": "75570",
    "end": "83170"
  },
  {
    "text": "where to break the lines. That's text justification. And how to win and make\nloads of money at blackjack.",
    "start": "83170",
    "end": "89340"
  },
  {
    "text": "So lots of practical\nstuff here, and we're going to see one\nnew technique for",
    "start": "89340",
    "end": "95979"
  },
  {
    "text": "general dynamic programming. These are some things\nI wrote last time. Actually, one of them I\ndidn't write last time.",
    "start": "95980",
    "end": "102500"
  },
  {
    "text": "In general, you can think\nof dynamic programming as a carefully executed\nbrute force search.",
    "start": "102500",
    "end": "107720"
  },
  {
    "text": "So in some sense,\nyour algorithm is going to be trying\nall the possibilities, but somehow avoiding\nthe fact that there",
    "start": "107720",
    "end": "114650"
  },
  {
    "text": "are exponentially many of them. By thinking of it\nin a clever way, you can reduce the\nexponential search space",
    "start": "114650",
    "end": "120409"
  },
  {
    "text": "down to a polynomial one,\neven though you're still not being very intelligent\nyou're still blindly trying",
    "start": "120410",
    "end": "125490"
  },
  {
    "text": "all possibilities. So that's the brute force part.",
    "start": "125490",
    "end": "130630"
  },
  {
    "text": "In more detail, the\nthree main techniques in dynamic programming are\nthe idea of guessing, the idea",
    "start": "130630",
    "end": "136610"
  },
  {
    "text": "that, oh, I want to find the\nbest way to solve a problem. Let's pick out some\nfeature of the solution",
    "start": "136610",
    "end": "143740"
  },
  {
    "text": "that I want to know. I don't know it, so\nI'll guess the answer-- meaning I'll try all the\npossibilities for that choice",
    "start": "143740",
    "end": "152540"
  },
  {
    "text": "and take the best one. So guessing is really central\nto dynamic programming.",
    "start": "152540",
    "end": "158020"
  },
  {
    "text": "Then we also use a\nrecursion, some way to express the solution to our\nproblem in terms of solutions",
    "start": "158020",
    "end": "166250"
  },
  {
    "text": "to sub-problems. So it's usually very\neasy to get a recursion for a lot of problems\nas long as they",
    "start": "166250",
    "end": "171660"
  },
  {
    "text": "have some kind of substructure. Like shortest paths, we had that\nsome paths of shortest paths were also shortest\npaths, so that was handy.",
    "start": "171660",
    "end": "179310"
  },
  {
    "text": "Usually the recursion by itself\nis exponential time, like even with Fibonacci numbers. But we add in this\ntechnique of memoization,",
    "start": "179310",
    "end": "186240"
  },
  {
    "text": "which is just once we compute an\nanswer we've stored in a lookup table, if we ever need that\nanswer again we reuse it",
    "start": "186240",
    "end": "192159"
  },
  {
    "text": "instead of recomputing it. So we store it. We write down in our memo\npad anything that we compute.",
    "start": "192160",
    "end": "199610"
  },
  {
    "text": "Those techniques, all\nthese techniques together give you, typically,\na polynomial time dynamic program-- when\nthey work, of course.",
    "start": "199610",
    "end": "206880"
  },
  {
    "text": "Memoization makes the\nrecursion polynomial time. The guessing is what is\ndoing a brute force search.",
    "start": "206880",
    "end": "213260"
  },
  {
    "text": "And magically, it all\nworks if you're careful. Another perspective-- kind\nof an orthogonal perspective",
    "start": "213260",
    "end": "221490"
  },
  {
    "text": "or another way of\nthinking about it, which I think should be\ncomfortable for you because we spent a lot of time doing\nshortest paths and expressing",
    "start": "221490",
    "end": "228170"
  },
  {
    "text": "problems that we care about in\nterms of shortest paths even if they don't look like\nit at first glance--",
    "start": "228170",
    "end": "233750"
  },
  {
    "text": "dynamic programming\nin some sense is always computing\nshortest paths in a DAG.",
    "start": "233750",
    "end": "240078"
  },
  {
    "text": "So you have some problem\nyou want to solve, like you have text you want to\nsplit up into lines so it looks nice in a paragraph, you\nexpress that problem somehow",
    "start": "240078",
    "end": "251100"
  },
  {
    "text": "as a directed acyclic graph. And then we know how to\ncompute shortest path in directed acyclic\ngraphs in linear time.",
    "start": "251100",
    "end": "258160"
  },
  {
    "text": "And that's basically what\ndynamic programming is doing. I didn't realize\nthis until last week,",
    "start": "258160",
    "end": "263760"
  },
  {
    "text": "so this is a new perspective. It's an experimental\nperspective. But I think it's helpful. It's actually-- dynamic\nprogramming is not that new.",
    "start": "263760",
    "end": "270910"
  },
  {
    "text": "It's all about how to be\nclever in setting up that DAG. But in the end, the\nalgorithm is very simple.",
    "start": "270910",
    "end": "277680"
  },
  {
    "text": "And then we had this\nother perspective-- back to this\nperspective, I guess.",
    "start": "277680",
    "end": "283580"
  },
  {
    "text": "In general, we have-- the real problem\nwe want to solve, we generalize it in some\nsense by considering",
    "start": "283580",
    "end": "290560"
  },
  {
    "text": "lots of different sub-problems\nthat we might care about. Like with Fibonacci, we had\nthe nth Fibonacci number.",
    "start": "290560",
    "end": "296700"
  },
  {
    "text": " We really just wanted\nthe nth Fibonacci number. But along the way, we're going\nto compute all f1 up to fn.",
    "start": "296700",
    "end": "304410"
  },
  {
    "text": "So those are our sub-problems. And if we compute\nthe amount of time we need to solve\neach sub-problem",
    "start": "304410",
    "end": "310270"
  },
  {
    "text": "and multiply that by the\nnumber of sub-problems, we get the total time\nrequired by the algorithm. This is a general true fact.",
    "start": "310270",
    "end": "318130"
  },
  {
    "text": "And the fun part here is we get\nto treat any recursive calls in this recursion as\nfree, as constant time,",
    "start": "318130",
    "end": "326009"
  },
  {
    "text": "because we really only\npay for it first time. That's counted out here. The second time we call\nit, it's already memoized,",
    "start": "326010",
    "end": "333360"
  },
  {
    "text": "so we don't have to pay for it. So this is, in some\nsense, an amortization,",
    "start": "333360",
    "end": "338430"
  },
  {
    "text": "if you remember amortization\nfrom table doubling. We're just changing\naround when we",
    "start": "338430",
    "end": "344030"
  },
  {
    "text": "count the cost of\neach sub-problem, and then this is the\ntotal running time.",
    "start": "344030",
    "end": "349390"
  },
  {
    "text": "OK, so that's the\nspirit we saw already. I'm going to give you\nthe five general steps,",
    "start": "349390",
    "end": "355180"
  },
  {
    "text": "and then we're going to apply\nthem to two new problems. So five easy steps to\ndynamic programming.",
    "start": "355180",
    "end": "367590"
  },
  {
    "start": "367590",
    "end": "373973"
  },
  {
    "text": "Unfortunately, these are not\nnecessarily sequential steps. They're a little\nbit interdependent, and so \"easy\"\nshould be in quotes.",
    "start": "373973",
    "end": "381390"
  },
  {
    "text": "This is how you would\nexpress a dynamic program,",
    "start": "381390",
    "end": "386510"
  },
  {
    "text": "and in some sense\nhow you'd invent one, but in particular how\nyou would explain one.",
    "start": "386510",
    "end": "392740"
  },
  {
    "text": "OK, let me get to\nthe main steps first. ",
    "start": "392740",
    "end": "402889"
  },
  {
    "text": "First step is to figure out\nwhat your sub-problems are going to be.",
    "start": "402890",
    "end": "408540"
  },
  {
    "text": "Second part is to\nguess something. Third step is to relate\nsub-problem solutions, usually",
    "start": "408540",
    "end": "419780"
  },
  {
    "text": "with a recurrence. I guess always\nwith a recurrence. ",
    "start": "419780",
    "end": "428099"
  },
  {
    "text": "Fourth step is to actually\nbuild an algorithm. ",
    "start": "428100",
    "end": "440730"
  },
  {
    "text": "And we saw two ways\nto do that last time. One is to use recursion\nand memoization, which is the way I like\nto think about it.",
    "start": "440730",
    "end": "446470"
  },
  {
    "text": "But if you prefer, you can\nfollow the bottom up approach.",
    "start": "446470",
    "end": "453150"
  },
  {
    "text": "And usually that's\ncalled building a table. ",
    "start": "453150",
    "end": "460910"
  },
  {
    "text": "And that one's basically to turn\nour recursion and memoization, which is kind of fancy,\ninto a bunch of for loops,",
    "start": "460910",
    "end": "467560"
  },
  {
    "text": "which is pretty simple. And this is going to be more\npractical, faster, and so on. And depending on your\npreference, one of them",
    "start": "467560",
    "end": "474680"
  },
  {
    "text": "is more intuitive\nthan the other. It doesn't matter. They have the same running\ntime, more or less,",
    "start": "474680",
    "end": "482306"
  },
  {
    "text": "in the worst case. ",
    "start": "482306",
    "end": "487860"
  },
  {
    "text": "Then the fifth step is to\nsolve the original problem. ",
    "start": "487860",
    "end": "498945"
  },
  {
    "text": "All right, so we've sort\nof seen this before. In fact I have, over\nhere, a convenient table.",
    "start": "498946",
    "end": "505740"
  },
  {
    "text": " It's called cheating. The two problems we saw\nlast time, Fibonacci numbers",
    "start": "505740",
    "end": "512925"
  },
  {
    "text": "and shortest paths. And I've got steps\none, two, three, four-- I ran out of room, so I\ndidn't write five yet.",
    "start": "512925",
    "end": "519440"
  },
  {
    "text": "But we'll get there. So what are our sub-problems? Well, for Fibonacci,\nthey were f1 through fn.",
    "start": "519440",
    "end": "527430"
  },
  {
    "text": "So there were n\ndifferent sub-problems. And in general because\nof this formula,",
    "start": "527430",
    "end": "533010"
  },
  {
    "text": "we want to count how many\nsub-problems are there. So number of\nsub-problems is-- this",
    "start": "533010",
    "end": "547829"
  },
  {
    "text": "is what we need to\ndo algorithmically. And then for analysis,\nwe want to count number",
    "start": "547830",
    "end": "553279"
  },
  {
    "text": "of sub-problems for step one. And so for Fibonacci\nthere were n of them. For shortest paths, we defined\nthis delta sub k of sv.",
    "start": "553280",
    "end": "564490"
  },
  {
    "text": "This was the\nshortest path from s to v they uses at most k edges. That was sort of what\nBellman-Ford was doing.",
    "start": "564490",
    "end": "571839"
  },
  {
    "text": "And the number of\ndifferent sub-problems here was v squared, because we\nhad to do this for every vertex",
    "start": "571840",
    "end": "577990"
  },
  {
    "text": "v and we had to do it for\nevery value of k between 0 and v minus 1. v minus was\nis the number of rounds",
    "start": "577990",
    "end": "584850"
  },
  {
    "text": "we need in Bellman-Ford. So it's v times v,\ndifferent sub-problems,",
    "start": "584850",
    "end": "590720"
  },
  {
    "text": "b squared of them. OK, second thing was we\nwanted to solve our problem.",
    "start": "590720",
    "end": "596540"
  },
  {
    "text": "And we do that by guessing\nsome feature of the solution. In Fibonacci, there\nwas no guessing.",
    "start": "596540",
    "end": "603149"
  },
  {
    "text": "So the number of different\nchoices for your guess is one. There's nothing--\nThere's only one choice, which is to do nothing.",
    "start": "603150",
    "end": "611120"
  },
  {
    "text": "And for shortest paths,\nwhat we guessed was-- we know we're looking for some\npath from s v. B Let's guess",
    "start": "611120",
    "end": "618800"
  },
  {
    "text": "what the last edge is. There's some last\nedge from u to v,",
    "start": "618800",
    "end": "625019"
  },
  {
    "text": "assuming the path has more\nthan one edge-- or more than zero edges. When could the edge possibly be?",
    "start": "625020",
    "end": "631230"
  },
  {
    "text": "Well, it's some\nincoming edge to v. So there's going to be\nindegree of v different choices",
    "start": "631230",
    "end": "636420"
  },
  {
    "text": "for that. And to account for the case that\nthat's zero, we do a plus 1. But that's not a big deal.",
    "start": "636420",
    "end": "643790"
  },
  {
    "text": "So that was the number\nof different choices. In general if we're\ngoing to guess something,",
    "start": "643790",
    "end": "649640"
  },
  {
    "text": "we need to write down\nthe number of choices.",
    "start": "649640",
    "end": "655456"
  },
  {
    "text": "For the guess, how many\ndifferent possibilities are there?",
    "start": "655456",
    "end": "661250"
  },
  {
    "text": "That's our analysis. OK, the next thing\nis the recurrence.",
    "start": "661250",
    "end": "669150"
  },
  {
    "text": "That's step three. We want to relate all\nthe sub-problem solutions to each other.",
    "start": "669150",
    "end": "674310"
  },
  {
    "text": "For Fibonacci,\nthat's the definition of Fibonacci numbers. So it's really easy. For shortest paths,\nwe wrote this min.",
    "start": "674310",
    "end": "682774"
  },
  {
    "text": "In general, typically\nit's a min or a max, whatever you're\ntrying to solve here. We're doing shortest paths.",
    "start": "682775",
    "end": "688829"
  },
  {
    "text": "You could do longest\npaths in the same way. So you compute them in of\ndelta sub sk minus 1 of su.",
    "start": "688830",
    "end": "696550"
  },
  {
    "text": "The idea is we want to compute\nthis part of the path, the s to u part.",
    "start": "696550",
    "end": "702450"
  },
  {
    "text": "And we know that has one\nfewer edge, because we just guessed what the last edge was. Except we don't really know\nwhat the last edge was,",
    "start": "702450",
    "end": "709100"
  },
  {
    "text": "so we have to try them all. We try all the\nincoming edges into v-- that's this part-- and for\neach of them we compute--",
    "start": "709100",
    "end": "716810"
  },
  {
    "text": "I forgot something here. This is the cost of the\nfirst part of the path. Then I also need to do plus\nthe weight of the uv edge.",
    "start": "716810",
    "end": "725470"
  },
  {
    "text": "That will be the total\ncost of that path. You add those up, you do\nit for every incoming edge.",
    "start": "725470",
    "end": "732350"
  },
  {
    "text": "That is, in some sense,\nconsidering all possible paths. Assuming you find the\nshortest path from s to u,",
    "start": "732350",
    "end": "738250"
  },
  {
    "text": "that's going to be the\nbest way to get there. And then use some edge from\nu to v for some choice of u.",
    "start": "738250",
    "end": "745380"
  },
  {
    "text": "This will try all of them. So it's really trying\nall the possibilities. So it's pretty clear\nthis is correct if there",
    "start": "745380",
    "end": "751010"
  },
  {
    "text": "are no negative weight cycles. You have to prove some things. We've already proved them. It's just slow, but once you\nadd memoization, it's fast.",
    "start": "751010",
    "end": "760390"
  },
  {
    "text": "Now, how long does it take\nto evaluate this recurrence, constant time, if you\ndon't count the recursive",
    "start": "760390",
    "end": "766380"
  },
  {
    "text": "calls or count them as constant? Over here, we're taking a min\nover indegree of v things.",
    "start": "766380",
    "end": "772770"
  },
  {
    "text": "So we have to pay\nindegree of v time, again counting the\nrecursions as free.",
    "start": "772770",
    "end": "778020"
  },
  {
    "text": "But for each one of them,\nwe have to do an addition. So it's constant work per guess.",
    "start": "778020",
    "end": "784458"
  },
  {
    "text": "And this is quite common. Often, the number of\nguesses and the running time per sub-problem are the\nsame, the constant factors.",
    "start": "784458",
    "end": "791553"
  },
  {
    "text": "Sometimes they're different. We'll see some examples today. OK, step four.",
    "start": "791553",
    "end": "797065"
  },
  {
    "text": " Let's see. So here we evaluate the\ntime per sub-problem.",
    "start": "797065",
    "end": "804769"
  },
  {
    "text": "Once you have the recurrence,\nthat becomes clear. You want to make sure\nthat's polynomial. Often these are the same.",
    "start": "804770",
    "end": "810450"
  },
  {
    "text": " And then we add the recursive\nmemorize or build a DP table.",
    "start": "810450",
    "end": "818061"
  },
  {
    "text": "I'm not going to write those. We did it for Fibonacci\nlast time, shortest paths. Pretty easy.",
    "start": "818062",
    "end": "823780"
  },
  {
    "text": "And in general, what\nwe need to check here",
    "start": "823780",
    "end": "829470"
  },
  {
    "text": "is that the sub problem\nrecurrence is acyclic.",
    "start": "829470",
    "end": "835000"
  },
  {
    "start": "835000",
    "end": "844750"
  },
  {
    "text": "In other words, that it\nhas a topological order so we can use topological sort.",
    "start": "844750",
    "end": "851400"
  },
  {
    "text": "We don't actually use\ntopological algorithm usually. You can just think about it. In the case of\nFibonacci numbers,",
    "start": "851400",
    "end": "857600"
  },
  {
    "text": "it's clear you want to\nstart with the smallest one and end up with the biggest one. You can't do the reverse,\nbecause then when you're trying to computer the\nnth you don't have the ones",
    "start": "857600",
    "end": "864685"
  },
  {
    "text": "you need, the n minus\n1 and n minus 2. But if you do it in\nthis order, you always have the one you need by\nthe time you get there.",
    "start": "864685",
    "end": "870560"
  },
  {
    "text": "In general, there's\na DAG there-- and for Fibonacci,\nit was like this.",
    "start": "870560",
    "end": "880450"
  },
  {
    "text": "Every node depends\non the previous and the second previous. But you just choose\na topological order,",
    "start": "880450",
    "end": "886570"
  },
  {
    "text": "which is here left to\nright, and you're golden. And these are\nactually the for loops",
    "start": "886570",
    "end": "892240"
  },
  {
    "text": "you get in the bottom of DP. For shortest paths, you\nhave to think a little bit. You have to do the for\nloop over k on the outside,",
    "start": "892240",
    "end": "900160"
  },
  {
    "text": "the for loop over\nV on the inside. The reverse does not work. I won't go through that, but\nwe drew the DAG last time.",
    "start": "900160",
    "end": "907380"
  },
  {
    "text": "And that's the main thing\nyou need to do here. And then, of course,\nyou use this formula",
    "start": "907380",
    "end": "912709"
  },
  {
    "text": "to compute the overall\nrunning time, which is just multiplying this\nquantity with this quantity.",
    "start": "912710",
    "end": "919510"
  },
  {
    "start": "919510",
    "end": "925350"
  },
  {
    "text": "Total time. Then there's just\none last step that",
    "start": "925350",
    "end": "930602"
  },
  {
    "text": "usually isn't that big a deal,\nbut you have think about it. You need to make sure that\nthe problem you actually cared about solving gets solved.",
    "start": "930602",
    "end": "937820"
  },
  {
    "text": "In the case of Fibonacci\nand shortest paths, this is pretty clear. I didn't write it. ",
    "start": "937820",
    "end": "946623"
  },
  {
    "text": "We can do it on here. Solve the original problem. ",
    "start": "946623",
    "end": "954579"
  },
  {
    "text": "Fibonaci, it is Fn. And this is one of\nour sub-problems, so if we solve all\nof them, we're done. For shortest paths,\nit's basically",
    "start": "954580",
    "end": "961260"
  },
  {
    "text": "delta sub v minus 1 of\nsv for all v. That's",
    "start": "961260",
    "end": "970350"
  },
  {
    "text": "single source shortest paths. And by our\nBellman-Ford analysis, that gives us the\nright shortest paths.",
    "start": "970350",
    "end": "975880"
  },
  {
    "text": "There are no negative\nweight cycles. And sometimes this\nrequires extra time",
    "start": "975880",
    "end": "982420"
  },
  {
    "text": "to combine your solutions\nto get the real thing. Here of course, we just have the\nanswers, so writing them down",
    "start": "982420",
    "end": "989220"
  },
  {
    "text": "does not take very long. So that's the dominant\nrunning time-- which I didn't\nwrite, I should have",
    "start": "989220",
    "end": "995630"
  },
  {
    "text": "written in under for here-- this ends up being n,\nthis ends up being VE.",
    "start": "995630",
    "end": "1002601"
  },
  {
    "text": " OK, I don't want to spend\nmore time on those examples. Let's go to new things.",
    "start": "1002601",
    "end": "1008488"
  },
  {
    "start": "1008488",
    "end": "1027410"
  },
  {
    "text": "So first problem we're\ngoing to look at today is text justification. ",
    "start": "1027410",
    "end": "1041220"
  },
  {
    "text": "And the informal\nstatement of this problem is you're given\nsome text-- which",
    "start": "1041220",
    "end": "1046309"
  },
  {
    "text": "means a string, a whole\nbunch of characters. And we want to split\nthem into good lines.",
    "start": "1046310",
    "end": "1053195"
  },
  {
    "text": " The rules of the game\nhere are we're going to,",
    "start": "1053195",
    "end": "1059410"
  },
  {
    "text": "like in the early lectures\nof document distance where you have some definition\nof splitting a document",
    "start": "1059410",
    "end": "1064850"
  },
  {
    "text": "into words separated by spaces. And what we want to do is cut.",
    "start": "1064850",
    "end": "1071980"
  },
  {
    "text": "We can only cut between\nword boundaries. And we want to write\nsome text, it's",
    "start": "1071980",
    "end": "1078630"
  },
  {
    "text": "going to have some spaces in it. Then there's a new line,\nsomething like that.",
    "start": "1078630",
    "end": "1086270"
  },
  {
    "text": "And we want to justify our\ntext on the right here. And so we'd like to avoid big\ngaps like this because they",
    "start": "1086270",
    "end": "1091910"
  },
  {
    "text": "look ugly, they're hard to read. Now, if you use Microsoft Word--",
    "start": "1091910",
    "end": "1099460"
  },
  {
    "text": "at least before the\nlatest versions-- they follow a greedy strategy,\nwhich is very simple. You pack as many words as\nyou can on the first line,",
    "start": "1099460",
    "end": "1106710"
  },
  {
    "text": "then you go to the next\nline, pack as many words as you can on the second line. Keep going like that.",
    "start": "1106710",
    "end": "1111720"
  },
  {
    "text": "And that strategy\nis not optimal. If you use LaTeX--",
    "start": "1111720",
    "end": "1117490"
  },
  {
    "text": "as some of you have been\ndoing on problem sets, and I think also new versions\nof Word but I'm not sure--",
    "start": "1117490",
    "end": "1122860"
  },
  {
    "text": "then it uses dynamic programming\nto solve this problem. And that's what we're\ngoing to do here.",
    "start": "1122860",
    "end": "1128380"
  },
  {
    "text": "So let me specify a little bit\nmore about what we mean here.",
    "start": "1128380",
    "end": "1133560"
  },
  {
    "text": "So the text we're going to\nthink of as a list of words. ",
    "start": "1133560",
    "end": "1141010"
  },
  {
    "text": "And we're going to define\na quantity badness. ",
    "start": "1141010",
    "end": "1148590"
  },
  {
    "text": "And this is an esthetic\nquantity, if you will. I'm going to tell\nyou what LaTeX uses.",
    "start": "1148590",
    "end": "1155190"
  },
  {
    "text": "But this is sort of\nhow bad it is to use--",
    "start": "1155190",
    "end": "1162419"
  },
  {
    "text": "or let's say, yeah, words\ni through j as a line.",
    "start": "1162420",
    "end": "1171010"
  },
  {
    "start": "1171010",
    "end": "1176410"
  },
  {
    "text": "So this is Python notation. So it starts at i and\nends at J minus 1. That'll be convenient.",
    "start": "1176410",
    "end": "1182090"
  },
  {
    "text": "So I have this list of words. And if I look at words\ni through J minus 1 and I think of what happens if\nI pack them in a line, well,",
    "start": "1182090",
    "end": "1190629"
  },
  {
    "text": "they may fit or\nthey may not fit. So there are going\nto be two cases.",
    "start": "1190630",
    "end": "1197000"
  },
  {
    "text": "If they don't fit, I'm\ngoing to write infinity. So that's really bad. ",
    "start": "1197000",
    "end": "1207890"
  },
  {
    "text": "So I have some notion of\nhow wide my line can be.",
    "start": "1207890",
    "end": "1213337"
  },
  {
    "text": "And if the sum of the\nlengths of those words plus the sum of the lengths of\nthe spaces as small as possible",
    "start": "1213337",
    "end": "1218890"
  },
  {
    "text": "is bigger than the\nwidth of my screen-- or page, I guess--",
    "start": "1218890",
    "end": "1224090"
  },
  {
    "text": "then I say they\ndon't fit, and then I define badness to\nbe infinity-- meaning, I never want to do that.",
    "start": "1224090",
    "end": "1230210"
  },
  {
    "text": "This is actually\nLaTeX sloppy mode, if you want to be technical. Otherwise, it's going to be page\nwidth minus total width cubed.",
    "start": "1230210",
    "end": "1249120"
  },
  {
    "text": " Why cubed? Who knows.",
    "start": "1249120",
    "end": "1254770"
  },
  {
    "text": "This is the LaTeX rule. And squared would\nprobably also be fine.",
    "start": "1254770",
    "end": "1261620"
  },
  {
    "text": "So this is the width of the\npage minus the total width of those words,\nwhich you also have to include the spaces here.",
    "start": "1261620",
    "end": "1268120"
  },
  {
    "text": "You take the difference. You cube it. And so when this is small-- I mean, when these\nare very close--",
    "start": "1268120",
    "end": "1274210"
  },
  {
    "text": "then this is going\nto be close to zero. That's good. That means you use\nmost of the line.",
    "start": "1274210",
    "end": "1279230"
  },
  {
    "text": "When the total width is much\nsmaller than the page width, then this will be a large value. You cube it, it\nwill be even larger.",
    "start": "1279230",
    "end": "1284460"
  },
  {
    "text": "So this will highly\ndiscourage big gaps like this. And it will very much\ndiscourage not fitting.",
    "start": "1284460",
    "end": "1291120"
  },
  {
    "text": "So there's a\ntradeoff, of course. And the idea is you might-- in the greedy algorithm, you\nmake the first line as good",
    "start": "1291120",
    "end": "1296820"
  },
  {
    "text": "as you can. But it might actually\nbe better to leave out some of the words\nthat would fit here",
    "start": "1296820",
    "end": "1302410"
  },
  {
    "text": "in order to make the\nnext line better. In general, it's hard\nto tell, where should I cut the lines in order to get\nthe best overall strategy?",
    "start": "1302410",
    "end": "1311049"
  },
  {
    "text": "What I'd like to\nminimize is the sum of the badnesses of the lines. So it's a sum of cubes,\nand that's really hard",
    "start": "1311050",
    "end": "1317590"
  },
  {
    "text": "to think about. But that's what dynamic\nprogramming is for. You don't have to think.",
    "start": "1317590",
    "end": "1322800"
  },
  {
    "text": "It's great because\nit's brute force. OK, so the first thing we need\nto do is define sub-problems.",
    "start": "1322800",
    "end": "1332600"
  },
  {
    "text": "This is, in some\nsense, the hard part. The rest will follow easily.",
    "start": "1332600",
    "end": "1338220"
  },
  {
    "text": "So I think actually\nit might be easier to think about, for\nthis problem, what would",
    "start": "1338220",
    "end": "1344289"
  },
  {
    "text": "be the brute force strategy? How would you try all\npossibilities, exponential time?",
    "start": "1344290",
    "end": "1349330"
  },
  {
    "text": "Suggestions? ",
    "start": "1349330",
    "end": "1360414"
  },
  {
    "text": "Yeah? AUDIENCE: Try all partitions\nof the words that don't fit? PROFESSOR: Try all\npartitions of the word, so--",
    "start": "1360414",
    "end": "1366809"
  },
  {
    "text": "of the string of words. So I mean, it could be it\nall fits in on one line. It could be it's\nsplit into two lines.",
    "start": "1366810",
    "end": "1373380"
  },
  {
    "text": "I try all possible splits there. In general, I'm\nguessing for every word, does this start a line or not?",
    "start": "1373380",
    "end": "1379850"
  },
  {
    "text": "That would be all ways. And so there are 2 to the n. If I have n words, there's\n2 to the n different splits.",
    "start": "1379850",
    "end": "1385290"
  },
  {
    "text": "For every word I say yes or\nno, does this is begin a line? So what I'd like to figure out\nis where those lines begin.",
    "start": "1385290",
    "end": "1391330"
  },
  {
    "text": "That was the point\nof that exercise.  So any suggestions?",
    "start": "1391330",
    "end": "1397000"
  },
  {
    "text": "Maybe it's actually easier\nto jump ahead and think, what would I guess\nin my solution if I have this big\nstring of words?",
    "start": "1397000",
    "end": "1405450"
  },
  {
    "text": "What's the natural\nfirst thing to guess? ",
    "start": "1405450",
    "end": "1414200"
  },
  {
    "text": "Yeah? AUDIENCE: Guess how\nlong the first line is? PROFESSOR: Guess how long\nthe first line is, yeah. We know that the first\nword begins a line.",
    "start": "1414200",
    "end": "1420490"
  },
  {
    "text": "But where does the\nsecond line begin? So I'd like to guess where\nthe second line begins.",
    "start": "1420490",
    "end": "1427120"
  },
  {
    "text": "That's-- so you know, I have\nthe beginning of a line here and then I have a beginning of\na line here at the fourth word.",
    "start": "1427120",
    "end": "1435820"
  },
  {
    "text": "Where does the\nsecond line begin? I don't know. Guess. So I'm going to try\nall the possible words",
    "start": "1435820",
    "end": "1441200"
  },
  {
    "text": "after the first word. And say, well, what if I\nstarted my second line here? At some point I'm\ngoing to be packing",
    "start": "1441200",
    "end": "1447559"
  },
  {
    "text": "too much into the first\nline, and so I abort. But I'll try them all.",
    "start": "1447560",
    "end": "1454720"
  },
  {
    "text": "Why not? OK, that's good. The issue is that\nonce I've chosen where the second line is,\nof course the next thing I",
    "start": "1454720",
    "end": "1461400"
  },
  {
    "text": "want to guess is where\nthe third line begins. And then I want I guess\nwhere the fourth line begins, and so on. In general, I need to\nset up my sub-problems",
    "start": "1461400",
    "end": "1468240"
  },
  {
    "text": "so that after I\ndo the first guess I have the problem\nof the original type.",
    "start": "1468240",
    "end": "1474660"
  },
  {
    "text": "So originally I\nhave all the words. But after I guess where\nthe second line begins,",
    "start": "1474660",
    "end": "1481210"
  },
  {
    "text": "I have the remaining words.  What's a good word for\nthe remaining words?",
    "start": "1481210",
    "end": "1488930"
  },
  {
    "text": "If I give you a list of words\nand I want from here on, it's called--",
    "start": "1488930",
    "end": "1495299"
  },
  {
    "text": "what? A sub-problem, yes. That's what we want to define.",
    "start": "1495300",
    "end": "1502380"
  },
  {
    "text": "It's called a\nsuffix of the array. That's the word I\nwas looking for. It's tough when I only\nhave one word answers.",
    "start": "1502380",
    "end": "1509210"
  },
  {
    "text": "So my sub-problems are\ngoing to be suffixes. ",
    "start": "1509210",
    "end": "1516080"
  },
  {
    "text": "Which is, in Python\nnotation, i colon. They call it splices.",
    "start": "1516080",
    "end": "1521445"
  },
  {
    "text": " And how many sub-problems\nare there if I have n words?",
    "start": "1521445",
    "end": "1529796"
  },
  {
    "text": " Two?",
    "start": "1529796",
    "end": "1535870"
  },
  {
    "text": "Sorry? AUDIENCE: 2 to the n. PROFESSOR: 2 the n? ",
    "start": "1535870",
    "end": "1541150"
  },
  {
    "text": "That would be a problem\nif it's 2 to the n. I hope it's only n. ",
    "start": "1541150",
    "end": "1549980"
  },
  {
    "text": "Originally, we said, OK, for\nevery word, we're going to say, is this in our out? Is this the beginning or not?",
    "start": "1549980",
    "end": "1555360"
  },
  {
    "text": "That's 2 to the n. But here, the idea is we're\nonly thinking about, well, what are the words that remain?",
    "start": "1555360",
    "end": "1560742"
  },
  {
    "text": "And it could be you've dealt\nwith the first 100 words and then you've got\nn minus 100 left, or it could be you've dealt\nwith the first thousand words",
    "start": "1560742",
    "end": "1566155"
  },
  {
    "text": "and you've got n minus 1,000. There's only n choices for that. We're only remembering\none line, this is the key.",
    "start": "1566155",
    "end": "1574540"
  },
  {
    "text": "Even though we may have\nalready guessed several lines, we're just going to\nremember, well, OK. This is what we have left to do.",
    "start": "1574540",
    "end": "1580770"
  },
  {
    "text": "So let's forget about the past. This is what makes dynamic\nprogramming efficient.",
    "start": "1580770",
    "end": "1585960"
  },
  {
    "text": "And we're just going to solve\nit, solve these sub-problems, forgetting about the past. So the sub-problem--",
    "start": "1585960",
    "end": "1592100"
  },
  {
    "text": "I'm not going to write it here--\nis if I give you these words, never mind the other words,\nhow do I pack them optimally",
    "start": "1592100",
    "end": "1598420"
  },
  {
    "text": "into a paragraph? I don't care about the other\nwords, just these words. So this is a different\nversion of the same problem.",
    "start": "1598420",
    "end": "1605355"
  },
  {
    "text": "Initially, we have\nn words to do. Now I have n minus\ni words to do. But it's again\ntext justification.",
    "start": "1605355",
    "end": "1610980"
  },
  {
    "text": "I want to solve this\nproblem on those words. That's just how I'm\ngoing to define it.",
    "start": "1610980",
    "end": "1616200"
  },
  {
    "text": "This will work if I can\nspecify a recurrence relation. As we said, what\nwe guess is where",
    "start": "1616200",
    "end": "1626190"
  },
  {
    "text": "to break the first line,\nwhere to start the second line",
    "start": "1626190",
    "end": "1633940"
  },
  {
    "text": "for those words. OK, so this is-- ",
    "start": "1633940",
    "end": "1640722"
  },
  {
    "text": "it could be the i\nplus first line. It could be the i plus\nsecond line-- or sorry, word.",
    "start": "1640722",
    "end": "1646929"
  },
  {
    "text": "Some word after i is where\nwe guess the second word. The number of choices for the\nguess is at most n minus i.",
    "start": "1646930",
    "end": "1659450"
  },
  {
    "text": "I'm just going to think\nof that as order n. It won't matter.",
    "start": "1659450",
    "end": "1665220"
  },
  {
    "text": "The third part is we need\na recurrence relation. ",
    "start": "1665220",
    "end": "1673540"
  },
  {
    "text": "I claim this is very easy. I'm going to--",
    "start": "1673540",
    "end": "1679480"
  },
  {
    "text": "I didn't give this problem\na name, so I'm just going to write it as DP of i.",
    "start": "1679480",
    "end": "1686981"
  },
  {
    "text": " So this is going to be the\nsolution to that suffix, words",
    "start": "1686982",
    "end": "1693500"
  },
  {
    "text": "from i onward.  And I'd like to--",
    "start": "1693500",
    "end": "1700640"
  },
  {
    "text": "what I want to do is consider\nall possible guesses. So I mean this is going to be\npretty formulaic at this point.",
    "start": "1700640",
    "end": "1706929"
  },
  {
    "text": "After I've set up these\nideas there's pretty much only one thing I can\nwrite here, which is I want to do a for loop.",
    "start": "1706930",
    "end": "1716960"
  },
  {
    "start": "1716960",
    "end": "1728080"
  },
  {
    "text": "That would be the\nfor loop of where the second line can start. I can't start at\ni, because that's",
    "start": "1728080",
    "end": "1734140"
  },
  {
    "text": "where the first line starts. But it could start at i plus 1. And this special\nvalue of n will mean",
    "start": "1734140",
    "end": "1742480"
  },
  {
    "text": "that there is no second line. OK, so DP of i--",
    "start": "1742480",
    "end": "1748085"
  },
  {
    "text": "now I want to do this\nfor loop in order to try all the\npossible guesses. j will be the word where\nthe next thing starts.",
    "start": "1748085",
    "end": "1754320"
  },
  {
    "text": "So then what do I write up here?  If I make this guess--",
    "start": "1754320",
    "end": "1761828"
  },
  {
    "text": "all right, so I have\nword i is the first word",
    "start": "1761828",
    "end": "1767520"
  },
  {
    "text": "of the first line. And then word j is the first\nword of the second line.",
    "start": "1767520",
    "end": "1772630"
  },
  {
    "text": " And then there's more\nstuff down below. I don't know what that is.",
    "start": "1772630",
    "end": "1779000"
  },
  {
    "text": "But how can I use\nrecursion to specify this?",
    "start": "1779000",
    "end": "1784240"
  },
  {
    "start": "1784240",
    "end": "1789480"
  },
  {
    "text": "DP of j, exactly. ",
    "start": "1789480",
    "end": "1795650"
  },
  {
    "text": "I guess if I'm\ndoing recursion, I should use parentheses\ninstead of brackets. But if you're\ndoing it bottom up,",
    "start": "1795650",
    "end": "1802013"
  },
  {
    "text": "it would be square brackets.  So that's just DP of j.",
    "start": "1802013",
    "end": "1807060"
  },
  {
    "text": "That's the cost of the\nrest of the problem.",
    "start": "1807060",
    "end": "1812170"
  },
  {
    "text": "And I can assume that\nthat's free to compute. This is the magic of\ndynamic programming.",
    "start": "1812170",
    "end": "1817330"
  },
  {
    "text": "But then I also have\nto think about, well, what about the first line? How much does that cost?",
    "start": "1817330",
    "end": "1824140"
  },
  {
    "text": "Well, that's just badness of ij. And we've already defined that. We can compute it\nin constant time.",
    "start": "1824140",
    "end": "1829952"
  },
  {
    "text": "Dynamic programming doesn't\nreally care what this is. It could be anything. As long as you're\ntrying to minimize",
    "start": "1829952",
    "end": "1834980"
  },
  {
    "text": "the sum of the badnesses,\nwhatever function is in here, we just compute it here.",
    "start": "1834980",
    "end": "1840163"
  },
  {
    "text": "That's the power of\ndynamic programming. It works for all\nvariations of this problem, however you define badness.",
    "start": "1840163",
    "end": "1845480"
  },
  {
    "text": "So you might say, oh,\nthat's a weird definition. I want to use\nsomething else instead. That's fine, as long\nas you can compute it",
    "start": "1845480",
    "end": "1850800"
  },
  {
    "text": "in terms of just i and j\nand looking at those words. OK, now I need to do a\nmin over the whole thing.",
    "start": "1850800",
    "end": "1858492"
  },
  {
    "text": "So I want to minimize\nthe sum of the badnesses.  So I compute for\nevery guess of j,",
    "start": "1858492",
    "end": "1865815"
  },
  {
    "text": "I compute the cost of\nthe rest of the problem plus the cost of\nthat first line. And this, is in some sense,\nchecking all possible solutions",
    "start": "1865815",
    "end": "1873705"
  },
  {
    "text": "magically.  OK. That's the recurrence.",
    "start": "1873705",
    "end": "1880360"
  },
  {
    "text": "We need to check some things. I guess right now we\njust want to compute how much time does this\ncost, time per sub-problem.",
    "start": "1880360",
    "end": "1888710"
  },
  {
    "start": "1888710",
    "end": "1895110"
  },
  {
    "text": "To do this for loop,\nbasically I do constant work-- all of this is constant\nwork-- for each choice.",
    "start": "1895110",
    "end": "1900910"
  },
  {
    "text": "So there's order n choices,\nso this is order n. ",
    "start": "1900910",
    "end": "1911765"
  },
  {
    "text": "Now we have to\ncheck that there's a topological order\nfor this problem",
    "start": "1911765",
    "end": "1920740"
  },
  {
    "text": "or for these sub-problems. And this is easy, but\na little different",
    "start": "1920740",
    "end": "1926210"
  },
  {
    "text": "from what we've done\nbefore because we have to actually work\nfrom the end backwards,",
    "start": "1926210",
    "end": "1931970"
  },
  {
    "text": "because we're expressing\nDP of i in terms of DP of larger values of i. j is always bigger than i.",
    "start": "1931970",
    "end": "1938562"
  },
  {
    "text": "And so we have to do it\nfrom the right end back to the beginning. ",
    "start": "1938562",
    "end": "1947209"
  },
  {
    "text": "And n minus 1 down to 0. I didn't actually\ndefine DP of n.",
    "start": "1947209",
    "end": "1952670"
  },
  {
    "text": "There's a base case here\nwhich is DP of n equals 0.",
    "start": "1952670",
    "end": "1962830"
  },
  {
    "text": "Because the meaning of DP\nof n is I have zero words, the nth word onward. There is no nth word.",
    "start": "1962830",
    "end": "1967920"
  },
  {
    "text": "It's 0 to n minus\n1 in this notation. So I don't pay anything\nfor a blank line.",
    "start": "1967920",
    "end": "1973150"
  },
  {
    "text": " OK, so that's our\ntopological order.",
    "start": "1973150",
    "end": "1979410"
  },
  {
    "text": "This one, of course,\nis instantaneous. And then we work backwards. And always whenever we\nneed to compute something,",
    "start": "1979410",
    "end": "1985450"
  },
  {
    "text": "we already have the value. The total time we\nget is going to be",
    "start": "1985450",
    "end": "1994640"
  },
  {
    "text": "the number of sub problems-- which is n times the running\ntime per sub-problem.",
    "start": "1994640",
    "end": "1999820"
  },
  {
    "text": "which is order n, which\nis order n squared. And in the worst case, it\nis indeed theta n squared.",
    "start": "1999820",
    "end": "2006888"
  },
  {
    "text": "Although in practice it's going\nto work better, because lines can't be too long.",
    "start": "2006888",
    "end": "2012350"
  },
  {
    "text": "So that's the running time. Then finally we have to check\nthat the original problem actually gets solved.",
    "start": "2012350",
    "end": "2018150"
  },
  {
    "text": "And in this case, the original\nproblem we need to solve is DP of 0 because DP of 0 means\nI take words from 0 onwards.",
    "start": "2018150",
    "end": "2027850"
  },
  {
    "text": "That's everybody. So that's the actual\nproblem I want to solve. So we work backwards.",
    "start": "2027850",
    "end": "2033410"
  },
  {
    "text": "We solve all these sub-problems\nthat we don't directly care about, but then the\nfirst one is the one we want. And we're done.",
    "start": "2033410",
    "end": "2038620"
  },
  {
    "text": "So in quadratic time,\nwe can find the best way to pack words into lines.",
    "start": "2038620",
    "end": "2045140"
  },
  {
    "text": "Question? AUDIENCE: Can you explain\nwhat DP of j would return? PROFESSOR: DP of j is returning.",
    "start": "2045140",
    "end": "2051330"
  },
  {
    "text": "It's like this. So DP of-- this is a\nrecursive definition. Imagine this is a\nrecursive function.",
    "start": "2051330",
    "end": "2056570"
  },
  {
    "text": "I wrote equals, which is\nHaskell notation, if you will. But normally, you think of\nthis as like def DP of i",
    "start": "2056570",
    "end": "2063969"
  },
  {
    "text": "is return min of this. This is Python. So it's returning the cost.",
    "start": "2063969",
    "end": "2071879"
  },
  {
    "text": "What was the best way to pack\nthose lines from j onwards? That's what DP of j returns. So it's a number.",
    "start": "2071880",
    "end": "2078810"
  },
  {
    "text": "It's going to be a\nsum of badness values. Then we add on one\nnew badness value. It's still a sum\nof badness values.",
    "start": "2078810",
    "end": "2084530"
  },
  {
    "text": "We return the best\none that we find. Now, this does not\nactually pack the words. That's a good-- maybe\nyour implicit question.",
    "start": "2084530",
    "end": "2091384"
  },
  {
    "text": "It's not telling you\nhow to pack the words. It's telling you how much\nit costs to pack the words. This is a lot like shortest\npaths where we didn't-- it was",
    "start": "2091384",
    "end": "2098960"
  },
  {
    "text": "annoying to actually figure\nout what the shortest path was. Not that annoying,\nbut that's not what we were usually\naiming to do.",
    "start": "2098960",
    "end": "2105177"
  },
  {
    "text": "We were just trying to figure\nout the shortest path weight. And then once we knew\nthe shortest path weight,",
    "start": "2105177",
    "end": "2110260"
  },
  {
    "text": "it was pretty easy to\nreconstruct the paths. So maybe I'll take a\nlittle diversion to that",
    "start": "2110260",
    "end": "2117740"
  },
  {
    "text": "and talk about parent pointers. ",
    "start": "2117740",
    "end": "2126579"
  },
  {
    "text": "The idea with parent\npointers is just remember which guess was best.",
    "start": "2126580",
    "end": "2134785"
  },
  {
    "start": "2134785",
    "end": "2142700"
  },
  {
    "text": "it's a very simple idea, but it\napplies to all dynamic programs and lets you find the\nactual solution, not just the cost of the solution.",
    "start": "2142700",
    "end": "2149410"
  },
  {
    "text": "We did the same thing\nwith shortest paths. We even called them parent. So when we compute this min,\nwere trying all choices of j.",
    "start": "2149410",
    "end": "2159070"
  },
  {
    "text": "One of them-- or maybe more than\none, but at least one of them actually gave you the min. That's usually called the\narg min in mathematics.",
    "start": "2159070",
    "end": "2165810"
  },
  {
    "text": "It's what was the\nvalue of j that gave you the minimum\nvalue of this thing.",
    "start": "2165810",
    "end": "2171130"
  },
  {
    "text": "So I mean, when you\ncompute the min, you're iterating over\nevery single one. Just keep track of\nwhich one was the best.",
    "start": "2171130",
    "end": "2177740"
  },
  {
    "text": "That's it. Call that the parent pointer.  Do I need to write that?",
    "start": "2177740",
    "end": "2183930"
  },
  {
    "text": "Here, parent--\nparent of i is going",
    "start": "2183930",
    "end": "2190099"
  },
  {
    "text": "to be arg min of\nthat same thing. So it's a j value.",
    "start": "2190100",
    "end": "2198270"
  },
  {
    "text": "It's the best j value for i. And so we store that for each i. It cost no more work,\njust a constant factor",
    "start": "2198270",
    "end": "2205150"
  },
  {
    "text": "more work than\ncomputing the min. We also write down the arg min. So we're already storing\nthe min in the DP table.",
    "start": "2205150",
    "end": "2212110"
  },
  {
    "text": "DP of i would get\nsorted to be that. We also store parent of i. And then once we're done, we\nstart with our original problem",
    "start": "2212110",
    "end": "2220260"
  },
  {
    "text": "and we follow parent\npointers to figure out what the best choices were. So we start at 0 because we\nknow word zero begins a line.",
    "start": "2220260",
    "end": "2228400"
  },
  {
    "text": "And then 0 will\nbe the first line. Then we go to parent of 0.",
    "start": "2228400",
    "end": "2235020"
  },
  {
    "text": "That will be where the\nsecond line begins. Then we go to parent\nof parent of 0.",
    "start": "2235020",
    "end": "2240960"
  },
  {
    "text": "That will be where\nthe third line begins. OK, because these\nwere the best choices",
    "start": "2240960",
    "end": "2246850"
  },
  {
    "text": "for where the\nsecond line begins, this is the best place where\nthe second line begins. Given that this\nis the first line,",
    "start": "2246850",
    "end": "2252790"
  },
  {
    "text": "this is the best line where\nthe second line begins given that this was the first line. So that's really the third line\ngiven this was the second line.",
    "start": "2252790",
    "end": "2259460"
  },
  {
    "text": "Little confusing, but you\njust a simple for loop. You start with 0 because\nthat's our original problem.",
    "start": "2259460",
    "end": "2264960"
  },
  {
    "text": "You keep calling parent of\nthe thing you currently have. In linear time, you\nwill reconstruct where the lines break.",
    "start": "2264960",
    "end": "2271630"
  },
  {
    "text": "So you can use this\ntechnique in any DP. It's very simple. It's totally automatic.",
    "start": "2271630",
    "end": "2277970"
  },
  {
    "text": "Just like memoization\nis a technique that you can apply\nwithout thinking, you could even write a program,\ngiven a recursive algorithm,",
    "start": "2277970",
    "end": "2286244"
  },
  {
    "text": "would turn into a memorized\nrecursive algorithm. It's totally automated. Same thing with the\nbottom up DP table.",
    "start": "2286245",
    "end": "2292410"
  },
  {
    "text": "As long as you know what\nthe topological order is,",
    "start": "2292410",
    "end": "2297567"
  },
  {
    "text": "just make those for\nloops and then put exactly the recursive call but\nturn it into an array call. Boom, you've got a\nbottom up algorithm.",
    "start": "2297567",
    "end": "2303570"
  },
  {
    "text": "Totally automatic,\nno thinking required. Parent pointers also,\nno thinking required. As long as you're following\nthe structure of trial guesses",
    "start": "2303570",
    "end": "2311260"
  },
  {
    "text": "compute some value-- just remember what\nthe guess was-- you reconstruct your solution.",
    "start": "2311260",
    "end": "2316440"
  },
  {
    "text": "That's the great thing\nabout dynamic programming is how much of it is automatic. The hard part is figuring\nout what to guess",
    "start": "2316440",
    "end": "2322480"
  },
  {
    "text": "and then what your sub-problems\nare, or the other order. Whatever works.",
    "start": "2322480",
    "end": "2328328"
  },
  {
    "text": "Any other questions about text?  I would like to move\non to blackjack.",
    "start": "2328328",
    "end": "2335680"
  },
  {
    "text": "OK, now I brought some\ncards, because some of you may not know the\nrules to blackjack. How many people know blackjack?",
    "start": "2335680",
    "end": "2341990"
  },
  {
    "text": "OK. How many people do not and\nare willing to admit it? A few, all right. So this is for you and\nfor fun, entertainment.",
    "start": "2341990",
    "end": "2348240"
  },
  {
    "text": "So I'm going to bring Victor\nup to help demonstrate the rules of blackjack. We're going to play\nstandard Casino",
    "start": "2348240",
    "end": "2354980"
  },
  {
    "text": "blackjack as in the\nmovie 21, or whatever. So I'm going to just do a random\ncut here so I can't cheat.",
    "start": "2354980",
    "end": "2363442"
  },
  {
    "text": "You have a tablet, that's scary. You're going to\nlook at strategy. VICTOR: Nothing special.",
    "start": "2363442",
    "end": "2369320"
  },
  {
    "text": "PROFESSOR: All right. Hopefully you do not\nhave x-ray vision. So the way it works\nis there's a dealer",
    "start": "2369320",
    "end": "2374680"
  },
  {
    "text": "player and one or more players. We're just going to do it with\none player to keep it simple. I'm going to be the dealer.",
    "start": "2374680",
    "end": "2380525"
  },
  {
    "text": "So my strategy is actually\ntotally deterministic, there's nothing interesting. Victor has the hard\npart of winning.",
    "start": "2380525",
    "end": "2386440"
  },
  {
    "text": "So to start out, I believe\nwe deal to you first, then to me, then to you, then to me.",
    "start": "2386440",
    "end": "2394910"
  },
  {
    "text": "So let's hold up\nthese cards, Victor, so that people can see them. You don't get to\nsee one of my cards. That's some peculiarity\nof the rule.",
    "start": "2394910",
    "end": "2402310"
  },
  {
    "text": "And if the sum of our cards\ngoes over 21, we lose the game. Victor first.",
    "start": "2402310",
    "end": "2408420"
  },
  {
    "text": "I cannot have a value more\nthan 21 in these hands, because I only have two cards.",
    "start": "2408420",
    "end": "2414420"
  },
  {
    "text": "You have a value of-- ha, ace. Great. An ace can be a 1 or an 11. That's the fun rule.",
    "start": "2414420",
    "end": "2419540"
  },
  {
    "text": "So this is either an 8 or an 18. And so Victor has a choice of\nwhether to take another card",
    "start": "2419540",
    "end": "2424800"
  },
  {
    "text": "or not. What would you like to do? VICTOR: Standard\nstrategy says stand. PROFESSOR: He stands.",
    "start": "2424800",
    "end": "2430055"
  },
  {
    "text": "So he's going to stick to that. At this point, my\ncards flip over. I have 17, which is same\nyou, which I believe means--",
    "start": "2430055",
    "end": "2438550"
  },
  {
    "text": "I forget about tie rules. VICTOR: I have 18. PROFESSOR: You have 18. All right. VICTOR: See? The strategy works. PROFESSOR: So that's good. I'm going to hit in the hope\nthat I have a small card that",
    "start": "2438550",
    "end": "2445880"
  },
  {
    "text": "will push me right above you. But I do not. I lose. I'm sad. VICTOR: It says\nalways stand on a 17.",
    "start": "2445880",
    "end": "2451670"
  },
  {
    "text": "PROFESSOR: Oh,\nalways stand on 17? Huh. All right, never mind. Thanks. Yeah, I still lose.",
    "start": "2451670",
    "end": "2456720"
  },
  {
    "text": "The game is over. My strategy is always\nstand on a value--",
    "start": "2456720",
    "end": "2461800"
  },
  {
    "text": "VICTOR: Stand on 17. PROFESSOR: 17 or higher. And if I have a value less than\n17, I always take another card.",
    "start": "2461800",
    "end": "2469030"
  },
  {
    "text": "So let's do it one more\ntime to get it right. So I'm going to deal to you,\ndeal to me, deal to you,",
    "start": "2469030",
    "end": "2475880"
  },
  {
    "text": "deal to me. So hold up your cards. You have 18 again.",
    "start": "2475880",
    "end": "2481780"
  },
  {
    "text": "Are you cheating?  VICTOR: I still have to stand.",
    "start": "2481780",
    "end": "2487990"
  },
  {
    "text": "PROFESSOR: You still\nstand, according to tablet. So I, in this case, have a 20.",
    "start": "2487990",
    "end": "2493560"
  },
  {
    "text": "And so in this case I win. So you get the idea. Let's say in each\ncase we're betting $1.",
    "start": "2493560",
    "end": "2499068"
  },
  {
    "text": "So at this point, we'd be even. He won $1, I won $1. But in general, slight--",
    "start": "2499068",
    "end": "2506730"
  },
  {
    "text": "I think it's balanced. VICTOR: For these rules, there's\na 1% advantage for the house. PROFESSOR: 1% advantage\nfor the house.",
    "start": "2506730",
    "end": "2512710"
  },
  {
    "text": "Interesting. All right, well, that's\nbeyond this class. What we're going to see is\nhow to cheat in blackjack.",
    "start": "2512710",
    "end": "2520170"
  },
  {
    "text": "So this is going to be-- I encourage you to try\nthis out at casinos.",
    "start": "2520170",
    "end": "2525750"
  },
  {
    "text": "Just kidding. ",
    "start": "2525750",
    "end": "2530790"
  },
  {
    "text": "This is a little bit difficult\nto actually do in a casino unless you have an inside man.",
    "start": "2530790",
    "end": "2537510"
  },
  {
    "text": "So if you have an\ninside man, go for it. It's guaranteed to\nwin you lots of money",
    "start": "2537510",
    "end": "2543500"
  },
  {
    "text": "because it's going\nto play optimally. In perfect\ninformation blackjack, I suppose that I already\nknow the entire deck.",
    "start": "2543500",
    "end": "2551260"
  },
  {
    "text": "Suppose somehow either I\nget to put the deck there, or I have some x-ray vision. I get to see the entire\ndeck ahead of time.",
    "start": "2551260",
    "end": "2558205"
  },
  {
    "text": "And then somebody's\ngoing to play through a game over\nand over with me-- or not over and over, but\nuntil the deck is depleted--",
    "start": "2558205",
    "end": "2565192"
  },
  {
    "text": "and I want to know in\neach case, should I hit, or should I stand? And I claim with\ndynamic programming",
    "start": "2565193",
    "end": "2571160"
  },
  {
    "text": "you can figure that out-- using exactly the same\nstrategy as text, actually. It's really for\neach word, should I",
    "start": "2571160",
    "end": "2577390"
  },
  {
    "text": "start a new line or not? Same problem here. It's slightly more\ncomplicated to write down.",
    "start": "2577390",
    "end": "2584309"
  },
  {
    "text": " So let's say the deck\nis a sequence of cards.",
    "start": "2584310",
    "end": "2591620"
  },
  {
    "text": "And I'm going to call it c0,\nc1 up to cn minus 1, n cards.",
    "start": "2591620",
    "end": "2599030"
  },
  {
    "text": "And you are one player. First is the dealer.",
    "start": "2599030",
    "end": "2605710"
  },
  {
    "text": "I don't know how to solve\nthis for two players, interesting open problem. But for one player I can do it.",
    "start": "2605710",
    "end": "2614119"
  },
  {
    "text": "Let's say $1 bet per hand,\nI think they're called.",
    "start": "2614120",
    "end": "2619620"
  },
  {
    "text": "I'm not sure. Per play? Per box? Whatever. You're not allowed to double.",
    "start": "2619620",
    "end": "2624985"
  },
  {
    "text": "You're not allowed to split. All these fancy rules are\nharder to think about, although you might be able\nto solve them as well.",
    "start": "2624985",
    "end": "2632480"
  },
  {
    "text": "So the idea is I\nhave some cards. Should I hit or should I stand? I don't know. I'll guess.",
    "start": "2632480",
    "end": "2638550"
  },
  {
    "text": "So our guessing-- let's jump\nahead to the guessing part--",
    "start": "2638550",
    "end": "2645340"
  },
  {
    "text": "is whether we want to hit\nor stand given a card. Actually, it would be easier\nto think about an entire play,",
    "start": "2645340",
    "end": "2653750"
  },
  {
    "text": "an entire hand. We're going to guess,\nhow many times should I hit in the first play?",
    "start": "2653750",
    "end": "2668410"
  },
  {
    "text": "So initially, four cards are\ndealt. I look at my hands. Actually, I don't\nreally look at my hand.",
    "start": "2668410",
    "end": "2674210"
  },
  {
    "text": "I'm just going to\nguess ahead of time. I think I'll hit\nfive times this time. I think I'll hit\nzero times this time.",
    "start": "2674210",
    "end": "2680599"
  },
  {
    "text": "I mean, I'm just\ngoing to try them all. So I don't really have to\nbe intelligent here, OK?",
    "start": "2680600",
    "end": "2686270"
  },
  {
    "text": "It's kind of crazy but it works. Our sub-problems,\ncan anyone tell me",
    "start": "2686270",
    "end": "2693869"
  },
  {
    "text": "what our sub-problems would\nbe, In one word or less? Less would be impressive.",
    "start": "2693870",
    "end": "2699869"
  },
  {
    "text": " Yeah? AUDIENCE: Where you\nstart the new hand. PROFESSOR: Where do\nyou start the new hand?",
    "start": "2699870",
    "end": "2705850"
  },
  {
    "text": "Yeah. So it's going to be\nsuffixes of the cards. So at some point we do a play,\nand then we get to ith card.",
    "start": "2705850",
    "end": "2712170"
  },
  {
    "text": "And then the rest of the game\nwill be from the ith card on. So it's going to\nbe suffix ci colon,",
    "start": "2712170",
    "end": "2720450"
  },
  {
    "text": "I guess would be\nthe notation here. It's a bit awkward. These are the cards that remain.",
    "start": "2720450",
    "end": "2725640"
  },
  {
    "text": "And so the sub-problem\nis, what is the best play? What's the best\noutcome given $1 bets?",
    "start": "2725640",
    "end": "2731400"
  },
  {
    "text": "How much money can I make-- maximize my winning, say-- given these cards onward?",
    "start": "2731400",
    "end": "2736800"
  },
  {
    "text": "Who knows what happened to\ntheir earlier cards, but just these are the cards. I'm left with.",
    "start": "2736800",
    "end": "2742099"
  },
  {
    "text": "Number of sub-problems is-- ",
    "start": "2742100",
    "end": "2752830"
  },
  {
    "text": "hmm? ",
    "start": "2752830",
    "end": "2760450"
  },
  {
    "text": "n. How many choices of i\nare there? n choices. This really important.",
    "start": "2760450",
    "end": "2766760"
  },
  {
    "text": "It's really useful that we're\nthinking about suffixes. It's not that some subset of\nthe cards have been played.",
    "start": "2766760",
    "end": "2772477"
  },
  {
    "text": "That would be really hard,\nbecause there's exponentially many different subsets\nthat could be left. It's always a prefix\nthat gets played,",
    "start": "2772477",
    "end": "2778819"
  },
  {
    "text": "and therefore suffix is left. And there's only n\nsuffixes, remember that. We're going to use it over and\nover in dynamic programming.",
    "start": "2778820",
    "end": "2785890"
  },
  {
    "text": "So now we need to\nsolve the sub-problem. Starting from ci, what's\nthe best way to play?",
    "start": "2785890",
    "end": "2791000"
  },
  {
    "text": "Well, the first four\ncards are fixed, and then we guess how\nmany hits are left. So it's going to\nbe something like n",
    "start": "2791000",
    "end": "2797490"
  },
  {
    "text": "minus i minus four different\npossibilities for-- I mean, that would\nbe the maximum number",
    "start": "2797490",
    "end": "2802630"
  },
  {
    "text": "of hits I could take\nall the remaining cards. That would be the most.",
    "start": "2802630",
    "end": "2809270"
  },
  {
    "text": "And let's see, so the\nnumber of choices-- I'll just say it's, at most, n.",
    "start": "2809270",
    "end": "2814619"
  },
  {
    "text": "I don't have to be fancy here. OK, now we go to the recurrence.",
    "start": "2814620",
    "end": "2822540"
  },
  {
    "start": "2822540",
    "end": "2828900"
  },
  {
    "text": "So I'm going to call\nthis blackjack of i. It's going to be the solution.",
    "start": "2828900",
    "end": "2834800"
  },
  {
    "text": "I want to solve this\nsub-problem from i onwards. What's the best play?",
    "start": "2834800",
    "end": "2840849"
  },
  {
    "text": "And I guess it's going to be a\nmax if I'm measuring winnings.",
    "start": "2840850",
    "end": "2846850"
  },
  {
    "text": "And what's the winnings if I\ndecide to hit this many times? It's a little bit hard to\nwrite down the exact formula.",
    "start": "2846850",
    "end": "2853530"
  },
  {
    "text": "I'm going to write a\nrough version which is the outcome of that first play.",
    "start": "2853530",
    "end": "2860450"
  },
  {
    "text": "It's going to be either I\nlose $1, we tie, or I win $1.",
    "start": "2860450",
    "end": "2867400"
  },
  {
    "text": "So if we end up with the\nsame value, you actually-- in most versions-- you get your\nmoney back, nothing changes.",
    "start": "2867400",
    "end": "2873250"
  },
  {
    "text": "The bet is nullified. So that's a zero outcome. But if we're only\nbetting $1, these",
    "start": "2873250",
    "end": "2878480"
  },
  {
    "text": "are the three possible outcomes. You can compute this, right? If I told you how\nmany times you hit, then you just execute\nthrough those cards",
    "start": "2878480",
    "end": "2886660"
  },
  {
    "text": "and you compute the\nvalues of my hand, of your hand versus\nthe dealer's hand. You see, did anyone bust?",
    "start": "2886660",
    "end": "2893130"
  },
  {
    "text": "If so, they lose. Otherwise you compare\nthe values and you see which is bigger or smaller.",
    "start": "2893130",
    "end": "2899360"
  },
  {
    "text": "This is easy to\ndo in linear time. No biggie. What's useful here is\nthat the dealer strategy",
    "start": "2899360",
    "end": "2904865"
  },
  {
    "text": "is deterministic. So after you know how many cards\nyou take, what the dealer does is force, because he just looks.",
    "start": "2904865",
    "end": "2910550"
  },
  {
    "text": "Do I have 17 or greater? If not, take another card\nand keep repeating that.",
    "start": "2910550",
    "end": "2915840"
  },
  {
    "text": "So it's a\ndeterministic strategy. In linear time, you can figure\nout what the outcome is. Then you also have to add the\noutcome of all the remaining",
    "start": "2915840",
    "end": "2922910"
  },
  {
    "text": "cards, which is just BG of j. This is recursion, super easy.",
    "start": "2922910",
    "end": "2927950"
  },
  {
    "text": "We do this for all choices of j. ",
    "start": "2927950",
    "end": "2933740"
  },
  {
    "text": "It's like a range of i\nplus 4 up to n, I think.",
    "start": "2933740",
    "end": "2939340"
  },
  {
    "start": "2939340",
    "end": "2946170"
  },
  {
    "text": "Sure, that'll work. I should probably\nput an if here, which is if it's a valid play.",
    "start": "2946170",
    "end": "2951420"
  },
  {
    "text": " There are some constraints here. If I've already busted,\nI can't hit again.",
    "start": "2951420",
    "end": "2958532"
  },
  {
    "text": "So in fact what you have\nto do in this for loop is say, well, maybe\nI take another hit. Maybe I take another hit. At some point I go\nover 21, and then you",
    "start": "2958532",
    "end": "2965329"
  },
  {
    "text": "have to stop the for loop. So I'm writing that as an if. You can also do it with a\nbreak, however you want.",
    "start": "2965330",
    "end": "2970680"
  },
  {
    "text": "But that's-- you're considering\nall possible options, all valid options of play.",
    "start": "2970680",
    "end": "2976309"
  },
  {
    "text": "For each of them, you\nsee what the outcome was after the dealer\ntakes some more cards. This is actually a\nlittle bit funny.",
    "start": "2976310",
    "end": "2984510"
  },
  {
    "text": "Sorry, this should really be\nthe number of hits in range",
    "start": "2984510",
    "end": "2990100"
  },
  {
    "text": "from, let's say, 0 to n. Maybe you don't hit at all. And then j is a\nlittle bit tricky,",
    "start": "2990100",
    "end": "2995500"
  },
  {
    "text": "because this is actually i\nplus 4 plus the number of hits",
    "start": "2995500",
    "end": "3001150"
  },
  {
    "text": "plus the number of dealer hits.  OK, so you have to\nrun this algorithm",
    "start": "3001150",
    "end": "3007700"
  },
  {
    "text": "to compute what happened,\nwhich computes how many times a dealer took a card. That's how many\ncards got consumed.",
    "start": "3007700",
    "end": "3014660"
  },
  {
    "text": "And so that's-- if you do i\nplus 4 plus that plus that, that's how many cards are left,\nor where the cards resume.",
    "start": "3014660",
    "end": "3021450"
  },
  {
    "text": "And then you call BJ on that. So we're, in general,\nfrom BJ of i-- if you think of the DAG--",
    "start": "3021450",
    "end": "3028650"
  },
  {
    "text": "there's some position,\nmaybe i plus 4 happens. Maybe it doesn't happen. It depends on what\nthe dealer does.",
    "start": "3028650",
    "end": "3036480"
  },
  {
    "text": "We're going to depend on\ni plus 6, i plus 5 maybe. It's going to be all\nof these possibilities.",
    "start": "3036480",
    "end": "3043039"
  },
  {
    "text": "These are all different plays. And then on each of\nthese edges, we're going to have plus\n1, 0, or minus 1.",
    "start": "3043040",
    "end": "3050090"
  },
  {
    "text": "Those are the outcomes,\nwhether I won or lost or tied.",
    "start": "3050090",
    "end": "3055220"
  },
  {
    "text": "And then we're just computing\na shortest path in this DAG. It's actually really easy if\nyou think about it that way.",
    "start": "3055220",
    "end": "3062780"
  },
  {
    "text": "This is just how\nmany cards are left. From that position, you just see\nwhat are all the possibilities? What are all the edges\nthat I could go to?",
    "start": "3062780",
    "end": "3069710"
  },
  {
    "text": "What states could\nI to go to next? How many cards are remaining? How much did it\ncost me or win me?",
    "start": "3069710",
    "end": "3075330"
  },
  {
    "text": "And then take longest\npaths in that DAG. That will give you\nthe exact same answer. That's what this dynamic\nprogramming is doing.",
    "start": "3075330",
    "end": "3082580"
  },
  {
    "text": "In the lecture notes, there's\nmore details where I actually tried to write out this\nfunction, this recurrence",
    "start": "3082580",
    "end": "3088000"
  },
  {
    "text": "as an algorithm. You could do it, assuming\nI've got everything right. It's not that hard.",
    "start": "3088000",
    "end": "3093700"
  },
  {
    "text": "The order here is just the same\nas the order we did before. The running time is going to\nbe cubic in the worst case,",
    "start": "3093700",
    "end": "3098960"
  },
  {
    "text": "because we have-- it's a little non-obvious,\nbut we have n sub-problems. For each of them,\nwe have n choices.",
    "start": "3098960",
    "end": "3105220"
  },
  {
    "text": "And for each choice we have\nto run the dealer strategy. And so that conceivably\ncould take linear time.",
    "start": "3105220",
    "end": "3111869"
  },
  {
    "text": "Here I'm assuming a\ngeneral value of 21. If 21 is actually\nconstant, it only be constant time to\nplay out a single hand,",
    "start": "3111870",
    "end": "3117940"
  },
  {
    "text": "and then it's quadratic time. So it depends on your model\nof generalized blackjack.",
    "start": "3117940",
    "end": "3123380"
  },
  {
    "text": "But that's it. And get some flavor of the\npower of dynamic programming, we're going to see it's\neven more powerful than this",
    "start": "3123380",
    "end": "3129109"
  },
  {
    "text": "in the next two lectures.",
    "start": "3129110",
    "end": "3131430"
  }
]