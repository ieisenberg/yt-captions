[
  {
    "start": "0",
    "end": "150000"
  },
  {
    "start": "0",
    "end": "12910"
  },
  {
    "text": "JASON KU: Welcome to the\nfourth lecture of 6.006. Today we are going to be\ntalking about hashing.",
    "start": "12910",
    "end": "20350"
  },
  {
    "text": "Last lecture, on Tuesday,\nProfessor Solomon was talking about\nset data structures,",
    "start": "20350",
    "end": "29080"
  },
  {
    "text": "storing things so that\nyou can query items by their key right, by what\nthey intrinsically are--",
    "start": "29080",
    "end": "37510"
  },
  {
    "text": "versus what Professor\nDemaine was talking about last week, which was\nsequence data structures, where we impose an external\norder on these items",
    "start": "37510",
    "end": "46059"
  },
  {
    "text": "and we want you\nto maintain those. I'm not supporting operations\nwhere I'm looking stuff up",
    "start": "46060",
    "end": "52780"
  },
  {
    "text": "based on what they are. That's what the set\ninterface is for. So we're going to be talking a\nlittle bit more about the set",
    "start": "52780",
    "end": "59410"
  },
  {
    "text": "interface today. On Tuesday, you saw two\nways of implementing the set",
    "start": "59410",
    "end": "65680"
  },
  {
    "text": "interface-- one using just a\nunsorted array-- just, I threw these things\nin an array and I",
    "start": "65680",
    "end": "72430"
  },
  {
    "text": "could do a linear\nscan of my items to support basically\nany of these operations. It's a little exercise\nyou can go through.",
    "start": "72430",
    "end": "79090"
  },
  {
    "text": "I think they show it to you\nin the recitation notes, but if you'd like to implement\nit for yourself, that's fine.",
    "start": "79090",
    "end": "86620"
  },
  {
    "text": "And then we saw a slightly\nbetter data structure, at least for the find operations.",
    "start": "86620",
    "end": "91780"
  },
  {
    "text": "Can I look something\nup, whether this key is in my set interface?",
    "start": "91780",
    "end": "98750"
  },
  {
    "text": "We can do that faster. We can do that in log n\ntime with a build overhead that's about n log n, because we\nshowed you three ways to sort.",
    "start": "98750",
    "end": "109180"
  },
  {
    "text": "Two of them were n squared. One of them was n log n, which\nis as good as we showed you",
    "start": "109180",
    "end": "115480"
  },
  {
    "text": "how to do yesterday. So the question then becomes,\ncan I build that data structure",
    "start": "115480",
    "end": "120500"
  },
  {
    "text": "faster? That'll be a subject of next\nweek's Thursday lecture. But this week we're going to\nconcentrate on this static",
    "start": "120500",
    "end": "128210"
  },
  {
    "text": "find. we got log n, which is an\nexponential improvement over linear right, but\nthe question now becomes,",
    "start": "128210",
    "end": "137989"
  },
  {
    "text": "can I do faster than log n time? And what we're going to do at\nthe first part of this lecture",
    "start": "137990",
    "end": "144370"
  },
  {
    "text": "is show you that, no, you-- AUDIENCE: [INAUDIBLE] JASON KU: What's up? No? OK-- that you can't do\nfaster than log n time,",
    "start": "144370",
    "end": "155230"
  },
  {
    "text": "in the caveat that we are in a\nslightly more restricted model of computation that we\nwere-- than what we introduce",
    "start": "155230",
    "end": "163060"
  },
  {
    "text": "to you a couple of weeks ago. And then so if we're not in\nthat more constrained model",
    "start": "163060",
    "end": "170210"
  },
  {
    "text": "of computation, we can\nactually do faster. ",
    "start": "170210",
    "end": "175490"
  },
  {
    "text": "Log n's already pretty good. Log n is not going to be larger\nthan like 30 for any problem",
    "start": "175490",
    "end": "183460"
  },
  {
    "text": "that you're going to be\ntalking about in the real world on real computers, but a\nfactor of 30 is still bad.",
    "start": "183460",
    "end": "193720"
  },
  {
    "text": "I would prefer to do faster with\nthose constant factors, when I can. It's not a constant factor.",
    "start": "193720",
    "end": "199360"
  },
  {
    "text": "It's a logarithmic factor,\nbut you get what I'm saying. OK, so what we're\ngoing to do is first",
    "start": "199360",
    "end": "204690"
  },
  {
    "text": "prove that you can't\ndo faster for-- does everyone understand--\nremember what find key meant?",
    "start": "204690",
    "end": "212330"
  },
  {
    "text": "I have a key, I have a bunch of\nitems that have keys associated with them, and I want to see\nif one of the items that I'm",
    "start": "212330",
    "end": "219390"
  },
  {
    "text": "storing contains a key\nthat is the same as the one that I searched for. The item might\ncontain other things,",
    "start": "219390",
    "end": "226680"
  },
  {
    "text": "but in particular,\nit has a search key that I'm maintaining the\nset on so that it supports",
    "start": "226680",
    "end": "232620"
  },
  {
    "text": "find operations, search\noperations based on that key quickly. Does that make sense?",
    "start": "232620",
    "end": "238790"
  },
  {
    "text": "So there's the find one\nthat we want to improve, and we also want to\nimprove this insert delete. We want to be-- make this data\nstructural dynamic, because we",
    "start": "238790",
    "end": "248410"
  },
  {
    "text": "might do those\noperations quite a bit. And so this lecture's about\noptimizing those three things.",
    "start": "248410",
    "end": "255410"
  },
  {
    "text": "OK, so first, I'm\ngoing to show you that we can't do faster\nthan log n for find, which",
    "start": "255410",
    "end": "262150"
  },
  {
    "text": "is a little weird. OK, the model of\ncomputation I'm going to be proving this\nlower bound on--",
    "start": "262150",
    "end": "268600"
  },
  {
    "text": " how I'm going to approach\nthis is I'm going to say that any way that I store these--",
    "start": "268600",
    "end": "277389"
  },
  {
    "text": "the items that I'm storing\nin this data structure-- for anyway I saw these\nthings, any algorithm",
    "start": "277390",
    "end": "285350"
  },
  {
    "text": "of this certain type\nis going to require at least logarithmic time. That's what we're\ngoing to try to prove.",
    "start": "285350",
    "end": "292580"
  },
  {
    "text": "And the model of\ncomputation that's weaker than what we've been\ntalking about previously",
    "start": "292580",
    "end": "298370"
  },
  {
    "text": "is what I'm going to call\nthe comparison model. ",
    "start": "298370",
    "end": "304220"
  },
  {
    "start": "300000",
    "end": "380000"
  },
  {
    "text": "And a comparison model\nmeans-- is that the items, the objects I'm storing--",
    "start": "304220",
    "end": "310010"
  },
  {
    "text": "I can kind of think of\nthem as black boxes. I don't get to touch these\nthings, except the only way",
    "start": "310010",
    "end": "315379"
  },
  {
    "text": "that I can distinguish\nbetween them is to say, given a key and an item, or two\nitems, I can do a comparison",
    "start": "315380",
    "end": "327820"
  },
  {
    "text": "on those keys. Are these keys the same? Is this key bigger\nthan this one?",
    "start": "327820",
    "end": "334060"
  },
  {
    "text": "Is it smaller than this one? Those are the only operations\nI get to do with them.",
    "start": "334060",
    "end": "340449"
  },
  {
    "text": "Say, if the keys are\nnumbers, I don't get to look at what number that is. I just get to take two\nkeys and compare them.",
    "start": "340450",
    "end": "346810"
  },
  {
    "text": "And actually, all of\nthe search algorithms that we saw on Tuesday we're\ncomparison sort algorithms.",
    "start": "346810",
    "end": "353620"
  },
  {
    "text": "What you did was stepped\nthrough the program. At some point, you\ncame to a branch",
    "start": "353620",
    "end": "359289"
  },
  {
    "text": "and you looked at\ntwo keys, and you branched based on whether one\nkey was bigger than another.",
    "start": "359290",
    "end": "366340"
  },
  {
    "text": "That was a comparison. And then you move\nsome stuff around, but that was the\ngeneral paradigm.",
    "start": "366340",
    "end": "371440"
  },
  {
    "text": "Those three sorting operations\nlived in this comparison model.",
    "start": "371440",
    "end": "377540"
  },
  {
    "text": "You've got a\ncomparison operations, like are they equal,\nless than, greater than,",
    "start": "377540",
    "end": "385180"
  },
  {
    "start": "380000",
    "end": "570000"
  },
  {
    "text": "maybe greater than or\nequal, less than or equal? Generally, you have\nall these operations",
    "start": "385180",
    "end": "390580"
  },
  {
    "text": "that you could do--\nmaybe not equal.  But the key thing here\nis that there are only",
    "start": "390580",
    "end": "398199"
  },
  {
    "text": "two possible outputs to\neach of these comparitors. ",
    "start": "398200",
    "end": "404009"
  },
  {
    "text": "There's only one thing\nthat I can branch on. It's going to branch\ninto two different lines.",
    "start": "404010",
    "end": "409830"
  },
  {
    "text": "It's either true and I do\nsome other computation, or it's false and I'll do a\ndifferent set of computation.",
    "start": "409830",
    "end": "416640"
  },
  {
    "text": "That makes sense? So what I'm going\nto do is I'm going to give you a comparison--",
    "start": "416640",
    "end": "422770"
  },
  {
    "text": "an algorithm in the\ncomparison model as what I like to\ncall a decision tree.",
    "start": "422770",
    "end": "428210"
  },
  {
    "text": "So if I specify an\nalgorithm to you, the first thing it's going to\ndo-- if I don't compare items at all, I'm kind of\nscrewed, because I'll never",
    "start": "428210",
    "end": "435890"
  },
  {
    "text": "be able to tell if my\nkeys in there or not. So I have to do\nsome comparisons.",
    "start": "435890",
    "end": "441120"
  },
  {
    "text": "So I'll do some computation. Maybe I find out the\nlength of the array and I do some constant time\nstuff, but at some point,",
    "start": "441120",
    "end": "448039"
  },
  {
    "text": "I'll do a comparison,\nand I'll branch. I'll come to this node,\nand if the comparison--",
    "start": "448040",
    "end": "455600"
  },
  {
    "text": "maybe a less than-- if it's true, I'm going to go\nthis way in my computation,",
    "start": "455600",
    "end": "461240"
  },
  {
    "text": "and if it's false, I'm going to\ngo this way in my computation. And I'm going to keep doing\nthat with various comparisons--",
    "start": "461240",
    "end": "471860"
  },
  {
    "text": "sure-- until I get down\nhere to some leaf in which I",
    "start": "471860",
    "end": "482710"
  },
  {
    "text": "I'm not branching. The internal nodes here are\nrepresenting comparisons,",
    "start": "482710",
    "end": "487860"
  },
  {
    "text": "but the leaves\nare representing-- I stopped my computation. I'm outputting something.",
    "start": "487860",
    "end": "493680"
  },
  {
    "text": "Does that make sense,\nwhat I'm trying to do? I'm changing my\nalgorithm to be put",
    "start": "493680",
    "end": "500700"
  },
  {
    "text": "in this kind of graphical\nway, where I'm branching what my program could possibly\ndo based on the comparisons",
    "start": "500700",
    "end": "508650"
  },
  {
    "text": "that I do. I'm not actually counting\nthe rest of the work that the program does.",
    "start": "508650",
    "end": "515010"
  },
  {
    "text": "I'm really only looking\nat the comparisons, because I know that I need to\ncompare some things eventually",
    "start": "515010",
    "end": "521880"
  },
  {
    "text": "to figure out what my items are. And if that's the only way\nI can distinguish items,",
    "start": "521880",
    "end": "527339"
  },
  {
    "text": "then I have to do those\ncomparisons to find out. Does that make sense? All right, so what I\nhave is a binary tree",
    "start": "527340",
    "end": "536220"
  },
  {
    "text": "that's representing\nthe comparisons done by the algorithm. OK.",
    "start": "536220",
    "end": "541510"
  },
  {
    "text": "So it starts at one comparison\nand then it branches. How many leaves must\nI have in my tree?",
    "start": "541510",
    "end": "547110"
  },
  {
    "text": " What does that question mean,\nin terms of the program?",
    "start": "547110",
    "end": "555106"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] JASON KU: What's up? AUDIENCE: The number\nof comparisons-- JASON KU: The number\nof comparisons-- no,",
    "start": "555106",
    "end": "560160"
  },
  {
    "text": "that's the number\nof internal nodes that I have in the algorithm. And actually, the\nnumber of comparisons",
    "start": "560160",
    "end": "565620"
  },
  {
    "text": "that I do in an execution\nof the algorithm is just along a path from\nhere to the-- to a leaf.",
    "start": "565620",
    "end": "572942"
  },
  {
    "start": "570000",
    "end": "780000"
  },
  {
    "text": "So what do the leaves\nactually represent? Those represent outputs. I'm going to output\nsomething here.",
    "start": "572942",
    "end": "579470"
  },
  {
    "text": "Yep? AUDIENCE: [INAUDIBLE] JASON KU: The number of-- OK. ",
    "start": "579470",
    "end": "585440"
  },
  {
    "text": "So what is the output\nto my search algorithm? Maybe it's the-- an index of\nan item that contains this key.",
    "start": "585440",
    "end": "592660"
  },
  {
    "text": "Or maybe I return the\nitem is the output--",
    "start": "592660",
    "end": "598000"
  },
  {
    "text": "the item of the\nthing I'm storing. And I'm storing n things, so\nI need at least n outputs,",
    "start": "598000",
    "end": "604720"
  },
  {
    "text": "because I need to be able\nto return any of the items that I'm storing based on a\ndifferent search parameter,",
    "start": "604720",
    "end": "611080"
  },
  {
    "text": "if it's going to be correct. I actually need one more output. Why do I need one more output? ",
    "start": "611080",
    "end": "617700"
  },
  {
    "text": "If it's not in there-- so any correct comparison\nsearching algorithm--",
    "start": "617700",
    "end": "626710"
  },
  {
    "text": "I'm doing some comparisons\nto find this thing-- needs to have at\nleast n plus 1 leaves.",
    "start": "626710",
    "end": "634375"
  },
  {
    "text": " Otherwise, it can't be correct,\nbecause I could look up",
    "start": "634375",
    "end": "641280"
  },
  {
    "text": "the one that I'm not\nreturning in that set and it would never be\nable to return that value.",
    "start": "641280",
    "end": "647950"
  },
  {
    "text": "Does that make sense? Yeah? AUDIENCE: [INAUDIBLE] JASON KU: What's n?",
    "start": "647950",
    "end": "653730"
  },
  {
    "text": "For a data structure,\nn is the number of things stored in that\ndata structure at that time-- so the number of items\nin the data structure.",
    "start": "653730",
    "end": "660660"
  },
  {
    "text": "That's what it means\nin all of these tables. Any other questions? OK, so now we get\nto the fun part.",
    "start": "660660",
    "end": "669610"
  },
  {
    "text": "How many comparisons does\nthis algorithm have to do? ",
    "start": "669610",
    "end": "676660"
  },
  {
    "text": "Yeah, up there-- AUDIENCE: [INAUDIBLE] JASON KU: What's up?",
    "start": "676660",
    "end": "682310"
  },
  {
    "text": "All right, your colleague is\njumping ahead for a second, but really, I have to do as many\ncomparisons in the worst case",
    "start": "682310",
    "end": "690140"
  },
  {
    "text": "as the longest root-to-leaf\npath in this tree--",
    "start": "690140",
    "end": "695340"
  },
  {
    "text": "because as I'm executing\nthis algorithm, I'll go down this thing,\nalways branching down,",
    "start": "695340",
    "end": "702860"
  },
  {
    "text": "and at some point,\nI'll get to a leaf. And in the worst\ncase, if I happen to need to return this\nparticular output,",
    "start": "702860",
    "end": "711200"
  },
  {
    "text": "then I'll have to walk down the\nlongest thing, just the longest path.",
    "start": "711200",
    "end": "717180"
  },
  {
    "text": "So then the longest path is the\nsame as the height of the tree, so the question\nthen becomes, what",
    "start": "717180",
    "end": "724040"
  },
  {
    "text": "is the minimum height of any\nbinary tree that has at least n",
    "start": "724040",
    "end": "730790"
  },
  {
    "text": "plus 1 leaves? Does everyone understand why\nwe're asking that question?",
    "start": "730790",
    "end": "738830"
  },
  {
    "text": "Yeah? AUDIENCE: Could you over again\nwhy it needs n plus 1 leaves? JASON KU: Why it needs\nn plus 1 leaves--",
    "start": "738830",
    "end": "744100"
  },
  {
    "text": "if it's a correct algorithm,\nit needs to return-- it needs to be able to\nreturn any of the n items",
    "start": "744100",
    "end": "750220"
  },
  {
    "text": "that I'm storing or say that\nthe key that I'm looking for is not there--",
    "start": "750220",
    "end": "755740"
  },
  {
    "text": "great question. OK, so what is\nthe minimum height of any binary tree\nthat has n plus 1--",
    "start": "755740",
    "end": "764589"
  },
  {
    "text": "at least n plus 1 leaves? You can actually state\na recurrence for that",
    "start": "764590",
    "end": "770080"
  },
  {
    "text": "and solve that. You're going to do that\nin your recitation. But it's log n. The best you can do is if this\nis a balanced binary tree.",
    "start": "770080",
    "end": "777949"
  },
  {
    "text": "So the min height is going\nto be at least log n height.",
    "start": "777950",
    "end": "790600"
  },
  {
    "text": " Or the min height\nis logarithmic,",
    "start": "790600",
    "end": "797500"
  },
  {
    "text": "so it's actually\ntheta right here. But if I just said\nheight here, I would be lower\nbounding the height.",
    "start": "797500",
    "end": "804630"
  },
  {
    "text": "I could have a linear height,\nif I just changed comparisons down one by one, if I was doing\na linear search, for example.",
    "start": "804630",
    "end": "814050"
  },
  {
    "text": "All right, so this is saying\nthat, if I'm just restricting to comparisons, I have to\nspend at least logarithmic time",
    "start": "814050",
    "end": "820680"
  },
  {
    "text": "to be able to find whether\nthis key is in my set. ",
    "start": "820680",
    "end": "826613"
  },
  {
    "text": "But I don't want\nlogarithmic time. I want faster. So how can I do that? AUDIENCE: [INAUDIBLE]",
    "start": "826613",
    "end": "831960"
  },
  {
    "text": "JASON KU: I have one operation\nin my model of computation I presented a\ncouple of weeks ago",
    "start": "831960",
    "end": "836970"
  },
  {
    "text": "that allows me to do faster,\nwhich allows me to do something stronger than comparisons.",
    "start": "836970",
    "end": "843240"
  },
  {
    "text": "Comparisons have a\nconstant branching factor. In particular, I can--",
    "start": "843240",
    "end": "848850"
  },
  {
    "text": "if I do this operation-- this\nconstant time operation-- I can branch to two\ndifferent locations.",
    "start": "848850",
    "end": "857350"
  },
  {
    "text": "It's like an if kind of\nsituation-- if, or else. And in fact, if I had\nconstant branching factor",
    "start": "857350",
    "end": "864540"
  },
  {
    "text": "for any constant here-- if I had three or four, if\nit was bounded by a constant,",
    "start": "864540",
    "end": "871209"
  },
  {
    "text": "the height of this\ntree would still be bounded by a log\nbase the constant of that number of leaves.",
    "start": "871210",
    "end": "879490"
  },
  {
    "text": "So I need, in some sense,\nto be able to branch a non-constant amount.",
    "start": "879490",
    "end": "885860"
  },
  {
    "text": "So how can I branch a\nnon-constant amount? This is a little tricky.",
    "start": "885860",
    "end": "891870"
  },
  {
    "text": "We had this really neat\noperation in the random access",
    "start": "891870",
    "end": "897390"
  },
  {
    "text": "machine that we\ncould randomly go to any place in memory\nin constant time",
    "start": "897390",
    "end": "903540"
  },
  {
    "text": "based on a number.  That was a super\npowerful thing, because",
    "start": "903540",
    "end": "910020"
  },
  {
    "text": "within a single\nconstant time operation, I could go to any\nspace in memory.",
    "start": "910020",
    "end": "915450"
  },
  {
    "text": "That's potentially much larger\nthan linear branching factor, depending on the\nsize of my model",
    "start": "915450",
    "end": "920490"
  },
  {
    "text": "and the size of my machine. So that's a very\npowerful operation. Can we use that to find quicker?",
    "start": "920490",
    "end": "927328"
  },
  {
    "text": "Anyone have any ideas?  Sure. AUDIENCE: [INAUDIBLE]",
    "start": "927328",
    "end": "933103"
  },
  {
    "text": "JASON KU: We're going to\nget to hashing in a second, but this is a simpler\nconcept than hashing--",
    "start": "933103",
    "end": "940640"
  },
  {
    "text": "something you probably\nare familiar with already. We've kind of been\nusing it implicitly",
    "start": "940640",
    "end": "946350"
  },
  {
    "text": "in some of our sequence\ndata structure things. What we're going to do is, if\nI have an item that has key 10,",
    "start": "946350",
    "end": "957860"
  },
  {
    "text": "I'm going to keep an array and\nstore that item 10 spaces away",
    "start": "957860",
    "end": "964110"
  },
  {
    "text": "from the front of the\narray, right at index 9, or the 10th index.",
    "start": "964110",
    "end": "969839"
  },
  {
    "text": "Does that make sense? If I store that item at\nthat location in memory, I can use this random\naccess to that location",
    "start": "969840",
    "end": "979602"
  },
  {
    "text": "and see if there's\nsomething there. If there's something\nthere, I return that item. Does that make sense?",
    "start": "979602",
    "end": "984930"
  },
  {
    "text": "This is what I call a\ndirect access array.  It's really no different\nthan the arrays",
    "start": "984930",
    "end": "992160"
  },
  {
    "start": "990000",
    "end": "1250000"
  },
  {
    "text": "that we've been talking\nabout earlier in the class.",
    "start": "992160",
    "end": "998170"
  },
  {
    "text": "We got an array, and\nif I have an item here",
    "start": "998170",
    "end": "1003690"
  },
  {
    "text": "with key equals 10, I'll stick\nit here in the 10th place.",
    "start": "1003690",
    "end": "1010080"
  },
  {
    "text": "Now, I can only now store\none item with the key 10",
    "start": "1010080",
    "end": "1016210"
  },
  {
    "text": "in my thing, and that's\none of the stipulations we had on our set data structures. If we tried to insert\nsomething with the same key",
    "start": "1016210",
    "end": "1023073"
  },
  {
    "text": "as something already\nstored there, we're going to replace the item. That's what the semantics\nof our set interface was.",
    "start": "1023073",
    "end": "1029530"
  },
  {
    "text": "But that's OK. That's satisfying the\nconditions of our set interface.",
    "start": "1029530",
    "end": "1034859"
  },
  {
    "text": "So if we store it\nthere, that's fantastic. How long does it\ntake to find, if we have an item with the key 10?",
    "start": "1034859",
    "end": "1043240"
  },
  {
    "text": "It takes constant\ntime, worst case-- great. How about inserting\nor deleting something?",
    "start": "1043240",
    "end": "1049385"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] JASON KU: What's that? AUDIENCE: [INAUDIBLE] JASON KU: Again, constant time-- we've solved all our problems.",
    "start": "1049385",
    "end": "1056273"
  },
  {
    "text": "This is amazing.  OK. What's not amazing about this?",
    "start": "1056273",
    "end": "1062090"
  },
  {
    "text": "Why don't we just do\nthis all the time? ",
    "start": "1062090",
    "end": "1067550"
  },
  {
    "text": "Yeah? AUDIENCE: You don't know\nhow high the numbers go.",
    "start": "1067550",
    "end": "1073450"
  },
  {
    "text": "JASON KU: I don't know\nhow high the numbers go. So let's say I'm\nstoring, I don't know,",
    "start": "1073450",
    "end": "1079429"
  },
  {
    "text": "a number associated with\nthat the 300 or 400 of you that are in this classroom.",
    "start": "1079430",
    "end": "1085220"
  },
  {
    "text": " But I'm storing your MIT IDs.",
    "start": "1085220",
    "end": "1090330"
  },
  {
    "text": "How big are those numbers? Those are like\nnine-digit numbers-- pretty long numbers.",
    "start": "1090330",
    "end": "1097370"
  },
  {
    "text": "So what I would need to do--\nand if I was storing your keys as MIT IDs, I\nwould need an array",
    "start": "1097370",
    "end": "1105460"
  },
  {
    "text": "that has indices\nthat span the tire space of nine-digit numbers.",
    "start": "1105460",
    "end": "1113030"
  },
  {
    "text": "That's like 10 to the-- 10 to the 9. Thank you.",
    "start": "1113030",
    "end": "1118640"
  },
  {
    "text": "10 to the 9 is the size of\na direct access road off to build to be able\nto use this technique",
    "start": "1118640",
    "end": "1130010"
  },
  {
    "text": "to create a direct access array\nto search on your MIT IDs, when there's only really\n300 of you in here.",
    "start": "1130010",
    "end": "1137570"
  },
  {
    "text": "So 300 or 400 is\nan n that's much smaller than the\nsize of the numbers",
    "start": "1137570",
    "end": "1143030"
  },
  {
    "text": "that I'm trying to store. What I'm going to\nuse as a variable to talk about the size of\nthe numbers I'm storing--",
    "start": "1143030",
    "end": "1149030"
  },
  {
    "text": "I'm going to say u is the\nmaximum size of any number that I'm storing. It's the size of the universe of\nspace of keys that I'm storing.",
    "start": "1149030",
    "end": "1157910"
  },
  {
    "text": "Does that make sense? OK, so to instantiate a direct\naccess array of that size,",
    "start": "1157910",
    "end": "1164330"
  },
  {
    "text": "I have to allocate\nthat amount of space. And so if that is\nmuch bigger than n,",
    "start": "1164330",
    "end": "1171140"
  },
  {
    "text": "then I'm kind of\nscrewed, because I'm using much more space. And these order operations are\nbad also, because essentially,",
    "start": "1171140",
    "end": "1180530"
  },
  {
    "text": "if I am storing these\nthings non-continuously,",
    "start": "1180530",
    "end": "1186020"
  },
  {
    "text": "I kind of just have\nto scan down the thing to find the next\nelement, for example.",
    "start": "1186020",
    "end": "1192929"
  },
  {
    "text": "OK, what's your question? AUDIENCE: Is a\ndirect access array a sequence data structure? JASON KU: A direct access\narray is a set data structure.",
    "start": "1192930",
    "end": "1199532"
  },
  {
    "text": "That's why it's a set\ninterface up there. ",
    "start": "1199532",
    "end": "1205670"
  },
  {
    "text": "Your colleague is asking whether\nyou can use a direct accessory to implement a set-- I mean a sequence.",
    "start": "1205670",
    "end": "1211580"
  },
  {
    "text": "And actually, I think you'll\nsee in your recitation notes, you have code that can\ntake a set data structure",
    "start": "1211580",
    "end": "1219140"
  },
  {
    "text": "and implement sequence\ndata structure, and take sequence data structure\nand implement a set data structure.",
    "start": "1219140",
    "end": "1224723"
  },
  {
    "text": "They just won't necessarily\nhave very good run time. So this direct access\narray semantics is really just good for these\nspecific set operations.",
    "start": "1224723",
    "end": "1234054"
  },
  {
    "text": "Does that makes sense? Yeah? AUDIENCE: What is u? JASON KU: u is this the\nsize of the largest key",
    "start": "1234055",
    "end": "1239410"
  },
  {
    "text": "that I'm allowed to store. That makes sense? The direct access array is\nsupporting up to u size keys.",
    "start": "1239410",
    "end": "1247375"
  },
  {
    "text": "Does that make sense? OK, we're going to\nmove on for a second. That's the problem, right?",
    "start": "1247375",
    "end": "1252860"
  },
  {
    "start": "1250000",
    "end": "1475000"
  },
  {
    "text": "When u largest key--",
    "start": "1252860",
    "end": "1259475"
  },
  {
    "text": " we're assuming integers here--",
    "start": "1259475",
    "end": "1264650"
  },
  {
    "text": "integer keys-- so in\nthe comparison model,",
    "start": "1264650",
    "end": "1270200"
  },
  {
    "text": "we could store any\narbitrary objects that supported a comparison. Here we really need\nto have integer keys,",
    "start": "1270200",
    "end": "1277850"
  },
  {
    "text": "or else we're not going to be\nable to use those as addresses. So we're making an\nassumption on the inputs",
    "start": "1277850",
    "end": "1285740"
  },
  {
    "text": "that I can only\nstore integers now. I can't store\narbitrary objects-- items with keys.",
    "start": "1285740",
    "end": "1291529"
  },
  {
    "text": "And in particular, I also\nneed to-- this is a subtlety that's in the word RAM model--",
    "start": "1291530",
    "end": "1296870"
  },
  {
    "text": "how can I be assured\nthat these keys can be looked up in constant time? ",
    "start": "1296870",
    "end": "1304130"
  },
  {
    "text": "I have this little CPU. It's got some number of\nregisters it can act upon.",
    "start": "1304130",
    "end": "1309309"
  },
  {
    "text": "How big is those registers? AUDIENCE: [INAUDIBLE] JASON KU: What? ",
    "start": "1309310",
    "end": "1316360"
  },
  {
    "text": "Right now, they're 64 bits,\nbut in general, they're w. They're the size of your\nword on your machine.",
    "start": "1316360",
    "end": "1324790"
  },
  {
    "text": "2 to the w is the number\nof dresses I can access. If I'm going to be able to\nuse this direct accessory,",
    "start": "1324790",
    "end": "1331930"
  },
  {
    "text": "I need to make sure that the\nu is less than 2 to the w,",
    "start": "1331930",
    "end": "1339220"
  },
  {
    "text": "if I want these operations\nto run in constant time. If I have kids that are\nmuch larger than this,",
    "start": "1339220",
    "end": "1345669"
  },
  {
    "text": "I'm going to need to\ndo something else, but this is kind\nof the assumption. In this class, when we give\nyou an array of integers,",
    "start": "1345670",
    "end": "1354010"
  },
  {
    "text": "or an array of\nstrings, or something like that on your\nproblem or on an exam, the assumption is,\nunless we give you bounds",
    "start": "1354010",
    "end": "1361990"
  },
  {
    "text": "on the size of those things-- like the number of\ncharacters in your string",
    "start": "1361990",
    "end": "1367690"
  },
  {
    "text": "or the size of the\nnumber in the-- you can assume that those things\nwill fit in one word of memory.",
    "start": "1367690",
    "end": "1373690"
  },
  {
    "text": " w is the word size of your\nmachine, the number of bits",
    "start": "1373690",
    "end": "1384039"
  },
  {
    "text": "that your machine can do\noperations on in constant time. Any other questions?",
    "start": "1384040",
    "end": "1390559"
  },
  {
    "text": "OK, so we have this problem. We're using way too\nmuch space, when we",
    "start": "1390560",
    "end": "1395710"
  },
  {
    "text": "have a large universe of keys. So how do we get around\nthat Problem any ideas?",
    "start": "1395710",
    "end": "1404139"
  },
  {
    "text": " Sure.",
    "start": "1404140",
    "end": "1409928"
  },
  {
    "text": "AUDIENCE: Instead\nof [INAUDIBLE].. ",
    "start": "1409928",
    "end": "1416179"
  },
  {
    "text": "JASON KU: OK, so what\nyour colleague is saying-- instead of just storing\none value at each place,",
    "start": "1416180",
    "end": "1423110"
  },
  {
    "text": "maybe store more than one value. If we're using\nthis idea, where I",
    "start": "1423110",
    "end": "1430590"
  },
  {
    "text": "am storing my key at\nthe index of the key, that's getting\naround the us having",
    "start": "1430590",
    "end": "1435750"
  },
  {
    "text": "to have unique keys\nin our data structure. It's not getting around\nthis space usage problem.",
    "start": "1435750",
    "end": "1442590"
  },
  {
    "text": "Does that make sense? We will end up storing\nmultiple things at indices,",
    "start": "1442590",
    "end": "1449000"
  },
  {
    "text": "but there's another trick that\nI'm looking for right now. We have a lot of\nspace that we would",
    "start": "1449000",
    "end": "1456230"
  },
  {
    "text": "need to allocate for\nthis data structure. What's an alternative?",
    "start": "1456230",
    "end": "1462870"
  },
  {
    "text": "Instead of allocating a\nlot of space, we allocate-- ",
    "start": "1462870",
    "end": "1468460"
  },
  {
    "text": "less space. Let's allocate less space. All right. ",
    "start": "1468460",
    "end": "1476270"
  },
  {
    "start": "1475000",
    "end": "1525000"
  },
  {
    "text": "This is our space of keys, u.  But instead, I want to store\nthose things in a direct access",
    "start": "1476270",
    "end": "1487040"
  },
  {
    "text": "array of maybe size n, something\nlike the order of the things",
    "start": "1487040",
    "end": "1493902"
  },
  {
    "text": "that I'm going to be storing. I'm going to relax\nthat and say we're going to make this\na length m that's",
    "start": "1493902",
    "end": "1500780"
  },
  {
    "text": "around the size of the\nthings I'm storing. ",
    "start": "1500780",
    "end": "1507757"
  },
  {
    "text": "And what I'm going to\ndo is I'm going to try to map this space of keys-- this large space of\nkeys, from 0 to u minus 1",
    "start": "1507757",
    "end": "1516160"
  },
  {
    "text": "or something like that-- down to arrange\nthat 0 to m minus 1.",
    "start": "1516160",
    "end": "1521870"
  },
  {
    "text": " I'm going to want a function-- this is what I'm\ngoing to call h--",
    "start": "1521870",
    "end": "1529100"
  },
  {
    "start": "1525000",
    "end": "1678000"
  },
  {
    "text": "which maps this range\ndown to a smaller range.",
    "start": "1529100",
    "end": "1537150"
  },
  {
    "text": " Does that make sense? I'm going to have\nsome function that",
    "start": "1537150",
    "end": "1543130"
  },
  {
    "text": "takes that large base of keys-- sticks them down here. ",
    "start": "1543130",
    "end": "1548760"
  },
  {
    "text": "And instead of staring\nat an index of the key,",
    "start": "1548760",
    "end": "1555130"
  },
  {
    "text": "I'm going to put the key through\nthis function, the key space, into a compressed\nspace and store it",
    "start": "1555130",
    "end": "1562510"
  },
  {
    "text": "at that index location. Does that make sense? Sure.",
    "start": "1562510",
    "end": "1567527"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] JASON KU: Your colleague is-- comes up with the question I\nwas going to ask right away,",
    "start": "1567527",
    "end": "1575910"
  },
  {
    "text": "which was, what's\nthe problem here? The problem is it's the\npotential that we might be--",
    "start": "1575910",
    "end": "1581250"
  },
  {
    "text": "have to store more than\none thing at the same index location.",
    "start": "1581250",
    "end": "1587930"
  },
  {
    "text": "If I have a function that\nmatches this big space down to this small\nspace, I got to have",
    "start": "1587930",
    "end": "1596450"
  },
  {
    "text": "multiple of these things going\nto the same places here, right? It can't be objective.",
    "start": "1596450",
    "end": "1604130"
  },
  {
    "text": "But just based on\npigeonhole principle, I have more of these things. At least two of them have to\ngo to something over here.",
    "start": "1604130",
    "end": "1610140"
  },
  {
    "text": "In fact, if I have, say, u\nis bigger than n squared, for example, there--",
    "start": "1610140",
    "end": "1618180"
  },
  {
    "text": "for any function I\ngive you that maps this large space down to the\nsmall space, n of these things",
    "start": "1618180",
    "end": "1625110"
  },
  {
    "text": "will map to the same place. So if I choose a\nbad function here,",
    "start": "1625110",
    "end": "1631770"
  },
  {
    "text": "then I'll have to store n things\nat the same index location. And if I go there,\nI have to check",
    "start": "1631770",
    "end": "1639330"
  },
  {
    "text": "to see whether any of\nthose are the things that I'm looking for. I haven't gained anything. I really want a hash function\nthat will evenly distribute",
    "start": "1639330",
    "end": "1647160"
  },
  {
    "text": "keys over this space. ",
    "start": "1647160",
    "end": "1652430"
  },
  {
    "text": "Does that make sense? But we have a problem here. If we need to store\nmultiple things",
    "start": "1652430",
    "end": "1657980"
  },
  {
    "text": "at a given location in memory-- can't do that. I have one thing\nI can put there.",
    "start": "1657980",
    "end": "1664470"
  },
  {
    "text": "So I have two options\non how to deal-- what I call collisions. If I have two items\nhere, like a and b,",
    "start": "1664470",
    "end": "1672860"
  },
  {
    "text": "these are different keys\nin my universe of space.",
    "start": "1672860",
    "end": "1678750"
  },
  {
    "text": "But it's possible that\nthey both map down to some hash that\nhas the same value.",
    "start": "1678750",
    "end": "1687240"
  },
  {
    "text": " If I first hash a, and a is--",
    "start": "1687240",
    "end": "1694019"
  },
  {
    "text": "I put a there, where do I put b? ",
    "start": "1694020",
    "end": "1702169"
  },
  {
    "text": "There are two options. AUDIENCE: Is the second\ndata structure [INAUDIBLE]",
    "start": "1702170",
    "end": "1708920"
  },
  {
    "text": "so that it can\nstore [INAUDIBLE]?? JASON KU: OK, so what\nyour colleague is saying--",
    "start": "1708920",
    "end": "1714410"
  },
  {
    "text": "can I store this one\nis a linked list, and then I can just insert a\nguy right next to where it was?",
    "start": "1714410",
    "end": "1720929"
  },
  {
    "text": "What's the problem there? Are linked lists good with\ndirect accessing by an index?",
    "start": "1720930",
    "end": "1728550"
  },
  {
    "text": "No, they're terrible\nwith get_at and set_at They take linear time there. So really, the whole\npoint of direct this array",
    "start": "1728550",
    "end": "1735570"
  },
  {
    "text": "is that there is an\narray underneath, and I can do this\nindex arithmetic and go down to the next thing.",
    "start": "1735570",
    "end": "1741590"
  },
  {
    "text": "So I really don't want\nto replace a linked list as this data structure.",
    "start": "1741590",
    "end": "1747460"
  },
  {
    "text": "Yeah?  What's up? AUDIENCE: [INAUDIBLE]",
    "start": "1747460",
    "end": "1753990"
  },
  {
    "text": "JASON KU: We can make\nit really unlikely. Sure. I don't know what likely\nmeans, because I'm",
    "start": "1753990",
    "end": "1759840"
  },
  {
    "text": "giving you a hash function--\none hash function. And I don't know\nwhat the inputs are. Yeah?",
    "start": "1759840",
    "end": "1766200"
  },
  {
    "text": "Go ahead. AUDIENCE: [INAUDIBLE]",
    "start": "1766200",
    "end": "1771630"
  },
  {
    "text": "JASON KU: OK, right. So there are actually\ntwo solutions here.",
    "start": "1771630",
    "end": "1776770"
  },
  {
    "text": "One is I-- maybe, if I\nchoose m to be larger than n,",
    "start": "1776770",
    "end": "1782520"
  },
  {
    "text": "there's going to be\nextra space in here. I'll just stick it somewhere\nelse in the existing array.",
    "start": "1782520",
    "end": "1789460"
  },
  {
    "text": "How I find an open space\nis a little complicated, but this is a technique\ncalled open addressing, which",
    "start": "1789460",
    "end": "1797710"
  },
  {
    "text": "is much more common\nthan the technique we're going to be talking\nabout today in implementations.",
    "start": "1797710",
    "end": "1804250"
  },
  {
    "text": "Python uses an open addressing\nscheme, which is essentially, find another place in the\narray to put this collision.",
    "start": "1804250",
    "end": "1812680"
  },
  {
    "text": "Open addressing is notoriously\ndifficult to analyze, so we're not going to\ndo that in this class. There's a much easier\ntechnique that-- we",
    "start": "1812680",
    "end": "1819159"
  },
  {
    "text": "have an implementation for you\nin the recitation handouts. It's what your\ncolleague up here--",
    "start": "1819160",
    "end": "1826080"
  },
  {
    "text": "I can't find him-- over there was saying-- was, instead of storing\nit somewhere else",
    "start": "1826080",
    "end": "1831360"
  },
  {
    "text": "in the existing direct\naccess array down here, which we usually\ncall the hash table--",
    "start": "1831360",
    "end": "1837240"
  },
  {
    "text": " instead of storing it somewhere\nelse in that hash table,",
    "start": "1837240",
    "end": "1843690"
  },
  {
    "text": "we'll instead, at that\nkey, store a pointer to another data structure,\nsome other data structure that",
    "start": "1843690",
    "end": "1851790"
  },
  {
    "text": "can store a bunch of things--\njust like any sequence data structure, like a dynamic\narray, or linked list, or anything right.",
    "start": "1851790",
    "end": "1857610"
  },
  {
    "text": "All I need to do is be able\nto stick a bunch of things on there when there\nare collisions,",
    "start": "1857610",
    "end": "1863490"
  },
  {
    "text": "and then, when I go up\nto look for that thing, I'll just look through all\nof the things in that data",
    "start": "1863490",
    "end": "1869400"
  },
  {
    "text": "structure and see\nif my key exists. Does that make sense? Now, we want to make sure\nthat those additional data",
    "start": "1869400",
    "end": "1876210"
  },
  {
    "text": "structures, which\nI'll call chains-- we want to make sure that\nthose chains are short.",
    "start": "1876210",
    "end": "1884880"
  },
  {
    "text": "I don't want them to be long. So what I'm going to do is,\nwhen I have this collision here, instead I'll have\na pointer to some--",
    "start": "1884880",
    "end": "1891595"
  },
  {
    "text": "I don't know-- maybe make it\na dynamic array, or a linked list, or something like that. And I'll put a here\nand I'll b here.",
    "start": "1891595",
    "end": "1898590"
  },
  {
    "text": "And then later, when I look\nup key K, or look up a or b--",
    "start": "1898590",
    "end": "1906470"
  },
  {
    "text": "let's look up b-- I'll go to this hash value here. I'll put it through\nthe hash function.",
    "start": "1906470",
    "end": "1912770"
  },
  {
    "text": "I'll go to this index. I'll go to the data structure,\nthe chain associated to that index, and I'll\nlook at all of these items.",
    "start": "1912770",
    "end": "1919620"
  },
  {
    "text": "I'm just going to\ndo a linear find. I'm going to look.  I could put any\ndata structure here,",
    "start": "1919620",
    "end": "1926000"
  },
  {
    "text": "but I'm going to look at\nthis one, see if it's b. It's not b. Look at this one-- it is b.",
    "start": "1926000",
    "end": "1931549"
  },
  {
    "text": "I return yes. Does that make sense? So this is an idea\ncalled chaining. I can put anything I want there.",
    "start": "1931550",
    "end": "1936800"
  },
  {
    "text": "Commonly, we talk about\nputting a linked list there, but you can put a\ndynamic array there.",
    "start": "1936800",
    "end": "1944240"
  },
  {
    "text": "You can put a sorted array\nthere to make it easier to check whether\nthe key is there. You can put anything\nyou want there.",
    "start": "1944240",
    "end": "1950690"
  },
  {
    "text": "The point of this\nlecture is going to try to show that there's\na choice of hash function",
    "start": "1950690",
    "end": "1955880"
  },
  {
    "text": "I can make that make sure\nthat these chains are small so",
    "start": "1955880",
    "end": "1962240"
  },
  {
    "text": "that it really doesn't\nmatter how I saw them there, because I can just-- if there's a constant number\nof things stored there,",
    "start": "1962240",
    "end": "1969020"
  },
  {
    "text": "I can just look at all of\nthem and do whatever I want, and still get constant time. Yeah? AUDIENCE: So does that means\nthat, when you have [INAUDIBLE]",
    "start": "1969020",
    "end": "1981920"
  },
  {
    "text": "let's just say, for some\nreason, the number of things [INAUDIBLE] is that most of\nthem get multiple [INAUDIBLE]..",
    "start": "1981920",
    "end": "1990808"
  },
  {
    "text": "Is it just a data structure\nthat only holds one thing? JASON KU: Yeah. So what your colleague\nis saying is,",
    "start": "1990808",
    "end": "1996530"
  },
  {
    "text": "at initialization,\nwhat is stored here? Initially, it points to\nan empty data structure.",
    "start": "1996530",
    "end": "2002590"
  },
  {
    "text": "I'm just going to initialize\nall of these things to have-- now, you get some overhead here. We're paying something for\nthis-- some extra space",
    "start": "2002590",
    "end": "2009370"
  },
  {
    "text": "and having pointer and\nanother data structure at all of these things. Or you could have\nthe semantics where,",
    "start": "2009370",
    "end": "2014590"
  },
  {
    "text": "if I only have one\nthing here, I'm going to store that\nthing at this location, but if I have multiple, it\npoints to a data structure.",
    "start": "2014590",
    "end": "2021320"
  },
  {
    "text": "These are kind of complicated\nimplementation details, but you get the basic idea.",
    "start": "2021320",
    "end": "2026740"
  },
  {
    "text": "If I just have a 0\nsize data structure at all of these\nthings, I'm still going to have a constant\nfactor overhead.",
    "start": "2026740",
    "end": "2034510"
  },
  {
    "text": "It's still going to be a\nlinear size data structure, as long as m is linear in n.",
    "start": "2034510",
    "end": "2039950"
  },
  {
    "text": "Does that makes sense? OK. So how do we pick a\ngood hash function?",
    "start": "2039950",
    "end": "2045030"
  },
  {
    "text": "I already told you\nthat any fixed hash function I give you is going\nto experience collisions.",
    "start": "2045030",
    "end": "2052560"
  },
  {
    "text": "And if u is large, then there's\nthe possibility that I--",
    "start": "2052560",
    "end": "2060190"
  },
  {
    "text": "for some input, all of\nthe things in my set go directly to the same\nhashed index value.",
    "start": "2060190",
    "end": "2067790"
  },
  {
    "text": "So that ain't great. Let's ignore that for a second. What's the easiest\nway to get down",
    "start": "2067790",
    "end": "2073899"
  },
  {
    "text": "from this large space of\nkeys down to a small one? What's the easiest\nthing you could do? Yeah? AUDIENCE: [INAUDIBLE]",
    "start": "2073900",
    "end": "2078969"
  },
  {
    "text": "JASON KU: Modulus-- great. This is called the\ndivision method. ",
    "start": "2078969",
    "end": "2091239"
  },
  {
    "text": "And what its function\nis is essentially, it's going to take\na key and it's",
    "start": "2091239",
    "end": "2096340"
  },
  {
    "text": "going to say equal\nto be K mod m.",
    "start": "2096340",
    "end": "2104500"
  },
  {
    "text": "I'm going to take\nsomething of a large space, and I'm going to mod it so\nthat it just wraps around--",
    "start": "2104500",
    "end": "2109690"
  },
  {
    "text": " perfectly valid thing to do.",
    "start": "2109690",
    "end": "2115110"
  },
  {
    "text": "It satisfies what we're\ndoing in a hash table. And if my kids are completely\nuniformly distributed--",
    "start": "2115110",
    "end": "2124965"
  },
  {
    "text": "if, when I use my hash\nfunction, all of the keys here are uniformly distributed\nover this larger space, then",
    "start": "2124965",
    "end": "2135130"
  },
  {
    "text": "actually, this isn't\nsuch a bad thing. But that's imposing some kind\nof distribution requirements",
    "start": "2135130",
    "end": "2142420"
  },
  {
    "text": "on the type of\ninputs I'm allowed to use with this\nhash function for it to have good performance.",
    "start": "2142420",
    "end": "2148030"
  },
  {
    "text": "But this plus a little bit\nof extra mixing and bit",
    "start": "2148030",
    "end": "2153340"
  },
  {
    "text": "manipulation is essentially\nwhat Python does. Essentially, all it\ndoes is jumbles up",
    "start": "2153340",
    "end": "2160720"
  },
  {
    "text": "that key for some fixed\namount of jumbling,",
    "start": "2160720",
    "end": "2165760"
  },
  {
    "text": "and then mods it m,\nand sticks it there.",
    "start": "2165760",
    "end": "2171590"
  },
  {
    "text": "It's hard coded in the Python\nlibrary, what this hash function is, and so there\nexist some sequences of inserts",
    "start": "2171590",
    "end": "2181480"
  },
  {
    "text": "into a hash table\nin Python which will be really bad in\nterms of performance,",
    "start": "2181480",
    "end": "2186850"
  },
  {
    "text": "because these chain links are\nthe amount number of collisions that I'll get at a single\nhash is going to be large.",
    "start": "2186850",
    "end": "2195030"
  },
  {
    "text": "But they do that\nfor other reasons. They want a deterministic\nhash function. They want something that\nI do the program again--",
    "start": "2195030",
    "end": "2201750"
  },
  {
    "text": "it's going to do the\nsame thing underneath. But sometimes Python\ngets it wrong.",
    "start": "2201750",
    "end": "2207360"
  },
  {
    "text": "But if your data\nthat you're storing is sufficiently uncorrelated\nto the hash function",
    "start": "2207360",
    "end": "2213210"
  },
  {
    "text": "that they've chosen-- which, usually, it is-- this is a pretty\ngood performance.",
    "start": "2213210",
    "end": "2218490"
  },
  {
    "text": "But this is not a\npractical class. Well, it is a practical\nclass, but one of the things",
    "start": "2218490",
    "end": "2225890"
  },
  {
    "text": "that we are-- that's the emphasis\nof this class is making sure we can prove that\nthis is good in theory as well.",
    "start": "2225890",
    "end": "2233690"
  },
  {
    "text": "I don't want to know that\nsometimes this will be good. I really want to know\nthat, if I choose--",
    "start": "2233690",
    "end": "2241400"
  },
  {
    "text": "if I make this data structure\nand I put some inputs on it,",
    "start": "2241400",
    "end": "2246829"
  },
  {
    "text": "I want a running time that\nis independent on what inputs I decided to use,\nindependent of what keys",
    "start": "2246830",
    "end": "2254300"
  },
  {
    "text": "I decided to store. Does that makes sense? ",
    "start": "2254300",
    "end": "2260990"
  },
  {
    "text": "But it's impossible for me to\npick a fixed hash function that will achieve this,\nbecause I just told you that, if u is large--",
    "start": "2260990",
    "end": "2268420"
  },
  {
    "text": "this is u-- if u is\nlarge, then there exists inputs that map\neverything to one place.",
    "start": "2268420",
    "end": "2275184"
  },
  {
    "text": " I'm screwed, right? There's no way to\nsolve this problem.",
    "start": "2275185",
    "end": "2280540"
  },
  {
    "text": " That's true if I want a\ndeterministic hash function--",
    "start": "2280540",
    "end": "2286180"
  },
  {
    "text": "I want the thing\nto be repeatable, to do the same thing\nover and over again for any set of inputs.",
    "start": "2286180",
    "end": "2292430"
  },
  {
    "text": "What can I do instead? Weaken my notion of what\nconstant time is to do better--",
    "start": "2292430",
    "end": "2298480"
  },
  {
    "text": " OK, use a non-deterministic--",
    "start": "2298480",
    "end": "2304570"
  },
  {
    "text": "what does\nnon-deterministic mean? It means don't choose a\nhash function up front--",
    "start": "2304570",
    "end": "2311560"
  },
  {
    "text": "choose one randomly later. So have the user-- they pick whatever inputs\nthey're going to do,",
    "start": "2311560",
    "end": "2318369"
  },
  {
    "text": "and then I'm going to pick\na hash function randomly. They don't know which hash\nfunction I'm going to pick, so it's hard for them to\ngive me an input that's bad.",
    "start": "2318370",
    "end": "2325930"
  },
  {
    "text": " I'm going to choose a\nrandom hash function.",
    "start": "2325930",
    "end": "2332530"
  },
  {
    "text": "Can I choose a hash\nfunction from the space of all hash functions?",
    "start": "2332530",
    "end": "2338160"
  },
  {
    "text": "What is the space of all\nhash functions of this form? ",
    "start": "2338160",
    "end": "2343380"
  },
  {
    "text": "For every one of these values,\nI give a value in here. ",
    "start": "2343380",
    "end": "2350640"
  },
  {
    "text": "For each one of these\nindependently random number between this range, how many\nsuch hash functions are there?",
    "start": "2350640",
    "end": "2355920"
  },
  {
    "text": " m to the this number--\nthat's a lot of things.",
    "start": "2355920",
    "end": "2365049"
  },
  {
    "text": "So I can't do that. What I can do is fix a\nfamily of hash functions where, if I choose\none from-- randomly,",
    "start": "2365050",
    "end": "2372390"
  },
  {
    "text": "I get good performance. And so the hash function\nI'm going to use, and we're going to spend\nthe rest of the time on,",
    "start": "2372390",
    "end": "2379620"
  },
  {
    "text": "is what I call a\nuniversal hash function. It satisfies what we call\na universal hash property--",
    "start": "2379620",
    "end": "2387390"
  },
  {
    "start": "2380000",
    "end": "2730000"
  },
  {
    "text": "so universal hash function.",
    "start": "2387390",
    "end": "2393930"
  },
  {
    "text": "And this is a little bit\nof a weird nomenclature, because I'm defining this to you\nas the universal hash function,",
    "start": "2393930",
    "end": "2401310"
  },
  {
    "text": "but actually, universal\nis a descriptor. There exist many\nuniversal hash functions.",
    "start": "2401310",
    "end": "2409720"
  },
  {
    "text": "This just happens to be\nan example of one of them. OK? ",
    "start": "2409720",
    "end": "2423420"
  },
  {
    "text": "So here's the hash function-- doesn't look actually\nall that different.",
    "start": "2423420",
    "end": "2432640"
  },
  {
    "text": "Goodness gracious-- how\nmany parentheses are there-- mod p, mod m.",
    "start": "2432640",
    "end": "2441470"
  },
  {
    "text": "OK. So it's kind of doing the same\nthing as what's happening up here, but before modding by m,\nI'm multiplying it by a number,",
    "start": "2441470",
    "end": "2452640"
  },
  {
    "text": "I'm adding a number, I'm\ntaking it mod another number, and then I'm getting by m. This is a little weird.",
    "start": "2452640",
    "end": "2458789"
  },
  {
    "text": "And not only that-- this is\nstill a fixed hash function. I don't want that. I want to generalize this to\nbe a family of hash functions,",
    "start": "2458790",
    "end": "2470480"
  },
  {
    "text": "which are this habk for\nsome random choice of a,",
    "start": "2470480",
    "end": "2481160"
  },
  {
    "text": "b in this larger range.",
    "start": "2481160",
    "end": "2486765"
  },
  {
    "text": " All right, this is a\nlot of notation here.",
    "start": "2486765",
    "end": "2494590"
  },
  {
    "text": "Essentially what this is\nsaying is, I have a has family.",
    "start": "2494590",
    "end": "2500350"
  },
  {
    "text": "It's parameterized by the\nlength of my hash function and some fixed large random\nprime that's bigger than u.",
    "start": "2500350",
    "end": "2508840"
  },
  {
    "text": "I'm going to pick some\nlarge prime number, and that's going to be fixed\nwhen I make the hash table.",
    "start": "2508840",
    "end": "2515500"
  },
  {
    "text": " And then, when I\ninstantiate the hash table,",
    "start": "2515500",
    "end": "2522660"
  },
  {
    "text": "I'm going to choose\nrandomly one of these things by choosing a random a and\na random b from this range.",
    "start": "2522660",
    "end": "2530490"
  },
  {
    "text": "Does that makes sense? AUDIENCE: [INAUDIBLE]",
    "start": "2530490",
    "end": "2536450"
  },
  {
    "text": "JASON KU: This is\na not equal to 0. If I had 0 here, I lose\nthe key information,",
    "start": "2536450",
    "end": "2542568"
  },
  {
    "text": "and that's no good.  Does this make sense?",
    "start": "2542568",
    "end": "2547829"
  },
  {
    "text": "So what this is doing\nis multiplying this key by some random number,\nadding some random number,",
    "start": "2547830",
    "end": "2554080"
  },
  {
    "text": "modding by this prime,\nand then modding by the size of my thing.",
    "start": "2554080",
    "end": "2559680"
  },
  {
    "text": "So it's doing a\nbunch of jumbling, and there's some\nrandomness involved here. I'm choosing the hash\nfunction by choosing an a,",
    "start": "2559680",
    "end": "2566250"
  },
  {
    "text": "b randomly from this thing. So when I start\nup my program, I'm",
    "start": "2566250",
    "end": "2573170"
  },
  {
    "text": "going to instantiate this\nthing with some random a and b, not deterministically.",
    "start": "2573170",
    "end": "2578340"
  },
  {
    "text": "The user, when they're\nusing this thing, doesn't know which\na and b I picked,",
    "start": "2578340",
    "end": "2584420"
  },
  {
    "text": "so it's really hard for them\nto give me a bad example. And this universal\nhash function--",
    "start": "2584420",
    "end": "2591020"
  },
  {
    "text": "this universal hash family,\nshall we say-- really, this is a family of functions,\nand I'm choosing one randomly",
    "start": "2591020",
    "end": "2597050"
  },
  {
    "text": "within that family-- is universal. And universality says that--",
    "start": "2597050",
    "end": "2606910"
  },
  {
    "text": "what is the property\nof universality? It means that the probability,\nby choosing a hash function",
    "start": "2606910",
    "end": "2614829"
  },
  {
    "text": "from this hash family,\nthat a certain key collides",
    "start": "2614830",
    "end": "2623530"
  },
  {
    "text": "with another key is less than\nor equal to 1/m for all--",
    "start": "2623530",
    "end": "2632500"
  },
  {
    "text": "any different two\nkeys in my universe.",
    "start": "2632500",
    "end": "2637870"
  },
  {
    "text": " Does that make sense?",
    "start": "2637870",
    "end": "2643020"
  },
  {
    "text": " Basically, this thing has the\nproperty that, if I randomly--",
    "start": "2643020",
    "end": "2650170"
  },
  {
    "text": "for any two keys that I\npick in my universe space,",
    "start": "2650170",
    "end": "2656900"
  },
  {
    "text": "if I randomly choose\na hash function, the probability that\nthese things collide",
    "start": "2656900",
    "end": "2662030"
  },
  {
    "text": "is less than 1/m. Why is that good? This is, in some\nsense, a measure of how well distributed\nthese things are.",
    "start": "2662030",
    "end": "2670250"
  },
  {
    "text": "I want these things to\ncollide with 1/m probability",
    "start": "2670250",
    "end": "2675560"
  },
  {
    "text": "so that these things\ndon't collide very-- it's not very likely for\nthese things to collide.",
    "start": "2675560",
    "end": "2681470"
  },
  {
    "text": "Does that make sense? So we want proof that\nthis hash family satisfies",
    "start": "2681470",
    "end": "2686990"
  },
  {
    "text": "this universality property. You'll do that in 046. But we can use this\nresult to show that,",
    "start": "2686990",
    "end": "2694460"
  },
  {
    "text": "if we use a universal--\nthis universal hash family, that the length of our change--",
    "start": "2694460",
    "end": "2701510"
  },
  {
    "text": "chains is expected to\nbe constant length. So we're going to use this\nproperty to prove that.",
    "start": "2701510",
    "end": "2710050"
  },
  {
    "text": "How do we prove that? We're going to do a\nlittle probability.",
    "start": "2710050",
    "end": "2715180"
  },
  {
    "text": "So how are we going\nto prove that? I'm going to define a random\nvariable, an indicator random variable.",
    "start": "2715180",
    "end": "2720760"
  },
  {
    "text": "Does anyone remember what an\nindicator in a variable is? Yeah, it's a variable that,\nwith some amount of probability,",
    "start": "2720760",
    "end": "2728350"
  },
  {
    "text": "is 1, and 1 minus\nthat probability is 0. So I'm going to\ndefine this indicator",
    "start": "2728350",
    "end": "2735119"
  },
  {
    "start": "2730000",
    "end": "3174000"
  },
  {
    "text": "random variable xij is a random\nvariable over my choice--",
    "start": "2735120",
    "end": "2744310"
  },
  {
    "text": "over choice of a hash\nfunction in my has family.",
    "start": "2744310",
    "end": "2750610"
  },
  {
    "text": "And what does this mean? It means xij equals 1,\nif hash Ki equals hKj--",
    "start": "2750610",
    "end": "2764750"
  },
  {
    "text": "these things collide--\nand 0 otherwise.",
    "start": "2764750",
    "end": "2769850"
  },
  {
    "text": " So I'm choosing randomly\nover this hash family.",
    "start": "2769850",
    "end": "2778380"
  },
  {
    "text": "If, for two keys-- key i and and j--",
    "start": "2778380",
    "end": "2784200"
  },
  {
    "text": "if these things collide,\nthat's going to be 1. If they don't, then it's 0.",
    "start": "2784200",
    "end": "2789579"
  },
  {
    "text": "OK? Then, how can we write\na formula for the length of a chain in this model?",
    "start": "2789580",
    "end": "2797490"
  },
  {
    "text": "So the size of a chain-- ",
    "start": "2797490",
    "end": "2803440"
  },
  {
    "text": "or let's put it here-- the size of the chain at i--",
    "start": "2803440",
    "end": "2815349"
  },
  {
    "text": "at i in my hash table-- is going to equal-- I'm going to call that\nthe random variable xi--",
    "start": "2815350",
    "end": "2823010"
  },
  {
    "text": "that's going to equal the\nsum over j equals 0 to-- ",
    "start": "2823010",
    "end": "2830000"
  },
  {
    "text": "what is it-- over, I think,\nu minus 1 of summation--",
    "start": "2830000",
    "end": "2837140"
  },
  {
    "text": "or sorry-- of xij. So basically, if I\nfix this location i,",
    "start": "2837140",
    "end": "2853410"
  },
  {
    "text": "this is where this key goes. ",
    "start": "2853410",
    "end": "2858490"
  },
  {
    "text": "Sorry. This is the size of\nchain at h of Ki.",
    "start": "2858490",
    "end": "2864480"
  },
  {
    "text": "Sorry. So I look at wherever\nKi goes is hashed, and I see how many\nthings collide with it.",
    "start": "2864480",
    "end": "2872010"
  },
  {
    "text": "I'm just summing over\nall of these things, because this is 1 if there's a\ncollision and 0 if there's not.",
    "start": "2872010",
    "end": "2878750"
  },
  {
    "text": "Does that make sense? So this is the size of the chain\nat the index location mapped",
    "start": "2878750",
    "end": "2884470"
  },
  {
    "text": "to by Ki. ",
    "start": "2884470",
    "end": "2889940"
  },
  {
    "text": "So here's where your\nprobability comes in. What's the expected\nvalue of this chain",
    "start": "2889940",
    "end": "2895160"
  },
  {
    "text": "length over my random choice? Expected value of\nchoosing a hash function",
    "start": "2895160",
    "end": "2902300"
  },
  {
    "text": "from this universal hash\nfamily of this chain length-- ",
    "start": "2902300",
    "end": "2909230"
  },
  {
    "text": "I can put in my definition here. That's the expected value of\nthe summation over j of xij.",
    "start": "2909230",
    "end": "2918330"
  },
  {
    "start": "2918330",
    "end": "2925690"
  },
  {
    "text": "What do I know about\nexpectations and summations? ",
    "start": "2925690",
    "end": "2933220"
  },
  {
    "text": "If these variables are\nindependent from each other-- AUDIENCE: [INAUDIBLE]",
    "start": "2933220",
    "end": "2938839"
  },
  {
    "text": "JASON KU: Say what? AUDIENCE: [INAUDIBLE] JASON KU: Linearity\nof expectation--",
    "start": "2938840",
    "end": "2945500"
  },
  {
    "text": "basically, the expectation sum\nof these independent random variables is the\nsame as the summation of their expectations.",
    "start": "2945500",
    "end": "2952520"
  },
  {
    "text": "So this is equal\nto the summation over j of the expectations\nof these individual ones.",
    "start": "2952520",
    "end": "2958655"
  },
  {
    "start": "2958655",
    "end": "2966870"
  },
  {
    "text": "One of these j's\nis the same as i.",
    "start": "2966870",
    "end": "2972480"
  },
  {
    "text": "j loops over all of the\nthings from 0 to u minus 1. One of them is i, so when xhi is\nhj, what is the expected value",
    "start": "2972480",
    "end": "2987520"
  },
  {
    "text": "that they collide? 1-- so I'm going\nto refactor this",
    "start": "2987520",
    "end": "2992800"
  },
  {
    "text": "as being this, where j\ndoes not equal i, plus 1.",
    "start": "2992800",
    "end": "2999460"
  },
  {
    "text": "Are people OK with that? Because if i equals-- if j and i are equal,\nthey definitely collide.",
    "start": "2999460",
    "end": "3008040"
  },
  {
    "text": "They're the same key. So I'm expected to have\none guy there, which",
    "start": "3008040",
    "end": "3013650"
  },
  {
    "text": "was the original key, xi. But otherwise, we can use\nthis universal property",
    "start": "3013650",
    "end": "3022920"
  },
  {
    "text": "that says, if they're not\nequal and they collide-- which is exactly this case--",
    "start": "3022920",
    "end": "3030329"
  },
  {
    "text": "the probability that\nthat happens is 1/m.",
    "start": "3030330",
    "end": "3035340"
  },
  {
    "text": "And since it's an\nindicator random variable, the expectation is\nthere are outcomes",
    "start": "3035340",
    "end": "3041370"
  },
  {
    "text": "times their probabilities--\nso 1 times that probability plus 0 times 1 minus that\nprobability, which is just 1/m.",
    "start": "3041370",
    "end": "3051060"
  },
  {
    "text": "So now we get the\nsummation of 1/m for j",
    "start": "3051060",
    "end": "3058960"
  },
  {
    "text": "not equal to i plus 1. ",
    "start": "3058960",
    "end": "3068130"
  },
  {
    "text": "Oh, and this-- sorry. I did this wrong. This isn't u. This is n.",
    "start": "3068130",
    "end": "3073980"
  },
  {
    "text": "We're storing n keys. OK, so now I'm looping over j--",
    "start": "3073980",
    "end": "3080490"
  },
  {
    "text": "this over all of those things. How many things are there? n minus 1 things, right?",
    "start": "3080490",
    "end": "3086210"
  },
  {
    "text": "So this should equal 1\nplus n minus 1 over m.",
    "start": "3086210",
    "end": "3092720"
  },
  {
    "text": "So that's what\nuniversality gives us. So as long as we choose\nm to be larger than n,",
    "start": "3092720",
    "end": "3101980"
  },
  {
    "text": "or at least linear\nin n, then we're expected to have our\nchain lengths be constant,",
    "start": "3101980",
    "end": "3109720"
  },
  {
    "text": "because this thing becomes a\nconstant if m is at least order",
    "start": "3109720",
    "end": "3114900"
  },
  {
    "text": "n. Does that make sense? OK. The last thing I'm\ngoing to leave you with",
    "start": "3114900",
    "end": "3120360"
  },
  {
    "text": "is, how do we make\nthis thing dynamic? If we're growing\nthe number of things",
    "start": "3120360",
    "end": "3125400"
  },
  {
    "text": "we're storing in\nthis thing, it's possible that, as we\ngrow n for a fixed m,",
    "start": "3125400",
    "end": "3130920"
  },
  {
    "text": "this thing will stop being-- m will stop being\nlinear in n, right?",
    "start": "3130920",
    "end": "3135990"
  },
  {
    "text": "Well, then all we have to\ndo is, if we get too far, we rebuild the entire thing--",
    "start": "3135990",
    "end": "3142620"
  },
  {
    "text": "the entire hash\ntable with the new m, just like we did\nwith a dynamic array. And you can prove--",
    "start": "3142620",
    "end": "3148830"
  },
  {
    "text": "we're not going to\ndo that here, but you can prove that you won't do that\noperation too often, if you're",
    "start": "3148830",
    "end": "3155970"
  },
  {
    "text": "resizing in the right way. And so you just\nrebuild completely after a certain\nnumber of operations.",
    "start": "3155970",
    "end": "3162210"
  },
  {
    "text": "OK, so that's hashing. Next week, we're\ngoing to be talking about doing a faster sort.",
    "start": "3162210",
    "end": "3168890"
  },
  {
    "start": "3168890",
    "end": "3174306"
  }
]