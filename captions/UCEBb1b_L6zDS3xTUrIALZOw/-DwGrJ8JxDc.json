[
  {
    "start": "0",
    "end": "63000"
  },
  {
    "text": " The following\ncontent is provided under a Creative\nCommons license. Your support will help MIT\nOpenCourseWare continue",
    "start": "0",
    "end": "6860"
  },
  {
    "text": "to offer high quality\neducational resources for free. To make a donation, or\nview additional materials",
    "start": "6860",
    "end": "13320"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13320",
    "end": "20469"
  },
  {
    "text": "PROFESSOR: The things we\ncan talk about today, we can talk about this code. We can talk a little bit more\nabout the hash functions.",
    "start": "20469",
    "end": "28369"
  },
  {
    "text": "And we can talk a little\nbit more about amortization. What to do guys want to hear? ",
    "start": "28370",
    "end": "35110"
  },
  {
    "text": "AUDIENCE: Amoritizaiton. PROFESSOR: OK, so one\nvote for amortization. So who wants to look\nat the PSET code?",
    "start": "35110",
    "end": "42690"
  },
  {
    "text": "Who wants to talk about hashes? Who wants to talk\nabout amortization?",
    "start": "42690",
    "end": "50726"
  },
  {
    "text": "Two, three, four, five, OK. So then let's try this. Let's look at the PSET code then\ntalk about amortization a bit",
    "start": "50726",
    "end": "56970"
  },
  {
    "text": "at the end. I do have to talk a\nlittle bit about hashes though, because I owe someone\na question from last time.",
    "start": "56970",
    "end": "64489"
  },
  {
    "start": "63000",
    "end": "97000"
  },
  {
    "text": "And the question was,\nwe have rolling hashes, so the hashes look like this.",
    "start": "64489",
    "end": "71210"
  },
  {
    "text": "K where K is a big\nnumber, modulo p. And we argue that it's\nreally nice if p is a prime.",
    "start": "71210",
    "end": "81340"
  },
  {
    "text": "And then the question was, what\nif instead p is 2 to the w,",
    "start": "81340",
    "end": "87130"
  },
  {
    "text": "and is not prime, as long\nas the base that we're using is co-prime with p?",
    "start": "87130",
    "end": "96070"
  },
  {
    "text": "Does this work? And the answer\nis-- I didn't want to say yes without making sure\nthat I don't say something",
    "start": "96070",
    "end": "102630"
  },
  {
    "start": "97000",
    "end": "122000"
  },
  {
    "text": "stupid-- but the\nanswer is yes, this works just fine, because the\nway a compute multiplicative",
    "start": "102630",
    "end": "108000"
  },
  {
    "text": "inverse is is you\nuse so something called the extended\nEuclid's method.",
    "start": "108000",
    "end": "118744"
  },
  {
    "text": " And if we have b and p, then\nif we compute their GCD,",
    "start": "118745",
    "end": "128350"
  },
  {
    "start": "122000",
    "end": "213000"
  },
  {
    "text": "the that's the greatest common\ndivisor-- so GCD is greatest--",
    "start": "128350",
    "end": "137470"
  },
  {
    "start": "137470",
    "end": "144710"
  },
  {
    "text": "If you use extended Euclid you\nget something like xb plus yp",
    "start": "144710",
    "end": "152580"
  },
  {
    "text": "equals GCD of b and p.",
    "start": "152580",
    "end": "160340"
  },
  {
    "text": "So if this is 1, then you\nhave xb plus yp equals 1.",
    "start": "160340",
    "end": "168500"
  },
  {
    "text": "And if you're working\nmodulo p, whatever that is, then you have that\nxb is 1 mod p.",
    "start": "168500",
    "end": "179410"
  },
  {
    "text": "So there's your\nmultiplicative inverse. Well so now that's\nnice math, right?",
    "start": "179410",
    "end": "184840"
  },
  {
    "text": "But that doesn't tell me\nwhy are we not using this. So with the multiplicative\ninverse would work,",
    "start": "184840",
    "end": "191465"
  },
  {
    "text": "but there's\nsomething else that's wrong with using 2 to the w. ",
    "start": "191465",
    "end": "198709"
  },
  {
    "text": "Will this give me a\ngood hash function? OK, the fact that it's\np might be confusing.",
    "start": "198710",
    "end": "204300"
  },
  {
    "text": "So let's say h equals\nK mod 2 to the w.",
    "start": "204300",
    "end": "214032"
  },
  {
    "text": "And remember that the K is\nsome digits in base b, right? It's a big number made\nout of digits in base b.",
    "start": "214032",
    "end": "221321"
  },
  {
    "text": "So K is d1, d2, d3, all the way\nup until d length in base b.",
    "start": "221322",
    "end": "232390"
  },
  {
    "text": " And I'll make things easier\nand say that b is 2 to the 8,",
    "start": "232390",
    "end": "240550"
  },
  {
    "start": "235000",
    "end": "304000"
  },
  {
    "text": "because we're working with\nASCII characters, or colors, or something that\nfits nicely in a bit.",
    "start": "240550",
    "end": "247330"
  },
  {
    "text": "So what could go\nwrong with using this? AUDIENCE: Well if your series\nof-- if your K is bigger than",
    "start": "247330",
    "end": "254430"
  },
  {
    "text": "2-- if it's K is bigger\nthan 2 to the w-- PROFESSOR: It will be, for sure. AUDIENCE: Yes, that's the\nproblem, because then you'll",
    "start": "254430",
    "end": "260694"
  },
  {
    "text": "loop. You'll get the same hashes for-- PROFESSOR: Yeah, yeah. So you will get-- So hashing\ntakes a lot of possible inputs",
    "start": "260694",
    "end": "272430"
  },
  {
    "text": "and maps them to a relatively\nsmall set of outputs.",
    "start": "272430",
    "end": "277789"
  },
  {
    "text": "Inputs hash output. And we argued last\ntime that we're going to have collisions\nno matter what,",
    "start": "277790",
    "end": "284315"
  },
  {
    "text": "because we have a ton of inputs\nand not that many outputs. For example, if\nwe're hashing strings that are a million\ncharacters then this",
    "start": "284316",
    "end": "291650"
  },
  {
    "text": "is going to be 2 to the 8 to\nthe 1 million possible strings.",
    "start": "291650",
    "end": "298600"
  },
  {
    "text": "And then the number\nof possible values is, if we're using the\nword size, 2 to the 32.",
    "start": "298600",
    "end": "304889"
  },
  {
    "start": "304000",
    "end": "372000"
  },
  {
    "text": "There is no way we can\ndesign a function that will take this many inputs,\nmap them to this many outputs, and not do collisions.",
    "start": "304890",
    "end": "311270"
  },
  {
    "text": "But instead, what do we want? What makes a good hash function? ",
    "start": "311270",
    "end": "321290"
  },
  {
    "text": "Say my hash function\nis 0 for all the K's. Is that a good hash function?",
    "start": "321290",
    "end": "327392"
  },
  {
    "text": "AUDIENCE: It's an\nexcellent hash function. PROFESSOR: What's wrong with it? AUDIENCE: You would\nput everything in one",
    "start": "327393",
    "end": "332655"
  },
  {
    "text": "so that it's searching, or\nit would take a long time? PROFESSOR: Yeah, searching\ntakes a long time.",
    "start": "332655",
    "end": "338922"
  },
  {
    "text": "And we've don't do\nsorting with this yet. Searching takes a long\ntime, string sub-matching will take a long\ntime, it's horrible.",
    "start": "338922",
    "end": "344120"
  },
  {
    "text": " AUDIENCE: So what\nwould that distribute--",
    "start": "344121",
    "end": "349689"
  },
  {
    "text": "like [INAUDIBLE] over all-- PROFESSOR: All right,\nso we want something that looks sort of random.",
    "start": "349690",
    "end": "356560"
  },
  {
    "text": "The ideals hash function\ntakes an input then gives it a random output,\nand then stays consistent.",
    "start": "356560",
    "end": "362127"
  },
  {
    "text": "So when it sees an input,\nreturns the same output. ",
    "start": "362127",
    "end": "370030"
  },
  {
    "text": "So I think distribute\nis the keyword here. What's wrong with\nthis hash function?",
    "start": "370030",
    "end": "375960"
  },
  {
    "start": "372000",
    "end": "459000"
  },
  {
    "text": " If it takes random\ndata, it's going",
    "start": "375960",
    "end": "381650"
  },
  {
    "text": "to distribute it randomly. That's true, so that's all good. But what data that we\nmight see in real life",
    "start": "381650",
    "end": "387260"
  },
  {
    "text": "will make it behave badly? AUDIENCE: The K is a series\nof characters, right?",
    "start": "387260",
    "end": "394690"
  },
  {
    "text": "PROFESSOR: Maybe. AUDIENCE: It just\ncould be anything. But we know for sure that\nL will be larger than w.",
    "start": "394690",
    "end": "401760"
  },
  {
    "text": "PROFESSOR: Say L is a million. AUDIENCE: OK, well that sucks. PROFESSOR: Oh, no.",
    "start": "401760",
    "end": "407245"
  },
  {
    "text": "That in itself,\nthat doesn't suck. That's what let's us do\nsub-string matching really fast, even if we\nhave large strings.",
    "start": "407245",
    "end": "412746"
  },
  {
    "text": "AUDIENCE: --say for\n2 to the w, though, because then it will be much\nlarger, like the number of-- PROFESSOR: Yeah, but that's OK.",
    "start": "412746",
    "end": "418199"
  },
  {
    "text": "So I'm OK with doing this as\nlong as all the values here",
    "start": "418200",
    "end": "423410"
  },
  {
    "text": "are distributed sort\nof uniformly here. So that's fine. AUDIENCE: OK. PROFESSOR: But there's-- I'm\narguing that there are some",
    "start": "423410",
    "end": "431370"
  },
  {
    "text": "values which will make this\nhash function behave badly. And that those values are so\nsimple that we might see them",
    "start": "431370",
    "end": "437770"
  },
  {
    "text": "in real life. ",
    "start": "437770",
    "end": "446380"
  },
  {
    "text": "OK, what if all these\nnumbers are-- what if all the digits are even?",
    "start": "446380",
    "end": "452670"
  },
  {
    "text": "So d is 0 mod 2. ",
    "start": "452670",
    "end": "460150"
  },
  {
    "start": "459000",
    "end": "615000"
  },
  {
    "text": "What happens to K? ",
    "start": "460150",
    "end": "465506"
  },
  {
    "text": "AUDIENCE: Well, you're saying\nthat instead of 2 to the w, we're just using 2. PROFESSOR: So no, the\nmodulo is 2 to the w.",
    "start": "465506",
    "end": "472392"
  },
  {
    "text": "Say it's 2 to the 32. So d are the digits that\nmake up my K. So what",
    "start": "472392",
    "end": "481630"
  },
  {
    "text": "if the base is 2 to the 8? So I have digits from\n0 to 255, 256 of them.",
    "start": "481630",
    "end": "486850"
  },
  {
    "text": "And all the digits\nare 0 modulo 2. ",
    "start": "486850",
    "end": "494380"
  },
  {
    "text": "For my sub-string\nmatching example, what if all the characters\nin the sub-string are even? ",
    "start": "494380",
    "end": "502698"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: Not the same thing. But there's a problem. They will hash to-- so\nif all the digits are",
    "start": "502698",
    "end": "510240"
  },
  {
    "text": "0 modulo 2 then\nwhat about the K?",
    "start": "510240",
    "end": "516640"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]\n0 modulo 2-- PROFESSOR: Yep. ",
    "start": "516640",
    "end": "524640"
  },
  {
    "text": "So it's just like when you\nhave numbers in base 10. 10 happens to be divisible by 2.",
    "start": "524640",
    "end": "530520"
  },
  {
    "text": "So if your last digit is even,\nthen the entire number is even. ",
    "start": "530520",
    "end": "537451"
  },
  {
    "text": "That makes sense, right? That's math. Please nod, tell me\nthat I'm making sense. OK, so here, the base is 256.",
    "start": "537451",
    "end": "546010"
  },
  {
    "text": "And it's also divisible by 2. So if your last digit\nis divisible by 2, then the whole number\nis divisible by 2.",
    "start": "546010",
    "end": "553100"
  },
  {
    "text": "So then if I take this\nK modulo 2 to the 32",
    "start": "553100",
    "end": "559089"
  },
  {
    "text": "then the hash is also\ngoing to be divisible by 2. ",
    "start": "559090",
    "end": "569084"
  },
  {
    "text": "AUDIENCE: Why does it matter\nif the hash is divisible by 2? ",
    "start": "569084",
    "end": "575019"
  },
  {
    "text": "PROFESSOR: So it\nmatters because this is supposed to be\nmy universe, right?",
    "start": "575020",
    "end": "581430"
  },
  {
    "text": "These are supposed to\nbe all the outputs. And I'm saying that if\nmy inputs look like this, then the hash function will\nnot distribute them uniformly.",
    "start": "581430",
    "end": "588760"
  },
  {
    "text": "Instead, if this is my\npossible set of outputs, the hash function will always\nput outputs in this half.",
    "start": "588760",
    "end": "596123"
  },
  {
    "text": "So the outputs will\nalways be here. And these are the numbers\nthat are divisible by 2.",
    "start": "596123",
    "end": "601220"
  },
  {
    "text": "So these are even,\nand these are odd. ",
    "start": "601220",
    "end": "610770"
  },
  {
    "text": "And this area gets no love. Absolutely no number\nwill hash here.",
    "start": "610770",
    "end": "616070"
  },
  {
    "start": "615000",
    "end": "682000"
  },
  {
    "text": "So-- AUDIENCE: Wait, what about\nsomething with all odds? AUDIENCE: Something\nwith all odd digits?",
    "start": "616070",
    "end": "622902"
  },
  {
    "text": "AUDIENCE: Because\nyou're asking-- AUDIENCE: You have\nall A's rather than all B's in your sub-string\nor in your string.",
    "start": "622902",
    "end": "628597"
  },
  {
    "text": "AUDIENCE: Or because\nyour last digit was odd. PROFESSOR: If all of\nour digits are odd then the last digit is odd.",
    "start": "628597",
    "end": "634590"
  },
  {
    "text": "And then you'd also get\nsomething odd, right? AUDIENCE: Yeah. AUDIENCE: So there's a pattern.",
    "start": "634590",
    "end": "640445"
  },
  {
    "text": "But there's an\neven distribution. PROFESSOR: Well if your\nhash function is always odd,",
    "start": "640445",
    "end": "649050"
  },
  {
    "text": "then it's not an\neven distribution. It's-- AUDIENCE: Wait,\nour hash function? I thought we were\ntalking about--",
    "start": "649050",
    "end": "655074"
  },
  {
    "text": "AUDIENCE: Isn't it\neven if your K is even? And if it's odd [INAUDIBLE]?",
    "start": "655074",
    "end": "660332"
  },
  {
    "text": "PROFESSOR: Yeah, so that's bad. Because if all your K's\nhappens to be even--",
    "start": "660332",
    "end": "665520"
  },
  {
    "text": "say if you're doing\nthe nucleotides, and the nucleotides\nare A, C, G, T.",
    "start": "665520",
    "end": "675020"
  },
  {
    "text": "If they happen to be\nencoded as, say, 0, 2, 4, 6,",
    "start": "675020",
    "end": "680391"
  },
  {
    "text": "then these are all even.  So the hash function\nwill always be even",
    "start": "680391",
    "end": "685620"
  },
  {
    "start": "682000",
    "end": "779000"
  },
  {
    "text": "and I'm wasting the last bit. So if I'm building a hash\ntable, half the entries",
    "start": "685620",
    "end": "690930"
  },
  {
    "text": "will be wasted. They'll never get\nanything in there. I'm just wasting memory. AUDIENCE: So if\nyou could guarantee",
    "start": "690930",
    "end": "698090"
  },
  {
    "text": "that your inputs would\nbe evenly distributed--",
    "start": "698090",
    "end": "703887"
  },
  {
    "text": "PROFESSOR: So if our\ninputs are random then the hash function--\nmost hash functions will do a good job of\nproducing a random output.",
    "start": "703887",
    "end": "709900"
  },
  {
    "text": "The problem is real life\ninputs are not random. For example, if you\nget-- asides from this--",
    "start": "709900",
    "end": "715970"
  },
  {
    "text": "if you get data from a camera,\nso if you get your color pixels from a camera, then\nbecause of noise those",
    "start": "715970",
    "end": "722880"
  },
  {
    "text": "might have the last few bits,\nalways be the same thing. ",
    "start": "722880",
    "end": "729190"
  },
  {
    "text": "Also it seems like in\nreal life-- [INAUDIBLE], in his book, argues about this. It seems like in\nreal life there are",
    "start": "729190",
    "end": "735085"
  },
  {
    "text": "a lot of sequences that look\nlike that, that would make your hash function\nbehave poorly. ",
    "start": "735085",
    "end": "743470"
  },
  {
    "text": "So again, the keyword\nis distribute. If some non-random\nproperty in the input is reflected in the output,\nthen that's a bad hash function.",
    "start": "743470",
    "end": "750946"
  },
  {
    "text": " AUDIENCE: Would you\ngain a lot of time from your mod operation?",
    "start": "750946",
    "end": "758460"
  },
  {
    "text": "Because in mod 2 to the n\nyou just truncate any bits",
    "start": "758460",
    "end": "765580"
  },
  {
    "text": "to the left of the n. PROFESSOR: Yeah, so that's\nwhy we would do this, right? That's why we're even\nconsidering this case.",
    "start": "765580",
    "end": "772440"
  },
  {
    "text": "AUDIENCE: Because that'd be\nreally nice to be able to not-- PROFESSOR: So modulo is faster,\nbut in return my hash function",
    "start": "772440",
    "end": "777705"
  },
  {
    "text": "is crap here. So usually we prefer-- it turns\nout that in practice nicer hash",
    "start": "777705",
    "end": "783260"
  },
  {
    "start": "779000",
    "end": "855000"
  },
  {
    "text": "functions give better\nspeed improvements overall.",
    "start": "783260",
    "end": "788650"
  },
  {
    "text": "So if you think of how a\nhash is laid out in memory, you'll see that\nbecause of caching. And everything gets better\nto take more time on the mod",
    "start": "788650",
    "end": "796225"
  },
  {
    "text": "function and use up all your\nmemory for the hash table.",
    "start": "796225",
    "end": "801319"
  },
  {
    "text": "So this is why we don't\nuse the and we use this. Not because of this argument.",
    "start": "801320",
    "end": "807149"
  },
  {
    "text": "So a good question required a\nlot of talking and remembering what's a good hash function,\nwhat's a bad hash function. Thank you. ",
    "start": "807150",
    "end": "821370"
  },
  {
    "text": "OK, let's look at the\ncode a little bit. Everyone looked at it, right? So this time we have modules.",
    "start": "821370",
    "end": "828490"
  },
  {
    "text": "We don't have everything\nin one big file. Can someone tell me what are the\nmodules we care about, and why? ",
    "start": "828490",
    "end": "835580"
  },
  {
    "text": "AUDIENCE: The problem\nwith the one's we have to code ourselves. PROFESSOR: OK, let's\nstart with that.",
    "start": "835580",
    "end": "841340"
  },
  {
    "text": "AUDIENCE: Sub-sequence hashes--\ninterval sub-sequence hashes. PROFESSOR: OK, so these\nare all in DNA seq, right?",
    "start": "841340",
    "end": "848530"
  },
  {
    "text": "So the module is-- so\nyeah, the PSET hopefully",
    "start": "848530",
    "end": "856560"
  },
  {
    "start": "855000",
    "end": "894000"
  },
  {
    "text": "says that you need to upload\nthis file because it's the only file you'll\nneed to modify.",
    "start": "856560",
    "end": "862250"
  },
  {
    "text": "So everything that we\nneed to write is here. Now pretty much everything\nthat's in that file",
    "start": "862250",
    "end": "869130"
  },
  {
    "text": "needs to be modified. So I'm not going\nto list them out. What else do we want\nto read in that PSET?",
    "start": "869130",
    "end": "875526"
  },
  {
    "text": "AUDIENCE: Rolling [INAUDIBLE] PROFESSOR: OK, where\nis rolling hash? AUDIENCE: In the [INAUDIBLE] ",
    "start": "875526",
    "end": "894570"
  },
  {
    "start": "894000",
    "end": "921000"
  },
  {
    "text": "PROFESSOR: So what's different\nbetween the API in rolling hash and the API that we\ntalked about last time?",
    "start": "894570",
    "end": "900230"
  },
  {
    "text": " Yes? AUDIENCE: Them having\nthe [INAUDIBLE] pop,",
    "start": "900230",
    "end": "908732"
  },
  {
    "text": "or it would skip. And that's something else\n[INAUDIBLE] just has a slide, it puts everything\nin one operation.",
    "start": "908732",
    "end": "914588"
  },
  {
    "text": "PROFESSOR: All right, so\nwe have append and skip. ",
    "start": "914588",
    "end": "922079"
  },
  {
    "start": "921000",
    "end": "978000"
  },
  {
    "text": "And we built some\nbeautiful code with that. And we looked at some\nfancy math because of it. But it turns out\nthat for this PSET",
    "start": "922079",
    "end": "928610"
  },
  {
    "text": "we can get away with slide. And we started from slide\nand built these two methods",
    "start": "928610",
    "end": "935270"
  },
  {
    "text": "last time. So I'm not going to\nexplain slide again. It's exactly what\nwe had in the code before we started\nbreaking them up.",
    "start": "935270",
    "end": "943550"
  },
  {
    "text": "OK so this is the rolling hash. It is good. Do we care about anything else?",
    "start": "943550",
    "end": "948810"
  },
  {
    "start": "948810",
    "end": "960099"
  },
  {
    "text": "AUDIENCE: I guess you can\nlook at the rest of the code, if you feel like it. PROFESSOR: You can look\nat the rest of the code",
    "start": "960099",
    "end": "965770"
  },
  {
    "text": "if you feel like it, yep. So I highlighted one file\nthat might be useful, and that's Kfasta.py.",
    "start": "965770",
    "end": "971200"
  },
  {
    "start": "971200",
    "end": "981440"
  },
  {
    "start": "978000",
    "end": "1354000"
  },
  {
    "text": "That file has a\nFASTA sequence class, and that's reads from a\nfile and returns something.",
    "start": "981440",
    "end": "986889"
  },
  {
    "text": "And the important thing is\nit doesn't return a list. If you remember the doc\ndists, doc dist 1 thorugh doc",
    "start": "986890",
    "end": "992199"
  },
  {
    "text": "dist 8 dot PI, fun times. What we had there was\nwe took the input file,",
    "start": "992200",
    "end": "998070"
  },
  {
    "text": "and we read it all a list. This time we're not doing that. We're writing, what, 20\nlines of code instead of what",
    "start": "998070",
    "end": "1005250"
  },
  {
    "text": "could be five lines of\ncode to read the input. Why is that? AUDIENCE: Less memory?",
    "start": "1005250",
    "end": "1011019"
  },
  {
    "text": "PROFESSOR: Less memory, OK. So if we're doing\nit this way, chances are that if we tried to shove\nthe whole input into memory,",
    "start": "1011020",
    "end": "1019140"
  },
  {
    "text": "it wouldn't fit. And it would crash\nand you would get 0 on the test because of that. So that's not good.",
    "start": "1019140",
    "end": "1025109"
  },
  {
    "text": "So what do we use instead? Does anyone know what\nthis thing is called? What this class is called?",
    "start": "1025109",
    "end": "1031509"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: Iterator, very good. ",
    "start": "1031509",
    "end": "1047873"
  },
  {
    "text": "AUDIENCE: Why do\nthey call it FASTA? Because it goes faster?",
    "start": "1047873",
    "end": "1053745"
  },
  {
    "text": "PROFESSOR: I think the\nletters are a bio acronym. AUDIENCE: Oh, OK. PROFESSOR: Does anyone,\ndoes anyone do bio here?",
    "start": "1053745",
    "end": "1062224"
  },
  {
    "text": "I've seen that before. So it's a bio thing. Let's not worry about it. AUDIENCE: OK. ",
    "start": "1062224",
    "end": "1069464"
  },
  {
    "text": "Or, your can use that\nfor any type of file. Like, you don't have to\nuse it just for bio files. PROFESSOR: Well,\npresumably it's reads,",
    "start": "1069464",
    "end": "1076090"
  },
  {
    "text": "it takes advantage of the\nformat that they're stored in, and gives you a list\ninstead of something else.",
    "start": "1076090",
    "end": "1082320"
  },
  {
    "text": "So how does an iterator work? Suppose you're building\nyour own iterator. What do you have to implement?",
    "start": "1082320",
    "end": "1088076"
  },
  {
    "text": "AUDIENCE: Iterator [INAUDIBLE]  PROFESSOR: OK, let's start\nwith next, that's the fun one.",
    "start": "1088076",
    "end": "1095760"
  },
  {
    "text": "What does next do?  AUDIENCE: It's like pop.",
    "start": "1095760",
    "end": "1102529"
  },
  {
    "text": "PROFESSOR: OK, so it's\nlike pop in what way? AUDIENCE: It gives you\nthe next character. PROFESSOR: OK.",
    "start": "1102530",
    "end": "1107763"
  },
  {
    "start": "1107763",
    "end": "1114379"
  },
  {
    "text": "And what happens when you're\nat the end of the list? AUDIENCE: It stops.",
    "start": "1114380",
    "end": "1121455"
  },
  {
    "text": "PROFESSOR: How do you stop? AUDIENCE: It raises\nan exception? ",
    "start": "1121456",
    "end": "1134980"
  },
  {
    "text": "PROFESSOR: So next will\neither return an element, that's the next\nelement in the sequence that you're iterating over.",
    "start": "1134980",
    "end": "1140870"
  },
  {
    "text": "Or it will raise a stop\niteration exception error to stop iteration, cool.",
    "start": "1140870",
    "end": "1147720"
  },
  {
    "text": "So what's the other method? Someone said it\nbefore, say it again.",
    "start": "1147720",
    "end": "1152815"
  },
  {
    "text": "AUDIENCE: Iter. PROFESSOR: Iter. ",
    "start": "1152815",
    "end": "1158409"
  },
  {
    "text": "What does this do\nin an iterator? ",
    "start": "1158410",
    "end": "1164790"
  },
  {
    "text": "AUDIENCE: It returns itself. PROFESSOR: All right, very good. In an iterator this is how you\nwill implement it all the time.",
    "start": "1164790",
    "end": "1171308"
  },
  {
    "text": " Does anyone know what's\nthe point of iter?",
    "start": "1171308",
    "end": "1179325"
  },
  {
    "text": "AUDIENCE: So you can\nreturn an iterator? Because that's what it\ntold us to do in the PSET. PROFESSOR: OK, so iter\nreturns and iterator.",
    "start": "1179325",
    "end": "1187049"
  },
  {
    "text": "But it doesn't-- you don't\nhave to start from an iterator. You can start from any object.",
    "start": "1187050",
    "end": "1193679"
  },
  {
    "text": "And if it has a\nmethod iter, then it should give you an iterator\nthat iterates over that object.",
    "start": "1193680",
    "end": "1199559"
  },
  {
    "text": "So if you have something like\na list-- 1, 2, 3, 4-- then",
    "start": "1199560",
    "end": "1205570"
  },
  {
    "text": "if you call iter on this,\nyou'll get an iterator for it, hopefully, right? And this is what Python\nuses when you say for i in.",
    "start": "1205570",
    "end": "1215930"
  },
  {
    "text": " So behind the scenes, whatever\nobject you give it here,",
    "start": "1215930",
    "end": "1222430"
  },
  {
    "text": "gets an iter call. And then that\nproduces an iterator. And then Python calls next\nuntil stop iteration happens.",
    "start": "1222430",
    "end": "1231059"
  },
  {
    "text": "So you can write\nan iterator that almost behaves like a list. ",
    "start": "1231060",
    "end": "1237150"
  },
  {
    "text": "You can use it in these\n[INAUDIBLE] instructions, and it works as\nif it was a list,",
    "start": "1237150",
    "end": "1242380"
  },
  {
    "text": "except it uses a lot less\nmemory, because it computes the elements. Hopefully every\ntime next is called,",
    "start": "1242380",
    "end": "1249267"
  },
  {
    "text": "you're computing the next\nelement that you're returning. If you're storing everything\nin a list then returning the elements that way, that's\nnot the very smart iterator.",
    "start": "1249267",
    "end": "1256365"
  },
  {
    "text": " OK let's look at the last page.",
    "start": "1256365",
    "end": "1262150"
  },
  {
    "text": " So the last page has\nan iterator on top.",
    "start": "1262150",
    "end": "1268100"
  },
  {
    "text": "And the iterator\ncomputes-- given a list, it computes the\nreverse of that list.",
    "start": "1268100",
    "end": "1273549"
  },
  {
    "text": "And you can see that it\ndoesn't reverse the list and then keep the\nreversed list in memory. Instead, every\ntime you call next,",
    "start": "1273550",
    "end": "1280429"
  },
  {
    "text": "it does some magic\nwith the indexes-- I think the magic\nis called math-- and then it return something\nfor as long as it can.",
    "start": "1280430",
    "end": "1288020"
  },
  {
    "text": "So this is how you\nimplement reverse without producing a new list. If the original list was\norder, say had n elements, then",
    "start": "1288020",
    "end": "1297360"
  },
  {
    "text": "if you'd produce a new list,\nyou'd consume order and memory. This think consumes\norder 1 memory,",
    "start": "1297360",
    "end": "1302439"
  },
  {
    "text": "and the running time is\nthe same, asymptotically.  OK, any question on iterators?",
    "start": "1302439",
    "end": "1308340"
  },
  {
    "text": " AUDIENCE: So it's going\nfrom the very end,",
    "start": "1308340",
    "end": "1317690"
  },
  {
    "text": "oh, to the very beginning,\nand then it's stepping back. PROFESSOR: So\nreverse, if I give it",
    "start": "1317690",
    "end": "1324360"
  },
  {
    "text": "the list 1, 2, 3, 4, I want\nreverse to give it back 4, 3, 2, 1.",
    "start": "1324360",
    "end": "1330826"
  },
  {
    "text": "Except it's not going\nto return a list, it's going to return\nsomething that I can use here. AUDIENCE: Mm hm, ah, OK.",
    "start": "1330826",
    "end": "1338289"
  },
  {
    "text": "PROFESSOR: OK, yes. AUDIENCE: Is it ever\npossible to, sort of, rewind the iterator to\nlike, sort of, reset it?",
    "start": "1338290",
    "end": "1345324"
  },
  {
    "text": "PROFESSOR: OK, is it? AUDIENCE: No. PROFESSOR: Nope.",
    "start": "1345324",
    "end": "1350409"
  },
  {
    "text": "So Python iterators are simple. All you can do is go forward. AUDIENCE: OK. PROFESSOR: The reason\nthat is good is",
    "start": "1350410",
    "end": "1356540"
  },
  {
    "start": "1354000",
    "end": "1479000"
  },
  {
    "text": "because you can use\nthem for streams. So if you get data from a\nfile, or if you can get data from the network, you can\nwrap it in an iterator.",
    "start": "1356540",
    "end": "1364350"
  },
  {
    "text": "If you wanted to support\nresume on data that you get from the network, you'd\nhave to buffer all the data.",
    "start": "1364350",
    "end": "1370544"
  },
  {
    "text": "AUDIENCE: So you\nwould have to call the iter about that again and-- PROFESSOR: Yeah. Yeah, if you want to rewind,\nget another iterator.",
    "start": "1370544",
    "end": "1377700"
  },
  {
    "text": "OK, that's a good\nquestion, thank you. So these are iterators.",
    "start": "1377700",
    "end": "1383280"
  },
  {
    "text": "Now we're going to go over\nsome Python magic, which is called generators. So look at the iterator\ncode, and then look",
    "start": "1383280",
    "end": "1390049"
  },
  {
    "text": "at the equivalent\ncode right below it.  So 12 lines of Python turned\ninto three lines of Python",
    "start": "1390050",
    "end": "1400270"
  },
  {
    "text": "that do exactly the same thing. So the reverse method\nwill return an object",
    "start": "1400270",
    "end": "1407340"
  },
  {
    "text": "that is an iterator, and\nthat you can use just like the iterator in\nthe reverse class.",
    "start": "1407340",
    "end": "1413620"
  },
  {
    "start": "1413620",
    "end": "1420160"
  },
  {
    "text": "Do people understand\nwhat that code does? If you do I'm so out\nof here, we're done.",
    "start": "1420160",
    "end": "1428179"
  },
  {
    "text": "AUDIENCE: What does yield do? PROFESSOR: What does yield do? All right, that's the hard\nquestion, what does yield do?",
    "start": "1428180",
    "end": "1433855"
  },
  {
    "text": "I will probably spend the rest\nof the session on the answer to that question. You're asking all the\nhad questions today, man.",
    "start": "1433855",
    "end": "1441370"
  },
  {
    "text": "So yield, does anyone know\nconceptually what yield does?",
    "start": "1441370",
    "end": "1446820"
  },
  {
    "text": "Not in detail, just\nwhat's it supposed to do so that the rest\nof the code works? Yes. AUDIENCE: If you're\ndriving someplace",
    "start": "1446820",
    "end": "1453180"
  },
  {
    "text": "and there's a yield\nsign, you pause. PROFESSOR: OK, Python yield.",
    "start": "1453180",
    "end": "1458290"
  },
  {
    "text": "So I like the word\npause in there. The word pause is useful. So say, instead of\nimplementing this,",
    "start": "1458290",
    "end": "1466140"
  },
  {
    "text": "say we're implementing\nsub-sequence hashes. ",
    "start": "1466140",
    "end": "1472493"
  },
  {
    "text": "AUDIENCE: It kind of spit\nsomething out, but keeps going. PROFESSOR: Yep.",
    "start": "1472494",
    "end": "1477807"
  },
  {
    "text": "AUDIENCE: Returns [INAUDIBLE] PROFESSOR: OK, so suppose\nyou're implementing sub-sequence hashes. What's the worst, worst possible\nway you could implement this?",
    "start": "1477807",
    "end": "1487678"
  },
  {
    "start": "1479000",
    "end": "1805000"
  },
  {
    "text": "AUDIENCE: Return a list. PROFESSOR: OK, so the worst,\nworst way is to go all the way, brute force, don't use\nthe rolling hashes,",
    "start": "1487678",
    "end": "1492900"
  },
  {
    "text": "don't use anything. The next best way is\nto make a list, right? So you're going to start\nwith an empty list.",
    "start": "1492900",
    "end": "1501029"
  },
  {
    "text": "Then you're going to use the\nrolling hash in some way.",
    "start": "1501030",
    "end": "1509670"
  },
  {
    "text": "And in some loop you're\ngoing to say list.append e.",
    "start": "1509670",
    "end": "1516540"
  },
  {
    "text": "And then you're going\nto return the list. Does this makes sense?",
    "start": "1516540",
    "end": "1523440"
  },
  {
    "text": "OK, what's the problem\nwith this code? AUDIENCE: You're going\nto have a huge list.",
    "start": "1523440",
    "end": "1528570"
  },
  {
    "text": "PROFESSOR: Going to\nhave a huge list. So the way we fix it with\niterators is we remove this,",
    "start": "1528570",
    "end": "1536900"
  },
  {
    "text": "we replace this with yield\ne, and we remove this.",
    "start": "1536900",
    "end": "1546240"
  },
  {
    "text": "And now it's a generator. And now this consumes a\nconstant amount of memory,",
    "start": "1546240",
    "end": "1551520"
  },
  {
    "text": "instead of building a list. And as long as you only want\nan iterator out of this method,",
    "start": "1551520",
    "end": "1558870"
  },
  {
    "text": "you'll get the right thing. Your code will still work\nin exactly the same way. ",
    "start": "1558870",
    "end": "1566730"
  },
  {
    "text": "OK, so the big question is\nwhat does this guy do, right? This is where the magic is.",
    "start": "1566730",
    "end": "1571870"
  },
  {
    "text": "So I already said,\nas a first hint, that this guy will\nreturn an iterator.",
    "start": "1571870",
    "end": "1578919"
  },
  {
    "text": " So can someone try to imagine\ntheir Python, and see this?",
    "start": "1578920",
    "end": "1587690"
  },
  {
    "text": "So suppose it's your\nPython, you see this. What do you do? AUDIENCE: You wait for some sort\nof command of some sort, right?",
    "start": "1587690",
    "end": "1595454"
  },
  {
    "text": "PROFESSOR: No, let's\ntry something else. AUDIENCE: OK. PROFESSOR: So the\nexecution of this pauses.",
    "start": "1595454",
    "end": "1602880"
  },
  {
    "text": "What happens? So we're looping\nsomewhere, we got a yield. We stop, what's the\nfirst thing we do?",
    "start": "1602880",
    "end": "1609261"
  },
  {
    "text": "AUDIENCE: Spit out e. PROFESSOR: So you're saying\nyou return e from this guy?",
    "start": "1609261",
    "end": "1615974"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]\nout e [INAUDIBLE] PROFESSOR: So I want\nto return something--",
    "start": "1615974",
    "end": "1621473"
  },
  {
    "text": "I want to return\nsomething else from this. So I want to use this as\nif it was a list, yes? AUDIENCE: We store e somewhere.",
    "start": "1621473",
    "end": "1628496"
  },
  {
    "text": "PROFESSOR: OK,\nstore e somewhere. AUDIENCE: Do you return\nthe pointer of e? ",
    "start": "1628496",
    "end": "1634330"
  },
  {
    "text": "PROFESSOR: Almost, so\nthere's a word for the object that I'm returning. So I want to use it\nas if it was a list.",
    "start": "1634330",
    "end": "1641350"
  },
  {
    "text": "So I want to pretend that I had\nreturned list in this method, right?",
    "start": "1641350",
    "end": "1647100"
  },
  {
    "text": "So what's the closest thing\nto a list that I can return. AUDIENCE: An iterator. PROFESSOR: An iterator,\nthank you, all right.",
    "start": "1647100",
    "end": "1653919"
  },
  {
    "text": "So we will grab some\ninformation from here. ",
    "start": "1653920",
    "end": "1659756"
  },
  {
    "text": "We'll put it in a nice box. And that box will\nbehave like an iterator.",
    "start": "1659756",
    "end": "1668590"
  },
  {
    "text": "OK, so the first thing,\nsomeone said put e away, so that's when we call next\nwe're going to spit that out.",
    "start": "1668590",
    "end": "1678900"
  },
  {
    "text": "What else do I need to put away? ",
    "start": "1678900",
    "end": "1687304"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: Yep, so\nthis is a lot of magic. This tiny box actually\nhas a lot of magic in it.",
    "start": "1687304",
    "end": "1693830"
  },
  {
    "text": "Because when I call\nnext, I want to get e. But I want to come back\nhere and keep going, right?",
    "start": "1693830",
    "end": "1702309"
  },
  {
    "text": "So I have my code that's\nusing the iterator. And there's this code\nhere, that's sort of",
    "start": "1702310",
    "end": "1708860"
  },
  {
    "text": "in a frozen state. Did you guys see any movies\nwhere people are frozen up and then, in the\nfuture, they're unfrozen",
    "start": "1708860",
    "end": "1714710"
  },
  {
    "text": "and they start moving again? AUDIENCE: [INAUDIBLE] movies. PROFESSOR: All right, cool. So this is like that, this\ntakes up the whole function,",
    "start": "1714710",
    "end": "1722450"
  },
  {
    "text": "freezes it up and\nputs it in a box here. And it returns an iterator that\ncan use the box in the future.",
    "start": "1722450",
    "end": "1730350"
  },
  {
    "text": "So when you call\nnext, it gives e, which is the guy\nthat you put in here. And then it take the\nfunction out of the box,",
    "start": "1730350",
    "end": "1736760"
  },
  {
    "text": "unfreezes it, and\nlets it run again until it hits yield again.",
    "start": "1736760",
    "end": "1742000"
  },
  {
    "text": "Then what happens the\nnext time it hits yield? ",
    "start": "1742000",
    "end": "1748680"
  },
  {
    "text": "So, you're looping, and\nyou're yielding again. And say this time\nyou're yielding.",
    "start": "1748680",
    "end": "1755135"
  },
  {
    "text": "AUDIENCE: Just do\nthe same thing? AUDIENCE: Do you put\nit in that iterator? Or do you make another iterator? PROFESSOR: Same iterator.",
    "start": "1755135",
    "end": "1761039"
  },
  {
    "text": "So while this is\nlooping, the code outside should get the values\nthat it's yielding.",
    "start": "1761040",
    "end": "1766780"
  },
  {
    "text": "So this has to behave\nas one iterator. So the code is\nunfrozen, it's allowed to execute until it\nsays yield again.",
    "start": "1766780",
    "end": "1773840"
  },
  {
    "text": "And then it says yield\nwith a new element. I put this guy in the box. Then I return the old guy as\nthe return value for next.",
    "start": "1773840",
    "end": "1783389"
  },
  {
    "text": "AUDIENCE: Oh. PROFESSOR: And then\nit's frozen again. So this guy's still\nin a frozen state.",
    "start": "1783390",
    "end": "1790049"
  },
  {
    "text": "In the movies, I think\nyou're only unfrozen once. And then you keep going, right? And there's a happy ending. Where here, every\ntime you call yield",
    "start": "1790049",
    "end": "1796000"
  },
  {
    "text": "you're frozen again,\nuntil someone calls next. ",
    "start": "1796000",
    "end": "1802480"
  },
  {
    "text": "Does this make sense? AUDIENCE: It's kind\nof like Groundhog Day. PROFESSOR: Yes, except\nyou're allowed to go forward.",
    "start": "1802480",
    "end": "1809980"
  },
  {
    "text": "So this keeps going forward. AUDIENCE: --up, thought. So it's looping. It's the same day, really.",
    "start": "1809980",
    "end": "1816421"
  },
  {
    "text": "It's doing different\nthings, though. PROFESSOR: Yeah. But all your state is saved. So there, some of the\nstate is rolled back.",
    "start": "1816421",
    "end": "1823330"
  },
  {
    "text": "Here all the state is saved. AUDIENCE: OK. PROFESSOR: OK, but if that\nanalogy helps, keep it.",
    "start": "1823330",
    "end": "1829410"
  },
  {
    "text": "AUDIENCE: When you call\nnext, are you computing e or e prime to be returned? PROFESSOR: So when\nyou're calling next,",
    "start": "1829410",
    "end": "1835520"
  },
  {
    "text": "you're computing e\nprime and returning e. AUDIENCE: So the value you\nget from next is pre-computed?",
    "start": "1835520",
    "end": "1841657"
  },
  {
    "text": "PROFESSOR: So the value\nyou get form next is what you yielded before. AUDIENCE: Wait, so you would\njust take some sequence hashes",
    "start": "1841657",
    "end": "1850210"
  },
  {
    "text": "instance of that, and then\njust by putting in yield, now it's magically\nbecome an iterator",
    "start": "1850210",
    "end": "1855410"
  },
  {
    "text": "and you can call\nthat next on it? PROFESSOR: Yep. And inside, you don't have to\nknow that it's an iterator.",
    "start": "1855410",
    "end": "1860787"
  },
  {
    "text": "So you don't have a\nmethod next here, right? I don't implement\nnext or iter here. I write this as if it's\nprinting stuff to the output.",
    "start": "1860787",
    "end": "1868230"
  },
  {
    "text": "You can think of\nyield is a print. If you wanted an\niterator, then pretend you're printing what you\nwant to iterate over.",
    "start": "1868230",
    "end": "1874740"
  },
  {
    "text": "And instead of saying\nprint you say yield. And then you use that. ",
    "start": "1874740",
    "end": "1880710"
  },
  {
    "text": "OK, now what happens\nwhen we're done? What happens when\nthis loop is done and you return from this method? We said there's no return value.",
    "start": "1880710",
    "end": "1887650"
  },
  {
    "text": "AUDIENCE: It raises a stop? PROFESSOR: So when\nwe return, it's going to keep in-- have to\nremember that it's done, right?",
    "start": "1887650",
    "end": "1895330"
  },
  {
    "text": " And the first time, it\nhas some element here",
    "start": "1895330",
    "end": "1902179"
  },
  {
    "text": "that it has to return. So every time you call yield we\nput a new element in the box,",
    "start": "1902180",
    "end": "1908230"
  },
  {
    "text": "and return the old one. So now we would\nreturn the old one.",
    "start": "1908230",
    "end": "1915620"
  },
  {
    "text": "We've returned e prime, take it\nout, and put done in the box.",
    "start": "1915620",
    "end": "1921730"
  },
  {
    "text": "So in the future, if\nnext is called again, raise stop iteration.",
    "start": "1921730",
    "end": "1931510"
  },
  {
    "text": "No more freezing, unfreezing,\nbecause we're done. We're returned. ",
    "start": "1931510",
    "end": "1938201"
  },
  {
    "text": "AUDIENCE: So if you called next\nit would just give you nothing? PROFESSOR: It has to\nraise this exception.",
    "start": "1938202",
    "end": "1943762"
  },
  {
    "text": "AUDIENCE: So you mean,\nlike-- oh, so it-- oh, I see. It would give you red text then? PROFESSOR: If you\ncalled it directly, yes,",
    "start": "1943762",
    "end": "1950007"
  },
  {
    "text": "it would give you red text. Yes? AUDIENCE: So this takes\na sequence or a list,",
    "start": "1950007",
    "end": "1957603"
  },
  {
    "text": "not another iterator, ever? PROFESSOR: This? What's this?",
    "start": "1957603",
    "end": "1963530"
  },
  {
    "text": "This other code here? AUDIENCE: Yeah. PROFESSOR: Not necessarily. AUDIENCE: Or you could\ngive it a procedure.",
    "start": "1963530",
    "end": "1969410"
  },
  {
    "text": "PROFESSOR: I can\ngive it an iterator if I'm iterating\nover it using for-in. AUDIENCE: Like, for something\nin one iterator, yield",
    "start": "1969410",
    "end": "1975540"
  },
  {
    "text": "that something, and\nthen [INAUDIBLE] AUDIENCE: Oh, OK. PROFESSOR: Yeah,\nthat's a good point.",
    "start": "1975540",
    "end": "1981870"
  },
  {
    "text": "I'll get to that\nlater, when we talk about how we're going\nto solve the PSET. No, we're not solving\nthe PSET for you.",
    "start": "1981870",
    "end": "1987570"
  },
  {
    "text": "But we'll talk about\nit a little bit. But yeah, that's a good point. So there's no\nreason why you can't",
    "start": "1987570",
    "end": "1993210"
  },
  {
    "text": "have an argument here that,\neither a list or an iterator, and then you're\niterating over it. And then you have\nnested generators.",
    "start": "1993210",
    "end": "2000345"
  },
  {
    "text": "So you have generators\nreturned in other generators, and you have a whole\nchain of things happening when you say next.",
    "start": "2000345",
    "end": "2006492"
  },
  {
    "text": "AUDIENCE: Wait, so this\nis a generator then, because it produces-- well\nit is an iterator though?",
    "start": "2006492",
    "end": "2012330"
  },
  {
    "text": "PROFESSOR: So a generator\nreturns an iterator from this method. So a generator acts\nlike an iterator,",
    "start": "2012330",
    "end": "2018960"
  },
  {
    "text": "except when you call next,\nit unfreezes this code here, and it let's it run. AUDIENCE: But I mean, it's\nbasically an iterator then?",
    "start": "2018960",
    "end": "2026045"
  },
  {
    "text": "PROFESSOR: Yeah. AUDIENCE: But we're just\ncalling it a generator because-- PROFESSOR: Because\nthere's a lot more magic. AUDIENCE: OK. PROFESSOR: So an iterator\njust says next and iter.",
    "start": "2026045",
    "end": "2033980"
  },
  {
    "text": "This is all that an\niterator is, nothing more. Any object that has these\ntwo methods is an iterator.",
    "start": "2033980",
    "end": "2039520"
  },
  {
    "text": "AUDIENCE: Oh, OK. PROFESSOR: Now a generator\nis a piece of Python magic",
    "start": "2039520",
    "end": "2047080"
  },
  {
    "text": "that let's you write\nshorter iterators. So three lines, as\nopposed to 13 lines.",
    "start": "2047080",
    "end": "2052580"
  },
  {
    "text": "And we came up\nwith a way to turn in a code that\nwould build a list,",
    "start": "2052580",
    "end": "2058109"
  },
  {
    "text": "and easily turn it into a\ncode that uses a generator, and that uses constant memory\ninstead of building that list.",
    "start": "2058110",
    "end": "2064717"
  },
  {
    "text": "AUDIENCE: OK, now I know\nhow an iterator functions. PROFESSOR: Exactly. ",
    "start": "2064717",
    "end": "2070690"
  },
  {
    "text": "OK, do generators\nmake sense now? Yes. AUDIENCE: If you wanted\nto loop through all",
    "start": "2070690",
    "end": "2076450"
  },
  {
    "text": "of the values in a\ngenerator, do you just wait until the\nexception's raised? Or should you, like, keep\ntrack of how many things",
    "start": "2076450",
    "end": "2082879"
  },
  {
    "text": "are going to be\nin that generator? PROFESSOR: So, when\nyou have a generator, you'd have no idea how\nmany things there are.",
    "start": "2082880",
    "end": "2088777"
  },
  {
    "text": "That's a good point. So you're wondering if I have\nan iterator, say any iterator, not necessarily a generator, how\ndo I know how many things it's",
    "start": "2088777",
    "end": "2096340"
  },
  {
    "text": "going to return, right? Do I have ln? I do not have ln. So an iterator does not have ln.",
    "start": "2096340",
    "end": "2105410"
  },
  {
    "text": "So you have to\niterate through it. And most importantly, some\niterators can never return.",
    "start": "2105410",
    "end": "2114760"
  },
  {
    "start": "2108000",
    "end": "2265000"
  },
  {
    "text": "So you can have an iterator\nthat streams data for you across the network. Or you can have an iterator\nthat iterates over the Fibonacci",
    "start": "2114760",
    "end": "2121550"
  },
  {
    "text": "numbers. That's an infinite\nsequence, right? It's never going to end. So ln would not even\nbe defined then.",
    "start": "2121550",
    "end": "2128700"
  },
  {
    "text": "Good question, I like it. AUDIENCE: Is there an is-next\nmethod for either iterators",
    "start": "2128700",
    "end": "2133897"
  },
  {
    "text": "or generators? PROFESSOR: Nope. This is what you get,\nif there is no in.",
    "start": "2133897",
    "end": "2139497"
  },
  {
    "text": "AUDIENCE: If that\nis mature then-- PROFESSOR: Yeah. So in Java you have\nthis belief that you",
    "start": "2139497",
    "end": "2144990"
  },
  {
    "text": "shouldn't get exceptions. You should be able to\ncheck for them, right? So maybe that's\nwhy you're asking. So if people coming from Java\nknow that any time a method",
    "start": "2144990",
    "end": "2152565"
  },
  {
    "text": "raises an exception,\nthere should be another method that tells\nyou whether this first method is going to raise an\nexception or not.",
    "start": "2152565",
    "end": "2158920"
  },
  {
    "text": "In Python the exception\nis just raised. So exceptions are not\na lot more expensive than regular instructions,\nbecause we're",
    "start": "2158920",
    "end": "2165950"
  },
  {
    "text": "using an interpreted\nlanguage, and it's already reasonably slow. So it can do exceptions\nfor free, yay.",
    "start": "2165950",
    "end": "2172279"
  },
  {
    "text": "So this is how it works. This is how for-in works. Every time you do a for-in,\nan exception is raised. ",
    "start": "2172280",
    "end": "2179517"
  },
  {
    "text": "AUDIENCE: We don't have\nto catch that, then? PROFESSOR: Nope, the\nfor-in catches it for you. AUDIENCE: That's tricky stuff.",
    "start": "2179517",
    "end": "2185710"
  },
  {
    "text": " PROFESSOR: But it's\nnice because then you",
    "start": "2185710",
    "end": "2190819"
  },
  {
    "text": "can build any iterator\nthat acts like a list. And then you can do\neven more fancy stuff, and build a generator.",
    "start": "2190820",
    "end": "2197650"
  },
  {
    "text": "And you're using constant memory\ninstead of order and memory for producing an\norder and size list.",
    "start": "2197650",
    "end": "2205140"
  },
  {
    "text": "Yes? AUDIENCE: So if we get\npassed in an iterator",
    "start": "2205140",
    "end": "2212279"
  },
  {
    "text": "and then just yielded\nwhat we passed in, yielded",
    "start": "2212280",
    "end": "2217696"
  },
  {
    "text": "the iterator, would\nthat just, essentially, delay everything by one?",
    "start": "2217696",
    "end": "2224054"
  },
  {
    "text": "PROFESSOR: So you're yielding\nthe iterator as next, right? AUDIENCE: What? Yeah. PROFESSOR: You want to\nyield the iterator as next. Because if you yield\nthe iterator object,",
    "start": "2224054",
    "end": "2230760"
  },
  {
    "text": "you're going to return\nthat object every time.  So you're thinking\nof something that--",
    "start": "2230760",
    "end": "2236802"
  },
  {
    "text": "AUDIENCE: So you\nneed to increase-- PROFESSOR: You'll\nyield up next, right? AUDIENCE: Right. PROFESSOR: You can have a method\nthat says this is the method.",
    "start": "2236802",
    "end": "2242290"
  },
  {
    "text": "And then you take\nin an iterator. And then you yield it up next. But then you'll, basically,\nget the same thing.",
    "start": "2242290",
    "end": "2248102"
  },
  {
    "text": "AUDIENCE: The same thing. But is it delayed by one or no? PROFESSOR: Nope. No, so you have to\nwork through this",
    "start": "2248102",
    "end": "2255070"
  },
  {
    "text": "to convince yourself\nthat it's not delayed. So if it would be\ndelayed by one, what's the first thing\nthat you're yielding.",
    "start": "2255070",
    "end": "2260330"
  },
  {
    "text": "AUDIENCE: I don't know. PROFESSOR: Yeah, so no delay. AUDIENCE: OK. PROFESSOR: OK, cool.",
    "start": "2260330",
    "end": "2266320"
  },
  {
    "start": "2265000",
    "end": "2989000"
  },
  {
    "text": "So let's see, what do\nwe have to implement in DNA seq, sub-sequence hashes.",
    "start": "2266320",
    "end": "2272280"
  },
  {
    "text": "Do people have an idea of\nhow to implement that now? ",
    "start": "2272280",
    "end": "2278530"
  },
  {
    "text": "Yes? Does it make sense for everyone? So you build it as if\nyou were building a list,",
    "start": "2278530",
    "end": "2284230"
  },
  {
    "text": "and then you use\nyield to make it fast. And by fast I mean less memory.",
    "start": "2284230",
    "end": "2289400"
  },
  {
    "text": "OK, how about interval\nsub-sequence hashes? ",
    "start": "2289400",
    "end": "2295579"
  },
  {
    "text": "The one below. AUDIENCE: Is that just\nlike rolling hash, except you, like, have\na step in your range?",
    "start": "2295580",
    "end": "2302826"
  },
  {
    "text": "PROFESSOR: OK, so it's like\nhaving a step in your range. So how can you do that? What's one way of doing it?",
    "start": "2302826",
    "end": "2308600"
  },
  {
    "start": "2308600",
    "end": "2314012"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] hashes?  PROFESSOR: Did anyone\nsolve the PSET yet?",
    "start": "2314012",
    "end": "2321160"
  },
  {
    "text": "Yes, OK how did you guys do it? Wait, no.",
    "start": "2321160",
    "end": "2326180"
  },
  {
    "text": "That's a bad question because\nyou guys can answer too much. So interval sub-sequence hashes\nversus sub-sequence hashes.",
    "start": "2326180",
    "end": "2334200"
  },
  {
    "text": "Did you copy paste the code? AUDIENCE: Absolutely. PROFESSOR: OK, so one\nway of doing it is copy",
    "start": "2334200",
    "end": "2340205"
  },
  {
    "text": "and pasting the code. The problem if you copy\npaste the code is then you're not DRY. There's this engineering\nthing-- DRY means do not",
    "start": "2340205",
    "end": "2349360"
  },
  {
    "text": "repeat yourself. So if you're not DRY,\nif you copy paste, then suppose you\nfind the bug later. Suppose you run the big test\nand it crashes somewhere.",
    "start": "2349360",
    "end": "2356530"
  },
  {
    "text": "And you fix a bug in\nsub-sequence hashes. AUDIENCE: Oh, we're\nsupposed to, like, call sub-sequence hashes from\ninterval sub-sequence hashes,",
    "start": "2356530",
    "end": "2364175"
  },
  {
    "text": "right? PROFESSOR: That's another\nway of doing it that is DRY. So this way you're not\ncopy pasting the code.",
    "start": "2364175",
    "end": "2369530"
  },
  {
    "text": "AUDIENCE: We're\ninlining the code. PROFESSOR: You're inlining\nit manually, right?",
    "start": "2369530",
    "end": "2374560"
  },
  {
    "text": "All right. So the problem, if you\ndo this on a large scale, like when you go\nwork somewhere, is",
    "start": "2374560",
    "end": "2380130"
  },
  {
    "text": "that you end up with 20\ncopies of the same code. And then five of them have\nbug fixes and the other 15",
    "start": "2380130",
    "end": "2386970"
  },
  {
    "text": "don't, because people\nforgot where they are. So ideally, try to\nkeep your code DRY.",
    "start": "2386970",
    "end": "2392760"
  },
  {
    "start": "2392760",
    "end": "2400086"
  },
  {
    "text": "AUDIENCE: So, basically,\na list of tuples, right? PROFESSOR: OK, so\na list of tuples. ",
    "start": "2400086",
    "end": "2408270"
  },
  {
    "text": "What does a tuple have? AUDIENCE: The index at which\nthe sub-sequence operates?",
    "start": "2408270",
    "end": "2416940"
  },
  {
    "text": "PROFESSOR: So two\nindexes, right? The index in the first\nsub-sequence, say--",
    "start": "2416940",
    "end": "2422780"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: OK, say i1 and then\nthe index in a second sequence,",
    "start": "2422780",
    "end": "2431110"
  },
  {
    "text": "for the same\nsub-sequence, r right? And then i1, i2 prime, i1, i2\nsecond, so on and so forth.",
    "start": "2431110",
    "end": "2440686"
  },
  {
    "text": "So you have the\nsame sub-sequence in the first sequence matches\nmore things in the second one. This is how you're\nsupposed to return them.",
    "start": "2440686",
    "end": "2448594"
  },
  {
    "text": "AUDIENCE: Does the order matter? PROFESSOR: I hope not. ",
    "start": "2448594",
    "end": "2456630"
  },
  {
    "text": "OK, any questions on this? We went through generators fast. You guys are smart.",
    "start": "2456630",
    "end": "2462580"
  },
  {
    "text": "Yes? AUDIENCE: Can you explain\nhow the imaging works? Like, how they create the\n[INAUDIBLE] on tuples.",
    "start": "2462580",
    "end": "2468840"
  },
  {
    "text": "PROFESSOR: No. [LAUGHTER] PROFESSOR: Sorry, I do not know.",
    "start": "2468840",
    "end": "2475280"
  },
  {
    "text": "AUDIENCE: Wait, which part? AUDIENCE: So we\nyield the tuples.",
    "start": "2475280",
    "end": "2480415"
  },
  {
    "text": "But I don't really get how they\ncome up with the image from it. AUDIENCE: From the tuples? Oh, I mean, I guess\nthey're probably values.",
    "start": "2480415",
    "end": "2489011"
  },
  {
    "text": "AUDIENCE: Yeah,\nbecause I thought if you compared two strings of\nDNA that had the exact same,",
    "start": "2489011",
    "end": "2496720"
  },
  {
    "text": "I thought it would be\nlike a diagonal line down, not just a small black box.",
    "start": "2496720",
    "end": "2502980"
  },
  {
    "text": "PROFESSOR: OK. AUDIENCE: So I don't\nthink I'm understanding how they, like, image it.",
    "start": "2502980",
    "end": "2509980"
  },
  {
    "text": "PROFESSOR: So you're\nsupposed to get--",
    "start": "2509980",
    "end": "2516590"
  },
  {
    "text": "your image has some\nthings here, and a match is going to give you a\nbig diagonal line that's",
    "start": "2516590",
    "end": "2523480"
  },
  {
    "text": "stronger than\neverything else, right? AUDIENCE: It's\nreally fanned out. PROFESSOR: Well I\ndon't have thin chalk.",
    "start": "2523480",
    "end": "2529676"
  },
  {
    "text": "AUDIENCE: No, no, there's like\none really dark black box, that's like really black.",
    "start": "2529676",
    "end": "2535310"
  },
  {
    "text": "So I thought that meant that\nall the tuples are there, and everything else\nis just kind of gray. ",
    "start": "2535310",
    "end": "2544430"
  },
  {
    "text": "PROFESSOR: Good question. I will have to\nthink about that-- AUDIENCE: --supposed\nto be there. Is it like a\nnotation thing, or--",
    "start": "2544430",
    "end": "2550664"
  },
  {
    "text": "PROFESSOR: I think that black\nbox is supposed to be there. Did anyone try comparing\ntwo things that shouldn't match, like\nthe dog and the monkey?",
    "start": "2550664",
    "end": "2557680"
  },
  {
    "text": "AUDIENCE: Yeah. And the entire\nthing was like dark. PROFESSOR: Yeah. AUDIENCE: --against, like,\ntwo same DNAs everything",
    "start": "2557680",
    "end": "2566190"
  },
  {
    "text": "was very light. And there was like a very,\nvery light gray line. But I thought that\nwould be like black.",
    "start": "2566190",
    "end": "2573890"
  },
  {
    "text": "PROFESSOR: So I think\nhow black it is means relative to all the\nsub-sequences, how long it is--",
    "start": "2573890",
    "end": "2580133"
  },
  {
    "text": "how long the sub-sequence\nyou're recording is. ",
    "start": "2580134",
    "end": "2585290"
  },
  {
    "text": "Either that or how many. There is a function\nsomewhere in there that computes the intensity\nof a pixel, that's",
    "start": "2585290",
    "end": "2591180"
  },
  {
    "text": "square root of order\n4 of something. ",
    "start": "2591180",
    "end": "2597420"
  },
  {
    "text": "OK, and I can look at\nthat now and tell you. AUDIENCE: It's OK.",
    "start": "2597420",
    "end": "2602704"
  },
  {
    "text": "It's not super important. PROFESSOR: Or we can talk about\namortized analysis for a bit.",
    "start": "2602704",
    "end": "2608390"
  },
  {
    "text": "Yay! Let's talk about\namortized analysis. So this is what you're supposed\nto get, that's what matters.",
    "start": "2608390",
    "end": "2615660"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ",
    "start": "2615660",
    "end": "2638619"
  },
  {
    "text": "PROFESSOR: OK, so\namortized analysis, what's the example that\nwe talked about in class? ",
    "start": "2638619",
    "end": "2645380"
  },
  {
    "text": "AUDIENCE: It's like\nlist expansion? PROFESSOR: OK, so you\nhave-- you have a list.",
    "start": "2645380",
    "end": "2653500"
  },
  {
    "text": "And we know that the list is\nstored as an array, right? ",
    "start": "2653500",
    "end": "2659530"
  },
  {
    "text": "So this means that you can\ndo indexing in constant time.",
    "start": "2659530",
    "end": "2664740"
  },
  {
    "text": "So if you want to get the\nfirst element, order 1. If you want to get the\nmillionth element, order 1.",
    "start": "2664740",
    "end": "2670680"
  },
  {
    "text": "This is not true if you\nhad a link list instead. The millionth element\nwould be order a million.",
    "start": "2670680",
    "end": "2677380"
  },
  {
    "text": "So this is an array. What do we implement? What's the operation that\nwe implement on this list?",
    "start": "2677380",
    "end": "2683530"
  },
  {
    "text": " AUDIENCE: Insert-- PROFESSOR: Insert, append, push.",
    "start": "2683530",
    "end": "2689635"
  },
  {
    "text": "Let's go for append, because\nthat's what Python calls it. OK, so append puts an element\nat the end of the list, right?",
    "start": "2689635",
    "end": "2699060"
  },
  {
    "text": "So how does append work?  AUDIENCE: The array is not full.",
    "start": "2699060",
    "end": "2705356"
  },
  {
    "text": "PROFESSOR: OK. So say I have some\ncount variable here.",
    "start": "2705356",
    "end": "2711040"
  },
  {
    "text": "So if the length of the\narray is bigger than count",
    "start": "2711040",
    "end": "2723060"
  },
  {
    "text": "then what do I do? AUDIENCE: Then we\ncan directly insert. ",
    "start": "2723060",
    "end": "2730760"
  },
  {
    "text": "And because we're\nlooking up in an array and we're doing constant time. PROFESSOR: OK.",
    "start": "2730760",
    "end": "2737472"
  },
  {
    "text": "AUDIENCE: And so an order\namount of information in x [INAUDIBLE]? PROFESSOR: Sorry?",
    "start": "2737472",
    "end": "2742980"
  },
  {
    "text": "AUDIENCE: Order amount of\ninformation of x [INAUDIBLE]? Or do we just-- PROFESSOR: Let's say\nthis is our reference, so it's constant time.",
    "start": "2742980",
    "end": "2748347"
  },
  {
    "text": " AUDIENCE: Otherwise we don't\nhave enough room in our array.",
    "start": "2748347",
    "end": "2754420"
  },
  {
    "text": "So we need to make it bigger. PROFESSOR: OK.  So we have array 2\nbecomes new array",
    "start": "2754420",
    "end": "2766030"
  },
  {
    "text": "of size 2 times count, right?",
    "start": "2766030",
    "end": "2774810"
  },
  {
    "text": "Copy everything from-- AUDIENCE: --length of the array. I guess they're the same. PROFESSOR: I hope\nthey're the same.",
    "start": "2774810",
    "end": "2780420"
  },
  {
    "text": "AUDIENCE: It is. PROFESSOR: Yeah, I'd say that. So copy from array to--\nlet's do this-- to array 2.",
    "start": "2780420",
    "end": "2795420"
  },
  {
    "text": "And then array 2 becomes array. ",
    "start": "2795420",
    "end": "2804509"
  },
  {
    "text": "And then this code\nhere goes here, right? So there's a better way\nto write this if statement",
    "start": "2804510",
    "end": "2809540"
  },
  {
    "text": "so the code isn't duplicated. OK, so if the length is bigger\nthan how many elements I have,",
    "start": "2809540",
    "end": "2817180"
  },
  {
    "text": "if I still have room in\nthe array, what's the cost? What's the running time?",
    "start": "2817180",
    "end": "2822359"
  },
  {
    "text": "Constant. Oh, let's put it on the left. ",
    "start": "2822360",
    "end": "2829990"
  },
  {
    "text": "OK, if I have to resize\nthe array, what's the cost? AUDIENCE: [INAUDIBLE] ",
    "start": "2829990",
    "end": "2838760"
  },
  {
    "text": "PROFESSOR: So, if I did an\noperations, what then, right? N is the size of the array.",
    "start": "2838760",
    "end": "2843980"
  },
  {
    "text": "If the only operation\nI have is append, then I can say n\noperations will cause the array of grow to size n.",
    "start": "2843980",
    "end": "2851120"
  },
  {
    "text": "So n where n is the\nnumber of operations.",
    "start": "2851120",
    "end": "2856860"
  },
  {
    "text": "AUDIENCE: You mean,\nlike, re-adding to the-- ",
    "start": "2856860",
    "end": "2862670"
  },
  {
    "text": "PROFESSOR: So an operation is\na data structure operation, like a query or an update.",
    "start": "2862670",
    "end": "2869930"
  },
  {
    "text": "This is my update\nand this is my query. ",
    "start": "2869930",
    "end": "2877210"
  },
  {
    "text": "AUDIENCE: Wait, but like,\nit's order n though, because--",
    "start": "2877210",
    "end": "2882220"
  },
  {
    "text": "PROFESSOR: Yeah. AUDIENCE: I know, it's order n. But because we\nhave like an array, and then you have\nto make a new one,",
    "start": "2882220",
    "end": "2888010"
  },
  {
    "text": "and you have to move all\nthose old items over, right? PROFESSOR: Yep. AUDIENCE: OK. But, I mean, sometimes\nlike, if your actual array,",
    "start": "2888010",
    "end": "2897744"
  },
  {
    "text": "if you expand it before--\nlike, let's say you notice you're getting full and you\ndecide to like make it bigger",
    "start": "2897745",
    "end": "2903566"
  },
  {
    "text": "at that point, is\nit still order n, as in the number of\nelements that are--",
    "start": "2903566",
    "end": "2908994"
  },
  {
    "text": "PROFESSOR: It depends\non how you decide. There's a problem on the PSET\nthat asks you about that. So, depends on when\nyou make the decision",
    "start": "2908994",
    "end": "2916210"
  },
  {
    "text": "and how you make the decision,\nthe answer is either yes, you're still\nconstant time, or no. So if you understand the\namortized analysis then",
    "start": "2916210",
    "end": "2923359"
  },
  {
    "text": "you can argue of whether\nit still holds or not. If this breaks\ndown at any point, not going to be constant time.",
    "start": "2923360",
    "end": "2928790"
  },
  {
    "text": "Yes? AUDIENCE: So the only cost\nis really copying everything from the old array\nto the new array? PROFESSOR: Yes. AUDIENCE: Actually\nallocating that space is--",
    "start": "2928790",
    "end": "2935329"
  },
  {
    "text": "PROFESSOR: We assume\nthat allocating the space is constant time. Good question, because you can't\ntake that for granted, right?",
    "start": "2935330",
    "end": "2940740"
  },
  {
    "text": "So we assume that this is\norder 1, copying is order n. And then the insertion is\norder 1, just like before.",
    "start": "2940740",
    "end": "2948970"
  },
  {
    "text": "So allocating may\nnot be constant. In real life,\nallocating is actually",
    "start": "2948970",
    "end": "2954050"
  },
  {
    "text": "logarithmic either of the\nsize that you're asking for or logarithmic of how many\nbuffers you've allocated.",
    "start": "2954050",
    "end": "2960670"
  },
  {
    "text": "And you can make a\nconstant time allocator. But that's lower than a\nlogarithmic allocator,",
    "start": "2960670",
    "end": "2966990"
  },
  {
    "text": "because the constant\nfactor behind it is so big. But even if this\nallocation would be order n, which\nwould be terrible,",
    "start": "2966990",
    "end": "2975040"
  },
  {
    "text": "it would still\nget absorbed here. So the overall model works no\nmatter what the allocation is.",
    "start": "2975040",
    "end": "2980550"
  },
  {
    "text": "It's reasonable, from a\ntheoretical standpoint, to say that\nallocation is order 1,",
    "start": "2980550",
    "end": "2987210"
  },
  {
    "text": "from a theoretical standpoint. So this is the real cost\ncopying the elements.",
    "start": "2987210",
    "end": "2993950"
  },
  {
    "text": "And this makes an append\norder n worst case. So if you look at this\ndata structure then",
    "start": "2993950",
    "end": "3001180"
  },
  {
    "text": "suppose we want to compute\nthe cost of an append. So say we have code\nlike this, 4, 1, 2, n.",
    "start": "3001180",
    "end": "3012040"
  },
  {
    "text": "First we have L\nbe an empty list.",
    "start": "3012040",
    "end": "3017630"
  },
  {
    "text": "Then we want to compute\nthe cost of this.",
    "start": "3017630",
    "end": "3024839"
  },
  {
    "text": " So if we do it without\namortized analysis,",
    "start": "3024840",
    "end": "3032570"
  },
  {
    "text": "line by line\nanalysis, just like we learned in the first lecture,\nwhat's the cost of this,",
    "start": "3032570",
    "end": "3038380"
  },
  {
    "text": "making a new list constant? ",
    "start": "3038380",
    "end": "3043960"
  },
  {
    "text": "What's the cost of one append?  AUDIENCE: Constant.",
    "start": "3043960",
    "end": "3049868"
  },
  {
    "text": "PROFESSOR: One append. So an append can either\nbranch here or branch here.",
    "start": "3049868",
    "end": "3055730"
  },
  {
    "text": " So what's the cost\nof one append?",
    "start": "3055730",
    "end": "3061975"
  },
  {
    "text": "AUDIENCE: It would be\nshowing with an empty list? AUDIENCE: Depends. PROFESSOR: It depends. So worst case.",
    "start": "3061975",
    "end": "3067547"
  },
  {
    "text": "We have to look at a worst case. So this is line\nby line analysis. We're going to get\none number for this.",
    "start": "3067547",
    "end": "3073836"
  },
  {
    "text": "AUDIENCE: N. AUDIENCE: An n. PROFESSOR: Yep. ",
    "start": "3073836",
    "end": "3079520"
  },
  {
    "text": "So in the worst case,\nthe list will be full. And you'll have\nto make a new one. And then you're going on\nthis branch of the if,",
    "start": "3079520",
    "end": "3085440"
  },
  {
    "text": "so the cost is order n. So order n, worst case.",
    "start": "3085440",
    "end": "3094119"
  },
  {
    "text": "So the cost of one call\nis order n, worst case. How many calls do we make? ",
    "start": "3094120",
    "end": "3103970"
  },
  {
    "text": "So what is the total\ncost of this thing? AUDIENCE: It's not\nactually n squared. PROFESSOR: Yes, it's\nnot actually n squared.",
    "start": "3103970",
    "end": "3110426"
  },
  {
    "text": "But if we do line\nby line analysis, before we learn\namortized analysis, all we can say it's\norder of n squared.",
    "start": "3110426",
    "end": "3116830"
  },
  {
    "text": "And this is correct, it's not\nbigger than n squared, right? So O is correct. But it's not the tight bound.",
    "start": "3116830",
    "end": "3123020"
  },
  {
    "text": "So if we had a multiple\nchoice, and you selected this, you wouldn't get the score\nbecause we usually ask you",
    "start": "3123020",
    "end": "3128090"
  },
  {
    "text": "what the tightest\nbound that you can get. OK, so line by line analysis. We worked through that\na lot in doc dist.",
    "start": "3128090",
    "end": "3134880"
  },
  {
    "text": "Doesn't work all the time. When it doesn't\nwork, we tell you to use amortized\nanalysis instead. So what's the goal of\namortized analysis?",
    "start": "3134880",
    "end": "3141850"
  },
  {
    "text": "What do we want? You guys are yelling at me that\nthis is not n squared, why? I mean not why, what?",
    "start": "3141850",
    "end": "3147385"
  },
  {
    "text": "What is it instead? What do we want from\namortized analysis? AUDIENCE: [INAUDIBLE]",
    "start": "3147385",
    "end": "3152932"
  },
  {
    "text": "AUDIENCE: It's a\n[INAUDIBLE] that's an n. PROFESSOR: So we want\namortized analysis",
    "start": "3152932",
    "end": "3158809"
  },
  {
    "text": "to say that this is order\n1 amortized, and this is-- [ALARM SOUNDING]",
    "start": "3158810",
    "end": "3164816"
  },
  {
    "text": "PROFESSOR: Am I out of time? Yeah.  OK, so there's a difference\nbetween the worst",
    "start": "3164816",
    "end": "3173937"
  },
  {
    "text": "case and amortized, right? We can argue that this\nis order 1 amortized.",
    "start": "3173937",
    "end": "3183210"
  },
  {
    "text": "And if this is\norder 1 amortized, then this is order n amortized.",
    "start": "3183210",
    "end": "3189020"
  },
  {
    "text": "So does the difference between\nworst case and amortized make sense now? ",
    "start": "3189020",
    "end": "3195650"
  },
  {
    "text": "So this is what I want,\nthe rest is fancy math. If you forget the\nfancy math after you're done with this class, that's OK.",
    "start": "3195650",
    "end": "3201640"
  },
  {
    "text": "If you remember that this\nis order 1 amortized, and that's order n\namortized, that's good. That's all you need\nto know to write code",
    "start": "3201640",
    "end": "3208070"
  },
  {
    "text": "if you don't design algorithms. So this is an important piece\nof knowledge on its own.",
    "start": "3208070",
    "end": "3214307"
  },
  {
    "text": "OK, so questions about the\ndifference between worst case and amortized? ",
    "start": "3214307",
    "end": "3220280"
  },
  {
    "text": "OK, what does amortized mean?  AUDIENCE: Average.",
    "start": "3220280",
    "end": "3226309"
  },
  {
    "text": "PROFESSOR: Yep, averaged out\nover multiple operations. So instead of doing\nline by line analysis, we have to look at what happens\nover multiple operations,",
    "start": "3226310",
    "end": "3234470"
  },
  {
    "text": "right? So there are two methods that\nI think are useful in CLRS.",
    "start": "3234470",
    "end": "3240580"
  },
  {
    "text": "There are three in\ntotal, but the last one is horribly complicated. So there's something\ncalled aggregate analysis.",
    "start": "3240580",
    "end": "3245960"
  },
  {
    "start": "3245960",
    "end": "3251130"
  },
  {
    "text": "And there's something called\nthe cost based accounting. ",
    "start": "3251130",
    "end": "3259160"
  },
  {
    "text": "So last time when we looked\nat the costs for append, we argued that, hey, it's\norder 1 for a lot of times.",
    "start": "3259160",
    "end": "3270150"
  },
  {
    "text": "And then it's only\norder n for an operation that's a power of 2.",
    "start": "3270150",
    "end": "3277089"
  },
  {
    "text": "So if we're looking\nat the K-ith append,",
    "start": "3277090",
    "end": "3283690"
  },
  {
    "text": "then this is order K\nfor K equals 2 to the i.",
    "start": "3283690",
    "end": "3290290"
  },
  {
    "text": "And it's order 1 otherwise. ",
    "start": "3290290",
    "end": "3298880"
  },
  {
    "text": "Right? So if we sum up\nall these costs, we",
    "start": "3298880",
    "end": "3304109"
  },
  {
    "text": "get-- plus sum over log\nn of O of 2 to the i.",
    "start": "3304110",
    "end": "3320400"
  },
  {
    "text": "And this is clearly order n. ",
    "start": "3320400",
    "end": "3325430"
  },
  {
    "text": "And if you do the math\nhere, this is also order n. ",
    "start": "3325430",
    "end": "3333000"
  },
  {
    "text": "So this is aggregate analysis. This is what we\ntaught you in lecture. ",
    "start": "3333000",
    "end": "3340800"
  },
  {
    "text": "Does this make sense? So the key here is that whenever\nwe are increasing the array,",
    "start": "3340800",
    "end": "3348680"
  },
  {
    "text": "we're increasing it to 2 times. And we start with a\nsize of 1, count is 1.",
    "start": "3348680",
    "end": "3355450"
  },
  {
    "text": "We start with an\narray with 1 element. So the size of the\narray will first be 1, then 2, then 4, then\n8, then 16, 32, 64, 128,",
    "start": "3355450",
    "end": "3366716"
  },
  {
    "text": "so on so forth. It increases exponentially. So on the first append\nI'll have to do a resize.",
    "start": "3366716",
    "end": "3371880"
  },
  {
    "text": "On the second one, resize. Fourth one, resize. Eighth, resize, so\non and so forth.",
    "start": "3371880",
    "end": "3377529"
  },
  {
    "text": "So if I'm adding up the\ncost for n operations, each operation is\norder 1 because I'm",
    "start": "3377530",
    "end": "3383830"
  },
  {
    "text": "inserting everywhere. And then all these\noperations are all order n.",
    "start": "3383830",
    "end": "3390020"
  },
  {
    "text": "But there's few of them. They're few and far out. So if you write the sum this\nway, and you do the math,",
    "start": "3390020",
    "end": "3395110"
  },
  {
    "text": "you get that it's order n. So aggregate analysis\nsays, look at n operations and add the costs up together.",
    "start": "3395110",
    "end": "3402220"
  },
  {
    "text": "And last time we had that good\nexample of walking over a tree, and in order traversal where\nwe drew arrows across edges.",
    "start": "3402220",
    "end": "3408310"
  },
  {
    "text": "So that's aggregate analysis. And then you should look\nat the cost method in CLRS because that's also\nuseful sometimes.",
    "start": "3408310",
    "end": "3416030"
  },
  {
    "text": "Does this help? Any questions? No, everyone wants to go home. AUDIENCE: Wait--",
    "start": "3416030",
    "end": "3421680"
  },
  {
    "text": "PROFESSOR: Almost. AUDIENCE: For log n, so you're\nstarting from log n going to-- PROFESSOR: So I'm starting\nfrom 1 going to log n.",
    "start": "3421680",
    "end": "3429174"
  },
  {
    "text": "AUDIENCE: Oh, oh, so [INAUDIBLE]\nafter you're buffering. PROFESSOR: So this is\nfancy math for saying only",
    "start": "3429174",
    "end": "3435750"
  },
  {
    "text": "add up powers of two. So that's what I'm trying\nto say, add these guys up. AUDIENCE: Well that's\nyour step [INAUDIBLE].",
    "start": "3435750",
    "end": "3442000"
  },
  {
    "text": "PROFESSOR: Yeah. AUDIENCE: Oh, OK. Oh, I like that. OK. PROFESSOR: OK. ",
    "start": "3442000",
    "end": "3447210"
  }
]