[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "Another service provided by operating system\nis dealing properly with the attempt to execute",
    "start": "570",
    "end": "5880"
  },
  {
    "text": "instructions with \"illegal\" opcodes.",
    "start": "5880",
    "end": "9420"
  },
  {
    "text": "Illegal is quotes because that just means\nopcodes whose operations aren't implemented",
    "start": "9420",
    "end": "13740"
  },
  {
    "text": "directly by the hardware.",
    "start": "13740",
    "end": "15089"
  },
  {
    "text": "As we'll see, it's possible extend the functionality\nof the hardware via software emulation.",
    "start": "15089",
    "end": "22390"
  },
  {
    "text": "The action of the CPU upon encountering an\nillegal instruction (sometimes referred to",
    "start": "22390",
    "end": "26789"
  },
  {
    "text": "as an unimplemented user operation or UUO)\nis very similar to how it processes interrupts.",
    "start": "26789",
    "end": "34590"
  },
  {
    "text": "Think of illegal instructions as an interrupt\ncaused directly by the CPU!",
    "start": "34590",
    "end": "39370"
  },
  {
    "text": "As for interrupts, the execution of the current\ninstruction is suspended and the control signals",
    "start": "39370",
    "end": "45270"
  },
  {
    "text": "are set to values to capture PC+4 in the XP\nregister and set the PC to, in this case,",
    "start": "45270",
    "end": "53289"
  },
  {
    "text": "0x80000004.",
    "start": "53289",
    "end": "55500"
  },
  {
    "text": "Note that bit 31 of the new PC, aka the supervisor\nbit, is set to 1, meaning that the OS handler",
    "start": "55500",
    "end": "62470"
  },
  {
    "text": "will have access to the kernel-mode context.",
    "start": "62470",
    "end": "66200"
  },
  {
    "start": "66000",
    "end": "66000"
  },
  {
    "text": "Here's some code similar to that found in\nthe Tiny Operating System (TinyOS), which",
    "start": "66200",
    "end": "69630"
  },
  {
    "text": "you'll be experimenting with in the final\nlab assignment.",
    "start": "69630",
    "end": "72240"
  },
  {
    "text": "Let's do a quick walk-through of the code\nexecuted when an illegal instruction is executed.",
    "start": "72240",
    "end": "77828"
  },
  {
    "text": "Starting at location 0, we see the branches\nto the handlers for the various interrupts",
    "start": "77829",
    "end": "81720"
  },
  {
    "text": "and exceptions.",
    "start": "81720",
    "end": "82799"
  },
  {
    "text": "In the case of an illegal instruction, the\nBR(I_IllOp) in location 4 will be executed.",
    "start": "82799",
    "end": "91340"
  },
  {
    "text": "Immediately following is where the OS data\nstructures are allocated.",
    "start": "91340",
    "end": "95429"
  },
  {
    "text": "This includes space for the OS stack, UserMState\nwhere user-mode register values are stored",
    "start": "95430",
    "end": "100979"
  },
  {
    "text": "during interrupts, and the process table,\nproviding long-term storage for the complete",
    "start": "100979",
    "end": "106479"
  },
  {
    "text": "state of each process while another process\nis executing.",
    "start": "106480",
    "end": "111159"
  },
  {
    "start": "111000",
    "end": "111000"
  },
  {
    "text": "When writing in assembly language, it's convenient\nto define macros for operations that are used",
    "start": "111159",
    "end": "115968"
  },
  {
    "text": "repeatedly.",
    "start": "115969",
    "end": "117590"
  },
  {
    "text": "We can use a macro call whenever we want to\nperform the action and the assembler will",
    "start": "117590",
    "end": "122500"
  },
  {
    "text": "insert the body of the macro in place of the\nmacro call, performing a lexical substitution",
    "start": "122500",
    "end": "127700"
  },
  {
    "text": "of the macro's arguments.",
    "start": "127700",
    "end": "130479"
  },
  {
    "text": "Here's a macro for a two-instruction sequence\nthat extracts a particular field of bits from",
    "start": "130480",
    "end": "134980"
  },
  {
    "text": "a 32-bit value.",
    "start": "134980",
    "end": "136750"
  },
  {
    "text": "M is the bit number of the left-most bit,\nN is the bit number of the right-most bit.",
    "start": "136750",
    "end": "142590"
  },
  {
    "text": "Bits are numbered 0 through 31, where bit\n31 is the most-significant bit, i.e., the",
    "start": "142590",
    "end": "148290"
  },
  {
    "text": "one at the left end of the 32-bit binary value.",
    "start": "148290",
    "end": "153110"
  },
  {
    "text": "And here are some macros that expand into\ninstruction sequences that save and restore",
    "start": "153110",
    "end": "157750"
  },
  {
    "text": "the CPU registers to or from the UserMState\ntemporary storage area.",
    "start": "157750",
    "end": "163800"
  },
  {
    "text": "With those macros in hand, let's see how illegal\nopcodes are handled.",
    "start": "163800",
    "end": "168560"
  },
  {
    "text": "Like all interrupt handlers, the first action\nis to save the user-mode registers in the",
    "start": "168560",
    "end": "173110"
  },
  {
    "start": "169000",
    "end": "169000"
  },
  {
    "text": "temporary storage area and initialize the\nOS stack.",
    "start": "173110",
    "end": "177530"
  },
  {
    "text": "Next, we fetch the illegal instruction from\nthe user-mode program.",
    "start": "177530",
    "end": "182260"
  },
  {
    "text": "Note that the saved PC+4 value is a virtual\naddress in the context of the interrupted",
    "start": "182260",
    "end": "187709"
  },
  {
    "text": "program.",
    "start": "187710",
    "end": "188950"
  },
  {
    "text": "So we'll need to use the MMU routines to compute\nthe correct physical address - more about",
    "start": "188950",
    "end": "194090"
  },
  {
    "text": "this on the next slide.",
    "start": "194090",
    "end": "196910"
  },
  {
    "text": "Then we'll use the opcode of the illegal instruction\nas an index into a table of subroutine addresses,",
    "start": "196910",
    "end": "203380"
  },
  {
    "text": "one for each of the 64 possible opcodes.",
    "start": "203380",
    "end": "207950"
  },
  {
    "text": "Once we have the address of the handler for\nthis particular illegal opcode, we JMP there",
    "start": "207950",
    "end": "213061"
  },
  {
    "text": "to deal with the situation.",
    "start": "213061",
    "end": "216230"
  },
  {
    "text": "Selecting a destination from a table of addresses\nis called \"dispatching\" and the table is called",
    "start": "216230",
    "end": "221730"
  },
  {
    "text": "the \"dispatch table\".",
    "start": "221730",
    "end": "224019"
  },
  {
    "text": "If the dispatch table contains many different\nentries, dispatching is much more efficient",
    "start": "224020",
    "end": "228800"
  },
  {
    "text": "in time and space than a long series of compares\nand branches.",
    "start": "228800",
    "end": "233340"
  },
  {
    "text": "In this case, the table is indicating that\nthe handler for most illegal opcodes is the",
    "start": "233340",
    "end": "238340"
  },
  {
    "text": "UUOError routine,\nso it might have smaller and faster simply",
    "start": "238340",
    "end": "243680"
  },
  {
    "text": "to test for the two illegal opcodes the OS\nis going to emulate.",
    "start": "243680",
    "end": "249909"
  },
  {
    "text": "Illegal opcode 1 will be used to implement\nprocedure calls from user-mode to the OS,",
    "start": "249910",
    "end": "255200"
  },
  {
    "text": "which we call supervisor calls.",
    "start": "255200",
    "end": "257780"
  },
  {
    "text": "More on this in the next segment.",
    "start": "257780",
    "end": "260900"
  },
  {
    "text": "As an example of having the OS emulate an\ninstruction, we'll use illegal opcode 2 as",
    "start": "260900",
    "end": "266120"
  },
  {
    "text": "the opcode for the SWAPREG instruction, which\nwe'll discuss now.",
    "start": "266120",
    "end": "270400"
  },
  {
    "text": "But first just a quick look at how the OS\nconverts user-mode virtual addresses into",
    "start": "270400",
    "end": "275340"
  },
  {
    "start": "271000",
    "end": "271000"
  },
  {
    "text": "physical addresses it can use.",
    "start": "275340",
    "end": "278190"
  },
  {
    "text": "We'll build on the MMU VtoP procedure, described\nin the previous lecture.",
    "start": "278190",
    "end": "284030"
  },
  {
    "text": "This procedure expects as its arguments the\nvirtual page number and offset fields of the",
    "start": "284030",
    "end": "288630"
  },
  {
    "text": "virtual address, so,\nfollowing our convention for passing arguments",
    "start": "288630",
    "end": "293340"
  },
  {
    "text": "to C procedures, these are pushed onto the\nstack in reverse order.",
    "start": "293340",
    "end": "298210"
  },
  {
    "text": "The corresponding physical address is returned\nin R0.",
    "start": "298210",
    "end": "302819"
  },
  {
    "text": "We can then use the calculated physical address\nto read the desired location from physical",
    "start": "302820",
    "end": "308250"
  },
  {
    "text": "memory.",
    "start": "308250",
    "end": "309250"
  },
  {
    "text": "Okay, back to dealing with illegal opcodes.",
    "start": "309250",
    "end": "312970"
  },
  {
    "start": "310000",
    "end": "310000"
  },
  {
    "text": "Here's the handler for opcodes that are truly\nillegal.",
    "start": "312970",
    "end": "315750"
  },
  {
    "text": "In this case the OS uses various kernel routines\nto print out a helpful error message on the",
    "start": "315750",
    "end": "320440"
  },
  {
    "text": "user's console, then crashes the system!",
    "start": "320440",
    "end": "323970"
  },
  {
    "text": "You may have seen these \"blue screens of death\"\nif you run the Windows operating system, full",
    "start": "323970",
    "end": "328530"
  },
  {
    "text": "of cryptic hex numbers.",
    "start": "328530",
    "end": "330830"
  },
  {
    "text": "Actually, this wouldn't be the best approach\nto handling an illegal opcode in a user's",
    "start": "330830",
    "end": "335620"
  },
  {
    "text": "program.",
    "start": "335620",
    "end": "336620"
  },
  {
    "text": "In a real operating system, it would be better\nto save the state of the process in a special",
    "start": "336620",
    "end": "341400"
  },
  {
    "text": "debugging file historically referred to as\na \"core dump\"",
    "start": "341400",
    "end": "345610"
  },
  {
    "text": "and then terminate this particular process,\nperhaps printing a short error message on",
    "start": "345610",
    "end": "350580"
  },
  {
    "text": "the user's console to let them know what happened.",
    "start": "350580",
    "end": "353830"
  },
  {
    "text": "Then later the user could start a debugging\nprogram to examine the dump file to see where",
    "start": "353830",
    "end": "358990"
  },
  {
    "text": "their bug is.",
    "start": "358990",
    "end": "360490"
  },
  {
    "text": "Finally, here's the handler that will emulate\nthe actions of the SWAPREG instruction, after",
    "start": "360490",
    "end": "366020"
  },
  {
    "start": "361000",
    "end": "361000"
  },
  {
    "text": "which program execution will resume as if\nthe instruction had been implemented in hardware.",
    "start": "366020",
    "end": "372840"
  },
  {
    "text": "SWAPREG is an instruction that swaps the values\nin the two specified registers.",
    "start": "372840",
    "end": "378280"
  },
  {
    "text": "To define a new instruction, we'd first have\nto let the assembler know to convert the swapreg(ra,rc)",
    "start": "378280",
    "end": "384610"
  },
  {
    "text": "assembly language statement into binary.",
    "start": "384610",
    "end": "387580"
  },
  {
    "text": "In this case we'll use a binary format similar\nto the ADDC instruction, but setting the unused",
    "start": "387580",
    "end": "393020"
  },
  {
    "text": "literal field to 0.",
    "start": "393020",
    "end": "395090"
  },
  {
    "text": "The encoding for the RA and RC registers occur\nin their usual fields and the opcode field",
    "start": "395090",
    "end": "400830"
  },
  {
    "text": "is set to 2.",
    "start": "400830",
    "end": "404259"
  },
  {
    "text": "Emulation is surprisingly simple.",
    "start": "404260",
    "end": "406490"
  },
  {
    "text": "First we extract the RA and RC fields from\nthe binary for the swapreg instruction and",
    "start": "406490",
    "end": "411770"
  },
  {
    "text": "convert those values into the appropriate\nbyte offsets for accessing the temporary array",
    "start": "411770",
    "end": "417180"
  },
  {
    "text": "of saved register values.",
    "start": "417180",
    "end": "419530"
  },
  {
    "text": "Then we use RA and RC offsets to access the\nuser-mode register values that have been saved",
    "start": "419530",
    "end": "424810"
  },
  {
    "text": "in UserMState.",
    "start": "424810",
    "end": "427040"
  },
  {
    "text": "We'll make the appropriate interchange, leaving\nthe updated register values in UserMState,",
    "start": "427040",
    "end": "432270"
  },
  {
    "text": "where they'll be loaded into the CPU registers\nupon returning from the illegal instruction",
    "start": "432270",
    "end": "437240"
  },
  {
    "text": "interrupt handler.",
    "start": "437240",
    "end": "439030"
  },
  {
    "text": "Finally, we'll branch to the kernel code that\nrestores the process state and resumes execution.",
    "start": "439030",
    "end": "445870"
  },
  {
    "text": "We'll see this code in the next segment.",
    "start": "445870",
    "end": "448120"
  }
]