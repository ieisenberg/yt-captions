[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6920"
  },
  {
    "text": "offer high quality, educational resources for free. To make a donation or view\nadditional materials from",
    "start": "6920",
    "end": "13450"
  },
  {
    "text": "hundreds of MIT courses visit\nMIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13450",
    "end": "22010"
  },
  {
    "text": "MICHAEL PERRONE: So my name's\nMichael Perrone. ",
    "start": "22010",
    "end": "30170"
  },
  {
    "text": "I'm at the T.J. Watson Research\nCenter, IBM research. Doing all kinds of things for\nresearch, but most recently--",
    "start": "30170",
    "end": "38329"
  },
  {
    "text": "that's not what I want. There we go. Most recently I've been\nworking with the cell processor for the past\nthree years or so.",
    "start": "38330",
    "end": "46590"
  },
  {
    "text": "I don't want that.  How's that?",
    "start": "46590",
    "end": "53379"
  },
  {
    "text": "And because I do have to run\nout for a flight, I have my e-mail here if you want\nto ask me questions,",
    "start": "53380",
    "end": "59329"
  },
  {
    "text": "feel free to do that. What I'm going to do in this\npresentation is as Saman",
    "start": "59330",
    "end": "65640"
  },
  {
    "text": "suggested, talk in depth about\nthe cell processor, but really it's still going to be just the\nvery surface because you",
    "start": "65640",
    "end": "71140"
  },
  {
    "text": "going to have a month to go\ninto a lot more detail. But I want to give you a sense\nfor why it was created, the",
    "start": "71140",
    "end": "76299"
  },
  {
    "text": "way it was created, what it's\ncapable of doing, and what are the programming considerations\nthat have to be taken in mind",
    "start": "76300",
    "end": "82640"
  },
  {
    "text": "when you program. ",
    "start": "82640",
    "end": "90520"
  },
  {
    "text": "Here's the agenda just\nfor this section, Mike, of this class. I'll give you some motivation.",
    "start": "90520",
    "end": "95990"
  },
  {
    "text": "This is going to be a bit of a\nrepeat, so I'll go through it fairly quickly. I'll talk about the design\nconcepts, hardware overview,",
    "start": "95990",
    "end": "103460"
  },
  {
    "text": "performance characteristics,\napplication affinity-- what good is this device?",
    "start": "103460",
    "end": "109920"
  },
  {
    "text": "Talk about the software and this\nI imagine is one of the areas where you're going to go\ninto a lot of detail in the",
    "start": "109920",
    "end": "115330"
  },
  {
    "text": "next month because as you\nsuggested, the software really is the issue and I would\nactually go a little further",
    "start": "115330",
    "end": "121469"
  },
  {
    "text": "and say, why do people drive\nsuch large cars in the U.S.? Why do they waste\nso much energy?",
    "start": "121470",
    "end": "127560"
  },
  {
    "text": "The answer is very simple. It's because it's cheap. Even at $3 a gallon, it's cheap\ncompared to say, Europe",
    "start": "127560",
    "end": "132840"
  },
  {
    "text": "and other places. The truth is it's the same\nthing with programmers. Why did programmers program the\nway they did in the past",
    "start": "132840",
    "end": "140480"
  },
  {
    "text": "10, 20 years? Because cycles were cheap. They knew Moore's law was going\nto keep going and so you",
    "start": "140480",
    "end": "146190"
  },
  {
    "text": "could implement some algorithm,\nyou didn't have to worry about the details, as\nlong as you got the right",
    "start": "146190",
    "end": "151310"
  },
  {
    "text": "power law-- if you got your n\nsquared or n cubed or n log n, whatever behavior.",
    "start": "151310",
    "end": "157720"
  },
  {
    "text": "The details, if the multiplying\nfactor was 10 or 100 it didn't matter. Eventually Moore's law would\nsolve that problem for you, so",
    "start": "157720",
    "end": "164170"
  },
  {
    "text": "you didn't have to\nbe efficient. And I think I've spent the\nbetter part of three years trying to fight against that and\nyou're going to learn in",
    "start": "164170",
    "end": "172510"
  },
  {
    "text": "this class that, particularly\nfor multicore you have to think very hard about how\nyou're going to get",
    "start": "172510",
    "end": "177660"
  },
  {
    "text": "performance.  This is actually the take home\nmessage that I want to give.",
    "start": "177660",
    "end": "184260"
  },
  {
    "text": "I think it's just one or two\nslides, but we really need to get to these because that's\nwhere I want to get you",
    "start": "184260",
    "end": "190340"
  },
  {
    "text": "thinking along the\nright lines. And then there's a hardware consideration, we can skip that.",
    "start": "190340",
    "end": "196650"
  },
  {
    "text": "All right, so where have all\nthe gigahertz gone, right? We saw Moore's law, things\ngetting faster and faster and",
    "start": "196650",
    "end": "204219"
  },
  {
    "text": "the answer is I have a different\nchart that's basically the same thing. You have relative device\nperformance on this axis and",
    "start": "204220",
    "end": "211200"
  },
  {
    "text": "you've got the year here. And different technologies\nwere growing, growing, growing, but now you see\nthey're thresholding.",
    "start": "211200",
    "end": "217210"
  },
  {
    "text": "And you go to conferences now,\narchitecture conferences, and people are saying, Moore's\nlaw is dead.",
    "start": "217210",
    "end": "225500"
  },
  {
    "text": "Now, I don't know if I would go\nthat far and I know there are true believers out there\nwho say, well maybe the silicon on the insulator\ntechnology is dead, but",
    "start": "225500",
    "end": "234280"
  },
  {
    "text": "they'll be something else. And maybe that's true and maybe\nthat is multicore, but",
    "start": "234280",
    "end": "239330"
  },
  {
    "text": "unless we get the right\nprogramming models in place it's not going to\nbe multicore. ",
    "start": "239330",
    "end": "247320"
  },
  {
    "text": "Here's this power\ndensity graph. Here we have the nuclear reactor\npower up here and you see pentiums going up now.",
    "start": "247320",
    "end": "252660"
  },
  {
    "text": "Of course, there's a log plot,\nso we're far away, but on this axis we're not far away.",
    "start": "252660",
    "end": "258449"
  },
  {
    "text": "This is how much we shrink the\ntechnology, the size of those transistors.",
    "start": "258450",
    "end": "263940"
  },
  {
    "text": "So if we're kind of going down\nby 2 every 18 months or so,",
    "start": "263940",
    "end": "270670"
  },
  {
    "text": "maybe it's 2 years now, we're\nnot so far away from that nuclear reactor output. And that's a problem.",
    "start": "270670",
    "end": "277140"
  },
  {
    "text": "And what's really causing\nthat problem? Here's a picture of one of these\ngates magnified a lot",
    "start": "277140",
    "end": "282680"
  },
  {
    "text": "and here's the interface\nmagnified even further and you see here's this dielectric\nthat's insulating between the",
    "start": "282680",
    "end": "289330"
  },
  {
    "text": "2 sides of the gate-- we're reaching a fundamental\nlimit. A few atomic layers. You see here it's like 11\nangstroms. What's that?",
    "start": "289330",
    "end": "296880"
  },
  {
    "text": "10, 11 atoms across? If you go back to basic physics\nyou know that quantum",
    "start": "296880",
    "end": "302700"
  },
  {
    "text": "mechanical properties like\nelectrons, they tunnel, right? And they tunnel through barriers\nwith kind of an",
    "start": "302700",
    "end": "308560"
  },
  {
    "text": "exponential decay. So whenever you shrink this\nfurther you get more and more leakage, so the current\nis leaking through.",
    "start": "308560",
    "end": "315629"
  },
  {
    "text": "In this graph, what you see here\nis that as this size gets smaller, the leakage current is\ngetting equivalent to the",
    "start": "315630",
    "end": "322780"
  },
  {
    "text": "active power. So even when it's not doing\nanything, this 65 nanometer,",
    "start": "322780",
    "end": "329050"
  },
  {
    "text": "the technology is leaking\nas much power as it actually uses. And eventually, as we get\nsmaller, smaller we're going",
    "start": "329050",
    "end": "335430"
  },
  {
    "text": "to be using more power, just\nleaking stuff away and that's really bad because as Saman\nsuggested we have people like",
    "start": "335430",
    "end": "343200"
  },
  {
    "text": "Google putting this stuff near\nthe Coulee Dam so that they can get power. I deal with a lot of customers\nwho have tens of thousands of",
    "start": "343200",
    "end": "349600"
  },
  {
    "text": "nodes, 50,000 processors,\n100,000 processors. They're using 20 gigabytes--",
    "start": "349600",
    "end": "356930"
  },
  {
    "text": "sorry, megahertz. No, megawatts, that's\nwhat I want to say.",
    "start": "356930",
    "end": "362090"
  },
  {
    "text": "It's too early in the morning.  Tens of megawatts to power\ntheir installations and",
    "start": "362090",
    "end": "369460"
  },
  {
    "text": "they're choosing sites\nspecifically to get that power and they're limited. So they come to me, they come to\npeople at IBM and they say,",
    "start": "369460",
    "end": "375300"
  },
  {
    "text": "what can we do about power? Power is a problem. And that's why we're not seeing",
    "start": "375300",
    "end": "381630"
  },
  {
    "text": "increasing the gigahertz. Has this ever happened before? Well, I'm going to go to\nthis quickly, yes.",
    "start": "381630",
    "end": "389560"
  },
  {
    "text": "Here we see the power outage\noutput of a steam iron, right there per unit area.",
    "start": "389560",
    "end": "396520"
  },
  {
    "text": " And something's messed\nup here.",
    "start": "396520",
    "end": "402750"
  },
  {
    "text": "You see as the technology\nchanged from bipolar to CMOS we were able to improve the\nperformance, but the heat flux",
    "start": "402750",
    "end": "412220"
  },
  {
    "text": "got higher again and that begs\nthe question, what's going to happen next? And of course, IBM, Intel,\nAMD, they're all",
    "start": "412220",
    "end": "420310"
  },
  {
    "text": "betting this multicore. And so there's an opportunity\nfrom a business point of view.",
    "start": "420310",
    "end": "426090"
  },
  {
    "text": "So now, that's the intro. Multicore: how do you\ndeal with it?",
    "start": "426090",
    "end": "432540"
  },
  {
    "text": "Here's a picture of the chip,\nthe cell processor. You can see these 8\nlittle black dots.",
    "start": "432540",
    "end": "439930"
  },
  {
    "text": "They're local memory for each\none of 8 special purpose processors, as well as a big\nchunk over here, which is a",
    "start": "439930",
    "end": "447400"
  },
  {
    "text": "ninth processor. So this chip has 9 processors\non board and the trick is to",
    "start": "447400",
    "end": "452770"
  },
  {
    "text": "design it so that it addresses\nlots of issues that we just discussed.",
    "start": "452770",
    "end": "458080"
  },
  {
    "text": "So let me put this in context,\ncell was created for the Sony",
    "start": "458080",
    "end": "463569"
  },
  {
    "text": "Playstation 3. It started in about 2000 and\nthere's a long development",
    "start": "463570",
    "end": "468590"
  },
  {
    "text": "here until it was finally\nannounced over here. Where was it first announced?",
    "start": "468590",
    "end": "474380"
  },
  {
    "text": "It was announced several years\nlater and IBM recently announced a cell blade about a\nyear back and we're pushing",
    "start": "474380",
    "end": "482190"
  },
  {
    "text": "these blades and we're very\nmuch struggling with the programming model. How do you get performance\nwhile making something",
    "start": "482190",
    "end": "489040"
  },
  {
    "text": "programmable? If you go to customers and they\nhave 4 million lines of code, you can't tell them just\nport it and it'll be 80 person",
    "start": "489040",
    "end": "499240"
  },
  {
    "text": "years to get it ported,\n100 person years more. And then you have\nto optimize it. So there are problems and\nwe'll talk about that.",
    "start": "499240",
    "end": "507949"
  },
  {
    "text": "But it was created in this\ncontext and because of that, this chip in particular, is\na commodity processor.",
    "start": "507950",
    "end": "515510"
  },
  {
    "text": "Meaning that it's going to be\nselling millions and millions. Sony Playstation 2 sold an\naverage of 20 million units",
    "start": "515510",
    "end": "524920"
  },
  {
    "text": "each year for 5 years and we\nexpect the same for the Playstation 3. So the cell has a big advantage\nover other multicore",
    "start": "524920",
    "end": "533600"
  },
  {
    "text": "processors like the Intel\nWoodcrest, which has a street price of about $2000 and\nthe cell around 100.",
    "start": "533600",
    "end": "541930"
  },
  {
    "text": "So not only do we have big\nperformance improvements, we have price advantages\ntoo because of that commodity market.",
    "start": "541930",
    "end": "549660"
  },
  {
    "text": "All right, let's talk about\nthe design concept. Here's a little bit of a rehash\nof what we discussed",
    "start": "549660",
    "end": "556580"
  },
  {
    "text": "with some interesting\nwords here. We're talking about a power\nwall, a memory wall and a frequency wall. So we've talked about\nthis frequency wall.",
    "start": "556580",
    "end": "562900"
  },
  {
    "text": "We're hitting this wall because\nof the power really and the power wall people just\ndon't have enough power coming",
    "start": "562900",
    "end": "568839"
  },
  {
    "text": "into their buildings to keep\nthese things going. But memory wall, Saman didn't\nactually use that term, but",
    "start": "568840",
    "end": "575680"
  },
  {
    "text": "that's the fact that as the\nclock frequencies get higher and higher, memory appeared\nfurther and further away.",
    "start": "575680",
    "end": "581160"
  },
  {
    "text": "The more cycles that I have to\ngo as a processor before the data came in. And so that changes the whole\nparadigm, how you have to",
    "start": "581160",
    "end": "587620"
  },
  {
    "text": "think about it. We have processors with lots of\ncache, but is cache really",
    "start": "587620",
    "end": "593000"
  },
  {
    "text": "what you want? Well, it depends. If you have a very localized\nprocess where you're going to",
    "start": "593000",
    "end": "599490"
  },
  {
    "text": "bring something into cache and\nthe data is going to be reused then that's really a\ngood thing to do.",
    "start": "599490",
    "end": "604950"
  },
  {
    "text": "But what if you have random\ngather and scatter of data? You know, you're doing some\ntransactional processing or",
    "start": "604950",
    "end": "613040"
  },
  {
    "text": "whatever mathematical function\nyou're calculating is very distributed like an FFT. So you have to do all sorts of\naccesses through memory and it",
    "start": "613040",
    "end": "621210"
  },
  {
    "text": "doesn't fit in that cache. Well, then you can start\nthrashing cache. You bring in one integer and\nthen you ask the cache for the",
    "start": "621210",
    "end": "629770"
  },
  {
    "text": "next thing, it's not there, so\nit has to go in and so you spend all this time wasting time\ngetting stuff into cache.",
    "start": "629770",
    "end": "636380"
  },
  {
    "text": "So what we're pushing for\nmulticore, especially for cell is the notion of a shopping\nlist. And this is where",
    "start": "636380",
    "end": "643260"
  },
  {
    "text": "programability comes in and\nprograming models come in. You really need to think ahead\nof time about what your",
    "start": "643260",
    "end": "650310"
  },
  {
    "text": "shopping list is going to be\nand the analogy that people have been using is you're\nfixing something in your",
    "start": "650310",
    "end": "656170"
  },
  {
    "text": "house, you're pipe breaks. So you go and say, oh,\nI need a new pipe. So you go the store,\nyou get a pipe. You bring it back and say,\noh, I need some putty.",
    "start": "656170",
    "end": "662870"
  },
  {
    "text": "So you go to the store,\nyou get some putty. And oh, I need a wrench. Go to the store-- that's\nwhat cache is. So you figure out what you\nneed when you need it.",
    "start": "662870",
    "end": "670790"
  },
  {
    "text": "In the cell processor you have\nto think ahead and make a shopping list. If I'm going to\ndo this calculation I need all these things. I'm going to bring them all\nin, I'm going to start",
    "start": "670790",
    "end": "677240"
  },
  {
    "text": "calculating. When I'm calculating on that,\nI'm going to get my other shopping list. So that I can\nhave some concurrency of the",
    "start": "677240",
    "end": "683190"
  },
  {
    "text": "data load with the computes. ",
    "start": "683190",
    "end": "691230"
  },
  {
    "text": "I'm going to skip this here. ",
    "start": "691230",
    "end": "697850"
  },
  {
    "text": "You can read that later, it's\nnot that important. Cell synergy, now this is kind\nof you know, apple pie,",
    "start": "697850",
    "end": "705230"
  },
  {
    "text": "motherhood kind of thing. The cell processor was\nspecifically designed so that",
    "start": "705230",
    "end": "710610"
  },
  {
    "text": "those 9 cores are synergistic. That they interoperate\nvery efficiently.",
    "start": "710610",
    "end": "715670"
  },
  {
    "text": "Now I told you we have 8\nidentical processors, we call those SPEs. In the ninth processor\nits the PPE.",
    "start": "715670",
    "end": "722760"
  },
  {
    "text": "It's been designed so that the\nPPE is running the OS and it's doing all the transaction file\nsystems and what not so that",
    "start": "722760",
    "end": "729630"
  },
  {
    "text": "these SPEs can focus on\nwhat they're good at, which is compute. ",
    "start": "729630",
    "end": "735510"
  },
  {
    "text": "The whole thing is pullled\ntogether with an element interconnect bus and we'll\ntalk about that.",
    "start": "735510",
    "end": "742529"
  },
  {
    "text": "It's very, very efficient,\nvery high bandwidth bus. ",
    "start": "742530",
    "end": "748940"
  },
  {
    "text": "Now we're going to talk about\nthe detail hardware components. And Rodric somewhere, there you\nare, asked me to actually",
    "start": "748940",
    "end": "755440"
  },
  {
    "text": "dig down into more\nof the hardware. I would love to do that. Honestly, I'm not a\nhardware person.",
    "start": "755440",
    "end": "763470"
  },
  {
    "text": "I'll do the best I can, perhaps\nat the end of the talk we'll dig down and show me\nwhich slides you want.",
    "start": "763470",
    "end": "770410"
  },
  {
    "text": "But I've been dealing with this\nfor so long that I can do a decent job. Here's another picture\nof the chip.",
    "start": "770410",
    "end": "777620"
  },
  {
    "text": "It has lots of transistors. This is the size. We talked about the 9 cores, it\nhas 10 threads because this",
    "start": "777620",
    "end": "783200"
  },
  {
    "text": "power processor, the\nPPE has 2 threads. Each of these are\nsingle threaded.",
    "start": "783200",
    "end": "788780"
  },
  {
    "text": "And this is the wow factor. We have 200 gigaflops, over\n200 gigaflops of single",
    "start": "788780",
    "end": "795350"
  },
  {
    "text": "precision performance\non these chips. And over 20 gigaflops of double\nprecision and that will",
    "start": "795350",
    "end": "801820"
  },
  {
    "text": "be going up to 100 gigaflops\nby the end of this year. ",
    "start": "801820",
    "end": "807839"
  },
  {
    "text": "The bandwidth to main memory is\n25 gigabytes per second and up to 75 gigabytes per second\nof I/O bandwidth.",
    "start": "807840",
    "end": "815640"
  },
  {
    "text": "Now this chip really has\ntremendous bandwidth, but what we've seen so far-- particularly\nwith the Sony",
    "start": "815640",
    "end": "820800"
  },
  {
    "text": "Playstation and I think you may\nhave lots of them here, the board is not designed\nto really take",
    "start": "820800",
    "end": "826779"
  },
  {
    "text": "advantage of that bandwidth. And even the blades that IBM\nsells really can't get that",
    "start": "826780",
    "end": "833860"
  },
  {
    "text": "type of bandwidth\noff the blade. And so if you're keeping\neverything local on the blade or on the Playstation 3 then\nyou have lots of bandwidth",
    "start": "833860",
    "end": "840640"
  },
  {
    "text": "internally. But off blade or off board you\nreally have to survive with",
    "start": "840640",
    "end": "846320"
  },
  {
    "text": "something like a gigabyte, 2\ngigabytes in the future.",
    "start": "846320",
    "end": "852060"
  },
  {
    "text": "And this element interconnect\nbus I mentioned before has a tremendous bandwidth, over\n300 gigabytes per second.",
    "start": "852060",
    "end": "860630"
  },
  {
    "text": "The top frequency in the lab\nwas over 4 gigabytes-- gigahertz, sorry. And it's currently\nrunning when you",
    "start": "860630",
    "end": "868060"
  },
  {
    "text": "buy them at 3.2 gigahertz. And actually the Playstation 3's\nthat you're buying today,",
    "start": "868060",
    "end": "873720"
  },
  {
    "text": "I think, they only use\n7 out of the 8 SPEs. And that was a design\nconsideration from the",
    "start": "873720",
    "end": "880460"
  },
  {
    "text": "hardware point of view because\nas these chips get bigger and bigger, which is if you can't\nratchet up the gigahertz you",
    "start": "880460",
    "end": "886890"
  },
  {
    "text": "have to spread out. And so as they get bigger, flaws\nin the manufacturing process lead to faulty units.",
    "start": "886890",
    "end": "894630"
  },
  {
    "text": "So instead of just throwing away\nthings, if one of these SPE is bad we don't use\nit and we just do 7.",
    "start": "894630",
    "end": "901110"
  },
  {
    "text": "As the design process gets\nbetter by the end of this year",
    "start": "901110",
    "end": "906410"
  },
  {
    "text": "they'll be using 8. The blades that IBM sells,\nthey're all set up for 8",
    "start": "906410",
    "end": "914160"
  },
  {
    "text": "OK, so here's a schematic view\nof what you just saw on the previous slide.",
    "start": "914160",
    "end": "920010"
  },
  {
    "text": "You have these 8 SPEs. You have the PPE here with\nthis L1 and L2 cache.",
    "start": "920010",
    "end": "925269"
  },
  {
    "text": "You have the element\ninterconnect bus connecting all of these pieces together\nto a memory interface controller and a bus interface\ncontroller.",
    "start": "925270",
    "end": "932550"
  },
  {
    "text": "And so this MIC is what has the\n25.6 gigabytes per second",
    "start": "932550",
    "end": "938120"
  },
  {
    "text": "and this BIC has potentially\n75 going out here.",
    "start": "938120",
    "end": "943240"
  },
  {
    "text": "Each of these SPEs has\nits own local store. Those are those little black\ndots that you saw, those 8",
    "start": "943240",
    "end": "949940"
  },
  {
    "text": "black dots. It's not very large, it's a\nquarter of a megabyte, but it's very fast to this SXU,\nthis processing unit.",
    "start": "949940",
    "end": "957750"
  },
  {
    "text": "It's only 6 cycles away\nfrom that unit. And it's a fully pipelined 6\nso that if you feed that",
    "start": "957750",
    "end": "966520"
  },
  {
    "text": "pipeline you can get\ndata every cycle. And here, the thing that you\ncan't read because it's probably too dark is\nthe DMA engine.",
    "start": "966520",
    "end": "974190"
  },
  {
    "text": "So one of the interesting things\nabout this is that each one of these is a full\nfledged processor.",
    "start": "974190",
    "end": "981610"
  },
  {
    "text": "It can access main memory\nindependent of this PPE. So you can have 9 processes or\n10 if you're running 2 threads",
    "start": "981610",
    "end": "990990"
  },
  {
    "text": "here, all going simultaneously,\nall independent of one another.",
    "start": "990990",
    "end": "996209"
  },
  {
    "text": "And that allows for a\ntremendous amount of flexibility in the types of\nalgorithms you can implement.",
    "start": "996210",
    "end": "1001649"
  },
  {
    "text": "And because of this bus here you\ncan see it's 96 bytes per cycle and we're at\n3.2 gigahertz.",
    "start": "1001650",
    "end": "1009390"
  },
  {
    "text": "I think that's 288 gigabytes\nper second.",
    "start": "1009390",
    "end": "1014930"
  },
  {
    "text": "These guys can communicate to\none another across this bus without ever going out to main\nmemory and so they can get",
    "start": "1014930",
    "end": "1020210"
  },
  {
    "text": "much faster access to their\nlocal memories. So if you're doing lots of\ncomputes internally here you",
    "start": "1020210",
    "end": "1026630"
  },
  {
    "text": "can scream on this processing;\nreally, really go fast. And",
    "start": "1026630",
    "end": "1031880"
  },
  {
    "text": "you can do the same if you're\ngoing out to the memory interface controller here\nto main memory, if you sufficiently hide that\nmemory access.",
    "start": "1031880",
    "end": "1039890"
  },
  {
    "text": "So we'll talk about that.  All right, this is the PPE\nthat I mentioned before.",
    "start": "1039890",
    "end": "1048100"
  },
  {
    "text": "It's based on the IBM power\nfamily of processors, it's a watered down version to reduce\nthe power consumption.",
    "start": "1048100",
    "end": "1054680"
  },
  {
    "text": "So it doesn't have the horse\npower that you see in say a Pentium 4 or even--",
    "start": "1054680",
    "end": "1062470"
  },
  {
    "text": "actually, I don't have an exact\ncomparison point for this processor, but if you take\nthe code that runs today",
    "start": "1062470",
    "end": "1067929"
  },
  {
    "text": "on your Intel or AMD, whatever\nyour power and you recompile it on cell it'll run today--",
    "start": "1067930",
    "end": "1074960"
  },
  {
    "text": "maybe you have to change the\nlibrary or two, but it'll run today here, no problem. But it'll be about 60% slower,\n50% slower and so people say,",
    "start": "1074960",
    "end": "1084150"
  },
  {
    "text": "oh my god this cell processor's\nterrible. But that's because you're only\nusing that one piece.",
    "start": "1084150",
    "end": "1090980"
  },
  {
    "text": "So let's look at the other-- OK, so now we go into\ndetails of the PPE. ",
    "start": "1090980",
    "end": "1096960"
  },
  {
    "text": "Half a megabyte of L2 cache\nhere, coherent load stores. It does have a VMX unit,\nso you can do some SIMD",
    "start": "1096960",
    "end": "1104270"
  },
  {
    "text": "operations, single instruction\nmultiple data instructions. Two-way hardware multithreaded\nhere.",
    "start": "1104270",
    "end": "1109530"
  },
  {
    "text": " Then there's an EIB that\ngoes around here.",
    "start": "1109530",
    "end": "1116960"
  },
  {
    "text": "It's composed of four\n16 byte data rings. And you can have multiple,\nsimultaneous transfers per",
    "start": "1116960",
    "end": "1124510"
  },
  {
    "text": "ring for a total of over 100\noutstanding requests simultaneously. ",
    "start": "1124510",
    "end": "1133390"
  },
  {
    "text": "But this slide doesn't--\nthis kind of hides it under the rug. There's a certain\ntopology here. And so these things\nare going to be",
    "start": "1133390",
    "end": "1139909"
  },
  {
    "text": "connected to those 8 SPEs.",
    "start": "1139910",
    "end": "1145160"
  },
  {
    "text": "And depending on which way you\nsend things, you'll have better or worse performance.",
    "start": "1145160",
    "end": "1150340"
  },
  {
    "text": "So some of these buses are going\naround this way and some are going counterclockwise.",
    "start": "1150340",
    "end": "1156470"
  },
  {
    "text": "And because of that you have\nto know who you're communicating if you want have\nreal high efficiency.",
    "start": "1156470",
    "end": "1162230"
  },
  {
    "text": "I haven't seen personally cases\nwhere it made a really big difference, but I do know\nthat there's some people who",
    "start": "1162230",
    "end": "1167700"
  },
  {
    "text": "found, if I'm going from here\nto here I want to make sure",
    "start": "1167700",
    "end": "1174720"
  },
  {
    "text": "I'm sending things the right\nway because of that connectivity. Or else I could be sending\nthings all the",
    "start": "1174720",
    "end": "1180880"
  },
  {
    "text": "way around and waiting. AUDIENCE: Just a\nquick question. MICHAEL PERRONE: Yes.",
    "start": "1180880",
    "end": "1186020"
  },
  {
    "text": "AUDIENCE: Just like you said you\ncould complie anything on the power processor would\nbe slower, but you can. Now you also said the cell\nprocessor is in itself a",
    "start": "1186020",
    "end": "1191380"
  },
  {
    "text": "[INAUDIBLE] processor. Can I compile it in a C code\njust for that as well.",
    "start": "1191380",
    "end": "1198299"
  },
  {
    "text": "MICHAEL PERRONE: C code\nwould compile. There's issues with libraries\nbecause the libraries wouldn't be ported to the SPE\nnecessarily.",
    "start": "1198300",
    "end": "1205230"
  },
  {
    "text": "If it had been then yes. This is actually a very\ngood question.",
    "start": "1205230",
    "end": "1210440"
  },
  {
    "text": "It opens up lots of things. I don't know if I should\ntake that later. PROFESSOR: Take it later.",
    "start": "1210440",
    "end": "1215480"
  },
  {
    "text": "MICHAEL PERRONE: Bottom line is\nthis chip has two different processors and therefore you\nneed two different compilers",
    "start": "1215480",
    "end": "1221230"
  },
  {
    "text": "and it generates two different\nsource codes.",
    "start": "1221230",
    "end": "1226440"
  },
  {
    "text": "In principle, SPEs can run a\nfull OS, but they're not designed to do that and no one's\never actually tried.",
    "start": "1226440",
    "end": "1232980"
  },
  {
    "text": "So you could imagine having 8\nor 9 OSes running on this processor if you wanted.",
    "start": "1232980",
    "end": "1238190"
  },
  {
    "text": "Terrible waste from my\nperspective, but OK, so let's talk about these a little bit. Each of these SPEs has, like I\nmentioned this memory flow",
    "start": "1238190",
    "end": "1247190"
  },
  {
    "text": "controller here, an atomic\nupdate unit, the local store, and the SPU, which is actually\nthe processing unit.",
    "start": "1247190",
    "end": "1254900"
  },
  {
    "text": "Each SPU has a register file\nwith 128 registers.",
    "start": "1254900",
    "end": "1261370"
  },
  {
    "text": "Each register is 128 bits. So they're native SIMD, there\nare no scalar registers here",
    "start": "1261370",
    "end": "1269340"
  },
  {
    "text": "for the user to play with. If you want to do scalar ops\nthey'll be running in those",
    "start": "1269340",
    "end": "1275220"
  },
  {
    "text": "full vector registers, but\nyou'll just be wasting some portion of that register. ",
    "start": "1275220",
    "end": "1282340"
  },
  {
    "text": "It has IEEE double precision\nfloating point, but it doesn't have IEEE single precision\nfloating point.",
    "start": "1282340",
    "end": "1289100"
  },
  {
    "text": "It's curiosity, but that was\nagain, came from the history. The processor was designed for\nthe gaming industry and the",
    "start": "1289100",
    "end": "1296419"
  },
  {
    "text": "gamers, they didn't care\nif it had IEEE. Who cares IEEE? What I want is to have good\nmonsters right on the screen.",
    "start": "1296420",
    "end": "1302020"
  },
  {
    "text": " And so those SIMD registers can\noperate bitwise on bytes,",
    "start": "1302020",
    "end": "1311500"
  },
  {
    "text": "on shorts, on four words at a\ntime or two doubles at a time.",
    "start": "1311500",
    "end": "1317020"
  },
  {
    "text": " The DMA engines here, each DMA\nengine can have up to 16",
    "start": "1317020",
    "end": "1326210"
  },
  {
    "text": "outstanding requests in its\nqueue before it stalls. So you can imagine you're\nwriting something, some code",
    "start": "1326210",
    "end": "1332680"
  },
  {
    "text": "and you're sending things out\nto the DMA and then all of a sudden you see really bad\nperformance, it could be that",
    "start": "1332680",
    "end": "1338059"
  },
  {
    "text": "your DMA egine has stalled\nthe entire processor. If you try to write to that\nthing and then that queue is",
    "start": "1338060",
    "end": "1343299"
  },
  {
    "text": "full, it just waits until the\nnext open slot is available. So those are kind\nconsiderations.",
    "start": "1343300",
    "end": "1351040"
  },
  {
    "text": "AUDIENCE: You mean\n[UNINTELLIGIBLE PHRASE] MICHAEL PERRONE: Yes. AUDIENCE: It's not\nthe global one?",
    "start": "1351040",
    "end": "1357360"
  },
  {
    "text": "MICHAEL PERRONE: Right. That's correct. But there is a global\naddress space. AUDIENCE: 16 slots\neach in each SPU.",
    "start": "1357360",
    "end": "1365070"
  },
  {
    "text": "MICHAEL PERRONE: Right. Exactly. Each MFC has its own 16 slots.",
    "start": "1365070",
    "end": "1371570"
  },
  {
    "text": "And they all address\nthe same memory. They can have a transparent\nmemory space or they can have",
    "start": "1371570",
    "end": "1377539"
  },
  {
    "text": "a partitioned memory\nspace depending on how you set it up. AUDIENCE: Each SPU doesn't have\nits own-- the DMA goes",
    "start": "1377540",
    "end": "1383809"
  },
  {
    "text": "onto the bus, [UNINTELLIGIBLE]  that goes to a connection\nto the [UNINTELLIGIBLE].",
    "start": "1383809",
    "end": "1390850"
  },
  {
    "text": " PROFESSOR: You can add this\ndata in the SPUs too.",
    "start": "1390850",
    "end": "1396570"
  },
  {
    "text": "You don't have to always\ngo to outside memory. You can do SPU to SPU\ncommunication basically. MICHAEL PERRONE: Right. So I can do a DMA that transfers\nmemory from this",
    "start": "1396570",
    "end": "1403700"
  },
  {
    "text": "local store to this one if I\nwanted to and vice versa. And I can pull stuff\nin through the--",
    "start": "1403700",
    "end": "1409590"
  },
  {
    "text": " yeah, I mentioned this stuff. ",
    "start": "1409590",
    "end": "1417799"
  },
  {
    "text": "Now this broadband interface\ncontroller, the BIC, this is",
    "start": "1417800",
    "end": "1423710"
  },
  {
    "text": "how you get off the blade\nor off the board. It has 20 gigabytes per\nsecond here on I/O IF.",
    "start": "1423710",
    "end": "1431570"
  },
  {
    "text": " In 10 over here--I'm\nsorry, 5 over here. I'm trying to remember\nhow we get up to 70.",
    "start": "1431570",
    "end": "1440700"
  },
  {
    "text": "This is actually two-way\nand one is 25 and the other one's 30. That gets you to 55.",
    "start": "1440700",
    "end": "1448100"
  },
  {
    "text": "This should be 10 and now,\nwhat's going on here? ",
    "start": "1448100",
    "end": "1454310"
  },
  {
    "text": "It adds up to 75, I'm sure. I'm sure about that. ",
    "start": "1454310",
    "end": "1460790"
  },
  {
    "text": "I don't know why\nthat says that. But the interesting thing about\nthis over here, this I/O IF zero is that you can\nuse it to connect two",
    "start": "1460790",
    "end": "1470669"
  },
  {
    "text": "cell processors together. So this is why I know it's\nreally 25.6 because it's matched to this one.",
    "start": "1470670",
    "end": "1478110"
  },
  {
    "text": "So you have 25.6 going out to\nmain memory, but this one can go to another processor, so\nnow you have these two",
    "start": "1478110",
    "end": "1485240"
  },
  {
    "text": "processors side-by-side\nconnected at 25.6 gigabytes per second. And now I can do a memory access\nthrough here to the",
    "start": "1485240",
    "end": "1492360"
  },
  {
    "text": "memory that's on this processor\nand vice versa. However, If I'm going straight\nout to my memory it's going to",
    "start": "1492360",
    "end": "1499090"
  },
  {
    "text": "be faster than if I go\nout to this memory. So you have a slight NUMA\narchitecture and nonuniform",
    "start": "1499090",
    "end": "1504220"
  },
  {
    "text": "memory access. And you can hide that with\nsufficient multibuffering. ",
    "start": "1504220",
    "end": "1512090"
  },
  {
    "text": "So I know that this is 25 and\nI know the other one's 30. I don't know why it's\nwritten as 20 there. AUDIENCE: Can the SPUs\nwrite to the",
    "start": "1512090",
    "end": "1518970"
  },
  {
    "text": "[UNINTELLIGIBLE PHRASE]? MICHAEL PERRONE: Yes, they\ncan read from it.",
    "start": "1518970",
    "end": "1524370"
  },
  {
    "text": "I don't know if they\ncan write to it. In fact, that leads to a\nbottleneck occurring.",
    "start": "1524370",
    "end": "1529789"
  },
  {
    "text": "So I happily start a process on\nmy PPE and then I tell all",
    "start": "1529790",
    "end": "1534850"
  },
  {
    "text": "my SPEs, start doing some\nnumber crunching. So they do that. They get access to memory, but\nthey find the memory is in L2.",
    "start": "1534850",
    "end": "1541690"
  },
  {
    "text": "So they start pulling from L2,\nbut now all 8 are pulling from L2 and it's only 7 gigabytes per\nsecond instead of 25 and",
    "start": "1541690",
    "end": "1547820"
  },
  {
    "text": "so you get a bottleneck. And so what I tell everybody\nis if you're going to initialize data with that PPE\nmake sure you flush your cache",
    "start": "1547820",
    "end": "1554520"
  },
  {
    "text": "before you start the SPEs. And then you don't want to be\ntouching that memory because",
    "start": "1554520",
    "end": "1562010"
  },
  {
    "text": "you really want to keep things--\nstuff that the SPEs are dealing with-- you want to\nkeep it out of L2 cache. ",
    "start": "1562010",
    "end": "1572380"
  },
  {
    "text": "Here there's an interrupt\ncontroller.  An I/O bus master translation\nunit.",
    "start": "1572380",
    "end": "1579540"
  },
  {
    "text": "And you know, these allow for\nmessaging and message passing and interrupts and things\nof that nature. ",
    "start": "1579540",
    "end": "1587450"
  },
  {
    "text": "So that's the hardware\noverview. Any questions before\nI move on? ",
    "start": "1587450",
    "end": "1597950"
  },
  {
    "text": "So why's the cell processor\nso fast? Well, 3.2 gigahertz,\nthat's one.",
    "start": "1597950",
    "end": "1603250"
  },
  {
    "text": "But there's also the fact\nthat we have 8 SPEs. Each 8 SPEs have SIMD units,\nregisters that are running so",
    "start": "1603250",
    "end": "1611140"
  },
  {
    "text": "they can do this parallel\nprocessing on a chip. We have 8 SPEs and each one\nare doing up to 8 ops per",
    "start": "1611140",
    "end": "1621440"
  },
  {
    "text": "cycle if you're doing\na mul-add. So you have four mul-adds\nfor single precision.",
    "start": "1621440",
    "end": "1627730"
  },
  {
    "text": "So you've got 8, that's 64\nops per cycle times 3.2.",
    "start": "1627730",
    "end": "1635340"
  },
  {
    "text": "You get up to 200 gigaflops\nper cycle, 204.8. So that's really the\nmain reason.",
    "start": "1635340",
    "end": "1643970"
  },
  {
    "text": "We've talked about\nthis stuff here. This is an image of\nwhy it's faster.",
    "start": "1643970",
    "end": "1649810"
  },
  {
    "text": "Instead of staging and bringing\nthe data through the L2, which is kind of what we\nwere just discussing and having this PU, this processing\nunit, the PPE",
    "start": "1649810",
    "end": "1659220"
  },
  {
    "text": "manage the data coming in, each\none can do it themselves and bypass this bottleneck.",
    "start": "1659220",
    "end": "1665030"
  },
  {
    "text": "So that's something you have\nto keep in the back of your mind when you're programming. You really want to make sure\nthat you get this processor",
    "start": "1665030",
    "end": "1672140"
  },
  {
    "text": "out of there. You don't want it in your way. Let these guys do as much of\ntheir own work as they can. ",
    "start": "1672140",
    "end": "1679780"
  },
  {
    "text": "Here's a comparison of\ntheorectical peak performance of cell versus freescale,\nAMD, Intel over here.",
    "start": "1679780",
    "end": "1688200"
  },
  {
    "text": "Very nice. That's the wow chart. The theoretical peak, this is in\npractice, what did we see?",
    "start": "1688200",
    "end": "1695860"
  },
  {
    "text": "I don't know if you can read\nthese numbers but what you really want to focus on is the\nfirst and last columns. This is the type of calculation,\nhigh performance",
    "start": "1695860",
    "end": "1703460"
  },
  {
    "text": "computing like matrix\nmultiplication, bioinformatics, graphics,\nsecurity, it was really",
    "start": "1703460",
    "end": "1708909"
  },
  {
    "text": "designed for graphics. Security, communication, video\nprocessing and over here you see the advantage against an\nIA 32, a G5 processor.",
    "start": "1708910",
    "end": "1720470"
  },
  {
    "text": "And you see 8x, 12x,\n15, 10, 18x.",
    "start": "1720470",
    "end": "1726510"
  },
  {
    "text": "Very considerable improvement\nin performance. In the back-- question? AUDIENCE: [UNINTELLIGIBLE]\nprevious slide, how did it",
    "start": "1726510",
    "end": "1731841"
  },
  {
    "text": "compare to high\n[UNINTELLIGIBLE PHRASE]? MICHAEL PERRONE: All right, so\nyou're thinking like a peak",
    "start": "1731841",
    "end": "1737020"
  },
  {
    "text": "stream or something like that? AUDIENCE: Any particular\n[UNINTELLIGIBLE PHRASE]. The design of the SPUs is\nvery reminiscent of",
    "start": "1737020",
    "end": "1745506"
  },
  {
    "text": "[UNINTELLIGIBLE PHRASE]. MICHAEL PERRONE: So I believe,\nand I'm not well versed in all",
    "start": "1745506",
    "end": "1751480"
  },
  {
    "text": "of the processors that\nare out there. I think that we still\nhave a performance advantage in that space.",
    "start": "1751480",
    "end": "1757850"
  },
  {
    "text": "You know, I don't know\nabout Xilinx and those kind of things-- FPGAs I don't know, but what\nI tell people this",
    "start": "1757850",
    "end": "1765850"
  },
  {
    "text": "is there's a spectrum. And at one end you have your\ngeneral purpose processors. You've got your Intel, you've\ngot your Opteron whatever,",
    "start": "1765850",
    "end": "1772390"
  },
  {
    "text": "your power processor. And then at the other and you've\ngot your FPGAs and DSPs",
    "start": "1772390",
    "end": "1777410"
  },
  {
    "text": "and then maybe over here,\nsomewhere in the middle you've got graphical processing\nunits. Like Nvidia kind of things.",
    "start": "1777410",
    "end": "1783970"
  },
  {
    "text": "And then somewhere between\nthose graphics processing processors and the\ngeneral purpose",
    "start": "1783970",
    "end": "1789059"
  },
  {
    "text": "processors you've got cell. You get a significant\nimprovement in performance,",
    "start": "1789060",
    "end": "1797040"
  },
  {
    "text": "but you have to pay some\npain in programming. But not nearly as much as you\nhave to do with the graphics processors and no where near\nthe FPGAs, which are just",
    "start": "1797040",
    "end": "1806150"
  },
  {
    "text": "every time you write something\nyou have to rewrite everything. Question?",
    "start": "1806150",
    "end": "1811520"
  },
  {
    "text": "AUDIENCE: Somewhat related to\nthe previous question, but with a different angle. I always figured anyone could\ndo a [INAUDIBLE], so that's",
    "start": "1811520",
    "end": "1819540"
  },
  {
    "text": "why I ask about FFTs. Are they captured on the front\nor otherwise [UNINTELLIGIBLE]",
    "start": "1819540",
    "end": "1825590"
  },
  {
    "text": "MICHAEL PERRONE: Yeah, so this\nis actually one of the things I spent a lot of time\non for FFTs. I spent a lot of time with\nthe petroleum industry.",
    "start": "1825590",
    "end": "1832750"
  },
  {
    "text": "They take these enormous boats,\nthey have these arrays that go 5 kilometers back and\n1 kilometer wide, they drag",
    "start": "1832750",
    "end": "1839460"
  },
  {
    "text": "them over the ocean, and they\nmake these noises and they record the echo. And they have to do this\nenormous FFT and it",
    "start": "1839460",
    "end": "1845010"
  },
  {
    "text": "takes them 6 months. Depending on the size of the FFT\nit can be anywhere from a week to 6 months, literally.",
    "start": "1845010",
    "end": "1851664"
  },
  {
    "text": "AUDIENCE: [UNINTELLIGIBLE]. MICHAEL PERRONE: Sorry? AUDIENCE: Is this a PD FFT? MICHAEL PERRONE: Sometimes I\ndo too, but they do both.",
    "start": "1851665",
    "end": "1860690"
  },
  {
    "text": "I've become somewhat of an\nexpert on these FFTs. For cell the best performance\nnumber I know of is about 90",
    "start": "1860690",
    "end": "1866610"
  },
  {
    "text": "gigaflops of FFT performance. ",
    "start": "1866610",
    "end": "1871960"
  },
  {
    "text": "You know, that's very good. Yeah, it's like 50% of\npeak performance.",
    "start": "1871960",
    "end": "1877590"
  },
  {
    "text": "You know, it's easy to get\n98% with [? lynpacker ?] or [? djem ?]",
    "start": "1877590",
    "end": "1882889"
  },
  {
    "text": "on a processor like this and\nwe have. We get 97% of peak",
    "start": "1882890",
    "end": "1888320"
  },
  {
    "text": "performance, but it's a lot\nharder to get FFTs up to that. AUDIENCE: Well, then I'll\n[INAUDIBLE] the next questions",
    "start": "1888320",
    "end": "1894005"
  },
  {
    "text": "then which is somehow or\nanother you get the FFT performance, you've got to\nget the data at the right",
    "start": "1894005",
    "end": "1899435"
  },
  {
    "text": "place at the time. [UNINTELLIGIBLE] So you've personally done that\nor been involved with that? MICHAEL PERRONE: Right, so\nwe do a lot of tricks.",
    "start": "1899435",
    "end": "1904559"
  },
  {
    "text": "I can show you another slide or\nanother presentation that we talk about this, but\ntypically the FFTs that we",
    "start": "1904560",
    "end": "1911880"
  },
  {
    "text": "work with are somewhere from a\n1024 to 2048, that's square.",
    "start": "1911880",
    "end": "1918920"
  },
  {
    "text": "And so it's possible to take\nsay, the top 4 rows--",
    "start": "1918920",
    "end": "1924700"
  },
  {
    "text": "in the case of 1024, four rows\ncomplex, single precision I think is 16 kilobytes.",
    "start": "1924700",
    "end": "1931300"
  },
  {
    "text": "That fits into the local\nstore very nicely. So you can stop multibuffering. You bring in one, you start\ncomputing on it.",
    "start": "1931300",
    "end": "1936620"
  },
  {
    "text": "While you're computing on those\n4 in a SIMD fashion across the SIMD registers\nyou're bringing in the next one.",
    "start": "1936620",
    "end": "1942900"
  },
  {
    "text": "And then when that one's\nfinished you're writing that one out while your computing\non the one that arrived and while you're getting\nthe next one.",
    "start": "1942900",
    "end": "1948140"
  },
  {
    "text": "And since you can get the entire\n1024 or 2000 into local",
    "start": "1948140",
    "end": "1953760"
  },
  {
    "text": "store, you're only 6 cycles away\nfrom any element in it. So it's much, much faster.",
    "start": "1953760",
    "end": "1961470"
  },
  {
    "text": "We also did the 16 million\nelement FFT. ",
    "start": "1961470",
    "end": "1968120"
  },
  {
    "text": "1D, yeah and we did some\ntricks there to make it efficient, but it was\na lot slower.",
    "start": "1968120",
    "end": "1973980"
  },
  {
    "text": " AUDIENCE:\n[UNINTELLIGIBLE PHRASE]",
    "start": "1973980",
    "end": "1979180"
  },
  {
    "text": "would have to be a lot slower\nby the need for the problem. [UNINTELLIGIBLE PHRASE] MICHAEL PERRONE: What I remember\nit was fifteen times",
    "start": "1979180",
    "end": "1985870"
  },
  {
    "text": "faster than a power 5. ",
    "start": "1985870",
    "end": "1992970"
  },
  {
    "text": "It might have been a power 4,\nI don't remember, sorry. ",
    "start": "1992970",
    "end": "2002010"
  },
  {
    "text": "I might want to skip this one. I think I'm going to\nskip this one. AUDIENCE:\n[UNINTELLIGIBLE PHRASE]",
    "start": "2002010",
    "end": "2007340"
  },
  {
    "text": "MICHAEL PERRONE: Right.  Let's talk about what is\nthe cell good for.",
    "start": "2007340",
    "end": "2014360"
  },
  {
    "text": "You kind of have a sense of the\narchitecture and how it all fits together. You may have some sense of the\ngotchas and the problems that",
    "start": "2014360",
    "end": "2021690"
  },
  {
    "text": "might be there, but what did\nwe actually applied to 2? I mean you saw some\nof that here.",
    "start": "2021690",
    "end": "2028120"
  },
  {
    "text": "Here's a list of things that\neither we've already proven to ourself that it works well or\nwe're very confident that it",
    "start": "2028120",
    "end": "2036460"
  },
  {
    "text": "works well or we're working\nto demonstrate that it works well. ",
    "start": "2036460",
    "end": "2041700"
  },
  {
    "text": "Signal processing, image\nprocessing, audio resampling, noise generation. I mean, you can read through\nthis list, there's a long",
    "start": "2041700",
    "end": "2046920"
  },
  {
    "text": "list. And I guess there are\na few characteristics that really make it suitable\nfor cell.",
    "start": "2046920",
    "end": "2054030"
  },
  {
    "text": "Things that are in single\nprecision because you've got 200 gigaflops single and only\n20 of double, but that will",
    "start": "2054030",
    "end": "2060210"
  },
  {
    "text": "change as I mentioned. Things that are streaming,\nstreaming through and so",
    "start": "2060210",
    "end": "2066580"
  },
  {
    "text": "single processing is ideal where\nthe data comes through and you do your compute and then\nyou throw it away or you",
    "start": "2066580",
    "end": "2072350"
  },
  {
    "text": "give out your results and\nyou throw it away. Those are good. ",
    "start": "2072350",
    "end": "2079770"
  },
  {
    "text": "And things that are compute\nintensive, where you bring the data in and you're going to\ncrunch on it for a long time, so things like cryptography\nwhere you're either generating",
    "start": "2079770",
    "end": "2088169"
  },
  {
    "text": "something from a key and there's\nvirtually no input.",
    "start": "2088170",
    "end": "2093319"
  },
  {
    "text": "You're just generating streams\nof random numbers that's very well suited for this thing. You see FFTs listed here.",
    "start": "2093320",
    "end": "2099770"
  },
  {
    "text": " TCPIP off load. I didn't put that there.",
    "start": "2099770",
    "end": "2106790"
  },
  {
    "text": "There's actually a problem with\ncell today that we're working to fix that the TCPIP\nperformance is not very good.",
    "start": "2106790",
    "end": "2115330"
  },
  {
    "text": "And so what I tell people\nto use is open NPI. You know, so that\nover InfiniBand.",
    "start": "2115330",
    "end": "2123450"
  },
  {
    "text": "The PPE processor really doesn't\nhave the horse power to drive a full TCPIP sack.",
    "start": "2123450",
    "end": "2129750"
  },
  {
    "text": "I'm not sure it has the horse\npower to do a full NPI stack either, but at least you have\nmore control in that case.",
    "start": "2129750",
    "end": "2136680"
  },
  {
    "start": "2136680",
    "end": "2142130"
  },
  {
    "text": "The game physics, physical\nsimulations-- I can show you a demo, but I\ndon't know that we'll have time where a company called\nRapid Mind, which is",
    "start": "2142130",
    "end": "2150500"
  },
  {
    "text": "developing software to ease\nprogrammability for cell. Basically you take your existing\nscalar code and you",
    "start": "2150500",
    "end": "2157980"
  },
  {
    "text": "instrument it with C++ classes\nthat are kind of SPE aware.",
    "start": "2157980",
    "end": "2163010"
  },
  {
    "text": "And by doing that, just write\nyour scalar code and you get the SPE performance advantage.",
    "start": "2163010",
    "end": "2171010"
  },
  {
    "text": "They have this wonderful\ndemo of these chickens. They've got 16,000 chickens\nin a chicken yard. You know, the chicken yard has\nvarying topologies and the",
    "start": "2171010",
    "end": "2178870"
  },
  {
    "text": "chickens move around and all\n16,000 are being processed in real time with a single\ncell processor.",
    "start": "2178870",
    "end": "2184470"
  },
  {
    "text": "In fact, the Nvidia card that\nwas used to render that",
    "start": "2184470",
    "end": "2190080"
  },
  {
    "text": "couldn't keep up with what was\ncoming out of the SPEs. We we're impressed with that. We're happy with that. We showed it around at the\ngame conferences and the",
    "start": "2190080",
    "end": "2197710"
  },
  {
    "text": "gamers saw all these chickens\nand were like, this is really cool. How do I shoot them? ",
    "start": "2197710",
    "end": "2204259"
  },
  {
    "text": "So we said, you can't. But maybe in the next version. But the idea that we've designed\nthis so that it can",
    "start": "2204260",
    "end": "2211780"
  },
  {
    "text": "do physical simulations, and\nthis is maybe an entree for some of you people when you're\ndoing your stuff. I don't know what kinds of\nthings you want to try to do",
    "start": "2211780",
    "end": "2218680"
  },
  {
    "text": "on cell, but I've seen people do\nlots of things that really have no business doing\nwell on cell and they",
    "start": "2218680",
    "end": "2224430"
  },
  {
    "text": "did very, very well. Like pointer chasing. ",
    "start": "2224430",
    "end": "2233260"
  },
  {
    "text": "I'm trying to remember. There are two pieces of work. One done by PNNL Fabritzio\nPetrini and he did a graph",
    "start": "2233260",
    "end": "2242859"
  },
  {
    "text": "traversal algorithm. It was very much random access\nand he was able to parallelize",
    "start": "2242860",
    "end": "2249339"
  },
  {
    "text": "that very nicely on Cell. And then there was another guy\nat Georgia Tech who did",
    "start": "2249340",
    "end": "2254900"
  },
  {
    "text": "something similar for\nlinked lists. And you know, I expect things\nto work well on cell if",
    "start": "2254900",
    "end": "2261170"
  },
  {
    "text": "they're streaming and they have\nvery compute intensive kernels that are working on\nthings, but those are two",
    "start": "2261170",
    "end": "2266870"
  },
  {
    "text": "examples where they're very not\nvery compute intensive and not very streaming. They're kind of random access\nand they work very well.",
    "start": "2266870",
    "end": "2274710"
  },
  {
    "text": "Over here, target\napplications. There are lots of areas\nwhere we're trying to push cell forward.",
    "start": "2274710",
    "end": "2282260"
  },
  {
    "text": "Clearly it works in the\ngaming industry, but where else can it work? So medical imaging, there's\na lot of success there.",
    "start": "2282260",
    "end": "2288359"
  },
  {
    "text": "The sysmic imaging for\npetroleum, aerospace and defense for radar and sonar-- these are all signal\nprocessing apps.",
    "start": "2288360",
    "end": "2296190"
  },
  {
    "text": "We're also looking at digital\ncontent creation for computer animation. Very well suited for cell.",
    "start": "2296190",
    "end": "2301470"
  },
  {
    "text": " This is kind just what\nI just said.",
    "start": "2301470",
    "end": "2308040"
  },
  {
    "text": "Did I leave out anything? Finance-- once we have double\nprecision we'll be doing",
    "start": "2308040",
    "end": "2313869"
  },
  {
    "text": "things with finance. We actually demonstrated that\nthings work very well. You know, metropolis algorithms,\nMonte Carlo, Black",
    "start": "2313870",
    "end": "2321690"
  },
  {
    "text": "shoals algorithms if you're\nfamiliar with these kind of things from finance.",
    "start": "2321690",
    "end": "2327140"
  },
  {
    "text": "They tell us they need double\nprecision and we're like, you don't really need double\nprecision, come on. I mean, what you have is some\nmathematical calculation that",
    "start": "2327140",
    "end": "2336460"
  },
  {
    "text": "you're doing and you're doing\nit over and over and over. And Monte Carlo there's so much\nnoise, we say to these people, why do you need\ndouble precision? It turns out with decimal\nnotation you can only go up to",
    "start": "2336460",
    "end": "2346039"
  },
  {
    "text": "like a billion or something\nin single precision. So they have more dollars than\nthat, so they need double, for",
    "start": "2346040",
    "end": "2351180"
  },
  {
    "text": "that reason alone. But this gets back to the\nsloppiness of programmers. And I'm guilty of this myself.",
    "start": "2351180",
    "end": "2358030"
  },
  {
    "text": "They said, oh we have double. Let's use double. They didn't need to, but\nthey did it anyway. And now their legacy code\nis stuck with double.",
    "start": "2358030",
    "end": "2364990"
  },
  {
    "text": "They could convert it all to\nsingle, but it's too painful. Down on Wall Street to build a\nnew data center is like $100",
    "start": "2364990",
    "end": "2372410"
  },
  {
    "text": "million proposition. And they do it regularly,\nall of the banks. They'll be generating a new\ndata center every year,",
    "start": "2372410",
    "end": "2380050"
  },
  {
    "text": "sometimes multiple times a year\nand they just don't have time or the resources to go\nthrough and redo all their",
    "start": "2380050",
    "end": "2387010"
  },
  {
    "text": "code to make it run or\nsomething like cell. So we're making double\nprecision cell.",
    "start": "2387010",
    "end": "2394690"
  },
  {
    "text": "That's the short of it. All right, now software\nenvironment.",
    "start": "2394690",
    "end": "2400210"
  },
  {
    "text": "This is stuff that you can find\non the web and actually, it's changing a lot lately\nbecause we just",
    "start": "2400210",
    "end": "2406260"
  },
  {
    "text": "released the 2.0 SDK. And so the stuff that's in the\nslide might not actually be",
    "start": "2406260",
    "end": "2412950"
  },
  {
    "text": "the latest and greatest, but\nit's going to be epsilon away, so don't worry about\nit too much.",
    "start": "2412950",
    "end": "2417970"
  },
  {
    "text": "But you really shouldn't trust\nthese slides, you should go to the website and the website\nyou want to go to is",
    "start": "2417970",
    "end": "2423300"
  },
  {
    "text": "www.ibm.com/alphaworks. PROFESSOR: Tomorrow we are going\nto have a recitation",
    "start": "2423300",
    "end": "2430099"
  },
  {
    "text": "session talking about\nthe environment that we have created. I think we just got, probably\njust set up the latest",
    "start": "2430100",
    "end": "2436500"
  },
  {
    "text": "environment and then we increase\nit through the three weeks we've got. This is changing faster than\na three week cycle.",
    "start": "2436500",
    "end": "2444180"
  },
  {
    "text": "So [UNINTELLIGIBLE PHRASE]  So this will give you a preview\nof what's going to be.",
    "start": "2444180",
    "end": "2451620"
  },
  {
    "text": "MICHAEL PERRONE: Then you go\nto alphaworks, you go to search on alphaworks for cell\nand you get more information then you could ever\npossibly read.",
    "start": "2451620",
    "end": "2457810"
  },
  {
    "text": "We have a programmer's manual\nthat's 900 pages long, it's really good reading.",
    "start": "2457810",
    "end": "2464260"
  },
  {
    "text": "Actually there's one thing in\nthat 800, 900 hundred pages that you really should read. It's called the cell programming\ntips chapter.",
    "start": "2464260",
    "end": "2470599"
  },
  {
    "text": "It's a really nice chapter. But there are many, many\npublications and things like",
    "start": "2470600",
    "end": "2477140"
  },
  {
    "text": "that, more than just the SDK\nin the OS and whatnot, so I",
    "start": "2477140",
    "end": "2483109"
  },
  {
    "text": "encourage you to look at that. All right, so this is kind\nof the pyramid, the",
    "start": "2483110",
    "end": "2488430"
  },
  {
    "text": "cell software pyramid. We've got the standards under\nhere, the application binary interface, language\nextensions.",
    "start": "2488430",
    "end": "2496710"
  },
  {
    "text": "And over here we have\ndevelopment tools and we'll talk about each of these\npieces briefly.",
    "start": "2496710",
    "end": "2502130"
  },
  {
    "text": " These specifications define\nwhat's actually the reference",
    "start": "2502130",
    "end": "2509350"
  },
  {
    "text": "implementation for the cell. C++ and C, they have language\nextensions in the similar way",
    "start": "2509350",
    "end": "2516480"
  },
  {
    "text": "to the extensions for VMX\nfor SSE on Intel. You have C extensions for cell\nthat allow you to use",
    "start": "2516480",
    "end": "2525000"
  },
  {
    "text": "intrinsics that actually run as\nSIMD instructions on cell.",
    "start": "2525000",
    "end": "2532200"
  },
  {
    "text": "For example, you can say SPU\nunderscore mul-add, and it's going to do a vector mul-add.",
    "start": "2532200",
    "end": "2537670"
  },
  {
    "text": "So you can get assembly language\nlevel control over",
    "start": "2537670",
    "end": "2544059"
  },
  {
    "text": "your code without having to\nuse any assembly language. And then there's that.",
    "start": "2544060",
    "end": "2550890"
  },
  {
    "text": "There is a full system\nsimulator. The simulator is very, very\naccurate for things that do",
    "start": "2550890",
    "end": "2560050"
  },
  {
    "text": "not run out to main memory. They've been working to improve\nthis so I don't know if recently they have made it\nmore accurate, but if you're",
    "start": "2560050",
    "end": "2567809"
  },
  {
    "text": "doing compute intensive stuff,\nif you're compute bound the simulator can give you\naccuracies within 99%.",
    "start": "2567810",
    "end": "2575000"
  },
  {
    "text": "You know, within 1%\nof the real value. I've only seen one thing on the\nsimulator more than 1% off",
    "start": "2575000",
    "end": "2582050"
  },
  {
    "text": "and that was 4%, so the\nsimulator is very-- excuse me-- very reliable. And I encourage you to\nuse it if you can't",
    "start": "2582050",
    "end": "2588260"
  },
  {
    "text": "get access to hardware.  What else?",
    "start": "2588260",
    "end": "2594240"
  },
  {
    "text": "The simulator has all kinds\nof tools in there. And I'm not going to go through\nthe software stack in",
    "start": "2594240",
    "end": "2601820"
  },
  {
    "text": "simulation. ",
    "start": "2601820",
    "end": "2611280"
  },
  {
    "text": "This gives you a sense for-- you've got your hardware\nrunning here. You can run this on any one of\nthese platforms. Power PC,",
    "start": "2611280",
    "end": "2618280"
  },
  {
    "text": "Intel with these OS's. The whole thing is written\nin TCL, the simulator.",
    "start": "2618280",
    "end": "2626559"
  },
  {
    "text": "And it has all these\nkind of simulators. It's simulating the DMAs, it's\nsimulating the caches and then",
    "start": "2626560",
    "end": "2634300"
  },
  {
    "text": "you get a graphical user\ninterface and a command line interface to that simulator. THe graphical user interface is\nconvenient, but the command",
    "start": "2634300",
    "end": "2641940"
  },
  {
    "text": "line gives you much\nmore control. You can treat parameters. ",
    "start": "2641940",
    "end": "2649790"
  },
  {
    "text": "This gives you a view of\nwhat the graphical",
    "start": "2649790",
    "end": "2654850"
  },
  {
    "text": "userface looks like. It says mambo zebra because that\nwas a different project, but now it'd probably\nsay system sim or",
    "start": "2654850",
    "end": "2661359"
  },
  {
    "text": "something like that. And you'll see the PPC-- this is the PPE I don't know\nwhy they changed it.",
    "start": "2661360",
    "end": "2668190"
  },
  {
    "text": "And then you have SP of zero,\nSP of 1 going down and it gives you some access\nto these parameters.",
    "start": "2668190",
    "end": "2675240"
  },
  {
    "text": "The model here, it says pipeline\nand then there's I",
    "start": "2675240",
    "end": "2681310"
  },
  {
    "text": "think, functional mode\nor pipeline mode. Pipeline mode is where it's\nreally simulating everything and it's much slower.",
    "start": "2681310",
    "end": "2687280"
  },
  {
    "text": "But it's accurate. And then the other is functional\nmode just to test the code actually works\nas it's supposed to. PROFESSOR: I guess one point\nin the class what we'll try",
    "start": "2687280",
    "end": "2695136"
  },
  {
    "text": "and do is since each group has\naccess to the the hardware, you can do most of the things\nin the real hardware and use",
    "start": "2695136",
    "end": "2701930"
  },
  {
    "text": "the debugger in the\nhardware that's probably been talked about. But if things gets really bad\nand you can't understand use",
    "start": "2701930",
    "end": "2707950"
  },
  {
    "text": "simulator as a very accurate\ndebugger only when it's needs needed because there you\ncan look at every",
    "start": "2707950",
    "end": "2713250"
  },
  {
    "text": "little detail inside. This is kind of a thing, a\nlast resort type thing. MICHAEL PERRONE:\nYeah, I agree.",
    "start": "2713250",
    "end": "2719930"
  },
  {
    "text": "Like I said, I've been doing\nthis for three years. Three years ago we didn't\neven have hardware. So the simulator was all we had,\nso we relied on it a lot.",
    "start": "2719930",
    "end": "2727120"
  },
  {
    "text": "But I think that usage of\nit makes a lot of sense. ",
    "start": "2727120",
    "end": "2733549"
  },
  {
    "text": "This is the graphical\ninterface. You know, it's just a\nTickle interface. ",
    "start": "2733550",
    "end": "2741240"
  },
  {
    "text": "I'm going to skip through\nthese things. It just shows you how you can\nlook at memory with this more",
    "start": "2741240",
    "end": "2747349"
  },
  {
    "text": "memory access. You get some graphical representation of various pieces. You know, how many stalls?",
    "start": "2747350",
    "end": "2752660"
  },
  {
    "text": "How many loads? How many DMA transactions? So you can see what's going\non at that level. ",
    "start": "2752660",
    "end": "2760270"
  },
  {
    "text": "And all of this can be\npulled together into this UART window here. OK, so the Linux, it's pretty\nstandard Linux, but it has",
    "start": "2760270",
    "end": "2769680"
  },
  {
    "text": "some extensions. Let's see.",
    "start": "2769680",
    "end": "2774819"
  },
  {
    "text": "Provided as a patch, yeah. That might be wrong. I don't know where\nwe are currently.",
    "start": "2774820",
    "end": "2781490"
  },
  {
    "text": "You have this SPE thread\nAPI for creating threads from the PPEs.",
    "start": "2781490",
    "end": "2788020"
  },
  {
    "text": "Let's see. What do I want to\ntell you here? There's a better slide for\nthis kind of information.",
    "start": "2788020",
    "end": "2795680"
  },
  {
    "text": "They share the memory space,\nwe talked about that. There's error event and\nsignal handling.",
    "start": "2795680",
    "end": "2801830"
  },
  {
    "text": "So there are multiple ways\nyou communicate. You can communicate with the\ninterrupts and the event and",
    "start": "2801830",
    "end": "2810029"
  },
  {
    "text": "signaling that way or you\ncan use these mailboxes. So each SPE has its own mailbox\nand inbox and an",
    "start": "2810030",
    "end": "2816640"
  },
  {
    "text": "outbox so you can post something\nto your outbox and then the PPE will read\nit when it's ready.",
    "start": "2816640",
    "end": "2821770"
  },
  {
    "text": "Or you can read from your inbox\nwaiting on the PPE to write something. You have to be careful because\nyou can stall there.",
    "start": "2821770",
    "end": "2827960"
  },
  {
    "text": "If the PPE hasn't written you\nwill stall waiting for something to fill up. So you can do a check.",
    "start": "2827960",
    "end": "2834460"
  },
  {
    "text": "There are ways to get around\nthat, but these are kind of common gotchas that you\nhave to watch out for. ",
    "start": "2834460",
    "end": "2842410"
  },
  {
    "text": "Then you have the mailboxes, you\nhave the interrupts, you also have DMAs. You can do communication with\nDMAs so you have at least",
    "start": "2842410",
    "end": "2848300"
  },
  {
    "text": "three different ways that\nyou communicate between the SPEs on cell.",
    "start": "2848300",
    "end": "2853579"
  },
  {
    "text": "And which one is going to be\nbest really depends on the algorithm you're running.",
    "start": "2853580",
    "end": "2860050"
  },
  {
    "text": "So these are the extensions\nto Linux. This is going to show you a\nbunch of things that you probably won't be able to read,\nbut there's something",
    "start": "2860050",
    "end": "2866800"
  },
  {
    "text": "called SPUFS, the file system\nthat has a bunch of open, read, write, and close\nfunctionality.",
    "start": "2866800",
    "end": "2873900"
  },
  {
    "text": " And then we also have this\nsignaling and the mailboxes",
    "start": "2873900",
    "end": "2881630"
  },
  {
    "text": "that I mentioned to\nyou previously. And this you can't even read. I can't even read this one. What is it?",
    "start": "2881630",
    "end": "2888300"
  },
  {
    "text": "Ah, this is perhaps the\nmost important one. It says SPU create thread.",
    "start": "2888300",
    "end": "2893790"
  },
  {
    "text": "So the SPEs from the Linux point\nof view are just threads",
    "start": "2893790",
    "end": "2899370"
  },
  {
    "text": "that are running. The Linux doesn't really know\nthat they're special purpose hardware, it just knows it's a\nthread and you can do things",
    "start": "2899370",
    "end": "2905890"
  },
  {
    "text": "like spawn a thread, kill a\nthread, wait on a thread-- all the usual things that you\ncan do with threads.",
    "start": "2905890",
    "end": "2913490"
  },
  {
    "text": "So it's a lot like P\nthreads, but it's not actually P threads. So here you could see these\nthings are more useful.",
    "start": "2913490",
    "end": "2920590"
  },
  {
    "text": "This is SPE create groups. So you can create a thread and\nthread group so that threads",
    "start": "2920590",
    "end": "2926369"
  },
  {
    "text": "that are part of the same group\nknow about one another. So you can partition your system\nand have three SPEs",
    "start": "2926370",
    "end": "2931619"
  },
  {
    "text": "doing one thing and five\ndoing another. So that you can split it\nup however you like. You have get and set affinity\nso that you can choose which",
    "start": "2931620",
    "end": "2938940"
  },
  {
    "text": "SPEs are running which tasks,\nso that you can get more efficient use of that element\ninterconnect bus.",
    "start": "2938940",
    "end": "2945800"
  },
  {
    "text": "Kill and waits, open, close,\nwriting signals, the usual. ",
    "start": "2945800",
    "end": "2955110"
  },
  {
    "text": "Let me check my time here. I really don't have a lot more\ntime, so I'm going to say that",
    "start": "2955110",
    "end": "2962410"
  },
  {
    "text": "we have this thread management\nlibrary. It has the functionality\nthat I just mentioned. In the next month or so you're\ngoing to go through that in a",
    "start": "2962410",
    "end": "2968470"
  },
  {
    "text": "lot more detail. ",
    "start": "2968470",
    "end": "2975860"
  },
  {
    "text": "The SPE comes with a lot\nof sample libraries. These are not necessarily the\nvery best implementation of",
    "start": "2975860",
    "end": "2981410"
  },
  {
    "text": "these libraries and they're\nnot even fully functional libraries, but they're\nsuggestive of first of all,",
    "start": "2981410",
    "end": "2986500"
  },
  {
    "text": "how things can be written to\ncell, how to use cell, and in some cases how to\noptimize cell.",
    "start": "2986500",
    "end": "2993000"
  },
  {
    "text": "Like the basic matrix\noperations, there's some optimization. The FFTs are very tightly\noptimized, so if you want to",
    "start": "2993000",
    "end": "2998970"
  },
  {
    "text": "take a look at that and\nunderstand how to do that type of memory manipulation.",
    "start": "2998970",
    "end": "3004010"
  },
  {
    "text": "So there are samples codes out\nthere that can be very useful. We'll skip that.",
    "start": "3004010",
    "end": "3010240"
  },
  {
    "text": "Oh, this is that\nFFT 16 million. There's an example,\nit's on the SDK.",
    "start": "3010240",
    "end": "3015940"
  },
  {
    "text": "Actually, I don't know if you've\ngot PS3's if all these things can run. They should run. Yeah, they should run.",
    "start": "3015940",
    "end": "3023819"
  },
  {
    "text": "There may be some memory issues\nout to main memory that I'm not aware of.",
    "start": "3023820",
    "end": "3029090"
  },
  {
    "text": "There are all kinds of demos\nthere that you can play with, which are good for learning\nhow to spawn threads and",
    "start": "3029090",
    "end": "3035620"
  },
  {
    "text": "things like that. You have your basic GNU\nbinutils tools.",
    "start": "3035620",
    "end": "3041360"
  },
  {
    "text": "There's GCC out there. There's also XLC. You can download XLC.",
    "start": "3041360",
    "end": "3048529"
  },
  {
    "text": "In some cases, one will be\nbetter than the other, but I think in most cases XLC's\na little better.",
    "start": "3048530",
    "end": "3053780"
  },
  {
    "text": "Or in some cases, actually\na lot better. So you can get that.",
    "start": "3053780",
    "end": "3059240"
  },
  {
    "text": "I'd recommend that. There's a debugger which\nprovides application source level debugging.",
    "start": "3059240",
    "end": "3066160"
  },
  {
    "text": "PPE multithreading, SPE\nmultithreading, the interaction between\nthese guys.",
    "start": "3066160",
    "end": "3071310"
  },
  {
    "text": "There are three modes for the\ndebugger: stand alone and then attached to SPE threads.",
    "start": "3071310",
    "end": "3077750"
  },
  {
    "text": "Sounds like two.  That's problematic.",
    "start": "3077750",
    "end": "3086120"
  },
  {
    "text": "There's this nice static\nanalysis tool. This is good for looking\nfor really tightly, optimizing your code.",
    "start": "3086120",
    "end": "3091329"
  },
  {
    "text": "You have to be able to read\nassembly, but it shows you graphically-- kind of--",
    "start": "3091330",
    "end": "3096430"
  },
  {
    "text": "where the stalls are happening\nand you can try and reorganize your code. And then like Saman suggested,\nthe dynamic analysis using the",
    "start": "3096430",
    "end": "3104720"
  },
  {
    "text": "simulator is a good way to\nreally get cycle by cycle stepping through the code.",
    "start": "3104720",
    "end": "3111190"
  },
  {
    "text": "And someone was very excited\nwhen they made this chart because they put these\nbig explosions here. ",
    "start": "3111190",
    "end": "3118500"
  },
  {
    "text": "You've got some compiler here\nthat's going to be generating two pieces of code, the PPE\nbinary and the SPE binary.",
    "start": "3118500",
    "end": "3127270"
  },
  {
    "text": "When you go through the cell\ntutorials for training on how to program cell you'll see that\nthis code is actually",
    "start": "3127270",
    "end": "3134900"
  },
  {
    "text": "plugged into-- linked\ninto the PPE code. And when the PPE code spawns a\nthread it's going to take a",
    "start": "3134900",
    "end": "3141170"
  },
  {
    "text": "pointer to this code and\nbasically DMA that code into the SPE and tell the SPE\nto start running.",
    "start": "3141170",
    "end": "3147540"
  },
  {
    "text": "Once it's done that, that\nthread is independent. The PPE could kill it, but it\ncould just let it run to its",
    "start": "3147540",
    "end": "3154220"
  },
  {
    "text": "natural termination or this\nthing could terminate itself or it could be interrupted by\nsome other communication.",
    "start": "3154220",
    "end": "3161370"
  },
  {
    "text": "But that's the basic process,\nyou have these two pieces of code. OK, so now this is really\nwhat I wanted to get to.",
    "start": "3161370",
    "end": "3171069"
  },
  {
    "text": "So I want lots of\nquestions here. There are 4 levels of\nparallelism in cell.",
    "start": "3171070",
    "end": "3179800"
  },
  {
    "text": "On the cell blade, the IBM\nblade you have two cell processors per blade. So that's one level\nof parallelism.",
    "start": "3179800",
    "end": "3186570"
  },
  {
    "text": "At chip level we know there are\n9 cores and they're all running independently. That's another level\nof parallelism. On the instruction level each\nof the SPEs has two",
    "start": "3186570",
    "end": "3194170"
  },
  {
    "text": "instruction pipelines, so it's\nan odd and an even pipeline. One pipeline is doing things--",
    "start": "3194170",
    "end": "3199860"
  },
  {
    "text": "the odd pipeline is doing\nloads and stores, DMA transactions, interrupts,\nbranches and it's doing",
    "start": "3199860",
    "end": "3210840"
  },
  {
    "text": "something called shuffle byte\nor the shuffle operation. So shuffle operation's a very,\nvery useful operation that",
    "start": "3210840",
    "end": "3216270"
  },
  {
    "text": "allows you to take two registers\nas data, a third register as a pattern register,\nand the fourth",
    "start": "3216270",
    "end": "3224730"
  },
  {
    "text": "register as output. It then, from this pattern, will\nchoose arbitrarily the",
    "start": "3224730",
    "end": "3230040"
  },
  {
    "text": "bytes that are in these two\nand reconstitute them into this fourth register. It's wonderful for doing\nmanipulations and shuffling",
    "start": "3230040",
    "end": "3238350"
  },
  {
    "text": "things around. Like shuffling a deck of cards,\nyou could take all of these and ignore this or you\ncould take the first one here,",
    "start": "3238350",
    "end": "3244820"
  },
  {
    "text": "replicate it 16 times or you\ncould take a random sampling from these, put into\nthat register. AUDIENCE: Do you use that\nspecifically for the",
    "start": "3244820",
    "end": "3252172"
  },
  {
    "text": "[UNINTELLIGIBLE]? MICHAEL PERRONE: We\ndo use it, yeah. Yeah, you take a look, you'll\nsee we use shuffle a lot.",
    "start": "3252172",
    "end": "3258010"
  },
  {
    "text": "It's surprising how valuable\nshuffle can be. However, then you have to worry\nnow, you've got the",
    "start": "3258010",
    "end": "3263280"
  },
  {
    "text": "shuffle here, if you're doing\nlike matrix transpose, it's",
    "start": "3263280",
    "end": "3268300"
  },
  {
    "text": "all shuffles. But what's a date matrix\ntranspose? It's really bandwidth\nbound, right?",
    "start": "3268300",
    "end": "3274490"
  },
  {
    "text": "Because you're pulling data in,\nshuffling it around and sending it out. Well, where's the reads\nand writes?",
    "start": "3274490",
    "end": "3279640"
  },
  {
    "text": "They're on the odd pipeline. Where are the shuffles? They're on the odd pipeline. So now you can have a situation\nwhere it's all",
    "start": "3279640",
    "end": "3285390"
  },
  {
    "text": "shuffle, shuffle, shuffle,\nshuffle and then the instruction pre-fetch buffer\ngets starved and so it stalls",
    "start": "3285390",
    "end": "3293950"
  },
  {
    "text": "for 15, 17 cycles while\nI have to load. Basically, it's a tiny\nlittle loop.",
    "start": "3293950",
    "end": "3299900"
  },
  {
    "text": "But you get stalls and you get\nreally bad performance. So then you have to tell\nthe compiler-- actually, the compiler\nis getting",
    "start": "3299900",
    "end": "3305880"
  },
  {
    "text": "better at these things. Much better than it used to be\nor by hand you can force it to leave a slot for\nthe pre-fetch.",
    "start": "3305880",
    "end": "3312910"
  },
  {
    "text": "These are gotchas\nthat programmers have to be aware of. On the other pipeline you have\nall your normal operations.",
    "start": "3312910",
    "end": "3320800"
  },
  {
    "text": "So you have your mul-adds, your\nbit operations, all the shift and things like that,\nthey're all over there.",
    "start": "3320800",
    "end": "3328060"
  },
  {
    "text": "There is one other operation\non the odd pipeline and I think it's a quad\nword rotate or something, but I don't remember.",
    "start": "3328060",
    "end": "3336560"
  },
  {
    "text": "So that's instruction level\ndual issue parallelism. AUDIENCE:\n[UNINTELLIGIBLE PHRASE]",
    "start": "3336560",
    "end": "3343280"
  },
  {
    "text": "MICHAEL PERRONE: Everything\nis in order on this processor, yeah. And that was done for power\nreasons, right? Get rid of all the space and all\nthe transistors that are",
    "start": "3343280",
    "end": "3349760"
  },
  {
    "text": "doing all this fancy,\nout of order processing to save power. AUDIENCE:\n[UNINTELLIGIBLE PHRASE]",
    "start": "3349760",
    "end": "3354850"
  },
  {
    "start": "3354850",
    "end": "3378050"
  },
  {
    "text": "MICHAEL PERRONE: That's\na really good point. When you're doing scalar\nprocessing you think well, you're thinking I'm going to--\nkind of conceptually, you want",
    "start": "3378050",
    "end": "3385465"
  },
  {
    "text": "to have all the things that\nare doing the same thing together right. That's how I used to program. You put all this stuff here\nthen you do maybe all your",
    "start": "3385465",
    "end": "3392589"
  },
  {
    "text": "reads or whatever and then you\ndo all your computes and you can't do it that way. You have to really think about\nhow are you going to interlead",
    "start": "3392590",
    "end": "3398370"
  },
  {
    "text": "these things. Now the compiler will help you,\nbut to get really high",
    "start": "3398370",
    "end": "3403990"
  },
  {
    "text": "performance you have to have\nbetter tools and we don't have those tools yet. And so I'm hoping that you guys\nare the ones that are",
    "start": "3403990",
    "end": "3410140"
  },
  {
    "text": "going to come up with the new\ntools, the new ideas that are going to really help\npeople improve programmability in cell.",
    "start": "3410140",
    "end": "3417970"
  },
  {
    "text": "Then at the lowest level you\nhave the register level parallelism where you can have\nfour single precision float",
    "start": "3417970",
    "end": "3425319"
  },
  {
    "text": "ops going simultaneously. So when you're programming cell\nyou have to keep all of",
    "start": "3425320",
    "end": "3431250"
  },
  {
    "text": "these levels of hierarchy\nin your head. It's not straight scalar\nprogramming anymore. And if you think of it that way\nyou're just not going to",
    "start": "3431250",
    "end": "3438070"
  },
  {
    "text": "get the performance that you're\nlooking for period. ",
    "start": "3438070",
    "end": "3444599"
  },
  {
    "text": "Another consideration\nis this local store. Each little store is\n256 kilobytes.",
    "start": "3444600",
    "end": "3450880"
  },
  {
    "text": "That's not a lot of space.  You have to think about how\nare you going to bring the",
    "start": "3450880",
    "end": "3457760"
  },
  {
    "text": "data in so that the chunks are\nbig enough, but not too big because if they're too big thing\nthen you won't be able",
    "start": "3457760",
    "end": "3463050"
  },
  {
    "text": "to get multibuffering. ",
    "start": "3463050",
    "end": "3468120"
  },
  {
    "text": "Let's back up a little\nbit more. The local store holds the data,\nbut it also holds the",
    "start": "3468120",
    "end": "3474640"
  },
  {
    "text": "code that you're running. So if you have 200 kilobytes of\ncode then you only have 56",
    "start": "3474640",
    "end": "3482350"
  },
  {
    "text": "kilobytes of data space. And if you want to have double\nbuffering that means you only have 25 kilobytes and then as\nSaman correctly points out",
    "start": "3482350",
    "end": "3495400"
  },
  {
    "text": "there's a problem with stack. So if you're going to have\nrecursion in your code or something nasty like that,\nyou're going to start pushing",
    "start": "3495400",
    "end": "3503549"
  },
  {
    "text": "stack variables off\nthe register file. So where do they go? They go in the local store.",
    "start": "3503550",
    "end": "3509130"
  },
  {
    "text": "What prevents the stack them\noverwriting your data?",
    "start": "3509130",
    "end": "3514200"
  },
  {
    "text": "Nothing. Nothing at all and that's\na big gotcha. I've seen over the past three\nyears maybe 30 separate",
    "start": "3514200",
    "end": "3522619"
  },
  {
    "text": "algorithms implemented on cell\nand I know of only one that was definitely doing that.",
    "start": "3522620",
    "end": "3528030"
  },
  {
    "text": "But you know, if there are 30\nin this class maybe you're going to be the one that\nthat happens to. So you have to be aware\nof that and you have",
    "start": "3528030",
    "end": "3537970"
  },
  {
    "text": "to deal with it. So what you can do, is in the\nlocal store put some dead beef thing in there so that you can\nlook for an overwrite and that",
    "start": "3537970",
    "end": "3547400"
  },
  {
    "text": "will let you know that either\nyou have to make you code smalller or your data smaller\nor get rid of recursion.",
    "start": "3547400",
    "end": "3554890"
  },
  {
    "text": "On SPEs, recursion is\nkind of anathema. Inlining is good.",
    "start": "3554890",
    "end": "3559900"
  },
  {
    "text": "Inlining really can accelerate\nyour codes performance.",
    "start": "3559900",
    "end": "3565220"
  },
  {
    "text": "Oh yeah, it says stack\nright there. You're reading ahead\non me here.",
    "start": "3565220",
    "end": "3570330"
  },
  {
    "text": "Yes, so all three are in\nthere and you have to be aware of that. Now there is a memory management\nlibrary, very",
    "start": "3570330",
    "end": "3577000"
  },
  {
    "text": "lightweight library on the SPE\nand it's going to prevent your data from overwriting your code\nbecause once the code's",
    "start": "3577000",
    "end": "3582930"
  },
  {
    "text": "loaded that memory management\nlibrary knows where it is and it will stop. The date you from allocating,\ndoing a [? mul-add. ?]",
    "start": "3582930",
    "end": "3590830"
  },
  {
    "text": "over this code. But the stack's up for grabs. And that was again done\nbecause of power",
    "start": "3590830",
    "end": "3596270"
  },
  {
    "text": "considerations and real\nestate on the chip. It you want to have a chip\nthat's this big you can have",
    "start": "3596270",
    "end": "3602640"
  },
  {
    "text": "anything you want, but\nmanufacturing it's impossible. So things were removed and that\nwas one of the things",
    "start": "3602640",
    "end": "3608170"
  },
  {
    "text": "that's removed and that's one\nof the things you have to watch out for. And communication, we've talked\nabout this quite a bit.",
    "start": "3608170",
    "end": "3614010"
  },
  {
    "text": " I didn't mention this: the\nDMA transactions-- oh,",
    "start": "3614010",
    "end": "3620460"
  },
  {
    "text": "question in the back? AUDIENCE: Is there any\nreasonable possibility of doing things dynamically?",
    "start": "3620460",
    "end": "3626664"
  },
  {
    "start": "3626665",
    "end": "3632670"
  },
  {
    "text": "Is it at all conceivable to have\n[? bunks ?] that fetch in",
    "start": "3632670",
    "end": "3639000"
  },
  {
    "text": "new code or an allocator\nthat shuffles somehow? Or is it basically as soon as\nyou get to that point your",
    "start": "3639000",
    "end": "3645572"
  },
  {
    "text": "performance is going\nto go to hell. MICHAEL PERRONE: Yes, well if\nyou don't do anything about it, yes your performance\nwill go to hell. So there are two ways.",
    "start": "3645572",
    "end": "3652070"
  },
  {
    "text": "In research we came up with\nan overlay mechanism.",
    "start": "3652070",
    "end": "3657240"
  },
  {
    "text": "So this is what people used\nto do 20 years ago when processors were simple. Well, these processors are\nsimple, so going back to the",
    "start": "3657240",
    "end": "3663630"
  },
  {
    "text": "old technologies is actually\na good thing to do. So we had a video processing\nalgorithm where we took video",
    "start": "3663630",
    "end": "3673580"
  },
  {
    "text": "images, we had to decode them\nwith one SPE, we had to do some background subtraction\nto the next SPE.",
    "start": "3673580",
    "end": "3679630"
  },
  {
    "text": "We had to do some\nedge detection. And so each SPE was doing a\ndifferent thing, but even then the code was very big, the\nchunks of code were large.",
    "start": "3679630",
    "end": "3687850"
  },
  {
    "text": "And we were spending 27% of the\ntime swapping code out and bringing in new code.",
    "start": "3687850",
    "end": "3693370"
  },
  {
    "text": "Bad, very bad. Oh, and I should tell\nyou, spawning SPE threads is very painful. ",
    "start": "3693370",
    "end": "3700660"
  },
  {
    "text": "500,000 cycles, a\nmillion cycles-- I don't know. It varies depending on how the\nSPE feels that particular day.",
    "start": "3700660",
    "end": "3708040"
  },
  {
    "text": "And it's something to avoid. You really want to spawn a\nthread and keep it running for a long time.",
    "start": "3708040",
    "end": "3714240"
  },
  {
    "text": "So context switching\nis painful on cell. Using an overlay we got that\n27% overhead down to 1%.",
    "start": "3714240",
    "end": "3723420"
  },
  {
    "text": "So yes, you can do that. That tool is not in the SDK. It's on my to-do list to put\nit in the SDK, but the",
    "start": "3723420",
    "end": "3729640"
  },
  {
    "text": "compiler team at IBM tells\nme that the XLC compiler now does overlays. But it only does overlays at the\nfunction level, so if the",
    "start": "3729640",
    "end": "3738310"
  },
  {
    "text": "function still doesn't\nfit in the SPE you're dead in the water. And I think the compiler will\nsay, when it compiles it it'll",
    "start": "3738310",
    "end": "3744800"
  },
  {
    "text": "say this doesn't fit quietly\nand you'll never see that until you run and it doesn't\nload and you don't know what's going on.",
    "start": "3744800",
    "end": "3750359"
  },
  {
    "text": "So read your compiler outputs. The DMA granularity\nis 128 bytes.",
    "start": "3750360",
    "end": "3755530"
  },
  {
    "text": "This is the same, the data\ntransactions for Intel, for AMD they're all 128 byte\ndata envelopes.",
    "start": "3755530",
    "end": "3761950"
  },
  {
    "text": "So if you're doing a memory\naccess that's 4 bytes you're still using 128 bytes\nof bandwidth.",
    "start": "3761950",
    "end": "3768180"
  },
  {
    "text": "So this comes back to this\nnotion of getting a shopping list. You really want to think\nahead what you want to get,",
    "start": "3768180",
    "end": "3773740"
  },
  {
    "text": "bring it in, then use it\nso that you don't waste bandwidth; if you're\nbandwidth bound.",
    "start": "3773740",
    "end": "3778750"
  },
  {
    "text": "If you're not than you can be\na little more wasteful. But there's a guy,\nMike Acton--",
    "start": "3778750",
    "end": "3784099"
  },
  {
    "text": "you can find his website, I\nthink he has a website called www.cellperformance.org?",
    "start": "3784100",
    "end": "3791060"
  },
  {
    "text": "Net? Com? I don't know. AUDIENCE: Just a quick comment\n[UNINTELLIGIBLE PHRASE]. MICHAEL PERRONE:\nOh, he's good.",
    "start": "3791060",
    "end": "3796410"
  },
  {
    "text": "He's much better than me. You're really going\nto like him. His belief, and I believe him\nwholeheartedly, is it's all",
    "start": "3796410",
    "end": "3804460"
  },
  {
    "text": "about the data. We're coming to a point in\ncomputer science where the",
    "start": "3804460",
    "end": "3812930"
  },
  {
    "text": "code doesn't matter as much\nas getting the data where you need it. This is because of the latency\nout to main memory.",
    "start": "3812930",
    "end": "3820300"
  },
  {
    "text": "Memory's getting so far away\nthat having all these cycles is not that useful anymore if\nyou can't get the data.",
    "start": "3820300",
    "end": "3826210"
  },
  {
    "text": "So he always pushes\nthis point, you have to get the data. You have to think about the\ndata, good code starts with",
    "start": "3826210",
    "end": "3831510"
  },
  {
    "text": "the data, good code ends with\nthe data, good data structure start with the data. You have to think data,\ndata, data.",
    "start": "3831510",
    "end": "3838520"
  },
  {
    "text": "And I can't emphasize that\nenough because it's really very, very true for this\nprocessor and I believe, for",
    "start": "3838520",
    "end": "3843625"
  },
  {
    "text": "all the multicore processors\nyou're going to be seeing. ",
    "start": "3843625",
    "end": "3848730"
  },
  {
    "text": "The DMAs that you issue can be\n128 bytes or multiples of 128",
    "start": "3848730",
    "end": "3855090"
  },
  {
    "text": "bytes, up to 16 kilobytes\nper single DMA. There's also something called a\nDMA list, which is a list of",
    "start": "3855090",
    "end": "3860569"
  },
  {
    "text": "DMAs in local store and you tell\nthe DMA queue OK, here",
    "start": "3860570",
    "end": "3866140"
  },
  {
    "text": "are these 100 DMAs,\nspawn them off. That only takes one slot in\nthe DMA queue so it's an",
    "start": "3866140",
    "end": "3872760"
  },
  {
    "text": "efficient way of loading\nthe queue without overloading the queue.",
    "start": "3872760",
    "end": "3879200"
  },
  {
    "text": "Traffic controls, this is\nperhaps one of the trickier",
    "start": "3879200",
    "end": "3886079"
  },
  {
    "text": "things with cell because the\nsimulator doesn't help very much and the tools don't\nhelp very much.",
    "start": "3886080",
    "end": "3891560"
  },
  {
    "text": "Thinking about synchronization,\nDMA latency handling-- all those things\nare important. ",
    "start": "3891560",
    "end": "3899390"
  },
  {
    "text": "OK, so this is the last slide\nthat I'm going to do and then I have to run off. ",
    "start": "3899390",
    "end": "3905819"
  },
  {
    "text": "I want to give you a sense for\nthe process by which people-- my group in particular went\nthrough, especially when we",
    "start": "3905820",
    "end": "3912320"
  },
  {
    "text": "didn't even have hardware and we\ndidn't have compilers that worked nearly as well as they\ndo now and it's really very",
    "start": "3912320",
    "end": "3917880"
  },
  {
    "text": "ugly knifes and stones\nand sticks. You know, just kind\nof stone knifes.",
    "start": "3917880",
    "end": "3923750"
  },
  {
    "text": "That's what I'm thinking,\nvery primitive. But this way of thinking is\nstill very much true.",
    "start": "3923750",
    "end": "3930970"
  },
  {
    "text": "You have to think about\nyour code this way. You want to start, you have your\napplication, whatever it happens to be; you\nwant to do an algorithmic complexity study.",
    "start": "3930970",
    "end": "3938079"
  },
  {
    "text": "Is this order n squared,\nis this log n? Where are the bottlenecks? What do I expect to\nbe bottlenecks?",
    "start": "3938080",
    "end": "3945160"
  },
  {
    "text": "Then I want to do data\nlayout/locality. Now this is the data, data, data\napproach of Mike Acton.",
    "start": "3945160",
    "end": "3950359"
  },
  {
    "text": " You want to think\nabout the data. Where is it?",
    "start": "3950360",
    "end": "3955540"
  },
  {
    "text": "How can you structure your data\nso that it's going to be efficiently positioned\nfor when you need it?",
    "start": "3955540",
    "end": "3961550"
  },
  {
    "text": "And then you start with an\nexperimental petitioning of the algorithm. You want to break it up between\nthe pieces that you",
    "start": "3961550",
    "end": "3968050"
  },
  {
    "text": "believe are scalar and remain\nscalar, leave those on the SPE and the ones that can\nbe paralellized.",
    "start": "3968050",
    "end": "3974460"
  },
  {
    "text": "Those are the ones that are\ngoing to go on the SPE. You have the think conceptually\nabout partitioning that out.",
    "start": "3974460",
    "end": "3981730"
  },
  {
    "text": "And then run it on\nthe PPE anyway. You want to have a\nbaseline there.",
    "start": "3981730",
    "end": "3987390"
  },
  {
    "text": "Then you have this PPE scalar\ncode and PPE control code. This PPE scalar code you want to\nthen push down to the SPEs.",
    "start": "3987390",
    "end": "3995230"
  },
  {
    "text": "So now you're going to add\nstuff for communication, synchronization, and\nlatency handling.",
    "start": "3995230",
    "end": "4000440"
  },
  {
    "text": "So you have the spawn threads. The [? RAIDs ?] have to be told where the data\nis, they have to get their",
    "start": "4000440",
    "end": "4007109"
  },
  {
    "text": "code, they have to run their\ncode, they have to then start pulling in the data, synchronize\nwith the other SPEs and then latency handling\nwith multibuffering of the",
    "start": "4007110",
    "end": "4015619"
  },
  {
    "text": "data so that you can be doing\ncomputing and reading data simultaneously.",
    "start": "4015620",
    "end": "4021020"
  },
  {
    "text": "Then you have your first\nparallel code that's running.",
    "start": "4021020",
    "end": "4026970"
  },
  {
    "text": "Now the compiler, the XLC\ncompiler, GCC compiler--",
    "start": "4026970",
    "end": "4032400"
  },
  {
    "text": "well, the XLC compiler I know\nfor certain will do some automatic SIMDization. if you put the auto\nSIMD flag on.",
    "start": "4032400",
    "end": "4038080"
  },
  {
    "text": "Does GCC compiler do that? PROFESSOR:\n[UNINTELLIGIBLE PHRASE] ",
    "start": "4038080",
    "end": "4043300"
  },
  {
    "text": "MICHAEL PERRONE: OK, so I\ndon't know if the GCC compiler does that. So that can be done by hand,\nbut sometimes that works,",
    "start": "4043300",
    "end": "4053690"
  },
  {
    "text": "sometimes it doesn't. And it really depends on how\ncomplex the algorithm. If it's a very regular code,\nlike a matrix-matrix multiply.",
    "start": "4053690",
    "end": "4059530"
  },
  {
    "text": "You'll see that the compiler\ncan do fairly well if the block sizes are right and all.",
    "start": "4059530",
    "end": "4065590"
  },
  {
    "text": "But if you have something that's\nmore irregular then you may find that doing it by\nhand is really required.",
    "start": "4065590",
    "end": "4073360"
  },
  {
    "text": "And so this step here could\nbe done with the compiler initially to see if you're\ngetting the performance that",
    "start": "4073360",
    "end": "4078700"
  },
  {
    "text": "you think you should be getting\nfrom that algorithmic complexity study. You should see that\ntype of scaling.",
    "start": "4078700",
    "end": "4084420"
  },
  {
    "text": "You can look at the CPI and\nsee how many cycles per instruction you're getting. Each SPE should be\ngetting 0.5.",
    "start": "4084420",
    "end": "4091200"
  },
  {
    "text": "You should be able to get two\ninstructions per cycle. ",
    "start": "4091200",
    "end": "4096310"
  },
  {
    "text": "Very few codes actually\nget exactly-- you can get down to 5.8 or\nsomething like that, but I",
    "start": "4096310",
    "end": "4107180"
  },
  {
    "text": "think if you can get to\n1 you're doing well. If you get to 2 there's probably\nmore you can be doing",
    "start": "4107180",
    "end": "4112390"
  },
  {
    "text": "and if you're above 2\nthere's something wrong with your code. It may be the algorithm. It may be just a poorly\nchosen algorithm.",
    "start": "4112390",
    "end": "4119400"
  },
  {
    "text": " But that's where you\ncan talk to me. I want to make myself available\nto everyone in the",
    "start": "4119400",
    "end": "4126009"
  },
  {
    "text": "class or in my department\nas well. We're very enthusiastic about\nworking with research groups",
    "start": "4126010",
    "end": "4133170"
  },
  {
    "text": "in universities to develop new\ntools, new methods and if you",
    "start": "4133170",
    "end": "4139230"
  },
  {
    "text": "can help me, I can help you. I think it works very well. ",
    "start": "4139230",
    "end": "4144710"
  },
  {
    "text": "Then once you've done this,\nyou may find that what you originally thought for the\ncomplexity or the layout",
    "start": "4144710",
    "end": "4151000"
  },
  {
    "text": "wasn't quite accurate, so you\nneed to then go do some additional rebalancing. Maybe change your block sizes.",
    "start": "4151000",
    "end": "4157060"
  },
  {
    "text": "You know, maybe you had 64 by 64\nblocks, now you need 32 by 64 or 48 by whatever-- some\nreadjustment to match what you",
    "start": "4157060",
    "end": "4165799"
  },
  {
    "text": "have, And then you may want to\nreevaluate the data movement. And then you know, in many\ncases you'll be done, but",
    "start": "4165800",
    "end": "4173100"
  },
  {
    "text": "you're looking at your cycles\nper instruction or your speed up and you're not seeing exactly\nwhat you expected, so",
    "start": "4173100",
    "end": "4179960"
  },
  {
    "text": "you can start looking at other\noptimization considerations. Like using the vector unit,\nthe VMX unit on the cell",
    "start": "4179960",
    "end": "4186210"
  },
  {
    "text": "processor, on the PPE. Looking for system bottlenecks\nand this is actually, I have",
    "start": "4186210",
    "end": "4193759"
  },
  {
    "text": "found the biggest problem. Trying to identify where the DMA\nbottlenecks are happening",
    "start": "4193760",
    "end": "4199730"
  },
  {
    "text": "is kind of devilishly hard. We don't have good tools for\nthat, so you really have to",
    "start": "4199730",
    "end": "4205100"
  },
  {
    "text": "think hard and come up with\ninteresting kind of experiments for your code to\ntrack down these bottlenecks.",
    "start": "4205100",
    "end": "4211260"
  },
  {
    "text": " And then load balancing. If you look at these SPEs, I\ntold you they're completely",
    "start": "4211260",
    "end": "4217850"
  },
  {
    "text": "independent. You can have them all running\nthe same code or they could be running all different code. They could be daisy chained so\nthat this one feeds, this one",
    "start": "4217850",
    "end": "4224310"
  },
  {
    "text": "feeds that one, feeds\nthat one. If you do that daisy chaining\nyou may find out there's a bottleneck. That this SPE takes three\ntimes as long",
    "start": "4224310",
    "end": "4231540"
  },
  {
    "text": "as any of the others. So make that use 3 SPEs and have\nthis SPE feed these 3.",
    "start": "4231540",
    "end": "4238540"
  },
  {
    "text": "So you have to do some load\nbalancing and thinking about how many SPEs really need\nto be dedicated to each of the tasks.",
    "start": "4238540",
    "end": "4246510"
  },
  {
    "text": "Now that's the end of my talk. I think that gives you a good\nsense of where we have been,",
    "start": "4246510",
    "end": "4254900"
  },
  {
    "text": "where we are now, and\nwhere we're going. And I hope that if was good,\neducational, and I'll make",
    "start": "4254900",
    "end": "4261420"
  },
  {
    "text": "myself available to you\nguys in the future. And if you have questions-- PROFESSOR: Thank you. I know you have to\ncatch a flight.",
    "start": "4261420",
    "end": "4270140"
  },
  {
    "text": "How much time do have\nfor questions? MICHAEL PERRONE: Not much. I leave at 1:10. So I should be there by 12:00.",
    "start": "4270140",
    "end": "4276750"
  },
  {
    "text": "PROFESSOR: OK. So [UNINTELLIGIBLE] at some time. MICHAEL PERRONE:\nMy car is out-- PROFESSOR: OK, so we'll have\nabout 5 minutes questions.",
    "start": "4276750",
    "end": "4282770"
  },
  {
    "text": "OK, so I know this\ntalk is early. We haven't gotten a lot of\nbasics so there might be a lot of things kind of going above\nyour head, but we'll slowly",
    "start": "4282770",
    "end": "4290940"
  },
  {
    "text": "get back to it. So questions? AUDIENCE: You mentioned\nthat SPEs would",
    "start": "4290940",
    "end": "4298190"
  },
  {
    "text": "be able to run kernel. Is there a microkernel that you\ncould install on them so",
    "start": "4298190",
    "end": "4303517"
  },
  {
    "text": "that you could begin\nexperimenting with MPI type structures? MICHAEL PERRONE: Not\nthat I'm aware of.",
    "start": "4303517",
    "end": "4309450"
  },
  {
    "text": "We did look at something called\nMicroMPI, where we were using kind of a very watered\ndown MPI implementation for",
    "start": "4309450",
    "end": "4317290"
  },
  {
    "text": "the SPEs in the transactions. I don't recommend it. What I recommend is you have a\ncluster say, a thousand node",
    "start": "4317290",
    "end": "4327060"
  },
  {
    "text": "cluster and the code today,\nthe legacy code that's out there runs some process\non this node.",
    "start": "4327060",
    "end": "4334400"
  },
  {
    "text": "Take that process, don't try to\npush MPI further down, but just try to subpartition that\nprocess and let the PPE handle",
    "start": "4334400",
    "end": "4344940"
  },
  {
    "text": "all the communication\noff board, off node.",
    "start": "4344940",
    "end": "4351190"
  },
  {
    "text": "That's my recommendation. AUDIENCE: So MPI is running\non [UNINTELLIGIBLE]? MICHAEL PERRONE:\nYeah, Open MPI.",
    "start": "4351190",
    "end": "4357890"
  },
  {
    "text": "It's an open source MPI. It's just a recompile\nand it hasn't been tuned or optimized.",
    "start": "4357890",
    "end": "4364960"
  },
  {
    "text": "And it doesn't know anything\nabout the SPEs. You know, you let the PPE do\nall the communication or",
    "start": "4364960",
    "end": "4370989"
  },
  {
    "text": "handle the communications. When it finishes the task\nat hand then it can issue its MPI process.",
    "start": "4370990",
    "end": "4376967"
  },
  {
    "text": "AUDIENCE:\n[UNINTELLIGIBLE PHRASE]  MICHAEL PERRONE: Open NP is the\nmethodology where you take",
    "start": "4376967",
    "end": "4383849"
  },
  {
    "text": "existing scalar code and you\ninsert compiler pragmas to say this for loop can\nbe parallelized.",
    "start": "4383850",
    "end": "4390489"
  },
  {
    "text": "And you know, this data\nstructures are disjoint, so we don't have to worry about any\nkind of interference, side",
    "start": "4390490",
    "end": "4397410"
  },
  {
    "text": "effects of the data\nmanipulation. The compiler, the XLC compiler\nimplements open MP.",
    "start": "4397410",
    "end": "4404090"
  },
  {
    "text": "There's several components\nthat are required. One was a software cache where\nthey implemented a little",
    "start": "4404090",
    "end": "4410980"
  },
  {
    "text": "cache on the local store. And if it misses in that local\ncache it goes and gets it.",
    "start": "4410980",
    "end": "4416250"
  },
  {
    "text": "I don't know how well that\nperforms yet, but it exists.",
    "start": "4416250",
    "end": "4421910"
  },
  {
    "text": "There's the SIMDization. For a while, Open NP wasn't\nworking with auto SIMDization but now it does.",
    "start": "4421910",
    "end": "4428830"
  },
  {
    "text": "So it's getting there,\nfor so C it's there. I don't know what type\nof performance hit",
    "start": "4428830",
    "end": "4435205"
  },
  {
    "text": "you take for that. AUDIENCE: Probably runs\n[UNINTELLIGIBLE PHRASE] MICHAEL PERRONE: It's",
    "start": "4435205",
    "end": "4440449"
  },
  {
    "text": "XLC version that does that. I don't know if GCC does it.",
    "start": "4440450",
    "end": "4446699"
  },
  {
    "text": "But my recommendation is if you\nwant to use open NP, go ahead, take your scalar code,\nimplement it with those",
    "start": "4446700",
    "end": "4454010"
  },
  {
    "text": "pragmas, see what type of\nimprovement you get. Play around with it a little. If you find something that you\nexpect should be 10x better",
    "start": "4454010",
    "end": "4461710"
  },
  {
    "text": "and it's only 3x take\nthat bottleneck and implement it by hand. ",
    "start": "4461710",
    "end": "4471726"
  },
  {
    "text": "AUDIENCE:\n[UNINTELLIGIBLE PHRASE]  with the memory models and such\nthat the SPEs certainly",
    "start": "4471726",
    "end": "4479340"
  },
  {
    "text": "went back a couple of\ngenerations to a simpler [INAUDIBLE]. How come you went so far back\nrather to just say,",
    "start": "4479340",
    "end": "4484511"
  },
  {
    "text": "segmentation. MICHAEL PERRONE: I don't\nknow the answer. I'm sorry. ",
    "start": "4484512",
    "end": "4490650"
  },
  {
    "text": "I suspect and most of these\nanswers come down to the same thing, it comes back to Sony.",
    "start": "4490650",
    "end": "4497210"
  },
  {
    "text": "Sony contracted with IBM,\ngave us a lot of money to make this thing. And they said we need\na Playstation 3.",
    "start": "4497210",
    "end": "4502330"
  },
  {
    "text": "We need this, this,\nthis, this. And so IBM was very focused\non providing those things. Now that that is delivered,\nPlaystation 3 is being sold",
    "start": "4502330",
    "end": "4510650"
  },
  {
    "text": "we're looking at\nother options. And if that's something that\nyou're interested in pursuing",
    "start": "4510650",
    "end": "4517560"
  },
  {
    "text": "you should talk to me. AUDIENCE: Among other things\nit seems to me that the lightweight mechanism for\nkeeping the stack from",
    "start": "4517560",
    "end": "4523622"
  },
  {
    "text": "stomping on other things -- PROFESSOR: I think that\nthis is very new area.",
    "start": "4523622",
    "end": "4533949"
  },
  {
    "text": "Before you put things in\nhardware, you need to have some kind of consensus, what's\nthe right way to do it?",
    "start": "4533950",
    "end": "4539190"
  },
  {
    "text": "This is a bare metal that\ngives you huge amount of opportunity but you give enough\nrope to hang yourself.",
    "start": "4539190",
    "end": "4544320"
  },
  {
    "text": " And the key thing is you can get\nall this performance and what will happen perhaps, in the\nnext few years is people",
    "start": "4544320",
    "end": "4552380"
  },
  {
    "text": "come up to consensus\nsaying, look, everybody has to do this. Everybody needs MPI, everybody\nneeds this cache. And slowly, some of those\nfeatures will do a little bit",
    "start": "4552380",
    "end": "4560180"
  },
  {
    "text": "of a feature creep, so you're\ngoing to have they little bit of overhead, little bit\nless power efficient. But it will be much\neasier to program.",
    "start": "4560180",
    "end": "4565630"
  },
  {
    "text": "But this is kind of the bare\nmetal thing that to get and in some sense, it's a nice time\nbecause I think in 5 years if",
    "start": "4565630",
    "end": "4572409"
  },
  {
    "text": "you look at cell you won't have\nthis level of access. You'll have all this nice build\non top up in doing this",
    "start": "4572410",
    "end": "4580940"
  },
  {
    "text": "so, this is a unique\npositioning there. It's very hard to deal with, but\nalso on the other hand you get to see underneath.",
    "start": "4580940",
    "end": "4587639"
  },
  {
    "text": "You get to see without any\nkind of these sort of things in there. So my feeling is in a few years\nyou'll get all those",
    "start": "4587640",
    "end": "4593700"
  },
  {
    "text": "things put back. When and if we figure out how\nto deal with things like segmentation on the multicore\nwith very fine grain",
    "start": "4593700",
    "end": "4600640"
  },
  {
    "text": "communication and there's a lot\nof issues here that you need to figure out. But right now all those issues\nare [INAUDIBLE]. It's like OK, we don't\nknow how to do it.",
    "start": "4600640",
    "end": "4606450"
  },
  {
    "text": "Well, you go figure it out OK?",
    "start": "4606450",
    "end": "4612460"
  },
  {
    "text": "MICHAEL PERRONE: Thank\nyou very much. PROFESSOR: Thank you.  I don't have that much\nmore material.",
    "start": "4612460",
    "end": "4618070"
  },
  {
    "text": "So I have about 10,\n15 minutes. Do you guys need a break\nor should we just go",
    "start": "4618070",
    "end": "4623160"
  },
  {
    "text": "directly to the end? How many people say\nwe want a break?",
    "start": "4623160",
    "end": "4626430"
  }
]