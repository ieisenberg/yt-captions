[
  {
    "start": "0",
    "end": "18550"
  },
  {
    "text": "PROFESSOR: Well, last time Gerry\nreally let the cat out of the bag. He introduced the idea\nof assignment.",
    "start": "18550",
    "end": "26349"
  },
  {
    "text": "Assignment and state.",
    "start": "26350",
    "end": "33405"
  },
  {
    "text": " And as we started to see, the\nimplications of introducing",
    "start": "33405",
    "end": "41500"
  },
  {
    "text": "assignment and state into the\nlanguage are absolutely frightening. First of all, the substitution\nmodel of",
    "start": "41500",
    "end": "47239"
  },
  {
    "text": "evaluation breaks down. And we have to use this much\nmore complicated environment model and this very mechanistic\nthing with",
    "start": "47240",
    "end": "53780"
  },
  {
    "text": "diagrams, even to say what\nstatements in the programming language mean. And that's not a mere\ntechnical point.",
    "start": "53780",
    "end": "60260"
  },
  {
    "text": "See, it's not that we had this\nparticular substitution model and, well, it doesn't quite\nwork, so we have to do something else.",
    "start": "60260",
    "end": "65869"
  },
  {
    "text": "It's that nothing like the\nsubstitution model can work. Because suddenly, a variable\nis not just something that",
    "start": "65870",
    "end": "75950"
  },
  {
    "text": "stands for a value. A variable now has to somehow\nspecify a place",
    "start": "75950",
    "end": "82390"
  },
  {
    "text": "that holds a value. And the value that's in\nthat place can change. ",
    "start": "82390",
    "end": "90280"
  },
  {
    "text": "Or for instance, an expression\nlike f of x might have a side",
    "start": "90280",
    "end": "99110"
  },
  {
    "text": "effect in it. So if we say f of x and it has\nsome value, and then later we",
    "start": "99110",
    "end": "104160"
  },
  {
    "text": "say f of x again, we might\nget a different value depending on the order.",
    "start": "104160",
    "end": "109729"
  },
  {
    "text": "So suddenly, we have to think\nnot only about values but about time. ",
    "start": "109730",
    "end": "117970"
  },
  {
    "text": "And then things like pairs are\nno longer just their CARs and their CDRs. A pair now is not quite its CAR\nand its CDR. It's rather",
    "start": "117970",
    "end": "126310"
  },
  {
    "text": "its identity. So a pair has identity.",
    "start": "126310",
    "end": "131650"
  },
  {
    "text": "It's an object. ",
    "start": "131650",
    "end": "141329"
  },
  {
    "text": "And two pairs that have the same\nCAR and CDR might be the same or different, because\nsuddenly we have to worry",
    "start": "141330",
    "end": "149650"
  },
  {
    "text": "about sharing. ",
    "start": "149650",
    "end": "154959"
  },
  {
    "text": "So all of these things enter\nas soon as we introduce assignment.",
    "start": "154960",
    "end": "160480"
  },
  {
    "text": "See, this is a really far cry\nfrom where we started with substitution. It's a technically harder way\nof looking at things because",
    "start": "160480",
    "end": "170420"
  },
  {
    "text": "we have to think more\nmechanistically about our programming language. We can't just think about\nit as mathematics.",
    "start": "170420",
    "end": "175959"
  },
  {
    "text": "It's philosophically harder,\nbecause suddenly there are all these funny issues about what\ndoes it mean that something",
    "start": "175960",
    "end": "182020"
  },
  {
    "text": "changes or that two things\nare the same. And also, it's programming\nharder, because as Gerry",
    "start": "182020",
    "end": "187910"
  },
  {
    "text": "showed last time, there are all\nthese bugs having to do with bad sequencing and aliasing\nthat just don't exist",
    "start": "187910",
    "end": "194420"
  },
  {
    "text": "in a language where we don't\nworry about objects. Well, how'd we get\ninto this mess?",
    "start": "194420",
    "end": "203635"
  },
  {
    "text": "Remember what we did, the reason\nwe got into this is because we were looking to\nbuild modular systems. We",
    "start": "203635",
    "end": "215750"
  },
  {
    "text": "wanted to build systems that\nfall apart into chunks that seem natural.",
    "start": "215750",
    "end": "222760"
  },
  {
    "text": "So for instance, we want to take\na random number generator and package up the state of that\nrandom number generator",
    "start": "222760",
    "end": "228659"
  },
  {
    "text": "inside of it so that we can\nseparate the idea of picking random numbers from the general\nMonte Carlo strategy",
    "start": "228660",
    "end": "236640"
  },
  {
    "text": "of estimating something and\nseparate that from the particular way that you work\nwith random numbers in that",
    "start": "236640",
    "end": "243060"
  },
  {
    "text": "formula developed by\nCesaro for pi. And similarly, when we go off\nand construct some models of",
    "start": "243060",
    "end": "251400"
  },
  {
    "text": "things, if we go off and model\na system that we see in the real world, we'd like our\nprogram to break into natural",
    "start": "251400",
    "end": "259049"
  },
  {
    "text": "pieces, pieces that mirror the\nparts of the system that we see in the real world.",
    "start": "259050",
    "end": "264900"
  },
  {
    "text": "So for example, if we look at\na digital circuit, we say, gee, there's a circuit and\nit has a piece and",
    "start": "264900",
    "end": "273910"
  },
  {
    "text": "it has another piece. ",
    "start": "273910",
    "end": "280100"
  },
  {
    "text": "And these different pieces\nsort of have identity. They have state.",
    "start": "280100",
    "end": "285550"
  },
  {
    "text": "And the state sits\non these wires. And we think of this piece as\nan object that's different",
    "start": "285550",
    "end": "291020"
  },
  {
    "text": "from that as an object. And when we watch the system\nchange, we think about a signal coming in here and\nchanging a state that might be",
    "start": "291020",
    "end": "297500"
  },
  {
    "text": "here and going here and\ninteracting with a state that might be stored there,\nand so on and so on. ",
    "start": "297500",
    "end": "306860"
  },
  {
    "text": "So what we'd like is we'd like\nto build in the computer",
    "start": "306860",
    "end": "312759"
  },
  {
    "text": "systems that fall into pieces\nthat mirror our view of reality, of the way that the\nactual systems we're modeling",
    "start": "312760",
    "end": "319870"
  },
  {
    "text": "seem to fall into pieces. Well, maybe the reason that\nbuilding systems like this",
    "start": "319870",
    "end": "328970"
  },
  {
    "text": "seems to introduce such\ntechnical complications has nothing to do with computers. See, maybe the real reason that\nwe pay such a price to",
    "start": "328970",
    "end": "337960"
  },
  {
    "text": "write programs that mirror our\nview of reality is that we have the wrong view\nof reality.",
    "start": "337960",
    "end": "344550"
  },
  {
    "text": "See, maybe time is just\nan illusion, and nothing ever changes.",
    "start": "344550",
    "end": "350150"
  },
  {
    "text": "See, for example, if I take this\nchalk, and we say, gee, this is an object and\nit has a state.",
    "start": "350150",
    "end": "355820"
  },
  {
    "text": "At each moment it has a position\nand a velocity. And if we do something,\nthat state can change.",
    "start": "355820",
    "end": "361240"
  },
  {
    "text": " But if you studied any\nrelativity, for instance, you",
    "start": "361240",
    "end": "367900"
  },
  {
    "text": "know that you don't think of\nthe path of that chalk as something that goes on\ninstant by instant. It's more insightful to think\nof that whole chalk's",
    "start": "367900",
    "end": "373870"
  },
  {
    "text": "existence as a path\nin space-time. that's all splayed out. There aren't individual\npositions and velocities.",
    "start": "373870",
    "end": "379840"
  },
  {
    "text": "There's just its unchanging\nexistence in space-time. Similarly, if we look at this\nelectrical system, if we",
    "start": "379840",
    "end": "388080"
  },
  {
    "text": "imagine this electrical system\nis implementing some sort of signal processing system, the\nsignal processing engineer who",
    "start": "388080",
    "end": "395730"
  },
  {
    "text": "put that thing together doesn't\nthink of it as, well, at each instance there's\na voltage coming in.",
    "start": "395730",
    "end": "401490"
  },
  {
    "text": "And that translates\ninto something. And that affects the state over\nhere, which changes the state over here.",
    "start": "401490",
    "end": "406810"
  },
  {
    "text": "Nobody putting together a\nsignal processing system thinks about it like that. Instead, you say there's\nthis signal that's",
    "start": "406810",
    "end": "416830"
  },
  {
    "text": "splayed out over time. And if this is acting as a\nfilter, this whole thing transforms this whole thing for\nsome sort of other output.",
    "start": "416830",
    "end": "429570"
  },
  {
    "text": "You don't think of it as what's\nhappening instant by instant as the state\nof these things. And somehow you think of this\nbox as a whole thing, not as",
    "start": "429570",
    "end": "437990"
  },
  {
    "text": "little pieces sending messages\nof state to each other at particular instants. ",
    "start": "437990",
    "end": "448250"
  },
  {
    "text": "Well, today we're going to\nlook at another way to decompose systems that's more\nlike the signal processing",
    "start": "448250",
    "end": "454260"
  },
  {
    "text": "engineer's view of the world\nthan it is like thinking about objects that communicate\nsending messages.",
    "start": "454260",
    "end": "461129"
  },
  {
    "text": "That's called stream\nprocessing. ",
    "start": "461130",
    "end": "474570"
  },
  {
    "text": "And we're going to start by\nshowing how we can make our",
    "start": "474570",
    "end": "481790"
  },
  {
    "text": "programs more uniform and see\na lot more commonality if we",
    "start": "481790",
    "end": "488550"
  },
  {
    "text": "throw out of these programs\nwhat you might say is an inordinate concern with\nworrying about time.",
    "start": "488550",
    "end": "497210"
  },
  {
    "text": "Let me start by comparing\ntwo procedures. ",
    "start": "497210",
    "end": "503260"
  },
  {
    "text": "The first one does this. We imagine that there's\na tree. ",
    "start": "503260",
    "end": "510400"
  },
  {
    "text": "Say there's a tree\nof integers. It's a binary tree. ",
    "start": "510400",
    "end": "519099"
  },
  {
    "text": "So it looks like this. And there's integers in\neach of the nodes.",
    "start": "519100",
    "end": "524990"
  },
  {
    "text": "And what we would like to\ncompute is for each odd number",
    "start": "524990",
    "end": "531000"
  },
  {
    "text": "sitting here, we'd like to find\nthe square and then sum up all those squares.",
    "start": "531000",
    "end": "537210"
  },
  {
    "text": "Well, that should be a familiar\nkind of thing. There's a recursive strategy\nfor doing it.",
    "start": "537210",
    "end": "542930"
  },
  {
    "text": "We look at each leaf, and\neither it's going to contribute the square of\nthe number if it's odd or 0 if it's even.",
    "start": "542930",
    "end": "548680"
  },
  {
    "text": "And then recursively, we can say\nat each tree, the sum of all of them is the sum coming\nfrom the right branch and the",
    "start": "548680",
    "end": "555330"
  },
  {
    "text": "left branch, and recursively\ndown through the nodes. And that's a familiar way of\nthinking about programming.",
    "start": "555330",
    "end": "560360"
  },
  {
    "text": "Let's actually look at\nthat on the slide. We say to sum the odd squares\nin a tree, well, there's a",
    "start": "560360",
    "end": "567960"
  },
  {
    "text": "test. Either it's a leaf node,\nand we're going to check to see if it's an integer, and then\neither it's odd, in which",
    "start": "567960",
    "end": "574710"
  },
  {
    "text": "we take the square,\nor else it's 0. And then the sum of the whole\nthing is the sum coming from",
    "start": "574710",
    "end": "580259"
  },
  {
    "text": "the left branch and\nthe right branch. ",
    "start": "580260",
    "end": "586339"
  },
  {
    "text": "OK, well, let me contrast that\nwith a second problem.",
    "start": "586340",
    "end": "591560"
  },
  {
    "text": "Suppose I give you an integer\nn, and then some function to compute of the first of each\ninteger in 1 through n.",
    "start": "591560",
    "end": "599270"
  },
  {
    "text": "And then I want to collect\ntogether in a list all those function values that satisfy\nsome property.",
    "start": "599270",
    "end": "605600"
  },
  {
    "text": "That's a general\nkind of thing. Let's say to be specific, let's\nimagine that for each integer, k, we're\ngoing to compute",
    "start": "605600",
    "end": "611270"
  },
  {
    "text": "the k Fibonacci number. And then we'll see which of\nthose are odd and assemble",
    "start": "611270",
    "end": "617550"
  },
  {
    "text": "those into a list. So here's a procedure\nthat does that. ",
    "start": "617550",
    "end": "623730"
  },
  {
    "text": "Find the odd Fibonacci numbers\namong the first n. And here is a standard loop the\nway we've been writing it.",
    "start": "623730",
    "end": "628910"
  },
  {
    "text": "This is a recursion. It's a loop on k, and says if\nk is bigger than n, it's the empty list. Otherwise we compute\nthe k-th Fibonacci",
    "start": "628910",
    "end": "636990"
  },
  {
    "text": "number, call that f. If it's odd, we CONS it on\nto the list starting",
    "start": "636990",
    "end": "645180"
  },
  {
    "text": "with the next one. And otherwise, we just\ntake the next one.",
    "start": "645180",
    "end": "650390"
  },
  {
    "text": "And this is the standard\nway we've been writing iterative loops. And we start off calling\nthat loop with 1.",
    "start": "650390",
    "end": "657600"
  },
  {
    "text": "OK, so there are\ntwo procedures. Those procedures look\nvery different.",
    "start": "657600",
    "end": "662899"
  },
  {
    "text": "They have very different\nstructures. Yet from a certain point of\nview, those procedures are really doing very much\nthe same thing.",
    "start": "662900",
    "end": "671330"
  },
  {
    "text": "So if I was talking like a\nsignal processing engineer, what I might say is that the\nfirst procedure enumerates the",
    "start": "671330",
    "end": "685730"
  },
  {
    "text": "leaves of a tree. ",
    "start": "685730",
    "end": "691160"
  },
  {
    "text": "And then we can think of a\nsignal coming out of that, which is all the leaves. We'll filter them to see which\nones are odd, put them through",
    "start": "691160",
    "end": "703970"
  },
  {
    "text": "some kind of filter. We'll then put them through\na kind of transducer.",
    "start": "703970",
    "end": "709000"
  },
  {
    "text": "And for each one of those\nthings, we'll take the square. ",
    "start": "709000",
    "end": "714200"
  },
  {
    "text": "And then we'll accumulate\nall of those. We'll accumulate them by\nsticking them together with",
    "start": "714200",
    "end": "720570"
  },
  {
    "text": "addition starting from 0. ",
    "start": "720570",
    "end": "727140"
  },
  {
    "text": "That's the first program. The second program, I can\ndescribe in a very, very similar way. I'll say, we'll enumerate the\nnumbers on this interval, for",
    "start": "727140",
    "end": "737450"
  },
  {
    "text": "the interval 1 through n. ",
    "start": "737450",
    "end": "742500"
  },
  {
    "text": "We'll, for each one, compute the\nFibonacci number, put them",
    "start": "742500",
    "end": "748080"
  },
  {
    "text": "through a transducer. We'll then take the result\nof that, and we'll filter it for oddness.",
    "start": "748080",
    "end": "755976"
  },
  {
    "text": "And then we'll take those and\nput them into an accumulator. This time we'll build up a list,\nso we'll accumulate with",
    "start": "755976",
    "end": "761730"
  },
  {
    "text": "CONS starting from\nthe empty list.",
    "start": "761730",
    "end": "767110"
  },
  {
    "text": "So this way of looking at the\nprogram makes the two seem very, very similar. The problem is that that\ncommonality is completely",
    "start": "767110",
    "end": "775880"
  },
  {
    "text": "obscured when we look at the\nprocedures we wrote. Let's go back and look at some\nodd squares again, and say",
    "start": "775880",
    "end": "782670"
  },
  {
    "text": "things like, where's\nthe enumerator? Where's the enumerator\nin this program?",
    "start": "782670",
    "end": "788140"
  },
  {
    "text": "Well, it's not in one place. It's a little bit in this\nleaf-node test,",
    "start": "788140",
    "end": "795990"
  },
  {
    "text": "which is going to stop. It's a little bit in the\nrecursive structure of the thing itself. ",
    "start": "795990",
    "end": "803150"
  },
  {
    "text": "Where's the accumulator? The accumulator isn't\nin one place either. It's partly in this 0 and\npartly in this plus.",
    "start": "803150",
    "end": "812180"
  },
  {
    "text": "It's not there as a thing\nthat we can look at. Similarly, if we look at odd\nFibs, that's also, in some",
    "start": "812180",
    "end": "820550"
  },
  {
    "text": "sense, an enumerator and\nan accumulator, but it looks very different. Because partly, the enumerator\nis here in this greater than",
    "start": "820550",
    "end": "829259"
  },
  {
    "text": "sign in the test. And partly\nit's in this whole recursive structure in the loop, and\nthe way that we call it.",
    "start": "829260",
    "end": "835680"
  },
  {
    "text": "And then similarly, that's also\nmixed up in there with the accumulator, which is partly\nover there and partly",
    "start": "835680",
    "end": "841009"
  },
  {
    "text": "over there. So these very, very natural\npieces, these very natural",
    "start": "841010",
    "end": "849790"
  },
  {
    "text": "boxes here don't appear in our\nprograms. Because they're kind of mixed up. The programs don't chop things\nup in the right way.",
    "start": "849790",
    "end": "856290"
  },
  {
    "text": " Going back to this fundamental\nprinciple of computer science",
    "start": "856290",
    "end": "862240"
  },
  {
    "text": "that in order to control\nsomething, you need the name of it, we don't really have\ncontrol over thinking about",
    "start": "862240",
    "end": "867820"
  },
  {
    "text": "things this way because we don't\nhave our hands in them explicitly. We don't have a good language\nfor talking about them.",
    "start": "867820",
    "end": "875510"
  },
  {
    "text": "Well, let's invent an\nappropriate language in which",
    "start": "875510",
    "end": "882850"
  },
  {
    "text": "we can build these pieces. The key to the language is these\nguys, is what is these",
    "start": "882850",
    "end": "888650"
  },
  {
    "text": "things I called signals? What are these things that\nare flying on the arrows between the boxes? ",
    "start": "888650",
    "end": "896880"
  },
  {
    "text": "Well, those things are going to\nbe data structures called",
    "start": "896880",
    "end": "902840"
  },
  {
    "text": "streams. That's going\nto be the key to inventing this language.",
    "start": "902840",
    "end": "907980"
  },
  {
    "text": "What's a stream? Well, a stream is, like\nanything else, a data abstraction. So I should tell you what\nits selectors and",
    "start": "907980",
    "end": "915000"
  },
  {
    "text": "constructors are. For a stream, we're going to\nhave one constructor that's",
    "start": "915000",
    "end": "920185"
  },
  {
    "text": "called CONS-stream. ",
    "start": "920185",
    "end": "925690"
  },
  {
    "text": "CONS-stream is going to put two\nthings together to form a thing called a stream.",
    "start": "925690",
    "end": "932040"
  },
  {
    "text": "And then to extract things from\nthe stream, we're going to have a selector called\nthe head of the stream.",
    "start": "932040",
    "end": "938010"
  },
  {
    "text": "So if I have a stream, I\ncan take its head or I can take its tail.",
    "start": "938010",
    "end": "944720"
  },
  {
    "text": "And remember, I have to tell you\nGeorge's contract here to tell you what the axioms\nare that relate these.",
    "start": "944720",
    "end": "953160"
  },
  {
    "text": "And it's going to be for any\nx and y, if I form the",
    "start": "953160",
    "end": "964079"
  },
  {
    "text": "CONS-stream and take the head,\nthe head of CONS-stream of x",
    "start": "964080",
    "end": "971420"
  },
  {
    "text": "and y is going to be x and the\ntail of CONS-stream of x and y",
    "start": "971420",
    "end": "986589"
  },
  {
    "text": "is going to be y. So those are the constructor,\ntwo selectors for streams, and an axiom.",
    "start": "986590",
    "end": "994750"
  },
  {
    "text": "There's something fishy here. So you might notice that these\nare exactly the axioms for",
    "start": "994750",
    "end": "1001060"
  },
  {
    "text": "CONS, CAR, and CDR. If instead\nof writing CONS-stream I wrote",
    "start": "1001060",
    "end": "1006100"
  },
  {
    "text": "CONS and I said head was the\nCAR and tail was the CDR, those are exactly the\naxioms for pairs.",
    "start": "1006100",
    "end": "1012810"
  },
  {
    "text": "And in fact, there's\nanother thing here. We're going to have a thing\ncalled the-empty-stream, which",
    "start": "1012810",
    "end": "1022930"
  },
  {
    "text": "is like the-empty-list.",
    "start": "1022930",
    "end": "1028319"
  },
  {
    "text": "So why am I introducing\nthis terminology? Why don't I just keep talking\nabout pairs and lists? Well, we'll see.",
    "start": "1028319",
    "end": "1035510"
  },
  {
    "text": "For now, if you like, why don't\nyou just pretend that streams really are just a\nterminology for lists.",
    "start": "1035510",
    "end": "1041559"
  },
  {
    "text": "And we'll see in a little while\nwhy we want to keep this extra abstraction layer and\nnot just call them lists.",
    "start": "1041560",
    "end": "1048150"
  },
  {
    "text": " OK, now that we have streams, we\ncan start constructing the",
    "start": "1048150",
    "end": "1054860"
  },
  {
    "text": "pieces of the language to\noperate on streams. And there are a whole bunch of very useful\nthings that we could",
    "start": "1054860",
    "end": "1061330"
  },
  {
    "text": "start making. For instance, we'll make our map\nbox to take a stream, s,",
    "start": "1061330",
    "end": "1074850"
  },
  {
    "text": "and a procedure, and to generate\na new stream which",
    "start": "1074850",
    "end": "1080400"
  },
  {
    "text": "has as its elements the\nprocedure applied to all the successive elements of s.",
    "start": "1080400",
    "end": "1085666"
  },
  {
    "text": "In fact, we've seen\nthis before. This is the procedure map\nthat we did with lists.",
    "start": "1085666",
    "end": "1090950"
  },
  {
    "text": "And you see it's exactly map,\nexcept we're testing for empty-stream. Oh, I forgot to mention that. Empty-stream is like the null\ntest. So if it's empty, we",
    "start": "1090950",
    "end": "1099420"
  },
  {
    "text": "generate the empty stream. Otherwise, we form a new stream\nwhose first element is",
    "start": "1099420",
    "end": "1104700"
  },
  {
    "text": "the procedure applied to the\nhead of the stream, and whose rest is gotten by mapping along\nwith the procedure down",
    "start": "1104700",
    "end": "1111570"
  },
  {
    "text": "the tail of the stream. So that looks exactly like\nthe map procedure we looked at before.",
    "start": "1111570",
    "end": "1117030"
  },
  {
    "text": "Here's another useful thing. Filter, this is our\nfilter box. We're going to have a predicate\nand a stream.",
    "start": "1117030",
    "end": "1123890"
  },
  {
    "text": "We're going to make a new stream\nthat consists of all the elements of the\noriginal one that satisfy the predicate.",
    "start": "1123890",
    "end": "1130160"
  },
  {
    "text": "That's case analysis. When there's nothing\nin the stream, we return the empty stream.",
    "start": "1130160",
    "end": "1136280"
  },
  {
    "text": "We test the predicate on\nthe head of the stream. And if it's true, we add the\nhead of the stream onto the",
    "start": "1136280",
    "end": "1143520"
  },
  {
    "text": "result of filtering the\ntail of the stream. And otherwise, if that predicate\nwas false, we just",
    "start": "1143520",
    "end": "1150870"
  },
  {
    "text": "filter the tail of the stream. Right, so there's filter.",
    "start": "1150870",
    "end": "1156595"
  },
  {
    "text": "Let me run through a couple\nmore rather quickly. They're all in the book and\nyou can look at them. Let me just flash through.",
    "start": "1156595",
    "end": "1162110"
  },
  {
    "text": "Here's accumulate. Accumulate takes a way of\ncombining things and an",
    "start": "1162110",
    "end": "1167690"
  },
  {
    "text": "initial value in a stream and\nsticks them all together. If the stream's empty, it's\njust the initial value.",
    "start": "1167690",
    "end": "1173970"
  },
  {
    "text": "Otherwise, we combine the head\nof the stream with the result of accumulating the tail of the\nstream starting from the",
    "start": "1173970",
    "end": "1179550"
  },
  {
    "text": "initial value. So that's what I'd use to add\nup everything in the stream. I'd accumulate with plus.",
    "start": "1179550",
    "end": "1185830"
  },
  {
    "text": "How would I enumerate the\nleaves of a tree? Well, if the tree is just a leaf\nitself, I make something",
    "start": "1185830",
    "end": "1194530"
  },
  {
    "text": "which only has that\nnode in it. Otherwise, I append together the\nstuff of enumerating the",
    "start": "1194530",
    "end": "1201100"
  },
  {
    "text": "left branch and the\nright branch. And then append here is like the\nordinary append on lists.",
    "start": "1201100",
    "end": "1208130"
  },
  {
    "start": "1208130",
    "end": "1213190"
  },
  {
    "text": "You can look at that. That's analogous to the\nordinary procedure for appending two lists.",
    "start": "1213190",
    "end": "1219150"
  },
  {
    "text": "How would I enumerate\nan interval? This will take two integers, low\nand high, and generate a",
    "start": "1219150",
    "end": "1224500"
  },
  {
    "text": "stream of the integers going\nfrom low to high. And we can make a whole\nbunch of pieces.",
    "start": "1224500",
    "end": "1231890"
  },
  {
    "text": "So that's a little language of\ntalking about streams. Once we have streams, we can build\nthings for manipulating them.",
    "start": "1231890",
    "end": "1237670"
  },
  {
    "text": "Again, we're making\na language. And now we can start expressing things in this language.",
    "start": "1237670",
    "end": "1243060"
  },
  {
    "text": "Here's our original procedure\nfor summing the odd squares in a tree. And you'll notice it looks\nexactly now like the block",
    "start": "1243060",
    "end": "1252210"
  },
  {
    "text": "diagram, like the signal\nprocessing block diagram. So to sum the odd squares in a\ntree, we enumerate the leaves",
    "start": "1252210",
    "end": "1260230"
  },
  {
    "text": "of the tree. We filter that for oddness. We map that for squareness.",
    "start": "1260230",
    "end": "1266220"
  },
  {
    "text": " And we accumulate the result\nof that using addition,",
    "start": "1266220",
    "end": "1272460"
  },
  {
    "text": "starting from 0. So we can see the pieces\nthat we wanted. Similarly, the Fibonacci one,\nhow do we get the odd Fibs?",
    "start": "1272460",
    "end": "1282050"
  },
  {
    "text": "Well, we enumerate the interval\nfrom 1 to n, we map",
    "start": "1282050",
    "end": "1287900"
  },
  {
    "text": "along that, computing the\nFibonacci of each one. We filter the result of\nthose for oddness.",
    "start": "1287900",
    "end": "1294810"
  },
  {
    "text": "And we accumulate all of that\nstuff using CONS starting from the empty-list.",
    "start": "1294810",
    "end": "1303649"
  },
  {
    "text": "OK, what's the advantage\nof this? Well, for one thing, we now have\npieces that we can start",
    "start": "1303650",
    "end": "1310260"
  },
  {
    "text": "mixing and matching. So for instance, if I wanted to\nchange this, if I wanted to",
    "start": "1310260",
    "end": "1318230"
  },
  {
    "text": "compute the squares of the\nintegers and then filter them, all I need to do is pick up a\nstandard piece like this in",
    "start": "1318230",
    "end": "1323810"
  },
  {
    "text": "that square and put it in. Or if we wanted to do this whole\nFibonacci computation on",
    "start": "1323810",
    "end": "1330149"
  },
  {
    "text": "the leaves of a tree rather than\na sequence, all I need to do is replace this enumerator\nwith that one.",
    "start": "1330150",
    "end": "1338030"
  },
  {
    "text": "See, the advantage of this\nstream processing is that we're establishing-- this is one of the big themes\nof the course--",
    "start": "1338030",
    "end": "1345330"
  },
  {
    "text": "we're establishing conventional\ninterfaces that",
    "start": "1345330",
    "end": "1355570"
  },
  {
    "text": "allow us to glue things\ntogether. Things like map and filter are\na standard set of components",
    "start": "1355570",
    "end": "1361730"
  },
  {
    "text": "that we can start using for\npasting together programs in all sorts of ways. It allows us to see the\ncommonality of programs.",
    "start": "1361730",
    "end": "1370090"
  },
  {
    "text": "I just ought to mention, I've\nonly showed you two procedures. But let me emphasize that this\nway of putting things together",
    "start": "1370090",
    "end": "1377799"
  },
  {
    "text": "with maps, filters,\nand accumulators is very, very general. It's the generate and test\nparadigm for programs. And as",
    "start": "1377800",
    "end": "1388010"
  },
  {
    "text": "an example of that, Richard\nWaters, who was at MIT when he was a graduate student, as part\nof his thesis research",
    "start": "1388010",
    "end": "1394059"
  },
  {
    "text": "went and analyzed a large chunk\nof the IBM scientific subroutine library, and\ndiscovered that about 60% of",
    "start": "1394060",
    "end": "1402340"
  },
  {
    "text": "the programs in it could be\nexpressed exactly in terms using no more than what\nwe've put here--",
    "start": "1402340",
    "end": "1408940"
  },
  {
    "text": "map, filter, and accumulate. All right, let's take a break. ",
    "start": "1408940",
    "end": "1416620"
  },
  {
    "text": "Questions?  AUDIENCE: It seems like the\nessence of this whole thing is",
    "start": "1416620",
    "end": "1423033"
  },
  {
    "text": "just that you have a very\nuniform, simple data structure to work with, the stream.",
    "start": "1423033",
    "end": "1428380"
  },
  {
    "text": "PROFESSOR: Right. The essence is that you, again,\nit's this sense of conventional interfaces.",
    "start": "1428380",
    "end": "1433710"
  },
  {
    "text": "So you can start putting a\nlot of things together. And the stream is as you say,\nthe uniform data structure",
    "start": "1433710",
    "end": "1439830"
  },
  {
    "text": "that supports that. This is very much like\nAPL, by the way. APL is very much the same idea,\nexcept in APL, instead",
    "start": "1439830",
    "end": "1446330"
  },
  {
    "text": "of this stream, you have\narrays and vectors. And a lot of the power of APL is\nexactly the same reason of",
    "start": "1446330",
    "end": "1453565"
  },
  {
    "text": "the power of this. ",
    "start": "1453565",
    "end": "1459909"
  },
  {
    "text": "OK, thank you. Let's take a break. ",
    "start": "1459910",
    "end": "1497470"
  },
  {
    "text": "All right. We've been looking at ways of\norganizing computations using",
    "start": "1497470",
    "end": "1502830"
  },
  {
    "text": "streams. What I want to do now\nis just show you two somewhat more complicated examples\nof that.",
    "start": "1502830",
    "end": "1510810"
  },
  {
    "text": "Let's start by thinking about\nthe following kind of utility procedure that will\ncome in useful.",
    "start": "1510810",
    "end": "1516810"
  },
  {
    "text": "Suppose I've got a stream. And the elements of this stream\nare themselves streams.",
    "start": "1516810",
    "end": "1523730"
  },
  {
    "text": "So the first thing\nmight be 1, 2, 3. ",
    "start": "1523730",
    "end": "1532600"
  },
  {
    "text": "So I've got a stream. And each element of the stream\nis itself a stream.",
    "start": "1532600",
    "end": "1540100"
  },
  {
    "text": "And what I'd like to do is build\na stream that collects",
    "start": "1540100",
    "end": "1545580"
  },
  {
    "text": "together all of the elements,\npulls all of the elements out of these sub-streams and\nstrings them all",
    "start": "1545580",
    "end": "1550840"
  },
  {
    "text": "together in one thing. So just to show you the use of\nthis language, how easy it is,",
    "start": "1550840",
    "end": "1556220"
  },
  {
    "text": "call that flatten. And I can define to flatten this\nstream of streams. Well,",
    "start": "1556220",
    "end": "1573020"
  },
  {
    "text": "what is that? That's just an accumulation. I want to accumulate\nusing append, by",
    "start": "1573020",
    "end": "1585240"
  },
  {
    "text": "successively appending. So I accumulate using append\nstreams, starting with",
    "start": "1585240",
    "end": "1596590"
  },
  {
    "text": "the-empty-stream down that\nstream of streams.",
    "start": "1596590",
    "end": "1614370"
  },
  {
    "text": "OK, so there's an example of how\nyou can start using these higher order things to do some\ninteresting operations.",
    "start": "1614370",
    "end": "1620830"
  },
  {
    "text": "In fact, there's another\nuseful thing that I want to do. I want to define a procedure\ncalled flat-map, flat map of",
    "start": "1620830",
    "end": "1638700"
  },
  {
    "text": "some function and a stream. And what this is going\nto do is f will",
    "start": "1638700",
    "end": "1643919"
  },
  {
    "text": "be a stream of elements. f is going to be a function that\nfor each element in the",
    "start": "1643920",
    "end": "1648929"
  },
  {
    "text": "stream produces another\nstream. And what I want to do is take\nall of the elements and all of",
    "start": "1648930",
    "end": "1653950"
  },
  {
    "text": "those streams and combine\nthem together. So that's just going to be the\nflatten of map f down s.",
    "start": "1653950",
    "end": "1671350"
  },
  {
    "text": "Each time I apply f to an\nelement of s, I get a stream. If I map it all the way down, I\nget a stream of streams, and",
    "start": "1671350",
    "end": "1676690"
  },
  {
    "text": "I'll flatten that. Well, I want to use that to\nshow you a new way to do a",
    "start": "1676690",
    "end": "1684670"
  },
  {
    "text": "familiar kind of problem. The problem's going to be like a\nlot of problems you've seen,",
    "start": "1684670",
    "end": "1692309"
  },
  {
    "text": "although maybe not this\nparticular one. I'm going to give you\nan integer, n. ",
    "start": "1692310",
    "end": "1698480"
  },
  {
    "text": "And the problem is going to be\nfind all pairs and integers i",
    "start": "1698480",
    "end": "1711020"
  },
  {
    "text": "and j, between 0 and i, with j\nless than i, up to n, such",
    "start": "1711020",
    "end": "1722740"
  },
  {
    "text": "that i plus j is prime.",
    "start": "1722740",
    "end": "1731910"
  },
  {
    "text": " So for example, if n equals 6,\nlet's make a little table",
    "start": "1731910",
    "end": "1740520"
  },
  {
    "text": "here, i and j and i plus j.",
    "start": "1740520",
    "end": "1746640"
  },
  {
    "text": " So for, say, i equals 2 and\nj equals 1, I'd get 3.",
    "start": "1746640",
    "end": "1755519"
  },
  {
    "text": "And for i equals 3, I could\nhave j equals 2, and that would be 5.",
    "start": "1755520",
    "end": "1761210"
  },
  {
    "text": "And 4 and 1 would be 5 and so\non, up until i goes to 6.",
    "start": "1761210",
    "end": "1768399"
  },
  {
    "text": "And what I'd like to return is\nto produce a stream of all the",
    "start": "1768400",
    "end": "1773640"
  },
  {
    "text": "triples like this, let's\nsay i, j, and i plus j. So for each n, I want to\ngenerate this stream.",
    "start": "1773640",
    "end": "1781530"
  },
  {
    "text": "OK, well, that's easy. Let's build it up.",
    "start": "1781530",
    "end": "1787230"
  },
  {
    "text": "We start like this. We're going to say for\neach i, we're going",
    "start": "1787230",
    "end": "1795510"
  },
  {
    "text": "to generate a stream. For each i in the interval 1\nthrough n, we're going to generate a stream.",
    "start": "1795510",
    "end": "1800659"
  },
  {
    "text": "What's that stream\ngoing to be? We're going to start by\ngenerating all the pairs. So for each i, we're going to\ngenerate, for each j in the",
    "start": "1800660",
    "end": "1811840"
  },
  {
    "text": "interval 1 to i minus 1, we'll\ngenerate the pair, or the list",
    "start": "1811840",
    "end": "1819450"
  },
  {
    "text": "with two elements i and j.  So we map along the interval,\ngenerating the pairs.",
    "start": "1819450",
    "end": "1830712"
  },
  {
    "text": "And for each i, that generates\na stream of pairs. And we flatmap it. Now we have all the pairs\ni and j, such that i",
    "start": "1830712",
    "end": "1837390"
  },
  {
    "text": "is less than j. So that builds that. Now we're got to test them.",
    "start": "1837390",
    "end": "1842990"
  },
  {
    "text": "Well, we take that thing we just\nbuilt, the flatmap, and we filter it to see\nwhether the i--",
    "start": "1842990",
    "end": "1850090"
  },
  {
    "text": "see, we had an i and a j. i was the first thing in the\nlist, j was the second thing",
    "start": "1850090",
    "end": "1855180"
  },
  {
    "text": "in the list. So we have a\npredicate which says in that list of two elements\nis the sum of the",
    "start": "1855180",
    "end": "1860870"
  },
  {
    "text": "CAR and the CDR prime. And we filter that collection\nof pairs we just built.",
    "start": "1860870",
    "end": "1866539"
  },
  {
    "text": "So those are the\npairs we want. Now we go ahead and we take the\nresult of that filter and",
    "start": "1866540",
    "end": "1873340"
  },
  {
    "text": "we map along it, generating the\nlist i and j and i plus j.",
    "start": "1873340",
    "end": "1879610"
  },
  {
    "text": "And that's our procedure\nprime-sum-pairs. And then just to flash it up,\nhere's the whole procedure. ",
    "start": "1879610",
    "end": "1887945"
  },
  {
    "text": "A map, a filter, a flatmap. ",
    "start": "1887945",
    "end": "1894850"
  },
  {
    "text": "There's the whole thing,\neven though this isn't particularly readable. It's just expanding\nthat flatmap.",
    "start": "1894850",
    "end": "1900000"
  },
  {
    "text": "So there's an example which\nillustrates the general point",
    "start": "1900000",
    "end": "1905090"
  },
  {
    "text": "that nested loops in this\nprocedure start looking like compositions of flatmaps of\nflatmaps of flatmaps of maps",
    "start": "1905090",
    "end": "1912370"
  },
  {
    "text": "and things. So not only can we enumerate\nindividual things, but by",
    "start": "1912370",
    "end": "1917899"
  },
  {
    "text": "using flatmaps, we can do what\nwould correspond to nested loops in most other languages.",
    "start": "1917900",
    "end": "1923230"
  },
  {
    "text": "Of course, it's pretty awful to\nkeep writing these flatmaps of flatmaps of flatmaps.",
    "start": "1923230",
    "end": "1928410"
  },
  {
    "text": "Prime-sum-pairs you saw looked\nfairly complicated, even",
    "start": "1928410",
    "end": "1933830"
  },
  {
    "text": "though the individual\npieces were easy. So what you can do, if you\nlike, is introduced some syntactic sugar that's\ncalled collect.",
    "start": "1933830",
    "end": "1941040"
  },
  {
    "text": "And collect is just an\nabbreviation for that nest of flatmaps and filters arranged\nin that particular way.",
    "start": "1941040",
    "end": "1946159"
  },
  {
    "text": "Here's prime-sum-pairs again,\nwritten using collect. It says to find all those pairs,\nI'm going to collect",
    "start": "1946160",
    "end": "1952670"
  },
  {
    "text": "together a result, which is the\nlist i, j, and i plus j,",
    "start": "1952670",
    "end": "1960910"
  },
  {
    "text": "that's going to be generated as\ni runs through the interval from 1 to n and as j runs\nthrough the interval from 1 to",
    "start": "1960910",
    "end": "1971440"
  },
  {
    "text": "i minus 1, such that\ni plus j is prime.",
    "start": "1971440",
    "end": "1978039"
  },
  {
    "text": "So I'm not going to say what\ncollect does in general. You can look at that by looking\nat it in the book.",
    "start": "1978040",
    "end": "1983419"
  },
  {
    "text": "But pretty much, you can see\nthat the pieces of this are the pieces of that original\nprocedure I wrote.",
    "start": "1983420",
    "end": "1988820"
  },
  {
    "text": "And this collect is just some\nsyntactic sugar for automatically generating that\nnest of flatmaps and flatmaps.",
    "start": "1988820",
    "end": "1996310"
  },
  {
    "text": "OK, well, let me do one more\nexample that shows you the same kind of thing.",
    "start": "1996310",
    "end": "2002120"
  },
  {
    "text": "Here's a very famous problem\nthat's used to illustrate a lot of so-called backtracking\ncomputer algorithms. This is",
    "start": "2002120",
    "end": "2008980"
  },
  {
    "text": "the eight queens problem. This is a chess board. And the eight queens problem\nsays, find a way to put down",
    "start": "2008980",
    "end": "2014570"
  },
  {
    "text": "eight queens on a chess board\nso that no two are attacking each other. And here's a particular\nsolution to the",
    "start": "2014570",
    "end": "2019685"
  },
  {
    "text": "eight queens problem. So I have to make sure to put\ndown queens so that no two are in the same row or the\nsame column or sit",
    "start": "2019685",
    "end": "2028570"
  },
  {
    "text": "along the same diagonal. Now, there's sort of a standard\nway of doing that.",
    "start": "2028570",
    "end": "2036400"
  },
  {
    "text": " Well, first we need\nto do is below the",
    "start": "2036400",
    "end": "2043200"
  },
  {
    "text": "surface, at George's level. We have to find some way to\nrepresent a board, and represent positions. And we'll not worry\nabout that.",
    "start": "2043200",
    "end": "2049800"
  },
  {
    "text": "But let's assume that there's\na predicate called safe. ",
    "start": "2049800",
    "end": "2056040"
  },
  {
    "text": "And what safe is going to do is\ngoing to say given that I have a bunch of queens down on\nthe chess board, is it OK to",
    "start": "2056040",
    "end": "2062520"
  },
  {
    "text": "put a queen in this\nparticular spot? So safe is going to take\na row and a column.",
    "start": "2062520",
    "end": "2072888"
  },
  {
    "text": "That's going to be a place where\nI'm going to try and put down the next queen, and\nthe rest of positions.",
    "start": "2072889",
    "end": "2082370"
  },
  {
    "text": " And what safe will say is given\nthat I already have",
    "start": "2082370",
    "end": "2088679"
  },
  {
    "text": "queens down in these positions,\nis it safe to put",
    "start": "2088679",
    "end": "2093919"
  },
  {
    "text": "another queen down in that\nrow and that column? And let's not worry\nabout that.",
    "start": "2093920",
    "end": "2099360"
  },
  {
    "text": "That's George's problem. and\nit's not hard to write. You just have to check whether\nthis thing contains any things",
    "start": "2099360",
    "end": "2106349"
  },
  {
    "text": "on that row or that column\nor in that diagonal. Now, how would you organize\nthe program given that?",
    "start": "2106350",
    "end": "2113590"
  },
  {
    "text": "And there's sort of a\ntraditional way to organize it called backtracking.",
    "start": "2113590",
    "end": "2120116"
  },
  {
    "text": "And it says, well, let's think\nabout all the ways of putting",
    "start": "2120116",
    "end": "2127570"
  },
  {
    "text": "the first queen down in\nthe first column. There are eight ways.",
    "start": "2127570",
    "end": "2132580"
  },
  {
    "text": "Well, let's say try\nthe first column. Try column 1, row 1. These branches are going to\nrepresent the possibilities at",
    "start": "2132580",
    "end": "2141300"
  },
  {
    "text": "each level. So I'll try and put a queen\ndown in the first column. And now given that it's in the\nfirst column, I'll try and put",
    "start": "2141300",
    "end": "2148360"
  },
  {
    "text": "the next queen down in\nthe first column.  I'll try and put the first\nqueen, the one in the first",
    "start": "2148360",
    "end": "2155470"
  },
  {
    "text": "column, down in the first row. I'm sorry. And then given that, we'll\nput the next queen down",
    "start": "2155470",
    "end": "2160780"
  },
  {
    "text": "in the first row. And that's no good. So I'll back up to here. And I'll say, oh, can I put the\nfirst queen down in the",
    "start": "2160780",
    "end": "2166280"
  },
  {
    "text": "second row? Well, that's no good. Oh, can I put it down\nin the third row? Well, that's good.",
    "start": "2166280",
    "end": "2172790"
  },
  {
    "text": "Well, now can I put the\nnext queen down in the first column? Well, I can't visualize this\nchess board anymore, but I",
    "start": "2172790",
    "end": "2178029"
  },
  {
    "text": "think that's right. And I try the next one. And at each place, I go as far\ndown this tree as I can.",
    "start": "2178030",
    "end": "2184170"
  },
  {
    "text": "And I back up. If I get down to here and find\nno possibilities below there, I back all the way up to here,\nand now start again generating",
    "start": "2184170",
    "end": "2191740"
  },
  {
    "text": "this sub-tree. And I sort of walk around. And finally, if I ever manage to\nget all the way down, I've",
    "start": "2191740",
    "end": "2197870"
  },
  {
    "text": "found a solution. So that's a typical sort of\nparadigm that's used a lot in",
    "start": "2197870",
    "end": "2205020"
  },
  {
    "text": "AI programming. It's called backtracking\nsearch. ",
    "start": "2205020",
    "end": "2217470"
  },
  {
    "text": "And it's really unnecessary.",
    "start": "2217470",
    "end": "2223859"
  },
  {
    "text": "You saw me get confused when I\nwas visualizing this thing. And you see the complication. This is a complicated\nthing to say.",
    "start": "2223860",
    "end": "2230760"
  },
  {
    "text": "Why is it complicated? Its because somehow this program\nis too inordinately",
    "start": "2230760",
    "end": "2236190"
  },
  {
    "text": "concerned with time. It's too much-- I try this one, and I try this\none, and I go back to the last",
    "start": "2236190",
    "end": "2241670"
  },
  {
    "text": "possibility. And that's a complicated\nthing. If I stop worrying about time\nso much, then there's a much",
    "start": "2241670",
    "end": "2248590"
  },
  {
    "text": "simpler way to describe this. It says, let's imagine that I\nhave in my hands the tree down",
    "start": "2248590",
    "end": "2260320"
  },
  {
    "text": "to k minus 1 levels. See, suppose I had in my hands\nall possible ways to put down",
    "start": "2260320",
    "end": "2270670"
  },
  {
    "text": "queens in the first k columns. Suppose I just had that. Let's not worry about\nhow we get it.",
    "start": "2270670",
    "end": "2277070"
  },
  {
    "text": "Well, then, how do\nI extend that? How do I find all possible ways\nto put down queens in the next column?",
    "start": "2277070",
    "end": "2282480"
  },
  {
    "text": "It's really easy. For each of these positions I\nhave, I think about putting",
    "start": "2282480",
    "end": "2292210"
  },
  {
    "text": "down a queen in each row\nto make the next thing. And then for each one I put\ndown, I filter those by the",
    "start": "2292210",
    "end": "2298930"
  },
  {
    "text": "ones that are safe. So instead of thinking about\nthis tree as generated step by",
    "start": "2298930",
    "end": "2304190"
  },
  {
    "text": "step, suppose I had\nit all there. ",
    "start": "2304190",
    "end": "2309680"
  },
  {
    "text": "And to extend it from level k\nminus 1 to level k, I just need to extend each thing in\nall possible ways and only",
    "start": "2309680",
    "end": "2316840"
  },
  {
    "text": "keep the ones that are safe. And that will give me\nthe tree to level k. And that's a recursive strategy\nfor solving the eight queens problem.",
    "start": "2316840",
    "end": "2324530"
  },
  {
    "text": "All right, well, let's\nlook at it. ",
    "start": "2324530",
    "end": "2330280"
  },
  {
    "text": "To solve the eight queens\nproblem on a board of some specified size, we write\na sub-procedure called",
    "start": "2330280",
    "end": "2340390"
  },
  {
    "text": "fill-columns. Fill-columns is going to\nput down queens up through column k.",
    "start": "2340390",
    "end": "2346086"
  },
  {
    "text": "And here's the pattern\nof the recursion. I'm going to call fill-columns\nwith the size eventually.",
    "start": "2346086",
    "end": "2352990"
  },
  {
    "text": "So fill-columns says how to put\ndown queens safely in the first k columns of this chess\nboard with a size number of",
    "start": "2352990",
    "end": "2359255"
  },
  {
    "text": "rows in it. If k is equal to 0, well,\nthen I don't have to put anything down. So my solution is just\nan empty chess board.",
    "start": "2359255",
    "end": "2366710"
  },
  {
    "text": "Otherwise, I'm going\nto do some stuff. And I'm going to use collect. And here's the collect.",
    "start": "2366710",
    "end": "2371772"
  },
  {
    "text": " I find all ways to put\ndown queens in the",
    "start": "2371772",
    "end": "2380590"
  },
  {
    "text": "first k minus 1 columns. And this was just\nwhat I set for. Imagine I have this tree down\nto k minus 1 levels.",
    "start": "2380590",
    "end": "2388880"
  },
  {
    "text": "And then I find all ways of\ntrying a row, that's just each of the possible rows.",
    "start": "2388880",
    "end": "2394130"
  },
  {
    "text": "They're size rows, so that's\nenumerate interval. And now what I do is I collect\ntogether the new row I'm going",
    "start": "2394130",
    "end": "2403950"
  },
  {
    "text": "to try and column k with\nthe rest of the queens. I adjoin a position.",
    "start": "2403950",
    "end": "2410200"
  },
  {
    "text": "This is George's problem. An adjoined position\nis like safe. It's a thing that takes a row\nand a column and the rest of",
    "start": "2410200",
    "end": "2416529"
  },
  {
    "text": "the positions and makes a\nnew position collection. So I adjoin a position of a new\nrow and a new column to",
    "start": "2416530",
    "end": "2426230"
  },
  {
    "text": "the rest of the queens, where\nthe rest of the queens runs through all possible ways\nof solving the problem",
    "start": "2426230",
    "end": "2432870"
  },
  {
    "text": "in k minus 1 columns. And the new row runs through all\npossible rows such that it",
    "start": "2432870",
    "end": "2439730"
  },
  {
    "text": "was safe to put one there. And that's the whole program.",
    "start": "2439730",
    "end": "2446500"
  },
  {
    "text": "There's the whole procedure. Not only that, that doesn't just\nsolve the eight queens",
    "start": "2446500",
    "end": "2451990"
  },
  {
    "text": "problem, it gives you\nall solutions to the eight queens problem. When you're done, you\nhave a stream.",
    "start": "2451990",
    "end": "2458480"
  },
  {
    "text": "And the elements of that stream\nare all possible ways of solving that problem. ",
    "start": "2458480",
    "end": "2465309"
  },
  {
    "text": "Why is that simpler? Well, we threw away the whole\nidea that this is some process that happens in time\nwith state.",
    "start": "2465310",
    "end": "2472720"
  },
  {
    "text": "And we just said it's a whole\ncollection of stuff. And that's why it's simpler.",
    "start": "2472720",
    "end": "2478260"
  },
  {
    "text": "We've changed our view. Remember, that's where\nwe started today. We've changed our view of what\nit is we're trying to model.",
    "start": "2478260",
    "end": "2486230"
  },
  {
    "text": "we stop modeling things that\nevolve in time and have steps and have state.",
    "start": "2486230",
    "end": "2491750"
  },
  {
    "text": "And instead, we're trying to\nmodel this global thing like the whole flight of the\nchalk, rather than its",
    "start": "2491750",
    "end": "2497950"
  },
  {
    "text": "state at each instant. Any questions? ",
    "start": "2497950",
    "end": "2503810"
  },
  {
    "text": "AUDIENCE: It looks to me like\nbacktracking would be searching for the first solution\nit can find, whereas",
    "start": "2503810",
    "end": "2509970"
  },
  {
    "text": "this recursive search would be\nlooking for all solutions. And it seems that if you have a\nlarge enough area to search,",
    "start": "2509970",
    "end": "2518090"
  },
  {
    "text": "that the second is going\nto become impossible. PROFESSOR: OK, the answer to\nthat question is the whole",
    "start": "2518090",
    "end": "2527610"
  },
  {
    "text": "rest of this lecture. It's exactly the\nright question. ",
    "start": "2527610",
    "end": "2533522"
  },
  {
    "text": "And without trying to anticipate\nthe lecture too much, you should start being\nsuspicious at this point, and",
    "start": "2533522",
    "end": "2539910"
  },
  {
    "text": "exactly those kinds\nof suspicions. It's wonderful, but isn't it\nso terribly inefficient? That's where we're going.",
    "start": "2539910",
    "end": "2548100"
  },
  {
    "text": "So I won't answer now, but\nI'll answer later. ",
    "start": "2548100",
    "end": "2553350"
  },
  {
    "text": "OK, let's take a break. ",
    "start": "2553350",
    "end": "2609650"
  },
  {
    "text": "Well, by now you should be\nstarting to get suspicious.",
    "start": "2609650",
    "end": "2615599"
  },
  {
    "text": "See, I've showed your this\nsimple, elegant way of putting",
    "start": "2615600",
    "end": "2621450"
  },
  {
    "text": "programs together, very unlike\nthese other traditional programs that sum the odd\nsquares or compute the odd",
    "start": "2621450",
    "end": "2630490"
  },
  {
    "text": "Fibonacci numbers. Very unlike these programs that\nmix up the enumerator and",
    "start": "2630490",
    "end": "2637080"
  },
  {
    "text": "the filter and the\naccumulator. And by mixing it up, we don't\nhave all of these wonderful",
    "start": "2637080",
    "end": "2644770"
  },
  {
    "text": "conceptual advantages of these\nstreams pieces, these wonderful mix and match\ncomponents for putting",
    "start": "2644770",
    "end": "2649840"
  },
  {
    "text": "together lots and lots\nof programs. On the other hand, most of the\nprograms you've seen look like",
    "start": "2649840",
    "end": "2655810"
  },
  {
    "text": "these ugly ones. Why's that? Can it possibly be that computer\nscientists are so",
    "start": "2655810",
    "end": "2663705"
  },
  {
    "text": "obtuse that they don't notice\nthat if you'd merely did this thing, then you can get this\ngreat programming elegance?",
    "start": "2663705",
    "end": "2673620"
  },
  {
    "text": "There's got to be a catch. And it's actually pretty easy\nto see what the catch is.",
    "start": "2673620",
    "end": "2679510"
  },
  {
    "text": "Let's think about the\nfollowing problem. Suppose I tell you to find the\nsecond prime between 10,000",
    "start": "2679510",
    "end": "2687510"
  },
  {
    "text": "and 1 million, or if your\ncomputer's larger, say between 10,000 and 100 billion,\nor something.",
    "start": "2687510",
    "end": "2694105"
  },
  {
    "text": "And you say, oh, that's easy. I can do that with a stream. All I do is I enumerate\nthe interval",
    "start": "2694105",
    "end": "2701530"
  },
  {
    "text": "from 10,000 to 1 million. So I get all those integers\nfrom 10,000 to 1 million.",
    "start": "2701530",
    "end": "2706799"
  },
  {
    "text": "I filter them for prime-ness, so\ntest all of them and see if they're prime. And I take the second element.",
    "start": "2706800",
    "end": "2713170"
  },
  {
    "text": "That's the head of the tail. Well, that's clearly\npretty ridiculous. ",
    "start": "2713170",
    "end": "2721660"
  },
  {
    "text": "We'd not even have room in the\nmachine to store the integers in the first place, much\nless to test them.",
    "start": "2721660",
    "end": "2727040"
  },
  {
    "text": "And then I only want\nthe second one. See, the power of this\ntraditional programming style",
    "start": "2727040",
    "end": "2736500"
  },
  {
    "text": "is exactly its weakness, that\nwe're mixing up the enumerating and the testing\nand the accumulating.",
    "start": "2736500",
    "end": "2745090"
  },
  {
    "text": "So we don't do it all. So the very thing that makes\nit conceptually ugly is the",
    "start": "2745090",
    "end": "2752579"
  },
  {
    "text": "very thing that makes\nit efficient. It's this mixing up.",
    "start": "2752580",
    "end": "2757800"
  },
  {
    "text": "So it seems that all I've done\nthis morning so far is just confuse you. I showed you this wonderful\nway that programming might",
    "start": "2757800",
    "end": "2762930"
  },
  {
    "text": "work, except that it doesn't. Well, here's where the wonderful\nthing happens.",
    "start": "2762930",
    "end": "2769040"
  },
  {
    "text": "It turns out in this game that\nwe really can have our cake and eat it too.",
    "start": "2769040",
    "end": "2774869"
  },
  {
    "text": "And what I mean by that is\nthat we really can write",
    "start": "2774870",
    "end": "2780280"
  },
  {
    "text": "stream programs exactly like the\nones I wrote and arrange things so that when the machine\nactually runs, it's as",
    "start": "2780280",
    "end": "2788830"
  },
  {
    "text": "efficient as running this\ntraditional programming style that mixes up the generation\nand the test.",
    "start": "2788830",
    "end": "2796310"
  },
  {
    "text": "Well, that sounds\npretty magic. The key to this is that\nstreams are not lists.",
    "start": "2796310",
    "end": "2803690"
  },
  {
    "text": " We'll see this carefully in a\nsecond, but for now, let's",
    "start": "2803690",
    "end": "2810070"
  },
  {
    "text": "take a look at that\nslide again. The image you should have here\nof this signal processing system is that what's going to\nhappen is there's this box",
    "start": "2810070",
    "end": "2820940"
  },
  {
    "text": "that has the integers\nsitting in it. And there's this filter that's\nconnected to it and it's",
    "start": "2820940",
    "end": "2828680"
  },
  {
    "text": "tugging on them. And then there's someone who's\ntugging on this stuff saying what comes out of the filter.",
    "start": "2828680",
    "end": "2836790"
  },
  {
    "text": "And the image you should have\nis that someone says, well, what's the first prime, and\ntugs on this filter.",
    "start": "2836790",
    "end": "2844589"
  },
  {
    "text": "And the filter tugs\non the integers. And you look only at that much,\nand then say, oh, I",
    "start": "2844590",
    "end": "2849830"
  },
  {
    "text": "really wanted the second one. What's the second prime? And that no computation gets\ndone except when you tug on",
    "start": "2849830",
    "end": "2857730"
  },
  {
    "text": "these things. Let me try that again. This is a little device.",
    "start": "2857730",
    "end": "2863815"
  },
  {
    "text": "This is a little stream machine\ninvented by Eric Grimson who's been teaching\nthis course at MIT.",
    "start": "2863815",
    "end": "2869829"
  },
  {
    "text": "And the image is here's a stream\nof stuff, like a whole bunch of the integers. And here's some processing\nelements.",
    "start": "2869830",
    "end": "2878700"
  },
  {
    "text": "And if, say, it's filter of\nfilter of map, or something. ",
    "start": "2878700",
    "end": "2885570"
  },
  {
    "text": "And if I really tried to\nimplement that with streams as lists, what I'd say is, well,\nI've got this list of things,",
    "start": "2885570",
    "end": "2891520"
  },
  {
    "text": "and now I do the first filter. So do all this processing. And I take this and I process\nand I process and I process",
    "start": "2891520",
    "end": "2898570"
  },
  {
    "text": "and I process. And now I'm got this\nnew stream. Now I take that result\nin my hand someplace.",
    "start": "2898570",
    "end": "2904069"
  },
  {
    "text": "And I put that through\nthe second one. And I process the whole thing. And there's this new stream.",
    "start": "2904070",
    "end": "2909510"
  },
  {
    "text": " And then I take the result and\nI put it all the way through",
    "start": "2909510",
    "end": "2915230"
  },
  {
    "text": "this one the same way. That's what would happen to\nthese stream programs if",
    "start": "2915230",
    "end": "2921760"
  },
  {
    "text": "streams were just lists. But in fact, streams aren't\nlists, they're streams. And the image you should have\nis something a little",
    "start": "2921760",
    "end": "2927240"
  },
  {
    "text": "bit more like this. I've got these gadgets connected\nup by this data",
    "start": "2927240",
    "end": "2935880"
  },
  {
    "text": "that's flowing out of them.  And here's my original source\nof the streams. It might be",
    "start": "2935880",
    "end": "2944190"
  },
  {
    "text": "starting to generate\nthe integers. And now, what happens\nif I want a result? I tug on the end here.",
    "start": "2944190",
    "end": "2950200"
  },
  {
    "text": "And this element says, gee,\nI need some more data. So this one comes here\nand tugs on that one.",
    "start": "2950200",
    "end": "2955830"
  },
  {
    "text": "And it says, gee, I need\nsome more data. And this one tugs on this\nthing, which might be a filter, and says, gee, I\nneed some more data.",
    "start": "2955830",
    "end": "2961640"
  },
  {
    "text": "And only as much of this thing\nat the end here gets generated as I tugged. And only as much of this stuff\ngoes through the processing",
    "start": "2961640",
    "end": "2968030"
  },
  {
    "text": "units as I'm pulling\non the end I need. That's the image you should have\nof the difference between",
    "start": "2968030",
    "end": "2973720"
  },
  {
    "text": "implementing what we're actually\ngoing to do and if streams were lists. ",
    "start": "2973720",
    "end": "2980600"
  },
  {
    "text": "Well, how do we make\nthis thing? I hope you have the image. The trick is how to make it. ",
    "start": "2980600",
    "end": "2987930"
  },
  {
    "text": "We want to arrange for a stream\nto be a data structure that computes itself\nincrementally, an on-demand",
    "start": "2987930",
    "end": "2995670"
  },
  {
    "text": "data structure.  And the basic idea is, again,\none of the very basic ideas",
    "start": "2995670",
    "end": "3002700"
  },
  {
    "text": "that we're seeing throughout\nthe whole course. And that is that there's not\na firm distinction between programs and data.",
    "start": "3002700",
    "end": "3009240"
  },
  {
    "text": "So what a stream is going to be\nis simultaneously this data structure that you think of,\nlike the stream of the leaves",
    "start": "3009240",
    "end": "3015270"
  },
  {
    "text": "of this tree. But at the same time, it's\ngoing to be a very clever procedure that has the method\nof computing in it.",
    "start": "3015270",
    "end": "3023549"
  },
  {
    "text": "Well, let me try this. It's going to turn out that we\ndon't need any more mechanism. We already have everything we\nneed simply from the fact that",
    "start": "3023550",
    "end": "3031150"
  },
  {
    "text": "we know how to handle\nprocedures as first-class objects. Well, let's go back\nto the key.",
    "start": "3031150",
    "end": "3036880"
  },
  {
    "text": "The key is, remember, we\nhad these operations. CONS-stream and head and tail.",
    "start": "3036880",
    "end": "3048080"
  },
  {
    "text": "When I started, I said you can\nthink about this as CONS and think about this as CAR and\nthink about that as",
    "start": "3048080",
    "end": "3053340"
  },
  {
    "text": "CDR, but it's not. Now, let's look at what\nthey really are. Well, CONS-stream of x and y is\ngoing to be an abbreviation",
    "start": "3053340",
    "end": "3069360"
  },
  {
    "text": "for the following thing.",
    "start": "3069360",
    "end": "3079540"
  },
  {
    "text": "CONS form a pair, ordinary CONS,\nof x to a thing called delay of y.",
    "start": "3079540",
    "end": "3088000"
  },
  {
    "text": " And before I explain that, let\nme go and write the rest. The",
    "start": "3088000",
    "end": "3094670"
  },
  {
    "text": "head of a stream is going\nto be just the CAR.",
    "start": "3094670",
    "end": "3099790"
  },
  {
    "text": " And the tail of a stream is\ngoing to be a thing called",
    "start": "3099790",
    "end": "3107609"
  },
  {
    "text": "force the CDR of the stream.",
    "start": "3107610",
    "end": "3116120"
  },
  {
    "text": "Now let me explain this. Delay is going to be a\nspecial magic thing.",
    "start": "3116120",
    "end": "3121420"
  },
  {
    "text": "What delay does is take an\nexpression and produce a promise to compute\nthat expression",
    "start": "3121420",
    "end": "3128380"
  },
  {
    "text": "when you ask for it. It doesn't do any computation\nhere. It just gives you\na rain check.",
    "start": "3128380",
    "end": "3134820"
  },
  {
    "text": "It produces a promise. And CONS-stream says I'm going\nto put together in a pair x",
    "start": "3134820",
    "end": "3143280"
  },
  {
    "text": "and a promise to compute y.  Now, if I want the head, that's\njust the CAR that I put",
    "start": "3143280",
    "end": "3150200"
  },
  {
    "text": "in the pair. And the key is that the\ntail is going to be-- force calls in that promise.",
    "start": "3150200",
    "end": "3159110"
  },
  {
    "text": "Tail says, well, take\nthat promise and now call in that promise.",
    "start": "3159110",
    "end": "3164609"
  },
  {
    "text": "And then we compute\nthat thing. That's how this is\ngoing to work. That's what CONS-stream, head,\nand tail really are.",
    "start": "3164610",
    "end": "3171550"
  },
  {
    "text": " Now, let's see how this works. And we'll go through this\nfairly carefully.",
    "start": "3171550",
    "end": "3178410"
  },
  {
    "text": "We're going to see how this\nworks in this example of computing the second prime\nbetween 10,000 and a million.",
    "start": "3178410",
    "end": "3188650"
  },
  {
    "text": "OK, so we start off and we\nhave this expression. ",
    "start": "3188650",
    "end": "3195820"
  },
  {
    "text": "The second prime-- the head of\nthe tail of the result of filtering for primality\nthe integers between",
    "start": "3195820",
    "end": "3204059"
  },
  {
    "text": "10,000 and 1 million. Now, what is that? What that is, that interval\nbetween 10,000 and 1 million,",
    "start": "3204060",
    "end": "3215789"
  },
  {
    "text": "well, if you trace through\nenumerate interval, there builds a CONS-stream. And the CONS-stream is the CONS\nof 10,000 to a promise to",
    "start": "3215790",
    "end": "3225880"
  },
  {
    "text": "compute the integers between\n10,001 and 1 million.",
    "start": "3225880",
    "end": "3234480"
  },
  {
    "text": "So that's what this\nexpression is. Here I'm using the substitution\nmodel. And we can use the substitution\nmodel because we",
    "start": "3234480",
    "end": "3239690"
  },
  {
    "text": "don't have side effects\nand state.  So I have CONS of 10,000 to a\npromise to compute the rest of",
    "start": "3239690",
    "end": "3247860"
  },
  {
    "text": "the integers. So only one integer, so\nfar, got enumerated. ",
    "start": "3247860",
    "end": "3254380"
  },
  {
    "text": "Well, I'm going to filter that\nthing for primality. ",
    "start": "3254380",
    "end": "3259900"
  },
  {
    "text": "Again, you go back and look\nat the filter code. What the filter will first\ndo is test the head.",
    "start": "3259900",
    "end": "3265460"
  },
  {
    "text": "So in this case, the filter will\ntest 10,000 and say, oh,",
    "start": "3265460",
    "end": "3271580"
  },
  {
    "text": "10,000's not prime. Therefore, what I have\nto do recursively is filter the tail.",
    "start": "3271580",
    "end": "3279220"
  },
  {
    "text": "And what's the tail of it, well,\nthat's the tail of this pair with a promise in it.",
    "start": "3279220",
    "end": "3286340"
  },
  {
    "text": "Tail now comes in and says,\nwell, I'm going to force that. I'm going to force that promise,\nwhich means now I'm",
    "start": "3286340",
    "end": "3293790"
  },
  {
    "text": "going to compute the integers\nbetween 10,001 and 1 million.",
    "start": "3293790",
    "end": "3300880"
  },
  {
    "text": "OK, so this filter now\nis looking at that. ",
    "start": "3300880",
    "end": "3307810"
  },
  {
    "text": "That enumerate itself, well, now\nwe're back in the original enumerate situation. The enumerate is the CONS of the\nfirst thing, 10,001, onto",
    "start": "3307810",
    "end": "3316920"
  },
  {
    "text": "a promise to compute the rest. So now the primality filter is\ngoing to go look at 10,001.",
    "start": "3316920",
    "end": "3323060"
  },
  {
    "text": "It's going to decide if\nit likes that or not. It turns out 10,001\nisn't prime. So it'll force it again\nand again and again.",
    "start": "3323060",
    "end": "3329610"
  },
  {
    "text": " And finally, I think the first\nprime it hits is 10,009.",
    "start": "3329610",
    "end": "3337099"
  },
  {
    "text": "And at that point, it'll stop. And that will be the first\nprime, and then eventually,",
    "start": "3337100",
    "end": "3342500"
  },
  {
    "text": "it'll need the second prime. So at that point, it\nwill go again. So you see what happens is that\nno more gets generated",
    "start": "3342500",
    "end": "3351880"
  },
  {
    "text": "than you actually need.  That enumerator is not going to\ngenerate any more integers",
    "start": "3351880",
    "end": "3360060"
  },
  {
    "text": "than the filter asks it for as\nit's pulling in things to check for primality. And the filter is not going to\ngenerate any more stuff than",
    "start": "3360060",
    "end": "3367290"
  },
  {
    "text": "you ask it for, which is\nthe head of the tail. You see, what's happened is\nwe've put that mixing of",
    "start": "3367290",
    "end": "3377180"
  },
  {
    "text": "generation and test into what\nactually happens in the computer, even though that's\nnot apparently what's",
    "start": "3377180",
    "end": "3384250"
  },
  {
    "text": "happening from looking\nat our programs. OK, well, that seemed easy.",
    "start": "3384250",
    "end": "3390230"
  },
  {
    "text": "All of this mechanism got put\ninto this magic delay. So you're saying, gee, that must\nbe where the magic is.",
    "start": "3390230",
    "end": "3396900"
  },
  {
    "text": "But see there's no magic\nthere either. You know what delay is. Delay on some expression is\njust an abbreviation for--",
    "start": "3396900",
    "end": "3410040"
  },
  {
    "text": " well, what's a promise to\ncompute an expression?",
    "start": "3410040",
    "end": "3416490"
  },
  {
    "text": "Lambda of nil, procedure of no\narguments, which is that expression.",
    "start": "3416490",
    "end": "3423000"
  },
  {
    "text": "That's what a procedure is. It says I'm going to compute\nan expression. What's force? How do I take up a promise?",
    "start": "3423000",
    "end": "3430800"
  },
  {
    "text": "Well, force of some procedure,\na promise, is just run it.",
    "start": "3430800",
    "end": "3435890"
  },
  {
    "text": " Done. So there's no magic\nthere at all.",
    "start": "3435890",
    "end": "3443580"
  },
  {
    "text": "Well, what have we done? We said the old style,\ntraditional style of",
    "start": "3443580",
    "end": "3449510"
  },
  {
    "text": "programming is more efficient. And the stream thing is\nmore perspicuous.",
    "start": "3449510",
    "end": "3455260"
  },
  {
    "text": "And we managed to make the\nstream procedures run like the other procedures\nby using delay.",
    "start": "3455260",
    "end": "3463350"
  },
  {
    "text": "And the thing that delay did\nfor us was to de-couple the apparent order of events in our\nprograms from the actual",
    "start": "3463350",
    "end": "3472150"
  },
  {
    "text": "order of events that happened\nin the machine. That's really what\ndelay is doing. That's exactly the\nwhole point.",
    "start": "3472150",
    "end": "3478290"
  },
  {
    "text": "We've given up the idea that our\nprocedures, as they run,",
    "start": "3478290",
    "end": "3484720"
  },
  {
    "text": "or as we look at them, mirror\nsome clear notion of time. And by giving that up, we give\ndelay the freedom to arrange",
    "start": "3484720",
    "end": "3492960"
  },
  {
    "text": "the order of events in the\ncomputation the way it likes. That's the whole idea. We de-couple the apparent\norder of events in our",
    "start": "3492960",
    "end": "3500640"
  },
  {
    "text": "programs from the actual order\nof events in the computer. OK, well there's one\nmore detail.",
    "start": "3500640",
    "end": "3505770"
  },
  {
    "text": "It's just a technical detail,\nbut it's actually an important one. As you run through these\nrecursive programs unwinding,",
    "start": "3505770",
    "end": "3512190"
  },
  {
    "text": "you'll see a lot of things that\nlook like tail of the tail of the tail.",
    "start": "3512190",
    "end": "3519320"
  },
  {
    "text": "That's the kind of thing that\nwould happen as I go CONSing down a stream all the way. And if each time I'm doing that,\neach time to compute a",
    "start": "3519320",
    "end": "3527170"
  },
  {
    "text": "tail, I evaluate a procedure\nwhich then has to go re-compute its tail, and\nre-compute its tail and",
    "start": "3527170",
    "end": "3534270"
  },
  {
    "text": "recompute its tail each time,\nyou can see that's very inefficient compared to just\nhaving a list where the",
    "start": "3534270",
    "end": "3539609"
  },
  {
    "text": "elements are all there, and I\ndon't have to re-compute each tail every time I get\nthe next tail.",
    "start": "3539610",
    "end": "3545290"
  },
  {
    "text": "So there's one little hack to\nslightly change what delay is,",
    "start": "3545290",
    "end": "3555030"
  },
  {
    "text": "and make it a thing which is-- I'll write it this way.",
    "start": "3555030",
    "end": "3560390"
  },
  {
    "text": "The actual implementation, delay\nis an abbreviation for",
    "start": "3560390",
    "end": "3567359"
  },
  {
    "text": "this thing, memo-proc\nof a procedure. Memo-proc is a special thing\nthat transforms a procedure.",
    "start": "3567360",
    "end": "3575150"
  },
  {
    "text": "What it does is it takes a\nprocedure of no arguments and it transforms it into a\nprocedure that'll only have to",
    "start": "3575150",
    "end": "3582190"
  },
  {
    "text": "do its computation once. And what I mean by that is,\nyou give it a procedure.",
    "start": "3582190",
    "end": "3588700"
  },
  {
    "text": "The result of memo-proc will be\na new procedure, which the first time you call it, will\nrun the original procedure,",
    "start": "3588700",
    "end": "3595369"
  },
  {
    "text": "remember what result it got, and\nthen from ever on after, when you call it, it just\nwon't have to do the",
    "start": "3595370",
    "end": "3601610"
  },
  {
    "text": "computation. It will have cached that\nresult someplace. And here's an implementation\nof memo-proc. ",
    "start": "3601610",
    "end": "3611210"
  },
  {
    "text": "Once you have the idea, it's\neasy to implement. Memo-proc is this little\nthing that has two little flags in there.",
    "start": "3611210",
    "end": "3617390"
  },
  {
    "text": "It says, have I already\nbeen run? And initially it says, no, I\nhaven't already been run.",
    "start": "3617390",
    "end": "3623620"
  },
  {
    "text": "And what was the result I got\nthe last time I was run?",
    "start": "3623620",
    "end": "3629070"
  },
  {
    "text": "So memo-proc takes a procedure\ncalled proc, and it returns a new procedure of no arguments.",
    "start": "3629070",
    "end": "3634359"
  },
  {
    "text": "Proc is supposed to be a\nprocedure of no arguments. And it says, oh, if I'm not\nalready run, then I'm going to",
    "start": "3634360",
    "end": "3642970"
  },
  {
    "text": "do a sequence of things. I'm going to compute proc,\nI'm going to save that.",
    "start": "3642970",
    "end": "3648450"
  },
  {
    "text": "I'm going to stash that in\nthe variable result. I'm going to make a note to\nmyself that I've already been",
    "start": "3648450",
    "end": "3653510"
  },
  {
    "text": "run, and then I'll return\nthe result. So that's if you compute it\nif it's not already run.",
    "start": "3653510",
    "end": "3659010"
  },
  {
    "text": "If you call it and it's already\nbeen run, it just returns the result. So that's a little clever\nhack called memoization.",
    "start": "3659010",
    "end": "3668400"
  },
  {
    "text": "And in this case, it short\ncircuits having to re-compute the tail of the tail of the tail\nof the tail of the tail.",
    "start": "3668400",
    "end": "3675270"
  },
  {
    "text": "So there isn't even that\nkind of inefficiency. And in fact, the streams will\nrun with pretty much the same",
    "start": "3675270",
    "end": "3680590"
  },
  {
    "text": "efficiency as the other\nprograms precisely. And remember, again, the whole\nidea of this is that we've",
    "start": "3680590",
    "end": "3688109"
  },
  {
    "text": "used the fact that there's no\nreally good dividing line between procedures and data.",
    "start": "3688110",
    "end": "3693609"
  },
  {
    "text": "We've written data structures\nthat, in fact, are sort of like procedures.",
    "start": "3693610",
    "end": "3698760"
  },
  {
    "text": "And what that's allowed us to\ndo is take an example of a",
    "start": "3698760",
    "end": "3705280"
  },
  {
    "text": "common control structure,\nin this place iteration. And we've built a data structure\nwhich, since itself",
    "start": "3705280",
    "end": "3712460"
  },
  {
    "text": "is a procedure, kind of has\nthis iteration control structure in it. And that's really what\nstreams are.",
    "start": "3712460",
    "end": "3718650"
  },
  {
    "text": "OK, questions? ",
    "start": "3718650",
    "end": "3723950"
  },
  {
    "text": "AUDIENCE: Your description\nof tail-tail-tail, if I understand it correctly, force\nis actually execution of a",
    "start": "3723950",
    "end": "3730050"
  },
  {
    "text": "procedure, if it's done without\nthis memo-proc thing. And you implied that memo-proc\ngets around that problem.",
    "start": "3730050",
    "end": "3736380"
  },
  {
    "text": "Doesn't it only get around it\nif tail-tail-tail is always executing exactly the same--",
    "start": "3736380",
    "end": "3742550"
  },
  {
    "text": "PROFESSOR: Oh, that's-- sure. AUDIENCE: I guess I\nmissed that point. PROFESSOR: Oh, sure. I mean the point is--",
    "start": "3742550",
    "end": "3747790"
  },
  {
    "text": " yeah. I mean I have to do a\ncomputation to get the answer.",
    "start": "3747790",
    "end": "3754160"
  },
  {
    "text": "But the point is, once I've\nfound the tail of the stream, to get the tail of the tail,\nI shouldn't have had to",
    "start": "3754160",
    "end": "3759530"
  },
  {
    "text": "re-compute the first tail. See, and if I didn't use\nmemo-proc, that re-computation",
    "start": "3759530",
    "end": "3765369"
  },
  {
    "text": "would have been done. AUDIENCE: I understand now. ",
    "start": "3765370",
    "end": "3770830"
  },
  {
    "text": "AUDIENCE: In one of your\nexamples, you mentioned that we were able to use the\nsubstitution model because there are no side effects.",
    "start": "3770830",
    "end": "3776830"
  },
  {
    "text": "What if we had a single\nprocessing unit-- if we had a side effect,\nif we had a state?",
    "start": "3776830",
    "end": "3783620"
  },
  {
    "text": "Could we still practically\nbuild the stream model?",
    "start": "3783620",
    "end": "3789120"
  },
  {
    "text": "PROFESSOR: Maybe. That's a hard question. I'm going to talk a little bit\nlater about the places where",
    "start": "3789120",
    "end": "3795540"
  },
  {
    "text": "substitution and side effects\ndon't really mix very well. But in general, I think the\nanswer is unless you're very",
    "start": "3795540",
    "end": "3801170"
  },
  {
    "text": "careful, any amount of side\neffect is going to mess up everything. ",
    "start": "3801170",
    "end": "3815490"
  },
  {
    "text": "AUDIENCE: Sorry, I didn't\nquite understand the memo-proc operation. When do you execute\nthe lambda?",
    "start": "3815490",
    "end": "3821990"
  },
  {
    "text": "In other words, when memo-proc\nis executed, just this lambda expression is being generated.",
    "start": "3821990",
    "end": "3827600"
  },
  {
    "text": "But it's not clear to me\nwhen it's executed. PROFESSOR: Right. What memo-proc does-- remember,\nthe thing that's",
    "start": "3827600",
    "end": "3833890"
  },
  {
    "text": "going into memo-proc, the thing\nproc, is a procedure of no arguments. And someday, you're\ngoing to call it.",
    "start": "3833890",
    "end": "3840390"
  },
  {
    "text": "Memo-proc translates that\nprocedure into another procedure of no arguments,\nwhich someday you're going to call.",
    "start": "3840390",
    "end": "3846620"
  },
  {
    "text": "That's that lambda. So here, where I initially\nbuilt as my tail of the",
    "start": "3846620",
    "end": "3857369"
  },
  {
    "text": "stream, say, this procedure\nof no arguments, which someday I'll call.",
    "start": "3857370",
    "end": "3864099"
  },
  {
    "text": "Instead, I'm going to have\nthe tail of the stream be memo-proc of it, which\nsomeday I'll call.",
    "start": "3864100",
    "end": "3870650"
  },
  {
    "text": "So that lambda of nil, that gets\ncalled when you call the memo-proc, when you call the\nresult of that memo-proc,",
    "start": "3870650",
    "end": "3880990"
  },
  {
    "text": "which would be ordinarily when\nyou would have called the original thing that\nyou set it.",
    "start": "3880990",
    "end": "3887641"
  },
  {
    "text": "AUDIENCE: OK, the reason I ask\nis I had a feeling that when you call memo-proc, you just\nreturn this lambda. PROFESSOR: That's right.",
    "start": "3887642",
    "end": "3893770"
  },
  {
    "text": "When you call memo-proc,\nyou return the lambda. You never evaluate the\nexpression at all, until the",
    "start": "3893770",
    "end": "3900090"
  },
  {
    "text": "first time that you would\nhave evaluated it. ",
    "start": "3900090",
    "end": "3907590"
  },
  {
    "text": "AUDIENCE: Do I understand it\nright that you actually have to build the list up, but\nthe elements of the",
    "start": "3907590",
    "end": "3912980"
  },
  {
    "text": "list don't get evaluated? The expressions don't\nget evaluated? But at each stage, you actually\nare building a list.",
    "start": "3912980",
    "end": "3918539"
  },
  {
    "text": "PROFESSOR: That's-- I really should have\nsaid this. That's a really good point. No, it's not quite right.",
    "start": "3918540",
    "end": "3923660"
  },
  {
    "text": "Because what happens is this. Let me draw this as pairs. Suppose I'm going to make a\nbig stream, like enumerate",
    "start": "3923660",
    "end": "3929710"
  },
  {
    "text": "interval, 1 through 1 billion. What that is, is a pair with\na 1 and a promise.",
    "start": "3929710",
    "end": "3943045"
  },
  {
    "text": " That's exactly what it is. Nothing got built up.",
    "start": "3943045",
    "end": "3949140"
  },
  {
    "text": " When I go and force this,\nand say, what happens?",
    "start": "3949140",
    "end": "3956370"
  },
  {
    "text": "Well, this thing is now also\nrecursively a CONS. So that this promise now is the\nnext thing, which is a 2",
    "start": "3956370",
    "end": "3967770"
  },
  {
    "text": "and a promise to do more. And so on and so on and so on.",
    "start": "3967770",
    "end": "3974470"
  },
  {
    "text": "So nothing gets built up until\nyou walk down the stream. Because what's sitting here is\nnot the list, but a promise to",
    "start": "3974470",
    "end": "3980790"
  },
  {
    "text": "generate the list.\nAnd by promise, technically I mean procedure. ",
    "start": "3980790",
    "end": "3988050"
  },
  {
    "text": "So it doesn't get built up. Yeah, I should have said\nthat before this point.",
    "start": "3988050",
    "end": "3994280"
  },
  {
    "text": "OK. Thank you. Let's take a break. ",
    "start": "3994280",
    "end": "4015828"
  }
]