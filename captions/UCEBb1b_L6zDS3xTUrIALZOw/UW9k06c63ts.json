[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "Let's create a new abstraction called a \"process\"\nto capture the notion of a running program.",
    "start": "350",
    "end": "5759"
  },
  {
    "text": "A process encompasses all the resources that\nwould be used when running a program including",
    "start": "5759",
    "end": "10330"
  },
  {
    "text": "those of the CPU, the MMU, input and output\ndevices, etc.",
    "start": "10330",
    "end": "16118"
  },
  {
    "text": "Each process has a \"state\" that captures everything\nwe know about its execution.",
    "start": "16119",
    "end": "21250"
  },
  {
    "text": "The process state includes\n* the hardware state of the CPU, i.e., the",
    "start": "21250",
    "end": "26140"
  },
  {
    "text": "values in the registers and program counter.",
    "start": "26140",
    "end": "29050"
  },
  {
    "text": "* the contents of the process' virtual address\nspace, including code, data values, the stack,",
    "start": "29050",
    "end": "34109"
  },
  {
    "text": "and data objects dynamically allocated from\nthe heap.",
    "start": "34109",
    "end": "38100"
  },
  {
    "text": "Under the management of the MMU, this portion\nof the state can be resident in main memory",
    "start": "38100",
    "end": "42710"
  },
  {
    "text": "or can reside in secondary storage.",
    "start": "42710",
    "end": "46378"
  },
  {
    "text": "* the hardware state of the MMU, which, as\nwe saw earlier, depends on the context-number",
    "start": "46379",
    "end": "51329"
  },
  {
    "text": "and page-directory registers.",
    "start": "51329",
    "end": "53760"
  },
  {
    "text": "Also included are the pages allocated for\nthe hierarchical page map.",
    "start": "53760",
    "end": "58718"
  },
  {
    "text": "* additional information about the process'\ninput and output activities, such as where",
    "start": "58719",
    "end": "63129"
  },
  {
    "text": "it has reached in reading or writing files\nin the file system,",
    "start": "63129",
    "end": "66750"
  },
  {
    "text": "the status and buffers associated with open\nnetwork connections,",
    "start": "66750",
    "end": "70360"
  },
  {
    "text": "pending events from the user interface (e.g.,\nkeyboard characters and mouse clicks), and",
    "start": "70360",
    "end": "75390"
  },
  {
    "text": "so on.",
    "start": "75390",
    "end": "76680"
  },
  {
    "text": "As we'll see, there is a special, privileged\nprocess, called the operating system (OS),",
    "start": "76680",
    "end": "83350"
  },
  {
    "text": "running in its own kernel-mode context.",
    "start": "83350",
    "end": "86460"
  },
  {
    "text": "The OS manages all the bookkeeping for each\nprocess, arranging for the process run periodically.",
    "start": "86460",
    "end": "93579"
  },
  {
    "text": "The OS will provide various services to the\nprocesses, such as accessing data in files,",
    "start": "93579",
    "end": "98929"
  },
  {
    "text": "establishing network connections, managing\nthe window system and user interface, and",
    "start": "98929",
    "end": "103710"
  },
  {
    "text": "so on.",
    "start": "103710",
    "end": "104710"
  },
  {
    "text": "To switch from running one user-mode process\nto another, the OS will need to capture and",
    "start": "104710",
    "end": "109859"
  },
  {
    "text": "save the *entire* state of the current user-mode\nprocess.",
    "start": "109859",
    "end": "114450"
  },
  {
    "text": "Some of it already lives in main memory, so\nwe're all set there.",
    "start": "114450",
    "end": "118319"
  },
  {
    "text": "Some of it will be found in various kernel\ndata structures.",
    "start": "118319",
    "end": "121810"
  },
  {
    "text": "And some of it we'll need to be able to save\nand restore from the various hardware resources",
    "start": "121810",
    "end": "126578"
  },
  {
    "text": "in the CPU and MMU.",
    "start": "126579",
    "end": "129800"
  },
  {
    "text": "In order to successfully implement processes,\nthe OS must be able to make it seem as if",
    "start": "129800",
    "end": "135470"
  },
  {
    "text": "each process was running on its own \"virtual\nmachine\" that works independently of other",
    "start": "135470",
    "end": "141080"
  },
  {
    "text": "virtual machines for other processes.",
    "start": "141080",
    "end": "144420"
  },
  {
    "text": "Our goal is to efficiently share one physical\nmachine between all the virtual machines.",
    "start": "144420",
    "end": "150610"
  },
  {
    "text": "Here's a sketch of the organization we're\nproposing.",
    "start": "150610",
    "end": "153920"
  },
  {
    "start": "151000",
    "end": "151000"
  },
  {
    "text": "The resources provided by a physical machine\nare shown at the bottom of the slide.",
    "start": "153920",
    "end": "158800"
  },
  {
    "text": "The CPU and main memory form the computation\nengine at heart of the system.",
    "start": "158800",
    "end": "164000"
  },
  {
    "text": "Connected to the CPU are various peripherals,\na collective noun coined from the English",
    "start": "164000",
    "end": "168550"
  },
  {
    "text": "word \"periphery\" that indicates the resources\nsurrounding the CPU.",
    "start": "168550",
    "end": "173510"
  },
  {
    "text": "A timer generates periodic CPU interrupts\nthat can be used to trigger periodic actions.",
    "start": "173510",
    "end": "180970"
  },
  {
    "text": "Secondary storage provides high-capacity non-volatile\nmemories for the system.",
    "start": "180970",
    "end": "186730"
  },
  {
    "text": "Connections to the outside world are important\ntoo.",
    "start": "186730",
    "end": "189250"
  },
  {
    "text": "Many computers include USB connections for\nremovable devices.",
    "start": "189250",
    "end": "193480"
  },
  {
    "text": "And most provide wired or wireless network\nconnections.",
    "start": "193480",
    "end": "197620"
  },
  {
    "text": "And finally there are usually video monitors,\nkeyboards and mice that serve as the user",
    "start": "197620",
    "end": "202041"
  },
  {
    "text": "interface.",
    "start": "202041",
    "end": "203720"
  },
  {
    "text": "Cameras and microphones are becoming increasing\nimportant as the next generation of user interface.",
    "start": "203720",
    "end": "210520"
  },
  {
    "text": "The physical machine is managed by the OS\nrunning in the privileged kernel context.",
    "start": "210520",
    "end": "215830"
  },
  {
    "text": "The OS handles the low-level interfaces to\nthe peripherals, initializes and manages the",
    "start": "215830",
    "end": "220980"
  },
  {
    "text": "MMU contexts, and so on.",
    "start": "220980",
    "end": "223230"
  },
  {
    "text": "It's the OS that creates the virtual machine\nseen by each process.",
    "start": "223230",
    "end": "229959"
  },
  {
    "text": "User-mode programs run directly on the physical\nprocessor, but their execution can be interrupted",
    "start": "229960",
    "end": "234610"
  },
  {
    "text": "by the timer,\ngiving the OS the opportunity to save away",
    "start": "234610",
    "end": "237810"
  },
  {
    "text": "the current process state and move to running\nthe next process.",
    "start": "237810",
    "end": "242230"
  },
  {
    "text": "Via the MMU, the OS provides each process\nwith an independent virtual address space",
    "start": "242230",
    "end": "248500"
  },
  {
    "text": "that's isolated from the actions of other\nprocesses.",
    "start": "248500",
    "end": "252040"
  },
  {
    "text": "The virtual peripherals provided by the OS\nisolate the process from all the details of",
    "start": "252040",
    "end": "256759"
  },
  {
    "text": "sharing resources with other processes.",
    "start": "256760",
    "end": "260040"
  },
  {
    "text": "The notion of a window allows the process\nto access a rectangular array of pixels without",
    "start": "260040",
    "end": "265250"
  },
  {
    "text": "having to worry if some pixels in the window\nare hidden by other windows.",
    "start": "265250",
    "end": "269600"
  },
  {
    "text": "Or worrying about how to ensure the mouse\ncursor always appears on top of whatever is",
    "start": "269600",
    "end": "273460"
  },
  {
    "text": "being displayed, and so on.",
    "start": "273460",
    "end": "276729"
  },
  {
    "text": "Instead of accessing I/O devices directly,\neach process has access to a stream of I/O",
    "start": "276730",
    "end": "282480"
  },
  {
    "text": "events that are generated when a character\nis typed, the mouse is clicked, etc.",
    "start": "282480",
    "end": "287370"
  },
  {
    "text": "For example, the OS deals with how to determine\nwhich typed characters belong to which process.",
    "start": "287370",
    "end": "293000"
  },
  {
    "text": "In most window systems, the user clicks on\na window to indicate that the process that",
    "start": "293000",
    "end": "297740"
  },
  {
    "text": "owns the window now has the keyboard focus\nand should receive any subsequent typed characters.",
    "start": "297740",
    "end": "304259"
  },
  {
    "text": "And the position of the mouse when clicked\nmight determine which process receives the",
    "start": "304260",
    "end": "308380"
  },
  {
    "text": "click.",
    "start": "308380",
    "end": "309710"
  },
  {
    "text": "All of which is to say that the details of\nsharing have been abstracted out of the simple",
    "start": "309710",
    "end": "314190"
  },
  {
    "text": "interface provided by the virtual peripherals.",
    "start": "314190",
    "end": "318440"
  },
  {
    "text": "The same is true of accessing files on disk.",
    "start": "318440",
    "end": "321880"
  },
  {
    "text": "The OS provides the useful abstraction of\nhaving each file appear as a contiguous, growable",
    "start": "321880",
    "end": "327070"
  },
  {
    "text": "array of bytes that supports read and write\noperations.",
    "start": "327070",
    "end": "331510"
  },
  {
    "text": "The OS knows how the file is mapped to a pool\nof sectors on the disk and deals with bad",
    "start": "331510",
    "end": "336670"
  },
  {
    "text": "sectors, reducing fragmentation, and improving\nthroughput by doing read look-aheads and write",
    "start": "336670",
    "end": "342090"
  },
  {
    "text": "behinds.",
    "start": "342090",
    "end": "344150"
  },
  {
    "text": "For networks, the OS provides access to an\nin-order stream of bytes to some remote socket.",
    "start": "344150",
    "end": "349590"
  },
  {
    "text": "It implements the appropriate network protocols\nfor packetizing the stream, addressing the",
    "start": "349590",
    "end": "355750"
  },
  {
    "text": "packets, and dealing with dropped, damaged,\nor out-of-order packets.",
    "start": "355750",
    "end": "359780"
  },
  {
    "text": "To configure and control these virtual services,\nthe process communicates with the OS using",
    "start": "359780",
    "end": "365210"
  },
  {
    "text": "supervisor calls (SVCs), a type of controlled-access\nprocedure call that invokes code in the OS",
    "start": "365210",
    "end": "372750"
  },
  {
    "text": "kernel.",
    "start": "372750",
    "end": "373750"
  },
  {
    "text": "The details of the design and implementation\nof each virtual service are beyond the scope",
    "start": "373750",
    "end": "377980"
  },
  {
    "text": "of this course.",
    "start": "377980",
    "end": "379400"
  },
  {
    "text": "If you're interested, a course on operating\nsystems will explore each of these topics",
    "start": "379400",
    "end": "383210"
  },
  {
    "text": "in detail.",
    "start": "383210",
    "end": "385979"
  },
  {
    "text": "The OS provides an independent virtual machine\nfor each process, periodically switching from",
    "start": "385980",
    "end": "391300"
  },
  {
    "text": "running one process to running the next process.",
    "start": "391300",
    "end": "395418"
  },
  {
    "start": "395000",
    "end": "395000"
  },
  {
    "text": "Let's follow along as we switch from running\nprocess #0 to running process #1.",
    "start": "395419",
    "end": "400210"
  },
  {
    "text": "Initially, the CPU is executing user-mode\ncode in process #0.",
    "start": "400210",
    "end": "406150"
  },
  {
    "text": "That execution is interrupted, either by an\nexplicit yield by the program, or, more likely,",
    "start": "406150",
    "end": "411330"
  },
  {
    "text": "by a timer interrupt.",
    "start": "411330",
    "end": "413620"
  },
  {
    "text": "Either ends up transferring control to OS\ncode running in kernel mode, while saving",
    "start": "413620",
    "end": "418060"
  },
  {
    "text": "the current PC+4 value in the XP register.",
    "start": "418060",
    "end": "421280"
  },
  {
    "text": "We'll talk about the interrupt mechanism in\nmore detail in just a moment.",
    "start": "421280",
    "end": "425900"
  },
  {
    "text": "The OS saves the state of process #0 in the\nappropriate table in kernel storage.",
    "start": "425900",
    "end": "431120"
  },
  {
    "text": "Then it reloads the state from the kernel\ntable for process #1.",
    "start": "431120",
    "end": "435650"
  },
  {
    "text": "Note that the process #1 state was saved when\nprocess #1 was interrupted at some earlier",
    "start": "435650",
    "end": "440330"
  },
  {
    "text": "point.",
    "start": "440330",
    "end": "441330"
  },
  {
    "text": "The OS then uses a JMP() to resume user-mode\nexecution using the newly restored process",
    "start": "441330",
    "end": "446300"
  },
  {
    "text": "#1 state.",
    "start": "446300",
    "end": "448740"
  },
  {
    "text": "Execution resumes in process #1 just where\nit was when interrupted earlier.",
    "start": "448740",
    "end": "454050"
  },
  {
    "text": "And now we're running the user-mode program\nin process #1.",
    "start": "454050",
    "end": "458710"
  },
  {
    "text": "We've interrupted one process and resumed\nexecution of another.",
    "start": "458710",
    "end": "463319"
  },
  {
    "text": "We'll keep doing this in a round-robin fashion,\ngiving each process a chance to run, before",
    "start": "463320",
    "end": "467890"
  },
  {
    "text": "starting another round of execution.",
    "start": "467890",
    "end": "471260"
  },
  {
    "text": "The black arrows give a sense for how time\nproceeds.",
    "start": "471260",
    "end": "474820"
  },
  {
    "text": "For each process, virtual time unfolds as\na sequence of executed instructions.",
    "start": "474820",
    "end": "481190"
  },
  {
    "text": "Unless it looks at a real-time clock, a process\nis unaware that occasionally its execution",
    "start": "481190",
    "end": "486160"
  },
  {
    "text": "is suspended for a while.",
    "start": "486160",
    "end": "488450"
  },
  {
    "text": "The suspension and resumption are completely\ntransparent to a running process.",
    "start": "488450",
    "end": "494120"
  },
  {
    "text": "Of course, from the outside we can see that\nin real time, the execution path moves from",
    "start": "494120",
    "end": "498620"
  },
  {
    "text": "process to process, visiting the OS during\nswitches, producing the dove-tailed execution",
    "start": "498620",
    "end": "504780"
  },
  {
    "text": "path we see here.",
    "start": "504780",
    "end": "507770"
  },
  {
    "text": "Time-multiplexing of the CPU is called \"timesharing\"\nand we'll examine the implementation in more",
    "start": "507770",
    "end": "513219"
  },
  {
    "text": "detail in the following segment.",
    "start": "513219",
    "end": "515089"
  }
]