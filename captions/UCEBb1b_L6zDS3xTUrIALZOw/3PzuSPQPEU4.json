[
  {
    "text": "[SQUEAKING]\n[RUSTLING] [CLICKING]",
    "start": "0",
    "end": "5434"
  },
  {
    "start": "5434",
    "end": "25510"
  },
  {
    "text": "PROFESSOR: OK, why\ndon't I get started? So OK, what have we been doing?",
    "start": "25510",
    "end": "34780"
  },
  {
    "text": "So last time, we\nconsidered a bunch of procedures for testing\nproperties of various automata",
    "start": "34780",
    "end": "41710"
  },
  {
    "text": "and grammars, the acceptance\nproblem for DFAs, for NFAs,",
    "start": "41710",
    "end": "50460"
  },
  {
    "text": "the acceptance problem,\nwhich is really degeneration problem for\ncontext-free grammars,",
    "start": "50460",
    "end": "55530"
  },
  {
    "text": "and emptiness problems for\nDFAs and context-free grammars. And also, we showed that\nA,TM is Turing-recognizable.",
    "start": "55530",
    "end": "66558"
  },
  {
    "text": "There's a question here in\nthe chat already about that. Yes, we did show that. That was the universal\nTuring machine",
    "start": "66558",
    "end": "71729"
  },
  {
    "text": "that we presented at the end. That's what shows that A,TM\nis Turing-recognizable.",
    "start": "71730",
    "end": "77010"
  },
  {
    "text": "We mentioned that\nA,TM is not decidable, which we promised\nwe will prove today.",
    "start": "77010",
    "end": "83460"
  },
  {
    "text": "And we will do so. OK, so that is the plan-- proving A,TM is undecidable.",
    "start": "83460",
    "end": "90180"
  },
  {
    "text": "And we'll introduce the\nmethod for doing that called the diagonalization method. I will also show the\ncomplement of A,TM is",
    "start": "90180",
    "end": "98670"
  },
  {
    "text": "Turing-unrecognizable. Even though A,TM\nitself is recognizable, the complement is not.",
    "start": "98670",
    "end": "105660"
  },
  {
    "text": "And then we will introduce\nanother method called the reducibility method for\nshowing other problems are not",
    "start": "105660",
    "end": "112920"
  },
  {
    "text": "decidable and give one example\nof another problem, which is not decidable, assuming\nwe have time to get to it.",
    "start": "112920",
    "end": "119020"
  },
  {
    "text": "If not, we will delay that part\nuntil next Tuesday's lecture.",
    "start": "119020",
    "end": "125490"
  },
  {
    "text": "All right, acceptance\nproblem for Turing Machines. So just as I mentioned,\nwe showed that A,TM,",
    "start": "125490",
    "end": "133560"
  },
  {
    "text": "which is the language of Turing\nmachines and inputs where the machine accepts the input.",
    "start": "133560",
    "end": "139799"
  },
  {
    "text": "We showed that was recognizable. We claimed it was decidable. Today, we're going to\nprove it's not decidable.",
    "start": "139800",
    "end": "145230"
  },
  {
    "text": "All right, now the method\nthat we're going to use,",
    "start": "145230",
    "end": "150519"
  },
  {
    "text": "which is really the\nonly method out there for proving a problem\nas undecidable",
    "start": "150520",
    "end": "159240"
  },
  {
    "text": "is called the\ndiagonalization method. I mean, ultimately, we're going\nto show the reducibility method as well.",
    "start": "159240",
    "end": "164890"
  },
  {
    "text": "But it really depends\non having already shown some other\nproblem undecidable via the diagonalization method.",
    "start": "164890",
    "end": "173049"
  },
  {
    "text": "So ultimately, everything hinges\non the diagonalization method, which is really what we have.",
    "start": "173050",
    "end": "178840"
  },
  {
    "text": "And so to introduce the\ndiagonalization method,",
    "start": "178840",
    "end": "185819"
  },
  {
    "text": "I'm going to make a\nbit of a digression into a branch of mathematics\ncalled set theory",
    "start": "185820",
    "end": "193379"
  },
  {
    "text": "or it's a part of\nmathematical logic, where the method of\ndiagonalization was first",
    "start": "193380",
    "end": "200040"
  },
  {
    "text": "conceived of back in the late\n19th century by a mathematician",
    "start": "200040",
    "end": "205319"
  },
  {
    "text": "called Georg Cantor. And Cantor was considering\nthe problem of,",
    "start": "205320",
    "end": "211140"
  },
  {
    "text": "how do you compare the relative\nsizes of infinite sets?",
    "start": "211140",
    "end": "216530"
  },
  {
    "text": "For finite sets, the problem\nof comparing-- somebody",
    "start": "216530",
    "end": "223490"
  },
  {
    "text": "said that Cantor went crazy. That is true. And maybe I don't know\nwhy he went crazy.",
    "start": "223490",
    "end": "230629"
  },
  {
    "text": "But he did go-- he had some mental\nproblems, unfortunately.",
    "start": "230630",
    "end": "236780"
  },
  {
    "text": " And so how do we compare the\nsizes of sets in general?",
    "start": "236780",
    "end": "243470"
  },
  {
    "text": "If they're finite sets,\nwe can just count them up. We can say, whoa, this\nset has 11 elements,",
    "start": "243470",
    "end": "249740"
  },
  {
    "text": "and the other set\nhas 10 elements. So the one with 11 is bigger. Or if they both have 11,\nthey're the same size.",
    "start": "249740",
    "end": "256620"
  },
  {
    "text": "Well, that's not going\nto work for infinite sets because you can't count them up. And so he had--",
    "start": "256620",
    "end": "262849"
  },
  {
    "text": "Cantor had the following\nidea for comparing the sizes of infinite sets. And that was, basically,\nto see whether you",
    "start": "262850",
    "end": "271940"
  },
  {
    "text": "can have a function\nthat would map from one set to the other\nset with certain properties.",
    "start": "271940",
    "end": "279570"
  },
  {
    "text": "And those properties are\ncalled, traditionally, well, I mean, in the past, have\nbeen called the one-to-one",
    "start": "279570",
    "end": "287310"
  },
  {
    "text": "and onto properties\nfor the function. I'll tell you what that means. But the concept is very simple.",
    "start": "287310",
    "end": "294180"
  },
  {
    "text": "So a one-to-one\nfunction is a function that's mapping from A to B.\nThose are the two sets whose",
    "start": "294180",
    "end": "300240"
  },
  {
    "text": "sizes we're trying to compare. And the function\nbeing one-to-one just",
    "start": "300240",
    "end": "306810"
  },
  {
    "text": "means that there\nare no collisions. If you have two\ndifferent elements of A, they're never going to map\nonto the same element of B.",
    "start": "306810",
    "end": "313530"
  },
  {
    "text": "So two different\nelements of A always map onto two different\nelements of B. So that's the\none-to-one property.",
    "start": "313530",
    "end": "319720"
  },
  {
    "text": "It's also called injective. And the other property is\ncalled onto or surjective,",
    "start": "319720",
    "end": "328960"
  },
  {
    "text": "which is that the range\nof f has to be all of B. So you're not allowed\nto miss any elements, but you have to hit everything.",
    "start": "328960",
    "end": "335669"
  },
  {
    "text": "And when you have both\nof those properties, the function is called a\none-to-one correspondence",
    "start": "335670",
    "end": "341580"
  },
  {
    "text": "or a bijection also, OK? Now another way\nof looking at it--",
    "start": "341580",
    "end": "348510"
  },
  {
    "text": "I don't want to make this\nmore complicated than it needs to be. It just simply\nmeans that two sets",
    "start": "348510",
    "end": "353850"
  },
  {
    "text": "are considered to be the\nsame size if we can match up the elements with one set with\nelements of the other set.",
    "start": "353850",
    "end": "360060"
  },
  {
    "text": "You just pair them up. For example, well, if you\nhave finite sets, that idea,",
    "start": "360060",
    "end": "368760"
  },
  {
    "text": "that informal idea just works\nexactly as you would expect. For example, if we have two\nsets-- here's a set of puppies.",
    "start": "368760",
    "end": "375630"
  },
  {
    "text": "Here's a set of kittens. Now we want to show that those\ntwo sets have the same size.",
    "start": "375630",
    "end": "383300"
  },
  {
    "text": "We could count them up, as I\nmentioned, and see that there are six elements in both. But counting up does not\nwork for infinite sets.",
    "start": "383300",
    "end": "391740"
  },
  {
    "text": "So we can just match up\nthe elements of the puppies",
    "start": "391740",
    "end": "397160"
  },
  {
    "text": "with the kittens,\nand then we know we have the same number\nof puppies as kittens.",
    "start": "397160",
    "end": "402610"
  },
  {
    "text": "OK, now that has the\nadvantage of it making sense when you have infinite sets.",
    "start": "402610",
    "end": "408710"
  },
  {
    "text": "So we're just going\nto extend that idea and apply it to\ninfinite sets too. And then we'll have\na notion of what it means for two infinite\nsets to have the same size.",
    "start": "408710",
    "end": "417280"
  },
  {
    "text": "And you might wonder,\nwhat do you get? Are all infinite\nsets of the same size when you use this notion or not?",
    "start": "417280",
    "end": "424230"
  },
  {
    "text": "What happens? Well, some strange\nthings do happen. But there actually are quite\nsome interesting structure",
    "start": "424230",
    "end": "432790"
  },
  {
    "text": "there that emerges. So anyway, I don't\nwant to rush on.",
    "start": "432790",
    "end": "439660"
  },
  {
    "text": "Questions on any of this? If you want to-- quick question. This, hopefully, was not too\nhard, but I want to make sure",
    "start": "439660",
    "end": "445496"
  },
  {
    "text": "everybody's together with\nme on it, so we can pop in-- I'll give a few seconds for a\nchat if you have any questions.",
    "start": "445497",
    "end": "452530"
  },
  {
    "start": "452530",
    "end": "458580"
  },
  {
    "text": "The range of the set\nis all of the elements that you hit as you look at\nthe different possible elements",
    "start": "458580",
    "end": "464610"
  },
  {
    "text": "of A. So all of the things that\nf hits, the standard notion of a range of a function. ",
    "start": "464610",
    "end": "471220"
  },
  {
    "text": "So the range of f\nhas to be equal to B. You have to hit everything. ",
    "start": "471220",
    "end": "478060"
  },
  {
    "text": "All right, can you think of\na one-to-one correspondence as a relabeling?",
    "start": "478060",
    "end": "483103"
  },
  {
    "text": "Yeah, I'm not sure\nthat's helpful. But, yes, you can think of as\na relabeling of the elements in a sense, but yeah.",
    "start": "483103",
    "end": "489780"
  },
  {
    "text": "I just think of it\nas a matching up. All right, so let's move on.",
    "start": "489780",
    "end": "495320"
  },
  {
    "text": "So coming out of\nthis notion of sets being of the same\nsize with this notion",
    "start": "495320",
    "end": "502669"
  },
  {
    "text": "of countable sets, as\nwe'll see in a minute, so let's do an example.",
    "start": "502670",
    "end": "508400"
  },
  {
    "text": "Let's take the set\nof natural numbers-- 1, 2, 3, 4, dot, dot,\ndot, dot, and the set",
    "start": "508400",
    "end": "513429"
  },
  {
    "text": "of integers, which includes\nthe natural numbers but also the negative\nnumbers and zero.",
    "start": "513429",
    "end": "519370"
  },
  {
    "text": " So the natural\nnumbers are typically",
    "start": "519370",
    "end": "524770"
  },
  {
    "text": "referred to as N. The integers\nare typically referred to as Z. And what do we think of the\nrelative sizes of N and Z?",
    "start": "524770",
    "end": "538210"
  },
  {
    "text": "Well, N is a subset of Z.\nIt's a proper subset of Z. So you might, at first glance,\nthink that Z is larger,",
    "start": "538210",
    "end": "544480"
  },
  {
    "text": "and they're not really going\nto be of the same size. But actually, it turns out that\nthere's a very simple way--",
    "start": "544480",
    "end": "550959"
  },
  {
    "text": "the arithmetic and the\nproperties of infinite sets can be a little bit surprising.",
    "start": "550960",
    "end": "556000"
  },
  {
    "text": "And there is a way of matching\nup all of the elements of Z with their own elements\nof N. And so you",
    "start": "556000",
    "end": "563589"
  },
  {
    "text": "can show that following that\ndefinition, that these two sets are, in fact, of the same size.",
    "start": "563590",
    "end": "570019"
  },
  {
    "text": "So let's just quickly go\nmake sure you see that. So here is N. Here\nis Z I'm going",
    "start": "570020",
    "end": "577450"
  },
  {
    "text": "to write down a table which\nshows how they match up. Here is the function f of n\nthat I'm going to be describing.",
    "start": "577450",
    "end": "583420"
  },
  {
    "text": "That's the one-to-one\ncorrespondence. And so here are the\nnatural numbers--",
    "start": "583420",
    "end": "588880"
  },
  {
    "text": "dot, dot, dot, 1 through\n7, dot, dot, dot. And here are the\nelements of Z that I'm going to be matching up.",
    "start": "588880",
    "end": "594670"
  },
  {
    "text": "This is how the\nfunction is working. So one, I'm going to-- f of 1 is going to be 0. F of 2 is going to be minus 1.",
    "start": "594670",
    "end": "601840"
  },
  {
    "text": "F of 3 is going to be 1. And I'm just giving\nyou a way to match up",
    "start": "601840",
    "end": "608740"
  },
  {
    "text": "each of the natural\nnumbers with integers so that every single integer has\nits own natural number and vice",
    "start": "608740",
    "end": "616910"
  },
  {
    "text": "versa.  So 4 goes to minus 2. 5 goes to 2.",
    "start": "616910",
    "end": "622725"
  },
  {
    "text": "6 goes to minus 3. 7 goes to 3, and then minus\n4, and then 4, and minus 5,",
    "start": "622725",
    "end": "627740"
  },
  {
    "text": "and then 5, and so on. You're clearly\ngoing to cover all of the integers in this way. And each of the\nnatural numbers is",
    "start": "627740",
    "end": "634110"
  },
  {
    "text": "going to have its own integer. And there's never going\nto be any collisions. There's never going to be\ntwo natural numbers assigned to the same integer.",
    "start": "634110",
    "end": "640270"
  },
  {
    "text": "So this meets the conditions\nof a one-to-one correspondence and shows that the natural\nnumbers and the integers",
    "start": "640270",
    "end": "649410"
  },
  {
    "text": "have the same size\nfollowing this definition.",
    "start": "649410",
    "end": "655399"
  },
  {
    "text": "OK, let's do one that's slightly\nmore complicated and, perhaps,",
    "start": "655400",
    "end": "662030"
  },
  {
    "text": "slightly more surprising,\nwhich is that if you consider all of the rational numbers,\nand then they have the same--",
    "start": "662030",
    "end": "671714"
  },
  {
    "text": "that is a collection. Even though the\nrational numbers seem to be much richer and more\nnumerous than the integers,",
    "start": "671715",
    "end": "679190"
  },
  {
    "text": "from this perspective,\nthey have the same size. And for the simplicity\nof my presentation,",
    "start": "679190",
    "end": "685110"
  },
  {
    "text": "I'm going to consider only\nthe positive rational numbers, which I'm going to write as Q+. So those are all of the\npositive rational numbers",
    "start": "685110",
    "end": "692930"
  },
  {
    "text": "that can be expressed as a\nratio of two natural numbers. And I'm going to show that there\nis a one-to-one correspondence",
    "start": "692930",
    "end": "701000"
  },
  {
    "text": "between these positive\nrational numbers and the natural numbers.",
    "start": "701000",
    "end": "706820"
  },
  {
    "text": "OK, so here, I'm\ngoing to, again, make a table, just\nas I did up above--",
    "start": "706820",
    "end": "713510"
  },
  {
    "text": "so comparing the\nnatural numbers and the positive rational numbers. And to do that, I'm going\nto write down over here",
    "start": "713510",
    "end": "721010"
  },
  {
    "text": "on the side, just\nto help you see how I'm getting this table,\na separate table that",
    "start": "721010",
    "end": "728180"
  },
  {
    "text": "has all of the positive\nrational numbers appearing in a nicely organized way.",
    "start": "728180",
    "end": "735170"
  },
  {
    "text": "Here are all of the\nrational numbers here that have 1 as a numerator,\nthat have 2 as a numerator,",
    "start": "735170",
    "end": "740960"
  },
  {
    "text": "and so on, and going\nthrough across the columns, the different denominators.",
    "start": "740960",
    "end": "746310"
  },
  {
    "text": "So the numbers\ninside here represent all of the different\nrational numbers. And so whatever rational\nnumber you have,",
    "start": "746310",
    "end": "752900"
  },
  {
    "text": "m over n, that's\ngoing to appear down the nth row in the nth column.",
    "start": "752900",
    "end": "759018"
  },
  {
    "text": "That number is going to appear. So they're all going to show up. And I'm going to use this table\nhere to fill out this function.",
    "start": "759018",
    "end": "769070"
  },
  {
    "text": "So here are all the\nnatural numbers. And the way I'm going to assign\nthe rational numbers to appear",
    "start": "769070",
    "end": "776950"
  },
  {
    "text": "over here is I'm just going to\nwork my way in from the corner.",
    "start": "776950",
    "end": "782680"
  },
  {
    "text": "And I'm going to do\nthat by doing layers. So first, I'll take\nthe 1 in this number",
    "start": "782680",
    "end": "789370"
  },
  {
    "text": "here in this corner. Then, I'll do these\nthree that surrounded it, and then these guys\nthat surround that,",
    "start": "789370",
    "end": "795550"
  },
  {
    "text": "and these guys sort of in shells\ngoing around the previous ones that I've already covered.",
    "start": "795550",
    "end": "800829"
  },
  {
    "text": "OK, so let me illustrate that. So here's 1 over 1, my\nfirst rational number",
    "start": "800830",
    "end": "806530"
  },
  {
    "text": "that I'm going to\nenter into the table, appearing right over there. So next, I'm going\nto go 2 over 1.",
    "start": "806530",
    "end": "812560"
  },
  {
    "text": "That's going to appear\nin the table over there. Now, we have 2 over 2. Now that's actually a little\nbit problematic because 2 over 2",
    "start": "812560",
    "end": "821210"
  },
  {
    "text": "has already been done. And if we put that in-- because 2 over 2\nequals 1 over 1.",
    "start": "821210",
    "end": "827060"
  },
  {
    "text": "They're both the equal\nto the rational number 1. So if we put 2 over 2\nin this table over here,",
    "start": "827060",
    "end": "832910"
  },
  {
    "text": "then we would no longer\nhave the one-to-one property because both 1 and 3 would\nbe mapping to the same point.",
    "start": "832910",
    "end": "839850"
  },
  {
    "text": "So we're just going to\nsimply skip over 2 over 2. I'll show that as kind\nof graying it out.",
    "start": "839850",
    "end": "846930"
  },
  {
    "text": "So we're not going to add\nthat one on to the table onto my function.",
    "start": "846930",
    "end": "852650"
  },
  {
    "text": "But so we'll skip over that. We'll go to 1 over 2, which\nhas not been seen before.",
    "start": "852650",
    "end": "858532"
  },
  {
    "text": "And then we're just going to\ncontinue doing the same thing, now going to this\nnext shell out here.",
    "start": "858532",
    "end": "863600"
  },
  {
    "text": "3 over 1, 3 over 2, 3 over 3--",
    "start": "863600",
    "end": "868759"
  },
  {
    "text": "same thing, we're going\nto skip over that one-- 2 over 3, 1 over 3.",
    "start": "868760",
    "end": "874600"
  },
  {
    "text": "I hope you're getting the idea. So I'm not going\nto fill this table. I ran out of room to fill\nout this table some more.",
    "start": "874600",
    "end": "881410"
  },
  {
    "text": "But just to look at how the\nprocess is going to continue here, we get 4 over 1. Now 4 over 2, again, is a\nnumber we previously seen",
    "start": "881410",
    "end": "889630"
  },
  {
    "text": "because that's the\nrational number 2. We saw that up here\nwhen we had 2 over 1, so we're going to\nhave to skip that one.",
    "start": "889630",
    "end": "896170"
  },
  {
    "text": "4 over 3, 4 over 4-- that was going to skip. 3 over 4, and so on.",
    "start": "896170",
    "end": "902759"
  },
  {
    "text": "OK? So by following\nthis procedure, I'm going to be able to\ndefine this function.",
    "start": "902760",
    "end": "908977"
  },
  {
    "text": "Now this function\nis not particularly nice in terms of having\nan elegant, closed form.",
    "start": "908978",
    "end": "914120"
  },
  {
    "text": "But it is a totally\nlegitimate function in the sense of being a\nmapping from natural numbers",
    "start": "914120",
    "end": "920000"
  },
  {
    "text": "to the positive\nrational numbers. And it has the one-to-one\ncorrespondence property.",
    "start": "920000",
    "end": "927530"
  },
  {
    "text": "So it pairs up each\nof the natural numbers with each of the positive\nrational numbers.",
    "start": "927530",
    "end": "936740"
  },
  {
    "text": "They each get their\nown mate, in a sense. And so that shows that\nthe rational numbers,",
    "start": "936740",
    "end": "942050"
  },
  {
    "text": "despite the fact\nthat they're dense, and they have all sorts of\nvery more much bigger seeming,",
    "start": "942050",
    "end": "948020"
  },
  {
    "text": "they really, from this\nperspective of the sizes of the sets, they have the same\nsize as the natural numbers do.",
    "start": "948020",
    "end": "956209"
  },
  {
    "text": "And so with that, it suggests\nthat the following definition that a set is\ncountable if it has",
    "start": "956210",
    "end": "962600"
  },
  {
    "text": "the same size as the natural\nnumbers or it's finite. From this perspective,\nwe're going",
    "start": "962600",
    "end": "968000"
  },
  {
    "text": "to be focusing on infinite sets. But yeah, countable or countably\ninfinite, sometimes people say,",
    "start": "968000",
    "end": "973939"
  },
  {
    "text": "if it has the same size\nas the natural numbers. Or otherwise, you have to\ninclude the finite sets as well. And countable means you can\njust go through the elements",
    "start": "973940",
    "end": "983450"
  },
  {
    "text": "of the set as a list. So you can count them-- the\nfirst one, the second one,",
    "start": "983450",
    "end": "989630"
  },
  {
    "text": "the third one, the fourth\none, dot, dot, dot. And once you can do\nthat, and that counting",
    "start": "989630",
    "end": "994990"
  },
  {
    "text": "is going to hit everything,\nthen you know can match them-- you can pair them up\nwith the natural numbers.",
    "start": "994990",
    "end": "1000569"
  },
  {
    "text": "And so therefore, you\nhave a countable set. OK. So as we've shown,\nboth Z, the integers,",
    "start": "1000570",
    "end": "1009750"
  },
  {
    "text": "and the positive rational\nnumbers are countable sets. OK? Now you might think\nthat, well, since we're",
    "start": "1009750",
    "end": "1017840"
  },
  {
    "text": "allowing ourselves\nto do something as arbitrary, in a way,\nas this kind of a function",
    "start": "1017840",
    "end": "1026539"
  },
  {
    "text": "to match up the natural numbers\nwith whatever set you're trying to measure, that every set\nis going to be countable,",
    "start": "1026540",
    "end": "1035572"
  },
  {
    "text": "if you think about it that way\nbecause it seems like you're allowing too many possibilities. And then all the\ninfinite sets are",
    "start": "1035572",
    "end": "1041869"
  },
  {
    "text": "going to end up being the same\nsize as the natural numbers. Well, that is, in\nfact, is not true.",
    "start": "1041869",
    "end": "1048000"
  },
  {
    "text": "And I don't know. Cantor, is the one\nwho discovered that. I don't know if that\nwas surprising or not.",
    "start": "1048000",
    "end": "1055500"
  },
  {
    "text": "But it is interesting,\nI think, that there are different sizes of infinities.",
    "start": "1055500",
    "end": "1061940"
  },
  {
    "text": "And so we're going to now\ntake a look and see that. But I want to, again,\nI want to stop and make",
    "start": "1061940",
    "end": "1071660"
  },
  {
    "text": "sure we're all together. Can we always find\na closed formula for f, somebody's asking me.",
    "start": "1071660",
    "end": "1076850"
  },
  {
    "text": "I don't know. For this particular\nf, you probably could,",
    "start": "1076850",
    "end": "1083460"
  },
  {
    "text": "but it would probably\nbe very messy. But in general, that's\nnot a requirement,",
    "start": "1083460",
    "end": "1089940"
  },
  {
    "text": "having a closed form for\nthe mapping function. Any function is allowed as long\nas a one-to-one correspondence.",
    "start": "1089940",
    "end": "1097320"
  },
  {
    "text": " Are we all together on this? Are we comfortable\nwith the notion",
    "start": "1097320",
    "end": "1103920"
  },
  {
    "text": "of some infinite sets\nhaving the same size as the natural numbers,\nand therefore, we're going",
    "start": "1103920",
    "end": "1110010"
  },
  {
    "text": "to call them countable sets? And we're going to show\nsome other sets are going to have more elements.",
    "start": "1110010",
    "end": "1116520"
  },
  {
    "text": "They're going to be uncountable. They're going to be beyond-- strictly speaking, strictly\nlarger sets in the sense",
    "start": "1116520",
    "end": "1123300"
  },
  {
    "text": "that we won't be\nable to put them into a one-to-one correspondence\nwith the integers. So is N the smallest infinity?",
    "start": "1123300",
    "end": "1129540"
  },
  {
    "text": "Yes, N is the smallest one. So any infinity\nis going to have--",
    "start": "1129540",
    "end": "1136920"
  },
  {
    "text": "you're going to always-- I don't think you even need it-- you need a special--",
    "start": "1136920",
    "end": "1142620"
  },
  {
    "text": "whenever you have an\ninfinite collection, you can always\nfind a subset which is going to be a\ncountable subset",
    "start": "1142620",
    "end": "1152447"
  },
  {
    "text": "and is going to be the\nsmallest of the infinities, but there are bigger ones. All right, why don't we move on?",
    "start": "1152447",
    "end": "1157980"
  },
  {
    "text": " OK, so the example of a set that\nwe will show is not countable--",
    "start": "1157980",
    "end": "1167280"
  },
  {
    "text": "an uncountable set,\nas we call it-- is a set of real numbers, which\nwe all know what these are,",
    "start": "1167280",
    "end": "1177910"
  },
  {
    "text": "I hope. These are all of\nthe numbers that you can express by possibly\ninfinite decimal representations",
    "start": "1177910",
    "end": "1184620"
  },
  {
    "text": "like pi, or E squared of 2, or\nany of the other familiar ones.",
    "start": "1184620",
    "end": "1190890"
  },
  {
    "text": "Rational numbers are also\nmembers of or also count",
    "start": "1190890",
    "end": "1196590"
  },
  {
    "text": "as real numbers\nand integers too. And so but there are\nthese additional numbers",
    "start": "1196590",
    "end": "1204390"
  },
  {
    "text": "that you can get by the\ndecimal expansions which may not be rational.",
    "start": "1204390",
    "end": "1209520"
  },
  {
    "text": "And that collection, even\nthough, in some ways, it looks somewhat similar\nto the rational numbers,",
    "start": "1209520",
    "end": "1216059"
  },
  {
    "text": "the real numbers-- I hope I said that right. The real numbers,\nwhich is the set",
    "start": "1216060",
    "end": "1222900"
  },
  {
    "text": "I'm considering here, the\nones with the infinite decimal expansions, they\nactually are much larger.",
    "start": "1222900",
    "end": "1230200"
  },
  {
    "text": "So the theorem is-- and this\nwas discovered by Cantor--",
    "start": "1230200",
    "end": "1236649"
  },
  {
    "text": "that R is an uncountable set. And the reason why\nI'm introducing",
    "start": "1236650",
    "end": "1242110"
  },
  {
    "text": "this is, besides that I think\nit's interesting and has",
    "start": "1242110",
    "end": "1247780"
  },
  {
    "text": "some relation to the kinds\nof things we're doing, but it's really for\nthe purposes right now,",
    "start": "1247780",
    "end": "1253630"
  },
  {
    "text": "is to introduce this method\ncalled diagonalization. ",
    "start": "1253630",
    "end": "1259130"
  },
  {
    "text": "OK, that's what we're going\nto use later on again. But this is the first\ntime it appeared.",
    "start": "1259130",
    "end": "1264530"
  },
  {
    "text": "So we're going to use a proof\nby contradiction in order to show that R, the\ncollection of real numbers,",
    "start": "1264530",
    "end": "1272059"
  },
  {
    "text": "is uncountable. And we'll assume,\nfor contradiction, that R countable.",
    "start": "1272060",
    "end": "1277909"
  },
  {
    "text": "OK? So if we assume\nthat R is countable,",
    "start": "1277910",
    "end": "1283340"
  },
  {
    "text": "it means we have, by definition,\na one-to-one correspondence from the natural numbers\nto the real numbers.",
    "start": "1283340",
    "end": "1289530"
  },
  {
    "text": "OK, so we can match up\nall of the natural numbers with the real numbers in a\none-to-one and onto fashion.",
    "start": "1289530",
    "end": "1297520"
  },
  {
    "text": "So we can pair up the natural\nnumbers with the real numbers. And we will cover all of the\nreal numbers by doing that.",
    "start": "1297520",
    "end": "1304240"
  },
  {
    "text": "And we can make a table,\njust like I did before. Here it is.",
    "start": "1304240",
    "end": "1310770"
  },
  {
    "text": "And you can fill this out\nwith all of the real numbers. And that was what\nthe assumption means.",
    "start": "1310770",
    "end": "1317940"
  },
  {
    "text": "And I'm going to show you\nthat that's impossible. Something is going to go\nterribly wrong if you do that.",
    "start": "1317940",
    "end": "1324700"
  },
  {
    "text": "Now you might disagree. You might be surprised. You might think,\nwell, Professor Sipser",
    "start": "1324700",
    "end": "1333200"
  },
  {
    "text": "is wrong, that I'm going\nto work on this overnight and forget the\nrest of my classes,",
    "start": "1333200",
    "end": "1339080"
  },
  {
    "text": "and I'm going to come up with\na list of all the real numbers. I'm going to fill\nthem out here and show",
    "start": "1339080",
    "end": "1346280"
  },
  {
    "text": "that that's impossible. So let's say, hypothetically,\njust for my example's sake,",
    "start": "1346280",
    "end": "1351740"
  },
  {
    "text": "here is the list that\nyou came up with. So you have to match up\nsomething with the 1.",
    "start": "1351740",
    "end": "1357200"
  },
  {
    "text": "Let's say, E. That\nwas a special case, so you're going to\nstick that with 1. And then pi came\nout to be the number",
    "start": "1357200",
    "end": "1363320"
  },
  {
    "text": "that you connected up with 2. You understand what\nI'm doing here? I'm making a list.",
    "start": "1363320",
    "end": "1368330"
  },
  {
    "text": "I'm trying to make my\ncorrespondence-- my matching up between the natural\nnumbers and my real numbers",
    "start": "1368330",
    "end": "1374870"
  },
  {
    "text": "that I'm hypothesizing to\nexist for a contradiction. So 3, I don't know, 3\nis gets connected to 0.",
    "start": "1374870",
    "end": "1383000"
  },
  {
    "text": "I'm making this up, obviously-- not on the spot. I wrote the slide,\nyou know, yesterday.",
    "start": "1383000",
    "end": "1389210"
  },
  {
    "text": "But here is the square root of 2\nshowing up for whatever reason. Here is 1/7.",
    "start": "1389210",
    "end": "1395960"
  },
  {
    "text": "Here is some other number,\nwhich, I'll be interested if you recognize that one. That's a subtle one.",
    "start": "1395960",
    "end": "1401240"
  },
  {
    "text": " This is 1.234-- yeah, some\nfamiliar looking sequence here.",
    "start": "1401240",
    "end": "1409929"
  },
  {
    "text": "And whatever it is-- whatever it is, this is\nwhat you came up with. You claim that this\nis going to work as--",
    "start": "1409930",
    "end": "1417160"
  },
  {
    "text": "very good. Somebody got it. It's i to the ith power. But let's not get hung\nup on that, please.",
    "start": "1417160",
    "end": "1424640"
  },
  {
    "text": "I to the ith power,\noddly enough, can be seen as a\nreal number under-- if you define the imaginary\nexponentiation, which is weird.",
    "start": "1424640",
    "end": "1435559"
  },
  {
    "text": "But anyway, let's not\nget too distracted. So here's my list of\nnumbers, my real numbers",
    "start": "1435560",
    "end": "1443230"
  },
  {
    "text": "that I've matched up in my table\nhere with the natural numbers. Now I claim\nsomething goes wrong.",
    "start": "1443230",
    "end": "1449710"
  },
  {
    "text": "What goes wrong? I'm going to show you\nthat you actually did not",
    "start": "1449710",
    "end": "1455830"
  },
  {
    "text": "do as you claimed,\nthat there's actually at least one number that's\nmissing from this list.",
    "start": "1455830",
    "end": "1463022"
  },
  {
    "text": "And I'll exhibit that number. I'm going to show you\nwhat that number is. I'm going to explicitly\ncome up with a number and show you that\nthere's that number it's",
    "start": "1463022",
    "end": "1469690"
  },
  {
    "text": "missing from the list. So here, it's going\nto be a number x.",
    "start": "1469690",
    "end": "1474910"
  },
  {
    "text": "X is the one that's missing. So how am I going to get x? So x, well, I'm going to\nstart it off with 0 point,",
    "start": "1474910",
    "end": "1481300"
  },
  {
    "text": "and then I'm going to fill\nout the rest of the places. And how am I going\nto get those places? I'm going to look\nat the table here.",
    "start": "1481300",
    "end": "1486490"
  },
  {
    "text": " So I want to look at-- to get my first digit after\nthe decimal point of x,",
    "start": "1486490",
    "end": "1493610"
  },
  {
    "text": "I'm going to look\nat the first digit after the decimal point\nof the very first number.",
    "start": "1493610",
    "end": "1499390"
  },
  {
    "text": "So I take the first number,\nlook at the first digit after the decimal point,\nwhich happens to be a 7.",
    "start": "1499390",
    "end": "1505410"
  },
  {
    "text": "And the number I'm\ngoing to put in for x It's not going to be 7. It's going to be\nanything except 7.",
    "start": "1505410",
    "end": "1511889"
  },
  {
    "text": "Let say, 8.  For my next digit of x,\nI'm going to look at--",
    "start": "1511890",
    "end": "1518720"
  },
  {
    "text": "so my second digit\nof x, I'm going to-- everything's going to be\nup to the decimal point now, so I'm not going\nto keep saying that.",
    "start": "1518720",
    "end": "1524860"
  },
  {
    "text": "I'm going to look\nat the second digit of the second number, which is\na 4 after the decimal point.",
    "start": "1524860",
    "end": "1531880"
  },
  {
    "text": " There it is. And for the second\ndigit of x, I'm",
    "start": "1531880",
    "end": "1538300"
  },
  {
    "text": "going to use something which\nis anything besides 4-- 5.",
    "start": "1538300",
    "end": "1544150"
  },
  {
    "text": "I have some flexibility here. So I could have used 6. I could have used 7.",
    "start": "1544150",
    "end": "1549820"
  },
  {
    "text": "For those of you who\nhave seen this before, who are going to\nnitpick on me, I'm going to stay away from 9\nand 0 just because there",
    "start": "1549820",
    "end": "1558039"
  },
  {
    "text": "is some little edge cases that\narise there, which I don't want to get into because\nI don't think it's interesting for this argument.",
    "start": "1558040",
    "end": "1564910"
  },
  {
    "text": "But since I have\nsome flexibility, I'm going to avoid\nzeros and nines-- probably just nines\nis all I really need.",
    "start": "1564910",
    "end": "1570140"
  },
  {
    "text": "And then the argument is\njust going to work fine, OK?",
    "start": "1570140",
    "end": "1575800"
  },
  {
    "text": "So the next digit is a 0. The third digit, or the\nthird number is a 0.",
    "start": "1575800",
    "end": "1582900"
  },
  {
    "text": "The third digit of x is going\nto be anything except for 0. It could be a 1. Then I have a 2 here.",
    "start": "1582900",
    "end": "1590760"
  },
  {
    "text": "Anything except a 2, 6.",
    "start": "1590760",
    "end": "1596110"
  },
  {
    "text": "Then a 5-- anything\nexcept a 5, a 1. A 9-- anything except\na 9, an 8, and so on.",
    "start": "1596110",
    "end": "1603670"
  },
  {
    "text": "There's an 8. There's a 2, and dot, dot, dot. I'm just going to\nkeep doing that.",
    "start": "1603670",
    "end": "1609270"
  },
  {
    "text": "And I'm going to say you missed\nthat number, whatever it is.",
    "start": "1609270",
    "end": "1614330"
  },
  {
    "text": "But that number,\nthat's a number. After I'm all done,\nit's going to be the decimal representation\nof something.",
    "start": "1614330",
    "end": "1620200"
  },
  {
    "text": "And that number, I claim,\nis absent from the table.",
    "start": "1620200",
    "end": "1626480"
  },
  {
    "text": "And you might say,\nwell, it's really there.",
    "start": "1626480",
    "end": "1632570"
  },
  {
    "text": "It's just on the 23rd row. You just didn't get\nto it and your slide.",
    "start": "1632570",
    "end": "1640040"
  },
  {
    "text": "But it's there. Well, I'm going to say I\nknow it's not in the 23rd row because it differs from\nthe number in the 23rd row",
    "start": "1640040",
    "end": "1647270"
  },
  {
    "text": "at the 23rd digit because\nI constructed it that way. This number is\ndesigned explicitly",
    "start": "1647270",
    "end": "1654740"
  },
  {
    "text": "to be different from each of\nthe numbers that's on the list. ",
    "start": "1654740",
    "end": "1661255"
  },
  {
    "text": "So it can't be on\nthe list because it's been constructed to be\ndifferent from each of them in at least one place. ",
    "start": "1661255",
    "end": "1668290"
  },
  {
    "text": "So I think this is a\nbeautiful argument, and it shows that\nno matter how you",
    "start": "1668290",
    "end": "1673500"
  },
  {
    "text": "try to come up with a\none-to-one correspondence, you're going to fail.",
    "start": "1673500",
    "end": "1678990"
  },
  {
    "text": "You might say, oh,\nlike, just one number? I did so much hard work.",
    "start": "1678990",
    "end": "1684783"
  },
  {
    "text": "I'm missing just one number. Can't I get partial credit\nand put this one on the list now I fixed it?",
    "start": "1684783",
    "end": "1690270"
  },
  {
    "text": "No. Obviously, there are many,\nmany numbers that are missing. If you put this\none on the list, I was going to construct another\nnumber that was missing.",
    "start": "1690270",
    "end": "1696570"
  },
  {
    "text": "So there's just not no\npossibility of fixing this.",
    "start": "1696570",
    "end": "1704309"
  },
  {
    "text": "And in fact, the real\nnumbers are uncountable--",
    "start": "1704310",
    "end": "1709323"
  },
  {
    "text": "cannot be matched up\nwith the natural numbers. And there's nothing. It doesn't even come close. ",
    "start": "1709323",
    "end": "1716650"
  },
  {
    "text": "So here, a summary\nof what I just said. F is not a one-to-one\ncorrespondence",
    "start": "1716650",
    "end": "1722632"
  },
  {
    "text": "no matter what you try to do. You can't come up with a\none-to-one correspondence. That's the contradiction.",
    "start": "1722632",
    "end": "1728900"
  },
  {
    "text": "So that proves that\nR is uncountable. And that's why, by the way,\nwe call this a diagonalization",
    "start": "1728900",
    "end": "1736760"
  },
  {
    "text": "because we're going\ndown this diagonal here that's where the term-- that's\nwhere the name is come from.",
    "start": "1736760",
    "end": "1742990"
  },
  {
    "text": "OK, so I'm happy to--",
    "start": "1742990",
    "end": "1748720"
  },
  {
    "text": "[CHUCKLES] OK, that's a-- ",
    "start": "1748720",
    "end": "1754260"
  },
  {
    "text": "somebody's asking me--\n[CHUCKLES] I'm actually-- I have a-- is it here?",
    "start": "1754260",
    "end": "1760570"
  },
  {
    "text": "I can't remember if it's here. I have a check-in\ncoming about this. And somebody is\nanticipating that",
    "start": "1760570",
    "end": "1767640"
  },
  {
    "text": "by asking the actually rather\nfamous question about there being a possible infinity in\nbetween the natural numbers",
    "start": "1767640",
    "end": "1776549"
  },
  {
    "text": "and the real numbers. We know the real\nnumbers now are bigger than the natural numbers. But is there something\nthat's an in between?",
    "start": "1776550",
    "end": "1782490"
  },
  {
    "text": "I mean, this is a very,\nvery famous problem, which I'll talk about when\nwe get to our check-in, which",
    "start": "1782490",
    "end": "1789090"
  },
  {
    "text": "is coming up. ",
    "start": "1789090",
    "end": "1795020"
  },
  {
    "text": "Somebody is objecting\njust the way I've defined x using\nthis procedure that really can't, in a sense, state,\nyou know-- but x is a number.",
    "start": "1795020",
    "end": "1803700"
  },
  {
    "text": "X is the result of\nwhat this procedure is. Following this procedure,\nwe're converging",
    "start": "1803700",
    "end": "1809730"
  },
  {
    "text": "on some particular value. And so that is a value. If you want, we can make a more\nprecise way of determining.",
    "start": "1809730",
    "end": "1818372"
  },
  {
    "text": "We don't have the\nflexibility of choosing the way I did in my example. We can make a precise\nprocedure for coming up",
    "start": "1818372",
    "end": "1824850"
  },
  {
    "text": "with these digits. But I don't think there's\nanybody thinks there's anything that's-- ",
    "start": "1824850",
    "end": "1832460"
  },
  {
    "text": "there's any shortcoming\nin this argument in terms of the way we're defining x.",
    "start": "1832460",
    "end": "1837470"
  },
  {
    "text": "I think it's worth understanding\nthis because it's really going to set the groundwork for our\nproof that A,TM is undecidable,",
    "start": "1837470",
    "end": "1847429"
  },
  {
    "text": "which is a little,\nI think, perhaps, slightly more abstract in a\nway in the way it sort of comes across.",
    "start": "1847430",
    "end": "1853220"
  },
  {
    "text": "I'm going to try\nto connect the two. But I think it's\nhelpful to understand",
    "start": "1853220",
    "end": "1858320"
  },
  {
    "text": "at least this argument\nbecause this argument is diagonalization in\nits most raw form.",
    "start": "1858320",
    "end": "1864470"
  },
  {
    "start": "1864470",
    "end": "1869600"
  },
  {
    "text": "All right, I think we're good. So why don't we continue, then? So there are a\nnumber of corollaries",
    "start": "1869600",
    "end": "1876559"
  },
  {
    "text": "that follow from the statement\nthat the real numbers is uncountable. ",
    "start": "1876560",
    "end": "1883910"
  },
  {
    "text": "First of all, if\nyou let script L be the collection\nof all languages,",
    "start": "1883910",
    "end": "1889485"
  },
  {
    "text": "if you want to consider it\nover some particular alphabet, that's fine. But that's not going to be\nreally important for this point",
    "start": "1889485",
    "end": "1899010"
  },
  {
    "text": "that I'm going to make. So script L is the\ncollection of all languages.",
    "start": "1899010",
    "end": "1906539"
  },
  {
    "text": "So every subset of sigma star-- every subset of sigma\nstar is a language.",
    "start": "1906540",
    "end": "1913250"
  },
  {
    "text": "So look at all those\npossible subsets. So that includes 0\nto the k, 1 to the k,",
    "start": "1913250",
    "end": "1919040"
  },
  {
    "text": "plus every other language you\ncan ever think of and more-- all possible languages.",
    "start": "1919040",
    "end": "1924730"
  },
  {
    "text": "So the collection of all\nlanguages is uncountable. There's uncountably many\ndifferent languages out there.",
    "start": "1924730",
    "end": "1932110"
  },
  {
    "text": "I don't want to\nbelabor this point. You can just take this\nif you don't quite follow the quick argument\nI'm going to make here.",
    "start": "1932110",
    "end": "1938530"
  },
  {
    "text": "But you can make a\none-to-one correspondence from all languages to the\nreals so that each language",
    "start": "1938530",
    "end": "1947650"
  },
  {
    "text": "gets its own real number. And the way I'm going to\nthink about that-- let's put the real numbers\ninto binary form.",
    "start": "1947650",
    "end": "1955220"
  },
  {
    "text": "And if you imagine\nhere being sigma star, all of the possible\nstrings of sigma star written out in\ntheir standard order.",
    "start": "1955220",
    "end": "1963560"
  },
  {
    "text": "And now if you have\na language here, A, it's just some\narbitrary language. So that's going to have some\nof the strings of sigma star",
    "start": "1963560",
    "end": "1972210"
  },
  {
    "text": "appearing. Like 0 is appearing,\nbut 1 is not appearing. 00 is appearing and 01,\nbut not these three.",
    "start": "1972210",
    "end": "1978590"
  },
  {
    "text": " And I'm going to associate\nto A, my language,",
    "start": "1978590",
    "end": "1984600"
  },
  {
    "text": "some real number in binary by\nputting in a 0 in the decimal",
    "start": "1984600",
    "end": "1991440"
  },
  {
    "text": "representation-- well,\nthe binary representation, I should say-- for that string if it's not\nthere and a 1 if it is there.",
    "start": "1991440",
    "end": "2000770"
  },
  {
    "text": " And so a real number--\nbecause there's infinitely",
    "start": "2000770",
    "end": "2007860"
  },
  {
    "text": "many yes/no choices in\nthe binary representation can represent a\nlanguage because of each",
    "start": "2007860",
    "end": "2015090"
  },
  {
    "text": "of the yes/no choices of a\nstring being present or not. I'm going to put a 1 for\nwhen the string is present,",
    "start": "2015090",
    "end": "2020450"
  },
  {
    "text": "a 0 when it's not present. So each language has\nits own real number, and each real number\nis going to be",
    "start": "2020450",
    "end": "2026280"
  },
  {
    "text": "associated to its own language. Here, I'm restricting myself to\nreal numbers between 0 and 1.",
    "start": "2026280",
    "end": "2032420"
  },
  {
    "text": "That's not going to\nbe an essential point. So let's not get\nhung up on that. ",
    "start": "2032420",
    "end": "2040050"
  },
  {
    "text": "So the fact that the\nlanguages can be putting it",
    "start": "2040050",
    "end": "2050679"
  },
  {
    "text": "into a one-to-one correspondence\nwith the real numbers shows that the collection of all\nlanguages is also uncountable.",
    "start": "2050679",
    "end": "2059230"
  },
  {
    "text": "Now another observation here-- another point worth noting is\nthat if you look at sigma star",
    "start": "2059230",
    "end": "2065049"
  },
  {
    "text": "itself, the strings,\nall possible strings,",
    "start": "2065050",
    "end": "2070460"
  },
  {
    "text": "that's a countable set. The collection of all possible\nlanguages is uncountable. But the collection of all\npossible finite strings",
    "start": "2070460",
    "end": "2078340"
  },
  {
    "text": "is countable because\nI can just list them. Here's my list of all\npossible strings, which",
    "start": "2078340",
    "end": "2083370"
  },
  {
    "text": "you can put into a\ntable if you like to think of it matching up\nwith the natural numbers in that way.",
    "start": "2083370",
    "end": "2089600"
  },
  {
    "text": "Now I'm trying to\nmake a point here, which is that if you take M,\nwhich is all possible Turing",
    "start": "2089600",
    "end": "2095629"
  },
  {
    "text": "machines-- script M\nis all possible Turing machines-- the collection of\nall possible Turing machines",
    "start": "2095630",
    "end": "2100850"
  },
  {
    "text": "is countable. There are only countably many\ndifferent Turing machines.",
    "start": "2100850",
    "end": "2106510"
  },
  {
    "text": "And you can argue that in all\nsorts of messy different ways. But I think the most\nsimple way to see that is to think about\neach Turing machine",
    "start": "2106510",
    "end": "2114100"
  },
  {
    "text": "as having a description,\nwhich is a string.",
    "start": "2114100",
    "end": "2119230"
  },
  {
    "text": "So the collection of all\ndescriptions of Turing machines is just a subset of sigma\nstar, which we already",
    "start": "2119230",
    "end": "2125440"
  },
  {
    "text": "know is countable. And the subset of any countable\nset is going to be countable.",
    "start": "2125440",
    "end": "2132210"
  },
  {
    "text": "So anyway, I think\nit's worth remembering",
    "start": "2132210",
    "end": "2141250"
  },
  {
    "text": "that the collection of old\nTuring machines is countable.",
    "start": "2141250",
    "end": "2146890"
  },
  {
    "text": "Whereas the collection of\nall languages is uncountable. And that tells you right there\nthat some language is not",
    "start": "2146890",
    "end": "2152890"
  },
  {
    "text": "decided because there are more\nlanguages than Turing machines.",
    "start": "2152890",
    "end": "2159829"
  },
  {
    "text": "We've unaccountably\nmany language, only countably many Turing machines,\nso that's fewer Turing machines",
    "start": "2159830",
    "end": "2165470"
  },
  {
    "text": "than languages. There's no way to map all the\nlanguages onto Turing machines. So there's going to always\nbe some languages that",
    "start": "2165470",
    "end": "2171440"
  },
  {
    "text": "got unmapped. And so, in particular,\nthere are going to be some languages\nwhich are undecidable.",
    "start": "2171440",
    "end": "2177110"
  },
  {
    "text": "There are going to be\nsome languages which are not Turing-recognizable. And anything based on some\nautomata kind of a definition",
    "start": "2177110",
    "end": "2185450"
  },
  {
    "text": "process is going to be some\nlanguages that they're not going to be defined. ",
    "start": "2185450",
    "end": "2192160"
  },
  {
    "text": "OK, now what this\ncorollary shows you that there is some language out\nthere, which is not decidable.",
    "start": "2192160",
    "end": "2197950"
  },
  {
    "text": "What we're going to\nshow next is that there is a specific language-- A,TM-- which is not decidable.",
    "start": "2197950",
    "end": "2204690"
  },
  {
    "text": "And but first, I think we\nhave a check-in coming up. And let me give you a\nlittle bit of background",
    "start": "2204690",
    "end": "2210573"
  },
  {
    "text": "here because this is\nrelevant to this question that I got about\nintermediate size sets. So the question of\nwhether there is",
    "start": "2210573",
    "end": "2218100"
  },
  {
    "text": "a set of size between\nthe natural numbers and the real numbers\nstrictly in between--",
    "start": "2218100",
    "end": "2224580"
  },
  {
    "text": "so bigger than the natural\nnumbers, not the same size as the natural numbers,\nbut not the same size as the real numbers either,\nbut in between in size.",
    "start": "2224580",
    "end": "2234990"
  },
  {
    "text": "That was Hilbert's question\nnumber 1 out of his list of 23 that I talked about\na few lectures back.",
    "start": "2234990",
    "end": "2241777"
  },
  {
    "text": "It's interesting that he put\nit as number 1 in that very privileged special place because\nI know Hilbert was very--",
    "start": "2241777",
    "end": "2248970"
  },
  {
    "text": "he felt that the\nunderstanding infinity was a really central\nissue in mathematics. And that if we can't answer\na question like this,",
    "start": "2248970",
    "end": "2255210"
  },
  {
    "text": "we don't really\nunderstand infinity. You want to understand what\nkind of sizes of infinities",
    "start": "2255210",
    "end": "2260700"
  },
  {
    "text": "are there. We know there's the\nreal number is bigger than the natural numbers. Is there something in between?",
    "start": "2260700",
    "end": "2266339"
  },
  {
    "text": "So fundamental, really. But it was shown during the\ncourse of the 20th century,",
    "start": "2266340",
    "end": "2272250"
  },
  {
    "text": "really, in two separate steps--\none in the 1930s by Godel, one in the early\n1970s by Cohen--",
    "start": "2272250",
    "end": "2277740"
  },
  {
    "text": "that we can't\nanswer this question by using the standard\naxioms of mathematics.",
    "start": "2277740",
    "end": "2284440"
  },
  {
    "text": "The answer can go either way. And both of them are consistent\nwith the axes mathematics.",
    "start": "2284440",
    "end": "2291320"
  },
  {
    "text": "So you're never going\nto be able to prove that there is a set\nwhose size is in between",
    "start": "2291320",
    "end": "2298660"
  },
  {
    "text": "or that there is no such set. It's just impossible to\nprove either way using",
    "start": "2298660",
    "end": "2303885"
  },
  {
    "text": "the standard axiom of\nmathematics, which, actually, is kind of remarkable.",
    "start": "2303885",
    "end": "2309147"
  },
  {
    "text": "And so my question for you\nis-- and this is really a philosophical question,\nnot one that is directly you",
    "start": "2309147",
    "end": "2315300"
  },
  {
    "text": "need to know about\nmaterial in the course. I think it's just a matter\nof your own interest. I hope you find it interesting.",
    "start": "2315300",
    "end": "2320830"
  },
  {
    "text": "If you don't, you can\njust answer it randomly. But what's going on here\nthat we can't answer",
    "start": "2320830",
    "end": "2330260"
  },
  {
    "text": "that question\nabout whether there is a set of intermediate size? Is it because our axioms for\nmathematics are inadequate?",
    "start": "2330260",
    "end": "2337970"
  },
  {
    "text": "Or maybe there is no such thing\nas a mathematical reality. You can talk about\nwhat's real here?",
    "start": "2337970",
    "end": "2345420"
  },
  {
    "text": "What's the reality? Either there is a set\nin between or not. If you can imagine,\nall of these things",
    "start": "2345420",
    "end": "2351530"
  },
  {
    "text": "have their own reality\nto them, well, then, there's going to be an answer. And then you would\nexpect, well, maybe",
    "start": "2351530",
    "end": "2357050"
  },
  {
    "text": "we can find better axioms,\nwhich will actually give us that answer. Or you can say, well,\nthere is no reality.",
    "start": "2357050",
    "end": "2362540"
  },
  {
    "text": "And infinite sets are\nkind of human constructs anyway, so we can make them kind\nof play out any way we like.",
    "start": "2362540",
    "end": "2370130"
  },
  {
    "text": "Mathematicians argue\nabout that to this day. And it is, as I say, really,\nit's a philosophical question.",
    "start": "2370130",
    "end": "2378290"
  },
  {
    "text": "But just out of curiosity,\nlet's see how you guys end up deciding on that one.",
    "start": "2378290",
    "end": "2384270"
  },
  {
    "text": "So here is the poll. 5 seconds to go. Please vote. And we're going to end\nthe polling, 1, 2, 3, now.",
    "start": "2384270",
    "end": "2392369"
  },
  {
    "text": " All right, here we go. So there's no right answer.",
    "start": "2392370",
    "end": "2400220"
  },
  {
    "text": "I think if most mathematicians\nwere to, I think, the instinct of most\nlogicians, especially, I'm",
    "start": "2400220",
    "end": "2407830"
  },
  {
    "text": "not sure if general\nmathematicians really even care about this question, but\nlogicians would probably",
    "start": "2407830",
    "end": "2413500"
  },
  {
    "text": "have an instinct that, probably,\nthere are sets in between. There's no reason that\nthere shouldn't be.",
    "start": "2413500",
    "end": "2420070"
  },
  {
    "text": "It seems kind of\nstrange that there should be this sort of jump\nfrom the natural numbers",
    "start": "2420070",
    "end": "2426280"
  },
  {
    "text": "to the real numbers and\nwhy nothing in between? But I don't think that\nquestion is really settled.",
    "start": "2426280",
    "end": "2436595"
  },
  {
    "text": " All right, let's continue on. I think we are--",
    "start": "2436595",
    "end": "2443630"
  },
  {
    "text": "OK, so we're going to--  our coffee break is coming,\nin case you're wondering.",
    "start": "2443630",
    "end": "2450080"
  },
  {
    "text": "So this is my last\nslide before then. But this is an important\nslide, so please hold out.",
    "start": "2450080",
    "end": "2457880"
  },
  {
    "text": "So here is our promised\ntheorem of the day. I'm going to show that\nA,TM is not decidable,",
    "start": "2457880",
    "end": "2464510"
  },
  {
    "text": "the acceptance problem\nfor Turing machines. And it's all going to be\ncontained on this one slide.",
    "start": "2464510",
    "end": "2470157"
  },
  {
    "text": "We're going to give a\nproof by contradiction using diagonalization. And we're going to assume\nsome Turing machine, H,",
    "start": "2470157",
    "end": "2478619"
  },
  {
    "text": "decides A,TM. And we're going to\nget a contradiction.",
    "start": "2478620",
    "end": "2484300"
  },
  {
    "text": "So let's, first of\nall, make sure we understand what H is doing. So H gets an input--",
    "start": "2484300",
    "end": "2490339"
  },
  {
    "text": "a Turing machine and an input. And H is going to be a\ndecider, so it always",
    "start": "2490340",
    "end": "2497180"
  },
  {
    "text": "halts with an\naccept or a reject. It's supposed to accept if\nM accepts w and reject if it",
    "start": "2497180",
    "end": "2505830"
  },
  {
    "text": "doesn't. So in other words,\nit's going to reject if M rejects w either by\nhalting or by looping.",
    "start": "2505830",
    "end": "2513330"
  },
  {
    "text": " That's the job of H. And\nwe're assuming we can do that.",
    "start": "2513330",
    "end": "2522530"
  },
  {
    "text": "But we will see a\ncontradiction occur.  So the way we're going to do\nthat is really kind of just one",
    "start": "2522530",
    "end": "2531450"
  },
  {
    "text": "step here in a way. And we're going to use H\nto construct another Turing",
    "start": "2531450",
    "end": "2536910"
  },
  {
    "text": "machine D. H is going to be a\nsubroutine to D. We've already seen us doing that in the past.",
    "start": "2536910",
    "end": "2542490"
  },
  {
    "text": " D is going to do something\na little strange,",
    "start": "2542490",
    "end": "2547829"
  },
  {
    "text": "just to warn you. D's input is just\na Turing machine--",
    "start": "2547830",
    "end": "2553350"
  },
  {
    "text": "no w. And what D is going to\ndo using its subroutine",
    "start": "2553350",
    "end": "2561630"
  },
  {
    "text": "H is going to simulate H on\ninput M, comma, the description",
    "start": "2561630",
    "end": "2568220"
  },
  {
    "text": "of M. Now what is that? Well, the description of\nM is just some string.",
    "start": "2568220",
    "end": "2575310"
  },
  {
    "text": "So what H is trying-- what it's asking H to\ntell, to answer is,",
    "start": "2575310",
    "end": "2581000"
  },
  {
    "text": "does M accept the\nstring representing",
    "start": "2581000",
    "end": "2587010"
  },
  {
    "text": "M's own description? It's as if we're\nfeeding M into itself,",
    "start": "2587010",
    "end": "2594140"
  },
  {
    "text": "which seems like a totally\ntwisted thing to do,",
    "start": "2594140",
    "end": "2600809"
  },
  {
    "text": "you might say.  Why would you ever feed\na program into itself?",
    "start": "2600810",
    "end": "2607760"
  },
  {
    "text": " Somebody has written\ncannibalism here-- yeah, kind of.",
    "start": "2607760",
    "end": "2614480"
  },
  {
    "text": "I'd say it's worse\n[LAUGHS] because it's not eating somebody else. It's eating yourself.",
    "start": "2614480",
    "end": "2621900"
  },
  {
    "text": "OK, but I claim that there are\nactual cases in practice where",
    "start": "2621900",
    "end": "2629760"
  },
  {
    "text": "we do this. We feed programs\ninto themselves.",
    "start": "2629760",
    "end": "2636500"
  },
  {
    "text": "And the example that I\nknow of where this is done is when you're\nmaking a compiler.",
    "start": "2636500",
    "end": "2644030"
  },
  {
    "text": "You might want to\nmake a compiler and then written in the same\nlanguage that it's compiling.",
    "start": "2644030",
    "end": "2649280"
  },
  {
    "text": "And then you feed the\ncompiler into itself. You may say, why even\nbother because it's already,",
    "start": "2649280",
    "end": "2655369"
  },
  {
    "text": "obviously, if it,\nonce it's running, you don't need to\ncompile it again.",
    "start": "2655370",
    "end": "2661840"
  },
  {
    "text": "But actually, an example\nwhere this was really used was when there was an\noptimizing compiler, I think,",
    "start": "2661840",
    "end": "2667960"
  },
  {
    "text": "for C written on\nearly Unix machines. And the optimizing compiler\nfor C was written in C.",
    "start": "2667960",
    "end": "2677020"
  },
  {
    "text": "So you would feed the\noptimizing compiler into the regular\ncompiler, first of all.",
    "start": "2677020",
    "end": "2683950"
  },
  {
    "text": "Now, you had the\ncompiler running,",
    "start": "2683950",
    "end": "2688970"
  },
  {
    "text": "but it was an optimized. So but now that it's the\noptimizing compiler is running,",
    "start": "2688970",
    "end": "2694460"
  },
  {
    "text": "you can feed the\noptimizing compiler into that, which is itself. Now you have an optimized\noptimizing compiler.",
    "start": "2694460",
    "end": "2701290"
  },
  {
    "text": "So it really makes some-- there is at least one case\nwhere this has actually",
    "start": "2701290",
    "end": "2706330"
  },
  {
    "text": "been done in practice. Not that we really care. This is a theory class-- but\njust for fun to observe that.",
    "start": "2706330",
    "end": "2714900"
  },
  {
    "text": "So here, H is trying to\nsay, well, does in a M end up accepting when it's fed\nthe description of itself?",
    "start": "2714900",
    "end": "2723167"
  },
  {
    "text": "You know, at least,\nmathematically speaking, that's a reasonable\nthing to ask. And then what D is going to do\nwhen it gets the answer back",
    "start": "2723167",
    "end": "2731330"
  },
  {
    "text": "from H-- H is a decider, don't forget-- is D's going to do the\nopposite of whatever H does.",
    "start": "2731330",
    "end": "2736980"
  },
  {
    "text": "It's going to\naccept if H rejects and reject if H accepts.",
    "start": "2736980",
    "end": "2742030"
  },
  {
    "text": "So let's, in summary,\nlet's pull this together, so it's easy to understand,\nin the end, what is D doing?",
    "start": "2742030",
    "end": "2751230"
  },
  {
    "text": "D is going to accept. D is also going to be\ndecider, by the way. So D is always going to\neither accept or reject--",
    "start": "2751230",
    "end": "2757750"
  },
  {
    "text": "Just. The opposite of what\nH tells it to do. So D is going to accept M\nexactly when M doesn't accept M",
    "start": "2757750",
    "end": "2766359"
  },
  {
    "text": "because when M doesn't accept\nM, H is going to reject,",
    "start": "2766360",
    "end": "2772430"
  },
  {
    "text": "and so then D is\ngoing to accept. So D accepts M if and\nonly if M doesn't accept",
    "start": "2772430",
    "end": "2777490"
  },
  {
    "text": "M. That's exactly the\ncondition in which D accepts M. I think it's important to\njust step back and make sure",
    "start": "2777490",
    "end": "2784250"
  },
  {
    "text": "you understand this line\nbecause we have only one line left to get our contradiction.",
    "start": "2784250",
    "end": "2791660"
  },
  {
    "text": "Right? Are we together? D accepts M if and\nonly if M doesn't accept M. That's just by the\nway we've defined setup D.",
    "start": "2791660",
    "end": "2798770"
  },
  {
    "text": "Now what we're going to do is\nfeed in, instead of M to D,",
    "start": "2798770",
    "end": "2803790"
  },
  {
    "text": "and not some arbitrary feed,\nwe're going to use feed in D into D. And that is going\nto be our contradiction",
    "start": "2803790",
    "end": "2810760"
  },
  {
    "text": "because D is now\ngoing to accept D if and only if D doesn't\naccept D, and that's certainly impossible.",
    "start": "2810760",
    "end": "2816675"
  },
  {
    "text": " That's our contradiction which\nproves that H cannot exist.",
    "start": "2816675",
    "end": "2823450"
  },
  {
    "text": "And therefore, A,TM\nis undecidable. OK, so we're done,\nexcept for the one",
    "start": "2823450",
    "end": "2830060"
  },
  {
    "text": "point, which is that why\nis this a diagonalization?",
    "start": "2830060",
    "end": "2836090"
  },
  {
    "text": "And I think you can get that\nfrom the following picture. If you imagine here writing\ndown all possible times--",
    "start": "2836090",
    "end": "2844280"
  },
  {
    "text": "I'm going to make a table here. Here is the list of\nall Turing machines,",
    "start": "2844280",
    "end": "2850490"
  },
  {
    "text": "including D, which\nis a machine which I built under the\nassumption that H exists.",
    "start": "2850490",
    "end": "2858320"
  },
  {
    "text": "So D appears here somewhere. But here are all the\nother Turing machines. And here are all of these\ndescriptions of the Turing",
    "start": "2858320",
    "end": "2863757"
  },
  {
    "text": "machines along the labeling\nall of the columns. OK, so these are\nthe rows labeled.",
    "start": "2863757",
    "end": "2869390"
  },
  {
    "text": "These are the column labels. And inside, I'm\ngoing to tell you the answer for whether a given\nmachine accepts a given input.",
    "start": "2869390",
    "end": "2881120"
  },
  {
    "text": "So for example, M1 accepts\nits own description but rejects the\ndescription of M2,",
    "start": "2881120",
    "end": "2887000"
  },
  {
    "text": "but accepts the\ndescription of M3. I don't you know. I'm obviously I'm\nmaking this up. I don't know what M1 is. But just hypothetically, that's\nwhat the machine M1 does.",
    "start": "2887000",
    "end": "2896112"
  },
  {
    "text": "So I'm just filling\nout this table. ",
    "start": "2896112",
    "end": "2901632"
  },
  {
    "text": "H could get the answer to any\nof the elements in this table because it can test whether M4\naccepts the description of M3.",
    "start": "2901632",
    "end": "2910440"
  },
  {
    "text": "So H could fill out this table. So maybe M2 is a machine\nthat always rejects.",
    "start": "2910440",
    "end": "2915720"
  },
  {
    "text": "It's a very unfriendly,\nrejecting machine. M3 is a very friendly machine. It accepts all inputs.",
    "start": "2915720",
    "end": "2921900"
  },
  {
    "text": "M4 rejects some and accepts\nothers, dot, dot, dot. Now, I want to look and\nsee, what does D do?",
    "start": "2921900",
    "end": "2931110"
  },
  {
    "text": "Now based on the information\nthat I've already given you, we can understand what D does.",
    "start": "2931110",
    "end": "2937240"
  },
  {
    "text": "So for example, what\ndoes D do when I feed it the description of M1?",
    "start": "2937240",
    "end": "2943940"
  },
  {
    "text": "What does D do? Well, we can look here. D accepts M if and only\nif M doesn't accept M. So",
    "start": "2943940",
    "end": "2950210"
  },
  {
    "text": "D is going to accept M1 if and\nonly if M1 does not accept M1.",
    "start": "2950210",
    "end": "2958089"
  },
  {
    "text": "Well, M1 does accept M1. So D does the opposite. D rejects.",
    "start": "2958090",
    "end": "2964240"
  },
  {
    "text": "So OK, I'm highlighting here. D rejects because\nD is going to do",
    "start": "2964240",
    "end": "2969250"
  },
  {
    "text": "the opposite of what the machine\ndoes on its own it on input. ",
    "start": "2969250",
    "end": "2975370"
  },
  {
    "text": "So D on M2, you have to\nlook what M2 does on M2. It rejects, so D does\nthe opposite of that.",
    "start": "2975370",
    "end": "2981559"
  },
  {
    "text": "It accepts. And similarly, each\none of these things--",
    "start": "2981560",
    "end": "2989099"
  },
  {
    "text": "D's answer is going to\nbe the opposite of what the machine does on\nits own description,",
    "start": "2989100",
    "end": "2994820"
  },
  {
    "text": "just by virtue of the\ndefinition of D. OK, and so on--",
    "start": "2994820",
    "end": "3000050"
  },
  {
    "text": "so far, so good. But the problem is, what\nhappens when D is fed itself?",
    "start": "3000050",
    "end": "3006400"
  },
  {
    "text": "Because, as you can see,\nwe're heading for trouble",
    "start": "3006400",
    "end": "3011589"
  },
  {
    "text": "because this is a\ndiagonal down here. D is just one of the rows. That diagonal is going\nto intersect that row",
    "start": "3011590",
    "end": "3017890"
  },
  {
    "text": "at this point. And D is defined to be going to\nbe doing the opposite of what that element is, but it can't\nbe the opposite of itself.",
    "start": "3017890",
    "end": "3025105"
  },
  {
    "text": " And so that's the contradiction.",
    "start": "3025105",
    "end": "3031300"
  },
  {
    "text": "So I think we're-- I'm going to call us, give\nus a little break here.",
    "start": "3031300",
    "end": "3039190"
  },
  {
    "text": "And then you can also\ntext me in the meantime. I'll be happy to answer\nsome questions during that. A little over 4 minutes\nto go-- so let's see.",
    "start": "3039190",
    "end": "3046170"
  },
  {
    "text": "Let me see if I can\nanswer your questions. OK, what's so special about\nA,TM that enables us to do this?",
    "start": "3046170",
    "end": "3052810"
  },
  {
    "text": "Why can't we do this\non ADFA, for example? That's a good question.",
    "start": "3052810",
    "end": "3059490"
  },
  {
    "text": "And the answer is that, in a\nsense, we can do this on DFA.",
    "start": "3059490",
    "end": "3074890"
  },
  {
    "text": "I mean, I think this is,\nperhaps, a bit of a stretch. But DFAs could not answer ADFA.",
    "start": "3074890",
    "end": "3082359"
  },
  {
    "text": "I mean, we could prove that in\nother ways as well by just-- we could use things\nlike the pumping lemma,",
    "start": "3082360",
    "end": "3088490"
  },
  {
    "text": "and it's not clear, even\nhow you'd formulate ADFA. But what's important\nhere is that it's really",
    "start": "3088490",
    "end": "3096940"
  },
  {
    "text": "the model talking about\nitself that really is where the problem comes up.",
    "start": "3096940",
    "end": "3102710"
  },
  {
    "text": "So if you try to push\nthis argument through to show that ADFA is not\ndecidable by Turing machines,",
    "start": "3102710",
    "end": "3109390"
  },
  {
    "text": "you're going to fail\nbecause we're starting off",
    "start": "3109390",
    "end": "3114690"
  },
  {
    "text": "with a Turing machine. And I think I'm going\nto confuse myself",
    "start": "3114690",
    "end": "3120059"
  },
  {
    "text": "if I try to just repeat it. But you won't get\na contradiction because the Turing machine\nis not a finite automaton.",
    "start": "3120060",
    "end": "3127108"
  },
  {
    "text": " OK. ",
    "start": "3127108",
    "end": "3133870"
  },
  {
    "text": "Will this argument\nget into self-loops? I don't see why it would--\nthere is some self-reference,",
    "start": "3133870",
    "end": "3139059"
  },
  {
    "text": "perhaps. We're going to talk about\nthat a little later. So we're going to come back and\nrevisit this argument in a week",
    "start": "3139060",
    "end": "3146800"
  },
  {
    "text": "or so when we talk about\nthe recursion theorem which talks about machines that\ncan refer to themselves.",
    "start": "3146800",
    "end": "3152740"
  },
  {
    "text": "But this is a little\nbit of a head-- getting ahead of ourselves. So somebody's commenting\non this reminding them",
    "start": "3152740",
    "end": "3160510"
  },
  {
    "text": "of the barber paradox,\nif you remember that, which has some similarity.",
    "start": "3160510",
    "end": "3168121"
  },
  {
    "text": "There is a town\nin which there was a barber which shaves every man\nwho doesn't shave themselves.",
    "start": "3168122",
    "end": "3174579"
  },
  {
    "text": "It seems he's a\nvery good barber. So there are some people\nwho shave themselves. And all the rest,\nthe barber shaves.",
    "start": "3174580",
    "end": "3181950"
  },
  {
    "text": "The question is, does\nthe barber shave himself? Because he shaves only those\nmen who don't shave themselves.",
    "start": "3181950",
    "end": "3187650"
  },
  {
    "text": "So you've got a same\nkind of a contradiction. There is a relationship there. ",
    "start": "3187650",
    "end": "3194560"
  },
  {
    "text": "So someone wants to know, where\ndid we use the decidability? So we used the decidability\nto come up with H.",
    "start": "3194560",
    "end": "3203210"
  },
  {
    "text": "Once we know that\nA,TM is decidable, then we have that H function,\nand then we can build D.",
    "start": "3203210",
    "end": "3209599"
  },
  {
    "text": "So that's the chain of reason.",
    "start": "3209600",
    "end": "3215550"
  },
  {
    "text": "So you assume A,TM is decidable. Then you have the\ndecider called H,",
    "start": "3215550",
    "end": "3220580"
  },
  {
    "text": "and then you can build\nD. Somebody wants to see the previous slide.",
    "start": "3220580",
    "end": "3227350"
  },
  {
    "text": "What part of the\nslide do you want? ",
    "start": "3227350",
    "end": "3232880"
  },
  {
    "text": "So I'll leave that up there. Why can we apply the proof\nthat all Turing machines are accountable to all languages?",
    "start": "3232880",
    "end": "3239020"
  },
  {
    "text": "Well, because Turing\nmachines have descriptions. General languages don't\nhave descriptions.",
    "start": "3239020",
    "end": "3244839"
  },
  {
    "text": "And so that's why. OK, the candle has\nburnt to the bottom,",
    "start": "3244840",
    "end": "3249849"
  },
  {
    "text": "and it's time to move on.  So now, let's look at\nthe acceptance problem",
    "start": "3249850",
    "end": "3257369"
  },
  {
    "text": "for queue automata. I'll give you a queue automaton\non input, and I want to know,",
    "start": "3257370",
    "end": "3264039"
  },
  {
    "text": "does it accept the input? Is that going to be decidable? And you have your choices.",
    "start": "3264040",
    "end": "3269095"
  },
  {
    "text": "It's either yes, it is\ndecidable because these are similar to pushdown\nautomata and APDA is decidable,",
    "start": "3269095",
    "end": "3275200"
  },
  {
    "text": "or no because yes\ncontradicts results",
    "start": "3275200",
    "end": "3280730"
  },
  {
    "text": "that we know at\nthis point, or we don't have enough information\nto answer the question. OK, let's put that up.",
    "start": "3280730",
    "end": "3286520"
  },
  {
    "text": " One second-- [LAUGHS]\nall right, that's it.",
    "start": "3286520",
    "end": "3295120"
  },
  {
    "text": "Ready, going, gone. ",
    "start": "3295120",
    "end": "3300180"
  },
  {
    "text": "So yes, the answer is, well, no. [LAUGHS] The answer\nis, indeed, the answer",
    "start": "3300180",
    "end": "3306900"
  },
  {
    "text": "is B. True, that\nqueue automata are",
    "start": "3306900",
    "end": "3312563"
  },
  {
    "text": "similar to pushdown automata,\nbut all these automata are similar to each\nother, and that's not going to be good enough.",
    "start": "3312563",
    "end": "3317740"
  },
  {
    "text": " What the homework\nhas asked you to do is to show that you\ncan simulate Turing",
    "start": "3317740",
    "end": "3324260"
  },
  {
    "text": "machines with queue automata. So if you can\nanswer the question about whether the queue automata\nwill accept their input,",
    "start": "3324260",
    "end": "3331310"
  },
  {
    "text": "that would allow you to be\nable to answer questions about whether Turing\nmachines accept their input. And we just proved\nthat's not possible.",
    "start": "3331310",
    "end": "3338720"
  },
  {
    "text": "So it would be a contradiction\nif we could answer--",
    "start": "3338720",
    "end": "3347119"
  },
  {
    "text": "if we could decide A, queue, A. Now, we have an example of\nan undecidable language.",
    "start": "3347120",
    "end": "3352820"
  },
  {
    "text": "Let's look at an example of\nan unrecognizable language. Now A,TM is not going to serve\nthat purpose because A,TM is",
    "start": "3352820",
    "end": "3368560"
  },
  {
    "text": "Turing-recognizable, as we\npointed out by the universal Turing machine. So A,TM is undecidable, however.",
    "start": "3368560",
    "end": "3375340"
  },
  {
    "text": "How about an\nunrecognizable language? For that, we will see that the\ncomplement of A,TM will serve.",
    "start": "3375340",
    "end": "3384020"
  },
  {
    "text": "So the complement of A,TM is\nneither decidable nor even recognizable.",
    "start": "3384020",
    "end": "3390700"
  },
  {
    "text": "Now it's not\nTuring-recognizable. And that's going to follow from\na pretty basic theorem that",
    "start": "3390700",
    "end": "3395830"
  },
  {
    "text": "connects recognizability and\ndecidability that I've put up here on the screen,\nwhich is that if you have",
    "start": "3395830",
    "end": "3401619"
  },
  {
    "text": "a language where it\nand its complement are both recognizable, then\nthe language turnout turns out",
    "start": "3401620",
    "end": "3407470"
  },
  {
    "text": "to be decidable. In fact, a language and its\ncomplement are decidable. But being decidable is\nclosed under complement,",
    "start": "3407470",
    "end": "3413020"
  },
  {
    "text": "so that's something\nyou should be aware. But being-- OK.",
    "start": "3413020",
    "end": "3419720"
  },
  {
    "text": "We'll get to that in a minute. But if-- so anyway, so\nif you have a language",
    "start": "3419720",
    "end": "3427599"
  },
  {
    "text": "and it's complement\nboth recognizable, how do we know the\nlanguage is decidable? So first of all, let's take\nthe two Turing machines,",
    "start": "3427600",
    "end": "3434890"
  },
  {
    "text": "M1 and M2 that recognizes\nA and A-complement.",
    "start": "3434890",
    "end": "3440380"
  },
  {
    "text": "And we're going to\nput those together to get a decider for A. And\nthat's going to work like this.",
    "start": "3440380",
    "end": "3448580"
  },
  {
    "text": "It's going to be\ncalled T. So T says, on input w, what\nit's going to do,",
    "start": "3448580",
    "end": "3454020"
  },
  {
    "text": "it's going to feed w\ninto M1 and M2 both. ",
    "start": "3454020",
    "end": "3460581"
  },
  {
    "text": "A is the language,\nby the way, yes. A is-- when I say it's\nTuring-recognizable, you know, Turing-recognizable\nonly applies to languages.",
    "start": "3460582",
    "end": "3468190"
  },
  {
    "text": "So yes, A is often this symbol\nI'm going to use for languages, sometimes for an automaton.",
    "start": "3468190",
    "end": "3473650"
  },
  {
    "text": "But A is typically\ngoing to be a language. So now, I'm trying to\nmake T be a decider for A",
    "start": "3473650",
    "end": "3486978"
  },
  {
    "text": "from the recognizers\nfor A and A-complement. So I'm going to\ntake an input to T",
    "start": "3486978",
    "end": "3493920"
  },
  {
    "text": "and feed it into both\nrecognizers, M1 and M2. ",
    "start": "3493920",
    "end": "3500960"
  },
  {
    "text": "OK, I'm going to run\nthem in parallel. What's nice is that\nbecause M2 recognizes",
    "start": "3500960",
    "end": "3511940"
  },
  {
    "text": "the complement of\nwhat M1 recognizes, every string is going to be\naccepted either by M1 or by M2",
    "start": "3511940",
    "end": "3520070"
  },
  {
    "text": "because every string is either\nan A or an A-complement. So if I run M1 and M2 on w until\none of the halts or one of them",
    "start": "3520070",
    "end": "3528789"
  },
  {
    "text": "accepts, I know I'm not\ngoing to run forever because, eventually, one or\nthe other one have to accept.",
    "start": "3528790",
    "end": "3535859"
  },
  {
    "text": "So and then I got my answer\nbecause if M1 accepts, then I know I'm in the language. But if M2 accepts, I know I'm in\nthe complement of the language,",
    "start": "3535860",
    "end": "3543300"
  },
  {
    "text": "so I'm out of the language. So if M1 accepts,\nthen T should accept. But if M2 accepts,\nthen T should reject. ,",
    "start": "3543300",
    "end": "3554640"
  },
  {
    "text": "So that proves that nice little\ntheorem written at the top",
    "start": "3554640",
    "end": "3560339"
  },
  {
    "text": "in blue. So I got my decider\nfor A built out",
    "start": "3560340",
    "end": "3565630"
  },
  {
    "text": "of the recognizers for\nA and A-complement. Now immediately, it follows that\nthe complement of A,TM is not",
    "start": "3565630",
    "end": "3574210"
  },
  {
    "text": "Turing-recognizable because\nwe know that A,TM itself is",
    "start": "3574210",
    "end": "3581650"
  },
  {
    "text": "recognizable, but\nit's undecidable. ",
    "start": "3581650",
    "end": "3587410"
  },
  {
    "text": "If the complement was\nalso recognizable, then A,TM would be\ndecidable, but it isn't.",
    "start": "3587410",
    "end": "3594250"
  },
  {
    "text": "So when something is decidable,\neither it or its complement have to be unrecognizable.",
    "start": "3594250",
    "end": "3599683"
  },
  {
    "text": "And in the case for A,TM, it has\nto be the complement because we already showed that it is\nitself is recognizable.",
    "start": "3599683",
    "end": "3605530"
  },
  {
    "text": " So that's the proof of that.",
    "start": "3605530",
    "end": "3610609"
  },
  {
    "text": "So here is a little\npicture of the way the world looks right now if\nyou have here, in the middle are the decidable languages--\nso these are all",
    "start": "3610610",
    "end": "3617230"
  },
  {
    "text": "languages, this Venn\ndiagram of languages. We showed earlier, the regular,\nthe context-free, decidable,",
    "start": "3617230",
    "end": "3623740"
  },
  {
    "text": "recognizable. Here, I've got the recognizable\nand what I'm calling",
    "start": "3623740",
    "end": "3629170"
  },
  {
    "text": "the co-Turing recognizable. This is the collection\nof all complements",
    "start": "3629170",
    "end": "3636350"
  },
  {
    "text": "of recognizable languages. So A,TM bar, A,TM\ncomplement is the complement",
    "start": "3636350",
    "end": "3641540"
  },
  {
    "text": "of a recognizable language. This region here are\nall the complements",
    "start": "3641540",
    "end": "3648289"
  },
  {
    "text": "of the recognizable languages\nor the so-called co-Turing recognizable languages--\ncomplement of.",
    "start": "3648290",
    "end": "3657110"
  },
  {
    "text": "So A,TM is on this side. A,TM-complement is on that side. But if something's in both, by\nvirtue of this theorem here,",
    "start": "3657110",
    "end": "3664609"
  },
  {
    "text": "then it's decidable.  OK, last check-in for the day.",
    "start": "3664610",
    "end": "3672050"
  },
  {
    "text": "From what we learned so far,\nwhich closure properties can we prove for the\nclass of deterring",
    "start": "3672050",
    "end": "3678200"
  },
  {
    "text": "recognizable languages? Choose all that apply. ",
    "start": "3678200",
    "end": "3684730"
  },
  {
    "text": "Well, as I say, you don't\nhave to get it right. Let's not spend too\nmuch more time on this",
    "start": "3684730",
    "end": "3690250"
  },
  {
    "text": "because we'll talk a\nlittle bit about it. Almost all-- its closed\nunder almost all of them,",
    "start": "3690250",
    "end": "3696997"
  },
  {
    "text": "but not all of them. ",
    "start": "3696997",
    "end": "3705380"
  },
  {
    "text": "Because-- are we done here? I think we're done--",
    "start": "3705380",
    "end": "3711430"
  },
  {
    "text": "5 seconds.  OK, here we go, ending polling. ",
    "start": "3711430",
    "end": "3720160"
  },
  {
    "text": "I'm not sure what the meaning\nof [LAUGHS] deleting your answer is here.",
    "start": "3720160",
    "end": "3725319"
  },
  {
    "text": "Everybody likes union, I guess. They're closed under\nall of these operations except complement.",
    "start": "3725320",
    "end": "3730490"
  },
  {
    "text": " But we just proved it's not\nclosed under complement,",
    "start": "3730490",
    "end": "3735920"
  },
  {
    "text": "so I'm a little puzzled by\nwhy we have so many votes for closure under complement.",
    "start": "3735920",
    "end": "3743490"
  },
  {
    "text": "We have here, A,TM is\nTuring-recognizable, but A,TM-complement is\nnot Turing-recognizable.",
    "start": "3743490",
    "end": "3749055"
  },
  {
    "text": "it's right here on the slide. I'm not trying to\nmake you feel bad, but I'm trying to just point\nout that you think, please.",
    "start": "3749055",
    "end": "3761820"
  },
  {
    "text": "So now closure under union\nand intersection, I mean,",
    "start": "3761820",
    "end": "3768020"
  },
  {
    "text": "you could kind of\nget those answers just by running things\nin parallel the way we did the proof here. You just run both machines.",
    "start": "3768020",
    "end": "3776240"
  },
  {
    "text": "And if they both give--",
    "start": "3776240",
    "end": "3782043"
  },
  {
    "text": "I mean, it's a little\ntricky, I suppose. If either one of them\naccept, then you can accept.",
    "start": "3782043",
    "end": "3788770"
  },
  {
    "text": "Or if they both\naccept, you just wait until they both have accepted. Otherwise, you\njust keep running. So the first two are\npretty straightforward.",
    "start": "3788770",
    "end": "3795963"
  },
  {
    "text": "Closure under\nconcatenation-- this is also going to be similar. You just try every possible\nway of cutting the string up",
    "start": "3795963",
    "end": "3801820"
  },
  {
    "text": "into two pieces and\nrun in parallel on. And if you ever find a\nway of cutting it up,",
    "start": "3801820",
    "end": "3806920"
  },
  {
    "text": "and you run those two, and put\nthose two sides in parallel, and if they both accept,\nthen you can accept.",
    "start": "3806920",
    "end": "3814510"
  },
  {
    "text": "And star is, again,\nvery similar. So these are not too bad. But I admit, you know, it's\nnot a whole lot of time",
    "start": "3814510",
    "end": "3821800"
  },
  {
    "text": "to have to contend with\nsomething that you're just getting used to.",
    "start": "3821800",
    "end": "3826990"
  },
  {
    "text": "So let's talk about the very\nlast topic of the day, which",
    "start": "3826990",
    "end": "3833270"
  },
  {
    "text": "is really going to be setting\nourselves up for Tuesday's lecture next week.",
    "start": "3833270",
    "end": "3838910"
  },
  {
    "text": "And that's how we are going to\nbe showing other languages are undecidable, which is something\nthat I'm going to be expecting",
    "start": "3838910",
    "end": "3847490"
  },
  {
    "text": "you guys to be able to do. This is the standard\nprocedure for showing",
    "start": "3847490",
    "end": "3855950"
  },
  {
    "text": "languages are\nundecidable using what's called the reducibility method.",
    "start": "3855950",
    "end": "3861390"
  },
  {
    "text": "And what that does is it\ntakes, as a starting point, a language that we already\nknow is undecidable--",
    "start": "3861390",
    "end": "3869090"
  },
  {
    "text": "typically, A,TM-- or it\ncould be another one that you've previously shown\nto be undecidable--",
    "start": "3869090",
    "end": "3874759"
  },
  {
    "text": "and leverages that information\nto show other languages are undecidable.",
    "start": "3874760",
    "end": "3880040"
  },
  {
    "text": "And it's using what's\ncalled reducibility. We're going to go into this\nmore carefully next time.",
    "start": "3880040",
    "end": "3888570"
  },
  {
    "text": "But basically,\nreducibility is a way of using one problem to\nsolve another problem.",
    "start": "3888570",
    "end": "3894750"
  },
  {
    "text": "And so we are going to\nshow, for example, let's take a look at\nthe problem called",
    "start": "3894750",
    "end": "3900380"
  },
  {
    "text": "the halting problem, which\nis like the famous problem for Turing machines.",
    "start": "3900380",
    "end": "3905570"
  },
  {
    "text": "You just want to know whether\nit halts, not necessarily whether it accepts. So it's very similar,\nbut not exactly the same.",
    "start": "3905570",
    "end": "3911840"
  },
  {
    "text": " And we're going to show\nthat this halting problem is",
    "start": "3911840",
    "end": "3918680"
  },
  {
    "text": "similarly undecidable. Now we could go back and do\nthe whole diagonalization, but that seems like--",
    "start": "3918680",
    "end": "3923960"
  },
  {
    "text": "well, that's more work than\nnecessary now that we already know A,TM is undecidable because\nwe're going to show that we can",
    "start": "3923960",
    "end": "3930830"
  },
  {
    "text": "reduce the A,TM problem\nto the halting problem.",
    "start": "3930830",
    "end": "3936830"
  },
  {
    "text": "And we'll explain what\nthat means again later. But the idea is-- and as\nwe'll show in an illustration",
    "start": "3936830",
    "end": "3944060"
  },
  {
    "text": "shortly-- that by proving by contradiction\nif the if HALT,TM were",
    "start": "3944060",
    "end": "3953700"
  },
  {
    "text": "decidable, then A,TM\nwould be decided. And we know A,TM\nis not decidable.",
    "start": "3953700",
    "end": "3959450"
  },
  {
    "text": "And so that's our contradiction.",
    "start": "3959450",
    "end": "3964609"
  },
  {
    "text": "Now the way we're going to show\nthat if HALT,TM is decidable,",
    "start": "3964610",
    "end": "3972590"
  },
  {
    "text": "then A,TM is decidable is use\na decider for HALT,TM to decide",
    "start": "3972590",
    "end": "3978290"
  },
  {
    "text": "A,TM with a suitable\nmodification.",
    "start": "3978290",
    "end": "3988920"
  },
  {
    "text": "So basically, we want to turn\na HALT,TM decider into an A,TM",
    "start": "3988920",
    "end": "3995619"
  },
  {
    "text": "decider. And that's how we're going to\nreduce the problem of solving",
    "start": "3995620",
    "end": "4001019"
  },
  {
    "text": "A,TM to the problem\nof solving HALT,TM. Let's just do an example. If you've seen it\nbefore, obviously, this",
    "start": "4001020",
    "end": "4007680"
  },
  {
    "text": "is not going to be hard. But for the many of you who\nhave not seen it before,",
    "start": "4007680",
    "end": "4012950"
  },
  {
    "text": "I'm partly doing it this time\njust so we can do it again next time. And maybe it'll sink in\nby virtue of repetition.",
    "start": "4012950",
    "end": "4018980"
  },
  {
    "text": " So again, so as I just\nsaid, we're going to assume",
    "start": "4018980",
    "end": "4026040"
  },
  {
    "text": "the HALT,TM problem is decidable\nand use that to show that A,TM is decidable, which\nwe know is false.",
    "start": "4026040",
    "end": "4031170"
  },
  {
    "text": "We showed it just\nearlier that it's not. So assume we have a\ndecider for HALT,TM.",
    "start": "4031170",
    "end": "4036480"
  },
  {
    "text": "We'll call it R. And we're going\nto construct from R a decider",
    "start": "4036480",
    "end": "4044000"
  },
  {
    "text": "for A,TM we'll call S. OK? So we're, again, typical\nproof by contradiction.",
    "start": "4044000",
    "end": "4050650"
  },
  {
    "text": "We're assuming the opposite\nof what we're trying to prove. And then we're going\nto get something crazy.",
    "start": "4050650",
    "end": "4057640"
  },
  {
    "text": "OK, so here, my job now,\nis I'm assuming I have R, which is a HALT,TM decider.",
    "start": "4057640",
    "end": "4063349"
  },
  {
    "text": "So now, I'm assuming\nI know how to decide",
    "start": "4063350",
    "end": "4069670"
  },
  {
    "text": "if a Turing machine and an\ninput eventually halts-- Not. Necessarily would it accept,\njust whether it halts.",
    "start": "4069670",
    "end": "4078390"
  },
  {
    "text": "It's conceivable. You have to bear with me here. It's conceivable that\nyou could find a way",
    "start": "4078390",
    "end": "4083660"
  },
  {
    "text": "to test whether Turing\nmachines halt on their input, even though we now know that\ntesting whether they accept",
    "start": "4083660",
    "end": "4090050"
  },
  {
    "text": "their input is not decidable. ",
    "start": "4090050",
    "end": "4095869"
  },
  {
    "text": "So you have to be open-minded\nto the possibility that the HALT\nproblem is decidable,",
    "start": "4095870",
    "end": "4101839"
  },
  {
    "text": "and we're going to show\nthat that's can't be. So we're going to show that\nif we could decide the halting",
    "start": "4101840",
    "end": "4107119"
  },
  {
    "text": "problem, then we can use that to\ndecide the acceptance problem.",
    "start": "4107120",
    "end": "4112479"
  },
  {
    "text": "OK, so how are we\ngoing to do that? So imagine how we can\nsolve the halting problem. So to solve the A,TM, which\nis what my job is to do,",
    "start": "4112479",
    "end": "4123339"
  },
  {
    "text": "so S is supposed to solve A,TM. I'm constructing a Turing\nmachine as decide A,TM.",
    "start": "4123340",
    "end": "4129839"
  },
  {
    "text": "I'm going to use first-- I'm giving it M and w. I'm going to feed it into R\nsince that's really all I got.",
    "start": "4129840",
    "end": "4135830"
  },
  {
    "text": "See if R tells me what happens. Does M on w at least halt?",
    "start": "4135830",
    "end": "4144680"
  },
  {
    "text": "Well, if R says,\nno, it doesn't halt, well then I'm actually done\nbecause if M doesn't even",
    "start": "4144680",
    "end": "4152120"
  },
  {
    "text": "halt on w, then it\ncouldn't be accepting w. So at that point, I know\nthat M doesn't accept w,",
    "start": "4152120",
    "end": "4157399"
  },
  {
    "text": "and I can reject right off. So R, you can see how it\ncould potentially be helpful.",
    "start": "4157399",
    "end": "4163899"
  },
  {
    "text": "But it's going to be\nhelpful in either way because if R says M\ndoes hold, well, then,",
    "start": "4163899",
    "end": "4170799"
  },
  {
    "text": "I'm also good because I\ndon't know the answer yet, but what I do know is I\ncan now simulate M on w",
    "start": "4170800",
    "end": "4178689"
  },
  {
    "text": "until it halts because\nR has told me it halts. So I don't have to worry\nabout getting into a loop.",
    "start": "4178689",
    "end": "4187160"
  },
  {
    "text": "So S can be confident in being\na decider for whatever it's doing because I'm running\nnow M on w with a guarantee",
    "start": "4187160",
    "end": "4197270"
  },
  {
    "text": "that it halts. And now, that's going to\ntell me-- now eventually,",
    "start": "4197270",
    "end": "4202960"
  },
  {
    "text": "the simulation of M on w is\ngoing to end up at an accept or reject. And that's going to\nbe the answer I need. So if M is accepted,\nthen accept.",
    "start": "4202960",
    "end": "4209320"
  },
  {
    "text": "And if M is rejected,\nthen reject. And that's how S solves A,TM\nusing R, which solves HALT,TM.",
    "start": "4209320",
    "end": "4219990"
  },
  {
    "text": "But S can't exist. And so therefore, R can't exist. And therefore, HALT,TM\ncan't be decidable.",
    "start": "4219990",
    "end": "4228460"
  },
  {
    "text": "OK? So that quickly-- ",
    "start": "4228460",
    "end": "4235630"
  },
  {
    "text": "OK, I'm not sure which\ndiagram you wanted me to show. But anyway, maybe\nwe can do that.",
    "start": "4235630",
    "end": "4241490"
  },
  {
    "text": "We're basically at the end\nof the hour or end of the 90 minutes. So let's do a quick review.",
    "start": "4241490",
    "end": "4246620"
  },
  {
    "text": "And if you stick around, I'm\nhappy to go back and look at any of the other slides that\nyou might have missed something on.",
    "start": "4246620",
    "end": "4252490"
  },
  {
    "text": "OK, so just to recap, we\nshowed that the natural numbers",
    "start": "4252490",
    "end": "4257950"
  },
  {
    "text": "and the real numbers are not the\nsame size using that definition of one-to-one correspondence to\nintroduce the diagonalization",
    "start": "4257950",
    "end": "4263740"
  },
  {
    "text": "method. We used the diagonalization\nmethod to show that A,TM is undecidable. We also showed\nthat little theorem",
    "start": "4263740",
    "end": "4270305"
  },
  {
    "text": "that if the language\nand its complement are recognizable, then\nthe language is decidable. And from that, we concluded\nthat A,TM complement is not",
    "start": "4270305",
    "end": "4278950"
  },
  {
    "text": "recognizable. And then we showed, at least\nby virtue of an introduction to the method, the reducibility\nmethod to show that HALT,TM is",
    "start": "4278950",
    "end": "4286390"
  },
  {
    "text": "undecidable. And that was today's lecture. And we're and we're at\nthe end of the hour.",
    "start": "4286390",
    "end": "4292880"
  },
  {
    "text": "So why don't I-- we are finished. You can log out.",
    "start": "4292880",
    "end": "4299260"
  },
  {
    "text": "And if you want, I\nwill stick around. OK, OK, this is kind of\na good question here.",
    "start": "4299260",
    "end": "4306510"
  },
  {
    "text": " So I'm getting a question about\nthe A,TM-complement, which is--",
    "start": "4306510",
    "end": "4320790"
  },
  {
    "text": "since we have a\nrecognizer for A,TM,",
    "start": "4320790",
    "end": "4326960"
  },
  {
    "text": "if I'm doing justice\nto this question,",
    "start": "4326960",
    "end": "4332150"
  },
  {
    "text": "we have a recogniser for A,TM,\nso why can't we just invert the answer?",
    "start": "4332150",
    "end": "4337949"
  },
  {
    "text": "Flip the answer around, and\nnow, we have a recognizer",
    "start": "4337950",
    "end": "4343310"
  },
  {
    "text": "for the complement of\nA,TM, A,TM-complement. So why doesn't that work?",
    "start": "4343310",
    "end": "4350530"
  },
  {
    "text": "Well, the reason that doesn't\nwork is because the recognizer",
    "start": "4350530",
    "end": "4356170"
  },
  {
    "text": "for A,TM might be rejecting\nsome things by looping.",
    "start": "4356170",
    "end": "4362080"
  },
  {
    "text": "And now, if you just flip\nthe accepting and rejecting,",
    "start": "4362080",
    "end": "4368470"
  },
  {
    "text": "when it hits one of\nthose halting states, it's going to give\nthe reverse answer.",
    "start": "4368470",
    "end": "4373660"
  },
  {
    "text": "But when it rejects\nby looping, it'll continue to reject by looping.",
    "start": "4373660",
    "end": "4379540"
  },
  {
    "text": "So you won't get the\ncomplementary language coming out. ",
    "start": "4379540",
    "end": "4386560"
  },
  {
    "text": "So if it would be helpful, I\ncan go back to that slide here,",
    "start": "4386560",
    "end": "4395780"
  },
  {
    "text": "which proves that\nA,TM-complement is unrecognizable because maybe we\nshould start with the bottom.",
    "start": "4395780",
    "end": "4406130"
  },
  {
    "text": "We know that A,TM is\nrecognizable and undecidable,",
    "start": "4406130",
    "end": "4413170"
  },
  {
    "text": "right? We already proved\nthose two facts. A,TM is recognizable from\nthe universal Turing machine,",
    "start": "4413170",
    "end": "4421020"
  },
  {
    "text": "and it's undecidable by the\ndiagonalization argument. Those two things\ntogether tell us",
    "start": "4421020",
    "end": "4428060"
  },
  {
    "text": "that the complement has\nto be unrecognizable because if a language\nand its complement",
    "start": "4428060",
    "end": "4435350"
  },
  {
    "text": "are both recognizable-- and\nwe already know the language itself is recognizable. So now, if the complement\nis also recognizable,",
    "start": "4435350",
    "end": "4441697"
  },
  {
    "text": "the language is going to be\ndecidable by the upper theorem. ",
    "start": "4441697",
    "end": "4450670"
  },
  {
    "text": "So it must be the case had\neither the language itself is unrecognizable, or its\ncomplement is unrecognizable.",
    "start": "4450670",
    "end": "4456948"
  },
  {
    "text": "We know the language\nis recognizable. That's what the universal\nTuring machine told us. So the only thing left\nis for the complement",
    "start": "4456948",
    "end": "4462540"
  },
  {
    "text": "to be unrecognizable. You should review that\nif you didn't get it",
    "start": "4462540",
    "end": "4468690"
  },
  {
    "text": "because this is the\nkind of reasoning we're going to be building\non things like that.",
    "start": "4468690",
    "end": "4475930"
  },
  {
    "text": "So I think it's good to\nmake sure you understand. OK.",
    "start": "4475930",
    "end": "4481010"
  },
  {
    "text": " OK, the diagram on\nthe right-- so this is just a Venn diagram here.",
    "start": "4481010",
    "end": "4487350"
  },
  {
    "text": "I threw this in at\nthe last minute here. I was worried about\nit being confusing.",
    "start": "4487350",
    "end": "4493640"
  },
  {
    "text": "That part is-- ",
    "start": "4493640",
    "end": "4500570"
  },
  {
    "text": "I'm trying to show that the\nthree classes that we've already talked about-- the languages which\nare decidable,",
    "start": "4500570",
    "end": "4506780"
  },
  {
    "text": "the languages which are\nTuring-recognizable, and the languages\nwhose complements are Turing-recognizable.",
    "start": "4506780",
    "end": "4512780"
  },
  {
    "text": "Those are three separate\nclasses of languages. And those come up here\nin those three regions.",
    "start": "4512780",
    "end": "4522630"
  },
  {
    "text": "These are the decidable ones. Here are the recognizable ones. And here are the ones whose\ncomplements are recognizable.",
    "start": "4522630",
    "end": "4531930"
  },
  {
    "text": "Now if a language is in\nboth the recognizable, and its complement\nis recognizable--",
    "start": "4531930",
    "end": "4538309"
  },
  {
    "text": "so it's in both of these\nbigger regions here-- then this theorem tells\nyou it's decidable.",
    "start": "4538310",
    "end": "4545980"
  },
  {
    "text": "So that's why the intersection\nof these two regions is marked as being\ndecidable because that",
    "start": "4545980",
    "end": "4551940"
  },
  {
    "text": "means you're in both. ",
    "start": "4551940",
    "end": "4557510"
  },
  {
    "text": "OK? But we know that A,TM is\nsitting out here as recognizable",
    "start": "4557510",
    "end": "4563090"
  },
  {
    "text": "but not decidable. So A,TM is in the\nrecognizable side, but it's not on the complement\nof recognizable, A,TM itself.",
    "start": "4563090",
    "end": "4572450"
  },
  {
    "text": "The complement of A,TM is the\ncomplement of a recognizable but itself is not recognizable\nand not decidable.",
    "start": "4572450",
    "end": "4582119"
  },
  {
    "text": "So you got this side\nof nice, you know-- I hope you think\nit's nice, but it's",
    "start": "4582120",
    "end": "4588340"
  },
  {
    "text": "sort of a try to summarize\nthings in this little Venn diagram. ",
    "start": "4588340",
    "end": "4595200"
  },
  {
    "text": "So I think I'm going\nto then sign off.",
    "start": "4595200",
    "end": "4600610"
  },
  {
    "text": "And I'll see you all on Tuesday.",
    "start": "4600610",
    "end": "4605690"
  },
  {
    "text": "And have a good weekend. Bye bye. ",
    "start": "4605690",
    "end": "4622000"
  }
]