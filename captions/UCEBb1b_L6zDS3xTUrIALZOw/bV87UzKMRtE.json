[
  {
    "start": "0",
    "end": "102000"
  },
  {
    "text": " [MUSIC PLAYING]",
    "start": "0",
    "end": "19519"
  },
  {
    "text": "PROFESSOR: Well, Hal just told\nus how you build robust systems. The key idea was--",
    "start": "19520",
    "end": "26960"
  },
  {
    "text": "I'm sure that many of you don't\nreally assimilate that yet-- but the key idea is that\nin order to make a system",
    "start": "26960",
    "end": "32980"
  },
  {
    "text": "that's robust, it has to be\ninsensitive to small changes, that is, a small change in the\nproblem should lead to only a",
    "start": "32980",
    "end": "39680"
  },
  {
    "text": "small change in the solution. There ought to be\na continuity. The space of solutions ought to\nbe continuous in this space",
    "start": "39680",
    "end": "45274"
  },
  {
    "text": "of problems. The way he was explaining how\nto do that was instead of solving a particular problem\nat every level of",
    "start": "45275",
    "end": "52240"
  },
  {
    "text": "decomposition of the problem at\nthe subproblems, where you solve the class of problems,\nwhich are a neighborhood of",
    "start": "52240",
    "end": "58570"
  },
  {
    "text": "the particular problem that\nyou're trying to solve. The way you do that is by\nproducing a language at that",
    "start": "58570",
    "end": "63980"
  },
  {
    "text": "level of detail in which the\nsolutions to that class of problems is representable\nin that language.",
    "start": "63980",
    "end": "71170"
  },
  {
    "text": "Therefore when you makes more\nchanges to the problem you're trying to solve, you generally\nhave to make only small local",
    "start": "71170",
    "end": "77140"
  },
  {
    "text": "changes to the solution you've\nconstructed, because at the level of detail you're working,\nthere's a language",
    "start": "77140",
    "end": "83190"
  },
  {
    "text": "where you can express the\nvarious solutions to alternate problems of the same type.",
    "start": "83190",
    "end": "90170"
  },
  {
    "text": "Well that's the beginning of a\nvery important idea, the most important perhaps idea that\nmakes computer science more",
    "start": "90170",
    "end": "97950"
  },
  {
    "text": "powerful than most of the other\nkinds of engineering disciplines we know about.",
    "start": "97950",
    "end": "103500"
  },
  {
    "start": "102000",
    "end": "422000"
  },
  {
    "text": "What we've seen so far\nis sort of how to use embedding of languages.",
    "start": "103500",
    "end": "109500"
  },
  {
    "text": "And, of course, the power of\nembedding languages partly comes from procedures\nlike this one that",
    "start": "109500",
    "end": "115480"
  },
  {
    "text": "I showed you yesterday. What you see here is the\nderivative program that we",
    "start": "115480",
    "end": "121210"
  },
  {
    "text": "described yesterday. It's a procedure that takes a\nprocedure as an argument and",
    "start": "121210",
    "end": "126270"
  },
  {
    "text": "returns a procedure\nas a value. And using such things\nis very nice.",
    "start": "126270",
    "end": "132680"
  },
  {
    "text": "You can make things like push\ncombinators and all that sort of wonderful thing that\nyou saw last time.",
    "start": "132680",
    "end": "138019"
  },
  {
    "text": "However, now I'm going to\nreally muddy the waters. See this confuses the issue of\nwhat's the procedure and what",
    "start": "138020",
    "end": "145430"
  },
  {
    "text": "is data, but not very badly. What we really want to do is\nconfuse it very badly.",
    "start": "145430",
    "end": "151260"
  },
  {
    "text": "And the best way to do that is\nto get involved with the manipulation of the algebraic\nexpressions that the procedures themselves\nare expressed in.",
    "start": "151260",
    "end": "159750"
  },
  {
    "text": "So at this point, I want to talk\nabout instead of things like on this slide, the\nderivative procedure being a",
    "start": "159750",
    "end": "168300"
  },
  {
    "text": "thing that manipulates\na procedure-- this is a numerical method\nyou see here. And what you're seeing is\na representation of the",
    "start": "168300",
    "end": "176440"
  },
  {
    "text": "numerical approximation\nto the derivative. That's what's here. In fact what I'd like to talk\nabout is instead things that",
    "start": "176440",
    "end": "184180"
  },
  {
    "text": "look like this. And what we have here are rules\nfrom a calculus book.",
    "start": "184180",
    "end": "192080"
  },
  {
    "text": "These are rules for finding\nthe derivatives of the expressions that one\nmight write in",
    "start": "192080",
    "end": "198189"
  },
  {
    "text": "some algebraic language. It says things like a derivative\nof a constant is 0.",
    "start": "198190",
    "end": "204990"
  },
  {
    "text": "The derivative of the valuable\nwith respect to which you are taking the derivative is 1. The derivative of a constant\ntimes the function is the",
    "start": "204990",
    "end": "212490"
  },
  {
    "text": "constant times the derivative\nof the function, and things like that.",
    "start": "212490",
    "end": "218300"
  },
  {
    "text": "These are exact expressions. These are not numerical\napproximations. Can we make programs?",
    "start": "218300",
    "end": "224560"
  },
  {
    "text": "And, in fact, it's very easy\nto make programs that",
    "start": "224560",
    "end": "231000"
  },
  {
    "text": "manipulate these expressions. ",
    "start": "231000",
    "end": "236130"
  },
  {
    "text": "Well let's see. Let's look at these rules\nin some detail.",
    "start": "236130",
    "end": "241349"
  },
  {
    "text": "You all have seen these rules\nin your elementary calculus class at one time or another. And you know from calculus\nthat it's easy to produce",
    "start": "241350",
    "end": "250569"
  },
  {
    "text": "derivatives of arbitrary\nexpressions. You also know from your\nelementary calculus that it's hard to produce integrals.",
    "start": "250570",
    "end": "257139"
  },
  {
    "text": "Yet integrals and derivatives\nare opposites of each other. They're inverse operations. And they have the same rules.",
    "start": "257140",
    "end": "264360"
  },
  {
    "text": "What is special about these\nrules that makes it possible for one to produce derivatives\neasily and",
    "start": "264360",
    "end": "272310"
  },
  {
    "text": "integrals why it's so hard? Let's think about that\nvery simply.",
    "start": "272310",
    "end": "277510"
  },
  {
    "text": "Look at these rules. Every one of these rules, when\nused in the direction for taking derivatives, which is\nin the direction of this",
    "start": "277510",
    "end": "284260"
  },
  {
    "text": "arrow, the left side is\nmatched against your expression, and the right side\nis the thing which is the",
    "start": "284260",
    "end": "291710"
  },
  {
    "text": "derivative of that expression. The arrow is going that way. ",
    "start": "291710",
    "end": "298630"
  },
  {
    "text": "In each of these rules, the\nexpressions on the right-hand side of the rule that are\ncontained within derivatives",
    "start": "298630",
    "end": "305599"
  },
  {
    "text": "are subexpressions, are proper\nsubexpressions, of the expression on the\nleft-hand side.",
    "start": "305600",
    "end": "310670"
  },
  {
    "text": "So here we see the derivative\nof the sum, with is the expression on the left-hand\nside is the sum of the",
    "start": "310670",
    "end": "317260"
  },
  {
    "text": "derivatives of the pieces. So the rule of moving to the\nright are reduction rules.",
    "start": "317260",
    "end": "325070"
  },
  {
    "text": "The problem becomes easier. I turn a big complicated problem\nit's lots of smaller",
    "start": "325070",
    "end": "330810"
  },
  {
    "text": "problems and then combine the\nresults, a perfect place for recursion to work.",
    "start": "330810",
    "end": "336730"
  },
  {
    "text": "If I'm going in the other\ndirection like this, if I'm",
    "start": "336730",
    "end": "342310"
  },
  {
    "text": "trying to produce integrals,\nwell there are several problems you see here. First of all, if I try to\nintegrate an expression like a",
    "start": "342310",
    "end": "348460"
  },
  {
    "text": "sum, more than one\nrule matches. Here's one that matches. Here's one that matches.",
    "start": "348460",
    "end": "354849"
  },
  {
    "text": "I don't know which\none to take. And they may be different. I may get to explore\ndifferent things.",
    "start": "354850",
    "end": "360250"
  },
  {
    "text": "Also, the expressions become\nlarger in that direction. And when the expressions become\nlarger, then there's no",
    "start": "360250",
    "end": "366910"
  },
  {
    "text": "guarantee that any particular\npath I choose will terminate, because we will only terminate\nby accidental cancellation.",
    "start": "366910",
    "end": "374380"
  },
  {
    "text": "So that's why integrals\nare complicated searches and hard to do. Right now I don't want to do\nanything as hard as that.",
    "start": "374380",
    "end": "381640"
  },
  {
    "text": "Let's work on derivatives\nfor a while. Well, these roles are\nones you know for",
    "start": "381640",
    "end": "386860"
  },
  {
    "text": "the most part hopefully. So let's see if we can write a\nprogram which is these rules.",
    "start": "386860",
    "end": "392409"
  },
  {
    "text": "And that should be very easy. Just write the program. See, because while I showed you\nis that it's a reduction",
    "start": "392410",
    "end": "399009"
  },
  {
    "text": "rule, it's something appropriate\nfor a recursion. And, of course, what we have for\neach of these rules is we",
    "start": "399010",
    "end": "405229"
  },
  {
    "text": "have a case in some\ncase analysis. So I'm just going to write\nthis program down.",
    "start": "405230",
    "end": "410350"
  },
  {
    "text": " Now, of course, I'm going to be\nsaying something you have",
    "start": "410350",
    "end": "416780"
  },
  {
    "text": "to believe. Right? What you have to believe is I\ncan represent these algebraic expressions, that I can grab\ntheir parts, that I can put",
    "start": "416780",
    "end": "423210"
  },
  {
    "start": "422000",
    "end": "483000"
  },
  {
    "text": "them together. We've invented list structures\nso that you can do that. But you don't want to worry\nabout that now.",
    "start": "423210",
    "end": "429810"
  },
  {
    "text": "Right now I'm going to write the\nprogram that encapsulates these rules independent of\nthe representation of the",
    "start": "429810",
    "end": "434919"
  },
  {
    "text": "algebraic expressions. ",
    "start": "434920",
    "end": "440580"
  },
  {
    "text": "You have a derivative of\nan expression with",
    "start": "440580",
    "end": "447610"
  },
  {
    "text": "respect to a variable. This is a different\nthing than the derivative of the function.",
    "start": "447610",
    "end": "455039"
  },
  {
    "text": "That's what we saw last time,\nthat numerical approximation. It's something you can't\nopen up a function.",
    "start": "455040",
    "end": "460860"
  },
  {
    "text": "It's just the answers. The derivative of\nan expression is the way it's written.",
    "start": "460860",
    "end": "465990"
  },
  {
    "text": "And therefore it's a syntactic\nphenomenon. And so a lot of what we're going\nto be doing today is worrying about syntax,\nsyntax of expressions",
    "start": "465990",
    "end": "473400"
  },
  {
    "text": "and things like that. Well, there's a case analysis. Anytime we do anything\ncomplicated thereby a",
    "start": "473400",
    "end": "480420"
  },
  {
    "text": "recursion, we presumably\nneed a case analysis. It's the essential\nway to begin. And that's usually\na conditional",
    "start": "480420",
    "end": "486590"
  },
  {
    "start": "483000",
    "end": "571000"
  },
  {
    "text": "of some large kind. Well, what are their\npossibilities? the first rule that you saw is\nthis something a constant?",
    "start": "486590",
    "end": "492290"
  },
  {
    "text": " And what I'm asking is, is the\nexpression a constant with",
    "start": "492290",
    "end": "500509"
  },
  {
    "text": "respect to the variable given?  If so, the result is 0,\nbecause the derivative",
    "start": "500510",
    "end": "508460"
  },
  {
    "text": "represents the rate of\nchange of something. If, however, the expression that\nI'm taking the derivative",
    "start": "508460",
    "end": "518169"
  },
  {
    "text": "of is the variable I'm varying,\nthen this is the same variable, the expression var,\nthen the rate of change of the",
    "start": "518169",
    "end": "532560"
  },
  {
    "text": "expression with respect\nto the variable is 1. It's the same 1. ",
    "start": "532560",
    "end": "538970"
  },
  {
    "text": "Well now there are a couple\nof other possibilities. It could, for example,\nbe a sum.",
    "start": "538970",
    "end": "544010"
  },
  {
    "text": "Well, I don't know how I'm going\nto express sums yet. Actually I do. But I haven't told you yet.",
    "start": "544010",
    "end": "550370"
  },
  {
    "text": "But is it a sum? I'm imagining that there's\nsome way of telling.",
    "start": "550370",
    "end": "555520"
  },
  {
    "text": "I'm doing a dispatch on the type\nof the expression here,",
    "start": "555520",
    "end": "560860"
  },
  {
    "text": "absolutely essential in\nbuilding languages. Languages are made out of\ndifferent expressions.",
    "start": "560860",
    "end": "566520"
  },
  {
    "text": "And soon we're going to see\nthat in our more powerful methods of building languages\non languages.",
    "start": "566520",
    "end": "572760"
  },
  {
    "start": "571000",
    "end": "764000"
  },
  {
    "text": "Is an expression a sum? If it's a sum, well, we know the\nrule for derivative of the",
    "start": "572760",
    "end": "578360"
  },
  {
    "text": "sum is the sum of the\nderivatives of the parts. One of them is called\nthe addend and the",
    "start": "578360",
    "end": "583370"
  },
  {
    "text": "other is the augend. But I don't have enough space\non the blackboard to such long names. So I'll call them A1 and A2.",
    "start": "583370",
    "end": "588660"
  },
  {
    "text": "I want to make a sum.  Do you remember which is the sum\nfor end or the menu end?",
    "start": "588660",
    "end": "597300"
  },
  {
    "text": "Or was it the dividend\nand the divisor or something like that? Make sum of the derivative\nof the A1, I'll call it.",
    "start": "597300",
    "end": "608720"
  },
  {
    "text": "It's the addend of the\nexpression with respect to the variable, and the derivative of\nthe A2 of the expression,",
    "start": "608720",
    "end": "623506"
  },
  {
    "text": "because the two arguments,\nthe addition with respect to the variable. ",
    "start": "623506",
    "end": "632450"
  },
  {
    "text": "And another rule that we know is\nproduct rule, which is, if the expression is a product.",
    "start": "632450",
    "end": "637600"
  },
  {
    "start": "637600",
    "end": "643089"
  },
  {
    "text": "By the way, it's a good idea\nwhen you're defining things, when you're defining predicates,\nto give them a",
    "start": "643090",
    "end": "649440"
  },
  {
    "text": "name that ends in\na question mark. This question mark doesn't\nmean anything. It's for us as an agreement.",
    "start": "649440",
    "end": "654730"
  },
  {
    "text": "It's a conventional interface\nbetween humans so you can read my programs more easily.",
    "start": "654730",
    "end": "659980"
  },
  {
    "text": "So I want you to, when you write\nprograms, if you define a predicate procedure, that's\nsomething that rings true of",
    "start": "659980",
    "end": "665330"
  },
  {
    "text": "false, it should have a name\nwhich ends in question mark. The list doesn't care. I care.",
    "start": "665330",
    "end": "671740"
  },
  {
    "text": "I want to make a sum. Because the derivative of a\nproduct is the sum of the",
    "start": "671740",
    "end": "678280"
  },
  {
    "text": "first times the derivative of\nthe second plus the second times the derivative of the\nfirst. Make a sum of two",
    "start": "678280",
    "end": "686620"
  },
  {
    "text": "things, a product of, well, I'm\ngoing to say the M1 of the",
    "start": "686620",
    "end": "697710"
  },
  {
    "text": "expression, and the derivative\nof the M2 of the expression",
    "start": "697710",
    "end": "707560"
  },
  {
    "text": "with respect to the variable,\nand the product of the",
    "start": "707560",
    "end": "721680"
  },
  {
    "text": "derivative of M1, the multiplier\nof the expression,",
    "start": "721680",
    "end": "730720"
  },
  {
    "text": "with respect to the variable. It's the product of that and the\nmultiplicand, M2, of the",
    "start": "730720",
    "end": "737340"
  },
  {
    "text": "expression.  Make that product.",
    "start": "737340",
    "end": "742629"
  },
  {
    "text": "Make the sum. Close that case. And, of course, I could add as\nmany cases as I like here for",
    "start": "742630",
    "end": "748590"
  },
  {
    "text": "a complete set of rules you\nmight find in a calculus book. ",
    "start": "748590",
    "end": "754880"
  },
  {
    "text": "So this is what it takes to\nencapsulate those rules.",
    "start": "754880",
    "end": "761184"
  },
  {
    "text": "And you see, you have to realize\nthere's a lot of wishful thinking here. I haven't told you anything\nabout how I'm going to make",
    "start": "761184",
    "end": "766620"
  },
  {
    "start": "764000",
    "end": "929000"
  },
  {
    "text": "these representations. Now, once I've decided that\nthis is my set of rules, I",
    "start": "766620",
    "end": "772830"
  },
  {
    "text": "think it's time to play with\nthe representation. Let's attack that/",
    "start": "772830",
    "end": "778030"
  },
  {
    "text": "Well, first of all, I'm\ngoing to play a pun. It's an important pun. It's a key to a sort\nof powerful idea.",
    "start": "778030",
    "end": "786589"
  },
  {
    "text": " If I want to represent sums, and\nproducts, and differences,",
    "start": "786590",
    "end": "792790"
  },
  {
    "text": "and quotients, and things like\nthat, why not use the same language as I'm writing\nmy program in?",
    "start": "792790",
    "end": "800660"
  },
  {
    "text": "I write my program in algebraic\nexpressions that look like the sum of the product\non a and the product",
    "start": "800660",
    "end": "809280"
  },
  {
    "text": "of x and x, and things\nlike that.",
    "start": "809280",
    "end": "814330"
  },
  {
    "text": "And the product of b and x and\nc, whatever, make that a sum",
    "start": "814330",
    "end": "819390"
  },
  {
    "text": "of the product. Right now I don't want to have\nprocedures with unknown numbers of arguments, a product\nof b and x and c.",
    "start": "819390",
    "end": "828300"
  },
  {
    "text": " This is list structure.",
    "start": "828300",
    "end": "834279"
  },
  {
    "text": "And the reason why this is nice,\nis because any one of these objects has a property.",
    "start": "834280",
    "end": "840380"
  },
  {
    "text": "I know where the car is. The car is the operator. And the operands are the\nsuccessive cdrs the successive",
    "start": "840380",
    "end": "848190"
  },
  {
    "text": "cars of the cdrs of the\nlist that this is. It makes it very convenient.",
    "start": "848190",
    "end": "854470"
  },
  {
    "text": "I have to parse it. It's been done for me. I'm using the embedding\nand Lisp to advantage.",
    "start": "854470",
    "end": "859685"
  },
  {
    "text": " So, for example, let's start\nusing list structure to write",
    "start": "859685",
    "end": "869339"
  },
  {
    "text": "down the representation that I'm\nimplicitly assuming here.",
    "start": "869340",
    "end": "875390"
  },
  {
    "text": "Well I have to define various\nthings that are implied in this representation. Like I have to find out\nhow to do a constant,",
    "start": "875390",
    "end": "881210"
  },
  {
    "text": "how you do same variable. Let's do those first. That's\npretty easy enough. Now I'm going to be introducing\nlots of primitives",
    "start": "881210",
    "end": "887410"
  },
  {
    "text": "here, because these are\nthe primitives that come with list structure. OK, you define a constant.",
    "start": "887410",
    "end": "893015"
  },
  {
    "start": "893015",
    "end": "902800"
  },
  {
    "text": "And what I mean by a constant,\nan expression that's constant with respect to a veritable,\nis that the expression is",
    "start": "902800",
    "end": "910860"
  },
  {
    "text": "something simple. I can't take it into\npieces, and yet it isn't that variable.",
    "start": "910860",
    "end": "916550"
  },
  {
    "text": "I can't break it up, and yet\nit isn't that variable. That does not mean that there\nmay be other expressions that",
    "start": "916550",
    "end": "922840"
  },
  {
    "text": "are more complicated\nthat are constants. It's just that I'm going to\nlook at the primitive constants in this way.",
    "start": "922840",
    "end": "930510"
  },
  {
    "start": "929000",
    "end": "1056000"
  },
  {
    "text": "So what this is, is it says\nthat's it's the and. I can combine predicate\nexpressions which return true",
    "start": "930510",
    "end": "937030"
  },
  {
    "text": "or false with and. Something atomic, The expression\nis atomic, meaning",
    "start": "937030",
    "end": "945600"
  },
  {
    "text": "it cannot be broken\ninto parts. It doesn't have a car and a cdr.\nIt's not a list. It adds",
    "start": "945600",
    "end": "951149"
  },
  {
    "text": "a special test built\ninto the system. And it's not identically\nequal to that variable.",
    "start": "951150",
    "end": "966950"
  },
  {
    "text": "I'm representing my variable\nby things that are symbols which cannot be broken into\npieces, things like x, and y,",
    "start": "966950",
    "end": "976550"
  },
  {
    "text": "things like this.  Whereas, of course, something\nlike this can be broken up",
    "start": "976550",
    "end": "981889"
  },
  {
    "text": "into pieces.  And the same variable of an\nexpression with respect to a",
    "start": "981890",
    "end": "1000560"
  },
  {
    "text": "variable is, in fact, an\natomic expression.",
    "start": "1000560",
    "end": "1008840"
  },
  {
    "text": "I want to have an atomic expression, which is identical.",
    "start": "1008840",
    "end": "1019329"
  },
  {
    "start": "1019330",
    "end": "1028030"
  },
  {
    "text": "I don't want to look inside\nthis stuff anymore.",
    "start": "1028030",
    "end": "1033329"
  },
  {
    "text": "These are primitive maybe. But it doesn't matter. I'm using things that are given\nto me with a language.",
    "start": "1033329",
    "end": "1042569"
  },
  {
    "text": "I'm not terribly interest\nin them Now how do we deal with sums? Ah, something very interesting\nwill happen.",
    "start": "1042569",
    "end": "1049100"
  },
  {
    "text": "A sum is something which is not\natomic and begins with the plus symbol.",
    "start": "1049100",
    "end": "1055230"
  },
  {
    "text": "That's what it means. So here, I will define. ",
    "start": "1055230",
    "end": "1065630"
  },
  {
    "start": "1056000",
    "end": "1118000"
  },
  {
    "text": "An question is a sum if and it's\nnot atomic and it's head,",
    "start": "1065630",
    "end": "1088380"
  },
  {
    "text": "it's beginning, its car of the\nexpression is the symbol plus.",
    "start": "1088380",
    "end": "1095140"
  },
  {
    "text": " Now you're about to see\nsomething you haven't seen",
    "start": "1095140",
    "end": "1101730"
  },
  {
    "text": "before, this quotation.  Why do I have that\nquotation there?",
    "start": "1101730",
    "end": "1109440"
  },
  {
    "text": "Say your name, AUDIENCE: Susanna. PROFESSOR: Louder. AUDIENCE: Susanna PROFESSOR: Say your name. AUDIENCE: Your name.",
    "start": "1109440",
    "end": "1115160"
  },
  {
    "text": "PROFESSOR: Louder. AUDIENCE: Your name. PROFESSOR: OK. What I'm showing you here\nis that the words",
    "start": "1115160",
    "end": "1122039"
  },
  {
    "start": "1118000",
    "end": "1560000"
  },
  {
    "text": "of English are ambiguous. I was saying, say your name.",
    "start": "1122040",
    "end": "1132220"
  },
  {
    "text": "I was also possibly saying\nsay, your name. ",
    "start": "1132220",
    "end": "1140710"
  },
  {
    "text": "But that cannot be distinguished\nin speech. However, we do have a notation\nin writing, which is quotation",
    "start": "1140710",
    "end": "1149600"
  },
  {
    "text": "for distinguishing these\ntwo possible meanings. In particular, over here, in\nLisp we have a notation for",
    "start": "1149600",
    "end": "1159490"
  },
  {
    "text": "distinguishing these meetings. If I were to just write a plus\nhere, a plus symbol, I would",
    "start": "1159490",
    "end": "1164992"
  },
  {
    "text": "be asking, is the first element\nof the expression, is the operator position\nof the expression,",
    "start": "1164992",
    "end": "1172220"
  },
  {
    "text": "the addition operator? I don't know. I would have to have written the\naddition operator there,",
    "start": "1172220",
    "end": "1179549"
  },
  {
    "text": "which I can't write. However, this way I'm asking,\nis this the symbolic object",
    "start": "1179550",
    "end": "1185470"
  },
  {
    "text": "plus, which normally stands\nfor the addition operator? That's what I want. That's the question\nI want to ask.",
    "start": "1185470",
    "end": "1193110"
  },
  {
    "text": "Now before I go any further,\nI want to point out the quotation is a very complex\nconcept, and adding it to a",
    "start": "1193110",
    "end": "1199780"
  },
  {
    "text": "language causes a great\ndeal of troubles. Consider the next slide.",
    "start": "1199780",
    "end": "1206370"
  },
  {
    "text": "Here's a deduction which we\nshould all agree with.",
    "start": "1206370",
    "end": "1211830"
  },
  {
    "text": "We have, Alyssa is smart and\nAlyssa is George's mother.",
    "start": "1211830",
    "end": "1217529"
  },
  {
    "text": "This is an equality, is. From those two, we can deduce\nthat George's mother is smart.",
    "start": "1217530",
    "end": "1227470"
  },
  {
    "text": "Because we can always substitute\nequals for equals in expressions.",
    "start": "1227470",
    "end": "1234250"
  },
  {
    "text": "Or can we? Here's a case where we have\n\"Chicago\" has seven letters.",
    "start": "1234250",
    "end": "1241400"
  },
  {
    "text": "The quotation means that I'm\ndiscussing the word Chicago, not what the word represents. ",
    "start": "1241400",
    "end": "1249940"
  },
  {
    "text": "Here I have that Chicago is the\nbiggest city in Illinois. As a consequence of this, I\nwould like to deduce that the",
    "start": "1249940",
    "end": "1257159"
  },
  {
    "text": "biggest city in Illinois\nhas seven letters. But that's manifestly false. ",
    "start": "1257160",
    "end": "1265480"
  },
  {
    "text": "Wow, it works. OK, so once we have things like\nthat, our language gets",
    "start": "1265480",
    "end": "1273420"
  },
  {
    "text": "much more complicated. Because it's no longer true that\nthings we tend to like to do with languages, like\nsubstituting equals for equals",
    "start": "1273420",
    "end": "1279750"
  },
  {
    "text": "and getting right answers, are\ngoing to work without being very careful. We can't substitute into what's\ncalled referentially",
    "start": "1279750",
    "end": "1286470"
  },
  {
    "text": "opaque contexts, of which a\nquotation is the prototypical type of referentially\nopaque context.",
    "start": "1286470",
    "end": "1293380"
  },
  {
    "text": "If you know what that means, you\ncan consult a philosopher. Presumably there is\none in the room.",
    "start": "1293380",
    "end": "1298790"
  },
  {
    "text": "In any case, let's continue now,\nnow that we at least have an operational understanding of\na 2000-year-old issue that",
    "start": "1298790",
    "end": "1305660"
  },
  {
    "text": "has to do with name, and\nmention, and all sorts of things like that. ",
    "start": "1305660",
    "end": "1312440"
  },
  {
    "text": "I have to define what I mean,\nhow to make a sum of two",
    "start": "1312440",
    "end": "1319789"
  },
  {
    "text": "things, an a1 and a2. And I'm going to do\nthis very simply. It's a list of the symbol\nplus, and a1, and a2.",
    "start": "1319790",
    "end": "1333600"
  },
  {
    "text": "And I can determine\nthe first element. ",
    "start": "1333600",
    "end": "1341600"
  },
  {
    "text": "Define a1 to be cadr. I've just",
    "start": "1341600",
    "end": "1354510"
  },
  {
    "text": "introduced another primitive. This is the car of the\ncdr of something.",
    "start": "1354510",
    "end": "1359990"
  },
  {
    "text": "You might want to know why car\nand cdr are names of these primitives, and why they've\nsurvived, even though they're",
    "start": "1359990",
    "end": "1366720"
  },
  {
    "text": "much better ideas like\nleft and right. We could have called them\nthings like that. Well, first of all, the names\ncome from the fact that in the",
    "start": "1366720",
    "end": "1374340"
  },
  {
    "text": "great past, when Lisp was\ninvented, I suppose in '58 or something, it was on a\n704 or something like",
    "start": "1374340",
    "end": "1380730"
  },
  {
    "text": "that, which had a machine. It was a machine that had an\naddress register and a decrement register. And these were the contents of\nthe address register and the",
    "start": "1380730",
    "end": "1387610"
  },
  {
    "text": "decrement register. So it's an historical\naccident. Now why have these\nnames survived? It's because Lisp programmers\nlike to talk to each other",
    "start": "1387610",
    "end": "1394110"
  },
  {
    "text": "over the phone. And if you want to have a long\nsequence of cars and cdrs you might say, cdaddedr, which\ncan be understood.",
    "start": "1394110",
    "end": "1402529"
  },
  {
    "text": "But left of right or right of\nleft is not so clear if you get good at it. So that's why we have\nthese words.",
    "start": "1402530",
    "end": "1410570"
  },
  {
    "text": "All of them up to four deep\nare defined typically in a Lisp system. ",
    "start": "1410570",
    "end": "1418270"
  },
  {
    "text": "A2 to be-- ",
    "start": "1418270",
    "end": "1423540"
  },
  {
    "text": "and, of course, you can see\nthat if I looked at one of these expressions like the sum\nof 3 and 5, what that is is a",
    "start": "1423540",
    "end": "1434630"
  },
  {
    "text": "list containing the symbol\nplus, and a number 3,",
    "start": "1434630",
    "end": "1446100"
  },
  {
    "text": "and a number 5.",
    "start": "1446100",
    "end": "1451470"
  },
  {
    "text": "Then the car is the\nsymbol plus. The car of the cdr. Well\nI take the cdr and",
    "start": "1451470",
    "end": "1459210"
  },
  {
    "text": "then I take the car. And that's how I get to the 3. That's the first argument. And the car of the cdr\nof the cdr gets me to",
    "start": "1459210",
    "end": "1464370"
  },
  {
    "text": "this one, the 5.  And similarly, of course, I\ncan define what's going on",
    "start": "1464370",
    "end": "1472970"
  },
  {
    "text": "with products. Let's do that very quickly. ",
    "start": "1472970",
    "end": "1488760"
  },
  {
    "text": "Is the expression a product? Yes if and if it's true, that's\nit's not atomic and",
    "start": "1488760",
    "end": "1501910"
  },
  {
    "text": "it's EQ quote, the asterisk\nsymbol, which is the operator",
    "start": "1501910",
    "end": "1513260"
  },
  {
    "text": "for multiplication. Make product of an M1 and an\nM2 to be list, quote, the",
    "start": "1513260",
    "end": "1535090"
  },
  {
    "text": "asterisk operation\nand M1 and M2.",
    "start": "1535090",
    "end": "1540929"
  },
  {
    "text": "and I define M1 to be cadr and\nM2 to be caddr. You get to be",
    "start": "1540930",
    "end": "1560596"
  },
  {
    "text": "a good Lisp programmer because\nyou start talking that way. I cdr down lists and console\nthem up and so on.",
    "start": "1560596",
    "end": "1566429"
  },
  {
    "text": "Now, now that we have\nessentially a complete program for finding derivatives,\nyou can add more rules if you like.",
    "start": "1566430",
    "end": "1572360"
  },
  {
    "text": "What kind of behavior\ndo we get out of it? I'll have to clear that x.",
    "start": "1572360",
    "end": "1577930"
  },
  {
    "text": "Well, supposing I define foo\nhere to be the sum of the",
    "start": "1577930",
    "end": "1588060"
  },
  {
    "text": "product of ax square\nand bx plus c. That's the same thing we see\nhere as the algebraic",
    "start": "1588060",
    "end": "1594019"
  },
  {
    "text": "expression written in the\nmore conventional notation over there. Well, the derivative of foo with\nrespect to x, which we",
    "start": "1594020",
    "end": "1600620"
  },
  {
    "text": "can see over here, is this\nhorrible, horrendous mess.",
    "start": "1600620",
    "end": "1606250"
  },
  {
    "text": "I would like it to\nbe 2ax plus b. But it's not.",
    "start": "1606250",
    "end": "1612240"
  },
  {
    "text": "It's equivalent to it. What is it? I have here, what do I have?",
    "start": "1612240",
    "end": "1620510"
  },
  {
    "text": "I have the derivative of\nthe product of x and x. Over here is, of course,\nthe sum of x times",
    "start": "1620510",
    "end": "1629410"
  },
  {
    "text": "1 and 1 times x. Now, well, it's the first times\nthe derivative of the second plus the second times the\nderivative of the first.",
    "start": "1629410",
    "end": "1635330"
  },
  {
    "text": "It's right. That's 2x of course. a times 2x is 2ax plus 0X square\ndoesn't count plus B",
    "start": "1635330",
    "end": "1646600"
  },
  {
    "text": "over here plus a bunch of 0's. Well the answer is right. But I give people take off\npoints on an exam for that,",
    "start": "1646600",
    "end": "1654390"
  },
  {
    "text": "sadly enough. Let's worry about that\nin the next segment. Are there any questions? ",
    "start": "1654390",
    "end": "1662970"
  },
  {
    "text": "Yes? AUDIENCE: If you had left the\nquote when you put the plus, then would that be referring\nto the procedure plus and",
    "start": "1662970",
    "end": "1671120"
  },
  {
    "text": "could you do a comparison\nbetween that procedure and some other procedure\nif you wanted to? PROFESSOR: Yes.",
    "start": "1671120",
    "end": "1676320"
  },
  {
    "text": "Good question. If I had left this quotation\noff at this point, if I had",
    "start": "1676320",
    "end": "1685649"
  },
  {
    "text": "left that quotation off at that\npoint, then I would be referring here to the procedure\nwhich is the thing",
    "start": "1685650",
    "end": "1692789"
  },
  {
    "text": "that plus is defined to be. And indeed, I could compare\nsome procedures with each",
    "start": "1692790",
    "end": "1702810"
  },
  {
    "text": "other for identity. Now what that means is\nnot clear right now.",
    "start": "1702810",
    "end": "1708080"
  },
  {
    "text": "I don't like to think\nabout it. Because I don't know exactly\nwhat it would need to compare procedures. There are reasons why that\nmay make no sense at all.",
    "start": "1708080",
    "end": "1715610"
  },
  {
    "text": "However, the symbols,\nwe understand. And so that's why I\nput that quote in.",
    "start": "1715610",
    "end": "1721240"
  },
  {
    "text": "I want to talk about\nthe symbol that's apparent on the page. ",
    "start": "1721240",
    "end": "1726250"
  },
  {
    "text": "Any other questions? OK. Thank you. Let's take a break.",
    "start": "1726250",
    "end": "1734210"
  },
  {
    "text": "[MUSIC PLAYING]",
    "start": "1734210",
    "end": "1770010"
  },
  {
    "text": "PROFESSOR: Well, let's see. We've just developed a fairly\nplausible program for",
    "start": "1770010",
    "end": "1775559"
  },
  {
    "text": "computing the derivatives of\nalgebraic expressions. It's an incomplete program,\nif you would like to add more rules.",
    "start": "1775560",
    "end": "1782330"
  },
  {
    "text": "And perhaps you might extend\nit to deal with uses of addition with any number of\narguments and multiplication",
    "start": "1782330",
    "end": "1788390"
  },
  {
    "text": "with any of the number\nof arguments. And that's all rather easy. However, there was a little\nfly in that ointment.",
    "start": "1788390",
    "end": "1797620"
  },
  {
    "text": "We go back to this slide.",
    "start": "1797620",
    "end": "1802980"
  },
  {
    "text": "We see that the expressions that\nwe get are rather bad.",
    "start": "1802980",
    "end": "1809000"
  },
  {
    "text": "This is a rather\nbad expression. How do we get such\nan expression? Why do we have that\nexpression?",
    "start": "1809000",
    "end": "1816940"
  },
  {
    "text": "Let's look at this expression\nin some detail. Let's find out where all\nthe pieces come from. As we see here, we\nhave a sum--",
    "start": "1816940",
    "end": "1824590"
  },
  {
    "text": "just what I showed you at the\nend of the last time-- of X times 1 plus 1\ntime X. That is a",
    "start": "1824590",
    "end": "1830110"
  },
  {
    "text": "derivative of this product. The produce of a times that,\nwhere a does not depend upon",
    "start": "1830110",
    "end": "1836270"
  },
  {
    "text": "x, and therefore is constant\nwith respect to x, is this sum, which goes from here all\nthe way through here and",
    "start": "1836270",
    "end": "1843910"
  },
  {
    "text": "through here. Because it is the first thing\ntimes the derivative of the second plus the derivative of\nthe first times the second as",
    "start": "1843910",
    "end": "1854900"
  },
  {
    "text": "the program we wrote\non the blackboard indicated we should do.",
    "start": "1854900",
    "end": "1860740"
  },
  {
    "text": "And, of course, the product of\nbx over here manifests itself",
    "start": "1860740",
    "end": "1866690"
  },
  {
    "text": "as B times 1 plus 0 times X\nbecause we see that B does not",
    "start": "1866690",
    "end": "1875220"
  },
  {
    "text": "depend upon X. And so the\nderivative of B is this 0, and the derivative of X with respect\nitself is the 1.",
    "start": "1875220",
    "end": "1883100"
  },
  {
    "text": "And, of course, the derivative\nof the sums over here turn into these two sums of the\nderivatives of the parts.",
    "start": "1883100",
    "end": "1889360"
  },
  {
    "text": "So what we're seeing here is\nexactly the thing I was trying to tell you about with Fibonacci\nnumbers a while ago,",
    "start": "1889360",
    "end": "1897760"
  },
  {
    "text": "that the form of the process\nis expanded from the local",
    "start": "1897760",
    "end": "1904430"
  },
  {
    "text": "rules that you see in the\nprocedure, that the procedure represents a set of local rules\nfor the expansion of",
    "start": "1904430",
    "end": "1911720"
  },
  {
    "text": "this process. And here, the process left\nbehind some stuff, which is",
    "start": "1911720",
    "end": "1919440"
  },
  {
    "text": "the answer. And it was constructed by the\nwalk it takes of the tree structure, which is\nthe expression.",
    "start": "1919440",
    "end": "1925775"
  },
  {
    "text": " So every part in the answer we\nsee here derives from some",
    "start": "1925775",
    "end": "1931540"
  },
  {
    "text": "part of the problem. Now, we can look at, for\nexample, the derivative of",
    "start": "1931540",
    "end": "1937360"
  },
  {
    "text": "foo, which is ax square plus\nbx plus c, with respect to other things, like here, for\nexample, we can see that the",
    "start": "1937360",
    "end": "1945320"
  },
  {
    "text": "derivative of foo with\nrespect to a. And it's very similar. It's, in fact, the identical\nalgebraic expression, except",
    "start": "1945320",
    "end": "1952840"
  },
  {
    "text": "for the fact that theses\n0's and 1's are in different places. Because the only degree of\nfreedom we have in this tree",
    "start": "1952840",
    "end": "1958260"
  },
  {
    "text": "walk is what's constant with\nrespect to the variable we're taking the derivative\nwith respect to and",
    "start": "1958260",
    "end": "1964550"
  },
  {
    "text": "was the same variable.  In other words, if we go back\nto this blackboard and we",
    "start": "1964550",
    "end": "1971660"
  },
  {
    "text": "look, we have no choice what\nto do when we take the derivative of the sum\nor a product.",
    "start": "1971660",
    "end": "1978150"
  },
  {
    "text": "The only interesting place here\nis, is the expression the",
    "start": "1978150",
    "end": "1983840"
  },
  {
    "text": "variable, or is the expression\na constant with respect to that variable for very, very\nsmall expressions?",
    "start": "1983840",
    "end": "1990130"
  },
  {
    "text": "In which case we get various\n1's and 0's, which if we go back to this slide, we can see\nthat the 0's that appear here,",
    "start": "1990130",
    "end": "1997289"
  },
  {
    "text": "for example, this 1 over here\nin derivative of foo with respect to A, which gets us an\nX square, because that 1 gets",
    "start": "1997290",
    "end": "2005980"
  },
  {
    "text": "the multiply of X and X into\nthe answer, that 1 is 0.",
    "start": "2005980",
    "end": "2012770"
  },
  {
    "text": "Over here, we're not taking\nthe derivative of foo with respect to c. But the shapes of these\nexpressions are the same.",
    "start": "2012770",
    "end": "2020300"
  },
  {
    "text": "See all those shapes. They're the same. ",
    "start": "2020301",
    "end": "2030480"
  },
  {
    "start": "2029000",
    "end": "2109000"
  },
  {
    "text": "Well is there anything\nwrong with our rules? No. They're the right rules.",
    "start": "2030480",
    "end": "2036250"
  },
  {
    "text": "We've been through\nthis one before. One of the things you're going\nto begin to discover is that",
    "start": "2036250",
    "end": "2042020"
  },
  {
    "text": "there aren't too many\ngood ideas.  When we were looking at rational\nnumbers yesterday,",
    "start": "2042020",
    "end": "2052138"
  },
  {
    "text": "the problem was that we got\n6/8 rather then 3/4. The answer was unsimplified.",
    "start": "2052139",
    "end": "2057949"
  },
  {
    "text": "The problem, of course,\nis very similar. There are things I'd like to be\nidentical by simplification",
    "start": "2057949",
    "end": "2064349"
  },
  {
    "text": "that don't become identical. And yet the rules for doing\naddition a multiplication of",
    "start": "2064350",
    "end": "2070690"
  },
  {
    "text": "rational numbers were correct. So the way we might solve this\nproblem is do the thing we did",
    "start": "2070690",
    "end": "2076350"
  },
  {
    "text": "last time, which always works. If something worked last time\nit ought to work again. It's changed representation.",
    "start": "2076350",
    "end": "2083119"
  },
  {
    "text": "Perhaps in the representation\nwe could put in a simplification step that\nproduces a simplified",
    "start": "2083120",
    "end": "2088940"
  },
  {
    "text": "representation. This may not always\nwork, of course. I'm not trying to say that\nit always works.",
    "start": "2088940",
    "end": "2095210"
  },
  {
    "text": "But it's one of the pieces of\nartillery we have in our war against complexity.",
    "start": "2095210",
    "end": "2101560"
  },
  {
    "text": "You see, because we solved our\nproblem very carefully. What we've done, is\nwe've divided the world in several parts.",
    "start": "2101560",
    "end": "2107630"
  },
  {
    "text": "There are derivatives rules and\ngeneral rules for algebra",
    "start": "2107630",
    "end": "2112980"
  },
  {
    "start": "2109000",
    "end": "2199000"
  },
  {
    "text": "of some sort at this\nlevel of detail. and i have an abstraction\nbarrier. ",
    "start": "2112980",
    "end": "2121874"
  },
  {
    "text": "And i have the representation of\nthe algebraic expressions,",
    "start": "2121874",
    "end": "2132710"
  },
  {
    "text": "list structure.  And in this barrier, I have\nthe interface procedures.",
    "start": "2132710",
    "end": "2143049"
  },
  {
    "text": "I have constant, and things\nlike same-var.",
    "start": "2143050",
    "end": "2149410"
  },
  {
    "start": "2149410",
    "end": "2154680"
  },
  {
    "text": "I have things like\nsum, make-sum. ",
    "start": "2154680",
    "end": "2162310"
  },
  {
    "text": "I have A1, A2. I have products and things\nlike that, all the other",
    "start": "2162310",
    "end": "2169370"
  },
  {
    "text": "things I might need for various\nkinds of algebraic expressions. Making this barrier allows me\nto arbitrarily change the",
    "start": "2169370",
    "end": "2178080"
  },
  {
    "text": "representation without changing\nthe rules that are written in terms of that\nrepresentation.",
    "start": "2178080",
    "end": "2185060"
  },
  {
    "text": "So if I can make the problem\ngo away by changing representation, the composition\nof the problem",
    "start": "2185060",
    "end": "2192320"
  },
  {
    "text": "into these two parts has\nhelped me a great deal. So let's take a very simple\ncase of this.",
    "start": "2192320",
    "end": "2198859"
  },
  {
    "text": "What was one of the problems? Let's go back to this\ntransparency again.",
    "start": "2198860",
    "end": "2204115"
  },
  {
    "start": "2199000",
    "end": "2419000"
  },
  {
    "text": "And we see here, oh yes, there's\nhorrible things like here is the sum of an\nexpression and 0.",
    "start": "2204115",
    "end": "2213190"
  },
  {
    "text": "Well that's no reason to think\nof it as anything other than the expression itself. Why should the summation\noperation have",
    "start": "2213190",
    "end": "2219970"
  },
  {
    "text": "made up this edition? It can be smarter than that.",
    "start": "2219970",
    "end": "2225550"
  },
  {
    "text": "Or here, for example, is\na multiplication of something by 1.",
    "start": "2225550",
    "end": "2230816"
  },
  {
    "text": "It's another thing like that. Or here is a product of\nsomething with 0, which is certainly 0.",
    "start": "2230816",
    "end": "2237800"
  },
  {
    "text": "So we won't have to make\nthis construction. So why don't we just do that?",
    "start": "2237800",
    "end": "2243800"
  },
  {
    "text": "We need to change the way\nthe representation works, almost here. ",
    "start": "2243800",
    "end": "2257500"
  },
  {
    "text": "Make-sum to be. Well, now it's not something\nso simple.",
    "start": "2257500",
    "end": "2264020"
  },
  {
    "text": "I'm not going to make a list\ncontaining the symbol plus and things unless I need to.",
    "start": "2264020",
    "end": "2271322"
  },
  {
    "text": "Well, what are the\npossibilities? ",
    "start": "2271322",
    "end": "2277220"
  },
  {
    "text": "I have some sort\nof cases here. If I have numbers, if\nanyone is a number--",
    "start": "2277220",
    "end": "2289160"
  },
  {
    "text": "and here's another primitive\nI've just introduced, it's possible to tell whether\nsomething's number--",
    "start": "2289160",
    "end": "2295230"
  },
  {
    "text": "and if number A2, meaning\nthey're not symbolic",
    "start": "2295230",
    "end": "2303090"
  },
  {
    "text": "expressions, then why not\ndo the addition now? The result is just a\nplus of A1 and A2.",
    "start": "2303090",
    "end": "2309540"
  },
  {
    "text": " I'm not asking if these\nrepresent numbers. Of course all of these symbols\nrepresent numbers.",
    "start": "2309540",
    "end": "2317100"
  },
  {
    "text": "I'm talking about whether\nthe one I've got is the number 3 right now.",
    "start": "2317100",
    "end": "2323420"
  },
  {
    "text": "And, for example, supposing A1\nis a number, and it's equal to",
    "start": "2323420",
    "end": "2339069"
  },
  {
    "text": "0, well then the answer\nis just A2.",
    "start": "2339070",
    "end": "2346900"
  },
  {
    "text": "There is no reason to\nmake anything up. And if A2 is a number,\nand equal A20, then",
    "start": "2346900",
    "end": "2367630"
  },
  {
    "text": "the result is A1. And only if I can't figure out\nsomething better to do with",
    "start": "2367630",
    "end": "2372770"
  },
  {
    "text": "this situation, well, I can\nstart a list. Otherwise I want",
    "start": "2372770",
    "end": "2381160"
  },
  {
    "text": "the representation to be the\nlist containing the quoted symbol plus, and A1, and A2.",
    "start": "2381160",
    "end": "2391850"
  },
  {
    "start": "2391850",
    "end": "2398720"
  },
  {
    "text": "And, of course, a very\nsimilar thing can be done for products. And I think I'll avoid\nboring you with them.",
    "start": "2398720",
    "end": "2405650"
  },
  {
    "text": "I was going to write it\non the blackboard. I don't think it's necessary. You know what to do.",
    "start": "2405650",
    "end": "2410830"
  },
  {
    "text": "It's very simple. But now, let's just see the kind\nof results we get out of",
    "start": "2410830",
    "end": "2417890"
  },
  {
    "text": "changing our program\nin this way. Well, here's the derivatives\nafter having just changed the",
    "start": "2417890",
    "end": "2425920"
  },
  {
    "start": "2419000",
    "end": "2641000"
  },
  {
    "text": "constructors for expressions. The same foo, aX square plus bX\nplus c, and what I get is",
    "start": "2425920",
    "end": "2435810"
  },
  {
    "text": "nothing more than the derivative\nof that is 2aX plus B. Well, it's not completely\nsimplified.",
    "start": "2435810",
    "end": "2442670"
  },
  {
    "text": "I would like to collect\ncommon terms and sums. Well, that's more work. And, of course, programs to do\nthis sort of thing are huge",
    "start": "2442670",
    "end": "2451130"
  },
  {
    "text": "and complicated. Algebraic simplification, it's\na very complicated mess.",
    "start": "2451130",
    "end": "2456510"
  },
  {
    "text": "There's a very famous program\nyou may have heard of called Maxima developed at MIT in the\npast, which is 5,000 pages of",
    "start": "2456510",
    "end": "2462750"
  },
  {
    "text": "Lisp code, mostly the algebraic\nsimplification operations. ",
    "start": "2462750",
    "end": "2470080"
  },
  {
    "text": "There we see the derivative\nof foo. In fact, X is at something I\nwouldn't take off more than 1 point for on an elementary\ncalculus class.",
    "start": "2470080",
    "end": "2478390"
  },
  {
    "text": "And the derivative of foo with\nrespect to a, well it's gone down to X times X, which\nisn't so bad.",
    "start": "2478390",
    "end": "2484730"
  },
  {
    "text": "And the derivative of foo with\nrespect to b is just X itself. And the derivative of foo with\nrespect to c comes out 1.",
    "start": "2484730",
    "end": "2490730"
  },
  {
    "text": "So I'm pretty pleased\nwith this. What you've seen is, of\ncourse, a little bit",
    "start": "2490730",
    "end": "2496830"
  },
  {
    "text": "contrived, carefully organized\nexample to show you how we can manipulate algebraic\nexpressions, how we do that",
    "start": "2496830",
    "end": "2503610"
  },
  {
    "text": "abstractly in terms of abstract\nsyntax rather than concrete syntax and how we can\nuse the abstraction to control",
    "start": "2503610",
    "end": "2513910"
  },
  {
    "text": "what goes on in building\nthese expressions. But the real story isn't just\nsuch a simple thing as that.",
    "start": "2513910",
    "end": "2520910"
  },
  {
    "text": "The real story is, in fact, that\nI'm manipulating these expressions. And the expressions are\nthe same expressions--",
    "start": "2520910",
    "end": "2526859"
  },
  {
    "text": "going back to the slide-- as the ones that are\nLisp expressions.",
    "start": "2526860",
    "end": "2532109"
  },
  {
    "text": "There's a pun here. I've chosen my representation\nto be the same as the representation in my language\nof similar things.",
    "start": "2532110",
    "end": "2542830"
  },
  {
    "text": "By doing so, I've invoked\na necessity. I created the necessity to have\nthings like quotation",
    "start": "2542830",
    "end": "2550890"
  },
  {
    "text": "because of the fact that my\nlanguage is capable of writing expressions that talk about\nexpressions of the language.",
    "start": "2550890",
    "end": "2559819"
  },
  {
    "text": "I need to have something that\nsays, this is an expression I'm talking about rather than\nthis expression is talking",
    "start": "2559820",
    "end": "2565319"
  },
  {
    "text": "about something, and I want\nto talk about that. ",
    "start": "2565320",
    "end": "2571289"
  },
  {
    "text": "So quotation stops and says,\nI'm talking about this expression itself. ",
    "start": "2571290",
    "end": "2578140"
  },
  {
    "text": "Now, given that power, if I can\nmanipulate expressions of the language, I can begin to\nbuild even much more powerful",
    "start": "2578140",
    "end": "2587370"
  },
  {
    "text": "layers upon layers\nof languages. Because I can write languages\nthat not only are embedded in Lisp or whatever language you\nstart with, but languages that",
    "start": "2587370",
    "end": "2596730"
  },
  {
    "text": "are completely different, that\nare just, if we say, interpreted in Lisp or\nsomething like that.",
    "start": "2596730",
    "end": "2603279"
  },
  {
    "text": "We'll get to understand those\nwords more in the future. But right now I just want to\nleave you with the fact that",
    "start": "2603280",
    "end": "2610150"
  },
  {
    "text": "we've hit a line which gives\nus tremendous power.",
    "start": "2610150",
    "end": "2616160"
  },
  {
    "text": "And this point we've bought\na sledgehammer. We have to be careful to what\nflies when we apply it.",
    "start": "2616160",
    "end": "2622250"
  },
  {
    "text": "Thank you. [MUSIC PLAYING] ",
    "start": "2622250",
    "end": "2643796"
  }
]