[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "5880"
  },
  {
    "start": "5880",
    "end": "25029"
  },
  {
    "text": "MICHAEL SIPSER: Why\ndon't we get started. So as I like to do,\nlet's just review",
    "start": "25030",
    "end": "31269"
  },
  {
    "text": "where we have been\nrecently, which is to discuss\ncontext-free languages.",
    "start": "31270",
    "end": "41019"
  },
  {
    "text": "We talked about the context-free\ngrammars and the pushdown automata as a way of describing\nthe context-free languages.",
    "start": "41020",
    "end": "49210"
  },
  {
    "text": "As you remember, the\ncontext-free languages are a larger class of languages\nthan the regular languages,",
    "start": "49210",
    "end": "55643"
  },
  {
    "text": "which is where we\nstarted, the languages of the finite automata. So when you add a stack,\nyou get more power.",
    "start": "55643",
    "end": "60910"
  },
  {
    "text": "You get more languages\nthat you can do. ",
    "start": "60910",
    "end": "66860"
  },
  {
    "text": "And we're very rapidly\ngoing to be moving on today to our main model for\nthe semester, which",
    "start": "66860",
    "end": "73130"
  },
  {
    "text": "is called the Turing machine. So let's just take\na look at what we're",
    "start": "73130",
    "end": "78200"
  },
  {
    "text": "going to be covering today. And that is, first,\nwe're going to show",
    "start": "78200",
    "end": "84110"
  },
  {
    "text": "that a technique analogous\nto the one we use for proving",
    "start": "84110",
    "end": "90470"
  },
  {
    "text": "that languages are not regular,\nbut this time for proving languages are not context-free.",
    "start": "90470",
    "end": "95630"
  },
  {
    "text": "So the pushdown\nautomata and the grammar still have their limitations\nin terms of what we normally",
    "start": "95630",
    "end": "101270"
  },
  {
    "text": "think a computer can do. And with that, we're going to\nuse that as a kind of a lead-in",
    "start": "101270",
    "end": "106369"
  },
  {
    "text": "to our general-purpose model,\nwhich is the Turing machine. And so we're going\nto talk about Turing",
    "start": "106370",
    "end": "116290"
  },
  {
    "text": "machines and aspects of that.",
    "start": "116290",
    "end": "123260"
  },
  {
    "text": "I would want to comment-- so I have posted the solutions\nfor the first problem set.",
    "start": "123260",
    "end": "128819"
  },
  {
    "text": "I know you're starting to think\nabout the second problem set now, which I have\nposted as well.",
    "start": "128820",
    "end": "134980"
  },
  {
    "text": "If you want to get a sense of\nwhat I'm looking for in terms of the level of detail, you\ncan look at the solutions",
    "start": "134980",
    "end": "140290"
  },
  {
    "text": "to problem set one,\nbecause I consider those to be model solutions. That's part of the reason\nwhy I post them, just",
    "start": "140290",
    "end": "145733"
  },
  {
    "text": "to give you a sense of the level\nof detail that I'm looking for, which is not a whole lot. But I do want to\nmake sure you're",
    "start": "145733",
    "end": "151630"
  },
  {
    "text": "capturing the main\nideas of what's involved in solving the problem.",
    "start": "151630",
    "end": "157620"
  },
  {
    "text": "So have a look at those. And for problem set two, which\nI'll talk about in a second--",
    "start": "157620",
    "end": "164992"
  },
  {
    "text": "so I'll just say a few words. If you want to pull that\nup, you can do that. But just to get you started\non a few of the problems",
    "start": "164992",
    "end": "171770"
  },
  {
    "text": "if you're finding some\nchallenges there-- I don't want you\nto get stuck really before you even understand\nwhat the problem is saying.",
    "start": "171770",
    "end": "179630"
  },
  {
    "text": "So for problem number one,\nif you looked at that, so that's a problem\nwhere you're asked to prove a certain language\nis not context free.",
    "start": "179630",
    "end": "188930"
  },
  {
    "text": "And by the way, all of the\nproblems in this problem set except perhaps for the\nlast, for number six,",
    "start": "188930",
    "end": "195500"
  },
  {
    "text": "you'll be able to solve. We'll have enough material\nat the end of today's lecture to solve all of them.",
    "start": "195500",
    "end": "201750"
  },
  {
    "text": "I believe that's right. Yeah, so number\nsix, you should have",
    "start": "201750",
    "end": "207019"
  },
  {
    "text": "enough as of Thursday's\nlecture to solve that. So problem number one,\nit's proving a language",
    "start": "207020",
    "end": "217850"
  },
  {
    "text": "is not context free. So we're going to introduce\na method for doing that. That method is going\nto come in handy.",
    "start": "217850",
    "end": "223160"
  },
  {
    "text": "For parts B and C, if you\nlook at the problem set, it has this strange-looking\nthing, sigma sigma",
    "start": "223160",
    "end": "228829"
  },
  {
    "text": "sigma in parenthesis star. It's really just a regular\nexpression that's very simple.",
    "start": "228830",
    "end": "235308"
  },
  {
    "text": "You should just make\nsure you understand that that's a way of\nrepresenting all strings whose",
    "start": "235308",
    "end": "240890"
  },
  {
    "text": "length is a multiple of 3. And if I stick a sigma\nin front of that,",
    "start": "240890",
    "end": "246710"
  },
  {
    "text": "it's all strings whose length\nis 1 plus a multiple of 3.",
    "start": "246710",
    "end": "252560"
  },
  {
    "text": "So once you understand\nthat, and if you think about what kinds of\nstrings are in the language C2,",
    "start": "252560",
    "end": "260420"
  },
  {
    "text": "it'll help you to\nunderstand what happens when you take those unions. And parts B and C are not\nintended to be very hard,",
    "start": "260420",
    "end": "269300"
  },
  {
    "text": "but you just have to\nunderstand what's going on. Problem number two is\nabout ambiguous grammars.",
    "start": "269300",
    "end": "274850"
  },
  {
    "text": "I touched on that\nbriefly in lecture. It's enough to\nsolve the problem.",
    "start": "274850",
    "end": "280580"
  },
  {
    "text": "The book has a little\nbit more detail about ambiguous languages,\nambiguous grammars--",
    "start": "280580",
    "end": "288470"
  },
  {
    "text": "ambiguous grammars,\nI should say. And so this is a\ngrammar that's supposed",
    "start": "288470",
    "end": "295040"
  },
  {
    "text": "to represent a fragment\nof a programming language with if thens and if then elses.",
    "start": "295040",
    "end": "303139"
  },
  {
    "text": "I'm sure you're all familiar\nwith those kinds of constructs in programming languages.",
    "start": "303140",
    "end": "309199"
  },
  {
    "text": "And there is a natural\nambiguity that comes up in a programming language. If you have if some\ncondition then statement one,",
    "start": "309200",
    "end": "318500"
  },
  {
    "text": "else statement\ntwo, I presume you understand what the semantics\nof that is, what that means.",
    "start": "318500",
    "end": "324319"
  },
  {
    "text": "And the tricky thing\nis that if you have-- those statements can\nthemselves be if statements.",
    "start": "324320",
    "end": "329660"
  },
  {
    "text": "And so if you have the\nsituation where you have if then and if then else is what\nfollows that, the question is,",
    "start": "329660",
    "end": "339930"
  },
  {
    "text": "where does the else attach? Is it to the second\nif or to the first if? So that's kind of a big hint\non this problem, but that's OK.",
    "start": "339930",
    "end": "346715"
  },
  {
    "start": "346715",
    "end": "352680"
  },
  {
    "text": "You need to take\nthat and figure out how to get an actual member\nof the language which",
    "start": "352680",
    "end": "358340"
  },
  {
    "text": "is ambiguously generated,\nand then show that it has-- show that it is by showing\ntwo parse trees or two",
    "start": "358340",
    "end": "367069"
  },
  {
    "text": "leftmost derivations. If you read the book, you'll\nsee that's an alternative way of representing a parse tree.",
    "start": "367070",
    "end": "372960"
  },
  {
    "text": "So and then what\nyou're supposed to do is give a grammar for the same\nlanguage which is unambiguous.",
    "start": "372960",
    "end": "380212"
  },
  {
    "text": "You don't have to prove\nthat it's unambiguous, because that's a bit of a chore. But as long as you\nunderstand what's going on,",
    "start": "380213",
    "end": "385490"
  },
  {
    "text": "you should be able to come up\nwith an unambiguous grammar which resolves that ambiguity.",
    "start": "385490",
    "end": "390530"
  },
  {
    "text": "And I don't have in mind\nchanging the language by introducing new\nprogramming language",
    "start": "390530",
    "end": "396170"
  },
  {
    "text": "constructs like a \"begin end.\" That's not in the\nspirit of this problem, because that's a\ndifferent-- it's grammar",
    "start": "396170",
    "end": "403160"
  },
  {
    "text": "for a different language. So you need to be\ngenerating the same language without any other extraneous\nthings going on that are",
    "start": "403160",
    "end": "410000"
  },
  {
    "text": "going to resolve the ambiguity. The ambiguity needs to be\nresolved within the structure of the grammar itself.",
    "start": "410000",
    "end": "415860"
  },
  {
    "text": "So keep that in mind. For problem number three\nabout the queue automata,",
    "start": "415860",
    "end": "421900"
  },
  {
    "text": "you know, that came up actually\nas a suggestion last lecture, I believe, or two lectures back.",
    "start": "421900",
    "end": "427810"
  },
  {
    "text": "What happens if you take a\npushdown automaton, but instead of a pushdown-- instead of a stack,\nyou add a queue.",
    "start": "427810",
    "end": "435520"
  },
  {
    "text": "What happens then? Well actually, it turns\nout that the model you get is very powerful. And it turns out to\nbe equivalent in power",
    "start": "435520",
    "end": "441100"
  },
  {
    "text": "to a Turing machine. So you'll see\narguments of that kind today, how you show that other\nmodels are equivalent-- no, not",
    "start": "441100",
    "end": "448820"
  },
  {
    "text": "today.  So I apologize.",
    "start": "448820",
    "end": "454660"
  },
  {
    "text": "This is going to be\nsomething that you'll-- I'm confusing myself here.",
    "start": "454660",
    "end": "461319"
  },
  {
    "text": "Problem number three actually\nneeds Thursday's lecture as well to really at\nleast see examples of how",
    "start": "461320",
    "end": "467347"
  },
  {
    "text": "you do that kind of thing. ",
    "start": "467347",
    "end": "474490"
  },
  {
    "text": "Yeah, so I'll try to send\nout a note clarifying this. By the end of Thursday, you'll\nbe able to do everything,",
    "start": "474490",
    "end": "481030"
  },
  {
    "text": "except for problem six. And for problem six, you'll\nneed Tuesday's lecture, a week from today's lecture, to do.",
    "start": "481030",
    "end": "486730"
  },
  {
    "start": "486730",
    "end": "491840"
  },
  {
    "text": "So problem number\nfour, that one you'll be able to do at\nthe end of today.",
    "start": "491840",
    "end": "498200"
  },
  {
    "text": "That's also going\nto-- the problem is I'm working on preparing\nThursday's lecture too. So I'm getting a little--",
    "start": "498200",
    "end": "503585"
  },
  {
    "text": "I'm confusing myself. Problem number four,\nyou'll be able to do after Thursday's lecture. Maybe we should talk\nabout that next lecture.",
    "start": "503585",
    "end": "513469"
  },
  {
    "text": "Problem number five,\nyou can do today,",
    "start": "513470",
    "end": "519620"
  },
  {
    "text": "but maybe I'm not going to\nsay anything about that. And problem number six, I won't\nsay anything about either. OK, so why don't we\njust jump in then",
    "start": "519620",
    "end": "526850"
  },
  {
    "text": "and look at today's material. What about seven?",
    "start": "526850",
    "end": "532490"
  },
  {
    "text": "Oh, seven is an\noptional problem. Oh, I should have\nmentioned that. Seven is always going\nto be an option.",
    "start": "532490",
    "end": "538020"
  },
  {
    "text": "I indicate that\nwith a star I should have made that clear on the\nactual description here,",
    "start": "538020",
    "end": "543260"
  },
  {
    "text": "but seven is optional. It's just like we had\nfor problem set one. ",
    "start": "543260",
    "end": "549381"
  },
  {
    "text": "OK, let's move\nlet's move on, then, to what we're going\nto talk about today.",
    "start": "549382",
    "end": "554830"
  },
  {
    "text": "And just a little\nbit of review-- so we talked about\nthe equivalence",
    "start": "554830",
    "end": "559900"
  },
  {
    "text": "of context-free grammars\nand pushdown automata, as you remember. Oops, let me get myself\nout of the picture here.",
    "start": "559900",
    "end": "567190"
  },
  {
    "text": "As we mentioned last\ntime, we actually proved one direction, but the\nother direction of that, you just have to know\nit's true, but you",
    "start": "567190",
    "end": "573700"
  },
  {
    "text": "don't have to know the proof. The proof is a little\nbit lengthy, I would say. It's a nice proof,\nbut it's pretty long.",
    "start": "573700",
    "end": "580420"
  },
  {
    "text": "And there are two important\ncorollaries to that.",
    "start": "580420",
    "end": "586398"
  },
  {
    "text": "If you know what a\ncorollary is, it's just a simple\nconsequence which doesn't need much of a\nproof, sort of a very",
    "start": "586398",
    "end": "592410"
  },
  {
    "text": "straightforward consequence. First of all, I think we\npointed out last time,",
    "start": "592410",
    "end": "598029"
  },
  {
    "text": "one conclusion, one\ncorollary you get is that every regular language\nis a context-free language,",
    "start": "598030",
    "end": "603240"
  },
  {
    "text": "because a finite automaton is\na pushdown automaton that just",
    "start": "603240",
    "end": "610110"
  },
  {
    "text": "happens not to use its stack. So immediately, you get that\nevery language is context free.",
    "start": "610110",
    "end": "615630"
  },
  {
    "text": "And second of all, you\nalso immediately get that whenever you have\na context-free language",
    "start": "615630",
    "end": "624000"
  },
  {
    "text": "and a regular language and\nyou take their intersection, you get back a\ncontext-free language.",
    "start": "624000",
    "end": "631770"
  },
  {
    "text": "So context free intersect\nregular is context free.",
    "start": "631770",
    "end": "636960"
  },
  {
    "text": "That's actually mentioned in\nyour homework as well as one of the 0.x problems which\nI give to try to get you--",
    "start": "636960",
    "end": "645960"
  },
  {
    "text": "you don't have to turn those in,\nbut I suggest you look at them. I don't know how many of\nyou are looking at them. But this is a useful fact.",
    "start": "645960",
    "end": "652980"
  },
  {
    "text": "And some of those other facts\nin 0.x problems are useful. So I encourage you\nto look at them.",
    "start": "652980",
    "end": "659700"
  },
  {
    "text": "But anyway, intersection\nof context free and regular is context free. You might ask, what about\nintersection of context",
    "start": "659700",
    "end": "666450"
  },
  {
    "text": "free and context free? Do we have closure\nunder intersection? The answer is, no,\nwe do not have close",
    "start": "666450",
    "end": "672570"
  },
  {
    "text": "to closure under intersection. We'll talk about that shortly. So here is the\nproof sketch for--",
    "start": "672570",
    "end": "679800"
  },
  {
    "text": "I wanted to say that the\nintersection of context free and regular, why do we\nknow that's still context free?",
    "start": "679800",
    "end": "685260"
  },
  {
    "text": "Because the pushdown\nautomaton for A",
    "start": "685260",
    "end": "690990"
  },
  {
    "text": "can be simulating\nthe finite automaton for B inside its finite control,\ninside its finite memory.",
    "start": "690990",
    "end": "700020"
  },
  {
    "text": "The problem is, if you have\ntwo context-free languages, you have two pushdown\nautomata, you can't simulate that with\none pushdown automaton,",
    "start": "700020",
    "end": "707190"
  },
  {
    "text": "because it has only\na single stack. So if you're trying to take\nthe intersection of two context-free languages\nwith only a single stack,",
    "start": "707190",
    "end": "715440"
  },
  {
    "text": "you're going to be in trouble,\nbecause it's hard to-- anyway, that's not a\nproof, but at least it",
    "start": "715440",
    "end": "720878"
  },
  {
    "text": "shows you what goes wrong if\nyou try to do the obvious thing. ",
    "start": "720878",
    "end": "726220"
  },
  {
    "text": "OK, so if-- and just,\nhere is an important point",
    "start": "726220",
    "end": "734738"
  },
  {
    "text": "that was trying to make before. If A and B are both\ncontext free and you're taking the intersection, the\nresult may not necessarily",
    "start": "734738",
    "end": "742060"
  },
  {
    "text": "be a context-free language. So the class of\ncontext-free languages is not closed under\nits intersection.",
    "start": "742060",
    "end": "748570"
  },
  {
    "text": "We'll comment on that in a bit. ",
    "start": "748570",
    "end": "754590"
  },
  {
    "text": "The context-free languages\nare closed under the regular operations, however,\nunion, intersection--",
    "start": "754590",
    "end": "760790"
  },
  {
    "text": "union, concatenation, and star. So you should feel\ncomfortable that you know how to prove that.",
    "start": "760790",
    "end": "767300"
  },
  {
    "text": "Again, it's one of the-- I think it's problem 0.2.",
    "start": "767300",
    "end": "772333"
  },
  {
    "text": "And I think the solution is\neven given in the book for it. So you just should\nknow how to prove that.",
    "start": "772333",
    "end": "778610"
  },
  {
    "text": "It's pretty straightforward. OK, so let's move on then\nto basically conclude",
    "start": "778610",
    "end": "788750"
  },
  {
    "text": "our work on\ncontext-free languages, to understand the limitations\nof context-free grammars,",
    "start": "788750",
    "end": "797600"
  },
  {
    "text": "and what kinds of languages\nmay not be context free. And how do you prove that? So how do you prove\nthat, for some language,",
    "start": "797600",
    "end": "804290"
  },
  {
    "text": "there is no grammar? Again, you know,\nit's not enough just to, say, give an informal\ncomment that, I couldn't",
    "start": "804290",
    "end": "816880"
  },
  {
    "text": "think of a grammar, or some-- things of that kind. That's not going\nto be good enough. We need to have a proof.",
    "start": "816880",
    "end": "822600"
  },
  {
    "text": "So if we take the language\nhere, 0 to the k, 1 to the k, 2 to the k, so those\nare strings which",
    "start": "822600",
    "end": "828649"
  },
  {
    "text": "are runs of 0's followed\nby an equal number of 1's followed by an equal\nnumber of 2's, so just 0's,",
    "start": "828650",
    "end": "834319"
  },
  {
    "text": "then 1's, then 2's,\nall the same length. That's a language\nwhich is not going",
    "start": "834320",
    "end": "841019"
  },
  {
    "text": "to be a context-free language. And we'll give a method\nfor proving that. If you had a stack, you can\nmatch the 1's with the 0's, but",
    "start": "841020",
    "end": "850110"
  },
  {
    "text": "then once you're done with\nthat, the stack is empty. And how do you now make\nsure that the number of 2's",
    "start": "850110",
    "end": "856380"
  },
  {
    "text": "corresponds to the number\nof 1's that you had? So again, that's an\ninformal argument that's not good\nenough to be a proof,",
    "start": "856380",
    "end": "863980"
  },
  {
    "text": "but it sort of\ngives an intuition. So we're going to give a method\nfor proving non-context-free--",
    "start": "863980",
    "end": "872670"
  },
  {
    "text": "languages are not context free\nusing, again, a pumping lemma.",
    "start": "872670",
    "end": "878130"
  },
  {
    "text": "But this is going to\nbe a pumping lemma that applies to\ncontext-free language, not to regular languages.",
    "start": "878130",
    "end": "883720"
  },
  {
    "text": "It looks very similar, but\nit has some extra wrinkles thrown in, because the other\nolder pumping lemma was",
    "start": "883720",
    "end": "890640"
  },
  {
    "text": "specific to the\nregular languages. And this is going to be\nsomething that applies to the context-free languages.",
    "start": "890640",
    "end": "896900"
  },
  {
    "text": "OK, so now let's just read it. And then we'll try to\ninterpret it again.",
    "start": "896900",
    "end": "903480"
  },
  {
    "text": "It's very similar in spirit. Basically, it says\nthat, whenever you have a\ncontext-free language, all long strings\nin the language can",
    "start": "903480",
    "end": "910850"
  },
  {
    "text": "be pumped in some kind of way. So it's going to be a\nlittle different kind of pumping than we had before.",
    "start": "910850",
    "end": "917889"
  },
  {
    "text": "And you stay in the language. OK, so before, we broke the\nstring into three pieces",
    "start": "917890",
    "end": "925540"
  },
  {
    "text": "where we could repeat that\ncenterpiece as many times as you like. And you stay in the language.",
    "start": "925540",
    "end": "931210"
  },
  {
    "text": "Here, we're going\nto end up breaking the string into five pieces. So s is going to be\nbroken up into uvxyz.",
    "start": "931210",
    "end": "938005"
  },
  {
    "start": "938005",
    "end": "945604"
  },
  {
    "text": "And the way it's going to work\nhere-- so here is a picture. So all long strings--\nagain, there",
    "start": "945604",
    "end": "950605"
  },
  {
    "text": "is going to be a threshold. So whenever you have\na language, there is going to be some\ncut-off length.",
    "start": "950605",
    "end": "955630"
  },
  {
    "text": "So all the longer strings in\nthat language can be pumped. And you stay in the language. But the shorter strings,\nthere is no guarantee.",
    "start": "955630",
    "end": "962995"
  },
  {
    "text": "So if you have a long string in\nthe language of length at least this pumping length p,\nthen you can break it up",
    "start": "962995",
    "end": "968440"
  },
  {
    "text": "into five pieces. But now it's that second\nand fourth string that",
    "start": "968440",
    "end": "974770"
  },
  {
    "text": "are going to play that special\npumping role, which means that, what you can do is\nyou can repeat those",
    "start": "974770",
    "end": "984200"
  },
  {
    "text": "and you stay in the language. And it's important\nthat you repeat them both, that v and that\ny, the same number of times.",
    "start": "984200",
    "end": "991557"
  },
  {
    "text": "So you're going to\nhave a picture that looks something like this. And that is going to you repeat.",
    "start": "991557",
    "end": "999480"
  },
  {
    "text": " If you repeat the v and you\nrepeat the y, you get uvvxyyz.",
    "start": "999480",
    "end": "1004935"
  },
  {
    "text": " Or if you look at\nover here, it would",
    "start": "1004935",
    "end": "1010545"
  },
  {
    "text": "be uv squared xy squared z. And that's going to\nstill be in the language.",
    "start": "1010545",
    "end": "1018500"
  },
  {
    "text": "And then we have-- so that's one condition. We'll have to look at\nall of these conditions when we do the\nproof, but we just",
    "start": "1018500",
    "end": "1024380"
  },
  {
    "text": "want to understand what\nthe statement is right now. So the second condition is\nthat v and y together cannot be",
    "start": "1024380",
    "end": "1030589"
  },
  {
    "text": "empty. And really, that's another\nway of saying, they can't both be the empty string,\nbecause if they",
    "start": "1030589",
    "end": "1035869"
  },
  {
    "text": "were both the empty\nstring, then repeating them wouldn't change s.",
    "start": "1035869",
    "end": "1041297"
  },
  {
    "text": "And then of course it\nwould stay in the language. So it would be\nkind of meaningless if they were\nallowed to be empty.",
    "start": "1041297",
    "end": "1046880"
  },
  {
    "text": "And the last thing\nis, again, going to be there as a\nmatter of convenience for proving languages are not\ncontext free, because you have",
    "start": "1046880",
    "end": "1057980"
  },
  {
    "text": "to make sure there is no\npossible way of cutting up the string. When you're trying to prove a\nlanguage is not context free,",
    "start": "1057980",
    "end": "1064110"
  },
  {
    "text": "you have to show\nthe pumping fails.  It's going to be\nhelpful sometimes",
    "start": "1064110",
    "end": "1071240"
  },
  {
    "text": "to limit the ways in which\nthe string can be cut up, because then you have-- it's an easier job for\nyou to work with it.",
    "start": "1071240",
    "end": "1078690"
  },
  {
    "text": "So here, it's a little\ndifferent than before, but sort of similar, that\nvxy combine as a substring.",
    "start": "1078690",
    "end": "1086040"
  },
  {
    "text": "So I show that over here. vxy together is not too long.",
    "start": "1086040",
    "end": "1092600"
  },
  {
    "text": "So the vxy-- maybe it's\nbetter seen up here-- is going to be, at most, p.",
    "start": "1092600",
    "end": "1098240"
  },
  {
    "text": "We'll do an example in\na minute of using this. OK, so again, here\nis our pumping lemma.",
    "start": "1098240",
    "end": "1103640"
  },
  {
    "text": "I've just restated it. So we have it in front of us.",
    "start": "1103640",
    "end": "1109240"
  },
  {
    "text": "And we're going to do a proof. I'm just going to give you\nthe idea of the proof first. And then we'll go through\nsome of the details.",
    "start": "1109240",
    "end": "1115287"
  },
  {
    "text": "The idea is actually\npretty simple. We give it-- call it\na proof by picture.",
    "start": "1115287",
    "end": "1121060"
  },
  {
    "text": " Again, remember what\nwe're trying to do. We're trying to show that we\nhave this context-free language",
    "start": "1121060",
    "end": "1128700"
  },
  {
    "text": "A. And now all long strings in\nA have this pumping quality,",
    "start": "1128700",
    "end": "1135240"
  },
  {
    "text": "that you can break them\nup into five pieces so that the second and the\nfourth piece can be repeated.",
    "start": "1135240",
    "end": "1141880"
  },
  {
    "text": "And you stay in the language. So how do we know that\nthat's going to be true?",
    "start": "1141880",
    "end": "1147450"
  },
  {
    "text": "Let's take a look\nat the proof here. And why is that\ngoing to be true? So first of all, I'd like to\ndo it qualitatively rather",
    "start": "1147450",
    "end": "1156100"
  },
  {
    "text": "than quantitatively. So let's just imagine,\ninstead of thinking-- we'll calculate what p is later.",
    "start": "1156100",
    "end": "1161740"
  },
  {
    "text": "But just imagine that s is some\nreally, really long string. That's the way I like\nto think about it.",
    "start": "1161740",
    "end": "1167290"
  },
  {
    "text": "So s is just really long. What is that going to tell us? It's going to tell us something\nimportant about the way",
    "start": "1167290",
    "end": "1177120"
  },
  {
    "text": "the grammar produces s, which\nis going to be useful in getting a way of pumping it.",
    "start": "1177120",
    "end": "1185240"
  },
  {
    "text": "So if s is really\nlong, we're going to look at the parse tree for s.",
    "start": "1185240",
    "end": "1190880"
  },
  {
    "text": "And we're going to conclude\nthat the parse tree has to be really tall, because\nit's impossible for a very",
    "start": "1190880",
    "end": "1198299"
  },
  {
    "text": "shallow parse tree to\ngenerate a very long string.",
    "start": "1198300",
    "end": "1203880"
  },
  {
    "text": "And again, we'll quantify\nthat in a second. But intuitively,\nI think that's not too hard to see why\nthat ought to be true.",
    "start": "1203880",
    "end": "1210429"
  },
  {
    "text": "So if you have a long\ns, the parse tree has to be really tall,\nbecause the parse tree can't",
    "start": "1210430",
    "end": "1216090"
  },
  {
    "text": "generate very many--\nit can't expand by very much at each level. So we'll look at how\nmuch it can expand.",
    "start": "1216090",
    "end": "1222270"
  },
  {
    "text": "But it depends on the\ngrammar, how much expansion have at each level. And it's going to be-- you\ncan't have just in three levels",
    "start": "1222270",
    "end": "1230250"
  },
  {
    "text": "some small grammar generating\na string of length 1 million. You'll see that that's\njust impossible.",
    "start": "1230250",
    "end": "1237480"
  },
  {
    "text": "So once you know that the\nparse tree is really tall here,",
    "start": "1237480",
    "end": "1243710"
  },
  {
    "text": "then you're actually\nalmost done, because what does it mean to be really tall?",
    "start": "1243710",
    "end": "1249200"
  },
  {
    "text": "It means that there is some path\nstarting at the start variable E, I'm calling it in this\nparse tree, which goes down",
    "start": "1249200",
    "end": "1257240"
  },
  {
    "text": "to some terminal symbol in s,\nwhich goes through many steps.",
    "start": "1257240",
    "end": "1264500"
  },
  {
    "text": "That's what it means for\nthe tree to be very tall. And each one of those\nsteps is a variable",
    "start": "1264500",
    "end": "1269929"
  },
  {
    "text": "until you get down\nto the very end. OK, so that's the\nway parse trees look.",
    "start": "1269930",
    "end": "1275850"
  },
  {
    "text": "You keep expanding variables\nuntil you get to a terminal. So here, you get some path\nthat's really a long path.",
    "start": "1275850",
    "end": "1285130"
  },
  {
    "text": "And once you have\na long path that has many, many variables\nappearing on here,",
    "start": "1285130",
    "end": "1290270"
  },
  {
    "text": "well, the grammar itself\nhas only some fixed number of variables in\nit, so you're going to have to have a repetition\ncoming among the variables that",
    "start": "1290270",
    "end": "1299800"
  },
  {
    "text": "occur on that long path.  Got that?",
    "start": "1299800",
    "end": "1305780"
  },
  {
    "text": "So a long string forces\na tall parse tree, forces a repetition on\nsome path coming out",
    "start": "1305780",
    "end": "1313610"
  },
  {
    "text": "of the start variable of some\nother variable that comes out.",
    "start": "1313610",
    "end": "1320120"
  },
  {
    "text": "Now that's going to\ntell us how to cut up s, because if you look\nat the subtrees of s",
    "start": "1320120",
    "end": "1326570"
  },
  {
    "text": "that those two R variables are\ngenerating, shown like this,",
    "start": "1326570",
    "end": "1333429"
  },
  {
    "text": "I'm going to use that-- so you have to follow\nwhat I'm saying here. So R here is generating\nthis portion of s.",
    "start": "1333430",
    "end": "1341170"
  },
  {
    "text": "And the lower R is generating\na smaller portion of s, just looking at the\nsubtree that you get here.",
    "start": "1341170",
    "end": "1347980"
  },
  {
    "text": "And that's going to tell us that\nwe can cut up s accordingly.",
    "start": "1347980",
    "end": "1354260"
  },
  {
    "text": "So u was that very first\npart out here generated by E, but not by the\nfirst R. R is generated--",
    "start": "1354260",
    "end": "1361670"
  },
  {
    "text": "v is generated by the first\nR, but not by the second R. The second R\ngenerates exactly x.",
    "start": "1361670",
    "end": "1367310"
  },
  {
    "text": "And then we have y\nand z, similarly. So that all follows from\nhaving a tall parse tree.",
    "start": "1367310",
    "end": "1377200"
  },
  {
    "text": "And now we're finished. Now we know how to cut up s. How do we know we\ncan repeat v and y",
    "start": "1377200",
    "end": "1384880"
  },
  {
    "text": "and still be in the language? Well, I'll actually show you\nthat you're in the language by exhibiting a parse tree\nfor the string uvvxyyz.",
    "start": "1384880",
    "end": "1391795"
  },
  {
    "text": " Here it is. ",
    "start": "1391795",
    "end": "1397840"
  },
  {
    "text": "I'm going to get that parse tree\nby, when I expand this lower R,",
    "start": "1397840",
    "end": "1402850"
  },
  {
    "text": "instead of expanding\nit to get x, I'm going to follow the same\nsubstitutions that I had when",
    "start": "1402850",
    "end": "1408700"
  },
  {
    "text": "I expanded the upper R. So\nit's as if I took this larger subtree here and I substituted\nit in for the smaller subtree",
    "start": "1408700",
    "end": "1418900"
  },
  {
    "text": "under the second R. And so I get\na picture that looks like this. ",
    "start": "1418900",
    "end": "1425480"
  },
  {
    "text": "So here I'm substituting under\nthe second R the same subtree that I had originally coming\nout of the upper R, the first R.",
    "start": "1425480",
    "end": "1434289"
  },
  {
    "text": "And so now this parse tree is\ngenerating the string uvvxyyz,",
    "start": "1434290",
    "end": "1439770"
  },
  {
    "text": "which is what I'm looking for. And of course, you can\ndo that again and again. And you're going to keep getting\nhigher and higher exponents",
    "start": "1439770",
    "end": "1446380"
  },
  {
    "text": "of v and y. And in fact, you can\neven get the 0 exponent,",
    "start": "1446380",
    "end": "1451910"
  },
  {
    "text": "which means that v and y\nboth disappear altogether. And for that, you do\nsomething slightly different,",
    "start": "1451910",
    "end": "1458060"
  },
  {
    "text": "which is that you replace the\nlarger subtree by the smaller subtree. ",
    "start": "1458060",
    "end": "1465399"
  },
  {
    "text": "OK so here, which was originally\nthat larger tree generating vxy, I stick instead\nthe smaller subtree.",
    "start": "1465400",
    "end": "1472580"
  },
  {
    "text": "I do the substitutions\nfrom the smaller subtree. And I just get x there. And so now the\nstring I generated",
    "start": "1472580",
    "end": "1478570"
  },
  {
    "text": "is uxz, which is the same as\nuv to the 0 xy to the 0 z.",
    "start": "1478570",
    "end": "1484740"
  },
  {
    "text": "And that is the\nidea of the proof. Now, I think you could work out\nthe quantities that you need",
    "start": "1484740",
    "end": "1495930"
  },
  {
    "text": "in order to drive this proof. I'm going to do that for you. I actually hate writing\ndown lots of inequalities,",
    "start": "1495930",
    "end": "1503610"
  },
  {
    "text": "and equations, and\nso on, on the board, because I think\nthey're just almost incomprehensible to follow.",
    "start": "1503610",
    "end": "1509505"
  },
  {
    "text": "Or at least they\nwould be for me. But I'm going to put\nthem up there just for completeness sake.",
    "start": "1509505",
    "end": "1515082"
  },
  {
    "text": "So here we're going to give\nthe details of this proof on the next slide here. Oh yeah, so I just want\nto give a name to this.",
    "start": "1515082",
    "end": "1521550"
  },
  {
    "text": "I'm going to call this the\ncutting and pasting argument, because I'm cutting apart\npieces of this parse tree",
    "start": "1521550",
    "end": "1527850"
  },
  {
    "text": "and I'm pasting them in to other\nplaces within the parse tree to get new strings\nbeing generated.",
    "start": "1527850",
    "end": "1534570"
  },
  {
    "text": "So this is a cutting\nand pasting argument. So OK, let's take a look\nat the details here, just,",
    "start": "1534570",
    "end": "1540732"
  },
  {
    "text": "well, we have to\nunderstand, well, how big does p actually need\nto be in order for this thing",
    "start": "1540733",
    "end": "1546110"
  },
  {
    "text": "to kick in?  Well, first of all,\nwe have to understand",
    "start": "1546110",
    "end": "1552080"
  },
  {
    "text": "how fast that parse\ntree can be growing as we go level to level. And that's going to be dependent\non how big the right-hand sides",
    "start": "1552080",
    "end": "1561860"
  },
  {
    "text": "of rules are. I mean, that really\ntells you how many-- what's the fan out\nyou know of each node?",
    "start": "1561860",
    "end": "1569540"
  },
  {
    "text": "What's the maximum fan out? And that's going to\nbe the maximum length of a right-hand\nside of any rule.",
    "start": "1569540",
    "end": "1577280"
  },
  {
    "text": "So for example, in\nthat other grammar we had seen last time for\narithmetic expressions,",
    "start": "1577280",
    "end": "1582890"
  },
  {
    "text": "we had this E goes to E\nplus T, this rule here. And in terms of the\nparse tree, that",
    "start": "1582890",
    "end": "1588620"
  },
  {
    "text": "would look like a little\nelement like that. And that's actually the\nlongest right-hand side",
    "start": "1588620",
    "end": "1595520"
  },
  {
    "text": "that you can get. And so the parse tree can\nbe growing by a factor of 3 each time.",
    "start": "1595520",
    "end": "1601470"
  },
  {
    "text": "Now, that's going to tell\nus how big the string needs to be that's being generated,\nwhat is the value of p",
    "start": "1601470",
    "end": "1609440"
  },
  {
    "text": "in order to get a high enough\nparse tree so that you're going to get a repeated variable. ",
    "start": "1609440",
    "end": "1617440"
  },
  {
    "text": "Let's call the height of\nthe parse tree for S h. So now if you-- this is just\nrepeating what I just said.",
    "start": "1617440",
    "end": "1624549"
  },
  {
    "text": "If you have a tree of height\nh and the maximum branching is b, then you get, at\nmost, b to the h leaves,",
    "start": "1624550",
    "end": "1630190"
  },
  {
    "text": "because each level, you get\nanother factor of b coming up, because that's how much\nbranching you have.",
    "start": "1630190",
    "end": "1637630"
  },
  {
    "text": "So each node at one\nlevel can become b nodes at the next level down. So you're multiplying\nby b each time.",
    "start": "1637630",
    "end": "1643277"
  },
  {
    "text": "And if you have h\nlevels, you're going to have b to the h leaves.",
    "start": "1643277",
    "end": "1648290"
  },
  {
    "text": "So the length of s, which\nare really the leaves here, is at most b to the h. The reason why it's at\nmost and not exactly",
    "start": "1648290",
    "end": "1654890"
  },
  {
    "text": "is you might be doing\nsome substitutions which are shorter right-hand sides.",
    "start": "1654890",
    "end": "1660380"
  },
  {
    "text": "OK, so to try to show\nthis as a picture here, pulling that same\npicture we had before,",
    "start": "1660380",
    "end": "1666289"
  },
  {
    "text": "we want h, the\nheight, to be bigger than the number of variables\nto force a repetition.",
    "start": "1666290",
    "end": "1676100"
  },
  {
    "text": "So the number of variables is\ngoing to be written this way. V is the variables.",
    "start": "1676100",
    "end": "1681440"
  },
  {
    "text": "V with bars around it is going\nto be the number of variables. And we want that\nheight to be greater than the number of variables.",
    "start": "1681440",
    "end": "1687810"
  },
  {
    "text": "So once you know how high you\nwant that tree to be in order to force a repetition, then it\ntells you how big s has to be.",
    "start": "1687810",
    "end": "1695210"
  },
  {
    "text": "So V has to be bigger than b\nto the V, b to the size of V,",
    "start": "1695210",
    "end": "1702559"
  },
  {
    "text": "because then the height\nthat you're going to get is going to be greater\nthan the size of V, which",
    "start": "1702560",
    "end": "1713059"
  },
  {
    "text": "is-- so that's what you want. You want h to be greater\nthan the size of V. So you're going to set p to\nbe one more than b to the V.",
    "start": "1713060",
    "end": "1721179"
  },
  {
    "text": "And so if s is at\nleast that length, this whole thing is\ngoing to kick in. And you're going to get\nthat repeated variable.",
    "start": "1721180",
    "end": "1728460"
  },
  {
    "text": "So we'll let p to\nbe that value where V is the number of\nvariables in the grammar. And so if s is at least p, which\nis greater than b to the V,",
    "start": "1728460",
    "end": "1739653"
  },
  {
    "text": "then the length of s is going\nto be greater than b to the V.",
    "start": "1739654",
    "end": "1744710"
  },
  {
    "text": "So h is going to be what you\nwant to make this thing work.",
    "start": "1744710",
    "end": "1749809"
  },
  {
    "text": "If you don't follow\nthat, those inequalities, I sympathize with you. I would never follow\nthat either in a lecture.",
    "start": "1749810",
    "end": "1755450"
  },
  {
    "text": "So but I hope you get the idea. But we're not\nquite finished yet,",
    "start": "1755450",
    "end": "1761690"
  },
  {
    "text": "because I want to now circle\nback, and look at these three conditions, and make sure\nthat we've captured them all,",
    "start": "1761690",
    "end": "1769520"
  },
  {
    "text": "because actually, it's not\ntotally obvious in each",
    "start": "1769520",
    "end": "1774950"
  },
  {
    "text": "of those cases that\nwe've got them. So there is a few extra\nthings we need to do.",
    "start": "1774950",
    "end": "1781460"
  },
  {
    "text": "OK, so this is\nconcluding the argument. There are going to be at least V\nplus 1 variables in the longest path.",
    "start": "1781460",
    "end": "1786590"
  },
  {
    "text": "So there is going\nto be a repetition. So now let's go back\nhere and see, now that we have this picture\nwith a repeated variable,",
    "start": "1786590",
    "end": "1796280"
  },
  {
    "text": "how do we know we can\nget condition one? Well, that's just the\ncutting and pasting argument from the previous slide.",
    "start": "1796280",
    "end": "1801970"
  },
  {
    "text": " How do we know that v\nand y are not both empty?",
    "start": "1801970",
    "end": "1808830"
  },
  {
    "text": "Well actually, that's\nnot totally obvious, because it's possible that,\nwhen you generated v here",
    "start": "1808830",
    "end": "1816210"
  },
  {
    "text": "and you generated y, maybe\ngoing from this R to that R, you got nothing new.",
    "start": "1816210",
    "end": "1823930"
  },
  {
    "text": "You know, it could have been\nthat R got replaced by T, another variable with\nnothing new coming out,",
    "start": "1823930",
    "end": "1829350"
  },
  {
    "text": "and then T got replaced by R. You substituted T for\nR and then R for T.",
    "start": "1829350",
    "end": "1835187"
  },
  {
    "text": "And you've got nothing\nnew coming out. And in that case, v and y\nwould both be the empty string.",
    "start": "1835187",
    "end": "1840420"
  },
  {
    "text": "And that would\nviolate what we want. The way you get around-- that\nand these are details here.",
    "start": "1840420",
    "end": "1847413"
  },
  {
    "text": "If you're not totally following\nthese points, don't worry. ",
    "start": "1847413",
    "end": "1852470"
  },
  {
    "text": "They're easy to describe. So I figure, let me present\nthe whole thing in full detail. ",
    "start": "1852470",
    "end": "1859720"
  },
  {
    "text": "So if going from this R to that\nR doesn't generate anything new, you're getting exactly\nthe same things coming out--",
    "start": "1859720",
    "end": "1866470"
  },
  {
    "text": "v and y are just\nthe empty string-- how do we avoid\nthat from happening?",
    "start": "1866470",
    "end": "1872950"
  },
  {
    "text": "There is a simple way to\naddress that, which is to say,",
    "start": "1872950",
    "end": "1878450"
  },
  {
    "text": "if you have this string s,\nwhen you take a parse tree,",
    "start": "1878450",
    "end": "1883720"
  },
  {
    "text": "make sure you take a\nsmall-as-possible parse tree. You're not allowed to start off\nwith an inefficient parse tree",
    "start": "1883720",
    "end": "1891549"
  },
  {
    "text": "that can be shortened\nand still generate s. I want the smallest\npossible parse tree.",
    "start": "1891550",
    "end": "1896590"
  },
  {
    "text": "And that smallest\npossible parse tree can't have an R going\nto another R which",
    "start": "1896590",
    "end": "1901720"
  },
  {
    "text": "is generating nothing new,\nbecause then you could always have eliminated that step. And you would still\nhave a parse tree for s,",
    "start": "1901720",
    "end": "1907870"
  },
  {
    "text": "but it would be a\nsmaller parse tree. So that would be-- I want you to start off with the\nsmallest possible parse tree.",
    "start": "1907870",
    "end": "1914170"
  },
  {
    "text": "And then you're going to be\nguaranteed that v or y is going to be something not empty.",
    "start": "1914170",
    "end": "1920170"
  },
  {
    "text": "So that takes care\nof condition two.",
    "start": "1920170",
    "end": "1925770"
  },
  {
    "text": "Condition three-- you know, how\ndo we know that vxy together",
    "start": "1925770",
    "end": "1933300"
  },
  {
    "text": "is not very long? And basically, it's the same\nargument all over again.",
    "start": "1933300",
    "end": "1938490"
  },
  {
    "text": "You just want to make\nsure that, when you're picking the repetition\nR, the two R's here, you pick the lowest possible\nrepetitions that occur,",
    "start": "1938490",
    "end": "1946080"
  },
  {
    "text": "if you have many choices. And those lowest two,\nthose lowest repetitions, there is not going to be\nany lower repetition here.",
    "start": "1946080",
    "end": "1953080"
  },
  {
    "text": "And then by the same\nargument, since once you",
    "start": "1953080",
    "end": "1958390"
  },
  {
    "text": "have that very first R, there\nis no more repetitions occurring below, the vxy\ncan't be very long,",
    "start": "1958390",
    "end": "1966190"
  },
  {
    "text": "because that would, again, force\nanother repetition to occur.",
    "start": "1966190",
    "end": "1971889"
  },
  {
    "text": "So anyway, those are\nthe three conditions. And that's the proof\nof the pumping lemma for h free languages.",
    "start": "1971890",
    "end": "1977760"
  },
  {
    "text": "Let's see how we use that. OK, so let's do an example\nof proving a language",
    "start": "1977760",
    "end": "1983190"
  },
  {
    "text": "not context free using\nthe pumping lemma. How are you going to\ngo about doing that? Because that's the kind of\nthing, at the very least,",
    "start": "1983190",
    "end": "1990710"
  },
  {
    "text": "you need to know how to do this\nin order to do the homework.  I'd like to motivate\nyou that the stuff is",
    "start": "1990710",
    "end": "1997440"
  },
  {
    "text": "so interesting and fun, but\nit doesn't work for everybody. So for you practical people\nout there, pay attention",
    "start": "1997440",
    "end": "2005990"
  },
  {
    "text": "so you can do the homework. OK, let's go back\nto that language we had a couple of slides\nback, 0 to the k, 1 to the k,",
    "start": "2005990",
    "end": "2013110"
  },
  {
    "text": "2 to the k. It's not a\ncontext-free language. We're going to show that\nnow using the pumping lemma",
    "start": "2013110",
    "end": "2018210"
  },
  {
    "text": "for context-free languages. So it's going to do,\nsimilar to the proofs using",
    "start": "2018210",
    "end": "2026159"
  },
  {
    "text": "for non-regular languages,\nproof by contradiction.",
    "start": "2026160",
    "end": "2031990"
  },
  {
    "text": "So you, first you assume the\nlanguage is context-free. And then we're going to\napply the pumping lemma.",
    "start": "2031990",
    "end": "2038760"
  },
  {
    "text": "And then we're going\nto get a contradiction. So the pumping lemma\ngives that pumping length,",
    "start": "2038760",
    "end": "2044580"
  },
  {
    "text": "as we described above. And now we just want to pick a\nlonger string in the language and show that that\nlonger string, which",
    "start": "2044580",
    "end": "2052770"
  },
  {
    "text": "is supposed to be pumpable and\nstay in the language, in fact is not pumpable. ",
    "start": "2052770",
    "end": "2059600"
  },
  {
    "text": "So the pumping\nlemma says that you can divide it into five\npieces satisfying the three conditions.",
    "start": "2059600",
    "end": "2065060"
  },
  {
    "text": "Condition three implies that-- so now I'm going to I'm\ngoing to work through.",
    "start": "2065060",
    "end": "2070070"
  },
  {
    "text": "I'm going to show you\nget a contradiction. So condition three implies\nthat you cannot contain both",
    "start": "2070070",
    "end": "2077270"
  },
  {
    "text": "0's and-- let's pull up a picture here. So here is s, 0's, 1's, and then\n2's, all of the same length.",
    "start": "2077270",
    "end": "2085099"
  },
  {
    "text": "Condition three-- so\nif you break it up,",
    "start": "2085100",
    "end": "2091138"
  },
  {
    "text": "condition three says, vxy\ntogether cannot be too long. Well, if vxy together\nis not too long,",
    "start": "2091139",
    "end": "2098670"
  },
  {
    "text": "how could it be that, when\nyou're repeating v and y, you stay in the language?",
    "start": "2098670",
    "end": "2105380"
  },
  {
    "text": "For one thing, you can't\nhave 0's, 1's, and 2's all occurring within v, x, and y.",
    "start": "2105380",
    "end": "2112099"
  },
  {
    "text": " Some symbol is going\nto get left out.",
    "start": "2112100",
    "end": "2118430"
  },
  {
    "text": "So then when you\npump up, you're going to have unequal\nnumbers of symbols. And so you're going to\nbe out of the language.",
    "start": "2118430",
    "end": "2124055"
  },
  {
    "text": " OK, so no matter how\nyou try to cut it up",
    "start": "2124055",
    "end": "2130570"
  },
  {
    "text": "following condition three,\nwhich is one of the things that restricts the ways\nto cut it up, you're",
    "start": "2130570",
    "end": "2136990"
  },
  {
    "text": "going to end up, when you pump\nup, going out of the language. And so therefore, it's not in--",
    "start": "2136990",
    "end": "2145690"
  },
  {
    "text": "D? D is wrong. B, should say \"B.\" ",
    "start": "2145690",
    "end": "2156610"
  },
  {
    "text": "I'm supposed to be able\nto write on this thing. I guess not. I didn't test that.",
    "start": "2156610",
    "end": "2162350"
  },
  {
    "text": "Oh well, that's\nsupposed to be a B.",
    "start": "2162350",
    "end": "2168320"
  },
  {
    "text": "So B is a context-free\nlanguage, which includes-- so that's the assumption, that\nB is a context-free language.",
    "start": "2168320",
    "end": "2173390"
  },
  {
    "text": "That's false. And we conclude that it's\nnot a context-free language. Let's do-- oh yeah, I\nhave a check in here.",
    "start": "2173390",
    "end": "2182910"
  },
  {
    "text": "So let's see what I'm going\nto ask you to think about.",
    "start": "2182910",
    "end": "2188539"
  },
  {
    "text": " OK, my head is blocking\npart of the text?",
    "start": "2188540",
    "end": "2197557"
  },
  {
    "text": "Oh, that was a while ago. ",
    "start": "2197558",
    "end": "2203580"
  },
  {
    "text": "Yes, so just one\nquestion by the way, in terms of applying the\npumping lemma-- either v or y",
    "start": "2203580",
    "end": "2210990"
  },
  {
    "text": "can be empty, but not both. But anyway, let's get\nto this check in here. ",
    "start": "2210990",
    "end": "2218450"
  },
  {
    "text": "So let's look at these\ntwo languages, A1 and A2, which look very similar to\nB, but a little different.",
    "start": "2218450",
    "end": "2225410"
  },
  {
    "text": "So it's A1 is 0 to\nthe k, 1 to the k, 2 to the l, where k and\nl could be any numbers,",
    "start": "2225410",
    "end": "2233120"
  },
  {
    "text": "any positive,\nnon-negative numbers. So basically what\nthis is saying is",
    "start": "2233120",
    "end": "2238820"
  },
  {
    "text": "that the number of 0's and\n1's are going to be equal, but the number of 2's can be\nanything, whereas A2, similar,",
    "start": "2238820",
    "end": "2246830"
  },
  {
    "text": "but here, we're\nrequiring the number of 1's and 2's to be equal.",
    "start": "2246830",
    "end": "2251877"
  },
  {
    "text": "And the number of\n0's can be anything.  Now, you can easily\nmake, I hope--",
    "start": "2251877",
    "end": "2260050"
  },
  {
    "text": "you should make sure you can-- pushdown automata that\ncan recognize A1 and A2,",
    "start": "2260050",
    "end": "2267310"
  },
  {
    "text": "because let's just take A1. The pushdown automaton can push\nthe 0's as it's reading them,",
    "start": "2267310",
    "end": "2275520"
  },
  {
    "text": "pop them as it's reading\nthe 1's to match them off and make sure that they're\nthe same number of them.",
    "start": "2275520",
    "end": "2280619"
  },
  {
    "text": "And then the 2's, it doesn't\ncare how many there are. It just has to make sure\nthat there are no strings,",
    "start": "2280620",
    "end": "2286230"
  },
  {
    "text": "there are no letters\ncoming out of order. But any number of 2's is fine. So you can easily make a\npushdown automaton recognizing",
    "start": "2286230",
    "end": "2292140"
  },
  {
    "text": "A1, similarly for A2. So what can we\nconclude from that?",
    "start": "2292140",
    "end": "2299725"
  },
  {
    "text": "Here are the three\npossibilities. Let me-- so look at that, the\nclass of context-free languages is not closed\nunder intersection.",
    "start": "2299725",
    "end": "2306700"
  },
  {
    "text": "You can read it. So I want to pull up the\npoll and launch that.",
    "start": "2306700",
    "end": "2313720"
  },
  {
    "text": " Please fill that out.",
    "start": "2313720",
    "end": "2319290"
  },
  {
    "text": " 10 seconds. ",
    "start": "2319290",
    "end": "2326890"
  },
  {
    "text": "Again, just, if you\ndon't know the answer, just give any answers so that--",
    "start": "2326890",
    "end": "2331895"
  },
  {
    "text": "because we're not\ncounting correctness.  There is still a\nfew dribbling in.",
    "start": "2331895",
    "end": "2338869"
  },
  {
    "text": "OK, five seconds.",
    "start": "2338870",
    "end": "2344720"
  },
  {
    "text": "OK, end polling. Most of you got that right. ",
    "start": "2344720",
    "end": "2350468"
  },
  {
    "text": "I don't know. Is it OK to share these things? I don't want to make people who\ndidn't get the right feel bad.",
    "start": "2350468",
    "end": "2355660"
  },
  {
    "text": "You know, but you\nshould understand, I think if you're\nmissing something, you should understand\nwhat you're missing.",
    "start": "2355660",
    "end": "2361540"
  },
  {
    "text": "The pumping lemma shows\nthat A1 union A2 is not a context-free language? No. As I mentioned at the beginning,\nthe context-free languages",
    "start": "2361540",
    "end": "2369520"
  },
  {
    "text": "are closed under union. So the pumping lemma had\nbetter not show that these--",
    "start": "2369520",
    "end": "2374842"
  },
  {
    "text": "we already know that\nthese two languages are context free, because we get\nthem from pushdown automaton.",
    "start": "2374843",
    "end": "2380080"
  },
  {
    "text": "And we said at the beginning\nthat context-free language is closed under union. So we know that these\ntwo are context free.",
    "start": "2380080",
    "end": "2385660"
  },
  {
    "text": "So the pumping lemma\nbetter not show that they're not context free. Something would be terribly--\nhave gone terribly wrong",
    "start": "2385660",
    "end": "2392410"
  },
  {
    "text": "if that were true. And also we know also from a\nlittle bit of further reasoning",
    "start": "2392410",
    "end": "2399910"
  },
  {
    "text": "that the context-free\nlanguages is not closed under complement by\nwhat we've already discussed,",
    "start": "2399910",
    "end": "2406420"
  },
  {
    "text": "because they are\nclosed under union. And as I pointed out, they're\nnot closed under intersection.",
    "start": "2406420",
    "end": "2412330"
  },
  {
    "text": "And so if they were\nclosed under complement, De Morgan's Laws\nwould say that closure under union and closure\nunder complement",
    "start": "2412330",
    "end": "2419050"
  },
  {
    "text": "would give you closure\nunder intersection. But we don't have closure\nunder intersection. So in fact, they're not\nclosed under complement.",
    "start": "2419050",
    "end": "2427599"
  },
  {
    "text": "OK, so in fact,\nthis does show us that the class of\ncontext-free language is not closed\nunder intersection,",
    "start": "2427600",
    "end": "2433329"
  },
  {
    "text": "because the intersection\nof A1 and A2, two context-free languages, is\nB. And B is not context free.",
    "start": "2433330",
    "end": "2441619"
  },
  {
    "text": "So it shows that this is-- the closure under\nintersection does not hold.",
    "start": "2441620",
    "end": "2449810"
  },
  {
    "text": "So let us continue, then. We have one more example.",
    "start": "2449810",
    "end": "2455690"
  },
  {
    "text": "Then we'll take a break. So the pumping lemma for\ncontext-free languages,",
    "start": "2455690",
    "end": "2460880"
  },
  {
    "text": "again, here is the\nsecond example. Here is the language F. We\nhave actually seen this before.",
    "start": "2460880",
    "end": "2467359"
  },
  {
    "text": "ww, two copies of a string,\ntwo copies of any string--",
    "start": "2467360",
    "end": "2476077"
  },
  {
    "text": "and we're going to show that's\nnot a context-free language. ",
    "start": "2476077",
    "end": "2482200"
  },
  {
    "text": "Assume that it is context\nfree, the pumping lemma gives pumping length. Now, here you have to do\na little bit more work.",
    "start": "2482200",
    "end": "2488380"
  },
  {
    "text": "Often, the challenge in\napplying the pumping lemma in either case that\nwe've seen involves",
    "start": "2488380",
    "end": "2496690"
  },
  {
    "text": "choosing that string\nthat you need to pump, that you're going to pump. So you have to choose\ns in F, which is longer",
    "start": "2496690",
    "end": "2503410"
  },
  {
    "text": "than p, which s to go with. So you might try this\none, first glance. Here is a string\nthat's in the language,",
    "start": "2503410",
    "end": "2509770"
  },
  {
    "text": "because it's two copies of\nthe string 0 to the p1 0 to-- and then 0 to the p1.",
    "start": "2509770",
    "end": "2515140"
  },
  {
    "text": "So that's in the language,\nbut it's a bad choice. ",
    "start": "2515140",
    "end": "2520530"
  },
  {
    "text": "Before I get ahead\nof myself, let's draw a picture of s, which I\nthink is always helpful to see.",
    "start": "2520530",
    "end": "2526060"
  },
  {
    "text": "So here is runs of 0's and then\na 1, runs of 0's and then a 1. Why is this a bad choice?",
    "start": "2526060",
    "end": "2532200"
  },
  {
    "text": "Because you can pump that string\nand you remain in the language. There is a way to\ncut that string up",
    "start": "2532200",
    "end": "2539807"
  },
  {
    "text": "and you'll stay in the language. And the way to cut\nit up is to let the x be just that substring\nwhich is just the 1.",
    "start": "2539807",
    "end": "2548070"
  },
  {
    "text": "And the v and y can be a\ncouple of 0's or a single 0 on either side of that 1.",
    "start": "2548070",
    "end": "2554280"
  },
  {
    "text": "And now that's going\nto be a small vxy. But if you repeat\nv and y, you're",
    "start": "2554280",
    "end": "2561990"
  },
  {
    "text": "going to stay in the\nlanguage, because you'll just",
    "start": "2561990",
    "end": "2570800"
  },
  {
    "text": "be adding 0's here. You'll be adding same\nnumber of 0's there. And then you're going\nto have a string which",
    "start": "2570800",
    "end": "2577280"
  },
  {
    "text": "still looks like ww. And you'll still\nbe in the language. So that means that cutting\nit up doesn't get you out",
    "start": "2577280",
    "end": "2583700"
  },
  {
    "text": "of the language under pumping. And the fact is that\nthat's a bad choice for s,",
    "start": "2583700",
    "end": "2589948"
  },
  {
    "text": "because there is that\nway of cutting it up. So you have to show\nthere's no way-- you don't get to pick\nthe way to cut it up.",
    "start": "2589948",
    "end": "2596960"
  },
  {
    "text": "You have to show that there is\nno way to cut it up in order to violate the pumping lemma.",
    "start": "2596960",
    "end": "2605640"
  },
  {
    "text": "So if instead you use the\nstring 0 to the p, 1 to the p, 0 to the p, 1 to the p-- so this\nis 0's followed by 1's followed",
    "start": "2605640",
    "end": "2613100"
  },
  {
    "text": "by 0's followed by 1's, all\nthe same number of them-- that can't be pumped satisfying\nthe three conditions.",
    "start": "2613100",
    "end": "2620839"
  },
  {
    "text": "And just going through that-- ",
    "start": "2620840",
    "end": "2626160"
  },
  {
    "text": "now if you try to break it\nup, you're going to lose. Or the lemma is going to lose. You're going to be\nhappy, but the lemma",
    "start": "2626160",
    "end": "2632730"
  },
  {
    "text": "is not going to be happy,\nbecause it's not going-- it's going to violate the condition.",
    "start": "2632730",
    "end": "2638400"
  },
  {
    "text": "Condition three\nsays vxy is not-- doesn't span too\nmuch, and in fact,",
    "start": "2638400",
    "end": "2645390"
  },
  {
    "text": "can't span two runs of\n0's or two runs of 1's.",
    "start": "2645390",
    "end": "2651359"
  },
  {
    "text": "It's just not big\nenough, because they're more than p things--\nthey're p things apart. And this one string, this\nstring vxy is only p long.",
    "start": "2651360",
    "end": "2660420"
  },
  {
    "text": "And so therefore, if\nyou repeat v and y,",
    "start": "2660420",
    "end": "2665619"
  },
  {
    "text": "you're going to have two\nruns of 0's or two 1's that have unequal length. And now that's not\ngoing to be the form ww.",
    "start": "2665620",
    "end": "2672160"
  },
  {
    "text": "You're going to be\nout of the language. So I hope that's--",
    "start": "2672160",
    "end": "2678300"
  },
  {
    "text": "you've got a little\npractice with that. I think we're at our break. And I will see you back\nhere in five minutes,",
    "start": "2678300",
    "end": "2688420"
  },
  {
    "text": "if I can get my\ntimer launched here.",
    "start": "2688420",
    "end": "2693630"
  },
  {
    "text": "OK, so see you soon.  This is a good time, by the\nway, to message me or the TAs.",
    "start": "2693630",
    "end": "2703730"
  },
  {
    "text": "And I'll try to be looking\nfor if you have any questions.",
    "start": "2703730",
    "end": "2708770"
  },
  {
    "text": "In the pumping lemma, can x-- yeah, x can be epsilon\nin the pumping lemma.",
    "start": "2708770",
    "end": "2715190"
  },
  {
    "text": "x can be epsilon. y can be epsilon, but x and\ny cannot both be epsilon,",
    "start": "2715190",
    "end": "2722420"
  },
  {
    "text": "because then, when you pump,\nyou'll get nothing new. Technically, v and y can\ninclude both 0's and 1's.",
    "start": "2722420",
    "end": "2730320"
  },
  {
    "text": "Yeah, v and y can\ninclude both 0's and 1's. ",
    "start": "2730320",
    "end": "2738550"
  },
  {
    "text": "So let me try to put that\nback, if that's will--",
    "start": "2738550",
    "end": "2746075"
  },
  {
    "text": " so v and y can have both 0's\nand 1's, but they can't have",
    "start": "2746075",
    "end": "2755940"
  },
  {
    "text": "0's from two different blocks. ",
    "start": "2755940",
    "end": "2761180"
  },
  {
    "text": "And you can't have 1's\nfrom two different blocks. So what's going to\nhappen is either you're going to get things out\nof order when you repeat--",
    "start": "2761180",
    "end": "2768050"
  },
  {
    "text": "like, a v has both\n0's and 1's in it. When you repeat v,\nyou're going to have",
    "start": "2768050",
    "end": "2774320"
  },
  {
    "text": "0's and 1's, and 0's and\n1's, and 0's and 1's. That's clearly out of the\nlanguage, so that's no good.",
    "start": "2774320",
    "end": "2779990"
  },
  {
    "text": "Your only hope is to have v\nto be sticking only inside the 0's and y to be sticking\nonly inside 0's or only inside",
    "start": "2779990",
    "end": "2787220"
  },
  {
    "text": "1's. But now, if you repeat\nthat and just look at what you're\ngoing to get, you're going to have a string\nwhich is going to be--",
    "start": "2787220",
    "end": "2795050"
  },
  {
    "text": "if you try to cut\nthat string in half, it's not going to be\nof the right form. It's not going to be two\ncopies of the same string,",
    "start": "2795050",
    "end": "2801055"
  },
  {
    "text": "because it's going to have a\nrun of 0's followed by a longer",
    "start": "2801055",
    "end": "2806900"
  },
  {
    "text": "or shorter run of\n0's, or a run of 1's followed by another run\nof 1's of unequal length. So there is no way this\ncan be two strings, two",
    "start": "2806900",
    "end": "2816620"
  },
  {
    "text": "copies of the same\nstring, because that's what you required. F has to be two copies\nof the same string",
    "start": "2816620",
    "end": "2822290"
  },
  {
    "text": "to be in the language. OK, let me just see where--\nwe're running out of time here.",
    "start": "2822290",
    "end": "2828850"
  },
  {
    "text": "Let me just put my timer here.",
    "start": "2828850",
    "end": "2837400"
  },
  {
    "text": "We've only got 30 seconds. ",
    "start": "2837400",
    "end": "2845230"
  },
  {
    "text": "And I'm sorry I'm not getting to\nanswer all the questions here. OK, we are done with our break.",
    "start": "2845230",
    "end": "2857500"
  },
  {
    "text": "It's going to come back.  And now we're shifting\ngears in a major way,",
    "start": "2857500",
    "end": "2865490"
  },
  {
    "text": "because in a sense,\neverything we've done so far has been\nkind of a warm up.",
    "start": "2865490",
    "end": "2873080"
  },
  {
    "text": "These limited\ncomputational models really are kind of\nhelping us to set",
    "start": "2873080",
    "end": "2880940"
  },
  {
    "text": "our understanding of\nautomata and the definitions and the notation. And they're also going to be\nhelpful in providing examples",
    "start": "2880940",
    "end": "2888170"
  },
  {
    "text": "later on in the term. But really, in terms of\na model of computation, they don't cut it, because they\ncannot do very simple things",
    "start": "2888170",
    "end": "2897890"
  },
  {
    "text": "that we normally think of a\ncomputer as being able to do. So here we're introducing\nanother model of computation,",
    "start": "2897890",
    "end": "2904610"
  },
  {
    "text": "called the Turing machine. And that's really going to\nbe the model of what we're going to stick with for\nthe rest of the semester,",
    "start": "2904610",
    "end": "2909920"
  },
  {
    "text": "because that's going\nto be our model of a general-purpose\ncomputer, the way",
    "start": "2909920",
    "end": "2915412"
  },
  {
    "text": "you normally think about it.  So let's-- we'll spend a\nlittle time introducing it.",
    "start": "2915413",
    "end": "2921960"
  },
  {
    "text": "And then we we'll continue\nthat discussion next time.",
    "start": "2921960",
    "end": "2930099"
  },
  {
    "text": "So in terms of a\nschematic, actually, the Turing machine\nmodel is pretty simple. ",
    "start": "2930100",
    "end": "2941849"
  },
  {
    "text": "It's going to have states\nand all that stuff. So there is going to be a\nfinite control here, which",
    "start": "2941850",
    "end": "2947092"
  },
  {
    "text": "is going to include states\nand a transition function, as we'll describe in a minute. The point is that\nit's going to have",
    "start": "2947092",
    "end": "2953730"
  },
  {
    "text": "the input appearing on a tape. The key difference now\nis that the machine",
    "start": "2953730",
    "end": "2960510"
  },
  {
    "text": "is going to be able to change\nthe symbols on the tape. And so we think of the machine\nas being able to write as well",
    "start": "2960510",
    "end": "2967650"
  },
  {
    "text": "as read the tape. So that's really the key\nfeature of a Turing machine,",
    "start": "2967650",
    "end": "2976740"
  },
  {
    "text": "is the ability to\nwrite on the tape. Everything else, in a\nsense, follows from that, and a few other differences.",
    "start": "2976740",
    "end": "2983730"
  },
  {
    "text": "But so the fact that the\nhead can read and write so that we can use\nthe tape as storage",
    "start": "2983730",
    "end": "2992610"
  },
  {
    "text": "much as we use the\nstack of storage, but it's not limited in the\nway we can access it the way a",
    "start": "2992610",
    "end": "2998100"
  },
  {
    "text": "stack is-- so we kind of have\nvery flexible access of the information on the tape.",
    "start": "2998100",
    "end": "3005150"
  },
  {
    "text": "Now, being able to\nwrite on the tape doesn't do any good if\nyou can't go back and read",
    "start": "3005150",
    "end": "3010730"
  },
  {
    "text": "what you've written later on. So we're going to make the\nhead to be able to be two way. So the head can move\nleft to right as before,",
    "start": "3010730",
    "end": "3017510"
  },
  {
    "text": "but it can also move back left. And that's going to be under\ncontrol of the transition function, so under program\ncontrol, essentially.",
    "start": "3017510",
    "end": "3026180"
  },
  {
    "text": "The tape is going to be-- oops, sorry. The tape is infinite\nto the right.",
    "start": "3026180",
    "end": "3034210"
  },
  {
    "text": "And so we're not going to limit\nhow much storage the machine can have.",
    "start": "3034210",
    "end": "3039440"
  },
  {
    "text": "So the tape is going to-- we'll\nthink of as having, instead of just having the input on it,\nit's going to have the input.",
    "start": "3039440",
    "end": "3044599"
  },
  {
    "text": "But then the rest,\nit's going to have infinitely many blanks, blank\nsymbols following the input.",
    "start": "3044600",
    "end": "3050110"
  },
  {
    "text": "So the tape is infinite in\nthe right-hand direction.",
    "start": "3050110",
    "end": "3057410"
  },
  {
    "text": "And so there is\ninfinitely many blanks. I'm going to use that symbol for\nthe blank to follow the input.",
    "start": "3057410",
    "end": "3064180"
  },
  {
    "text": "You can accept or reject. Oh yeah, so that's another\nthing that's important. Normally, we think of--",
    "start": "3064180",
    "end": "3069940"
  },
  {
    "text": "in the previous machines, finite\nautomata, pushdown automata, when you got to the\nend of the input,",
    "start": "3069940",
    "end": "3075610"
  },
  {
    "text": "that's when the acceptance\nor rejection was decided. If you were going to accept\nit at the end of the input,",
    "start": "3075610",
    "end": "3080710"
  },
  {
    "text": "then you accepted. But you have to be\nin that location at the end of the input in\norder for that to take effect.",
    "start": "3080710",
    "end": "3087700"
  },
  {
    "text": "That doesn't make\nany sense anymore, because the machine\nmight go off beyond that,",
    "start": "3087700",
    "end": "3092740"
  },
  {
    "text": "and still be computing, and come\nback and read the tape later on. So it only really\nmakes sense to let",
    "start": "3092740",
    "end": "3098410"
  },
  {
    "text": "the machine accept or reject\nupon entering the accept",
    "start": "3098410",
    "end": "3104039"
  },
  {
    "text": "or reject state. So we're going to have\na special accept state and a special reject\nstate, which is also",
    "start": "3104040",
    "end": "3109680"
  },
  {
    "text": "a little different than before. And when the machine\nenters those states, then the machine--",
    "start": "3109680",
    "end": "3115109"
  },
  {
    "text": "then the action takes effect. The machine halts and then\naccepts or halts and then",
    "start": "3115110",
    "end": "3122010"
  },
  {
    "text": "rejects. So we'll make that absolutely\nclear in the formal definition in a second, but just\nto get the spirit of it.",
    "start": "3122010",
    "end": "3130000"
  },
  {
    "text": "So I'm going to give you an\nexample of the thing running. Sorry, me too-- again, my\nPowerPoint is having issues.",
    "start": "3130000",
    "end": "3137970"
  },
  {
    "text": " OK, so here is a Turing machine\nrecognizing that language b.",
    "start": "3137970",
    "end": "3146599"
  },
  {
    "text": "Actually, I switched\ngears on you. Instead of 0's, 1's, and 2's,\nI made them a's, b's, and c's, but the same idea.",
    "start": "3146600",
    "end": "3151744"
  },
  {
    "text": " So I'm going to show you how\nthe Turing machine operates.",
    "start": "3151745",
    "end": "3158630"
  },
  {
    "text": "And then we'll give\na formal definition. I hope that's on here. I think it is.",
    "start": "3158630",
    "end": "3165550"
  },
  {
    "text": "In a second, but let's-- this is an informal discussion\nof how the machine is going to operate to do this language,\na to the k, b to the k, c",
    "start": "3165550",
    "end": "3172130"
  },
  {
    "text": "to the k, using its ability\nto write on the tape as well as read and move\nits head in both directions.",
    "start": "3172130",
    "end": "3178050"
  },
  {
    "text": "OK, so let me just first\ndescribe in English how this machine operates.",
    "start": "3178050",
    "end": "3186880"
  },
  {
    "text": "And then we will\nsee it in action on this little picture\nI have over here.",
    "start": "3186880",
    "end": "3194460"
  },
  {
    "text": "So the way the machine\nis going to operate is the very first thing is the\nhead is going to start here. And the head is going to\nscan off to the right,",
    "start": "3194460",
    "end": "3202530"
  },
  {
    "text": "making sure that the symbols\nappear in the correct order. So it's seeing that there\nare a's and b's and then c's,",
    "start": "3202530",
    "end": "3209750"
  },
  {
    "text": "without checking the quantities,\njust that the order is correct. For that, you don't\nneed to write.",
    "start": "3209750",
    "end": "3215240"
  },
  {
    "text": "A finite automaton can check\nthat the input is of the form a star, b star, c star.",
    "start": "3215240",
    "end": "3220920"
  },
  {
    "text": "So writing is not necessary. The machine, if it detects\nsymbols out of order,",
    "start": "3220920",
    "end": "3228760"
  },
  {
    "text": "it immediately rejects by going\ninto a special reject state. Otherwise, it's going to return\nits head back to the left end.",
    "start": "3228760",
    "end": "3235710"
  },
  {
    "text": "And let me just show that here. So here is-- oh no.",
    "start": "3235710",
    "end": "3241470"
  },
  {
    "text": " Before I illustrate\nit over here, let's go through\nthe whole algorithm.",
    "start": "3241470",
    "end": "3248258"
  },
  {
    "text": "So the next thing that happens\nis you're going to scan right. And now you want\nto do the counting. So you're going to\nscan right again,",
    "start": "3248258",
    "end": "3254370"
  },
  {
    "text": "but this time,\nyou're going to make a bunch of passes over the\ninput, a bunch of scans.",
    "start": "3254370",
    "end": "3259710"
  },
  {
    "text": "And each time you\nmake a scan, you're going to cross off one\nsymbol of each type.",
    "start": "3259710",
    "end": "3265540"
  },
  {
    "text": "So you're going\nto cross off an a. You'll cross off a b. You'll cross off a\nc on a single scan.",
    "start": "3265540",
    "end": "3270930"
  },
  {
    "text": "And then you repeat that,\ncrossing off the next a, the next b, the next c. And you want to make\nsure that you've",
    "start": "3270930",
    "end": "3277680"
  },
  {
    "text": "crossed off all of the\nsymbols on the same run and not crossing off some\nsymbols before other symbols,",
    "start": "3277680",
    "end": "3283950"
  },
  {
    "text": "while other symbols will\nremain, because that would mean that the counts were not equal. If you cross them\noff and they're all",
    "start": "3283950",
    "end": "3290369"
  },
  {
    "text": "run out on the same\nscan, same pass, then we know that the numbers\nhad to start off being equal.",
    "start": "3290370",
    "end": "3297630"
  },
  {
    "text": "So I mean, this is a\nsort of baby stuff here, but I hope you get the idea. And we'll kind of\nillustrate it in a second.",
    "start": "3297630",
    "end": "3303545"
  },
  {
    "text": " If you have the last\none of each symbol-- so what I mean by\nthat is you just",
    "start": "3303545",
    "end": "3310530"
  },
  {
    "text": "crossed off the last a, the\nlast b, and the last c-- then that you originally\nhad an equal number.",
    "start": "3310530",
    "end": "3317523"
  },
  {
    "text": "And so you accept, because\nyou're crossing off one of each on each scan. So if you cross off, on the\nlast scan, each one of them",
    "start": "3317523",
    "end": "3325020"
  },
  {
    "text": "gets crossed off,\nthen you accept. But if it was the last of\nsome symbol but not of other",
    "start": "3325020",
    "end": "3332370"
  },
  {
    "text": "symbols, so you crossed off the\nlast a, but there were several b's remaining, then you started\noff with an unequal number",
    "start": "3332370",
    "end": "3340079"
  },
  {
    "text": "of a's, b's, and c's. Then you can reject. Or if all symbols still remain\nafter you have crossed them,",
    "start": "3340080",
    "end": "3348400"
  },
  {
    "text": "one on each off, then you\nhaven't done enough passes. And you're going to\nrepeat from stage three",
    "start": "3348400",
    "end": "3356040"
  },
  {
    "text": "and do that again another scan. OK, so here is a\nlittle animation",
    "start": "3356040",
    "end": "3362460"
  },
  {
    "text": "which shows this\nhappening on this diagram. So here is the very first stage\nwhere you're scanning across,",
    "start": "3362460",
    "end": "3368640"
  },
  {
    "text": "making sure things are\nin the right order. I didn't have to\nwrite on the tape. And now you're going to reset\nthe head back to the beginning.",
    "start": "3368640",
    "end": "3376451"
  },
  {
    "text": " This is, by the way, not\nthe most efficient procedure",
    "start": "3376451",
    "end": "3381860"
  },
  {
    "text": "for doing this. ",
    "start": "3381860",
    "end": "3389329"
  },
  {
    "text": "Now we're going to do\na scan crossing off a single a, a single\nb, and a single c.",
    "start": "3389330",
    "end": "3395000"
  },
  {
    "text": "So here, I'm going to show that\nhere, a single a, a single b, single c. And now as soon as you have\ncrossed out that last c,",
    "start": "3395000",
    "end": "3401869"
  },
  {
    "text": "we can return back\nto the beginning. So scan right across-- ",
    "start": "3401870",
    "end": "3409020"
  },
  {
    "text": "so if all symbols remain,\nso there are still symbols remaining\nof each type, we're going to return to\nthe left and repeat.",
    "start": "3409020",
    "end": "3414515"
  },
  {
    "text": " Now we're getting another\npass, single a, single b,",
    "start": "3414515",
    "end": "3421010"
  },
  {
    "text": "single c get crossed off. Have we crossed\nthem all off yet? No, there is-- of each type,\nthere still are remaining ones.",
    "start": "3421010",
    "end": "3429210"
  },
  {
    "text": "So again, we return\nback to the beginning. Now we have a last\npass, cross off the last a, the\nlast b, the last c.",
    "start": "3429210",
    "end": "3436190"
  },
  {
    "text": "The last one of each\ntype was crossed off. So now we know we can accept,\nbecause the original string",
    "start": "3436190",
    "end": "3442099"
  },
  {
    "text": "was in the language. OK, so that's to give you at\nleast some idea how the Turing",
    "start": "3442100",
    "end": "3448920"
  },
  {
    "text": "machine can operate,\nmore like the way you would think of a\ncomputer operating. Maybe it's very primitive.",
    "start": "3448920",
    "end": "3455220"
  },
  {
    "text": "You could imagine counting also. And a Turing machine\ncan count as well. But this is the\nsimplest procedure",
    "start": "3455220",
    "end": "3463200"
  },
  {
    "text": "that I can just describe\nfor you without making",
    "start": "3463200",
    "end": "3469470"
  },
  {
    "text": "it too complicated. OK, so let's do a\nlittle checking on that.",
    "start": "3469470",
    "end": "3475549"
  },
  {
    "text": "OK, so the way I'm describing\nthis, how do you think?",
    "start": "3475550",
    "end": "3480890"
  },
  {
    "text": "And in a sense, you don't\nquite know enough yet. But how do you think we're going\nto get this effect of crossing",
    "start": "3480890",
    "end": "3489520"
  },
  {
    "text": "off with the Turing machine? Are we going to get that\nby changing the model",
    "start": "3489520",
    "end": "3495490"
  },
  {
    "text": "and adding that ability\nto cross off to the model? Are we going to use\na tape alphabet that",
    "start": "3495490",
    "end": "3501040"
  },
  {
    "text": "includes those crossed-off\nsymbols among them? Or we'll just assume\nthat all Turing",
    "start": "3501040",
    "end": "3507050"
  },
  {
    "text": "machines come with an\neraser and they can always cross off stuff. So what do you think is the nice\nway, sort of mathematically,",
    "start": "3507050",
    "end": "3514780"
  },
  {
    "text": "to describe this ability\nto cross things off?",
    "start": "3514780",
    "end": "3525240"
  },
  {
    "start": "3525240",
    "end": "3536180"
  },
  {
    "text": "Yeah, again, most of you,\nagain, I think are getting this.",
    "start": "3536180",
    "end": "3541780"
  },
  {
    "text": "So there are, like,\n10 laggards here.",
    "start": "3541780",
    "end": "3547630"
  },
  {
    "text": "So please wrap it up so\nwe can close the poll.",
    "start": "3547630",
    "end": "3554279"
  },
  {
    "text": "Five seconds to go.  OK, polling ending, get\nyour last-- last call.",
    "start": "3554280",
    "end": "3565550"
  },
  {
    "text": "All right, share the results. So most of you got that right.",
    "start": "3565550",
    "end": "3571369"
  },
  {
    "text": "All Turing machines\ncome with the eraser-- I don't know. That was thrown in there as a\njoke, but it came in second. So don't feel bad if\nyou got it, but that's",
    "start": "3571370",
    "end": "3578970"
  },
  {
    "text": "not what I had in mind. The way the Turing machine is\ngoing to be writing on the tape",
    "start": "3578970",
    "end": "3584190"
  },
  {
    "text": "is to write a crossed-off\nsymbol instead of the symbol",
    "start": "3584190",
    "end": "3590160"
  },
  {
    "text": "that was originally there. So we're going to add these\nnew crossed-off symbols. And that's going to be a\ncommon thing for us to do",
    "start": "3590160",
    "end": "3597855"
  },
  {
    "text": "when we design Turing machines. We're not going to get down\nto the implementation level for very long. We're going to\nvery quickly shift",
    "start": "3597855",
    "end": "3603990"
  },
  {
    "text": "to a higher level of\ndiscussion about the machines. But anyway, that's\nhow you would do it",
    "start": "3603990",
    "end": "3609150"
  },
  {
    "text": "if you were going to\nactually build a machine. So let us then look at\nthe formal definition.",
    "start": "3609150",
    "end": "3615575"
  },
  {
    "text": "And personally, maybe I\nshould have done that check in after the formal definition. That might have been\nclearer, but oh well.",
    "start": "3615575",
    "end": "3622538"
  },
  {
    "text": "OK, Turing-- here is\nthe formal definition. This time, a Turing\nmachine is a 7-tuple. ",
    "start": "3622538",
    "end": "3628950"
  },
  {
    "text": "And there is-- now\nhere, we have sigma,",
    "start": "3628950",
    "end": "3638089"
  },
  {
    "text": "which is the input alphabet. Gamma is the tape alphabet. So now you're a little\nbit analogous to the stack",
    "start": "3638090",
    "end": "3645640"
  },
  {
    "text": "from before where gamma\nwas the stack alphabet. But these are the\nsymbols that you're allowed to write on the tape--",
    "start": "3645640",
    "end": "3652569"
  },
  {
    "text": "that are allowed\nto be on the tape. So obviously, all\nof the input symbols",
    "start": "3652570",
    "end": "3658600"
  },
  {
    "text": "are among the tape\nsymbols, because they can appear on the tape. So you have sigma is\na subset of gamma.",
    "start": "3658600",
    "end": "3667893"
  },
  {
    "text": "One thing I didn't\nmention here is that the input alphabet, we\ndon't allow the blank symbol",
    "start": "3667893",
    "end": "3673690"
  },
  {
    "text": "to be in the input alphabet,\nso that you can actually use the blank symbol\nas a delimiter",
    "start": "3673690",
    "end": "3680110"
  },
  {
    "text": "for the end of the\ninput, a marker for the end of the input.",
    "start": "3680110",
    "end": "3685869"
  },
  {
    "text": "So in fact, and the\nblank symbol is always going to be in\nthe tape alphabet. ",
    "start": "3685870",
    "end": "3693460"
  },
  {
    "text": "This is actually always going\nto be a proper subset because of the blank symbol. But we're just allowing--\nit doesn't really matter.",
    "start": "3693460",
    "end": "3700360"
  },
  {
    "text": "We're allowing the\ntape alphabet to have other symbols for\nconvenience, so for example,",
    "start": "3700360",
    "end": "3705600"
  },
  {
    "text": "these crossed-off symbols. Now let's look at what\nthe transition function, how that operates.",
    "start": "3705600",
    "end": "3710718"
  },
  {
    "text": "So the transition\nfunction, remember, tells how the machine is\nactually doing its computation. And it says that, if you're in\na certain state and the head",
    "start": "3710718",
    "end": "3719430"
  },
  {
    "text": "is looking at a\ncertain tape symbol, then you can go to a new state.",
    "start": "3719430",
    "end": "3726300"
  },
  {
    "text": "You write a new symbol at\nthat location on the tape. And you can move the head\neither left or right.",
    "start": "3726300",
    "end": "3733688"
  },
  {
    "text": "So that's how we get\nthe effect of the head being able to be bi-directional.",
    "start": "3733688",
    "end": "3739230"
  },
  {
    "text": "And here is the\nwriting on the tape. It comes up right here. So just an example\nhere which says",
    "start": "3739230",
    "end": "3746295"
  },
  {
    "text": "that, if we're in state two\nand the head is looking at an a currently on the tape, then\nwe can move the state r.",
    "start": "3746295",
    "end": "3752400"
  },
  {
    "text": "We change that a to a b. And we move the\nhead right 1 square. ",
    "start": "3752400",
    "end": "3759990"
  },
  {
    "text": "Now, this is important.  When you give a certain input\nhere to the Turing machine,",
    "start": "3759990",
    "end": "3768430"
  },
  {
    "text": "it may compute\naround for a while, moving its head back and\nforth, as we were showing. And it may eventually\nhalt by either",
    "start": "3768430",
    "end": "3775270"
  },
  {
    "text": "entering the q\naccept state or the q reject state, which I\ndidn't bring out here,",
    "start": "3775270",
    "end": "3781000"
  },
  {
    "text": "but that's important. These are the accepting,\nrejecting, special states of the machine.",
    "start": "3781000",
    "end": "3786130"
  },
  {
    "text": "Or the machine may never\nenter one of those. It may just go\non, and on, and on and never halt. We call\nthat looping, a little bit",
    "start": "3786130",
    "end": "3793880"
  },
  {
    "text": "of a misnomer, because\nlooping implies some sort of a repetition. For us, looping just\nmeans not halting.",
    "start": "3793880",
    "end": "3802370"
  },
  {
    "text": "And so therefore, M has\nthree possible outcomes",
    "start": "3802370",
    "end": "3807910"
  },
  {
    "text": "for each input, this w. It might accept w by\nentering the accept state.",
    "start": "3807910",
    "end": "3818290"
  },
  {
    "text": "It could reject w by entering\nthe reject state, which means it's going to\nreject it by halting.",
    "start": "3818290",
    "end": "3824540"
  },
  {
    "text": "Or we also say we can\nreject by looping. You can reject the string\nby running forever.",
    "start": "3824540",
    "end": "3831920"
  },
  {
    "text": "That's just the terminology\nthat's common in the subject. So you either accept it\nby halting and accepting",
    "start": "3831920",
    "end": "3839480"
  },
  {
    "text": "or rejecting it by either\nhalting and rejecting or by just going forever. That's also considered\nto be rejecting,",
    "start": "3839480",
    "end": "3846230"
  },
  {
    "text": "sort of rejecting in\na sense by default. If you never actually\nhave accepted it, then it's going to be rejected.",
    "start": "3846230",
    "end": "3852515"
  },
  {
    "text": " OK, check in three here--",
    "start": "3852515",
    "end": "3858280"
  },
  {
    "text": "all right, so now our\nlast check in for the day, we say, this Turing machine\nmodel is deterministic.",
    "start": "3858280",
    "end": "3868030"
  },
  {
    "text": "I'm just saying that. But if you look at\nthe way we set it up, if you've been following the\nformal definition so far,",
    "start": "3868030",
    "end": "3875680"
  },
  {
    "text": "you would understand\nwhy it's deterministic. So let's just, as a\nway of checking that,",
    "start": "3875680",
    "end": "3881080"
  },
  {
    "text": "how would we change\nthis definition? Because we will look\nat the next lecture at non-deterministic\nTuring machines.",
    "start": "3881080",
    "end": "3886970"
  },
  {
    "text": "So a little bit of\na lead in to that, how would we change\nthis definition",
    "start": "3886970",
    "end": "3892000"
  },
  {
    "text": "to make it a non-deterministic\nTuring machine? Which of those three\noptions would we use?",
    "start": "3892000",
    "end": "3898760"
  },
  {
    "text": "So here, I'll launch that poll. ",
    "start": "3898760",
    "end": "3907775"
  },
  {
    "text": "I've got about 10 people left. Let's give them\nanother 10 seconds. ",
    "start": "3907775",
    "end": "3917670"
  },
  {
    "text": "OK, I think that's everybody\nwho has answered it from before. ",
    "start": "3917670",
    "end": "3923710"
  },
  {
    "text": "So here, I think you pretty\nmuch almost all of you got the right idea. It is B, in fact, because when\nwe have the power set symbol",
    "start": "3923710",
    "end": "3932190"
  },
  {
    "text": "here, that means there\nmight be several-- there is a subset\nof possibilities. So that indicates several\ndifferent ways to go.",
    "start": "3932190",
    "end": "3938579"
  },
  {
    "text": " And that's the essence\nof non-determinism.",
    "start": "3938580",
    "end": "3944380"
  },
  {
    "text": "OK, so I think we're-- whoops. ",
    "start": "3944380",
    "end": "3953990"
  },
  {
    "text": "All right, so look, this is\nalso kind of setting us up",
    "start": "3953990",
    "end": "3959060"
  },
  {
    "text": "for next lecture and where we're\ngoing to be going with this.",
    "start": "3959060",
    "end": "3964090"
  },
  {
    "text": "So these are basically two\nin a-- well, two or three important definitions here.",
    "start": "3964090",
    "end": "3971559"
  },
  {
    "text": "One is-- we talked about\nthe regular languages",
    "start": "3971560",
    "end": "3976710"
  },
  {
    "text": "from finite automata. We talked about the\ncontext-free languages from the grammars and\nthe pushdown automata.",
    "start": "3976710",
    "end": "3983100"
  },
  {
    "text": "What are the languages that\nthe Turing machines can do?",
    "start": "3983100",
    "end": "3988170"
  },
  {
    "text": "Those are called, in\nthis course, anyway, Turing-recognizable\nlanguages, or T recognizable.",
    "start": "3988170",
    "end": "3996420"
  },
  {
    "text": "Those are the languages that the\nTuring machine can recognize. And so just to make sure we\nwere on the same page on this,",
    "start": "3996420",
    "end": "4006710"
  },
  {
    "text": "the language of the machine\nis the collection of strings that the machine accepts.",
    "start": "4006710",
    "end": "4013020"
  },
  {
    "text": "So the things that are\nnot in the language are the things that are\nrejected either by looping or by halting and rejecting.",
    "start": "4013020",
    "end": "4019840"
  },
  {
    "text": "So only the ones that are\naccepted is the language. Every machine has just\na single language.",
    "start": "4019840",
    "end": "4025480"
  },
  {
    "text": "It's the language of all strings\nthat that machine accepts. And we'll say that and\nrecognize that language,",
    "start": "4025480",
    "end": "4031360"
  },
  {
    "text": "if that language is the\ncollection of such strings that are accepted. And we will call that language\na Turing-recognizable language,",
    "start": "4031360",
    "end": "4041980"
  },
  {
    "text": "if there is some Turing\nmachine that can recognize it. ",
    "start": "4041980",
    "end": "4048090"
  },
  {
    "text": "Now, this feature of being able\nto reject by running forever",
    "start": "4048090",
    "end": "4055940"
  },
  {
    "text": "is a little bit weird, perhaps.  And from the standpoint\nof practicality,",
    "start": "4055940",
    "end": "4066370"
  },
  {
    "text": "it's more convenient if the\nmachine always makes a decision to accept or reject\nin finite time",
    "start": "4066370",
    "end": "4072940"
  },
  {
    "text": "and doesn't just reject\nby going forever. And so we're going to bring\nout a special class of Turing",
    "start": "4072940",
    "end": "4079630"
  },
  {
    "text": "machines that have that\nfeature, that they always halt.",
    "start": "4079630",
    "end": "4085089"
  },
  {
    "text": "The halting states,\nby the way-- maybe it didn't say this explicitly--\nare the q accept and the q reject states.",
    "start": "4085090",
    "end": "4090670"
  },
  {
    "text": "The accept and reject states\nare the halting states. So if the machine\nhalts, that means",
    "start": "4090670",
    "end": "4095888"
  },
  {
    "text": "it ends up in one of those two. So it has made a\ndecision of accepting or rejecting at the point\nat which it has halted.",
    "start": "4095888",
    "end": "4105490"
  },
  {
    "text": "So we'll say a machine\nis a decider if it always halts on every input.",
    "start": "4105490",
    "end": "4112259"
  },
  {
    "text": "So for every w fed\nin, the machine is eventually going to come\nto a q accept or a q reject.",
    "start": "4112260",
    "end": "4118659"
  },
  {
    "text": "We call such a\nmachine a decider. And now we're going to\nsay, a language is--",
    "start": "4118660",
    "end": "4126278"
  },
  {
    "text": "so we'll say that the machine\ndecides a language if it's the language of the machine,\nso the collection of accepted",
    "start": "4126279",
    "end": "4132880"
  },
  {
    "text": "strings, and the\nmachine is the decider. We'll say that, instead of\njust recognizing the language,",
    "start": "4132880",
    "end": "4139059"
  },
  {
    "text": "we'll say that it\ndecides the language. And the Turing-decidable\nlanguage is a language that",
    "start": "4139060",
    "end": "4147439"
  },
  {
    "text": "the machine-- of all strings the machine\naccepts for some Turing machine which is a decider, which\nis a Turing machine that",
    "start": "4147439",
    "end": "4154040"
  },
  {
    "text": "always halts. So if a Turing machine may\nsometimes reject by looping,",
    "start": "4154040",
    "end": "4159370"
  },
  {
    "text": "then it's only\nrecognizing its language. If the Turing machine\nis always halting, so it's always rejecting\nby explicitly coming",
    "start": "4159370",
    "end": "4166778"
  },
  {
    "text": "to a reject state and\nhalting, then we'll say it's actually\ndeciding the language.",
    "start": "4166779",
    "end": "4172399"
  },
  {
    "text": "So then, in a sense,\nthat's better. And we're going to\ndistinguish between those two, because they're not the same.",
    "start": "4172399",
    "end": "4180430"
  },
  {
    "text": "There are some languages\nwhich can be recognized, but not decided. And so in fact, we're going to\nget the following picture here,",
    "start": "4180430",
    "end": "4187500"
  },
  {
    "text": "that the Turing-recognizable\nlanguages are a proper subset. They include all of-- everything that's\ndecidable, certainly",
    "start": "4187500",
    "end": "4193660"
  },
  {
    "text": "is going to be recognizable,\nbecause being a decider",
    "start": "4193660",
    "end": "4200500"
  },
  {
    "text": "is an additional\nrestriction to impose, an additional requirement. So everything\nthat's decidable is",
    "start": "4200500",
    "end": "4205990"
  },
  {
    "text": "going to be automatically\nrecognizable. But there are things which\nare recognizable which are not decidable, as we'll see.",
    "start": "4205990",
    "end": "4213031"
  },
  {
    "text": "I'll actually give\nan example of that, but not prove it next lecture. And just for, just to\ncomplete out this picture,",
    "start": "4213031",
    "end": "4220600"
  },
  {
    "text": "I'm going to also point out--\nwe haven't proven this yet,",
    "start": "4220600",
    "end": "4225790"
  },
  {
    "text": "but we will prove it-- that the decidable\nlanguages also",
    "start": "4225790",
    "end": "4230910"
  },
  {
    "text": "include all the\ncontext-free languages, which, in turn, include\nthe regular languages,",
    "start": "4230910",
    "end": "4236070"
  },
  {
    "text": "as was already seen. So we haven't shown\nthis inclusion yet. But actually, this is\nthe picture that we get.",
    "start": "4236070",
    "end": "4242400"
  },
  {
    "text": "So there is actually a\nhierarchy of containments here. Regular languages are a subset\nof the context-free languages,",
    "start": "4242400",
    "end": "4250170"
  },
  {
    "text": "which are, in turn, a subset of\nthe decidable languages, which in turn, are a subset of the\nTuring-recognizable languages.",
    "start": "4250170",
    "end": "4257849"
  },
  {
    "text": "And so with that,\nI think we're going to move to our little\nbit of a review of what we've done today.",
    "start": "4257850",
    "end": "4264290"
  },
  {
    "text": "So we proved that\npumping lemma as a tool for showing that languages are\nnot context-free languages.",
    "start": "4264290",
    "end": "4270790"
  },
  {
    "text": "We defined Turing\nmachines, which is going to be our model that\nwe're going to be focusing",
    "start": "4270790",
    "end": "4277285"
  },
  {
    "text": "on for the rest of the term,\nnot forgetting the other models, because they're going to\nbe useful examples for us.",
    "start": "4277285",
    "end": "4283930"
  },
  {
    "text": "And we defined Turing deciders,\nTuring machine deciders that halt on all inputs.",
    "start": "4283930",
    "end": "4289810"
  },
  {
    "text": "OK, so I think, with\nthat, we have come to the end of today's lecture.",
    "start": "4289810",
    "end": "4295281"
  },
  {
    "text": "I will stick around a little\nbit and answer questions in the chat. I will try to share\nthem with everybody",
    "start": "4295282",
    "end": "4300705"
  },
  {
    "text": "as I'm answering them so I'm\nnot just talking to one person. ",
    "start": "4300705",
    "end": "4306530"
  },
  {
    "text": "How is the concept applied in-- so I'm getting one question\nabout the practicality",
    "start": "4306530",
    "end": "4312860"
  },
  {
    "text": "of all this. Bunches of questions\nare coming in. ",
    "start": "4312860",
    "end": "4320380"
  },
  {
    "text": "So look, is this\nstuff all practical?",
    "start": "4320380",
    "end": "4326080"
  },
  {
    "text": "I would say, yes and no. ",
    "start": "4326080",
    "end": "4335236"
  },
  {
    "text": "I don't know which\nconcept you have in mind. We're going to introduce lots\nof concepts in this course. And the concept of the finite\nautomata, and the pushdown",
    "start": "4335236",
    "end": "4350870"
  },
  {
    "text": "automata, and context-free\nlanguages, definitely used in other subjects, in\nother fields in computer science",
    "start": "4350870",
    "end": "4359330"
  },
  {
    "text": "and elsewhere-- these are very\nbasic and fundamental notions. And so yes, and Turing\nmachines-- well,",
    "start": "4359330",
    "end": "4366227"
  },
  {
    "text": "I mean that's a model\nof a general computer. If you want to\nunderstand computation, you're going to need to\nunderstand some model.",
    "start": "4366227",
    "end": "4372133"
  },
  {
    "text": "And a Turing machine is a\nparticularly simple model. And that's why we use it. As it turns out,\nit doesn't really matter what model\nyou use, but we'll",
    "start": "4372133",
    "end": "4378230"
  },
  {
    "text": "talk about that next time. But yeah, I would say there\nis a lot of applied material in this course, as time\nhas shown, whether it's",
    "start": "4378230",
    "end": "4387530"
  },
  {
    "text": "led to things like public\nkey cryptography, which is used on the internet,\nor understanding",
    "start": "4387530",
    "end": "4395420"
  },
  {
    "text": "various algorithms. I mean, that's not\nthe reason I study it. I study it because I'm\nmore coming at it from more",
    "start": "4395420",
    "end": "4402260"
  },
  {
    "text": "of a mathematical perspective. I just find the material very\nbeautiful, and interesting, and challenging, but it\ndoes have applications.",
    "start": "4402260",
    "end": "4410330"
  },
  {
    "text": " Any other questions here? I think I'm going\nto sign off, then,",
    "start": "4410330",
    "end": "4415710"
  },
  {
    "text": "to get myself set up\nfor my office hours, which is on a\ndifferent Zoom link. OK, so thank you, everybody.",
    "start": "4415710",
    "end": "4422220"
  },
  {
    "text": "And see you on Thursday. Bye bye. ",
    "start": "4422220",
    "end": "4439000"
  }
]