[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6360"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6360",
    "end": "13339"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13340",
    "end": "20915"
  },
  {
    "text": "PROFESSOR: All right. Welcome back to 6046. AUDIENCE: Woohoo. PROFESSOR: Are you guys ready\nto learn an awesome data",
    "start": "20915",
    "end": "26860"
  },
  {
    "text": "structure? AUDIENCE: Woohoo. PROFESSOR: Yeah, let's do it. This is a data structure named\nafter a human being, Peter van",
    "start": "26860",
    "end": "34895"
  },
  {
    "text": "Emde Boas. I was just corresponding\nwith him yesterday.",
    "start": "34895",
    "end": "40390"
  },
  {
    "text": "And he, in the '70s, he\ninvented this really cool data structure. Its super fast It's amazing.",
    "start": "40390",
    "end": "46130"
  },
  {
    "text": "It's actually pretty\nsimple to implement. And it's used a lot, in\npractice, in network routers,",
    "start": "46130",
    "end": "51390"
  },
  {
    "text": "among other things. And we're going\nto cover it today. So let me first tell\nyou what it does.",
    "start": "51390",
    "end": "58730"
  },
  {
    "text": "So it's an old data structure. But I feel like it's taken us\ndecades to really understand. Question. AUDIENCE: You're mic's not on.",
    "start": "58730",
    "end": "65518"
  },
  {
    "text": "PROFESSOR: In what sense? It's not amplified. It's just for the cameras.",
    "start": "65519",
    "end": "71490"
  },
  {
    "text": "So it's taken us\ndecades, really, to understand this data\nstructure, exactly how it works",
    "start": "71490",
    "end": "78270"
  },
  {
    "text": "and why it's useful. The problem it's solving is what\nyou might call a predecessor",
    "start": "78270",
    "end": "87900"
  },
  {
    "text": "problem. It's very similar to\nthe sort of problem that binary search trees solve. But we're going to do it faster,\nbut in a somewhat different",
    "start": "87900",
    "end": "96909"
  },
  {
    "text": "model, in that the elements\nwe're going to be storing are not just things that\nwe know how to compare.",
    "start": "96910",
    "end": "105030"
  },
  {
    "text": "That would be the\ncomparison model. We're storing integers. And the integers come from a\nuniverse, U, of size little u.",
    "start": "105030",
    "end": "113220"
  },
  {
    "text": "And we'll assume that they're\nnon-negative, so from 0 to u minus 1. Although you could\nsupport negative integers without\nmuch more effort.",
    "start": "113220",
    "end": "120729"
  },
  {
    "text": "And the operations\nwe want to support, we're storing a set of\nn of those elements.",
    "start": "120730",
    "end": "126430"
  },
  {
    "text": "We want to do insert,\ndelete, and successor.",
    "start": "126430",
    "end": "134185"
  },
  {
    "start": "134185",
    "end": "140230"
  },
  {
    "text": "So these are operations you\nshould be familiar with. You should know\nhow to solve these in log n time per operation with\na balanced binary search tree,",
    "start": "140230",
    "end": "146640"
  },
  {
    "text": "like AVL trees. You want to add something\nto the set, delete something from the set, or\ngiven a value I want",
    "start": "146640",
    "end": "153490"
  },
  {
    "text": "to know the next largest\nvalue that is in the set.",
    "start": "153490",
    "end": "158730"
  },
  {
    "text": "So if you draw that as\na one dimensional thing,",
    "start": "158730",
    "end": "163790"
  },
  {
    "text": "you've got some items\nwhich are in your set. And then, you have a query.",
    "start": "163790",
    "end": "170085"
  },
  {
    "text": " So you ask for the\nsuccessor of this value.",
    "start": "170085",
    "end": "176129"
  },
  {
    "text": "Then you're asking for, what\nis the next value that's in the set? So you want to return this item.",
    "start": "176130",
    "end": "182855"
  },
  {
    "text": "OK, predecessor would\nbe the symmetric thing. But if you could\nsolve successor, you could usually\nsolve predecessor.",
    "start": "182855",
    "end": "188280"
  },
  {
    "text": "So we'll focus on\nthese three operations, although, in the\ntextbook, you'll see there are lots\nof operations you could do with van Emde Boas.",
    "start": "188280",
    "end": "195740"
  },
  {
    "text": "So far so good. We know how to do\nthis in log n time. We are going to do\nit in log log u time.",
    "start": "195740",
    "end": "207750"
  },
  {
    "text": "Woah, amazing. So an extra log, but we're\ncheating a little bit, in that",
    "start": "207750",
    "end": "213720"
  },
  {
    "text": "we're replacing n with u. Now in a lot of applications,\nu is pretty reasonable,",
    "start": "213720",
    "end": "219230"
  },
  {
    "text": "like 2 to the 32 or 2\nto the 64, depending on what kind of integers\nyou usually work with.",
    "start": "219230",
    "end": "224620"
  },
  {
    "text": "So log log of that is usually\nreally tiny, and often smaller than log n.",
    "start": "224620",
    "end": "229630"
  },
  {
    "text": "So in particular,\non the theory side,",
    "start": "229630",
    "end": "234740"
  },
  {
    "text": "for example, if u is\na polynomial in n, or even larger than that, you\ncan support n to the polylog n.",
    "start": "234740",
    "end": "245959"
  },
  {
    "text": "Then log log u is\nthe same as log log n, up to constant factors.",
    "start": "245960",
    "end": "256039"
  },
  {
    "text": "And so this is an\nexponential improvement over regular balanced\nbinary search trees. OK, so super fast, and it's\nalso pretty clean and simple,",
    "start": "256040",
    "end": "267120"
  },
  {
    "text": "though it'll take us a\nlittle while to get there. One application for\nthis, as I mentioned,",
    "start": "267120",
    "end": "272480"
  },
  {
    "text": "is in network routers. And I believe most network\nrouters use the van Emde Boas",
    "start": "272480",
    "end": "278610"
  },
  {
    "text": "data structure these\ndays, though just changed in the\nlast decade or so.",
    "start": "278610",
    "end": "285190"
  },
  {
    "text": "Network router, you have to\nstore a routing table, which looks like, for IP\nrange from this to this,",
    "start": "285190",
    "end": "291169"
  },
  {
    "text": "please send your\npackets along this port. For IP range from this to\nthis, send along this port.",
    "start": "291170",
    "end": "296930"
  },
  {
    "text": "So if you mark the\nbeginnings of those ranges as items in your set, and\ngiven an actual IP address,",
    "start": "296930",
    "end": "306520"
  },
  {
    "text": "you want to know\nwhat range it's in, that is a predecessor\nor a successor problem. And so van Emde Boas lets\nyou solve that really fast.",
    "start": "306520",
    "end": "313879"
  },
  {
    "text": "u, for IPV4 is only\nis only 2 to the 32.",
    "start": "313880",
    "end": "319490"
  },
  {
    "text": "So that's super\nfast and practical. It's going to take\nlike five operations to do log log 2 to the 32.",
    "start": "319490",
    "end": "327740"
  },
  {
    "text": "So that's it. And as you may know,\nnetwork routers are basically computers.",
    "start": "327740",
    "end": "333669"
  },
  {
    "text": "And so they used to have a\nlot of specialized hardware. These days it's pretty\ngeneral purpose. And so you want nice data\nstructures, like the one",
    "start": "333669",
    "end": "341660"
  },
  {
    "text": "we'll cover. OK, so we want to\nshoot for log log u. We're going to get there\nby a series of improvements",
    "start": "341660",
    "end": "350990"
  },
  {
    "text": "on a very simple idea. This is not the original\nway that van Emde Boas got to this concept.",
    "start": "350990",
    "end": "356569"
  },
  {
    "text": "But it's sort of the\nmodern take on it. It's one that's in the textbook. So the first question is, how\nmight we get a log log u bound?",
    "start": "356570",
    "end": "364920"
  },
  {
    "text": "Where might that come from? That's a question for you. ",
    "start": "364920",
    "end": "371267"
  },
  {
    "text": "This is just intuition. ",
    "start": "371267",
    "end": "382244"
  },
  {
    "text": "Any suggestions? ",
    "start": "382244",
    "end": "392980"
  },
  {
    "text": "We see logs all the time. So, yeah. AUDIENCE: You organize the\nheight of a tree into a tree. PROFESSOR: Ah, good.",
    "start": "392980",
    "end": "398630"
  },
  {
    "text": "You organize the height\nof the tree into a tree. So we normally think of a tree,\nlet's say we have u down here.",
    "start": "398630",
    "end": "407560"
  },
  {
    "text": "So the height is log u. So somehow, we want\na binary search",
    "start": "407560",
    "end": "415810"
  },
  {
    "text": "on the levels of this tree. Right, if we could kind of\nstart in the middle level, and then decide whether\nwe need to go up or down,",
    "start": "415810",
    "end": "423760"
  },
  {
    "text": "I'm totally unclear\nwhat that would mean. But in fact, that's exactly\nthe van Emde Boas will do. So you can binary\nsearch-- I think",
    "start": "423760",
    "end": "432450"
  },
  {
    "text": "we won't see that until the very\nend-- but on levels of a tree.",
    "start": "432450",
    "end": "438785"
  },
  {
    "text": " So at least some intuition. ",
    "start": "438785",
    "end": "446030"
  },
  {
    "text": "Now let's think about this\nin terms of recurrences. There's a recurrence for\nbinary search, which is usually",
    "start": "446030",
    "end": "455069"
  },
  {
    "text": "you have k things, t of k is\nt of k over 2 plus order 1.",
    "start": "455070",
    "end": "462580"
  },
  {
    "text": "You spend constant\ntime to decide whether you should go left\nor right in a binary search, or in this case up\nand down somehow.",
    "start": "462580",
    "end": "467949"
  },
  {
    "text": "And then you reduce to a\nproblem of half the size. So this solves to log k.",
    "start": "467950",
    "end": "474670"
  },
  {
    "text": "In our case, k is\nactually log u. So we want a recurrence that\nlooks something like t of log u",
    "start": "474670",
    "end": "483780"
  },
  {
    "text": "equals t of log\nu/2 plus order 1.",
    "start": "483780",
    "end": "491055"
  },
  {
    "text": "OK, even if you don't believe in\nthe binary search perspective, this is clearly a recurrence\nthat solves to log log u.",
    "start": "491055",
    "end": "498000"
  },
  {
    "text": "I'm just substituting\nk equals log u here. So that could be\non the right track. Now, that's in terms of log u.",
    "start": "498000",
    "end": "504009"
  },
  {
    "text": "What if I wanted to rewrite\nthis recurrence in terms u? What would I get? If I wanted to have this\nstill solve to log log u,",
    "start": "504010",
    "end": "513299"
  },
  {
    "text": "what should I write here? ",
    "start": "513299",
    "end": "530010"
  },
  {
    "text": "If I change the logarithm of\na number by a factor of 2, how does u change?",
    "start": "530010",
    "end": "535215"
  },
  {
    "text": " AUDIENCE: Square root. PROFESSOR: Square root. ",
    "start": "535215",
    "end": "545060"
  },
  {
    "text": "OK, So I've changed what\nthe variable is here. But this is really\nthe same recurrence.",
    "start": "545060",
    "end": "550149"
  },
  {
    "text": "It will still\nsolve to log log u. The number of times you have to\napply square root to a number",
    "start": "550150",
    "end": "555870"
  },
  {
    "text": "to get to 1 is log log u. So this is some more intuition\nfor how van Emde Boas is",
    "start": "555870",
    "end": "562260"
  },
  {
    "text": "going to achieve log log u. And in fact, this is the primary\nintuition we'll be using.",
    "start": "562260",
    "end": "568490"
  },
  {
    "text": "So what we would like is\nto some take our problem, which has size u, and\nsplit it into problems",
    "start": "568490",
    "end": "575710"
  },
  {
    "text": "of size square root\nof u, so that we only have to recurse on one of them. And then, we'll get\nthis recurrence.",
    "start": "575710",
    "end": "582960"
  },
  {
    "text": "OK, that's where\nwe're going to go.",
    "start": "582960",
    "end": "589610"
  },
  {
    "text": "But we're going to start with\na very simple data structure for representing a set of n\nnumbers from the universe 0",
    "start": "589610",
    "end": "598139"
  },
  {
    "text": "up to u minus 1.  And let's say, initially, our\ngoal is for insert and delete",
    "start": "598140",
    "end": "605529"
  },
  {
    "text": "to be constant time. But let's not worry\nabout successor. Successor could\ntake linear time.",
    "start": "605530",
    "end": "611490"
  },
  {
    "text": "What would be a good data\nstructure for storing items in this universe?",
    "start": "611490",
    "end": "617000"
  },
  {
    "text": "I want u to be involved somehow. I don't just want\nto, like, store them in a linked list of items\nor assorted array of items.",
    "start": "617000",
    "end": "624660"
  },
  {
    "text": "I would like u to\nbe involved, insert and delete constant time. ",
    "start": "624660",
    "end": "635040"
  },
  {
    "text": "Very simple. ",
    "start": "635040",
    "end": "645633"
  },
  {
    "text": "Yeah. AUDIENCE: Simply an array. PROFESSOR: In an array, yeah. What's the array indexed by?",
    "start": "645633",
    "end": "651514"
  },
  {
    "text": "AUDIENCE: It would be index n. PROFESSOR: Sorry? AUDIENCE: By the index of n.",
    "start": "651514",
    "end": "656870"
  },
  {
    "text": "PROFESSOR: The\nindex of n, close. AUDIENCE: The value. PROFESSOR: Sorry?",
    "start": "656870",
    "end": "662027"
  },
  {
    "text": "AUDIENCE: The value. PROFESSOR: The value, yeah. Good. So I want-- this is normally\ncalled a bit vector, where",
    "start": "662027",
    "end": "672820"
  },
  {
    "text": "I want array of size u, and\nfor each cell in the array,",
    "start": "672820",
    "end": "686540"
  },
  {
    "text": "I'm going to write 0 or 1. 0 means absent. 1 means present.",
    "start": "686540",
    "end": "691820"
  },
  {
    "text": "It's in the set.  So let me draw a\npicture, maybe over here.",
    "start": "691820",
    "end": "700060"
  },
  {
    "start": "700060",
    "end": "715410"
  },
  {
    "text": "Let me take my example\nand give you a frisbee.",
    "start": "715410",
    "end": "720884"
  },
  {
    "start": "720885",
    "end": "728390"
  },
  {
    "text": "Let me put it in the middle. ",
    "start": "728390",
    "end": "759470"
  },
  {
    "text": "So this is an example of a set\nwith-- if I maybe highlight a little bit-- here's 1.",
    "start": "759470",
    "end": "766060"
  },
  {
    "text": " Here's a 1, and\na one, and a one.",
    "start": "766060",
    "end": "772830"
  },
  {
    "text": "So there are 4\nelements in the set. The universe size is 16.",
    "start": "772830",
    "end": "778860"
  },
  {
    "text": " n equals 4, in this\nparticular example.",
    "start": "778860",
    "end": "788230"
  },
  {
    "text": "If I want to insert into this\nset, I just change 0 to a 1. If I want to delete from the\nset, I change a 1 to a 0.",
    "start": "788230",
    "end": "795460"
  },
  {
    "text": "So those are constant time. Good. ",
    "start": "795460",
    "end": "806220"
  },
  {
    "text": "If I want to do a successor\nquery, not so good.",
    "start": "806220",
    "end": "812569"
  },
  {
    "text": "I might need to\nspend order u time. Maybe I asked for the\nsuccessor of this item,",
    "start": "812570",
    "end": "819520"
  },
  {
    "text": "and the only thing\nto do is just keep jumping until I get to a 1.",
    "start": "819520",
    "end": "824840"
  },
  {
    "text": "And the worst case,\nthere's almost to u 0's in a row, or u minus n.",
    "start": "824840",
    "end": "830900"
  },
  {
    "text": "So that's really slow. But this, in fact, will\nbe our starting point. It may seem really silly. But it's actually a\ngood starting point",
    "start": "830900",
    "end": "838769"
  },
  {
    "text": "for van Emde Boas. So the second idea is, we're\ngoing to take our universe",
    "start": "838770",
    "end": "856010"
  },
  {
    "text": "and split it into clusters. ",
    "start": "856010",
    "end": "862260"
  },
  {
    "text": "van Emde Boas, the person,\nlikes to call these galaxies. I think that's a nice name\nfor pieces of the universe.",
    "start": "862260",
    "end": "869290"
  },
  {
    "text": "But textbook calls it clusters. Because they used\nto call it clusters. So now, it's question of how\nbig the cluster should be.",
    "start": "869290",
    "end": "878630"
  },
  {
    "text": "But I gave you\nthis picture, and I want to think about these\ngalaxies as separate chunks,",
    "start": "878630",
    "end": "884420"
  },
  {
    "text": "and I ask for the\nsuccessor of this, how could I possibly speed\nup the successor search?",
    "start": "884420",
    "end": "891508"
  },
  {
    "text": "Yeah. AUDIENCE: You could form a tree\nfor each cluster and connect--",
    "start": "891508",
    "end": "898130"
  },
  {
    "text": "PROFESSOR: You could form a tree\nhere and store what at the-- [INTERPOSING VOICES] AUDIENCE: Could store an\nor between the two bits.",
    "start": "898130",
    "end": "905529"
  },
  {
    "text": "PROFESSOR: Cool. I like this. So I could store the\nor of these two bits-- clean this up a little\nbit-- or of these two bits,",
    "start": "905530",
    "end": "912970"
  },
  {
    "text": "or of these two bits, and so on. ",
    "start": "912970",
    "end": "919096"
  },
  {
    "text": "The or is interesting, because\nthis 0 bit, in particular, tells me there's\nnothing in here.",
    "start": "919096",
    "end": "926170"
  },
  {
    "text": "So I should just be\nable to skip over it. So you're imagining a kind\nof binary search-ish thing.",
    "start": "926170",
    "end": "932330"
  },
  {
    "text": "It's a good idea. ",
    "start": "932330",
    "end": "937440"
  },
  {
    "text": "So each node here, I'm\njust writing the or of its two children. ",
    "start": "937440",
    "end": "944709"
  },
  {
    "text": "And in fact, you could\ndo this all the way up. You could build an\nentire binary tree.",
    "start": "944710",
    "end": "950728"
  },
  {
    "text": "But remember, what\nwe're trying to do is a binary search on\nthe levels of the tree. And so, in particular, I'm\ngoing to focus on this level.",
    "start": "950729",
    "end": "960570"
  },
  {
    "text": "This is the middle\nlevel of that tree if I drew out the whole thing. And that level is interesting,\nbecause it's just summarizing--",
    "start": "960570",
    "end": "968759"
  },
  {
    "text": "is there anybody in here, is\nthere anybody in this cluster, is there anybody\nin this cluster, is there anybody\nin this cluster.",
    "start": "968760",
    "end": "975440"
  },
  {
    "text": "So we call this\nthe summary vector. ",
    "start": "975440",
    "end": "982820"
  },
  {
    "text": "So we'll come back to your\ntree perspective at some point. That is a good big picture\nof what's going on.",
    "start": "982820",
    "end": "989834"
  },
  {
    "text": "But at this level, I'm\njust going to say, well let's store the bit vector. Let's also store\nthis summary vector.",
    "start": "989834",
    "end": "996570"
  },
  {
    "text": "And now, when I want to find\nthe successor of something, first I'll look\ninside the cluster.",
    "start": "996570",
    "end": "1002610"
  },
  {
    "text": "If I don't find my answer, I'll\ngo up to the summary vector and find where is\nthe next cluster that",
    "start": "1002610",
    "end": "1008110"
  },
  {
    "text": "has something in it. And then I'll go\ninto that cluster and look for the first one.",
    "start": "1008110",
    "end": "1014450"
  },
  {
    "text": "OK, that's a good next step.",
    "start": "1014450",
    "end": "1019560"
  },
  {
    "text": "So this will split the\nuniverse into clusters.",
    "start": "1019560",
    "end": "1027280"
  },
  {
    "text": " How big should the\nclusters be to balance out?",
    "start": "1027280",
    "end": "1034885"
  },
  {
    "text": "There's three\nsearches I'm doing. One is within a cluster. One is in the summary vector. And one is within\nanother cluster.",
    "start": "1034885",
    "end": "1043422"
  },
  {
    "text": "Yeah. AUDIENCE: Square root u. PROFESSOR: Square root u. Yeah. That will balance out. If there's square\nroot of u size,",
    "start": "1043422",
    "end": "1049142"
  },
  {
    "text": "then the number of clusters\nwill be square root of u. So the search in\nthe summary vector will be the same as\nthe cost down here.",
    "start": "1049142",
    "end": "1054410"
  },
  {
    "text": "Also we know that\nwe kind of want to do square root of\nu recursion somehow. So this is not yet\nthe recursive version.",
    "start": "1054410",
    "end": "1060030"
  },
  {
    "text": "But square root of\nu is exactly right. And I owe some frisbees, sorry. Here's one frisbee.",
    "start": "1060030",
    "end": "1066710"
  },
  {
    "text": "And yeah, cool. And I think also you one.",
    "start": "1066710",
    "end": "1074552"
  },
  {
    "text": "Sorry. So clusters have\nsize square root",
    "start": "1074552",
    "end": "1081429"
  },
  {
    "text": "of u, the square\nroot of u of them. And, cool. So now, when I want to\ndo an insert or a delete,",
    "start": "1081430",
    "end": "1090250"
  },
  {
    "text": "it's still-- let's not\nworry about delete. That's a little tricky. To do an insert,\nit's still easy.",
    "start": "1090250",
    "end": "1096169"
  },
  {
    "text": "If I insert into\nhere, I set it to 1. And I check, if this is already\n0, I should also set that to 1.",
    "start": "1096170",
    "end": "1103210"
  },
  {
    "text": "Now deleting would be tricky. To delete this guy and realize\nthat there's nothing else, eh. Let's not worry about that\nuntil we do a lot more work.",
    "start": "1103210",
    "end": "1110890"
  },
  {
    "text": "Let's just focus on\ninsert and successor. So insert, with this strategy,\nis still constant time.",
    "start": "1110890",
    "end": "1120940"
  },
  {
    "text": "It's two steps instead\nof one, but it's good. Successor does three things.",
    "start": "1120940",
    "end": "1130360"
  },
  {
    "text": "First, we look, let's\nsay, successor of x.",
    "start": "1130360",
    "end": "1136230"
  },
  {
    "text": "First thing we do is\nlook in x's cluster. ",
    "start": "1136230",
    "end": "1142929"
  },
  {
    "text": "Then, if we don't find\nwhat we're looking for, then we'll look for the next\n1 bit in the summary vector,",
    "start": "1142930",
    "end": "1160690"
  },
  {
    "text": "and then, we'll look for\nthe first 1 in that cluster.",
    "start": "1160690",
    "end": "1170789"
  },
  {
    "text": " So there are two cases. In the lucky case, we find\nthe successor in the cluster",
    "start": "1170790",
    "end": "1178144"
  },
  {
    "text": "that we started in. So that only takes root u time. If we're unlucky, we\nresearch in the summary.",
    "start": "1178145",
    "end": "1184100"
  },
  {
    "text": "That takes root u time. And then we find\nthe first 1 bit. That takes root u time. Whole thing is square root of\nu, which is, of course, not very",
    "start": "1184100",
    "end": "1191930"
  },
  {
    "text": "good, compared to log n. But it's a lot\nbetter than u, which is our first method,\nthe bit vector.",
    "start": "1191930",
    "end": "1199070"
  },
  {
    "text": "So we've improved from\nu to square root of u. Now of course, the\nidea is to recurse. Instead of just doing a bit\nvector at each of these levels,",
    "start": "1199070",
    "end": "1206872"
  },
  {
    "text": "we're going to\nrecursively represent each of these clusters in this way. This is where things get a\nlittle magical, in the magic",
    "start": "1206872",
    "end": "1213960"
  },
  {
    "text": "of divide and conquer. And then, we'll get\nt of square root of u",
    "start": "1213960",
    "end": "1219710"
  },
  {
    "text": "instead of square root of u. And then we'll get\na log log cost.",
    "start": "1219710",
    "end": "1226279"
  },
  {
    "text": "So before I get\nthere, let me give you",
    "start": "1226280",
    "end": "1233210"
  },
  {
    "text": "a little bit of\nterminology and an example",
    "start": "1233210",
    "end": "1240460"
  },
  {
    "text": "for dealing with clusters. ",
    "start": "1240460",
    "end": "1245770"
  },
  {
    "text": "OK, in general,\nremember the things we're searching for\nare just integers. And what we're talking\nabout is essentially",
    "start": "1245770",
    "end": "1253510"
  },
  {
    "text": "dividing an integer, like\nx, by square root of u. And so this is,\nwhatever, the quotient.",
    "start": "1253510",
    "end": "1261470"
  },
  {
    "text": "And this is the remainder. So I want j to be\nbetween 0 and strictly less than square root of u.",
    "start": "1261470",
    "end": "1267289"
  },
  {
    "text": "Then this is unique, fundamental\ntheorem of arithmetic, or something.",
    "start": "1267290",
    "end": "1272350"
  },
  {
    "text": "And i is the cluster number. And then j is the position\nof x within that cluster.",
    "start": "1272350",
    "end": "1279860"
  },
  {
    "text": "So let's do an example\nlike x equals 9.",
    "start": "1279860",
    "end": "1288000"
  },
  {
    "text": "So I didn't number\nthem over here. This is x equals 0, 1,\n2, 3, 4, 5, 6, 7, 8,",
    "start": "1288000",
    "end": "1296383"
  },
  {
    "text": "9-- here's the guy I'm\ninterested in-- 10, 11, 12, and so on.",
    "start": "1296384",
    "end": "1303860"
  },
  {
    "text": "So 9 is here. This is cluster number 0, 1, 2.",
    "start": "1303860",
    "end": "1309380"
  },
  {
    "text": "So I claim 9 equals 2\ntimes square root of u. Here is 4. I conveniently chose u\nto be a perfect square.",
    "start": "1309380",
    "end": "1317110"
  },
  {
    "text": "And it is item 0,1\nwithin the cluster. And indeed, 9 equals\n2 times 4 plus 1.",
    "start": "1317110",
    "end": "1325370"
  },
  {
    "text": "So in general, if\nyou're given x, and I said, ah, look in x's\ncluster, what that means",
    "start": "1325370",
    "end": "1332770"
  },
  {
    "text": "is look at x integer\ndivided by square root of u. That's the cluster number.",
    "start": "1332770",
    "end": "1338997"
  },
  {
    "text": "And I'll try to search in there.  And I look in the\nsummary vector,",
    "start": "1338997",
    "end": "1344690"
  },
  {
    "text": "starting from that\ncluster name, the name of the cluster for this guy,\nfinding the next cluster.",
    "start": "1344690",
    "end": "1351207"
  },
  {
    "text": "Then I'll multiply\nby square root of u to get here, and\nthen continue on.",
    "start": "1351207",
    "end": "1356930"
  },
  {
    "text": "In general, because\ndividing to multiplying-- I don't want to have to\nthink about it too hard.",
    "start": "1356930",
    "end": "1363220"
  },
  {
    "text": "I'm going to say, define\nsome functions to make this a little easier,\nmore intuitive.",
    "start": "1363220",
    "end": "1371289"
  },
  {
    "text": "So when I do integer division\nby square root of u, which is like taking the floor,\nI'll call that high of x, the high part of x.",
    "start": "1371290",
    "end": "1378370"
  },
  {
    "text": "And low of x is going\nto be the remainder. That's the j up here. ",
    "start": "1378370",
    "end": "1387350"
  },
  {
    "text": "And if I have the high and\nthe low part, the i and the j, I'm going to use\nindex to go back to x.",
    "start": "1387350",
    "end": "1395070"
  },
  {
    "text": "So index of ij is going to be i\ntimes square root of u plus j.",
    "start": "1395070",
    "end": "1402370"
  },
  {
    "text": "Now why do I call\nthese high and low? ",
    "start": "1402370",
    "end": "1412195"
  },
  {
    "text": "I'll give you a hint. ",
    "start": "1412195",
    "end": "1422529"
  },
  {
    "text": "Here's the binary\nrepresentation of x. ",
    "start": "1422530",
    "end": "1436820"
  },
  {
    "text": "In this case, high of x is 2. And low of x is 1.",
    "start": "1436820",
    "end": "1442490"
  },
  {
    "text": " Yeah. AUDIENCE: So the high x\ncorresponds to the first two,",
    "start": "1442490",
    "end": "1449549"
  },
  {
    "text": "which is the first 2 bit. And the low x corresponds\nto [INAUDIBLE]. PROFESSOR: Right.",
    "start": "1449550",
    "end": "1455929"
  },
  {
    "text": "High of x corresponds to\nthe high half of the bits.",
    "start": "1455930",
    "end": "1461480"
  },
  {
    "text": "And low of x corresponds to\nthe bottom half of the bits. So these are the high order\nbits and the low order bits.",
    "start": "1461480",
    "end": "1469520"
  },
  {
    "text": "And if you think\nabout it, remember when we take square root of u\nin logarithm, it takes log u",
    "start": "1469520",
    "end": "1474790"
  },
  {
    "text": "and divides it in half. So it's exactly,\nin the bit factor, which is log u bits long,\nwe're dividing in half here,",
    "start": "1474790",
    "end": "1482900"
  },
  {
    "text": "and looking at the high\nbits versus the low bits. OK?",
    "start": "1482900",
    "end": "1488730"
  },
  {
    "text": "So that's another interpretation\nof what this is doing. And if you don't\nlike doing division,",
    "start": "1488730",
    "end": "1493860"
  },
  {
    "text": "as many computers don't like\nto do, all we're actually doing is masking out these\nbits, or taking these bits",
    "start": "1493860",
    "end": "1499529"
  },
  {
    "text": "and shifting them over. So these are very\nefficient to actually do. And maybe get some intuition\nfor why they're relevant.",
    "start": "1499530",
    "end": "1507950"
  },
  {
    "text": "So let's recurse, shall we?",
    "start": "1507950",
    "end": "1513899"
  },
  {
    "start": "1513900",
    "end": "1521975"
  },
  {
    "text": "I think now we know how this\nsplitting things up works. ",
    "start": "1521975",
    "end": "1542230"
  },
  {
    "text": "So I'm going to call\nthe overall structure v, or a van Emde Boas structure\nI'm trying to represent is v.",
    "start": "1542230",
    "end": "1551810"
  },
  {
    "text": "And v is going to\nconsist of two parts. One is an array of\nall of the clusters.",
    "start": "1551810",
    "end": "1560580"
  },
  {
    "start": "1560580",
    "end": "1568870"
  },
  {
    "text": "I'm going to abbreviate\nvan Emde Boas as VEB. ",
    "start": "1568870",
    "end": "1573920"
  },
  {
    "text": "And recursively, each\nof those clusters is going to be represented by a\nsmaller VEB structure, of size",
    "start": "1573920",
    "end": "1582750"
  },
  {
    "text": "square root of the given one. OK, and i ranges from 0 to\nsquare root of u minus 1.",
    "start": "1582750",
    "end": "1593901"
  },
  {
    "text": "OK, so there's square\nroot of u of them. Total sizes is u. And then, in\naddition, we're going",
    "start": "1593901",
    "end": "1600850"
  },
  {
    "text": "to have a summary structure. And this is also a size\nsquare root of u VEB.",
    "start": "1600850",
    "end": "1608311"
  },
  {
    "text": " OK, you should think about\ninserts and successors.",
    "start": "1608311",
    "end": "1617860"
  },
  {
    "text": "Those are the two operations\nI care about for now. Let's start with insert. That's easier.",
    "start": "1617860",
    "end": "1623410"
  },
  {
    "start": "1623410",
    "end": "1640360"
  },
  {
    "text": "So if I want to insert an\nitem, x, into data structure v,",
    "start": "1640360",
    "end": "1646559"
  },
  {
    "text": "then first thing I\nshould do is insert into its corresponding cluster. So let's just get comfortable\nwith that notation.",
    "start": "1646560",
    "end": "1654950"
  },
  {
    "text": "We're inserting into the cluster\nwhose number is high of x.",
    "start": "1654950",
    "end": "1661760"
  },
  {
    "text": "That is where x belongs. The name of its cluster\nshould be high of x.",
    "start": "1661760",
    "end": "1667270"
  },
  {
    "text": "And what we're going to\nbe inserting recursively into there is low of x. That is the name of x\nlocal to that cluster.",
    "start": "1667270",
    "end": "1674950"
  },
  {
    "text": "x is a global name with\nrespect to v. This cluster only represents a small range\nof square root of u items.",
    "start": "1674950",
    "end": "1681590"
  },
  {
    "text": "So this gets us from\nthe big space of size u to the small space\nof size square root of u within that cluster.",
    "start": "1681590",
    "end": "1686860"
  },
  {
    "text": "So that's basically what\nhigh and low were made for. But then, we have to also\nupdate the summary structure.",
    "start": "1686860",
    "end": "1693169"
  },
  {
    "text": "So we need, just in case--\nMaybe it's already there. But in the worst case, it isn't.",
    "start": "1693170",
    "end": "1699110"
  },
  {
    "text": "So we'll just think of that\nas recursively inserting into v dot summary the\nname of the cluster, which",
    "start": "1699110",
    "end": "1711570"
  },
  {
    "text": "is high of x. High of x is keeping track of\nwhich clusters are non-empty.",
    "start": "1711570",
    "end": "1716661"
  },
  {
    "text": "We've just inserted\nsomething into this cluster. So it's non-empty. We better mark that\nthat cluster, high of x,",
    "start": "1716661",
    "end": "1723170"
  },
  {
    "text": "is non-empty in the\nsummary structure. Why? So we can do successor. So let's move on to successor.",
    "start": "1723170",
    "end": "1730294"
  },
  {
    "start": "1730295",
    "end": "1740440"
  },
  {
    "text": "Actually, I want to mimic\nthe successor written here on the bottom of the board. ",
    "start": "1740440",
    "end": "1748250"
  },
  {
    "text": "So what we had in the\nnon-recursive version was three steps. So we're going to do\nthe same thing here.",
    "start": "1748250",
    "end": "1754120"
  },
  {
    "text": "We're going to look\nwithin x's cluster. We now know that is the\ncluster known as high of x.",
    "start": "1754120",
    "end": "1759420"
  },
  {
    "text": " And either we find, and\nwe're happy, or we don't.",
    "start": "1759420",
    "end": "1765880"
  },
  {
    "text": "Then we're going to look at\nv dot summary search for this the successor of high of x.",
    "start": "1765880",
    "end": "1773140"
  },
  {
    "text": "Right, finding the next\n1 bit, that is successor. And then, I want to find the\nfirst 1 bit in that cluster.",
    "start": "1773140",
    "end": "1782330"
  },
  {
    "text": "Is that a successor also? ",
    "start": "1782330",
    "end": "1792251"
  },
  {
    "text": "Yeah. That's just the successor\nof negative infinity. Finding the minimum element in a\ncluster is the successor of -1,",
    "start": "1792251",
    "end": "1801250"
  },
  {
    "text": "or 0, or not zero. But -1 would work, or\nnegative infinity, maybe more intuitively.",
    "start": "1801250",
    "end": "1806469"
  },
  {
    "text": "That'll find the\nsmallest thing here. So each of these is\na recursive call. I can think of it as\nrecursively calling successor.",
    "start": "1806469",
    "end": "1815230"
  },
  {
    "text": "So let's do that. ",
    "start": "1815230",
    "end": "1824770"
  },
  {
    "text": "I want to find the successor\nof x in v. First thing I'm going to do is\ndo the ij breakdown.",
    "start": "1824770",
    "end": "1832220"
  },
  {
    "text": "I'll let i be high of x and\nj be-- I could do low of x.",
    "start": "1832220",
    "end": "1839380"
  },
  {
    "text": "But what I'm going to try for is\nto search within this cluster,",
    "start": "1839380",
    "end": "1844940"
  },
  {
    "text": "high of x. So I'm going to look for\nthe successor of cluster i,",
    "start": "1844940",
    "end": "1853000"
  },
  {
    "text": "which is cluster high\nof x, of low of x.",
    "start": "1853000",
    "end": "1859914"
  },
  {
    "text": "OK, so that's this first step\nof looking in x's cluster. This is x's cluster.",
    "start": "1859914",
    "end": "1865309"
  },
  {
    "text": "This is x's name in the cluster. I'm going to try to\nfind the successor. But it might say infinity. I didn't find anything.",
    "start": "1865310",
    "end": "1872160"
  },
  {
    "text": "And then I'll be unhappy\nif j equals infinity. ",
    "start": "1872160",
    "end": "1881270"
  },
  {
    "text": "So that's line one. ",
    "start": "1881270",
    "end": "1892070"
  },
  {
    "text": "Well, then we're in\nthe wrong cluster. High of x is not\nthe right cluster. Let's find the\ncorrect cluster, which",
    "start": "1892070",
    "end": "1897549"
  },
  {
    "text": "is going to be the\nnext non-empty cluster. So I'm going to change i to be\nthe successor in the summary",
    "start": "1897550",
    "end": "1910360"
  },
  {
    "text": "structure of i.",
    "start": "1910360",
    "end": "1917025"
  },
  {
    "text": "So i was the name of a cluster. It may have items in it. But we want to find the\nnext non-empty thing.",
    "start": "1917025",
    "end": "1922830"
  },
  {
    "text": "Because we know the successor\nwe're looking for is not here. ",
    "start": "1922830",
    "end": "1929490"
  },
  {
    "text": "OK. So this is the cluster\nwe now belong in. What item in the\ncluster do we want?",
    "start": "1929490",
    "end": "1935000"
  },
  {
    "text": "Well, we want to find the\nminimum item in that cluster. And we're going to do that\nby a recursive call, which",
    "start": "1935000",
    "end": "1944280"
  },
  {
    "text": "is j is the successor within\ncluster i of minus infinity,",
    "start": "1944280",
    "end": "1960730"
  },
  {
    "text": "I'll say. -1 would also work. So this will find the\nsmallest item in the cluster.",
    "start": "1960730",
    "end": "1966450"
  },
  {
    "text": "And then, in both\ncases, we get i and j, which together in\nthis form describe",
    "start": "1966450",
    "end": "1973900"
  },
  {
    "text": "the value x that we care about. So I'm just going to\nsay, return index of ij.",
    "start": "1973900",
    "end": "1982610"
  },
  {
    "text": "That's how we reconstruct an\nitem name for the structure v.",
    "start": "1982610",
    "end": "1988140"
  },
  {
    "text": "We knew which\nsubstructure it's in. And we know its name\nwithin the substructure, within the cluster.",
    "start": "1988140",
    "end": "1994790"
  },
  {
    "text": "Is this algorithm\nclearly correct? Good. It's also really bad.",
    "start": "1994790",
    "end": "2001120"
  },
  {
    "text": "Well, it's better than\neverything we've done so far. The last result we had\nwas square root of u. This is going to be better than\nthat, but still not log log u.",
    "start": "2001120",
    "end": "2010440"
  },
  {
    "text": "Why? Both of these are bad. ",
    "start": "2010440",
    "end": "2018990"
  },
  {
    "text": "Yeah. AUDIENCE: You make more than\none call to [? your insert. ?] PROFESSOR: Right. I make more than\none recursive call",
    "start": "2018990",
    "end": "2026134"
  },
  {
    "text": "to whatever the\noperation is here. Insert calls insert twice. Here, successor calls successor\npotentially three times.",
    "start": "2026134",
    "end": "2032914"
  },
  {
    "text": " This is a good challenge for me. Let's see.",
    "start": "2032915",
    "end": "2039411"
  },
  {
    "text": "Eh, not bad. Off by one. OK, that's a common problem\nin computer science, right?",
    "start": "2039411",
    "end": "2045250"
  },
  {
    "text": "Always off by one errors. OK, so let's think of it\nin terms of recurrences, in case that's not clear.",
    "start": "2045250",
    "end": "2050829"
  },
  {
    "text": "Here we have t of u is 2\ntimes t of square root of u.",
    "start": "2050830",
    "end": "2056929"
  },
  {
    "text": "Right, to solve a\nproblem of size u, I solve two problems of size\nsquare root of u plus constant.",
    "start": "2056929",
    "end": "2063280"
  },
  {
    "text": "Because high of x and\nlow of x, I'm assuming, take constant time to do. It's just, I have an integer.",
    "start": "2063280",
    "end": "2068610"
  },
  {
    "text": "I divide it in half. Those are cheap. ",
    "start": "2068610",
    "end": "2073949"
  },
  {
    "text": "What does this solve to? It's probably easier to think\nof it in terms of log u. Then we could apply\nthe master method.",
    "start": "2073949",
    "end": "2080899"
  },
  {
    "text": "Right, this is the same\nthing as t prime of log u is 2 times t of log u\ndivided by 2 plus order 1.",
    "start": "2080900",
    "end": "2092054"
  },
  {
    "start": "2092055",
    "end": "2098750"
  },
  {
    "text": "This is not quite the\nmerge sort recurrence. But it's not good.",
    "start": "2098750",
    "end": "2104452"
  },
  {
    "text": "One way to think\nof it, is we start with the total weight of log u. We split into log over\n2, but two copies of it.",
    "start": "2104452",
    "end": "2111580"
  },
  {
    "text": "So we're not saving anything. And we didn't reduce\nthe problem strictly. In terms of the recursion\ntree, we have, you know,",
    "start": "2111580",
    "end": "2118940"
  },
  {
    "text": "log u-- well, it's hard\nto think about because we have constant total cost.",
    "start": "2118940",
    "end": "2128396"
  },
  {
    "text": "You could just plug this\nin with the Master method, or see that essentially\nwe're conserving mass. We started with log u mass.",
    "start": "2128396",
    "end": "2134640"
  },
  {
    "text": "We have two copies\nof log u over 2. That's the same total mass. So how many recursions do we do?",
    "start": "2134640",
    "end": "2141270"
  },
  {
    "text": "Well we do do log\nlog u recursions. The total number of leaves in\nthat recursion tree is log u.",
    "start": "2141270",
    "end": "2148080"
  },
  {
    "text": "Each of them, we pay constant. So this is log u, not log log u.",
    "start": "2148080",
    "end": "2158490"
  },
  {
    "text": "To get log log u, we need\nto change this 2 into a 1. We can only afford\none recursive call.",
    "start": "2158490",
    "end": "2164220"
  },
  {
    "text": "If we have two recursive calls,\nwe get logarithmic performance. If we have three recursive\ncalls, it's even worse.",
    "start": "2164220",
    "end": "2171240"
  },
  {
    "text": "Here, I would definitely\nuse the Master method. It's less obvious.",
    "start": "2171240",
    "end": "2176400"
  },
  {
    "text": "In this case, we get log u\nto the log base 2 of 3 power,",
    "start": "2176400",
    "end": "2184900"
  },
  {
    "text": "which is log u to the 1.6 or\nso, so both worse than log n.",
    "start": "2184900",
    "end": "2190514"
  },
  {
    "text": "This is strictly\nworse than log n. This is maybe just a little\nbit worse than log n, depending on how u relates to n.",
    "start": "2190514",
    "end": "2197156"
  },
  {
    "text": "OK, so we're not there yet. But we're on the right track. We have the right\nkind of structure. We have a problem of size u.",
    "start": "2197156",
    "end": "2203039"
  },
  {
    "text": "We split it up into square root\nof u sub problems of size u. From a data structures\nperspective,",
    "start": "2203040",
    "end": "2208200"
  },
  {
    "text": "this the first time we're\nusing divide and conquer for data structures. It's a little different\nfrom algorithms.",
    "start": "2208200",
    "end": "2213490"
  },
  {
    "text": "So that's how the data\nstructure is being laid out. But now we're worried about\nthe algorithms on those data",
    "start": "2213490",
    "end": "2219840"
  },
  {
    "text": "structures. Those, we can only afford t\nof u equals 1 times [? t of ?] squared of u plus order 1. Then we get log log u.",
    "start": "2219840",
    "end": "2226169"
  },
  {
    "text": "So, here we have\ntwo recursive calls. Somehow we have\nto have only one. Let's start by fixing insert.",
    "start": "2226169",
    "end": "2232020"
  },
  {
    "text": " Insert? ",
    "start": "2232020",
    "end": "2240671"
  },
  {
    "text": "No. Let's start by fixing successor. I think that will\nbe more intuitive.",
    "start": "2240671",
    "end": "2246231"
  },
  {
    "text": "Let's look at successor. Because successor\nis almost there. A lot of the time, it's just\ngoing to make this call,",
    "start": "2246231",
    "end": "2251650"
  },
  {
    "text": "and we're happy. The bad cases is when we need\nthat make both of these calls.",
    "start": "2251650",
    "end": "2257040"
  },
  {
    "text": "Then there's three\ntotal, very bad. How could I get\nrid of this call?",
    "start": "2257040",
    "end": "2264420"
  },
  {
    "text": "I was being all clever,\nthat the minimum element is the successor of\nnegative infinity. But that's actually\nnot the right idea.",
    "start": "2264420",
    "end": "2272214"
  },
  {
    "text": "Yeah. [? AUDIENCE: Catching ?] the\nminimum element in cluster i.",
    "start": "2272215",
    "end": "2277477"
  },
  {
    "text": "PROFESSOR: Store the minimum\nelement of cluster i. Yeah. In general, for every structure\nv, let's store the minimum.",
    "start": "2277477",
    "end": "2285690"
  },
  {
    "text": "Why not? We know how to\naugment structures. ",
    "start": "2285690",
    "end": "2291570"
  },
  {
    "text": "Here in 006, you\ntook an AVL tree, and you augment node to store\nthe sub-tree size of the node.",
    "start": "2291570",
    "end": "2297120"
  },
  {
    "text": "In this case, we're doing a\nsimilar kind of augmentation. Just for every structure, keep\ntrack of what the minimum is.",
    "start": "2297120",
    "end": "2304130"
  },
  {
    "text": "So that will be\nidea number four. ",
    "start": "2304130",
    "end": "2324297"
  },
  {
    "text": "I'm going to add something here. But for now, let's\nstore the minimums. So to do an insert into\nto structure v, item x,",
    "start": "2324297",
    "end": "2334165"
  },
  {
    "text": "first thing we'll do\nis just say, well, if x is-- let's see if\nit's the new minimum. Maybe x is smaller\nthan v dot min.",
    "start": "2334165",
    "end": "2342522"
  },
  {
    "text": "If that's the case, let's\njust set v dot min to x.",
    "start": "2342522",
    "end": "2348590"
  },
  {
    "text": "OK? And then, the rest is\nthe same, same insertion algorithm as over here,\nthese two recursive calls.",
    "start": "2348590",
    "end": "2357340"
  },
  {
    "text": "I just spent constant\nadditional time. And now every structure\nknows it's minimum. Again, ignore delete for now.",
    "start": "2357340",
    "end": "2362869"
  },
  {
    "text": "That's trickier. OK, now every structure\nknows its minimum,",
    "start": "2362870",
    "end": "2368619"
  },
  {
    "text": "which means we can replace\nthis call with just v dot",
    "start": "2368620",
    "end": "2373816"
  },
  {
    "text": "cluster i dot min. One down.",
    "start": "2373816",
    "end": "2379060"
  },
  {
    "text": "OK, so if we look at\nsuccessor, of v comma x.",
    "start": "2379060",
    "end": "2390330"
  },
  {
    "text": "I'm going to replace the last\nline, or next to last line with j equals v\ncluster i dot min.",
    "start": "2390330",
    "end": "2403180"
  },
  {
    "start": "2403180",
    "end": "2410069"
  },
  {
    "text": "So now, we're down\nto log u performance. We only have, at most,\ntwo recursive calls.",
    "start": "2410070",
    "end": "2415609"
  },
  {
    "text": "So that's partial progress. But we need another idea to\nget rid of the second one.",
    "start": "2415610",
    "end": "2423730"
  },
  {
    "text": "And the intuition here is that\nreally, only one of these call",
    "start": "2423730",
    "end": "2429540"
  },
  {
    "text": "should matter. OK, let's draw the big picture.",
    "start": "2429540",
    "end": "2435429"
  },
  {
    "text": "Here's what the recursive\nthing looks like. We've got v dot summary. ",
    "start": "2435429",
    "end": "2441340"
  },
  {
    "text": "Then we've got a\ncluster 0, cluster 1, cluster square\nroot of u minus 1.",
    "start": "2441340",
    "end": "2450900"
  },
  {
    "text": "Each of those is a\nrecursive structure. And we're also just storing\nthe min over here as a copy.",
    "start": "2450900",
    "end": "2457690"
  },
  {
    "text": " So when I do a query\nfor, I don't know,",
    "start": "2457690",
    "end": "2465820"
  },
  {
    "text": "the successor of this guy,\nthere's kind of two cases.",
    "start": "2465820",
    "end": "2471950"
  },
  {
    "text": "One situation is that I\nfind the successor somewhere in this interval.",
    "start": "2471950",
    "end": "2477619"
  },
  {
    "text": "In that case, I'm happy. Because I just need\nthis one recursive call. OK, the other case\nis that I don't",
    "start": "2477620",
    "end": "2483890"
  },
  {
    "text": "find what I'm looking for here. Then I have to do a\nsuccessor up here.",
    "start": "2483890",
    "end": "2489030"
  },
  {
    "text": "And then I'm done. Then I can teleport into\nwhatever cluster it is. And I've stored the min by now.",
    "start": "2489030",
    "end": "2494710"
  },
  {
    "text": "So that's constant time to\njump into the right spot in the cluster.",
    "start": "2494710",
    "end": "2500880"
  },
  {
    "text": "So either I find what\nI'm looking for here, or I find what I'm\nlooking for here.",
    "start": "2500880",
    "end": "2506295"
  },
  {
    "text": "What would be\nreally nice is if I could tell ahead of time\nwhich one is going to succeed. Because then, if I know this\nis not going to find anything,",
    "start": "2506295",
    "end": "2513710"
  },
  {
    "text": "I might as well just\ngo immediately up here, and look at the successor\nin the summary structure.",
    "start": "2513710",
    "end": "2518859"
  },
  {
    "text": "If I know I'm going to\nfind something here, I'll just do the successor here. And I'm done. If I could just\nget away with one",
    "start": "2518859",
    "end": "2524810"
  },
  {
    "text": "or the other of these calls,\nnot both, I'd be very happy. How could I tell that?",
    "start": "2524810",
    "end": "2530072"
  },
  {
    "text": "Yeah. AUDIENCE: Store the max. PROFESSOR: Store the max.",
    "start": "2530072",
    "end": "2535510"
  },
  {
    "text": "Store the min and the max. Why not? OK, I just need a\nsimilar line here.",
    "start": "2535510",
    "end": "2541830"
  },
  {
    "text": "If x is bigger than v\ndot max, change the max. ",
    "start": "2541830",
    "end": "2551090"
  },
  {
    "text": "So now, I've augmented\nmy data structure to have the min and\nmax at every level. And what's going on here\nis, I won't find an answer",
    "start": "2551090",
    "end": "2559690"
  },
  {
    "text": "if I am greater than\nor equal to the maximum within this cluster. That's how I tell.",
    "start": "2559690",
    "end": "2566579"
  },
  {
    "text": "If I'm equal to the max,\nor if I'm beyond the max, if all the items are over here,\nthe max will be to my left.",
    "start": "2566580",
    "end": "2572859"
  },
  {
    "text": "And then I know I will\nfail within the cluster. So I might as well just go up\nto summary and do it there.",
    "start": "2572860",
    "end": "2578732"
  },
  {
    "text": "On the other hand, if\nI'm less than the max, then I'm guaranteed I will\nfind something in this cluster. And so I can just\nsearch in there.",
    "start": "2578732",
    "end": "2585630"
  },
  {
    "text": "So all I need to\ndo-- I'll probably have to rewrite this slightly. ",
    "start": "2585630",
    "end": "2592420"
  },
  {
    "text": "If x is-- not x, close.",
    "start": "2592420",
    "end": "2605980"
  },
  {
    "text": "I'm going to mimic this\ncode a little bit, at least the first line is going\nto be i equals high of x.",
    "start": "2605980",
    "end": "2615589"
  },
  {
    "text": "And now, that's the\ncluster I'm starting in. And I want to look at the\nmaximum of that cluster.",
    "start": "2615590",
    "end": "2621150"
  },
  {
    "start": "2621150",
    "end": "2638630"
  },
  {
    "text": "So I'm looking at v\ndot cluster i dot max. And I want to know,\nis x before that?",
    "start": "2638630",
    "end": "2644329"
  },
  {
    "text": "Now within that cluster,\nx is known as low of x. So I compare low of x to\ncluster i's maximum element.",
    "start": "2644330",
    "end": "2652520"
  },
  {
    "text": "If we're strictly to\nthe left, then there is a successor guaranteed\nwithin that substructure.",
    "start": "2652520",
    "end": "2658020"
  },
  {
    "text": "And so, I should do this line.  I wish I could copy paste.",
    "start": "2658020",
    "end": "2664310"
  },
  {
    "text": "But I will copy by hand.",
    "start": "2664310",
    "end": "2670220"
  },
  {
    "text": "Successor within v dot\ncluster i, of low of x.",
    "start": "2670220",
    "end": "2683692"
  },
  {
    "text": "OK, then I've found the\nitem I'm looking for. ",
    "start": "2683692",
    "end": "2689140"
  },
  {
    "text": "Else, I'm beyond the max, I\nknow this is the wrong cluster.",
    "start": "2689140",
    "end": "2696760"
  },
  {
    "text": "And so I should immediately\ndo these two lines, well, except I've made the\nsecond line use the min.",
    "start": "2696760",
    "end": "2703400"
  },
  {
    "text": "So it will only be one recursive\ncall, followed by a min. ",
    "start": "2703400",
    "end": "2709790"
  },
  {
    "text": "OK, so this is going to be i\nequals the successor within v",
    "start": "2709790",
    "end": "2721110"
  },
  {
    "text": "dot summary of high of x.",
    "start": "2721110",
    "end": "2726695"
  },
  {
    "start": "2726695",
    "end": "2740460"
  },
  {
    "text": "And then j is that\nline successor",
    "start": "2740460",
    "end": "2749030"
  },
  {
    "text": "within-- oh, sorry--\nthe line that I used to have here, which\nis going to be v cluster i",
    "start": "2749030",
    "end": "2755540"
  },
  {
    "text": "dot min. ",
    "start": "2755540",
    "end": "2760830"
  },
  {
    "text": "OK, and then, in both\ncases, I return index of ij.",
    "start": "2760830",
    "end": "2766670"
  },
  {
    "start": "2766670",
    "end": "2772030"
  },
  {
    "text": "OK, so we're doing essentially\nthe same logic as over here. Although I've replaced\nthe step with the min,",
    "start": "2772030",
    "end": "2777154"
  },
  {
    "text": "to get rid of that\nrecursive call. But I'm really only doing\none or the other of these, using max to distinguish.",
    "start": "2777155",
    "end": "2783380"
  },
  {
    "text": "If I'm left of the\nmax, I do the successor within cluster high of x. If I'm right of the max,\nthen I do the successor",
    "start": "2783380",
    "end": "2793796"
  },
  {
    "text": "immediately in\nsummary structure. Because I know this won't\nfind anything useful. And then I find the min within\nthat non-empty structure.",
    "start": "2793796",
    "end": "2803000"
  },
  {
    "text": "And in both cases, ij is\nthe element I'm looking for. I put it back\ntogether with index. ",
    "start": "2803000",
    "end": "2810330"
  },
  {
    "text": "Clear? What's the running\ntime of successor now?",
    "start": "2810330",
    "end": "2817150"
  },
  {
    "text": "Log log u. ",
    "start": "2817150",
    "end": "2822230"
  },
  {
    "text": "Awesome. We've finished successor. Sadly, we have not\nfinished insert.",
    "start": "2822230",
    "end": "2829390"
  },
  {
    "text": "Insert still takes log u time. But, b progress. Maybe your routing table\ndoesn't change that often,",
    "start": "2829390",
    "end": "2836150"
  },
  {
    "text": "so you can afford to pay\nsome extra time for insert, as long as you can route\npackets really fast,",
    "start": "2836150",
    "end": "2841790"
  },
  {
    "text": "as long as you can find\nwhere something belongs, the successor in log log u time. But for kicks, let's do\ninsert in log log u as well.",
    "start": "2841790",
    "end": "2851730"
  },
  {
    "text": "This is going to\nbe a little harder, or I would say a\nmore surprising idea.",
    "start": "2851730",
    "end": "2859070"
  },
  {
    "text": " This may be-- ",
    "start": "2859070",
    "end": "2875681"
  },
  {
    "text": "I don't have a great\nintuition for this step. I'm thinking. ",
    "start": "2875681",
    "end": "2881329"
  },
  {
    "text": "But again, most of the time,\nthis should be fine, right? Most of the time, we insert into\ncluster high of x, low of x,",
    "start": "2881330",
    "end": "2888720"
  },
  {
    "text": "and we're done. As long as there is something\nalready in that cluster,",
    "start": "2888720",
    "end": "2894100"
  },
  {
    "text": "we don't need to update\nthe summary structure. As long as high of x has already\nbeen inserted into the summary",
    "start": "2894100",
    "end": "2899380"
  },
  {
    "text": "structure, we can get away\nwith just this first step. The tricky part is detecting.",
    "start": "2899380",
    "end": "2905109"
  },
  {
    "text": "How would we know? Well, that's not enough\njust to detect it.",
    "start": "2905110",
    "end": "2910210"
  },
  {
    "text": "If high of x is not\nin v dot summary, we have to do this insert. We can't get away with it.",
    "start": "2910210",
    "end": "2917420"
  },
  {
    "text": "But that's kind of rare. That only happens\nthe very first time you insert into that cluster. Every subsequent time, it's\ngoing to be really cheap.",
    "start": "2917420",
    "end": "2924080"
  },
  {
    "text": "We just have to do this. It's easy enough to keep track\nof whether a cluster is empty.",
    "start": "2924080",
    "end": "2931589"
  },
  {
    "text": "For example, we're\nstoring the min. We can say v dot min is\nnone, special value, whenever",
    "start": "2931590",
    "end": "2937910"
  },
  {
    "text": "the structure v is empty. But we still have this problem,\nthat the first time we insert",
    "start": "2937910",
    "end": "2943120"
  },
  {
    "text": "into a cluster, it's expensive. Because we have to do this. And we have to do this.",
    "start": "2943120",
    "end": "2949390"
  },
  {
    "text": "How could we avoid, in the\ncase where a cluster is empty--",
    "start": "2949390",
    "end": "2957109"
  },
  {
    "text": "remember, an overall\nstructure looks like this. We can tell that it's empty\nby saying min equals none,",
    "start": "2957110",
    "end": "2962230"
  },
  {
    "text": "let's say. What could I do? Sorry, there's also a max now.",
    "start": "2962230",
    "end": "2967363"
  },
  {
    "text": " What could I do to\nspeed up inserting",
    "start": "2967363",
    "end": "2975140"
  },
  {
    "text": "into an empty cluster? Because I'm first\ngoing to have to insert into the empty cluster. Then I'm going to have to\nanswer into the summary.",
    "start": "2975140",
    "end": "2981031"
  },
  {
    "text": "I can't get away from this. So I'd like this to become\ncheap, in the special case when",
    "start": "2981031",
    "end": "2986354"
  },
  {
    "text": "this cluster is empty. ",
    "start": "2986354",
    "end": "2993050"
  },
  {
    "text": "Yeah. AUDIENCE: Lazy propogation. PROFESSOR: Lazy propagation--\nyou want to elaborate? AUDIENCE: Yeah.",
    "start": "2993050",
    "end": "2998780"
  },
  {
    "text": "We mark the place we\nwant to insert in.",
    "start": "2998780",
    "end": "3004660"
  },
  {
    "text": "And then we will take it down\nwhenever we [? insert ?] there. PROFESSOR: Good. So when I insert into\nan empty structure,",
    "start": "3004660",
    "end": "3011690"
  },
  {
    "text": "I'm just going to have a little\nlazy field, or something. And I'll put the item in there.",
    "start": "3011690",
    "end": "3018170"
  },
  {
    "text": "And then the next\ntime I insert into it, maybe I'll carry it\ndown a little bit. That actually works.",
    "start": "3018170",
    "end": "3024120"
  },
  {
    "text": "And that was the original\nvan Emde Boas structure, [? I ?] [? learned ?]\n[? recently. ?] So that works.",
    "start": "3024120",
    "end": "3031390"
  },
  {
    "text": "But it's a little more\ncomplicated than the solution I have in mind. So I'm going to unify that lazy\nfield with the minimum field.",
    "start": "3031390",
    "end": "3041940"
  },
  {
    "text": "Say, when I insert\ninto a structure, if there's nothing\nhere, I'm just going to put the item\nthere, and not recurse.",
    "start": "3041940",
    "end": "3049370"
  },
  {
    "text": "I just am not going to store\nthe minimum item recursively. Definitely frisbee.",
    "start": "3049370",
    "end": "3055030"
  },
  {
    "text": " So that's the last\nidea, pretty much.",
    "start": "3055030",
    "end": "3062230"
  },
  {
    "start": "3062230",
    "end": "3071040"
  },
  {
    "text": "Idea number five is, don't\nstore the min recursively.",
    "start": "3071040",
    "end": "3078335"
  },
  {
    "start": "3078335",
    "end": "3083880"
  },
  {
    "text": "This is effectively\nequivalent to lazy. But we're actually\njust never going to get around to\nmoving this guy down.",
    "start": "3083880",
    "end": "3090890"
  },
  {
    "text": "Just leave it there. First, if the min field is\nblank, store the item there. Yeah.",
    "start": "3090890",
    "end": "3096106"
  },
  {
    "text": "AUDIENCE: What do you mean\nby moving the guy down? PROFESSOR: Don't worry\nabout moving the guy down. We're not going to do it.",
    "start": "3096106",
    "end": "3101711"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: But in\ngeneral, moving down means, when I want\nto insert an item,",
    "start": "3101711",
    "end": "3106980"
  },
  {
    "text": "I have to move it down\ninto its sub cluster. So I want to insert\nx into the cluster,",
    "start": "3106980",
    "end": "3114020"
  },
  {
    "text": "high of x with low of\nx, that recursive call. That's moving it down. I'm not going to do that.",
    "start": "3114020",
    "end": "3119320"
  },
  {
    "text": "If the structure\nis empty, I'm going to set v dot min equal\nto x, and then stop.",
    "start": "3119320",
    "end": "3126910"
  },
  {
    "text": "Let me illustrate with\nsome code, maybe over here.",
    "start": "3126910",
    "end": "3138724"
  },
  {
    "start": "3138725",
    "end": "3164960"
  },
  {
    "text": "Here's what I mean. If v dot min is special\nnone value-- use",
    "start": "3164960",
    "end": "3170740"
  },
  {
    "text": "Python notation here--\nthen I'm just going to set v dot min equal to x. I should also set v\ndot max equal to x.",
    "start": "3170740",
    "end": "3178470"
  },
  {
    "text": "Because I want to keep\ntrack of the maximum. And then, stop. Return.",
    "start": "3178470",
    "end": "3183480"
  },
  {
    "text": "That's all I will\ndo for inserting into an empty structure, is\nstick it in the max field. ",
    "start": "3183480",
    "end": "3191040"
  },
  {
    "text": "OK, this may seem\nlike a minor change. But it's going to\nmake this cheap.",
    "start": "3191040",
    "end": "3196550"
  },
  {
    "text": "So the rest of the algorithm\nis going to be pretty similar. There's a couple\nannoying special cases,",
    "start": "3196550",
    "end": "3203700"
  },
  {
    "text": "which is, we have to\nkeep the min up to date. And we have to keep the\nmax up to date, in general.",
    "start": "3203700",
    "end": "3208925"
  },
  {
    "text": " This one is easy. We just set v dot\nmax equal to x.",
    "start": "3208925",
    "end": "3215881"
  },
  {
    "text": "Because we're not doing\nanything fancy with max. Min is a little special. Because if we're\ninserting an item smaller",
    "start": "3215881",
    "end": "3223150"
  },
  {
    "text": "than the current minimum, then\nreally x belongs in the slot. And then whatever\nwas in here needs",
    "start": "3223150",
    "end": "3229670"
  },
  {
    "text": "to be recursively inserted. OK, so I'm going to say\nswap x with v dot min.",
    "start": "3229670",
    "end": "3239044"
  },
  {
    "text": "So I'm going to put x\ninto the v dot min slot. And I'm going to pull out\nwhatever item was in there and call it x now.",
    "start": "3239044",
    "end": "3244800"
  },
  {
    "text": "And now my remaining\ngoal is to insert x into the rest of the structure. There's only one item that\ngets this freedom of not",
    "start": "3244800",
    "end": "3252219"
  },
  {
    "text": "being recursively stored. And it's always going\nto be the minimum one. So this way, the new\nvalue x goes there.",
    "start": "3252219",
    "end": "3258524"
  },
  {
    "text": "Whatever it used to be there now\nhas to be recursively inserted. Because every item\nexcept the minimum, we're going to\nrecursively insert.",
    "start": "3258524",
    "end": "3265660"
  },
  {
    "text": "So the rest is\npretty much the same. But we're going to,\ninstead of always inserting",
    "start": "3265660",
    "end": "3273500"
  },
  {
    "text": "into the summary\nstructure, we're going to see whether\nit's necessary. Because we know how to do that.",
    "start": "3273500",
    "end": "3279369"
  },
  {
    "text": "We just look at a\ncluster high of x. And we see, is it empty?",
    "start": "3279370",
    "end": "3287720"
  },
  {
    "text": "Cluster high of x-- and empty\nmeans its minimum is none.",
    "start": "3287720",
    "end": "3295810"
  },
  {
    "text": " So we're going to--\nin fact, the next line",
    "start": "3295810",
    "end": "3302859"
  },
  {
    "text": "after this one is going\nto be insert v cluster",
    "start": "3302860",
    "end": "3309670"
  },
  {
    "text": "high of x, comma low of x.",
    "start": "3309670",
    "end": "3321270"
  },
  {
    "text": "All right, that's this line. We're always going to do that. ",
    "start": "3321270",
    "end": "3327680"
  },
  {
    "text": "And in the special case,\nwhere there was not previously nothing in v cluster\nhigh of x, we",
    "start": "3327680",
    "end": "3332810"
  },
  {
    "text": "need to update the\nsummary structure. And we do that with this line.",
    "start": "3332810",
    "end": "3338550"
  },
  {
    "text": "So I'm going to insert into\nv dot summary high of x.",
    "start": "3338550",
    "end": "3354490"
  },
  {
    "text": " But I'm only doing that in\nthe case when I need to.",
    "start": "3354490",
    "end": "3360736"
  },
  {
    "text": "If it was already non-empty, I\nknow this has already happened. So I don't need to bother\nwith that insertion.",
    "start": "3360737",
    "end": "3366640"
  },
  {
    "text": "OK, this is a weird algorithm. Because it doesn't\nlook much better. In the worst case, we're doing\ntwo recursive calls to insert.",
    "start": "3366640",
    "end": "3375109"
  },
  {
    "text": "But I claim this runs\nin log log u time. Why? ",
    "start": "3375110",
    "end": "3385152"
  },
  {
    "text": "Yeah. AUDIENCE: Because when we\nupdate the v dot summary,",
    "start": "3385152",
    "end": "3390564"
  },
  {
    "text": "we [? just ?] [? have the ?]\n[? first ?] [? line. ?] PROFESSOR: Good. Yeah. In the case when I have to\ndo this summary insertion,",
    "start": "3390564",
    "end": "3396540"
  },
  {
    "text": "I know this guy was empty. Cluster high of x was empty. So this call is just going\nto do these two lines.",
    "start": "3396540",
    "end": "3403640"
  },
  {
    "text": "Because I optimized\nthe case of empty-- when a structure is empty,\nI spend constant time, no recursive calls.",
    "start": "3403640",
    "end": "3409960"
  },
  {
    "text": "That means in the case when\ncluster high of x is empty, and I have to pay to insert\ninto the summary structure,",
    "start": "3409960",
    "end": "3415450"
  },
  {
    "text": "I know my second call is\ngoing to be free, only take constant time. So either I do this, in which\ncase this takes constant time,",
    "start": "3415450",
    "end": "3422510"
  },
  {
    "text": "or I don't do this, in which\ncase I make one recursive call. In both cases, I really am\nonly making one recursive call.",
    "start": "3422510",
    "end": "3430690"
  },
  {
    "text": "OK, so this runs in log log u.",
    "start": "3430690",
    "end": "3439560"
  },
  {
    "text": "Because I get the t of u\nequals 1 times square root of t of u plus\norder 1 recurrence. All the work I'm doing\nhere is constant time,",
    "start": "3439560",
    "end": "3448404"
  },
  {
    "text": "other than the recursive calls.  Question? AUDIENCE: So when we\ninsert the first time,",
    "start": "3448404",
    "end": "3456871"
  },
  {
    "text": "we don't update v dot summary? PROFESSOR: When I insert into\na completely empty structure,",
    "start": "3456872",
    "end": "3462480"
  },
  {
    "text": "we don't update summary at all. That's right. We just store it in the\nmin, and we're done. AUDIENCE: Oh.",
    "start": "3462480",
    "end": "3467760"
  },
  {
    "text": "So then, if you were to\n[? call ?] the successor, and you--",
    "start": "3467760",
    "end": "3472900"
  },
  {
    "text": "PROFESSOR: Good. Yeah. The successor algorithm\nis currently incorrect. Thank you.",
    "start": "3472900",
    "end": "3478146"
  },
  {
    "text": "Here's some frisbees for that\nquestion and the last answer. ",
    "start": "3478146",
    "end": "3485230"
  },
  {
    "text": "Yeah. This code is now slightly wrong. Because sometimes I'm storing\nelements in v dot min.",
    "start": "3485230",
    "end": "3492480"
  },
  {
    "text": "And successor is just\ncompletely ignoring them. So it's not going\nto find those items.",
    "start": "3492480",
    "end": "3498040"
  },
  {
    "text": "Luckily, it's a very simple fix. ",
    "start": "3498040",
    "end": "3506359"
  },
  {
    "text": "Out of room, but please\ninsert right in here. If x is less v dot\nmin, return v dot min.",
    "start": "3506360",
    "end": "3521150"
  },
  {
    "text": "That's all we need to do. The min is special. Because we're not\nstoring it recursively.",
    "start": "3521150",
    "end": "3526730"
  },
  {
    "text": "And so, we can't rely on all\nof our recursive structures. We can't rely on cluster i. We can't rely on summary, on\nreporting about v dot min.",
    "start": "3526730",
    "end": "3534509"
  },
  {
    "text": "v dot min is just a\nspecial item sitting there. It's represented nowhere else. ",
    "start": "3534510",
    "end": "3541560"
  },
  {
    "text": "But we can check. Because it's the\nminimum element, and we're looking\nfor successors, it's really easy to\ncheck for whether it's",
    "start": "3541560",
    "end": "3546940"
  },
  {
    "text": "the item we're looking for. Because it's the smallest one. If we're smaller than it, then\nthat's clearly the successor.",
    "start": "3546940",
    "end": "3553372"
  },
  {
    "text": "OK, so in that case, we\njust spent constant time. So it actually speeds up some\nsituations for successor.",
    "start": "3553372",
    "end": "3558520"
  },
  {
    "text": "We're not exploiting that here. It doesn't help much\nin the worst case. But now, it should be correct. Hopefully, you're happy.",
    "start": "3558520",
    "end": "3565322"
  },
  {
    "text": "Any other questions?  So at this point, we have what\nI will call a van Emde Boas.",
    "start": "3565322",
    "end": "3573470"
  },
  {
    "text": "This last version-- we can do\ninsert and successor in log log u time. ",
    "start": "3573470",
    "end": "3581099"
  },
  {
    "text": "Yeah, sorry. I modified the wrong\nsuccessor algorithm, didn't I? I meant to modify this one.",
    "start": "3581100",
    "end": "3586910"
  },
  {
    "text": "This is the fast one. So please put that code here.",
    "start": "3586910",
    "end": "3593300"
  },
  {
    "text": "That's the log log u\nversion of successor. We just added this\nconstant time check.",
    "start": "3593300",
    "end": "3598790"
  },
  {
    "text": "And now this runs\nin log log u time. The key idea here was\nif we store the max, then we know which of the two\nrecursive calls we need to do.",
    "start": "3598790",
    "end": "3606780"
  },
  {
    "text": "If we store the min,\nthis doesn't end up being a recursive call. So that's very clean. With insert, we needed this\ntrickier idea that the min,",
    "start": "3606780",
    "end": "3613644"
  },
  {
    "text": "we're not even going to\nrecursively represent. We'll just keep it there. That requires this extra\nlittle check for successor.",
    "start": "3613644",
    "end": "3620339"
  },
  {
    "text": "But it allows us to\ndo insert cheaply in all cases-- cheap meaning\nonly one recursive call.",
    "start": "3620340",
    "end": "3627530"
  },
  {
    "text": "Either we need to update\nthe summary structure, in which case that\nthing was empty, and so we can think\nof that cluster--",
    "start": "3627530",
    "end": "3634720"
  },
  {
    "text": "so we have this special\ncase of inserting into an empty cluster,\nwhich is super cheap, or most of the time, you imagine\nthat the cluster was already",
    "start": "3634720",
    "end": "3642900"
  },
  {
    "text": "non-empty. And so we don't need to\nupdate the summary structure. And then we just\ndo this recursion.",
    "start": "3642900",
    "end": "3648109"
  },
  {
    "text": "So in all cases,\neverything is cheap. Now the one thing I've\nbeen avoiding is delete.",
    "start": "3648110",
    "end": "3654940"
  },
  {
    "text": "Yeah, question. AUDIENCE: [INAUDIBLE] If x\nis greater than [? v ?] max, [? we ?] [? swap ?] [? x ?]\n[? with ?] [? v ?] [? max? ?]",
    "start": "3654940",
    "end": "3663059"
  },
  {
    "text": "PROFESSOR: So if x is\ngreater than v max, I'm just going to update v max.",
    "start": "3663060",
    "end": "3668730"
  },
  {
    "text": "V max is stored recursively. We're not doing anything\nfancy with v max. And we had, at some\npoint, a similar line.",
    "start": "3668730",
    "end": "3675650"
  },
  {
    "text": "So this is just updating v max. Yeah, nothing special there. In your problem set, you'll look\nat a more symmetric version,",
    "start": "3675650",
    "end": "3683100"
  },
  {
    "text": "where you don't recursively\nstore min and max. It works about the same. But in some ways, the\ncode is actually prettier.",
    "start": "3683100",
    "end": "3690430"
  },
  {
    "text": "So you'll get to do that. Other questions?  All right.",
    "start": "3690430",
    "end": "3697900"
  },
  {
    "text": "So, delete. We have insert and successor. And through all these\nsteps, it would actually",
    "start": "3697900",
    "end": "3704090"
  },
  {
    "text": "be very hard to do delete. It turns out, at this\npoint, delete is no problem.",
    "start": "3704090",
    "end": "3710810"
  },
  {
    "text": "So let me give you\nsome delete codes. ",
    "start": "3710810",
    "end": "3741650"
  },
  {
    "text": "It's a little bit long.  Maybe I'll start with\na high level picture,",
    "start": "3741650",
    "end": "3749401"
  },
  {
    "text": "sort of the main cases. ",
    "start": "3749401",
    "end": "3756260"
  },
  {
    "text": "Deleting the min is a little bit\nspecial, as you might imagine. That element is different\nfrom every other element. So if x equals min, we're\ngoing to do something else.",
    "start": "3756260",
    "end": "3764660"
  },
  {
    "text": "But let me specify that later. Let's get to the bulk\nof the code, which is we're going to delete low\nof x from cluster high of x.",
    "start": "3764660",
    "end": "3790220"
  },
  {
    "text": "That's the obvious\nrecursion to do. This is essentially the\nreverse of insert over here.",
    "start": "3790220",
    "end": "3797490"
  },
  {
    "text": "The first thing we\ndo is undo this. In all cases, insert\nwas doing that. So in all cases,\ndelete has to do that, other than the\nspecial case of the min.",
    "start": "3797490",
    "end": "3806730"
  },
  {
    "text": "And then, we need to\ndo the inverse of this. So if that was the\nlast item, then we",
    "start": "3806730",
    "end": "3813580"
  },
  {
    "text": "need to delete from\nthe summary structure. So it's actually\npretty symmetric,",
    "start": "3813580",
    "end": "3820250"
  },
  {
    "text": "other than the tiny details. So after we delete, we can\ncheck, is that structure empty.",
    "start": "3820250",
    "end": "3828300"
  },
  {
    "text": "Because then, the\nmin would equal none. OK.",
    "start": "3828300",
    "end": "3835050"
  },
  {
    "text": "If that's the case, we delete\nfrom the summary structure. ",
    "start": "3835050",
    "end": "3853946"
  },
  {
    "text": "OK.  Cool.",
    "start": "3853946",
    "end": "3860120"
  },
  {
    "text": "And there is a bit\nof a special case at the end, which is when we\ndeleted the maximum element.",
    "start": "3860120",
    "end": "3866985"
  },
  {
    "text": " OK, so I need to fill these in.",
    "start": "3866985",
    "end": "3872779"
  },
  {
    "text": " And it's important that\nthese are filled in right.",
    "start": "3872780",
    "end": "3879980"
  },
  {
    "text": "Because in some\nsituations here, we are making two recursive calls. But again, we'd like it to\nbe, when we do both calls,",
    "start": "3879980",
    "end": "3888000"
  },
  {
    "text": "we want one of them to be cheap. Now this one's\nhard to make cheap. So when we delete from\nthe summary structure,",
    "start": "3888000",
    "end": "3894150"
  },
  {
    "text": "we want this to delete to\nhave taken only constant time, no recursions.",
    "start": "3894150",
    "end": "3899220"
  },
  {
    "text": "And that's going to\ncorrespond to this case. Because if we made\nthe cluster empty,",
    "start": "3899220",
    "end": "3904700"
  },
  {
    "text": "that means we deleted\nthe last item. What's the last item? Has to be v dot min.",
    "start": "3904700",
    "end": "3910630"
  },
  {
    "text": "If you have a size\n1 structure, it's always because that\nitem is in v dot min, everything else is empty.",
    "start": "3910630",
    "end": "3916160"
  },
  {
    "text": "So that's the case of\ndeleting v dot min. So we want this case to\ntake constant time when it's",
    "start": "3916160",
    "end": "3922660"
  },
  {
    "text": "the last item we're deleting. So let's fill that in a little.",
    "start": "3922660",
    "end": "3930550"
  },
  {
    "start": "3930550",
    "end": "3938032"
  },
  {
    "text": "Let's see if I can fit it in. ",
    "start": "3938032",
    "end": "3989090"
  },
  {
    "text": "This is code that\nturns out to work in this if x equals v dot min. It's a little bit subtle.",
    "start": "3989090",
    "end": "3996200"
  },
  {
    "text": "But the key thing to check\nhere is, we want to know, is this the last item.",
    "start": "3996200",
    "end": "4001810"
  },
  {
    "text": "And one way to do that is to\nlook at the summary structure, and say, do you have\nany non-empty clusters?",
    "start": "4001810",
    "end": "4008142"
  },
  {
    "text": "If you don't have any\nnon-empty clusters, that means your min is none. And that means, the only thing\nkeeping the structure non-empty",
    "start": "4008142",
    "end": "4015460"
  },
  {
    "text": "is the minimum element. That's stored in v dot min. So in that case, that's\nthe one situation when v dot min becomes none.",
    "start": "4015460",
    "end": "4023070"
  },
  {
    "text": "We never set v dot min equals\nnone in the other algorithms. Because initially\neverything is none.",
    "start": "4023070",
    "end": "4030589"
  },
  {
    "text": "But when we're inserting,\nwe never empty a structure. Now we're doing delete. This is the one\nsituation when v dot",
    "start": "4030590",
    "end": "4036440"
  },
  {
    "text": "min becomes none from scratch. In that case, no\nrecursive calls.",
    "start": "4036440",
    "end": "4041780"
  },
  {
    "text": "So that means this\nalgorithm is efficient. Because if I had to delete\nfrom the summary structure, this only had a single item,\nwhich is this situation.",
    "start": "4041780",
    "end": "4049610"
  },
  {
    "text": "Then I just set v dot\nmin equals to none. And I'm done. So this will, overall,\nrun in log log u time.",
    "start": "4049610",
    "end": "4055160"
  },
  {
    "start": "4055160",
    "end": "4060170"
  },
  {
    "text": "Now, it could be we're\ndeleting the min, but it was not the only item. So that's this situation.",
    "start": "4060170",
    "end": "4066570"
  },
  {
    "text": "In that situation,\nwe want to find out what the min actually is. Right? We just deleted the min.",
    "start": "4066570",
    "end": "4072487"
  },
  {
    "text": "We want to put\nsomething in v dot min. We can't set it to none. Because that indicates the\nwhole structure is empty. So we have to recursively rip\nout the new minimum out item.",
    "start": "4072487",
    "end": "4081190"
  },
  {
    "text": "Because it should not be\nrecursively stored anymore. And then we're going to\nstick it into v dot min.",
    "start": "4081190",
    "end": "4086200"
  },
  {
    "text": "So now, finding minimum items\nis actually pretty easy. We just looked at the\nfirst non-empty structure.",
    "start": "4086200",
    "end": "4092990"
  },
  {
    "text": "And we looked at\nthe-- I think I'm missing-- oh, v dot\ncluster i min, I guess,",
    "start": "4092990",
    "end": "4099149"
  },
  {
    "text": "closed parenthesis. That is the minimum item\nin the first cluster.",
    "start": "4099149",
    "end": "4106299"
  },
  {
    "text": "So I want to\nrecursively delete it. So I'm setting x to that thing. And then I'm going to do\nall this code, which will",
    "start": "4106300",
    "end": "4112853"
  },
  {
    "text": "delete x from that structure. And then-- I mean, I'm\ndoing it all right here.",
    "start": "4112853",
    "end": "4118770"
  },
  {
    "text": "But then, I'm going to set\nv dot min to be that value. So then v dot min\nhas a new value.",
    "start": "4118770",
    "end": "4123899"
  },
  {
    "text": "Because I deleted the old one. And it's no longer\nrecursively stored. I don't want two copies\nof x floating around.",
    "start": "4123899",
    "end": "4131109"
  },
  {
    "text": "So that's why I do, even in this\nif case, I do all these steps.",
    "start": "4131109",
    "end": "4136939"
  },
  {
    "text": "Cool? You can see delete--\nis that a question? AUDIENCE: [INAUDIBLE]",
    "start": "4136939",
    "end": "4142832"
  },
  {
    "text": "PROFESSOR: Oh, why did\nI set v dot max to none? AUDIENCE: Because\n[? that's the ?] all [? these ?] [INAUDIBLE]\n[? x ?] equals v dot max,",
    "start": "4142832",
    "end": "4149790"
  },
  {
    "text": "the last time. AUDIENCE: [? Do you ?]\n[? find v dot max? ?] PROFESSOR: Oh, right. I'm not done yet. I haven't specified\nwhat to do here.",
    "start": "4149790",
    "end": "4155987"
  },
  {
    "text": "OK, you really want to know? OK.",
    "start": "4155988",
    "end": "4161140"
  },
  {
    "text": "Let's go somewhere else. I have enough room, I think.",
    "start": "4161140",
    "end": "4167989"
  },
  {
    "text": "Eh, maybe I can squeeze it in. It's going to be super compact.",
    "start": "4167990",
    "end": "4173049"
  },
  {
    "text": "So, when x equals v dot\nmax, there are two cases. ",
    "start": "4173050",
    "end": "4183672"
  },
  {
    "text": "So max is a little different. We just need to\nkeep it up to date. So it's not that hard.",
    "start": "4183672",
    "end": "4189109"
  },
  {
    "text": "We don't have to do\nany recursive magic. ",
    "start": "4189109",
    "end": "4209600"
  },
  {
    "text": "Well, I need another line. Sorry. Let me go up to the other board.",
    "start": "4209600",
    "end": "4215039"
  },
  {
    "start": "4215040",
    "end": "4254066"
  },
  {
    "text": "OK, I think that's the\ncomplete delete code. You asked for it. You've got it.",
    "start": "4254066",
    "end": "4259150"
  },
  {
    "text": "So, at this point,\nwe have just deleted the max, which means we\nneed to find, basically,",
    "start": "4259150",
    "end": "4266310"
  },
  {
    "text": "the predecessor of x. But we can't afford\na recursive call. I mean, that's OK. It's just, we're trying to\nfind the max in what remains.",
    "start": "4266310",
    "end": "4273990"
  },
  {
    "text": "Imagine v dot max is just wrong. So we've got to set\nit from scratch. It's not that hard to do.",
    "start": "4273990",
    "end": "4279409"
  },
  {
    "text": "Basically, we want to take\nthe last non-empty structure. That would v dot\nsummary dot max,",
    "start": "4279410",
    "end": "4286430"
  },
  {
    "text": "and then find the last\nitem in that cluster. OK, so cluster i is the\nlast one for v dot summary.",
    "start": "4286430",
    "end": "4294030"
  },
  {
    "text": "And then we look v dot\ncluster of i dot max. And we combine it with i. That gives us the name of\nthat item in the last cluster,",
    "start": "4294030",
    "end": "4302670"
  },
  {
    "text": "the last non-empty cluster. But there's a\nspecial case, which is maybe this returns none.",
    "start": "4302670",
    "end": "4308640"
  },
  {
    "text": "Maybe there actually is\nnothing in v dot summary. That means we just deleted\nthe last item, I guess.",
    "start": "4308640",
    "end": "4315110"
  },
  {
    "text": "Or there's only one left. We deleted the\nnext to last time. Now there's only one item\nleft, namely v dot min.",
    "start": "4315110",
    "end": "4322190"
  },
  {
    "text": "So we set v dot max\nequal to v dot min. So that's a special case. But most the time,\nyou're just doing",
    "start": "4322190",
    "end": "4328170"
  },
  {
    "text": "a couple dot max's,\nand you're done. So that's how you\nmaintain the maxes, even when you're deleting.",
    "start": "4328170",
    "end": "4334080"
  },
  {
    "text": "And unless I made an error,\nI think all these algorithms work together. You're going to insert,\ndelete, and successor.",
    "start": "4334080",
    "end": "4339590"
  },
  {
    "text": "And symmetrically, you can\ndo predecessor in log log u time per operation, super fast.",
    "start": "4339590",
    "end": "4345220"
  },
  {
    "text": " Let me tell you a\ncouple other things.",
    "start": "4345220",
    "end": "4351159"
  },
  {
    "text": "One is, there's a\nmatching lower bound. Log log-- maybe\nyou wonder, can I",
    "start": "4351160",
    "end": "4356230"
  },
  {
    "text": "get log log log time, log log\nlog log time, or whatever?",
    "start": "4356230",
    "end": "4361300"
  },
  {
    "text": "No. In most reasonable\nchoices of parameters-- it's a little bit more\ncomplicated than this--",
    "start": "4361300",
    "end": "4368190"
  },
  {
    "text": "but for most of the time\nthat you care about, log log u is the right answer.",
    "start": "4368190",
    "end": "4374330"
  },
  {
    "text": "This was proved in 2007. So it took us decades\nto really understand.",
    "start": "4374330",
    "end": "4379536"
  },
  {
    "text": "It's by a former MIT student. ",
    "start": "4379536",
    "end": "4386250"
  },
  {
    "text": "So I'll give you some\nrange where it holds,",
    "start": "4386250",
    "end": "4398299"
  },
  {
    "text": "which will raise another issue. But, OK.",
    "start": "4398299",
    "end": "4406300"
  },
  {
    "text": "So this range is the range\nI talked about before. This is when log log\nu equals log log n. So that's kind of the case where\nyou care about applying it.",
    "start": "4406300",
    "end": "4413390"
  },
  {
    "text": "If log log u is more like log\nn, it's not so interesting. But as long as u is\nnot too big, this",
    "start": "4413390",
    "end": "4419230"
  },
  {
    "text": "is a little bit bigger\nthan polynomial n. Then this is the right answer.",
    "start": "4419230",
    "end": "4425486"
  },
  {
    "text": "Now technically, you\nneed another assumption, which is the space of\nyour data structure is not to super linear.",
    "start": "4425486",
    "end": "4430781"
  },
  {
    "text": "Now this is a little awkward. Because the space of\nthis data show structure is actually order u, not n.",
    "start": "4430782",
    "end": "4439120"
  },
  {
    "text": "So the last issue is space. ",
    "start": "4439120",
    "end": "4446140"
  },
  {
    "text": "Space is order u. Let me go back to this\nbinary tree picture.",
    "start": "4446140",
    "end": "4451290"
  },
  {
    "text": "So we had the idea\nof, well, there's all these bits at the bottom. We're building a big\nbinary tree above those.",
    "start": "4451290",
    "end": "4458860"
  },
  {
    "text": "The leaves are the actual data. And then we're summarizing,\nby for every node, we're writing the or of\nthe two nodes below it,",
    "start": "4458860",
    "end": "4465462"
  },
  {
    "text": "which is summarizing whether\nthat thing is non-empty. ",
    "start": "4465462",
    "end": "4472230"
  },
  {
    "text": "What van Emde Boas is\ndoing-- so first of all, you see that the total number of\nnodes in this tree is order u.",
    "start": "4472230",
    "end": "4477900"
  },
  {
    "text": "Because there's u leaves. The total size of a\nbinary tree with u leaves is order u, 2u minus 1, right?",
    "start": "4477900",
    "end": "4484112"
  },
  {
    "text": " And you can kind of see what\nvan Emde Boas is doing here.",
    "start": "4484112",
    "end": "4489300"
  },
  {
    "text": "First, it's thinking\nabout the middle level. Now it's not directly\nlooking at these bits.",
    "start": "4489300",
    "end": "4494470"
  },
  {
    "text": "It says, hey look,\nI know my item, the thing I'm doing a successor\nof, let's say, is three.",
    "start": "4494470",
    "end": "4501430"
  },
  {
    "text": "I want to know the\nsuccessor of this position. First, I want to check, should\nI recurse in this block,",
    "start": "4501430",
    "end": "4508160"
  },
  {
    "text": "or should I recurse\nin the summary block-- which I didn't draw. But it's the part of the\ntree that would be up here.",
    "start": "4508160",
    "end": "4516340"
  },
  {
    "text": "And that's exactly what\nwe're doing with successor.",
    "start": "4516340",
    "end": "4523280"
  },
  {
    "text": "Should we recursively\nlook within cluster i? Or should we look within\nthe summary structure? We only do one or the other.",
    "start": "4523280",
    "end": "4529790"
  },
  {
    "text": "And that's the sense in\nwhich we are binary searching on the levels of this tree. Either we will spend all of\nour work recursively looking",
    "start": "4529790",
    "end": "4536602"
  },
  {
    "text": "for the successor within\nthe summary structure, which is like finding the next 1 bit\nin this row, the middle row,",
    "start": "4536602",
    "end": "4542960"
  },
  {
    "text": "or we will spend all of our\ntime doing successor in here. And we can do that. Because we have\nthe max augmented.",
    "start": "4542960",
    "end": "4549360"
  },
  {
    "text": "OK, but that's the\nsense in which, kind of, you are binary searching\nin the levels of this tree.",
    "start": "4549360",
    "end": "4554590"
  },
  {
    "text": "So that's that early\nintuition for van Emde Boas is kind of what we're doing.",
    "start": "4554590",
    "end": "4559800"
  },
  {
    "text": "The trouble is, to store that\ntree takes order u space.",
    "start": "4559800",
    "end": "4564969"
  },
  {
    "text": "We'd really like to\nspend order n space. And I have four minutes. So you'll see part of\nthe answer to this.",
    "start": "4564970",
    "end": "4574150"
  },
  {
    "text": " My poor microphone. ",
    "start": "4574150",
    "end": "4583600"
  },
  {
    "text": "Let me give you an idea of\nhow to fix the space bound. Let's erase some algorithms. ",
    "start": "4583600",
    "end": "4601880"
  },
  {
    "text": "The main idea here is only\nstore non-empty clusters,",
    "start": "4601880",
    "end": "4610909"
  },
  {
    "text": "pretty simple idea.  We want to spend space\nonly for the present items,",
    "start": "4610910",
    "end": "4618180"
  },
  {
    "text": "not for the absent ones. So don't store the absent ones. In particular, we're\ndoing all this work around",
    "start": "4618180",
    "end": "4624630"
  },
  {
    "text": "when clusters are\nempty, in which case we can see that just by\nlooking at the min item,",
    "start": "4624630",
    "end": "4630270"
  },
  {
    "text": "or when they're non-empty. So let's just store\nthe non-empty ones. That will get you down to\nalmost order n space, not quite,",
    "start": "4630270",
    "end": "4637170"
  },
  {
    "text": "but close. To do this, v dot cluster\nis no longer an array.",
    "start": "4637170",
    "end": "4644369"
  },
  {
    "text": "Just make it a hash table,\na dictionary in Python.",
    "start": "4644370",
    "end": "4649460"
  },
  {
    "text": "So v dot cluster--\nwe were always doing v dot cluster of i.",
    "start": "4649460",
    "end": "4654750"
  },
  {
    "text": "Just make that into dictionary\ninstead of an array. And you save most of the space. You only have to store\nthe non-empty items.",
    "start": "4654750",
    "end": "4660795"
  },
  {
    "start": "4660795",
    "end": "4667260"
  },
  {
    "text": "And you should know from\n006, hash table is constant expected. We'll prove that formally\nin lecture eight, I think.",
    "start": "4667260",
    "end": "4674869"
  },
  {
    "text": "But for now, take\nhashing as given. Everything we did before is\nessentially the same cost,",
    "start": "4674870",
    "end": "4680950"
  },
  {
    "text": "but an expectation,\nno longer worst case. But now the space goes way down.",
    "start": "4680950",
    "end": "4687140"
  },
  {
    "text": "Because if you look at an\nitem, when you insert an item,",
    "start": "4687140",
    "end": "4692290"
  },
  {
    "text": "it sort of goes to log\nlog u different places, in the worst case. But, yeah.",
    "start": "4692290",
    "end": "4701800"
  },
  {
    "text": "We end up with n log log u\nspace, which is pretty good,",
    "start": "4701800",
    "end": "4708739"
  },
  {
    "text": "almost linear space. It's a little tricky to\nsee why you get log log u. But I guess if you look\nat the insert algorithm,",
    "start": "4708740",
    "end": "4718330"
  },
  {
    "text": "even though we had two recursive\ncalls in the worst case. One of them was free.",
    "start": "4718330",
    "end": "4723430"
  },
  {
    "text": "When we do both of\nthem, we insert here. This one happens to be free. Because it was empty. But we still pay for it.",
    "start": "4723430",
    "end": "4729989"
  },
  {
    "text": "We set v dot min equal to x. And so that structure went\nfrom empty to non-empty.",
    "start": "4729990",
    "end": "4735110"
  },
  {
    "text": "So this costs 1. And then we recursively\ncall insert v dot summary",
    "start": "4735110",
    "end": "4740784"
  },
  {
    "text": "on high of x. So we might, when we insert\none item x, if lots of things were empty, actually log log\nu structures become non-empty,",
    "start": "4740785",
    "end": "4750349"
  },
  {
    "text": "and that's why you pay log log\nu for each item you insert. It's kind of annoying. There is a fix,\nwhich is in my notes.",
    "start": "4750350",
    "end": "4756760"
  },
  {
    "text": "You can read it, for reducing\nthis further to order n.",
    "start": "4756760",
    "end": "4761960"
  },
  {
    "text": "But, OK, I have 30\nseconds to explain it. The idea is-- you're not\nresponsible for knowing it.",
    "start": "4761960",
    "end": "4768240"
  },
  {
    "text": "This is just in\ncase you're curious.  The idea is, instead of\ngoing all the way down",
    "start": "4768240",
    "end": "4775200"
  },
  {
    "text": "in the recursion,\nat the very bottom, you say, well,\nnormally if you stop the recursion when\nyou have u equals",
    "start": "4775200",
    "end": "4781890"
  },
  {
    "text": "1, just stop the recursion\nwhen n is very small,",
    "start": "4781890",
    "end": "4790130"
  },
  {
    "text": "like log log u. When I'm only storing\nlog log u items,",
    "start": "4790130",
    "end": "4795430"
  },
  {
    "text": "put them in a linked list. I don't care. You can do whatever you\nwant on log log u items in log log u time.",
    "start": "4795430",
    "end": "4800690"
  },
  {
    "text": "It's just a tiny tweak. But it turns out, it gets rid\nof that log u in the space.",
    "start": "4800690",
    "end": "4805720"
  },
  {
    "text": "So it's a little bit messier. And I don't know if you'd\nwant to implement it that way. But you can reduce\nto linear space.",
    "start": "4805720",
    "end": "4811909"
  },
  {
    "text": "And that's van Emde Boas. ",
    "start": "4811910",
    "end": "4814238"
  }
]