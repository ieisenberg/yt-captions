[
  {
    "start": "0",
    "end": "150000"
  },
  {
    "text": "ANNOUNCER: Open content is\nprovided under a creative commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6840"
  },
  {
    "text": "offer High-quality educational\nresources for free. To make a donation, or view\nadditional materials from",
    "start": "6840",
    "end": "13380"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at ocw.mit.edu .",
    "start": "13380",
    "end": "19930"
  },
  {
    "text": "PROFESSOR ERIC GRIMSON: Let's\nrecap where we were. Last lecture, we talked about,\nor started to talk about,",
    "start": "19930",
    "end": "26640"
  },
  {
    "text": "efficiency. Orders of growth. Complexity. And I'll remind you, we saw a\nset of algorithms, and part of",
    "start": "26640",
    "end": "33450"
  },
  {
    "text": "my goal was to get you\nto begin to recognize characteristics of algorithms\nthat map into a particular class.",
    "start": "33450",
    "end": "40200"
  },
  {
    "text": "So what did we see? We saw linear algorithms.\nTypical characterization, not all the time, but typical\ncharacterization, is an",
    "start": "40200",
    "end": "47100"
  },
  {
    "text": "algorithm that reduces the size\nof a problem by one, or by some constant amount each\ntime, is typically an example",
    "start": "47100",
    "end": "55310"
  },
  {
    "text": "of a linear algorithm. And we saw a couple of examples\nof linear algorithms. We also saw a logarithmic\nalgorithm. and we like log",
    "start": "55310",
    "end": "63620"
  },
  {
    "text": "algorithms, because they're\nreally fast. A typical characteristic of a log\nalgorithm is a pro-- or sorry,",
    "start": "63620",
    "end": "69490"
  },
  {
    "text": "an algorithm where it reduces\nthe size of the problem by a constant factor.",
    "start": "69490",
    "end": "74820"
  },
  {
    "text": "Obviously-- and that's a bad\nway of saying it, I said constant the previous time--\nin the linear case, it's subtract by certain amount. In the log case, it's\ndivide by an amount.",
    "start": "74820",
    "end": "81840"
  },
  {
    "text": "Cut the problem in half. Cut the problem in half again. And that's a typical characterization of a log algorithm.",
    "start": "81840",
    "end": "88310"
  },
  {
    "text": "We saw some quadratic\nalgorithms, typically those are things with multiple nested\nloops, or iterative or",
    "start": "88310",
    "end": "93909"
  },
  {
    "text": "recursive calls, where you're\ndoing, say, a linear amount of time but you're doing it a\nlinear number of times, and so",
    "start": "93910",
    "end": "99820"
  },
  {
    "text": "it becomes quadratic, and you'll\nsee other polynomial kinds of algorithms. And finally, we saw an example\nof an exponential algorithm,",
    "start": "99820",
    "end": "106340"
  },
  {
    "text": "those Towers of Hanoi. We don't like exponential\nalgorithms, or at least you shouldn't like them, because\nthey blow up quickly.",
    "start": "106340",
    "end": "113409"
  },
  {
    "text": "And we saw some examples\nof that. And unfortunately, some problems\nare inherently exponential, you're sort of\nstuck with that, and then you",
    "start": "113410",
    "end": "120470"
  },
  {
    "text": "just have to try be as\nclever as you can. OK. At the end of the lecture last\ntime, I also showed you an",
    "start": "120470",
    "end": "127180"
  },
  {
    "text": "example of binary search. And I want to redo that in a\nlittle more detail today,",
    "start": "127180",
    "end": "132440"
  },
  {
    "text": "because I felt like I did that\na little more quickly than I wanted to, so, if you really got\nbinary search, fall asleep",
    "start": "132440",
    "end": "138780"
  },
  {
    "text": "for about ten minutes, just\ndon't snore, your neighbors may not appreciate it, but\nwe're going to go over it again, because it's a problem\nand an idea that we're going",
    "start": "138780",
    "end": "144730"
  },
  {
    "text": "to come back to, and I really\nwant to make sure that I do this in a way that makes\nreal good sense you.",
    "start": "144730",
    "end": "150970"
  },
  {
    "start": "150000",
    "end": "387000"
  },
  {
    "text": "Again. Basic premise of binary search,\nor at least we set it up was, imagine I have a sorted\nlist of elements.",
    "start": "150970",
    "end": "157720"
  },
  {
    "text": "We get, in a second, to how\nwe're going to get them sorted, and I want to know,\nis a particular element in that list..",
    "start": "157720",
    "end": "164390"
  },
  {
    "text": "And the basic idea of binary\nsearch is to start with the full range of the list,\npick the midpoint,",
    "start": "164390",
    "end": "170790"
  },
  {
    "text": "and test that point. If it's the thing I'm looking\nfor, I'm golden. If not, because the list is\nsorted, I can use the",
    "start": "170790",
    "end": "178350"
  },
  {
    "text": "difference between what I'm\nlooking for and that midpoint to decide, should I look in the\ntop half of the list, or",
    "start": "178350",
    "end": "184040"
  },
  {
    "text": "the bottom half of the list? And I keep chopping it down. And I want to show you a little\nbit more detail of",
    "start": "184040",
    "end": "189230"
  },
  {
    "text": "that, so let's create a simple\nlittle list here. All right?",
    "start": "189230",
    "end": "202880"
  },
  {
    "text": "I don't care what's in there,\nbut just assume that's my list. And just to remind you, on\nyour handout, and there it",
    "start": "202880",
    "end": "208510"
  },
  {
    "text": "is on the screen, I'm going to\nbring it back up, there's the little binary search\nalgorithm. We're going to call\nsearch, which just calls binary search.",
    "start": "208510",
    "end": "214550"
  },
  {
    "text": "And you can look at it, and\nlet's in fact take a look at it to see what it does.",
    "start": "214550",
    "end": "220640"
  },
  {
    "text": "We're going to call binary\nsearch, it's going to take the list to search and the element,\nbut it's also going to say, here's the first part\nof the list, and there's the",
    "start": "220640",
    "end": "232390"
  },
  {
    "text": "last part of the list,\nand what does it do inside that code? Well, it checks to see,\nis it bigger than two?",
    "start": "232390",
    "end": "237770"
  },
  {
    "text": "Are there more than two\nelements there? If there are less than two\nelements there, I just check one or both of those to\nsee if I'm looking",
    "start": "237770",
    "end": "243420"
  },
  {
    "text": "for the right thing. Otherwise, what does that\ncode say to do? It says find the midpoint, which\nsays, take the start,",
    "start": "243420",
    "end": "250370"
  },
  {
    "text": "which is pointing to that place\nright there, take last minus first, divide it by\n2, and add it to start.",
    "start": "250370",
    "end": "257850"
  },
  {
    "text": "And that basically, somewhere\nabout here, gives me the midpoint.",
    "start": "257850",
    "end": "263740"
  },
  {
    "text": "Now I look at that element. Is it the thing I'm\nlooking for? If I'm really lucky, it is.",
    "start": "263740",
    "end": "269020"
  },
  {
    "text": "If not, I look at the value of\nthat point here and the thing I'm looking for.",
    "start": "269020",
    "end": "274210"
  },
  {
    "text": "And for sake of argument, let's\nassume that the thing I'm looking for is smaller\nthan the value here.",
    "start": "274210",
    "end": "279380"
  },
  {
    "text": "Here's what I do. I change-- oops! Let me do that this way-- I change last to here, and keep\nfirst there, and I throw",
    "start": "279380",
    "end": "291570"
  },
  {
    "text": "away all of that. All right? That's just the those-- let me\nuse my pointer-- that's just",
    "start": "291570",
    "end": "299730"
  },
  {
    "text": "these two lines here. I checked the value, and in\none case, I'm changing the",
    "start": "299730",
    "end": "305020"
  },
  {
    "text": "last to be mid minus 1, which is\nthe case I'm in here, and I just call again.",
    "start": "305020",
    "end": "310050"
  },
  {
    "text": "All right? I'm going to call exactly\nthe same thing. Now, first is pointing here,\nlast is pointing there, again,",
    "start": "310050",
    "end": "316860"
  },
  {
    "text": "I check to see, are there more\nthan two things left? There are, in this case. So what do I do? I find the midpoint by taking\nlast minus first, divide by 2,",
    "start": "316860",
    "end": "324060"
  },
  {
    "text": "and add to start. Just for sake of argument, we'll\nassume it's about there,",
    "start": "324060",
    "end": "329789"
  },
  {
    "text": "and I do the same thing. Is this value what\nI'm looking for? Again, for sake of argument,\nlet's assume it's not.",
    "start": "329790",
    "end": "335970"
  },
  {
    "text": "Let's assume, for sake of\nargument, the thing I'm looking for is bigger\nthan this. In that case, I'm going to throw\naway all of this, I'm",
    "start": "335970",
    "end": "343630"
  },
  {
    "text": "going to hit that bottom\nline of that code. Ah. What does that do? It changes the call.",
    "start": "343630",
    "end": "349440"
  },
  {
    "text": "So in this case, first\nnow points",
    "start": "349440",
    "end": "354530"
  },
  {
    "text": "there, last points there.",
    "start": "354530",
    "end": "360310"
  },
  {
    "text": "And I cut around. And again, notice\nwhat I've done.",
    "start": "360310",
    "end": "367659"
  },
  {
    "text": "I've thrown away most of the\narray-- most of the list, I shouldn't say array-- most\nof the list. All right?",
    "start": "367660",
    "end": "372780"
  },
  {
    "text": "So it cuts it down quickly\nas we go along. OK.",
    "start": "372780",
    "end": "378170"
  },
  {
    "text": "That's the basic idea\nof binary search. And let's just run a couple of\nexamples to remind you of what",
    "start": "378170",
    "end": "383210"
  },
  {
    "text": "happens if we do this. So if I call, let's\n[UNINTELLIGIBLE], let's set up",
    "start": "383210",
    "end": "389960"
  },
  {
    "start": "387000",
    "end": "553000"
  },
  {
    "text": "s to be, I don't know, some\nbig long list. OK.",
    "start": "389960",
    "end": "397949"
  },
  {
    "text": "And I'm going to look to see, is\na particular element inside of that list, and again, I'll\nremind you, that's just giving",
    "start": "397950",
    "end": "407400"
  },
  {
    "text": "me the integers from zero up\nto 9999 something or other. If I look for, say, minus 1,\nyou might go, gee, wait a",
    "start": "407400",
    "end": "416740"
  },
  {
    "text": "minute, if I was just doing\nlinear search, I would've known right away that minus\none wasn't in this list, because it's sorted\nand it's smaller",
    "start": "416740",
    "end": "422250"
  },
  {
    "text": "than the first elements. So this looks like it's doing\na little bit of extra work, but you can see, if you look at\nthat, how it cuts it down",
    "start": "422250",
    "end": "429340"
  },
  {
    "text": "at each stage. And I'll remind you, what I'm\nprinting out there is, first and last, with the range I'm\nlooking over, and then just",
    "start": "429340",
    "end": "436919"
  },
  {
    "text": "how many times the\niteration called. So in this case, it just keeps\nchopping down from the back",
    "start": "436920",
    "end": "442590"
  },
  {
    "text": "end, which kind of makes\nsense, all right? But in a fixed number, in fact,\ntwenty-three calls, it",
    "start": "442590",
    "end": "448039"
  },
  {
    "text": "gets down to the point\nof being able to say whether it's there. Let's go the other direction.",
    "start": "448040",
    "end": "453870"
  },
  {
    "text": "And yes, I guess I'd better say\ns not 2, or we're going to",
    "start": "453870",
    "end": "459490"
  },
  {
    "text": "get an error here. Again, in twenty-three checks.",
    "start": "459490",
    "end": "468320"
  },
  {
    "text": "In this case, it's cutting up\nfrom the bottom end, which makes sense because the thing\nI'm looking for is always bigger than the midpoint, and\nthen, I don't know, let's pick",
    "start": "468320",
    "end": "475949"
  },
  {
    "text": "something in between. Somebody want-- ah, I keep doing\nthat-- somebody like to",
    "start": "475950",
    "end": "483820"
  },
  {
    "text": "give me a number? I know you'd like to give\nme other things, other expression, somebody\ngive me a number.",
    "start": "483820",
    "end": "490810"
  },
  {
    "text": "Anybody? No? Sorry. Thank you. Good number. OK, walks in very quickly.",
    "start": "490810",
    "end": "503479"
  },
  {
    "text": "OK? And if you just look at the\nnumbers, you can see how it cuts in from one side and then\nthe other side as it keeps",
    "start": "503480",
    "end": "509290"
  },
  {
    "text": "narrowing that range, until it\ngets down to the place where there are at most two things\nleft, and then it just has to",
    "start": "509290",
    "end": "514320"
  },
  {
    "text": "check those two to say whether\nit's there or not. Think about this compared\nto a linear search.",
    "start": "514320",
    "end": "519349"
  },
  {
    "text": "All right? A linear search, I start at the\nbeginning of the list and walk all the way through it. All right, if I'm lucky and it's\nat the low end, I'll find",
    "start": "519350",
    "end": "525970"
  },
  {
    "text": "it pretty quickly. If it's not, if it's at the\nfar end, I've got to go forever, and you saw that last\ntime where this thing paused",
    "start": "525970",
    "end": "531380"
  },
  {
    "text": "for a little while\nwhile it actually searched a list this big. OK. So, what do I want you to\ntake away from this?",
    "start": "531380",
    "end": "538750"
  },
  {
    "text": "This idea of binary search\nis going to be a really powerful tool. And it has this property,\nagain, of",
    "start": "538750",
    "end": "544500"
  },
  {
    "text": "chopping things into pieces. So in fact, what does that\nsuggest about the order of growth here? What is the complexity of this?",
    "start": "544500",
    "end": "552860"
  },
  {
    "text": "Yeah. Logarithmic. Why? STUDENT: [UNINTELLIGIBLE] PROFESSOR ERIC GRIMSON: Yeah.",
    "start": "552860",
    "end": "558450"
  },
  {
    "start": "553000",
    "end": "580000"
  },
  {
    "text": "Thank you. I mean, I know I sort of said\nit to you, but you're right. It's logarithmic, right? It's got that property of,\nit cuts things in half.",
    "start": "558450",
    "end": "564460"
  },
  {
    "text": "Here's another way to think\nabout why is this log. Actually, let me ask a slightly\ndifferent question. How do we know this\nalways stops?",
    "start": "564460",
    "end": "570050"
  },
  {
    "text": "I mean, I ran three trials\nhere, and it did. But how would I reason about,\ndoes this always stop?",
    "start": "570050",
    "end": "576560"
  },
  {
    "text": "Well let's see. Where's the end test\non this thing? The end test-- and I've got\nthe wrong glasses on-- but",
    "start": "576560",
    "end": "583470"
  },
  {
    "start": "580000",
    "end": "756000"
  },
  {
    "text": "it's up here, where I'm looking\nto see, is last minus first less than or equal to 2?",
    "start": "583470",
    "end": "589470"
  },
  {
    "text": "OK. So, soon as I get down to a list\nthat has no more than two elements in it, I'm done.",
    "start": "589470",
    "end": "595060"
  },
  {
    "text": "Notice that. It's a less than or equal to. What if I just tested to see\nif it was only, say, one?",
    "start": "595060",
    "end": "600640"
  },
  {
    "text": "There was one element\nin there. Would that have worked?",
    "start": "600640",
    "end": "607740"
  },
  {
    "text": "I think it depends on\nwhether the list is odd or even in length. Actually, that's probably\nnot true.",
    "start": "607740",
    "end": "612760"
  },
  {
    "text": "With one, it'll probably always\nget it down there, but if I've made it just equal to\ntwo, I might have lost. So first of all, I've got to be\ncareful about the end test.",
    "start": "612760",
    "end": "619320"
  },
  {
    "text": "But the second thing is, OK, if\nit stops whenever this is less than two, am I convinced\nthat this will always halt?",
    "start": "619320",
    "end": "626030"
  },
  {
    "text": "And the answer is sure. Because what do I do? At each stage, no matter which\nbranch, here or here, I take,",
    "start": "626030",
    "end": "632820"
  },
  {
    "text": "I'm cutting down the length\nof the list that I'm searching in half. All right?",
    "start": "632820",
    "end": "638160"
  },
  {
    "text": "So if I start off with a list\nof length n, how many times can I divide it by 2, until\nI get to something no",
    "start": "638160",
    "end": "643610"
  },
  {
    "text": "more than two left? Log times, right.? Exactly as the gentleman said. Oh, I'm sorry. You're patiently waiting\nfor me to reward.",
    "start": "643610",
    "end": "650279"
  },
  {
    "text": "Or actually, maybe you're not. Thank you. OK.",
    "start": "650280",
    "end": "656080"
  },
  {
    "text": "So this is, in fact, log.",
    "start": "656080",
    "end": "668690"
  },
  {
    "text": "Now, having said that,\nI actually snuck something by you. And I want to spend a\ncouple of minutes",
    "start": "668690",
    "end": "674330"
  },
  {
    "text": "again reinforcing that. So if we look at that code,\nand we were little more",
    "start": "674330",
    "end": "679690"
  },
  {
    "text": "careful about this, what\ndid we say to do? We said look an-- sorry. Count the number of primitive\noperations in each step.",
    "start": "679690",
    "end": "686600"
  },
  {
    "text": "OK. So if I look at this code,\nfirst of all I'm calling search, it just has one call,\nso looks like search is",
    "start": "686600",
    "end": "695420"
  },
  {
    "text": "constant, except I\ndon't know what happens inside of b search. So I've got to look\nat b search. So let's see. The first line, that\nprint thing, is",
    "start": "695420",
    "end": "702900"
  },
  {
    "text": "obviously constant, right? Just take it as a constant\namount of operations But. let's look at the next one here,\nor is that second line?",
    "start": "702900",
    "end": "710960"
  },
  {
    "text": "OK. If last minus first is greater\nthan or equal to 2-- sorry, less than 2, then either\nlook at this thing or",
    "start": "710960",
    "end": "717820"
  },
  {
    "text": "look at that thing. And that's where I said we've\ngot to be careful. That's accessing an element of\na list. We have to make sure",
    "start": "717820",
    "end": "725900"
  },
  {
    "text": "that, in fact, that operation\nis not linear. So let me expand on that very\nslightly, and again, we did",
    "start": "725900",
    "end": "732459"
  },
  {
    "text": "this last time but I want\nto do one more time. I have to be careful about how\nI'm actually implementing a",
    "start": "732460",
    "end": "742470"
  },
  {
    "text": "list. So, for example: in\nthis case, my list",
    "start": "742470",
    "end": "758410"
  },
  {
    "start": "756000",
    "end": "2236000"
  },
  {
    "text": "is a bunch of integers. And one of the things I could\ntake advantage of, is I'm only going to need a finite\namount of space to",
    "start": "758410",
    "end": "764540"
  },
  {
    "text": "represent an integer. So, for example, if I want to\nallow for some fairly large",
    "start": "764540",
    "end": "769730"
  },
  {
    "text": "range of integers, I might say,\nI need four memory cells in a row to represent\nan integer. All right, if it's a zero, it's\ngoing to be a whole bunch",
    "start": "769730",
    "end": "776660"
  },
  {
    "text": "of ones-- of zeroes, so one,\nit may be a whole bunch of zeroes in the first three and\nthen a one at the end of this thing, but one of the way to\nthink about this list in",
    "start": "776660",
    "end": "784020"
  },
  {
    "text": "memory, is that I can decide in\nconstant time how to find the i'th element of a list.",
    "start": "784020",
    "end": "789639"
  },
  {
    "text": "So in particular, here's where\nthe zero-th element of the list starts, there's where the\nfirst element starts, here's",
    "start": "789640",
    "end": "795320"
  },
  {
    "text": "where the third element starts,\nthese are just memory cells in a row, and to find the\nzero-th element, if start",
    "start": "795320",
    "end": "805140"
  },
  {
    "text": "is pointing to that memory\ncell, it's just at start. To find the first element,\nbecause I know I need four",
    "start": "805140",
    "end": "813730"
  },
  {
    "text": "memory cells to represent an\ninteger, it's at start plus 4.",
    "start": "813730",
    "end": "821589"
  },
  {
    "text": "To get to the second element,\nI know that that's-- you get the idea-- at the start plus 2\ntimes 4, and to get to the",
    "start": "821590",
    "end": "830940"
  },
  {
    "text": "k'th element, I know that I\nwant to take whatever the",
    "start": "830940",
    "end": "841520"
  },
  {
    "text": "start is which points to that\nplace in memory, take care, multiply by 4, and that tells me\nexactly where to go to find",
    "start": "841520",
    "end": "848589"
  },
  {
    "text": "that location. This may sound like a nuance,\nbut it's important.",
    "start": "848590",
    "end": "853860"
  },
  {
    "text": "Why? Because that's a constant\naccess, right? To get any location in memory,\nto get to any value of the",
    "start": "853860",
    "end": "859890"
  },
  {
    "text": "list, I simply have to say which\nelement do I want to get, I know that these things\nare stored in a particular",
    "start": "859890",
    "end": "865779"
  },
  {
    "text": "size, multiply that index by 4,\nadd it to start, and then it's in a constant amount of\ntime I can go to that location",
    "start": "865780",
    "end": "871880"
  },
  {
    "text": "and get out the cell. OK. That works nicely if I know that\nI have things stored in",
    "start": "871880",
    "end": "882670"
  },
  {
    "text": "constant size. But what if I have\na list of lists? What if I have a homogeneous\nlist, a list of integers and",
    "start": "882670",
    "end": "889640"
  },
  {
    "text": "strings and floats and lists and\nlists of lists and lists of lists of lists and all\nthat sort of cool stuff? In that case, I've got to\nbe a lot more careful.",
    "start": "889640",
    "end": "904190"
  },
  {
    "text": "So in this case, one of the\nstandard ways to do this, is to use what's called a linked\nlist. And I'm going to do it",
    "start": "904190",
    "end": "913130"
  },
  {
    "text": "in the following way. Start again, we'll point to the\nbeginning of the list. But",
    "start": "913130",
    "end": "921570"
  },
  {
    "text": "now, because my elements are\ngoing to take different amounts of memory, I'm going\nto do the following thing. In the first spot, I'm going to\nstore something that says,",
    "start": "921570",
    "end": "931440"
  },
  {
    "text": "here's how far you\nhave to jump to get to the next element. And then, I'm going to use the\nnext sequence of things to",
    "start": "931440",
    "end": "938910"
  },
  {
    "text": "represent the first\nelement, or the zero-th element,\nif you like. In this case I might\nneed five.",
    "start": "938910",
    "end": "944120"
  },
  {
    "text": "And then in the next spot, I'm\ngoing to say how far you have to jump to get to the\nnext element. All right, followed by whatever\nI need to represent",
    "start": "944120",
    "end": "953220"
  },
  {
    "text": "it, which might only\nbe a blank one. And in the next spot, maybe I've\ngot a really long list,",
    "start": "953220",
    "end": "959100"
  },
  {
    "text": "and I'm going to say\nhow to jump to get to the next element. All right, this is actually\nkind of nice.",
    "start": "959100",
    "end": "965020"
  },
  {
    "text": "This lets me have a way of\nrepresenting things that could be arbitrary in size. And some of these things\ncould be huge, if",
    "start": "965020",
    "end": "970240"
  },
  {
    "text": "they're themselves lists. Here's the problem. How do I get to the nth-- er,\nthe k'th element in the list,",
    "start": "970240",
    "end": "976689"
  },
  {
    "text": "in this case? Well I have to go to the zero-th\nelement, and say OK, gee, to get to the next\nelement, I've got",
    "start": "976690",
    "end": "983520"
  },
  {
    "text": "to jump this here. And to get to the next element,\nI've got to jump to here, and to get to the next\nelement, I've got to jump to",
    "start": "983520",
    "end": "989760"
  },
  {
    "text": "here, until I get there. And so, I get some power. I get the ability to store\narbitrary things, but what",
    "start": "989760",
    "end": "997029"
  },
  {
    "text": "just happened to\nmy complexity? How long does it take\nme to find the k'th element?",
    "start": "997030",
    "end": "1003310"
  },
  {
    "text": "Linear. Because I've got to walk\nmy way down it. OK? So in this case, you\nhave linear access.",
    "start": "1003310",
    "end": "1016730"
  },
  {
    "text": "Oh fudge knuckle. Right? If that was the case in that\ncode, then my complexity is no longer log, because I need\nlinear access for each time",
    "start": "1016730",
    "end": "1024689"
  },
  {
    "text": "I've got to go to the list,\nand it's going to be much worse than that. All right. Now. Some programming languages,\nprimarily Lisp, actually store",
    "start": "1024690",
    "end": "1033730"
  },
  {
    "text": "lists these ways. You might say, why? Well it turns out there's\nsome trade-offs to it.",
    "start": "1033730",
    "end": "1039850"
  },
  {
    "text": "It has some advantages in terms\nof power of storing things, it has some\ndisadvantages, primarily in terms of access time.",
    "start": "1039850",
    "end": "1046270"
  },
  {
    "text": "Fortunately for you, Python\ndecided, or the investors of Python decided, to store\nthis a different way. And the different way is to say,\nlook, if I redraw this,",
    "start": "1046270",
    "end": "1054720"
  },
  {
    "text": "it's called a box and pointer\ndiagram, what we really have",
    "start": "1054720",
    "end": "1068150"
  },
  {
    "text": "for each element\nis two things. And I've actually just reversed\nthe order here. We have a pointer to the\nlocation in memory that",
    "start": "1068150",
    "end": "1075070"
  },
  {
    "text": "contains the actual value, which\nitself might be a bunch of pointers, and we have a\npointer to the actual-- sorry,",
    "start": "1075070",
    "end": "1082885"
  },
  {
    "text": "a pointer the value and we have\na pointer to the next element in the list.\nAll right?",
    "start": "1082885",
    "end": "1088000"
  },
  {
    "text": "And one of the things we could\ndo if we look at that is, we say, gee, we could reorganize\nthis in a pretty straightforward way.",
    "start": "1088000",
    "end": "1093360"
  },
  {
    "text": "In particular, why don't we\njust take all of the first",
    "start": "1093360",
    "end": "1101400"
  },
  {
    "text": "cells and stick them together?",
    "start": "1101400",
    "end": "1115520"
  },
  {
    "text": "Where now, my list is a list of\npointers, it's not a set of values but it's actually a\npointer off to some other",
    "start": "1115520",
    "end": "1122080"
  },
  {
    "text": "piece of memory that\ncontains the value. Why is this nice? Well this is exactly like this.",
    "start": "1122080",
    "end": "1130750"
  },
  {
    "text": "All right? It's now something that I can\nsearch in constant time.",
    "start": "1130750",
    "end": "1137160"
  },
  {
    "text": "And that's what's going to\nallow me to keep this thing as being log. OK.",
    "start": "1137160",
    "end": "1143440"
  },
  {
    "text": "With that in mind, let's go\nback to where we were. And where were we?",
    "start": "1143440",
    "end": "1150580"
  },
  {
    "text": "We started off talking about\nbinary search, and I suggested that this was a log algorithm,\nwhich it is, which is really",
    "start": "1150580",
    "end": "1158870"
  },
  {
    "text": "kind of nice. Let's pull together what this\nalgorithm actually does.",
    "start": "1158870",
    "end": "1172970"
  },
  {
    "text": "If I generalize binary search,\nhere's what I'm going to stake that this thing does. It says one: pick\nthe midpoint.",
    "start": "1172970",
    "end": "1185580"
  },
  {
    "text": "Two: check to see if this is\nthe answer, if this is the",
    "start": "1185580",
    "end": "1196360"
  },
  {
    "text": "thing I'm looking for. And then, three: if not, reduce\nto a smaller problem,",
    "start": "1196360",
    "end": "1205910"
  },
  {
    "text": "and repeat.",
    "start": "1205910",
    "end": "1216220"
  },
  {
    "text": "OK, you're going, yeah, come on,\nthat makes obvious sense. And it does. But I want you to keep that\ntemplate in mind, because we're going to come\nback to that.",
    "start": "1216220",
    "end": "1222930"
  },
  {
    "text": "It's an example of a very common\ntool that's going to be really useful to us, not just\nfor doing search, but for",
    "start": "1222930",
    "end": "1228180"
  },
  {
    "text": "doing a whole range of problems.\nThat is, in essence, the template the describes\na log style algorithm.",
    "start": "1228180",
    "end": "1234030"
  },
  {
    "text": "And we're going to\ncome back to it. OK. With that in mind though,\ndidn't I cheat?",
    "start": "1234030",
    "end": "1241559"
  },
  {
    "text": "I remind you, I know you're not\nreally listening to me, but that's OK. I reminded you at the beginning\nof the lecture, I",
    "start": "1241560",
    "end": "1247634"
  },
  {
    "text": "said, let's assume we have\na sorted list, and then let's go search it. Where in the world",
    "start": "1247635",
    "end": "1252830"
  },
  {
    "text": "did that sorted list\ncome from? What if I just get a list of\nelements, what do I do?",
    "start": "1252830",
    "end": "1258700"
  },
  {
    "text": "Well let's see. My fall back is, I could just\ndo linear search, walk down the list one at a time, just\ncomparing those things.",
    "start": "1258700",
    "end": "1264399"
  },
  {
    "text": "OK. So that's sort of my base. But what if I wanted, you know,\nhow do I want to get to that sorted list? All right?",
    "start": "1264400",
    "end": "1272250"
  },
  {
    "text": "Now. One of the questions, before we\nget to doing the sorting,",
    "start": "1272250",
    "end": "1278159"
  },
  {
    "text": "is even to ask, what should I do\nin a search case like that? All right, so in particular,\ndoes it make sense, if I'm",
    "start": "1278160",
    "end": "1286380"
  },
  {
    "text": "given an unsorted list,\nto first sort it, and then search it?",
    "start": "1286380",
    "end": "1291450"
  },
  {
    "text": "Or should I just use the\nbasically linear case? All right? So, here's the question.",
    "start": "1291450",
    "end": "1299899"
  },
  {
    "text": "Should we sort before\nwe search?",
    "start": "1299900",
    "end": "1307560"
  },
  {
    "text": "OK. So let's see, if I'm going to\ndo this, how fast could we sort a list?",
    "start": "1307560",
    "end": "1313560"
  },
  {
    "text": "Can we sort a list in\nsublinear time?",
    "start": "1313560",
    "end": "1325880"
  },
  {
    "text": "Sublinear meaning, something\nlike log less than linear time? What do you think?",
    "start": "1325880",
    "end": "1331460"
  },
  {
    "text": "It's possible?",
    "start": "1331460",
    "end": "1337630"
  },
  {
    "text": "Any thoughts? Don't you hate professors who\nstand here waiting for you to answer, even when\nthey have candy?",
    "start": "1337630",
    "end": "1345660"
  },
  {
    "text": "Does it make sense to think we\ncould do this in less than linear time? You know, it takes a little\nbit of thinking.",
    "start": "1345660",
    "end": "1351059"
  },
  {
    "text": "What would it mean-- [UNINTELLIGIBLE PHRASE] do I see\na hand, way at the back, yes please?",
    "start": "1351060",
    "end": "1357500"
  },
  {
    "text": "Thank you. Man, you're going to really make\nme work here, I have no idea if I can get it that\nfar, ah, your friend",
    "start": "1357500",
    "end": "1363720"
  },
  {
    "text": "will help you out. Thank you. The gentleman has it\nexactly right. How could I possibly do it in\nsublinear time, I've got to",
    "start": "1363720",
    "end": "1369910"
  },
  {
    "text": "look at least every\nelement once. And that's the kind of instinct\nI'd like you to get into thinking about.",
    "start": "1369910",
    "end": "1375130"
  },
  {
    "text": "So the answer here is no. OK.",
    "start": "1375130",
    "end": "1380180"
  },
  {
    "text": "Can we sort it in linear time?",
    "start": "1380180",
    "end": "1387380"
  },
  {
    "text": "Hmmm. That one's not so obvious. So let's think about\nthis for a second.",
    "start": "1387380",
    "end": "1393440"
  },
  {
    "text": "To sort a list in linear time,\nwould say, I have to look at each element in the\nlist at most a",
    "start": "1393440",
    "end": "1400529"
  },
  {
    "text": "constant number of times. It doesn't have to be\njust once, right? It could be two or three times.",
    "start": "1400530",
    "end": "1405550"
  },
  {
    "text": "Hmm. Well, wait a minute. If I want to sort a list, I'll\ntake one element, I've got to look at probably a lot of the\nother elements in the list in",
    "start": "1405550",
    "end": "1413590"
  },
  {
    "text": "order to decide where it goes. And that suggests it's going\nto depend on how long the list is. All right, so that's a weak\nargument, but in fact, it's a",
    "start": "1413590",
    "end": "1421639"
  },
  {
    "text": "way of suggesting,\nprobably not.",
    "start": "1421640",
    "end": "1429010"
  },
  {
    "text": "All right. So how fast could\nI sort a list? How fast can we sort it?",
    "start": "1429010",
    "end": "1434170"
  },
  {
    "text": "And we're going to come back to\nthis, probably next time if",
    "start": "1434170",
    "end": "1443020"
  },
  {
    "text": "I time this right, but the\nanswer is, we can do it in n",
    "start": "1443020",
    "end": "1452670"
  },
  {
    "text": "log n time. We're going to come\nback to that. All right? And I'm going to say-- sort of\nset that stage here, so that--",
    "start": "1452670",
    "end": "1458955"
  },
  {
    "text": "It turns out that that's\nprobably about the best we can do, or again ends at the\nlength of the list.",
    "start": "1458956",
    "end": "1465559"
  },
  {
    "text": "OK, so that's still comes\nback to my question. If I want to search a list,\nshould I sort it first and then search it?",
    "start": "1465560",
    "end": "1471710"
  },
  {
    "text": "Hmmm. OK, so let's do the\ncomparison.",
    "start": "1471710",
    "end": "1479420"
  },
  {
    "text": "I'm just going to take an\nunsorted list and search it, I could do it in linear\ntime, right? One at a time.",
    "start": "1479420",
    "end": "1484600"
  },
  {
    "text": "Walk down the elements\nuntil I find it. That would be order n. On the other hand, if I want\nto sort it first, OK, if I",
    "start": "1484600",
    "end": "1493020"
  },
  {
    "text": "want to do sort and search, I\nwant to sort it, it's going to",
    "start": "1493020",
    "end": "1499520"
  },
  {
    "text": "take n log n time to sort it,\nand having done that, then I",
    "start": "1499520",
    "end": "1505510"
  },
  {
    "text": "can search it in log n time. Ah.",
    "start": "1505510",
    "end": "1510610"
  },
  {
    "text": "So which one's better? Yeah.",
    "start": "1510610",
    "end": "1520200"
  },
  {
    "text": "Ah-ha. Thank you. Hold on to that thought for\nsecond, I'm going to come back to it. That does not assume I'm running\na search it wants,",
    "start": "1520200",
    "end": "1525860"
  },
  {
    "text": "which one's better? The unsorted, and you have\nexactly the point I want to get to-- how come all the guys,\nsorry, all the people",
    "start": "1525860",
    "end": "1533140"
  },
  {
    "text": "answering questions are way,\nway up in the back? Wow. that's a Tim Wakefield\npitch right there, all right.",
    "start": "1533140",
    "end": "1540430"
  },
  {
    "text": "Thank you. He has it exactly right. OK? Is this smaller than that?",
    "start": "1540430",
    "end": "1548330"
  },
  {
    "text": "No. Now that's a slight lie. Sorry, a slight misstatement,\nOK? I could run for office, couldn't\nI, if I can do that",
    "start": "1548330",
    "end": "1554570"
  },
  {
    "text": "kind of talk. It's a slight misstatement in\nthe sense that these should really be orders of growth. There are some constants in\nthere, it depends on the size,",
    "start": "1554570",
    "end": "1560640"
  },
  {
    "text": "but in general, n log n has\nto be bigger than n.",
    "start": "1560640",
    "end": "1565800"
  },
  {
    "text": "So, as the gentleman back there\nsaid, if I'm searching it once, just use the\nlinear search.",
    "start": "1565800",
    "end": "1571919"
  },
  {
    "text": "On the other hand, am I likely\nto only search a list once? Probably not. There are going to be multiple\nelements I'm going to be",
    "start": "1571920",
    "end": "1577710"
  },
  {
    "text": "looking for, so that suggests\nthat in fact, I want to",
    "start": "1577710",
    "end": "1584120"
  },
  {
    "text": "amortize the cost. And what does that say?",
    "start": "1584120",
    "end": "1590970"
  },
  {
    "text": "It says, let's assume\nI want to do k searches of a list. OK.",
    "start": "1590970",
    "end": "1601700"
  },
  {
    "text": "In the linear case, meaning in\nthe unsorted case, what's the complexity of this?\nk times n, right?",
    "start": "1601700",
    "end": "1608900"
  },
  {
    "text": "Order n to do the search, and\nI've got to do it k times, so this would be k times n.",
    "start": "1608900",
    "end": "1615830"
  },
  {
    "text": "In the [GARBLED PHRASE] sort and search case,\nwhat's my cost?",
    "start": "1615830",
    "end": "1623530"
  },
  {
    "text": "I've got to sort it, and we\nsaid, and we'll come back to that next time, that I can do\nthe sort in n log n, and then",
    "start": "1623530",
    "end": "1630519"
  },
  {
    "text": "what's the search\nin this case? Let's log n to do one search, I\nwant to do k of them, that's",
    "start": "1630520",
    "end": "1637730"
  },
  {
    "text": "k log n, ah-ha!",
    "start": "1637730",
    "end": "1646090"
  },
  {
    "text": "Now I'm in better\nshape, right? Especially for really large n or\nfor a lot of k, because now",
    "start": "1646090",
    "end": "1651730"
  },
  {
    "text": "in general, this is going\nto be smaller than that.",
    "start": "1651730",
    "end": "1657860"
  },
  {
    "text": "So this is a place where\nthe amortized cost actually helps me out. And as the gentleman at the\nback said, the question he",
    "start": "1657860",
    "end": "1663900"
  },
  {
    "text": "asked is right, it depends\non what I'm trying to do. So when I do the analysis, I\nwant to think about what am I",
    "start": "1663900",
    "end": "1669159"
  },
  {
    "text": "doing here, am I capturing\nall the pieces of it? Here, the two variables that\nmatter are what's the length of the list, and how many times\nI'm going to search it?",
    "start": "1669160",
    "end": "1677030"
  },
  {
    "text": "So in this case, this one wins,\nwhereas in this case,",
    "start": "1677030",
    "end": "1684010"
  },
  {
    "text": "that one wins. OK. Having said that, let's look\nat doing some sorts.",
    "start": "1684010",
    "end": "1693220"
  },
  {
    "text": "And I'm going to start with\na couple of dumb sorting mechanisms. Actually, that's\nthe wrong way saying it,",
    "start": "1693220",
    "end": "1699400"
  },
  {
    "text": "they're simply brain-damaged,\nthey're not dumb, OK? They are computationally\nchallenged, meaning, at the time they were invented, they\nwere perfectly good sorting",
    "start": "1699400",
    "end": "1705700"
  },
  {
    "text": "algorithms, there are better\nones, we're going to see a much better one next time\naround, but this is a good way to just start thinking about\nhow to do the algorithm, or",
    "start": "1705700",
    "end": "1710900"
  },
  {
    "text": "how to do the sort. Blah, try again. How to do this sort. So the first one I want to talk\nabout it's what's called",
    "start": "1710900",
    "end": "1718640"
  },
  {
    "text": "selection sort. And it's on your handout, and\nI'm going to bring the code up",
    "start": "1718640",
    "end": "1730330"
  },
  {
    "text": "here, you can see it, it's\ncalled cell sort, just for selection sort. And let's take a look\nat what this does.",
    "start": "1730330",
    "end": "1739060"
  },
  {
    "text": "OK. And in fact I think the easy\nway to look at what this does-- boy. My jokes are that bad. Wow--",
    "start": "1739060",
    "end": "1744510"
  },
  {
    "text": "All right. I think the easiest way to look\nat what this does, is let's take a really\nsimple example--",
    "start": "1744510",
    "end": "1750790"
  },
  {
    "text": "I want to make sure I put\nthe right things out--",
    "start": "1750790",
    "end": "1760690"
  },
  {
    "text": "I've got a simple little\nlist of values there. And if I look at this code, I'm\ngoing to run over a loop, you can see that there, i is\ngoing to go from zero up to",
    "start": "1760690",
    "end": "1768930"
  },
  {
    "text": "the length minus 1, and I'm\ngoing to keep track of a",
    "start": "1768930",
    "end": "1774720"
  },
  {
    "text": "couple of variables. Min index, I think I\ncalled it min val.",
    "start": "1774720",
    "end": "1782669"
  },
  {
    "text": "OK. Let's simulate the code. Let's see what it's\ndoing here. All right, so we start off.",
    "start": "1782670",
    "end": "1787779"
  },
  {
    "text": "Initially i-- ah, let me do it\nthis way, i is going to point",
    "start": "1787780",
    "end": "1793110"
  },
  {
    "text": "there, and I want to make sure\nI do it right, OK-- and min",
    "start": "1793110",
    "end": "1798780"
  },
  {
    "text": "index is going to point to the\nvalue of i, which is there, and min value is initially going\nto have the value 1.",
    "start": "1798780",
    "end": "1806779"
  },
  {
    "text": "So we're simply catting a hold\nof what's the first value we've got there. And then what do we do?",
    "start": "1806780",
    "end": "1812000"
  },
  {
    "text": "We start with j pointing here,\nand we can see what this",
    "start": "1812000",
    "end": "1818660"
  },
  {
    "text": "loop's going to do, right? j\nis just going to move up. So it's going to look at the\nrest of the list, walking along, and what does it do?",
    "start": "1818660",
    "end": "1825990"
  },
  {
    "text": "It says, right. If j is-- well it says until j\nis at the less than the length of l-- it says, if min value is\nbigger than the thing I'm",
    "start": "1825990",
    "end": "1837050"
  },
  {
    "text": "looking at, I'm going to do\nsomething, all right? So let's walk this. Min value is 1,. Is 1 bigger than 8?",
    "start": "1837050",
    "end": "1843020"
  },
  {
    "text": "No. I move j up. Is 1 bigger than 3? No. 1 bigger than 6? No. 1 bigger than 4? No. I get to the end of the loop,\nand I actually do a little bit",
    "start": "1843020",
    "end": "1850640"
  },
  {
    "text": "of wasted motion there. And the little bit of wasted\nmotion is, I take the value at",
    "start": "1850640",
    "end": "1855690"
  },
  {
    "text": "i, store it away temporarily,\ntake the value where min index is pointing to, put it\nback in there, and",
    "start": "1855690",
    "end": "1862940"
  },
  {
    "text": "then swap it around. OK. Having done that, let's move i\nup to here. i is now pointing",
    "start": "1862940",
    "end": "1871539"
  },
  {
    "text": "at that thing. Go through the second\nround of the loop. OK. What does that say? I'm going to change min index to\nalso point there n value is",
    "start": "1871540",
    "end": "1881360"
  },
  {
    "text": "8, j starts off here, and I\nsay, OK, is the thing I'm",
    "start": "1881360",
    "end": "1886720"
  },
  {
    "text": "looking at here smaller\nthan that? Yes. Ah-ha.",
    "start": "1886720",
    "end": "1892530"
  },
  {
    "text": "What does that say to do? It says, gee, make min\nindex point to there,",
    "start": "1892530",
    "end": "1901200"
  },
  {
    "text": "min value be 3. Change j.",
    "start": "1901200",
    "end": "1906810"
  },
  {
    "text": "Is 6 bigger than 3? Yes. Is 4 bigger than 3? Yes. Get to the end. And when I get to the\nend, what do I do?",
    "start": "1906810",
    "end": "1915210"
  },
  {
    "text": "Well, you see, I say, take temp,\nand store away what's",
    "start": "1915210",
    "end": "1921620"
  },
  {
    "text": "here, all right? Which is that value, and then\ntake what min index is",
    "start": "1921620",
    "end": "1927290"
  },
  {
    "text": "pointing to, and stick it in\nthere, and finally, replace",
    "start": "1927290",
    "end": "1936810"
  },
  {
    "text": "that value. OK.",
    "start": "1936810",
    "end": "1943240"
  },
  {
    "text": "Aren't you glad I'm\nnot a computer? Slow as hell. What's this thing doing?",
    "start": "1943240",
    "end": "1949440"
  },
  {
    "text": "It's walking along the list,\nlooking for the smallest thing",
    "start": "1949440",
    "end": "1954929"
  },
  {
    "text": "in the back end of the list,\nkeeping track of where it came from, and swapping it\nwith that spot in",
    "start": "1954930",
    "end": "1961220"
  },
  {
    "text": "the list. All right? So in the first case, I didn't\nhave to do any swaps because 1 was the smallest thing. In the second case, I found in\nthe next smallest element and",
    "start": "1961220",
    "end": "1969700"
  },
  {
    "text": "moved here, taking what was\nthere and moving it on, in this case I would swap the 4 and\nthe 8, and in next case I",
    "start": "1969700",
    "end": "1976230"
  },
  {
    "text": "wouldn't have to do anything. Let's check it out. I've written a little bit of a\ntest script here, so if we",
    "start": "1976230",
    "end": "1982650"
  },
  {
    "text": "test cell sort, and I've written\nthis so that it's going to print out what\nthe list is at the end",
    "start": "1982650",
    "end": "1988830"
  },
  {
    "text": "of each round, OK. Ah-ha.",
    "start": "1988830",
    "end": "1996110"
  },
  {
    "text": "Notice what-- where am\nI, here-- notice what happened in this case. At the end of the first round,\nI've got the smallest element",
    "start": "1996110",
    "end": "2002220"
  },
  {
    "text": "at the front. At the end of the second round,\nI've got the smallest two elements at the front,\nin fact I got all",
    "start": "2002220",
    "end": "2007279"
  },
  {
    "text": "of them sorted out. And it actually runs through\nthe loop multiple times, making sure that it's\nin the right form.",
    "start": "2007280",
    "end": "2013180"
  },
  {
    "text": "Let's take another example. OK.",
    "start": "2013180",
    "end": "2019370"
  },
  {
    "text": "Smallest element at the front. Smallest two elements\nat the front. Smallest three elements\nat the front. Smallest four elements at the\nfront, you get the idea.",
    "start": "2019370",
    "end": "2026590"
  },
  {
    "text": "Smallest five elements\nat the front. So this is a nice little\nsearch-- sorry, a nice little",
    "start": "2026590",
    "end": "2032660"
  },
  {
    "text": "sort algorithm . And in fact, it's relying on\nsomething that we're going to come back to, called\nthe loop invariant.",
    "start": "2032660",
    "end": "2039200"
  },
  {
    "text": "Actually, let me put it on this\nboard so you can see it.",
    "start": "2039200",
    "end": "2056349"
  },
  {
    "text": "The loop invariant what does\nthe loop invariant mean? It says, here is a property that\nis true of this structure",
    "start": "2056350",
    "end": "2061850"
  },
  {
    "text": "every time through the loop. In the loop invariant here is\nthe following: the list is",
    "start": "2061850",
    "end": "2066870"
  },
  {
    "text": "split, into a prefix or a first\npart, and a suffix, the",
    "start": "2066870",
    "end": "2077149"
  },
  {
    "text": "prefix is sorted, the suffix\nis not, and basically, the",
    "start": "2077150",
    "end": "2088099"
  },
  {
    "text": "loop starts off with the prefix\nbeing nothing and it keeps increasing the size of the\nprefix by 1 until it gets",
    "start": "2088100",
    "end": "2093339"
  },
  {
    "text": "through the entire list, at\nwhich point there's nothing in the suffix and entire\nprefix is sorted.",
    "start": "2093340",
    "end": "2100200"
  },
  {
    "text": "OK? So you can see that, it's just\nwalking through it, and in fact if I look at a couple of\nanother-- another couple of",
    "start": "2100200",
    "end": "2106250"
  },
  {
    "text": "examples, it's been a\nlong day, again, you can see that property.",
    "start": "2106250",
    "end": "2112680"
  },
  {
    "text": "You'll also notice that this\nthing goes through the entire list, even if the list\nis sorted before it",
    "start": "2112680",
    "end": "2119345"
  },
  {
    "text": "gets partway through. And that you might look at,\nfor example, that first example, and say, man by this\nstage it was already sorted,",
    "start": "2119345",
    "end": "2125720"
  },
  {
    "text": "yet it had to go through and\ncheck that the third element was in the right place, and then\nthe fourth and then the fifth and then the six.",
    "start": "2125720",
    "end": "2132430"
  },
  {
    "text": "OK. What order of growth? What's complexity of this?",
    "start": "2132430",
    "end": "2140450"
  },
  {
    "text": "I've got to get rid\nof this candy. Anybody help me out? What's the complexity of this?",
    "start": "2140450",
    "end": "2146690"
  },
  {
    "text": "Sorry, somebody at the back. n squared. Yeah, where n is what?",
    "start": "2146690",
    "end": "2152809"
  },
  {
    "text": "Yeah, and I can't even see\nwho's saying that. Thank you. Sorry, I've got the wrong\nglasses on, but you're",
    "start": "2152810",
    "end": "2157900"
  },
  {
    "text": "absolutely right, and in case\nthe rest of you didn't hear it, n squared.",
    "start": "2157900",
    "end": "2163890"
  },
  {
    "text": "How do I figure that out? Well I'm looping down\nthe list, right?",
    "start": "2163890",
    "end": "2169630"
  },
  {
    "text": "I'm walking down the list. So\nit's certainly at least linear in the length of the list.\nFor each starting",
    "start": "2169630",
    "end": "2175230"
  },
  {
    "text": "point, what do I do? I look at the rest of the list\nto decide what's the element to swap into the next place.",
    "start": "2175230",
    "end": "2181299"
  },
  {
    "text": "Now, you might say, well,\nwait a minute. As I keep moving down, that part\ngets smaller, it's not",
    "start": "2181300",
    "end": "2186310"
  },
  {
    "text": "always the initial length of\nthe list, and you're right. But if you do the sums, or if\nyou want to think of it this",
    "start": "2186310",
    "end": "2191350"
  },
  {
    "text": "way, if you think about this\nmore generally, it's always on average at least the length of\nthe list. So I've got to do n",
    "start": "2191350",
    "end": "2197329"
  },
  {
    "text": "things n times. So it's quadratic, in\nterms of that sort.",
    "start": "2197330",
    "end": "2202619"
  },
  {
    "text": "OK. That's one way to\ndo this sort. Let's do another one.",
    "start": "2202620",
    "end": "2210510"
  },
  {
    "text": "The second one we're going to\ndo is called bubble sort. All right? And bubble sort is also\non your handout.",
    "start": "2210510",
    "end": "2219980"
  },
  {
    "text": "And you want to take the first\nof these, let me-- sorry, for",
    "start": "2219980",
    "end": "2227970"
  },
  {
    "text": "a second let me uncomment\nthat, and let me comment this out-- All right, you can see the code\nfor bubble sort there.",
    "start": "2227970",
    "end": "2239950"
  },
  {
    "start": "2236000",
    "end": "2413000"
  },
  {
    "text": "Let's just look at it for a\nsecond, then we'll try some examples, and then we'll\nfigure out what it's actually doing.",
    "start": "2239950",
    "end": "2245030"
  },
  {
    "text": "So bubble sort, which\nis right up here. What's it going to do? It's going to let j run over\nthe length of the list, all",
    "start": "2245030",
    "end": "2252529"
  },
  {
    "text": "right, so it's going to start\nat some point to move down, and then it's going to let i\nrun over range, that's just",
    "start": "2252530",
    "end": "2258870"
  },
  {
    "text": "one smaller, and what's\nit doing there? It's looking at successive\npairs, right?",
    "start": "2258870",
    "end": "2265520"
  },
  {
    "text": "It's looking at the i'th and the\ni plus first element, and it's saying, gee, if the i'th\nelement is bigger than the",
    "start": "2265520",
    "end": "2271240"
  },
  {
    "text": "i'th plus first element, what's\nthe next set of three things doing? Just swapping them, right?",
    "start": "2271240",
    "end": "2277640"
  },
  {
    "text": "I temporarily hold on to what's\nin the i'th element so I can move the i plus first one\nin, and then replace that",
    "start": "2277640",
    "end": "2282940"
  },
  {
    "text": "with the i'th element. OK. What's this thing doing then,\nin terms of sorting?",
    "start": "2282940",
    "end": "2288980"
  },
  {
    "text": "At the end of the first pass,\nwhat could I say about the result of this thing?",
    "start": "2288980",
    "end": "2296910"
  },
  {
    "text": "What's the last element\nin the list look like?",
    "start": "2296910",
    "end": "2305359"
  },
  {
    "text": "I hate professors who do this. Well, let's try it. Let's try a little test. OK?",
    "start": "2305360",
    "end": "2315700"
  },
  {
    "text": "Test bubble sort-- especially if\nI could type-- let's run it",
    "start": "2315700",
    "end": "2320849"
  },
  {
    "text": "on the first list. OK, let's\ntry it on another one.",
    "start": "2320850",
    "end": "2329740"
  },
  {
    "text": "Oops sorry. Ah, I didn't want to do it this\ntime, I forgot to do the following, bear with me.",
    "start": "2329740",
    "end": "2336580"
  },
  {
    "text": "I gave away my punchline. Let's try it again. Test bubble sort.",
    "start": "2336580",
    "end": "2344440"
  },
  {
    "text": "OK, there's the first run, I'm\ngoing to take a different list. Can you see\na pattern there?",
    "start": "2344440",
    "end": "2358720"
  },
  {
    "text": "Yeah. STUDENT: The last cell in the\nlist is always going to [INAUDIBLE] PROFESSOR ERIC GRIMSON: Yeah. Why? You're right, but why?",
    "start": "2358720",
    "end": "2364380"
  },
  {
    "text": "STUDENT: [UNINTELLIGIBLE PHRASE] PROFESSOR ERIC GRIMSON:\nExactly right.",
    "start": "2364380",
    "end": "2369910"
  },
  {
    "text": "Thank you. The observation is, thank you,\non the first pass through, the",
    "start": "2369910",
    "end": "2377089"
  },
  {
    "text": "last element is the biggest\nthing in the list. On the next pass through, the next largest\nelement is at the second point",
    "start": "2377090",
    "end": "2383200"
  },
  {
    "text": "in the list. OK? Because what am I doing? It's called bubble sort\nbecause it's literally bubbling along, right? I'm walking along the list once,\ntaking two things, and",
    "start": "2383200",
    "end": "2391609"
  },
  {
    "text": "saying, make sure the\nbiggest one is next. So wherever the largest element\nstarted out in the list, by the time I get through\nit, it's at the end.",
    "start": "2391610",
    "end": "2399800"
  },
  {
    "text": "And then I go back and\nI start again, and I do the same thing. OK. The next largest element\nhas to end up in",
    "start": "2399800",
    "end": "2405340"
  },
  {
    "text": "the second last spot. Et cetera. All right, so it's called bubble\nsort because it does this bubbling up until\nit gets there.",
    "start": "2405340",
    "end": "2412340"
  },
  {
    "text": "Now. What's the order\nof growth here? What's the complexity?",
    "start": "2412340",
    "end": "2419810"
  },
  {
    "start": "2413000",
    "end": "2776000"
  },
  {
    "text": "I haven't talked to the side\nof the room in a while, actually I have. This gentleman\nhas helped me out. Somebody else help me out. What's the complexity here?",
    "start": "2419810",
    "end": "2427970"
  },
  {
    "text": "I must have the wrong glasses\non to see a hand. No help.",
    "start": "2427970",
    "end": "2434160"
  },
  {
    "text": "Log? Linear? Exponential?",
    "start": "2434160",
    "end": "2440450"
  },
  {
    "text": "Quadratic? Yeah. Log. It's a good think, but why\ndo you think it's log?",
    "start": "2440450",
    "end": "2450160"
  },
  {
    "text": "Ah-ha. It's not a bad instinct, the\nlength is getting shorter each time, but what's one of the characteristics of a log algorithm?",
    "start": "2450160",
    "end": "2456260"
  },
  {
    "text": "It drops in half each time. So this isn't-- OK. And you're also close.",
    "start": "2456260",
    "end": "2462119"
  },
  {
    "text": "It's going to be linear,\nbut how many times do I go through this? All right, I've got to do one\npass to bubble the last",
    "start": "2462120",
    "end": "2468980"
  },
  {
    "text": "element to the end. I've got to do another pass to\nbubble the second last element to the end. I've got to do another pass.",
    "start": "2468980",
    "end": "2474730"
  },
  {
    "text": "Huh. Sounds like a linear number of\ntimes I've got to do-- oh fudge knuckle.",
    "start": "2474730",
    "end": "2480150"
  },
  {
    "text": "A linear number of things,\nquadratic. Right?",
    "start": "2480150",
    "end": "2485220"
  },
  {
    "text": "OK. So this is again an example,\nthis was quadratic, and this",
    "start": "2485220",
    "end": "2492620"
  },
  {
    "text": "one was quadratic. And I have this, to write it\nout, this is order the length",
    "start": "2492620",
    "end": "2500690"
  },
  {
    "text": "of the list squared, OK? Just to make it clear\nwhat we're actually measuring there.",
    "start": "2500690",
    "end": "2508250"
  },
  {
    "text": "All right. Could we do better? Sure. And in fact, next time we're\ngoing to show you that n log n",
    "start": "2508250",
    "end": "2514530"
  },
  {
    "text": "algorithm, but even with bubble\nsort, we can do better. In a particular, if I look at\nthose traces, I can certainly",
    "start": "2514530",
    "end": "2520290"
  },
  {
    "text": "see cases where, man, I already\nhad the list sorted much earlier on, and yet I\nkept going back to see if",
    "start": "2520290",
    "end": "2526349"
  },
  {
    "text": "there was anything else\nto bubble up. How would I keep\ntrack of that? Could I take advantage of that?",
    "start": "2526350",
    "end": "2532600"
  },
  {
    "text": "Sure. Why don't I just keep track\non each pass through the algorithm whether I have\ndone any swaps?",
    "start": "2532600",
    "end": "2538720"
  },
  {
    "text": "All right? Because if I don't do any swaps\non a pass through the algorithm, then it\nsays everything's",
    "start": "2538720",
    "end": "2543850"
  },
  {
    "text": "in the right order. And so, in fact, the version\nthat I commented out-- which is also in your handout and I'm\nnow going to uncomment,",
    "start": "2543850",
    "end": "2549880"
  },
  {
    "text": "let's get that one out, get rid\nof this one-- notice the",
    "start": "2549880",
    "end": "2558819"
  },
  {
    "text": "only change. I'm going to keep track of a\nlittle variable called swap, it's initially true, and as long\nas it's true, I'm going",
    "start": "2558820",
    "end": "2566225"
  },
  {
    "text": "to keep going, but inside of the\nloop I'm going to set it to false, and only if I do a\nswap will I set it to true.",
    "start": "2566225",
    "end": "2573620"
  },
  {
    "text": "This says, if I go through an\nentire pass through the list and nothing gets changed,\nI'm done. And in fact if I do that, and\ntry test bubble sort, well, in",
    "start": "2573620",
    "end": "2589730"
  },
  {
    "text": "the first case, looks the same. Ah. On the second case, I\nspot it right away.",
    "start": "2589730",
    "end": "2597660"
  },
  {
    "text": "On the third case, it takes me\nthe same amount of time. And the fourth case, when\nI set it up, I'm done.",
    "start": "2597660",
    "end": "2604210"
  },
  {
    "text": "OK. So what's the lesson here? I can be a little more careful\nabout keeping track of what goes on inside of that loop.",
    "start": "2604210",
    "end": "2610000"
  },
  {
    "text": "If I don't have any more work\nto do, let me just stop. All right. Nonetheless, even with this\nchange, what's the order",
    "start": "2610000",
    "end": "2616940"
  },
  {
    "text": "growth for bubble sort? Still quadratic, right? I'm looking for the worst case\nbehavior, it's still",
    "start": "2616940",
    "end": "2622359"
  },
  {
    "text": "quadratic, it's quadratic in the\nlength of the list, so I'm sort of stuck with that. Now.",
    "start": "2622360",
    "end": "2627559"
  },
  {
    "text": "Let me ask you one last\nquestion, and then we'll wrap this up. Which of these algorithms\nis better?",
    "start": "2627560",
    "end": "2635420"
  },
  {
    "text": "Insertion sort or bubble sort? STUDENT: Bubble. PROFESSOR ERIC GRIMSON:\nBubble. Bubble bubble toil\nand trouble. Who said bubble?",
    "start": "2635420",
    "end": "2641780"
  },
  {
    "text": "Why? STUDENT: Well, the first\none was too inefficient [UNINTELLIGIBLE] store and\ncompare each one, so",
    "start": "2641780",
    "end": "2647194"
  },
  {
    "text": "[UNINTELLIGIBLE]",
    "start": "2647195",
    "end": "2655320"
  },
  {
    "text": "PROFESSOR ERIC GRIMSON: It's\nnot a bad instinct. Right. So it-- so, your argument is,\nbubble is better because it's is essentially not doing all\nthese extra comparisons.",
    "start": "2655320",
    "end": "2663300"
  },
  {
    "text": "Another way of saying it is,\nI can do this stop when I don't need to. All right? OK. Anybody have an opposing\nopinion?",
    "start": "2663300",
    "end": "2670660"
  },
  {
    "text": "Wow, this sounds like a\npresidential debate. Sorry, I should reward you. Thank you for that statement.",
    "start": "2670660",
    "end": "2677380"
  },
  {
    "text": "Anybody have an opposing\nopinion? Everybody's answering these\nthings and sitting way up at the back.",
    "start": "2677380",
    "end": "2682390"
  },
  {
    "text": "Nice catch. Yeah. STUDENT: [INAUDIBLE]",
    "start": "2682390",
    "end": "2695160"
  },
  {
    "text": "PROFESSOR ERIC GRIMSON: I\ndon't think so, right? I think selection sort, I\nstill have to go through multiple times, it was still\nquadratic, OK, but I think",
    "start": "2695160",
    "end": "2701750"
  },
  {
    "text": "you're heading towards a\ndirection I want to get at, so let me prime this\na little bit. How many swaps do I do in\ngeneral in bubble sort,",
    "start": "2701750",
    "end": "2710119"
  },
  {
    "text": "compared to selection source? God bless. Oh, sorry, that wasn't a\nsneeze, it was a two?",
    "start": "2710120",
    "end": "2718840"
  },
  {
    "text": "How many swaps do I\ndo in bubble sort? A lot.",
    "start": "2718840",
    "end": "2724430"
  },
  {
    "text": "Right. Potentially a lot because I'm\nconstantly doing that, that says I'm running that inner loop\na whole bunch of times.",
    "start": "2724430",
    "end": "2729619"
  },
  {
    "text": "How many swaps do I do\nin selection sort? Once each time.",
    "start": "2729620",
    "end": "2736190"
  },
  {
    "text": "Right? I only do one swap potentially,\nit-- though not one potentially, each\ntime at the end of the loop I do a swap.",
    "start": "2736190",
    "end": "2742450"
  },
  {
    "text": "So this actually suggests again,\nthe orders of growth are the same, but probably\nselection sort is a more",
    "start": "2742450",
    "end": "2749060"
  },
  {
    "text": "efficient algorithm, because\nI'm not doing that constant amount of work every\ntime around. And in fact, if you go look up,\nyou won't see bubble sort",
    "start": "2749060",
    "end": "2755890"
  },
  {
    "text": "used very much. Most-- I shouldn't say most, many\ncomputer scientists don't think it should be taught,\nbecause it's just so inefficient.",
    "start": "2755890",
    "end": "2761770"
  },
  {
    "text": "I disagree, because it's a\nclever idea, but it's still something that we have\nto keep track of. All right.",
    "start": "2761770",
    "end": "2767770"
  },
  {
    "text": "We haven't gotten to our n log n\nalgorithm, we're going to do that next time, but I want to\nset the stage here by pulling",
    "start": "2767770",
    "end": "2774150"
  },
  {
    "text": "out one last piece. OK. Could we do better in\nterms of sorting? Again, remember what\nour goal was.",
    "start": "2774150",
    "end": "2780269"
  },
  {
    "start": "2776000",
    "end": "2790000"
  },
  {
    "text": "If we could do sort, then we\nsaw, if we amortized the cost, that searching is a lot more\nefficient if we're searching a",
    "start": "2780270",
    "end": "2785955"
  },
  {
    "text": "sorted list. How could we do better? Let me set the stage. I already said, back here, when\nI used this board, that",
    "start": "2785955",
    "end": "2794690"
  },
  {
    "text": "this idea was really\nimportant. And that's because that is\na version of a divide and",
    "start": "2794690",
    "end": "2803259"
  },
  {
    "text": "conquer algorithm.",
    "start": "2803260",
    "end": "2808590"
  },
  {
    "text": "OK. Binary search is perhaps the\nsimplest of the divide and conquer algorithms, and\nwhat does that mean? It says, in order to solve a\nproblem, cut it down to a",
    "start": "2808590",
    "end": "2816230"
  },
  {
    "text": "smaller problem and try\nand solve that one. So to just preface what we're\ngoing to do next time, what",
    "start": "2816230",
    "end": "2821740"
  },
  {
    "start": "2818000",
    "end": "2849000"
  },
  {
    "text": "would happen if I wanted to do\nsort, and rather than in sorting the entire list at once,\nI broke it into pieces,",
    "start": "2821740",
    "end": "2829210"
  },
  {
    "text": "and sorted the pieces, and then\njust figured out a very efficient way to bring those two\npieces and merge them back",
    "start": "2829210",
    "end": "2835240"
  },
  {
    "text": "together again? Where those pieces, I would do\nthe same thing with, I would divide them up into smaller\nchunks, and sort those.",
    "start": "2835240",
    "end": "2843360"
  },
  {
    "text": "Is that going to give me a\nmore efficient algorithm? And if you come back\non Thursday, we'll answer that question.",
    "start": "2843360",
    "end": "2849420"
  },
  {
    "start": "2849420",
    "end": "2849583"
  }
]