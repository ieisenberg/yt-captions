[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6050"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or to\nview additional materials",
    "start": "6050",
    "end": "12690"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "12690",
    "end": "26920"
  },
  {
    "text": "PROFESSOR: Today, we\nbegin a new topic, which is parameterized complexity. ",
    "start": "26920",
    "end": "32899"
  },
  {
    "text": "This is one of the\nmost recent areas",
    "start": "32900",
    "end": "38730"
  },
  {
    "text": "of hardness that\nhas been invented that we will cover so far.",
    "start": "38730",
    "end": "44915"
  },
  {
    "text": "It started around 1999,\nand then since the 2000s, it's been getting\nreally big, originally",
    "start": "44915",
    "end": "50780"
  },
  {
    "text": "by Downey and Fellows. And the general\nidea is we're going to take problems,\nwhich normally we",
    "start": "50780",
    "end": "56570"
  },
  {
    "text": "think of as being parameterized\nby the problem size, n, and thinking about polynomial\nversus exponential growth of n.",
    "start": "56570",
    "end": "62995"
  },
  {
    "text": "And we're going to\nadd another parameter. So you could say this\nis a two parameter analysis in some sense.",
    "start": "62995",
    "end": "68909"
  },
  {
    "text": "Usually, we call problem\nsize n and then we call the parameter k.",
    "start": "68910",
    "end": "74979"
  },
  {
    "text": "In general, a parameter\nis just some way of measuring instances. So parameter, k, is a\nfunction from instances",
    "start": "74980",
    "end": "86520"
  },
  {
    "text": "to non-negative\nintegers, 0, 1, 2.",
    "start": "86520",
    "end": "91950"
  },
  {
    "text": "And usually, this number k\nis just part of the instance,",
    "start": "91950",
    "end": "98030"
  },
  {
    "text": "for example-- well, let me\ngo over here to examples.",
    "start": "98030",
    "end": "109060"
  },
  {
    "text": "Let's say problem that's\ncalled k-vertex cover--",
    "start": "109060",
    "end": "117259"
  },
  {
    "text": "and usually, I'll just call it\nvertex cover for simplicity. You know the problem\nvertices to cover edges.",
    "start": "117260",
    "end": "123229"
  },
  {
    "text": "And usually, the decision\nversion of that is are there k vertices\nthat cover all edges?",
    "start": "123230",
    "end": "130759"
  },
  {
    "start": "130759",
    "end": "138240"
  },
  {
    "text": "So k is an input\nto this problem, and it appears in the\nstatement of the problem. But in particular,\nit's an input.",
    "start": "138240",
    "end": "144360"
  },
  {
    "text": "And so this function, k,\nof a vertex cover instance just pulls out that one number\nand throws away the graph.",
    "start": "144360",
    "end": "151580"
  },
  {
    "text": "That's the typical parameter. But in general, a parameter\ncould be some hard to compute",
    "start": "151580",
    "end": "157349"
  },
  {
    "text": "thing. Maybe k-- you think\nof the parameter-- you take vertex cover\nas your problem,",
    "start": "157350",
    "end": "163570"
  },
  {
    "text": "but you define your\nparameter to be the smallest independent set--\nor largest independent set.",
    "start": "163570",
    "end": "168770"
  },
  {
    "text": "Smallest is pretty small, 0.",
    "start": "168770",
    "end": "173810"
  },
  {
    "text": "Or, pick your favorite. You could, for example, think\nabout vertex cover with respect",
    "start": "173810",
    "end": "181700"
  },
  {
    "text": "to-- this is how we'll write\nthe parameter-- crossing number.",
    "start": "181700",
    "end": "187780"
  },
  {
    "start": "187780",
    "end": "194220"
  },
  {
    "text": "So the idea here is-- sorry\nI forgot to covet-- we always",
    "start": "194220",
    "end": "199590"
  },
  {
    "text": "measure our instances\nwith respect to the problem size, which\nis the size of the graph for vertex cover instance.",
    "start": "199590",
    "end": "205860"
  },
  {
    "text": "But we're also going\nto parameterize by some other quantity here. Maybe it's the minimum\ncrossing number for your graph,",
    "start": "205860",
    "end": "211599"
  },
  {
    "text": "so 0 if it's planar and so on. We prove that that's\nNP-complete to compute.",
    "start": "211600",
    "end": "217390"
  },
  {
    "text": "So this parameter may not be\neasy to compute in general. But a lot of the times it's\njust part of the problem.",
    "start": "217390",
    "end": "224690"
  },
  {
    "text": "And in general, this is called\nthe natural parameterization. ",
    "start": "224690",
    "end": "234840"
  },
  {
    "text": "If you have an\noptimization problem, like vertex cover is--\nminimum vertex cover-- and you convert the optimization\nproblem into a decision",
    "start": "234840",
    "end": "241930"
  },
  {
    "text": "problem, you're asking is\nopt less than or equal to k. That k is the natural parameter\nfor an optimization problem.",
    "start": "241930",
    "end": "247790"
  },
  {
    "text": "So most the time, we'll\nbe thinking about that. But things like this also arise.",
    "start": "247790",
    "end": "253820"
  },
  {
    "text": "So just to be a\nlittle more precise",
    "start": "253820",
    "end": "261299"
  },
  {
    "text": "a parameterized problem\nis a decision problem",
    "start": "261300",
    "end": "267095"
  },
  {
    "text": "plus the parameter. ",
    "start": "267095",
    "end": "276270"
  },
  {
    "text": "So when I said vertex cover\nwith respect to crossing number, I meant my decision\nproblem is vertex cover,",
    "start": "276270",
    "end": "282330"
  },
  {
    "text": "and I'm going to choose to\nuse this particular parameter function to parameterize\nthose instances.",
    "start": "282330",
    "end": "288210"
  },
  {
    "text": "And in general, we'll call them\nparameter k and problem size n. And our goal is to get a\nvery good dependence on n",
    "start": "288210",
    "end": "297280"
  },
  {
    "text": "at the cost of a\nbad dependence on k. So let me start with a\nso-so dependents, XP, would",
    "start": "297280",
    "end": "307930"
  },
  {
    "text": "be the set of all prioritized\nproblems solvable in n",
    "start": "307930",
    "end": "319570"
  },
  {
    "text": "to the f of k time for some\nfunction k-- for any function k, any function f.",
    "start": "319570",
    "end": "326150"
  },
  {
    "text": "And FPT is the set of\nparameterized problem solvable",
    "start": "326150",
    "end": "331370"
  },
  {
    "text": "in f of k times\nn to the order 1.",
    "start": "331370",
    "end": "337250"
  },
  {
    "text": "So this is considered\na good running time. This is considered\na bad running time.",
    "start": "337250",
    "end": "342820"
  },
  {
    "text": "F is presumably exponential. Assuming your\nproblem is NP-hard, you have to have\nexponential in something.",
    "start": "342820",
    "end": "348040"
  },
  {
    "text": "And the goal is to get the\nexponential away from n because n is hard to control. We like to solve big problems,\nbut maybe we can somehow",
    "start": "348040",
    "end": "355837"
  },
  {
    "text": "characterize that the\nproblems we care about have some small measure, k--\nfor some interesting measure k.",
    "start": "355837",
    "end": "362280"
  },
  {
    "text": "If such an algorithm is\npossible and, in practice, your k's are small,\nthen you're golden. These give really\ngood algorithms",
    "start": "362280",
    "end": "367624"
  },
  {
    "text": "for solving lots of problems. Any problem in FPT, if k\nis somewhat reasonable,",
    "start": "367624",
    "end": "373660"
  },
  {
    "text": "even when n is huge, we\ncan solve the problem. ",
    "start": "373660",
    "end": "378840"
  },
  {
    "text": "This running time is also\npolynomial for fixed k, but the polynomial\nchanges depending on k.",
    "start": "378840",
    "end": "386140"
  },
  {
    "text": "So here, we typically get\nlinear time algorithms for any fixed k. Here, as k increases,\nthe polynomial",
    "start": "386140",
    "end": "391940"
  },
  {
    "text": "gets bigger and bigger. And in practice,\nyou probably can't handle more than an n squared\nalgorithm for a large n.",
    "start": "391940",
    "end": "397960"
  },
  {
    "text": "So this is considered not\nuseful even for small k. This is considered very\nuseful for small k,",
    "start": "397960",
    "end": "403860"
  },
  {
    "text": "depending on your notion\nof small, of course. And parameterized complexity,\nthe main name of the game",
    "start": "403860",
    "end": "410690"
  },
  {
    "text": "is distinguishing between FPT. And XP is actually rather large,\nbut distinguishing between when",
    "start": "410690",
    "end": "417310"
  },
  {
    "text": "this is possible and\nwhen it is impossible. ",
    "start": "417310",
    "end": "423280"
  },
  {
    "text": "Cool. So for example,\nvertex cover is FPT. Vertex cover with respect\nto crossing number, I think,",
    "start": "423280",
    "end": "429800"
  },
  {
    "text": "is FPT. I have to think about\nthat a little bit more. AUDIENCE: Can you say what\nXP and FPT roughly stand for?",
    "start": "429800",
    "end": "438960"
  },
  {
    "text": "PROFESSOR: Oh, right. FPT is fixed\nparameter tractable.",
    "start": "438960",
    "end": "445790"
  },
  {
    "text": "That's the good word.  intuitive--\netymological that means",
    "start": "445790",
    "end": "453790"
  },
  {
    "text": "when you fix the parameter k,\nyou get a tractable problem although it's a strong\nsense of tractable.",
    "start": "453790",
    "end": "460300"
  },
  {
    "text": "You can say it is n\nsquared for any fixed k. Or, it's n to the\nfifth for any fixed k.",
    "start": "460300",
    "end": "465570"
  },
  {
    "text": "This constant does\nnot depend on k. ",
    "start": "465570",
    "end": "471720"
  },
  {
    "text": "But the lead constant does.  So that's FPT.",
    "start": "471720",
    "end": "478740"
  },
  {
    "text": "XP, experience points.",
    "start": "478740",
    "end": "483979"
  },
  {
    "start": "483980",
    "end": "490047"
  },
  {
    "text": "Good question.  One other good thing to know. ",
    "start": "490047",
    "end": "497440"
  },
  {
    "text": "You might wonder why f\nof k times polynomial n. Maybe I could hope for better\nlike f of k plus polynomial n.",
    "start": "497440",
    "end": "506350"
  },
  {
    "text": "That actually is the same class. So FPT also equals the set\nof all parameterized problems",
    "start": "506350",
    "end": "515440"
  },
  {
    "text": "solvable in f of k\nplus n to order 1.",
    "start": "515440",
    "end": "524310"
  },
  {
    "text": "That's a nice general theorem. I won't bother proving it here. I think the f ends up becoming\nsquare of the original f.",
    "start": "524310",
    "end": "530180"
  },
  {
    "text": "It's a very easy case\nanalysis based on whether which of these two\nthings is bigger.",
    "start": "530180",
    "end": "535376"
  },
  {
    "text": "I will leave that\nas an exercise. It would be a good\nproblem set problem. ",
    "start": "535376",
    "end": "541460"
  },
  {
    "text": "Cool, so that answers\none plausible question.",
    "start": "541460",
    "end": "547390"
  },
  {
    "text": "Let me give you an example\nof an FPT algorithm, let's say, for vertex cover.",
    "start": "547390",
    "end": "552760"
  },
  {
    "text": "So back over here\nto vertex cover. How about an XP algorithm\nfor vertex cover.",
    "start": "552760",
    "end": "560240"
  },
  {
    "text": "So that's really easy,\nnot very interesting. You could just guess a vertex\ncover, try all possible vertex",
    "start": "560240",
    "end": "567610"
  },
  {
    "text": "covers of size k. Remember, we want to know\nwhether there's a vertex cover size k. k is given\nto us, so we could",
    "start": "567610",
    "end": "574370"
  },
  {
    "text": "try all vertex covers--\nor, I shouldn't say that-- all vertex\nsets of size k.",
    "start": "574370",
    "end": "582310"
  },
  {
    "text": " There's only n to the k of them.",
    "start": "582310",
    "end": "589120"
  },
  {
    "text": "And for each of them,\nwe'll spend linear time to check whether\nit's a vertex cover.",
    "start": "589120",
    "end": "594269"
  },
  {
    "text": "So this proves that\nthe problem is in XP. That's trivial. Most problems you'll\nfind are in XP",
    "start": "594270",
    "end": "599980"
  },
  {
    "text": "with reasonable\nparameterization. On some, it's not obvious. And now, let's prove\nthat it's in FPT.",
    "start": "599980",
    "end": "607714"
  },
  {
    "text": "This is a little\nmore interesting. There are lots of FPT\nalgorithms for vertex cover. It's an active area. Every year there's a better\nalgorithm pretty much.",
    "start": "607714",
    "end": "615630"
  },
  {
    "text": "Question? AUDIENCE: So in the inputs of\nthe problem, the k is an input? ",
    "start": "615630",
    "end": "622399"
  },
  {
    "text": "PROFESSOR: For vertex\ncover, k is an input. AUDIENCE: Oh, because you\ncan also think of vertex cover where k is not\nan input, but you can analyze the run time.",
    "start": "622399",
    "end": "628294"
  },
  {
    "text": "PROFESSOR: Yes. Right. So you could also think about\nvertex cover with respect",
    "start": "628294",
    "end": "636990"
  },
  {
    "text": "to vertex cover. So here, let's say-- this\nis a little bit funny,",
    "start": "636990",
    "end": "644850"
  },
  {
    "text": "but here the idea\nis k, the parameter,",
    "start": "644850",
    "end": "650509"
  },
  {
    "text": "is the minimum vertex cover. Let me write minimum\nvertex cover. And here, you're given\nsome other value.",
    "start": "650510",
    "end": "656920"
  },
  {
    "text": "Let's call it j. And you want to decide whether\nvertex cover is at most j,",
    "start": "656920",
    "end": "661960"
  },
  {
    "text": "but you're not told what k is. You're not told what\nthe optimal value is. So this is a little bit subtle.",
    "start": "661960",
    "end": "667440"
  },
  {
    "text": "It's essentially\nthe same problem. You're just not told\nthe critical value.",
    "start": "667440",
    "end": "674810"
  },
  {
    "text": "But if you can solve k\nvertex cover when k is given, you can just run that\nalgorithm for k equals 1, 2, 4,",
    "start": "674810",
    "end": "683410"
  },
  {
    "text": "and you'll end up\nsolving this problem. So even though--\nso in this problem, you can say, well, if I discover\nthere's no vertex cover of size",
    "start": "683410",
    "end": "690560"
  },
  {
    "text": "k, I can just return no. Here, it's a little\nmore annoying, but just by iterating and stopping when\nyou get the first vertex cover,",
    "start": "690560",
    "end": "698266"
  },
  {
    "text": "your algorithm\nwill end up having a good running time\nwith respect to k even though you didn't know it.",
    "start": "698266",
    "end": "703440"
  },
  {
    "text": "So it's a subtlety. In general, this is\nmessy to work with, so we usually think\nabout k being an input.",
    "start": "703440",
    "end": "709150"
  },
  {
    "text": "But that reduction shows\nthey're more or less the same. But the complexity theory\nfor this is annoying.",
    "start": "709150",
    "end": "714660"
  },
  {
    "text": "In the same way that for NP, we\nrestricted decision problems, here we're going\nto usually restrict",
    "start": "714660",
    "end": "720459"
  },
  {
    "text": "to the natural parameter.  So good question.",
    "start": "720460",
    "end": "725700"
  },
  {
    "text": " Let me prove vertex cover is in\nFPT, so a much better running",
    "start": "725700",
    "end": "732240"
  },
  {
    "text": "time than n to the k. I think I will get something\nlike 2 to the k times n.",
    "start": "732240",
    "end": "737819"
  },
  {
    "text": "Look at an edge of\nthe graph, any edge. Pick an edge, any edge. And we know for this\nto be a vertex cover,",
    "start": "737820",
    "end": "744330"
  },
  {
    "text": "one of the two endpoints\nhas to be in there. Which one? I don't know. Guess. So I'm going to guess either\nthe left guy or the right vertex",
    "start": "744330",
    "end": "753680"
  },
  {
    "text": "is in the vertex\ncover, and then repeat. So when I put somebody\nin the vertex cover, I delete all of\nthe incident edges.",
    "start": "753680",
    "end": "761574"
  },
  {
    "text": " That takes linear time.",
    "start": "761575",
    "end": "766800"
  },
  {
    "text": "Over here, I would\ndelete whatever edges are incident to this\nguy and the vertex itself, of course.",
    "start": "766800",
    "end": "774300"
  },
  {
    "text": "And so I get a smaller graph. I do this k times, so in\ngeneral, my execution tree",
    "start": "774300",
    "end": "784430"
  },
  {
    "text": "will have two branches, every\ntime I pick an edge and say, do I put the left guy\nor the right guy in.",
    "start": "784430",
    "end": "791550"
  },
  {
    "text": "But I only need to worry\nabout a tree of height k because after I\nmake k decisions,",
    "start": "791550",
    "end": "797620"
  },
  {
    "text": "I'm supposed to get a\nvertex cover of size k. After I make k\ndecisions, if there's anything left to\nthe graph that means",
    "start": "797620",
    "end": "802941"
  },
  {
    "text": "that wasn't a vertex cover of\nsize k and I should backtrack. So I just explore\nthis tree, look at all the different leaves.",
    "start": "802941",
    "end": "809029"
  },
  {
    "text": "If there's any vertex cover\nof size k, I will find it. And so I only spend 2 to\nthe k to explore this tree.",
    "start": "809030",
    "end": "817340"
  },
  {
    "text": "2 to the k is the size\nof the tree times n because I maybe delete\nn things at every node.",
    "start": "817340",
    "end": "823380"
  },
  {
    "text": "And that's one of\nthe simplest FPT algorithms for vertex cover. There are much\ncooler, fancier ones.",
    "start": "823380",
    "end": "828759"
  },
  {
    "text": "But this is now going\nto be about hardness, so I will stop with algorithms. ",
    "start": "828759",
    "end": "835470"
  },
  {
    "text": "Also related is a\nstronger notion of PTAS.",
    "start": "835470",
    "end": "841769"
  },
  {
    "text": " So I mentioned\nbefore, with PTAS, you",
    "start": "841770",
    "end": "849470"
  },
  {
    "text": "could have a running time\nsomething like n to the 2",
    "start": "849470",
    "end": "854501"
  },
  {
    "text": "to the 1 over epsilon--\nwhich is actually fairly common in a lot\nof PTASes, not so great.",
    "start": "854501",
    "end": "860120"
  },
  {
    "text": "If epsilon is anything\ngood, then this is going to be a\nreally huge polynomial.",
    "start": "860120",
    "end": "866399"
  },
  {
    "text": "Well, the corresponding\nnotion in FPT land is a running time\nof f of epsilon--",
    "start": "866400",
    "end": "877770"
  },
  {
    "text": "or, I'll write 1 over epsilon. It doesn't matter--\ntimes n to the order 1.",
    "start": "877770",
    "end": "883630"
  },
  {
    "text": "So this is really saying that\nthe approximation scheme is FPT",
    "start": "883630",
    "end": "890000"
  },
  {
    "text": "with respect to 1 over epsilon. This is to get a 1 plus\nepsilon approximation.",
    "start": "890000",
    "end": "896630"
  },
  {
    "text": "So this is relating\nthe two worlds. If you want a FPT algorithm\nfor approximating a problem and getting within a factor\nof 1 over epsilon, if you",
    "start": "896630",
    "end": "903470"
  },
  {
    "text": "get this kind of\nrunning time verses this kind of running time, I\nconsider this good, this bad.",
    "start": "903470",
    "end": "910940"
  },
  {
    "text": "And in general, these are called\nEfficient PTASes, or EPTAS.",
    "start": "910940",
    "end": "916690"
  },
  {
    "text": "And in general, if\nyou have an EPTAS, you also have an FPT\nalgorithm with respect",
    "start": "916690",
    "end": "925510"
  },
  {
    "text": "to the natural parameter,\nwhich is to basically compute",
    "start": "925510",
    "end": "936480"
  },
  {
    "text": "what the optimal value is,\nbecause you can let epsilon be",
    "start": "936480",
    "end": "942180"
  },
  {
    "text": "something like 1 over 2k--\nthat ought to do it-- something",
    "start": "942180",
    "end": "950060"
  },
  {
    "text": "less than 1 over k. You're trying to\ndecide whether you",
    "start": "950060",
    "end": "955070"
  },
  {
    "text": "have a solution of less\nthan or equal to k or not, whether optimal is\nstrictly greater than k. And I said k is an\ninteger, so this",
    "start": "955070",
    "end": "963940"
  },
  {
    "text": "is an integer valued problem\nyou're trying to optimize. And so the difference\nbecame k and k plus 1,",
    "start": "963940",
    "end": "969080"
  },
  {
    "text": "multiplicatively, is about\n1 plus 1 over k factor. It's exactly 1 plus 1 over k.",
    "start": "969080",
    "end": "975770"
  },
  {
    "text": "So if we let epsilon be\nsmaller than 1 over k, then to get within a\nmultiplicative factor of 1",
    "start": "975770",
    "end": "981129"
  },
  {
    "text": "plus 1/2 1 over k,\nyou actually have to be within an additive plus\n1 of the right answer at k.",
    "start": "981130",
    "end": "988010"
  },
  {
    "text": "So this will decide whether\nopt is less than or equal to k",
    "start": "988010",
    "end": "996957"
  },
  {
    "text": "based on whether that\napproximation algorithm will give you something of value\nat most k or strictly bigger.",
    "start": "996957",
    "end": "1002720"
  },
  {
    "text": "Strictly bigger\nwould be k plus 1. So this is particularly\ninteresting",
    "start": "1002720",
    "end": "1009199"
  },
  {
    "text": "because it means if a\nproblem is not in FPT,",
    "start": "1009200",
    "end": "1014630"
  },
  {
    "text": "then it does not have\nan Efficient PTAS. So we can use-- before,\nin previous lectures,",
    "start": "1014630",
    "end": "1023340"
  },
  {
    "text": "PTAS was considered gold. Now, we can distinguish\nbetween EPTAS and PTAS.",
    "start": "1023340",
    "end": "1028740"
  },
  {
    "text": "And there are problems\nthat have PTASs that do not have FPT\nalgorithms assuming",
    "start": "1028740",
    "end": "1034459"
  },
  {
    "text": "FPT does not equal w1-- an\nassumption we will get to in a moment. So if you can, in general,\nestablish something is probably",
    "start": "1034460",
    "end": "1041689"
  },
  {
    "text": "not in FPT, then we get\nit probably does not have an Efficient PTAS. So this is useful for lower\nbounds about approximation.",
    "start": "1041690",
    "end": "1048020"
  },
  {
    "text": "Even if you don't care about\nfixed parameter tractability, this will give us cool\nthings about approximability.",
    "start": "1048020",
    "end": "1053584"
  },
  {
    "text": "AUDIENCE: Can you give\na few examples of EPTAS? PROFESSOR: A few\nexamples of EPTAS.",
    "start": "1053584",
    "end": "1059770"
  },
  {
    "text": " For example, most of the planar\nresults I've talked about,",
    "start": "1059770",
    "end": "1065880"
  },
  {
    "text": "planar independence set, planar\nvertex cover, those things all have Efficient PTASs. ",
    "start": "1065880",
    "end": "1072724"
  },
  {
    "text": "But that gets us into the\nworld of bounded treewidth algorithms. But in general, if you have like\na-- a lot of bounded treewidth",
    "start": "1072724",
    "end": "1079240"
  },
  {
    "text": "algorithms are FPT. There will be some exponential\nin treewidth times polynomial n",
    "start": "1079240",
    "end": "1084640"
  },
  {
    "text": "So a lot of times,\nyou can use those to get EPTASs for planar\nand h-minor free problems.",
    "start": "1084640",
    "end": "1091300"
  },
  {
    "text": "So that's one set of examples. There's no short\nexample I can give you, but that's a big class.",
    "start": "1091300",
    "end": "1098370"
  },
  {
    "text": "So for either reason,\neither you want to solve problems\nfor small k or you",
    "start": "1098370",
    "end": "1104180"
  },
  {
    "text": "want to figure out\nwhether there's an EPTAS, how can we prove that problems\nare hard in this world using",
    "start": "1104180",
    "end": "1109899"
  },
  {
    "text": "reductions like usual? So in this context,\nluckily, there's",
    "start": "1109900",
    "end": "1116120"
  },
  {
    "text": "only one type of\nreduction we need to learn unlike approximation\nwhere there were a lot. ",
    "start": "1116120",
    "end": "1125860"
  },
  {
    "text": "And I'll call it\nparameterized reduction although throughout this\nlecture and the next one I'll just say reduction usually\nbecause we're always talking",
    "start": "1125860",
    "end": "1132860"
  },
  {
    "text": "about parameterized problems. So in general, we have some\nproblem A-- decision problem A",
    "start": "1132860",
    "end": "1138919"
  },
  {
    "text": "and parameter k. And we want to convert into\nsome decision problem B with parameter k prime.",
    "start": "1138920",
    "end": "1146810"
  },
  {
    "text": "And of course, as usual,\nthe set up is we're given an instance x.",
    "start": "1146810",
    "end": "1153720"
  },
  {
    "text": "This is going to look almost\nidentical to NP Karp-style reductions, but then we're going\nto have one extra condition.",
    "start": "1153720",
    "end": "1161590"
  },
  {
    "text": "So instance x of\nA gets mapped to by a function f to an\ninstance x prime of B. X prime",
    "start": "1161590",
    "end": "1171539"
  },
  {
    "text": "is f o x as usual. This needs to be a\npolynomial time function",
    "start": "1171540",
    "end": "1182150"
  },
  {
    "text": "just like for NP reductions,\nwhich means, in particular, x prime has polynomials\nsize reduced back to x.",
    "start": "1182150",
    "end": "1189840"
  },
  {
    "text": "It should be answer preserving. ",
    "start": "1189840",
    "end": "1197179"
  },
  {
    "text": "So x is yes instance\nfor A if and only",
    "start": "1197180",
    "end": "1203340"
  },
  {
    "text": "x prime is a yes instance for B. So, so far, exactly\nNP reductions.",
    "start": "1203340",
    "end": "1210480"
  },
  {
    "text": "And then when we\nneed one extra thing which is parameter preserving.",
    "start": "1210480",
    "end": "1215970"
  },
  {
    "start": "1215970",
    "end": "1221740"
  },
  {
    "text": "This is there's some function\ng, which I'll call the parameter",
    "start": "1221740",
    "end": "1243880"
  },
  {
    "text": "blow up-- or, I guess you\ncall it parameter growth for g-- such that\nthe new parameter",
    "start": "1243880",
    "end": "1249990"
  },
  {
    "text": "value for the\nconverted instance is, at most, that function\nof the original parameter value of the original instance.",
    "start": "1249990",
    "end": "1256440"
  },
  {
    "text": "Question? AUDIENCE: Are there any\nlimits on the amount of time that g can take to compute?",
    "start": "1256440",
    "end": "1261929"
  },
  {
    "text": "PROFESSOR: g should be\na computable function. I think that's all we need.",
    "start": "1261930",
    "end": "1268290"
  },
  {
    "text": "Probably polynomial\ntime is also a fine, but usually this is going to\nbe like linear or polynomial",
    "start": "1268290",
    "end": "1276659"
  },
  {
    "text": "or exponential. It's rarely some\ninsanely large thing, but computable would be nice.",
    "start": "1276660",
    "end": "1282500"
  },
  {
    "start": "1282500",
    "end": "1288730"
  },
  {
    "text": "Cool. So that is our notion of\nparameterized reduction. And the consequence,\nif this exists",
    "start": "1288730",
    "end": "1297350"
  },
  {
    "text": "and B is fixed\nparameter tractable, then A is because we can\ntake an instance of A",
    "start": "1297350",
    "end": "1307140"
  },
  {
    "text": "converting it to B. If\nthe original parameter was founded by some k,\nthis new parameter",
    "start": "1307140",
    "end": "1313720"
  },
  {
    "text": "will be bounded by g of k. New instance will be\nbounded of g of k. So we run the FPT\nalgorithm for B,",
    "start": "1313720",
    "end": "1321120"
  },
  {
    "text": "and that gives us the answer\nto the original instance of A.",
    "start": "1321120",
    "end": "1326890"
  },
  {
    "text": "So if we don't care about\nwhat this function is,",
    "start": "1326890",
    "end": "1335020"
  },
  {
    "text": "we are basically\ncomposing functions. So there's some f dependence\non k in this algorithm,",
    "start": "1335020",
    "end": "1341309"
  },
  {
    "text": "and we're taking that function\nof g of k is our new function. And we get a new dependence on\nk and the running time over FPT.",
    "start": "1341310",
    "end": "1350610"
  },
  {
    "text": "So what that means\nis if we believe it A does not have an FPT, then\nB does not have an FPT if we",
    "start": "1350610",
    "end": "1356820"
  },
  {
    "text": "can do these reductions. So same style, we're\ngoing to reduce from a problem we know is\nhard, A, into a problem",
    "start": "1356820",
    "end": "1362240"
  },
  {
    "text": "that we don't know about, and\nthat proves B is hard as well. Yeah? AUDIENCE: What is\nthe relationship",
    "start": "1362240",
    "end": "1368196"
  },
  {
    "text": "between FPT and XP?  Is there like a difference? PROFESSOR: Yeah",
    "start": "1368196",
    "end": "1373661"
  },
  {
    "text": "AUDIENCE: If there's overlap. PROFESSOR: Well, FPT\nis contained in XP. And they are different if you\nbelieve the exponential time",
    "start": "1373661",
    "end": "1382530"
  },
  {
    "text": "hypothesis. If you believe SAT\ndoes not have two to the little of n algorithms--\nif that's not possible for SAT,",
    "start": "1382530",
    "end": "1393289"
  },
  {
    "text": "then XP and FPT are different,\nand much, much more things are different. But we'll talk about that\nmore next class-- relating",
    "start": "1393290",
    "end": "1401320"
  },
  {
    "text": "to exponential time hypothesis. So at this moment, we don't\nreally care what g is.",
    "start": "1401320",
    "end": "1407330"
  },
  {
    "text": "But if you assume\nexponential time hypothesis, then g matters, and you\ncan get very explicit lower",
    "start": "1407330",
    "end": "1414800"
  },
  {
    "text": "bounds about how good an\nalgorithm you could hope for. So we won't just prove you're\nprobably not an-- we won't just",
    "start": "1414800",
    "end": "1422160"
  },
  {
    "text": "prove you're not an FPT, but we\nwill give an actual lower bound and how much running\ntime you need, something like n\nto the little k.",
    "start": "1422160",
    "end": "1428600"
  },
  {
    "text": "But the running time we get\nwill depend on this blow up function. So next class, we'll\ncare about what g is.",
    "start": "1428600",
    "end": "1435320"
  },
  {
    "text": "So I do try to minimize it,\nbut so far we don't care. Any g is fine. ",
    "start": "1435320",
    "end": "1445620"
  },
  {
    "text": "XP will not turn\nout to be the class that we think about very often. There are things in between that\nare a lot easier to work with,",
    "start": "1445620",
    "end": "1451770"
  },
  {
    "text": "which we will get to. In particular, W1\nis the most common.",
    "start": "1451770",
    "end": "1457540"
  },
  {
    "text": "So let me do two examples. One of which is a correct\nexample and the other is not.",
    "start": "1457540",
    "end": "1463870"
  },
  {
    "text": "And you can help me\nfigure out which is which. Independent set to\nvertex cover, these",
    "start": "1463870",
    "end": "1470149"
  },
  {
    "text": "are reductions\nwe've seen before. We have tons of\nreductions, but usually we weren't thinking\nabout parameters.",
    "start": "1470150",
    "end": "1475830"
  },
  {
    "text": "And independent set\nto clique, these",
    "start": "1475830",
    "end": "1481539"
  },
  {
    "text": "are basically identical\nproblems left and right. And I want the\nnatural parameter.",
    "start": "1481540",
    "end": "1487539"
  },
  {
    "text": "Which of these is a parameter\npreserving reduction? I need some quiz show music.",
    "start": "1487540",
    "end": "1492755"
  },
  {
    "start": "1492755",
    "end": "1498242"
  },
  {
    "text": "AUDIENCE: The second. PROFESSOR: The second, yeah. Because if we take a\ngraph and a parameter k,",
    "start": "1498242",
    "end": "1503580"
  },
  {
    "text": "what we convert it to\nis the complement graph with the same parameter.",
    "start": "1503580",
    "end": "1509200"
  },
  {
    "text": "So that's obviously\nparameter preserving. Whereas independence\nset, these are complementary in\na different sense",
    "start": "1509200",
    "end": "1515230"
  },
  {
    "text": "that if you take everything\nthat's not in the independence set is a vertex cover. So it's actually the same\ngraph but with n minus k",
    "start": "1515230",
    "end": "1521940"
  },
  {
    "text": "as the new parameter. So this is not a\nparameterized reduction.",
    "start": "1521940",
    "end": "1527950"
  },
  {
    "text": "This is. And in fact, vertex cover,\nwe just showed is FPT.",
    "start": "1527950",
    "end": "1535909"
  },
  {
    "text": "Independence set is not, if you\nbelieve w1 does not equal FPT",
    "start": "1535910",
    "end": "1541140"
  },
  {
    "text": "or if you believe\nexponential time hypothesis. And that would contradict\nthis statement.",
    "start": "1541140",
    "end": "1547340"
  },
  {
    "text": "So this is definitely\nnot a valid reduction. But those are some pretty\ntrivial reductions.",
    "start": "1547340",
    "end": "1552380"
  },
  {
    "text": "Let's do some more\ninteresting things.",
    "start": "1552380",
    "end": "1558460"
  },
  {
    "text": "And I want to start to\nintroduce the notion of w1. ",
    "start": "1558460",
    "end": "1585900"
  },
  {
    "text": "I won't define w1 yet. I'd like to wait a little bit\nbecause the definition is not",
    "start": "1585900",
    "end": "1591480"
  },
  {
    "text": "super intuitive, but here is a\nfairly intuitive hard problem that you should be fairly\nconvinced is not FPT.",
    "start": "1591480",
    "end": "1601130"
  },
  {
    "text": "So I'll call this k-step\nnon-deterministic Turing",
    "start": "1601130",
    "end": "1609141"
  },
  {
    "text": "machine. ",
    "start": "1609141",
    "end": "1615270"
  },
  {
    "text": "The one downside is I've never\nmentioned Turing machines in this class. I thought I could\nget away without it,",
    "start": "1615270",
    "end": "1621170"
  },
  {
    "text": "but I'm going to\nhave mention them. How many people\nknow what they are? Anyone does not?",
    "start": "1621170",
    "end": "1627710"
  },
  {
    "text": "OK, a couple. Here's a Turing machine. I will give you, very briefly,\na very non-standard definition",
    "start": "1627710",
    "end": "1635590"
  },
  {
    "text": "of a Turing machine. Let's think of-- so you\nhave this infinite tape, infinite memory, and\nfor our purposes,",
    "start": "1635590",
    "end": "1642880"
  },
  {
    "text": "these are not just\nbinary symbols, you can write up to n different\nsymbols on each of the squares.",
    "start": "1642880",
    "end": "1648770"
  },
  {
    "text": "So this is basically\nyour memory, but it's in the style of\nold-fashioned tape drives in that you-- In order to get\nto position k away from you,",
    "start": "1648770",
    "end": "1657159"
  },
  {
    "text": "you have to spin k time. So you can only step\none unit at a time. And this is basically\ncomputers that we are used to.",
    "start": "1657160",
    "end": "1665630"
  },
  {
    "text": "So let's say it has a\nsequence of instructions, and it has an\ninstruction pointer. And in general, I\nwant to the machine",
    "start": "1665630",
    "end": "1675269"
  },
  {
    "text": "to have order n\nstateS-- yeah, let's say",
    "start": "1675270",
    "end": "1684850"
  },
  {
    "text": "order n lines of code and order\nn options per cell of the tape.",
    "start": "1684850",
    "end": "1701647"
  },
  {
    "text": "This will look\nactually a little weird if you're used to\nTuring machines, but I want to use\nthis definition.",
    "start": "1701647",
    "end": "1707370"
  },
  {
    "text": "So it's basically a\nregular algorithm, but you're very limited\nthe number-- in the amount of internal state. These are basically\nregisters, but you",
    "start": "1707370",
    "end": "1713899"
  },
  {
    "text": "can have only a constant\nnumber of registers that vary from one to n. One of them will be what\nline of code are you on.",
    "start": "1713900",
    "end": "1720460"
  },
  {
    "text": "And then you have those lines of\ncode are instructions like jump here, compare these things,\nwrite a particular symbol",
    "start": "1720460",
    "end": "1728750"
  },
  {
    "text": "to the current square of the\ntape, move the tape left, move the tape right. So regular types of\ninstructions, let's",
    "start": "1728750",
    "end": "1735850"
  },
  {
    "text": "say, except you have\nthis weird tape thing. Now, I mentioned\nthese parameters.",
    "start": "1735850",
    "end": "1741225"
  },
  {
    "text": "And usually we think\nof Turing machines of having constant size,\nbut here I need an n, and I need a k.",
    "start": "1741225",
    "end": "1747090"
  },
  {
    "text": "Question? AUDIENCE: I was going\nto ask what n was. PROFESSOR: OK. So n is the input. I mean basically\nthe Turing machine",
    "start": "1747090",
    "end": "1752520"
  },
  {
    "text": "is specified by these things. You have order n\ninstructions, and we're",
    "start": "1752520",
    "end": "1758140"
  },
  {
    "text": "guaranteed there's only order\nn possible states, let's say. And now what we-- and this is\na non-deterministic machine.",
    "start": "1758140",
    "end": "1764880"
  },
  {
    "text": "Now non-determinism, we\nhave talked about this in the context of NP. A non-deterministic\nTuring machine",
    "start": "1764880",
    "end": "1772130"
  },
  {
    "text": "has a funny\ninstruction which says non-deterministically branch\nto one of n different locations",
    "start": "1772130",
    "end": "1778340"
  },
  {
    "text": "in my memory. Or, let's say choose\na symbol from my-- I have this alphabet that\nI'm using in my cell--",
    "start": "1778340",
    "end": "1787539"
  },
  {
    "text": "choose a symbol\nnon-deterministically. So I have order n choices\nmade non-deterministically.",
    "start": "1787540",
    "end": "1798780"
  },
  {
    "text": "In the usual sense of\nNP, that if there's any way for the Turing\nmachine to output, yes-- one of the instructions\nis output, yes-- then,",
    "start": "1798780",
    "end": "1806910"
  },
  {
    "text": "I will find it. These are guesses,\nand they're always lucky guesses, so I always\nend up finding the return,",
    "start": "1806910",
    "end": "1813140"
  },
  {
    "text": "yes, if there is such a path. Otherwise, all paths return, no,\nand then the machine returns, no.",
    "start": "1813140",
    "end": "1819451"
  },
  {
    "text": "Yeah? AUDIENCE: What does it mean\nfor the number of states to change as the input changes? PROFESSOR: I mean the\nstates are also given to you",
    "start": "1819451",
    "end": "1828320"
  },
  {
    "text": "as part of the Turing machine. There's not one\nturning machine-- well, there is actually one Turing\nmachine to rule them all,",
    "start": "1828320",
    "end": "1834493"
  },
  {
    "text": "but that's not the point here. I give you a machine that has--\nthink of this as firmware built",
    "start": "1834493",
    "end": "1841400"
  },
  {
    "text": "into the machine, and the\nnumber of states in the machine includes which instruction\nyou're currently executing.",
    "start": "1841400",
    "end": "1848040"
  },
  {
    "text": "So I mean this is\njust saying you're given an arbitrary machine\nof size-- of complexity n.",
    "start": "1848040",
    "end": "1853210"
  },
  {
    "text": "And usual Turing\nmachine land, there are n states because I give you\na state diagram with size n.",
    "start": "1853210",
    "end": "1858640"
  },
  {
    "text": "So you're given everything\nabout the Turing machine. So that is the input\nto this problem.",
    "start": "1858640",
    "end": "1863830"
  },
  {
    "text": "And the question is, can\nI find a return, yes,",
    "start": "1863830",
    "end": "1869090"
  },
  {
    "text": "solution that only\nis k steps long. So I'm given this huge\nmachine, and yet I",
    "start": "1869090",
    "end": "1874669"
  },
  {
    "text": "want a very short\nexecution of the machine. I want the running time to only\nbe k. k, again, is parameter.",
    "start": "1874670",
    "end": "1880899"
  },
  {
    "text": "n is big. k is small. So I want to know is there a\nyes path from the initial state",
    "start": "1880900",
    "end": "1891140"
  },
  {
    "text": "of length k. ",
    "start": "1891140",
    "end": "1898520"
  },
  {
    "text": "So this is basically--\nYeah, question? AUDIENCE: Are you given the\ninput to the Turing machine?",
    "start": "1898520",
    "end": "1904740"
  },
  {
    "text": "PROFESSOR: Yeah, let's\nsay it has no input. Input is all\nembedded in the code.",
    "start": "1904740",
    "end": "1910149"
  },
  {
    "text": "So the tape is initially blank. Good.",
    "start": "1910150",
    "end": "1915716"
  },
  {
    "text": "There's a reason I need\nto do Turing machines here instead of usual algorithms,\nbut if you define-- usually",
    "start": "1915717",
    "end": "1921500"
  },
  {
    "text": "NP is defined in\nterms of these things. So by analogy to NP, we expect\nthere are no lucky algorithms.",
    "start": "1921500",
    "end": "1928970"
  },
  {
    "text": "And so we expect\nthat when you have non-deterministic branches,\nthe best thing you can do is to try all the branches.",
    "start": "1928970",
    "end": "1935480"
  },
  {
    "text": "And so if I have an execution\ntime of k, and at each step, I can potentially make a\nnon-deterministic choice",
    "start": "1935480",
    "end": "1941280"
  },
  {
    "text": "among n different\noptions, then you would expect the best\nalgorithm is n to the k.",
    "start": "1941280",
    "end": "1948279"
  },
  {
    "text": "Try all the branches, that's\njust like our vertex cover algorithm, but in the bad case\nwhere I have branching factor n",
    "start": "1948280",
    "end": "1955930"
  },
  {
    "text": "instead of branching factor 2. So presumably, there's no way to\nreplace a guess among n options",
    "start": "1955930",
    "end": "1961980"
  },
  {
    "text": "with a guess among two options. That's an assumption.",
    "start": "1961980",
    "end": "1967680"
  },
  {
    "text": "And this problem is w1 complete.",
    "start": "1967680",
    "end": "1975810"
  },
  {
    "text": "I will to define\nw1 a little later, but for now, just\ntake this as given. You could define w1\ncomplete to mean problems",
    "start": "1975810",
    "end": "1983679"
  },
  {
    "text": "that are reducible via\nparameterized reductions to this problem. And then we'll get lots\nof examples of problems",
    "start": "1983680",
    "end": "1990270"
  },
  {
    "text": "that are as hard as this.  So a modulo the\nannoyance of having",
    "start": "1990270",
    "end": "1998220"
  },
  {
    "text": "to define Turing\nmachines, I think this is a pretty\nnatural assumption.",
    "start": "1998220",
    "end": "2003779"
  },
  {
    "text": "It's stronger than\np does not equal NP, so we would imply that.",
    "start": "2003780",
    "end": "2009200"
  },
  {
    "text": "So let's do some\nsimple reductions-- some reductions,\nmaybe not simple.",
    "start": "2009200",
    "end": "2015190"
  },
  {
    "text": " So I mentioned this\nproblem independent set.",
    "start": "2015190",
    "end": "2023240"
  },
  {
    "text": "That's also w1 complete. And to prove, first of\nall, that it's w1 hard,",
    "start": "2023240",
    "end": "2032190"
  },
  {
    "text": "I'm going to reduce this\nproblem to independent set. So I'm given a Turing\nmachine and a number k.",
    "start": "2032190",
    "end": "2040090"
  },
  {
    "text": "I want to convert\nit into a graph, and a number k such\nthat if there's an independent set of\nsize k in that graph,",
    "start": "2040090",
    "end": "2046330"
  },
  {
    "text": "at most k in that\ngraph if and only if there's an accept\npath of length at most",
    "start": "2046330",
    "end": "2051669"
  },
  {
    "text": "k in the Turing machine. So I'm going to skip\na lot of details because I've been a little vague\nabout how Turing machines work,",
    "start": "2051670",
    "end": "2059210"
  },
  {
    "text": "but the idea is nice. ",
    "start": "2059210",
    "end": "2075739"
  },
  {
    "text": "So my graph is actually\ngoing to consist mostly of k squared cliques.",
    "start": "2075739",
    "end": "2084480"
  },
  {
    "text": "The cliques are actually quite\nlarge because this graph has size n, total size, but\nthere's going to be k squared",
    "start": "2084480",
    "end": "2091069"
  },
  {
    "text": "clusters, which are cliques. Plus cliques, not very many\ndifferent cliques, only k",
    "start": "2091070",
    "end": "2098849"
  },
  {
    "text": "squared of them. And my target independent\nset is size k squared, which means if there's going\nto be an independent set,",
    "start": "2098850",
    "end": "2105829"
  },
  {
    "text": "I must choose exactly one\nvertex from each clique. ",
    "start": "2105830",
    "end": "2111869"
  },
  {
    "text": "So one vertex per clique.",
    "start": "2111870",
    "end": "2118420"
  },
  {
    "text": "Independence that has to\nhave no edges among them. So if I chose two\nfrom a clique, there would be an edge among\nthem, that's disallowed.",
    "start": "2118420",
    "end": "2126420"
  },
  {
    "text": "And so the cliques I'm\ngoing to parameterize by two parameters i and\nj between one and k.",
    "start": "2126420",
    "end": "2133560"
  },
  {
    "text": "And the idea is that ij\nrepresents memory cell i",
    "start": "2133560",
    "end": "2149150"
  },
  {
    "text": "at time j plus the\nstate of the machine.",
    "start": "2149150",
    "end": "2154880"
  },
  {
    "start": "2154880",
    "end": "2163579"
  },
  {
    "text": "So what I mean is there are\norder n states in the machine,",
    "start": "2163580",
    "end": "2169150"
  },
  {
    "text": "in general, that\ncompletely characterize what the machine is about to do\nand what it's thinking about,",
    "start": "2169150",
    "end": "2174210"
  },
  {
    "text": "all of its internal state. And so I'm just going\nto take those n states and plop them in. And each node in this clique\nrepresents one of those states.",
    "start": "2174210",
    "end": "2182565"
  },
  {
    "text": " But also I want to keep track\nof what symbol is written",
    "start": "2182565",
    "end": "2191220"
  },
  {
    "text": "on that square of the tape. And so, in general,\nmy running time is bounded by k-- also the\nnumber of squares I write",
    "start": "2191220",
    "end": "2197850"
  },
  {
    "text": "to the tape is bounded by k. Space is at most\ntime-- so I only have to worry about k different\ncells for times 1 up to k.",
    "start": "2197850",
    "end": "2206930"
  },
  {
    "text": " So there are only order n\nstates for this, only order n",
    "start": "2206930",
    "end": "2214240"
  },
  {
    "text": "states for this. So the size of each clique is\norder n squared polynomial.",
    "start": "2214240",
    "end": "2219710"
  },
  {
    "text": "That's cool. It's a messy clique. I won't try to draw what\nit really looks like.",
    "start": "2219710",
    "end": "2224711"
  },
  {
    "text": "And then the general\napproach is I'm going to add some edges\nbetween pairs of vertices",
    "start": "2224711",
    "end": "2229770"
  },
  {
    "text": "to say, well look, if this cell\nwas this thing at this time, and the state of the\nmachine was move right,",
    "start": "2229770",
    "end": "2235920"
  },
  {
    "text": "then you better not change what\nwas on the cell at that time because nothing changed. You weren't here.",
    "start": "2235920",
    "end": "2242310"
  },
  {
    "text": "So we can just forbid\nthat by saying, well, here is one state.",
    "start": "2242310",
    "end": "2247900"
  },
  {
    "text": "These two states should\nbe mutually exclusive. So if I choose this vertex\nin an independent set, I can't choose this vertex.",
    "start": "2247900",
    "end": "2254160"
  },
  {
    "text": "So you just draw all\nthese connections of forbidden things. If something is true\ntime i, times j,",
    "start": "2254160",
    "end": "2260650"
  },
  {
    "text": "then something else should\nnot be true at time j plus 1. You draw in all those\nconnections, and it works.",
    "start": "2260650",
    "end": "2267109"
  },
  {
    "text": "I'll leave it at that because\nthe details are messy, but it gives you some idea.",
    "start": "2267110",
    "end": "2273260"
  },
  {
    "text": "At this point, I can plug\na book on this topic that",
    "start": "2273260",
    "end": "2278340"
  },
  {
    "text": "is coming out next year, a\nlittle bit far in the future but it is-- I didn't write\nit down here of course.",
    "start": "2278340",
    "end": "2292559"
  },
  {
    "text": "Sorry. It is by these guys again,\nFomin, Kowalik, Lockshtanov,",
    "start": "2292560",
    "end": "2302230"
  },
  {
    "text": "Marx, Pilipczuck\nbrothers, and Saurabh. And it does go through the\ndetails, the gory details.",
    "start": "2302230",
    "end": "2311064"
  },
  {
    "text": "If you're interested in\nthat, I could share with you that section. But unfortunately, the\nbook is not released yet.",
    "start": "2311064",
    "end": "2318490"
  },
  {
    "text": "Cool. So that was a reduction\nto independent set, which",
    "start": "2318490",
    "end": "2325200"
  },
  {
    "text": "shows the independence\nset is at least as hard as this problem, which\nwe think is hard, w1 hard.",
    "start": "2325200",
    "end": "2331290"
  },
  {
    "text": "So that proves w1 hardness. But there's another question\nof is independent set in w1.",
    "start": "2331290",
    "end": "2336630"
  },
  {
    "text": "As you might guess from the name\nw1, there's more than just w1. There's w2 and w3\nand w4 and even more.",
    "start": "2336630",
    "end": "2344500"
  },
  {
    "text": "And there's no one\nnotion of hardness like we had with NP here, so\nwe get a bit of complexity",
    "start": "2344500",
    "end": "2349830"
  },
  {
    "text": "in that hierarchy. But in fact, independent set is\nw1 hard-- sorry-- w1 complete.",
    "start": "2349830",
    "end": "2357360"
  },
  {
    "text": "So we can do a reduction\nfrom independence set to Turing machine.",
    "start": "2357360",
    "end": "2366970"
  },
  {
    "text": "Let's say k-step\nnon-deterministic Turing machine.",
    "start": "2366970",
    "end": "2372140"
  },
  {
    "start": "2372140",
    "end": "2379150"
  },
  {
    "text": "And the idea is pretty simple. ",
    "start": "2379150",
    "end": "2402329"
  },
  {
    "text": "We have k-steps, so let's\nguess all the vertices. ",
    "start": "2402330",
    "end": "2408126"
  },
  {
    "text": "You can see here\nthis is where we need the ability to guess\namong n different options in each guess step.",
    "start": "2408126",
    "end": "2413301"
  },
  {
    "text": "So we're given-- we want\nto know whether there's an independent set\nof size k, so guess all those vertices of\nsize k and then check it.",
    "start": "2413301",
    "end": "2420349"
  },
  {
    "text": "So this was our XP\nalgorithm, but now phrased as a non-deterministic\nTuring machine algorithm.",
    "start": "2420350",
    "end": "2427359"
  },
  {
    "text": "And it's a little bit subtle\nwhat it means to check. ",
    "start": "2427360",
    "end": "2441800"
  },
  {
    "text": "Of course, what we\nwant to do is make sure there's no edge between any\npair of the chosen vertices.",
    "start": "2441800",
    "end": "2448580"
  },
  {
    "text": "So what we're going to do is\nwhen we guess these k vertices, we're going to write them one\nat a time on the tape squares.",
    "start": "2448580",
    "end": "2454420"
  },
  {
    "text": "So we'll use k tape squares\nto store the k vertices that we've chosen. Then, we want to check\neach pair of them.",
    "start": "2454420",
    "end": "2461380"
  },
  {
    "text": "So this is like a\ndoubly nested loop for each vertex among the k,\nfor each vertex among the k.",
    "start": "2461380",
    "end": "2466664"
  },
  {
    "text": "So what that means\nis you're going to have to-- sorry,\nthat's a little bit annoying-- loop through\nthe vertices on one tape.",
    "start": "2466664",
    "end": "2478810"
  },
  {
    "text": "And then the fun\npart is the graph is encoded inside the machine.",
    "start": "2478810",
    "end": "2484270"
  },
  {
    "text": "You could think of\nthere being a data section within the code that\nsays where all the edges are.",
    "start": "2484270",
    "end": "2489480"
  },
  {
    "text": "The graph is size n, and so\nyou can put the entire graph into the machine. And then given two\nvertices, you could",
    "start": "2489480",
    "end": "2496190"
  },
  {
    "text": "check that there is indeed\nno edge between them basically by using the\ncode as a look-up table.",
    "start": "2496190",
    "end": "2501619"
  },
  {
    "text": "Say hey, is there a\nvertex from i to j.",
    "start": "2501620",
    "end": "2506850"
  },
  {
    "text": "If yes, then we're in\ntrouble, abort this option, try the other guesses.",
    "start": "2506850",
    "end": "2512270"
  },
  {
    "text": "If you look up in the table\nand it says there's no edge, then you keep going.",
    "start": "2512270",
    "end": "2517470"
  },
  {
    "text": "So you test all the\npairs, make sure there's no edge by-- the code, as it\nis, is a constant size algorithm",
    "start": "2517470",
    "end": "2523790"
  },
  {
    "text": "which looks like this\nplus an order n size thing, which is the\nlook-up table for what",
    "start": "2523790",
    "end": "2531560"
  },
  {
    "text": "edges are in the graph. So that part's a\nlittle bit weird. Yeah? AUDIENCE: So in case of the k\nin k vertices aren't the same k?",
    "start": "2531560",
    "end": "2539220"
  },
  {
    "text": "PROFESSOR: That's right. I'm sorry. This is k prime. ",
    "start": "2539220",
    "end": "2545869"
  },
  {
    "text": "Yes. So probably k prime here\nis exactly order k squared. Thank you.",
    "start": "2545870",
    "end": "2551664"
  },
  {
    "text": "It makes me a little happier. Because I'm doing this\ndoubly nested loop, I'm going to have to loop\nover this thing several times.",
    "start": "2551664",
    "end": "2557310"
  },
  {
    "text": "I would look at\nthe first vertex, memorize it by reloading\nit into a register, and then loop over all the\nother guys for each of them",
    "start": "2557310",
    "end": "2564272"
  },
  {
    "text": "check that they're bad. So I'm going to have to go\nover the tape k squared steps. ",
    "start": "2564272",
    "end": "2573750"
  },
  {
    "text": "And also n prime is whatever. We get a machine\nthat's size-- basically",
    "start": "2573750",
    "end": "2579750"
  },
  {
    "text": "the size of the graph\nV plus E. So the point",
    "start": "2579750",
    "end": "2586360"
  },
  {
    "text": "of doing that was to\nshow the independence set is also w1 complete. So if you were not happy\nwith Turing machines,",
    "start": "2586360",
    "end": "2593580"
  },
  {
    "text": "now you can completely\nforget about them. They are mainly used\nhere as motivation",
    "start": "2593580",
    "end": "2598660"
  },
  {
    "text": "for why you should expect\nthis problem to be hard. But it's equally difficult from\na parameterization perspective.",
    "start": "2598660",
    "end": "2605750"
  },
  {
    "text": "If you ignore how\nbig the blow up is, it's just as hard as\nan independence set. So independence set\nis a problem we think",
    "start": "2605750",
    "end": "2612170"
  },
  {
    "text": "there's no good algorithm. And by this reduction, and\nalso the reverse reduction,",
    "start": "2612170",
    "end": "2619750"
  },
  {
    "text": "clique is also w1 complete. ",
    "start": "2619750",
    "end": "2626210"
  },
  {
    "text": "So a bunch more reductions. ",
    "start": "2626210",
    "end": "2641800"
  },
  {
    "text": "In general, most w1 hardness\nresults start from clique. So that's a good problem to\nknow about, or independent sets,",
    "start": "2641800",
    "end": "2649080"
  },
  {
    "text": "I think. And there are some\nsimpler versions of clique that are also hard.",
    "start": "2649080",
    "end": "2654800"
  },
  {
    "text": "So first one is clique\nin regular graphs.",
    "start": "2654800",
    "end": "2660315"
  },
  {
    "text": " So it's helpful to assume\nall the vertices have",
    "start": "2660315",
    "end": "2668869"
  },
  {
    "text": "exactly the same degree. Is it hard in three\nregular graphs? No. Because three regular is\nonly a clique of size three.",
    "start": "2668870",
    "end": "2675829"
  },
  {
    "text": "So that's pretty easy. But in s regular graphs, the\ndegree is going to be huge,",
    "start": "2675830",
    "end": "2682620"
  },
  {
    "text": "going to be some function of n. Clique is hard, and\nin general, let's say",
    "start": "2682620",
    "end": "2690190"
  },
  {
    "text": "capital delta is the maximum\ndegree in your given graph, and we want to convert it\ninto a delta regular graph.",
    "start": "2690190",
    "end": "2699140"
  },
  {
    "text": "So we're going to increase all\nthe lower degrees up to delta. What we're going to do is take\ndelta copies of the graph.",
    "start": "2699140",
    "end": "2708549"
  },
  {
    "text": " So for every old vertex,\nwe get delta copies of it.",
    "start": "2708550",
    "end": "2716390"
  },
  {
    "text": " And then we do this reduction.",
    "start": "2716390",
    "end": "2723250"
  },
  {
    "text": "So the blue is the original--\nis the graph that's been duplicated delta times. Here, delta is 5.",
    "start": "2723250",
    "end": "2729807"
  },
  {
    "text": "But suppose, in the\ngraph, this vertex only had degree 3, some\nnumber less than 5. Then, what we're\ngoing to do is create",
    "start": "2729807",
    "end": "2736440"
  },
  {
    "text": "delta minus d new vertices\nand then add a biclique here, bipartite clique, connecting all\nof those delta minus d things",
    "start": "2736440",
    "end": "2744930"
  },
  {
    "text": "to all of these delta things. They're delta copies\nof the original vertex.",
    "start": "2744930",
    "end": "2751250"
  },
  {
    "text": "This is v over here,\nv1 through v delta. And so what that means\nis these vertices",
    "start": "2751250",
    "end": "2756670"
  },
  {
    "text": "will have entered degree delta\nbecause there were delta things to connect to over there.",
    "start": "2756670",
    "end": "2761900"
  },
  {
    "text": "And now these things\nwill have degree delta because they used\nto have degree d, and now they have\nan additional degree delta minus d on the left.",
    "start": "2761900",
    "end": "2769830"
  },
  {
    "text": "So cool, everything's\nnow delta regular. And I claim that this\nreduction preserve cliques because if you look at\nthese added vertices,",
    "start": "2769830",
    "end": "2779869"
  },
  {
    "text": "they do not belong\nto any triangles. This thing here is an\ninduced bipartite graph,",
    "start": "2779870",
    "end": "2787330"
  },
  {
    "text": "and so there are no\ntriangles, no things of size-- no cycles of size 3 because\nall cycles are even here,",
    "start": "2787330",
    "end": "2794599"
  },
  {
    "text": "which means if\nyou're in a clique-- if you have three\nguys in a clique, then they better have\ntriangles everywhere.",
    "start": "2794600",
    "end": "2802215"
  },
  {
    "text": "So if you put one of\nthese vertices in, you'll have a very small\nclique, namely size 2. And there are always cliques\nof size 2 in a graph.",
    "start": "2802215",
    "end": "2809079"
  },
  {
    "text": "There's at least one edge. So if there was at\nleast one edge before, afterwards, we do not increase\nany of the clique sizes.",
    "start": "2809080",
    "end": "2815750"
  },
  {
    "text": "So clique size is preserved. Everything's cool. So in this situation\nk prime equals",
    "start": "2815750",
    "end": "2821980"
  },
  {
    "text": "k when you blow up anything,\nexcept the graph size, of course. That got a little bigger.",
    "start": "2821980",
    "end": "2828192"
  },
  {
    "text": "And now everything's\ndelta regular. Le me give you an example\nof why this is useful.",
    "start": "2828192",
    "end": "2833319"
  },
  {
    "text": " Of course, every time I say\nsomething is true of clique,",
    "start": "2833320",
    "end": "2840190"
  },
  {
    "text": "it's also true of\nindependence set. You can just flip things. Here, we have to be\na little careful,",
    "start": "2840190",
    "end": "2845589"
  },
  {
    "text": "but when you complement\na graph, if you started with a regular\ngraph, your new graph will also be regular.",
    "start": "2845590",
    "end": "2851780"
  },
  {
    "text": "Every vertex would\nhave degree n minus 1 minus delta or n minus\ndelta, something like that.",
    "start": "2851780",
    "end": "2856918"
  },
  {
    "text": " So here's another problem,\neerily similar to vertex cover,",
    "start": "2856918",
    "end": "2868094"
  },
  {
    "text": "called partial vertex cover. This is also w1 complete.",
    "start": "2868094",
    "end": "2873770"
  },
  {
    "text": "We want to know, can I choose\nk vertices that cover l edges?",
    "start": "2873770",
    "end": "2882745"
  },
  {
    "text": " So usually vertex cover, you\nneed to cover all the edges,",
    "start": "2882745",
    "end": "2889950"
  },
  {
    "text": "and that let us do some\ncrazy things because whenever we looked at an edge, we\nknew one of the two things was in the vertex cover.",
    "start": "2889950",
    "end": "2895670"
  },
  {
    "text": "Now, we don't know that anymore. Now, it's a matter\nof which vertices get the most bang for your buck.",
    "start": "2895670",
    "end": "2902210"
  },
  {
    "text": "And this is easy to reduce from\ndelta regular independence set",
    "start": "2902210",
    "end": "2920450"
  },
  {
    "text": "because-- k independence set\nif we want to be explicit. We want to know is there an\nindependent set of size k.",
    "start": "2920450",
    "end": "2927350"
  },
  {
    "text": "I just give that to\npartial vertex cover with k prime equal\nto delta times k.",
    "start": "2927350",
    "end": "2935270"
  },
  {
    "text": "Sorry, that's l prime\nis delta times k.",
    "start": "2935270",
    "end": "2940970"
  },
  {
    "text": "So the idea is here I want\nto choose k vertices that are independent. And if I can do that, I will be\nable to choose k vertices that",
    "start": "2940970",
    "end": "2948340"
  },
  {
    "text": "cover exactly\ndelta times k edges because if they're\nindependent, none of the edges will be shared among\nmy independence set.",
    "start": "2948340",
    "end": "2953710"
  },
  {
    "text": "And this is if and only if. If I try to choose k vertices\nthat cover exactly delta k edges, then they\ncan't be adjacent.",
    "start": "2953710",
    "end": "2962190"
  },
  {
    "text": "The vertices can be adjacent. So these problems become\nthe same under this mapping, so I didn't even blow up.",
    "start": "2962190",
    "end": "2968000"
  },
  {
    "text": "My parameter here is k. I forgot to mention. I mean you could guess from the\nletter, but parameterized by k,",
    "start": "2968000",
    "end": "2974290"
  },
  {
    "text": "this problem is w1 complete. Parameterized by l,\nthis problem is FPT. So be a little careful.",
    "start": "2974290",
    "end": "2981850"
  },
  {
    "text": "But here's the reduction for k. There is no reduction\nfor-- there's only",
    "start": "2981850",
    "end": "2987690"
  },
  {
    "text": "good reductions for l. So there we are clearly using\nthat the graph was regular.",
    "start": "2987690",
    "end": "2994560"
  },
  {
    "text": "Otherwise, it would be\nat most k-- at most delta for everybody, and\nthen it's hard to get the actual independence.",
    "start": "2994560",
    "end": "2999929"
  },
  {
    "text": "Yeah. AUDIENCE: Sorry, I'm\nstill a bit confused about the relationship\nbetween w1 and XP and FPT.",
    "start": "2999929",
    "end": "3005750"
  },
  {
    "text": "I don't know what w1 is. PROFESSOR: Yeah,\nwell we'll get there. For now, you can think\nw1 is all problems they",
    "start": "3005750",
    "end": "3012760"
  },
  {
    "text": "can be parameterized, reduced to\nk-step non-deterministic Turing machine. That's a fine definition.",
    "start": "3012760",
    "end": "3018210"
  },
  {
    "text": "Some people use that. And in general, FPT\nis contained in w1.",
    "start": "3018210",
    "end": "3023484"
  },
  {
    "text": "It's contained in other\nthings, which we will get to. w2 and so on is all\ncontained in XP.",
    "start": "3023485",
    "end": "3030490"
  },
  {
    "text": "And these are strict if you\nbelieve exponential time hypothesis. So if you believe there are\nno sub exponential algorithms",
    "start": "3030490",
    "end": "3036730"
  },
  {
    "text": "for SAT, then this problem has\nno FPT algorithm with respect to k and all the\nw1 complete things.",
    "start": "3036730",
    "end": "3044419"
  },
  {
    "text": "I mean from a complexity\ntheory standpoint, it will be fun to look\nat these larger classes. From is there an FPT\nalgorithm standpoint,",
    "start": "3044419",
    "end": "3051030"
  },
  {
    "text": "all you care about\nis it's not here. And any hardness,\nw1 or worse, will",
    "start": "3051030",
    "end": "3057090"
  },
  {
    "text": "imply there's no FPT\nalgorithm if you assume ETH. AUDIENCE: Do you know if any\nof these inclusions are strict?",
    "start": "3057090",
    "end": "3062770"
  },
  {
    "text": "PROFESSOR: Like I said,\nthey're all strict if you assume exponential\ntime hypothesis. ",
    "start": "3062770",
    "end": "3068640"
  },
  {
    "text": "If you prove XP is\ndifferent from FPT, then you prove P does not\nequal NP, I think, pretty sure.",
    "start": "3068640",
    "end": "3077190"
  },
  {
    "text": "So we're not going to\nnon-categorically say these things are strict, because\nthese are all stronger versions",
    "start": "3077190",
    "end": "3084119"
  },
  {
    "text": "of P does not equal NP. But if you believe\nexponential time hypothesis, then they're all strict.",
    "start": "3084120",
    "end": "3090110"
  },
  {
    "text": "So that's one\nstandard assumption that gives us everything.",
    "start": "3090110",
    "end": "3096200"
  },
  {
    "text": "Cool, let me give you another\nversion of clique that's hard. ",
    "start": "3096200",
    "end": "3117020"
  },
  {
    "text": "Mufti-colored clique if you\nremember way back to three",
    "start": "3117020",
    "end": "3128840"
  },
  {
    "text": "partition, we had a\nvariation on three partition called numerical\nthree-dimensional matching",
    "start": "3128840",
    "end": "3134520"
  },
  {
    "text": "where you had to choose\nyour triples from three different sets. So this is the analog\nof that, or the analog",
    "start": "3134520",
    "end": "3141391"
  },
  {
    "text": "of three-dimensional\nmatching where you had three different\nsets of vertices. For clique here, set\nthe vertices partition",
    "start": "3141392",
    "end": "3149410"
  },
  {
    "text": "into k clusters.",
    "start": "3149410",
    "end": "3155329"
  },
  {
    "text": "And the question is, is there\nk clique with one vertex",
    "start": "3155330",
    "end": "3164910"
  },
  {
    "text": "per cluster? ",
    "start": "3164910",
    "end": "3170410"
  },
  {
    "text": "And in fact, so you think of\nthese things as being colored, color 1, and these\nare color k and so on.",
    "start": "3170410",
    "end": "3176360"
  },
  {
    "text": "And in fact, we can assume\nthis is a proper coloring because if you're not allowed\nto choose two vertices from one",
    "start": "3176360",
    "end": "3182960"
  },
  {
    "text": "class, then there's no reason\nto have edges between vertices of the same color. So this is in fact a\nk-coloring of the graph.",
    "start": "3182960",
    "end": "3193020"
  },
  {
    "text": "So we are given a k-color graph. And we want to know,\ndoes it have a k clique?",
    "start": "3193020",
    "end": "3198740"
  },
  {
    "text": "And if it has a d clique\nand it's k-colored, then in particular, you will\nhave exactly one vertex",
    "start": "3198740",
    "end": "3203790"
  },
  {
    "text": "per color class.  We can prove this is hard\nby a reduction from clique.",
    "start": "3203790",
    "end": "3213205"
  },
  {
    "start": "3213205",
    "end": "3221400"
  },
  {
    "text": "Namely, if we have\na vertex v, we're going to make k copies of it. ",
    "start": "3221400",
    "end": "3228699"
  },
  {
    "text": "You'll see this\nis a common trick. ",
    "start": "3228699",
    "end": "3235260"
  },
  {
    "text": "And we will color\nthem 1 to up to k.",
    "start": "3235260",
    "end": "3240760"
  },
  {
    "text": "So good, now we have\nvertices in each color class.",
    "start": "3240760",
    "end": "3245890"
  },
  {
    "text": "And then if we have an edge\n(v,w) convert it into edges",
    "start": "3245890",
    "end": "3252809"
  },
  {
    "text": "(vi, wj) for all\ni not equal to j.",
    "start": "3252810",
    "end": "3259420"
  },
  {
    "text": "So pretty much the\nobvious reduction. Once you said make k copies,\nwe'll also duplicate the edges",
    "start": "3259420",
    "end": "3264887"
  },
  {
    "text": "in all versions except, because\nit's supposed to be a k-color, we're not allowed\nto connect (vi,wi).",
    "start": "3264887",
    "end": "3271190"
  },
  {
    "text": "But otherwise, we'll just\nthrow in all of those edges. And the point is this,\nagain, doesn't really",
    "start": "3271190",
    "end": "3276230"
  },
  {
    "text": "blow up your cliques\nbecause if you have some clique\nin this structure, you can just forget\nabout the i indices.",
    "start": "3276230",
    "end": "3282480"
  },
  {
    "text": "Because you know\nit's a clique, you will never choose two\nverses from the same color class, two vertices\nwith the same index,",
    "start": "3282480",
    "end": "3289734"
  },
  {
    "text": "and so you can take any\nclique here and collapse it to a clique here. Conversely, if you\nhave a clique here, you can just assign those\nvertices arbitrary numbers",
    "start": "3289735",
    "end": "3297013"
  },
  {
    "text": "as long as they're all\ndistinct any permutation of one through k, and you'll\nget a clique down here. So it's the same problem.",
    "start": "3297013",
    "end": "3302360"
  },
  {
    "text": "Question? AUDIENCE: That v is different\nfrom the v above it, right? PROFESSOR: Yeah, this is\nfor all v and for all vw.",
    "start": "3302360",
    "end": "3309849"
  },
  {
    "text": " If there's an edge in the\ngraph, then we do that.",
    "start": "3309850",
    "end": "3317819"
  },
  {
    "text": "And if there's a vertex\nin the graph, we do that. Cool.",
    "start": "3317820",
    "end": "3324270"
  },
  {
    "text": "So k prime here equals\nk, no expansion. ",
    "start": "3324270",
    "end": "3331089"
  },
  {
    "text": "This may seem trivial,\nbut it's actually a fairly recent innovation to\nthink about multicolor clique",
    "start": "3331090",
    "end": "3337690"
  },
  {
    "text": "and, in general, it\nsimplifies proofs. I have heard of proofs\nsimplifying from tens of pages",
    "start": "3337690",
    "end": "3342820"
  },
  {
    "text": "to one page. We'll probably get to\nsome more-- to such sophisticated example soon.",
    "start": "3342820",
    "end": "3349420"
  },
  {
    "text": "But I can give you\none simple example. Before I get to\na simple example, I want to show\nyou a fun example.",
    "start": "3349420",
    "end": "3357430"
  },
  {
    "text": "Not simple, but let me tell\nyou what the problem is. I won't cover that proof.",
    "start": "3357430",
    "end": "3363805"
  },
  {
    "start": "3363805",
    "end": "3373280"
  },
  {
    "text": "The problem is shortest\ncommon super sequence.",
    "start": "3373280",
    "end": "3383276"
  },
  {
    "text": " This is a problem that comes\nup in computational biology.",
    "start": "3383276",
    "end": "3390490"
  },
  {
    "text": "Your given k strings. ",
    "start": "3390490",
    "end": "3397490"
  },
  {
    "text": "Let's say alphabet sigma.",
    "start": "3397490",
    "end": "3403250"
  },
  {
    "text": "And yes, you're given a number,\nwhich I'm going to write l.",
    "start": "3403250",
    "end": "3412480"
  },
  {
    "text": " You want to find\na string of length",
    "start": "3412480",
    "end": "3419970"
  },
  {
    "text": "l that's a super sequence\nof all input strings.",
    "start": "3419970",
    "end": "3434250"
  },
  {
    "start": "3434250",
    "end": "3440120"
  },
  {
    "text": "So maybe you're given the\nDNA sequence of human and DNA sequence of mouse,\nand you want to know",
    "start": "3440120",
    "end": "3446160"
  },
  {
    "text": "what is the shortest\nDNA sequence that contains all of the\nletters of those strings in the correct order.",
    "start": "3446160",
    "end": "3452520"
  },
  {
    "text": "So this is often\ncalled an alignment. If you have ACGG--\nthis is probably not",
    "start": "3452520",
    "end": "3459200"
  },
  {
    "text": "valid, but whatever--\nAnd we have some other guy like CAGGAT. ",
    "start": "3459200",
    "end": "3470186"
  },
  {
    "text": "So I tried to draw\nthose aligned. ",
    "start": "3470186",
    "end": "3475790"
  },
  {
    "text": "So then the common super\nstring here is ACAGGACT. ",
    "start": "3475790",
    "end": "3483820"
  },
  {
    "text": "This is a super string,\nmeaning I can drop letters from down here and get this. Or, I can drop letters from\ndown here and get this.",
    "start": "3483820",
    "end": "3489680"
  },
  {
    "text": "That was for k equals 2. In general, this\nproblem does have an n to the k dynamic program.",
    "start": "3489680",
    "end": "3497030"
  },
  {
    "text": "But the question is whether\nyou could get FPT in k. Could you get a small dependence\non the-- better dependence on the number of strings?",
    "start": "3497030",
    "end": "3502940"
  },
  {
    "text": "And the answer is no\nbecause this is w1 complete. ",
    "start": "3502940",
    "end": "3510080"
  },
  {
    "text": "And this is a\nsketch of the proof.  it's a reduction for\na multicolored clique.",
    "start": "3510080",
    "end": "3516560"
  },
  {
    "text": "I think this the paper that\nintroduced multicolored clique in fact. It's the earliest one I\ncould find, and this is 2003.",
    "start": "3516560",
    "end": "3523109"
  },
  {
    "text": "It became more\npopular since 2009. So you're basically\nencoding the edges",
    "start": "3523110",
    "end": "3528660"
  },
  {
    "text": "by whether there's a 0 here\nin between a huge set of ones. And then this is intuitively\nrep-- and then for every vertex",
    "start": "3528660",
    "end": "3536210"
  },
  {
    "text": "you're looking at, all\nof the other vertices and encoding whether they\nhave an edge to them.",
    "start": "3536210",
    "end": "3541289"
  },
  {
    "text": "And so if you have\na clique, that will be a pattern\nthat you see repeated among multiple vertices.",
    "start": "3541290",
    "end": "3547172"
  },
  {
    "text": "And so you'll end up\nbeing able to shrink your longest-- your shortest\ncommon super sequence.",
    "start": "3547172",
    "end": "3553380"
  },
  {
    "text": "But the details are messy. It's a few pages to prove it. I will skip that\nand tell you why I wanted to tell you\nabout this problem",
    "start": "3553380",
    "end": "3559880"
  },
  {
    "text": "other than its computational\nbiology and useful. Because it's used to prove\nthat flood-it is hard.",
    "start": "3559880",
    "end": "3567339"
  },
  {
    "text": "Time for some fun. So here is flood-it.",
    "start": "3567340",
    "end": "3573820"
  },
  {
    "text": " You have a grid of\ncolored squares.",
    "start": "3573820",
    "end": "3579869"
  },
  {
    "text": "And in the top left,\nwe have colors. And this is the special square.",
    "start": "3579870",
    "end": "3585467"
  },
  {
    "text": "What I can do is control\nthe color of that square. So for example, I\ncould set it to red and then anything that was\nin that connected group",
    "start": "3585467",
    "end": "3592400"
  },
  {
    "text": "becomes red. And now I've got a\nbigger connected group. So now I can make it blue,\nand then pink, and then red,",
    "start": "3592400",
    "end": "3599510"
  },
  {
    "text": "and then blue, and then red. Let's see how well I can do.",
    "start": "3599510",
    "end": "3605059"
  },
  {
    "text": "And the trouble is I have\na limited number of moves. ",
    "start": "3605060",
    "end": "3610309"
  },
  {
    "text": "So this is a model for Ebola\nvirus spreading or zombie",
    "start": "3610310",
    "end": "3618710"
  },
  {
    "text": "infection or pick your favorite.",
    "start": "3618710",
    "end": "3624000"
  },
  {
    "text": "I mean you imagine these are\ndifferent species-- green. Thank you. A lot easier to play\nwhen I have an oracle.",
    "start": "3624000",
    "end": "3631780"
  },
  {
    "text": "Yellow, that's better. I don't know. I'm actually doing\npretty well here.",
    "start": "3631780",
    "end": "3637080"
  },
  {
    "text": " I think now I just\nhave to do them all.",
    "start": "3637080",
    "end": "3643240"
  },
  {
    "text": "I made it! 25 moves. Wow! Felicitations!",
    "start": "3643240",
    "end": "3648870"
  },
  {
    "text": "That's the first time I've won. It's a good demo. Only played a few times,\nbut-- this apparently",
    "start": "3648870",
    "end": "3655660"
  },
  {
    "text": "became quite popular in 2006,\na company called LabPixies, since bought by Google. But there's tons\nof free versions",
    "start": "3655660",
    "end": "3661870"
  },
  {
    "text": "out there you can play. It's w1 complete with respect\nto number of colors and number",
    "start": "3661870",
    "end": "3671400"
  },
  {
    "text": "of leaves. So I don't know if this\nis a generalization or specialization, but it's a\nvariation of the problem that's",
    "start": "3671400",
    "end": "3679310"
  },
  {
    "text": "been studied. It's the only one\nI could can that talked about parametrized\ncomplexity of flood-it.",
    "start": "3679310",
    "end": "3686430"
  },
  {
    "text": "And so this is\nflood-it on trees. ",
    "start": "3686430",
    "end": "3694590"
  },
  {
    "text": "So same set up, but instead\nof being a square grid graph, I'm on a tree graph.",
    "start": "3694590",
    "end": "3700270"
  },
  {
    "text": "And the root of the tree\nis the one I can control, and my graph is going to\nlook like-- my tree is",
    "start": "3700270",
    "end": "3707100"
  },
  {
    "text": "going to look like this. ",
    "start": "3707100",
    "end": "3712955"
  },
  {
    "text": "These are going\nto be my strings.  And if I want to be\nable to solve this",
    "start": "3712955",
    "end": "3719990"
  },
  {
    "text": "in some number of\nmoves, l moves, then I need to-- the\nsequence of colors",
    "start": "3719990",
    "end": "3728790"
  },
  {
    "text": "I do is a longest common\nsubsequence, super sequence, of these strings because they\nall have to get to the bottom.",
    "start": "3728790",
    "end": "3737280"
  },
  {
    "text": "They'll sit there and wait,\nand so you can essentially drop letters. And that's cool.",
    "start": "3737280",
    "end": "3742790"
  },
  {
    "text": "Happy? This is not literally\ntrue because if I have,",
    "start": "3742790",
    "end": "3748180"
  },
  {
    "text": "let's say, a zero and a zero\nhere, both the same color-- So I'm representing\nletters by colors,",
    "start": "3748180",
    "end": "3755870"
  },
  {
    "text": "then when I play-- if I\neventually play here and play zero, I actually get advanced\ntwo spaces instead of one.",
    "start": "3755870",
    "end": "3762480"
  },
  {
    "text": "So for that, you need to\nfirst map every letter a.",
    "start": "3762480",
    "end": "3768530"
  },
  {
    "text": "So let's say in string\ni, we map every letter",
    "start": "3768530",
    "end": "3774180"
  },
  {
    "text": "to a followed by a special\ncharacter for that string.",
    "start": "3774180",
    "end": "3780160"
  },
  {
    "text": "And so this blows things up. In particular, it blows up l. l grows by a factor\nof the total length",
    "start": "3780160",
    "end": "3786400"
  },
  {
    "text": "of all strings because of\nall these things that we add. These are not\nreally compressible, but it means that we alternate\nbetween regular characters",
    "start": "3786400",
    "end": "3793732"
  },
  {
    "text": "and special characters. And therefore, we never\nhave two characters in a row that are the same. So first you take\nthis problem, then",
    "start": "3793732",
    "end": "3800170"
  },
  {
    "text": "you reduce it to the\nversion of the problem that has no repeated characters. And then you can reduce that\nto flood-it because that's",
    "start": "3800170",
    "end": "3807204"
  },
  {
    "text": "what we care about. AUDIENCE: Sorry, what's the\nparameter on the shortest common super-- PROFESSOR: Right. Parameter is-- they're\nactually two parameters,",
    "start": "3807204",
    "end": "3814160"
  },
  {
    "text": "so this is a fun\nthing, k and sigma. So two parameters,\nyou can think of that",
    "start": "3814160",
    "end": "3820010"
  },
  {
    "text": "as being parameterized\nby the sum or just by the vector k, sigma. Basically, we get to assume both\nof them are relatively small.",
    "start": "3820010",
    "end": "3827100"
  },
  {
    "text": "We could be exponential\nin both k and sigma. If you put l in there,\nit would not be hard.",
    "start": "3827100",
    "end": "3832410"
  },
  {
    "text": "But if you put k and sigma\nand it's still w1 complete. And so over here it's\nthe number of leaves",
    "start": "3832410",
    "end": "3839520"
  },
  {
    "text": "in the tree is one parameter\nand the number of colors is the other parameter. So we're fixed parameter\ntractable with respect",
    "start": "3839520",
    "end": "3845000"
  },
  {
    "text": "to that joint parameter. Yeah? AUDIENCE: Why is it obvious\nthat you can reduce flood-it on trees to not flood-it?",
    "start": "3845000",
    "end": "3850862"
  },
  {
    "text": "PROFESSOR: It's not\nobvious that the grid problem is related to trees. There are hardness results\nfor like 2 by n flood-it.",
    "start": "3850862",
    "end": "3859160"
  },
  {
    "text": "But they're just NP hardness. I didn't see a w1 hardness\nfor 2 by n flood-it. So as far as I\nknow, 2 by n colored",
    "start": "3859160",
    "end": "3866270"
  },
  {
    "text": "is hard-- is open from a\nparameterized complexity standpoint. ",
    "start": "3866270",
    "end": "3873890"
  },
  {
    "text": "Cool. I want to do one more\nreduction, and then I'll finally define w1.",
    "start": "3873890",
    "end": "3879550"
  },
  {
    "start": "3879550",
    "end": "3901780"
  },
  {
    "text": "Dominating Set, this problem\nis actually w2 complete,",
    "start": "3901780",
    "end": "3908010"
  },
  {
    "text": "so this is even harder. But before we worry about w2,\nlet's prove that it's w1 hard.",
    "start": "3908010",
    "end": "3916190"
  },
  {
    "text": "So we're going to reduce\nfrom multicolored clique",
    "start": "3916190",
    "end": "3921626"
  },
  {
    "text": "to dominating set. I have a nice figure. This is a preview of this cool\nparameterized algorithms book.",
    "start": "3921626",
    "end": "3932800"
  },
  {
    "text": "So I'm going to represent\neach-- got it right.",
    "start": "3932800",
    "end": "3941484"
  },
  {
    "text": " Yeah, funny.",
    "start": "3941484",
    "end": "3948270"
  },
  {
    "text": "I'm going to\nrepresent each vertex in the multicolored\nindependence set problem by a vertex in the\ndominating set problem,",
    "start": "3948270",
    "end": "3955160"
  },
  {
    "text": "so vertices mapped to vertices. This is the joy of\nmulticolored cliques. We did all this k\nduplication stuff",
    "start": "3955160",
    "end": "3962119"
  },
  {
    "text": "once so that we don't have to\nduplicate our graphic anymore. We just take this graph. We poured it over.",
    "start": "3962120",
    "end": "3967340"
  },
  {
    "text": "Now, what that tells us is that\nthe vi's form color classes.",
    "start": "3967340",
    "end": "3974660"
  },
  {
    "text": "And what I'm going to do is\nconnect each color class. So this is the set of\nall things of color one,",
    "start": "3974660",
    "end": "3979720"
  },
  {
    "text": "set of all things of color two. First of all, I'm going to add\n2 dummy vertices to each color class just to hang out there.",
    "start": "3979720",
    "end": "3986030"
  },
  {
    "text": "And then I'm going to connect\neverything in the color class by a clique.",
    "start": "3986030",
    "end": "3992310"
  },
  {
    "text": "Before we only had edges\nbetween color classes, but now I want to color--",
    "start": "3992310",
    "end": "3999100"
  },
  {
    "text": "I'm going to also\nchange those edges. But the vertices\nmapped to vertices, I add two vertices\nof each color, and then this circle represents\nthat there's a clique in here,",
    "start": "3999100",
    "end": "4006730"
  },
  {
    "text": "clique in here, clique in here. Now, my goal is to\nfind a dominating set. And so the intention\nis that you need",
    "start": "4006730",
    "end": "4013980"
  },
  {
    "text": "to choose one vertex\nfrom each color class in the dominant set.",
    "start": "4013980",
    "end": "4019827"
  },
  {
    "text": "And that's actually what these\ndummy vertices are doing. They are only going to be\nconnect to things in here.",
    "start": "4019827",
    "end": "4024880"
  },
  {
    "text": "They have to be\ncovered by somebody, so that means you have to\nchoose someone in this clique. You have to choose\nsomeone in this clique.",
    "start": "4024880",
    "end": "4031060"
  },
  {
    "text": "When you do, it covers\neverybody in there. And there's going to\nbe no point of choosing these dummy vertices because\nthey're only connected",
    "start": "4031060",
    "end": "4036910"
  },
  {
    "text": "to other things in the clique. You might as well\nchoose these things. Now, how do I represent an edge\nin my independence set graph.",
    "start": "4036910",
    "end": "4045150"
  },
  {
    "text": "If I have an edge\nbetween say u and v, that's in this color class\nand this color class.",
    "start": "4045150",
    "end": "4051300"
  },
  {
    "text": "We know they're in\ndifferent color classes by multicolored\nclique property-- multicolored independent\nset property.",
    "start": "4051300",
    "end": "4058210"
  },
  {
    "text": "Sorry, same thing. So I want to not\nchoose both u and v.",
    "start": "4058210",
    "end": "4064170"
  },
  {
    "text": "So I'm going to represent\nthat by adding a vertex here, which must be dominated,\nand connect it to everyone except u over\nhere and everyone except v",
    "start": "4064170",
    "end": "4072480"
  },
  {
    "text": "over here, the red patches. So there are edges from this\nvertex to every red vertex",
    "start": "4072480",
    "end": "4077990"
  },
  {
    "text": "here and here. So what that means is\nif I don't choose u, I will cover this added vertex.",
    "start": "4077990",
    "end": "4084940"
  },
  {
    "text": "If I don't choose v, I will\ncover this added vertex. So I will cover it as long as\nI don't choose both u and v.",
    "start": "4084940",
    "end": "4093849"
  },
  {
    "text": "So it's like I should choose\nat most one of these two guys, then this will be\ncovered for free. And it has to be covered\nfor free because we just--",
    "start": "4093850",
    "end": "4100950"
  },
  {
    "text": "if I set k prime to be the\nnumber of color classes, which is k, then I don't\nhave any flexibility.",
    "start": "4100950",
    "end": "4108189"
  },
  {
    "text": "I can't choose any of\nthese vertices to dominate. And so that simulates\nindependence using dominating",
    "start": "4108189",
    "end": "4113729"
  },
  {
    "text": "set, pretty simple and clean. So that gives you a\nflavor of nice reductions",
    "start": "4113729",
    "end": "4120040"
  },
  {
    "text": "you can do with multicolored\nclique or independence set.",
    "start": "4120040",
    "end": "4125430"
  },
  {
    "text": "AUDIENCE: What's\ntwo extra vertices? PROFESSOR: Why two?",
    "start": "4125430",
    "end": "4132060"
  },
  {
    "text": "AUDIENCE: The two\nyou added, it looks like are not adjacent so-- AUDIENCE: Oh, so\nwe derived them.",
    "start": "4132060",
    "end": "4139068"
  },
  {
    "text": "PROFESSOR: Right We want\nthem to be there in order to force choosing\nsomebody down here,",
    "start": "4139069",
    "end": "4145778"
  },
  {
    "text": "but we don't actually want\nto choose one of them. And so we emit that edge\nso if you choose one, you don't cover the other.",
    "start": "4145779",
    "end": "4151160"
  },
  {
    "text": "Thanks. ",
    "start": "4151160",
    "end": "4156172"
  },
  {
    "text": "I think it simplifies\nthe argument. It's probably not\nnecessary because I think you could argue\nby replacement argument",
    "start": "4156172",
    "end": "4161359"
  },
  {
    "text": "that you won't choose\nthem, but anyway. Time for some definitions.",
    "start": "4161359",
    "end": "4167920"
  },
  {
    "text": "I wanted to do some fun problems\nbefore we got to the somewhat weird definitions.",
    "start": "4167920",
    "end": "4173335"
  },
  {
    "text": " The time has come.",
    "start": "4173335",
    "end": "4178700"
  },
  {
    "start": "4178700",
    "end": "4185270"
  },
  {
    "text": "By the way, dominate set is\nw2 complete, so is set cover. And most w2 hardness reductions\nstart from one of these two.",
    "start": "4185270",
    "end": "4193500"
  },
  {
    "text": "We already know how to reduce\ndominating set to set cover. You make a set for every\nneighborhood set in the graph.",
    "start": "4193500",
    "end": "4200100"
  },
  {
    "text": "So this reduction\nis easy, and that preserves a parameter so just\nfrom the same reduction we",
    "start": "4200100",
    "end": "4205580"
  },
  {
    "text": "did two classes ago, I think.  Here is a problem which\nwill look familiar,",
    "start": "4205580",
    "end": "4214750"
  },
  {
    "text": "but under a slightly\ndifferent name. This is what I might\ncall circuit ones.",
    "start": "4214750",
    "end": "4221275"
  },
  {
    "text": " One's meaning you want to\nset some number of the inputs",
    "start": "4221275",
    "end": "4229190"
  },
  {
    "text": "to be one, just like our\noptimization version. In this universe, it is\ncalled weighted circuit set.",
    "start": "4229190",
    "end": "4234406"
  },
  {
    "text": "I'm not a fan of\nweighted because there aren't actual weights here. The goal is to get\nminimum hamming weight,",
    "start": "4234406",
    "end": "4239900"
  },
  {
    "text": "meaning the minimum number\nof ones in your input. So I give you a circuit-- I'll\ndraw a very simple circuit,",
    "start": "4239900",
    "end": "4248780"
  },
  {
    "text": "and it has one output. It has some number of inputs. My goal is to set k\nones and get a one out.",
    "start": "4248780",
    "end": "4260880"
  },
  {
    "text": "Did I do it? I did it! ! wasn't even looking. So that's an example of\nan input and an output",
    "start": "4260880",
    "end": "4267041"
  },
  {
    "text": "to weighted circuit set. The parameter here, k, is the\nnumber of ones, one inputs.",
    "start": "4267041",
    "end": "4275514"
  },
  {
    "text": "So the question\nis can you satisfy a circuit using only k ones. That's weighted circuit set.",
    "start": "4275514",
    "end": "4281550"
  },
  {
    "text": "This problem defines\nthe class called WP. This is the original\ndefinition of WP",
    "start": "4281550",
    "end": "4287320"
  },
  {
    "text": "is all problems that reduce\nto weighted circuit set in a parameterized\nreduction sense.",
    "start": "4287320",
    "end": "4294020"
  },
  {
    "text": "It's all parameterized\nproblems that reduce to weighted circuit set.",
    "start": "4294020",
    "end": "4300179"
  },
  {
    "start": "4300180",
    "end": "4308510"
  },
  {
    "text": "I lost my hierarchy. But this is even bigger\nthan all the things. So we have FPT is\ncontained in w1.",
    "start": "4308510",
    "end": "4316740"
  },
  {
    "text": "It's contained in w2, et cetera. And then we have WP,\nand then we have XP.",
    "start": "4316740",
    "end": "4325300"
  },
  {
    "text": "So it's not bigger\nthan everything. It's not bigger than XP. I won't prove this\nhere, but it is true.",
    "start": "4325300",
    "end": "4334880"
  },
  {
    "text": "Now, I want to\nspecialize this problem. I'm going to simplify it\nusing a notion called weft.",
    "start": "4334880",
    "end": "4343150"
  },
  {
    "text": "So first the depth\nof the circuit, this is the longest path.",
    "start": "4343150",
    "end": "4348599"
  },
  {
    "start": "4348600",
    "end": "4354400"
  },
  {
    "text": "That's a normal notion. ",
    "start": "4354400",
    "end": "4360460"
  },
  {
    "text": "Then, the weft of a circuit\nis the maximum number",
    "start": "4360460",
    "end": "4369130"
  },
  {
    "text": "of big gates on an\ninput to output path.",
    "start": "4369130",
    "end": "4374814"
  },
  {
    "start": "4374814",
    "end": "4383180"
  },
  {
    "text": "Big gates means let's\nsay more than two inputs.",
    "start": "4383180",
    "end": "4390214"
  },
  {
    "text": "In general, it's more than\nsome constant number of inputs, but two is fine because if you\nuse a bunch of two input gates,",
    "start": "4390214",
    "end": "4396449"
  },
  {
    "text": "you can build a ten input gate. But there's a distinction\nbetween constant input gates and super constant input gates.",
    "start": "4396450",
    "end": "4403580"
  },
  {
    "text": "So if you count how many\nsuper constant input gates you need in a constant\ndepth circuit,",
    "start": "4403580",
    "end": "4410440"
  },
  {
    "text": "then we get the w\nclasses, w for weft.",
    "start": "4410440",
    "end": "4418086"
  },
  {
    "start": "4418086",
    "end": "4423920"
  },
  {
    "text": "w(t) is the set of\nparameterized problems",
    "start": "4423920",
    "end": "4431500"
  },
  {
    "text": "that reduce to constant depth\nweft-t weighted circuit set.",
    "start": "4431500",
    "end": "4445170"
  },
  {
    "text": " t is not the parameter.",
    "start": "4445170",
    "end": "4452159"
  },
  {
    "text": "K is still the parameter.\nk is the number of ones. t is the thing. ",
    "start": "4452160",
    "end": "4459620"
  },
  {
    "text": "Let's do some examples. AUDIENCE: Depth has to be\nlarger than weft numbers? PROFESSOR: Yes, depth is\nalways larger than weft.",
    "start": "4459620",
    "end": "4466230"
  },
  {
    "text": "So we allow-- so t\nis a fixed constant. Depth could be 100\ntimes t or something.",
    "start": "4466230",
    "end": "4471255"
  },
  {
    "text": "AUDIENCE: Then, w in WP is\na different w than w(t)? ",
    "start": "4471255",
    "end": "4477621"
  },
  {
    "text": "PROFESSOR: They both\nhave to do with weft, but that's the P\nis a polynomial. It corresponds to\npolynomial weft, which",
    "start": "4477621",
    "end": "4485720"
  },
  {
    "text": "is basically unbounded weft. w does not stand for weighted. In both cases, it\nstands for weft.",
    "start": "4485720",
    "end": "4490775"
  },
  {
    "text": " What is weft? Weft is the opposite of warp.",
    "start": "4490775",
    "end": "4497720"
  },
  {
    "text": "When you're weaving,\nyou've got the warp threads and then you've got this weft\nthread that goes back and forth and ties the whole\ncircuit together.",
    "start": "4497720",
    "end": "4505260"
  },
  {
    "text": "So that's sideways,\nso if you imagine that constant input gates do\nnot need a weft to hold them in,",
    "start": "4505260",
    "end": "4513980"
  },
  {
    "text": "but super constant ones do, then\nit's how many layers of wefting do you have to do to\ncover all those things?",
    "start": "4513980",
    "end": "4521340"
  },
  {
    "text": "That's the larges the longest\npath in terms of counting the-- that's the term, OK?",
    "start": "4521340",
    "end": "4529610"
  },
  {
    "text": "But it's actually fairly\nuseful to think about. So for example, independence\nset, inputs are up here.",
    "start": "4529610",
    "end": "4535550"
  },
  {
    "text": "Output is down here. I need to choose,\nfor each vertex, whether it's in the\nindependent set. And if I negate them, then\nI need various constraints.",
    "start": "4535550",
    "end": "4544480"
  },
  {
    "text": "This is the graph that's\nbeing represented. I want to say either\nI don't choose this",
    "start": "4544480",
    "end": "4549650"
  },
  {
    "text": "or I don't choose this. And then all of those\nclauses must be true.",
    "start": "4549650",
    "end": "4555410"
  },
  {
    "text": "That's the and of those things. This is big. These are not big. They have two inputs.",
    "start": "4555410",
    "end": "4560670"
  },
  {
    "text": "This has one input. So these are all free. And then we just do one\nin terms of the depth",
    "start": "4560670",
    "end": "4567140"
  },
  {
    "text": "here where there's one\nlevel of big gates. So independent set is in w1.",
    "start": "4567140",
    "end": "4572900"
  },
  {
    "text": "That's a proof that it's in w1. So that proves all the things\nwe've been talking about, except dominating set, is in w1.",
    "start": "4572900",
    "end": "4582040"
  },
  {
    "text": "Now dominating set,\nyou need two levels. So we have the a constraint.",
    "start": "4582040",
    "end": "4589820"
  },
  {
    "text": "So this is saying that\na should be covered. a is adjacent to a, b, and c. I mean if I choose a, b, or\nc, then a will be dominated",
    "start": "4589820",
    "end": "4598080"
  },
  {
    "text": "by the definition of\ndominating set because a is adjacent just to b and c. But also if I choose\na, then it's dominated.",
    "start": "4598080",
    "end": "4604540"
  },
  {
    "text": "So this is an or of\nthose three things. And a should be dominated,\nb should be dominated, c should be dominated. So it's an and of\nall those things.",
    "start": "4604540",
    "end": "4610851"
  },
  {
    "text": "But if we don't\nhave bounded degree, which we can't because\nthis problem is easy for bounded degree, then\nwe have two levels of big gates.",
    "start": "4610851",
    "end": "4620140"
  },
  {
    "text": "So this problem is in w2. Now, funnily enough, w1 and\nw2 are the most common things",
    "start": "4620140",
    "end": "4627470"
  },
  {
    "text": "you see. I've never seen\na paper about w3. Some statement, I\nthink, about problems",
    "start": "4627470",
    "end": "4634290"
  },
  {
    "text": "that we tend to care about,\nands of ors are common. This, of course,\nCNF SAT is in w2.",
    "start": "4634290",
    "end": "4642510"
  },
  {
    "text": "I should say weighted\nCNF SAT is in w2. It's actually w2 complete.",
    "start": "4642510",
    "end": "4648800"
  },
  {
    "text": "Weighted three\nset is w1 complete because things of size 3 are OK.",
    "start": "4648800",
    "end": "4655850"
  },
  {
    "text": "We can split those into\ntwo things of size 2. So in general, order one\nSAT, you have five SAT.",
    "start": "4655850",
    "end": "4665360"
  },
  {
    "text": "That's w1 complete. And CNF SAT is w2 complete.",
    "start": "4665360",
    "end": "4672290"
  },
  {
    "text": "And I think most of the\nproblems we care about can be expressed as--\nthis should be weighted.",
    "start": "4672290",
    "end": "4678005"
  },
  {
    "text": "I'm going tow rite w,\nbut I mean weighted. But this is a\ncapital W, different.",
    "start": "4678005",
    "end": "4684460"
  },
  {
    "text": "That's weft. So fine that's-- and most of the\nproblems we care about can be",
    "start": "4684460",
    "end": "4691800"
  },
  {
    "text": "represented as CNF SAT. I think that's why we\nrarely get outside of w2. But there are\nother things there.",
    "start": "4691800",
    "end": "4697190"
  },
  {
    "text": "You could do an or of ands of\nors or an and of ors of ands.",
    "start": "4697190",
    "end": "4702719"
  },
  {
    "text": "Now, we know such formulas\ncan be converted into CNF form and only get a\npolynomial blow up.",
    "start": "4702720",
    "end": "4707830"
  },
  {
    "text": "What's going on? Well, when you do\nthat inefficient form, you add extra variables.",
    "start": "4707830",
    "end": "4713370"
  },
  {
    "text": "When you add extra\nvariables, you are no longer preserving the weight. It would not be a\nparameterized reduction.",
    "start": "4713370",
    "end": "4719020"
  },
  {
    "text": "So if you're just caring about\nsatisfiability, that's fine. But if you're considering\nweighted satisfiability, you want to minimize\nthe number of ones,",
    "start": "4719020",
    "end": "4726340"
  },
  {
    "text": "it totally changes when\nyou convert to CNF. So it matters. ",
    "start": "4726340",
    "end": "4732219"
  },
  {
    "text": "One more fun result, if you\nlook at 2-tape non-deterministic",
    "start": "4732220",
    "end": "4739100"
  },
  {
    "text": "Turing machines--\nthe reason I had to define 1-tape\nnon-deterministic Turing machines is because\nthey're different",
    "start": "4739100",
    "end": "4745430"
  },
  {
    "text": "from 2-tape non-deterministic\nTuring machines. These are w2 complete.",
    "start": "4745430",
    "end": "4751570"
  },
  {
    "text": "The k-step version of 2-tape. 2-tapes is you have 2-tapes\nthat can advance independently.",
    "start": "4751570",
    "end": "4758080"
  },
  {
    "text": "Or, you can think of there\nare two fingers you can independently move on one tape. Those are equivalent,\nand they give you w2.",
    "start": "4758080",
    "end": "4765050"
  },
  {
    "text": "Three tapes, gives w2. Any constant number of\ntapes, you still get w2.",
    "start": "4765050",
    "end": "4771337"
  },
  {
    "text": "And this is another, I\nthink, natural reason why w2 comes up a lot. I have seen problems that are\nhard for what's called w-star.",
    "start": "4771337",
    "end": "4780309"
  },
  {
    "text": "This w-star is wt\nfor all fixed t. You can think of\nthat as w order a.",
    "start": "4780310",
    "end": "4788320"
  },
  {
    "text": "So it's the same thing. So I've seen problems that\ndon't depend on what t is. They're hard for all of them.",
    "start": "4788320",
    "end": "4793910"
  },
  {
    "text": "But I've never seen a\nw3 complete problem. Maybe we can think of one. I've also seen WP come\nup, and there's also",
    "start": "4793910",
    "end": "4800900"
  },
  {
    "text": "a problem called W-SAT which\nis if you have weighted formula",
    "start": "4800900",
    "end": "4807239"
  },
  {
    "text": "sat instead of weighted circuits\nsat, you get w-sat instead WP. I think it's a little weaker\nbecause in circuit SAT you can",
    "start": "4807240",
    "end": "4815610"
  },
  {
    "text": "reuse things and in\nformula set, you can't. And it turns out to give\nslightly different classes. So things are messier here.",
    "start": "4815610",
    "end": "4821532"
  },
  {
    "text": "But if you just care\nabout whether a problem is fixed parameter tractable,\nthese are all bad.",
    "start": "4821532",
    "end": "4828220"
  },
  {
    "text": "But the point of knowing\nabout them is you want to know if your\nproblem-- first you should check where it\nfits in the w hierarchy",
    "start": "4828220",
    "end": "4835230"
  },
  {
    "text": "by just thinking about what's\na trivial way to write it down in the CNF style thing. Figure out whether\nit's w1 or w2.",
    "start": "4835230",
    "end": "4841190"
  },
  {
    "text": "Then, you'll know which\nproblems you should start from. If it's w1, probably want to\nstart from a version of clique.",
    "start": "4841190",
    "end": "4846496"
  },
  {
    "text": "If it's w2, you\nprobably want to start from a version of\ndominating set. That's why we talked\nabout them here. And usually it's w1 or w2.",
    "start": "4846497",
    "end": "4852639"
  },
  {
    "text": " Cool. Questions?",
    "start": "4852640",
    "end": "4858820"
  },
  {
    "text": "We'll do more next time. This is a fun area. And next time we'll talk\nabout, in particular,",
    "start": "4858820",
    "end": "4864540"
  },
  {
    "text": "how the exponential time\nhypothesis relates to all this. ",
    "start": "4864540",
    "end": "4872636"
  }
]