[
  {
    "text": "Let's see if we can improve the throughput\nof the original combinational multiplier design.",
    "start": "719",
    "end": "5759"
  },
  {
    "text": "We'll use our patented pipelining process\nto divide the processing into stages with",
    "start": "5759",
    "end": "10120"
  },
  {
    "text": "the expectation of achieving a smaller clock\nperiod and higher throughput.",
    "start": "10120",
    "end": "15610"
  },
  {
    "text": "The number to beat is approximately 1 output\nevery 2N, where N is the number of bits in",
    "start": "15610",
    "end": "21159"
  },
  {
    "text": "each of the operands.",
    "start": "21159",
    "end": "23989"
  },
  {
    "text": "Our first step is to draw a contour across\nall the outputs.",
    "start": "23989",
    "end": "28089"
  },
  {
    "text": "This creates a 1-pipeline, which gets us started\nbut doesn't improve the throughput.",
    "start": "28089",
    "end": "33500"
  },
  {
    "text": "Let's add another contour, dividing the computations\nabout in half.",
    "start": "33500",
    "end": "37350"
  },
  {
    "text": "If we're on the right track, we hope to see\nsome improvement in the throughput.",
    "start": "37350",
    "end": "41600"
  },
  {
    "text": "And indeed we do: the throughput has doubled.",
    "start": "41600",
    "end": "44550"
  },
  {
    "text": "Yet both the before and after throughputs\nare order 1/N.",
    "start": "44550",
    "end": "48649"
  },
  {
    "text": "Is there any hope of a dramatically better\nthroughput?",
    "start": "48650",
    "end": "52420"
  },
  {
    "text": "The necessary insight is that as long as an\nentire row is inside a single pipeline stage,",
    "start": "52420",
    "end": "58050"
  },
  {
    "text": "the latency of the stage will be order N since\nwe have to leave time for the N-bit ripple-carry",
    "start": "58050",
    "end": "62980"
  },
  {
    "text": "add to complete.",
    "start": "62980",
    "end": "65790"
  },
  {
    "text": "There are several ways to tackle this problem.",
    "start": "65790",
    "end": "68360"
  },
  {
    "text": "The technique illustrated here will be useful\nin our next task.",
    "start": "68360",
    "end": "72670"
  },
  {
    "text": "In this schematic we've redrawn the carry\nchains.",
    "start": "72670",
    "end": "75689"
  },
  {
    "text": "Carry-outs are still connected to a module\none column to the left, but, in this case,",
    "start": "75690",
    "end": "80260"
  },
  {
    "text": "a module that's down a row.",
    "start": "80260",
    "end": "82580"
  },
  {
    "text": "So all the additions that need to happen in\na specific column still happen in that column,",
    "start": "82580",
    "end": "87300"
  },
  {
    "text": "we've just reorganized which row does the\nadding.",
    "start": "87300",
    "end": "91470"
  },
  {
    "text": "Let's pipeline this revised diagram, creating\nstages with approximately two module's worth",
    "start": "91470",
    "end": "96659"
  },
  {
    "text": "of propagation delay.",
    "start": "96659",
    "end": "98659"
  },
  {
    "text": "The horizontal contours now break the long\ncarry chains and the latency of each stage",
    "start": "98659",
    "end": "103710"
  },
  {
    "text": "is now constant, independent of N.\nNote that we had to add order N extra rows",
    "start": "103710",
    "end": "109670"
  },
  {
    "text": "to take of the propagating the carries all\nthe way to the end - the extra circuitry is",
    "start": "109670",
    "end": "114240"
  },
  {
    "text": "shown in the grey box.",
    "start": "114240",
    "end": "117130"
  },
  {
    "text": "To achieve a latency that's independent of\nN in each stage, we'll need order N contours.",
    "start": "117130",
    "end": "123280"
  },
  {
    "text": "This means the latency is constant, which\nin order-of notation we write as \"order 1\".",
    "start": "123280",
    "end": "129259"
  },
  {
    "text": "But this means the clock period is now independent\nof N, as is the throughput - they are both",
    "start": "129259",
    "end": "134510"
  },
  {
    "text": "order 1.",
    "start": "134510",
    "end": "136450"
  },
  {
    "text": "With order N contours, there are order N pipeline\nstages, so the system latency is order N.",
    "start": "136450",
    "end": "143040"
  },
  {
    "text": "The hardware cost is still order N^2.",
    "start": "143040",
    "end": "147450"
  },
  {
    "text": "So the pipelined carry-save multiplier has\ndramatically better throughput than the original",
    "start": "147450",
    "end": "152170"
  },
  {
    "text": "circuit, another design tradeoff we can remember\nfor future use.",
    "start": "152170",
    "end": "156910"
  },
  {
    "text": "We'll use the carry-save technique in our\nnext optimization, which is to implement the",
    "start": "156910",
    "end": "161680"
  },
  {
    "text": "multiplier using only order N hardware.",
    "start": "161680",
    "end": "165400"
  },
  {
    "text": "This sequential multiplier design computes\na single partial product in each step and",
    "start": "165400",
    "end": "170170"
  },
  {
    "text": "adds it to the accumulating sum.",
    "start": "170170",
    "end": "172819"
  },
  {
    "text": "It will take order N steps to perform the\ncomplete multiplication.",
    "start": "172820",
    "end": "177000"
  },
  {
    "text": "In each step, the next bit of the multiplier,\nfound in the low-order bit of the B register,",
    "start": "177000",
    "end": "181790"
  },
  {
    "text": "is ANDed with the multiplicand to form the\nnext partial product.",
    "start": "181790",
    "end": "186409"
  },
  {
    "text": "This is sent to the N-bit carry-save adder\nto be added to the accumulating sum in the",
    "start": "186410",
    "end": "190650"
  },
  {
    "text": "P register.",
    "start": "190650",
    "end": "192769"
  },
  {
    "text": "The value in the P register and the output\nof the adder are in \"carry-save format\".",
    "start": "192770",
    "end": "198260"
  },
  {
    "text": "This means there are 32 data bits, but, in\naddition, 31 saved carries, to be added to",
    "start": "198260",
    "end": "204120"
  },
  {
    "text": "the appropriate column in the next cycle.",
    "start": "204120",
    "end": "206849"
  },
  {
    "text": "The output of the carry-save adder is saved\nin the P register, then in preparation for",
    "start": "206849",
    "end": "211280"
  },
  {
    "text": "the next step both P and B are shifted right\nby 1 bit.",
    "start": "211280",
    "end": "216129"
  },
  {
    "text": "So each cycle one bit of the accumulated sum\nis retired to the B register since it can",
    "start": "216129",
    "end": "221450"
  },
  {
    "text": "no longer be affected by the remaining partial\nproducts.",
    "start": "221450",
    "end": "224989"
  },
  {
    "text": "Think of it this way: instead of shifting\nthe partial products left to account for the",
    "start": "224990",
    "end": "229910"
  },
  {
    "text": "weight of the current multiplier bit, we're\nshifting the accumulated sum right!",
    "start": "229910",
    "end": "236550"
  },
  {
    "text": "The clock period needed for the sequential\nlogic is quite small, and, more importantly",
    "start": "236550",
    "end": "240540"
  },
  {
    "text": "is independent of N.\nSince there's no carry propagation, the latency",
    "start": "240540",
    "end": "245860"
  },
  {
    "text": "of the carry-save adder is very small, i.e.,\nonly enough time for the operation of a single",
    "start": "245860",
    "end": "252420"
  },
  {
    "text": "full adder module.",
    "start": "252420",
    "end": "255080"
  },
  {
    "text": "After order N steps, we've generated the necessary\npartial products, but will need to continue",
    "start": "255080",
    "end": "259840"
  },
  {
    "text": "for another order N steps to finish propagating\nthe carries through the carry-save adder.",
    "start": "259840",
    "end": "265860"
  },
  {
    "text": "But even at 2N steps, the overall latency\nof the multiplier is still order N.",
    "start": "265860",
    "end": "270978"
  },
  {
    "text": "And at the end of the 2N steps, we produce\nthe answer in the P and B registers combined,",
    "start": "270979",
    "end": "276560"
  },
  {
    "text": "so the throughput is order 1/N.\nThe big change is in the hardware cost at",
    "start": "276560",
    "end": "281880"
  },
  {
    "text": "order N, a dramatic improvement over the order\nN^2 hardware cost of the original combinational",
    "start": "281880",
    "end": "287970"
  },
  {
    "text": "multiplier.",
    "start": "287970",
    "end": "290430"
  },
  {
    "text": "This completes our little foray into multiplier\ndesigns.",
    "start": "290430",
    "end": "293860"
  },
  {
    "text": "We've seen that with a little cleverness we\ncan create designs with order 1 throughput,",
    "start": "293860",
    "end": "298330"
  },
  {
    "text": "or designs with only order N hardware.",
    "start": "298330",
    "end": "301520"
  },
  {
    "text": "The technique of carry-save addition is useful\nin many situations and its use can improve",
    "start": "301520",
    "end": "306690"
  },
  {
    "text": "throughput at constant hardware cost, or save\nhardware at a constant throughput.",
    "start": "306690",
    "end": "311800"
  }
]