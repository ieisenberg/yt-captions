[
  {
    "text": "Now let's figure out how exceptions impact\npipelined execution.",
    "start": "599",
    "end": "5060"
  },
  {
    "text": "When an exception occurs because of an illegal\ninstruction or an external interrupt, we need",
    "start": "5060",
    "end": "9900"
  },
  {
    "text": "to store the current PC+4 value in the XP\nregister and load the program counter with",
    "start": "9900",
    "end": "14820"
  },
  {
    "text": "the address of the appropriate exception handler.",
    "start": "14820",
    "end": "18730"
  },
  {
    "text": "Exceptions cause control flow hazards since\nthey are effectively implicit branches.",
    "start": "18730",
    "end": "23260"
  },
  {
    "text": "In an unpipelined implementation, exceptions\naffect the execution of the current instruction.",
    "start": "23260",
    "end": "29460"
  },
  {
    "text": "We want to achieve exactly the same effect\nin our pipelined implementation.",
    "start": "29460",
    "end": "34160"
  },
  {
    "text": "So first we have to identify which one of\nthe instructions in our pipeline is affected,",
    "start": "34160",
    "end": "39100"
  },
  {
    "text": "then ensure that instructions that came earlier\nin the code complete correctly and that we",
    "start": "39100",
    "end": "44670"
  },
  {
    "text": "annul the affected instruction and any following\ninstructions that are in the pipeline.",
    "start": "44670",
    "end": "49788"
  },
  {
    "text": "Since there are multiple instructions in the\npipeline, we have a bit of sorting out to",
    "start": "49789",
    "end": "53179"
  },
  {
    "text": "do.",
    "start": "53179",
    "end": "54179"
  },
  {
    "text": "When, during pipelined execution, do we determine\nthat an instruction will cause an exception?",
    "start": "54179",
    "end": "59940"
  },
  {
    "text": "An obvious example is detecting an illegal\nopcode when we decode the instruction in the",
    "start": "59940",
    "end": "65860"
  },
  {
    "text": "RF stage.",
    "start": "65860",
    "end": "67600"
  },
  {
    "text": "But we can also generate exceptions in other\npipeline stages.",
    "start": "67600",
    "end": "71280"
  },
  {
    "text": "For example, the ALU stage can generate an\nexception if the second operand of a DIV instruction",
    "start": "71280",
    "end": "76140"
  },
  {
    "text": "is 0.",
    "start": "76140",
    "end": "77780"
  },
  {
    "text": "Or the MEM stage may detect that the instruction\nis attempting to access memory with an illegal",
    "start": "77780",
    "end": "83100"
  },
  {
    "text": "address.",
    "start": "83100",
    "end": "84298"
  },
  {
    "text": "Similarly the IF stage can generate a memory\nexception when fetching the next instruction.",
    "start": "84299",
    "end": "89020"
  },
  {
    "text": "In each case, instructions that follow the\none that caused the exception may already",
    "start": "89020",
    "end": "93368"
  },
  {
    "text": "be in the pipeline and will need to be annulled.",
    "start": "93369",
    "end": "97079"
  },
  {
    "text": "The good news is that since register values\nare only updated in the WB stage, annulling",
    "start": "97079",
    "end": "102780"
  },
  {
    "text": "an instruction only requires replacing it\nwith a NOP.",
    "start": "102780",
    "end": "105320"
  },
  {
    "text": "We won't have to restore any changed values\nin the register file or main memory.",
    "start": "105320",
    "end": "111630"
  },
  {
    "text": "Here's our plan.",
    "start": "111630",
    "end": "112929"
  },
  {
    "text": "If an instruction causes an exception in stage\ni, replace that instruction with this BNE",
    "start": "112929",
    "end": "118250"
  },
  {
    "text": "instruction, whose only side effect is writing\nthe PC+4 value into the XP register.",
    "start": "118250",
    "end": "125749"
  },
  {
    "text": "Then flush the pipeline by annulling instructions\nin earlier pipeline stages.",
    "start": "125749",
    "end": "130080"
  },
  {
    "text": "And, finally, load the program counter with\nthe address of the exception handler.",
    "start": "130080",
    "end": "136500"
  },
  {
    "text": "In this example, assume that LD will generate\na memory exception in the MEM stage, which",
    "start": "136500",
    "end": "141720"
  },
  {
    "text": "occurs in cycle 4.",
    "start": "141720",
    "end": "144090"
  },
  {
    "text": "The arrows show how the instructions in the\npipeline are rewritten for cycle 5, at which",
    "start": "144090",
    "end": "149050"
  },
  {
    "text": "point the IF stage is working on fetching\nthe first instruction in the exception handler.",
    "start": "149050",
    "end": "155810"
  },
  {
    "text": "Here are the changes required to the execution\npipeline.",
    "start": "155810",
    "end": "159050"
  },
  {
    "text": "We modify the muxes in the instruction path\nso that they can replace an actual instruction",
    "start": "159050",
    "end": "164220"
  },
  {
    "text": "with either NOP if the instruction is to be\nannulled, or BNE if the instruction caused",
    "start": "164220",
    "end": "170090"
  },
  {
    "text": "the exception.",
    "start": "170090",
    "end": "171700"
  },
  {
    "text": "Since the pipeline is executing multiple instructions\nat the same time, we have to worry about what",
    "start": "171700",
    "end": "176800"
  },
  {
    "text": "happens if multiple exceptions are detected\nduring execution.",
    "start": "176800",
    "end": "181530"
  },
  {
    "text": "In this example assume that LD will cause\na memory exception in the MEM stage and note",
    "start": "181530",
    "end": "187170"
  },
  {
    "text": "that it is followed by an instruction with\nan illegal opcode.",
    "start": "187170",
    "end": "192550"
  },
  {
    "text": "Looking at the pipeline diagram, the invalid\nopcode is detected in the RF stage during",
    "start": "192550",
    "end": "198900"
  },
  {
    "text": "cycle 3, causing the illegal instruction exception\nprocess to begin in cycle 4.",
    "start": "198900",
    "end": "205519"
  },
  {
    "text": "But during that cycle, the MEM stage detects\nthe illegal memory access from the LD instruction",
    "start": "205520",
    "end": "211570"
  },
  {
    "text": "and so causes the memory exception process\nto begin in cycle 5.",
    "start": "211570",
    "end": "217540"
  },
  {
    "text": "Note that the exception caused by the earlier\ninstruction (LD) overrides the exception caused",
    "start": "217540",
    "end": "222870"
  },
  {
    "text": "by the later illegal opcode even though the\nillegal opcode exception was detected first.",
    "start": "222870",
    "end": "228840"
  },
  {
    "text": ".348 That's the correct behavior since once\nthe execution of LD is abandoned, the pipeline",
    "start": "228840",
    "end": "234290"
  },
  {
    "text": "should behave as if none of the instructions\nthat come after the LD were executed.",
    "start": "234290",
    "end": "240659"
  },
  {
    "text": "If multiple exceptions are detected in the\n*same* cycle, the exception from the instruction",
    "start": "240660",
    "end": "245210"
  },
  {
    "text": "furthest down the pipeline should be given\nprecedence.",
    "start": "245210",
    "end": "250570"
  },
  {
    "text": "External interrupts also behave as implicit\nbranches, but it turns out they are a bit",
    "start": "250570",
    "end": "255150"
  },
  {
    "text": "easier to handle in our pipeline.",
    "start": "255150",
    "end": "258160"
  },
  {
    "text": "We'll treat external interrupts as if they\nwere an exception that affected the IF stage.",
    "start": "258160",
    "end": "263790"
  },
  {
    "text": "Let's assume the external interrupt occurs\nin cycle 2.",
    "start": "263790",
    "end": "267430"
  },
  {
    "text": "This means that the SUB instruction will be\nreplaced by our magic BNE to capture the PC+4",
    "start": "267430",
    "end": "272560"
  },
  {
    "text": "value and we'll force the next PC to be the\naddress of the interrupt handler.",
    "start": "272560",
    "end": "278370"
  },
  {
    "text": "After the interrupt handler completes, we'll\nwant to resume execution of the interrupted",
    "start": "278370",
    "end": "282540"
  },
  {
    "text": "program at the SUB instruction, so we'll code\nthe handler to correct the value saved in",
    "start": "282540",
    "end": "287602"
  },
  {
    "text": "the XP register so that it points to the SUB\ninstruction.",
    "start": "287602",
    "end": "292930"
  },
  {
    "text": "This is all shown in the pipeline diagram.",
    "start": "292930",
    "end": "295780"
  },
  {
    "text": "Note that the ADD, LD, and other instructions\nthat came before SUB in the program are unaffected",
    "start": "295780",
    "end": "300980"
  },
  {
    "text": "by the interrupt.",
    "start": "300980",
    "end": "303639"
  },
  {
    "text": "We can use the existing instruction-path muxes\nto deal with interrupts, since we're treating",
    "start": "303639",
    "end": "308440"
  },
  {
    "text": "them as IF-stage exceptions.",
    "start": "308440",
    "end": "311210"
  },
  {
    "text": "We simply have to adjust the logic for IRSrc_IF\nto also make it 1 when an interrupt is requested.",
    "start": "311210",
    "end": "317789"
  }
]