[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6859"
  },
  {
    "text": "offer high quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "6860",
    "end": "13410"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at ocw.mit.edu.",
    "start": "13410",
    "end": "18860"
  },
  {
    "text": " PROFESSOR: Let's get started. So what we are going to do today\nis go about discovering",
    "start": "18860",
    "end": "27660"
  },
  {
    "text": "other alternating methods. We know you guys are amazing\nhackers and you can actually do all those things by hand.",
    "start": "27660",
    "end": "34730"
  },
  {
    "text": "But to make multi-core generally\nacceptable, can we",
    "start": "34730",
    "end": "40579"
  },
  {
    "text": "do things automatically? Can we really reduce a burden\nfrom the programers? So at the beginning I'm going\nto talk about general",
    "start": "40580",
    "end": "48460"
  },
  {
    "text": "parallelizing compilers. What people have done. What's the state of the art. Kind of get your feel\nwhat is doable.",
    "start": "48460",
    "end": "55590"
  },
  {
    "text": "Hopefully, that will be a little\nover an hour, and then we'll go talk about StreamEd\ncompiler, what we have done",
    "start": "55590",
    "end": "62559"
  },
  {
    "text": "recently, and how this\nautomation part can do.",
    "start": "62560",
    "end": "69140"
  },
  {
    "text": "So, I'll talk a little bit\nabout parallel execution. This is kind of what\nyou know already.",
    "start": "69140",
    "end": "76150"
  },
  {
    "text": "Then go into parallelizing\ncompilers, and talk about how to determine if something is\nparallel by doing data",
    "start": "76150",
    "end": "81670"
  },
  {
    "text": "dependence analysis, and how\nto increase the amount of parallelism available in\ncode loop, what kind of",
    "start": "81670",
    "end": "87109"
  },
  {
    "text": "transformation. Then we go look at how to\ngenerate code, because once",
    "start": "87110",
    "end": "92570"
  },
  {
    "text": "you see that something is\nparallel, how you actually get to run parallel. And finish up with actually how\nto do communication code",
    "start": "92570",
    "end": "98479"
  },
  {
    "text": "in a machine such as a server.",
    "start": "98480",
    "end": "104330"
  },
  {
    "text": "So in parallel execution, this\nis something -- it's a review. So there are many ways of\nparallelism, things like",
    "start": "104330",
    "end": "110460"
  },
  {
    "text": "instruction level parallelism. It's basically effected by\nhardware or compiler",
    "start": "110460",
    "end": "115680"
  },
  {
    "text": "scheduling. As of today this is\nin abundance. In all for scalars we do\nthat, in [OBSCURES]",
    "start": "115680",
    "end": "122850"
  },
  {
    "text": "we do that. Then password parallelism,\nit's what most of you guys are doing now.",
    "start": "122850",
    "end": "128860"
  },
  {
    "text": "You probably find a program, you\ndivide it into tasks, you get task level parallelism,\nmainly by hand.",
    "start": "128860",
    "end": "134200"
  },
  {
    "text": "Some of you might be doing data\nlevel parallelism and also loop level parallelism.",
    "start": "134200",
    "end": "139299"
  },
  {
    "text": "That can be the hand or\ncompiler generated. Then, of course, pipeline\nparallelism is more mainly done in hardware and language\nextreme, do pipeline",
    "start": "139300",
    "end": "146860"
  },
  {
    "text": "parallelism. Divide and conquer parallelism\nwe went a little bit more than in hardware, mainly by hand\nfor recursive functions.",
    "start": "146860",
    "end": "155170"
  },
  {
    "text": "Today we are going to focus\non loop level parallelism, particularly how do loop level\nparallelism by the compiler.",
    "start": "155170",
    "end": "163360"
  },
  {
    "text": "So why loops? So loops is interesting because\npeople observed in morse code, 90% of execution\ntime is in 10% of the code.",
    "start": "163360",
    "end": "171910"
  },
  {
    "text": "Almost 99% of the execution time\nis in 10% of the code. This called a loop, and it makes\nsense because running at",
    "start": "171910",
    "end": "180080"
  },
  {
    "text": "3 gigahertz, if only run one\ninstruction one, then you run",
    "start": "180080",
    "end": "185990"
  },
  {
    "text": "through the hard drive in only a\nfew minutes because you need to have repeatability.",
    "start": "185990",
    "end": "191370"
  },
  {
    "text": "A lot of time repeatability\nthing loops.  Loops, if you can parallelize,\nyou can get really good",
    "start": "191370",
    "end": "197970"
  },
  {
    "text": "performance because loops most\nof the time, each loop iteration have the same amount\nof work and you get nice good",
    "start": "197970",
    "end": "204420"
  },
  {
    "text": "load balance, it's somewhat\neasier to analyze, so that's why the compiler start there.",
    "start": "204420",
    "end": "209750"
  },
  {
    "text": "Whereas if you try to get task\nlevel parallelism, things have a lot more complexities that\nautomatic compiler cannot do.",
    "start": "209750",
    "end": "218350"
  },
  {
    "text": "So there are two types\nof parallel loops. One is a for all loop. That means there are no loop\ncarried dependences.",
    "start": "218350",
    "end": "225720"
  },
  {
    "text": "That means you can get the\nsequential code executing, run everything in parallel, and at\nthe end you have a barrier and",
    "start": "225720",
    "end": "232390"
  },
  {
    "text": "when everybody finishes\nyou continue on the sequential code. That is how you do\na for all loop.",
    "start": "232390",
    "end": "238300"
  },
  {
    "text": "Some languages, in fact, have\nexplicitly parallel construct, say OK, here's a for all\nloop and go do that.",
    "start": "238300",
    "end": "246580"
  },
  {
    "text": "The other type of\nloop is called a foracross or doacross loop. That says OK, while the loop\nis parallel, there are some",
    "start": "246580",
    "end": "253860"
  },
  {
    "text": "dependences. That means some value generated\nhere is used somewhere here. So you can run it parallel,\nbut you have some",
    "start": "253860",
    "end": "260670"
  },
  {
    "text": "communication going too. So you had to move data. So it's not completely running\nparallel, there's some",
    "start": "260670",
    "end": "266590"
  },
  {
    "text": "synchronization going on. But you can get large chunk\nrunning parallels. ",
    "start": "266590",
    "end": "272199"
  },
  {
    "text": "So we kind of focus on dual\nloops today, and let's look at this example.",
    "start": "272200",
    "end": "278720"
  },
  {
    "text": "We see it's a for far\nso it's a parallel loop or for all loop.",
    "start": "278720",
    "end": "286110"
  },
  {
    "text": "When you know it's parallel,\nin here, of course, the user said that. What we can do is we can\ndistribute the iteration by",
    "start": "286110",
    "end": "293930"
  },
  {
    "text": "chunking up the iteration space\ninto number of process chunks, and basically\nrun that.",
    "start": "293930",
    "end": "302169"
  },
  {
    "text": "If PMD mode, you can at the\nbeginning the first processor can calculate the number of\niterations you can run on each",
    "start": "302170",
    "end": "310120"
  },
  {
    "text": "process in here, and then you\nsynchronize, you put a barrier there, so everybody kind of\nsync up at that point.",
    "start": "310120",
    "end": "317170"
  },
  {
    "text": "Or other process of waiting, and\nat that point, everybody starts, when you reach this\npoint it's running, it's part",
    "start": "317170",
    "end": "323116"
  },
  {
    "text": "of iterations, and then you're\ngoing to put a barrier synchronization in place. ",
    "start": "323116",
    "end": "328230"
  },
  {
    "text": "Kind of obvious, parallel code\nbasically in here, running on shared memory machine\nat this point.",
    "start": "328230",
    "end": "334780"
  },
  {
    "text": "So this is what we can do. I mean this is what\nwe saw before. Of course, instead of doing\nthat, you can also do fork",
    "start": "334780",
    "end": "341650"
  },
  {
    "text": "join types or once you want to\nrun something parallel, you can fork a thread and each\nthread gets some amount of",
    "start": "341650",
    "end": "349220"
  },
  {
    "text": "iterations you run, and after\nthat you merge together. So you can do both. So that's my hand.",
    "start": "349220",
    "end": "355289"
  },
  {
    "text": "How do you do something like\nthat by the compiler? That sounds simple enough,\ntrivial enough.",
    "start": "355290",
    "end": "361539"
  },
  {
    "text": "But you don't automate\nthe entire process. How to go about doing that. So, here are some normal\nloops, for loops.",
    "start": "361540",
    "end": "369240"
  },
  {
    "text": "So the for all does this thing\nthat was so simple, which is the for all construct that means\nsomebody could look at",
    "start": "369240",
    "end": "375270"
  },
  {
    "text": "that and said this\nloop is parallel. But you look at these FOR loops,\nhow many of these loops",
    "start": "375270",
    "end": "381470"
  },
  {
    "text": "are parallel? Is the first loop parallel?",
    "start": "381470",
    "end": "386940"
  },
  {
    "text": "Why? Why not? AUDIENCE: [OBSCURED.] PROFESSOR: It's a loop because\nthe iteration, one of that is",
    "start": "386940",
    "end": "396480"
  },
  {
    "text": "using what you wrote\nin iteration zero. So iteration one has to wait\nuntil iteration zero is",
    "start": "396480",
    "end": "401909"
  },
  {
    "text": "done, so and so. How about this one? ",
    "start": "401910",
    "end": "410110"
  },
  {
    "text": "Why? AUDIENCE: [NOISE.]",
    "start": "410110",
    "end": "417350"
  },
  {
    "text": "PROFESSOR: Not really. So it's writing element\n0 to 5, it's reading",
    "start": "417350",
    "end": "424500"
  },
  {
    "text": "elements 6 to 11. So they don't overlap.",
    "start": "424500",
    "end": "430440"
  },
  {
    "text": "So what you read and what you\nwrite never overlap, so you can keep doing it in any order,\nbecause the dependence",
    "start": "430440",
    "end": "436240"
  },
  {
    "text": "means something you wrote,\nlater you will read. This doesn't happen in here. How about this one?",
    "start": "436240",
    "end": "453600"
  },
  {
    "text": "AUDIENCE: There's no dependence\nin there. PROFESSOR: Why? AUDIENCE: [OBSCURED.] PROFESSOR: So you're writing\neven, you're reading odd.",
    "start": "453600",
    "end": "461420"
  },
  {
    "text": "So there's no overlapping\nor anything like that. Question? OK.",
    "start": "461420",
    "end": "467020"
  },
  {
    "text": "So, the way to look at that -- I'm going to go a little\nbit of formalism. You can think about this\nas a iteration space.",
    "start": "467020",
    "end": "473100"
  },
  {
    "text": "So iteration is if you look at\neach iteration separately, there could be thousands and\nmillions of iterations and",
    "start": "473100",
    "end": "479819"
  },
  {
    "text": "your compiler never [COUGHING] doing any work, and also some\niteration space is defined by a range like 1 to n, so you\ndon't even know exactly how",
    "start": "479820",
    "end": "488069"
  },
  {
    "text": "many iterations are\ngoing to be there. So you can represent this\nas abstract space.",
    "start": "488070",
    "end": "493310"
  },
  {
    "text": "Normally, most of this\nloops you look at you normalize to step one. So what that means is all the\ninteger points in that space.",
    "start": "493310",
    "end": "502320"
  },
  {
    "text": "So if you have a loop like\nthis, y equals 0 to 6, J equals 1i to 7.",
    "start": "502320",
    "end": "507600"
  },
  {
    "text": "That's the iteration space,\nthere are two dimensions in there. The points that start iteration\noff because it's not",
    "start": "507600",
    "end": "514149"
  },
  {
    "text": "a rectangular space, it can have\nthis structure because j's go in triangular in here.",
    "start": "514150",
    "end": "522089"
  },
  {
    "text": "So the way you can represent\nthat is so you can represent iteration space by a vector\ni, and you can have each",
    "start": "522090",
    "end": "528990"
  },
  {
    "text": "dimension or use\ntwo dimension. This was some i1, i2\nspace in here. So you can represent\nit like that.",
    "start": "528990",
    "end": "534900"
  },
  {
    "text": "It's the notion of lexicographic\nordering. That means if you execute the\nloop, what's the order you're",
    "start": "534900",
    "end": "540540"
  },
  {
    "text": "going to receive this thing. If you execute this loop,\nwhat you are going to do is you go from --",
    "start": "540540",
    "end": "546010"
  },
  {
    "text": "you go like this. This is lexicographical\nordering of everything in the loops.",
    "start": "546010",
    "end": "552070"
  },
  {
    "text": "That's the normal\nexecution order. That's a sequential order. At some point you want to make\nsure that anything we do kind",
    "start": "552070",
    "end": "557940"
  },
  {
    "text": "of has a look and feel\nof the sequential lexicographical order.",
    "start": "557940",
    "end": "563430"
  },
  {
    "text": "So, one thing you can say\nis if you have multiple dimensions, if there are two\niterations, one iteration",
    "start": "563430",
    "end": "573610"
  },
  {
    "text": "lexicographical and another\niterations says if all outer dimensions are the same, you\ngo to the first dimension",
    "start": "573610",
    "end": "580490"
  },
  {
    "text": "where the numbers, they are in\ntwo different iterations. Then that dictates if it's",
    "start": "580490",
    "end": "586960"
  },
  {
    "text": "lexicographical than the other. So if the outer dimensions are\nthe same, that means the next one decides, the next one\ndecides, next one decides",
    "start": "586960",
    "end": "593470"
  },
  {
    "text": "going down. First one that's actually\ndifferent decides who's before the other one. ",
    "start": "593470",
    "end": "600630"
  },
  {
    "text": "So another concept is called\naffine loop nest. Affine loop nest says loop bounds are\ninteger linear functions of",
    "start": "600630",
    "end": "608770"
  },
  {
    "text": "constants, loop constant\nvariable and outer loop indices.",
    "start": "608770",
    "end": "614200"
  },
  {
    "text": "So that means if you want to get\naffine function within a loop, that has to be a linear\nfunction or integer function",
    "start": "614200",
    "end": "621370"
  },
  {
    "text": "where all the things either\nhas to be constant or loop",
    "start": "621370",
    "end": "626500"
  },
  {
    "text": "constants -- that means that that variable\ndoesn't change in the loop or outer loop indices. That makes it much easier\nto analyze.",
    "start": "626500",
    "end": "632810"
  },
  {
    "text": " Also, array axises, each\ndimension, axis function has",
    "start": "632810",
    "end": "639890"
  },
  {
    "text": "the same property. So of course, there are many\nprograms that doesn't satisfy this, for example,\nif we do FFD.",
    "start": "639890",
    "end": "646730"
  },
  {
    "text": "That doesn't satisfy that\nbecause you have exponentials in there. But what that means is at 50,\nthere's probably no way that",
    "start": "646730",
    "end": "653900"
  },
  {
    "text": "the compiler's going\nto analyze that. But most kind of loops fit this\nkind of model and then",
    "start": "653900",
    "end": "661060"
  },
  {
    "text": "you can put into nice\nmathematical framework and analyze that what I'm going to\ngo through is kind of follow through some of the\nmathematical",
    "start": "661060",
    "end": "666930"
  },
  {
    "text": "framework with you guys. So, what you can do here is if\nyou look at this one, instead",
    "start": "666930",
    "end": "674100"
  },
  {
    "text": "of representing this iteration\nspace by each iteration, which",
    "start": "674100",
    "end": "680279"
  },
  {
    "text": "can be huge or which is not even\nknown at compile time, what you can do is you can\nrepresent this by kind of a",
    "start": "680280",
    "end": "687890"
  },
  {
    "text": "bounding space of iterations,\nbasically. So what this is, we don't mark\nevery box there, but we say",
    "start": "687890",
    "end": "695269"
  },
  {
    "text": "OK, look, if you put\nthese planes -- I put four planes in here, and\neverything inside these planes",
    "start": "695270",
    "end": "700649"
  },
  {
    "text": "represent this iteration\nspace. That's nice because instead of\ngoing 0 to 6, if you go 0 to",
    "start": "700650",
    "end": "706850"
  },
  {
    "text": "60,000, still I have the same\nequation, I don't suddenly have 6 million data points in\nhere I need to represent.",
    "start": "706850",
    "end": "715370"
  },
  {
    "text": "So, my representation doesn't\ngrow with the size of my iteration space.",
    "start": "715370",
    "end": "721154"
  },
  {
    "text": "It grows with the shape of\nthis iteration space. If you have complicated one,\nit can be difficult.",
    "start": "721155",
    "end": "726590"
  },
  {
    "text": "So what you can do is you can\niteration space, it's all iterations zero to\nsix, j's I27.",
    "start": "726590",
    "end": "733140"
  },
  {
    "text": "This is all linear functionns. That makes our analysis\neasier.",
    "start": "733140",
    "end": "738529"
  },
  {
    "text": "So the flip side of that\nis the data space. So, if m dimension array\nhas m dimensional",
    "start": "738530",
    "end": "744200"
  },
  {
    "text": "discrete cartesian space. Basically, in the data space you\ndon't have arrays that are",
    "start": "744200",
    "end": "750519"
  },
  {
    "text": "odd shaped. It's almost a hypercube\nalways. So something like that is a\none dimensional space and",
    "start": "750520",
    "end": "758790"
  },
  {
    "text": "something can be represented\nas a two dimensional space in here. So data space has this nice\nproperty, in that sense it's a",
    "start": "758790",
    "end": "765990"
  },
  {
    "text": "t multi-dimensional hypercube. And what that gives you\nis kind of a bunch of",
    "start": "765990",
    "end": "771290"
  },
  {
    "text": "mathematical techniques to kind\nof do and at least see some transformations we need\nto do in compiling.",
    "start": "771290",
    "end": "776450"
  },
  {
    "text": " As humans, I think we can look\nat a lot more complicated",
    "start": "776450",
    "end": "781470"
  },
  {
    "text": "loops by hand, and get a better\nidea what's going on. But in a compiler you need to\nhave a very simple way of",
    "start": "781470",
    "end": "788850"
  },
  {
    "text": "describing what to analyze, what\nto formulate, and having this model helps you put it into\na nice mathematical frame",
    "start": "788850",
    "end": "794899"
  },
  {
    "text": "you can do. So the next thing\nis dependence. We have done that so I will go\nthrough this fast. So the",
    "start": "794900",
    "end": "800769"
  },
  {
    "text": "first is a true dependence. What that means is I wrote\nsomething, I write it here.",
    "start": "800770",
    "end": "805890"
  },
  {
    "text": "So I really meant\nthat I actually really use that value. There are two dependences mainly\nbecause we are finding",
    "start": "805890",
    "end": "814019"
  },
  {
    "text": "dependence on some location,\nis an anti-dependence. That means I can't write it\nuntil this read is done",
    "start": "814020",
    "end": "819870"
  },
  {
    "text": "because I can't destroy\nthe value. Output dependence is there, so\nordering of writing that you need to maintain.",
    "start": "819870",
    "end": "825730"
  },
  {
    "text": " So in a dynamic instance, data\ndependence exist between i and",
    "start": "825730",
    "end": "833920"
  },
  {
    "text": "j if Either i and j is a write\noperation, and i and j refers",
    "start": "833920",
    "end": "839130"
  },
  {
    "text": "to the same variable, and\ni executes before j. So it's the same thing, one\nexecute before the other.",
    "start": "839130",
    "end": "845590"
  },
  {
    "text": "So it's not that you don't have\na dependence when they get there in time, then it\nbecome either true or anti.",
    "start": "845590",
    "end": "850680"
  },
  {
    "text": "So it's always going to\nbe positive over time.",
    "start": "850680",
    "end": "857149"
  },
  {
    "text": "So how about other accesses? So one element, you can figure\nout what happened. So how do you do dependence\nand other accesses?",
    "start": "857150",
    "end": "863890"
  },
  {
    "text": "Now things get a little bit\ncomplicated, because arrays is not one element. So that's when you go to\ndependence analysis.",
    "start": "863890",
    "end": "869750"
  },
  {
    "text": " So I will describe this using\nbunch of examples.",
    "start": "869750",
    "end": "876620"
  },
  {
    "text": "So in order to look at arrays,\nthere are two spaces I need to worry about. One is the iteration space,\none is the data space.",
    "start": "876620",
    "end": "884930"
  },
  {
    "text": "What we want to do is figure\nout what happens at every iteration for data and what\nother dependences kind of",
    "start": "884930",
    "end": "892699"
  },
  {
    "text": "summarize this down. We don't want to look at, say\nOK, one iteration depend on",
    "start": "892700",
    "end": "898320"
  },
  {
    "text": "second, two depend on third\n-- you don't want to list everything. We need to come up\nwith a summary -- that's what basically dependence\nanalysis will do.",
    "start": "898320",
    "end": "905300"
  },
  {
    "text": "So if you have this access,\nthis is this loop. What happens is as we run down,\nso iterations we are",
    "start": "905300",
    "end": "912000"
  },
  {
    "text": "running down here. So we have iteration zero,\n1, 2, 3, 4, 5. First do the read, write,\nread, write.",
    "start": "912000",
    "end": "918040"
  },
  {
    "text": "So this is kind of time\ngoing down there. What you do is this one you are",
    "start": "918040",
    "end": "923860"
  },
  {
    "text": "reading and you are writing. You're reading and writing,\nso you have a dependence like that.",
    "start": "923860",
    "end": "929690"
  },
  {
    "text": "You see the two anti-dependence.  Read -- anti-dependence, I have",
    "start": "929690",
    "end": "936269"
  },
  {
    "text": "anti-dependence going on here. If you look at it, here's\na dependence vector. What that means is there's a\ndependence at each of those",
    "start": "936270",
    "end": "942270"
  },
  {
    "text": "things in there -- that's\nanti-dependence going on. One way to look at summarizes of\nthis, what is my iteration.",
    "start": "942270",
    "end": "949020"
  },
  {
    "text": "My iteration goes like --\nwhat's my dependence. I have anti-dependence with the\nsame iteration, because my",
    "start": "949020",
    "end": "956530"
  },
  {
    "text": "read and write has to be dependence in the same iteration. So this is a way to kind\nof describe that.",
    "start": "956530",
    "end": "961990"
  },
  {
    "text": "So a different one.  This one.",
    "start": "961990",
    "end": "967060"
  },
  {
    "text": "I did Ai plus 1 equals Ai So\nwhat you realize is iteration",
    "start": "967060",
    "end": "973350"
  },
  {
    "text": "zero, you wrote iteration zero,\nyou wrote a zero, you",
    "start": "973350",
    "end": "978880"
  },
  {
    "text": "read these and you wrote A1, and\niteration 1, you read A1",
    "start": "978880",
    "end": "984270"
  },
  {
    "text": "and wrote A2, basically. Now what you have is your\ndependence is like",
    "start": "984270",
    "end": "991210"
  },
  {
    "text": "that, going like that. So if you look at what's\nhappening in here, if you",
    "start": "991210",
    "end": "997089"
  },
  {
    "text": "summarize in here, what you\nhave is a dependence going like that in iteration space.",
    "start": "997090",
    "end": "1002960"
  },
  {
    "text": "So in iteration that means\niteration 1 is actually these two dependence, that uses\nsomething that wrote iteration",
    "start": "1002960",
    "end": "1009130"
  },
  {
    "text": "zero, iteration 2 you have\nsomething iteration 1, and you have iteration going\nlike that.",
    "start": "1009130",
    "end": "1015529"
  },
  {
    "text": "Sometimes this can be summarized\nas the dependence vector of 1. ",
    "start": "1015530",
    "end": "1025750"
  },
  {
    "text": "Because the previous one was\nzero because there's no loop carry dependency.",
    "start": "1025750",
    "end": "1031480"
  },
  {
    "text": "In the outer loop there's\na dependence on 1. So if you have this one, I plus\n2, of course, it gets",
    "start": "1031480",
    "end": "1041850"
  },
  {
    "text": "carried 1 across in here and\nthen you have a 1 skipped representation in here.",
    "start": "1041850",
    "end": "1050080"
  },
  {
    "text": "If you have 2I2 by plus\n1, what you realize is there's no overlap. So there's no basically\ndependency.",
    "start": "1050080",
    "end": "1055660"
  },
  {
    "text": " You kind of get how that\nanalytic goes.",
    "start": "1055660",
    "end": "1062039"
  },
  {
    "text": "So, to find data dependence in\na loop, so there's a little bit of legalese.",
    "start": "1062040",
    "end": "1067530"
  },
  {
    "text": "So let me try to do that. So for every pair of array\naccesses, what you want to",
    "start": "1067530",
    "end": "1074220"
  },
  {
    "text": "find is is there a dynamic\ninstant that happened?",
    "start": "1074220",
    "end": "1079940"
  },
  {
    "text": "An iteration that wrote a value,\nand another dynamic instance happened that later\nthat actually used that value.",
    "start": "1079940",
    "end": "1088240"
  },
  {
    "text": "So the first access, so there's\na dynamic instance that's wrote, or that access,\nand another iteration instance",
    "start": "1088240",
    "end": "1097820"
  },
  {
    "text": "that also accessed the\nsame location later. And one of them has to\nbe right, otherwise there are two in anti.",
    "start": "1097820",
    "end": "1103929"
  },
  {
    "text": "That's the notion about\nthe second one came after the first one. You can also look at\nthe same arrays.",
    "start": "1103930",
    "end": "1110000"
  },
  {
    "text": "It doesn't have the be the same\nas different access, the same array access if\nyou are writing. If you look at same array access\nwriting you can have",
    "start": "1110000",
    "end": "1116150"
  },
  {
    "text": "output dependences also. So it's basically between a read\nand a write, and a write",
    "start": "1116150",
    "end": "1121580"
  },
  {
    "text": "and a write. Two different writes, it can\nbe the same write too. Key thing is we are looking\nat location.",
    "start": "1121580",
    "end": "1127590"
  },
  {
    "text": "We're not looking at value path\nand say who's actually in the same location. Loop carry dependence\nmeans the dependence",
    "start": "1127590",
    "end": "1135360"
  },
  {
    "text": "cross a loop boundary. That means the person who read\nand person who wrote are in",
    "start": "1135360",
    "end": "1143100"
  },
  {
    "text": "different loop iteration. If it's in the same iteration,\nthen it's all local, because",
    "start": "1143100",
    "end": "1148290"
  },
  {
    "text": "in my iteration I deal with\nthat, I moved data around. But what I'm writing is used by\nsomebody else in different",
    "start": "1148290",
    "end": "1153299"
  },
  {
    "text": "iteration, I have loop carry\ndependence going on. Basic thing is there's a loop\ncarry dependence, that loop is",
    "start": "1153300",
    "end": "1160880"
  },
  {
    "text": "not parallelized in that. What that means is I am writing\nin one iteration of",
    "start": "1160880",
    "end": "1166800"
  },
  {
    "text": "the loop and somebody is reading\nin different iteration of the loop. That means I actually had to\nmove the data across, they can",
    "start": "1166800",
    "end": "1171960"
  },
  {
    "text": "happen in parallel. That's a very simple way\nof looking at that. ",
    "start": "1171960",
    "end": "1177929"
  },
  {
    "text": "So, what we have done is -- OK, the basic idea is how\nto actually go and",
    "start": "1177930",
    "end": "1184550"
  },
  {
    "text": "automate this process. The simple notion is called a\ndata dependence analysis, and I will give you a formulation\nof that.",
    "start": "1184550",
    "end": "1191850"
  },
  {
    "text": "So what you can formally do is\nusing a set of equations.",
    "start": "1191850",
    "end": "1197700"
  },
  {
    "text": "So what you want to say is\ninstead of two distinct iterations, one is the\nwrite iteration,",
    "start": "1197700",
    "end": "1203110"
  },
  {
    "text": "one is the read iteration. One iteration writes\nthe value, one iteration reads the value.",
    "start": "1203110",
    "end": "1209200"
  },
  {
    "text": "So write iteration basically,\nwrites a item loop plus 1, the read iteration reads AI.",
    "start": "1209200",
    "end": "1216620"
  },
  {
    "text": "So we know both read and write\nhave to be within loop bound iteration, because we know\nthat because we can't be",
    "start": "1216620",
    "end": "1223360"
  },
  {
    "text": "outside loop bounds. Then we also want to make sure\nthat the loop carried",
    "start": "1223360",
    "end": "1228410"
  },
  {
    "text": "dependence, that means\nread and write can't be in the same iteration. If it's in the same iteration,\nI don't have loop carry dependence.",
    "start": "1228410",
    "end": "1234120"
  },
  {
    "text": "I am looking for loop carry\ndependence at this point. Then what makes both of\nthe read and write",
    "start": "1234120",
    "end": "1241250"
  },
  {
    "text": "write the same location. That means access 1 has\nto be the same. So the right access point is\niw plus 1, and read access",
    "start": "1241250",
    "end": "1248549"
  },
  {
    "text": "function is [? IEI. ?] So the key thing is now we\nhave set up equation.",
    "start": "1248550",
    "end": "1255380"
  },
  {
    "text": "Are there any values for ie\nand j, integer values, I'm sorry, iw and ir that these\nequations are true.",
    "start": "1255380",
    "end": "1263470"
  },
  {
    "text": "If that is the case, we can say\nah-ha, that is the case, there's an iteration that the\nwrite and read are writing",
    "start": "1263470",
    "end": "1270630"
  },
  {
    "text": "into two different iterations\n-- one write iteration, one read iteration, writing\nto the same value.",
    "start": "1270630",
    "end": "1276970"
  },
  {
    "text": "Therefore that's a different\n[OBSCURED]. Is this true? Is there a set of values\nthat makes this true? ",
    "start": "1276970",
    "end": "1288710"
  },
  {
    "text": "Yeah, I mean you can do ir\nequals 1, iw equals 1, and ir equals 2.",
    "start": "1288710",
    "end": "1296120"
  },
  {
    "text": "So there's a value in there so\nthese equations will come up with a solution, and at that\npoint you have a dependency.",
    "start": "1296120",
    "end": "1303560"
  },
  {
    "text": "AUDIENCE: [NOISE]",
    "start": "1303560",
    "end": "1311670"
  },
  {
    "text": "PROFESSOR: So that's very easy\nto make this formulation. So if the indices is calculated\nwith some thing or",
    "start": "1311670",
    "end": "1319620"
  },
  {
    "text": "loop value, I can't write\nthe formulation. So the data that I can do this\nanalysis is this indices has",
    "start": "1319620",
    "end": "1327250"
  },
  {
    "text": "to be the constant\nor indefinite. This is A of b of I. So if my\narray is A of b of i, I don't",
    "start": "1327250",
    "end": "1336540"
  },
  {
    "text": "know how the numbers work\nif you have A of b i.",
    "start": "1336540",
    "end": "1341790"
  },
  {
    "text": "I have no idea about Ai\nis without knowing values of B of i. And B of i, I can't\nsummarize it.",
    "start": "1341790",
    "end": "1347780"
  },
  {
    "text": "Each B of i might be different\nand I can't come up with this nice single formulation that\ncan check out every B of i.",
    "start": "1347780",
    "end": "1354750"
  },
  {
    "text": "And I'm in big trouble. This is doable, but this is\nnot easy to do like this.",
    "start": "1354750",
    "end": "1370070"
  },
  {
    "text": "Question? AUDIENCE: [NOISE] PROFESSOR: Yeah, that's right. So that the interesting thing\nthat you're not looking at.",
    "start": "1370070",
    "end": "1377800"
  },
  {
    "text": "Because when we summarized it,\nbecause what you are going to do is we are trying to summarize\nfor everything, every iteration, and we are not\ntrying to divide it into",
    "start": "1377800",
    "end": "1385730"
  },
  {
    "text": "saying OK, can I find\nthe parallel groups. Yes. You can do some more complicated\nanalysis and do something like that.",
    "start": "1385730",
    "end": "1391409"
  },
  {
    "text": "Yes. So other interesting thing is\nOK, the next thing you want to see whether can find\noutput dependence.",
    "start": "1391410",
    "end": "1400020"
  },
  {
    "text": "OK, are there two different\niterations that they're fighting the same thing.",
    "start": "1400020",
    "end": "1405360"
  },
  {
    "text": "What that means is the\niterations are I1, I2, and I1 not equals I2, and I1 plus\n1 equals I2 plus one.",
    "start": "1405360",
    "end": "1413190"
  },
  {
    "text": "There's no solution to this one\nbecause the I1 has to be equal to I2 according to this,\nand I1 cannot be equal to I2",
    "start": "1413190",
    "end": "1419820"
  },
  {
    "text": "during this one. That says OK, look, I don't have\noutput dependence because it can be satisfied.",
    "start": "1419820",
    "end": "1425880"
  },
  {
    "text": "OK, so here I know I have\na loop carried -- I haven't said the two\nanti depends on which",
    "start": "1425880",
    "end": "1432220"
  },
  {
    "text": "directions this is. Two anti-dependents, but I don't\nhave a loop carried out",
    "start": "1432220",
    "end": "1437386"
  },
  {
    "text": "to [OBSCURED]. So how do we generalize this?",
    "start": "1437386",
    "end": "1442870"
  },
  {
    "text": "So what you can do is as integer\nvector I, so in order to generalize this, you can\nuse integer programming.",
    "start": "1442870",
    "end": "1448940"
  },
  {
    "text": "How many of you know integer\nprogramming or linear programming? OK.",
    "start": "1448940",
    "end": "1454390"
  },
  {
    "text": "We are not going to go into\ndetail, but I'll tell you what actually happen. So integer programming says\nthere's a vector of variable",
    "start": "1454390",
    "end": "1464050"
  },
  {
    "text": "I, and if you have a formulation\nlike that, is array, AI is less than or equal\nto B, A and B are all",
    "start": "1464050",
    "end": "1472360"
  },
  {
    "text": "constant integers, and you can\nuse the integer programming,",
    "start": "1472360",
    "end": "1478230"
  },
  {
    "text": "you can see that there's a\nsolution for IE or not. This is if you do things like\noperations research, there's a",
    "start": "1478230",
    "end": "1485120"
  },
  {
    "text": "lot of work around it. People actually want to know\nwhat value is Y. We don't care that much what values,\nwe just want to know",
    "start": "1485120",
    "end": "1491445"
  },
  {
    "text": "the solution or not. If there's a solution, we know\nthat there's a dependent. If there's no solution we know\nthere's no dependent.",
    "start": "1491445",
    "end": "1497520"
  },
  {
    "text": "So we need to do is we need to\nget this set of equations and put it on that form. That's simple.",
    "start": "1497520",
    "end": "1503140"
  },
  {
    "text": "For example, what you want\nis AI less than B --",
    "start": "1503140",
    "end": "1508350"
  },
  {
    "text": "that means you have constnat\nA1 I1, plus A2 i2, which is",
    "start": "1508350",
    "end": "1514679"
  },
  {
    "text": "less than or equal to\nB. So you won't have",
    "start": "1514680",
    "end": "1519870"
  },
  {
    "text": "this kind of a system. Not equals doesn't really\nbelong there.",
    "start": "1519870",
    "end": "1527050"
  },
  {
    "text": "So the way you deal with not\nequals if you do it in two different problems. You can say\nIW less than IER is one",
    "start": "1527050",
    "end": "1534710"
  },
  {
    "text": "problem, and W is greater then\nIER is other problem, and if either problem has a solution,\nyou have a dependence.",
    "start": "1534710",
    "end": "1542070"
  },
  {
    "text": "So that means one is true\nand one is anti. You can see the true dependence\nor anti-dependence, you can look at that.",
    "start": "1542070",
    "end": "1550580"
  },
  {
    "text": "This one is a little\nbit easier. This is less than, not\nactually less than --",
    "start": "1550580",
    "end": "1556890"
  },
  {
    "text": "less than equal. ",
    "start": "1556890",
    "end": "1561900"
  },
  {
    "text": "How do you deal with equal? So the way you deal with equal\nis you write in both directions.",
    "start": "1561900",
    "end": "1567330"
  },
  {
    "text": "So if A is less than B, A less\nthan or equal to B, B is less than or equal to A means\nactually is equal to B. So you",
    "start": "1567330",
    "end": "1574464"
  },
  {
    "text": "can actually try two different\ninequalities and get equal to down there. So you have to kind of massage\nthings a little bit in here.",
    "start": "1574464",
    "end": "1580850"
  },
  {
    "text": "So here are our original\niteration bounds, and here's",
    "start": "1580850",
    "end": "1587620"
  },
  {
    "text": "our one problem because we are\nsaying write happens before",
    "start": "1587620",
    "end": "1592800"
  },
  {
    "text": "read, so these are two\ndependents that we are looking at. This is saying that write\nlocation is the same as the",
    "start": "1592800",
    "end": "1603550"
  },
  {
    "text": "read location and this is equal,\nso I have two different equations in here. So kind of massage this a little\nbit to put it in i",
    "start": "1603550",
    "end": "1609520"
  },
  {
    "text": "form, and we can come\nup with A's and B's. These are just manual steps,\nA's and B's, and now we are",
    "start": "1609520",
    "end": "1616690"
  },
  {
    "text": "going to throw it into some\nsuper duper integer linear",
    "start": "1616690",
    "end": "1622049"
  },
  {
    "text": "program package and it will say\nyes or no and your set. ",
    "start": "1622050",
    "end": "1628539"
  },
  {
    "text": "And of course, you had\nto do another problem for the other side. You can generalize it for much\nmore complete loop nest. So if",
    "start": "1628540",
    "end": "1636780"
  },
  {
    "text": "you have this complicated loop\nnest in here, you had to solve you've got n deepness, you have\nto solve two end problems",
    "start": "1636780",
    "end": "1641950"
  },
  {
    "text": "with all these different\nconstraints. I'm not going to go over this. I have the slides in here.",
    "start": "1641950",
    "end": "1648090"
  },
  {
    "text": "So that's the single\ndimension. So how about multi-dimension\ndependences?",
    "start": "1648090",
    "end": "1655769"
  },
  {
    "text": "So I have two dimensional\niteration space here, and I have I,J equals AI, J minus 1.",
    "start": "1655770",
    "end": "1663350"
  },
  {
    "text": "That's my iteration space. What does my dependence\nlook like? We have arrows too.",
    "start": "1663350",
    "end": "1668490"
  },
  {
    "start": "1668490",
    "end": "1678480"
  },
  {
    "text": "Which direction are\nthe arrows going? AUDIENCE: [OBSCURED] PROFESSOR: We have something\nlike this.",
    "start": "1678480",
    "end": "1684840"
  },
  {
    "text": "Yup. We have something like this\nbecause that's J minus 1, the",
    "start": "1684840",
    "end": "1690990"
  },
  {
    "text": "I's are the same. Of course, if you have the other\nway around, go other",
    "start": "1690990",
    "end": "1696750"
  },
  {
    "text": "direction, one is anti and one\nis it two dependence, so you can figure that one out.",
    "start": "1696750",
    "end": "1702410"
  },
  {
    "text": "And do something complicated. First one. So IJ, I minus 1, J plus 1.",
    "start": "1702410",
    "end": "1710750"
  },
  {
    "text": "Which has to be diagonal. Which diagonal does it go?",
    "start": "1710750",
    "end": "1717909"
  },
  {
    "text": "This way or this way?  Who says this way?",
    "start": "1717910",
    "end": "1724150"
  },
  {
    "text": " Who says this way? ",
    "start": "1724150",
    "end": "1731820"
  },
  {
    "text": "So, this is actually going\nin this direction.",
    "start": "1731820",
    "end": "1737330"
  },
  {
    "text": " This is where you have to\nactually think which iteration",
    "start": "1737330",
    "end": "1742680"
  },
  {
    "text": "is actually write and\nread in here. So things get complicated. This one is even more\ninteresting.",
    "start": "1742680",
    "end": "1748059"
  },
  {
    "text": "This one. There's only one dimensional\narray or two dimensional loop nest. So what that\nmeans is who's",
    "start": "1748060",
    "end": "1757250"
  },
  {
    "text": "writing and who's reading? ",
    "start": "1757250",
    "end": "1763550"
  },
  {
    "text": "If you look at it basically -- actually this actually is a\nlittle bit wrong, because the",
    "start": "1763550",
    "end": "1768789"
  },
  {
    "text": "dependence analysis says --\nactually, all these things,",
    "start": "1768790",
    "end": "1777680"
  },
  {
    "text": "all this read has to go into\nall the write, because they are writing any J, just writing\nthe same thing.",
    "start": "1777680",
    "end": "1784980"
  },
  {
    "text": "So this is a little bit wrong. This is actually more\ndata flow analysis. This is a different -- their\ndependence means I don't care",
    "start": "1784980",
    "end": "1792070"
  },
  {
    "text": "who the guy wrote, because he's\nthe last guy who wrote, but everybody's reading,\neverybody else is writing the same location.",
    "start": "1792070",
    "end": "1801880"
  },
  {
    "text": "AUDIENCE: [OBSCURED]. PROFESSOR: Keep rewriting\nthe same thing again and again and again. You start depending on -- It's not dependant on J's it's\ndependant on I. But location",
    "start": "1801880",
    "end": "1812139"
  },
  {
    "text": "says you used to have iterations\nright in the same location, different J. So not\nmatter what J, it's writing in",
    "start": "1812140",
    "end": "1822029"
  },
  {
    "text": "the same location.  You know what I'm saying? Because J thinks J.",
    "start": "1822030",
    "end": "1830180"
  },
  {
    "text": "AUDIENCE: [NOISE]. PROFESSOR: This is\niteration space.",
    "start": "1830180",
    "end": "1836770"
  },
  {
    "text": "I am looking at iteration. I am looking at I and J.s AUDIENCE: [OBSCURED]. PROFESSOR: B is a one\ndimensional array.",
    "start": "1836770",
    "end": "1842640"
  },
  {
    "text": "So B is a one dimensional\narray. So what that means is -- The reason I'm saying it's the\niteration space and array",
    "start": "1842640",
    "end": "1847840"
  },
  {
    "text": "space is a match.",
    "start": "1847840",
    "end": "1853299"
  },
  {
    "text": "I'll correct this and put it\nin there because this is a data flow diagram. It's row independant. ",
    "start": "1853300",
    "end": "1858800"
  },
  {
    "text": "This one writing to what? AUDIENCE: [OBSCURED].",
    "start": "1858800",
    "end": "1864590"
  },
  {
    "text": "PROFESSOR: Iteration space\nis I and J. So, this is writing to what? I zero is --",
    "start": "1864590",
    "end": "1872240"
  },
  {
    "text": "This is writing to what? B1. ",
    "start": "1872240",
    "end": "1878720"
  },
  {
    "text": "All those things are\nwritng to B1.  This is really --",
    "start": "1878720",
    "end": "1884360"
  },
  {
    "start": "1884360",
    "end": "1889920"
  },
  {
    "text": "So this is writing to B1,\nthis is reading B zero. So this iteration is\nreading B1 again.",
    "start": "1889920",
    "end": "1896210"
  },
  {
    "text": "So this was B1, this\nis iteration B1. So each of these is writing to\nB1, each of these are reading",
    "start": "1896210",
    "end": "1901570"
  },
  {
    "text": "from B1, so each has to be\ndependent from each other.",
    "start": "1901570",
    "end": "1907000"
  },
  {
    "text": "AUDIENCE: So I guess one thing\nthat's confusing here is why isn't it just -- why don't we\njust have arrows going down the column?",
    "start": "1907000",
    "end": "1912070"
  },
  {
    "text": "Why do we have all these--? PROFESSOR: Arrows going down\nthe column means each is trying to do different\nlocation.",
    "start": "1912070",
    "end": "1918860"
  },
  {
    "text": "So what happens is that\nthis one, arrays going down this way. Is this one -- what's wrote here\nis only that location,",
    "start": "1918860",
    "end": "1927350"
  },
  {
    "text": "only this side I accidentally\nlocated. These are all writing to the\nsame location and reading from",
    "start": "1927350",
    "end": "1932390"
  },
  {
    "text": "the same location. AUDIENCE: Why isn't\nB iterated? PROFESSOR: This is\niteration space. I have two different\nloops here.",
    "start": "1932390",
    "end": "1938620"
  },
  {
    "text": "AUDIENCE: But I don't understand\nwhy B [NOISE.] PROFESSOR: This is my program.",
    "start": "1938620",
    "end": "1944110"
  },
  {
    "text": "I can write this program. This is a little bit of a stupid\nprogram because I am kind of trying to do the same\nthing again and again.",
    "start": "1944110",
    "end": "1950090"
  },
  {
    "text": "But hey, my program doesn't say\narray dimensions has to",
    "start": "1950090",
    "end": "1955799"
  },
  {
    "text": "match your loop dimension. It doesn't say that so you can\nhave programs like that. You can have other way too. ",
    "start": "1955800",
    "end": "1962440"
  },
  {
    "text": "So the key thing is to make --\ndon't confuse iteration space",
    "start": "1962440",
    "end": "1967799"
  },
  {
    "text": "versus array space. They are two different spaces,\ntwo different number of dimensions. That's all the point that\nI'm going to make here. ",
    "start": "1967800",
    "end": "1975360"
  },
  {
    "text": "So by doing dependence analysis,\nyou can figure out -- now you can formulate\nthis nicely --",
    "start": "1975360",
    "end": "1980410"
  },
  {
    "text": "figure out where the\nloops are parallel. So that's really neat.",
    "start": "1980410",
    "end": "1986480"
  },
  {
    "text": "The next thing I'm going to go\nis trying to figure out how you can increase the parallelism\nopportunities.",
    "start": "1986480",
    "end": "1991970"
  },
  {
    "text": "Because there might be cases\nwhere the original code you wrote, there might be some\nloops that are not",
    "start": "1991970",
    "end": "1997350"
  },
  {
    "text": "parallelizable, assays, and can\nyou go and increase that. So I'm going to talk about few\ndifferent possibilities of",
    "start": "1997350",
    "end": "2002750"
  },
  {
    "text": "doing that.  Scalar privatization, I will\njust go in each of these",
    "start": "2002750",
    "end": "2008270"
  },
  {
    "text": "separating. So here is interesting\nprogram. To get parallel to the\ntemporary and use the",
    "start": "2008270",
    "end": "2017490"
  },
  {
    "text": "temporary in here. You might not know you had\nwritten that but the compiler normally generates something\nlike that because you always",
    "start": "2017490",
    "end": "2022950"
  },
  {
    "text": "had temporaries in here,\nso this might be what compiler generate. Is this loop parallel? AUDIENCE: Yup.",
    "start": "2022950",
    "end": "2036020"
  },
  {
    "text": "PROFESSOR: Why? AUDIENCE: [OBSCURED]. PROFESSOR: Is the loop carry\ndependence true or anti --",
    "start": "2036020",
    "end": "2042150"
  },
  {
    "text": "What's the true dependence\nwhich to which? We didn't loop true\ndependence.",
    "start": "2042150",
    "end": "2048260"
  },
  {
    "text": "What is the loop carry\ndependence?  Anti-dependence.",
    "start": "2048260",
    "end": "2054070"
  },
  {
    "text": "Because I cannot -- you see I\nequal 1, basically wrote here",
    "start": "2054070",
    "end": "2060710"
  },
  {
    "text": "in this reading. I can't write I equals 2x until\nI equals 1 is done and",
    "start": "2060710",
    "end": "2066169"
  },
  {
    "text": "done reading that. I have one location and\neverybody's trying to read or write that, even though I\ndon't really use data.",
    "start": "2066170",
    "end": "2071450"
  },
  {
    "text": "This is the sad thing\nabout this. That I'm really using this\nguy's data, but I'm just waiting for the same\nspace to occupy.",
    "start": "2071450",
    "end": "2076730"
  },
  {
    "text": " So, there's a loop carry\ndependence in here, and it's",
    "start": "2076730",
    "end": "2083409"
  },
  {
    "text": "anti-dependent. So what you can do is if you\nfind any anti or output loop",
    "start": "2083410",
    "end": "2089040"
  },
  {
    "text": "carry dependence, you\ncan get rid of them. I'm not really using that value,\nI'm just keeping a location in here.",
    "start": "2089040",
    "end": "2094429"
  },
  {
    "text": "So how can we get rid of that? AUDIENCE: [OBSCURED].",
    "start": "2094430",
    "end": "2101670"
  },
  {
    "text": "PROFESSOR: Yeah. That's one thing. There's two ways of doing it. One is I assign something\nlocal.",
    "start": "2101670",
    "end": "2107210"
  },
  {
    "text": "So each processor will\nhave its own copy, so I don't do that.",
    "start": "2107210",
    "end": "2112760"
  },
  {
    "text": "So it's something like this,\nso that's [OBSCURED]. Or I can look at the array.",
    "start": "2112760",
    "end": "2121299"
  },
  {
    "text": "In the array you can have either\nnumber of process or iterations for each iteration. But uses a different location.",
    "start": "2121300",
    "end": "2127590"
  },
  {
    "text": "This is more efficient than\nthis one because we are touching lot more locations\nin here.",
    "start": "2127590",
    "end": "2134330"
  },
  {
    "text": "I haven't done one thing here. I'm not complete. What have I forgotten to\ndo in both of these?",
    "start": "2134330",
    "end": "2139640"
  },
  {
    "text": "AUDIENCE: [OBSCURED]. PROFESSOR: Yeah, because it was\nbeforehand somebody might",
    "start": "2139640",
    "end": "2145980"
  },
  {
    "text": "use final assignment of the loop\nnest, so what you had to do is you had to kind\nof finalize x. Because I had a temporary\nvariable, so with n, the last",
    "start": "2145980",
    "end": "2153730"
  },
  {
    "text": "value has to go into x. You can't keep just not calculating value in something.",
    "start": "2153730",
    "end": "2160740"
  },
  {
    "text": "So in here, also, you just\nsay last value is x. But after you do that, basically\nnow each of this",
    "start": "2160740",
    "end": "2166390"
  },
  {
    "text": "loop is faster.  Everybody go that? ",
    "start": "2166390",
    "end": "2173420"
  },
  {
    "text": "OK, here's another example. x equals x plus AI.",
    "start": "2173420",
    "end": "2179110"
  },
  {
    "text": "Do I have loop carry\ndependent? ",
    "start": "2179110",
    "end": "2190780"
  },
  {
    "text": "What did the loop-carried\ndependence? True or anti? ",
    "start": "2190780",
    "end": "2199120"
  },
  {
    "text": "True dependence. So this guy is actually creating\nprevious value and adding something in the event.",
    "start": "2199120",
    "end": "2205800"
  },
  {
    "text": "So of course in true dependence\nI cannot seem to parallelize. But there are some interesting\nthings we can do.",
    "start": "2205800",
    "end": "2211760"
  },
  {
    "text": "That was an associative\noperation. I didn't care which order this\ninitial happened, so I'm just",
    "start": "2211760",
    "end": "2218300"
  },
  {
    "text": "keeping a lean bunch\nof values in here. And the results were never\nused in the other loop.",
    "start": "2218300",
    "end": "2223710"
  },
  {
    "text": "So we just keep adding things\nand at the end of the loop you get the sum total in here. I never used any kind of partial\nvalues anywhere.",
    "start": "2223710",
    "end": "2230580"
  },
  {
    "text": "So that gives the idea. So what you can do is we can\ntranslate this into each of",
    "start": "2230580",
    "end": "2237869"
  },
  {
    "text": "the guys doing a temporary\naddition into its own variable. So each processor, just\ndo a partial sum.",
    "start": "2237870",
    "end": "2247650"
  },
  {
    "text": "At the end, once they're done,\nyou basically do the full sum. Of course, you can do a tree\nor whatever much more",
    "start": "2247650",
    "end": "2253289"
  },
  {
    "text": "complicated thing then that --\nyou can also parallelize this part at the tree addition. But you can do that.",
    "start": "2253290",
    "end": "2259130"
  },
  {
    "text": "I mean Roderick talked about\nthis in hand parallelization. But we are doing something\nvery simple in here.",
    "start": "2259130",
    "end": "2266040"
  },
  {
    "text": "So these compilers can figure\nout associative operations and do that.",
    "start": "2266040",
    "end": "2271950"
  },
  {
    "text": "So this is where all the\npeople who are in parallelizing, and all the\npeople who are writing this",
    "start": "2271950",
    "end": "2277720"
  },
  {
    "text": "scientific code kind of start\nhaving arguments. Because they say oh my God,\nyou're doing operations and",
    "start": "2277720",
    "end": "2282770"
  },
  {
    "text": "it's going to have numerical\nstability issues. Yes all true. In compilers you have these\nflags that say OK, just forget",
    "start": "2282770",
    "end": "2289260"
  },
  {
    "text": "about all these very issues, and\nmost probably it will be right, and in most code\nit will work.",
    "start": "2289260",
    "end": "2295320"
  },
  {
    "text": "You might find that problem,\ntoo -- you change operation order to get some parallelism\nand suddenly you are running",
    "start": "2295320",
    "end": "2301370"
  },
  {
    "text": "unstability. There are some algorithms that\nyou can't do that, but most algorithms you can.",
    "start": "2301370",
    "end": "2306440"
  },
  {
    "text": " So here's another interesting\nthing. So, I have a program like that,\n2 to the power I, and of",
    "start": "2306440",
    "end": "2315430"
  },
  {
    "text": "course, most of the time exponentiation is very expensive. If you have a smart\ncompiler --",
    "start": "2315430",
    "end": "2321450"
  },
  {
    "text": "I don't have to exponentiate. This thing called strength\nreduction. They say wait a minute -- I will keep variable t. This 2 to the power i means\nbasically every time I",
    "start": "2321450",
    "end": "2329270"
  },
  {
    "text": "multiply it by 2 and I can't\nkeep repeating that. Do you see why these two\nare equal there?",
    "start": "2329270",
    "end": "2337210"
  },
  {
    "text": "This is good. A lot of good compilers\ndo that. But now what did\nI suddenly do? AUDIENCE: [OBSCURED.]",
    "start": "2337210",
    "end": "2343740"
  },
  {
    "text": "PROFESSOR: Yeah, I reduced the\namount of computation, obviously, but I just introduce\na loop-carried true",
    "start": "2343740",
    "end": "2349099"
  },
  {
    "text": "dependence here.  Because now I have t dependent\non the previous t to calculate",
    "start": "2349100",
    "end": "2355560"
  },
  {
    "text": "the next value, and while\norder-wise or sequential-wise",
    "start": "2355560",
    "end": "2360630"
  },
  {
    "text": "this is a win, now suddenly\nI can't parallelize. Of course, a lot of times what\nyou had to do is you have a",
    "start": "2360630",
    "end": "2366840"
  },
  {
    "text": "very smart programmer. They say aha, I know this\noperation is expensive so I am going to do this myself and\ncreate you a much simpler",
    "start": "2366840",
    "end": "2373580"
  },
  {
    "text": "program in sequentially. Then you try to parallelizes\nthis and you can't. So what you might try to do is\nkind of do this direction",
    "start": "2373580",
    "end": "2381099"
  },
  {
    "text": "transformation many times to\nmake the program run a little bit slower sequentially just\nso you can actually go and",
    "start": "2381100",
    "end": "2387260"
  },
  {
    "text": "parallelize it. So this get's a little\nbit counterintuitive. You just look at a program and\nsay yeah there is a loop",
    "start": "2387260",
    "end": "2393900"
  },
  {
    "text": "carried dependence, I can do it\na little bit more expensive without the loop carried\ndependence, and then suddenly my loop is parallelized.",
    "start": "2393900",
    "end": "2399320"
  },
  {
    "text": "So there might be cases where\nyou might have to do it by hand, and a lot of compilers\nautomatic parallelizing compilers, try to\ndo this also.",
    "start": "2399320",
    "end": "2405990"
  },
  {
    "text": "Kind of look at these kind\nof things and try to move in that direction. Whereas, most of the sequential\ncompiler is trying",
    "start": "2405990",
    "end": "2411290"
  },
  {
    "text": "to find this and move\nthis direction. ",
    "start": "2411290",
    "end": "2416319"
  },
  {
    "text": "So, OK I said that. So, another thing called\narray privatization.",
    "start": "2416320",
    "end": "2421790"
  },
  {
    "text": "So scalars, I show you where\nwhen you have anti and output dependence on a variable,\nyou need to privatize.",
    "start": "2421790",
    "end": "2428259"
  },
  {
    "text": "And in arrays, you have\na lot more complexity. I'm not going to go into that,\nyou can actually do private copies also in there.",
    "start": "2428260",
    "end": "2435440"
  },
  {
    "text": "You can do bunch of\ntransformation. Another thing people do is\ncalled interprocedural parallelization.",
    "start": "2435440",
    "end": "2441740"
  },
  {
    "text": "So the thing is you have a\nnice loop and you start analyzing loop and in the middle\nof a loop you have a function call.",
    "start": "2441740",
    "end": "2448250"
  },
  {
    "text": "Suddenly what are you\ngoing to do with it? You have no idea what the\nfunction does, and most of the simple analysis says OK, I can't\nparallelize anything",
    "start": "2448250",
    "end": "2454529"
  },
  {
    "text": "that has a function call. That's not a good parallelizing\ncompiler because a lot of loops have function\ncalls and you might call it",
    "start": "2454530",
    "end": "2459780"
  },
  {
    "text": "something simple as sine\nfunction or some simple exponentiation function and\nthen suddenly it's not",
    "start": "2459780",
    "end": "2466030"
  },
  {
    "text": "parallelizable. This is a big problem. There are two things\nyou can do.",
    "start": "2466030",
    "end": "2471460"
  },
  {
    "text": "One is interprocedural analysis\nand another inlining. So the interprocedural analysis\nsays I'm going to",
    "start": "2471460",
    "end": "2479600"
  },
  {
    "text": "analyze the entire program and\nI have function, I'm going to go and try to analyze the\nfunction itself also.",
    "start": "2479600",
    "end": "2488830"
  },
  {
    "text": "What happens is -- so assume\nif the functions are used many, many times, so fine\nfunction might be used",
    "start": "2488830",
    "end": "2496060"
  },
  {
    "text": "hundreds of time. So every time you have a call\nof a sine function, if you keep analyzing, reanalyzing\nwhat's happening inside of the",
    "start": "2496060",
    "end": "2501650"
  },
  {
    "text": "sine function, you kind of\nhave exponential blow up. So if you code size n, you might\nhave an exponential time",
    "start": "2501650",
    "end": "2508800"
  },
  {
    "text": "of a number of lines that need\nto be analyzed because every call need to go there, call some\nother functions, you can",
    "start": "2508800",
    "end": "2514079"
  },
  {
    "text": "see the blow up. And so analysis might\nbe expensive. Other option is you analyze\neach function once.",
    "start": "2514080",
    "end": "2520620"
  },
  {
    "text": "Yeah, OK. I analyze this function once\nand every time I use that function I just use that\nanalysis information.",
    "start": "2520620",
    "end": "2527990"
  },
  {
    "text": "What that means is you have a\nkind of summary of what that function does for every call.",
    "start": "2527990",
    "end": "2533390"
  },
  {
    "text": "This is not that easy and this\nruns into a thing called unrealizable part problem,\nbecause you go into function",
    "start": "2533390",
    "end": "2538660"
  },
  {
    "text": "in one part -- assume you call foo from\nhere and return here.",
    "start": "2538660",
    "end": "2546460"
  },
  {
    "text": "You call it here and\nreturn and here. So when you analyze, normally\nyou can go from here to here, here to here, but if you treat\nfoo as only one thing you",
    "start": "2546460",
    "end": "2554530"
  },
  {
    "text": "might be able to even think that\nyou can go here to here and here to here. So this looks like one\nthing in here.",
    "start": "2554530",
    "end": "2560790"
  },
  {
    "text": "You see that control here goes\nhere, comes here do a function call goes here, because\nwe are not treating",
    "start": "2560790",
    "end": "2566549"
  },
  {
    "text": "this as separate instance. So why did are we analyzing\nit once? This cleared all this additional\nmess and then can",
    "start": "2566550",
    "end": "2572650"
  },
  {
    "text": "have problems in here. So these are the kind of\nresearchy things people are working on. There's no perfect answer,\nthese are complicated",
    "start": "2572650",
    "end": "2579480"
  },
  {
    "text": "problems, so you had to do some interesting balance in here.",
    "start": "2579480",
    "end": "2585770"
  },
  {
    "text": "Because other thing is every\nanalyst has to deal with that, so you had to kind of\nan anti-compiler, which is not simple.",
    "start": "2585770",
    "end": "2592940"
  },
  {
    "text": "Inlining is much more easy. It's a poor man solution, so\nevery time you have function call, you just bring\nthe function and",
    "start": "2592940",
    "end": "2598570"
  },
  {
    "text": "just copy it in there. And every time you have function\ncall you bring the function and you can run it\nthrough the same compiler, but of course, you can have\nhuge code blow up.",
    "start": "2598570",
    "end": "2605510"
  },
  {
    "text": "It's not only analysis expense,\nyou might have a function that before had only\n100 lines, now we have",
    "start": "2605510",
    "end": "2610730"
  },
  {
    "text": "millions of lines in there\nand then try and do cache problems, all those\nother issues. So can be very expensive too.",
    "start": "2610730",
    "end": "2616309"
  },
  {
    "text": "So what people do is things like\nselective inlining and a lot of kind of interesting\ncombinations of these.",
    "start": "2616310",
    "end": "2625970"
  },
  {
    "text": "Finally, loop transformations. So i have this loop, so I have\nAij equals Aij minus 1, A i",
    "start": "2625970",
    "end": "2633560"
  },
  {
    "text": "minus 1 j So look at my -- my\narrowheads look too big there, but look at my dependences.",
    "start": "2633560",
    "end": "2640280"
  },
  {
    "text": "Is any of this parallel? AUDIENCE: [OBSCURED.]",
    "start": "2640280",
    "end": "2650460"
  },
  {
    "text": "PROFESSOR: Yeah.  So, assays neither --",
    "start": "2650460",
    "end": "2656280"
  },
  {
    "text": "you can't parallelize I because\nthere's a loop carry dependence in I dimension. You can't parallelize J because\nthere's loop carry",
    "start": "2656280",
    "end": "2663800"
  },
  {
    "text": "dependence in J diimension. She has idea because you\ncan actually pipeline. So pipelining, we haven't\nfigured out how",
    "start": "2663800",
    "end": "2670480"
  },
  {
    "text": "to parallelize pipeline. So the way you can do\nthis simply is a thing called loop skewing.",
    "start": "2670480",
    "end": "2677410"
  },
  {
    "text": "You can kind of -- because iteration space has\nchanged from a data space. You can come up with a new\niteration space that kind of",
    "start": "2677410",
    "end": "2685090"
  },
  {
    "text": "skew the loop in there. So what it does is normally\niteration space, what this J",
    "start": "2685090",
    "end": "2691120"
  },
  {
    "text": "outside, so you go execute\nlike this. The skill that -- loop basically\nsay I am executing",
    "start": "2691120",
    "end": "2697640"
  },
  {
    "text": "this way, so I'm executing\nthe pipeline, basically pipeline here. So I'm kind of going like this\nway, executing that way.",
    "start": "2697640",
    "end": "2704059"
  },
  {
    "text": "If I could run that loop in that\nfashion, what I can do is",
    "start": "2704060",
    "end": "2709470"
  },
  {
    "text": "I can run this -- after this\niteration, when you go run the next iteration, there's no\ndependence across here.",
    "start": "2709470",
    "end": "2716340"
  },
  {
    "text": "If I run here, I don't have\ndependence, so I can run each of these and I have a parallel\nset of iterations to run.",
    "start": "2716340",
    "end": "2722510"
  },
  {
    "text": "So in here, what happens is\nthis inner loop it can be parallel, basically like your\npipeline, but it's written in",
    "start": "2722510",
    "end": "2730200"
  },
  {
    "text": "a way that I still have my two\nloops in here, but I have done this weird transformation.",
    "start": "2730200",
    "end": "2736700"
  },
  {
    "text": "Another interesting is\ngranularity of parallelism. Assume I have a loop\nlike that, i and j. Which loop is that in here?",
    "start": "2736700",
    "end": "2744150"
  },
  {
    "text": "i or j? j is parallel. OK, I do something like that. I say I run i, every iteration\nI do a barrier, I run j",
    "start": "2744150",
    "end": "2752579"
  },
  {
    "text": "parallel and I end up doing\na barrier again. What might be a problem in\nsomething like this?",
    "start": "2752580",
    "end": "2765510"
  },
  {
    "text": "I mean inner parallelism can\nbe expensive, because every time I had to do this probably\nexpensive barrier, run a few",
    "start": "2765510",
    "end": "2773119"
  },
  {
    "text": "iterations, a few in\nthis one, probably only like a few cycles. And write this very expensive\nbarrier again, and everybody",
    "start": "2773120",
    "end": "2778980"
  },
  {
    "text": "communicates -- all of those things. Most of the time when you do\ninner loop parallelism it",
    "start": "2778980",
    "end": "2785170"
  },
  {
    "text": "actually slows down\nthe program. You will probably find it too\nsometimes, if you define the parallelism inner array to be\ntoo small, it actually has a",
    "start": "2785170",
    "end": "2792059"
  },
  {
    "text": "negative impact, because all the\ncommunication you need to do, synchronization you\nneed to do all of them out of the program.",
    "start": "2792060",
    "end": "2799740"
  },
  {
    "text": "So inner loop is expensive. What are your choices? Don't parallelize. Pretty good choice for\na lot of cases.",
    "start": "2799740",
    "end": "2805980"
  },
  {
    "text": "You look at this and this is\nactually going to win you basically by doing that. Or can you transform it to\nouter loop parallelism.",
    "start": "2805980",
    "end": "2811960"
  },
  {
    "text": "Take inner loop parallelism and\nyou change it to get outer loop parallelism. This program is actually nice,\nthere are some complex",
    "start": "2811960",
    "end": "2817070"
  },
  {
    "text": "analysis you need to do to\nmake sure that's legal. So you can basically\ntake this one and",
    "start": "2817070",
    "end": "2823390"
  },
  {
    "text": "transform in other direction. What that means is kind of\ndo a loop interchange.",
    "start": "2823390",
    "end": "2830780"
  },
  {
    "text": "So now instead of i, you have a\na j outer dimension, i inner dimension, inner loop.",
    "start": "2830780",
    "end": "2836050"
  },
  {
    "text": "When you do that what you have\nis your barrier, and then you can run this is parallel\nand this like this.",
    "start": "2836050",
    "end": "2843750"
  },
  {
    "text": "Suddenly, instead of having n\nbarriers for that loop, you",
    "start": "2843750",
    "end": "2849985"
  },
  {
    "text": "have only one barrier. Suddenly you have a much larger\nchunk you're running, and this can be run.",
    "start": "2849985",
    "end": "2861069"
  },
  {
    "text": "OK, so this is great. So I talked to all about all\nthis nice transformation, stuff like that. So at some point when you know\nsomething is parallel you",
    "start": "2861070",
    "end": "2867790"
  },
  {
    "text": "might want to go and generate\nparallel form. So the problem is, depending on\nhow you partition, the loop",
    "start": "2867790",
    "end": "2876150"
  },
  {
    "text": "bound has to be changed, and I'm\ngoing to talk to you about how to get loop bound. So let's look at this program.",
    "start": "2876150",
    "end": "2882440"
  },
  {
    "text": "So I have something in here and\nthere's an inner loop that",
    "start": "2882440",
    "end": "2888790"
  },
  {
    "text": "actually reads, outer\nloop writes. Inner loop reads. And it's a triangular thing. It's a big mess.",
    "start": "2888790",
    "end": "2894300"
  },
  {
    "text": "Now I assume I want to run\nthe i loop parallel. So what that means is I want\nto run the first process --",
    "start": "2894300",
    "end": "2902860"
  },
  {
    "text": "there is no for this one, this\none on one iteration, two iteration, three, four,\nwhatever, each one's in here.",
    "start": "2902860",
    "end": "2908450"
  },
  {
    "text": "How do I actually go about\ngenerating code that actually does that?",
    "start": "2908450",
    "end": "2913750"
  },
  {
    "text": "Each processor runs its right\nnumber of iteration. This is a non-trivial thing\nbecause triangularly you get",
    "start": "2913750",
    "end": "2919410"
  },
  {
    "text": "something different and you\ncan assume all this complexity. One thing I did is my iteration\nspace between i and",
    "start": "2919410",
    "end": "2928250"
  },
  {
    "text": "j, this is my iteration space.",
    "start": "2928250",
    "end": "2934050"
  },
  {
    "text": "So I assume, assume I am\nrunning a processor. Each I iteration run by your\nprocessor, you can say you",
    "start": "2934050",
    "end": "2939319"
  },
  {
    "text": "have then another dimension P,\nand say i equals P. So I can",
    "start": "2939320",
    "end": "2944580"
  },
  {
    "text": "look at now instead of a two\ndimensional space in a three dimensional space. So in this analysis, if you can\nthink multi-dimensionally",
    "start": "2944580",
    "end": "2950340"
  },
  {
    "text": "it's actually very helpful\nbecause we can kind of keep adding dimensions in here.",
    "start": "2950340",
    "end": "2955970"
  },
  {
    "text": "So what are the loop\nbounds in here? What we can do is use another\ntechnique called",
    "start": "2955970",
    "end": "2962599"
  },
  {
    "text": "Fourier-Motzkin Elimination to\ncalculate loop bounds by using projections of the\niteration space.",
    "start": "2962600",
    "end": "2968040"
  },
  {
    "text": "I will go through later\na bit to give you a flavor for what it is. It's also, if you are in to\nlinear programming, this is",
    "start": "2968040",
    "end": "2973910"
  },
  {
    "text": "kind of extension techniques\non that. So the way we look\nat that is --",
    "start": "2973910",
    "end": "2979820"
  },
  {
    "start": "2979820",
    "end": "3006390"
  },
  {
    "text": "A little bit too far. I didn't realize MAC\ncan be this slow.",
    "start": "3006390",
    "end": "3018599"
  },
  {
    "text": "[ASIDE CONVERSATION]",
    "start": "3018600",
    "end": "3026480"
  },
  {
    "text": "See this is why we need\nparallelism if you think this running fast. So what you can do\nis you can think about this",
    "start": "3026480",
    "end": "3033000"
  },
  {
    "text": "as this three dimensional\nspace. i, j and p. And because i is equal to p, if\nyou get i and p, get a line",
    "start": "3033000",
    "end": "3040069"
  },
  {
    "text": "in that dimension and\nthen j goes there. So this is the kind of iteration\nspace in here, and that represents inequalities\nhere.",
    "start": "3040070",
    "end": "3047930"
  },
  {
    "text": "So what I want is a loop where\nouter dimension is p, then the next dimension is i and j.",
    "start": "3047930",
    "end": "3054799"
  },
  {
    "text": "We can think about\nit like that. So what that means is I need to\nget my iteration ordering -- when it happens, you\njust go like that.",
    "start": "3054800",
    "end": "3064140"
  },
  {
    "text": "All right, about doing that. So this is the kind of loop I\nwant to generate -- let me go and show you how we\ngenerate that. ",
    "start": "3064140",
    "end": "3085530"
  },
  {
    "text": "So here's my space in here, so\nfirst one I want to do is my inner most dimension is j.",
    "start": "3085530",
    "end": "3092100"
  },
  {
    "text": "And what I can do is I can look\nat this thing and say what are the bounds of j. So, for each of the bounds of\nj can be described by --",
    "start": "3092100",
    "end": "3100370"
  },
  {
    "text": "with p and i. I'll actually show you how to\ndo that in little while. Then I will get j goes\nfrom 1 to i minus 1.",
    "start": "3100370",
    "end": "3111180"
  },
  {
    "text": "Then after that I can basically\nproject it into to eliminate j dimension. So what I'm doing is I'm going\nto have a three dimension and",
    "start": "3111180",
    "end": "3116860"
  },
  {
    "text": "I project into two dimensions\nwithout j anymore, because now all I have left is i p and I get\na line in that dimension.",
    "start": "3116860",
    "end": "3124110"
  },
  {
    "text": "Then what I have to do is\nnow I had to find i. What are my bounds of i?",
    "start": "3124110",
    "end": "3130110"
  },
  {
    "text": "And bounds of i is actually\ni is equal to p. You can figure that\none out because there's a line in there.",
    "start": "3130110",
    "end": "3136190"
  },
  {
    "text": "Then you eliminate i and\nnow you get this one. ",
    "start": "3136190",
    "end": "3141330"
  },
  {
    "text": "Then what are bounds of p? p\ngoes from basically 2 to n.",
    "start": "3141330",
    "end": "3147070"
  },
  {
    "text": "You just basically get that. So you can do this projection in\nhere -- let me go in there, and now what you end up doing\nis you can get this, and of",
    "start": "3147070",
    "end": "3155710"
  },
  {
    "text": "course, outer loop p is not\na true -- like a loop. You can say you get p, my_pid.",
    "start": "3155710",
    "end": "3161050"
  },
  {
    "text": "p is with this range.\ni equals p. Do this one. So this one, -- generated\nthat piece of code.",
    "start": "3161050",
    "end": "3166569"
  },
  {
    "text": "So I will go a little bit\ndetail and show how this happens, pretty much\ncan happen. So I have my little bit\nof different space.",
    "start": "3166570",
    "end": "3174640"
  },
  {
    "text": "I'm doing a different\nprojection. I'm doing i, j, p. I want to predict first i of a,\nj of a, and p of a instead",
    "start": "3174640",
    "end": "3180340"
  },
  {
    "text": "of j, i, p before\nI do anything. So here's my iteration\nspace, what do I do? The first thing I do is I find\nthe bounds of i, So I have",
    "start": "3180340",
    "end": "3187860"
  },
  {
    "text": "this thing. I just basically expanded this,\nand eliminated the j",
    "start": "3187860",
    "end": "3194230"
  },
  {
    "text": "this one doesn't contribute\nto the bounds of i, but everybody else. So there are a bunch of things\nthat i has to be less than",
    "start": "3194230",
    "end": "3199630"
  },
  {
    "text": "that and i have to be greater\nthan these two. Then what I have is bound of i\nis, it has to be maximum of",
    "start": "3199630",
    "end": "3206840"
  },
  {
    "text": "this because it has to be\ngreater than all three. So it has to be max of\nthis, this, and this. It has to be less than these\ntwo, it has to be",
    "start": "3206840",
    "end": "3212190"
  },
  {
    "text": "mean of this one. Question? AUDIENCE: Well why did you have\nto go through all this. At least in this case, the outer\nloop was very simple,",
    "start": "3212190",
    "end": "3218520"
  },
  {
    "text": "you could have just directly\nmapped that. PROFESSOR: I agree with you,\nit's very simple thing, but the problem is that's because\nyou are smart and you can",
    "start": "3218520",
    "end": "3225260"
  },
  {
    "text": "think a little bit ahead in\nthere, and if I'm programming a computer, I can't say find\nthese special cases.",
    "start": "3225260",
    "end": "3232290"
  },
  {
    "text": "So I want to come up with a\nmathematical way that is a bullet proof way that will work\nfrom the simplest one to",
    "start": "3232290",
    "end": "3237340"
  },
  {
    "text": "very complicated, like for\nexample, finding the loop bounds for that loop transpose\nthat I showed you before --",
    "start": "3237340",
    "end": "3244849"
  },
  {
    "text": "no, the skew that what\nwe called before. AUDIENCE: So it's not so much\njust defining an index to",
    "start": "3244850",
    "end": "3253265"
  },
  {
    "text": "iterate on, it's to\nfind the best index to map, to parellize. PROFESSOR: Any could be issue,\nbecause you have --",
    "start": "3253266",
    "end": "3260010"
  },
  {
    "text": "for example, if the inner\ndimension depends on i, and i goes outside, then I can't\nmake it depend on i.",
    "start": "3260010",
    "end": "3267269"
  },
  {
    "text": "So if I have something like for\ni equals something, for j",
    "start": "3267270",
    "end": "3273850"
  },
  {
    "text": "equals i to something. Now if I switch these\ntwo I have 4j.",
    "start": "3273850",
    "end": "3281349"
  },
  {
    "text": "I can't say it's\ni to something. I have to get rid of i and I\nhave to figure out in the for i, this has to be something\nwith j, with some function",
    "start": "3281350",
    "end": "3289230"
  },
  {
    "text": "with j in here. So what is this function,\nhow do you get that?",
    "start": "3289230",
    "end": "3296690"
  },
  {
    "text": "You need this kind of\ntransformations do that. Next time I'll talk to you about\ncan you do it a little bit even better.",
    "start": "3296690",
    "end": "3302480"
  },
  {
    "text": "So I get this bound in here.  Then actually you found this\nis going from p to p.",
    "start": "3302480",
    "end": "3311390"
  },
  {
    "text": "So I can actually set p because,\nmean and max in here.",
    "start": "3311390",
    "end": "3316400"
  },
  {
    "text": "Then after you do that, what you\nhave to do is eliminate I. The way you eliminate I is you\ntake this has to be always",
    "start": "3316400",
    "end": "3325980"
  },
  {
    "text": "less than n and less than p. So you take this n constraints\nhere and you get a n times m",
    "start": "3325980",
    "end": "3334630"
  },
  {
    "text": "constraints tier in here. So the first three has to be\nless than n, again, we repeat it again, has to\nbe less than p.",
    "start": "3334630",
    "end": "3342260"
  },
  {
    "text": "Then, of course, the missing\nconstraint that 1 is less than j.",
    "start": "3342260",
    "end": "3347660"
  },
  {
    "text": "You put all those constraints\ntogether. Now, nice think is in that\none, it's still legal, it still represents that\nspace, but you don't",
    "start": "3347660",
    "end": "3354050"
  },
  {
    "text": "have i there anymore. You can completely\nget rid of i. So, by doing that -- and then\nof course, there's a lot of",
    "start": "3354050",
    "end": "3361160"
  },
  {
    "text": "redundancy in here, and then you\ncan do some analysis and eliminate redundancy and you\nend up in this set of constraints.",
    "start": "3361160",
    "end": "3366760"
  },
  {
    "text": "That's where when you say what's\nthe best, you can be best -- it has to be correct or\nthat means you can't have",
    "start": "3366760",
    "end": "3373590"
  },
  {
    "text": "additional iterations\nor less iterations. But best depends on how\ncomplicated is the loop bound",
    "start": "3373590",
    "end": "3379400"
  },
  {
    "text": "calculation. You can come up with a correct\nsolution, and the best is depending on which order\nyou do that.",
    "start": "3379400",
    "end": "3386060"
  },
  {
    "text": "When you have two redundant\nthing, which one you eliminate, so you can have a lot\nof heuristics saying OK, look if this one looks harder\nto calculate, eliminate that",
    "start": "3386060",
    "end": "3392520"
  },
  {
    "text": "one with the other one. So you get this set\nof constraints. Then you have to do is now\nfind the bounds of j.",
    "start": "3392520",
    "end": "3399950"
  },
  {
    "text": "So you have this set again. To find a bound of j only two\nconstraints are there, and you",
    "start": "3399950",
    "end": "3406450"
  },
  {
    "text": "know j goes to 1 to p minus 1,\nand you find the bound of j. Getting rid of j means\nthere's only two.",
    "start": "3406450",
    "end": "3415859"
  },
  {
    "text": "One get rid of p minus 1. There are two left for p. You put it there, and then you\ncan eliminate the redundance",
    "start": "3415860",
    "end": "3422200"
  },
  {
    "text": "in here, and now you can find\nthe bounds of p which goes",
    "start": "3422200",
    "end": "3427450"
  },
  {
    "text": "from 2 to n. And suddenly you have the loop\nnest. So now I actually di",
    "start": "3427450",
    "end": "3434720"
  },
  {
    "text": "parallelization and a loop\ntranspose in here. ",
    "start": "3434720",
    "end": "3440200"
  },
  {
    "text": "I could combine those two, use\nthis simple mathematical way and find loop bounds in here.",
    "start": "3440200",
    "end": "3447050"
  },
  {
    "text": "So, I'm going to give you\nsomething even a little bit interesting beyond that, which\nis communication code",
    "start": "3447050",
    "end": "3452829"
  },
  {
    "text": "generation.  So if you are dealing with a\ncache coherent shared memory",
    "start": "3452830",
    "end": "3459240"
  },
  {
    "text": "machine, you are done. You generate code for parallel\nloop nest, you can go home because everything else will\nbe done automatically.",
    "start": "3459240",
    "end": "3465900"
  },
  {
    "text": "But as we all know in something\nlike Cell, if you have a no cache coherent shared\nmemory or distributed",
    "start": "3465900",
    "end": "3471099"
  },
  {
    "text": "memory, you have to do this\none first. Then you write identify communication\nand then you generate",
    "start": "3471100",
    "end": "3476640"
  },
  {
    "text": "communication code. This have additional\nburden in here.",
    "start": "3476640",
    "end": "3484670"
  },
  {
    "text": "So until now in data dependence\nanalysis, what we looked at was location-centric\ndependences.",
    "start": "3484670",
    "end": "3491039"
  },
  {
    "text": "Which location is written by\nprocessor one is used by processor two. That's kind of a\nlocation-centric kind of view.",
    "start": "3491040",
    "end": "3499599"
  },
  {
    "text": "How about if multiple writes\nthe same location? We show that in example, if\nmultiple people write the same",
    "start": "3499600",
    "end": "3505220"
  },
  {
    "text": "location, which one\nshould I use? That's not clear.",
    "start": "3505220",
    "end": "3510849"
  },
  {
    "text": "What you are using in the last\nlast guy who wrote that location before I read that\nthing, and that's not in these data flow analysis.",
    "start": "3510850",
    "end": "3516690"
  },
  {
    "text": "No data dependence analysis\ndoesn't get it. What you want is something\nof a value-centric.",
    "start": "3516690",
    "end": "3523490"
  },
  {
    "text": "Who was the last write\nbefore my iteration, who wrote that location?",
    "start": "3523490",
    "end": "3529540"
  },
  {
    "text": "If I know the last write, he's\nthe one I should be getting the value from. If the last write happened in\nthe same processor, I am set",
    "start": "3529540",
    "end": "3537720"
  },
  {
    "text": "because I wrote the local\ncopy and I don't need to deal with anything. If the last write happened in\na different processor, you",
    "start": "3537720",
    "end": "3545040"
  },
  {
    "text": "need to get that value from the\nguys who wrote it and say, OK, you wrote that value,\ngive it to me. If nobody wrote it and I'm\nreading it, that means the",
    "start": "3545040",
    "end": "3552340"
  },
  {
    "text": "value came from the original\narray because nobody had written it in my iteration.",
    "start": "3552340",
    "end": "3557600"
  },
  {
    "text": "Then I'm reading something\nthat has come from the previous iteration. So I have to get it from\nthe original array.",
    "start": "3557600",
    "end": "3563630"
  },
  {
    "text": "But I have these three\ndifferent conditions. So you know to represent that.",
    "start": "3563630",
    "end": "3569260"
  },
  {
    "text": "I'm not going to go into detail\non into detail on this representation called\nLast Write Trees. So what it says is in this kind\nof a loop nest in here,",
    "start": "3569260",
    "end": "3581160"
  },
  {
    "text": "you have some read access and\nwrite accesses in here, and if you look at it\nlocation-centrically you get",
    "start": "3581160",
    "end": "3586480"
  },
  {
    "text": "this entire complex graph,\nbecause this is the graph that should have been in that example\nwe gave. So these",
    "start": "3586480",
    "end": "3593166"
  },
  {
    "text": "arrays going in here. I'm switching notation. before i was going the other\nway around. j was in here.",
    "start": "3593166",
    "end": "3599820"
  },
  {
    "text": " But if you go look\nat value-centric,",
    "start": "3599820",
    "end": "3606589"
  },
  {
    "text": "this is what happens. So you say all these\nguys basically got the value from outside.",
    "start": "3606590",
    "end": "3612910"
  },
  {
    "text": "Nobody wrote it. This got from -- this is the\nwrite, this is the last write, this is the last write -- I actually have my last\nwrite information.",
    "start": "3612910",
    "end": "3619380"
  },
  {
    "text": "So where to look at that is\nthere are some part of iteration got value from\nsomewhere, other part go somewhere else.",
    "start": "3619380",
    "end": "3624740"
  },
  {
    "text": "You can't kind of do a big\nsummary, as you point out that kind of dependence depend on\nwhere the iterations are.",
    "start": "3624740",
    "end": "3630079"
  },
  {
    "text": "So you can represent it using\na tree when it shows up. So you can say if j greater\nthan 1, here's the",
    "start": "3630080",
    "end": "3639170"
  },
  {
    "text": "relationship between\nreads and writes. Otherwise relationship means\nit came from outside.",
    "start": "3639170",
    "end": "3644230"
  },
  {
    "text": "So I can say for each\ndifferent places. So you can think about this\ntree can be a lot more",
    "start": "3644230",
    "end": "3649410"
  },
  {
    "text": "complicated tree. So each part of the iteration\nspace, I got data from somewhere else. ",
    "start": "3649410",
    "end": "3657060"
  },
  {
    "text": "So, you get this\nfunction here. I think I'll go to\nthe next slide. ",
    "start": "3657060",
    "end": "3682490"
  },
  {
    "text": "So what you can do is now I\nhave processor who read, processor who write, and\niterations that I can reading",
    "start": "3682490",
    "end": "3690880"
  },
  {
    "text": "and writing. One thing I can do is I can\nrepresent i using a huge",
    "start": "3690880",
    "end": "3698089"
  },
  {
    "text": "multi-dimensional space. So what happens in here is the\nreceive iterations, those are",
    "start": "3698090",
    "end": "3706299"
  },
  {
    "text": "the iterations that actually\ndata has to be received in communication. Assume that the part I'm\nactually communicating is also",
    "start": "3706300",
    "end": "3711790"
  },
  {
    "text": "within the loop bound,\nso I can write that. And the last write relation\nis that i",
    "start": "3711790",
    "end": "3720280"
  },
  {
    "text": "send has to be i receive. We know that. ",
    "start": "3720280",
    "end": "3726039"
  },
  {
    "text": "What you have is the parallel\nwith the processors -- this is",
    "start": "3726040",
    "end": "3731250"
  },
  {
    "text": "i iterations are parallel, so\nprocessor, receive processor, is running iteration\ni, process i.",
    "start": "3731250",
    "end": "3738500"
  },
  {
    "text": "Send iterations are the same\nbecause you want to parallelize that\nloop basically. In each iteration get assigned\nto each process.",
    "start": "3738500",
    "end": "3746900"
  },
  {
    "text": "Of course, you want to make sure\nthe process communication is non-local. If it's local I don't have\nloop communication. I can represent this as this\ngigantic system of equalities.",
    "start": "3746900",
    "end": "3755309"
  },
  {
    "text": "It has one, two, three, four,\nfive, and there's a j receiver also in here, because you've\ngot to remember I think the",
    "start": "3755310",
    "end": "3762130"
  },
  {
    "text": "program I wrote, the original\nprogram basically, write happen in outer loop and the\nread happen inner loop.",
    "start": "3762130",
    "end": "3768230"
  },
  {
    "text": "So there's only j receive,\nthe i send in here. I'll show that later.",
    "start": "3768230",
    "end": "3774220"
  },
  {
    "text": "So I have five dimensions. So I can't really draw five\ndimensions, but can I wait",
    "start": "3774220",
    "end": "3780990"
  },
  {
    "text": "until it comes back? ",
    "start": "3780990",
    "end": "3804640"
  },
  {
    "text": "So what I have here is I have\nthis set of complete system of inequalities for receive\nand in communication.",
    "start": "3804640",
    "end": "3812620"
  },
  {
    "text": "Of course, since I can't draw\nfive dimensions, and these dimensions are the same, I just\nwrote it in the same.",
    "start": "3812620",
    "end": "3819099"
  },
  {
    "text": "So you can actually assume\nthat there's another two dimensions for this\none, and that's a line in that dimension.",
    "start": "3819100",
    "end": "3824109"
  },
  {
    "text": " Actually, this is wrong.",
    "start": "3824110",
    "end": "3830100"
  },
  {
    "text": "Sorry. This should be xi\nhere written. ",
    "start": "3830100",
    "end": "3836329"
  },
  {
    "text": "My program is wrong, sorry. ",
    "start": "3836330",
    "end": "3844290"
  },
  {
    "text": "Now what do I do? One more time it has to go.",
    "start": "3844290",
    "end": "3850460"
  },
  {
    "text": "It makes me slow down my\nlectures which is probably a",
    "start": "3850460",
    "end": "3857300"
  },
  {
    "text": "good thing. There we go. So what you can do is you can\njust scan these by predicting",
    "start": "3857300",
    "end": "3863500"
  },
  {
    "text": "different ways to calculate the\nsend loop nest and receive loop nest. So if you scan in\nthat direction, what you end",
    "start": "3863500",
    "end": "3870060"
  },
  {
    "text": "up is something saying for this\nprocessor you need to send, for this iteration,\nthis processor.",
    "start": "3870060",
    "end": "3879090"
  },
  {
    "text": "For what you need to send will\nbe received by these processors and this iteration\nand this, and this you can",
    "start": "3879090",
    "end": "3886650"
  },
  {
    "text": "send xi to this iteration\nat this processor.",
    "start": "3886650",
    "end": "3891760"
  },
  {
    "text": "Because you had that\nrelationship, you can get the loop nest that actually\nwill do the send.",
    "start": "3891760",
    "end": "3900720"
  },
  {
    "text": "The send there you can actually\nget a loop nest do receive and it shows up.",
    "start": "3900720",
    "end": "3906640"
  },
  {
    "text": "So what that means is, so all\nthese guys have to send all these iterations have\nto do the receive.",
    "start": "3906640",
    "end": "3913280"
  },
  {
    "start": "3913280",
    "end": "3930900"
  },
  {
    "text": "So, if you predicted a different\nordering, what you end up is you can say now for\nthis processor has to receive.",
    "start": "3930900",
    "end": "3939550"
  },
  {
    "text": "All these processors had to\nreceive something send by these guys. So now you can get that entire\nloop nest for receiving and",
    "start": "3939550",
    "end": "3948550"
  },
  {
    "text": "entire loop nest for sending,\nand you have computation loop nest also. The problem is you can't run\nthem sequentially because",
    "start": "3948550",
    "end": "3953790"
  },
  {
    "text": "you're run in some\ninto the order. So what you have is something\nthat next slide will show.",
    "start": "3953790",
    "end": "3960349"
  },
  {
    "text": "So you have this iteration,\nthere's some computation happen from all the one, and I\nwill get a loop nest do some",
    "start": "3960350",
    "end": "3965760"
  },
  {
    "text": "send, I need loop nest do some\nreceive, in a one dimensional, these kind of, you get three\nseperate things.",
    "start": "3965760",
    "end": "3971440"
  },
  {
    "text": "But of course, what you\nhad to do is you had to generate code. So the way to do that is --.",
    "start": "3971440",
    "end": "3976609"
  },
  {
    "start": "3976610",
    "end": "3981850"
  },
  {
    "text": "So what you have to do is kind\nof break this apart into pieces where things happen, so\nthis one you do computation,",
    "start": "3981850",
    "end": "3987290"
  },
  {
    "text": "this one you do computation and\nreceive, and computation send receive and whatever.",
    "start": "3987290",
    "end": "3992580"
  },
  {
    "text": " Should be probably send here\nand receive but --",
    "start": "3992580",
    "end": "3997720"
  },
  {
    "text": " For that one, if you combine\nthis you get a complicated",
    "start": "3997720",
    "end": "4003360"
  },
  {
    "text": "mess like this. But this all can be done very\nin an automated fashion by using this Fourier-Motzkin\nElimination and this linear",
    "start": "4003360",
    "end": "4011849"
  },
  {
    "text": "representation. Of course, you can do\na lot of interesting",
    "start": "4011850",
    "end": "4017240"
  },
  {
    "text": "things on top of that. You can eliminate redundant\ncommunication, if you're keeping sending the same thing\nagain that have a send unit, eliminate that, you can\naggregate communication.",
    "start": "4017240",
    "end": "4024780"
  },
  {
    "text": "You want to send a word at a\ntime, you can send bunch of things into one packet. You can do multitask.",
    "start": "4024780",
    "end": "4029810"
  },
  {
    "text": "So same thing, send to\nmultiple people. Doesn't have that much in Cell,\nbut assume some machines",
    "start": "4029810",
    "end": "4035164"
  },
  {
    "text": "have multitask support, you can\ndo that, and also you can do some local memory management\nbecause if you have",
    "start": "4035165",
    "end": "4040670"
  },
  {
    "text": "distributed memory, you don't\nhave to allocate everybody's memory and only use a part. You can say OK, look everybody\nonly had to",
    "start": "4040670",
    "end": "4046370"
  },
  {
    "text": "allocate that part. OK. In summary, I think automatic\nparallelism of loops and",
    "start": "4046370",
    "end": "4056180"
  },
  {
    "text": "arrays -- we talked about data\ndependence analysis, and we talked about iteration and data\nspaces, a how to do that,",
    "start": "4056180",
    "end": "4062210"
  },
  {
    "text": "and how the formulate assay\ninteger programming problem. We can look at lot of\noptimization that can increase",
    "start": "4062210",
    "end": "4069380"
  },
  {
    "text": "parallelism and then do that. Also, we can deal with tings\nlike communication code",
    "start": "4069380",
    "end": "4075760"
  },
  {
    "text": "generation and generating\nloop nest by doing this Fourier-Motzkin Elimination. So what I want to show out of\nthis talk is that, in fact,",
    "start": "4075760",
    "end": "4083260"
  },
  {
    "text": "this parallelization --\nautomatic parallelization of normal loop can be done by\nmapping into some nice",
    "start": "4083260",
    "end": "4090059"
  },
  {
    "text": "mathematical framework,\nand basically manipulating in that map.",
    "start": "4090060",
    "end": "4095520"
  },
  {
    "text": "So there are many other things\nthat really complicates the life take out of parallelizing\nprograms. So like C, there are",
    "start": "4095520",
    "end": "4103040"
  },
  {
    "text": "pointers, you have to\ndeal with that. So this problem is not this\nsimple, but what compiler",
    "start": "4103040",
    "end": "4109020"
  },
  {
    "text": "writers try to do most of the\ntime is trying to find this kind of thing. Find interesting mathematical\nmodels and do a mapping in",
    "start": "4109020",
    "end": "4114960"
  },
  {
    "text": "there and then operating that\nmodel and hopefully you can get the analysis needed and even\nthe transformation needed",
    "start": "4114960",
    "end": "4121940"
  },
  {
    "text": "using that kind of\na nice model. So I just kind of gave you\na good feel for general",
    "start": "4121940",
    "end": "4128769"
  },
  {
    "text": "parallelizing compilers. We will take a ten-minute break and talk about streaming.",
    "start": "4128770",
    "end": "4134759"
  },
  {
    "text": "We'll see if I can make\nthis computer run faster in the meantime. ",
    "start": "4134760",
    "end": "4138206"
  }
]