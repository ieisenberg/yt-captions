[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "In the previous lecture we developed the instruction\nset architecture for the Beta, the computer",
    "start": "1319",
    "end": "6019"
  },
  {
    "text": "system we'll be building throughout this part\nof the course.",
    "start": "6019",
    "end": "9540"
  },
  {
    "text": "The Beta incorporates two types of storage\nor memory.",
    "start": "9540",
    "end": "13280"
  },
  {
    "text": "In the CPU datapath there are 32 general-purpose\nregisters, which can be read to supply source",
    "start": "13280",
    "end": "19619"
  },
  {
    "text": "operands for the ALU or written with the ALU\nresult.",
    "start": "19620",
    "end": "24279"
  },
  {
    "text": "In the CPU's control logic there is a special-purpose\nregister called the program counter, which",
    "start": "24279",
    "end": "28890"
  },
  {
    "text": "contains the address of the memory location\nholding the next instruction to be executed.",
    "start": "28890",
    "end": "34739"
  },
  {
    "text": "The datapath and control logic are connected\nto a large main memory with a maximum capacity",
    "start": "34740",
    "end": "40280"
  },
  {
    "text": "of 2^32 bytes, organized as 2^30 32-bit words.",
    "start": "40280",
    "end": "46440"
  },
  {
    "text": "This memory holds both data and instructions.",
    "start": "46440",
    "end": "49670"
  },
  {
    "text": "Beta instructions are 32-bit values comprised\nof various fields.",
    "start": "49670",
    "end": "54149"
  },
  {
    "text": "The 6-bit OPCODE field specifies the operation\nto be performed.",
    "start": "54149",
    "end": "58690"
  },
  {
    "text": "The 5-bit Ra, Rb, and Rc fields contain register\nnumbers, specifying one of the 32 general-purpose",
    "start": "58690",
    "end": "67000"
  },
  {
    "text": "registers.",
    "start": "67000",
    "end": "68240"
  },
  {
    "text": "There are two instruction formats: one specifying\nan opcode and three registers, the other specifying",
    "start": "68240",
    "end": "74438"
  },
  {
    "text": "an opcode, two registers, and a 16-bit signed\nconstant.",
    "start": "74439",
    "end": "79770"
  },
  {
    "text": "There three classes of instructions.",
    "start": "79770",
    "end": "81850"
  },
  {
    "text": "The ALU instructions perform an arithmetic\nor logic operation on two operands, producing",
    "start": "81850",
    "end": "87110"
  },
  {
    "text": "a result that is stored in the destination\nregister.",
    "start": "87110",
    "end": "91189"
  },
  {
    "text": "The operands are either two values from the\ngeneral-purpose registers, or one register",
    "start": "91189",
    "end": "96070"
  },
  {
    "text": "value and a constant.",
    "start": "96070",
    "end": "98490"
  },
  {
    "text": "The yellow highlighting indicates instructions\nthat use the second instruction format.",
    "start": "98490",
    "end": "104600"
  },
  {
    "text": "The Load/Store instructions access main memory,\neither loading a value from main memory into",
    "start": "104600",
    "end": "109450"
  },
  {
    "text": "a register, or storing a register value to\nmain memory.",
    "start": "109450",
    "end": "113130"
  },
  {
    "text": "And, finally, there are branches and jumps\nwhose execution may change the program counter",
    "start": "113130",
    "end": "118250"
  },
  {
    "text": "and hence the address of the next instruction\nto be executed.",
    "start": "118250",
    "end": "122840"
  },
  {
    "text": "To program the Beta we'll need to load main\nmemory with binary-encoded instructions.",
    "start": "122840",
    "end": "127829"
  },
  {
    "start": "123000",
    "end": "123000"
  },
  {
    "text": "Figuring out each encoding is clearly the\njob for a computer, so we'll create a simple",
    "start": "127830",
    "end": "132300"
  },
  {
    "text": "programming language that will let us specify\nthe opcode and operands for each instruction.",
    "start": "132300",
    "end": "137580"
  },
  {
    "text": "So instead of writing the binary at the top\nof slide, we'll write assembly language statements",
    "start": "137580",
    "end": "142140"
  },
  {
    "text": "to specify instructions in symbolic form.",
    "start": "142140",
    "end": "144910"
  },
  {
    "text": "Of course we still have think about which\nregisters to use for which values and write",
    "start": "144910",
    "end": "150080"
  },
  {
    "text": "sequences of instructions for more complex\noperations.",
    "start": "150080",
    "end": "154690"
  },
  {
    "text": "By using a high-level language we can move\nup one more level abstraction and describe",
    "start": "154690",
    "end": "159410"
  },
  {
    "text": "the computation we want in terms of variables\nand mathematical operations rather than registers",
    "start": "159410",
    "end": "164690"
  },
  {
    "text": "and ALU functions.",
    "start": "164690",
    "end": "167060"
  },
  {
    "text": "In this lecture we'll describe the assembly\nlanguage we'll use for programming the Beta.",
    "start": "167060",
    "end": "171489"
  },
  {
    "text": "And in the next lecture we'll figure out how\nto translate high-level languages, such as",
    "start": "171490",
    "end": "176950"
  },
  {
    "text": "C, into assembly language.",
    "start": "176950",
    "end": "179239"
  },
  {
    "text": "The layer cake of abstractions gets taller\nyet:",
    "start": "179240",
    "end": "182590"
  },
  {
    "text": "we could write an interpreter for say, Python,\nin C and then write our application programs",
    "start": "182590",
    "end": "187340"
  },
  {
    "text": "in Python.",
    "start": "187340",
    "end": "188819"
  },
  {
    "text": "Nowadays, programmers often choose the programming\nlanguage that's most suitable for expressing",
    "start": "188820",
    "end": "193870"
  },
  {
    "text": "their computations, then, after perhaps many\nlayers of translation, come up with a sequence",
    "start": "193870",
    "end": "199650"
  },
  {
    "text": "of instructions that the Beta can actually\nexecute.",
    "start": "199650",
    "end": "203079"
  },
  {
    "text": "Okay, back to assembly language, which we'll\nuse to shield ourselves from the bit-level",
    "start": "203080",
    "end": "208080"
  },
  {
    "start": "204000",
    "end": "204000"
  },
  {
    "text": "representations of instructions and from having\nto know the exact location of variables and",
    "start": "208080",
    "end": "213020"
  },
  {
    "text": "instructions in memory.",
    "start": "213020",
    "end": "214950"
  },
  {
    "text": "A program called the \"assembler\" reads a text\nfile containing the assembly language program",
    "start": "214950",
    "end": "220239"
  },
  {
    "text": "and produces an array of 32-bit words that\ncan be used to initialize main memory.",
    "start": "220240",
    "end": "225450"
  },
  {
    "text": "We'll learn the UASM assembly language, which\nis built into BSim, our simulator for the",
    "start": "225450",
    "end": "230540"
  },
  {
    "text": "Beta ISA.",
    "start": "230540",
    "end": "232319"
  },
  {
    "text": "UASM is really just a fancy calculator!",
    "start": "232320",
    "end": "236760"
  },
  {
    "text": "It reads arithmetic expressions and evaluates\nthem to produce 8-bit values, which it then",
    "start": "236760",
    "end": "242040"
  },
  {
    "text": "adds sequentially to the array of bytes which\nwill eventually be loaded into the Beta's",
    "start": "242040",
    "end": "247439"
  },
  {
    "text": "memory.",
    "start": "247440",
    "end": "248440"
  },
  {
    "text": "UASM supports several useful language features\nthat make it easier to write assembly language",
    "start": "248440",
    "end": "254260"
  },
  {
    "text": "programs.",
    "start": "254260",
    "end": "255430"
  },
  {
    "text": "Symbols and labels let us give names to particular\nvalues and addresses.",
    "start": "255430",
    "end": "259729"
  },
  {
    "text": "And macros let us create shorthand notations\nfor sequences of expressions that, when evaluated,",
    "start": "259730",
    "end": "265400"
  },
  {
    "text": "will generate the binary representations for\ninstructions and data.",
    "start": "265400",
    "end": "270130"
  },
  {
    "start": "270000",
    "end": "270000"
  },
  {
    "text": "Here's an example UASM source file.",
    "start": "270130",
    "end": "272600"
  },
  {
    "text": "Typically we write one UASM statement on each\nline and can use spaces, tabs, and newlines",
    "start": "272600",
    "end": "278870"
  },
  {
    "text": "to make the source as readable as possible.",
    "start": "278870",
    "end": "281010"
  },
  {
    "text": "We've added some color coding to help in our\nexplanation.",
    "start": "281010",
    "end": "283770"
  },
  {
    "text": "Comments (shown in green) allow us to add\ntext annotations to the program.",
    "start": "283770",
    "end": "289680"
  },
  {
    "text": "Good comments will help remind you how your\nprogram works.",
    "start": "289680",
    "end": "293220"
  },
  {
    "text": "You really don't want to have figure out from\nscratch what a section of code does each time",
    "start": "293220",
    "end": "297290"
  },
  {
    "text": "you need to modify or debug it!",
    "start": "297290",
    "end": "300210"
  },
  {
    "text": "There are two ways to add comments to the\ncode.",
    "start": "300210",
    "end": "302610"
  },
  {
    "text": "\"//\" starts a comment, which then occupies\nthe rest of the source line.",
    "start": "302610",
    "end": "308319"
  },
  {
    "text": "Any characters after \"//\" are ignored by the\nassembler, which will start processing statements",
    "start": "308320",
    "end": "313480"
  },
  {
    "text": "again at the start of the next line in the\nsource file.",
    "start": "313480",
    "end": "317620"
  },
  {
    "text": "You can also enclose comment text using the\ndelimiters \"/*\" and \"*/\" and the assembler",
    "start": "317620",
    "end": "324380"
  },
  {
    "text": "will ignore everything in-between.",
    "start": "324380",
    "end": "326850"
  },
  {
    "text": "Using this second type of comment, you can\n\"comment-out\" many lines of code by placing",
    "start": "326850",
    "end": "332050"
  },
  {
    "text": "\"/*\" at the start and, many lines later, end\nthe comment section with a \"*/\".",
    "start": "332050",
    "end": "339110"
  },
  {
    "text": "Symbols (shown in red) are symbolic names\nfor constant values.",
    "start": "339110",
    "end": "343300"
  },
  {
    "text": "Symbols make the code easier to understand,\ne.g., we can use N as the name for an initial",
    "start": "343300",
    "end": "349229"
  },
  {
    "text": "value for some computation, in this case the\nvalue 12.",
    "start": "349230",
    "end": "352860"
  },
  {
    "text": "Subsequent statements can refer to this value\nusing the symbol N instead of entering the",
    "start": "352860",
    "end": "357250"
  },
  {
    "text": "value 12 directly.",
    "start": "357250",
    "end": "359750"
  },
  {
    "text": "When reading the program, we'll know that\nN means this particular initial value.",
    "start": "359750",
    "end": "364230"
  },
  {
    "text": "So if later we want to change the initial\nvalue, we only have to change the definition",
    "start": "364230",
    "end": "369220"
  },
  {
    "text": "of the symbol N rather than find all the 12's\nin our program and change them.",
    "start": "369220",
    "end": "374600"
  },
  {
    "text": "In fact some of the other appearances of 12\nmight not refer to this initial value and",
    "start": "374600",
    "end": "379800"
  },
  {
    "text": "so to be sure we only changed the ones that\ndid,",
    "start": "379800",
    "end": "382560"
  },
  {
    "text": "we'd have to read and understand the whole\nprogram to make sure we only edited the right",
    "start": "382560",
    "end": "386450"
  },
  {
    "text": "12's.",
    "start": "386450",
    "end": "387630"
  },
  {
    "text": "You can imagine how error-prone that might\nbe!",
    "start": "387630",
    "end": "390510"
  },
  {
    "text": "So using symbols is a practice you want to\nfollow!",
    "start": "390510",
    "end": "394900"
  },
  {
    "text": "Note that all the register names are shown\nin red.",
    "start": "394900",
    "end": "398210"
  },
  {
    "text": "We'll define the symbols R0 through R31 to\nhave the values 0 through 31.",
    "start": "398210",
    "end": "403880"
  },
  {
    "text": "Then we'll use those symbols to help us understand\nwhich instruction operands are intended to",
    "start": "403880",
    "end": "408230"
  },
  {
    "text": "be registers, e.g., by writing R1, and which\noperands are numeric values, e.g., by writing",
    "start": "408230",
    "end": "415170"
  },
  {
    "text": "the number 1.",
    "start": "415170",
    "end": "416970"
  },
  {
    "text": "We could just use numbers everywhere, but\nthe code would be much harder to read and",
    "start": "416970",
    "end": "420730"
  },
  {
    "text": "understand.",
    "start": "420730",
    "end": "422360"
  },
  {
    "text": "Labels (shown in yellow) are symbols whose\nvalue are the address of a particular location",
    "start": "422360",
    "end": "427090"
  },
  {
    "text": "in the program.",
    "start": "427090",
    "end": "428410"
  },
  {
    "text": "Here, the label \"loop\" will be our name for\nthe location of the MUL instruction in memory.",
    "start": "428410",
    "end": "434150"
  },
  {
    "text": "In the BNE at the end of the code, we use\nthe label \"loop\" to specify the MUL instruction",
    "start": "434150",
    "end": "438710"
  },
  {
    "text": "as the branch target.",
    "start": "438710",
    "end": "440430"
  },
  {
    "text": "So if R1 is non-zero, we want to branch back\nto the MUL instruction and start another iteration.",
    "start": "440430",
    "end": "446169"
  },
  {
    "text": "We'll use indentation for most UASM statements\nto make it easy to spot the labels defined",
    "start": "446169",
    "end": "452220"
  },
  {
    "text": "by the program.",
    "start": "452220",
    "end": "454520"
  },
  {
    "text": "Indentation isn't required, it's just another\nhabit assembly language programmers use to",
    "start": "454520",
    "end": "458840"
  },
  {
    "text": "keep their programs readable.",
    "start": "458840",
    "end": "462210"
  },
  {
    "text": "We use macro invocations (shown in blue) when\nwe want to write Beta instructions.",
    "start": "462210",
    "end": "467940"
  },
  {
    "text": "When the assembler encounters a macro, it\n\"expands\" the macro, replacing it with a string",
    "start": "467940",
    "end": "473120"
  },
  {
    "text": "of text provided by in the macro's definition.",
    "start": "473120",
    "end": "476260"
  },
  {
    "text": "During expansion, the provided arguments are\ntextually inserted into the expanded text",
    "start": "476260",
    "end": "480889"
  },
  {
    "text": "at locations specified in the macro definition.",
    "start": "480889",
    "end": "483600"
  },
  {
    "text": "Think of a macro as shorthand for a longer\ntext string we could have typed in.",
    "start": "483600",
    "end": "489639"
  },
  {
    "text": "We'll show how all this works in the next\nvideo segment.",
    "start": "489639",
    "end": "492270"
  }
]