[
  {
    "text": " PROFESSOR: OK. Welcome back. I hope you had a nice break. The midterms will be handed out\nat the end of the class.",
    "start": "0",
    "end": "10920"
  },
  {
    "text": "Ashish has just gone to\nget them in my office. With solutions.",
    "start": "10920",
    "end": "17580"
  },
  {
    "text": "I hope you look at\nthe solutions. There's more in the solutions\nthan is strictly necessary.",
    "start": "17580",
    "end": "23910"
  },
  {
    "text": "The midterm is partly intended\nas a learning exercise, and I hope you learned something\nfrom it.",
    "start": "23910",
    "end": "30340"
  },
  {
    "text": "I didn't learn too much from\nit about the performance of the class, because some of the\nquestions were easy enough",
    "start": "30340",
    "end": "37770"
  },
  {
    "text": "that practically everybody\ngot them, and some of the questions were too hard\nfor anybody to get. And so the distribution --",
    "start": "37770",
    "end": "45290"
  },
  {
    "text": "you know, what I would really\nlike to get is a nice bell-shaped curve going from 0\nto 100 with a median at 50 and",
    "start": "45290",
    "end": "52910"
  },
  {
    "text": "the standard deviation\nabout 25. And I got a much more compressed\ncurve than that. So frankly, I didn't learn\nthat much about relative",
    "start": "52910",
    "end": "64650"
  },
  {
    "text": "performance. And I gather from Ashish that\nyou've all been doing the homeworks, and have been doing\na fairly steady job on that.",
    "start": "64650",
    "end": "72229"
  },
  {
    "text": "So I think everybody is\nclose to being in the same boat here.",
    "start": "72230",
    "end": "77670"
  },
  {
    "text": "If anybody has concerns about\ntheir performance, of course they're welcome to talk to me.",
    "start": "77670",
    "end": "83380"
  },
  {
    "text": "Drop date is a little\nwhile off. If you're concerned about what\nyour grade might be, I'll give",
    "start": "83380",
    "end": "89994"
  },
  {
    "text": "you the best idea I can. But really, it's going\nto come down to the",
    "start": "89995",
    "end": "95620"
  },
  {
    "text": "final for most of you. So it's not too much\nto say here. I give the grade distribution\nand the midterm solutions, and",
    "start": "95620",
    "end": "103950"
  },
  {
    "text": "from that, you could figure out\nwhere you are relatively. And my grading philosophy is at\nMIT, in graduate classes,",
    "start": "103950",
    "end": "114440"
  },
  {
    "text": "roughly they're half\nAs and half Bs. I have that as a guideline\nin mind.",
    "start": "114440",
    "end": "119950"
  },
  {
    "text": "I try to look for where the\nnatural breaks are. I decorate the As and Bs with\npluses and minuses, but I",
    "start": "119950",
    "end": "126439"
  },
  {
    "text": "don't think anybody pays\nattention to those. And in other words, I generally\ntry to follow the",
    "start": "126440",
    "end": "132680"
  },
  {
    "text": "MIT grading philosophy\nas I understand it.",
    "start": "132680",
    "end": "137769"
  },
  {
    "text": "So are there any questions about\nthe midterm or anything",
    "start": "137770",
    "end": "143330"
  },
  {
    "text": "about the class as we go\ninto the second half? No?",
    "start": "143330",
    "end": "148710"
  },
  {
    "text": "I see some people\naren't back yet. It's a somewhat reduced group. Maybe a couple people decided\nto drop on the",
    "start": "148710",
    "end": "156010"
  },
  {
    "text": "basis of the midterm. That sometimes happens. I don't think it necessarily\nhad to happen this year.",
    "start": "156010",
    "end": "162730"
  },
  {
    "text": "Or maybe people are just having\nan extended break. OK.",
    "start": "162730",
    "end": "167910"
  },
  {
    "text": "We're now going into\nconceptually a break, the",
    "start": "167910",
    "end": "173370"
  },
  {
    "text": "second half of the course. The first half of the course we\nwere talking about trying",
    "start": "173370",
    "end": "179510"
  },
  {
    "text": "to get to capacity, specifically\non the additive white Gaussian noise channel. So far all the schemes that\nwe've talked about have been",
    "start": "179510",
    "end": "189280"
  },
  {
    "text": "block coding schemes, which\ntheir Euclidean images wind up to be constellations in a finite\ndimensional space.",
    "start": "189280",
    "end": "200800"
  },
  {
    "text": "This is the kind of picture that\nShannon had when he wrote his original paper on capacity\nand information, to start off",
    "start": "200800",
    "end": "212290"
  },
  {
    "text": "information theory. Basically he proved that you\ncould get to capacity on any",
    "start": "212290",
    "end": "218640"
  },
  {
    "text": "channel with a randomly\nchosen code.",
    "start": "218640",
    "end": "225390"
  },
  {
    "text": "In the setting where we are,\nthat would be a randomly chosen binary code where you\njust pick all the bits of all",
    "start": "225390",
    "end": "231250"
  },
  {
    "text": "the code words at random\nby flipping a coin. OK? Just construct a code book at\nrandom, and as the code gets",
    "start": "231250",
    "end": "238790"
  },
  {
    "text": "long enough, that's\ngoing to be good enough to get to capacity. It's a block code. 2 to the nr bits, and length\nn code words where r is the",
    "start": "238790",
    "end": "248319"
  },
  {
    "text": "regular code. Well, that was a brilliant\nachievement, to show that you",
    "start": "248320",
    "end": "254440"
  },
  {
    "text": "could get to capacity\nby doing that. If you can do it by choosing\ncodes at random, then there must be some particular\ncodes that are good.",
    "start": "254440",
    "end": "260660"
  },
  {
    "text": "Otherwise the average overall\ncodes wouldn't be good. So people started to go out\nto find good codes.",
    "start": "260660",
    "end": "268789"
  },
  {
    "text": "And there was a fairly quick\nrealization that Shannon",
    "start": "268790",
    "end": "274630"
  },
  {
    "text": "hadn't addressed some key\nparts of the problem. Particularly the complexity\nof encoding and decoding.",
    "start": "274630",
    "end": "284470"
  },
  {
    "text": "The complexity of encoding was\npretty quickly recognized to be not much of an issue, because\nPeter Elias and others",
    "start": "284470",
    "end": "293570"
  },
  {
    "text": "proved that, at least for the\nkinds of channels we're talking about, which are\nsymmetric, linear codes are",
    "start": "293570",
    "end": "299290"
  },
  {
    "text": "just as good. A random linear code will\nget to capacity. In other words, say, a block\ncode with a randomly chosen",
    "start": "299290",
    "end": "307820"
  },
  {
    "text": "generator matrix. You pick k generators of length\nn, again by flipping a coin, that's good enough\nto get to capacity.",
    "start": "307820",
    "end": "316590"
  },
  {
    "text": "So we know we can encode linear\ncodes with polynomial complexity.",
    "start": "316590",
    "end": "322520"
  },
  {
    "text": "It's just the matrix\nmultiplication to encode a linear block code. All right? So encoding isn't the problem.",
    "start": "322520",
    "end": "329919"
  },
  {
    "text": "But decoding. What kind of decoding have\nwe talked about so far?",
    "start": "329920",
    "end": "335250"
  },
  {
    "text": "I guess particularly with Reed\nSolomon codes, we've talked about algebraic methods. But our generic method is\nto do maximum likelihood",
    "start": "335250",
    "end": "343000"
  },
  {
    "text": "decoding, which basically\ninvolves computing a distance or a metric to each\nof the code words.",
    "start": "343000",
    "end": "351350"
  },
  {
    "text": "Exponential number\nof code words. 2 to the nr code words. So we have exponential\ncomplexity if we do maximum",
    "start": "351350",
    "end": "359660"
  },
  {
    "text": "likelihood or minimum\ndistance decoding. And that, of course, was the\nmotivation for doing some of",
    "start": "359660",
    "end": "365330"
  },
  {
    "text": "these algebraic decoding\nmethods, which were the primary focus coding theory\nfor several decades.",
    "start": "365330",
    "end": "374820"
  },
  {
    "text": "A great deal of very good effort\nwent into finding good classes of codes that were\nalgebraically decodable, like",
    "start": "374820",
    "end": "383490"
  },
  {
    "text": "Reed-Solomon codes, BCH codes,\nReed-Muller codes. [UNINTELLIGIBLE]",
    "start": "383490",
    "end": "388710"
  },
  {
    "text": "don't have such -- well, they do, we now realize. But that was the focus.",
    "start": "388710",
    "end": "395800"
  },
  {
    "text": "And with the algebraic coding\nmethods, there was polynomial complexity. But it began to be realized that\nthese were never going to",
    "start": "395800",
    "end": "403530"
  },
  {
    "text": "get you to capacity. Because of their difficulty in\nusing reliability information,",
    "start": "403530",
    "end": "411319"
  },
  {
    "text": "because most of them are bounded\ndistance character, and in fact, that's\nstill true.",
    "start": "411320",
    "end": "417099"
  },
  {
    "text": "You can't get to capacity with\nalgebraic decoding methods. So in parallel with this work\non block codes, there was a",
    "start": "417100",
    "end": "425610"
  },
  {
    "text": "smaller stream of work that has\nbroadened, I would say, as",
    "start": "425610",
    "end": "432370"
  },
  {
    "text": "the ancestor of the\ncapacity-approaching codes of today, on codes with other\nkinds of structure.",
    "start": "432370",
    "end": "440450"
  },
  {
    "text": "And specifically dynamical\nstructure, which is what we're going to talk about\nwhen we talk about",
    "start": "440450",
    "end": "445819"
  },
  {
    "text": "convolutional codes. And this was broadened into the\nfield of codes on graphs.",
    "start": "445820",
    "end": "451250"
  },
  {
    "text": "And codes on graphs are nowadays\nthe way we get to channel capacity. All right?",
    "start": "451250",
    "end": "456790"
  },
  {
    "text": "So that's really where we're\ngoing in the second half of the course. We're going to preserve\nlinear structure.",
    "start": "456790",
    "end": "462250"
  },
  {
    "text": "Linear is always good for the\nsymmetric channels we're talking about. But in addition, we're going\nto look for other kinds of",
    "start": "462250",
    "end": "468789"
  },
  {
    "text": "structure which are, in\nparticular, suitable for",
    "start": "468790",
    "end": "474570"
  },
  {
    "text": "lower-complexity decoding\nmethods, are suitable for",
    "start": "474570",
    "end": "479920"
  },
  {
    "text": "maximum likelihood or\nquasi-maximum likelihood decoding methods. All right?",
    "start": "479920",
    "end": "485289"
  },
  {
    "text": "So that's our motivation. OK. Convolutional codes.",
    "start": "485290",
    "end": "491356"
  },
  {
    "text": "Convolutional codes were\nactually invented by Peter Elias in an effort to find --",
    "start": "491356",
    "end": "497645"
  },
  {
    "text": " just as you can put a linear\nstructure on codes without",
    "start": "497645",
    "end": "504510"
  },
  {
    "text": "harming their performance, he\nwas trying to find more and more structure but you could put\non codes while still being",
    "start": "504510",
    "end": "511980"
  },
  {
    "text": "able to achieve capacity\nwith a random ensemble. And he invented something called\nsliding parity-check",
    "start": "511980",
    "end": "518340"
  },
  {
    "text": "codes, which, if you let the\nblock link go to infinity, become convolutional codes.",
    "start": "518340",
    "end": "526470"
  },
  {
    "text": "And they say there was a trickle\nof effort basically",
    "start": "526470",
    "end": "534629"
  },
  {
    "text": "motivated by the fact that\na number of people did a practical comparison of\nperformance versus complexity.",
    "start": "534630",
    "end": "541410"
  },
  {
    "text": "Convolutional codes always\nbeat block codes. And so, for instance, I was at\na small company was trying to",
    "start": "541410",
    "end": "549880"
  },
  {
    "text": "apply coding theory. We quickly gravitated to\nconvolutional codes, because",
    "start": "549880",
    "end": "557470"
  },
  {
    "text": "they always gave us a better\nperformance complexity straight off than block codes. And I'm going to try to indicate\nwhy that's so.",
    "start": "557470",
    "end": "566640"
  },
  {
    "text": "All right. So I think the easiest way to\nunderstand convolutional codes",
    "start": "566640",
    "end": "574045"
  },
  {
    "text": "is by example, by putting\ndown an encoder. And the canonical example\neverybody always uses is this",
    "start": "574045",
    "end": "583149"
  },
  {
    "text": "one, so why should I\nbe any different? ",
    "start": "583150",
    "end": "593660"
  },
  {
    "text": "Here is a rate 1/2 constraint\nlength 2",
    "start": "593660",
    "end": "598779"
  },
  {
    "text": "convolutional encoder. ",
    "start": "598780",
    "end": "604850"
  },
  {
    "text": "And it operates on a stream\nof bits coming in.",
    "start": "604850",
    "end": "611139"
  },
  {
    "text": "So what we have here is a time\nindex stream of bits, uk.",
    "start": "611140",
    "end": "616570"
  },
  {
    "text": " And you can think of\nthis stream as being infinite in length.",
    "start": "616570",
    "end": "623690"
  },
  {
    "text": "We'll talk about how to make\nthis a little bit more precise as we go along.",
    "start": "623690",
    "end": "630320"
  },
  {
    "text": "And we have a shift register\nstructure here.",
    "start": "630320",
    "end": "635630"
  },
  {
    "text": "The incoming bit uk is\nD means a memory element or a delay element.",
    "start": "635630",
    "end": "641050"
  },
  {
    "text": "It goes into a flip-flop. It's delayed for 1 time unit. There's some discrete time base\ngoing on here, which is",
    "start": "641050",
    "end": "650560"
  },
  {
    "text": "indexed by k. So k is simply the set\nof all integers.",
    "start": "650560",
    "end": "655570"
  },
  {
    "text": "Comes from the index set. Here is u k. Here's u k minus 1. Here is u k minus 2.",
    "start": "655570",
    "end": "663520"
  },
  {
    "text": "All right? And constraint length 2\nmeans that we save -- we have the present\ninformation bit.",
    "start": "663520",
    "end": "670230"
  },
  {
    "text": "This is called the input\nor the information bit. ",
    "start": "670230",
    "end": "675820"
  },
  {
    "text": "And the two past information\nbits are saved. And from that, we generate\ntwo output bits.",
    "start": "675820",
    "end": "684600"
  },
  {
    "text": "y1 at time k is given by u k\nplus u k minus 2, where this",
    "start": "684600",
    "end": "695470"
  },
  {
    "text": "is a mod 2 sum. Everything is in f2. y2k is the sum of u k plus u\nk minus 1 plus u k minus 2.",
    "start": "695470",
    "end": "705510"
  },
  {
    "text": " All right? So this is where we get\nthe redundancy.",
    "start": "705510",
    "end": "712610"
  },
  {
    "text": "What are we generally\ndoing with coding? We're adding redundant bits in\norder to get more distance",
    "start": "712610",
    "end": "719300"
  },
  {
    "text": "between the sequences that we\nmight send, and thereby hopefully to get a coding gain\non the additive white Gaussian",
    "start": "719300",
    "end": "726940"
  },
  {
    "text": "noise channel. Here the redundancy comes from\nthe fact that you get 2 bits",
    "start": "726940",
    "end": "733350"
  },
  {
    "text": "out for every bit\nthat you put in. So there ought to be the\npossibility of getting some",
    "start": "733350",
    "end": "740780"
  },
  {
    "text": "distance between possible\ncode sequences. The code sequences here are\ninfinite or semi-infinite, but",
    "start": "740780",
    "end": "748390"
  },
  {
    "text": "nonetheless, we can establish\nsome minimum distance, or as it's called in this field,\nthe free distance.",
    "start": "748390",
    "end": "756260"
  },
  {
    "text": "OK.  There are two kinds\nof structure here.",
    "start": "756260",
    "end": "763279"
  },
  {
    "text": "First of all, this is a linear\ntime invariant system.",
    "start": "763280",
    "end": "769805"
  },
  {
    "start": "769805",
    "end": "778350"
  },
  {
    "text": "If we were talking about the\nreal or complex field, we might call this a filter.",
    "start": "778350",
    "end": "784330"
  },
  {
    "text": "Or it's actually a single input,\ntwo output filter.",
    "start": "784330",
    "end": "790010"
  },
  {
    "text": "So each of the y sequence\nis a filtered",
    "start": "790010",
    "end": "796620"
  },
  {
    "text": "version of the u sequence. y2 is a filtered version\nof the u sequence. ",
    "start": "796620",
    "end": "804760"
  },
  {
    "text": "And it's linear basically\nbecause it's made up of linear elements, lay elements,\nand mod 2 adders.",
    "start": "804760",
    "end": "812470"
  },
  {
    "text": "Over the binary field, it's\ntime-invariant, because if I",
    "start": "812470",
    "end": "820220"
  },
  {
    "text": "change the time index,\nit doesn't really change the equation. It's very hand-waving\nrough here.",
    "start": "820220",
    "end": "825750"
  },
  {
    "text": "But so it's a linear\ntime-invariant system, and we can analyze it the way\nwe analyze a filter.",
    "start": "825750",
    "end": "837770"
  },
  {
    "text": "It's redundant, so it has more\noutputs than inputs, which we",
    "start": "837770",
    "end": "844410"
  },
  {
    "text": "want in a coding system.  But other than that, we're going\nto find that the same",
    "start": "844410",
    "end": "851240"
  },
  {
    "text": "kind of techniques that we use\nfor analyzing discrete time linear filters can be used\nto analyze the system.",
    "start": "851240",
    "end": "857865"
  },
  {
    "text": "It's just over a different\nfield, F2, rather than R or C. All right?",
    "start": "857865",
    "end": "864190"
  },
  {
    "text": "So that's one kind\nof structure. And secondly, it's a finite\nstate system.",
    "start": "864190",
    "end": "876600"
  },
  {
    "text": "Let's forget about\nall the algebra.  There's a discrete time system\nwhich has two memory elements",
    "start": "876600",
    "end": "885960"
  },
  {
    "text": "in it, each capable\nof storing 1 bit. So how many states are\nthere in the system?",
    "start": "885960",
    "end": "894460"
  },
  {
    "text": "Four. There are four possible states\nthat reflect everything that went on in the past.",
    "start": "894460",
    "end": "899770"
  },
  {
    "text": "That's all you need to know\nabout the future, is what the state is at time k, to see\nwhat's going to happen from",
    "start": "899770",
    "end": "908600"
  },
  {
    "text": "time k onwards. All right? So this is a simple four-state\nsystem, in this case.",
    "start": "908600",
    "end": "914860"
  },
  {
    "text": "In general, if we build similar\nencoders out of shift registers, even if we put\nfeedback in them, it's going",
    "start": "914860",
    "end": "921319"
  },
  {
    "text": "to be a finite state system. So we're going to restrict\nourselves to finite state",
    "start": "921320",
    "end": "927520"
  },
  {
    "text": "realizations, finite\nstate encoders. And that's going to ultimately\nbe the basis for the decoding",
    "start": "927520",
    "end": "935330"
  },
  {
    "text": "algorithm, which is going to be\nViterbi algorithm, which is a very efficient decoder for\nany finite state system",
    "start": "935330",
    "end": "944770"
  },
  {
    "text": "observed in memoryless noise,\nwhich is what we have here. Hidden Markov model, as\nit's sometimes called.",
    "start": "944770",
    "end": "951810"
  },
  {
    "text": "All right. So we're going to interplay\nthese two types of structure.",
    "start": "951810",
    "end": "958110"
  },
  {
    "text": "And I feel it's really the fact\nthat convolutional codes",
    "start": "958110",
    "end": "969360"
  },
  {
    "text": "have these two kinds of\nstructure that makes them better than block codes. They have just the amount of\nalgebraic structure that we",
    "start": "969360",
    "end": "978710"
  },
  {
    "text": "want, namely, the linear\nstructure. They don't have too\nmuch algebraic structure beyond that.",
    "start": "978710",
    "end": "984750"
  },
  {
    "text": "We don't have elaborate roots\nof polynomials and so forth, as we do with Reed-Solomon\ncodes.",
    "start": "984750",
    "end": "991290"
  },
  {
    "text": "We have a pretty modest\nalgebraic structure here. And it's sort of different in\ncharacter than the algebraic",
    "start": "991290",
    "end": "999970"
  },
  {
    "text": "structure Reed-Solomon codes. And it's married to this\nfinite state dynamical",
    "start": "999970",
    "end": "1005810"
  },
  {
    "text": "structure, which is what\nallows us to have low-complexity decoding.",
    "start": "1005810",
    "end": "1011580"
  },
  {
    "text": "So that's kind of the magic\nof convolutional codes. Not that they're very magic.",
    "start": "1011580",
    "end": "1017400"
  },
  {
    "text": "All right. This is a convolutional\nencoder. ",
    "start": "1017400",
    "end": "1024470"
  },
  {
    "text": "What is a convolutional code? The convolutional code is\nroughly the set of all",
    "start": "1024470",
    "end": "1040050"
  },
  {
    "text": "possible output sequences. ",
    "start": "1040050",
    "end": "1047159"
  },
  {
    "text": "And this is where we're going\nto measure the minimum distance of the code, minimum\nfree distance. What's the minimum Hamming\ndistance between any two",
    "start": "1047160",
    "end": "1054970"
  },
  {
    "text": "possible output sequences?  And in the notes, I go into\nconsiderable detail to explain",
    "start": "1054970",
    "end": "1066810"
  },
  {
    "text": "how we choose the particular\ndefinition of all. What do we mean?",
    "start": "1066810",
    "end": "1072059"
  },
  {
    "text": "Do we mean the set of all\npossible output sequences if we put in a finite\ninput sequence?",
    "start": "1072060",
    "end": "1077750"
  },
  {
    "text": "An input sequences that starts\nat time 0, and this polynomial, let's say, that\nends at some finite time?",
    "start": "1077750",
    "end": "1084410"
  },
  {
    "text": "Are we going to allow\nsemi-infinite, bi-infinite input sequences?",
    "start": "1084410",
    "end": "1090900"
  },
  {
    "text": "So you see, there's some choices\nto be made here. And actually, it's of some\nimportance that we make the",
    "start": "1090900",
    "end": "1099240"
  },
  {
    "text": "right choice to get proper\ninsight into these codes.",
    "start": "1099240",
    "end": "1105234"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ",
    "start": "1105234",
    "end": "1110440"
  },
  {
    "text": "You have to choose the\ninitial state, then? PROFESSOR: Yeah, OK. You know from linear systems\nthat the output isn't even",
    "start": "1110440",
    "end": "1118529"
  },
  {
    "text": "well-defined unless you say\nwhat the initial state is. And in general, in linear\nsystems, we say, well, we'll",
    "start": "1118530",
    "end": "1124799"
  },
  {
    "text": "assume it starts out in\nthe all-zero state. And that's basically the choice\nI'm going to make,",
    "start": "1124800",
    "end": "1131620"
  },
  {
    "text": "except I'm going to do\nit in a couple steps. But that's the right question.",
    "start": "1131620",
    "end": "1137370"
  },
  {
    "text": "How do we initialize\nthe system? That's a part of the\nspecification of this encoder.",
    "start": "1137370",
    "end": "1143260"
  },
  {
    "text": "And of course we initialize\nit in the all-zero state. But for that reason, in a\ngeneral system, we can't allow",
    "start": "1143260",
    "end": "1151640"
  },
  {
    "text": "bi-infinite inputs. Because if we don't know what\nthe starting time is, we don't",
    "start": "1151640",
    "end": "1158960"
  },
  {
    "text": "know how to define the\nstarting state. Again, I'm speaking\nvery roughly.",
    "start": "1158960",
    "end": "1167770"
  },
  {
    "text": "So let me speak a little\nbit more precisely.  We're going to define the\nset of all Laurent.",
    "start": "1167770",
    "end": "1178720"
  },
  {
    "text": " Which means semi-infinite\nsequences",
    "start": "1178720",
    "end": "1193630"
  },
  {
    "text": "over the binary field.",
    "start": "1193630",
    "end": "1199820"
  },
  {
    "text": "And this is called F2 of D. And\nthis means a sequence --",
    "start": "1199820",
    "end": "1212669"
  },
  {
    "text": "U, say -- which is only a finite\nnumber of non-zero",
    "start": "1212670",
    "end": "1229930"
  },
  {
    "text": "terms before time 0.",
    "start": "1229930",
    "end": "1234990"
  },
  {
    "start": "1234990",
    "end": "1240130"
  },
  {
    "text": "In other words, it can start at\nany negative time, but it has to have a definite\nstarting time.",
    "start": "1240130",
    "end": "1247260"
  },
  {
    "text": "I'm not talking about the set of\nall power series or the set",
    "start": "1247260",
    "end": "1252790"
  },
  {
    "text": "of all sequences that start\nat time 0 or later. The sequence can start\nat any time.",
    "start": "1252790",
    "end": "1258840"
  },
  {
    "text": "But it does have to have a\ndefinite starting time, and before that, it has\nto be all 0. ",
    "start": "1258840",
    "end": "1265960"
  },
  {
    "text": "So that for instance,\nthe sequence that --",
    "start": "1265960",
    "end": "1274130"
  },
  {
    "text": "I haven't introduced\nD transforms yet. Maybe I should do that\nimmediately. But a sequence which, at minus\n5, minus 4, minus 3, minus 2,",
    "start": "1274130",
    "end": "1283780"
  },
  {
    "text": "minus 1, 0 -- these are time indices -- looks like 1 0 1 0 0 1 0, and\ngoes on indefinitely in the",
    "start": "1283780",
    "end": "1294660"
  },
  {
    "text": "future, but has all\nzeros back here -- that is a legitimate\nLaurent sequence.",
    "start": "1294660",
    "end": "1301500"
  },
  {
    "text": "Whereas a sequence that's dot\ndot dot 1 1 1 1 1 1 1 1 1 and",
    "start": "1301500",
    "end": "1306600"
  },
  {
    "text": "so forth, all ones forever, is\nnot, because it doesn't have a definite starting time.",
    "start": "1306600",
    "end": "1311811"
  },
  {
    "start": "1311811",
    "end": "1319960"
  },
  {
    "text": "And I sort of -- all right in this notation -- I need to introduce\nD transforms.",
    "start": "1319960",
    "end": "1325790"
  },
  {
    "text": "The D transform of a sequence U\nwhich has components Uk for",
    "start": "1325790",
    "end": "1335370"
  },
  {
    "text": "k and z it is simply the\nsum of Uk D to the k.",
    "start": "1335370",
    "end": "1343480"
  },
  {
    "text": "Let me write that as U of\nD. For all k and z.",
    "start": "1343480",
    "end": "1349309"
  },
  {
    "text": " This is simply a generating\nfunction.",
    "start": "1349310",
    "end": "1355640"
  },
  {
    "text": " It looks very much like the Z\ntransform that you see in",
    "start": "1355640",
    "end": "1362500"
  },
  {
    "text": "discrete time linear\nfilter theory. We would write for something\nup here, well --",
    "start": "1362500",
    "end": "1372070"
  },
  {
    "text": "So a sequence that is 1\nat time 0, 0 at time",
    "start": "1372070",
    "end": "1377179"
  },
  {
    "text": "1, 1 at time 2 -- if U is equal to that, and 0 at\nall other times, we would",
    "start": "1377180",
    "end": "1383210"
  },
  {
    "text": "just write U of D equals\n1 plus D squared.",
    "start": "1383210",
    "end": "1388549"
  },
  {
    "text": "So it's a generating function. The D just gives us a location\nof where the ones are.",
    "start": "1388550",
    "end": "1395560"
  },
  {
    "text": "It's easier to write this\nthan this, frankly. It's actually hard to write\nthe sequence which is 1 at",
    "start": "1395560",
    "end": "1402750"
  },
  {
    "text": "time k and 0 at all other times\nin this notation, but it's simply D to the\nk in this notation.",
    "start": "1402750",
    "end": "1410215"
  },
  {
    "text": " D here is algebraically simply\nan indeterminate, or a",
    "start": "1410215",
    "end": "1416340"
  },
  {
    "text": "placeholder. And this is the subtle\ndifference from Z transforms. The Z transforms, we would write\nU of Z minus one equals",
    "start": "1416340",
    "end": "1425070"
  },
  {
    "text": "1 plus Z minus 2 for something\nlike this. There's this Z to the minus 1\nconvention in Z transforms.",
    "start": "1425070",
    "end": "1432860"
  },
  {
    "text": "That's not the important\ndifference. We could clearly use D to the\nminus 1 rather than D. The important difference here is\nthat Z is usually imagined to",
    "start": "1432860",
    "end": "1440382"
  },
  {
    "text": "have values in the\ncomplex plane. We look for it's poles and\nzeros in the complex",
    "start": "1440382",
    "end": "1446340"
  },
  {
    "text": "plane and so forth. And so the Z transform really\nis a transform.",
    "start": "1446340",
    "end": "1451960"
  },
  {
    "text": "It takes you into the\nfrequency domain. If you make z equals e to the\nj omega t or something, then",
    "start": "1451960",
    "end": "1460540"
  },
  {
    "text": "you're in the frequency\ndomain. Here, this is still a time\ndomain expression.",
    "start": "1460540",
    "end": "1465950"
  },
  {
    "text": "Just as a convenient, compact,\ngenerating function notation for a particular sequence.",
    "start": "1465950",
    "end": "1472300"
  },
  {
    "text": "So that's when I say the set\nof all semi-infinite sequences, now I can write --",
    "start": "1472300",
    "end": "1479290"
  },
  {
    "text": "a Laurent sequence always\nlooks like this. It starts off at some\nparticular time.",
    "start": "1479290",
    "end": "1489680"
  },
  {
    "text": "Let's say the first term is Ud D\nto the d plus Ud plus 1 D to",
    "start": "1489680",
    "end": "1497165"
  },
  {
    "text": "the d plus 1 plus so forth. It always looks like that. So it has a definite starting\ntime d, which",
    "start": "1497165",
    "end": "1504980"
  },
  {
    "text": "is called the delay. The delay of u of D is equal\nto d, in this case.",
    "start": "1504980",
    "end": "1512995"
  },
  {
    "text": " And d can be any integer.",
    "start": "1512995",
    "end": "1520070"
  },
  {
    "text": "It can start at a negative time\nor at a positive time. We don't require it to start\nat time 0 or later.",
    "start": "1520070",
    "end": "1528120"
  },
  {
    "text": "But nonetheless, the sequence\nhas to look like this. ",
    "start": "1528120",
    "end": "1535880"
  },
  {
    "text": "And we indicate the set of\nall such sequences here.",
    "start": "1535880",
    "end": "1542190"
  },
  {
    "text": "One of the immediate\nobservations that you can make is that this is a time\ninvariant set.",
    "start": "1542190",
    "end": "1549490"
  },
  {
    "text": "Which the set of all sequences\nthat start at 0 or later is not.",
    "start": "1549490",
    "end": "1555700"
  },
  {
    "text": "Set of all sequences that start\nat 0 or later has a definite time in it, and a set\nis time-invariant if D times",
    "start": "1555700",
    "end": "1564470"
  },
  {
    "text": "the set is equal to the set. So what is D times F2 of D?",
    "start": "1564470",
    "end": "1572410"
  },
  {
    "text": "I claim it's just F2 of\nD all over again. And in fact, D to the k for\nany k is equal to F2 of D.",
    "start": "1572410",
    "end": "1580610"
  },
  {
    "text": "So the set of all Laurent\nsequences is time-invariant. Whereas the set of all power\nseries in D, that's sequences",
    "start": "1580610",
    "end": "1588400"
  },
  {
    "text": "that have delay 0 or greater,\nis not time invariant. It does not satisfy this.",
    "start": "1588400",
    "end": "1594390"
  },
  {
    "text": " Chew on that.",
    "start": "1594390",
    "end": "1601519"
  },
  {
    "text": "An important consequence of this\nis that the set of all Laurent sequences\nforms a field.",
    "start": "1601520",
    "end": "1607035"
  },
  {
    "start": "1607035",
    "end": "1614150"
  },
  {
    "text": "Let's say what we need\nto prove for a field. Can we add Laurent sequences?",
    "start": "1614150",
    "end": "1621290"
  },
  {
    "text": "Yes, we simply add them in the\nusual way, component-wise. ",
    "start": "1621290",
    "end": "1627130"
  },
  {
    "text": "Same way as you do in\npolynomial addition. You just gather together\ncompounds at time k.",
    "start": "1627130",
    "end": "1634900"
  },
  {
    "text": "Can you multiply Laurent\nsequences? ",
    "start": "1634900",
    "end": "1640780"
  },
  {
    "text": "You can certainly multiply\npolynomials. 1 plus D times one plus D is\n1 plus D squared over F2.",
    "start": "1640780",
    "end": "1649330"
  },
  {
    "text": "Can you multiply Laurent\nsequences?  Well, yes.",
    "start": "1649330",
    "end": "1655220"
  },
  {
    "text": "We can define multiplication by\nconvolution as we do with",
    "start": "1655220",
    "end": "1663750"
  },
  {
    "text": "polynomials. ",
    "start": "1663750",
    "end": "1671290"
  },
  {
    "text": "In other words, U of D times V\nof D is the sequence W of D,",
    "start": "1671290",
    "end": "1681220"
  },
  {
    "text": "where Wk is the sum over k\nprime in Z of Uk prime Vk",
    "start": "1681220",
    "end": "1690750"
  },
  {
    "text": "minus k prime.  Now what's the potential problem\nthat can arise when",
    "start": "1690750",
    "end": "1697690"
  },
  {
    "text": "you define multiplication\nby convolution? If any of these terms are\ninfinite, we have no notion of",
    "start": "1697690",
    "end": "1705210"
  },
  {
    "text": "convergence over F2. So we really have no way of\ndefining an infinite sum.",
    "start": "1705210",
    "end": "1711065"
  },
  {
    "text": "An infinite sum of elements\nin F2 is, in general, not well-defined. ",
    "start": "1711065",
    "end": "1717130"
  },
  {
    "text": "But from the fact that each of\nthese starts at one time -- this is basically multiplying",
    "start": "1717130",
    "end": "1723360"
  },
  {
    "text": "something by the time reversal. We only have a finite number of\nelements in any such sum.",
    "start": "1723360",
    "end": "1728890"
  },
  {
    "text": "So that's the real reason\nfor using the set",
    "start": "1728890",
    "end": "1734240"
  },
  {
    "text": "of all Laurent sequences. If we had the set of all\nbi-infinite sequences, then multiplication would not\nbe well-defined.",
    "start": "1734240",
    "end": "1740650"
  },
  {
    "text": "But by insisting that they\nhave a starting time, we ensure that convolution is\nalways well-defined.",
    "start": "1740650",
    "end": "1746390"
  },
  {
    "text": "Therefore, multiplication\nof Laurent sequences is well-defined. ",
    "start": "1746390",
    "end": "1752830"
  },
  {
    "text": "OK. So we have addition, we\nhave multiplication. ",
    "start": "1752830",
    "end": "1759390"
  },
  {
    "text": "Maybe I'll go over here. What else do we need\nfor a field?",
    "start": "1759390",
    "end": "1765110"
  },
  {
    "text": " So far we just have a ring.",
    "start": "1765110",
    "end": "1771310"
  },
  {
    "text": "Inverses, yeah. Let's directly check inverses. ",
    "start": "1771310",
    "end": "1777780"
  },
  {
    "text": "So suppose I have some Laurent\nsequence U of D equals U(d), D",
    "start": "1777780",
    "end": "1783391"
  },
  {
    "text": "to the d, plus so forth. Does that always have\nan inverse? ",
    "start": "1783391",
    "end": "1800370"
  },
  {
    "text": "In other words, we want to find\nsomething 1 over U of D equals what?",
    "start": "1800370",
    "end": "1807880"
  },
  {
    "text": "Well, let's just divide U of D\ninto 1 by long division, and",
    "start": "1807880",
    "end": "1814720"
  },
  {
    "text": "we can get an inverse. Let me give you an example. Suppose U of D is equal\nto 1 plus D. What's",
    "start": "1814720",
    "end": "1822250"
  },
  {
    "text": "1 over 1 plus D? We take 1 plus D, we divide\nit into 1, we get 1.",
    "start": "1822250",
    "end": "1830100"
  },
  {
    "text": "1 plus D, D plus D,\nD plus D squared. ",
    "start": "1830100",
    "end": "1837330"
  },
  {
    "text": "And so forth.  So we get a semi-infinite\nsequence.",
    "start": "1837330",
    "end": "1846169"
  },
  {
    "text": "Not a polynomial. But nonetheless, it's a\nlegitimate Laurent sequence.",
    "start": "1846170",
    "end": "1852150"
  },
  {
    "text": "It's actually a very simple\nperiodic sequence of period 1. ",
    "start": "1852150",
    "end": "1858340"
  },
  {
    "text": "Are you with me on this? Could you find the inverse of\nany sequence that starts at",
    "start": "1858340",
    "end": "1865870"
  },
  {
    "text": "time 0, let's say? If you can do that, you can\ncertainly find the inverse of",
    "start": "1865870",
    "end": "1871600"
  },
  {
    "text": "any sequence that starts at time\nD. You just multiply by D to the minus d. ",
    "start": "1871600",
    "end": "1879680"
  },
  {
    "text": "So every non-zero Laurent\nsequence has an inverse.",
    "start": "1879680",
    "end": "1902010"
  },
  {
    "text": " 1 over U of D, let's say.",
    "start": "1902010",
    "end": "1908240"
  },
  {
    "text": "Which is also a Laurent\nsequence.  Of course, as always, we\ncan't divide by 0.",
    "start": "1908240",
    "end": "1915075"
  },
  {
    "text": " But that's the definition\nof a field.",
    "start": "1915075",
    "end": "1922320"
  },
  {
    "text": "That doesn't matter. We have inverses. We checked the associative,",
    "start": "1922320",
    "end": "1929270"
  },
  {
    "text": "distributive, commutative laws. They all work. So this is actually a field.",
    "start": "1929270",
    "end": "1936270"
  },
  {
    "text": "Yes? AUDIENCE: [INAUDIBLE] multiplication [INAUDIBLE]. ",
    "start": "1936270",
    "end": "1942616"
  },
  {
    "text": "PROFESSOR: Yeah. The Laurent sequences certainly\ninclude polynomials,",
    "start": "1942616",
    "end": "1948200"
  },
  {
    "text": "and this is consistent with\npolynomial multiplication. So it's just extending\npolynomial multiplication",
    "start": "1948200",
    "end": "1956720"
  },
  {
    "text": "really as far as we can to these\nsemi-infinite sequences that are semi-infinite in the\nfuture, but not in the past.",
    "start": "1956720",
    "end": "1964620"
  },
  {
    "text": "They're infinite in the future,\nnot in the past. AUDIENCE: I think that's\n[INAUDIBLE] infinite sequence",
    "start": "1964620",
    "end": "1970244"
  },
  {
    "text": "of [INAUDIBLE]. [UNINTELLIGIBLE]. ",
    "start": "1970244",
    "end": "1979140"
  },
  {
    "text": "I mean suppose you -- ",
    "start": "1979140",
    "end": "1984600"
  },
  {
    "text": "To find the inverse we just have\nto keep solving the set of linear equations, right?",
    "start": "1984600",
    "end": "1989860"
  },
  {
    "text": "From the first equation, we get\nthe first one, from the second one, by substitution\nwe get the next one. ",
    "start": "1989860",
    "end": "1996650"
  },
  {
    "text": "PROFESSOR: Yeah. It's long division, which is\nthe same as the Euclidean division algorithm.",
    "start": "1996650",
    "end": "2002980"
  },
  {
    "text": "We just want to find a\ncoefficient here that reduces",
    "start": "2002980",
    "end": "2009169"
  },
  {
    "text": "the remainder to start at time\n1 or later, to have delay 1.",
    "start": "2009170",
    "end": "2015610"
  },
  {
    "text": "We want to find the next\ncoefficient to make the remainder have delay 2. And we can always continue\nthis, ad infinitum.",
    "start": "2015610",
    "end": "2021540"
  },
  {
    "text": " AUDIENCE: [INAUDIBLE] ",
    "start": "2021540",
    "end": "2032020"
  },
  {
    "text": "PROFESSOR: These are\nsemi-infinite sequences. Do you mean sequences that\nstart at time 0 or later, which are called formal\npower series?",
    "start": "2032020",
    "end": "2039110"
  },
  {
    "text": "Again, there are some -- AUDIENCE: [INAUDIBLE]  PROFESSOR: Oh!",
    "start": "2039110",
    "end": "2044130"
  },
  {
    "text": "Sorry, yes. Of course, we need\nto check that. But you can see, it\ndoesn't matter.",
    "start": "2044130",
    "end": "2050869"
  },
  {
    "text": "We could divide by 1 plus D plus\nD squared plus so forth,",
    "start": "2050870",
    "end": "2056280"
  },
  {
    "text": "and the algorithm is the same. In that case, of course, if we\ndid that, we'd get 1 plus D",
    "start": "2056280",
    "end": "2062681"
  },
  {
    "text": "plus D squared, plus so forth. D plus D squared,\nplus so forth.",
    "start": "2062682",
    "end": "2067879"
  },
  {
    "text": "And what do you know? D times that is that,\nand we get 0, and it terminates after 1.",
    "start": "2067880",
    "end": "2075169"
  },
  {
    "text": "So yeah. Thank you. Long division also works. If we divide by any Laurent\nsequence, it's the same.",
    "start": "2075170",
    "end": "2086158"
  },
  {
    "text": "The same algorithm. Excellent. ",
    "start": "2086159",
    "end": "2092610"
  },
  {
    "text": "OK. So every Laurent sequence\nhas an inverse.",
    "start": "2092610",
    "end": "2103270"
  },
  {
    "text": "In general, what do the\ninverses of polynomial sequences look like? ",
    "start": "2103270",
    "end": "2115100"
  },
  {
    "text": "Inverse of a polynomial\nsequence. ",
    "start": "2115100",
    "end": "2125750"
  },
  {
    "text": "Can anyone guess what its\nspecial property is? What is a polynomial sequence,\nfirst of all?",
    "start": "2125750",
    "end": "2133430"
  },
  {
    "text": "I say a sequence is finite if it\nonly has a finite number of non-zero terms. I'm going to say it's polynomial\nif it's finite and",
    "start": "2133430",
    "end": "2141000"
  },
  {
    "text": "also causal. Causal means it starts\nat time 0 or later. Its delay is non-negative.",
    "start": "2141000",
    "end": "2147990"
  },
  {
    "text": " All right. So that's the polynomials that\nwe're already familiar with.",
    "start": "2147990",
    "end": "2155119"
  },
  {
    "text": "What does the inverse of a\npolynomial sequence look like? AUDIENCE: [INAUDIBLE] ",
    "start": "2155120",
    "end": "2162230"
  },
  {
    "text": "PROFESSOR: It's always going\nto be infinite, right? Unless it's 1 or something.",
    "start": "2162230",
    "end": "2167510"
  },
  {
    "text": "So unless it's an invertible\nunit in the polynomials, it's",
    "start": "2167510",
    "end": "2172970"
  },
  {
    "text": "going to be an infinite\nsequence. But it's going to\nhave a property.",
    "start": "2172970",
    "end": "2178990"
  },
  {
    "text": " Nobody can guess what the\nproperty's going to be?",
    "start": "2178990",
    "end": "2185740"
  },
  {
    "text": "I already mentioned it once. Periodic! Right. ",
    "start": "2185740",
    "end": "2195559"
  },
  {
    "text": "And this is an if and\nonly if statement. ",
    "start": "2195560",
    "end": "2206220"
  },
  {
    "text": "I guess I have to elaborate\na little bit, but roughly, that's correct.",
    "start": "2206220",
    "end": "2212090"
  },
  {
    "text": "This is going to be one of\nyour homework problems. ",
    "start": "2212090",
    "end": "2217590"
  },
  {
    "text": "Maybe I'm jumping ahead a\nlittle, but let me -- there are a couple of\nways of seeing this.",
    "start": "2217590",
    "end": "2224270"
  },
  {
    "text": "One is to use some of\nthe algebra we did back in chapter seven. But since we didn't\nreally complete",
    "start": "2224270",
    "end": "2230020"
  },
  {
    "text": "that, I won't do that. A second one is to see within\nthis long division operation,",
    "start": "2230020",
    "end": "2236390"
  },
  {
    "text": "again, if I'm dividing by a\npolynomial, there's only a finite set of possible\nremainders so I can get up to",
    "start": "2236390",
    "end": "2245540"
  },
  {
    "text": "shifts by multiples of D. So\nif I see the same remainder",
    "start": "2245540",
    "end": "2251030"
  },
  {
    "text": "again, if I see 1, D, and then\nD squared, of course the series is going to have to\ncontinue in the same way",
    "start": "2251030",
    "end": "2258279"
  },
  {
    "text": "necessarily. Since there are only a finite\nnumber of remainders, it's got to repeat at some point. Well, a way that I can do\nit which is more in",
    "start": "2258280",
    "end": "2265250"
  },
  {
    "text": "the spirit of this. Suppose I consider the impulse\nresponse of a system with",
    "start": "2265250",
    "end": "2281290"
  },
  {
    "text": "feedback, which is set up so the\nimpulse response is equal",
    "start": "2281290",
    "end": "2289500"
  },
  {
    "text": "to, in this case, say, 1\nover D plus D squared. ",
    "start": "2289500",
    "end": "2296850"
  },
  {
    "text": "You see that the impulse\nresponse of this is going to be 1 over 1 plus D\nplus D squared. If I put in a 1, time 1, then\nnext time, I'm going to get a",
    "start": "2296850",
    "end": "2309460"
  },
  {
    "text": "1 in here, going to get a\n1 feeding back there. Well anyway, I believe\nthat's right.",
    "start": "2309460",
    "end": "2315630"
  },
  {
    "text": "This gives an impulse response\nof 1 over -- if it doesn't, then readjust\nit so it does.",
    "start": "2315630",
    "end": "2321930"
  },
  {
    "text": "Now, after time 0, the\ninput is always 0.",
    "start": "2321930",
    "end": "2327250"
  },
  {
    "text": "So I just have an autonomous\nsystem which is producing the",
    "start": "2327250",
    "end": "2333470"
  },
  {
    "text": "terms at time 1 and later of 1\nover 1 plus D plus D squared. And again, it's a finite\nstate system.",
    "start": "2333470",
    "end": "2342270"
  },
  {
    "text": "Because for over F2, there are\nonly 4 states in the system.",
    "start": "2342270",
    "end": "2348220"
  },
  {
    "text": "So what could its state\ntransition diagram possibly look like? First of all, the 0\nstate always goes",
    "start": "2348220",
    "end": "2354760"
  },
  {
    "text": "around to the 0 state. So the other states are\ninterconnected in some way.",
    "start": "2354760",
    "end": "2362200"
  },
  {
    "text": "And at best, they're always\ngoing to cycle. ",
    "start": "2362200",
    "end": "2368400"
  },
  {
    "text": "So this is a quick proof\nthat 1 over 1 plus D",
    "start": "2368400",
    "end": "2375380"
  },
  {
    "text": "plus D squared -- in fact, any polynomial\ninverse -- is going to give you a\nperiodic response.",
    "start": "2375380",
    "end": "2381690"
  },
  {
    "text": " What I should really say is --",
    "start": "2381690",
    "end": "2388190"
  },
  {
    "text": "let me define a rational\nLaurent sequence.",
    "start": "2388190",
    "end": "2393310"
  },
  {
    "text": "I'll leave out the Laurent. A rational sequence is something\nof the form n of D",
    "start": "2393310",
    "end": "2401470"
  },
  {
    "text": "over d of D where these are both\npolynomial, or they're",
    "start": "2401470",
    "end": "2409960"
  },
  {
    "text": "actually finite. Let's say they're\nboth polynomial.",
    "start": "2409960",
    "end": "2415386"
  },
  {
    "start": "2415386",
    "end": "2422050"
  },
  {
    "text": "You can reduce it to lowest\nterms, if you like. Actually, I should make this\nfinite up here, so that it can",
    "start": "2422050",
    "end": "2430780"
  },
  {
    "text": "start at time before time 0. And I have to have d of\nD not equal to 0.",
    "start": "2430780",
    "end": "2442829"
  },
  {
    "text": "And in fact, I generally require\nd0, the first term down here, to be 1.",
    "start": "2442830",
    "end": "2448300"
  },
  {
    "text": "So this is a polynomial with\ntime 0 term equal to 1.",
    "start": "2448300",
    "end": "2454010"
  },
  {
    "text": "Like 1 plus D plus D squared. So a rational sequence is one\nthat looks like that.",
    "start": "2454010",
    "end": "2462605"
  },
  {
    "text": " We can generate a rational\nsequence by feeding n of D",
    "start": "2462605",
    "end": "2472829"
  },
  {
    "text": "into a system that has response\n1 over d of D. And the output --",
    "start": "2472830",
    "end": "2479888"
  },
  {
    "text": "I forget where you take\nthe output off here. Probably here. This will be n of D",
    "start": "2479888",
    "end": "2485820"
  },
  {
    "text": "over d of D. OK.",
    "start": "2485820",
    "end": "2490980"
  },
  {
    "text": " There's a linear system. Single input, single output.",
    "start": "2490980",
    "end": "2497150"
  },
  {
    "text": "If it has impulse response, 1\nover d of D, then if I put in",
    "start": "2497150",
    "end": "2503059"
  },
  {
    "text": "the sequence n of D, I'm going\nto get out n of D over d of D.",
    "start": "2503060",
    "end": "2508970"
  },
  {
    "text": "And so by the same finite memory\nargument, n of D over d of D is going to be eventually\nperiodic.",
    "start": "2508970",
    "end": "2517110"
  },
  {
    "text": "So a sequence is rational\nif and only if",
    "start": "2517110",
    "end": "2523150"
  },
  {
    "text": "it's eventually periodic. ",
    "start": "2523150",
    "end": "2529080"
  },
  {
    "text": "And again, on the homework, I'm\ngoing to ask you to prove this more carefully. You can use this finite memory\nargument if you like.",
    "start": "2529080",
    "end": "2535710"
  },
  {
    "text": " So this should remind\nyou of something.",
    "start": "2535710",
    "end": "2541020"
  },
  {
    "text": "This should remind you of real\nnumbers, integers, ratios of",
    "start": "2541020",
    "end": "2546950"
  },
  {
    "text": "integers, which are rational\nreal numbers, all that sort of thing.",
    "start": "2546950",
    "end": "2553650"
  },
  {
    "text": "What are the analogies here? ",
    "start": "2553650",
    "end": "2562710"
  },
  {
    "text": "First of all, how big is it?  How many real numbers\nare there?",
    "start": "2562710",
    "end": "2570190"
  },
  {
    "text": "It's uncountably infinite,\nright?  How many Laurent sequences\nare there?",
    "start": "2570190",
    "end": "2579609"
  },
  {
    "text": " You can I think quickly convince\nyourself that it's",
    "start": "2579610",
    "end": "2586980"
  },
  {
    "text": "uncountably infinite.  Now, we have a special\nsubset of the real",
    "start": "2586980",
    "end": "2595820"
  },
  {
    "text": "numbers called the integers. Oh. Let's think of this as a decimal\nexpansion, by the way.",
    "start": "2595820",
    "end": "2602920"
  },
  {
    "text": "So we have a d, a d minus 1,\nand so forth, down to a0",
    "start": "2602920",
    "end": "2612720"
  },
  {
    "text": "decimal point a minus 1. These are the coefficients\nof decimal expansion.",
    "start": "2612720",
    "end": "2618255"
  },
  {
    "text": " There's something interesting\nhere.",
    "start": "2618255",
    "end": "2623840"
  },
  {
    "text": "Implicitly we always assume\nthere are only a finite number of coefficients in the decimal\nexpansion above the decimal",
    "start": "2623840",
    "end": "2633770"
  },
  {
    "text": "point, right? There can be an infinite\nnumber going this way. So that's completely analogous\nto what we have here.",
    "start": "2633770",
    "end": "2643140"
  },
  {
    "text": "What are the integers? The integers are the 1's\nthat stop at a0.",
    "start": "2643140",
    "end": "2649819"
  },
  {
    "text": " That are all zero to the right\nside of the decimal point.",
    "start": "2649820",
    "end": "2657150"
  },
  {
    "text": "Over here we have something that\nlooks like u d, D to the d plus u d plus 1, D to the\nd plus 1, and so forth.",
    "start": "2657150",
    "end": "2669660"
  },
  {
    "text": "And in here we have a special\nsubclass called the polynomials in D. And\nwhat are these?",
    "start": "2669660",
    "end": "2679819"
  },
  {
    "text": "It's not precisely analogous,\nbecause I should really do it with Z minus 1, to make it\nanalogous and expand it in the",
    "start": "2679820",
    "end": "2687180"
  },
  {
    "text": "other direction. But these are the ones that have\nonly a finite number of coefficients to the right of\nthe time 0 point, again.",
    "start": "2687180",
    "end": "2700120"
  },
  {
    "text": "We noticed before that there is\na very close relationship between the factorization\nproperties of Z and the",
    "start": "2700120",
    "end": "2707830"
  },
  {
    "text": "factorization properties\nof the polynomials. They're both principal\nideal domains. They're both unique\nfactorization domains.",
    "start": "2707830",
    "end": "2715190"
  },
  {
    "text": "They're both rings of the\nvery nicest type. ",
    "start": "2715190",
    "end": "2723680"
  },
  {
    "text": "Then once we have in here\nthe rational numbers --",
    "start": "2723680",
    "end": "2728890"
  },
  {
    "text": "that's certainly an important\nsubset of the reals --",
    "start": "2728890",
    "end": "2734559"
  },
  {
    "text": "how many rationals are there? The rationals, this is basically\na ratio of integers.",
    "start": "2734560",
    "end": "2742490"
  },
  {
    "text": "And there's only a countably\ninfinite number of rationals, right?",
    "start": "2742490",
    "end": "2747570"
  },
  {
    "text": "And what's the distinguishing\ncharacteristic of the rationals in terms of their\ndecimal expansion?",
    "start": "2747570",
    "end": "2755220"
  },
  {
    "text": "It's eventually periodic. So these correspond to the\nrational functions, which are",
    "start": "2755220",
    "end": "2765640"
  },
  {
    "text": "denoted by this regular\nparentheses bracket.",
    "start": "2765640",
    "end": "2771519"
  },
  {
    "text": "So this is the polynomials. This is the rational\nfunctions.",
    "start": "2771520",
    "end": "2776725"
  },
  {
    "text": " And because these are eventually\nperiodic, or",
    "start": "2776725",
    "end": "2783750"
  },
  {
    "text": "because all of these can be\nwritten as n of D over d of D,",
    "start": "2783750",
    "end": "2788870"
  },
  {
    "text": "and both of these are\npolynomials, or these are clearly countably infinite\nsets, this is a countably",
    "start": "2788870",
    "end": "2796440"
  },
  {
    "text": "infinite set. The set of all rational\nLaurentian polynomials. ",
    "start": "2796440",
    "end": "2805540"
  },
  {
    "text": "So again, this is\njust mnemonics.",
    "start": "2805540",
    "end": "2812100"
  },
  {
    "text": "Haven't proved anything. But the behavior of these things\nvery closely reminds",
    "start": "2812100",
    "end": "2819579"
  },
  {
    "text": "you of the behavior of these\nthings over here. It's good to keep\nthis in mind. One other point.",
    "start": "2819580",
    "end": "2825950"
  },
  {
    "text": "Suppose I'd allow bi-infinite\nsequences. Then 1 over 1 plus D doesn't\nhave a definite expansion.",
    "start": "2825950",
    "end": "2839202"
  },
  {
    "text": "It has two expansions. 1 over 1 plus D, if we require\nthat the expansion be Laurent,",
    "start": "2839202",
    "end": "2846670"
  },
  {
    "text": "then we only have this\npossibility.  But if it could be bi-infinite\nin the other direction, then",
    "start": "2846670",
    "end": "2853660"
  },
  {
    "text": "you can see that this is also\nequal to D minus 1 plus D minus 2 plus D minus 3 plus\nso forth, semi-infinitely.",
    "start": "2853660",
    "end": "2862840"
  },
  {
    "text": "So another reason we want to\nrule out non-Laurent sequences",
    "start": "2862840",
    "end": "2868910"
  },
  {
    "text": "is to have a unique inverse. This is just another way of\nsaying that the Laurent",
    "start": "2868910",
    "end": "2873980"
  },
  {
    "text": "sequences form a field. That the bi-infinite sequences\ndon't have the",
    "start": "2873980",
    "end": "2882030"
  },
  {
    "text": "multiplicative property. They're simply a group. And this is all written\nup in the notes.",
    "start": "2882030",
    "end": "2889559"
  },
  {
    "text": "All right. So where I want to get\nto eventually here --",
    "start": "2889560",
    "end": "2894940"
  },
  {
    "text": "come back over here. ",
    "start": "2894940",
    "end": "2901900"
  },
  {
    "text": "Let's now analyze this\nconvolutional encoder. ",
    "start": "2901900",
    "end": "2912420"
  },
  {
    "text": "It's a linear time invariant\ncircuit.",
    "start": "2912420",
    "end": "2918730"
  },
  {
    "text": "That means it's characterized\nby its impulse response. ",
    "start": "2918730",
    "end": "2933140"
  },
  {
    "text": "Or responses, if you like,\nbecause it has two outputs. ",
    "start": "2933140",
    "end": "2940860"
  },
  {
    "text": "What does y1 of D, if I write\nthe D transform of y1, what is",
    "start": "2940860",
    "end": "2947290"
  },
  {
    "text": "that going to equal to? If I just put in a single\nimpulse, single 1 at time 0",
    "start": "2947290",
    "end": "2954060"
  },
  {
    "text": "for u k, what am I going\nto get out up there? I'm going to get out 1 0\n1 and then all zeros.",
    "start": "2954060",
    "end": "2963530"
  },
  {
    "text": " So y1 of D, the impulse response\nto steps d1 of D,",
    "start": "2963530",
    "end": "2976819"
  },
  {
    "text": "equals 1 plus D squared. That's the impulse response\nof the first output.",
    "start": "2976820",
    "end": "2985779"
  },
  {
    "text": "And y1 of D is simply u of\nD times 1 plus D squared,",
    "start": "2985780",
    "end": "2994020"
  },
  {
    "text": "bi-linearity and time\ninvariance.  So if I put in 1 plus\nD squared, I'll get",
    "start": "2994020",
    "end": "3002570"
  },
  {
    "text": "out 1 plus D fourth.  Is this too quick?",
    "start": "3002570",
    "end": "3009050"
  },
  {
    "text": "This is just linear\nsystem theory. You've all seen this\nin Digital Signal Processing or something.",
    "start": "3009050",
    "end": "3016080"
  },
  {
    "text": "This is undergraduate stuff,\nexcept for over F2. OK? You've just got to check\nthat it's linear, it's",
    "start": "3016080",
    "end": "3023569"
  },
  {
    "text": "time-invariant. Therefore it's characterized\nby its impulse response. And so once you know the impulse\nresponse, you want to",
    "start": "3023570",
    "end": "3032560"
  },
  {
    "text": "know the response to any\nsequence, you convolve that sequence with the impulse\nresponse. This is that statement in\nD transform notation.",
    "start": "3032560",
    "end": "3039636"
  },
  {
    "text": " OK? People happy with that? ",
    "start": "3039636",
    "end": "3046750"
  },
  {
    "text": "I will spend time on it if it's\nmysterious, but I don't think it should be mysterious.",
    "start": "3046750",
    "end": "3052420"
  },
  {
    "text": "All right. And let's complete\nthe picture. What's the impulse response\nfor the second",
    "start": "3052420",
    "end": "3059150"
  },
  {
    "text": "output in that picture? 1 plus D plus D squared,\nthank you.",
    "start": "3059150",
    "end": "3067250"
  },
  {
    "text": "So we have y2 of D is equal\nto u of D times 1",
    "start": "3067250",
    "end": "3074100"
  },
  {
    "text": "plus D plus D squared. ",
    "start": "3074100",
    "end": "3081390"
  },
  {
    "text": "We can aggregate this by simply\nsaying that a little 2",
    "start": "3081390",
    "end": "3086869"
  },
  {
    "text": "vector, y of D, is equal to a\n1 vector, u of D, times a",
    "start": "3086870",
    "end": "3094690"
  },
  {
    "text": "little 2 vector, g of D, where\nthis means y1 of D, y2 of D,",
    "start": "3094690",
    "end": "3105970"
  },
  {
    "text": "and this means g1 of\nD, g2 of D. OK?",
    "start": "3105970",
    "end": "3112690"
  },
  {
    "text": "So this is a very simple\nlittle matrix equation. ",
    "start": "3112690",
    "end": "3125690"
  },
  {
    "text": "And now the convolutional\ncode. This is the output sequence in\nresponse to a particular input",
    "start": "3125690",
    "end": "3134190"
  },
  {
    "text": "sequence u of D. So we're going\nto define the code as the set of all possible output\nsequences when the input",
    "start": "3134190",
    "end": "3143590"
  },
  {
    "text": "sequences run through what? ",
    "start": "3143590",
    "end": "3149810"
  },
  {
    "text": "Now, with all this elaborate\nset up -- so it's the set of all output\nsequences y of D equals u of D",
    "start": "3149810",
    "end": "3156950"
  },
  {
    "text": "g of D as u of D runs\nthrough the set of all Laurent sequences.",
    "start": "3156950",
    "end": "3166100"
  },
  {
    "text": "Sequences that start at\nsome definite time. And now I've said much more\nprecisely what I said back at",
    "start": "3166100",
    "end": "3172310"
  },
  {
    "text": "the beginning. Because all sequences have a\ndefinite starting time, we know what the starting state is\nfor any of these sequences.",
    "start": "3172310",
    "end": "3181430"
  },
  {
    "text": "Always when the sequence starts\nat time D, the system",
    "start": "3181430",
    "end": "3188599"
  },
  {
    "text": "is quiet, it's in the all-zero\nstate, and it's driven from time D onwards. So this convolution\nis well-defined.",
    "start": "3188600",
    "end": "3195890"
  },
  {
    "text": "If we had an undefined starting\nstate, then this would not be well-defined. ",
    "start": "3195890",
    "end": "3203349"
  },
  {
    "text": "OK. So a long, longer\nthan I attended",
    "start": "3203350",
    "end": "3209190"
  },
  {
    "text": "lecture on Laurent sequences. But it's turned out, in the\ntheory of convolutional codes,",
    "start": "3209190",
    "end": "3214770"
  },
  {
    "text": "it's very important\nto get this right. People have used various\ndefinitions.",
    "start": "3214770",
    "end": "3220182"
  },
  {
    "text": "They've let this run through\nfinite sequences, polynomial sequences, formal\npower series.",
    "start": "3220182",
    "end": "3226910"
  },
  {
    "text": "And trust me, this is the\nright way to do it. And I don't think anyone\nis better qualified",
    "start": "3226910",
    "end": "3233819"
  },
  {
    "text": "to make that statement. So that is the way we define\na convolutional code.",
    "start": "3233820",
    "end": "3240310"
  },
  {
    "text": " Now which direction shall\nI go from here?",
    "start": "3240310",
    "end": "3250990"
  },
  {
    "text": "I guess I ought to ask,\nwhat are we going to allow g of D to be? ",
    "start": "3250990",
    "end": "3258980"
  },
  {
    "text": "In the picture up there, we\nhave g1 of D and g2 of D",
    "start": "3258980",
    "end": "3264280"
  },
  {
    "text": "polynomial, which means both\ncausal and finite.",
    "start": "3264280",
    "end": "3274690"
  },
  {
    "text": "Causal means it starts\nat time 0 or later. Finite means that it\nhas only a finite number of non-zero terms.",
    "start": "3274690",
    "end": "3281160"
  },
  {
    "text": " OK. I want to allow perhaps more\ngeneral types of encoders.",
    "start": "3281160",
    "end": "3290080"
  },
  {
    "text": "I do want the encoder\nto be finite state. So let me impose that\nI want the encoder",
    "start": "3290080",
    "end": "3297680"
  },
  {
    "text": "to be finite state. But I'm going to\nallow feedback. ",
    "start": "3297680",
    "end": "3308280"
  },
  {
    "text": "Which I don't have there. If I allow feedback, then I can\nget infinite responses,",
    "start": "3308280",
    "end": "3316430"
  },
  {
    "text": "infinite impulse responses. But by the same argument that\nI've already made, it's going",
    "start": "3316430",
    "end": "3323920"
  },
  {
    "text": "to have to eventually\nbe periodic, right? If the encoder has\nfinite state.",
    "start": "3323920",
    "end": "3329260"
  },
  {
    "text": "So we have to have g1 of D\nand g2 of D are general.",
    "start": "3329260",
    "end": "3337660"
  },
  {
    "text": "We're going to allow up\nto n of these for rate 1 over n encoders. If we want this to be the\nimpulse response of a finite",
    "start": "3337660",
    "end": "3345460"
  },
  {
    "text": "state encoder -- they also have to be\ncausal, don't they.",
    "start": "3345460",
    "end": "3352150"
  },
  {
    "text": "In order to be realizable, has\nto start at time 0 or later, the impulse response.",
    "start": "3352150",
    "end": "3359320"
  },
  {
    "text": "Then I'm going to have to\nrequire that these all be rational and causal.",
    "start": "3359320",
    "end": "3365725"
  },
  {
    "start": "3365725",
    "end": "3371050"
  },
  {
    "text": "And that's the only limitations\nI'm going to put on the g of D.",
    "start": "3371050",
    "end": "3378170"
  },
  {
    "text": "So in order to get a finite\nstate system, I need to have rational impulse responses.",
    "start": "3378170",
    "end": "3384900"
  },
  {
    "text": "In order to have a realizable\nsystem, I need causal responses. ",
    "start": "3384900",
    "end": "3390430"
  },
  {
    "text": "So these are the requirements\non the impulse responses. Otherwise I'm not going to force\nthem to be anything in",
    "start": "3390430",
    "end": "3399770"
  },
  {
    "text": "particular.  Now let's see. I go into realization theory\na little bit in the notes.",
    "start": "3399770",
    "end": "3410550"
  },
  {
    "text": "Since I've spent so much time on\nLaurent sequences, I don't think I'm going to\ndo that here.",
    "start": "3410550",
    "end": "3416880"
  },
  {
    "text": "Yeah? AUDIENCE: Does this mean that\nthe denominator is also polynomial? ",
    "start": "3416880",
    "end": "3423480"
  },
  {
    "text": "PROFESSOR: Correct. So in fact, let me always\nwrite these.",
    "start": "3423480",
    "end": "3431860"
  },
  {
    "text": "Let me take the least common\nmultiple of all the denominators. I'm going to write these then.",
    "start": "3431860",
    "end": "3437800"
  },
  {
    "text": "g of D is going to be some\nvector of polynomials up here.",
    "start": "3437800",
    "end": "3446280"
  },
  {
    "text": "I can always write the Least\nCommon Multiple of all the denominators down here and have\na single denominator.",
    "start": "3446280",
    "end": "3452050"
  },
  {
    "text": " OK?",
    "start": "3452050",
    "end": "3457190"
  },
  {
    "text": "So this is going to be my\ngeneral form for a causal,",
    "start": "3457190",
    "end": "3464720"
  },
  {
    "text": "rational, single input and\noutput impulse response. It's going to consist of\nsomething like this, where",
    "start": "3464720",
    "end": "3472670"
  },
  {
    "text": "these are all polynomial. ",
    "start": "3472670",
    "end": "3478280"
  },
  {
    "text": "This is a single polynomial\nwith d0 equals 1.",
    "start": "3478280",
    "end": "3486460"
  },
  {
    "text": "Turns out that's necessary\nfor realizability. ",
    "start": "3486460",
    "end": "3491490"
  },
  {
    "text": "And I'll just tell you the fact,\nwhich you can read about in the notes.",
    "start": "3491490",
    "end": "3497050"
  },
  {
    "text": "In fact, I will leave this\nmostly as an exercise for the student, anyway.",
    "start": "3497050",
    "end": "3502950"
  },
  {
    "text": "Realizable with nu equals max of\nthe degree of the n_i of D,",
    "start": "3502950",
    "end": "3517900"
  },
  {
    "text": "or the degree of the\ndenominator. In other words, I take all\nthese polynomials -- the maximum degree\nof any of them --",
    "start": "3517900",
    "end": "3526950"
  },
  {
    "text": "and I call that nu. And I claim there's\na realization with nu memory elements. ",
    "start": "3526950",
    "end": "3536616"
  },
  {
    "text": "And of course, I'm going to\nassume here that I've reduced this to lowest terms in order\nto keep that down.",
    "start": "3536616",
    "end": "3544270"
  },
  {
    "text": "If I didn't have the\ndenominator term, this would be clear. If I just had g of D equal\nto a set of a vector of n",
    "start": "3544270",
    "end": "3552859"
  },
  {
    "text": "polynomials of maximum degree\nnu, then it's clear that just",
    "start": "3552860",
    "end": "3558260"
  },
  {
    "text": "by this kind of a shift register\nrealization of here",
    "start": "3558260",
    "end": "3563280"
  },
  {
    "text": "we call the constraint length\nequal to the number of memory",
    "start": "3563280",
    "end": "3568870"
  },
  {
    "text": "elements, I can realize any n\nimpulse responses which all",
    "start": "3568870",
    "end": "3575100"
  },
  {
    "text": "have degree nu or less, right? So the only trick is showing how\nto put in a feedback loop",
    "start": "3575100",
    "end": "3582910"
  },
  {
    "text": "which basically implements this\ndenominator polynomial d of D. If I start off by\nrealizing 1 over d of D, then",
    "start": "3582910",
    "end": "3592000"
  },
  {
    "text": "I can basically just realize\nthis in the same way. ",
    "start": "3592000",
    "end": "3597710"
  },
  {
    "text": "And nu is called the\nconstraint length. ",
    "start": "3597710",
    "end": "3605960"
  },
  {
    "text": "And I have 2 to the nu states. ",
    "start": "3605960",
    "end": "3615819"
  },
  {
    "text": "So by constraining this to be\nof this form, I've now gone",
    "start": "3615820",
    "end": "3622400"
  },
  {
    "text": "full circle. The number of states is in\nfact 2 to the nu, and in particular, it's finite.",
    "start": "3622400",
    "end": "3628480"
  },
  {
    "text": " When I constrain the impulses\nresponses to be like that,",
    "start": "3628480",
    "end": "3643599"
  },
  {
    "text": "then I guarantee that I'm going\nto have a finite state realization. ",
    "start": "3643600",
    "end": "3649990"
  },
  {
    "text": "So from now on, that's what\nmy impulse response is going to look like. ",
    "start": "3649990",
    "end": "3657020"
  },
  {
    "text": "All right. Now let's talk about code\nequivalence, or encoder",
    "start": "3657020",
    "end": "3665819"
  },
  {
    "text": "equivalence. ",
    "start": "3665820",
    "end": "3671550"
  },
  {
    "text": "I've defined the code\ngenerated --",
    "start": "3671550",
    "end": "3677800"
  },
  {
    "text": "now I'm going to characterize\nan encoder by its impulse",
    "start": "3677800",
    "end": "3683380"
  },
  {
    "text": "responses, g of D. The code\ngenerated by g of D is u of D",
    "start": "3683380",
    "end": "3692319"
  },
  {
    "text": "g of D as u of D goes\nthrough the set",
    "start": "3692320",
    "end": "3698260"
  },
  {
    "text": "of all Laurent sequences. ",
    "start": "3698260",
    "end": "3703460"
  },
  {
    "text": "Two encoders are equivalent if\nthey generate the same code.",
    "start": "3703460",
    "end": "3716585"
  },
  {
    "start": "3716585",
    "end": "3725280"
  },
  {
    "text": "Seems reasonable. What we're really ultimately\ninterested in in communications is the behavior\nof the code.",
    "start": "3725280",
    "end": "3732330"
  },
  {
    "text": "In particular, the minimum\ndistance of the code, how far the sequence is separated.",
    "start": "3732330",
    "end": "3738299"
  },
  {
    "text": "We're not particularly\ninterested in the encoder. At the decoder, we're just\nsimply going to try to tell",
    "start": "3738300",
    "end": "3744880"
  },
  {
    "text": "which code sequence was sent. So for most purposes,\nprobability of decoding error,",
    "start": "3744880",
    "end": "3751750"
  },
  {
    "text": "performance of the decoder\nand so forth, we're only interested in the code itself. We're not interested in this\nlittle one-to-one map between",
    "start": "3751750",
    "end": "3758210"
  },
  {
    "text": "information bits and\nthe code sequences. So this is a reasonable\ndefinition of encoder",
    "start": "3758210",
    "end": "3765130"
  },
  {
    "text": "equivalence.  Now, for the case of rate 1/n\ncodes, which is all I'm",
    "start": "3765130",
    "end": "3774260"
  },
  {
    "text": "talking about here -- 1 input, n output, so the code\ngenerator looks like this --",
    "start": "3774260",
    "end": "3779675"
  },
  {
    "text": " it's very simple.",
    "start": "3779675",
    "end": "3786230"
  },
  {
    "text": "g of D and g prime of D are\nequivalent if and only if g of",
    "start": "3786230",
    "end": "3799670"
  },
  {
    "text": "D and g prime of D differ by\nsome multiple a of D, where I",
    "start": "3799670",
    "end": "3809740"
  },
  {
    "text": "could let a of D be any\nLaurent sequence. But then to keep everything in\nthe same ballpark, I think I'd",
    "start": "3809740",
    "end": "3817351"
  },
  {
    "text": "have to keep a of D rational\nand causal. But even forgetting this -- in\nother words, if one is a",
    "start": "3817351",
    "end": "3825160"
  },
  {
    "text": "multiple of the other -- then the two codes\nare equivalent. That's clear because I can\ninvert a of D. So this is just",
    "start": "3825160",
    "end": "3841580"
  },
  {
    "text": "a single Laurent sequence,\nhas an inverse. This is the same thing as\nsaying g of D times",
    "start": "3841580",
    "end": "3848510"
  },
  {
    "text": "1 over a of D -- which is another rational,\ncausal sequence, is g prime of",
    "start": "3848510",
    "end": "3855450"
  },
  {
    "text": "D. If this is true, then the\nsequence generated by u of D",
    "start": "3855450",
    "end": "3867049"
  },
  {
    "text": "when the encoder is g of D is\nthe same as the sequence generated by u of D a of D when\nthe encoder is g prime of",
    "start": "3867050",
    "end": "3875135"
  },
  {
    "text": "D. And this is another\nrational sequence. And vice versa.",
    "start": "3875135",
    "end": "3880819"
  },
  {
    "text": "the code sequence generated by u\nof D, the encoder is g prime of D, is the sequence generated\nby u of D over a of",
    "start": "3880820",
    "end": "3887740"
  },
  {
    "text": "D if the encoder\nis g of D. OK? So that's really the proof.",
    "start": "3887740",
    "end": "3894120"
  },
  {
    "text": " So this is very, very\nsimple theorem.",
    "start": "3894120",
    "end": "3900520"
  },
  {
    "text": "In other words, I can multiply\nany encoder n-tuple g of D by",
    "start": "3900520",
    "end": "3908810"
  },
  {
    "text": "any rational causal sequence out\nfront, in particular by a",
    "start": "3908810",
    "end": "3914550"
  },
  {
    "text": "polynomial or 1 over a\npolynomial or something, and I'm going to generate\nthe same code.",
    "start": "3914550",
    "end": "3919950"
  },
  {
    "text": "This is not going to matter.  Now, to see why we might want\nto take make use of this --",
    "start": "3919950",
    "end": "3928400"
  },
  {
    "text": " let's see.",
    "start": "3928400",
    "end": "3935589"
  },
  {
    "text": "Well, given this, we might want\nto pick some particularly nice encoder from this\nequivalence class of encoders,",
    "start": "3935590",
    "end": "3945920"
  },
  {
    "text": "all of which generate\nthe same code. And basically, I'm going to\nsuggest that the nicest",
    "start": "3945920",
    "end": "3955090"
  },
  {
    "text": "encoder is the one we get if we\nmultiply by d of D. And if",
    "start": "3955090",
    "end": "3962040"
  },
  {
    "text": "there's any common factor\nof these n of D's, we divide it out. That will give us the least\ndegree polynomial encoder,",
    "start": "3962040",
    "end": "3971230"
  },
  {
    "text": "which is equivalent to\nthe given encoder. If I start off with one like\nthis, and I want to multiply",
    "start": "3971230",
    "end": "3977520"
  },
  {
    "text": "through by the denominator to\nmake it a polynomial, and if there's any common factor to\nthe numerator, I want to",
    "start": "3977520",
    "end": "3983200"
  },
  {
    "text": "divide it out. And that's what I'm going to\ntake as my canonical encoder. ",
    "start": "3983200",
    "end": "3990310"
  },
  {
    "text": "Now let me give you a little\nmotivation for that. AUDIENCE: [INAUDIBLE]",
    "start": "3990310",
    "end": "3996786"
  },
  {
    "text": "PROFESSOR: That's\none motivation. It will have the simplest\nrealization. It will have a feedback-free\nrealization by getting rid of",
    "start": "3996786",
    "end": "4005260"
  },
  {
    "text": "the denominator term. And it will have the least\nconstraint length of all equivalent encoders, and\nthat's a theorem too.",
    "start": "4005260",
    "end": "4012920"
  },
  {
    "text": "But that's not the primary\nmotivation. Let me talk a little bit about\ndistance at this point.",
    "start": "4012920",
    "end": "4020240"
  },
  {
    "start": "4020240",
    "end": "4025630"
  },
  {
    "text": "Let me take my example\nencoder again.",
    "start": "4025630",
    "end": "4033049"
  },
  {
    "text": "And let me ask, what's\nthe known distance between code sequences? This is clearly going to be an\nimportant performance metric",
    "start": "4033050",
    "end": "4042320"
  },
  {
    "text": "of this code, right? How would you go about answering\nthat question, or at",
    "start": "4042320",
    "end": "4048080"
  },
  {
    "text": "least two reasonable\nways to go? ",
    "start": "4048080",
    "end": "4057560"
  },
  {
    "text": "Do you think the known distance\nis greater than 1? ",
    "start": "4057560",
    "end": "4062980"
  },
  {
    "text": "You think it's 1? OK. So how would you get\ntwo sequences that",
    "start": "4062980",
    "end": "4069350"
  },
  {
    "text": "differ only in one place? AUDIENCE: I mean, if you take\nthe impulse response.",
    "start": "4069350",
    "end": "4075319"
  },
  {
    "text": "Or you take the -- PROFESSOR: Well, the impulse\nresponse, if I put in 1, u of D equals 1, then I get out g of\nD, which in this case is 1",
    "start": "4075320",
    "end": "4086530"
  },
  {
    "text": "plus D squared, 1 plus D plus\nD squared, I actually get a weight 5 sequence out.",
    "start": "4086530",
    "end": "4092800"
  },
  {
    "text": " You see that?",
    "start": "4092800",
    "end": "4099225"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] you get\n1 and 1 0 1, and [INAUDIBLE]",
    "start": "4099225",
    "end": "4105170"
  },
  {
    "text": "1 and 1 and 1 -- PROFESSOR: So I get this out,\nin D transform notation.",
    "start": "4105170",
    "end": "4111592"
  },
  {
    "text": "Or I get 1 0 1 1 1 1 in\nterms of that times",
    "start": "4111593",
    "end": "4117849"
  },
  {
    "text": "0 1 1 and so forth. ",
    "start": "4117850",
    "end": "4124568"
  },
  {
    "text": "y1 equals this, y2 equals that. Right?",
    "start": "4124569",
    "end": "4129810"
  },
  {
    "text": "OK. So that's a weight 5 sequence. So if I put in the all-zero\nsequence, I get out the",
    "start": "4129810",
    "end": "4137040"
  },
  {
    "text": "all-zero sequence. So as always, the all-zero\nsequence is an element of the code.",
    "start": "4137040",
    "end": "4142420"
  },
  {
    "text": "This differs from the all-zero\nsequence in five places. So all you've shown me so far is\nthe minimum distance is not",
    "start": "4142420",
    "end": "4150469"
  },
  {
    "text": "greater than five.  I've found two sequences that\ndiffer in five places.",
    "start": "4150470",
    "end": "4157920"
  },
  {
    "text": "Are there any that differ in\nfewer places than that? ",
    "start": "4157920",
    "end": "4167149"
  },
  {
    "text": "The answer is no. So in fact, it's called\nthe free distance.",
    "start": "4167149",
    "end": "4173089"
  },
  {
    "text": "For this code, the so-called\nfree distance is five.",
    "start": "4173090",
    "end": "4178339"
  },
  {
    "text": " Let's think of the two different\nkinds of structure",
    "start": "4178340",
    "end": "4184750"
  },
  {
    "text": "for this code. And they lead to different but\ncomplementary arguments that",
    "start": "4184750",
    "end": "4191670"
  },
  {
    "text": "both get us to this\nconclusion.  First of all, the code\nis linear, right?",
    "start": "4191670",
    "end": "4200060"
  },
  {
    "text": "So C is linear. ",
    "start": "4200060",
    "end": "4205750"
  },
  {
    "text": "Is it not? If I have y of D equals u of D g\nof D, and y prime of D equal",
    "start": "4205750",
    "end": "4217679"
  },
  {
    "text": "to, say, some other sequence. u prime of D times g of D. Then\nlet me check the group",
    "start": "4217680",
    "end": "4224460"
  },
  {
    "text": "property, which is all I have\nto check for a binary code. And I find that y of D the\nsequence, the sum of these two",
    "start": "4224460",
    "end": "4233540"
  },
  {
    "text": "sequences, is the sequence\nthat's generated by the sum of the two input sequences that\nled to these two sequences.",
    "start": "4233540",
    "end": "4240640"
  },
  {
    "text": "So the binary sum of any\ntwo sequences is",
    "start": "4240640",
    "end": "4245860"
  },
  {
    "text": "another code word. All right? Ergo it has the group\nproperty. ",
    "start": "4245860",
    "end": "4251820"
  },
  {
    "text": "Ergo C is a group. And that's all we\nneed to check.",
    "start": "4251820",
    "end": "4256989"
  },
  {
    "text": "It's actually linear over F2,\nas a vector space of F2. ",
    "start": "4256990",
    "end": "4263880"
  },
  {
    "text": "0 is in the code, and 1 times\nany code word in the code.",
    "start": "4263880",
    "end": "4273409"
  },
  {
    "text": "So we've checked closure under\nvector addition and scalar",
    "start": "4273410",
    "end": "4278960"
  },
  {
    "text": "multiplication. So it's linear. What is the main conclusion\nwe get from this?",
    "start": "4278960",
    "end": "4286080"
  },
  {
    "text": " Therefore, the minimum\ndistance between code",
    "start": "4286080",
    "end": "4295270"
  },
  {
    "text": "sequences is equal to --",
    "start": "4295270",
    "end": "4305780"
  },
  {
    "text": "anybody?  The minimum non-zero weight\nof any y of D in the code.",
    "start": "4305780",
    "end": "4320280"
  },
  {
    "text": " Exactly the same argument.",
    "start": "4320280",
    "end": "4325940"
  },
  {
    "text": "We're talking infinite sequences\nhere, but there's nothing that changes\nin the argument.",
    "start": "4325940",
    "end": "4333150"
  },
  {
    "text": "And so that really simplifies\nthings. We simply have to ask -- here's a non-zero sequence\nof Hamming weight 5.",
    "start": "4333150",
    "end": "4344430"
  },
  {
    "text": "You can add this to any code\nsequence and get another legitimate code sequence.",
    "start": "4344430",
    "end": "4350410"
  },
  {
    "text": "This is the code sequence. Add it to any other,\nand you get a legitimate code sequence. So from any other code sequence,\nthere's going to be",
    "start": "4350410",
    "end": "4357690"
  },
  {
    "text": "one of distance 5. Are there any lower weight\nsequences in this code? ",
    "start": "4357690",
    "end": "4369340"
  },
  {
    "text": "Well, what would you -- AUDIENCE: [INAUDIBLE]  PROFESSOR: Good.",
    "start": "4369340",
    "end": "4375139"
  },
  {
    "text": "So here's where we need\nto get into much more concrete arguments. You can see that first of all,\nwe're only interested in",
    "start": "4375140",
    "end": "4382340"
  },
  {
    "text": "looking at finite sequences\nin the code. And we might as well have them\nstart at time 0, because if",
    "start": "4382340",
    "end": "4388449"
  },
  {
    "text": "they start later, we could just\nshift them over by time and variance. So we're only interested in\nfinite polynomial sequences",
    "start": "4388450",
    "end": "4395420"
  },
  {
    "text": "that start at time 0. OK. So just as you said, in the\nfirst place, they're always",
    "start": "4395420",
    "end": "4401179"
  },
  {
    "text": "going to have bing bing! Two 1's. When the first 1 comes\nin, we're going to get two 1's out.",
    "start": "4401180",
    "end": "4407800"
  },
  {
    "text": "For sure. Time 2.",
    "start": "4407800",
    "end": "4413040"
  },
  {
    "text": "This is what we get out if the\nsecond bit in, in the input sequence, is a 0.",
    "start": "4413040",
    "end": "4419990"
  },
  {
    "text": "What happens if the second\nbit in is a 1?",
    "start": "4419990",
    "end": "4425590"
  },
  {
    "text": "Then we add this to this,\nshift it over 1.",
    "start": "4425590",
    "end": "4432449"
  },
  {
    "text": "We have 1 1 in particular\nat this place. We get a 1 0 out. OK? So we conclude at the second\ntime, we're always going to",
    "start": "4432450",
    "end": "4441320"
  },
  {
    "text": "get at least another\nunit of distance. Now jump ahead.",
    "start": "4441320",
    "end": "4447160"
  },
  {
    "text": "However long this is, this\nis going to have to end at some time. ",
    "start": "4447160",
    "end": "4452800"
  },
  {
    "text": "At the time when the last bit,\nthe last non-zero bit, is shifting out of the shift\nregister, we're also going to",
    "start": "4452800",
    "end": "4460080"
  },
  {
    "text": "get 1 1 out.  So any finite code word has\nto end with a 1 1 at",
    "start": "4460080",
    "end": "4470565"
  },
  {
    "text": "the last time out.  People don't seem to be totally\ncomfortable with this,",
    "start": "4470565",
    "end": "4476890"
  },
  {
    "text": "so I'll do it in a\nmore elaborate way in just a second. But this is the basis\nof the argument. AUDIENCE: [INAUDIBLE]",
    "start": "4476890",
    "end": "4482956"
  },
  {
    "text": "this? PROFESSOR: At the end? AUDIENCE: No, I mean\nby [UNINTELLIGIBLE] at the same time.",
    "start": "4482956",
    "end": "4490040"
  },
  {
    "text": "PROFESSOR: At the end of\na finite code word? AUDIENCE: Yes. PROFESSOR: All right. What does a finite code\nword consist of? ",
    "start": "4490040",
    "end": "4496880"
  },
  {
    "text": "I'm going to claim that we only\nget a finite code word out when we put a finite\ninput sequence in.",
    "start": "4496880",
    "end": "4504680"
  },
  {
    "text": "OK? There's no feedback here. So there's going to be some last\n1 in the input sequence",
    "start": "4504680",
    "end": "4511170"
  },
  {
    "text": "as that shifts through here. At the very last time,\nthe last state, is going to be 0 1.",
    "start": "4511170",
    "end": "4517540"
  },
  {
    "text": "All right? Just before that comes\nout, there's a 0 coming in, forever after.",
    "start": "4517540",
    "end": "4522695"
  },
  {
    "text": "So the last time we get a 1 at\nu k minus 2, and that forces these two bits out to be 1.",
    "start": "4522695",
    "end": "4530780"
  },
  {
    "text": "Or you can do it\nby polynomials. You can always show that you\nmultiply this by any finite",
    "start": "4530780",
    "end": "4536730"
  },
  {
    "text": "polynomial, you're going to get\nhighest degree terms, both equal to 1. ",
    "start": "4536730",
    "end": "4543260"
  },
  {
    "text": "OK. I'll do this by explicitly\ndrawing out the state diagram. So we can conclude here that we\nalways have 2 here, 1 here,",
    "start": "4543260",
    "end": "4556460"
  },
  {
    "text": "dot dot dot dot, and finally\nat the end, we have to have at least 2. Therefore, every nonzero finite\nsequence has to have",
    "start": "4556460",
    "end": "4564020"
  },
  {
    "text": "weight at least 5. Since we've seen one of that\nhas weight 5, that is the minimum distance.",
    "start": "4564020",
    "end": "4571420"
  },
  {
    "text": "OK? Now let's do this by drawing\nthe state diagram. ",
    "start": "4571420",
    "end": "4580730"
  },
  {
    "text": "Which is where we're going. AUDIENCE: So I know\nthat [INAUDIBLE] ",
    "start": "4580730",
    "end": "4591040"
  },
  {
    "text": "PROFESSOR: No. We had to construct a little\nargument here, and in effect, make a little search.",
    "start": "4591040",
    "end": "4596300"
  },
  {
    "text": "And this simple argument\nwouldn't work for more complicated cases. So let me show you how to attack\nmore complicated cases.",
    "start": "4596300",
    "end": "4603460"
  },
  {
    "text": "We want to draw a finite\nstate machine.",
    "start": "4603460",
    "end": "4608610"
  },
  {
    "text": "How do you analyze finite\nstate machines? ",
    "start": "4608610",
    "end": "4613920"
  },
  {
    "text": "Well, a good way to start\nis to draw the state transition diagram. ",
    "start": "4613920",
    "end": "4624460"
  },
  {
    "text": "And I don't know what the\ncurriculum consists of nowadays, but I assume\nyou've all done this.",
    "start": "4624460",
    "end": "4631810"
  },
  {
    "text": "We draw the four possible\nstates. 0 0. ",
    "start": "4631810",
    "end": "4639130"
  },
  {
    "text": "1 0, we can get to from 0 0. 0 0, if I get an input of 0,\nthen I'm going to put out 0 0,",
    "start": "4639130",
    "end": "4648850"
  },
  {
    "text": "then I'm going to stay\nin the 0 state. All right? Because this is linear, if the\n0 comes in, that's 0 0, stay",
    "start": "4648850",
    "end": "4656266"
  },
  {
    "text": "in the 0 state. Or a 1 could come in.",
    "start": "4656266",
    "end": "4662780"
  },
  {
    "text": "And in that case, as we've\nnoted, we'll put out two 1's as our output, and we'll\ntransition to the state 1 0.",
    "start": "4662780",
    "end": "4670320"
  },
  {
    "text": " Now from 1 0, where can we go?",
    "start": "4670320",
    "end": "4677190"
  },
  {
    "text": "For 1 0, if a 0 comes in, then\nwe'll put out 0 1 and we'll",
    "start": "4677190",
    "end": "4689630"
  },
  {
    "text": "transition to 0 1. ",
    "start": "4689630",
    "end": "4694910"
  },
  {
    "text": "Or we'll get another 1 in. We would put out the complement\nof that, 1 0.",
    "start": "4694910",
    "end": "4703182"
  },
  {
    "text": "So we get another 1 1 in\nthis linear thing. Work it out.",
    "start": "4703182",
    "end": "4708405"
  },
  {
    "text": "I'll just assert that. And we go to state 1 1. ",
    "start": "4708405",
    "end": "4716350"
  },
  {
    "text": "From 0 1, if we get a 0 in, we\nreturn to the 0 0 state and we",
    "start": "4716350",
    "end": "4723760"
  },
  {
    "text": "put out 1 1. So here's our basic impulse\nresponse, right down here.",
    "start": "4723760",
    "end": "4729385"
  },
  {
    "text": "We put in a 1, we go through\nthis little cycle, we come back to 0 0.",
    "start": "4729385",
    "end": "4734960"
  },
  {
    "text": "Or if we get a 1 in, we go\nback up here, and at that",
    "start": "4734960",
    "end": "4741910"
  },
  {
    "text": "point, we actually only\nput out two 0's. Is that right? Yeah, because it has to be\nthe complement of this.",
    "start": "4741910",
    "end": "4748590"
  },
  {
    "text": " And if we're in the 1 1 state\nand another 1 comes in, we",
    "start": "4748590",
    "end": "4755980"
  },
  {
    "text": "stay in the 1 1 state. And we put out what?",
    "start": "4755980",
    "end": "4761340"
  },
  {
    "text": " Let me do the 0 1 first.",
    "start": "4761340",
    "end": "4769730"
  },
  {
    "text": "0, and we're in 1 1 state,\nthen what do we get out? We get out a 0 down here and\nwe get out a 1 up there.",
    "start": "4769730",
    "end": "4777724"
  },
  {
    "text": "We got 1 0.  Or if we get in a 1,\nwe put out 0 1.",
    "start": "4777725",
    "end": "4786970"
  },
  {
    "text": "All right. So that's the state transition\ndiagram. ",
    "start": "4786970",
    "end": "4793140"
  },
  {
    "text": "Now again, let me make the\nargument that I made before,",
    "start": "4793140",
    "end": "4798990"
  },
  {
    "text": "now a little bit more concisely,\nbecause we're going to have to stop. ",
    "start": "4798990",
    "end": "4806760"
  },
  {
    "text": "So every path through this\nstate transition diagram corresponds to a code\nsequence, right?",
    "start": "4806760",
    "end": "4813960"
  },
  {
    "text": "Every finite or semi-infinite\npath always start in the 0 state.",
    "start": "4813960",
    "end": "4821650"
  },
  {
    "text": "For a finite code word, I have\nto come back to the 0 state. Correct?",
    "start": "4821650",
    "end": "4827670"
  },
  {
    "text": "So I'm always going to get\ntwo 1's when I start out. Then the next time, I'm either\ngoing to go on this transition",
    "start": "4827670",
    "end": "4835440"
  },
  {
    "text": "or this transition, but either\nway, I'm going to get at least another unit of weight.",
    "start": "4835440",
    "end": "4841100"
  },
  {
    "text": "And then I can do whatever I\nwant through here for a while, but eventually I'm going to have\nto come back out here.",
    "start": "4841100",
    "end": "4846860"
  },
  {
    "text": "And when I get back to the\n0 state, I'm going to get two more 1's. ",
    "start": "4846860",
    "end": "4852170"
  },
  {
    "text": "So that's maybe a lot easier way\nto say the minimum weight has to be 5. ",
    "start": "4852170",
    "end": "4859290"
  },
  {
    "text": "Again, if it were more\ncomplicated, I'd have to make more of an argument.",
    "start": "4859290",
    "end": "4864880"
  },
  {
    "text": "All right. Next time, when we come back,\nwe'll talk about turning this",
    "start": "4864880",
    "end": "4873530"
  },
  {
    "text": "into a trellis diagram. We'll talk about\ncatastrophicity, which is",
    "start": "4873530",
    "end": "4879370"
  },
  {
    "text": "where I was going with this\ncanonical generator. It's just a minor algebraic\npoint, but one you need to",
    "start": "4879370",
    "end": "4885100"
  },
  {
    "text": "know about. We'll talk about the\nViterbi algorithm. I think we can probably\nget through this chapter on Wednesday.",
    "start": "4885100",
    "end": "4892570"
  },
  {
    "text": "OK? Ashish has your midterms and\nthe midterm solutions.",
    "start": "4892570",
    "end": "4897650"
  },
  {
    "start": "4897650",
    "end": "4908287"
  }
]