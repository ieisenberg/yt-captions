[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6050"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or to\nview additional materials",
    "start": "6050",
    "end": "12690"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "12690",
    "end": "26700"
  },
  {
    "text": "PROFESSOR: All right,\nguys, let's get started. So today, we're going to talk\nabout side-channel attacks, which is a general class\nof problems that comes up",
    "start": "26700",
    "end": "36360"
  },
  {
    "text": "in all kinds of systems. Broadly, side-channel\nattacks are situations where you haven't\nthought about some information",
    "start": "36360",
    "end": "42778"
  },
  {
    "text": "that your system\nmight be revealing. So typically, you have multiple\ncomponents that you [INAUDIBLE]",
    "start": "42778",
    "end": "47860"
  },
  {
    "text": "maybe a user talking\nto some server. And you're thinking, great,\nI know exactly all the bits",
    "start": "47860",
    "end": "53387"
  },
  {
    "text": "going over some wire [INAUDIBLE]\nserver, and those are secure. But it's often easy to miss\nsome information revealed,",
    "start": "53387",
    "end": "60795"
  },
  {
    "text": "either by user or by server. So the example that the\npaper for today talks about",
    "start": "60796",
    "end": "67800"
  },
  {
    "text": "is a situation where the\ntiming of the messages between the user and\nthe server reveals",
    "start": "67800",
    "end": "72899"
  },
  {
    "text": "some additional information\nthat you wouldn't have otherwise learned by just observing the\nbits flowing between these two",
    "start": "72900",
    "end": "79390"
  },
  {
    "text": "guys. But In fact, there's a much\nbroader class of side-channels",
    "start": "79390",
    "end": "84650"
  },
  {
    "text": "you might worry about. Originally,\nside-channels showed up, or people discovered them in\nthe '40s when they discovered",
    "start": "84650",
    "end": "91360"
  },
  {
    "text": "that when you start\ntyping characters on a teletype the electronics,\nor the electrical machinery",
    "start": "91360",
    "end": "97110"
  },
  {
    "text": "in the teletype, would\nemit RF radiation. And you can hook up\nan oscilloscope nearby and just watch the\ncharacters being typed out",
    "start": "97110",
    "end": "104490"
  },
  {
    "text": "by monitoring the frequency\nor RF frequencies that are going out of this machine.",
    "start": "104490",
    "end": "109800"
  },
  {
    "text": "So RF radiation is a classic\nexample of a side-channel that you might worry about.",
    "start": "109800",
    "end": "117490"
  },
  {
    "text": "And there's lots of examples\nlots of other examples that people have looked\nat, almost anything.",
    "start": "117490",
    "end": "122899"
  },
  {
    "text": "So power usage is\nanother side-channel you might worry about.",
    "start": "122900",
    "end": "128259"
  },
  {
    "text": "So your computer\nis probably going to use different amounts of\npower depending on what exactly it's computing.",
    "start": "128259",
    "end": "133970"
  },
  {
    "text": "I'm gonna go into other\nclever examples of sound turns out to also leak stuff.",
    "start": "133970",
    "end": "139330"
  },
  {
    "text": "There's a [? cute ?] paper\nthat you can look at. The people listen to a\nprinter and based on the sound",
    "start": "139330",
    "end": "145344"
  },
  {
    "text": "the printer is\nmaking you can tell what characters it's printing. This is especially easy to do\nfor dot matrix printers that",
    "start": "145344",
    "end": "151694"
  },
  {
    "text": "make this very annoying\nsound when they're printing. And in general, a good\nthing to think about,",
    "start": "151695",
    "end": "158689"
  },
  {
    "text": "Kevin on Monday's\nlecture also mentioned some interesting side-channels\nthat he's running through in his research.",
    "start": "158690",
    "end": "165700"
  },
  {
    "text": "But, in particular,\nhere we're going to look at the\nspecific side-channel",
    "start": "165700",
    "end": "171879"
  },
  {
    "text": "that David Brumley and Dan Boneh\nlooked at in their paper-- I guess about 10 years ago now--\nwhere they were able to extract",
    "start": "171880",
    "end": "179095"
  },
  {
    "text": "a cryptographic key out of\na web server running Apache by measuring the timing\nof different responses",
    "start": "179095",
    "end": "186310"
  },
  {
    "text": "to different input packets\nfrom the adversarial client.",
    "start": "186310",
    "end": "191520"
  },
  {
    "text": "And in this particular\ncase, they're going after a cryptographic key. In fact, many\nside-channel attacks",
    "start": "191520",
    "end": "197860"
  },
  {
    "text": "target cryptographic keys\npartly because it's a little bit tricky to get lots of data\nthrough a side-channel.",
    "start": "197860",
    "end": "204744"
  },
  {
    "text": "And cryptographic\nkeys are one situation where getting a small number\nof bits helps you a lot.",
    "start": "204744",
    "end": "210050"
  },
  {
    "text": "So in their attack they're\nable to extract maybe about 200 256 bits or so.",
    "start": "210050",
    "end": "216760"
  },
  {
    "text": "And just from those\n200ish bits, they're able to break the cryptographic\nkey of this web server.",
    "start": "216760",
    "end": "222300"
  },
  {
    "text": "Whereas, if you're\ntrying to leak some database full of\nSocial Security numbers, then that'll be\na lot of bits you",
    "start": "222300",
    "end": "228340"
  },
  {
    "text": "have to leak to get\nout of this database. So that's why many of\nthese side-channels, if you'll see them\nlater on, they often",
    "start": "228340",
    "end": "235670"
  },
  {
    "text": "focus on getting\nsmall secrets out, might be cryptographic\nkeys or passwords.",
    "start": "235670",
    "end": "242850"
  },
  {
    "text": "But in general, this\nis applicable to lots of other situations as well.",
    "start": "242850",
    "end": "249210"
  },
  {
    "text": "And one cool thing\nabout this paper, before we jump into\nthe details, is that they show that you actually\ndo this over the network.",
    "start": "249210",
    "end": "256459"
  },
  {
    "text": "So as you probably figured\nout from reading this paper, they have to do a\nlot of careful work to tease out these\nminute differences",
    "start": "256459",
    "end": "263150"
  },
  {
    "text": "in timing information. So if you actually compute out\nthe numbers from this paper,",
    "start": "263150",
    "end": "268290"
  },
  {
    "text": "it turns out that each request\nthat they sent to the server differs from potentially\nanother [? website ?]",
    "start": "268290",
    "end": "275365"
  },
  {
    "text": "by an order of 1 to\n2 microseconds, which is pretty tiny.",
    "start": "275365",
    "end": "281280"
  },
  {
    "text": "So you have to be quite\ncareful, and all of our network",
    "start": "281280",
    "end": "287000"
  },
  {
    "text": "it might be hard to tell\nwhether some server took 1 or 2 microseconds longer to\nprocess your request or not.",
    "start": "287000",
    "end": "293750"
  },
  {
    "text": "And as a result, it was not\nso clear for whether you could mount this kind of attack\nover a very noisy network.",
    "start": "293750",
    "end": "301060"
  },
  {
    "text": "And these guys were\none of the first people to show that you can actually\ndo this over a real ethernet",
    "start": "301060",
    "end": "306620"
  },
  {
    "text": "network with a server sitting\nin one place, a client sitting somewhere else. And you could actually\nmeasure these differences",
    "start": "306620",
    "end": "312460"
  },
  {
    "text": "partly by averaging, partly\nthrough other tricks. All right, does that make sense,\nthe overall side-channel stuff?",
    "start": "312460",
    "end": "321270"
  },
  {
    "text": "All right. So the plan for the\nrest of this lecture is we'll first dive into\nthe details of this RSA",
    "start": "321270",
    "end": "327990"
  },
  {
    "text": "cryptosystem that\nthese guys use. Then we'll not look at\nexactly why it's secure or not but we'll look at\nhow do you implement it",
    "start": "327990",
    "end": "334900"
  },
  {
    "text": "because that turns out to\nbe critical for exploiting this particular side-channel. They carefully leverage various\ndetails of the implementation",
    "start": "334900",
    "end": "342800"
  },
  {
    "text": "to figure out when there are\nsome things faster or slower. And then we'll pop back\nout once we understand",
    "start": "342800",
    "end": "348080"
  },
  {
    "text": "how RSA is implemented. Then we'll come back and figure\nout how do you attack it, how do you attack all these\ndifferent organizations",
    "start": "348080",
    "end": "354250"
  },
  {
    "text": "that RSA has. Sounds good? All right. So I guess let's\nstart off by looking",
    "start": "354250",
    "end": "360759"
  },
  {
    "text": "at the high level plan for RSA. So RSA is a pretty widely\nused public key cryptosystem.",
    "start": "360760",
    "end": "368940"
  },
  {
    "text": "We've mentioned these\nguys a couple of weeks ago in general in certificates,\nin the context of certificates.",
    "start": "368940",
    "end": "374690"
  },
  {
    "text": "But now we're going to look\nat actually how it works. So typically there's 3 things\nyou have to worry about.",
    "start": "374690",
    "end": "380710"
  },
  {
    "text": "So there's generating a key,\nencrypting, and decrypting. So for RSA, the way you\ngenerate a key is you actually",
    "start": "380710",
    "end": "389220"
  },
  {
    "text": "pick 2 large prime integers. So you're going to\npick 2 primes, p and q.",
    "start": "389220",
    "end": "395500"
  },
  {
    "text": "And in the paper, these\nguys focus on p and q,",
    "start": "395500",
    "end": "402020"
  },
  {
    "text": "which are about 512 bits each. So this is typically\ncalled 1,024 bit RSA",
    "start": "402020",
    "end": "409730"
  },
  {
    "text": "because the resulting product\nof these primes that you're going to use in a second is\na 1,000 bit integer number.",
    "start": "409730",
    "end": "416500"
  },
  {
    "text": "These days, that's probably\nnot a particularly good choice for the size of your\nRSA key because it",
    "start": "416500",
    "end": "422169"
  },
  {
    "text": "makes it relatively easy for\nattackers to factor this-- not trivial but certainly viable.",
    "start": "422170",
    "end": "429080"
  },
  {
    "text": "So if 10 years ago, this seemed\nlike a potentially sensible parameter, now if you're\nactually building a system,",
    "start": "429080",
    "end": "434520"
  },
  {
    "text": "you should probably\npick a 2,000 or 3,000 or even 4,000 bit RSA key.",
    "start": "434520",
    "end": "439866"
  },
  {
    "text": "Well, that's what\nRSA key size means is the size of these primes. And then, for\nconvenience, we're going",
    "start": "439866",
    "end": "446479"
  },
  {
    "text": "to talk about the\nnumber n, which is just the product of\nthese 2 primes, p times q.",
    "start": "446480",
    "end": "453010"
  },
  {
    "text": "All right. So now we know how\nto generate a key, now we need to figure\nout-- well this is at least",
    "start": "453010",
    "end": "458440"
  },
  {
    "text": "part of a key-- now\nwe're going to have to figure out how we're going\nto encrypt and decrypt messages.",
    "start": "458440",
    "end": "465060"
  },
  {
    "text": "And the way we're going to\nencrypt and decrypt messages is by exponentiating numbers\nmodulo this number n.",
    "start": "465060",
    "end": "474320"
  },
  {
    "text": "So it seems a little weird, but\nlet's go with it for a second. So if you want to\nencrypt a message,",
    "start": "474320",
    "end": "480520"
  },
  {
    "text": "then we're going\nto take a message m and transform it into\nm to the power e mod m.",
    "start": "480520",
    "end": "491919"
  },
  {
    "text": "So e is going to be some\nexponent-- we'll talk about how to choose it in a second. But this is how we're\ngoing to encrypt a message.",
    "start": "491920",
    "end": "497880"
  },
  {
    "text": "We'll just take this\nmessage as an integer number and just exponentiate it.",
    "start": "497880",
    "end": "503260"
  },
  {
    "text": "And then we'll see why\nthis works in a second, but let's call this\nguy c, ciphertext.",
    "start": "503260",
    "end": "510500"
  },
  {
    "text": "Then to decrypt it, we're\ngoing to somehow find",
    "start": "510500",
    "end": "516039"
  },
  {
    "text": "an interesting\nother exponent where you can take a ciphertext c\nand if you exponentiate it",
    "start": "516039",
    "end": "521336"
  },
  {
    "text": "to some power d mod m,\nthen you'll magically",
    "start": "521336",
    "end": "526440"
  },
  {
    "text": "get back the same message m. So this is the general plan:\nTo encrypt, you exponentiate.",
    "start": "526440",
    "end": "532290"
  },
  {
    "text": "To decrypt, you exponentiate\nby another exponent. And in general, it\nseems a little hard",
    "start": "532290",
    "end": "538270"
  },
  {
    "text": "to figure out how we're going\nto come up with these two magic numbers that\nsomehow end up giving us back the same message.",
    "start": "538270",
    "end": "544390"
  },
  {
    "text": "But it turns out\nthat if you look at how exponentiation works\nor multiplication works,",
    "start": "544390",
    "end": "552000"
  },
  {
    "text": "modulo of this number n. Then there's this cool property\nthat if you have any number x,",
    "start": "552000",
    "end": "562670"
  },
  {
    "text": "and you raise it to what's\ncalled a [? order ?] of phi function of n-- maybe I'll\nuse more board space for this.",
    "start": "562670",
    "end": "572215"
  },
  {
    "text": "This seems important. So if you take x and you\nraise it to phi of n,",
    "start": "572215",
    "end": "577998"
  },
  {
    "text": "then this is going to\nbe equal to 1 mod m.",
    "start": "577998",
    "end": "584370"
  },
  {
    "text": "And this phi function for\nour particular choice of n is pretty straightforward,\nit's actually",
    "start": "584370",
    "end": "589960"
  },
  {
    "text": "p minus 1 times q minus 1. So this gives us hope that maybe\nif we pick ed so that e times",
    "start": "589960",
    "end": "601560"
  },
  {
    "text": "d is 5n plus 1, then\nwe're in good shape. Because then any message m we\nexponentiate it to e and d,",
    "start": "601560",
    "end": "611200"
  },
  {
    "text": "we get back 1 times m\nbecause our ed product",
    "start": "611200",
    "end": "616380"
  },
  {
    "text": "is going to be\nroughly 5n plus 1, or maybe some constant\nalpha times 5n plus 1.",
    "start": "616380",
    "end": "625445"
  },
  {
    "text": "Does this make sense? This is why the message is going\nto get decrypted correctly.",
    "start": "625445",
    "end": "630800"
  },
  {
    "text": "And it turns out that there's\na reasonably straightforward algorithm if you know this\nphi value for how to compute",
    "start": "630800",
    "end": "639880"
  },
  {
    "text": "d given an e or e given a d. All right. Question. AUDIENCE: Isn't 1 mod n just 1?",
    "start": "639880",
    "end": "645640"
  },
  {
    "text": "PROFESSOR: Yeah, so\nfar we add one more. Sorry? AUDIENCE: Like, up over there.",
    "start": "645640",
    "end": "652388"
  },
  {
    "text": "PROFESSOR: Yeah, this one? AUDIENCE: Yeah. PROFESSOR: Isn't 1 mod n just 1? Sorry, I mean this.",
    "start": "652388",
    "end": "658820"
  },
  {
    "text": "So when I say this 1 n, it\nmeans that both sides taken 1n are equal.",
    "start": "658820",
    "end": "664819"
  },
  {
    "text": "So what this means\nis if you want to think of mod as\nliterally an operator,",
    "start": "664820",
    "end": "670046"
  },
  {
    "text": "you would write this guy\nmod m equals 1 mod m. So that's what mod\nm on the side means.",
    "start": "670046",
    "end": "675440"
  },
  {
    "text": "Like, the whole\nequality is mod m. Sorry for the [INAUDIBLE].",
    "start": "675440",
    "end": "681175"
  },
  {
    "text": "Make sense? All right. So what this basically\nmeans for RSA is that we're",
    "start": "681175",
    "end": "687665"
  },
  {
    "text": "going to pick some value e. So e is going to be\nour encryption value.",
    "start": "687665",
    "end": "694558"
  },
  {
    "text": "And then from e we're going\nto generate d to be basically",
    "start": "694558",
    "end": "701180"
  },
  {
    "text": "1 over e mod phi of n. And there's some\nEuclidean algorithms",
    "start": "701180",
    "end": "707665"
  },
  {
    "text": "you can use to do this\ncomputation efficiently. But in order to do\nthis you actually",
    "start": "707665",
    "end": "713390"
  },
  {
    "text": "have to know this\nphi of n, which requires knowing the\nfactorization of our number n",
    "start": "713390",
    "end": "719485"
  },
  {
    "text": "into p and q. All right. So finally, RSA ends\nup being a system where",
    "start": "719485",
    "end": "728600"
  },
  {
    "text": "the public key is this number n\nand this encryption exponent e. So n and e are public,\nand d should be private.",
    "start": "728600",
    "end": "736750"
  },
  {
    "text": "So then anyone can\nexponentiate a message to encrypt it for you. But only you know this\nvalue d and therefore",
    "start": "736750",
    "end": "742914"
  },
  {
    "text": "can decrypt messages. And as long as you don't know\nthis factorization of p and q,",
    "start": "742914",
    "end": "750089"
  },
  {
    "text": "of n to p and q,\nthen you don't know what this [? phi del ?] is. And as a result, it's\nactually difficult to compute",
    "start": "750090",
    "end": "755910"
  },
  {
    "text": "this d value. So this is roughly what RSA is.",
    "start": "755910",
    "end": "761579"
  },
  {
    "text": "High level. Does this make sense? All right. So there's 2 things I\nwant to talk about now",
    "start": "761580",
    "end": "768140"
  },
  {
    "text": "that we at least have the basic\n[? implementation ?] for RSA. There's tricks to use it\ncorrectly and pitfalls",
    "start": "768140",
    "end": "775850"
  },
  {
    "text": "and how to use RSA. And then there's all kinds\nof implementation tricks on how do you actually\nimplement [? root ?]",
    "start": "775850",
    "end": "782440"
  },
  {
    "text": "code to do these exponentiations\nand do them efficiently. There's actually more\ntrivial because these are all",
    "start": "782440",
    "end": "790010"
  },
  {
    "text": "large numbers, these are 1,000\nbit integers that can't just do a multiply instruction for.",
    "start": "790010",
    "end": "795730"
  },
  {
    "text": "Probably going to take\na fair amount of time to do these operations. All right.",
    "start": "795730",
    "end": "800930"
  },
  {
    "text": "So the first thing\nI want to mention is the various RSA pitfalls.",
    "start": "800930",
    "end": "806470"
  },
  {
    "text": "One of them we're actually going\nto rely on in a little bit. One property is, that\nit's multiplicative.",
    "start": "806470",
    "end": "815360"
  },
  {
    "text": " So what I mean by this is that\nsuppose we have 2 messages.",
    "start": "815360",
    "end": "823600"
  },
  {
    "text": "Suppose we have m0 and m1. And suppose I\nencrypt these guys,",
    "start": "823600",
    "end": "829196"
  },
  {
    "text": "so I encrypt m0, I'm going to\nget m0 to the power e mod n.",
    "start": "829196",
    "end": "835612"
  },
  {
    "text": "And if I encrypt m1, then\nI'd get m1 to the e mod n.",
    "start": "835612",
    "end": "842840"
  },
  {
    "text": "The problem is-- not\nnecessarily a problem but could be a\nsurprise to someone",
    "start": "842840",
    "end": "848939"
  },
  {
    "text": "using RSA-- it's\nvery easy to generate an encryption of m0\ntimes m1 because you just",
    "start": "848940",
    "end": "854480"
  },
  {
    "text": "multiply these 2 numbers. If you multiply these\nguys out, you're going to get m0\nm1 to the e mod n.",
    "start": "854480",
    "end": "866500"
  },
  {
    "text": "This is a correct encryption\nunder this simplistic use of RSA for the\nvalue m0 times m1.",
    "start": "866500",
    "end": "874512"
  },
  {
    "text": "I mean at this point,\nit's not a huge problem because if you aren't\nable to decrypt it, you're just able to construct\nthis encrypted message.",
    "start": "874512",
    "end": "881940"
  },
  {
    "text": "But it might be that the\noverall system maybe allows you to decrypt certain messages. And if it allows you to decrypt\nthis message that you construct",
    "start": "881940",
    "end": "890110"
  },
  {
    "text": "yourself, maybe you can\nnow go back and figure out what are these messages. So it's maybe not a great plan\nto be ignorant of this fact.",
    "start": "890110",
    "end": "900310"
  },
  {
    "text": "This has certainly come back\nto bite a number of protocols that use RSA.",
    "start": "900310",
    "end": "905450"
  },
  {
    "text": "There's one property,\nwe'll actually use it as a defensive mechanism\ntowards the end of the lecture.",
    "start": "905450",
    "end": "911450"
  },
  {
    "text": "Another property of RSA that you\nprobably want to watch out for is the fact that\nit's deterministic.",
    "start": "911450",
    "end": "918566"
  },
  {
    "text": " So in this [? naive ?]\nimplementation",
    "start": "918566",
    "end": "923694"
  },
  {
    "text": "that I just described here,\nif you take a message m and you encrypt it,\nyou're going to get m",
    "start": "923695",
    "end": "929165"
  },
  {
    "text": "to the e mod n, which is\na deterministic function of the message. So if you encrypt\nit again, you'll",
    "start": "929165",
    "end": "935303"
  },
  {
    "text": "get exactly the same encryption. This is not surprising\nbut it might not be a desirable\nproperty because if I",
    "start": "935303",
    "end": "940510"
  },
  {
    "text": "see you send send some\nmessage encrypted with RSA, and I want to know what\nit is, it might be hard",
    "start": "940510",
    "end": "946495"
  },
  {
    "text": "for me to decrypt it. But I can try different\nthings and I can see, well are you sending\nthis message? I'll encrypt it and see if\nyou get the same ciphertext.",
    "start": "946495",
    "end": "952600"
  },
  {
    "text": "And if so, then I'll know\nthat's what you encrypted. Because all I need to\nencrypt a message is the publicly known public key,\nwhich is n and the number e.",
    "start": "952600",
    "end": "961850"
  },
  {
    "text": "So that's not so great. And you might want to\nwatch out for this property if you're actually using RSA.",
    "start": "961850",
    "end": "968640"
  },
  {
    "text": "So all of these\n[? primitives are ?] probably a little bit\nhard to use directly.",
    "start": "968640",
    "end": "974340"
  },
  {
    "text": "What people do in\npractice in order to avoid these\nproblems with RSA is",
    "start": "974340",
    "end": "980024"
  },
  {
    "text": "they encode the message\nin a certain way before encrypting it. Instead of directly\nexponentiating a message,",
    "start": "980024",
    "end": "985790"
  },
  {
    "text": "it actually takes some\nfunction of a message, and then they encrypt that.",
    "start": "985790",
    "end": "991680"
  },
  {
    "text": "mod n. And this function f, the\nright one to use these days,",
    "start": "991680",
    "end": "998190"
  },
  {
    "text": "is probably something called\noptimal asymmetric encryption padding, O A E P.\nYou can look it up.",
    "start": "998190",
    "end": "1005595"
  },
  {
    "text": "It's something coded that has\ntwo interesting properties. First of all, it\ninjects randomness.",
    "start": "1005595",
    "end": "1011390"
  },
  {
    "text": "You can think of f of n as\ngenerating 1,000 bit message",
    "start": "1011390",
    "end": "1017230"
  },
  {
    "text": "that you're going to encrypt. Part of this message is going to\nbe your message m in the middle here. So that you can get it back\nwhen you decrypt, of course.",
    "start": "1017230",
    "end": "1023420"
  },
  {
    "text": "[INAUDIBLE]. So there's 2 interesting\nthings you want to do. You want to put in\nsome randomness here, some value r so that when\nyou encrypt the message",
    "start": "1023420",
    "end": "1030640"
  },
  {
    "text": "multiple times, you'll\nget different results out of each time so then it's\nnot deterministic anymore.",
    "start": "1030640",
    "end": "1036069"
  },
  {
    "text": "And in order to defeat this\nmultiplicative property and other kinds of\nproblems, you're going to put in some\nfixed padding here.",
    "start": "1036069",
    "end": "1043010"
  },
  {
    "text": "You can think of this as\nan altering sequence of 1 0 1 0 1 0. You can do better things.",
    "start": "1043010",
    "end": "1048043"
  },
  {
    "text": "But roughly it's some\npredictable sequence that you put in here and\nwhenever you decrypt,",
    "start": "1048044",
    "end": "1053395"
  },
  {
    "text": "you make sure the\nsequence is still there. Even in multiplication\nit's going to destroy this bit power.",
    "start": "1053395",
    "end": "1060570"
  },
  {
    "text": "And then you should be\nclear that someone tampered with my message and reject it.",
    "start": "1060570",
    "end": "1066082"
  },
  {
    "text": "And if it's still there, then\npresumably, sometimes provably,",
    "start": "1066082",
    "end": "1071220"
  },
  {
    "text": "no one tampered with your\nmessage, and as a result you should be able to accept it. And treat message m as\ncorrectly encrypted by someone.",
    "start": "1071220",
    "end": "1079140"
  },
  {
    "text": "Make sense? Yeah? AUDIENCE: If the attacker knows\nhow big the pad is, can't they",
    "start": "1079140",
    "end": "1085250"
  },
  {
    "text": "put a 1 in the lowest\nplace and then [INAUDIBLE]",
    "start": "1085250",
    "end": "1090960"
  },
  {
    "text": "under multiplication? PROFESSOR: Yeah, maybe. It's a little bit tricky\nbecause this randomness",
    "start": "1090960",
    "end": "1096552"
  },
  {
    "text": "is going to bleed over. So the particular\nconstruction of this O A E P is a little bit more\nsophisticated than this.",
    "start": "1096552",
    "end": "1102740"
  },
  {
    "text": "But if you imagine\nthis is integer multiplication not\nbit-wise multiplication.",
    "start": "1102740",
    "end": "1108159"
  },
  {
    "text": "And so this randomness is\ngoing to bleed over somewhere, and you can construct\nO A E P scheme such",
    "start": "1108160",
    "end": "1114700"
  },
  {
    "text": "that this doesn't happen. [INAUDIBLE] Make sense?",
    "start": "1114700",
    "end": "1121720"
  },
  {
    "text": "All right. So it turns out that\nbasically you shouldn't really use this RSA math\ndirectly, you should use some library in\npractice that implements all",
    "start": "1121720",
    "end": "1128760"
  },
  {
    "text": "those things correctly for you. And use it just as an\nencrypt/decrypt parameter.",
    "start": "1128760",
    "end": "1133980"
  },
  {
    "text": "But it turns out these details\nwill come in and matter for us because we're\nactually trying to figure out how to break or how to attack\nan existing RSA implementation.",
    "start": "1133980",
    "end": "1143300"
  },
  {
    "text": "So in particular the\nattack from this paper is going to exploit the\nfact that the server is",
    "start": "1143300",
    "end": "1150080"
  },
  {
    "text": "going to check for this padding\nwhen they get a message. So this is how we're going to\ntime how long it takes a server",
    "start": "1150080",
    "end": "1157130"
  },
  {
    "text": "to decrypt. We're going to send some random\nmessage, or some carefully constructed message.",
    "start": "1157130",
    "end": "1162544"
  },
  {
    "text": "But the message wasn't\nconstructed by taking a real m and encrypting it. We're going to construct a\ncareful ciphertext integer",
    "start": "1162545",
    "end": "1169980"
  },
  {
    "text": "value. And the server is\ngoing to decrypt it, it's going to decrypt\nto some nonsense, and the padding is\ngoing to not match",
    "start": "1169980",
    "end": "1176590"
  },
  {
    "text": "with a very high probability. And immediately the server\nis going to reject it. And the reason this\nis going to be good",
    "start": "1176590",
    "end": "1181720"
  },
  {
    "text": "for us is because it will tell\nus exactly how long it took the server to get to this point,\njust do the RSA decryption,",
    "start": "1181720",
    "end": "1187250"
  },
  {
    "text": "get this message, check\nthe padding, and reject it. So that's what we're\ngoing to be measuring in this attack from the paper.",
    "start": "1187250",
    "end": "1194290"
  },
  {
    "text": "Does that make sense? So there's some integrity\ncomponent to the the message that allows us to time the\ndecryption leading up to it.",
    "start": "1194290",
    "end": "1202799"
  },
  {
    "text": "All right. So now let's talk about how to\ndo you actually implement RSA. So the core of it is\nreally this exponentiation,",
    "start": "1202800",
    "end": "1209940"
  },
  {
    "text": "which is not exactly\ntrivial to do as I was mentioning earlier\nbecause all these numbers are very large integers.",
    "start": "1209940",
    "end": "1215880"
  },
  {
    "text": "So the message itself\nis going to be at least, in this paper,\n1,000 bit integer. And the exponent itself is\nalso going to be pretty large.",
    "start": "1215880",
    "end": "1223809"
  },
  {
    "text": "The encryption exponent\nis at least well known. But the decryption\nexponent better be also a large integer also\non the order of 1,000 bits.",
    "start": "1223810",
    "end": "1230255"
  },
  {
    "text": "So you have a 1,000\nbit integer you want to exponentiate to another\n1,000 bit integer power modulo",
    "start": "1230255",
    "end": "1235900"
  },
  {
    "text": "some other 1,000\nbit integer n that's going to be a little\nmessy, if you just do [? the naive thing. ?]\nSo almost everyone has",
    "start": "1235900",
    "end": "1242210"
  },
  {
    "text": "lots of optimizations in\ntheir RSA implementations to make this go a\nlittle bit faster.",
    "start": "1242210",
    "end": "1248640"
  },
  {
    "text": "And there's four\noptimizations that matter for the purpose of this attack. There is actually more\ntricks that you can play,",
    "start": "1248640",
    "end": "1255420"
  },
  {
    "text": "but the most important\nones are these. So first there's something\ncalled the Chinese remainder",
    "start": "1255420",
    "end": "1262130"
  },
  {
    "text": "theorem, or C R T.\nAnd just to remind you from grade school or\nhigh school maybe what",
    "start": "1262130",
    "end": "1270250"
  },
  {
    "text": "this remainder theorem says. It actually says that\nif you have two numbers",
    "start": "1270250",
    "end": "1276380"
  },
  {
    "text": "and you have some\nvalue x and you know that x is equal to a1 mod p.",
    "start": "1276380",
    "end": "1285360"
  },
  {
    "text": "And you know that x is\nequal to a2 mod q, where",
    "start": "1285360",
    "end": "1291200"
  },
  {
    "text": "p and q are prime numbers. And this modular equality\napplies to the whole equation.",
    "start": "1291200",
    "end": "1298789"
  },
  {
    "text": "Then it turns out that there's\na unique solution to this is mod p q. So there's are some x equals\nto some x prime mod pq.",
    "start": "1298790",
    "end": "1312210"
  },
  {
    "text": "And in fact, there's\na unique such x prime, and it's actually very\nefficient to compute. So the Chinese\nremainder theorem also",
    "start": "1312210",
    "end": "1319450"
  },
  {
    "text": "comes with an algorithm for\nhow to compute this unique x prime that's equal to x mod pq\ngiven the values a1 and a2 mod",
    "start": "1319450",
    "end": "1329299"
  },
  {
    "text": "p and q, respectively. Make sense?",
    "start": "1329300",
    "end": "1335169"
  },
  {
    "text": "OK, so how can you use this\nChinese remainder theorem to speed up modular\nexponentiation?",
    "start": "1335170",
    "end": "1342580"
  },
  {
    "text": "So the way this is\ngoing to help us is that if you\nnotice all the time we're doing this computational\nof some bunch of stuff modulo",
    "start": "1342580",
    "end": "1351400"
  },
  {
    "text": "n, which is p times q. And the Chinese\nremainder theorem says that if you want the value\nof something mod p times q,",
    "start": "1351400",
    "end": "1359100"
  },
  {
    "text": "it suffices to compute the\nvalue of that thing mod p and the value of\nthat thing mod q.",
    "start": "1359100",
    "end": "1364746"
  },
  {
    "text": "And then use the Chinese\nremainder theorem to figure out the\nunique solution to what this thing is mod p times q.",
    "start": "1364746",
    "end": "1373220"
  },
  {
    "text": "All right, why is this faster? Seems like you're basically\ndoing the same thing twice,",
    "start": "1373220",
    "end": "1378335"
  },
  {
    "text": "and that's more\nwork to recombine it Is this going to\nsave me anything? Yeah? AUDIENCE: [INAUDIBLE]",
    "start": "1378335",
    "end": "1383746"
  },
  {
    "text": " PROFESSOR: Well, they're\ncertainly smaller, they're not that smaller.",
    "start": "1383746",
    "end": "1389311"
  },
  {
    "text": "And so p and q, so n\nis 1,000 bits, p and q are both 500 bits, they're not\nquite to the machine word size",
    "start": "1389311",
    "end": "1395600"
  },
  {
    "text": "yet. But it is going to\nhelp us because most of the stuff we're doing\nin this computation",
    "start": "1395600",
    "end": "1401340"
  },
  {
    "text": "is all these multiplications. And roughly multiplication\nis quadratic in the size of the thing you're multiplying\nbecause the grade school",
    "start": "1401340",
    "end": "1409960"
  },
  {
    "text": "method of multiplication\nyou take all the digits and multiply them by all the\nother digits in the number. And as a result, doing\nexponentiation multiplication",
    "start": "1409960",
    "end": "1418785"
  },
  {
    "text": "is roughly quadratic\nin the input side. So if we shrink the value of p,\nwe basically go from 1,000 bits",
    "start": "1418785",
    "end": "1426460"
  },
  {
    "text": "to 512 bits, we reduce the\nsize of our input by 2. So this means all this\nmultiplication exponentiation is going to be roughly\n4 times cheaper.",
    "start": "1426460",
    "end": "1434930"
  },
  {
    "text": "So even though we do it twice,\neach time is 4 times faster. So overall, the\nCRT optimization is",
    "start": "1434930",
    "end": "1441300"
  },
  {
    "text": "going to give us\nbasically a 2x performance boost for doing any\nRSA operation both,",
    "start": "1441300",
    "end": "1448080"
  },
  {
    "text": "in the encryption\nand decryption side. That make sense?",
    "start": "1448080",
    "end": "1454220"
  },
  {
    "text": "All right. So that's the first optimization\nthat most people use.",
    "start": "1454220",
    "end": "1460250"
  },
  {
    "text": "The second thing that\nmost implementations do is a technique called\nsliding windows.",
    "start": "1460250",
    "end": "1467195"
  },
  {
    "start": "1467195",
    "end": "1472620"
  },
  {
    "text": "And we'll look at this\nimplementation in 2 steps so this implementation is\ngoing to be concerned with what",
    "start": "1472620",
    "end": "1480199"
  },
  {
    "text": "basic operations\nare going to perform to do this exponentiation. Suppose you have some\nciphertext c that's now 500 bits",
    "start": "1480199",
    "end": "1489000"
  },
  {
    "text": "because you were not\ndoing mod p or mod q. We have a 500 bit c and,\nsimilarly, roughly a 500 bit d",
    "start": "1489000",
    "end": "1498270"
  },
  {
    "text": "as well. So how do we raise\nc to the power d?",
    "start": "1498270",
    "end": "1504070"
  },
  {
    "text": "I guess the stupid way\nthat is to take c and keep multiplying d times. But d is very big,\nit's 2 to the 500.",
    "start": "1504070",
    "end": "1510770"
  },
  {
    "text": "So that's never going to finish. So a more amenable,\nor more performant,",
    "start": "1510770",
    "end": "1516779"
  },
  {
    "text": "plan is to do what's\ncalled repeat of squaring. So that's the step\nbefore sliding windows.",
    "start": "1516780",
    "end": "1524880"
  },
  {
    "text": "So this technique called\nrepeated squaring looks",
    "start": "1524880",
    "end": "1531360"
  },
  {
    "text": "like this. So if you want to compute\nc to the power 2 x,",
    "start": "1531360",
    "end": "1540580"
  },
  {
    "text": "then you can actually compute\nc to the x and then square it.",
    "start": "1540580",
    "end": "1546080"
  },
  {
    "text": "So in our naive plan,\ncomputing c to the 2x would have involved us making\ntwice as many iterations of multiplying because it's\nmultiplying c twice many times.",
    "start": "1546080",
    "end": "1553449"
  },
  {
    "text": "But in fact, you could be\nclever and just compute c to the x and then\nsquare it later. So this works well,\nand this means",
    "start": "1553449",
    "end": "1560610"
  },
  {
    "text": "that if you're computing c to\nsome even exponent, this works.",
    "start": "1560610",
    "end": "1566809"
  },
  {
    "text": "And conversely, if you're\ncomputing c to some 2x plus 1, then you could\nimagine this is just",
    "start": "1566810",
    "end": "1571870"
  },
  {
    "text": "c to the x squared\ntimes another c. So this is what's called\nrepeated squaring.",
    "start": "1571870",
    "end": "1578770"
  },
  {
    "text": "And this now allows us to\ncompute these exponentiations, or modular exponentiations,\nin a time that's",
    "start": "1578770",
    "end": "1587600"
  },
  {
    "text": "basically linear in the\nsize of the exponent. So for every bit\nin the exponent,",
    "start": "1587600",
    "end": "1594110"
  },
  {
    "text": "we're going to either\nsquare something or square something then\ndo an extra multiplication.",
    "start": "1594110",
    "end": "1600760"
  },
  {
    "text": "So that's the plan\nfor repeated squaring. So now we can at least have\nnon-embarrassing run times",
    "start": "1600760",
    "end": "1607290"
  },
  {
    "text": "for computing modular exponents. Does this make sense, why this\nis working and why it's faster?",
    "start": "1607290",
    "end": "1614652"
  },
  {
    "text": "All right, so what's this\nsliding windows trick that the paper talks about? So this is a little bit\nmore sophisticated than this",
    "start": "1614652",
    "end": "1622500"
  },
  {
    "text": "repeating squaring business. And basically the\nsquaring is going",
    "start": "1622500",
    "end": "1628020"
  },
  {
    "text": "to be pretty much inevitable. But what the sliding windows\noptimization is trying do",
    "start": "1628020",
    "end": "1633450"
  },
  {
    "text": "is reduce the overhead of\nmultiplying by this extra c down here.",
    "start": "1633450",
    "end": "1638656"
  },
  {
    "text": "So suppose if you\nhave some number that has several 1 bits in the\nexponent, for every 1 bit",
    "start": "1638656",
    "end": "1645470"
  },
  {
    "text": "in the exponent in the\nbinder of presentation, you're going to have do this\nstep instead of this step.",
    "start": "1645470",
    "end": "1650670"
  },
  {
    "text": "Because for every\nodd number, you're going to have to multiply by c. So these guys would like to not\nmultiply by this c as often.",
    "start": "1650670",
    "end": "1657929"
  },
  {
    "text": "So the plan is to precompute\ndifferent powers of c.",
    "start": "1657930",
    "end": "1664754"
  },
  {
    "text": "So what we're going\nto do is we're going to generate\na table that says, well, here's the value of c\nto the x-- sorry, c to the 1--",
    "start": "1664754",
    "end": "1673020"
  },
  {
    "text": "here's the value of c\nto the 3, c to the 7. And I think\n[? in open ?] as a cell, it goes up to c to the 31st.",
    "start": "1673020",
    "end": "1682020"
  },
  {
    "text": "So this table is\ngoing to just be precomputed when you want to\ndo some modular exponentiation.",
    "start": "1682020",
    "end": "1688640"
  },
  {
    "text": "You're going to precompute\nall the slots in this table. And then when you want to do\nthis exponentiation, instead",
    "start": "1688640",
    "end": "1694340"
  },
  {
    "text": "of doing the repeated squaring\nand multiplying by this c every time, You're going to use\na different formula.",
    "start": "1694340",
    "end": "1700420"
  },
  {
    "text": "It says as well if you have\nc to the 32x plus some y,",
    "start": "1700420",
    "end": "1706580"
  },
  {
    "text": "well you can do c\nto the x, and you can do repeated squaring--\nvery much like before-- this",
    "start": "1706580",
    "end": "1713664"
  },
  {
    "text": "is to get the 32, there's\nlike 5 powers of 2 here times c to the y.",
    "start": "1713665",
    "end": "1721560"
  },
  {
    "text": "And c to the y, you can\nget out of this table. So you can see that we're doing\nthe same number of squaring",
    "start": "1721560",
    "end": "1726770"
  },
  {
    "text": "as before here. But we don't have to\nmultiply by c as many times.",
    "start": "1726770",
    "end": "1732270"
  },
  {
    "text": "You're going to fish\nit out of this table and do several multiplies\nby c for the cost of a single multiply.",
    "start": "1732270",
    "end": "1739029"
  },
  {
    "text": "This make sense? Yeah? AUDIENCE: How do you determine\nx and y in the first place? PROFESSOR: How do determine y?",
    "start": "1739030",
    "end": "1745125"
  },
  {
    "text": "AUDIENCE: X and y. PROFESSOR: Oh, OK. So let's look at that. So for repeated\nsquaring, well actually",
    "start": "1745125",
    "end": "1753290"
  },
  {
    "text": "in both cases,\nwhat you want to do is you want to look\nat the exponent that you're trying to use\nin a binary representation.",
    "start": "1753290",
    "end": "1761830"
  },
  {
    "text": "So suppose I'm trying to compute\nthe value of c to the exponent, I don't know, 1 0 1 1 0 1 0,\nand maybe there's more bits.",
    "start": "1761830",
    "end": "1772755"
  },
  {
    "text": "OK, so if we wanted to\ndo repeated squaring, then you look at the\nlowest bit here-- it's 0.",
    "start": "1772755",
    "end": "1778410"
  },
  {
    "text": "So what you're\ngoing to write down is this is equal to c to\nthe 1 0 1 1 0 1 squared.",
    "start": "1778410",
    "end": "1786346"
  },
  {
    "text": "OK, so now if only\nyou knew this value, then you could just square it. OK, now we're going to compute\nthis guy, so c to the 1 0 1 1",
    "start": "1786346",
    "end": "1794816"
  },
  {
    "text": "0 1 is equal to-- well\nhere we can't use this rule because it's not 2x-- it's\ngoing to be to the x plus 1.",
    "start": "1794816",
    "end": "1800400"
  },
  {
    "text": "So now we're going to write\nthis is c to the 1 0 1 1 0",
    "start": "1800400",
    "end": "1806030"
  },
  {
    "text": "squared times another c. Because it's this prefix\ntimes 2 plus this one of m.",
    "start": "1806030",
    "end": "1815020"
  },
  {
    "text": "That's how you fish it\nout for repeated squaring. And for sliding window,\nyou just grab more bits from the low end.",
    "start": "1815020",
    "end": "1820679"
  },
  {
    "text": "So if you wanted to do the\nsliding window trick here instead of taking\none c out, suppose",
    "start": "1820680",
    "end": "1827130"
  },
  {
    "text": "we do-- instead of this\ngiant table-- maybe we do 3 bits at a time. So we go off to c to the 7th.",
    "start": "1827130",
    "end": "1832785"
  },
  {
    "text": "So here you would\ngrab the first 3 bits, and that's what you would\ncompute here: c to the 1",
    "start": "1832785",
    "end": "1840448"
  },
  {
    "text": "0 1 to the 8th power. And then, the rest is c\nto the 1 0 1 power here.",
    "start": "1840448",
    "end": "1847995"
  },
  {
    "text": "It's a little unfortunate\nthese are the same thing, but really there's\nmore bits here.",
    "start": "1847995",
    "end": "1853001"
  },
  {
    "text": "But here, this is\nthe thing that you're going to look up in the table. This is c to the 5th in decimal. And this says you're going to\nkeep doing the sliding window",
    "start": "1853001",
    "end": "1860590"
  },
  {
    "text": "to compute this value. Make sense? This just saves\non how many times",
    "start": "1860590",
    "end": "1866410"
  },
  {
    "text": "you have to multiply\nby c by pre-multiplying it a bunch of times. [? And the cell guys ?]\nat least 10 years ago",
    "start": "1866410",
    "end": "1872870"
  },
  {
    "text": "thought that going\nup to 32 power was the best plan in\nterms of efficiency",
    "start": "1872870",
    "end": "1878229"
  },
  {
    "text": "because there's some\ntrade off here, right? You spend time\npreconfiguring this table, but then if this\ntable is too giant,",
    "start": "1878229",
    "end": "1884109"
  },
  {
    "text": "you're not going to\nuse some entries, because if you run\nthis table out to, I don't know, c to the 128\nbut you're computing just",
    "start": "1884109",
    "end": "1891700"
  },
  {
    "text": "like 500 [? full bit ?]\nexponents, maybe you're not going\nto use all these entries. So it's gonna be\na waste of time. Question.",
    "start": "1891700",
    "end": "1897170"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]\nIs there a reason not to compute the\ntable [INAUDIBLE]?",
    "start": "1897170",
    "end": "1904128"
  },
  {
    "text": "[INAUDIBLE] ",
    "start": "1904128",
    "end": "1909460"
  },
  {
    "text": "PROFESSOR: It ends\nup being the case that you don't want to-- well\nthere's two things going on.",
    "start": "1909460",
    "end": "1917740"
  },
  {
    "text": "One is that you'll have now code\nto check whether the entry is filled in or not, and that'll\nprobably reduce your branch",
    "start": "1917740",
    "end": "1925440"
  },
  {
    "text": "predictor accuracy\non the CPU So it will run slower\nin the common case because if you [INAUDIBLE]\nwith the entries there.",
    "start": "1925440",
    "end": "1931903"
  },
  {
    "text": "Another slightly\nannoying thing is that it turns out\nthis entry leaks stuff through a different\nside-channel, namely",
    "start": "1931903",
    "end": "1938440"
  },
  {
    "text": "cache access patterns. So if you have some other\nprocess on the same CPU,",
    "start": "1938440",
    "end": "1943610"
  },
  {
    "text": "you can sort of see which\ncache addresses are getting evicted out of the cache or are\nslower because someone accessed",
    "start": "1943610",
    "end": "1950910"
  },
  {
    "text": "this entry or this entry. And the bigger this\ntable gets, the easier it is to tell what the\nexponent bits were.",
    "start": "1950910",
    "end": "1958630"
  },
  {
    "text": "In the limit, this table is\ngigantic and just telling, just being able to tell which\ncache address on this CPU",
    "start": "1958630",
    "end": "1967680"
  },
  {
    "text": "had a [? miss ?] tells you that\nthe encryption process must have accessed that\nentry in the table. And tells you that, oh that long\nbit sequence appears somewhere",
    "start": "1967680",
    "end": "1975450"
  },
  {
    "text": "in your secret key exponent. So I guess the answer\nisn't mathematically",
    "start": "1975450",
    "end": "1980930"
  },
  {
    "text": "you could totally fill\nthis in on demand. In practice, you probably\ndon't want it to be that giant.",
    "start": "1980930",
    "end": "1986549"
  },
  {
    "text": "And also, if you have\nit's particularly giant, you aren't going to be able to\nuse entries as efficiently as",
    "start": "1986550",
    "end": "1992350"
  },
  {
    "text": "well. You can reuse these\nentries as you're computing. [INAUDIBLE]\nIt's not actually that expensive because\nyou use c to the cubed",
    "start": "1992350",
    "end": "1999460"
  },
  {
    "text": "when you're computing c to the\n7th and so on and so forth. It's not that bad.",
    "start": "1999460",
    "end": "2005643"
  },
  {
    "text": "Make sense? Other questions? All right.",
    "start": "2005644",
    "end": "2011260"
  },
  {
    "text": "So this is the repeated\nsquaring and sliding window optimization that\nopen [? a cell ?] implements",
    "start": "2011260",
    "end": "2021384"
  },
  {
    "text": "[INAUDIBLE] I don't actually\nknow whether they still have the same size of the\nsliding window or not. But it does actually give\nyou a fair bit of speed up.",
    "start": "2021384",
    "end": "2028460"
  },
  {
    "text": "So before you had to square\nfor every bit in the exponent. And then you'd have to have\na multiply for every 1 bit.",
    "start": "2028460",
    "end": "2037060"
  },
  {
    "text": "So if you have a 500\nbit exponent then you're going to do 500\nsquarings and, on average,",
    "start": "2037060",
    "end": "2042880"
  },
  {
    "text": "roughly 256\nmultiplications by c. So with sliding\nwindows, you're going",
    "start": "2042880",
    "end": "2047890"
  },
  {
    "text": "to still do the 512\nsquarings because there's no getting around that.",
    "start": "2047890",
    "end": "2053280"
  },
  {
    "text": "But instead of doing\n256 multiplies by c, you're going to\nhopefully do way fewer,",
    "start": "2053280",
    "end": "2059214"
  },
  {
    "text": "maybe something on the\norder of 32 [INAUDIBLE] multiplies by some\nentry in this table.",
    "start": "2059214",
    "end": "2064899"
  },
  {
    "text": "So that's the general plan. [INAUDIBLE] Not as\ndramatic as CRT, not 2x,",
    "start": "2064900",
    "end": "2071399"
  },
  {
    "text": "but it could save\nyou like almost 1.5x. ",
    "start": "2071400",
    "end": "2077516"
  },
  {
    "text": "All depending on exactly\nwhat [INAUDIBLE]. Make sense?",
    "start": "2077516",
    "end": "2082869"
  },
  {
    "text": "Another question about this? All right. So these are the [? roughly ?]\neasier optimizations.",
    "start": "2082870",
    "end": "2090360"
  },
  {
    "text": "And then there's\ntwo clever tricks playing with numbers for how to\ndo just a multiplication more",
    "start": "2090360",
    "end": "2097290"
  },
  {
    "text": "efficiently. So the first one of\nthese optimizations that we're going to\nlook at-- I think",
    "start": "2097290",
    "end": "2104079"
  },
  {
    "text": "I'll raise this board--\nis called this Montgomery representation.",
    "start": "2104080",
    "end": "2109820"
  },
  {
    "text": "And we'll see in\na second why it's particularly important for us. ",
    "start": "2109820",
    "end": "2123820"
  },
  {
    "text": "So the problem that this\nMontgomery representation optimization is\ntrying to solve for us",
    "start": "2123820",
    "end": "2129150"
  },
  {
    "text": "is the fact that every\ntime we do a multiply, we get a number\nthat keeps growing",
    "start": "2129150",
    "end": "2134880"
  },
  {
    "text": "and growing and growing. In particular, both\nin sliding windows",
    "start": "2134880",
    "end": "2140690"
  },
  {
    "text": "or in repeated\nsquaring, actually when you square you multiply\n2 numbers together,",
    "start": "2140690",
    "end": "2146010"
  },
  {
    "text": "when you multiply\nby c to the y, you multiply 2 numbers together. And the problem is that if the\ninputs to the multiplication",
    "start": "2146010",
    "end": "2153010"
  },
  {
    "text": "were, let's say, 512 bits each. Then the result of\nthe multiplication",
    "start": "2153010",
    "end": "2159140"
  },
  {
    "text": "is going to be 1,000 bits. And then you'd take\nthis 1,000 bit result and you multiply it\nagain by something",
    "start": "2159140",
    "end": "2164746"
  },
  {
    "text": "like five [INAUDIBLE] bits. And now it's 1,500 bits,\n2,000 bits, 2,500 bits, and it keeps\ngrowing and growing.",
    "start": "2164746",
    "end": "2170789"
  },
  {
    "text": "And you really don't want\nthis because multiplications [? quadratic ?] in the size of\nthe number we're multiplying.",
    "start": "2170790",
    "end": "2177670"
  },
  {
    "text": "So we have to keep\nthe size of our number as small as possible,\nwhich means basically 512 bits because all this\ncomputation is mod p or mod q.",
    "start": "2177670",
    "end": "2187360"
  },
  {
    "text": "Yeah? AUDIENCE: What do\nyou want [INAUDIBLE]?  PROFESSOR: That's right, yeah.",
    "start": "2187360",
    "end": "2193210"
  },
  {
    "text": "So the cool thing is that\nwe can keep this number down because what we\ndo is, let's say, we want to compute c to the\nx just for this example.",
    "start": "2193210",
    "end": "2200730"
  },
  {
    "text": "Squared. Squared again. Squared again. What you could do is\nyou compute c to the x",
    "start": "2200730",
    "end": "2206610"
  },
  {
    "text": "then you take mod\np, let's say, right. Then you square it then\nyou do mod p again.",
    "start": "2206610",
    "end": "2213110"
  },
  {
    "text": "Then you square it again,\nand then you do mod p again. And so on. So this is basically\nwhat you're proposing.",
    "start": "2213110",
    "end": "2219330"
  },
  {
    "text": "So this is great. In fact, this keeps\nit size of our numbers to basically five total\nbits, which is about as",
    "start": "2219330",
    "end": "2225260"
  },
  {
    "text": "small as we can get. This is good in\nterms of keeping down the size of these numbers\nfor multiplication.",
    "start": "2225260",
    "end": "2231940"
  },
  {
    "text": "But it's actually kind of\nexpensive to do this mod p operation. Because the way that you\ndo mod p something is",
    "start": "2231940",
    "end": "2239240"
  },
  {
    "text": "you basically have\nto do division. And division is way worse\nthan multiplication.",
    "start": "2239240",
    "end": "2244510"
  },
  {
    "text": "I'm not going to go through\nthe algorithms for division, but it's really slow.",
    "start": "2244510",
    "end": "2250520"
  },
  {
    "text": "You usually want to avoid\ndivision as much as possible. Because it's not even just a\nstraightforward programming",
    "start": "2250520",
    "end": "2256240"
  },
  {
    "text": "thing, you have to do some\napproximation algorithm, some sort of Newton's\nmethod of some sort",
    "start": "2256240",
    "end": "2261780"
  },
  {
    "text": "and just keep it [INAUDIBLE]. It's going to be slow. And in the main\nimplementation, this actually",
    "start": "2261780",
    "end": "2267290"
  },
  {
    "text": "turns out to be the slowest\npart of doing multiplication. The multiplication is cheap. But then doing mod p or mod q\nto bring it back down in size",
    "start": "2267290",
    "end": "2276210"
  },
  {
    "text": "is going to be actually more\nexpensive than the multiplying. So that's actually\nkind of a bummer.",
    "start": "2276210",
    "end": "2281480"
  },
  {
    "text": "So the way that we're\ngoing to get around this is by doing this multiplication,\nthis clever other",
    "start": "2281480",
    "end": "2288590"
  },
  {
    "text": "representation, and also\nI'll show you the trick here. Let's see.",
    "start": "2288590",
    "end": "2294780"
  },
  {
    "text": "Bear with me for a\nsecond, and then we'll and then see why it's so fast\nto use this Montgomery trick.",
    "start": "2294780",
    "end": "2301082"
  },
  {
    "text": "And the basic idea is\nto represent numbers,",
    "start": "2301082",
    "end": "2306190"
  },
  {
    "text": "these are regular numbers\nthat you might actually want to multiply. And we're going to have a\ndifferent representation",
    "start": "2306190",
    "end": "2312980"
  },
  {
    "text": "for these numbers, called the\nMontgomery representation.  And that representation\nis actually very easy.",
    "start": "2312980",
    "end": "2321190"
  },
  {
    "text": "We just take the value\na and we multiply it by some magic value R. I'll tell you what\nthis R is in a second.",
    "start": "2321190",
    "end": "2328250"
  },
  {
    "text": "But let's first figure out if\nyou pick some arbitrary value R, what's going to happen here?",
    "start": "2328250",
    "end": "2333820"
  },
  {
    "text": "So we take 2 numbers, a and b. Their Montgomery representations\nare sort of expectedly.",
    "start": "2333820",
    "end": "2340075"
  },
  {
    "text": "A is aR, b is bR. And if you want to compute\nthe product of a times b,",
    "start": "2340075",
    "end": "2345920"
  },
  {
    "text": "well in Montgomery\nspace, you can also multiply these guys out. You can take aR\nmultiply it by bR.",
    "start": "2345920",
    "end": "2353309"
  },
  {
    "text": "And what you get here\nis ab times R squared. So there are two Rs now.",
    "start": "2353310",
    "end": "2358769"
  },
  {
    "text": "That's kind of annoying, but\nyou can divide that by R. And we get ab times R. So this\nis probably weird in a sense",
    "start": "2358770",
    "end": "2369610"
  },
  {
    "text": "that why would you\nmultiply this extra number. But let's first figure out\nwhether this is correct. And then we'll figure out why\nthis is going to be faster.",
    "start": "2369610",
    "end": "2377179"
  },
  {
    "text": "So it's correct in the\nsense that it's very easy. If you want to\nmultiply some numbers, we just multiply by this R\nvalue and get the Montgomery",
    "start": "2377179",
    "end": "2383364"
  },
  {
    "text": "representation. Then we can do all\nthese multiplications to these Montgomery forms. And every time we\nmultiply 2 numbers,",
    "start": "2383364",
    "end": "2390264"
  },
  {
    "text": "we have to divide by R,\nlook at the Montgomery form of the\nmultiplication result. And then when we're\ndone doing all",
    "start": "2390264",
    "end": "2396360"
  },
  {
    "text": "of our squarings,\nmultiplication, all this stuff, we're going to move back\nto the normal, regular form by just dividing\nby R one last time.",
    "start": "2396360",
    "end": "2404890"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: We're\nnow going to pick R to be a very nice number. And in particular,\nwe're going to pick R",
    "start": "2404890",
    "end": "2411900"
  },
  {
    "text": "to be a very nice number to make\nthis division by R very fast.",
    "start": "2411900",
    "end": "2417779"
  },
  {
    "text": "And the cool thing is\nthat if this division by R is going to be very\nfast, then this",
    "start": "2417780",
    "end": "2424499"
  },
  {
    "text": "is going to be a small\nnumber and we're not going to have to do\nthis mod q very often. In particular, aR,\nlet's say, is also",
    "start": "2424499",
    "end": "2432119"
  },
  {
    "text": "going to be roughly 500 bits\nbecause it's all actually mod p or mod q. So aR is 500 bits.",
    "start": "2432120",
    "end": "2439319"
  },
  {
    "text": "BR is going to also be 500 bits. So this product is\ngoing to be 1,000 bits. This R is going to be\nthis nice 500 roughly bit",
    "start": "2439320",
    "end": "2446829"
  },
  {
    "text": "number, same size as p. And if we can make this\ndivision to be fast, then the result is going to be\na roughly 500 bit number here.",
    "start": "2446830",
    "end": "2455744"
  },
  {
    "text": "So we were able to do the\nmultiplying without having to do an extra divide. Dividing by R cheaply gives us\nthis small result, getting us",
    "start": "2455744",
    "end": "2463920"
  },
  {
    "text": "out of doing a mod p\nfor most situations. OK, so what is this weird number\nthat I keep talking about?",
    "start": "2463920",
    "end": "2471670"
  },
  {
    "text": "Well R is just going\nto be 2 to 512.",
    "start": "2471670",
    "end": "2477943"
  },
  {
    "text": "It's going to be 1\nfollowed by a ton of zeros. So multiplying by\nthis is easy, you just",
    "start": "2477944",
    "end": "2485260"
  },
  {
    "text": "append a bunch of\nzeros to a number. Dividing could be easy if\nthe low bits of the result",
    "start": "2485260",
    "end": "2492960"
  },
  {
    "text": "are all zeros. So if you have a value\nthat's a bunch of bits followed by 512 zeros, then\ndividing by 2 to the 512",
    "start": "2492960",
    "end": "2501460"
  },
  {
    "text": "is cheap. You just discard the zeros\non the right-hand side. And that's actually\nthe correct division.",
    "start": "2501460",
    "end": "2507140"
  },
  {
    "text": "Does that make sense? The slight problem\nis that we actually don't have zeros on\nthe right hand side when you do this multiplication.",
    "start": "2507140",
    "end": "2513110"
  },
  {
    "text": "These are like real 512 bit\nnumbers with all the 512 bits used. So this will be a\n1,000 bit number",
    "start": "2513110",
    "end": "2518890"
  },
  {
    "text": "[? or ?] with all this bits\nalso set to randomly 0 or 1, depending on what's going on. So we can't just\ndiscard the low bits.",
    "start": "2518890",
    "end": "2526460"
  },
  {
    "text": "But the cleverness\ncomes from the fact that the only\nthing we care about is the value of\nthis thing mod p.",
    "start": "2526460",
    "end": "2534369"
  },
  {
    "text": "So you can always add\nmultiples of p to this value without changing it when\nit's equivalent to mod p.",
    "start": "2534370",
    "end": "2542380"
  },
  {
    "text": "And as a result, we\ncan add multiples of p to get the low bits\nto all be zeros.",
    "start": "2542380",
    "end": "2548019"
  },
  {
    "text": "So let's look through\nsome simple examples. I'm not going to write\nout 512 bits on the board.",
    "start": "2548020",
    "end": "2553390"
  },
  {
    "text": "But suppose that--\nhere's a short example. ",
    "start": "2553390",
    "end": "2560200"
  },
  {
    "text": "Suppose that we have\na situation where our value R is 2 to the 4th.",
    "start": "2560200",
    "end": "2566339"
  },
  {
    "text": "So it's 1 followed\nby four zeros. So this is a much smaller\nexample than the real thing.",
    "start": "2566340",
    "end": "2573170"
  },
  {
    "text": "But let's see how this\nMontgomery division is going to work out. So suppose we're going to try\nto compute stuff mod q, where",
    "start": "2573170",
    "end": "2582599"
  },
  {
    "text": "q, let's say, is maybe 7. So this is 1 1 1 in binary form.",
    "start": "2582600",
    "end": "2590000"
  },
  {
    "text": "And what we're\ngoing to try to do is maybe we did\nsome multiplication.",
    "start": "2590000",
    "end": "2596359"
  },
  {
    "text": "And this value aR\ntimes bR is equal to this binary\npresentation 1 1 0 1 0.",
    "start": "2596360",
    "end": "2606520"
  },
  {
    "text": "So this is going to be\nthe value of aR times bR. How do we divide it by R?",
    "start": "2606520",
    "end": "2612780"
  },
  {
    "text": "So clearly the low\nfour bits aren't all 0, so we can't just divide it out. But we can add multiples of q.",
    "start": "2612780",
    "end": "2620680"
  },
  {
    "text": "In particular, we\ncan add 2 times q. So 2q is equal to 1 1 1 0.",
    "start": "2620680",
    "end": "2629700"
  },
  {
    "text": "And now what we get\nis 0 0, carry a 1, 0,",
    "start": "2629700",
    "end": "2636740"
  },
  {
    "text": "carry a 1, 1, carry a 1, 0 1. I hope I did that right.",
    "start": "2636740",
    "end": "2642520"
  },
  {
    "text": "So this is what we get. So now we get aR\nbR plus 2 cubed. But we actually don't care\nabout the plus 2 cubed.",
    "start": "2642520",
    "end": "2649290"
  },
  {
    "text": "It's actually fine\nbecause all we care about is the value of mod q. ",
    "start": "2649290",
    "end": "2655190"
  },
  {
    "text": "And now we're closer, we have\nthree 0 bits at the bottom. Now we can add\nanother multiple of q. This time it's going\nto be probably 8q.",
    "start": "2655190",
    "end": "2663000"
  },
  {
    "text": "So we add 1 1 1 here 0 0. And if we add it, we're\ngoing to get, let's say,",
    "start": "2663000",
    "end": "2669905"
  },
  {
    "text": "0 0 0 then add these two guys\n0, carry a 1, 0, carry a 1, 1 1.",
    "start": "2669905",
    "end": "2677120"
  },
  {
    "text": "I think that's right. But now we have\nour original aR bR plus 2q plus 8q is\nequal to this thing.",
    "start": "2677120",
    "end": "2685029"
  },
  {
    "text": "And finally, we can divide\nthis thing by R very cheaply. Because we just discard\nthe low four zeros.",
    "start": "2685030",
    "end": "2694762"
  },
  {
    "text": "Make sense? Question. AUDIENCE: Is aR bR always\ngoing to end in, I guess,",
    "start": "2694762",
    "end": "2701150"
  },
  {
    "text": "1,024 zeros? PROFESSOR: No, and the\nreason is that-- OK,",
    "start": "2701150",
    "end": "2708021"
  },
  {
    "text": "here is the thing\nthat's maybe confusing. A was, let's say, 512 bits. Then you multiply it by\nR. So here, you're right.",
    "start": "2708021",
    "end": "2715470"
  },
  {
    "text": "This value is that 1,000 bit\nnumber where the high bit is a, the high 512 bits are a.",
    "start": "2715470",
    "end": "2720980"
  },
  {
    "text": "And the low bits are all zeros. But then, you're going\n[? to do it with ?] mod q to bring it down\nto make it smaller.",
    "start": "2720980",
    "end": "2727410"
  },
  {
    "text": "And in general, this is\ngoing to be the case. Because [? it only ?] has\nthese low zeros the first time",
    "start": "2727410",
    "end": "2732745"
  },
  {
    "text": "you convert it. But after you do a\ncouple multiplications, they're going to\nbe arbitrary bits. So these guys are--\nso I really should",
    "start": "2732745",
    "end": "2740270"
  },
  {
    "text": "have written mod q here--\nand to compute this mod q as soon as you do the conversion\nto keep the whole value small.",
    "start": "2740270",
    "end": "2749356"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: Yeah, so the\ninitial conversion is expensive or at least it's as expensive\nas doing a regular modulus",
    "start": "2749356",
    "end": "2758650"
  },
  {
    "text": "during the multiplication. The cool thing is\nthat you pay this cost just once when you do the\nconversion into Montgomery",
    "start": "2758650",
    "end": "2765176"
  },
  {
    "text": "form. And then, instead of converting\nit back at every step, you just keep it\nin Montgomery form.",
    "start": "2765176",
    "end": "2771235"
  },
  {
    "text": "But remember that in order\nto do an exponentiation to an exponent\nwhich has 512 bits, you're saying\nyou're going to have",
    "start": "2771235",
    "end": "2777480"
  },
  {
    "text": "to do over 500 multiplications\nbecause we have to do at least 500 squarings plus then some.",
    "start": "2777480",
    "end": "2783870"
  },
  {
    "text": "So you do these mod\nq twice and then you get a lot of cheap divisions\nif you stay in this form.",
    "start": "2783870",
    "end": "2790370"
  },
  {
    "text": "And then you do a division by R\nto get back to this form again. So instead of doing 500 mod qs\nfor every multiplication step,",
    "start": "2790370",
    "end": "2797520"
  },
  {
    "text": "you do it twice mod q. And then you keep\ndoing these divisions by R cheaply using this trick.",
    "start": "2797520",
    "end": "2805080"
  },
  {
    "text": "Question. AUDIENCE: So when you're\nadding the multiples of q and then dividing\nby R, [INAUDIBLE]",
    "start": "2805080",
    "end": "2811400"
  },
  {
    "text": " PROFESSOR: Because it's\nactually mod q means",
    "start": "2811400",
    "end": "2816780"
  },
  {
    "text": "the remainder when\nyou divide by q. So x plus y times\nq, mod q is just x.",
    "start": "2816780",
    "end": "2827990"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]  PROFESSOR: So in this case,\ndividing by-- so another sort",
    "start": "2827990",
    "end": "2836088"
  },
  {
    "text": "of nice property is\nthat because it's all modulus at prime\nnumber-- it's also true",
    "start": "2836089",
    "end": "2842450"
  },
  {
    "text": "that if you have x\nplus yq divided by R,",
    "start": "2842450",
    "end": "2848079"
  },
  {
    "text": "mod q is actually the same\nas x divided by R mod q.",
    "start": "2848080",
    "end": "2855790"
  },
  {
    "text": "The way to think of it is\nthat there's no real division in modular arithmetic. It's just an inverse.",
    "start": "2855790",
    "end": "2861730"
  },
  {
    "text": "So what this really\nsays is this is actually x plus yq times some\nnumber called R inverse.",
    "start": "2861730",
    "end": "2869465"
  },
  {
    "text": "And then you compute\nthis whole thing mod q. And then you could think of\nthis as x times R inverse",
    "start": "2869465",
    "end": "2877210"
  },
  {
    "text": "mod q plus y [? u ?]\nR inverse mod q.",
    "start": "2877210",
    "end": "2885320"
  },
  {
    "text": "And this thing cancels out\nbecause it's something times q. ",
    "start": "2885320",
    "end": "2895060"
  },
  {
    "text": "And there's some closed\nform for this thing. So here I did it by bit by\nbit, 2q then 8q, et cetera.",
    "start": "2895060",
    "end": "2902195"
  },
  {
    "text": "It's actually a\nnice closed formula you can compute-- it's\nin the lecture notes, but it's probably not worth\nspending time on the board",
    "start": "2902195",
    "end": "2907880"
  },
  {
    "text": "here-- for how do you figure\nout what multiple of q should you add to get all\nthe low bits to turn to 0.",
    "start": "2907880",
    "end": "2915331"
  },
  {
    "text": "So then it turns out that in\norder to do this division by R, you just need to compute this\nmagic multiple of q, add it.",
    "start": "2915331",
    "end": "2923450"
  },
  {
    "text": "And then discard the\nlow bits and that brings your number back to 512\nbits, or whatever the size is.",
    "start": "2923450",
    "end": "2933047"
  },
  {
    "text": "OK. And here's the subtlety. The only reason we're\ntalking about this is that there's something\nfunny going on here",
    "start": "2933047",
    "end": "2940470"
  },
  {
    "text": "that is going to allow us\nto learn timing information. And in particular, even\nthough we divided by R,",
    "start": "2940470",
    "end": "2949780"
  },
  {
    "text": "we know the result is\ngoing to be 512 bits. But it still might\nbe greater than q",
    "start": "2949780",
    "end": "2955123"
  },
  {
    "text": "because q isn't exactly\n[? up to 512 ?], it's not a 512 bit number. So it might be a\nlittle bit less than R.",
    "start": "2955123",
    "end": "2960840"
  },
  {
    "text": "So it might be that after we\ndo this cheap division by R, [? the way ?] we\nsubtract out q one more",
    "start": "2960840",
    "end": "2966960"
  },
  {
    "text": "time because we get something\nthat's small but not quite small enough. So there's a chance that\nafter doing this division,",
    "start": "2966960",
    "end": "2974740"
  },
  {
    "text": "we maybe have to also\nsubtract q again. And this subtraction is\ngoing to be part of what",
    "start": "2974740",
    "end": "2982390"
  },
  {
    "text": "this attack is all about. It turns out that\nsubtracting this q adds time.",
    "start": "2982390",
    "end": "2988060"
  },
  {
    "text": "And someone figured\nout-- not these guys but some previous\nwork-- that you show that this probability\nof doing this thing, this",
    "start": "2988060",
    "end": "2996770"
  },
  {
    "text": "is called an\nextractor reduction. ",
    "start": "2996770",
    "end": "3003500"
  },
  {
    "text": "This probability sort of\ndepends on the particular value",
    "start": "3003500",
    "end": "3010020"
  },
  {
    "text": "that you're exponentiating. So if you're computing\nx to the d mod q,",
    "start": "3010020",
    "end": "3019789"
  },
  {
    "text": "the probability of\nan extra reduction, at some point while\ncomputing x to the d mod q,",
    "start": "3019790",
    "end": "3025240"
  },
  {
    "text": "is going to be equal to\nx mod q divided by 2R.",
    "start": "3025240",
    "end": "3031860"
  },
  {
    "start": "3031860",
    "end": "3036890"
  },
  {
    "text": "So if we're going to be\ncomputing x to the mod q, then depending on what\nthe value of x mod q",
    "start": "3036890",
    "end": "3043690"
  },
  {
    "text": "is, whether it's\nbig or small, you're going to have even more or\nless of these extra reductions.",
    "start": "3043690",
    "end": "3049079"
  },
  {
    "text": "And just to show you where\nthis is going to fit in, this is actually going to\nhappen in the decrypt step, because during the decrypt\nstep, the server is going",
    "start": "3049080",
    "end": "3055951"
  },
  {
    "text": "to be computing c to the d. And this says the\nextractor reductions are going to be proportional to\nhow close x, or c in this case,",
    "start": "3055951",
    "end": "3065160"
  },
  {
    "text": "is to the value q. So this is going to\nbe worrisome, right, because the attacker gets\nto choose the input c.",
    "start": "3065160",
    "end": "3072490"
  },
  {
    "text": "And the number of\nextractor reductions is going to be proportional\nto how close the c is to one of the factors, the q.",
    "start": "3072490",
    "end": "3078981"
  },
  {
    "text": "And this is how you're going\nto tell I'm getting close to the q, or I've overshot q. And all of a sudden, there's\nno extractor reductions,",
    "start": "3078981",
    "end": "3085545"
  },
  {
    "text": "it's probably because x mod\nq is very small the x is q plus little epsilon. And it's very small.",
    "start": "3085545",
    "end": "3091720"
  },
  {
    "text": "So that's one part\nof the timing attack we're going to be\nlooking at in a second. ",
    "start": "3091720",
    "end": "3098770"
  },
  {
    "text": "I don't have any proof that\nthis actually true [INAUDIBLE] these extractor\nreductions work like this.",
    "start": "3098770",
    "end": "3104905"
  },
  {
    "text": "Yea, question. AUDIENCE: What happens if you\ndon't do this extra reduction? PROFESSOR: Oh, what happens\nif you don't do this extractor",
    "start": "3104905",
    "end": "3111210"
  },
  {
    "text": "reduction?  You can avoid this\nextra reduction.",
    "start": "3111210",
    "end": "3117850"
  },
  {
    "text": "And then you just have\nto do some extra probably modular reductions later.",
    "start": "3117850",
    "end": "3123410"
  },
  {
    "text": "I think the math just\nworks out nicely this way for the Montgomery form. I think for many of these\nthings it's actually",
    "start": "3123410",
    "end": "3129750"
  },
  {
    "text": "once you look at them as a\ntiming channel [INAUDIBLE] [? think ?] don't\ndo this at all, or maybe you should\ndo some other plan.",
    "start": "3129750",
    "end": "3136004"
  },
  {
    "text": "So you're right, I think you could probably\navoid this extra reduction and probably just do the\nmod q, perhaps at the end.",
    "start": "3136004",
    "end": "3142655"
  },
  {
    "text": "I haven't actually\ntried implementing this. But it seems like it could work. It might be that you just\nhave to do mod q once",
    "start": "3142655",
    "end": "3149390"
  },
  {
    "text": "[? there ?], which you'll\nprobably have to do anyway. So it's not super clear. Maybe it's [INAUDIBLE]\nprobably not q.",
    "start": "3149390",
    "end": "3157770"
  },
  {
    "text": "So in light of the\nfact that [INAUDIBLE]. ",
    "start": "3157770",
    "end": "3164274"
  },
  {
    "text": "Actually, I shouldn't speak\nauthoritatively to this. I haven't tired\nimplementing this. So maybe there's some deep\nreason why this extractor reduction has to happen.",
    "start": "3164274",
    "end": "3170184"
  },
  {
    "text": "I couldn't think of one. All right, questions? ",
    "start": "3170184",
    "end": "3177109"
  },
  {
    "text": "So here's the last piece of\nthe puzzle for how OpenSSL, this library that this\npaper attacks implements",
    "start": "3177110",
    "end": "3186040"
  },
  {
    "text": "multiplication. So this Montgomery trick is\ngreat for avoiding the mod q",
    "start": "3186040",
    "end": "3192630"
  },
  {
    "text": "part during modular\nmultiplication. But then there's a question\nof how do you actually",
    "start": "3192630",
    "end": "3197769"
  },
  {
    "text": "multiply two numbers together. So we're doing lower\nand lower level. So suppose you have\n[? the raw ?] multiplication.",
    "start": "3197770",
    "end": "3205791"
  },
  {
    "text": " So this is not even\nmodular multiplication. You have two numbers, a and b.",
    "start": "3205791",
    "end": "3213475"
  },
  {
    "text": "And both these guys\nare 512 bit numbers.",
    "start": "3213475",
    "end": "3218636"
  },
  {
    "text": "How do you multiply\nthem together when your machine is\nonly a 32 bit machine, like the guys in the paper, or\na 64 bit, but still, same thing?",
    "start": "3218636",
    "end": "3226225"
  },
  {
    "text": "How would you implement\nmultiplication of these guys? ",
    "start": "3226226",
    "end": "3233740"
  },
  {
    "text": "Any suggestions? Well I guess it was a\nstraightforward question, you just represent a and\nb as a sequence of machine",
    "start": "3233740",
    "end": "3241859"
  },
  {
    "text": "[? words. ?] And then you\njust do this quadratic product of these two guys. [INAUDIBLE] see a simple\nexample, instead of thinking",
    "start": "3241860",
    "end": "3248960"
  },
  {
    "text": "of a 512 bit number, let's think\nof these guys as 64 bit numbers and we're on a 32 bit machine.",
    "start": "3248960",
    "end": "3255671"
  },
  {
    "text": "Right. So we're going to have values. The value of a is going\nto be represented by two",
    "start": "3255671",
    "end": "3260794"
  },
  {
    "text": "[? very ?] different things. It's going to be, let's\ncall it, a1 and a0.",
    "start": "3260794",
    "end": "3267550"
  },
  {
    "text": "So a0 is the low bit,\na1 is the high bit. And similarly, we're\ngoing to represent b as two things, b1 b0.",
    "start": "3267550",
    "end": "3276760"
  },
  {
    "text": "So then a naive way\nto represent a b is going to be to multiply\nall these guys out.",
    "start": "3276760",
    "end": "3284309"
  },
  {
    "text": "So it's going to be\na three cell number. The high bit is\ngoing to be a1 b1.",
    "start": "3284310",
    "end": "3292140"
  },
  {
    "text": "The low bit is\ngoing to be a0 b0. And the middle word is going\nto be a1 b0 plus a0 b1.",
    "start": "3292140",
    "end": "3301845"
  },
  {
    "text": "So this is how you do the\nmultiplication, right. Question?",
    "start": "3301845",
    "end": "3306940"
  },
  {
    "text": "AUDIENCE: So I was\ngoing to say are you using [INAUDIBLE] method? PROFESSOR: Yeah, so this\nis like a clever method",
    "start": "3306940",
    "end": "3313059"
  },
  {
    "text": "alternative for doing\nmultiplication, which doesn't involve four steps. Here, you have to do\nfour multiplications.",
    "start": "3313060",
    "end": "3318434"
  },
  {
    "text": "There's this clever\nother method, Karatsuba. Do they teach this in 601\nor something these days? AUDIENCE: 042. PROFESSOR: 042, excellent.",
    "start": "3318435",
    "end": "3324373"
  },
  {
    "text": "Yeah, that's a very nice method. Almost every cryptographic\nlibrary implements this.",
    "start": "3324373",
    "end": "3329440"
  },
  {
    "text": "And for those of\nyou that, I guess, weren't undergrads here, since\nwe have grad students maybe",
    "start": "3329440",
    "end": "3334980"
  },
  {
    "text": "they haven't seen Karatsuba. I'll just write it\nout on the board. It's a clever thing the\nfirst time you see it.",
    "start": "3334980",
    "end": "3340850"
  },
  {
    "text": "And what you can do is basically\ncompute out three values.",
    "start": "3340850",
    "end": "3346310"
  },
  {
    "text": "You're going to\ncompute out a1 b1. You're going to also\ncompute a1 minus b0 times b1",
    "start": "3346310",
    "end": "3359190"
  },
  {
    "text": "minus-- sorry-- a1\nminus a0, b1 minus b0.",
    "start": "3359190",
    "end": "3364950"
  },
  {
    "text": "And a0 b0. And this does three\nmultiplications",
    "start": "3364950",
    "end": "3371125"
  },
  {
    "text": "instead of four. And it turns out\nyou can actually reconstruct this value from\nthese three multiplication",
    "start": "3371125",
    "end": "3378440"
  },
  {
    "text": "results. And the particular\nway to do it is this is going to be the--\nlet me write it out",
    "start": "3378440",
    "end": "3389736"
  },
  {
    "text": "in a different form. So we're going to have 2 to the\n64 times-- sorry-- 2 to the 64",
    "start": "3389736",
    "end": "3401010"
  },
  {
    "text": "plus 2 to the 32\ntimes a1 b1 plus 2",
    "start": "3401010",
    "end": "3412710"
  },
  {
    "text": "to the 32 times minus that\nlittle guy in the middle a1",
    "start": "3412710",
    "end": "3420230"
  },
  {
    "text": "minus a0 b1 minus b0.",
    "start": "3420230",
    "end": "3425640"
  },
  {
    "text": "And finally, we're going to do\n2 to the 32 plus 1 times a0 b0.",
    "start": "3425640",
    "end": "3435019"
  },
  {
    "text": "And it's a little\nmessy, but actually if you work through\nthe details, you'll end up convincing\nyourself hopefully",
    "start": "3435020",
    "end": "3440880"
  },
  {
    "text": "that this value is exactly\nthe same as this value.",
    "start": "3440880",
    "end": "3446285"
  },
  {
    "text": "So it's a clever. But nonetheless, it saves\nyou one multiplication.",
    "start": "3446285",
    "end": "3451470"
  },
  {
    "text": "And the way we\napply this to doing much larger multiplications\nis that you recursively",
    "start": "3451470",
    "end": "3457660"
  },
  {
    "text": "keep going down. So if you have 512\nbit values, you could break it down to\n256 bit multiplication.",
    "start": "3457660",
    "end": "3464790"
  },
  {
    "text": "You do three 256\nbit multiplications. And then each of\nthose you're going to do using the same\nKaratsuba trick recursively.",
    "start": "3464790",
    "end": "3472410"
  },
  {
    "text": "And eventually you'll get\ndown to machine size, which you can just do with\na single machine instruction. [INAUDIBLE]\nThis make sense?",
    "start": "3472410",
    "end": "3482590"
  },
  {
    "text": "So what's the\ntiming attack here? How do these guys exploit\nthis Karatsuba multiplication? Well, it turns out\nthat OpenSSL worries",
    "start": "3482590",
    "end": "3491720"
  },
  {
    "text": "about basically two\nkinds of multiplications that you might need to do. One is a multiplication\nbetween two large numbers",
    "start": "3491720",
    "end": "3498757"
  },
  {
    "text": "that are about the same size. So this happens a\nlot when we're doing this modular exponentiation\nbecause all the values we're",
    "start": "3498757",
    "end": "3505327"
  },
  {
    "text": "going to be multiplying\nare all going to be roughly 512 bits in size. So when we're multiplying by c\nto the y or doing a squaring,",
    "start": "3505327",
    "end": "3513330"
  },
  {
    "text": "we're multiplying two things\nthat are about the same size. And then this Karatsuba\ntrick makes a lot of sense",
    "start": "3513330",
    "end": "3518890"
  },
  {
    "text": "because, instead\nof computing stuff in times squared\nof the input size, Karatsuba is roughly n to the\n1.58, something like that.",
    "start": "3518890",
    "end": "3528740"
  },
  {
    "text": "So it's much faster. But then there's\nthis other situation where OpenSSL might be\nmultiplying two numbers that",
    "start": "3528740",
    "end": "3534930"
  },
  {
    "text": "are very different in\nsize: one that's very big, and one that's very small. And in that case you\ncould use Karatsuba,",
    "start": "3534930",
    "end": "3540900"
  },
  {
    "text": "but then it's going\nto get you slower than doing the naive thing. Suppose you're trying\nto multiply a 512 bit",
    "start": "3540900",
    "end": "3546660"
  },
  {
    "text": "number by a 64 bit\nnumber, you'd rather just do the straightforward\nthing, where you just multiply by each of the\nthings in the 64 bit",
    "start": "3546660",
    "end": "3553050"
  },
  {
    "text": "number plus 2n instead of\nn to the 1.58 something.",
    "start": "3553050",
    "end": "3558290"
  },
  {
    "text": "So as a result, the OpenSSL\nguys tried to be clever, and that's where\noften problems start.",
    "start": "3558290",
    "end": "3565760"
  },
  {
    "text": "They decided that\nthey'll actually switch dynamically between\nthis Karatsuba efficient thing",
    "start": "3565760",
    "end": "3570880"
  },
  {
    "text": "and this sort of grade school\nmethod of multiplication here. And their heuristic\nwas basically",
    "start": "3570880",
    "end": "3577400"
  },
  {
    "text": "if the two things\nyou're multiplying are exactly the same\nnumber of machine words,",
    "start": "3577400",
    "end": "3582483"
  },
  {
    "text": "so they at least\nhave the same number of bits up to 32-bit units,\nthen they'll go to Karatsuba.",
    "start": "3582483",
    "end": "3588109"
  },
  {
    "text": "And if the two things\nthey're multiplying have a different\nnumber or 32 bit units, then they'll do the quadratic\nor straightforward or regular,",
    "start": "3588110",
    "end": "3597660"
  },
  {
    "text": "normal multiplication. And there you can see if\nyour number all of a sudden",
    "start": "3597660",
    "end": "3603880"
  },
  {
    "text": "switches to be a\nlittle bit smaller, then you're going to switch\nfrom the sufficient thing to this other\nmultiplication method.",
    "start": "3603880",
    "end": "3611240"
  },
  {
    "text": "And presumably, the\ncutoff point isn't going to be exactly\nsmooth so you'll be able to tell all\nof a sudden, it's",
    "start": "3611240",
    "end": "3617500"
  },
  {
    "text": "now taking a lot\nlonger to multiply or a lot shorter to\nmultiply than before. And that's what these guys\nexploit in their timing attack",
    "start": "3617500",
    "end": "3626000"
  },
  {
    "text": "again. Does that make sense? What's going on with the\n[INAUDIBLE] All right.",
    "start": "3626000",
    "end": "3632070"
  },
  {
    "text": "So I think I'm now\ndone with telling you about all the weird\nimplementation tricks that people play when\nimplementing RSA in practice.",
    "start": "3632070",
    "end": "3639590"
  },
  {
    "text": "So now let's try to\nput them back together into an entire web\nserver and figure out how do you [? tickle ?]\nall these interesting bits",
    "start": "3639590",
    "end": "3648230"
  },
  {
    "text": "of the implementation from\nthe input network packet. So what happens\nin a web server is",
    "start": "3648230",
    "end": "3654910"
  },
  {
    "text": "that the web server, if\nyou remember from the HTTPS lecture, has a secret key.",
    "start": "3654910",
    "end": "3661890"
  },
  {
    "text": "And it uses the\nsecret key to prove that it's the\ncorrect owner of all that certificate in the\nHTTPS protocol or in TLS.",
    "start": "3661890",
    "end": "3671190"
  },
  {
    "text": "And they way this works is that\nthe clients send some randomly chosen bits, and the\nbits are encrypted",
    "start": "3671190",
    "end": "3679470"
  },
  {
    "text": "using the server's public key. And the server in this TLS\nprotocol decrypts this message. And if the message\nchecks out, it",
    "start": "3679470",
    "end": "3686730"
  },
  {
    "text": "uses those random bits to\nestablish a [? session ?]. But in this case, the message\nisn't going to check out.",
    "start": "3686730",
    "end": "3692246"
  },
  {
    "text": "The message is going\nto be carefully chosen, the padding bits\naren't going to match, and the server is\ngoing to return error",
    "start": "3692246",
    "end": "3697470"
  },
  {
    "text": "as soon as it finishes\nencrypting our message. And that's what we're\ngoing to time here. So the server-- you can think of\nthis is Apache with open SSL--",
    "start": "3697470",
    "end": "3709368"
  },
  {
    "text": "you're going to get a\nmessage from the client, and you can think of\nthis as a ciphertext",
    "start": "3709368",
    "end": "3715940"
  },
  {
    "text": "c, or a hypothetical\nciphertext, that the client might have produced. And the first thing we're going\nto do with a ciphertext c,",
    "start": "3715940",
    "end": "3723339"
  },
  {
    "text": "we want to decrypt it\nusing roughly this formula. And if you remember\nthe first optimization",
    "start": "3723340",
    "end": "3728819"
  },
  {
    "text": "we're going to apply is the\nChinese Remainder Theorem. So the first thing\nwe're going to do",
    "start": "3728820",
    "end": "3734306"
  },
  {
    "text": "is basically split our\npipeline in two parts. We're going to do one thing\nmod p another thing mod q",
    "start": "3734306",
    "end": "3740430"
  },
  {
    "text": "and then recombine the\nresults at the end of the day. So the first thing\nwe're going to do is, we're actually\ngoing to take c",
    "start": "3740430",
    "end": "3746070"
  },
  {
    "text": "and we're going\nto compute, let's call this c0, which is going\nto be equal to c mod q.",
    "start": "3746070",
    "end": "3755480"
  },
  {
    "text": "And we're also going to have\na different value, let's call it c1, which is\ngoing to be c mod p.",
    "start": "3755480",
    "end": "3764730"
  },
  {
    "text": "And then we're going to\ndo the same thing to each of these values to basically\ncompute c to the d mod p",
    "start": "3764730",
    "end": "3771905"
  },
  {
    "text": "and c to the d mod q. And here we're going to\nbasically initially we're",
    "start": "3771905",
    "end": "3778070"
  },
  {
    "text": "going to [? starch. ?]\nAfter CRT, we're going to switch into\nMontgomery representation because that's going to make\nour multiplies very fast.",
    "start": "3778070",
    "end": "3786040"
  },
  {
    "text": "So the next thing\nSSL is going to do to your number,\nit's actually going to compute all the\n[INAUDIBLE] at c0 prime,",
    "start": "3786040",
    "end": "3792900"
  },
  {
    "text": "which is going to\nbe c0 times R mod q.",
    "start": "3792900",
    "end": "3798740"
  },
  {
    "text": "And the same thing\ndown here, I'm not going to write\nout the pipeline because that'll look the same. And then, now that we've\nswitched into Montgomery form,",
    "start": "3798740",
    "end": "3807520"
  },
  {
    "text": "we can finally do\nour multiplications. And here's where we're going\nto use the sliding window",
    "start": "3807520",
    "end": "3814190"
  },
  {
    "text": "technique. So once we have c\nprime, we can actually try to compute this prime\nexponentiate it to 2d mod q.",
    "start": "3814190",
    "end": "3827460"
  },
  {
    "text": "And here, as we're computing\nthis value to the d, we're going to be\nusing sliding windows.",
    "start": "3827460",
    "end": "3833990"
  },
  {
    "text": "So here, we're going\nto do sliding windows",
    "start": "3833990",
    "end": "3839510"
  },
  {
    "text": "for the bits in this d exponent. And also we're going\nto do Karatsuba",
    "start": "3839510",
    "end": "3848450"
  },
  {
    "text": "or regular multiplication\ndepending on exactly what the size of our operands are.",
    "start": "3848450",
    "end": "3855540"
  },
  {
    "text": "So if it turns out that the\nthing we're multiplying, c0 prime and maybe that\npreviously squared result,",
    "start": "3855540",
    "end": "3865070"
  },
  {
    "text": "are the same size, we're\ngoing to do Karatsuba. If c0 prime is tiny\nbut some previous thing",
    "start": "3865070",
    "end": "3871230"
  },
  {
    "text": "we're multiplying it to is\nbig , then we're going to do quadratic multiplication,\nnormal multiplication.",
    "start": "3871230",
    "end": "3876610"
  },
  {
    "text": "There's sliding\nwindows coming in here, here we also have this Karatsuba\nversus normal multiplying.",
    "start": "3876610",
    "end": "3885770"
  },
  {
    "text": "And also in this step, the\nextra reductions come in. Because at every multiply,\nthe extra reductions",
    "start": "3885770",
    "end": "3894420"
  },
  {
    "text": "are going to be proportional\nto the thing we're exponentiating mod q.",
    "start": "3894420",
    "end": "3900950"
  },
  {
    "text": "[INAUDIBLE] just plug in\nthe formula over here, the probability\nextra reductions is going to be proportional to\nthis value of c0 prime mod",
    "start": "3900950",
    "end": "3911170"
  },
  {
    "text": "q divided by 2R. ",
    "start": "3911170",
    "end": "3919200"
  },
  {
    "text": "So this is where the\nreally timing sensitive bit is going to come in. And there are actually\ntwo effects here.",
    "start": "3919200",
    "end": "3924384"
  },
  {
    "text": "There's this Karatsuba\nversus normal choice. And then there's the\nnumber of extra reductions",
    "start": "3924384",
    "end": "3929720"
  },
  {
    "text": "you're going to be making. So we'll see how we\nexploit this in a second, but now that you get\nthis result for mod q,",
    "start": "3929720",
    "end": "3936800"
  },
  {
    "text": "you're going to get a\nsimilar result mod p, you can finally recombine\nthese guys from the top",
    "start": "3936800",
    "end": "3943780"
  },
  {
    "text": "and the bottom and use CRT. And what you get out\nfrom CRT is actually--",
    "start": "3943780",
    "end": "3949869"
  },
  {
    "text": "sorry I guess we need a first\nconvert it back down into non",
    "start": "3949870",
    "end": "3955110"
  },
  {
    "text": "Montgomery form. So we're going to\nget first, we're",
    "start": "3955110",
    "end": "3960380"
  },
  {
    "text": "going to get c0 prime to\nthe d divided by R mod q.",
    "start": "3960380",
    "end": "3969619"
  },
  {
    "text": "And this thing, because c0\nprime was c0 times R mod q,",
    "start": "3969620",
    "end": "3975160"
  },
  {
    "text": "if we do this then we're going\nto get back out our value of c to the d mod q.",
    "start": "3975160",
    "end": "3983110"
  },
  {
    "text": "And we get c to\nthe d here, we're going to get to c to the d\nmod p on the bottom version",
    "start": "3983110",
    "end": "3988290"
  },
  {
    "text": "of this pipeline. And we can use CRT to get the\nvalue of c to the d mod m.",
    "start": "3988290",
    "end": "3995220"
  },
  {
    "text": "Sorry for the small\ntype here, or font size. But roughly it's the same\nthing we're expecting here.",
    "start": "3995220",
    "end": "4000680"
  },
  {
    "text": "We can finally get our result.\nAnd we get our message, m. So the server takes\nan incoming packet",
    "start": "4000680",
    "end": "4006420"
  },
  {
    "text": "that it gets, runs it\nthrough this whole pipeline, does two parts of\nthis pipeline, ends up",
    "start": "4006420",
    "end": "4013578"
  },
  {
    "text": "with a decrypted message m\nthat's equal c to the d mod m. And then it's going to check\nthe padding of this message.",
    "start": "4013578",
    "end": "4020682"
  },
  {
    "text": "And in this particular\nattack, because we're going to carefully\nconstruct this value c, the padding is going to\nactually not match up.",
    "start": "4020682",
    "end": "4027810"
  },
  {
    "text": "We're going to choose\nthe value c according to some other\nheuristics that aren't encrypting a real message\nwith the correct padding.",
    "start": "4027810",
    "end": "4034754"
  },
  {
    "text": "So the padding is going to be\na mismatch, and the server's going to need it to record\nan error back to the client. [? And it pulls ?]\nthe connection.",
    "start": "4034754",
    "end": "4042080"
  },
  {
    "text": "And that's the time\nthat we're going to measure to figure out how\nlong this whole pipeline took.",
    "start": "4042080",
    "end": "4048230"
  },
  {
    "text": "Makes sense? Questions about this\npipeline and putting all the optimizations together?",
    "start": "4048230",
    "end": "4054396"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ",
    "start": "4054396",
    "end": "4061445"
  },
  {
    "text": "PROFESSOR: Yeah,\nyou're probably right. Yes, c1 to the d, c0 to the d. Yeah, this is c0.",
    "start": "4061445",
    "end": "4066620"
  },
  {
    "text": "Yeah, correct. AUDIENCE: When you\ndivide by r [INAUDIBLE],",
    "start": "4066620",
    "end": "4071722"
  },
  {
    "text": "isn't there a\n[INAUDIBLE] on how many q's you have to have to get\nthe [? little bit ?] to be",
    "start": "4071722",
    "end": "4080812"
  },
  {
    "text": "0? [INAUDIBLE]. PROFESSOR: Yeah, so there\nmight be extra reductions in this final phase as well.",
    "start": "4080812",
    "end": "4087048"
  },
  {
    "text": "You're right. So potentially, we have do\nthis divide by R correctly. So we probably have to\ndo exactly the same thing",
    "start": "4087049",
    "end": "4093300"
  },
  {
    "text": "as we saw for the\nMontgomery reductions here. When we do this divide\nby R to convert it back.",
    "start": "4093300",
    "end": "4099649"
  },
  {
    "text": "So it's not clear exactly\nhow many qs we should add. We should figure out how many\nqs to add, add that many,",
    "start": "4099649",
    "end": "4105250"
  },
  {
    "text": "kill the low zeros, and\nthen do mod q again, maybe an extra reduction. You're absolutely\nright, this is exactly",
    "start": "4105250",
    "end": "4111180"
  },
  {
    "text": "the same kind of\ndivide by R mod q as we do for every Montgomery\nmultiplication step.",
    "start": "4111180",
    "end": "4118229"
  },
  {
    "text": "Make sense? Any other questions?",
    "start": "4118229",
    "end": "4123568"
  },
  {
    "text": "All right. So how do you exploit this? How does an attacker\nactually figure out what the secret\nkey of the server",
    "start": "4123569",
    "end": "4129710"
  },
  {
    "text": "is by measuring the time\nof this entire pipeline? So these guys have a\nplan that basically",
    "start": "4129710",
    "end": "4138159"
  },
  {
    "text": "involves guessing one bit of\nthe private key at a time.",
    "start": "4138160",
    "end": "4143810"
  },
  {
    "text": "And what they mean actually\nby guessing the private key is that you might think the private\nkey is this encryption exponent",
    "start": "4143810",
    "end": "4150960"
  },
  {
    "text": "d, because actually\nyou know e, you know n, that's the public key. The only think you\ndon't know is d.",
    "start": "4150960",
    "end": "4156849"
  },
  {
    "text": "But in fact, in this attack\nthey don't go for the exponent d directly, that's a little\nbit harder to guess. Instead, what\nthey're going to go",
    "start": "4156849",
    "end": "4163185"
  },
  {
    "text": "for is the value\nq or the value p, doesn't really matter which one. Once you guess what the\nvalue p or q is, then",
    "start": "4163185",
    "end": "4171229"
  },
  {
    "text": "you can give an n, you can\nfactor in the p times q. Then if you know p times\nq, you can actually--",
    "start": "4171229",
    "end": "4177470"
  },
  {
    "text": "sorry-- if you know\nthe values of p and q, you can compute that phi\nfunction we saw before. That's going to allow you to get\nthe value d from the value e.",
    "start": "4177470",
    "end": "4185979"
  },
  {
    "text": "So this factorization of the\nvalue m is hugely important, it should be secret for\nRSA to remain secure.",
    "start": "4185979",
    "end": "4191984"
  },
  {
    "text": "So these guys are\nactually going to go and try to guess\nwhat the value of q is by timing this pipeline.",
    "start": "4191985",
    "end": "4199570"
  },
  {
    "text": "All right. So how do these\nguys actually do it? Well, they construct\ncarefully chosen inputs, c,",
    "start": "4199570",
    "end": "4210280"
  },
  {
    "text": "into this pipeline\nand-- I guess I keep saying they keep measuring\nthe time for this guy.",
    "start": "4210280",
    "end": "4216800"
  },
  {
    "text": "But the particular,\nwell, there's",
    "start": "4216800",
    "end": "4222130"
  },
  {
    "text": "two parts of the\nattack, you have to bootstrap it a little bit to\nguess the first couple of bits. And then once you have\nthe first couple of bits,",
    "start": "4222130",
    "end": "4228390"
  },
  {
    "text": "you can I guess the next bit. So let me not say\nexactly how they guess the first couple of bits\nbecause it's actually much more",
    "start": "4228390",
    "end": "4234997"
  },
  {
    "text": "interesting to see how\nthey guess the next bit. And then we'll come\nback if we have time to look at how they\nguess the first couple of bits",
    "start": "4234997",
    "end": "4240621"
  },
  {
    "text": "[? at this ?] in the paper. But basically, suppose you\nhave a guess g about what",
    "start": "4240621",
    "end": "4245820"
  },
  {
    "text": "the bits are of this value q. So you know that q has some\nbits, g0, g1, g2, et cetera.",
    "start": "4245820",
    "end": "4256820"
  },
  {
    "text": "And actually, I guess\nthese are not even gs, these are real q bits, so\nlet me write it as that.",
    "start": "4256820",
    "end": "4264990"
  },
  {
    "text": "So you know tat q bit\n0 q bit 1, q bit 2,",
    "start": "4264990",
    "end": "4270310"
  },
  {
    "text": "these are the highest bits of q. And then you're trying to\nguess lower and lower bits.",
    "start": "4270310",
    "end": "4275455"
  },
  {
    "text": "So suppose you know the\nvalue of q up to bit j. And from that point on, your\nguess is actually all 0.",
    "start": "4275455",
    "end": "4282750"
  },
  {
    "text": "You have no idea what\nthe other bits are. So these guys are going\nto try to get this guess",
    "start": "4282750",
    "end": "4291900"
  },
  {
    "text": "g into this place\nin the pipeline. Because this is where\nthere are two tiny effects:",
    "start": "4291900",
    "end": "4298280"
  },
  {
    "text": "this choice of Karatsuba\nversus normal multiplication. And this choice of, or\nthis a different number",
    "start": "4298280",
    "end": "4304230"
  },
  {
    "text": "of extra reductions depending\non the value c0 prime. Sp they're going to actually\ntry to get two different guess",
    "start": "4304230",
    "end": "4311020"
  },
  {
    "text": "values into that\nplace in the pipeline. One that looks like this,\nand one that they call",
    "start": "4311020",
    "end": "4318120"
  },
  {
    "text": "g high, which is all the\nsame high bits, q2 qj.",
    "start": "4318120",
    "end": "4325110"
  },
  {
    "text": "And for the next bit,\nwhich they don't know, [? you ?] guess g\nis going to have 0, g high is going to have a bit\n1 here and all zeros later on.",
    "start": "4325110",
    "end": "4334906"
  },
  {
    "text": "So how does it help these guys\nfigure out what's going on? So there are really two\nways you can think of it.",
    "start": "4334906",
    "end": "4342120"
  },
  {
    "text": "Suppose that we get this guess\ng to be the value of c0 prime.",
    "start": "4342120",
    "end": "4348930"
  },
  {
    "text": "We can think of g and g high\nbeing the c0 prime value",
    "start": "4348930",
    "end": "4354350"
  },
  {
    "text": "on that left board over there. It's actually fairly\nstraightforward to do this because c0 prime\nis pretty deterministically",
    "start": "4354350",
    "end": "4362460"
  },
  {
    "text": "computed from the\ninput ciphertext c0. You just multiply it\nby R. So, in order for them to get\nsome value to here,",
    "start": "4362460",
    "end": "4369239"
  },
  {
    "text": "as a guess, they just\nneed to take their guess and first divide it by R, so\ndivide it by 2 to the 512 mod",
    "start": "4369240",
    "end": "4377340"
  },
  {
    "text": "something. And then, they're going\nto inject it back. And the server's going\nto multiply it by R,",
    "start": "4377340",
    "end": "4384260"
  },
  {
    "text": "and then off you go. Make sense? All right.",
    "start": "4384260",
    "end": "4389490"
  },
  {
    "text": "So suppose that we manage to get\nour particular chosen integer value into that c0\nyou're prime spot.",
    "start": "4389490",
    "end": "4396650"
  },
  {
    "text": "So what's going to be\nthe time to compute c0 prime to the d mod q?",
    "start": "4396650",
    "end": "4402522"
  },
  {
    "text": "So there are two possible\noptions here where q falls in this picture.",
    "start": "4402522",
    "end": "4408179"
  },
  {
    "text": "So it might be that q is\nbetween these two values.",
    "start": "4408180",
    "end": "4413920"
  },
  {
    "text": "Because the next bit of q is 0. So this value is going\nto be less than q,",
    "start": "4413920",
    "end": "4419170"
  },
  {
    "text": "but this guy's going\nto be greater than q. So this happens if the\nnext bit of q0 or it",
    "start": "4419170",
    "end": "4424969"
  },
  {
    "text": "might be that q lies\nabove both of these values if the next bit of q is 1.",
    "start": "4424970",
    "end": "4431880"
  },
  {
    "text": "So now we can tell,\nOK, what's going to be the timing of\ndecrypting these two values,",
    "start": "4431880",
    "end": "4438280"
  },
  {
    "text": "if q lies in between them, or\nif q lies above both of them.",
    "start": "4438280",
    "end": "4444224"
  },
  {
    "text": "Let's look at the\nsituation where q lies above both of them. Well in that case,\nactually everything",
    "start": "4444225",
    "end": "4451760"
  },
  {
    "text": "is pretty much the same. Right? Because both of these\nvalues are smaller than q, then the value of\nthese things mod q",
    "start": "4451760",
    "end": "4458057"
  },
  {
    "text": "is going to be roughly the same. They're going to be a\nlittle bit different because this extra bit,\nbut more or less they're",
    "start": "4458057",
    "end": "4464540"
  },
  {
    "text": "the same magnitude. And the number of\nextractor reductions is also probably not going to\nbe hugely different because it's",
    "start": "4464540",
    "end": "4471380"
  },
  {
    "text": "proportional to the\nvalue of this guy mod q. And for both these guys, they're\nboth a little bit smaller",
    "start": "4471380",
    "end": "4477690"
  },
  {
    "text": "than q, so they're\nall about the same. Neither of them is going to\nexceed q and all of a sudden",
    "start": "4477690",
    "end": "4483080"
  },
  {
    "text": "have [? many or fewer ?]\nextra reductions. So if q is greater than\nboth of these guesses",
    "start": "4483080",
    "end": "4489290"
  },
  {
    "text": "then Karatsuba versus normal\nis going to stay the same. The server is going to do\nthe same thing basically for both g and g high in terms\nof Karatsuba versus normal.",
    "start": "4489290",
    "end": "4496824"
  },
  {
    "text": "And the server's going to\ndo about the same number of extra reductions for\nboth these guys as well. So If you see that the server's\ntaking the same amount of time",
    "start": "4496825",
    "end": "4504080"
  },
  {
    "text": "to respond to these\nguesses, then you should probably guess that, oh,\nq probably has the bit 1 here.",
    "start": "4504080",
    "end": "4510579"
  },
  {
    "text": "On the other hand, if\nq lies in the middle, then there are two\npossible things that could trigger a\nchange in the timing.",
    "start": "4510580",
    "end": "4517370"
  },
  {
    "text": "One possibility is\nthat because g high is just a little\nbit larger than q,",
    "start": "4517370",
    "end": "4522712"
  },
  {
    "text": "then the number of\nextra reductions is going to be proportional\nto this guy mod q, which is very small because\nc0 prime is q plus just",
    "start": "4522712",
    "end": "4531040"
  },
  {
    "text": "a little bit in\nthese extra bits. So the number of\nextra reductions is going to [? flaunt it ?].",
    "start": "4531040",
    "end": "4536650"
  },
  {
    "text": "And all of a sudden,\nit will be faster. Another possible\nthing that can happen is that maybe the\nserver will decide, oh,",
    "start": "4536650",
    "end": "4542623"
  },
  {
    "text": "now it's time to do normal\nmultiplication instead of Karatsuba. Maybe for this value,\nall these, c to the 0",
    "start": "4542623",
    "end": "4551910"
  },
  {
    "text": "prime was the same\nnumber of bits as q if it turns out that\ng high is above q,",
    "start": "4551910",
    "end": "4558890"
  },
  {
    "text": "then g high mod q is potentially\ngoing to have fewer bits. And if this crosses the\n[INAUDIBLE] boundary,",
    "start": "4558890",
    "end": "4564930"
  },
  {
    "text": "then the server's going to\ndo normal multiplication all of a sudden. So that's going to be\nin the other direction.",
    "start": "4564930",
    "end": "4570590"
  },
  {
    "text": "So if you cross over, then\nnormal multiplication kicks in, and things get a lot slower\nbecause normal multiplication",
    "start": "4570590",
    "end": "4576885"
  },
  {
    "text": "is quadratic instead of\nnicer, faster Karatsuba. Question. AUDIENCE: [INAUDIBLE]",
    "start": "4576885",
    "end": "4582066"
  },
  {
    "text": " PROFESSOR: Yeah, because the\nnumber of extra reductions is proportional to from above\nthere to c0 prime mod q.",
    "start": "4582066",
    "end": "4591520"
  },
  {
    "text": "So if c0 prime, which is this\nvalue, is just a little over q.",
    "start": "4591520",
    "end": "4596880"
  },
  {
    "text": "Then, this is tiny, as opposed\nto this guy who's basically the same as q, or all the\nhigh bits are the same as q,",
    "start": "4596880",
    "end": "4603495"
  },
  {
    "text": "and then it's big. So then it'll be the difference\nthat you can try to measure. So this is one interesting\nthing, actually",
    "start": "4603495",
    "end": "4609730"
  },
  {
    "text": "a couple interesting\nthings, these effects actually work in different\ndirections, right. So if you hit a 32 bit\nboundary and Karatsuba",
    "start": "4609730",
    "end": "4615870"
  },
  {
    "text": "versus normal switches,\nthen all of a sudden it takes much longer to\ndecrypt this message.",
    "start": "4615870",
    "end": "4620929"
  },
  {
    "text": "On the other hand, if it's\nnot a 32 bit boundary, maybe this effect will\ntell you what's going on.",
    "start": "4620930",
    "end": "4627424"
  },
  {
    "text": "So you actually have to\nwatch for different effects. If you're not guessing a bit\nthat's a multiple of 32 bits,",
    "start": "4627424",
    "end": "4633400"
  },
  {
    "text": "then you should\nprobably expect the time to drop because of\nextra reductions. On the other hand,\nif you're trying",
    "start": "4633400",
    "end": "4639620"
  },
  {
    "text": "to guess a bit that's\na multiple of 32, then maybe you should be expecting\nfor it to jump a lot",
    "start": "4639620",
    "end": "4645099"
  },
  {
    "text": "or maybe drop if it's\n[INAUDIBLE] normal. So I guess what these\nguys look at in the paper, this actually\ndoesn't really matter",
    "start": "4645100",
    "end": "4651450"
  },
  {
    "text": "whether there's a jump up\nor a jump down in time. You should just expect if q\nis, if the next bit of q is 1,",
    "start": "4651450",
    "end": "4658570"
  },
  {
    "text": "you should expect\nthese things to take almost the same amount of time. And if the next bit\nof q is 0, then you",
    "start": "4658570",
    "end": "4664607"
  },
  {
    "text": "should expect these guys to\nhave a noticeable difference even if it's big or small, even\nif it's positive or negative.",
    "start": "4664607",
    "end": "4671739"
  },
  {
    "text": "So actually, they measure this. And it turns out to\nactually work pretty well. They have to do actually\ntwo interesting tricks",
    "start": "4671740",
    "end": "4677789"
  },
  {
    "text": "to make this work out. If you remember the timing\ndifference was tiny, it's an order of 1\nto 2 microseconds.",
    "start": "4677790",
    "end": "4685110"
  },
  {
    "text": "So it's going to be hard to\nmeasure this over a network, over an ethernet\nswitch for example. What they do is they actually\ndo two kinds of measurements,",
    "start": "4685110",
    "end": "4693460"
  },
  {
    "text": "two kinds of averaging. So for each guess\nthat they send, they actually send\nit several times.",
    "start": "4693460",
    "end": "4698870"
  },
  {
    "text": "In the paper, they\nsaid they send it like 7 times or something. So what kind of\nnoise do you think",
    "start": "4698870",
    "end": "4704429"
  },
  {
    "text": "this helps them with\n[? if they ?] just resend the same guess over and over?",
    "start": "4704430",
    "end": "4709440"
  },
  {
    "text": "Yeah. AUDIENCE: What's up\nwith the [INAUDIBLE]? PROFESSOR: Yeah, so\nif the network keeps",
    "start": "4709440",
    "end": "4714780"
  },
  {
    "text": "adding different\nthings, you just try the same thing many times. The thing in the\nserver should be taking exactly the same\namount of time every time",
    "start": "4714780",
    "end": "4721101"
  },
  {
    "text": "and just average out\nthe network noise. In the paper, they say they take\nthe median value-- I actually don't understand why\nthey take the median,",
    "start": "4721101",
    "end": "4727030"
  },
  {
    "text": "I think they should be taking\nthe min of the real thing that's going on--\nbut anyway, this was the average of the network. But then they do this\nother weird thing,",
    "start": "4727030",
    "end": "4734630"
  },
  {
    "text": "which is that when\nthey're sending a guess, they don't just send\nthe same guess 7 times,",
    "start": "4734630",
    "end": "4740280"
  },
  {
    "text": "they actually send a\nneighborhood of guesses. And each value in\nthe neighborhood gets sent 7 times itself.",
    "start": "4740280",
    "end": "4746250"
  },
  {
    "text": "So they actually send g 7 times. Then they send g\nplus 1 also 7 times.",
    "start": "4746250",
    "end": "4753700"
  },
  {
    "text": "Then they send g plus 2 also\n7 times, et cetera, up to g plus 400 in the paper.",
    "start": "4753700",
    "end": "4760660"
  },
  {
    "text": "Why do they do this\nkind of averaging as well over different g value\ninstead of just sending g",
    "start": "4760660",
    "end": "4769120"
  },
  {
    "text": "7 times 400 times. Because it seems\nmore straightforward. Yeah? AUDIENCE: [INAUDIBLE]",
    "start": "4769120",
    "end": "4775000"
  },
  {
    "text": " PROFESSOR: Yeah, that's\nactually what's going on.",
    "start": "4775000",
    "end": "4780380"
  },
  {
    "text": "We're actually trying to measure\nexactly how long this piece of computation will take. But then there's\nlots of other stuff.",
    "start": "4780380",
    "end": "4786650"
  },
  {
    "text": "For example, this other\npipeline that's at the bottom is doing all the stuff mod p. I mean it's also going to\ntake different amount of time",
    "start": "4786650",
    "end": "4792630"
  },
  {
    "text": "depending on what\nexactly the input is. So the cool thing is\nthat if you perturb the value of all your\nguess g by adding 1, 2, 3,",
    "start": "4792630",
    "end": "4801340"
  },
  {
    "text": "whatever, it's just\n[INAUDIBLE] the little bits. So the timing attack we\njust looked at just now, isn't going to change\nbecause that depended",
    "start": "4801340",
    "end": "4807570"
  },
  {
    "text": "on this middle bit flipping. But everything that's\nhappening on the bottom side",
    "start": "4807570",
    "end": "4813114"
  },
  {
    "text": "of the pipeline mod p\nis going to be totally randomized by this\nbecause when they do it mod p then\nadding an extra bit",
    "start": "4813115",
    "end": "4819570"
  },
  {
    "text": "could shift things\naround quite a bit mod p. Then you're going to,\nit will average out",
    "start": "4819570",
    "end": "4825920"
  },
  {
    "text": "other kinds of\ncomputational noise that's deterministic\nfor a particular value but it's not related to this\npart of the computation we're",
    "start": "4825920",
    "end": "4833730"
  },
  {
    "text": "trying to go after. Make sense? AUDIENCE: How do they\ndo that when they try to guess the lower bits? PROFESSOR: So actually they use\nsome other mathematical trick",
    "start": "4833730",
    "end": "4841650"
  },
  {
    "text": "to only actually bother guessing\nthe top half of the bits of q. It turns out if you know the\ntop half of the bits of q",
    "start": "4841650",
    "end": "4847160"
  },
  {
    "text": "there's some math you can\nrely on to factor the numbers, and then you're in good shape. So you can always\n[INAUDIBLE] little bit.",
    "start": "4847160",
    "end": "4853790"
  },
  {
    "text": "Basically not worry about it. Make sense? Yeah, question. AUDIENCE: [INAUDIBLE] ",
    "start": "4853790",
    "end": "4861510"
  },
  {
    "text": "PROFESSOR: Well, you're going to\nconstruct this value c0-- well you want the c0 prime-- you're\ngoing to construct a value",
    "start": "4861510",
    "end": "4868250"
  },
  {
    "text": "c by basically taking your c0\nprime and multiplying it times R inverse mod n.",
    "start": "4868250",
    "end": "4874990"
  },
  {
    "text": " And then when the\nserver takes this value,",
    "start": "4874990",
    "end": "4880429"
  },
  {
    "text": "it's going to push\nit through here. So it's going to compute c0. It's going to be c mod\nq, so that value is going",
    "start": "4880430",
    "end": "4886386"
  },
  {
    "text": "to be c0 prime R inverse mod q. Then you multiply it by R, so\nyou get rid of the R inverse.",
    "start": "4886386",
    "end": "4892550"
  },
  {
    "text": "And then you end up with a\nguess exactly in this position. So the cool thing is\nbasically all manipulations",
    "start": "4892550",
    "end": "4897820"
  },
  {
    "text": "leading up to here are\njust multiplying by this R. And you know what R is going be,\nit's going to be 2 to the 512.",
    "start": "4897820",
    "end": "4903360"
  },
  {
    "text": "I'm going to be really\nstraightforward. Make sense? Another question?",
    "start": "4903360",
    "end": "4908382"
  },
  {
    "text": "AUDIENCE: Could we just\ncancel out timing [INAUDIBLE]? ",
    "start": "4908382",
    "end": "4916115"
  },
  {
    "text": "PROFESSOR: Well, if you do\np, you'd be in business. Yeah, so that's the thing.",
    "start": "4916115",
    "end": "4921220"
  },
  {
    "text": "Yeah, you don't know\nwhat p is, but you just want to randomize it out.",
    "start": "4921220",
    "end": "4926375"
  },
  {
    "text": "Any questions? All right. [INAUDIBLE] but\nthanks for sticking around. So we'll start talking about\nother kinds of problems",
    "start": "4926375",
    "end": "4933300"
  },
  {
    "text": "next week.",
    "start": "4933300",
    "end": "4935150"
  }
]