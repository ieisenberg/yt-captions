[
  {
    "start": "0",
    "end": "350000"
  },
  {
    "text": "-- valuable experience.\nOK, today we're going to start",
    "start": "7000",
    "end": "12431"
  },
  {
    "text": "talking about a particular class\nof algorithms called greedy",
    "start": "12431",
    "end": "18477"
  },
  {
    "text": "algorithms.\nBut we're going to do it in the context of graphs.\nSo, I want to review a little",
    "start": "18477",
    "end": "27597"
  },
  {
    "text": "bit about graphs,\nwhich mostly you can find in the textbook in appendix B.\nAnd so, if you haven't reviewed",
    "start": "27597",
    "end": "39798"
  },
  {
    "text": "in appendix B recently,\nplease sit down and review",
    "start": "39798",
    "end": "45801"
  },
  {
    "text": "appendix B.\nIt will pay off especially during our take-home quiz.\nSo, just reminder,",
    "start": "45801",
    "end": "55725"
  },
  {
    "text": "a digraph, what's a digraph?\nWhat's that short for?",
    "start": "55725",
    "end": "61850"
  },
  {
    "text": "Directed graph,\nOK? Directed graph,\nG equals (V,E),",
    "start": "61850",
    "end": "67731"
  },
  {
    "text": "OK, has a set,\nV, of vertices.",
    "start": "67731",
    "end": "73000"
  },
  {
    "text": "And, I always get people\ntelling me that I have one vertice.\nThe singular is not vertice;",
    "start": "73000",
    "end": "80507"
  },
  {
    "text": "it is vertex,\nOK? The plural is vertices.\nThe singular is vertex.",
    "start": "80507",
    "end": "85920"
  },
  {
    "text": "It's one of those weird English\nwords. It's probably originally like\nFrench or something,",
    "start": "85920",
    "end": "93428"
  },
  {
    "text": "right?\nI don't know. OK, anyway, and we have a set,\nE, which is a subset of V cross",
    "start": "93428",
    "end": "107566"
  },
  {
    "text": "V of edges.\nSo that's a digraph.",
    "start": "107566",
    "end": "112830"
  },
  {
    "text": "And undirected graph,\nE contains unordered pairs.",
    "start": "112830",
    "end": "122000"
  },
  {
    "text": "OK, and, sorry?\nIt's Latin, OK, so it's probably pretty old,\nthen, in English.",
    "start": "132000",
    "end": "141137"
  },
  {
    "text": "I guess the vertex would be a\nlittle bit of a giveaway that",
    "start": "141137",
    "end": "148202"
  },
  {
    "text": "maybe it wasn't French.\nIt started to be used in 1570,",
    "start": "148203",
    "end": "154659"
  },
  {
    "text": "OK.\nOK, good, OK, so the number of edges is,\nwhether it's directed or",
    "start": "154659",
    "end": "172058"
  },
  {
    "text": "undirected, is O of what?\nV^2, good.",
    "start": "172058",
    "end": "182000"
  },
  {
    "text": "OK, and one of the conventions\nthat will have when we're dealing, once we get into\ngraphs, we deal a lot with sets.",
    "start": "182000",
    "end": "189331"
  },
  {
    "text": "We generally drop the vertical\nbar notation within O's just because it's applied.\nIt just makes it messier.",
    "start": "189331",
    "end": "196139"
  },
  {
    "text": "So, once again,\nanother abuse of notation. It really should be order the\nsize of V^2, but it just messes",
    "start": "196139",
    "end": "202750"
  },
  {
    "text": "up, I mean, it's just more stuff\nto write down. And, you're multiplying these\nthings, and all those vertical",
    "start": "202751",
    "end": "209625"
  },
  {
    "text": "bars.\nSince they don't even have a sense to the vertical bar,\nit gets messy.",
    "start": "209625",
    "end": "216508"
  },
  {
    "text": "So, we just drop the vertical\nbars there when it's in asymptotic notation.\nSo, E is order V^2 when it's a",
    "start": "216508",
    "end": "224770"
  },
  {
    "text": "set of pairs,\nbecause if it's a set of pairs, it's at most n choose two,\nwhich is where it's at most n^2",
    "start": "224770",
    "end": "232952"
  },
  {
    "text": "over 2, here it could be,\nat most, sorry, V^2 over 2, here it's at most\nV^2.",
    "start": "232952",
    "end": "240000"
  },
  {
    "text": "And then, another property that\nsometimes comes up is if the G",
    "start": "240000",
    "end": "247563"
  },
  {
    "text": "is connected,\nwe have another bound, implies that the size of E is\nat least the size of V minus",
    "start": "247563",
    "end": "258971"
  },
  {
    "text": "one.\nOK, so if it's connected, meaning, what does it mean to\nhave a graph that's connected?",
    "start": "258971",
    "end": "271000"
  },
  {
    "text": "Yeah, there's a path from any\nvertex to any other vertex in",
    "start": "271000",
    "end": "277089"
  },
  {
    "text": "the graph.\nThat's what it means to be connected.\nSo if that's the case,",
    "start": "277089",
    "end": "284229"
  },
  {
    "text": "that a number of edges is at\nleast the number of vertices",
    "start": "284230",
    "end": "290110"
  },
  {
    "text": "minus one, OK?\nAnd so, what that says, so one of the things we'll get\ninto, a fact that I just wanted",
    "start": "290110",
    "end": "300399"
  },
  {
    "text": "to remind you,\nis that in that case, if I look at log E,\nOK, log of the number of edges,",
    "start": "300399",
    "end": "309324"
  },
  {
    "text": "that is O of log V.\nAnd by this, is omega of log V.\nSo, it's equal to theta of log",
    "start": "309324",
    "end": "318337"
  },
  {
    "text": "V.\nOK, so basically the number of, in the case of a connected\ngraph, the number of edges,",
    "start": "318338",
    "end": "325991"
  },
  {
    "text": "and the number of vertices are\npolynomially related. So, their logs are comparable.\nOK, so that's helpful just to",
    "start": "325991",
    "end": "336557"
  },
  {
    "text": "know because sometimes I just\nget questions later on where",
    "start": "336558",
    "end": "341588"
  },
  {
    "text": "people will say,\noh, you showed it was log E but you didn't show it was log V.\nAnd I could point out that it's",
    "start": "341588",
    "end": "351029"
  },
  {
    "text": "the same thing.\nOK, so there's various ways of representing graphs in\ncomputers, and I'm just going to",
    "start": "351029",
    "end": "359764"
  },
  {
    "text": "cover a couple of the important\nones. There's actually more.\nWe'll see some more.",
    "start": "359764",
    "end": "371137"
  },
  {
    "text": "So, the simplest one is what's\ncalled an adjacency matrix.",
    "start": "371137",
    "end": "380823"
  },
  {
    "text": "An adjacency matrix of the\ngraph, G, equals (V,E),",
    "start": "380823",
    "end": "390000"
  },
  {
    "text": "where, for simplicity,\nI'll let V be the set of",
    "start": "390000",
    "end": "400360"
  },
  {
    "text": "integers from one up to n,\nOK, is the n by n matrix A",
    "start": "400360",
    "end": "412072"
  },
  {
    "text": "given by the ij-th at the entry\nis simply one if the edge,",
    "start": "412072",
    "end": "424909"
  },
  {
    "text": "ij, is in the edge set and zero\nif ij is not in the edge set.",
    "start": "424909",
    "end": "440000"
  },
  {
    "text": "OK, so it's simply the matrix\nwhere you say, the ij entry is one if it's in\nthe matrix.",
    "start": "440000",
    "end": "445759"
  },
  {
    "text": "So, this is,\nin some sense, giving you the predicate for,\nis there an edge from i to j?",
    "start": "445759",
    "end": "452000"
  },
  {
    "text": "OK, remember,\npredicate is Boolean formula that is either zero or one,\nand in this case,",
    "start": "452000",
    "end": "459703"
  },
  {
    "text": "you're saying it's one if there\nis an edge from i to j and zero",
    "start": "459703",
    "end": "465323"
  },
  {
    "text": "otherwise.\nOK, sometimes you have edge weighted graphs,\nand then sometimes what people",
    "start": "465323",
    "end": "472845"
  },
  {
    "text": "will do is replace this by edge\nweights. OK, it will be the weight of\nthe edge from i to j.",
    "start": "472845",
    "end": "482000"
  },
  {
    "text": "So, let's just do an example of\nthat just to make sure that our",
    "start": "482000",
    "end": "492982"
  },
  {
    "text": "intuition corresponds to our\nmathematical definitions.",
    "start": "492982",
    "end": "502371"
  },
  {
    "text": "So, here's an example graph.\nLet's say that's our graph.",
    "start": "502371",
    "end": "513000"
  },
  {
    "text": "So let's just draw the\nadjacency the matrix. OK, so what this says:\nis there's an edge from one to",
    "start": "513000",
    "end": "522000"
  },
  {
    "text": "one?\nAnd the answer is no. Is there an edge from one to\ntwo?",
    "start": "522000",
    "end": "527399"
  },
  {
    "text": "Yes.\nIs there an edge from one to three here?\nYep. Is there an edge for one to\nfour?",
    "start": "527399",
    "end": "534884"
  },
  {
    "text": "No.\nIs there an edge from two until one?\nNo.",
    "start": "534884",
    "end": "540410"
  },
  {
    "text": "Two to two?\nNo. Two to three?\nYes. Two to four?\nNo.",
    "start": "540410",
    "end": "546709"
  },
  {
    "text": "No edges going out of three.\nEdge from four to three,",
    "start": "546709",
    "end": "553829"
  },
  {
    "text": "and that's it.\nThat's the adjacency matrix for",
    "start": "553829",
    "end": "559990"
  },
  {
    "text": "this particular graph,\nOK? And so, I can represent a graph\nas this adjacency matrix.",
    "start": "559991",
    "end": "573000"
  },
  {
    "text": "OK, when I represent it in this\nway, how much storage do I need?",
    "start": "573000",
    "end": "583327"
  },
  {
    "text": "OK, n^2 or V^2 because the size\nis the same thing for V^2",
    "start": "583327",
    "end": "592508"
  },
  {
    "text": "storage, OK, and that's what we\ncall a dense representation.",
    "start": "592508",
    "end": "603000"
  },
  {
    "text": "OK, it works well when the\ngraph is dense. So, the graph is dense if the\nnumber of edges is close to all",
    "start": "603000",
    "end": "611181"
  },
  {
    "text": "of the edges possible.\nOK, then this is a good representation.\nBut for many types of graphs,",
    "start": "611181",
    "end": "618391"
  },
  {
    "text": "the number of edges is much\nless than the possible number of edges, in which case we say the\ngraph is sparse.",
    "start": "618391",
    "end": "626977"
  },
  {
    "text": "Can somebody give me an example\nof a sparse graph?",
    "start": "626977",
    "end": "632000"
  },
  {
    "text": "A class of graphs:\nso, I want a class of graphs that as n grows,\nthe number of edges in the",
    "start": "632000",
    "end": "638733"
  },
  {
    "text": "graph doesn't grow as the\nsquare, but grows rather as something much smaller.\nA linked list,",
    "start": "638733",
    "end": "645543"
  },
  {
    "text": "so, a chain,\nOK, if you look at it from a graph theoretically,\nis a perfectly good example:",
    "start": "645543",
    "end": "652277"
  },
  {
    "text": "only n edges in the chain for a\nchain of length n. So therefore,\nthe number of edges would be",
    "start": "652277",
    "end": "659163"
  },
  {
    "text": "order V.\nAnd in particular, you'd only have one edge per\nrow here.",
    "start": "659163",
    "end": "667018"
  },
  {
    "text": "What other graphs are sparse?\nYeah? Good, a planar graph,\na graph that can be drawn in a",
    "start": "667018",
    "end": "676320"
  },
  {
    "text": "plane turns out that if it has V\nvertices has, and V is at least three,\nthen it has,",
    "start": "676320",
    "end": "685184"
  },
  {
    "text": "at most, three V minus six\nedges. So, it turns out that's order V\nedges again.",
    "start": "685184",
    "end": "694393"
  },
  {
    "text": "What's another example of a\ncommon graph? Yeah, binary tree,\nor even actually any tree,",
    "start": "694393",
    "end": "702975"
  },
  {
    "text": "you know, what's called a free\ntree if you read the appendix,",
    "start": "702975",
    "end": "709105"
  },
  {
    "text": "OK, a tree that just is a\nconnected graph that has no",
    "start": "709105",
    "end": "714417"
  },
  {
    "text": "cycles, OK, is another example.\nWhat's an example of a graph",
    "start": "714417",
    "end": "720445"
  },
  {
    "text": "that's dense?\nA complete graph, OK: it's all ones,\nOK, or if you have edge",
    "start": "720445",
    "end": "727582"
  },
  {
    "text": "weights, it would be a\ncompletely filled in matrix. OK, good.\nSo, this is good for dense",
    "start": "727582",
    "end": "734298"
  },
  {
    "text": "representation.\nBut sometimes you want to have a sparse representation so we\ndon't have to spend V^2 space to",
    "start": "734298",
    "end": "742674"
  },
  {
    "text": "deal with all of the,\nwhere most of it's going to be zeroes.\nOK, it's sort of like,",
    "start": "742674",
    "end": "748995"
  },
  {
    "text": "if we know why it's zero,\nwhy bother representing it as zero?\nSo, one such representation is",
    "start": "748995",
    "end": "760625"
  },
  {
    "start": "760000",
    "end": "940000"
  },
  {
    "text": "an adjacency list\nrepresentation.",
    "start": "760625",
    "end": "766625"
  },
  {
    "text": "Actually, adjacency list of a\ngiven vertex is the list,",
    "start": "766625",
    "end": "776750"
  },
  {
    "text": "which we denote by Adj of V,\nof vertices adjacent to V.",
    "start": "776750",
    "end": "788000"
  },
  {
    "text": "OK, just in terms by their\nterminology, vertices are adjacent, but edges are incident\non vertices.",
    "start": "788000",
    "end": "797028"
  },
  {
    "text": "OK, so the incidence is a\nrelation between a vertex and an",
    "start": "797028",
    "end": "802446"
  },
  {
    "text": "edge.\nAn adjacency is a relation between two vertices.\nOK, that's just the language.",
    "start": "802446",
    "end": "811000"
  },
  {
    "text": "Why they use to different\nterms, I don't know,",
    "start": "811000",
    "end": "816221"
  },
  {
    "text": "but that's what they do.\nSo, in the graph, for example,\nthe adjacency list for vertex",
    "start": "816221",
    "end": "825737"
  },
  {
    "text": "one is just the list or the set\nof two three because one has",
    "start": "825737",
    "end": "832583"
  },
  {
    "text": "going out of one are edges to\ntwo and three. The adjacency list for two is\njust three, four,",
    "start": "832583",
    "end": "842911"
  },
  {
    "text": "three.\nIt's the empty set, and for four,\nit is three.",
    "start": "842911",
    "end": "850152"
  },
  {
    "text": "OK, so that's the\nrepresentation. Now, if we want to figure out\nhow much storage is required for",
    "start": "850153",
    "end": "861045"
  },
  {
    "text": "this representation,\nOK, we need to understand how",
    "start": "861045",
    "end": "866782"
  },
  {
    "text": "long the adjacency list is.\nSo, what is the length of an",
    "start": "866783",
    "end": "875777"
  },
  {
    "text": "adjacency list of a vertex,\nV? What name do we give to that?\nIt's the degree.",
    "start": "875777",
    "end": "888402"
  },
  {
    "text": "So, in an undirected graph,\nwe call it the degree of the",
    "start": "888402",
    "end": "897785"
  },
  {
    "text": "vertex.\nThis is undirected. OK, about here,\nOK.",
    "start": "897786",
    "end": "907000"
  },
  {
    "text": "So that's an undirected case.\nIn the directed case,",
    "start": "907000",
    "end": "912122"
  },
  {
    "text": "OK, actually I guess the way we\nshould do this is say this.",
    "start": "912122",
    "end": "918065"
  },
  {
    "text": "If the degree,\nwe call it the out degree for a digraph.\nOK, so in a digraph,",
    "start": "918065",
    "end": "925545"
  },
  {
    "text": "we have an out degree and an in\ndegree for each vertex.",
    "start": "925545",
    "end": "932000"
  },
  {
    "text": "So here, the in degree is\nthree. Here, the out degree is two,\nOK?",
    "start": "932000",
    "end": "941316"
  },
  {
    "start": "940000",
    "end": "1413000"
  },
  {
    "text": "So, one of the important lemma\nthat comes up is what's called",
    "start": "941316",
    "end": "950331"
  },
  {
    "text": "the handshaking lemma.\nOK, it's one of these",
    "start": "950331",
    "end": "956792"
  },
  {
    "text": "mathematical lemmas.",
    "start": "956792",
    "end": "961000"
  },
  {
    "text": "And so, it comes from a story.\nGo to a dinner party,",
    "start": "971000",
    "end": "976100"
  },
  {
    "text": "and everybody at the dinner\nparty shakes other people's",
    "start": "976100",
    "end": "981500"
  },
  {
    "text": "hands.\nSome people may not shake anybody's hand.\nSome people may shake several",
    "start": "981500",
    "end": "989000"
  },
  {
    "text": "people's hands.\nNobody shakes hands with themselves.\nAnd at some point during the",
    "start": "989000",
    "end": "997341"
  },
  {
    "text": "dinner party,\nthe host goes around and counts up how many, the sum,\nof the number of hands that",
    "start": "997341",
    "end": "1005033"
  },
  {
    "text": "each person has shaken.\nOK, so he says, how many did you shake?\nHow many did you shake?",
    "start": "1005033",
    "end": "1012056"
  },
  {
    "text": "How many did you shake?\nHe adds them up, OK, and that number is\nguaranteed to be even.",
    "start": "1012056",
    "end": "1020000"
  },
  {
    "text": "OK, that's the handshaking\nlemma. Or, stated a little bit more\nprecisely, if I take for any",
    "start": "1020000",
    "end": "1028772"
  },
  {
    "text": "graph the degree of the vertex,\nand sum them all up,",
    "start": "1028773",
    "end": "1033857"
  },
  {
    "text": "that's how many hands everybody\nshook, OK, that's actually equal",
    "start": "1033858",
    "end": "1040137"
  },
  {
    "text": "to always twice the number of\nedges. So, why is that going to be\ntrue?",
    "start": "1040138",
    "end": "1046818"
  },
  {
    "text": "Why is that going to be twice\nthe number of edges?",
    "start": "1046818",
    "end": "1053000"
  },
  {
    "text": "Yeah?\nYeah. Every time you put in an edge,\nyou add one to the degree of",
    "start": "1053000",
    "end": "1059369"
  },
  {
    "text": "each person on each end.\nSo, it's just two different ways of counting up the same\nnumber of edges.",
    "start": "1059369",
    "end": "1068267"
  },
  {
    "text": "OK, I can go around,\nand if you imagine that, that every time I count the\ndegree of the node,",
    "start": "1068267",
    "end": "1076695"
  },
  {
    "text": "I put a mark on every edge.\nThen, when I'm done, every edge has two marks on it,\none for each end.",
    "start": "1076696",
    "end": "1087000"
  },
  {
    "text": "OK: a pretty simple theorem.\nSo, what that says is that for",
    "start": "1087000",
    "end": "1097545"
  },
  {
    "text": "undirected graphs,\nthat implies that the adjacency",
    "start": "1097545",
    "end": "1106454"
  },
  {
    "text": "list representation,\nuses how much storage?",
    "start": "1106454",
    "end": "1115000"
  },
  {
    "text": "OK, at most,\n2E, so order E because that's not all.\nYeah, so you have to have the",
    "start": "1115000",
    "end": "1122959"
  },
  {
    "text": "number of vertices plus order\nthe number of edges, OK, whether it's directed or\nundirected because I may have a",
    "start": "1122959",
    "end": "1133979"
  },
  {
    "text": "graph, say it has a whole bunch\nof vertices and no edges,",
    "start": "1133979",
    "end": "1139693"
  },
  {
    "text": "that's still going to cost me\norder V, OK?",
    "start": "1139693",
    "end": "1145000"
  },
  {
    "text": "So, it uses theta of V plus E\nstorage. And, it's basically the same\nthing asymptotically.",
    "start": "1145000",
    "end": "1155007"
  },
  {
    "text": "In fact, it's easier to see in\nsome sense for digraphs because",
    "start": "1155007",
    "end": "1162105"
  },
  {
    "text": "for digraphs,\nwhat I do is I just add up the",
    "start": "1162105",
    "end": "1167109"
  },
  {
    "text": "out degrees, and that equal to\nE, OK, if I add up the out",
    "start": "1167109",
    "end": "1173625"
  },
  {
    "text": "degrees as equally.\nIn fact, this is kind of like",
    "start": "1173625",
    "end": "1179123"
  },
  {
    "text": "it amortized analysis,\nif you will, a book keeping analysis,\nthat if I'm adding up the total",
    "start": "1179123",
    "end": "1185640"
  },
  {
    "text": "number of edges,\none way of doing it is accounting for a vertex by\nvertex.",
    "start": "1185640",
    "end": "1190838"
  },
  {
    "text": "OK, so for each vertex,\nI basically can take each degree, and basically each\nvertex, look at the degree,",
    "start": "1190838",
    "end": "1198234"
  },
  {
    "text": "and that allocating of account\nper edge, and then ending up with twice the number of edges,\nthat's exactly accounting type",
    "start": "1198234",
    "end": "1206946"
  },
  {
    "text": "of analysis that we might do for\namortized analysis.",
    "start": "1206947",
    "end": "1212000"
  },
  {
    "text": "OK, so we'll see that.\nSo, this is a sparse",
    "start": "1212000",
    "end": "1217014"
  },
  {
    "text": "representation,\nand it's often better than an",
    "start": "1217014",
    "end": "1222268"
  },
  {
    "text": "adjacency matrix.\nFor example, you can imagine if the World\nWide Web were done with an",
    "start": "1222268",
    "end": "1232179"
  },
  {
    "text": "adjacency matrix as opposed to,\nessentially,",
    "start": "1232179",
    "end": "1237313"
  },
  {
    "text": "with an adjacency list type of\nrepresentation.",
    "start": "1237313",
    "end": "1244000"
  },
  {
    "text": "Every link on the World Wide\nWeb, I had to say, here are the ones that I'm\nconnected to,",
    "start": "1244000",
    "end": "1250092"
  },
  {
    "text": "and here are all the ones I'm\nnot connected to. OK, that list of things you're\nnot connected to for a given",
    "start": "1250092",
    "end": "1257546"
  },
  {
    "text": "page would be pretty\ndramatically, show you that there is an\nadvantage to sparse",
    "start": "1257546",
    "end": "1263064"
  },
  {
    "text": "representation.\nOn the other hand, one of the nice things about an\nadjacency matrix representation",
    "start": "1263064",
    "end": "1273450"
  },
  {
    "text": "is that each edge can be\nrepresented with a single bit,",
    "start": "1273450",
    "end": "1279153"
  },
  {
    "text": "whereas typical when I'm\nrepresenting things with an",
    "start": "1279154",
    "end": "1284542"
  },
  {
    "text": "adjacency list representation,\nhow many bits am I going to",
    "start": "1284542",
    "end": "1290563"
  },
  {
    "text": "need to represent each\nadjacency? You'll need order log of V to\nbe able to name each different",
    "start": "1290563",
    "end": "1299379"
  },
  {
    "text": "vertex.\nOK, the log of the number is the number of bits that I need.\nSo, there are places where this",
    "start": "1299379",
    "end": "1306579"
  },
  {
    "text": "is actually a far more efficient\nrepresentation. In particular,\nif you have a very dense graph,",
    "start": "1306579",
    "end": "1313408"
  },
  {
    "text": "OK, this may be a better way of\nrepresenting it. OK, the other thing I want you\nto get, and we're going to see",
    "start": "1313408",
    "end": "1321350"
  },
  {
    "text": "more of this in particular next\nweek, is that a matrix and a graph, there are two ways of\nlooking at the same thing.",
    "start": "1321350",
    "end": "1331000"
  },
  {
    "text": "OK, and in fact,\nthere's a lot of graph theory that when you do things like\nmultiply the adjacency matrix,",
    "start": "1331000",
    "end": "1337993"
  },
  {
    "text": "OK, and so forth.\nSo, there's a lot of commonality between graphs and\nmatrices, a lot of mathematics",
    "start": "1337993",
    "end": "1344580"
  },
  {
    "text": "that if it applies for one,\nit applies to the other. Do you have a question,\nor just holding your finger in",
    "start": "1344580",
    "end": "1351641"
  },
  {
    "text": "the air?\nOK, good. OK, so that's all just review.\nNow I want to get onto today's",
    "start": "1351641",
    "end": "1357874"
  },
  {
    "text": "lecture.\nOK, so any questions about graphs?\nSo, this is a good time to review appendix B.\nthere are a lot of great",
    "start": "1357874",
    "end": "1365573"
  },
  {
    "text": "properties in there,\nand in particular, there is a theorem that we're\ngoing to cover today that we're",
    "start": "1365573",
    "end": "1372496"
  },
  {
    "text": "going to talk about today,\nwhich is properties of trees. Trees are very special kinds of\ngraphs, so I really want you to",
    "start": "1372496",
    "end": "1380761"
  },
  {
    "text": "go and look to see what the\nproperties are. There is, I think,\nsomething like six different",
    "start": "1380761",
    "end": "1388469"
  },
  {
    "text": "definitions of trees that are\nall equivalent, OK, and so, I think a very good\nidea to go through and read",
    "start": "1388469",
    "end": "1396163"
  },
  {
    "text": "through that theorem.\nWe're not going to prove it in class, but really,\nprovides a very good basis for",
    "start": "1396163",
    "end": "1403630"
  },
  {
    "text": "the thinking that we're going to\nbe doing today. And we'll see more of that in\nthe future.",
    "start": "1403630",
    "end": "1410192"
  },
  {
    "text": "OK, so today,\nwe're going to talk about minimum spanning trees.\nOK, this is one of the world's",
    "start": "1410192",
    "end": "1418434"
  },
  {
    "start": "1413000",
    "end": "1713000"
  },
  {
    "text": "most important algorithms.\nOK, it is important in distributed systems.\nIt's one of the first things",
    "start": "1418434",
    "end": "1426223"
  },
  {
    "text": "that almost any distributed\nsystem tries to find is a minimum spanning tree of the\nnodes that happened to be alive",
    "start": "1426223",
    "end": "1435230"
  },
  {
    "text": "at any point,\nOK? And one of the people who\ndeveloped an algorithm for this,",
    "start": "1435230",
    "end": "1441153"
  },
  {
    "text": "we'll talk about this a little\nbit later, OK, it was the basis of the billing\nsystem for AT&T for many years",
    "start": "1441153",
    "end": "1449673"
  },
  {
    "text": "while it was a monopoly.\nOK, so very important kind of",
    "start": "1449673",
    "end": "1456918"
  },
  {
    "text": "thing.\nIt's got a huge number of applications.\nSo the problem is the",
    "start": "1456918",
    "end": "1465702"
  },
  {
    "text": "following.\nYou have a connected undirected",
    "start": "1465702",
    "end": "1471243"
  },
  {
    "text": "graph,\nG equals (V,E), with an edge weight function,\nw, which maps the edges into",
    "start": "1471243",
    "end": "1482804"
  },
  {
    "text": "weights that are real numbers.\nAnd for today's lecture,",
    "start": "1482804",
    "end": "1490157"
  },
  {
    "text": "we're going to make an\nimportant assumption,",
    "start": "1490157",
    "end": "1496012"
  },
  {
    "text": "OK, for simplicity.\nThe book does not make this",
    "start": "1496012",
    "end": "1502276"
  },
  {
    "text": "assumption.\nAnd so, I encourage you to look",
    "start": "1502276",
    "end": "1508844"
  },
  {
    "text": "at the alternative presentation\nor, because what they do in the",
    "start": "1508844",
    "end": "1516533"
  },
  {
    "text": "book is much more general,\nbut for simplicity and",
    "start": "1516534",
    "end": "1522488"
  },
  {
    "text": "intuition, I'm going to make\nthis a little bit easier.",
    "start": "1522488",
    "end": "1529062"
  },
  {
    "text": "We're going to assume that all\nedge weights are distinct.",
    "start": "1529062",
    "end": "1537000"
  },
  {
    "text": "OK, all edge weights are\ndistinct. So what does that mean?\nWhat does that mean that this",
    "start": "1537000",
    "end": "1542940"
  },
  {
    "text": "function, w, what property does\nthe function, w, have if all edge weights are\ndistinct?",
    "start": "1542940",
    "end": "1548811"
  },
  {
    "text": "Who remembers their discreet\nmath? It's injective.\nOK, it's one to one. OK, it's not one to one and\nonto necessarily.",
    "start": "1548811",
    "end": "1556638"
  },
  {
    "text": "In fact, it would be kind of\nhard to do that because that's a pretty big set.\nOK, but it's one to one.",
    "start": "1556639",
    "end": "1565408"
  },
  {
    "text": "It's injective.\nOK, so that's what we're going to assume for simplicity.\nOK, and the book,",
    "start": "1565408",
    "end": "1574137"
  },
  {
    "text": "they don't assume that.\nIt just means that the way you",
    "start": "1574137",
    "end": "1579454"
  },
  {
    "text": "have to state things is just a\nlittle more precise.",
    "start": "1579454",
    "end": "1584471"
  },
  {
    "text": "It has to be more technically\nprecise. So, that's the input.\nThe output is--",
    "start": "1584471",
    "end": "1593000"
  },
  {
    "text": "The output is a spanning tree,\nT, and by spanning tree,",
    "start": "1593000",
    "end": "1604686"
  },
  {
    "text": "we mean it connects all the\nvertices.",
    "start": "1604686",
    "end": "1612477"
  },
  {
    "text": "OK, and it's got to have\nminimum weight.",
    "start": "1612477",
    "end": "1622000"
  },
  {
    "text": "OK, so we can write the weight\nof the tree is going to be,",
    "start": "1622000",
    "end": "1628192"
  },
  {
    "text": "by that, we meet the sum over\nall edges that are in the tree",
    "start": "1628192",
    "end": "1634601"
  },
  {
    "text": "of the weight of the individual\nedges. OK, so here I'(V,E) done a\nlittle bit of abusive notation,",
    "start": "1634601",
    "end": "1644813"
  },
  {
    "text": "which is that what I should be\nwriting is w of the edge (u,v)",
    "start": "1644813",
    "end": "1651330"
  },
  {
    "text": "because this is a mapping from\nedges, which would give me a",
    "start": "1651331",
    "end": "1657632"
  },
  {
    "text": "double parentheses.\nAnd, you know, as you know,\nI love to abuse notation.",
    "start": "1657632",
    "end": "1665266"
  },
  {
    "text": "So, I'm going to drop that\nextra parentheses, because we understand that it's\nreally the weight of the edge,",
    "start": "1665266",
    "end": "1674051"
  },
  {
    "text": "OK, not the weight of the\nordered pair. So, that's just a little\nnotational convenience.",
    "start": "1674051",
    "end": "1682000"
  },
  {
    "text": "OK, so one of the things,\nwhen we do the take-home exam, notational convenience can make\nthe difference between having a",
    "start": "1682000",
    "end": "1689370"
  },
  {
    "text": "horrible time writing up a\nproblem, and an easy time. So, it's worth thinking about\nwhat kinds of notation you'll",
    "start": "1689370",
    "end": "1696299"
  },
  {
    "text": "use in writing up solutions to\nproblems, and so forth. OK, and just in general,\na technical communication,",
    "start": "1696299",
    "end": "1702787"
  },
  {
    "text": "you adopt good notation people\nunderstand you. You adopt a poor notation:\nnobody pays attention to what",
    "start": "1702787",
    "end": "1709086"
  },
  {
    "text": "you're doing because they don't\nunderstand what you're saying. OK, so let's do an example.",
    "start": "1709086",
    "end": "1718000"
  },
  {
    "start": "1713000",
    "end": "2273000"
  },
  {
    "text": "OK, so here's a graph.\nI think for this,",
    "start": "1725000",
    "end": "1732428"
  },
  {
    "text": "somebody asked once if I was\ninspired by biochemistry or",
    "start": "1732428",
    "end": "1742903"
  },
  {
    "text": "something, OK,\nbut I wasn't.",
    "start": "1742904",
    "end": "1749000"
  },
  {
    "text": "I was just writing these things\ndown, OK? So, here's a graph.\nAnd let's give us some edge",
    "start": "1749000",
    "end": "1755142"
  },
  {
    "text": "weights.",
    "start": "1755142",
    "end": "1756000"
  },
  {
    "text": "OK, so there are some edge\nweights. And now, what we want is we\nwant to find a tree.",
    "start": "1771000",
    "end": "1779668"
  },
  {
    "text": "So a connected acyclic graph\nsuch that every vertex is part",
    "start": "1779668",
    "end": "1785876"
  },
  {
    "text": "of the tree.\nBut it's got to have the minimum weight possible.\nOK, so can somebody suggest to",
    "start": "1785876",
    "end": "1795508"
  },
  {
    "text": "me some edges that have to be in\nthis minimum spanning tree?",
    "start": "1795508",
    "end": "1803000"
  },
  {
    "text": "Yeah, so nine,\ngood. Nine has to be in there\nbecause, why?",
    "start": "1803000",
    "end": "1809273"
  },
  {
    "text": "It's the only one connecting it\nto this vertex,",
    "start": "1809273",
    "end": "1814519"
  },
  {
    "text": "OK?\nAnd likewise, 15 has to be in there.\nSo those both have to be in.",
    "start": "1814520",
    "end": "1822049"
  },
  {
    "text": "What other edges have to be in?\nWhich one? 14 has to be it.\nWhy does 14 have to be in?",
    "start": "1822049",
    "end": "1833000"
  },
  {
    "text": "Well, one of 14 and three has\nto be in there.",
    "start": "1833000",
    "end": "1840662"
  },
  {
    "text": "I want the minimum weight.\nThe one that has the overall",
    "start": "1840662",
    "end": "1850067"
  },
  {
    "text": "smallest weight.\nSo, can somebody argue to me",
    "start": "1850067",
    "end": "1857730"
  },
  {
    "text": "that three has to be in there?\nYeah?",
    "start": "1857730",
    "end": "1864448"
  },
  {
    "text": "That's the minimum of two,\nwhich means that if I had a, if you add something you said\nwas a minimum spanning tree that",
    "start": "1864448",
    "end": "1874764"
  },
  {
    "text": "didn't include three,\nright, and so therefore it had to include 14,\nthen I could just delete this",
    "start": "1874764",
    "end": "1883196"
  },
  {
    "text": "edge, 14, and put in edge three.\nAnd, I have something of lower",
    "start": "1883196",
    "end": "1888757"
  },
  {
    "text": "weight, right?\nSo, three has to be in there.",
    "start": "1888757",
    "end": "1894080"
  },
  {
    "text": "What other edges have to be in\nthere? Do a little puzzle logic.\nSix and five have to be in",
    "start": "1894081",
    "end": "1903325"
  },
  {
    "text": "there.\nWhy do they have to be in there?",
    "start": "1903325",
    "end": "1908000"
  },
  {
    "text": "Yeah, well, I mean,\nit could be connected through this or something.\nIt doesn't necessarily have to",
    "start": "1922000",
    "end": "1928399"
  },
  {
    "text": "go this way.\nSix definitely has to be in there for the same reason that\nthree had to be,",
    "start": "1928400",
    "end": "1934066"
  },
  {
    "text": "right?\nBecause we got two choices to connect up this guy.\nAnd so, if everything were",
    "start": "1934066",
    "end": "1939466"
  },
  {
    "text": "connected but it weren't,\n12, I mean, and 12 was in there.\nI could always, then, say, well,\nlet's connect them up this way",
    "start": "1939466",
    "end": "1947266"
  },
  {
    "text": "instead.\nOK, so definitely that's in there.\nI still don't have everything",
    "start": "1947266",
    "end": "1955358"
  },
  {
    "text": "connected up.",
    "start": "1955358",
    "end": "1957000"
  },
  {
    "text": "What else has to be in there\nfor minimum spanning tree?",
    "start": "1970000",
    "end": "1983428"
  },
  {
    "text": "Seven, five,\nand eight, why seven,",
    "start": "1983428",
    "end": "1991634"
  },
  {
    "text": "five, and eight?\nOK, so can we argue those one",
    "start": "1991634",
    "end": "2002825"
  },
  {
    "text": "at a time?\nWhy does five have to be in",
    "start": "2002825",
    "end": "2012026"
  },
  {
    "text": "there?\nYeah? OK, so we have four connected\ncomponents because we have this",
    "start": "2012026",
    "end": "2021518"
  },
  {
    "text": "one, this one,\nwe actually have, yeah, this one here,\nand this one, good.\nWe need at least three edges to",
    "start": "2021518",
    "end": "2029048"
  },
  {
    "text": "connect them because each edge\nis going to reduce the connected components by one.\nOK, so we need three edges,",
    "start": "2029048",
    "end": "2037105"
  },
  {
    "text": "and those are the three\ncheapest ones. And they work.\nThat works, right?",
    "start": "2037105",
    "end": "2044334"
  },
  {
    "text": "Any other edges are going to be\nbigger, so that works.",
    "start": "2044334",
    "end": "2051209"
  },
  {
    "text": "Good.\nOK, and so, now do we have a spanning tree?\nEverything is,",
    "start": "2051209",
    "end": "2059121"
  },
  {
    "text": "we have one big connected graph\nhere, right?",
    "start": "2059121",
    "end": "2064698"
  },
  {
    "text": "Is that what I got?\nHey, that's the same as what I",
    "start": "2064698",
    "end": "2071054"
  },
  {
    "text": "got.\nLife is predictable. OK, so, so everybody had the\nidea of what a minimum spanning",
    "start": "2071054",
    "end": "2081487"
  },
  {
    "text": "tree is, then,\nout of this, OK, what's going on there?\nSo, let's first of all make",
    "start": "2081487",
    "end": "2089975"
  },
  {
    "text": "some observations about this\npuzzle. And what I want to do is remind\nyou about the optimal",
    "start": "2089975",
    "end": "2099322"
  },
  {
    "text": "substructure property because it\nturns out minimum spanning tree",
    "start": "2099322",
    "end": "2106090"
  },
  {
    "text": "has a great optimal substructure\nproperty.",
    "start": "2106090",
    "end": "2112000"
  },
  {
    "text": "OK, so the setup is going to\nbe, we're going to have some",
    "start": "2112000",
    "end": "2117989"
  },
  {
    "text": "minimum spanning tree.\nLet's call it T. And, I'm going to show that\nwith the other edges in the",
    "start": "2117989",
    "end": "2127828"
  },
  {
    "text": "graph, are not going to be\nshown. OK, so here's a graph.",
    "start": "2127828",
    "end": "2137000"
  },
  {
    "text": "OK, so here's a graph.\nIt looks like the one I have my piece of paper here.\nOK, so the idea is,",
    "start": "2154000",
    "end": "2161834"
  },
  {
    "text": "this is some minimum spanning\ntree. Now, we want to look at a\nproperty of optimal",
    "start": "2161834",
    "end": "2169367"
  },
  {
    "text": "substructure.\nAnd the way I'm going to get that, is, I'm going to remove\nsome edge, (u,v),",
    "start": "2169367",
    "end": "2177768"
  },
  {
    "text": "move an arbitrary edge,\n(u,v), in the minimum spanning",
    "start": "2177769",
    "end": "2182887"
  },
  {
    "text": "tree.\nSo, let's call this u and this V.\nAnd so, we're removing this",
    "start": "2182887",
    "end": "2189068"
  },
  {
    "text": "edge.\nOK, so when I remove an edge in a tree, what happens to the\ntree?",
    "start": "2189068",
    "end": "2196599"
  },
  {
    "text": "What's left?\nI have two trees left, OK?\nI have two trees left.",
    "start": "2196599",
    "end": "2201844"
  },
  {
    "text": "Now, proving that,\nthat's basically one of the properties in that appendix,\nand the properties of trees",
    "start": "2201844",
    "end": "2210733"
  },
  {
    "text": "that I want you to read,\nOK, because you can actually prove that kind of thing rather\nthan it just being obvious,",
    "start": "2210733",
    "end": "2220511"
  },
  {
    "text": "which is, OK?\nOK, so we remove that.",
    "start": "2220511",
    "end": "2225950"
  },
  {
    "text": "Then, T is partitioned into two\nsubtrees.",
    "start": "2225950",
    "end": "2231314"
  },
  {
    "text": "And, we'll call them T_1 and\nT_2. So, here's one subtree,\nand here's another subtree.",
    "start": "2231314",
    "end": "2242310"
  },
  {
    "text": "We'(V,E) partitioned it.\nNo matter what edge I picked,",
    "start": "2242310",
    "end": "2249417"
  },
  {
    "text": "there would be two subtrees\nthat it's partitioned into.",
    "start": "2249417",
    "end": "2258000"
  },
  {
    "text": "Even if the sub tree is a\ntrivial subtree, for example,\nit just has a single node in it",
    "start": "2258000",
    "end": "2263821"
  },
  {
    "text": "and no edges.",
    "start": "2263821",
    "end": "2265000"
  },
  {
    "start": "2273000",
    "end": "2883000"
  },
  {
    "text": "So, the theorem that we'll\nprove demonstrates a property of",
    "start": "2278000",
    "end": "2291970"
  },
  {
    "text": "optimal substructure.\nT_1 is a minimum spanning tree",
    "start": "2291970",
    "end": "2304255"
  },
  {
    "text": "for the graph,\nG_1, E_1,",
    "start": "2304255",
    "end": "2311000"
  },
  {
    "text": "a subgraph of G induced by the\nvertices in T_1.",
    "start": "2311000",
    "end": "2323612"
  },
  {
    "text": "OK, that is,\nV_1 is just the vertices in T_1",
    "start": "2323612",
    "end": "2335403"
  },
  {
    "text": "is what it means to be induced.\nOK, so V_1 is the vertices in",
    "start": "2335403",
    "end": "2349171"
  },
  {
    "text": "T_1.\nSo, in this picture, I didn't label it.\nThis is T_1.",
    "start": "2349171",
    "end": "2356938"
  },
  {
    "text": "This is T_2.\nIn this picture, these are the vertices of T_1.\nSo, that's V_1,",
    "start": "2356938",
    "end": "2367438"
  },
  {
    "text": "OK?\nAnd, E_1 is the set of pairs of vertices, x and y,\nthat are the edges that are in",
    "start": "2367438",
    "end": "2379232"
  },
  {
    "text": "E_1 such that both x and y\nbelong to V_1.",
    "start": "2379232",
    "end": "2387000"
  },
  {
    "text": "OK, so I haven't shown the\nedges of G here. But basically,\nif an edge went from here to",
    "start": "2387000",
    "end": "2392971"
  },
  {
    "text": "here, that would be in the E_1.\nIf it went from here to here, it would not.\nAnd if it went from here to",
    "start": "2392971",
    "end": "2400080"
  },
  {
    "text": "here, it would not.\nOK, so the vertices, the subgraph induced by the\nvertices of T_1 are just those",
    "start": "2400080",
    "end": "2410683"
  },
  {
    "text": "that connect up things in T_1,\nand similarly for T_2.",
    "start": "2410684",
    "end": "2417000"
  },
  {
    "text": "So, the theorem says that if I\nlook at just the edges within",
    "start": "2427000",
    "end": "2433461"
  },
  {
    "text": "the graph here,\nG_1, those that are induced by these vertices,\nT_1 is, in fact,",
    "start": "2433461",
    "end": "2441785"
  },
  {
    "text": "a minimum spanning tree for\nthat subgraph. That's what the theorem says.\nOK, if I look over here",
    "start": "2441785",
    "end": "2451971"
  },
  {
    "text": "conversely, or correspondingly,\nif I look at the set of edges",
    "start": "2451971",
    "end": "2458542"
  },
  {
    "text": "that are induced by this set of\nvertices, the vertices in T_2,",
    "start": "2458542",
    "end": "2465223"
  },
  {
    "text": "in fact, T_2 is a minimum\nspanning tree on that subgraph.",
    "start": "2465223",
    "end": "2473000"
  },
  {
    "text": "OK, OK, we can even do it over\nhere. If I took a look,\nfor example,",
    "start": "2473000",
    "end": "2481556"
  },
  {
    "text": "at these, let's see,\nlet's say we cut out five,",
    "start": "2481556",
    "end": "2487704"
  },
  {
    "text": "and if I cut out edge five,\nthat T_1 would be these four",
    "start": "2487705",
    "end": "2495058"
  },
  {
    "text": "vertices here.\nAnd, the point is that if I",
    "start": "2495058",
    "end": "2500146"
  },
  {
    "text": "look at the subgraph induced on\nthat, that these edges here. In fact, the six,\neight, and three are all edges",
    "start": "2500146",
    "end": "2508573"
  },
  {
    "text": "in a minimum spanning tree for\nthat subgraph. OK, so that's what the theorem\nsays.",
    "start": "2508573",
    "end": "2514853"
  },
  {
    "text": "So let's prove it.",
    "start": "2514853",
    "end": "2517000"
  },
  {
    "text": "OK, and so what technique are\nwe going to use to prove it?",
    "start": "2529000",
    "end": "2539783"
  },
  {
    "text": "OK, we learned this technique\nlast time: hint,",
    "start": "2539783",
    "end": "2548297"
  },
  {
    "text": "hint.\nIt's something you do it in",
    "start": "2548297",
    "end": "2553592"
  },
  {
    "text": "your text editor all the time:\ncut and paste,",
    "start": "2553592",
    "end": "2559447"
  },
  {
    "text": "good, cut and paste.\nOK, so the weight of T I can",
    "start": "2559447",
    "end": "2565834"
  },
  {
    "text": "express as the weight of the\nedge I removed,",
    "start": "2565834",
    "end": "2571556"
  },
  {
    "text": "plus the weight of T_1,\nplus the weight of T_2.",
    "start": "2571556",
    "end": "2577677"
  },
  {
    "text": "OK, so that's the total weight.\nSo, the argument is pretty",
    "start": "2577677",
    "end": "2587412"
  },
  {
    "text": "simple.\nSuppose that there were some",
    "start": "2587412",
    "end": "2593351"
  },
  {
    "text": "T_1 prime that was better than\nT_1 for G_1.",
    "start": "2593351",
    "end": "2600478"
  },
  {
    "text": "Suppose I had some better way\nof forming a spanning tree.",
    "start": "2600478",
    "end": "2611000"
  },
  {
    "text": "OK, then I would make up a T\nprime, which just contained the",
    "start": "2611000",
    "end": "2622984"
  },
  {
    "text": "edges, (u,v),\nand T_1 prime,",
    "start": "2622984",
    "end": "2628467"
  },
  {
    "text": "union T_2.\nSo, I would take,",
    "start": "2628468",
    "end": "2633953"
  },
  {
    "text": "if I had a better spanning\ntree, a spanning tree of lower",
    "start": "2633953",
    "end": "2645328"
  },
  {
    "text": "weight for T_1.\nAnd I call that T_1 prime.",
    "start": "2645328",
    "end": "2652452"
  },
  {
    "text": "I just substitute that and make\nup a spanning tree that",
    "start": "2652452",
    "end": "2657547"
  },
  {
    "text": "consisted of my edge,\n(u,v), whatever works well for T_1 prime and whatever works\nwell for T.",
    "start": "2657547",
    "end": "2666036"
  },
  {
    "text": "And, that would be a spanning\ntree. And it would be better than T\nitself was for G,",
    "start": "2666037",
    "end": "2676103"
  },
  {
    "text": "OK, because the weight of these\nis just as the weight for this,",
    "start": "2676103",
    "end": "2684330"
  },
  {
    "text": "I now just get to use the\nweight of T_1 prime,",
    "start": "2684330",
    "end": "2690300"
  },
  {
    "text": "and that's less.\nAnd so, therefore, the assumption that T was a\nminimum spanning tree would be",
    "start": "2690300",
    "end": "2702375"
  },
  {
    "text": "violated if I could find a\nbetter one for the subpiece.",
    "start": "2702375",
    "end": "2711000"
  },
  {
    "text": "So, we have this nice property\nof optimal substructure.",
    "start": "2711000",
    "end": "2716023"
  },
  {
    "text": "OK, I have subproblems that\nexhibit optimal, if I have a globally optimal\nsolution to the whole problem",
    "start": "2716023",
    "end": "2725325"
  },
  {
    "text": "within it, I can find optimal\nsolutions to subproblems.",
    "start": "2725325",
    "end": "2731000"
  },
  {
    "text": "So, now the question is,\nthat's one hallmark.",
    "start": "2731000",
    "end": "2736400"
  },
  {
    "text": "That's one hallmark of dynamic\nprogramming.",
    "start": "2736400",
    "end": "2741554"
  },
  {
    "text": "What about overlapping\nsubproblems? Do I have that property?\nDo I have overlapping",
    "start": "2741554",
    "end": "2751250"
  },
  {
    "text": "subproblems over here for this\ntype of problem?",
    "start": "2751250",
    "end": "2758000"
  },
  {
    "text": "So, imagine,\nfor example, that I'm removing different\nedges. I look at the space of taking a\ngiven edge, and removing it.",
    "start": "2779000",
    "end": "2786845"
  },
  {
    "text": "It partitions it into two\npieces, and now I have another piece.\nAnd I remove it,",
    "start": "2786845",
    "end": "2792053"
  },
  {
    "text": "etc.\nAm I going to end up getting a bunch of subproblems that are\nsimilar in there?",
    "start": "2792053",
    "end": "2798454"
  },
  {
    "text": "Yeah, I am.\nOK, if I take out this one, then I take out,\nsay, this one here,",
    "start": "2798454",
    "end": "2803692"
  },
  {
    "text": "and then I'll have another tree\nhere and here. OK, that would be the same as\nif I had originally taken this",
    "start": "2803693",
    "end": "2811157"
  },
  {
    "text": "out, and then taken that one\nout. If I look at simple ordering of\ntaking out the edges,",
    "start": "2811157",
    "end": "2817186"
  },
  {
    "text": "I'm going to end up with a\nwhole bunch of overlapping subproblems.\nYeah, OK.",
    "start": "2817186",
    "end": "2824598"
  },
  {
    "text": "So then, what does that suggest\nwe use as an approach?",
    "start": "2824598",
    "end": "2834013"
  },
  {
    "text": "Dynamic programming,\ngood. What a surprise!\nYes, OK, you could use dynamic",
    "start": "2834013",
    "end": "2846625"
  },
  {
    "text": "programming.\nBut it turns out that minimum",
    "start": "2846625",
    "end": "2853949"
  },
  {
    "text": "spanning tree exhibits an even\nmore powerful property.",
    "start": "2853949",
    "end": "2861167"
  },
  {
    "text": "OK, so we'(V,E) got all the\nclues for dynamic programming,",
    "start": "2861167",
    "end": "2868929"
  },
  {
    "text": "but it turns out that there's\nan even bigger clue that's going",
    "start": "2868929",
    "end": "2877237"
  },
  {
    "text": "to help us to use an even more\npowerful technique.",
    "start": "2877237",
    "end": "2885000"
  },
  {
    "start": "2883000",
    "end": "2943000"
  },
  {
    "text": "And that, we call,\nthe hallmark for greedy",
    "start": "2885000",
    "end": "2891074"
  },
  {
    "text": "algorithms.",
    "start": "2891074",
    "end": "2893000"
  },
  {
    "text": "And that is,\nwe have a thing called the",
    "start": "2912000",
    "end": "2921423"
  },
  {
    "text": "greedy choice property,\nwhich says that a locally",
    "start": "2921423",
    "end": "2933327"
  },
  {
    "text": "optimal choice is globally\noptimal.",
    "start": "2933327",
    "end": "2943000"
  },
  {
    "start": "2943000",
    "end": "3003000"
  },
  {
    "text": "And, of course,\nas all these hallmarks is the kind of thing you want to box,\nOK, because these are the clues",
    "start": "2943000",
    "end": "2949792"
  },
  {
    "text": "that you're going to be able to\ndo that. So, we have this property that\nwe call the greedy choice",
    "start": "2949792",
    "end": "2955873"
  },
  {
    "text": "property.\nI'm going to show you how it works in this case.\nAnd when you have a greedy",
    "start": "2955873",
    "end": "2961177"
  },
  {
    "text": "choice property,\nit turns out you can do even better that dynamic programming.\nOK, so when you see the two",
    "start": "2961177",
    "end": "2969136"
  },
  {
    "text": "dynamic programming properties,\nthere is a clue that says dynamic programming,\nyes, but also it says,",
    "start": "2969136",
    "end": "2976892"
  },
  {
    "text": "let me see whether it also has\nthis greedy property because if it does, you're going to come up\nwith something that's even",
    "start": "2976892",
    "end": "2986309"
  },
  {
    "text": "better than dynamic programming,\nOK? So, if you just have the two,\nyou can usually do dynamic",
    "start": "2986309",
    "end": "2993431"
  },
  {
    "text": "programming, but if you have\nthis third one, it's like, whoa!\nJackpot!",
    "start": "2993431",
    "end": "3000000"
  },
  {
    "text": "OK, so here's the theorem we'll\nprove to illustrate this idea. Once again, these are not,\nall these hallmarks are not",
    "start": "3000000",
    "end": "3008076"
  },
  {
    "text": "things.\nThey are heuristics. I can't give you an algorithm\nto say, here's where dynamic",
    "start": "3008076",
    "end": "3014027"
  },
  {
    "text": "programming works,\nor here's where greedy algorithms work.\nBut I can sort of indicate when",
    "start": "3014027",
    "end": "3020190"
  },
  {
    "text": "they work, the kind of structure\nthey have. OK, so here's the theorem.\nSo let's let T be the MST of",
    "start": "3020190",
    "end": "3032133"
  },
  {
    "text": "our graph.\nAnd, let's let A be any subset",
    "start": "3032133",
    "end": "3040895"
  },
  {
    "text": "of V, so, some subset of\nvertices.",
    "start": "3040895",
    "end": "3049000"
  },
  {
    "text": "And now, let's suppose that\nedge, (u,v), is the least weight",
    "start": "3049000",
    "end": "3064608"
  },
  {
    "text": "edge connecting our set A to A\ncomplement, that is,",
    "start": "3064608",
    "end": "3077835"
  },
  {
    "text": "V minus A.\nThen the theorem says that",
    "start": "3077835",
    "end": "3087359"
  },
  {
    "text": "(u,v) is in the minimum spanning\ntree.",
    "start": "3087359",
    "end": "3099000"
  },
  {
    "start": "3093000",
    "end": "3303000"
  },
  {
    "text": "So let's just take a look at\nour graph over here and see if that's, in fact,\nthe case.",
    "start": "3099000",
    "end": "3105408"
  },
  {
    "text": "OK, so let's take,\nso one thing I could do for A is just take a singleton node.\nSo, I take a singleton node,",
    "start": "3105408",
    "end": "3113514"
  },
  {
    "text": "let's say this guy here,\nthat can be my A, and everything else is V minus\nA.",
    "start": "3113514",
    "end": "3120000"
  },
  {
    "text": "And I look at the least weight\nedge connecting this to everything else.\nWell, there are only two edges",
    "start": "3120000",
    "end": "3127910"
  },
  {
    "text": "that connect it to everything\nelse. And the theorem says that the\nlighter one is in the minimum",
    "start": "3127910",
    "end": "3135262"
  },
  {
    "text": "spanning tree.\nHey, I win. OK, if you take a look,\nevery vertex that I pick,",
    "start": "3135262",
    "end": "3141095"
  },
  {
    "text": "the latest edge coming out of\nthat vertex is in the minimum spanning tree.\nOK, the lightest weight edge",
    "start": "3141095",
    "end": "3149086"
  },
  {
    "text": "coming out, but that's not all\nthe edges that are in here.",
    "start": "3149086",
    "end": "3155000"
  },
  {
    "text": "OK, or let's just imagine,\nlet's take a look at these three vertices connected to this\nset of vertices.",
    "start": "3155000",
    "end": "3163305"
  },
  {
    "text": "I have three edges is going\nacross. The least weight one is five.\nThat's the minimum spanning",
    "start": "3163305",
    "end": "3170779"
  },
  {
    "text": "tree.\nOr, I can cut it this way. OK, the ones above one,\nthe edges going down are seven,",
    "start": "3170780",
    "end": "3177840"
  },
  {
    "text": "eight, and 14.\nSeven is the least weight. It's in the minimum spanning\ntree.",
    "start": "3177840",
    "end": "3184719"
  },
  {
    "text": "So, no matter how I choose,\nI could make this one in, this one out,\nthis one in,",
    "start": "3184719",
    "end": "3190880"
  },
  {
    "text": "this one out,\nthis one in, this one out,\nthis one in, this one out,\ntake a look at what all the",
    "start": "3190880",
    "end": "3198078"
  },
  {
    "text": "edges are.\nWhich ever one to the least weight: it's in the minimum\nspanning tree.",
    "start": "3198079",
    "end": "3204320"
  },
  {
    "text": "So, in some sense,\nthat's a local property because I don't have to look at what the\nrest of the tree is.",
    "start": "3204320",
    "end": "3214000"
  },
  {
    "text": "I'm just looking at some small\nset of vertices if I wish, and I say, well,\nif I wanted to connect that set",
    "start": "3214000",
    "end": "3222226"
  },
  {
    "text": "of vertices to the rest of the\nworld, what would I pick? I'd pick the cheapest one.\nThat's the greedy approach.",
    "start": "3222227",
    "end": "3230855"
  },
  {
    "text": "It turns out,\nthat wins, OK, that picking that thing that's\nlocally good for that subset,",
    "start": "3230855",
    "end": "3237724"
  },
  {
    "text": "A, OK, is also globally good.\nOK, it optimizes the overall",
    "start": "3237724",
    "end": "3244568"
  },
  {
    "text": "function.\nThat's what the theorem says, OK?\nSo, let's prove this theorem.",
    "start": "3244568",
    "end": "3253490"
  },
  {
    "text": "Any questions about this?\nOK, let's prove this theorem.",
    "start": "3253490",
    "end": "3260372"
  },
  {
    "text": "So, we have (u,v) is the least\nweight edge connecting A to D",
    "start": "3260372",
    "end": "3267892"
  },
  {
    "text": "minus A.\nSo, let's suppose that this edge, (u,v), is not in the\nminimum spanning tree.",
    "start": "3267892",
    "end": "3280000"
  },
  {
    "text": "OK, let's suppose that somehow\nthere is a minimum spanning tree",
    "start": "3280000",
    "end": "3285961"
  },
  {
    "text": "that doesn't include this least\nweight edge. OK, so what technique you think\nwill use to prove to get a",
    "start": "3285961",
    "end": "3295576"
  },
  {
    "text": "contradiction here?\nCut and paste, good.\nYeah, we're going to cut paste.",
    "start": "3295576",
    "end": "3304254"
  },
  {
    "start": "3303000",
    "end": "3363000"
  },
  {
    "text": "OK, we're going to cut and\npaste. So here, I did an example.\nOK, so --",
    "start": "3304254",
    "end": "3314000"
  },
  {
    "text": "OK, and so I'm going to use the\nnotation. I'm going to color some of\nthese in.",
    "start": "3340000",
    "end": "3344000"
  },
  {
    "start": "3363000",
    "end": "3423000"
  },
  {
    "text": "OK, and so my notation here is\nthis is an element of A,",
    "start": "3365000",
    "end": "3370037"
  },
  {
    "text": "and color it in.\nIt's an element of V minus A. OK, so if it's not colored it,\nthat's an A.",
    "start": "3370037",
    "end": "3378152"
  },
  {
    "text": "This is my minimum spanning\ntree. Once again, I'm not showing the\noverall edges of all the graphs,",
    "start": "3378152",
    "end": "3387014"
  },
  {
    "text": "but they're there,\nOK? So, my edge,\n(u,v), which is not my minimum",
    "start": "3387014",
    "end": "3393807"
  },
  {
    "text": "spanning tree I say,\nlet's say is this edge here. It's an edge from u,\nu as in A, v as in V minus A.",
    "start": "3393807",
    "end": "3402599"
  },
  {
    "text": "OK, so everybody see the setup?\nSo, I want to prove that this",
    "start": "3402600",
    "end": "3408039"
  },
  {
    "text": "edge should have been in the\nminimum spanning tree, OK, that the contention that\nthis is a minimum spanning tree,",
    "start": "3408039",
    "end": "3418011"
  },
  {
    "text": "and does include (u,v) is\nwrong. So, what I want to do,\nthat, is I have a tree here,",
    "start": "3418011",
    "end": "3425322"
  },
  {
    "text": "T, and I have two vertices,\nu and v, and in a tree, between any two vertices there\nis a unique, simple path:",
    "start": "3425322",
    "end": "3432300"
  },
  {
    "text": "simple path meaning it doesn't\ngo back and forth and repeat edges or vertices.\nOK, there's a unique,",
    "start": "3432300",
    "end": "3438746"
  },
  {
    "text": "simple path from u to v.\nSo, let's consider that path.",
    "start": "3438746",
    "end": "3443000"
  },
  {
    "text": "OK, and the way that I know\nthat that path exists is because I'(V,E) read appendix B of the\ntextbook, section B.5.1,",
    "start": "3462000",
    "end": "3471377"
  },
  {
    "text": "OK, which has this nice theorem\nabout properties of trees. OK, so that's how I know that\nthere exists a unique,",
    "start": "3471377",
    "end": "3480339"
  },
  {
    "text": "simple path.\nOK, so now we're going to do is take a look at that path.\nSo in this case,",
    "start": "3480340",
    "end": "3489741"
  },
  {
    "text": "it goes from here,\nto here, to here, to here.\nAnd along that path,",
    "start": "3489741",
    "end": "3496515"
  },
  {
    "text": "there must be a point where I\nconnect from a vertex in A to a",
    "start": "3496516",
    "end": "3502967"
  },
  {
    "text": "vertex in V minus A.\nWhy? Well, because this is in A.\nThis is in V minus A.",
    "start": "3502967",
    "end": "3512000"
  },
  {
    "text": "So, along the path somewhere,\nthere must be a transition.",
    "start": "3512000",
    "end": "3522471"
  },
  {
    "text": "OK, they are not all in A,\nOK, because in particular,",
    "start": "3522471",
    "end": "3532195"
  },
  {
    "text": "V isn't.\nOK, so we're going to do is",
    "start": "3532195",
    "end": "3538739"
  },
  {
    "text": "swap (u,v) with the first edge\non this path that connects a",
    "start": "3538739",
    "end": "3549585"
  },
  {
    "text": "vertex in A to a vertex in V\nminus A.",
    "start": "3549585",
    "end": "3558000"
  },
  {
    "text": "So in this case,\nit's this edge here. I go from A to V minus A.\nIn general, I might be",
    "start": "3558000",
    "end": "3564639"
  },
  {
    "text": "alternating many times,\nOK, and I just picked the first one that I encounter.\nOK, that this guy here.",
    "start": "3564639",
    "end": "3572480"
  },
  {
    "text": "And what I do is I put this\nedge in. OK, so then,\nwhat happens?",
    "start": "3572480",
    "end": "3578266"
  },
  {
    "text": "Well, the edge,\n(u,v), is the lightest thing connecting something in A to\nsomething in V minus A.",
    "start": "3578266",
    "end": "3586787"
  },
  {
    "text": "So that means,\nin particular, it's lighter than this edge,\nhas lower weight.",
    "start": "3586787",
    "end": "3593405"
  },
  {
    "text": "So, by swapping this,\nI'(V,E) created a tree with lower overall weight,\ncontradicting the assumption",
    "start": "3593405",
    "end": "3602198"
  },
  {
    "text": "that this other thing was a\nminimum spanning tree.",
    "start": "3602198",
    "end": "3608000"
  },
  {
    "text": "OK: so, a lower weight spanning\ntree than T results,",
    "start": "3608000",
    "end": "3614219"
  },
  {
    "text": "and that's a contradiction --",
    "start": "3614219",
    "end": "3618000"
  },
  {
    "text": "-- than T results.\nAnd that's a contradiction,",
    "start": "3625000",
    "end": "3633010"
  },
  {
    "text": "OK?\nHow are we doing? Everybody with me?\nOK, now we get to do some",
    "start": "3633010",
    "end": "3644225"
  },
  {
    "text": "algorithms.\nYea! So, we are going to do an\nalgorithm called Prim's",
    "start": "3644225",
    "end": "3655439"
  },
  {
    "text": "algorithm.\nPrim eventually became a very",
    "start": "3655439",
    "end": "3661853"
  },
  {
    "text": "high-up at AT&T because he\ninvented this algorithm for",
    "start": "3661853",
    "end": "3667069"
  },
  {
    "text": "minimum spanning trees,\nand it was used in all of the",
    "start": "3667069",
    "end": "3672187"
  },
  {
    "text": "billing code for AT&T for many\nyears. He was very high up at Bell\nLabs back in the heyday of Bell",
    "start": "3672187",
    "end": "3681438"
  },
  {
    "text": "Laboratories.\nOK, so it just shows, all you have to do is invent an\nalgorithm.",
    "start": "3681438",
    "end": "3690000"
  },
  {
    "text": "You too can be a president of a\ncorporate monopoly.",
    "start": "3690000",
    "end": "3696702"
  },
  {
    "text": "Of course, the government can\ndo things to monopolies,",
    "start": "3696702",
    "end": "3703807"
  },
  {
    "text": "but anyway, if that's your\nmission in life,",
    "start": "3703807",
    "end": "3709438"
  },
  {
    "text": "invent an algorithm.\nOK, so here's the idea.",
    "start": "3709438",
    "end": "3715202"
  },
  {
    "text": "What we're going to do is we're\ngoing to maintain V minus A as a",
    "start": "3715202",
    "end": "3723648"
  },
  {
    "text": "priority queue.\nWe'll call it Q.",
    "start": "3723648",
    "end": "3731922"
  },
  {
    "text": "And each vertex,\nwe're going to key each vertex",
    "start": "3731923",
    "end": "3746076"
  },
  {
    "text": "in Q with the weight of the\nleast weight edge,",
    "start": "3746076",
    "end": "3759922"
  },
  {
    "text": "connecting it to a vertex in A.\nSo here's the code.",
    "start": "3759923",
    "end": "3773280"
  },
  {
    "text": "So, we're going to start out\nwith Q being all vertices.",
    "start": "3773280",
    "end": "3780000"
  },
  {
    "text": "So, we start out with A being,\nif you will, the empty set.\nOK, and what we're going to do",
    "start": "3780000",
    "end": "3787930"
  },
  {
    "text": "it is the least weight edge,\ntherefore, for everything in",
    "start": "3787930",
    "end": "3793095"
  },
  {
    "text": "the priority queue is basically\ngoing to be infinity because",
    "start": "3793095",
    "end": "3798536"
  },
  {
    "text": "none of them have any edges.\nThe least weight edge to the",
    "start": "3798536",
    "end": "3803700"
  },
  {
    "text": "empty set is going to be empty.\nAnd then, we're going to start",
    "start": "3803700",
    "end": "3809325"
  },
  {
    "text": "out with one guy.\nWe'll call him S, which will set to zero for some\narbitrary S in V.",
    "start": "3809325",
    "end": "3819489"
  },
  {
    "text": "And then, the main part of the\nalgorithm kicks in.",
    "start": "3819489",
    "end": "3825135"
  },
  {
    "text": "So that's our initialization.\nOK, when we do the analysis,",
    "start": "3825135",
    "end": "3831703"
  },
  {
    "text": "I'm going to write some stuff\non the left hand side of the",
    "start": "3831703",
    "end": "3838271"
  },
  {
    "text": "board.\nSo if you're taking notes,",
    "start": "3838271",
    "end": "3844406"
  },
  {
    "text": "you may want to also leave a\nlittle bit of space on the left",
    "start": "3844406",
    "end": "3854406"
  },
  {
    "text": "hand side of your notes.\nSo, while Q is not empty,",
    "start": "3854406",
    "end": "3862711"
  },
  {
    "text": "we get the smallest element out\nof it.",
    "start": "3862711",
    "end": "3870000"
  },
  {
    "text": "And then we do some stuff.",
    "start": "3881000",
    "end": "3883000"
  },
  {
    "text": "That's it.\nAnd the only thing I should mention here is,\nOK, so let's just see what's",
    "start": "3919000",
    "end": "3925503"
  },
  {
    "text": "going on here.\nAnd then we'll run it on the example.\nOK, so what we do is we take",
    "start": "3925503",
    "end": "3932256"
  },
  {
    "text": "out the smallest element out of\nthe queue at each step. And then for each step in the\nadjacency list,",
    "start": "3932256",
    "end": "3940156"
  },
  {
    "text": "in other words,\neverything for which I have an edge going from v to u,\nwe take a look,",
    "start": "3940156",
    "end": "3946846"
  },
  {
    "text": "and if v is still in our set V\nminus A, so things we'(V,E) taken out are going to be part\nof A.",
    "start": "3946846",
    "end": "3954261"
  },
  {
    "text": "OK, every time we take\nsomething out, that's going to be a new A that\nwe construct.",
    "start": "3954261",
    "end": "3962000"
  },
  {
    "text": "At every step,\nwe want to find, what's the cheapest edge\nconnecting that A to everything",
    "start": "3962000",
    "end": "3968400"
  },
  {
    "text": "else?\nWe basically are going to take whatever that cheapest thing is,\nOK, add that edge in,",
    "start": "3968400",
    "end": "3975025"
  },
  {
    "text": "and now bring that into A and\nfind the next cheapest one. And we just keep repeating the\nprocess.",
    "start": "3975025",
    "end": "3982103"
  },
  {
    "text": "OK, we'll do it on the example.\nAnd what we do, is every time we bring it in,\nI keep track of,",
    "start": "3982103",
    "end": "3988954"
  },
  {
    "text": "what was the vertex responsible\nfor bringing me in.",
    "start": "3988955",
    "end": "3994000"
  },
  {
    "text": "And what I claim is that at the\nend, if I look at the set of",
    "start": "3994000",
    "end": "4003947"
  },
  {
    "text": "these pairs that I'(V,E) made\nhere, V and pi of V,",
    "start": "4003947",
    "end": "4012209"
  },
  {
    "text": "that forms the minimum spanning\ntree.",
    "start": "4012209",
    "end": "4018279"
  },
  {
    "text": "So let's just do this.\nAnd, what's that?",
    "start": "4018279",
    "end": "4025441"
  },
  {
    "text": "We're all set up.\nSo let's get rid of these guys",
    "start": "4025441",
    "end": "4032191"
  },
  {
    "text": "here because we are going to\nrecompute them from scratch.",
    "start": "4032191",
    "end": "4040234"
  },
  {
    "text": "OK, so you may want to copy the\ngraph over again in your notes.",
    "start": "4040234",
    "end": "4050000"
  },
  {
    "text": "I was going to do it,\nbut it turned out, this is exactly the board is\ngoing to erase this.",
    "start": "4050000",
    "end": "4060797"
  },
  {
    "text": "OK, well let me just modify it.\nOK, so we start out.",
    "start": "4060797",
    "end": "4067127"
  },
  {
    "text": "We make everything be infinity.\nOK, so that's where I'm going",
    "start": "4067127",
    "end": "4074574"
  },
  {
    "text": "to keep the key value.\nOK, and then what I'm going to",
    "start": "4074574",
    "end": "4081028"
  },
  {
    "text": "do is find one vertex.\nAnd I'm going to call him S.",
    "start": "4081028",
    "end": "4087952"
  },
  {
    "text": "And I'm going to do this vertex\nhere. We'll call that S.\nSo basically,",
    "start": "4087952",
    "end": "4095018"
  },
  {
    "text": "I now make him be zero.\nAnd now, what I do, is I execute extract min.\nSo basically,",
    "start": "4095018",
    "end": "4103453"
  },
  {
    "text": "what I'll do is I'll just shade\nhim like this, indicating that he has now\njoined the set A.",
    "start": "4103454",
    "end": "4114000"
  },
  {
    "text": "So, this is going to be A.\nAnd this is element of V minus",
    "start": "4114000",
    "end": "4120931"
  },
  {
    "text": "A.\nOK, so then what we do is we take a look.\nWe extract him,",
    "start": "4120931",
    "end": "4127985"
  },
  {
    "text": "and then for each edge in the\nadjacency list,",
    "start": "4127986",
    "end": "4133432"
  },
  {
    "text": "OK, so for each vertex in the\nadjacency lists,",
    "start": "4133433",
    "end": "4139003"
  },
  {
    "text": "that these guys here,\nOK, we're going to look to see",
    "start": "4139003",
    "end": "4145315"
  },
  {
    "text": "if it's still in Q,\nthat is, in V minus A.",
    "start": "4145315",
    "end": "4152000"
  },
  {
    "text": "And if so, and its key value is\nless than what the value is at the edge, there,\nwe're going to replace it by",
    "start": "4152000",
    "end": "4160254"
  },
  {
    "text": "the edge value.\nSo, in this case, we're going to replace this by\nseven.",
    "start": "4160254",
    "end": "4165600"
  },
  {
    "text": "We're going to replace this by\n15, and we're going to replace this by ten, OK,\nbecause what we're interested",
    "start": "4165600",
    "end": "4173855"
  },
  {
    "text": "in is, what is the cheapest?\nNow, notice that everything in",
    "start": "4173855",
    "end": "4179608"
  },
  {
    "text": "V minus A, that is,\nwhat's in the priority queue, everything in there,\nOK, now has its cheapest way of",
    "start": "4179608",
    "end": "4188216"
  },
  {
    "text": "connecting it to the things that\nI'(V,E) already removed, the things that are in A.\nOK, and so now I just,",
    "start": "4188217",
    "end": "4197173"
  },
  {
    "text": "OK, when I actually do that\nupdate, there's actually something implicit going on in\nthis priority queue.",
    "start": "4197173",
    "end": "4207000"
  },
  {
    "text": "And that is that I have to do a\ndecreased key. So, there's an implicit\ndecrease of the key.",
    "start": "4207000",
    "end": "4214111"
  },
  {
    "text": "So, decreased key is a priority\nqueue operation that lowers the",
    "start": "4214111",
    "end": "4219120"
  },
  {
    "text": "value of the key in the priority\nqueue. And so, that's implicitly going\non when I look at what data",
    "start": "4219121",
    "end": "4226878"
  },
  {
    "text": "structure I'm going to use to\nimplement that priority queue. OK, so common data structures\nfor implementing a priority",
    "start": "4226878",
    "end": "4236171"
  },
  {
    "text": "queue are a min heap.\nOK, so I have to make sure that",
    "start": "4236171",
    "end": "4241376"
  },
  {
    "text": "I'm actually doing this\noperation. I can't just change it and not\naffect my heap.",
    "start": "4241376",
    "end": "4247355"
  },
  {
    "text": "So, there is an implicit\noperation going on there. OK, now I repeat.\nI find the cheapest thing,",
    "start": "4247355",
    "end": "4254406"
  },
  {
    "text": "oh, and I also have to set,\nnow, a pointer from each of these guys back to u.\nSo here, this guy sets a",
    "start": "4254407",
    "end": "4262930"
  },
  {
    "text": "pointer going this way.\nThis guy sets a pointer going this way, and this guy sets a\npointer going this way.",
    "start": "4262931",
    "end": "4271298"
  },
  {
    "text": "That's my pi thing that's going\nto keep track of who caused me to set my value to what it is.\nSo now, we go in and we find",
    "start": "4271298",
    "end": "4280873"
  },
  {
    "text": "the cheapest thing,\nagain. And we're going to do it fast,\ntoo. OK, this is a fast algorithm.\nOK, so now we're going to go do",
    "start": "4280873",
    "end": "4292361"
  },
  {
    "text": "this again.\nSo now, what's the cheapest thing to extract?\nThis guy here,",
    "start": "4292361",
    "end": "4299843"
  },
  {
    "text": "right?\nSo, we'll take him out, OK, and now we update all of\nhis neighbors.",
    "start": "4299843",
    "end": "4307542"
  },
  {
    "text": "So this guy gets five.\nThis guy gets 12. This guy gets nine.\nThis guy we don't update.",
    "start": "4307542",
    "end": "4316542"
  },
  {
    "text": "We don't update him because\nhe's no longer in the priority",
    "start": "4316542",
    "end": "4322722"
  },
  {
    "text": "queue.\nAnd all of these guys now, we make point to where they're\nsupposed to point to.",
    "start": "4322722",
    "end": "4332297"
  },
  {
    "text": "And, we're done with that step.\nNow we find the cheapest one.",
    "start": "4332297",
    "end": "4337983"
  },
  {
    "text": "What's the cheapest one now?\nThe five over here. Good.\nSo, we take him out.",
    "start": "4337983",
    "end": "4344807"
  },
  {
    "text": "OK, we update the neighbors.\nHere, yep, that goes to six",
    "start": "4344807",
    "end": "4350019"
  },
  {
    "text": "now.\nAnd, we have that pointer. And, this guy we don't do,\nbecause he's not in there.",
    "start": "4350019",
    "end": "4359684"
  },
  {
    "text": "This guy becomes 14,\nand this guy here becomes eight.\nSo, we update that guy,",
    "start": "4359684",
    "end": "4367774"
  },
  {
    "text": "make him be eight.\nDid I do this the right way?",
    "start": "4367774",
    "end": "4372802"
  },
  {
    "text": "Yeah, because pi is a function\nof this guy. So basically,\nthis thing, then,",
    "start": "4372803",
    "end": "4380675"
  },
  {
    "text": "disappears.\nYeah, did I have another one that I missed?\n12, yes, good,",
    "start": "4380675",
    "end": "4389258"
  },
  {
    "text": "it's removed,\nOK, because pi is just a function.\nAnd now I'm OK.",
    "start": "4389258",
    "end": "4394741"
  },
  {
    "text": "OK, so now what do I do?\nOK, so now my set, A, consists of these three\nthings, and now I want the",
    "start": "4394741",
    "end": "4403191"
  },
  {
    "text": "cheapest edge.\nI know it's in the minimum spanning tree.\nSo let me just greedily pick",
    "start": "4403191",
    "end": "4410561"
  },
  {
    "text": "it.\nOK, so what's the cheapest thing now?\nThis guy appear?",
    "start": "4410561",
    "end": "4417108"
  },
  {
    "text": "Yeah, six.\nSo we take it. We go to update these things,\nand nothing matters here.",
    "start": "4417108",
    "end": "4424771"
  },
  {
    "text": "OK, nothing changes because\nthese guys are already in A.",
    "start": "4424771",
    "end": "4430175"
  },
  {
    "text": "OK, so now the cheapest one is\neight here. Good.\nSo, we take eight out.",
    "start": "4430175",
    "end": "4436856"
  },
  {
    "text": "OK, we update this.\nNothing to be done. This: nothing to be done.\nThis: oh, no,",
    "start": "4436856",
    "end": "4444969"
  },
  {
    "text": "this one, instead of 14 we can\nmake this be three. So, we get rid of that pointer\nand make it point that way.",
    "start": "4444970",
    "end": "4454212"
  },
  {
    "text": "Now three is the cheapest\nthing. So, we take it out,\nand of course there's nothing",
    "start": "4454212",
    "end": "4461100"
  },
  {
    "text": "to be done over there.\nAnd now, last, I take nine.\nAnd it's done.",
    "start": "4461100",
    "end": "4466506"
  },
  {
    "text": "And 15: it's done.\nAnd the algorithm terminates.",
    "start": "4466506",
    "end": "4472000"
  },
  {
    "text": "OK, and as I look at,\nnow, all the edges that I picked, those are exactly all\nthe edges that we had at the",
    "start": "4472000",
    "end": "4483135"
  },
  {
    "text": "beginning.\nOK, let's do an analysis here.",
    "start": "4483135",
    "end": "4488000"
  },
  {
    "text": "OK, so let's see,\nthis part here costs me order",
    "start": "4498000",
    "end": "4506316"
  },
  {
    "text": "V, right?\nOK, and this part, let's see what we are doing\nhere.",
    "start": "4506316",
    "end": "4516983"
  },
  {
    "text": "Well, we're going to go through\nthis loop how many times?",
    "start": "4516983",
    "end": "4527107"
  },
  {
    "text": "V times.\nIt's V elements we put into the",
    "start": "4527107",
    "end": "4532711"
  },
  {
    "text": "queue.\nWe are not inserting anything. We're just taking them out.\nThis goes V times,",
    "start": "4532711",
    "end": "4539795"
  },
  {
    "text": "OK, and we do a certain number\nof extract Mins. So, we're going to do order V\nextract Mins.",
    "start": "4539795",
    "end": "4547491"
  },
  {
    "text": "And then we go to the adjacency\nlist, and we have some constant",
    "start": "4547492",
    "end": "4552915"
  },
  {
    "text": "things.\nBut we have these implicit decreased keys for this stuff\nhere.",
    "start": "4552915",
    "end": "4560000"
  },
  {
    "text": "That's this thing here.\nOK, and so how many implicit",
    "start": "4560000",
    "end": "4567412"
  },
  {
    "text": "decreased keys do we have?\nThat's going to be the",
    "start": "4567412",
    "end": "4574389"
  },
  {
    "text": "expensive thing.\nOK, we have, in this case,\nthe degree of u of those.",
    "start": "4574389",
    "end": "4585000"
  },
  {
    "text": "OK, so overall,\nhow many implicit decreased",
    "start": "4585000",
    "end": "4591309"
  },
  {
    "text": "keys do we have?\nWell, we have V times through.",
    "start": "4591309",
    "end": "4598218"
  },
  {
    "text": "How big could the degree of u\nbe? OK, it could be as big as V,\norder V.",
    "start": "4598218",
    "end": "4608433"
  },
  {
    "text": "So, that's V^2 decreased use.\nBut we can do a better bound",
    "start": "4608433",
    "end": "4616995"
  },
  {
    "text": "than that.\nHow many do we really have?",
    "start": "4616995",
    "end": "4624189"
  },
  {
    "text": "Yeah, at most order E,\nOK, because what am I doing?",
    "start": "4624189",
    "end": "4631948"
  },
  {
    "text": "I'm summing up the degrees of\nall the vertices.",
    "start": "4631948",
    "end": "4639086"
  },
  {
    "text": "That's how many times I\nactually execute that.",
    "start": "4639086",
    "end": "4647000"
  },
  {
    "text": "So, I have order E,\nimplicit decreased keys.",
    "start": "4647000",
    "end": "4654322"
  },
  {
    "text": "So the time overall is order V\ntimes time for whatever the",
    "start": "4654322",
    "end": "4664028"
  },
  {
    "text": "extract Min is plus E times the\ntime for decreased key.",
    "start": "4664028",
    "end": "4673223"
  },
  {
    "text": "So now, let's look at data\nstructures, and we can evaluate",
    "start": "4673224",
    "end": "4682931"
  },
  {
    "text": "for different data structures\nwhat this formula gives us.",
    "start": "4682931",
    "end": "4694000"
  },
  {
    "text": "So, we have different ways of\nimplementing a data structure.",
    "start": "4694000",
    "end": "4701492"
  },
  {
    "text": "We have the cost of extract\nMin, and of decreased key,",
    "start": "4701492",
    "end": "4708222"
  },
  {
    "text": "and total.\nSo, the simplest way of implementing a data structure is\nan unsorted array.",
    "start": "4708222",
    "end": "4718369"
  },
  {
    "text": "If I have an unsorted array,\nhow much time does it take me",
    "start": "4718369",
    "end": "4724904"
  },
  {
    "text": "to extract the minimum element?\nIf I have an unsorted array?",
    "start": "4724904",
    "end": "4731668"
  },
  {
    "text": "Right, order V in this case\nbecause it's an array of size V.",
    "start": "4731668",
    "end": "4738433"
  },
  {
    "text": "And, to do a decreased key,\nOK, I can do it in order one.",
    "start": "4738433",
    "end": "4746000"
  },
  {
    "text": "So, the total is V^2,\ngood, order V^2 algorithm.",
    "start": "4746000",
    "end": "4754245"
  },
  {
    "text": "Or, as people suggested,\nhow about a binary heap?",
    "start": "4754245",
    "end": "4762666"
  },
  {
    "text": "OK, to do an extract Min in a\nbinary heap will cost me what?",
    "start": "4762666",
    "end": "4773017"
  },
  {
    "text": "O of log V.\nDecreased key will cost me,",
    "start": "4773017",
    "end": "4778905"
  },
  {
    "text": "yeah, it turns out you can do\nthat in order log V because",
    "start": "4778905",
    "end": "4784931"
  },
  {
    "text": "basically you just have to\nshuffle the value, actually shuffle it up towards\nthe root, OK?",
    "start": "4784932",
    "end": "4794295"
  },
  {
    "text": "Or at log V.\nAnd, the total cost therefore is?\nE log V, good.",
    "start": "4794295",
    "end": "4801717"
  },
  {
    "text": "Which of these is better?\nIt depends, good.",
    "start": "4801717",
    "end": "4806868"
  },
  {
    "text": "When is one better,\nand when is the other better?",
    "start": "4806869",
    "end": "4812758"
  },
  {
    "text": "Yeah, if it's a dense graph,\nE is close to V^2,",
    "start": "4812758",
    "end": "4818401"
  },
  {
    "text": "the array is better.\nBut if it's a sparse graph,",
    "start": "4818401",
    "end": "4824167"
  },
  {
    "text": "and E is much smaller than V^2,\nthen the binary heap is better.",
    "start": "4824167",
    "end": "4833000"
  },
  {
    "text": "So that motivated the invention\nof a data structure, OK, called a Fibonacci Heap.\nSo, Fibonacci Heap is covered",
    "start": "4833000",
    "end": "4843216"
  },
  {
    "text": "in Chapter 20 of CLRS.\nWe're not going to hold you responsible for the content,\nbut it's an interesting data",
    "start": "4843216",
    "end": "4853148"
  },
  {
    "text": "structure because it's an\namortized data structure. And it turns out that it is\ndata structure,",
    "start": "4853148",
    "end": "4861851"
  },
  {
    "text": "you can do extract Min in order\nlog V amortized time.",
    "start": "4861851",
    "end": "4868000"
  },
  {
    "text": "And remarkably,\nyou can do decreased key in order one amortized.\nSo, when I plug those in,",
    "start": "4868000",
    "end": "4877834"
  },
  {
    "text": "what do I get over here?",
    "start": "4877834",
    "end": "4881000"
  },
  {
    "text": "What's that going to be?\nPlug that it here.",
    "start": "4894000",
    "end": "4902088"
  },
  {
    "text": "It's going to be V times log V\nplus E: E plus V log V.",
    "start": "4902088",
    "end": "4912296"
  },
  {
    "text": "These are amortized,\nso what's this?",
    "start": "4912296",
    "end": "4920000"
  },
  {
    "text": "Trick question.\nIt's worst-case. It's not amortized over here.\nThese are amortized,",
    "start": "4920000",
    "end": "4925979"
  },
  {
    "text": "but that's the beauty of\namortization. I can say it's going to be\nworst case: E plus V log V over",
    "start": "4925979",
    "end": "4933006"
  },
  {
    "text": "here, because when I add up the\namortized cost of my operations, it's an upper bound on the true\ncosts.",
    "start": "4933006",
    "end": "4940480"
  },
  {
    "text": "OK, so that's why I say,\none of the beauties of this amortized analysis,\nand in particular,",
    "start": "4940480",
    "end": "4947058"
  },
  {
    "text": "being able to assign different\ncosts to different operations is I can just add them up and I get\nmy worst-case costs.",
    "start": "4947058",
    "end": "4957000"
  },
  {
    "text": "So this is already V log V.\nThere are a couple other algorithms just before I let you\ngo.",
    "start": "4957000",
    "end": "4963011"
  },
  {
    "text": "Kruskal's Algorithm in the book\nuses another amortized data structure called a disjoint set\ndata structure,",
    "start": "4963012",
    "end": "4970281"
  },
  {
    "text": "which also runs in E log V,\nthat is, this time: runs in this time,\nthe same as using a binary",
    "start": "4970282",
    "end": "4976574"
  },
  {
    "text": "heap.\nSo, I'll refer you to the book. The best algorithm to date with\nthis problem is done by our own",
    "start": "4976574",
    "end": "4984935"
  },
  {
    "text": "David Karger on the faculty here\nwith one of our former graduates, Phil Kline,\nwho is now a professor at",
    "start": "4984935",
    "end": "4992975"
  },
  {
    "text": "Brown, and Robert Tarjan,\nwho is sort of like the master of all data structures who was a\nprofessor at Princeton in 1993.",
    "start": "4992975",
    "end": "5002368"
  },
  {
    "text": "OK, it's a randomized\nalgorithm, and it gives you order V plus E expected time.\nOK, so that's the best to date.",
    "start": "5002368",
    "end": "5012000"
  },
  {
    "text": "It's still open as to whether\nthere is a deterministic, there is worst-case bound,\nwhether there is a worst-case",
    "start": "5012000",
    "end": "5020678"
  },
  {
    "text": "bound that is linear time.\nOK, but there is a randomized to linear time,\nand otherwise,",
    "start": "5020679",
    "end": "5027369"
  },
  {
    "text": "this is essentially the best\nbound without additional assumptions.\nOK, very cool stuff.",
    "start": "5027369",
    "end": "5034057"
  },
  {
    "text": "Next, we're going to see a lot\nof these ideas of greedy and dynamic programming in practice.",
    "start": "5034058",
    "end": "5040808"
  }
]