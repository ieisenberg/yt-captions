[
  {
    "start": "0",
    "end": "60000"
  },
  {
    "text": " --solutions for problem set 8. I found some problems\nas I went through them.",
    "start": "0",
    "end": "6240"
  },
  {
    "text": "These are all new because we've\nnever been in this territory before this early where we\ncould actually offer problems.",
    "start": "6240",
    "end": "14469"
  },
  {
    "text": "So it's a little\nbit of a shakedown. 8.2, simply, I don't think\nyou have enough background",
    "start": "14470",
    "end": "21970"
  },
  {
    "text": "to actually do it. If you want to try\nit, be my guest.",
    "start": "21970",
    "end": "27289"
  },
  {
    "text": "I'll give you a sketch\nof a solution, anyway. But really, for the\nsame reason that I",
    "start": "27290",
    "end": "33910"
  },
  {
    "text": "didn't do exercise\n3 in Chapter 11, we really shouldn't have\ndone exercise 2, either.",
    "start": "33910",
    "end": "42590"
  },
  {
    "text": "For 8.3, which is\na decoding exercise using the BCJR algorithm.",
    "start": "42590",
    "end": "47660"
  },
  {
    "text": "I don't know if we'll get\nto the BCJR algorithm today. If we do, then please do it. If we don't, then\nwe can defer it.",
    "start": "47660",
    "end": "55059"
  },
  {
    "text": "And you also need to know\nthat the noise variance is 1. Or, pick something,\nbut I suggest",
    "start": "55060",
    "end": "61510"
  },
  {
    "start": "60000",
    "end": "140000"
  },
  {
    "text": "you just pick sigma\nsquared equals 1, even though that's\na large value.",
    "start": "61510",
    "end": "66979"
  },
  {
    "text": "OK, any questions? Has anyone tried to\ndo the homework yet?",
    "start": "66980",
    "end": "72480"
  },
  {
    "text": "Not yet. Good strategy.  OK, Chapter 11.",
    "start": "72480",
    "end": "79276"
  },
  {
    "text": " We have one topic to go in\nChapter 11, which is just",
    "start": "79276",
    "end": "87920"
  },
  {
    "text": "the last little bit on Hadamard\ntransform realizations, which I do want to cover.",
    "start": "87920",
    "end": "93500"
  },
  {
    "text": "We've really been talking\nabout styles of realizations",
    "start": "93500",
    "end": "99006"
  },
  {
    "text": "on codes on graphs,\ngraphical realizations. We had the generator.",
    "start": "99006",
    "end": "105810"
  },
  {
    "text": "And we had the parity check\nand we had the trellis-style. And we even had a\ntail-biting trellis.",
    "start": "105810",
    "end": "114050"
  },
  {
    "text": "And we also developed\nthe cut-set bound",
    "start": "114050",
    "end": "124620"
  },
  {
    "text": "which doesn't exactly\nprove, but strongly suggests",
    "start": "124620",
    "end": "131830"
  },
  {
    "text": "that we're going\nto need cycles in our graphical representations. ",
    "start": "131830",
    "end": "140230"
  },
  {
    "text": "And one reason I want to\ntalk about the Hadamard",
    "start": "140230",
    "end": "146000"
  },
  {
    "text": "transform realizations,\nthe Reed-Muller codes, is that they really demonstrate\nthis point I think very nicely.",
    "start": "146000",
    "end": "154440"
  },
  {
    "text": "If we allow cycles, we get\nvery simple representations. If we demand\ncycle-free, then we get",
    "start": "154440",
    "end": "162840"
  },
  {
    "text": "still pretty nice realizations,\nbut much more complicated. They meet the cut-set\nbound everywhere.",
    "start": "162840",
    "end": "170050"
  },
  {
    "text": "Reed-Muller codes in general\nare pretty good anyway for trellis realizations,\nbut they're certainly",
    "start": "170050",
    "end": "176030"
  },
  {
    "text": "much more complicated than\nthe realizations with cycles. So that's what we're\ngoing to do today",
    "start": "176030",
    "end": "184140"
  },
  {
    "text": "is-- at least the first part is\nHadamard transform realizations",
    "start": "184140",
    "end": "195545"
  },
  {
    "text": "of Reed-Muller codes. ",
    "start": "195545",
    "end": "203849"
  },
  {
    "text": "OK, what's the Hadamard\ntransform over the binary field F2? It's related to but\na little different",
    "start": "203850",
    "end": "210170"
  },
  {
    "text": "than the Hadamard transform\nover the real field. So people seeing the latter,\nyou'll see similarities,",
    "start": "210170",
    "end": "216819"
  },
  {
    "text": "but you may see\ndifferences as well. So the Hadamard transform.",
    "start": "216820",
    "end": "223675"
  },
  {
    "text": " I think you remember when we\ndefined Reed-Muller codes, one",
    "start": "223675",
    "end": "232890"
  },
  {
    "text": "of the ways we defined them was\nin terms of a universal matrix",
    "start": "232890",
    "end": "239110"
  },
  {
    "text": "Um, which I defined as\nthe m-fold tensor product,",
    "start": "239110",
    "end": "246600"
  },
  {
    "text": "very briefly written like\nthat, of a 2 by 2 matrix, u1.",
    "start": "246600",
    "end": "254380"
  },
  {
    "text": "What does u1 look like? u1 looks like-- over the binary\nfield, it just looks like this.",
    "start": "254380",
    "end": "262570"
  },
  {
    "start": "260000",
    "end": "360000"
  },
  {
    "text": "It's the set of generators for\nthe Reed-Muller codes of length 2. What you would expect, it's\na lower triangular matrix.",
    "start": "262570",
    "end": "272879"
  },
  {
    "text": "And if we want to\ntake-- I don't know if you've run into\ntensor products before.",
    "start": "272880",
    "end": "278574"
  },
  {
    "text": "If we want to take the 2 by\n2 tensor product like that, we simply replace each one by\nthe matrix itself and each 0",
    "start": "278575",
    "end": "287420"
  },
  {
    "text": "by a matrix of 0's. So we get a 4 by 4 matrix which\nlooks like this 1, 0, 1, 1, 1,",
    "start": "287420",
    "end": "295330"
  },
  {
    "text": "0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0. And what do you know?",
    "start": "295330",
    "end": "300530"
  },
  {
    "text": "That's what we called our\nuniversal Reed-Muller generator",
    "start": "300530",
    "end": "305630"
  },
  {
    "text": "matrix for m equals 2. In other words, for\nReed-Muller codes of length 4.",
    "start": "305630",
    "end": "311669"
  },
  {
    "text": "And you see how all\nthe Reed-Muller codes are generated. We can find generators for\nall the Reed-Muller codes",
    "start": "311670",
    "end": "317690"
  },
  {
    "text": "from this set. And similarly, u3\nwas this matrix",
    "start": "317690",
    "end": "328300"
  },
  {
    "text": "that we've now seen many times. ",
    "start": "328300",
    "end": "336180"
  },
  {
    "text": "So all these matrices\nhave common properties. They're all lower triangular. ",
    "start": "336180",
    "end": "344656"
  },
  {
    "text": "They have many properties. One of them is that all\nof them are self-inverse.",
    "start": "344656",
    "end": "351030"
  },
  {
    "text": " And that's very easy\nto prove from the fact",
    "start": "351030",
    "end": "359352"
  },
  {
    "text": "that u1 is clearly self-inverse. u1 times u1 is the\nidentity matrix.",
    "start": "359352",
    "end": "366330"
  },
  {
    "start": "360000",
    "end": "495000"
  },
  {
    "text": "And because these are\nall tensor products, that makes all of these\ntheir own inverses.",
    "start": "366330",
    "end": "375540"
  },
  {
    "text": "So what's the 2 to the m by 2\nto the m Hadamard transform is",
    "start": "375540",
    "end": "382420"
  },
  {
    "text": "if we have a vector\nu, then u times u m,",
    "start": "382420",
    "end": "388896"
  },
  {
    "text": "a vector y is called the\nHadamard transform of u.",
    "start": "388896",
    "end": "396410"
  },
  {
    "text": "What's the inverse Hadamard\ntransform if you like? Well, since u m is\nits own inverse,",
    "start": "396410",
    "end": "403360"
  },
  {
    "text": "if we just multiply both sides\nby u, we get u equals y u m.",
    "start": "403360",
    "end": "408860"
  },
  {
    "text": "So to get u back, we just\ntransform y again by u m.",
    "start": "408860",
    "end": "418824"
  },
  {
    "text": "So the inverse\nHadamard transform is the Hadamard transform\nagain in this case. So we get the typical kind\nof transform relationship.",
    "start": "418825",
    "end": "427100"
  },
  {
    "text": "You can think of this time\ndomain, frequency domain. Anyway, this is the\nset of variables",
    "start": "427100",
    "end": "433210"
  },
  {
    "text": "from which we can get\nthis set of variables. They're somehow in dual domains.",
    "start": "433210",
    "end": "442640"
  },
  {
    "text": "OK. Well, now recall one definition\nof the Reed-Muller codes.",
    "start": "442640",
    "end": "449330"
  },
  {
    "text": "The Reed-Muller codes\nare-- Rm of mr is-- sorry,",
    "start": "449330",
    "end": "461930"
  },
  {
    "text": "it's always rm, which I've\nalways found curious notation. Since m is more\nimportant than r,",
    "start": "461930",
    "end": "467759"
  },
  {
    "text": "it would seem that\nyou would say m first, but maybe it was for\nthis, I don't know.",
    "start": "467760",
    "end": "473810"
  },
  {
    "text": "This is generated by--\nso let's say that. The rows of u m of\nweight 2 to the m minus r",
    "start": "473810",
    "end": "489011"
  },
  {
    "text": "[? for ?] greater. ",
    "start": "489011",
    "end": "494610"
  },
  {
    "text": "So for instance, the 0 order\nReed-Muller code of length 8",
    "start": "494610",
    "end": "502479"
  },
  {
    "start": "495000",
    "end": "780000"
  },
  {
    "text": "is simply the 8, 1, 8\nrepetition code and it's generated by this last row. It's the only one of weight 8.",
    "start": "502480",
    "end": "508199"
  },
  {
    "text": "If we want the\nReed-Muller code of length 8 and minimum distance 4,\nwe take this, this, this,",
    "start": "508200",
    "end": "517919"
  },
  {
    "text": "and this as our\nfour generator rows and we get the 8,\n4, 4 code that we've",
    "start": "517919",
    "end": "522950"
  },
  {
    "text": "been mostly using for examples. If we want the\nsingle parity check code of length 8,\nthe 8, 7, 2 code,",
    "start": "522950",
    "end": "531670"
  },
  {
    "text": "we take all these 7\ngenerators, everyone except for the unique\nweight 1 generator up here.",
    "start": "531670",
    "end": "537940"
  },
  {
    "text": "And as a hint for\ndoing the homework, it's helpful to notice\nthat if we write",
    "start": "537940",
    "end": "546180"
  },
  {
    "text": "the indices of these rows\nas 0, 1, 2, 3, 4, 5, 6, 7,",
    "start": "546180",
    "end": "555460"
  },
  {
    "text": "then notice there's\na relationship between the Hamming\nweight of the m bit binary expansion of these indices\nand the weights of these rows.",
    "start": "555460",
    "end": "565070"
  },
  {
    "text": "Is that clear instantly? I won't prove it, but if\nthe Hamming weight is 3, then the row has weight 8.",
    "start": "565070",
    "end": "571620"
  },
  {
    "text": "If the Hamming weight is 2,\nthen the row has weight 4. If the hamming weight is 1,\nthen the row has weight 2.",
    "start": "571620",
    "end": "578990"
  },
  {
    "text": "And if the hamming weight is\n0, then the row has weight 1. And that's the easiest way\nI've found to do problem 8.1.",
    "start": "578990",
    "end": "590149"
  },
  {
    "text": "So these-- there are infinity\nof relations, nice relations, you could prove\nfor these things.",
    "start": "590150",
    "end": "596035"
  },
  {
    "text": "They're very important\ncombinatorially and so forth. OK, so from this\nobservation, we can therefore",
    "start": "596035",
    "end": "608170"
  },
  {
    "text": "define a Reed-Muller code as\nthe set of all u times u m",
    "start": "608170",
    "end": "618029"
  },
  {
    "text": "where we simply let some of\nthe ui free for some rows.",
    "start": "618030",
    "end": "632350"
  },
  {
    "text": "In other words, it's\njust a binary variable. And 0 for other rows as I just\ndescribed in words over here.",
    "start": "632350",
    "end": "644410"
  },
  {
    "text": " So basically, where\nwe're going is",
    "start": "644410",
    "end": "651700"
  },
  {
    "text": "we're going to define some kind\nof graph which realizes u m.",
    "start": "651700",
    "end": "656778"
  },
  {
    "text": "We're going to put the\n8-- do it either way.",
    "start": "656778",
    "end": "663350"
  },
  {
    "text": "I'm going to put\ny0 y7 over here. If we're doing a code of\nlength 8, I'll put u3 in here.",
    "start": "663350",
    "end": "671560"
  },
  {
    "text": "We're going to have 8 other\nthings sticking out over here. I shouldn't draw these\nbecause they're really",
    "start": "671560",
    "end": "678200"
  },
  {
    "text": "going to be internal,\nimplicit variables. So this will be u0\nthrough u7 in some order.",
    "start": "678200",
    "end": "684769"
  },
  {
    "text": "It turns out to be necessary\nto play with the order to get a nice-looking graph.",
    "start": "684770",
    "end": "689880"
  },
  {
    "text": "And we're going to fix\nsome of these to 0. For instance, for\nthe 8, 4, 4 code,",
    "start": "689880",
    "end": "700590"
  },
  {
    "text": "we're going to fix those to 0. And we're going to allow these\ncoefficients corresponding",
    "start": "700590",
    "end": "707779"
  },
  {
    "text": "to rows of weight 4 or\nmore be free arbitrary binary variables.",
    "start": "707780",
    "end": "713519"
  },
  {
    "text": " So the set of all\ncode words will",
    "start": "713520",
    "end": "718890"
  },
  {
    "text": "be generated as the\nset of all Hadamard transforms of 8 tuples, which\nare fixed to 0 in these 4",
    "start": "718890",
    "end": "727610"
  },
  {
    "text": "positions, and which are\nfree in these 4 positions. Is that clearly stated? I think I'm reasonably\nproud of that.",
    "start": "727610",
    "end": "733920"
  },
  {
    "text": " So that's what I mean\nby this notation here.",
    "start": "733920",
    "end": "739810"
  },
  {
    "text": "And it's clear that the\ndimension of the code is the number of free\ncoefficients here.",
    "start": "739810",
    "end": "749089"
  },
  {
    "text": "Basically, because the u\nm matrix is invertible, so we're going to\nget an isomorphism",
    "start": "749090",
    "end": "756320"
  },
  {
    "text": "between 4 tuples and code words. ",
    "start": "756320",
    "end": "761920"
  },
  {
    "text": "So that's a way of\nconstructing Reed-Muller codes. Now, how do I get a nice\ngraphical representation",
    "start": "761920",
    "end": "770890"
  },
  {
    "text": "of u m? Let's work on that for\nthe next little bit.",
    "start": "770890",
    "end": "776295"
  },
  {
    "text": " Well, as always with\nReed-Muller codes,",
    "start": "776295",
    "end": "782220"
  },
  {
    "start": "780000",
    "end": "2746000"
  },
  {
    "text": "we should do things recursively. We should start with u1. ",
    "start": "782220",
    "end": "788760"
  },
  {
    "text": "That's a pretty\nsimple relationship. How do we draw a graph for the\nrelationship y equals u1 u?",
    "start": "788760",
    "end": "797800"
  },
  {
    "text": "OK, that means y0 equals u0.",
    "start": "797800",
    "end": "802820"
  },
  {
    "text": "Let's see. Is that right? I've been putting\nu on the left here",
    "start": "802820",
    "end": "808240"
  },
  {
    "text": "to imitate what we do\nwith generator matrices. So that equation is\ny0, y1 equals u0, u1.",
    "start": "808240",
    "end": "823381"
  },
  {
    "text": " Sometimes I have problems\nwith basic things like this.",
    "start": "823381",
    "end": "830025"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Yeah, I\nwant row vectors.",
    "start": "830025",
    "end": "835480"
  },
  {
    "text": "Sorry. ",
    "start": "835480",
    "end": "842699"
  },
  {
    "text": "OK, so that's the\nequation, which",
    "start": "842700",
    "end": "850290"
  },
  {
    "text": "we can see that says y0 equals\nu0 and y1 equals u0 plus u1.",
    "start": "850290",
    "end": "857485"
  },
  {
    "text": "Do I agree with that?  y1 equals-- no, still not right.",
    "start": "857485",
    "end": "867410"
  },
  {
    "text": "AUDIENCE: y0 is [INAUDIBLE]. PROFESSOR: Plus u1. And y2 is-- y1 is u1.",
    "start": "867410",
    "end": "873579"
  },
  {
    "text": "All right.  Sorry, now we're in business. ",
    "start": "873580",
    "end": "880779"
  },
  {
    "text": "OK, so let's draw a\nlittle graph of that.",
    "start": "880780",
    "end": "886520"
  },
  {
    "text": "We have y1 equals u1.",
    "start": "886520",
    "end": "892920"
  },
  {
    "text": "And if I make an\nequals down here, I'll get a little u1 in here. So I can put u0 in here and\nget out y0 equals u0 plus u1.",
    "start": "892920",
    "end": "905589"
  },
  {
    "text": "OK, so that's a\ngraphical realization of this Hadamard transform.",
    "start": "905590",
    "end": "911140"
  },
  {
    "text": "If I put 2 bits in\nhere for u, then I'll get the Hadamard\ntransform out here for y.",
    "start": "911140",
    "end": "918000"
  },
  {
    "text": "But by the way, notice there\naren't any arrows here. This is a behavioral\nrealization.",
    "start": "918000",
    "end": "924350"
  },
  {
    "text": "And I could equally\nwell put a 2 tuple here on the y's and I'd get out the\nHadamard transform at the u's.",
    "start": "924350",
    "end": "932445"
  },
  {
    "text": "It goes either way. ",
    "start": "932445",
    "end": "938140"
  },
  {
    "text": "And this I find\nsomewhat interesting",
    "start": "938140",
    "end": "944120"
  },
  {
    "text": "is called a controlled NOT gate. ",
    "start": "944120",
    "end": "949790"
  },
  {
    "text": "The idea here is that this\nbottom variable is the control and it determines whether\nthis variable is inverted",
    "start": "949790",
    "end": "957840"
  },
  {
    "text": "or not as it goes across here. And this is a basic gate\nin quantum mechanics.",
    "start": "957840",
    "end": "965769"
  },
  {
    "text": "Maybe the basic gate in quantum\nmechanical realizations. [INAUDIBLE] at least\n[INAUDIBLE] cubits.",
    "start": "965770",
    "end": "971455"
  },
  {
    "text": " But anyway, that's actually\nneither here nor there.",
    "start": "971455",
    "end": "979470"
  },
  {
    "text": "All right, so that's\nhow we realize u1. All right, now\nrecursively there must",
    "start": "979470",
    "end": "984640"
  },
  {
    "text": "be some way of putting together\nlittle blocks like this",
    "start": "984640",
    "end": "992070"
  },
  {
    "text": "to make bigger\nblocks, say, for u2. To realize u2 or u3.",
    "start": "992070",
    "end": "997360"
  },
  {
    "text": " OK, so for u2, let me just\ntry to steam ahead and hope",
    "start": "997360",
    "end": "1011050"
  },
  {
    "text": "this will work.  We build another gate to\ndo a set of transforms",
    "start": "1011050",
    "end": "1019580"
  },
  {
    "text": "to an intermediate\nvariable here. Intermediate variables, and\nthen we sort of do a butterfly.",
    "start": "1019580",
    "end": "1028534"
  },
  {
    "start": "1028534",
    "end": "1035390"
  },
  {
    "text": "We're going to build this out\nof 4 little blocks like this. We're going to write like this.",
    "start": "1035390",
    "end": "1041949"
  },
  {
    "text": "And how are we going\nto tie them together? The outputs here are going\nto go to the equals signs.",
    "start": "1041950",
    "end": "1048429"
  },
  {
    "text": "The outputs here are going\nto go to the plus signs.",
    "start": "1048430",
    "end": "1053660"
  },
  {
    "text": "And we get something that\nlooks like that for the 2 by 2 Hadamard transform.",
    "start": "1053660",
    "end": "1061000"
  },
  {
    "text": "And y0, y1, y2, y3.",
    "start": "1061000",
    "end": "1068420"
  },
  {
    "text": "Now, probably this\nshould be u2 and this should be u1 just from\nthe way these works.",
    "start": "1068420",
    "end": "1075050"
  },
  {
    "text": "And if we do that, we get what? This is u3.",
    "start": "1075050",
    "end": "1081500"
  },
  {
    "text": "This is u1 plus u3. This is u2.",
    "start": "1081500",
    "end": "1089190"
  },
  {
    "text": "This u0 plus u2. ",
    "start": "1089190",
    "end": "1094670"
  },
  {
    "text": "So we get that--\ndoing it backwards, y3 equals u3, y2 equals u2\nplus u3, y1 equals u1 plus u3,",
    "start": "1094670",
    "end": "1108010"
  },
  {
    "text": "and y0 equals u0 plus\nu2 plus u1 plus u3.",
    "start": "1108010",
    "end": "1115100"
  },
  {
    "text": "And that's probably correct,\nbut it's something like that.",
    "start": "1115100",
    "end": "1121660"
  },
  {
    "text": "Done in the notes. And those of you who have ever\nlooked at the fast Fourier",
    "start": "1121660",
    "end": "1128660"
  },
  {
    "text": "transform will see\nsome resemblance here to the butterflies that occur\nin a fast Fourier transform.",
    "start": "1128660",
    "end": "1135470"
  },
  {
    "text": "And it's not surprising\nbecause these are all based on groups of-- in\nthis case, z2 squared.",
    "start": "1135470",
    "end": "1145390"
  },
  {
    "text": "And so they have the\nsame algebraic structure underlying them. But that's, again,\na side comment",
    "start": "1145390",
    "end": "1151090"
  },
  {
    "text": "that I won't take\ntime to justify.  And similarly for\n8, if we want to do",
    "start": "1151090",
    "end": "1160970"
  },
  {
    "text": "the 8-- there's a\npicture in the notes-- we build 8 of these gates.",
    "start": "1160970",
    "end": "1166490"
  },
  {
    "text": "Maybe I actually have\nto do it because I want to reduce it also.",
    "start": "1166490",
    "end": "1172150"
  },
  {
    "text": "So 1, 2, 3, 4.",
    "start": "1172150",
    "end": "1178820"
  },
  {
    "text": "Sorry, this takes a little time. ",
    "start": "1178820",
    "end": "1191200"
  },
  {
    "text": "This is where making up slides\nahead of time is a good idea. ",
    "start": "1191200",
    "end": "1199240"
  },
  {
    "text": "All right, so we have\nthree levels of 2 by 2 Hadamard transforms\nas you might expect.",
    "start": "1199240",
    "end": "1205355"
  },
  {
    "text": " At each level, we do four\n2 by 2 Hadamard transforms.",
    "start": "1205355",
    "end": "1215210"
  },
  {
    "text": "And we connect them together. At the first level, we\nstay within the half.",
    "start": "1215210",
    "end": "1224170"
  },
  {
    "text": "We connect them together\nin the same way. ",
    "start": "1224170",
    "end": "1229929"
  },
  {
    "text": "And at the next level,\nwe have to spread out over the whole\nthing, so we get--",
    "start": "1229930",
    "end": "1237000"
  },
  {
    "text": "this goes up to this equals. This goes up to this equals. This goes up to that equals.",
    "start": "1237000",
    "end": "1242799"
  },
  {
    "text": "This comes down here. This comes down here.",
    "start": "1242800",
    "end": "1249510"
  },
  {
    "text": "This comes down here\nand this goes across. That gives y0, y1,\ny2, and so forth.",
    "start": "1249510",
    "end": "1259420"
  },
  {
    "text": "y3, y4, y5, y6, y7.",
    "start": "1259420",
    "end": "1265080"
  },
  {
    "text": "And again, we have to\njigger with the order here. Probably something like this.",
    "start": "1265080",
    "end": "1272160"
  },
  {
    "start": "1272160",
    "end": "1280460"
  },
  {
    "text": "OK, in any case, it's done\ncorrectly in the notes. All right, so this executes\nan 8 by 8 Hadamard transform.",
    "start": "1280460",
    "end": "1290740"
  },
  {
    "text": "You put y's on here and you\nget the Hadamard transform out on the u's, or vice versa.",
    "start": "1290740",
    "end": "1298370"
  },
  {
    "text": "You with me? OK. Notice that the components\nhere are all very simple.",
    "start": "1298370",
    "end": "1304340"
  },
  {
    "text": "I've got a graphical realization\nof the Hadamard transform relationship that involves only\nbinary variables, first of all.",
    "start": "1304340",
    "end": "1314330"
  },
  {
    "text": "All the internal variables\nhere are just bits. They're all binary. And all of the constraint nodes\nare these simple little degree",
    "start": "1314330",
    "end": "1323070"
  },
  {
    "text": "3 constraint nodes. The only two nontrivial ones\nyou will probably ever see.",
    "start": "1323070",
    "end": "1329950"
  },
  {
    "text": "Namely, the zero\nsum type of node and the equality type of node. 3, 2, 2 and 3, 1, 1 if we\nconsider them as codes.",
    "start": "1329950",
    "end": "1339250"
  },
  {
    "text": "So it's made up of\nextremely simple elements. And in that sense, we can say\nit's a simple randomization.",
    "start": "1339250",
    "end": "1347290"
  },
  {
    "text": "But of course, this\ngraph is full of cycles, isn't that right?",
    "start": "1347290",
    "end": "1352670"
  },
  {
    "text": "Yes. These little things\ncause cycles. So we get cycles as we go\naround like that, for instance.",
    "start": "1352670",
    "end": "1359919"
  },
  {
    "text": " Nonetheless, it's a perfectly--\nyou put something over here",
    "start": "1359920",
    "end": "1367950"
  },
  {
    "text": "and you get something\ndeterministic out over here. ",
    "start": "1367950",
    "end": "1373090"
  },
  {
    "text": "All right. So to realize the 8, 4, 4 code--\nare you all with me on this?",
    "start": "1373090",
    "end": "1382070"
  },
  {
    "text": "I should check again. Is there anybody who\ndoesn't understand this?",
    "start": "1382070",
    "end": "1387671"
  },
  {
    "text": "That's always the way\nto put the question. Yes? AUDIENCE: You count the output\nwhen you're counting degree?",
    "start": "1387671",
    "end": "1393674"
  },
  {
    "text": "PROFESSOR: Do I count the\noutput when I'm counting degree? In this case, yes.",
    "start": "1393674",
    "end": "1399279"
  },
  {
    "text": "I reserve my options on that. Sometimes I do,\nsometimes I don't. It's whatever is convenient.",
    "start": "1399280",
    "end": "1405059"
  },
  {
    "text": "My choice. Sorry, I think I just\nwhacked the microphone. ",
    "start": "1405060",
    "end": "1412390"
  },
  {
    "text": "OK. So now, let me go to\nmy Reed-Muller code",
    "start": "1412390",
    "end": "1418440"
  },
  {
    "text": "realization, the 8, 4, 4 code. How are we going\nto realize that? We've got these internal\nvariables here, some of which",
    "start": "1418440",
    "end": "1426809"
  },
  {
    "text": "we're going to hold to 0. ",
    "start": "1426810",
    "end": "1431930"
  },
  {
    "text": "These four we're\ngoing to hold to 0. ",
    "start": "1431930",
    "end": "1438310"
  },
  {
    "text": "And the rest we're\ngoing to let go free. And so I claim\nthat already now I have a realization of the 8,\n4, 4 code, if I regard these",
    "start": "1438310",
    "end": "1446830"
  },
  {
    "text": "as internal variables, these\nas my external variables",
    "start": "1446830",
    "end": "1451975"
  },
  {
    "text": "over here.  OK, does everyone find\nthat plausible at least?",
    "start": "1451975",
    "end": "1460755"
  },
  {
    "text": "OK. But having done that--\nnow, watch this part",
    "start": "1460755",
    "end": "1466407"
  },
  {
    "text": "closely because this\npart you're going to have to imitate\non the homework. We can do some reductions.",
    "start": "1466407",
    "end": "1473980"
  },
  {
    "text": "All right. If I have a 2 by 2\nHadamard transform of 0, 0,",
    "start": "1473980",
    "end": "1480250"
  },
  {
    "text": "what's the result? 0, 0. OK. I can do that in several steps,\nbut that's a good way to do it.",
    "start": "1480250",
    "end": "1488500"
  },
  {
    "text": "So I don't really\nneed these gates here. I can just put 0's over here. ",
    "start": "1488500",
    "end": "1496020"
  },
  {
    "text": "Similarly, down here if I have\na 2 by 2 Hadamard transform of 2 free variables, internal\nvariables, what do I get?",
    "start": "1496020",
    "end": "1505390"
  },
  {
    "text": "I get two free variables. One of them happens to be\nu3 plus u7 and the other one",
    "start": "1505390",
    "end": "1513460"
  },
  {
    "text": "is just u7. I could call this\nu3 prime, let's say.",
    "start": "1513460",
    "end": "1518710"
  },
  {
    "text": "And since it's an\ninternal variable that I'm just using\nto generate the code,",
    "start": "1518710",
    "end": "1524640"
  },
  {
    "text": "I can delete that, too. ",
    "start": "1524640",
    "end": "1534670"
  },
  {
    "text": "So what can I do\nabout these here? When I have one free\nvariable and one zero,",
    "start": "1534670",
    "end": "1539970"
  },
  {
    "text": "what's going to happen? This free variable is going\nto come through here and here. ",
    "start": "1539970",
    "end": "1546690"
  },
  {
    "text": "The 0 doesn't count\nhere, so a plus just becomes a repetition in effect.",
    "start": "1546690",
    "end": "1553180"
  },
  {
    "text": "It's got to have the same\nparity as this input, so it is that input. ",
    "start": "1553180",
    "end": "1560430"
  },
  {
    "text": "So by another major\nsweep, I'll just--",
    "start": "1560430",
    "end": "1566037"
  },
  {
    "text": "this is an internal variable. I'll just call this u6. OK, I don't need to actually\ndraw a gate to generate it.",
    "start": "1566037",
    "end": "1574395"
  },
  {
    "text": "It has to be the\nsame here and here, so I have to tie it together. ",
    "start": "1574395",
    "end": "1579856"
  },
  {
    "text": "Similarly, down here I\ncan just call this u5. ",
    "start": "1579856",
    "end": "1594510"
  },
  {
    "text": "And now, continuing\nin here-- I hope this is going to come out all right. It doesn't seem\nquite right so far,",
    "start": "1594510",
    "end": "1600600"
  },
  {
    "text": "but let's see how it comes out.  What do we have coming in here?",
    "start": "1600600",
    "end": "1606390"
  },
  {
    "text": "We have two different\nfree variables. So again, let me just\ncall this u3 prime again.",
    "start": "1606390",
    "end": "1618950"
  },
  {
    "text": "And this is maybe u5 prime. But in any case, I\ncan just draw this.",
    "start": "1618950",
    "end": "1625884"
  },
  {
    "text": " In this case, I'm\ncoming around this way.",
    "start": "1625885",
    "end": "1633830"
  },
  {
    "text": "And u3 prime was\ndangling anyway, so I can leave that over here.",
    "start": "1633830",
    "end": "1641720"
  },
  {
    "text": "And similarly down here,\nI get two free ones, so let me just call\nthem like this.",
    "start": "1641720",
    "end": "1649100"
  },
  {
    "text": " And this is equal to y7. ",
    "start": "1649100",
    "end": "1659841"
  },
  {
    "text": "Well, it's a little strange. I did something wrong there.",
    "start": "1659841",
    "end": "1667049"
  },
  {
    "text": "I did something wrong. Well, maybe not. Maybe not.",
    "start": "1667050",
    "end": "1672385"
  },
  {
    "text": " This is not going the way\nit's gone in the past, so maybe I drew the graph\ndifferently in the first place.",
    "start": "1672385",
    "end": "1680529"
  },
  {
    "text": "This is u6 again. This is still u6 up here.",
    "start": "1680530",
    "end": "1687190"
  },
  {
    "text": "But this is a 0. So this is u6 also\ncoming out here.",
    "start": "1687190",
    "end": "1692260"
  },
  {
    "text": "But I need this\nlittle-- I do need",
    "start": "1692260",
    "end": "1697870"
  },
  {
    "text": "to replicate u6 three times. And maybe that's what\nI needed down here too,",
    "start": "1697870",
    "end": "1702970"
  },
  {
    "text": "was to replicate u5 three times. AUDIENCE: [INAUDIBLE]. ",
    "start": "1702970",
    "end": "1711916"
  },
  {
    "text": "PROFESSOR: Excuse me? AUDIENCE: The bottom line.  PROFESSOR: Say again,\nI just didn't hear it.",
    "start": "1711916",
    "end": "1718430"
  },
  {
    "text": "AUDIENCE: The bottom line. You remove that\n[INAUDIBLE] shortcut. PROFESSOR: I removed--\nthis equaled a shortcut.",
    "start": "1718430",
    "end": "1725927"
  },
  {
    "text": "AUDIENCE: Yeah. But the [INAUDIBLE]. PROFESSOR: There was an\n[INAUDIBLE] on top of it, right.",
    "start": "1725927",
    "end": "1731350"
  },
  {
    "text": "And-- AUDIENCE: That\ncannot be replaced. PROFESSOR: That cannot be\nreplaced by a shortcut.",
    "start": "1731350",
    "end": "1736938"
  },
  {
    "text": "OK. Thank you. ",
    "start": "1736938",
    "end": "1742270"
  },
  {
    "text": "So it should look like that?  I don't know.",
    "start": "1742270",
    "end": "1747550"
  },
  {
    "text": "I think I've botched\nit, so you're going to do it right\non the homework. Let me just-- yeah, good.",
    "start": "1747550",
    "end": "1759870"
  },
  {
    "text": "This is what it\nshould look like. You do need the equals there. ",
    "start": "1759870",
    "end": "1767840"
  },
  {
    "text": "It's because I drew the graph\nbackwards in the first place. ",
    "start": "1767840",
    "end": "1774809"
  },
  {
    "text": "Anyway, presto change-o. Going through that\nkind of manipulation,",
    "start": "1774810",
    "end": "1781145"
  },
  {
    "text": "what we eventually\ncome up with is something that looks like this.",
    "start": "1781145",
    "end": "1788360"
  },
  {
    "start": "1788360",
    "end": "1804090"
  },
  {
    "text": "And I apologize for botching it. ",
    "start": "1804090",
    "end": "1819330"
  },
  {
    "text": "And coming around,\nthis is tied to this and this is tied to that.",
    "start": "1819330",
    "end": "1825289"
  },
  {
    "start": "1825290",
    "end": "1831900"
  },
  {
    "text": "All right. And I asked you to imagine\nthat if I-- what I did",
    "start": "1831900",
    "end": "1837090"
  },
  {
    "text": "was since I can draw\nthe Hadamard transform-- either way, I drew\nit the wrong way.",
    "start": "1837090",
    "end": "1842980"
  },
  {
    "text": "And therefore, I wasn't going\nto get what I intended to get, which is this.",
    "start": "1842980",
    "end": "1849150"
  },
  {
    "text": "But it's done\ncorrectly in Figure 10. And the types of reductions\nthat I explained to you",
    "start": "1849150",
    "end": "1855950"
  },
  {
    "text": "are the types of reduction\nthat's necessarily to get from Figure 10A to 10B. Please do try this at home.",
    "start": "1855950",
    "end": "1862280"
  },
  {
    "text": " Now, so I claim that this\nis a realization of the 8,",
    "start": "1862280",
    "end": "1871965"
  },
  {
    "text": "4, 4 code. And you can verify that\neither by putting--",
    "start": "1871965",
    "end": "1880370"
  },
  {
    "text": "you'll find there are four\nfree internal variables here and you can either set them\nto 1 or you can try this trick",
    "start": "1880370",
    "end": "1889500"
  },
  {
    "text": "that I discussed\nbefore, I think. That we can regard these\nas an information set.",
    "start": "1889500",
    "end": "1895290"
  },
  {
    "text": "And by fixing y0,\ny1, y2, and y4, you can trace your\nway through the graph",
    "start": "1895290",
    "end": "1902870"
  },
  {
    "text": "and find out that y3, y5,\ny6, and y7 are determined.",
    "start": "1902870",
    "end": "1910640"
  },
  {
    "text": "Again, do try this at home.  So you can convince\nyourself that this",
    "start": "1910640",
    "end": "1917490"
  },
  {
    "text": "is a graph for 6-- that has\n16 possible solutions for all",
    "start": "1917490",
    "end": "1922660"
  },
  {
    "text": "the internal and\nexternal variables. 16 possible trajectories\nthat are valid that",
    "start": "1922660",
    "end": "1928029"
  },
  {
    "text": "satisfy all the\ninternal constraints. And that the external\n8 tuples that",
    "start": "1928030",
    "end": "1933510"
  },
  {
    "text": "are parts of these trajectories\nare the 8 tuples of the 8,",
    "start": "1933510",
    "end": "1938870"
  },
  {
    "text": "4, 4 code. I just assert that now. Please verify it. ",
    "start": "1938870",
    "end": "1945820"
  },
  {
    "text": "All right, so now\nlet's step back and take a look at\nthis realization.",
    "start": "1945820",
    "end": "1954070"
  },
  {
    "text": "I believe it's the simplest\nrepresentation of the 8, 4, 4 codes if you account the\ncomplexity of the constraints",
    "start": "1954070",
    "end": "1963470"
  },
  {
    "text": "and of the variables. Notice that all the internal\nvariables, the states",
    "start": "1963470",
    "end": "1968810"
  },
  {
    "text": "if you like, they're all binary. So it's a two-state\nrepresentation if we want to use that language,\nthat all the constraints are",
    "start": "1968810",
    "end": "1976980"
  },
  {
    "text": "simple, either 3, 2, 2\nor 3, 1, 3 constraints. We count that as the branch\ncomplexity in effect.",
    "start": "1976980",
    "end": "1985240"
  },
  {
    "text": "This isn't a\ntrellis, but this is what's analogous to\nthe branch complexity as we'll see when we get to\nthe sum product algorithm.",
    "start": "1985240",
    "end": "1992240"
  },
  {
    "text": "The complexity is\nproportional to the number of code words in each\nof these constraints.",
    "start": "1992240",
    "end": "1997750"
  },
  {
    "text": "So there are either\n2 or 4 code words. It's a very simple realization. And there are only 12\nof these constraints.",
    "start": "1997750",
    "end": "2006600"
  },
  {
    "text": "On the other hand, it does have\ncycles, like this cycle here.",
    "start": "2006600",
    "end": "2012679"
  },
  {
    "text": " When we get to the\nsum product algorithm,",
    "start": "2012680",
    "end": "2017832"
  },
  {
    "text": "we'll see that there's\na fundamental difference between decoding on a graph\nwith cycles and a graph",
    "start": "2017832",
    "end": "2023910"
  },
  {
    "text": "without cycles. Without cycles, we get an\nexact decoding algorithm. It does maximum\nlikelihood decoding,",
    "start": "2023910",
    "end": "2030340"
  },
  {
    "text": "like the Viterbi algorithm. Or actually, a posteriori\nprobability decoding.",
    "start": "2030340",
    "end": "2037700"
  },
  {
    "text": "And in any case, it gives us\nthe optimum, in some sense.",
    "start": "2037700",
    "end": "2043710"
  },
  {
    "text": "When we decode on a\ngraph with cycles, we get some degradation\nfrom the optimum.",
    "start": "2043710",
    "end": "2050169"
  },
  {
    "text": "Sae-Young Chung tried\ndecoding with this. And as I remember, it was a few\ntenths of [? db ?] sub-optimum.",
    "start": "2050170",
    "end": "2057590"
  },
  {
    "text": "It wasn't bad. But it wasn't optimum either. So that's the trade-off we make.",
    "start": "2057590",
    "end": "2063030"
  },
  {
    "text": "Suppose we want to make this\ninto a cycle-free graph.",
    "start": "2063030",
    "end": "2070179"
  },
  {
    "text": "We can probably do\nthat by agglomeration. ",
    "start": "2070179",
    "end": "2077138"
  },
  {
    "text": "Let me suggest the\nfollowing agglomeration. Let's make all of\nthis-- let's suppress",
    "start": "2077139",
    "end": "2084138"
  },
  {
    "text": "that cycle into one big block. Let's suppress this\ncycle into one big block.",
    "start": "2084139",
    "end": "2091940"
  },
  {
    "text": "So we're going to consider\nthis one overall constraint.",
    "start": "2091940",
    "end": "2097089"
  },
  {
    "text": "What is that constraint? We have two outputs. Or I'm sorry, two\nvariables over here.",
    "start": "2097090",
    "end": "2104240"
  },
  {
    "text": "We have four\nvariables over here. So it's going to be\nsome code of length 6.",
    "start": "2104240",
    "end": "2109520"
  },
  {
    "text": "And from the fact that you have\nthree inputs coming in here, you might guess it's going to\nbe a 6, 3 code, which it is.",
    "start": "2109520",
    "end": "2116570"
  },
  {
    "start": "2116570",
    "end": "2121950"
  },
  {
    "text": "So if we do that,\nwe simply get 6, 3.",
    "start": "2121950",
    "end": "2127619"
  },
  {
    "text": "And similarly, a 6, 3\nconstraint down here.",
    "start": "2127620",
    "end": "2132950"
  },
  {
    "text": "There are 8 possible\nvalid behaviors just for this constraint.",
    "start": "2132950",
    "end": "2139190"
  },
  {
    "text": "And again, since everything\nis self-dual here,",
    "start": "2139190",
    "end": "2148490"
  },
  {
    "text": "it's going to be 6, 3. So let me, again, assert that. Does anybody recognize\nwhat this realization is?",
    "start": "2148490",
    "end": "2155010"
  },
  {
    "start": "2155010",
    "end": "2163204"
  },
  {
    "text": "Would it help if I\ndrew it like this? ",
    "start": "2163204",
    "end": "2176970"
  },
  {
    "text": "This is four variables,\nfour variables. ",
    "start": "2176970",
    "end": "2187579"
  },
  {
    "text": "Anybody? Come on, you've\nseen this before. AUDIENCE: [INAUDIBLE]. PROFESSOR: No.",
    "start": "2187580",
    "end": "2192610"
  },
  {
    "text": " This is a realization\nof a different style.",
    "start": "2192610",
    "end": "2198180"
  },
  {
    "text": "This is now a\ncycle-free realization, as you can easily see either\nfrom this or from-- well,",
    "start": "2198180",
    "end": "2205520"
  },
  {
    "text": "it's cycle-free now. Sorry, I should\ndo one more thing. I should make this into\na quaternary variable.",
    "start": "2205520",
    "end": "2215840"
  },
  {
    "text": "So this will be 2. It's basically u5,\nu6 in this notation.",
    "start": "2215840",
    "end": "2221455"
  },
  {
    "text": " Without doing that,\nthere's still a cycle. This little cycle going back and\nforth there as we said before.",
    "start": "2221455",
    "end": "2229085"
  },
  {
    "text": " So somebody I heard say it.",
    "start": "2229085",
    "end": "2236260"
  },
  {
    "text": "Say it again. AUDIENCE: Trellis. PROFESSOR: Trellis. It's our two-section\ntrellis realization of the 8, 4, 4 code\nwhere we divide a code",
    "start": "2236260",
    "end": "2244200"
  },
  {
    "text": "word into two\nsections of length 4. And simply, this is the\ntrellis at the first half.",
    "start": "2244200",
    "end": "2252990"
  },
  {
    "text": "Eight possible lines,\neach one containing",
    "start": "2252990",
    "end": "2258310"
  },
  {
    "text": "two parallel transitions. Sorry. Four lines each containing\ntwo parallel transitions",
    "start": "2258310",
    "end": "2264900"
  },
  {
    "text": "going to one of eight states. ",
    "start": "2264900",
    "end": "2270630"
  },
  {
    "text": "And that's what the\nactual trellis looks like. ",
    "start": "2270630",
    "end": "2276570"
  },
  {
    "text": "So this is, indeed, cycle-free. What's the difference\nbetween this realization",
    "start": "2276570",
    "end": "2283130"
  },
  {
    "text": "and the other one? Well, first of all,\nwe've got four states in this cycle-free realization\nand we've got-- certainly,",
    "start": "2283130",
    "end": "2292100"
  },
  {
    "text": "a much larger\nconstraint code here, which will turn into complexity,\ncomputational complexity,",
    "start": "2292100",
    "end": "2297590"
  },
  {
    "text": "when we go to decoding. Now, we've got a\nbranch complexity of 8. Whereas, we never had\nanything larger than 4",
    "start": "2297590",
    "end": "2305450"
  },
  {
    "text": "in the zero sum constraints\nof the previous diagram. So in that sense, this\nis more complicated.",
    "start": "2305450",
    "end": "2313050"
  },
  {
    "text": "Its state complexity,\nits branch complexity is higher than the\ncycle-free one that we did.",
    "start": "2313050",
    "end": "2318770"
  },
  {
    "text": "Than the one with cycles,\nbut it's cycle-free. You remember also\nwe did this one.",
    "start": "2318770",
    "end": "2326520"
  },
  {
    "text": "We have both of\nthese going down here and we consider them each\nto be a binary variable,",
    "start": "2326520",
    "end": "2335340"
  },
  {
    "text": "then we get our\ntail-biting realization, which is only two states. But it now has a cycle.",
    "start": "2335340",
    "end": "2341652"
  },
  {
    "text": "And if we're going\nto go to cycles, I would go all the\nway to that other one. But maybe not. If you decode this\ntail-biting realization,",
    "start": "2341652",
    "end": "2348960"
  },
  {
    "text": "maybe its performance\nis a little bit better because it more\nfaithfully represents",
    "start": "2348960",
    "end": "2355050"
  },
  {
    "text": "what's going on inside the\ncircuit than the other one.",
    "start": "2355050",
    "end": "2361540"
  },
  {
    "text": "How many different\nways have we had of realizing the\n8, 4, 4 code now? We've had at least half a\ndozen, maybe more than that.",
    "start": "2361540",
    "end": "2369650"
  },
  {
    "text": "And this is all to\nillustrate the various styles that we have.",
    "start": "2369650",
    "end": "2374760"
  },
  {
    "text": "We've now had at least\none of each style. And now we have one\nof Hadamard transform.",
    "start": "2374760",
    "end": "2382109"
  },
  {
    "text": "Or, as I'm going to call it,\nwe have a reduced Hadamard transform, the one with only\nthe 12 simple constraints in it.",
    "start": "2382110",
    "end": "2392530"
  },
  {
    "text": "Or, we also have the\nagglomerated Hadamard transform, which gets\nus to cycle-free.",
    "start": "2392530",
    "end": "2402744"
  },
  {
    "text": "This has cycles. But this is simple and this\nis, at least, more complex.",
    "start": "2402744",
    "end": "2413440"
  },
  {
    "text": "So there's a trade. What do you want? ",
    "start": "2413440",
    "end": "2422270"
  },
  {
    "text": "OK. Just one more side\ncomment on the subject.",
    "start": "2422270",
    "end": "2428220"
  },
  {
    "text": " For exercise 2, which\nI didn't assign,",
    "start": "2428220",
    "end": "2438289"
  },
  {
    "text": "shows that in general\nan agglomerated Hadamard",
    "start": "2438290",
    "end": "2445870"
  },
  {
    "text": "transform realization\nof a Reed-Muller code,",
    "start": "2445870",
    "end": "2451290"
  },
  {
    "text": "you can always get one\nthat looks like this.",
    "start": "2451290",
    "end": "2457950"
  },
  {
    "text": "Let's see. ",
    "start": "2457950",
    "end": "2468230"
  },
  {
    "text": "Which is sort of a four-section\nrealization where each of these",
    "start": "2468230",
    "end": "2474020"
  },
  {
    "text": "has length 2 to the m minus 2. ",
    "start": "2474020",
    "end": "2483430"
  },
  {
    "text": "This is like the\nfour-section realization of the Reed-Muller code. ",
    "start": "2483430",
    "end": "2490240"
  },
  {
    "text": "Each of these\nstate variables has dimension which meets\nthe cut-set bound.",
    "start": "2490240",
    "end": "2497550"
  },
  {
    "text": "And the cut-set\nbound for a cut that divides the trellis into one\nquarter and three quarters",
    "start": "2497550",
    "end": "2510780"
  },
  {
    "text": "or one half and one half. You remember all\nof these dimensions",
    "start": "2510780",
    "end": "2517240"
  },
  {
    "text": "were the same as\nsimply the state dimension of a\nfour-section trellis.",
    "start": "2517240",
    "end": "2524910"
  },
  {
    "text": "And I hope you remember that\nthe state dimensions were the same at all four boundaries.",
    "start": "2524910",
    "end": "2530609"
  },
  {
    "text": "So we always get\nthe same dimension for each of these, the same\nas in a four-section trellis.",
    "start": "2530610",
    "end": "2537609"
  },
  {
    "text": "And we get the minimal\ntrellis complexity here. So this is going to\nturn out to be length",
    "start": "2537610",
    "end": "2544040"
  },
  {
    "text": "equals 3s and k equals\nt, where t is the branch",
    "start": "2544040",
    "end": "2553740"
  },
  {
    "text": "complexity, the minimal\nbranch complexity parameter for a\ntrellis that we had in a table back in Chapter 6.",
    "start": "2553740",
    "end": "2562925"
  },
  {
    "text": " So this actually turns out\nto be a nice-- the nicest",
    "start": "2562925",
    "end": "2570940"
  },
  {
    "text": "I know-- cycle-free realization\nof a Reed-Muller code.",
    "start": "2570940",
    "end": "2575990"
  },
  {
    "text": "For instance, for a 32,\n16, 8 code these dimensions are 18, 9, 18, 9.",
    "start": "2575990",
    "end": "2585010"
  },
  {
    "text": "These are all 6. It's a 64-state\nrealization with 8 symbols",
    "start": "2585010",
    "end": "2593400"
  },
  {
    "text": "at each of these points. And each of these\nis a 14, 7 code.",
    "start": "2593400",
    "end": "2598930"
  },
  {
    "text": " Is this fundamentally simpler\nthan a four-section trellis",
    "start": "2598930",
    "end": "2606860"
  },
  {
    "text": "realization of the\n32, 16, 8 code? Not really. The branch complexity\nis the same",
    "start": "2606860",
    "end": "2613110"
  },
  {
    "text": "as it is in the central\nsections of this code. This is very close\nto being a-- it",
    "start": "2613110",
    "end": "2620140"
  },
  {
    "text": "is a four-section\nrealization if we draw the four\nsections like this. ",
    "start": "2620140",
    "end": "2630240"
  },
  {
    "text": "Except we have to draw a little\nadditional thing up here, which is slightly helpful.",
    "start": "2630240",
    "end": "2636535"
  },
  {
    "text": " So it's sort of a expanded\ntrellis that looks like this.",
    "start": "2636535",
    "end": "2646495"
  },
  {
    "start": "2646495",
    "end": "2659590"
  },
  {
    "text": "OK, so maybe think of that as a\nquote, \"explanation\" for this.",
    "start": "2659590",
    "end": "2670090"
  },
  {
    "text": " And I give explicit expressions\nfor s and particularly",
    "start": "2670090",
    "end": "2677430"
  },
  {
    "text": "for t, which perhaps\nyou can derive or perhaps you don't care.",
    "start": "2677430",
    "end": "2683740"
  },
  {
    "text": "You won't be held\nresponsible for it, anyway. ",
    "start": "2683740",
    "end": "2689269"
  },
  {
    "text": "You might even remember that\nthe Golay code, the 24, 12,",
    "start": "2689270",
    "end": "2694590"
  },
  {
    "text": "8 realization, which\nlooked very much like this",
    "start": "2694590",
    "end": "2702030"
  },
  {
    "text": "but contained only three\nsections, each of length 8",
    "start": "2702030",
    "end": "2707090"
  },
  {
    "text": "and a single 18, 9\nconstraint in the middle.",
    "start": "2707090",
    "end": "2712190"
  },
  {
    "text": "These were all 6. Maybe you remember\nthat, maybe you don't. But that's a realization\nof the Golay code.",
    "start": "2712190",
    "end": "2719480"
  },
  {
    "text": "And it shows that these two\ncodes are very close cousins. There are many ways of\nshowing that they're",
    "start": "2719480",
    "end": "2724542"
  },
  {
    "text": "very close cousins. They are. OK, so now I'm just going\noff into side comments.",
    "start": "2724542",
    "end": "2732420"
  },
  {
    "text": "You obviously won't\nbe held responsible for any of the side comments. But I hope they give you\nsomething of a flavor",
    "start": "2732420",
    "end": "2739360"
  },
  {
    "text": "for how the subject\ncan be developed. ",
    "start": "2739360",
    "end": "2747720"
  },
  {
    "start": "2746000",
    "end": "2914000"
  },
  {
    "text": "OK, that's the\nend of Chapter 11. There is an appendix\nin Chapter 11 that talks about other\nflavors of graphs.",
    "start": "2747720",
    "end": "2755530"
  },
  {
    "text": "Factor graphs is a more\nembracing philosophically,",
    "start": "2755530",
    "end": "2762040"
  },
  {
    "text": "conceptually notion where each\nof the constraints, instead of representing codes represents\nthe factors, local factors,",
    "start": "2762040",
    "end": "2772740"
  },
  {
    "text": "some global function\nfactors into a product of local functions. The local functions are\nrepresented by constraints.",
    "start": "2772740",
    "end": "2780030"
  },
  {
    "text": "It's a nice way of\nlooking at things. It's not strictly\nnecessary for this course, so I haven't gone into it.",
    "start": "2780030",
    "end": "2785920"
  },
  {
    "text": "But most of the literature now\nis in terms of factor graphs. ",
    "start": "2785920",
    "end": "2792050"
  },
  {
    "text": "In other fields, we\nhave related topics, like Markov graphs or\nMarkov random fields.",
    "start": "2792050",
    "end": "2799640"
  },
  {
    "text": "And slight\ndifferences in choices have been made in these areas.",
    "start": "2799640",
    "end": "2805920"
  },
  {
    "text": "Here, you see we're\nputting all the variables on the edges and the\nconstraints as nodes in a graph.",
    "start": "2805920",
    "end": "2812800"
  },
  {
    "text": "And that's the\nnormal graph style. In Markov graphs,\nthey make exactly the opposite convention.",
    "start": "2812800",
    "end": "2818300"
  },
  {
    "text": "They make the variables into\nnodes, which is probably what most people would\ndo if they sat down",
    "start": "2818300",
    "end": "2825120"
  },
  {
    "text": "to start doing a graphical\nmodel of something. And they make the\nconstraints into edges.",
    "start": "2825120",
    "end": "2832302"
  },
  {
    "text": "But there are several\nproblems with that. One is that if you have a\nconstraint of larger degree than 2, then you really\nneed a hyper-edge,",
    "start": "2832302",
    "end": "2839380"
  },
  {
    "text": "which is represented\nby a clique. And cliques sometimes\nintroduce artifacts",
    "start": "2839380",
    "end": "2846349"
  },
  {
    "text": "that you don't really want. So I think it's actually\nan inferior style, but it's a very popular\nstyle in some fields.",
    "start": "2846350",
    "end": "2854200"
  },
  {
    "text": "Physics, particularly, for\nindicating dependencies. All of these\ngraphical models are",
    "start": "2854200",
    "end": "2860670"
  },
  {
    "text": "methods of indicating\ndependencies and what's related to what.",
    "start": "2860670",
    "end": "2866480"
  },
  {
    "text": "There's another style. It's very popular in\nstatistical inference, which is called\nBayesian networks.",
    "start": "2866480",
    "end": "2874250"
  },
  {
    "text": "And this style is\nsimilar to ours except the graphs are directed.",
    "start": "2874250",
    "end": "2881050"
  },
  {
    "text": "Everything is a cause\nand effect relationship. So you have one variable\nthat causes another variable.",
    "start": "2881050",
    "end": "2888109"
  },
  {
    "text": "We've generally stayed away\nfrom cause and effect here. We've used the behavioral\nstyle, undirected graph.",
    "start": "2888110",
    "end": "2896440"
  },
  {
    "text": "But Bayesian networks\nhave been hugely popular in statistical inference.",
    "start": "2896440",
    "end": "2902640"
  },
  {
    "text": "And so the appendix is just\nto explain the relationship between these various styles.",
    "start": "2902640",
    "end": "2909829"
  },
  {
    "text": "And obviously, you can\nwork with any of them. It's a matter of preference.",
    "start": "2909830",
    "end": "2915040"
  },
  {
    "text": "OK, any other questions\nabout Chapter 11?",
    "start": "2915040",
    "end": "2920200"
  },
  {
    "text": "This was the basic introduction\nto codes on graphs. Chapter 11 is, what\nare codes on graphs?",
    "start": "2920200",
    "end": "2926650"
  },
  {
    "text": "Chapter 12 is, how do we\ndecode codes on graphs? Which is the sum\nproduct algorithm.",
    "start": "2926650",
    "end": "2934080"
  },
  {
    "text": "So we'll move into that now. And then Chapter\n13, we'll actually talk about classes of\ncapacity-approaching codes.",
    "start": "2934080",
    "end": "2942609"
  },
  {
    "text": "So these three\nchapters certainly",
    "start": "2942610",
    "end": "2952340"
  },
  {
    "text": "form a closely related set that\nshould all be read together.",
    "start": "2952340",
    "end": "2959600"
  },
  {
    "text": "OK, what are the basic facts\nabout sum product algorithm? ",
    "start": "2959600",
    "end": "2967270"
  },
  {
    "text": "I'm going to describe it as a\nmethod of doing A Posteriori",
    "start": "2967270",
    "end": "2979520"
  },
  {
    "text": "Probability decoding,\nAPP decoding, initially",
    "start": "2979520",
    "end": "2985980"
  },
  {
    "text": "on cycle-free graphs. ",
    "start": "2985980",
    "end": "2999690"
  },
  {
    "text": "I'll define-- what do I mean\nby a posteriori probability decoding?",
    "start": "2999690",
    "end": "3004750"
  },
  {
    "text": "Then, we'll develop the\nalgorithm for cycle-free graphs where the theory is\nkind of complete.",
    "start": "3004750",
    "end": "3012214"
  },
  {
    "start": "3012215",
    "end": "3020600"
  },
  {
    "text": "There are various theorems\nthat you can easily prove about the performance\nof the algorithm here.",
    "start": "3020600",
    "end": "3026030"
  },
  {
    "text": "The algorithm completes in\na finite amount of time. Basically, equal\nthe amount of time",
    "start": "3026030",
    "end": "3031619"
  },
  {
    "text": "it takes to get from\none side of the graph to the other, which in\ngraph theory language is called the\ndiameter of the graph.",
    "start": "3031620",
    "end": "3038150"
  },
  {
    "text": "And it does exact a posteriori\nprobability decoding.",
    "start": "3038150",
    "end": "3043869"
  },
  {
    "text": "So if that's actually\nwhat you want to do, this is a good way of doing it.",
    "start": "3043870",
    "end": "3049450"
  },
  {
    "text": "If you do this on a trellis\nfor instance, it's the, by now,",
    "start": "3049450",
    "end": "3054740"
  },
  {
    "text": "well-known BCJR algorithm,\nfor Bahl, Cocke, Jelinek,",
    "start": "3054740",
    "end": "3060910"
  },
  {
    "text": "and Raviv, who published\nthis algorithm back in 1973.",
    "start": "3060910",
    "end": "3067380"
  },
  {
    "text": "Probably known in other\nfields before that. Actually, you can sort of\nfind it in Gallagher's thesis.",
    "start": "3067380",
    "end": "3074491"
  },
  {
    "text": "You can certainly find the\nsum product algorithm there. Anyway, the BCJR\nalgorithm is now",
    "start": "3074491",
    "end": "3083829"
  },
  {
    "text": "widely used as a component\nof these decoding algorithms for turbo codes, in particular,\nand capacity-approaching codes",
    "start": "3083830",
    "end": "3091230"
  },
  {
    "text": "in general because it's an\nexact way of decoding a trellis.",
    "start": "3091230",
    "end": "3097234"
  },
  {
    "text": "And probably fast. Although, we'll find it's\nmore complex than the Viterbi",
    "start": "3097235",
    "end": "3103450"
  },
  {
    "text": "algorithm. So if you are just interested\nin decoding a trellis, you would probably use\nthe Viterbi algorithm.",
    "start": "3103450",
    "end": "3110190"
  },
  {
    "text": "But you use the BCJR\nalgorithm when you actually want to compute the a\nposteriori probabilities.",
    "start": "3110190",
    "end": "3116630"
  },
  {
    "text": "And that's what\nyou want when it's part of a larger algorithm. ",
    "start": "3116630",
    "end": "3123360"
  },
  {
    "text": "So we'll do all the development\non cycle-free graph. Where we really,\neventually, want to use",
    "start": "3123360",
    "end": "3129350"
  },
  {
    "text": "it is on graphs with cycles. ",
    "start": "3129350",
    "end": "3135510"
  },
  {
    "text": "And there are\nhardly any theorems. In this case, you find yourself\ngoing around the cycles.",
    "start": "3135510",
    "end": "3142530"
  },
  {
    "text": " So there are all kinds\nof new questions. How do you start?",
    "start": "3142530",
    "end": "3148050"
  },
  {
    "text": "When do you stop? What are its\nconvergence properties? It becomes an iterative\nand approximate algorithm.",
    "start": "3148050",
    "end": "3156325"
  },
  {
    "text": " For instance, when I said that\ndecoding of that simple, little",
    "start": "3156325",
    "end": "3165680"
  },
  {
    "text": "reduced Hadamard transform\nrealization for the 8, 4, 4 code, which had\ncycles in it, I said it was a couple of tenths\nof [? db ?] sub-optimum.",
    "start": "3165680",
    "end": "3174120"
  },
  {
    "text": "That was obtained by\nrunning this algorithm on that little graph with\ncycles until it seemed",
    "start": "3174120",
    "end": "3180140"
  },
  {
    "text": "to have converged to something\nand plotting its performance. And it's not quite as\ngood as the performance",
    "start": "3180140",
    "end": "3185970"
  },
  {
    "text": "would be on a cycle-free\ngraph like this one.",
    "start": "3185970",
    "end": "3192250"
  },
  {
    "text": "All right, so you give up\nsomething in performance. And you give up-- it\nbecomes an algorithm",
    "start": "3192250",
    "end": "3203079"
  },
  {
    "text": "that runs indefinitely. And you'd have to figure\nout some stopping criterion",
    "start": "3203080",
    "end": "3208210"
  },
  {
    "text": "and so forth. All together, it's much\nmore, what are we doing here? We can't really say\nwith any precision what",
    "start": "3208210",
    "end": "3214910"
  },
  {
    "text": "we're doing here in most cases. Although, in Chapter 13, I'll\ngive some cases where we can",
    "start": "3214910",
    "end": "3220520"
  },
  {
    "text": "say quite precisely\nwhat it's doing. But it becomes much\nharder to analyze.",
    "start": "3220520",
    "end": "3226710"
  },
  {
    "text": "But in coding, this is\nactually what you want to do. This is what works.",
    "start": "3226710",
    "end": "3232810"
  },
  {
    "text": "Just try it on a graph with\ncycles and hope for the best. ",
    "start": "3232810",
    "end": "3238290"
  },
  {
    "text": "And because we design\nour own graphs in coding, we can design them so that\nthe algorithm works very well.",
    "start": "3238290",
    "end": "3245990"
  },
  {
    "text": "Basically, we want\nto design them to have cycles, but extremely\nlarge cycles, large girth.",
    "start": "3245990",
    "end": "3252790"
  },
  {
    "text": "And then the algorithm\ntends not to get confused and to be near optimal.",
    "start": "3252790",
    "end": "3258650"
  },
  {
    "text": "Because it takes a long\ntime for information to propagate around\nthe cycle and it's pretty attenuated\nwhen it comes back in.",
    "start": "3258650",
    "end": "3265109"
  },
  {
    "text": "Whereas, with the short\ncycles that you saw here, that's not good.",
    "start": "3265110",
    "end": "3270119"
  },
  {
    "text": "And in many of\nthese other fields, like physics for instance,\nimage processing,",
    "start": "3270120",
    "end": "3275329"
  },
  {
    "text": "you're dealing with graphs\nthat look like grids. ",
    "start": "3275330",
    "end": "3281720"
  },
  {
    "text": "Something like that. You have lots and\nlots of short cycles.",
    "start": "3281720",
    "end": "3287300"
  },
  {
    "text": "And then just applying\nthe sum product algorithm to a graph that\nlooks like that won't work well at all\nbecause you have",
    "start": "3287300",
    "end": "3293010"
  },
  {
    "text": "these little, short cycles.  So if you can design\nyour own graph,",
    "start": "3293010",
    "end": "3298890"
  },
  {
    "text": "this is a good thing to do. ",
    "start": "3298890",
    "end": "3304050"
  },
  {
    "start": "3302000",
    "end": "3600000"
  },
  {
    "text": "OK, so let's get into it. ",
    "start": "3304050",
    "end": "3309160"
  },
  {
    "text": "First of all, let\nme describe what",
    "start": "3309160",
    "end": "3316450"
  },
  {
    "text": "I mean by a posteriori\nprobability decoding. This means simply that\nfor every variable,",
    "start": "3316450",
    "end": "3323930"
  },
  {
    "text": "both internal variables\nand external variables,",
    "start": "3323930",
    "end": "3329180"
  },
  {
    "text": "we want to compute the\nprobability of that variable. Let's call it probability that\nsome external variable y, k",
    "start": "3329180",
    "end": "3338960"
  },
  {
    "text": "takes on some\nparticular value y, k given the entire\nreceived sequence.",
    "start": "3338960",
    "end": "3351210"
  },
  {
    "text": "OK, so you can think in\nterms of the 8, 4, 4 code. We're going to take this code.",
    "start": "3351210",
    "end": "3356519"
  },
  {
    "text": "We're going to transmit it over\nsome kind of a noisy channel. We're going to get\na received sequence.",
    "start": "3356519",
    "end": "3363310"
  },
  {
    "text": "And from that, we want to\nfigure out the probability that any particular input\nbit is equal to a 0 or a 1.",
    "start": "3363310",
    "end": "3370210"
  },
  {
    "text": "That might be more precisely\nwhat we're going to do. ",
    "start": "3370210",
    "end": "3376420"
  },
  {
    "text": "So we really want\nto develop a vector",
    "start": "3376420",
    "end": "3388079"
  },
  {
    "text": "consisting of the values of\nthis a posteriori probability",
    "start": "3388080",
    "end": "3393610"
  },
  {
    "text": "for all possible\nvalues of the variable. This is sometimes\ncalled a message.",
    "start": "3393610",
    "end": "3399360"
  },
  {
    "start": "3399360",
    "end": "3404390"
  },
  {
    "text": "But this is what we're\ngoing to try to compute. ",
    "start": "3404390",
    "end": "3409780"
  },
  {
    "text": "If we're actually\ndecoding a code and we get the a\nposteriori probabilities for all these variables,\nthen at the end of the day,",
    "start": "3409780",
    "end": "3420100"
  },
  {
    "text": "what do we want to do? We want to make hard\ndecisions on each of these",
    "start": "3420100",
    "end": "3426309"
  },
  {
    "text": "and decide what was sent. ",
    "start": "3426310",
    "end": "3431560"
  },
  {
    "text": "It's quite easy to show. Actually, I'm not sure\nI do this in the notes. That a posteriori\nprobability decoding",
    "start": "3431560",
    "end": "3438740"
  },
  {
    "text": "is what you want\nto do to minimize the probability of bit error.",
    "start": "3438740",
    "end": "3444180"
  },
  {
    "text": "What's the probability\nof bit error? It's the probability that y is\nnot what you guessed it was.",
    "start": "3444180",
    "end": "3450010"
  },
  {
    "text": "In other words, it's 1 minus\nthe max of all of these. You would choose the max.",
    "start": "3450010",
    "end": "3455470"
  },
  {
    "text": "The probability of it\nactually being the max is given by that a\nposteriori probability.",
    "start": "3455470",
    "end": "3460589"
  },
  {
    "text": "And 1 minus that\nis the probability that it's anything else. And that's the bit\nerror probability.",
    "start": "3460590",
    "end": "3466300"
  },
  {
    "text": "So doing maximum a posteriori\nprobability decoding",
    "start": "3466300",
    "end": "3472240"
  },
  {
    "text": "on a bit-wise basis is the way\nof minimizing the bit error probability.",
    "start": "3472240",
    "end": "3479232"
  },
  {
    "text": "Now, that isn't\nactually what we've been doing in the\nViterbi algorithm, for instance, or in\ngeneral in our decoding.",
    "start": "3479232",
    "end": "3484790"
  },
  {
    "text": "We've said, we want to minimize\nthe probability of decoding any code word on\na sequence basis.",
    "start": "3484790",
    "end": "3491400"
  },
  {
    "text": "We want to minimize the\nprobability of error in decoding the whole sequence.",
    "start": "3491400",
    "end": "3497020"
  },
  {
    "text": "So these are not\nexactly the same thing. In fact, if you do\nmax APP decoding,",
    "start": "3497020",
    "end": "3504599"
  },
  {
    "text": "you may not even\nget a code word. You'll make individual\ndecisions on each of these bits,",
    "start": "3504600",
    "end": "3510290"
  },
  {
    "text": "and that may not\nactually be a code word. There's nothing that\nrequires it to be.",
    "start": "3510290",
    "end": "3516000"
  },
  {
    "text": "Usually, it is. Usually, there's no difference. These algorithms tend to--\nat least in relatively good",
    "start": "3516000",
    "end": "3523090"
  },
  {
    "text": "signal noise, reach\nratio situations. They tend to both\ngive the same answer.",
    "start": "3523090",
    "end": "3529410"
  },
  {
    "text": "And the probability of\nbit error or word error is not markedly\ndifferent whichever one",
    "start": "3529410",
    "end": "3535890"
  },
  {
    "text": "you use as a practical matter. But it's certainly\npossible in principle",
    "start": "3535890",
    "end": "3541210"
  },
  {
    "text": "that since maximum likelihood\nsequence decoding gives you",
    "start": "3541210",
    "end": "3547290"
  },
  {
    "text": "the lowest word\nerror probability, maximum APP bit-wise\ndecoding has",
    "start": "3547290",
    "end": "3553520"
  },
  {
    "text": "got to give you a higher\nword error probability. So in any particular\nsituation, you've",
    "start": "3553520",
    "end": "3561566"
  },
  {
    "text": "got to decide which is\nmore important to you, minimizing the bit\nerror probability or minimizing the probability\nof any error in the whole block.",
    "start": "3561566",
    "end": "3569500"
  },
  {
    "text": "Actually, generally, the\nlatter is what you prefer. ",
    "start": "3569500",
    "end": "3574550"
  },
  {
    "text": "That governs your minimum\ntime between decoding errors and things like that. ",
    "start": "3574550",
    "end": "3585670"
  },
  {
    "text": "So that's a general discussion\nof what APP decoding is. Why do we want it here?",
    "start": "3585670",
    "end": "3591030"
  },
  {
    "text": "Because when we get to\ncapacity-approaching codes, we're going to talk\nabout big codes that",
    "start": "3591030",
    "end": "3597190"
  },
  {
    "text": "are made up of smaller codes. The great thing about this\ngraphical realization-- this",
    "start": "3597190",
    "end": "3603880"
  },
  {
    "text": "is realization of\nlinear systems. You realize a big system\nby putting together blocks",
    "start": "3603880",
    "end": "3611040"
  },
  {
    "text": "representing little systems. That's a good way\nof designing things for all kinds of reasons.",
    "start": "3611040",
    "end": "3616260"
  },
  {
    "text": "It's going to be\nthe way we design capacity-approaching codes. And we're going\nto want a decoding",
    "start": "3616260",
    "end": "3621950"
  },
  {
    "text": "algorithm for a\npart of a system. Say, this 6, 3 part,\nor say something else.",
    "start": "3621950",
    "end": "3628470"
  },
  {
    "text": "Say this whole thing is\na part of the system. This whole thing is just 8, 4.",
    "start": "3628470",
    "end": "3634840"
  },
  {
    "text": " That yields soft probabilistic\ninformation in the output",
    "start": "3634840",
    "end": "3643480"
  },
  {
    "text": "that we can then feed\ninto decoding algorithms for other parts of the system. So we won't want to\nmake hard decisions.",
    "start": "3643480",
    "end": "3649760"
  },
  {
    "text": "We'll want to feed the whole\nmessage, the whole vector of a posteriori\nprobabilities from one--",
    "start": "3649760",
    "end": "3657550"
  },
  {
    "text": "a partially decoded\npart of the system. We'll feed that into some other\npart and then go decode that.",
    "start": "3657550",
    "end": "3663930"
  },
  {
    "text": "For instance, in\nturbo codes we'll decode-- we'll make it up out\nof several convolutional codes.",
    "start": "3663930",
    "end": "3670000"
  },
  {
    "text": "There will be several trellises. We'll do BCJR decoding\nof one trellis.",
    "start": "3670000",
    "end": "3675160"
  },
  {
    "text": "That will give us a bunch of\na posteriori probabilities about the bits that are\ninvolved in that trellis,",
    "start": "3675160",
    "end": "3681620"
  },
  {
    "text": "then we'll pass them back\nto some other trellis decoder that's\ndecoding-- apparently,",
    "start": "3681620",
    "end": "3687994"
  },
  {
    "text": "a different trellis,\nbut involving some of the same bits.",
    "start": "3687995",
    "end": "3693430"
  },
  {
    "text": "So maybe I shouldn't go on too\nlong with these generalities,",
    "start": "3693430",
    "end": "3699140"
  },
  {
    "text": "but that's why APP\ndecoding is going to be a good thing for us to do.",
    "start": "3699140",
    "end": "3705510"
  },
  {
    "text": "And it's not because\nultimately we want to do APP decoding\nof a single code.",
    "start": "3705510",
    "end": "3710780"
  },
  {
    "text": "It's because we want\nthe soft decisions to feed into other decoding. ",
    "start": "3710780",
    "end": "3721400"
  },
  {
    "text": "All right. ",
    "start": "3721400",
    "end": "3726490"
  },
  {
    "text": "How do we compute this? Probability that\nyk equals yk given",
    "start": "3726490",
    "end": "3732180"
  },
  {
    "text": "r is going to be a basic\nprobability theory.",
    "start": "3732180",
    "end": "3739635"
  },
  {
    "text": "It's just the sum over\nall, let's say, code words",
    "start": "3739635",
    "end": "3747640"
  },
  {
    "text": "in which yk equals yk of the\nprobability of those code",
    "start": "3747640",
    "end": "3755599"
  },
  {
    "text": "words. So sum over all y.",
    "start": "3755600",
    "end": "3760790"
  },
  {
    "text": "I'm just making\nup notation here. In our code, we're\ngoing to have some code",
    "start": "3760790",
    "end": "3766890"
  },
  {
    "text": "words in the code\nthat have yk equals 0 and some code words\nthat have yk equals 1.",
    "start": "3766890",
    "end": "3772530"
  },
  {
    "text": "So we'll divide the code\nwords into two sets, the ones that are\ncompatible with yk equals 0",
    "start": "3772530",
    "end": "3778200"
  },
  {
    "text": "and the ones that are\ncompatible with yk equals 1. ",
    "start": "3778200",
    "end": "3788940"
  },
  {
    "text": "The a posteriori\nprobability of yk equals yk is simply the sum of\nthe a posteriori probabilities",
    "start": "3788940",
    "end": "3796450"
  },
  {
    "text": "that we get of any\nof those code words. ",
    "start": "3796450",
    "end": "3804000"
  },
  {
    "text": "I don't have to make\nproportional sign there.",
    "start": "3804000",
    "end": "3809190"
  },
  {
    "text": "But by Bayes' law, each of\nthese-- Bayes' p of y given r",
    "start": "3809190",
    "end": "3823420"
  },
  {
    "text": "is proportional to. Here's a sign that\na lot of people use. I'm not completely\ncomfortable with it yet,",
    "start": "3823420",
    "end": "3830530"
  },
  {
    "text": "but that means proportional to. Prop 2 in [INAUDIBLE].",
    "start": "3830530",
    "end": "3835640"
  },
  {
    "text": " Probability of r given y.",
    "start": "3835640",
    "end": "3842425"
  },
  {
    "text": "In other words, the a posteriori\nprobability of a code word is proportional to the\nprobability of r given y.",
    "start": "3842425",
    "end": "3849331"
  },
  {
    "text": "Why? Because by Bayes', it's actually\nequal to that times probability of y over probability of r.",
    "start": "3849331",
    "end": "3856009"
  },
  {
    "text": "But this is the same\nfor all of them. If the code words\nare all equiprobable, these are the same\nfor all of them.",
    "start": "3856010",
    "end": "3861620"
  },
  {
    "text": "So it's just proportional\nto the likelihood of getting r given\nthat you transmitted y.",
    "start": "3861620",
    "end": "3869250"
  },
  {
    "text": "I'm sure you've seen\nthis many times before, so I won't do in detail. So this is proportional\nto the same sum.",
    "start": "3869250",
    "end": "3881650"
  },
  {
    "text": "y in this code word,\nwhere y-- a portion of the code where yk equals y.",
    "start": "3881650",
    "end": "3889330"
  },
  {
    "text": "p of r given y. But that's easy.",
    "start": "3889330",
    "end": "3894695"
  },
  {
    "text": " I'm assuming that I have\na memoryless channel here.",
    "start": "3894695",
    "end": "3902349"
  },
  {
    "text": "That's been implicit\nthroughout this course, like the Additive White Gaussian\nNoise channel or the Binary",
    "start": "3902350",
    "end": "3907540"
  },
  {
    "text": "Symmetric channel. So this just breaks up into\na component-wise product.",
    "start": "3907540",
    "end": "3913160"
  },
  {
    "text": "This is just the product\nof p of-- over the k.",
    "start": "3913160",
    "end": "3928740"
  },
  {
    "text": "p of rk given yk. ",
    "start": "3928740",
    "end": "3942720"
  },
  {
    "text": "And because yk has the same--\nI should say k prime here.",
    "start": "3942720",
    "end": "3951780"
  },
  {
    "text": "Sorry, that's very confusing. So this is over all k prime.",
    "start": "3951780",
    "end": "3957280"
  },
  {
    "text": "But I can break this up. One of these terms\nis going to be k. For that, yk is fixed at little\nyk, at this particular value.",
    "start": "3957280",
    "end": "3970110"
  },
  {
    "text": "So I can write this in turn\nas this for k prime not equal",
    "start": "3970110",
    "end": "3976420"
  },
  {
    "text": "to k. And then I get a common term\nwhich is p of rk given yk.",
    "start": "3976420",
    "end": "3985050"
  },
  {
    "text": " OK, so this is the expression\nthat I want to compute.",
    "start": "3985050",
    "end": "3995579"
  },
  {
    "text": "Two comments. When I say \"sum\nproduct,\" it's really because this is just a\nsum of products here.",
    "start": "3995580",
    "end": "4003730"
  },
  {
    "text": "We see we want to\ncompute this actually rather nasty sum of products. We're looking for\nan efficient way",
    "start": "4003730",
    "end": "4009750"
  },
  {
    "text": "of computing the\nsum of products. And we're going to\nshow how this could be computed by tracing\nthrough the graph.",
    "start": "4009750",
    "end": "4015460"
  },
  {
    "text": " That's one comment. The second comment is that in\nthe literature, particularly",
    "start": "4015460",
    "end": "4026740"
  },
  {
    "text": "in the turbo code\nliterature, this has a name. ",
    "start": "4026740",
    "end": "4035730"
  },
  {
    "text": "This part, the direct\nlikelihood of the symbol given what you received\ncorresponding to that symbol,",
    "start": "4035730",
    "end": "4042450"
  },
  {
    "text": "is called the intrinsic\ninformation about y, k.",
    "start": "4042450",
    "end": "4050150"
  },
  {
    "text": "And this part, which has\nto do with, basically, the likelihood of yk given\nall the other yk prime,",
    "start": "4050150",
    "end": "4058650"
  },
  {
    "text": "for k prime not\nequal to k, is called the extrinsic information. ",
    "start": "4058650",
    "end": "4068480"
  },
  {
    "text": "We basically take\nthese two parts, which we can compute separately,\nand we multiply them together.",
    "start": "4068480",
    "end": "4078039"
  },
  {
    "text": "And we get the\noverall probability. So the probability consists\nof a part due to rk",
    "start": "4078040",
    "end": "4085120"
  },
  {
    "text": "and a part due to all\nthose other rk prime, which we're going to compute\nby going through the graph.",
    "start": "4085120",
    "end": "4090400"
  },
  {
    "text": " And I just introduced\nthis language",
    "start": "4090400",
    "end": "4095588"
  },
  {
    "text": "because if you\nread papers, you're going to see this\nthroughout the literature. ",
    "start": "4095589",
    "end": "4102484"
  },
  {
    "text": "OK. ",
    "start": "4102485",
    "end": "4107960"
  },
  {
    "text": "Let me start moving back. I never used this. ",
    "start": "4107960",
    "end": "4118549"
  },
  {
    "text": "Well, let me introduce\none more thing. So we want to compute\nall these messages.",
    "start": "4118550",
    "end": "4124210"
  },
  {
    "text": "In particular, we want to\ncompute the probability of yk equals yk given r.",
    "start": "4124210",
    "end": "4130600"
  },
  {
    "text": "This part here is really the\nr on k prime not equal to k.",
    "start": "4130600",
    "end": "4136068"
  },
  {
    "text": "Terrible notation. The other r's.",
    "start": "4136069",
    "end": "4141719"
  },
  {
    "text": "So that'll be a message. We also want to\ncompute similar things",
    "start": "4141720",
    "end": "4147469"
  },
  {
    "text": "for all the internal variables,\nwhich we have sometimes called state variables. ",
    "start": "4147470",
    "end": "4155810"
  },
  {
    "text": "And it breaks up\nin the same way. And I won't take the trouble\nto write out the expression.",
    "start": "4155810",
    "end": "4161500"
  },
  {
    "text": "But again, now we\nreally want to go over",
    "start": "4161500",
    "end": "4167830"
  },
  {
    "text": "all configurations which\nhave a particular state variable in them. So we're really going\nover all behaviors.",
    "start": "4167830",
    "end": "4176160"
  },
  {
    "text": "And we can compute\nprobabilities this way. I won't belabor that right now.",
    "start": "4176160",
    "end": "4181430"
  },
  {
    "text": "So we want messages, really,\nindicating the likelihood of each of the\nexternal variables",
    "start": "4181430",
    "end": "4191130"
  },
  {
    "text": "and each of the\ninternal variables. The whole set of\npossible likelihoods, the APP vector, the message,\nfor both the symbol variables",
    "start": "4191130",
    "end": "4200760"
  },
  {
    "text": "and the state variables. And that's what the\nsum product algorithm is going to do for us.",
    "start": "4200760",
    "end": "4206409"
  },
  {
    "text": " OK. ",
    "start": "4206409",
    "end": "4216000"
  },
  {
    "text": "So the sum product\nalgorithm is based",
    "start": "4216000",
    "end": "4221930"
  },
  {
    "text": "on-- I discuss it three parts.",
    "start": "4221930",
    "end": "4227290"
  },
  {
    "text": "One is the past future\ndecomposition of the code.",
    "start": "4227290",
    "end": "4236820"
  },
  {
    "text": "Another is the actual\nsum product update rule,",
    "start": "4236820",
    "end": "4244050"
  },
  {
    "text": "which is based on\nanother decomposition. ",
    "start": "4244050",
    "end": "4250870"
  },
  {
    "text": "And finally, we need\nan overall schedule. ",
    "start": "4250870",
    "end": "4260520"
  },
  {
    "text": "OK, so let me\ndiscuss this first. ",
    "start": "4260520",
    "end": "4268830"
  },
  {
    "text": "Let's take a particular\nstate variable. ",
    "start": "4268830",
    "end": "4278600"
  },
  {
    "text": "I only mean internal variable. And here it is. Somewhere in our big\ngraph, it's an edge.",
    "start": "4278600",
    "end": "4290190"
  },
  {
    "text": "Our big graph is cycle-free.  So what's the special property\nof edges in cycle-free graphs?",
    "start": "4290190",
    "end": "4297645"
  },
  {
    "text": " Every edge is a cut-set. ",
    "start": "4297645",
    "end": "4305920"
  },
  {
    "text": "So if I take this edge, it\ndivides the whole graph--",
    "start": "4305920",
    "end": "4312370"
  },
  {
    "text": "we've done this before--\ninto two parts, which we can call past and future.",
    "start": "4312370",
    "end": "4319750"
  },
  {
    "text": "And if we were to\ntake out this edge, it would disconnect the\ngraph from these two parts. So there's no other connections\nbetween the past and the future",
    "start": "4319750",
    "end": "4328550"
  },
  {
    "text": "because the graph is cycle-free. And there's some set of\npast observed variables, rp,",
    "start": "4328550",
    "end": "4340500"
  },
  {
    "text": "and there's some set of\nfuture observe variables, rf. ",
    "start": "4340500",
    "end": "4348540"
  },
  {
    "text": "So before, I called\nthis yp and yf. These are the received\nobservations corresponding",
    "start": "4348540",
    "end": "4356570"
  },
  {
    "text": "to all the past variables,\nthe received observations corresponding to all\nthe future variables. ",
    "start": "4356570",
    "end": "4366739"
  },
  {
    "text": "And the past future\ndecomposition is basically like this here.",
    "start": "4366740",
    "end": "4373471"
  },
  {
    "text": " Let me write it out.",
    "start": "4373472",
    "end": "4378710"
  },
  {
    "start": "4378710",
    "end": "4387980"
  },
  {
    "text": "It basically says that the\nprobability of-- that state variable has a\nparticular value given",
    "start": "4387980",
    "end": "4394560"
  },
  {
    "text": "r is proportional\nto the probability",
    "start": "4394560",
    "end": "4400290"
  },
  {
    "text": "that the state variable has\na particular value given r--",
    "start": "4400290",
    "end": "4405900"
  },
  {
    "text": "that part-- times the\nprobability that it has a particular value based\non the future part.",
    "start": "4405900",
    "end": "4415180"
  },
  {
    "text": "And that we can simply--\nwhen we take the vector, we can simply multiply\nthe two components",
    "start": "4415180",
    "end": "4425800"
  },
  {
    "text": "that both have a\ncommon value sk and we get the overall a posteriori\nprobability that this state",
    "start": "4425800",
    "end": "4437170"
  },
  {
    "text": "variable has a particular value. Now, I'm sure there is a-- OK.",
    "start": "4437170",
    "end": "4459739"
  },
  {
    "text": "In the notes, I go through\na little development to show this.",
    "start": "4459740",
    "end": "4466420"
  },
  {
    "text": "The development is, first\nof all, based on the fact that if I ask-- now in the\ncorresponding expression here,",
    "start": "4466420",
    "end": "4480100"
  },
  {
    "text": "I want to have\nthe sum over all y and s such that the behaviot--\nI'm going to just lose myself",
    "start": "4480100",
    "end": "4490250"
  },
  {
    "text": "in notation here. We only have a few minutes left. ",
    "start": "4490250",
    "end": "4501200"
  },
  {
    "text": "This is basically going\nto be over a code that's",
    "start": "4501200",
    "end": "4507100"
  },
  {
    "text": "consistent with the state\nhaving this particular variable. ",
    "start": "4507100",
    "end": "4517460"
  },
  {
    "text": "But when I cut this\ncode up like this,",
    "start": "4517460",
    "end": "4524850"
  },
  {
    "text": "the overall code of\nall configurations that are consistent with a\ncertain state variable sk",
    "start": "4524850",
    "end": "4532969"
  },
  {
    "text": "is going to divide up\ninto a Cartesian product of the past part\nof the code that's",
    "start": "4532970",
    "end": "4539950"
  },
  {
    "text": "consistent with sk across the\nfuture part of the code that's consistent with sk.",
    "start": "4539950",
    "end": "4546410"
  },
  {
    "text": "And this was\nprecisely the argument we went through when we\ndeveloped the cut-set bound.",
    "start": "4546410",
    "end": "4553510"
  },
  {
    "text": "That given sk, we\ncan take any past that's consistent with\nsk and any future that's",
    "start": "4553510",
    "end": "4560670"
  },
  {
    "text": "consistent with sk\nand map them together. And in effect, fixing the state\ndoes disconnect the graph.",
    "start": "4560670",
    "end": "4568890"
  },
  {
    "text": "And this is the\nbasic Markov property that we used to develop\nthe cut-set bound.",
    "start": "4568890",
    "end": "4574850"
  },
  {
    "text": "Really, just depending\non that again.  Plus the basic Cartesian\nproduct, lemma,",
    "start": "4574850",
    "end": "4590400"
  },
  {
    "text": "which is that if I have a\nsum over a Cartesian product,",
    "start": "4590400",
    "end": "4602469"
  },
  {
    "text": "x cross of f of x g of y, what's\na fast way of computing that?",
    "start": "4602470",
    "end": "4612756"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE].  PROFESSOR: Right.",
    "start": "4612756",
    "end": "4619640"
  },
  {
    "text": "So this is trivial. But in fact, that's what we\ndo in many fast algorithms.",
    "start": "4619640",
    "end": "4626750"
  },
  {
    "text": " It's just the sum over\nthe x of the f part,",
    "start": "4626750",
    "end": "4634020"
  },
  {
    "text": "the sum over y of the g part. And you multiply\nthose two together.",
    "start": "4634020",
    "end": "4640480"
  },
  {
    "text": "Just think of x and y being\non some rectangular array.",
    "start": "4640480",
    "end": "4647530"
  },
  {
    "text": "Here, we compute\nall the products corresponding to every\ncombination of x and y individually.",
    "start": "4647530",
    "end": "4653550"
  },
  {
    "text": "Here, we first take\nthe sum of all those, the sum of all those,\nthe sum all those. We multiply them times\nthe sum of-- in this way.",
    "start": "4653550",
    "end": "4661690"
  },
  {
    "text": "And we will get exactly the same\nterms if we multiply them out. And so this is just a fast\nway of computing this.",
    "start": "4661690",
    "end": "4671040"
  },
  {
    "text": " And that's really what we're\ndoing when we divide this up",
    "start": "4671040",
    "end": "4677790"
  },
  {
    "text": "in this way. I think I'm incapable\nof explaining that any more clearly right now And\nwe're at the end of our time,",
    "start": "4677790",
    "end": "4685350"
  },
  {
    "text": "anyway. So we do want to\nnot do problem 8.3.",
    "start": "4685350",
    "end": "4692580"
  },
  {
    "text": "You have only one problem due\non Wednesday, which is 8.1. It will probably take\nyou a while, anyway.",
    "start": "4692580",
    "end": "4698000"
  },
  {
    "text": "We didn't get to\nthe BCJR algorithm. We'll take this up again\nand complete the sum product",
    "start": "4698000",
    "end": "4704120"
  },
  {
    "text": "algorithm next time. See you Wednesday. ",
    "start": "4704120",
    "end": "4716970"
  }
]