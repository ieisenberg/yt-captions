[
  {
    "text": " The following\ncontent is provided under a Creative\nCommons license. Your support will help MIT\nOpenCourseWare continue",
    "start": "0",
    "end": "6930"
  },
  {
    "text": "to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6930",
    "end": "13389"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13390",
    "end": "21680"
  },
  {
    "text": "PROFESSOR: We're going to\ncover hashing next time. Now we're Going to\nfocus on pset three because I heard\npset three is hard",
    "start": "21680",
    "end": "27880"
  },
  {
    "text": "so we're going to look at the\ncode and try to understand it. AUDIENCE: This course is hard.",
    "start": "27880",
    "end": "33560"
  },
  {
    "text": "PROFESSOR: I've tried\nto make it easy. I really tried. ",
    "start": "33560",
    "end": "40140"
  },
  {
    "text": "How many people\nrecognize the code? Does this look familiar? One, two, three. Everyone else got\nstuck on question one?",
    "start": "40140",
    "end": "48190"
  },
  {
    "text": "I'm not going to give you\nthe answers to the psets. We are going to-- AUDIENCE: [LAUGHING] PROFESSOR: Sorry. We're going to look at\nthe code and understand",
    "start": "48190",
    "end": "54382"
  },
  {
    "text": "what it does because once\nyou understand what it does you can understand\nhow to modify it.",
    "start": "54382",
    "end": "60270"
  },
  {
    "text": "All right, before I do\nthat, any questions? And I might not answer\nthem right away, but I will keep them in mind\nwhile I go through the code.",
    "start": "60270",
    "end": "68190"
  },
  {
    "text": "Are there any\nspecific pin-points. AUDIENCE: The types. PROFESSOR: Yep.",
    "start": "68190",
    "end": "74410"
  },
  {
    "text": "Covered in five minutes. ",
    "start": "74410",
    "end": "81509"
  },
  {
    "text": "Oh well. ",
    "start": "81510",
    "end": "88572"
  },
  {
    "text": "The first thing that\nI want to talk about is sweep line algorithms. We're asking you to implement\nthe sweep line algorithm",
    "start": "88572",
    "end": "95400"
  },
  {
    "text": "and we're giving you one\nthat is horribly inefficient. Suppose you have some line\nsegments that look like this.",
    "start": "95400",
    "end": "103659"
  },
  {
    "text": " Sorry, drawing isn't.",
    "start": "103660",
    "end": "109530"
  },
  {
    "start": "109530",
    "end": "116030"
  },
  {
    "text": "They look like this. ",
    "start": "116030",
    "end": "121189"
  },
  {
    "text": "And suppose you want to find\nthe intersections between them. Now let's figure out\nwhat the algorithm",
    "start": "121190",
    "end": "127730"
  },
  {
    "text": "that we gave you does. Did people look at\nthe trace for that? Not the good trace, the trace\nthat's output by the algorithm",
    "start": "127730",
    "end": "136000"
  },
  {
    "text": "that we gave you. Does anyone understand\nwhat that does.",
    "start": "136000",
    "end": "141597"
  },
  {
    "text": "AUDIENCE: I kind of get it. PROFESSOR: OK. AUDIENCE: I think what it does\nis it just hits through all the horizontal lines and it goes\nthrough all the vertical ones.",
    "start": "141598",
    "end": "149464"
  },
  {
    "text": "First it goes through\nall the horizontal lines and what does it do with them? AUDIENCE: [INAUDIBLE].",
    "start": "149464",
    "end": "154730"
  },
  {
    "text": "PROFESSOR: They get bolded\nin the visualizer which means they're added\nto the range index.",
    "start": "154730",
    "end": "159780"
  },
  {
    "text": "So one, add all the\nhorizontal lines. And two-- oh you said it goes\nthrough all the vertical lines",
    "start": "159780",
    "end": "168020"
  },
  {
    "text": "after that. Any idea what it does? AUDIENCE: It looks\nfor intersections.",
    "start": "168020",
    "end": "174260"
  },
  {
    "text": "PROFESSOR: When he looks\nat a vertical line segment",
    "start": "174260",
    "end": "180290"
  },
  {
    "text": "you'll see some blue\nsquare and you'll see some segments\nthat are green. This is a query\nto the range index",
    "start": "180290",
    "end": "186130"
  },
  {
    "text": "and the green segments\nare the answers and the blue square is\nthe range that's queried.",
    "start": "186130",
    "end": "193516"
  },
  {
    "text": "First add all the segments\nto the range index and then do a query.",
    "start": "193516",
    "end": "201470"
  },
  {
    "text": "In principle sweep\nline algorithms have some geometric inputs. For example, a bunch of lines.",
    "start": "201470",
    "end": "207790"
  },
  {
    "text": "And conceptually they\nhave this vertical line that they sweep across the plane\nall the way from minus infinity",
    "start": "207790",
    "end": "213990"
  },
  {
    "text": "to plus infinity. Now if you try to sweep\na line continuously from minus infinity to\nplus infinity in code",
    "start": "213990",
    "end": "219830"
  },
  {
    "text": "it might take forever. We don't really do it that way. The way we do it\nin code is you know",
    "start": "219830",
    "end": "226181"
  },
  {
    "text": "when something interesting\nis going to happen and you only simulate what\nhappens to the sweep line",
    "start": "226182",
    "end": "231640"
  },
  {
    "text": "at that point. In this case the sweep line\nstarts at minus infinity",
    "start": "231640",
    "end": "237760"
  },
  {
    "text": "and then all the\nhorizontal segments are added to our range index. And then as the sweep line\ngoes across the plane, when",
    "start": "237760",
    "end": "246420"
  },
  {
    "text": "it hits a vertical\nsegment a query happens. ",
    "start": "246420",
    "end": "251769"
  },
  {
    "text": "The only times when\nthe sweep line stops is first, at the beginning to\nadd all the horizontal line",
    "start": "251770",
    "end": "258359"
  },
  {
    "text": "segments, and then every time\nit hits a vertical line segment.",
    "start": "258360",
    "end": "264919"
  },
  {
    "text": "We know this ahead\nof time so we can compute a list of\nall these coordinates of interesting things.",
    "start": "264920",
    "end": "271670"
  },
  {
    "text": "And then we can sort them\nand then go through them and simulate the behavior\nof the sweep line that way.",
    "start": "271670",
    "end": "277990"
  },
  {
    "text": "If you look at the code\nlisting at events from there, this is the gist of it. This is what it does.",
    "start": "277990",
    "end": "283260"
  },
  {
    "text": "It compiles a list of events. The first key in each\nevent is the x, is that x?",
    "start": "283260",
    "end": "290780"
  },
  {
    "text": "Yeah. x like this, y like this. The first case, the\nx-coordinate of an event",
    "start": "290780",
    "end": "296229"
  },
  {
    "text": "and by sorting\nthat list of events it will then process\nthem in order.",
    "start": "296230",
    "end": "302600"
  },
  {
    "text": "Events from there is responsible\nfor looking at all the wires and compiling events.",
    "start": "302600",
    "end": "308419"
  },
  {
    "text": "How does an event for a\nhorizontal layer look like? Can anyone tell me? Sorry, for a horizontal wire.",
    "start": "308420",
    "end": "315435"
  },
  {
    "text": "AUDIENCE: It will run\nacross [INAUDIBLE]. ",
    "start": "315435",
    "end": "321460"
  },
  {
    "text": "PROFESSOR: First off it\nlooks like a list, right? It's a regular python list. And I will try to call it vector\nso that we don't confuse it",
    "start": "321460",
    "end": "329360"
  },
  {
    "text": "with a big list\nof all the events. You said the first thing\nis the leftmost point.",
    "start": "329360",
    "end": "334610"
  },
  {
    "text": "Right? If this segment, for\nexample, starts at minus 100,",
    "start": "334610",
    "end": "339990"
  },
  {
    "text": "this one starts at minus 95,\nthis one starts at minus 90, and this one starts at minus\n50, by the way not to scale,",
    "start": "339990",
    "end": "349889"
  },
  {
    "text": "then the leftmost\npoint is minus 100. Right? This is the first\nelement in the vector.",
    "start": "349890",
    "end": "358229"
  },
  {
    "text": "And that's computed\non line four where it goes through\nall the segments, looks at all the X-coordinates\nand chooses the minimum.",
    "start": "358230",
    "end": "367200"
  },
  {
    "text": "What's the next\nthing in the vector? We don't have to understand why. We'll go through why in a bit. I'm just interested in what?",
    "start": "367200",
    "end": "374656"
  },
  {
    "text": "AUDIENCE: Zero. PROFESSOR: Zero. Excellent. PROFESSOR: After that\nthere is a wire ID.",
    "start": "374656",
    "end": "381190"
  },
  {
    "text": "Each wire gets a unique ID,\nthat's a number between zero and the number of wires.",
    "start": "381190",
    "end": "387140"
  },
  {
    "text": "Say this is one, two, three. This is going to be one. And then I have the string add.",
    "start": "387140",
    "end": "394780"
  },
  {
    "text": "And then I have the\nactual wire object.  What does the vector look\nlike for a query event?",
    "start": "394780",
    "end": "405270"
  },
  {
    "text": "Sorry, what does it look\nlike for a vertical wire? I'm giving away\nsome of the answer.",
    "start": "405270",
    "end": "410490"
  },
  {
    "text": "Bad, bad, bad.  All right, vertical wire,\nlook at the code and.",
    "start": "410490",
    "end": "417690"
  },
  {
    "start": "417690",
    "end": "423157"
  },
  {
    "text": "AUDIENCE: It keeps\nthe left [INAUDIBLE]. PROFESSOR: Of the wire. OK. And?",
    "start": "423157",
    "end": "429379"
  },
  {
    "text": "AUDIENCE: It keeps the\nx-coordinate [INAUDIBLE]. ",
    "start": "429379",
    "end": "434501"
  },
  {
    "text": "PROFESSOR: A vertical wire will\nhave the same X-coordinates for all the points\non the wire, right? I don't really worry about\nwhich coordinate it is.",
    "start": "434502",
    "end": "441380"
  },
  {
    "text": "This wire is at minus 50. The first element here\nis going to be minus 50.",
    "start": "441380",
    "end": "447430"
  },
  {
    "text": "What's next? AUDIENCE: A 1. PROFESSOR: A 1. OK.",
    "start": "447430",
    "end": "453080"
  },
  {
    "text": "And suppose this is wire ID 4. I'm going to have 4.",
    "start": "453080",
    "end": "460530"
  },
  {
    "text": "AUDIENCE: Query. PROFESSOR: Query. AUDIENCE: And the wire. PROFESSOR: And the wire.",
    "start": "460530",
    "end": "466160"
  },
  {
    "start": "466160",
    "end": "471200"
  },
  {
    "text": "All right, what happens with\nthese in the init method, which is not shown in\nthe code listing,",
    "start": "471200",
    "end": "476330"
  },
  {
    "text": "is after the list is put\ntogether sort is called on it.",
    "start": "476330",
    "end": "481750"
  },
  {
    "text": "These are all compared\nand then reordered to be sorted according to\nsome ordering relationship.",
    "start": "481750",
    "end": "489520"
  },
  {
    "text": "Does anyone know what\nthe ordering relationship is for Python lists?",
    "start": "489520",
    "end": "494667"
  },
  {
    "text": "Yeah. AUDIENCE: It starts from\nthe first, from zero, and the next it goes to\nsort the same with as X 1.",
    "start": "494667",
    "end": "504367"
  },
  {
    "text": "PROFESSOR: OK. Say if I have 1,\n2, 3 and 1, 3, 2.",
    "start": "504367",
    "end": "513645"
  },
  {
    "text": " Sorry, and 2, 1, 2.",
    "start": "513645",
    "end": "522950"
  },
  {
    "text": "He's going to look\nat the first element and if they are different\nthan the one with the smaller element is smaller.",
    "start": "522950",
    "end": "529020"
  },
  {
    "text": "1, 2, 3 as a vector,\nsorry, as a list, is smaller than\n2, 1, 2 as a list.",
    "start": "529020",
    "end": "534470"
  },
  {
    "text": " If this guy becomes\none then they're equal.",
    "start": "534470",
    "end": "540430"
  },
  {
    "text": "Then it has to go\nto the next element, compare them and see if\nthey're different we have",
    "start": "540430",
    "end": "546030"
  },
  {
    "text": "an answer, if not\nwe have to keep going all the way until\nthe end of the list. This is called\nlexicographic comparison",
    "start": "546030",
    "end": "552170"
  },
  {
    "text": "and this is the same ordering\nthat you have for the words in a dictionary.",
    "start": "552170",
    "end": "557420"
  },
  {
    "text": "Right, if you think\nof each letter as an element in a list\nand the word is the list",
    "start": "557420",
    "end": "562449"
  },
  {
    "text": "then this is how you look\nup words in a dictionary. The reason events\nlook like this is",
    "start": "562450",
    "end": "570850"
  },
  {
    "text": "so that sort would output\nthem in the right order for the next state. So, yes.",
    "start": "570850",
    "end": "576911"
  },
  {
    "text": "AUDIENCE: Does that mean\nall the horizontal wires, does that mean that they start\nat same place even though that they don't?",
    "start": "576911",
    "end": "582806"
  },
  {
    "text": "PROFESSOR: Yup. all the horizontal\nwires will be sorted. All these add events will be\nsorted before the query events.",
    "start": "582806",
    "end": "590850"
  },
  {
    "text": "Yup, very good observation. This is what I'm\ntrying to achieve. That's why I have this\nspecial value here.",
    "start": "590850",
    "end": "596404"
  },
  {
    "text": "I go through some extra\neffort to compute it. I had to write an\nextra line of code so this is the\nmotivation for it.",
    "start": "596405",
    "end": "601894"
  },
  {
    "text": " The first key in the\nvector is the X element",
    "start": "601894",
    "end": "609730"
  },
  {
    "text": "on the sweep line.  I could've also had the\nvery large negative value",
    "start": "609730",
    "end": "617370"
  },
  {
    "text": "that something that would\nbehave like minus infinity here and that would\nwork just as well. ",
    "start": "617370",
    "end": "624449"
  },
  {
    "text": "By computing the left edge I\ndon't have to deal with that. I don't have to worry of\nwhether my negative infinity is small enough, because if\nit's not I will fail the test",
    "start": "624450",
    "end": "632390"
  },
  {
    "text": "and that's bad. This is the x-coordinate at\nwhich the sweep line stops and something happens.",
    "start": "632390",
    "end": "639340"
  },
  {
    "text": "So if all the events are\ndifferent the x-coordinates then I have my\nordering, I'm done. Now what if I have two\nevents at the same time?",
    "start": "639340",
    "end": "646220"
  },
  {
    "text": "For example, what if I\nhave two vertical wires? ",
    "start": "646220",
    "end": "654550"
  },
  {
    "text": "The x-coordinates are\ngoing to be the same so I need to use something\nelse to break the ties, right?",
    "start": "654551",
    "end": "660040"
  },
  {
    "text": "The first thing that I\nuse to break the ties is all add events\nhave a zero here",
    "start": "660040",
    "end": "665120"
  },
  {
    "text": "and all the query\nevents have a one. And the point of\nthat is if I have two events at the\nsame x-coordinate,",
    "start": "665120",
    "end": "671350"
  },
  {
    "text": "if I have a query\nand an add, I want the add to happen\nbefore the query. If this is the\nsame this is going",
    "start": "671350",
    "end": "678779"
  },
  {
    "text": "to be different for\nad versus query. ",
    "start": "678780",
    "end": "684200"
  },
  {
    "text": "Does that make sense? This is how we order\nevents relatively to each other on the same line.",
    "start": "684200",
    "end": "689769"
  },
  {
    "text": "Now suppose I have\nthese two wires, they're both vertical so they're\nboth going to be queries.",
    "start": "689770",
    "end": "695470"
  },
  {
    "text": "They're both at the same index. I need something else, and\nthat other thing that I have",
    "start": "695470",
    "end": "700520"
  },
  {
    "text": "is the wire ID which is\nguaranteed to be unique. I know for sure the\ncomparison will stop here.",
    "start": "700520",
    "end": "707620"
  },
  {
    "text": "And the comparison\nhad better stop here because if the comparison\ngets all the way to here, wires aren't comparable so\nthe code is going to crash.",
    "start": "707620",
    "end": "714740"
  },
  {
    "text": " It stops here because the IDs\nare unique, everyone is happy.",
    "start": "714740",
    "end": "722130"
  },
  {
    "text": " All right, do the events\nmake more sense now? ",
    "start": "722130",
    "end": "729350"
  },
  {
    "text": "To complete the\npicture if you look at compute crossings,\nlines nine and ten.",
    "start": "729350",
    "end": "734360"
  },
  {
    "text": "Line nine goes through\nthe vector-- sorry, goes through the list of\nevents that have been sorted and processes them\nin order so sort",
    "start": "734360",
    "end": "741750"
  },
  {
    "text": "had better do the right job. And then it extracts the\nx-coordinate, that's here,",
    "start": "741750",
    "end": "747135"
  },
  {
    "text": "it extracts the event\ntype, that's here, and then it extracts\nthe wire from here.",
    "start": "747135",
    "end": "752804"
  },
  {
    "text": "These guys really are just\nthere to help with the sorting, they're never read afterwards. AUDIENCE: Where are the\nevents actually sort?",
    "start": "752804",
    "end": "759230"
  },
  {
    "text": "I thought they just\nput into order. PROFESSOR: The events are\nsorted in an init method that's",
    "start": "759230",
    "end": "767135"
  },
  {
    "text": "not here. It's in the piece of\ncode but it's not here. And that may be a hint that\nyou don't want to change it.",
    "start": "767135",
    "end": "774740"
  },
  {
    "text": "As in you don't need to.  All right, events\nlook like this.",
    "start": "774741",
    "end": "780790"
  },
  {
    "text": " Any questions about events?",
    "start": "780790",
    "end": "788480"
  },
  {
    "text": "Everything make sense? Presumably when you write\nyour own sweep line algorithm you're going to come up\nwith your own events which",
    "start": "788480",
    "end": "796347"
  },
  {
    "text": "are going to be different. You're going to change\nthese methods to add your own events to the list.",
    "start": "796347",
    "end": "802564"
  },
  {
    "text": "And then it's going\nto be sorted for you and then you're going to change\ncompute crossings to process your events in the way that\nthey should be processed.",
    "start": "802564",
    "end": "809280"
  },
  {
    "start": "809280",
    "end": "816730"
  },
  {
    "text": "Let's look at the range index. What do we store\nin a range index?",
    "start": "816730",
    "end": "821995"
  },
  {
    "text": " AUDIENCE: The horizontal wires.",
    "start": "821995",
    "end": "827304"
  },
  {
    "text": "PROFESSOR: Horizontal wires. Very good. What's the point of storing\nhorizontal wires in an index?",
    "start": "827304",
    "end": "833070"
  },
  {
    "text": "AUDIENCE: That's when\nyou want to query, the area has a line through it. ",
    "start": "833070",
    "end": "841420"
  },
  {
    "text": "PROFESSOR: For the\nalgorithm that we gave you how does a query look like? Suppose I have this wire here\nand I'm doing a query for it.",
    "start": "841420",
    "end": "850070"
  },
  {
    "text": "AUDIENCE: Just ask to\nlist horizontal wires that are between that Y.",
    "start": "850070",
    "end": "857670"
  },
  {
    "text": "PROFESSOR: Between this guy's\ntop and this guy's bottom. Right? AUDIENCE: Yeah. PROFESSOR: A query\nwould look like this.",
    "start": "857670",
    "end": "862936"
  },
  {
    "text": " Basically all the\nhorizontal wires",
    "start": "862936",
    "end": "871760"
  },
  {
    "text": "that have their y-coordinates\nbetween this guy and this guy. Now if I have a wire that's\nway up here or way down here",
    "start": "871760",
    "end": "880510"
  },
  {
    "text": "I know for sure that it's not\ngoing to intersect this wire. Right? I don't care about it.",
    "start": "880510",
    "end": "886680"
  },
  {
    "text": "The range index helps\nme eliminate some wires. Now, will the range index\neliminate all the wires",
    "start": "886680",
    "end": "893840"
  },
  {
    "text": "that don't intersect\nwith this wire? No, OK.",
    "start": "893840",
    "end": "899790"
  },
  {
    "text": "Why not? AUDIENCE: Well in\nthis code it doesn't. PROFESSOR: OK, in\nthis code it doesn't.",
    "start": "899790",
    "end": "906260"
  },
  {
    "text": "We're only talking\nabout this code, I'm not talking about\nthe solution code that you guys have to implement.",
    "start": "906260",
    "end": "912477"
  },
  {
    "text": "AUDIENCE: It doesn't\nbecause it never removes the horizontal wires.",
    "start": "912478",
    "end": "918750"
  },
  {
    "text": "PROFESSOR: OK. What's an example of a\nquery that would give me",
    "start": "918750",
    "end": "927880"
  },
  {
    "text": "some wires that don't\nintersect my wire? AUDIENCE: Like if they're\nin between the y-axis,",
    "start": "927880",
    "end": "935064"
  },
  {
    "text": "they're, yeah but\nthey're not actually. PROFESSOR: OK. So you mean.",
    "start": "935065",
    "end": "940709"
  },
  {
    "text": "AUDIENCE: Yeah.  AUDIENCE: Negative infinity\nand infinity on the x-axis",
    "start": "940709",
    "end": "946224"
  },
  {
    "text": "would give you a bunch of\nwires and not many of them will intersect with\nthe vertical wires.",
    "start": "946224",
    "end": "952555"
  },
  {
    "text": "AUDIENCE: If the end were a\nvertical wire, [INAUDIBLE]. ",
    "start": "952555",
    "end": "958910"
  },
  {
    "text": "PROFESSOR: OK. I understood this because\nit matches what I drew. I didn't understand the\nminus infinity plus infinity.",
    "start": "958910",
    "end": "965910"
  },
  {
    "text": "AUDIENCE: Well if you think\nabout the x-axis on the bottom, if you go from all the way\non the left to all the way on the right you're going to get\na whole bunch of wires that are",
    "start": "965910",
    "end": "972399"
  },
  {
    "text": "short that-- PROFESSOR: Are you\ntalking about one wire that's like that, or many?",
    "start": "972400",
    "end": "978880"
  },
  {
    "text": "AUDIENCE: If you're grabbing\nfrom your range index. PROFESSOR: The range index\nhas horizontal wires in it.",
    "start": "978880",
    "end": "988940"
  },
  {
    "text": "AUDIENCE: Right. AUDIENCE: Are you assuming\nthat they're all short?",
    "start": "988940",
    "end": "994099"
  },
  {
    "text": "AUDIENCE: Yes. But it's not necessarily true. Some of them will be short. PROFESSOR: You're saying a lot\nof short horizontal lines--",
    "start": "994099",
    "end": "1000730"
  },
  {
    "text": "you mean like this, right? AUDIENCE: Yeah. PROFESSOR: OK. That's what you mean. AUDIENCE: You have\none intersection and--",
    "start": "1000730",
    "end": "1006146"
  },
  {
    "text": "PROFESSOR: A ton of\nnon-intersections. AUDIENCE: Exactly. PROFESSOR: OK, cool. Thank you. ",
    "start": "1006146",
    "end": "1011680"
  },
  {
    "text": "Doing a range query\non this can give me a lot of false positives. That's why after\nI get them I have",
    "start": "1011680",
    "end": "1017620"
  },
  {
    "text": "to make sure that\nthey intersect and I can't just blindly output them.",
    "start": "1017620",
    "end": "1022829"
  },
  {
    "text": "These are bad false positives,\nthese are bad false positive. Now let's look at how\nthe range index works.",
    "start": "1022830",
    "end": "1029650"
  },
  {
    "text": "Can anyone remind me of\nwhat the range index does? It's a data structure, right?",
    "start": "1029650",
    "end": "1034699"
  },
  {
    "text": "And it has some operations. What are the operations for it? ",
    "start": "1034700",
    "end": "1045636"
  },
  {
    "text": "AUDIENCE: It returns\neverything between two values.  PROFESSOR: You have a list\noperation where you give it",
    "start": "1045636",
    "end": "1053310"
  },
  {
    "text": "two values and it will return\neverything inside the index,",
    "start": "1053310",
    "end": "1058770"
  },
  {
    "text": "in the interval between\nthose two values.",
    "start": "1058770",
    "end": "1064250"
  },
  {
    "text": "What else can I do? ",
    "start": "1064250",
    "end": "1070539"
  },
  {
    "text": "AUDIENCE: It can also\ntell you how many. It returns those keys\nand how many there are.",
    "start": "1070540",
    "end": "1077769"
  },
  {
    "text": "PROFESSOR: I have\nthe count and you said that I have some\nthings in the index.",
    "start": "1077770",
    "end": "1083330"
  },
  {
    "text": "Right? How do I get them in there? These are queries,\nI need updates.",
    "start": "1083330",
    "end": "1088494"
  },
  {
    "text": "AUDIENCE: Add and remove. ",
    "start": "1088494",
    "end": "1100360"
  },
  {
    "text": "PROFESSOR: For the code\nthat they gave you, what is the running time for\neach of these operations? ",
    "start": "1100360",
    "end": "1110945"
  },
  {
    "text": "AUDIENCE: It would be\nconstant had to be removed. PROFESSOR: OK. Add calls the pend.",
    "start": "1110946",
    "end": "1116731"
  },
  {
    "text": "Right? So that is constant. I will agree there.",
    "start": "1116731",
    "end": "1121810"
  },
  {
    "text": "AUDIENCE: To remove it you\nhad to shift everything. PROFESSOR: Yep. ",
    "start": "1121810",
    "end": "1128000"
  },
  {
    "text": "Let's start with an example. Say I have these keys\nin my range index.",
    "start": "1128000",
    "end": "1134344"
  },
  {
    "text": "5, 8, 11, 13. ",
    "start": "1134344",
    "end": "1139990"
  },
  {
    "text": "Suppose they're magically\ninserted in this order. If I want to remove two,\nsince this is an array",
    "start": "1139990",
    "end": "1145570"
  },
  {
    "text": "I have to shift\neverything to the left. AUDIENCE: Yes. PROFESSOR: So that's. AUDIENCE: Order and time. PROFESSOR: OK.",
    "start": "1145570",
    "end": "1153140"
  },
  {
    "text": "How about list and counts? ",
    "start": "1153140",
    "end": "1164022"
  },
  {
    "text": "What's the running\ntime for counts? How does count work? AUDIENCE: It's not just\nthrough all of the keys.",
    "start": "1164022",
    "end": "1171500"
  },
  {
    "text": "PROFESSOR: Count goes\nthrough everything and-- AUDIENCE: It has to\nbe order [INAUDIBLE]. PROFESSOR: Cool. Count goes through all\nthe keys, evaluates",
    "start": "1171500",
    "end": "1177430"
  },
  {
    "text": "the predicate that checks\nwhether they're in the range and then it adds up one to\nthe sum for the right place.",
    "start": "1177430",
    "end": "1185860"
  },
  {
    "text": "How about list?  AUDIENCE: Also [INAUDIBLE].",
    "start": "1185860",
    "end": "1191919"
  },
  {
    "text": "PROFESSOR: OK, that's\na list comprehension. The code is a bit tricky,\nbut it pretty much does the same thing. It goes through the list\nand it puts all the keys",
    "start": "1191919",
    "end": "1199100"
  },
  {
    "text": "that are in the\ninterval in the list. ",
    "start": "1199100",
    "end": "1204850"
  },
  {
    "text": "Now let's look at\nanother version on the next page of our range\nindex that is slightly better. ",
    "start": "1204850",
    "end": "1212440"
  },
  {
    "text": "What's the rapid\nvariance for this? How is it different\nfrom the first one?",
    "start": "1212440",
    "end": "1218554"
  },
  {
    "text": "AUDIENCE: Sorted already. PROFESSOR: Sorted already. Very good. The keys look exactly like this.",
    "start": "1218554",
    "end": "1225778"
  },
  {
    "text": "Right?  What is the running time for--\nlet's start with add or remove,",
    "start": "1225778",
    "end": "1233678"
  },
  {
    "text": "what's the running time\nfor add and remove? AUDIENCE: N, order of N. PROFESSOR: Why is it order of N?",
    "start": "1233678",
    "end": "1240507"
  },
  {
    "text": "AUDIENCE: No, oder log N. PROFESSOR: Why is\nit order log N. AUDIENCE: Because if it's sorted\nyou can look in the middle",
    "start": "1240508",
    "end": "1246912"
  },
  {
    "text": "and do a binary search. PROFESSOR: I can do a\nbinary search in order to find out where\nI insert something.",
    "start": "1246912",
    "end": "1253351"
  },
  {
    "text": "Right? But what if I want to\ninsert zero in this? AUDIENCE: Is it\nlog N plus order N?",
    "start": "1253351",
    "end": "1260726"
  },
  {
    "text": "Does that make sense? Because you have to shift\nall of the [INAUDIBLE]. PROFESSOR: Yeah.",
    "start": "1260726",
    "end": "1266299"
  },
  {
    "text": "So worst case if I have\nto insert zero here, I have to shift everything to\nthe right to make room for it. Right?",
    "start": "1266300",
    "end": "1271590"
  },
  {
    "text": "So your first instinct was good. Order N. And questions?",
    "start": "1271590",
    "end": "1278230"
  },
  {
    "text": "No more? Cool. How about remove? ",
    "start": "1278230",
    "end": "1283710"
  },
  {
    "text": "AUDIENCE: Order N. PROFESSOR: Order N.\nWhy is it order N?",
    "start": "1283710",
    "end": "1288815"
  },
  {
    "text": "AUDIENCE: You have to shift\nleft everything to the right. PROFESSOR: Is this what\nyou were going to say too?",
    "start": "1288816",
    "end": "1295410"
  },
  {
    "text": "Same reason as before,\nif I want to remove 2 I still have to move\neverything to the left. I can find the key that I\nwant to remove very fast",
    "start": "1295410",
    "end": "1302180"
  },
  {
    "text": "but then shifting\nthings is still order N. OK how about count?",
    "start": "1302180",
    "end": "1310400"
  },
  {
    "text": "How does count work? AUDIENCE: It's the\nsame thing, isn't it?",
    "start": "1310400",
    "end": "1316480"
  },
  {
    "text": "AUDIENCE: Binary\nsearch so it's log n. PROFESSOR: Binary\nsearch, so it's log n. If I look at the\ncount there it's--",
    "start": "1316480",
    "end": "1323315"
  },
  {
    "text": "AUDIENCE: It's\nnot though, that's telling you how\nmany keys between. AUDIENCE: So it's a\nsimple subtraction to find the number\nof keys between.",
    "start": "1323315",
    "end": "1329490"
  },
  {
    "text": " PROFESSOR: Count calls\nbinary search twice",
    "start": "1329490",
    "end": "1334550"
  },
  {
    "text": "and then it does a\narithmetic operation, yes. AUDIENCE: It would be log n\nbecause with the count where",
    "start": "1334550",
    "end": "1340724"
  },
  {
    "text": "the range is that's log n\nbecause you have to actually sift through it, but\nbinary search you have two other operations and then\nyou just do a surprise.",
    "start": "1340724",
    "end": "1347370"
  },
  {
    "text": "PROFESSOR: Yep, thank you. Very good. This is log n because of\ngood old binary search.",
    "start": "1347370",
    "end": "1355570"
  },
  {
    "text": "How about lists? I think you were\nthinking ahead of lists. How about lists? ",
    "start": "1355570",
    "end": "1363870"
  },
  {
    "text": "AUDIENCE: You have to list every\nsingle thing that you read. AUDIENCE: You've got the\nvalues you might potentially have to [INAUDIBLE]. AUDIENCE: Is it log n plus\nthe length of the list.",
    "start": "1363870",
    "end": "1372910"
  },
  {
    "text": "PROFESSOR: Yeah. I was going to do a\nnice long analysis and there's the answer.",
    "start": "1372910",
    "end": "1378539"
  },
  {
    "text": "Log n plus, suppose you return\ni values from the list, i.",
    "start": "1378540",
    "end": "1383850"
  },
  {
    "text": "Why does this matter? If I have a range query from\nminus infinity to plus infinity",
    "start": "1383850",
    "end": "1391820"
  },
  {
    "text": "I have to create a new\nlist, copy all these keys in and return them. That's order n.",
    "start": "1391820",
    "end": "1397160"
  },
  {
    "text": "I can't just say it's log n. On the other hand, if the\nanswers to my list queries",
    "start": "1397160",
    "end": "1402620"
  },
  {
    "text": "are small, if\nthey're one element, then it's going to take log\nn time to do a binary search",
    "start": "1402620",
    "end": "1409470"
  },
  {
    "text": "and then order one to\nproduce the list if I have a constant size list.",
    "start": "1409470",
    "end": "1414639"
  },
  {
    "text": "If I just say order n\nI'm selling myself short. It's a lot better if I\nwant to have short queries.",
    "start": "1414640",
    "end": "1421500"
  },
  {
    "text": " What would be the best possible\nrunning time for lists?",
    "start": "1421500",
    "end": "1428395"
  },
  {
    "start": "1428395",
    "end": "1436460"
  },
  {
    "text": "If I had a magic algorithm that\nworks as fast as possible would",
    "start": "1436460",
    "end": "1442480"
  },
  {
    "text": "I be able to run\nin order one time? AUDIENCE: No. PROFESSOR: Super fast\nmagic algorithm order one.",
    "start": "1442480",
    "end": "1449460"
  },
  {
    "text": "No, why not? AUDIENCE: Because you still have\nto find l and h in your array.",
    "start": "1449460",
    "end": "1456452"
  },
  {
    "text": "PROFESSOR: Suppose I\nhave some other data structure, a super\nmagical data structure. AUDIENCE: You can do\nsearches in order one time,",
    "start": "1456452",
    "end": "1463896"
  },
  {
    "text": "is what you're saying. AUDIENCE: You still have\nto have the contents of it for what you're listing.",
    "start": "1463896",
    "end": "1469664"
  },
  {
    "text": "It would have to be order i. ",
    "start": "1469664",
    "end": "1476309"
  },
  {
    "text": "PROFESSOR: Even if I\nhave a super magical data structure where I can do\neverything that I want inside in order one time then\nwhen I produce the output",
    "start": "1476309",
    "end": "1484110"
  },
  {
    "text": "I still have to\nwrite the output. This thing is\ngoing to be omega i",
    "start": "1484110",
    "end": "1490900"
  },
  {
    "text": "and I can't possibly do\nany better than that. No matter what\nrunning time you have",
    "start": "1490900",
    "end": "1496390"
  },
  {
    "text": "for list it has\nto include this i. Unless you're running time\nis order i, in which case",
    "start": "1496390",
    "end": "1501680"
  },
  {
    "text": "i is smaller or equal to n. ",
    "start": "1501680",
    "end": "1508020"
  },
  {
    "text": "Does this look right to you? ",
    "start": "1508020",
    "end": "1514540"
  },
  {
    "text": "There is a small\nbug in this code. What if I do count of 4, 11.",
    "start": "1514540",
    "end": "1519990"
  },
  {
    "text": "Binary search returns,\nif there's a key there it will give me\nthe position of that key. And if there's no\nkey it will tell me",
    "start": "1519990",
    "end": "1529010"
  },
  {
    "text": "where I should insert the\nkey if the key doesn't exist in theory. So if this is my array then the\npositions are 0, 1, 2, 3, 4, 5.",
    "start": "1529010",
    "end": "1539520"
  },
  {
    "text": " Count of 4, 11 would do a\nbinary search of 11 and see 4",
    "start": "1539520",
    "end": "1547550"
  },
  {
    "text": "and then it will do a binary\nsearch for 4 and return 2. Right? Because if I want\nto insert 4 I would",
    "start": "1547550",
    "end": "1553506"
  },
  {
    "text": "have to put it here and then\nshift everything to the right. And 4 minus 2 is 2\ntherefore it's broken.",
    "start": "1553506",
    "end": "1561555"
  },
  {
    "text": "AUDIENCE: Off by one block. PROFESSOR: Off by\none block, right? Well the interesting thing about\nit is that I had this code,",
    "start": "1561556",
    "end": "1568870"
  },
  {
    "text": "we actually shipped this\ncode between Saturday morning and Sunday evening and\nit passed all the tests.",
    "start": "1568870",
    "end": "1574620"
  },
  {
    "text": "As we go to the next\nsection keep in mind that this is broken\nbut it would still pass the test for our problem\nand we'll see why in a bit.",
    "start": "1574620",
    "end": "1583418"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Count of 4, 11.",
    "start": "1583418",
    "end": "1589116"
  },
  {
    "text": "AUDIENCE: So\nconfined to them then it says that when\nyou're down 5, right?",
    "start": "1589116",
    "end": "1594970"
  },
  {
    "text": "Four. PROFESSOR: Four. ",
    "start": "1594970",
    "end": "1600690"
  },
  {
    "text": "Binary search, if\nit finds the key it returns the\nposition of they key. AUDIENCE: [INAUDIBLE]\n4 divided by x, and 4,",
    "start": "1600690",
    "end": "1606707"
  },
  {
    "text": "4 would it have had two?",
    "start": "1606707",
    "end": "1614150"
  },
  {
    "text": "PROFESSOR: Yeah, because it\ntells me where to insert it. AUDIENCE: OK, then it is. ",
    "start": "1614150",
    "end": "1622319"
  },
  {
    "text": "[INAUDIBLE] PROFESSOR: Well it\nsays 4 minus 2, right? The last line is high\nindex minus low index?",
    "start": "1622319",
    "end": "1627920"
  },
  {
    "text": "AUDIENCE: Oh, well that's\nwrong. [INAUDIBLE]. AUDIENCE: So are you saying that\nit tells you where to insert it instead of actually\ninserting it. ",
    "start": "1627920",
    "end": "1634844"
  },
  {
    "text": "PROFESSOR: Yeah. Binary search doesn't\ninsert the element. It just tells me this\nis where you put it. And then if you look at add,\nadd inserts it right there.",
    "start": "1634844",
    "end": "1644450"
  },
  {
    "text": "That's why binary\nsearch is done that way so that that would work. AUDIENCE: Can I ask\na style question? PROFESSOR: Sure.",
    "start": "1644450",
    "end": "1649950"
  },
  {
    "text": "AUDIENCE: The underscore\nbefore binary search, is that like saying private? PROFESSOR: Yep. AUDIENCE: OK.",
    "start": "1649950",
    "end": "1656492"
  },
  {
    "text": "AUDIENCE: Wait, what\ndoes private mean? PROFESSOR: Private\nmeans that it's not part of the public\ninterface of the class.",
    "start": "1656492",
    "end": "1663540"
  },
  {
    "text": " If we're in a team and\nwe're working on something,",
    "start": "1663540",
    "end": "1668730"
  },
  {
    "text": "if I mark a method as private\nthat means if you use my class, you're not supposed to call\nit because I might change",
    "start": "1668730",
    "end": "1675290"
  },
  {
    "text": "it's name, I might\ndelete it completely, I can do anything I want to it. But if the method is public, so\nadd, remove, list, and count,",
    "start": "1675290",
    "end": "1682590"
  },
  {
    "text": "those are the API or the\npublic interface of the class. I guarantee that as long as the\nblit range index class exists",
    "start": "1682590",
    "end": "1690260"
  },
  {
    "text": "it's going to have an\nadd to remove a list and the conduct will behave\nin exactly in that way.",
    "start": "1690260",
    "end": "1695802"
  },
  {
    "text": "Once you have a class\nwith public methods you're not supposed\nto change them because other people\nmight depend on them and that would make\nother people unhappy.",
    "start": "1695802",
    "end": "1702756"
  },
  {
    "start": "1702756",
    "end": "1711000"
  },
  {
    "text": "We said that this range\nindex holds wires.",
    "start": "1711000",
    "end": "1716880"
  },
  {
    "text": "Right? So if you have these wires here\nthey're not really numbers.",
    "start": "1716880",
    "end": "1723337"
  },
  {
    "text": "I know how to compare\nnumbers, I don't know how to compare wires. That's not something that's\nreadily comparable, right?",
    "start": "1723337",
    "end": "1731039"
  },
  {
    "text": "We have to bridge the gap\nbetween numbers or things",
    "start": "1731040",
    "end": "1738520"
  },
  {
    "text": "that are comparable and wires. The way we do that is\nthe key wire pair class.",
    "start": "1738520",
    "end": "1744460"
  },
  {
    "text": "If you look at key\nwire pair class it has-- I will\nwrite it as KWP here.",
    "start": "1744460",
    "end": "1750770"
  },
  {
    "text": "So it has a key and the wire. Right? That's why it's a key wire pair.",
    "start": "1750770",
    "end": "1756850"
  },
  {
    "text": "And if you look at the\ncomparison methods, lines 11 through 26,\nbut if you look at 11",
    "start": "1756850",
    "end": "1763039"
  },
  {
    "text": "through 13 pretty much\neverything else is the same. Then comparisons are\ndone in a certain way.",
    "start": "1763040",
    "end": "1770410"
  },
  {
    "text": "So the first\ncriterion is the key. If you have two key wire pairs\nthat have different keys,",
    "start": "1770410",
    "end": "1776680"
  },
  {
    "text": "then the one with\nthe bigger key wins. Now if they have\nthe same key then this field called wire\nIDs is used to break ties.",
    "start": "1776680",
    "end": "1783820"
  },
  {
    "text": " So first key and then wire ID.",
    "start": "1783820",
    "end": "1791870"
  },
  {
    "text": "What's the wire ID set to? And where? ",
    "start": "1791870",
    "end": "1798130"
  },
  {
    "text": "Where would you set a\nfield in a nice class? AUDIENCE: The constructor. PROFESSOR: In the\nconstructor, very good.",
    "start": "1798130",
    "end": "1804260"
  },
  {
    "text": "Where is it set? Line number? AUDIENCE: 10.",
    "start": "1804260",
    "end": "1809320"
  },
  {
    "text": "PROFESSOR: Line 10. So the wire ID uses the same\nobject IDs that we had earlier. So each wire has a unique\nID that's between zero",
    "start": "1809320",
    "end": "1816780"
  },
  {
    "text": "and the number of wires. ",
    "start": "1816780",
    "end": "1821960"
  },
  {
    "text": "This works when I insert\nmy wires into the index. What's the key for\nwires, by the way?",
    "start": "1821960",
    "end": "1828490"
  },
  {
    "text": "Where are wires inserted into\nthe index in the algorithm that we have and what's the key? ",
    "start": "1828490",
    "end": "1835770"
  },
  {
    "text": "The algorithm that we gave you. Yes. AUDIENCE: The y-coordinates. PROFESSOR: The? Which one, I couldn't hear you.",
    "start": "1835770",
    "end": "1841592"
  },
  {
    "text": "AUDIENCE: The y-coordinate. PROFESSOR: The y-coordinate. Can you tell me which line? ",
    "start": "1841592",
    "end": "1847600"
  },
  {
    "text": "The intuition is very good. You want the wires to be\nkeyed by the y-coordinate",
    "start": "1847600",
    "end": "1852659"
  },
  {
    "text": "so that when you a range query\nbetween this guy and this guy you get these wires.",
    "start": "1852660",
    "end": "1859685"
  },
  {
    "text": "That's the intuition. Now what's the code? AUDIENCE: Line 13. ",
    "start": "1859685",
    "end": "1867480"
  },
  {
    "text": "PROFESSOR: Line? I didn't hear you well. Line? AUDIENCE: 13. PROFESSOR: 13.",
    "start": "1867480",
    "end": "1872520"
  },
  {
    "text": "Wires are added to the\nindex when an event of type add is processed. Right?",
    "start": "1872520",
    "end": "1878410"
  },
  {
    "text": "Line 12 says if\nevent type is add so that's probably what we want. And line 13 adds it to the index\nand builds the key wire repair",
    "start": "1878410",
    "end": "1884890"
  },
  {
    "text": "with the key, the\ny-coordinate of the wire. ",
    "start": "1884890",
    "end": "1891460"
  },
  {
    "text": "Now let's look back\nat the keys and see that we have two special\nkey wire repair classes.",
    "start": "1891460",
    "end": "1900810"
  },
  {
    "text": "Key wire pair l and\nkey wire pair h. These don't want the wire.",
    "start": "1900810",
    "end": "1907340"
  },
  {
    "text": "Why would I make a wire key\npair that doesn't want the wire? Why is that useful?",
    "start": "1907340",
    "end": "1912450"
  },
  {
    "text": " AUDIENCE: You have the minimum\nand maximum wire at ease.",
    "start": "1912450",
    "end": "1922751"
  },
  {
    "text": "PROFESSOR: Very\ngood observation. The wire ID for the\nlow key pair looks",
    "start": "1922751",
    "end": "1928080"
  },
  {
    "text": "like minus infinity and the\none for the high key pair look like plus\ninfinity as long as I",
    "start": "1928080",
    "end": "1934020"
  },
  {
    "text": "don't have more than\na billion wires. What do these things not have?",
    "start": "1934020",
    "end": "1939049"
  },
  {
    "text": " They don't have a wire.",
    "start": "1939050",
    "end": "1945110"
  },
  {
    "text": "So if you look at key\nwire pair l and h, if you look at the initializers\non lines two and eight,",
    "start": "1945110",
    "end": "1950590"
  },
  {
    "text": "they only take a key\nthey don't take a wire. This is useful in\nwhich situation?",
    "start": "1950590",
    "end": "1957259"
  },
  {
    "text": "Where do I want to create\nan index key that's not associated\nwith the real wire?",
    "start": "1957260",
    "end": "1962487"
  },
  {
    "text": "AUDIENCE: When you want\nto make the list when you want to do a query. PROFESSOR: When I do a query.",
    "start": "1962487",
    "end": "1968450"
  },
  {
    "text": "Very good. If I'm querying, if I have\nthis vertical wire, which",
    "start": "1968450",
    "end": "1973770"
  },
  {
    "text": "starts from minus\n80 to plus 80 then I",
    "start": "1973770",
    "end": "1981780"
  },
  {
    "text": "would like to make a low key\nthat corresponds to minus 80 and a high key that\ncorresponds to plus 80,",
    "start": "1981780",
    "end": "1987300"
  },
  {
    "text": "but I don't have any wire with\na horizontal coordinate of 80. Right? A hackish solution\nwould be to make",
    "start": "1987300",
    "end": "1993800"
  },
  {
    "text": "fake wires with\nthose coordinates but if I make fake wires God\nknows where my system is going",
    "start": "1993800",
    "end": "1998960"
  },
  {
    "text": "to break elsewhere. Instead the clean solution is\nto have these key wire pairs so that when I insert\nwires I have a wire",
    "start": "1998960",
    "end": "2005880"
  },
  {
    "text": "and when I don't the\nwire is set to none. And the wire IDs are\nthese special values, minus infinity\nand plus infinity.",
    "start": "2005880",
    "end": "2012920"
  },
  {
    "text": "What's cool about setting the\nwire IDs to minus infinity and plus infinity? ",
    "start": "2012920",
    "end": "2022040"
  },
  {
    "text": "AUDIENCE: It's so that\nif you have a y of 80 this y is at negative\ninfinity so it's going to take that y also\nbecause its y value is",
    "start": "2022040",
    "end": "2033924"
  },
  {
    "text": "[INAUDIBLE]. PROFESSOR: All right. Cool. If I have a real\nkey wire pair and it",
    "start": "2033924",
    "end": "2041409"
  },
  {
    "text": "has a wire whose\ncoordinate is 80 this is going to be bigger\nthan a key wire pair",
    "start": "2041410",
    "end": "2052089"
  },
  {
    "text": "l with coordinate\n80 and it's going to be smaller than a key wire\npair h with coordinate 80.",
    "start": "2052090",
    "end": "2062158"
  },
  {
    "text": "If you do a query\nusing this and this it's going to grab all the\nwires with coordinate 80.",
    "start": "2062159",
    "end": "2068000"
  },
  {
    "start": "2068000",
    "end": "2074940"
  },
  {
    "text": "Does this makes sense? So what's cool about\nthis in terms of coding? ",
    "start": "2074940",
    "end": "2085010"
  },
  {
    "text": "Do I have equal keys\nin my range index? Do I have to handle\nmultiple equal keys?",
    "start": "2085010",
    "end": "2091800"
  },
  {
    "text": " AUDIENCE: No because,\nactually in this case yes.",
    "start": "2091800",
    "end": "2098744"
  },
  {
    "text": " PROFESSOR: Do I?",
    "start": "2098744",
    "end": "2103840"
  },
  {
    "text": "AUDIENCE: Because if you\nhave all the horizontal wires then it's possible\nthat you have two",
    "start": "2103840",
    "end": "2109765"
  },
  {
    "text": "horizontal wires at the same-- PROFESSOR: If I have\ntwo horizontal wires, say this guy here\nand this other guy",
    "start": "2109765",
    "end": "2116250"
  },
  {
    "text": "here, this guy here, what's\nthe key value pair for it? Key wire pair? ",
    "start": "2116250",
    "end": "2125640"
  },
  {
    "text": "Let's say the coordinate is\nminus 95 and the wire ID is 2. The key wire pair is\nthey key is minus 95",
    "start": "2125640",
    "end": "2134599"
  },
  {
    "text": "and the wire ID is 2, right? AUDIENCE: Yeah. PROFESSOR: And then\nfor this other wire, suppose the wire ID is\n10, the coordinate is",
    "start": "2134600",
    "end": "2143170"
  },
  {
    "text": "going to be minus 95 then the\nwire ID is going to be 10.",
    "start": "2143170",
    "end": "2148940"
  },
  {
    "text": "So how are they\ngoing to compare? AUDIENCE: Then that one\nis less than that one. PROFESSOR: Yup.",
    "start": "2148940",
    "end": "2154320"
  },
  {
    "text": "So even though I have two wires\nwith the same y-coordinates of the key as far as the\nalgorithm is concerned",
    "start": "2154320",
    "end": "2161410"
  },
  {
    "text": "is the same, in\nthe implementation the keys are artificially\ndifferent because I introduce",
    "start": "2161410",
    "end": "2167140"
  },
  {
    "text": "an artificial ordering on\nthe wires using that wire ID. ",
    "start": "2167140",
    "end": "2173880"
  },
  {
    "text": "In Which case would I have the\nsame key inserted in my index twice? ",
    "start": "2173880",
    "end": "2186100"
  },
  {
    "text": "Yes? AUDIENCE: [INAUDIBLE]. ",
    "start": "2186100",
    "end": "2191890"
  },
  {
    "text": "PROFESSOR: OK. If these two wires overlap,\nsay this guy ends here and this guy ends here, and if\nI put their keys into the index",
    "start": "2191890",
    "end": "2199155"
  },
  {
    "text": "they're still different. AUDIENCE: Only if they're\nthe same wire ID would they have the same--",
    "start": "2199155",
    "end": "2205390"
  },
  {
    "text": "PROFESSOR: OK, and when do two\nwires have the same wire ID? AUDIENCE: If one of them\nwas negative infinity.",
    "start": "2205390",
    "end": "2210867"
  },
  {
    "start": "2210867",
    "end": "2216179"
  },
  {
    "text": "PROFESSOR: Let's assume\nthat the infinities were in the right way. Yes?",
    "start": "2216179",
    "end": "2221559"
  },
  {
    "text": "No?  Wire IDs are unique. Every wire has it's own wire ID.",
    "start": "2221560",
    "end": "2227789"
  },
  {
    "text": "Wires will never have\nthe same wire ID. So the only case\nin which you have two equal keys in the index\nis if you insert the same wire",
    "start": "2227790",
    "end": "2234900"
  },
  {
    "text": "twice. Would you ever want to do that?",
    "start": "2234900",
    "end": "2240450"
  },
  {
    "text": "Probably not. You're going to the same wire\ntwice from the range query and that's not useful.",
    "start": "2240450",
    "end": "2246510"
  },
  {
    "text": "When implementing a data\nstructure for the range index we don't have to\ndeal with equal keys and that is nice because\nthat's less thinking.",
    "start": "2246510",
    "end": "2254760"
  },
  {
    "text": "Now when we do a query,\nwill the keys in the query be in the range index?",
    "start": "2254760",
    "end": "2261577"
  },
  {
    "text": "AUDIENCE: Not necessarily. ",
    "start": "2261577",
    "end": "2268734"
  },
  {
    "text": "PROFESSOR: How\nwould I do a query if I want to do a query\nfrom minus 80 to plus 80? AUDIENCE: You grab all\nthe horizontal wires whose",
    "start": "2268735",
    "end": "2274887"
  },
  {
    "text": "y-coordinates are-- PROFESSOR: You're thinking\nin the range index.",
    "start": "2274887",
    "end": "2281570"
  },
  {
    "text": "I'm thinking as the\nclient of the range index. So you have this\nrange index class, how would you issue a\nquery to the range index?",
    "start": "2281570",
    "end": "2289960"
  },
  {
    "text": "AUDIENCE: The list on this page. PROFESSOR: OK. I would call the list method.",
    "start": "2289960",
    "end": "2296690"
  },
  {
    "text": "And-- oh crap, I\nthought I was going to avoid doing that today.",
    "start": "2296690",
    "end": "2302800"
  },
  {
    "text": "l and h are keys, right? How do I construct my keys?",
    "start": "2302800",
    "end": "2307868"
  },
  {
    "text": "AUDIENCE: Use key wire pair. PROFESSOR: Key wire\npair left of 80--",
    "start": "2307868",
    "end": "2314250"
  },
  {
    "text": "sorry low, and key\nwire pair high of 80.",
    "start": "2314250",
    "end": "2319740"
  },
  {
    "text": "So then I'm going\nto get to these-- I don't have wires for\nthis 80 coordinate.",
    "start": "2319740",
    "end": "2324890"
  },
  {
    "text": "Sorry, minus 80 to\n80 because that's what the query looks like. I don't have wires\nfor these coordinates",
    "start": "2324890",
    "end": "2330100"
  },
  {
    "text": "so I'm going to use\nthese special values and this one is smaller than\nall the wires with coordinate",
    "start": "2330100",
    "end": "2335440"
  },
  {
    "text": "minus 80 and this one\nis bigger than all the wires with coordinate 80. Will these keys ever\nbe in the index?",
    "start": "2335440",
    "end": "2340870"
  },
  {
    "text": " Nope, we're only using\nthem for updates. If you put this in\nthe index then when",
    "start": "2340870",
    "end": "2346769"
  },
  {
    "text": "you're getting it back and you\ntry to get the wire associated with it you're\ngoing to get none, your code is going to crash.",
    "start": "2346770",
    "end": "2354340"
  },
  {
    "text": "If I have a query will\nthe keys in the query ever being the index? AUDIENCE: No. PROFESSOR: No.",
    "start": "2354340",
    "end": "2360330"
  },
  {
    "text": "That means fewer border\ncases to consider when implementing query.",
    "start": "2360330",
    "end": "2365565"
  },
  {
    "text": "All the keys in the\nrange index are different and they keys in the query will\nnever be in the range index.",
    "start": "2365565",
    "end": "2371025"
  },
  {
    "text": "AUDIENCE: When\nyou do the count l and h aren't in your range\nindex you have to count that.",
    "start": "2371025",
    "end": "2377069"
  },
  {
    "text": "PROFESSOR: Yeah. In this case that's why the\ncode didn't fail any test.",
    "start": "2377070",
    "end": "2382610"
  },
  {
    "text": "Because I'm not using numbers\nI'm actually using this. So for the number\nanalogy this is",
    "start": "2382610",
    "end": "2388340"
  },
  {
    "text": "equivalent to when I'm\ndoing a count of 4,11 that",
    "start": "2388340",
    "end": "2394120"
  },
  {
    "text": "would get rewritten as count of\n3, 99 and 11.01 and this works.",
    "start": "2394120",
    "end": "2405360"
  },
  {
    "text": "This is what these\ntwo values are doing.",
    "start": "2405360",
    "end": "2410740"
  },
  {
    "text": "Except if you try\nto do 0.99 and 0.01 that's brittle because you\nmight actually have those keys.",
    "start": "2410740",
    "end": "2419107"
  },
  {
    "text": "All right, does this make sense?  Any questions on this part?",
    "start": "2419107",
    "end": "2425321"
  },
  {
    "text": "Nope? Yes? Yes. AUDIENCE: Is this thing\nin a count off situation where you have a\ngap in the wires",
    "start": "2425321",
    "end": "2431636"
  },
  {
    "text": "but you still have a\n[INAUDIBLE] associated with it as it's going through it.",
    "start": "2431636",
    "end": "2437060"
  },
  {
    "text": "PROFESSOR: Sorry,\nsay that again. AUDIENCE: So with that\nexample right there. PROFESSOR: Yeah. PROFESSOR: Are you\nworried about the fact",
    "start": "2437060",
    "end": "2442960"
  },
  {
    "text": "that I'll have two equal keys or\nare you worried about the fact that these wires are crossing? AUDIENCE: No that\nthey're not overlapping.",
    "start": "2442960",
    "end": "2448730"
  },
  {
    "text": " You have a wire and you\nhave a wire coming down",
    "start": "2448730",
    "end": "2454076"
  },
  {
    "text": "and you have another wire. PROFESSOR: OK. This is not going\nto account for that. You have to write the\nbetter sweep line algorithm.",
    "start": "2454076",
    "end": "2461101"
  },
  {
    "text": "AUDIENCE: OK. PROFESSOR: What\nI'm talking about now will make your\nrange index faster.",
    "start": "2461102",
    "end": "2468010"
  },
  {
    "text": "Or it makes your range\nindex simpler to implement. AUDIENCE: OK. ",
    "start": "2468010",
    "end": "2474661"
  },
  {
    "text": "PROFESSOR: This is magic\nbehind the scenes that makes your code smaller. You still have to implement\nthe sweep line algorithm that",
    "start": "2474662",
    "end": "2480730"
  },
  {
    "text": "makes sure that when\nyou a range query it will either return less false\npositives or ideally no false",
    "start": "2480730",
    "end": "2487420"
  },
  {
    "text": "positives. And then the code\nwill be faster. But then when you\ndo that, you'll",
    "start": "2487420",
    "end": "2492940"
  },
  {
    "text": "see that it's still slow\nbecause the range index that we have here isn't optimal. Why isn't the range index\nhere optimal, by the way?",
    "start": "2492940",
    "end": "2499690"
  },
  {
    "text": " What can I improve about it?",
    "start": "2499690",
    "end": "2504910"
  },
  {
    "text": " AUDIENCE: Add and remove. PROFESSOR: Add and remove. OK.",
    "start": "2504910",
    "end": "2510350"
  },
  {
    "text": " We're using the comparison\nmodel because it's",
    "start": "2510350",
    "end": "2517590"
  },
  {
    "text": "convenient to use\nthe comparison model. You have complex objects to\nimplement those six methods that you see in key\nwire pair and bam.",
    "start": "2517590",
    "end": "2524270"
  },
  {
    "text": "You can do comparisons, you\ncan use any data structure or algorithm that assume\na comparison model.",
    "start": "2524270",
    "end": "2530730"
  },
  {
    "text": "What's the penalty of\nthe comparison model? What's the problem with it? Yes. AUDIENCE: It will be\nslower, or it will never",
    "start": "2530730",
    "end": "2537185"
  },
  {
    "text": "be faster than the [INAUDIBLE]. PROFESSOR: Yup. If I want to do a\nsort that is n log n.",
    "start": "2537185",
    "end": "2544964"
  },
  {
    "text": " And if I want to do a\nsearch that is theta what?",
    "start": "2544964",
    "end": "2552946"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. ",
    "start": "2552946",
    "end": "2558004"
  },
  {
    "text": "PROFESSOR: Now what are the best\nbounds that they have for these if we can go outside\nthe comparison model? Just to see if you guys are\npaying attention in lecture.",
    "start": "2558004",
    "end": "2564990"
  },
  {
    "text": " So best running\ntime for sort if we",
    "start": "2564990",
    "end": "2570150"
  },
  {
    "text": "don't have to use\nthe comparison model. AUDIENCE: n. PROFESSOR: n. OK. Best running time\nfor search if we",
    "start": "2570150",
    "end": "2576924"
  },
  {
    "text": "don't to use the\ncomparison model.  AUDIENCE: It's order\none with [INAUDIBLE].",
    "start": "2576924",
    "end": "2582630"
  },
  {
    "text": "PROFESSOR: Order\none, with hashing. Can you do any better than that?",
    "start": "2582630",
    "end": "2588796"
  },
  {
    "text": "AUDIENCE: You can\ncode it as zero. [LAUGHING] PROFESSOR: Sort has\nto output an array",
    "start": "2588796",
    "end": "2594830"
  },
  {
    "text": "of elements so it can\nbe faster than order n. Search has to output yes\nor no so it has to output",
    "start": "2594830",
    "end": "2601690"
  },
  {
    "text": "something so it has\nto be order one. So this is as fast\nas it gets, we're",
    "start": "2601690",
    "end": "2607150"
  },
  {
    "text": "definitely not going\nto go faster than that. We have this extra\nlog n factor that we",
    "start": "2607150",
    "end": "2613360"
  },
  {
    "text": "pay if we use the comparison\nmodel if we don't collect more information about our keys.",
    "start": "2613360",
    "end": "2619180"
  },
  {
    "text": "But in return we\nhave the convenience that all we have\nto do is establish an ordering relationship. ",
    "start": "2619180",
    "end": "2628020"
  },
  {
    "text": "Does it make sense? Cool. Let's try to talk about\nthe list pseudocode, which",
    "start": "2628020",
    "end": "2635830"
  },
  {
    "text": "you might have seen\non the pset before. And that's on the\nlast page here.",
    "start": "2635830",
    "end": "2642250"
  },
  {
    "text": "I can't give you a\nproof of why it works, but we can work together\nto figure out how it works",
    "start": "2642250",
    "end": "2647500"
  },
  {
    "text": "and get an intuitive\nunderstanding. Let's get the keys\nhere and let's assume we're using a regular BSD\nfor implementing a range index.",
    "start": "2647500",
    "end": "2656325"
  },
  {
    "start": "2656325",
    "end": "2662980"
  },
  {
    "text": "I'm going to put\nmy keys in a BSD. ",
    "start": "2662980",
    "end": "2668240"
  },
  {
    "text": "8, 3, 2, 5. ",
    "start": "2668240",
    "end": "2679850"
  },
  {
    "text": "OK. List those two things. LCA and no list.",
    "start": "2679850",
    "end": "2686670"
  },
  {
    "text": "Right. What's LCA? Suppose I want to list all\nthe keys between one and six.",
    "start": "2686670",
    "end": "2692370"
  },
  {
    "start": "2692370",
    "end": "2697860"
  },
  {
    "text": "First I'm going to call\nLCA and get some answer and then I'm going\nto call node list. What's the answer for LCA?",
    "start": "2697860",
    "end": "2703799"
  },
  {
    "text": " OK. AUDIENCE: Node at three.",
    "start": "2703800",
    "end": "2708930"
  },
  {
    "text": "Key value three.  PROFESSOR: What is this?",
    "start": "2708930",
    "end": "2714350"
  },
  {
    "text": "What's LCA? It's OK to give out an answer\nto a dumb question on the pset. ",
    "start": "2714350",
    "end": "2722089"
  },
  {
    "text": "So LCA is lowest\ncommon ancestor. Very good. It's the lowest common\nancestor of what?",
    "start": "2722090",
    "end": "2727529"
  },
  {
    "text": " AUDIENCE: Subtree of values that\nshould be returned nodeless.",
    "start": "2727530",
    "end": "2739329"
  },
  {
    "text": "PROFESSOR: So usually you\nhave two nodes in a tree and you want to return the LCA. If I want to find out the\nLCA of 2 and 5, that is 3.",
    "start": "2739330",
    "end": "2747940"
  },
  {
    "text": "If I want to find out the\nLCA of 2 and 13, that's 8. Now if the keys are not in the\ntree what does the LCA give me?",
    "start": "2747940",
    "end": "2756254"
  },
  {
    "text": "AUDIENCE: It's\nwhere they would be. PROFESSOR: It's where they\nwould be if they were inserted. Right. So 1 would be inserted here\nand 6 would be inserted here.",
    "start": "2756254",
    "end": "2766885"
  },
  {
    "text": " And then their LCA is indeed 3.",
    "start": "2766885",
    "end": "2772930"
  },
  {
    "text": "What does that tell me? Why is that useful?  AUDIENCE: You can cut off a\nbunch of the rest of the tree",
    "start": "2772930",
    "end": "2780220"
  },
  {
    "text": "so you don't have\nto look at that. PROFESSOR: A bunch of,\nor the rest of the tree?",
    "start": "2780220",
    "end": "2786835"
  },
  {
    "text": "AUDIENCE: The rest of the tree. PROFESSOR: The rest of the tree. So if 1 is here and\n6 is here, then I",
    "start": "2786835",
    "end": "2793620"
  },
  {
    "text": "know that all the keys--\nsorry, so 3 is to the left of 8",
    "start": "2793620",
    "end": "2801730"
  },
  {
    "text": "so all the keys\nto the right of 8",
    "start": "2801730",
    "end": "2808810"
  },
  {
    "text": "are going to be bigger\nthan 6, for example. Right. Because 6 is here\nand it's under 8.",
    "start": "2808810",
    "end": "2814700"
  },
  {
    "text": "I can throw this away. Now if this would be to\nthe left of something else, because 1 is here I\nknow that all the keys",
    "start": "2814700",
    "end": "2822959"
  },
  {
    "text": "to the left side of that\nthing would be smaller than 1. ",
    "start": "2822959",
    "end": "2830560"
  },
  {
    "text": "This subtree has to have all\nthe keys between 1 and 6. ",
    "start": "2830560",
    "end": "2836920"
  },
  {
    "text": "Yes. AUDIENCE: You don't\nhave to move 8, right? Where would you move 8? PROFESSOR: Yup. So we only look at the\nsubtree rooted at LCA.",
    "start": "2836920",
    "end": "2845400"
  },
  {
    "text": "LCA is passed as an\nargument to node list, and node list seems to\ndo sort of an-- this",
    "start": "2845400",
    "end": "2851845"
  },
  {
    "text": "is a pre-ordered traversal. You look at the key, you\nlook at the left node, at the left subtree, you\nlook at the right subtree.",
    "start": "2851845",
    "end": "2859150"
  },
  {
    "text": "Except there is some magic\nthere and in some cases it doesn't go and look.",
    "start": "2859150",
    "end": "2864999"
  },
  {
    "text": "Let's see what would a good case\nwhere it doesn't go and look like. Let's get the same tree. ",
    "start": "2864999",
    "end": "2878020"
  },
  {
    "text": "Suppose I want to do a\nlist between 4 and 11--",
    "start": "2878020",
    "end": "2884016"
  },
  {
    "text": "sorry between 4 and 10. We'll the LCA of 4 and 10?",
    "start": "2884016",
    "end": "2890002"
  },
  {
    "text": "AUDIENCE: Eight.  PROFESSOR: OK, so node list\nwould have to start here.",
    "start": "2890002",
    "end": "2897730"
  },
  {
    "text": "Suppose I'm here and I go to 3. I know 3 is smaller than 4.",
    "start": "2897730",
    "end": "2903920"
  },
  {
    "text": "Do I want to go left? Everything to the left\nof 3 is smaller than 4.",
    "start": "2903920",
    "end": "2909170"
  },
  {
    "text": "This entire subtree\ncan be pruned. Now suppose I'm on the right\nside and I'm at the 11.",
    "start": "2909170",
    "end": "2917790"
  },
  {
    "text": "11 is bigger than 10,\ndo I want to go right? So if 11 is bigger\nthan 10 I never",
    "start": "2917790",
    "end": "2924620"
  },
  {
    "text": "want to go right\nbecause everything to the right of that is bigger. ",
    "start": "2924620",
    "end": "2930600"
  },
  {
    "text": "OK so this is how pruning works.",
    "start": "2930600",
    "end": "2935950"
  },
  {
    "text": "Now if I'm at 3, can I stop? ",
    "start": "2935950",
    "end": "2941060"
  },
  {
    "text": "I can't stop and exit completely\nbecause on the right side of 3 I might have keys that\nare bigger than three",
    "start": "2941060",
    "end": "2946950"
  },
  {
    "text": "and that are in my interval. And in this example that\nseems to be the case. ",
    "start": "2946950",
    "end": "2955290"
  },
  {
    "text": "Let's look very quickly\nat the intuitive way",
    "start": "2955290",
    "end": "2962150"
  },
  {
    "text": "of analyzing the\nrunning time for this. Suppose I have my LCA\nup here and suppose",
    "start": "2962150",
    "end": "2970880"
  },
  {
    "text": "I go on a path from LCA\nto L and then-- let's",
    "start": "2970880",
    "end": "2976500"
  },
  {
    "text": "not worry about the right,\nabout h. h is somewhere here, the case is going\nto be symmetric.",
    "start": "2976500",
    "end": "2982050"
  },
  {
    "text": "When I go down the path, after I\ngo here would I ever want to go left?",
    "start": "2982050",
    "end": "2987410"
  },
  {
    "text": " If this node is before\na right turn then",
    "start": "2987410",
    "end": "2992660"
  },
  {
    "text": "I know that l is going to\nbe bigger than that node. Right? So I'm never going\nto take a left turn.",
    "start": "2992660",
    "end": "3000190"
  },
  {
    "text": "This subtree be pruned,\nthis subtree will be pruned, this subtree will be pruned.",
    "start": "3000190",
    "end": "3005950"
  },
  {
    "text": "Now if I go right\nhere, what happens? ",
    "start": "3005950",
    "end": "3011378"
  },
  {
    "text": "AUDIENCE: It's node-- PROFESSOR: All\nthe nodes here are going to be between l and LCA. LCA is smaller or equal to\nh so all these nodes here",
    "start": "3011378",
    "end": "3019720"
  },
  {
    "text": "are guaranteed to be nodes\nthat come out in my list. All right, why am I doing this?",
    "start": "3019720",
    "end": "3026170"
  },
  {
    "text": "I was saying before\nthat I absolutely have to have an\norder i because I",
    "start": "3026170",
    "end": "3031820"
  },
  {
    "text": "have to produce the output list. If we look at the\nlines three and four,",
    "start": "3031820",
    "end": "3038599"
  },
  {
    "text": "line four outputs a key right? Line four is definitely\norder i and line three",
    "start": "3038600",
    "end": "3045075"
  },
  {
    "text": "is an if condition\nso we know for sure that line four is\nonly going to execute four keys that are\nbetween l and h.",
    "start": "3045075",
    "end": "3052720"
  },
  {
    "text": "This algorithm is going to\nvisit some nodes in the tree. For example, if I have a list of\n4 and 10 it's going to visit 8,",
    "start": "3052720",
    "end": "3061860"
  },
  {
    "text": "it's going to\nvisit 3, 5, and 11. And for some of the\nnodes that are visited",
    "start": "3061860",
    "end": "3069020"
  },
  {
    "text": "it's going to output them. Right this guy gets output\nand this guy gets output.",
    "start": "3069020",
    "end": "3076290"
  },
  {
    "text": "The nodes that are\noutputs are order i. Those are already\ncovered in the i term.",
    "start": "3076290",
    "end": "3082407"
  },
  {
    "text": "And in order to get the running\ntime what I need to know is, how many nodes do\nI visit that are not part of the output.",
    "start": "3082407",
    "end": "3089940"
  },
  {
    "text": "Because if I end up visiting\nthe entire tree then that's order n plus i. So order n.",
    "start": "3089940",
    "end": "3095160"
  },
  {
    "text": "But if I only end up visiting a\nfew nodes outside of the output then that might be a lot better.",
    "start": "3095160",
    "end": "3102090"
  },
  {
    "text": "And here I'm trying to\nargue that I will only visit a few notes\nthe outside the path.",
    "start": "3102090",
    "end": "3108089"
  },
  {
    "text": " In fact, for every\nnode I'm going to visit at most of the node\nand the node at its left.",
    "start": "3108090",
    "end": "3117650"
  },
  {
    "text": "And then everything to the right\nof the path is between l and h, so everything to the right\nis going to be output.",
    "start": "3117650",
    "end": "3124460"
  },
  {
    "text": "Everything here is in\norder i and everything here is visited in that output.",
    "start": "3124460",
    "end": "3130130"
  },
  {
    "text": "And potentially everything\non the path as well. So what's the height of a\npath in a binary search tree?",
    "start": "3130130",
    "end": "3139356"
  },
  {
    "text": "Regular binary search tree?  OK, and worst case.",
    "start": "3139356",
    "end": "3145990"
  },
  {
    "text": "So worst case the\nheight is order n.",
    "start": "3145990",
    "end": "3151500"
  },
  {
    "text": "But we usually call it height\nbecause on average, at least, it's log n.",
    "start": "3151500",
    "end": "3157740"
  },
  {
    "text": "It's somewhere\nbetween n and log n. What is the running time for\nlists in a binary search tree?",
    "start": "3157740",
    "end": "3165450"
  },
  {
    "text": " If you buy this argument here. What is the running time?",
    "start": "3165450",
    "end": "3171440"
  },
  {
    "text": " AUDIENCE: [INAUDIBLE]. ",
    "start": "3171440",
    "end": "3178720"
  },
  {
    "text": "PROFESSOR: You could say n plus\ni and you're perfectly correct. But we can make it a bit better.",
    "start": "3178720",
    "end": "3184200"
  },
  {
    "text": "What's the height of this path? AUDIENCE: h. PROFESSOR: H. What's\nthe running time?",
    "start": "3184200",
    "end": "3193679"
  },
  {
    "text": "AUDIENCE: h plus i.  PROFESSOR: OK.",
    "start": "3193679",
    "end": "3199460"
  },
  {
    "text": "Cool. Does this make sense at all? Is this too complicated? AUDIENCE: That's the\nrunning time for what?",
    "start": "3199460",
    "end": "3205920"
  },
  {
    "text": "PROFESSOR: This is the\nrunning time for lists. ",
    "start": "3205920",
    "end": "3213150"
  },
  {
    "text": "All right so, questions? Is this too far out?",
    "start": "3213150",
    "end": "3218574"
  },
  {
    "text": "Did I lose you guys completely? ",
    "start": "3218574",
    "end": "3223710"
  },
  {
    "text": "Makes perfect sense. I like that. AUDIENCE: It's oder\nn plus i because it could have up to any\nnodes on it, right?",
    "start": "3223710",
    "end": "3231456"
  },
  {
    "text": "PROFESSOR: Yup. AUDIENCE: And then it's\norder i because you have to add that\n[INAUDIBLE] of nodes anyway. It's order h.",
    "start": "3231456",
    "end": "3238417"
  },
  {
    "text": "PROFESSOR: I'm saying that it's\na binary search tree of height h and if h is better\nthan n then I'm",
    "start": "3238417",
    "end": "3244500"
  },
  {
    "text": "going to do much better\nthan n and that's why I'm putting that h there. AUDIENCE: OK, that makes sense. I think it's just a ltitle\nconfusing at that part, but the [INAUDIBLE] makes\nsense because of course",
    "start": "3244500",
    "end": "3252613"
  },
  {
    "text": "that's a smaller\nnode you're not going to look at the\nleft portion you're going to look at the\nright because it's bigger",
    "start": "3252613",
    "end": "3258090"
  },
  {
    "text": "than your smaller\n[INAUDIBLE], right? So if you go to the\nright, that means that--",
    "start": "3258090",
    "end": "3264190"
  },
  {
    "text": "PROFESSOR: Here I know that\nl is on the left, right? So l is smaller than this key.",
    "start": "3264190",
    "end": "3270190"
  },
  {
    "text": "Everything to the right of\nthis key is between l and LCA.",
    "start": "3270190",
    "end": "3275630"
  },
  {
    "text": "LCA is smaller or equal to h. Everything here is\nbetween l and h, so all the nodes here\nare going to be output.",
    "start": "3275630",
    "end": "3283740"
  },
  {
    "text": "All the nodes here count as i. AUDIENCE: OK. PROFESSOR: Now when I turn left\nhere, this is smaller than l.",
    "start": "3283740",
    "end": "3298820"
  },
  {
    "text": "This is smaller than l\nbecause l is on the right. This thing is\ngoing to be pruned.",
    "start": "3298820",
    "end": "3305030"
  },
  {
    "text": "So I will visit the parent,\nthis node, and that's it. I'm not going to look down. And this is how the\nnodes look like.",
    "start": "3305030",
    "end": "3312562"
  },
  {
    "text": "Everything that's to\nthe left of the path is not visited, everything\nthat's to the right it open. ",
    "start": "3312562",
    "end": "3329170"
  },
  {
    "text": "Any more questions?  I hope you get it\nright on pset then.",
    "start": "3329170",
    "end": "3334430"
  },
  {
    "text": " Thanks guys.",
    "start": "3334430",
    "end": "3339740"
  }
]