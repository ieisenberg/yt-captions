[
  {
    "text": "ISA designers receive many requests for what\nare affectionately known as \"features\" - additional",
    "start": "1300",
    "end": "6630"
  },
  {
    "text": "instructions that, in theory, will make the\nISA better in some way.",
    "start": "6630",
    "end": "10890"
  },
  {
    "text": "Dealing with such requests is the moment to\napply our quantitive approach in order to",
    "start": "10890",
    "end": "15599"
  },
  {
    "text": "be able to judge the tradeoffs between cost\nand benefits.",
    "start": "15599",
    "end": "20749"
  },
  {
    "text": "Our first \"feature request\" is to allow small\nconstants as the second operand in ALU instructions.",
    "start": "20749",
    "end": "27489"
  },
  {
    "text": "So if we replaced the 5-bit \"rb\" field, we\nwould have room in the instruction to include",
    "start": "27489",
    "end": "32140"
  },
  {
    "text": "a 16-bit constant as bits [15:0] of the instruction.",
    "start": "32140",
    "end": "37890"
  },
  {
    "text": "The argument in favor of this request is that\nsmall constants appear frequently in many",
    "start": "37890",
    "end": "42420"
  },
  {
    "text": "programs and it would make programs shorter\nif we didn't have use load operations to read",
    "start": "42420",
    "end": "47750"
  },
  {
    "text": "constant values from main memory.",
    "start": "47750",
    "end": "50539"
  },
  {
    "text": "The argument against the request is that we\nwould need additional control and datapath",
    "start": "50539",
    "end": "54410"
  },
  {
    "text": "logic to implement the feature, increasing\nthe hardware cost and probably decreasing",
    "start": "54410",
    "end": "58839"
  },
  {
    "text": "the performance.",
    "start": "58839",
    "end": "60570"
  },
  {
    "text": "So our strategy is to modify our benchmark\nprograms to use the ISA augmented with this",
    "start": "60570",
    "end": "65250"
  },
  {
    "text": "feature and measure the impact on a simulated\nexecution.",
    "start": "65250",
    "end": "70080"
  },
  {
    "text": "Looking at the results, we find that there\nis compelling evidence that small constants",
    "start": "70080",
    "end": "74390"
  },
  {
    "text": "are indeed very common as the second operands\nto many operations.",
    "start": "74390",
    "end": "79729"
  },
  {
    "text": "Note that we're not so much interested in\nsimply looking at the code.",
    "start": "79730",
    "end": "83220"
  },
  {
    "text": "Instead we want to look at what instructions\nactually get executed while running the benchmark",
    "start": "83220",
    "end": "87550"
  },
  {
    "text": "programs.",
    "start": "87550",
    "end": "88550"
  },
  {
    "text": "This will take into account that instructions\nexecuted during each iteration of a loop might",
    "start": "88550",
    "end": "93580"
  },
  {
    "text": "get executed 1000's of times even though they\nonly appear in the program once.",
    "start": "93580",
    "end": "100130"
  },
  {
    "text": "Looking at the results, we see that over half\nof the arithmetic instructions have a small",
    "start": "100130",
    "end": "104880"
  },
  {
    "text": "constant as their second operand.",
    "start": "104880",
    "end": "107860"
  },
  {
    "text": "Comparisons involve small constants 80% of\nthe time.",
    "start": "107860",
    "end": "111210"
  },
  {
    "text": "This probably reflects the fact that during\nexecution comparisons are used in determining",
    "start": "111210",
    "end": "115590"
  },
  {
    "text": "whether we've reached the end of a loop.",
    "start": "115590",
    "end": "118149"
  },
  {
    "text": "And small constants are often found in address\ncalculations done by load and store operations.",
    "start": "118150",
    "end": "124530"
  },
  {
    "text": "Operations involving constant operands are\nclearly a common case, one well worth optimizing.",
    "start": "124530",
    "end": "130140"
  },
  {
    "text": "Adding support for small constant operands\nto the ISA resulted in programs that were",
    "start": "130140",
    "end": "134750"
  },
  {
    "text": "measurably smaller and faster.",
    "start": "134750",
    "end": "137170"
  },
  {
    "text": "So: feature request approved!",
    "start": "137170",
    "end": "141099"
  },
  {
    "text": "Here we see the second of the two Beta instruction\nformats.",
    "start": "141100",
    "end": "144850"
  },
  {
    "text": "It's a modification of the first format where\nwe've replaced the 5-bit \"rb\" field with a",
    "start": "144850",
    "end": "150060"
  },
  {
    "text": "16-bit field holding a constant in two's complement\nformat.",
    "start": "150060",
    "end": "154319"
  },
  {
    "text": "This will allow us to represent constant operands\nin the range of 0x8000 (decimal -32768) to",
    "start": "154319",
    "end": "162340"
  },
  {
    "text": "0x7FFF (decimal 32767).",
    "start": "162340",
    "end": "170879"
  },
  {
    "text": "Here's an example of the add-constant (ADDC)\ninstruction which adds the contents of R1",
    "start": "170880",
    "end": "176090"
  },
  {
    "text": "and the constant -3, writing the result into\nR3.",
    "start": "176090",
    "end": "180879"
  },
  {
    "text": "We can see that the second operand in the\nsymbolic representation is now a constant",
    "start": "180880",
    "end": "185080"
  },
  {
    "text": "(or, more generally, an expression that can\nevaluated to get a constant value).",
    "start": "185080",
    "end": "191260"
  },
  {
    "text": "One technical detail needs discussion: the\ninstruction contains a 16-bit constant, but",
    "start": "191260",
    "end": "196930"
  },
  {
    "text": "the datapath requires a 32-bit operand.",
    "start": "196930",
    "end": "200390"
  },
  {
    "text": "How does the datapath hardware go about converting\nfrom, say, the 16-bit representation of -3",
    "start": "200390",
    "end": "206470"
  },
  {
    "text": "to the 32-bit representation of -3?",
    "start": "206470",
    "end": "210959"
  },
  {
    "text": "Comparing the 16-bit and 32-bit representations\nfor various constants, we see that if the",
    "start": "210959",
    "end": "216480"
  },
  {
    "text": "16-bit two's-complement constant is negative\n(i.e., its high-order bit is 1), the high",
    "start": "216480",
    "end": "222819"
  },
  {
    "text": "sixteen bits of the equivalent 32-bit constant\nare all 1's.",
    "start": "222820",
    "end": "228060"
  },
  {
    "text": "And if the 16-bit constant is non-negative\n(i.e., its high-order bit is 0), the high",
    "start": "228060",
    "end": "233630"
  },
  {
    "text": "sixteen bits of the 32-bit constant are all\n0's.",
    "start": "233630",
    "end": "237540"
  },
  {
    "text": "Thus the operation the hardware needs to perform\nis \"sign extension\" where the sign-bit of",
    "start": "237540",
    "end": "243530"
  },
  {
    "text": "the 16-bit constant is replicated sixteen\ntimes to form the high half of the 32-bit",
    "start": "243530",
    "end": "249280"
  },
  {
    "text": "constant.",
    "start": "249280",
    "end": "250340"
  },
  {
    "text": "The low half of the 32-bit constant is simply\nthe 16-bit constant from the instruction.",
    "start": "250340",
    "end": "255560"
  },
  {
    "text": "No additional logic gates will be needed to\nimplement sign extension - we can do it all",
    "start": "255560",
    "end": "259940"
  },
  {
    "text": "with wiring.",
    "start": "259940",
    "end": "261720"
  },
  {
    "text": "Here are the fourteen ALU instructions in\ntheir \"with constant\" form, showing the same",
    "start": "261720",
    "end": "266779"
  },
  {
    "text": "instruction mnemonics but with a \"C\" suffix\nindicate the second operand is a constant.",
    "start": "266779",
    "end": "273300"
  },
  {
    "text": "Since these are additional instructions, these\nhave different opcodes than the original ALU",
    "start": "273300",
    "end": "278809"
  },
  {
    "text": "instructions.",
    "start": "278809",
    "end": "279809"
  },
  {
    "text": "Finally, note that if we need a constant operand\nwhose representation does NOT fit into 16",
    "start": "279809",
    "end": "284490"
  },
  {
    "text": "bits, then we have to store the constant as\na 32-bit value in a main memory location and",
    "start": "284490",
    "end": "289539"
  },
  {
    "text": "load it into a register for use just like\nwe would any variable value.",
    "start": "289539",
    "end": "294759"
  },
  {
    "text": "To give some sense for the additional datapath\nhardware that will be needed, let's update",
    "start": "294759",
    "end": "298830"
  },
  {
    "text": "our implementation sketch to add support for\nconstants as the second ALU operand.",
    "start": "298830",
    "end": "304089"
  },
  {
    "text": "We don't have to add much hardware:\njust a multiplexer which selects either the",
    "start": "304089",
    "end": "308279"
  },
  {
    "text": "\"rb\" register value or the sign-extended constant\nfrom the 16-bit field in the instruction.",
    "start": "308279",
    "end": "314419"
  },
  {
    "text": "The BSEL control signal that controls the\nmultiplexer is 1 for the ALU-with-constant",
    "start": "314419",
    "end": "319560"
  },
  {
    "text": "instructions and 0 for the regular ALU instructions.",
    "start": "319560",
    "end": "323289"
  },
  {
    "text": "We'll put the hardware implementation details\naside for now and revisit them in a few lectures.",
    "start": "323289",
    "end": "328739"
  }
]