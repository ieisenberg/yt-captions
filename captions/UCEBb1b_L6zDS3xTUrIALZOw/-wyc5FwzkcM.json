[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "6874"
  },
  {
    "start": "6874",
    "end": "16720"
  },
  {
    "text": "ANA BELL: OK, so\nlet's get started. Today's lecture\nwill be the last one",
    "start": "16720",
    "end": "22869"
  },
  {
    "text": "we have on object oriented\nprogramming and creating our own data types\nwith Python classes.",
    "start": "22870",
    "end": "29690"
  },
  {
    "text": "So in today's\nlecture, we're going to go through an example\nthat's more involved.",
    "start": "29690",
    "end": "35650"
  },
  {
    "text": "We're going to be creating our\nown fitness tracker object. And specifically, we're going to\ncreate a class that implements",
    "start": "35650",
    "end": "43720"
  },
  {
    "text": "the idea of a workout. And the slides for\ntoday, are going to feel very similar to the\nslides from Monday's lecture.",
    "start": "43720",
    "end": "51129"
  },
  {
    "text": "A lot of them are just kind of\nreinforcing the same ideas we saw last lecture on creating\ngetters and setters,",
    "start": "51130",
    "end": "60130"
  },
  {
    "text": "creating class variables,\nand the idea of inheritance. But we're just going\nto do it in the context",
    "start": "60130",
    "end": "65530"
  },
  {
    "text": "of this more involved example,\nthe fitness tracker, OK.",
    "start": "65530",
    "end": "70680"
  },
  {
    "text": "So let me remind you,\nfirst of all, something we've been talking\nabout and hopefully, you",
    "start": "70680",
    "end": "76200"
  },
  {
    "text": "understand at this point\nin our lectures on object oriented programming, and that's\nthe idea that when we write",
    "start": "76200",
    "end": "84210"
  },
  {
    "text": "our own object types,\nwe're writing code from two different perspectives. The first perspective is the\none on the left-hand side",
    "start": "84210",
    "end": "90930"
  },
  {
    "text": "here, where we are\nmaking design decisions for how we want to implement\nthis new object, this new data",
    "start": "90930",
    "end": "96420"
  },
  {
    "text": "type. And when we make these\ndesign decisions, we decide the name\nof the object. We decide the attributes, which\nare either data or procedures",
    "start": "96420",
    "end": "105359"
  },
  {
    "text": "that we want the object to have. And then once we've\ndecided on this,",
    "start": "105360",
    "end": "110600"
  },
  {
    "text": "and we've implemented\nour data type, then we can start to\nuse the data type. And to use it, we are\ncreating a whole bunch",
    "start": "110600",
    "end": "118430"
  },
  {
    "text": "of objects of this type. And we're manipulating\nthese objects in some interesting\nand useful way.",
    "start": "118430",
    "end": "125310"
  },
  {
    "text": "So the left-hand\nside, we're creating this blueprint, this\nabstract notion of an object. And the right-hand side, we\nare creating actual instances",
    "start": "125310",
    "end": "133820"
  },
  {
    "text": "that we manipulate. So up this object\noriented set of lectures, we've really just been working\nwith the right-hand side.",
    "start": "133820",
    "end": "141170"
  },
  {
    "text": "We've been working with objects\nthat other people have created, but the big idea of\nthese set of lectures",
    "start": "141170",
    "end": "146270"
  },
  {
    "text": "is that we now get to\ncreate our own object types, so we get to write\nthis code here.",
    "start": "146270",
    "end": "151970"
  },
  {
    "text": "OK, so we're going to\nwrite code to create a tracker for workouts.",
    "start": "151970",
    "end": "158570"
  },
  {
    "text": "And today's lecture,\nthere's going to be a sequence of things\nthat we're going to do.",
    "start": "158570",
    "end": "163730"
  },
  {
    "text": "We're going to start out with\na really simple workout object. And then we're going\nto improve on it. So I've actually set\nout a little roadmap",
    "start": "163730",
    "end": "170150"
  },
  {
    "text": "here on the board\nthat we can follow. So every time we finish\nsort of a little section, we'll check it\noff so just easier",
    "start": "170150",
    "end": "176210"
  },
  {
    "text": "to understand where we\nare in today's lecture. So we're going to create, first,\njust a very simple workout",
    "start": "176210",
    "end": "182690"
  },
  {
    "text": "object in the same spirit that\nwe've been creating objects. Then we're going\nto improve on it",
    "start": "182690",
    "end": "188840"
  },
  {
    "text": "a little bit by adding nicer\nmethods and things like that. And then we're going to go\nthrough the idea of inheritance",
    "start": "188840",
    "end": "195560"
  },
  {
    "text": "to create very specific\ntypes of workouts. So if we think\nabout workouts, we",
    "start": "195560",
    "end": "201110"
  },
  {
    "text": "have many different\nkinds of workouts, right. We've got biking,\nswimming, running,",
    "start": "201110",
    "end": "206390"
  },
  {
    "text": "but really, at the core of all\nthese workouts, if we think about the information related\nto just a very generic workout,",
    "start": "206390",
    "end": "214440"
  },
  {
    "text": "not a running or swimming\nspecific one or a biking one, just a generic\nworkout, there",
    "start": "214440",
    "end": "219810"
  },
  {
    "text": "are some common properties that\nall of these workouts have. So I've listed them here.",
    "start": "219810",
    "end": "227400"
  },
  {
    "text": "A workout might have an\nicon associated with it. So this or this or this,\nbut whatever it may be, there is an icon\nproperty for a workout.",
    "start": "227400",
    "end": "237060"
  },
  {
    "text": "The kind of workout so\nbiking, swimming, running, things like that. A date, so maybe a start\ndate and an end date,",
    "start": "237060",
    "end": "244240"
  },
  {
    "text": "start time, end time,\nthat kind of information. The heart rate, maybe\naverage heart rate throughout that entire activity,\nthe distance and the number",
    "start": "244240",
    "end": "254040"
  },
  {
    "text": "of calories burned. All of these properties are\ncommon to any kind of workout that we might want to create.",
    "start": "254040",
    "end": "261310"
  },
  {
    "text": "But now that we have\nspecific kinds of workouts that we might want to create,\nwe can actually think well,",
    "start": "261310",
    "end": "268280"
  },
  {
    "text": "in addition to these\ncommon properties, a swimming specific\nworkout might actually have some more information\nthat we'd like to save,",
    "start": "268280",
    "end": "276250"
  },
  {
    "text": "and we'd like to allow the user\nto work with so the swimming pace, maybe the stroke type,\nthe 100-yard splits, things",
    "start": "276250",
    "end": "282280"
  },
  {
    "text": "like that for swimming. And for running, we\nmight want to show the user the cadence,\nthe running pace,",
    "start": "282280",
    "end": "287530"
  },
  {
    "text": "the mile splits, and\nmaybe the total elevation throughout that run.",
    "start": "287530",
    "end": "292710"
  },
  {
    "text": "But the idea here\nis that we have some core set of\nproperties, that no matter what kind of workout\nwe're creating,",
    "start": "292710",
    "end": "298470"
  },
  {
    "text": "we would like to\nsave, and we would like to allow the user to store\nand to do operations with.",
    "start": "298470",
    "end": "306780"
  },
  {
    "text": "Now when we implement\nour workout class, we're not going to\nimplement all of these. They're not all necessary.",
    "start": "306780",
    "end": "311820"
  },
  {
    "text": "We're going to just keep\nsome of the core ones. So the ones we're actually\ngoing to implement in this class are italicized.",
    "start": "311820",
    "end": "318569"
  },
  {
    "text": "So we're going to keep the\nicon and the kind of workout, the start time,\nend times, and then",
    "start": "318570",
    "end": "324330"
  },
  {
    "text": "the number of calories burned. That's something\nthat we're going to just save as the common set\nof attributes for a workout.",
    "start": "324330",
    "end": "331979"
  },
  {
    "text": "But of course, you can see\nthat if you make the design decision to improve\nupon this workout class, you might include a bunch of\nthese other ones, as well.",
    "start": "331980",
    "end": "340550"
  },
  {
    "text": "OK, so we're going to have to\ndecide the data attributes.",
    "start": "340550",
    "end": "345840"
  },
  {
    "text": "So we just mentioned on\nthe previous slide, when we make design decisions,\nwe figure out the attributes that we'd like to have\nfor our object type.",
    "start": "345840",
    "end": "353640"
  },
  {
    "text": "So that's the data\nand the behaviors. For the data for\nour workout, we've decided it would be\nthe start time, the end",
    "start": "353640",
    "end": "359960"
  },
  {
    "text": "time, and the number\nof calories burned. So those three things together\nmaybe start time is a string,",
    "start": "359960",
    "end": "365630"
  },
  {
    "text": "end time is a\nstring, and calories is a number, either a\nfloat or int or whatever. Those three things together\nmake up the object a workout.",
    "start": "365630",
    "end": "375680"
  },
  {
    "text": "And then in terms of\nfunctional attributes, so these are the methods\nthat our object might have,",
    "start": "375680",
    "end": "381450"
  },
  {
    "text": "well, we can have, of\ncourse, the ability to tell us the\nnumber of calories burned, so something\nlike a getter method",
    "start": "381450",
    "end": "388640"
  },
  {
    "text": "to set the number\nof calories burned if we accidentally inputted\nthe wrong number, reset it.",
    "start": "388640",
    "end": "394070"
  },
  {
    "text": "And then maybe something like\ndisplaying an information card. So something like\nthis if the user",
    "start": "394070",
    "end": "401570"
  },
  {
    "text": "asks us to print\na workout object, we might display information\nin this nice manner here.",
    "start": "401570",
    "end": "409169"
  },
  {
    "text": "All right, so let's\nstart defining our class. So this is a very\nsimple workout class. So we're going to do the box\nnumber one up there before we",
    "start": "409170",
    "end": "417240"
  },
  {
    "text": "improve on it. So this is in the\nsame spirit as we have been defining classes\nin the past three lectures,",
    "start": "417240",
    "end": "423130"
  },
  {
    "text": "all right. So we tell Python we're\ncreating a new object by saying this is a class\nand the name of this object.",
    "start": "423130",
    "end": "430630"
  },
  {
    "text": "So the type of this\nobject is Workout, and the parent of this object\nis the generic Python object,",
    "start": "430630",
    "end": "437130"
  },
  {
    "text": "so far so good, right. Now, the first method we have\nto implement is the init method.",
    "start": "437130",
    "end": "442650"
  },
  {
    "text": "It tells Python how to\ncreate an object of type Workout, the constructor. And we've got a bunch\nof parameters in here",
    "start": "442650",
    "end": "449699"
  },
  {
    "text": "because it's just a\nregular function that's a little bit special. The first parameter of every\nmethod is, of course, self.",
    "start": "449700",
    "end": "457080"
  },
  {
    "text": "Because when we call a method,\nwe call it on an object. So some object dot\nthis method name.",
    "start": "457080",
    "end": "464139"
  },
  {
    "text": "The thing before the\ndot, effectively, gets mapped to the\nvariable self, which",
    "start": "464140",
    "end": "469600"
  },
  {
    "text": "is why every one\nof these methods has self as the first parameter. And then we've got a whole\nbunch of other parameters",
    "start": "469600",
    "end": "476290"
  },
  {
    "text": "for how we would like to\ninitialize the Workout object. So we're going to say, when\nwe create a Workout object,",
    "start": "476290",
    "end": "482500"
  },
  {
    "text": "we're going to tell it\nthe start time, the end time, and the number\nof calories burned.",
    "start": "482500",
    "end": "489479"
  },
  {
    "text": "So that's the function\nstub, I guess. That's how you\ncreate the object.",
    "start": "489480",
    "end": "495570"
  },
  {
    "text": "And then what does this\nfunction actually do? What does this\nmethod actually do? Well, it does some\nof the usual things",
    "start": "495570",
    "end": "502020"
  },
  {
    "text": "that we know at this point. So it basically maps every\none of these input parameters",
    "start": "502020",
    "end": "508020"
  },
  {
    "text": "to data attributes self.start,\nself.end, and self.calories, OK.",
    "start": "508020",
    "end": "514389"
  },
  {
    "text": "But in addition to\njust saving these as data attributes,\nthe things that are passed in when\nyou create the object,",
    "start": "514390",
    "end": "520900"
  },
  {
    "text": "we would like to\ndo two more things. We're creating two\nmore data attributes. So in total, a workout\nobject is defined",
    "start": "520900",
    "end": "527800"
  },
  {
    "text": "by five data attributes. These last two data attributes,\nwe don't need to pass in.",
    "start": "527800",
    "end": "533530"
  },
  {
    "text": "We're just going to, by\ndefault, make them two strings. The icon is going to be the\nstring, this sweating person",
    "start": "533530",
    "end": "543130"
  },
  {
    "text": "emoji. And you can have\nemojis inside strings, which is actually pretty cool. And the kind is going to be\njust the kind of workout,",
    "start": "543130",
    "end": "550598"
  },
  {
    "text": "so we're just going to set\nit to be the string workout. When we create running\nworkouts, it'll just be the string running.",
    "start": "550598",
    "end": "555650"
  },
  {
    "text": "When we create biking workouts,\nit'll be a string biking. Whatever you want it to be. And we're going to see where\nthese show up later on.",
    "start": "555650",
    "end": "563509"
  },
  {
    "text": "OK, so that's the definition\nof my class Workout, and then, for now, that's it.",
    "start": "563510",
    "end": "569250"
  },
  {
    "text": "That's all we have in terms\nof the class definition. Now what happens when we create\nan actual Workout object?",
    "start": "569250",
    "end": "574760"
  },
  {
    "text": "Well, we invoke the\nname of the class. So we say here, Workout.",
    "start": "574760",
    "end": "580519"
  },
  {
    "text": "And we're going to save this\nobject, to the right hand side of the equal sign,\nas variable my_workout,",
    "start": "580520",
    "end": "587120"
  },
  {
    "text": "so far review. We pass in the parameters that\nthe Workout object expects.",
    "start": "587120",
    "end": "593540"
  },
  {
    "text": "So here's a string\nrepresenting the start time, a string representing\nthe end time, and the calories burned for\nthis particular workout, 200.",
    "start": "593540",
    "end": "604320"
  },
  {
    "text": "Yes, good. OK, so then we can\nadd a whole bunch",
    "start": "604320",
    "end": "611160"
  },
  {
    "text": "more methods to our class. That was just the init method. But last lecture, I\nmentioned that it's",
    "start": "611160",
    "end": "616560"
  },
  {
    "text": "important to add\ngetters and setter methods to allow the user\nto grab or set various data",
    "start": "616560",
    "end": "624600"
  },
  {
    "text": "attributes. So here, I've got\nthree getter methods to grab for me the calories,\nstart time, and end time,",
    "start": "624600",
    "end": "630570"
  },
  {
    "text": "and three setter methods\nto set the calories, start time, and end time. ",
    "start": "630570",
    "end": "638750"
  },
  {
    "text": "All right, so what I\nwanted to show you, and this is not\nsomething we've actually",
    "start": "638750",
    "end": "644440"
  },
  {
    "text": "seen before, I wanted to show\nyou that every time you create an object of some type or even\nan object that already exists,",
    "start": "644440",
    "end": "652000"
  },
  {
    "text": "you can actually look\ninto where this object is",
    "start": "652000",
    "end": "657190"
  },
  {
    "text": "stored in memory,\nwhich is kind of cool. So if we think about\nthe class definition",
    "start": "657190",
    "end": "662440"
  },
  {
    "text": "that we've done so far. So not creating an\nactual instance, just defining the class.",
    "start": "662440",
    "end": "667750"
  },
  {
    "text": "This class definition\nis actually kind of like an object\nstored away in Python memory.",
    "start": "667750",
    "end": "673899"
  },
  {
    "text": "So here I have my Workout class. And associated with my\nWorkout class definition,",
    "start": "673900",
    "end": "679600"
  },
  {
    "text": "Python knows about\nall of these methods that you're allowed to do\nwith this Python class.",
    "start": "679600",
    "end": "685900"
  },
  {
    "text": "And this is called the\nclass state dictionary. So it's a dictionary\nthat basically holds the state of your object.",
    "start": "685900",
    "end": "692630"
  },
  {
    "text": "So I wanted to show you what\nthat looks like in code. So this is my Workout class.",
    "start": "692630",
    "end": "698290"
  },
  {
    "text": "And the way you access\nthe state dictionary is by invoking the\nname of your class.",
    "start": "698290",
    "end": "704160"
  },
  {
    "text": "So not an instance, the\nname of the actual class dot this Dunder method\ndouble underscore dict double",
    "start": "704160",
    "end": "710930"
  },
  {
    "text": "underscore. So this holds the\nstate dictionary. And if we just access\nthe keys, we're",
    "start": "710930",
    "end": "717620"
  },
  {
    "text": "going to see here\nevery single method we've defined in our class.",
    "start": "717620",
    "end": "722660"
  },
  {
    "text": "So you see here,\nhere's my dictionary. I could cast it to a list if\nI wanted to but not necessary. But you can see every single\nmethod that we've defined.",
    "start": "722660",
    "end": "730459"
  },
  {
    "text": "So all our getters,\nall our setters, the init method, the\ndouble underscore doc",
    "start": "730460",
    "end": "736220"
  },
  {
    "text": "actually grabs for us this\ndocstring that you've put right",
    "start": "736220",
    "end": "741769"
  },
  {
    "text": "under the class definition. So that's kind of cool.",
    "start": "741770",
    "end": "747209"
  },
  {
    "text": "So that's the dictionary keys,\nand of course, as we know, keys have values\nassociated with them.",
    "start": "747210",
    "end": "752370"
  },
  {
    "text": "So the values associated\nwith each one of these keys is going to be, and\nwe can see here,",
    "start": "752370",
    "end": "758639"
  },
  {
    "text": "so for example, the value\nassociated with the docstring,",
    "start": "758640",
    "end": "763940"
  },
  {
    "text": "is going to be, literally,\nthe thing that I printed out-- the little docstring\nthat I put right",
    "start": "763940",
    "end": "770750"
  },
  {
    "text": "underneath my class definition. So now it knows the\ndocstring for this class that I just created.",
    "start": "770750",
    "end": "776630"
  },
  {
    "text": "And the values associated with\nmy getter methods and my setter methods and the init method and\nall the methods that I created,",
    "start": "776630",
    "end": "783110"
  },
  {
    "text": "are just the locations\nin memory where Python can find these methods to run.",
    "start": "783110",
    "end": "788180"
  },
  {
    "text": "They don't have actual\nvalues associated with them, of course, because they're\njust method definitions,",
    "start": "788180",
    "end": "793790"
  },
  {
    "text": "but Python just\nknows where to go in which memory location to\nactually run this function.",
    "start": "793790",
    "end": "800890"
  },
  {
    "text": "OK, so that's kind\nof cool to know. ",
    "start": "800890",
    "end": "808069"
  },
  {
    "text": "OK, so that's the state\ndictionary of my definition, the implementation of my class.",
    "start": "808070",
    "end": "814260"
  },
  {
    "text": "Now, what happens when I\ncreate an actual instance? So here I've got\nmy_workout equals,",
    "start": "814260",
    "end": "819899"
  },
  {
    "text": "and now I've got this actual\ninstance of this class type Workout.",
    "start": "819900",
    "end": "825030"
  },
  {
    "text": "When Python sees this line, it\nsays, OK, what kind of object do you want to create?",
    "start": "825030",
    "end": "830579"
  },
  {
    "text": "A workout object. It looks at the init method\nof that Workout object, and then it runs all the lines\nassociated with that Workout",
    "start": "830580",
    "end": "838040"
  },
  {
    "text": "object. So now it creates a\nnew object in memory puts that at some\nmemory location.",
    "start": "838040",
    "end": "843960"
  },
  {
    "text": "This object is going to\nbe of type Workout class. And now this object is going to\nhave its own state dictionary,",
    "start": "843960",
    "end": "852629"
  },
  {
    "text": "in the object state,\ndictionary we're not storing methods or things like that. We're storing the actual\ndata attributes associated",
    "start": "852630",
    "end": "860430"
  },
  {
    "text": "with this object, all right. So this object, all\nthe data attributes are all the things that\nyou access via the self dot",
    "start": "860430",
    "end": "867000"
  },
  {
    "text": "keyword, self dot icon, self dot\nkind, self dot start, self dot end, and self dot calories.",
    "start": "867000",
    "end": "873100"
  },
  {
    "text": "So we can actually\ngo in the code, just like we did when we looked\nat the class state dictionary,",
    "start": "873100",
    "end": "878440"
  },
  {
    "text": "and look at the state dictionary\nfor one specific object, one instance.",
    "start": "878440",
    "end": "883700"
  },
  {
    "text": "So again, we can call the\ndouble underscore dict method on this instance.",
    "start": "883700",
    "end": "889700"
  },
  {
    "text": "So now I have an\nactual object that has some values associated with it. And if I look at\njust the keys, we",
    "start": "889700",
    "end": "896889"
  },
  {
    "text": "see these are the data\nattributes associated with an object of type Workout.",
    "start": "896890",
    "end": "901990"
  },
  {
    "text": "I've got my five\ndata attributes. And then the values\nassociated with those keys,",
    "start": "901990",
    "end": "907810"
  },
  {
    "text": "are going to be the values that\nare specific to this object. So my start is this date here,\nmy end is this date here,",
    "start": "907810",
    "end": "915640"
  },
  {
    "text": "calories was 200. The icon was the little\nsweaty person emoji, and the kind of\nworkout is workout.",
    "start": "915640",
    "end": "921250"
  },
  {
    "text": " So it's kind of neat\nto be able to look",
    "start": "921250",
    "end": "928380"
  },
  {
    "text": "into that sort of\ndetail of where things are stored inside memory.",
    "start": "928380",
    "end": "933690"
  },
  {
    "text": "OK, so we saw how to create\nan instance of an object, and we can create a whole bunch\nof workouts that we then store.",
    "start": "933690",
    "end": "941949"
  },
  {
    "text": "And then we can use\ndot notation to access all of these attributes. So we can either access\nattributes directly,",
    "start": "941950",
    "end": "948850"
  },
  {
    "text": "or we can access methods. We already know this. So last lecture, I said that you\ncan use dot notation to access",
    "start": "948850",
    "end": "957100"
  },
  {
    "text": "data attributes. So here we're accessing\nthe calories value. And that's fine,\nbut what's preferred",
    "start": "957100",
    "end": "964180"
  },
  {
    "text": "is to use the getter methods. so get_calories will,\nin this particular case,",
    "start": "964180",
    "end": "969579"
  },
  {
    "text": "return the exact same\nvalue as just accessing the calories data attribute.",
    "start": "969580",
    "end": "975030"
  },
  {
    "text": "But the note that I\nmade last lecture, was that it was better\nto use a getter method",
    "start": "975030",
    "end": "980880"
  },
  {
    "text": "because the implementation\nbehind the scenes might change. And if the implementation\nchanges, then",
    "start": "980880",
    "end": "987600"
  },
  {
    "text": "if you access the calories\nmethod directly, or sorry, the calories data\nattribute directly,",
    "start": "987600",
    "end": "992730"
  },
  {
    "text": "your code might crash. But not only that,\nsomebody who's writing a getter method\nfor this workout function,",
    "start": "992730",
    "end": "1001380"
  },
  {
    "text": "might actually make that method\nbe a lot more complex than just returning that data attribute.",
    "start": "1001380",
    "end": "1007500"
  },
  {
    "text": "And that's what we're going\nto see in the next slide. So the idea behind using\nthese consistent methods,",
    "start": "1007500",
    "end": "1015240"
  },
  {
    "text": "instead of accessing\nusing data attributes, is that you want to\nkeep information hidden.",
    "start": "1015240",
    "end": "1021510"
  },
  {
    "text": "You don't want to\nstart messing around with looking at how\nsomething is implemented. Because that goes against\nthe principle of abstraction,",
    "start": "1021510",
    "end": "1027930"
  },
  {
    "text": "modularity, and\ninformation hiding. You want to keep things\nhidden because you want to use the objects that\nsomebody else has created",
    "start": "1027930",
    "end": "1036449"
  },
  {
    "text": "in a nicely consistent manner. The way we use them\nin a consistent manner is by always using methods that\nare associated with that object",
    "start": "1036450",
    "end": "1045150"
  },
  {
    "text": "type. And so using getter\nmethods might have seemed inconsequential\nwhen we wrote the Animal",
    "start": "1045150",
    "end": "1051510"
  },
  {
    "text": "class last lecture,\nbut it's going to be a lot more important\nin this particular lecture.",
    "start": "1051510",
    "end": "1058420"
  },
  {
    "text": "So with that, we've finished\nour simple Workout class.",
    "start": "1058420",
    "end": "1063890"
  },
  {
    "text": "And now we're going to\nchange the implementation just a little bit.",
    "start": "1063890",
    "end": "1069400"
  },
  {
    "text": "And what we're going\nto do is, we're going to make a\nchange to the way that we store the information.",
    "start": "1069400",
    "end": "1076399"
  },
  {
    "text": "We're going to use\na class variable. And I'll remind you what a class\nvariable is in the next slide, and we're going to make a change\nto the get_calories method.",
    "start": "1076400",
    "end": "1084230"
  },
  {
    "text": "And we're going\nto allow the user to say, hey, I'm going to\ncreate this Workout object.",
    "start": "1084230",
    "end": "1092070"
  },
  {
    "text": "But I don't know\nabout you, I don't know how many\ncalories I burn when I do a workout for 40 minutes.",
    "start": "1092070",
    "end": "1098870"
  },
  {
    "text": "I don't know that\nright off the bat. So if the user doesn't supply\nthe number of calories burned,",
    "start": "1098870",
    "end": "1105080"
  },
  {
    "text": "we're going to have\nour get_calories method estimate those\ncalories burned based",
    "start": "1105080",
    "end": "1111860"
  },
  {
    "text": "on the duration of that workout. So we're going to allow\nthe user to either supply",
    "start": "1111860",
    "end": "1118580"
  },
  {
    "text": "the number of\ncalories, in which case they probably know\nwhat they're doing, and then when they ask us to\ntell us to get the calories,",
    "start": "1118580",
    "end": "1126420"
  },
  {
    "text": "we're going to use those. Or we're going to allow\nthe user to not supply the number of\ncalories, and instead",
    "start": "1126420",
    "end": "1132830"
  },
  {
    "text": "estimate those calories\nbased on the duration that they said this\nworkout lasted.",
    "start": "1132830",
    "end": "1139792"
  },
  {
    "text": "All right, so that's\nthe big change that we're going to do\nhere in the Workout class. So we're going to do a\nbetter get_calories method.",
    "start": "1139792",
    "end": "1147280"
  },
  {
    "text": "All right, so this is\nthe new implementation of my Workout class.",
    "start": "1147280",
    "end": "1152780"
  },
  {
    "text": "First thing you'll\nnotice, is we're using this class variable.",
    "start": "1152780",
    "end": "1158450"
  },
  {
    "text": "We talked about\nthis last lecture when we did the rabbits example. In the rabbits example, we had\neach rabbit change this class",
    "start": "1158450",
    "end": "1168500"
  },
  {
    "text": "variable value. In this example, I'm not going\nto change this class variable value.",
    "start": "1168500",
    "end": "1173570"
  },
  {
    "text": "I'm actually just going\nto use it as a variable that every one of\nthese instances",
    "start": "1173570",
    "end": "1178670"
  },
  {
    "text": "is going to be able to access. And I'm just not going to\nchange it, which is fine. You don't have to change\nthis class variable.",
    "start": "1178670",
    "end": "1187269"
  },
  {
    "text": "So this class variable\nwill represent how many calories per hour\nare burned, so just a number.",
    "start": "1187270",
    "end": "1194590"
  },
  {
    "text": "And then the init\nmethod, and again, we're going to make a\ndifferent init method than what we saw in\nthe previous slides,",
    "start": "1194590",
    "end": "1201000"
  },
  {
    "text": "the init method is going\nto be new and improved. We're going to take in still\nthe same number of parameters,",
    "start": "1201000",
    "end": "1207240"
  },
  {
    "text": "but the calories are going\nto have a default value. So if the user actually passes\nin the number of calories,",
    "start": "1207240",
    "end": "1214500"
  },
  {
    "text": "the value for calories\nhere, self dot calories will be whatever\nthe user passed in.",
    "start": "1214500",
    "end": "1219970"
  },
  {
    "text": "But if the user doesn't pass\nin the number of calories, then this parameter here, self\ndot calories will be none.",
    "start": "1219970",
    "end": "1229380"
  },
  {
    "text": "None being used to represent\nthe absence of a value.",
    "start": "1229380",
    "end": "1235020"
  },
  {
    "text": "So two options here when\nwe create the object. Other things you might notice\nis that the self dot start,",
    "start": "1235020",
    "end": "1242640"
  },
  {
    "text": "so the start time\nand the end time are no longer just\nstart and end. ",
    "start": "1242640",
    "end": "1250150"
  },
  {
    "text": "I'm going to talk about\nthis on the next slide. But essentially\nwhat I'm doing here, is I'm saying the start\nand end will be passed in",
    "start": "1250150",
    "end": "1257799"
  },
  {
    "text": "as strings, just\nlike we have been in the past, like,\nSeptember 1, 2022 1:35 PM.",
    "start": "1257800",
    "end": "1263980"
  },
  {
    "text": "That's fine. We can still pass in the\nstart time as a string. But when I'm storing\nit inside my object,",
    "start": "1263980",
    "end": "1270940"
  },
  {
    "text": "I'm actually going to\nstore it as whatever this thing gives me. And this thing is actually\ngoing to be returning or parsing",
    "start": "1270940",
    "end": "1280210"
  },
  {
    "text": "the string as a new\ndata type, something we've not worked with before,\ncalled a datetime object.",
    "start": "1280210",
    "end": "1286518"
  },
  {
    "text": "We're going to look at this on\nthe next slide in a little bit more detail. But for now, all\nwe need to know is",
    "start": "1286518",
    "end": "1291790"
  },
  {
    "text": "that the self dot start and\nself dot end will be a new data type, a datetime object.",
    "start": "1291790",
    "end": "1299510"
  },
  {
    "text": "So that's my init\nmethod, so few changes. Now my get_calories method will\nlook a little bit different,",
    "start": "1299510",
    "end": "1307220"
  },
  {
    "text": "as well. We're not just returning\nself dot calories like we had in that\nsimple Workout class.",
    "start": "1307220",
    "end": "1314150"
  },
  {
    "text": "We're going to do\na little switch. So if the user supplies\nthe number of calories,",
    "start": "1314150",
    "end": "1321390"
  },
  {
    "text": "so if the calories here\nwere actually passed in, then we don't resort to\nthe calories being none.",
    "start": "1321390",
    "end": "1329390"
  },
  {
    "text": "Calories will be 100 or\n450 or whatever it is. And then this if statement is\nfalse, so we go in the else,",
    "start": "1329390",
    "end": "1336440"
  },
  {
    "text": "and we just return that value. So it's exactly\nthe same behavior as in my simple Workout\nclass from back there.",
    "start": "1336440",
    "end": "1343889"
  },
  {
    "text": "But if the user does not\nsupply the number of calories when they create an object, then\nthe calories will be none here.",
    "start": "1343890",
    "end": "1351470"
  },
  {
    "text": "When I create my\nobject, the data attribute self dot\ncalories will be none here. So when I ask the\nworkout to tell me",
    "start": "1351470",
    "end": "1359090"
  },
  {
    "text": "how many calories\nI burned, we're going to go inside\nthe if statement. And we're going to do something.",
    "start": "1359090",
    "end": "1365179"
  },
  {
    "text": " The thing we're going to\ndo is subtract the end time",
    "start": "1365180",
    "end": "1371710"
  },
  {
    "text": "minus the start time.  And something like this is\nallowed on a datetime object",
    "start": "1371710",
    "end": "1379529"
  },
  {
    "text": "but obviously not\nallowed on strings, which is why I'm converting\nthese strings representing",
    "start": "1379530",
    "end": "1385799"
  },
  {
    "text": "a date and a time into\nthis datetime object. This subtraction here\ngives me something that's",
    "start": "1385800",
    "end": "1395060"
  },
  {
    "text": "called a timedelta object. And it's just a\nnew type of object we haven't really\nworked with before,",
    "start": "1395060",
    "end": "1401430"
  },
  {
    "text": "but it's an object type\nthat we can run a method on. And the method is going\nto be the total_seconds.",
    "start": "1401430",
    "end": "1409640"
  },
  {
    "text": "So for this timedelta object,\nso 10 minutes or 18 minutes or whatever it may be, if\nwe run this method called",
    "start": "1409640",
    "end": "1416299"
  },
  {
    "text": "total_seconds, it will\ntell us how many seconds are in that timedelta object. Divide by 3,600 to tell\nus the number of hours,",
    "start": "1416300",
    "end": "1423920"
  },
  {
    "text": "and then multiply by the\nclass variable cal_per_hour",
    "start": "1423920",
    "end": "1429122"
  },
  {
    "text": "will tell us how\nmany calories were burned in that elapsed time. ",
    "start": "1429122",
    "end": "1436625"
  },
  {
    "text": "Yeah. AUDIENCE: If we can do\nlike workout dot and then all of that like-- ANA BELL: Oh, workout dot\nis just this thing here.",
    "start": "1436625",
    "end": "1444010"
  },
  {
    "text": "Workout dot cal_per_hour,\nthat's just this, and then we multiply\nby that number.",
    "start": "1444010",
    "end": "1449200"
  },
  {
    "text": " Questions about that? ",
    "start": "1449200",
    "end": "1457350"
  },
  {
    "text": "OK, so essentially this is going\nto do the estimation for us for how many calories we\nburned in some number of hours",
    "start": "1457350",
    "end": "1464679"
  },
  {
    "text": "or some number of minutes. Now, let's demystify this\nstart and end time stuff.",
    "start": "1464680",
    "end": "1470440"
  },
  {
    "text": "So the way that we are\nconverting this string",
    "start": "1470440",
    "end": "1477009"
  },
  {
    "text": "to a datetime object, is by\nusing this library up here. So a library is a\ncollection of objects,",
    "start": "1477010",
    "end": "1484240"
  },
  {
    "text": "a collection of\nmaybe also functions, that all deal with the\nsame type of thing. So in this particular case, they\nall deal with dates and times",
    "start": "1484240",
    "end": "1492610"
  },
  {
    "text": "and manipulating dates and\ntimes and things like that. In the last lecture,\nwe saw an example of a library, that\nrandom library that",
    "start": "1492610",
    "end": "1499120"
  },
  {
    "text": "allowed us to do operations\nwith random numbers. So it's just a nice collection\nof functions and objects",
    "start": "1499120",
    "end": "1504940"
  },
  {
    "text": "that deal with one common thing. So in this particular\ncase, there is a function\ninside that library,",
    "start": "1504940",
    "end": "1513910"
  },
  {
    "text": "this parser dot parse function\nthat takes in a string and can parse it to\nthis datetime object.",
    "start": "1513910",
    "end": "1522850"
  },
  {
    "text": "So if we print the type of start\ndate and the type of end date, it will show us that it's\nthis type datetime thing.",
    "start": "1522850",
    "end": "1530500"
  },
  {
    "text": "So it's a new object type\nwe haven't worked with yet, but it's an object type like a\nlist is, like a dictionary is,",
    "start": "1530500",
    "end": "1535900"
  },
  {
    "text": "like our workout is. And so the reason why\nwe're doing the conversion",
    "start": "1535900",
    "end": "1541210"
  },
  {
    "text": "is because we don't want to deal\nwith the messy part of grabbing",
    "start": "1541210",
    "end": "1546940"
  },
  {
    "text": "in a string and\nthen figuring out how long the elapsed\ntime is based on just parsing characters\nthroughout the string.",
    "start": "1546940",
    "end": "1554920"
  },
  {
    "text": "I certainly don't want to\ndo that, but you know what? Somebody who is passionate\nabout doing that did it in this nice\nlittle library for us.",
    "start": "1554920",
    "end": "1562060"
  },
  {
    "text": "So all we're doing is just\nreusing the work that they've done to save it as this object,\nand then, they basically",
    "start": "1562060",
    "end": "1569650"
  },
  {
    "text": "said let me implement\nthe minus sign to work with objects of type\ndatetime, and it makes",
    "start": "1569650",
    "end": "1577160"
  },
  {
    "text": "things like this very easy. We can just subtract two\ndates from each other, and it will tell us\nthe elapsed time.",
    "start": "1577160",
    "end": "1584059"
  },
  {
    "text": "We can run a method\non that elapsed time to tell us how many\nseconds that elapsed time",
    "start": "1584060",
    "end": "1589159"
  },
  {
    "text": "is, so pretty cool. Yeah. AUDIENCE: Does\nthose total seconds get imported for the parser? ANA BELL: Yeah, the\ntotal seconds gets",
    "start": "1589160",
    "end": "1596360"
  },
  {
    "text": "imported with the date util\nparser thing, yeah, exactly. It's an operation that can be\nrun on this date timedelta,",
    "start": "1596360",
    "end": "1605019"
  },
  {
    "text": "I think, type object here. AUDIENCE: So it's like\ntotal hours, total minutes. ANA BELL: I think there\nmight be total minutes",
    "start": "1605020",
    "end": "1610690"
  },
  {
    "text": "and total hours\nalso, yeah, yeah. AUDIENCE: So this parser\nclass, and then dot",
    "start": "1610690",
    "end": "1616490"
  },
  {
    "text": "parser dot total_seconds are-- ANA BELL: Yeah,\nexactly, yeah, exactly. ",
    "start": "1616490",
    "end": "1623049"
  },
  {
    "text": "Yeah, so yeah. AUDIENCE: Should the code\nshould be imported thing? ANA BELL: Yeah, so we\nusually import all our stuff",
    "start": "1623050",
    "end": "1630260"
  },
  {
    "text": "right at the top. So I was just going\nto show the code. So here I've got\neverything that I need to import way at the beginning.",
    "start": "1630260",
    "end": "1635900"
  },
  {
    "text": "So it's kind of like Python\ngoes and copies and pastes everything in those files\nand puts them in your file.",
    "start": "1635900",
    "end": "1641460"
  },
  {
    "text": "So now everything that's\ndefined in those files, is now accessible in your file. You just have to do the dot\nnotation on these libraries",
    "start": "1641460",
    "end": "1652159"
  },
  {
    "text": "here. So I just wanted to\nshow you down here.",
    "start": "1652160",
    "end": "1658470"
  },
  {
    "text": "So here, I shouldn't\nhave imported again, but it's just part\nof this exercise. So here I've got the\nparser being imported.",
    "start": "1658470",
    "end": "1665330"
  },
  {
    "text": "I've got the start time. These are just strings,\nnothing special about them. And we can parse them.",
    "start": "1665330",
    "end": "1673440"
  },
  {
    "text": "So I've got these\nstrings parsed. And the types of\nthese objects, again,",
    "start": "1673440",
    "end": "1678750"
  },
  {
    "text": "are not strings anymore\nnow that I've parsed them. start_date and end_date\nare now these datetime",
    "start": "1678750",
    "end": "1685820"
  },
  {
    "text": "objects, datetime dot datetime. And then we can do\noperations like this. So if I just simply subtract\none time from the other",
    "start": "1685820",
    "end": "1694830"
  },
  {
    "text": "and print that\ntimedelta object, Python puts it in this nice\nlittle format for me.",
    "start": "1694830",
    "end": "1700110"
  },
  {
    "text": "I should just comment these out. It's hard to see. It puts it in this nice\nlittle format for me. So here's number of\nhours colon number",
    "start": "1700110",
    "end": "1707070"
  },
  {
    "text": "of minutes colon\nnumber of seconds. So this is the str method\nthat was implemented for that kind of object.",
    "start": "1707070",
    "end": "1713130"
  },
  {
    "text": "It prints it in this\nnice little form hours colon minutes colon seconds. And then we can do this\nuseful thing, which",
    "start": "1713130",
    "end": "1721650"
  },
  {
    "text": "is what we're doing\nin our code, we can run the\ntotal_seconds function on an object of this\ntimedelta, and it tells us",
    "start": "1721650",
    "end": "1728790"
  },
  {
    "text": "that this 10 minutes is\nequivalent to 600 seconds.",
    "start": "1728790",
    "end": "1734100"
  },
  {
    "text": "So very, very cool, very useful. And we don't even need to know\nhow any of that is implemented.",
    "start": "1734100",
    "end": "1739450"
  },
  {
    "text": "We just make use\nof these functions. What's cool about\nthe parser, though, and this will be\nreally, really cool,",
    "start": "1739450",
    "end": "1746700"
  },
  {
    "text": "you can actually write the time\nand the date in any format. It doesn't have to be month\nslash day slash year space",
    "start": "1746700",
    "end": "1756660"
  },
  {
    "text": "this. So this is kind of\nhow I wrote this one. We can actually\nwrite it something like Sept 30, 2021 like that.",
    "start": "1756660",
    "end": "1764910"
  },
  {
    "text": "And it knows how to read that. Or we can write out September\nall the way put the comma",
    "start": "1764910",
    "end": "1770309"
  },
  {
    "text": "there, put the comma there,\nput the pm lowercase and closer to the time, and it knows\nhow to read that as well.",
    "start": "1770310",
    "end": "1776530"
  },
  {
    "text": "So it knows how to parse all\nthese different ways of writing the dates and save them\nas these datetime objects",
    "start": "1776530",
    "end": "1782460"
  },
  {
    "text": "for using in this very\nnice very readable way.",
    "start": "1782460",
    "end": "1787958"
  },
  {
    "text": "Isn't that cool?  OK, so very useful if you ever\nwant to work with date types.",
    "start": "1787958",
    "end": "1796154"
  },
  {
    "text": " So now this is our\nstate dictionary",
    "start": "1796155",
    "end": "1805900"
  },
  {
    "text": "so for how we ended up with\nour simple Workout class. But what are the changes\nwe made to improve it?",
    "start": "1805900",
    "end": "1814000"
  },
  {
    "text": "Well, in my state dictionary,\nI added my class variable calories_per_hour.",
    "start": "1814000",
    "end": "1819410"
  },
  {
    "text": "So now this calories_per_hour\nis available for any instance",
    "start": "1819410",
    "end": "1824790"
  },
  {
    "text": "that I create. We already knew this,\nbut this is kind of a representation of that. ",
    "start": "1824790",
    "end": "1832539"
  },
  {
    "text": "And we didn't add\nanything to the instances. Those haven't changed.",
    "start": "1832540",
    "end": "1838600"
  },
  {
    "text": "So little aside on\nclass variables, so this cal_per_hour\nhere is available for all",
    "start": "1838600",
    "end": "1844929"
  },
  {
    "text": "of these instances. Now, a class variable is just\nlike an instance variable.",
    "start": "1844930",
    "end": "1850900"
  },
  {
    "text": "We can access it from within\nthe class definition, which is how it should always be done.",
    "start": "1850900",
    "end": "1856240"
  },
  {
    "text": "But Python being\nPython, they allow you to access that class\nvariable from outside the class",
    "start": "1856240",
    "end": "1863230"
  },
  {
    "text": "definition, as well. So we can do\nsomething like this. So we can call the\ncal_per_hour class variable",
    "start": "1863230",
    "end": "1872150"
  },
  {
    "text": "on the name of this class\noutside of the definition. This is my class definition.",
    "start": "1872150",
    "end": "1877460"
  },
  {
    "text": "It ended here. And this is just code that's\noutside the definition, and Python will be happy to\ntell you what that value is.",
    "start": "1877460",
    "end": "1887090"
  },
  {
    "text": "Python will also be\nhappy to tell you what that value is if you\naccess it through an instance. So here I've created an actual\ninstance of type Workout,",
    "start": "1887090",
    "end": "1895400"
  },
  {
    "text": "so I'm not calling\nthe cal_per_hour on the name of my class,\nI'm just grabbing it through one of my instances.",
    "start": "1895400",
    "end": "1901910"
  },
  {
    "text": "And if I print instance\ndot cal_per_hour, Python will also happily\ntell me what that value is.",
    "start": "1901910",
    "end": "1908650"
  },
  {
    "text": "And Python being\nPython, they're going to allow you to change the\nvalue of that cal_per_hour,",
    "start": "1908650",
    "end": "1913690"
  },
  {
    "text": "outside of the class\ndefinition, as well. So here, outside the\nclass definition, I'm going to say workout\ndot cal_per_hour = 250.",
    "start": "1913690",
    "end": "1921980"
  },
  {
    "text": "So now, the cal_per_hour\nis changed permanently to 250 no matter\nhow I access it,",
    "start": "1921980",
    "end": "1928720"
  },
  {
    "text": "either by calling the\nname of my class directly or by calling the class variable\nthrough one of the instances.",
    "start": "1928720",
    "end": "1936160"
  },
  {
    "text": " So, no good, never ever\nwork with these access,",
    "start": "1936160",
    "end": "1946639"
  },
  {
    "text": "data attributes or\naccess class variables outside the class definition. If you really want\nthe user to be",
    "start": "1946640",
    "end": "1951760"
  },
  {
    "text": "able to do something like this,\nthen write a method for it. And then they can\nchange it or access it",
    "start": "1951760",
    "end": "1958240"
  },
  {
    "text": "in a consistent way,\nthe way that you want them to access it.",
    "start": "1958240",
    "end": "1963570"
  },
  {
    "text": "OK, so just a little\nbit of practice for you guys to create a couple\nof Workout objects, just to make sure everyone's\non the same page we understand",
    "start": "1963570",
    "end": "1970830"
  },
  {
    "text": "what a workout object is. So just create\nfor me two objects and then print the calories\nfor these Workout objects.",
    "start": "1970830",
    "end": "1979000"
  },
  {
    "text": "So the first one I would\nlike you to create, name the variable w_one.",
    "start": "1979000",
    "end": "1985050"
  },
  {
    "text": "This workout started in\nJanuary 1, 2001 3:30, and it went till 4:00 PM. And you want to estimate the\ncalories from this workout.",
    "start": "1985050",
    "end": "1992770"
  },
  {
    "text": "You don't know how many calories\nyou burned, and then print the value for that calories.",
    "start": "1992770",
    "end": "1998410"
  },
  {
    "text": "And then the second object,\nsame start date same end date, but you know that you\nburned 300 calories.",
    "start": "1998410",
    "end": "2005159"
  },
  {
    "text": "So create these two\nobjects, and then print the number of calories burned. So this is online 199.",
    "start": "2005160",
    "end": "2016620"
  },
  {
    "text": "And it's OK to scroll back up\nto the init method of Workout, just to see how\nit's implemented.",
    "start": "2016620",
    "end": "2022440"
  },
  {
    "text": "No reason you should\nhave memorized it by now.  All right, how do we\ncreate these two objects?",
    "start": "2022440",
    "end": "2028830"
  },
  {
    "text": "What's w_one equal to? ",
    "start": "2028830",
    "end": "2038529"
  },
  {
    "text": "Yeah. AUDIENCE: [INAUDIBLE] ANA BELL: Yep. AUDIENCE: Is the date first?",
    "start": "2038530",
    "end": "2044000"
  },
  {
    "text": "ANA BELL: Yep, the\nstart_date would be first. So I can just-- AUDIENCE: [INAUDIBLE]\nput that as a string. ANA BELL: As a\nstring, perfect, yep.",
    "start": "2044000",
    "end": "2050244"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ANA BELL: Yep. I'm not saying. I don't think I'll say at.",
    "start": "2050245",
    "end": "2055320"
  },
  {
    "text": "I don't know if that works. And then the end_date\nright is the next one.",
    "start": "2055320",
    "end": "2060969"
  },
  {
    "text": "So this one's 4:00\nPM, right like that.",
    "start": "2060969",
    "end": "2066219"
  },
  {
    "text": "We can do that. And then what else do I put?",
    "start": "2066219",
    "end": "2071888"
  },
  {
    "text": "Or do I put anything else?  AUDIENCE: If you want\n[INAUDIBLE] calories",
    "start": "2071889",
    "end": "2078270"
  },
  {
    "text": "[INAUDIBLE]. ANA BELL: Exactly, yeah,\nin this particular case, I'm going to let\nit default to none. And then how do\nI grab the number",
    "start": "2078270",
    "end": "2085190"
  },
  {
    "text": "of calories burned\nfor this object, for this Workout object? How do I print that out?",
    "start": "2085190",
    "end": "2090500"
  },
  {
    "text": " AUDIENCE: Don't you\nwant that [INAUDIBLE]??",
    "start": "2090500",
    "end": "2097030"
  },
  {
    "text": "ANA BELL: Yep, so I just\ncall the get_calories method on w_one, and let's slap a\nprint statement around that,",
    "start": "2097030",
    "end": "2103600"
  },
  {
    "text": "like that. ",
    "start": "2103600",
    "end": "2108940"
  },
  {
    "text": "Yep. AUDIENCE: Mine, when I do that-- oh, wait. let me do that. ",
    "start": "2108940",
    "end": "2116410"
  },
  {
    "text": "ANA BELL: Perfect. So what is it? A 30-minute workout at\n200 calories per hour,",
    "start": "2116410",
    "end": "2122289"
  },
  {
    "text": "it's 100 calories burned. Second one will\nbe pretty similar.",
    "start": "2122290",
    "end": "2129720"
  },
  {
    "text": "So I'm just going\nto copy and paste. What's the difference between\nthis one and the previous one?",
    "start": "2129720",
    "end": "2136965"
  },
  {
    "start": "2136965",
    "end": "2142980"
  },
  {
    "text": "When I create my object,\nwhat's the one difference? Yeah. AUDIENCE: Don't you pass in the\nnumber of calories [INAUDIBLE]??",
    "start": "2142980",
    "end": "2150570"
  },
  {
    "text": "ANA BELL: Yep, exactly, we will\npass in 300 as the last param here.",
    "start": "2150570",
    "end": "2156570"
  },
  {
    "text": "And so then if we run that, 100\nwas my first print statement and 300 is my second one.",
    "start": "2156570",
    "end": "2162840"
  },
  {
    "text": "So it relies on\nthe number that was passed in as opposed to\ncalculating it by estimating it",
    "start": "2162840",
    "end": "2171839"
  },
  {
    "text": "based on the start and end. All right, everyone\nOK with this?",
    "start": "2171840",
    "end": "2177100"
  },
  {
    "text": "We all understand\nget_calories method, perfect. So we've finished our\nimproved method here.",
    "start": "2177100",
    "end": "2183060"
  },
  {
    "text": "We saw this better get_calories\nmethod, very neat method that allows estimation.",
    "start": "2183060",
    "end": "2188730"
  },
  {
    "text": "And we saw a little bit about\nusing these datetime objects. ",
    "start": "2188730",
    "end": "2195560"
  },
  {
    "text": "OK, so the next stop,\nthe rest of this lecture will be implementing\none subclass of this state of this workout\nobject called a RunWorkout",
    "start": "2195560",
    "end": "2207470"
  },
  {
    "text": "class. And so we're going to use the\nidea of hierarchies and class",
    "start": "2207470",
    "end": "2213230"
  },
  {
    "text": "inheritance to do this. So let's remember a little\nbit about hierarchies",
    "start": "2213230",
    "end": "2218750"
  },
  {
    "text": "In terms of Python. So when we create a\nclass that we know",
    "start": "2218750",
    "end": "2225410"
  },
  {
    "text": "will be this parent class,\nthat's a base class. It's the most basic thing\nthat we'd like to work off of.",
    "start": "2225410",
    "end": "2233600"
  },
  {
    "text": "We call that the parent class\nor the superclass, and this one parent class, can have many\nsubclasses associated with it.",
    "start": "2233600",
    "end": "2242810"
  },
  {
    "text": "So in this particular\ncase, just as an example, we can have two\ntypes of workouts,",
    "start": "2242810",
    "end": "2248990"
  },
  {
    "text": "one outdoor workout and one\nkind is an outdoor workout, and the other kind\nis an indoor workout.",
    "start": "2248990",
    "end": "2254860"
  },
  {
    "text": "And both of these are Workouts. So everything that a\nWorkout has and everything",
    "start": "2254860",
    "end": "2262300"
  },
  {
    "text": "that we can do\nwith a Workout, we will exist in outdoor\nworkout and indoor workout,",
    "start": "2262300",
    "end": "2269049"
  },
  {
    "text": "and we'll be able to\ndo with outdoor workout and indoor workout. So a child class\nis a parent class.",
    "start": "2269050",
    "end": "2276280"
  },
  {
    "text": "A subclass is a super class. But these subclasses can bring\nabout some of their own quote",
    "start": "2276280",
    "end": "2288280"
  },
  {
    "text": "unquote \"ideas,\"\ntheir own attributes. So for an outdoor workout, we\nmight add more information,",
    "start": "2288280",
    "end": "2295900"
  },
  {
    "text": "so add more attributes, maybe\nlocation, something like that. For indoor workout, you\nmight not need a location.",
    "start": "2295900",
    "end": "2303130"
  },
  {
    "text": "You might not add any\nextra data attributes. We might add more behaviors.",
    "start": "2303130",
    "end": "2309070"
  },
  {
    "text": "So for outdoor\nworkout, I don't know, you add some different behavior\nthan just a regular workout.",
    "start": "2309070",
    "end": "2317000"
  },
  {
    "text": "Same for indoor workout, or\nyou might override behaviors. So you might change\nsomething that Workout",
    "start": "2317000",
    "end": "2322730"
  },
  {
    "text": "does to be specific\nto an outdoor workout. And of course, we can create\nas many of these subclasses",
    "start": "2322730",
    "end": "2328220"
  },
  {
    "text": "as we'd like. So for outdoor\nworkouts, we can now have two different types of\noutdoor workouts, running",
    "start": "2328220",
    "end": "2333800"
  },
  {
    "text": "or a swimming. And for indoor workouts, we\nmight have treadmill or weights types of workouts. And whenever you create\nthese child classes,",
    "start": "2333800",
    "end": "2341119"
  },
  {
    "text": "they inherit everything\nthat their parents has. So a running class\nis an outdoor workout",
    "start": "2341120",
    "end": "2346550"
  },
  {
    "text": "and by default, it's also\ngoing to be a Workout right because outdoor\nworkout was a Workout.",
    "start": "2346550",
    "end": "2353180"
  },
  {
    "text": "So what we're going to do\nin this RunWorkout class is, I'm going to show you\nthree methods implemented.",
    "start": "2353180",
    "end": "2360260"
  },
  {
    "text": "The first one is going to\nbe just reusing something that our parent can do.",
    "start": "2360260",
    "end": "2365690"
  },
  {
    "text": "The second one is going\nto be overriding a method that our parent already can\ndo to make it better and more",
    "start": "2365690",
    "end": "2373160"
  },
  {
    "text": "specific to the child class. And the third one is to add a\nmethod that our parent didn't",
    "start": "2373160",
    "end": "2378810"
  },
  {
    "text": "even have. So we're going to do these\nthree things in the run workout object.",
    "start": "2378810",
    "end": "2384410"
  },
  {
    "text": "OK, so let's remember\nthis example here",
    "start": "2384410",
    "end": "2389750"
  },
  {
    "text": "about common properties that\nall of our Workouts have. So this is basically us\nimplementing our Workout",
    "start": "2389750",
    "end": "2395540"
  },
  {
    "text": "superclass. So I know we did\nimplement all of these, but in theory, we\ncan implement all",
    "start": "2395540",
    "end": "2400663"
  },
  {
    "text": "of the things that\nare highlighted in yellow in our parent class. And these are common no\nmatter what kinds of Workouts",
    "start": "2400663",
    "end": "2406160"
  },
  {
    "text": "we create. Now, in the Python\nfile, I actually have a swimming subclass. We're not going to\ngo over the swimming",
    "start": "2406160",
    "end": "2412460"
  },
  {
    "text": "subclass in the\nlecture, but please feel free to go through\nit in the Python file for this lecture.",
    "start": "2412460",
    "end": "2418010"
  },
  {
    "text": "And I think you'll also be\nworking with it in recitation on Friday, as well. In lecture, we're going to\nbe creating a subclass that's",
    "start": "2418010",
    "end": "2426830"
  },
  {
    "text": "specific to running. And this running\nclass will, of course, inherit all of these properties\nthat our parent workout",
    "start": "2426830",
    "end": "2434690"
  },
  {
    "text": "class has, but we're also\ngoing to add our own data.",
    "start": "2434690",
    "end": "2440839"
  },
  {
    "text": "And we're going to override\nsome data that the workout class has and things like that.",
    "start": "2440840",
    "end": "2446122"
  },
  {
    "text": "So specifically, the\nonly thing we're actually going to implement\nthat's different than a regular Workout, is to\nadd an elevation attribute.",
    "start": "2446123",
    "end": "2456650"
  },
  {
    "text": "So beyond that start_time,\nend_time, calories an icon will also exist, and the kind\nof workout it will also exist.",
    "start": "2456650",
    "end": "2463290"
  },
  {
    "text": "Those are our five data\nattributes from Workout. And we're going to add\nelevation for running workout",
    "start": "2463290",
    "end": "2468619"
  },
  {
    "text": "to make six. OK, so this was our parent\nclass, just as a reminder,",
    "start": "2468620",
    "end": "2475703"
  },
  {
    "text": "this is what it looked like. We had our class attribute\nhere, class variable, and this init method here.",
    "start": "2475703",
    "end": "2483940"
  },
  {
    "text": "The class Workout, their parent\nwas the generic Python object.",
    "start": "2483940",
    "end": "2489490"
  },
  {
    "text": "Now, when we create\nour RunWorkout, our parent will be\nthe Workout class.",
    "start": "2489490",
    "end": "2494790"
  },
  {
    "text": "So we don't just want it\nto be a Python object. We want it to be\na Workout object.",
    "start": "2494790",
    "end": "2501030"
  },
  {
    "text": "So as soon as we do that\ninside our code, Python says, all right, let me just grab\nall of this stuff, everything",
    "start": "2501030",
    "end": "2507410"
  },
  {
    "text": "that's defined inside your\nparent class, this Workout. And quote unquote \"copy and\npaste it into this class.\"",
    "start": "2507410",
    "end": "2514890"
  },
  {
    "text": "So right off the bat,\nwe've got all of the things that Workout has.",
    "start": "2514890",
    "end": "2520440"
  },
  {
    "text": "But that doesn't quite\nwork with our RunWorkout.",
    "start": "2520440",
    "end": "2526950"
  },
  {
    "text": "Because when we\ncreate a RunWorkout, and again, this is\na design decision, we would like the user\nto be able to pass",
    "start": "2526950",
    "end": "2533760"
  },
  {
    "text": "in an extra parameter\nhere, the elevation value. So in addition to the\nstart_time, end_time,",
    "start": "2533760",
    "end": "2540910"
  },
  {
    "text": "and the calories_burned,\nI'm going to slip in this\nelevation value right before the\ncalories_burned parameter.",
    "start": "2540910",
    "end": "2547630"
  },
  {
    "text": " So when I initialize\nmy RunWorkout,",
    "start": "2547630",
    "end": "2553160"
  },
  {
    "text": "I could, theoretically, pass\nin four values string, string, number, number.",
    "start": "2553160",
    "end": "2559910"
  },
  {
    "text": "Or since elevation has\na default parameter, and calories has a\ndefault parameter,",
    "start": "2559910",
    "end": "2566540"
  },
  {
    "text": "I could pass in\njust string string, and those other\ntwo will default.",
    "start": "2566540",
    "end": "2573310"
  },
  {
    "text": "So what is this\ninit method doing? It's calling the\nsuper() function.",
    "start": "2573310",
    "end": "2579640"
  },
  {
    "text": "I know we haven't\ndone this before, but I just wanted\nto show you this. This is another\nway to ask Python",
    "start": "2579640",
    "end": "2586299"
  },
  {
    "text": "to tell you who your parent is. So when you run this function\nsuper() inside a class",
    "start": "2586300",
    "end": "2594460"
  },
  {
    "text": "definition, Python\neffectively returns-- so the replacement of\nthis function, this",
    "start": "2594460",
    "end": "2601740"
  },
  {
    "text": "is just a function it\nhas a return value. The return will be the thing\nin the parentheses here.",
    "start": "2601740",
    "end": "2607570"
  },
  {
    "text": "So effectively,\nthat line becomes workout dot double underscore\ninit double underscore exactly",
    "start": "2607570",
    "end": "2613440"
  },
  {
    "text": "what as we saw in\nthe last lecture when we did animal,\nrabbits and all those done.",
    "start": "2613440",
    "end": "2618670"
  },
  {
    "text": "All right, so what we're doing\nhere, is we're saying, well, I know workout can do all\nthose initializations for me,",
    "start": "2618670",
    "end": "2625700"
  },
  {
    "text": "so let me just take\nadvantage of that, not copy and paste it, and\njust let Workout do the job",
    "start": "2625700",
    "end": "2632330"
  },
  {
    "text": "and initialize all\nthat stuff for me. So this line of code\nhere, initializes",
    "start": "2632330",
    "end": "2637849"
  },
  {
    "text": "the start end times\nright by parsing them, the calories and the icon\nto the sweaty person emoji,",
    "start": "2637850",
    "end": "2646100"
  },
  {
    "text": "and the kind to workout string. But since this is\na RunWorkout, I",
    "start": "2646100",
    "end": "2651440"
  },
  {
    "text": "would like to replace the icon\nwith the little running person",
    "start": "2651440",
    "end": "2656510"
  },
  {
    "text": "emoji. And the kind of workout this\nis, is no longer just a workout. Let's say it's a\nrunning workout so it",
    "start": "2656510",
    "end": "2663785"
  },
  {
    "text": "becomes a string \"running.\" So I'm overriding those data\nattributes to be the strings.",
    "start": "2663785",
    "end": "2670609"
  },
  {
    "text": "And then the thing\nthat RunWorkout has that Workout\ndidn't have at all,",
    "start": "2670610",
    "end": "2675890"
  },
  {
    "text": "is this elevation\ndata attribute. So self dot elev is now a new\ndata attribute that did not",
    "start": "2675890",
    "end": "2682490"
  },
  {
    "text": "exist in the regular Workout. ",
    "start": "2682490",
    "end": "2687619"
  },
  {
    "text": "And then I've got these\ntwo methods down here, a getter for the elevation and\na setter for the elevation.",
    "start": "2687620",
    "end": "2694670"
  },
  {
    "text": "Nothing fancy with them,\nthey just return and set. Yeah. AUDIENCE: Can we overwrite\nsuper init [INAUDIBLE]??",
    "start": "2694670",
    "end": "2700550"
  },
  {
    "text": "ANA BELL: Yeah,\nso the Super init calls the parent's init method. And the reason I do that is\nbecause I know the parent",
    "start": "2700550",
    "end": "2708050"
  },
  {
    "text": "can just initialize\nall that stuff for me. So I'm just taking\nadvantage of the fact that it does all\nthat stuff for me.",
    "start": "2708050",
    "end": "2715430"
  },
  {
    "text": "You can imagine the\ninit method, maybe, it also checked the\ntypes to make sure that the person who created\nthis to enforce that start",
    "start": "2715430",
    "end": "2723560"
  },
  {
    "text": "is a string. End is a string. All that extra code\nthat would happen in the init method of\nWorkout, we would just",
    "start": "2723560",
    "end": "2730190"
  },
  {
    "text": "let run with this line here. So we don't have to\ncopy and paste it.",
    "start": "2730190",
    "end": "2735390"
  },
  {
    "text": "Yes. AUDIENCE: Do we\nalso have to take by leaving the line above\nright in [INAUDIBLE]??",
    "start": "2735390",
    "end": "2742500"
  },
  {
    "text": "ANA BELL: Yes, you\nmean these two? AUDIENCE: The [INAUDIBLE]\nso that [INAUDIBLE]----",
    "start": "2742500",
    "end": "2748581"
  },
  {
    "text": "ANA BELL: Yep. AUDIENCE: --needs to\nhave start and calories. And the Super needs to have at\nleast start, end, and calories?",
    "start": "2748582",
    "end": "2758013"
  },
  {
    "text": "ANA BELL: Yes, exactly,\nactually, yes, you're right. So the reason this works\nis because the init method",
    "start": "2758013",
    "end": "2763750"
  },
  {
    "text": "of my Workout takes in the start\nand the end and the calories. If I said that the init\nmethod of RunWorkout",
    "start": "2763750",
    "end": "2770830"
  },
  {
    "text": "doesn't need start and end\nor something like that, I wouldn't be able to run\nthis init method, exactly.",
    "start": "2770830",
    "end": "2776668"
  },
  {
    "text": "Or maybe I would run it with\nsome defaults or something like if you actually\nwant to run it, you have to pass\nit-- you still have",
    "start": "2776668",
    "end": "2782470"
  },
  {
    "text": "to follow the stub of that\ninit method, right, yeah,",
    "start": "2782470",
    "end": "2788109"
  },
  {
    "text": "that's a great point. yeah AUDIENCE: [INAUDIBLE]\nyou said, I",
    "start": "2788110",
    "end": "2793445"
  },
  {
    "text": "feel like before passing\nthe init of the parent into this one without having\nto write the Super thing.",
    "start": "2793445",
    "end": "2800990"
  },
  {
    "text": "ANA BELL: Yeah, so you're right. I wasn't writing\nthe Super thing. I was just naming\nthe parent directly.",
    "start": "2800990",
    "end": "2808829"
  },
  {
    "text": "So in the animal\none, I said, animal dot double underscore\ninit double underscore.",
    "start": "2808830",
    "end": "2813980"
  },
  {
    "text": "And in this particular\ncase, I'm just showing you a different way to do it. Maybe you don't know\nwho your parent is?",
    "start": "2813980",
    "end": "2821750"
  },
  {
    "text": "In that case, you can\njust run this function, and it tells you\nwho your parent is. But this line would\nwork just as well",
    "start": "2821750",
    "end": "2829160"
  },
  {
    "text": "if I said workout,\nwrite this thing, dot double underscore\ninit double underscore.",
    "start": "2829160",
    "end": "2834200"
  },
  {
    "text": "And that would be\nexactly the same as I had done last lecture.",
    "start": "2834200",
    "end": "2839260"
  },
  {
    "text": "So let's look at the state\ndictionary for this one, for this new addition here. So this is a state dictionary\nof just my plain old Workout",
    "start": "2839260",
    "end": "2847319"
  },
  {
    "text": "class. We saw this before. It's all my getters,\nall my setters, the init, and this cal_per_hour\nfrom the new and improved",
    "start": "2847320",
    "end": "2855839"
  },
  {
    "text": "Workout class. Now, my subclass, the RunWorkout\nthe super() method basically",
    "start": "2855840",
    "end": "2864740"
  },
  {
    "text": "says, hey, you are a Workout. The super() method, the\nstate dictionary for it will",
    "start": "2864740",
    "end": "2873359"
  },
  {
    "text": "additionally have this\ngetter and this setter, these two methods.",
    "start": "2873360",
    "end": "2879270"
  },
  {
    "text": "We're not copying all\nthis stuff all over again, down in the RunWorkout\nstate dictionary",
    "start": "2879270",
    "end": "2885420"
  },
  {
    "text": "because that already\nexists up here. But in addition, the RunWorkout\nhas this get_elevation",
    "start": "2885420",
    "end": "2890970"
  },
  {
    "text": "and set_elevation method. Those are the only things that\nwe've defined in this class.",
    "start": "2890970",
    "end": "2896520"
  },
  {
    "text": "So then when I create\na RunWorkout instance. So this is an instance of\nRunWorkout, not Workout.",
    "start": "2896520",
    "end": "2902660"
  },
  {
    "text": "Python points to this\nRunWorkout class. And the data attributes\nfor a RunWorkout instance",
    "start": "2902660",
    "end": "2908240"
  },
  {
    "text": "are going to be, of course,\nall the data attributes of a regular Workout, those\nfive, plus the elevation.",
    "start": "2908240",
    "end": "2917619"
  },
  {
    "text": "The new data attribute\nthat I just added. ",
    "start": "2917620",
    "end": "2928849"
  },
  {
    "text": "So we're using inheritance\nin this particular case in the spirit of modularity,\nin the spirit of abstraction,",
    "start": "2928850",
    "end": "2936920"
  },
  {
    "text": "in the spirit of writing\ncode that's reusable, that's readable, that's\nunderstandable in the future.",
    "start": "2936920",
    "end": "2943579"
  },
  {
    "text": "So if we were writing the\nRunWorkout by basically copying and pasting everything\nin there all over again,",
    "start": "2943580",
    "end": "2949410"
  },
  {
    "text": "it would be a really long\nclass, where most of it was just a copy and\npaste off of the Workout.",
    "start": "2949410",
    "end": "2955460"
  },
  {
    "text": "So now, if we define\nit in this way, we can easily see\nnew functionality",
    "start": "2955460",
    "end": "2962150"
  },
  {
    "text": "and new data attributes that\nRunWorkout has, in addition to just being a Workout object.",
    "start": "2962150",
    "end": "2969500"
  },
  {
    "text": "So all those good things for\nwriting very nice clear code OK, so now we're going to\nlook at a method that's",
    "start": "2969500",
    "end": "2979090"
  },
  {
    "text": "being reused from our parent. And that's this double\nunderscore str method.",
    "start": "2979090",
    "end": "2984730"
  },
  {
    "text": "So this str method,\nit looks like a beast.",
    "start": "2984730",
    "end": "2990550"
  },
  {
    "text": "It's very, very long, but I\npromise you, it's not so bad. So this str method, let's\nremember what it does.",
    "start": "2990550",
    "end": "2997780"
  },
  {
    "text": "It tells Python what to do when\nyou print an object of type",
    "start": "2997780",
    "end": "3003510"
  },
  {
    "text": "Workout because it's defined\ninside the Workout class here. So I'll show you\nwhat it actually",
    "start": "3003510",
    "end": "3009600"
  },
  {
    "text": "looks like in the\nactual Workout class. So here's my Workout.",
    "start": "3009600",
    "end": "3015930"
  },
  {
    "text": "There's my class variable, my\ninit, my getters, my setters, all that, and then\nhere's my str method.",
    "start": "3015930",
    "end": "3021930"
  },
  {
    "text": "It's long, right? It takes an entire page. This is not a method that I\nwould like to copy and paste",
    "start": "3021930",
    "end": "3028530"
  },
  {
    "text": "in every single one\nof my subclasses because that would\nbe a lot of code. Again, against the\nspirit of abstraction,",
    "start": "3028530",
    "end": "3035550"
  },
  {
    "text": "modularity, all that good stuff. So what we're doing is,\nwe're just defining it once",
    "start": "3035550",
    "end": "3041670"
  },
  {
    "text": "in our parent class Workout. And it's going to\ndo the following.",
    "start": "3041670",
    "end": "3050760"
  },
  {
    "text": "So str method has\nto return a string. It doesn't print the string.",
    "start": "3050760",
    "end": "3057410"
  },
  {
    "text": "This is a very\nimportant distinction. It returns a string that\nwill eventually be printed",
    "start": "3057410",
    "end": "3062750"
  },
  {
    "text": "when you call the print method. So the thing that I'm doing\nthroughout this whole method,",
    "start": "3062750",
    "end": "3069950"
  },
  {
    "text": "is to basically just build\nup my string to return. Return register\nis return string.",
    "start": "3069950",
    "end": "3076070"
  },
  {
    "text": "And I'm building it\njust by concatenating it piece by piece with\nmore and more stuff that I want to\neventually print out.",
    "start": "3076070",
    "end": "3083150"
  },
  {
    "text": "So the output would look\nsomething like this. I'm basically printing\nout, on the console, sort",
    "start": "3083150",
    "end": "3089780"
  },
  {
    "text": "of like the little square\nof a watch, very cute. So what am I composing here?",
    "start": "3089780",
    "end": "3095780"
  },
  {
    "text": "The first bit, this\nthing in the red box, prints this line over here,\njust horizontal line that's",
    "start": "3095780",
    "end": "3103430"
  },
  {
    "text": "some width long. The next bit here,\nyou notice, it",
    "start": "3103430",
    "end": "3108640"
  },
  {
    "text": "grabs the icon data attribute,\nputs it here on a line",
    "start": "3108640",
    "end": "3114069"
  },
  {
    "text": "along with a vertical\nbar and a bunch of spaces and a vertical bar. The next bit here, prints\nthe kind of workout",
    "start": "3114070",
    "end": "3121460"
  },
  {
    "text": "by accessing the\nkind data attribute. So either workout, or\nrunning, or swimming,",
    "start": "3121460",
    "end": "3126530"
  },
  {
    "text": "whatever that string is. Prints it right\nunderneath the emoji. The next bit here, is\ncomposing the duration.",
    "start": "3126530",
    "end": "3135690"
  },
  {
    "text": "So remember when we did\nthe datetime object, just over here, when we were\nprinting the duration where",
    "start": "3135690",
    "end": "3142830"
  },
  {
    "text": "we just simply subtracted an\nend time minus a start time, It looked like this.",
    "start": "3142830",
    "end": "3148200"
  },
  {
    "text": "I'm perfectly happy with that. That looks really nice. So let's just use that.",
    "start": "3148200",
    "end": "3154640"
  },
  {
    "text": "So the get_duration just\ndoes the subtraction. It's a method inside\nmy Workout class.",
    "start": "3154640",
    "end": "3160970"
  },
  {
    "text": "And then we just keep composing\nthat to our return string.",
    "start": "3160970",
    "end": "3167680"
  },
  {
    "text": "Next, we are going to figure\nout how many calories were burned in this Workout object.",
    "start": "3167680",
    "end": "3173460"
  },
  {
    "text": "So again, we're grabbing the\nget_calories method, the return value from that method,\nhowever it may be calculated.",
    "start": "3173460",
    "end": "3182369"
  },
  {
    "text": "So for this workout type, either\nwe gave the value directly, or we let it estimate it from\nthe duration of the workout.",
    "start": "3182370",
    "end": "3189869"
  },
  {
    "text": "However it decides\nto calculate it, according to how this\nWorkout object was made, that value gets put right there.",
    "start": "3189870",
    "end": "3197619"
  },
  {
    "text": "And then the last bit is this\nlast line down at the bottom. ",
    "start": "3197620",
    "end": "3204049"
  },
  {
    "text": "So then we can create\nany kind of workout because all the child classes\ninherit all of the methods",
    "start": "3204050",
    "end": "3211690"
  },
  {
    "text": "from the parent class. So of course all\nthese child classes will inherit the str\nmethod of Workout.",
    "start": "3211690",
    "end": "3217960"
  },
  {
    "text": "So no matter what kind\nof workout I'm creating, so here I'm just creating\na regular workout, here a running workout, and\nhere a swim workout.",
    "start": "3217960",
    "end": "3225160"
  },
  {
    "text": "No matter how I'm\ncreating it, they'll use the same str method. So all of these will print it\nin this really nice format.",
    "start": "3225160",
    "end": "3232270"
  },
  {
    "text": "The first bit will be specific\nto the kind of workout we have. The little emojis\nwill be different",
    "start": "3232270",
    "end": "3238540"
  },
  {
    "text": "because I've set\nthose separately within the subclasses. The kind, as well, the label\nworkout or running or swimming.",
    "start": "3238540",
    "end": "3248470"
  },
  {
    "text": "The calories_burned\nand the duration will be calculated using the\nget_calories method and then",
    "start": "3248470",
    "end": "3258369"
  },
  {
    "text": "the get_duration method. So again, in a nicely\nconsistent way. So I'll show you what this\nlooks like in the actual code.",
    "start": "3258370",
    "end": "3265000"
  },
  {
    "text": " Let me just comment that.",
    "start": "3265000",
    "end": "3270150"
  },
  {
    "start": "3270150",
    "end": "3276609"
  },
  {
    "text": "So here I've got three\nworkouts created. And then I'm just printing\nthese three different kinds of workouts.",
    "start": "3276610",
    "end": "3282000"
  },
  {
    "text": "And just to show\nyou I'm not lying, see the swim workout doesn't\nhave an str method defined",
    "start": "3282000",
    "end": "3288690"
  },
  {
    "text": "and neither does\nthe run workout. It just has a bunch\nof other stuff defined, but no str method.",
    "start": "3288690",
    "end": "3294970"
  },
  {
    "text": "So we're just using the\nstr method of our parent, and then when we run\nit, it looks like this.",
    "start": "3294970",
    "end": "3301170"
  },
  {
    "text": "So I've got a regular workout\nwith their icon and label, running workout with\ntheir icon and label,",
    "start": "3301170",
    "end": "3306240"
  },
  {
    "text": "and a swimming workout\nwith their icon and label. Isn't that cute.",
    "start": "3306240",
    "end": "3312940"
  },
  {
    "text": "All right, so we've made our\nown little digital thing. ",
    "start": "3312940",
    "end": "3321500"
  },
  {
    "text": "So this begs the\nquestion, when can we use an instance of a\nclass, of a subclass?",
    "start": "3321500",
    "end": "3331779"
  },
  {
    "text": " Well, you can use an instance\nof this RunWorkout anywhere",
    "start": "3331780",
    "end": "3338290"
  },
  {
    "text": "where you can use\nWorkout because again, the way I think about it is,\nyou say, well, a RunWorkout is",
    "start": "3338290",
    "end": "3343900"
  },
  {
    "text": "a Workout, so anything\nI can do with a Workout, I should be able to do with a\nRunWorkout, or a SwimWorkout,",
    "start": "3343900",
    "end": "3350050"
  },
  {
    "text": "or any of the subclasses. But the opposite is not true. If I can do something\nwith a RunWorkout,",
    "start": "3350050",
    "end": "3355839"
  },
  {
    "text": "well, RunWorkout has a bunch\nof other specific things that it can do. Of course, a regular\nworkout is not",
    "start": "3355840",
    "end": "3360850"
  },
  {
    "text": "going to be able to do\nthose specific things. So let's think about these\ntwo helper functions.",
    "start": "3360850",
    "end": "3366710"
  },
  {
    "text": "This one calculates\nthe total calories given a list of workouts. And this one calculates\nthe total elevation",
    "start": "3366710",
    "end": "3372730"
  },
  {
    "text": "given a list of workouts. The code looks very\nsimilar for both. We're just iterating\nthrough the loop,",
    "start": "3372730",
    "end": "3379690"
  },
  {
    "text": "grabbing each Workout\nobject, and then we're calling the get_calories\nor the get_elevation",
    "start": "3379690",
    "end": "3388029"
  },
  {
    "text": "on that Workout object. So this will give me\na number, and then I'm just keeping a running\nsum for the total elevation",
    "start": "3388030",
    "end": "3394630"
  },
  {
    "text": "and the total calories and\nat the end, I return it. So again, the list\nhere is important.",
    "start": "3394630",
    "end": "3401300"
  },
  {
    "text": "These are Workout objects\nand Workout objects. So what if I have a bunch of--",
    "start": "3401300",
    "end": "3408880"
  },
  {
    "text": "so here I've got two Workout\nobjects and two running Workout objects. So these Workout objects\nare 30-minutes long.",
    "start": "3408880",
    "end": "3419410"
  },
  {
    "text": "So using 200 calories\nper hour, these ones will each be 100 calories.",
    "start": "3419410",
    "end": "3426910"
  },
  {
    "text": "These running workouts are\ntwo hours long, so they will--",
    "start": "3426910",
    "end": "3435140"
  },
  {
    "text": "it doesn't actually matter. sorry, sorry. These running workouts\nare two hours long, so they're going\nto be 400 calories.",
    "start": "3435140",
    "end": "3443359"
  },
  {
    "text": "Because these parameters here,\ncorrespond to the elevation.",
    "start": "3443360",
    "end": "3450120"
  },
  {
    "text": "And they correspond\nto the elevation because if we look at the way we\ndefine a running workout right",
    "start": "3450120",
    "end": "3455520"
  },
  {
    "text": "here, this is the order\nof the parameters start time, end time, elevation\nvalue, calories.",
    "start": "3455520",
    "end": "3463240"
  },
  {
    "text": "So when I pass in parameters,\nthat need to go in that order.",
    "start": "3463240",
    "end": "3469360"
  },
  {
    "text": "And I can't skip around. If I want one of them to\nbe the default variable, then that has to be at the end.",
    "start": "3469360",
    "end": "3476300"
  },
  {
    "text": "So in this particular case, I've\ngot these two running workouts at 400 calories because by\ndefault, I didn't actually",
    "start": "3476300",
    "end": "3484960"
  },
  {
    "text": "pass in the number of calories. And then the elevation\nis 100 and 200. Yeah. AUDIENCE: What if we wanted\nthe default elevation",
    "start": "3484960",
    "end": "3492829"
  },
  {
    "text": "and of the calories,\nwould be put comma comma? ANA BELL: Then if you\nwanted both to be default,",
    "start": "3492830",
    "end": "3500930"
  },
  {
    "text": "then you just put nothing. You can't just leave\nan empty comma. AUDIENCE: If you want\nthe default elevation",
    "start": "3500930",
    "end": "3506980"
  },
  {
    "text": "and [INAUDIBLE] ANA BELL: Yeah,\nso then you would have to actually explicitly\nsay, like, calories",
    "start": "3506980",
    "end": "3513100"
  },
  {
    "text": "equals whatever you want. So at that point--\nyeah, now that we're working with default variables,\nit becomes a little bit tricky.",
    "start": "3513100",
    "end": "3521349"
  },
  {
    "text": "You can't go wrong\nwith just saying, like, elev equals whatever you\nwant it to be, calories equals whatever you want.",
    "start": "3521350",
    "end": "3526970"
  },
  {
    "text": "And then you can do whatever\nyou'd like in that case. But in this particular case,\nwe know our workouts are 400,",
    "start": "3526970",
    "end": "3534220"
  },
  {
    "text": "and elevation is those values. So when we run total calories\non all of the Workouts,",
    "start": "3534220",
    "end": "3541569"
  },
  {
    "text": "no matter what kind\nof workout I have, it doesn't actually matter\nbecause Python will just",
    "start": "3541570",
    "end": "3547940"
  },
  {
    "text": "grab calories for all\nof these workout types. So just sums that up. Elevation, if I run it\nonly on running workouts,",
    "start": "3547940",
    "end": "3556609"
  },
  {
    "text": "Python will know what to do. Here's 100 and 200 because\nthose running workouts have",
    "start": "3556610",
    "end": "3561710"
  },
  {
    "text": "an elevation data attribute. But if I ask for the elevation\nfor a running workout and just",
    "start": "3561710",
    "end": "3569540"
  },
  {
    "text": "a regular workout, Python\nwill spit out an error because as soon as it sees this\nworkout one, it , says, well,",
    "start": "3569540",
    "end": "3577650"
  },
  {
    "text": "what's the workout\ndot get_elev method. And it's going to say, I\ndon't have a get_elev method",
    "start": "3577650",
    "end": "3583700"
  },
  {
    "text": "for a regular workout. That's not something I know. Because that's something that we\nimplemented in the child class.",
    "start": "3583700",
    "end": "3590480"
  },
  {
    "text": "So let's go through\nthese together. And it's actually nothing\nto code just, to run.",
    "start": "3590480",
    "end": "3597069"
  },
  {
    "text": " So it's just down here.",
    "start": "3597070",
    "end": "3602810"
  },
  {
    "text": "So this is just kind of\nmaking sure you understand the order of operations. And I think one of the ones\nthat was question here,",
    "start": "3602810",
    "end": "3609370"
  },
  {
    "text": "where we actually passed\nin the number of calories, is at the end. So when I create a\nregular workout--",
    "start": "3609370",
    "end": "3616780"
  },
  {
    "text": "oops, let me just\nremove that over here --what is the value when\nI ask Python to tell me",
    "start": "3616780",
    "end": "3622119"
  },
  {
    "text": "the calories for this workout? At 200 calories an hour,\nwhat's the value here?",
    "start": "3622120",
    "end": "3628095"
  },
  {
    "start": "3628095",
    "end": "3633230"
  },
  {
    "text": "Just yell it out. AUDIENCE: [INAUDIBLE] ANA BELL: 30 minutes?",
    "start": "3633230",
    "end": "3640070"
  },
  {
    "text": "100, right? What's the elevation when\nI ask Python to tell me",
    "start": "3640070",
    "end": "3647510"
  },
  {
    "text": "the elevation for this object? ",
    "start": "3647510",
    "end": "3653074"
  },
  {
    "text": "AUDIENCE: An error. ANA BELL: Error, exactly, yep. Yep, because the Workout\nobject has no attribute.",
    "start": "3653074",
    "end": "3661819"
  },
  {
    "text": "It has no method get_elev. That's something specific\nto a running workout.",
    "start": "3661820",
    "end": "3666970"
  },
  {
    "text": "OK, how about this\none, RunWorkout here. So here I'm actually-- oops I didn't mean to do that.",
    "start": "3666970",
    "end": "3673310"
  },
  {
    "text": "What happens if I grab\nthe calories for w2? ",
    "start": "3673310",
    "end": "3684018"
  },
  {
    "text": "AUDIENCE: 450. ANA BELL: Yep, 450, yep it just\ngrabs whatever's passed in, doesn't estimate.",
    "start": "3684018",
    "end": "3689650"
  },
  {
    "text": "How about the elevation? AUDIENCE: 70. ANA BELL: Yep, there,\nagain, perfect.",
    "start": "3689650",
    "end": "3695760"
  },
  {
    "text": "Now let's create three\nkinds of running workouts. So here's one.",
    "start": "3695760",
    "end": "3700940"
  },
  {
    "text": "What's the calories and\nelevation for this one? I'll just do them both together.",
    "start": "3700940",
    "end": "3706290"
  },
  {
    "text": "So rw1. This parameter is the\nonly one passed in. What does that correspond\nto, calories or elevation?",
    "start": "3706290",
    "end": "3713510"
  },
  {
    "text": "AUDIENCE: Elevation. ANA BELL: Yeah elevation,\nremember our parameter list.",
    "start": "3713510",
    "end": "3718970"
  },
  {
    "text": "Elevation comes before calories. So the elevation is\n250, and the calories",
    "start": "3718970",
    "end": "3724400"
  },
  {
    "text": "will be estimated based\non whatever this is. So calories is first at 100.",
    "start": "3724400",
    "end": "3730160"
  },
  {
    "text": "Elevation is 250. How about running workout 2?",
    "start": "3730160",
    "end": "3736140"
  },
  {
    "text": "So here I've got 450\nand 700 in that order. Which one is the elevation?",
    "start": "3736140",
    "end": "3741960"
  },
  {
    "text": " AUDIENCE: 450. ANA BELL: Yep, 450,\nand calories is 700.",
    "start": "3741960",
    "end": "3749117"
  },
  {
    "text": "So when we print it, I\nprinted them backwards just to confuse us all. And then lastly, how\nabout this RunWorkout 3?",
    "start": "3749117",
    "end": "3757170"
  },
  {
    "text": "So here, to answer\nthe question what if I wanted elevation\nto be default,",
    "start": "3757170",
    "end": "3763560"
  },
  {
    "text": "but I wanted to\npass in calories? So here I just say the\nname of my parameter there,",
    "start": "3763560",
    "end": "3769140"
  },
  {
    "text": "and I give it an actual value.  So clearly here,\ncalories will be 300,",
    "start": "3769140",
    "end": "3776049"
  },
  {
    "text": "and elevation defaults to zero.  So just a little practice\nreading the specifications.",
    "start": "3776050",
    "end": "3786270"
  },
  {
    "text": "OK, so that finishes reusing\nthe str method from the parent. Now let's override\nour superclass.",
    "start": "3786270",
    "end": "3794400"
  },
  {
    "text": "So our improved Workout\nclass, remember, has a get_calories method that\nestimates the calories based",
    "start": "3794400",
    "end": "3803220"
  },
  {
    "text": "on the time that it took\nyou to do this workout, whether it was a running\nworkout or a regular workout.",
    "start": "3803220",
    "end": "3810000"
  },
  {
    "text": "But what I'm doing\nin this method, is I'm going to actually\nimplement my own get_calories",
    "start": "3810000",
    "end": "3815760"
  },
  {
    "text": "method inside the class\ndefinition for a RunWorkout.",
    "start": "3815760",
    "end": "3821040"
  },
  {
    "text": "So here's my RunWorkout\nclass definition. And I've got my own\nget_calories method.",
    "start": "3821040",
    "end": "3826750"
  },
  {
    "text": "So when I run get_calories\non a RunWorkout, Python will use this one.",
    "start": "3826750",
    "end": "3832320"
  },
  {
    "text": "What is this one going to do? So we're going to do\nsomething really cool. We're going to estimate the\nnumber of calories burned",
    "start": "3832320",
    "end": "3839880"
  },
  {
    "text": "for a run workout based on a set\nof points, latitude longitude",
    "start": "3839880",
    "end": "3846059"
  },
  {
    "text": "points. So what we can\nactually do, is we're going to pass in\na list of tuples",
    "start": "3846060",
    "end": "3853800"
  },
  {
    "text": "like this, which represents\nthe route that we take, so in this\nparticular case,",
    "start": "3853800",
    "end": "3860980"
  },
  {
    "text": "I've got four places that\nI have jogged between.",
    "start": "3860980",
    "end": "3866260"
  },
  {
    "text": "So these are my four\nlatitude longitude points. So each tuple is\nlatitude comma longitude.",
    "start": "3866260",
    "end": "3874020"
  },
  {
    "text": "So I can make this as\nprecise as I'd like. But what I want\nthis method to do,",
    "start": "3874020",
    "end": "3880430"
  },
  {
    "text": "is to potentially,\nif the user does give me a set of\nlatitude longitude points that they actually went\nthrough, to calculate",
    "start": "3880430",
    "end": "3887360"
  },
  {
    "text": "the calories burned based\non a class variable called calories_per_kilometer.",
    "start": "3887360",
    "end": "3893600"
  },
  {
    "text": "So given a set of these\npoints, what I'd like to do is to calculate the total\nkilometers traveled between all",
    "start": "3893600",
    "end": "3900830"
  },
  {
    "text": "of these latitude longitude\npoints, multiply that distance, . That kilometer distance by\nthe calories_per_kilometer.",
    "start": "3900830",
    "end": "3908880"
  },
  {
    "text": "And use that as the\nestimate for the calories burned in this\nparticular RunWorkout.",
    "start": "3908880",
    "end": "3915340"
  },
  {
    "text": "So this is how the\ncode achieves that. So I've got another\nclass variable that's only specific\nto this RunWorkout.",
    "start": "3915340",
    "end": "3922359"
  },
  {
    "text": "So Workout does not\nknow about this. Calories_per_kilometer is 100. And now I've got my own\nget_calories method here.",
    "start": "3922360",
    "end": "3929079"
  },
  {
    "text": "It's overridden. So if we run this\nget_calories on a RunWorkout, it will use this one.",
    "start": "3929080",
    "end": "3936010"
  },
  {
    "text": "And what does it do? Well, if we don't give\nit any GPS points, if we don't give it a\nlist of tuples there,",
    "start": "3936010",
    "end": "3943520"
  },
  {
    "text": "Python will default to the else. What does the else do? Well, it says, hey,\nwho's your parent?",
    "start": "3943520",
    "end": "3950119"
  },
  {
    "text": "Run their get_calories method. So that's just estimating it\nbased on the total time elapsed",
    "start": "3950120",
    "end": "3956760"
  },
  {
    "text": "in this workout. That's our default parent. But if the user got fancy and\ngave us a bunch of tuples,",
    "start": "3956760",
    "end": "3966180"
  },
  {
    "text": "representing latitude\nand longitude points for all of\ntheir workouts, then we're going to do\nthe following stuff.",
    "start": "3966180",
    "end": "3973160"
  },
  {
    "text": "We're going to iterate through\nall of these pairs of GPS points, pair by pair.",
    "start": "3973160",
    "end": "3979340"
  },
  {
    "text": "We're going to\ncalculate the distance, given this latitude,\nlongitude value.",
    "start": "3979340",
    "end": "3986360"
  },
  {
    "text": "Add on to this running total\nfor the total distance,",
    "start": "3986360",
    "end": "3991460"
  },
  {
    "text": "and then return\nthat total distance multiplied by this\nclass variable,",
    "start": "3991460",
    "end": "3998090"
  },
  {
    "text": "calories_per_kilometer. So let me show you\nwhat this actually",
    "start": "3998090",
    "end": "4006010"
  },
  {
    "text": "looks like because the only\nthing that is sort of still mystifying here, is\nthis GPS distance.",
    "start": "4006010",
    "end": "4013060"
  },
  {
    "text": "And this GPS\ndistance is actually a function that's in\nthis lecture helpers",
    "start": "4013060",
    "end": "4021260"
  },
  {
    "text": "file, which is included in\ntoday's Python zip file. And it's just from the internet.",
    "start": "4021260",
    "end": "4029240"
  },
  {
    "text": "It's a way to calculate the\ndistance traveled between two",
    "start": "4029240",
    "end": "4036619"
  },
  {
    "text": "latitude longitude pairs. That's all it is. So it does some fancy stuff\nwith sines and cosines",
    "start": "4036620",
    "end": "4041900"
  },
  {
    "text": "and things like\nthat to figure out the distance between\nthese two lat long pairs.",
    "start": "4041900",
    "end": "4047510"
  },
  {
    "text": "That's all it is. So we're just running that\nfunction nicely down here",
    "start": "4047510",
    "end": "4052700"
  },
  {
    "text": "to help us calculate\nthat total distance. Beyond that, everything\nis pretty simple.",
    "start": "4052700",
    "end": "4058319"
  },
  {
    "text": "It's just looking at consecutive\npairs of these tuples,",
    "start": "4058320",
    "end": "4063890"
  },
  {
    "text": "getting that distance plus\nthis distance plus distances, and then multiplying by\nthe cal_per_kilometer.",
    "start": "4063890",
    "end": "4071510"
  },
  {
    "text": "So in the end, what we get\nis something like this. So here let me show you.",
    "start": "4071510",
    "end": "4078619"
  },
  {
    "text": "Here are two points,\nlatitude longitude points. So I've got Boston and\nNewton, so here I've",
    "start": "4078620",
    "end": "4083780"
  },
  {
    "text": "just got a straight shot. So I'm counting, getting very\nprecise with blocks and things",
    "start": "4083780",
    "end": "4089300"
  },
  {
    "text": "like that. But if I create a\nrunning workout here with the start time, end\ntime, elevation value, and now",
    "start": "4089300",
    "end": "4095450"
  },
  {
    "text": "I pass in the route\nGPS points, this is another piece\nto my init method.",
    "start": "4095450",
    "end": "4102870"
  },
  {
    "text": "I forgot to show you that. Sorry about that. So here's my init\nmethod for RunWorkout.",
    "start": "4102870",
    "end": "4110699"
  },
  {
    "text": "I skipped that little bit. Last parameter here\nis to actually pass in some route GPS points.",
    "start": "4110700",
    "end": "4116520"
  },
  {
    "text": " And if I actually pass in\nthose route GPS points,",
    "start": "4116520",
    "end": "4121528"
  },
  {
    "text": "when I run the\nget_calories method, it tells me that I\nburned this many. And it calculates it\nbased on that distance",
    "start": "4121529",
    "end": "4127106"
  },
  {
    "text": "between Boston and Newton.  In the second example\nhere, I don't actually",
    "start": "4127106",
    "end": "4132930"
  },
  {
    "text": "pass in the value\nfor the GPS points, so we're defaulting to\njust our regular calories",
    "start": "4132930",
    "end": "4139049"
  },
  {
    "text": "function from Workout,\nwhich is to calculate it based on the start\ntime and the end time. So from 1:35 to 3:57.",
    "start": "4139050",
    "end": "4147350"
  },
  {
    "text": "That's why it's a weird not\nround number of calories. ",
    "start": "4147350",
    "end": "4155330"
  },
  {
    "text": "So I think that's\nalso really cool, you guys, this function here.",
    "start": "4155330",
    "end": "4162109"
  },
  {
    "text": "OK, so these overridden\nmethods, just to show you for completion's sake, how\nthis Run Workout class looks,",
    "start": "4162109",
    "end": "4169160"
  },
  {
    "text": "everything is the same as\nwhat we ended up with before. But now I'm going to reimplement\nmy get_calories method,",
    "start": "4169160",
    "end": "4175250"
  },
  {
    "text": "so now RunWorkout knows\nabout a calories method. And I've also got\nthis data attribute.",
    "start": "4175250",
    "end": "4181040"
  },
  {
    "text": "Sorry, class variable, sorry,\nI always get messed up. This class variable\ncals_per_kilometer.",
    "start": "4181040",
    "end": "4186649"
  },
  {
    "text": "And any RunWorkout instance\nwill know about, of course, the cals_per_kilometer, as\nwell as the cal_per_hour",
    "start": "4186649",
    "end": "4193068"
  },
  {
    "text": "from our parent.  Questions about that? ",
    "start": "4193069",
    "end": "4202560"
  },
  {
    "text": "OK, we're building\nsomething really nice here. So I guess the\nquestion is, and I",
    "start": "4202560",
    "end": "4208020"
  },
  {
    "text": "think you've probably\nfigured this out, how do you know\nwhich method to call? Well, you just look at\nthe object before the dot.",
    "start": "4208020",
    "end": "4217050"
  },
  {
    "text": "You run a method your object\ndot method name, what's the thing before the dot?",
    "start": "4217050",
    "end": "4222270"
  },
  {
    "text": "What is its type? If the type-- like, for\nexample, get_calories --if the type is\nrunning, you look",
    "start": "4222270",
    "end": "4229290"
  },
  {
    "text": "to see if that class definition\nhas a get_calories method. If it does, you use that.",
    "start": "4229290",
    "end": "4235920"
  },
  {
    "text": "If it doesn't, and\nonly if it doesn't, you look at your parent and\nsay, does your parent have a get_calories method?",
    "start": "4235920",
    "end": "4242190"
  },
  {
    "text": "If it does, you use that. And if it doesn't, you look\nat the parents' parent. Does the parent's parent\nhave a get_calories method?",
    "start": "4242190",
    "end": "4250597"
  },
  {
    "text": "If it does, you use that. If it doesn't, you look at\nthe parents parent's parent all the way up, you keep going\nall the way up the chain,",
    "start": "4250598",
    "end": "4256253"
  },
  {
    "text": "until you get to the\ngeneric Python object. If the Python object\ntype has a method named",
    "start": "4256253",
    "end": "4263440"
  },
  {
    "text": "what you'd like to call,\nyou use that, otherwise error, No such method\nwas found anywhere",
    "start": "4263440",
    "end": "4269740"
  },
  {
    "text": "within our chain of hierarchies\nup until the Python object.",
    "start": "4269740",
    "end": "4274810"
  },
  {
    "text": "All right, so that\nfinishes overriding our get_calories method. And now we're going to\ndo one more thing, which",
    "start": "4274810",
    "end": "4281890"
  },
  {
    "text": "is to add something new to\nRunWorkout that didn't actually exist in Workout Although,\nI guess I am implementing it",
    "start": "4281890",
    "end": "4291640"
  },
  {
    "text": "in Workout. So it's not actually adding new. But we're going to\noverride it anyway.",
    "start": "4291640",
    "end": "4297880"
  },
  {
    "text": "So the class Workout, let's\nsay that we want to compare two workouts together.",
    "start": "4297880",
    "end": "4305020"
  },
  {
    "text": "So to do that, we're going\nto implement the Dunder method double underscore\neq double underscore.",
    "start": "4305020",
    "end": "4311535"
  },
  {
    "text": "And this will allow us to\ncompare two running Workout objects, or two Workout objects,\nor running and Workout objects",
    "start": "4311535",
    "end": "4318900"
  },
  {
    "text": "using the double equal sign. So w1 == run w2 or whatever.",
    "start": "4318900",
    "end": "4325800"
  },
  {
    "text": "So we can use the\ndouble equal sign to compare objects of our type.",
    "start": "4325800",
    "end": "4331070"
  },
  {
    "text": "So again, my decision for\ncomparing these two objects,",
    "start": "4331070",
    "end": "4338000"
  },
  {
    "text": "Workout objects is to say, well,\nfirst, let's compare the types.",
    "start": "4338000",
    "end": "4343200"
  },
  {
    "text": "So if I'm comparing a workout\nversus a running workout, right off the bat, they're\nnot going to be equal.",
    "start": "4343200",
    "end": "4350159"
  },
  {
    "text": "So first of all, the type of\nthis object should be the same. So I should be comparing\nworkouts with workouts, running workouts with running\nworkouts, or swims with swims.",
    "start": "4350160",
    "end": "4358420"
  },
  {
    "text": "And I also want every\none of the other data attributes to be the same.",
    "start": "4358420",
    "end": "4364789"
  },
  {
    "text": "So the start time, end times,\nthe kind, and the get calories. So as long as all of\nthese things are the same",
    "start": "4364790",
    "end": "4372060"
  },
  {
    "text": "I'm going to say that\nthese workouts are the same or equivalent.",
    "start": "4372060",
    "end": "4378030"
  },
  {
    "text": "So this is the equal\nmethod in my workout, and then, in my class\nWorkout, I can actually",
    "start": "4378030",
    "end": "4384110"
  },
  {
    "text": "override that method. So this should actually\nbe add override, just",
    "start": "4384110",
    "end": "4392690"
  },
  {
    "text": "like the other one.  And then RunWorkout, I'm going\nto override the equal method,",
    "start": "4392690",
    "end": "4401030"
  },
  {
    "text": "but I'm going to do it in a\nvery modular Pythonic way. I'm going to say that\na RunWorkout is going",
    "start": "4401030",
    "end": "4407210"
  },
  {
    "text": "to be the same as another\nWorkout if everything",
    "start": "4407210",
    "end": "4416250"
  },
  {
    "text": "in my parent is the same. So here, I'm just calling the\nsuper() method saying Workout",
    "start": "4416250",
    "end": "4423420"
  },
  {
    "text": "dot double underscore equal\ndouble underscore other. So with this little bit\nhere, this line here,",
    "start": "4423420",
    "end": "4430780"
  },
  {
    "text": "just the super() dot double\nunderscore equal double underscore other, this\ncompares all of these things.",
    "start": "4430780",
    "end": "4439520"
  },
  {
    "text": "So I don't need to rewrite that\nin eq the method of RunWorkout.",
    "start": "4439520",
    "end": "4444820"
  },
  {
    "text": "And I can clearly see\nwhat else in addition to regular Workout\ncomparison, I need",
    "start": "4444820",
    "end": "4451210"
  },
  {
    "text": "to have happen for\nthem to be equal. I also want the\nelevations to be equal.",
    "start": "4451210",
    "end": "4457077"
  },
  {
    "text": "That's the other data attribute.  So you can see now how nicely\nmodular this code looks.",
    "start": "4457077",
    "end": "4465510"
  },
  {
    "text": "It's very clear what\ndifferentiates a RunWorkout to a regular Workout\nwith this slide.",
    "start": "4465510",
    "end": "4473810"
  },
  {
    "text": "Questions about this?  OK. AUDIENCE: Should [INAUDIBLE]\nto continue to end.",
    "start": "4473810",
    "end": "4481300"
  },
  {
    "text": "ANA BELL: Yeah, exactly,\nyeah, so this should all be on one line.",
    "start": "4481300",
    "end": "4487550"
  },
  {
    "text": "But the backslash\nactually just breaks up the line into multiple\nlines for visibility.",
    "start": "4487550",
    "end": "4495390"
  },
  {
    "text": "So in the code, here's\na bunch of Workouts. And we can run some of them.",
    "start": "4495390",
    "end": "4501570"
  },
  {
    "text": "But you can see why\nthey're true or false. So here, w1 and w2\nare not the same",
    "start": "4501570",
    "end": "4508849"
  },
  {
    "text": "because the calories_burned\nare different. They're both regular workouts.",
    "start": "4508850",
    "end": "4514877"
  },
  {
    "text": "They both have the same\nstart and end times, but the calories_burned\nare different. So this prints false, just\nequality on these workouts.",
    "start": "4514877",
    "end": "4522065"
  },
  {
    "text": " And then here's a true one.",
    "start": "4522065",
    "end": "4527630"
  },
  {
    "text": "w2 is equivalent to w3\nbecause the start and end times are the same,\nthe length is the same,",
    "start": "4527630",
    "end": "4534530"
  },
  {
    "text": "and the calories_burned\nare the same, w1 and w3. Or sorry, w2 and w3,\nthese two, all right.",
    "start": "4534530",
    "end": "4542040"
  },
  {
    "text": "This one just used\nthe default value, but that default\ncalculated values",
    "start": "4542040",
    "end": "4548170"
  },
  {
    "text": "was calculated to be 100 because\nit's a 30-minute workout, anyway. ",
    "start": "4548170",
    "end": "4553610"
  },
  {
    "text": "So you can go through some of\nthe other ones on your own. ",
    "start": "4553610",
    "end": "4559510"
  },
  {
    "text": "I guess the other interesting\none is this w1 with rw1. Everything about this is\nthe same, calories_burned.",
    "start": "4559510",
    "end": "4569050"
  },
  {
    "text": "Everything is the same, except\nfor the fact that they are different kinds of workouts. One is a run.",
    "start": "4569050",
    "end": "4574420"
  },
  {
    "text": "One is a regular. So we run that as false. ",
    "start": "4574420",
    "end": "4581920"
  },
  {
    "text": "Other questions,\nor any questions? ",
    "start": "4581920",
    "end": "4589210"
  },
  {
    "text": "OK, so last slide, this\nis the last lecture",
    "start": "4589210",
    "end": "4595510"
  },
  {
    "text": "on object oriented programming. Hopefully, it gave\nyou an idea for how",
    "start": "4595510",
    "end": "4601920"
  },
  {
    "text": "to create your own objects. And this last\nexample, specifically, showed how we can\njust improve it",
    "start": "4601920",
    "end": "4607260"
  },
  {
    "text": "a little bit at a time to make\nit be this really cool thing. We added a way to\nestimate calories.",
    "start": "4607260",
    "end": "4614640"
  },
  {
    "text": "We added a way to estimate\ncalories using GPS points, and we just did\nit incrementally. So you don't want to do\nthat right off the bat.",
    "start": "4614640",
    "end": "4621630"
  },
  {
    "text": "Just write a little bit\nat a time, and in the end, you can write a really\ncool object type.",
    "start": "4621630",
    "end": "4627540"
  },
  {
    "text": "Now that you know how to\ncreate your own object types, you can create objects\nusing other objects.",
    "start": "4627540",
    "end": "4634620"
  },
  {
    "text": "So some of the data attributes\nfor something more complex, could be a Workout object,\nsomething like that.",
    "start": "4634620",
    "end": "4641820"
  },
  {
    "text": "But it's possible to overdo it. Especially now that we're not\nwriting super complex classes,",
    "start": "4641820",
    "end": "4648750"
  },
  {
    "text": "it's possible to overengineer. And when you overengineer,\nit becomes kind of",
    "start": "4648750",
    "end": "4653940"
  },
  {
    "text": "annoying to just keep scrolling\nback and forth to this init, to that init to figure\nout what methods",
    "start": "4653940",
    "end": "4661030"
  },
  {
    "text": "were in this class, what\nmethods were in the other class? And so if you can achieve\nit using just one object",
    "start": "4661030",
    "end": "4669730"
  },
  {
    "text": "type, or maybe just a function,\nno need to create your own all these\ncomplicated object types",
    "start": "4669730",
    "end": "4675610"
  },
  {
    "text": "that build upon object types. But I just wanted to show you\nthat it is possible, especially",
    "start": "4675610",
    "end": "4681010"
  },
  {
    "text": "as you might be building\nmore complex things in future classes,\nthings like that.",
    "start": "4681010",
    "end": "4686810"
  },
  {
    "text": "It is possible to write\nreally complex classes that don't look so bad because you're\nbuilding upon code that you've",
    "start": "4686810",
    "end": "4694270"
  },
  {
    "text": "already written. So now we've got these ideas\nof abstraction, modularity, information hiding\nthat all work together",
    "start": "4694270",
    "end": "4700930"
  },
  {
    "text": "to help you achieve\nthis really cool object or cool class or cool program.",
    "start": "4700930",
    "end": "4708200"
  },
  {
    "text": "OK, so the next set\nof lectures, we're going to leave programming\nfor a little bit.",
    "start": "4708200",
    "end": "4714380"
  },
  {
    "text": "And we're going to\nlook at figuring out how to write efficient\nprograms and how",
    "start": "4714380",
    "end": "4720950"
  },
  {
    "text": "to figure out whether our\nprograms are efficient or not and things like that.",
    "start": "4720950",
    "end": "4727349"
  },
  {
    "text": "So we're going to go into a more\ntheoretical side of computer science. ",
    "start": "4727350",
    "end": "4744000"
  }
]