[
  {
    "start": "0",
    "end": "70000"
  },
  {
    "text": " The following\ncontent is provided under a Creative\nCommons license. Your support will help MIT\nOpenCourseWare continue",
    "start": "0",
    "end": "6860"
  },
  {
    "text": "to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6860",
    "end": "13320"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13320",
    "end": "22452"
  },
  {
    "text": "PROFESSOR: Hey, everybody. You ready to learn\nsome algorithms? Yeah!",
    "start": "22452",
    "end": "28349"
  },
  {
    "text": "Let's do it. I'm Eric Domain. You can call me Eric. And the last class, we\nsort of jumped into things.",
    "start": "28350",
    "end": "35020"
  },
  {
    "text": "We studied peak\nfinding and looked at a bunch of algorithms\nfor peak finding on your problem set. You've already\nseen a bunch more.",
    "start": "35020",
    "end": "42014"
  },
  {
    "text": "And in this class, we're going\nto do some more algorithms. Don't worry. That will be at the end. We're going to talk about\nanother problem, document",
    "start": "42014",
    "end": "47550"
  },
  {
    "text": "distance, which will be a\nrunning example for a bunch of topics that we\ncover in this class. But before we go there, I wanted\nto take a step back and talk",
    "start": "47550",
    "end": "55640"
  },
  {
    "text": "about, what actually\nis an algorithm? What is an algorithm\nallowed to do?",
    "start": "55640",
    "end": "60760"
  },
  {
    "text": "And also deep philosophical\nquestions like, what is time? What is the running\ntime of an algorithm?",
    "start": "60760",
    "end": "66410"
  },
  {
    "text": "How do we measure it? And what are the rules the game? For fun, I thought I\nwould first mention",
    "start": "66410",
    "end": "73119"
  },
  {
    "text": "where the word comes\nfrom, the word algorithm. It comes from this guy,\na little hard to spell.",
    "start": "73120",
    "end": "82390"
  },
  {
    "text": " Al-Khwarizmi, who is sort\nof the father of algebra.",
    "start": "82390",
    "end": "91210"
  },
  {
    "text": "He wrote this book called \"The\nCompendious Book on Calculation by Completion and\nBalancing\" back in the day.",
    "start": "91210",
    "end": "98740"
  },
  {
    "text": "And it was in\nparticular about how to solve linear and\nquadratic equations.",
    "start": "98740",
    "end": "104194"
  },
  {
    "text": "So the beginning of algebra. I don't think he invented\nthose techniques. But he was sort of\nthe textbook writer who wrote sort of how\npeople solved them.",
    "start": "104194",
    "end": "110826"
  },
  {
    "text": "And you can think\nof how to solve those equations as\nearly algorithms. First, you take this number.",
    "start": "110826",
    "end": "116080"
  },
  {
    "text": "You multiply by this. You add it or you reduce\nto squares, whatever.",
    "start": "116080",
    "end": "121660"
  },
  {
    "start": "120000",
    "end": "216000"
  },
  {
    "text": "So that's where the word\nalgebra comes from and also where the word\nalgorithm comes from.",
    "start": "121660",
    "end": "126689"
  },
  {
    "text": "There aren't very many\nwords with these roots. So there you go. Some fun history. ",
    "start": "126690",
    "end": "135320"
  },
  {
    "text": "What's an algorithm? I'll start with sort of\nsome informal definitions and then the point\nof this lecture.",
    "start": "135320",
    "end": "142069"
  },
  {
    "text": "And the idea of a\nmodel of computation is to formally specify\nwhat an algorithm is.",
    "start": "142070",
    "end": "148684"
  },
  {
    "text": "I don't want to get super\ntechnical and formal here, but I want to give\nyou some grounding so when we write Python code,\nwhen we write pseudocode,",
    "start": "148684",
    "end": "155329"
  },
  {
    "text": "we have some idea what\nthings actually cost. This is a new lecture. We've never done\nthis before in 006.",
    "start": "155330",
    "end": "160470"
  },
  {
    "text": "But I think it's important. So at a high level,\nyou can think",
    "start": "160470",
    "end": "165870"
  },
  {
    "text": "of an algorithm is just\na-- I'm sure you've seen the definition before. ",
    "start": "165870",
    "end": "174549"
  },
  {
    "text": "It's a way to define computation\nor computational procedure for solving some problem. ",
    "start": "174550",
    "end": "185030"
  },
  {
    "text": "So whereas computer\ncode, I mean, it could just be running\nin the background all the time doing whatever. An algorithm we think\nof as having some input",
    "start": "185030",
    "end": "192000"
  },
  {
    "text": "and generating some output. Usually, it's to\nsolve some problem. ",
    "start": "192000",
    "end": "200040"
  },
  {
    "text": "You want to know is this\nnumber prime, whatever. Question? AUDIENCE: Can you turn up\nthe volume for your mic?",
    "start": "200040",
    "end": "206120"
  },
  {
    "text": "PROFESSOR: This microphone does\nnot feed into the AV system. So I shall just talk louder, OK? ",
    "start": "206120",
    "end": "213790"
  },
  {
    "text": "And quiet the set, please. OK, so that's an algorithm. You take some input.",
    "start": "213790",
    "end": "219890"
  },
  {
    "text": "You run it through. You compute some output. Of course, computer\ncode can do this too.",
    "start": "219890",
    "end": "225209"
  },
  {
    "text": "An algorithm is basically\nthe mathematical analog of a computer program. So if you want to reason about\nwhat computer programs do,",
    "start": "225210",
    "end": "232620"
  },
  {
    "text": "you translate it into\nthe world algorithms. And vice versa, you want to\nsolve some problem-- first, you usually develop an\nalgorithm using mathematics,",
    "start": "232620",
    "end": "240709"
  },
  {
    "text": "using this class. And then you convert\nit into computer code. And this class is about\nthat transition from one",
    "start": "240710",
    "end": "245760"
  },
  {
    "text": "to the other. You can draw a picture\nof sort of analogs. ",
    "start": "245760",
    "end": "253660"
  },
  {
    "text": "So an algorithm is a\nmathematical analog of a computer program.",
    "start": "253660",
    "end": "260289"
  },
  {
    "text": "A computer program is built on\ntop of a programming language. And it's written in a\nprogramming language.",
    "start": "260289",
    "end": "266044"
  },
  {
    "start": "266045",
    "end": "273740"
  },
  {
    "text": "The mathematical analog\nof a programming language, what we write algorithms\nin, usually we",
    "start": "273740",
    "end": "279630"
  },
  {
    "text": "write them in pseudocode,\nwhich is basically",
    "start": "279630",
    "end": "284890"
  },
  {
    "text": "another fancy word for\nstructured English, good English, whatever\nyou want to say.",
    "start": "284890",
    "end": "291949"
  },
  {
    "text": "Of course, you could use\nanother natural language. But the idea is, you need to\nexpress that algorithm in a way",
    "start": "291950",
    "end": "298140"
  },
  {
    "text": "that people can understand\nand reason about formally. So that's the structured part. Pseudocode means lots\nof different things.",
    "start": "298140",
    "end": "305780"
  },
  {
    "text": "It's just sort of an abstract\nhow you would write down formal specification\nwithout necessarily being able to actually run\nit on a computer.",
    "start": "305780",
    "end": "313739"
  },
  {
    "text": "Though there's a particular\npseudocode in your textbook which you probably\ncould run on a computer. A lot of it, anyway.",
    "start": "313739",
    "end": "319426"
  },
  {
    "text": "But you don't have\nto use that version. It just makes sense to humans\nwho do the mathematics.",
    "start": "319426",
    "end": "325949"
  },
  {
    "text": "OK, and then ultimately, this\nprogram runs on a computer. You all have computers,\nprobably in your pockets.",
    "start": "325950",
    "end": "334340"
  },
  {
    "text": "There's an analog of a computer\nin the mathematical world. And that is the\nmodel of computation.",
    "start": "334340",
    "end": "342230"
  },
  {
    "text": "And that's sort of the focus of\nthe first part of this lecture. Model of computation says what\nyour computer is allowed to do,",
    "start": "342230",
    "end": "350850"
  },
  {
    "text": "what it can do in\nconstant time, basically? And that's what I want\nto talk about here.",
    "start": "350850",
    "end": "357460"
  },
  {
    "text": "So the model of computation\nspecifies basically",
    "start": "357460",
    "end": "373080"
  },
  {
    "text": "what operations you\ncan do in an algorithm",
    "start": "373080",
    "end": "388289"
  },
  {
    "text": "and how much they cost. This is the what is time. ",
    "start": "388290",
    "end": "398274"
  },
  {
    "text": "So for each\noperation, we're going to specify how\nmuch time it costs. Then the algorithm does\na bunch of operations.",
    "start": "398274",
    "end": "403680"
  },
  {
    "text": "They're combined together\nwith control flow, for loops, if statements,\nstuff like that which we're not going to worry about too much.",
    "start": "403680",
    "end": "410280"
  },
  {
    "text": "But obviously, we'll\nuse them a lot. And what we count is how much\ndo each of the operations cost. You add them up.",
    "start": "410280",
    "end": "415720"
  },
  {
    "text": "That is the total cost\nof your algorithm. So in particular, we\ncare mostly in this class about running time.",
    "start": "415720",
    "end": "421960"
  },
  {
    "text": "Each operation has a time cost. You add those up. That's running time\nof the algorithm.",
    "start": "421960",
    "end": "427400"
  },
  {
    "text": "OK, so let's-- I'm going to\ncover two models of computation",
    "start": "427400",
    "end": "434974"
  },
  {
    "start": "430000",
    "end": "797000"
  },
  {
    "text": "which you can just think of\nas different ways of thinking. You've probably seen\nthem in some sense as-- what you call them?",
    "start": "434974",
    "end": "442650"
  },
  {
    "text": "Styles of programming. Object oriented style of\nprogramming, more assembly",
    "start": "442650",
    "end": "448449"
  },
  {
    "text": "style of programming. There's lots of different\nstyles of programming languages which I'm not going\nto talk about here.",
    "start": "448450",
    "end": "453699"
  },
  {
    "text": "But you've see analogs if\nyou've seen those before.  And these models\nreally give you a way",
    "start": "453700",
    "end": "461580"
  },
  {
    "text": "of structuring your\nthinking about how you write an algorithm.",
    "start": "461580",
    "end": "466770"
  },
  {
    "text": "So they are the random access\nmachine and the pointer machine. So we'll start with random\naccess machine, also known",
    "start": "466770",
    "end": "484550"
  },
  {
    "text": "as the RAM. Can someone tell me what\nelse RAM stands for?",
    "start": "484550",
    "end": "490459"
  },
  {
    "text": "AUDIENCE: Random Access Memory? PROFESSOR: Random Access Memory. So this is both confusing\nbut also convenience.",
    "start": "490459",
    "end": "495860"
  },
  {
    "text": "Because RAM simultaneously\nstands for two things and they mean almost the\nsame thing, but not quite.",
    "start": "495860",
    "end": "501135"
  },
  {
    "text": "So I guess that's more\nconfusing than useful. But there you go. So we have random access memory.",
    "start": "501135",
    "end": "511244"
  },
  {
    "text": "Oh, look at that. Fits perfectly. And so we're thinking,\nthis is a real--",
    "start": "511244",
    "end": "517340"
  },
  {
    "text": "this is-- random access memory\nis over here in real computer land. That's like, D-RAM\nSD-RAM, whatever--",
    "start": "517340",
    "end": "523809"
  },
  {
    "text": "the things you buy and stick\ninto your motherboard, your GP, or whatever.",
    "start": "523809",
    "end": "529190"
  },
  {
    "text": "And over here, the mathematical\nanalog of-- so here's, it's a RAM. Here, it's also a RAM.",
    "start": "529190",
    "end": "535070"
  },
  {
    "text": "Here, it's a random\naccess machine. Here, it's a random\naccess memory.",
    "start": "535070",
    "end": "540560"
  },
  {
    "text": "It's technical detail. But the idea is, if you look\nat RAM that's in your computer,",
    "start": "540560",
    "end": "549680"
  },
  {
    "text": "it's basically a\ngiant array, right? You can go from zero\nto, I don't know.",
    "start": "549680",
    "end": "556090"
  },
  {
    "text": "A typical chip these days is\nlike four gigs in one thing. So you can go from\nzero to four gigs.",
    "start": "556090",
    "end": "561890"
  },
  {
    "text": "You can access anything in the\nmiddle there in constant time. To access something, you\nneed to know where it is.",
    "start": "561890",
    "end": "568490"
  },
  {
    "text": "That's random access memory. So that's an array. ",
    "start": "568490",
    "end": "574490"
  },
  {
    "text": "So I'll just draw a big picture. Here's an array. Now, RAM is usually\norganized by words.",
    "start": "574490",
    "end": "581839"
  },
  {
    "text": "So these are a\nmachine word, which we're going to\nput in this model.",
    "start": "581840",
    "end": "587510"
  },
  {
    "text": "And then there's address zero,\naddress one, address two. This is the fifth word.",
    "start": "587510",
    "end": "593150"
  },
  {
    "text": "And just keeps going. You can think of\nthis as infinite. Or the amount that\nyou use, that's the space of your algorithm, if\nyou care about storage space.",
    "start": "593150",
    "end": "601660"
  },
  {
    "text": "So that's basically it. OK, now how do we-- this is\nthe memory side of things. How do we actually\ncompute with it?",
    "start": "601660",
    "end": "608150"
  },
  {
    "text": "It's very simple. We just say, in constant time,\nan algorithm can basically",
    "start": "608150",
    "end": "618490"
  },
  {
    "text": "read in or load a constant\nnumber of words from memory,",
    "start": "618490",
    "end": "625160"
  },
  {
    "text": "do a constant number of\ncomputations on them,",
    "start": "625160",
    "end": "633019"
  },
  {
    "text": "and then write them out. It's usually called store. ",
    "start": "633020",
    "end": "643539"
  },
  {
    "text": "OK, it needs to know\nwhere these words are. It accesses them by address.",
    "start": "643539",
    "end": "652290"
  },
  {
    "text": "And so I guess I\nshould write here you have a constant number of\nregisters just hanging around.",
    "start": "652290",
    "end": "661910"
  },
  {
    "text": "So you load some\nwords into registers. You can do some computations\non those registers. And then you can\nwrite them back,",
    "start": "661910",
    "end": "667480"
  },
  {
    "text": "storing them in\nlocations that are specified by your registers. So you've ever done\nassembly programming,",
    "start": "667480",
    "end": "672690"
  },
  {
    "text": "this is what assembly\nprogramming is like. And it can be rather annoying to\nwrite algorithms in this model.",
    "start": "672690",
    "end": "680500"
  },
  {
    "text": "But in some sense,\nit is reality. This is how we think\nabout computers. If you ignore\nthings like caches,",
    "start": "680500",
    "end": "685780"
  },
  {
    "text": "this is an accurate\nmodel of computation that loading,\ncomputing, and storing all take roughly the\nsame amount of time.",
    "start": "685780",
    "end": "692040"
  },
  {
    "text": "They all take constant time. You can manipulate a\nwhole word at a time. Now, what exactly is a word?",
    "start": "692040",
    "end": "698680"
  },
  {
    "text": "You know, computers these days,\nit's like 32 bits or 64 bits. But we like to be a\nlittle bit more abstract.",
    "start": "698680",
    "end": "705710"
  },
  {
    "text": "A word is w bits.",
    "start": "705710",
    "end": "711220"
  },
  {
    "text": "It's slightly annoying. And most of this class, we won't\nreally worry about what w is. We'll assume that\nwe're given as input",
    "start": "711220",
    "end": "717280"
  },
  {
    "text": "a bunch of things\nwhich are words. So for example, peak finding. We're given a matrix of numbers.",
    "start": "717280",
    "end": "723050"
  },
  {
    "text": "We didn't really say whether\nthey're integers or floats or what. We don't worry about that. We just think of\nthem as words and we",
    "start": "723050",
    "end": "728810"
  },
  {
    "text": "assume that we can\nmanipulate those words. In particular, given two\nnumbers, we can compare them. Which is bigger?",
    "start": "728810",
    "end": "733820"
  },
  {
    "text": "And so we can determine,\nis this cell in the matrix a peak by comparing it with\nits neighbors in constant time.",
    "start": "733820",
    "end": "740950"
  },
  {
    "text": "We didn't say why it was\nconstant time to do that. But now you kind of know. If those things are\nall words and you",
    "start": "740950",
    "end": "746160"
  },
  {
    "text": "can manipulate a constant number\nof words in constant time, you can tell whether a number\nis a peak in constant time.",
    "start": "746160",
    "end": "751680"
  },
  {
    "text": "Some things like w should be at\nleast log the size of memory.",
    "start": "751680",
    "end": "757930"
  },
  {
    "text": " Because my word should\nbe able to specify",
    "start": "757930",
    "end": "763569"
  },
  {
    "text": "an index into this array. And we might use that someday. But basically, don't\nworry about it.",
    "start": "763570",
    "end": "769730"
  },
  {
    "text": "Words are words. Words come in as inputs. You can manipulate\nthem and you don't have to worry about\nit for the most part.",
    "start": "769730",
    "end": "778240"
  },
  {
    "text": "In unit four of\nthis class, we're going to talk about, what if we\nhave really giant integers that don't fit in a word?",
    "start": "778240",
    "end": "783987"
  },
  {
    "text": "How do we manipulate them? How do we add them,\nmultiply them? So that's another topic. But most of this\nclass, we'll just",
    "start": "783987",
    "end": "790620"
  },
  {
    "text": "assume everything we're\ngiven is one word. And it's easy to compute on.",
    "start": "790620",
    "end": "796890"
  },
  {
    "text": "So this is a realistic\nmodel, more or less. And it's a powerful one. But a lot of the\ntime, a lot of code",
    "start": "796890",
    "end": "805230"
  },
  {
    "start": "797000",
    "end": "1067000"
  },
  {
    "text": "just doesn't use\narrays-- doesn't need it. Sometimes we need arrays,\nsometimes we don't.",
    "start": "805230",
    "end": "810540"
  },
  {
    "text": "Sometimes you feel like a\nnut, sometimes you don't. So it's useful to think about\nsomewhat more abstract models",
    "start": "810540",
    "end": "818105"
  },
  {
    "text": "that are not quite as\npowerful but offer a simpler way of thinking about things.",
    "start": "818105",
    "end": "824360"
  },
  {
    "text": "For example, in\nthis model there's no dynamic memory allocation. You probably know you could\nimplement dynamic memory",
    "start": "824360",
    "end": "830050"
  },
  {
    "text": "allocation because\nreal computers do it. But it's nice to\nthink about a model where that's taken\ncare of for you.",
    "start": "830050",
    "end": "836620"
  },
  {
    "text": "It's kind of like a higher\nlevel programming abstraction. So the one is useful in this\nclass is the pointer machine.",
    "start": "836620",
    "end": "843580"
  },
  {
    "text": "This basically corresponds to\nobject oriented programming in a simple, very\nsimple version.",
    "start": "843580",
    "end": "850020"
  },
  {
    "text": "So we have dynamically\nallocated objects. ",
    "start": "850020",
    "end": "861410"
  },
  {
    "text": "And an object has a\nconstant number of fields.",
    "start": "861410",
    "end": "870370"
  },
  {
    "text": " And a field is going to\nbe either a word-- so you",
    "start": "870370",
    "end": "884040"
  },
  {
    "text": "can think of this\nas, for example, storing an integer, one\nof the input objects",
    "start": "884040",
    "end": "889470"
  },
  {
    "text": "or something you computed on it\nor a counter, all these sorts of things-- or a pointer.",
    "start": "889470",
    "end": "897569"
  },
  {
    "text": "And that's where pointer\nmachine gets its name. A pointer is something that\npoints to another object",
    "start": "897570",
    "end": "909310"
  },
  {
    "text": "or has a special value\nnull, also known as nil,",
    "start": "909310",
    "end": "914470"
  },
  {
    "text": "also known as none in Python. ",
    "start": "914470",
    "end": "920430"
  },
  {
    "text": "OK, how many people have\nheard about pointers before? Who hasn't?",
    "start": "920430",
    "end": "925497"
  },
  {
    "text": "Willing to admit it? OK, only a few. That's good. You should have seen pointers. You may have heard\nthem called references.",
    "start": "925497",
    "end": "931080"
  },
  {
    "text": "Modern languages these days\ndon't call them pointers because pointers are scary. But there's a very subtle\ndifference between them.",
    "start": "931080",
    "end": "938390"
  },
  {
    "text": "And this model actually\nreally is references. But for whatever reason, it's\ncalled a pointer machine. It doesn't matter.",
    "start": "938390",
    "end": "945350"
  },
  {
    "text": "The point is, you've\nseem linked lists I hope. And linked lists have a\nbunch of fields in each node.",
    "start": "945350",
    "end": "954240"
  },
  {
    "text": "Maybe you've got a pointer\nto the previous element, a pointer to the next\nelement, and some value.",
    "start": "954240",
    "end": "960820"
  },
  {
    "text": "So here's a very\nsimple linked list. This is what you'd call a\ndoubly linked list because it",
    "start": "960820",
    "end": "967050"
  },
  {
    "text": "has previous and next pointers. So the next pointer\npoints to this node.",
    "start": "967050",
    "end": "972390"
  },
  {
    "text": "The previous pointer\npoints to this node. Next pointer points to null. The previous pointer\npoints to null, let's say.",
    "start": "972390",
    "end": "979940"
  },
  {
    "text": "So that's a two node\ndoubly linked list. You presume we have a pointer\nto the head of the list, maybe a pointer to the\ntail of list, whatever.",
    "start": "979940",
    "end": "986899"
  },
  {
    "text": "So this is a structure\nin the pointer machine. It's a data structure. In Python, you might\ncall this a named tuple,",
    "start": "986900",
    "end": "993790"
  },
  {
    "text": "or it's just an object\nwith three attributes, I guess, they're\ncalled in Python.",
    "start": "993790",
    "end": "1000090"
  },
  {
    "text": "So here we have the value. That's a word like an integer.",
    "start": "1000090",
    "end": "1005450"
  },
  {
    "text": "And then some things\ncan be pointers that point to other nodes. And you can create a new node. You can destroy a node.",
    "start": "1005450",
    "end": "1010720"
  },
  {
    "text": "That's the dynamic\nmemory allocation. In this model, yeah,\npointers are pointers.",
    "start": "1010720",
    "end": "1016920"
  },
  {
    "text": "You can't touch them. Now, you can implement this\nmodel in a random access machine. A pointer becomes an index\ninto this giant table.",
    "start": "1016920",
    "end": "1026069"
  },
  {
    "text": "And that's more like\nthe pointers in C if you've ever\nwritten C programs. Because then you\ncan take a pointer",
    "start": "1026069",
    "end": "1031220"
  },
  {
    "text": "and you can add one to it and\ngo to the next thing after that. In this model, you can\njust follow a pointer. That's all you can do.",
    "start": "1031220",
    "end": "1037057"
  },
  {
    "text": "OK, following a pointer\ncosts constant time. Changing one of these\nfields costs constant time. All the usual things you might\nimagine doing to these objects",
    "start": "1037057",
    "end": "1044929"
  },
  {
    "text": "take constant time. So it's actually a weaker\nmodel than this one. Because you could\nimplement a pointer machine",
    "start": "1044930",
    "end": "1051630"
  },
  {
    "text": "with a random access machine. But it offers a different\nway of thinking. A lot of data structures\nare built this way.",
    "start": "1051630",
    "end": "1057323"
  },
  {
    "text": " Cool. ",
    "start": "1057323",
    "end": "1062769"
  },
  {
    "text": "So that's the theory side. What I'd like to talk about\nnext is actually in Python,",
    "start": "1062770",
    "end": "1069510"
  },
  {
    "start": "1067000",
    "end": "1397000"
  },
  {
    "text": "what's a reasonable\nmodel of what's going on? So these are old models.",
    "start": "1069510",
    "end": "1075160"
  },
  {
    "text": "This goes back to the '80s. This one probably '80s or '70s. So they've been\naround a long time.",
    "start": "1075160",
    "end": "1080770"
  },
  {
    "text": "People have used them forever. Python is obviously much\nmore recent, at least modern versions of Python.",
    "start": "1080770",
    "end": "1085955"
  },
  {
    "start": "1085955",
    "end": "1091450"
  },
  {
    "text": "And it's the model of\ncomputation in some sense that we use in this class. Because we're implementing\neverything in Python.",
    "start": "1091450",
    "end": "1098200"
  },
  {
    "text": "And Python offers both a random\naccess machine perspective because it has arrays, and\nit offers a pointer machine",
    "start": "1098200",
    "end": "1104429"
  },
  {
    "text": "perspective because\nit has references, because it has pointers. So you can do either one.",
    "start": "1104430",
    "end": "1111150"
  },
  {
    "text": "But it also has a\nlot of operations. It doesn't just have load\nand store and follow pointer.",
    "start": "1111150",
    "end": "1118180"
  },
  {
    "text": "It's got things\nlike sort and append and concatenation of two\nlists and lots of things.",
    "start": "1118180",
    "end": "1126590"
  },
  {
    "text": "And each of those has a\ncost associated with them. So whereas the random access\nmachine and pointer machine, they're theoretical models.",
    "start": "1126590",
    "end": "1132115"
  },
  {
    "text": "They're designed\nto be super simple. So it's clear that everything\nyou do takes constant time.",
    "start": "1132115",
    "end": "1138230"
  },
  {
    "text": "In Python, some of the\noperations you can do take a lot of time. Some of the operations in Python\ntake exponential time to do.",
    "start": "1138230",
    "end": "1145734"
  },
  {
    "text": "And you've got to know when\nyou're writing your algorithms down either thinking in a Python\nmodel or your implementing",
    "start": "1145734",
    "end": "1151260"
  },
  {
    "text": "your algorithms\nin actual Python, which operations are\nfast and which are slow. And that's what I'd like to\nspend the next few minutes on.",
    "start": "1151260",
    "end": "1159704"
  },
  {
    "text": "There's a lot of operations. I'm not going to\ncover all of them. But we'll cover\nmore in recitation.",
    "start": "1159704",
    "end": "1167280"
  },
  {
    "text": "And there's a whole\nbunch in my notes. I won't get to all of them. So in Python, you can do\nrandom access style things.",
    "start": "1167280",
    "end": "1176140"
  },
  {
    "text": "In Python, arrays\nare called lists, which is super confusing. But there you go.",
    "start": "1176140",
    "end": "1182240"
  },
  {
    "text": "A list in Python is an\narray in real world.",
    "start": "1182240",
    "end": "1188110"
  },
  {
    "text": "It's a super cool\narray, of course? And you can think\nof it as a list. But in terms implementation,\nit's implemented as an array.",
    "start": "1188110",
    "end": "1195460"
  },
  {
    "text": "Question? AUDIENCE: I thought\nthat [INAUDIBLE]. PROFESSOR: You thought Python\nlinks lists were linked lists.",
    "start": "1195460",
    "end": "1201160"
  },
  {
    "text": "That's why it's so confusing. In fact, they are not. In, say, scheme, back in the\ndays when we taught scheme,",
    "start": "1201160",
    "end": "1207630"
  },
  {
    "text": "lists are linked lists. And it's very different. So when you do-- I'll\ngive an operation here.",
    "start": "1207630",
    "end": "1214529"
  },
  {
    "text": "You have a list L, and you\ndo something like this. ",
    "start": "1214530",
    "end": "1221179"
  },
  {
    "text": "L is a list object. This takes constant time. In a linked list, it\nwould take linear time.",
    "start": "1221180",
    "end": "1227480"
  },
  {
    "text": "Because we've got a scan to\nposition I, scan to position J, add 5, and store.",
    "start": "1227480",
    "end": "1233000"
  },
  {
    "text": "But conveniently in Python,\nthis takes constant time.",
    "start": "1233000",
    "end": "1238030"
  },
  {
    "text": "And that's important to know. I know that the terminology\nis super confusing. But blame the benevolent\ndictator for life.",
    "start": "1238030",
    "end": "1249139"
  },
  {
    "text": "On the other hand, you can do\nstyle two, pointer machine,",
    "start": "1249140",
    "end": "1255580"
  },
  {
    "text": "using object oriented\nprogramming, obviously. ",
    "start": "1255580",
    "end": "1261120"
  },
  {
    "text": "I'll just mention\nthat I'm not really worrying about methods here.",
    "start": "1261120",
    "end": "1267529"
  },
  {
    "text": "Because methods are just sort of\na way of thinking about things, not super important\nfrom a cost standpoint.",
    "start": "1267530",
    "end": "1274870"
  },
  {
    "text": "If your object has a constant\nnumber of attributes-- it can't have like\na million attributes or can't have n\nexecutes-- then it",
    "start": "1274870",
    "end": "1281250"
  },
  {
    "text": "fits into this\npointer machine model. So if you have an\nobject that only has like three things or\n10 things or whatever,",
    "start": "1281250",
    "end": "1287079"
  },
  {
    "text": "that's a pointer machine. You can think of\nmanipulating that object as taking constant time. If you are screwing around\nthe object's dictionary",
    "start": "1287079",
    "end": "1293955"
  },
  {
    "text": "and doing lots of\ncrazy things, then you have to be careful about\nwhether this remains true. But as long as you only\nhave a reasonable number",
    "start": "1293955",
    "end": "1300460"
  },
  {
    "text": "of attributes, this\nis all fair game. And so if you do something like,\nif you're implementing a linked",
    "start": "1300460",
    "end": "1306549"
  },
  {
    "text": "list, Python I\nchecked still does not have built-in linked lists. They're pretty easy\nto build, though. You have a pointer.",
    "start": "1306550",
    "end": "1312420"
  },
  {
    "text": "And you just say\nx equals x.next. That takes constant time\nbecause accessing this field",
    "start": "1312420",
    "end": "1318700"
  },
  {
    "text": "in an object of constant\nsize takes constant time. And we don't care what\nthese constants are.",
    "start": "1318700",
    "end": "1324110"
  },
  {
    "text": "That's the beauty of algorithms. Because we only care\nabout scalability with n. There's no n here.",
    "start": "1324110",
    "end": "1329149"
  },
  {
    "text": "This takes constant time. This takes constant time. No matter how big\nyour linked list",
    "start": "1329150",
    "end": "1334530"
  },
  {
    "text": "is or no matter how\nmany objects you have, these are constant time. OK, let's do some\nharder ones, though.",
    "start": "1334530",
    "end": "1341760"
  },
  {
    "text": "In general, the\nidea is, if you take an operation like L.append--\nso you have a list.",
    "start": "1341760",
    "end": "1349160"
  },
  {
    "text": "And you want to append\nsome item to the list. It's an array, though. So think about it.",
    "start": "1349160",
    "end": "1355789"
  },
  {
    "text": "The way to figure out\nhow much does this cost is to think about\nhow it's implemented in terms of these\nbasic operations.",
    "start": "1355790",
    "end": "1362750"
  },
  {
    "text": "So these are your sort of\nthe core concept time things. Most everything can be reduced\nto thinking about this.",
    "start": "1362750",
    "end": "1370320"
  },
  {
    "text": "But sometimes,\nit's less obvious. L.apend is a little\ntricky to think about.",
    "start": "1370320",
    "end": "1375517"
  },
  {
    "text": "Because basically, you\nhave an array of some size. And now you want to make\nan array one larger. And the obvious way to do that\nis to allocate a new array",
    "start": "1375517",
    "end": "1382625"
  },
  {
    "text": "and copy all the elements. That would take linear time. Python doesn't do that. What does it do?",
    "start": "1382625",
    "end": "1389910"
  },
  {
    "text": "Stay tuned for lecture eight.  It does something\ncalled table doubling.",
    "start": "1389910",
    "end": "1397140"
  },
  {
    "start": "1397000",
    "end": "1990000"
  },
  {
    "text": "It's a very simple idea. You can almost get\nguess it from the title. And if you go to lecture--\nis it eight or nine?",
    "start": "1397140",
    "end": "1403946"
  },
  {
    "text": "Nine, sorry. You'll see how\nthis can basically be done in constant time.",
    "start": "1403946",
    "end": "1410820"
  },
  {
    "text": "There's a slight catch,\nbut basically, think of it as a constant time operation.",
    "start": "1410820",
    "end": "1416280"
  },
  {
    "text": "Once we have that,\nand so this is why you should take\nthis class so you'll understand how Python works.",
    "start": "1416280",
    "end": "1421920"
  },
  {
    "text": "This is using an algorithmic\nconcept that was invented, I don't know, decades\nago, but is a simple thing",
    "start": "1421920",
    "end": "1427179"
  },
  {
    "text": "that we need to do to solve\nlots of other problems. So it's cool. There's a lot of features in\nPython that use algorithms.",
    "start": "1427180",
    "end": "1433800"
  },
  {
    "text": "And that's kind of\nwhy I'm telling you. All right, so let's\ndo another one. A little easier.",
    "start": "1433800",
    "end": "1439210"
  },
  {
    "text": "What if I want to\nconcatenate two lists? You should know in Python this\nis a non-destructive operation. You basically take a copy of\nL1 and L2 and concatenate them.",
    "start": "1439210",
    "end": "1447440"
  },
  {
    "text": "Of course, they're arrays. The way to think about\nthis is to re-implement it as Python code. This is the same\nthing as saying, well,",
    "start": "1447440",
    "end": "1454630"
  },
  {
    "text": "L is initially empty. And then for every item\nx and L1, L.append(x).",
    "start": "1454630",
    "end": "1461250"
  },
  {
    "text": " And a lot of the times in\ndocumentation for Python,",
    "start": "1461250",
    "end": "1467300"
  },
  {
    "text": "you see this sort of here's\nwhat it means, especially in the fancier features.",
    "start": "1467300",
    "end": "1473519"
  },
  {
    "text": "They give sort of an equivalent\nsimple Python, if you will.",
    "start": "1473520",
    "end": "1478879"
  },
  {
    "text": "This doesn't use\nany fancy operations that we haven't seen already. So now we know this\ntakes constant time.",
    "start": "1478879",
    "end": "1485050"
  },
  {
    "text": "The append, this append,\ntakes constant time. And so the amount of\ntime here is basically order the length of L1.",
    "start": "1485050",
    "end": "1493230"
  },
  {
    "text": "And the time here is\norder the length of L2. And so in total,\nit's order-- I'm",
    "start": "1493230",
    "end": "1499140"
  },
  {
    "text": "going to be careful and\nsay 1 plus length of L1 plus length of L2.",
    "start": "1499140",
    "end": "1506159"
  },
  {
    "text": "The 1 plus is just in\ncase these are both 0. It still takes constant time\nto build an initial list.",
    "start": "1506160",
    "end": "1511960"
  },
  {
    "text": "OK, so there are a\nbunch of operations that are written in these notes. I'm not going to go\nthrough all of them",
    "start": "1511960",
    "end": "1517830"
  },
  {
    "text": "because they're tedious. But a lot of you, could just\nexpand out code like this. And it's very easy to analyze.",
    "start": "1517830",
    "end": "1523830"
  },
  {
    "text": "Whereas you just\nlook at plus, you think, oh, plus\nis constant time. And plus is constant\ntime if this is a word and this is a word.",
    "start": "1523830",
    "end": "1529450"
  },
  {
    "text": "But these are entire\ndata structures. And so it's not constant time.",
    "start": "1529450",
    "end": "1534480"
  },
  {
    "text": "All right. There are more subtle\nfun ones to think about. Like, if I want to know is x in\nthe list, how does that happen?",
    "start": "1534480",
    "end": "1543540"
  },
  {
    "text": "Any guesses? There's an operator\nin Python called in-- x in L. How long\ndo you think this takes?",
    "start": "1543540",
    "end": "1551670"
  },
  {
    "text": " Altogether?",
    "start": "1551670",
    "end": "1556769"
  },
  {
    "text": "Linear, yeah. Linear time. In the worst case,\nyou're going to have to scan through the whole list.",
    "start": "1556770",
    "end": "1562090"
  },
  {
    "text": "Lists aren't necessarily sorted. We don't know\nanything about them. So you've got to just\nscan through and test for every item.",
    "start": "1562090",
    "end": "1567290"
  },
  {
    "text": "Is x equal to that item? And it's even worse if\nequal equals costs a lot. So if x is some really\ncomplicated thing,",
    "start": "1567290",
    "end": "1573720"
  },
  {
    "text": "you have to take\nthat into account. OK, blah, blah, blah. OK, another fun one.",
    "start": "1573720",
    "end": "1579250"
  },
  {
    "text": "This is like a pop quiz. How long's it take to\ncompute the length of a list?",
    "start": "1579250",
    "end": "1585660"
  },
  {
    "text": "Constant. Yeah, luckily, if you\ndidn't know anything, you'd have to scan through\nthe list and count the items.",
    "start": "1585660",
    "end": "1591530"
  },
  {
    "text": "But in Python, lists\nare implemented with a counter built in. It always stores the\nlist at the beginning--",
    "start": "1591530",
    "end": "1597270"
  },
  {
    "text": "stores the length of the\nlist at the beginning. So you just look it up. This is instantaneous.",
    "start": "1597270",
    "end": "1602300"
  },
  {
    "text": "It's important, though. That can matter. All right.",
    "start": "1602300",
    "end": "1607920"
  },
  {
    "text": "Let's do some more. ",
    "start": "1607920",
    "end": "1618900"
  },
  {
    "text": "What if I want to sort a list? How long does that take? ",
    "start": "1618900",
    "end": "1626580"
  },
  {
    "text": "N log n where n is the\nlength of the list.",
    "start": "1626580",
    "end": "1633799"
  },
  {
    "text": "Technically times the time\nto compare two items, which",
    "start": "1633800",
    "end": "1640450"
  },
  {
    "text": "usually we're just\nsorting words. And so this is constant time.",
    "start": "1640450",
    "end": "1645850"
  },
  {
    "text": "If you look at Python\nsorting algorithm, it uses a comparison sort. This is the topic of lectures\nthree and four and seven.",
    "start": "1645850",
    "end": "1655260"
  },
  {
    "text": "But in particular,\nthe very next lecture, we will see how this is\ndone in n log n time.",
    "start": "1655260",
    "end": "1661670"
  },
  {
    "text": "And that is using algorithms. All right, let's\ngo to dictionaries.",
    "start": "1661670",
    "end": "1672210"
  },
  {
    "text": "Python called dicts. And these let you do things.",
    "start": "1672210",
    "end": "1677600"
  },
  {
    "text": "They're a generalization\nof lists in some sense. Instead of putting just an\nindex here, an integer between 0",
    "start": "1677600",
    "end": "1683130"
  },
  {
    "text": "and the length minus 1, you\ncan put an arbitrary key and store a value, for example.",
    "start": "1683130",
    "end": "1688250"
  },
  {
    "text": "How long does this take? I'm not going to ask you\nbecause, it's not obvious. In fact, this is one of the\nmost important data structures",
    "start": "1688250",
    "end": "1696860"
  },
  {
    "text": "in all of computer science. It's called a hash table. And it is the topic of\nlectures eight through 10.",
    "start": "1696860",
    "end": "1705270"
  },
  {
    "text": "So stay tuned for how to\ndo this in constant time, how to be able to\nstore an arbitrary key, get it back out\nin constant time.",
    "start": "1705270",
    "end": "1712120"
  },
  {
    "text": "This is assuming the\nkey is a single word. Yeah. AUDIENCE: Does it first check to\nsee whether the key is already",
    "start": "1712120",
    "end": "1718245"
  },
  {
    "text": "in the dictionary? PROFESSOR: Yeah, it will\nclobber any existing key. There's also, you\nknow, you can test",
    "start": "1718245",
    "end": "1724731"
  },
  {
    "text": "whether a key is\nin the dictionary. That also takes constant time. You can delete something\nfrom the dictionary.",
    "start": "1724732",
    "end": "1729800"
  },
  {
    "text": "All the usual-- dealing with\na single key in dictionaries, obviously dictionary.update,\nthat involves a lot of keys.",
    "start": "1729800",
    "end": "1736510"
  },
  {
    "text": "That doesn't take some time. How long does it take? Well, you write out a\nfor loop and count them. AUDIENCE: But how can you\nsee whether [INAUDIBLE]",
    "start": "1736510",
    "end": "1742794"
  },
  {
    "text": "dictionary in constant time? PROFESSOR: How do you do\nthis in constant time? Come to lecture\neight through 10.",
    "start": "1742795",
    "end": "1748220"
  },
  {
    "text": "I should say a\nslight catch, which is this is constant time\nwith high probability.",
    "start": "1748220",
    "end": "1753480"
  },
  {
    "text": "It's a randomized algorithm. It doesn't always\ntake constant time. It's always correct.",
    "start": "1753480",
    "end": "1758570"
  },
  {
    "text": "But sometimes, very rarely,\nit takes a little more than constant time. And I'm going to\nabbreviate this WHP.",
    "start": "1758570",
    "end": "1766170"
  },
  {
    "text": "And we'll see more what\nthat means mostly, actually, in 6046. But we'll see a fair amount\nin 6006 on how this works",
    "start": "1766170",
    "end": "1773434"
  },
  {
    "text": "and how it's possible. It's a big area of research. A lot of people work on hashing. It's very cool and\nit's super useful.",
    "start": "1773434",
    "end": "1779120"
  },
  {
    "text": "If you write any code these\ndays, you use a dictionary. It's the way to solve problems.",
    "start": "1779120",
    "end": "1785470"
  },
  {
    "text": "I'm basically using\nPython is a platform to advertise the rest of the\nclass you may have noticed.",
    "start": "1785470",
    "end": "1790840"
  },
  {
    "text": "Not every topic we cover in\nthis class is already in Python, but a lot of them are. So we've got table doubling.",
    "start": "1790840",
    "end": "1798210"
  },
  {
    "text": "We've got dictionaries. We've got sorting.",
    "start": "1798210",
    "end": "1804460"
  },
  {
    "text": "Another one is longs, which\nare long integers in Python through version two.",
    "start": "1804460",
    "end": "1811990"
  },
  {
    "text": "And this is the\ntopic of lecture 11.",
    "start": "1811990",
    "end": "1817850"
  },
  {
    "text": "And so for fun, if I have\ntwo integers x and y, and let's say one of them\nis this many words long",
    "start": "1817850",
    "end": "1824610"
  },
  {
    "text": "and the other one is\nthis many words long, how long do you think\nit takes to add them? ",
    "start": "1824610",
    "end": "1833290"
  },
  {
    "text": "Guesses?  AUDIENCE: [INAUDIBLE].",
    "start": "1833290",
    "end": "1840020"
  },
  {
    "text": "PROFESSOR: Plus? Times? Plus is the answer. You can do it in that much time.",
    "start": "1840020",
    "end": "1845160"
  },
  {
    "text": " If you think about the\ngrade school algorithm for adding really big\nmulti-digit numbers,",
    "start": "1845160",
    "end": "1853030"
  },
  {
    "text": "it'll only take that much time. Multiplication is a\nlittle bit harder, though. If you look at the\ngrade school algorithm,",
    "start": "1853030",
    "end": "1858520"
  },
  {
    "text": "it's going to be x times y--\nit's quadratic time not so good. The algorithm that's\nimplemented in Python",
    "start": "1858520",
    "end": "1865600"
  },
  {
    "text": "is x plus y to the\nlog base 2 of 3.",
    "start": "1865600",
    "end": "1871870"
  },
  {
    "text": "By the way, I always write\nLG to mean log base 2.",
    "start": "1871870",
    "end": "1876880"
  },
  {
    "text": "Because it only has two\nletters, so OK, this is 2. Log base 2 of 3 is about 1.6.",
    "start": "1876880",
    "end": "1884710"
  },
  {
    "text": "So while the straightforward\nalgorithm is basically x plus y squared, this one\nis x plus y to the 1.6 power,",
    "start": "1884710",
    "end": "1891410"
  },
  {
    "text": "a little better than quadratic. And the Python developers\nfound that was faster",
    "start": "1891410",
    "end": "1897680"
  },
  {
    "text": "than grade school\nmultiplication. And so that's what\nthey implemented. And that is something we\nwill cover in lecture 11, how to do that.",
    "start": "1897680",
    "end": "1903240"
  },
  {
    "text": "It's pretty cool. There are faster\nalgorithms, but this is one that works\nquite practically.",
    "start": "1903240",
    "end": "1910430"
  },
  {
    "text": "One more. Heap queue, this is in the\nPython standard library",
    "start": "1910430",
    "end": "1915451"
  },
  {
    "text": "and implements something\ncalled the heap, which will be in lecture four. So, coming soon to a\nclassroom near you.",
    "start": "1915452",
    "end": "1922780"
  },
  {
    "text": "All right, enough advertisement. That gives you some idea of\nthe model of computation. There's a whole bunch more in\nthese notes which are online.",
    "start": "1922780",
    "end": "1931330"
  },
  {
    "text": "Go check them out. And some of them, we'll\ncover in recitation tomorrow.",
    "start": "1931330",
    "end": "1937354"
  },
  {
    "text": "I'd like to-- now that we are\nsort of comfortable for what costs what in Python, I\nwant to do a real example.",
    "start": "1937354",
    "end": "1943350"
  },
  {
    "text": "So last time, we\ndid peak finding. We're going to have\nanother example which is called document distance.",
    "start": "1943350",
    "end": "1951400"
  },
  {
    "text": "So let's do that.  Any questions before we go on?",
    "start": "1951400",
    "end": "1956770"
  },
  {
    "text": " All right. ",
    "start": "1956770",
    "end": "1990960"
  },
  {
    "start": "1990000",
    "end": "2357000"
  },
  {
    "text": "So document distance problem\nis, I give you two documents. I'll call them D1 D2.",
    "start": "1990960",
    "end": "1999049"
  },
  {
    "text": "And I want to compute the\ndistance between them. And the first question\nis, what does that mean?",
    "start": "1999050",
    "end": "2005150"
  },
  {
    "text": "What is this distance function? Let me first tell\nyou some motivations for computing document distance.",
    "start": "2005150",
    "end": "2012010"
  },
  {
    "text": "Let's say you're\nGoogle and you're cataloging the entire web.",
    "start": "2012010",
    "end": "2017130"
  },
  {
    "text": "You'd like to know when two web\npages are basically identical. Because then you store less\nand because you present it",
    "start": "2017130",
    "end": "2023991"
  },
  {
    "text": "differently to the user. You say, well,\nthere's this page. And there's lots\nof extra copies. But you just need--\nhere's the canonical one.",
    "start": "2023991",
    "end": "2031470"
  },
  {
    "text": "Or you're Wikipedia. And I don't know if you've\never looked at Wikipedia. There's a list of all\nmirrors of Wikipedia.",
    "start": "2031470",
    "end": "2036771"
  },
  {
    "text": "There's like millions of them. And they find them by hand. But you could do that\nusing document distance.",
    "start": "2036771",
    "end": "2044160"
  },
  {
    "text": "Say, are these\nbasically identical other than like some\nstuff at the-- junk at the beginning or the end?",
    "start": "2044160",
    "end": "2050116"
  },
  {
    "text": "Or if you're teaching this\nclass and you want to detect, are two problem sets cheating? Are they identical?",
    "start": "2050116",
    "end": "2055290"
  },
  {
    "text": "We do this a lot. I'm not going to tell you\nwhat distance function we use. Because that would\ndefeat the point. It's not the one\nwe cover in class.",
    "start": "2055290",
    "end": "2061919"
  },
  {
    "text": "But we use automated tests\nfor whether you're cheating. I've got some more.",
    "start": "2061920",
    "end": "2069250"
  },
  {
    "text": "Web search. Let's say you're Google again. And you want to\nimplement searching.",
    "start": "2069250",
    "end": "2075138"
  },
  {
    "text": "Like, I give you three words. I'm searching for\nintroduction to algorithms.",
    "start": "2075139",
    "end": "2080489"
  },
  {
    "text": "You can think of\nintroduction to algorithms as a very short document. And you want to test\nwhether that document is",
    "start": "2080489",
    "end": "2085980"
  },
  {
    "text": "similar to all the other\ndocuments on the web. And the one that's most\nsimilar, the one that has the small\ndistance, that's maybe",
    "start": "2085980",
    "end": "2091820"
  },
  {
    "text": "what you want to put at the top. That's obviously not\nwhat Google does. But it's part of what it does.",
    "start": "2091820",
    "end": "2096969"
  },
  {
    "text": "So that's why you might care. It's partly also\njust a toy problem. It lets us illustrate\na lot of the techniques",
    "start": "2096969",
    "end": "2103720"
  },
  {
    "text": "that we develop in this class. All right, I'm going\nto think of a document",
    "start": "2103720",
    "end": "2112280"
  },
  {
    "text": "as a sequence of words.  Just to be a little\nbit more formal,",
    "start": "2112280",
    "end": "2119410"
  },
  {
    "text": "what do I mean by document? And a word is just\ngoing to be a string",
    "start": "2119410",
    "end": "2126150"
  },
  {
    "text": "of alphanumeric\ncharacters-- A through Z and zero through nine. ",
    "start": "2126150",
    "end": "2135180"
  },
  {
    "text": "OK, so if I have a\ndocument which you also think of as a string\nand you basically delete all the white space and\npunctuation all the other junk",
    "start": "2135180",
    "end": "2142040"
  },
  {
    "text": "that's in there. This Everything in between\nthose, those are the words. That's a simple definition\nof decomposing documents",
    "start": "2142040",
    "end": "2149630"
  },
  {
    "text": "into words. And now we can think\nof about what-- I want to know whether\nD1 and D2 are similar.",
    "start": "2149630",
    "end": "2155340"
  },
  {
    "text": "And I've thought\nabout my document as a collection of words. Maybe they're similar if they\nshare a lot of words in common.",
    "start": "2155340",
    "end": "2162540"
  },
  {
    "text": "So that's the idea. Look at shared words\nand use that to define",
    "start": "2162540",
    "end": "2171549"
  },
  {
    "text": "document distance. This is obviously only one\nway to define distance. It'll be the way we\ndo it in this class. But there are lots of\nother possibilities.",
    "start": "2171550",
    "end": "2180730"
  },
  {
    "text": "So I'm going to\nthink of a document.",
    "start": "2180730",
    "end": "2187810"
  },
  {
    "text": "It's a sequence of words. But I could also think\nof it as a vector. ",
    "start": "2187810",
    "end": "2195090"
  },
  {
    "text": "So if I have a document D and\nI have a word W, this D of W",
    "start": "2195090",
    "end": "2201330"
  },
  {
    "text": "is going to be the\nnumber of times that word occurs\nin the document.",
    "start": "2201330",
    "end": "2207160"
  },
  {
    "text": "So, number of recurrences\nW in the document D.",
    "start": "2207160",
    "end": "2212260"
  },
  {
    "text": "So it's a number. It's an integer. Non-negative integer. Could be 0.",
    "start": "2212260",
    "end": "2217599"
  },
  {
    "text": "Could be one. Could be a million. I think of this\nas a giant vector.",
    "start": "2217599",
    "end": "2223210"
  },
  {
    "text": "A vector is indexed\nby all words. And for each of them,\nthere's some frequency.",
    "start": "2223210",
    "end": "2230110"
  },
  {
    "text": "Of lot of them are zero. And then some of them have some\npositive number occurrences.",
    "start": "2230110",
    "end": "2236106"
  },
  {
    "text": "You could think\nof every document is as being one of these\nplots in this common axis.",
    "start": "2236106",
    "end": "2242354"
  },
  {
    "text": "There's infinitely\nmany words down here. So it's kind of a big axis. But it's one way to\ndraw the picture.",
    "start": "2242354",
    "end": "2247599"
  },
  {
    "text": "OK, so for example, take two\nvery important documents.",
    "start": "2247600",
    "end": "2256420"
  },
  {
    "text": "Everybody likes cats and dogs. So these are two word documents.",
    "start": "2256420",
    "end": "2261510"
  },
  {
    "text": "And so we can draw them. Because there's only three\ndifferent words here, we can draw them in\nthree dimensional space.",
    "start": "2261510",
    "end": "2267443"
  },
  {
    "text": "Beyond that, it's a\nlittle hard to draw. So we have, let's say,\nwhich one's the-- let's say",
    "start": "2267444",
    "end": "2273010"
  },
  {
    "text": "this one's the-- makes\nit easier to draw. So there's going to be\njust zero here and one.",
    "start": "2273010",
    "end": "2280350"
  },
  {
    "text": "For each of the axes, let's say\nthis is dog and this is cat.",
    "start": "2280350",
    "end": "2286310"
  },
  {
    "text": "OK, so the cat has won the--\nit has one cat and no dog. So it's here.",
    "start": "2286310",
    "end": "2292170"
  },
  {
    "text": "It's a vector\npointing out there. The dog you've got\nbasically pointing there.",
    "start": "2292170",
    "end": "2300992"
  },
  {
    "text": "OK, so these are two vectors.  So how do I measure how\ndifferent two vectors are?",
    "start": "2300992",
    "end": "2307640"
  },
  {
    "text": "Any suggestions from\nvector calculus? ",
    "start": "2307640",
    "end": "2313864"
  },
  {
    "text": "AUDIENCE: Inner product? PROFESSOR: Inner product? Yeah, that's good suggestion. Any others.",
    "start": "2313864",
    "end": "2321550"
  },
  {
    "text": "OK, we'll go with inner product. I like inner product,\nalso known as dot product.",
    "start": "2321550",
    "end": "2328589"
  },
  {
    "text": "Just define that quickly. ",
    "start": "2328589",
    "end": "2336779"
  },
  {
    "text": "So we could-- I'm going\nto call this D prime because it's not what\nwe're going to end up with.",
    "start": "2336780",
    "end": "2342360"
  },
  {
    "text": "We could think of this as\nthe dot product of D1 and D2, also known as the sum over all\nwords of D1 of W times D2 of W.",
    "start": "2342360",
    "end": "2357380"
  },
  {
    "start": "2357000",
    "end": "2597000"
  },
  {
    "text": "So for example, you take the\ndot product of these two guys. Those match. So you get one point there,\ncat and dog multiplied by zero.",
    "start": "2357380",
    "end": "2367940"
  },
  {
    "text": "So you don't get much there. So this is some\nmeasure of distance.",
    "start": "2367940",
    "end": "2373410"
  },
  {
    "text": "But it's a measure of,\nactually, of commonality. So it would be sort of\ninverse distance, sorry.",
    "start": "2373410",
    "end": "2381160"
  },
  {
    "text": "If you have a high\ndot product, you have a lot of things in common. Because a lot of these\nthings didn't be--",
    "start": "2381160",
    "end": "2386210"
  },
  {
    "text": "wasn't zero times something. It's actually a positive number\ntimes some positive number. If you have a lot of shared\nwords, than that looks good.",
    "start": "2386210",
    "end": "2393197"
  },
  {
    "text": "The trouble of this is if\nI have a long document-- say, a million words--\nand it's 99% in common",
    "start": "2393197",
    "end": "2399210"
  },
  {
    "text": "with another document\nthat's a million words long, it's still-- it\nlooks super similar.",
    "start": "2399210",
    "end": "2406310"
  },
  {
    "text": "Actually, I need to do\nit the other way around. Let's say it's a million words\nlong and half of the words",
    "start": "2406310",
    "end": "2412267"
  },
  {
    "text": "are in common. So not that many,\nbut a fair number. Then I have a score\nof like 500,000.",
    "start": "2412267",
    "end": "2418479"
  },
  {
    "text": "And then I have two documents\nwhich are, say, 100 words long. And they're identical. Their score is maybe only 100.",
    "start": "2418479",
    "end": "2425670"
  },
  {
    "text": "So even though\nthey're identical, it's not quite scale invariant. So it's not quite\na perfect measure.",
    "start": "2425670",
    "end": "2431630"
  },
  {
    "text": "Any suggestions for\nhow to fix this? This, I think, is\na little trickier. Yeah? AUDIENCE: Divide by the\nlength of the vectors?",
    "start": "2431630",
    "end": "2437639"
  },
  {
    "text": "PROFESSOR: Divide by the\nlength of the vectors. I think that's worth a pillow. Haven't done any pillows yet.",
    "start": "2437639",
    "end": "2443280"
  },
  {
    "text": "Sorry about that. So, divide by the\nlength of vector. That's good.",
    "start": "2443280",
    "end": "2449447"
  },
  {
    "text": "I'm going to call\nthis D double prime. Still not quite\nthe right answer. Or not-- no, it's pretty good.",
    "start": "2449447",
    "end": "2456240"
  },
  {
    "text": "It's pretty good. So here, the length\nof the vectors is the number of\nwords that occur",
    "start": "2456240",
    "end": "2462030"
  },
  {
    "text": "in them This is pretty cool. But does anyone\nrecognize this formula?",
    "start": "2462030",
    "end": "2470610"
  },
  {
    "text": "Angle, yeah. It's a lot like the angle\nbetween the two vectors. It's just off by an arc cos.",
    "start": "2470610",
    "end": "2478670"
  },
  {
    "text": "This is the cosine of the\nangle between the two vectors. And I'm a geometer. I like geometry. So if you take arc\ncos of that thing,",
    "start": "2478670",
    "end": "2485110"
  },
  {
    "text": "that's a well established\ndistance metric. This goes back to '75,\nif you can believe it,",
    "start": "2485110",
    "end": "2492210"
  },
  {
    "text": "back when people-- early\ndays of document, information retrieval, way before\nthe web, people",
    "start": "2492210",
    "end": "2497585"
  },
  {
    "text": "were still working\non this stuff. So it's a natural measure of the\nangle between the two vectors.",
    "start": "2497585",
    "end": "2503990"
  },
  {
    "text": "If it's 0, they're\nbasically identical. If it's 90 degrees, they're\nreally, really different.",
    "start": "2503990",
    "end": "2509670"
  },
  {
    "text": "And so that gives you a nice way\nto compute document distance. The question is, how do we\nactually compute that measure?",
    "start": "2509670",
    "end": "2515670"
  },
  {
    "text": "Now that we've come up with\nsomething that's reasonable, how do I actually\nfind this value? I need to compute these\nvectors-- the number",
    "start": "2515670",
    "end": "2523930"
  },
  {
    "text": "of recurrences of each\nword in the document. And I need you compute\nthe dot product. And then I need to divide.",
    "start": "2523930",
    "end": "2529900"
  },
  {
    "text": "That's really easy. So, dot product--\nand I also need to decompose a document\nto a list of words.",
    "start": "2529900",
    "end": "2535610"
  },
  {
    "text": "So there are three\nthings I need to do. Let me write them down. ",
    "start": "2535610",
    "end": "2550417"
  },
  {
    "text": "So a sort of algorithm. ",
    "start": "2550417",
    "end": "2556580"
  },
  {
    "text": "There's one, split a\ndocument into words.",
    "start": "2556580",
    "end": "2562745"
  },
  {
    "text": " Second is compute\nword frequencies,",
    "start": "2562745",
    "end": "2571039"
  },
  {
    "text": "how many times\neach word appears. This is the document vectors . ",
    "start": "2571040",
    "end": "2578380"
  },
  {
    "text": "And then the third step is\nto compute the dot product. ",
    "start": "2578380",
    "end": "2587124"
  },
  {
    "text": "Let me tell you a little\nbit about how each of those is done. Some of these will be covered\nmore in future lectures.",
    "start": "2587124",
    "end": "2594859"
  },
  {
    "text": "I want to give you an overview. There's a lot of ways to\ndo each of these steps. If you look at the--\nnext to the lecture",
    "start": "2594860",
    "end": "2601900"
  },
  {
    "start": "2597000",
    "end": "2867000"
  },
  {
    "text": "notes for this lecture two,\nthere's a bunch of code and a bunch of data\nexamples of documents--",
    "start": "2601900",
    "end": "2608640"
  },
  {
    "text": "big corpuses of text. And you can run,\nI think, there are eight different\nalgorithms for it.",
    "start": "2608640",
    "end": "2614760"
  },
  {
    "text": "And let me give you--\nactually, why don't I cut to the chase a\nlittle bit and tell you about the run times of these\ndifferent implementations",
    "start": "2614760",
    "end": "2622430"
  },
  {
    "text": "of this same algorithms. There are lots of sort of\nversions of this algorithm. We implement it a whole bunch. Every semester I teach this, I\nchange them a little bit more,",
    "start": "2622430",
    "end": "2629849"
  },
  {
    "text": "add a few more variants. So version one, on\na particular pair",
    "start": "2629850",
    "end": "2635260"
  },
  {
    "text": "of documents which is like a\nmegabyte-- not very much text--",
    "start": "2635260",
    "end": "2640700"
  },
  {
    "text": "it takes 228.1\nseconds-- super slow. Pathetic.",
    "start": "2640700",
    "end": "2646790"
  },
  {
    "text": "Then we do a little bit\nof algorithmic tweaking. We get down to 164 seconds. Then we get to 123 seconds.",
    "start": "2646790",
    "end": "2654740"
  },
  {
    "text": "Then we get down to 71 seconds. Then we get down\nto 18.3 seconds.",
    "start": "2654740",
    "end": "2661460"
  },
  {
    "text": "And then we get to 11.5 seconds. Then we get to 1.8 seconds.",
    "start": "2661460",
    "end": "2668269"
  },
  {
    "text": "Then we get to 0.2 seconds. So factor of 1,000.",
    "start": "2668270",
    "end": "2673630"
  },
  {
    "text": "This is just in Python. 2/10 of a second to\nprocess a megabytes.",
    "start": "2673630",
    "end": "2678730"
  },
  {
    "text": "It's all right. It's getting reasonable. This is not so reasonable. Some of these improvements\nare algorithmic.",
    "start": "2678730",
    "end": "2683760"
  },
  {
    "text": "Some of them are\njust better coding. So there's improving\nthe constant factors.",
    "start": "2683760",
    "end": "2689280"
  },
  {
    "text": "But if you look at\nlarger and larger texts, this will become\neven more dramatic. Because a lot of these\nwere improvements",
    "start": "2689280",
    "end": "2696220"
  },
  {
    "text": "from quadratic time algorithms\nto linear and log n algorithms. And so for a megabyte, yeah,\nit's a reasonable improvement.",
    "start": "2696220",
    "end": "2702432"
  },
  {
    "text": "But if you look at a gigabyte,\nit'll be a huge improvement. There will be no comparison. In fact, there will\nbe no comparison.",
    "start": "2702432",
    "end": "2707640"
  },
  {
    "text": "Because this one\nwill never finish. So the reason I ran\nsuch a small example so I could have patience\nto wait for this one.",
    "start": "2707640",
    "end": "2713540"
  },
  {
    "text": "But this one you could run\non the bigger examples. All right, so where do\nI want to go from here?",
    "start": "2713540",
    "end": "2722490"
  },
  {
    "text": "Five minutes. I want to tell you about\nsome of those improvements and some of the algorithms here.",
    "start": "2722490",
    "end": "2729380"
  },
  {
    "text": "Let's start with\nthis very simple one. How would you split a\ndocument into words in Python?",
    "start": "2729380",
    "end": "2736325"
  },
  {
    "text": "Yeah? AUDIENCE: [INAUDIBLE]. Iterate through the document,\n[INAUDIBLE] the dictionary? PROFESSOR: Iterate\nthrough the-- that's",
    "start": "2736325",
    "end": "2742560"
  },
  {
    "text": "actually how we do number two. OK, we can talk about that one. Iterate through the\nwords in the document",
    "start": "2742560",
    "end": "2752220"
  },
  {
    "text": "and put it in a dictionary. Let's say, count of\nword plus equals 1.",
    "start": "2752220",
    "end": "2759980"
  },
  {
    "text": "This would work if count\nis something called a count dictionary if you're\nsuper Pythonista.",
    "start": "2759980",
    "end": "2765440"
  },
  {
    "text": "Otherwise, you have to check,\nis the word in the dictionary? If not, set it to one. If it is there, add one to it.",
    "start": "2765440",
    "end": "2772459"
  },
  {
    "text": "But I think you know\nwhat this means. This will count the\nnumber of words-- this will count the frequency\nof each word in the dictionary.",
    "start": "2772459",
    "end": "2778400"
  },
  {
    "text": "And becomes dictionaries\nrun in constant time with high probability--\nwith high probability--",
    "start": "2778400",
    "end": "2786020"
  },
  {
    "text": "this will take order--\nwell, cheating a little bit.",
    "start": "2786020",
    "end": "2791170"
  },
  {
    "text": "Because words can\nbe really long. And so to reduce a word\ndown to a machine word could take order the\nlength of the word time.",
    "start": "2791170",
    "end": "2798810"
  },
  {
    "text": "To a little more\nprecise, this is going to be the\nsum of the lengths of the words in the\ndocument, which is also",
    "start": "2798810",
    "end": "2805800"
  },
  {
    "text": "known as a length of\nthe document, basically. So this is good. This is linear time\nwith high probability.",
    "start": "2805800",
    "end": "2811565"
  },
  {
    "text": " OK, that's a good algorithm. That is introduced\nin algorithm four.",
    "start": "2811565",
    "end": "2822390"
  },
  {
    "text": "So we got a significant boost. There are other ways to do this. For example, you\ncould sort the words",
    "start": "2822390",
    "end": "2829190"
  },
  {
    "text": "and then run through\nthe sorted list and count, how many do you\nget in a row for each one? If it's sorted, you\ncan count-- I mean,",
    "start": "2829190",
    "end": "2835925"
  },
  {
    "text": "all the identical words are\nput right next to each other. So it's easy to count them. And that'll run almost as fast.",
    "start": "2835925",
    "end": "2841310"
  },
  {
    "text": "That was one of\nthese algorithms. ",
    "start": "2841310",
    "end": "2846470"
  },
  {
    "text": "OK, so that's a couple\ndifferent ways to do that. Let's go back to\nthis first step. How would you split a document\ninto words in the first place?",
    "start": "2846470",
    "end": "2853785"
  },
  {
    "text": "Yeah? AUDIENCE: Search circulated\nspaces and then [INAUDIBLE]. PROFESSOR: Run through\nthough the string.",
    "start": "2853785",
    "end": "2859150"
  },
  {
    "text": "And every time you see anything\nthat's not alphanumeric, start a new word. OK, that would run\nin linear time.",
    "start": "2859150",
    "end": "2865380"
  },
  {
    "text": "That's a good answer. So it's not hard. If you're a fancy Pythonista,\nyou might do it like this.",
    "start": "2865380",
    "end": "2874210"
  },
  {
    "start": "2867000",
    "end": "2930000"
  },
  {
    "start": "2874210",
    "end": "2881430"
  },
  {
    "text": "Remember my Reg Exes.  This will find all the\nwords in a document.",
    "start": "2881430",
    "end": "2887090"
  },
  {
    "text": "Trouble is, in general,\nre takes exponential time. So if you think about\nalgorithms, be very careful.",
    "start": "2887090",
    "end": "2894260"
  },
  {
    "text": "Unless you know how\nre is implemented, this probably will\nrun in linear time.",
    "start": "2894260",
    "end": "2899800"
  },
  {
    "text": "But it's not obvious at all. Do anything fancy with\nregular expressions. If you don't know what this\nmeans, don't worry about it.",
    "start": "2899800",
    "end": "2906543"
  },
  {
    "text": "Don't use it. If you know about it, be\nvery careful in this class when you use re. Because it's not\nalways linear time.",
    "start": "2906543",
    "end": "2911664"
  },
  {
    "text": "But there is an easy\nalgorithm for this, which is just scan through\nand look for alpha numerics.",
    "start": "2911664",
    "end": "2918075"
  },
  {
    "text": "String them together. It's good. There's a few other\nalgorithms here in the notes. You should check them out. And for fun, look at this code\nand see how small differences",
    "start": "2918075",
    "end": "2926930"
  },
  {
    "text": "make dramatic difference\nin performance. Next class will\nbe about sorting.",
    "start": "2926930",
    "end": "2931619"
  }
]