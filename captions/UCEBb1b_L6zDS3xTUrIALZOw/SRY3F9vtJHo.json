[
  {
    "text": "[SQUEAKING]\n[RUSTLING] [CLICKING]",
    "start": "0",
    "end": "5904"
  },
  {
    "start": "5904",
    "end": "13100"
  },
  {
    "text": "PROFESSOR: OK,\nready for last hour? OK, before I start, was\nthis too slow, too fast?",
    "start": "13100",
    "end": "22830"
  },
  {
    "text": "Too slow? Too fast?",
    "start": "22830",
    "end": "28580"
  },
  {
    "text": "OK, I have an idea. Everybody, close your eyes. [LAUGHTER] OK. Now, you have to say, too\nslow, too fast, or good.",
    "start": "28580",
    "end": "36480"
  },
  {
    "text": "OK, no, you need\nto close your eyes. Everybody, close your eyes. OK, too slow?",
    "start": "36480",
    "end": "42680"
  },
  {
    "text": "Too fast? Good? AUDIENCE: Good. PROFESSOR: Yes.",
    "start": "42680",
    "end": "48379"
  },
  {
    "text": "OK. OK, thank you. AUDIENCE: Hands up.",
    "start": "48380",
    "end": "53390"
  },
  {
    "text": "Oh, what is it for? PROFESSOR: All good. It's all good. Passed. OK.",
    "start": "53390",
    "end": "59880"
  },
  {
    "text": "OK, great. OK, so I want to\nsay first, one thing",
    "start": "59880",
    "end": "65470"
  },
  {
    "text": "I forgot to mention about\nthe sum-check protocol that we actually use later--\nit has a nice property, which is look at\nwhat-- so the prover",
    "start": "65470",
    "end": "72690"
  },
  {
    "text": "sends low-degree polynomials. What does the verifier send? The verifier just sends\nrandom field elements--",
    "start": "72690",
    "end": "80310"
  },
  {
    "text": "so really, randomness. He chooses random Logf\nbits and send them over.",
    "start": "80310",
    "end": "86130"
  },
  {
    "text": "This is called a public\ncoin protocol-- public coin,",
    "start": "86130",
    "end": "91840"
  },
  {
    "text": "meaning the coins-- so each round, you\nshould think the verifier chooses coins and just sends\nthem publicly to the prover.",
    "start": "91840",
    "end": "99060"
  },
  {
    "text": "Here are my Logf coins. Here they go. This defines a field element,\nand that's my field element.",
    "start": "99060",
    "end": "106289"
  },
  {
    "text": "This kind of public\ncoin protocols are very useful\nbecause we can later,",
    "start": "106290",
    "end": "112930"
  },
  {
    "text": "as we'll see in this class,\nwe can use cryptography to eliminate this interaction\nfrom this protocol.",
    "start": "112930",
    "end": "118880"
  },
  {
    "text": "So the fact that it's public\ncoin, we'll come back to it. But just notice the very\nfirst message is truly random.",
    "start": "118880",
    "end": "126160"
  },
  {
    "text": "OK. One more-- Shenian? OK, yeah, sorry. AUDIENCE: I'm just wondering.",
    "start": "126160",
    "end": "132099"
  },
  {
    "text": "Are there also protocols with\nthe prover as randomness? PROFESSOR: Good. OK.",
    "start": "132100",
    "end": "137349"
  },
  {
    "text": "So as I said, we mentioned the\nverifier has to be randomized. If it's not randomized,\nthe interactive protocol",
    "start": "137350",
    "end": "142569"
  },
  {
    "text": "has no power. The question here was, does the\nprover need to be randomized? Is it helpful if\nhe's randomized?",
    "start": "142570",
    "end": "148850"
  },
  {
    "text": "And the answer is,\nI mean, it doesn't help him to be randomized\nbecause you can always",
    "start": "148850",
    "end": "154210"
  },
  {
    "text": "fix his coins. The verifier doesn't. ",
    "start": "154210",
    "end": "162775"
  },
  {
    "text": "When is it helpful for the\nprover to have randomness? When you want to hide. When we do zero knowledge where\nthe goal is to hide thing,",
    "start": "162775",
    "end": "170750"
  },
  {
    "text": "then the verifier\nhas random coins that the verifier doesn't know. But in this case, the\nverifier is not-- we're not",
    "start": "170750",
    "end": "178460"
  },
  {
    "text": "trying to protect the verifier. So why is randomness\nis helpful-- why is it important that the\nverifier uses randomness?",
    "start": "178460",
    "end": "185670"
  },
  {
    "text": "Because the prover needs\nto send the polynomial. He should not know which element\nt the prover, the verifier,",
    "start": "185670",
    "end": "193040"
  },
  {
    "text": "will send. If he knew at which point t will\nbe asked, then he can cheat.",
    "start": "193040",
    "end": "198870"
  },
  {
    "text": "He'll give you a\npolynomial that happened to coincide with the true\npolynomial at that point t.",
    "start": "198870",
    "end": "204170"
  },
  {
    "text": "there are d such points,\nso he can choose it. He can choose the fake\npolynomial to coincide.",
    "start": "204170",
    "end": "209510"
  },
  {
    "text": "The power comes from\nthe fact that the prover doesn't know this t. So we don't trust\nthe prover, and we",
    "start": "209510",
    "end": "216769"
  },
  {
    "text": "use randomness against it. The verifier is trusted. We're not trying. So it doesn't help the prover\nto use randomness in a sense.",
    "start": "216770",
    "end": "224970"
  },
  {
    "text": "Or in other words, if you\ncan fix this randomness once and for all time, think\nof it as a non-uniform prover.",
    "start": "224970",
    "end": "232739"
  },
  {
    "text": "And that's it. The verifier is not going to\nchange his behavior depending on-- because he's honest.",
    "start": "232740",
    "end": "239470"
  },
  {
    "text": "The verifier is always honest. It's the malicious prover\nthat we're worried about. And therefore, the\nprover doesn't help him",
    "start": "239470",
    "end": "246640"
  },
  {
    "text": "to-- he doesn't need randomness\nbecause you can always hardwire the best randomness\npossible to him,",
    "start": "246640",
    "end": "252440"
  },
  {
    "text": "and now he's just a non-uniform\nmachine, a circuit, as opposed",
    "start": "252440",
    "end": "258190"
  },
  {
    "text": "to a randomized machine. So in this context, randomness\nto the prover is not needed,",
    "start": "258190",
    "end": "263840"
  },
  {
    "text": "but randomness to the\nverifier is paramount. Yes? AUDIENCE: So when\nyou say public coin, does that mean that you\ncan't see those bits?",
    "start": "263840",
    "end": "269366"
  },
  {
    "text": "PROFESSOR: No. Public coin means that the\nverifier doesn't hide anything. ",
    "start": "269367",
    "end": "276405"
  },
  {
    "text": "Of course, the prover-- good question. Thank you. The prover, he never sees\nthe coins in advance.",
    "start": "276405",
    "end": "285140"
  },
  {
    "text": "So if he saw the coins before\nhe said anything, he can cheat. But the verifier never\nhides coins to himself.",
    "start": "285140",
    "end": "293550"
  },
  {
    "text": "So public coin means when the\nverifier-- the verifier just sends random coins. So I'm the verifier.",
    "start": "293550",
    "end": "300180"
  },
  {
    "text": "You guys gave me a\nunivariate polynomial, a degree-d polynomial. I choose coins, a field\nelement that's random coins.",
    "start": "300180",
    "end": "307350"
  },
  {
    "text": "I send it over. I don't keep any state. All my messages are just random. You give me another polynomial,\nI'll just send randomness.",
    "start": "307350",
    "end": "314880"
  },
  {
    "text": "That's the definition of\na public coin protocol. So public coin\nprotocol just means--",
    "start": "314880",
    "end": "321169"
  },
  {
    "text": "so note sum-check is a public\ncoin protocol which means that",
    "start": "321170",
    "end": "331160"
  },
  {
    "text": "verifier's messages\nare truly random--",
    "start": "331160",
    "end": "340410"
  },
  {
    "text": "just random bits. ",
    "start": "340410",
    "end": "345980"
  },
  {
    "text": "Or I should say uniform. ",
    "start": "345980",
    "end": "356790"
  },
  {
    "text": "I just had random, but\nit's truly uniform bits. That's what public point means. Yes?",
    "start": "356790",
    "end": "363000"
  },
  {
    "text": "AUDIENCE: I guess,\nis it known what happens if the prover does know\nall the randomness in the s? PROFESSOR: Yeah, yeah.",
    "start": "363000",
    "end": "368200"
  },
  {
    "text": "If the prover knows all\nthe randomness in advance, he can cheat. Why? Let me tell you how\nI'm going to cheat.",
    "start": "368200",
    "end": "374015"
  },
  {
    "text": "So I'm a cheating prover. Let's say, before\nwe started, you",
    "start": "374015",
    "end": "379485"
  },
  {
    "text": "gave me all your t1 up to tn. Actually, even if you just\ngave me t1, I'm golden.",
    "start": "379485",
    "end": "384790"
  },
  {
    "text": "Why? I faked. I said, the sum is B, beta. It's not beta.",
    "start": "384790",
    "end": "390370"
  },
  {
    "text": "It's something else. And now all I want is to find\na univariate polynomial that",
    "start": "390370",
    "end": "398760"
  },
  {
    "text": "sums to beta. So it's not the true polynomial. It sums to beta, but it agrees\nwith a true polynomial all on t1",
    "start": "398760",
    "end": "407280"
  },
  {
    "text": "because once it agrees\nwith t1, from now on, I need to prove a true\nstatement because I need to prove this, which is\nactually a true statement.",
    "start": "407280",
    "end": "414740"
  },
  {
    "text": "So I'm good. So if I knew t1, I can always\ncome up with such a polynomial.",
    "start": "414740",
    "end": "419840"
  },
  {
    "text": "The thing is, I don't\nknow what t1 is. So actually, I want to give-- Chima actually asked me a very\ngood question in the break.",
    "start": "419840",
    "end": "426560"
  },
  {
    "text": "And I want to give nice a\ngeometric interpretation",
    "start": "426560",
    "end": "432190"
  },
  {
    "text": "of the soundness proof. So let me give you a\ngeometric interpretation of why this protocol\nis sound, what's",
    "start": "432190",
    "end": "438970"
  },
  {
    "text": "happening in this protocol. So here's the geometric\ninterpretation. We have a little\nbox, h to the m.",
    "start": "438970",
    "end": "445940"
  },
  {
    "text": "You can think of it, this is\nthe little box h to the m. I want to prove to you that\nthis low-degree polynomial,",
    "start": "445940",
    "end": "452390"
  },
  {
    "text": "if you sum over the value\nat this point, this point, all these h-to-the-m\npoints, it's beta.",
    "start": "452390",
    "end": "457780"
  },
  {
    "text": "Now let's look at the\nbig F. I have this big F.",
    "start": "457780",
    "end": "464139"
  },
  {
    "text": "OK. Now what happens? If you were incorrect, if you\ncheated me, then this sum--",
    "start": "464140",
    "end": "470720"
  },
  {
    "text": "you sum over all the points. Let's fix this point\nhere, the one possible h1.",
    "start": "470720",
    "end": "476960"
  },
  {
    "text": " Maybe what you gave me is false. What you gave me is-- this sum\nis either false on h1 or on h2.",
    "start": "476960",
    "end": "485600"
  },
  {
    "text": "Somewhere, it must\nbe false because it was true on everything,\nit would be true. So you gave me something\nthat's false on one of them.",
    "start": "485600",
    "end": "491580"
  },
  {
    "text": "I don't know which one. But now I'm going to use\nerror correction to say, well,",
    "start": "491580",
    "end": "498060"
  },
  {
    "text": "if it was false on\none of them, it's false on a random point, t1. So now I forget about this sum.",
    "start": "498060",
    "end": "504419"
  },
  {
    "text": "I just look at t1. And I know that the sum only\nover the rest of the dimension 2",
    "start": "504420",
    "end": "511310"
  },
  {
    "text": "is false on t1. And now, again, false\non t1, that means h2.",
    "start": "511310",
    "end": "516679"
  },
  {
    "text": "One of them must be false. I go to a random point\nin the extension, and there, with high\nprobability, it's false.",
    "start": "516679",
    "end": "523559"
  },
  {
    "text": "And this is how I bop up around\nfrom dimensions-- so t1, t2,",
    "start": "523559",
    "end": "529770"
  },
  {
    "text": "to dimension t3, t4, and\nso on, up to the point that I get a random\npoint and left it there.",
    "start": "529770",
    "end": "536170"
  },
  {
    "text": "So that's a geometric\ninterpretation of what's going on. OK?",
    "start": "536170",
    "end": "542760"
  },
  {
    "text": "OK. Any questions before we-- OK. So we saw this sum-check.",
    "start": "542760",
    "end": "548910"
  },
  {
    "text": "So let's see where we are. We introduced this\ninteractive proof model. We saw sum-check protocol.",
    "start": "548910",
    "end": "554700"
  },
  {
    "text": "Seems very specific. Let's try to see why\nit's very interesting, the sum-check protocol.",
    "start": "554700",
    "end": "560060"
  },
  {
    "start": "560060",
    "end": "565590"
  },
  {
    "text": "First thing, let me give\nyou an example where the sum-check is useful. And here's the example.",
    "start": "565590",
    "end": "571763"
  },
  {
    "text": " # Let me show you that #SAT\nhas an interactive piece.",
    "start": "571763",
    "end": "583050"
  },
  {
    "text": "IP is the set of all languages\nthat have interactive proofs.",
    "start": "583050",
    "end": "588380"
  },
  {
    "text": "# So let me prove to you that #SAT\nset has an interactive proof. That's an example. This will use the\nsum-check protocol.",
    "start": "588380",
    "end": "594910"
  },
  {
    "text": "By the way, let me just\nmention, all the examples that I'm giving you\nare not just examples.",
    "start": "594910",
    "end": "599923"
  },
  {
    "text": "I'm teaching\nsomething through it. So don't just, ah,\nit's an example. I'll forget about it.",
    "start": "599923",
    "end": "606310"
  },
  {
    "text": "They're specially crafted. OK, so what is #SAT? # #SAT, we're giving\na formula, phi.",
    "start": "606310",
    "end": "614140"
  },
  {
    "text": "And we're asking, what is the\nnumber of satisfying assignments to this formula?",
    "start": "614140",
    "end": "620000"
  },
  {
    "text": "That's the question. That's the aim. So phi, you should think\nof it as a Boolean formula.",
    "start": "620000",
    "end": "629270"
  },
  {
    "text": "We're given a Boolean formula.  Let's say phi is over--",
    "start": "629270",
    "end": "638950"
  },
  {
    "text": "sorry-- over, let's\nsay, n variables. ",
    "start": "638950",
    "end": "644930"
  },
  {
    "text": "And Boolean formula, just\nthink of it's AND and OR.",
    "start": "644930",
    "end": "650570"
  },
  {
    "text": "And we have NAND gates. And the question is, how many\nassignments over 0, 1 to the n",
    "start": "650570",
    "end": "660170"
  },
  {
    "text": "make this formula accept? That's the question. ",
    "start": "660170",
    "end": "666780"
  },
  {
    "text": "So by the way, when we say\nformula, we mean it's a binary.",
    "start": "666780",
    "end": "672720"
  },
  {
    "text": "Think of it as a binary tree.  So a formula is\njust a binary tree.",
    "start": "672720",
    "end": "679680"
  },
  {
    "text": "Each gate, you can think\nof it as an AND or an OR. And then the final, final\nleaves are all xi or not xi.",
    "start": "679680",
    "end": "688860"
  },
  {
    "text": "So phi is of the following form. It's, let's say, AND, then\nyou can have OR or AND,",
    "start": "688860",
    "end": "695779"
  },
  {
    "text": "so on and so forth. And at the end, it has x3, NAND\nx7, and so on, and so forth.",
    "start": "695780",
    "end": "703580"
  },
  {
    "text": "So you can think of the\nsize of this formula as the number of leaves\nbecause up to a factor of 2,",
    "start": "703580",
    "end": "709182"
  },
  {
    "text": "it's the number of gates,\nthe number of leaves. It's the same. ",
    "start": "709182",
    "end": "714730"
  },
  {
    "text": "And just note, x3 may appear\nmany, many, many times because I really\nopened it up to a tree.",
    "start": "714730",
    "end": "723050"
  },
  {
    "text": "So each variable here can\nappear many, many times. So this is what our formula is.",
    "start": "723050",
    "end": "728660"
  },
  {
    "text": "# And #SAT-- so now I want\nto say that, let's say, phi and k is in #SAT.",
    "start": "728660",
    "end": "736900"
  },
  {
    "text": "It's in the language if\nand only if phi has--",
    "start": "736900",
    "end": "742040"
  },
  {
    "text": "so the number. If you look at all\nthe x's in 0, 1",
    "start": "742040",
    "end": "747639"
  },
  {
    "text": "to the n such that\nphi of x is 1, this set equals k\nif there is exactly",
    "start": "747640",
    "end": "756430"
  },
  {
    "text": "k-satisfying assignments. Questions about this\nlanguage, free SAT?",
    "start": "756430",
    "end": "762480"
  },
  {
    "text": "We're good? OK. I just want to\npoint out, a formula is different than a\ncircuit in the sense",
    "start": "762480",
    "end": "768290"
  },
  {
    "text": "that the formula is a tree. It's a binary tree. A circuit is an arbitrary\ndirected acyclic graph.",
    "start": "768290",
    "end": "775890"
  },
  {
    "text": "And in particular,\nin a circuit--",
    "start": "775890",
    "end": "781010"
  },
  {
    "text": "in a formula, you need\nto recompute everything. So if this gate uses\na value and this gate",
    "start": "781010",
    "end": "788389"
  },
  {
    "text": "also uses the same value,\nyou need to recompute it. You need to compute it twice. In a circuit, you can do\nthings much more efficiently.",
    "start": "788390",
    "end": "795829"
  },
  {
    "text": "So there's also circuits SATs. That's a sharp circuit set. That's a different problem. # Here, we're talking about\n#SAT for formulas, for trees.",
    "start": "795830",
    "end": "806036"
  },
  {
    "text": "So I'm going to\ngive you actually-- so this is known to be\na very hard problem.",
    "start": "806036",
    "end": "814190"
  },
  {
    "text": "I'm giving you--\nthink of three sets. Look at the number,\nlike, 10 people a number?",
    "start": "814190",
    "end": "820660"
  },
  {
    "text": "How do you know how many\nsatisfying assignments it has? It's considered a\nvery hard problem.",
    "start": "820660",
    "end": "826726"
  },
  {
    "text": "But If you think about\nit, it's really surprising that you can give\nan interactive proof for it, which is really nice.",
    "start": "826726",
    "end": "832990"
  },
  {
    "text": "And moreover, the\ninteractive proof is really just the sum-check. That's all. That's all it is.",
    "start": "832990",
    "end": "838589"
  },
  {
    "text": "So I'm going to show you how\nI embed this kind of question into a sum-check.",
    "start": "838590",
    "end": "845970"
  },
  {
    "text": "And note that this is\njust a Boolean formula. Where's the polynomial? I'm going to make a sum-check.",
    "start": "845970",
    "end": "852060"
  },
  {
    "text": "But to have sum-check,\nI need a polynomial. This is just a Boolean formula. So the idea is to\nuse-- so I'm going",
    "start": "852060",
    "end": "858750"
  },
  {
    "text": "to use sum-check for this IP. And the way I'm going\nto use sum-check is by a technique\ncalled arithmetization,",
    "start": "858750",
    "end": "865230"
  },
  {
    "text": "which we'll use. So the idea of using sum-check\nor the idea behind this IP",
    "start": "865230",
    "end": "873300"
  },
  {
    "text": "is to arithmetize\nthe formula phi.",
    "start": "873300",
    "end": "880820"
  },
  {
    "text": "# So I want to prove to you\nthat phi, comma, k is in #SAT. I want to use a\nsum-check protocol.",
    "start": "880820",
    "end": "886880"
  },
  {
    "text": "That's the only protocol I know. And I want to use it. But I need a polynomial.",
    "start": "886880",
    "end": "892090"
  },
  {
    "text": "I need some polynomial in\nthe sum over this polynomial. What is this polynomial? It's going to be an\narithmetization of the set",
    "start": "892090",
    "end": "900579"
  },
  {
    "text": "formula. So how do I arithmetize? The idea is very, very simple. I'm going to convert any-- so\nthis is Booleans all over 0,",
    "start": "900580",
    "end": "908900"
  },
  {
    "text": "1, yeah. I have AND and OR. Everything is over 0, 1. I'm going to convert an\nAND gate into MULT gate.",
    "start": "908900",
    "end": "925149"
  },
  {
    "text": "So actually, fix\nany finite field. You can make it very,\nvery big, so you'll have good soundness with\nrespect to finite field F.",
    "start": "925150",
    "end": "937579"
  },
  {
    "text": "So it fits any finite field. It can be very large.",
    "start": "937580",
    "end": "943070"
  },
  {
    "text": "I'm going to convert any AND\ngate into a multiplication gate.",
    "start": "943070",
    "end": "948180"
  },
  {
    "text": "So MULT is just take x\nand y and just output",
    "start": "948180",
    "end": "954740"
  },
  {
    "text": "x times y in the field. But in particular,\nwhat it means--",
    "start": "954740",
    "end": "961280"
  },
  {
    "text": "anything times 0 is 0. And 1 times 1 is 1. It's exactly an AND gate.",
    "start": "961280",
    "end": "967190"
  },
  {
    "text": "I have an OR gate into--",
    "start": "967190",
    "end": "973610"
  },
  {
    "text": "so this is a bit more problem. So actually, let me say-- maybe I'll write it.",
    "start": "973610",
    "end": "979340"
  },
  {
    "text": "So I'm going to\nwrite AND of x, y.",
    "start": "979340",
    "end": "984560"
  },
  {
    "text": "I'm just going to\nwrite as x times y.  And I'm going to\nwrite OR of x and y.",
    "start": "984560",
    "end": "995370"
  },
  {
    "text": "Any idea? Yeah? AUDIENCE: X, y equals x plus y. PROFESSOR: Exactly, exactly.",
    "start": "995370",
    "end": "1000380"
  },
  {
    "text": "X plus y-- that's the idea. But of course, then it's 2. So I subtract x times y.",
    "start": "1000380",
    "end": "1006710"
  },
  {
    "text": "Exactly. So of course, 0 goes to 0. If only one of them\nis 1, you get 1.",
    "start": "1006710",
    "end": "1014000"
  },
  {
    "text": "And 0, nothing. And if both of them are\n1, then this one is 1. So it takes care of it. Good.",
    "start": "1014000",
    "end": "1019250"
  },
  {
    "text": "And then the NOT--  NOT, I go into NOT\nof x is simply what?",
    "start": "1019250",
    "end": "1028422"
  },
  {
    "text": "AUDIENCE: 1 minus x. PROFESSOR: Exactly. 1 minus x. So now I have actually\nan arithmetic circuit.",
    "start": "1028422",
    "end": "1036020"
  },
  {
    "text": "So this arithmetization\nallowed me to go from a circuit into an arithmetic circuit\nor from a formula--",
    "start": "1036020",
    "end": "1044550"
  },
  {
    "text": "sorry-- into an\narithmetic circuit.  First, note that each\ngate is now an arithmetic",
    "start": "1044550",
    "end": "1056010"
  },
  {
    "text": "circuit of size at most 3. It's a tiny circuit. So each gate really is only\nblew up by only a constant.",
    "start": "1056010",
    "end": "1065970"
  },
  {
    "text": "And now, really, what I\nwant to do a sum-check over my protocol-- what I want is\nto look at-- so let's denote",
    "start": "1065970",
    "end": "1073080"
  },
  {
    "text": "the arithmetization by-- so if we denote arethmetized\nformula by phi tilde--",
    "start": "1073080",
    "end": "1092760"
  },
  {
    "text": " so phi tilde goes\nfrom F to the n to F.",
    "start": "1092760",
    "end": "1099810"
  },
  {
    "text": "It's just addition\nand multiplication. It's defined over\nthe big F. Yes? AUDIENCE: I'm worried that\nsince OR now has x twice and y",
    "start": "1099810",
    "end": "1107040"
  },
  {
    "text": "twice, since you said\nit has to be a tree, do you have to copy and paste y\nin order to plug it into that?",
    "start": "1107040",
    "end": "1113437"
  },
  {
    "text": "PROFESSOR: OK. Actually, I don't care. We'll see. What you're saying is, wait. ",
    "start": "1113437",
    "end": "1121289"
  },
  {
    "text": "All I care is that I\nstarted with an arithmetic-- with a formula. I don't care in the\nmiddle what I do with it.",
    "start": "1121290",
    "end": "1126300"
  },
  {
    "text": "AUDIENCE: So right now,\nit's not a formula anymore. Is that OK? PROFESSOR: Yeah, oh, sorry. ",
    "start": "1126300",
    "end": "1133980"
  },
  {
    "text": "Good. Thank you.  Good. Thank you very much.",
    "start": "1133980",
    "end": "1140510"
  },
  {
    "text": "Thank you.  Great.",
    "start": "1140510",
    "end": "1146059"
  },
  {
    "text": "Wow, you guys are good. Thank you. OK, so let's denote the\narithmetized version by phi tilde.",
    "start": "1146060",
    "end": "1152060"
  },
  {
    "text": "Now, of course, it's natural. What would be sum-check\nprotocol that makes sense to do at this point? Any ideas?",
    "start": "1152060",
    "end": "1159885"
  },
  {
    "text": "Hmm? AUDIENCE: Replace\nF with phi tilde. PROFESSOR: Exactly, exactly. Let's prove that sum of phi\ntilde over b1 up to bn in 0,",
    "start": "1159885",
    "end": "1171380"
  },
  {
    "text": "1 is equal to k.",
    "start": "1171380",
    "end": "1176880"
  },
  {
    "text": "Why that makes sense? The only thing we need\nto be careful with is, what is the\ndegree of this thing?",
    "start": "1176880",
    "end": "1184559"
  },
  {
    "text": "So now let's just argue that\nthe degree is not too big.",
    "start": "1184560",
    "end": "1190390"
  },
  {
    "text": "But if I convince you\nthat the degree is small, then we're done. We just do a sum-check.",
    "start": "1190390",
    "end": "1196559"
  },
  {
    "text": "And this is exactly\nwhat you want to prove. So let's just make\nsure that the degree--",
    "start": "1196560",
    "end": "1201960"
  },
  {
    "text": "so n here, like the number\nof rounds is going to be n. There's going to be a degree d. We just need to\nensure that d times n",
    "start": "1201960",
    "end": "1208890"
  },
  {
    "text": "is much, much, much smaller\nthan F, which governs-- I put here the--",
    "start": "1208890",
    "end": "1214860"
  },
  {
    "text": "which govern the soundness. So let's just see the degree. So here's a claim.",
    "start": "1214860",
    "end": "1221135"
  },
  {
    "text": " The degree of phi\ntilde is at most--",
    "start": "1221135",
    "end": "1232550"
  },
  {
    "text": "or let me write it differently.  The sum-- let's look at the\ndegree for each variable.",
    "start": "1232550",
    "end": "1242320"
  },
  {
    "text": "The sum of the degree\nfor variable i of phi--",
    "start": "1242320",
    "end": "1248054"
  },
  {
    "text": " so we have n\nvariables, x1 up to xn.",
    "start": "1248055",
    "end": "1253640"
  },
  {
    "text": "Each one has some degree. The sum of these degrees, I'm\ngoing to argue, is, at most,",
    "start": "1253640",
    "end": "1259450"
  },
  {
    "text": "s, s being the number of-- ",
    "start": "1259450",
    "end": "1268330"
  },
  {
    "text": "s size of phi, which\nis defined to be--",
    "start": "1268330",
    "end": "1273830"
  },
  {
    "text": "this is by definition-- the\nnumber of leaves in phi.",
    "start": "1273830",
    "end": "1283460"
  },
  {
    "text": "So let me argue that the\nsize is, at most, phi--",
    "start": "1283460",
    "end": "1291350"
  },
  {
    "text": "the degree is, at most, the sum\nof the degree is, at most, s",
    "start": "1291350",
    "end": "1297410"
  },
  {
    "text": "or the size. By the way, before\nactually I do that, just to make sure because\nI actually noticed that I",
    "start": "1297410",
    "end": "1304340"
  },
  {
    "text": "glossed over too quickly-- I said that this is\nall we need to prove.",
    "start": "1304340",
    "end": "1310590"
  },
  {
    "text": "But I just want to make sure. Is it clear that phi\ntilde and 0, 1 to the n",
    "start": "1310590",
    "end": "1317660"
  },
  {
    "text": "is actually equal to phi? Yeah, that's very\nimportant because we want to make sure\nthat we're actually",
    "start": "1317660",
    "end": "1323282"
  },
  {
    "text": "summing over the\nactual phi, like in 0, # 1, because we want to prove\n#SAT of the phi formula.",
    "start": "1323282",
    "end": "1330390"
  },
  {
    "text": "And the reason is, as\nwe said, is that on 0, 1, we really behave\nlike the AND and OR.",
    "start": "1330390",
    "end": "1337505"
  },
  {
    "text": "So of course, outside\nof 0, 1, who knows? We're over a big field. Who knows what's going on? But on 0, 1, we behave\nexactly like the AND and OR,",
    "start": "1337505",
    "end": "1343212"
  },
  {
    "text": "like the original tree. And therefore, this\narithmetic formula is actually equal to the\noriginal formula on 0, 1",
    "start": "1343212",
    "end": "1350669"
  },
  {
    "text": "to the n. Yeah? OK. So good. So this is what\nwe want to prove.",
    "start": "1350670",
    "end": "1356020"
  },
  {
    "text": "Now let's just\nlook at the degree. Yeah? AUDIENCE: What\ndegree sub i is this? PROFESSOR: Good, good, good. This just means this is\nthe degree of xi in phi.",
    "start": "1356020",
    "end": "1367380"
  },
  {
    "start": "1367380",
    "end": "1373090"
  },
  {
    "text": "Or in other words, I can argue\nthat each variable has degree, at most, s. But I can argue\nsomething stronger.",
    "start": "1373090",
    "end": "1378880"
  },
  {
    "text": "The sum of the degrees of all\nthe variables is, at most, s. Note that's s is\npolynomial here.",
    "start": "1378880",
    "end": "1385882"
  },
  {
    "text": "That's the input. The input is a set formula. It's polynomial. So as long as this is\nthe degree, we're happy.",
    "start": "1385882",
    "end": "1393070"
  },
  {
    "text": "The communication complexity,\nthe verifier complexity is going to be n the\nnumber of variables,",
    "start": "1393070",
    "end": "1398100"
  },
  {
    "text": "d, which is like s polynomial,\nand poly log in the field.",
    "start": "1398100",
    "end": "1404360"
  },
  {
    "text": "So the verifier is\ngoing to be polynomial. Now we care about-- now there's a notion of\npolynomial time verifier.",
    "start": "1404360",
    "end": "1411620"
  },
  {
    "text": "But if the degree is, at\nmost, s, s is polynomial. We're good. OK.",
    "start": "1411620",
    "end": "1416830"
  },
  {
    "text": "So why is this the degree? So to prove that this is the\ndegree, the proof of this claim",
    "start": "1416830",
    "end": "1423460"
  },
  {
    "text": "is by induction.",
    "start": "1423460",
    "end": "1429700"
  },
  {
    "text": "It's actually a pretty\nstraightforward proof. And it really uses the\nfact that phi is a formula.",
    "start": "1429700",
    "end": "1436820"
  },
  {
    "text": "The original phi is a formula. ",
    "start": "1436820",
    "end": "1445570"
  },
  {
    "text": "So let's see.  So the proof is\njust by induction.",
    "start": "1445570",
    "end": "1458080"
  },
  {
    "text": "And here's how-- OK. So we're going to\nprove by induction on the depth of this formula.",
    "start": "1458080",
    "end": "1467212"
  },
  {
    "text": " If we have just one\ngate, then, OK, it's",
    "start": "1467213",
    "end": "1474679"
  },
  {
    "text": "clear the degree is just 1. So that's fine. So if number of gates\nor the depth if you want",
    "start": "1474680",
    "end": "1486140"
  },
  {
    "text": "is 1, then, of\ncourse, the degree",
    "start": "1486140",
    "end": "1492243"
  },
  {
    "text": "is going to be\nless than the size. It's degree is just 1. That's if you just\nhave a single gate.",
    "start": "1492243",
    "end": "1498500"
  },
  {
    "text": "And now if you have\na more general-- so now suppose you have\na circuit of the form,",
    "start": "1498500",
    "end": "1503700"
  },
  {
    "text": "let's say, ADD or MULT--\nit doesn't matter-- or AND, you can have phi 1.",
    "start": "1503700",
    "end": "1508940"
  },
  {
    "text": "Suppose phi is phi 1 AND or OR-- I don't care-- phi 2.",
    "start": "1508940",
    "end": "1514280"
  },
  {
    "text": "This can [INAUDIBLE] at the AND. But of course, it\ncan be also an OR. Then how do we arithmetize this?",
    "start": "1514280",
    "end": "1521769"
  },
  {
    "text": "So now what is phi tilde? Phi tilde is going to be either\nphi 1 tilde times phi 2 tilde.",
    "start": "1521770",
    "end": "1534090"
  },
  {
    "text": "Or in the case of--\nthis is for AND. If it was OR, then it would\nbe phi 1 tilde plus phi 2",
    "start": "1534090",
    "end": "1544350"
  },
  {
    "text": "tilde minus phi 1 tilde\ntimes phi 2 tilde-- all, of course, over\nx1 to xn over x1 to xn.",
    "start": "1544350",
    "end": "1552360"
  },
  {
    "text": " Yeah? OK. So let's look at the--",
    "start": "1552360",
    "end": "1558690"
  },
  {
    "text": "I want to argue that the\narithmetic version is of the sum of the degrees of\nall the variables, at most, s.",
    "start": "1558690",
    "end": "1566470"
  },
  {
    "text": "So let's see. Let's look at phi tilde. ",
    "start": "1566470",
    "end": "1571620"
  },
  {
    "text": "If the original phi was\nAND of phi 1 and phi 2, then phi tilde is just the\nmultiplication-- by definition,",
    "start": "1571620",
    "end": "1581730"
  },
  {
    "text": "we replaced n with\nmultiplication-- of the phi 1 tilde polynomial\ntimes phi 2 to the polynomial.",
    "start": "1581730",
    "end": "1589039"
  },
  {
    "text": "But what do we know here? Here, the degree of each-- so now let's suppose--",
    "start": "1589040",
    "end": "1595610"
  },
  {
    "text": "OK, suppose phi 1-- let's\nsay it's of size s1.",
    "start": "1595610",
    "end": "1601700"
  },
  {
    "text": "And suppose phi 2 is of size s2. ",
    "start": "1601700",
    "end": "1609340"
  },
  {
    "text": "Now we know that the size of\nphi s is equal to s1 plus s2",
    "start": "1609340",
    "end": "1614900"
  },
  {
    "text": "because it's a tree. So there's no kind of-- everything is open. So the left sides of\nthe tree is s1, size s1.",
    "start": "1614900",
    "end": "1623909"
  },
  {
    "text": "The right side of\nthe tree is size s2. The entire tree is the size\n2, which is s1 plus s2. ",
    "start": "1623910",
    "end": "1633090"
  },
  {
    "text": "So what can we say in this case? So let's focus on the AND. The OR is exactly the same.",
    "start": "1633090",
    "end": "1639360"
  },
  {
    "text": "So what can we say about\nthe sum of the degrees? So sum of degree--",
    "start": "1639360",
    "end": "1647340"
  },
  {
    "text": "the degree of the i-th element--\nof xi in phi is equal sum and i.",
    "start": "1647340",
    "end": "1655750"
  },
  {
    "text": "What is the degree of\nthe i-th variable in phi? It's the degree here\nplus the degree here.",
    "start": "1655750",
    "end": "1662500"
  },
  {
    "text": "When you multiply things,\nI need to sum the degrees. So it's the degree\nof xi in phi 1 tilde",
    "start": "1662500",
    "end": "1672990"
  },
  {
    "text": "plus the degree of\nvariable i in phi 2 tilde.",
    "start": "1672990",
    "end": "1678410"
  },
  {
    "text": " We have two polynomials. Multiply the degree x.",
    "start": "1678410",
    "end": "1685950"
  },
  {
    "text": "But this is just s1\nplus s2 by induction--",
    "start": "1685950",
    "end": "1696880"
  },
  {
    "text": "by the induction hypothesis. ",
    "start": "1696880",
    "end": "1707530"
  },
  {
    "text": "OK, so the degree here-- the sum of the degrees is\nlike the size of the formula.",
    "start": "1707530",
    "end": "1712696"
  },
  {
    "text": "We actually don't really\ncare about the sum. We care about the degree itself. But this shows you at least\nthe degree of each one",
    "start": "1712697",
    "end": "1718300"
  },
  {
    "text": "is also, at most, the\nsize of the formula. And therefore, the sum--",
    "start": "1718300",
    "end": "1723650"
  },
  {
    "text": "so now when we run-- so let me put this back up. So we run the sum-check\non this polynomial,",
    "start": "1723650",
    "end": "1732800"
  },
  {
    "text": "and we get the\ncommunication complexity.",
    "start": "1732800",
    "end": "1739760"
  },
  {
    "text": "And the verify\nruntime will be n-- or the number of variables here,\nn times the degree, which is s--",
    "start": "1739760",
    "end": "1748960"
  },
  {
    "text": "essentially the size of\nthe input, that's s-- and polylog the field. So you just need to take--",
    "start": "1748960",
    "end": "1755330"
  },
  {
    "text": "and similarly-- and the verify-- yeah, the degree, which is s,\nthe completeness is always 1.",
    "start": "1755330",
    "end": "1762060"
  },
  {
    "text": "And the soundness--\nimportantly, the soundness of this protocol is n,\nthe number of variables,",
    "start": "1762060",
    "end": "1771810"
  },
  {
    "text": "the degree, which is s,\ndivided by the size of F.",
    "start": "1771810",
    "end": "1777350"
  },
  {
    "text": "So all we need to make\nsure is to arithmetize with a field that's\nsignificantly larger than n times s.",
    "start": "1777350",
    "end": "1784405"
  },
  {
    "text": "And this will be\nthe soundness here. ",
    "start": "1784405",
    "end": "1789440"
  },
  {
    "text": "And of course, then\nyou can repeat all this to get here as long as you want.",
    "start": "1789440",
    "end": "1795980"
  },
  {
    "text": "OK. Any, yeah, questions? ",
    "start": "1795980",
    "end": "1807740"
  },
  {
    "text": "Yeah? You can go first. AUDIENCE: OK. So when you do the sum-check,\nwhen the sum is happening,",
    "start": "1807740",
    "end": "1814900"
  },
  {
    "text": "is that necessarily\na sum over the field? Or can it be any sum\nover a different field?",
    "start": "1814900",
    "end": "1820880"
  },
  {
    "text": "If your original field is just,\nI don't know, some prime field. PROFESSOR: Just note, in\nthis specific problem,",
    "start": "1820880",
    "end": "1827440"
  },
  {
    "text": "I don't have an\noriginal field actually. # For this specific\n#SAT, I'm over 0 0, 1. There's no field.",
    "start": "1827440",
    "end": "1832990"
  },
  {
    "text": "It's not an algebraic. It's a Boolean thing. I don't have any polynomial,\nany algebra, any field, nothing.",
    "start": "1832990",
    "end": "1839680"
  },
  {
    "text": "I just have 0, 1, and I\nhave AND and OR gates. And to prove that the number\nof satisfying assignment",
    "start": "1839680",
    "end": "1848130"
  },
  {
    "text": "in the Boolean cube is k, I\nchoose a field of my liking,",
    "start": "1848130",
    "end": "1853200"
  },
  {
    "text": "and I arithmetize. I think of this\ncircuit as polynomials,",
    "start": "1853200",
    "end": "1858610"
  },
  {
    "text": "as having addition and\nmultiplication gates. And in my head, I think of\nthis circuit as this formula",
    "start": "1858610",
    "end": "1866190"
  },
  {
    "text": "as a polynomial. So I choose the field. It's not actually the problem.",
    "start": "1866190",
    "end": "1872210"
  },
  {
    "text": "I, on purpose, chose\na field so that I can do the sum-check protocol.",
    "start": "1872210",
    "end": "1878293"
  },
  {
    "text": "AUDIENCE: Right. Yeah. But I guess what I'm asking is,\nfor the sum in the sum-check,",
    "start": "1878293",
    "end": "1885040"
  },
  {
    "text": "let's say not for this problem. PROFESSOR: Oh, I see. I see. You're saying, in general. You're saying, look, let's say\nyou have a sum-check problem.",
    "start": "1885040",
    "end": "1890210"
  },
  {
    "text": "Someone gave you\nsum-check problem. And you're not happy\nwith the field. The field is not\ngood enough for you, or it doesn't give\nyou enough soundness.",
    "start": "1890210",
    "end": "1896690"
  },
  {
    "text": "Can you amplify? Can you work over\na different field? Is that what you're asking? AUDIENCE: Or I guess\nwhat I'm asking is,",
    "start": "1896690",
    "end": "1902767"
  },
  {
    "text": "if you have sum-check\nand there is some field-- let's say you're\nworking mod, like, some large prime or something.",
    "start": "1902767",
    "end": "1909020"
  },
  {
    "text": "But then, will the\nsum that you're doing be also over that\nfield, necessarily?",
    "start": "1909020",
    "end": "1915340"
  },
  {
    "text": "Can you just change\nthose arbitrarily? PROFESSOR: Good. So when I do a sum-check\nover the field, everything will be\nover that field, yes.",
    "start": "1915340",
    "end": "1921620"
  },
  {
    "text": "Everything will\nbe over the field. However, that said, if\nI'm not happy, the p of-- you're saying, so I got\na sum-check protocol",
    "start": "1921620",
    "end": "1927920"
  },
  {
    "text": "with certain p over gf2 or gfp. So everything is mod\np with certain p.",
    "start": "1927920",
    "end": "1934490"
  },
  {
    "text": "Now, yes, everything\nshould be over this field. Now you can say, well,\nthis p is not that great because it's not that much\nbigger than m times d.",
    "start": "1934490",
    "end": "1941330"
  },
  {
    "text": "And I'm not really\nhappy with this field. Or maybe even it's smaller\nthan m times d, for all i know. It's not a good\nfield, not big enough.",
    "start": "1941330",
    "end": "1947820"
  },
  {
    "text": "Then what do I do? So I'm saying, it's OK. Don't worry. Just take an extension field. Instead of looking over p,\nyou work over gfp to the n.",
    "start": "1947820",
    "end": "1958070"
  },
  {
    "text": "So you can take a field of\nsize p to the n for any n that you want. And you're only going to\npay polynomially or linearly",
    "start": "1958070",
    "end": "1965810"
  },
  {
    "text": "with this n. And then you can\namplify your soundness. AUDIENCE: OK. I was just wondering\nbecause I was wondering",
    "start": "1965810",
    "end": "1971720"
  },
  {
    "text": "what happens if k is larger\nthan the size of the field or something? PROFESSOR: Oh, I'm going\nto choose the field to be much bigger.",
    "start": "1971720",
    "end": "1976950"
  },
  {
    "text": "AUDIENCE: OK, I see. PROFESSOR: Yeah, I'm\ngoing to choose the field. Otherwise, you can't-- yeah. I need to choose the field\nto be much bigger than k.",
    "start": "1976950",
    "end": "1983000"
  },
  {
    "text": "Yeah? AUDIENCE: So like-- PROFESSOR: Oh, sorry. I forgot you. Yeah. OK, yeah?",
    "start": "1983000",
    "end": "1988223"
  },
  {
    "text": "AUDIENCE: This is\nrelated to this point, but we need to\nchoose a field that has really big characteristics,\nand we to choose",
    "start": "1988223",
    "end": "1993900"
  },
  {
    "text": "a really big prime number. We can't just raise it to the\nn because k can be 2 to the n.",
    "start": "1993900",
    "end": "2000940"
  },
  {
    "start": "2000940",
    "end": "2007070"
  },
  {
    "text": "AUDIENCE: Can you find\nfield that's bigger than k? PROFESSOR: Yeah, no, but the\nquestion is, can you-- no,",
    "start": "2007071",
    "end": "2012509"
  },
  {
    "text": "but the question-- well, OK.",
    "start": "2012510",
    "end": "2018220"
  },
  {
    "text": "In our case, you can\njust choose the field to be as big as you want. In the case where you're\ngiving a sum-check, of course,",
    "start": "2018220",
    "end": "2025100"
  },
  {
    "text": "the sum is in the field. It's something about the field. You're giving something\nabout the fields. So, OK, we'll always\nbe in the field.",
    "start": "2025100",
    "end": "2031610"
  },
  {
    "text": "# AUDIENCE: But for\nthis #SAT one-- PROFESSOR: For\nthis specific one, I'm thinking of, yeah, you\nchoose a k that's bigger.",
    "start": "2031610",
    "end": "2037860"
  },
  {
    "text": "However, I'm not\n100% sure that-- hey, let me think.",
    "start": "2037860",
    "end": "2043340"
  },
  {
    "text": "Can you use small\ncharacteristic? AUDIENCE: Can you Chinese-- PROFESSOR: Yeah, that's\nwhat I'm thinking.",
    "start": "2043340",
    "end": "2048679"
  },
  {
    "text": "I'm not sure if you can't use\nsome Chinese remainder trick and use over a small\ncharacteristic. I need to think about it.",
    "start": "2048679",
    "end": "2053719"
  },
  {
    "text": "But anyway, in this\ncase, just choose a f to the gfp for a large p,\nand that's bigger than k.",
    "start": "2053719",
    "end": "2060370"
  },
  {
    "text": "Yeah. Sorry. Did you have a question? AUDIENCE: I was\ngoing to ask, is this # the only way we know how to\ndo for the #SAT that's easy?",
    "start": "2060370",
    "end": "2069888"
  },
  {
    "text": "PROFESSOR: This is easy. What do you mean? You want easier? AUDIENCE: It's easy. It's nice. I'm just wondering.",
    "start": "2069889",
    "end": "2075730"
  },
  {
    "text": "PROFESSOR: So no, I think\nthis is the simplest way. # So let me just say-- so we\nput #SAT into IP in this way.",
    "start": "2075730",
    "end": "2084760"
  },
  {
    "text": "You can ask, what about,\nlet's say, sharp circuit SAT? Which is the same thing,\nbut we're given a circuit. So we're given a\ncircuit, and you",
    "start": "2084760",
    "end": "2091059"
  },
  {
    "text": "want to know how many\nsatisfying assignment does it have over 0, 1 to the n. It's the same thing,\nexcept for phi is now--",
    "start": "2091060",
    "end": "2097510"
  },
  {
    "text": "it's not a tree anymore. It's a directed acyclic graph. And it turns out\nthat it also has",
    "start": "2097510",
    "end": "2103520"
  },
  {
    "text": "an IP because it's in p space. You can go over\nall possible x's-- x1 up to xn-- and check\nif it's satisfying or not.",
    "start": "2103520",
    "end": "2110280"
  },
  {
    "text": "And it's small space. So it's in p space, and so you\ncan ask, OK, so what about this?",
    "start": "2110280",
    "end": "2115890"
  },
  {
    "text": "Now you can do sum-check because\nthe degree won't be small. So actually, you can do it. But that's much. Much more complicated and\nrequires this degree reduction",
    "start": "2115890",
    "end": "2123740"
  },
  {
    "text": "thing. That's how Shamir proves\nIP equals p space. It's that there's some\ndegree reduction there that",
    "start": "2123740",
    "end": "2129350"
  },
  {
    "text": "really complicates matters. So you need that\nfor a circuit set. But for SAT, because it's so low\ndegree immediately, it's nice.",
    "start": "2129350",
    "end": "2136529"
  },
  {
    "text": "And that's all you do. Yeah, you should be-- where's the gratitude? [LAUGHTER]",
    "start": "2136530",
    "end": "2142490"
  },
  {
    "text": "AUDIENCE: So I guess, the one\ninterpretation of this question, I suppose, is that suppose\nyou're given another problem.",
    "start": "2142490",
    "end": "2148290"
  },
  {
    "text": "It's a permanent or something. So I guess, it's a\nformula you define. # But I want to direct without\nreducing to a #SAT and so forth.",
    "start": "2148290",
    "end": "2158640"
  },
  {
    "text": "I mean, I want a\ndirect protocol. It's not very well-defined. PROFESSOR: Yeah.",
    "start": "2158640",
    "end": "2163800"
  },
  {
    "text": "So I have to say, almost all\nthe protocols I know for IP go through sum-check.",
    "start": "2163800",
    "end": "2170632"
  },
  {
    "text": "AUDIENCE: Actually,\nthere's this weird one by--  I might be wrong.",
    "start": "2170632",
    "end": "2176020"
  },
  {
    "text": "I hoped that Irena Mano\nwas one of the authors, not the other one. But this is a weird one that\ngoes through a quantum problem.",
    "start": "2176020",
    "end": "2182130"
  },
  {
    "text": "If they were trying\nto prove verification, information theoretic\nverification or BPP and they",
    "start": "2182130",
    "end": "2187230"
  },
  {
    "text": "failed, but they got sharp\npeers in IP in some other way. ",
    "start": "2187230",
    "end": "2194772"
  },
  {
    "text": "PROFESSOR: So I'm not\nfamiliar with that. But I think the main ones\ngo through sum-check.",
    "start": "2194772",
    "end": "2201510"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] sum-check?  AUDIENCE: What I remember\nis there's this--",
    "start": "2201510",
    "end": "2208411"
  },
  {
    "text": "it's a little like sum-check. But they're also looking\nat reduced densities",
    "start": "2208412",
    "end": "2213600"
  },
  {
    "text": "over updates and stuff. ",
    "start": "2213600",
    "end": "2219549"
  },
  {
    "text": "# PROFESSOR: Any other\nquestions about #SAT? Yeah? AUDIENCE: Sum-check\nprotocol is--",
    "start": "2219550",
    "end": "2225250"
  },
  {
    "text": "I believe, it's\noperating over a field, like all the summation\ngoes to the field. PROFESSOR: Right, right, right. Yeah, yeah, yeah. AUDIENCE: So does\nthat mean that we'd",
    "start": "2225250",
    "end": "2231790"
  },
  {
    "text": "be safe to make sure\nto ensure correctness, we must ensure\nthat the field has characteristic greater than the\nnumber of satisfying solutions?",
    "start": "2231790",
    "end": "2239283"
  },
  {
    "text": "PROFESSOR: Yeah, exactly. AUDIENCE: In this\ncase 2 to the n. PROFESSOR: Yes. Yes, but the verifier runs\nin time log in this circuit.",
    "start": "2239283",
    "end": "2249910"
  },
  {
    "text": "So in the log in the-- sorry,\nin the size of the field. Yeah. Log in the size of the field.",
    "start": "2249910",
    "end": "2254920"
  },
  {
    "text": "So the field can be 2 to the n. AUDIENCE: Yeah. So that's a requirement. You can't fix small\ncharacteristic.",
    "start": "2254920",
    "end": "2260763"
  },
  {
    "text": "PROFESSOR: Yeah. So yeah, OK. So what we should do is\ntake gfp, large field,",
    "start": "2260763",
    "end": "2268990"
  },
  {
    "text": "like, large characteristic. I'm not sure you can take\nsmall characteristic, actually. I need to think about it because\nmaybe some Chinese remainder",
    "start": "2268990",
    "end": "2275140"
  },
  {
    "text": "theorem can help you. AUDIENCE: But that was quite\nexpensive not using the p.",
    "start": "2275140",
    "end": "2281089"
  },
  {
    "text": "What's [INAUDIBLE] protocol\nover many small primes and make sure that the answers\nare all the number of suspects.",
    "start": "2281090",
    "end": "2287547"
  },
  {
    "text": "AUDIENCE: Oh, I see. [INTERPOSING VOICES] PROFESSOR: Yeah, exactly. AUDIENCE: Multiple times. PROFESSOR: Yeah,\nexactly, exactly.",
    "start": "2287547",
    "end": "2293510"
  },
  {
    "text": "AUDIENCE: You need to target\nthose primes to be larger than k anyway. AUDIENCE: Yeah, it does.",
    "start": "2293510",
    "end": "2298700"
  },
  {
    "text": "Yeah. PROFESSOR: Why doesn't it help? AUDIENCE: Because-- [INTERPOSING VOICES] PROFESSOR: Yeah, but--",
    "start": "2298700",
    "end": "2304510"
  },
  {
    "text": "[INTERPOSING VOICES] PROFESSOR: Yeah,\nyeah, yeah, yeah. No, but if you don't\nwant to, sometimes-- AUDIENCE: Actually,\nI'm not so sure",
    "start": "2304510",
    "end": "2310448"
  },
  {
    "text": "because the computational\ncomplexity is going to be-- is probably going to be smaller.",
    "start": "2310448",
    "end": "2315780"
  },
  {
    "text": "Instead of log, a big field size\nto the power of 3 or something, you have sum of log small-size\nfields to the power of 3,",
    "start": "2315780",
    "end": "2324410"
  },
  {
    "text": "which is-- I see. Yeah. AUDIENCE: And you\ncan parallelize. AUDIENCE: You can probably see.",
    "start": "2324410",
    "end": "2329542"
  },
  {
    "text": "PROFESSOR: Yeah. OK, so by the way, just note\nabout the proof of runtime here,",
    "start": "2329542",
    "end": "2337373"
  },
  {
    "text": "of course, it's large because\nit needs to find the-- I mean, what can you do? You need to at least\ncount the number of satisfying assignments.",
    "start": "2337373",
    "end": "2343210"
  },
  {
    "text": "It takes 2 to the n,\nat least, to find them. And then-- OK. So far, we gave some examples.",
    "start": "2343210",
    "end": "2350890"
  },
  {
    "text": "So where are we? We talked about IP. We showed the magical,\namazing sum-check protocol.",
    "start": "2350890",
    "end": "2357810"
  },
  {
    "text": "We showed how to use\nthe sum-check protocol # to give an IP for an\ninductive proof for #SAT.",
    "start": "2357810",
    "end": "2364240"
  },
  {
    "text": "In In some sense, maybe you're\nnot so blown away at this point # because, actually,\n#SAT, like a formula,",
    "start": "2364240",
    "end": "2371220"
  },
  {
    "text": "is really going to--\narithmetization is not like, wow, we know we all know that\nn is like multiplication, and AND and OR can be written\nas small arithmetic thing.",
    "start": "2371220",
    "end": "2380345"
  },
  {
    "text": "So it's actually an\narithmetic circuit. So it actually gives you a\nset of low-degree polynomials. So it calls for something.",
    "start": "2380345",
    "end": "2386680"
  },
  {
    "text": "It is a sum-check. Without much change, it presents\nitself almost as a sum-check.",
    "start": "2386680",
    "end": "2392640"
  },
  {
    "text": "So maybe we're not convinced of\nthe generality of the sum-check. And the next thing I want\nto do is show you actually",
    "start": "2392640",
    "end": "2399369"
  },
  {
    "text": "a completely\ndifferent thing that doesn't seem to be at all\nlow degree or anything, and try to show you how\nyou can use the sum-check.",
    "start": "2399370",
    "end": "2407630"
  },
  {
    "text": "And actually, this\ntakes us at a nice way into the idea of doubly\nefficient proofs.",
    "start": "2407630",
    "end": "2417320"
  },
  {
    "text": "So far, when we talked\nabout interactive proofs, our focus was the\nverifier is efficient. He's polynomial time.",
    "start": "2417320",
    "end": "2423079"
  },
  {
    "text": "The prover can be whatever. # And indeed, in the protocols,\nboth sum-check and #SAT, of course, the prover\nruns in exponential time.",
    "start": "2423080",
    "end": "2429200"
  },
  {
    "text": "He has no choice. He needs to do the computation. OK. The idea that-- so now\nlet's shift gears and talk",
    "start": "2429200",
    "end": "2436960"
  },
  {
    "text": "about the notion of a doubly\nefficient interactive proof. So the notion of a doubly\nefficient interactive proof--",
    "start": "2436960",
    "end": "2444230"
  },
  {
    "text": "the idea is actually,\nyou know what? So the main idea is we care\nabout the runtime of the proof.",
    "start": "2444230",
    "end": "2451160"
  },
  {
    "text": "So the prover paper\nis not all-powerful. It brings us to real life. It's very nice that the\nverifier is polynomial.",
    "start": "2451160",
    "end": "2457255"
  },
  {
    "text": "The prover is all-powerful. But guess what,\nall-powerful doesn't exist. Everything is limited,\nto some extent.",
    "start": "2457255",
    "end": "2463450"
  },
  {
    "text": "There's more powerful\nand less powerful, but there's not all-powerful. So what we want\nis, yes, the prover",
    "start": "2463450",
    "end": "2469222"
  },
  {
    "text": "is more powerful\nthan the verifier. Otherwise, we don't need it. The verifier doesn't need him. But even the prover\nis not all-powerful.",
    "start": "2469222",
    "end": "2474789"
  },
  {
    "text": "So in a double efficient\ninteractive proof, we want to say, the prover\nhas a problem at hand.",
    "start": "2474790",
    "end": "2480430"
  },
  {
    "text": "And he should not\nspend too much overhead in convincing the verifier\nthat his solution--",
    "start": "2480430",
    "end": "2490230"
  },
  {
    "text": "let's say that x\nis in the language. And this is interesting\neven if the problem--",
    "start": "2490230",
    "end": "2498730"
  },
  {
    "text": "so when we talk about doubly\nefficient interactive proofs, we even care of problems in p.",
    "start": "2498730",
    "end": "2504412"
  },
  {
    "text": "So often, when we talk\nabout interactive proof, we think, even, let's say, the\nproblem is polynomial time.",
    "start": "2504412",
    "end": "2510490"
  },
  {
    "text": "So I want to argue proofs of\npolynomial time, a language.",
    "start": "2510490",
    "end": "2517850"
  },
  {
    "text": "But I want to verify. Let's say the time to\ndetermine this language is, I don't know, n to the fourth.",
    "start": "2517850",
    "end": "2523210"
  },
  {
    "text": "I want the verifier\nto be linear time. So the idea is\nthere should always",
    "start": "2523210",
    "end": "2529269"
  },
  {
    "text": "be a gap between how\npowerful the prover is, and the verifier is weaker. But I really care about both.",
    "start": "2529270",
    "end": "2535687"
  },
  {
    "text": "The verifier should be\nvery, very efficient. And the prover should also\nbe somewhat efficient.",
    "start": "2535687",
    "end": "2540910"
  },
  {
    "text": "That's the idea. OK, so what is a doubly\nefficient interactive proof?",
    "start": "2540910",
    "end": "2545984"
  },
  {
    "start": "2545985",
    "end": "2552130"
  },
  {
    "text": "So a doubly efficient-- let's\nsay, for example, L in some D",
    "start": "2552130",
    "end": "2557500"
  },
  {
    "text": "time T. So it can be computed\nin deterministic time T. Again,",
    "start": "2557500",
    "end": "2563390"
  },
  {
    "text": "you can think of T even\nto be n to the fourth. It can be polynomial. Is an IP where the prover\nruntime-- the honest prover--",
    "start": "2563390",
    "end": "2577350"
  },
  {
    "text": "the honest prover's runtime\nis only polynomial overhead",
    "start": "2577350",
    "end": "2587450"
  },
  {
    "text": "in the time of\ndetermining the language. So it takes time T to determine\nruntime, at most, poly T.",
    "start": "2587450",
    "end": "2594110"
  },
  {
    "text": "And the verifier runtime\nshould be much, much less.",
    "start": "2594110",
    "end": "2603980"
  },
  {
    "text": "Ideally, we want the verifier\nto run in time almost linear",
    "start": "2603980",
    "end": "2609080"
  },
  {
    "text": "or quasi-linear-- so n polylog n, let's say, which\nis denoted by O tilde of n.",
    "start": "2609080",
    "end": "2615890"
  },
  {
    "text": "So ideally, we want the\nverifier to run in linear time or quasi-linear time. And the prover should not\nhave too much overhead.",
    "start": "2615890",
    "end": "2623092"
  },
  {
    "text": "Actually, ideally,\nthe prover should also have just linear overhead. But definitely,\nby definition, it",
    "start": "2623092",
    "end": "2628970"
  },
  {
    "text": "should not have more\nthan polynomial overhead. AUDIENCE: So again, here\nis just [INAUDIBLE]. PROFESSOR: And sorry, yes, yes.",
    "start": "2628970",
    "end": "2635340"
  },
  {
    "text": "Thank you. This is T of n. N is the instance size. Yes. So of course, the verifier\nneeds to read the instance,",
    "start": "2635340",
    "end": "2641100"
  },
  {
    "text": "but not do much more than that. So it's just an\ninteractive proof",
    "start": "2641100",
    "end": "2646800"
  },
  {
    "text": "where we care about both\nthe prover and the verifier. OK. And yeah, and so let me\nmention that these things",
    "start": "2646800",
    "end": "2655377"
  },
  {
    "text": "that people actually\ncare about because they use it in these blockchain\nprotocols and so on. And so they really actually--\na lot of work that's",
    "start": "2655377",
    "end": "2662160"
  },
  {
    "text": "done on this-- and I\nthink in the lecture notes of Justin\nTaylor, I'm now going to refer to these sections. We won't cover them,\nbut they exist sections",
    "start": "2662160",
    "end": "2669420"
  },
  {
    "text": "where he really talks\nabout the exact parameters, the exact numbers, the\nexact implementations, and so on, and so\nforth because these",
    "start": "2669420",
    "end": "2675690"
  },
  {
    "text": "are things that actually\npeople care about because they want to run it. So actually, we really\ncare about the overheads",
    "start": "2675690",
    "end": "2680790"
  },
  {
    "text": "here in practice, at least.  So far, we said the\nsum-check is really--",
    "start": "2680790",
    "end": "2687950"
  },
  {
    "text": "of course, it seems like\noutside the realm, even, of double efficiency.",
    "start": "2687950",
    "end": "2693710"
  },
  {
    "text": "But actually, now let me show\nyou a specific example, which, again, is beyond just\nan example because we'll",
    "start": "2693710",
    "end": "2701290"
  },
  {
    "text": "use it to teach something\nwhere it's actually in p. And I'll show you an interactive\nproof for this problem using",
    "start": "2701290",
    "end": "2711490"
  },
  {
    "text": "the sum-check\nprotocol-- a doubly efficient interactive\nproof for this problem. Yeah? AUDIENCE: They're\ndifferent roots, like T and the other D time.",
    "start": "2711490",
    "end": "2718203"
  },
  {
    "text": "PROFESSOR: Good. Yeah, yeah, yeah. So take any problem,\nany language, for which membership\nin this language",
    "start": "2718203",
    "end": "2723640"
  },
  {
    "text": "can be decided in time T. So these empty means there is\na deterministic algorithm that",
    "start": "2723640",
    "end": "2728680"
  },
  {
    "text": "runs in time T. What T\nis-- it can be anything. You can think of T of n to\nthe fourth, n to the 10th.",
    "start": "2728680",
    "end": "2734859"
  },
  {
    "text": "I don't know. N to the log n,\nquasi, poly, whatever. All I care-- so of course,\nthe prover needs to compute.",
    "start": "2734860",
    "end": "2742982"
  },
  {
    "text": "If he's proving something, he\nneeds to know that it's true. So he needs to do this\ndeterministic computation. So of course, he needs\nto run in time T,",
    "start": "2742982",
    "end": "2749490"
  },
  {
    "text": "but should not run in much\nmore than T. And by not more, theorists say, poly\nT. Applied people",
    "start": "2749490",
    "end": "2756019"
  },
  {
    "text": "say linear in T. The real\napplied say not more than 128",
    "start": "2756020",
    "end": "2761810"
  },
  {
    "text": "or whatever. But yeah, depending how far\nyou are in that spectrum.",
    "start": "2761810",
    "end": "2767510"
  },
  {
    "text": "OK, so good. So now let me show you\nhow a doubly efficient",
    "start": "2767510",
    "end": "2774560"
  },
  {
    "text": "interactive proof for\ncounting the number of triangles in a graph.",
    "start": "2774560",
    "end": "2780299"
  },
  {
    "text": "That's the example. Next week, I'm going to show\nyou actually interactive proof for all-- doubly efficient proof for\nall low-depth circuits.",
    "start": "2780300",
    "end": "2788130"
  },
  {
    "text": "So I'm going to\ngeneralize it by a lot. But let's start with an example. ",
    "start": "2788130",
    "end": "2797329"
  },
  {
    "text": "So let's say we're\ngiven a graph G,",
    "start": "2797330",
    "end": "2802650"
  },
  {
    "text": "and we want to count the number\nof triangles in the graph. So given G-- so we want\nan interactive proof",
    "start": "2802650",
    "end": "2811260"
  },
  {
    "text": "for counting the number\nof triangles in a graph",
    "start": "2811260",
    "end": "2822030"
  },
  {
    "text": "G with vertices V\nand edges E. OK.",
    "start": "2822030",
    "end": "2829300"
  },
  {
    "text": "So I want to cast it as a doubly\nefficient subset protocol-- kind of subset protocol, but--",
    "start": "2829300",
    "end": "2835200"
  },
  {
    "text": "so notice this is\na problem in p. I can go over all possible three\nvertices, triple to vertices,",
    "start": "2835200",
    "end": "2842220"
  },
  {
    "text": "and check if there's a triangle. So I can check this from\ntime n to the third.",
    "start": "2842220",
    "end": "2849000"
  },
  {
    "text": "I want that my\nverifier to be linear. So I want a prover that runs\nin time not much more than n",
    "start": "2849000",
    "end": "2854820"
  },
  {
    "text": "to the third. Or let's say polynomial time\nto convince a linear verifier",
    "start": "2854820",
    "end": "2860410"
  },
  {
    "text": "that this graph has\nexactly k triangles. ",
    "start": "2860410",
    "end": "2868000"
  },
  {
    "text": "And I want to cast it somehow\nin a sum-check protocol. So how do I do that?",
    "start": "2868000",
    "end": "2873760"
  },
  {
    "text": "So first, I need to come\nup with a polynomial. I need to embed a\npolynomial here.",
    "start": "2873760",
    "end": "2879560"
  },
  {
    "text": "Not, there's nothing\npolynomial-like here. Talking about graphs. So remember how I told you\neverything is a polynomial?",
    "start": "2879560",
    "end": "2887900"
  },
  {
    "text": "Everything can\nbecome a polynomial. This is an example\nthat shows you why you take anything\nand make it a polynomial.",
    "start": "2887900",
    "end": "2894230"
  },
  {
    "text": "So what is the idea? Let's look at the\nadjacency matrix corresponding to this\ngraph that checks",
    "start": "2894230",
    "end": "2901270"
  },
  {
    "text": "if there's an edge between\na pair of vertices. Now, we can write this\nmatrix as a function f",
    "start": "2901270",
    "end": "2909310"
  },
  {
    "text": "that goes from, let's\nsay, V, like number of vertices times number\nof vertices to 0, 1.",
    "start": "2909310",
    "end": "2914470"
  },
  {
    "text": "It takes a pair of vertices,\noutput 0 if there's no edge, 1 if there's an edge.",
    "start": "2914470",
    "end": "2919740"
  },
  {
    "text": "Let's denote the number\nof vertices here by n. So sorry, I denoted there\nthe input length by n--",
    "start": "2919740",
    "end": "2927070"
  },
  {
    "text": "close enough. It's not really the input\nlength, the number of vertices, but it's denoted by n. So now we can think of the\nadjacency matrix as a function.",
    "start": "2927070",
    "end": "2936280"
  },
  {
    "text": "So think of the\nadjacency matrix-- ",
    "start": "2936280",
    "end": "2943080"
  },
  {
    "text": "let me write it as a function,\nf, that goes from 0, 1",
    "start": "2943080",
    "end": "2948420"
  },
  {
    "text": "to the log n. I'm going to assume\nthat n is a power of 2.",
    "start": "2948420",
    "end": "2954010"
  },
  {
    "text": "So I'm going to\nthink of a vertex. So v, as I said, is of size n. I'll write it here, so\nit won't be in my way.",
    "start": "2954010",
    "end": "2962940"
  },
  {
    "text": "I'm going to think\nof the function as taking a pair of\nvertices where I represent",
    "start": "2962940",
    "end": "2971790"
  },
  {
    "text": "a vertex as a vector in 0, 1 to\nthe log n and any number of n,",
    "start": "2971790",
    "end": "2977062"
  },
  {
    "text": "like binary\nrepresentation of the-- I think of the vertices as\nnumbers between 1 and n. I'm thinking of the\nbinary representation.",
    "start": "2977062",
    "end": "2984760"
  },
  {
    "text": "And I output 0, 1\nwhether there's an edge or whether there's no edge\nbetween these two vertices.",
    "start": "2984760",
    "end": "2991870"
  },
  {
    "text": "So this says 1 if\nand only if there exists an edge between\nthe two vertices.",
    "start": "2991870",
    "end": "3002790"
  },
  {
    "text": "Now, suppose you want to argue\nthat the number of triangles is, let's say, k.",
    "start": "3002790",
    "end": "3011400"
  },
  {
    "text": "So what do you need to prove? You need to prove that the sum\nover all i, j, and k in n--",
    "start": "3011400",
    "end": "3021450"
  },
  {
    "text": "or let me even make myself\nin 0, 1 to the log n to make it easy for\nmyself because I'm",
    "start": "3021450",
    "end": "3027480"
  },
  {
    "text": "representing in binary. So for any three vertices, let's\ncount the number of triangles.",
    "start": "3027480",
    "end": "3035260"
  },
  {
    "text": "So when there's a triangle,\nif i and j are connected,",
    "start": "3035260",
    "end": "3041930"
  },
  {
    "text": "this is one, and f j,k is\nconnected, this is one, and f i,",
    "start": "3041930",
    "end": "3048661"
  },
  {
    "text": "k is connected, this is one. They all need to be connected in\norder for it to be a triangle.",
    "start": "3048662",
    "end": "3055035"
  },
  {
    "text": " So if it's a triangle, I get 1.",
    "start": "3055035",
    "end": "3061215"
  },
  {
    "text": "If it's not a triangle, I\nget 0 because one of them is going to be a 0. So I'm going to count\nthe number of triangles.",
    "start": "3061215",
    "end": "3067220"
  },
  {
    "text": " And I want to prove\ncheck that this is k--",
    "start": "3067220",
    "end": "3073690"
  },
  {
    "text": "almost, almost. I lied a little bit. I overcounted because there's\npermutation-- i j, k; j k, i.",
    "start": "3073690",
    "end": "3081850"
  },
  {
    "text": "So I need to divide\nby 1 over 6, which is the number of ways to permute\nany i j, k because any i j,",
    "start": "3081850",
    "end": "3087070"
  },
  {
    "text": "k is counted like\nall permutations. So this is what I want to prove.",
    "start": "3087070",
    "end": "3093230"
  },
  {
    "text": "I want to prove that the sum of\nall possible triangles i j, k--",
    "start": "3093230",
    "end": "3101270"
  },
  {
    "text": "I counted each i j, k here\nessentially six times, so I need to divide by 1 over 6.",
    "start": "3101270",
    "end": "3108230"
  },
  {
    "text": "The sum, the number of\ntriangles, is k, almost.",
    "start": "3108230",
    "end": "3113460"
  },
  {
    "text": "At least, I have some. It's getting to look\nlike a sum-check, but there's no algebra.",
    "start": "3113460",
    "end": "3118519"
  },
  {
    "text": "I just wrote in numbers. I mean, I took binary\nrepresentation. But at least, I have some sums.",
    "start": "3118520",
    "end": "3127470"
  },
  {
    "text": "So if I had some\nnice algebra here, if this was all over a finite\nfield, and let's say this f",
    "start": "3127470",
    "end": "3135410"
  },
  {
    "text": "was also low degree,\nthen I can use sum-check. So again, suppose this\nwas over a finite field.",
    "start": "3135410",
    "end": "3143055"
  },
  {
    "text": "And suppose this f\nwas very low degree, and the field was large,\nso we have good soundness. I want to prove sum of\nthis big F is k sum-check.",
    "start": "3143055",
    "end": "3157140"
  },
  {
    "text": "So I just need to tell\nyou how do I get to--",
    "start": "3157140",
    "end": "3162960"
  },
  {
    "text": "how do I add algebra to make\nthis degree a low degree? And where does the finite\nfield come from, and so on?",
    "start": "3162960",
    "end": "3171839"
  },
  {
    "text": "I'll do that. But before I'll do that, also\nnote the sum here is only over",
    "start": "3171840",
    "end": "3179069"
  },
  {
    "text": "0, 1 to the 3 log n. So remember, the problem was the\nprover runtime is very large.",
    "start": "3179070",
    "end": "3189430"
  },
  {
    "text": "It's H to the m\ntimes the time it takes to compute one function.",
    "start": "3189430",
    "end": "3196230"
  },
  {
    "text": "m times this n. This m is going to be small. But the H to the\nm is the problem.",
    "start": "3196230",
    "end": "3201490"
  },
  {
    "text": "But here, H to the m is just\n2 to the 3 log n to the log n.",
    "start": "3201490",
    "end": "3206610"
  },
  {
    "text": "So it's poly. So if I'm able to put a\nsum-check like algebra here,",
    "start": "3206610",
    "end": "3212650"
  },
  {
    "text": "I will get double-- the proof will still\nbe polynomial time, which is what I want.",
    "start": "3212650",
    "end": "3219520"
  },
  {
    "text": "The question is, how\ndo I put algebra here? ",
    "start": "3219520",
    "end": "3224829"
  },
  {
    "text": "So this is where-- ",
    "start": "3224830",
    "end": "3234970"
  },
  {
    "text": "so I'll say a little\nbit about this. And then we'll break for\ntoday and continue next week.",
    "start": "3234970",
    "end": "3241090"
  },
  {
    "text": "But there's a generic way\nto convert any function",
    "start": "3241090",
    "end": "3246430"
  },
  {
    "text": "into a polynomial. And the way to do it\nis via a technique",
    "start": "3246430",
    "end": "3252550"
  },
  {
    "text": "called low-degree extension. ",
    "start": "3252550",
    "end": "3265900"
  },
  {
    "text": "So if you actually\nremember, I started class with an example of the\nmatrix multiplication.",
    "start": "3265900",
    "end": "3273920"
  },
  {
    "text": "And if you remember the\nmatrix multiplication, also, there's no polynomial. It's a matrix, nothing.",
    "start": "3273920",
    "end": "3280170"
  },
  {
    "text": "But what we did-- the randomized algorithm\nthat we showed, we thought of a row in the\nmatrix as a polynomial.",
    "start": "3280170",
    "end": "3288930"
  },
  {
    "text": "So we took a row, which\nconsists of n elements, and we thought about it\nas a univariate polynomial",
    "start": "3288930",
    "end": "3295700"
  },
  {
    "text": "of degree n. Remember, we thought of\nthe row as coefficients",
    "start": "3295700",
    "end": "3300980"
  },
  {
    "text": "of the polynomial. So we thought it was a\npolynomial of degree n minus 1, I guess. There were n elements.",
    "start": "3300980",
    "end": "3306487"
  },
  {
    "text": "One is the free coefficient,\nso degree n minus 1. So we started already\nthe class with an example",
    "start": "3306487",
    "end": "3312440"
  },
  {
    "text": "that I have a row-- nothing, no algebra, nothing,\nan arbitrary row of matrix.",
    "start": "3312440",
    "end": "3317730"
  },
  {
    "text": "And we converted it to a\nunivariate polynomial of degree n, like the length of the row.",
    "start": "3317730",
    "end": "3325070"
  },
  {
    "text": "What we do here is\na very similar idea, but in the multivariate setting.",
    "start": "3325070",
    "end": "3331240"
  },
  {
    "text": "So what we can do-- we could have taken\nany n elements--",
    "start": "3331240",
    "end": "3337300"
  },
  {
    "text": "that row, for example. Or in this case, the elements\nare all the kind of--",
    "start": "3337300",
    "end": "3346119"
  },
  {
    "text": "for any F, you can think\nof it like a matrix. It's like n squared elements, if\nyou want, for any two elements,",
    "start": "3346120",
    "end": "3353330"
  },
  {
    "text": "whether there's a\nedge or not an edge. So you can think of it\nas n squared elements. It doesn't matter.",
    "start": "3353330",
    "end": "3358819"
  },
  {
    "text": "We can take any set of\nelements and convert it either",
    "start": "3358820",
    "end": "3364300"
  },
  {
    "text": "to a univariate polynomial, as\nwe did before of that degree. Or that's not good for us\nbecause here's the degree",
    "start": "3364300",
    "end": "3370869"
  },
  {
    "text": "is going to be n squared. The verifier runs and\nthe degree and more. It's not going to\nbe efficient enough.",
    "start": "3370870",
    "end": "3376670"
  },
  {
    "text": "But the idea is\nwe can convert it to a multivariate polynomial\nwith much, much smaller degree.",
    "start": "3376670",
    "end": "3384369"
  },
  {
    "text": "And that's what's called\nthe low-degree extension. So whereas before, we just\ndid a univariate polynomial--",
    "start": "3384370",
    "end": "3392670"
  },
  {
    "text": "so we had to put the n\nelements as coefficients.",
    "start": "3392670",
    "end": "3399119"
  },
  {
    "text": "Each one added a\ndegree, if you will. If we put it in a\nmultivariate polynomial--",
    "start": "3399120",
    "end": "3405710"
  },
  {
    "text": "so if we think of it\nas a polynomial over, let's say, H to the m, then we\ncan stack inside H to the m--",
    "start": "3405710",
    "end": "3415550"
  },
  {
    "text": "we can stack n points. We can make H and\nm much smaller-- each H and both H and m to be\nmuch, much smaller than that.",
    "start": "3415550",
    "end": "3423599"
  },
  {
    "text": "And that's what\nwe're going to do. So let me explain this\nmore and more precisely.",
    "start": "3423600",
    "end": "3429586"
  },
  {
    "text": " OK. ",
    "start": "3429586",
    "end": "3441740"
  },
  {
    "text": "OK, so here's the theorem\nwe're going to use for this. ",
    "start": "3441740",
    "end": "3450966"
  },
  {
    "text": "For any function, not\npolynomial, can be arbitrary, like the adjacency matrix\nfunction-- for any function f,",
    "start": "3450966",
    "end": "3461519"
  },
  {
    "text": "there it's from 0,\n1 to the 2 log n. But let me take it more\ngenerally from H to the m",
    "start": "3461520",
    "end": "3469020"
  },
  {
    "text": "to 0, 1. Again, in this example,\nH is just 0, 1.",
    "start": "3469020",
    "end": "3474660"
  },
  {
    "text": "And m is 2 log n because\nwe have there 2 log n. But let me give you\nsomething more generally. So take any function.",
    "start": "3474660",
    "end": "3481360"
  },
  {
    "text": "This is essentially any set. You can think of this\nas any set of this--",
    "start": "3481360",
    "end": "3489990"
  },
  {
    "text": "or this is equivalent to\nany element in 0, 1 to the H",
    "start": "3489990",
    "end": "3496020"
  },
  {
    "text": "to the m. So it's just a binary\nstring of length H to the m.",
    "start": "3496020",
    "end": "3503420"
  },
  {
    "text": "So take any binary string\nof length H to the m. It just tells you, for\neach element H of m",
    "start": "3503420",
    "end": "3510460"
  },
  {
    "text": "what the value is, 0 or 1. So for any function and any\nfinite field f that contains H--",
    "start": "3510460",
    "end": "3525720"
  },
  {
    "start": "3525720",
    "end": "3532180"
  },
  {
    "text": "of course, in that example\n0, 1, any f contains 0 and 1,",
    "start": "3532180",
    "end": "3538819"
  },
  {
    "text": "so that's not a problem. There exists a unique--",
    "start": "3538820",
    "end": "3545005"
  },
  {
    "text": " what's called\nlow-degree extension.",
    "start": "3545005",
    "end": "3550656"
  },
  {
    "text": " I'll explain what this\nmeans in a second.",
    "start": "3550656",
    "end": "3557020"
  },
  {
    "text": "It's a function f tilde\nfrom F to the n to F",
    "start": "3557020",
    "end": "3565970"
  },
  {
    "text": "such that-- so in what sense,\nis a low-degree extension. First, it's an extension,\nnamely f tilde.",
    "start": "3565970",
    "end": "3574940"
  },
  {
    "text": "If you look at an H to\nthe m, for the element and the little cube,\nit's exactly f.",
    "start": "3574940",
    "end": "3582410"
  },
  {
    "text": "So it extends. It extends f. F was an H to the m.",
    "start": "3582410",
    "end": "3587990"
  },
  {
    "text": "F tilde is in a bigger cube. It extends. So on the small\ncube, they agree.",
    "start": "3587990",
    "end": "3595700"
  },
  {
    "text": "The second thing is\nthat it's low degree. So it's a low-degree extension--\nan extension and a low degree.",
    "start": "3595700",
    "end": "3602880"
  },
  {
    "text": "How low? So f tilde is of degree H\nminus 1 in each variable.",
    "start": "3602880",
    "end": "3615085"
  },
  {
    "start": "3615085",
    "end": "3621000"
  },
  {
    "text": "So again, what is the theorem?",
    "start": "3621000",
    "end": "3627130"
  },
  {
    "text": "The theorem is you\ncan take any set-- if you want, you\ncan take any set.",
    "start": "3627130",
    "end": "3633190"
  },
  {
    "text": "So let's say I have n numbers. Take any fixed--\nso take any set.",
    "start": "3633190",
    "end": "3638980"
  },
  {
    "text": "Let's say fix any vector.",
    "start": "3638980",
    "end": "3645570"
  },
  {
    "text": "Let's say w, and let's\nsay 0, 1 to the n. ",
    "start": "3645570",
    "end": "3652320"
  },
  {
    "text": "You can always embed it. You can think of w--",
    "start": "3652320",
    "end": "3657839"
  },
  {
    "text": "and a equivalent way\nis to think of w-- oh, sorry. I meant to say,\nsorry, as a field.",
    "start": "3657840",
    "end": "3664330"
  },
  {
    "text": "Let's say w1 up to\nwn and 0, 1 to the n. ",
    "start": "3664330",
    "end": "3671790"
  },
  {
    "text": "You can embed it. You can think of it as a\nfunction from H to the m to 0,",
    "start": "3671790",
    "end": "3681010"
  },
  {
    "text": "1 as long as H to the m is n. So you have a long\nsequence of 0,",
    "start": "3681010",
    "end": "3688569"
  },
  {
    "text": "1's folded into a nice\ncube of size H to the m.",
    "start": "3688570",
    "end": "3697730"
  },
  {
    "text": "So essentially, you should think\nof the H representation of n--",
    "start": "3697730",
    "end": "3704550"
  },
  {
    "text": "the H representation. So H to the m is\nequivalent to the set.",
    "start": "3704550",
    "end": "3712250"
  },
  {
    "text": "You can think of a\nbijection between that and all the numbers between\n0 and 1 to between 1 up to n.",
    "start": "3712250",
    "end": "3718720"
  },
  {
    "text": "And now the claim is,\nactually, you can take this-- so this is the,\nlet's say, H by m.",
    "start": "3718720",
    "end": "3724430"
  },
  {
    "text": "You can extend it to a bigger\nfunction, tilde over F.",
    "start": "3724430",
    "end": "3733309"
  },
  {
    "text": "This is over F to the m\nsuch that it has degree",
    "start": "3733310",
    "end": "3739310"
  },
  {
    "text": "H minus 1 in each variable. So just note, if we\nthink of m as being 1,",
    "start": "3739310",
    "end": "3748440"
  },
  {
    "text": "the univariate case is\nexactly what we had before.",
    "start": "3748440",
    "end": "3754020"
  },
  {
    "text": "If you had just a\nstring of size--",
    "start": "3754020",
    "end": "3759770"
  },
  {
    "text": "if n is 1H,\nessentially is like n. I take n.",
    "start": "3759770",
    "end": "3765050"
  },
  {
    "text": "I just expand it in\nthis way to a degree n.",
    "start": "3765050",
    "end": "3770780"
  },
  {
    "text": "But then the degree\nis very large. That's not good. The verifier runs\nin time the degree. That's awful.",
    "start": "3770780",
    "end": "3776869"
  },
  {
    "text": "So I make the\ndegree much smaller. How do I make the\ndegree much smaller? I add more variables.",
    "start": "3776870",
    "end": "3782900"
  },
  {
    "text": "So the idea is add\nmany more variables. Now in each\ndimension, the degree",
    "start": "3782900",
    "end": "3791420"
  },
  {
    "text": "is only h because now I don't\nneed the size of H is n, but H to the m is n.",
    "start": "3791420",
    "end": "3798991"
  },
  {
    "text": "And now in each dimension, the\nnumber of elements is like H.",
    "start": "3798991",
    "end": "3804349"
  },
  {
    "text": "And the unit on each\ndimension, the degree will be H minus 1\ninstead of n minus 1,",
    "start": "3804350",
    "end": "3812290"
  },
  {
    "text": "like it was in the\nunivariate case. I'll prove all this, but this\nis just a high-level idea.",
    "start": "3812290",
    "end": "3819020"
  },
  {
    "text": "So again, the high-level idea-- we'll go into the proof\nnext time of this theorem. But the high-level idea is we\nall know by the univariate case",
    "start": "3819020",
    "end": "3828670"
  },
  {
    "text": "that you can take any\nstring of length n, encode it as a univariate\nfunction of degree n minus 1",
    "start": "3828670",
    "end": "3836590"
  },
  {
    "text": "by-- there's two ways of doing\nit-- either by thinking of the string as\nthe coefficients.",
    "start": "3836590",
    "end": "3841760"
  },
  {
    "text": "That's one element,\none way to do it. Another way to do it, which is\nhow the low-degree extension",
    "start": "3841760",
    "end": "3846880"
  },
  {
    "text": "works, is by thinking\nof the string as the value of the polynomial\nin, let's say, polynomial on 1,",
    "start": "3846880",
    "end": "3856110"
  },
  {
    "text": "2, 3, up to n. Let's say 1 up to\nn is in the field. So think of gfp, let's say.",
    "start": "3856110",
    "end": "3861180"
  },
  {
    "text": " Here, what we do--\nwe take your points.",
    "start": "3861180",
    "end": "3868130"
  },
  {
    "text": "We take a polynomial F\nfor which your points are sitting in this small cube.",
    "start": "3868130",
    "end": "3873750"
  },
  {
    "text": "So let's say you have a\nvector of size 1 up to n. We'll put here w1, w2, w3, wH--",
    "start": "3873750",
    "end": "3880850"
  },
  {
    "text": "all the w's we put here. And then the\ntheorem says there's a way to extend this\nentire thing into a bigger",
    "start": "3880850",
    "end": "3888770"
  },
  {
    "text": "polynomial of degree H minus 1\nin each variable such that the--",
    "start": "3888770",
    "end": "3898400"
  },
  {
    "text": "if you look at the\npolynomial in this cube, it's exactly what we had before. So you have your vector\nor your function from H",
    "start": "3898400",
    "end": "3908000"
  },
  {
    "text": "to the m to 0, 1. Here and the rest, it's just\nextended and extended in a way",
    "start": "3908000",
    "end": "3914339"
  },
  {
    "text": "that the degree of each\nvariable is H minus 1. So for example, if\nyou want H to the m",
    "start": "3914340",
    "end": "3924480"
  },
  {
    "text": "to be n, what you can take,\nfor example, is H to be log n.",
    "start": "3924480",
    "end": "3930840"
  },
  {
    "text": "The degree is only\nlog n, which is great. And you can take n to be\neven smaller than log n. If you do the math, it's going\nto be log n over log log n.",
    "start": "3930840",
    "end": "3939710"
  },
  {
    "text": " And note that the verifier runs\nin time that depends on m, m, H,",
    "start": "3939710",
    "end": "3947310"
  },
  {
    "text": "and D. And D is going to\nbe also H. So all of this is going to be poly\nlog, which is great.",
    "start": "3947310",
    "end": "3954180"
  },
  {
    "text": "So next time, what\nwe're going to do is prove this low-degree\nextension theorem and then show how to use\nit first for the triangle.",
    "start": "3954180",
    "end": "3962018"
  },
  {
    "text": "That would be pretty immediate. And then we'll\nshow how to use it for a general low-degree,\nlow-depth circuit.",
    "start": "3962018",
    "end": "3969030"
  },
  {
    "text": "OK, thanks. ",
    "start": "3969030",
    "end": "3971000"
  }
]