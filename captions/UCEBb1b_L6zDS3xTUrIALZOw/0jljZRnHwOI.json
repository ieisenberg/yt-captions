[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "7029"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "7030",
    "end": "13990"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13990",
    "end": "31140"
  },
  {
    "text": "PROFESSOR: All right. Let's get started, everyone. So, good afternoon.",
    "start": "31140",
    "end": "37340"
  },
  {
    "text": "Welcome to the second lecture\nof 60001 and also of 600.",
    "start": "37340",
    "end": "42470"
  },
  {
    "text": "So as always, if you'd like to\nfollow along with the lectures, please go ahead and download\nthe slides and the code",
    "start": "42470",
    "end": "48190"
  },
  {
    "text": "that I'll provide at least an\nhour before class every day.",
    "start": "48190",
    "end": "53269"
  },
  {
    "text": "All right. So a quick recap of\nwhat we did last time. So last time, we talked a little\nbit about what a computer is.",
    "start": "53270",
    "end": "60609"
  },
  {
    "text": "And I think the main takeaway\nfrom the last lecture is really that a computer only\ndoes what it is told, right?",
    "start": "60610",
    "end": "66730"
  },
  {
    "text": "So it's not going to\nspontaneously make decisions on its own. You, as the programmer,\nhave to tell it",
    "start": "66730",
    "end": "72670"
  },
  {
    "text": "what you want it to do\nby writing programs. OK. So we talked about\nsimple objects.",
    "start": "72670",
    "end": "78610"
  },
  {
    "text": "And these objects were\nof different types. So we saw integers,\nfloats, and Booleans.",
    "start": "78610",
    "end": "85060"
  },
  {
    "text": "And then we did a couple of\nsimple operations with them. Today, we're going to\nlook at a different--",
    "start": "85060",
    "end": "90250"
  },
  {
    "text": "a new type of object\ncalled a string. And then we're\ngoing to introduce some more powerful things\nin our programming toolbox.",
    "start": "90250",
    "end": "102120"
  },
  {
    "text": "So we're going to look at how\nto branch within a program, and how to make things-- how\nto make the computer repeat",
    "start": "102120",
    "end": "107440"
  },
  {
    "text": "certain tasks\nwithin our program. All right. So let's begin by\nlooking at strings.",
    "start": "107440",
    "end": "113530"
  },
  {
    "text": "So strings are a\nnew object type. We've seen so far\nintegers, which were whole numbers, floats,\nwhich were decimal numbers,",
    "start": "113530",
    "end": "122380"
  },
  {
    "text": "and we have seen Booleans,\nwhich were true and false. So strings are going to be\nsequences of characters.",
    "start": "122380",
    "end": "129789"
  },
  {
    "text": "And these characters\ncan be anything. They can be letters,\ndigits, special characters,",
    "start": "129789",
    "end": "134840"
  },
  {
    "text": "and also spaces. And you tell Python that you're\ntalking about a string object",
    "start": "134840",
    "end": "140560"
  },
  {
    "text": "by enclosing it in\nquotation marks. So in this case, I'm creating an\nobject whose value is h-e-l-l-o",
    "start": "140560",
    "end": "149860"
  },
  {
    "text": "space t-h-e-r-e. And Python knows it's a\nstring object, because we're enclosing it in quotations.",
    "start": "149860",
    "end": "156387"
  },
  {
    "text": "They can be either double\nquotes or single quotes, but as long as you're\nconsistent, it doesn't matter. And this object, we're binding\nit to this variable named hi.",
    "start": "156387",
    "end": "166739"
  },
  {
    "text": "And we're using that using\nthe equals sign, which is the assignment operator. So from now on, whenever we\nrefer to this variable hi,",
    "start": "166740",
    "end": "175319"
  },
  {
    "text": "Python is going to say, oh,\nI know what the value is, and it's that string\nof characters.",
    "start": "175320",
    "end": "180864"
  },
  {
    "text": "So we're going to\nlearn about two things that you can do on strings\ntoday, two operations. One is to concatenate them.",
    "start": "180864",
    "end": "187150"
  },
  {
    "text": "And concatenation is\nreally just a fancy word for using this plus\noperator, which means put the strings together.",
    "start": "187150",
    "end": "194810"
  },
  {
    "text": "So I have this original\nvariable named hi, and I create a new\nvariable called name.",
    "start": "194810",
    "end": "200920"
  },
  {
    "text": "And in it, I'm going\nto assign the string a-n-a to the variable name.",
    "start": "200920",
    "end": "207290"
  },
  {
    "text": "And when I use the plus\noperator in between hi and name, those two variables,\nPython is going",
    "start": "207290",
    "end": "212920"
  },
  {
    "text": "to look at the\nvalues of those two, and it's going to just\nput them together.",
    "start": "212920",
    "end": "218329"
  },
  {
    "text": "OK. I'm going to switch to Spider. And this is just that\nexample from the slides.",
    "start": "218330",
    "end": "229717"
  },
  {
    "text": "So let's see what happens. So I have the variable\nhi, the variable name,",
    "start": "229717",
    "end": "234790"
  },
  {
    "text": "and I'm just concatenating\nthose two together. And then I'm going\nto print that out. So if I run the code, notice\nit prints out \"hello thereana.\"",
    "start": "234790",
    "end": "245450"
  },
  {
    "text": "There's no space. And there's no space because\nthe concatenation operator, the plus, doesn't add\nany spaces implicitly.",
    "start": "245450",
    "end": "253490"
  },
  {
    "text": "So again, another example\nof just computer just doing what it's told. If we want to add a space,\nwe'd have to actually insert",
    "start": "253490",
    "end": "260569"
  },
  {
    "text": "the space manually. So that's this\nline here, line 8. And in this line,\nwe're concatenating",
    "start": "260570",
    "end": "267230"
  },
  {
    "text": "the value of the\nvariable hi with a space. Notice we're putting\nit in quotation marks.",
    "start": "267230",
    "end": "273800"
  },
  {
    "text": "Just a space. And then with name. So if we'll go ahead\nand print that value,",
    "start": "273800",
    "end": "281520"
  },
  {
    "text": "notice this was that\ngarbage greeting there. And now we have a\nproper greeting, right?",
    "start": "281520",
    "end": "287610"
  },
  {
    "start": "287610",
    "end": "292849"
  },
  {
    "text": "So that's the concatenation\nbetween strings. And then the other\nthing we're going to look at related to\nstrings is the star operator.",
    "start": "292850",
    "end": "304190"
  },
  {
    "text": "So that's this one\nhere on line 10. So Python allows you to use\nthe star operator, which",
    "start": "304190",
    "end": "309760"
  },
  {
    "text": "stands for multiplication,\nbetween a string and a number.",
    "start": "309760",
    "end": "315420"
  },
  {
    "text": "And when you do that,\nPython interprets it as repeat that string\nthat many number of times.",
    "start": "315420",
    "end": "325500"
  },
  {
    "text": "So in this case, I'm\ncreating a silly greeting, and I'm concatenating the value\nof hi, which is \"hello there\"",
    "start": "325500",
    "end": "333500"
  },
  {
    "text": "with the space plus the name. So notice here, I'm\nusing parentheses",
    "start": "333500",
    "end": "338870"
  },
  {
    "text": "to tell Python, do this\noperation first, and then multiply whatever the\nresult of this is by 3.",
    "start": "338870",
    "end": "348200"
  },
  {
    "text": "So if I print that\nout, it's going to multiply the space\nwith my name three times,",
    "start": "348200",
    "end": "355320"
  },
  {
    "text": "and it's going to concatenate\nthat with \"hello there.\" So that's exactly what\nit printed out there.",
    "start": "355320",
    "end": "362669"
  },
  {
    "text": "Last lecture, we talked\na little bit about print. Today, I'm going to talk about\nsome nuances related to print.",
    "start": "362670",
    "end": "369070"
  },
  {
    "text": "So you use print to\ninteract with the user. It's cool to write programs that\nprint things out to the user.",
    "start": "369070",
    "end": "375720"
  },
  {
    "text": "So the key word\nhere being print. And then you put\nparentheses after print.",
    "start": "375720",
    "end": "382080"
  },
  {
    "text": "And in the parentheses,\nyou put in whatever you want to show the user.",
    "start": "382080",
    "end": "387760"
  },
  {
    "text": "So in this little\nprogram, I have-- I created a variable named x. I assigned it the value\n1, and then I print 1.",
    "start": "387760",
    "end": "395790"
  },
  {
    "text": "Here, I'm casting. So I'm taking the number\none, the integer 1,",
    "start": "395790",
    "end": "400860"
  },
  {
    "text": "and I'm casting it to a string. And you'll see why in a moment.",
    "start": "400860",
    "end": "406169"
  },
  {
    "text": "So I want to bring\nto your attention a couple of things here. So in the first print, I'm\nusing commas everywhere here.",
    "start": "406170",
    "end": "414780"
  },
  {
    "text": "And in the second\nprint, I'm using plus. ",
    "start": "414780",
    "end": "421099"
  },
  {
    "text": "So by definition, if\nyou-- you can use commas inside a print-- inside\nthe parentheses of print.",
    "start": "421100",
    "end": "428840"
  },
  {
    "text": "And if you use a comma, Python\nis going to automatically add a space in\nbetween the two things",
    "start": "428840",
    "end": "437090"
  },
  {
    "text": "that the comma is in\nbetween, the values. So \"my fav num is\"\nis the first thing.",
    "start": "437090",
    "end": "443490"
  },
  {
    "text": "And the second thing is\nwhatever's after the comma. Let's take x.",
    "start": "443490",
    "end": "449090"
  },
  {
    "text": "So if you use a comma, Python\nis going to automatically insert a space for you.",
    "start": "449090",
    "end": "454580"
  },
  {
    "text": "Sometimes, you might want\nthat, sometimes you might not. If you don't want that, you\ncan use the concatenation",
    "start": "454580",
    "end": "459980"
  },
  {
    "text": "operation, the plus. And you can add all\nof your little bits together to create\none big string.",
    "start": "459980",
    "end": "468210"
  },
  {
    "text": "If you're using\ncommas, the items, the objects in\nbetween the commas, do not all have to be strings.",
    "start": "468210",
    "end": "474350"
  },
  {
    "text": "That's the plus side\nof using commas. But the downside is you\nget spaces everywhere.",
    "start": "474350",
    "end": "480020"
  },
  {
    "text": "If you use plus\noperator, the plus side is Python does exactly\nwhat you tell it to do,",
    "start": "480020",
    "end": "486889"
  },
  {
    "text": "but everything has to\nbe a string object. So \"my fav num is\"\nis a string object.",
    "start": "486890",
    "end": "492680"
  },
  {
    "text": "You have to convert all of\nyour numbers to string objects, and so on.",
    "start": "492680",
    "end": "498330"
  },
  {
    "text": "So if we look at Spider--\nThis is the same-- almost",
    "start": "498330",
    "end": "509740"
  },
  {
    "text": "the same code. So here, I don't\nhave spaces anywhere. So you can see that\nthe first line here",
    "start": "509740",
    "end": "517780"
  },
  {
    "text": "has commas everywhere. So I'm going to have spaces in\nbetween every one of the things",
    "start": "517780",
    "end": "523120"
  },
  {
    "text": "that I'm printing out. This line here is sort of a\ncombination between commas",
    "start": "523120",
    "end": "530970"
  },
  {
    "text": "and concatenation. So depending on where\nI used the comma,",
    "start": "530970",
    "end": "536600"
  },
  {
    "text": "I'm going to have\nan extra space. And this line here just has\nconcatenation everywhere.",
    "start": "536600",
    "end": "542100"
  },
  {
    "text": "So if I run this, notice this\nvery first line added spaces",
    "start": "542100",
    "end": "548240"
  },
  {
    "text": "everywhere in between\nall my objects. The second one added\nspaces somewhere. And you can sort of trace\nthrough and see exactly where",
    "start": "548240",
    "end": "554240"
  },
  {
    "text": "the spaces were added. And the last line here\ndidn't add spaces anywhere.",
    "start": "554240",
    "end": "561018"
  },
  {
    "start": "561018",
    "end": "573220"
  },
  {
    "text": "So printing things out\nto the console is nice, but the second part of sort of\nwriting an interactive program",
    "start": "573220",
    "end": "580860"
  },
  {
    "text": "is getting input from the user. And that's the more\ninteresting part. So if you've done problem set 0,\nyou might have sort of already",
    "start": "580860",
    "end": "589140"
  },
  {
    "text": "tried to understand\nthis on your own. But here we are. So the way you get\ninput from the user",
    "start": "589140",
    "end": "595649"
  },
  {
    "text": "is using this command\nfunction called input. And inside the parentheses,\nyou type in whatever you'd",
    "start": "595650",
    "end": "603630"
  },
  {
    "text": "like to prompt the user with. So in this case, in my\nexample here, I have input,",
    "start": "603630",
    "end": "611490"
  },
  {
    "text": "and then here I said\n\"type anything.\" So the user is going\nto see this text here,",
    "start": "611490",
    "end": "616740"
  },
  {
    "text": "and then the program\nis just going to stop. And it's going to\nwait for the user to type in something\nand hit Enter.",
    "start": "616740",
    "end": "623759"
  },
  {
    "text": "As soon as the user\ntypes in Enter, whatever the user types\nin becomes a string.",
    "start": "623760",
    "end": "631470"
  },
  {
    "text": "If a user types in a\nnumber, for example, that becomes the\nstring of that number.",
    "start": "631470",
    "end": "636804"
  },
  {
    "text": "So everything the\nuser types in is going to be made as a string. ",
    "start": "636804",
    "end": "643180"
  },
  {
    "text": "In this line right here,\nwhatever these the user types in becomes a string. And we're going to\nbind that string object",
    "start": "643180",
    "end": "650770"
  },
  {
    "text": "to this variable named text. So now, further in my\nprogram, I could do whatever",
    "start": "650770",
    "end": "656680"
  },
  {
    "text": "I want with this variable text. In this case, I'm\ngoing to print 5*text.",
    "start": "656680",
    "end": "662320"
  },
  {
    "text": "OK. So if the user, for\nexample, gave me \"ha,\" I'm going to print \"ha\" 5 times.",
    "start": "662320",
    "end": "670029"
  },
  {
    "text": "If the user gave\nme 5, what do you think the user is--\nwhat do you think",
    "start": "670030",
    "end": "675150"
  },
  {
    "text": "is going to be printed out? 25 or 5 five times?",
    "start": "675150",
    "end": "682551"
  },
  {
    "text": "Great. Yes. Exactly. 5 five times. ",
    "start": "682551",
    "end": "688270"
  },
  {
    "text": "Oftentimes, you don't want to\nwork with numbers as strings, right? You want to work with\nnumbers as numbers, right?",
    "start": "688270",
    "end": "694690"
  },
  {
    "text": "So you have to cast. And we learned\nthat last lecture. You cast by just putting\nin this little bit",
    "start": "694690",
    "end": "701020"
  },
  {
    "text": "right in front of the input. And you can cast it to\nwhatever type you want. Here I cast it to an int, but\nyou can also cast to a float",
    "start": "701020",
    "end": "708310"
  },
  {
    "text": "if you want to work with floats. And that converts whatever\nthe user typed in,",
    "start": "708310",
    "end": "713770"
  },
  {
    "text": "as long as it's some number that\nPython knows how to convert, into the number itself.",
    "start": "713770",
    "end": "719150"
  },
  {
    "text": "So in this case, if\nthe user gives me 5, I'm going to print out 5 times\n5 instead of 5 five times.",
    "start": "719150",
    "end": "727190"
  },
  {
    "text": "So that's the code here.",
    "start": "727190",
    "end": "732300"
  },
  {
    "text": " So the first bit\nis I'm going to get the user to type in anything,\nand I'm going to put 555.",
    "start": "732300",
    "end": "743190"
  },
  {
    "text": "And then when I type in the\nnumber, since I'm casting it, I'm going to do operations\nwith the number. Yeah, question.",
    "start": "743190",
    "end": "748620"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]  PROFESSOR: Why do you\nwant to cast to-- oh.",
    "start": "748620",
    "end": "757510"
  },
  {
    "text": "The question is why do you\nwant to cast to a string? Why do you want to cast\na string to a number?",
    "start": "757510",
    "end": "762910"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]  PROFESSOR: Oh, so\nPython always--",
    "start": "762910",
    "end": "770320"
  },
  {
    "text": "whatever you type\nin, just by default, by definition of\nthe input command, Python always makes it a string.",
    "start": "770320",
    "end": "778029"
  },
  {
    "text": "So if you want to\nwork with numbers, you have to explicitly\ntell it, I'm going to work with a number.",
    "start": "778030",
    "end": "783199"
  },
  {
    "text": "So even if you give\nit the number 5, it's going to think\nit's the string 5.",
    "start": "783200",
    "end": "788270"
  },
  {
    "text": "Yeah. That's just how input works. ",
    "start": "788270",
    "end": "793960"
  },
  {
    "text": "The next thing we're\ngoing to look at is ways that you can start\nadding tests in your code.",
    "start": "793960",
    "end": "805330"
  },
  {
    "text": "And before you can start\nadding tests in your code, you need to be able to\ndo the actual tests.",
    "start": "805330",
    "end": "812800"
  },
  {
    "text": "So this is where comparison\noperators come in.",
    "start": "812800",
    "end": "819850"
  },
  {
    "text": "So here, let's assume that\ni and j are variables. The following comparisons are\ngoing to give you a Boolean.",
    "start": "819850",
    "end": "828070"
  },
  {
    "text": "So it's either going to say,\nthis is true or this is false. So that's going to be your test.",
    "start": "828070",
    "end": "834850"
  },
  {
    "text": "So if i and j are\nvariables, you're allowed to compare\nints with ints, floats with floats,\nstrings with strings.",
    "start": "834850",
    "end": "841900"
  },
  {
    "text": "And you're allowed\nto compare ints and floats between\nthemselves, but you're not allowed to compare a\nstring with a number.",
    "start": "841900",
    "end": "849520"
  },
  {
    "text": "In fact, if you even try to\ndo that in Python-- in Spider here, if I try to say, is\nthe letter a greater than 5?",
    "start": "849520",
    "end": "858370"
  },
  {
    "text": "I get some angry\ntext right here. And this just tells\nme Python doesn't",
    "start": "858370",
    "end": "864370"
  },
  {
    "text": "understand the\nmeaning of-- how do I compare a string with a number? ",
    "start": "864370",
    "end": "870899"
  },
  {
    "text": "OK. So just like in math, we can\ndo these usual comparisons.",
    "start": "870900",
    "end": "876120"
  },
  {
    "text": "We can say if something\nis greater than something, greater or equal to, less\nthan, less than or equal to.",
    "start": "876120",
    "end": "881160"
  },
  {
    "text": "I'd like to bring to your\nattention the equality. So the single equals\nsign is an assignment.",
    "start": "881160",
    "end": "886800"
  },
  {
    "text": "So you're taking a\nvalue, and you're assigning it to a variable. But when you're doing\nthe double equals sign, this is the test for equality.",
    "start": "886801",
    "end": "893579"
  },
  {
    "text": "Is the value of\nvariable i the same as the value of the variable j? And that's, again,\nalso going to give you",
    "start": "893580",
    "end": "899970"
  },
  {
    "text": "a Boolean either true or false. And you can also test for\ninequality with the exclamation",
    "start": "899970",
    "end": "905449"
  },
  {
    "text": "equal. So that means, is the\nvalue of the variable i not equal to the value\nof the variable j?",
    "start": "905450",
    "end": "912029"
  },
  {
    "text": "True if yes, false if no.  OK.",
    "start": "912030",
    "end": "917260"
  },
  {
    "text": "So those are comparison\noperators on integer, floats, and strings. On Booleans, you can do\nsome logic operators.",
    "start": "917260",
    "end": "925620"
  },
  {
    "text": "And the simplest\nis just inverting. So if a is a variable\nthat has a Boolean value,",
    "start": "925620",
    "end": "935760"
  },
  {
    "text": "not a is just\ngoing to invert it. So if a is true, then not\na is false, and vice versa.",
    "start": "935760",
    "end": "942620"
  },
  {
    "text": "This is a table that sort of\nrepresents what I've said here. So you can do-- you\ncan use and and or.",
    "start": "942620",
    "end": "949750"
  },
  {
    "text": "These are key words in Python. You can use those two\nkey words on variables, on Boolean variables.",
    "start": "949750",
    "end": "957850"
  },
  {
    "text": "And you get the result\na and b is only true if both a and b are true.",
    "start": "957850",
    "end": "964720"
  },
  {
    "text": "And a or b is only false\nif a and b are false.",
    "start": "964720",
    "end": "971019"
  },
  {
    "text": "And this is the complete\ntable just in case you need to reference it. ",
    "start": "971020",
    "end": "977220"
  },
  {
    "text": "All right. So now that we have ways to do\nlogical-- question right there. AUDIENCE: [INAUDIBLE] ",
    "start": "977220",
    "end": "986107"
  },
  {
    "text": "PROFESSOR: Yeah, great question. So what does it mean to\ncompare a string with a string with the greater than? So that's just going to compare\nthem, lexicographically.",
    "start": "986107",
    "end": "994100"
  },
  {
    "text": "So does it come first\nin the alphabet? So we can even test that out.",
    "start": "994100",
    "end": "999440"
  },
  {
    "text": "We can say, is a greater than b?",
    "start": "999440",
    "end": "1004490"
  },
  {
    "text": "And it's false.  So b comes later in\nthe alphabet than a.",
    "start": "1004490",
    "end": "1010153"
  },
  {
    "text": " OK. So now we have ways\nto do the tests.",
    "start": "1010153",
    "end": "1016649"
  },
  {
    "text": "So we can add some branching\nto our programming toolbox",
    "start": "1016650",
    "end": "1022650"
  },
  {
    "text": "now that we have\nways to do tests. This is a map of MIT. I'm going to go through\nsort of a little example",
    "start": "1022650",
    "end": "1030329"
  },
  {
    "text": "to motivate why we would want\nto do branching in our code. And I think after this lecture,\nyou'll be able to sort of code",
    "start": "1030329",
    "end": "1037740"
  },
  {
    "text": "up this algorithm that\nI'm going to explain. So most of us see MIT as a maze. I first did when I came here.",
    "start": "1037740",
    "end": "1043470"
  },
  {
    "text": " When I first came\nhere, obviously, I signed up for the free\nfood mailing list.",
    "start": "1043470",
    "end": "1050650"
  },
  {
    "text": "And MIT, being a maze, I\nhad no idea where to go, what the shortest\npath was to free food.",
    "start": "1050650",
    "end": "1057140"
  },
  {
    "text": "So one way to think about\nit is all I wanted to do was get to the free food.",
    "start": "1057140",
    "end": "1064630"
  },
  {
    "text": "A very simple algorithm to\nget there would be to say, OK, I'm going take\nmy right hand, and I'm going to make sure\nthat my right hand is always",
    "start": "1064630",
    "end": "1071631"
  },
  {
    "text": "on a wall. And I'm going to go around\ncampus with my right hand always being at a wall.",
    "start": "1071631",
    "end": "1076900"
  },
  {
    "text": "And eventually, I'll get\nto where the free food is. There might not be\nany left, right? But I'll be there.",
    "start": "1076900",
    "end": "1083170"
  },
  {
    "text": "So the algorithm is as follows. If my right hand always\nhas to be on a wall, then I'm going to\nsay, if there's",
    "start": "1083170",
    "end": "1090400"
  },
  {
    "text": "no wall to my right\nside, then I'm going to go right\nuntil I get to a wall. ",
    "start": "1090400",
    "end": "1097840"
  },
  {
    "text": "Then if there's a wall to my\nright, and I can go forward, I'm just going to\nkeep going forward.",
    "start": "1097840",
    "end": "1106090"
  },
  {
    "text": "If I keep going forward, and\nthere's a wall to my right and in front of me, I'm going\nto turn around and go left.",
    "start": "1106090",
    "end": "1111700"
  },
  {
    "text": "And then if there's a wall\nto my right, in front of me, and to the left, then I'm going\nto turn around and go back.",
    "start": "1111700",
    "end": "1117130"
  },
  {
    "text": "So with this fairly\nsimple algorithm, I just follow the path always\nkeeping the wall to my right.",
    "start": "1117130",
    "end": "1126840"
  },
  {
    "text": "And eventually, I would\nend up where I need to be. So notice, I used, just in\nplain English, a few key words.",
    "start": "1126840",
    "end": "1134110"
  },
  {
    "text": "If, otherwise, things like that. So in programming, we have\nthose same constructs.",
    "start": "1134110",
    "end": "1141640"
  },
  {
    "text": "And those same sort\nof intuitive words can be used to tell\nPython to do something",
    "start": "1141640",
    "end": "1147250"
  },
  {
    "text": "or to do something else or to\nchoose from a different set of possibilities.",
    "start": "1147250",
    "end": "1154690"
  },
  {
    "text": "And this way, we\ncan get the computer to make decisions for us. And you might be\nthinking, well, you",
    "start": "1154690",
    "end": "1160150"
  },
  {
    "text": "said that computers can't\nmake decisions on their own. It's not. You, as programmers, are\ngoing to build these decisions",
    "start": "1160150",
    "end": "1166600"
  },
  {
    "text": "into the program,\nand all the computer is going to do is going to reach\nthe decision point and say,",
    "start": "1166600",
    "end": "1171950"
  },
  {
    "text": "OK, this is a decision\npoint, should I go left or should I go right? Or which one do I pick? And these sort of decisions are\ncreated by you as a programmer.",
    "start": "1171950",
    "end": "1180190"
  },
  {
    "text": "And the computer just\nhas to make the decision and choose a path. OK. So in programming, there's\nthree sort of simple ways",
    "start": "1180190",
    "end": "1187720"
  },
  {
    "text": "that you can add control\nflow to your programs. And that's making one\ndecision and choosing",
    "start": "1187720",
    "end": "1193480"
  },
  {
    "text": "whether to execute something\nor execute something else. The first is a simple if.",
    "start": "1193480",
    "end": "1201820"
  },
  {
    "text": "And given a program\nthat just linearly has statements\nthat get executed,",
    "start": "1201820",
    "end": "1207490"
  },
  {
    "text": "whenever I reach\nan if statement, you're going to\ncheck the condition.",
    "start": "1207490",
    "end": "1213947"
  },
  {
    "text": "The condition is\ngoing to be something that's going to get evaluated\nto either true or false. ",
    "start": "1213947",
    "end": "1221700"
  },
  {
    "text": "So I've reached\nthe condition here. And if the condition\nis true, then I'm",
    "start": "1221700",
    "end": "1226830"
  },
  {
    "text": "going to additionally execute\nthis extra set of expressions. But if the condition\nis false, then I'm",
    "start": "1226830",
    "end": "1233160"
  },
  {
    "text": "just going to keep going\nthrough the program and not execute that\nextra set of instructions. ",
    "start": "1233160",
    "end": "1241590"
  },
  {
    "text": "How does Python know which\ninstructions to execute? They're going to be inside\nthis what we call code block.",
    "start": "1241590",
    "end": "1248549"
  },
  {
    "text": "And the code block is\ndenoted by indentation. So it's going to be\neverything that's indented is part of\nthat if code block.",
    "start": "1248550",
    "end": "1258049"
  },
  {
    "text": "Typically, four\nspaces is indentation. OK. So that's how you\nwrite code that",
    "start": "1258050",
    "end": "1266970"
  },
  {
    "text": "decides whether to execute\nthis extra thing or not. Now let's say I don't just\nwant to execute an extra thing,",
    "start": "1266970",
    "end": "1274409"
  },
  {
    "text": "I want to reach a\npoint where I say, I'll either go down this path\nor I'll do something else.",
    "start": "1274410",
    "end": "1282510"
  },
  {
    "text": "That's this right here.",
    "start": "1282510",
    "end": "1287980"
  },
  {
    "text": "So this if else construct\nsays this is my code,",
    "start": "1287980",
    "end": "1294309"
  },
  {
    "text": "I've reached my\ndecision point here, if the condition\ninside the if is true,",
    "start": "1294310",
    "end": "1302059"
  },
  {
    "text": "then I'm going to execute maybe\nthis set of statements here. ",
    "start": "1302060",
    "end": "1308750"
  },
  {
    "text": "But if the condition\nis not true, then I'm not going to execute\nthat set of statements,",
    "start": "1308750",
    "end": "1313860"
  },
  {
    "text": "and instead I'm going to\nexecute under whatever else is.",
    "start": "1313860",
    "end": "1320790"
  },
  {
    "text": "So using this\nconstruct, I'm either going to do one set of\nexpressions or the other, but never both.",
    "start": "1320790",
    "end": "1326870"
  },
  {
    "text": "And after I've executed\none or the other, I'm going to continue on with\njust the regular execution of the program. ",
    "start": "1326870",
    "end": "1340009"
  },
  {
    "text": "OK. So we're able to either\nchoose one thing, choose one thing or\nanother, but what if we want to have more than one choice?",
    "start": "1340010",
    "end": "1347570"
  },
  {
    "text": "So if some number is equal\nto zero, I want to do this. If it's equal to 1,\nI want to do this.",
    "start": "1347570",
    "end": "1353530"
  },
  {
    "text": "If it's equal to 2, I want\nto do this, and so on. That's where this\nlast one comes in.",
    "start": "1353530",
    "end": "1359020"
  },
  {
    "text": "And we introduced this other\nkey word here called elif.",
    "start": "1359020",
    "end": "1365740"
  },
  {
    "text": "So that stands for\nshort form for else if. So first we check if\nthis condition is true.",
    "start": "1365740",
    "end": "1373250"
  },
  {
    "text": "So we're going\nthrough our program, we've reached our\ndecision point, if the condition is true,\nwe're going to execute maybe",
    "start": "1373250",
    "end": "1379900"
  },
  {
    "text": "this set of instructions.  If the condition is\nnot true, maybe we'll",
    "start": "1379900",
    "end": "1386480"
  },
  {
    "text": "check-- if the\ncondition is not true, we will check this\nnext condition.",
    "start": "1386480",
    "end": "1391940"
  },
  {
    "text": "That's part of the\nelif right here. And if that one's\ntrue, we're going to execute a different\nset of instructions.",
    "start": "1391940",
    "end": "1398720"
  },
  {
    "text": "You can have more than one elif. And depending on\nwhich one's true, you're going to execute a\ndifferent set of instructions.",
    "start": "1398720",
    "end": "1405950"
  },
  {
    "text": "And then this last else\nis sort of a catch all where if none of the previous\nconditions were true,",
    "start": "1405950",
    "end": "1411510"
  },
  {
    "text": "then just do this last\nset of expressions. So in this case, you're\ngoing to choose between one",
    "start": "1411510",
    "end": "1418190"
  },
  {
    "text": "of these three-- one\nof these four roots, or however many you have. And then when you're\ndone making your choice,",
    "start": "1418190",
    "end": "1425030"
  },
  {
    "text": "you're going to execute the\nremaining set of instructions. ",
    "start": "1425030",
    "end": "1431270"
  },
  {
    "text": "So the way this works is if\nmore than one condition is true, you're actually just going\nto enter one of them.",
    "start": "1431270",
    "end": "1437960"
  },
  {
    "text": "And you're going to enter the\nvery first one that's true. So you're never going\nto enter more than one of these code blocks.",
    "start": "1437960",
    "end": "1445639"
  },
  {
    "text": "You always enter one, and\nyou enter the first one that evaluates to true. ",
    "start": "1445640",
    "end": "1455840"
  },
  {
    "text": "So notice that we denoted\ncode blocks using indentation. And that's actually\none of the things",
    "start": "1455840",
    "end": "1461150"
  },
  {
    "text": "that I really like about Python. It sort of forces you to\nwrite pretty code and nice looking code and just\ncode that's very readable.",
    "start": "1461150",
    "end": "1471880"
  },
  {
    "text": "And that forces you to indent\neverything that's a code block. So you can easily see sort of\nwhere the flow of control is",
    "start": "1471880",
    "end": "1479020"
  },
  {
    "text": "and where decision making\npoints are and things like that.",
    "start": "1479020",
    "end": "1484660"
  },
  {
    "text": "So in this particular example,\nwe have one if statement here, and it checks if two\nvariables are equal.",
    "start": "1484660",
    "end": "1491525"
  },
  {
    "text": " And we have an if, elif, else.",
    "start": "1491525",
    "end": "1498710"
  },
  {
    "text": "And in this example, we're\ngoing to enter either this code block or this one or\nthis one, depending",
    "start": "1498710",
    "end": "1504230"
  },
  {
    "text": "on the variables of x and y. And we're only going\ninto one code block. And we'll enter the\nfirst one that's true.",
    "start": "1504230",
    "end": "1513510"
  },
  {
    "text": "Notice you can have\nnested conditionals. So inside this first if,\nwe have another if here.",
    "start": "1513510",
    "end": "1519060"
  },
  {
    "text": " And this inner if is only going\nto be checked when we enter",
    "start": "1519060",
    "end": "1528860"
  },
  {
    "text": "the first-- this outter if. ",
    "start": "1528860",
    "end": "1536590"
  },
  {
    "text": "I do want to make\none point, though. So sometimes, you might forget\nto do the double equals sign",
    "start": "1536590",
    "end": "1541860"
  },
  {
    "text": "when you are checking for\nequality, and that's OK. If you just use one\nequals sign, Python's",
    "start": "1541860",
    "end": "1548190"
  },
  {
    "text": "going to give you an error. And it's going to\nsay syntax error,",
    "start": "1548190",
    "end": "1553750"
  },
  {
    "text": "and it's going to\nhighlight this line. And then you're going to know\nthat there's a mistake there. And you should be\nusing equality,",
    "start": "1553750",
    "end": "1560340"
  },
  {
    "text": "because it doesn't\nmake sense to be using-- to assign-- to be making\nan assignment inside the if. ",
    "start": "1560340",
    "end": "1572476"
  },
  {
    "text": "So we've learned\nabout branching. And we know about conditionals. Let's try to apply\nthis to a little game.",
    "start": "1572476",
    "end": "1582760"
  },
  {
    "text": "And spoiler, we\nwon't be able to. We'll have to learn\nabout a new thing. But back in the 1980s,\nthere was the Legend",
    "start": "1582760",
    "end": "1589300"
  },
  {
    "text": "of Zelda-- cool\ngraphics-- where there was a scene with the lost woods.",
    "start": "1589300",
    "end": "1596410"
  },
  {
    "text": "Oversimplification if\nanyone's a Zelda die hard fan. But the basic idea was\nif you entered the woods,",
    "start": "1596410",
    "end": "1605230"
  },
  {
    "text": "you entered from the\nleft to the right. And then as long as\nyou kept going right, it would show you the same\nscreen over and over again.",
    "start": "1605230",
    "end": "1613360"
  },
  {
    "text": "And the trick was you\njust had to go backward, and then you'd exit the woods.",
    "start": "1613360",
    "end": "1618460"
  },
  {
    "text": "So very simple. Using what we know so far, we\ncould sort of code this up.",
    "start": "1618460",
    "end": "1624490"
  },
  {
    "text": "And we'd say\nsomething like this. If the user exits right,\nthen set the background to the woods background.",
    "start": "1624490",
    "end": "1631250"
  },
  {
    "text": "Otherwise, set the background\nto the exit background. Now let's say the user-- and\nthen in the else, we're done.",
    "start": "1631250",
    "end": "1638920"
  },
  {
    "text": "Let's say the user went right. Well, you'd show them\nthe woods background, and now ask them again,\nwhere do they want to go?",
    "start": "1638920",
    "end": "1645340"
  },
  {
    "text": "If they exit right,\nset the background to the woods background. Otherwise, set the background to\nthe exit background, and so on.",
    "start": "1645340",
    "end": "1651049"
  },
  {
    "text": "So you notice that there's\nsort of no end to this, right? How many times-- do you\nknow how many times the user",
    "start": "1651050",
    "end": "1658452"
  },
  {
    "text": "might keep going right? They might be really\npersistent, right? And they'll be like maybe\nif I go 1,000 times,",
    "start": "1658452",
    "end": "1664210"
  },
  {
    "text": "I'll get out of the woods. Maybe 1,001? Maybe. So this would probably\nbe-- who knows how deep?",
    "start": "1664210",
    "end": "1676210"
  },
  {
    "text": "These nested ifs. So we don't know.  So with what we know\nso far, we can't really",
    "start": "1676210",
    "end": "1682570"
  },
  {
    "text": "code this cute little game. But enter loops.",
    "start": "1682570",
    "end": "1687720"
  },
  {
    "text": "And specifically, a while loop. So this code here that could\nbe infinitely number of nested",
    "start": "1687720",
    "end": "1696520"
  },
  {
    "text": "if statements deep\ncan be rewritten using these three lines.",
    "start": "1696520",
    "end": "1701649"
  },
  {
    "text": "So we say while the\nuser exits right, set the background to\nthe woods background.",
    "start": "1701650",
    "end": "1706990"
  },
  {
    "text": "And with a while\nloop, it's going to do what we tell it\nto do inside the loop, and then it's going to\ncheck the condition again,",
    "start": "1706990",
    "end": "1712310"
  },
  {
    "text": "and then it's\ngoing to do what we say it should do\ninside the code block, and it's going to check\nthe condition again.",
    "start": "1712310",
    "end": "1719679"
  },
  {
    "text": "And then when the condition--\nas long as a condition is true, it's going to keep doing\nthat little loop there.",
    "start": "1719680",
    "end": "1725329"
  },
  {
    "text": "And as soon as the\ncondition becomes false, it's going to stop\ndoing the loop and do whatever's\nright after the while.",
    "start": "1725329",
    "end": "1732420"
  },
  {
    "text": "OK. So that's basically\nhow a while loop works.",
    "start": "1732420",
    "end": "1737510"
  },
  {
    "text": "We have while. That's the key word. The condition is\nsomething that gets evaluated to true or false.",
    "start": "1737510",
    "end": "1743910"
  },
  {
    "text": "And once again, we have a\ncode block that's indented, and it tells Python,\nthese are the expressions",
    "start": "1743910",
    "end": "1748940"
  },
  {
    "text": "I want to do as long as\nthe condition is true. ",
    "start": "1748940",
    "end": "1756350"
  },
  {
    "text": "So the condition is true,\nyou evaluate every expression in the code block. When you reach the end of the\nexpression-- end of the code",
    "start": "1756350",
    "end": "1762070"
  },
  {
    "text": "block, you check\nthe condition again. If it's true still, you\nkeep doing the expressions.",
    "start": "1762070",
    "end": "1767230"
  },
  {
    "text": "Check it again, and so on. ",
    "start": "1767230",
    "end": "1772910"
  },
  {
    "text": "So here's a little game. And with these lines\nof code, we were",
    "start": "1772910",
    "end": "1778090"
  },
  {
    "text": "able-- we can code up\nthe lost woods of Zelda.",
    "start": "1778090",
    "end": "1783159"
  },
  {
    "text": "Even worse graphics, by the\nway than the original Zelda is this one that\nI coded up here.",
    "start": "1783160",
    "end": "1788980"
  },
  {
    "text": "So I print out the\nfollowing things. \"You're in the Lost Forest. Go left or right.\"",
    "start": "1788980",
    "end": "1794500"
  },
  {
    "text": "And my program's going to say,\n\"You're in the Lost Forest. Go left or right.\" It's going to get user input.",
    "start": "1794500",
    "end": "1799730"
  },
  {
    "text": "It's going to say while the\nuser keeps typing in right, show them this text,\nand ask them again.",
    "start": "1799730",
    "end": "1807280"
  },
  {
    "text": "So I'm asking them again by\njust saying input here again. And that's it. That's going to just keep\ngetting input from the user.",
    "start": "1807280",
    "end": "1815020"
  },
  {
    "text": "And if the user doesn't type in\nright, and maybe types in left, you're going to exit out of\nthis loop, and print out,",
    "start": "1815020",
    "end": "1821230"
  },
  {
    "text": "\"You've got out of\nthe Lost Forest.\" So I have to show you this,\nbecause I spent too much time",
    "start": "1821230",
    "end": "1828620"
  },
  {
    "text": "on it. But I decided to improve on\nthe code that's in the slides.",
    "start": "1828620",
    "end": "1837930"
  },
  {
    "text": "And I've written here ways that\nyou guys can also improve it. So if I run my code--\n\"You're in the Lost Forest.",
    "start": "1837930",
    "end": "1845190"
  },
  {
    "text": "Go left or right.\" So if I say left, then yay,\nI got out of the Lost Forest.",
    "start": "1845190",
    "end": "1851180"
  },
  {
    "text": "But if I go right,\nthen I'm stuck, right?",
    "start": "1851180",
    "end": "1856430"
  },
  {
    "text": "I took down some trees. You can see there's\nno more trees here. I made a table, and\nthen I flipped it over.",
    "start": "1856430",
    "end": "1861786"
  },
  {
    "text": " So the expansion to this\nif you want to try it out--",
    "start": "1861786",
    "end": "1867770"
  },
  {
    "text": "I put this in the comments\nhere-- is try to use a counter. If the user types in\nright the first two times,",
    "start": "1867770",
    "end": "1874820"
  },
  {
    "text": "just make that a sad face. But if the user types\nin more than two times, make them cut down some trees\nand build a table and flip it.",
    "start": "1874820",
    "end": "1884419"
  },
  {
    "text": "That's a cute little\nexpansion if you want to test yourself to make\nsure you are getting loops. OK.",
    "start": "1884419",
    "end": "1890550"
  },
  {
    "text": "So so far, we've used while\nloops to ask for user input. And that's actually somewhere\nwhere it makes sense",
    "start": "1890550",
    "end": "1897244"
  },
  {
    "text": "to use while loops,\nbecause you don't actually know how many times the user\nis going to type in something.",
    "start": "1897244",
    "end": "1903360"
  },
  {
    "text": "You can use while loops\nto keep sort of a counter and to write code\nthat counts something.",
    "start": "1903360",
    "end": "1912470"
  },
  {
    "text": "If you do that, though,\nthere's two things you need to take care of. The first is the\nfirst line here,",
    "start": "1912470",
    "end": "1920600"
  },
  {
    "text": "which is sort of an\ninitialization of this loop counter. ",
    "start": "1920600",
    "end": "1926860"
  },
  {
    "text": "And the second is\nthis line here, which is incrementing\nyour loop counter. ",
    "start": "1926860",
    "end": "1935629"
  },
  {
    "text": "The reason why the\nsecond one is important is because-- let's look\nat our condition here.",
    "start": "1935630",
    "end": "1940789"
  },
  {
    "text": "So while n is less than five. If you didn't have\nthis line here,",
    "start": "1940790",
    "end": "1946960"
  },
  {
    "text": "you would never increment n. So every time through the loop,\nyou just keep printing zeros.",
    "start": "1946960",
    "end": "1953030"
  },
  {
    "text": "And you would have\nan infinite loop. I do want to show,\nthough, what-- if you do have an infinite loop,\nit's not the end of the world.",
    "start": "1953030",
    "end": "1960530"
  },
  {
    "text": "So I can say something like--\nso while true, print zero.",
    "start": "1960530",
    "end": "1973370"
  },
  {
    "text": "So this is going to give me an\ninfinite loop in my program. And-- whoop. ",
    "start": "1973370",
    "end": "1986970"
  },
  {
    "text": "OK. So notice it's just printing the\nletter p over and over again.",
    "start": "1986970",
    "end": "1992452"
  },
  {
    "text": "And if I let it go\nany longer, it's going to slow down the computer. So I'm going to hit\nControl-C or Command-C maybe.",
    "start": "1992452",
    "end": "1998640"
  },
  {
    "text": "And it's going to stop\nthe program from printing. So just in case you ever\nenter infinite loops",
    "start": "1998640",
    "end": "2004730"
  },
  {
    "text": "in your programs, just go to\nthe console and hit Control-C, and that's going to\nstop it from sort",
    "start": "2004730",
    "end": "2011029"
  },
  {
    "text": "of slowing down the computer. OK. So going back to\nthis example, I was",
    "start": "2011030",
    "end": "2016750"
  },
  {
    "text": "saying that if you're using\ncounters-- variables in order to sort of count up\ninside the while loop,",
    "start": "2016750",
    "end": "2022450"
  },
  {
    "text": "you have to take\ncare to initialize a counter variable first. And then to increment\nit, otherwise you'll",
    "start": "2022450",
    "end": "2029170"
  },
  {
    "text": "enter an infinite loop. That feels a little bit tedious. And so there's a shortcut for\ndoing that exact same thing.",
    "start": "2029170",
    "end": "2037790"
  },
  {
    "text": "So these four lines,\nyou can rewrite those into these two lines right here\nusing this new type of loop",
    "start": "2037790",
    "end": "2044289"
  },
  {
    "text": "called a for loop. So the for loop says, for some\nloop variable-- in this case,",
    "start": "2044290",
    "end": "2050989"
  },
  {
    "text": "I named it n. You can name it\nwhatever you want. In range 5-- we're\ngoing to come back to what range means in\na little bit-- print n.",
    "start": "2050989",
    "end": "2058350"
  },
  {
    "text": " So every time through\nthe loop, you're",
    "start": "2058350",
    "end": "2063620"
  },
  {
    "text": "going to print out\nwhat the value of n is. Range 5 actually\ncreates internally",
    "start": "2063620",
    "end": "2071210"
  },
  {
    "text": "a sequence of numbers\nstarting from 0 and going to that\nnumber 5 minus 1.",
    "start": "2071210",
    "end": "2076949"
  },
  {
    "text": "So the sequence is going\nto be 0, 1, 2, 3, and 4. The first time through the\nloop, you're going to say n",
    "start": "2076949",
    "end": "2084199"
  },
  {
    "text": "is equal to 0. Or internally, this\nis what happens. N gets the value of 0. You're going to print n.",
    "start": "2084199",
    "end": "2091070"
  },
  {
    "text": "Then you're going to\ngo back to the top. N gets the value 1. Then you're going to go\nexecute whatever is inside.",
    "start": "2091070",
    "end": "2098120"
  },
  {
    "text": "So you're going to print 1. Then you're going\nto increment that to the next value\nin the sequence.",
    "start": "2098120",
    "end": "2103400"
  },
  {
    "text": "You're going to print\nout 2, and so on. So this is the general\nlook of a for loop.",
    "start": "2103400",
    "end": "2112000"
  },
  {
    "text": "So we have for some\nloop variable-- again, can be named whatever you\nwant-- in range some number.",
    "start": "2112000",
    "end": "2121360"
  },
  {
    "text": "Do a bunch of stuff. And again, these are part\nof this for loop code block.",
    "start": "2121360",
    "end": "2126880"
  },
  {
    "text": "So you should indent\nthem to tell Python that these are the things\nthat you should do.",
    "start": "2126880",
    "end": "2132580"
  },
  {
    "text": "So when you're using\nrange some number, you start out with variable\ngetting the value 0.",
    "start": "2132580",
    "end": "2138835"
  },
  {
    "text": " With variable having\nvalue 0, you're",
    "start": "2138835",
    "end": "2144410"
  },
  {
    "text": "going to execute all\nof these expressions. After all the expressions\nin the code block are done,",
    "start": "2144410",
    "end": "2150690"
  },
  {
    "text": "you're going to go\non to the next value. So 1.",
    "start": "2150690",
    "end": "2155975"
  },
  {
    "text": "You're going to execute\nall these expressions with the variable being\nvalue 1, and then so on",
    "start": "2155976",
    "end": "2161930"
  },
  {
    "text": "and so on until you go\nto some num minus 1. ",
    "start": "2161930",
    "end": "2170450"
  },
  {
    "text": "That-- so using\nrange in that way is a little bit constraining,\nbecause you're always",
    "start": "2170450",
    "end": "2176330"
  },
  {
    "text": "going to get values\nstarting from 0 and ending at some\nnum minus 1, whatever",
    "start": "2176330",
    "end": "2181570"
  },
  {
    "text": "is in the parentheses in range. Sometimes you might want\nto write programs that maybe start at a custom value.",
    "start": "2181570",
    "end": "2187532"
  },
  {
    "text": "Don't start at 0. Maybe they start at 5. Maybe they start at minus 10. And sometimes you might\nwant to write programs",
    "start": "2187532",
    "end": "2194150"
  },
  {
    "text": "that don't go with-- don't\nexpect the numbers by 1, but maybe skip\nevery other number,",
    "start": "2194150",
    "end": "2199279"
  },
  {
    "text": "go every two numbers, or every\nthree numbers, and so on. So you can customize\nrange to your needs.",
    "start": "2199280",
    "end": "2207570"
  },
  {
    "text": "The one thing you do need\nto give it is the stop. So if you give it only one\nvalue in the parentheses that stands for stop.",
    "start": "2207570",
    "end": "2215030"
  },
  {
    "text": "And by default, start is\ngoing to have the value 0, and step is going\nto have the value 1.",
    "start": "2215030",
    "end": "2221500"
  },
  {
    "text": "If you give it two things\nin the parentheses, you're giving it start and stop.",
    "start": "2221500",
    "end": "2226510"
  },
  {
    "text": "So the first being start,\nthe second being stop. And step gets this\nvalue of 1 by default.",
    "start": "2226510",
    "end": "2232905"
  },
  {
    "text": "And if you give it three\nthings in the parentheses, you're giving it start,\nstop, and step in that order.",
    "start": "2232905",
    "end": "2238465"
  },
  {
    "text": " And you're always going to\nstart at the start value",
    "start": "2238465",
    "end": "2246130"
  },
  {
    "text": "and stop at-- or so you're going\nto start at the start value, and you're going to\ngo until stop minus 1.",
    "start": "2246130",
    "end": "2252470"
  },
  {
    "text": "So those are the\nsequences of numbers.  So in this first\ncode right here,",
    "start": "2252470",
    "end": "2259079"
  },
  {
    "text": "my sum is going to\nget the value 0. And you're going\nto have a for loop.",
    "start": "2259080",
    "end": "2264210"
  },
  {
    "text": "We're going to start\nfrom 7, because we're giving it two numbers. And when you give\nit two numbers,",
    "start": "2264210",
    "end": "2269340"
  },
  {
    "text": "it represents start and\nstop with step being 1. So we're starting at 7.",
    "start": "2269340",
    "end": "2275910"
  },
  {
    "text": "If step is 1, the\nnext value is 8. What's the value after that?",
    "start": "2275910",
    "end": "2281340"
  },
  {
    "text": " If we're incrementing by 1? ",
    "start": "2281340",
    "end": "2289200"
  },
  {
    "text": "9.  And since we're going\nuntil stop minus 1,",
    "start": "2289200",
    "end": "2297430"
  },
  {
    "text": "we're not actually\ngoing to pick up on 10. So this loop variable,\ni, the very first time",
    "start": "2297430",
    "end": "2303870"
  },
  {
    "text": "through the loop is going\nto have the value 7. So my sum is going\nto be 0 plus 7.",
    "start": "2303870",
    "end": "2313360"
  },
  {
    "text": " That's everything that's\ninside the code block.",
    "start": "2313360",
    "end": "2320730"
  },
  {
    "text": "The next time through the\nloop, i gets the value 8. So inside the for\nloop, my sum gets",
    "start": "2320730",
    "end": "2332900"
  },
  {
    "text": "whatever the previous value\nwas, which was 7, plus 8.",
    "start": "2332900",
    "end": "2338150"
  },
  {
    "text": "OK. The next time through\nthe loop, my sum",
    "start": "2338150",
    "end": "2344540"
  },
  {
    "text": "get the value 7 plus 8 plus 9. Obviously, replacing that\nwith the previous value.",
    "start": "2344540",
    "end": "2350600"
  },
  {
    "text": "So 15. Since we're not going through\n10, that's where we stop.",
    "start": "2350600",
    "end": "2355841"
  },
  {
    "text": "And we're going to\nprint out my sum, which is going to be the value\nof 7 plus 8 plus 9. ",
    "start": "2355841",
    "end": "2362330"
  },
  {
    "text": "Yeah? OK. Yeah. AUDIENCE: [INAUDIBLE]",
    "start": "2362330",
    "end": "2367605"
  },
  {
    "text": "PROFESSOR: Do they\nhave to be integers?  That's a great question.",
    "start": "2367605",
    "end": "2373590"
  },
  {
    "text": "We can try that out. I'm not actually sure right\noff the top of my head.",
    "start": "2373590",
    "end": "2378660"
  },
  {
    "text": "So you can go on Spider and\nsay-- let's say in this example",
    "start": "2378660",
    "end": "2386530"
  },
  {
    "text": "here. ",
    "start": "2386530",
    "end": "2392100"
  },
  {
    "text": "So we can say 7.1, 10.3-- yeah.",
    "start": "2392100",
    "end": "2398779"
  },
  {
    "text": "So they have to be integers. ",
    "start": "2398779",
    "end": "2408620"
  },
  {
    "text": "OK. So that's that example. And let's erase that. In this particular example,\nwe have start, stop, and step.",
    "start": "2408620",
    "end": "2416510"
  },
  {
    "text": "And here, we're going\nevery other value. So we're starting at 5.",
    "start": "2416510",
    "end": "2422299"
  },
  {
    "text": "Tell me what the next\nvalue is supposed to be. If we're taking every other one.",
    "start": "2422300",
    "end": "2427760"
  },
  {
    "text": "7, and then 9, and then--\nare we doing 11 or not?",
    "start": "2427760",
    "end": "2435020"
  },
  {
    "text": "Excellent. Nice. Yeah. So we're going to\nthe end minus 1.",
    "start": "2435020",
    "end": "2441031"
  },
  {
    "text": "OK. So it's possible\nthat sometimes you write code where you might want\nto exit out of the loop early.",
    "start": "2441031",
    "end": "2447439"
  },
  {
    "text": "You don't want to go\nthrough all of the sequences of your numbers. Maybe there's a condition\ninside there where you just",
    "start": "2447439",
    "end": "2453290"
  },
  {
    "text": "want to exit the loop early. Inside the while\nloop, maybe you want to exit the loop before the\ncondition becomes false.",
    "start": "2453290",
    "end": "2460520"
  },
  {
    "text": "So that's where the\nbreak statement comes in. So the break works like this.",
    "start": "2460520",
    "end": "2466020"
  },
  {
    "text": "It's going to-- as soon\nas Python sees this break statement, it's\ngoing to say, OK,",
    "start": "2466020",
    "end": "2473090"
  },
  {
    "text": "I'm going to look at whatever\nloop I'm currently in.",
    "start": "2473090",
    "end": "2478160"
  },
  {
    "text": "I'm not evaluating\nany expression after it that comes\nwithin my loop.",
    "start": "2478160",
    "end": "2483770"
  },
  {
    "text": "And I'm going to\nimmediately exit the loop. So I'm going inside\nthis while, this while,",
    "start": "2483770",
    "end": "2488869"
  },
  {
    "text": "I'm evaluating this\none expression, and I suddenly see a break. Expression b does\nnot get evaluated.",
    "start": "2488870",
    "end": "2497960"
  },
  {
    "text": "And break is going\nto immediately exit out of the innermost\nloop that it's in.",
    "start": "2497960",
    "end": "2503150"
  },
  {
    "text": "So this while loop that\nhas condition 2, that's the innermost loop that\nthe break is found in.",
    "start": "2503150",
    "end": "2510950"
  },
  {
    "text": "So we're going to exit out\nof this inner most loop here. And we're evaluating\nexpression c.",
    "start": "2510950",
    "end": "2517069"
  },
  {
    "text": "And notice, we're\nevaluating expression c, because it's-- expression c is\npart of the outer while loop.",
    "start": "2517070",
    "end": "2525140"
  },
  {
    "text": "It's at the same\nlevel as this one. And these ones are part\nof the inner while loop.",
    "start": "2525140",
    "end": "2533820"
  },
  {
    "text": "OK. Last thing I want to\nsay is just a little bit of a comparison between\nfor and while loops. So when would you\nuse one or the other.",
    "start": "2533820",
    "end": "2541200"
  },
  {
    "text": "This might be useful\nin your problem sets. So for loops you\nusually use when you know the number of iterations.",
    "start": "2541200",
    "end": "2547529"
  },
  {
    "text": "While loops are very useful\nwhen, for example, you're getting user input, and\nuser input is unpredictable. You don't know how\nmany times they're",
    "start": "2547530",
    "end": "2553920"
  },
  {
    "text": "going to do a certain task. For both for and\nwhile loops, you can end out of the loop\nearly using the break.",
    "start": "2553920",
    "end": "2560700"
  },
  {
    "text": "The for loop uses this counter. It's inherent\ninside the for loop. A while loop you can use a\ncounter in order-- you can use",
    "start": "2560700",
    "end": "2568529"
  },
  {
    "text": "a while loop to count things. But you must initialize the\ncounter before the while loop.",
    "start": "2568530",
    "end": "2573766"
  },
  {
    "text": "And you have to remember to\nincrement it within the loop. Otherwise, you maybe\nlead to an infinite loop.",
    "start": "2573766",
    "end": "2580710"
  },
  {
    "text": "We've seen as the very\nfirst example of a for loop that the while--\nthe for loop could",
    "start": "2580710",
    "end": "2586900"
  },
  {
    "text": "be rewritten as a while\nloop, but the vice versa is not necessarily true. And the counterexample to\nthat is just user input.",
    "start": "2586900",
    "end": "2594450"
  },
  {
    "text": "So you might not\nknow how many times you might do a certain task. All right.",
    "start": "2594450",
    "end": "2599460"
  },
  {
    "text": "Great. That's all for today. ",
    "start": "2599460",
    "end": "2610084"
  }
]