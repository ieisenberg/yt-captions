[
  {
    "text": "Let's practice our newfound skill and see\nwhat we can determine about a running program",
    "start": "1040",
    "end": "5850"
  },
  {
    "text": "which we've stopped somewhere in the middle\nof its execution.",
    "start": "5850",
    "end": "9710"
  },
  {
    "text": "We're told that a computation of fact() is\nin progress and that the PC of the next instruction",
    "start": "9710",
    "end": "15160"
  },
  {
    "text": "to be executed is 0x40.",
    "start": "15160",
    "end": "17970"
  },
  {
    "text": "We're also given the stack dump shown on right.",
    "start": "17970",
    "end": "21820"
  },
  {
    "text": "Since we're in the middle of a fact computation,\nwe know that current stack frame (and possibly",
    "start": "21820",
    "end": "26700"
  },
  {
    "text": "others) is an activation record for the fact\nfunction.",
    "start": "26700",
    "end": "30579"
  },
  {
    "text": "Using the code on the previous slide we can\ndetermine the layout of the stack frame and",
    "start": "30579",
    "end": "35870"
  },
  {
    "text": "generate the annotations shown on the right\nof the stack dump.",
    "start": "35870",
    "end": "40449"
  },
  {
    "text": "With the annotations, it's easy to see that\nthe argument to current active call is the",
    "start": "40450",
    "end": "45990"
  },
  {
    "text": "value 3.",
    "start": "45990",
    "end": "48870"
  },
  {
    "text": "Now we want to know the argument to original\ncall to fact.",
    "start": "48870",
    "end": "53460"
  },
  {
    "text": "We'll have to label the other stack frames\nusing the saved BP values.",
    "start": "53460",
    "end": "57960"
  },
  {
    "text": "Looking at the saved LP values for each frame\n(always found at an offset of -8 from the",
    "start": "57960",
    "end": "64000"
  },
  {
    "text": "frame's BP), we see that many of the saved\nvalues are 0x40, which must be the return",
    "start": "64000",
    "end": "69930"
  },
  {
    "text": "address for the recursive fact calls.",
    "start": "69930",
    "end": "73790"
  },
  {
    "text": "Looking through the stack frames we find the\nfirst return address that's *not* 0x40, which",
    "start": "73790",
    "end": "79050"
  },
  {
    "text": "must an return address to code that's not\npart of the fact procedure.",
    "start": "79050",
    "end": "83950"
  },
  {
    "text": "This means we've found the stack frame created\nby the original call to fact and can see that",
    "start": "83950",
    "end": "89229"
  },
  {
    "text": "argument to the original call is 6.",
    "start": "89229",
    "end": "92469"
  },
  {
    "text": "What's the location of the BR that made the\noriginal call?",
    "start": "92470",
    "end": "97229"
  },
  {
    "text": "Well, the saved LP in the stack frame of the\noriginal call to fact is 0x80.",
    "start": "97229",
    "end": "103299"
  },
  {
    "text": "That's the address of the instruction following\nthe original call, so the BR that made the",
    "start": "103300",
    "end": "109400"
  },
  {
    "text": "original call is one instruction earlier,\nat location 0x7C.",
    "start": "109400",
    "end": "114830"
  },
  {
    "text": "To answer these questions you have to be good\nat hex arithmetic!",
    "start": "114830",
    "end": "119830"
  },
  {
    "text": "What instruction is about to be executed?",
    "start": "119830",
    "end": "123200"
  },
  {
    "text": "We were told its address is 0x40, which we\nnotice is the saved LP value for all the recursive",
    "start": "123200",
    "end": "129528"
  },
  {
    "text": "fact calls.",
    "start": "129529",
    "end": "130909"
  },
  {
    "text": "So 0x40 must be the address of the instruction\nfollowing the BR(fact,LP) instruction in the",
    "start": "130909",
    "end": "137028"
  },
  {
    "text": "fact code.",
    "start": "137029",
    "end": "138549"
  },
  {
    "text": "Looking back a few slides at the fact code,\nwe see that's a DEALLOCATE(1) instruction.",
    "start": "138549",
    "end": "145650"
  },
  {
    "text": "What value is in BP?",
    "start": "145650",
    "end": "147769"
  },
  {
    "text": "Hmm.",
    "start": "147769",
    "end": "149159"
  },
  {
    "text": "We know BP is the address of the stack location\ncontaining the saved R1 value in the current",
    "start": "149159",
    "end": "154989"
  },
  {
    "text": "stack frame.",
    "start": "154989",
    "end": "156918"
  },
  {
    "text": "So the saved BP value in the current stack\nframe is the address of the saved R1 value",
    "start": "156919",
    "end": "162219"
  },
  {
    "text": "in the *previous* stack frame.",
    "start": "162219",
    "end": "164930"
  },
  {
    "text": "So the saved BP value gives us the address\nof a particular stack location, from which",
    "start": "164930",
    "end": "169969"
  },
  {
    "text": "we can derive the address of all the other\nlocations!",
    "start": "169969",
    "end": "173829"
  },
  {
    "text": "Counting forward, we find that the value in\nBP must be 0x13C.",
    "start": "173830",
    "end": "180689"
  },
  {
    "text": "What value is in SP?",
    "start": "180689",
    "end": "183610"
  },
  {
    "text": "Since we're about to execute the DEALLOCATE\nto remove the argument of the nested call",
    "start": "183610",
    "end": "187870"
  },
  {
    "text": "from the stack, that argument must still be\non the stack right after the saved R1 value.",
    "start": "187870",
    "end": "193959"
  },
  {
    "text": "Since the SP points to first unused stack\nlocation, it points to the location after",
    "start": "193959",
    "end": "199420"
  },
  {
    "text": "that word, so it has the value 0x144.",
    "start": "199420",
    "end": "203829"
  },
  {
    "text": "Finally, what value is in R0?",
    "start": "203829",
    "end": "208519"
  },
  {
    "text": "Since we've just returned from a call to fact(2)\nthe value in R0 must the result from that",
    "start": "208519",
    "end": "214090"
  },
  {
    "text": "recursive call, which is 2.",
    "start": "214090",
    "end": "216400"
  },
  {
    "text": "Wow!",
    "start": "216400",
    "end": "217400"
  },
  {
    "text": "You can learn a lot from the stacked activation\nrecords and a little deduction!",
    "start": "217400",
    "end": "223200"
  },
  {
    "text": "Since the state of the computation is represented\nby the values of the PC, the registers, and",
    "start": "223200",
    "end": "228940"
  },
  {
    "text": "main memory, once we're given that information\nwe can tell exactly what the program has been",
    "start": "228940",
    "end": "234379"
  },
  {
    "text": "up to.",
    "start": "234379",
    "end": "235709"
  },
  {
    "text": "Pretty neatâ€¦",
    "start": "235709",
    "end": "237799"
  },
  {
    "text": "Wrapping up, we've been dedicating some registers\nto help with our various software conventions.",
    "start": "237799",
    "end": "242680"
  },
  {
    "text": "To summarize:\nR31 is always zero, as defined by the ISA.",
    "start": "242680",
    "end": "248549"
  },
  {
    "text": "We'll also dedicate R30 to a particular function\nin the ISA when we discuss the implementation",
    "start": "248549",
    "end": "255079"
  },
  {
    "text": "of the Beta in the next lecture.",
    "start": "255079",
    "end": "257169"
  },
  {
    "text": "Meanwhile, don't use R30 in your code!",
    "start": "257170",
    "end": "260489"
  },
  {
    "text": "The remaining dedicated registers are connected\nwith our software conventions:",
    "start": "260489",
    "end": "266200"
  },
  {
    "text": "R29 (SP) is used as the stack pointer,\nR28 (LP) is used as the linkage pointer, and",
    "start": "266200",
    "end": "275310"
  },
  {
    "text": "R27 (BP) is used as the base pointer.",
    "start": "275310",
    "end": "280180"
  },
  {
    "text": "As you practice reading and writing code,\nyou'll grow familiar with these dedicated",
    "start": "280180",
    "end": "283949"
  },
  {
    "text": "registers.",
    "start": "283950",
    "end": "287380"
  },
  {
    "text": "In thinking about how to implement procedures,\nwe discovered the need for an activation record",
    "start": "287380",
    "end": "292760"
  },
  {
    "text": "to store the information needed by any active\nprocedure call.",
    "start": "292760",
    "end": "297350"
  },
  {
    "text": "An activation record is created by the caller\nand callee at the start of a procedure call.",
    "start": "297350",
    "end": "303150"
  },
  {
    "text": "And the record can be discarded when the procedure\nis complete.",
    "start": "303150",
    "end": "307530"
  },
  {
    "text": "The activation records hold argument values,\nsaved LP and BP values along with the caller's",
    "start": "307530",
    "end": "313620"
  },
  {
    "text": "values in any other of the registers.",
    "start": "313620",
    "end": "317830"
  },
  {
    "text": "Storage for the procedure's local variables\nis also allocated in the activation record.",
    "start": "317830",
    "end": "323699"
  },
  {
    "text": "We use BP to point to the current activation\nrecord, giving easy access the values of the",
    "start": "323700",
    "end": "328780"
  },
  {
    "text": "arguments and local variables.",
    "start": "328780",
    "end": "332400"
  },
  {
    "text": "We adopted a \"callee saves\" convention where\nthe called procedure is obligated to preserve",
    "start": "332400",
    "end": "337940"
  },
  {
    "text": "the values in all registers except for R0.",
    "start": "337940",
    "end": "342520"
  },
  {
    "text": "Taken together, these conventions allow us\nto have procedures with arbitrary numbers",
    "start": "342520",
    "end": "346780"
  },
  {
    "text": "of arguments and local variables, with nested\nand recursive procedure calls.",
    "start": "346780",
    "end": "351700"
  },
  {
    "text": "We're now ready to compile and execute any\nC program!",
    "start": "351700",
    "end": "355840"
  }
]