[
  {
    "start": "0",
    "end": "114000"
  },
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "6435"
  },
  {
    "start": "6435",
    "end": "24397"
  },
  {
    "text": "MICHAEL SIPSER: So\nwelcome, everybody. Welcome back. Let's get started\nwith today's lecture.",
    "start": "24397",
    "end": "29620"
  },
  {
    "text": " Where were we?",
    "start": "29620",
    "end": "36730"
  },
  {
    "text": "On Tuesday, we\ncovered, the main topic",
    "start": "36730",
    "end": "41770"
  },
  {
    "text": "was the recursion theorem,\nwhich allows programs",
    "start": "41770",
    "end": "48100"
  },
  {
    "text": "to self-reference. And we saw some\napplications of that, too. So we gave a new proof\nthat ATM is undecidable.",
    "start": "48100",
    "end": "57680"
  },
  {
    "text": "We looked at this language\nof minimal Turing machine descriptions. And we had a short digression\ninto mathematical logic,",
    "start": "57680",
    "end": "64989"
  },
  {
    "text": "where we looked at how\none shows that there are true, but\nunprovable, statements",
    "start": "64989",
    "end": "71320"
  },
  {
    "text": "in any reasonable formal system.  So today, we're going\nto shift gears entirely.",
    "start": "71320",
    "end": "79730"
  },
  {
    "text": "And we're moving into the\nsecond half of the course, where",
    "start": "79730",
    "end": "85020"
  },
  {
    "text": "we are beginning a study\nof computational complexity theory.",
    "start": "85020",
    "end": "91080"
  },
  {
    "text": "And we'll say a\nlittle bit about that during the course of\nthe lecture, of course.",
    "start": "91080",
    "end": "97020"
  },
  {
    "text": "But the main things\nthat we are going to cover in terms of\ncontent that you will need",
    "start": "97020",
    "end": "103530"
  },
  {
    "text": "is defining the complexity\nclasses and the class P.",
    "start": "103530",
    "end": "108990"
  },
  {
    "text": "And we'll prove a few\ntheorems along the way. But that's the main\nobjective of today's lecture.",
    "start": "108990",
    "end": "115490"
  },
  {
    "text": "Computability theory, which was\nthe subject of the first half of the course, and which is\nwhat the midterm exam is going",
    "start": "115490",
    "end": "121520"
  },
  {
    "text": "to cover, was a subject\nthat was an active area of mathematical study in the\nfirst part of the 20th century.",
    "start": "121520",
    "end": "132390"
  },
  {
    "text": "It really got-- it\nreally dates back into the late 19th\ncentury, in fact,",
    "start": "132390",
    "end": "138770"
  },
  {
    "text": "when people were trying to\nfigure out how to formalize mathematical reasoning.",
    "start": "138770",
    "end": "145790"
  },
  {
    "text": "But it really got\ngoing in the 1930s with the work of Godel,\nand Church, and Turing,",
    "start": "145790",
    "end": "152900"
  },
  {
    "text": "who really formalized\nfor the first time what we mean by algorithm.",
    "start": "152900",
    "end": "158540"
  },
  {
    "text": "And that allowed the study\nof algorithms to really get started. And it had its impact,\nas I mentioned,",
    "start": "158540",
    "end": "165470"
  },
  {
    "text": "on the actual design,\nbuilding, and thinking about real computers.",
    "start": "165470",
    "end": "170719"
  },
  {
    "text": " The main question, if you\nkind of boil the subject",
    "start": "170720",
    "end": "175969"
  },
  {
    "text": "down to a single question, is\nsome language decidable or not.",
    "start": "175970",
    "end": "181940"
  },
  {
    "text": "In complexity theory,\nwhich got started kind of when computability\ntheory more or less wrapped up",
    "start": "181940",
    "end": "188600"
  },
  {
    "text": "as a subject, largely\nbecause they answered many of the questions that they--\nthey answered pretty much all of the questions that\nthey were asking.",
    "start": "188600",
    "end": "194820"
  },
  {
    "text": "So there really aren't\ninteresting unsolved questions left in that field.",
    "start": "194820",
    "end": "201290"
  },
  {
    "text": "And you really need\nmathematical questions to keep a subject alive,\nunsolved questions.",
    "start": "201290",
    "end": "206900"
  },
  {
    "text": "So complexity theory got\nits start in the 1960s. And it continues on as an\nactive area of research",
    "start": "206900",
    "end": "212750"
  },
  {
    "text": "to the present day. And I guess if you\ncould boil it down, it would be is a language\ndecidable with some restriction",
    "start": "212750",
    "end": "221390"
  },
  {
    "text": "on the resources, such\nas the amount of time, or memory, or some other-- or some other kinds of resources\nthat you might provide,",
    "start": "221390",
    "end": "228740"
  },
  {
    "text": "randomness, and so on? All of those are within the\narea of computational complexity",
    "start": "228740",
    "end": "234770"
  },
  {
    "text": "theory. So let's get ourselves\nstarted with an example.",
    "start": "234770",
    "end": "240210"
  },
  {
    "start": "236000",
    "end": "376000"
  },
  {
    "text": "Here is the language that\nwe've looked at in the past, a to the k, b to the k. And let's look at it now from\nthe perspective of complexity.",
    "start": "240210",
    "end": "250980"
  },
  {
    "text": "All of the languages\nthat we're going to be studying in\ncomplexity are all going to be decidable languages.",
    "start": "250980",
    "end": "256570"
  },
  {
    "text": "So the question\nof undecidability in complexity theory is\nnot really of interest.",
    "start": "256570",
    "end": "262200"
  },
  {
    "text": "It's all decidable\nlanguages, but the question is how decidable. What sort of resources do\nyou need to do the deciding?",
    "start": "262200",
    "end": "269055"
  },
  {
    "text": " So for this language A,\nhow many steps are needed?",
    "start": "269055",
    "end": "277130"
  },
  {
    "text": "Well, we're going to spend\na little time just kind of setting up the\ndefinitions of the subject",
    "start": "277130",
    "end": "283550"
  },
  {
    "text": "and kind of motivating them. So for this language A, when I\nask how many steps are needed,",
    "start": "283550",
    "end": "289280"
  },
  {
    "text": "well, it's going to depend upon\nwhich input you have in mind. Some inputs might require\nmore steps than others.",
    "start": "289280",
    "end": "297520"
  },
  {
    "text": "So the way we're going\nto set the subject up, which is the standard way\nthat people in this field",
    "start": "297520",
    "end": "304260"
  },
  {
    "text": "look at it, and I think that\napplies to lots of examples",
    "start": "304260",
    "end": "309810"
  },
  {
    "text": "outside as well,\nis that we're going to kind of group all of the\ninputs of the same length",
    "start": "309810",
    "end": "315810"
  },
  {
    "text": "together. And look at the maximum cost,\nthe maximum number of steps",
    "start": "315810",
    "end": "323430"
  },
  {
    "text": "you need, to solve any one of\nthose inputs of a given length. And we'll do that\nfor each length.",
    "start": "323430",
    "end": "329202"
  },
  {
    "text": "And the way we're\ngoing to frame it is in terms of giving\na maximum, or what's called an upper bound, on\nthe amount of time that you",
    "start": "329202",
    "end": "337710"
  },
  {
    "text": "need to solve all of\nthose inputs of length n.",
    "start": "337710",
    "end": "343590"
  },
  {
    "text": "That's what's sometimes\ncalled worst-case complexity. I'm sure many of you\nseen this already. But just to make sure\nwe're all together on this,",
    "start": "343590",
    "end": "351710"
  },
  {
    "text": "you might contrast\nthat, for example, with what's called\naverage case complexity. Where instead of looking\nat the most difficult case",
    "start": "351710",
    "end": "358770"
  },
  {
    "text": "among all inputs\nof length n, you take the average of\nall inputs of length n. And then you have to--\nthen it's a little bit more",
    "start": "358770",
    "end": "365220"
  },
  {
    "text": "complicated, because\nthen you need to have a probability\ndistribution on those inputs and so on. We're not going to look\nat it, in this course,",
    "start": "365220",
    "end": "371160"
  },
  {
    "text": "from that perspective. We're only going to\nbe looking at what's called worst-case complexity. ",
    "start": "371160",
    "end": "377849"
  },
  {
    "start": "376000",
    "end": "510000"
  },
  {
    "text": "So let's begin, then, by\nlooking at this in more detail",
    "start": "377850",
    "end": "386060"
  },
  {
    "text": "and taking as our\nstarting point the theorem",
    "start": "386060",
    "end": "391850"
  },
  {
    "text": "that says that on a one\ntape Turing machine, which is deciding this language\nA, a to the k, b to the k,",
    "start": "391850",
    "end": "401740"
  },
  {
    "text": "you can do this on a one\ntape Turing machine, M, we're calling it.",
    "start": "401740",
    "end": "407620"
  },
  {
    "text": "In at most some constant\ntimes n squared steps,",
    "start": "407620",
    "end": "414100"
  },
  {
    "text": "for any input of length n,\nwhere the constant is going",
    "start": "414100",
    "end": "420520"
  },
  {
    "text": "to be fixed independent of it. ",
    "start": "420520",
    "end": "426020"
  },
  {
    "text": "So this is going to be-- ",
    "start": "426020",
    "end": "434780"
  },
  {
    "text": "having a constant in-- factor in the complexity\nis going to come up often.",
    "start": "434780",
    "end": "441927"
  },
  {
    "text": "And so instead of saying\nthis over and over again, we're going to use\na notation that m",
    "start": "441927",
    "end": "447670"
  },
  {
    "text": "uses order n squared steps. I'm sure many of you seen\nthat terminology as well.",
    "start": "447670",
    "end": "453160"
  },
  {
    "text": "But just for the\npurposes of making sure we're all\ntogether on that, there is this big O and\nlittle o notation.",
    "start": "453160",
    "end": "460419"
  },
  {
    "text": "I'm expecting you to\nbe familiar with that. Big O is when you apply to\nfunctions, as it's done.",
    "start": "460420",
    "end": "468830"
  },
  {
    "text": "You say f is big O of g, as\nfor two functions f and g.",
    "start": "468830",
    "end": "475069"
  },
  {
    "text": "It's basically if f is\nless than or equal to g, if you're ignoring\nconstant factors.",
    "start": "475070",
    "end": "481780"
  },
  {
    "text": "And you say f is little o of\ng if f is strictly less than g",
    "start": "481780",
    "end": "486850"
  },
  {
    "text": "if you're ignoring\nconstant factors. That's kind of one sort of\ninformal way of looking at it. The precise definition is\ngiven up there on the slide.",
    "start": "486850",
    "end": "493930"
  },
  {
    "text": "And if you haven't\nseen it before, make sure you look\nat it in the book, where it's all carefully\ndescribed and defined.",
    "start": "493930",
    "end": "502063"
  },
  {
    "text": "So that you're comfortable\nwith these notions. Because it's\nreally-- we're going to be using this without\nany further discussion",
    "start": "502063",
    "end": "508479"
  },
  {
    "text": "from here on.  So let's get to the proof,\nthen, of this theorem",
    "start": "508480",
    "end": "515058"
  },
  {
    "start": "510000",
    "end": "1646000"
  },
  {
    "text": "that you can do the language\nA in order n squared steps. Not super hard.",
    "start": "515059",
    "end": "520659"
  },
  {
    "text": "I think if I asked you to\ncome up with an algorithm to solve A, this\nwould be the algorithm that you would find basically.",
    "start": "520659",
    "end": "526690"
  },
  {
    "text": "First, you would start off by\nscanning the input w to make sure it's of the right form.",
    "start": "526690",
    "end": "533149"
  },
  {
    "text": "So a run of a's followed by\na run of b's of some lengths.",
    "start": "533150",
    "end": "538580"
  },
  {
    "text": "And if it's not of\nthat form, then you're going to reject right away. The next thing you'll do\nis then go to a repeat",
    "start": "538580",
    "end": "545960"
  },
  {
    "text": "loop in the Turing machine. And if you imagine, here is your\nmachine, here is the input w,",
    "start": "545960",
    "end": "553190"
  },
  {
    "text": "you're going to go through\nthat repeating repeatedly. Of course, you can do this in\na number of different ways.",
    "start": "553190",
    "end": "558990"
  },
  {
    "text": "But here's the way I have in\nmind for you, on this slide, anyway.",
    "start": "558990",
    "end": "564840"
  },
  {
    "text": "We're going to scan\nthe entire tape, crossing off a single a\nand a single b on a scan.",
    "start": "564840",
    "end": "575050"
  },
  {
    "text": "And then you're going to\nkeep doing that until you've crossed off everything.",
    "start": "575050",
    "end": "580360"
  },
  {
    "text": "Unless you run out of a's\nor you run out of b's. In that case, you're\ngoing to reject.",
    "start": "580360",
    "end": "587610"
  },
  {
    "text": "If you run out of a's or\nb's before you run out of the other type, then you\nknow that you started out",
    "start": "587610",
    "end": "594120"
  },
  {
    "text": "with an unequal number. And so the machine\nis going to reject. ",
    "start": "594120",
    "end": "600079"
  },
  {
    "text": "If you've managed to cross them\nall off without running out of one before the other,\nthen you'll accept.",
    "start": "600080",
    "end": "606510"
  },
  {
    "text": "I know this is kind of obvious. But I think it's important to\nget us all together on this at the beginning.",
    "start": "606510",
    "end": "612160"
  },
  {
    "text": "So here's a little animation of\nthe Turing machine doing that. ",
    "start": "612160",
    "end": "619590"
  },
  {
    "text": "I'm not showing the\nmotion of the head. But you imagine the head\nscanning back and forth, crossing off these a's and b's,\none a and one b on each pass,",
    "start": "619590",
    "end": "628440"
  },
  {
    "text": "until they're all crossed off. And then it accepts. Unless of course, it\nruns out of a's or b's",
    "start": "628440",
    "end": "633750"
  },
  {
    "text": "before the other\ntype, then it rejects. OK, now let's do a very quick,\ninformal analysis of how",
    "start": "633750",
    "end": "640990"
  },
  {
    "text": "much time this has taken. So the very first stage, I'm\ncalling each of these things stages of the Turing\nmachine to distinguish them",
    "start": "640990",
    "end": "649270"
  },
  {
    "text": "from the steps of\nthe Turing machine, which are the individual\ntransition function moves.",
    "start": "649270",
    "end": "655040"
  },
  {
    "text": "So this is the entire\nstage of the machine. The very first stage\ntakes order n steps,",
    "start": "655040",
    "end": "661570"
  },
  {
    "text": "because you have to make\na scan across the input. And then I'm not giving\nall the full detail.",
    "start": "661570",
    "end": "667393"
  },
  {
    "text": "Of course, you're\ngoing to scan and then you're going to return the head\nback to its starting position. I'm not-- that's just going\nto be an extra factor of n,",
    "start": "667393",
    "end": "676915"
  },
  {
    "text": "an extra n. And so that's where we're\ntalking about being order n steps for the very first stage.",
    "start": "676915",
    "end": "683760"
  },
  {
    "text": "And then as you go\nthrough the repeat loop, each time you go\nthrough the repeat loop, you're going to cross\noff one a and one b.",
    "start": "683760",
    "end": "691290"
  },
  {
    "text": "So that's going to mean you're\ngoing to have to do this roughly order-- you're going\nhave to do this order n times",
    "start": "691290",
    "end": "697740"
  },
  {
    "text": "in order to cross off\nall the a's and b's. So there's going to be order n\niterations of this repeat loop.",
    "start": "697740",
    "end": "703709"
  },
  {
    "text": "Each one of them is going\nto, again, require a scan. So that's order n steps for\neach one of the iterations.",
    "start": "703710",
    "end": "711259"
  },
  {
    "text": "So adding that all up, the very\ntop row gives us the order n",
    "start": "711260",
    "end": "717640"
  },
  {
    "text": "and then we have the\norder n iterations times order n steps is\norder n squared steps.",
    "start": "717640",
    "end": "723320"
  },
  {
    "text": "And so the sum of\nthese two is order n squared steps due to\nthe nature of arithmetic",
    "start": "723320",
    "end": "731230"
  },
  {
    "text": "when you have the\nbig O notation. The dominant term overrides\nall of the others.",
    "start": "731230",
    "end": "739220"
  },
  {
    "text": "So that's, in a\nnutshell, how we--",
    "start": "739220",
    "end": "744430"
  },
  {
    "text": "well, this is our\nvery first example of analyzing the Turing machine\nalgorithm for a language.",
    "start": "744430",
    "end": "751420"
  },
  {
    "text": "So let me ask you now whether\nthere is some other Turing machine, some other one\ntape Turing machine which",
    "start": "751420",
    "end": "757870"
  },
  {
    "text": "can do better than this\nTuring machine does in terms of how much time it takes.",
    "start": "757870",
    "end": "764720"
  },
  {
    "text": "So one idea that you might\nhave, instead of crossing off a single a or a single b,\nmaybe you can cross off two",
    "start": "764720",
    "end": "772770"
  },
  {
    "text": "a's and two b's, or\n10 a's and 10 b's. Well, that'll cut down the\nrunning time by a factor of 10.",
    "start": "772770",
    "end": "778890"
  },
  {
    "text": "But from the standpoint\nof this theorem, it's still going to be an\norder n squared algorithm.",
    "start": "778890",
    "end": "784360"
  },
  {
    "text": "And so that really doesn't\nchange the amount of time",
    "start": "784360",
    "end": "789870"
  },
  {
    "text": "used from the perspective of-- from our perspective,\nwhere we're",
    "start": "789870",
    "end": "795180"
  },
  {
    "text": "going to be ignoring the\nconstant factors on the running time.",
    "start": "795180",
    "end": "800579"
  },
  {
    "text": "So I ask you here,\ncan you do better than just improving things\nby a constant factor?",
    "start": "800580",
    "end": "806780"
  },
  {
    "text": "There we go. OK, so here's a check-in on\nthis problem, on the problem A,",
    "start": "806780",
    "end": "814550"
  },
  {
    "text": "deciding A on a one\ntape Turing machine. Can we do better\nthan order n squared,",
    "start": "814550",
    "end": "821780"
  },
  {
    "text": "as I just described\nin that theorem in that algorithm\nfor that theorem?",
    "start": "821780",
    "end": "827120"
  },
  {
    "text": "Or can you get it\ndown to n log n? Or maybe you can get\nit down to order n?",
    "start": "827120",
    "end": "834980"
  },
  {
    "text": "What do you think? Obviously, we're\njust getting started. But just make your best guess.",
    "start": "834980",
    "end": "844250"
  },
  {
    "text": "And let me just post\nthat for you as a poll. ",
    "start": "844250",
    "end": "849300"
  },
  {
    "text": "What's most important to\nme is that you understand the terminology that we're\nusing and the way we're discussing-- the way\nwe're talking about it.",
    "start": "849300",
    "end": "856440"
  },
  {
    "text": "Because that's going\nto be setting us up for the\ndefinitions that we're going to come a little\nbit later in the lecture.",
    "start": "856440",
    "end": "864930"
  },
  {
    "text": "So I'm going to close the poll. ",
    "start": "864930",
    "end": "870305"
  },
  {
    "text": "We're kind of all\nover the place on it. But that's good. ",
    "start": "870305",
    "end": "876940"
  },
  {
    "text": "Since we haven't really\ncovered this material yet. In fact, B is the\ncorrect answer.",
    "start": "876940",
    "end": "882370"
  },
  {
    "text": "We can improve this algorithm\ndown to order n log n, but not all the way\ndown to order n.",
    "start": "882370",
    "end": "889068"
  },
  {
    "text": "So let me give-- let me show\nyou how you do it in order n log n on the next slide.",
    "start": "889068",
    "end": "894110"
  },
  {
    "text": "And so here is a one\ntape Turing machine",
    "start": "894110",
    "end": "900029"
  },
  {
    "text": "that can decide A by using only\norder n log n steps instead",
    "start": "900030",
    "end": "905790"
  },
  {
    "text": "of order n squared steps. So this is a\nsignificant improvement. ",
    "start": "905790",
    "end": "913930"
  },
  {
    "text": "So I'll describe\nthe Turing machine. Here, again, is the picture\nof the machine on an input.",
    "start": "913930",
    "end": "921690"
  },
  {
    "text": "And the very first\nthing I need to say is that we're going to scan\nto make sure the input is of the right form.",
    "start": "921690",
    "end": "928368"
  },
  {
    "text": "And now, we're going\nto-- again, it's going to be making repeated\npasses over the input.",
    "start": "928368",
    "end": "933660"
  },
  {
    "text": "But we're going to do it\na little differently now. Instead of crossing off a\nsingle a and a single b,",
    "start": "933660",
    "end": "939210"
  },
  {
    "text": "or some fixed number of a's and\na fixed number of b's, we're going to cross off every\nother a and every other b.",
    "start": "939210",
    "end": "946629"
  },
  {
    "text": "And that way, we're\ngoing to essentially cut the number of a and b in half.",
    "start": "946630",
    "end": "951960"
  },
  {
    "text": "And that's why the\nnumber of iterations is only going to be a\nlog, instead of linear.",
    "start": "951960",
    "end": "959660"
  },
  {
    "text": "So we're going to\ncross off every other a and every other b. ",
    "start": "959660",
    "end": "965430"
  },
  {
    "text": "And at the same\ntime, we're going to keep track of the\nparity, the even/odd parity",
    "start": "965430",
    "end": "971610"
  },
  {
    "text": "of the number of\na's that we've seen and the parity of\nthe number of b's",
    "start": "971610",
    "end": "977760"
  },
  {
    "text": "that we've seen that have\nnot yet been crossed off. And we're going to compare\nthose parities to make sure",
    "start": "977760",
    "end": "984860"
  },
  {
    "text": "that they agree. If they ever disagree, we know\nwe started off with different",
    "start": "984860",
    "end": "990380"
  },
  {
    "text": "numbers of a's and b's. And I'll illustrate\nthis in a second,",
    "start": "990380",
    "end": "996120"
  },
  {
    "text": "just to make sure we\nunderstand this algorithm. So I'm going to write down as\na little table of the parities",
    "start": "996120",
    "end": "1005080"
  },
  {
    "text": "that we've seen. And I'm going to\nillustrate the algorithm with a little animation. So again, we're now\ngoing to scan across,",
    "start": "1005080",
    "end": "1013720"
  },
  {
    "text": "crossing off every other\na, and then every other b.",
    "start": "1013720",
    "end": "1019560"
  },
  {
    "text": "But before we get to the b's, we\nobserve, as we cross these off, that we had six a's.",
    "start": "1019560",
    "end": "1024709"
  },
  {
    "text": "Now, I'm not saying\nwe count them. We just keep track of\nthe even/odd parity. That can be done in the\nfinite control of the machine.",
    "start": "1024710",
    "end": "1031250"
  },
  {
    "text": "Counting them would\nbe more complicated. But just keeping\ntrack of the parity is something that the\nfinite automaton could do.",
    "start": "1031250",
    "end": "1038930"
  },
  {
    "text": "So the parity in this case,\nbecause they were six, is going to be even.",
    "start": "1038930",
    "end": "1043965"
  },
  {
    "text": "Now, we cross off the b's.  Same, even parity, now we're\ngoing to return the head back",
    "start": "1043966",
    "end": "1051110"
  },
  {
    "text": "to the beginning, I'm\nobviously not showing the head moving here. We return the head\nback to the beginning.",
    "start": "1051110",
    "end": "1056419"
  },
  {
    "text": "And now, we scan across,\nagain, crossing off every other remaining a and counting the\nparities of the remaining a's.",
    "start": "1056420",
    "end": "1062690"
  },
  {
    "text": "So here now, it's\ngoing to be this one and this one are going\nto get crossed off.",
    "start": "1062690",
    "end": "1068370"
  },
  {
    "text": "And there were three a's,\nso that was odd parity. And the same for the b's,\nthree b's, odd parity.",
    "start": "1068370",
    "end": "1076800"
  },
  {
    "text": "And now we return our head\nback to the beginning, cross again, off every\nother a and every other b.",
    "start": "1076800",
    "end": "1084840"
  },
  {
    "text": "So that was odd parity,\nthere was just one. Crossing off the b, odd\nparity because just one.",
    "start": "1084840",
    "end": "1091140"
  },
  {
    "text": "They all agree. So the machine is\ngoing to accept.",
    "start": "1091140",
    "end": "1096890"
  },
  {
    "text": "Because everything\nis now crossed off. And the parities\nagreed along the way.",
    "start": "1096890",
    "end": "1103500"
  },
  {
    "text": "Let me just say for\na second, obviously, if you ever get disagreement\non the parities, then that the number of\na's and the number of b's",
    "start": "1103500",
    "end": "1111710"
  },
  {
    "text": "had to disagree. But how do we know that if the\nparities always agree that we",
    "start": "1111710",
    "end": "1117440"
  },
  {
    "text": "actually did start out with\nthe same number of a's as b's? And that, you could see that\nin a number of different ways,",
    "start": "1117440",
    "end": "1123230"
  },
  {
    "text": "but perhaps a cute way to\nsee it is there is actually-- if you look at these parities ,\nhere the sequence of parities,",
    "start": "1123230",
    "end": "1130759"
  },
  {
    "text": "actually in reverse. So if you say odd,\nodd, even, and you",
    "start": "1130760",
    "end": "1136700"
  },
  {
    "text": "look at the binary\nrepresentation of the number of\na's, which is six, so the binary\nrepresentation would be 110.",
    "start": "1136700",
    "end": "1144997"
  },
  {
    "text": "The fact that you\nget odd, odd, even and 110 is not a coincidence.",
    "start": "1144998",
    "end": "1150060"
  },
  {
    "text": "In fact, the sequence\nof parities in reverse that you get is exactly the same\nas the binary representation.",
    "start": "1150060",
    "end": "1159799"
  },
  {
    "text": "You'd have to confirm\nthat with a little proof. It's not hard. But that, once\nyou have confirmed",
    "start": "1159800",
    "end": "1166940"
  },
  {
    "text": "that, you can see that if the\nsequence of parities agree,",
    "start": "1166940",
    "end": "1172418"
  },
  {
    "text": "then the numbers\nhave to be the same, because the binary\nrepresentations agreed.",
    "start": "1172418",
    "end": "1177799"
  },
  {
    "text": "OK, so now getting\nto the analysis here, again, order n steps\nto do the check.",
    "start": "1177800",
    "end": "1183170"
  },
  {
    "text": "Log n iterations. Each scan takes order n steps. So the total running time here\nis going to be order n log n.",
    "start": "1183170",
    "end": "1192950"
  },
  {
    "text": "It's going to be\nthe log n times n. That's where the n\nlog n comes from.",
    "start": "1192950",
    "end": "1198750"
  },
  {
    "text": "Now, question you\nmight ask, could I do even better than that? Can I beat n log n by more\nthan any constant factor?",
    "start": "1198750",
    "end": "1206640"
  },
  {
    "text": "So can I do little o of n log n? And the answer is no.",
    "start": "1206640",
    "end": "1212640"
  },
  {
    "text": "This is the best\npossible one tape Turing machine for this language. ",
    "start": "1212640",
    "end": "1219760"
  },
  {
    "text": "So a one tape Turing machine\ncannot decide A by using little o of n log n steps.",
    "start": "1219760",
    "end": "1227770"
  },
  {
    "text": "We're not going to prove that. I'm not going to ask you to\nbe responsible for the proof. But in fact, what\nyou can show is",
    "start": "1227770",
    "end": "1235710"
  },
  {
    "text": "that any language that you can\ndo on a one tape Turing machine in the little o of n log n\nsteps turns out to be regular.",
    "start": "1235710",
    "end": "1242850"
  },
  {
    "text": " So you can prove a\nrather strong theme here.",
    "start": "1242850",
    "end": "1250100"
  },
  {
    "text": "Not super difficult to prove. But I don't want to\nspend a lot of time on proving grounds\nfor Turing machines.",
    "start": "1250100",
    "end": "1258360"
  },
  {
    "text": "Because really the whole\npurpose of setting this up using Turing machines is to talk\nabout algorithms in general,",
    "start": "1258360",
    "end": "1263760"
  },
  {
    "text": "algorithms in\ngeneral, I'm not going to be focusing on the nitty\ngritty of Turing machines. ",
    "start": "1263760",
    "end": "1271200"
  },
  {
    "text": "OK so what is my-- ",
    "start": "1271200",
    "end": "1282040"
  },
  {
    "text": "yeah, so I wanted to\njust stop and make sure that we are together here.",
    "start": "1282040",
    "end": "1287660"
  },
  {
    "text": "So a brief pause. And feel free to send\nme any questions. ",
    "start": "1287660",
    "end": "1298330"
  },
  {
    "text": "OK, this is a good question. If we can keep\ntrack of parities, why can't we just keep track\nof the number of a's or b's?",
    "start": "1298330",
    "end": "1307160"
  },
  {
    "text": "Well, you could keep\ntrack of the parity in the finite memory. And so you can do that\nwith effectively no work.",
    "start": "1307160",
    "end": "1313950"
  },
  {
    "text": "But the finite memory cannot is\nnot enough for doing a count up to some arbitrarily\nlarge number.",
    "start": "1313950",
    "end": "1320050"
  },
  {
    "text": "Now, you could store\nthe count on the tape. But that's going to cost you\ntime to maintain that counter.",
    "start": "1320050",
    "end": "1326740"
  },
  {
    "text": "And so that's not going\nto be so simple as keeping",
    "start": "1326740",
    "end": "1337000"
  },
  {
    "text": "track of the parity\nin the finite memory. ",
    "start": "1337000",
    "end": "1345300"
  },
  {
    "text": "Somebody is asking if a\nstar b star is regular. Yes, a star b star is regular. So what?",
    "start": "1345300",
    "end": "1350880"
  },
  {
    "text": "But a to the k, b to the\nk, which is our language, is not regular. That's the language\nwe're looking at.",
    "start": "1350880",
    "end": "1356550"
  },
  {
    "text": " So getting questions about what\nhappens with multiple tapes.",
    "start": "1356550",
    "end": "1365120"
  },
  {
    "text": "We'll talk about\nthat in a second. Yes, we could do an order n\nsteps on a regular computer,",
    "start": "1365120",
    "end": "1371740"
  },
  {
    "text": "sure. But for this slide,\nanyway, we're",
    "start": "1371740",
    "end": "1377810"
  },
  {
    "text": "looking at one tape\nTuring machines. ",
    "start": "1377810",
    "end": "1384950"
  },
  {
    "text": "Getting questions about\nbig O and little o. ",
    "start": "1384950",
    "end": "1390590"
  },
  {
    "text": "For something to\nbe little o means it's less than any constant\nfactor times the function.",
    "start": "1390590",
    "end": "1398190"
  },
  {
    "text": "So you have to look at the\ndefinition in the book. I think enough\npeople in the class",
    "start": "1398190",
    "end": "1403669"
  },
  {
    "text": "probably know this and\nhave seen this already, I don't want to spend\neverybody's time on it. But please review\nit in the book.",
    "start": "1403670",
    "end": "1409905"
  },
  {
    "text": "Somebody is asking\nif you need to store the parity on the tape. No, you can just store\nit in the finite memory. ",
    "start": "1409905",
    "end": "1418620"
  },
  {
    "text": "I mean, storing in the\nfinite memory seems to me the simplest thing. Why don't we move on?",
    "start": "1418620",
    "end": "1424360"
  },
  {
    "text": "Please feel free to ask\nquestions to the TAs as well. We have two TAs at least\nhere attending with me.",
    "start": "1424360",
    "end": "1430679"
  },
  {
    "text": "So good, all right, all right,\nso we cannot do better than",
    "start": "1430680",
    "end": "1446600"
  },
  {
    "text": "a one tape Turing machine-- on\na one tape Turing machine than order n log n. And that's something\nwe can prove,",
    "start": "1446600",
    "end": "1453440"
  },
  {
    "text": "though we're not\ngoing to do it here. However, if you change the\nmodel, for example, you",
    "start": "1453440",
    "end": "1458450"
  },
  {
    "text": "use a two tape Turing machine,\nthen yes, as a lot of you are suggesting in the chat,\nyou can do better than that.",
    "start": "1458450",
    "end": "1464700"
  },
  {
    "text": "So if we now have\na two tape Turing machine, or a multi-tape\nTuring machine,",
    "start": "1464700",
    "end": "1469929"
  },
  {
    "text": "you can do it in order n steps. And that's actually the point\nI'm really trying to make here.",
    "start": "1469930",
    "end": "1476990"
  },
  {
    "text": "So if you have here your\ntwo tape Turing machine,",
    "start": "1476990",
    "end": "1482710"
  },
  {
    "text": "then two tapes, same language.",
    "start": "1482710",
    "end": "1488309"
  },
  {
    "text": "Now, what we're\ngoing to do is copy the a's to the second tape. That we can do on a single pass.",
    "start": "1488310",
    "end": "1495330"
  },
  {
    "text": "And then once the a's have\nbeen copied to the second tape, we can continue on reading\nthe b's and match them off",
    "start": "1495330",
    "end": "1503040"
  },
  {
    "text": "with the a's that appear\non the second tape. So in order n steps, you\ncan do the comparison,",
    "start": "1503040",
    "end": "1508590"
  },
  {
    "text": "instead of order n log n steps.  And of course, if\nthey match, you're",
    "start": "1508590",
    "end": "1513790"
  },
  {
    "text": "going to accept,\notherwise reject. So let's just see,\nhere's a little animation",
    "start": "1513790",
    "end": "1520800"
  },
  {
    "text": "demonstrating that. Of course, it's very simple. So here is-- here are the--\nif you could see that,",
    "start": "1520800",
    "end": "1528020"
  },
  {
    "text": "it came maybe a little too fast. Here, let's just show it again. Here is the heads moving\nacross and the a's",
    "start": "1528020",
    "end": "1533320"
  },
  {
    "text": "coming down to the bottom. And now, the head, the upper\nhead is going to continue",
    "start": "1533320",
    "end": "1540070"
  },
  {
    "text": "on reading the b's. The lower head is going to\ngo back to the beginning on the a's and matching\noff the b's with the a's.",
    "start": "1540070",
    "end": "1547480"
  },
  {
    "text": "And that's how we\ncan verify or check that they are the same number. ",
    "start": "1547480",
    "end": "1555772"
  },
  {
    "text": "So now in this case, they\nwere the same number. So the machine would accept. If they were a different number,\nthe machine would not accept.",
    "start": "1555772",
    "end": "1562850"
  },
  {
    "text": "And the analysis is very simple. ",
    "start": "1562850",
    "end": "1568070"
  },
  {
    "text": "Each stage here is going to\ntake a linear number of steps, order n steps, because it just\nconsists of a single scan.",
    "start": "1568070",
    "end": "1576000"
  },
  {
    "text": "There are no-- there are\nno loops in this machine, no repeat loops. ",
    "start": "1576000",
    "end": "1583730"
  },
  {
    "text": "So question on this? ",
    "start": "1583730",
    "end": "1594080"
  },
  {
    "text": "All right, why don't\nwe move on then? ",
    "start": "1594080",
    "end": "1601430"
  },
  {
    "text": "Now, observe-- and the point\nI'm really trying to make is that on a one\ntape Turing machine,",
    "start": "1601430",
    "end": "1610529"
  },
  {
    "text": "you can do it in n log\nn, but not any better. But on a two tape\nTuring machine, you can do it in order n.",
    "start": "1610530",
    "end": "1617789"
  },
  {
    "text": "So there's a difference\nin how much time you",
    "start": "1617790",
    "end": "1623200"
  },
  {
    "text": "need to spend, how many\nsteps you need to spend, depending upon the model. And that's significant for us.",
    "start": "1623200",
    "end": "1630380"
  },
  {
    "text": "So the number of steps\ndepends on the model. One tape Turing machine was\norder n log n, multi-tape",
    "start": "1630380",
    "end": "1635470"
  },
  {
    "text": "was order n. We call that model dependence. If you contrast that with the\nsituation in the complexity--",
    "start": "1635470",
    "end": "1643580"
  },
  {
    "text": "in the computability\nsection of the course, we had model independence.",
    "start": "1643580",
    "end": "1650809"
  },
  {
    "start": "1646000",
    "end": "1903000"
  },
  {
    "text": "The choice of the\nmodel didn't matter. And that was nice for us.",
    "start": "1650810",
    "end": "1655860"
  },
  {
    "text": "Because the theory\nof the decidability didn't depend upon whether\nyou had a one tape Turing",
    "start": "1655860",
    "end": "1662159"
  },
  {
    "text": "machine, or a multi-tape\nTuring machine, it was all the same set of\ndecidable and recognizable",
    "start": "1662160",
    "end": "1669149"
  },
  {
    "text": "languages. So we didn't have to\nworry about which model we're actually\ngoing to work with.",
    "start": "1669150",
    "end": "1674570"
  },
  {
    "text": "We could work with\nany model, even just an informal model of algorithm\nwould be good enough.",
    "start": "1674570",
    "end": "1679990"
  },
  {
    "text": "Because we're going to end\nup with the same notion",
    "start": "1679990",
    "end": "1685179"
  },
  {
    "text": "in the end. Now that goes away\nin complexity theory.",
    "start": "1685180",
    "end": "1693500"
  },
  {
    "text": "Now, we have a difference,\ndepending upon the model. And from a mathematical\nstandpoint,",
    "start": "1693500",
    "end": "1700340"
  },
  {
    "text": "that's a little less nice. Because which model\ndo you work with?",
    "start": "1700340",
    "end": "1707150"
  },
  {
    "text": "If you want to understand the\ncomplexity of some problem that you have at hand, now\nyou have to make a choice.",
    "start": "1707150",
    "end": "1713698"
  },
  {
    "text": "You're going to work\nwith a Turing machine, or how many tapes,\nor you're going to look at some other\nmodel, and you're",
    "start": "1713698",
    "end": "1719200"
  },
  {
    "text": "going to get different results. So it's somewhat less natural\nfrom a mathematical standpoint",
    "start": "1719200",
    "end": "1724540"
  },
  {
    "text": "just to talk about the\ncomplexity of some problem. But we're going to kind of bring\nback something close enough",
    "start": "1724540",
    "end": "1733289"
  },
  {
    "text": "to model independence by\nobserving that even though we don't have model\nindependence, as we did",
    "start": "1733290",
    "end": "1739860"
  },
  {
    "text": "in computability theory, we can\nlimit how much dependence there is.",
    "start": "1739860",
    "end": "1745230"
  },
  {
    "text": "So the amount of\ndependence is going to be low, as we\nwill see, provided you stick with a reasonable\nclass of deterministic models.",
    "start": "1745230",
    "end": "1753210"
  },
  {
    "text": " So the dependence,\nthough it does exist,",
    "start": "1753210",
    "end": "1759270"
  },
  {
    "text": "is not going to be that much. It's going to be\npolynomial dependence.",
    "start": "1759270",
    "end": "1764640"
  },
  {
    "text": "And we'll say exactly what\nthat means in a second. And from our\nstandpoint, that's going",
    "start": "1764640",
    "end": "1769770"
  },
  {
    "text": "to be a small difference,\na negligible difference that we're going to ignore.",
    "start": "1769770",
    "end": "1774960"
  },
  {
    "text": " So we're going to focus\non questions that do not",
    "start": "1774960",
    "end": "1780450"
  },
  {
    "text": "depend on the model choice among\nthese reasonable deterministic models. Now, you may say,\nwell, that's not",
    "start": "1780450",
    "end": "1786720"
  },
  {
    "text": "interesting from a\npractical standpoint, because polynomial differences,\nsay the difference between n squared and n cubed certainly\nmake a difference in practice.",
    "start": "1786720",
    "end": "1794175"
  },
  {
    "text": " But it really depends on\nwhat kinds of questions",
    "start": "1794175",
    "end": "1814730"
  },
  {
    "text": "you're focusing on. So if you want to look\nat something that's",
    "start": "1814730",
    "end": "1820538"
  },
  {
    "text": "a very precise distinction, say\nbetween n squared and n cubed,",
    "start": "1820538",
    "end": "1826559"
  },
  {
    "text": "then you might want to\nfocus in on which model you want to be working with. And that's going to be more the\ndomain of an algorithms class.",
    "start": "1826560",
    "end": "1834260"
  },
  {
    "text": "But from our\nstandpoint, we're going to be looking at other,\nstill important, questions.",
    "start": "1834260",
    "end": "1840120"
  },
  {
    "text": "But they are questions that\ndon't depend upon exactly which polynomial\nyou're going to have.",
    "start": "1840120",
    "end": "1846290"
  },
  {
    "text": "We're going to be looking\nmore at distinctions between polynomial\nand exponential. And still, there are\nimportant practical questions",
    "start": "1846290",
    "end": "1852710"
  },
  {
    "text": "that arise in that\nsomewhat different setting. ",
    "start": "1852710",
    "end": "1859820"
  },
  {
    "text": "So with that in\nmind, we're going to continue to use\nthe one tape Turing",
    "start": "1859820",
    "end": "1865250"
  },
  {
    "text": "machine as our basic\nmodel of complexity. Since the model among the\nreasonable deterministic models",
    "start": "1865250",
    "end": "1873350"
  },
  {
    "text": "in the end is not\ngoing to matter from the perspective of\nthe kinds of questions we're going to be asking.",
    "start": "1873350",
    "end": "1878510"
  },
  {
    "start": "1878510",
    "end": "1885190"
  },
  {
    "text": "So with that, so we\nare going to continue, then, it's important to remember\nthat from going forward,",
    "start": "1885190",
    "end": "1893380"
  },
  {
    "text": "we're going to stick with the\none tape Turing machine model. Maybe that's something you would\nhave expected us to do anyway.",
    "start": "1893380",
    "end": "1898585"
  },
  {
    "text": "But I'm trying to justify that\nthrough this little discussion that we had so far, thus far.",
    "start": "1898585",
    "end": "1905240"
  },
  {
    "start": "1903000",
    "end": "1971000"
  },
  {
    "text": "So now, we're going to start\ndefining things with the one tape model in mind.",
    "start": "1905240",
    "end": "1911563"
  },
  {
    "text": "So first of all, if you\nhave a Turing machine, we're going to say it runs\nin a certain amount of time.",
    "start": "1911563",
    "end": "1917679"
  },
  {
    "text": "So if t is some sort of time\nbound function, like n squared, or n log n, we'll\nsay the machine runs",
    "start": "1917680",
    "end": "1924570"
  },
  {
    "text": "in that amount of time,\nlike n squared or n log n. if that machine M always halts\nwithin that number of steps",
    "start": "1924570",
    "end": "1933990"
  },
  {
    "text": "on all inputs of length n. So it always halts within t of\nn steps on inputs of length n.",
    "start": "1933990",
    "end": "1941200"
  },
  {
    "text": "Then we'll say that the\nmachine runs in t of n time. So in other words, if the\nmachine runs in n squared time,",
    "start": "1941200",
    "end": "1949889"
  },
  {
    "text": "then the machine, when you\ngive it an input of length 10, it's got to be\nguaranteed to halt",
    "start": "1949890",
    "end": "1955140"
  },
  {
    "text": "within 100 steps, 10\nsquared, 100 steps, on every input of length 10.",
    "start": "1955140",
    "end": "1963360"
  },
  {
    "text": "That's what it means\nfor the machine to be running in that much time. And it has to do that for every\nn, for every input length.",
    "start": "1963360",
    "end": "1972970"
  },
  {
    "start": "1971000",
    "end": "2138000"
  },
  {
    "text": "And width that, we're going\nto come to the following definition, which is highlighted\nin color, because it's",
    "start": "1972970",
    "end": "1978760"
  },
  {
    "text": "going to be-- we're going to be\nusing this definition throughout the semester. So it's important\nto understand it.",
    "start": "1978760",
    "end": "1984010"
  },
  {
    "text": " This is the definition of what's\ncalled the time complexity",
    "start": "1984010",
    "end": "1990180"
  },
  {
    "text": "classes. And what I'm going to do\nis take some bound, t of n,",
    "start": "1990180",
    "end": "1997419"
  },
  {
    "text": "and again, think of t of n\nlike a bound like n squared. So if you have time t of\nn or like time n squared,",
    "start": "1997420",
    "end": "2005560"
  },
  {
    "text": "that's going to be the\ncollection of all languages that you can decide\nwithin time n squared",
    "start": "2005560",
    "end": "2011410"
  },
  {
    "text": "or within time t of n. So in other words, it's a\ncollection of all languages B",
    "start": "2011410",
    "end": "2016419"
  },
  {
    "text": "such that there's some\none tape Turing machine, here we're focusing again on\nthe one tape Turing machine,",
    "start": "2016420",
    "end": "2022480"
  },
  {
    "text": "there is some deterministic\none tape Turing machine that decides\nB. And that machine",
    "start": "2022480",
    "end": "2028450"
  },
  {
    "text": "runs in that amount of time. ",
    "start": "2028450",
    "end": "2034000"
  },
  {
    "text": "So this is a collection\nof languages.  The time complexity class\nis a set of languages.",
    "start": "2034000",
    "end": "2041480"
  },
  {
    "text": "I'm going to draw\nit now as a diagram. So if you take the\nlanguage, again,",
    "start": "2041480",
    "end": "2046570"
  },
  {
    "text": "that we've been using as our\nstandard example, a to the k, b to the k, that's\nn time n log n,",
    "start": "2046570",
    "end": "2055250"
  },
  {
    "text": "as we observed two\nslides to slides back, or three slides back.",
    "start": "2055250",
    "end": "2061138"
  },
  {
    "text": "So on a one tape Turing machine,\nyou can do this language A in time n log n. So it's in the time\ncomplexity class n log n.",
    "start": "2061139",
    "end": "2069350"
  },
  {
    "text": "This region here captures\nall of the languages",
    "start": "2069350",
    "end": "2074899"
  },
  {
    "text": "that you can do in\norder n log n time. ",
    "start": "2074900",
    "end": "2081429"
  },
  {
    "text": "For example, that also includes\nall of the regular languages.",
    "start": "2081429",
    "end": "2087099"
  },
  {
    "text": "Why is that?  Well, any regular language can\nbe done on a one tape Turing",
    "start": "2087100",
    "end": "2096050"
  },
  {
    "text": "machine in time order n, because\nthe Turing machine only just needs to scan across.",
    "start": "2096050",
    "end": "2102450"
  },
  {
    "text": "Doesn't even need to write, just\nneed to scan across from left to right on the tape. And in n steps,\nit has the answer.",
    "start": "2102450",
    "end": "2110300"
  },
  {
    "text": "So all of the regular\nlanguages are actually in time n, certainly a subset\nof time n log n.",
    "start": "2110300",
    "end": "2116290"
  },
  {
    "text": "And these all form a\nkind of a hierarchy. So if you increase\nthe bound, you can imagine that the\nclass of languages",
    "start": "2116290",
    "end": "2123220"
  },
  {
    "text": "grows as you allow the machine\nto have more and more steps",
    "start": "2123220",
    "end": "2129970"
  },
  {
    "text": "to do its computing. So these are all the languages\nthat you can do in n squared,",
    "start": "2129970",
    "end": "2135400"
  },
  {
    "text": "order n squared time on a\none tape Turing machine, n cubed time on a one\ntape Turing machine,",
    "start": "2135400",
    "end": "2141500"
  },
  {
    "start": "2138000",
    "end": "2354000"
  },
  {
    "text": "and so on, 2 exponential time,\n2 to the n time on a one tape Turing machine.",
    "start": "2141500",
    "end": "2147240"
  },
  {
    "text": "These are all\ncollections of languages getting larger and larger\nas we increase the bound.",
    "start": "2147240",
    "end": "2154730"
  },
  {
    "start": "2154730",
    "end": "2161780"
  },
  {
    "text": "So someone is asking kind of--  let's see, let me get to\nsome of these questions here.",
    "start": "2161780",
    "end": "2168595"
  },
  {
    "text": "I'll try to get\nto them in order. ",
    "start": "2168595",
    "end": "2184130"
  },
  {
    "text": "So somebody says if you have-- a good question, if you\nhave a regular computer, so an ordinary sort of\nrandom access computer,",
    "start": "2184130",
    "end": "2191380"
  },
  {
    "text": "which we'll talk about that in\na second, can do it in order n, can you do it on a\nmulti-tape Turing machine",
    "start": "2191380",
    "end": "2196700"
  },
  {
    "text": "also in order n time? Actually, I don't know the\nanswer to that offhand. I suspect the answer is no.",
    "start": "2196700",
    "end": "2201799"
  },
  {
    "text": "That ordinary computers have\na random access capability that Turing machines do not.",
    "start": "2201800",
    "end": "2207860"
  },
  {
    "text": "And so that there are going to\nbe some examples of problems that you can do with a random-- with a regular computer that you\ncannot do with the multi-tape",
    "start": "2207860",
    "end": "2214940"
  },
  {
    "text": "Turing machine in order n time. I'd have to double check\nthat, though, so we can--",
    "start": "2214940",
    "end": "2222090"
  },
  {
    "text": "it's also a question\nwhat we believe is true and what we can\nprove to be true. As we'll see, there\nare a lot of things",
    "start": "2222090",
    "end": "2228560"
  },
  {
    "text": "that we believe to be\ntrue in this subject that we don't know how to prove. ",
    "start": "2228560",
    "end": "2234043"
  },
  {
    "text": "Somebody is asking kind\nof an interesting sort of more advanced question. Is there some function\nf, some function t",
    "start": "2234043",
    "end": "2242320"
  },
  {
    "text": "where it's so big that\nso that time t of n gives you all of the\ndecidable problems?",
    "start": "2242320",
    "end": "2250570"
  },
  {
    "text": "It would be a very big t. But the answer actually\nto that question is yes.",
    "start": "2250570",
    "end": "2255849"
  },
  {
    "text": "But that's a little bit exotic. So let's not spend a lot\nof time on that right here. But happy to talk\nabout that offline.",
    "start": "2255850",
    "end": "2262120"
  },
  {
    "text": " It's a good question here.",
    "start": "2262120",
    "end": "2267290"
  },
  {
    "text": "Somebody's asking\nme does it mean that there are no languages\nbetween order n and order n log n, because I pointed out\nthat anything below n log n",
    "start": "2267290",
    "end": "2274890"
  },
  {
    "text": "is going to be regular. And so, as soon as\nyou get below n log n, you can do it in order n. And yes, there is what's\ncalled a gap between order n",
    "start": "2274890",
    "end": "2283660"
  },
  {
    "text": "and order n log n on a\none tape Turing machine. You don't get anything new\nfrom order n until you jump up.",
    "start": "2283660",
    "end": "2289070"
  },
  {
    "text": "So from order n to order n log\nlog n, nothing new shows up.",
    "start": "2289070",
    "end": "2295150"
  },
  {
    "text": "So we'll talk about those kinds\nof things a little bit down the road, when we look at\nactually the relationship among these various classes,\nand what we call a hierarchy",
    "start": "2295150",
    "end": "2304500"
  },
  {
    "text": "theorem, which shows-- how much bigger do you have\nto make the bound in order to be sure you'll\nget something new?",
    "start": "2304500",
    "end": "2310800"
  },
  {
    "start": "2310800",
    "end": "2316760"
  },
  {
    "text": "All right, somebody's\nasking is there",
    "start": "2316760",
    "end": "2322830"
  },
  {
    "text": "a model which has the\nsame time complexity as a normal computer? ",
    "start": "2322830",
    "end": "2330993"
  },
  {
    "text": "Well, I mean, there's\nthe random access model, which is supposed to\ncapture a normal computer.",
    "start": "2330993",
    "end": "2336900"
  },
  {
    "text": "So let me-- these are\nall great questions, kind",
    "start": "2336900",
    "end": "2342490"
  },
  {
    "text": "of more riffing off of this\ninto more advanced directions.",
    "start": "2342490",
    "end": "2348520"
  },
  {
    "text": " Let's move on.",
    "start": "2348520",
    "end": "2354470"
  },
  {
    "text": "Here's another check-in. Suppose we take-- this is a\nlittle bit of a check to see",
    "start": "2354470",
    "end": "2360160"
  },
  {
    "text": "how well-- how comfortable you are with\nthe notions we've just presented and whether you can think\nabout some of the arguments",
    "start": "2360160",
    "end": "2366550"
  },
  {
    "text": "that we've made and apply\nthem to a new language. So take the language ww reverse,\nstrings followed by their--",
    "start": "2366550",
    "end": "2377140"
  },
  {
    "text": " followed by\nthemselves backwards. This language B are the\neven length palindromes,",
    "start": "2377140",
    "end": "2384010"
  },
  {
    "text": "if you will. What's the smallest\nbound that you",
    "start": "2384010",
    "end": "2389170"
  },
  {
    "text": "need to be able to\nsolve that language B?",
    "start": "2389170",
    "end": "2397411"
  },
  {
    "text": "And I'll pose it as a--  pose that as a question for you.",
    "start": "2397412",
    "end": "2405700"
  },
  {
    "text": "So which time complexity\nclass is that language B in?",
    "start": "2405700",
    "end": "2416660"
  },
  {
    "text": "Is it time order n, order\nn log n, n squared, so on? What do you think?",
    "start": "2416660",
    "end": "2421940"
  },
  {
    "start": "2421940",
    "end": "2428480"
  },
  {
    "text": "So we're about to come\nto the coffee break. So why don't we-- ",
    "start": "2428480",
    "end": "2435444"
  },
  {
    "text": "I'll answer any\nquestions that come up. I think we're got\neverybody answered. So I'm going to end the polling.",
    "start": "2435445",
    "end": "2441915"
  },
  {
    "text": "OK, make sure you're in\nif you want to be in. ",
    "start": "2441915",
    "end": "2448960"
  },
  {
    "text": "So the correct answer is,\nin fact, order n squared. ",
    "start": "2448960",
    "end": "2456470"
  },
  {
    "text": "It would be hard--  reasonable guess here\nwould be order n log n.",
    "start": "2456470",
    "end": "2463490"
  },
  {
    "text": "I mean, you can come up\nwith the same procedure as the one we showed\nat the beginning,",
    "start": "2463490",
    "end": "2469849"
  },
  {
    "text": "the order n squared procedure\nfor a to the k, b to the k works for ww reverse as well.",
    "start": "2469850",
    "end": "2476900"
  },
  {
    "text": "You can just cross off,\nsweep back and forth, crossing off a symbol\nfrom w, and going across",
    "start": "2476900",
    "end": "2485950"
  },
  {
    "text": "to the other side, crossing\noff a symbol from w reverse. And that procedure will give\nyou an n squared and order",
    "start": "2485950",
    "end": "2492160"
  },
  {
    "text": "n squared algorithm.  You might imagine you can\nimprove it to order n log n.",
    "start": "2492160",
    "end": "2499140"
  },
  {
    "text": "But you cannot. You can prove that order n\nsquared is the best possible. ",
    "start": "2499140",
    "end": "2504970"
  },
  {
    "text": "I'm a little unhappy that a lot\nof you came up with order n, frankly. Because I already told\nyou that order n is--",
    "start": "2504970",
    "end": "2511740"
  },
  {
    "text": "these are just\nregular languages. Anything that you\ncan do in less than-- a little o of n log n\nis going to be regular.",
    "start": "2511740",
    "end": "2517680"
  },
  {
    "text": "And we know this\nlanguage is not regular. So this was not a good answer.",
    "start": "2517680",
    "end": "2525030"
  },
  {
    "text": "So please pay attention. And OK, so let us stop sharing.",
    "start": "2525030",
    "end": "2535790"
  },
  {
    "text": "I will turn now to our\nbreak for five minutes.",
    "start": "2535790",
    "end": "2542270"
  },
  {
    "start": "2539000",
    "end": "3075000"
  },
  {
    "text": "And I'm happy to try to\ntake questions along the way as we're waiting\nfor the time to end.",
    "start": "2542270",
    "end": "2551510"
  },
  {
    "text": "So let's see, let\nme put this up here. ",
    "start": "2551510",
    "end": "2562450"
  },
  {
    "text": "Let me try to take\nsome of your questions. ",
    "start": "2562450",
    "end": "2570910"
  },
  {
    "text": "So someone is asking me\nabout quantum computers as reasonable models of--",
    "start": "2570910",
    "end": "2577330"
  },
  {
    "text": "you may say a quantum\ncomputer is a reasonable model of computation. And that's fine. I would not say it's\na reasonable model",
    "start": "2577330",
    "end": "2583850"
  },
  {
    "text": "of deterministic computation,\nat least from our standpoint. Let's not quibble\nabout the words.",
    "start": "2583850",
    "end": "2591190"
  },
  {
    "text": "I'm not including\nquantum computers in the collection of machines\nthat I have in mind right now",
    "start": "2591190",
    "end": "2598119"
  },
  {
    "text": "when I'm talking about\nthe reasonable models of deterministic\ncomputation that we're",
    "start": "2598120",
    "end": "2603730"
  },
  {
    "text": "going to be discussing. ",
    "start": "2603730",
    "end": "2610660"
  },
  {
    "text": "Let's see.  Oh, because a bunch\nof people apparently are asking the TAs why\nall regular languages can",
    "start": "2610660",
    "end": "2620030"
  },
  {
    "text": "be done in order n. ",
    "start": "2620030",
    "end": "2628200"
  },
  {
    "text": "So if you think\nabout a DFA, which",
    "start": "2628200",
    "end": "2638005"
  },
  {
    "text": "processes an input of\nlength n with n steps,",
    "start": "2638005",
    "end": "2645369"
  },
  {
    "text": "and a DFA is I'm going to\nbe a type of Turing machine",
    "start": "2645370",
    "end": "2651290"
  },
  {
    "text": "that never writes on its\ntape, so if a DFA can do it in n steps, the Turing\nmachine can do it in n steps.",
    "start": "2651290",
    "end": "2659450"
  },
  {
    "text": "And so therefore,\nevery regular language can be done in order n\nsteps on a Turing machine.",
    "start": "2659450",
    "end": "2666079"
  },
  {
    "text": "Not sure where the confusion is. So please message me if\nyou're still not getting it.",
    "start": "2666080",
    "end": "2671360"
  },
  {
    "start": "2671360",
    "end": "2679550"
  },
  {
    "text": "OK, somebody saying why are we\nusing one tape Turing machines instead of random access? Wouldn't it be better to use\nthe random access machines?",
    "start": "2679550",
    "end": "2687860"
  },
  {
    "text": "If you were using-- if you're\ntrying to do algorithms, yes. That's a more reasonable model.",
    "start": "2687860",
    "end": "2694280"
  },
  {
    "text": "We're trying to prove things\nabout the computation. And from that\nstandpoint, we want to use as simple a\nmodel as possible.",
    "start": "2694280",
    "end": "2701060"
  },
  {
    "text": "Trying to prove things using\nrandom access computers is possible.",
    "start": "2701060",
    "end": "2706550"
  },
  {
    "text": "It'd be very messy. So that's why we don't\nuse random access machines to prove the kinds\nof things we're",
    "start": "2706550",
    "end": "2712460"
  },
  {
    "text": "going to be proving about\ncomputation that are really the meat and potatoes\nof this course.",
    "start": "2712460",
    "end": "2719280"
  },
  {
    "text": "So I mean, there's\ncompelling reasons why you would want to use a\nsimple model like a Turing",
    "start": "2719280",
    "end": "2725450"
  },
  {
    "text": "machine, but not a powerful\nmodel like a random access computer.",
    "start": "2725450",
    "end": "2731660"
  },
  {
    "text": "So somebody's asking me,\ndoes the class time order n",
    "start": "2731660",
    "end": "2738280"
  },
  {
    "text": "log log n have any elements? Yes, it has all the regular\nlanguages, but nothing else. Order n log log is it's\nonly the regular languages.",
    "start": "2738280",
    "end": "2746620"
  },
  {
    "text": "You have to go all the way\nup to n log n before you get something non-regular. ",
    "start": "2746620",
    "end": "2753407"
  },
  {
    "text": "Someone's asking me are\nwe going to talk about how the random access model works? No. ",
    "start": "2753407",
    "end": "2760750"
  },
  {
    "text": "That's beyond the\nscope of this course, outside of what we're\ngoing to be doing.",
    "start": "2760750",
    "end": "2767730"
  },
  {
    "text": "We're going to talk\nabout Turing machines. Not because we care so\nmuch about Turing machines.",
    "start": "2767730",
    "end": "2773670"
  },
  {
    "text": "But I'm trying to prove\nthings about computation. And the Turing machines\nare a convenient vehicle for doing that. ",
    "start": "2773670",
    "end": "2781460"
  },
  {
    "text": "Our candle has burned out. Why don't we return,\nthen, to the next slide.",
    "start": "2781460",
    "end": "2789119"
  },
  {
    "text": "So everybody come back. So this answers one of the\nquestions I got on the chat. What actually is the dependency\nbetween multi-tape Turing",
    "start": "2789120",
    "end": "2797337"
  },
  {
    "text": "machines and one\ntape Turing machines? Can we bound that in general? Yes, we can.",
    "start": "2797337",
    "end": "2803420"
  },
  {
    "text": "We're going to show that\nconverting a multi-tape Turing machine to a one tape\nTuring machine can, at most,",
    "start": "2803420",
    "end": "2809240"
  },
  {
    "text": "blow up the amount of time\nthat's necessary by squaring.",
    "start": "2809240",
    "end": "2814790"
  },
  {
    "text": "No, I acknowledge it's a lot. But it still allows you--",
    "start": "2814790",
    "end": "2820069"
  },
  {
    "text": "but it's still small compared\nwith an exponential increase. And we're going to be\nfocusing, in this course,",
    "start": "2820070",
    "end": "2825710"
  },
  {
    "text": "on things like the\ndifference between polynomial and exponential, not\nbetween the different-- not between the difference of--",
    "start": "2825710",
    "end": "2835040"
  },
  {
    "text": "not the difference between\nn squared and n cubed. That's going to be\nless of a factor, less of an issue for us. ",
    "start": "2835040",
    "end": "2846030"
  },
  {
    "text": "So the way I'm\nshowing this theorem is that if you have a\nmulti-tape Turing machine that",
    "start": "2846030",
    "end": "2854010"
  },
  {
    "text": "can do a language in a\ncertain amount of time, then it's in the time complexity\nclass of that time bound",
    "start": "2854010",
    "end": "2860130"
  },
  {
    "text": "squared. And the way I'm\njust saying that is because this is the bound that's\nutilizing the one tape model.",
    "start": "2860130",
    "end": "2869590"
  },
  {
    "text": "So another way of saying\nthat is converting multi-tape to one tape\nsquares the amount of time you",
    "start": "2869590",
    "end": "2878490"
  },
  {
    "text": "need at most. So the way we're going\nto prove that is simply",
    "start": "2878490",
    "end": "2886170"
  },
  {
    "text": "by going back and remembering\nthe conversion that we already presented from\nmulti-tape to one tape.",
    "start": "2886170",
    "end": "2892859"
  },
  {
    "text": "And observe that if we\nanalyze that conversion, it just ends up squaring\nthe amount of time",
    "start": "2892860",
    "end": "2899670"
  },
  {
    "text": "that the multi-tape used.  So why is that?",
    "start": "2899670",
    "end": "2907400"
  },
  {
    "text": "So if you remember,\nlet's just make sure we're all together on this,\nthe way the single tape machine",
    "start": "2907400",
    "end": "2914060"
  },
  {
    "text": "S simulates the multi\ntape Turing machine M is that it takes the\ncontents of each of M's tapes,",
    "start": "2914060",
    "end": "2923412"
  },
  {
    "text": "up to the place where there's\ninfinitely many blanks. Obviously you don't\nstore the infinite part. But the active\nportion of each of M's",
    "start": "2923412",
    "end": "2931819"
  },
  {
    "text": "tapes, you're going to\nstore them consecutively in separate blocks on S's\ntape, on S's only tape.",
    "start": "2931820",
    "end": "2939620"
  },
  {
    "text": "And now every time\nM makes one move, S has to scan its\nentire tape to see",
    "start": "2939620",
    "end": "2951080"
  },
  {
    "text": "what's under each of the heads\nand to do all the updating. So to simulate one step\nof M's computation,",
    "start": "2951080",
    "end": "2958290"
  },
  {
    "text": "S is going to use order of\nt of n steps, where t of n is the total running time\nthat M is going to use.",
    "start": "2958290",
    "end": "2966070"
  },
  {
    "text": "So why is t of m\nsteps coming up here? Well, that's because you\nhave to measure how--",
    "start": "2966070",
    "end": "2971670"
  },
  {
    "text": "S is going to make a\nscan across its tape. How big can its tape be?",
    "start": "2971670",
    "end": "2979480"
  },
  {
    "text": "Well M, if it's trying to\nuse as much tape as possible, can use, at most, t\nof n tape on each of--",
    "start": "2979480",
    "end": "2990940"
  },
  {
    "text": "t of n cells on\neach of its tapes. So altogether,\nthey're just going to be some constant number of\ntimes t of n cells on S's tape.",
    "start": "2990940",
    "end": "3002710"
  },
  {
    "text": "Do you see that? So each one of these is going\nto be, at most, t of n long. So this all together is going\nto be order t of n long.",
    "start": "3002710",
    "end": "3009670"
  },
  {
    "text": "Because what can M do? It could send its head out,\nsay the head on this tape",
    "start": "3009670",
    "end": "3014920"
  },
  {
    "text": "here, moving as fast as\npossible to the right, using as much tape as it can. But you can only use t of\nn cells in t of n time.",
    "start": "3014920",
    "end": "3022990"
  },
  {
    "text": "So this is going\nto be order t of n. So one step of\ncomputation is going to be t of n steps\non S's computation.",
    "start": "3022990",
    "end": "3030760"
  },
  {
    "text": "But M itself has t of n steps. So it's going to be\nt of n times t of n",
    "start": "3030760",
    "end": "3036549"
  },
  {
    "text": "for the total number\nof steps that S is going to end up using. And that's where the\nsquaring comes from.",
    "start": "3036550",
    "end": "3042640"
  },
  {
    "start": "3042640",
    "end": "3048539"
  },
  {
    "text": "Similar results, I'm not going\nto do lots of simulations of one model by another. I think that you'll\nget the idea.",
    "start": "3048540",
    "end": "3055200"
  },
  {
    "text": "And you can, if\nyou're interested, you can study those on your own. But you can convert\nmultidimensional Turing",
    "start": "3055200",
    "end": "3062369"
  },
  {
    "text": "machines to one tape\nTuring machines, one tape ordinary linear--",
    "start": "3062370",
    "end": "3069630"
  },
  {
    "text": "one tape, one\ndimensional machines. And the bottom line\nis that among all",
    "start": "3069630",
    "end": "3078330"
  },
  {
    "start": "3075000",
    "end": "3175000"
  },
  {
    "text": "of the reasonable\nmodels, they're all what are called\npolynomially related if each",
    "start": "3078330",
    "end": "3085579"
  },
  {
    "text": "can simulate the other with,\nat most, a polynomial overhead. So if one of the machines\ncan use this t of n time,",
    "start": "3085580",
    "end": "3092330"
  },
  {
    "text": "the other machine\nthat's simulating it would use t to the k\nof n time for some k. ",
    "start": "3092330",
    "end": "3100292"
  },
  {
    "text": "That's what it means\nfor the two machines to be polynomially related. And all reasonable\ndeterministic models",
    "start": "3100292",
    "end": "3107480"
  },
  {
    "text": "are polynomially related. So as we've already seen, one\ntape and multi-tape Turing",
    "start": "3107480",
    "end": "3112513"
  },
  {
    "text": "machines are\npolynomially related, because converting multi-tape\nto one tape blows you up by, at most, squaring.",
    "start": "3112513",
    "end": "3118510"
  },
  {
    "text": "So k equals 2 in this case. Multidimensional\nTuring machines, again, polynomially related,\nthe random access machine,",
    "start": "3118510",
    "end": "3127025"
  },
  {
    "text": "which I'm not going to\ndefine, but it's the machine that you might\nimagine-- you would, I'm sure they must define in\nsome form in the algorithms",
    "start": "3127025",
    "end": "3135030"
  },
  {
    "text": "classes, polynomially related. Cellular automata, which are\njust arrays of finite automata",
    "start": "3135030",
    "end": "3141930"
  },
  {
    "text": "that can communicate with\neach other, similarly.",
    "start": "3141930",
    "end": "3147589"
  },
  {
    "text": "All the reasonable\ndeterministic models, again, classical\nmodels, I'm not talking",
    "start": "3147590",
    "end": "3154349"
  },
  {
    "text": "about quantum computing,\nare polynomially related. So we are-- that kind\nof justifies our choice",
    "start": "3154350",
    "end": "3164730"
  },
  {
    "text": "in picking one of\nthem, as long as we're going to ask\nquestions which don't depend upon the polynomial.",
    "start": "3164730",
    "end": "3170805"
  },
  {
    "start": "3170805",
    "end": "3177220"
  },
  {
    "start": "3175000",
    "end": "3599000"
  },
  {
    "text": "Let's then talk about the\nclass P. So the class P,",
    "start": "3177220",
    "end": "3183619"
  },
  {
    "text": "this is an important\ndefinition for us. This is the collection\nof all languages",
    "start": "3183620",
    "end": "3193009"
  },
  {
    "text": "that you can do in time n to\nthe k for some k on a one tape",
    "start": "3193010",
    "end": "3198740"
  },
  {
    "text": "Turing machine. Or as I've written\nit over here, I don't know if this notation\nis unfamiliar to you,",
    "start": "3198740",
    "end": "3204890"
  },
  {
    "text": "but this is like just a big sum. But here, it's a\nbig union symbol.",
    "start": "3204890",
    "end": "3209900"
  },
  {
    "text": "It's union over all values of\nk of the time class n to the k.",
    "start": "3209900",
    "end": "3215700"
  },
  {
    "text": "So this is time n, union time\nn squared, union time n cubed,",
    "start": "3215700",
    "end": "3220920"
  },
  {
    "text": "union time n to\nthe 4th, and so on. We call these the polynomial\ntime decidable languages.",
    "start": "3220920",
    "end": "3228600"
  },
  {
    "text": " So we're going to be spending\na certain amount of effort",
    "start": "3228600",
    "end": "3238960"
  },
  {
    "text": "exploring this class P\nand other similar classes.",
    "start": "3238960",
    "end": "3244980"
  },
  {
    "text": "Somebody's asking me\nwhy is it a union. I'm not sure how else\nyou would write it. So if somebody-- if you have\na proposal for a different way",
    "start": "3244980",
    "end": "3251310"
  },
  {
    "text": "to write it, that's fine. But this is k,\nthis is for all k.",
    "start": "3251310",
    "end": "3256500"
  },
  {
    "text": "I don't know-- if you only had\na limited finite number of k's, you could just take\nthe biggest one. But since it's for all k, you\nneed to write it as a union.",
    "start": "3256500",
    "end": "3266040"
  },
  {
    "text": "Now, I want to argue that the\nclass P is an important class. ",
    "start": "3266040",
    "end": "3273810"
  },
  {
    "text": "And why has it had so\nmuch impact on the subject",
    "start": "3273810",
    "end": "3280860"
  },
  {
    "text": "and in terms of\napplications as well? So one thing is\nthat the class P is",
    "start": "3280860",
    "end": "3287190"
  },
  {
    "text": "invariant for all reasonable\ndeterministic models. What do I mean by that?",
    "start": "3287190",
    "end": "3292730"
  },
  {
    "text": "So we have defined the class P\nin terms of these time classes",
    "start": "3292730",
    "end": "3298540"
  },
  {
    "text": "here, which, in\nturn, are defined in terms of the one tape model. So we have defined P by using\none tape Turing machines.",
    "start": "3298540",
    "end": "3308329"
  },
  {
    "text": "Now if we had defined P in terms\nof multi-tape Turing machines,",
    "start": "3308330",
    "end": "3313700"
  },
  {
    "text": "we get exactly the same\nclass, because one tape and multi-tape Turing machines\nare polynomially related",
    "start": "3313700",
    "end": "3320960"
  },
  {
    "text": "to one another. And since we're taking the\nunion over all polynomials, that polynomial difference\nis going to wash out.",
    "start": "3320960",
    "end": "3330849"
  },
  {
    "text": "Similarly, we could\ndefine P using any of the other reasonable\ndeterministic models.",
    "start": "3330850",
    "end": "3336880"
  },
  {
    "text": "And we get exactly\nthe same class. So in a sense, we\nget back what we--",
    "start": "3336880",
    "end": "3343140"
  },
  {
    "text": "the situation that we had\nin computability theory, when the class of\ndecidable languages",
    "start": "3343140",
    "end": "3350589"
  },
  {
    "text": "didn't depend on\nthe choice of model. Here, the class\nP does not matter",
    "start": "3350590",
    "end": "3356290"
  },
  {
    "text": "depending upon the choice of\nreasonable deterministic model.",
    "start": "3356290",
    "end": "3361430"
  },
  {
    "text": "And we also kind of, even in the\ncase of computability theory, we have to stick with kind of\nreasonable models that cannot",
    "start": "3361430",
    "end": "3367700"
  },
  {
    "text": "do an infinite amount\nof work in one step. ",
    "start": "3367700",
    "end": "3373548"
  },
  {
    "text": "I'm not going to define what\nit means to be reasonable. That's, in a sense,\nan informal notion. But among all of those\nreasonable models,",
    "start": "3373548",
    "end": "3380570"
  },
  {
    "text": "you're going to get\nthe same class P. The other thing that\nmakes P important",
    "start": "3380570",
    "end": "3385700"
  },
  {
    "text": "is that P roughly\ncorresponds to the problems",
    "start": "3385700",
    "end": "3392109"
  },
  {
    "text": "that you can solve in some\nreasonable practical sense. Now, not exactly, problems\nthat require n to the hundredth",
    "start": "3392110",
    "end": "3399280"
  },
  {
    "text": "time, you could argue cannot be\nsolved in any reasonable sense.",
    "start": "3399280",
    "end": "3407005"
  },
  {
    "text": "But if you think\nabout it, for example, from the perspective\nof cryptography,",
    "start": "3407005",
    "end": "3415270"
  },
  {
    "text": "cryptographic codes\nthat people come up with are typically\ndesigned to require,",
    "start": "3415270",
    "end": "3420620"
  },
  {
    "text": "or the hope is that they would\nrequire an exponential amount of effort to crack. If someone found even an n\nto the hundredth algorithm",
    "start": "3420620",
    "end": "3427930"
  },
  {
    "text": "to crack, that\nwould crack a code, people would feel that\nthe code is not secure,",
    "start": "3427930",
    "end": "3433210"
  },
  {
    "text": "even though n to the\nhundredth is still large. So it's a rough kind of test.",
    "start": "3433210",
    "end": "3439720"
  },
  {
    "text": "But it's still used as\na kind of litmus test for practical solvability\nif you can solve it",
    "start": "3439720",
    "end": "3445119"
  },
  {
    "text": "in polynomial time. You basically figured out\nhow to avoid large searches",
    "start": "3445120",
    "end": "3453190"
  },
  {
    "text": "if you can solve problems\nin polynomial time. We'll say more about that later.",
    "start": "3453190",
    "end": "3459620"
  },
  {
    "text": "But what I want\nto bring out here is that we have combined,\nhere in the class P, something",
    "start": "3459620",
    "end": "3467470"
  },
  {
    "text": "that's mathematically\nnice, mathematically elegant with something\nthat's practically relevant.",
    "start": "3467470",
    "end": "3473770"
  },
  {
    "text": "And when you have a\ncombination of the two, then you know you have a winner. Then you know how you\nhave a concept that's",
    "start": "3473770",
    "end": "3479675"
  },
  {
    "text": "going to make a difference. And that's been true\nfor the class P. This has been very influential\nwithin and without the theory",
    "start": "3479675",
    "end": "3487930"
  },
  {
    "text": "of computation. So let's look at an example. ",
    "start": "3487930",
    "end": "3496130"
  },
  {
    "text": "Let's define a new language\nwe haven't seen before, though it's similar\nto procedures that we've looked at before.",
    "start": "3496130",
    "end": "3502730"
  },
  {
    "text": "The PATH language,\nwhich is where I'm going to give you a graph\nG, two nodes in the graph,",
    "start": "3502730",
    "end": "3509820"
  },
  {
    "text": "s and t, where I'm thinking\nof G as a directed graph.",
    "start": "3509820",
    "end": "3515350"
  },
  {
    "text": "So directed means that the\nconnections between the nodes in G are going to be directed.",
    "start": "3515350",
    "end": "3522080"
  },
  {
    "text": "And that they have\narrows on them. They're not just\nlines, but they have an orientation with an arrow.",
    "start": "3522080",
    "end": "3528790"
  },
  {
    "text": "So G is a directed graph\nthat has a path from s to t that respects the directions.",
    "start": "3528790",
    "end": "3535580"
  },
  {
    "text": "So such a-- I think I might\neven have a picture here, yeah. So imagine here,\nhere is your graph.",
    "start": "3535580",
    "end": "3541020"
  },
  {
    "text": "If you can see it,\nthere are little arrows connecting the nodes. And I want to know is\nthere a path from the node",
    "start": "3541020",
    "end": "3547900"
  },
  {
    "text": "s to the node t. So that is a picture of\na problem, an instance",
    "start": "3547900",
    "end": "3554560"
  },
  {
    "text": "of a graph of a PATH problem.  And I want to find an\nalgorithm for that.",
    "start": "3554560",
    "end": "3562650"
  },
  {
    "text": "And I can show that there\nis an algorithm that operates in polynomial\ntime for this PATH problem.",
    "start": "3562650",
    "end": "3570720"
  },
  {
    "text": "And the algorithm, any of the\nstandard searching algorithms",
    "start": "3570720",
    "end": "3578430"
  },
  {
    "text": "would work here. But let's just, for\ncompleteness sake, include the breadth-first\nsearch algorithm",
    "start": "3578430",
    "end": "3585869"
  },
  {
    "text": "that we have explored\npreviously when we talk about finite automata. So we'll mark s.",
    "start": "3585870",
    "end": "3591570"
  },
  {
    "text": "And they'll keep repeating\nuntil nothing new is marked. And we'll mark all\nof the nodes that",
    "start": "3591570",
    "end": "3596820"
  },
  {
    "text": "were reachable by a single arrow\nfrom a previously marked node.",
    "start": "3596820",
    "end": "3604590"
  },
  {
    "text": "And then CFT is marked, After\nyou have marked everything",
    "start": "3604590",
    "end": "3609840"
  },
  {
    "text": "you can get to. So you're going to mark-- let's see, pictorially, here\nI think I have this indicated. Yeah you're going to mark\nall of the things that",
    "start": "3609840",
    "end": "3616740"
  },
  {
    "text": "are reachable from the start-- from the node s. And then see, after you\ncan't mark anything new,",
    "start": "3616740",
    "end": "3624500"
  },
  {
    "text": "whether the node G is marked. And if it is, you'll accept. If it is not, you reject.",
    "start": "3624500",
    "end": "3629570"
  },
  {
    "text": " Now, we can analyze this, too.",
    "start": "3629570",
    "end": "3634643"
  },
  {
    "text": "And I'm not going to be\nspending a lot of time analyzing algorithms here. But let's just do it\nkind of this one time.",
    "start": "3634643",
    "end": "3642550"
  },
  {
    "text": " We're doing a bunch\nof iterations here.",
    "start": "3642550",
    "end": "3650420"
  },
  {
    "text": "So we're going to be repeating\nuntil nothing new is marked. So each time we\nmark something new,",
    "start": "3650420",
    "end": "3655570"
  },
  {
    "text": "we can only do that,\nat most, n times. At which point, we've\nmarked everything.",
    "start": "3655570",
    "end": "3661030"
  },
  {
    "text": "So the number of iterations\nhere is going to be, at most, n. And now for each time\nwe mark something,",
    "start": "3661030",
    "end": "3667210"
  },
  {
    "text": "we have to look at all of\nthe previously marked nodes",
    "start": "3667210",
    "end": "3673180"
  },
  {
    "text": "and see which things they\npoint at to mark them too. So this is going to be an\ninner loop, which again,",
    "start": "3673180",
    "end": "3678820"
  },
  {
    "text": "has, at most, n iterations,\nbecause it's going through all of the previously marked nodes.",
    "start": "3678820",
    "end": "3683860"
  },
  {
    "text": "And then once we have that,\nwe can scan G to see--",
    "start": "3683860",
    "end": "3691100"
  },
  {
    "text": "to mark all of the new--",
    "start": "3691100",
    "end": "3696777"
  },
  {
    "text": "all of the nodes\nwhich we have not yet marked, whether they're\nconnected with a previously marked node by an edge.",
    "start": "3696777",
    "end": "3703040"
  },
  {
    "text": "And I'm being generous here,\nbecause I don't really care. This can be done in, at most,\nn squared steps on a one tape",
    "start": "3703040",
    "end": "3710060"
  },
  {
    "text": "Turing machine. I'm not going to describe\nthe implementation. But I'll leave it to\nyou as an exercise. But this is straightforward.",
    "start": "3710060",
    "end": "3718080"
  },
  {
    "text": "So the total number\nof steps here would be n iterations times\nn iterations times n squared.",
    "start": "3718080",
    "end": "3723839"
  },
  {
    "text": "So you're going to be, at most,\nn to the 4th steps needed. So this is a\npolynomial algorithm. And whether I ended\nup with to the 4th,",
    "start": "3723840",
    "end": "3730010"
  },
  {
    "text": "or n to the 5th, or n\ncubed, I don't really care. Because I'm just trying\nto illustrate that",
    "start": "3730010",
    "end": "3735740"
  },
  {
    "text": "the total is polynomial. And that's all I'm going to\nbe typically asking you to do.",
    "start": "3735740",
    "end": "3742160"
  },
  {
    "text": "So to show polynomial time,\nwhat I'll be asking you to do is to show that each stage,\neach stage of this algorithm,",
    "start": "3742160",
    "end": "3749360"
  },
  {
    "text": "should be clearly polynomial. And that the total number\nof stages, I'm sorry, this should say stages\nhere, should be polynomial.",
    "start": "3749360",
    "end": "3757520"
  },
  {
    "text": "So each stage is polynomial. And after you're doing\nall the iterations, the total number of stages that\nare executed is polynomial.",
    "start": "3757520",
    "end": "3765500"
  },
  {
    "text": "And so therefore, all together,\nthe total running time, the total number of steps,\nis going to be polynomial.",
    "start": "3765500",
    "end": "3773010"
  },
  {
    "text": "So that's the way we would\nwrite up polynomial algorithms",
    "start": "3773010",
    "end": "3780630"
  },
  {
    "text": "in this class.  So let's see if there's\nany questions here.",
    "start": "3780630",
    "end": "3786329"
  },
  {
    "text": "I don't want to get too\nfar ahead of people. ",
    "start": "3786330",
    "end": "3796350"
  },
  {
    "text": "Let's see. Yes, in this theorem, I'm\ntalking about one tape Turing",
    "start": "3796350",
    "end": "3801990"
  },
  {
    "text": "machines, because we're\ndefining everything in terms of one tape Turing machines. But now, at this\npoint, when we're",
    "start": "3801990",
    "end": "3808440"
  },
  {
    "text": "talking about polynomial\ntime, my analysis is based on one tape\nTuring machines.",
    "start": "3808440",
    "end": "3813870"
  },
  {
    "text": "But in general, you could use\nany reasonable deterministic model on which to carry\nout your analysis,",
    "start": "3813870",
    "end": "3819630"
  },
  {
    "text": "because they're all\npolynomially equivalent. So from the perspective\nof coming up with showing that a problem is\nin polynomial time, is in P,",
    "start": "3819630",
    "end": "3828690"
  },
  {
    "text": "you can use any of\nthe models that you wish that for convenient.",
    "start": "3828690",
    "end": "3835005"
  },
  {
    "text": "Oh, that's a good question. What is n, thank you for\nasking that question. n is always going to\nbe reserved to indicate",
    "start": "3835005",
    "end": "3844740"
  },
  {
    "text": "the length of the input. So here, n is going to be\nwhen we encode G, s, and t.",
    "start": "3844740",
    "end": "3853280"
  },
  {
    "text": "And here, also, I\nhaven't said this, but I'm assuming that the\nencoding that you're using",
    "start": "3853280",
    "end": "3858860"
  },
  {
    "text": "is also somehow reasonable. I think we'll talk\na little bit more about that in the\nnext lecture, which is",
    "start": "3858860",
    "end": "3865070"
  },
  {
    "text": "going to be after the midterm. But you can cause problems\nif you intentionally",
    "start": "3865070",
    "end": "3872140"
  },
  {
    "text": "tried to come up with\nnasty encodings, which will represent things with\nunnecessarily many characters.",
    "start": "3872140",
    "end": "3883330"
  },
  {
    "text": "But if you try to be\nreasonable, then just",
    "start": "3883330",
    "end": "3889870"
  },
  {
    "text": "use any one of those\nencodings, and you'll be fine. So yeah, so n is the length\nof the representation",
    "start": "3889870",
    "end": "3897970"
  },
  {
    "text": "of the input.  Let's see. ",
    "start": "3897970",
    "end": "3906290"
  },
  {
    "text": "Someone's trying to\ndig into the actual how this is running here.",
    "start": "3906290",
    "end": "3911650"
  },
  {
    "text": "Scan G to mark all y\nwhere xy is an edge. I'm saying that you can\ndo it in n squared steps.",
    "start": "3911650",
    "end": "3917380"
  },
  {
    "start": "3917380",
    "end": "3932410"
  },
  {
    "text": "If you have x, you can mark it\nin a certain place on the tape.",
    "start": "3932410",
    "end": "3937880"
  },
  {
    "text": "And then as you're going\nto every other node, every other edge,\nyou can go back",
    "start": "3937880",
    "end": "3943370"
  },
  {
    "text": "and compare x with the x\nof the edge and then see-- and then find the y.",
    "start": "3943370",
    "end": "3949960"
  },
  {
    "text": "I mean, it's just going to be\ntoo messy to talk about here. I mean, I'll leave it\nas an exercise to you.",
    "start": "3949960",
    "end": "3955460"
  },
  {
    "text": "I'm not going to try to fumble\nmy way through explaining why you can do this\nin n squared steps.",
    "start": "3955460",
    "end": "3960619"
  },
  {
    "text": "But it's not hard. ",
    "start": "3960620",
    "end": "3969730"
  },
  {
    "text": "You guys are all really\nhardcore algorithms folks. You want to know the\nalgorithms for this, I'm not going to do that, sorry.",
    "start": "3969730",
    "end": "3976530"
  },
  {
    "text": "High level picture here.  If you want-- if you want to\nlook at detailed analyses,",
    "start": "3976530",
    "end": "3986010"
  },
  {
    "text": "this is not the\nright course for you. Can k equal n?",
    "start": "3986010",
    "end": "3991290"
  },
  {
    "text": "What is k? ",
    "start": "3991290",
    "end": "4000540"
  },
  {
    "text": "No, if you're talking about\nthis k here, k cannot equal n. We're not looking at n to the n.",
    "start": "4000540",
    "end": "4006690"
  },
  {
    "text": "These are all fixed k, it's\nlike n squared, n cubed, but not n to the n is it going\nto be an exponential bound.",
    "start": "4006690",
    "end": "4014520"
  },
  {
    "text": "And so that's not going to be\nincluded within this union.",
    "start": "4014520",
    "end": "4020020"
  },
  {
    "text": "So we're near the\nend of the hour. I'm going to introduce one last\nlanguage here, called HAMPATH.",
    "start": "4020020",
    "end": "4028329"
  },
  {
    "text": "And the HAMPATH problem is-- ",
    "start": "4028330",
    "end": "4034850"
  },
  {
    "text": "I'm going to ask now,\nagain, for a path from s to t, but now a\ndifferent kind of path,",
    "start": "4034850",
    "end": "4039980"
  },
  {
    "text": "one that goes through every\nnode of G along the way. So I'm looking for\na path that goes,",
    "start": "4039980",
    "end": "4046250"
  },
  {
    "text": "that hits every node of\nG, not just the shortest, most direct path. But in a sense, the most\nindirect path, the longest path",
    "start": "4046250",
    "end": "4053539"
  },
  {
    "text": "that goes through from s to\nt that visits everything else along the way.",
    "start": "4053540",
    "end": "4059570"
  },
  {
    "text": "A path of that kind, that\nhits every node of the graph is called a Hamiltonian path.",
    "start": "4059570",
    "end": "4067220"
  },
  {
    "text": "Because the\nmathematician Hamilton studied those and made some\ndefinitions about that. I'm not going to--",
    "start": "4067220",
    "end": "4072763"
  },
  {
    "text": "I don't actually know\nthe history there. But I just know they're\ncalled Hamiltonian paths.",
    "start": "4072763",
    "end": "4078260"
  },
  {
    "text": "So here's a picture. I want to get from s to t. But I want to sort of pick up\neverything else along the way.",
    "start": "4078260",
    "end": "4084440"
  },
  {
    "text": " So as you remember,\nthe PATH problem itself",
    "start": "4084440",
    "end": "4090700"
  },
  {
    "text": "can be solved in P. And\nwhat I'd like to know, can this simple\nmodification, where",
    "start": "4090700",
    "end": "4097469"
  },
  {
    "text": "I'm asking you to visit\neverything else along the way, is that problem also in P? ",
    "start": "4097470",
    "end": "4104680"
  },
  {
    "text": "And I'm going to pose this\nas a check-in for you. But actually, before\nI get to that, let me give you an\nalgorithm for HAMPATH",
    "start": "4104680",
    "end": "4112500"
  },
  {
    "text": "that doesn't work to show it's\nin P, because it's exponential.",
    "start": "4112500",
    "end": "4117729"
  },
  {
    "text": "So here's an\nalgorithm for HAMPATH,",
    "start": "4117729",
    "end": "4126410"
  },
  {
    "text": "where let's m the\nnumber of nodes in G.",
    "start": "4126410",
    "end": "4132439"
  },
  {
    "text": "And what I'm going\nto do is I'm going to try every possible path\nin G and see if it's actually",
    "start": "4132439",
    "end": "4140689"
  },
  {
    "text": "works as a Hamiltonian\npath, and accept if it is. ",
    "start": "4140689",
    "end": "4147979"
  },
  {
    "text": "And then if all paths\nfail, then I'll reject. So I'm going to try every\npossible routing through G.",
    "start": "4147979",
    "end": "4155870"
  },
  {
    "text": "If you want to think\nabout it, think of m as every possible\npermutation of the nodes of G.",
    "start": "4155870",
    "end": "4161922"
  },
  {
    "text": "And then you're going to\nsee whether that's actually constitutes a path in G\nthat takes you from s to t",
    "start": "4161923",
    "end": "4168679"
  },
  {
    "text": "and goes through\nall of the nodes. ",
    "start": "4168680",
    "end": "4175170"
  },
  {
    "text": "So this algorithm would work. This would give you\na correct algorithm",
    "start": "4175170",
    "end": "4182689"
  },
  {
    "text": "for the HAMPATH problem. The problem is,\nthe difficulty is that there are so many\npossible paths that it's",
    "start": "4182689",
    "end": "4191299"
  },
  {
    "text": "going to take you an\nexponential number of steps to execute this algorithm. It's not a polynomial\ntime algorithm,",
    "start": "4191300",
    "end": "4197060"
  },
  {
    "text": "because there are\nmany possible paths that you could go through. If you're looking at it\nwith a very crude bound,",
    "start": "4197060",
    "end": "4203150"
  },
  {
    "text": "but you really can't\nimprove that significantly, there would be m\nfactorial, which is going to be much greater than\n2 to the m paths of length m.",
    "start": "4203150",
    "end": "4213740"
  },
  {
    "text": "So the algorithm is going\nto run for exponential time, and not polynomial time. So my question for\nyou is, I'm going",
    "start": "4213740",
    "end": "4219830"
  },
  {
    "text": "to pose it as a\ncheck-in problem, is whether you could\nactually do this problem in polynomial time.",
    "start": "4219830",
    "end": "4225900"
  },
  {
    "text": "So why don't you\nthink about that as I'm setting up the question? ",
    "start": "4225900",
    "end": "4231960"
  },
  {
    "text": "So take the HAMPATH problem,\njust like the PATH problem, which I described with\nthat marking algorithm,",
    "start": "4231960",
    "end": "4238980"
  },
  {
    "text": "but now you want to hit\nevery node along the way, can you show that\nproblem as solvable in P?",
    "start": "4238980",
    "end": "4245850"
  },
  {
    "text": "And there's a whole\nrange of possibilities here where either the\nanswer is yes, you",
    "start": "4245850",
    "end": "4250920"
  },
  {
    "text": "can see what the polynomial\ntime algorithm is to definitely",
    "start": "4250920",
    "end": "4258080"
  },
  {
    "text": "no, where you can prove there\nis no such polynomial time algorithm. And I'll put this is the\ncheck-in for you and see--",
    "start": "4258080",
    "end": "4266300"
  },
  {
    "text": "I'm curious to see\nwhat you come up with. Most people are\ngetting it wrong.",
    "start": "4266300",
    "end": "4271360"
  },
  {
    "text": "Well, wrong, I don't you know-- I'm not clear what\nwrong is here. ",
    "start": "4271360",
    "end": "4277610"
  },
  {
    "text": "OK, are we done? Please check something.",
    "start": "4277610",
    "end": "4284278"
  },
  {
    "text": "I see a few of you\nhave not answered. But the poll is running out.",
    "start": "4284278",
    "end": "4290119"
  },
  {
    "text": "OK, time is up. ",
    "start": "4290120",
    "end": "4297220"
  },
  {
    "text": "So in fact, as I think many of\nyou know, but not all of you,",
    "start": "4297220",
    "end": "4305650"
  },
  {
    "text": "this is an unsolved problem. This is a very famous\nunsolved problem, which is equivalent to\nthe P versus NP problem",
    "start": "4305650",
    "end": "4311679"
  },
  {
    "text": "that we're going to be\ntalking about very soon, which, among other things,\nwould be worth a million dollars",
    "start": "4311680",
    "end": "4316720"
  },
  {
    "text": "if you solve it. So for those of you who\nhave answered a or e, please talk to me after lecture.",
    "start": "4316720",
    "end": "4322768"
  },
  {
    "text": "And maybe we can\nwork on it together.  No, so yeah, I think\nmost people would",
    "start": "4322768",
    "end": "4332150"
  },
  {
    "text": "believe that the answer is no. But no one knows how to\nprove it at this time.",
    "start": "4332150",
    "end": "4338250"
  },
  {
    "text": "So I'm interested\nin the folks who have come up with what\nthey think are solutions.",
    "start": "4338250",
    "end": "4345710"
  },
  {
    "text": "And I should say that\nthere are some folks who believe that there might be\nother outcomes besides just",
    "start": "4345710",
    "end": "4353000"
  },
  {
    "text": "a simple no. Which might be\nproven eventually.",
    "start": "4353000",
    "end": "4359300"
  },
  {
    "text": "So we're going to\ntalk more about this. But this is the answer to\nthe question, just for your--",
    "start": "4359300",
    "end": "4364460"
  },
  {
    "text": "just to make sure you\nunderstand is that it's an unsolved problem right now. So we don't know.",
    "start": "4364460",
    "end": "4370490"
  },
  {
    "text": "Definitely yes\nand definitely no, at least according to the\nstate of knowledge of which I'm",
    "start": "4370490",
    "end": "4375710"
  },
  {
    "text": "aware, are not correct answers. But any of the others,\nwell, who knows?",
    "start": "4375710",
    "end": "4384390"
  },
  {
    "text": "So I think that's the end of\nwhat I had to say for today. We covered complexity\ntheory as an introduction,",
    "start": "4384390",
    "end": "4392060"
  },
  {
    "text": "looked at different\npossible models, focused on the one\ntape model, introduced,",
    "start": "4392060",
    "end": "4397760"
  },
  {
    "text": "based on the one tape\nmodel, these complexity classes, the class P. And we\nshowed an example of this PATH",
    "start": "4397760",
    "end": "4405650"
  },
  {
    "text": "problem being in P. Talked also\nabout this HAMPATH problem, which we'll talk about\nmore after the midterm.",
    "start": "4405650",
    "end": "4413420"
  },
  {
    "text": "OK, so I'll stick\naround for a few minutes if you have any\nfurther questions. Otherwise, so let me\njust take questions here.",
    "start": "4413420",
    "end": "4422525"
  },
  {
    "start": "4422525",
    "end": "4427562"
  },
  {
    "text": "Somebody is asking me\nabout my personal opinion on P versus NP. My personal opinion on P versus\nNP is that P is not equal to NP",
    "start": "4427562",
    "end": "4436780"
  },
  {
    "text": "and that we will\nprove it someday. When I was a graduate\nstudent back in the mid '70s,",
    "start": "4436780",
    "end": "4443710"
  },
  {
    "text": "I thought it would\nbe solved by now. And in fact, I made a bet with\nLen Adleman, who I subsequently",
    "start": "4443710",
    "end": "4450490"
  },
  {
    "text": "ended up becoming the\nA of the RSA code, that we would solve\nit by the year 2000.",
    "start": "4450490",
    "end": "4455890"
  },
  {
    "text": "And I bet what was\nthen a lot of money for me, which was an ounce of\ngold, which I didn't end up--",
    "start": "4455890",
    "end": "4462340"
  },
  {
    "text": "which I did end up paying\noff to Len in the year 2000. So I'm not making any more bets.",
    "start": "4462340",
    "end": "4468489"
  },
  {
    "text": "But I still believe\nthat it will be solved. Hopefully I'll get a\nchance to see the solution.",
    "start": "4468490",
    "end": "4474587"
  },
  {
    "text": "I spend a lot of time\nthinking about it myself. ",
    "start": "4474587",
    "end": "4480489"
  },
  {
    "text": "Obviously, I haven't solved\nit, otherwise we would know. But hopefully somebody will.",
    "start": "4480490",
    "end": "4490013"
  },
  {
    "text": "I'm gettings asked\na question here that's kind of an\ninteresting question, but I don't really know\nI'm sure I understand it.",
    "start": "4490013",
    "end": "4497880"
  },
  {
    "text": "What's the largest possible\nruntime of a decidable problem?",
    "start": "4497880",
    "end": "4503110"
  },
  {
    "text": "What is the largest\ndecidable runtime? So anything that I\ncan describe can be--",
    "start": "4503110",
    "end": "4511409"
  },
  {
    "text": "there are going to be\nalgorithms that run for longer.",
    "start": "4511410",
    "end": "4518400"
  },
  {
    "text": " You can define an algorithm.",
    "start": "4518400",
    "end": "4529810"
  },
  {
    "text": "You can define a runtime,\nwhich would, in a sense, beats all other runtimes.",
    "start": "4529810",
    "end": "4534910"
  },
  {
    "text": " So that any runtime is\ngoing to be dominated",
    "start": "4534910",
    "end": "4541630"
  },
  {
    "text": "by that extremely slow runtime. But it's not something\nthat one can describe.",
    "start": "4541630",
    "end": "4546910"
  },
  {
    "text": "I can describe it to you\nby mathematical procedure. But it's not going to\nbe something like 2",
    "start": "4546910",
    "end": "4553880"
  },
  {
    "text": "to the 2 to the n. Somebody's here proposing a\nsolution to the HAMPATH problem",
    "start": "4553880",
    "end": "4561670"
  },
  {
    "text": "by presuming polynomial time. Why is the following flawed? If s goes through all\nnodes and ends up at t,",
    "start": "4561670",
    "end": "4568600"
  },
  {
    "text": "Well, s we're not-- you mean, I presume\nyou mean starting at s, if we end up going through\nall nodes and end at t,",
    "start": "4568600",
    "end": "4576730"
  },
  {
    "text": "the proposal is a\nlittle complicated here. Basically, if I can\ntry to rephrase it,",
    "start": "4576730",
    "end": "4585070"
  },
  {
    "text": "you want to try to-- from every possible\nnode, you want to try to calculate a path\nto t and also a path from s",
    "start": "4585070",
    "end": "4592540"
  },
  {
    "text": "to that node. And you can do that\nfor all possible nodes. But there's no way to\nreally combine them",
    "start": "4592540",
    "end": "4598870"
  },
  {
    "text": "into a single path\nthat visits all. Solving for each node\nseparately is not",
    "start": "4598870",
    "end": "4603909"
  },
  {
    "text": "going to do the trick, because\nyou have to somehow combine all that information into a\nsingle path, just one path that",
    "start": "4603910",
    "end": "4612170"
  },
  {
    "text": "goes from s to t and visits all\nthe other nodes along the way. And that that is not--",
    "start": "4612170",
    "end": "4617750"
  },
  {
    "text": "I don't see what\nyour proposal, how that's going to actually work.",
    "start": "4617750",
    "end": "4623330"
  },
  {
    "text": "AUDIENCE: Professor Sipser. A question on the--",
    "start": "4623330",
    "end": "4629510"
  },
  {
    "text": "we were kind of talking\nabout earlier, what we talked about today was\ndefined for the one tape Turing",
    "start": "4629510",
    "end": "4635570"
  },
  {
    "text": "machines, correct? MICHAEL SIPSER: Yep AUDIENCE: So and you said we\ncould apply for the multi-tape",
    "start": "4635570",
    "end": "4642770"
  },
  {
    "text": "ones, but are-- ",
    "start": "4642770",
    "end": "4648050"
  },
  {
    "text": "I don't know if we talked\nabout earlier, if something is accepted by the\none tape machine, can it be applied to the\nmulti-tape Turing machine",
    "start": "4648050",
    "end": "4654650"
  },
  {
    "text": "and vice versa? Are they interchangeable\nlike that? MICHAEL SIPSER: Well\nthey're interchangeable only",
    "start": "4654650",
    "end": "4659780"
  },
  {
    "text": "in the sense that the amount of\ntime that you would need-- it's a different machine.",
    "start": "4659780",
    "end": "4665040"
  },
  {
    "text": "If you have a multi-tape Turing\nmachine for some language, you can convert it to a\none tape Turing machine",
    "start": "4665040",
    "end": "4670590"
  },
  {
    "text": "using the procedure that we\ndescribed earlier in the term. And you'll get a\ndifferent machine.",
    "start": "4670590",
    "end": "4676980"
  },
  {
    "text": "It's going to run for a\ndifferent amount of time by using that procedure. The point is that the amount of\ntime that the one tape Turing",
    "start": "4676980",
    "end": "4683370"
  },
  {
    "text": "machine is going\nto run for is not that much worse than the\nmulti-tape Turing machine's",
    "start": "4683370",
    "end": "4689010"
  },
  {
    "text": "time. So if the multi-tape Turing\nmachine's time was n cubed,",
    "start": "4689010",
    "end": "4697710"
  },
  {
    "text": "the one tape Turing machine's is\ngoing to be the square of that. So it's going to\nbe n to the 6th.",
    "start": "4697710",
    "end": "4703290"
  },
  {
    "text": "But it's not going to be-- going from multi-tape\nto one tape is not going to convert you\nfrom polynomial to exponential.",
    "start": "4703290",
    "end": "4710410"
  },
  {
    "text": "That's the only point\nI'm trying to make. It's going to convert\nfrom one polynomial to a somewhat bigger polynomial.",
    "start": "4710410",
    "end": "4716380"
  },
  {
    "text": "But it's still going to\nleave you polynomial. I don't-- you don't seem-- I can't see your face.",
    "start": "4716380",
    "end": "4722699"
  },
  {
    "text": "AUDIENCE: No, I guess my opinion\nis just, especially when we were talking about earlier,\nwhen you were bringing it up,",
    "start": "4722700",
    "end": "4729680"
  },
  {
    "text": "it just seemed like you\ncould just turn anything to a multi tape Turing machine\nand completely cut the time",
    "start": "4729680",
    "end": "4735800"
  },
  {
    "text": "out. If I had like\nsomething in n log n, if I did it in the\nmulti-tape Turing machine,",
    "start": "4735800",
    "end": "4741260"
  },
  {
    "text": "I have it in big O of\nn, you know what I mean?",
    "start": "4741260",
    "end": "4746699"
  },
  {
    "text": "It just seemed like the\nmulti-tape was so much more powerful. But then I guess not, with the\nexplanations and the models",
    "start": "4746700",
    "end": "4757239"
  },
  {
    "text": "we were talking about today. MICHAEL SIPSER:\nYeah, I would not say-- the multi-tape Turing\nmachines are still pretty",
    "start": "4757240",
    "end": "4762570"
  },
  {
    "text": "limited in their capabilities. And don't forget, when you have\na multi-tape Turing machine,",
    "start": "4762570",
    "end": "4769080"
  },
  {
    "text": "you have only a fixed\nnumber of tapes. I mean, you can also define\nvariations of multi-tape Turing machines that have an increasing\nnumber of tapes as the input,",
    "start": "4769080",
    "end": "4781219"
  },
  {
    "text": "either under program control,\nit can launch new tapes. Or it could just have\nmore tapes depending",
    "start": "4781220",
    "end": "4789420"
  },
  {
    "text": "upon the size of the input, that\nwould also be a possibility. That's not the model\nthat we have defined.",
    "start": "4789420",
    "end": "4795239"
  },
  {
    "text": "But you could define\na model like that. But as long as the\ntotal amount of work",
    "start": "4795240",
    "end": "4800340"
  },
  {
    "text": "being done by the\nmachine at any step s going to be a\npolynomial amount of work,",
    "start": "4800340",
    "end": "4807270"
  },
  {
    "text": "then you can convert it to\na one tape Turing machine with only a polynomial\nincrease in the bound.",
    "start": "4807270",
    "end": "4814739"
  },
  {
    "text": "You want to be\ncareful of machines-- one thing I meant to say\nbut didn't say, so here",
    "start": "4814740",
    "end": "4820530"
  },
  {
    "text": "would be an unreasonable\nmodel, which you might think of as a plausible model.",
    "start": "4820530",
    "end": "4827048"
  },
  {
    "text": "But it's not going to\nbe a reasonable model from our standpoint. And that would be a\nmodel, for example,",
    "start": "4827048",
    "end": "4832590"
  },
  {
    "text": "that can do full precision,\nsay, integer arithmetic",
    "start": "4832590",
    "end": "4841369"
  },
  {
    "text": "with a unit cost per operation. So each operation\ncounts as costs 1.",
    "start": "4841370",
    "end": "4848570"
  },
  {
    "text": "But I'm going to\nallow you to do, for example, addition\nand multiplication.",
    "start": "4848570",
    "end": "4855360"
  },
  {
    "text": "The thing that's bad about that,\nin terms of being unreasonable,",
    "start": "4855360",
    "end": "4863080"
  },
  {
    "text": "is that after k step,\neach time you do a step,",
    "start": "4863080",
    "end": "4869530"
  },
  {
    "text": "you could double the size of\nthe integer by squaring it.",
    "start": "4869530",
    "end": "4874570"
  },
  {
    "text": "After k steps, you can have an\ninteger, which is 2 to the k long.",
    "start": "4874570",
    "end": "4879850"
  },
  {
    "text": "And now, doing\noperations there is going to involve an\nexponential amount of work,",
    "start": "4879850",
    "end": "4885250"
  },
  {
    "text": "even in any reasonable sense. In a theoretical sense, and\nalso in a practical sense.",
    "start": "4885250",
    "end": "4890755"
  },
  {
    "text": " A model that operates\nlike that is not going to be able to convert\nto a one tape Turing machine",
    "start": "4890755",
    "end": "4899290"
  },
  {
    "text": "with only a polynomial\nincrease, because it's doing an exponential\namount of work potentially within a\npolynomial number of steps.",
    "start": "4899290",
    "end": "4909710"
  },
  {
    "text": "So that's within a linear\nnumber of steps, within n steps. So that's an example of an\nunreasonable deterministic",
    "start": "4909710",
    "end": "4921510"
  },
  {
    "text": "model. AUDIENCE: Yeah, thank you. MICHAEL SIPSER: Sure. ",
    "start": "4921510",
    "end": "4928450"
  },
  {
    "text": "AUDIENCE: So I'm just curious,\nsome idea just occurred to me. I guess if you have an Oracle\nTuring machine, basically",
    "start": "4928450",
    "end": "4936310"
  },
  {
    "text": "just so that you could look at\na Turing machine description and decide whether\nit's a decider or not,",
    "start": "4936310",
    "end": "4943540"
  },
  {
    "text": "then it'd be a little bit\ninteresting to think about what happens if you look at all--",
    "start": "4943540",
    "end": "4949958"
  },
  {
    "text": "if you have a description\nof a pair of the Turing machine and an input\nstring, then you can look at for all\nsize n descriptions",
    "start": "4949958",
    "end": "4956950"
  },
  {
    "text": "of a pair, what's the most\nsteps that it takes for such",
    "start": "4956950",
    "end": "4963220"
  },
  {
    "text": "a machine to convert it. So then you'd have combined\nTuring machine and input string",
    "start": "4963220",
    "end": "4969880"
  },
  {
    "text": "descriptions, where\nyou could look at what's the longest\nit takes to convert. I don't know. It's just a random\nthought that occurred.",
    "start": "4969880",
    "end": "4976060"
  },
  {
    "text": "MICHAEL SIPSER: Yeah, so we\nactually-- we're going to-- we will talk about Oracle Turing\nmachines later on in the term.",
    "start": "4976060",
    "end": "4982642"
  },
  {
    "text": "These are machines\nthat have access to sort of free information. And that actually\nturns out to be--",
    "start": "4982642",
    "end": "4990590"
  },
  {
    "text": "there's some\ninteresting things you can say about what\nhappens when you're",
    "start": "4990590",
    "end": "4995650"
  },
  {
    "text": "providing a machine with, in\na sense, information for free. That you might otherwise want\nto charge it for actually",
    "start": "4995650",
    "end": "5003795"
  },
  {
    "text": "computing that information. But let's just say\nwe're going to allow it to get that information\nwithout being charged.",
    "start": "5003795",
    "end": "5011280"
  },
  {
    "text": "And then how does that\naffect the complexity of other problems, for example?",
    "start": "5011280",
    "end": "5016960"
  },
  {
    "text": "And so we will talk\nabout that later. But too much of, I\nthink, of a digression",
    "start": "5016960",
    "end": "5023100"
  },
  {
    "text": "at this moment to try\nto define all that. But happy to chat with\nyou about it on Piazza",
    "start": "5023100",
    "end": "5028170"
  },
  {
    "text": "if you want to raise\na question there. AUDIENCE: Thank you. MICHAEL SIPSER:\nSure, no problem.",
    "start": "5028170",
    "end": "5034270"
  },
  {
    "text": "Somebody's asking me about\nstrategies for solving the P versus NP problem. We will talk also talk\nabout that a little later",
    "start": "5034270",
    "end": "5040290"
  },
  {
    "text": "in the term as well. But clearly, it seems beyond the\nreach of our present techniques",
    "start": "5040290",
    "end": "5052469"
  },
  {
    "text": "to be able to prove that\nsome problems really take a long time. Like that Hamiltonian\npath problem,",
    "start": "5052470",
    "end": "5058480"
  },
  {
    "text": "it seems like there's\nnothing really you can do with that\nsignificantly better",
    "start": "5058480",
    "end": "5063539"
  },
  {
    "text": "than trying all\npossibilities as I described in that exponential\nalgorithm on the last slide.",
    "start": "5063540",
    "end": "5070380"
  },
  {
    "text": "But how do you prove that? Nobody knows. So lots of people have\ntried, including yours truly.",
    "start": "5070380",
    "end": "5081645"
  },
  {
    "text": "I mean, I've spent a lot\nof time thinking about it. Haven't succeeded with it. But there is somebody, I\nthink, someday, somebody",
    "start": "5081645",
    "end": "5096210"
  },
  {
    "text": "will come up with the new idea\nthat's needed to solve it. But it's going to clearly take\nsome sort of a breakthrough,",
    "start": "5096210",
    "end": "5102270"
  },
  {
    "text": "some sort of a new idea. It's not just going to be\na combination of existing ideas, existing methods.",
    "start": "5102270",
    "end": "5107915"
  },
  {
    "text": " I think we're about\n10 minutes past.",
    "start": "5107915",
    "end": "5113730"
  },
  {
    "text": "A few of you are still here. I'm going to say\ngoodbye to you folks. And shortly, I'm going to\njoin my TAs for our weekly TA",
    "start": "5113730",
    "end": "5121840"
  },
  {
    "text": "meeting. So see you guys. Thanks for being here. ",
    "start": "5121840",
    "end": "5136347"
  }
]