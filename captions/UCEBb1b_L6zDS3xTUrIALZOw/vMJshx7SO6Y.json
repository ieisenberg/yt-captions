[
  {
    "start": "0",
    "end": "80000"
  },
  {
    "text": " So today we're going to\ncontinue our discussion of enforcing modularity.",
    "start": "0",
    "end": "6439"
  },
  {
    "text": " And in particular if you\nremember last time we spent",
    "start": "6440",
    "end": "13430"
  },
  {
    "text": "a lot of time talking about -- ",
    "start": "13430",
    "end": "21680"
  },
  {
    "text": "Last time we spent a\nlot of time talking about how we can create a\nvirtual memory so that we can",
    "start": "21680",
    "end": "28690"
  },
  {
    "text": "have multiple programs running\non top of one piece of hardware that all appear to\nhave a separate address",
    "start": "28690",
    "end": "33950"
  },
  {
    "text": "space or separate memory. So, two lectures ago,\nwe talked about having",
    "start": "33950",
    "end": "40520"
  },
  {
    "text": "one module per computer. ",
    "start": "40520",
    "end": "47990"
  },
  {
    "text": "And then last time we\ntalked about this notion of wanting to have a module\nper virtual computer.",
    "start": "47990",
    "end": "57565"
  },
  {
    "text": " And we saw this notion\nof virtual memory.",
    "start": "57565",
    "end": "66417"
  },
  {
    "text": "OK, and now this time\nwhat we're going to do is we're going to talk\nabout the other piece that our virtual computer needs,\nwhich is a virtual processor.",
    "start": "66417",
    "end": "72923"
  },
  {
    "start": "72923",
    "end": "81670"
  },
  {
    "start": "80000",
    "end": "125000"
  },
  {
    "text": "OK, so the idea\nthat we want here when we are designing\na virtual processor",
    "start": "81670",
    "end": "87620"
  },
  {
    "text": "is to create, have\nour programs be able to run on a single\nphysical processor,",
    "start": "87620",
    "end": "95360"
  },
  {
    "text": "but have different programs\nbe able to run as though they were the only program that was\nexecuting on that processor.",
    "start": "95360",
    "end": "100820"
  },
  {
    "text": "So we want the programs\nto be written in a style where the programmer\ndoesn't have to be aware of the other\nprograms that are running",
    "start": "100820",
    "end": "106570"
  },
  {
    "text": "on the machine, but where\nthe machine creates sort of a virtual processor for\neach one of these programs",
    "start": "106570",
    "end": "113090"
  },
  {
    "text": "that's running so that each\nprogram has its own sort of set",
    "start": "113090",
    "end": "118560"
  },
  {
    "text": "of instructions\nthat it executes. And those instructions\nappear to be independent of all the other\nprograms that are running.",
    "start": "118560",
    "end": "124700"
  },
  {
    "text": "So in order to create this\nillusion of a virtual processor --",
    "start": "124700",
    "end": "131640"
  },
  {
    "start": "125000",
    "end": "290000"
  },
  {
    "text": "-- we are going to introduce\na very simple concept.",
    "start": "131640",
    "end": "137880"
  },
  {
    "text": "We're going to have each\nprogram run in what's known as a thread.",
    "start": "137880",
    "end": "143080"
  },
  {
    "text": " And thread is really short\nfor a thread of execution.",
    "start": "143080",
    "end": "150110"
  },
  {
    "text": " And a thread is just a\ncollection of all of the state",
    "start": "150110",
    "end": "159101"
  },
  {
    "text": "that we need in\norder to keep track of what one single\ngiven program is doing at a particular point in time.",
    "start": "159102",
    "end": "164560"
  },
  {
    "text": "So a thread is a collection\nof the instructions",
    "start": "164560",
    "end": "171110"
  },
  {
    "text": "for the program that\nthe module is running, as well as the current\nstate of the program.",
    "start": "171110",
    "end": "177320"
  },
  {
    "text": "In particular, it's the value of\nthe registers on the processor",
    "start": "177320",
    "end": "182660"
  },
  {
    "text": "including of particular import\nfor this lecture the program counter and the stack pointer.",
    "start": "182660",
    "end": "189400"
  },
  {
    "text": "OK, so there's a bunch of\nregisters on the processor, say, 32 registers,\nand there also",
    "start": "189400",
    "end": "195879"
  },
  {
    "text": "are these special registers,\nthe program counter, that keeps track of which\ninstruction is currently being executed, and\nthe stack pointer which",
    "start": "195879",
    "end": "201740"
  },
  {
    "text": "keeps track of\nwhere on the stack values are currently being\npushed or popped from.",
    "start": "201740",
    "end": "209860"
  },
  {
    "text": "So these things combined\ntogether with the stack",
    "start": "209860",
    "end": "215910"
  },
  {
    "text": "are really the things that\ndefine one single thread. So, and the way to\nthink about this",
    "start": "215910",
    "end": "221702"
  },
  {
    "text": "is if you think about a\nprogram that's running, you can really encapsulate\nalmost everything about what",
    "start": "221702",
    "end": "226860"
  },
  {
    "text": "that program is currently\ndoing by the instructions",
    "start": "226860",
    "end": "231900"
  },
  {
    "text": "that it has to execute, the\nvalue of the registers that are currently set\nin the program, and the state\nthat's on the stack.",
    "start": "231900",
    "end": "238550"
  },
  {
    "text": "Now, programs may\nalso have some sort of data that's stored\nin the global memory in the global variables\nour things that",
    "start": "238550",
    "end": "245330"
  },
  {
    "text": "are stored on the heap that have\nbeen allocated via some memory allocation call. And so those things are\na part of the program",
    "start": "245330",
    "end": "251310"
  },
  {
    "text": "as well, although I don't\nwant to explicitly list them as being a part\nof a single thread because if two\nprograms, as we'll see,",
    "start": "251310",
    "end": "258088"
  },
  {
    "text": "two programs can share\nthe same address space. And if two programs are\nsharing the same address space, then they're going to share\nthose global variables,",
    "start": "258089",
    "end": "265410"
  },
  {
    "text": "the stuff that's stored on\nthe heap of the program. So think of a thread as\nthese things, plus there",
    "start": "265410",
    "end": "271830"
  },
  {
    "text": "is some additional,\nwe'll call it a heap, set of memory that may be\nshared between several different",
    "start": "271830",
    "end": "277842"
  },
  {
    "text": "threads that are all running\nwithin the same address space. And I'll explain more\nabout that as we go.",
    "start": "277842",
    "end": "283659"
  },
  {
    "text": "OK, so as I said,\nnow what we want is to create this illusion\nthat each one of these threads has its own virtual processor\nupon which it's running.",
    "start": "283660",
    "end": "292379"
  },
  {
    "text": "So how are we going\nto accomplish that? So if you think about\nthis for a second,",
    "start": "292380",
    "end": "298830"
  },
  {
    "text": "the way to accomplish\nthis is simply to allow each one of\nthese, each thread",
    "start": "298830",
    "end": "304560"
  },
  {
    "text": "to update these\nvarious registers, push things onto\nthe stack, and then to have some function\nwhich we can call,",
    "start": "304560",
    "end": "312050"
  },
  {
    "text": "which will save all\nof this current state off for the current\nthread that's executing, and then load the state in for\nanother thread that might be",
    "start": "312050",
    "end": "319639"
  },
  {
    "text": "executing, and stop the\ncurrent thread from executing, and start the new one executing. So the idea is if you were\nto look at a timeline of what",
    "start": "319640",
    "end": "329830"
  },
  {
    "text": "the processor was doing, and\nif the processor is running two threads, thread\none and thread two,",
    "start": "329830",
    "end": "336130"
  },
  {
    "text": "you would see that during\nsome period of time, thread one would be running. Then the computer\nwould switch over",
    "start": "336130",
    "end": "343172"
  },
  {
    "text": "and thread two\nwould start running, and then again the\ncomputer would switch, and thread one\nwould start running. So we are going to multiplex the\nprocessor resource in this way.",
    "start": "343172",
    "end": "350810"
  },
  {
    "text": "So we have one processor that\ncan be executing instructions. And at each point in\ntime, that processor",
    "start": "350810",
    "end": "356419"
  },
  {
    "text": "is going to be\nexecuting instructions from one of these two threads. And when we switch in these\npoints in between threads,",
    "start": "356419",
    "end": "362115"
  },
  {
    "text": "we are going to have to save off\nthis state for the thread that was running, and restore the\nstate for the thread that is currently running.",
    "start": "362115",
    "end": "368095"
  },
  {
    "text": "OK, so that's a very\nhigh-level picture of what we're going to\nbe doing with threads. ",
    "start": "368096",
    "end": "374526"
  },
  {
    "text": "And there's going to be a\nnumber of different ways, and that's what we're going to\nlook at through this lecture is how we can actually\naccomplish this switching,",
    "start": "374526",
    "end": "380550"
  },
  {
    "text": "how we decide when to switch,\nand what actually happens when this switch takes place.",
    "start": "380550",
    "end": "386880"
  },
  {
    "start": "385000",
    "end": "480000"
  },
  {
    "text": "OK, so we're going to look\nat several different methods.",
    "start": "386880",
    "end": "393790"
  },
  {
    "text": "So the first thing\nwe're going to look at is an approach called\ncooperative scheduling, or cooperative switching.",
    "start": "393790",
    "end": "400990"
  },
  {
    "text": "So in cooperative\nswitching, what happens is that each thread\nperiodically decides",
    "start": "400990",
    "end": "406710"
  },
  {
    "text": "that it's done processing\nand is willing to let some other process run. OK, so the thread calls a\nroutine that says I'm done;",
    "start": "406710",
    "end": "414050"
  },
  {
    "text": "please schedule another thread. So, this cooperative\napproach is simple, and it's easy to think about.",
    "start": "414050",
    "end": "420900"
  },
  {
    "text": "In the grand scheme of\nenforcing modularity of creating this illusion\nthat each program really",
    "start": "420900",
    "end": "426830"
  },
  {
    "text": "has its own computer\nthat's running, and where each program\ngets to run no matter what any other program\ndoes, cooperative scheduling",
    "start": "426830",
    "end": "433640"
  },
  {
    "text": "has a bit of a\nproblem because if we are doing cooperative\nscheduling,",
    "start": "433640",
    "end": "438979"
  },
  {
    "text": "then one process can just\nnever call this function that says I give up time to the\nother processes running",
    "start": "438980",
    "end": "444100"
  },
  {
    "text": "on the system. One module may just never\ngive up the processor. And then we are in trouble\nbecause no other module ever",
    "start": "444100",
    "end": "450750"
  },
  {
    "text": "gets to run. So instead what we're\ngoing to talk about, the alternative to\nthis, is something we call preemptive scheduling.",
    "start": "450750",
    "end": "458409"
  },
  {
    "text": "And in preemptive\nscheduling, what happens is some part of the\ncomputer, say, the kernel,",
    "start": "458410",
    "end": "464210"
  },
  {
    "text": "periodically decides that\nit forces the currently running thread to\ngive up the processor,",
    "start": "464210",
    "end": "470040"
  },
  {
    "text": "and starts a new thread running. And we'll see how\nthat works, OK?",
    "start": "470040",
    "end": "475860"
  },
  {
    "text": "I also want to\ndraw a distinction between whether these threads\nare running in the same address space or in a different\naddress space,",
    "start": "475860",
    "end": "481750"
  },
  {
    "start": "480000",
    "end": "570000"
  },
  {
    "text": "or in a different address space.  OK, so we could, for example,\nhave these two threads, T1",
    "start": "481750",
    "end": "490310"
  },
  {
    "text": "and T2. They might be running as a part\nof a single, say, application. So, for example, they\nmight be a part of a,",
    "start": "490310",
    "end": "499620"
  },
  {
    "text": "say for example, some computer\ngame that we have running. So suppose we have a computer\ngame like, but let me just load",
    "start": "499620",
    "end": "508500"
  },
  {
    "text": "up my computer here. Suppose we have a\ncomputer game like pick your favorite\ncomputer game, say, Halo.",
    "start": "508500",
    "end": "515440"
  },
  {
    "text": "And we are running\nHalo, and Halo",
    "start": "515440",
    "end": "522280"
  },
  {
    "text": "is going to consist\nof some set of threads that are responsible\nfor running this game.",
    "start": "522280",
    "end": "530170"
  },
  {
    "text": "So we might have one\nmain thread which, what it does when it\nruns is to simply update;",
    "start": "530170",
    "end": "538940"
  },
  {
    "text": "it repeats in a loop\nover and over again, wait for a little\nwhile, check and see",
    "start": "538940",
    "end": "543960"
  },
  {
    "text": "if there's any user input,\nupdate the state of the game, and then, say for example,\nredraw the display.",
    "start": "543960",
    "end": "550476"
  },
  {
    "text": "And because Halo is a\nvideogame that somebody is staring at and\nlooking at, it needs to update that\ndisplay at some rate,",
    "start": "550476",
    "end": "555990"
  },
  {
    "text": "say, once every 20\ntimes a second in order to create the illusion of\nsort of natural animation in the game.",
    "start": "555990",
    "end": "561419"
  },
  {
    "text": "So this wait step is\ngoing to wait a 20th of a second between every step.",
    "start": "561419",
    "end": "567440"
  },
  {
    "text": "OK, so this might be\none example of a thread. But of course within Halo, there\nmay be multiple other threads",
    "start": "567440",
    "end": "575300"
  },
  {
    "start": "570000",
    "end": "605000"
  },
  {
    "text": "that are also running. So there may be a thread\nthat's responsible for looking for input over the\nnetwork, right,",
    "start": "575300",
    "end": "581772"
  },
  {
    "text": "to see if there is\nadditional data that's arrived from the user, and from\nother users that are remote and updating the\nstate of the game",
    "start": "581772",
    "end": "587640"
  },
  {
    "text": "as other information comes in. And there may be a third\nthread that, say for example, is responsible for doing\nsome cleanup work in the game",
    "start": "587640",
    "end": "595180"
  },
  {
    "text": "like reclaiming memory\nafter some monster that's running around the game has\ndied and we no longer need",
    "start": "595180",
    "end": "606720"
  },
  {
    "start": "605000",
    "end": "650000"
  },
  {
    "text": "its state, OK? So if we look at just this,\nsay, main thread within Halo, as I said here we\ncan encapsulate",
    "start": "606720",
    "end": "612850"
  },
  {
    "text": "the state of this thread\nby a set of registers, say, R1 through Rn, as\nwell as a stack pointer and a program counter.",
    "start": "612850",
    "end": "619300"
  },
  {
    "text": "And then, there\nalso will be a stack that represents the\ncurrently executing program.",
    "start": "619300",
    "end": "624690"
  },
  {
    "text": "So, for example,\nthe stack might, if we just have entered\ninto this procedure, it might just have\na return address",
    "start": "624690",
    "end": "630540"
  },
  {
    "text": "which is sort of\nthe address that we should jump to when we're\ndone executing this Halo",
    "start": "630540",
    "end": "637009"
  },
  {
    "text": "program here. And then finally, we\nhave a program counter that points to this\nsort of current place where we are executing it.",
    "start": "637010",
    "end": "642519"
  },
  {
    "text": "So we might have started\noff where we are just executing the first instructions\nhere, the init instruction. ",
    "start": "642520",
    "end": "649160"
  },
  {
    "text": "OK, so what we're\ngoing to look at now",
    "start": "649160",
    "end": "655079"
  },
  {
    "text": "is this case where we\nhave a bunch of threads, say for example, in Halo all\nrunning within the same address",
    "start": "655080",
    "end": "660211"
  },
  {
    "text": "space. So they're all part\nof the Halo program. They can all access the\nglobal variables of Halo.",
    "start": "660211",
    "end": "665649"
  },
  {
    "text": "But we want to have\ndifferent threads to do different operations\nthat this program may need to take care of.",
    "start": "665650",
    "end": "670755"
  },
  {
    "text": "So we want each of these threads\nto sort of have the illusion that it has its own processor. And then later we'll talk\nabout a set of programs,",
    "start": "670755",
    "end": "676730"
  },
  {
    "text": "say, that are running\nin different address And we'll talk about what's\ndifferent about managing two threads, each of which is\nrunning in a different address",
    "start": "676730",
    "end": "684250"
  },
  {
    "text": "space. OK, so the very\nsimple idea that we're going to introduce in order\nto look at this situation",
    "start": "684250",
    "end": "692190"
  },
  {
    "text": "where we are going to\nstart off by looking at cooperative scheduling\nin the same address space.",
    "start": "692190",
    "end": "697540"
  },
  {
    "text": "We are going to introduce the\nnotion of a routine called",
    "start": "697540",
    "end": "703120"
  },
  {
    "text": "yield. OK, so yield is going to\nbe the thing the currently",
    "start": "703120",
    "end": "711579"
  },
  {
    "start": "705000",
    "end": "730000"
  },
  {
    "text": "executing thread calls when it's\nready to give up the processor and let another thread run.",
    "start": "711580",
    "end": "717339"
  },
  {
    "text": "So the thread is going\nto run for a while and then it's going\nto call yield, and that's going to allow\nother threads to sort of do",
    "start": "717340",
    "end": "723390"
  },
  {
    "text": "their execution. And this is cooperative\nbecause if a program doesn't call yield, then no other\nprogram will ever be",
    "start": "723390",
    "end": "729472"
  },
  {
    "text": "allowed to run on the system.  So the basic idea is that\nwhen a program calls yield,",
    "start": "729472",
    "end": "737730"
  },
  {
    "start": "730000",
    "end": "830000"
  },
  {
    "text": "what it's going to\ndo is exactly what I described just a minute ago.",
    "start": "737730",
    "end": "742970"
  },
  {
    "text": "So yield is going to save the\nstate of the current thread,",
    "start": "742970",
    "end": "750560"
  },
  {
    "text": "and then it's going to -- -- schedule the next thread,\nso pick the next thread to run",
    "start": "750560",
    "end": "759670"
  },
  {
    "text": "from all of the available\nthreads that are on the system. And then it's going to\ndispatch the next thread,",
    "start": "759670",
    "end": "765120"
  },
  {
    "text": "so it's going to\nin particular setup the state for the next thread\nso that it's ready to run.",
    "start": "765120",
    "end": "772450"
  },
  {
    "text": "And it's going to jump into the\nreturn address for that thread. ",
    "start": "772450",
    "end": "778670"
  },
  {
    "text": "OK, so I want to take you guys\nthrough a very simple example",
    "start": "778670",
    "end": "784160"
  },
  {
    "text": "of a program that has\nmultiple threads in it. And we're going to have a\nsimple thread scheduler.",
    "start": "784160",
    "end": "791139"
  },
  {
    "text": "So, the thread\nscheduler is the thing that decides which\nthread to run next. And this thread\nscheduler is going to keep an array of\nfixed size, call it",
    "start": "791139",
    "end": "802150"
  },
  {
    "text": "num_threads, that are all the\nthreads that are currently",
    "start": "802150",
    "end": "808380"
  },
  {
    "text": "running on the system. It's going to have an integer\nthat is going to tell us",
    "start": "808380",
    "end": "815450"
  },
  {
    "text": "what the next thread to run is. And then for every\none of our threads, we're going to have\na variable that we",
    "start": "815450",
    "end": "820710"
  },
  {
    "text": "call me which is the ID of the\ncurrently executing thread. So, this is local to the thread.",
    "start": "820710",
    "end": "826070"
  },
  {
    "start": "826070",
    "end": "832239"
  },
  {
    "start": "830000",
    "end": "1045000"
  },
  {
    "text": "OK so let's look at\nan example of how this might work with\nthis Halo thread that we're talking about here.",
    "start": "832239",
    "end": "839929"
  },
  {
    "text": "OK, so suppose we\nhave a Halo thread. And we'll call this the\nmain thread of execution. And as I said, we want to\nhave a couple of other threads",
    "start": "839929",
    "end": "846320"
  },
  {
    "text": "that are also running on\nthe system at the same time. So we might have a network\nthread and a cleanup thread.",
    "start": "846320",
    "end": "852040"
  },
  {
    "text": "Now in this case, what\nwe are going to say is that the yield procedure is\ngoing to do these three steps.",
    "start": "852040",
    "end": "859164"
  },
  {
    "text": "And I made these steps a\nlittle bit more concrete so that we can actually\nthink about what might be happening on the stack\nas these things are executing.",
    "start": "859164",
    "end": "865880"
  },
  {
    "text": "So, the yield procedure\nis going to, when it runs, the first thing it's going\nto do is save the state.",
    "start": "865880",
    "end": "872490"
  },
  {
    "text": "So to save the state, it\nsimply stores in this table the stack pointer of the\ncurrently executing program,",
    "start": "872490",
    "end": "878660"
  },
  {
    "text": "the stack pointer of the\ncurrently executing thread. And then what it's\ngoing to do is it's going to pick the\nnext thread to run.",
    "start": "878660",
    "end": "885020"
  },
  {
    "text": "So in this case, picking\nthe next thread to run, the thread scheduler is doing\nsomething extremely simple. It's just cycling through\nall the available threads one",
    "start": "885020",
    "end": "891610"
  },
  {
    "text": "after another and\nscheduling them, right? So it says next gets next\nplus one, and then modulo the total number of threads\nthat are in the system.",
    "start": "891610",
    "end": "899699"
  },
  {
    "text": "So suppose num_threads\nis equal to five. As soon as next plus\none is equal to five,",
    "start": "899700",
    "end": "905940"
  },
  {
    "text": "and then five\nmodulo five is zero, and we're going to\nwrap that back around. So, once we've executed\nthe fourth thread,",
    "start": "905940",
    "end": "911469"
  },
  {
    "text": "we are going to wrap\naround and start executing thread number zero. And then finally\nwhat it's going to do is it's going to restore\nthe stack pointer.",
    "start": "911469",
    "end": "918660"
  },
  {
    "text": " Here, I'll just change\nthis for you right now.",
    "start": "918660",
    "end": "926060"
  },
  {
    "text": "This should be table sub next. I didn't want to do that.",
    "start": "926060",
    "end": "932560"
  },
  {
    "text": " So, we have this table.",
    "start": "932560",
    "end": "938250"
  },
  {
    "text": "So, we restore the stack\npointer for the next thread that we want to run from\nthe table of stack pointers",
    "start": "938250",
    "end": "945650"
  },
  {
    "text": "that are available. And then what's\ngoing to happen is that when we exit out\nof this yield routine, we are going to load the return\naddress from the stack pointer",
    "start": "945650",
    "end": "952970"
  },
  {
    "text": "that we just have set up. So you'll see how that\nworks again in a second. But the basic process, then,\nis just going to be as follows.",
    "start": "952970",
    "end": "959370"
  },
  {
    "text": "So this only works on\na single processor. And I'm not going to have time\nto go into too much detail about what happens\nin a multiprocessor,",
    "start": "959370",
    "end": "965524"
  },
  {
    "text": "but that book talks carefully\nabout why this doesn't work on a single processor machine.",
    "start": "965524",
    "end": "971830"
  },
  {
    "text": "OK, so the basic process, then,\nit's going to be as follows.",
    "start": "971830",
    "end": "977720"
  },
  {
    "text": "So we've got our\nyield procedure. We have our three threads. Say we've numbered them\none, two, and three, as shown up here.",
    "start": "977720",
    "end": "983430"
  },
  {
    "text": "So, num_threads\nis equal to three, and say we start off\nwith next equal to one.",
    "start": "983430",
    "end": "990330"
  },
  {
    "text": "So what's going to happen is\nthat the first thread at some point it's going to\ncall a yield routine.",
    "start": "990330",
    "end": "995589"
  },
  {
    "text": "And what that's going\nto do is it's going to cause this yield to execute. We're going to increment next. And we're going to schedule\nthe network thread here.",
    "start": "995589",
    "end": "1002290"
  },
  {
    "text": "OK, and the network\nthread is going to run for a little while. And then at some point,\nit's going to call yield,",
    "start": "1002290",
    "end": "1007560"
  },
  {
    "text": "and that's going to sort\nof cause the next thread to be scheduled. We're going to call cleanup,\nand then finally we're going to call yield.",
    "start": "1007560",
    "end": "1013360"
  },
  {
    "text": "And the third thread is\ngoing to call yield and cause the first thread to run again. And this process is\njust going to repeat",
    "start": "1013360",
    "end": "1019256"
  },
  {
    "text": "over and over and over again. OK, so -- ",
    "start": "1019256",
    "end": "1029010"
  },
  {
    "text": "OK, so what I want to do\nnow is to look at actually more carefully at what's going\non with, how this scheduling",
    "start": "1029010",
    "end": "1037994"
  },
  {
    "text": "process is actually working. So we can understand\na little bit better what's happening to\nthe stack pointer, and how these various yields\nare actually executing.",
    "start": "1037994",
    "end": "1045069"
  },
  {
    "start": "1045000",
    "end": "1165000"
  },
  {
    "text": "So let's look at,\nso this is going",
    "start": "1045069",
    "end": "1051039"
  },
  {
    "text": "to be an example of the stack\non, say, two of these threads, OK?",
    "start": "1051040",
    "end": "1057600"
  },
  {
    "text": "So, suppose we have\nthread number one.",
    "start": "1057600",
    "end": "1063750"
  },
  {
    "text": "I'll call this thread one,\nand this is our Halo thread. OK, and this is\nthe stack for Halo.",
    "start": "1063750",
    "end": "1073809"
  },
  {
    "text": "We also have thread number two,\nwhich is our network thread.",
    "start": "1073810",
    "end": "1082230"
  },
  {
    "text": "OK, and this is also some stack\nassociated with this thing. So we're just looking\nat the current state",
    "start": "1082230",
    "end": "1087350"
  },
  {
    "text": "of the stack on these two\nthings, these two threads. And if you remember,\ntypically we",
    "start": "1087350",
    "end": "1094210"
  },
  {
    "text": "represent stacks as\ngoing down in memory. So, these are the\ndifferent addresses of the different entries\nin the stack that",
    "start": "1094210",
    "end": "1101950"
  },
  {
    "text": "represent what's going on\ncurrently in the processor. So we'll say that thread\none, perhaps, the stack",
    "start": "1101950",
    "end": "1108539"
  },
  {
    "text": "starts at address 108,\nand maybe thread two starts at address 208.",
    "start": "1108540",
    "end": "1117120"
  },
  {
    "text": "OK, so suppose we\nstart up this system, and when we start it\nup, the stack pointer",
    "start": "1117120",
    "end": "1123169"
  },
  {
    "text": "is currently pointing here.  So we take a snapshot\nof this system",
    "start": "1123170",
    "end": "1130249"
  },
  {
    "text": "at a given point in time. Suppose the stack pointer is\ncurrently pointing at 104. The currently executing thread\nis this one, thread one.",
    "start": "1130249",
    "end": "1140340"
  },
  {
    "text": "And we have, remember\nour thread table that captures the\ncurrent thread number,",
    "start": "1140340",
    "end": "1149100"
  },
  {
    "text": "and the saved stack pointer\nfor each one of these threads.",
    "start": "1149100",
    "end": "1154210"
  },
  {
    "text": "So we've got thread number\none, thread number two. OK, so let's suppose we start\nlooking at this point in time",
    "start": "1154210",
    "end": "1159387"
  },
  {
    "text": "where the stack pointer\nis pointing here.  And if we look at this\nprogram, so if we start off",
    "start": "1159387",
    "end": "1170640"
  },
  {
    "start": "1165000",
    "end": "1415000"
  },
  {
    "text": "with the program that\nwe initially had, in order to understand\nwhat happens to the stack, we need to actually look at\nwhen the stack gets manipulated.",
    "start": "1170640",
    "end": "1177671"
  },
  {
    "text": "So if we are just\nlooking at C code, typically the C code\nisn't going to have, we're not going to see the\nchanges to the stack occurring",
    "start": "1177671",
    "end": "1183960"
  },
  {
    "text": "within the C code. So what I've done\nhere is in yellow, I've annotated this with the\nsort of additional operations,",
    "start": "1183960",
    "end": "1191037"
  },
  {
    "text": "the assembly operations, that\nare happening on the entry and exit to these procedures. So what happens just before\nwe call the yield procedure is",
    "start": "1191037",
    "end": "1198370"
  },
  {
    "text": "that the Halo thread\nwill push the return address onto the stack. OK, so if we start executing\nthe yield procedure,",
    "start": "1198370",
    "end": "1207780"
  },
  {
    "text": "Halo is going to push the\nreturn address onto the stack. And then it's going to jump\ninto the yield procedure.",
    "start": "1207780",
    "end": "1214030"
  },
  {
    "text": "So, suppose we come onto here. Now if we look at what\nthe return address is",
    "start": "1214030",
    "end": "1219450"
  },
  {
    "text": "after we execute\nthe yield procedure, it's going to be\ninstruction number five. So we're going to push\nthat address onto the stack",
    "start": "1219450",
    "end": "1225260"
  },
  {
    "text": "because instruction number\nfive is labeled here on the left side is\nwhere we're going to return to after the yield.",
    "start": "1225260",
    "end": "1231525"
  },
  {
    "text": "And then the yield\nis going to execute. And what's going to happen\nas the yield executes is it's going to change\nthe stack pointer to be",
    "start": "1231525",
    "end": "1237540"
  },
  {
    "text": "the stack pointer of\nthe next thread, right? So, I have this typo here again. So be careful about that.",
    "start": "1237540",
    "end": "1243646"
  },
  {
    "text": "We're going to change\nthe stack pointer to be the stack pointer\nof the next thread. And so when it executes\nthis pop RA instruction",
    "start": "1243646",
    "end": "1250398"
  },
  {
    "text": "that we see here,\nit's actually going to be popping the return\naddress from the network thread that it scheduled next\nas opposed to the return",
    "start": "1250399",
    "end": "1258150"
  },
  {
    "text": "address from this Halo thread. OK, so suppose that the saved\nstack pointer for the network",
    "start": "1258150",
    "end": "1264810"
  },
  {
    "text": "thread was pointing here at 204. So, that would have been\nan entry, 204, here.",
    "start": "1264810",
    "end": "1270800"
  },
  {
    "text": "And the saved return\naddress that it's going to jump to is going to be here. So suppose the return address\nthat it jumps to is 1,000, OK?",
    "start": "1270800",
    "end": "1279970"
  },
  {
    "text": "So if we look at the\nstate of these two threads as they have been\nrunning, we saw",
    "start": "1279970",
    "end": "1286100"
  },
  {
    "text": "thread one ran for\na little while, and then it called yield, and\nthe instruction following yield",
    "start": "1286100",
    "end": "1292740"
  },
  {
    "text": "was instruction number five. OK, so that was the\naddress that we pushed on to the stack pointer.",
    "start": "1292740",
    "end": "1298290"
  },
  {
    "text": "Now, we switched over\nhere to thread two. And last time we ran thread\ntwo, it called yield,",
    "start": "1298290",
    "end": "1304800"
  },
  {
    "text": "and its return\naddress was 1,000. So, there was this\n1,000 here, OK? So now, when we schedule thread\ntwo, what's going to happen",
    "start": "1304800",
    "end": "1313260"
  },
  {
    "text": "is that we're going to read the,\nso this is instruction 1,000.",
    "start": "1313260",
    "end": "1318740"
  },
  {
    "text": "We're going to start\nexecuting from 1,000 because we're going to\nexecute this pop return So we're going to pop the\nreturn address off the stack,",
    "start": "1318740",
    "end": "1325280"
  },
  {
    "text": "and we're going to\nstart executing here at instruction 1,000, OK? So, you guys kind of see\nhow it is that we switch now",
    "start": "1325280",
    "end": "1331340"
  },
  {
    "text": "from one thread to the other,\nby switching the stack pointer and grabbing our return address\nfrom the stack of thread two",
    "start": "1331340",
    "end": "1337880"
  },
  {
    "text": "instead of from thread one. OK, so now what's\ngoing to happen",
    "start": "1337880",
    "end": "1343039"
  },
  {
    "text": "is this thread two\nis going to start executing from this address.",
    "start": "1343040",
    "end": "1348740"
  },
  {
    "text": "And it's going to run\nfor a little while. And at some point\nlater, it's going to call yield again, right,\nbecause it's run for a while",
    "start": "1348740",
    "end": "1354970"
  },
  {
    "text": "and it's decided that\nit's time to yield. So, suppose that instruction\n1,024 it calls yield.",
    "start": "1354970",
    "end": "1365360"
  },
  {
    "text": "So when it does that, the\nsame thing is going to happen. It's going to have run\nfor a little while.",
    "start": "1365360",
    "end": "1370460"
  },
  {
    "text": "So its stack is\ngoing to have grown. But eventually it's going\nto push the return address onto the stack, say\nhere 1,025, and suppose",
    "start": "1370460",
    "end": "1378710"
  },
  {
    "text": "this value of its stack\npointer now has grown down. So it's gone 204. It's run for a while, pushed\nsome things on the stack,",
    "start": "1378710",
    "end": "1385960"
  },
  {
    "text": "and maybe the stack\npointer is now at 148. So, when it calls\nyield, it's going to write into the stack pointer\naddress in the thread table",
    "start": "1385960",
    "end": "1393429"
  },
  {
    "text": "148. And we're going to restore\nthe stack pointer addressed",
    "start": "1393430",
    "end": "1398646"
  },
  {
    "text": "from here, which I forgot\nto show being written in, but what I should have\nwritten in there was 104. So, we're going to restore\nthe stack address to 104.",
    "start": "1398646",
    "end": "1405410"
  },
  {
    "text": "We're going to pop the next\ninstruction to execute off of that stack five, and then\nwe're going to keep executing. So you just switch back\nand forth in this way.",
    "start": "1405410",
    "end": "1412066"
  },
  {
    "start": "1412066",
    "end": "1418530"
  },
  {
    "text": "OK, so -- --",
    "start": "1418530",
    "end": "1424316"
  },
  {
    "text": " what I want to do now is, so\nthis is the basic process now",
    "start": "1424316",
    "end": "1432210"
  },
  {
    "text": "whereby this yield\ninstruction can be used to switch between\nthe scheduling of these two procedures, right?",
    "start": "1432210",
    "end": "1439309"
  },
  {
    "text": "And this is sort of\nthe core of how it is. So we have these two\nthreads of execution, and they just sort\nof run through.",
    "start": "1439310",
    "end": "1444970"
  },
  {
    "text": "And they periodically\ncall yield. And that allows another thread\nto be written, to execute it. But otherwise these\nthreads have been",
    "start": "1444970",
    "end": "1453179"
  },
  {
    "text": "written in a style where\nthey don't actually have to know anything about the\nother threads that are running.",
    "start": "1453180",
    "end": "1458546"
  },
  {
    "text": "There could have been\ntwo other threads or 200 other threads running\non the system at the same time. And this approach\nthat I showed you",
    "start": "1458546",
    "end": "1464029"
  },
  {
    "text": "would have caused all\nthose threads eventually to have been scheduled\nand to execute properly. Right, but as we said\nbefore, requiring",
    "start": "1464030",
    "end": "1473909"
  },
  {
    "text": "these functions to\nactually call yield periodically has\nsort of defeated the purpose of our\nenforcing modularity, one",
    "start": "1473910",
    "end": "1480810"
  },
  {
    "text": "of our goals of\nenforcing modularity, which is to make it so that\nno one thread can interfere",
    "start": "1480810",
    "end": "1485885"
  },
  {
    "text": "with the operation\nof the other thread, or cause that other\nthread to crash, right, because if the procedure\nnever calls a yield,",
    "start": "1485885",
    "end": "1492460"
  },
  {
    "text": "then a module never\ncalls yield, excuse me,",
    "start": "1492460",
    "end": "1497760"
  },
  {
    "text": "another thread will\nnever be scheduled. And so, that module will have\nthe ability, essentially, to take over the whole\ncomputer, which is bad.",
    "start": "1497760",
    "end": "1504394"
  },
  {
    "text": "So what we're going\nto look at now is how we go from this\ncooperative scheduling where modules call yield\nto preemptive scheduling",
    "start": "1504394",
    "end": "1512450"
  },
  {
    "text": "where modules are\nforced to yield the processor periodically. ",
    "start": "1512450",
    "end": "1533060"
  },
  {
    "text": "OK, so this is the case where\nyou have no explicit yield",
    "start": "1533060",
    "end": "1538260"
  },
  {
    "text": "statements. ",
    "start": "1538260",
    "end": "1544880"
  },
  {
    "text": "All right, so the idea\nhere is that turns out to be very simple.",
    "start": "1544880",
    "end": "1549960"
  },
  {
    "text": "So programs aren't going\nto have an explicit yield statement in them. But what we're\ngoing to do is we're",
    "start": "1549960",
    "end": "1555198"
  },
  {
    "text": "going to have a special timer\nthat runs periodically within, say, for example, the kernel.",
    "start": "1555198",
    "end": "1560740"
  },
  {
    "text": "So suppose the kernel has a\ntimer that runs periodically that causes the kernel to be\nsort of woken up and allowed",
    "start": "1560740",
    "end": "1568380"
  },
  {
    "text": "to execute some code. So this timer is\ngoing to be connected",
    "start": "1568380",
    "end": "1573820"
  },
  {
    "start": "1570000",
    "end": "1625000"
  },
  {
    "text": "to what's called an interrupt. So, we're going to\nintroduce a timer interrupt,",
    "start": "1573820",
    "end": "1581010"
  },
  {
    "text": "and almost all\nprocessors essentially have some notion of\na timer interrupt. And an interrupt is\nsomething that when it fires,",
    "start": "1581010",
    "end": "1588410"
  },
  {
    "text": "it causes the processor to run\na special piece of code, OK?",
    "start": "1588410",
    "end": "1594770"
  },
  {
    "text": "So, basically this is\ngoing to be some processor.",
    "start": "1594770",
    "end": "1604360"
  },
  {
    "text": "Think of it, if you like, as\nsome line on the processor. OK, there's a wire that's\ncoming off the processor.",
    "start": "1604360",
    "end": "1609620"
  },
  {
    "text": "And when this wire gets pulled\nhigh, when the timer goes off and fires, this line is\ngoing to be pulled high.",
    "start": "1609620",
    "end": "1616660"
  },
  {
    "text": "And when that happens,\nthe microprocessor is going to notice\nthat and is going to invoke a special\nfunction within the kernel.",
    "start": "1616660",
    "end": "1623769"
  },
  {
    "text": "So this line is going to be\nchecked by the microprocessor",
    "start": "1623770",
    "end": "1637330"
  },
  {
    "start": "1625000",
    "end": "1865000"
  },
  {
    "text": "before it executes\neach instruction, OK? And if the line is\nhigh, the microprocessor",
    "start": "1637330",
    "end": "1649730"
  },
  {
    "text": "is going to execute one of\nthese special gate functions.",
    "start": "1649730",
    "end": "1655134"
  },
  {
    "text": "So, we saw the notion\nof a gate function before that can be\nused for a module",
    "start": "1655134",
    "end": "1663670"
  },
  {
    "text": "to obtain entry into the kernel. Essentially what's\ngoing to happen is that when the\ntimer interrupt fires,",
    "start": "1663670",
    "end": "1669050"
  },
  {
    "text": "it's going to go execute one\nof these special gate functions as well. And that's going to\ncause the kernel to then",
    "start": "1669050",
    "end": "1674260"
  },
  {
    "text": "be in control of the processor. So remember when the\ngate function runs,",
    "start": "1674260",
    "end": "1679760"
  },
  {
    "text": "it switches the user to kernel\nmode bit, to kernel mode.",
    "start": "1679760",
    "end": "1685350"
  },
  {
    "text": "It switches the page map address\nregister to the kernel's page map so that the\nkernel is in control,",
    "start": "1685350",
    "end": "1690449"
  },
  {
    "text": "and it switches the stack\npointer to the kernel's saved stack pointer so that the kernel\nis in control of the system,",
    "start": "1690449",
    "end": "1695460"
  },
  {
    "text": "and can execute whatever\ncode that it wants. So this is going to accomplish\nbasically everything",
    "start": "1695460",
    "end": "1700540"
  },
  {
    "text": "that we need, right? Because if we can get the kernel\nin control of the system, now,",
    "start": "1700540",
    "end": "1705880"
  },
  {
    "text": "the kernel can do whatever it\nneeds to do to, for example, schedule the next thread. So the way that's going to\nwork is basically very simple.",
    "start": "1705880",
    "end": "1716289"
  },
  {
    "text": "So when the kernel\ngets run, it knows",
    "start": "1716290",
    "end": "1721490"
  },
  {
    "text": "which thread, for example,\nis currently running. And basically what\nit does is it just",
    "start": "1721490",
    "end": "1727360"
  },
  {
    "text": "calls the appropriate\nyield function, it calls the yield\nfunction for the thread that it's currently running,\nforcing that thread to yield.",
    "start": "1727360",
    "end": "1735250"
  },
  {
    "text": "So, kernel calls yield\non current thread, right?",
    "start": "1735250",
    "end": "1745980"
  },
  {
    "start": "1745980",
    "end": "1751309"
  },
  {
    "text": "OK, so in order to\ndo this, of course the kernel needs to\nknow how to capture",
    "start": "1751310",
    "end": "1761189"
  },
  {
    "text": "the state for the\ncurrently running thread. But for the most part\nthat's pretty simple because the state\nis all encapsulated",
    "start": "1761189",
    "end": "1766300"
  },
  {
    "text": "in the current values of the\nregisters in the current value of the stack pointer. So, the kernel is going to\ncall yield on the currently",
    "start": "1766300",
    "end": "1771330"
  },
  {
    "text": "executing thread,\nand that's going to force that thread to go ahead\nand schedule another thread.",
    "start": "1771330",
    "end": "1778690"
  },
  {
    "text": "So the module itself\nhasn't called yield, but still the module has been\nforced to sort of give up",
    "start": "1778690",
    "end": "1783802"
  },
  {
    "text": "its control the processor.  So, when it calls\nyield, it's just",
    "start": "1783802",
    "end": "1792330"
  },
  {
    "text": "going to do it we\ndid before, which is save our state and schedule\nand run the next thread.",
    "start": "1792330",
    "end": "1808840"
  },
  {
    "text": "OK, so the only\nlast little detail that we have to think about\nis what if the kernel wants",
    "start": "1808840",
    "end": "1815344"
  },
  {
    "text": "to schedule a thread that's\nrunning in a different address space? So if a kernel wants to\nschedule a thread that's running a different\naddress space,",
    "start": "1815344",
    "end": "1821716"
  },
  {
    "text": "it well, it has to do\nwhat we saw last time when we saw about how we\nswitch address spaces. It has to change the\nvalue of the PMAR register",
    "start": "1821716",
    "end": "1829299"
  },
  {
    "text": "so that the next address\nspace gets swapped And then it can\ngo ahead and jump",
    "start": "1829300",
    "end": "1834710"
  },
  {
    "text": "into the appropriate\nlocation in the sort of newly scheduled address space. So that brings us to the\nnext topic of discussion.",
    "start": "1834710",
    "end": "1842260"
  },
  {
    "text": "So, what we've seen so far\nnow, we saw cooperative in the same address space,\nand I introduced the notion",
    "start": "1842260",
    "end": "1848060"
  },
  {
    "text": "of a preemptive scheduling. What we want to\nlook at now is sort of what it means to run multiple\nthreads in different address",
    "start": "1848060",
    "end": "1856530"
  },
  {
    "text": "spaces. Typically when we talk\nabout a program that's running on a\ncomputer or in 6.033",
    "start": "1856530",
    "end": "1863250"
  },
  {
    "text": "we like to call programs\nrunning on computers processes. When we talk about a process,\nwe mean an address space",
    "start": "1863250",
    "end": "1872730"
  },
  {
    "text": "plus some collection of threads.  So this is sort of\nthe real definition",
    "start": "1872730",
    "end": "1880409"
  },
  {
    "text": "of what we mean by process. And alternately, you will\nsee processes called things",
    "start": "1880410",
    "end": "1885630"
  },
  {
    "text": "like applications or programs. But any time you see a word\nlike that, what people typically mean is some address space, some\nvirtual address space in which",
    "start": "1885630",
    "end": "1895340"
  },
  {
    "text": "we resolve memory addresses. And then a collection of\nthreads that are currently executing within\nthat address space,",
    "start": "1895340",
    "end": "1901650"
  },
  {
    "text": "and where each of\nthose threads includes the set of instructions\nand registers and stack that correspond to it, OK?",
    "start": "1901650",
    "end": "1910880"
  },
  {
    "start": "1910000",
    "end": "2310000"
  },
  {
    "text": "So the kernel has explicit\nsupport for these processes.",
    "start": "1910880",
    "end": "1918540"
  },
  {
    "start": "1918540",
    "end": "1923800"
  },
  {
    "text": "So in particular, what\nthe kernel provides are routines to create a\nprocess and destroy a process.",
    "start": "1923800",
    "end": "1931940"
  },
  {
    "text": " OK, and these create\nand destroy methods",
    "start": "1931940",
    "end": "1938289"
  },
  {
    "text": "are going to sort of\ndo, the create method is going to do all\nthe initialization that we need to do in order\nto create a new address space",
    "start": "1938290",
    "end": "1945469"
  },
  {
    "text": "and to create at least\none thread that is running within that address space. So we've sort of seeing\nall the pieces of this,",
    "start": "1945469",
    "end": "1951650"
  },
  {
    "text": "but basically what\nit's going to do is it's going to\nallocate the address space in its table of\nall the address spaces",
    "start": "1951650",
    "end": "1962230"
  },
  {
    "text": "that it knows about. So we saw that in the\nlast time, and it's going to allocate a\npiece of physical memory",
    "start": "1962230",
    "end": "1969769"
  },
  {
    "text": "that corresponds to\nthat address space.  So, it's going to allocate\na piece of physical memory",
    "start": "1969770",
    "end": "1979650"
  },
  {
    "text": "that corresponds to\nthat address space. It's going to allocate\none of these page maps",
    "start": "1979650",
    "end": "1985490"
  },
  {
    "text": "that the PMAR register\nis going to point to when this thing is running.",
    "start": "1985490",
    "end": "1992400"
  },
  {
    "text": "OK, and now the other\nthing that it's going to do is to go ahead and load\nthe code for this thing",
    "start": "1992400",
    "end": "2001360"
  },
  {
    "text": "into memory and map it\ninto the address space.",
    "start": "2001360",
    "end": "2006905"
  },
  {
    "text": " So it's going to add the code\nfor this currently running",
    "start": "2006905",
    "end": "2013510"
  },
  {
    "text": "module into the address space. And then it's going to create\na thread for this new process.",
    "start": "2013510",
    "end": "2022910"
  },
  {
    "text": "And it's going to add it to\nthe table, the thread table,",
    "start": "2022910",
    "end": "2030480"
  },
  {
    "text": "and then it's going to set up\nthe value of the stack pointer and the program counter\nfor this process",
    "start": "2030480",
    "end": "2035510"
  },
  {
    "text": "so that when the process\nstarts running it, you sort of into the process at\nsome well-defined entry point, say the main routine\nin that process",
    "start": "2035510",
    "end": "2043720"
  },
  {
    "text": "so that the thread can\nstart executing at whatever starting point it has. OK, and now destroy\nis just going",
    "start": "2043720",
    "end": "2049781"
  },
  {
    "text": "to basically do the opposite. It's going to get rid of all\nthis state that we created. So it's going to remove\nthe address space,",
    "start": "2049781",
    "end": "2057780"
  },
  {
    "text": "and it's going to remove\nthe thread from the table.",
    "start": "2057780",
    "end": "2067149"
  },
  {
    "text": "OK, and it may also\nreclaim any memory that's associated exclusively\nwith this process.",
    "start": "2067150",
    "end": "2073509"
  },
  {
    "text": " OK so if we look at --",
    "start": "2073509",
    "end": "2078838"
  },
  {
    "start": "2078839",
    "end": "2089388"
  },
  {
    "text": "So if you look at a computer\nsystem at any one point in time, what you'll see is\na collection of processes.",
    "start": "2089389",
    "end": "2097440"
  },
  {
    "text": "So I've drawn these\nhere as these big boxes. So you might have a process\nthat corresponds to Halo",
    "start": "2097440",
    "end": "2103720"
  },
  {
    "text": "and, say, we are also\nediting our code. So, we have a process\nthat corresponds to emacs.",
    "start": "2103720",
    "end": "2109680"
  },
  {
    "text": "OK, and each one\nof these processes is going to have an address\nspace associated with it.",
    "start": "2109680",
    "end": "2115609"
  },
  {
    "text": " And then there are going\nto be some set of threads",
    "start": "2115610",
    "end": "2122990"
  },
  {
    "text": "that are running in\nassociation with this process. So in the case of\nHalo, I'm going to draw these threads as\nthese little squiggly lines.",
    "start": "2122990",
    "end": "2129180"
  },
  {
    "text": "So in the case of Halo,\nwe saw that maybe it has three threads that\nare running within it. So these are three threads that\nall run within the same address",
    "start": "2129180",
    "end": "2136590"
  },
  {
    "text": "space. Now, emacs might have just one\nthread that's running in it, say, although that's\nprobably not true.",
    "start": "2136590",
    "end": "2142290"
  },
  {
    "text": "emacs is horribly complicated,\nand probably has many threads that are running within it.",
    "start": "2142290",
    "end": "2147660"
  },
  {
    "text": "And so, we're going to have\nthese sort of two processes with these two\ncollections of threads.",
    "start": "2147660",
    "end": "2153570"
  },
  {
    "text": "So if you think about\nthe sort of modularity or the enforcement\nof modularity that we",
    "start": "2153570",
    "end": "2159830"
  },
  {
    "text": "have between these\nprocesses, we could say some interesting things. So first of all, we've\nenforced modularity.",
    "start": "2159830",
    "end": "2167840"
  },
  {
    "text": "We have hard enforced modularity\nbetween these two processes,",
    "start": "2167840",
    "end": "2176510"
  },
  {
    "text": "right, because there's no way\nthat the Halo process can muck with any of the memory that,\nsay, the emacs process has",
    "start": "2176510",
    "end": "2184250"
  },
  {
    "text": "executed. And as long as we're using\npreemptive scheduling, there's no way that the Halo\nprocess could completely",
    "start": "2184250",
    "end": "2192880"
  },
  {
    "text": "maintain control\nof the processor. So the emacs process is\ngoing to be allowed to run, and its memory is going to\nbe protected from the Halo",
    "start": "2192880",
    "end": "2199359"
  },
  {
    "text": "process. OK, now within the\nHalo process, there is sort of a different story. So within the Halo\nprocess, there is sort of a different story.",
    "start": "2199360",
    "end": "2205320"
  },
  {
    "text": "So within the Halo\nprocess, these threads, because they are all within\nthe same address space, can muck with each\nother's memory.",
    "start": "2205320",
    "end": "2213329"
  },
  {
    "text": "So they are not isolated\nfrom each other in that way. And typically,\nbecause these are all within one process\nin that if we were",
    "start": "2213330",
    "end": "2220230"
  },
  {
    "text": "to destroy that process in\nthis step, what the operating system would do is in addition\nto destroying the address",
    "start": "2220230",
    "end": "2226250"
  },
  {
    "text": "space, all of the\nrunning threads. So we say that these threads\nthat are running within Halo",
    "start": "2226250",
    "end": "2231680"
  },
  {
    "text": "share fate. If one of them dies, or\nif one of these threads",
    "start": "2231680",
    "end": "2240900"
  },
  {
    "text": "fails or crashes or\ndoes something bad, then they are\nessentially all going to crash or do something bad.",
    "start": "2240900",
    "end": "2245948"
  },
  {
    "text": "If the operating system\nkills the process, then all of these threads\nare going to go away. ",
    "start": "2245948",
    "end": "2256490"
  },
  {
    "text": "So this is the basic\npicture of sort of what's going on\nwithin a computer system.",
    "start": "2256490",
    "end": "2262327"
  },
  {
    "text": "If you stare at this\nfor a little bit, you see that there is actually\nsort of a hierarchy of threads that are running on\nany one computer system",
    "start": "2262327",
    "end": "2269280"
  },
  {
    "text": "at any one point in time. So we have these larger sorts\nof processes that are running.",
    "start": "2269280",
    "end": "2275220"
  },
  {
    "text": "And then within\nthese processes, we have some set of threads\nthat's also running, right? And so, there is a diagram\nthat sort of useful",
    "start": "2275220",
    "end": "2284309"
  },
  {
    "text": "to help us understand\nthis hierarchy or layering of processes or\nthreads on a computer system.",
    "start": "2284310",
    "end": "2291280"
  },
  {
    "text": "I want to show that to you.",
    "start": "2291280",
    "end": "2308120"
  },
  {
    "text": " OK, so on our computer system,\nif we look at the lowest layer,",
    "start": "2308120",
    "end": "2317000"
  },
  {
    "start": "2310000",
    "end": "2601000"
  },
  {
    "text": "we have our\nmicroprocessor down here. OK, and this microprocessor,\nwhat we've seen",
    "start": "2317000",
    "end": "2325700"
  },
  {
    "text": "is that the microprocessor\nhas two things that it can be doing. Either the microprocessor can\nbe executing, say, some user",
    "start": "2325700",
    "end": "2335599"
  },
  {
    "text": "program, or the\nmicroprocessor can be interrupted and go execute\none of these interrupt handler",
    "start": "2335600",
    "end": "2345049"
  },
  {
    "text": "functions. So these interrupts are\ngoing to do things like, is going to be this\ntimer interrupt, or when some IO device,\nsay for example the disk,",
    "start": "2345050",
    "end": "2353980"
  },
  {
    "text": "finishes performing some\nIO operation like reading a block from memory, then\nthe processor will receive",
    "start": "2353980",
    "end": "2360257"
  },
  {
    "text": "an interrupt, and the processor\ncan do whatever it needs to do to service that\npiece of hardware so that the hardware\ncan go and, for example,",
    "start": "2360257",
    "end": "2366367"
  },
  {
    "text": "read the next block. So in a sense, you can think\nof the processor itself as having two threads that\nare associated with it.",
    "start": "2366367",
    "end": "2372875"
  },
  {
    "text": "One of them is an interrupt\nthread, and one of them is the main thread now\nrunning on top of this. So, these are threads\nthat are really",
    "start": "2372875",
    "end": "2384080"
  },
  {
    "text": "running within the kernel. But on top of these things there\nis this set of applications",
    "start": "2384080",
    "end": "2389349"
  },
  {
    "text": "like Halo and emacs.",
    "start": "2389350",
    "end": "2394820"
  },
  {
    "text": "And, these are the\nkind of user programs that are all running\non the system. And there may be a\nwhole bunch of these.",
    "start": "2394820",
    "end": "2401420"
  },
  {
    "text": "It's not just two, but\nit's any number of threads that we can multiplex on\ntop of this main thread. And then each one of\nthese may, in turn,",
    "start": "2401420",
    "end": "2409790"
  },
  {
    "text": "have sub-threads that are\nrunning as a part of it. So if you think about what's\ngoing on in this system,",
    "start": "2409790",
    "end": "2417770"
  },
  {
    "text": "you can see that\nat any one level, these two threads don't\nreally need to know anything",
    "start": "2417770",
    "end": "2424260"
  },
  {
    "text": "about the other threads that\nare running at that same level. So, for example, within Halo,\nthese individual sub-threads",
    "start": "2424260",
    "end": "2430885"
  },
  {
    "text": "don't really know anything about\nwhat the other sub-threads are doing. But it is the case that the\nthreads at a lower level",
    "start": "2430885",
    "end": "2437772"
  },
  {
    "text": "need to know about\nthe threads that are running above them because\nthese threads at the lower level implement this thread\nscheduling policy, right?",
    "start": "2437772",
    "end": "2444640"
  },
  {
    "text": "So, the Halo program decides\nwhich of its sub-threads to run next.",
    "start": "2444640",
    "end": "2450019"
  },
  {
    "text": "So the Halo program\nin particular is, so the parent thread\nimplements a scheduling --",
    "start": "2450020",
    "end": "2466920"
  },
  {
    "text": "-- policy for all of\nits children threads. So Halo has some\npolicy for deciding",
    "start": "2466920",
    "end": "2473530"
  },
  {
    "text": "what thread to run next. The operating system has some. The kernel has some policy for\ndeciding which of these user",
    "start": "2473530",
    "end": "2479290"
  },
  {
    "text": "level threads to run next. And the parent thread also\nprovides some switching",
    "start": "2479290",
    "end": "2484980"
  },
  {
    "text": "mechanism.  So we studied two\nswitching mechanisms today.",
    "start": "2484980",
    "end": "2491570"
  },
  {
    "text": "We looked at this notion of\nhaving this sort of cooperative switching where threads\ncall yield in order to allow",
    "start": "2491570",
    "end": "2498640"
  },
  {
    "text": "the next thread to run. And, we looked at this notion\nof preemptive scheduling",
    "start": "2498640",
    "end": "2503730"
  },
  {
    "text": "that forces the next thread\nin the schedule to run. So, if you look at\ncomputer systems, in fact",
    "start": "2503730",
    "end": "2509579"
  },
  {
    "text": "it's a fairly\ncommon organization to see that there is preemptive\nscheduling at the kernel level that causes different\nuser level applications to run.",
    "start": "2509580",
    "end": "2517180"
  },
  {
    "text": "But within a particular\nuser program, that program may use\ncooperative scheduling.",
    "start": "2517180",
    "end": "2523870"
  },
  {
    "text": "So the individual\nthreads of Halo may hand off control to the next\nthread only when they want to. And this sort of makes\nsense because if I'm",
    "start": "2523870",
    "end": "2530390"
  },
  {
    "text": "a developer of a\nprogram, I may very well trust that the\nother threads that I have running in the\nprogram at the same time,",
    "start": "2530390",
    "end": "2536520"
  },
  {
    "text": "I know I want them to run. So, we can talk about sort of\ndifferent switching mechanisms at different levels\nof this hierarchy.",
    "start": "2536520",
    "end": "2542950"
  },
  {
    "start": "2542950",
    "end": "2550900"
  },
  {
    "text": "OK, so what we've\nseen up to this point is this sort of basic\nmechanism that we",
    "start": "2550900",
    "end": "2559100"
  },
  {
    "text": "have for setting up a\nset of threads that are running on a computer system. And what we haven't\nreally talked at all about",
    "start": "2559100",
    "end": "2567609"
  },
  {
    "text": "is how we can actually\nshare information between these threads\nor coordinate access",
    "start": "2567610",
    "end": "2573250"
  },
  {
    "text": "to some shared resource\nbetween these threads. So what I want to do with\nthe rest of the time today is to talk about this\nnotion of coordinating",
    "start": "2573250",
    "end": "2579660"
  },
  {
    "text": "access between threads. And we're going\nto talk about this",
    "start": "2579660",
    "end": "2587352"
  },
  {
    "text": "in the context of a\nslightly different example. ",
    "start": "2587352",
    "end": "2593110"
  },
  {
    "text": "So -- --",
    "start": "2593110",
    "end": "2598638"
  },
  {
    "text": " let's suppose that I am\nbuilding a Web server.",
    "start": "2598638",
    "end": "2605369"
  },
  {
    "start": "2601000",
    "end": "3050000"
  },
  {
    "start": "2605370",
    "end": "2610717"
  },
  {
    "text": "And I decide that I\nwant to structure my Web server as follows: I want\nto have some network thread,",
    "start": "2610717",
    "end": "2621760"
  },
  {
    "text": "and I want to have some thread\nthat services disk requests. OK, so the network\nthread is going",
    "start": "2621760",
    "end": "2629170"
  },
  {
    "text": "to do things like accept\nincoming connections from the clients and\nprocess those connections",
    "start": "2629170",
    "end": "2634460"
  },
  {
    "text": "and parse the HTTP requests\nand generate the HTML results that we send back to users.",
    "start": "2634460",
    "end": "2640581"
  },
  {
    "text": "And the disk request\nthread is going to be in charge of doing these\nexpensive operations where it goes out to disk\nand reads in some data",
    "start": "2640581",
    "end": "2646880"
  },
  {
    "text": "that it may need to\nassemble these HTML pages that we generate. So, for next\nrecitation, you're going",
    "start": "2646880",
    "end": "2655190"
  },
  {
    "text": "to read about a system\ncalled Flash, which is a multithreaded Web server. And so this should be a\nlittle taste of what you're",
    "start": "2655190",
    "end": "2660650"
  },
  {
    "text": "going to see for tomorrow. So, these two threads\nare likely to want",
    "start": "2660650",
    "end": "2665829"
  },
  {
    "text": "to communicate with each\nother through some data structure, some\nqueue of requests,",
    "start": "2665830",
    "end": "2672880"
  },
  {
    "text": "or a queue of\noutstanding information. So suppose that what\nwe're looking at in fact",
    "start": "2672880",
    "end": "2680650"
  },
  {
    "text": "in particular is a\nqueue of disk blocks that are being sent from\na disk request thread",
    "start": "2680650",
    "end": "2690480"
  },
  {
    "text": "out to the network thread. So, whenever the disk\nfinishes reading a block,",
    "start": "2690480",
    "end": "2695720"
  },
  {
    "text": "it enqueues a value\ninto the network thread so that the network thread can\nthen later pull that value off",
    "start": "2695720",
    "end": "2703380"
  },
  {
    "text": "and deliver it out to the user. So in this case,\nthese are two threads that are both running within\nthe same address space",
    "start": "2703380",
    "end": "2709820"
  },
  {
    "text": "within the same Web server. So they both have direct access\nto this queue data structure. They can both read and write\nto it at the same time.",
    "start": "2709820",
    "end": "2717150"
  },
  {
    "text": "This queue data structure, think\nof it as a global variable. It's in the memory that's\nmapped in the address space",
    "start": "2717150",
    "end": "2723190"
  },
  {
    "text": "so both threads can access it. So let's look at what happens\nwhen these two threads, let's",
    "start": "2723190",
    "end": "2731210"
  },
  {
    "text": "look at some pseudocode that\nshows what might be happening inside of these two threads.",
    "start": "2731210",
    "end": "2736290"
  },
  {
    "text": "So, suppose within\nthis first thread",
    "start": "2736290",
    "end": "2742520"
  },
  {
    "text": "here, this network\nthread, we have a loop that says while\ntrue, do the following.",
    "start": "2742520",
    "end": "2753630"
  },
  {
    "text": "De-queue a requestn\n-- call it M -- from the thread,\nand then process,",
    "start": "2753630",
    "end": "2763490"
  },
  {
    "text": "de-queue a disk block\nthat's in the queue and then go ahead and\nprocess that disk queue.",
    "start": "2763490",
    "end": "2770640"
  },
  {
    "text": "Go ahead and process that. And now, within the\ndisk request thread,",
    "start": "2770640",
    "end": "2777170"
  },
  {
    "text": "we also have a while loop\nthat just loops forever. And what this does is it gets\nthe next disk block to send,",
    "start": "2777170",
    "end": "2785300"
  },
  {
    "text": "however it does that, goes off\nand reads the block from disk, and then enqueues that\nblock onto the queue.",
    "start": "2785300",
    "end": "2795780"
  },
  {
    "text": " So if you like, you can think of\nthis as simply the disk request",
    "start": "2795780",
    "end": "2806260"
  },
  {
    "text": "thread is going to stick\nsome blocks into here, and then the network\nthread is going to sort of pull those blocks\noff the top of the queue.",
    "start": "2806260",
    "end": "2814290"
  },
  {
    "text": "So if you think about\nthis process running, there's kind of a\nproblem with the way that I've written\nthis, right, which",
    "start": "2814290",
    "end": "2821329"
  },
  {
    "text": "is that suppose that the\ndisk request thread runs much",
    "start": "2821330",
    "end": "2828180"
  },
  {
    "text": "faster than the network thread. Suppose that for\nevery one network,",
    "start": "2828180",
    "end": "2834620"
  },
  {
    "text": "one block that the network\nthread is able to pull off and process, the disk thread\ncan enqueue two blocks.",
    "start": "2834620",
    "end": "2841080"
  },
  {
    "text": "OK, so if you think\nabout this for awhile, if you run this system\nfor a long time, eventually you're\ngoing to have enqueued",
    "start": "2841080",
    "end": "2846920"
  },
  {
    "text": "a huge amount of stuff. And typically the way\nqueues are implemented is they are sort\nof some fixed size. You don't want them to grow\nto fill the whole memory",
    "start": "2846920",
    "end": "2853180"
  },
  {
    "text": "of the processor. So you limit them to some\nparticular fixed size. And eventually we are going to\nhave the problem that the queue",
    "start": "2853180",
    "end": "2858650"
  },
  {
    "text": "is going to fill up. It's going to\noverflow, and we're going to have a disk block\nthat we don't have anything that we could do with. We don't know what\nto do with it.",
    "start": "2858650",
    "end": "2865040"
  },
  {
    "text": "Right, so OK, you\nsay that's easy. There is an easy\nway to fix this. Why don't we just wait until\nthere is some extra space here.",
    "start": "2865040",
    "end": "2874775"
  },
  {
    "text": " So we'll introduce a\nwhile full statement here",
    "start": "2874775",
    "end": "2881720"
  },
  {
    "text": "that just sort of\nsits in a spin loop and waits until this full\ncondition is not true. OK, so as soon as the full\ncondition is not true,",
    "start": "2881720",
    "end": "2888740"
  },
  {
    "text": "we can go ahead and enqueue\nthe next thing on the queue. And similarly we're going to\nneed to do something over here",
    "start": "2888740",
    "end": "2894610"
  },
  {
    "text": "on the process side\nbecause we can't really de-queue a message if\nthe queue is empty.",
    "start": "2894610",
    "end": "2900470"
  },
  {
    "text": "So if the processing\nthread is running faster than the enqueueing thread,\nwe're going to be in trouble.",
    "start": "2900470",
    "end": "2905650"
  },
  {
    "text": "So we're going to also need\nto introduce a while loop here",
    "start": "2905650",
    "end": "2910920"
  },
  {
    "text": "that says something\nlike while empty. OK, so this is fine.",
    "start": "2910920",
    "end": "2920550"
  },
  {
    "text": "It seems like it\nfixes our problem. But there is a little\nbit of a limitation to this approach, which\nis that now what you see",
    "start": "2920550",
    "end": "2928411"
  },
  {
    "text": "is suppose these two\nthreads are running. And they are being sort of\nscheduled in round robin; they are being scheduled\none after the other.",
    "start": "2928412",
    "end": "2934109"
  },
  {
    "text": "Now this thread runs. And when it runs, suppose\nthat the queue is empty. Suppose the producer hasn't\nput anything on the queue yet.",
    "start": "2934110",
    "end": "2940150"
  },
  {
    "text": "Now when this guy runs,\nhe's going to sit here, and for the whole time\nthat it's scheduled, it's just going to\ncheck this while",
    "start": "2940150",
    "end": "2945650"
  },
  {
    "text": "loop to see if the\nthing is empty over, and over, and over, and\nover, and over again, right? so that's all whole\nlot of wasted time that the processor\ncould and should",
    "start": "2945650",
    "end": "2950950"
  },
  {
    "text": "have been doing something\nelse useful like perhaps letting the producer run so\nthat it could enqueue some data.",
    "start": "2950950",
    "end": "2956589"
  },
  {
    "text": "So in order to do this, so\nin order to fix this problem, we introduce this notion\nof sequence coordination",
    "start": "2956590",
    "end": "2963380"
  },
  {
    "text": "operators. And what sequence\ncoordination operators do",
    "start": "2963380",
    "end": "2973050"
  },
  {
    "text": "is they allow a\nthread to declare",
    "start": "2973050",
    "end": "2978130"
  },
  {
    "text": "that it wants to wait until\nsome condition is true. And they allow other threads to\nsignal that that condition has now become true,\nand sort of allow",
    "start": "2978130",
    "end": "2986029"
  },
  {
    "text": "threads that are waiting\nfor that condition to become true to run. So, we have these\ntwo operations:",
    "start": "2986029",
    "end": "2992030"
  },
  {
    "text": "wait on some variable until\nsome condition is true, and signal on that variable.",
    "start": "2992030",
    "end": "2999770"
  },
  {
    "text": "OK, so we're basically\nout of time now.",
    "start": "2999770",
    "end": "3005760"
  },
  {
    "text": "So what I want to\ndo is I'll come back and I'll finish going through\nthis example for the next time.",
    "start": "3005760",
    "end": "3010830"
  },
  {
    "text": "But what you should\ndo is think about, suppose you had these sequence\ncoordination operators. How could we sort of modify\nthese two while loops",
    "start": "3010830",
    "end": "3017446"
  },
  {
    "text": "that we have for these\ntwo operators in order to be able to take\nadvantage of the fact that in order to be\nable to make this",
    "start": "3017446",
    "end": "3023200"
  },
  {
    "text": "so we don't sit in this spin\nloop forever and execute. So that's it. Today we saw how to get these\nmultiple processes to run",
    "start": "3023200",
    "end": "3029510"
  },
  {
    "text": "on one computer. And next time we'll talk about\nsort making computer programs",
    "start": "3029510",
    "end": "3034600"
  },
  {
    "text": "run more efficiently,\ngetting good performance out of this sort of\narchitecture we've sketched.",
    "start": "3034600",
    "end": "3040490"
  },
  {
    "start": "3040490",
    "end": "3051635"
  }
]