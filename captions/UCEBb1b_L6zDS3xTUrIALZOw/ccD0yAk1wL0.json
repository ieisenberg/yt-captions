[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6050"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or to\nview additional materials",
    "start": "6050",
    "end": "12690"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "12690",
    "end": "25815"
  },
  {
    "text": "PROFESSOR: All right. So today we start a new\ntopic, but in the same spirit",
    "start": "25815",
    "end": "30840"
  },
  {
    "text": "of PSPACE completeness\nof puzzles. We're going to talk\nabout a general theory",
    "start": "30840",
    "end": "36690"
  },
  {
    "text": "called Constraint Logic. ",
    "start": "36690",
    "end": "42010"
  },
  {
    "text": "This was the topic\nof the Ph.D. thesis here by Bob Hearn, which later\nturned into this book-- Games,",
    "start": "42010",
    "end": "49199"
  },
  {
    "text": "Puzzles, and Computation. And constraint logic\nis a big theory. But today we're going to focus\non one particular aspect of it",
    "start": "49200",
    "end": "56450"
  },
  {
    "text": "called nondeterministic\nconstraint logic. Nondeterministic like NP. And that is specifically\nabout puzzles",
    "start": "56450",
    "end": "67690"
  },
  {
    "text": "and PSPACE completeness. So non-deterministic constraint\nlogic-- usually called NCL.",
    "start": "67690",
    "end": "75110"
  },
  {
    "text": "And it's a very\nuseful infrastructure for proving PSPACE\nhardness results, for puzzles, originally\nmotivated by sliding blocks,",
    "start": "75110",
    "end": "83010"
  },
  {
    "text": "but we will get\nthere in a moment. You've seen it very\nbriefly in Lecture 1. I'm going to go through it\nagain more slowly and clearly",
    "start": "83010",
    "end": "90030"
  },
  {
    "text": "and define everything. And then we'll see lots of\nhardness proofs based on that.",
    "start": "90030",
    "end": "95660"
  },
  {
    "text": "So we start with the\nnotion of a machine. We won't use this term too much. But the idea is we start\nwith an undirected graph.",
    "start": "95660",
    "end": "103250"
  },
  {
    "text": "Think of this as a\nmodel of computation. So your computer is\nan undirected graph of red edges and blue edges.",
    "start": "103250",
    "end": "109390"
  },
  {
    "text": "Red edges have weight 1. Blue edges have weight 2. And then a configuration\nof that machine--",
    "start": "109390",
    "end": "118860"
  },
  {
    "text": "or a constraint\ngraph in total-- is an orientation of that graph.",
    "start": "118860",
    "end": "124460"
  },
  {
    "text": "So it's really a directed\ngraph with red and blue edges. And you have to satisfy the\nconstraint that at every node,",
    "start": "124460",
    "end": "130869"
  },
  {
    "text": "the total incoming weight\nshould be at least 2. So either at least one blue\nedge or at least two red edges.",
    "start": "130870",
    "end": "137580"
  },
  {
    "text": "So this should be a\nsatisfying assignment. This one has two red edges. This one has actually one blue\nedge and an additional red edge",
    "start": "137580",
    "end": "145519"
  },
  {
    "text": "coming in. But in general we have--\nso, a constraint graph.",
    "start": "145520",
    "end": "151055"
  },
  {
    "start": "151055",
    "end": "158900"
  },
  {
    "text": "It's going to be a directed\nred/blue graph satisfying,",
    "start": "158900",
    "end": "171390"
  },
  {
    "text": "I'll call it the\ninflow constraint,",
    "start": "171390",
    "end": "182660"
  },
  {
    "text": "that for every vertex, the\ntotal incoming weight is",
    "start": "182660",
    "end": "197790"
  },
  {
    "text": "greater than or equal to 2 where\nred is a 1 and a blue is a 2.",
    "start": "197790",
    "end": "205670"
  },
  {
    "text": " And then we're interested\nin reconfigurations",
    "start": "205670",
    "end": "213160"
  },
  {
    "text": "of constraint graphs by\nreversing one edge at a time.",
    "start": "213160",
    "end": "218300"
  },
  {
    "text": "So let's look at a vertex here. This guy has total incoming\nweight of three-- one",
    "start": "218300",
    "end": "224510"
  },
  {
    "text": "from the red, two from the blue. And a move we're\nallowed to do is",
    "start": "224510",
    "end": "230000"
  },
  {
    "text": "say, reverse an edge like this. So now we have a total\nincoming weight of 4. 4 is also greater\nthan or equal to 2.",
    "start": "230000",
    "end": "236470"
  },
  {
    "text": "So that's a valid move. Now we could also\nreverse this edge. We couldn't before. If we had done it\nin the beginning,",
    "start": "236470",
    "end": "242750"
  },
  {
    "text": "there would only be a\nweight of 1 coming in. But now that we have these\ntwo units of weight coming in, we can redirect this--\nat least local to this",
    "start": "242750",
    "end": "249764"
  },
  {
    "text": "vertex-- we can\nredirect this guy. It'll only make\nthis vertex happier. The validity of this\nmove depended on what",
    "start": "249764",
    "end": "255790"
  },
  {
    "text": "that vertex looked like. So in general, we start\nwith some constraint graph.",
    "start": "255790",
    "end": "260987"
  },
  {
    "text": "We're going to do a\nsequence of moves. At all times we should\nhave a valid constraint graph, meaning you satisfy\nthe inflow constraint.",
    "start": "260987",
    "end": "267289"
  },
  {
    "text": " So those are the\nrules of the game.",
    "start": "267290",
    "end": "272790"
  },
  {
    "text": "And at each move, or\nat each time step, you can make any\nvalid move you want.",
    "start": "272790",
    "end": "277880"
  },
  {
    "text": "That's the\nnondeterministic aspect. And that mimics most puzzles. You're not told\nwhich move to do.",
    "start": "277880",
    "end": "283870"
  },
  {
    "text": "You get to choose\nwhich move to do. Guess which move\nto do, if you like. So the NCL problem\nis, I give you",
    "start": "283870",
    "end": "290920"
  },
  {
    "text": "some crazy network like this. And I want to know, can I\nreverse a particular edge?",
    "start": "290920",
    "end": "295984"
  },
  {
    "text": "That's one version\nof the problem. There are actually two decision\nproblems we can think about.",
    "start": "295984",
    "end": "301360"
  },
  {
    "text": "That one is the most useful. Or most common, I should say. ",
    "start": "301360",
    "end": "314090"
  },
  {
    "text": "Can you reverse a specified\nedge given the constraint graph? ",
    "start": "314090",
    "end": "323250"
  },
  {
    "text": "Meaning is there a\nsequence of moves-- and the last move is\nreversing the target edge.",
    "start": "323250",
    "end": "329750"
  },
  {
    "text": "Another problem\nwould be, can you reach a desired other\nconstraint graph?",
    "start": "329750",
    "end": "335460"
  },
  {
    "start": "335460",
    "end": "340690"
  },
  {
    "text": "So I give you an\nentire configuration and another orientation of\nthe graph that's consistent.",
    "start": "340690",
    "end": "347479"
  },
  {
    "text": "And to in some sense, that\ngives you more information. I don't just say I\nwant to flip this edge.",
    "start": "347480",
    "end": "354315"
  },
  {
    "text": "It will actually be, I\nwant to flip this edge and no other edges is going\nto be the typical setup. But in general, I give you\none configuration and another.",
    "start": "354315",
    "end": "361789"
  },
  {
    "text": "And I want to know, can I get\nfrom here to here by a sequence of single-edge reversals. Yeah.",
    "start": "361790",
    "end": "366930"
  },
  {
    "text": "AUDIENCE: Does the graph\n[INAUDIBLE] degree 3? PROFESSOR: It will\nalways be max degree 3.",
    "start": "366930",
    "end": "372970"
  },
  {
    "text": "So you can assume that. In fact, we will show\nboth of these problems are PSPACE complete for\nthree regular graphs.",
    "start": "372970",
    "end": "384336"
  },
  {
    "text": "Although what I've drawn\nhere is not three regular. It has some vertices\nin degree 1. You can actually\nassume max degree 3.",
    "start": "384336",
    "end": "392210"
  },
  {
    "text": "And you can assume\nthat there are only two types of\nvertices-- and those",
    "start": "392210",
    "end": "397520"
  },
  {
    "text": "are red, red, blue\nand blue, blue, blue.",
    "start": "397520",
    "end": "402982"
  },
  {
    "text": " So even just for these\ntwo types of vertices,",
    "start": "402982",
    "end": "408509"
  },
  {
    "text": "both of these problems\nare PSPACE complete. Yeah. AUDIENCE: Do degree\n1 vertices also",
    "start": "408510",
    "end": "413821"
  },
  {
    "text": "have to satisfy the\ninflow constraint? ",
    "start": "413821",
    "end": "419144"
  },
  {
    "text": "PROFESSOR: Yeah. This would not be valid. We'll show how to\nsimulate degree 1 vertices",
    "start": "419144",
    "end": "424650"
  },
  {
    "text": "with or without the\ninflow constraint. Yeah. AUDIENCE: Is the\nproblem given the graph, find a valid configuration?",
    "start": "424650",
    "end": "431397"
  },
  {
    "text": "PROFESSOR: That's a\ndifferent problem. Given an undirected graph,\nfind a valid configuration. That problem is NP complete.",
    "start": "431397",
    "end": "437360"
  },
  {
    "text": "We'll also prove that. That's called constraint\ngraph satisfiability.",
    "start": "437360",
    "end": "442710"
  },
  {
    "text": "So that's an analog of SAT. ",
    "start": "442710",
    "end": "455610"
  },
  {
    "text": "So this is, given\nundirected red/blue graph,",
    "start": "455610",
    "end": "467360"
  },
  {
    "text": "find a valid orientation. So that's a good question. ",
    "start": "467360",
    "end": "474860"
  },
  {
    "text": "At present, there aren't very\nmany NP hardness reductions that use this problem. But I think maybe\nthere should be more.",
    "start": "474860",
    "end": "480490"
  },
  {
    "text": "It's a need.  This was not our original\ngoal with constraint logic.",
    "start": "480490",
    "end": "487270"
  },
  {
    "text": "So we sort of forgot\nabout it until recently. We thought it would\nbe cool to do more. AUDIENCE: So the\nseparation suggests",
    "start": "487270",
    "end": "493590"
  },
  {
    "text": "that you can't get from\nany valid configuration to any other valid\nconfiguration? PROFESSOR: Right. So in particular, for\nlots of different pairs",
    "start": "493590",
    "end": "501370"
  },
  {
    "text": "of configurations\nof the same graph, you cannot find a path\nfrom one to the other. And deciding whether you\ncan is PSPACE complete.",
    "start": "501370",
    "end": "508177"
  },
  {
    "text": "I mean, that implies there\nare lots of no answers. AUDIENCE: So what\nprevents you from being able to do it intuitively?",
    "start": "508177",
    "end": "515620"
  },
  {
    "text": "PROFESSOR: Hopefully it will\nbecome more and more obvious. I don't have a great\nintuition why it's",
    "start": "515620",
    "end": "521110"
  },
  {
    "text": "hard, other than it's hard. I mean, you tend to get\nnice path connectivity",
    "start": "521110",
    "end": "529090"
  },
  {
    "text": "in continuous spaces. This is a very discrete space. And there's a lot\nof hard constraints",
    "start": "529090",
    "end": "534720"
  },
  {
    "text": "that's like rough intuition. AUDIENCE: You'll probably\nget into this later, but can you give us some\nbrief motivation of why",
    "start": "534720",
    "end": "541029"
  },
  {
    "text": "we care about this problem? PROFESSOR: The\nmotivation is a lot of puzzles can easily simulate\nthese kinds of pictures.",
    "start": "541030",
    "end": "549029"
  },
  {
    "text": "And in particular, you\nbasically need two gadgets. And we'll also prove that this\nis hard for planar graphs.",
    "start": "549030",
    "end": "557990"
  },
  {
    "text": "So you don't even\nneed a crossover. For planar red/blue graphs,\nwith just these two types of vertices, the whole\nproblem is PSPACE complete.",
    "start": "557990",
    "end": "564740"
  },
  {
    "text": "So the ultimate\nmotivation is to prove your problem PSPACE complete. If it falls into the\ncategory of games like this,",
    "start": "564740",
    "end": "571577"
  },
  {
    "text": "you just need two gadgets. And you get a proof\nby two pictures. So that will lead to some very\nefficient PSPACE completeness",
    "start": "571577",
    "end": "579470"
  },
  {
    "text": "proofs. Of course, to get there we first\nneed to prove this theorem. And I'm going to do\nthat first so you",
    "start": "579470",
    "end": "585340"
  },
  {
    "text": "see where all this\ncomes from, so you don't have to understand it. I think it's helpful in case\nyou want to generalize it.",
    "start": "585340",
    "end": "592150"
  },
  {
    "text": "OK. So let me tell you about\nthese two types of vertices. This one is called\nan AND vertex.",
    "start": "592150",
    "end": "602150"
  },
  {
    "text": "And this one is\ncalled an OR vertex. ",
    "start": "602150",
    "end": "607330"
  },
  {
    "text": "Because if we think of the\ntwo red edges as inputs,",
    "start": "607330",
    "end": "614130"
  },
  {
    "text": "and think of the\nblue edge as output,",
    "start": "614130",
    "end": "619219"
  },
  {
    "text": "this picture is\nsupposed to represent that 1 and 1 equals 1. And this picture is supposed to\nrepresent that 0 or 0 equals 0.",
    "start": "619219",
    "end": "627940"
  },
  {
    "text": "And if we do some more moves,\nlike if I flip this edge, now I have total\nincoming weight of 3.",
    "start": "627940",
    "end": "633810"
  },
  {
    "text": "That's still not enough\nto flip this edge, because 0 and 1 is 0 still.",
    "start": "633810",
    "end": "640610"
  },
  {
    "text": "And I could flip it back. Maybe I flip the other edge. Also 1 and 0 is 0.",
    "start": "640610",
    "end": "646620"
  },
  {
    "text": "Still can't flip this guy. But if I flip both of them up\ntop, if both of the red guys are incoming, then I can if I\nwant to flip the bottom edge.",
    "start": "646620",
    "end": "658580"
  },
  {
    "text": "But I don't have to right away. So I could go from here to here. But this is sort\nof a slow AND gate.",
    "start": "658580",
    "end": "665339"
  },
  {
    "text": "I put in the two 1 inputs. I don't yet have a 1\noutput, so to speak, where 1 here is\nrepresented by 2.",
    "start": "665340",
    "end": "671910"
  },
  {
    "text": "You get the idea. OK. So let me write\ndown the definition",
    "start": "671910",
    "end": "678240"
  },
  {
    "text": "to make that slightly cleaner. ",
    "start": "678240",
    "end": "683550"
  },
  {
    "text": "So I'm going to define\nthe activation of an edge, or an edge being activated. ",
    "start": "683550",
    "end": "695622"
  },
  {
    "text": "An input edge is going to\nbe active if it's incoming. ",
    "start": "695622",
    "end": "703790"
  },
  {
    "text": "And an output edge is\nactive if it's outgoing.",
    "start": "703790",
    "end": "711839"
  },
  {
    "text": " This is a symmetric. Incoming and outgoing\nalways clear.",
    "start": "711840",
    "end": "718900"
  },
  {
    "text": "Either you're going\ninto the vertex, or you're going\nout of the vertex. But just by labeling\nthese inputs,",
    "start": "718900",
    "end": "723910"
  },
  {
    "text": "I'm going to say these edges are\nsort of interesting if they're pointing in. This edge is interesting\nif it's pointing out.",
    "start": "723910",
    "end": "730100"
  },
  {
    "text": "These correspond to the one\nbits in a Boolean logic. And what we say for an AND\ngate-- property of an AND",
    "start": "730100",
    "end": "738260"
  },
  {
    "text": "gate-- is that the\noutput can activate--",
    "start": "738260",
    "end": "744150"
  },
  {
    "text": "doesn't have to-- only if\nboth inputs are active.",
    "start": "744150",
    "end": "751400"
  },
  {
    "text": " So in this language you can\nsee that it's an AND gate.",
    "start": "751400",
    "end": "760400"
  },
  {
    "text": "You need both of the inputs. The AND of the input should be\nactive in order for the output to activate.",
    "start": "760400",
    "end": "767330"
  },
  {
    "text": "And so that's why we do\nthis asymmetric thing. Another reason to do this\nasymmetric view of inputs",
    "start": "767330",
    "end": "772500"
  },
  {
    "text": "and outputs is if\nyou have two vertices and an edge between them. ",
    "start": "772500",
    "end": "782060"
  },
  {
    "text": "It was asymmetric to\nbegin with, right? This edge from this guy's\nperspective is outgoing. From this guy's\nperspective, it's incoming.",
    "start": "782060",
    "end": "788412"
  },
  {
    "text": "That's annoying to deal with. I want the edge to\neither be active or not. And if this is the output\nedge of this vertex,",
    "start": "788412",
    "end": "795750"
  },
  {
    "text": "and it's the input\nof this vertex, than this edge is active.",
    "start": "795750",
    "end": "802670"
  },
  {
    "text": "And the other direction\nwould be inactive. OK. But it's active from\nthis guy's perspective. And it's active from\nthis guy's perspective.",
    "start": "802670",
    "end": "808899"
  },
  {
    "text": "So while this may\nseem asymmetric, it actually makes the\npicture more symmetric. Yeah. AUDIENCE: Can't have a red\nedge being the output, though.",
    "start": "808900",
    "end": "815507"
  },
  {
    "text": "Right? PROFESSOR: That's true. With these gadgets we never\nhave a red edge being output. Imagine red being blue.",
    "start": "815507",
    "end": "821720"
  },
  {
    "text": " OK.",
    "start": "821720",
    "end": "826780"
  },
  {
    "text": "So that is active. And AND, you have sort\nof delayed outputs.",
    "start": "826780",
    "end": "837860"
  },
  {
    "text": "You can think of\nthis same vertex if you relabel these\nguys as outputs, and this guy as an input.",
    "start": "837860",
    "end": "844540"
  },
  {
    "text": "It's just a perspective change. It's just changing terminology. So it doesn't actually\nchange what happens.",
    "start": "844540",
    "end": "849629"
  },
  {
    "text": "But from this perspective. You essentially are splitting,\nor fanning out, a wire. So if you have a\nsignal here of true--",
    "start": "849630",
    "end": "857750"
  },
  {
    "text": "so this is an active input\nnow-- that both of these can be active if\nthey want to be. They don't have to be.",
    "start": "857750",
    "end": "863610"
  },
  {
    "text": "But if it's false, then both\nof these have to be inactive. This is inactive. Both of these have\nto be inactive.",
    "start": "863610",
    "end": "870089"
  },
  {
    "text": "And there are lots of\nconfigurations of this guy. So maybe some of them point in.",
    "start": "870090",
    "end": "876450"
  },
  {
    "text": "So the split. That's the same vertex that's\na relabeling of who's active and who's inactive.",
    "start": "876450",
    "end": "882150"
  },
  {
    "text": " The outputs can activate\nonly if the input is active.",
    "start": "882150",
    "end": "902350"
  },
  {
    "text": "And really, I should be\nsaying if and only if. But I'm being a\nlittle concise here.",
    "start": "902350",
    "end": "910171"
  },
  {
    "text": "OK. So that's a SPLIT vertex. And then the other\nvertex type is an OR. So this is really the second\nvertex type out of three.",
    "start": "910171",
    "end": "919230"
  },
  {
    "text": "Third out of three. Whatever. So this of course\nlooks very symmetric. I mean, there's no clear notion\nof inputs or outputs here.",
    "start": "919230",
    "end": "926990"
  },
  {
    "text": "But if you define two\nof them to be inputs, and the other one\nto be an output, then that output is the\nOR of those two inputs.",
    "start": "926990",
    "end": "933620"
  },
  {
    "text": "This edge can activate only\nif this edge is active, or this edge is active, or both.",
    "start": "933620",
    "end": "939890"
  },
  {
    "text": "So it's an inclusive OR. Probably have some animations. Like if I flip this\nguy, now this one",
    "start": "939890",
    "end": "946740"
  },
  {
    "text": "can choose to activate. I could also have both of them\nin, or just one of them in.",
    "start": "946740",
    "end": "952800"
  },
  {
    "text": "But in order for this one to\nnow go back out and deactivate, this when would first\nhave to deactivate.",
    "start": "952800",
    "end": "957850"
  },
  {
    "text": " So that's ANDs and ORs.",
    "start": "957850",
    "end": "964050"
  },
  {
    "text": "You get some sense for why\nthis is a Boolean logic. One point to make at this\npoint is that I do not",
    "start": "964050",
    "end": "971220"
  },
  {
    "text": "have a NOT gadget. And in fact, NOT gadgets are\nimpossible in this universe.",
    "start": "971220",
    "end": "978730"
  },
  {
    "text": "Because we're always talking\nabout outputs can activate, but they don't have to, it's up\nto the non-deterministic player",
    "start": "978730",
    "end": "986540"
  },
  {
    "text": "to choose whether to activate\nan output, or when to do it,",
    "start": "986540",
    "end": "991820"
  },
  {
    "text": "NOT is impossible. Because a NOT would\nbe something like,",
    "start": "991820",
    "end": "997860"
  },
  {
    "text": "this edge cannot activate if\nthis other edge is active.",
    "start": "997860",
    "end": "1003810"
  },
  {
    "text": "This output cannot activate\nif this input is active. That would be the idea.",
    "start": "1003810",
    "end": "1011225"
  },
  {
    "text": " Maybe output is inactive\nif the input is active.",
    "start": "1011225",
    "end": "1020155"
  },
  {
    "text": " And that kind of constraint\nis impossible to represent",
    "start": "1020155",
    "end": "1026270"
  },
  {
    "text": "with a lower bound\non incoming weight. Maybe if you had an upper\nbound, you could do it. But with a lower\nbound, you're always",
    "start": "1026270",
    "end": "1032259"
  },
  {
    "text": "happier to have inputs active.  So if it worked with\nthe input inactive",
    "start": "1032260",
    "end": "1040040"
  },
  {
    "text": "that the output could\nactivate, then it should also work with\nthe input active.",
    "start": "1040040",
    "end": "1046130"
  },
  {
    "text": "NOT gates are impossible.  So that's a little\nbit annoying, but it",
    "start": "1046130",
    "end": "1051340"
  },
  {
    "text": "won't be too much trouble. We've in some sense dealt\nwith that in other proofs.",
    "start": "1051340",
    "end": "1056429"
  },
  {
    "text": "Before I get to these\nhardness results, let me tell you a\nfew other vertices",
    "start": "1056430",
    "end": "1062270"
  },
  {
    "text": "that are helpful, and can be\nsimulated with ANDs and ORs. So one of them is\na choice vertex.",
    "start": "1062270",
    "end": "1071520"
  },
  {
    "text": "This is sort of like an\nexclusive OR, in a sense. So two of these edges\nmust be incoming--",
    "start": "1071520",
    "end": "1079100"
  },
  {
    "text": "in the symmetric picture--\ntwo of them must be incoming. At most, one of them\ncan be outgoing.",
    "start": "1079100",
    "end": "1085270"
  },
  {
    "text": "And this can be simulated\nby expanding this into a little triangle.",
    "start": "1085270",
    "end": "1090910"
  },
  {
    "text": "So if this guy is outgoing,\nthen both of these must be pointing to it.",
    "start": "1090910",
    "end": "1098470"
  },
  {
    "text": "And once both of these\nare pointing out, then the blues must\nbe pointing in here,",
    "start": "1098470",
    "end": "1103589"
  },
  {
    "text": "because the red would\nnot be enough to make either of these vertices happy. If this guy's making\nthat guy happy.",
    "start": "1103589",
    "end": "1109539"
  },
  {
    "text": "So if one of them is out,\nthe other two must be in. We'll see how to use\nthis in a second. But it's useful to have\nred, red, red in addition",
    "start": "1109540",
    "end": "1116909"
  },
  {
    "text": "to red, red, blue;\nand blue, blue, blue. OK.",
    "start": "1116910",
    "end": "1122360"
  },
  {
    "text": "Now one issue that arises here,\nas you're probably guessing, especially when I did this kind\nof transformation where I said,",
    "start": "1122360",
    "end": "1129350"
  },
  {
    "text": "oh, three red vertices. That's just like this picture,\nexcept these are now blue. That's not going to work\nso well from whatever",
    "start": "1129350",
    "end": "1136210"
  },
  {
    "text": "they're attached to. Now luckily, we\ncan deal with this.",
    "start": "1136210",
    "end": "1142430"
  },
  {
    "text": "The more direct\nversion is if we're trying to build some Boolean\nformula like an AND of ORs,",
    "start": "1142430",
    "end": "1147730"
  },
  {
    "text": "the inputs are in the bottom. Because these are the\ninputs to the AND. The AND wants its\ninput to be red.",
    "start": "1147730",
    "end": "1154150"
  },
  {
    "text": "But the OR is providing\nan output which is blue. How come we convert a\nred edge to a blue edge?",
    "start": "1154150",
    "end": "1159419"
  },
  {
    "text": "Luckily, we can do it. As long as we have\nan even number of red to blue\nconversions, we can",
    "start": "1159420",
    "end": "1165539"
  },
  {
    "text": "fill in this gadget in\nbetween, and it works. So basically this is in\na forced configuration.",
    "start": "1165540",
    "end": "1174820"
  },
  {
    "text": "I think it can't change at all. ",
    "start": "1174820",
    "end": "1181080"
  },
  {
    "text": "At least from this\nposition, it can't change. ",
    "start": "1181080",
    "end": "1186950"
  },
  {
    "text": "What we need at this stage is\nthat these guys can point out-- both of them. So you always get a\nweight boost of one",
    "start": "1186950",
    "end": "1193834"
  },
  {
    "text": "from both of these vertices. And so now if this\nguy's pointing in, that's a total weight of 2. And so then this\nguy can point out.",
    "start": "1193834",
    "end": "1199810"
  },
  {
    "text": "Of course, as this\nguy is pointing in, this guy can point out. And it's symmetric\non the two sides.",
    "start": "1199810",
    "end": "1205760"
  },
  {
    "text": "So maybe you do try to\nmess with this gadget. Although I don't think you can. What we need is that you are\nallowed to leave it like this,",
    "start": "1205760",
    "end": "1212639"
  },
  {
    "text": "and you get a bonus point\nfor each of those vertices, and all is well. And we'll see later how to make\nan even number of conversions.",
    "start": "1212640",
    "end": "1220230"
  },
  {
    "text": "Now one thing I should maybe\nmention at this point also-- this is sort of a\ntechnical detail--",
    "start": "1220230",
    "end": "1225480"
  },
  {
    "text": "but if you used to think of\nthis as a single edge, when I reversed it-- let's say\nit was pointing up before,",
    "start": "1225480",
    "end": "1233230"
  },
  {
    "text": "and I make it point\ndown-- this vertex will see that\neffect immediately.",
    "start": "1233230",
    "end": "1238690"
  },
  {
    "text": "This vertex doesn't see it yet. So it's kind of an even\nmore delayed reaction.",
    "start": "1238690",
    "end": "1244160"
  },
  {
    "text": "Because we subdivided\nan edge into two parts, we can flip one side without\nhaving flipped the other side.",
    "start": "1244160",
    "end": "1250040"
  },
  {
    "text": "The way I would view this is in\nthe original constraint logic graph, we used to have\nan edge pointing up.",
    "start": "1250040",
    "end": "1256560"
  },
  {
    "text": "We change it into\nan undirected edge. It has no orientation because\nit doesn't benefit either side.",
    "start": "1256560",
    "end": "1262860"
  },
  {
    "text": "It's pointing away\nfrom both ends. And then we choose to\ndirect it the other way.",
    "start": "1262860",
    "end": "1268760"
  },
  {
    "text": "So this is an alternative view\nof a move in a constraint graph that used to be you're\nreversing an edge.",
    "start": "1268760",
    "end": "1275360"
  },
  {
    "text": "Another view is that you\ncan change a directed edge into an undirected edge. And you can change an undirected\nedge into a directed edge.",
    "start": "1275360",
    "end": "1281818"
  },
  {
    "text": "So these models are\nalmost identical. In fact, you can prove they're\nexactly the same power.",
    "start": "1281818",
    "end": "1287190"
  },
  {
    "text": "And they're called\nasynchronous constraint logic. ",
    "start": "1287190",
    "end": "1308770"
  },
  {
    "text": "So if you were worried about\nthat, you don't need to worry. I won't prove here that\nthey're identical power, but it's not hard.",
    "start": "1308770",
    "end": "1314050"
  },
  {
    "text": "Yeah. AUDIENCE: What was the thing\nwhere [INAUDIBLE] that you can't flip those colors?  Cause you can flip\nthe colors, right?",
    "start": "1314050",
    "end": "1320581"
  },
  {
    "text": "But you can flip\nthe two red arrows AUDIENCE: In. AUDIENCE: Inwards. And then you can flip the\nblue to cover the top node.",
    "start": "1320581",
    "end": "1326809"
  },
  {
    "text": "AUDIENCE: Basically\nflip all of them. AUDIENCE: So the thing-- [INTERPOSING VOICES] AUDIENCE: And the\nbest you can do is--",
    "start": "1326809",
    "end": "1332850"
  },
  {
    "text": "PROFESSOR: You can't put\nflip these red guys yet. Are you going to flip\nthis blue guy first? But how?",
    "start": "1332850",
    "end": "1337940"
  },
  {
    "text": "AUDIENCE: Well, you\ncan't do anything first. PROFESSOR: Yeah. Nothing can happen first. There is another configuration. But from here, I\nthink it's rigid.",
    "start": "1337940",
    "end": "1344269"
  },
  {
    "text": "AUDIENCE: Oh. PROFESSOR: There's\nnothing that can change. You can't flip this guy because\nthis guy would be unhappy.",
    "start": "1344269",
    "end": "1349840"
  },
  {
    "text": "Therefore, you\ncan't flip this guy. Therefore, you can't\nflip these guys. Therefore, you\ncan't flip this guy.",
    "start": "1349840",
    "end": "1357757"
  },
  {
    "text": "So I think you get a cycle,\nand nothing can happen first.",
    "start": "1357758",
    "end": "1363100"
  },
  {
    "text": "But we don't need that here. We will need it later. That's why I wanted to mention.",
    "start": "1363100",
    "end": "1368141"
  },
  {
    "text": "OK. So we can convert reds to blues. So now we can chain\nthings together and build a CNF formula.",
    "start": "1368141",
    "end": "1374210"
  },
  {
    "text": "As long as we\nrepresent-- so here we're going to use a choice\ngadget to say-- so right now,",
    "start": "1374210",
    "end": "1379850"
  },
  {
    "text": "nothing is activated. Our goal is to\nactivate that edge at the top that's\ngoing to represent that Boolean formula, the\nsatisfiability of that Boolean",
    "start": "1379850",
    "end": "1387860"
  },
  {
    "text": "formula. We use a choice gadget to say,\nlook, either W can activate, or Wbar can activate.",
    "start": "1387860",
    "end": "1394600"
  },
  {
    "text": "We need some notion of negation. And this is how\nwe're going to get our negation, which is normally\ncalled dual real logic. You have one\nchannel representing",
    "start": "1394600",
    "end": "1401650"
  },
  {
    "text": "X, one representing Xbar. We have this extra\nstraggler, which we basically don't care about.",
    "start": "1401650",
    "end": "1406970"
  },
  {
    "text": "Right now it is taking\nthe weight somewhere. But you can push it up. If we plug-in a suitable\nterminator down there,",
    "start": "1406970",
    "end": "1415320"
  },
  {
    "text": "which we'll need to talk about. But then, other than\nred/blue conversions, then we are basically\ndoing an OR.",
    "start": "1415320",
    "end": "1422880"
  },
  {
    "text": "We have to do an\nOR of three things, and we only have degree 3. So we do an OR of two things. That gives this output.",
    "start": "1422880",
    "end": "1428010"
  },
  {
    "text": "Then we take an OR\nof the other thing. So now this output is\nthe OR of three things. We convert it into a red edge.",
    "start": "1428010",
    "end": "1433830"
  },
  {
    "text": "This is a reference to\nthe gadget we just saw. And then we can\ntake an AND, here we're taking an AND\nof three things.",
    "start": "1433830",
    "end": "1439900"
  },
  {
    "text": "In general, it would be\nan AND of end things. We build a binary\ntree of those ANDs. And so that edge can\nreverse if and only",
    "start": "1439900",
    "end": "1446509"
  },
  {
    "text": "if that formula is satisfiable.  Assuming we know what to\ndo with degree 1 vertices.",
    "start": "1446510",
    "end": "1454610"
  },
  {
    "text": "So this represents CNF. Let me tell you what to\ndo with degree 1 vertices. Here are three\ndifferent gadgets,",
    "start": "1454610",
    "end": "1461630"
  },
  {
    "text": "depending on what\nyou want to do. On the one hand, this is an\nunconstrained blue terminator.",
    "start": "1461630",
    "end": "1468090"
  },
  {
    "text": "All the vertices are\nhappy even locally. And so this edge\ncan go up or down.",
    "start": "1468090",
    "end": "1474800"
  },
  {
    "text": "I think that's pretty clear. This guy already has\ntwo incoming edges. Everybody has at least one.",
    "start": "1474800",
    "end": "1480890"
  },
  {
    "text": "And the point here is\nit's three regular. So this is actually\na kind of classic way to make a three regular graph\nout of a degree 1 vertex.",
    "start": "1480890",
    "end": "1489370"
  },
  {
    "text": "On the other hand, we can\ndo the same thing with red. And actually, the reason I\nwanted two incoming edges here",
    "start": "1489370",
    "end": "1494930"
  },
  {
    "text": "is when I recolor\nthem red, that still makes this vertex satisfied. So this guy can go up or down. Now you might say why do I\ncare about a blue terminator",
    "start": "1494930",
    "end": "1501970"
  },
  {
    "text": "separate from a red\nterminator, because I already have red to blue conversion. Because red/blue\nconversion-- assume",
    "start": "1501970",
    "end": "1507960"
  },
  {
    "text": "that the number of red/blue\nconversions was even. And this is how I'm\ngoing to make it even. If it's not even, I'll take\nany of my degree 1 vertices",
    "start": "1507960",
    "end": "1517100"
  },
  {
    "text": "and add an extra red/blue\nconversion there. Now it will be even,\nbecause it was odd before.",
    "start": "1517100",
    "end": "1522490"
  },
  {
    "text": "But I need either a\nred or blue terminator, whatever I didn't have before. So this is where we'll get that.",
    "start": "1522490",
    "end": "1528520"
  },
  {
    "text": "And it's easy to do. In the middle we have\na different thing. This forces this edge\nto be pointed down.",
    "start": "1528520",
    "end": "1536299"
  },
  {
    "text": "That's useful in some\nscenarios for example.",
    "start": "1536300",
    "end": "1543620"
  },
  {
    "text": "So back to this picture. One thing I've done is we\nhave these floating edges that we want to throw away.",
    "start": "1543620",
    "end": "1550390"
  },
  {
    "text": "We can just use a red terminator\nunconstrained for that. So that guy can do\nwhatever he wants. That still lets you choose\nW or Wbar to be true.",
    "start": "1550390",
    "end": "1559040"
  },
  {
    "text": "If I shrink this picture a\nlittle bit more and put here, this is I guess a\nfree terminator.",
    "start": "1559040",
    "end": "1568740"
  },
  {
    "text": "I don't care whether\nthis guy's used also. But I would really like\nthis edge to be directed up.",
    "start": "1568740",
    "end": "1574480"
  },
  {
    "text": " This is, of course,\nlocally invalid. You have to put in a satisfying\nassignment to make this go up.",
    "start": "1574480",
    "end": "1583180"
  },
  {
    "text": "So this is how we can\nprove that constraint graph satisfiability, finding an\norientation is NP complete",
    "start": "1583180",
    "end": "1591540"
  },
  {
    "text": "if we use that\nterminator on the top. In the undirected\nform, this thing",
    "start": "1591540",
    "end": "1597630"
  },
  {
    "text": "will force this\nedge to be up, which means it will force this\nthing to be satisfied, or there won't be a\nvalid orientation,",
    "start": "1597630",
    "end": "1604555"
  },
  {
    "text": "which means there's\nno satisfying assignment to that formula. So that's one way you\ncould use the terminators. We'll use them in other ways.",
    "start": "1604555",
    "end": "1610578"
  },
  {
    "text": "AUDIENCE: Can we just use a\n[INAUDIBLE] red terminator instead of the red-- to\ndo a red [INAUDIBLE],",
    "start": "1610578",
    "end": "1616958"
  },
  {
    "text": "instead of the slightly more\ncomplicated thing we actually did? AUDIENCE: [INAUDIBLE]\nred terminator has a vertex with\nthree red edges.",
    "start": "1616958",
    "end": "1624785"
  },
  {
    "text": "PROFESSOR: That's OK.  But maybe that's relevant.",
    "start": "1624785",
    "end": "1630760"
  },
  {
    "text": "So this is going\nto expand to this.",
    "start": "1630760",
    "end": "1636710"
  },
  {
    "text": "And that requires a\nred/blue conversion. There we go. That's why. So we're actually already\nusing a red/blue conversion",
    "start": "1636710",
    "end": "1644525"
  },
  {
    "text": "of this style in here.",
    "start": "1644525",
    "end": "1652000"
  },
  {
    "text": "All right. Let's move on to more\ninteresting things. So that was constraint graph\nsatisfactions NP complete.",
    "start": "1652000",
    "end": "1659540"
  },
  {
    "text": "Let's go to the reconfiguration\nproblems being PSPACE complete. So now I want to do a sequence\nof moves and flip one edge,",
    "start": "1659540",
    "end": "1672050"
  },
  {
    "text": "or reach a desired\nconfiguration. We'll start with just\nflipping one edge.",
    "start": "1672050",
    "end": "1677080"
  },
  {
    "text": "We're going to follow the\nsame kind of prototype that we saw last class, with\n[? Viglietta's ?] Proof, where",
    "start": "1677080",
    "end": "1683220"
  },
  {
    "text": "we're going to reduce from QSAT. So we have this alternating\nset of quantifiers, variables.",
    "start": "1683220",
    "end": "1689970"
  },
  {
    "text": "And then we have\nsome Boolean formula. We'll assume it's in CNF\nform, because we just",
    "start": "1689970",
    "end": "1695070"
  },
  {
    "text": "showed how to do CNF formulas. And we're going to\nrepresent variables by two rails, x and x bar.",
    "start": "1695070",
    "end": "1702130"
  },
  {
    "text": "And these things are essentially\nnested inside each other, and there's some\nmagic mechanisms",
    "start": "1702130",
    "end": "1707950"
  },
  {
    "text": "to glue them together. So in particular, let's see.",
    "start": "1707950",
    "end": "1714110"
  },
  {
    "text": "At the end here, so\nsuppose these variables, the idea is that one of\nthem will be pointing up",
    "start": "1714110",
    "end": "1720101"
  },
  {
    "text": "and the other will\nbe pointing down. That corresponds\nto x being true. If y bar is pointing up\nand y is pointing down,",
    "start": "1720101",
    "end": "1726440"
  },
  {
    "text": "then y bar will be true. In other words, y will be false. So then this thing will\ndo its computation.",
    "start": "1726440",
    "end": "1732050"
  },
  {
    "text": "And then the output\nwire is this one. So we'll be pointing\nout of the CNF logic,",
    "start": "1732050",
    "end": "1737450"
  },
  {
    "text": "if and only if that formula\nwithout the quantifiers was satisfied. OK.",
    "start": "1737450",
    "end": "1742740"
  },
  {
    "text": "Now here we have an AND gate. And we have a signal from\nthis gadget saying basically,",
    "start": "1742740",
    "end": "1748590"
  },
  {
    "text": "all the variables are set. And here it's called try out. We'll see what that means.",
    "start": "1748590",
    "end": "1753850"
  },
  {
    "text": "Basically I want to check\nwhether this thing is true. And if the try out\nis pointing out,",
    "start": "1753850",
    "end": "1759299"
  },
  {
    "text": "and the satisfy thing\nis pointing out, then this guy can\npoint to the left.",
    "start": "1759300",
    "end": "1765880"
  },
  {
    "text": "And so that will\ntell this gadget that yes, it is satisfied. So when activated, and this\nthing has become satisfied,",
    "start": "1765880",
    "end": "1773950"
  },
  {
    "text": "then we will report\nback to that gadget. In general, each of the\nquantifier gadgets--",
    "start": "1773950",
    "end": "1779880"
  },
  {
    "text": "this is an existential one,\nthis is the universal one. Don't look at them in\ntoo much detail yet.",
    "start": "1779880",
    "end": "1784910"
  },
  {
    "text": "But there will be one input\nhere, which is a try in. And there'll be an output,\nwhich is a try out, to say,",
    "start": "1784910",
    "end": "1791770"
  },
  {
    "text": "when I'm told by the previous\ngadget to do something, I'll do something. Then I'll tell the next\ngadget to do something.",
    "start": "1791770",
    "end": "1797529"
  },
  {
    "text": "And if that gadget reports\nback with a positive answer, in this case, I just return\nthat positive answer back",
    "start": "1797530",
    "end": "1802620"
  },
  {
    "text": "to my caller. So this is the input\nand the output. And same thing for universal.",
    "start": "1802620",
    "end": "1807900"
  },
  {
    "text": "It's going to have a try in. It's going to\nactivate a try out. Then if it gets a satisfied\nend, stuff will happen.",
    "start": "1807900",
    "end": "1813140"
  },
  {
    "text": "And eventually we might\noutput a satisfied out. So these things are\nsupposed to just chain together left and right.",
    "start": "1813140",
    "end": "1818650"
  },
  {
    "text": "So let's look at each\ngadget individually, and in particular, you will\nsee this triangle pattern--",
    "start": "1818650",
    "end": "1824580"
  },
  {
    "text": "the blue, blue, red triangle--\nin a few different places. That's a useful\nconstruction by itself.",
    "start": "1824580",
    "end": "1830980"
  },
  {
    "text": "Let's think about that first. It's called a latch. It's like a one-bit memory.",
    "start": "1830980",
    "end": "1837930"
  },
  {
    "text": "Currently the latch is locked. When this edge out is\npointing to the left, then nothing over\nhere can change.",
    "start": "1837930",
    "end": "1847370"
  },
  {
    "text": "There are actually two\npossible states here. But if this is\npointing out, this guy",
    "start": "1847370",
    "end": "1852950"
  },
  {
    "text": "can't flip, which means\nthese two can't flip, which means this one can't flip.",
    "start": "1852950",
    "end": "1860179"
  },
  {
    "text": "OK. I guess this guy could reverse. But that's all. So this is in a state where\nA can output something,",
    "start": "1860180",
    "end": "1868410"
  },
  {
    "text": "but B cannot. Now I can flip it to the\nother symmetric state, where B can output\nsomething and A cannot.",
    "start": "1868410",
    "end": "1875190"
  },
  {
    "text": "But to do that, I first\nmust unlock the gadget, unlock the latch by\nflipping this edge.",
    "start": "1875190",
    "end": "1881050"
  },
  {
    "text": "If I can flip this edge,\nthen everything becomes free. Now I can flip this edge.",
    "start": "1881050",
    "end": "1886370"
  },
  {
    "text": "And then I can flip\nB actually now. Both A and B can output, which\nis kind of a weird state.",
    "start": "1886370",
    "end": "1891660"
  },
  {
    "text": "But in particular, I\ncan flip this edge. And then maybe put A back.",
    "start": "1891660",
    "end": "1898350"
  },
  {
    "text": "That will let me flip this guy. And now this guy's\nhappy from this edge.",
    "start": "1898350",
    "end": "1903789"
  },
  {
    "text": "And so I can relock the\ngadget if I want to. If I click hard enough.",
    "start": "1903790",
    "end": "1909470"
  },
  {
    "text": " So now we're back\nin a lock state. And now B can output.",
    "start": "1909470",
    "end": "1915049"
  },
  {
    "text": "It could choose to not output. But B can output. A cannot. So when the gadget\nis in a lock state,",
    "start": "1915050",
    "end": "1922340"
  },
  {
    "text": "we get at most one signal from\nA or B. And it can't change.",
    "start": "1922340",
    "end": "1927350"
  },
  {
    "text": "When we unlock, then we can do\ncrazy stuff, have both of them output, whatever. But then when we relock, we know\nthat only one of them is on.",
    "start": "1927350",
    "end": "1936060"
  },
  {
    "text": "And that's our one-bit memory. At this point, it's a\nnondeterministic memory. You can basically set it to\na nondeterministic value,",
    "start": "1936060",
    "end": "1941860"
  },
  {
    "text": "and then lock it down. OK. This is great for\nexistential quantifiers. That's basically all we need\nfor an existential quantifier.",
    "start": "1941860",
    "end": "1948620"
  },
  {
    "text": "When we're told do\nsomething, we're going to convert\nthat blue to a red. ",
    "start": "1948620",
    "end": "1960139"
  },
  {
    "text": "So right now this\nvertex is happy, because we haven't told the\nnext gadget to do anything. This edge is\npointed to the left.",
    "start": "1960140",
    "end": "1967790"
  },
  {
    "text": "So this thing can go up or\ndown, whatever it wants. So basically we are free\nto unlock this and set it",
    "start": "1967790",
    "end": "1973780"
  },
  {
    "text": "to either value. So where x is pointing out,\nor x bar is pointing out,",
    "start": "1973780",
    "end": "1978890"
  },
  {
    "text": "or neither. But the direction of\nthis edge will sort of keep track of which\nthing is being set.",
    "start": "1978890",
    "end": "1985030"
  },
  {
    "text": "Then the next thing can activate\nonly when this is pointing out, which means the latch is locked.",
    "start": "1985030",
    "end": "1991409"
  },
  {
    "text": "So when we activate\nthe next existential or universal quantifier,\nor the overall formula,",
    "start": "1991410",
    "end": "1998000"
  },
  {
    "text": "we know both that\nwe're told we're activated from the\nleft, which means all the variables\nto the left have",
    "start": "1998000",
    "end": "2003626"
  },
  {
    "text": "been locked into their state. And we know from this\nAND gate that this has been locked into its state.",
    "start": "2003626",
    "end": "2010820"
  },
  {
    "text": "So it has only x or x bar set. And then we can proceed. And for existential quantifier,\nthat's all you need.",
    "start": "2010820",
    "end": "2017340"
  },
  {
    "text": "That there's some\nvalue, some setting for x, that satisfies the rest. And so if you get satisfied\nfrom the rest of the formula,",
    "start": "2017340",
    "end": "2023780"
  },
  {
    "text": "you know you are satisfied. And so here we're using\nthe nondeterminism of the player to make the right\ncall whether to set x or x bar.",
    "start": "2023780",
    "end": "2033840"
  },
  {
    "text": "That's the easy case. The harder case is the\nuniversal quantifier. Here we actually\nuse two latches.",
    "start": "2033840",
    "end": "2041240"
  },
  {
    "text": "And there's a bunch of lines. ",
    "start": "2041240",
    "end": "2048110"
  },
  {
    "text": "So what's the idea? This is viewed as\na split gadget. So if we activate here,\nwe can do that only",
    "start": "2048110",
    "end": "2058440"
  },
  {
    "text": "with this pointing down. OK. Fine. And this points over. ",
    "start": "2058440",
    "end": "2068469"
  },
  {
    "text": "For the computation to\nproceed, to do a try out, we need that we are\nactive from the try in.",
    "start": "2068469",
    "end": "2075230"
  },
  {
    "text": "But also, this latch\nmust be locked. This is the locking\nmechanism of that latch.",
    "start": "2075230",
    "end": "2080530"
  },
  {
    "text": "So when both of\nthese are incoming, then we will call the\nrest of the construction.",
    "start": "2080530",
    "end": "2086070"
  },
  {
    "text": "Again, this is just setting\nx or x bar, just like before. But we're making\ncopies of x and x bar.",
    "start": "2086070",
    "end": "2091669"
  },
  {
    "text": "So this is a split gadget. If we have this set, we\ncan set both this copy",
    "start": "2091670",
    "end": "2096780"
  },
  {
    "text": "of x and this copy of x. If we have this one set, we\ncan set this copy of x bar and this copy of x bar.",
    "start": "2096780",
    "end": "2102440"
  },
  {
    "text": "So those are splits. OK. So now, what about this latch?",
    "start": "2102440",
    "end": "2109450"
  },
  {
    "text": "So this is the locking\nmechanism of that latch. And what we're saying\nis that if x bar is set,",
    "start": "2109450",
    "end": "2119820"
  },
  {
    "text": "and the formula is satisfied,\nthen we can unlock this latch",
    "start": "2119820",
    "end": "2128100"
  },
  {
    "text": "and set it to something. Now we will want to set\nit so that this edge is",
    "start": "2128100",
    "end": "2133510"
  },
  {
    "text": "pointing down. Initially this edge will\nprobably be pointing out.",
    "start": "2133510",
    "end": "2139740"
  },
  {
    "text": "It doesn't have to, though. So we don't really\ncare about this edge. It doesn't bias\nanything, this edge. Because we're going to have\na blue thing coming in,",
    "start": "2139740",
    "end": "2146590"
  },
  {
    "text": "so we don't really care\nwhich way this edge goes. We really want to set this edge. So if you're the\nnondeterministic player,",
    "start": "2146590",
    "end": "2152240"
  },
  {
    "text": "and suddenly this\nlatch is open, you will want to rearrange it\nso that it points down.",
    "start": "2152240",
    "end": "2159059"
  },
  {
    "text": "Why? Because we want to\nsatisfy this thing. And this is an AND of\nthis edge and that edge. So what this is saying is\nwe can turn this latch on,",
    "start": "2159060",
    "end": "2167200"
  },
  {
    "text": "meaning pointing down here, only\nif for the false setting of x,",
    "start": "2167200",
    "end": "2173030"
  },
  {
    "text": "we get a satisfied thing. Cause here again, we're\ntaking a satisfied thing and splitting it into two parts.",
    "start": "2173030",
    "end": "2178460"
  },
  {
    "text": "And so satisfied in is true. And x bar is true. Then we can activate this\nlatch and set to the new thing.",
    "start": "2178460",
    "end": "2186280"
  },
  {
    "text": "Now what do you do? Now we're going\nto lock the latch, and then roll back the\nentire computation.",
    "start": "2186280",
    "end": "2193849"
  },
  {
    "text": "Undo everything. In this world,\neverything's reversible. If you can reverse an edge,\nyou can also put it back.",
    "start": "2193850",
    "end": "2199071"
  },
  {
    "text": "OK. So now unwind everything. Come back to this place and\nunlock this latch again.",
    "start": "2199071",
    "end": "2206599"
  },
  {
    "text": "And now set x to true\ninstead of false. ",
    "start": "2206600",
    "end": "2212710"
  },
  {
    "text": "And then once this is\nlocked in the true state, we can again activate tryout. And now we're going to\ncome back through here.",
    "start": "2212710",
    "end": "2219120"
  },
  {
    "text": "We don't care about this latch. We're now going to\nuse this vertex. This is the AND of being\nsatisfied and having",
    "start": "2219120",
    "end": "2224580"
  },
  {
    "text": "x being true. So if we're satisfied\nwith x true, then this edge will be\npointing to the left.",
    "start": "2224580",
    "end": "2230359"
  },
  {
    "text": "And if we already\nremembered the fact that when we set x to\nfalse, we also got true,",
    "start": "2230360",
    "end": "2235940"
  },
  {
    "text": "then this AND will be true. And then we can output that. OK? So this is why you don't want to\nreduce from QSAT all the time.",
    "start": "2235940",
    "end": "2243636"
  },
  {
    "text": "There are these annoying\ngadgets you have to build. But now once you\nhave this, we just need to build ANDs and\nORs, which is much easier.",
    "start": "2243636",
    "end": "2249938"
  },
  {
    "text": "AUDIENCE: If we\nhave nondeterminism, do we ever have to\nroll back things? Can't we just set\nit to the right one?",
    "start": "2249938",
    "end": "2256217"
  },
  {
    "text": "PROFESSOR: No. With the universal\nquantifier for all-- AUDIENCE: Oh, I see. PROFESSOR: You need\nto check both of them.",
    "start": "2256217",
    "end": "2261300"
  },
  {
    "text": "Yeah. AUDIENCE: Do you need\nto build crossovers for this gadget to work? PROFESSOR: Yes. We would need crossovers.",
    "start": "2261300",
    "end": "2266611"
  },
  {
    "text": "But we'll get there. So we're not yet\ndoing planar graphs. At this point, I think we have\nproved by this construction",
    "start": "2266611",
    "end": "2274069"
  },
  {
    "text": "that for nonplanar graphs,\nand only AND and OR gates,",
    "start": "2274070",
    "end": "2279250"
  },
  {
    "text": "we have PSPACE completeness\nof flipping one edge. OK. Now what if you wanted to\ngo from one configuration",
    "start": "2279250",
    "end": "2289460"
  },
  {
    "text": "to another? Then I could just\nput a latch here",
    "start": "2289460",
    "end": "2296340"
  },
  {
    "text": "that's unlocked by this thing. The goal usually is,\ncan I flip this edge. Because if I can\nflip this edge, that",
    "start": "2296340",
    "end": "2303080"
  },
  {
    "text": "means the whole formula is true. So all the quantifier\nconstructions. If I put a latch here, and\nI can activate the latch",
    "start": "2303080",
    "end": "2311100"
  },
  {
    "text": "and then change\nits state, then I could roll back\neverything else, and I would back to the\noriginal state,",
    "start": "2311100",
    "end": "2316960"
  },
  {
    "text": "except the latch is flipped. And that will be possible\nonly if the formula is true. So that's how you can predict\nthe entire configuration.",
    "start": "2316960",
    "end": "2324390"
  },
  {
    "text": "Nothing will have\nchanged, except this one edge, two edges. Whatever. ",
    "start": "2324390",
    "end": "2331611"
  },
  {
    "text": "So next question is planarity. But for nonplanar\ngraphs, we're good.",
    "start": "2331612",
    "end": "2337430"
  },
  {
    "text": "Here's a crossover. It's a little bit annoying, I\nmean, to check all the cases.",
    "start": "2337430",
    "end": "2343849"
  },
  {
    "text": "But this is going to be\na blue, blue crossover. ",
    "start": "2343850",
    "end": "2350770"
  },
  {
    "text": "So basically these\nthree edges will be in the same\norientation, roughly.",
    "start": "2350770",
    "end": "2358600"
  },
  {
    "text": "And these three\nedges will be-- I mean I can't say they're\nalways in the same orientation.",
    "start": "2358600",
    "end": "2363790"
  },
  {
    "text": "Because there's a\ntransition period. So I think they\ncould both point in. That's like an undirected edge.",
    "start": "2363790",
    "end": "2370970"
  },
  {
    "text": "But if this guy's\npointing to the left, then this guy must\npoint to the left. Why? Cause this points to the\nleft, and both of these",
    "start": "2370970",
    "end": "2376650"
  },
  {
    "text": "are pointing to the left. This is pointing\neither up or down. Let's say it's pointing up.",
    "start": "2376650",
    "end": "2382425"
  },
  {
    "text": "That will actually have to\ndo with the other edges. But if it's pointing\nup, and this is pointing left-- oh, notice\nhere I have a degree 4.",
    "start": "2382425",
    "end": "2391220"
  },
  {
    "text": "It's another gadget. Please wait. But this is the\nusual constraint. There must be a weight of\nat least two coming in.",
    "start": "2391220",
    "end": "2397880"
  },
  {
    "text": "And so if both of these are out,\nthen both of these must be in. If this is this way, then\nthis must be to the left.",
    "start": "2397880",
    "end": "2406320"
  },
  {
    "text": "So if this is to the left,\nthen this must be to the left. And by the same argument,\nthis must be to the left. So that's how you\ntransition horizontally.",
    "start": "2406320",
    "end": "2413260"
  },
  {
    "text": "And it's a similar\nthing vertically. If this is pointing\nup, then both of these must be pointing\ninto that vertex.",
    "start": "2413260",
    "end": "2420890"
  },
  {
    "text": "And this guy's either\npointing left or right. That depends on the other edge.",
    "start": "2420890",
    "end": "2426310"
  },
  {
    "text": "But let's say it's\npointing to the right. So if that's pointing to\nthe right, both of these are pointing to the\nright, which means",
    "start": "2426310",
    "end": "2434089"
  },
  {
    "text": "both of these are pointing\nout, which means both of these must be pointing in. And so if this is pointing\nout, this is pointing up.",
    "start": "2434090",
    "end": "2442820"
  },
  {
    "text": "I mean, it depends. If this is pointing up,\nthen this is pointing up. Or this is pointing up. One of them, depending on\nthe state of this edge.",
    "start": "2442820",
    "end": "2448740"
  },
  {
    "text": "But then you can use that again\nto prove this is pointing up. So it could be they're both\npointing in here or here.",
    "start": "2448740",
    "end": "2455529"
  },
  {
    "text": "But that's like an\nundirected edge. And so if you believe in\nasynchronous constraint logic, this is simulating\nthe crossover.",
    "start": "2455530",
    "end": "2463140"
  },
  {
    "text": "So except we have degree 4\nred, red, red, red vertices.",
    "start": "2463140",
    "end": "2468269"
  },
  {
    "text": "So we need one more\ngadget, which is this one.",
    "start": "2468270",
    "end": "2475180"
  },
  {
    "text": "This essentially\nsimulates, of course, the edges here are blue.",
    "start": "2475180",
    "end": "2481087"
  },
  {
    "text": "That's why I've drawn\noff to the side. Now here we have to\nbe a little careful, because we need that the\nred/blue transitions do not",
    "start": "2481087",
    "end": "2486690"
  },
  {
    "text": "introduce crossings. Because if we did, we'd have\nto use a crossover gadget. And we'd get in this\ninfinite recursion.",
    "start": "2486690",
    "end": "2492400"
  },
  {
    "text": "But you can just stick this\non here and turn it red, and connect it to this guy,\nand similarly over here.",
    "start": "2492400",
    "end": "2499260"
  },
  {
    "text": "And you convert them all the\nred without any crossings. And I think I won't go\nthrough this gadget,",
    "start": "2499260",
    "end": "2504800"
  },
  {
    "text": "but it simulates the\nconstraint that at least two of these edges must be\npointing into the gadget.",
    "start": "2504800",
    "end": "2513860"
  },
  {
    "text": "Cool. So that was a blue,\nblue crossover. If you have a red,\nblue crossover,",
    "start": "2513860",
    "end": "2520150"
  },
  {
    "text": "or red, red crossover,\nagain convert red to blue, and then back again.",
    "start": "2520150",
    "end": "2525260"
  },
  {
    "start": "2525260",
    "end": "2535550"
  },
  {
    "text": "One more version. So we just did planar\ngraphs, or PSPACE complete. If you draw your\nplanar graph in a grid,",
    "start": "2535550",
    "end": "2543370"
  },
  {
    "text": "naturally you would\nalso want the ability to just take an edge and\ngo left or make a turn.",
    "start": "2543370",
    "end": "2548670"
  },
  {
    "text": "So do we need turn gadgets\nand straight gadgets? The answer is no. We can use ANDs and ORs.",
    "start": "2548670",
    "end": "2554700"
  },
  {
    "text": "Actually we can just use ANDs\nto simulate wires and turns. So suppose this is one of\nthe gadgets that takes inputs",
    "start": "2554700",
    "end": "2563300"
  },
  {
    "text": "from two adjacent sides\nand outputs on one of the other adjacent sides.",
    "start": "2563300",
    "end": "2568830"
  },
  {
    "text": "Then it's always going to\nlook like this pattern, all of the instances of the\nAND gate are rotations of that.",
    "start": "2568830",
    "end": "2575370"
  },
  {
    "text": "I think no reflections. So first we build these fillers.",
    "start": "2575370",
    "end": "2582770"
  },
  {
    "text": "These fillers, I guess we'll\ngive them some initial state where we get to choose.",
    "start": "2582770",
    "end": "2591740"
  },
  {
    "text": "So maybe I think I want all\nthese edges to be pointing out.",
    "start": "2591740",
    "end": "2597420"
  },
  {
    "text": "So I'm going to set\neverything to 0. It's going to be\n0 and 0 equals 0.",
    "start": "2597420",
    "end": "2602609"
  },
  {
    "text": "So that's locally\nconsistent within the cycle. And it means that this\nedge is free to point out if it wants to.",
    "start": "2602610",
    "end": "2609540"
  },
  {
    "text": "So in particular, I guess I want\nthese four wires to be zeroes. And so then this\none could be 01,",
    "start": "2609540",
    "end": "2615150"
  },
  {
    "text": "and still consistent\nwith the ANDs. And so that means when\nI put that box here, this is one of those\nfiller gadgets,",
    "start": "2615150",
    "end": "2622240"
  },
  {
    "text": "that I have one unit\nof flow-- because those are red edges-- pointing out.",
    "start": "2622240",
    "end": "2628130"
  },
  {
    "text": "And so in particular here,\nif I have a unit here, I get a free unit from the\nside, and therefore the AND",
    "start": "2628130",
    "end": "2634580"
  },
  {
    "text": "will be the same as the input. So I put two by two blocks here. I also have a\nsimilar two by three",
    "start": "2634580",
    "end": "2641390"
  },
  {
    "text": "block, which I put\nin these chunks. And then this will just\ncopy whatever value",
    "start": "2641390",
    "end": "2646900"
  },
  {
    "text": "is here, up there. Again,\nnondeterministically, we can have both of them pointing\nin, but this one can point out",
    "start": "2646900",
    "end": "2653270"
  },
  {
    "text": "only if this one can point in. This can activate only\nif this can activate.",
    "start": "2653270",
    "end": "2659559"
  },
  {
    "text": "That's a straight. Turn is similar. And if you want to do\nan actual computation, you put whatever gadget\nis you want to compute,",
    "start": "2659560",
    "end": "2665600"
  },
  {
    "text": "and use these to copy the data. Question. AUDIENCE: I'm sorry.",
    "start": "2665600",
    "end": "2671106"
  },
  {
    "text": "Do you have [INAUDIBLE]? I'm sorry. The square filler into the top\nright of the straight grid. Yeah. AUDIENCE: There's a\nterminator at the input--",
    "start": "2671106",
    "end": "2678099"
  },
  {
    "text": "PROFESSOR: Oh. You mean there's an\nedge here which doesn't have anything on the side. That's true. Yes. So that's this little thing.",
    "start": "2678100",
    "end": "2683940"
  },
  {
    "text": "So in this particular world,\nthis won't work for all proofs, but it's sort of an example\nof what you could do.",
    "start": "2683940",
    "end": "2690410"
  },
  {
    "text": "There needs to be an input\nhere which you ignore. So it's like a degree 1 vertex.",
    "start": "2690410",
    "end": "2695864"
  },
  {
    "text": "AUDIENCE: Right. And then we can [INAUDIBLE]\neverything's OK. PROFESSOR: I mean,\nthe point is you",
    "start": "2695864",
    "end": "2701940"
  },
  {
    "text": "have to only build\none gadget-- or two gadgets, the AND and the OR. But it has to have this feature\nthat when you stick them",
    "start": "2701940",
    "end": "2707160"
  },
  {
    "text": "on the-- you stick\nan input to this gate",
    "start": "2707160",
    "end": "2712280"
  },
  {
    "text": "into a non-used neighboring\nside from this gate, then it just works.",
    "start": "2712280",
    "end": "2717570"
  },
  {
    "text": "So we'll see an example\nwhere that happens. Yeah. AUDIENCE: Can you turn right? ",
    "start": "2717570",
    "end": "2725980"
  },
  {
    "text": "PROFESSOR: I'm\nguessing to turn right, we might actually need the\nreflected form of the AND.",
    "start": "2725980",
    "end": "2731800"
  },
  {
    "text": "But most gadgets, if it works\none way and you reflect it, it also works. So yeah.",
    "start": "2731800",
    "end": "2737790"
  },
  {
    "text": "Good. One more. AUDIENCE: Silly question\nabout what nondeterministic means in this case. Since we've been using\nnondeterministic to mean",
    "start": "2737790",
    "end": "2744870"
  },
  {
    "text": "you can guess correctly. And to mean that the [INAUDIBLE]\naren't being reflected. So what exactly does it mean?",
    "start": "2744870",
    "end": "2750355"
  },
  {
    "text": "PROFESSOR: What was\nthe second version? The edges-- AUDIENCE: About the edges\ntaking a while to transfer. PROFESSOR: Oh.",
    "start": "2750355",
    "end": "2755640"
  },
  {
    "text": "No sir, that was asynchronous. Asynchronous is that\nthey take awhile. Nondeterministic is\nthat the player gets",
    "start": "2755640",
    "end": "2761265"
  },
  {
    "text": "to choose which edge to flip. They're related. I mean, asynchrony\nkind of comes out",
    "start": "2761265",
    "end": "2766370"
  },
  {
    "text": "of this form of\nnondeterminism that we have. But they don't have to be. The way I originally\nset the models,",
    "start": "2766370",
    "end": "2772280"
  },
  {
    "text": "when you flip an\nedge instantaneously. In both the gadgets that we\nbuild, like the actual AND",
    "start": "2772280",
    "end": "2778519"
  },
  {
    "text": "and OR gates we build\nfor real problems, they will actually take\nawhile to activate. You'll like pull some\nthings in, and stuff",
    "start": "2778520",
    "end": "2784490"
  },
  {
    "text": "happens before you can\npull some things out. So we will naturally\nget asynchrony.",
    "start": "2784490",
    "end": "2791649"
  },
  {
    "text": "The way is originally set it\nup, it was just nondeterministic and having instantaneous flips.",
    "start": "2791649",
    "end": "2796700"
  },
  {
    "text": "But they're the\nsame, so you don't have to worry too much\nabout that distinction. OK.",
    "start": "2796700",
    "end": "2803770"
  },
  {
    "text": "One more gadget before I\ngo to actual reductions.",
    "start": "2803770",
    "end": "2810780"
  },
  {
    "text": "And this is the definition\nof a protected OR. I call it protector OR.",
    "start": "2810780",
    "end": "2817150"
  },
  {
    "text": "Cause more ORs is better. But protected OR\nis the proper name.",
    "start": "2817150",
    "end": "2822296"
  },
  {
    "text": " Protected OR gadget\nlooks like an OR gadget.",
    "start": "2822296",
    "end": "2829100"
  },
  {
    "text": "So we're going to have\ntwo inputs, one output.",
    "start": "2829100",
    "end": "2838550"
  },
  {
    "text": "And these are going to be\nlabeled which are which. I want that at most one\ninput is active at any time.",
    "start": "2838550",
    "end": "2848880"
  },
  {
    "text": " What I mean here\nis that if I ever",
    "start": "2848880",
    "end": "2857310"
  },
  {
    "text": "have the state where\nboth of these are active, then the entire\nuniverse explodes.",
    "start": "2857310",
    "end": "2862440"
  },
  {
    "text": "And I give no guarantees. I mean, not only does\nthis gadget fail, but all gadgets everywhere\ncould self-destruct.",
    "start": "2862440",
    "end": "2868740"
  },
  {
    "text": "Because we're going to\nbuild some gadgets where you really only want\none of these two things to be pointing in.",
    "start": "2868740",
    "end": "2873970"
  },
  {
    "text": "If they both point\nin, then the framework that separates\ngadgets may shatter.",
    "start": "2873970",
    "end": "2880464"
  },
  {
    "text": "And then gadgets are\nno longer separate. You can't argue about them. And literally\neverything falls apart.",
    "start": "2880464",
    "end": "2886690"
  },
  {
    "text": "So we'll see some\nexamples of that, but this sort of foreshadowing. It turns out we can set\nthings up so that you never",
    "start": "2886690",
    "end": "2895040"
  },
  {
    "text": "have both things\npointing into an OR. Because we can build a fully\nfledged OR out of those",
    "start": "2895040",
    "end": "2901910"
  },
  {
    "text": "protected ORs. So this gadget acts as an OR\nwhere these two are the input",
    "start": "2901910",
    "end": "2910900"
  },
  {
    "text": "say, and that's the output. But it does so only\nusing protected ORs.",
    "start": "2910900",
    "end": "2916270"
  },
  {
    "text": "Now it uses a blue\nto red transition. So we have to again inspect\nthe blue to red transition. This is where I wanted\nthat this is rigid,",
    "start": "2916270",
    "end": "2923150"
  },
  {
    "text": "that you cannot make\nany moves in here, because that makes me\nhappy about this OR.",
    "start": "2923150",
    "end": "2929186"
  },
  {
    "text": "This is the only\nOR in this picture. And I might worry, maybe I\ncould flip one of these edges, and then I have two\ninputs activated.",
    "start": "2929186",
    "end": "2935490"
  },
  {
    "text": "But because no edges can\nflip from this state, in fact, this guy will\nonly have one pointing in,",
    "start": "2935490",
    "end": "2942360"
  },
  {
    "text": "so no matter how you label\nthe inputs and outputs, it is a protected OR.",
    "start": "2942360",
    "end": "2947800"
  },
  {
    "text": "OK. So that part is fine. And now this simulates an OR.",
    "start": "2947800",
    "end": "2954114"
  },
  {
    "text": "Do we want to go through it?  Hm? AUDIENCE: Which of the\ninputs [INAUDIBLE]?",
    "start": "2954114",
    "end": "2960089"
  },
  {
    "text": "PROFESSOR: So this is one input,\nand this is the other input. Oh. For these ORs? AUDIENCE: Yeah. PROFESSOR: I'm going to\nguess-- well, let's find out.",
    "start": "2960089",
    "end": "2968942"
  },
  {
    "text": "I don't remember. So let's say this\nguy is pointing in. So if this is also pointing\ndown, then this can point up.",
    "start": "2968942",
    "end": "2979430"
  },
  {
    "text": "But if this is\npointing down, this must point up and to the left\nin order to satisfy this node.",
    "start": "2979430",
    "end": "2985829"
  },
  {
    "text": "So if this is coming in, this\none must be pointing out. So I'm going to say\nthat's the output. These are the two inputs.",
    "start": "2985830",
    "end": "2992740"
  },
  {
    "text": "I'm guessing\nsymmetrically, yeah. If this one is pointing\ninto the vertex,",
    "start": "2992740",
    "end": "3001470"
  },
  {
    "text": "then that must mean\nboth of these red guys are pointing into\nthat vertex, which means this guy must be\npointing out of that vertex.",
    "start": "3001470",
    "end": "3007105"
  },
  {
    "text": "So if this one is active for\nthis guy, this guy's inactive. And vice versa. So this is protected\nfrom those two.",
    "start": "3007105",
    "end": "3014330"
  },
  {
    "text": "Similarly over here. But if this is active, and this\nis down, and this is active,",
    "start": "3014330",
    "end": "3021200"
  },
  {
    "text": "and this is pointing up, then in\nparticular, this can point out.",
    "start": "3021200",
    "end": "3027490"
  },
  {
    "text": "And this guy's satisfied. So then this edge can\npoint to the right.",
    "start": "3027490",
    "end": "3033020"
  },
  {
    "text": "And then this one\ncan point up here. And this can point here. So the AND actually\noutputs a yes.",
    "start": "3033020",
    "end": "3038270"
  },
  {
    "text": "So if the left is activated,\nthen C can activate as well, and symmetrically. So this simulates an\nOR, but it's guaranteed",
    "start": "3038270",
    "end": "3044980"
  },
  {
    "text": "that these two guys are happy. Yeah. AUDIENCE: Sorry. I just want to understand\nthe motivation for this, just to make our\ngadget-building lives easier?",
    "start": "3044980",
    "end": "3051225"
  },
  {
    "text": "PROFESSOR: Yes. This is just to make our\ngadget-building lives easier. It's so that I can now say\nthat deciding whether a planar",
    "start": "3051225",
    "end": "3058510"
  },
  {
    "text": "graph can do a sequence\nof moves and flip an edge is hard for AND\nand protected OR.",
    "start": "3058510",
    "end": "3069800"
  },
  {
    "text": "So that's a stronger statement. Now I only need to\nbuild a protected OR. In general, we want to reduce\nthe complexity of our gadgets",
    "start": "3069800",
    "end": "3077140"
  },
  {
    "text": "as much as possible for the\nhard part, which is actually analyzing a real problem. Yeah. AUDIENCE: Wait.",
    "start": "3077140",
    "end": "3082369"
  },
  {
    "text": "So is protected OR\neasier to build than OR? PROFESSOR: Protected\nOR is easier to build, because you don't need\nto worry about the case",
    "start": "3082370",
    "end": "3089440"
  },
  {
    "text": "for both inputs are active. AUDIENCE: OK. PROFESSOR: So you could\nhave any behavior. You might have the\ncorrect OR behavior,",
    "start": "3089440",
    "end": "3095190"
  },
  {
    "text": "or you could have any\nother behavior, including self-destruction. Or universe\ndestruction, I guess.",
    "start": "3095190",
    "end": "3102190"
  },
  {
    "text": "So it could only\nbe easier to build. AUDIENCE: This is\nfor future reduction? PROFESSOR: Yes. In fact, the very next\nreduction, I think.",
    "start": "3102190",
    "end": "3108300"
  },
  {
    "text": "Or the one after that. Close enough. All right. Let's do real\nreduction, shall we?",
    "start": "3108300",
    "end": "3113910"
  },
  {
    "text": "So all of this stuff\nthat you just saw was built for one problem\ninitially, and then",
    "start": "3113910",
    "end": "3119010"
  },
  {
    "text": "happened to be useful\nfor a lot more. And that's sliding\nblock puzzles. So these are a bunch of examples\nof sliding block puzzles.",
    "start": "3119010",
    "end": "3126390"
  },
  {
    "text": "You have blocks-- let's\nsay typically rectangles-- and you're an\nagent from outside.",
    "start": "3126390",
    "end": "3134049"
  },
  {
    "text": "You can pick any block\nyou want and slide it along some non-colliding path. So I can move this over, and\nthen move this over, and then",
    "start": "3134050",
    "end": "3140156"
  },
  {
    "text": "move this guy down. In this case, the goal is\nto move this block to here. Because there's a-- well, I\nthink that's just the goal.",
    "start": "3140156",
    "end": "3147750"
  },
  {
    "text": "These puzzles go\nback to the '20s. Martin Gardner wrote about them.",
    "start": "3147750",
    "end": "3153190"
  },
  {
    "text": "And in his article, called\n\"Sliding-Block Puzzles,\" he says these puzzles are\nin want of a general theory.",
    "start": "3153190",
    "end": "3159860"
  },
  {
    "text": "And there is no general\ntheory because they're PSPACE complete. There's no way to easily\ntell whether a puzzle's going",
    "start": "3159860",
    "end": "3165140"
  },
  {
    "text": "to be solvable or not, which\nis annoying for puzzle design, but there you go. Here's an actual instance\nof the puzzle I showed you.",
    "start": "3165140",
    "end": "3171260"
  },
  {
    "text": "Dad's Puzzle, where\nyou take this one. You're supposed to move it here. This optimal solution\nhas 83 moves.",
    "start": "3171260",
    "end": "3176640"
  },
  {
    "text": "And in general,\nnumber of moves is going to grow exponentially,\nbecause the problem is PSPACE complete.",
    "start": "3176640",
    "end": "3183352"
  },
  {
    "text": "And here's the proof that\nit's PSPACE complete, in two pictures. We need an AND gate\nand an OR gate.",
    "start": "3183352",
    "end": "3189710"
  },
  {
    "text": "And the point is, so here the\nnotion of edges being active",
    "start": "3189710",
    "end": "3194810"
  },
  {
    "text": "is maybe reversed from\nwhat you think about. This edge is currently inactive.",
    "start": "3194810",
    "end": "3200800"
  },
  {
    "text": "And if I slide this\nblock out by one, that activates that edge,\nmeaning it points up.",
    "start": "3200800",
    "end": "3209010"
  },
  {
    "text": "So right now the edge\nis pointing down. If I move this block down,\nthen the edge is pointing up. So it may seem backwards.",
    "start": "3209010",
    "end": "3214542"
  },
  {
    "text": "But if you don't think\nabout it too much, it's actually very clear. ",
    "start": "3214542",
    "end": "3220360"
  },
  {
    "text": "What I mean to say is that in\norder to move this block down by one, I must first move\nthis block left by one,",
    "start": "3220360",
    "end": "3227730"
  },
  {
    "text": "and this block down by one. So for this guy to be sucked\nin, this guy must be kicked out,",
    "start": "3227730",
    "end": "3233510"
  },
  {
    "text": "and this guy must be kicked out. Because then I can slide\nthis block over one. And then I can slide\nthis block over and down.",
    "start": "3233510",
    "end": "3239089"
  },
  {
    "text": "Then I can slide this\ndown and then this down. With that sequence of\nmoves, I can move this in. But I needed enough\nroom to do it.",
    "start": "3239090",
    "end": "3245450"
  },
  {
    "text": "So that's an AND gadget,\nan asynchronous world. And the OR gadget, this guy will\nbe able to move in if and only",
    "start": "3245450",
    "end": "3253120"
  },
  {
    "text": "if at least one of these guys\nmoves out, because if say, this one moves out,\nthis could move down, this guy can move over,\nand this can move down.",
    "start": "3253120",
    "end": "3260670"
  },
  {
    "text": "And if the other one happened,\nthis guy can move over too. And then this can move down.",
    "start": "3260670",
    "end": "3266390"
  },
  {
    "text": "At this point we don't\nneed a protected OR. Now you have to\nthink a little bit about how these gadgets\nare fit together,",
    "start": "3266390",
    "end": "3273370"
  },
  {
    "text": "but I guess that's\nthe next slide. Before that, here we have 1\nby 2 blocks and 1 by 3 blocks.",
    "start": "3273370",
    "end": "3280840"
  },
  {
    "text": "That's not satisfying\nbecause it's not tight. One by one blocks\nare polynomial, so we can't do\none by one blocks.",
    "start": "3280840",
    "end": "3286780"
  },
  {
    "text": "But it's turns out just\n1 by 2 blocks are enough. And these were found by a\nsemi-automatic computer search.",
    "start": "3286780",
    "end": "3294880"
  },
  {
    "text": "And I programmed it\n[INAUDIBLE] to analyze. In particular, these dots\nmean that there will always",
    "start": "3294880",
    "end": "3301480"
  },
  {
    "text": "be one of the blocks\noverlapping that position.",
    "start": "3301480",
    "end": "3306990"
  },
  {
    "text": "So like even if this\nguy moves out by one, this is still occupied. And so you could use that\nanalysis to help cut down",
    "start": "3306990",
    "end": "3313050"
  },
  {
    "text": "the search and see that actually\nall of the gray tiles cannot move at all, assuming that you\ndon't have boundary effects.",
    "start": "3313050",
    "end": "3323260"
  },
  {
    "text": "And only the yellow\ntiles can move. And that kind of highlights\nwhere the action is. Again, if this guy slides\nout, and this guy slides out,",
    "start": "3323260",
    "end": "3330385"
  },
  {
    "text": "then you get this\nchain reaction. And this can move down. It needs two units of space.",
    "start": "3330385",
    "end": "3336850"
  },
  {
    "text": "And then this guy can move down. And similarly, if this one moves\nout, or this one moves out, this guy has some freedom\nabout how he moves.",
    "start": "3336850",
    "end": "3344410"
  },
  {
    "text": "And there's a couple\nextra units to gain. Then this guy can move out. Now this is a protected\nOR, it turns out.",
    "start": "3344410",
    "end": "3351734"
  },
  {
    "text": "It's not going to be\nobvious from the picture, but if both of these move\nout, the whole gadget can fall apart.",
    "start": "3351734",
    "end": "3357580"
  },
  {
    "text": "So this is the genesis\nof protected ORs.",
    "start": "3357580",
    "end": "3362780"
  },
  {
    "text": "But I won't go into\nthe details here. I guess I don't have\na figure about how the gadgets fit together.",
    "start": "3362780",
    "end": "3368360"
  },
  {
    "text": "But essentially these\ncorners interact. Because here we're vertical\nand here we're horizontal,",
    "start": "3368360",
    "end": "3374930"
  },
  {
    "text": "you get a little nexus\nwhere nothing can move. So as long as the\noverall boundary",
    "start": "3374930",
    "end": "3380150"
  },
  {
    "text": "is fixed-- the big\nrectangular box that we're fitting in-- you get\nthis chain reaction that because this point\nis always occupied,",
    "start": "3380150",
    "end": "3387320"
  },
  {
    "text": "even if this slides\nup or down one, you transfer the\nrigidity of this edge",
    "start": "3387320",
    "end": "3393630"
  },
  {
    "text": "to the rigidity of this edge. And so you get that all of the\ngadget boundaries are rigid, and it's just the action\nin the yellow tiles,",
    "start": "3393630",
    "end": "3400900"
  },
  {
    "text": "because of these\ndots, basically. And I think one thing\nthat might go wrong here is if you could\nmove out by two,",
    "start": "3400900",
    "end": "3407111"
  },
  {
    "text": "then who knows what\nhappens, right? Or is this guy could actually\nsuck in an additional spot",
    "start": "3407111",
    "end": "3412165"
  },
  {
    "text": "equivalently. OK. So sliding blocks.",
    "start": "3412165",
    "end": "3418500"
  },
  {
    "text": "Now I said one by\none blocks are easy. But here's a slight\nvariation where it's hard.",
    "start": "3418500",
    "end": "3424850"
  },
  {
    "text": "In a graph, suppose\nyou have tokens. And a move is to move\na token along an edge.",
    "start": "3424850",
    "end": "3432079"
  },
  {
    "text": "But at all times\nthe set of tokens must be an independent set. You can never have\ntwo adjacent tokens.",
    "start": "3432080",
    "end": "3437700"
  },
  {
    "text": "So this is what you might call\nreconfiguration independence. And it's a reconfiguration\nproblem in the sense",
    "start": "3437700",
    "end": "3443470"
  },
  {
    "text": "that I'm interested\nin two solutions to the independence set problem\nof the same size, in fact.",
    "start": "3443470",
    "end": "3451177"
  },
  {
    "text": "And I want to know, is there a\nsequence of moves that converts one solution to\nthe other solution.",
    "start": "3451177",
    "end": "3456780"
  },
  {
    "text": "In this case, by\nmoving it into one of the vertices and\nindependence set along an edge.",
    "start": "3456780",
    "end": "3462020"
  },
  {
    "text": "And here you can very\neasily simulate an AND. This guy can move down\nonly if this moves out",
    "start": "3462020",
    "end": "3467480"
  },
  {
    "text": "and this moves out, because\nof these constraints. And an OR, this\nguy can move down",
    "start": "3467480",
    "end": "3472670"
  },
  {
    "text": "only if this guy can\nmove here or here. And to move here, this\nguy must move out. And to move here, this\nguy must move out.",
    "start": "3472670",
    "end": "3479495"
  },
  {
    "text": " So you can see, you\nget really short proofs of PSPACE completeness. Just need two pictures.",
    "start": "3479495",
    "end": "3484940"
  },
  {
    "text": " For fun and somewhat relevant\nin particular to your p-set.",
    "start": "3484940",
    "end": "3494390"
  },
  {
    "text": "Let me mention another\nreconfiguration problem. I don't have a figure\nfor it, but this",
    "start": "3494390",
    "end": "3501080"
  },
  {
    "text": "is reconfiguration 3SAT.",
    "start": "3501080",
    "end": "3511370"
  },
  {
    "text": "So suppose I give you two\nsolutions to a 3SAT formula-- two satisfying assignments.",
    "start": "3511370",
    "end": "3517109"
  },
  {
    "text": "And my move is, flip a\nvariable from true to false, or vice versa. I want at all times to be\na satisfying assignment.",
    "start": "3517110",
    "end": "3523329"
  },
  {
    "text": "I claim it is PSPACE complete to\nfind a sequence of such moves.",
    "start": "3523330",
    "end": "3528970"
  },
  {
    "text": "This is originally approved by\n[? Papadimetriou ?] and a bunch of other people--\n[? Gopala, ?] [? Colitis, ?]",
    "start": "3528970",
    "end": "3536420"
  },
  {
    "text": "and [? Mineva. ?] But there's actually\na really easy proof once you have nondeterministic\nconstraint logic, which",
    "start": "3536420",
    "end": "3544339"
  },
  {
    "text": "is-- so we're going to simulate\nnondeterministic constraint",
    "start": "3544340",
    "end": "3549850"
  },
  {
    "text": "logic using this\nreconfiguration problem. So in order to represent an\nedge in our constraint graph,",
    "start": "3549850",
    "end": "3556740"
  },
  {
    "text": "we will just make\nthat into a variable.  And true for that\nvariable means the edge",
    "start": "3556740",
    "end": "3563987"
  },
  {
    "text": "is pointed one way, and\nfalse means the other way. You just decide economical\norientation for each edge.",
    "start": "3563987",
    "end": "3570450"
  },
  {
    "text": "And then if we have an OR\nvertex-- call the edges x, y",
    "start": "3570450",
    "end": "3585700"
  },
  {
    "text": "and z-- then the constraints\nare that x must be in,",
    "start": "3585700",
    "end": "3591740"
  },
  {
    "text": "or y must be in,\nor z must be in. That's an OR constraint.",
    "start": "3591740",
    "end": "3598319"
  },
  {
    "text": "And \"in\" here means I write x\nor x bar, according to whether in is the positive or the\nnegative orientation--",
    "start": "3598320",
    "end": "3604584"
  },
  {
    "text": "the true or the\nfalse orientation, however you decided this. So that's a 3SAT clause.",
    "start": "3604584",
    "end": "3612680"
  },
  {
    "text": "And an AND vertex,\nsay, x, y, and z,",
    "start": "3612680",
    "end": "3623369"
  },
  {
    "text": "is going to be two\nconstraints, two clauses. If x is out, then y must be in.",
    "start": "3623370",
    "end": "3631660"
  },
  {
    "text": "And if x is out,\nthen z must be in. OK.",
    "start": "3631660",
    "end": "3636840"
  },
  {
    "text": "So that's two clauses. We AND them together,\nwe can convert a implies into a not x out\nor y in, as usual.",
    "start": "3636840",
    "end": "3645599"
  },
  {
    "text": "So these are 2SAT clauses. You take the conjunction\nof all those clauses, you get a 3SAT formula.",
    "start": "3645600",
    "end": "3652150"
  },
  {
    "text": "And that exactly represents\nthat the configuration is valid,",
    "start": "3652150",
    "end": "3657309"
  },
  {
    "text": "that it satisfies the\ninflow constraint. And so reconfigurations\nin the constraint logic",
    "start": "3657310",
    "end": "3663100"
  },
  {
    "text": "are identical to\nreconfigurations in the 3SAT instance. Very nice simple\nproof found by Sara. ",
    "start": "3663100",
    "end": "3670740"
  },
  {
    "text": "So now you get the sense that\nconstraint logic is really just a very simplified version\nof reconfiguration 3SAT.",
    "start": "3670740",
    "end": "3677930"
  },
  {
    "text": "We have some very\nspecific constraints on what we need to worry\nabout, some very specific types of vertices we\nneed to implement.",
    "start": "3677930",
    "end": "3684740"
  },
  {
    "text": "And that's it. So of course you could simulate\nall of reconfiguration 3SAT, but your life is going to be\na lot easier by simulating",
    "start": "3684740",
    "end": "3692500"
  },
  {
    "text": "this special case. And you've seen already\na few examples of that.",
    "start": "3692500",
    "end": "3698595"
  },
  {
    "text": "OK.  Next problem. Rush hour.",
    "start": "3698595",
    "end": "3703840"
  },
  {
    "text": "This one we actually\ncovered in lecture one, so I just remind you that\nhere the blocks can only",
    "start": "3703840",
    "end": "3709290"
  },
  {
    "text": "move in the direction\nbut they're oriented. And again, you can build\nan AND or protected OR.",
    "start": "3709290",
    "end": "3715640"
  },
  {
    "text": "In the setup, this result\nwas proofed previously, but here's a\nconstraint logic proof.",
    "start": "3715640",
    "end": "3721390"
  },
  {
    "text": "Again, we do protected OR. Now this is 1 by 2\nblocks and 1 by 3 blocks.",
    "start": "3721390",
    "end": "3727400"
  },
  {
    "text": "That's as far as we could get. This is a picture\nhere we actually see how things come\ntogether at the corners.",
    "start": "3727400",
    "end": "3734290"
  },
  {
    "text": "So this is clearly a\nlocked configuration. That's good. And then Trump and\n[? Cidibrasi ?]",
    "start": "3734290",
    "end": "3742290"
  },
  {
    "text": "came up with a purely\n1 by 2 car version. It's more complicated.",
    "start": "3742290",
    "end": "3748560"
  },
  {
    "text": "And they had trouble getting\njust a single gadget. So they ended up doing\ntwo AND gates using,",
    "start": "3748560",
    "end": "3754210"
  },
  {
    "text": "I guess, rotational\nsymmetry here. Two AND gates at once. But of course, this is really\na split viewed from below.",
    "start": "3754210",
    "end": "3761050"
  },
  {
    "text": "So if you just\nthrow away that end, and they have a way\nto terminate things, then that is just an AND gate.",
    "start": "3761050",
    "end": "3767400"
  },
  {
    "text": "And similarly, they had to\nglue two OR gates together. But that also can be\nused to build an OR gate.",
    "start": "3767400",
    "end": "3774390"
  },
  {
    "text": "They built something\nrelated to an OR, but in particular,\nit is a protected OR. And so that's enough.",
    "start": "3774390",
    "end": "3780050"
  },
  {
    "text": "In fact, these actually\nact as latches, if you wanted to\nbe more efficient. But you don't worry\nabout that, you",
    "start": "3780050",
    "end": "3785140"
  },
  {
    "text": "can use them as\nprotected oars, and then build latches out\nof that, and build all the things we've done. So that's cool.",
    "start": "3785140",
    "end": "3792190"
  },
  {
    "text": "An open problem in\nthe world of Rush Hour is what about 1 by 1 cars. Now this is a little\nweird, because 1 by 1 cars",
    "start": "3792190",
    "end": "3798410"
  },
  {
    "text": "don't have natural orientations. But if each car is\nmarked whether-- I mean, you can see where\nthe headlights are.",
    "start": "3798410",
    "end": "3804330"
  },
  {
    "text": "So you know whether it's going\nhorizontal or vertical only. It's open whether this\nproblem is PSPACE complete.",
    "start": "3804330",
    "end": "3810990"
  },
  {
    "text": "In the same paper, they\ndo a computer search to find the hardest\n5 by 5 puzzle, and the hardest 6 by 6 puzzle.",
    "start": "3810990",
    "end": "3817340"
  },
  {
    "text": "I think with just one\nblank space in here, the first move is to\nmove this up, this up, this right, this right, this\nright, this down, this over.",
    "start": "3817340",
    "end": "3824480"
  },
  {
    "text": "The first chain of\nmoves, so to speak. But it's 199 moves\nto solve this. This puzzle is 732 moves.",
    "start": "3824480",
    "end": "3831130"
  },
  {
    "text": "And it's drawn here. That's the longest\npuzzle that's 6 by 6.",
    "start": "3831130",
    "end": "3837059"
  },
  {
    "text": "So it seems to be growing\nexponentially, maybe. So maybe it's PSPACE\ncomplete, but we don't know.",
    "start": "3837060",
    "end": "3842410"
  },
  {
    "text": " Triangular Rush Hour. You can do that too.",
    "start": "3842410",
    "end": "3847640"
  },
  {
    "text": "Again, there's an AND\ngate and an OR gate. Here we had to build a straight. But then everything\nfits together.",
    "start": "3847640",
    "end": "3853650"
  },
  {
    "text": "Question? AUDIENCE: I was just gonna\nask what is the goal in those? Like, there wasn't-- PROFESSOR: Oh. Right. What is the goal.",
    "start": "3853650",
    "end": "3859760"
  },
  {
    "text": "I mean, if you put the\nfinal edge of the reverse up in the corner\nsomewhere, then there'll be one car which can escape\nthrough a little slot",
    "start": "3859760",
    "end": "3866900"
  },
  {
    "text": "in the exit. That's the usual\nRush Hour setup. If and only if\nthat edge-- Sorry? AUDIENCE: The pictures\ndidn't specify.",
    "start": "3866900",
    "end": "3873030"
  },
  {
    "text": "PROFESSOR: The pictures\ndid not specify. It's true. Oh, and these ones.",
    "start": "3873030",
    "end": "3879420"
  },
  {
    "text": "I think it's like\none of these cars is going to go out\nthrough the right.",
    "start": "3879420",
    "end": "3884850"
  },
  {
    "text": "But I forget. I think it might be the\nsecond row, or the first row, something like that. ",
    "start": "3884850",
    "end": "3892511"
  },
  {
    "text": "OK. So, cool. Here's another problem. Turns out to be related,\nthough it doesn't seem",
    "start": "3892511",
    "end": "3897568"
  },
  {
    "text": "like the same sort of puzzle. This is called a\nhinged dissection. It's a chain of\nblocks that folds from one shape-- in this\ncase, equilateral triangle--",
    "start": "3897568",
    "end": "3904468"
  },
  {
    "text": "to a unit square. Goes back to even before 1900s.",
    "start": "3904468",
    "end": "3909510"
  },
  {
    "text": "But this one's from 1900s. Early 1900s. And so that's cool.",
    "start": "3909510",
    "end": "3915200"
  },
  {
    "text": "In particular, there's a motion\nthat avoids self-intersection. And we proved a few years\nago that for any two polygons",
    "start": "3915200",
    "end": "3921839"
  },
  {
    "text": "of the same area, there is\na finite chain of blocks that can fold one into the\nother without self-intersection.",
    "start": "3921840",
    "end": "3927660"
  },
  {
    "text": "So great. Problem solved. But that's good for if you get\nto design the hinge dissection.",
    "start": "3927660",
    "end": "3933390"
  },
  {
    "text": "But what if you have some\nexisting hinge dissection that someone came up with?",
    "start": "3933390",
    "end": "3939130"
  },
  {
    "text": "So this is earlier work. But it's a chain of these\nright isosceles triangles-- 128 of them that can fold into\nany letter of the alphabet",
    "start": "3939130",
    "end": "3946580"
  },
  {
    "text": "and any number and a square. So you can follow the six\ninto a square into an eight into a nine into a zero.",
    "start": "3946580",
    "end": "3951930"
  },
  {
    "text": "That's cool. Open problem. Can you do it without\nself-intersection? And it would be great if we\nhad an algorithm to tell us.",
    "start": "3951930",
    "end": "3959210"
  },
  {
    "text": "But it's PSPACE complete. So if I give you a hinge\ndissection, and I want to know,",
    "start": "3959210",
    "end": "3964410"
  },
  {
    "text": "can I get from this\nconfiguration to that one without collisions, you can\nsimulate essentially Rush Hour.",
    "start": "3964410",
    "end": "3971290"
  },
  {
    "text": "This is a gadget--\nthe hard part here is to make everything connected\nin one connected hinge",
    "start": "3971290",
    "end": "3977550"
  },
  {
    "text": "dissection. And it can simulate this\nblock sliding to the right or not in this kind of way,\navoiding collisions locally.",
    "start": "3977550",
    "end": "3986730"
  },
  {
    "text": "And so now it's just\neach of these blocks can slide left or\nright or up or down.",
    "start": "3986730",
    "end": "3991980"
  },
  {
    "text": "And they have some weird shapes,\nbut it ends up working out. So that's kind of a cool result.",
    "start": "3991980",
    "end": "3997920"
  },
  {
    "text": "This is before we proved hinge\ndissections actually exist. It was discouraging, maybe. But when you're constructing\nyour own hinge dissections,",
    "start": "3997920",
    "end": "4004600"
  },
  {
    "text": "it's a lot easier\nto avoid collisions. All right. Pushing blocks. Remember this table\nfrom Lecture 4, I think.",
    "start": "4004600",
    "end": "4013970"
  },
  {
    "text": "So we did a lot of the\nNP hardness proofs. But there are some\nPSPACE hardness as well. And I'm going to\ncover these two.",
    "start": "4013970",
    "end": "4021700"
  },
  {
    "text": "So Sokoban first,\nand Push 2F, second.",
    "start": "4021700",
    "end": "4026800"
  },
  {
    "text": "So remember, Sokoban\nis this puzzle where you want to get the blocks\ninto the target locations.",
    "start": "4026800",
    "end": "4032740"
  },
  {
    "text": "And you are walking around. You only have the\nstrength of one. You can only push\none block at a time.",
    "start": "4032740",
    "end": "4037810"
  },
  {
    "text": "So I think this is\nLevel 5 apparently, in the original classic.",
    "start": "4037810",
    "end": "4043190"
  },
  {
    "text": "So this is a little bit\nawkward in some ways, because in constraint\nlogic, you're",
    "start": "4043190",
    "end": "4049460"
  },
  {
    "text": "supposed to be able\nto flip any edge. In Sokoban you have an\nagent who's walking around.",
    "start": "4049460",
    "end": "4055210"
  },
  {
    "text": "So we're going to cut a\nlot of tunnels in the walls so that the agent\ncan go anywhere.",
    "start": "4055210",
    "end": "4062420"
  },
  {
    "text": "And then also, these blocks are\nexactly where they want to be,",
    "start": "4062420",
    "end": "4067960"
  },
  {
    "text": "meaning there is a target\nlocation where that block is. There's only one block\nthat's in the wrong spot.",
    "start": "4067960",
    "end": "4074071"
  },
  {
    "text": "And so we're going to use our\nconfiguration to configuration thing to say, I want to solve\nthe QSAT formula, which lets me",
    "start": "4074071",
    "end": "4081891"
  },
  {
    "text": "move one block out of the way. So I can move one block\nthat's in the wrong spot down to a good spot\nthat's in target location.",
    "start": "4081891",
    "end": "4088119"
  },
  {
    "text": "And then unroll everything. And then all the blocks are\nback where they wanted to be. And the one guy that\nwe needed to move",
    "start": "4088120",
    "end": "4094470"
  },
  {
    "text": "got to where he needed to go. That's Sokoban. And the rest is mostly\nthis AND and OR gadget.",
    "start": "4094470",
    "end": "4103213"
  },
  {
    "text": "The idea is, because these\nguys are where they need to be, if I move the D to touch the\nA, you're permanently screwed.",
    "start": "4103214",
    "end": "4108770"
  },
  {
    "text": "You can never\nseparate them again. And so you'll never be\nable to fill some spot,",
    "start": "4108770",
    "end": "4114189"
  },
  {
    "text": "because D in particular,\ncan no longer be useful. But every block\nneeds to be used.",
    "start": "4114189",
    "end": "4120599"
  },
  {
    "text": "And so let's see, in\norder to move V down,",
    "start": "4120600",
    "end": "4126460"
  },
  {
    "text": "we must move- or, sorry. That's the other way around. In order to move C to the left,\nwe must first move B and E",
    "start": "4126460",
    "end": "4133720"
  },
  {
    "text": "up one, and A and D left one. And you can check that\nyou can actually do that by moving this out and moving\nthis over, and then pushing E",
    "start": "4133720",
    "end": "4141009"
  },
  {
    "text": "up, and then pushing B up. Then C can move in. And it is reversible\nif you check carefully.",
    "start": "4141010",
    "end": "4148100"
  },
  {
    "text": "And for an OR, we just separate\nthese a little bit more. So separately each\nof them could move.",
    "start": "4148100",
    "end": "4153774"
  },
  {
    "text": "And then this guy could move\nin and you won't be trapped. If you just tried to\nmove this directly, then you'll never be\nable to get in here.",
    "start": "4153774",
    "end": "4160130"
  },
  {
    "text": "And so these guys are sort\nof locked in position. And that's bad news. Or they could only get worse. You could move A in here, but\nthen you're really in trouble.",
    "start": "4160130",
    "end": "4168620"
  },
  {
    "text": "Now once you do that, you might\nhave some parity issues because of the widths of these gaps.",
    "start": "4168620",
    "end": "4174359"
  },
  {
    "text": "But you can build this\nkind of extra-long tunnel to change parity.",
    "start": "4174359",
    "end": "4179750"
  },
  {
    "text": "We talked about tunnels. You also need turns. And then you can simulate\nconstraint logic. This is one of the weirder\nconstraint logic proofs.",
    "start": "4179750",
    "end": "4186130"
  },
  {
    "text": "It's not directly mapping\nbecause of the agent issue. But it turns out to work.",
    "start": "4186130",
    "end": "4192240"
  },
  {
    "text": "OK. That was Sokoban. Next one is Push-2F. I will not cover\nthis one in detail",
    "start": "4192240",
    "end": "4199130"
  },
  {
    "text": "because it's quite\na complicated proof. But I will tell you\nthat we can simplify it, now that we know what we know.",
    "start": "4199130",
    "end": "4205409"
  },
  {
    "text": "This is a fairly old proof. 2002. So it predates last lecture.",
    "start": "4205410",
    "end": "4210800"
  },
  {
    "text": "It predates the\n[? Viglietta ?] paper. So what we've constructed in\nthis case is a lock gadget.",
    "start": "4210800",
    "end": "4217650"
  },
  {
    "text": "This is just like the final\nmeta-theorem from last class. We have an unlock traversal\nwhere you could come in the U",
    "start": "4217650",
    "end": "4225100"
  },
  {
    "text": "and actually come back\nout the same place. It unlocks the thing, so you\ncould then go from I to O.",
    "start": "4225100",
    "end": "4230730"
  },
  {
    "text": "Or if you go from LI to LO,\nyou're forced to lock the door.",
    "start": "4230730",
    "end": "4236260"
  },
  {
    "text": "Sorry. It was called a door\nin the last class. So that actually has a door. Now we needed a door\nand a crossover.",
    "start": "4236261",
    "end": "4244710"
  },
  {
    "text": "And you can build a\ncrossover like this. I think at this point\nwe have a crossover. So left of this line would be a\nPSPACE completeness proof using",
    "start": "4244710",
    "end": "4253010"
  },
  {
    "text": "the [? Viglietta ?] framework. We didn't have it\nat the time, so we did this part of the proof\nalso to build an AND and an OR",
    "start": "4253010",
    "end": "4261340"
  },
  {
    "text": "gadget. We're essentially\ndoing the 3SAT thing. And we're just checking\nthat all of the things that",
    "start": "4261340",
    "end": "4267830"
  },
  {
    "text": "need to be true are\ntrue for AND and OR. This reminds me of the\nreduction from three",
    "start": "4267830",
    "end": "4273050"
  },
  {
    "text": "coloring to one of the other\npushing blocks problems. Push-1X, I think. We'll just check that all the\nthings that need to be true",
    "start": "4273050",
    "end": "4279500"
  },
  {
    "text": "are true. So that's the rough sketch. But there are a lot of\ndetails getting it to work. It'd be great to solve\nPush-1F in the same way,",
    "start": "4279500",
    "end": "4287260"
  },
  {
    "text": "but that remains\nan open problem. All right. That was pushing blocks.",
    "start": "4287260",
    "end": "4292540"
  },
  {
    "text": "Next we have rolling blocks. So this is a class of mazes.",
    "start": "4292540",
    "end": "4297900"
  },
  {
    "text": " So this is how you usually\nare given the input. What this means, the red\nthings here are fixed.",
    "start": "4297900",
    "end": "4305630"
  },
  {
    "text": "And the green thing\nis actually a 1 by 1 by 2 block sticking\nout of the board.",
    "start": "4305630",
    "end": "4310780"
  },
  {
    "text": "And so it was in this position. And you can roll it over\nalong one of the edges, and it ends up occupying\nthis rectangle up here.",
    "start": "4310780",
    "end": "4319150"
  },
  {
    "text": "And you can keep rolling your\ngoals to get to t sticking up. And it's not so easy.",
    "start": "4319150",
    "end": "4324810"
  },
  {
    "text": "Hence the dot, dot, dot. So that's the traditional\nrolling block maze.",
    "start": "4324810",
    "end": "4330430"
  },
  {
    "text": "And if you have a lot of\nrollable blocks, in this case, all the blocks are rollable. So these red things are\nactually sticking up.",
    "start": "4330430",
    "end": "4337410"
  },
  {
    "text": "And the green ones are\nobviously lying in the plan. And the 1 by 1 squares\nmean that it's sticking up.",
    "start": "4337410",
    "end": "4343800"
  },
  {
    "text": "Then it's PSPACE complete\nto roll a particular block, because in order to\nroll this thing down,",
    "start": "4343800",
    "end": "4351844"
  },
  {
    "text": "you have to make space\nhere, which means this has to have rolled up. Which means-- well, so if this\nrolls out, and this rolls out,",
    "start": "4351844",
    "end": "4359739"
  },
  {
    "text": "it will be like here and here. Then this can fall over,\nreplacing that rectangle. This can fall over,\nreplacing that rectangle.",
    "start": "4359740",
    "end": "4366060"
  },
  {
    "text": "So that's this and this. Then this guy can roll\ndown, so it comes here. And then this guy can stand up.",
    "start": "4366060",
    "end": "4372510"
  },
  {
    "text": "And this guy can fall over. So you get that picture. And so it's AND game. And this one is an OR gate.",
    "start": "4372510",
    "end": "4378700"
  },
  {
    "text": "I think I won't go\nthrough all the things, but if either this one comes\nup, or this one falls over,",
    "start": "4378700",
    "end": "4384849"
  },
  {
    "text": "then this one can come down. And you can show in\nthis case that it's essentially impossible,\nor never useful,",
    "start": "4384850",
    "end": "4391610"
  },
  {
    "text": "to make any of the\nred towers fall over, which lets you argue about\ngadgets independently.",
    "start": "4391610",
    "end": "4397980"
  },
  {
    "text": "Cool. That's a pretty recent result. ",
    "start": "4397980",
    "end": "4403390"
  },
  {
    "text": "Oh, in this proof they also--\nit took me awhile staring at I",
    "start": "4403390",
    "end": "4408490"
  },
  {
    "text": "guess these gadgets\nto think, oh, do these actually fit together? This fits together.",
    "start": "4408490",
    "end": "4413719"
  },
  {
    "text": "But if I rotate this\none 180 degrees, the A's will not match up. And so you need a shift gadget.",
    "start": "4413720",
    "end": "4420840"
  },
  {
    "text": "And you also need a\nsort of straight gadgets for just indicating information\nwithout any stuff going on.",
    "start": "4420840",
    "end": "4428390"
  },
  {
    "text": "OK. Getting near the end. Plank puzzles. These are ThinkFun puzzles,\nunder that name River Crossing.",
    "start": "4428390",
    "end": "4436710"
  },
  {
    "text": "Although they predate\nthat a little bit. So here you have again,\nan agent moving around.",
    "start": "4436710",
    "end": "4442822"
  },
  {
    "text": "So we're going to have to do\nsome work to get rid of that. And you can, for example,\nwalk along a plank.",
    "start": "4442822",
    "end": "4448130"
  },
  {
    "text": "Then you can pick that plank up. And you can only carry\none plank at a time. And you can place it, as long\nas this is a length two plank,",
    "start": "4448130",
    "end": "4454730"
  },
  {
    "text": "as long as there's another dot\nthat's exactly length 2 away, you can drop it down. And then he walked\nhere and walked here.",
    "start": "4454730",
    "end": "4461132"
  },
  {
    "text": "Then that pickup, that\nunit-length plank, put it down here. And I get to this\npicture, then I can walk here, walk here, pick\nup this plank, put it down.",
    "start": "4461132",
    "end": "4468897"
  },
  {
    "text": "But I also could have walked\nback to pick up this plank, walk over, drop\nit somewhere else. But I can only\ncarry one at a time.",
    "start": "4468897",
    "end": "4474310"
  },
  {
    "text": " You want to cross the\nshore, cross the river.",
    "start": "4474310",
    "end": "4479700"
  },
  {
    "text": "This is PSPACE complete by\nnondeterministic constraint logic.",
    "start": "4479700",
    "end": "4485520"
  },
  {
    "text": "And there's stuff going on here. I mean, rough idea,\nimagine you can sort",
    "start": "4485520",
    "end": "4492360"
  },
  {
    "text": "of teleport to some extent. If this guy can move\nover here, and this guy",
    "start": "4492360",
    "end": "4497910"
  },
  {
    "text": "can move over here, then let\nme show you a bigger picture.",
    "start": "4497910",
    "end": "4503080"
  },
  {
    "text": "This is a bunch of\ngadgets stuck together. But also what we see are\nthe navigation mechanism.",
    "start": "4503080",
    "end": "4509989"
  },
  {
    "text": "There's a length three guy here,\nand a length three guy here. The length threes are the ones\nthat go around each gadget.",
    "start": "4509990",
    "end": "4518050"
  },
  {
    "text": "This is one gadget. There's all these\nlength three distances. There are no other\nlength three distances. What that lets you do\nis grab this, move it,",
    "start": "4518050",
    "end": "4524949"
  },
  {
    "text": "and basically you can\nwalk around the boundary. Then you can also walk along the\nboundary, grab this other guy, and move it somewhere else.",
    "start": "4524950",
    "end": "4532000"
  },
  {
    "text": "So you can walk\nalong the boundary and carry an additional\nlength three thing with you.",
    "start": "4532000",
    "end": "4537085"
  },
  {
    "text": "So that turns out to be\nhelpful in that when you're trying to traverse\na gadget, you need to be able to enter\nfrom this side,",
    "start": "4537085",
    "end": "4542810"
  },
  {
    "text": "and also enter from that side. And you can set up those\nplanks to make that possible. I'll just wave my hand\nand say that is possible.",
    "start": "4542810",
    "end": "4549210"
  },
  {
    "text": "It's a little hard to\nsee in these diagrams. But you're getting\nNCL reduction again.",
    "start": "4549210",
    "end": "4556820"
  },
  {
    "text": "And I have two examples\nof non-puzzles. Sort of real world\nproblems reduced",
    "start": "4556820",
    "end": "4562820"
  },
  {
    "text": "from nondeterministic\nconstraint logic. One of them is\ndynamic map labeling. So there's a whole\nfield of map labeling.",
    "start": "4562820",
    "end": "4569659"
  },
  {
    "text": "One of the typical setups is\nthat you have points, features, cities, whatever that\nneed to be labeled.",
    "start": "4569660",
    "end": "4575750"
  },
  {
    "text": "Labels are usually\nmodel by squares. Because if you scale\nthings, if they were rectangles of fixed size,\nyou'd turn them into squares.",
    "start": "4575750",
    "end": "4583060"
  },
  {
    "text": "And typically you want to have\nthat square, one of its corners should be at the dot. So it's easy to read.",
    "start": "4583060",
    "end": "4590409"
  },
  {
    "text": "But now, suppose things\nare changing in your map. Maybe you're adding points,\nor your zooming out, or zooming in.",
    "start": "4590410",
    "end": "4595889"
  },
  {
    "text": "You'd like to continuously\nchange the labels and you don't want any\nlabels to intersect.",
    "start": "4595890",
    "end": "4600920"
  },
  {
    "text": "So you could think of\nzooming out on Google Maps. I'm not going to talk\nabout the zooming out, although this paper proves\nthat that is PSPACE complete.",
    "start": "4600920",
    "end": "4609110"
  },
  {
    "text": "Question is, how many labels\ncan I preserve and be able make a continuous change. Simple example is\nmaybe you add one city.",
    "start": "4609110",
    "end": "4616370"
  },
  {
    "text": "In order to be able to add\none city and add a new label, probably something has\nto move out of the way.",
    "start": "4616370",
    "end": "4621517"
  },
  {
    "text": "And then you can get a\nnondeterministic constraint logic argument. I love this figure,\nbecause it shows",
    "start": "4621517",
    "end": "4627250"
  },
  {
    "text": "all the gadgets and the\nways that they fit together. This is a nondeterministic\nconstraint graph.",
    "start": "4627250",
    "end": "4633780"
  },
  {
    "text": "And an AND gate here. The pinks are the inputs.",
    "start": "4633780",
    "end": "4639150"
  },
  {
    "text": "So if this square\ncan move over here, then this one can\nmove up to here.",
    "start": "4639150",
    "end": "4644360"
  },
  {
    "text": "And if this one can\nmove over to here, this one can move down to here,\nthen these two can move left.",
    "start": "4644360",
    "end": "4650080"
  },
  {
    "text": "Then this one can move left. It overlaps both of\nthese, so both of these have to move out of the way\nbefore this one can move,",
    "start": "4650080",
    "end": "4655179"
  },
  {
    "text": "and that one can move. And so on. You can see how to build\na wire, which is just a chain of these things. There are these special obstacle\nblocks which prevent you",
    "start": "4655180",
    "end": "4662949"
  },
  {
    "text": "from doing anything else.  cool. And then OR is actually easier.",
    "start": "4662950",
    "end": "4669170"
  },
  {
    "text": "You just chain these\ntwo things together. And it doesn't matter\nwhich one is the input.",
    "start": "4669170",
    "end": "4678449"
  },
  {
    "text": "This guy can be in\none of three locations according to which\none it's directed in, which corresponds to the blocks\nbeing away, out of the way.",
    "start": "4678450",
    "end": "4688940"
  },
  {
    "text": "So continuously\nchanging map labelings is going to be hard pretty\nmuch however you slice it.",
    "start": "4688940",
    "end": "4695980"
  },
  {
    "text": "And finally, this problem\nis even more complicated, but it's a well-studied problem\nin computational geometry",
    "start": "4695980",
    "end": "4702360"
  },
  {
    "text": "of searchlights. So there are these dots. And imagine you have\na laser pointer.",
    "start": "4702360",
    "end": "4710770"
  },
  {
    "text": "And so you can shoot a ray\nin any direction of light. And if the laser hits\nthe spy, the spy dies.",
    "start": "4710770",
    "end": "4720031"
  },
  {
    "text": "OK? Your goal is to\neliminate all spies. You have this\nyellow region, which",
    "start": "4720031",
    "end": "4726150"
  },
  {
    "text": "is where all your treasure is. And you want to make sure there\nare no spies in the treasure region.",
    "start": "4726150",
    "end": "4731600"
  },
  {
    "text": "So normally this is a\nfinding-the-spy problem. If you ever see they\nspy, you can capture him.",
    "start": "4731600",
    "end": "4737280"
  },
  {
    "text": "But the spy can move around\nreally fast while you're moving your lasers around. So how do you sweep your\nenvironment with lasers?",
    "start": "4737280",
    "end": "4743940"
  },
  {
    "text": "Turns out it's PSPACE\ncomplete to make sure this region is empty. And I won't go\nthrough the proof.",
    "start": "4743940",
    "end": "4750220"
  },
  {
    "text": "But it's an\norchestration of laser continuous reorientations.",
    "start": "4750220",
    "end": "4756869"
  },
  {
    "text": "And you end up with\nANDs and OR gates, and crossovers-- that's\nthis gadget-- and then",
    "start": "4756870",
    "end": "4763450"
  },
  {
    "text": "the nondeterministic constraint\nlogic's happening down here. You end up clearing all of\nthis space pretty easily.",
    "start": "4763450",
    "end": "4768630"
  },
  {
    "text": "And then there's this\nlittle extra spot that will only be cleared if\nyou get an appropriate laser",
    "start": "4768630",
    "end": "4774440"
  },
  {
    "text": "from this guy. Then you could sweep up\nto there and make sure that it's clear without--\nthe worry is that there's",
    "start": "4774440",
    "end": "4780960"
  },
  {
    "text": "a bad guy over here, and\nhe somehow sneaks back into the other region. That forces some of\nthe lasers to stay",
    "start": "4780960",
    "end": "4786030"
  },
  {
    "text": "where they are, and\nends up simulating nondeterministic\nconstraint logic. Pretty epic proof.",
    "start": "4786030",
    "end": "4791210"
  },
  {
    "text": "But I will leave it at that. And that's all for today. ",
    "start": "4791210",
    "end": "4800168"
  }
]