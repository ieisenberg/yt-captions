[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING] ",
    "start": "0",
    "end": "11270"
  },
  {
    "text": "ANA BELL: So let's get started\nwith lists and mutability.",
    "start": "11270",
    "end": "16610"
  },
  {
    "text": "So last lecture, we\ntalked a lot about what it means to have these mutable\ndata structures, lists.",
    "start": "16610",
    "end": "24290"
  },
  {
    "text": "Today, we're not off the hook. We will continue talking\nabout the idea of mutability, but we're going to do it in\nthe context of removing items",
    "start": "24290",
    "end": "32870"
  },
  {
    "text": "from lists and some of the\npitfalls that come with that. And then we'll go into,\nalong the way, ideas",
    "start": "32870",
    "end": "40039"
  },
  {
    "text": "about cloning or\nmaking copies of lists, and aliasing, making another\nname for the same object",
    "start": "40040",
    "end": "46670"
  },
  {
    "text": "in memory. So first, let's quickly talk\nabout making a copy of a list",
    "start": "46670",
    "end": "53570"
  },
  {
    "text": "because so far,\nwhen we were dealing with these mutable\nobjects, we notice",
    "start": "53570",
    "end": "58700"
  },
  {
    "text": "that it's sometimes inconvenient\nto have to mutate the list,",
    "start": "58700",
    "end": "64349"
  },
  {
    "text": "right? And it's hard to keep\ntrack of the fact that we're mutating a list. And there are some problems\nfor when it does make sense",
    "start": "64349",
    "end": "70790"
  },
  {
    "text": "to make a copy of our list so\nthat we can mutate the copy or mutate the\noriginal while still",
    "start": "70790",
    "end": "76560"
  },
  {
    "text": "having those original\nitems saved somewhere else.",
    "start": "76560",
    "end": "82920"
  },
  {
    "text": "OK? So you can ask Python to\nmake a copy of a list. And basically,\nbehind the scenes,",
    "start": "82920",
    "end": "89460"
  },
  {
    "text": "it creates a new list object\nfor us in memory and copies over every single element\nfrom the list you'd",
    "start": "89460",
    "end": "95340"
  },
  {
    "text": "like to copy into the new list. OK? So the syntax for doing a\ncopy of a list is as follows.",
    "start": "95340",
    "end": "103180"
  },
  {
    "text": "So we've got a list that's\nalready made called L. And we want to\nmake a copy of it.",
    "start": "103180",
    "end": "108730"
  },
  {
    "text": "So the syntax is\nL squared brackets with a colon inside it. And behind the scenes, Python\nmakes this list inside memory.",
    "start": "108730",
    "end": "115860"
  },
  {
    "text": "And then we save\nthat new list that has the exact same elements\nas L into a list named Lcopy.",
    "start": "115860",
    "end": "123689"
  },
  {
    "text": "OK. And so in memory,\nthe way this looks-- so if I have this code\nhere where I name my list",
    "start": "123690",
    "end": "129360"
  },
  {
    "text": "Loriginal-- again, I'm choosing\na different name than L just to show you that\nwhatever list object I have,",
    "start": "129360",
    "end": "135690"
  },
  {
    "text": "that's the name I\nneed to reference. So if I have Loriginal\nis 4, 5, 6 in memory,",
    "start": "135690",
    "end": "140820"
  },
  {
    "text": "if I want to make\na copy of my list, I just say Loriginal\nsquare brackets with a colon inside it.",
    "start": "140820",
    "end": "146700"
  },
  {
    "text": "That means copy\nevery single element from beginning to\nend of this list and bind it to the name Lnew.",
    "start": "146700",
    "end": "154590"
  },
  {
    "text": "So notice-- in memory now,\nI have two list objects. They're referenced\nby different names.",
    "start": "154590",
    "end": "159910"
  },
  {
    "text": "And so if I change one\nof them, the other one will not change, right? They're now completely\nseparate objects.",
    "start": "159910",
    "end": "168040"
  },
  {
    "text": "OK. So we're starting\nthis lecture off with a quick little\nexercise just to get you to remember\nwhat we did last time",
    "start": "168040",
    "end": "175060"
  },
  {
    "text": "and to practice writing\na little bit of code with mutable objects.",
    "start": "175060",
    "end": "180260"
  },
  {
    "text": "So I would like you to\nwrite this function called remove_all. This is going to feel\nvery similar to something",
    "start": "180260",
    "end": "187030"
  },
  {
    "text": "we did last lecture. So last lecture, I asked you\nto write a similar function, which took in a list\nL and an element E.",
    "start": "187030",
    "end": "193510"
  },
  {
    "text": "And that function\nfrom last lecture created a new list and\nthen basically populated",
    "start": "193510",
    "end": "200200"
  },
  {
    "text": "that new list with\nall the elements-- it had all the\nsame elements as L",
    "start": "200200",
    "end": "205390"
  },
  {
    "text": "except for omitting the\nones that were equal to E. OK. This version that I would\nlike you to write for me",
    "start": "205390",
    "end": "212260"
  },
  {
    "text": "is not going to create a new\nlist and return this new list. It will mutate my input\nL such that you're",
    "start": "212260",
    "end": "221390"
  },
  {
    "text": "going to only keep the elements\nfrom L that do not match E.",
    "start": "221390",
    "end": "228319"
  },
  {
    "text": "OK. So I'm going to give you\na hint for how to do this. So the process for this is\ngoing to make use of this thing",
    "start": "228320",
    "end": "236960"
  },
  {
    "text": "that we just saw, which is,\nI want you to first save the list as is into a copy.",
    "start": "236960",
    "end": "242180"
  },
  {
    "text": "And then at the end\nof last lecture, we saw a way for us\nto mutate a list, to empty it out of\nall the elements.",
    "start": "242180",
    "end": "249090"
  },
  {
    "text": "So we still have that\nobject in memory, but we're just essentially\nclearing it out. We remove all the\nelements from it.",
    "start": "249090",
    "end": "255209"
  },
  {
    "text": "So first, make a copy\nand save the elements. Then clear the list\nwe want to mutate--",
    "start": "255210",
    "end": "260660"
  },
  {
    "text": "L. And then iterate\nthrough the copy and add all of the elements\nthat do not equal E back into L.",
    "start": "260660",
    "end": "270480"
  },
  {
    "text": "So that should be the process. And in the end, when we call\nthis remove_all function,",
    "start": "270480",
    "end": "275789"
  },
  {
    "text": "the thing that we're passing\nin will have been mutated. We don't have\nanything to return.",
    "start": "275790",
    "end": "281380"
  },
  {
    "text": "We're just mutating the\nthing that's being passed in. So I'll give you a couple\nminutes to work on that.",
    "start": "281380",
    "end": "287250"
  },
  {
    "text": "And you can start writing\nit around line 30. ",
    "start": "287250",
    "end": "294979"
  },
  {
    "text": "OK. Does anyone have some\ncode to start with?",
    "start": "294980",
    "end": "300580"
  },
  {
    "text": "Yes. STUDENT: Initialize new list? ANA BELL: Yup. Initialize a new list. Yep.",
    "start": "300580",
    "end": "307203"
  },
  {
    "text": "What do you want to call it? Lnew? Good name. Lnew equals-- how do we make\na copy, and what do we copy?",
    "start": "307203",
    "end": "313970"
  },
  {
    "text": " STUDENT: Why do we\ncopy [INAUDIBLE] added to the ones that aren't equal?",
    "start": "313970",
    "end": "321750"
  },
  {
    "text": "ANA BELL: So what we'd like\nto do is mutate L, right? But L already contains a\nbunch of items in it, right?",
    "start": "321750",
    "end": "329729"
  },
  {
    "text": "So that's why we first want\nto make a copy of it, right? So just like in the\nsyntax from the slides,",
    "start": "329730",
    "end": "335980"
  },
  {
    "text": "this will essentially\nsave for us everything that we already have\nin L in a new list called Lnew.",
    "start": "335980",
    "end": "343220"
  },
  {
    "text": "OK. So now that we have\nthat, does anyone-- yeah.",
    "start": "343220",
    "end": "348580"
  },
  {
    "text": "STUDENT: I used L.clear. ANA BELL: So L.clear does not\ntake a parameter in, right?",
    "start": "348580",
    "end": "355460"
  },
  {
    "text": "It's just a function\nthat empties out L fully. So it'll basically drop every\nsingle element in L. OK?",
    "start": "355460",
    "end": "362449"
  },
  {
    "text": "But we will see a function\nthat will remove elements. OK?",
    "start": "362450",
    "end": "367640"
  },
  {
    "text": "So if we do L.clear, then L\nbecomes the empty list, right?",
    "start": "367640",
    "end": "373940"
  },
  {
    "text": "L just becomes this. So now that I've\nmutated my object to contain none of\nmy elements in it,",
    "start": "373940",
    "end": "379730"
  },
  {
    "text": "how do I add back\nin the elements that satisfy the condition? ",
    "start": "379730",
    "end": "392169"
  },
  {
    "text": "Yeah. So for n in Lnew-- so I'm iterating over the\nlist that actually contains",
    "start": "392170",
    "end": "399360"
  },
  {
    "text": "stuff, the thing I've copied. And then-- STUDENT: You can just be\nlike, if e not equal to n,",
    "start": "399360",
    "end": "406303"
  },
  {
    "text": "then you want\nappend [INAUDIBLE].. ANA BELL: Yeah, exactly. L.append. So notice-- I am\nappending to L, but I'm",
    "start": "406303",
    "end": "417440"
  },
  {
    "text": "iterating over Lnew, right? Lnew has all of\nthese elements in it. I want to touch each element\nto see what value it has.",
    "start": "417440",
    "end": "423920"
  },
  {
    "text": "If it's not equal to the\none from the parameter e, then I add it to my list, L,\nthe one that's currently empty.",
    "start": "423920",
    "end": "432140"
  },
  {
    "text": "OK? And then do I need\nto return anything? ",
    "start": "432140",
    "end": "437910"
  },
  {
    "text": "We don't need to return--\nit won't hurt to return L, but L will already be mutated\nby virtue of this function.",
    "start": "437910",
    "end": "445389"
  },
  {
    "text": "So we don't need to\nreturn any L. Right? L is my parameter\nthat I've passed in.",
    "start": "445390",
    "end": "451560"
  },
  {
    "text": "So there's nothing to return. It's just being mutated\nin the function.",
    "start": "451560",
    "end": "458650"
  },
  {
    "text": "So when I make my function\ncall here, I'm passing an L in. I'm just making a call to remove\nall with this Lin object, which",
    "start": "458650",
    "end": "468480"
  },
  {
    "text": "is this one here. And notice-- I'm not saving\nthe return from this function",
    "start": "468480",
    "end": "474690"
  },
  {
    "text": "to anything, right? Because this function will just\nmutate whatever I passed in. And then if I just\nprint the value of Lin",
    "start": "474690",
    "end": "482940"
  },
  {
    "text": "after this function call,\nit'll print the mutated value.",
    "start": "482940",
    "end": "488032"
  },
  {
    "text": "STUDENT: So when we're\nappending n [INAUDIBLE]?? ANA BELL: Yes, sorry. We should append.",
    "start": "488032",
    "end": "493680"
  },
  {
    "text": "Thank you. Yep. And that looked weird. Perfect.",
    "start": "493680",
    "end": "499020"
  },
  {
    "text": "And so if I run the other two\nexamples here, I'm removing 1. So it should just show\nme a list with all 2.",
    "start": "499020",
    "end": "506490"
  },
  {
    "text": "And here I'm removing 0. And 0 doesn't even exist, so it\ndoesn't mutate that input list",
    "start": "506490",
    "end": "512860"
  },
  {
    "text": "at all.  OK.",
    "start": "512860",
    "end": "519450"
  },
  {
    "text": "So now, we can start talking\nabout other operations on lists which deal\nwith removing lists",
    "start": "519450",
    "end": "526540"
  },
  {
    "text": "and making the lists smaller. So we're actually going to take\nelements away from the list.",
    "start": "526540",
    "end": "531930"
  },
  {
    "text": "And this is similar to what\nthe suggestion was instead of",
    "start": "531930",
    "end": "537210"
  },
  {
    "text": "to clear out a specific\nelement, right? But the clear function\nremoves all the elements.",
    "start": "537210",
    "end": "542610"
  },
  {
    "text": "However, these functions\nwill remove certain elements from our lists. So there's three different\nways that are on this slide.",
    "start": "542610",
    "end": "549390"
  },
  {
    "text": "And I'm going to show you\nan example with this list L, showcasing what each one\nof these functions do.",
    "start": "549390",
    "end": "554980"
  },
  {
    "text": "But first, I'll\njust explain them. So one option for removing\nan item from a list is if you know the index\nof the item you want",
    "start": "554980",
    "end": "562013"
  },
  {
    "text": "to remove, like\nyou want to remove the very first one in the list,\nor the last one in the list, or the halfway point,\nor something like that,",
    "start": "562013",
    "end": "568080"
  },
  {
    "text": "you can tell Python to\nremove the item from list L at a particular\nindex with this del",
    "start": "568080",
    "end": "574860"
  },
  {
    "text": "parentheses-- so\nthis function del. And you pass in L at whatever\nindex you want to remove.",
    "start": "574860",
    "end": "582290"
  },
  {
    "text": "Now, sometimes, you\nwant to remove the item all the way at the\nend of the list--",
    "start": "582290",
    "end": "587820"
  },
  {
    "text": "so the farthest-most right. In that case, there's\nan operation called pop.",
    "start": "587820",
    "end": "593830"
  },
  {
    "text": "And you call pop on\nlist L. So if you just say L.pop with nothing\nin the parentheses,",
    "start": "593830",
    "end": "598930"
  },
  {
    "text": "Python will automatically grab\nthat last value from the list and drop it from the list.",
    "start": "598930",
    "end": "604070"
  },
  {
    "text": "OK. Now, pop is a little\nbit interesting because it has a return value.",
    "start": "604070",
    "end": "610490"
  },
  {
    "text": "We're using this\ndot notation, which we used with append and clear\nand a bunch of other things",
    "start": "610490",
    "end": "616310"
  },
  {
    "text": "from last lecture. But here this pop--\nnot only does it have the side effect of\nmutating my list by dropping",
    "start": "616310",
    "end": "622879"
  },
  {
    "text": "the last element from it, but\nit also returns something. So this function call\nhere will return for me",
    "start": "622880",
    "end": "629060"
  },
  {
    "text": "the value of the element that\ngot dropped, just in case you want to do\nsomething with it.",
    "start": "629060",
    "end": "636860"
  },
  {
    "text": "And lastly, if you\nknow element you'd like to remove\nspecifically, so if you have a list of a\nbunch of names and you",
    "start": "636860",
    "end": "643090"
  },
  {
    "text": "want to remove Anna from\nthat list and the string Anna is what you'd\nlike to remove, you do that using the\nfunction L.remove.",
    "start": "643090",
    "end": "651339"
  },
  {
    "text": "So whatever lists your\nnames are part of, you say that list.remove. And then you pass it in the\nstring Anna or the number 5",
    "start": "651340",
    "end": "659050"
  },
  {
    "text": "or whatever actual element\nyou'd like to remove. OK. Now, if there are many\nelements that match that value,",
    "start": "659050",
    "end": "668440"
  },
  {
    "text": "if there's many Annas\nin my list of names, it will only remove the\nfirst one it finds-- so from index 0.",
    "start": "668440",
    "end": "674378"
  },
  {
    "text": "All the other ones will remain. You'll have to call\nthat function again. So let's look at\nthis example here.",
    "start": "674378",
    "end": "680240"
  },
  {
    "text": "I've got this list of\nseven elements within it.",
    "start": "680240",
    "end": "685839"
  },
  {
    "text": "Let's do a few of these\noperations all in a row. So each one of these\noperations will mutate my list.",
    "start": "685840",
    "end": "692050"
  },
  {
    "text": "So the operation right after it\nwill work on the mutated list. OK. So let's start with this\nL. If we say L.remove 2,",
    "start": "692050",
    "end": "700750"
  },
  {
    "text": "Python will look for the\nelement whose value is 2. Well, there it is.",
    "start": "700750",
    "end": "705880"
  },
  {
    "text": "It's at the front of my list. That's fine. And Python will\nremove that element. So this list will now be one\nelement less shorter, right?",
    "start": "705880",
    "end": "713890"
  },
  {
    "text": "And that 2 is going to be gone. So the list L will now be\nmutated to be 1, 3, 6, 3, 7, 0.",
    "start": "713890",
    "end": "721509"
  },
  {
    "text": "All right. Well, what if we\nremove 3 now, right? So we've done the\noperation to remove 2.",
    "start": "721510",
    "end": "726530"
  },
  {
    "text": "We've ended up with\nthis mutated list. Now, what if we remove 3\nfrom this mutated list?",
    "start": "726530",
    "end": "732350"
  },
  {
    "text": "There's two of them\nin there, right? The element that's\ngoing to be removed",
    "start": "732350",
    "end": "737660"
  },
  {
    "text": "is the first one it finds--\nso just this one here. And again, this is an\noperation that mutates my list.",
    "start": "737660",
    "end": "744149"
  },
  {
    "text": "So this list here\nthat I've started with would be one element shorter.",
    "start": "744150",
    "end": "751850"
  },
  {
    "text": "And that 3 will have\nbeen removed, right? So now, I've got 1, 6, 3, 7, 0. ",
    "start": "751850",
    "end": "758930"
  },
  {
    "text": "All right. What if we want to delete an\nelement at a particular index? So now again, we're working\nwith the mutated list--",
    "start": "758930",
    "end": "765520"
  },
  {
    "text": "1, 6, 3, 7, 0. This del function takes an\nindex in a specific list",
    "start": "765520",
    "end": "773410"
  },
  {
    "text": "and removes the\nelement that is there. So in this case, I want to\nremove the element at index 1.",
    "start": "773410",
    "end": "779199"
  },
  {
    "text": "So in this list here,\nthe element at index 1 is the 6, right? This is 0.",
    "start": "779200",
    "end": "784480"
  },
  {
    "text": "This is 1. So the 6 will be removed. And my list will be\nmutated to just contain",
    "start": "784480",
    "end": "790235"
  },
  {
    "text": "these four elements-- 1, 3, 7, and 0. And lastly, if we\npop, that function",
    "start": "790235",
    "end": "799540"
  },
  {
    "text": "will just remove the element\nat the end of the list. The element at the end\nof the list is this 0.",
    "start": "799540",
    "end": "805210"
  },
  {
    "text": "So the list through\nthe side effect of pop is going to be mutated to\ncontain just the three elements",
    "start": "805210",
    "end": "813310"
  },
  {
    "text": "except for the last one. So it'll contain 1, 3, and 7. And additionally,\nif I'd like to save",
    "start": "813310",
    "end": "819820"
  },
  {
    "text": "the value of the\nelement that got removed from the end of the list, the\n0, you can because this function",
    "start": "819820",
    "end": "828220"
  },
  {
    "text": "call here-- L.pop-- you can save the\nreturn value into a variable.",
    "start": "828220",
    "end": "835790"
  },
  {
    "text": "None of the other\nones-- del or remove-- have any return, right?",
    "start": "835790",
    "end": "841690"
  },
  {
    "text": "So if you saved a variable\nfrom the function call to a variable, that\nvariable will be none.",
    "start": "841690",
    "end": "848620"
  },
  {
    "text": "Pop is special because\nit actually grabs that variable value\nand returns it.",
    "start": "848620",
    "end": "855500"
  },
  {
    "text": "OK. So all of these operations\nmutate the list, right? So that means as we did\noperation after operation,",
    "start": "855500",
    "end": "862510"
  },
  {
    "text": "we were working with\nthe mutated list.  OK.",
    "start": "862510",
    "end": "868579"
  },
  {
    "text": "Yes, there was a question. STUDENT: Yeah. It should still be L1-- the third one to the left.",
    "start": "868580",
    "end": "874857"
  },
  {
    "text": "ANA BELL: I'm sorry. Say it again. STUDENT: In the third\none, you said delete L1. ANA BELL: L at index 1.",
    "start": "874857",
    "end": "880170"
  },
  {
    "text": "Yeah. So the L at index 1\nhere works on the list we have just mutated. So this one.",
    "start": "880170",
    "end": "885230"
  },
  {
    "text": "The element at index 1 is the 6. STUDENT: Sorry. ANA BELL: Oh, yeah. Yeah. No worries.",
    "start": "885230",
    "end": "891860"
  },
  {
    "text": "OK. So let's look at the code\nwe just wrote in the you try it exercise. And try to rewrite it using\nthis remove operation.",
    "start": "891860",
    "end": "898839"
  },
  {
    "text": "Well, the way we\ncan think of it is we'd like to remove the\nelement that is e, right?",
    "start": "898840",
    "end": "905310"
  },
  {
    "text": "So we know the value of the\nelement we'd like to remove. It's 3, or 5, or 1,\nor 2, or whatever.",
    "start": "905310",
    "end": "911570"
  },
  {
    "text": "So that's e. And we know of an\noperation that can remove the element from the list.",
    "start": "911570",
    "end": "917120"
  },
  {
    "text": "It's called remove,\nunsurprisingly. So what we can do is\nwe can say, L.remove e.",
    "start": "917120",
    "end": "924180"
  },
  {
    "text": "right? And that would remove\nthe first instance of the element in\nthe list, but I might have many of these\nelements in my list.",
    "start": "924180",
    "end": "931400"
  },
  {
    "text": "So we can just write\na little while loop around this operation. And we say, while we still\nhave this value in our list,",
    "start": "931400",
    "end": "939380"
  },
  {
    "text": "remove it. Right? So that's what this\nwhile loop is doing. e in L is going to be there true\nor false, whether the number 5",
    "start": "939380",
    "end": "948639"
  },
  {
    "text": "or whatever is in my list. And as long as I still have a 5\nin my list, call L.remove on 5",
    "start": "948640",
    "end": "955779"
  },
  {
    "text": "or whatever it is. So nice little two-liner here\nto solve the same problem.",
    "start": "955780",
    "end": "965640"
  },
  {
    "text": "Now, what if we rewrote that\ncode in a slightly different way, again using remove,\nbut let's say maybe",
    "start": "965640",
    "end": "971816"
  },
  {
    "text": "we didn't realize we\ncould use a while loop? And instead, we used a\nfor loop to iterate over",
    "start": "971817",
    "end": "976920"
  },
  {
    "text": "each element in L. And if\nthat element is equal to e, remove it.",
    "start": "976920",
    "end": "983780"
  },
  {
    "text": "Right? Seems reasonable. So what would happen? And I can run it for you guys.",
    "start": "983780",
    "end": "991240"
  },
  {
    "text": "So if we run it\nwith this code here, this is the one from the\nslides, just to show you",
    "start": "991240",
    "end": "999870"
  },
  {
    "text": "that I'm not making it up. So if this is the\ncode that we wrote, I tried to remove\nthe 2 from the list.",
    "start": "999870",
    "end": "1006120"
  },
  {
    "text": "And when I printed the result,\nit actually printed 1, 2. So I have two elements\nleft in my list.",
    "start": "1006120",
    "end": "1014060"
  },
  {
    "text": "It looks like it didn't\ncorrectly remove a 2. ",
    "start": "1014060",
    "end": "1023110"
  },
  {
    "text": "And at first, it's surprising\nwhy this is, right? Because the code looks right.",
    "start": "1023110",
    "end": "1030230"
  },
  {
    "text": "It seems to work just fine. But let's step through\nthis memory diagram",
    "start": "1030230",
    "end": "1035750"
  },
  {
    "text": "and see exactly what\nhappens step-by-step, so with each iteration\nof our for loop.",
    "start": "1035750",
    "end": "1041560"
  },
  {
    "text": "So originally, I've got L\ncontaining 1, 2, 2, right? So far, so good. That's just us doing\nthis line here.",
    "start": "1041560",
    "end": "1048750"
  },
  {
    "text": "And then I make a function\ncall to remove all. So I want to remove the\nnumber 2 from my list.",
    "start": "1048750",
    "end": "1055930"
  },
  {
    "text": "I've got a for loop, where my\nloop variable is called elem. And it will iterate through\neach element in my sequence",
    "start": "1055930",
    "end": "1064710"
  },
  {
    "text": "where my sequence is\nall the elements in L. So first, it will be 1, right?",
    "start": "1064710",
    "end": "1070080"
  },
  {
    "text": "Then it will be the next\nvalue in the sequence-- 2, and then 2, and then 2. Right? So here I've just got elem\ninitialized to the first value",
    "start": "1070080",
    "end": "1077429"
  },
  {
    "text": "in the sequence. If elem equal equal e, well,\nthe 1 does not equal the 2. So then we do not\nremove anything.",
    "start": "1077430",
    "end": "1085300"
  },
  {
    "text": "Next, the for loop goes\non to the next value in my sequence-- the 2. So now, elem is 2.",
    "start": "1085300",
    "end": "1092300"
  },
  {
    "text": "And if elem equal\nequal 2, it does equal 2, what am I going to do?",
    "start": "1092300",
    "end": "1098970"
  },
  {
    "text": "Well, I need to do L.remove e. So this is where\nbad things happen.",
    "start": "1098970",
    "end": "1105529"
  },
  {
    "text": "I'm going to remove an\nelement from my list, right? So I still have those\nthree 2s in there.",
    "start": "1105530",
    "end": "1110700"
  },
  {
    "text": "But as soon as I\ndrop one of the 2s, all the elements beyond\nthat 2 shift over.",
    "start": "1110700",
    "end": "1116510"
  },
  {
    "text": " But Python doesn't know\nthat it should also",
    "start": "1116510",
    "end": "1122900"
  },
  {
    "text": "shift over the pointer. Right? It's still pointing to that\nelement that it's currently at.",
    "start": "1122900",
    "end": "1130190"
  },
  {
    "text": "It's not going to shift\nitself backward just because you removed an element. And so Python just finished\nremoving the element.",
    "start": "1130190",
    "end": "1139549"
  },
  {
    "text": "And now, it says I\nfinished this loop through. So I need to go back up\nhere and make element be",
    "start": "1139550",
    "end": "1145010"
  },
  {
    "text": "the next value in my sequence-- the next 2. So I've essentially\nskipped over one thing",
    "start": "1145010",
    "end": "1153210"
  },
  {
    "text": "that I needed to remove\nbecause when I remove the item, everything else\nshifted over as well,",
    "start": "1153210",
    "end": "1159690"
  },
  {
    "text": "but my pointer didn't decrement. OK. So this is a big problem.",
    "start": "1159690",
    "end": "1166070"
  },
  {
    "text": "We can finish off here, but\nwe've already seen the problem. The last time through the\nloop, Python sees-- well,",
    "start": "1166070",
    "end": "1173659"
  },
  {
    "text": "is this 2 equal to the\nthing I want to remove? It is. So it removes it.",
    "start": "1173660",
    "end": "1178720"
  },
  {
    "text": "And this is the end. It has no more values left\nto go through in the sequence because its pointer is\nalready out of the bounds.",
    "start": "1178720",
    "end": "1188132"
  },
  {
    "text": "OK. Is everyone OK with that issue? OK. So the problem\nhere with remove is",
    "start": "1188132",
    "end": "1194850"
  },
  {
    "text": "that we're iterating over a\nlist as we're mutating it. Right? And so removing these items can\ncause unpredictable behavior.",
    "start": "1194850",
    "end": "1203370"
  },
  {
    "text": "Something like this could still\nhappen if we were adding items, except that we're\nusually adding items",
    "start": "1203370",
    "end": "1209970"
  },
  {
    "text": "to the end of the\nlist with append. If we were adding items\nsomewhere in the middle",
    "start": "1209970",
    "end": "1215070"
  },
  {
    "text": "or somewhere around where our\npointer is supposed to be, I think we could theoretically\nrun into the same issue",
    "start": "1215070",
    "end": "1220620"
  },
  {
    "text": "when we're adding items\nwhere we might skip elements or we might see\nan element twice.",
    "start": "1220620",
    "end": "1225820"
  },
  {
    "text": "OK? It's just more apparent\nwhen we're removing items. ",
    "start": "1225820",
    "end": "1231250"
  },
  {
    "text": "So this is the big\nthing that we're going to talk about in this lecture. So I'm going to go\nthrough another example.",
    "start": "1231250",
    "end": "1236400"
  },
  {
    "text": "This is tricky example\nnumber 4, where we're going to do a\nvery similar thing, but we're going to have a loop\niterating over L's elements",
    "start": "1236400",
    "end": "1245070"
  },
  {
    "text": "directly, just like we did,\nbut doing a different task just so we're not doing that\nsame remove_all task.",
    "start": "1245070",
    "end": "1253730"
  },
  {
    "text": "So let's look at a\nslightly different problem. This will be in the context\nof a function called",
    "start": "1253730",
    "end": "1259029"
  },
  {
    "text": "remove_duplicates. This function will\ntake in two lists.",
    "start": "1259030",
    "end": "1264340"
  },
  {
    "text": "So as an example\nhere, I've got a list with 10, 20, 30, and 40 in it. And I've got another list\nwith 10, 20, 50, and 60 in it.",
    "start": "1264340",
    "end": "1272950"
  },
  {
    "text": "The purpose of this function\nis to mutate L1, OK?",
    "start": "1272950",
    "end": "1278620"
  },
  {
    "text": "And the way I want\nto mutate L1 is such that if an element in L1 is\nalso in L2, I want to remove it.",
    "start": "1278620",
    "end": "1289230"
  },
  {
    "text": "All right. So the 10 and the 20, notice,\nare common to L1 and L2. So I would like to remove\nthe 10 and the 20 from L1.",
    "start": "1289230",
    "end": "1297260"
  },
  {
    "text": "The 30 and the 40 stay because\nthere's no 30 or 40 in L2. ",
    "start": "1297260",
    "end": "1304110"
  },
  {
    "text": "So that's our task. And this is the code that\nsupposedly does this.",
    "start": "1304110",
    "end": "1309550"
  },
  {
    "text": "So I've got a loop that goes\nthrough each element in L1-- so 10, then 20,\nthen 30, then 40.",
    "start": "1309550",
    "end": "1315360"
  },
  {
    "text": "And I ask if that\nelement is in L2. So here they are.",
    "start": "1315360",
    "end": "1320430"
  },
  {
    "text": "There's two of them here. Then remove it from L1. Very similar thing\nto what we just did.",
    "start": "1320430",
    "end": "1326990"
  },
  {
    "text": "This code doesn't work\nbecause if we actually run it, in the end, Python\nwill mutate L1",
    "start": "1326990",
    "end": "1334100"
  },
  {
    "text": "to contain the 20, and\nthe 30, and the 40, right? Whereas we only want it\nto keep the 30 and the 40",
    "start": "1334100",
    "end": "1341150"
  },
  {
    "text": "because the 20 also\nappeared in L2. So why in the world\ndid we keep it? Well, we kept it because\nof the same issue",
    "start": "1341150",
    "end": "1347970"
  },
  {
    "text": "that we just saw, where mutating\na list as we're iterating over",
    "start": "1347970",
    "end": "1353309"
  },
  {
    "text": "it and we're doing a removal-- so we're again skipping\nover an element. So let's just step\nthrough this one just",
    "start": "1353310",
    "end": "1359730"
  },
  {
    "text": "to show you again\nwhat can happen. So here I've got 10,\n20, 30, 40 for L1,",
    "start": "1359730",
    "end": "1364800"
  },
  {
    "text": "and 10, 20, 50, 60\nfor L2 in my loop. My variable is e, so\nfirst, it'll be 10.",
    "start": "1364800",
    "end": "1373260"
  },
  {
    "text": "And we ask, if 10 is in L2-- that's true-- remove it from L1.",
    "start": "1373260",
    "end": "1379380"
  },
  {
    "text": "So you can see what's\ngoing to happen. My 10 is removed. Everything else\nshifts over by 1,",
    "start": "1379380",
    "end": "1386130"
  },
  {
    "text": "but my loop index stays fixed.",
    "start": "1386130",
    "end": "1391980"
  },
  {
    "text": "Next, Python says, I'm going\nto increment my variable e",
    "start": "1391980",
    "end": "1398070"
  },
  {
    "text": "to go to the next\nitem in my sequence. So e becomes the 30.",
    "start": "1398070",
    "end": "1404130"
  },
  {
    "text": "And already, I've\nskipped over one element that I was interested\nin removing.",
    "start": "1404130",
    "end": "1410990"
  },
  {
    "text": "So here when we're\npointing to the 30, Python says, well,\nthe 30 is not in L2. So we don't do anything.",
    "start": "1410990",
    "end": "1417380"
  },
  {
    "text": "And then it points to the 40. The 40 is not in L2. So we don't do anything. And then the code is done.",
    "start": "1417380",
    "end": "1422929"
  },
  {
    "text": "And we've erroneously finished\nwith mutating L1 to just be the 20, 30, and the 40.",
    "start": "1422930",
    "end": "1431110"
  },
  {
    "text": "OK. So let's try to rewrite\nthe code to actually work",
    "start": "1431110",
    "end": "1437100"
  },
  {
    "text": "by using copies. So we certainly could\nuse the same trick we did with the first you\ntry it exercise, where",
    "start": "1437100",
    "end": "1445049"
  },
  {
    "text": "we could make a copy, clear L1,\nand then add the elements back.",
    "start": "1445050",
    "end": "1450390"
  },
  {
    "text": "We could do that. But we can also do a slightly\ndifferent version of that where, again, we make a copy.",
    "start": "1450390",
    "end": "1456120"
  },
  {
    "text": "So here I've got L1_copy\nequals L1 square bracket colon.",
    "start": "1456120",
    "end": "1461650"
  },
  {
    "text": "And then the key thing here is\nwe're iterating over the copy, right?",
    "start": "1461650",
    "end": "1467430"
  },
  {
    "text": "So if we iterate over\nthe copy, we're not going to mutate the copy,\nbut we will mutate L1.",
    "start": "1467430",
    "end": "1473150"
  },
  {
    "text": "So for the for loop,\nvariable goes over the copy,",
    "start": "1473150",
    "end": "1478460"
  },
  {
    "text": "but the removal is done from L1. So to visualize that,\nthis is what happens.",
    "start": "1478460",
    "end": "1486050"
  },
  {
    "text": "So I've got L1 and L2 as before. So when I make my function\ncall here, I have L1_copy",
    "start": "1486050",
    "end": "1493210"
  },
  {
    "text": "equals L1 square bracket colon. So this makes for\nme a new variable inside memory, which is an\nexact duplicate, copy or clone,",
    "start": "1493210",
    "end": "1501580"
  },
  {
    "text": "of L1. OK. So every one of my\nelements is now saved.",
    "start": "1501580",
    "end": "1507769"
  },
  {
    "text": "So I can do whatever\nI'd like to L1 and know that I can\nstill have a way",
    "start": "1507770",
    "end": "1513020"
  },
  {
    "text": "to iterate and look at each\nvariable from the original L1.",
    "start": "1513020",
    "end": "1519510"
  },
  {
    "text": "So now, my loop variable e\ngoes over elements in L1 copy.",
    "start": "1519510",
    "end": "1525435"
  },
  {
    "text": " So first, we look at the 10. And I say, if the 10\nis in L2-- it is--",
    "start": "1525435",
    "end": "1532889"
  },
  {
    "text": "remove it from L1. So notice-- I have just\nmutated L1, not the copy, to be one element less.",
    "start": "1532890",
    "end": "1541440"
  },
  {
    "text": "Then the loop variable e goes to\nthe next value in my sequence. So I'm not skipping\nanything here because I",
    "start": "1541440",
    "end": "1547110"
  },
  {
    "text": "didn't mutate L1_copy. So now we look at the 20\ncorrectly this time, right?",
    "start": "1547110",
    "end": "1552360"
  },
  {
    "text": "So now we ask, is the 20 in L2? It is, so we remove it from L1.",
    "start": "1552360",
    "end": "1557580"
  },
  {
    "text": "And then the 30 and\nthe 40, we do nothing. ",
    "start": "1557580",
    "end": "1562720"
  },
  {
    "text": "Questions about this? Is this OK? Is this too fast? Is this too slow? ",
    "start": "1562720",
    "end": "1569690"
  },
  {
    "text": "Good. OK. OK. So that's using copies, a.k.a.\nclones to help you keep track",
    "start": "1569690",
    "end": "1580990"
  },
  {
    "text": "of values in an original\nlist without overwriting them or without removing\nthem accidentally.",
    "start": "1580990",
    "end": "1587800"
  },
  {
    "text": "Now, I want to\ntalk about aliases because this is a very\nimportant topic when we have these mutable data structures.",
    "start": "1587800",
    "end": "1594740"
  },
  {
    "text": "So let's do a quick overview\nof what an alias is. So if we think about a city--",
    "start": "1594740",
    "end": "1601510"
  },
  {
    "text": "for example, Boston--\nan alias for Boston is basically any other name that\nrefers to the same city, right?",
    "start": "1601510",
    "end": "1608110"
  },
  {
    "text": "The same object. So Boston, also known as the\nHub, or Beantown, or Athens",
    "start": "1608110",
    "end": "1613270"
  },
  {
    "text": "of America-- all of these names refer to\nthe same inherent city, right?",
    "start": "1613270",
    "end": "1618400"
  },
  {
    "text": "So if I say Boston is\nsmall and tech-savvy, then those two attributes or\nproperties refer to the object",
    "start": "1618400",
    "end": "1626890"
  },
  {
    "text": "itself, right? The city. So the Hub is small\nand tech-savvy, or Beantown is small\nand tech-savvy, right?",
    "start": "1626890",
    "end": "1632770"
  },
  {
    "text": "It doesn't matter what name\nI refer to this object as.",
    "start": "1632770",
    "end": "1638440"
  },
  {
    "text": "The same set of properties\nstill apply to it. And so if I add an attribute\nor if I take away an attribute",
    "start": "1638440",
    "end": "1644980"
  },
  {
    "text": "through one of these aliases,\nthrough one of these names, well, if it's suddenly\nsnowing in Boston,",
    "start": "1644980",
    "end": "1651520"
  },
  {
    "text": "then yes, it's\nsnowing in the Hub or it's snowing in\nBeantown, right? Because these are just\nnames for the same object.",
    "start": "1651520",
    "end": "1658580"
  },
  {
    "text": "And so that idea\nis also something that comes up when we deal\nwith these mutable objects.",
    "start": "1658580",
    "end": "1665250"
  },
  {
    "text": " If you don't\nexplicitly tell Python you'd like to make\na copy of a list",
    "start": "1665250",
    "end": "1672620"
  },
  {
    "text": "and you just use the equal\nsign between a mutable object",
    "start": "1672620",
    "end": "1677830"
  },
  {
    "text": "and another name for\nthis mutable object, then Python only creates\nan alias for that object.",
    "start": "1677830",
    "end": "1685430"
  },
  {
    "text": "So notice-- we had\nto say explicitly, I want to make a copy with\nthe square brackets colon. If we write code that\nlooks like this--",
    "start": "1685430",
    "end": "1692630"
  },
  {
    "text": "so here the only\ndifference I've done-- so the code on the right\nis the one that worked. The code on the left is me\nnot making a copy of my L1.",
    "start": "1692630",
    "end": "1701290"
  },
  {
    "text": "I'm only using the\nequal sign directly.",
    "start": "1701290",
    "end": "1706400"
  },
  {
    "text": "And in Python, using\nthis assignment operator, the equals sign, means\nthat you're making an alias",
    "start": "1706400",
    "end": "1716240"
  },
  {
    "text": "for that same object in memory. So it's just another name to\nrefer to that same object.",
    "start": "1716240",
    "end": "1722510"
  },
  {
    "text": "If you mutate that\nobject through L1, L1_copy will also\nhave been mutated",
    "start": "1722510",
    "end": "1728090"
  },
  {
    "text": "because it's pointing to the\nsame object and vice versa. So really, this particular\ncode on the left",
    "start": "1728090",
    "end": "1734760"
  },
  {
    "text": "here is not any better\nthan saying for e in L1 because L1_copy is pointing\nto the exact same object",
    "start": "1734760",
    "end": "1742679"
  },
  {
    "text": "in memory. OK. So let me show you exactly what\nthis means in the little cloud",
    "start": "1742680",
    "end": "1749470"
  },
  {
    "text": "diagram that we've been doing. So this is the code that\ncreates an alias, not a copy.",
    "start": "1749470",
    "end": "1757870"
  },
  {
    "text": "So I've got L1 equals\n10, 20, 30, 40. L2 is 10, 20, 50,\n60, just like before.",
    "start": "1757870",
    "end": "1765100"
  },
  {
    "text": "The code up here-- so\nL1_copy equals L1-- I just named it\ncopy, but it's not actually making a copy, right?",
    "start": "1765100",
    "end": "1771730"
  },
  {
    "text": "Because nowhere did\nI say explicitly to make a copy using the\nsquare brackets colon. So the alias in memory means\nthat it's just another name",
    "start": "1771730",
    "end": "1780820"
  },
  {
    "text": "pointing to that\nexact same object.",
    "start": "1780820",
    "end": "1786450"
  },
  {
    "text": "OK. So then the for loop\nfor e in L1_copy is iterating through\nthis object here,",
    "start": "1786450",
    "end": "1793659"
  },
  {
    "text": "which is being pointed\nto by L1_copy and L1. OK. So if I'm iterating through\nand removing elements",
    "start": "1793660",
    "end": "1801210"
  },
  {
    "text": "as I'm doing so, this is\njust the original buggy code that we had that iterated\nthrough L1, right?",
    "start": "1801210",
    "end": "1807990"
  },
  {
    "text": "So I'm removing the 10,\nincrementing the e variable",
    "start": "1807990",
    "end": "1813690"
  },
  {
    "text": "to the next element, and then\nnot doing anything with the 30 and not doing\nanything with the 40.",
    "start": "1813690",
    "end": "1820525"
  },
  {
    "text": "Does that make sense? Aliases? Is that all right? OK.",
    "start": "1820525",
    "end": "1826660"
  },
  {
    "text": "So the big idea that will\ntie a couple things together",
    "start": "1826660",
    "end": "1831780"
  },
  {
    "text": "is related to functions--\nformal parameters and actual parameters. So when we make a\nfunction definition,",
    "start": "1831780",
    "end": "1840180"
  },
  {
    "text": "the parameters inside\nthe function definition",
    "start": "1840180",
    "end": "1845310"
  },
  {
    "text": "are called formal\nparameters, right? We're just writing\nthe function assuming that these will eventually get\nsome actual values associated",
    "start": "1845310",
    "end": "1851340"
  },
  {
    "text": "with them. When we make a\nfunction call, that's when we pass actual values.",
    "start": "1851340",
    "end": "1857140"
  },
  {
    "text": "And when we have mutable objects\nbeing passed into a function,",
    "start": "1857140",
    "end": "1862220"
  },
  {
    "text": "the formal parameter\nactually becomes an alias for the actual\nparameter in the function call.",
    "start": "1862220",
    "end": "1870110"
  },
  {
    "text": "So here's our\nfunction once again. The difference between what\nwe've been seeing so far--",
    "start": "1870110",
    "end": "1877420"
  },
  {
    "text": "this is the code that\nwe had just seen. The difference that I've\ndone in this particular code is not named this L1 and L2 like\nit was named up here, right?",
    "start": "1877420",
    "end": "1887020"
  },
  {
    "text": "Because it doesn't have\nto be named L1 and L2. I named it La and Lb.",
    "start": "1887020",
    "end": "1892986"
  },
  {
    "text": "And this will bring\nthe point home. So when I make my function\ncall to remove duplicates",
    "start": "1892986",
    "end": "1898490"
  },
  {
    "text": "with La and Lb, Python takes\nthis object and this object",
    "start": "1898490",
    "end": "1903890"
  },
  {
    "text": "and passes them\nin as parameters. So in my memory diagram, I've\ngot La is 10, 20, 30, 40,",
    "start": "1903890",
    "end": "1909980"
  },
  {
    "text": "and Lb, 10, 20, 50, 60. Right? That's what I have down here. As soon as I make my\nfunction call, remember--",
    "start": "1909980",
    "end": "1917270"
  },
  {
    "text": "Python maps out\nformal parameters to actual parameters. But when we're dealing\nwith these mutable objects,",
    "start": "1917270",
    "end": "1924590"
  },
  {
    "text": "L1 and L2 are aliases for\nthe things being passed in.",
    "start": "1924590",
    "end": "1932000"
  },
  {
    "text": "So L1 will point to-- you tell me. STUDENT: La?",
    "start": "1932000",
    "end": "1937720"
  },
  {
    "text": "ANA BELL: Yes, exactly. So here I've got the same\nname for the same object. And L2 will point to Lb, right?",
    "start": "1937720",
    "end": "1946000"
  },
  {
    "text": "Two different names\npointing to the same object. And that's why when I'm\niterating through and doing",
    "start": "1946000",
    "end": "1952600"
  },
  {
    "text": "whatever I am doing to these\nformal parameters here, Python actually mutates the\nobjects that were passed in.",
    "start": "1952600",
    "end": "1963370"
  },
  {
    "text": "Yes. STUDENT: So does that\nmean that La and L1 will",
    "start": "1963370",
    "end": "1969495"
  },
  {
    "text": "have the same ID? ANA BELL: La and L1\nwill have the same IDs.",
    "start": "1969495",
    "end": "1975150"
  },
  {
    "text": "Yeah. Yeah. Exactly. Yeah. Using that ID function\nwe did last time.",
    "start": "1975150",
    "end": "1981270"
  },
  {
    "text": "Exactly. I invite you to try it, too. But I think they\nshould because they're",
    "start": "1981270",
    "end": "1986930"
  },
  {
    "text": "modifying the same object. Everyone OK so far? Two names, aliases\nfor that same object.",
    "start": "1986930",
    "end": "1994160"
  },
  {
    "text": "And so that's why when\nwe're mutating L1 here, this La and Lb that we passed\nin will be mutated, right?",
    "start": "1994160",
    "end": "2001110"
  },
  {
    "text": "So here's my L1_copy as well. So I've got three names\nfor this particular object.",
    "start": "2001110",
    "end": "2006120"
  },
  {
    "text": "And then we do the thing where\nwe mutate the thing, right? And then at the end of the\nfunction when it's done,",
    "start": "2006120",
    "end": "2012930"
  },
  {
    "text": "this entire thing has no return. It returns none. But when we print La,\nthe thing we're printing",
    "start": "2012930",
    "end": "2021720"
  },
  {
    "text": "is this object here. It's whatever La points to. And it's this thing that\nwas mutated through L1.",
    "start": "2021720",
    "end": "2028230"
  },
  {
    "start": "2028230",
    "end": "2033450"
  },
  {
    "text": "Yes, no? Thumbs up, thumbs down? Is it good? This is very cool, you guys. ",
    "start": "2033450",
    "end": "2040909"
  },
  {
    "text": "OK. This was a nice\nloose end to tie up. OK. So the last 10\nminutes, I want to talk",
    "start": "2040910",
    "end": "2049020"
  },
  {
    "text": "about what happens when\nwe have lists that contain",
    "start": "2049020",
    "end": "2054870"
  },
  {
    "text": "lists themselves, right? So so far, the examples\nwe've been working with",
    "start": "2054870",
    "end": "2060120"
  },
  {
    "text": "are lists that just contain\nstrings, or integers, or things that are immutable.",
    "start": "2060120",
    "end": "2066570"
  },
  {
    "text": "But what exactly happens\nbehind the scenes when we have elements that\nare mutable themselves?",
    "start": "2066570",
    "end": "2074449"
  },
  {
    "text": "So we're going to do an example. We're going to go through\nall of these slides working",
    "start": "2074449",
    "end": "2081908"
  },
  {
    "text": "through an example\nwhere we start out with this old list that\nlooks something like this.",
    "start": "2081909",
    "end": "2086960"
  },
  {
    "text": "So we have a list that\ncontains three elements, right? The first one is another list.",
    "start": "2086960",
    "end": "2094270"
  },
  {
    "text": "The second is another list. And the third is another list. I don't care what elements\nthose lists have for now.",
    "start": "2094270",
    "end": "2101559"
  },
  {
    "text": "All I know is at the top level,\nold_list contains three things.",
    "start": "2101560",
    "end": "2107310"
  },
  {
    "text": "OK. So let's do aliasing. And then we'll do a\nshallow copy of this list.",
    "start": "2107310",
    "end": "2112850"
  },
  {
    "text": "And then we'll do a\ndeep copy of this list and show you what happens. So in this example,\nwhat we're going to do",
    "start": "2112850",
    "end": "2119210"
  },
  {
    "text": "is just a straight-up\nalias of old_list. So we're going to make old_list\nand new_list be aliases",
    "start": "2119210",
    "end": "2126380"
  },
  {
    "text": "for the exact same object-- this thing here. So I do that with just the\nplain old assignment operator.",
    "start": "2126380",
    "end": "2135000"
  },
  {
    "text": "So inside memory,\nthe way we're going to represent this\nold list is here is my list with\nthree elements in it.",
    "start": "2135000",
    "end": "2140869"
  },
  {
    "text": "And because each\nelement is itself a list, so a mutable object, I'm\nnot going to plop it in here,",
    "start": "2140870",
    "end": "2148710"
  },
  {
    "text": "but instead, Python\ngenerally tends to make a pointer to that\nmutable object somewhere else",
    "start": "2148710",
    "end": "2155240"
  },
  {
    "text": "in memory. You'll see why in\na couple of slides. But for now, it will look\ncluttered if I did so.",
    "start": "2155240",
    "end": "2162060"
  },
  {
    "text": "But for now, it helps to\nvisualize the structure. So old_list contains\nthree elements.",
    "start": "2162060",
    "end": "2167310"
  },
  {
    "text": "And each one of those elements\nare pointed to over here. So if I say new_list\nequals old_list,",
    "start": "2167310",
    "end": "2173400"
  },
  {
    "text": "Python will make another name\nfor the same thing in memory. When I do this line here where\nI index new_list at index 2--",
    "start": "2173400",
    "end": "2182230"
  },
  {
    "text": "so that's 0, 1, 2-- and then I follow it to index\n1 over here, so this guy",
    "start": "2182230",
    "end": "2190180"
  },
  {
    "text": "here, the 6-- I have changed the\nstring foo to be 6.",
    "start": "2190180",
    "end": "2195930"
  },
  {
    "text": "And now, new_list\nand old_list both are pointing to the same object. So it will have been mutated to\ncontain that 6 in that sublist.",
    "start": "2195930",
    "end": "2204855"
  },
  {
    "text": " OK. So that's aliasing.",
    "start": "2204855",
    "end": "2211140"
  },
  {
    "text": "Now, what we can\ndo is we can create copies of mutable objects.",
    "start": "2211140",
    "end": "2216180"
  },
  {
    "text": "And we can create\neither something called a shallow copy or a deep copy.",
    "start": "2216180",
    "end": "2221240"
  },
  {
    "text": "The shallow copy is\nequivalent to what we've been doing with the\nsquare brackets colon.",
    "start": "2221240",
    "end": "2226390"
  },
  {
    "text": "And that's perfectly OK if\nwe're dealing with lists that just contain immutable things.",
    "start": "2226390",
    "end": "2234730"
  },
  {
    "text": "But as soon as we create a\nshallow copy of a list that can contain other lists\nor other mutable things,",
    "start": "2234730",
    "end": "2241500"
  },
  {
    "text": "interesting things happen. Only the top level gets\ncopied, but anything",
    "start": "2241500",
    "end": "2247440"
  },
  {
    "text": "that's mutable at a deeper\nlevel than that top level does not get copied\nbecause if it did and you",
    "start": "2247440",
    "end": "2254520"
  },
  {
    "text": "had many, many levels deep\nof all these mutable things, that would be a lot of\nthings for Python to copy.",
    "start": "2254520",
    "end": "2259680"
  },
  {
    "text": "OK. So what we're doing with\nthis particular code is we're going to create\nthis old list here.",
    "start": "2259680",
    "end": "2265900"
  },
  {
    "text": "So it's 1, 2 as the\nfirst element, 3, 4 as the second element,\nand 5,6 as the last element.",
    "start": "2265900",
    "end": "2272670"
  },
  {
    "text": "We're going to create something\ncalled a shallow copy. And we could have also said\nold_list square brackets colon.",
    "start": "2272670",
    "end": "2278250"
  },
  {
    "text": "It would be equivalent. And in this shallow\ncopy, Python only creates a copy of the top level.",
    "start": "2278250",
    "end": "2286410"
  },
  {
    "text": "So notice-- new_list is pointing\nto a list with three elements",
    "start": "2286410",
    "end": "2292010"
  },
  {
    "text": "in it, but anything\nthat's at a deeper level than that top level\ndoes not get copied.",
    "start": "2292010",
    "end": "2299990"
  },
  {
    "text": "So all these mutable\nthings that are my elements-- this\nlist, and this list, and this list-- these are\nthree mutable elements.",
    "start": "2299990",
    "end": "2307670"
  },
  {
    "text": "They do not get their own\ncopies because we've only made a shallow copy.",
    "start": "2307670",
    "end": "2314369"
  },
  {
    "text": "So what this means is\nthat the top level--",
    "start": "2314370",
    "end": "2319630"
  },
  {
    "text": "sorry. So this is just\nwhat it prints out. So at the top level, we can\nadd elements to old_list.",
    "start": "2319630",
    "end": "2327549"
  },
  {
    "text": "And it won't interfere with\nthe top level of new_list. So as an example\nhere we're going",
    "start": "2327550",
    "end": "2333040"
  },
  {
    "text": "to add this 7, 8\nlist to old_list.",
    "start": "2333040",
    "end": "2339830"
  },
  {
    "text": "So we follow old_list. And we add another\nelement to the end of it.",
    "start": "2339830",
    "end": "2345200"
  },
  {
    "text": "OK. So there it is. But that element didn't\nget added to new_list.",
    "start": "2345200",
    "end": "2352330"
  },
  {
    "text": "Right? Because we only added it to\nthe top level of old_list.",
    "start": "2352330",
    "end": "2357670"
  },
  {
    "text": "So now, question\nis, what happens if we go in and mutate one\nof these three shared items?",
    "start": "2357670",
    "end": "2364900"
  },
  {
    "text": "So old_list and new_list\nis as we would expect. So let's do one more operation.",
    "start": "2364900",
    "end": "2370210"
  },
  {
    "text": "So in addition to\nappending the 7 and the 8 like we do over here,\nlet's also mutate",
    "start": "2370210",
    "end": "2376960"
  },
  {
    "text": "one of those shared items. So here it is. This is what we just did\non the previous slide.",
    "start": "2376960",
    "end": "2382210"
  },
  {
    "text": "There's my 7 and 8. And now, let's go into\nold_list at index 1. So 0, 1-- that's\nthis middle one here.",
    "start": "2382210",
    "end": "2389740"
  },
  {
    "text": "And at index 1 in that-- so\nthat's 0, 1, 4 over here.",
    "start": "2389740",
    "end": "2395290"
  },
  {
    "text": "Let's change the 4 to the 9. ",
    "start": "2395290",
    "end": "2400849"
  },
  {
    "text": "OK? Well, when we print\nnew_list, we're going to be printing a list\nwith three things in it.",
    "start": "2400850",
    "end": "2408119"
  },
  {
    "text": "The first one is the list 1, 2. The second one is 3, 9. We just mutated that.",
    "start": "2408120",
    "end": "2413490"
  },
  {
    "text": "And the last one is 5, 6.  And when we print\nold_list, this one",
    "start": "2413490",
    "end": "2421280"
  },
  {
    "text": "will also have that 9 over there\nbecause those middle elements",
    "start": "2421280",
    "end": "2427060"
  },
  {
    "text": "are shared, but we will\nalso have an extra element at the top level-- the 7, 8 that we just\nadded only to old_list.",
    "start": "2427060",
    "end": "2436240"
  },
  {
    "text": " OK. Thoughts on this example?",
    "start": "2436240",
    "end": "2441890"
  },
  {
    "text": "What is confusing? ",
    "start": "2441890",
    "end": "2446990"
  },
  {
    "text": "Yeah. STUDENT: Could you\nexplain why the 9 gets added to the new list? ANA BELL: Yeah. Why does the 9 get added or\nget changed to the new list?",
    "start": "2446990",
    "end": "2455560"
  },
  {
    "text": "Yeah. So the operation called\ncopy from this library,",
    "start": "2455560",
    "end": "2461700"
  },
  {
    "text": "which is also named\ncopy, only creates a shallow copy of the list.",
    "start": "2461700",
    "end": "2466780"
  },
  {
    "text": "So a shallow copy means\nthat if you have a list with some elements within it--",
    "start": "2466780",
    "end": "2471870"
  },
  {
    "text": "so here in this case, we have\nthose three elements in it--",
    "start": "2471870",
    "end": "2476950"
  },
  {
    "text": "all you're doing is copying\nthe top structure, right? So this structure here.",
    "start": "2476950",
    "end": "2482599"
  },
  {
    "text": "But if you have any elements\nthat are themselves mutable, they don't get their own copies. So really, inside the\nmemory, if this one",
    "start": "2482600",
    "end": "2490240"
  },
  {
    "text": "is pointing to some object\nlike it does to that list 1, 2,",
    "start": "2490240",
    "end": "2496869"
  },
  {
    "text": "the copy is also going to\npoint to that same subobject,",
    "start": "2496870",
    "end": "2502150"
  },
  {
    "text": "substructure. And so if you're mutating this\nsubstructure through one name,",
    "start": "2502150",
    "end": "2510079"
  },
  {
    "text": "if you're accessing it\nthrough the other name, that other name\nis still accessing the thing that was mutated.",
    "start": "2510080",
    "end": "2516380"
  },
  {
    "text": "Does that make sense? Is that OK? Yeah. And so this shallow copy is just\ncopying the top structure here.",
    "start": "2516380",
    "end": "2523740"
  },
  {
    "text": "So you can see at\nthe top level, we have these two different lists. So that means to this one,\nI can add another item",
    "start": "2523740",
    "end": "2530240"
  },
  {
    "text": "to the end of it, right? And that item will not\nbe duplicated up here",
    "start": "2530240",
    "end": "2535490"
  },
  {
    "text": "because this is one thing. This is another thing. But the middle\nones or any levels",
    "start": "2535490",
    "end": "2540860"
  },
  {
    "text": "that are beyond that\ntop level are shared. They're not copies. Yeah.",
    "start": "2540860",
    "end": "2546320"
  },
  {
    "text": "STUDENT: So if you edit\nit through the new list, is it mutual?",
    "start": "2546320",
    "end": "2551587"
  },
  {
    "text": "ANA BELL: Yes. Yes. Exactly, great question. So if we edited this number\n1 here through the new list,",
    "start": "2551587",
    "end": "2558779"
  },
  {
    "text": "then yeah. The old list will\nstill see the edits because they're both pointing\nto these shared things.",
    "start": "2558780",
    "end": "2566100"
  },
  {
    "text": "But if I edit the 7\nand 8, it will only be edited through\nold_list because that's 7,",
    "start": "2566100",
    "end": "2573270"
  },
  {
    "text": "8 is only seen by old_list. ",
    "start": "2573270",
    "end": "2578609"
  },
  {
    "text": "OK. That's basically\nwhat I've said here. And so if you really,\nreally, really want",
    "start": "2578610",
    "end": "2583670"
  },
  {
    "text": "to copy every single\nmutable object or every single object at\nall the different levels,",
    "start": "2583670",
    "end": "2589160"
  },
  {
    "text": "we would have to create\nsomething called a deep copy. So we do this using\ncopy.deepcopy.",
    "start": "2589160",
    "end": "2594510"
  },
  {
    "text": "OK? And so this is the\nexact same example, except that we've just changed\ncopy.copy to copy.deepcopy.",
    "start": "2594510",
    "end": "2601340"
  },
  {
    "text": "And so here we've got our old\nlist exactly as we had before. And if we deep copy\nold_list, Python",
    "start": "2601340",
    "end": "2608540"
  },
  {
    "text": "will make copies of\nevery single object at every single\nlevel from old_list.",
    "start": "2608540",
    "end": "2616140"
  },
  {
    "text": "So everything becomes\nits own object. So now, if I mutate\nold_list to append 7 and 8,",
    "start": "2616140",
    "end": "2622820"
  },
  {
    "text": "that only gets\nadded to old_list. And if I mutate old_list to\nhave this element be a 9,",
    "start": "2622820",
    "end": "2628910"
  },
  {
    "text": "that only gets mutated\nthrough old_list. So old_list contains\nthe changed values,",
    "start": "2628910",
    "end": "2634760"
  },
  {
    "text": "but new_list remains\nuntouched because I've made copies at every level. Yes. STUDENT: So is copy.deepcopy\ndoing old_list square bracket",
    "start": "2634760",
    "end": "2643349"
  },
  {
    "text": "with the colon in the end? ANA BELL: Yes, but then\nit goes further down at every single level.",
    "start": "2643350",
    "end": "2648960"
  },
  {
    "text": "So the regular copy.copy does\nthe square bracket colon. And the deepcopy goes further\nto all the other levels.",
    "start": "2648960",
    "end": "2656685"
  },
  {
    "text": " OK. So lots of ideas\nin this lecture.",
    "start": "2656685",
    "end": "2665160"
  },
  {
    "text": "And last, I would highly suggest\ngoing through the Python tutor and all these examples just so\nyou see them in a different way",
    "start": "2665160",
    "end": "2673380"
  },
  {
    "text": "to see exactly how\nit'll be the same memory diagram that we've done, except\nthrough the Python tutor.",
    "start": "2673380",
    "end": "2680220"
  },
  {
    "text": "So it will be very\nhelpful for you, I think. I would give that a try as\nyou're studying for the quiz.",
    "start": "2680220",
    "end": "2686130"
  },
  {
    "text": "I think what's\nimportant to realize is that we have objects in memory. And we have names that\npoint to these objects.",
    "start": "2686130",
    "end": "2692500"
  },
  {
    "text": "And so if you get that and keep\nthat straight in your mind, it will be very, very\nhelpful to understanding",
    "start": "2692500",
    "end": "2700110"
  },
  {
    "text": "what's an alias,\nwhat's a clone, when you're iterating over certain\nobjects, and things like that. And the big idea here is\njust side effects, OK?",
    "start": "2700110",
    "end": "2708720"
  },
  {
    "text": "Every one of these operations\nhas some sort of side effect. And it's important to\nmake sure that you're not",
    "start": "2708720",
    "end": "2715049"
  },
  {
    "text": "changing something you\ndon't want to be changing. OK. I guess I just\nhad one last thing",
    "start": "2715050",
    "end": "2721460"
  },
  {
    "text": "to say about lists and tuples. We've seen both of them. When do you want to use\ntuples and not lists?",
    "start": "2721460",
    "end": "2728000"
  },
  {
    "text": "When you want something\nthat shouldn't be changed. So if you have something that\nmight accidentally get changed,",
    "start": "2728000",
    "end": "2733190"
  },
  {
    "text": "do not save it as a list. OK. And then on the other\nside, why would you",
    "start": "2733190",
    "end": "2739940"
  },
  {
    "text": "use a list but not a tuple? You would use a list\nbecause you don't",
    "start": "2739940",
    "end": "2747320"
  },
  {
    "text": "want to be creating\ncopies all the time. So when you have, again, these\nlarge databases, every time you want to make a\nchange to it, you",
    "start": "2747320",
    "end": "2753080"
  },
  {
    "text": "don't want to make\na copy of everything with that small change in it. And so mutating an object\nis good from that respect.",
    "start": "2753080",
    "end": "2760490"
  },
  {
    "text": "OK. So that wraps up\nlists and mutability. Next lecture, we'll just tie\nup a bunch more loose ends.",
    "start": "2760490",
    "end": "2766789"
  },
  {
    "text": "And then we'll get\ninto a new topic. ",
    "start": "2766790",
    "end": "2776000"
  }
]