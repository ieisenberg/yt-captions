[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "5772"
  },
  {
    "start": "5772",
    "end": "11517"
  },
  {
    "text": "ANA BELL: All right. So, hello, everyone. Let's get started.",
    "start": "11517",
    "end": "16810"
  },
  {
    "text": "This is lecture 10. So last lecture, we\nintroduced two new data types.",
    "start": "16810",
    "end": "21980"
  },
  {
    "text": "We talked about a data type\ncalled a tuple and a data type called a list.",
    "start": "21980",
    "end": "27250"
  },
  {
    "text": "So today, we're not going to\ntalk about tuples anymore, because they were\npretty straightforward. A lot of operations you\ncould do with strings,",
    "start": "27250",
    "end": "33460"
  },
  {
    "text": "you could do with tuples. They were immutable objects. That means once you\ncreated them in memory, you couldn't do\nanything to change them.",
    "start": "33460",
    "end": "40129"
  },
  {
    "text": "And so they were, I\nguess, pretty boring, except that you could\npopulate tuples with objects",
    "start": "40130",
    "end": "46180"
  },
  {
    "text": "that were of any type. So you could populate\na tuple with integers and floats and Booleans\nand other tuples all",
    "start": "46180",
    "end": "53440"
  },
  {
    "text": "at the same time. We introduced lists\nlast time as well as something that was really\nsimilar to tuples and strings",
    "start": "53440",
    "end": "61420"
  },
  {
    "text": "in terms of manipulations. Lists were also nice because\nyou could populate them, again,",
    "start": "61420",
    "end": "67340"
  },
  {
    "text": "with any kind of data objects,\njust like you could tuples. Today what we're\ngoing to focus on,",
    "start": "67340",
    "end": "73060"
  },
  {
    "text": "though, is the\nidea of mutability when talking about lists,\nwhich is something new.",
    "start": "73060",
    "end": "78200"
  },
  {
    "text": "We have never talked\nabout this idea before. And so this lecture\nis going to be pretty heavy on that idea and\na little bit heavy on syntax",
    "start": "78200",
    "end": "86290"
  },
  {
    "text": "and things like that to remind\nyou of how to manipulate these compound data types.",
    "start": "86290",
    "end": "92810"
  },
  {
    "text": "So please, if there's any\nquestions, feel free to stop me, and then I can go over what\nI just talked about if there",
    "start": "92810",
    "end": "98680"
  },
  {
    "text": "was anything confusing. So this slide is\nbasically a copy of the slide we had\non lists last lecture.",
    "start": "98680",
    "end": "106550"
  },
  {
    "text": "It shows a bunch of\ndifferent-- oops, a bunch of different operations\nthat you can do with lists.",
    "start": "106550",
    "end": "111650"
  },
  {
    "text": "They're very similar\nto operations that you can do with strings. So here I'm just\ncreating an empty list.",
    "start": "111650",
    "end": "117770"
  },
  {
    "text": "I'm creating a list with\na bunch of elements in it. So here we can see that this\nlist contains four elements,",
    "start": "117770",
    "end": "124600"
  },
  {
    "text": "and they are all\nof different types. This is an integer, this is\na string, this is an integer,",
    "start": "124600",
    "end": "129619"
  },
  {
    "text": "and this is another list. And that's totally OK to\ndo with these data types.",
    "start": "129620",
    "end": "135150"
  },
  {
    "text": "Doing all of these operations,\ngetting the length, indexing, slicing, concatenation,\ngetting the max,",
    "start": "135150",
    "end": "140640"
  },
  {
    "text": "all that should be\nreview, as well as iterating a for loop over the\nelements in a list directly.",
    "start": "140640",
    "end": "148209"
  },
  {
    "text": "So just like we\niterated a for loop over characters in a\nstring, this loop basically",
    "start": "148210",
    "end": "154410"
  },
  {
    "text": "makes e, our loop\nvariable, take on the value of every single\nelement in our list L.",
    "start": "154410",
    "end": "160410"
  },
  {
    "text": "What's new, the\nbolded thing here is something we haven't\nbeen able to do before. And this basically\ngoes into memory",
    "start": "160410",
    "end": "169230"
  },
  {
    "text": "and changes the element\nat index 3 and L. So that's kind of\nhow we read that.",
    "start": "169230",
    "end": "175830"
  },
  {
    "text": "And it changes that element to\nhave the value on the right hand side. So this is kind of, I mean,\nwe read it in the same way",
    "start": "175830",
    "end": "183330"
  },
  {
    "text": "as we do other\nassignment statements. We look at the right hand\nside and we evaluate that. In this case, it's only a 10.",
    "start": "183330",
    "end": "190290"
  },
  {
    "text": "But the left hand\nside looks different. It's not a variable name\nas we have seen before, but in fact, it's this.",
    "start": "190290",
    "end": "197250"
  },
  {
    "text": "It's referencing the item\nin list named L at index 3.",
    "start": "197250",
    "end": "202560"
  },
  {
    "text": "So that would be\nindex 0 1, 2, 3. This line of code down there,\nL squared brackets 3 equals 10,",
    "start": "202560",
    "end": "209940"
  },
  {
    "text": "basically replaces this entire\nelement here with the number 10.",
    "start": "209940",
    "end": "215970"
  },
  {
    "text": "So on the next few slides, we're\ngoing to talk about what exactly this means inside memory,\nbecause it's different than what",
    "start": "215970",
    "end": "227040"
  },
  {
    "text": "we've been doing before. So what exactly happens when\nwe go into a mutable object,",
    "start": "227040",
    "end": "234230"
  },
  {
    "text": "like a list, and we change an\nelement using this exact syntax?",
    "start": "234230",
    "end": "240680"
  },
  {
    "text": "All right, well, let's draw\nour memory diagrams the way we have been in the past. Here's our little cloud\nrepresenting the memory.",
    "start": "240680",
    "end": "247220"
  },
  {
    "text": "L equals 2, 4, 3 creates\nthis list for me in memory, this list object.",
    "start": "247220",
    "end": "252780"
  },
  {
    "text": "And L is the name that I'm\nreferencing to this list object. So I'm basically binding the\nname L to that object in memory.",
    "start": "252780",
    "end": "260720"
  },
  {
    "text": "L square brackets 1 equals 5\ntells Python to follow the name",
    "start": "260720",
    "end": "267440"
  },
  {
    "text": "L to the object in\nmemory and then look up the index in the\nsquare brackets.",
    "start": "267440",
    "end": "273060"
  },
  {
    "text": "In this case, index 1. So that's 0, 1 this 4. And take the element\nat this location",
    "start": "273060",
    "end": "279870"
  },
  {
    "text": "and override it to be whatever\nthe right hand side says. So the right hand side says 5.",
    "start": "279870",
    "end": "285160"
  },
  {
    "text": "So basically, we're\ngoing into memory and changing that\nmiddle element.",
    "start": "285160",
    "end": "290759"
  },
  {
    "text": "So this is different\nthan strings and tuples. We were not allowed to\ndo anything like this with strings and tuples.",
    "start": "290760",
    "end": "297449"
  },
  {
    "text": "So let's look at an\nexample on the next slide about what this means. But the idea here\nI'm trying to get",
    "start": "297450",
    "end": "303960"
  },
  {
    "text": "at is this object that we have\nchanged one of the elements inside--",
    "start": "303960",
    "end": "310770"
  },
  {
    "text": "for which we've changed\none of the elements, we've changed the object itself. We didn't make a new copy.",
    "start": "310770",
    "end": "316270"
  },
  {
    "text": "We didn't kind of make a\nversion of that object. We have changed\nthe object itself.",
    "start": "316270",
    "end": "321789"
  },
  {
    "text": "So let's see maybe similar\ncode that you might think does the same thing,\nexcept with tuples.",
    "start": "321790",
    "end": "330680"
  },
  {
    "text": "All right. So the first two lines of\ncode are going to be the same. We've got L in memory\nbeing the object 2, 4, 3.",
    "start": "330680",
    "end": "337919"
  },
  {
    "text": "Or L being the name bound\nto the object 2, 4, 3. L square brackets 1. So L at index 1 equals 5 changes\nthat middle element to be a 5.",
    "start": "337920",
    "end": "349890"
  },
  {
    "text": "Same as the previous slide. Now, what if we had\nthese two lines of code? t is going to be a\nvariable name that's",
    "start": "349890",
    "end": "357990"
  },
  {
    "text": "bound to the tuple 2, 4, 3. So notice this is now the\ntuple denoted in parentheses.",
    "start": "357990",
    "end": "363780"
  },
  {
    "text": "If I say t is equal to 2, 5. 3, what happens?",
    "start": "363780",
    "end": "369630"
  },
  {
    "text": "Basically with this line, I am\ncreating a new object in memory. So there's my new object.",
    "start": "369630",
    "end": "375990"
  },
  {
    "text": "And I'm taking\nthe name t and I'm binding it to this new object.",
    "start": "375990",
    "end": "381430"
  },
  {
    "text": "The old object, 2, 4, 3 as a\ntuple, still remains in memory.",
    "start": "381430",
    "end": "387449"
  },
  {
    "text": "I have not modified\nthat object at all. It's still there. I've just lost\nthe binding to it.",
    "start": "387450",
    "end": "392770"
  },
  {
    "text": "So the name t is separate from\nthe actual object in memory. In terms of tuples, what\nthat means for us is",
    "start": "392770",
    "end": "401260"
  },
  {
    "text": "we can never change the\ntuple object in memory once we've created it. But with lists using\nthis specific operation,",
    "start": "401260",
    "end": "409870"
  },
  {
    "text": "this one right here, L\nsquare brackets 1 equals 5, this does allow us\nto go into memory",
    "start": "409870",
    "end": "415330"
  },
  {
    "text": "and literally change\nthat object that is associated with the name L.",
    "start": "415330",
    "end": "421500"
  },
  {
    "text": "Is everyone OK with this slide? Does this make sense? This showcases the difference. So we need to\nthink about what is",
    "start": "421500",
    "end": "426870"
  },
  {
    "text": "the name of the object versus\nthe object itself in memory. ",
    "start": "426870",
    "end": "434225"
  },
  {
    "text": "So that shows you\nhow to create a list and then go ahead and change\nelements to different values",
    "start": "434225",
    "end": "440770"
  },
  {
    "text": "within that list. But now that we have a list\nobject that we can mutate,",
    "start": "440770",
    "end": "447340"
  },
  {
    "text": "other operations we can do\nwith it is to, let's say, add more items to\nthe end of the list. So we can make the list bigger.",
    "start": "447340",
    "end": "455220"
  },
  {
    "text": "We can mutate the object\nby doing that using this append function. Now, I'm going to talk about the\nsyntax of the append function",
    "start": "455220",
    "end": "464159"
  },
  {
    "text": "in a little bit. But basically, if\nI want to mutate L to add an item to the end of\nit, I have to use the syntax.",
    "start": "464160",
    "end": "471250"
  },
  {
    "text": "There isn't a different form, a\ndifferent function to do this. So this specific\nsyntax has to be used.",
    "start": "471250",
    "end": "480060"
  },
  {
    "text": "Append is basically\nthe function name.  Element is going to\nbe the parameter,",
    "start": "480060",
    "end": "487849"
  },
  {
    "text": "the thing that I want to add\non to the end of my list. And L, the thing\nbefore the dot, is",
    "start": "487850",
    "end": "494050"
  },
  {
    "text": "going to be the object I\nwant to add the element to the end of the list.",
    "start": "494050",
    "end": "499190"
  },
  {
    "text": "So L, in this case, I'm\nusing it generically, but you can imagine\ncreating a list of employees",
    "start": "499190",
    "end": "506949"
  },
  {
    "text": "in your company. Then you might name\nthat list employees. In that case, we would\nsay employees.append Ana",
    "start": "506950",
    "end": "513549"
  },
  {
    "text": "or whatever. So that L is just kind\nof generic for now, but it gets replaced with\nwhatever variable name",
    "start": "513549",
    "end": "519849"
  },
  {
    "text": "your list is. So this operation\nbasically mutates the list.",
    "start": "519850",
    "end": "525400"
  },
  {
    "text": "So it mutates it to be\none extra element longer. And the element you're adding\nto the end of the list,",
    "start": "525400",
    "end": "531742"
  },
  {
    "text": "to the right hand\nside of the list, is going to be whatever is\nin the parentheses to append.",
    "start": "531742",
    "end": "537340"
  },
  {
    "text": "So let's look at an example. So we're going to create L is\nequal to 2, 1, 3 in memory.",
    "start": "537340",
    "end": "542930"
  },
  {
    "text": "And then let's say\nwe do L.append 5. ",
    "start": "542930",
    "end": "548970"
  },
  {
    "text": "Well, this line of\ncode says, look up L. It's this object in\nmemory here, 2, 1, 3.",
    "start": "548970",
    "end": "554839"
  },
  {
    "text": "And add the object\n5 to the end of it. So I'm going to add the\n5 to the end of the list.",
    "start": "554840",
    "end": "560430"
  },
  {
    "text": "Now, it's no longer\nthree elements long. It's four elements long. And again, I didn't make a copy. I didn't preserve the original\nlist with just 2 and 3 in it.",
    "start": "560430",
    "end": "568650"
  },
  {
    "text": "I have literally changed\nthis list in memory. That's referenced by L.",
    "start": "568650",
    "end": "574380"
  },
  {
    "text": "Now, this function append\nis being used basically",
    "start": "574380",
    "end": "579720"
  },
  {
    "text": "for its side effect. And the side effect here\nis mutating the list.",
    "start": "579720",
    "end": "586050"
  },
  {
    "text": "After the function adds the\n5 in this particular case",
    "start": "586050",
    "end": "591779"
  },
  {
    "text": "to the end of the\nlist, the function doesn't need to\nreturn anything back. It's basically done its\njob to do the mutation.",
    "start": "591780",
    "end": "599460"
  },
  {
    "text": "And so functions like\nappend, and we're going to see other\nfunctions later,",
    "start": "599460",
    "end": "604620"
  },
  {
    "text": "don't have any return value. So one really common\nmistake as we're",
    "start": "604620",
    "end": "611400"
  },
  {
    "text": "kind of learning about\nmutable excuse objects and using these functions\nthat mutate is to say,",
    "start": "611400",
    "end": "616800"
  },
  {
    "text": "well, I'm going to do\nL.append 5 and save this, the result\nof this function,",
    "start": "616800",
    "end": "623399"
  },
  {
    "text": "back into the variable named\nL. And this would be incorrect. So let's see if we do\nthis line of code what",
    "start": "623400",
    "end": "629310"
  },
  {
    "text": "exactly will happen. So it's an assignment. So the first thing we do is\nwe look at the right hand side",
    "start": "629310",
    "end": "635819"
  },
  {
    "text": "and we evaluate that. Well, the right\nhand side basically says L.append 5, which\nis exactly the same",
    "start": "635820",
    "end": "641820"
  },
  {
    "text": "as the previous line. So we're going to put another\n5 to the end of our currently mutated list.",
    "start": "641820",
    "end": "648480"
  },
  {
    "text": "Just kind of going with\nthese operations in order. And then I said this function,\nthis append function,",
    "start": "648480",
    "end": "656250"
  },
  {
    "text": "has done its job to\nmutate the list by adding a 5 to the end of it. So it returns nothing.",
    "start": "656250",
    "end": "661881"
  },
  {
    "text": "There's nothing of value that it\ncould return, because it already did its job of mutation. So it actually returns none.",
    "start": "661882",
    "end": "669720"
  },
  {
    "text": "So the assignment,\nthe equal sign, then basically says,\ntake the name L",
    "start": "669720",
    "end": "675240"
  },
  {
    "text": "and bind it to the return\nof this function L.append 5. Well, the return of\nthe function is none.",
    "start": "675240",
    "end": "681490"
  },
  {
    "text": "So basically, now we're\nlosing the binding from. 2, 1, 3, 5, 5, which\nwas our mutated list,",
    "start": "681490",
    "end": "688600"
  },
  {
    "text": "and rebinding it\nto the return none. So that is an incorrect way\nto do the mutation of adding",
    "start": "688600",
    "end": "696899"
  },
  {
    "text": "an item to the end of the list. Everyone OK with that so far?",
    "start": "696900",
    "end": "702269"
  },
  {
    "text": "Yes. OK. Excellent. So what should we\nhave done instead? Sorry, yes, be careful\nabout the append operation.",
    "start": "702270",
    "end": "710350"
  },
  {
    "text": "You're doing a mutation and\nyou return none as a result. So you do not want to\nresave this to any variable.",
    "start": "710350",
    "end": "718449"
  },
  {
    "text": "So instead, what we would do is\nwe would just do the operation.",
    "start": "718450",
    "end": "724300"
  },
  {
    "text": "There's nothing to save. Nothing to save in\nany return variable. So if you wanted to add two\nfives to the end of that list,",
    "start": "724300",
    "end": "730980"
  },
  {
    "text": "you would just say\nL.append 5 again, and L would then have been\nmutated to be 2, 1, 3, 5, 5.",
    "start": "730980",
    "end": "738100"
  },
  {
    "text": "And so in your code,\nif you just print L in between these\nappends, if you print",
    "start": "738100",
    "end": "744360"
  },
  {
    "text": "it L after the first L.append 5,\nit would print this 2, 1, 3, 5. And then if we print L\nafter the second append 5,",
    "start": "744360",
    "end": "752190"
  },
  {
    "text": "it would print 2, 1, 3, 5, 5. Because it's an\nongoing operation. It's mutating this\nlist, and now you're",
    "start": "752190",
    "end": "758550"
  },
  {
    "text": "doing operations on\nthe newly mutated list. Everyone-- yeah.",
    "start": "758550",
    "end": "764767"
  },
  {
    "text": "STUDENT: For the\nelement, can you only use one integer or can\nyou do [INAUDIBLE]?? ANA BELL: For the element,\ndo you have to do one integer",
    "start": "764767",
    "end": "772350"
  },
  {
    "text": "or can you use 5 comma 5? So the append only\nworks with one thing.",
    "start": "772350",
    "end": "778420"
  },
  {
    "text": "So if you wanted\nto append a tuple, you could append one\ntuple object that",
    "start": "778420",
    "end": "783990"
  },
  {
    "text": "has many things in\nit, but it would just append that one tuple. We're going to see towards\nthe end of this lecture",
    "start": "783990",
    "end": "790050"
  },
  {
    "text": "an operation that\nallows us to extend the list by a bunch of items. But there is a way,\njust not with append.",
    "start": "790050",
    "end": "798829"
  },
  {
    "text": "Yeah? STUDENT: Why did the other\nthing return none again? ANA BELL: So the other thing,\nso this operation always",
    "start": "798830",
    "end": "804839"
  },
  {
    "text": "returns none. L.append 5 or whatever, the\nappend always returns none. But here it's just sitting\non a line by itself.",
    "start": "804840",
    "end": "812110"
  },
  {
    "text": "We're not saving it\nback to anything. In the previous one, we took the\nreturn and saved it back into L.",
    "start": "812110",
    "end": "819090"
  },
  {
    "text": "And that's why we lost the\nbinding to the actual list. ",
    "start": "819090",
    "end": "826180"
  },
  {
    "text": "So what we usually\nsay is that we use append and a bunch of\nthese other mutable functions",
    "start": "826180",
    "end": "831190"
  },
  {
    "text": "for their side effects. And the side effect\nin this case is to mutate the object that\nI'm calling the append on.",
    "start": "831190",
    "end": "839410"
  },
  {
    "text": "In this case, the list named L.",
    "start": "839410",
    "end": "845220"
  },
  {
    "text": "So let's have you think\nabout this problem. And while you do it-- and then we can write it\non the board together.",
    "start": "845220",
    "end": "851800"
  },
  {
    "text": "So as we go through these\nlines of code one at a time, what will the values\nof the lists become?",
    "start": "851800",
    "end": "861900"
  },
  {
    "text": "So L1 is the string re. L2 is mi. L3 is do. What is L4 going to be with\nthat line L4 equals L1 plus L2?",
    "start": "861900",
    "end": "871342"
  },
  {
    "text": "Does anyone know?  What's the type?",
    "start": "871342",
    "end": "877605"
  },
  {
    "text": " It's concatenation. So concatenation with lists is\nlike concatenation with strings?",
    "start": "877605",
    "end": "885480"
  },
  {
    "text": "Yes? STUDENT: [INAUDIBLE] ANA BELL: Yep. What are the elements in it?",
    "start": "885480",
    "end": "890546"
  },
  {
    "text": "STUDENT: [INAUDIBLE]  ANA BELL: Yep, exactly.",
    "start": "890546",
    "end": "897750"
  },
  {
    "text": "I'm not going to do the strings,\nbut you know what I mean. All right. So L4 with that line is\njust these two elements",
    "start": "897750",
    "end": "905320"
  },
  {
    "text": "in a new list. Now, what happens\nwith the next line?",
    "start": "905320",
    "end": "911080"
  },
  {
    "text": "L3.append L4. Which one gets mutated? L3 or L4? ",
    "start": "911080",
    "end": "918160"
  },
  {
    "text": "L3 gets mutated. Exactly. And what does it get mutated to?",
    "start": "918160",
    "end": "923830"
  },
  {
    "text": "So L3 originally has do in it. What am I adding\nto the end of L3?",
    "start": "923830",
    "end": "929580"
  },
  {
    "start": "929580",
    "end": "935210"
  },
  {
    "text": "STUDENT: [INAUDIBLE] ANA BELL: Exactly. Yes, I'm adding one item.",
    "start": "935210",
    "end": "940839"
  },
  {
    "text": "And it's linked to the\nquestion that was here. What am I appending? I'm appending one item. It's whatever L4 is.",
    "start": "940840",
    "end": "947700"
  },
  {
    "text": "And L4 is this list. So I'm going to be adding re\nand mi within my list here.",
    "start": "947700",
    "end": "954420"
  },
  {
    "text": "And I've got to\nclose this list here. So this is one item, one\nobject, one element, and this",
    "start": "954420",
    "end": "960390"
  },
  {
    "text": "is another element right here. It just happens to be a list.",
    "start": "960390",
    "end": "965435"
  },
  {
    "text": " What about the next line? L equals L1.append 3.",
    "start": "965435",
    "end": "972110"
  },
  {
    "text": "What is the right hand\nside going to give me? Am I mutating L1 or L3?",
    "start": "972110",
    "end": "979693"
  },
  {
    "text": "STUDENT: L1. ANA BELL: Yes. And what am I mutating L1 to be? L1 is originally re.",
    "start": "979693",
    "end": "985030"
  },
  {
    "text": "And what am I adding\nto the end of it? STUDENT: [INAUDIBLE]",
    "start": "985030",
    "end": "991040"
  },
  {
    "text": "ANA BELL: Yeah, exactly. This L3, which is\nthis big thing here. So it's a list with two\nelements, the first one being",
    "start": "991040",
    "end": "999200"
  },
  {
    "text": "a string and the second one\nbeing another list like that.",
    "start": "999200",
    "end": "1006120"
  },
  {
    "text": "So that's the right hand side. And then what is the left\nhand side going to be? What is L going to be?",
    "start": "1006120",
    "end": "1011380"
  },
  {
    "text": "Yeah, exactly.  Exactly. ",
    "start": "1011380",
    "end": "1019390"
  },
  {
    "text": "OK, so now that we've\nintroduced mutable objects, we have to be careful about\nwhat functions we're using.",
    "start": "1019390",
    "end": "1025130"
  },
  {
    "text": "Some of them mutate the list\nand don't return anything. Append is one of\nthem, and we're going",
    "start": "1025130",
    "end": "1030189"
  },
  {
    "text": "to see a few more\nin today's lecture. So these functions\nare just being",
    "start": "1030190",
    "end": "1035679"
  },
  {
    "text": "used for their side effect. They mutate the thing you're\ncalling the function on, and that's it.",
    "start": "1035680",
    "end": "1041687"
  },
  {
    "text": "They don't need to return. They don't return anything. They don't need to\nreturn anything. They have done their job purely\nby the mutation aspect of it.",
    "start": "1041687",
    "end": "1050010"
  },
  {
    "text": "So I want to just quickly\nmake an aside on this dot notation that we've introduced\nwith this append function.",
    "start": "1050010",
    "end": "1060840"
  },
  {
    "text": "This is something we haven't\nactually seen before, but it's something that we\nwill learn about in the future",
    "start": "1060840",
    "end": "1067890"
  },
  {
    "text": "when we create our\nown object types. So right now we're\nusing object types that somebody else wrote, like\na list or a tuple or something",
    "start": "1067890",
    "end": "1075559"
  },
  {
    "text": "like that. But in a future\nclass, we're going to learn how to create\nour own object types. And when we do, we're going to\nuse this dot notation a lot.",
    "start": "1075560",
    "end": "1084490"
  },
  {
    "text": "But for now, you basically just\nkind of have to remember which functions use dot\nnotation and which don't.",
    "start": "1084490",
    "end": "1091090"
  },
  {
    "text": "But I'll give you a little bit\nof intuition for what this dot notation actually means. So when we have-- so everything\nin Python is an object.",
    "start": "1091090",
    "end": "1099060"
  },
  {
    "text": "And when we have\nobjects in Python, the idea here is that the\nobjects that you have have data",
    "start": "1099060",
    "end": "1108370"
  },
  {
    "text": "associated with them. So what makes up the object. And they have certain behaviors.",
    "start": "1108370",
    "end": "1114250"
  },
  {
    "text": "So we touched upon this\non maybe the first lecture where we said things\nyou can do with integers",
    "start": "1114250",
    "end": "1120350"
  },
  {
    "text": "are different than the things\nyou can do with strings. That's pretty clear. And that's different than the\nthings you can do with lists.",
    "start": "1120350",
    "end": "1129240"
  },
  {
    "text": "And so the kinds\nof things that you could do with each one\nof these object types differs depending on the type.",
    "start": "1129240",
    "end": "1135380"
  },
  {
    "text": "And at its core,\nreally everything can be written in terms\nof this dot notation.",
    "start": "1135380",
    "end": "1140670"
  },
  {
    "text": "But some of the more\ncommon operations, like getting the length of\nsomething or adding two numbers",
    "start": "1140670",
    "end": "1146510"
  },
  {
    "text": "together are actually-- we do\nthem in this shorthand notation, like using the plus\noperator or using the len.",
    "start": "1146510",
    "end": "1153529"
  },
  {
    "text": "But at their core, really, we\ncan take all of those operations and convert them\nto a dot notation.",
    "start": "1153530",
    "end": "1159120"
  },
  {
    "text": "We're not doing this today,\nbut that's what we can do. And so when we see\nthis dot notation,",
    "start": "1159120",
    "end": "1164630"
  },
  {
    "text": "the way we usually read\nit is we say, well, what's to the left of the dot? It's going to be our\nobject, the thing that we",
    "start": "1164630",
    "end": "1170240"
  },
  {
    "text": "want to do an operation on. In this particular case,\nit's a list named L,",
    "start": "1170240",
    "end": "1176160"
  },
  {
    "text": "but it could be a list\nnamed employees or words or whatever, book or whatever,\nwhatever the list name is.",
    "start": "1176160",
    "end": "1185750"
  },
  {
    "text": "The dot then comes\nfor the dot notation. And then the thing on\nthe right hand side",
    "start": "1185750",
    "end": "1190760"
  },
  {
    "text": "is going to be the\noperation that you want to perform on the object\nto the left of the dot.",
    "start": "1190760",
    "end": "1196470"
  },
  {
    "text": "So the operation, if you\nbasically cover up L dot, the operation looks\njust like a function.",
    "start": "1196470",
    "end": "1202470"
  },
  {
    "text": "It's append, parentheses,\nsome parameters. And so the operation is\nbasically just a function",
    "start": "1202470",
    "end": "1208580"
  },
  {
    "text": "that you want to run on\nan object of type list. This specific object named L.\nAnd you can see it has a name,",
    "start": "1208580",
    "end": "1216980"
  },
  {
    "text": "append, and it has\nparameters or arguments. In this case, it's\nthe thing you want to add to the end of the list.",
    "start": "1216980",
    "end": "1223990"
  },
  {
    "text": "So again, unfortunately,\nat this point in the class, you just have to remember which\nfunctions are dot notation",
    "start": "1223990",
    "end": "1230050"
  },
  {
    "text": "and which ones are not. But it will become clear what\nthis dot notation actually means",
    "start": "1230050",
    "end": "1235570"
  },
  {
    "text": "towards the end of the class. So let's have you work\non this little code here.",
    "start": "1235570",
    "end": "1242160"
  },
  {
    "text": "It's going to use\nappend, obviously, and it's going to have\nyou create a list. So the name of the function\nyou should make here",
    "start": "1242160",
    "end": "1249070"
  },
  {
    "text": "is called make ordered list. And it takes in one\nparameter, an integer n. It's positive.",
    "start": "1249070",
    "end": "1254330"
  },
  {
    "text": "And I want you to create\nfor me a list that",
    "start": "1254330",
    "end": "1259600"
  },
  {
    "text": "has all of the integers from 0\nall the way up to and including n inside that list in order.",
    "start": "1259600",
    "end": "1265730"
  },
  {
    "text": "So as an example, down\nin here around 34.",
    "start": "1265730",
    "end": "1274910"
  },
  {
    "text": "If we call make\nordered list with 6, it's going to create for us\nthis list inside the function",
    "start": "1274910",
    "end": "1281740"
  },
  {
    "text": "and return this list. So a couple of minutes\nto work on that",
    "start": "1281740",
    "end": "1287550"
  },
  {
    "text": "and then we can\nwrite it together.  All right.",
    "start": "1287550",
    "end": "1292720"
  },
  {
    "text": "What's the first thing\nwe should do here? Or how would you\napproach this problem? ",
    "start": "1292720",
    "end": "1300220"
  },
  {
    "text": "Yes. You want to create\nan empty list. What do you want to name it?",
    "start": "1300220",
    "end": "1307180"
  },
  {
    "text": "You named it list. List is an OK name,\nbut notice list",
    "start": "1307180",
    "end": "1312320"
  },
  {
    "text": "is also the name of\nthe type of the object. So I would refrain from\nnaming anything things that",
    "start": "1312320",
    "end": "1319279"
  },
  {
    "text": "change color. So we can use L or\nmy list or whatever. Something else.",
    "start": "1319280",
    "end": "1325430"
  },
  {
    "text": "My list is an empty list. All right, so it's\noriginally empty, and now we need to populate\nit with some stuff.",
    "start": "1325430",
    "end": "1331148"
  },
  {
    "text": " Do you want to go on? STUDENT: Make a for loop. ANA BELL: Make a for loop.",
    "start": "1331148",
    "end": "1337080"
  },
  {
    "text": "That goes over what? STUDENT: [INAUDIBLE]",
    "start": "1337080",
    "end": "1342740"
  },
  {
    "text": "ANA BELL: Yup. 0 to n plus 1. Exactly. Because we need our boundary\nto go up to and including n.",
    "start": "1342740",
    "end": "1349920"
  },
  {
    "text": "Perfect. So now that I've got I changing\nto be 0, then 1, then 2, then 3,",
    "start": "1349920",
    "end": "1356820"
  },
  {
    "text": "what do I need to do to my list? Yeah, exactly.",
    "start": "1356820",
    "end": "1362040"
  },
  {
    "text": "Append i. So my list is the\nname of the list I've created dot append I. The\nlast thing, return the list.",
    "start": "1362040",
    "end": "1374250"
  },
  {
    "text": "So return my list. So run it.",
    "start": "1374250",
    "end": "1379430"
  },
  {
    "text": "Perfect. If we change this\nto 2, still works.",
    "start": "1379430",
    "end": "1386190"
  },
  {
    "text": "So just testing it\nout with a couple different inputs just\nto make sure it works.",
    "start": "1386190",
    "end": "1391650"
  },
  {
    "text": "Questions about this code? Yeah. STUDENT: [INAUDIBLE]",
    "start": "1391650",
    "end": "1399370"
  },
  {
    "text": "ANA BELL: The 0 is not\nnecessary in the range. It defaults to 0. Exactly. ",
    "start": "1399370",
    "end": "1411010"
  },
  {
    "text": "We're not done yet. You have more writing to do. So let's write a slightly\ndifferent function now called",
    "start": "1411010",
    "end": "1418120"
  },
  {
    "text": "remove LM. It takes in two parameters. The first one is a\nlist, and the second one",
    "start": "1418120",
    "end": "1425890"
  },
  {
    "text": "is going to be\njust some variable. It could be an integer,\nit could be a string,",
    "start": "1425890",
    "end": "1431020"
  },
  {
    "text": "it could be whatever. And what the function should\ndo is create a new list,",
    "start": "1431020",
    "end": "1437620"
  },
  {
    "text": "populate it with the same\nelements of L in the same order, but exclude the ones\nthat are equal to e.",
    "start": "1437620",
    "end": "1446183"
  },
  {
    "text": "So you don't want to include\nthe ones that are equal to e. Otherwise, keep everything\nin the original list",
    "start": "1446183",
    "end": "1451450"
  },
  {
    "text": "L in the same order. So as an example here, we've got\nif our input list is 1, 2, 2, 2,",
    "start": "1451450",
    "end": "1459310"
  },
  {
    "text": "2, and I call the\nfunction with L and 2, the list that this\nfunction returns should just",
    "start": "1459310",
    "end": "1467410"
  },
  {
    "text": "contain one element in it. Just the one. ",
    "start": "1467410",
    "end": "1473700"
  },
  {
    "text": "So try your code\nfor the next couple of minutes around line 50. And then we can\nwrite it together.",
    "start": "1473700",
    "end": "1480005"
  },
  {
    "text": " All right.",
    "start": "1480005",
    "end": "1485100"
  },
  {
    "text": "How can we start? ",
    "start": "1485100",
    "end": "1496960"
  },
  {
    "text": "Yes. STUDENT: I created a new list. ANA BELL: Yep. What did you name it? STUDENT: [INAUDIBLE]",
    "start": "1496960",
    "end": "1502809"
  },
  {
    "text": "ANA BELL: Cool.  What did you make it be--",
    "start": "1502810",
    "end": "1508330"
  },
  {
    "text": "empty list. OK. STUDENT: And then\nI said [INAUDIBLE]..",
    "start": "1508330",
    "end": "1515330"
  },
  {
    "text": "ANA BELL: Yep. So for I in L.\nAnd at this point, I would make a note for\nmyself, because you use I,",
    "start": "1515330",
    "end": "1522320"
  },
  {
    "text": "which in my brain means index. But I would make\na note for myself",
    "start": "1522320",
    "end": "1527390"
  },
  {
    "text": "that I is maybe 1,\nthen 2, then 2, then 2, just according to\nthis first example.",
    "start": "1527390",
    "end": "1534559"
  },
  {
    "text": "So if I'm reading the\ncode, I would just-- I will remember that it's\nnot the index, but go on.",
    "start": "1534560",
    "end": "1541020"
  },
  {
    "text": "So for I and L directly. STUDENT: [INAUDIBLE]",
    "start": "1541020",
    "end": "1546450"
  },
  {
    "text": " ANA BELL: Like this?",
    "start": "1546450",
    "end": "1553080"
  },
  {
    "text": "OK. STUDENT: [INAUDIBLE] ",
    "start": "1553080",
    "end": "1560380"
  },
  {
    "text": "ANA BELL: Yeah. OK. And then that's good.",
    "start": "1560380",
    "end": "1566120"
  },
  {
    "text": "Return your list. OK. Let's try it. ",
    "start": "1566120",
    "end": "1575220"
  },
  {
    "text": "STUDENT: [INAUDIBLE] ANA BELL: Yeah, so\ne is not a list. e is going to be an element.",
    "start": "1575220",
    "end": "1583340"
  },
  {
    "text": "So that's my bad. I should have put this in here.\ne is an object or something.",
    "start": "1583340",
    "end": "1593679"
  },
  {
    "text": "It could be a list,\nbut then I would be looking for that exact\nsublist, that exact list",
    "start": "1593680",
    "end": "1599320"
  },
  {
    "text": "as a subelement. So maybe we think of\ne as an object like 5 or something like that.",
    "start": "1599320",
    "end": "1604960"
  },
  {
    "text": "STUDENT: [INAUDIBLE] ANA BELL: Yeah. Not equal to e. ",
    "start": "1604960",
    "end": "1611840"
  },
  {
    "text": "So if I'm just looking\nfor that element directly, I want I to be not equal\nto e, in which case",
    "start": "1611840",
    "end": "1618650"
  },
  {
    "text": "I keep the element\nin my new list. So if we run that, that\ngives me 1 according to this.",
    "start": "1618650",
    "end": "1625970"
  },
  {
    "text": "Looks like it's correct. And then we can run it\nwith these other two cases. So here I'm removing\nthe element 1.",
    "start": "1625970",
    "end": "1633870"
  },
  {
    "text": "So I'm going to keep 2,\n2, 2 as my returned list. And here I'm removing 0, which\ndoesn't exist in my list at all.",
    "start": "1633870",
    "end": "1642179"
  },
  {
    "text": "So it should just\nkeep, and it does, my original list unchanged. ",
    "start": "1642180",
    "end": "1649610"
  },
  {
    "text": "Any questions\nabout this example? Anyone try it a different way? ",
    "start": "1649610",
    "end": "1658300"
  },
  {
    "text": "OK. ",
    "start": "1658300",
    "end": "1664860"
  },
  {
    "text": "All right. So other useful list operations. We can convert strings to lists\nand then lists back to strings.",
    "start": "1664860",
    "end": "1672910"
  },
  {
    "text": "And this is very\nuseful when you're reading in text or something\nlike that to a function.",
    "start": "1672910",
    "end": "1679910"
  },
  {
    "text": "It's going to be useful for\nproblem set 3, so on and so on. So let's first see how\nwe can take a string s",
    "start": "1679910",
    "end": "1686799"
  },
  {
    "text": "and convert it to a list. So if we just cast\ns to a list, the way",
    "start": "1686800",
    "end": "1692440"
  },
  {
    "text": "we used to cast the\nnumber 5 to a float, we would just say\nfloat parentheses 5.",
    "start": "1692440",
    "end": "1698110"
  },
  {
    "text": "Well, we can take a list\nand cast it to a list by saying list parentheses s.",
    "start": "1698110",
    "end": "1703690"
  },
  {
    "text": "And if we cast it\nlike this, Python takes every single\ncharacter in s",
    "start": "1703690",
    "end": "1709360"
  },
  {
    "text": "and makes it be a separate\nelement in a list. So you can see here I've got\nthe string I heart cs &u.",
    "start": "1709360",
    "end": "1716120"
  },
  {
    "text": "It makes for me a list where\nevery single character, including the space and\nall the special characters,",
    "start": "1716120",
    "end": "1722080"
  },
  {
    "text": "becomes a separate\nentry in my list. That's not that useful.",
    "start": "1722080",
    "end": "1727900"
  },
  {
    "text": "I mean, it can be, but\nit's not that useful. What is more useful is\nto take an input string",
    "start": "1727900",
    "end": "1733870"
  },
  {
    "text": "and split it on a\nparticular character. So one very common character\nthat we would split on",
    "start": "1733870",
    "end": "1739630"
  },
  {
    "text": "is the space. And if we do\nsomething like that, it basically extracts\nfrom us, from our string",
    "start": "1739630",
    "end": "1745179"
  },
  {
    "text": "all of the individual words,\nwhich is pretty useful. So here I've got s.split.",
    "start": "1745180",
    "end": "1752860"
  },
  {
    "text": "And in parentheses, I've got the\ncharacter I want to split on. In this particular\ncase, a space.",
    "start": "1752860",
    "end": "1758570"
  },
  {
    "text": "So if I take s and I\nsplit on the space, Python will go from the\nbeginning of the list to the first space.",
    "start": "1758570",
    "end": "1763940"
  },
  {
    "text": "Make that be one\nelement in the list. It'll go from the first space\nto the next space in my string",
    "start": "1763940",
    "end": "1770380"
  },
  {
    "text": "and make that be the\nnext element in the list. And so on and so on, until it\ngets to the end of the list and makes that last bit the\nlast element in my list.",
    "start": "1770380",
    "end": "1778730"
  },
  {
    "text": "So here, when I've split on the\nspace, I've got 3 base words,",
    "start": "1778730",
    "end": "1784630"
  },
  {
    "text": "quote unquote \"words.\" I heart is going to be one. And there it is\nas my first entry.",
    "start": "1784630",
    "end": "1791010"
  },
  {
    "text": "CS is in between these two\nspaces and that's my next entry. And, &u?",
    "start": "1791010",
    "end": "1796520"
  },
  {
    "text": "Is my last entry here. So this is a very\nuseful function. We can, of course, split\non any character we'd like.",
    "start": "1796520",
    "end": "1803900"
  },
  {
    "text": "So here I am, splitting on\nthe less than character. So there's only one. So if I split on the\nless than character,",
    "start": "1803900",
    "end": "1809960"
  },
  {
    "text": "one element in my resulting\nlist is just the capital I. And the remaining element in my\nresulting list is the 3 space cs",
    "start": "1809960",
    "end": "1819110"
  },
  {
    "text": "&u. And there it is right there. ",
    "start": "1819110",
    "end": "1825030"
  },
  {
    "text": "All right. So once we have a list,\nwe can also go backward.",
    "start": "1825030",
    "end": "1830710"
  },
  {
    "text": "We can take this list and\nconvert it back to strings. So we use this\njoin function here.",
    "start": "1830710",
    "end": "1838600"
  },
  {
    "text": "And the thing before\nthe dot is going to be what character you want\nto join the list elements with.",
    "start": "1838600",
    "end": "1844230"
  },
  {
    "text": "And this is the list you want\nto join back into a string. So let's look at an example.",
    "start": "1844230",
    "end": "1850029"
  },
  {
    "text": "So let's say I have list L\nthat has three entries in it, A, B, and C. If I join\non the empty string,",
    "start": "1850030",
    "end": "1860330"
  },
  {
    "text": "so here this is just quote\nquote beside each other. There's no space or\nanything in there. That's going to take from me\nall the elements in the list L",
    "start": "1860330",
    "end": "1868390"
  },
  {
    "text": "and join them together as one. Nothing in between\nthe A, B, and C. And this operation here\nwill basically make for me",
    "start": "1868390",
    "end": "1876700"
  },
  {
    "text": "A, B, the string A, B, C. If I join on an underscore,\nyou might have guessed,",
    "start": "1876700",
    "end": "1883690"
  },
  {
    "text": "it'll join A, B, and\nC with an underscore in between each character. So there it is. A_B_C.",
    "start": "1883690",
    "end": "1890470"
  },
  {
    "text": "You can join on any\ncharacter you'd like. I don't know if you can\njoin on multiple characters,",
    "start": "1890470",
    "end": "1895580"
  },
  {
    "text": "but I don't see why not. You could try this\nout on your own. Join only works with lists that\ncontain only string elements.",
    "start": "1895580",
    "end": "1905310"
  },
  {
    "text": "So if we try to join a list\nthat has just integers or floats",
    "start": "1905310",
    "end": "1910490"
  },
  {
    "text": "or Booleans, anything that\ndoesn't contain a string in it, then you will get an error.",
    "start": "1910490",
    "end": "1916523"
  },
  {
    "text": "Because it's basically\ntrying to put all these back into a big string. If you wanted to join\nnon-string elements,",
    "start": "1916523",
    "end": "1922730"
  },
  {
    "text": "you would have to basically\nloop through and cast every one of these to\na string first and then",
    "start": "1922730",
    "end": "1928340"
  },
  {
    "text": "join them together. So if you want to join 1, 2,\n3, you would have cast them to strings and then you could\njoin them to make the string 1,",
    "start": "1928340",
    "end": "1936769"
  },
  {
    "text": "2, 3. OK, so let's have you\nwork on this example.",
    "start": "1936770",
    "end": "1942070"
  },
  {
    "text": "So here we're going to\ntry to split the input.",
    "start": "1942070",
    "end": "1947769"
  },
  {
    "text": "So here is a function\ncalled count words. It takes in one input\nsen for sentence.",
    "start": "1947770",
    "end": "1952799"
  },
  {
    "text": "And I wanted to use\nsomething that's not s just to make it clear\nthat the thing before the dot",
    "start": "1952800",
    "end": "1958440"
  },
  {
    "text": "isn't always s. It's whatever object you want\nto split or join or whatever.",
    "start": "1958440",
    "end": "1964080"
  },
  {
    "text": "So this function is going to\nreturn how many words are in s.",
    "start": "1964080",
    "end": "1969330"
  },
  {
    "text": "Quote unquote\n\"words\" in this case, because I'm just interested in\nthe elements or the characters",
    "start": "1969330",
    "end": "1976200"
  },
  {
    "text": "between spaces and between the\nstart and the end of a word. So if it's a number, I\nstill count that as a word.",
    "start": "1976200",
    "end": "1982540"
  },
  {
    "text": "If it's a special character,\na dot, exclamation point, I would still count\nthat as a word as well.",
    "start": "1982540",
    "end": "1988050"
  },
  {
    "text": "So this should be just a couple\nof lines of code down around 99.",
    "start": "1988050",
    "end": "1994833"
  },
  {
    "text": "So I'll give you about\na minute to work on it, and then we can\nwrite it together.",
    "start": "1994833",
    "end": "1999912"
  },
  {
    "text": "So thoughts on how\nwe can do this? ",
    "start": "1999912",
    "end": "2008670"
  },
  {
    "text": "L1 equals sen.split.  Yep.",
    "start": "2008670",
    "end": "2013900"
  },
  {
    "text": "Sorry, parentheses, space. Yep. STUDENT: [INAUDIBLE]",
    "start": "2013900",
    "end": "2019840"
  },
  {
    "text": "ANA BELL: Yep. And then we can return\nthe length of L1. Perfect. Let's run it on\nthese two examples.",
    "start": "2019840",
    "end": "2027190"
  },
  {
    "text": "And should print 3 and 12. And it does. So notice how easy\nthis was with lists,",
    "start": "2027190",
    "end": "2033639"
  },
  {
    "text": "because lists are data structure\nthat's just kind of naturally iterative. And so running len on this\nsplit list or split string,",
    "start": "2033640",
    "end": "2041500"
  },
  {
    "text": "which gave us a\nlist, is really easy. It's a two line piece of code. Without lists, you could\nimagine creating variables",
    "start": "2041500",
    "end": "2049899"
  },
  {
    "text": "that keep track of where\nyou see the first space and then iterating through\none character at a time.",
    "start": "2049900",
    "end": "2055460"
  },
  {
    "text": "And if it's a space, keep track\nof the fact that you saw a space and then look for the next\nspace and then resetting things",
    "start": "2055460",
    "end": "2062138"
  },
  {
    "text": "every time you see a space. And that would be\nreally, really tedious. It would be a really\ngood quiz one question,",
    "start": "2062139",
    "end": "2069010"
  },
  {
    "text": "but not once we've\nintroduced lists, because it becomes really,\nreally easy to do it with lists.",
    "start": "2069010",
    "end": "2074625"
  },
  {
    "text": " All right.",
    "start": "2074625",
    "end": "2081419"
  },
  {
    "text": "So now that we\nhave lists, we can do other really interesting\nand useful operations",
    "start": "2081420",
    "end": "2088739"
  },
  {
    "text": "to mutate the list. So we saw the dot notation\non a list to do append.",
    "start": "2088739",
    "end": "2095888"
  },
  {
    "text": "So basically, to add an\nitem to the end of our list. That was useful. Other things we can do in\nterms of mutating the list",
    "start": "2095889",
    "end": "2103440"
  },
  {
    "text": "is to sort a list\nand reverse a list. And these are also very\nuseful operations on lists.",
    "start": "2103440",
    "end": "2110840"
  },
  {
    "text": "So the first two here,\nsort and reverse, is the notation for\nhow we sort a list",
    "start": "2110840",
    "end": "2118140"
  },
  {
    "text": "and how we reverse a list. And these will mutate the list\nthat you call the functions on.",
    "start": "2118140",
    "end": "2124500"
  },
  {
    "text": "So if I have list\n4, 2, 7 here and I call L.sort and I print L\nas the next line after this,",
    "start": "2124500",
    "end": "2133510"
  },
  {
    "text": "L will have changed in memory\nto be 2, 4, and 7 in that order.",
    "start": "2133510",
    "end": "2139580"
  },
  {
    "text": "It didn't make a copy for me. It didn't preserve\nthe original order. It changed that list to\nbe now in sorted order.",
    "start": "2139580",
    "end": "2147940"
  },
  {
    "text": "Reverse similarly. So if we do\nL.reverse on 4, 2, 7, it will reverse\nall the elements.",
    "start": "2147940",
    "end": "2153710"
  },
  {
    "text": "So the one at the end\nbecomes at the beginning. The one second last\nis the second one. Third last is the third\nelement in the list, and so on.",
    "start": "2153710",
    "end": "2160810"
  },
  {
    "text": "And again, this mutates my list. So I would have lost\nmy original order with this command, L.reverse\nand with L.sort, of course.",
    "start": "2160810",
    "end": "2171049"
  },
  {
    "text": "Now, there are many\nsituations where you want to preserve the original order.",
    "start": "2171050",
    "end": "2177352"
  },
  {
    "text": "I don't know, maybe like\nthe order that people join a company or the order that\npeople joined a grocery queue.",
    "start": "2177353",
    "end": "2182618"
  },
  {
    "text": "I don't know, things like that. You might want to preserve\nthat original order, but you might also get maybe\nthe sorted names of people",
    "start": "2182618",
    "end": "2190369"
  },
  {
    "text": "for a function\nthat does something with those sorted names. In that case, you don't want to\ncall sort on your original list,",
    "start": "2190370",
    "end": "2199190"
  },
  {
    "text": "because you would lose\nthe original order. You could, of\ncourse, make a copy or you could call\nthis sorted function.",
    "start": "2199190",
    "end": "2207930"
  },
  {
    "text": "And the sorted function\nis going to keep my original list L\nintact in the same order",
    "start": "2207930",
    "end": "2213510"
  },
  {
    "text": "that I had created it in. But it would return for me,\nso this function will actually",
    "start": "2213510",
    "end": "2219720"
  },
  {
    "text": "make a copy and return for\nme the sorted version of L. And L remains unchanged.",
    "start": "2219720",
    "end": "2226569"
  },
  {
    "text": "So this function does\nnot do any mutation. We have to take the return and\nsave it into a new variable.",
    "start": "2226570",
    "end": "2232660"
  },
  {
    "text": "This case I called it L new. So might be a little\nbit sort of hard to keep",
    "start": "2232660",
    "end": "2239750"
  },
  {
    "text": "straight in your mind,\nwhether to use sort or sorted. You could, of course,\nalways try it in the console",
    "start": "2239750",
    "end": "2245569"
  },
  {
    "text": "to see which one does what. The way I remember\nand think about it is the sort to me\nfeels like a command.",
    "start": "2245570",
    "end": "2253230"
  },
  {
    "text": "It's like sort this list. Mutate this list and sort it. Whereas sorted is\nmore of a request.",
    "start": "2253230",
    "end": "2262390"
  },
  {
    "text": "Can you please get me\nthe sorted version of L? And so that's kind of how\nI keep things in my mind",
    "start": "2262390",
    "end": "2269110"
  },
  {
    "text": "as to whether I'm calling\nsort to do the mutation or asking to get the\nsorted version of the list.",
    "start": "2269110",
    "end": "2275680"
  },
  {
    "text": "Yes? STUDENT: What is it sorting by? ANA BELL: It is\nsorting it by whatever",
    "start": "2275680",
    "end": "2280950"
  },
  {
    "text": "the built in sort is for\nthose particular object types. So in the case of integers,\nit's just increasing order.",
    "start": "2280950",
    "end": "2289720"
  },
  {
    "text": "In the case of strings,\nit'll be alphabetical.",
    "start": "2289720",
    "end": "2294990"
  },
  {
    "text": "You can choose different\nsorting functions, but we don't get into that.",
    "start": "2294990",
    "end": "2300280"
  },
  {
    "text": "Yeah. STUDENT: [INAUDIBLE] ANA BELL: That's\na good question. I think they do in\norder for it to work.",
    "start": "2300280",
    "end": "2308859"
  },
  {
    "text": "So we can try L equals 1\nand then we can give it",
    "start": "2308860",
    "end": "2314520"
  },
  {
    "text": "a tuple or something. And then we can\nask sort L. Yeah.",
    "start": "2314520",
    "end": "2319700"
  },
  {
    "text": "So in this case, it doesn't\nknow how to resolve. It's trying to do\na behind the scenes less than to figure out which\none is bigger than which.",
    "start": "2319700",
    "end": "2327210"
  },
  {
    "text": "And in this case, it\ndoesn't know how to resolve. How do you choose whether the\ntuple is bigger than an integer?",
    "start": "2327210",
    "end": "2332930"
  },
  {
    "text": "But you can imagine,\nagain, as I mentioned, this is not something we do, but\nyou could write your own sorting function where\ndepending on the type,",
    "start": "2332930",
    "end": "2339260"
  },
  {
    "text": "you would decide\nwhich one is bigger. ",
    "start": "2339260",
    "end": "2345770"
  },
  {
    "text": "So yes. Question? STUDENT: [INAUDIBLE] ",
    "start": "2345770",
    "end": "2353750"
  },
  {
    "text": "ANA BELL: So you would just\ndo L.sort without parentheses, but L has to be a\nlist that contains",
    "start": "2353750",
    "end": "2358940"
  },
  {
    "text": "things that can't be sorted. So all integers, all strings,\nor something like that.",
    "start": "2358940",
    "end": "2364120"
  },
  {
    "text": "So let's look at the memory\ndiagram for how this would look, just to bring the point\nhome about objects",
    "start": "2364120",
    "end": "2370870"
  },
  {
    "text": "that are being mutated. So our original L is 9, 6, 0, 3. So in memory, I've got the\nname L bound to 9, 6, 0, 3.",
    "start": "2370870",
    "end": "2380050"
  },
  {
    "text": "Again, let's do an\nappend just for fun. L.append 5 is going to add\na 5 to the end of that list.",
    "start": "2380050",
    "end": "2387280"
  },
  {
    "text": "And append, sort,\nand reverse will all be used for a side effect. That means they're\ngoing to be mutating",
    "start": "2387280",
    "end": "2392500"
  },
  {
    "text": "the object, whereas sorted\nwill not do a mutation. So let's do an\nappend to the end.",
    "start": "2392500",
    "end": "2399550"
  },
  {
    "text": "That's going to put a 5\nat the end of the list. Something we already\nknow how it works.",
    "start": "2399550",
    "end": "2405940"
  },
  {
    "text": "Now let's do A equals sorted\nL. So again, it's an equality.",
    "start": "2405940",
    "end": "2412069"
  },
  {
    "text": "So the thing on\nthe right hand side is going to be the\nfunction that returns for me the sorted\nversion of L. So it's",
    "start": "2412070",
    "end": "2418390"
  },
  {
    "text": "going to create a new object. However it does the\nsort, it's going to create for me a new list\nthat contains that sorted order.",
    "start": "2418390",
    "end": "2426320"
  },
  {
    "text": "The original L notice in\nmemory remains unchanged. So if I want to reference L in\nmy program from here on out,",
    "start": "2426320",
    "end": "2433720"
  },
  {
    "text": "it will use this unchanged L.\nSo now the return of sorted",
    "start": "2433720",
    "end": "2439770"
  },
  {
    "text": "is this list and I bind\nit to A. So name A now points to the\nsorted list version.",
    "start": "2439770",
    "end": "2447589"
  },
  {
    "text": "All right. Now, what if I do this\nline here, B equals L.sort.",
    "start": "2447590",
    "end": "2453470"
  },
  {
    "text": "Again, let's look at\nthe right hand side. L.sort is going to mutate L.\nSo this function itself will go",
    "start": "2453470",
    "end": "2463049"
  },
  {
    "text": "and change L to be-- L's object, the\nobject that L points to, to be the sorted list.",
    "start": "2463050",
    "end": "2471579"
  },
  {
    "text": "But it's not done. This function is being\nused for a side effect. So what is the return from it?",
    "start": "2471580",
    "end": "2478620"
  },
  {
    "text": "None, right? It's like the append. So this example here\nwill make B point",
    "start": "2478620",
    "end": "2483630"
  },
  {
    "text": "to the return of that\nfunction, which is just none. ",
    "start": "2483630",
    "end": "2491640"
  },
  {
    "text": "Now, please don't ever do this. All you would have to do to sort\nL is to just on a line by itself",
    "start": "2491640",
    "end": "2498310"
  },
  {
    "text": "say L.sort. I just did this\nto show you again that if you do L equals\nL.sort, bad things will happen.",
    "start": "2498310",
    "end": "2505350"
  },
  {
    "text": "You're going to\nreassign L to be none. In this case, I saved it\nunder a different variable, but it's an easy\nmistake to make.",
    "start": "2505350",
    "end": "2512630"
  },
  {
    "text": " And then what about\nthe last one here?",
    "start": "2512630",
    "end": "2517740"
  },
  {
    "text": "L.reverse. Again, I'm going to go and grab\nthe object pointed to by L, and I'm going to reverse\nall the elements.",
    "start": "2517740",
    "end": "2524140"
  },
  {
    "text": "So here doing L.sort and then\nL.reverse right afterward makes my list be in\nreverse sorted order.",
    "start": "2524140",
    "end": "2532180"
  },
  {
    "text": "So biggest number\nto smallest number. So with that command\nthere, I've got 9, 6, 5, 3,",
    "start": "2532180",
    "end": "2538161"
  },
  {
    "text": "0 instead of 0, 3, 5, 6, 9. And again, sort and reverse\nchanged my list L directly.",
    "start": "2538161",
    "end": "2546420"
  },
  {
    "text": "So I've lost that initial\norder of 9, 6, 0, 3 that I had up here.",
    "start": "2546420",
    "end": "2551755"
  },
  {
    "text": " One last point I want to make.",
    "start": "2551755",
    "end": "2558160"
  },
  {
    "text": "I know we've usually\nseen functions that take in parameters. Sort and reverse\nare still functions.",
    "start": "2558160",
    "end": "2564730"
  },
  {
    "text": "And they just happen to\nnot need any parameters. You call them on the object\nL using this dot notation.",
    "start": "2564730",
    "end": "2572329"
  },
  {
    "text": "So in effect, it does have sort\nof a quote unquote \"parameter,\" the thing before the dot. But it doesn't\ntake anything else",
    "start": "2572330",
    "end": "2579280"
  },
  {
    "text": "in their own\nrespective parentheses. But they do still need\nthe parentheses there, because they are functions.",
    "start": "2579280",
    "end": "2585740"
  },
  {
    "text": "They are operations that\nwill do something for us.",
    "start": "2585740",
    "end": "2591130"
  },
  {
    "text": "Questions about this? Is it OK? OK, very good, because now you\nget a chance to try it out.",
    "start": "2591130",
    "end": "2598769"
  },
  {
    "text": "So let's have you do\nsomething similar to what we did last time. Take in a parameter sen,\nwhich is a string representing",
    "start": "2598770",
    "end": "2605510"
  },
  {
    "text": "a sentence. I want you to figure out all\nthe words, quote unquote, in the same manner that we did\nbefore in the previous example,",
    "start": "2605510",
    "end": "2614040"
  },
  {
    "text": "but now return for me\na list with these words in sorted order.",
    "start": "2614040",
    "end": "2619550"
  },
  {
    "text": "So if the input was look at\nthis photograph as my sentence, then I would return a list\nwhich has at look photograph",
    "start": "2619550",
    "end": "2629220"
  },
  {
    "text": "and this as my four\nelements in that order. ",
    "start": "2629220",
    "end": "2635700"
  },
  {
    "text": "So here start writing\nit down on line 134.",
    "start": "2635700",
    "end": "2643531"
  },
  {
    "text": "OK, what is the solution? What do you have so far? ",
    "start": "2643531",
    "end": "2656869"
  },
  {
    "text": "Yes. STUDENT: L equals sen.split\nwith the [INAUDIBLE].. ANA BELL: L equals sen.split\nand we split on a space.",
    "start": "2656870",
    "end": "2665780"
  },
  {
    "text": "Got it. OK. STUDENT: And then L.sort\nparentheses with nothing around. ANA BELL: Got it.",
    "start": "2665780",
    "end": "2672240"
  },
  {
    "text": "Return L. Perfect. OK, let's see if that worked\nwith our two examples.",
    "start": "2672240",
    "end": "2679040"
  },
  {
    "text": "Yep. There's my first one. There's my second one. Anybody do it a different way?",
    "start": "2679040",
    "end": "2684810"
  },
  {
    "text": "Did anyone use sorted? Yeah. STUDENT: I just said return\nsorted parentheses L.",
    "start": "2684810",
    "end": "2691760"
  },
  {
    "text": "ANA BELL: Return sorted\nparentheses L. Yeah.",
    "start": "2691760",
    "end": "2699140"
  },
  {
    "text": "Is that how you-- STUDENT: [INAUDIBLE] ",
    "start": "2699140",
    "end": "2704180"
  },
  {
    "text": "ANA BELL: Yep. We could do it all in one. Perfect. Yeah, this could be a\none liner, for sure.",
    "start": "2704180",
    "end": "2709210"
  },
  {
    "text": "Yeah, so this works\nbecause this thing here",
    "start": "2709210",
    "end": "2714760"
  },
  {
    "text": "creates for me a new object. I could have saved it\nin a different variable and then returned that variable,\nbut this does it all in one.",
    "start": "2714760",
    "end": "2723539"
  },
  {
    "text": "So just for completion\nsake, if we comment out the other solution,\nthis way still works.",
    "start": "2723540",
    "end": "2730625"
  },
  {
    "text": " Questions so far?",
    "start": "2730625",
    "end": "2736625"
  },
  {
    "text": " OK. ",
    "start": "2736625",
    "end": "2743380"
  },
  {
    "text": "All right. So what we've seen\nso far is a bunch of these functions,\nbuilt in functions,",
    "start": "2743380",
    "end": "2749710"
  },
  {
    "text": "that have these side effects. They mutate the input list.",
    "start": "2749710",
    "end": "2755470"
  },
  {
    "text": "So we can actually\nwrite our own functions that have a side effect, where\nif we pass in a parameter that's",
    "start": "2755470",
    "end": "2763060"
  },
  {
    "text": "a list, we can have\nour functions mutate that list however we'd like.",
    "start": "2763060",
    "end": "2769240"
  },
  {
    "text": "So let's go through\nthis example. Let's say we were given the\ntask of writing a function that",
    "start": "2769240",
    "end": "2775690"
  },
  {
    "text": "takes an input\nlist L and mutates the list L such that\neach element in L",
    "start": "2775690",
    "end": "2782710"
  },
  {
    "text": "is changed to be\nthe element square. So 2, 3, and 4 as an input\nlist becomes 4, 9, 16.",
    "start": "2782710",
    "end": "2792670"
  },
  {
    "text": "And I'm mutating that list. I'm not creating a new list\nand returning the new list.",
    "start": "2792670",
    "end": "2798110"
  },
  {
    "text": "I want to actually\nmutate the input list L. So if we were faced\nwith this task,",
    "start": "2798110",
    "end": "2805020"
  },
  {
    "text": "the way that we would\ngo about it, maybe based on what we've learned\nso far, is to say, well,",
    "start": "2805020",
    "end": "2810060"
  },
  {
    "text": "I'm going to iterate\nthrough each element in L because that's a very\nPythonic way to do this. So I'm grabbing the\nelement in the list L.",
    "start": "2810060",
    "end": "2817890"
  },
  {
    "text": "But then I would be stuck. Because the syntax for\nchanging an element",
    "start": "2817890",
    "end": "2824560"
  },
  {
    "text": "at a particular\nlocation is L at I equals whatever the\nchanged thing is.",
    "start": "2824560",
    "end": "2833690"
  },
  {
    "text": "But my loop variable is\niterating through the element directly. So what's my index in\nthis particular case?",
    "start": "2833690",
    "end": "2841010"
  },
  {
    "text": "I don't have it in hand. I have the element, but\nI don't have the index. So what are some solutions?",
    "start": "2841010",
    "end": "2848570"
  },
  {
    "text": "Well, a first solution could\nbe right before the loop to create a new variable that\nkeeps track of the index.",
    "start": "2848570",
    "end": "2856289"
  },
  {
    "text": "So you make I equals 0\nright before the for loop. And inside the for loop,\nyou increment I each time.",
    "start": "2856290",
    "end": "2862500"
  },
  {
    "text": "Now you're keeping track\nof the index yourself. Option two is to change\nwhat we iterate over.",
    "start": "2862500",
    "end": "2868310"
  },
  {
    "text": "So instead of iterating through\neach element in L directly, let's iterate over the index. So iterate over range\nlength L. In that case,",
    "start": "2868310",
    "end": "2877750"
  },
  {
    "text": "the range length L basically\nbecomes range 5 or 20",
    "start": "2877750",
    "end": "2882820"
  },
  {
    "text": "or whatever the\nlength of my list is. And a last option is to try to\nuse this thing called enumerate,",
    "start": "2882820",
    "end": "2891200"
  },
  {
    "text": "which is a Python keyword,\nI guess, Python function.",
    "start": "2891200",
    "end": "2897230"
  },
  {
    "text": "And the syntax for that\nwould be for tuple I comma e in enumerate L. So I'm\nbasically wrapping L",
    "start": "2897230",
    "end": "2905030"
  },
  {
    "text": "inside this enumerate function. And Python each time\nthrough the loop makes this little\ntuple I comma e",
    "start": "2905030",
    "end": "2912680"
  },
  {
    "text": "be the index and the\nelement at each location",
    "start": "2912680",
    "end": "2917984"
  },
  {
    "text": "each time through the loop. And so it gives you a two for\none kind of deal here using this enumerate function.",
    "start": "2917985",
    "end": "2923330"
  },
  {
    "text": "I'm not going to go over\noption one or option three. I do encourage you to try\nto look these up or try to implement them yourself.",
    "start": "2923330",
    "end": "2929250"
  },
  {
    "text": "But I will go over option\ntwo in these slides.",
    "start": "2929250",
    "end": "2934620"
  },
  {
    "text": "So if I were to iterate\nover the index directly, the way I do it is I'd have to\nchange the loop variable for I",
    "start": "2934620",
    "end": "2943890"
  },
  {
    "text": "in. And then the thing I want to\nloop over is all of the indices.",
    "start": "2943890",
    "end": "2951160"
  },
  {
    "text": "So I want to get the\nnumbers 0, 1, 2, 3, 4, all the way up to the but\nnot including the length of L.",
    "start": "2951160",
    "end": "2959720"
  },
  {
    "text": "So once I have\nthis index in hand, I can do something like this\nvery easily, because this I here",
    "start": "2959720",
    "end": "2965720"
  },
  {
    "text": "is going to be my index. And the thing on\nthe right hand side",
    "start": "2965720",
    "end": "2970730"
  },
  {
    "text": "is just going to be a matter\nof grabbing the element at that index and squaring it.",
    "start": "2970730",
    "end": "2976620"
  },
  {
    "text": "So here L square brackets I on\nthe right hand side grabs for me the element at index I.",
    "start": "2976620",
    "end": "2983680"
  },
  {
    "text": "So what's the value\nof that element at that particular location? 23 whatever.",
    "start": "2983680",
    "end": "2989340"
  },
  {
    "text": "Square it. So **2 squares it. And then the thing\non the left hand side",
    "start": "2989340",
    "end": "2995250"
  },
  {
    "text": "is the syntax for\nchanging the element at a particular location. We saw this way\nback on slide two.",
    "start": "2995250",
    "end": "3004160"
  },
  {
    "text": "So with this line\nof code, Python goes through each element\nin the list and squares it and saves it back\ninto that same list.",
    "start": "3004160",
    "end": "3011400"
  },
  {
    "text": "No new list is created. It's mutating the original list.",
    "start": "3011400",
    "end": "3016430"
  },
  {
    "text": "No return. Nothing to return. This function will return\nnone because it does",
    "start": "3016430",
    "end": "3022710"
  },
  {
    "text": "its job of doing the mutation. So if we go through an example,\nsuppose that L is 2, 3, 4.",
    "start": "3022710",
    "end": "3029610"
  },
  {
    "text": "What is this loop going to do? So I the first time\nthrough the loop will be 0.",
    "start": "3029610",
    "end": "3035339"
  },
  {
    "text": "And then that first time through\nthe loop, it will mutate I. So it says L square bracket 0\nequals whatever the element at 0",
    "start": "3035340",
    "end": "3045220"
  },
  {
    "text": "is, the 2 squared. So L square bracket 0\nwill be changed to 4.",
    "start": "3045220",
    "end": "3051520"
  },
  {
    "text": "So we've mutated the element\nat index 0 to be a 4, and everything else is the same.",
    "start": "3051520",
    "end": "3056900"
  },
  {
    "text": "Next time through the\nloop, I'm mutating the list that I had just mutated.",
    "start": "3056900",
    "end": "3062480"
  },
  {
    "text": "So the first element is\nstill the mutated value 4. But now I'm going to change\nmy element at index 1",
    "start": "3062480",
    "end": "3069460"
  },
  {
    "text": "to be 3 squared 9. The last time through the loop,\nall the elements up to index 2",
    "start": "3069460",
    "end": "3076240"
  },
  {
    "text": "are going to be the\nmutated elements. So 4 and 9. And then the last\ntime through the loop by mutating the 4 to be 16,\nthe square version of that.",
    "start": "3076240",
    "end": "3084690"
  },
  {
    "text": " So to check that we did\nthe mutation correctly,",
    "start": "3084690",
    "end": "3092700"
  },
  {
    "text": "what we would do is we\nwould create an input list. I called it L in. And I've set it to\n2, 3, 4, my example.",
    "start": "3092700",
    "end": "3101760"
  },
  {
    "text": "If I print before the function,\ncall the value of L in, it's 2 comma 3 comma\n4, as expected.",
    "start": "3101760",
    "end": "3107640"
  },
  {
    "text": "It shouldn't be anything\ndifferent than that. Then I make a function call to\nthe function that we just wrote.",
    "start": "3107640",
    "end": "3113710"
  },
  {
    "text": "Note I'm not returning\nanything here. So I'm not saving the\nfunction call to any variable.",
    "start": "3113710",
    "end": "3122930"
  },
  {
    "text": "If I print L in after\nthe function call, it will print the mutated list.",
    "start": "3122930",
    "end": "3128309"
  },
  {
    "text": "So this L in here and here\nand here is the same object.",
    "start": "3128310",
    "end": "3133640"
  },
  {
    "text": "Nothing was returned. This function here has nothing\nto assign its return to.",
    "start": "3133640",
    "end": "3139020"
  },
  {
    "text": "If we assigned it to something,\nthat variable would be none. Just like the append, just like\nthe sort, just like the reverse.",
    "start": "3139020",
    "end": "3144895"
  },
  {
    "text": " All right. So when you're writing--",
    "start": "3144895",
    "end": "3150560"
  },
  {
    "text": "oh yeah, question. STUDENT: So we\ncreated a function, but we don't have a return\nand it doesn't say none.",
    "start": "3150560",
    "end": "3159397"
  },
  {
    "text": "ANA BELL: We created a function. It doesn't have a return. It doesn't say none because\nwe didn't save the function",
    "start": "3159397",
    "end": "3164900"
  },
  {
    "text": "call to any variable. If we said A equals this\nfunction call, if we print A,",
    "start": "3164900",
    "end": "3173000"
  },
  {
    "text": "it would show none. Yeah.  OK, so when we're\nwriting functions",
    "start": "3173000",
    "end": "3179010"
  },
  {
    "text": "that mutate input lists,\nthe two likely things you're going to have\nto do, and it depends",
    "start": "3179010",
    "end": "3184440"
  },
  {
    "text": "on what your function is\nactually doing, but most likely you're going to have to iterate\nover the length of the list. So for I in range length L\nto grab the index as well",
    "start": "3184440",
    "end": "3193290"
  },
  {
    "text": "as the element. To be able to grab the index\nas well as the element. And these functions, I mean,\nthey could do other stuff.",
    "start": "3193290",
    "end": "3200160"
  },
  {
    "text": "But if you're using them for\nmutation and things like that, they're going to return none. So when you make\nfunction calls to them,",
    "start": "3200160",
    "end": "3206970"
  },
  {
    "text": "those function calls will\nlikely just be on a line without saving the\nreturn to any variable.",
    "start": "3206970",
    "end": "3212315"
  },
  {
    "text": " So we've talked about\nmutable objects.",
    "start": "3212315",
    "end": "3218240"
  },
  {
    "text": "They're very, very useful. Places where they're useful or\nthe reason that they're useful",
    "start": "3218240",
    "end": "3224650"
  },
  {
    "text": "is because they allow you to\nhave basically large databases of objects like employees in a\ncompany list of all the students",
    "start": "3224650",
    "end": "3235450"
  },
  {
    "text": "at MIT, things like that. And if you want to make a change\nto something about that list,",
    "start": "3235450",
    "end": "3242320"
  },
  {
    "text": "like a student changes\ntheir name or their address or something like\nthat, with tuples, you'd have to make a new\ncopy of that entire list.",
    "start": "3242320",
    "end": "3250309"
  },
  {
    "text": "So it could be very\nspace inefficient, because every time\na student changes their address or their name\nor something about themselves",
    "start": "3250310",
    "end": "3257625"
  },
  {
    "text": "or their grades\nor something like that, you're making a new\ncopy of this potentially thousands long data structure.",
    "start": "3257625",
    "end": "3265480"
  },
  {
    "text": "Lists don't have that issue. With lists, you're just\nmutating the object in place and you're done.",
    "start": "3265480",
    "end": "3271010"
  },
  {
    "text": "No extra copies are being made,\nso it's a very efficient data structure. But with lists come some\nunexpected challenges.",
    "start": "3271010",
    "end": "3277382"
  },
  {
    "text": "And we're going to go through\nthree tricky examples today. In next lecture, we're going to\nsee tricky example number four.",
    "start": "3277383",
    "end": "3282770"
  },
  {
    "text": "And these three tricky\nexamples involve looping over the list in one way or another. Over the range of the length\nof the list or through the list",
    "start": "3282770",
    "end": "3290170"
  },
  {
    "text": "directly. So let's look at\nthe first example. ",
    "start": "3290170",
    "end": "3296430"
  },
  {
    "text": "In this code down\nhere, we're going to loop over the range\nof the length of the L.",
    "start": "3296430",
    "end": "3302440"
  },
  {
    "text": "And then what we're going to do\nis append the loop variable I",
    "start": "3302440",
    "end": "3308130"
  },
  {
    "text": "to the end of my list. Now, what does\nrange length L do?",
    "start": "3308130",
    "end": "3315750"
  },
  {
    "text": "So remember the thing\nthat our for loop iterates over is a sequence of values.",
    "start": "3315750",
    "end": "3322800"
  },
  {
    "text": "Now, range some number creates\nfor us a tuple like object. Not a tuple\nspecifically, but you",
    "start": "3322800",
    "end": "3329460"
  },
  {
    "text": "can think of it like a tuple. So range 4, the length\nof this particular list,",
    "start": "3329460",
    "end": "3335039"
  },
  {
    "text": "would create for us in memory\nsomething like a tuple. The sequence 0, 1, 2, 3.",
    "start": "3335040",
    "end": "3340750"
  },
  {
    "text": "And this is the\nsequence that the loop variable I will go over. First it will be 0, then it\nwill be 1, then it will be 2,",
    "start": "3340750",
    "end": "3346920"
  },
  {
    "text": "then it'll be 3. So when we iterate\nthrough the sequence,",
    "start": "3346920",
    "end": "3352050"
  },
  {
    "text": "Python says, OK, the first time\nI encountered this for loop, I'm going to save this\nsequence I need to iterate over",
    "start": "3352050",
    "end": "3359340"
  },
  {
    "text": "as an object in memory. And then I'm going to\nhave my loop variable iterate over each one\nof these elements.",
    "start": "3359340",
    "end": "3365410"
  },
  {
    "text": "The thing I'm doing is appending\nI to the end of a list. So the first time\nthrough the list I'm",
    "start": "3365410",
    "end": "3370530"
  },
  {
    "text": "going to append a 0 to the end. So the 0 being this\nloop variable here.",
    "start": "3370530",
    "end": "3375900"
  },
  {
    "text": "Next time through the list,\nI'm appending the 1 to the list I just mutated.",
    "start": "3375900",
    "end": "3381590"
  },
  {
    "text": "Next time, I'm appending the\n2 to the list I just mutated. And the last time\nthrough the list,",
    "start": "3381590",
    "end": "3387290"
  },
  {
    "text": "I'm appending the 3 to\nthe list I just mutated. And we finish.",
    "start": "3387290",
    "end": "3392690"
  },
  {
    "text": "We've gone through four times. We've appended four items\nto the end of the list. 0, 1, 2, and 3, the\nelements of my sequence",
    "start": "3392690",
    "end": "3405060"
  },
  {
    "text": "that I'm iterating over. Let's look at the\nmemory diagram.",
    "start": "3405060",
    "end": "3411160"
  },
  {
    "text": "So originally L is 1, 2, 3, 4. What exactly happens when we\nfirst encounter range length L?",
    "start": "3411160",
    "end": "3418059"
  },
  {
    "text": "That gets put as a variable,\nthis tuple like thing. I made it be a tuple, but it's\nnot exactly a tuple in memory.",
    "start": "3418060",
    "end": "3425840"
  },
  {
    "text": "And this I will iterate\nthrough each one of these values in my sequence. This is the sequence of values\nthat I'm going to iterate over.",
    "start": "3425840",
    "end": "3436760"
  },
  {
    "text": "So the first time\nthrough the loop, Python has I pointing to 0 here.",
    "start": "3436760",
    "end": "3442369"
  },
  {
    "text": "And so what's it\ndoing inside the loop? It's going to append the 0 to\nthe end of L. Next time through,",
    "start": "3442370",
    "end": "3450390"
  },
  {
    "text": "then it's going\nto print L. Sorry. And then next time\nthrough the loop, the loop variable\nincrements by 1.",
    "start": "3450390",
    "end": "3457090"
  },
  {
    "text": "So we've already\nlooked at the 0. Now we're going to do the 1. So the loop variable I is now 1.",
    "start": "3457090",
    "end": "3462655"
  },
  {
    "text": "So we're going to\nappend the loop variable 1 to the end of\nL. Print L. Loop variable",
    "start": "3462655",
    "end": "3468930"
  },
  {
    "text": "becomes 2. Append the loop variable to the\nend of L. So now it has a 2. Print L. And then\nthe last time we",
    "start": "3468930",
    "end": "3476670"
  },
  {
    "text": "append the loop variable\n3 to the end of the list L and print L.",
    "start": "3476670",
    "end": "3481800"
  },
  {
    "text": "Pretty straightforward. The code terminates\nbecause we've created this original\ntuple-like object here,",
    "start": "3481800",
    "end": "3489360"
  },
  {
    "text": "which tells Python what values\nyou need to iterate over. This is your sequence\nof values to go through.",
    "start": "3489360",
    "end": "3494645"
  },
  {
    "text": " So that's basically what I said.",
    "start": "3494645",
    "end": "3500810"
  },
  {
    "text": "So let's look at a\nslightly different example. So in this case, instead of\niterating over the range length",
    "start": "3500810",
    "end": "3506960"
  },
  {
    "text": "L, let's iterate over the\nelements in L directly. So for e in L. Now, to\nkeep things in parallel",
    "start": "3506960",
    "end": "3516050"
  },
  {
    "text": "to what we had\ndone before, let's create a loop variable I\nequals 0 before the for loop",
    "start": "3516050",
    "end": "3521148"
  },
  {
    "text": "and let's increment it by 1\neach time through the loop. So we're going to still append\n0, then 1, then 2, then 3",
    "start": "3521148",
    "end": "3526280"
  },
  {
    "text": "to the end of our list. So in this particular\ncase, we start out",
    "start": "3526280",
    "end": "3532393"
  },
  {
    "text": "with the memory\ndiagram like this. So we have L pointing\nto 1, 2, 3, 4.",
    "start": "3532393",
    "end": "3537500"
  },
  {
    "text": "Loop variable I is going\nto be 0 originally. And e will first point to the\nfirst element in the list.",
    "start": "3537500",
    "end": "3545270"
  },
  {
    "text": "That's what for loop over the\nelements in the list does. So going into the list, we say\nL.append I. So at the end of L,",
    "start": "3545270",
    "end": "3555120"
  },
  {
    "text": "I'm going to mutate\nit to contain a 0. Good?",
    "start": "3555120",
    "end": "3560720"
  },
  {
    "text": "I increment I by 1. Good. I print L OK, good.",
    "start": "3560720",
    "end": "3566010"
  },
  {
    "text": "And then the next time\nthrough the loop, Python says, all right, what's the next\nelement in my sequence?",
    "start": "3566010",
    "end": "3571580"
  },
  {
    "text": "Well, I looked at the 1 first. Now let me look at the 2.",
    "start": "3571580",
    "end": "3576590"
  },
  {
    "text": "All right. Now I'm looking at the 2 as\nmy next element in sequence. I'm going to append I\nto the end of the list.",
    "start": "3576590",
    "end": "3582450"
  },
  {
    "text": "So I'm going to append 1 to\nthe end of L. Increment I",
    "start": "3582450",
    "end": "3587800"
  },
  {
    "text": "by 1 to be 2. Print L. OK, next\nvalue in my sequence.",
    "start": "3587800",
    "end": "3594410"
  },
  {
    "text": "e increments to the next\nelement in the sequence, the 3. We append I to the\nend of the list.",
    "start": "3594410",
    "end": "3601220"
  },
  {
    "text": "So we append 2 to the end\nof L. Increment I by 1. Print L. What do you notice?",
    "start": "3601220",
    "end": "3606359"
  },
  {
    "text": " Is this code going to terminate?",
    "start": "3606360",
    "end": "3612410"
  },
  {
    "text": "No, because our loop\nvariable will always be four elements away from\nthe list, the end of the list.",
    "start": "3612410",
    "end": "3619940"
  },
  {
    "text": "As I'm adding an item\nto the end of my list, the loop variable\niterates to the next item. But then I'm adding another\nitem to the end of my list,",
    "start": "3619940",
    "end": "3627230"
  },
  {
    "text": "and my loop variable iterates. And so we're always going to be\n4 behind the end of the list. So this code will\nactually never stop.",
    "start": "3627230",
    "end": "3634525"
  },
  {
    "text": " All right.",
    "start": "3634525",
    "end": "3641260"
  },
  {
    "text": "So the difference here is\nwhat I'm iterating over. In the previous example, as soon\nas Python saw range, length,",
    "start": "3641260",
    "end": "3647290"
  },
  {
    "text": "whatever, it made this\npredefined sequence of values it needed to iterate over. But here it doesn't do that,\nbecause it's iterating over",
    "start": "3647290",
    "end": "3655270"
  },
  {
    "text": "my object L. There's no\npredefined sequence to create. It's supposed to\niterate over L directly.",
    "start": "3655270",
    "end": "3661720"
  },
  {
    "text": "So that's the difference\nbetween these two. All right. So now I'm going to show you--",
    "start": "3661720",
    "end": "3666819"
  },
  {
    "text": "before I do the last trick\nexample involving concatenation, I wanted to mention\none thing, which is there was a\nquestion earlier, how",
    "start": "3666820",
    "end": "3673840"
  },
  {
    "text": "do we actually add more than\none item to the end of our list? And we do that using\nthis extend operation.",
    "start": "3673840",
    "end": "3680690"
  },
  {
    "text": "And this extend operation\nis kind of like append, but we are going to add all\nof the elements of some list",
    "start": "3680690",
    "end": "3689080"
  },
  {
    "text": "as the parameter to\nthe end of our list L. So in effect, we're\nmutating L to be",
    "start": "3689080",
    "end": "3695650"
  },
  {
    "text": "extended by all the elements\nin some underscore list. So here's an example.",
    "start": "3695650",
    "end": "3702370"
  },
  {
    "text": "First, let's do concatenation\njust to remind ourselves what it does. So L1 is 2, 1, 3 in memory. L2 is 4, 5, 6 in memory.",
    "start": "3702370",
    "end": "3709300"
  },
  {
    "text": "L3 is going to be L1\nconcatenated with L2. Pretty straightforward. It's concatenation.",
    "start": "3709300",
    "end": "3714859"
  },
  {
    "text": "So Python creates\nfor me a new object, which is all the\nobjects in L1 and L2 put together as this completely\nnew object bound to the name L3.",
    "start": "3714860",
    "end": "3725000"
  },
  {
    "text": "So L1 and L2 remain unchanged. No problems there. But the extend is\ngoing to mutate.",
    "start": "3725000",
    "end": "3733789"
  },
  {
    "text": "Notice the dot notation\nformat of extend. It's going to mutate L1\nto be extended by all",
    "start": "3733790",
    "end": "3740950"
  },
  {
    "text": "the elements in this list. So it's going to add a 0\nand a 6 to the end of L1.",
    "start": "3740950",
    "end": "3747619"
  },
  {
    "text": "So here it is. I've got L1 mutated to be 2,\n1, 3, and then 0 and then 6.",
    "start": "3747620",
    "end": "3754160"
  },
  {
    "text": "So just to bring the point home,\nthe thing we're extending by is all of the elements of\nthis list in the parameter.",
    "start": "3754160",
    "end": "3763089"
  },
  {
    "text": "So in this particular\ncase, L2.extend will be extended by\nhow many elements?",
    "start": "3763090",
    "end": "3770260"
  },
  {
    "text": "2 or 4? ",
    "start": "3770260",
    "end": "3775660"
  },
  {
    "text": "Yeah, I see 2. Exactly. It'll be extended by 2 elements. At the top level, this list\nhas two elements in it, a list",
    "start": "3775660",
    "end": "3783640"
  },
  {
    "text": "and then another list. So this command here will\nextend L2 by these two elements",
    "start": "3783640",
    "end": "3790180"
  },
  {
    "text": "specifically, 1 comma 2 as a\nlist and 3 comma 4 as a list. But these are\nindividual objects.",
    "start": "3790180",
    "end": "3796880"
  },
  {
    "text": "They're single objects\nthat are lists. They happen to have a bunch of\nelements as part of the list, but they are two objects.",
    "start": "3796880",
    "end": "3804220"
  },
  {
    "text": "Yeah. STUDENT: [INAUDIBLE] ",
    "start": "3804220",
    "end": "3814900"
  },
  {
    "text": "ANA BELL: When we\nextended by 0 comma 6, there's no brackets\nbecause we're extending it by the elements\nof this top level list.",
    "start": "3814900",
    "end": "3821750"
  },
  {
    "text": "So it's two integers. And here we're extending it by\nthe elements of this top level",
    "start": "3821750",
    "end": "3827580"
  },
  {
    "text": "list. So in a sense, the\noutermost parentheses, which they are lists.",
    "start": "3827580",
    "end": "3835258"
  },
  {
    "text": "Yeah. ",
    "start": "3835258",
    "end": "3842332"
  },
  {
    "text": "So that introduces extent. We're not actually\ngoing to use extent for this particular example,\nbut I did want to mention it.",
    "start": "3842332",
    "end": "3847850"
  },
  {
    "text": "In this example, we're going to\nuse the concatenation operator to create for us this new\nobject and bind it to L again.",
    "start": "3847850",
    "end": "3859260"
  },
  {
    "text": "So let's see what\nthis is going to do. First, I'm going to actually\ntell you the answer,",
    "start": "3859260",
    "end": "3864930"
  },
  {
    "text": "and then we'll do the\nmemory diagram again to bring the point home. So this loop will, again,\nloop through all the elements",
    "start": "3864930",
    "end": "3873330"
  },
  {
    "text": "in L. Originally it's\n1, 2, 3, 4 in a list.",
    "start": "3873330",
    "end": "3879240"
  },
  {
    "text": "So what is the actual\nloop going to do? It's going to take whatever\nis in L, double it.",
    "start": "3879240",
    "end": "3888050"
  },
  {
    "text": "So originally L is 1, 2, 3, 4. The first time\nthrough the loop is going to create a\nnew object, which",
    "start": "3888050",
    "end": "3893980"
  },
  {
    "text": "is just L 1, 2, 3, 4 doubled. I've concatenated L with itself.",
    "start": "3893980",
    "end": "3899960"
  },
  {
    "text": "And then I'm going to save it as\nthis new object with the name L",
    "start": "3899960",
    "end": "3905780"
  },
  {
    "text": "again. That's the first time\nthrough the loop.",
    "start": "3905780",
    "end": "3910870"
  },
  {
    "text": "Second time through\nthe loop, I'm going to take whatever\nL was mutated-- or whatever L was before.",
    "start": "3910870",
    "end": "3917570"
  },
  {
    "text": "Sorry, not mutated, but\nwhatever L was before. So it's 1, 2, 3, 4, 1, 2, 3, 4. Double that and save it\nunder the name L. Second time",
    "start": "3917570",
    "end": "3928652"
  },
  {
    "text": "through the loop. Now, third time\nthrough the loop, I'm going to take\nwhatever L is right now.",
    "start": "3928652",
    "end": "3934130"
  },
  {
    "text": "So these two rows of\n1, 2, 3, 4, 1, 2, 3, 4. Double that and save\nit under the name L.",
    "start": "3934130",
    "end": "3944140"
  },
  {
    "text": "And then the last\ntime through the loop, I'm going to take\nwhatever L was before.",
    "start": "3944140",
    "end": "3950060"
  },
  {
    "text": "So these four rows of\n1, 2, 3, 4, 1, 2, 3, 4, double those, and save that\nas the new L. And that's it.",
    "start": "3950060",
    "end": "3958640"
  },
  {
    "text": "This code does not\ngo to infinity.",
    "start": "3958640",
    "end": "3965910"
  },
  {
    "text": "Now, let's see why\nexactly that is. So this will help. Originally, I've\ngot L is 1, 2, 3, 4.",
    "start": "3965910",
    "end": "3973830"
  },
  {
    "text": "So that's straightforward. My loop variable e goes through\neach element in this object.",
    "start": "3973830",
    "end": "3981460"
  },
  {
    "text": "So first it's going\nto point to the 1. So far the same. L equals L plus L. Let's look\nat the right hand side first.",
    "start": "3981460",
    "end": "3991350"
  },
  {
    "text": "This creates for\nme a new object. Remember, concatenation\ncreates for me a new object.",
    "start": "3991350",
    "end": "3996820"
  },
  {
    "text": "It doesn't mutate anything. So in memory, I'm going to\nget 1, 2, 3, 4, 1, 2, 3, 4.",
    "start": "3996820",
    "end": "4002720"
  },
  {
    "text": "I've doubled L with itself. What is L equals going to do?",
    "start": "4002720",
    "end": "4008369"
  },
  {
    "text": " Do you remember we did a slide\nlike this, very similar to this.",
    "start": "4008370",
    "end": "4015150"
  },
  {
    "text": "It's like when we\nreassigned the tuple. The L equals will\nactually take the binding",
    "start": "4015150",
    "end": "4020789"
  },
  {
    "text": "from my original object and\nput it on the new object that I just created.",
    "start": "4020790",
    "end": "4028190"
  },
  {
    "text": "Exactly that memory\ndiagram with the tuple. I happened to have\nthe same name,",
    "start": "4028190",
    "end": "4033859"
  },
  {
    "text": "but it's pointing\nto a new object. Same here. I happen to have\nthe same name, L,",
    "start": "4033860",
    "end": "4038900"
  },
  {
    "text": "but it's now pointing\nto this new object. The old object, this thing\nthat I'm iterating over,",
    "start": "4038900",
    "end": "4045150"
  },
  {
    "text": "I've lost the binding to it. And really the\nonly way I can even reference that old\nobject is through",
    "start": "4045150",
    "end": "4051690"
  },
  {
    "text": "this e, because that\ne is still going to go through this\nold object element.",
    "start": "4051690",
    "end": "4057770"
  },
  {
    "text": "So that's the first time. Yes, question. STUDENT: Why does\ne not [INAUDIBLE]??",
    "start": "4057770",
    "end": "4063830"
  },
  {
    "text": "Because you defined it\nbefore you [INAUDIBLE]?? ANA BELL: Yes, you define it\nto be the object in memory,",
    "start": "4063830",
    "end": "4070430"
  },
  {
    "text": "not the name L. So e is bound\nto the object in memory. That's this thing here.",
    "start": "4070430",
    "end": "4076350"
  },
  {
    "text": "That's why it was so important\nto separate ourselves from the object in\nmemory versus the name",
    "start": "4076350",
    "end": "4081450"
  },
  {
    "text": "we give an object, because that\nname can change to anything, to a bunch of other stuff. But the object itself\nremains in memory.",
    "start": "4081450",
    "end": "4088980"
  },
  {
    "text": "So then this becomes\npretty straightforward if you understand that piece.",
    "start": "4088980",
    "end": "4094297"
  },
  {
    "text": "The first time\nthrough the loop, I've got L assigned to\nthis new object here. I've lost the binding\nto my original",
    "start": "4094298",
    "end": "4100639"
  },
  {
    "text": "list that I'm iterating over. So when I print L, I print this. Next time e increases to the\nnext element in my sequence.",
    "start": "4100640",
    "end": "4110689"
  },
  {
    "text": "L will double what\nit currently is. So it's currently\nthis thing here.",
    "start": "4110689",
    "end": "4116589"
  },
  {
    "text": "It's going to double to that. And I'm going to lose the\nbinding from the original, or not the original,\nbut this thing",
    "start": "4116590",
    "end": "4123179"
  },
  {
    "text": "that I had just bounded to,\nto bind it to the next object that I just created.",
    "start": "4123180",
    "end": "4129370"
  },
  {
    "text": "And then that's the second\ntime through the loop. It looks like this. Third time through the loop.",
    "start": "4129370",
    "end": "4135009"
  },
  {
    "text": "e increments by 1, to the\nnext value in my sequence. I'm going to take\nL plus L, so double",
    "start": "4135010",
    "end": "4141310"
  },
  {
    "text": "that previous data object. Take the binding from that\nprevious object to the new one.",
    "start": "4141310",
    "end": "4150189"
  },
  {
    "text": "Increment e by one more. And this will be the last\ntime E is going to change,",
    "start": "4150189",
    "end": "4157660"
  },
  {
    "text": "because after this, e\nwill have gone through all the elements in its sequence. It's gone through\nthe end of that list.",
    "start": "4157660",
    "end": "4164493"
  },
  {
    "text": "So the last time\nthrough the loop, I've doubled that\nL, and I've lost the binding from the previous\none, made it to the new one",
    "start": "4164493",
    "end": "4170589"
  },
  {
    "text": "and then that's it. It's done. ",
    "start": "4170590",
    "end": "4176439"
  },
  {
    "text": "Questions? Is it straightforward? Does the picture help all that?",
    "start": "4176439",
    "end": "4182060"
  },
  {
    "text": "OK.  One more thing I\nwant to mention, and this is kind of\na preview of what",
    "start": "4182060",
    "end": "4188560"
  },
  {
    "text": "we're going to do next time. One very useful operation\nthat you might want to do",
    "start": "4188560",
    "end": "4195460"
  },
  {
    "text": "is to take a list and\nremove all of its elements. Yeah, go ahead.",
    "start": "4195460",
    "end": "4200560"
  },
  {
    "text": "STUDENT: Sorry. [INAUDIBLE] because usually\nit stops before the last one.",
    "start": "4200560",
    "end": "4206042"
  },
  {
    "text": "ANA BELL: Oh, here\nthat's in range. So here it's just iterating\nthrough all the elements",
    "start": "4206042",
    "end": "4211210"
  },
  {
    "text": "in the sequence\ngoing to every one. So one useful operation\nwe might want to do",
    "start": "4211210",
    "end": "4217620"
  },
  {
    "text": "is to remove all the\nelements in a list, but not-- sorry, but by mutating the list.",
    "start": "4217620",
    "end": "4224050"
  },
  {
    "text": "So we want to keep our\noriginal list object. We just want to basically clear\nit out of all of its elements.",
    "start": "4224050",
    "end": "4230830"
  },
  {
    "text": "And so the command for that\nhas a pretty nice name. It's called clear.",
    "start": "4230830",
    "end": "4235980"
  },
  {
    "text": "So if you want to take\na list L and clear it, so to remove all the elements\ninside it, you say L.clear.",
    "start": "4235980",
    "end": "4244380"
  },
  {
    "text": "And that mutates my\noriginal list L to be empty.",
    "start": "4244380",
    "end": "4251179"
  },
  {
    "text": "So one thing that might help\nwith this mutation lecture and figuring out\nwhich object is which",
    "start": "4251180",
    "end": "4257540"
  },
  {
    "text": "and whether you've created a new\nobject or not is to figure out-- is to ask, how do I know that\nthis object is the object",
    "start": "4257540",
    "end": "4264260"
  },
  {
    "text": "that I'm mutating? And to do that, we're actually\ngoing to use this function called ID.",
    "start": "4264260",
    "end": "4269990"
  },
  {
    "text": "And ID lets us get the\nmemory location or memory object or the idea of the\nobject itself in memory.",
    "start": "4269990",
    "end": "4279300"
  },
  {
    "text": "So the code on the left is\ncode that takes in a list",
    "start": "4279300",
    "end": "4284849"
  },
  {
    "text": "L. We get its ID to see what\nis this object in memory. What's its number?",
    "start": "4284850",
    "end": "4290800"
  },
  {
    "text": "Append an 8 to it. We're going to see\nthat the ID of this is going to be the\nsame as the ID of this.",
    "start": "4290800",
    "end": "4297610"
  },
  {
    "text": "Because we're mutating\nL. We're not adding it. We're not changing it. We're not creating a new object.",
    "start": "4297610",
    "end": "4302820"
  },
  {
    "text": "And then lastly, we're going to\nclear it and check the ID again. And you're going to see that the\nID is exactly the same in all",
    "start": "4302820",
    "end": "4309000"
  },
  {
    "text": "of these different cases. So I'm doing this\njust in the console",
    "start": "4309000",
    "end": "4314070"
  },
  {
    "text": "just to show you real quick. So here I have 4, 5, 6 as\nmy L. Here's L 4, 5, 6.",
    "start": "4314070",
    "end": "4319810"
  },
  {
    "text": "The ID of it is\nthis number here. We can just look at the last\nthree digits or whatever.",
    "start": "4319810",
    "end": "4327630"
  },
  {
    "text": "8, 0, 8. Let's append an item\nto the end of our list.",
    "start": "4327630",
    "end": "4333139"
  },
  {
    "text": "L mutated to contain that item. The idea of L remains the same.",
    "start": "4333140",
    "end": "4340160"
  },
  {
    "text": "Ends in 8, 0, 8. It's the exact same\nobject in memory. We've mutated it.",
    "start": "4340160",
    "end": "4345300"
  },
  {
    "text": "L.clear. L empty list.",
    "start": "4345300",
    "end": "4350620"
  },
  {
    "text": "I've removed all the elements\nof L. And the idea of L will show me that it's\nthis exact same object.",
    "start": "4350620",
    "end": "4356950"
  },
  {
    "text": "I'm just mutating this\nsame object in memory. Let's do that again, except\nin the new version instead",
    "start": "4356950",
    "end": "4367360"
  },
  {
    "text": "of using L.clear, I will say\nL is equal to the empty list. And this is also a really\ncommon mistake to make.",
    "start": "4367360",
    "end": "4375360"
  },
  {
    "text": "So here I have L is 4, 5, 6. Again, this is my L.\nLet's get the idea of L.",
    "start": "4375360",
    "end": "4380920"
  },
  {
    "text": "It's going to be a new one,\nbecause I've reassigned L to this new list. So this one ends in 3, 1, 2.",
    "start": "4380920",
    "end": "4388060"
  },
  {
    "text": "Again, let's do an\nappend just for fun. The ID or L ID of L is\ngoing to be, again, 3, 1, 2.",
    "start": "4388060",
    "end": "4397690"
  },
  {
    "text": "But now if I say L is\nequal to the empty list, this is exactly the\nsame as the situations we've seen before with the tuple\nand with that trick example",
    "start": "4397690",
    "end": "4405860"
  },
  {
    "text": "number 3. When I say L is equal\nto the empty list, Python takes my name\nL and assigns it",
    "start": "4405860",
    "end": "4411070"
  },
  {
    "text": "to this object that\nis the empty list. My original object, 4, 5,\n6, 8 is still in memory.",
    "start": "4411070",
    "end": "4417739"
  },
  {
    "text": "I've just lost\nthe binding to it. So here's L. It's an empty list.",
    "start": "4417740",
    "end": "4424850"
  },
  {
    "text": "But the idea of L is now\ngoing to be different. Originally, I was working\nwith this list at ID 312.",
    "start": "4424850",
    "end": "4432750"
  },
  {
    "text": "But after I said L is\nequal to the empty list, I've lost the binding\nfrom that old list",
    "start": "4432750",
    "end": "4438170"
  },
  {
    "text": "and rebound my name L\nto this new empty list. And you can see this using\nthis ID, which is pretty cool.",
    "start": "4438170",
    "end": "4446715"
  },
  {
    "text": " OK, quick summary. So we saw lists and\ntuples as a way for us",
    "start": "4446715",
    "end": "4454350"
  },
  {
    "text": "to create these compound\ndata structures that can contain any kind of\nobject as their elements. Tuples are immutable.",
    "start": "4454350",
    "end": "4460600"
  },
  {
    "text": "So for things that\ndon't change, they're very useful, like country,\nlatitude, longitude.",
    "start": "4460600",
    "end": "4467429"
  },
  {
    "text": "Those things won't change. Or the word that appears on a\npage number and a line number,",
    "start": "4467430",
    "end": "4472620"
  },
  {
    "text": "something like that. Lists are mutable objects,\nso you use them in situations",
    "start": "4472620",
    "end": "4479039"
  },
  {
    "text": "where you need that\ndynamic aspect. So if you want to maintain\na list of employees, you want to maintain\na list of students,",
    "start": "4479040",
    "end": "4484920"
  },
  {
    "text": "a list of grocery items\nor things in your fridge, those are really\ngood situations where",
    "start": "4484920",
    "end": "4490062"
  },
  {
    "text": "you'd want to list, because\nthings are constantly changing. You don't want to make\ncopies of everything all the time because it becomes\nvery inefficient to do so.",
    "start": "4490062",
    "end": "4499110"
  },
  {
    "text": "So next lecture, we will\ncontinue with tricky examples. And we'll also have a quiz.",
    "start": "4499110",
    "end": "4505139"
  },
  {
    "text": "Remember, quizzes\nare now on Mondays. ",
    "start": "4505140",
    "end": "4513000"
  }
]