[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "The page map provides the context for interpreting\nvirtual addresses, i.e., it provides the information",
    "start": "560",
    "end": "6830"
  },
  {
    "text": "needed to correctly determine where to find\na virtual address in main memory or secondary",
    "start": "6830",
    "end": "11730"
  },
  {
    "text": "storage.",
    "start": "11730",
    "end": "13530"
  },
  {
    "text": "Several programs may be simultaneously loaded\ninto main memory, each with its own context.",
    "start": "13530",
    "end": "20249"
  },
  {
    "text": "Note that the separate contexts ensure that\nthe programs don't interfere which each other.",
    "start": "20249",
    "end": "25470"
  },
  {
    "text": "For example, the physical location for virtual\naddress 0 in one program will be different",
    "start": "25470",
    "end": "31199"
  },
  {
    "text": "than the physical location for virtual address\n0 in another program.",
    "start": "31199",
    "end": "36750"
  },
  {
    "text": "Each program operates independently in its\nown virtual address space.",
    "start": "36750",
    "end": "41870"
  },
  {
    "text": "It's the context provided by the page map\nthat allows them to coexist and share a common",
    "start": "41870",
    "end": "47350"
  },
  {
    "text": "physical memory.",
    "start": "47350",
    "end": "49559"
  },
  {
    "text": "So we need to switch contexts when switching\nprograms.",
    "start": "49560",
    "end": "53470"
  },
  {
    "text": "This is accomplished by reloading the page\nmap.",
    "start": "53470",
    "end": "56140"
  },
  {
    "text": "In a timesharing system, the CPU will periodically\nswitch from running one program to another,",
    "start": "56140",
    "end": "63030"
  },
  {
    "start": "57000",
    "end": "57000"
  },
  {
    "text": "giving the illusion that multiple programs\nare each running on their own virtual machine.",
    "start": "63030",
    "end": "68868"
  },
  {
    "text": "This is accomplished by switching contexts\nwhen switching the CPU state to the next program.",
    "start": "68869",
    "end": "75130"
  },
  {
    "text": "There's a privileged set of code called the\noperating system (OS) that manages the sharing",
    "start": "75130",
    "end": "80560"
  },
  {
    "text": "of one physical processor and main memory\namongst many programs, each with its own CPU",
    "start": "80560",
    "end": "86100"
  },
  {
    "text": "state and virtual address space.",
    "start": "86100",
    "end": "89280"
  },
  {
    "text": "The OS is effectively creating many virtual\nmachines and choreographing their execution",
    "start": "89280",
    "end": "94438"
  },
  {
    "text": "using a single set of shared physical resources.",
    "start": "94439",
    "end": "99259"
  },
  {
    "text": "The OS runs in a special OS context, which\nwe call the kernel.",
    "start": "99259",
    "end": "104600"
  },
  {
    "text": "The OS contains the necessary exception handlers\nand timesharing support.",
    "start": "104600",
    "end": "110030"
  },
  {
    "text": "Since it has to manage physical memory, it's\nallowed to access any physical location as",
    "start": "110030",
    "end": "114889"
  },
  {
    "text": "it deals with page faults, etc.",
    "start": "114889",
    "end": "118369"
  },
  {
    "text": "Exceptions in running programs cause the hardware\nto switch to the kernel context, which we",
    "start": "118369",
    "end": "122950"
  },
  {
    "text": "call entering \"kernel mode\".",
    "start": "122950",
    "end": "125909"
  },
  {
    "text": "After the exception handling is complete,\nexecution of the program resumes in what we",
    "start": "125909",
    "end": "131069"
  },
  {
    "text": "call \"user mode\".",
    "start": "131069",
    "end": "133990"
  },
  {
    "text": "Since the OS runs in kernel mode it has privileged\naccess to many hardware registers that are",
    "start": "133990",
    "end": "138950"
  },
  {
    "text": "inaccessible in user mode.",
    "start": "138950",
    "end": "141400"
  },
  {
    "text": "These include the MMU state, I/O devices,\nand so on.",
    "start": "141400",
    "end": "146200"
  },
  {
    "text": "User-mode programs that need to access, say,\nthe disk, need to make a request to the OS",
    "start": "146200",
    "end": "151189"
  },
  {
    "text": "kernel to perform the operation, giving the\nOS the chance to vet the request for appropriate",
    "start": "151189",
    "end": "156370"
  },
  {
    "text": "permissions, etc.",
    "start": "156370",
    "end": "158860"
  },
  {
    "text": "We'll see how all of this works in an upcoming\nlecture.",
    "start": "158860",
    "end": "163760"
  },
  {
    "start": "163000",
    "end": "163000"
  },
  {
    "text": "User-mode programs (aka applications) are\nwritten as if they have access to the entire",
    "start": "163760",
    "end": "169400"
  },
  {
    "text": "virtual address space.",
    "start": "169400",
    "end": "172129"
  },
  {
    "text": "They often obey the same conventions such\nas the address of the first instruction in",
    "start": "172129",
    "end": "176291"
  },
  {
    "text": "the program, the initial value for the stack\npointer, etc.",
    "start": "176291",
    "end": "181159"
  },
  {
    "text": "Since all these virtual addresses are interpreted\nusing the current context, by controlling",
    "start": "181159",
    "end": "186590"
  },
  {
    "text": "the contexts the OS can ensure that the programs\ncan coexist without conflict.",
    "start": "186590",
    "end": "194980"
  },
  {
    "text": "The diagram on the right shows a standard\nplan for organizing the virtual address space",
    "start": "194980",
    "end": "199280"
  },
  {
    "text": "of an application.",
    "start": "199280",
    "end": "200939"
  },
  {
    "text": "Typically the first virtual page is made inaccessible,\nwhich helps catch errors involving references",
    "start": "200939",
    "end": "207010"
  },
  {
    "text": "to uninitialized (i.e., zero-valued) pointers.",
    "start": "207010",
    "end": "211870"
  },
  {
    "text": "Then come some number of read-only pages that\nhold the application's code and perhaps the",
    "start": "211870",
    "end": "216769"
  },
  {
    "text": "code from any shared libraries it uses.",
    "start": "216770",
    "end": "220549"
  },
  {
    "text": "Marking code pages as read-only avoids hard-to-find\nbugs where errant data accesses inadvertently",
    "start": "220549",
    "end": "225890"
  },
  {
    "text": "change the program!",
    "start": "225890",
    "end": "228439"
  },
  {
    "text": "Then there are read-write pages holding the\napplication's statically allocated data structures.",
    "start": "228439",
    "end": "234719"
  },
  {
    "text": "The rest of the virtual address space is divided\nbetween two data regions that can grow over",
    "start": "234719",
    "end": "239989"
  },
  {
    "text": "time.",
    "start": "239989",
    "end": "241590"
  },
  {
    "text": "The first is the application's stack, used\nto hold procedure activation records.",
    "start": "241590",
    "end": "247140"
  },
  {
    "text": "Here we show it located at the lower end of\nthe virtual address space since our convention",
    "start": "247140",
    "end": "251239"
  },
  {
    "text": "is that the stack grows towards higher addresses.",
    "start": "251239",
    "end": "255860"
  },
  {
    "text": "The other growable region is the heap, used\nwhen dynamically allocating storage for long-lived",
    "start": "255860",
    "end": "261250"
  },
  {
    "text": "data structures.",
    "start": "261250",
    "end": "262669"
  },
  {
    "text": "\"Dynamically\" means that the allocation and\ndeallocation of objects is done by explicit",
    "start": "262669",
    "end": "267470"
  },
  {
    "text": "procedure calls while the application is running.",
    "start": "267470",
    "end": "270639"
  },
  {
    "text": "In other words, we don't know which objects\nwill be created until the program actually",
    "start": "270639",
    "end": "275870"
  },
  {
    "text": "executes.",
    "start": "275870",
    "end": "276870"
  },
  {
    "text": "As shown here, as the heap expands it grows\ntowards lower addresses.",
    "start": "276870",
    "end": "283360"
  },
  {
    "text": "The page fault handler knows to allocate new\npages when these regions grow.",
    "start": "283360",
    "end": "287668"
  },
  {
    "text": "Of course, if they ever meet somewhere in\nthe middle and more space is needed, the application",
    "start": "287669",
    "end": "293271"
  },
  {
    "text": "is out of luck - it's run out of virtual memory!",
    "start": "293271",
    "end": "296070"
  }
]