[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6360"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6360",
    "end": "13320"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu.",
    "start": "13320",
    "end": "18450"
  },
  {
    "text": " ERIK DEMAINE: All right,\ntoday is our last lecture on the predecessor problem.",
    "start": "18450",
    "end": "24820"
  },
  {
    "text": "And we did two lectures\non upper bound, started with Van Emde\nBoas x-Fast, y-Fast tries.",
    "start": "24820",
    "end": "31000"
  },
  {
    "text": "And then fusion\ntries was last class. This time, we're going to\nshow that those bounds are",
    "start": "31000",
    "end": "36430"
  },
  {
    "text": "essentially optimal. And we're going to\nprove this bound. So we currently\nhave min of log w,",
    "start": "36430",
    "end": "44160"
  },
  {
    "text": "and log base w of n\nas an upper bound. That was Van Emde\nBoas and fusion tires. Were going to prove an\nalmost matching lower bound.",
    "start": "44160",
    "end": "50750"
  },
  {
    "text": "There's a log log w factor here. And this bound holds for even\na static predecessor data",
    "start": "50750",
    "end": "57010"
  },
  {
    "text": "structure no updates, as\nlong as the data structure has polynomial\nspace, which if you",
    "start": "57010",
    "end": "62620"
  },
  {
    "text": "have any hope of making\nsomething dynamic, you definitely want\npolynomial space. Now, it's known that this\nlog log factor is not real",
    "start": "62620",
    "end": "69280"
  },
  {
    "text": "if you have, essentially,\nlinear space or n log n space, or something like that. But that's much harder to prove.",
    "start": "69280",
    "end": "74830"
  },
  {
    "text": "So this is where we will end\nour coverage of predecessor. But I'm going to start out with\nan overview of what's known.",
    "start": "74830",
    "end": "81159"
  },
  {
    "text": "And proving this lower bound\nis actually pretty cool, because at this point,\nespecially seeing fusion tries,",
    "start": "81160",
    "end": "86890"
  },
  {
    "text": "you might think bit tricks\nare kind of all about magic, and doing crazy\nthings, and using",
    "start": "86890",
    "end": "93579"
  },
  {
    "text": "these operations in bizarre\nways they weren't intended. Bit tricks are necessary\nas an upper bound tool,",
    "start": "93580",
    "end": "102070"
  },
  {
    "text": "given our weird\nhistorical precedent, which is computers are\nbuilt to do arithmetic.",
    "start": "102070",
    "end": "107859"
  },
  {
    "text": "And why not do bit\noperations too? And so it's sort of an\nartifact of computers",
    "start": "107860",
    "end": "113843"
  },
  {
    "text": "as we know them today. That's why we have the\nword RAM, because it's based on C, because it's based\non computers that exist now.",
    "start": "113844",
    "end": "121360"
  },
  {
    "text": "And that's legitimate in that\nthat's the computers we have. So we might as well\ntry to use them. The lower bounds, on the\nother hand, are, in some ways,",
    "start": "121360",
    "end": "129220"
  },
  {
    "text": "more beautiful, because they're\njust about how much information has to go between Alice\nand Bob, actually.",
    "start": "129220",
    "end": "137930"
  },
  {
    "text": "This is the communication\ncomplexity perspective of data structures. And it's nice. We will get, in some ways,\ncleaner, simpler arguments",
    "start": "137930",
    "end": "145930"
  },
  {
    "text": "because in lower bound land, you\ndon't have to worry about, oh, can I use this operation\nor this operation to do? It's just, is there any\noperation at all to do it?",
    "start": "145930",
    "end": "153179"
  },
  {
    "text": "And then it's just\nabout information. It's just about\ninformation theory. And it's, in some ways, cleaner.",
    "start": "153179",
    "end": "158469"
  },
  {
    "text": "And this proof, in\nparticular using a technique called round elimination\nis actually simple.",
    "start": "158470",
    "end": "164140"
  },
  {
    "text": "And we will see in it the\nconcepts of Van Emde Boas and fusion tries again,\nbut without having",
    "start": "164140",
    "end": "170830"
  },
  {
    "text": "to do any bit tricks to\nactually make them happen. So if you felt like all of these\nbit tricks are kind of weird,",
    "start": "170830",
    "end": "177880"
  },
  {
    "text": "what is the real\nessence of the problem? This, in some sense,\nprovides an answer. And it says, well, really\nthose were the right answers.",
    "start": "177880",
    "end": "183700"
  },
  {
    "text": "That's what you should\nhave been getting. So let me start with the survey.",
    "start": "183700",
    "end": "190495"
  },
  {
    "text": "This is more of a\nhistorical survey. ",
    "start": "190495",
    "end": "196900"
  },
  {
    "text": "So the first bound for\npredecessor problem, first lower bound,\nAsvab Atjai in 1988.",
    "start": "196900",
    "end": "205629"
  },
  {
    "text": "And he proved that\nfor every word size, there's a problem size such that\nthere is an omega square root",
    "start": "205630",
    "end": "217560"
  },
  {
    "text": "log w lower bound. You can compare\nthat with this one. This is log w over log log w.",
    "start": "217560",
    "end": "225440"
  },
  {
    "text": "Now, this is a bound that works\nfor all values of n and w, which is more interesting. Here, we're saying\nthat if you just",
    "start": "225440",
    "end": "231790"
  },
  {
    "text": "want a bound in terms of w, you\nneed at least square root log w.",
    "start": "231790",
    "end": "239260"
  },
  {
    "text": "The original paper\nclaimed log w. But that's not true, in general. But the proof actually\nestablishes square root log w.",
    "start": "239260",
    "end": "246250"
  },
  {
    "text": "And in this proof\nis complicated. It was the first one. It got the field started. There's been many\npapers since then.",
    "start": "246250",
    "end": "251620"
  },
  {
    "text": "Next one was by Miltersen,\nwho we've cited a few times. ",
    "start": "251620",
    "end": "261259"
  },
  {
    "text": "And so this a few years later. Miltersen, essentially,\ntook the same proof, presented it in a\nmore coherent way,",
    "start": "261260",
    "end": "267462"
  },
  {
    "text": "and sort of really got to the\nessence of what the proof was showing, and could prove\nthe same bound, but also",
    "start": "267462",
    "end": "279250"
  },
  {
    "text": "a complementary\nbound, because there is a symmetry between word size\nand problem size, which we will",
    "start": "279250",
    "end": "284980"
  },
  {
    "text": "see when we get to the\ncommunication complexity perspective, which will\nbe right after the survey.",
    "start": "284980",
    "end": "292840"
  },
  {
    "text": "It's not completely symmetric. ",
    "start": "292840",
    "end": "298120"
  },
  {
    "text": "But Miltersen proved\nthis lower bound that for every\nproblem size, there is a machine, there\nis a word size,",
    "start": "298120",
    "end": "303789"
  },
  {
    "text": "where you need omega\ncube root of log n. Now, we know how to get\norder square root of log n",
    "start": "303790",
    "end": "309160"
  },
  {
    "text": "by taking them in. So this is matching\nup to the exponent.",
    "start": "309160",
    "end": "316070"
  },
  {
    "text": "And we know how to do\nlog w by Van Emde Boas. So this is matching\nup to the exponent. So it's progress.",
    "start": "316070",
    "end": "322230"
  },
  {
    "text": "But it doesn't give a complete\npicture of w versus n. ",
    "start": "322230",
    "end": "327390"
  },
  {
    "text": "And this is the paper that\nintroduced this communication complexity idea, that this\nwould be a useful concept",
    "start": "327390",
    "end": "332490"
  },
  {
    "text": "for predecessor lower bounds. ",
    "start": "332490",
    "end": "340690"
  },
  {
    "text": "Then the following year,\nthere's a bit of a breakthrough.",
    "start": "340690",
    "end": "350172"
  },
  {
    "start": "350172",
    "end": "356310"
  },
  {
    "text": "So here, we've got the idea of\nusing communication complexity. Then Miltersen and others had\nthe idea of round elimination.",
    "start": "356310",
    "end": "365263"
  },
  {
    "start": "365263",
    "end": "373480"
  },
  {
    "text": "And so just treat that\nas a black box for now. We'll explain what\nis in a moment. But it proved exactly the same\nresult, but in a clean way,",
    "start": "373480",
    "end": "381551"
  },
  {
    "text": "using round elimination. These proofs were messy. This proof is pretty simple. And it's the beginning of\nthe proof that we will cover.",
    "start": "381551",
    "end": "392420"
  },
  {
    "text": "But we're going to prove\nstronger bounds than this. Let me go to another board.",
    "start": "392420",
    "end": "398010"
  },
  {
    "text": "Next, we have Beame and Fich. Now is about the\ntime when I entered",
    "start": "398010",
    "end": "403730"
  },
  {
    "text": "the world of data structures. And so Beame and Fich came out\njust when I was starting, 1999.",
    "start": "403730",
    "end": "413810"
  },
  {
    "text": "And this proved for\nall of w exists an n.",
    "start": "413810",
    "end": "420100"
  },
  {
    "start": "420100",
    "end": "428510"
  },
  {
    "text": "So log w over log log w,\nwhich is the same thing we're going to prove. Except this only proves\nit for certain values",
    "start": "428510",
    "end": "436220"
  },
  {
    "text": "of n, whereas we're going to\nprove it for all values of n where this is smaller than that.",
    "start": "436220",
    "end": "443690"
  },
  {
    "text": "So this is a bit more special,\nnot covering the whole w n",
    "start": "443690",
    "end": "448920"
  },
  {
    "text": "trade-off. And then there's this\nsymmetric version. ",
    "start": "448920",
    "end": "460720"
  },
  {
    "text": "There's going to be a\nlot of log log n's today. So get ready for\nlog logs in general.",
    "start": "460720",
    "end": "468090"
  },
  {
    "text": "So for every n,\nthere exists a w such",
    "start": "468090",
    "end": "473570"
  },
  {
    "text": "that there's an omega\nroot log n over log log n. So this is almost matching\nthe min of fusion tries",
    "start": "473570",
    "end": "479150"
  },
  {
    "text": "and Van Emde Boas, which\nis order square root log n. They also proved-- did a little\nbit on the upper bound side.",
    "start": "479150",
    "end": "488130"
  },
  {
    "text": "And they found a static\ndata structure achieving-- ",
    "start": "488130",
    "end": "505200"
  },
  {
    "text": "I'm just going to cheat\nand use some arrows. So they achieved the\nmin of these two.",
    "start": "505200",
    "end": "511500"
  },
  {
    "text": "So in a certain\nsense, this is tight. This is not exactly\nwhat you'd want, because the data\nstructures achieving",
    "start": "511500",
    "end": "517500"
  },
  {
    "text": "the min, what you'd like is\na lower bound of the min. And it's not quite that. It's saying, there's a\nparticular pair of w and n",
    "start": "517500",
    "end": "525660"
  },
  {
    "text": "values where this is optimal. There's another pair\nof n and w values where this is\noptimal with respect to either one of\nthese parameters.",
    "start": "525660",
    "end": "533080"
  },
  {
    "text": "But there are other pairs\nof values of w and n where it may or\nmay not be optimal. So it's kind of\nmatching, but not quite.",
    "start": "533080",
    "end": "541560"
  },
  {
    "text": "The way to say it is\nthese are the best-- this is the best pure w\nbound you could hope for.",
    "start": "541560",
    "end": "547760"
  },
  {
    "text": "And this is the best pure n\nbound that you could hope for. And it's the best mix\nof two pure bounds.",
    "start": "547760",
    "end": "555620"
  },
  {
    "text": "OK, then we go back in time\na little bit, which is--",
    "start": "555620",
    "end": "561720"
  },
  {
    "text": "there's a funny\nchain here, which is this paper, 1995, cites\nthis paper from 1999.",
    "start": "561720",
    "end": "571620"
  },
  {
    "text": "This paper cites\nthis paper of 1992. That's normal.",
    "start": "571620",
    "end": "577880"
  },
  {
    "text": "This one's a little bit out\nof order, bit of time travel. So I think this one was\nin draft for a long time,",
    "start": "577880",
    "end": "583110"
  },
  {
    "text": "and took awhile to finish it. But this paper is before 1995.",
    "start": "583110",
    "end": "588850"
  },
  {
    "text": "It's not cited by this paper. What's interesting\nabout it is it proves both of\nthese lower bounds.",
    "start": "588850",
    "end": "595560"
  },
  {
    "text": " I don't think it proves\nthe upper bounds.",
    "start": "595560",
    "end": "601260"
  },
  {
    "text": " But these were independently\ndiscovered by Beame and Fich",
    "start": "601260",
    "end": "607649"
  },
  {
    "text": "in the future of this paper. This is actually a PhD thesis. So I think it was lost, or not\nknown about, for a long time.",
    "start": "607650",
    "end": "614310"
  },
  {
    "text": "But it ends up establishing\nthe same bounds. And then the real\ncontribution here was that those were\nthe best bounds that",
    "start": "614310",
    "end": "620970"
  },
  {
    "text": "are purely w and n, but\nstill not a full story. ",
    "start": "620970",
    "end": "628320"
  },
  {
    "text": "Next up is Sen in 2003, which\ngave a round elimination",
    "start": "628320",
    "end": "640440"
  },
  {
    "text": "proof of the same result.\nAnd whereas both the Beame",
    "start": "640440",
    "end": "650060"
  },
  {
    "text": "and Fich and the\nXiau proof are messy, this round elimination proof\nis very slick and clean.",
    "start": "650060",
    "end": "656470"
  },
  {
    "text": "And this is the proof\nwe're going to cover today. And it's going to prove-- it will imply these pure\nw and n lower bounds.",
    "start": "656470",
    "end": "665800"
  },
  {
    "text": "But it will, in some\nsense, in a stronger way, prove this bound, which\nis a real min thing.",
    "start": "665800",
    "end": "672160"
  },
  {
    "text": "And so we're just off\nby this log log factor. Otherwise, we were proving\nexactly the min of fusion tries",
    "start": "672160",
    "end": "679120"
  },
  {
    "text": "in Van Emde Boas is optimal. Getting rid of the log\nlog factor is messier.",
    "start": "679120",
    "end": "684190"
  },
  {
    "text": "That's the next paper,\nwhich is the last-- it's two papers, actually.",
    "start": "684190",
    "end": "689582"
  },
  {
    "text": "But the final\npapers in this story are by Patrascu and Thorup, 2006\nand 2007 are the two papers.",
    "start": "689582",
    "end": "701620"
  },
  {
    "text": "And they give a tight n, versus\nw, versus space trade-off.",
    "start": "701620",
    "end": "711150"
  },
  {
    "start": "711150",
    "end": "717040"
  },
  {
    "text": "I think I can fit\nit on this board. Let's try. ",
    "start": "717040",
    "end": "722990"
  },
  {
    "text": "So it's the min of four terms. The first term is\nnice, log base w of n.",
    "start": "722990",
    "end": "730470"
  },
  {
    "text": "That's our good\nfriend fusion tries. The next one is roughly log w.",
    "start": "730470",
    "end": "739960"
  },
  {
    "text": " So it's roughly Van Emde Boas.",
    "start": "739960",
    "end": "746357"
  },
  {
    "text": "But it turns out you\ncan do a little better. Now, I need to define a. I'm going to assume here the\nspace is n, times 2 to the a.",
    "start": "746357",
    "end": "758010"
  },
  {
    "text": "That's the notation they use. It's a little bit weird. But it makes this bound a\nlittle bit easier to state.",
    "start": "758010",
    "end": "764010"
  },
  {
    "text": "So, of course, you need linear\nspace to store the data. This is measuring words. So the question is, how\nmuch more than linear space",
    "start": "764010",
    "end": "771029"
  },
  {
    "text": "do you have? If you want poly log update,\nthen this better be poly log n.",
    "start": "771030",
    "end": "778800"
  },
  {
    "text": "This is about static\ndata structures. So if you want poly log n,\nthen a to be order log log n.",
    "start": "778800",
    "end": "786420"
  },
  {
    "text": "So you can think of a\nbeing order log log n. Or you can think of\na being constant, if you want linear space.",
    "start": "786420",
    "end": "791520"
  },
  {
    "text": "Then this stuff-- I mean, then this\nis basically log w. OK, so that's roughly\nVan Emde Boas.",
    "start": "791520",
    "end": "800550"
  },
  {
    "text": "Next, we get two crazier terms. ",
    "start": "800550",
    "end": "850030"
  },
  {
    "text": "These ones, I can't give you\nintuition for, I'm afraid. You see, there's the log w.",
    "start": "850030",
    "end": "855889"
  },
  {
    "text": "They're, again, versions of\nVan Emde Boas like things. But they're improving by some\nfactors that make you better",
    "start": "855890",
    "end": "864480"
  },
  {
    "text": "when a is large. And, in particular-- I mean, they should match\nthis thing at some points.",
    "start": "864480",
    "end": "871920"
  },
  {
    "text": "So when a is order\nlog n, that's when you have polynomial\nspace, which would",
    "start": "871920",
    "end": "877470"
  },
  {
    "text": "be very difficult to update. You need polynomial\ntime updates. But that's what this\nstatic data structure",
    "start": "877470",
    "end": "884920"
  },
  {
    "text": "uses polynomial space. And so with polynomial space,\nif you plug in a equals log n,",
    "start": "884920",
    "end": "891600"
  },
  {
    "text": "you end up improving\nby a log log n factor. And so that's where we are.",
    "start": "891600",
    "end": "897360"
  },
  {
    "text": "I guess there should be a\nsquare root in there somewhere. This is a log w over log log w.",
    "start": "897360",
    "end": "902670"
  },
  {
    "text": "This is the part that diverges\na little bit from Van Emde Boas. And this really is achievable\nif you have polynomial space,",
    "start": "902670",
    "end": "908699"
  },
  {
    "text": "instead of like n or n poly log. So for static, yes, you can get\nthese log log n improvements.",
    "start": "908700",
    "end": "914970"
  },
  {
    "text": "We won't cover them here. I mean, they're\nsmall improvements. And we're mostly interested\nin dynamic data structures.",
    "start": "914970",
    "end": "922650"
  },
  {
    "text": "And for dynamic data\nstructures, these things don't turn out to help.",
    "start": "922650",
    "end": "928949"
  },
  {
    "text": "So let me state the\nconsequence, which is what I stated a\ncouple of classes ago.",
    "start": "928950",
    "end": "934080"
  },
  {
    "text": "If you have n poly\nlog n space, so if you have polylogarithmic\nupdate, which is usually the situation we\ncare about, then we",
    "start": "934080",
    "end": "942269"
  },
  {
    "text": "get min of log base w of n.",
    "start": "942270",
    "end": "949200"
  },
  {
    "text": "And I'd like to say log\nw, but you can actually do slightly better. ",
    "start": "949200",
    "end": "963380"
  },
  {
    "text": "Oh God, indeed. I think I stated this\ntwo lectures ago.",
    "start": "963380",
    "end": "968820"
  },
  {
    "text": "So log w is what\nwe know how to do. This is a very\nsmall improvement. Let me state another\nconsequence of this,",
    "start": "968820",
    "end": "976330"
  },
  {
    "text": "which is Van Emde Boas is\noptimal for w poly log n.",
    "start": "976330",
    "end": "991150"
  },
  {
    "text": " OK, that's when it gets\nlog log n performance.",
    "start": "991150",
    "end": "997180"
  },
  {
    "text": "And so you can\ncheck in that case this term doesn't\nbuy you anything. That's log w would be order\nlog log n, if you're poly log.",
    "start": "997180",
    "end": "1005330"
  },
  {
    "text": "So this disappears. And you just get log w. So that's one thing.",
    "start": "1005330",
    "end": "1010430"
  },
  {
    "text": "Fusion tries are optimal for\nlog w order square root log n,",
    "start": "1010430",
    "end": "1027740"
  },
  {
    "text": "times log log n. ",
    "start": "1027740",
    "end": "1033589"
  },
  {
    "text": "So this is saying w is at\nleast 2 to the root log n, or actually log n\nto the root log n,",
    "start": "1033589",
    "end": "1039459"
  },
  {
    "text": "if you want to\ninclude that term. So that's a fairly large w. So for large w, fusion\ntires are optimal.",
    "start": "1039460",
    "end": "1045289"
  },
  {
    "text": "For small w, Van\nEmde Boas is optimal. In between, this\nthing is optimal.",
    "start": "1045290",
    "end": "1051660"
  },
  {
    "text": "That's the reality of it. It's a little messy. But this is tight. So this is the right answer.",
    "start": "1051660",
    "end": "1058620"
  },
  {
    "text": "I think most of the time, the\nsituations you care about, w is probably going to be small. So you should use Van Emde Boas.",
    "start": "1058620",
    "end": "1064313"
  },
  {
    "text": "If w really large, you\nshould use fusion tries. In between, you could\nconsider this trade-off.",
    "start": "1064313",
    "end": "1069420"
  },
  {
    "text": "But it's not it's not much\nbetter than Van Emde Boas. So take that for what it is.",
    "start": "1069420",
    "end": "1076529"
  },
  {
    "text": "So that's what's known. As I said, we're going\nto cover this sen proof, which will be tight\nup to this log log factor.",
    "start": "1076530",
    "end": "1083610"
  },
  {
    "text": " And this holds as long as\nyour space is polynomial.",
    "start": "1083610",
    "end": "1089860"
  },
  {
    "text": "So it doesn't assume\nvery much about space. And it's going to\nbe a lower bound",
    "start": "1089860",
    "end": "1095730"
  },
  {
    "text": "for a slightly easier problem. If you can prove a lower\nbound on an easier problem,",
    "start": "1095730",
    "end": "1101010"
  },
  {
    "text": "that implies a lower bound\non the harder problem. ",
    "start": "1101010",
    "end": "1107528"
  },
  {
    "text": "The easier problem is called\nthe colored predecessor problem. In colored predecessor,\neach element is red or blue.",
    "start": "1107529",
    "end": "1120730"
  },
  {
    "text": " I should say blue, whatever,\nanyway, no Team Fortress fans,",
    "start": "1120730",
    "end": "1130930"
  },
  {
    "text": "I guess. So and now a query just reports\nthe color of the predecessor.",
    "start": "1130930",
    "end": "1145780"
  },
  {
    "text": " You don't need to\nreport the key value,",
    "start": "1145780",
    "end": "1151269"
  },
  {
    "text": "just whether it is red or blue. So, again, you've\ngot your universe.",
    "start": "1151270",
    "end": "1156400"
  },
  {
    "text": "Some of the items are present. And your query is an\narbitrary universe element.",
    "start": "1156400",
    "end": "1163000"
  },
  {
    "text": "And you want a predecessor\nkind of this way. And this guy is\neither red or blue.",
    "start": "1163000",
    "end": "1168130"
  },
  {
    "text": "And you just want to\nreport which one is it? So this is, of course,\neasier, because you could just",
    "start": "1168130",
    "end": "1173620"
  },
  {
    "text": "have a lookup table, a\nhash table for example, that once you determine the\nkey, you could figure out whether it's red or blue.",
    "start": "1173620",
    "end": "1179220"
  },
  {
    "text": "It's a static data structure. So you could use\nperfect hashing.",
    "start": "1179220",
    "end": "1184304"
  },
  {
    "text": "It could be totally\ndeterministic once you set it up. And so, OK, just reporting\nthe colors, of course",
    "start": "1184305",
    "end": "1190900"
  },
  {
    "text": "easier than reporting the key. One interesting thing\nabout this problem is it's very easy to get a\ncorrect answer with probability",
    "start": "1190900",
    "end": "1197260"
  },
  {
    "text": "50%. You flip a coin. Heads is red, tails is blue.",
    "start": "1197260",
    "end": "1203200"
  },
  {
    "text": "And this lower bound\nwe proved will actually apply to randomized\ndata structures that work with some probability.",
    "start": "1203200",
    "end": "1209530"
  },
  {
    "text": "But it has to be probability\ngreater than half of succeeding.",
    "start": "1209530",
    "end": "1214720"
  },
  {
    "text": "And this will be\nuseful, because we're going to take our problem. And we're going to\nmodify it a little bit, and sort of make it\nsimpler and simpler.",
    "start": "1214720",
    "end": "1221710"
  },
  {
    "text": "And it's easier to preserve\nthis color property than to preserve\nactual key values.",
    "start": "1221710",
    "end": "1227750"
  },
  {
    "text": "So that's the\ncolored predecessor. Now, we get to communication\ncomplexity perspective.",
    "start": "1227750",
    "end": "1235850"
  },
  {
    "text": "So this is pretty cool. ",
    "start": "1235850",
    "end": "1241740"
  },
  {
    "text": "And it brings us to the\nidea of round elimination. ",
    "start": "1241740",
    "end": "1247679"
  },
  {
    "text": "So communication--\nOK, why don't I",
    "start": "1247680",
    "end": "1270190"
  },
  {
    "text": "tell you the generic\ncommunication complexity picture out of Alice and Bob?",
    "start": "1270190",
    "end": "1275799"
  },
  {
    "text": "And then I'll tell you how it\nrelates to data structures. They're both simple. But I've got to do\nsomething first.",
    "start": "1275800",
    "end": "1282850"
  },
  {
    "text": "So let's say Alice is one\nperson who knows some value x.",
    "start": "1282850",
    "end": "1291370"
  },
  {
    "text": "Over here, we have Bob\nwho knows some value y.",
    "start": "1291370",
    "end": "1298480"
  },
  {
    "text": "The goal is to--",
    "start": "1298480",
    "end": "1304994"
  },
  {
    "text": "I'll move this a\nlittle bit to the left. ",
    "start": "1304994",
    "end": "1310310"
  },
  {
    "text": "Their collective goal--\nthey're trying to cooperate. Their goal is to compute\nsome function of x and y.",
    "start": "1310310",
    "end": "1317570"
  },
  {
    "text": "The trouble is only Alice\nknows x, and only Bob knows y. So how did they do it? They have to talk to each other.",
    "start": "1317570",
    "end": "1323990"
  },
  {
    "text": "Ideally, Alice sends Bob\nx, or Bob sends Alice y. One of them could compute\nit, send back the answer.",
    "start": "1323990",
    "end": "1330110"
  },
  {
    "text": "That's one possibility. But maybe x and y\nare kind of big, and you can't just\nsend it in one message. So here's the restriction.",
    "start": "1330110",
    "end": "1338750"
  },
  {
    "text": "Alice can send messages with\nless than or equal to little",
    "start": "1338750",
    "end": "1344960"
  },
  {
    "text": "a bits, a for Alice. Bob can send messages with\nless than or equal to little b",
    "start": "1344960",
    "end": "1354860"
  },
  {
    "text": "bits, b for Bob. So that's the constraint. And, potentially, x\nis much larger than a,",
    "start": "1354860",
    "end": "1361930"
  },
  {
    "text": "and/or y is much longer than b. And so you're going to have\nto spend many messages.",
    "start": "1361930",
    "end": "1367510"
  },
  {
    "text": "And let's restrict to protocols\nof the form Alice talks to Bob, then Bob talks to Alice,\nand back and forth, so rounds",
    "start": "1367510",
    "end": "1374350"
  },
  {
    "text": "of communication. And you want to know,\nhow many rounds does it take to compute f of xy?",
    "start": "1374350",
    "end": "1379660"
  },
  {
    "text": "And, of course, it depends on f. OK, that's the totally\ngeneric picture.",
    "start": "1379660",
    "end": "1384790"
  },
  {
    "text": "And there's\ntechniques which we're going to use for lower\nbounds on how long these protocols have to be.",
    "start": "1384790",
    "end": "1391030"
  },
  {
    "text": "How does this relate\nto colored predecessor? And, remember, also there's\nthe model of computation,",
    "start": "1391030",
    "end": "1397810"
  },
  {
    "text": "which I should mention,\ncell probe model. Cell probe model, we just\ncount the number of--",
    "start": "1397810",
    "end": "1407024"
  },
  {
    "text": "in this case, because it's\na static data structure, we don't really change it.",
    "start": "1407025",
    "end": "1412110"
  },
  {
    "text": "Let's say memory word reads.",
    "start": "1412110",
    "end": "1417590"
  },
  {
    "text": "We want to know how many\nwords of the data structure do we need to read in order to\nanswer a colored predecessor",
    "start": "1417590",
    "end": "1423010"
  },
  {
    "text": "data structure? If we can prove a\nlower bound on this, of course it applies lower\nbound on the word RAM, or pick your favorite model\nthat works with words,",
    "start": "1423010",
    "end": "1430710"
  },
  {
    "text": "transdichotomous RAM, whatever. OK, so I want to cast\nthat cell probe picture",
    "start": "1430710",
    "end": "1437170"
  },
  {
    "text": "in terms of this picture. So here's the idea. Maybe I'll switch colors.",
    "start": "1437170",
    "end": "1442389"
  },
  {
    "text": " Alice is the--",
    "start": "1442390",
    "end": "1451809"
  },
  {
    "text": "I guess what do you\nwant to call it, the algorithm, the\nquery algorithm.",
    "start": "1451810",
    "end": "1461370"
  },
  {
    "text": "OK, Alice is the poor\nsoul who has to compute the color of a predecessor.",
    "start": "1461370",
    "end": "1467890"
  },
  {
    "text": "And so what's x? x is the query. We're used to that.",
    "start": "1467890",
    "end": "1472990"
  },
  {
    "text": "That is the input\nto the predecessor. So it's a single word, which\nis I want another predecessor",
    "start": "1472990",
    "end": "1480010"
  },
  {
    "text": "of some value.  Bob, on the other hand,\nis the data structure.",
    "start": "1480010",
    "end": "1487363"
  },
  {
    "text": " That's the static thing.",
    "start": "1487363",
    "end": "1492513"
  },
  {
    "text": "Where Bob represents\nthe data structure, y actually is the\ndata structure.",
    "start": "1492514",
    "end": "1498660"
  },
  {
    "text": "I guess if I want to be a little\nbit more prosaic or something,",
    "start": "1498660",
    "end": "1505080"
  },
  {
    "text": "Bob you can think of as memory. ",
    "start": "1505080",
    "end": "1512240"
  },
  {
    "text": "We'll call it RAM, to be a\nlittle more space saving. So Bob is the memory which you\ncan access in random access.",
    "start": "1512240",
    "end": "1521750"
  },
  {
    "text": "And what it knows is\nthe data structure. I mean, that's\nwhat it's storing. That's all it's storing. That's y.",
    "start": "1521750",
    "end": "1528710"
  },
  {
    "text": "Now, what are these rounds? They are memory reads.",
    "start": "1528710",
    "end": "1534019"
  },
  {
    "text": "So what's a? a is a log of the size\nof the data structure,",
    "start": "1534020",
    "end": "1542240"
  },
  {
    "text": "because that's how many bits\nyou need in order to specify which word you want to read. So if you have, let's\nsay, s words of space,",
    "start": "1542240",
    "end": "1550610"
  },
  {
    "text": "a is going to be log s. ",
    "start": "1550610",
    "end": "1556840"
  },
  {
    "text": "OK, you could make it larger. But it doesn't help you. So we're going to make\nit as small as possible, because that will\nlet us prove things.",
    "start": "1556840",
    "end": "1563080"
  },
  {
    "text": "It's fine to let a be\nlog s, because Bob is not very intelligent.",
    "start": "1563080",
    "end": "1568350"
  },
  {
    "text": "Bob, you just say, look, I\nwould like word five please. And it says, here's word five.",
    "start": "1568350",
    "end": "1573544"
  },
  {
    "text": "So it's not doing\nany computation. Alice can do lots of\ncomputation and whatnot. In fact, free computation,\nwe don't count that.",
    "start": "1573544",
    "end": "1580259"
  },
  {
    "text": "The question is\njust, how many things do you have to read from Bob? Now, in this picture, Bob could\npotentially compute stuff.",
    "start": "1580259",
    "end": "1585670"
  },
  {
    "text": "But we know, in\nreality, it won't. Lower bounds aren't\ngoing to use that fact. But that's why we can\nset a to just be log s,",
    "start": "1585670",
    "end": "1593245"
  },
  {
    "text": "because Bob wouldn't do anything\nwith the extra information. How big is b? b is just w,\nbecause the response to a word",
    "start": "1593245",
    "end": "1602950"
  },
  {
    "text": "read is a word. So this is the picture. Query can probe\nthe data structure.",
    "start": "1602950",
    "end": "1610900"
  },
  {
    "text": "It says, give me word something,\nwhich is only log s bits. The response is w bits.",
    "start": "1610900",
    "end": "1618250"
  },
  {
    "text": "And you repeat this\nprocess over and over. And then, somehow, Alice\nhas to compute f of xy.",
    "start": "1618250",
    "end": "1625000"
  },
  {
    "text": "In this model, Bob doesn't\nneed to know the answer. Of course, it's\njust a single bit. What is f of xy? This is colored predecessor.",
    "start": "1625000",
    "end": "1631802"
  },
  {
    "start": "1631802",
    "end": "1638890"
  },
  {
    "text": "x is the query. y is the data structure. And f of xy, is it red or blue?",
    "start": "1638890",
    "end": "1644590"
  },
  {
    "text": "Is the predecessor\nof x in this data structure in the set\nrepresented by this data structure red or blue? So it's one bit of information.",
    "start": "1644590",
    "end": "1651590"
  },
  {
    "text": "Alice could then\ntell the bit to Bob. But actually, in\nthis model, we just want Alice to know the answer.",
    "start": "1651590",
    "end": "1658786"
  },
  {
    "text": "So if you can\nprove a lower bound on how many rounds of\ncommunication you need,",
    "start": "1658786",
    "end": "1663790"
  },
  {
    "text": "then you prove a lower bound\non the number of memory reads. ",
    "start": "1663790",
    "end": "1670090"
  },
  {
    "text": "Each round corresponds to\none word read from memory.",
    "start": "1670090",
    "end": "1675760"
  },
  {
    "text": "Clear? So a very simple idea, but a\npowerful one, as we will see,",
    "start": "1675760",
    "end": "1683080"
  },
  {
    "text": "because it lets us talk about\nan idea which makes sense when you're thinking about protocols\nof rounds of communication,",
    "start": "1683080",
    "end": "1690624"
  },
  {
    "text": "but does not really make\nsense from a data structure perspective-- well, I mean, not as much sense.",
    "start": "1690624",
    "end": "1696929"
  },
  {
    "text": " Round elimination\nis a concept that",
    "start": "1696930",
    "end": "1703440"
  },
  {
    "text": "makes sense for any\ncommunication style protocol--",
    "start": "1703440",
    "end": "1710970"
  },
  {
    "text": "not just the red one, but\nthe generic white picture. ",
    "start": "1710970",
    "end": "1717630"
  },
  {
    "text": "I need to define a little bit\nbefore I can get to the claim. This will seem weird and\narbitrary for a little while,",
    "start": "1717630",
    "end": "1725399"
  },
  {
    "text": "until I draw the red picture,\nwhich is what it corresponds to in the predecessor problem. But just bear with\nme for a minute.",
    "start": "1725400",
    "end": "1731770"
  },
  {
    "text": "Imagine this weird variation\non whatever problem you're starting with. ",
    "start": "1731770",
    "end": "1741694"
  },
  {
    "text": "So we have some problem\nf, which happens to be colored predecessor. We're going to make a new\nversion of that problem, called f to the k.",
    "start": "1741694",
    "end": "1748610"
  },
  {
    "text": "And here is the setup. It's going to be a little\ndifferent from this, and kind of fits\nthe same framework.",
    "start": "1748610",
    "end": "1754970"
  },
  {
    "text": "But now, Alice has k\ninputs, x1, x2, up to xk.",
    "start": "1754970",
    "end": "1763400"
  },
  {
    "text": " Bob has y, as before.",
    "start": "1763400",
    "end": "1774320"
  },
  {
    "text": "And it has an integer, i,\nwhich is between 1 and k.",
    "start": "1774320",
    "end": "1781730"
  },
  {
    "text": " Also, this is a technicality\nbecause we'll need it",
    "start": "1781730",
    "end": "1788970"
  },
  {
    "text": "for colored predecessor-- we won't see that\nfor a few minutes. But Bob happens to know all\nthe xi's up to xi minus 1.",
    "start": "1788970",
    "end": "1800964"
  },
  {
    "text": " And the goal is to\ncompute f of x i, y.",
    "start": "1800964",
    "end": "1813650"
  },
  {
    "text": " Maybe I should draw\na picture of this.",
    "start": "1813650",
    "end": "1820890"
  },
  {
    "start": "1820890",
    "end": "1840780"
  },
  {
    "text": "So we have Alice. Alice has x1 up to xk.",
    "start": "1840780",
    "end": "1853150"
  },
  {
    "text": "Bob has y and i, same\ncommunication setup.",
    "start": "1853150",
    "end": "1861400"
  },
  {
    "text": "And the goal is to\ncompute f of xi, y.",
    "start": "1861400",
    "end": "1867640"
  },
  {
    "text": "Before it was x, y. And now, we're saying,\nwell, actually, x consists of these k parts.",
    "start": "1867640",
    "end": "1873400"
  },
  {
    "text": "We really just care\nabout the i-th part. So this function does\nnot depend on any other of the xj's, just xi.",
    "start": "1873400",
    "end": "1880570"
  },
  {
    "text": "So naturally, Alice should just\ncommunicate to Bob about xi. Trouble is, Alice\ndoesn't know what i is.",
    "start": "1880570",
    "end": "1886720"
  },
  {
    "text": "Only Bob knows what i is. So if you think about a\ncommunication protocol, where initially Alice sends\na message, then Bob responds,",
    "start": "1886720",
    "end": "1895060"
  },
  {
    "text": "that first message that Alice\nsends is probably useless.",
    "start": "1895060",
    "end": "1900950"
  },
  {
    "text": "I mean, probably the first\nquestion is, what's i? That has no information. It's just every time in the\nbeginning, you say, what's i?",
    "start": "1900950",
    "end": "1907179"
  },
  {
    "text": "Then Bob says, here's i. And then after that one\nround, Alice can you just",
    "start": "1907180",
    "end": "1913570"
  },
  {
    "text": "think about xi, from then on.  OK, one message may\nseem like nothing.",
    "start": "1913570",
    "end": "1923060"
  },
  {
    "text": "But it's like every time\nyou put a penny in the jar. After you do that enough\ntimes, you have a lot of money.",
    "start": "1923060",
    "end": "1931740"
  },
  {
    "text": "So one message may\nseem like very few. But we just need to prove\na lower bound of log w",
    "start": "1931740",
    "end": "1937150"
  },
  {
    "text": "over log log w messages. So you do this a few times. Eventually, you'll get\nrid of all the messages.",
    "start": "1937150",
    "end": "1944139"
  },
  {
    "text": "Now, if we can get rid\nof all the messages, it may seem crazy. But it turns out you can iterate\nthis process of eliminating",
    "start": "1944140",
    "end": "1951710"
  },
  {
    "text": "that first message. If we get rid of\nall the messages, the best we could hope\nfor is an algorithm",
    "start": "1951710",
    "end": "1956780"
  },
  {
    "text": "that is correct with\n50% probability. If Alice can do nothing,\nthen the best Alice could do",
    "start": "1956780",
    "end": "1963460"
  },
  {
    "text": "is flip a coin. So we will get a\ncontradiction if we get a zero message\nprotocol that wins",
    "start": "1963460",
    "end": "1969529"
  },
  {
    "text": "with more than 50% probability. That's what we're\ngoing to try to do.",
    "start": "1969530",
    "end": "1975200"
  },
  {
    "text": "But what does it mean to\neliminate this first message? Let me formalize the\nround elimination",
    "start": "1975200",
    "end": "1981450"
  },
  {
    "text": "a little bit over here.",
    "start": "1981450",
    "end": "1990261"
  },
  {
    "start": "1990261",
    "end": "2008950"
  },
  {
    "text": "So here's the round elimination.",
    "start": "2008950",
    "end": "2030929"
  },
  {
    "text": "This, again, works\nfor any function f. ",
    "start": "2030930",
    "end": "2043820"
  },
  {
    "text": "So if there's a protocol\nfor this f to the k problem, and Alice speaks first,\nthen that first message",
    "start": "2043820",
    "end": "2051109"
  },
  {
    "text": "is going to be roughly useless. ",
    "start": "2051110",
    "end": "2057649"
  },
  {
    "text": "So let's suppose it has\nerror probability delta.",
    "start": "2057650",
    "end": "2065219"
  },
  {
    "text": "So there's some probability\nit gives the wrong answer.  And let's suppose that\nit uses m messages.",
    "start": "2065219",
    "end": "2074714"
  },
  {
    "text": " Then there exists a protocol\nfor f where Bob speaks first,",
    "start": "2074714",
    "end": "2101260"
  },
  {
    "text": "the error probability\ngoes up slightly. ",
    "start": "2101260",
    "end": "2120020"
  },
  {
    "text": "And it uses one fewer message. ",
    "start": "2120020",
    "end": "2126890"
  },
  {
    "text": "OK, ultimately, we\ncare about rounds, which are pairs of messages. But we're going\nto count messages.",
    "start": "2126890",
    "end": "2134390"
  },
  {
    "text": "And then, of course, divide\nby two, you get rounds. So the idea is you can\neliminate the first message",
    "start": "2134390",
    "end": "2139430"
  },
  {
    "text": "that Alice sent. The difference is, before you\nwere solving this f to the k",
    "start": "2139430",
    "end": "2144710"
  },
  {
    "text": "problem. If you start with Bob, then\nof course you know what i is. And so then your\nproblem just reduces",
    "start": "2144710",
    "end": "2150331"
  },
  {
    "text": "to computing this f on xi, y. So you don't get a protocol\nfor f to the k anymore.",
    "start": "2150331",
    "end": "2156170"
  },
  {
    "text": "But you get a protocol for f.  And we're going to\niterate this process,",
    "start": "2156170",
    "end": "2162140"
  },
  {
    "text": "and eventually eliminate\nall the messages. That's the plan. Let me give you some intuition\nfor why this dilemma is true.",
    "start": "2162140",
    "end": "2172710"
  },
  {
    "text": "It's a little messy\nfor us to prove. I'm not going to\ngive a proof here.",
    "start": "2172710",
    "end": "2177789"
  },
  {
    "text": "If there's time at the end,\nI'll give a little bit more of a proof. But it will still use\nsome information theory",
    "start": "2177789",
    "end": "2184220"
  },
  {
    "text": "that we will not prove, and some\ncommunication complexity which",
    "start": "2184220",
    "end": "2189547"
  },
  {
    "text": "we won't prove, because\nit's a little bit involved to prove this. But once you have this\nlemma, this lower bound",
    "start": "2189547",
    "end": "2194930"
  },
  {
    "text": "is actually quite easy,\nand intuitive, and nice. So that's where I\nwant to get to today.",
    "start": "2194930",
    "end": "2201922"
  },
  {
    "text": "But let's start\nwith some intuition of why this should be true, why\nthere's this extra error term.",
    "start": "2201922",
    "end": "2211490"
  },
  {
    "text": "Yeah, question?  AUDIENCE: Does it matter\nwho reports the answer?",
    "start": "2211490",
    "end": "2217541"
  },
  {
    "text": "Because there seems to\nbe some symmetry there. ERIK DEMAINE: Right,\ndoes it matter who",
    "start": "2217541",
    "end": "2223010"
  },
  {
    "text": "has the answer, Alice or Bob? Let's just say you're\ndone when anyone knows the answer,\neither Alice or Bob.",
    "start": "2223010",
    "end": "2231414"
  },
  {
    "text": "Yeah, that would be cleaner. Otherwise, you'd have to\nsend a message at the end to tell it to\nAlice or something. So let's make it\nsymmetric, by saying",
    "start": "2231414",
    "end": "2238520"
  },
  {
    "text": "either Alice or Bob knows it. Then the protocol can end. Good question. ",
    "start": "2238520",
    "end": "2245529"
  },
  {
    "text": "That way, we won't pay for\nan additive one every time, only pay for it at the end.",
    "start": "2245530",
    "end": "2250829"
  },
  {
    "text": "Good questions. All right, so there's\nan issue here.",
    "start": "2250830",
    "end": "2256290"
  },
  {
    "text": "It said, oh, Alice's\nmessage is probably useless. But maybe Alice gets\nlucky, and sends xi.",
    "start": "2256290",
    "end": "2261650"
  },
  {
    "text": "Then, that message is useful. What's the chance\nthat Alice sends xi? ",
    "start": "2261650",
    "end": "2268520"
  },
  {
    "text": "Well, 1 out of k. So there's something\ngoing on there.",
    "start": "2268520",
    "end": "2273560"
  },
  {
    "text": "Alice doesn't just have to\nsend an entire xj, though. ",
    "start": "2273560",
    "end": "2279390"
  },
  {
    "text": "Alice could send some\nmix of these guys. Maybe it sends the x\nor of all the xj's.",
    "start": "2279390",
    "end": "2284920"
  },
  {
    "text": "Or it could be anything. But there's a limit. There's only a bits being\nsent from Alice to Bob.",
    "start": "2284920",
    "end": "2294170"
  },
  {
    "text": "So the idea is if the\ntotal number of bits here is much bigger than a,\nthen very few of the bits",
    "start": "2294170",
    "end": "2300470"
  },
  {
    "text": "that you send are going to be\nabout a particular element xi,",
    "start": "2300470",
    "end": "2307310"
  },
  {
    "text": "in expectation. So this is a\nprobabilistic thing. ",
    "start": "2307310",
    "end": "2320690"
  },
  {
    "text": "So just imagine\nthis for the moment. ",
    "start": "2320690",
    "end": "2328550"
  },
  {
    "text": "Basically, because we're\nin lower bound world, we get to, essentially, set\nup the input however we want.",
    "start": "2328550",
    "end": "2333764"
  },
  {
    "text": "And so, in particular,\nwe're going to prove a lower bound\nthat, in expectation--",
    "start": "2333764",
    "end": "2339078"
  },
  {
    "text": "so we're going to have a\nprobability distribution of data structure, or\nnot data structures, but of sets of values\nthat are in the set.",
    "start": "2339079",
    "end": "2347900"
  },
  {
    "text": "And the claim is that, in\nexpectation, any data structure must do at least log\nw over log log w,",
    "start": "2347900",
    "end": "2354080"
  },
  {
    "text": "minned with log base w of\nn queries, in expectation.",
    "start": "2354080",
    "end": "2361500"
  },
  {
    "text": "So we get to assume that\nthe input is random. And we'll see why in a bit.",
    "start": "2361500",
    "end": "2367052"
  },
  {
    "text": "So in this world,\nwe can assume that i is chosen uniformly at random. ",
    "start": "2367052",
    "end": "2372620"
  },
  {
    "text": "And given that assumption,\nyou would expect exactly a",
    "start": "2372620",
    "end": "2380395"
  },
  {
    "text": "over k bits to be about xi.",
    "start": "2380395",
    "end": "2390230"
  },
  {
    "text": "That would be the best\nyou could hope to do. Sort of, you have a bits. You spread them out\nevenly talk about all",
    "start": "2390230",
    "end": "2396980"
  },
  {
    "text": "the xi's that you can. So you get to communicate\na little bit of information about the particular xi\nthat Bob will care about.",
    "start": "2396980",
    "end": "2403765"
  },
  {
    "text": "You don't know\nwhich one that is. So you have to communicate\nabout all of them. So it's going to be a\nover k in expectation.",
    "start": "2403766",
    "end": "2410880"
  },
  {
    "text": "So here's the idea. We want to remove that message\nso Alice can't communicate",
    "start": "2410880",
    "end": "2417019"
  },
  {
    "text": "those a over k bits. So what's Bob going to do? Bob is going to guess\nthem by flipping coins",
    "start": "2417020",
    "end": "2431140"
  },
  {
    "text": "so he gets them uniformly\nrandomly, a over k bits.",
    "start": "2431140",
    "end": "2437250"
  },
  {
    "text": "What's the probability\nthat Bob is right? ",
    "start": "2437250",
    "end": "2444970"
  },
  {
    "text": "Well, it's going to be 1\nover 2 to the a over k.",
    "start": "2444970",
    "end": "2450369"
  },
  {
    "start": "2450370",
    "end": "2457590"
  },
  {
    "text": "That seems not so big. But if k-- how does it go? If k is much larger than a, then\nthis is actually a good thing.",
    "start": "2457590",
    "end": "2466450"
  },
  {
    "text": "So let me-- so this was the\nprobability of being correct.",
    "start": "2466450",
    "end": "2475900"
  },
  {
    "text": "So the probability\nof being incorrect",
    "start": "2475900",
    "end": "2481319"
  },
  {
    "text": "is going to be 1 minus that. And we're interested in--",
    "start": "2481320",
    "end": "2486480"
  },
  {
    "text": "we had some probability\ndelta failing before. And now there's this new\nway that we can fail.",
    "start": "2486480",
    "end": "2492119"
  },
  {
    "text": "So I'm using union\nbound here, saying, well, we could fail the old\nway, or fail the new way. Maybe they're\ncorrelated, maybe not.",
    "start": "2492120",
    "end": "2497549"
  },
  {
    "text": "But the worst cases\nis that it wants the sum of the two errors. So the increase in error is,\nat most, 1 minus this thing.",
    "start": "2497549",
    "end": "2507359"
  },
  {
    "text": "Now, this 1 minus 1 over\nsomething to the power or something, if this\nsomething is large,",
    "start": "2507360",
    "end": "2512849"
  },
  {
    "text": "there's this fun fact 1\nminus 1, over e to the x is approximately x.",
    "start": "2512850",
    "end": "2521440"
  },
  {
    "text": "So this is going to be\napproximately a over k,",
    "start": "2521440",
    "end": "2526790"
  },
  {
    "text": "if k is large enough. So this is for large x-- ",
    "start": "2526790",
    "end": "2535040"
  },
  {
    "text": "small x, sorry. k is large. And so a over k is\nsmall, very close to 0.",
    "start": "2535040",
    "end": "2542120"
  },
  {
    "text": " So if this were true,\nthen the error increase",
    "start": "2542120",
    "end": "2549230"
  },
  {
    "text": "would be order a over k. There's e versus 2. So there's a constant\nfactor I'm losing there.",
    "start": "2549230",
    "end": "2555859"
  },
  {
    "text": "It's not quite that good. So this is only intuition. The real bound has\na square route here.",
    "start": "2555860",
    "end": "2561290"
  },
  {
    "text": "And it's necessary. And I don't have a great\nintuition why it's square root. It's just a little bit\nworse than this intuition.",
    "start": "2561290",
    "end": "2569540"
  },
  {
    "text": "I mean, the main issue\nis, what does it mean for bits to be about something?",
    "start": "2569540",
    "end": "2574579"
  },
  {
    "text": "And can you really\njust guess those bits? Actually, you have to guess\nthe message that Bob sent.",
    "start": "2574580",
    "end": "2579740"
  },
  {
    "text": "So it's a little bit more\nthan just the bits that-- sorry that Alice sent.",
    "start": "2579740",
    "end": "2584820"
  },
  {
    "text": "So you lose a little bit more. But it won't make a huge\ndifference to us, square root.",
    "start": "2584820",
    "end": "2590208"
  },
  {
    "text": " So that's some rough intuition\nfor round elimination.",
    "start": "2590208",
    "end": "2595770"
  },
  {
    "text": "Let's see why it is so cool\nto have round elimination,",
    "start": "2595770",
    "end": "2601200"
  },
  {
    "text": "how it lets us prove\na pretty strong lower bound on colored predecessor\nin the cell pro model.",
    "start": "2601200",
    "end": "2613099"
  },
  {
    "start": "2613100",
    "end": "2629300"
  },
  {
    "text": "OK, I think I missed a\nclaimed somewhere here. ",
    "start": "2629300",
    "end": "2660869"
  },
  {
    "text": "This is the lower bound\nwe're going to prove. And it's nice and symmetric, log\nbase a of w, log base b of n.",
    "start": "2660870",
    "end": "2667470"
  },
  {
    "text": "This is kind of perfectly\nsymmetric in Alice and Bob. Alice, well I don't\nknow which one",
    "start": "2667470",
    "end": "2676080"
  },
  {
    "text": "represents-- and, apparently,\nAlice represents w. Alice has got a bits to\ncommunicate with to Bob.",
    "start": "2676080",
    "end": "2684599"
  },
  {
    "text": " I mean, the input, I\nguess, is of size w.",
    "start": "2684600",
    "end": "2689850"
  },
  {
    "text": "That's the query. Bob, on the other hand,\nknows all the data. So it's, in some sense,\nrepresents the n side.",
    "start": "2689850",
    "end": "2695609"
  },
  {
    "text": "It's able to communicate\nwith b bits of information. So log base b of n, somehow\nenough to communicate n.",
    "start": "2695610",
    "end": "2703051"
  },
  {
    "text": "It's not a great\nintuition for this. But at least it's\nnice and symmetric. Now, let's work out what it\nactually corresponds to for--",
    "start": "2703051",
    "end": "2713760"
  },
  {
    "text": "this is a lower bound\non colored predecessor. So for any colored, even\nstatic, colored predecessor data",
    "start": "2713760",
    "end": "2726359"
  },
  {
    "text": "structure, static\ncan be randomized.",
    "start": "2726360",
    "end": "2733680"
  },
  {
    "text": "And this will be a lower bound\non the expected performance. ",
    "start": "2733680",
    "end": "2740220"
  },
  {
    "text": "OK, so what this implies\nfor polynomial space, which is kind of the\ncase we care about,",
    "start": "2740220",
    "end": "2751410"
  },
  {
    "text": "for polynomial space\ndata structure, a is going to be order log n.",
    "start": "2751410",
    "end": "2760860"
  },
  {
    "text": "In fact, we only need a\nto be poly log n for what I'm about to say to be true.",
    "start": "2760860",
    "end": "2767580"
  },
  {
    "text": "So then this becomes min log-- ",
    "start": "2767580",
    "end": "2774799"
  },
  {
    "text": "what n? ",
    "start": "2774800",
    "end": "2780350"
  },
  {
    "text": "I guess.  Is that what I wrote over there? I don't even remember.",
    "start": "2780350",
    "end": "2786700"
  },
  {
    "text": "I wrote a log log w. I guess I'm going\nto write log log n. ",
    "start": "2786700",
    "end": "2797239"
  },
  {
    "text": "This is the right answer. ",
    "start": "2797239",
    "end": "2806730"
  },
  {
    "text": "OK, fine, so we get a--",
    "start": "2806730",
    "end": "2812570"
  },
  {
    "text": "b is just w. So that's a log base w of n. That's just fusion tries. This one, ideally,\nwould be log w.",
    "start": "2812570",
    "end": "2818660"
  },
  {
    "text": "But we're off by this log\nlog factor if a is log n. That's the best we'll\nbe able to prove today.",
    "start": "2818660",
    "end": "2827220"
  },
  {
    "text": "So this is slightly\nless beautiful, because it's both w and n. But so was this one.",
    "start": "2827220",
    "end": "2833580"
  },
  {
    "text": "And this is not the true answer. The true answer has no log log. But that's what we get\nfrom nice symmetric bound",
    "start": "2833580",
    "end": "2840530"
  },
  {
    "text": "for polynomial space. You can also use this\nto prove the Beame Fich",
    "start": "2840530",
    "end": "2846840"
  },
  {
    "text": "lower bounds, which I've by now\nerased, which are the pure-- the for all n, there exists a\nw, for all w, there exists an n.",
    "start": "2846840",
    "end": "2857910"
  },
  {
    "text": "Why don't I briefly cover that? ",
    "start": "2857910",
    "end": "2881700"
  },
  {
    "text": "Again, let's assume\nthat a is order log n with polynomial space.",
    "start": "2881700",
    "end": "2887270"
  },
  {
    "text": "Then, the lower bound will\nbe largest when the two",
    "start": "2887270",
    "end": "2895400"
  },
  {
    "text": "terms in the min are equal. So log base a of w\nequals log base b of n.",
    "start": "2895400",
    "end": "2907970"
  },
  {
    "text": " And that's these two guys.",
    "start": "2907970",
    "end": "2915009"
  },
  {
    "text": "So this is log w over\na is order log n. So this is going to\nbe order log log n.",
    "start": "2915010",
    "end": "2921480"
  },
  {
    "text": " And I want this to be\nequal to log n over log w.",
    "start": "2921480",
    "end": "2931200"
  },
  {
    "text": "So we can cross multiply, get\nlog square w equals log n,",
    "start": "2931200",
    "end": "2939390"
  },
  {
    "text": "log log n.  And so log w is equal to\nsquare root log n, log log n.",
    "start": "2939390",
    "end": "2951510"
  },
  {
    "text": " And let's see.",
    "start": "2951510",
    "end": "2959819"
  },
  {
    "text": "You can also take logs, and\nfrom this conclude that log log",
    "start": "2959820",
    "end": "2964860"
  },
  {
    "text": "w equals log log n. ",
    "start": "2964860",
    "end": "2972640"
  },
  {
    "text": "I'm throwing away\nconstant factors. And when I say equal here, I\nmean up to constant factors for throughout this half board.",
    "start": "2972640",
    "end": "2980532"
  },
  {
    "text": "So you take logs. You get 2 log log w\non the left hand side. Over here, you get log\nlog n, plus log log log n.",
    "start": "2980532",
    "end": "2986190"
  },
  {
    "text": "So it's dominated by log log n. So in this scenario, where these\ntwo things are roughly equal,",
    "start": "2986190",
    "end": "2991530"
  },
  {
    "text": "you get log log w roughly\nequal to log log n. And so, from this bound,\nor from this equality,",
    "start": "2991530",
    "end": "2999990"
  },
  {
    "text": "we should get the old\nBeame Fich bounds, which let me write them again.",
    "start": "2999990",
    "end": "3005270"
  },
  {
    "start": "3005270",
    "end": "3018830"
  },
  {
    "text": "So they are-- ",
    "start": "3018830",
    "end": "3024630"
  },
  {
    "text": "I mean, we want to compute\nwhat was this bound. We have log w, divided by log a,\nor log w divided by log log n--",
    "start": "3024630",
    "end": "3033980"
  },
  {
    "text": "so log w, divided by log log n. But log log n now is log log w.",
    "start": "3033980",
    "end": "3039500"
  },
  {
    "text": "So this is going to be log\nw over log log w, which was",
    "start": "3039500",
    "end": "3044570"
  },
  {
    "text": "one of the Beam Fich bounds. So for all w, there exists an\nn, such that omega this thing",
    "start": "3044570",
    "end": "3054560"
  },
  {
    "text": "holds. On the other hand,\nwe have log n, divided by log w is now square\nroot of log n, log log n.",
    "start": "3054560",
    "end": "3070359"
  },
  {
    "text": "So this is log n, divided\nby square root of log n,",
    "start": "3070360",
    "end": "3075400"
  },
  {
    "text": "log log n. So the square root log\nn cancels with this. We end up with square\nroot of log n on the top.",
    "start": "3075400",
    "end": "3082760"
  },
  {
    "text": "And we keep the square root\nof log log n on the bottom. And so we get the other Beam\nFich Xiau bound, for all n,",
    "start": "3082760",
    "end": "3092780"
  },
  {
    "text": "there exists a w, such\nthat omega this holds.",
    "start": "3092780",
    "end": "3097795"
  },
  {
    "text": "And when you just\nneed existence, then we get to choose the\nrelationship between n and w however we want. So you don't have to\nbelieve me that it's",
    "start": "3097795",
    "end": "3103549"
  },
  {
    "text": "largest when they're equal. It happens to be true. But the point is, there\nis a choice of w and n--",
    "start": "3103550",
    "end": "3109770"
  },
  {
    "text": "namely, this choice, log w\nequals root log n, log log n, where you get a\nlower bound of this.",
    "start": "3109770",
    "end": "3116060"
  },
  {
    "text": "And there's another choice for\nn versus w where this happens. So this implies the\nBeame Fich Xiau bounds.",
    "start": "3116060",
    "end": "3124660"
  },
  {
    "text": "But I kind of prefer this\nform, because it's clear up to this log log n\nfactor, we understand",
    "start": "3124660",
    "end": "3129710"
  },
  {
    "text": "the complete trade-off\nbetween w and n, assuming polynomial space. ",
    "start": "3129710",
    "end": "3136880"
  },
  {
    "text": "So we're going to\nprove this bound, which implies all this stuff, using\nround elimination lemma.",
    "start": "3136880",
    "end": "3143450"
  },
  {
    "start": "3143450",
    "end": "3177460"
  },
  {
    "text": "So we're proving\nthis claim here,",
    "start": "3177460",
    "end": "3183619"
  },
  {
    "text": "omega min log base of a\nof w, log base b of n, for any colored\npredecessor data structure.",
    "start": "3183620",
    "end": "3190515"
  },
  {
    "text": " So let's suppose you have\na colored predecessor data",
    "start": "3190515",
    "end": "3196069"
  },
  {
    "text": "structure. And it can answer\nqueries in t cell probes. ",
    "start": "3196070",
    "end": "3205130"
  },
  {
    "text": "which in the communication\ncomplexity perspective, that's rounds of communication,\nor colored predecessor.",
    "start": "3205130",
    "end": "3218810"
  },
  {
    "text": "Our goal is to do t\nround eliminations.",
    "start": "3218810",
    "end": "3224440"
  },
  {
    "text": " Slight discrepancy\nin terminology here--",
    "start": "3224440",
    "end": "3230770"
  },
  {
    "text": "round elimination\nlemma is really about eliminating one message,\nwhich is half a round. But you do it twice,\nyou eliminate a round.",
    "start": "3230770",
    "end": "3238470"
  },
  {
    "text": "And so we need to do two\nt calls to this lemma. We will eliminate all messages.",
    "start": "3238470",
    "end": "3244010"
  },
  {
    "text": "Then there's zero communication. Then the best you could hope\nto do is by flipping a coin.",
    "start": "3244010",
    "end": "3256220"
  },
  {
    "start": "3256220",
    "end": "3263630"
  },
  {
    "text": "Maybe you're worse than that. But the probability of error\nhas to be at least 1/2.",
    "start": "3263630",
    "end": "3269630"
  },
  {
    "text": "So we'll either get\na contradiction. Or we're going to set things up\nso the error is, at most, 1/3.",
    "start": "3269630",
    "end": "3275060"
  },
  {
    "text": "And, therefore, this will\nprove that t has to be large. So you couldn't eliminate\nall the messages.",
    "start": "3275060",
    "end": "3281750"
  },
  {
    "text": "Anyway, we'll see\nthat in a moment. ",
    "start": "3281750",
    "end": "3286890"
  },
  {
    "text": "So we have a setup like this.  And in our case,\nwith this picture,",
    "start": "3286890",
    "end": "3295490"
  },
  {
    "text": "there is an asymmetry\nbetween Alice and Bob. I mean, yeah, the picture\nis nice and clean. But in reality, this has to\nrepresent a colored predecessor",
    "start": "3295490",
    "end": "3303320"
  },
  {
    "text": "problem. So in reality, Bob\nis a data structure and is not very smart,\njust does random access.",
    "start": "3303320",
    "end": "3310040"
  },
  {
    "text": "Alice, we don't know,\ncould be very smart. And Alice just\nhas a single word.",
    "start": "3310040",
    "end": "3318089"
  },
  {
    "text": "So there's an asymmetry\nbetween Alice and Bob. So when we eliminate a\nmessage from Alice to Bob, it's going to be\ndifferent from eliminating",
    "start": "3318090",
    "end": "3324380"
  },
  {
    "text": "a message from Bob to Alice. This f to the k\nthing here is going to have to be\ndifferent when we're",
    "start": "3324380",
    "end": "3331460"
  },
  {
    "text": "doing an Alice to Bob message,\nversus doing a Bob to Alice message. And that's where we're\ngoing to get a min.",
    "start": "3331460",
    "end": "3339440"
  },
  {
    "text": "When we go from Alice to\nBob, we're going to be, essentially, contributing\nto this term. When we go Bob to\nAlice, we're going",
    "start": "3339440",
    "end": "3344719"
  },
  {
    "text": "to be contributing to this\nterm, I think, or the reverse. We'll find out in a second. ",
    "start": "3344719",
    "end": "3352230"
  },
  {
    "text": "So let's do first Alice\nto Bob, because that's",
    "start": "3352230",
    "end": "3369170"
  },
  {
    "text": "the first type of message\nwe need to eliminate. So let's suppose-- now, as\nwe eliminate things, w and n",
    "start": "3369170",
    "end": "3379130"
  },
  {
    "text": "are going to decrease. So I'm going to\nsuppose at this point,",
    "start": "3379130",
    "end": "3385110"
  },
  {
    "text": "Alice's input has\nw prime bits left.",
    "start": "3385110",
    "end": "3391460"
  },
  {
    "text": "Initially, w prime is w. But I want to do the\ngeneric case so I don't have to repeat anything. ",
    "start": "3391460",
    "end": "3398970"
  },
  {
    "text": "Here's the concept. Remember, we're\nproving a lower bound. We get to set up the set of\nelements however we want.",
    "start": "3398970",
    "end": "3406020"
  },
  {
    "text": "We're going to\ndefine a distribution on the set of elements. ",
    "start": "3406020",
    "end": "3411619"
  },
  {
    "text": "And we're going to\ndo that by breaking",
    "start": "3411620",
    "end": "3417290"
  },
  {
    "text": "this input, w prime bits,\ninto a lot of pieces.",
    "start": "3417290",
    "end": "3423590"
  },
  {
    "start": "3423590",
    "end": "3435340"
  },
  {
    "text": "Alice's input,\nyou think of as x.  Don't necessarily\nwant to call it x.",
    "start": "3435340",
    "end": "3441890"
  },
  {
    "text": "Well, sure, we can call it x. There it Is What I'd like to do is break\nthat input into chunks, x1 up",
    "start": "3441890",
    "end": "3450619"
  },
  {
    "text": "to xk. This is basically what\nround elimination tells me I should do. If I want to view my problem\nas an f to the k problem,",
    "start": "3450620",
    "end": "3457390"
  },
  {
    "text": "somehow my input is\nnot just one thing. It's k things. Well, in reality, the\ninput is a single word.",
    "start": "3457390",
    "end": "3464089"
  },
  {
    "text": "So I'm going to have to\nsplit it into sub words, in the usual way. Van Emde Boas would\nsplit it in half.",
    "start": "3464090",
    "end": "3470712"
  },
  {
    "text": "We're going to split\nit into more pieces, because we need to guarantee\nthat this error is small. We need k to be large for\nthis error to be small.",
    "start": "3470712",
    "end": "3479740"
  },
  {
    "text": "I claim this is the\ngood choice of k. And so now, this is x1,\nthis is x 2x, this is xk.",
    "start": "3479740",
    "end": "3488887"
  },
  {
    "text": "The low order bits are xk. The high order bits aer x1. Or the reverse, it\ndoesn't actually matter. ",
    "start": "3488887",
    "end": "3497470"
  },
  {
    "text": "So why is this a\ngood choice of k? Because if we then look\nat the error increase",
    "start": "3497470",
    "end": "3504250"
  },
  {
    "text": "we get from here,\nerror increase is square root of a divided by k.",
    "start": "3504250",
    "end": "3512630"
  },
  {
    "text": "So error increase,\nwhich is order a over k,",
    "start": "3512630",
    "end": "3520259"
  },
  {
    "text": "is going to be k is now this. So the a's cancel--",
    "start": "3520260",
    "end": "3525460"
  },
  {
    "text": "sorry, square root of a over k. A over k was the wrong analysis.",
    "start": "3525460",
    "end": "3530800"
  },
  {
    "text": "The square root of a over\nk is the correct bound. Still, the a's cancel,\nbecause the k has an a factor.",
    "start": "3530800",
    "end": "3537099"
  },
  {
    "text": "And so we get order\nsquare root of 1 over t squared, also\nknown as 1 over t.",
    "start": "3537100",
    "end": "3543550"
  },
  {
    "text": " This is good. There's a constant here.",
    "start": "3543550",
    "end": "3549410"
  },
  {
    "text": "And if I tune this\nconstant correct, I can make this\nconstant less than 1/3.",
    "start": "3549410",
    "end": "3555342"
  },
  {
    "text": "So if I start with a\nprotocol, let's say, that's completely correct-- you don't have to. You could start with one\nthat's correct with at least",
    "start": "3555342",
    "end": "3561418"
  },
  {
    "text": "probability 3/4 or something. But let's just say, for\nsimplicity, the initial data structure is completely correct.",
    "start": "3561418",
    "end": "3567630"
  },
  {
    "text": "If every time I do an\nelimination of a message, I guess I should set it\nto be 1/6 time's 1 over t,",
    "start": "3567630",
    "end": "3576190"
  },
  {
    "text": "and I do this 2 times\nt times, in the end the error will be only 1/3.",
    "start": "3576190",
    "end": "3582260"
  },
  {
    "text": "So I'll be correct\nwith 2/3 probability. So never mind the constants.",
    "start": "3582260",
    "end": "3587520"
  },
  {
    "text": "I can set this constant right\nso this is some epsilon times 1 over t. So after I do this 2 t\ntimes, I end up with an error",
    "start": "3587520",
    "end": "3594550"
  },
  {
    "text": "that's only epsilon, or\n2 epsilon, or whatever. So that would be\na contradiction.",
    "start": "3594550",
    "end": "3599880"
  },
  {
    "text": "So that's why this\nis a good choice. I'm basically balancing the\nerror I get from every message elimination. I want them all to\nbe order 1 over t",
    "start": "3599881",
    "end": "3606730"
  },
  {
    "text": "so it's nice and balanced. That will give me the best\nlower bound, it turns out.",
    "start": "3606730",
    "end": "3612220"
  },
  {
    "text": "But what does this mean? I mean, somehow I have to have\nan f to the k problem, meaning,",
    "start": "3612220",
    "end": "3619510"
  },
  {
    "text": "really I should\nonly care about 1xi here, that all the interesting\nstuff is these bits.",
    "start": "3619510",
    "end": "3626530"
  },
  {
    "text": "But Alice doesn't\nknow which is i. Only Bob knows which is i. What does that mean?",
    "start": "3626530",
    "end": "3631839"
  },
  {
    "text": "Bob knows the set of elements\nin the data structure. So, basically, the\nset of elements--",
    "start": "3631840",
    "end": "3639220"
  },
  {
    "text": "maybe they all\ndiffer in these bits. Or maybe they all differ in\nthese bits, or these bits, or these bits, but\nonly one of these.",
    "start": "3639220",
    "end": "3646520"
  },
  {
    "text": "So that's a\ndistribution of inputs. There's one class of\ninputs where they all",
    "start": "3646520",
    "end": "3651579"
  },
  {
    "text": "differ in the x1 part. But then they're\nidentical for the rest. ",
    "start": "3651580",
    "end": "3657490"
  },
  {
    "text": "For each xi, there's\na set of inputs where they all differ in\nthe xi's, and nowhere else,",
    "start": "3657490",
    "end": "3662859"
  },
  {
    "text": "let's say. But Alice doesn't know\nwhich setting she is in.",
    "start": "3662860",
    "end": "3668590"
  },
  {
    "text": "Alice just knows x. And so Alice is\nkind of in trouble, because you can only\nsend a few bits.",
    "start": "3668590",
    "end": "3674320"
  },
  {
    "text": "You can only send a\nbits out of this thing. So you can't\ncommunicate very much.",
    "start": "3674320",
    "end": "3680230"
  },
  {
    "text": "Let's go over here.",
    "start": "3680230",
    "end": "3692975"
  },
  {
    "text": "I need the bound. I don't need the corollary. ",
    "start": "3692975",
    "end": "3699450"
  },
  {
    "text": "Let me draw a picture\nfor Alice, or for what the data looks like.",
    "start": "3699450",
    "end": "3705109"
  },
  {
    "text": " So there's some\ninitial segment, which",
    "start": "3705110",
    "end": "3711970"
  },
  {
    "text": "is shared by all elements. Then they all differ\nin this middle chunk.",
    "start": "3711970",
    "end": "3718140"
  },
  {
    "text": "And then they all have-- I don't really care what\nthey have after that.",
    "start": "3718140",
    "end": "3723180"
  },
  {
    "text": "So these are the elements\nin the data structure. And this is our usual\npicture of a binary tree.",
    "start": "3723180",
    "end": "3730859"
  },
  {
    "text": "Except, I didn't draw it binary. I drew it with some\nbranching factor so that the height of this\ntree is theta at squared.",
    "start": "3730860",
    "end": "3740820"
  },
  {
    "text": "So I set the base\nof my representation so that you branch whatever,\nw divided by at squared here.",
    "start": "3740820",
    "end": "3748916"
  },
  {
    "text": "That's my branching factor.  So cool, that's my picture.",
    "start": "3748916",
    "end": "3755810"
  },
  {
    "text": "And this is depth i. ",
    "start": "3755810",
    "end": "3763400"
  },
  {
    "text": "So Bob knows this picture. Bob knows what all the\nelements are so it can build this picture or whatever.",
    "start": "3763400",
    "end": "3769220"
  },
  {
    "text": "Bob knows which is the relevant\ndepth that they differ. But in the lower\nbound, we're going",
    "start": "3769220",
    "end": "3774530"
  },
  {
    "text": "to say a is chosen\nuniformly at random. So Alice has no idea\nwhich bits to send.",
    "start": "3774530",
    "end": "3781099"
  },
  {
    "text": "And so probably, Alice is\ngoing to say, oh, here, I know these bits.",
    "start": "3781100",
    "end": "3786170"
  },
  {
    "text": "But Bob already knew those bits. So Bob learned nothing. And so that's why you\ncan eliminate the round. That's the intuition, anyway.",
    "start": "3786170",
    "end": "3792740"
  },
  {
    "text": "The proof is, well, you just\napply round elimination. You see that the problem now\nbecomes to compute predecessor",
    "start": "3792740",
    "end": "3800779"
  },
  {
    "text": "on this node. Just like in fusion tries,\nat every step of the way, the hard part was to compute\npredecessor at the node.",
    "start": "3800780",
    "end": "3808710"
  },
  {
    "text": "Here, if Bob is allowed\nto do computation, then, really, Alice\njust needs to say,",
    "start": "3808710",
    "end": "3815869"
  },
  {
    "text": "what are the things here? Or together, Alice\nand Bob somehow have to figure out, what is the\npredecessor at this node of xi?",
    "start": "3815870",
    "end": "3823460"
  },
  {
    "text": "Which way the query\ngoes, which could be in between one of\nthese, that is xi. The rest of the\nxj's don't matter.",
    "start": "3823460",
    "end": "3831650"
  },
  {
    "text": "Only xi matters. And so the problem reduces to\ncomputing predecessor here. And that matches the\ndefinition of f to the k.",
    "start": "3831650",
    "end": "3839280"
  },
  {
    "text": "So we have successfully set\nup an f to the k problem. The only thing you need to do\nto solve the overall predecessor",
    "start": "3839280",
    "end": "3845330"
  },
  {
    "text": "problem is to find your\npredecessor in the node, because there's only one element\nwithin each subtree that's",
    "start": "3845330",
    "end": "3851480"
  },
  {
    "text": "enough to figure out\nyour overall predecessor. ",
    "start": "3851480",
    "end": "3861900"
  },
  {
    "text": "OK, depth i, at squared, I guess\nyou can think of this as y.",
    "start": "3861900",
    "end": "3871180"
  },
  {
    "text": "That's the part that Bob knows. These are, in some sense,\nxi up to xk minus 1.",
    "start": "3871180",
    "end": "3879609"
  },
  {
    "text": "And this is why we had to say\nover here that Bob already knew xi up to xi minus\n1, because Bob already",
    "start": "3879610",
    "end": "3888670"
  },
  {
    "text": "knows that the shared\nprefix among all the items-- sorry, not minus 1, i minus i.",
    "start": "3888670",
    "end": "3895056"
  },
  {
    "text": " And so all the content is\nhere in this node, which is y.",
    "start": "3895056",
    "end": "3902990"
  },
  {
    "text": "And so it reduces to a regular\npredecessor problem, which is what f will always denote,\ncolored predecessor of xi, y.",
    "start": "3902990",
    "end": "3911595"
  },
  {
    "text": "Cool.  OK, what happens here\nin terms of n and w?",
    "start": "3911595",
    "end": "3918599"
  },
  {
    "text": "We have a smaller problem here. We threw away all this stuff. What got reduced is\nour word size for here.",
    "start": "3918600",
    "end": "3928180"
  },
  {
    "text": "We started with something\nof size w prime. And now, we end\nup with something",
    "start": "3928180",
    "end": "3933460"
  },
  {
    "text": "of this size, which\nwas W prime divided by at squared up to theta.",
    "start": "3933460",
    "end": "3941769"
  },
  {
    "text": "So this reduction reduces--",
    "start": "3941770",
    "end": "3947260"
  },
  {
    "text": "or this round elimination\nreduces w prime to w prime, divided by\nat squared, theta that.",
    "start": "3947260",
    "end": "3955030"
  },
  {
    "start": "3955030",
    "end": "3961180"
  },
  {
    "text": "I think that's all I need\nto say at this point. The claim is that this picture\nis kind of like Van Emde",
    "start": "3961180",
    "end": "3969576"
  },
  {
    "text": "Boas in the following sense. Van Emde Boas is,\nessentially, binary searching on which\nlevel matters.",
    "start": "3969576",
    "end": "3977350"
  },
  {
    "text": "If it goes too low,\nthings are empty. If it goes too high,\nthere's too many items. So it's binary searching\nfor that critical point,",
    "start": "3977350",
    "end": "3983470"
  },
  {
    "text": "where you basically have\na node and nothing else. And that's why it took log w.",
    "start": "3983470",
    "end": "3990550"
  },
  {
    "text": "So here, one level matters. And the goal is to\nfigure out which one.",
    "start": "3990550",
    "end": "3996190"
  },
  {
    "text": "And it's not exactly\nbinary search here. We're losing a larger factor,\nat squared, at each step. So we're not reducing\nw to w over 2,",
    "start": "3996190",
    "end": "4003300"
  },
  {
    "text": "like we did with Van Emde Boas. But this is why we're\nlosing a little bit. We reduce by a\nfactor of at squared.",
    "start": "4003300",
    "end": "4009430"
  },
  {
    "text": "So it's kind of like the\nVan Emde Boas upper bound. But here, we're setting up a\nlower bound picture so that--",
    "start": "4009430",
    "end": "4015240"
  },
  {
    "text": "this is still an arbitrary\npredecessor problem. But figuring out which level\nmatters, that's tricky.",
    "start": "4015240",
    "end": "4020352"
  },
  {
    "text": "And you really\ncan't do much better than Van Emde Boas to\nstyle a binary search. OK, maybe you can do at\nsquared wave binary search,",
    "start": "4020352",
    "end": "4028740"
  },
  {
    "text": "instead of binary search. So that was eliminating a\nmessage from Alice to Bob.",
    "start": "4028740",
    "end": "4034340"
  },
  {
    "text": "Eliminating a message\nfrom Bob to Alice is going to look\nlike fusion trees. That's the cool thing.",
    "start": "4034340",
    "end": "4041520"
  },
  {
    "text": "So let's do that. ",
    "start": "4041520",
    "end": "4055240"
  },
  {
    "text": "Next page. ",
    "start": "4055240",
    "end": "4075490"
  },
  {
    "text": "OK, let's suppose--\nso this is going to get slightly confusing\nnotationally, because you",
    "start": "4075490",
    "end": "4082590"
  },
  {
    "text": "have to reverse a and b. The picture I set up over here,\nand for the round elimination",
    "start": "4082590",
    "end": "4088829"
  },
  {
    "text": "lamma f to the k, and\nround elimination lamma, are all phrased in\nterms of eliminating",
    "start": "4088830",
    "end": "4095130"
  },
  {
    "text": "the Alice to Bob message. You've got to invert everything. So we're going to get square\nroot of b over k error",
    "start": "4095130",
    "end": "4100949"
  },
  {
    "text": "if I don't relabel things. So you can restate this,\nif Bob speaks first, and then Alice\nspeaks next, I get",
    "start": "4100950",
    "end": "4107339"
  },
  {
    "text": "square root of b over k error. The F to the k problem is\nnow that Bob has k inputs.",
    "start": "4107340",
    "end": "4114330"
  },
  {
    "text": "Maybe call them y1 to yk. Alice has an input\nx and the integer i.",
    "start": "4114330",
    "end": "4120549"
  },
  {
    "text": "So now Alice, the\nquerier, knows what i is. But Bob doesn't. The data structure\ndoesn't know it.",
    "start": "4120550",
    "end": "4127200"
  },
  {
    "text": "So it just reversed everything. So let me state it over here. Bob has input.",
    "start": "4127200",
    "end": "4135330"
  },
  {
    "text": "Now, in general, what Bob\nknows is a bunch of integers, n integers. In general, n prime\nintegers, because n",
    "start": "4135330",
    "end": "4141270"
  },
  {
    "text": "is also going to increase. And let's say each of\nthem is w prime bits.",
    "start": "4141270",
    "end": "4149970"
  },
  {
    "text": "That's what Bob knows. That's y. ",
    "start": "4149970",
    "end": "4156028"
  },
  {
    "text": "So what do we have to do to\nphrase an f to the k problem? Well, just like this, we've\ngot to break that input into bt",
    "start": "4156029",
    "end": "4163839"
  },
  {
    "text": "squared equal-sized chunks. So let's just think\nabout what that means. ",
    "start": "4163840",
    "end": "4184969"
  },
  {
    "text": "So it's going to be y1 up to yk.",
    "start": "4184970",
    "end": "4190499"
  },
  {
    "text": "k is theta bt squared. Again, we want bt\nsquared, because then you plug it into this\nroot b over k formula.",
    "start": "4190499",
    "end": "4197909"
  },
  {
    "text": "And you get that\nthe error increase",
    "start": "4197910",
    "end": "4203430"
  },
  {
    "text": "is order 1 over t,\nwhich is what we need to do t round eliminations.",
    "start": "4203430",
    "end": "4211179"
  },
  {
    "text": "So before, our input\nwas a single word. Now, our input is a\nwhole bunch of integers.",
    "start": "4211180",
    "end": "4216880"
  },
  {
    "text": "So it's natural to split it\nup into different integers. ",
    "start": "4216880",
    "end": "4224487"
  },
  {
    "text": "Here's how I'm going to do that. ",
    "start": "4224487",
    "end": "4230000"
  },
  {
    "text": "I'll just draw the\npicture over here. So this was the Alice\nto Bob elimination.",
    "start": "4230000",
    "end": "4238020"
  },
  {
    "text": "Now, we'll do the\nBob to Alice picture. ",
    "start": "4238020",
    "end": "4244980"
  },
  {
    "text": "So what I'd like to do is\nsplit up all the inputs. What's the natural\nway to do that? Well, have a tree at the top.",
    "start": "4244980",
    "end": "4253486"
  },
  {
    "text": "Let's just make\nit a binary tree. So I'm drawing the usual\npicture I draw when I draw a bunch of elements.",
    "start": "4253486",
    "end": "4260960"
  },
  {
    "text": "And then there's some\nelements left over in each of these subtrees. ",
    "start": "4260960",
    "end": "4271710"
  },
  {
    "text": "Each of these is a\npredecessor problem. I'm constraining the\ninputs to sort of differ",
    "start": "4271710",
    "end": "4279705"
  },
  {
    "text": "a lot in the beginning,\nin the early bits, the most significant bits. This is the most significant,\nnext most significant,",
    "start": "4279705",
    "end": "4285226"
  },
  {
    "text": "and so on, bits. I want the number of leaves\nhere to be theta bt squared--",
    "start": "4285226",
    "end": "4291822"
  },
  {
    "text": "or not leaves, but number\nof intermediate nodes here. ",
    "start": "4291822",
    "end": "4296940"
  },
  {
    "text": "And, therefore, there are\ntheta bt squared subtrees. And I want to set up the n items\nto be uniformly distributed.",
    "start": "4296940",
    "end": "4304490"
  },
  {
    "text": "So each of these has n\ndivided by bt squared items.",
    "start": "4304490",
    "end": "4310920"
  },
  {
    "text": "So we used a few\nbits up top here. How many bits was this,\njust log of bt squared?",
    "start": "4310920",
    "end": "4318639"
  },
  {
    "text": "So if you look at one\nof these subproblems, we have reduced w slightly, but\nonly by this additive amount.",
    "start": "4318639",
    "end": "4325230"
  },
  {
    "text": "It basically won't matter. The big thing we\nchanged is we used to have n items to search among,\nor this is n prime, I guess.",
    "start": "4325230",
    "end": "4331950"
  },
  {
    "text": "Now, we have and divided\nby bt squared items. So we reduced n substantially.",
    "start": "4331950",
    "end": "4337989"
  },
  {
    "text": "And this is what\nfusion trees do, right? They look at the root\nfirst, and say, OK, look, I can distinguish w to the\nepsilon, different things",
    "start": "4337990",
    "end": "4345210"
  },
  {
    "text": "in constant time. Here, it's on w to the epsilon. But it's b to bt squared. And we haven't figured\nout what bt are yet.",
    "start": "4345210",
    "end": "4351929"
  },
  {
    "text": "I mean, b is w. So that's close to a w\nfactor, w folds search.",
    "start": "4351930",
    "end": "4359699"
  },
  {
    "text": "And then you determine, am I in\nthis subtree, or this subtree? This is exactly what\nfusion trees do.",
    "start": "4359700",
    "end": "4365319"
  },
  {
    "text": "But we're setting up\na lower bound instance where that is the\nright thing to do, where you have to know\nwhat the early bits are",
    "start": "4365319",
    "end": "4372510"
  },
  {
    "text": "before you can figure out\nwhich subtree you're in.",
    "start": "4372510",
    "end": "4377639"
  },
  {
    "text": "Now, reverse roles. Alice knows what these bits are.",
    "start": "4377640",
    "end": "4384666"
  },
  {
    "text": "The data structure\nof relevance-- let's suppose you fit\nhere, because you are 0111 in the beginning.",
    "start": "4384666",
    "end": "4390540"
  },
  {
    "text": "This is our yi problem. Alice knows what i is.",
    "start": "4390540",
    "end": "4396060"
  },
  {
    "text": "Alice knows what those\nleading bits are. Bob doesn't. And Bob is speaking first.",
    "start": "4396060",
    "end": "4402090"
  },
  {
    "text": "So Bob could try to summarize\nthis entire data structure. But there's basically no hope. Bob needs to know, what\nare those early bits?",
    "start": "4402090",
    "end": "4409180"
  },
  {
    "text": "So the first message from\nBob is going to be useless. Alice can then send the bits. And then you can\nrestrict your problem",
    "start": "4409180",
    "end": "4414293"
  },
  {
    "text": "to a regular predecessor\nproblem in here. And so you've eliminated\nthis sort of root node. Your entire problem is a\npredecessor problem in here.",
    "start": "4414293",
    "end": "4420940"
  },
  {
    "text": "So, again, we have an f\nto the k style problem. We reduce to a predecessor\nproblem on a smaller--",
    "start": "4420940",
    "end": "4427680"
  },
  {
    "text": "in this case, y\nand x are reversed. But we end up with\na smaller problem,",
    "start": "4427680",
    "end": "4432840"
  },
  {
    "text": "mainly in the fact\nthat n got smaller. So let me go back to this board.",
    "start": "4432840",
    "end": "4440010"
  },
  {
    "text": "What happens is that\nwe reduce n prime",
    "start": "4440010",
    "end": "4445489"
  },
  {
    "text": "to n prime, divided\nby bt squared.",
    "start": "4445490",
    "end": "4450810"
  },
  {
    "text": " There's theta.",
    "start": "4450810",
    "end": "4457020"
  },
  {
    "text": "We also reduce w prime. w prime becomes w prime,\nminus log bt squared.",
    "start": "4457020",
    "end": "4467050"
  },
  {
    "text": "OK, but in particular,\nthis is going to be at least w prime\nover 2 most of the time,",
    "start": "4467050",
    "end": "4473910"
  },
  {
    "text": "till the very end. And over here, we're reducing\nw prime by a big factor,",
    "start": "4473910",
    "end": "4478950"
  },
  {
    "text": "something bigger\nthan a constant. So we don't really care\nabout losing a factor of 2, because we alternate\nbetween these.",
    "start": "4478950",
    "end": "4484519"
  },
  {
    "text": "And so a factor of 2 just\nfalls into the theta. So it's going to be at least\nthat, as long as w prime is,",
    "start": "4484520",
    "end": "4493140"
  },
  {
    "text": "I don't know, at least log-- ",
    "start": "4493140",
    "end": "4500570"
  },
  {
    "text": "log w would be enough. ",
    "start": "4500570",
    "end": "4507610"
  },
  {
    "text": "Yeah, this is log w. t squared is going to\nbe, at most, log w.",
    "start": "4507610",
    "end": "4512660"
  },
  {
    "text": "So this is going to be\nlog w, plus log log w.",
    "start": "4512660",
    "end": "4518045"
  },
  {
    "text": "Log log w goes away. What is t? The whole point is to\nprove a lower bound on t.",
    "start": "4518045",
    "end": "4523550"
  },
  {
    "text": "But we know from an\nupper bound perspective, t is, at most, log w,\nbecause Van Emde Boas exists.",
    "start": "4523550",
    "end": "4528655"
  },
  {
    "text": "So we're never going to prove a\nlower bound bigger than log w. So whatever t is going\nto be is, at most, log w.",
    "start": "4528655",
    "end": "4534680"
  },
  {
    "text": "So this is just log w. So you're fine.",
    "start": "4534680",
    "end": "4539880"
  },
  {
    "text": "But at some point,\nwe have to stop. We start with some w and n.",
    "start": "4539880",
    "end": "4545000"
  },
  {
    "text": "n prime is racing\ndown at this rate. w prime is racing\ndown at this rate.",
    "start": "4545000",
    "end": "4551050"
  },
  {
    "text": "When w prime gets down to\nlog w, then we're in trouble.",
    "start": "4551050",
    "end": "4556820"
  },
  {
    "text": "If n prime gets down to 2,\n1, 0, one of those constants,",
    "start": "4556820",
    "end": "4562739"
  },
  {
    "text": "when n prime gets down to a\nconstant, we're in trouble. You can no longer\nevenly divide things.",
    "start": "4562740",
    "end": "4568120"
  },
  {
    "text": "So when does that happen? This is where we're going\nto get a lower bound.",
    "start": "4568120",
    "end": "4573290"
  },
  {
    "text": "So I guess we can\ngo back over here. ",
    "start": "4573290",
    "end": "4580060"
  },
  {
    "text": "So if you do a\nround elimination, you decrease w prime\nby this factor.",
    "start": "4580060",
    "end": "4586130"
  },
  {
    "text": "And you decrease n\nprime by this factor, both of these in sequence. Then you repeat it.",
    "start": "4586130",
    "end": "4594020"
  },
  {
    "text": "So we have to stop when\nw prime hits log w,",
    "start": "4594020",
    "end": "4603620"
  },
  {
    "text": "or when n prime\nhits 2, let's say.",
    "start": "4603620",
    "end": "4610134"
  },
  {
    "text": "This is not really going\nto make a difference. You can also think that as 2. ",
    "start": "4610134",
    "end": "4616699"
  },
  {
    "text": "So, in fact, I'll just\ndo that, just to clean the arithmetic a little bit.",
    "start": "4616700",
    "end": "4622560"
  },
  {
    "text": " Now, if we succeed in\neliminating all the messages,",
    "start": "4622560",
    "end": "4630660"
  },
  {
    "text": "we get a contradiction,\nbecause we set up our errors to add up to only 1/3.",
    "start": "4630660",
    "end": "4635760"
  },
  {
    "text": "And we know the error\nhas to be at least 1/2, if you eliminate all the\nmessages, which means we didn't",
    "start": "4635760",
    "end": "4641070"
  },
  {
    "text": "eliminate all the messages. Now, we will not eliminate all\nthe messages if t is large.",
    "start": "4641070",
    "end": "4648719"
  },
  {
    "text": "So when would we eliminate\nall the messages? Let's compute that. And then t has to be\nat least that big.",
    "start": "4648720",
    "end": "4657210"
  },
  {
    "text": "t has to be greater than\nthe point at which we would eliminate all the messages. Otherwise, we would\nget a contradiction.",
    "start": "4657210",
    "end": "4664389"
  },
  {
    "text": "So this is where we get a\nmin, which is kind of cool, because we have to stop\nwhen w prime gets too small,",
    "start": "4664390",
    "end": "4670800"
  },
  {
    "text": "or when n prime gets too\nsmall, whichever happens first. And so it's going to be a\nmin of the thing relating",
    "start": "4670800",
    "end": "4679170"
  },
  {
    "text": "to w, which is going to be\nlog base at squared of w,",
    "start": "4679170",
    "end": "4686280"
  },
  {
    "text": "because we're reducing w\nby a factor of at squared in each step. So that's when it's\ngoing to bottom out.",
    "start": "4686280",
    "end": "4691440"
  },
  {
    "text": "And then there's the\nthing for n, which is log base bt squared of n.",
    "start": "4691440",
    "end": "4697437"
  },
  {
    "text": "That's when n will\nbottom out, because we're reducing by a factor of\nbt square at each step. ",
    "start": "4697437",
    "end": "4704010"
  },
  {
    "text": "So that's the bound we get. Now, it doesn't look quite\nlike the bound that we want,",
    "start": "4704010",
    "end": "4712960"
  },
  {
    "text": "which is this very simple log,\nbase of w, log base b of n. But I claim that it's\nbasically the same thing.",
    "start": "4712960",
    "end": "4718800"
  },
  {
    "start": "4718800",
    "end": "4730349"
  },
  {
    "text": "Why? I got to cheat here, speed\nthings up a little bit. I claim that at squared\nis order a cubed.",
    "start": "4730350",
    "end": "4741090"
  },
  {
    "text": "Why? Because a is at least log n.",
    "start": "4741090",
    "end": "4746480"
  },
  {
    "text": "Remember, a is log of space.  You have to store the data.",
    "start": "4746480",
    "end": "4751800"
  },
  {
    "text": "So you need at least\nn words of space. a is log of that. So it's got to be\nat least log n.",
    "start": "4751800",
    "end": "4757200"
  },
  {
    "text": "And, furthermore,\nt is at most log n. ",
    "start": "4757200",
    "end": "4762910"
  },
  {
    "text": "Why? Because there is a predecessor\nor data structure that runs in log n time\noperation, namely balance binary search trees.",
    "start": "4762910",
    "end": "4769500"
  },
  {
    "text": "There's a theta here,\norder, big O. But at squared is, at most, a cubed.",
    "start": "4769500",
    "end": "4777360"
  },
  {
    "text": "On the other hand, this thing,\nbt square, is order b cubed.",
    "start": "4777360",
    "end": "4785190"
  },
  {
    "text": "Why? Because t is order\nlog w. b is w.",
    "start": "4785190",
    "end": "4796460"
  },
  {
    "text": "That's the definition of b. T is order log w, because\nVan Emde Boas exists. And so this is actually, at\nmost, w times log squared w.",
    "start": "4796460",
    "end": "4805230"
  },
  {
    "text": "But, in particular,\nit's at most w cubed, because we don't care about that\nconstant because it's in a log.",
    "start": "4805230",
    "end": "4811336"
  },
  {
    "text": "So it just comes out. It's a factor of\n1/3 or whatever. And so this is the same\nthing as log base a of w,",
    "start": "4811336",
    "end": "4821030"
  },
  {
    "text": "log base b of n, minned. And that's the nice,\nsymmetric bound",
    "start": "4821030",
    "end": "4826190"
  },
  {
    "text": "that you get our of round\nelimination, pretty cool. Now, if you look\nin the notes, I'll",
    "start": "4826190",
    "end": "4831690"
  },
  {
    "text": "just mentioned this\nbriefly, there's a couple of more pages that\ngive you a little bit of flavor",
    "start": "4831690",
    "end": "4836780"
  },
  {
    "text": "of what the round elimination\nand that vague proof sketch, which gave the wrong answer by\na square root, really means.",
    "start": "4836780",
    "end": "4844980"
  },
  {
    "text": "We said, oh, Alice\ncan only communicate, in some sense, a\nover k bits about xi.",
    "start": "4844980",
    "end": "4854510"
  },
  {
    "text": "And you can formalize that by\ntalking about distributions of inputs, and talking about\nthe expected amount of entropy",
    "start": "4854510",
    "end": "4864230"
  },
  {
    "text": "of xi communicated by\nthat first message.",
    "start": "4864230",
    "end": "4871280"
  },
  {
    "text": "And so it's very simple\ndefinitions of entropy, and shared information,\nbut just in terms of probabilistic quantities.",
    "start": "4871280",
    "end": "4877130"
  },
  {
    "text": "And it at least\ngives you a sense of how you might prove\nsomething like this. Whereas talking about\ninformation about something",
    "start": "4877130",
    "end": "4882920"
  },
  {
    "text": "is kind of vague,\ntalking about entropy, which is about sum\nof probabilities times log of probabilities is\na clean, probabilistic notion.",
    "start": "4882920",
    "end": "4890420"
  },
  {
    "text": "So it becomes a purely\nprobabilistic statements about error probabilities.",
    "start": "4890420",
    "end": "4896510"
  },
  {
    "text": "And that's how you argue this. But even these notes\ndo not give a proof. They just give a hint of how\nyou formalize what this means,",
    "start": "4896510",
    "end": "4903199"
  },
  {
    "text": "or what the proof sketch means. And it's several pages\nto actually prove it,",
    "start": "4903200",
    "end": "4908340"
  },
  {
    "text": "so a bit beyond this class. But once you have it--\nbecause it's very clean, I'd say kind of beautiful\nlower bound, not quite",
    "start": "4908340",
    "end": "4916010"
  },
  {
    "text": "the right answer, but\nup to log log factors, the right answer\nfor predecessor. So that's the end of\npredecessor in this class.",
    "start": "4916010",
    "end": "4924250"
  },
  {
    "start": "4924250",
    "end": "4924788"
  }
]