[
  {
    "start": "0",
    "end": "110000"
  },
  {
    "text": "[SQUEAKING][RUSTLING][CLICKING] ",
    "start": "0",
    "end": "12650"
  },
  {
    "text": "ERIK DEMAINE: Today we're\ngoing to, in one lecture, cover an entire field, which\nis computational complexity.",
    "start": "12650",
    "end": "19390"
  },
  {
    "text": "It's sort of-- it\nmeets algorithms in an interesting way, which\nis, algorithms is mostly",
    "start": "19390",
    "end": "25779"
  },
  {
    "text": "about showing how to\nsolve problems well and showing that you can\nsolve a problem well. And computational complexity\nis more about the lower bound",
    "start": "25780",
    "end": "33250"
  },
  {
    "text": "side, proving that\nyou can't prove-- you can't solve a\nproblem very well, you can't find a good\nalgorithm to solve it.",
    "start": "33250",
    "end": "39912"
  },
  {
    "text": "We've seen a little bit about\nlower bounds several lectures ago, proving search and\nsorting lower bounds",
    "start": "39912",
    "end": "45809"
  },
  {
    "text": "in a bounded branching\ndecision tree model.",
    "start": "45810",
    "end": "51070"
  },
  {
    "text": "But these are much stronger\nnotions of badness. This is not about n versus n\nlog n or constant versus log n.",
    "start": "51070",
    "end": "58370"
  },
  {
    "text": "This is about polynomial\nversus exponential, which has been the sort\nof bread-and-butter model",
    "start": "58370",
    "end": "65170"
  },
  {
    "text": "in this class. Polynomial is a\ngood running time, and we're always\nstriving for that. Exponential is usually\npretty trivial to get.",
    "start": "65170",
    "end": "72220"
  },
  {
    "text": "And so we're going to talk\nabout some different-- they're called\ncomplexity classes that talk about this\nissue and different ways",
    "start": "72220",
    "end": "78460"
  },
  {
    "text": "to prove hardness. This is a pretty\nhigh-level lecture, so you're not going\nto be expected to be able to prove hardness.",
    "start": "78460",
    "end": "84850"
  },
  {
    "text": "But you'll get a flavor\nof what it's like, and this will segue nicely\ninto other follow-on classes, which is-- we're at pretty\nmuch the end of 006,",
    "start": "84850",
    "end": "92290"
  },
  {
    "text": "so natural to talk about what\nother things you might study.",
    "start": "92290",
    "end": "97450"
  },
  {
    "text": "One result we'll prove today\nis that most problems actually have no algorithm, which\nis kind of shocking,",
    "start": "97450",
    "end": "104770"
  },
  {
    "text": "and lots of other fun things. So let's get started\nwith the notion of P.",
    "start": "104770",
    "end": "110710"
  },
  {
    "text": "This is the set of all problems\nsolvable in polynomial time. ",
    "start": "110710",
    "end": "121110"
  },
  {
    "text": "We talked about\nwhat polynomial time means a bunch last lecture. So just recall that\npolynomial time",
    "start": "121110",
    "end": "128060"
  },
  {
    "text": "means polynomial in the problem\nsize, which I'll denote as n",
    "start": "128060",
    "end": "134540"
  },
  {
    "text": "here, the number of\nwords in your input.",
    "start": "134540",
    "end": "141924"
  },
  {
    "start": "141924",
    "end": "148560"
  },
  {
    "text": "OK, so these are the problems\nthat are efficiently solvable. P is the set of all of them.",
    "start": "148560",
    "end": "155910"
  },
  {
    "text": "And for contrast, EXP is the\nset of all problems solvable in exponential time.",
    "start": "155910",
    "end": "162926"
  },
  {
    "text": "It's the problems solvable\nin exponential time.",
    "start": "162926",
    "end": "173879"
  },
  {
    "text": "Exponential here\nmeans something like 2 to the n to the constant.",
    "start": "173880",
    "end": "180135"
  },
  {
    "text": "That's one reasonable\ndefinition of exponential, so just the exponentiation\nof this-- of polynomial.",
    "start": "180135",
    "end": "186990"
  },
  {
    "text": "So as you might expect, most-- every problem that we've\ntalked about in this class",
    "start": "186990",
    "end": "193000"
  },
  {
    "text": "so far can be solved in\nexponential time rather easily. And algorithms, in\nsome sense, is about",
    "start": "193000",
    "end": "198240"
  },
  {
    "text": "distinguishing these two,\nwhich problems are in P versus are in say EXP minus P.",
    "start": "198240",
    "end": "204890"
  },
  {
    "text": "So to formalize\nthis a little bit, I'm going to draw\na picture, which",
    "start": "204890",
    "end": "212970"
  },
  {
    "text": "is a bit of a\nsimplification of reality, but for the purposes of\nthis class will suffice,",
    "start": "212970",
    "end": "218112"
  },
  {
    "text": "and I think is a\nreally helpful way to think about things, which\nis to have a big axis for--",
    "start": "218112",
    "end": "223740"
  },
  {
    "text": "a single axis for, how\nhard is your problem, what is the difficulty\nof solving your problem?",
    "start": "223740",
    "end": "230189"
  },
  {
    "text": "And I want to be sure to leave-- so the easiest\nproblems are over here. And each problem is\na dot on this axis.",
    "start": "230190",
    "end": "237660"
  },
  {
    "text": "Hardest problems are\nway down the line. And I want to make sure to leave\nenough space for all the things",
    "start": "237660",
    "end": "243930"
  },
  {
    "text": "that I care about. So P, I'm just going to\ncall this segment up front.",
    "start": "243930",
    "end": "250470"
  },
  {
    "text": "And then I'm going\nto have a bigger thing for exponential time.",
    "start": "250470",
    "end": "257148"
  },
  {
    "text": " So this is just to say that\nP is nested inside EXP.",
    "start": "257149",
    "end": "264384"
  },
  {
    "text": "Every problem that can be\nsolved in polynomial time can also be solved\nin exponential time because polynomial is less\nthan or equal to exponential.",
    "start": "264385",
    "end": "270740"
  },
  {
    "text": "These are just upper bounds. Being an EXP means you're\nsomewhere from this line",
    "start": "270740",
    "end": "276270"
  },
  {
    "text": "to the left. Being in P means you're\nsomewhere from this line to the left, in\nterms of difficulty.",
    "start": "276270",
    "end": "281550"
  },
  {
    "text": "But formally, we would write\nP is contained in EXP as sets.",
    "start": "281550",
    "end": "288120"
  },
  {
    "text": "In fact, they're also known to\nbe different from each other. There are problems that can be\nsolved in exponential time that",
    "start": "288120",
    "end": "295410"
  },
  {
    "text": "cannot be solved\nin polynomial time. For example-- I'll\nput that here, sure.",
    "start": "295410",
    "end": "302009"
  },
  {
    "start": "302010",
    "end": "309480"
  },
  {
    "text": "For example, n by n chess\nis in exponential time,",
    "start": "309480",
    "end": "318510"
  },
  {
    "text": "but not polynomial time. So what is the n\nby chess problem? This is, I give you\nan n by n chessboard,",
    "start": "318510",
    "end": "324960"
  },
  {
    "text": "and I describe to\nyou a position. Here's where all the\nwhite pieces are. Here's where all the\nblack pieces are.",
    "start": "324960",
    "end": "331530"
  },
  {
    "text": "You can have an arbitrary number\nof queens and bishops and pawns of each color, of\ncourse, up to n",
    "start": "331530",
    "end": "337020"
  },
  {
    "text": "squared of them so they\ndon't overlap each other. And I want to know, does\nwhite win from this position?",
    "start": "337020",
    "end": "342382"
  },
  {
    "text": "Let's say it's white to move. Can white win? And that problem can be\nsolved in an exponential time",
    "start": "342382",
    "end": "347700"
  },
  {
    "text": "by exploring the entire\ntree of all possible games. But it cannot-- but you can\nprove that it cannot be solved",
    "start": "347700",
    "end": "354120"
  },
  {
    "text": "in polynomial time. So that's a nice example. A more positive\nexample, so to speak,",
    "start": "354120",
    "end": "361630"
  },
  {
    "start": "360000",
    "end": "640000"
  },
  {
    "text": "is negative weight\ncycle detection. I guess it's literally negative,\nbut it's morally positive.",
    "start": "361630",
    "end": "368269"
  },
  {
    "start": "368269",
    "end": "373465"
  },
  {
    "text": "Negative weight cycle detection\nis the following problem. I give you a graph, a\ndirected graph with weights,",
    "start": "373465",
    "end": "378497"
  },
  {
    "text": "and I want to know, does\nit have a negative weight cycle, yes or no? And this problem is in?",
    "start": "378497",
    "end": "384520"
  },
  {
    "text": "AUDIENCE: P. ERIK DEMAINE: P, because we\nsaw a polynomial time algorithm for this. You run Bellman-Ford\non an augmented graph.",
    "start": "384520",
    "end": "391987"
  },
  {
    "text": "So this is an example of a\nproblem we know how to solve. This whole class\nis full of examples that we know how to\nsolve in polynomial time.",
    "start": "391987",
    "end": "398250"
  },
  {
    "text": "But this is a nice, non-trivial\nand succinct one to phrase.",
    "start": "398250",
    "end": "404550"
  },
  {
    "text": "It's also an example\nof a decision problem. A lot of-- basically all the\nproblems I'll talk about today",
    "start": "404550",
    "end": "409889"
  },
  {
    "text": "are decision problems, like\nwe talked about last class, meaning, the answer\nis just yes or no. Can white win from this\nposition, yes or no?",
    "start": "409890",
    "end": "417720"
  },
  {
    "text": "Is there a negative\nweight cycle, yes or no? Tetris we can also\nformulate as a problem.",
    "start": "417720",
    "end": "424950"
  },
  {
    "text": "This is a version of\nTetris that we might call perfect information Tetris. Suppose I give you\na Tetris board.",
    "start": "424950",
    "end": "432120"
  },
  {
    "text": "It has some garbage left\nover from your past playing, or maybe it started that way.",
    "start": "432120",
    "end": "437580"
  },
  {
    "text": "And I give you the sequence of\nn pieces that are going to come. And I want to\nknow, can I survive this sequence of n pieces?",
    "start": "437580",
    "end": "443940"
  },
  {
    "text": "Can you place each\nof these pieces as they fall such that\nyou never overflow",
    "start": "443940",
    "end": "449819"
  },
  {
    "text": "the top of the board\non an n by n board? This problem can be solved\nin exponential time.",
    "start": "449820",
    "end": "457850"
  },
  {
    "text": "But we don't know whether it can\nbe solved in polynomial time. ",
    "start": "457850",
    "end": "468412"
  },
  {
    "text": "We will talk about\nthat more in a moment. It's a problem that\nvery likely is not in P,",
    "start": "468412",
    "end": "473750"
  },
  {
    "text": "but we can't actually\nprove it yet. All right, so there's\none other class",
    "start": "473750",
    "end": "479778"
  },
  {
    "text": "I want to define at this point. And we'll get to\na fourth one also. But R is the class\nof all problems that",
    "start": "479778",
    "end": "487490"
  },
  {
    "text": "can be solved in finite time. R stands for finite. ",
    "start": "487490",
    "end": "503660"
  },
  {
    "text": "R stands for\nrecursive, actually. This is a notion\nby Church way back in the foundations of computing.",
    "start": "503660",
    "end": "509690"
  },
  {
    "text": "As we know, we write recursive\nalgorithms to solve problems. In the beginning, that\nwas the only way to do it. Now we have other\nways with loops.",
    "start": "509690",
    "end": "515487"
  },
  {
    "text": "But they're all effectively\nrecursion in the end. So R is all the problems\nthat can be solved",
    "start": "515487",
    "end": "520669"
  },
  {
    "text": "in finite time on any computer. So very general,\nthis should include everything we care about.",
    "start": "520669",
    "end": "527420"
  },
  {
    "text": "And it's bigger than\nEXP, but includes problems that take doubly\nexponential time or whatever.",
    "start": "527420",
    "end": "533750"
  },
  {
    "text": "So I will draw a region\nfor R. So everything--",
    "start": "533750",
    "end": "540330"
  },
  {
    "text": "it includes P. It includes EXP. And so we also have\ncontainment but not",
    "start": "540330",
    "end": "545580"
  },
  {
    "text": "equal R. There's, of course,\nmany classes in between. You could talk\nabout problems that",
    "start": "545580",
    "end": "551420"
  },
  {
    "text": "take double A exponential time,\nand that would have a thing in between here. Or there's also--\nbetween P and EXP",
    "start": "551420",
    "end": "557449"
  },
  {
    "text": "there's a lot of\ndifferent things. We will talk about one of them. But before we get to the\nfiner side of things,",
    "start": "557450",
    "end": "565310"
  },
  {
    "text": "let me talk in particular about\nR. So we have a nice example, we being computational\ncomplexity theory--",
    "start": "565310",
    "end": "574580"
  },
  {
    "text": "or I guess this is usually just\ncalled theoretical computer science-- has a problem.",
    "start": "574580",
    "end": "580250"
  },
  {
    "text": "And if you're interested\nin this, you can take 6041,",
    "start": "580250",
    "end": "589070"
  },
  {
    "text": "I think. That doesn't sound right. That's a probability. It'll come to me.",
    "start": "589070",
    "end": "594230"
  },
  {
    "start": "594230",
    "end": "602470"
  },
  {
    "text": "We have an explicit\nproblem that is not in R. So this class has been\nall about problems that",
    "start": "602470",
    "end": "609070"
  },
  {
    "text": "are in P. You have the number? AUDIENCE: 6045. ERIK DEMAINE: 6045, thank you. It's so close to this class.",
    "start": "609070",
    "end": "615339"
  },
  {
    "text": "Or it's so close to 6046,\nwhich is the natural successor to this class. So in 6045 we talk about this.",
    "start": "615340",
    "end": "624040"
  },
  {
    "text": "So this class is all\nabout problems that are in P, which is very easy. But in fact, there are\nproblems way out here beyond R.",
    "start": "624040",
    "end": "634740"
  },
  {
    "text": "And here is one\nsuch problem, which we won't prove here today.",
    "start": "634740",
    "end": "639779"
  },
  {
    "text": "It takes a whole\nlecture to prove this. Given a computer program,\ndoes it ever halt?",
    "start": "639780",
    "end": "649340"
  },
  {
    "start": "640000",
    "end": "700000"
  },
  {
    "start": "649340",
    "end": "659160"
  },
  {
    "text": "Does it ever terminate? This would be a great thing\nif we knew how to solve. It's basically an\ninfinite loop detector.",
    "start": "659160",
    "end": "664847"
  },
  {
    "text": "If your problem\ndoesn't halt, then it has an infinite\nloop of some sort. And you'd like to\ntell your user, hey,",
    "start": "664848",
    "end": "670149"
  },
  {
    "text": "you have a bug in your program. So this is one part\nof bug detection. And it's impossible. There is no algorithm\nthat always--",
    "start": "670150",
    "end": "677550"
  },
  {
    "text": "that solves all inputs\nto this problem. Maybe given one program that,\nsay, has 0 lines of code,",
    "start": "677550",
    "end": "683157"
  },
  {
    "text": "it could solve that. It says, yeah, that\none terminates. And maybe you can detect\nsimple kinds of infinite loops.",
    "start": "683157",
    "end": "688870"
  },
  {
    "text": "So there's some inputs,\nsome computer programs that you could detect. But there's no one algorithm\nthat solves all inputs.",
    "start": "688870",
    "end": "696970"
  },
  {
    "text": "This is kind of sad news. We call such problems\nuncomputable.",
    "start": "696970",
    "end": "702110"
  },
  {
    "start": "700000",
    "end": "1135000"
  },
  {
    "text": "This is just another\nword for being not in R.",
    "start": "702110",
    "end": "711450"
  },
  {
    "text": "OK, and next thing\nI'd like to do is prove to you\nthat most decision",
    "start": "711450",
    "end": "717600"
  },
  {
    "text": "problems are uncomputable,\nor sketcher proof. ",
    "start": "717600",
    "end": "728740"
  },
  {
    "text": "So remember, decision\nproblems are problems where the answer is just yes or no. This is a very special\nkind of problem.",
    "start": "728740",
    "end": "734630"
  },
  {
    "text": " And even those, almost all\nof them, cannot be solved.",
    "start": "734630",
    "end": "743660"
  },
  {
    "text": "So halting is an example\nof a problem we want-- we can't solve. This whole class, this 006, is\nabout problems we can solve.",
    "start": "743660",
    "end": "752552"
  },
  {
    "text": "But today I'm going to show\nyou that, actually, those are in the minority. Most problems\ncannot be computed. This is very strange and\nalso a little depressing.",
    "start": "752552",
    "end": "761810"
  },
  {
    "text": "So we'll talk more\nabout that in a moment. First let me argue\nwhy this is the case. So I'm going to be\na little informal",
    "start": "761810",
    "end": "768230"
  },
  {
    "text": "about what exactly\nis a computer program and what exactly is\na decision problem.",
    "start": "768230",
    "end": "773720"
  },
  {
    "text": "But roughly, all I need\nto do, the only level of precision I need is just\nto count how many are there.",
    "start": "773720",
    "end": "781670"
  },
  {
    "text": "What is a computer program? Well, it's usually a file. What's a file? It's like a string\nof characters.",
    "start": "781670",
    "end": "787290"
  },
  {
    "text": "What's a character? It's a string of bits. So a program is just, in\nthe end, a string of bits, finite string of bits.",
    "start": "787290",
    "end": "794000"
  },
  {
    "text": " We all understand that.",
    "start": "794000",
    "end": "799070"
  },
  {
    "text": "Whatever language you\ndefine, in the end, every program is just\na string of bits.",
    "start": "799070",
    "end": "806300"
  },
  {
    "text": "And a string of bits we can\ntranslate into a number. So we can convert between\nstrings of bits and numbers.",
    "start": "806300",
    "end": "816110"
  },
  {
    "text": "When I say number, I\nmean what's usually called a natural number\nor a non-negative integer.",
    "start": "816110",
    "end": "823320"
  },
  {
    "text": "This is usually represented\nby bold board bold--",
    "start": "823320",
    "end": "831470"
  },
  {
    "text": "blackboard bold\ncapital N. So this is just 0, 1, 2, and so on.",
    "start": "831470",
    "end": "836870"
  },
  {
    "start": "836870",
    "end": "842270"
  },
  {
    "text": "Now, what about\ndecision problems? ",
    "start": "842270",
    "end": "850850"
  },
  {
    "text": "Decision problem\nis a specification of what we want to solve. So we can think of it as\nsaying, for every input,",
    "start": "850850",
    "end": "857360"
  },
  {
    "text": "is the answer yes or no? That's literally what\na decision problem is. The only question\nis, what is an input?",
    "start": "857360",
    "end": "863870"
  },
  {
    "text": "And we've talked about inputs\nand the size of inputs. And there's lots of different\nways to measure them.",
    "start": "863870",
    "end": "870090"
  },
  {
    "text": "But in the end, we can think\nof an input as a string of bits also. It's just a file. So a decision\nproblem is a function",
    "start": "870090",
    "end": "881980"
  },
  {
    "text": "from inputs to yes or no. ",
    "start": "881980",
    "end": "890410"
  },
  {
    "text": "And inputs we're going\nto say, well, that's a string of bits, which we can\nassociate with a number in N.",
    "start": "890410",
    "end": "903506"
  },
  {
    "text": "So here we can start\nto tie things together.  So in other words, a program\nis a finite string of bits,",
    "start": "903506",
    "end": "912060"
  },
  {
    "text": "and a problem is, in some sense,\nan infinite string of bits",
    "start": "912060",
    "end": "917310"
  },
  {
    "text": "because there are infinitely\nmany possible inputs. And for each of them,\nwe specify yes or no.",
    "start": "917310",
    "end": "923279"
  },
  {
    "text": "So this is basically an\ninfinite string of bits.",
    "start": "923280",
    "end": "931940"
  },
  {
    "start": "931940",
    "end": "938050"
  },
  {
    "text": "So we can imagine\n011010001110, infinitely.",
    "start": "938050",
    "end": "946140"
  },
  {
    "text": "Just some-- for every string\nof bits, we can say, OK, if your input is the number\n0, here's the answer--",
    "start": "946140",
    "end": "952050"
  },
  {
    "text": "no. If your input is the number\n1, then the answer is yes.",
    "start": "952050",
    "end": "957110"
  },
  {
    "text": "If your input is the\nnumber 2, your answer is yes, and so on\ndown this line. Every infinite string\nof bits corresponds",
    "start": "957110",
    "end": "962970"
  },
  {
    "text": "to exactly one\ndecision problem, which specifies for every possible\ninput integer, which",
    "start": "962970",
    "end": "967980"
  },
  {
    "text": "corresponds to a string of bits,\nwhat is the answer, yes or no? So this may seem subtle, or it\nmay seem like not a big deal.",
    "start": "967980",
    "end": "975009"
  },
  {
    "text": "This is a finite string of bits. This is an infinite\nstring of bits. But mathematics has well\nstudied this problem.",
    "start": "975010",
    "end": "981029"
  },
  {
    "text": "And infinite strings of bits,\nthere are very many of them,",
    "start": "981030",
    "end": "986040"
  },
  {
    "text": "infinitely many. It's not surprising. There are also\ninfinitely many integers. So maybe it doesn't\nseem that deep.",
    "start": "986040",
    "end": "992190"
  },
  {
    "text": "But there's a difference\nin infinitude.",
    "start": "992190",
    "end": "997990"
  },
  {
    "text": "Programs and integers\nare countably infinite. ",
    "start": "997990",
    "end": "1007579"
  },
  {
    "text": "And infinite strings of bits\nare what's called uncountable. ",
    "start": "1007580",
    "end": "1016210"
  },
  {
    "text": "I think the most\nintuitive way to see this is, an infinite\nstring of bits, if I put a decimal or a\nbinary point in front,",
    "start": "1016210",
    "end": "1024849"
  },
  {
    "text": "this encodes a real\nnumber between 0 and 1. So this is roughly\na real number in 01.",
    "start": "1024849",
    "end": "1037369"
  },
  {
    "text": "And when I'm writing\napproximately equal here, this really goes\nin both directions. Given a decision problem, I\ncan define a string of bits,",
    "start": "1037369",
    "end": "1044109"
  },
  {
    "text": "of course giving me the\nanswer for all inputs. And I can convert that into a\nreal number between 0 and 1. But also the other direction,\nif I take any real number,",
    "start": "1044109",
    "end": "1051070"
  },
  {
    "text": "that is a corresponding\ndecision problem. These are 1 to 1\nbijection between them.",
    "start": "1051070",
    "end": "1056740"
  },
  {
    "text": "And the bad news is, real\nnumbers are uncountable, and natural numbers\nare countable,",
    "start": "1056740",
    "end": "1062049"
  },
  {
    "text": "which means there's a lot more\nof these than there are these.",
    "start": "1062050",
    "end": "1067660"
  },
  {
    "text": "So one way you might\nphrase this is, informally,",
    "start": "1067660",
    "end": "1075490"
  },
  {
    "text": "the number of natural\nnumbers is way smaller than the number of real numbers. And so from that, we derive that\nmost problems are unsolvable,",
    "start": "1075490",
    "end": "1085120"
  },
  {
    "text": "because every program solves\nexactly one decision problem.",
    "start": "1085120",
    "end": "1090220"
  },
  {
    "text": "We can also run a\nprogram, conceptually, on all possible inputs,\nand we will figure out what function at solving.",
    "start": "1090220",
    "end": "1096290"
  },
  {
    "text": "And if we don't allow random\nnumbers in our program, which I'm not here, then every program\nsolves exactly one decision",
    "start": "1096290",
    "end": "1103490"
  },
  {
    "text": "problem. Possibly, it's even worse for\nus because multiple programs probably solve the\nsame decision problem.",
    "start": "1103490",
    "end": "1109149"
  },
  {
    "text": "They're just-- they add\nirrelevant lines of code or they don't do\nanything different. Or you run Bellman-Ford\nversus running Bellman-Ford",
    "start": "1109150",
    "end": "1115690"
  },
  {
    "text": "five times, you'll\nget the same result. And that's actually the\nbad direction for us.",
    "start": "1115690",
    "end": "1121748"
  },
  {
    "text": "We'd like to know whether\nthere is a program that solves every decision problem. And because there are\nonly this many programs",
    "start": "1121748",
    "end": "1130130"
  },
  {
    "text": "and this many decision\nproblems, it just-- there aren't enough to go around. So most-- what's the phrasing?",
    "start": "1130130",
    "end": "1139670"
  },
  {
    "start": "1135000",
    "end": "1315000"
  },
  {
    "text": "Not nearly enough programs for\nall problems, and so there's",
    "start": "1139670",
    "end": "1145460"
  },
  {
    "text": "no assignment of\nprograms to problems",
    "start": "1145460",
    "end": "1157980"
  },
  {
    "text": "because there's just\ntoo many problems.  More money, more\nproblems, I guess.",
    "start": "1157980",
    "end": "1165880"
  },
  {
    "text": "So when I first\nsaw this result, I was shocked and dismayed that-- why are we even doing computer\nscience if most problems can't",
    "start": "1165880",
    "end": "1172030"
  },
  {
    "text": "be solved? Luckily, it seems like most\nof the problems we care about can be solved. That's what this\nclass is all about.",
    "start": "1172030",
    "end": "1178020"
  },
  {
    "text": "And in fact, even the\nproblems that seem really, really hard for us to solve,\nlike n by n chess, where we can",
    "start": "1178020",
    "end": "1183460"
  },
  {
    "text": "prove it takes\nexponential time, there is an algorithm to solve chess. It's just really slow.",
    "start": "1183460",
    "end": "1188497"
  },
  {
    "text": "And this is a statement\nabout, most problems can even be solved\nin finite time no matter how much\ntime you give them.",
    "start": "1188497",
    "end": "1194830"
  },
  {
    "text": "So it's not all bad. Luckily, most\nproblems we care about",
    "start": "1194830",
    "end": "1213380"
  },
  {
    "text": "are in R. I don't know why. This is sort of a\nmystery of life.",
    "start": "1213380",
    "end": "1219770"
  },
  {
    "text": "But it's good news. Or it's why we keep persevering\ntrying to solve problems",
    "start": "1219770",
    "end": "1228230"
  },
  {
    "text": "with algorithms. AUDIENCE: Is it because\nwhen we state problems, the statement tends to be small?",
    "start": "1228230",
    "end": "1235830"
  },
  {
    "text": "ERIK DEMAINE: Well, this-- so the question\nwas, maybe it's just because these short\nstatement problems are easy.",
    "start": "1235830",
    "end": "1240950"
  },
  {
    "text": "But this is a pretty short\nstatement, and it's hard. I think-- I don't have\na great reason why.",
    "start": "1240950",
    "end": "1249309"
  },
  {
    "text": "I wish I understood. There's a general\nresult that if you have any question about\nthe program itself, then",
    "start": "1249310",
    "end": "1255355"
  },
  {
    "text": "there's no algorithm\nto solve it. Basically, any non-trivial\nquestion about programs is hard, is not in R. And\nI guess if you took--",
    "start": "1255355",
    "end": "1264190"
  },
  {
    "text": "if you imagine taking a\nrandom statement of a problem, then maybe this will\nbe in the middle of it with some probability.",
    "start": "1264190",
    "end": "1270789"
  },
  {
    "text": "Maybe that's why most. But this is a very\nstrong notion of most. There are so many more real\nnumbers than natural numbers",
    "start": "1270790",
    "end": "1276520"
  },
  {
    "text": "that-- I don't know. ",
    "start": "1276520",
    "end": "1283780"
  },
  {
    "text": "I want to add one more class\nto this picture, which is NP.",
    "start": "1283780",
    "end": "1291580"
  },
  {
    "text": "It nestles in between P and EXP. So we know that P is\ncontained in or equal to NP.",
    "start": "1291580",
    "end": "1302980"
  },
  {
    "text": "And NP is contained\nin or equal to EXP. We don't know whether there's\na quality here or here.",
    "start": "1302980",
    "end": "1309400"
  },
  {
    "text": "Probably not, but\nwe can't prove it. But what is this class? A couple of different\nways to define it--",
    "start": "1309400",
    "end": "1316420"
  },
  {
    "start": "1315000",
    "end": "1700000"
  },
  {
    "text": "you might find one way or\nthe other more intuitive. They're equivalent.",
    "start": "1316420",
    "end": "1322159"
  },
  {
    "text": "So as long as you understand at\nleast one of them, it's good.",
    "start": "1322160",
    "end": "1327820"
  },
  {
    "text": "NP is just a class\nof decision problems. So I define P and\nEXP and R arbitrary.",
    "start": "1327820",
    "end": "1335980"
  },
  {
    "text": "They can be problems\nwith any kind of output. But NP only makes sense\nfor decision problems.",
    "start": "1335980",
    "end": "1341440"
  },
  {
    "text": "And it's going to look almost\nlike the definition of P--",
    "start": "1341440",
    "end": "1347980"
  },
  {
    "text": " problem solvable\nin polynomial time.",
    "start": "1347980",
    "end": "1354340"
  },
  {
    "text": "We've just restricted\nto decision problems. But we're going to\nallow a strange kind",
    "start": "1354340",
    "end": "1360220"
  },
  {
    "text": "of computer or\nalgorithm, which I like to call a lucky algorithm.",
    "start": "1360220",
    "end": "1366659"
  },
  {
    "text": " And this is going to relate\nto the notion of guessing",
    "start": "1366659",
    "end": "1373150"
  },
  {
    "text": "that we talked about for\nthe last four lectures in dynamic programming. With dynamic programming,\nwe said, oh, there",
    "start": "1373150",
    "end": "1379330"
  },
  {
    "text": "are all these different\nchoices I could make. What's the right choice? I don't know, so I'd\nlike to make a guess.",
    "start": "1379330",
    "end": "1385840"
  },
  {
    "text": "And what that meant in terms\nof a real algorithm is, we tried all of\nthe possibilities, and then took the max\nor the OR or whatever",
    "start": "1385840",
    "end": "1392169"
  },
  {
    "text": "over all those possibilities. And so we were-- but what we were\nsimulating is something",
    "start": "1392170",
    "end": "1397690"
  },
  {
    "text": "that I call a lucky algorithm,\nwhich can make guesses and always makes\nthe right guess.",
    "start": "1397690",
    "end": "1402789"
  },
  {
    "text": "This is a computer that\nis impossible to buy. It would be great if you could\nbuy a computer that's lucky.",
    "start": "1402790",
    "end": "1408309"
  },
  {
    "text": "But we don't know how to\nbuild such a computer.  So what does this mean?",
    "start": "1408310",
    "end": "1415820"
  },
  {
    "text": "So informally, it\nmeans your algorithm can make lucky guesses, and it\nalways makes the right guess.",
    "start": "1415820",
    "end": "1421330"
  },
  {
    "text": "And whereas in DP, we had\nto try all the options and spend time for all of\nthem, the lucky algorithm only",
    "start": "1421330",
    "end": "1426400"
  },
  {
    "text": "has to spend time on the lucky\nguess, on the correct guess. More formally, this is called\na non-deterministic model",
    "start": "1426400",
    "end": "1434409"
  },
  {
    "text": "of computation. ",
    "start": "1434410",
    "end": "1442330"
  },
  {
    "text": "And this N is the-- the N in non-determinism\nis the N for NP. So this is non-deterministic\npolynomial time.",
    "start": "1442330",
    "end": "1449110"
  },
  {
    "text": " So algorithm can make guesses.",
    "start": "1449110",
    "end": "1457670"
  },
  {
    "start": "1457670",
    "end": "1463610"
  },
  {
    "text": "And then in the end, it\nshould output yes or no. ",
    "start": "1463610",
    "end": "1473750"
  },
  {
    "text": "Like say if you're exploring a\nmaze, this algorithm could say, should I go left or go right? I'm going to guess whether\nto go left or go right.",
    "start": "1473750",
    "end": "1480470"
  },
  {
    "text": "And let's say it guesses left. And so then it just goes left. And then it reaches\nanother junction. It says, should I\ngo left or right?",
    "start": "1480470",
    "end": "1486690"
  },
  {
    "text": "And it'll say, I'll\nguess, and it'll say, guess right this time. And in the end, if I get to some\ndead end maybe and I say no,",
    "start": "1486690",
    "end": "1493393"
  },
  {
    "text": "or if I get to the destination\nI'm trying to get to, I say yes. So that's a\nnon-deterministic algorithm.",
    "start": "1493393",
    "end": "1498720"
  },
  {
    "text": "And what does it mean\nto run that algorithm? What does it mean for\nthe guesses to be lucky?",
    "start": "1498720",
    "end": "1506090"
  },
  {
    "text": "Here's what it means. These guesses are guaranteed--",
    "start": "1506090",
    "end": "1511490"
  },
  {
    "text": "which way you end up going is\nguaranteed to lead you to a yes if there is one-- ",
    "start": "1511490",
    "end": "1525909"
  },
  {
    "text": "if possible. So in my maze analogy,\nif my destination",
    "start": "1525910",
    "end": "1532419"
  },
  {
    "text": "is reachable from\nmy source, then I'm guaranteed, whenever\nI guessed left or right,",
    "start": "1532420",
    "end": "1538420"
  },
  {
    "text": "I will choose a path that\nleads me to my destination. Whereas, if the destination\nis in some disconnected part",
    "start": "1538420",
    "end": "1544870"
  },
  {
    "text": "of the maze and I\ncan't get there, then I don't know\nwhat the guesses do. It doesn't really matter.",
    "start": "1544870",
    "end": "1550210"
  },
  {
    "text": "Because no matter what I do,\nI'll end up in a dead end and say no. That's the model.",
    "start": "1550210",
    "end": "1556610"
  },
  {
    "text": "As long as you have an algorithm\nthat always outputs yes or no in polynomial time-- because\nwe're only talking about",
    "start": "1556610",
    "end": "1562010"
  },
  {
    "text": "polynomial time,\nlucky algorithms-- if there's any way\nto get to a yes, then your machine\nwill magically find it",
    "start": "1562010",
    "end": "1570220"
  },
  {
    "text": "without having to spend any\ntime to make these decisions. So it's a pretty\nmagical computer,",
    "start": "1570220",
    "end": "1576100"
  },
  {
    "text": "and it's not a computer\nthat exists in real life. But it's a computer that's\ngreat to program on.",
    "start": "1576100",
    "end": "1581430"
  },
  {
    "text": "It's very powerful. You could solve lots\nof things with it. Yeah. AUDIENCE: If you had\nthis magical computer,",
    "start": "1581430",
    "end": "1587799"
  },
  {
    "text": "it can guess whether\nit's yes or no, why doesn't it just\nanswer the question?",
    "start": "1587800",
    "end": "1593117"
  },
  {
    "text": "ERIK DEMAINE: Right. So what if we-- so\na nice check is, does this make all problems\ntrivial, all decision problems?",
    "start": "1593117",
    "end": "1599745"
  },
  {
    "text": "Maybe I should\nsay, well, I don't know whether the\nanswer to the problem is yes or no, so I'll\njust guess yes or no.",
    "start": "1599745",
    "end": "1605590"
  },
  {
    "text": "This is problematic because-- so I might say, it\nwill guess A or B,",
    "start": "1605590",
    "end": "1611929"
  },
  {
    "text": "and if I choose the A\noption, I will output yes, and if I choose the B\noption, I will output no. In this model, that algorithm\nwill always output yes.",
    "start": "1611930",
    "end": "1620055"
  },
  {
    "text": "Because what it's\nsaying is, if there's any way to get to a yes\nanswer, I will do that way.",
    "start": "1620055",
    "end": "1625800"
  },
  {
    "text": "And so such an algorithm\nthat tries to cheat and just guess the whole\nanswer to the problem will actually end\nup always saying",
    "start": "1625800",
    "end": "1631310"
  },
  {
    "text": "yes, which means\nit doesn't solve a very interesting problem. It only solves\nthe problem, which is represented by the\nbit vector 1111111,",
    "start": "1631310",
    "end": "1640220"
  },
  {
    "text": "where all the answers are yes. But good check. Yeah. AUDIENCE: Does there\nhave to be a bound",
    "start": "1640220",
    "end": "1646235"
  },
  {
    "text": "of a number of things it has\nto choose between when it [AUDIO OUT] ERIK DEMAINE: Yes.",
    "start": "1646235",
    "end": "1651825"
  },
  {
    "text": "AUDIENCE: Does it have an\nexponential number of them?  ERIK DEMAINE: Exponential\nnumber of choices is OK.",
    "start": "1651825",
    "end": "1659690"
  },
  {
    "text": "I usually like to think\nof it, as you can only guess one bit at a time.",
    "start": "1659690",
    "end": "1665270"
  },
  {
    "text": "But we're allowed\npolynomial time, so you're actually\nallowed to guess polynomial number of bits. At that point, you can guess\nover an exponential size space,",
    "start": "1665270",
    "end": "1672710"
  },
  {
    "text": "but not more than exponential. So it's-- yeah, polynomial\ntime let's say in the one-bit",
    "start": "1672710",
    "end": "1679070"
  },
  {
    "text": "guessing model. What did I say? Makes guesses-- let's\nadd binary here.",
    "start": "1679070",
    "end": "1687440"
  },
  {
    "text": "Otherwise we get some other\nclass, which I don't want. OK, let's do an example, a real\nexample of such an algorithm",
    "start": "1687440",
    "end": "1696020"
  },
  {
    "text": "that's useful, which is Tetris. So I claim Tetris is\nin NP because there",
    "start": "1696020",
    "end": "1707960"
  },
  {
    "start": "1700000",
    "end": "2125000"
  },
  {
    "text": "is a lucky algorithm and\nnon-deterministic polynomial time algorithm that can\nsolve the Tetris game.",
    "start": "1707960",
    "end": "1714260"
  },
  {
    "text": "So again, you're\ngiven a board, you're given some sequence\nof pieces, and you",
    "start": "1714260",
    "end": "1719870"
  },
  {
    "text": "want to know whether\nthere's some way to place the pieces\nthat lets you survive.",
    "start": "1719870",
    "end": "1724919"
  },
  {
    "text": "And so what I'm going to\ndo is, for each piece,",
    "start": "1724920",
    "end": "1733790"
  },
  {
    "text": "I'm going to guess\nhow to place it. ",
    "start": "1733790",
    "end": "1739914"
  },
  {
    "text": "So for the first\npiece, I'm going to guess how far left\nor right do I move it. Then I let it fall one step.",
    "start": "1739915",
    "end": "1745820"
  },
  {
    "text": "Maybe I rotate it. I choose a sequence of moves\namong left, right, down, rotate right, rotate left.",
    "start": "1745820",
    "end": "1753440"
  },
  {
    "text": "And all along the way, I\ncheck, is that move valid? If the move is invalid at any\npoint, I just say, return no.",
    "start": "1753440",
    "end": "1761190"
  },
  {
    "text": "And then if the piece gets\nnestled into a good spot, I continue to the next piece. I do the same thing, guess\nall the possible things",
    "start": "1761190",
    "end": "1767653"
  },
  {
    "text": "I could do to that. Again, I only need to\nguess one bit at a time. And I'll only need to do a\npolynomial number of guesses,",
    "start": "1767653",
    "end": "1774090"
  },
  {
    "text": "like a linear number of guesses,\nfor each piece about where it falls in, so maybe a\nquadratic number of guesses",
    "start": "1774090",
    "end": "1779220"
  },
  {
    "text": "overall. And then at the\nend, if I survived-- oh, I also have to\ncheck if a line clears.",
    "start": "1779220",
    "end": "1785260"
  },
  {
    "text": "Then I clear the line. And if in the end I\nsurvive, I return yes. So this is a\nnon-deterministic algorithm.",
    "start": "1785260",
    "end": "1793800"
  },
  {
    "text": "So I would say, check\nthe rules of the game. And if we survive, return yes.",
    "start": "1793800",
    "end": "1806460"
  },
  {
    "text": "And if at any point we violate\nthe rules-- for example, we go off the top of the board--",
    "start": "1806460",
    "end": "1812220"
  },
  {
    "text": "we return no. So this is an algorithm\nthat sometimes returns no and sometimes\nreturns yes depending",
    "start": "1812220",
    "end": "1817919"
  },
  {
    "text": "on what choices you make. And this model\nguarantees, if there's any way to get to a\nyes, it will find it.",
    "start": "1817920",
    "end": "1824659"
  },
  {
    "text": "If I swapped these\nanswers, if I returned yes when I violated the rules and\nreturned no if I survived,",
    "start": "1824660",
    "end": "1832192"
  },
  {
    "text": "this would be an\nuninteresting algorithm. Because it's very easy\nto lose in Tetris. The hard part is to survive.",
    "start": "1832192",
    "end": "1838850"
  },
  {
    "text": "If I say, is there any way to\nplay the game in such a way that I violate the rules, then,\nof course, the answer is yes.",
    "start": "1838850",
    "end": "1845000"
  },
  {
    "text": "You can just stack pieces\nand go off the top. There's an asymmetry in this\ndefinition of yes versus no.",
    "start": "1845000",
    "end": "1852179"
  },
  {
    "text": "It always finds yes\nanswers if possible. It doesn't always find\nno answers if possible.",
    "start": "1852180",
    "end": "1858090"
  },
  {
    "text": "So it's very important the way\nthat I wrote these questions. It's important that I define\nTetris as the problem of,",
    "start": "1858090",
    "end": "1863540"
  },
  {
    "text": "can I survive? The problem of\ncan I not survive, is it impossible to survive,\nthat's a different question.",
    "start": "1863540",
    "end": "1871330"
  },
  {
    "text": "That problem is not\nin NP, probably. OK, so slight subtlety\nthere, yes versus no.",
    "start": "1871330",
    "end": "1877370"
  },
  {
    "text": "Let me give you the\nother definition of NP. So if this one's\nconfusing, which-- although I prefer\nthis definition.",
    "start": "1877370",
    "end": "1883820"
  },
  {
    "text": "Most people do not. So this is confusing. Let's do the other definition.",
    "start": "1883820",
    "end": "1891630"
  },
  {
    "text": "So another definition is that\nNP is a set of decision problems",
    "start": "1891630",
    "end": "1924300"
  },
  {
    "text": "that can be checked\nin polynomial time. ",
    "start": "1924300",
    "end": "1938672"
  },
  {
    "text": "This actually came up\nin the last lecture where we talked\nabout subset sum. I said, here's a\nbunch of integers,",
    "start": "1938672",
    "end": "1944820"
  },
  {
    "text": "here's a target integer,\nand I can prove to you that this integer can be\nrepresented as a sum of numbers",
    "start": "1944820",
    "end": "1950310"
  },
  {
    "text": "from my subset of numbers from\nmy set, because here they are. I gave you this plus this plus\nthis equals the target sum.",
    "start": "1950310",
    "end": "1958590"
  },
  {
    "text": "And so that is a solution,\nin some sense, that can be checked for a yes example.",
    "start": "1958590",
    "end": "1964720"
  },
  {
    "text": "If I can represent my number\nas a subset sum of a given set, it's easy for me to\nprove that to you.",
    "start": "1964720",
    "end": "1970590"
  },
  {
    "text": "And you can check it just\nby adding up the numbers and checking that each\nnumber was in the set.",
    "start": "1970590",
    "end": "1976809"
  },
  {
    "text": "Whereas no instances, I had\nan example of a target sum that could not be reached. And the only reason I\nknew that is because I",
    "start": "1976810",
    "end": "1983563"
  },
  {
    "text": "had brute-forced the thing. And there's no succinct way to\nprove to you that that number",
    "start": "1983563",
    "end": "1989500"
  },
  {
    "text": "can't be represented. A similar thing with Tetris,\nwhat I would say is--",
    "start": "1989500",
    "end": "1996880"
  },
  {
    "text": "so this is version\n1, version 2-- for Tetris is\nthat, a certificate",
    "start": "1996880",
    "end": "2009060"
  },
  {
    "text": "for a yes input of\nTetris is a sequence",
    "start": "2009060",
    "end": "2018990"
  },
  {
    "text": "of moves for the pieces. ",
    "start": "2018990",
    "end": "2028520"
  },
  {
    "text": "OK, if it's possible\nto survive in Tetris, I can prove it to you. I can just play the game and\nshow you that I survived.",
    "start": "2028520",
    "end": "2035710"
  },
  {
    "text": "No answers, I don't\nknow, it's hard to prove to you that I can't survive\na given sequence of pieces.",
    "start": "2035710",
    "end": "2040750"
  },
  {
    "text": "But yes answers are easy. I just show you, here's the\nsequence of button presses I'll do for this piece,\nthen for this piece,",
    "start": "2040750",
    "end": "2046780"
  },
  {
    "text": "then for this piece. Notice it's exactly\nthe same thing that I guessed in the\nbeginning of this algorithm.",
    "start": "2046780",
    "end": "2052989"
  },
  {
    "text": "And then I did some other\nwork to implement the rules. And similarly, if I gave\nyou a certificate, which is the things that I wanted to\nguess of how to play the game,",
    "start": "2052989",
    "end": "2060760"
  },
  {
    "text": "I can check this certificate\nby just implementing the rules of Tetris and\nseeing whether I survived.",
    "start": "2060760",
    "end": "2066408"
  },
  {
    "text": "And if you violate the rules\nat any point, you say no. And if you survive,\nyou return yes.",
    "start": "2066409",
    "end": "2072219"
  },
  {
    "text": "That's what's called a\nverification algorithm. So let me formalize this notion.",
    "start": "2072219",
    "end": "2078070"
  },
  {
    "text": "Given a problem input\nplus a certificate,",
    "start": "2078070",
    "end": "2088480"
  },
  {
    "text": "like that one over there,\nthere is a polynomial time--",
    "start": "2088480",
    "end": "2096790"
  },
  {
    "text": "so this is yet\nanother definition. This is what I mean by\nthis definition of NP-- verification algorithm that\nsatisfies two properties.",
    "start": "2096790",
    "end": "2112250"
  },
  {
    "text": "One is, for every yes input-- so every input where the\nanswer is yes to the problem--",
    "start": "2112250",
    "end": "2119770"
  },
  {
    "text": "there exists a certificate such\nthat the verifier says yes.",
    "start": "2119770",
    "end": "2128440"
  },
  {
    "start": "2125000",
    "end": "2410000"
  },
  {
    "start": "2128440",
    "end": "2133720"
  },
  {
    "text": "So this is saying, it's\npossible to prove to me that an answer is yes,\nbecause if you ever have an input that the\nanswer happens to be yes,",
    "start": "2133720",
    "end": "2141940"
  },
  {
    "text": "you can prove it to me by\ngiving me a certificate. There's always some certificate\nthat proves the answer's yes.",
    "start": "2141940",
    "end": "2147610"
  },
  {
    "text": "Because the verifier, which runs\nin regular polynomial time-- this is a regular,\nold-fashioned,",
    "start": "2147610",
    "end": "2153100"
  },
  {
    "text": "down-to-earth\nverification algorithm, polynomial time in\nour usual sense-- it will say yes.",
    "start": "2153100",
    "end": "2159340"
  },
  {
    "text": "And furthermore, the yes\nanswers from the verifier are actually meaningful, because\nif I ever give it a no input,",
    "start": "2159340",
    "end": "2166060"
  },
  {
    "text": "it always says no, no matter\nwhat certificate I give it. ",
    "start": "2166060",
    "end": "2178730"
  },
  {
    "text": "So this should really\nformalize what all this means. It's equivalent to the\nprevious definition.",
    "start": "2178730",
    "end": "2184030"
  },
  {
    "text": "This is saying that proofs\nexist for yes instances. And this is saying that proofs\ndon't exist for no instances,",
    "start": "2184030",
    "end": "2189740"
  },
  {
    "text": "meaning there are\nno false proofs. So if the verifier\never outputs yes, you know that the answer\nto your problem is yes.",
    "start": "2189740",
    "end": "2196797"
  },
  {
    "text": "But if it outputs\nno, you're not sure. Maybe you got the\ncertificate wrong because we only know there's\nsome certificate where the verifier will say yes.",
    "start": "2196797",
    "end": "2202810"
  },
  {
    "text": "Or maybe it was a no\ninput, and then it didn't matter what\ncertificate you used. But it's nice, because\nit says on, say, Tetris,",
    "start": "2202810",
    "end": "2209390"
  },
  {
    "text": "if I give you the\nsequence of pieces, it's very easy to write down a\nverifier which just implements the rules of Tetris.",
    "start": "2209390",
    "end": "2215740"
  },
  {
    "text": "And so then you can at least\ncheck whether a solution is valid in the yes case. In the no case, we don't\nhave anything useful.",
    "start": "2215740",
    "end": "2223039"
  },
  {
    "text": "So NP is a structure,\nsome additional structure about the yes inputs\nin your problem.",
    "start": "2223040",
    "end": "2229809"
  },
  {
    "text": "And a lot of decision\nproblems are in NP. A lot of the problems\nthat we care about",
    "start": "2229810",
    "end": "2234850"
  },
  {
    "text": "can be phrased as an NP problem. As long as it's a\ndecision problem, usually, answering yes or no\nis provable, like subset sum,",
    "start": "2234850",
    "end": "2245070"
  },
  {
    "text": "like Tetris. These are all problems\nwhere, if the answer is yes, I can give you a\nconvincing proof why.",
    "start": "2245070",
    "end": "2251805"
  },
  {
    "text": "And it turns out a lot--\nso a lot of problems fall into this NP setting. And so we have some tools\nfor talking about problems",
    "start": "2251805",
    "end": "2259349"
  },
  {
    "text": "being hard with respect to NP.",
    "start": "2259350",
    "end": "2265510"
  },
  {
    "text": "Let me first talk a\nlittle bit about P. Does not equal\nNP, question mark.",
    "start": "2265510",
    "end": "2275580"
  },
  {
    "text": "A lot of people conjecture\nthat P does not equal NP. It's sort of a\nstandard conjecture",
    "start": "2275580",
    "end": "2280750"
  },
  {
    "text": "in theoretical computer science. But we don't know how to prove\nwhether P equals NP or does not",
    "start": "2280750",
    "end": "2286690"
  },
  {
    "text": "equal NP. And so in this picture,\nI've drawn the hypothesis,",
    "start": "2286690",
    "end": "2292160"
  },
  {
    "text": "which is that NP is a strictly\nbigger region than P is. But we don't actually\nknow whether there",
    "start": "2292160",
    "end": "2298180"
  },
  {
    "text": "are problems in this region. We don't know whether\nthere are problems in this region\nbetween NP and EXP.",
    "start": "2298180",
    "end": "2304690"
  },
  {
    "text": "We conjecture there\nare problems here and there are problems here. There's definitely problems\nhere or problems here,",
    "start": "2304690",
    "end": "2310690"
  },
  {
    "text": "but we don't know which one. Because we know P\ndoes not equal EXP, but we don't know\nwhether P equals NP, and we don't know\nwhether P equals EXP.",
    "start": "2310690",
    "end": "2317440"
  },
  {
    "text": "If you could prove that P does\nnot equal NP, or disprove it, you would win $1 million, which\nnot that much money these days.",
    "start": "2317440",
    "end": "2324460"
  },
  {
    "text": "But you would be famous\nto for the rest of time if you could ever prove this.",
    "start": "2324460",
    "end": "2329710"
  },
  {
    "text": "Every year, there's\nusually a crackpot proof that doesn't work out.",
    "start": "2329710",
    "end": "2336339"
  },
  {
    "text": "Some of them go to me. Please don't send them. And anyway, it's a\nvery hard problem.",
    "start": "2336340",
    "end": "2342490"
  },
  {
    "text": "It is sort of the core problem\nin theoretical computer science, how to prove\nP does not equal NP. But for the most part,\nwe just assume it.",
    "start": "2342490",
    "end": "2351470"
  },
  {
    "text": "Now, what does this\nconjecture mean? It essentially means-- the\nway I like to say it is, you cannot engineer luck.",
    "start": "2351470",
    "end": "2357850"
  },
  {
    "text": "Because NP problems\nare problems you can solve by lucky algorithms. P are problems you can solve\nby regular old algorithms.",
    "start": "2357850",
    "end": "2364990"
  },
  {
    "text": "And so if P equalled\nNP, it means luck doesn't buy you\nanything, which seems weird.",
    "start": "2364990",
    "end": "2370809"
  },
  {
    "text": "If I can magically make\nthese super powerful guesses, then I can solve the\nproblem that that's",
    "start": "2370810",
    "end": "2376569"
  },
  {
    "text": "NP, that seems\nsuper powerful, way more powerful than\nregular algorithms, where we have to actually\nbrute-force and try",
    "start": "2376570",
    "end": "2382930"
  },
  {
    "text": "all the choices. And so it seems pretty solid\nthat P does not equal NP.",
    "start": "2382930",
    "end": "2388550"
  },
  {
    "text": "That's my-- of course, we\ndon't know how to prove it. Another phrasing\nis that it's harder to come up with proofs\nthan it is to check them,",
    "start": "2388550",
    "end": "2396190"
  },
  {
    "text": "from a mathematical perspective. This is equivalent to\nP does not equal NP. So that's why you\nshould believe it.",
    "start": "2396190",
    "end": "2403030"
  },
  {
    "text": "Now, let's go over here. ",
    "start": "2403030",
    "end": "2411740"
  },
  {
    "start": "2410000",
    "end": "2665000"
  },
  {
    "text": "The next notion is NP-hardness.",
    "start": "2411740",
    "end": "2416960"
  },
  {
    "start": "2416960",
    "end": "2427910"
  },
  {
    "text": "So in particular,\nI want to claim-- this is a theorem that\nexists in the literature--",
    "start": "2427910",
    "end": "2433160"
  },
  {
    "text": "that if P does not equal\nNP, then Tetris is not NP.",
    "start": "2433160",
    "end": "2440740"
  },
  {
    "text": " So I said right here,\nTetris is in EXP,",
    "start": "2440740",
    "end": "2446300"
  },
  {
    "text": "but we don't know\nwhether it's in NP. But in fact, we\nconjecture it is not NP because we conjecture\nthat P does not equal NP.",
    "start": "2446300",
    "end": "2452210"
  },
  {
    "text": "If you could prove\nthis conjecture-- and there's a lot of theorems\nthat are conditioned assuming P does not equal NP-- then we get some nice results,\nlike Tetris cannot be solved",
    "start": "2452210",
    "end": "2460160"
  },
  {
    "text": "in polynomial time. It cannot figure out whether\nI can win a Tetris game",
    "start": "2460160",
    "end": "2465320"
  },
  {
    "text": "in polynomial time\nin the input size. Why?",
    "start": "2465320",
    "end": "2470849"
  },
  {
    "text": "This is a consequence of\nanother theorem, which is that Tetris is NP-hard.",
    "start": "2470850",
    "end": "2481620"
  },
  {
    "text": "I'm going to define\nNP-hard informally first, and then I'll define it slightly\nmore formally in a second.",
    "start": "2481620",
    "end": "2487500"
  },
  {
    "text": "But this means,\nroughly, that Tetris is as hard as all problems in NP.",
    "start": "2487500",
    "end": "2498390"
  },
  {
    "text": " So let me draw this\nin the picture.",
    "start": "2498390",
    "end": "2506080"
  },
  {
    "text": "So NP-hard is this part.",
    "start": "2506080",
    "end": "2512170"
  },
  {
    "text": " Did I leave myself enough room? Maybe not. ",
    "start": "2512170",
    "end": "2522309"
  },
  {
    "text": "Well, we'll squeeze it in. There's another region\nhere for EXP-hard.",
    "start": "2522310",
    "end": "2527790"
  },
  {
    "start": "2527790",
    "end": "2534290"
  },
  {
    "text": "So your problem being in\nNP was a positive result. It says you're no more\ndifficult than this line.",
    "start": "2534290",
    "end": "2542089"
  },
  {
    "text": "You're either at this\nposition or to the left. Being in P was also\na positive statement. It says you're here\nor to the left.",
    "start": "2542090",
    "end": "2548690"
  },
  {
    "text": "Being in P is better\nthan being in NP because this is\na subset of that.",
    "start": "2548690",
    "end": "2553940"
  },
  {
    "text": "NP-hard is a lower bound. It says, you are at this point,\nat this level of difficulty,",
    "start": "2553940",
    "end": "2560210"
  },
  {
    "text": "or to the right. And so it goes from here off\nto infinity in difficulty.",
    "start": "2560210",
    "end": "2566540"
  },
  {
    "text": "And EXP-hard says\nyou're at least as hard as the right\nextent of the EXP set,",
    "start": "2566540",
    "end": "2573260"
  },
  {
    "text": "or you're harder than\nthat, in a sense that we will formalize in a moment.",
    "start": "2573260",
    "end": "2578660"
  },
  {
    "text": "And this place right here,\nas you might imagine, is kind of interesting. It's exactly where\nNP meets NP-hard.",
    "start": "2578660",
    "end": "2585609"
  },
  {
    "text": "This thing is\ncalled NP-complete. You probably have heard\nabout NP-completeness,",
    "start": "2585610",
    "end": "2591350"
  },
  {
    "text": "a famous notion. And this is what it means. It is, the problems\nthat are in NP--",
    "start": "2591350",
    "end": "2597840"
  },
  {
    "text": "so they have a lucky\nalgorithm that solves them, they can be verified,\nthere are certificates that can be verified--\nand they are NP-hard.",
    "start": "2597840",
    "end": "2605170"
  },
  {
    "text": "So they're in NP, and they\nare the hardest among problems in NP. Now, they're not\nthe hardest problem.",
    "start": "2605170",
    "end": "2611200"
  },
  {
    "text": "There are actually many\nproblems right here at this single level of\ndifficulty called NP-complete.",
    "start": "2611200",
    "end": "2616750"
  },
  {
    "text": "Among them is Tetris. There are many others, which\nI will list in a moment.",
    "start": "2616750",
    "end": "2623119"
  },
  {
    "text": "So that is NP-completeness. So because these problems are\nthe hardest problems in NP,",
    "start": "2623120",
    "end": "2632810"
  },
  {
    "text": "if there's any problems\nhere in between-- in NP minus P, then\nthese must be among them.",
    "start": "2632810",
    "end": "2639550"
  },
  {
    "text": "And so if you assume\nthat P does not equal NP, as most\npeople do, then you know that all problems\nat this right-most extreme",
    "start": "2639550",
    "end": "2646500"
  },
  {
    "text": "of NP, the hardest of\nthe problems in NP, they must not be NP. And that's why I can say,\nif P does not equal NP,",
    "start": "2646500",
    "end": "2652980"
  },
  {
    "text": "Tetris is not NP, and also, any\nNP complete problem is not NP. OK, what does \"as hard as\" mean?",
    "start": "2652980",
    "end": "2661300"
  },
  {
    "text": " This is our good\nfriend reductions.",
    "start": "2661300",
    "end": "2670430"
  },
  {
    "start": "2665000",
    "end": "3167000"
  },
  {
    "text": " We talked about reductions\na lot in this class. ",
    "start": "2670430",
    "end": "2678260"
  },
  {
    "text": "Reductions are the easy\nway to use algorithms. You just take your problem\nand reduce it to a problem",
    "start": "2678260",
    "end": "2683600"
  },
  {
    "text": "you already know how to solve. You take the input to some\nproblem that you want to solve,",
    "start": "2683600",
    "end": "2692150"
  },
  {
    "text": "and you convert it into an\ninput to some other problem, like single source shortest\npaths or something like that",
    "start": "2692150",
    "end": "2698960"
  },
  {
    "text": "that you already have an\nalgorithm for solving. So if you have an algorithm\nthat solves problem B,",
    "start": "2698960",
    "end": "2705050"
  },
  {
    "text": "you can convert that\ninto a solution for B. And a reduction should\nalso tell me how to--",
    "start": "2705050",
    "end": "2711980"
  },
  {
    "text": "given a solution to B,\nhow to convert it back into a solution for A. And\nwhen I say solution here,",
    "start": "2711980",
    "end": "2718610"
  },
  {
    "text": "I actually mean certificate\nfrom over there. So how-- so if I--",
    "start": "2718610",
    "end": "2728280"
  },
  {
    "text": "so if I have-- so reduction\nconsists of these two pieces-- how to convert an input\nat A to an input for B,",
    "start": "2728280",
    "end": "2735045"
  },
  {
    "text": "and given a solution\nto B, how to convert it to a solution to A. Let me give you some examples of\nreductions you've already seen.",
    "start": "2735045",
    "end": "2740520"
  },
  {
    "text": "You've seen a lot of them. If I have unweighted\nshortest paths on the left--",
    "start": "2740520",
    "end": "2747180"
  },
  {
    "text": "unweighted single\nsource shortest paths--",
    "start": "2747180",
    "end": "2752579"
  },
  {
    "text": "I can reduce that to\nweighted shortest paths. ",
    "start": "2752580",
    "end": "2759990"
  },
  {
    "text": "How? AUDIENCE: Set all\nthe weights to 1. ERIK DEMAINE: Set\nall the weights to 1. So here I'm given a\ngraph without weights.",
    "start": "2759990",
    "end": "2766060"
  },
  {
    "text": "If I set all the\nweights to 1, that turns it into an input for a\nweighted single source shortest paths. So if you didn't know\nhow to solve this,",
    "start": "2766060",
    "end": "2772497"
  },
  {
    "text": "you could solve it\nby converting it. If you've already written,\nsay, a Dijkstra algorithm, you could apply it to solve\nunweighted single source",
    "start": "2772497",
    "end": "2778815"
  },
  {
    "text": "shortest paths. Now, we know a faster\nway to solve this, but it's only a\nlog factor faster. And here we're talking about\npolynomial versus exponential.",
    "start": "2778815",
    "end": "2786452"
  },
  {
    "text": "So this is a valid reduction. It's not the most\ninteresting one from an algorithmic standpoint,\nbut it is an algorithm.",
    "start": "2786452",
    "end": "2792280"
  },
  {
    "text": "Another one we've\nseen is, if you have integer\nweights in the left,",
    "start": "2792280",
    "end": "2797470"
  },
  {
    "text": "you can convert\nthat to unweighted on the right, positive\ninteger weights,",
    "start": "2797470",
    "end": "2802779"
  },
  {
    "text": "by subdividing each\nedge of weight W into W edges of no weight.",
    "start": "2802780",
    "end": "2810040"
  },
  {
    "text": "So that's maybe a little\nbit less efficient. It depends what the\nsum of the weights are.",
    "start": "2810040",
    "end": "2815200"
  },
  {
    "text": "Another version that we've seen\nis longest path in a graph. We can-- weighted path we\ncan reduce to shortest path",
    "start": "2815200",
    "end": "2824470"
  },
  {
    "text": "in a graph, weighted by\nnegating all the weights.",
    "start": "2824470",
    "end": "2830290"
  },
  {
    "text": "We did this in some of the\ndynamic programming things. Like oh, longest path on a DAG? We can convert that into\nshortest path on a DAG",
    "start": "2830290",
    "end": "2836320"
  },
  {
    "text": "just by negating\nall the weights. So these are all examples\nof converting one problem to another.",
    "start": "2836320",
    "end": "2841630"
  },
  {
    "text": "Usually, you convert from-- for algorithms, you\nconvert from a problem you want to solve into a\nproblem that you already",
    "start": "2841630",
    "end": "2848200"
  },
  {
    "text": "know how to solve. But it turns out the same\ntool reductions can be used to prove negative results too.",
    "start": "2848200",
    "end": "2855510"
  },
  {
    "text": "And in this case, we're going\nto reduce from a problem that we think cannot be solved and\nreduce it to the problem that",
    "start": "2855510",
    "end": "2862750"
  },
  {
    "text": "we're interested in solving. So let me write more\nprecisely what this means.",
    "start": "2862750",
    "end": "2868390"
  },
  {
    "text": "If you can find a\nreduction like this, it means that\nsolving A is at least",
    "start": "2868390",
    "end": "2873880"
  },
  {
    "text": "as easy as solving B. Because\nI could solve A, in particular,",
    "start": "2873880",
    "end": "2884299"
  },
  {
    "text": "by converting it into B, solving\nB, and then converting it back to a solution to A. So in\nother words, if I can solve B,",
    "start": "2884300",
    "end": "2891380"
  },
  {
    "text": "I can solve A, which I\ncan phrase informally as, A is at least as easy as B. And now using grammar,\ncontrapositive",
    "start": "2891380",
    "end": "2899660"
  },
  {
    "text": "whatever, this is the same thing\nas saying that B is at least as hard as A. And this is what I\nmean by at least as hard as.",
    "start": "2899660",
    "end": "2914430"
  },
  {
    "text": "So this is my definition\nof at least as hard, in this notion of NP-hardness.",
    "start": "2914430",
    "end": "2920810"
  },
  {
    "text": "So what NP-hard means\nis that I'm at least as hard as all problems in NP.",
    "start": "2920810",
    "end": "2926000"
  },
  {
    "text": "So what that means is,\nevery problem in NP can be reduced to Tetris,\nwhich is kind of funny.",
    "start": "2926000",
    "end": "2933845"
  },
  {
    "text": "But in particular, that\nmeans that if there's an algorithm for Tetris,\nthere's an algorithm for all problems in NP.",
    "start": "2933845",
    "end": "2939950"
  },
  {
    "text": "And so that's actually\nthe contrapositive of this statement. So this is saying, if\nthere's a polynomial-- if I take the contrapositive\nof this, this is saying,",
    "start": "2939950",
    "end": "2946368"
  },
  {
    "text": "if there's a polynomial\ntime algorithm for Tetris, then P equals NP, there's\na polynomial time algorithm for every problem in NP.",
    "start": "2946368",
    "end": "2952670"
  },
  {
    "text": "And the way we prove\nthat is by reductions. We take an arbitrary problem in\nNP, and we reduce it to Tetris.",
    "start": "2952670",
    "end": "2959000"
  },
  {
    "text": "Luckily, that's not as hard as\nit sounds because it's already been done once. There is already a\nreduction from NP to--",
    "start": "2959000",
    "end": "2967250"
  },
  {
    "text": "from all problems in NP to\nsingular problems out there, the NP-complete problems.",
    "start": "2967250",
    "end": "2972710"
  },
  {
    "text": "There is some first\nNP-complete problem, which I guess is the Turing machine.",
    "start": "2972710",
    "end": "2978240"
  },
  {
    "text": "It's basically simulating\na lucky algorithm, so it's kind of a not\nvery interesting problem. But from that problem,\nif you can reduce it",
    "start": "2978240",
    "end": "2984350"
  },
  {
    "text": "to any other problem,\nyou know that problem is NP-hard as well. And so briefly, I want to show\nyou some examples of that here.",
    "start": "2984350",
    "end": "2996250"
  },
  {
    "text": "So I want to start\nout with a problem that I'm just going to\nassume is NP-complete.",
    "start": "2996250",
    "end": "3002510"
  },
  {
    "text": "And it's called 3-partition. One way to phrase it is, I\ngive you a bunch of integers--",
    "start": "3002510",
    "end": "3008600"
  },
  {
    "text": "I think I have it written down\nover here, also the board.",
    "start": "3008600",
    "end": "3014360"
  },
  {
    "text": "I give you n integers, and\nI'd like to divide them up into n over 3 groups of size 3,\nsuch that each group of size 3",
    "start": "3014360",
    "end": "3022310"
  },
  {
    "text": "has the same sum. And it's written\nthere on the board.",
    "start": "3022310",
    "end": "3027668"
  },
  {
    "text": "So you can also think of this\nas the following problem. I give you a bunch of rectangles\nthat are a side length--",
    "start": "3027668",
    "end": "3033560"
  },
  {
    "text": "or a bunch of sticks, let's\nsay, of varying lengths, and I want to group them up\nlike on the right diagram,",
    "start": "3033560",
    "end": "3041010"
  },
  {
    "text": "so in groups of 3, such that\nthe total length of each group is exactly the same.",
    "start": "3041010",
    "end": "3046970"
  },
  {
    "text": "This is just a problem. And just believe for now\nthat it is NP-complete. I won't prove that.",
    "start": "3046970",
    "end": "3052490"
  },
  {
    "text": "But what I'd like to show you\nis a reduction from this problem to another problem--",
    "start": "3052490",
    "end": "3059000"
  },
  {
    "text": "solving jigsaw puzzles. So you might think\njigsaw puzzles are really easy, and especially\neasy if I lose the projector.",
    "start": "3059000",
    "end": "3069590"
  },
  {
    "text": "But in fact, if you\nhave a jigsaw puzzle where some of the\nmatches are ambiguous, if there's multiple pieces that\ncould fit against a given tab",
    "start": "3069590",
    "end": "3077810"
  },
  {
    "text": "or pocket, then I\nclaim I can represent this 3-partition problem\nby building little sticks,",
    "start": "3077810",
    "end": "3086030"
  },
  {
    "text": "like here. So if I want to represent\na stick of length ai, I'm just going to build an ai--",
    "start": "3086030",
    "end": "3092089"
  },
  {
    "text": "I didn't mention\nthey're all integers, and they're\npolynomial-sized integers.",
    "start": "3092090",
    "end": "3098109"
  },
  {
    "text": "I'm going to represent that\nby ai different pieces here.",
    "start": "3098110",
    "end": "3103360"
  },
  {
    "text": "And the red tabs and\npockets are designed to be unique global\nto the puzzle,",
    "start": "3103360",
    "end": "3108849"
  },
  {
    "text": "like a regular jigsaw puzzle. Given this piece on the left\nand this tab on the right,",
    "start": "3108850",
    "end": "3116319"
  },
  {
    "text": "there's a unique pocket, there's\na piece with unique pocket that fits perfectly\ninto that piece. So this joining is forced.",
    "start": "3116320",
    "end": "3123760"
  },
  {
    "text": "And also this joining is forced. But the blue tabs and\npockets are different. They're all the same.",
    "start": "3123760",
    "end": "3129610"
  },
  {
    "text": "They're all identical. And so if I build\nthis frame using the red unique assignments,\nand I build these rectangles,",
    "start": "3129610",
    "end": "3140109"
  },
  {
    "text": "if I want to pack these\nrectangles into this rectangle, that's exactly the 3-partition\nproblem, with some details",
    "start": "3140110",
    "end": "3146109"
  },
  {
    "text": "that I didn't fill in. But it turns out you'd\nbe forced to group these into groups of size 3,\nsomething like this,",
    "start": "3146110",
    "end": "3155461"
  },
  {
    "text": "with varying lengths. OK, so that's an\nexample of a reduction.",
    "start": "3155461",
    "end": "3160860"
  },
  {
    "text": "If you believe the\n3-partition is NP-hard, this proves to you that\njigsaw puzzles are NP-hard, something you may\nnot have known.",
    "start": "3160860",
    "end": "3167568"
  },
  {
    "start": "3167000",
    "end": "3314000"
  },
  {
    "text": "Every time you solve\na jigsaw puzzle, you can feel good\nabout yourself now, especially if it\nhas ambiguous mates.",
    "start": "3167568",
    "end": "3172950"
  },
  {
    "text": "Next is Tetris. So here is a reduction from\nthe same 3-partition problem,",
    "start": "3172950",
    "end": "3178940"
  },
  {
    "text": "which is one of my favorite\nproblems, to Tetris. It starts out with\nthis strange board. It has a bunch of columns\nhere where I could put pieces.",
    "start": "3178940",
    "end": "3190230"
  },
  {
    "text": "So I'm not allowed to put\npieces in these dark regions. They all have height\nT. T is the target sum",
    "start": "3190230",
    "end": "3196670"
  },
  {
    "text": "that we want all\nof the numbers to-- all of the triples of\nnumbers to add up to. And there's n over\n3 of these slots",
    "start": "3196670",
    "end": "3204260"
  },
  {
    "text": "where I can try to put pieces. And it's-- because of this\nthing over on the right,",
    "start": "3204260",
    "end": "3209470"
  },
  {
    "text": "there's no way to clear\nlines in this game. And now to represent\na single number ai,",
    "start": "3209470",
    "end": "3215819"
  },
  {
    "text": "I'm going to give you\nthis sequence of pieces, which starts with an L piece. And then it has ai\nrepetitions of this pattern,",
    "start": "3215820",
    "end": "3223410"
  },
  {
    "text": "and then it ends with\nthese two pieces. And so what ends up\nhappening is that--",
    "start": "3223410",
    "end": "3229500"
  },
  {
    "text": "this is in the\nintended solution-- you first place an L at the\nbottom of one of these buckets,",
    "start": "3229500",
    "end": "3236220"
  },
  {
    "text": "and then you repeat this\npattern in this nice way. And it fills up the ai,\nroughly, height of this bucket.",
    "start": "3236220",
    "end": "3243990"
  },
  {
    "text": "And then at the end, you\nhave to put the I here. And what this ends\nup guaranteeing",
    "start": "3243990",
    "end": "3250750"
  },
  {
    "text": "is that all of these pieces\ngo into a single bucket. You can check. It's tedious.",
    "start": "3250750",
    "end": "3255910"
  },
  {
    "text": "But if you tried to put\nsome of these pieces in one bucket and other\npieces in a different bucket,",
    "start": "3255910",
    "end": "3260980"
  },
  {
    "text": "you would lose some space,\nand then you would die. So if you want to survive, you\nhave to put all these pieces",
    "start": "3260980",
    "end": "3266320"
  },
  {
    "text": "into one bucket. And so again, we're just\nstacking rectangles. We're putting a whole bunch\nof rectangles in one pocket and then a bunch of\nrectangles another pocket.",
    "start": "3266320",
    "end": "3273220"
  },
  {
    "text": "We can switch back and\nforth however we want. But the only way to\nwin, it turns out, is if you get all\nof those rectangles",
    "start": "3273220",
    "end": "3280060"
  },
  {
    "text": "to add up to exactly\nthe right height. Then you get a\npicture like this. If you don't get a\npicture like this,",
    "start": "3280060",
    "end": "3285730"
  },
  {
    "text": "you can prove you end up dying. Then I'll give\nyou a bunch of Ls. Then I'll finally give you this\nT, which clears some lines.",
    "start": "3285730",
    "end": "3292300"
  },
  {
    "text": "And then I'll give you-- the most satisfying\nTetris game ever-- I'll give you a\nton of I's, and you get Tetris, Tetris, Tetris,\nand you clear the entire board.",
    "start": "3292300",
    "end": "3299290"
  },
  {
    "text": "And so if you can solve\nthe 3-partition problem you can clear the\nboard and win the game and be the best\nTetris player ever.",
    "start": "3299290",
    "end": "3306650"
  },
  {
    "text": "And if there is no\nsolution to 3-partition, you're guaranteed to lose. And so this proves\nTetris is NP-hard.",
    "start": "3306650",
    "end": "3314384"
  },
  {
    "start": "3314000",
    "end": "3548000"
  },
  {
    "text": "Cool. So what else do I\nwant to say, briefly?",
    "start": "3314384",
    "end": "3320040"
  },
  {
    "text": "I think that's the main idea. So another example--\nso this spot",
    "start": "3320040",
    "end": "3327490"
  },
  {
    "text": "is called EXP-completeness. ",
    "start": "3327490",
    "end": "3335440"
  },
  {
    "text": "And this includes problems\nsuch as n by n chess. So we know that chess\nrequires exponential time",
    "start": "3335440",
    "end": "3342023"
  },
  {
    "text": "because, in fact,\nit's among the hardest problems in exponential time. But most common are the--",
    "start": "3342023",
    "end": "3347605"
  },
  {
    "text": "that's somehow because of the\ntwo-player nature of the game. Most common are\nNP-complete problems.",
    "start": "3347605",
    "end": "3353609"
  },
  {
    "text": "And we have a bunch of\nexample NP-complete problems I'll just briefly mention here.",
    "start": "3353610",
    "end": "3359170"
  },
  {
    "text": "So we saw the\nsubset sum problem, which we had a polynomial\ntime algorithm for--",
    "start": "3359170",
    "end": "3364690"
  },
  {
    "text": "sorry, a pseudo polynomial\ntime algorithm for last class-- in fact has no polynomial\ntime algorithm, assuming P equals NP.",
    "start": "3364690",
    "end": "3371250"
  },
  {
    "text": "So pseudo poly is the best you\ncan hope for for subset sum. There's a related notion\ncalled weakly NP-hardness,",
    "start": "3371250",
    "end": "3377310"
  },
  {
    "text": "which I won't get into here. 3-partition is one we saw. We saw some reductions\nto other problems.",
    "start": "3377310",
    "end": "3383080"
  },
  {
    "text": "So these are all NP complete. Longest common subsequence is\nanother dynamic programming problem we saw\nwith two sequences.",
    "start": "3383080",
    "end": "3388932"
  },
  {
    "text": "I mentioned you could\nsolve it for three or four or any constant number. But if I give you n\nsequences each of length n,",
    "start": "3388933",
    "end": "3394620"
  },
  {
    "text": "that problem is\nNP-hard, NP-complete. Longest simple path\nin a graph-- we",
    "start": "3394620",
    "end": "3399958"
  },
  {
    "text": "know how to solve longest path. You just solve shortest\npath and negative weights. But longest simple path, where\nyou don't repeat vertices,",
    "start": "3399958",
    "end": "3406500"
  },
  {
    "text": "that's NP-complete. Relatedly, one of the most\nfamous NP-complete problems is traveling salesman\nproblem, finding",
    "start": "3406500",
    "end": "3413640"
  },
  {
    "text": "the shortest path that visits\nall vertices in a given graph. So instead of just\ngoing from A to B,",
    "start": "3413640",
    "end": "3420090"
  },
  {
    "text": "I want to visit all the\nvertices in the graph. A lot of these\nproblems I'm phrasing as optimization problems.",
    "start": "3420090",
    "end": "3427140"
  },
  {
    "text": "But when I say\nNP-complete, I actually mean a decision\nversion of the problem. For example, with this\none, the decision question",
    "start": "3427140",
    "end": "3432690"
  },
  {
    "text": "is, is the shortest path that\nvisits all vertices in a graph less than or equal\nto a given value x.",
    "start": "3432690",
    "end": "3437940"
  },
  {
    "text": "If you can solve this,\nthen by binary search you can solve the\noverall weight. 3-coloring a graph is hard,\neven though 2-coloring a graph",
    "start": "3437940",
    "end": "3445230"
  },
  {
    "text": "is polynomial. 3-coloring is NP-complete. Assigning three\ncolors to the vertices so that no adjacent vertices\nhave the same color,",
    "start": "3445230",
    "end": "3452460"
  },
  {
    "text": "finding the largest clique\nin a given graph, which would be useful for analyzing\nsocial networks, whatever.",
    "start": "3452460",
    "end": "3458040"
  },
  {
    "text": "This is a fun one\nfor me as a geometer. If you're in a three-dimensional\nworld, which I am,",
    "start": "3458040",
    "end": "3463200"
  },
  {
    "text": "and I want to find the shortest\npath from here to there that doesn't collide\nwith any obstacles,",
    "start": "3463200",
    "end": "3469680"
  },
  {
    "text": "like this desk and all the\nchairs and so on, in 3D, this problem-- if you can fly, so if\nyou're a drone flying",
    "start": "3469680",
    "end": "3476400"
  },
  {
    "text": "among all these\nobstacles, you want to find the shortest path from\nA to B, this is NP-complete.",
    "start": "3476400",
    "end": "3482025"
  },
  {
    "text": "It's quite surprising. In two dimensions,\nit's polynomial. You can reduce it to\ngraph shortest paths. But in 3D, it's NP-hard.",
    "start": "3482025",
    "end": "3488099"
  },
  {
    "text": "This is a formula problem\nthat comes up a lot. Given a Boolean formula\nwith AND, OR, or NOT, can you ever make it true,\nif it has some variables that",
    "start": "3488100",
    "end": "3494940"
  },
  {
    "text": "are not assigned? And some more fun examples\nare Minesweeper or Sudoku. Basically any paper and pencil\npuzzle you've ever played,",
    "start": "3494940",
    "end": "3501443"
  },
  {
    "text": "there's probably\na paper out there proving that it's NP-complete. And on the video game\nside, Super Mario Brothers",
    "start": "3501443",
    "end": "3507240"
  },
  {
    "text": "is NP-hard. Legend of Zelda is NP-hard. Pokemon is NP-hard. These problems are actually all\na little bit harder than NP,",
    "start": "3507240",
    "end": "3513960"
  },
  {
    "text": "in a different class called\nP-space, which I won't go into. But if you're interested\nin this stuff,",
    "start": "3513960",
    "end": "3519630"
  },
  {
    "text": "there is a whole class devoted\nto it, which has online video lectures, so you can watch\nthem whenever you want,",
    "start": "3519630",
    "end": "3525900"
  },
  {
    "text": "called 6.892, that gives\na bunch of especially fun examples of NP-hardness\nand other types of hardness",
    "start": "3525900",
    "end": "3533849"
  },
  {
    "text": "proofs from a sort of\nalgorithm perspective for lots of games and puzzles\nyou might care about.",
    "start": "3533850",
    "end": "3541200"
  },
  {
    "text": "And that's it. ",
    "start": "3541200",
    "end": "3548000"
  }
]