[
  {
    "start": "0",
    "end": "156000"
  },
  {
    "text": "There are three architectural parameters that\ncharacterize a virtual memory system and hence",
    "start": "989",
    "end": "5918"
  },
  {
    "text": "the architecture of the MMU.",
    "start": "5919",
    "end": "8920"
  },
  {
    "text": "P is the number of address bits used for the\npage offset in both virtual and physical addresses.",
    "start": "8920",
    "end": "14889"
  },
  {
    "text": "V is the number of address bits used for the\nvirtual page number.",
    "start": "14889",
    "end": "19680"
  },
  {
    "text": "And M is the number of address bits used for\nthe physical page number.",
    "start": "19680",
    "end": "24990"
  },
  {
    "text": "All the other parameters, listed on the right,\nare derived from these three parameters.",
    "start": "24990",
    "end": "29740"
  },
  {
    "text": "As mentioned earlier, the typical page size\nis between 4KB and 16KB, the sweet spot in",
    "start": "29740",
    "end": "36040"
  },
  {
    "text": "the tradeoff between the downside of using\nphysical memory to hold unwanted locations",
    "start": "36040",
    "end": "41720"
  },
  {
    "text": "and the upside of reading as much as possible\nfrom secondary storage so as to amortize the",
    "start": "41720",
    "end": "47300"
  },
  {
    "text": "high cost of accessing the initial word over\nas many words as possible.",
    "start": "47300",
    "end": "53520"
  },
  {
    "text": "The size of the virtual address is determined\nby the ISA.",
    "start": "53520",
    "end": "58280"
  },
  {
    "text": "We're now making the transition from 32-bit\narchitectures, which support a 4 gigabyte",
    "start": "58280",
    "end": "62910"
  },
  {
    "text": "virtual address space, to 64-bit architectures,\nwhich support a 16 exabyte virtual address",
    "start": "62910",
    "end": "70020"
  },
  {
    "text": "space.",
    "start": "70020",
    "end": "71020"
  },
  {
    "text": "\"Exa\" is the SI prefix for 10^18 - a 64-bit\naddress can access a *lot* of memory!",
    "start": "71020",
    "end": "79880"
  },
  {
    "text": "The limitations of a small virtual address\nhave been the main cause for the extinction",
    "start": "79880",
    "end": "84468"
  },
  {
    "text": "of many ISAs.",
    "start": "84469",
    "end": "85950"
  },
  {
    "text": "Of course, each generation of engineers thinks\nthat the transition they make will be the",
    "start": "85950",
    "end": "91649"
  },
  {
    "text": "final one!",
    "start": "91650",
    "end": "92829"
  },
  {
    "text": "I can remember when we all thought that 32\nbits was an unimaginably large address.",
    "start": "92829",
    "end": "98119"
  },
  {
    "text": "Back then we're buying memory by the megabyte\nand only in our fantasies did we think one",
    "start": "98119",
    "end": "103770"
  },
  {
    "text": "could have a system with several thousand\nmegabytes.",
    "start": "103770",
    "end": "108398"
  },
  {
    "text": "Today's CPU architects are feeling pretty\nsmug about 64 bits - we'll see how they feel",
    "start": "108399",
    "end": "113729"
  },
  {
    "text": "in a couple of decades!",
    "start": "113729",
    "end": "116218"
  },
  {
    "text": "The size of physical addresses is currently\nbetween 30 bits (for embedded processors with",
    "start": "116219",
    "end": "121200"
  },
  {
    "text": "modest memory needs) and 40+ bits (for servers\nthat handle large data sets).",
    "start": "121200",
    "end": "128289"
  },
  {
    "text": "Since CPU implementations are expected to\nchange every couple of years, the choice of",
    "start": "128289",
    "end": "132500"
  },
  {
    "text": "physical memory size can be adjusted to match\ncurrent technologies.",
    "start": "132500",
    "end": "138320"
  },
  {
    "text": "Since programmers use virtual addresses, they're\ninsulated from this implementation choice.",
    "start": "138320",
    "end": "143950"
  },
  {
    "text": "The MMU ensures that existing software will\ncontinue to function correctly with different",
    "start": "143950",
    "end": "148450"
  },
  {
    "text": "sizes of physical memory.",
    "start": "148450",
    "end": "150750"
  },
  {
    "text": "The programmer may notice differences in performance,\nbut not in basic functionality.",
    "start": "150750",
    "end": "156940"
  },
  {
    "start": "156000",
    "end": "218000"
  },
  {
    "text": "For example, suppose our system supported\na 32-bit virtual address, a 30-bit physical",
    "start": "156940",
    "end": "162610"
  },
  {
    "text": "address and a 4KB page size.",
    "start": "162610",
    "end": "165290"
  },
  {
    "text": "So p = 12, v = 32-12 = 20, and m = 30 - 12\n= 18.",
    "start": "165290",
    "end": "175370"
  },
  {
    "text": "There are 2^m physical pages, which is 2^18\nin our example.",
    "start": "175370",
    "end": "180980"
  },
  {
    "text": "There are 2^v virtual pages, which is 2^20\nin our example.",
    "start": "180980",
    "end": "186580"
  },
  {
    "text": "And since there is one entry in the page map\nfor each virtual page, there are 2^20 (approximately",
    "start": "186580",
    "end": "192820"
  },
  {
    "text": "one million) page map entries.",
    "start": "192820",
    "end": "196580"
  },
  {
    "text": "Each page map entry contains a PPN, an R bit\nand a D bit, for a total of m+2 bits, which",
    "start": "196580",
    "end": "204481"
  },
  {
    "text": "is 20 bits in our example.",
    "start": "204481",
    "end": "206870"
  },
  {
    "text": "So there are approximately 20 million bits\nin the page map.",
    "start": "206870",
    "end": "211659"
  },
  {
    "text": "If we were thinking of using a large special-purpose\nstatic RAM to hold the page map, this would",
    "start": "211660",
    "end": "216670"
  },
  {
    "text": "get pretty expensive!",
    "start": "216670",
    "end": "219349"
  },
  {
    "start": "218000",
    "end": "381000"
  },
  {
    "text": "But why use a special-purpose memory for the\npage map?",
    "start": "219350",
    "end": "222760"
  },
  {
    "text": "Why not use a portion of main memory, which\nwe have a lot of and have already bought and",
    "start": "222760",
    "end": "227010"
  },
  {
    "text": "paid for?",
    "start": "227010",
    "end": "228670"
  },
  {
    "text": "We could use a register, called the page map\npointer, to hold the address of the page map",
    "start": "228670",
    "end": "232910"
  },
  {
    "text": "array in main memory.",
    "start": "232910",
    "end": "234220"
  },
  {
    "text": "In other words, the page map would occupy\nsome number of dedicated physical pages.",
    "start": "234220",
    "end": "240200"
  },
  {
    "text": "Using the desired virtual page number as an\nindex, the hardware could perform the usual",
    "start": "240200",
    "end": "245060"
  },
  {
    "text": "array access calculation to fetch the needed\npage map entry from main memory.",
    "start": "245060",
    "end": "251569"
  },
  {
    "text": "The downside of this proposed implementation\nis that it now takes two accesses to physical",
    "start": "251570",
    "end": "256310"
  },
  {
    "text": "memory to perform one virtual access:\nthe first to retrieve the page table entry",
    "start": "256310",
    "end": "261729"
  },
  {
    "text": "needed for the virtual-to-physical address\ntranslation, and the second to actually access",
    "start": "261729",
    "end": "267249"
  },
  {
    "text": "the requested location.",
    "start": "267249",
    "end": "268810"
  },
  {
    "text": "Once again, caches to the rescue.",
    "start": "268810",
    "end": "272139"
  },
  {
    "text": "Most systems incorporate a special-purpose\ncache, called a translation look-aside buffer",
    "start": "272139",
    "end": "276710"
  },
  {
    "text": "(TLB), that maps virtual page numbers to physical\npage numbers.",
    "start": "276710",
    "end": "281759"
  },
  {
    "text": "The TLB is usually small and quite fast.",
    "start": "281759",
    "end": "286100"
  },
  {
    "text": "It's usually fully-associative to ensure the\nbest possible hit ratio by avoiding collisions.",
    "start": "286100",
    "end": "292939"
  },
  {
    "text": "If the PPN is found by using the TLB, the\naccess to main memory for the page table entry",
    "start": "292939",
    "end": "298129"
  },
  {
    "text": "can be avoided, and we're back to a single\nphysical access for each virtual access.",
    "start": "298129",
    "end": "305050"
  },
  {
    "text": "The hit ratio of a TLB is quite high, usually\nbetter than 99%.",
    "start": "305050",
    "end": "310129"
  },
  {
    "text": "This isn't too surprising since locality and\nthe notion of a working set suggest that only",
    "start": "310129",
    "end": "314720"
  },
  {
    "text": "a small number of pages are in active use\nover short periods of time.",
    "start": "314720",
    "end": "320470"
  },
  {
    "text": "As we'll see in a few slides, there are interesting\nvariations to this simple TLB page-map-in-main-memory",
    "start": "320470",
    "end": "327150"
  },
  {
    "text": "architecture.",
    "start": "327150",
    "end": "328610"
  },
  {
    "text": "But the basic strategy will remain the same.",
    "start": "328610",
    "end": "332840"
  },
  {
    "text": "Putting it all together:\nthe virtual address generated by the CPU is",
    "start": "332840",
    "end": "337169"
  },
  {
    "text": "first processed by the TLB to see if the appropriate\ntranslation from VPN to PPN has been cached.",
    "start": "337169",
    "end": "344199"
  },
  {
    "text": "If so, the main memory access can proceed\ndirectly.",
    "start": "344199",
    "end": "348779"
  },
  {
    "text": "If the desired mapping is not in the TLB,\nthe appropriate entry in the page map is accessed",
    "start": "348779",
    "end": "354210"
  },
  {
    "text": "in main memory.",
    "start": "354210",
    "end": "356138"
  },
  {
    "text": "If the page is resident, the PPN field of\nthe page map entry is used to complete the",
    "start": "356139",
    "end": "361039"
  },
  {
    "text": "address translation.",
    "start": "361039",
    "end": "362289"
  },
  {
    "text": "And, of course, the translation is cached\nin the TLB so that subsequent accesses to",
    "start": "362289",
    "end": "368379"
  },
  {
    "text": "this page can avoid the access to the page\nmap.",
    "start": "368379",
    "end": "372819"
  },
  {
    "text": "If the desired page is not resident, the MMU\ntriggers a page fault exception and the page",
    "start": "372819",
    "end": "378270"
  },
  {
    "text": "fault handler code will deal with the problem.",
    "start": "378270",
    "end": "381039"
  },
  {
    "start": "381000",
    "end": "616000"
  },
  {
    "text": "Here's a final example showing all the pieces\nin action.",
    "start": "381039",
    "end": "384949"
  },
  {
    "text": "In this example, p = 10, v = 22, and m = 14.",
    "start": "384949",
    "end": "392120"
  },
  {
    "text": "How many pages can reside in physical memory\nat one time?",
    "start": "392120",
    "end": "396279"
  },
  {
    "text": "There are 2^m physical pages, so 2^14.",
    "start": "396279",
    "end": "401770"
  },
  {
    "text": "How many entries are there in the page table?",
    "start": "401770",
    "end": "405198"
  },
  {
    "text": "There's one entry for each virtual page and\nthere are 2^v virtual pages, so there are",
    "start": "405199",
    "end": "410330"
  },
  {
    "text": "2^22 entries in the page table.",
    "start": "410330",
    "end": "414418"
  },
  {
    "text": "How many bits per entry in the page table?",
    "start": "414419",
    "end": "417050"
  },
  {
    "text": "Assume each entry holds the PPN, the resident\nbit, and the dirty bit.",
    "start": "417050",
    "end": "421388"
  },
  {
    "text": "Since the PPN is m bits, there are m+2 bits\nin each entry, so 16 bits.",
    "start": "421389",
    "end": "428210"
  },
  {
    "text": "How many pages does the page table occupy?",
    "start": "428210",
    "end": "432159"
  },
  {
    "text": "There are 2^v page table entries, each occupying\n(m+2)/8 bytes, so the total size of the page",
    "start": "432159",
    "end": "440589"
  },
  {
    "text": "table in this example is 2^23 bytes.",
    "start": "440589",
    "end": "444539"
  },
  {
    "text": "Each page holds 2^p = 2^10 bytes, so the page\ntable occupies 2^23/2^10 = 2^13 pages.",
    "start": "444539",
    "end": "457259"
  },
  {
    "text": "What fraction of virtual memory can be resident\nat any given time?",
    "start": "457259",
    "end": "462469"
  },
  {
    "text": "There are 2^v virtual pages, of which 2^m\ncan be resident.",
    "start": "462469",
    "end": "467069"
  },
  {
    "text": "So the fraction of resident pages \nis 2^m/2^v = 2^14/2^22 = 1/2^8.",
    "start": "467069",
    "end": "479069"
  },
  {
    "text": "What is the physical address for virtual address\n0x1804?",
    "start": "479069",
    "end": "484259"
  },
  {
    "text": "Which MMU components are involved in the translation?",
    "start": "484259",
    "end": "489169"
  },
  {
    "text": "First we have to decompose the virtual address\ninto VPN and offset.",
    "start": "489169",
    "end": "493439"
  },
  {
    "text": "The offset is the low-order 10 bits, so is\n0x004 in this example.",
    "start": "493439",
    "end": "498159"
  },
  {
    "text": "The VPN is the remaining address bits, so\nthe VPN is 0x6.",
    "start": "498159",
    "end": "503159"
  },
  {
    "text": "Looking first in the TLB, we that the VPN-to-PPN\nmapping for VPN 0x6 is cached,",
    "start": "503159",
    "end": "509340"
  },
  {
    "text": "so we can construct the physical address by\nconcatenating the PPN (0x2) with the 10-bit",
    "start": "509340",
    "end": "515409"
  },
  {
    "text": "offset (0x4) to get a physical address of\n0x804.",
    "start": "515409",
    "end": "518930"
  },
  {
    "text": "You're right!",
    "start": "518930",
    "end": "519940"
  },
  {
    "text": "It's a bit of pain to do all the bit manipulations\nwhen p is not a multiple of 4.",
    "start": "519940",
    "end": "527110"
  },
  {
    "text": "How about virtual address 0x1080?",
    "start": "527110",
    "end": "531490"
  },
  {
    "text": "For this address the VPN is 0x4 and the offset\nis 0x80.",
    "start": "531490",
    "end": "536139"
  },
  {
    "text": "The translation for VPN 0x4 is not cached\nin the TLB, so we have to check the page map,",
    "start": "536139",
    "end": "541589"
  },
  {
    "text": "which tells us that the page is resident in\nphysical page 5.",
    "start": "541589",
    "end": "545600"
  },
  {
    "text": "Concatenating the PPN and offset, we get 0x1480\nas the physical address.",
    "start": "545600",
    "end": "552350"
  },
  {
    "text": "Finally, how about virtual address 0x0FC?",
    "start": "552350",
    "end": "557620"
  },
  {
    "text": "Here the VPN is 0 and the offset 0xFC.",
    "start": "557620",
    "end": "562529"
  },
  {
    "text": "The mapping for VPN 0 is not found in the\nTLB and checking the page map reveals that",
    "start": "562529",
    "end": "567690"
  },
  {
    "text": "VPN 0 is not resident in main memory, so a\npage fault exception is triggered.",
    "start": "567690",
    "end": "575079"
  },
  {
    "text": "There are a few things to note about the example\nTLB and page map contents.",
    "start": "575079",
    "end": "580889"
  },
  {
    "text": "Note that a TLB entry can be invalid (it's\nR bit is 0).",
    "start": "580889",
    "end": "585240"
  },
  {
    "text": "This can happen when a virtual page is replaced,\nso when we change the R bit to 0 in the page",
    "start": "585240",
    "end": "590560"
  },
  {
    "text": "map, we have to do the same in the TLB.",
    "start": "590560",
    "end": "594170"
  },
  {
    "text": "And should we be concerned that PPN 0x5 appears\ntwice in the page table?",
    "start": "594170",
    "end": "599649"
  },
  {
    "text": "Note that the entry for VPN 0x3 doesn't matter\nsince it's R bit is 0.",
    "start": "599649",
    "end": "605610"
  },
  {
    "text": "Typically when marking a page not resident,\nwe don't bother to clear out the other fields",
    "start": "605610",
    "end": "609399"
  },
  {
    "text": "in the entry since they won't be used when\nR=0.",
    "start": "609399",
    "end": "612930"
  },
  {
    "text": "So there's only one *valid* mapping to PPN\n5.",
    "start": "612930",
    "end": "615800"
  }
]