[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6360"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6360",
    "end": "13339"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13340",
    "end": "22776"
  },
  {
    "text": "PROFESSOR: So this\nis a 2-3 tree. So as you can see, every node\nhas-- so the 2-3 is either two children or three children.",
    "start": "22776",
    "end": "28840"
  },
  {
    "text": "Every node can have either\none key or two keys. And the correlation\nis that every--",
    "start": "28840",
    "end": "34665"
  },
  {
    "text": "so if there are n keys in a\nnode, it has n plus 1 children. So the way that works is\nsimilar to binary search trees.",
    "start": "34665",
    "end": "41740"
  },
  {
    "text": "So if you have value here, the\ntwo children surrounding it-- so this side is less,\nthis side is more.",
    "start": "41740",
    "end": "48850"
  },
  {
    "text": "So it's essentially sort of\ngoing in order reversal, left child, root, right child.",
    "start": "48850",
    "end": "54829"
  },
  {
    "text": "So [INAUDIBLE], it's ordered. So generally a B tree\nwill have some nodes.",
    "start": "54830",
    "end": "64010"
  },
  {
    "text": "So let's say n and\nn plus 1 children.",
    "start": "64010",
    "end": "70610"
  },
  {
    "start": "70610",
    "end": "76920"
  },
  {
    "text": "And if you take\nanything in the middle, look at the two children,\nall the keys in this sub-tree",
    "start": "76920",
    "end": "83259"
  },
  {
    "text": "are smaller than the key\nhere, and all the keys in this sub-tree are\nlarger than the key here.",
    "start": "83260",
    "end": "88680"
  },
  {
    "text": "So that's the general node. So before we go\ninto more details",
    "start": "88680",
    "end": "94570"
  },
  {
    "text": "of the properties\nand everything, the question is why use B-trees. So if we do a quick\ndepth analysis,",
    "start": "94570",
    "end": "102380"
  },
  {
    "text": "we can see that the\ndepth is to log n rate. Is that clear to everyone sort\nof, why the depth is log n?",
    "start": "102380",
    "end": "108630"
  },
  {
    "text": "Because you have branching just\nlike in binary search trees. In fact, you have\nmore branching.",
    "start": "108630",
    "end": "113860"
  },
  {
    "text": "But in any case,\ndepth is to log n. But why use B-trees over\nbinary search trees?",
    "start": "113860",
    "end": "120259"
  },
  {
    "text": "Anyone have a\nreason why you would prefer to use B-trees or not?",
    "start": "120260",
    "end": "127500"
  },
  {
    "text": "So all the operations\nare still log n. Any guesses? ",
    "start": "127500",
    "end": "136140"
  },
  {
    "text": "None. OK. Well, OK, the reason\nis memory hierarchy.",
    "start": "136140",
    "end": "142240"
  },
  {
    "text": "So normally in\n[INAUDIBLE], we just assume that the computer\nhas access to memory,",
    "start": "142240",
    "end": "147319"
  },
  {
    "text": "and you can just pick up things\nfrom disk and constant time and do your operations with\nit, and you don't worry",
    "start": "147320",
    "end": "152890"
  },
  {
    "text": "about caches and everything. But that's not how\ncomputers work. So in a computer, you\nhave-- so those of you who have taken some\ncomputer architecture",
    "start": "152890",
    "end": "159400"
  },
  {
    "text": "class [INAUDIBLE] or something,\nyou will know that hierarchy. So there's a CPU-- so\nlet's draw it somewhere.",
    "start": "159400",
    "end": "166569"
  },
  {
    "text": "So you have your CPU. And [INAUDIBLE] CPU,\nyou have some registers. You have your caches,\nL1, L2, L3, whatever.",
    "start": "166570",
    "end": "172930"
  },
  {
    "text": "You have your RAM. You have disk after that. So disk [? loads. ?] Then\nyou have your, I don't know, your cloud, whatever.",
    "start": "172930",
    "end": "179090"
  },
  {
    "text": "So each level, your\nmemory size grows and your access\ntime grows as well.",
    "start": "179090",
    "end": "184430"
  },
  {
    "text": "So in the basic memory\nhierarchy model, we have just two levels\nof hierarchy, let's say.",
    "start": "184430",
    "end": "191930"
  },
  {
    "text": "So you have cache connected\nby a high bandwidth channel to the CPU, and you have a\nlow bandwidth channel to disk.",
    "start": "191930",
    "end": "199370"
  },
  {
    "text": " So the difference\nis-- so essentially",
    "start": "199370",
    "end": "205754"
  },
  {
    "text": "you can consider that cache\njust has infinite speed. Cache, just like,\nwhatever you can take it. You don't have any cost for\nbringing in stuff from cache.",
    "start": "205754",
    "end": "212790"
  },
  {
    "text": "But it's finite size. So the way cache works is it\nhas a bunch of words, which is a finite number of words.",
    "start": "212790",
    "end": "218739"
  },
  {
    "text": "So each word has size B, and\nlet's say you have m words.",
    "start": "218740",
    "end": "224915"
  },
  {
    "text": " However, hard disk is just,\nlet's say, infinite memory,",
    "start": "224915",
    "end": "231340"
  },
  {
    "text": "but it has some cost\nassociated to accessing things. Also when you access\nthings from hard disk,",
    "start": "231340",
    "end": "238580"
  },
  {
    "text": "you copy them into cache. When you copy a block of\nsize b, you take it up from the hard disk,\nand you take a block,",
    "start": "238580",
    "end": "244800"
  },
  {
    "text": "and you put it into cache. And you have to get rid of\nsomething because it's fine. So what you want to do\nis you want to utilize",
    "start": "244800",
    "end": "251459"
  },
  {
    "text": "that b block efficiently. You just want to bring\na b block every time you want to access a new node.",
    "start": "251460",
    "end": "258170"
  },
  {
    "text": "In a binary search tree,\nnormal operations are what? You start in the root\nand go to a node.",
    "start": "258170",
    "end": "265520"
  },
  {
    "text": "But that's not very easily\ncorrelated with this. Right? So if you want to\nutilize an entire block,",
    "start": "265520",
    "end": "270779"
  },
  {
    "text": "you would want something like\na block which sort of goes down the tree. But that's not how\nbinary trees are stored.",
    "start": "270779",
    "end": "277500"
  },
  {
    "text": "Binary trees are\nstored this way. So that's the nice\nthing about B-trees.",
    "start": "277500",
    "end": "283660"
  },
  {
    "text": "So this is just a 2-3 tree. This is not a general B-tree. A general B-tree will\nhave a bunch of nodes,",
    "start": "283660",
    "end": "288840"
  },
  {
    "text": "and we'll come to that number. But generally you want to make\nthat number of nodes something like the cache-- what is it?",
    "start": "288840",
    "end": "297379"
  },
  {
    "text": "The word size in the cache. So once you do that, you can\nget an entire node from disk,",
    "start": "297380",
    "end": "302860"
  },
  {
    "text": "like work on that, and then\nget another [INAUDIBLE], so your height is reduced. And you can do your\noperation much quicker,",
    "start": "302860",
    "end": "309419"
  },
  {
    "text": "because you're not accessing\ndisk every time you're going down a level.",
    "start": "309420",
    "end": "315060"
  },
  {
    "text": "Sorry. You are accessing disk every\ntime you go down a level, but you're utilizing\nthe whole block",
    "start": "315060",
    "end": "320490"
  },
  {
    "text": "when you're accessing disk. Good? Sort of make sense? OK.",
    "start": "320490",
    "end": "327370"
  },
  {
    "text": "So let's write down the\nspecifications for B-trees now. ",
    "start": "327370",
    "end": "334352"
  },
  {
    "text": "All right. ",
    "start": "334352",
    "end": "340620"
  },
  {
    "text": "So number of children. ",
    "start": "340620",
    "end": "350090"
  },
  {
    "text": "So first of all, a\nB-tree has something called a branching factor. So in the 2-3 tree, the\nbranching factor is two.",
    "start": "350090",
    "end": "358567"
  },
  {
    "text": "So what that means is\nsimply that it just balances the number of children. So the number of children has to\nbe greater than or equal to 2.",
    "start": "358567",
    "end": "364460"
  },
  {
    "text": "Other than the root node. The root node can have\nless than B children. It's fine. Also it's upper bounded\nby 2B [? plus ?] 2B.",
    "start": "364460",
    "end": "373670"
  },
  {
    "text": "Notice that this is\na strict upper bound. So you can have at most 2B\nminus 1 children from a node.",
    "start": "373670",
    "end": "382140"
  },
  {
    "text": "Also remember that the number\nof keys, the number of keys",
    "start": "382140",
    "end": "389790"
  },
  {
    "text": "is just 1 less than\nthe number of children. Therefore, these inequalities\nare just reduced by 1.",
    "start": "389790",
    "end": "400730"
  },
  {
    "text": "So you have minus 1 and\nyou have 2B minus 1. So the number of keys can be\nbetween minus 1 and 2B minus 2.",
    "start": "400730",
    "end": "409760"
  },
  {
    "text": "The rationale for that\nwill become clear-- yeah? AUDIENCE: Is B the\nheight of the tree? PROFESSOR: No, B\nis the branching.",
    "start": "409760",
    "end": "416567"
  },
  {
    "text": "B is the branching factor. So that is the\nnumber of children. It's not the number of children. It's a bound of the\nnumber of children.",
    "start": "416567",
    "end": "422650"
  },
  {
    "text": "So like in the 2-3\ntree, B is equal to 2, and this is a 2-3 tree.",
    "start": "422650",
    "end": "428840"
  },
  {
    "text": " So the 2 refers to-- you\ncan have either two children",
    "start": "428840",
    "end": "438949"
  },
  {
    "text": "or you can have three children. And so the upper bound on\nchildren is 2B minus 1.",
    "start": "438950",
    "end": "444520"
  },
  {
    "text": " 2B minus 1 is equal to 3. So you can have two\nor three children.",
    "start": "444520",
    "end": "452180"
  },
  {
    "text": "And correspondingly, you\ncan have either one or two keys in a node.",
    "start": "452180",
    "end": "457250"
  },
  {
    "text": "Make sense? AUDIENCE: Yeah. PROFESSOR: Cool. OK So coming back to this. So the root does not\nhave a lower bound.",
    "start": "457251",
    "end": "464630"
  },
  {
    "text": "The root can have one\nchild in any tree. So you have a B equal\nto 5 tree, the root",
    "start": "464630",
    "end": "470355"
  },
  {
    "text": "can still have\none child-- sorry. Not one child, one key\nelement, two children.",
    "start": "470355",
    "end": "475479"
  },
  {
    "text": "All right. It's good. Also it's completely balanced. So all the leaves\nare the same depth.",
    "start": "475480",
    "end": "484310"
  },
  {
    "start": "484310",
    "end": "499330"
  },
  {
    "text": "So you can see it here, right? So you can't have a\ndangling node here.",
    "start": "499330",
    "end": "504350"
  },
  {
    "text": "This is not allowed. You have to have a leaf. You have to have\nsomething going down, and everything ends\nat the same level.",
    "start": "504350",
    "end": "511400"
  },
  {
    "text": "All right. So that's the thing. So also the leaves obviously\ndon't have children,",
    "start": "511400",
    "end": "516519"
  },
  {
    "text": "so this condition is\nviolated by the leaf.",
    "start": "516520",
    "end": "523130"
  },
  {
    "text": "So that's the basic\nstructure of a B-tree. ",
    "start": "523130",
    "end": "529101"
  },
  {
    "text": "So the first operation\nwe'll consider on B-trees is searching. So that should be\nrelatively straightforward.",
    "start": "529101",
    "end": "535160"
  },
  {
    "text": "So remember how searching is\ndone in the binary search tree. You bring in a value\nx compared to the key.",
    "start": "535160",
    "end": "541899"
  },
  {
    "text": "Let's say x is less than\nK, you go down this path. Let's say x is greater than\nK, you go down this path.",
    "start": "541900",
    "end": "548120"
  },
  {
    "text": "So similarly in a B-tree. So let's say we\nbring in a value. Let's say you are\nlooking for 20.",
    "start": "548120",
    "end": "555770"
  },
  {
    "text": "So you bring in 20\ncompared to this. 20 is less than 30,\nso you go down here.",
    "start": "555770",
    "end": "561190"
  },
  {
    "text": "Now you have two values. So where does 20 fit in here? Not here. Not here.",
    "start": "561190",
    "end": "566350"
  },
  {
    "text": "It fits here. OK. Go down this tree. You find 20, that's it. So in general, you bring in a\nkey K, you look at this node,",
    "start": "566350",
    "end": "577410"
  },
  {
    "text": "and you go through\nall the values. So something I forgot to\nmention, which should be clear.",
    "start": "577410",
    "end": "583589"
  },
  {
    "text": "All the keys in a node, they're\nsorted, one after the other. So your values go like this.",
    "start": "583590",
    "end": "589350"
  },
  {
    "text": "So they're increasing\nin this way. Make sense?",
    "start": "589350",
    "end": "594835"
  },
  {
    "text": "So you bring in a key. Look at all the keys in\nthe node you're looking at,",
    "start": "594835",
    "end": "599900"
  },
  {
    "text": "pick the place where K fits\nin, unless it's already in the node. Then you're done. You've found it. Otherwise, let's say K fits\nin between these two guys.",
    "start": "599900",
    "end": "608850"
  },
  {
    "text": "So you go down this\nchild and continue. So searching with log\nn, similar to BSTs.",
    "start": "608850",
    "end": "615940"
  },
  {
    "text": " So searching is not\nvery interesting.",
    "start": "615940",
    "end": "621835"
  },
  {
    "start": "621835",
    "end": "638480"
  },
  {
    "text": "So next is insertion. ",
    "start": "638480",
    "end": "644440"
  },
  {
    "text": "So insertion is a little more\ninteresting than searching. So what you do in\ninsertion is you-- [SIDE CONVERSATION]",
    "start": "644440",
    "end": "669019"
  },
  {
    "text": "PROFESSOR: So before we resume,\ndoes anyone have any questions about the structure of B-trees. We rushed through\nthat quite fast.",
    "start": "669020",
    "end": "676860"
  },
  {
    "text": "About how B-trees\nare structured, everyone good with that? OK, also any questions about\nsearching in a B-tree or a BST?",
    "start": "676860",
    "end": "685294"
  },
  {
    "text": "Go ahead. AUDIENCE: Just a\nrandom question. So the 38 there, it can\nonly have two children.",
    "start": "685294",
    "end": "691722"
  },
  {
    "text": "PROFESSOR: Yep. So one value, two children. So you have some\nnode in the B-tree,",
    "start": "691722",
    "end": "699760"
  },
  {
    "text": "and whatever is\nbelow it is split into parts by the elements. So if you have n\nelements, it splits it up",
    "start": "699760",
    "end": "705100"
  },
  {
    "text": "into n plus 1 segments.  AUDIENCE: You said that the root\ndidn't have to follow the root.",
    "start": "705100",
    "end": "713087"
  },
  {
    "text": "PROFESSOR: No. AUDIENCE: Why is that? PROFESSOR: Well, you'll see when\nwe do insertion and deletion why that's necessary. But essentially you can\nconsider that it's an invariant.",
    "start": "713087",
    "end": "722350"
  },
  {
    "text": "And all we have to do is\npreserve that invariant. So the root, it has to\nstill have less than two--",
    "start": "722350",
    "end": "728230"
  },
  {
    "text": "it still has to have\nthe upper bound. But it doesn't need\nto have a lower bound.",
    "start": "728230",
    "end": "734569"
  },
  {
    "text": "AUDIENCE: How do you choose B? PROFESSOR: Well, the whole\n[INAUDIBLE] cache size,",
    "start": "734569",
    "end": "740120"
  },
  {
    "text": "so something with that. So you probably want 2B to\nbe about your cache size so you can get the\nwhole block in one go.",
    "start": "740120",
    "end": "745759"
  },
  {
    "text": "I've never implemented\na B-tree, so I don't know how it's\nactually done in practice. But that is the reason, so\nI'm assuming it's something",
    "start": "745760",
    "end": "751399"
  },
  {
    "text": "to do with the cache length. AUDIENCE: Is the 14, is it\na child of both 10 and 17?",
    "start": "751399",
    "end": "758102"
  },
  {
    "text": "PROFESSOR: Well, it's\nnot a child of either. It's a child of this node. So this node has two\nelements, so it's",
    "start": "758102",
    "end": "763570"
  },
  {
    "text": "being divided-- dividing the\ninterval up into three parts. So it's in between 10\nand 17 is the point here.",
    "start": "763570",
    "end": "769800"
  },
  {
    "text": "AUDIENCE: So then this\nnode has five children? PROFESSOR: Sorry?",
    "start": "769800",
    "end": "775857"
  },
  {
    "text": "No, it has three children. So don't think of\nevery key as a node. Think of the whole\nunit as a node.",
    "start": "775857",
    "end": "784000"
  },
  {
    "text": "So it's not necessarily--\nin a binary search tree, you have one element,\nbut here every node has multiple elements.",
    "start": "784000",
    "end": "789050"
  },
  {
    "text": "That's the point of it. Anyone else?",
    "start": "789050",
    "end": "794840"
  },
  {
    "text": "OK, let's start with searching. So let's leave this here.",
    "start": "794840",
    "end": "802236"
  },
  {
    "start": "802236",
    "end": "810210"
  },
  {
    "text": "Well, you have the formulas\nup there, so that's good. ",
    "start": "810210",
    "end": "822570"
  },
  {
    "text": "Insertion. Let's start with insertion. We already did searching. ",
    "start": "822570",
    "end": "832390"
  },
  {
    "text": "So insertion is you\nbring in a new key K, and you want to insert\nit into the tree. So what's the problem\nthat could happen? You can find the location where\nyou want to insert it, just",
    "start": "832390",
    "end": "839500"
  },
  {
    "text": "like searching. You just go down the tree and\nfind where it should be placed. But once you do place\nit, you have a problem.",
    "start": "839500",
    "end": "845280"
  },
  {
    "text": "What is the problem? The problem is that one of your\nnodes will become overfull.",
    "start": "845280",
    "end": "850569"
  },
  {
    "text": "Whatever. It'll overflow, and\nthat's not what you want. So you want some way\nso you can manage this.",
    "start": "850570",
    "end": "856760"
  },
  {
    "text": "How do you manage this? So I have this lovely prop here,\nwhich I hope to demonstrate.",
    "start": "856760",
    "end": "865190"
  },
  {
    "text": "OK.  So here we have B equal to 4.",
    "start": "865190",
    "end": "872770"
  },
  {
    "text": "So let's first figure\nout the number of keys.",
    "start": "872770",
    "end": "879110"
  },
  {
    "text": "So what is the minimum number of\nkeys, anyone for B equal to 4? AUDIENCE: Three. PROFESSOR: Three, precisely.",
    "start": "879110",
    "end": "884125"
  },
  {
    "text": "So what is the maximum\nnumber of keys?",
    "start": "884125",
    "end": "889688"
  },
  {
    "text": "AUDIENCE: Six. PROFESSOR: 4 into\n2 minus 3, yeah. Correct.",
    "start": "889688",
    "end": "895000"
  },
  {
    "text": "3, 4. It's not seven, there's\na strictly less than sign somewhere.",
    "start": "895000",
    "end": "900090"
  },
  {
    "text": "Yes. And you'll see why it's\nnot seven in a minute.",
    "start": "900090",
    "end": "905198"
  },
  {
    "text": "[LAUGHTER] Oh. Hypocritical of me. ",
    "start": "905198",
    "end": "911640"
  },
  {
    "text": "All right. So as you can see,\n1, 2, 3, 4, 5, 6, 7. So some insertion happened.",
    "start": "911640",
    "end": "918110"
  },
  {
    "text": "Is the writing clear? Can everyone read the numbers? 49 looks a little skewed.",
    "start": "918110",
    "end": "923750"
  },
  {
    "text": "Anyway, essentially\nthese are all sorted. This is the parent node. Doesn't matter what's over here. All that matters is 8, 56,\nand whatever's in between.",
    "start": "923750",
    "end": "933100"
  },
  {
    "start": "933100",
    "end": "938899"
  },
  {
    "text": "So what we do when we\nhave an overfull node is something that's\ncalled a split operation. So split.",
    "start": "938900",
    "end": "945729"
  },
  {
    "text": "And there's something\nwhich is called a merge, which we'll\ncome to later when we're doing deletion. But a split is--\nvery intuitively,",
    "start": "945729",
    "end": "952720"
  },
  {
    "text": "it splits the node\ninto two parts. So what it does is when\nyou have an overfull node-- so the number of\nelements here is what?",
    "start": "952720",
    "end": "959700"
  },
  {
    "text": "2B minus 1, which is\njust 1 over the max. So what do you do is you\ntake the middle element",
    "start": "959700",
    "end": "966209"
  },
  {
    "text": "and remove it. and now you split the\nnode into two parts.",
    "start": "966210",
    "end": "971800"
  },
  {
    "text": "Observe that there are\nthree here and three here, which is perfect. And now what you do\nwith the middle node--",
    "start": "971800",
    "end": "977860"
  },
  {
    "text": "so now you're\nactually disrupting the structure of the\ntree, because there was one pointer going in.",
    "start": "977860",
    "end": "983062"
  },
  {
    "text": "There was one child. And now you have two children. So somehow you need to\nadjust the parent node, because the parent node\nhad only one child.",
    "start": "983062",
    "end": "990090"
  },
  {
    "text": "Well, at least there are other\nchildren off to the side. But here it had only one child,\nand now it's split apart.",
    "start": "990090",
    "end": "996899"
  },
  {
    "text": "So you do something very simple. You just insert\nthis guy in here.",
    "start": "996900",
    "end": "1002675"
  },
  {
    "text": "And then you say,\noh, this points here, and this points here. Make sense? ",
    "start": "1002675",
    "end": "1010310"
  },
  {
    "text": "I'm going to get\nrid of these two. ",
    "start": "1010310",
    "end": "1019850"
  },
  {
    "text": "And you can even\nconvince yourself that this preserves all\nthe nice properties.",
    "start": "1019850",
    "end": "1024910"
  },
  {
    "text": "So your children have\nnicely fallen back into their interval.",
    "start": "1024910",
    "end": "1031589"
  },
  {
    "text": "Your sequence is\ncompletely correct, because this was the\nmiddle element of this. So this divides this\ninterval properly.",
    "start": "1031589",
    "end": "1038329"
  },
  {
    "text": "This is also between 8 and 56,\nbecause this was in this node. So all the properties. But there's one property\nthat is a problem.",
    "start": "1038329",
    "end": "1045050"
  },
  {
    "text": "So you have just increased the\nsize of the parent node by 1. So now it's possible that the\nparent node has overflowed.",
    "start": "1045050",
    "end": "1052750"
  },
  {
    "text": "So what do you do? You split it again. And split it again. And if at any\npoint, you're fine,",
    "start": "1052750",
    "end": "1059544"
  },
  {
    "text": "you look at the parent node\nand go, OK, that's fine. That's in the range. But every time it overflows,\nyou can keep going.",
    "start": "1059544",
    "end": "1065280"
  },
  {
    "text": "And how many times\ncan you do this? You can do this all\nthe way up to the root. And when you reach the\nroot, either it's fine",
    "start": "1065280",
    "end": "1071710"
  },
  {
    "text": "or the root is too big. It's reached 2B minus 1. And then you split\nthe root, and you get one single\n[INAUDIBLE] up there.",
    "start": "1071710",
    "end": "1078720"
  },
  {
    "text": "So that, in answer\nto your question, that is why you need that\nproperty in some sense. Not a very convincing\nargument, but sort of.",
    "start": "1078720",
    "end": "1086750"
  },
  {
    "text": "So let's actually\ndo an insertion in this tree we have here. So we are going to insert 16.",
    "start": "1086750",
    "end": "1093600"
  },
  {
    "start": "1093600",
    "end": "1100250"
  },
  {
    "text": "So 16 comes in here. It's less than 30,\nit goes to the left.",
    "start": "1100250",
    "end": "1105450"
  },
  {
    "text": "It's between 10 and 17,\nit goes in the middle. 16. And it's greater than\n14, so we add 16 here.",
    "start": "1105450",
    "end": "1113480"
  },
  {
    "start": "1113480",
    "end": "1134150"
  },
  {
    "text": "All right. That seems good. All the properties fine. This still has two elements,\nwhich is the maximum,",
    "start": "1134150",
    "end": "1139659"
  },
  {
    "text": "but it's good. It doesn't overflow. Let's insert something else. Let's insert 2.",
    "start": "1139660",
    "end": "1145830"
  },
  {
    "text": " So 2 goes to 30,\ngoes down, goes down.",
    "start": "1145830",
    "end": "1151860"
  },
  {
    "text": "And we have a problem, because\n2 has overflowed this node. So we split.",
    "start": "1151860",
    "end": "1158590"
  },
  {
    "text": "And the way we split is we\ntake the middle element. So we split the node here. ",
    "start": "1158590",
    "end": "1165000"
  },
  {
    "text": "And 3 goes up to the\nparent, so 3 goes here.",
    "start": "1165000",
    "end": "1171680"
  },
  {
    "text": "And all good, except for\nthe parent has overflowed.",
    "start": "1171680",
    "end": "1178015"
  },
  {
    "text": "So what do we do\nwith the parent? We split the parent again. And this time, it's right down\nthe middle, the 10 goes up.",
    "start": "1178015",
    "end": "1184870"
  },
  {
    "text": "So OK, let's get rid of this. So now that we split the\nparent, the 10 goes up here.",
    "start": "1184870",
    "end": "1193090"
  },
  {
    "text": "And you're good. It's a bit cluttered, so\nlet me reposition the 17.",
    "start": "1193090",
    "end": "1198510"
  },
  {
    "start": "1198510",
    "end": "1207940"
  },
  {
    "text": "Did those two\noperations make sense? Questions? AUDIENCE: If your node size\n[INAUDIBLE] number of--",
    "start": "1207940",
    "end": "1217870"
  },
  {
    "text": "PROFESSOR: So just pick\nthe-- first of all-- OK. ",
    "start": "1217870",
    "end": "1222970"
  },
  {
    "text": "If the way we're doing it--\nwhen your node is overflowing, it's returning only one\nthing at a time, right? AUDIENCE: Yeah.",
    "start": "1222970",
    "end": "1228000"
  },
  {
    "text": "PROFESSOR: So if your\nnode is overflowing, it'll be 2t minus 1, which\nis an odd number always. There might be a case where\nyou get an even number",
    "start": "1228000",
    "end": "1234670"
  },
  {
    "text": "if you do something weird. Maybe you have a-- there are\ndifferent ways to do B-trees. But if it does, you can probably\npick the one, either of them,",
    "start": "1234670",
    "end": "1241710"
  },
  {
    "text": "and then [INAUDIBLE]. I'm not sure about that. I'll look into it. But in general, if you're doing\nit this way, it's always odd.",
    "start": "1241710",
    "end": "1248910"
  },
  {
    "text": "So you don't have\nto worry about that. Anything else? AUDIENCE: If we did reach\nall the way to the root",
    "start": "1248910",
    "end": "1256908"
  },
  {
    "text": "and then went one more up-- PROFESSOR: So what\nyou would do is-- AUDIENCE: That root would have-- PROFESSOR: That root would\nhave two children, one element",
    "start": "1256908",
    "end": "1263070"
  },
  {
    "text": "and two children, which is\nfine because we didn't put that restriction on the root. That's good. How we doing on time?",
    "start": "1263070",
    "end": "1268670"
  },
  {
    "text": "OK, we have some time. Let's jump into deletion, unless\nanyone else has questions.",
    "start": "1268670",
    "end": "1274966"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] any point? PROFESSOR: So-- oh, yeah. That's a good-- thank you. So you are going\ndown to the leaves",
    "start": "1274966",
    "end": "1281850"
  },
  {
    "text": "at most-- at most\nof the leaf ones, and you're going back up one. So it's like log n plus\nlog n, and you're good.",
    "start": "1281850",
    "end": "1287880"
  },
  {
    "text": " Let's do deletion. ",
    "start": "1287880",
    "end": "1303149"
  },
  {
    "text": "So deletion is more complicated. So the reason, it'll be clear.",
    "start": "1303150",
    "end": "1308520"
  },
  {
    "text": "So the problem in deletion\nwill be remove a node and a node is now underfull. So it has less than B minus\n1 keys in it suddenly.",
    "start": "1308520",
    "end": "1317400"
  },
  {
    "text": "So let's turn this around. ",
    "start": "1317400",
    "end": "1324950"
  },
  {
    "text": "So again B equal to 4. This node is a problem. Only two things in it.",
    "start": "1324950",
    "end": "1331610"
  },
  {
    "text": "So what do we do? So before we go into that,\nlet's make this assumption",
    "start": "1331610",
    "end": "1337980"
  },
  {
    "text": "that-- there are two\nsteps to deletion. The first step is making\nthe deletion at a leaf.",
    "start": "1337980",
    "end": "1344950"
  },
  {
    "text": "How do you do that? So the way you make a deletion\nat a leaf is, let's say, you have a key.",
    "start": "1344950",
    "end": "1350100"
  },
  {
    "text": "You come down in your\nB-tree, and you add a node. Oh, this key needs\nto be deleted.",
    "start": "1350100",
    "end": "1358017"
  },
  {
    "text": "But it's not a leaf. So what do you do? So essentially what you do is\nyou look at these two subtrees.",
    "start": "1358017",
    "end": "1366230"
  },
  {
    "text": "So it might have\nonly one subtree. If it's at the end,\nit will have only one. Actually, no, that's not true.",
    "start": "1366230",
    "end": "1371360"
  },
  {
    "text": "Ignore that. If it's not a leaf,\nit has two subtrees. So either take the\nrightmost element",
    "start": "1371360",
    "end": "1377130"
  },
  {
    "text": "in this subtree,\nwhich is a leaf, because you can always\nkeep going down, right, right, right, right\ntill you get to a leaf,",
    "start": "1377130",
    "end": "1382333"
  },
  {
    "text": "or the leftmost element\nin this subtree. So that is just the next\nelement after this guy.",
    "start": "1382333",
    "end": "1389310"
  },
  {
    "text": "So you delete this, and\nyou bring this up to here. We'll do an example of\nthis, and it'll be clearer.",
    "start": "1389310",
    "end": "1396909"
  },
  {
    "text": "So you take either the rightmost\nelement in the left subtree or the leftmost element\nin the right subtree and bring it up here.",
    "start": "1396910",
    "end": "1402620"
  },
  {
    "text": "So you sort of like move\nthe deletion to the leaf. And now it's easier\nto deal with. So we will come to that.",
    "start": "1402620",
    "end": "1408310"
  },
  {
    "text": "Also just note that this is not\nwhat is done in the recitation. This algorithm for\ndeletion, I think,",
    "start": "1408310",
    "end": "1414580"
  },
  {
    "text": "is not done in the\nrecitation notes. This is a different thing, which\nI'll send out a link for later. But I believe it\nworks, because I got it",
    "start": "1414580",
    "end": "1420540"
  },
  {
    "text": "from the [INAUDIBLE] reference. So once you move to the leaf--\nso now let's look at this.",
    "start": "1420540",
    "end": "1429160"
  },
  {
    "text": "So this is a node\nthat is underfull. And you want to fix it. So how do you fix it?",
    "start": "1429160",
    "end": "1435040"
  },
  {
    "text": "So what do is you\nlook at its siblings. So in this case,\nit has one sibling.",
    "start": "1435040",
    "end": "1440280"
  },
  {
    "text": "It can have up to two siblings. It can have left or right. So what you do is you\nlook at a sibling.",
    "start": "1440280",
    "end": "1446390"
  },
  {
    "text": "And this sibling is\nactually 1 over the minimum. And if it's 1 over the\nminimum, then it's really easy.",
    "start": "1446390",
    "end": "1453460"
  },
  {
    "text": "All you have to do is take\nthe leftmost thing here-- or if it's the\nsibling on this side, take the rightmost thing here.",
    "start": "1453460",
    "end": "1461039"
  },
  {
    "text": "And look at its parent. So you bring the parent down,\nand you move the sibling up.",
    "start": "1461040",
    "end": "1470330"
  },
  {
    "text": "And there we go. So you basically are rotating\nthe thing into place.",
    "start": "1470330",
    "end": "1475950"
  },
  {
    "text": "So you move the parent down\ninto the underfull node, and you replace the parent\nby the leftmost thing here.",
    "start": "1475950",
    "end": "1483329"
  },
  {
    "text": "Everyone see why that\npreserves everything? ",
    "start": "1483329",
    "end": "1490150"
  },
  {
    "text": "And the child is also shifted. Make sure you see that. So the child which was in this\nsubtree is now in this subtree.",
    "start": "1490150",
    "end": "1497190"
  },
  {
    "text": " But then you can\nhave the situation where you don't\nhave a nice sibling",
    "start": "1497190",
    "end": "1504620"
  },
  {
    "text": "to take care of your problems. So in this scenario, the\nsibling is barely full.",
    "start": "1504620",
    "end": "1510490"
  },
  {
    "text": "It has three things, and it\ncan't donate anything to you. So what do you do in that case? So then you do something which\nis a parallel of the split",
    "start": "1510490",
    "end": "1518169"
  },
  {
    "text": "operation. You do a merge. So what do you have? So here you have B minus 2,\nand here you have B minus 1.",
    "start": "1518170",
    "end": "1530490"
  },
  {
    "text": "And you get 2B minus 3. Well, you've got\nanother element. You also take the parent.",
    "start": "1530490",
    "end": "1536530"
  },
  {
    "text": "So how do you do the merge. I just want to show\nyou the merge first. So the way you do it is\nyou move the parent down,",
    "start": "1536530",
    "end": "1541891"
  },
  {
    "text": "and you merge these two.  Seems OK?",
    "start": "1541891",
    "end": "1548380"
  },
  {
    "text": "So you move the parent node\ndown and merge these two. And, well, now this\ncomes together,",
    "start": "1548380",
    "end": "1553995"
  },
  {
    "text": "and this points\ninto the new node.  Sort of clear what's going on?",
    "start": "1553995",
    "end": "1562530"
  },
  {
    "text": "Questions? Yes? AUDIENCE: So now the\nparent is underfull?",
    "start": "1562530",
    "end": "1569815"
  },
  {
    "text": "PROFESSOR: Well, so you\nhave-- yeah, exactly. So you have decreased\nthe size of the parent, so it might be underfull.",
    "start": "1569815",
    "end": "1575070"
  },
  {
    "text": "So you propagate. Anything else? AUDIENCE: So are these\nall different techniques",
    "start": "1575070",
    "end": "1580630"
  },
  {
    "text": "for doing that? PROFESSOR: So there\nare two cases. So either you have a sibling\nwhich has extra nodes to donate",
    "start": "1580630",
    "end": "1587110"
  },
  {
    "text": "to you or you don't. If you don't, then\nyou have to do this. AUDIENCE: But what\nabout that case?",
    "start": "1587110",
    "end": "1593335"
  },
  {
    "text": "Or is that just like-- PROFESSOR: No, that is\nmoving it down to the leaf. Once you move the\ndeletion down to the leaf,",
    "start": "1593335",
    "end": "1598708"
  },
  {
    "text": "so here we have something now. And now you move it\nall the way back up.",
    "start": "1598708",
    "end": "1604100"
  },
  {
    "text": "So there are two cases. Let's do an example. That'll make it clearer. How are we doing on time?",
    "start": "1604100",
    "end": "1610366"
  },
  {
    "text": "Five minutes, all right.  So we are going to delete 38.",
    "start": "1610366",
    "end": "1618435"
  },
  {
    "text": "38 is gone. But we want to move\nit down to the leaf. So let's take an element.",
    "start": "1618435",
    "end": "1624580"
  },
  {
    "text": "Let's say we take 41. So we take 41 and\nmove it up here.",
    "start": "1624580",
    "end": "1633560"
  },
  {
    "text": "41 is the leftmost thing\nin the right subtree. So this vacancy doesn't\nreally affect anything,",
    "start": "1633560",
    "end": "1639440"
  },
  {
    "text": "because this node still has\nthe right number of things, because it's still got one\nthing in it, which is good.",
    "start": "1639440",
    "end": "1644630"
  },
  {
    "text": "So you're fine. This is now just 48. Let's say we now delete 41.",
    "start": "1644630",
    "end": "1652850"
  },
  {
    "text": "So 41 is gone. So now that 41 is\ngone, what do you",
    "start": "1652850",
    "end": "1661480"
  },
  {
    "text": "replace this blank spot with? ",
    "start": "1661480",
    "end": "1667840"
  },
  {
    "text": "Either this or this, right? Doesn't matter. So let's just do this\none for consistency.",
    "start": "1667840",
    "end": "1673900"
  },
  {
    "text": "So you have 48 here. And now you a problem\nbecause you have a blank box.",
    "start": "1673900",
    "end": "1679230"
  },
  {
    "text": "So can you rotate? Yes, no?",
    "start": "1679230",
    "end": "1684460"
  },
  {
    "text": "No, right? Because sibling is barely full.",
    "start": "1684460",
    "end": "1689860"
  },
  {
    "text": "So what can you do? So you merge. And how do you merge? You move the 48 down, and\nyou combine everything.",
    "start": "1689860",
    "end": "1697067"
  },
  {
    "text": "So this is kind of\nhard to understand, but this is like a\nzero-element node. ",
    "start": "1697067",
    "end": "1703960"
  },
  {
    "text": "So when you merge, you\nhave 32, 48, and nothing, so it's just 32 and 48. So what you do is--\nso this seems weird,",
    "start": "1703960",
    "end": "1718769"
  },
  {
    "text": "but this is just\nanother empty node. You just propagated\nthe emptiness upwards. ",
    "start": "1718770",
    "end": "1726519"
  },
  {
    "text": "Now you take this empty node,\nand you look for its siblings. Again, its sibling is--\nwell, it's barely full.",
    "start": "1726520",
    "end": "1734330"
  },
  {
    "text": "So what do you do now? You bring the 30 down,\nand you merge this. So let's do that. ",
    "start": "1734330",
    "end": "1746080"
  },
  {
    "text": "30 comes down, and there we go. ",
    "start": "1746080",
    "end": "1753410"
  },
  {
    "text": "Looks fine? Does that tree look good? Questions about the operation? ",
    "start": "1753410",
    "end": "1760399"
  },
  {
    "text": "I'm sure it was not\nclear, but-- anything?",
    "start": "1760400",
    "end": "1767050"
  },
  {
    "text": "Make sense? OK, let's do a deletion where\nwe can actually do a rotation.",
    "start": "1767050",
    "end": "1772730"
  },
  {
    "text": "So let's go ahead and delete 20. So you do your searching,\ngo down the tree.",
    "start": "1772730",
    "end": "1778205"
  },
  {
    "text": "You find the 20 under here. So now, OK.",
    "start": "1778205",
    "end": "1783300"
  },
  {
    "text": "So you're left with just--\nactually never mind. We'll do another one. So this doesn't do anything. You lost the 20, and you're\nleft with the 24 this time.",
    "start": "1783300",
    "end": "1791020"
  },
  {
    "text": "So now you delete the 24. So now that you've\ngot rid of the 24, you have a blank box here now.",
    "start": "1791020",
    "end": "1796150"
  },
  {
    "text": " But its sibling is\nnot barely full. It has something to donate.",
    "start": "1796150",
    "end": "1802750"
  },
  {
    "text": "So anyone, which elements\nare going to rotate? AUDIENCE: 17 and 16.",
    "start": "1802750",
    "end": "1807840"
  },
  {
    "text": "PROFESSOR: 16 and 17, right. Cool. So 16 goes up, 17 goes down.",
    "start": "1807840",
    "end": "1816059"
  },
  {
    "text": "And you're done. You're consistent again.  So that was deletion.",
    "start": "1816060",
    "end": "1821880"
  },
  {
    "text": "Those are the two\ncases for deletion. Does that make sense? Anyone?",
    "start": "1821880",
    "end": "1829220"
  },
  {
    "text": "Any questions? OK. So that's all the topics we\nwere supposed to cover today.",
    "start": "1829220",
    "end": "1836420"
  },
  {
    "text": "Any questions about\nany of the operations, any of the other topics,\nlecture, anything?",
    "start": "1836420",
    "end": "1843520"
  },
  {
    "start": "1843520",
    "end": "1844731"
  }
]