[
  {
    "start": "0",
    "end": "158000"
  },
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "6474"
  },
  {
    "start": "6474",
    "end": "24930"
  },
  {
    "text": "MICHAEL SIPSER: Welcome back. I hope you had a\ngood Thanksgiving and all refreshed\nand ready to think",
    "start": "24930",
    "end": "36300"
  },
  {
    "text": "about some theory\nof computation. We're in the homestretch now.",
    "start": "36300",
    "end": "41309"
  },
  {
    "text": "We have this lecture\nand two more to go. And so today, I have for you,\na completion of the theorem",
    "start": "41310",
    "end": "53880"
  },
  {
    "text": "we started before the\nbreak, where we introduced",
    "start": "53880",
    "end": "62370"
  },
  {
    "text": "probabilistic computation and\nwe talked about the class BPP,",
    "start": "62370",
    "end": "69570"
  },
  {
    "text": "as I hope you remember, and\nwe looked, in particular, at these problems involving\nbranching programs, where",
    "start": "69570",
    "end": "80640"
  },
  {
    "text": "we started the proof that the\nproblem of equivalence of two",
    "start": "80640",
    "end": "87630"
  },
  {
    "text": "read-once branching programs\ncan be solved in this class BPP. So what I'm going to do is\nspend the first 15 minutes",
    "start": "87630",
    "end": "96120"
  },
  {
    "text": "or so just reviewing where we\nwere, because we started this,",
    "start": "96120",
    "end": "101440"
  },
  {
    "text": "it feels like a\nlong time ago now. And I just want to make\nsure that you're all",
    "start": "101440",
    "end": "107790"
  },
  {
    "text": "on the same page and we're all\nremembering what we were doing. And then, I will\nfinish off the proof.",
    "start": "107790",
    "end": "115200"
  },
  {
    "text": "And along with doing\nthat, we're going to introduce an\nimportant method.",
    "start": "115200",
    "end": "121350"
  },
  {
    "text": "Well, we started that. We looked at the method of\narithmetization last time. So we'll review that.",
    "start": "121350",
    "end": "127890"
  },
  {
    "text": "We're going to use\nthat again in the work",
    "start": "127890",
    "end": "133980"
  },
  {
    "text": "that we're going to start on\nThursday on interactive proof systems. So this is a kind\nof, in some ways,",
    "start": "133980",
    "end": "139840"
  },
  {
    "text": "both an interesting theorem in\nits own right, and a warm up for what we're going to\nbe doing in the last topic",
    "start": "139840",
    "end": "150540"
  },
  {
    "text": "of the semester. OK.",
    "start": "150540",
    "end": "156600"
  },
  {
    "text": "So let's just remember\nwhat we were doing.",
    "start": "156600",
    "end": "162910"
  },
  {
    "text": "So we introduced\nprobabilistic Turing machines. So those are these\nmachines that have--",
    "start": "162910",
    "end": "171240"
  },
  {
    "text": "a kind of\nnon-deterministic machine, but there's a different\nrule for acceptance. And these are also\nnon-deterministic machines",
    "start": "171240",
    "end": "179760"
  },
  {
    "text": "which can either\nmake one choice, just to have a deterministic\nmove at a step,",
    "start": "179760",
    "end": "185460"
  },
  {
    "text": "or they can make two choices. And when the machine\nmakes two choices, we actually think of there\nbeing a probability there,",
    "start": "185460",
    "end": "192420"
  },
  {
    "text": "where the machine\nis tossing a coin to decide which branch to go on.",
    "start": "192420",
    "end": "197980"
  },
  {
    "text": "So with that, there is a\ntree of possible branches. And the probability of\nsome particular branch",
    "start": "197980",
    "end": "205170"
  },
  {
    "text": "is going to be 1 over\n2 to the number of coin tosses on that branch.",
    "start": "205170",
    "end": "211080"
  },
  {
    "text": "And so we then use that\nto define the probability that the machine\naccepts, which is",
    "start": "211080",
    "end": "218400"
  },
  {
    "text": "the sum over all of\nthe probabilities of the accepting branches. And the probability\nthat it rejects",
    "start": "218400",
    "end": "223890"
  },
  {
    "text": "is 1 minus the probability\nthat it accepts. ",
    "start": "223890",
    "end": "229170"
  },
  {
    "text": "So thinking about it-- this captures the\nidea that if you just",
    "start": "229170",
    "end": "237510"
  },
  {
    "text": "run the machine on a random set\nof inputs from the coin tosses,",
    "start": "237510",
    "end": "247120"
  },
  {
    "text": "what the probability that\nyou're going to end up with the machine accepting. That's the probability\nof acceptance,",
    "start": "247120",
    "end": "254020"
  },
  {
    "text": "defined in that way. Now, if we're thinking\nabout the machine deciding some particular\nlanguage, it's supposed",
    "start": "254020",
    "end": "261940"
  },
  {
    "text": "to accept the strings\nin the language and reject the strings which\nare not in the language. But because of the probabilistic\nnature of the machine,",
    "start": "261940",
    "end": "268449"
  },
  {
    "text": "it might get the wrong\nanswer on some branches. And so we say that\na machine decides",
    "start": "268450",
    "end": "273860"
  },
  {
    "text": "a language with a certain\nerror probability, means that the probability\nof getting the wrong answer",
    "start": "273860",
    "end": "279160"
  },
  {
    "text": "is going to be, at most,\nthat error probability epsilon over all of the\npossible inputs to the machine.",
    "start": "279160",
    "end": "285729"
  },
  {
    "text": "So if we say that the machine\nis error probability 1/3 that means that it gets the\nright answer for every string",
    "start": "285730",
    "end": "293130"
  },
  {
    "text": "with probability at least 2/3. ",
    "start": "293130",
    "end": "299040"
  },
  {
    "text": "OK, so that led us to the\ndefinition of this complexity class BPP, which I don't\neven remember if I told you",
    "start": "299040",
    "end": "306750"
  },
  {
    "text": "what it stands for. It's bounded probabilistic\npolynomial time. That's what BPP stands for.",
    "start": "306750",
    "end": "312900"
  },
  {
    "text": " The \"bounded\" means is\nbounded away from 1/2",
    "start": "312900",
    "end": "318740"
  },
  {
    "text": "because we don't want\nto allow the machine to have probability 1/2,\nbecause then bad things happen.",
    "start": "318740",
    "end": "326237"
  },
  {
    "text": "The machine can just\ntoss a coin when it decides to make\nan answer, and not",
    "start": "326238",
    "end": "331680"
  },
  {
    "text": "really give us any information. Then, we also went over\nthe amplification lemma.",
    "start": "331680",
    "end": "341370"
  },
  {
    "text": "We did not give\nthe proof, but we went over the statement\nof the theorem. The proof is really\njust a calculation",
    "start": "341370",
    "end": "346680"
  },
  {
    "text": "that you can drive down that\nerror probability to something extremely tiny just by\nbasically repeating the machine",
    "start": "346680",
    "end": "355650"
  },
  {
    "text": "and taking the majority\nvote of what it does on several different runs. If you run the machine\n100 times and you",
    "start": "355650",
    "end": "363210"
  },
  {
    "text": "see if it's mostly accepting,\nthen you want to accept. And the chances that the\nmachine was really biased",
    "start": "363210",
    "end": "370169"
  },
  {
    "text": "toward rejecting,\neven though you're in your sample see mostly\nacceptance, is extremely small. And you can calculate that, but\nyou can make that very tiny.",
    "start": "370170",
    "end": "377820"
  },
  {
    "text": "So small that, for all\npractical purposes, it's really giving\nyou the right answer.",
    "start": "377820",
    "end": "382870"
  },
  {
    "text": "But it's not deterministic. So it's not quite\n100% guaranteed. ",
    "start": "382870",
    "end": "390080"
  },
  {
    "text": "And the way I like\nto think about BPP",
    "start": "390080",
    "end": "395930"
  },
  {
    "text": "in terms of the computation\ntree of the machine, so that when it's accepting,\nmost of the branches",
    "start": "395930",
    "end": "403010"
  },
  {
    "text": "are accepting, weighted by\ntheir probability, of course.",
    "start": "403010",
    "end": "408150"
  },
  {
    "text": "So the there are many accepting\nbranches when you're accepting, and many rejecting branches\nwhen you're rejecting.",
    "start": "408150",
    "end": "415580"
  },
  {
    "text": "So just another way of\nsaying the same thing. Now, we're going to jump\nright in with a check-in.",
    "start": "415580",
    "end": "424120"
  },
  {
    "text": "And this is a little bit\nmore, not exactly the material of the course, but a little bit\nmore on the philosophical side.",
    "start": "424120",
    "end": "431139"
  },
  {
    "text": "But let's just see\nhow you do with it. When you're actually running\na probabilistic machine,",
    "start": "431140",
    "end": "440060"
  },
  {
    "text": "you imagine the\nmachine, as we're kind of informally describing\nit, is tossing coins.",
    "start": "440060",
    "end": "447330"
  },
  {
    "text": "Every time it has a\nnon-deterministic-- every time it has a choice.",
    "start": "447330",
    "end": "452790"
  },
  {
    "text": "So it choice tosses a coin\nto decide which way to go. Of course, a real computer\ndoes not have a coin to toss,",
    "start": "452790",
    "end": "460260"
  },
  {
    "text": "presumably. Well, maybe you might\nactually build some hardware into the machine\nthat lets it access",
    "start": "460260",
    "end": "466110"
  },
  {
    "text": "randomness in some sense. Maybe it uses some\nquantum mechanical effect",
    "start": "466110",
    "end": "471509"
  },
  {
    "text": "to get some random value\nor maybe it uses the timer. I'm not exactly sure.",
    "start": "471510",
    "end": "477600"
  },
  {
    "text": "You can imagine having a bunch\nof ways of implementing that. A typical way that people\nimplement randomness",
    "start": "477600",
    "end": "486510"
  },
  {
    "text": "in an algorithm is to use\na pseudo random number generator, which is a\nprocedure that might give you",
    "start": "486510",
    "end": "494250"
  },
  {
    "text": "some kind of a value that looks\nrandom, but may not actually be random.",
    "start": "494250",
    "end": "500850"
  },
  {
    "text": "It's, for example, giving\nyou the digits of pi. If you want binary, expressing\npi as a binary number,",
    "start": "500850",
    "end": "514469"
  },
  {
    "text": "then you might calculate the\ndifferent successive digits of pi and use that as for\nyour random number generator.",
    "start": "514470",
    "end": "522237"
  },
  {
    "text": "Of course, that's a\ndeterministic procedure, so it's not really random. But often, people do use\nthose kinds of things",
    "start": "522237",
    "end": "530399"
  },
  {
    "text": "when they're simulating\nrandom machines. So what do you think\nabout doing that? Could we use a pseudo\nrandom generator",
    "start": "530400",
    "end": "539399"
  },
  {
    "text": "as the source of randomness\nfor our randomized algorithm? ",
    "start": "539400",
    "end": "546190"
  },
  {
    "text": "Yes, or no, or\nwhat do you think? So let's launch a poll on\nthat, so I can see what",
    "start": "546190",
    "end": "552970"
  },
  {
    "text": "your opinion about using\npseudo random number generators instead of true\nrandomness for our algorithms.",
    "start": "552970",
    "end": "560529"
  },
  {
    "text": " I'll give you a few seconds,\na minute to weigh in on that.",
    "start": "560530",
    "end": "568420"
  },
  {
    "text": " OK. We're going to close this down.",
    "start": "568420",
    "end": "573680"
  },
  {
    "text": "Everybody's participated\nwho wants to? 1, 2, 3. ",
    "start": "573680",
    "end": "581529"
  },
  {
    "text": "OK. Yeah, I think probably the best\nanswer is A. Let's take a look.",
    "start": "581530",
    "end": "589610"
  },
  {
    "text": "There were a couple of answers\nhere that, really, that don't make-- that aren't as good. I would say, B,\nwell, usually people",
    "start": "589610",
    "end": "597830"
  },
  {
    "text": "think of pseudo\nrandom generators as pretty fast procedures. They're not that\ninteresting, otherwise.",
    "start": "597830",
    "end": "603829"
  },
  {
    "text": "So I wouldn't say that\nB is a good choice because they're usually\npretty quick to implement.",
    "start": "603830",
    "end": "613070"
  },
  {
    "text": "C is a worse choice, even,\nbecause Turing machines",
    "start": "613070",
    "end": "618410"
  },
  {
    "text": "can do anything that any\nother algorithm can do. So, certainly, if\nthere is such a thing as a pseudo random number\ngenerator, and there is,",
    "start": "618410",
    "end": "625250"
  },
  {
    "text": "then you could implement\nit on the Turing machine. D is kind of an\ninteresting answer",
    "start": "625250",
    "end": "631970"
  },
  {
    "text": "because you're saying, well,\nthat would imply that P equals BPP if you could actually\nsimulate randomness",
    "start": "631970",
    "end": "639260"
  },
  {
    "text": "with a deterministic procedure. But in fact, the reason\nI would not choose D",
    "start": "639260",
    "end": "646310"
  },
  {
    "text": "is because it's\nperfectly conceivable that P does equal BPP.",
    "start": "646310",
    "end": "651740"
  },
  {
    "text": "We don't know that P\nis different from BPP, so it's conceivable\nthat they're equal. And in fact, I think if\nyou polled most complexity",
    "start": "651740",
    "end": "660770"
  },
  {
    "text": "theorists, most\npeople in my field",
    "start": "660770",
    "end": "666200"
  },
  {
    "text": "would believe that P does equal\nBPP just for this very reason,",
    "start": "666200",
    "end": "671930"
  },
  {
    "text": "that if you had sufficiently\ngood pseudo random number generators, you could\nactually eliminate",
    "start": "671930",
    "end": "678200"
  },
  {
    "text": "the probabalism in these\nprobabilistic computations. You could just run them on the\npseudo random number generator.",
    "start": "678200",
    "end": "683899"
  },
  {
    "text": "And in fact, there is\nsome theory around that that has been developed.",
    "start": "683900",
    "end": "689540"
  },
  {
    "text": "But at the present\ntime, we do not know how to prove that there\nwere pseudo random number",
    "start": "689540",
    "end": "695060"
  },
  {
    "text": "generators. And it has some,\nactually, there's actually, in some\nline of this research, has some connection with\nthe P versus NP problem,",
    "start": "695060",
    "end": "701310"
  },
  {
    "text": "but we don't know how\nto prove that there are sufficiently good pseudo\nrandom number generators that",
    "start": "701310",
    "end": "706490"
  },
  {
    "text": "would allow you to run them\non a probabilistic algorithm and have a guaranteed behavior\nwhich is as good as running",
    "start": "706490",
    "end": "714020"
  },
  {
    "text": "truly random numbers into\nthe probabilistic algorithm.",
    "start": "714020",
    "end": "720060"
  },
  {
    "text": "And so the answer\nthat I would pick would be A, that you\ncould use it, sure. You might get the right answer,\nbut it's not guaranteed.",
    "start": "720060",
    "end": "727100"
  },
  {
    "text": "We just don't know\nhow to do the analysis for the pseudo random\nnumber generators. And if you had ones\nthat were good enough,",
    "start": "727100",
    "end": "734460"
  },
  {
    "text": "they would show P\nis equal to BPP. But that might be, in\nfact, the correct--",
    "start": "734460",
    "end": "740360"
  },
  {
    "text": "that might actually be true. OK, so let's continue on.",
    "start": "740360",
    "end": "746710"
  },
  {
    "text": "And remember, now,\nbranching programs. We had these kind of\nnetworks of nodes and edges.",
    "start": "746710",
    "end": "757330"
  },
  {
    "start": "747000",
    "end": "1352000"
  },
  {
    "text": "And there was a procedure,\nwe'll see a couple of examples again, some of the\nones that we had from before where\nyou have branching",
    "start": "757330",
    "end": "765310"
  },
  {
    "text": "programs that look like this. And you have a bunch\nof query nodes.",
    "start": "765310",
    "end": "770350"
  },
  {
    "text": "You look at the settings\nof the variables to decide whether to go\ndown to 0 edge or a 1 edge.",
    "start": "770350",
    "end": "776075"
  },
  {
    "text": "And eventually, you're going\nto end up at an output node, and that's going\nto be the output of the branching program.",
    "start": "776075",
    "end": "781930"
  },
  {
    "text": "And in such a way,\nthese branching programs defined Boolean functions,\nfrom the settings of the input",
    "start": "781930",
    "end": "787000"
  },
  {
    "text": "variables to a 0 or 1 output. Now, you might have\ntwo branching programs",
    "start": "787000",
    "end": "793210"
  },
  {
    "text": "and wonder whether they're\ncomputing the same Boolean function or not. And testing that is a\ncoNP complete problem,",
    "start": "793210",
    "end": "800320"
  },
  {
    "text": "as you're asked to\nshow on your homework. ",
    "start": "800320",
    "end": "806010"
  },
  {
    "text": "Now, if the branching program,\nhowever, has a restriction, namely, that it's\nnot allowed to ask",
    "start": "806010",
    "end": "814260"
  },
  {
    "text": "to query the same variable\nmore than once on a path, then with that restriction, we\ncall it a read-once branching",
    "start": "814260",
    "end": "825180"
  },
  {
    "text": "program. And then, the situation\nfor testing equivalence",
    "start": "825180",
    "end": "830570"
  },
  {
    "text": "seems to be different. In fact, we can\ngive a BPP algorithm for testing the equivalence of\nread-once branching programs,",
    "start": "830570",
    "end": "838460"
  },
  {
    "text": "even though such a\nthing is unlikely to be the case for general branching\nprograms because of the coNP",
    "start": "838460",
    "end": "843769"
  },
  {
    "text": "completeness. OK, so I hope you're\ncomfortable and with me on all of that reasoning.",
    "start": "843770",
    "end": "849720"
  },
  {
    "start": "849720",
    "end": "855920"
  },
  {
    "text": "OK. ",
    "start": "855920",
    "end": "867649"
  },
  {
    "text": "All right. So the idea for proving this\nis, what we're going to do is we want to take the\ntwo branching programs",
    "start": "867650",
    "end": "873580"
  },
  {
    "text": "and run them on a\nrandomly-selected input. But as we observed\nlast time, if you just",
    "start": "873580",
    "end": "879160"
  },
  {
    "text": "run them on a\nrandomly-selected Boolean input where we assign the\nvariable 0s and 1s,",
    "start": "879160",
    "end": "884710"
  },
  {
    "text": "then that doesn't give\nyou the right answer with high probability, because\nthe two branching programs",
    "start": "884710",
    "end": "891190"
  },
  {
    "text": "might be different, computing\ndifferent Boolean functions, but they differ only on\na single input setting.",
    "start": "891190",
    "end": "897790"
  },
  {
    "text": "And then, just picking\nthem at random, you're not going to have a very\nhigh probability of finding",
    "start": "897790",
    "end": "903910"
  },
  {
    "text": "that one place of difference. So instead, what we're going to\ndo is define a way to run these",
    "start": "903910",
    "end": "910480"
  },
  {
    "text": "branching programs on\nnon-Boolean inputs, where the variables are set\nto values other than 0 and 1--",
    "start": "910480",
    "end": "917599"
  },
  {
    "text": "2, 3, 7, 22-- and make sense of that. And then argue that, by running\nthe two branching programs",
    "start": "917599",
    "end": "926860"
  },
  {
    "text": "on a randomly-selected\nnon-Boolean input, that that's very\nhigh probability",
    "start": "926860",
    "end": "933500"
  },
  {
    "text": "of giving you the right answer. So somehow, by expanding\nthe domain of possibilities,",
    "start": "933500",
    "end": "940220"
  },
  {
    "text": "you're going to\nbetter your chance of getting the right\nanswer very significantly.",
    "start": "940220",
    "end": "947500"
  },
  {
    "text": "OK. So even though these\ntwo branching programs might agree on almost all\nof the Boolean inputs,",
    "start": "947500",
    "end": "956040"
  },
  {
    "text": "we're going to show that by\ndoing this arithmetization-- so this is the method--",
    "start": "956040",
    "end": "961950"
  },
  {
    "text": " if they're really\nnot equivalent,",
    "start": "961950",
    "end": "968000"
  },
  {
    "text": "they're going to differ\nalmost all of the time on the expanded domain.",
    "start": "968000",
    "end": "973368"
  },
  {
    "text": "OK, and then we have the proof. ",
    "start": "973368",
    "end": "978870"
  },
  {
    "text": "That's where today's\nwork is going to be. OK.",
    "start": "978870",
    "end": "984160"
  },
  {
    "text": "So why don't we\njust stop and make",
    "start": "984160",
    "end": "989259"
  },
  {
    "text": "sure we're all together on this? I can take any questions.",
    "start": "989260",
    "end": "996470"
  },
  {
    "text": "I'll also review how the\narithmetization goes. But I'll do that next.",
    "start": "996470",
    "end": "1002460"
  },
  {
    "text": "So, are we all OK on this?",
    "start": "1002460",
    "end": "1008310"
  },
  {
    "text": "Good. So let's move on. So in order to move\ntoward understanding",
    "start": "1008310",
    "end": "1015089"
  },
  {
    "text": "what it means to run\nthe branching programs on these non-Boolean\nvalues, we're",
    "start": "1015090",
    "end": "1021000"
  },
  {
    "text": "going to have to get a\nsomewhat different perspective on the computation of\na branching program.",
    "start": "1021000",
    "end": "1029310"
  },
  {
    "text": "So the standard perspective\nis that you take your setting,",
    "start": "1029310",
    "end": "1036810"
  },
  {
    "text": "your assignment to\nthe input, which is 0,1,1 for x1, x2, and x3, and\nuse that to follow an execution",
    "start": "1036810",
    "end": "1046500"
  },
  {
    "text": "path through the machine. So we know x1 is 0,\nx2 is 1, x3 is 1,",
    "start": "1046500",
    "end": "1052470"
  },
  {
    "text": "the output is 1, as I've\nindicated in yellow. ",
    "start": "1052470",
    "end": "1058800"
  },
  {
    "text": "This other perspective\nsays, well, we're going to operate by labeling the\nnodes and edges of the machine.",
    "start": "1058800",
    "end": "1066550"
  },
  {
    "text": "And that's going to have a\nvery direct correspondence",
    "start": "1066550",
    "end": "1072050"
  },
  {
    "text": "with the execution\npath perspective. So we're going to label all of\nthe nodes and edges on the path",
    "start": "1072050",
    "end": "1077929"
  },
  {
    "text": "with a 1, as\nindicated in yellow, and all of the nodes\nand edges that are not",
    "start": "1077930",
    "end": "1083810"
  },
  {
    "text": "on the path, all the\nother nodes and edges are going to be labeled 0. ",
    "start": "1083810",
    "end": "1090950"
  },
  {
    "text": "So by following the 1s,\nit's like the breadcrumbs in Hansel and Gretel.",
    "start": "1090950",
    "end": "1096320"
  },
  {
    "text": "This is the path\nyou need to follow to get through the machine.",
    "start": "1096320",
    "end": "1102410"
  },
  {
    "text": "The 0s are the places\nwhere you don't go.  OK, so the output\nlabel, here, the output",
    "start": "1102410",
    "end": "1110850"
  },
  {
    "text": "is going to be the label of\nthe one output node, whatever you're labeling that. Because if it's a 1, that\nmeans the path went to the 1,",
    "start": "1110850",
    "end": "1119017"
  },
  {
    "text": "and if it's a 0, that means\nthe path didn't go to the 1, it went to the 0. So just by looking\nat this value,",
    "start": "1119017",
    "end": "1125690"
  },
  {
    "text": "you can see what the\noutput of the machine is. All right. So let's describe\na different way",
    "start": "1125690",
    "end": "1136110"
  },
  {
    "text": "of defining this\nlabeling without just looking at the path.",
    "start": "1136110",
    "end": "1141880"
  },
  {
    "text": "Well, it's going to capture\nexactly the same thing. ",
    "start": "1141880",
    "end": "1147460"
  },
  {
    "text": "So we're going to say, if\nyou've already labeled a node,",
    "start": "1147460",
    "end": "1156309"
  },
  {
    "text": "I'll tell you how to\nlabel the two edges that emanate from that node. ",
    "start": "1156310",
    "end": "1163830"
  },
  {
    "text": "I'm going to label the one\nedge a and the query variable.",
    "start": "1163830",
    "end": "1169440"
  },
  {
    "text": "Why is that? Well, a is going to\nbe either a 0 or 1.",
    "start": "1169440",
    "end": "1175683"
  },
  {
    "text": "And it's going to\ntell us whether or not the path entered that node.",
    "start": "1175683",
    "end": "1180720"
  },
  {
    "text": "So if it's a 1, it\nentered that node, if 0, it didn't enter that node. The only way it's going\nto go down this branch",
    "start": "1180720",
    "end": "1187010"
  },
  {
    "text": "here is if it did\nenter the xi node.",
    "start": "1187010",
    "end": "1192195"
  },
  {
    "text": "If it didn't enter\nthe xi node, there's no way it can go\ndown this branch. So we're going to\nand that value.",
    "start": "1192195",
    "end": "1199510"
  },
  {
    "text": "So the only way you\ncan go down this branch is if it went\nthrough that node--",
    "start": "1199510",
    "end": "1205180"
  },
  {
    "text": "so that's the a,\nthe value of a-- and the xi is a 1.",
    "start": "1205180",
    "end": "1210299"
  },
  {
    "text": "That's why we say a and xi. So you really have to understand\nthis little expression here. If you don't understand\nthat, you're toast.",
    "start": "1210300",
    "end": "1218680"
  },
  {
    "text": "OK, so you better understand\nthis so we can move forward. I'm happy to take a question. These are the simplest\nquestions are sometimes",
    "start": "1218680",
    "end": "1224377"
  },
  {
    "text": "the most valuable. If you don't understand why\nI'm labeling it this way, shoot me a chat.",
    "start": "1224377",
    "end": "1229419"
  },
  {
    "text": " OK. Now, the other branch,\nI'm going to say,",
    "start": "1229420",
    "end": "1235680"
  },
  {
    "text": "well, I'm only going to go down\nthis edge if, well, a is true,",
    "start": "1235680",
    "end": "1240730"
  },
  {
    "text": "so I did go through that node. And xi is false. So this is going to be a\nand the complement of xi.",
    "start": "1240730",
    "end": "1249429"
  },
  {
    "text": "All right. So that's how I'm\ngoing to label these. This is another way,\ngiving these expressions",
    "start": "1249430",
    "end": "1255490"
  },
  {
    "text": "for labeling these edges based\non the label of that node. And similarly, in order\nto complete the picture,",
    "start": "1255490",
    "end": "1261880"
  },
  {
    "text": "I've got to tell you how\nto label the nodes based on the edges that\nare coming into it. So if I know that I have\na1, a2, and a3, which",
    "start": "1261880",
    "end": "1268750"
  },
  {
    "text": "tell me the status in terms of\nthe path of whether the path",
    "start": "1268750",
    "end": "1275050"
  },
  {
    "text": "went through any of\nthese edges, well, I know that it's going\nto go to that node if the or of these values--",
    "start": "1275050",
    "end": "1284497"
  },
  {
    "text": "if the path went through here,\nor it went through there, or went through there, then\nit's going to go to that node.",
    "start": "1284497",
    "end": "1290080"
  },
  {
    "text": "That's why the or is\nthe right thing to say. So this gives me another\nway of constructing",
    "start": "1290080",
    "end": "1295260"
  },
  {
    "text": "the labeling over here without\neven talking about paths.",
    "start": "1295260",
    "end": "1300800"
  },
  {
    "text": "As I describe it,\nI argue that it's going to give the same\nresult. All right.",
    "start": "1300800",
    "end": "1306320"
  },
  {
    "text": " So there's a question. Can we quickly say again why\nwe can't do that on Boolean?",
    "start": "1306320",
    "end": "1313875"
  },
  {
    "text": "I'm not sure I\nunderstand the question. So send it to me again. Right now, everything\nis Boolean. We haven't done,\narithmetically, anything yet.",
    "start": "1313875",
    "end": "1323063"
  },
  {
    "text": "And the reason why we can't\njust live in the Boolean world is that, just by taking Boolean\nvalues of Boolean assignments",
    "start": "1323063",
    "end": "1330250"
  },
  {
    "text": "here, we don't have a\nhigh enough probability of catching a difference\nbetween the two machines.",
    "start": "1330250",
    "end": "1335950"
  },
  {
    "text": " All right.",
    "start": "1335950",
    "end": "1341140"
  },
  {
    "text": "So let's continue.  All right. So now, I'm going\nto talk about how",
    "start": "1341140",
    "end": "1348020"
  },
  {
    "text": "we're going to extend this\nto the non-Boolean case,",
    "start": "1348020",
    "end": "1353150"
  },
  {
    "start": "1352000",
    "end": "1697000"
  },
  {
    "text": "using the\narithmetization method. So first of all, arithmetization\nis a simulation of and and",
    "start": "1353150",
    "end": "1358730"
  },
  {
    "text": "or with plus and times,\nsuch that if I think about true as a 1\nand false as a 0,",
    "start": "1358730",
    "end": "1370279"
  },
  {
    "text": "this is going to give me\na faithful simulation. It's going to do\nthe right thing. It's going to compute exactly\nthe same values that we expect.",
    "start": "1370280",
    "end": "1377930"
  },
  {
    "text": "So like a and b, well,\ntimes works just like and.",
    "start": "1377930",
    "end": "1384200"
  },
  {
    "text": " It does for 1 and 0\nas true and false,",
    "start": "1384200",
    "end": "1393020"
  },
  {
    "text": "times exactly works like and. And negation is 1 minus.",
    "start": "1393020",
    "end": "1401230"
  },
  {
    "text": "Or is going to be the\nsum minus the product.",
    "start": "1401230",
    "end": "1406360"
  },
  {
    "text": "And then, these just give\nyou the right values, a or b. If you just calculate it\nout by plugging in 1s or 0s,",
    "start": "1406360",
    "end": "1414490"
  },
  {
    "text": "you get the right answer just\nby using this arithmetic. ",
    "start": "1414490",
    "end": "1419820"
  },
  {
    "text": "So now, what we're going to do,\ninstead of using the Boolean labeling, we'll just use\nthe arithmetical labeling.",
    "start": "1419820",
    "end": "1425880"
  },
  {
    "text": "But it's going to compute\nexactly the same thing because the arithmetic\nsimulates the Boolean.",
    "start": "1425880",
    "end": "1433710"
  },
  {
    "text": "So we always go\nthrough the start node. So there's no question about\nlabeling the very start",
    "start": "1433710",
    "end": "1440400"
  },
  {
    "text": "node with a 1. But now, I'm going to\ngive expressions just like the Boolean\nexpressions, but now they're",
    "start": "1440400",
    "end": "1445860"
  },
  {
    "text": "going to use plus and times\ninstead of ands and ors. So let's just see. Remember what we\ndid from before.",
    "start": "1445860",
    "end": "1452340"
  },
  {
    "text": "We had a and xi for this edge. I'm going to replace that. What is and?",
    "start": "1452340",
    "end": "1458130"
  },
  {
    "text": "We just look up\nhere in our table, in our translation table. And becomes times.",
    "start": "1458130",
    "end": "1464169"
  },
  {
    "text": "So we're going to replace\nthat with a times xi. ",
    "start": "1464170",
    "end": "1469240"
  },
  {
    "text": "And it's going to\nwork exactly the same. But the difference is that\nthis makes sense even when we",
    "start": "1469240",
    "end": "1476440"
  },
  {
    "text": "have non-Boolean values. Times and plus are defined\nfor non-Boolean values,",
    "start": "1476440",
    "end": "1485480"
  },
  {
    "text": "whereas ands and or are not. So what goes down on this edge?",
    "start": "1485480",
    "end": "1490980"
  },
  {
    "text": "Well, this was a and\nthe complement of xi, as you remember.",
    "start": "1490980",
    "end": "1496529"
  },
  {
    "text": "So that's going to become\na times 1 minus xi. And then similarly,\nwe had or over here.",
    "start": "1496530",
    "end": "1504662"
  },
  {
    "text": "And here's a little\nbit of a trick, but that's going to be\nimportant for the analysis that we're going to do.",
    "start": "1504662",
    "end": "1510590"
  },
  {
    "text": "Instead of using the recipe for\nor in terms of plus and times,",
    "start": "1510590",
    "end": "1517309"
  },
  {
    "text": "we're going to have\nsomething a little simpler. It's just going to be the sum. And the reason why that works--",
    "start": "1517310",
    "end": "1523730"
  },
  {
    "text": "good to understand-- is that\nbecause of the acyclic nature",
    "start": "1523730",
    "end": "1528830"
  },
  {
    "text": "of the branching programs,\nat most, one of these edges can have a path through it.",
    "start": "1528830",
    "end": "1534299"
  },
  {
    "text": "So this is a kind\nof very special or, sometimes called\nthe disjoint or.",
    "start": "1534300",
    "end": "1540520"
  },
  {
    "text": "You're not allowed to have more\nthan one of the values be 1, because that never happens when\nyou have an acyclical graph.",
    "start": "1540520",
    "end": "1547810"
  },
  {
    "text": "You can never have the path\ncoming down this way, and then, again, coming down that way. Then it would be\nentering that node twice.",
    "start": "1547810",
    "end": "1553630"
  },
  {
    "text": "Have to be a cycle. So it's going to be\ngood enough for us, and necessary for us to\nrepresent this or as a sum.",
    "start": "1553630",
    "end": "1564420"
  },
  {
    "text": "OK. So I think that's all I\nwanted to say on this slide.",
    "start": "1564420",
    "end": "1570520"
  },
  {
    "text": "So somebody is asking,\nis it possible for some of these values to be negative? Yes.",
    "start": "1570520",
    "end": "1575978"
  },
  {
    "text": "As it stands right now, some of\nthese values can be negative. I haven't put any\nrestriction on what the values are going to be.",
    "start": "1575978",
    "end": "1582790"
  },
  {
    "text": "So the input could\nbe a negative number. And then, you're going to just\nget negative stuff happening. In fact, there's\nsubtractions going on here.",
    "start": "1582790",
    "end": "1590860"
  },
  {
    "text": "So even with positive numbers-- I think we did an\nexample last time. I think I'm going to do that\nexample again of exclusive",
    "start": "1590860",
    "end": "1596760"
  },
  {
    "text": "or, where you get negative\nnumbers coming up. That doesn't matter. But actually, what we're\ngoing to end up doing",
    "start": "1596760",
    "end": "1603840"
  },
  {
    "text": "is doing these calculations\nmodulo some prime number q.",
    "start": "1603840",
    "end": "1611929"
  },
  {
    "text": "OK. I'm going to pick\nsome prime like 17, and do all the\ncalculations mod 17.",
    "start": "1611930",
    "end": "1618530"
  },
  {
    "text": "And the reason for\ndoing it that way is really because we're going\nto be picking random assignments to the variables as our input.",
    "start": "1618530",
    "end": "1627110"
  },
  {
    "text": "And it makes the most\nsense to do that when you have a finite set of\npossibilities to pick them up.",
    "start": "1627110",
    "end": "1635970"
  },
  {
    "text": "So we're not going to pick\nlike a random integer. There's infinitely\nmany possibilities. And yeah, you could set\nup a distribution there,",
    "start": "1635970",
    "end": "1642200"
  },
  {
    "text": "but that's very complicated. That actually might work. I'm not sure. I haven't actually gone\nthrough that analysis.",
    "start": "1642200",
    "end": "1647570"
  },
  {
    "text": "But the typical\nway people do this is by looking at what's\ncalled a finite field. So I'll talk about\nthat in a second.",
    "start": "1647570",
    "end": "1655140"
  },
  {
    "text": "Why is there at most one\n1 among a1, a2, and a3? ",
    "start": "1655140",
    "end": "1662010"
  },
  {
    "text": "The 1s-- I'll say once\nagain-- but the 1s correspond to the path. So this is a 1 if the\npath went this way.",
    "start": "1662010",
    "end": "1670080"
  },
  {
    "text": "Just think about it. The path cannot go through\na1 and can, at the same time,",
    "start": "1670080",
    "end": "1676170"
  },
  {
    "text": "go through a2, because that\nmeans the path went through this node. Then, how is it going\nto get over to a2?",
    "start": "1676170",
    "end": "1683070"
  },
  {
    "text": "It's going to go\nthrough that node twice. In an acyclic graph, you cannot\nhave a path going through",
    "start": "1683070",
    "end": "1688960"
  },
  {
    "text": "it's the same node\nmore than once. So you're going to have\nto think about that.",
    "start": "1688960",
    "end": "1696410"
  },
  {
    "text": "OK, let's move on. So now we're going to\ntalk about the same-- ",
    "start": "1696410",
    "end": "1704520"
  },
  {
    "start": "1697000",
    "end": "2246000"
  },
  {
    "text": "we're going to look at that\nnon-Boolean labeling applied to an example. So here is a very\nsimple branching program",
    "start": "1704520",
    "end": "1712730"
  },
  {
    "text": "that actually\ncomputes the exclusive or function in\nthe Boolean world. ",
    "start": "1712730",
    "end": "1718840"
  },
  {
    "text": "So this is the\nlabeling that I just developed for you, the\narithmetical labeling.",
    "start": "1718840",
    "end": "1727500"
  },
  {
    "text": "And we always label\nthe start node with 1, because the path always\ngoes through there. And now, let's look at this\nbefore we jump ahead, let's",
    "start": "1727500",
    "end": "1735120"
  },
  {
    "text": "look at this edge here. Remember what it is. We have to apply this rule here.",
    "start": "1735120",
    "end": "1740490"
  },
  {
    "text": "This is the one edge\ncoming out of a node that already is labeled. So it's that label on\nthat node times the xi.",
    "start": "1740490",
    "end": "1748803"
  },
  {
    "text": "Because if you're thinking\nabout it, that, that's the and, captures the and. So it's just a times xi.",
    "start": "1748803",
    "end": "1755330"
  },
  {
    "text": "So it's x1, in this case. So x1 is a 2 in our input.",
    "start": "1755330",
    "end": "1762720"
  },
  {
    "text": "So it's going to be\n1, which is the a, times the x1, which is 2. So this edge gets labeled 2.",
    "start": "1762720",
    "end": "1771630"
  },
  {
    "text": "Now this-- well, OK, let's\nlook at this edge now. I think that's next. This is the 1 minus xi,\nit's the 1 minus x1.",
    "start": "1771630",
    "end": "1778770"
  },
  {
    "text": "So it's 1 minus 2. So you're going to\nend up with a minus 1. 1 minus times minus 2. 1 times 1 minus 2, which is\nminus 1, so it's a minus 1.",
    "start": "1778770",
    "end": "1789640"
  },
  {
    "text": "Now we're going to label these\ntwo nodes using the other rule. So this gets a 2 because that's\na sum of the incoming edges.",
    "start": "1789640",
    "end": "1796450"
  },
  {
    "text": "This gets a minus\n1, because that's the sum of its incoming edges. And now we're going to look at--",
    "start": "1796450",
    "end": "1801895"
  },
  {
    "start": "1801895",
    "end": "1806920"
  },
  {
    "text": "which order did I do this in? OK, I'm going to\ndo this edge now.",
    "start": "1806920",
    "end": "1813920"
  },
  {
    "text": "0 edge, which is going to be\n2 times 1 minus its variable.",
    "start": "1813920",
    "end": "1820550"
  },
  {
    "text": "So it's 1 minus x2. X2 is a 3. So it's 1 minus 3 to minus 2.",
    "start": "1820550",
    "end": "1828260"
  },
  {
    "text": "So 2 times minus 2 is minus 4. OK, I don't want to\nrush through this. No point in just blabbering on.",
    "start": "1828260",
    "end": "1835090"
  },
  {
    "text": "I'm just trying to work this\nexample so you get the idea. OK, so could you fill this\nnext one out yourself?",
    "start": "1835090",
    "end": "1843270"
  },
  {
    "text": "So this is the one outgoing\nedge from this x2 node.",
    "start": "1843270",
    "end": "1848330"
  },
  {
    "text": "So x2 is labeled with 2 here.",
    "start": "1848330",
    "end": "1854850"
  },
  {
    "text": "So there's a is 2. This is the one edge going out,\nso it's one on this side here.",
    "start": "1854850",
    "end": "1859890"
  },
  {
    "text": "So it's 2 times the x2. x2\nis a 3, so it's 2 times 3.",
    "start": "1859890",
    "end": "1866780"
  },
  {
    "text": "So this should be 6. Oops. Right here-- 6.",
    "start": "1866780",
    "end": "1873230"
  },
  {
    "text": "I'm going to do the same thing. So x2 is labeled minus 1. ",
    "start": "1873230",
    "end": "1882130"
  },
  {
    "text": "So minus 1 times 1 minus. So you get a 2 here,\nyou get a minus 3 here,",
    "start": "1882130",
    "end": "1887409"
  },
  {
    "text": "just following, again,\nthe same process. And now, what is the\nlabel on this 0 node here?",
    "start": "1887410",
    "end": "1895050"
  },
  {
    "text": "So again, you take the sum\nof its incoming labels. So there was a 2 and a 6.",
    "start": "1895050",
    "end": "1902410"
  },
  {
    "text": "So that's an 8. And this is a a minus 3\nand a minus 4 coming in.",
    "start": "1902410",
    "end": "1910420"
  },
  {
    "text": "So it's a minus 7. What's the output? The output is minus 7, because\nthat's the label on the 1 node.",
    "start": "1910420",
    "end": "1917690"
  },
  {
    "text": "OK, output is minus 7. OK. So this is going to\nbe our way of defining",
    "start": "1917690",
    "end": "1926990"
  },
  {
    "text": "the output of a\nbranching program when it has a non-Boolean\nsetting on its inputs.",
    "start": "1926990",
    "end": "1935799"
  },
  {
    "text": "If you had the Boolean\nsetting on its inputs and you followed this procedure,\nwhat would you get out?",
    "start": "1935800",
    "end": "1941605"
  },
  {
    "text": " You would get the\nsame answer that you",
    "start": "1941605",
    "end": "1947410"
  },
  {
    "text": "would get by following\nthe path because the arithmetical simulation\nis a faithful simulation",
    "start": "1947410",
    "end": "1955990"
  },
  {
    "text": "of the ands and ors. And the ands and\nors capture exactly when-- what the path does. ",
    "start": "1955990",
    "end": "1962410"
  },
  {
    "text": "So this is a strict\nextension of the operation of the branching program\ninto a new realm,",
    "start": "1962410",
    "end": "1969640"
  },
  {
    "text": "these non-Boolean values. On the old realm, it behaves\njust as it did originally.",
    "start": "1969640",
    "end": "1975230"
  },
  {
    "text": "And that's critical\nto understand that. ",
    "start": "1975230",
    "end": "1983788"
  },
  {
    "text": "Yeah, somebody's asking what\nthe final value of the 0s, they'd also be the same. Sure. In the Boolean case, if we\nfollow this in the Boolean",
    "start": "1983788",
    "end": "1992860"
  },
  {
    "text": "cases, all of the labels would\nbe exactly what they were. They would just be the 0s and\n1s that we had from before.",
    "start": "1992860",
    "end": "2001995"
  },
  {
    "start": "2001995",
    "end": "2008820"
  },
  {
    "text": "So does this exactly mimic x\nor if you take this all mod 2?",
    "start": "2008820",
    "end": "2014605"
  },
  {
    "text": " I don't know. I'd have to think about that.",
    "start": "2014605",
    "end": "2020820"
  },
  {
    "text": "I don't think that\nthat's essential. In this case, it\nmight behave correctly if you take the\nanswer mod 2 for XOR.",
    "start": "2020820",
    "end": "2028380"
  },
  {
    "text": "But the XOR is going\nto be very special. And I'm not sure. That might happen to be true. I'd have to think\nabout it for a second,",
    "start": "2028380",
    "end": "2034679"
  },
  {
    "text": "but I'm not sure\nthat's relevant. ",
    "start": "2034680",
    "end": "2043978"
  },
  {
    "text": "OK, so this is a good question. If I picked a different\nbranching program that also implements XOR-- or--",
    "start": "2043978",
    "end": "2052370"
  },
  {
    "text": "so it would be an equivalent\nbranching program-- would it behave the same way\non the non-Boolean values?",
    "start": "2052370",
    "end": "2059225"
  },
  {
    "text": " And the answer to\nthat is yes and no.",
    "start": "2059225",
    "end": "2066252"
  },
  {
    "text": "You understand the question? It's a very good question. And actually, we're going to\nprove this in the analysis.",
    "start": "2066253",
    "end": "2074748"
  },
  {
    "text": "It's going to be easy to\nprove because I gave you both possibilities, yes and no. But let me tell you\nwhat I mean by that.",
    "start": "2074748",
    "end": "2081718"
  },
  {
    "text": "So you understand the question. Suppose I had a different\nbranching program. I'm not sure you can come up\nwith a different branching",
    "start": "2081718",
    "end": "2087002"
  },
  {
    "text": "program, but let's\nsay you could. You have a different\nbranching program, yeah, sure you can come-- you can do the variables in a\ndifferent order, for example.",
    "start": "2087002",
    "end": "2094138"
  },
  {
    "text": "So suppose you come up with\na different branching program that gives you XOR.",
    "start": "2094139",
    "end": "2100220"
  },
  {
    "text": "And now you plugged in 2 and 3. Would I always get\nthe same value out?",
    "start": "2100220",
    "end": "2107530"
  },
  {
    "text": "Yes, if that other branching\nprogram was read-once.",
    "start": "2107530",
    "end": "2113150"
  },
  {
    "text": "No, not necessarily\nif it's not read-once. ",
    "start": "2113150",
    "end": "2120160"
  },
  {
    "text": "And that's why\nread-once is critical.  As we will prove, for two\nread-once branching programs,",
    "start": "2120160",
    "end": "2129170"
  },
  {
    "text": "if they behave the same\nway on the Boolean values, they behave the same way even\non the non-Boolean values.",
    "start": "2129170",
    "end": "2137224"
  },
  {
    "text": " That's not necessarily true if\nthe branching programs are not",
    "start": "2137225",
    "end": "2143520"
  },
  {
    "text": "read-once. ",
    "start": "2143520",
    "end": "2149690"
  },
  {
    "text": "OK, we will see that. We will prove that and use that.",
    "start": "2149690",
    "end": "2156359"
  },
  {
    "text": "That's going to be important. OK, so here is the\nalgorithm sketch, which is kind of a little\nbit even sort of suggested",
    "start": "2156360",
    "end": "2163089"
  },
  {
    "text": "by that very good question. ",
    "start": "2163090",
    "end": "2170319"
  },
  {
    "text": "So what we're going\nto do is we want to take the two branching\nprograms that we're trying",
    "start": "2170320",
    "end": "2176800"
  },
  {
    "text": "to test if they're equivalent. We're going to pick a random\nnon-Boolean input assignment--",
    "start": "2176800",
    "end": "2182380"
  },
  {
    "text": "so set the values here\nchosen from the field, but we'll get there. A random value for x1, random\nvalue for x2, and so on.",
    "start": "2182380",
    "end": "2192640"
  },
  {
    "text": "These could be numbers like\n17, and 25, and 23, and so on. And then, using this process,\nrun the branching programs",
    "start": "2192640",
    "end": "2201760"
  },
  {
    "text": "to evaluate them on that\nnon-Boolean assignment. If they disagree,\nthen we're going",
    "start": "2201760",
    "end": "2208059"
  },
  {
    "text": "to know that the two branching\nprograms were not equivalent, even on the non-Boolean case.",
    "start": "2208060",
    "end": "2215099"
  },
  {
    "text": "Even on the Boolean case. Did I say that wrong? So if they disagree, even\non the non-Boolean case, they have to be an equivalent\neven in the Boolean case.",
    "start": "2215100",
    "end": "2223200"
  },
  {
    "text": "Not obvious. But if they agree, then\nit's not a guarantee",
    "start": "2223200",
    "end": "2230865"
  },
  {
    "text": "that they're\nequivalent, but it's going to be very strong evidence\nthat they're equivalent.",
    "start": "2230865",
    "end": "2236777"
  },
  {
    "text": "OK, so that's where the\nprobabilistic nature is going to come in. So we're going to prove that.",
    "start": "2236777",
    "end": "2243579"
  },
  {
    "text": "So first, we have to\ndevelop an algebraic fact. And that involves polynomials.",
    "start": "2243580",
    "end": "2250502"
  },
  {
    "text": "This is a simple thing\nthat I think many of you have run into already,\nperhaps even in high school.",
    "start": "2250502",
    "end": "2257710"
  },
  {
    "text": "I'm not going to prove\nthe algebraic facts, but I'm going to state them. And actually, the\nproofs are not hard. They're in the textbook.",
    "start": "2257710",
    "end": "2262790"
  },
  {
    "text": " So suppose we have a\npolynomial of degree d here.",
    "start": "2262790",
    "end": "2269770"
  },
  {
    "text": "It happens to have p. So there's a bunch of constants. These a's are constants.",
    "start": "2269770",
    "end": "2275890"
  },
  {
    "text": "x is the variable\nof the polynomial. And I presume you've seen\npolynomials written out",
    "start": "2275890",
    "end": "2281380"
  },
  {
    "text": "like this. And so if you assign x to some\nvalue, some constant value z,",
    "start": "2281380",
    "end": "2290849"
  },
  {
    "text": "and the polynomial\nevaluates to 0, we often call that a\nroot of the polynomial.",
    "start": "2290850",
    "end": "2297210"
  },
  {
    "text": " So these are the places where\nthe polynomial evaluates to 0",
    "start": "2297210",
    "end": "2304002"
  },
  {
    "text": "that I've of shown over here. Those are the roots. ",
    "start": "2304002",
    "end": "2309920"
  },
  {
    "text": "It's not hard to show that a\nlow-degree polynomial cannot have lots of roots.",
    "start": "2309920",
    "end": "2316460"
  },
  {
    "text": "Basically, if the polynomial\nhas degree at most d, it can have at most d roots,\nas long as the polynomial",
    "start": "2316460",
    "end": "2322370"
  },
  {
    "text": "itself is not the\neverywhere 0 polynomial, because obviously, then\neverything is a root.",
    "start": "2322370",
    "end": "2328040"
  },
  {
    "text": " Oops, typo. Thank you.",
    "start": "2328040",
    "end": "2333300"
  },
  {
    "text": "Should be d minus 2 over there. ",
    "start": "2333300",
    "end": "2339140"
  },
  {
    "text": "Pretend that's a 2.  All right, so if we have\na low-degree polynomial--",
    "start": "2339140",
    "end": "2349315"
  },
  {
    "text": "let's not get\nahead of ourselves. If we have a\nlow-degree polynomial, a polynomial of degree at most\nd, it has at most d roots.",
    "start": "2349315",
    "end": "2357510"
  },
  {
    "text": "And that's a simple proof. The basic idea is\nevery time you have a-- if you have a root\nof the polynomial,",
    "start": "2357510",
    "end": "2364650"
  },
  {
    "text": "so if setting x equal to 5 gives\nyou a root of the polynomial,",
    "start": "2364650",
    "end": "2375329"
  },
  {
    "text": "it's a 0 of the polynomial,\nthen x-- you can easily to see that x minus 5 is a\nfactor of the polynomial.",
    "start": "2375330",
    "end": "2381270"
  },
  {
    "text": " You can divide by x minus 5,\nand you get a new polynomial",
    "start": "2381270",
    "end": "2388740"
  },
  {
    "text": "of degree one less. And you can just, which\nis going by induction,",
    "start": "2388740",
    "end": "2393990"
  },
  {
    "text": "has one fewer root. So you can just divide out\nby the roots, basically.",
    "start": "2393990",
    "end": "2399450"
  },
  {
    "text": "It's very straightforward. ",
    "start": "2399450",
    "end": "2410090"
  },
  {
    "start": "2407000",
    "end": "2472000"
  },
  {
    "text": "And other very important thing-- if I have two polynomials\nthat are both low-degree,",
    "start": "2410090",
    "end": "2418910"
  },
  {
    "text": "they cannot agree\non very many places. ",
    "start": "2418910",
    "end": "2424880"
  },
  {
    "text": "That follows from what\nI just proved above. Because what I'll do is I\ntake those two polynomials,",
    "start": "2424880",
    "end": "2432260"
  },
  {
    "text": "and they look at the\ndifference, which is also a low-degree polynomial. Every time there's an\nagreement between those two",
    "start": "2432260",
    "end": "2438950"
  },
  {
    "text": "original polynomials,\nthere's a zero of the difference polynomial. And because that difference\npolynomial cannot have too many",
    "start": "2438950",
    "end": "2446240"
  },
  {
    "text": "zeroes, the two original\npolynomials cannot have too many agreements. ",
    "start": "2446240",
    "end": "2453270"
  },
  {
    "text": "So the corollary is that if\nx and y are both polynomials of degree at most d, and\nthey're not the same polynomial,",
    "start": "2453270",
    "end": "2460410"
  },
  {
    "text": "because then the difference\nwould be the 0 polynomial, then the number of places where\nthey're equal is at most d.",
    "start": "2460410",
    "end": "2467830"
  },
  {
    "text": "So the proof is\njust letting p be the difference of p1 and p2--",
    "start": "2467830",
    "end": "2472920"
  },
  {
    "start": "2472000",
    "end": "2640000"
  },
  {
    "text": "very standard kind of a trick. Now the above is going\nto hold for any field.",
    "start": "2472920",
    "end": "2479190"
  },
  {
    "text": "A field is just a set\nwith plus and times with the familiar properties\nof distributive law and so on",
    "start": "2479190",
    "end": "2487380"
  },
  {
    "text": "and identities and\nall the stuff that you would expect plus and times\nto have in the normal world.",
    "start": "2487380",
    "end": "2494350"
  },
  {
    "text": "And so we're going to talk\nabout the finite field that has only q elements--",
    "start": "2494350",
    "end": "2501810"
  },
  {
    "text": "that has exactly q elements,\nwhere q is a prime number. So it turns out that-- and I'm\nnot going to prove all this,",
    "start": "2501810",
    "end": "2507300"
  },
  {
    "text": "but it's pretty simple stuff-- that if you just take the\nnumbers from 1 to q minus 1--",
    "start": "2507300",
    "end": "2514710"
  },
  {
    "text": "from 0 to q minus 1, and\nuse plus n times mod q,",
    "start": "2514710",
    "end": "2521400"
  },
  {
    "text": "that has all the right\nproperties to be a field. So just think of it--",
    "start": "2521400",
    "end": "2527349"
  },
  {
    "text": "just modular arithmetic,\nmod some prime q. And then we can in a natural\nway pick a random assignment",
    "start": "2527350",
    "end": "2540110"
  },
  {
    "text": "to a variable from the field\nbecause it's just choosing from among q possibilities.",
    "start": "2540110",
    "end": "2546087"
  },
  {
    "start": "2546087",
    "end": "2557505"
  },
  {
    "text": "Yeah, so getting\na question here. The coefficients of the\npolynomial and the assignment",
    "start": "2557505",
    "end": "2563109"
  },
  {
    "text": "to the variables-- they're all\ngoing to come from this field. So everything's going to\nbe operating in this field.",
    "start": "2563110",
    "end": "2572789"
  },
  {
    "text": "Don't let that throw you off. Just your ordinary intuition\nabout the way arithmetic works",
    "start": "2572790",
    "end": "2579578"
  },
  {
    "text": "is going to be just fine. ",
    "start": "2579578",
    "end": "2591530"
  },
  {
    "text": "But this is important here from\nthe perspective of thinking about this probabilistically. So I'm going to rethink about\nthis polynomial lemma, which",
    "start": "2591530",
    "end": "2598309"
  },
  {
    "text": "says there are not\ntoo many roots. In terms of the\nprobability of picking",
    "start": "2598310",
    "end": "2603859"
  },
  {
    "text": "an element of the field,\nwhat are the chances that it happens to be a root?",
    "start": "2603860",
    "end": "2609079"
  },
  {
    "text": "So if you have a\nlow-degree polynomial, and you pick a random\nvalue in the field,",
    "start": "2609080",
    "end": "2615950"
  },
  {
    "text": "what's the probability\nthat you've got a root? Well, it's just the\nnumber of roots divided",
    "start": "2615950",
    "end": "2621460"
  },
  {
    "text": "by the size of the field. So if you have this\nreally big field, and you have this\nlow-degree polynomial,",
    "start": "2621460",
    "end": "2627150"
  },
  {
    "text": "it's going to be pretty\nunlikely that you're going to end up picking one of\nthe zeroes, one of the roots,",
    "start": "2627150",
    "end": "2635520"
  },
  {
    "text": "just at random. That's all that this is saying.",
    "start": "2635520",
    "end": "2640680"
  },
  {
    "start": "2640000",
    "end": "2765000"
  },
  {
    "text": "So there's at most d roots\nout of the q possibilities. And the last thing I'm\ngoing to introduce here",
    "start": "2640680",
    "end": "2646410"
  },
  {
    "text": "is the multivariable\nversion of this which is called, perhaps\nsomewhat unfairly,",
    "start": "2646410",
    "end": "2654420"
  },
  {
    "text": "but it's called the\nSchwartz-Zippel lemma, though in various forms, it had\nbeen known prior to their work.",
    "start": "2654420",
    "end": "2665880"
  },
  {
    "text": "In some cases, the literature\nactually goes back a long ways.",
    "start": "2665880",
    "end": "2671109"
  },
  {
    "text": "But anyway, this is called\nthe Schwartz-Zippel lemma. Doesn't really matter,\nexcept to the people whose",
    "start": "2671110",
    "end": "2681570"
  },
  {
    "text": "credit is being denied. But that's not one of us. So anyway, the Schwartz-Zippel\nlemma says that if you have now",
    "start": "2681570",
    "end": "2689640"
  },
  {
    "text": "a polynomial in\nseveral variables, which is not the 0 polynomial,\nwhere each variable has low",
    "start": "2689640",
    "end": "2695700"
  },
  {
    "text": "degree-- so if I say if it has\ndegree at most d in each xi.",
    "start": "2695700",
    "end": "2700920"
  },
  {
    "text": "So each variable is going to\nhave at most an exponent of d appearing in that polynomial.",
    "start": "2700920",
    "end": "2707380"
  },
  {
    "text": "And now if we pick random values\nto assign to all of those n",
    "start": "2707380",
    "end": "2712650"
  },
  {
    "text": "variables from the\nfield, the probability that we ended up with a root,\nthat we ended up with a 0,",
    "start": "2712650",
    "end": "2722349"
  },
  {
    "text": "is something you can bound. So it's m times d, so\nthe number of variables",
    "start": "2722350",
    "end": "2727970"
  },
  {
    "text": "times this maximum\ndegree, divided by the size of the field.",
    "start": "2727970",
    "end": "2732990"
  },
  {
    "text": "And this is going to\ncome up later for us. And this is another fairly\nsimple proof, a little bit more",
    "start": "2732990",
    "end": "2742090"
  },
  {
    "text": "sophisticated than the\none that we had above. And in fact, it uses that one as\na lemma to prove this theorem.",
    "start": "2742090",
    "end": "2752350"
  },
  {
    "text": "So we're going to-- not going to prove any of that,\nbut I refer you to the book if you're curious. ",
    "start": "2752350",
    "end": "2768310"
  },
  {
    "text": "Yeah, so a couple of\ngood questions here. What happens if these values\nare bigger than q, for example?",
    "start": "2768310",
    "end": "2775642"
  },
  {
    "text": "Then it's not\ntelling you anything. If d is bigger than\nq, m is bigger than q, or the product is bigger than\nq, then you learn nothing",
    "start": "2775642",
    "end": "2784300"
  },
  {
    "text": "from this lemma-- from this theorem. So typically in applications,\nyou're going to pick a large--",
    "start": "2784300",
    "end": "2791578"
  },
  {
    "text": "you're going to have\nthe flexibility. You get to choose q to be\nsomething that you want. So we're going to pick\nthe field to be big",
    "start": "2791578",
    "end": "2798190"
  },
  {
    "text": "enough so that the m and d are\ngoing to be relatively small.",
    "start": "2798190",
    "end": "2805859"
  },
  {
    "text": "In fact, d is going to end\nup being 1, as we will see. And m is the number\nof variables.",
    "start": "2805860",
    "end": "2811309"
  },
  {
    "text": "So we're going to\npick q, which is going to be substantially larger\nthan the number of variables.",
    "start": "2811310",
    "end": "2817690"
  },
  {
    "text": "And how is the degree defined\nin multivariable polynomials? If the polynomial has xy squared\nplus 3x to the 5th y squared z,",
    "start": "2817690",
    "end": "2830109"
  },
  {
    "text": "you just pull out each\nvariable separately. And you look at the maximum\ndegree of that variable.",
    "start": "2830110",
    "end": "2835730"
  },
  {
    "text": "So the x in that case had\nhad a degree 5 appearance. The y had a degree 2 appearance.",
    "start": "2835730",
    "end": "2842800"
  },
  {
    "text": "So you take the maximum\nover all of the variables of the degree of that variable. And that's going to be\nthe bound on the degree",
    "start": "2842800",
    "end": "2848470"
  },
  {
    "text": "of the polynomial. So in fact, in our case,\nd is going to be 1.",
    "start": "2848470",
    "end": "2853875"
  },
  {
    "text": "So all of the\nvariables-- there's not going to be any\nexponents on anything. Everything is going\nto be exponent 1.",
    "start": "2853875",
    "end": "2859220"
  },
  {
    "start": "2859220",
    "end": "2865025"
  },
  {
    "start": "2862000",
    "end": "3599000"
  },
  {
    "text": "Is q related to the number\nwe choose for the mod? Yeah, q is the number\nwe're choosing for the mod.",
    "start": "2865025",
    "end": "2870319"
  },
  {
    "text": "We're doing everything mod q. ",
    "start": "2870320",
    "end": "2875559"
  },
  {
    "text": "So all the arithmetic is\ngoing to operate in mod q, and that's the size of the\nfield that we're going to pick.",
    "start": "2875560",
    "end": "2884350"
  },
  {
    "text": " So I think we're\nhere at the break.",
    "start": "2884350",
    "end": "2889730"
  },
  {
    "text": "Happy to take some\nmore questions, but why don't we\njust start that off. ",
    "start": "2889730",
    "end": "2898390"
  },
  {
    "text": "And I will see you\nin five minutes. But in the meantime, happy\nto shoot me questions.",
    "start": "2898390",
    "end": "2906220"
  },
  {
    "text": "So what happens if we use\nBoolean assignments in the XOR example? ",
    "start": "2906220",
    "end": "2913470"
  },
  {
    "text": "Would that work to be\nable to check agreement?",
    "start": "2913470",
    "end": "2918730"
  },
  {
    "start": "2918730",
    "end": "2924250"
  },
  {
    "text": "It would. So it's hard to make an argument\nbased on just a single example.",
    "start": "2924250",
    "end": "2932260"
  },
  {
    "text": "I think the better\nthing would be to look at two\nbranching programs that",
    "start": "2932260",
    "end": "2945720"
  },
  {
    "text": "just differ in a single place. So I can even suggest two. You can make a branching program\nthat always outputs true.",
    "start": "2945720",
    "end": "2956500"
  },
  {
    "text": "It doesn't even\nread its variables. Or if it reads them, they\nalways go to the same place. And it ends up always\nat the q output.",
    "start": "2956500",
    "end": "2963350"
  },
  {
    "text": "So you imagine a\nbranching program that always outputs\n1, no matter what the assignments to\nthe variables are. And you can easily\nmake such a thing.",
    "start": "2963350",
    "end": "2970660"
  },
  {
    "text": "And then you make\nanother branching program that computes the or function.",
    "start": "2970660",
    "end": "2975790"
  },
  {
    "text": "So it reads every variable. And it's going to be 1 if\nany one of those variables",
    "start": "2975790",
    "end": "2982750"
  },
  {
    "text": "is set to 1.  So the only time\nthe or function is",
    "start": "2982750",
    "end": "2989930"
  },
  {
    "text": "0 is if everything is set to 0. ",
    "start": "2989930",
    "end": "2995170"
  },
  {
    "text": "But now if you're\ntrying to randomly check",
    "start": "2995170",
    "end": "3000240"
  },
  {
    "text": "whether the always one function\nis equal to the or function--",
    "start": "3000240",
    "end": "3005333"
  },
  {
    "text": "of course, without knowing\nin advance what they are, because that's cheating. You're just given\nthese two functions,",
    "start": "3005333",
    "end": "3010560"
  },
  {
    "text": "and you want to know-- these\ntwo branching programs. And you want to know,\nare they computing the same thing or not?",
    "start": "3010560",
    "end": "3017400"
  },
  {
    "text": "And by this procedure\nof randomly sampling, you're always going to get\nthese branching programs both",
    "start": "3017400",
    "end": "3023090"
  },
  {
    "text": "to say 1, unless you just happen\nto pick the random assignment of everything set to 0.",
    "start": "3023090",
    "end": "3030730"
  },
  {
    "text": "And that's very unlikely that\nyou're going to pick that. If you imagine you have--\nyour branching program",
    "start": "3030730",
    "end": "3035769"
  },
  {
    "text": "has 100 variables in it. It's only 2 to the\nminus 100 chance that you're going to set\nthem all to 0 randomly.",
    "start": "3035770",
    "end": "3043640"
  },
  {
    "text": "And so you're extremely\nunlikely to find that one place of difference\nif there's only a single place.",
    "start": "3043640",
    "end": "3051099"
  },
  {
    "text": "If there's lots of\nplaces of difference, then it's not so bad. But if the number, the fraction\nof differences, is low,",
    "start": "3051100",
    "end": "3058638"
  },
  {
    "text": "you're going to have\nto do a lot of samples in order to find that-- possibly exponentially\nmany samples.",
    "start": "3058638",
    "end": "3064420"
  },
  {
    "text": "And then you won't run\nin polynomial time. So let me just see if\nthere's other questions here. ",
    "start": "3064420",
    "end": "3071100"
  },
  {
    "text": "Why can we accept-- going back to the\nBoolean labeling side, why can we accept that\nb1 equals b2 if b1 and b2",
    "start": "3071100",
    "end": "3078960"
  },
  {
    "text": "agree on-- only on just one\ninput assignment? No, we didn't say that.",
    "start": "3078960",
    "end": "3084890"
  },
  {
    "text": "All right, I'll go back there. Boolean assignment-- is this--",
    "start": "3084890",
    "end": "3090270"
  },
  {
    "text": "I'm not sure which one you mean. Is this the one you mean? I don't know-- Boolean labeling,\nso it must be it.",
    "start": "3090270",
    "end": "3097099"
  },
  {
    "text": "Why do we non-Boolean labeling? ",
    "start": "3097100",
    "end": "3113190"
  },
  {
    "text": "No, I see what you're saying. You're saying about this here. We're just going to pick\none random assignment.",
    "start": "3113190",
    "end": "3120180"
  },
  {
    "text": "And if they agree on\nthat one random case, then we will say accept,\nbecause you might think,",
    "start": "3120180",
    "end": "3127823"
  },
  {
    "text": "well, we should take a\nwhole bunch of samples. That's a good question. But in fact, we're going to\narrange the probability such",
    "start": "3127823",
    "end": "3134410"
  },
  {
    "text": "that if the two things\nare not equivalent, then it's going to be--",
    "start": "3134410",
    "end": "3141339"
  },
  {
    "text": "the values will be\ndifferent almost everywhere, or a large number of places. So just picking one\nand having them agree",
    "start": "3141340",
    "end": "3147598"
  },
  {
    "text": "is going to be strong enough\nevidence that you're still going to accept. And you'll have still\na low probability of getting an error.",
    "start": "3147598",
    "end": "3154140"
  },
  {
    "text": "You'd have to see the analysis. Are we assuming the roots of\nthe polynomials are integers?",
    "start": "3154140",
    "end": "3160010"
  },
  {
    "text": "No, we're operating\nover a field here. Even talking about integers\ndoesn't totally make sense.",
    "start": "3160010",
    "end": "3166270"
  },
  {
    "text": "But it doesn't really matter. We're not assuming that. ",
    "start": "3166270",
    "end": "3173830"
  },
  {
    "text": "Oh, I should have\ntaken this away. The bound still works. ",
    "start": "3173830",
    "end": "3181090"
  },
  {
    "text": "The bound still works even\nif we have non-integers.",
    "start": "3181090",
    "end": "3187950"
  },
  {
    "text": "I'm not sure if I'm\nbeing helpful here. Why don't we just move on? But we're not\nassuming that these are integers because the\nbound doesn't matter.",
    "start": "3187950",
    "end": "3195060"
  },
  {
    "text": "If it says there is at most\nfive roots, including the reals,",
    "start": "3195060",
    "end": "3200190"
  },
  {
    "text": "there's still going to be five\nroots, including the integers. All right, so let's continue. ",
    "start": "3200190",
    "end": "3207070"
  },
  {
    "text": "Good, all right. So now everybody's back, I hope?",
    "start": "3207070",
    "end": "3212350"
  },
  {
    "text": "Let's talk about\nmoving forward here. ",
    "start": "3212350",
    "end": "3218470"
  },
  {
    "text": "Where we're going\nwith this is we want to analyze the\nalgorithm, which",
    "start": "3218470",
    "end": "3224290"
  },
  {
    "text": "picks a random non-Boolean\ninput and evaluates the two branching programs.",
    "start": "3224290",
    "end": "3232290"
  },
  {
    "text": "And in order to do that, we're\ngoing to look a little bit more carefully at what happens\nwhen we arithmetize",
    "start": "3232290",
    "end": "3242400"
  },
  {
    "text": "the branching\nprogram, and we run it on these non-Boolean values.",
    "start": "3242400",
    "end": "3247450"
  },
  {
    "text": "And so what I'm going to do is\ntake this branching program.",
    "start": "3247450",
    "end": "3255550"
  },
  {
    "text": "Let's say this is the\nsame XOR, exclusive or, branching program. But instead of labeling it as\nwe did before by setting x1",
    "start": "3255550",
    "end": "3265849"
  },
  {
    "text": "to 2 and x2 to 3, I'm going\nto leave x1 and x2 variables",
    "start": "3265850",
    "end": "3271110"
  },
  {
    "text": "and just do a\nsymbolic execution. So I'm going to label\nthese things, just",
    "start": "3271110",
    "end": "3276420"
  },
  {
    "text": "leaving x1 and x2 as variables. So let's just see what\nwe get if we do that.",
    "start": "3276420",
    "end": "3283160"
  },
  {
    "text": "So remember, we\nassigned this to be 1. Now this edge here is--",
    "start": "3283160",
    "end": "3290305"
  },
  {
    "text": " here's the rule. It's a, which is 1, times x1.",
    "start": "3290305",
    "end": "3299100"
  },
  {
    "text": "So this should be-- without knowing what\nthe value of x1 is, leaving it as a\nvariable, we're just going to put down x1 over here.",
    "start": "3299100",
    "end": "3305710"
  },
  {
    "text": "Over here, what goes over there? Well, it's 1 times 1 minus x1--",
    "start": "3305710",
    "end": "3311050"
  },
  {
    "text": "just 1 minus x1. Now we're going to add\nthings up, as we did before.",
    "start": "3311050",
    "end": "3317172"
  },
  {
    "text": "And now what happens,\nfor example-- I think I have this\nedge coming next. Let's look at this edge,\nthe one edge coming out.",
    "start": "3317172",
    "end": "3324240"
  },
  {
    "text": "The label now is\nx1 on this node. ",
    "start": "3324240",
    "end": "3330210"
  },
  {
    "text": "This is the one edge\ncoming out, so you multiply by the value of x2.",
    "start": "3330210",
    "end": "3335984"
  },
  {
    "text": "We're leaving it as a\nvariable, so we're just going to multiply it by x2. And so we're just going\nto get x1 times x2--",
    "start": "3335985",
    "end": "3344200"
  },
  {
    "text": "x1x2 on this edge. And now what happens\non this edge? So this x1 times--",
    "start": "3344200",
    "end": "3350740"
  },
  {
    "text": "think with me--\ntimes 1 minus x2.",
    "start": "3350740",
    "end": "3356390"
  },
  {
    "text": " And similarly over here, we\nhave 1 minus x1 on this node.",
    "start": "3356390",
    "end": "3362690"
  },
  {
    "text": "So I think on the one edge\ncoming out, it's 1 minus x1, now times x2, because\nthat's this rule again.",
    "start": "3362690",
    "end": "3369730"
  },
  {
    "text": " 1 minus x, 1 times x2. And this is going to be 1\nminus x1 times 1 minus x2.",
    "start": "3369730",
    "end": "3378590"
  },
  {
    "text": "Now we're going to add\nthis up for the 0 node. So we have this value, 1 minus\nx1, 1 minus x2, plus x1 x2.",
    "start": "3378590",
    "end": "3388040"
  },
  {
    "text": " And on this note\nhere, we're going",
    "start": "3388040",
    "end": "3393510"
  },
  {
    "text": "to add these two values up.",
    "start": "3393510",
    "end": "3398980"
  },
  {
    "text": "So 1 minus x1 times x2\nplus x1 times 1 minus x2.",
    "start": "3398980",
    "end": "3404460"
  },
  {
    "text": "And that's the output, now\nexpressed symbolically. Now you could plug\nthings in, and you're",
    "start": "3404460",
    "end": "3410990"
  },
  {
    "text": "going to get the same value\nout as you did before. But let's leave it as\na polynomial for now",
    "start": "3410990",
    "end": "3418550"
  },
  {
    "text": "because that's going to\nhelp us and analyze this.",
    "start": "3418550",
    "end": "3425160"
  },
  {
    "text": "So now, notice the\nform of this polynomial is something special. ",
    "start": "3425160",
    "end": "3433290"
  },
  {
    "text": "What happens is\nit's going to look like a bunch of products of\nxi's and 1 minus xi's added up.",
    "start": "3433290",
    "end": "3444730"
  },
  {
    "text": "So it's a sum of\nproducts of that form. So each row here is a product\nof xi's and 1 minus xi's.",
    "start": "3444730",
    "end": "3455589"
  },
  {
    "text": "And then those rows\nare all added together. I claim that's going to be\nthe form of this polynomial.",
    "start": "3455590",
    "end": "3462310"
  },
  {
    "text": "You see this already\nhas that form. And the reason for that is\nevery time you go to a node,",
    "start": "3462310",
    "end": "3471440"
  },
  {
    "text": "you're just adding things up. So that's just going to be\nlike adding up more rows.",
    "start": "3471440",
    "end": "3476780"
  },
  {
    "text": "And every time you go\ndown to through an edge, you're multiplying what\nyou have so far either",
    "start": "3476780",
    "end": "3482720"
  },
  {
    "text": "by an xi or a 1 minus xi. So you're just accumulating\nproducts of xi's and 1 minus",
    "start": "3482720",
    "end": "3490170"
  },
  {
    "text": "xi's, and you're\njust adding them up. So this is what that polynomial\nis going to look like.",
    "start": "3490170",
    "end": "3495720"
  },
  {
    "text": " Now let's look a little bit more\ncarefully at the form of this.",
    "start": "3495720",
    "end": "3505400"
  },
  {
    "text": "So for one thing, could we\nhave higher powers here,",
    "start": "3505400",
    "end": "3515529"
  },
  {
    "text": "like x2 cubed? Could that happen? ",
    "start": "3515530",
    "end": "3524760"
  },
  {
    "text": "And when I say it's products\nof the xi's and 1 minus xi's, maybe there's going to be some\nxi's that appear several times",
    "start": "3524760",
    "end": "3530910"
  },
  {
    "text": "in the product. Well, that cannot happen. Why? ",
    "start": "3530910",
    "end": "3538210"
  },
  {
    "text": "It's a read once\nbranching program. So every time you multiply\nby an xi or a 1 minus xi,",
    "start": "3538210",
    "end": "3545500"
  },
  {
    "text": "you're never going\nto do that again, because doing that would\nimply you're querying",
    "start": "3545500",
    "end": "3552310"
  },
  {
    "text": "that variable more than once. So this can't happen.",
    "start": "3552310",
    "end": "3557415"
  },
  {
    "text": " So I cross that out.",
    "start": "3557415",
    "end": "3563240"
  },
  {
    "text": "This just appeared. It's off to the side, here. But yeah, I'm crossing that out. That does not happen.",
    "start": "3563240",
    "end": "3568360"
  },
  {
    "text": "Another thing that is\npart of-- that's worthy--",
    "start": "3568360",
    "end": "3573690"
  },
  {
    "text": "that's going to be helpful to\nnotice about this polynomial-- and by the way, maybe\nI'm being confusing here.",
    "start": "3573690",
    "end": "3581540"
  },
  {
    "text": "This I'm supposed to be\nrepresenting as a generic form of the polynomial.",
    "start": "3581540",
    "end": "3586589"
  },
  {
    "text": "This is not some\nparticularly-- yeah, I should have said\nthis at the beginning. This is not some\nparticular polynomial that came from anything.",
    "start": "3586590",
    "end": "3592680"
  },
  {
    "text": "I'm just trying to describe\nwhat the general form of the polynomial looks like,\njust as an illustration.",
    "start": "3592680",
    "end": "3600420"
  },
  {
    "text": "So this polynomial's\n1 minus x1 times x2 times 1 minus x3\ntimes x4 and so on,",
    "start": "3600420",
    "end": "3606990"
  },
  {
    "text": "and adding up a bunch\nof rows like this. I'm just saying this is\nwhat the polynomial will look like for maybe\nsome branching program.",
    "start": "3606990",
    "end": "3614640"
  },
  {
    "text": "So every branching\nprogram is either going to have some polynomial\nthat looks sort of like this.",
    "start": "3614640",
    "end": "3620970"
  },
  {
    "text": "And what I'm also going to say-- for convenience,\nnow, I want to say that each row is going to have\nevery single variable appear",
    "start": "3620970",
    "end": "3629910"
  },
  {
    "text": "either as an xi or\nas a 1 minus xi.",
    "start": "3629910",
    "end": "3635049"
  },
  {
    "text": "So in order to get\nthat, I need to make a further minor assumption\nabout the branching program--",
    "start": "3635050",
    "end": "3640420"
  },
  {
    "text": "that it's a read exactly once. Currently when I\nsay \"read once,\" it can avoid reading some\nvariables on some branches,",
    "start": "3640420",
    "end": "3649610"
  },
  {
    "text": "because it's like a\nread at most once. But now I want to say that every\nvariable gets read exactly one time on every branch.",
    "start": "3649610",
    "end": "3656720"
  },
  {
    "text": "And what that's going to\nmean is that every row is going to contain every\nvariable, either as an xi",
    "start": "3656720",
    "end": "3663860"
  },
  {
    "text": "or as a 1 minus xi. We can eliminate that\nextra assumption easily. And I'm going to leave\nthat as an exercise to you.",
    "start": "3663860",
    "end": "3670833"
  },
  {
    "text": "It's not very hard to do. So I think if you\nfollow me, you can see-- and you play with it\nfor a minute or two,",
    "start": "3670833",
    "end": "3676600"
  },
  {
    "text": "you'll see that it\ndoesn't really matter.  But I think just for the\nfirst time through this,",
    "start": "3676600",
    "end": "3684740"
  },
  {
    "text": "let's assume that every\nrow has every variable-- ",
    "start": "3684740",
    "end": "3691289"
  },
  {
    "text": "so important to understand. ",
    "start": "3691290",
    "end": "3697510"
  },
  {
    "text": "So this is the output polynomial\nof this branching program. So let's look furthermore\nat this polynomial",
    "start": "3697510",
    "end": "3704800"
  },
  {
    "text": "and understand the rows. Let's take one row\nout of this polynomial",
    "start": "3704800",
    "end": "3712750"
  },
  {
    "text": "to understand what\nit represents.",
    "start": "3712750",
    "end": "3723030"
  },
  {
    "text": "So one row here-- it's a product of a\nbunch of things, product of a bunch of variables,\neither variables",
    "start": "3723030",
    "end": "3730010"
  },
  {
    "text": "or 1 minus the variables. ",
    "start": "3730010",
    "end": "3736110"
  },
  {
    "text": "Let's think about this in the\nBoolean setting, first of all. So in the Boolean setting, each\nof these variables are going",
    "start": "3736110",
    "end": "3743540"
  },
  {
    "text": "to be 0's and 1's. And the 1 minus the variables\nare also going to be 0's and 1's. So it's going to be a\nproduct of 0's and 1's.",
    "start": "3743540",
    "end": "3751910"
  },
  {
    "text": "If there's a 0 that\nappears in that product, that product is going to be a\n0, because 0 times anything is",
    "start": "3751910",
    "end": "3759220"
  },
  {
    "text": "a 0. So the only way that product\ncannot be 0 is if all of those",
    "start": "3759220",
    "end": "3771880"
  },
  {
    "text": "values are 1's in\nthe Boolean case. So that means that x1--",
    "start": "3771880",
    "end": "3781320"
  },
  {
    "text": "well, let's look\nat the second row. So x1 had to be a 1. x2 had\nto be a 1. x3 had to be a 1.",
    "start": "3781320",
    "end": "3787890"
  },
  {
    "text": "x4 had to be a 0 in\norder to continue the product of 1's, and so on.",
    "start": "3787890",
    "end": "3796760"
  },
  {
    "text": "So in fact, there's only a\nsingle Boolean assignment to these variables\nwhich make that row 1.",
    "start": "3796760",
    "end": "3805570"
  },
  {
    "text": "Every other assignment to those\nvariables makes that row 0. ",
    "start": "3805570",
    "end": "3815040"
  },
  {
    "text": "Saying that another\nway, each of these rows corresponds to one of\nthe rows of the truth",
    "start": "3815040",
    "end": "3825870"
  },
  {
    "text": "table for the Boolean function,\nwhere the truth table is true,",
    "start": "3825870",
    "end": "3833090"
  },
  {
    "text": "gives a true value,\ngives a 1 value for the function on that row. So I hope you're all familiar\nwith the notion of a truth",
    "start": "3833090",
    "end": "3840770"
  },
  {
    "text": "table of a Boolean function. You just write down\nthe Boolean function, every possible assignment\nto the Boolean function,",
    "start": "3840770",
    "end": "3847820"
  },
  {
    "text": "and you write down 1 or\n0 or true or false for what the value of\nthat function is. It's just a tabular\nrepresentation",
    "start": "3847820",
    "end": "3854570"
  },
  {
    "text": "of the Boolean function. It's called a truth table. This thing here gives\nyou all of the 1's--",
    "start": "3854570",
    "end": "3861370"
  },
  {
    "text": "all of the rows that are 1\nin that Boolean function. That's what this\npolynomial gives you.",
    "start": "3861370",
    "end": "3868059"
  },
  {
    "text": " So I think we're at a\npause point for this slide.",
    "start": "3868060",
    "end": "3878070"
  },
  {
    "text": " It's deathly silent on the chat.",
    "start": "3878070",
    "end": "3886190"
  },
  {
    "text": "So I have a feeling that\nthat went down rough for you.",
    "start": "3886190",
    "end": "3893650"
  },
  {
    "text": " It's important to understand the\nform of this polynomial here.",
    "start": "3893650",
    "end": "3901535"
  },
  {
    "text": " It corresponds to the truth\ntable of the Boolean function.",
    "start": "3901535",
    "end": "3907400"
  },
  {
    "text": "So each one of these rows\nis only going to be-- again, thinking Boolean\nnow, each one of these rows",
    "start": "3907400",
    "end": "3913420"
  },
  {
    "text": "is only going to be 1\non an assignment which makes the function 1--",
    "start": "3913420",
    "end": "3921308"
  },
  {
    "text": "one of the assignments\nthat makes the function 1. ",
    "start": "3921308",
    "end": "3927280"
  },
  {
    "text": "And somebody says, and similarly\nfor the expression for the 0 node. Yeah, the 0 node, which\nI'm not focusing on, but,",
    "start": "3927280",
    "end": "3933550"
  },
  {
    "text": "yeah, the 0 node would be all\nof the false rows of the truth table.",
    "start": "3933550",
    "end": "3940019"
  },
  {
    "text": "But the 1 node, the\npolynomial for the 1 node, are all of the true rows-- correspond to all\nof the true rows",
    "start": "3940020",
    "end": "3946500"
  },
  {
    "text": "in the function of the\nbranching-- the function",
    "start": "3946500",
    "end": "3956742"
  },
  {
    "text": "that branching program computes.  Let me just tell you\nwhere we're going.",
    "start": "3956742",
    "end": "3962510"
  },
  {
    "start": "3962510",
    "end": "3973590"
  },
  {
    "text": "Is it possible to have two\nrows that are the same? If you think about how the\nrows are being produced, no.",
    "start": "3973590",
    "end": "3980700"
  },
  {
    "text": "You can't have two\nrows that are going to be the same,\nbecause for one thing,",
    "start": "3980700",
    "end": "3988532"
  },
  {
    "text": "you have to think about what\nthis looks like in the Boolean case. If you have two\nrows are the same,",
    "start": "3988532",
    "end": "3993780"
  },
  {
    "text": "that means this thing is going\nto-- would have an output which is non-Boolean because\nyou're going to end up",
    "start": "3993780",
    "end": "4000590"
  },
  {
    "text": "with a 2 coming out that way\nby adding those rows together. That can never happen.",
    "start": "4000590",
    "end": "4005910"
  },
  {
    "text": "And if you just look at\nthe way it's constructed, you're never going to--\nbecause every time you have a branching, one way is an xi.",
    "start": "4005910",
    "end": "4013460"
  },
  {
    "text": "The other one is 1 minus xi. So every time you're\nbranching there, every time there's a\nnode, they're different.",
    "start": "4013460",
    "end": "4020068"
  },
  {
    "text": "So you're never going\nto have two rows that are going to be the same. But let me tell you the\nimportance of connecting up",
    "start": "4020068",
    "end": "4028670"
  },
  {
    "text": "this polynomial with\nthe truth table, because that tells us that if\nthe two functions of the two",
    "start": "4028670",
    "end": "4037650"
  },
  {
    "text": "branching programs that\nwe started off with agree in their Boolean values,\nthen the two polynomials are",
    "start": "4037650",
    "end": "4044880"
  },
  {
    "text": "going to be the same. ",
    "start": "4044880",
    "end": "4054799"
  },
  {
    "text": "Because if the two branching\nprograms have the same Boolean",
    "start": "4054800",
    "end": "4060710"
  },
  {
    "text": "function, so they're equivalent,\nthen the truth tables",
    "start": "4060710",
    "end": "4065720"
  },
  {
    "text": "will be the same. And therefore, these\npolynomials will be the same. And therefore, they\nwill behave the same way",
    "start": "4065720",
    "end": "4072530"
  },
  {
    "text": "on all non-Boolean\nvalues, because they're the same polynomial.",
    "start": "4072530",
    "end": "4077750"
  },
  {
    "text": " So I'm getting ahead\nof myself, but that's",
    "start": "4077750",
    "end": "4083030"
  },
  {
    "text": "what we're going to argue. That's why it's\nimportant to understand the connection with\nthe truth table,",
    "start": "4083030",
    "end": "4089430"
  },
  {
    "text": "because it builds on the-- ",
    "start": "4089430",
    "end": "4095593"
  },
  {
    "text": "understanding something\nabout how this thing behaves in the Boolean case\nis going to give us information about how it\nbehaves in the non-Boolean case.",
    "start": "4095593",
    "end": "4102049"
  },
  {
    "text": " But let's continue here, then. ",
    "start": "4102050",
    "end": "4118589"
  },
  {
    "text": "Yeah, this is essentially\nthe last slide, but we're going to spend\nsome time on this one.",
    "start": "4118590",
    "end": "4124509"
  },
  {
    "text": "So here's the algorithm. We are going to take our\ntwo branching programs.",
    "start": "4124510",
    "end": "4131310"
  },
  {
    "text": "The variables are x1 to xm. First of all,\nwe're going to find a prime which is\nat least 3 times m,",
    "start": "4131310",
    "end": "4139589"
  },
  {
    "text": "the number of variables. m is not a very big number. It's just the\nnumber of variables.",
    "start": "4139590",
    "end": "4146120"
  },
  {
    "text": "So finding a prime that's bigger\nthan that is straightforward. We're not talking\nabout huge primes here.",
    "start": "4146120",
    "end": "4151240"
  },
  {
    "text": "We're talking about very\nmodest-sized primes. ",
    "start": "4151240",
    "end": "4157174"
  },
  {
    "text": "Even trial and error is\ngoing to be good enough. ",
    "start": "4157175",
    "end": "4162770"
  },
  {
    "text": "Now that's going to be\nthe size of the field. It's going to be\na field of size q.",
    "start": "4162770",
    "end": "4170109"
  },
  {
    "text": "And now we're going to pick\na non-Boolean assignment to the variables. ",
    "start": "4170109",
    "end": "4184176"
  },
  {
    "text": "We're going to pick a\nnon-Boolean assignment to the variables and evaluate\nthe two branching programs",
    "start": "4184177",
    "end": "4194900"
  },
  {
    "text": "on that non-Boolean assignment\nusing the arithmetization. If they agree,\nthen we'll accept.",
    "start": "4194900",
    "end": "4201710"
  },
  {
    "text": "If they don't agree, then\nwe're going to reject. Now we have to argue\nthat this works.",
    "start": "4201710",
    "end": "4208159"
  },
  {
    "text": "So we're going to first of\nall arithmetize these two branching programs,\nand we're going to get these two polynomials.",
    "start": "4208160",
    "end": "4214490"
  },
  {
    "text": "They each have the form that--\nas I described, so a bunch",
    "start": "4214490",
    "end": "4219990"
  },
  {
    "text": "of rows that correspond to\nthe truth tables of those two respective branching programs. ",
    "start": "4219990",
    "end": "4227310"
  },
  {
    "text": "First claim-- that if the\nbranching programs were equivalent, so they compute\nthe same Boolean function,",
    "start": "4227310",
    "end": "4234270"
  },
  {
    "text": "then the two polynomials\nagree everywhere. ",
    "start": "4234270",
    "end": "4240840"
  },
  {
    "text": "So then the two\nbranching programs are going to get the same\nvalue on every non-Boolean case",
    "start": "4240840",
    "end": "4247997"
  },
  {
    "text": "as well as on the Boolean cases. So they agree in the Boolean. That means they always agree,\neven on the non-Boolean.",
    "start": "4247997",
    "end": "4253380"
  },
  {
    "text": "And I kind of\nargued that already. The other point is that if the\ntwo branching programs are not",
    "start": "4253380",
    "end": "4260220"
  },
  {
    "text": "equivalent, so they differ\nat some Boolean value, now picking a random value\nfor the polynomial evaluation,",
    "start": "4260220",
    "end": "4269489"
  },
  {
    "text": "you're going to have only a\n1/3 chance that they're going to agree, so a small chance.",
    "start": "4269490",
    "end": "4275440"
  },
  {
    "text": " All right, so now let's\nprove these two facts.",
    "start": "4275440",
    "end": "4285239"
  },
  {
    "text": "The first one I\nalready kind of argued. If the two branching\nprograms agree on all the Boolean values,\nthen their functions",
    "start": "4285240",
    "end": "4294280"
  },
  {
    "text": "have the same truth table. So then the polynomials\nare identical because the polynomials\ncorrespond to the truth table.",
    "start": "4294280",
    "end": "4302030"
  },
  {
    "text": " And so therefore, they\nalways agree, even",
    "start": "4302030",
    "end": "4307491"
  },
  {
    "text": "on the non-Boolean values. ",
    "start": "4307492",
    "end": "4314150"
  },
  {
    "text": "So that means that\nthe probability that if you evaluate the two\npolynomials on a random place,",
    "start": "4314150",
    "end": "4322040"
  },
  {
    "text": "whether they'll be equal, that's\na certainty, because in fact, in this case, p1 and p2\nare the same polynomial.",
    "start": "4322040",
    "end": "4328820"
  },
  {
    "text": " Now for two, if the branching\nprograms differ somewhere,",
    "start": "4328820",
    "end": "4339490"
  },
  {
    "text": "even in one place, well you\nknow the polynomials could not be the same.",
    "start": "4339490",
    "end": "4344510"
  },
  {
    "text": "They have to be\ndifferent polynomials because the polynomials include\nthe behavior in the Boolean",
    "start": "4344510",
    "end": "4350440"
  },
  {
    "text": "case as well as all\nthe rest of the field. So the polynomials\nhave to be the same.",
    "start": "4350440",
    "end": "4356300"
  },
  {
    "text": "And now we're going to apply\nthe Schwartz-Zippel lemma. We have two different\npolynomials.",
    "start": "4356300",
    "end": "4365140"
  },
  {
    "text": "They can only agree in a\nrelatively small number of places. So that says that, from the\nSchwartz-Zippel theorem,",
    "start": "4365140",
    "end": "4373750"
  },
  {
    "text": "then the probability\nthat p1 and p2 agree at this random location\nis at most this value",
    "start": "4373750",
    "end": "4380530"
  },
  {
    "text": "that we had from\nbefore, the degree times the number of\nvariables divided by the size of the field.",
    "start": "4380530",
    "end": "4387410"
  },
  {
    "text": "The degree is 1.  And the field is\nat least 3 times",
    "start": "4387410",
    "end": "4395490"
  },
  {
    "text": "the number of variables in size. So that means you get\nthis inequality here.",
    "start": "4395490",
    "end": "4401770"
  },
  {
    "text": "And so therefore, the\nprobability is a 1/3-- at most 1/3.",
    "start": "4401770",
    "end": "4408040"
  },
  {
    "text": "And that's good enough. This is the probability that\nyou get the wrong answer is going to be at most 1/3.",
    "start": "4408040",
    "end": "4414215"
  },
  {
    "text": "So you're going to\nget the right answer with at least 2/3 probability. So even just doing a\nsingle sample point",
    "start": "4414215",
    "end": "4420070"
  },
  {
    "text": "is going to be enough to\ngive it a PPP algorithm. ",
    "start": "4420070",
    "end": "4426420"
  },
  {
    "text": "What I have are a couple of\ncheck-ins here now for you. ",
    "start": "4426420",
    "end": "4434469"
  },
  {
    "text": "Whoops, somehow this-- going\nto take me out of here. ",
    "start": "4434470",
    "end": "4442790"
  },
  {
    "text": "All right, so this\nis a little hard, but let's see how you do on it.",
    "start": "4442790",
    "end": "4448650"
  },
  {
    "text": "Suppose the branching\nprogram is-- well, maybe I a little bit\ndiscussed this already,",
    "start": "4448650",
    "end": "4454560"
  },
  {
    "text": "but that's OK. The branching programs\nwere not read once. The polynomials might have\nexponents bigger than 1.",
    "start": "4454560",
    "end": "4460050"
  },
  {
    "text": "So where would the proof fail? Would they fail at the point\nwhere b1 and equivalent to b2",
    "start": "4460050",
    "end": "4468450"
  },
  {
    "text": "implies that they agree\non all Boolean inputs? So that's the first step here.",
    "start": "4468450",
    "end": "4474000"
  },
  {
    "text": "Or was it that agreeing\non all Boolean inputs implies that the\npolynomials are the same?",
    "start": "4474000",
    "end": "4480920"
  },
  {
    "text": "Or would it be that having the\ntwo polynomials being equal implies that they always agree?",
    "start": "4480920",
    "end": "4486640"
  },
  {
    "text": "So those are the three steps\nin the proof of part one.",
    "start": "4486640",
    "end": "4492850"
  },
  {
    "text": "So let's see. What do you think there?  I'm getting a\ncouple of questions",
    "start": "4492850",
    "end": "4498630"
  },
  {
    "text": "about picking the prime number. ",
    "start": "4498630",
    "end": "4504770"
  },
  {
    "text": "The prime number here is-- this is a very\nsmall prime number.",
    "start": "4504770",
    "end": "4511370"
  },
  {
    "text": "You could even represent\nthat prime number in unary within the amount of time we\nhave, because don't forget,",
    "start": "4511370",
    "end": "4517400"
  },
  {
    "text": "this is a prime number\nwhose magnitude is at most the number of variables. So you can write that\nprime number in unary.",
    "start": "4517400",
    "end": "4524389"
  },
  {
    "text": "And finding the prime\nand testing primality,",
    "start": "4524390",
    "end": "4531870"
  },
  {
    "text": "testing whether the\nnumber is prime, is something that\nyou can do even with a brute-force algorithm,\nand it would be good enough.",
    "start": "4531870",
    "end": "4540870"
  },
  {
    "text": "You don't have to do anything\nfancy about testing primality in this case. ",
    "start": "4540870",
    "end": "4547530"
  },
  {
    "text": "So why does it have to be prime? You need it to prime in\norder for it to be a field.",
    "start": "4547530",
    "end": "4555180"
  },
  {
    "text": "So this is just\nthe algebra part. If you did not have\na prime number,",
    "start": "4555180",
    "end": "4560800"
  },
  {
    "text": "then some of the field\nproperties don't work. And you may no\nlonger get the fact",
    "start": "4560800",
    "end": "4567219"
  },
  {
    "text": "that the polynomial has\na small number of roots. So that's all I\ncan say about that.",
    "start": "4567220",
    "end": "4577940"
  },
  {
    "text": "Is the polynomial\nlike a hash function for the branching program? Are they equal if\nthey are the same, but sometimes the\nvalue is also equal",
    "start": "4577940",
    "end": "4584360"
  },
  {
    "text": "if the programs are different? That's an interesting idea. Is the polynomial acting\nlike a hash function?",
    "start": "4584360",
    "end": "4591050"
  },
  {
    "text": "I think there is something\nto what you're saying, but I think it's actually\nin the other direction. ",
    "start": "4591050",
    "end": "4600850"
  },
  {
    "text": "It's related to a hash function,\nbut it's actually acting more like an error-correcting code.",
    "start": "4600850",
    "end": "4606710"
  },
  {
    "text": "Let's save that for later. It's a very good point. It's a very good question. Maybe we can talk about\nit after if you remind me.",
    "start": "4606710",
    "end": "4613780"
  },
  {
    "text": "OK, let's end this poll here.  Should C be-- if\nhaving these two agree",
    "start": "4613780",
    "end": "4624400"
  },
  {
    "text": "implies-- well, I mean,\nthe question is, should we",
    "start": "4624400",
    "end": "4629890"
  },
  {
    "text": "change p1 and p2 always agree\nto b1 and b2 always agree? Well, b1 and b2 are\nbehaving exactly the way p1",
    "start": "4629890",
    "end": "4637290"
  },
  {
    "text": "and p2 behave, so I'm not\nsure it really matters. ",
    "start": "4637290",
    "end": "4644250"
  },
  {
    "text": "Too much time on this\nchat, on this poll here. Let's end this poll-- oh, sharing results.",
    "start": "4644250",
    "end": "4649905"
  },
  {
    "text": " Yeah, so the\ncorrect answer is B,",
    "start": "4649905",
    "end": "4657520"
  },
  {
    "text": "that agreeing on\nall Boolean inputs implies that they are equal.",
    "start": "4657520",
    "end": "4662860"
  },
  {
    "text": "The other two\nfollow immediately. They're still true. But if it's not read\nonce, even though they",
    "start": "4662860",
    "end": "4668980"
  },
  {
    "text": "agree on all the Boolean\ninputs, they won't necessarily agree as polynomials.",
    "start": "4668980",
    "end": "4674530"
  },
  {
    "text": "For one thing, if you just take\nthe two polynomials x1 squared and x1, they agree on\nall the Boolean inputs,",
    "start": "4674530",
    "end": "4683690"
  },
  {
    "text": "but they're not the same. They agree in the Boolean\nworld, because 0 squared is 0,",
    "start": "4683690",
    "end": "4689720"
  },
  {
    "text": "and 1 squared is 1. But they're not the\nsame polynomial.",
    "start": "4689720",
    "end": "4694950"
  },
  {
    "text": "Let's move on. Actually, I have\nanother check-in on the same slide here.",
    "start": "4694950",
    "end": "4701852"
  },
  {
    "text": "And this is actually\nanswering a question that I got in the chat. If p1 and p2 were-- ",
    "start": "4701852",
    "end": "4709159"
  },
  {
    "text": "how big are these polynomials? These look like\nthey could be big. If they're exponentially\nlarge, would that",
    "start": "4709160",
    "end": "4715700"
  },
  {
    "text": "be a problem for\nthe time complexity?  So pick A or B here.",
    "start": "4715700",
    "end": "4724160"
  },
  {
    "text": "We're running out of time here. So why don't I not say too much\nand just let you go with it.",
    "start": "4724160",
    "end": "4732410"
  },
  {
    "text": " I'm going to close this down.",
    "start": "4732410",
    "end": "4738100"
  },
  {
    "text": "All in?  Well, oh, my god, by one point.",
    "start": "4738100",
    "end": "4746590"
  },
  {
    "text": " This is like Georgia here--",
    "start": "4746590",
    "end": "4754080"
  },
  {
    "text": "do a recount. In fact, B is correct by a hair.",
    "start": "4754080",
    "end": "4764160"
  },
  {
    "text": "They are not polynomial in size. The truth tables\ncan be very large. As we did with the\nbranching program",
    "start": "4764160",
    "end": "4773190"
  },
  {
    "text": "for the exclusive or\ncase, you don't actually",
    "start": "4773190",
    "end": "4778260"
  },
  {
    "text": "write down the polynomials\nto evaluate them. You can evaluate them\nas you're going along. The polynomials are huge.",
    "start": "4778260",
    "end": "4784570"
  },
  {
    "text": "But you don't have to\nwrite down the polynomials to evaluate them. That's only part of the proof. ",
    "start": "4784570",
    "end": "4792030"
  },
  {
    "text": "The algorithm doesn't have\nto deal with the polynomials itself, so maybe good\nto think about this.",
    "start": "4792030",
    "end": "4801650"
  },
  {
    "text": "And somebody says, did\nI invent this proof? No, I did not invent this proof. It's a wonderful proof,\nbut it's not mine.",
    "start": "4801650",
    "end": "4807409"
  },
  {
    "text": "I would love to have been-- get to take the credit for it. So why don't we wrap this up?",
    "start": "4807410",
    "end": "4816080"
  },
  {
    "text": " Is there some way to\nsimplify the polynomials",
    "start": "4816080",
    "end": "4821480"
  },
  {
    "text": "as we're going along\nso that we don't end up with them being too big and\nso that we can then just",
    "start": "4821480",
    "end": "4828800"
  },
  {
    "text": "look at the polynomials? Not that I know of. ",
    "start": "4828800",
    "end": "4835320"
  },
  {
    "text": "I think the polynomials\nare really going to be big. And so there's not going to be\nany way to view it just as--",
    "start": "4835320",
    "end": "4843619"
  },
  {
    "text": "if you could, it\nwould be fantastic, because that would give you\na deterministic algorithm. I think the only\nway that people know",
    "start": "4843620",
    "end": "4849920"
  },
  {
    "text": "how to do this in\nterms of random inputs to a polynomial, which\nis too big to write down.",
    "start": "4849920",
    "end": "4855440"
  },
  {
    "text": "If you could write it down and\njust analyze the polynomials, you'd have a huge,\nhuge result there.",
    "start": "4855440",
    "end": "4860750"
  },
  {
    "start": "4860750",
    "end": "4866475"
  },
  {
    "text": "Oh, I'm glad people\nlike this proof. That's good. ",
    "start": "4866475",
    "end": "4874520"
  },
  {
    "text": "How many actual quantities\nare there in the formula? I'm not sure what that means. What formula?",
    "start": "4874520",
    "end": "4880550"
  },
  {
    "text": "I mean, the polynomial is huge. The number of\ndifferent polynomials--",
    "start": "4880550",
    "end": "4885570"
  },
  {
    "text": "well, I guess I don't\nunderstand the question. What motivates the idea\nof arithmetization?",
    "start": "4885570",
    "end": "4892805"
  },
  {
    "text": "What would make\nsomebody think of this? I'm not sure, actually. ",
    "start": "4892805",
    "end": "4901360"
  },
  {
    "text": "But we're going to use it\neven in a more remarkable way in the last two lectures of\nthe course, so stay tuned.",
    "start": "4901360",
    "end": "4910340"
  },
  {
    "text": "I mean, this is sort of clever,\nbut seems very specialized. But the next part, where we\ngo to the next application,",
    "start": "4910340",
    "end": "4917920"
  },
  {
    "text": "we're going to use this\nto analyze satisfiability, which is a much more\ngeneral kind of a situation. And that, I think, is\nespecially remarkable.",
    "start": "4917920",
    "end": "4925600"
  },
  {
    "start": "4925600",
    "end": "4933160"
  },
  {
    "text": "For the polynomials p1 and p2,\nit's only a polynomial number--",
    "start": "4933160",
    "end": "4940320"
  },
  {
    "text": "I don't think so, because-- well, it depends on\nthe size of the field. The size of-- no, it's\ngoing to be something",
    "start": "4940320",
    "end": "4945960"
  },
  {
    "text": "like m to the mth power, right? So those are the number\nof possible inputs.",
    "start": "4945960",
    "end": "4953070"
  },
  {
    "text": "Each field element has 3m\npossibilities, roughly.",
    "start": "4953070",
    "end": "4959429"
  },
  {
    "text": "And there are m field\nelements, so it's m to the 3m different\npossible inputs",
    "start": "4959430",
    "end": "4967180"
  },
  {
    "text": "that you're picking at random. So anyway, I'm going to\nshut this down and move over to the office hours Zoom.",
    "start": "4967180",
    "end": "4976510"
  },
  {
    "text": "Feel free to join me there. Otherwise, I will see\nyou all on Thursday. Take care.",
    "start": "4976510",
    "end": "4982930"
  },
  {
    "start": "4982930",
    "end": "4996000"
  }
]