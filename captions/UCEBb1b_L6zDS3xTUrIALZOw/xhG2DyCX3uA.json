[
  {
    "text": "We're going to talk about\nshortest paths, and we're going to talk about\nshortest paths for three",
    "start": "7000",
    "end": "14951"
  },
  {
    "text": "lectures.\nSo, this is a trilogy. Today will be Shortest Paths\nOne.",
    "start": "14951",
    "end": "20338"
  },
  {
    "text": "I've been watching far too many\nversions of Star Wars this weekend.\nI saw the musical yesterday,",
    "start": "20338",
    "end": "28289"
  },
  {
    "text": "matinee.\nThat was an MIT musical. That was fun,\nof all three movies in about",
    "start": "28289",
    "end": "35228"
  },
  {
    "text": "four hours.\nThat was a bit long and then I saw the one-man show on Friday.\nOne-man Star Wars:",
    "start": "35228",
    "end": "42467"
  },
  {
    "text": "the original three movies in\none hour. That was the opposite of too\nlong.",
    "start": "42467",
    "end": "48097"
  },
  {
    "text": "Both were fun.\nSo I get my trilogy fix. All episodes,\nfirst we're going to start with",
    "start": "48097",
    "end": "54693"
  },
  {
    "text": "The New Hope,\nand we're going to talk about the shortest paths problem and\nsolve one particular problem of",
    "start": "54693",
    "end": "62978"
  },
  {
    "text": "it, a very interesting version.\nAnd then we're going to look at",
    "start": "62978",
    "end": "69142"
  },
  {
    "text": "increasingly more general\nversions as we go on. Shortest paths are sort of an\napplication of dynamic",
    "start": "69142",
    "end": "75847"
  },
  {
    "text": "programming, which we saw last\nweek, and greedy algorithms, which we also saw last week.\nSo, were going to build that",
    "start": "75847",
    "end": "83728"
  },
  {
    "text": "and get some pretty interesting\nalgorithms for an important problem, which is how to get\nfrom Alderon to,",
    "start": "83728",
    "end": "90778"
  },
  {
    "text": "I don't know,\nCambridge as quickly as possible, OK,\nwhen you live in a graph.",
    "start": "90778",
    "end": "97000"
  },
  {
    "text": "So, there's geometric shortest\npaths which is a little bit harder.\nHere, we're just going to look",
    "start": "97000",
    "end": "104230"
  },
  {
    "text": "at shortest paths in graphs.\nNow, hopefully you all know what a path in a graph is.\nBut, so, very quick review in",
    "start": "104230",
    "end": "112692"
  },
  {
    "text": "particular because we're going\nto be looking at weighted graphs.\nSo, the usual setup:",
    "start": "112692",
    "end": "119000"
  },
  {
    "text": "suppose we have directed graph,\nG, have some vertices, some edges.\nWe have edge weights,",
    "start": "119000",
    "end": "127967"
  },
  {
    "text": "make it a little more\ninteresting. So, this is just a real number\non each edge.",
    "start": "127968",
    "end": "138711"
  },
  {
    "text": "So, edge weights are usually\ngiven by function,",
    "start": "138712",
    "end": "145214"
  },
  {
    "text": "w.\nFor every edge, you get a real number.",
    "start": "145214",
    "end": "152000"
  },
  {
    "text": "And then, if we look at the\npaths in the graph, so we're going to use some\nsimple notation for paths called",
    "start": "160000",
    "end": "167428"
  },
  {
    "text": "a path, p, starts at some\nvertex, and it goes to some other vertex,\nand so on.",
    "start": "167428",
    "end": "172785"
  },
  {
    "text": "Say the last vertex is v_k,\nand each of these should be a directed edge in the digraph.\nSo, this is a directed path.",
    "start": "172785",
    "end": "180857"
  },
  {
    "text": "It has to respect edges in\nhere. And, we'll say that the weight\nof such a path is just the sum",
    "start": "180857",
    "end": "190033"
  },
  {
    "text": "of the weights of the edges\nalong the path. And, we'll call that w(p).\nThis is sum,",
    "start": "190033",
    "end": "198078"
  },
  {
    "text": "i equals one to k minus one of\nw(v_i, v_(i+1)) plus one.",
    "start": "198078",
    "end": "203608"
  },
  {
    "text": "OK, so just to rub it in,\nand in particular, how general this can be,\nwe have some path,",
    "start": "203608",
    "end": "212156"
  },
  {
    "text": "it starts at some vertex,\nthere's some edge weights along",
    "start": "212156",
    "end": "217787"
  },
  {
    "text": "the way.\nThis is some arbitrary path in the graph, in some hypothetical\ngraph.",
    "start": "217787",
    "end": "226000"
  },
  {
    "text": "OK, this is mainly to point out\nthat some of the edge weights could be negative.\nSome of them could be zero.",
    "start": "238000",
    "end": "244663"
  },
  {
    "text": "This sum here is minus two.\nSo, the weight of this path is minus two.\nAnd, presumably,",
    "start": "244663",
    "end": "249930"
  },
  {
    "text": "the graph is much bigger than\nthis. This is just one path in the\ngraph. We're usually thinking about\nsimple paths that can't repeat a",
    "start": "249930",
    "end": "258053"
  },
  {
    "text": "vertex.\nBut, sometimes we allow that. And then, what we care about is\nthe shortest path,",
    "start": "258053",
    "end": "263448"
  },
  {
    "text": "or a shortest path.\nAgain, this may not be unique, but we'll still usually call it\nthe shortest path.",
    "start": "263448",
    "end": "271000"
  },
  {
    "text": "So, we want the shortest path\nfrom some A to some B.",
    "start": "271000",
    "end": "276084"
  },
  {
    "text": "Or, we'll call the vertices u\nand v. And we want this to be some\npath of minimum possible weight,",
    "start": "276084",
    "end": "285456"
  },
  {
    "text": "subject to starting at u,\nand going to v. OK, so that's what we're\nlooking for.",
    "start": "285456",
    "end": "293033"
  },
  {
    "text": "In general, give you a vertex,\nu, give you a vertex,",
    "start": "293033",
    "end": "298117"
  },
  {
    "text": "v, find a shortest path as\nquickly as possible.",
    "start": "298117",
    "end": "304000"
  },
  {
    "text": "What's a good algorithm for\nthat? That's the topic for the next\nthree lectures.",
    "start": "304000",
    "end": "310653"
  },
  {
    "text": "We'll usually think about a\nslightly simpler problem, which is just computing the\nweight of that path,",
    "start": "310653",
    "end": "319319"
  },
  {
    "text": "which is essentially computing\nthe distance from A to B. So, we'll call this the\nshortest path weight from u to",
    "start": "319319",
    "end": "328774"
  },
  {
    "text": "v.\nAnd, we'll denote it by delta of (u,v), delta .\nSo, I mean, it's the weight of",
    "start": "328774",
    "end": "338188"
  },
  {
    "text": "the shortest path,\nor a weight of every shortest",
    "start": "338188",
    "end": "343251"
  },
  {
    "text": "path.\nOr, in other words, it's the Min over the weight of\neach path from u to v.",
    "start": "343252",
    "end": "351548"
  },
  {
    "text": "So, p here is a path.\nOK, so you just consider, there could be a lot of\ndifferent paths.",
    "start": "351548",
    "end": "362000"
  },
  {
    "text": "There could,\nin principle, be infinitely many,\nif you're allowed to repeat",
    "start": "362000",
    "end": "369543"
  },
  {
    "text": "vertices.\nYou look at all those paths hypothetically.\nYou take the minimum weight.",
    "start": "369543",
    "end": "377937"
  },
  {
    "text": "Question?\nGood. My next question was going to\nbe, when do shortest paths not",
    "start": "377937",
    "end": "385693"
  },
  {
    "text": "exist?\nAnd you've hit upon one version, which is when you have\nnegative edge weights.",
    "start": "385693",
    "end": "396000"
  },
  {
    "text": "So, in principle,\nwhen you have negative edge weights, some shortest paths may\nnot exist in the sense that",
    "start": "396000",
    "end": "405682"
  },
  {
    "text": "there is no shortest paths.\nThere are no shortest paths.",
    "start": "405683",
    "end": "410854"
  },
  {
    "text": "There is no shortest path from\nu to v. OK, in particular,\nif I have two vertices,",
    "start": "410854",
    "end": "418188"
  },
  {
    "text": "u and v, and I want the\nshortest path between them, and I have negative edge\nweights, well,",
    "start": "418188",
    "end": "426461"
  },
  {
    "text": "this is fine.\nI mean, I can still compute the",
    "start": "426461",
    "end": "432548"
  },
  {
    "text": "weight of a path that has\nnegative weights. But when specifically won't I\nhave a single shortest path from",
    "start": "432548",
    "end": "444337"
  },
  {
    "text": "u to v?\nSo, go ahead. Good.\nSo, if I can find the cycle",
    "start": "444337",
    "end": "449862"
  },
  {
    "text": "somewhere along here whose total\nweight, say, the sum of all the weights of these images is\nnegative, then I get there,",
    "start": "449862",
    "end": "457862"
  },
  {
    "text": "I go around as many times as I\nwant. I keep decreasing the weight\nbecause the weight is negative.",
    "start": "457862",
    "end": "464344"
  },
  {
    "text": "I decrease it by some fixed\namount, and then I can go to v. So, as long as there is a\nnegative weights cycle reachable",
    "start": "464344",
    "end": "472275"
  },
  {
    "text": "from u that can also reach v,\nthen there's no shortest path because if I take any particular\npath, I can make it shorter by",
    "start": "472275",
    "end": "480551"
  },
  {
    "text": "going around a couple more\ntimes. So, in some sense,\nthis is not really a minimum.",
    "start": "480551",
    "end": "487219"
  },
  {
    "text": "It's more like an infimum for\nthose who like to get fancy about such things.\nBut we'll just say that delta",
    "start": "487219",
    "end": "494272"
  },
  {
    "text": "of (u,v) is minus infinity in\nthis case. There's a negative weights\ncycle from u to v.",
    "start": "494273",
    "end": "499958"
  },
  {
    "text": "So, that's one case we have to\nworry about in some sense. But, as long as there are no\nnegative weight cycles,",
    "start": "499958",
    "end": "507287"
  },
  {
    "text": "delta of (u,v) will be\nsomething bigger than minus infinity, bounded below by some\nfinite value even if you could",
    "start": "507287",
    "end": "514820"
  },
  {
    "text": "have negative weights,\nbut still no negative weights cycle for example,\nthere might not be any cycles",
    "start": "514821",
    "end": "521534"
  },
  {
    "text": "in your graph.\nSo that's still interesting. And, I guess it's useful to\nnote that you can get from A to",
    "start": "521534",
    "end": "530035"
  },
  {
    "text": "B in negative infinite time.\nIt's time travel, if the weights happen that\ncorrespond to time.",
    "start": "530035",
    "end": "536350"
  },
  {
    "text": "But when else might shortest\npaths not exist? So, this is one case,\nbut there's another,",
    "start": "536350",
    "end": "544392"
  },
  {
    "text": "simpler case.\nIt's not connected. There might not be any path\nfrom u to v.",
    "start": "544392",
    "end": "552000"
  },
  {
    "text": "This path might be empty.\nThere may be no path from u to",
    "start": "552000",
    "end": "557892"
  },
  {
    "text": "v.\nHere we have to define what happens, and here,\nwe'll say it's infinity if",
    "start": "557892",
    "end": "565714"
  },
  {
    "text": "there's no path from u to v.\nSo, there are these exceptional",
    "start": "565714",
    "end": "572128"
  },
  {
    "text": "cases plus infinity and minus\ninfinity, which are pretty intuitive because it takes a\nreally long time to get from u",
    "start": "572129",
    "end": "579893"
  },
  {
    "text": "to v if there's no path there.\nYou can't get there from here. OK, but that's the definition.\nMost of the time,",
    "start": "579893",
    "end": "587244"
  },
  {
    "text": "this is the case we care about,\nof course. Usually this is a finite set.\nOK, good, so that's the",
    "start": "587244",
    "end": "593633"
  },
  {
    "text": "definition.\nWe're going to get a few basic structural properties about\nshortest paths that will allow",
    "start": "593633",
    "end": "600366"
  },
  {
    "text": "us to obtain good algorithms\nfinding these paths when they exist.\nAnd, in particular,",
    "start": "600366",
    "end": "607357"
  },
  {
    "text": "we want to use ideas from\ndynamic programming. So, if I want to use dynamic\nprogramming to solve shortest",
    "start": "607357",
    "end": "614641"
  },
  {
    "text": "paths, what do I need to\nestablish? What's the first thing I should\ncheck?",
    "start": "614642",
    "end": "619714"
  },
  {
    "text": "You've all implemented dynamic\nprogramming by now, so should make complete sense\nhopefully, at least more sense",
    "start": "619714",
    "end": "627428"
  },
  {
    "text": "than it did a couple of weeks\nago, last week, when we learned it.\nDynamic programming is",
    "start": "627428",
    "end": "634813"
  },
  {
    "text": "something that grows on you.\nEvery year I think I understand it better than the previous\nyear.",
    "start": "634813",
    "end": "642316"
  },
  {
    "text": "But, in particular,\nwhen you learned dynamic programming in this class,\nthere is this nice key property",
    "start": "642317",
    "end": "650562"
  },
  {
    "text": "that you should check.\nYeah? Optimal substructure:\ngood. This is the phrase you should\nkeep in mind.",
    "start": "650562",
    "end": "658395"
  },
  {
    "text": "It's not really enough for\ndynamic programming to be useful in an efficient way,\nbut it at least tells you that",
    "start": "658395",
    "end": "667300"
  },
  {
    "text": "you should be able to try to\napply it. That's a pretty weak statement,\nbut it's something that you",
    "start": "667300",
    "end": "675866"
  },
  {
    "text": "should check.\nIt's definitely pretty much a necessary condition for dynamic\nprogramming to make sense.",
    "start": "675866",
    "end": "682466"
  },
  {
    "text": "And so, optimal some structure\nhere means that if I take some shortest path,\nand I look at a subpath of that",
    "start": "682466",
    "end": "689466"
  },
  {
    "text": "shortest path,\nI claimed that it too is a shortest path,\nOK, with its respective",
    "start": "689466",
    "end": "694600"
  },
  {
    "text": "endpoints; obviously not between\nthe same endpoints. But if I have some shortest\npath between two endpoints,",
    "start": "694600",
    "end": "703549"
  },
  {
    "text": "I take any subpath and that's\nalso the shortest path. This is one version of optimal\nsubstructure.",
    "start": "703549",
    "end": "711553"
  },
  {
    "text": "This one turns out to be true\nfor this setup. And, how should I prove an\noptimal substructure property?",
    "start": "711553",
    "end": "719978"
  },
  {
    "text": "Cut and paste.\nYep, that works here too. I mean, this isn't always true.\nBut it's a good technique here.",
    "start": "719978",
    "end": "729143"
  },
  {
    "text": "So, we're going to think about,\nand I'll do essentially a proof",
    "start": "729143",
    "end": "734234"
  },
  {
    "text": "by picture here.\nSo, suppose you have some subpath of some shortest path.\nSo, let's say the subpath is x",
    "start": "734234",
    "end": "742527"
  },
  {
    "text": "to y.\nAnd, the path goes from u to v. So, we assume that (u,v) is a\nshortest path.",
    "start": "742527",
    "end": "750000"
  },
  {
    "text": "We want to prove that (x,y) is\na shortest path. Well, suppose (x,y) isn't a\nshortest path.",
    "start": "750000",
    "end": "756582"
  },
  {
    "text": "Then there is some shorter path\nthat goes from x to y. But, if you have some shorter\npath from x to y than this one.",
    "start": "756582",
    "end": "765132"
  },
  {
    "text": "Then I should just erase this\npart of the shortest path from u to v, and replace it with this\nshorter one.",
    "start": "765132",
    "end": "772925"
  },
  {
    "text": "So, this is some hypothetical\nshorter path. So, suppose this existed.\nIf that existed,",
    "start": "772926",
    "end": "779206"
  },
  {
    "text": "then I should just cut the old\npath from x to y, and paste in this new one from\nx to y.",
    "start": "779206",
    "end": "787000"
  },
  {
    "text": "It's strictly shorter.\nTherefore, I get a strictly shorter path from u to v.\nBut I assumed u to v was a",
    "start": "787000",
    "end": "794317"
  },
  {
    "text": "shortest path:\ncontradiction. OK, so there is no shorter\npath. And that proves the lemma that\nwe have this:",
    "start": "794317",
    "end": "801779"
  },
  {
    "text": "subpaths of shortest paths are\nshortest paths. OK, this should now be a pretty\nfamiliar proof technique.",
    "start": "801780",
    "end": "809170"
  },
  {
    "text": "But, there is yet another\ninstance of cut and paste. OK, so that's a good sign for\ncomputing shortest paths.",
    "start": "809170",
    "end": "816793"
  },
  {
    "text": "I mean, in terms of dynamic\nprogramming, we won't look directly at dynamic programming\nhere because we are going to aim",
    "start": "816793",
    "end": "822793"
  },
  {
    "text": "for greedy, which is even\nstronger. But, next Monday we'll see some\ndynamic programming approaches. Intuitively,\nthere are some pretty natural",
    "start": "822793",
    "end": "829878"
  },
  {
    "text": "sub-problems here.\nI mean, going from u to v, if I want to find what is the\nshortest path from u to v,",
    "start": "829879",
    "end": "835000"
  },
  {
    "text": "well, that's a particular\nproblem. Maybe it involves computing\nshortest paths from u to some intermediate point,\nx, and then from x to u,",
    "start": "835000",
    "end": "841827"
  },
  {
    "text": "something like that.\nThat feels good. That's like,\nquadratically,",
    "start": "841827",
    "end": "847993"
  },
  {
    "text": "many subproblems.\nAnd, V^2 subproblems, it sounds like that would lead\nto a dynamic program.",
    "start": "847993",
    "end": "856457"
  },
  {
    "text": "You can make it work out;\nit's just a little bit trickier",
    "start": "856457",
    "end": "861782"
  },
  {
    "text": "than that.\nWe'll see that next Monday. But thinking about this\nintermediate point we get",
    "start": "861782",
    "end": "869865"
  },
  {
    "text": "something called the triangle\ninequality.",
    "start": "869865",
    "end": "875000"
  },
  {
    "text": "So, you've probably heard some\nform of the triangle inequality",
    "start": "875000",
    "end": "880174"
  },
  {
    "text": "before.\nIt holds in all sorts of geometric spaces,\nbut it also holds for shortest",
    "start": "880174",
    "end": "886791"
  },
  {
    "text": "paths, which is slightly less\nobvious, or more obvious, I guess, depending on your\ninclination.",
    "start": "886791",
    "end": "894596"
  },
  {
    "text": "So, if you have any triple of\nvertices, the shortest path from",
    "start": "894596",
    "end": "899771"
  },
  {
    "text": "u to v is, at most,\nthe shortest path from u to x plus the shortest path from x to\nv.",
    "start": "899771",
    "end": "908000"
  },
  {
    "text": "Of course, here I need a\nshortest path weight from u to x, and shortest path weight from\nx to v. So, this should be pretty\nnatural just from the statement,",
    "start": "908000",
    "end": "915894"
  },
  {
    "text": "even more natural if you draw\nthe picture. So, we have some vertex,\nu. I'm using wiggly lines to\ndenote potentially long paths as",
    "start": "915894",
    "end": "922421"
  },
  {
    "text": "opposed to edges.\nWe have some intermediate point, x, and we have some\ntarget, v, and we are considering these three shortest\npaths.",
    "start": "922421",
    "end": "930000"
  },
  {
    "text": "This is the shortest path from\nu to v, or this is its weights.",
    "start": "930000",
    "end": "935198"
  },
  {
    "text": "This is the shortest path from\nu to x. And here's its weight,\nand the shortest path from x to",
    "start": "935198",
    "end": "942869"
  },
  {
    "text": "v.\nAnd here's its weight. And, the point is,\nthis should be the shortest",
    "start": "942869",
    "end": "948750"
  },
  {
    "text": "path or a shortest path from u\nto v. And, in particular,\none such path is you go from u",
    "start": "948750",
    "end": "955909"
  },
  {
    "text": "to x, and then you go from x to\nv. So, I mean, this sum is just\nmeasuring the length of this",
    "start": "955909",
    "end": "964277"
  },
  {
    "text": "particular path.\nTake the shortest path here; take the shortest path here.\nAnd, this is supposed to be the",
    "start": "964277",
    "end": "972145"
  },
  {
    "text": "Min over all paths.\nSo, certainly this is, at most, this particular path,\nthe sum of these two values,",
    "start": "972145",
    "end": "979708"
  },
  {
    "text": "OK, another proof by picture.\nClear? OK, this stuff is easy.\nI assume we'll get into some",
    "start": "979708",
    "end": "986277"
  },
  {
    "text": "more set exciting algorithms in\nparticular, which is always more exciting.\nToday, we're going to look at a",
    "start": "986277",
    "end": "996361"
  },
  {
    "text": "particular version of shortest\npaths called, or the shortest paths problem\ncalled the single source",
    "start": "996361",
    "end": "1006771"
  },
  {
    "text": "shortest path problem.\nOK, it's a little bit more",
    "start": "1006771",
    "end": "1011975"
  },
  {
    "text": "general than go from A to B.\nThe problem is, you're given a source vertex,\nand you want to know how to get",
    "start": "1011975",
    "end": "1023144"
  },
  {
    "text": "from that source vertex to\neverywhere else.",
    "start": "1023144",
    "end": "1029000"
  },
  {
    "text": "So, we'll call this source\nvertex s. And from that source,\nwe want to find,",
    "start": "1029000",
    "end": "1035810"
  },
  {
    "text": "let's say, the shortest path\nweights from s to everyone.",
    "start": "1035810",
    "end": "1041012"
  },
  {
    "text": "In particular,\nwe'd also like to know the shortest paths,\nbut that isn't too much harder.",
    "start": "1041013",
    "end": "1050000"
  },
  {
    "text": "So, that's delta of s,\nv for all vertices, v.\nOK, so this is actually a",
    "start": "1050000",
    "end": "1055359"
  },
  {
    "text": "little bit harder than the\nproblem we started with a getting from Alderon to\nCambridge.",
    "start": "1055359",
    "end": "1061980"
  },
  {
    "text": "Now, we want to get from\nAlderon to the entire universe. OK, it turns out,\nthis is one of the weird things",
    "start": "1061980",
    "end": "1070097"
  },
  {
    "text": "about shortest paths,\naccording to the state-of-the-art we know today,\nit seems like the following",
    "start": "1070098",
    "end": "1077586"
  },
  {
    "text": "statement will remain true for\nall time. But we don't know.\nThe best algorithms for solving",
    "start": "1077586",
    "end": "1085516"
  },
  {
    "text": "the A to B problem,\ngiven s, given t, go from s to t,\nis no easier than this problem.",
    "start": "1085516",
    "end": "1091401"
  },
  {
    "text": "It's the best ways we know how\nto solve going from A to B is to solve how to go from A to\neverywhere else.",
    "start": "1091401",
    "end": "1098794"
  },
  {
    "text": "So, we sort of can't help\nourselves, but to solve this problem it turns out.\nToday, we're going to look at a",
    "start": "1098794",
    "end": "1106330"
  },
  {
    "text": "further restriction on this\nproblem because this is a bit tricky.\nWill solve it next class.",
    "start": "1106330",
    "end": "1114226"
  },
  {
    "text": "But, today we're going to get\nrid of the negative weight cycle",
    "start": "1114226",
    "end": "1119657"
  },
  {
    "text": "issue by forbidding negative\nweights. So, we're going to assume that\nall of the edge weights are",
    "start": "1119657",
    "end": "1127938"
  },
  {
    "text": "nonnegative, so,\nfor all vertices, u and v.\nSo, in particular,",
    "start": "1127938",
    "end": "1133190"
  },
  {
    "text": "shortest paths exist,\nprovided paths exist.",
    "start": "1133191",
    "end": "1138000"
  },
  {
    "text": "And, we don't have to worry\nabout these minus infinities. Delta of (u,v) is always bigger\nthan minus infinity.",
    "start": "1152000",
    "end": "1158440"
  },
  {
    "text": "It still might be plus infinity\nif there is no path, but this will make life a lot\neasier.",
    "start": "1158441",
    "end": "1163678"
  },
  {
    "text": "And the algorithm we'll cover\ntoday really requires this property.\nYou can't get away without it.",
    "start": "1163678",
    "end": "1170000"
  },
  {
    "text": "Next class, we'll get away\nwithout it with a fancier and",
    "start": "1170000",
    "end": "1176599"
  },
  {
    "text": "slower algorithm.\nSo, as I hinted at, the main idea we're going to\nuse for the algorithm today is",
    "start": "1176599",
    "end": "1187880"
  },
  {
    "text": "greedy, which should be faster\nthan dynamic programming",
    "start": "1187880",
    "end": "1194359"
  },
  {
    "text": "generally.\nAnd, the tricky part will be proving that the greedy\nalgorithm actually works.",
    "start": "1194359",
    "end": "1206000"
  },
  {
    "text": "So, I think there's pretty much\nonly one natural way to go",
    "start": "1206000",
    "end": "1211119"
  },
  {
    "text": "about, well, there's one way\nthat works to go about greedy,",
    "start": "1211119",
    "end": "1216329"
  },
  {
    "text": "let's say.\nThis may be not the obvious one.\nSo, let me give you a little",
    "start": "1216329",
    "end": "1222526"
  },
  {
    "text": "bit of setup.\nThe invariant we are going to maintain is that at all times,\nwe have estimates on the",
    "start": "1222526",
    "end": "1231148"
  },
  {
    "text": "distances from the source to\nevery vertex. When I say distance,\nI mean shortest path weight.",
    "start": "1231149",
    "end": "1239414"
  },
  {
    "text": "I'm going to use weight and\ndistance interchangeably here for more intuition.\nAnd, in particular,",
    "start": "1239414",
    "end": "1246100"
  },
  {
    "text": "I want to maintain the set of\nvertices where those estimates are actually the right answer.",
    "start": "1246100",
    "end": "1253000"
  },
  {
    "text": "OK, this is little s.\nThis is big S. So, the big S will be the set\nof all vertices where I know the",
    "start": "1270000",
    "end": "1278578"
  },
  {
    "text": "answer.\nWhat is the shortest path distance from little S to that\nvertex in big S?",
    "start": "1278578",
    "end": "1285548"
  },
  {
    "text": "So, for starters,\nwhich distance do I know? Sorry?\ns.",
    "start": "1285548",
    "end": "1291000"
  },
  {
    "text": "I know the shortest path\ndistance from s to s because if I assume that all of my weights\nare nonnegative,",
    "start": "1291000",
    "end": "1297458"
  },
  {
    "text": "I really can't get from s to s\nany faster than not doing anything.\nOK, if I had a negative weight",
    "start": "1297458",
    "end": "1303410"
  },
  {
    "text": "cycle, maybe the distance from s\nto s is minus infinity. OK, but I can't have negative\nweights so there's no way I can",
    "start": "1303410",
    "end": "1310691"
  },
  {
    "text": "get from s to s any faster than\nzero time. There might be a longer path\nthat still has zero cost,",
    "start": "1310692",
    "end": "1316643"
  },
  {
    "text": "but it can't be any better than\nzero. So, in particular,\nI know that.",
    "start": "1316644",
    "end": "1322448"
  },
  {
    "text": "So, initially,\nS is certainly an s. OK, and the idea is we're going\nto accumulate more and more",
    "start": "1322448",
    "end": "1329959"
  },
  {
    "text": "vertices that we know.\nSo, at some point we know the distances from some of the\nvertices.",
    "start": "1329959",
    "end": "1336979"
  },
  {
    "text": "So, we have some cloud here.\nThis is S, and this is everything else.\nThis is the graph,",
    "start": "1336979",
    "end": "1343836"
  },
  {
    "text": "G.\nThis is the subset of the vertices.\nAnd, there's some edges that go",
    "start": "1343836",
    "end": "1349306"
  },
  {
    "text": "out from there.\nAnd, so we have estimates on how to get to these vertices.\nSome of them,",
    "start": "1349306",
    "end": "1356235"
  },
  {
    "text": "we may not have even seen yet.\nThey may not be connected to this portion of S.\nI mean: not directly.",
    "start": "1356235",
    "end": "1362104"
  },
  {
    "text": "They might be connected by some\nlonger path. They might be in a completely\ndifferent connected component.",
    "start": "1362104",
    "end": "1368274"
  },
  {
    "text": "We don't know yet.\nSome of them, we have estimates for because\nwe've sort of seen how to get",
    "start": "1368275",
    "end": "1373660"
  },
  {
    "text": "there from S.\nAnd the idea is, among all of these nodes where\nwe have estimates, and on to get from little S,\nwhich is some vertex in here,",
    "start": "1373660",
    "end": "1381768"
  },
  {
    "text": "to these vertices,\nwe're going to take the one for which the estimate is smallest.\nThat's the greedy choice.",
    "start": "1381768",
    "end": "1390666"
  },
  {
    "text": "And, we're just going to add\nthat vertex to S. So, S grows one vertex per\nstep.",
    "start": "1390666",
    "end": "1398773"
  },
  {
    "text": "Each step, we're going to add\nto S, the vertex. Of course, again,\nthis is not a unique,",
    "start": "1398773",
    "end": "1407733"
  },
  {
    "text": "it's a vertex,\nv, in V minus S. So, it's something we haven't\nyet computed yet whose estimated",
    "start": "1407733",
    "end": "1419981"
  },
  {
    "text": "distance from S is minimum.\nSo, we look at all the vertices",
    "start": "1419981",
    "end": "1427570"
  },
  {
    "text": "we haven't yet added to S.\nJust take the one where we have",
    "start": "1427570",
    "end": "1435028"
  },
  {
    "text": "the estimated smallest distance.\nThe intuition is that that",
    "start": "1435028",
    "end": "1441320"
  },
  {
    "text": "should be a good choice.\nSo, if I pick the one that's closest to little s among all\nthe ones that I've seen,",
    "start": "1441320",
    "end": "1446653"
  },
  {
    "text": "among all the paths that I've\nseen, I sort of have to buy into that those are good paths.\nBut, I mean,",
    "start": "1446653",
    "end": "1451682"
  },
  {
    "text": "maybe there's some path I\ndidn't see. Maybe you go out to here and\nthen you take some other path to some vertex, which we've already\nseen.",
    "start": "1451682",
    "end": "1458438"
  },
  {
    "text": "OK, the worry is,\nwell, I'd better not say that that's the shortest path because\nthere may have been some other",
    "start": "1458438",
    "end": "1463923"
  },
  {
    "text": "way to get there.\nRight, as soon as I add something to S,\nI declare I've solved the problem for that vertex.\nI can't change my answer later.",
    "start": "1463923",
    "end": "1472000"
  },
  {
    "text": "OK, the estimates can change\nuntil they get added to S. So, I don't want to add this\nvertex to S because I haven't",
    "start": "1472000",
    "end": "1479928"
  },
  {
    "text": "considered this path.\nWell, if all my weights are nonnegative, and I take the\nvertex here that has the",
    "start": "1479928",
    "end": "1487000"
  },
  {
    "text": "shortest estimate from S,\nso let's suppose this one is the shortest one,\nthen this can't be a shorter",
    "start": "1487000",
    "end": "1494000"
  },
  {
    "text": "path because the distance\nestimate, at least, from S to that vertex is larger\nfrom S to that vertex.",
    "start": "1494000",
    "end": "1502000"
  },
  {
    "text": "So, no way can I make the path\nlonger and decrease the distance.\nThat's the intuition.",
    "start": "1502000",
    "end": "1507367"
  },
  {
    "text": "OK, it's a little bit fuzzy\nhere because I don't have any induction hypotheses set up,\nand it's going to be a lot more",
    "start": "1507367",
    "end": "1514803"
  },
  {
    "text": "work to prove that.\nBut that's the intuition why this is the right thing to do.\nOK, you have to prove something",
    "start": "1514803",
    "end": "1521787"
  },
  {
    "text": "about the distance estimates for\nthat to be a proof. But, intuitively,\nit feels good.",
    "start": "1521787",
    "end": "1527090"
  },
  {
    "text": "It was a good starting point.\nOK, and then presumably we have to maintain these distance\nestimates.",
    "start": "1527090",
    "end": "1534499"
  },
  {
    "text": "So, the heart of the algorithm\nis updating distance estimates, I mean, choosing the best\nvertex to add to S,",
    "start": "1534499",
    "end": "1541549"
  },
  {
    "text": "that's one step.\nThen, updating the distance estimates is sort of where the\nwork is.",
    "start": "1541549",
    "end": "1546989"
  },
  {
    "text": "And, it turns out we'll only\nneed to update distance estimates of some of the\nvertices, the ones that are",
    "start": "1546989",
    "end": "1553838"
  },
  {
    "text": "adjacent to v.\nv was the vertex we just added to S.\nSo, once we add somebody to S,",
    "start": "1553838",
    "end": "1559143"
  },
  {
    "text": "so we grow S by a little bit,\nthen we look at all the new edges that go out of S from that\nvertex.",
    "start": "1559143",
    "end": "1567000"
  },
  {
    "text": "We update something.\nThat's the idea.",
    "start": "1567000",
    "end": "1574200"
  },
  {
    "text": "So, that's the idea for how\nwe're going to use greedy.",
    "start": "1574200",
    "end": "1584799"
  },
  {
    "text": "Now I'll give you the\nalgorithm.",
    "start": "1584799",
    "end": "1592000"
  },
  {
    "text": "So, this is called Dijkstra's\nalgorithm.",
    "start": "1592000",
    "end": "1600136"
  },
  {
    "text": "Dijkstra is a famous,\nrecently late,",
    "start": "1600136",
    "end": "1607438"
  },
  {
    "text": "if that makes sense,\ncomputer scientist from the",
    "start": "1607438",
    "end": "1617244"
  },
  {
    "text": "Netherlands.\nAnd, this is probably the",
    "start": "1617244",
    "end": "1624680"
  },
  {
    "text": "algorithm he is most famous for.\nSo, the beginning of the",
    "start": "1624680",
    "end": "1632923"
  },
  {
    "text": "algorithm is just some\ninitialization,",
    "start": "1632923",
    "end": "1638370"
  },
  {
    "text": "not too exciting.\nOK, but let me tell you what",
    "start": "1638370",
    "end": "1644994"
  },
  {
    "text": "some of the variables mean.\nOK, so d is some array indexed",
    "start": "1644994",
    "end": "1654586"
  },
  {
    "text": "by vertices, and the idea is\nthat d of x is the distance",
    "start": "1654586",
    "end": "1662995"
  },
  {
    "text": "estimate for x,\nso, from S to x. so in particular,\nit's going to equal the real",
    "start": "1662995",
    "end": "1674615"
  },
  {
    "text": "shortest path weight from S to x\nwhen we've added x to our set",
    "start": "1674615",
    "end": "1683942"
  },
  {
    "text": "capital, S.\nOK, so this is, in particular,\ngoing to be the output to the",
    "start": "1683942",
    "end": "1690067"
  },
  {
    "text": "algorithm.\nDid you have a question? Or were you just stretching?\nGood. So, in d of x,\nwhen we are done,",
    "start": "1690067",
    "end": "1695250"
  },
  {
    "text": "d of x is the output.\nFor every vertex, it's going to give us the\nshortest path weight from S to that vertex.\nAlong the way,",
    "start": "1695250",
    "end": "1701543"
  },
  {
    "text": "it's going to be some estimated\ndistance from S to that vertex. And, we're going to improve it\nover time.",
    "start": "1701543",
    "end": "1706937"
  },
  {
    "text": "This is an infinity.\nSo initially, we know that the distance,\nwe know the distance from S to",
    "start": "1706937",
    "end": "1712903"
  },
  {
    "text": "S is zero.\nSo, we're going to set that to be our estimate.\nIt's going to be accurate. Everything else we're going to\njust set to infinity because we",
    "start": "1712903",
    "end": "1720992"
  },
  {
    "text": "may not be connected.\nFrom the beginning, we don't know much.\nS, initially, is going to be infinity.\nImmediately,",
    "start": "1720992",
    "end": "1727101"
  },
  {
    "text": "we're going to add little s to\nbig S. And then, the interesting part\nhere is Q, which is going to",
    "start": "1727102",
    "end": "1732419"
  },
  {
    "text": "consist of, initially all the\nvertices in the graph. And, it's going to not just be\na queue as the letter suggests.",
    "start": "1732419",
    "end": "1740000"
  },
  {
    "text": "It's going to be a priority\nqueue. So, it's going to maintain,\nin particular,",
    "start": "1740000",
    "end": "1747399"
  },
  {
    "text": "the vertex that has the\nsmallest distance estimate. So, this is a priority queue.\nThis is really an abuse of",
    "start": "1747400",
    "end": "1757900"
  },
  {
    "text": "notation for a data structure.\nOK, so this could be a heap or",
    "start": "1757900",
    "end": "1763900"
  },
  {
    "text": "whatever.\nThe vertices are keyed on d, our distance estimate.\nSo, in particular,",
    "start": "1763900",
    "end": "1772314"
  },
  {
    "text": "S will have the,\nthis is going to be a Min heap. S will be the guy who has the\nminimum.",
    "start": "1772314",
    "end": "1778450"
  },
  {
    "text": "Everyone else has the same key\ninitially. And, we're going to repeatedly\nextract the minimum element from",
    "start": "1778450",
    "end": "1785901"
  },
  {
    "text": "this queue and do other things.\nOK, so this is initialization. OK, I'm going to call that\ninitialization.",
    "start": "1785901",
    "end": "1793352"
  },
  {
    "text": "It's a pretty simple thing.\nIt just takes linear time, nothing fancy going on.\nThe heart of the algorithm is",
    "start": "1793352",
    "end": "1802686"
  },
  {
    "text": "all in six lines.\nAnd, so this is not really a step.\nThe first step here that we",
    "start": "1802686",
    "end": "1809820"
  },
  {
    "text": "need to do is we take the vertex\nwhose distance estimate is",
    "start": "1809821",
    "end": "1815194"
  },
  {
    "text": "minimum.\nSo that, among all the vertices, not yet,\nand that's currently S is",
    "start": "1815194",
    "end": "1821958"
  },
  {
    "text": "empty.\nQ has everyone. In general, Q will have\neveryone except S.",
    "start": "1821958",
    "end": "1829000"
  },
  {
    "text": "So, we'll take the vertex,\nu, that has the minimum key in that priority queue.\nSo, extract the Min from Q.",
    "start": "1829000",
    "end": "1838000"
  },
  {
    "text": "OK.\nWe're going to add a little u",
    "start": "1848000",
    "end": "1862645"
  },
  {
    "text": "to S, claim that that is now,\nI mean, that's exactly what",
    "start": "1862645",
    "end": "1867753"
  },
  {
    "text": "we're saying here.\nWe add to S that vertex that has minimum distance estimate.\nAnd now, we need to update the",
    "start": "1867753",
    "end": "1877422"
  },
  {
    "text": "distances.\nSo, we're going to look at each adjacent vertex for each v in\nthe adjacency list for u.",
    "start": "1877422",
    "end": "1887000"
  },
  {
    "text": "We look at a few distances.",
    "start": "1887000",
    "end": "1890000"
  },
  {
    "text": "So that's the algorithm or more\nor less. This is the key.\nI should define it a little bit",
    "start": "1907000",
    "end": "1913201"
  },
  {
    "text": "what's going on here.\nWe talked mainly about undirected graph last time.\nHere, we're thinking about",
    "start": "1913201",
    "end": "1920125"
  },
  {
    "text": "undirected graphs.\nAnd, the adjacency list for u here is just going to mean,\ngive me all the vertices for",
    "start": "1920125",
    "end": "1927268"
  },
  {
    "text": "which there is an edge from u to\nv. So, this is the outgoing\nadjacency list, not the incoming adjacency\nlist.",
    "start": "1927269",
    "end": "1933793"
  },
  {
    "text": "Undirected graphs:\nyou list everything. Directed graphs:\nhere, we're only going to care",
    "start": "1933793",
    "end": "1939062"
  },
  {
    "text": "about those ones.\nSo, for every edge, (u,v), is what this is saying,\nwe are going to compare the",
    "start": "1939062",
    "end": "1944896"
  },
  {
    "text": "current estimate for v,\nand this candidate estimate, which intuitively means you go\nfrom s to u.",
    "start": "1944896",
    "end": "1950730"
  },
  {
    "text": "That's d of u because we now\nknow that that's the right answer.\nThis, in fact,",
    "start": "1950730",
    "end": "1957002"
  },
  {
    "text": "equals, we hope,\nassuming the algorithm is correct, this should be the\nshortest path weight from s to u",
    "start": "1957002",
    "end": "1964163"
  },
  {
    "text": "because we just added u to S.\nAnd whenever we add something to S, it should have the right\nvalue.",
    "start": "1964163",
    "end": "1970895"
  },
  {
    "text": "So, we could say,\nwell, you take the shortest path from S to u,\nand then you follow this edge",
    "start": "1970895",
    "end": "1977340"
  },
  {
    "text": "from u to v.\nThat has weight, w, of (u,v).\nThat's one possible path from S",
    "start": "1977340",
    "end": "1982424"
  },
  {
    "text": "to v.\nAnd, if that's a shorter path than the one we currently have\nin our estimate,",
    "start": "1982424",
    "end": "1989118"
  },
  {
    "text": "if this is smaller than that,\nthen we should update the estimate to be that sum because\nthat's a better path,",
    "start": "1989118",
    "end": "1996351"
  },
  {
    "text": "so, add it to our database of\npaths, so to speak: OK, very intuitive operation;\nclearly should not do anything",
    "start": "1996351",
    "end": "2003653"
  },
  {
    "text": "bad.\nI mean, these should be paths that makes sense.\nWe'll prove that in a moment.",
    "start": "2003653",
    "end": "2010000"
  },
  {
    "text": "That's the first part of\ncorrectness, that this never screws up.\nAnd then, the tricky part is to",
    "start": "2010000",
    "end": "2016992"
  },
  {
    "text": "show that it finds all the paths\nthat we care about. This step is called a\nrelaxation step.",
    "start": "2016992",
    "end": "2023609"
  },
  {
    "text": "Relaxation is always a\ndifficult technique to teach to MIT students.\nIt doesn't come very naturally.",
    "start": "2023609",
    "end": "2030902"
  },
  {
    "text": "But it's very simple operation.\nIt comes from optimization terminology, programming\nterminology, so to speak.",
    "start": "2030902",
    "end": "2040000"
  },
  {
    "text": "And, does this inequality look\nfamiliar at all especially when you start writing it this way?\nYou say, the shortest path from",
    "start": "2040000",
    "end": "2048376"
  },
  {
    "text": "S to v and the shortest path\nfrom S to u in some edge from u to v, does that look like\nanything we've seen?",
    "start": "2048376",
    "end": "2055517"
  },
  {
    "text": "In fact, it was on this board\nbut I just erased it. Triangle inequality,\nyeah.",
    "start": "2055517",
    "end": "2060667"
  },
  {
    "text": "So, this is trying to make the\ntriangle inequality true. Certainly, the shortest path\nfrom S to v should be less than",
    "start": "2060667",
    "end": "2068493"
  },
  {
    "text": "or equal to, not greater than.\nThe shortest path from S to u, plus whatever path from u to v,\nthe shortest path should be,",
    "start": "2068494",
    "end": "2076665"
  },
  {
    "text": "at most, that.\nSo, this is sort of a somewhat more general triangle\ninequality.",
    "start": "2076665",
    "end": "2082254"
  },
  {
    "text": "And, we want to,\ncertainly it should be true. So, if it's not true,\nwe fix it. If it's greater than,\nwe make it equal.",
    "start": "2082255",
    "end": "2088187"
  },
  {
    "text": "But we don't want to make it\nless than because that's not always true.\nOK, but certainly, it should be less than or equal\nto.",
    "start": "2088187",
    "end": "2094486"
  },
  {
    "text": "So, this is fixing the triangle\ninequality. It's trying to make that\nconstraint more true.",
    "start": "2094487",
    "end": "2100000"
  },
  {
    "text": "In optimization,\nthat's called relaxing the constraint.\nOK, so we're sort of relaxing",
    "start": "2100000",
    "end": "2106814"
  },
  {
    "text": "the triangle inequality here.\nIn the end, we should have all the shortest paths.\nThat's a claim.",
    "start": "2106814",
    "end": "2114542"
  },
  {
    "text": "So: a very simple algorithm.\nLet's try it out on a graph, and that should make it more\nintuitive why it's working,",
    "start": "2114542",
    "end": "2123767"
  },
  {
    "text": "and that the rest of the\nlecture will be proving that it works.\nYeah, this is enough room.",
    "start": "2123767",
    "end": "2132268"
  },
  {
    "text": "So, oh, I should mention one\nother thing here. Sorry.\nWhenever we change d of v,",
    "start": "2132269",
    "end": "2138990"
  },
  {
    "text": "this is changing the key of v\nin the priority queue. So, implicitly what's happening\nhere in this assignment,",
    "start": "2138990",
    "end": "2148241"
  },
  {
    "text": "this is getting a bit messy,\nis a decreased key operation, OK, which we talked briefly\nabout last class in the context",
    "start": "2148241",
    "end": "2158279"
  },
  {
    "text": "of minimum spanning trees where\nwe were also decreasing the key.",
    "start": "2158279",
    "end": "2165000"
  },
  {
    "text": "The point is we were changing\nthe key of one element industry like station step in the\npriority queue so that if it now",
    "start": "2165000",
    "end": "2171759"
  },
  {
    "text": "becomes the minimum,\nwe should extract here. And, we are only ever\ndecreasing keys because we are",
    "start": "2171759",
    "end": "2177236"
  },
  {
    "text": "always replacing larger values\nwith smaller values. So, we'll come back to that\nlater when we analyze the",
    "start": "2177237",
    "end": "2183181"
  },
  {
    "text": "running time.\nBut, there is some data structure work going on here.\nAgain, we are abusing notation",
    "start": "2183181",
    "end": "2188717"
  },
  {
    "text": "a bit.\nOK, so here is a graph with",
    "start": "2188717",
    "end": "2193951"
  },
  {
    "text": "edge weights.",
    "start": "2193951",
    "end": "2196000"
  },
  {
    "text": "OK, and I want my priority\nqueue over here. And, I'm also going to draw my\nestimates.",
    "start": "2226000",
    "end": "2234098"
  },
  {
    "text": "OK, now I don't want to cheat.\nSo, we're going to run the",
    "start": "2234098",
    "end": "2239629"
  },
  {
    "text": "algorithm on this graph.\ns will be A, and I want to know the shortest\npath from A to everyone else.",
    "start": "2239629",
    "end": "2250000"
  },
  {
    "text": "So, you can check,\nOK, paths exist. So, hopefully everything should\nend up a finite value by the",
    "start": "2250000",
    "end": "2255727"
  },
  {
    "text": "end.\nAll the weights are nonnegative, so this algorithm\nshould work. The algorithm doesn't even need\nconnectivity,",
    "start": "2255727",
    "end": "2262440"
  },
  {
    "text": "but it does mean that all the\nweights are nonnegative. So, we run the algorithm.\nFor the initialization,",
    "start": "2262440",
    "end": "2268661"
  },
  {
    "text": "we set the distance estimate\nfor our source to be zero because, in fact,\nthere's only one path from A to",
    "start": "2268661",
    "end": "2274881"
  },
  {
    "text": "A, and that to do nothing,\nthe empty path. So, I'm going to put the key of\nzero over here.",
    "start": "2274881",
    "end": "2280239"
  },
  {
    "text": "And, for everyone else,\nwe're just going to put infinity because we don't know\nany better at this point.",
    "start": "2280239",
    "end": "2288000"
  },
  {
    "text": "So, I'll put keys of infinity\nfor everyone else. OK, so now you can see what the\nalgorithm does is extract the",
    "start": "2288000",
    "end": "2295401"
  },
  {
    "text": "minimum from the queue.\nAnd, given our setup, we'll definitely choose s,\nor in this case,",
    "start": "2295402",
    "end": "2301352"
  },
  {
    "text": "A.\nSo, it has a weight of zero. Everyone else has quite a bit\nlarger weight.",
    "start": "2301352",
    "end": "2306402"
  },
  {
    "text": "OK, so we look at s,\nor I'll use A here. So, we look at A.\nWe add A to our set,",
    "start": "2306402",
    "end": "2312030"
  },
  {
    "text": "S.\nSo, it's now removed from the queue.\nIt will never go back in because we never add anything to\nthe queue, start with all the",
    "start": "2312030",
    "end": "2318726"
  },
  {
    "text": "vertices, and extract,\nand decrease keys. But we never insert.\nSo, A is gone. OK, and now I want to update\nthe keys of all of the other",
    "start": "2318727",
    "end": "2325862"
  },
  {
    "text": "vertices.\nAnd the claim is I only need to look at the vertices that have\nedges from A. So, there's an edge from A to\nB, and that has weight ten.",
    "start": "2325862",
    "end": "2333492"
  },
  {
    "text": "And so, I compare:\nwell, is it a good idea to go from A to A, which costs\nnothing, and then to go along",
    "start": "2333492",
    "end": "2338981"
  },
  {
    "text": "this edge, AB,\nwhich costs ten? Well, it seems like a pretty\ngood idea because that has a",
    "start": "2338981",
    "end": "2346143"
  },
  {
    "text": "total weight of zero plus ten,\nwhich is ten, which is much smaller than\ninfinity.",
    "start": "2346143",
    "end": "2351914"
  },
  {
    "text": "So, I'm going to erase this\ninfinity; write ten, and over in the queue as well.\nThat's the decreased key",
    "start": "2351914",
    "end": "2359386"
  },
  {
    "text": "operation.\nSo now, I know a path from A to B.\nGood. A to C is the only other edge.\nZero plus three is less than",
    "start": "2359386",
    "end": "2367229"
  },
  {
    "text": "infinity, so,\ncool. I'll put three here for C,\nand C is there.",
    "start": "2367229",
    "end": "2373000"
  },
  {
    "text": "OK, the other vertices I don't\ntouch. I'm going to rewrite them here,\nbut the algorithm doesn't have",
    "start": "2373000",
    "end": "2378694"
  },
  {
    "text": "to copy them.\nThose keys were already there. It's just touching these two.\nOK, that was pretty boring.",
    "start": "2378694",
    "end": "2384506"
  },
  {
    "text": "Now we look at our queue,\nand we extract the minimum element.\nSo, A is no longer in there,",
    "start": "2384506",
    "end": "2389614"
  },
  {
    "text": "so the minimum key here is\nthree. So, the claim is that this is a\nshortest path; from A to C,\nhere is the shortest path from",
    "start": "2389614",
    "end": "2396600"
  },
  {
    "text": "A to C.\nThere's no other shorter way. You could check that,\nand we'll prove it in a moment.",
    "start": "2396600",
    "end": "2403000"
  },
  {
    "text": "Cool, so we'll remove C from\nthe list. It's gone.\nThen we look at all of the outgoing edges from C.\nSo, there's one that goes up to",
    "start": "2403000",
    "end": "2410628"
  },
  {
    "text": "B, which has weight four,\nfour plus three, which is the shortest path\nweight from A to C.",
    "start": "2410628",
    "end": "2415835"
  },
  {
    "text": "So, going from A to C,\nand C to B should cost three plus four, which is seven,\nwhich is less than ten.",
    "start": "2415835",
    "end": "2421830"
  },
  {
    "text": "So, we found an even better\npath to get to B. It's better to go like this\nthan it is to go like that.",
    "start": "2421830",
    "end": "2427763"
  },
  {
    "text": "So, we write seven for B,\nand there's an outgoing edge from C to d which costs eight.\nThree plus eight is 11.",
    "start": "2427763",
    "end": "2435610"
  },
  {
    "text": "11 is less than infinity last\ntime I checked. So, we write 11 for d.\nThen we look at E.",
    "start": "2435611",
    "end": "2441495"
  },
  {
    "text": "We have three plus two is five,\nwhich is less than infinity. So, we write five for the new\nkey for E.",
    "start": "2441495",
    "end": "2448359"
  },
  {
    "text": "At this point,\nwe have finite shortest paths to everywhere,\nbut they may not be the best",
    "start": "2448359",
    "end": "2454314"
  },
  {
    "text": "ones.\nSo, we have to keep looking. OK, next round of the\nalgorithm, we extract the",
    "start": "2454314",
    "end": "2459847"
  },
  {
    "text": "minimum key among all these.\nOK, it's not B, which we've seen though\nprobably know the answer to.",
    "start": "2459847",
    "end": "2467535"
  },
  {
    "text": "But it's E.\nE has the smallest key. So, we now declare this to be a\nshortest path.",
    "start": "2467535",
    "end": "2472964"
  },
  {
    "text": "The way we got to E was along\nthis path: A to C, C to E, declare that to be\nshortest.",
    "start": "2472964",
    "end": "2478599"
  },
  {
    "text": "We claim we're done with E.\nBut we still have to update. What about all the outgoing\nedges from E?",
    "start": "2478599",
    "end": "2485127"
  },
  {
    "text": "There's only one here.\nIt costs five plus nine, which is 14,\nwhich is bigger than 11.",
    "start": "2485127",
    "end": "2492000"
  },
  {
    "text": "So, no go.\nThat's not an interesting path. Our previous path,\nwhich went like this at a cost",
    "start": "2492000",
    "end": "2498189"
  },
  {
    "text": "of the 11, is better than the\none we are considering now. I'm drawing the whole path,\nbut the algorithm is only",
    "start": "2498189",
    "end": "2505700"
  },
  {
    "text": "adding these two numbers.\nOK, good. So, I don't change anything.\nSeven, 11, and five is removed,",
    "start": "2505700",
    "end": "2512167"
  },
  {
    "text": "or E is removed.\nOur new keys are seven and 11. So, we take the key,\nseven, here,",
    "start": "2512167",
    "end": "2517592"
  },
  {
    "text": "which is for element B,\nvertex B. We declare the path we\ncurrently have in our hands from",
    "start": "2517592",
    "end": "2524316"
  },
  {
    "text": "A to B, which happens to be this\none. Algorithm can't actually tell\nthis, by the way,",
    "start": "2524316",
    "end": "2529352"
  },
  {
    "text": "but we're drawing it anyway.\nThis path, A, C, B, is the candidate shortest\npath. The claim is it is indeed\nshortest.",
    "start": "2529352",
    "end": "2536170"
  },
  {
    "text": "Now, we look at all the\noutgoing edges. There's one that goes back to C\nat a cost of seven plus one,",
    "start": "2536170",
    "end": "2542127"
  },
  {
    "text": "which is eight,\nwhich is bigger than three, which is good.\nWe already declared C to be",
    "start": "2542127",
    "end": "2547225"
  },
  {
    "text": "done.\nBut the algorithm checks this path and says,\noh, that's no better. And then we look at this other\nedge from B to d.",
    "start": "2547225",
    "end": "2554349"
  },
  {
    "text": "That costs seven plus two,\nwhich is nine, which is better than 11.\nSo, we, in fact,",
    "start": "2554349",
    "end": "2561359"
  },
  {
    "text": "found an even shorter path.\nSo, the shortest path weight, now, for d, is nine because\nthere is this path that goes A,",
    "start": "2561359",
    "end": "2571042"
  },
  {
    "text": "C, B, d for a total cost of\nthree plus four plus two is nine.\nCool, now there's only one",
    "start": "2571042",
    "end": "2578262"
  },
  {
    "text": "element in the queue.\nWe remove it. d: we look at the outgoing\nedges.",
    "start": "2578262",
    "end": "2584059"
  },
  {
    "text": "There's one going here which\ncosts nine plus seven, which is 16,\nwhich is way bigger than five.",
    "start": "2584059",
    "end": "2589981"
  },
  {
    "text": "So, we're done.\nDon't do anything. At this point,\nthe queue is empty. And the claim is that all these\nnumbers that are written here,",
    "start": "2589981",
    "end": "2598156"
  },
  {
    "text": "the final values are the\nshortest path weights. This looks an awful lot like a\nfive, but it's an s.",
    "start": "2598156",
    "end": "2604335"
  },
  {
    "text": "It has a weight of zero.\nI've also drawn in here all the shortest paths.\nAnd, this is not hard to do.",
    "start": "2604335",
    "end": "2611562"
  },
  {
    "text": "We're not going to talk about\nit too much in this class, but it's mentioned in a little\nbit more detail at the end of",
    "start": "2611562",
    "end": "2617924"
  },
  {
    "text": "the textbook.\nAnd it's something called the shortest path tree.\nIt's just something good to know about if you actually want\nto compute shortest paths.",
    "start": "2617924",
    "end": "2626015"
  },
  {
    "text": "In this class,\nwe mainly worry about the weights because it's pretty much\nthe same problem. The shortest path tree is the\nunion of all shortest paths.",
    "start": "2626015",
    "end": "2635000"
  },
  {
    "text": "And in particular,\nif you look at each vertex in your graph, if you consider the\nlast edge into that vertex that",
    "start": "2635000",
    "end": "2644148"
  },
  {
    "text": "was relaxed among all vertices,\nu, you look at the edges, (u,v), say, was that last one\nto relax?",
    "start": "2644148",
    "end": "2652037"
  },
  {
    "text": "So, just look at the last edges\nwe relaxed here. You put them all together:\nthat's called a shortest path",
    "start": "2652038",
    "end": "2660599"
  },
  {
    "text": "tree.\nAnd, it has the property that from S to everywhere else,\nthere is a unique path down the",
    "start": "2660599",
    "end": "2668236"
  },
  {
    "text": "tree.\nAnd it's the shortest path. It's the shortest path that we\nfound.",
    "start": "2668237",
    "end": "2674048"
  },
  {
    "text": "OK, so you actually get\nshortest paths out of this algorithm even though it's not\nexplicitly described.",
    "start": "2674048",
    "end": "2680475"
  },
  {
    "text": "All we are mainly talking about\nare the shortest path weights. Algorithm clear at this point?\nFeels like it's doing the right",
    "start": "2680475",
    "end": "2688316"
  },
  {
    "text": "thing?\nYou can check all those numbers are the best paths.\nAnd now we're going to prove",
    "start": "2688316",
    "end": "2693714"
  },
  {
    "text": "that.",
    "start": "2693714",
    "end": "2695000"
  },
  {
    "text": "So: correctness.",
    "start": "2712000",
    "end": "2715000"
  },
  {
    "text": "So the first thing I want to\nprove is that relaxation never",
    "start": "2725000",
    "end": "2731035"
  },
  {
    "text": "makes a mistake.\nIf it ever sets d of v to be something, I want to prove that\nd of v is always an upper bound",
    "start": "2731035",
    "end": "2742065"
  },
  {
    "text": "on delta.\nSo, we have this variant. It's greater than or equal to\ndelta of s, v for all v.",
    "start": "2742065",
    "end": "2751119"
  },
  {
    "text": "And, this invariant holds at\nall times. So, after initialization,\nit doesn't hold before",
    "start": "2751119",
    "end": "2759964"
  },
  {
    "text": "initialization because d isn't\ndefined then.",
    "start": "2759964",
    "end": "2766000"
  },
  {
    "text": "But if you do this\ninitialization where you set S to zero, and everyone else to\ninfinity, and you take any",
    "start": "2766000",
    "end": "2774535"
  },
  {
    "text": "sequence of relaxation steps,\nthen this variant will hold after each relaxation step you\napply.",
    "start": "2774535",
    "end": "2782160"
  },
  {
    "text": "This is actually a very general\nlemma. It's also pretty easy to prove.\nIt holds not only for",
    "start": "2782160",
    "end": "2789535"
  },
  {
    "text": "Dijkstra's algorithm,\nbut for a lot of other algorithms we'll see.\nPretty much every algorithm we",
    "start": "2789535",
    "end": "2798416"
  },
  {
    "text": "see will involve relaxation.\nAnd, this is saying no matter what relaxations you do,\nyou always have a reasonable",
    "start": "2798416",
    "end": "2807197"
  },
  {
    "text": "estimate in the sense that it's\ngreater than or equal to the true shortest path weight.\nSo, it should be converging",
    "start": "2807197",
    "end": "2816219"
  },
  {
    "text": "from above.\nSo, that's the lemma. Let's prove it.\nAny suggestions on how we",
    "start": "2816219",
    "end": "2822019"
  },
  {
    "text": "should prove this lemma?\nWhat technique might we use?",
    "start": "2822019",
    "end": "2827340"
  },
  {
    "text": "What's that?\nCut and paste? It would be good for optimal\nsubstructure.",
    "start": "2827340",
    "end": "2832941"
  },
  {
    "text": "Cut and paste:\nmaybe sort of what's going on here but not exactly.\nSomething a little more",
    "start": "2832941",
    "end": "2840213"
  },
  {
    "text": "general.\nIt's just intuition here; it doesn't have to be the right\nanswer.",
    "start": "2840213",
    "end": "2846148"
  },
  {
    "text": "In fact, many answers are\ncorrect, have plausible proofs.",
    "start": "2846148",
    "end": "2852000"
  },
  {
    "text": "Induction, yeah.\nSo, I'm not going to write induction here,\nbut effectively we are using induction.\nThat's the answer I was",
    "start": "2852000",
    "end": "2858542"
  },
  {
    "text": "expecting.\nSo, there is sort of an induction already in time going\non here. We say after initialization it\nshould be true.",
    "start": "2858542",
    "end": "2865028"
  },
  {
    "text": "That's our base case.\nAnd then, every relaxation we do, it should still be true.\nSo, we're going to assume by",
    "start": "2865028",
    "end": "2870905"
  },
  {
    "text": "induction that all the previous\nrelaxations worked, and then we're going to prove\nthat the last relaxation,",
    "start": "2870905",
    "end": "2876671"
  },
  {
    "text": "whatever it is,\nworks. So, first let's do the base\ncase.",
    "start": "2876671",
    "end": "2881828"
  },
  {
    "text": "So, this is after an\ninitialization, let's say, initially.\nSo, initially we have d of s",
    "start": "2881828",
    "end": "2889254"
  },
  {
    "text": "equal to zero.\nAnd we have d of v equal to infinity for all other vertices,\nfor all vertices,",
    "start": "2889254",
    "end": "2897209"
  },
  {
    "text": "v, not equal to little s.\nOK, now we have to check that this inequality holds.\nWell, we have delta of s,",
    "start": "2897209",
    "end": "2906138"
  },
  {
    "text": "s.\nWe've already argued that that's zero.\nYou can't get negative when",
    "start": "2906138",
    "end": "2913117"
  },
  {
    "text": "there are only nonnegative edge\nweights. So, that's the best.\nSo, certainly zero is greater",
    "start": "2913117",
    "end": "2920019"
  },
  {
    "text": "than or equal to zero.\nAnd, we have everything else, well, I mean,\ndelta of S, v is certainly less",
    "start": "2920019",
    "end": "2927470"
  },
  {
    "text": "than or equal to infinity.\nSo this holds. Everything is less than or\nequal to infinity.",
    "start": "2927470",
    "end": "2934057"
  },
  {
    "text": "So: base case is done.\nSo, now we do an induction. And, I'm going to write it as a\nproof by contradiction.",
    "start": "2934058",
    "end": "2946456"
  },
  {
    "text": "So, let's say,\nsuppose that this fails to hold",
    "start": "2946456",
    "end": "2952669"
  },
  {
    "text": "at some point.\nSo, suppose for contradiction",
    "start": "2952669",
    "end": "2958606"
  },
  {
    "text": "that the invariant is violated.\nSo, we'd like to sue the",
    "start": "2958606",
    "end": "2966200"
  },
  {
    "text": "violator and find a\ncontradiction.",
    "start": "2966200",
    "end": "2972000"
  },
  {
    "text": "So, it's going to be violated.\nSo, let's look at the first violation, the first time it's\nviolated.",
    "start": "2972000",
    "end": "2979367"
  },
  {
    "text": "So, this is,\nessentially, again, a proof by induction.\nSo, let's say we have some",
    "start": "2979367",
    "end": "2985353"
  },
  {
    "text": "violation, d of v is less than\ndelta of s, v. That would be bad if we somehow\ngot an estimate smaller than the",
    "start": "2985353",
    "end": "2993565"
  },
  {
    "text": "shortest path.\nWell, then I think about looking at the first violation\nis we know sort of by induction",
    "start": "2993565",
    "end": "3001161"
  },
  {
    "text": "that all other values are\ncorrect. OK, d of v is the first one\nwhere we've screwed up.",
    "start": "3001162",
    "end": "3009208"
  },
  {
    "text": "So, the invariant holds\neverywhere else. Well, what caused this to fail,\nthis invariant to be violated,",
    "start": "3009208",
    "end": "3017626"
  },
  {
    "text": "is some relaxation,\nOK, on d of v. So, we had some d of v,\nand we replaced it with some",
    "start": "3017626",
    "end": "3024696"
  },
  {
    "text": "other d of u plus the weight of\nthe edge from u to v.",
    "start": "3024696",
    "end": "3030000"
  },
  {
    "text": "And somehow,\nthis made it invalid. So, d of v is somehow less than\nthat.",
    "start": "3030000",
    "end": "3039178"
  },
  {
    "text": "We just set d of v to this.\nSo, this must be less than",
    "start": "3039178",
    "end": "3046229"
  },
  {
    "text": "delta of s, v.\nThe claim is that that's not",
    "start": "3046229",
    "end": "3051816"
  },
  {
    "text": "possible because,\nlet me rewrite a little bit.",
    "start": "3051816",
    "end": "3059000"
  },
  {
    "text": "We have d of u plus w of (u,v).\nAnd, we have our induction",
    "start": "3059000",
    "end": "3067668"
  },
  {
    "text": "hypothesis, which holds on u,\nu of some other vertex.",
    "start": "3067668",
    "end": "3075576"
  },
  {
    "text": "We know that d of u is at least\ndelta of s, u.",
    "start": "3075576",
    "end": "3082419"
  },
  {
    "text": "So, this has to be at least\ndelta of s, u plus w of u,",
    "start": "3082419",
    "end": "3090479"
  },
  {
    "text": "v.\nNow, what about this w of u, v?\nWell, that's some path from u",
    "start": "3090479",
    "end": "3097412"
  },
  {
    "text": "to v.\nSo, it's got to be bigger than the shortest path or equal.\nSo certainly,",
    "start": "3097412",
    "end": "3104293"
  },
  {
    "text": "this is greater than or equal\nto delta of u, v.\nOK, it could be larger if",
    "start": "3104293",
    "end": "3110715"
  },
  {
    "text": "there's some multi-edged path\nthat has a smaller total weight,",
    "start": "3110715",
    "end": "3116311"
  },
  {
    "text": "but it's certainly no smaller\nthan delta of u, v.\nAnd, this looks like a good",
    "start": "3116311",
    "end": "3124402"
  },
  {
    "text": "summation, delta of S to u,\nand u to v is a triangle inequality, yeah.\nSo, that is,",
    "start": "3124403",
    "end": "3131523"
  },
  {
    "text": "it's upside down here.\nBut, the triangle S, u, u to v, so this is only\nlonger than S to v.",
    "start": "3131523",
    "end": "3139267"
  },
  {
    "text": "OK, so we have this thing,\nwhich is simultaneously greater",
    "start": "3139267",
    "end": "3144340"
  },
  {
    "text": "than or equal to the shortest\npath weight from S to v, and also strictly less than the\nshortest path weight from S to",
    "start": "3144340",
    "end": "3154485"
  },
  {
    "text": "v.\nSo, that's a contradiction. Maybe contradiction is the most\nintuitive way isn't the most",
    "start": "3154486",
    "end": "3161476"
  },
  {
    "text": "intuitive way to proceed.\nThe intuition, here, is whatever you assign d\nof v, you have a path in mind.",
    "start": "3161476",
    "end": "3167780"
  },
  {
    "text": "You inductively had a path from\ns to u. Then you added this edge.\nSo, that was a real path.",
    "start": "3167780",
    "end": "3173384"
  },
  {
    "text": "We always know that every path\nhas weight greater than or equal to the shortest path.\nSo, it should be true,",
    "start": "3173384",
    "end": "3180070"
  },
  {
    "text": "and here's the inductive proof.\nAll right, moving right along,",
    "start": "3180070",
    "end": "3186934"
  },
  {
    "text": "so this was an easy warm-up.\nWe have greater than or equal",
    "start": "3186934",
    "end": "3194409"
  },
  {
    "text": "to.\nNow we have to prove less than or equal to at the end of the\nalgorithm.",
    "start": "3194409",
    "end": "3203852"
  },
  {
    "text": "This is true all the time;\nless than or equal to will only",
    "start": "3203852",
    "end": "3211327"
  },
  {
    "text": "be true at the end.\nSo, we are not going to prove",
    "start": "3211327",
    "end": "3217079"
  },
  {
    "text": "less than or equal to quite yet.\nWe're going to prove another lemma, which again,\nso both of these lemmas are",
    "start": "3217080",
    "end": "3224686"
  },
  {
    "text": "useful for other algorithms,\ntoo. So, we're sort of building some\nshortest path theory that we can",
    "start": "3224686",
    "end": "3231502"
  },
  {
    "text": "apply later.\nThis one will give you some intuition about why relaxation,\nnot only is it not bad,",
    "start": "3231502",
    "end": "3238174"
  },
  {
    "text": "it's actually good.\nNot only does it not screw up anything, but it also makes\nprogress in the following sense.",
    "start": "3238174",
    "end": "3247000"
  },
  {
    "text": "So, suppose you knew the\nshortest path from s to some",
    "start": "3247000",
    "end": "3252631"
  },
  {
    "text": "vertex.\nOK, so you go from s to some other vertices.\nThen you go to u.",
    "start": "3252631",
    "end": "3259888"
  },
  {
    "text": "Then you go to v.\nSuppose that is a shortest path",
    "start": "3259888",
    "end": "3265086"
  },
  {
    "text": "from s to v.\nOK, and also suppose that we already know in d of u the\nshortest path weight from s to",
    "start": "3265086",
    "end": "3275483"
  },
  {
    "text": "u.\nSo, suppose we have this equality.\nWe now know that we always have",
    "start": "3275483",
    "end": "3283400"
  },
  {
    "text": "a greater than or equal to.\nSuppose they are equal for u,",
    "start": "3283400",
    "end": "3289000"
  },
  {
    "text": "OK, the vertex just before v in\nthe shortest path. OK, and suppose we relax that\nedge, (u,v), OK,",
    "start": "3289000",
    "end": "3298400"
  },
  {
    "text": "which is exactly this step.\nThis is relaxing the edge,",
    "start": "3298400",
    "end": "3305132"
  },
  {
    "text": "(u,v).\nBut we'll just call it relaxation here.\nAfter that relaxation,",
    "start": "3305133",
    "end": "3313089"
  },
  {
    "text": "d of v equals delta of (s,v).\nSo, if we had the correct",
    "start": "3313089",
    "end": "3319598"
  },
  {
    "text": "answer for u,\nand we relax (u,v), then we get the correct answer\nfor v.",
    "start": "3319598",
    "end": "3329000"
  },
  {
    "text": "OK, this is good news.\nIt means, if inductively we can somehow get the right answer for\nu, now we know how to get the",
    "start": "3329000",
    "end": "3336519"
  },
  {
    "text": "right answer for v.\nIn the algorithm, we don't actually know what the\nvertex just before v in the",
    "start": "3336519",
    "end": "3342719"
  },
  {
    "text": "shortest path is,\nbut in the analysis we can pretty much know that.\nSo, we have to prove this",
    "start": "3342719",
    "end": "3348655"
  },
  {
    "text": "lemma.\nThis is actually even easier than the previous one:\ndon't even need induction",
    "start": "3348655",
    "end": "3353997"
  },
  {
    "text": "because you just work through\nwhat's going on in relaxation, and it's true.\nSo, here we go.",
    "start": "3353997",
    "end": "3361167"
  },
  {
    "text": "So, we're interested in this\nvalue, delta of Ss v. And we know what the shortest\npath is.",
    "start": "3361167",
    "end": "3367863"
  },
  {
    "text": "So, the shortest path weight is\nthe weight of this path. OK, so we can write down some\nequality here.",
    "start": "3367863",
    "end": "3375493"
  },
  {
    "text": "Well, I'm going to split out\nthe first part of the path and the last part of the path.\nSo, we have,",
    "start": "3375493",
    "end": "3382968"
  },
  {
    "text": "I'll say, the weight from s,\nso, this part of the path from s to u, plus the weight of this\nedge, u, v.",
    "start": "3382968",
    "end": "3392000"
  },
  {
    "text": "Remember, we could write w of a\npath, and that was the total",
    "start": "3392000",
    "end": "3400309"
  },
  {
    "text": "weight of all those edges.\nSo, what is this,",
    "start": "3400309",
    "end": "3406366"
  },
  {
    "text": "the weight of this path from S\nto u? Or, what property should I use\nto figure out what that value",
    "start": "3406366",
    "end": "3419605"
  },
  {
    "text": "is?\nYeah? s to v is the shortest path,\nright?",
    "start": "3419605",
    "end": "3425344"
  },
  {
    "text": "So, by optimal substructure,\nfrom s to u is also a shortest",
    "start": "3425344",
    "end": "3431049"
  },
  {
    "text": "path.\nSo, this is delta of s, u.\nCool. We'll hold on for now.\nThat's all we're going to say.",
    "start": "3431049",
    "end": "3439606"
  },
  {
    "text": "On the other hand,\nwe know from this lemma that matter what we do,\nd of v is greater than or equal",
    "start": "3439606",
    "end": "3448950"
  },
  {
    "text": "to delta of s,\nv. So, let's write that down.\nSo, there's a few cases,",
    "start": "3448950",
    "end": "3456086"
  },
  {
    "text": "and this will eliminate some of\nthe cases. By that lemma correctness one,\nwe know that d of v is greater",
    "start": "3456086",
    "end": "3464341"
  },
  {
    "text": "than or equal to delta of s,\nv. So, it's either equal or\ngreater than at all times.",
    "start": "3464341",
    "end": "3470879"
  },
  {
    "text": "So, I'm thinking about the time\nbefore we do the relaxation, this (u,v).\nSo, at that point,",
    "start": "3470879",
    "end": "3478072"
  },
  {
    "text": "this is certainly true.\nSo, either they're equal before relaxation or it's greater.",
    "start": "3478072",
    "end": "3486000"
  },
  {
    "text": "OK, if they are equal before\nrelaxation, we're happy because relaxation only decreases values\nby correctness one.",
    "start": "3496000",
    "end": "3503011"
  },
  {
    "text": "It can't get any smaller than\nthis, so after relaxation it will also be equal.\nOK, so in this case we're done.",
    "start": "3503011",
    "end": "3509832"
  },
  {
    "text": "So, that's a trivial case.\nSo let's now suppose that d of",
    "start": "3509832",
    "end": "3515543"
  },
  {
    "text": "v is greater than delta of s,\nv before relaxation.",
    "start": "3515543",
    "end": "3521330"
  },
  {
    "text": "That's perfectly valid.\nHopefully now we fix it.",
    "start": "3521330",
    "end": "3526881"
  },
  {
    "text": "OK, well the point is,\nwe know this delta s,",
    "start": "3526881",
    "end": "3531960"
  },
  {
    "text": "v.\nIt is this sum. OK, we also know this.\nSo, delta of s,",
    "start": "3531960",
    "end": "3538338"
  },
  {
    "text": "u we know is d of u.\nAnd, we have this w u,",
    "start": "3538338",
    "end": "3543341"
  },
  {
    "text": "v.\nSo, delta of s, v is d of u plus w of (u,v)\nbecause we are assuming we have this shortest path structure\nwhere you go from s to u,",
    "start": "3543342",
    "end": "3551150"
  },
  {
    "text": "and then you follow the edge,\n(u,v). So, we know this.\nSo, we know d of v is greater than d of u plus w of (u,v).\nBy golly, that's this condition",
    "start": "3551150",
    "end": "3559690"
  },
  {
    "text": "in relaxation.\nSo, we're just checking, relaxation actually does\nsomething here. OK, if you had the wrong\ndistance estimate,",
    "start": "3559690",
    "end": "3566949"
  },
  {
    "text": "this if condition is satisfied.\nTherefore, we do this.",
    "start": "3566949",
    "end": "3573119"
  },
  {
    "text": "So, in this case,\nwe relax. So, I'm just relaxing.\nThen, we set d of v to d of u",
    "start": "3573119",
    "end": "3584036"
  },
  {
    "text": "plus WUV, which is what we want.\nOK, so we set d of v to d of u",
    "start": "3584037",
    "end": "3592828"
  },
  {
    "text": "plus w of (u,v).\nAnd, this equals, as we said here,\ndelta of S, v,",
    "start": "3592828",
    "end": "3601761"
  },
  {
    "text": "which is what we wanted to\nprove.",
    "start": "3601761",
    "end": "3608000"
  },
  {
    "text": "Done.\nOK, I'm getting more and more excited as we get into the meat\nof this proof.",
    "start": "3608000",
    "end": "3618834"
  },
  {
    "text": "Any questions so far?\nGood. Now comes the hard part.\nThese are both very easy",
    "start": "3618834",
    "end": "3628982"
  },
  {
    "text": "lemmas, right?\nI'll use these two boards.",
    "start": "3628982",
    "end": "3635934"
  },
  {
    "text": "We don't need these proofs\nanymore.",
    "start": "3635935",
    "end": "3641081"
  },
  {
    "text": "We just need these statements:\ncorrectness one,",
    "start": "3641081",
    "end": "3648043"
  },
  {
    "text": "correctness lemma;\ngreat names. So, now finally we get to\ncorrectness two.",
    "start": "3648043",
    "end": "3660000"
  },
  {
    "text": "So, we had one and one and a\nhalf. So, I guess correctness is,\nitself, a mini-trilogy,",
    "start": "3660000",
    "end": "3669485"
  },
  {
    "text": "the mini-series.\nOK, so correctness two says when the algorithm is done,\nwe have the right answer.",
    "start": "3669485",
    "end": "3680341"
  },
  {
    "text": "This is really correctness.\nBut, it's going to build on",
    "start": "3680342",
    "end": "3686514"
  },
  {
    "text": "correctness one and correctness\nlemma.",
    "start": "3686514",
    "end": "3692000"
  },
  {
    "text": "So, we want d of v to equal\ndelta of s, v for all vertices, v at the end of the algorithm.\nThat is clearly our goal.",
    "start": "3692000",
    "end": "3699207"
  },
  {
    "text": "Now, this theorem is assuming\nthat all of the weights are nonnegative, just to repeat.\nIt doesn't assume anything",
    "start": "3699207",
    "end": "3706223"
  },
  {
    "text": "else.\nSo, it's going to get the infinities right.\nBut, if there are minus infinities, all bets are off.\nOK, even if there's any",
    "start": "3706223",
    "end": "3714004"
  },
  {
    "text": "negative weight edge anywhere,\nit's not going to do the right thing necessarily.\nBut, assuming all the weights",
    "start": "3714004",
    "end": "3722573"
  },
  {
    "text": "are nonnegative,\nwhich is reasonable if they're measuring time.\nUsually it costs money to",
    "start": "3722573",
    "end": "3730207"
  },
  {
    "text": "travel along edges.\nThey don't pay you to do it. But who knows?\nSo, I need just to say a few",
    "start": "3730207",
    "end": "3738106"
  },
  {
    "text": "things.\nOne of the things we've mentioned somewhere along the\nway is when you add a vertex to",
    "start": "3738106",
    "end": "3746094"
  },
  {
    "text": "S, you never change its weight.\nOK, that actually requires",
    "start": "3746094",
    "end": "3752363"
  },
  {
    "text": "proof.\nI'm just going to state it here.\nIt's not hard to see.",
    "start": "3752363",
    "end": "3757636"
  },
  {
    "text": "d of v doesn't change.\nOK, this is essentially an induction once v is added to S.\nOK, this will actually followed",
    "start": "3757636",
    "end": "3767636"
  },
  {
    "text": "by something we'll say in a\nmoment. OK, so all I really care about\nis when a vertex is added to S,",
    "start": "3767636",
    "end": "3776272"
  },
  {
    "text": "we better have the right\nestimate because after that, we're not going to change it,\nlet's say.",
    "start": "3776272",
    "end": "3786000"
  },
  {
    "text": "OK, we could define the\nalgorithm that way. We are not, but we could.\nI'll say more about this in a",
    "start": "3786000",
    "end": "3795365"
  },
  {
    "text": "second.\nSo, all we care about is whether d of v equals delta of\ns, v.",
    "start": "3795365",
    "end": "3801804"
  },
  {
    "text": "That's what we want to prove.\nSo, it's clearly that. It should be true at the end.\nBut, it suffices to prove that",
    "start": "3801804",
    "end": "3812536"
  },
  {
    "text": "it holds when v is added to S,\nto capital S.",
    "start": "3812536",
    "end": "3818000"
  },
  {
    "text": "OK, this actually implies the\nfirst statement. It has sort of a funny\nimplication. But, if we can prove this,\nthat d of v equals delta of s,",
    "start": "3818000",
    "end": "3824982"
  },
  {
    "text": "v, when you add to S,\nwe know relaxation only decreases value.\nSo, it can't get any smaller. It would be from correctness\none.",
    "start": "3824982",
    "end": "3831241"
  },
  {
    "text": "Correctness one says we can't\nget any smaller than delta. So, if we get a quality at that\npoint, we'll have a quality from",
    "start": "3831241",
    "end": "3837396"
  },
  {
    "text": "then on.\nSo, that actually implies d of v never changes after that\npoint. OK, so we're going to prove\nthis.",
    "start": "3837396",
    "end": "3846085"
  },
  {
    "text": "Good.\nWell, suppose it isn't true. So this would be a proof by a\ncontradiction.",
    "start": "3846085",
    "end": "3855787"
  },
  {
    "text": "Suppose for contradiction that\nthis fails to hold.",
    "start": "3855787",
    "end": "3862042"
  },
  {
    "text": "And, let's look at the first\nfailure. Suppose u is the first vertex\n--",
    "start": "3862042",
    "end": "3872000"
  },
  {
    "text": "-- that's about to be added to\nS. I want to consider the time\nright before it's added to S,",
    "start": "3881000",
    "end": "3892146"
  },
  {
    "text": "for which we don't have what we\nwant. These are not equal.\nd of u does not equal delta of",
    "start": "3892146",
    "end": "3904166"
  },
  {
    "text": "s, u.\nWell, if they're not equal, we know from correctness one\nthat d of E is strictly greater",
    "start": "3904166",
    "end": "3916805"
  },
  {
    "text": "than delta of s,\nu, so, d of u. So, we have d of u is strictly\ngreater than delta of s,",
    "start": "3916805",
    "end": "3928472"
  },
  {
    "text": "u.\nOK, that's the beginning of the proof, nothing too exciting yet,\njust some warm-up.",
    "start": "3928472",
    "end": "3937453"
  },
  {
    "text": "OK, but this,\nused already correctness one. I think that's the only time\nthat we use it in this proof.",
    "start": "3937453",
    "end": "3946564"
  },
  {
    "text": "OK, so I sort of just want to\ndraw picture of what's going on.",
    "start": "3946564",
    "end": "3952177"
  },
  {
    "text": "But I need a little bit of\ndescription. So, let's look at the shortest\npath.",
    "start": "3952177",
    "end": "3960000"
  },
  {
    "text": "Somehow, d of u is greater than\nthe shortest path. So, consider the shortest path\nor a shortest path.",
    "start": "3960000",
    "end": "3968352"
  },
  {
    "text": "Let p be a shortest path,\nnot just any shortest path, but the shortest path from s to\nu.",
    "start": "3968352",
    "end": "3975596"
  },
  {
    "text": "OK, so that means that the\nweight of this path is the shortest path weight.\nSo, we have some equations for",
    "start": "3975596",
    "end": "3984375"
  },
  {
    "text": "what's going on here.\nSo, we care about delta of s, u.\nHere's a path with that weight.",
    "start": "3984375",
    "end": "3992791"
  },
  {
    "text": "It's got to be one because\nshortest paths exist here; slight exceptional cases if\nit's a plus infinity,",
    "start": "3992791",
    "end": "4001796"
  },
  {
    "text": "but I'm not going to worry\nabout that. So, let me draw a picture\nsomewhere.",
    "start": "4001796",
    "end": "4009000"
  },
  {
    "text": "So, we have s.\nWe have u. Here is the shortest path from\ns to u.",
    "start": "4023000",
    "end": "4031344"
  },
  {
    "text": "That's p.\nNo idea what it looks like so",
    "start": "4031344",
    "end": "4036542"
  },
  {
    "text": "far.\nNow, what we also have is the notion of capital S.\nSo, I'm going to draw capital",
    "start": "4036542",
    "end": "4047758"
  },
  {
    "text": "S.\nSo, this is big S. We know that little s is in big\nS.",
    "start": "4047759",
    "end": "4054600"
  },
  {
    "text": "We know that u is not yet in\nbig S. So, I haven't screwed up\nanything yet,",
    "start": "4054600",
    "end": "4060195"
  },
  {
    "text": "right?\nThis path starts in S and leaves it at some point because\nuntil we are about to add u to",
    "start": "4060195",
    "end": "4067444"
  },
  {
    "text": "S, so it hasn't happened yet,\nso u is not in S. Fine.\nWhat I want to do is look at",
    "start": "4067445",
    "end": "4073671"
  },
  {
    "text": "the first place here where the\npath, p, exits S. So, there is some vertex here.\nLet's call it x.",
    "start": "4073671",
    "end": "4082526"
  },
  {
    "text": "There's some vertex here.\nWe'll call it y. OK, possibly x equals S.\nPossibly y equals u.",
    "start": "4082526",
    "end": "4090632"
  },
  {
    "text": "But it's got to exit somewhere,\nbecause it starts inside and",
    "start": "4090632",
    "end": "4096259"
  },
  {
    "text": "ends up outside.\nAnd it's a finite path. OK, so consider the first time\nit happens; not the second time,",
    "start": "4096260",
    "end": "4105893"
  },
  {
    "text": "the first.\nOK, so consider the first edge, (x,y), where p exits capital S.\nThe shortest path from s to u",
    "start": "4105893",
    "end": "4117140"
  },
  {
    "text": "exits capital S.\nIt's got to happen somewhere. Cool, now, what do we know?\nLittle x is in S.",
    "start": "4117140",
    "end": "4126778"
  },
  {
    "text": "So, it has the right answer\nbecause u, we were about to add",
    "start": "4126779",
    "end": "4133061"
  },
  {
    "text": "u to S, and that was the first\nviolation of something in S that",
    "start": "4133061",
    "end": "4139776"
  },
  {
    "text": "has the wrong d of x estimate.\nSo, d of x equals delta of s,",
    "start": "4139776",
    "end": "4146206"
  },
  {
    "text": "x.\nBecause we are looking at the first violation,\nx is something that got added",
    "start": "4146206",
    "end": "4151988"
  },
  {
    "text": "before.\nSo, by induction on time, or because we had the first\nviolation, d of x equals the",
    "start": "4151989",
    "end": "4158608"
  },
  {
    "text": "shortest path weight from S to\nx. So, that's good news.\nNow we are trying to apply this",
    "start": "4158608",
    "end": "4165000"
  },
  {
    "text": "lemma.\nIt's the only thing left to do. We haven't used this lemma for\nanything.",
    "start": "4165000",
    "end": "4172000"
  },
  {
    "text": "So, we have the setup.\nIf we already know that one of the d values is the right\nanswer, and we relaxed the edge",
    "start": "4172000",
    "end": "4178974"
  },
  {
    "text": "that goes out from it,\nthen we get another right answer.\nSo that's what I want to argue",
    "start": "4178974",
    "end": "4184399"
  },
  {
    "text": "over here.\nWe know that the d of x equals this weight because,\nagain, subpaths of shortest",
    "start": "4184399",
    "end": "4190017"
  },
  {
    "text": "paths are shortest paths.\nWe have optimal substructure, so this is a shortest path,\nfrom S to x.",
    "start": "4190017",
    "end": "4196023"
  },
  {
    "text": "It might not be the only one,\nbut it is one. So we know that matches.\nNow, I want to think about",
    "start": "4196023",
    "end": "4202029"
  },
  {
    "text": "relaxing this edge,\n(x,y). Well, x is in capital S.\nAnd, the algorithm says,",
    "start": "4202029",
    "end": "4208536"
  },
  {
    "text": "whenever you add a vertex,\nu, to the big set, S, you relax all the edges that\ngo out from there.",
    "start": "4208536",
    "end": "4215388"
  },
  {
    "text": "OK, so when we added x to S,\nand we now look far in the future, we're about to add some\nother vertex.",
    "start": "4215389",
    "end": "4222610"
  },
  {
    "text": "Right after we added x to S,\nwe relax this edge, (x,y), because we relaxed every\nedge that goes out from x,",
    "start": "4222610",
    "end": "4230273"
  },
  {
    "text": "OK, whatever they were.\nSome of them went into S.",
    "start": "4230273",
    "end": "4236443"
  },
  {
    "text": "Some of them went out.\nHere's one of them.",
    "start": "4236443",
    "end": "4242091"
  },
  {
    "text": "So, when we added x to S,\nwe got XS. When we added x to S,\nwe relaxed the edge,",
    "start": "4242091",
    "end": "4252561"
  },
  {
    "text": "(x,y).\nOK, so now we're going to use the lemma.\nSo, by the correctness lemma --",
    "start": "4252561",
    "end": "4264000"
  },
  {
    "text": "What do you get?\nWell, we add this correct shortest path weight to x now.\nWe relax the edge,",
    "start": "4275000",
    "end": "4283386"
  },
  {
    "text": "(x,y).\nSo, now we should have the correct shortest path weight for\ny.",
    "start": "4283387",
    "end": "4289607"
  },
  {
    "text": "d of y equals delta of s,\ny. OK, this is sometime in the\npast.",
    "start": "4289607",
    "end": "4295509"
  },
  {
    "text": "In particular,\nnow, it should still be true because once you get down to the\nright answer you never change",
    "start": "4295509",
    "end": "4303588"
  },
  {
    "text": "it.\nOK, we should be done. OK, why are we done?\nWell, what else do we know",
    "start": "4303588",
    "end": "4309156"
  },
  {
    "text": "here?\nWe assumed something for contradiction,\nso we better contradict that.",
    "start": "4309156",
    "end": "4314803"
  },
  {
    "text": "We assume somehow,\nd of u is strictly greater than delta of s, u.\nSo, d of u here is strictly",
    "start": "4314803",
    "end": "4323142"
  },
  {
    "text": "greater than the length of this\nwhole path. Well, we don't really know\nwhether u equals y.",
    "start": "4323142",
    "end": "4330047"
  },
  {
    "text": "It could, could not.\nAnd, but what do we know about this shortest path from S to y?\nWell, it could only be shorter",
    "start": "4330047",
    "end": "4338857"
  },
  {
    "text": "than from S to u because it's a\nsubpath. And it's the shortest path\nbecause it's the subpath of the",
    "start": "4338857",
    "end": "4346476"
  },
  {
    "text": "shortest path.\nThe shortest path from S to y has to be less than or equal to\nthe shortest path from S to u.",
    "start": "4346476",
    "end": "4356000"
  },
  {
    "text": "OK, S to y: less than or equal\nto s, u, OK, just because the",
    "start": "4356000",
    "end": "4364627"
  },
  {
    "text": "subpath.\nI'm closer. I've got delta of s,\nu now.",
    "start": "4364627",
    "end": "4371206"
  },
  {
    "text": "Somehow, I want to involve d of\nu. So, I want to relate d of y to\nd of u.",
    "start": "4371207",
    "end": "4381443"
  },
  {
    "text": "What do I know about d of u?\nYeah?",
    "start": "4381443",
    "end": "4387388"
  },
  {
    "text": "d of u is smaller because we\nhave a Min heap, yeah.\nWe always chose,",
    "start": "4387389",
    "end": "4392448"
  },
  {
    "text": "let's erase,\nit's way down here. We chose u.\nThis is the middle of the",
    "start": "4392449",
    "end": "4397663"
  },
  {
    "text": "algorithm.\nIt's the reason I kept this to be the minimum key.\nThis is keyed on d.",
    "start": "4397664",
    "end": "4403736"
  },
  {
    "text": "So, we know that at this\nmoment, when we're trying to add u to S, right,\ny is not in S,",
    "start": "4403736",
    "end": "4410275"
  },
  {
    "text": "and u is not in S.\nThey might actually be the same",
    "start": "4410275",
    "end": "4415412"
  },
  {
    "text": "vertex.\nBut both of these vertices, same or not,\nare outside S. We chose u because d of u has\nthe smallest d estimate.",
    "start": "4415412",
    "end": "4424204"
  },
  {
    "text": "So, d of y has to be greater\nthan or equal to d of u. It might be equal if they're\nthe same vertex,",
    "start": "4424204",
    "end": "4431674"
  },
  {
    "text": "but it's got to be greater than\nor equal to. So, d of y here is greater than\nor equal to d of u.",
    "start": "4431674",
    "end": "4440000"
  },
  {
    "text": "So, here we're using the fact\nthat we actually made a greedy choice.\nIt's the one place we're using",
    "start": "4440000",
    "end": "4446168"
  },
  {
    "text": "the greedy choice.\nBetter use it somewhere because you can't just take an arbitrary\nvertex and declare it to be",
    "start": "4446168",
    "end": "4453108"
  },
  {
    "text": "done.\nYou've got to take the greedy one.\nOK, now we have d of u is less than or equal to delta of s,\nu, which contradicts this.",
    "start": "4453108",
    "end": "4460947"
  },
  {
    "text": "OK, sort of magical that that\nall just worked out. But sort of like the previous\nproofs, you just see what",
    "start": "4460947",
    "end": "4467566"
  },
  {
    "text": "happens and it works.\nOK, that's the approximation. The only real idea here is to\nlook at this edge.",
    "start": "4467566",
    "end": "4475005"
  },
  {
    "text": "In fact, you could look at this\nedge too. But let's look at some edge\nthat comes from S and goes out",
    "start": "4475005",
    "end": "4481209"
  },
  {
    "text": "of S, and argue that while x has\nto be correct, and what we made x correct,\ny had to be correct,",
    "start": "4481209",
    "end": "4487156"
  },
  {
    "text": "and now, why the hell are we\nlooking at u? y is the thing you should have\nlooked at.",
    "start": "4487156",
    "end": "4492337"
  },
  {
    "text": "And, there you get a\ncontradiction because y had the right answer.\nIf u equals y, that's fine,\nor if u and y were sort of",
    "start": "4492337",
    "end": "4499755"
  },
  {
    "text": "equally good,\nthat's also fine if all these weights were zero.\nSo, the picture might actually",
    "start": "4499755",
    "end": "4507604"
  },
  {
    "text": "look like this.\nBut, in that case, d of u is the correct answer.\nIt was delta SU.",
    "start": "4507604",
    "end": "4514376"
  },
  {
    "text": "We assumed that it wasn't.\nThat's where we're getting a contradiction.\nPretty clear?",
    "start": "4514376",
    "end": "4521408"
  },
  {
    "text": "Go over this proof.\nIt's a bit complicated, naturally.\nOK, we have a little bit more",
    "start": "4521408",
    "end": "4528440"
  },
  {
    "text": "to cover, some easier stuff.\nOK, the first thing is what's",
    "start": "4528440",
    "end": "4534168"
  },
  {
    "text": "the running time of this\nalgorithm? I'll do this very quick because\nwe're actually seen this many",
    "start": "4534168",
    "end": "4541196"
  },
  {
    "text": "times before last class.\nThere was some initialization. The initialization,\nwhich is no longer here,",
    "start": "4541196",
    "end": "4548448"
  },
  {
    "text": "is linear time.\nNo big deal. OK, extract Min.\nWell, that's some data structure.\nSo, we have something like size",
    "start": "4548448",
    "end": "4556373"
  },
  {
    "text": "of V.\nEvery vertex we extract the Min once, and that's it.\nSo, size of V,",
    "start": "4556373",
    "end": "4561607"
  },
  {
    "text": "extract mins.\nOK, so that's pretty simple.",
    "start": "4561607",
    "end": "4566634"
  },
  {
    "text": "OK, then we had this main loop.\nThis is a completely conceptual",
    "start": "4566634",
    "end": "4572466"
  },
  {
    "text": "operation.\nS is not actually used in the algorithm.\nIt's just for thinking.",
    "start": "4572466",
    "end": "4579239"
  },
  {
    "text": "OK, so this takes zero time.\nGot to love it. OK, and now the heart is here.\nSo, how many times does this",
    "start": "4579240",
    "end": "4588742"
  },
  {
    "text": "loop iterate?\nThat's the degree of u. So, what is the total number of\ntimes that we execute a",
    "start": "4588742",
    "end": "4598780"
  },
  {
    "text": "relaxation step?\nIt doesn't necessarily mean we do this, but we at least execute\nthis body.",
    "start": "4598780",
    "end": "4607672"
  },
  {
    "text": "Over the whole algorithm,\nhow many times do we do this?",
    "start": "4607672",
    "end": "4613128"
  },
  {
    "text": "Every vertex,\nwe look at all the outgoing edges from there.\nSo, the total would be?",
    "start": "4613128",
    "end": "4622000"
  },
  {
    "text": "Number of edges,\nyeah. So, this number of edges\niterations. OK, this is essentially the\nhandshaking lemma we saw last",
    "start": "4631000",
    "end": "4639615"
  },
  {
    "text": "time, but for directed graphs.\nAnd we are only looking at the outgoing edges.\nSo, it's not a factor of two",
    "start": "4639615",
    "end": "4647538"
  },
  {
    "text": "here because you're only\noutgoing from one side. So, we have number of\nreiterations.",
    "start": "4647538",
    "end": "4656573"
  },
  {
    "text": "In the worst case,\nwe do a decreased key for",
    "start": "4656573",
    "end": "4662358"
  },
  {
    "text": "everyone.\nSo, at most: E decreased keys.\nOK, so the time is,",
    "start": "4662358",
    "end": "4670026"
  },
  {
    "text": "well, we have v extract Mins,\nso the time to do an extract",
    "start": "4670026",
    "end": "4677695"
  },
  {
    "text": "Min, whatever that is.\nAnd we have E decreased keys,",
    "start": "4677695",
    "end": "4685771"
  },
  {
    "text": "whatever that is,\nand this is exactly the running",
    "start": "4685771",
    "end": "4692013"
  },
  {
    "text": "time we had for Prim's algorithm\nfor a minimum spanning tree last",
    "start": "4692013",
    "end": "4700336"
  },
  {
    "text": "time.\nAnd, it depends what data structure you use,\nwhat running time you get.",
    "start": "4700336",
    "end": "4711000"
  },
  {
    "text": "So, I'm going to skip the whole\ntable here. But, if you use an array,\nthe final running time will be",
    "start": "4711000",
    "end": "4719518"
  },
  {
    "text": "V^2 because you have order of v\nextract Min, and you have constant time decreased key.\nIf you use a binary heap,",
    "start": "4719518",
    "end": "4729090"
  },
  {
    "text": "which we know and love,\nthen we have order log v for each operation.\nAnd so, this is V plus E log V.",
    "start": "4729090",
    "end": "4737609"
  },
  {
    "text": "And, so that's what we know how\nto do. And, if you use this fancy data\nstructure called a Fibonacci",
    "start": "4737609",
    "end": "4746830"
  },
  {
    "text": "heap, you get constant time\ndecreased key amortized. And, you get an E plus v log v\nworst case bound on the running",
    "start": "4746830",
    "end": "4756000"
  },
  {
    "text": "time.\nSo, this is the best we know how to solve shortest paths\nwithout any extra assumptions,",
    "start": "4756000",
    "end": "4763368"
  },
  {
    "text": "single source shortest paths\nwith non-negative edge weights in general.\nOK, this is almost as good and",
    "start": "4763368",
    "end": "4772040"
  },
  {
    "text": "this is sometimes better than\nthat. But these are essentially\nirrelevant except that you know",
    "start": "4772040",
    "end": "4778163"
  },
  {
    "text": "how to do these.\nYou don't know how to do a Fibonacci heap unless you read\nthat in the chapter of the book.",
    "start": "4778163",
    "end": "4785238"
  },
  {
    "text": "That's why we mention the top\ntwo running times. OK, I want to talk briefly\nabout a simpler case,",
    "start": "4785238",
    "end": "4791632"
  },
  {
    "text": "which you may have seen before.\nAnd so it's sort of fun to connect this up to breadth first\nsearch in a graph.",
    "start": "4791632",
    "end": "4800000"
  },
  {
    "text": "So, I mean that ends Dijkstra,\nso to speak. But now I want to think about a\nspecial case where the graph is",
    "start": "4800000",
    "end": "4808176"
  },
  {
    "text": "unweighted, meaning w of (u,v)\nequals one for all vertices, u and v.\nOK, suppose we had that",
    "start": "4808176",
    "end": "4815174"
  },
  {
    "text": "property.\nCan we do any better than Dijkstra?\nCan we do better than this",
    "start": "4815174",
    "end": "4820599"
  },
  {
    "text": "running time?\nWell, we probably have to look at all the edges and all the\nvertices.",
    "start": "4820599",
    "end": "4826889"
  },
  {
    "text": "So, the only thing I'm\nquestioning is this log v.",
    "start": "4826889",
    "end": "4832000"
  },
  {
    "text": "Can I avoid that?\nI gave away the answer a little bit.\nThe answer is called breadth",
    "start": "4832000",
    "end": "4838779"
  },
  {
    "text": "first search,\nor BFS, which you have probably seen before.\nNext to depth first search,",
    "start": "4838779",
    "end": "4845813"
  },
  {
    "text": "it's one of the standard ways\nto look at the graph. But we can say a little bit\nmore than you may have seen",
    "start": "4845813",
    "end": "4854627"
  },
  {
    "text": "before.\nBreadth for search is actually Dijkstra's algorithm:\nkind of nifty.",
    "start": "4854627",
    "end": "4862000"
  },
  {
    "text": "There are two changes.\nFirst change is that breadth",
    "start": "4862000",
    "end": "4868607"
  },
  {
    "text": "for search does not use a\npriority queue.",
    "start": "4868607",
    "end": "4873894"
  },
  {
    "text": "I'll just tell you what it uses\ninstead.",
    "start": "4873894",
    "end": "4879048"
  },
  {
    "text": "You can use a queue first in\nfirst out honest-to-goodness",
    "start": "4879048",
    "end": "4886448"
  },
  {
    "text": "queue instead of a priority\nqueue.",
    "start": "4886449",
    "end": "4892000"
  },
  {
    "text": "OK, it turns out that works.\nInstead of doing extract Min, you just take the first thing\noff the queue.",
    "start": "4892000",
    "end": "4900295"
  },
  {
    "text": "Instead of doing decreased key,\nOK, here's a subtlety. But, this if statement changes\na little bit.",
    "start": "4900295",
    "end": "4908260"
  },
  {
    "text": "So, here is the relaxation\nstep. So, in order to relax,\nyou say this much simpler",
    "start": "4908260",
    "end": "4914730"
  },
  {
    "text": "thing.\nIf we haven't visited v yet, then we declare it to have the\nshortest path weight,",
    "start": "4914730",
    "end": "4921781"
  },
  {
    "text": "say, d of v is d of u plus one,\nwhich is the weight of the edge, (u,v).\nAnd we add v to the end of the",
    "start": "4921782",
    "end": "4932423"
  },
  {
    "text": "queue.\nSo, now, we start with the queue empty.\nActually, it will just contain",
    "start": "4932423",
    "end": "4940869"
  },
  {
    "text": "the vertex, S,\nbecause that's the only thing we know the shortest path for.\nSo, the queue is just for,",
    "start": "4940869",
    "end": "4951346"
  },
  {
    "text": "I know the shortest path of\nthis thing. Just deal with it when you\ncan't look at all the outgoing edges when you can.\nSo, initially that's just S.",
    "start": "4951347",
    "end": "4958652"
  },
  {
    "text": "You say, well,\nfor all the outgoing edges, S has zero.\nAll the outgoing edges from there have weight one.\nThe shortest path weight from",
    "start": "4958652",
    "end": "4965388"
  },
  {
    "text": "the source is one.\nYou certainly can't do any better than that if all the\nweights are one. OK, so we add all those\nvertices to the end of the",
    "start": "4965388",
    "end": "4972435"
  },
  {
    "text": "queue.\nThen, we process things in order, and we just keep\nincrementing, if their value is d of u,\nadd one to it.",
    "start": "4972435",
    "end": "4977979"
  },
  {
    "text": "That's d of v.\nAnd then we are going to add v to S what we get to it in the\nqueue.",
    "start": "4977979",
    "end": "4985510"
  },
  {
    "text": "OK, that is breadth for search,\nvery simple. And, you can look at the text\nfor the algorithm and for an",
    "start": "4985510",
    "end": "4993989"
  },
  {
    "text": "example because I don't have\ntime to cover that. But the key thing is that the\ntime is faster.",
    "start": "4993989",
    "end": "5001704"
  },
  {
    "text": "The time is order V plus E\nbecause as before, we only look at each edge once\nwe look at all the outgoing",
    "start": "5001704",
    "end": "5010267"
  },
  {
    "text": "edges from all the vertices.\nAs soon as we set d of v to something, it will remain that.\nWe never touch it.",
    "start": "5010267",
    "end": "5020079"
  },
  {
    "text": "We are going to add it to S.\nThat only happens once. So, this if statement,\nand so on, in the in-queuing,",
    "start": "5020079",
    "end": "5026193"
  },
  {
    "text": "is done order E times,\nor actually E times, exactly.\nAn in-queuing to a queue, and de-queuing from a queue,\nthat's what we use instead of",
    "start": "5026193",
    "end": "5034106"
  },
  {
    "text": "extract Min, take constant time,\nso the total running time, number of vertices plus the\nnumber of edges.",
    "start": "5034106",
    "end": "5041000"
  },
  {
    "text": "OK, not so obvious that this\nworks, but you can prove that it works using the Dijkstra\nanalysis.",
    "start": "5041000",
    "end": "5046550"
  },
  {
    "text": "All you have to do is prove\nthat the FIFO priority queue. Once you know that,\nby the correctness of Dijkstra",
    "start": "5046550",
    "end": "5052816"
  },
  {
    "text": "you get the correctness of\nbreadth for search. So, not only is breadth for\nsearch finding all the vertices,",
    "start": "5052816",
    "end": "5059022"
  },
  {
    "text": "which is maybe what you\nnormally use it for, but it finds the shortest path\nweights from S to every other",
    "start": "5059022",
    "end": "5065109"
  },
  {
    "text": "vertex when the weights are all\none. So, there we go:\nintroduction to shortest paths. Next time we'll deal with\nnegative weights.",
    "start": "5065109",
    "end": "5072802"
  }
]