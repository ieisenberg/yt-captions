[
  {
    "start": "0",
    "end": "30000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "7029"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "7030",
    "end": "13990"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13990",
    "end": "31056"
  },
  {
    "start": "30000",
    "end": "150000"
  },
  {
    "text": "PROFESSOR: All right\neveryone let's get started. All right good afternoon on\nthis rainy, rainy sad afternoon.",
    "start": "31056",
    "end": "37290"
  },
  {
    "text": "So-- I'm glad we're\ninside though-- all right so Lecture 4 of 6.0001 in 600.",
    "start": "37290",
    "end": "44630"
  },
  {
    "text": "Quick, quick recap of\nwhat we did last time. So last time we did a little\nbit more string manipulations,",
    "start": "44630",
    "end": "50420"
  },
  {
    "text": "and then we saw how you can\nuse for loops over strings directly. So instead of having for\nloops that iterate over",
    "start": "50420",
    "end": "57310"
  },
  {
    "text": "range-- so 0, 1, 2,\n3, 4, and so on-- you saw that it was more\npowerful to sometimes use",
    "start": "57310",
    "end": "62600"
  },
  {
    "text": "for loops that iterate over\nstring objects directly.",
    "start": "62600",
    "end": "68351"
  },
  {
    "text": "So that was the first\nhalf of the lecture. In the second half, we started\nlooking at different ways that you can implement the\ndifferent implementations",
    "start": "68351",
    "end": "78920"
  },
  {
    "text": "to the same problem. So we saw the problem of\nfinding the cube root, and we saw some implementations.",
    "start": "78920",
    "end": "85969"
  },
  {
    "text": "We saw the Guess\nand Check method, and the approximation method. And then we looked\nat what I thought",
    "start": "85970",
    "end": "92270"
  },
  {
    "text": "was the most powerful method,\nwhich was the bisection method. And this one, if you\nremember, I played a game with someone in the\naudience where I guessed",
    "start": "92270",
    "end": "99680"
  },
  {
    "text": "a number between 0 and 100. And we saw that I was able\nto guess that number really, really quickly using\nthe bisection method.",
    "start": "99680",
    "end": "107120"
  },
  {
    "text": "And that's the\nmethod that you're going to implement-- that you\nare currently implementing-- in your problem set.",
    "start": "107120",
    "end": "113990"
  },
  {
    "text": "OK so today-- so that sort\nof finishes introduction",
    "start": "113990",
    "end": "123899"
  },
  {
    "text": "to some of the more basic\nmechanisms in Python. And today we're going\nto talk about how to structure your programs\nsuch that you write",
    "start": "123900",
    "end": "131640"
  },
  {
    "text": "nice, coherent code-- reusable\ncode-- by hiding away some of the details in your code.",
    "start": "131640",
    "end": "137867"
  },
  {
    "text": "And to do that we're going\nto look at these things called functions. All right so just\nstepping back and sort",
    "start": "137867",
    "end": "145450"
  },
  {
    "text": "of getting a high-level view of\nhow we write the code so far. So so far the way that\nyou've been writing code",
    "start": "145450",
    "end": "152440"
  },
  {
    "text": "for your programs\nis you open a file, you type some code to solve\na particular problem given,",
    "start": "152440",
    "end": "157760"
  },
  {
    "text": "like in your problem\nsets, each file contains some piece of code, you\nhave sequences of instructions",
    "start": "157760",
    "end": "165680"
  },
  {
    "text": "that contain maybe assignments,\nloops, conditionals, and so on and so on.",
    "start": "165680",
    "end": "170700"
  },
  {
    "text": "But really you have one\nfile that contains each code and you write everything\nin that particular file.",
    "start": "170700",
    "end": "178190"
  },
  {
    "text": "But this is OK for\nsmaller problems that we've been seeing\nso far, but when you're starting to write\nlarge pieces of code",
    "start": "178190",
    "end": "184700"
  },
  {
    "text": "it's going to get really\nmessy, really quickly. So think about if you\nwant to use a for loop",
    "start": "184700",
    "end": "190340"
  },
  {
    "text": "in one part of\nyour code, and you find it useful to use\nthat same for loop in another part of your code.",
    "start": "190340",
    "end": "196700"
  },
  {
    "text": "Some point in the future as\nyou're debugging your code, you might want to change\nyour original for loop, you have to figure out\nall the other places",
    "start": "196700",
    "end": "203081"
  },
  {
    "text": "where you've used that type\nof for loop for example. So as you're scaling\nyour code, you'll",
    "start": "203081",
    "end": "210440"
  },
  {
    "text": "find it harder to keep\ntrack of these details. So this is where functions\nwill come into play in today's lecture-- will help you out.",
    "start": "210440",
    "end": "217190"
  },
  {
    "text": " So if you want to be\nconsidered a good programmer,",
    "start": "217190",
    "end": "225580"
  },
  {
    "text": "a good programming style would\nbe to not necessarily add lots and lots of lines\nof code, but really",
    "start": "225580",
    "end": "231220"
  },
  {
    "text": "to add more functionality\nto your programs. So how many different things--\nhow many different features--",
    "start": "231220",
    "end": "237430"
  },
  {
    "text": "can your program do, rather\nthan how long can your code be. And that'll help you\nlater on look at your code",
    "start": "237430",
    "end": "244134"
  },
  {
    "text": "if you need it for\na future class, and it'll help others if they\nwant to look at your code later on if they find it useful.",
    "start": "244134",
    "end": "250930"
  },
  {
    "text": "So today we're introducing\nthis idea of functions. And functions are\nmechanisms to achieve",
    "start": "250930",
    "end": "256398"
  },
  {
    "text": "decomposition and abstraction. So these are two\nkey words here that are going to pop up\nin today's lecture",
    "start": "256399",
    "end": "262780"
  },
  {
    "text": "and also in future lectures. So before I introduce\ndecomposition and abstraction",
    "start": "262780",
    "end": "268530"
  },
  {
    "text": "in the context of\nfunctions, let's first take a look at just\nsort of a real-life example.",
    "start": "268530",
    "end": "273745"
  },
  {
    "text": "So let's take a projector. I'm using one right now. Quick show of hands.",
    "start": "273745",
    "end": "280319"
  },
  {
    "text": "If I give you all of the\nelectronic components that are part of a projector--\nresistors, a fan, a light bulb,",
    "start": "280320",
    "end": "287470"
  },
  {
    "text": "a lens, the casing, all of\nthe different parts in it. Who here would be able\nto build a projector?",
    "start": "287470",
    "end": "297430"
  },
  {
    "text": "Do I see a hand? No? Ooh oh yeah nice! You can also lie. I won't know the difference.",
    "start": "297430",
    "end": "303610"
  },
  {
    "text": "But if you can do that,\nI'd be very impressed. All right so you can't really\nput together a projector right?",
    "start": "303610",
    "end": "310300"
  },
  {
    "text": "Another show of hands. If I gave you a projector\nthat's fully assembled",
    "start": "310300",
    "end": "315525"
  },
  {
    "text": "and I gave you a\ncomputer, for example, who would be able to maybe\nfigure out within let's say an hour how to make\nthem work together?",
    "start": "315526",
    "end": "323360"
  },
  {
    "text": "Good, a fair bit of the class. That's perfect. That's exactly the answers\nI was trying to get at here.",
    "start": "323360",
    "end": "329930"
  },
  {
    "text": "So none of us really\nknow how a projector works-- the internals--\nbut a lot more of us",
    "start": "329930",
    "end": "337420"
  },
  {
    "text": "know how to work a\nprojector, just given maybe a set of basic instructions\nor just intuitively speaking.",
    "start": "337420",
    "end": "345160"
  },
  {
    "text": "So you see the projector\nas sort of a black box. You don't need to know how\nit works in order to use it.",
    "start": "345160",
    "end": "351270"
  },
  {
    "text": "You know maybe what inputs\nit might take, what's it supposed to do at a high level.",
    "start": "351270",
    "end": "357040"
  },
  {
    "text": "Take whatever's on my screen and\nput it up on the large screen there, just magnify\nit, but you don't",
    "start": "357040",
    "end": "363760"
  },
  {
    "text": "know how it does it-- how\nthe components work together. So that's the idea\nof abstraction.",
    "start": "363760",
    "end": "369050"
  },
  {
    "start": "368000",
    "end": "519000"
  },
  {
    "text": "You don't need to know how\nthe projector works in order to use it. OK that's abstraction.",
    "start": "369050",
    "end": "375850"
  },
  {
    "text": "The other half of that\nwas decomposition. So let's say that now,\ngiven a projector,",
    "start": "375850",
    "end": "382750"
  },
  {
    "text": "I want to project a very,\nvery large image down on a very large stage.",
    "start": "382750",
    "end": "388840"
  },
  {
    "text": "For example, this is\nfrom one of the Olympics. It's a stage of what,\nlike 10 football fields,",
    "start": "388840",
    "end": "393940"
  },
  {
    "text": "something like that? Something massive. You could build one\nprojector that's able to project a\nvery large image,",
    "start": "393940",
    "end": "399759"
  },
  {
    "text": "but that would be\nreally expensive and you'd have to build\nthis one projector that's used for this one time.",
    "start": "399760",
    "end": "407432"
  },
  {
    "text": "So instead what\nyou could do is you can take a bunch of\nsmaller projectors",
    "start": "407432",
    "end": "412850"
  },
  {
    "text": "and feed different inputs\nto each one of them. And as you're feeding\ndifferent inputs,",
    "start": "412850",
    "end": "418410"
  },
  {
    "text": "each one's going to\nshow a different output. And then you're going\nto be able to have all of these different\nprojectors working together",
    "start": "418410",
    "end": "423933"
  },
  {
    "text": "to solve this larger\nproblem of projecting this really cool image\non a very large stage.",
    "start": "423933",
    "end": "431919"
  },
  {
    "text": "So that's the idea\nof decomposition. You take the same projector,\nfeed it different inputs,",
    "start": "431920",
    "end": "441970"
  },
  {
    "text": "it does the exact same\nthing behind the scenes, but it will produce\na different output for each one of these\ndifferent inputs.",
    "start": "441970",
    "end": "448922"
  },
  {
    "text": "So these different devices\nare going to work together to achieve the same\ncommon goal, and that's the idea of decomposition.",
    "start": "448922",
    "end": "456820"
  },
  {
    "text": "So these is where I apply\nto the problem of projecting large image, or a\nprojector in general,",
    "start": "456820",
    "end": "463320"
  },
  {
    "text": "but we can apply these exact\nsame concepts to programming. So decomposition is\nreally just the problem",
    "start": "463320",
    "end": "471180"
  },
  {
    "text": "of creating structure\nin your code. In the projector example,\nwe have separate devices working together.",
    "start": "471180",
    "end": "478400"
  },
  {
    "text": "In programming, to\nachieve decomposition you're dividing your code\ninto smaller modules.",
    "start": "478400",
    "end": "483610"
  },
  {
    "text": "These are going to\nbe self-contained, and you can think of them as\nsort of little mini-programs.",
    "start": "483610",
    "end": "489240"
  },
  {
    "text": "You feed in some input to\nthem, they do a little task, and then they give\nyou something back. They go off and do\ntheir thing and then",
    "start": "489240",
    "end": "495660"
  },
  {
    "text": "they give back a result. These modules can be used\nto break up your code,",
    "start": "495660",
    "end": "503720"
  },
  {
    "text": "and the important thing\nis that they're reusable. So you write a module once--\na little piece of code",
    "start": "503720",
    "end": "508880"
  },
  {
    "text": "that does something\nonce-- you debug it once, and then you can reuse it\nmany, many times in your code",
    "start": "508880",
    "end": "515419"
  },
  {
    "text": "with different inputs. Benefit of this is it\nkeeps your code organized",
    "start": "515419",
    "end": "521120"
  },
  {
    "start": "519000",
    "end": "698000"
  },
  {
    "text": "and it keeps your code coherent. So functions are going to be\nused to achieve decomposition",
    "start": "521120",
    "end": "527960"
  },
  {
    "text": "and to create\nstructure in our code. We're going to see functions\ntoday in this lecture, and in a few weeks, you're\ngoing to actually see--",
    "start": "527960",
    "end": "534320"
  },
  {
    "text": "when we talk about object\noriented programming-- how you can achieve\ndecomposition with classes.",
    "start": "534320",
    "end": "539600"
  },
  {
    "text": "And with classes you can\ncreate your own object types like adding some floats. You can create your own object\ntypes for whatever you want,",
    "start": "539600",
    "end": "546140"
  },
  {
    "text": "but that's later. OK so decomposition is creating\nstructure in your code.",
    "start": "546140",
    "end": "552480"
  },
  {
    "text": "And abstraction is the idea\nof suppressing details. So in the projector example,\nremember, abstraction",
    "start": "552480",
    "end": "557780"
  },
  {
    "text": "was you didn't need to know\nexactly how the projector worked in order to use it. And it's going to be the\nsame idea in programming.",
    "start": "557780",
    "end": "564500"
  },
  {
    "text": "So once you write a piece of\ncode that does a little task, you don't need to rewrite\nthat piece of code many times.",
    "start": "564500",
    "end": "570800"
  },
  {
    "text": "You've written it\nonce, and you write this thing called a function\nspecification for it, or a docstring.",
    "start": "570800",
    "end": "576790"
  },
  {
    "text": "And this is a piece of\ntext that tells anyone else who would want to use it\nin the future-- other people,",
    "start": "576790",
    "end": "582460"
  },
  {
    "text": "maybe yourself-- it tells\nthem how to use this function. What inputs does it take?",
    "start": "582460",
    "end": "588330"
  },
  {
    "text": "What's the type of the inputs? What is the function\nsupposed to do? And what is the output that\nyou're going to get out of it?",
    "start": "588330",
    "end": "594800"
  },
  {
    "text": "So they don't need to know\nexactly how you implemented the function. They just need to know\ninputs, what it does, what's the output.",
    "start": "594800",
    "end": "600620"
  },
  {
    "text": "Those three things. OK so these functions are\nthen reusable chunks of code.",
    "start": "600620",
    "end": "608040"
  },
  {
    "text": "And we'll see in a few\nexamples in today's lecture how to write some and\nhow to call functions.",
    "start": "608040",
    "end": "615424"
  },
  {
    "text": "And as we're going\nthrough today's code, I want you to sort of\nthink about functions with two different hats on.",
    "start": "615424",
    "end": "622339"
  },
  {
    "text": "The first hat is from someone\nwho's writing the function. So in the projector\nexample, someone",
    "start": "622340",
    "end": "627650"
  },
  {
    "text": "had to build the\nfirst projector. Someone had to know how to put\nall these components together.",
    "start": "627650",
    "end": "632940"
  },
  {
    "text": "So that's going to be\nyou writing a function, so you need to know how\nto make the function work.",
    "start": "632940",
    "end": "638600"
  },
  {
    "text": "And then the other hat\nis you as someone-- as a programmer-- who is\njust using the function.",
    "start": "638600",
    "end": "644209"
  },
  {
    "text": "You're assuming it's already\nbeen implemented correctly, and now you're just\nusing it to do something.",
    "start": "644210",
    "end": "650300"
  },
  {
    "text": " So these are some of the\nfunction characteristics",
    "start": "650300",
    "end": "657019"
  },
  {
    "text": "and we'll see an example\non the next slide. So a function's\ngoing to have a name. You have to call it something.",
    "start": "657019",
    "end": "662752"
  },
  {
    "text": "It's going to have\nsome parameters. These are the inputs\nto the function. You can have 0 inputs or\nas many as you'd like.",
    "start": "662752",
    "end": "669519"
  },
  {
    "text": "Function should\nhave a docstring. This is how you\nachieve abstraction. So it's optional, but\nhighly recommended,",
    "start": "669520",
    "end": "674965"
  },
  {
    "text": "and this is how you\ntell other people how to use your function. Function has a body, which\nis the meat and potatoes",
    "start": "674965",
    "end": "682540"
  },
  {
    "text": "of the function-- what it does. And a function's going\nto return something. It computes its thing and\nthen it gives back-- spits",
    "start": "682540",
    "end": "690209"
  },
  {
    "text": "back some answer. OK here's an example of\na function definition",
    "start": "690210",
    "end": "697660"
  },
  {
    "text": "and a function call. Function definition is up here.",
    "start": "697660",
    "end": "702970"
  },
  {
    "start": "698000",
    "end": "883000"
  },
  {
    "text": "I'll just draw it here. This is the function\ndefinition up here.",
    "start": "702970",
    "end": "710300"
  },
  {
    "text": "And this is the\nfunction call down here. So remember, someone has\nto write the function that",
    "start": "710300",
    "end": "717700"
  },
  {
    "text": "does something to begin with. So this is how you\nwrite the function. The first is\nwhoops-- the first is",
    "start": "717700",
    "end": "722770"
  },
  {
    "text": "going to be this def keyword. And def stands for--\nit tells Python",
    "start": "722770",
    "end": "730180"
  },
  {
    "text": "I'm going to define a function. Next is the name\nof the function.",
    "start": "730180",
    "end": "735670"
  },
  {
    "text": "In this case, I'm calling\nthe function is_even. And the function\nname should really",
    "start": "735670",
    "end": "741400"
  },
  {
    "text": "be something descriptive. Whereas someone who is\njust using this function or looking at it can\npretty much tell what",
    "start": "741400",
    "end": "747340"
  },
  {
    "text": "it's supposed to do without\ngoing a lot farther than that. They're just\nlooking at the name.",
    "start": "747340",
    "end": "753090"
  },
  {
    "text": " And then in parentheses you give\nit any parameters, also known",
    "start": "753090",
    "end": "759279"
  },
  {
    "text": "as arguments. And these parameters are\nthe inputs to the function. And then you do colon.",
    "start": "759280",
    "end": "764957"
  },
  {
    "text": " OK so this is the first line\nof the function definition.",
    "start": "764957",
    "end": "773235"
  },
  {
    "text": "And after this,\neverything that's going to be part of the function\nis going to be indented.",
    "start": "773236",
    "end": "778870"
  },
  {
    "text": "The next part is going\nto be the docstring, or the specification,\nand this is how we achieve abstraction\nusing functions.",
    "start": "778870",
    "end": "787209"
  },
  {
    "text": "Specification, or the docstring,\nstarts with triple quotes and ends with triple\nquotes, and you can sort of",
    "start": "787210",
    "end": "792480"
  },
  {
    "text": "think about this as\na multi-line comment. It's just going\nto be text that's going to be visible to\nwhoever uses the function,",
    "start": "792480",
    "end": "800320"
  },
  {
    "text": "and it should tell them\nthe following things: What are the inputs to the function?",
    "start": "800320",
    "end": "805460"
  },
  {
    "text": "What is the function\nsupposed to do generally? And what is the function\ngoing to give back",
    "start": "805460",
    "end": "810550"
  },
  {
    "text": "to whoever called it?  The next part is going to\nbe the body of the function.",
    "start": "810550",
    "end": "819209"
  },
  {
    "text": "We'll talk about what's\ninside it in the next slide.  And that's it.",
    "start": "819210",
    "end": "825130"
  },
  {
    "text": "That's all for the\nfunction definition. def blah, blah, blah, indented,\neverything inside the function.",
    "start": "825130",
    "end": "832740"
  },
  {
    "text": "So this is you writing\nthe function definition. Once the function\ndefinition's written,",
    "start": "832740",
    "end": "840209"
  },
  {
    "text": "you can call the function. And that's this part down here. And here, when\nyou call function,",
    "start": "840210",
    "end": "846420"
  },
  {
    "text": "you just say its name, and\nthen you give it parameters. And you give it\nas many parameters",
    "start": "846420",
    "end": "851700"
  },
  {
    "text": "as the function is expecting--\nin this case, only one parameter. ",
    "start": "851700",
    "end": "863000"
  },
  {
    "text": "So what's inside\nthe function body? You can put anything\ninside the function body. You remember,\nthink of a function",
    "start": "863000",
    "end": "868399"
  },
  {
    "text": "as sort of a small procedure\nor a little mini-program that does something. So you can do anything\ninside the function",
    "start": "868400",
    "end": "874040"
  },
  {
    "text": "that you can do in the regular\nprogram-- print things, do mathematical\noperations, and so on.",
    "start": "874040",
    "end": "880420"
  },
  {
    "text": "The last line is the most\nimportant part of the function though. And it's this return statement--\nthat's what we call it.",
    "start": "880420",
    "end": "887900"
  },
  {
    "start": "883000",
    "end": "945000"
  },
  {
    "text": "So it's a line of code\nthat starts with return, which is a keyword.",
    "start": "887900",
    "end": "892910"
  },
  {
    "text": "And then it's going\nto be some value. Notice this is an\nexpression here--",
    "start": "892910",
    "end": "898339"
  },
  {
    "text": "i%2 == 0 is an expression\nthat's going to evaluate to some value. ",
    "start": "898340",
    "end": "906330"
  },
  {
    "text": "And as long as this\npart is something that evaluates some value,\nit can be anything you want.",
    "start": "906330",
    "end": "913580"
  },
  {
    "text": "And this line here return\nsomething tells Python, OK after you have finished\nexecuting everything",
    "start": "913580",
    "end": "919040"
  },
  {
    "text": "inside the function, what\nvalue should I return?",
    "start": "919040",
    "end": "924279"
  },
  {
    "text": "And whoever called\nthe function is going to get back that\nvalue, and the function call itself will be\nreplaced by that value.",
    "start": "924280",
    "end": "932253"
  },
  {
    "text": "OK so let's look at an example. ",
    "start": "932253",
    "end": "939370"
  },
  {
    "text": "I'm going to introduce\nthe idea of scope now. And scope just means-- is\nanother word for environment.",
    "start": "939370",
    "end": "949830"
  },
  {
    "start": "945000",
    "end": "1014000"
  },
  {
    "text": "So if I told you that you\ncould think of functions as little mini-programs,\nthe scope of a function",
    "start": "949830",
    "end": "955610"
  },
  {
    "text": "is going to be a completely\nseparate environment than the environment\nof the main program.",
    "start": "955610",
    "end": "963470"
  },
  {
    "text": "So as soon as you\nmake a function call, behind the scenes\nwhat Python says is,",
    "start": "963470",
    "end": "968810"
  },
  {
    "text": "OK I'm in the main program\nbut I see a function call. I'm going to step out\nof this main program.",
    "start": "968810",
    "end": "974060"
  },
  {
    "text": "I'm going to go off into\nthis new environment. I'm going to create entirely\nnew set of variables that just",
    "start": "974060",
    "end": "979820"
  },
  {
    "text": "exist within this environment. I'm going to do\nsome computations.",
    "start": "979820",
    "end": "985240"
  },
  {
    "text": "When I see the return, I'm going\nto take this one return value. I'm going to exit\nthat environment,",
    "start": "985240",
    "end": "990310"
  },
  {
    "text": "and then I'm going to come\nback to the main program. So as you're entering\nfrom one scope to another,",
    "start": "990310",
    "end": "997150"
  },
  {
    "text": "you're sort of passing\nthese values back and forth. So when you're entering a scope,\nyou're passing a variable back",
    "start": "997150",
    "end": "1003990"
  },
  {
    "text": "into the function. And when the\nfunction's finished, you're passing a value\nback to whoever called it.",
    "start": "1003990",
    "end": "1012390"
  },
  {
    "text": "So once again, this top part\nis the function definition. And any arguments for\nthe function definition",
    "start": "1012390",
    "end": "1019200"
  },
  {
    "start": "1014000",
    "end": "1105000"
  },
  {
    "text": "are called formal parameters. And they're called\nformal parameters because notice they don't\nactually have a value yet.",
    "start": "1019200",
    "end": "1026250"
  },
  {
    "text": "In the function\ndefinition, you're sort of writing the function\nassuming that, in this case,",
    "start": "1026250",
    "end": "1031270"
  },
  {
    "text": "x is going to have some value. But you don't know\nwhat it is yet.",
    "start": "1031270",
    "end": "1036630"
  },
  {
    "text": "You only know what\nvalue x takes when you make a function call down here. ",
    "start": "1036630",
    "end": "1044420"
  },
  {
    "text": "So this is your\nfunction definition, and then later on in\nyour main program, you might define some\nvariable x is equal to 3.",
    "start": "1044420",
    "end": "1051500"
  },
  {
    "text": "And then you make\na function call. f of x here is\nyour function call.",
    "start": "1051500",
    "end": "1056740"
  },
  {
    "text": " And it says, OK I'm\ncalling f with the value 3,",
    "start": "1056740",
    "end": "1062490"
  },
  {
    "text": "because x takes the value 3,\nand then I'm going to map 3 into the function. ",
    "start": "1062490",
    "end": "1069160"
  },
  {
    "text": "The values that are passed\ninto the function call are called actual parameters,\nbecause they're going actually have a value.",
    "start": "1069160",
    "end": "1074710"
  },
  {
    "text": " So let's step through this\nprogram-- this small program--",
    "start": "1074710",
    "end": "1080340"
  },
  {
    "text": "and see what exactly happens\nbehind the scenes in the scope. And if you're just\nstarting to program,",
    "start": "1080340",
    "end": "1085670"
  },
  {
    "text": "I think it would be\nhighly valuable if you take a piece of paper as you're\ndoing some of these exercises",
    "start": "1085670",
    "end": "1091140"
  },
  {
    "text": "and you write down\nsomething similar to what I'm going to go through here. I think it'll help\na lot, and you'll",
    "start": "1091140",
    "end": "1096870"
  },
  {
    "text": "be able to see exactly\nstep-by-step what variables take what values and\nwhich scope you're in.",
    "start": "1096870",
    "end": "1103830"
  },
  {
    "text": "So here we go. When the program\nfirst starts, we're creating this global scope.",
    "start": "1103830",
    "end": "1109730"
  },
  {
    "start": "1105000",
    "end": "1268000"
  },
  {
    "text": "It's the main program scope. In the main program\nscope, the first thing",
    "start": "1109730",
    "end": "1115650"
  },
  {
    "text": "that Python is going\nto see is this part here-- def f of x and\nthen some stuff inside.",
    "start": "1115650",
    "end": "1124740"
  },
  {
    "text": "This tells Python I\nhave a function named x, but I don't care what's\ninside the code yet.",
    "start": "1124740",
    "end": "1132450"
  },
  {
    "text": "I don't care what's inside\nthe function definition yet, because I haven't\ncalled the function yet.",
    "start": "1132450",
    "end": "1139570"
  },
  {
    "text": "So to Python it's\njust some code just sitting in the global scope. ",
    "start": "1139570",
    "end": "1147480"
  },
  {
    "text": "So whenever you see\ndef, you're just putting some code in there. Then you go onto the next\nline-- x is equal to 3.",
    "start": "1147480",
    "end": "1153390"
  },
  {
    "text": "So in the global scope, you now\nhave also a variable x is 3. And then the next\nline-- z is equal to f",
    "start": "1153390",
    "end": "1160230"
  },
  {
    "text": "of x is a function call. As soon as you hit\na function call, you create a new scope--\na new environment.",
    "start": "1160230",
    "end": "1168030"
  },
  {
    "text": "So we're temporarily leaving\nthe global scope and sort of portaling into a\nnew scope, where we're",
    "start": "1168030",
    "end": "1175740"
  },
  {
    "text": "going to try to figure out what\nthis function's going to do and what it's going to return.",
    "start": "1175740",
    "end": "1181120"
  },
  {
    "text": "So the first thing you do\nis you map the parameters. So x here-- I'm\ncalling f of x with 3--",
    "start": "1181120",
    "end": "1188935"
  },
  {
    "text": "so first thing I'm\ndoing is I'm mapping every one of the parameters in\nthe definition to their values. So first thing I'm doing\nis x gets the value 3.",
    "start": "1188936",
    "end": "1196182"
  },
  {
    "text": " Next line here is x\nis equal to x plus 1.",
    "start": "1196182",
    "end": "1203659"
  },
  {
    "text": "So we're still inside\nthe function call f, so x gets the value 4. ",
    "start": "1203660",
    "end": "1210260"
  },
  {
    "text": "We're printing this and\nthen we're returning x. So in the scope of\nf, x is equal to 4,",
    "start": "1210260",
    "end": "1216179"
  },
  {
    "text": "so we're returning\nthat value back to whoever called it,\nwhich was this function call within the global scope.",
    "start": "1216180",
    "end": "1222990"
  },
  {
    "text": "So this part right here-- f\nof x, which was the function call-- gets replaced with 4.",
    "start": "1222990",
    "end": "1228590"
  },
  {
    "text": "So inside the main\nprogram, z is equal to 4.",
    "start": "1228590",
    "end": "1233779"
  },
  {
    "text": "And that's how we pass\nparameters into the function, and we got a parameter\nback from the function.",
    "start": "1233780",
    "end": "1239380"
  },
  {
    "text": "As soon as the function\nreturns something, the scope that you were in\nfor the function gets erased.",
    "start": "1239380",
    "end": "1245350"
  },
  {
    "text": "You forget about every variable\nthat was created in there, delete that scope, and\nyou're back to wherever",
    "start": "1245350",
    "end": "1250810"
  },
  {
    "text": "you started calling it. One warning though. So what happens if there's\nno return statement?",
    "start": "1250810",
    "end": "1258520"
  },
  {
    "text": "I said that every function\nhas to return something. If you don't explicitly\nput a return statement,",
    "start": "1258520",
    "end": "1265210"
  },
  {
    "text": "Python is going to\nadd one for you. You don't have to do this. And it's going to actually\nhave return None-- N-o-n-e.",
    "start": "1265210",
    "end": "1274990"
  },
  {
    "start": "1268000",
    "end": "1585000"
  },
  {
    "text": "And None is the\nspecial type-- None is the value for a special\ntype called NoneType,",
    "start": "1274990",
    "end": "1282510"
  },
  {
    "text": "and it represents the\nabsence of a value. ",
    "start": "1282510",
    "end": "1288460"
  },
  {
    "text": "What's that? Not a string. Not a-- None is not a string.",
    "start": "1288460",
    "end": "1293520"
  },
  {
    "text": "None is not a string, exactly. It's a special type. ",
    "start": "1293520",
    "end": "1300070"
  },
  {
    "text": "OK so before we go on, I wanted\nto go through a small exercise in Spyder just to show\nyou the difference",
    "start": "1300070",
    "end": "1306930"
  },
  {
    "text": "that None and printing\nand returning makes. So here are two\nfunctions that I wrote.",
    "start": "1306930",
    "end": "1313360"
  },
  {
    "text": "One is is_even_with_return. That's its name, so\npretty descriptive.",
    "start": "1313360",
    "end": "1318790"
  },
  {
    "text": "It's pretty much the same\ncode we saw in the slides. It just has this extra\nlittle print thing.",
    "start": "1318790",
    "end": "1324800"
  },
  {
    "text": "It gets the remainder\nwhen i is divided by 2.",
    "start": "1324800",
    "end": "1329900"
  },
  {
    "text": "And it returns whether the\nremainder is equal to 0. So it'll either return a\ntrue or a false-- a Boolean.",
    "start": "1329900",
    "end": "1338320"
  },
  {
    "text": "OK so my function call is this:\nI'm saying is_even_with_return",
    "start": "1338320",
    "end": "1343490"
  },
  {
    "text": "with a value 3. When I make this\nfunction call, this 3",
    "start": "1343490",
    "end": "1349310"
  },
  {
    "text": "gets mapped into here--\nthis variable here-- so i is equal to 3.",
    "start": "1349310",
    "end": "1355190"
  },
  {
    "text": "I'm going to print with\nreturn, and then I'm going to say remainder\nis equal to 3 percent 2, which comes out to value 1,\nbecause there's a remainder 1.",
    "start": "1355190",
    "end": "1363890"
  },
  {
    "text": "And I'm going to\nreturn whether 1 is equal to 0, which is false. So this line here\nreturns false, but am I",
    "start": "1363890",
    "end": "1371660"
  },
  {
    "text": "doing anything with the false? Not really. It's just sort of\nsitting in the code here.",
    "start": "1371660",
    "end": "1377510"
  },
  {
    "text": "So this gets evaluated to false.",
    "start": "1377510",
    "end": "1382970"
  },
  {
    "text": "I'm not printing it. I'm not doing any\noperations with it. It's just sitting there. So it won't show up anywhere. If I want the result\nto show up somewhere,",
    "start": "1382970",
    "end": "1389360"
  },
  {
    "text": "then I have to print it. So that's what this\nnext line is doing. ",
    "start": "1389360",
    "end": "1395540"
  },
  {
    "text": "So that one should\nbe straightforward. is_even_without_return's\na little bit trickier, but not too bad.",
    "start": "1395540",
    "end": "1401600"
  },
  {
    "text": "I have print,\nwithout_return inside here, and then I'm going\nto get a remainder is",
    "start": "1401600",
    "end": "1408480"
  },
  {
    "text": "equal to i percent 2. And notice that I'm not--\nI don't have any return. So implicitly, Python's going\nto add a return None for me,",
    "start": "1408480",
    "end": "1416100"
  },
  {
    "text": "like that. You don't have to add it.  So when I make the\nfunction call here,",
    "start": "1416100",
    "end": "1422380"
  },
  {
    "text": "it's going to do the same thing,\nexcept that return in this case is not going to be a Boolean. It's going to be\nthis special None.",
    "start": "1422380",
    "end": "1429250"
  },
  {
    "text": "So this is going to\nget evaluated to None.",
    "start": "1429250",
    "end": "1434890"
  },
  {
    "text": "Again I'm not printing it out. It's just sitting there. If I were to print out\nthe result of that,",
    "start": "1434890",
    "end": "1443670"
  },
  {
    "text": "you'd be printing out this\nvalue None, which if I run it, you'll see here it just\nprints it out right there.",
    "start": "1443670",
    "end": "1451769"
  },
  {
    "text": "So as you're doing your next\np set, it's about functions and you're seeing these Nones\npopping out in some places.",
    "start": "1451770",
    "end": "1458370"
  },
  {
    "text": "Check to make sure that you've\nactually returned something, as opposed to just printed\nsomething inside the function",
    "start": "1458370",
    "end": "1464260"
  },
  {
    "text": "like we did here. ",
    "start": "1464260",
    "end": "1469351"
  },
  {
    "text": "All right so that's\nthe difference. And the last thing I want to\nmention about this is_even function is how\nuseful it can be.",
    "start": "1469352",
    "end": "1476679"
  },
  {
    "text": "So notice this is the\nfunction as in the slides, and once you write the\nfunction once, you can use it",
    "start": "1476680",
    "end": "1486309"
  },
  {
    "text": "many, many times in your code. So here I'm using\nthe function is_even",
    "start": "1486310",
    "end": "1491740"
  },
  {
    "text": "to print the numbers\nbetween 0 and 19, including and whether the\nnumber is even or odd.",
    "start": "1491740",
    "end": "1497900"
  },
  {
    "text": "So notice this\npiece of code here, once I've written\nthis function is_even, looks really, really nice right?",
    "start": "1497900",
    "end": "1505270"
  },
  {
    "text": "I have for all the numbers in\nthis range if the number i is",
    "start": "1505270",
    "end": "1511280"
  },
  {
    "text": "even, this is going to\nreturn a true or false",
    "start": "1511280",
    "end": "1516710"
  },
  {
    "text": "for all the numbers\n0, 1, 2, 3, 4. If it's true, then I'm\ngoing to print out even,",
    "start": "1516710",
    "end": "1522320"
  },
  {
    "text": "and otherwise I'm\ngoing to print out odd. So if I run this,\nit's going to do this. 0 even, 1 odd, 2\neven, and so on.",
    "start": "1522320",
    "end": "1529730"
  },
  {
    "text": "So notice using functions makes\nmy code really nice looking. If I wasn't using\nfunctions, I'd have",
    "start": "1529730",
    "end": "1535700"
  },
  {
    "text": "to put these two lines\nsomewhere inside here",
    "start": "1535700",
    "end": "1540795"
  },
  {
    "text": "and it would look a\nlittle bit messier. ",
    "start": "1540796",
    "end": "1548220"
  },
  {
    "text": "So I've said this\nmaybe once or twice before: in Python\neverything is an object.",
    "start": "1548220",
    "end": "1553450"
  },
  {
    "text": " Might not have meant\nanything back then,",
    "start": "1553450",
    "end": "1558910"
  },
  {
    "text": "but I think you're\ngoing to see what I mean using this particular example.",
    "start": "1558910",
    "end": "1564470"
  },
  {
    "text": "So if in Python everything's an\nobject-- integers are objects, floats are objects, even\nfunctions are objects.",
    "start": "1564470",
    "end": "1573159"
  },
  {
    "text": "So as you can pass objects\nas parameters back and forth as function parameters, you\ncan also pass other functions",
    "start": "1573160",
    "end": "1581140"
  },
  {
    "text": "as parameters. Let's see what this means. So we have three function\ndefinitions here-- func_a,",
    "start": "1581140",
    "end": "1589420"
  },
  {
    "start": "1585000",
    "end": "1856000"
  },
  {
    "text": "func_b, and func_c. And then I have three lines of\ncode here in my main program.",
    "start": "1589420",
    "end": "1596240"
  },
  {
    "text": "So I have one called a\nfunc_a, one called a func_b, and one call to func_c.",
    "start": "1596240",
    "end": "1601970"
  },
  {
    "text": "Let's trace through, just\nlike in the previous example, and see what exactly happens. First thing I create\nis my global scope.",
    "start": "1601970",
    "end": "1610010"
  },
  {
    "text": "And I have three\nfunction definitions. Again I don't care\nwhat's in the code yet, because I haven't\ncalled the functions yet.",
    "start": "1610010",
    "end": "1616160"
  },
  {
    "text": "Python just knows there's these\nfunctions with these names that contain some code. ",
    "start": "1616160",
    "end": "1622575"
  },
  {
    "text": "After these definitions, I\ncome to this line here-- print func_a. As soon as I make\na function call,",
    "start": "1622576",
    "end": "1628125"
  },
  {
    "text": "I'm going to create\na new scope and I'm going to hop into there. Inside func_a, I'm going to go\nand look at what func_a does.",
    "start": "1628125",
    "end": "1637414"
  },
  {
    "text": "It doesn't take\nin the parameters, it just prints out\nthis message here.",
    "start": "1637415",
    "end": "1643309"
  },
  {
    "text": "And then it leaves; it's done. There's no return,\nso we return None.",
    "start": "1643310",
    "end": "1650460"
  },
  {
    "text": "So func_a returns\nNone to whoever called it, which\nwas that line there,",
    "start": "1650460",
    "end": "1656430"
  },
  {
    "text": "so that is going to be None. ",
    "start": "1656430",
    "end": "1662950"
  },
  {
    "text": "Next line. This one right here-- print\n5 plus some function call.",
    "start": "1662950",
    "end": "1668430"
  },
  {
    "text": "Again I'm going to hop\ninto func_b's scope and see what to do there. So first I'm going\nto map my parameters.",
    "start": "1668430",
    "end": "1675640"
  },
  {
    "text": "So 2-- whoops-- 2\ngets mapped to y. So inside func_b's scope, y\nis going to get the value 2.",
    "start": "1675640",
    "end": "1683275"
  },
  {
    "text": "That's the very first\nthing I'm doing-- mapping all the parameters. Then I'm going to\nprint this thing here,",
    "start": "1683275",
    "end": "1688650"
  },
  {
    "text": "and then I'm going to return y. So inside func_b,\ny has the value 2, and I'm returning 2 back\nto whoever called me.",
    "start": "1688650",
    "end": "1695540"
  },
  {
    "text": " So this is the value\n2 and I'm going",
    "start": "1695540",
    "end": "1702590"
  },
  {
    "text": "to print 5 plus 2, which is 7.  Last one. This is the trickiest.",
    "start": "1702590",
    "end": "1708750"
  },
  {
    "text": "Oop, that popped up. If you think you've got\nit, try that exercise. But otherwise follow along.",
    "start": "1708750",
    "end": "1714690"
  },
  {
    "text": "print func_c func_a. So I see that I am going\nto enter func_c's scope.",
    "start": "1714690",
    "end": "1725100"
  },
  {
    "text": "So I'm going to look\nat what func_c does. First thing I do is I'm\nmapping all the parameters.",
    "start": "1725100",
    "end": "1730640"
  },
  {
    "text": "Don't even worry about\nthe fact that this is a function right now. Just pretend it's\nx or something.",
    "start": "1730640",
    "end": "1736850"
  },
  {
    "text": "So you say func_a\nis going to get mapped to the variable\nz inside func_c.",
    "start": "1736850",
    "end": "1743390"
  },
  {
    "text": "So z is func_c. Just mapping parameters\nfrom actual to formal.",
    "start": "1743390",
    "end": "1750190"
  },
  {
    "text": "Then what do we\ndo inside func_c? We print out inside func_c,\nand then we return z.",
    "start": "1750190",
    "end": "1762400"
  },
  {
    "text": "This is the cool part. Inside func_c, z is func_a.",
    "start": "1762400",
    "end": "1769170"
  },
  {
    "text": "So if you replace z\nwith func_a, this here becomes return func_a\nopen close parentheses.",
    "start": "1769170",
    "end": "1776840"
  },
  {
    "text": "Look familiar? We did that function\ncall right there right? So that's just\nanother function call.",
    "start": "1776840",
    "end": "1782520"
  },
  {
    "start": "1782520",
    "end": "1788222"
  },
  {
    "text": "So with that being\nanother function call, you're going to\ncreate another scope, and you're going to\npop into that one.",
    "start": "1788222",
    "end": "1793500"
  },
  {
    "text": "So we're one, two, I\nguess two scopes deep, and we're trying to figure\nout where we're going.",
    "start": "1793500",
    "end": "1799480"
  },
  {
    "text": "So func_a's scope is\ngoing to be up here. So what does func_a do? It just prints out this,\nand it returns None.",
    "start": "1799480",
    "end": "1806700"
  },
  {
    "text": "So we're going to\nreturn None to whoever called us, which was func_c.",
    "start": "1806700",
    "end": "1812210"
  },
  {
    "text": "So this line here\nbecomes return None. ",
    "start": "1812210",
    "end": "1818840"
  },
  {
    "text": "And so this line here\nis going to return None to whoever called it, which\nwas this line down here.",
    "start": "1818840",
    "end": "1825428"
  },
  {
    "text": "Oops, I didn't mean\nto cross that out. So that line here is\ngoing to print None.",
    "start": "1825428",
    "end": "1832540"
  },
  {
    "text": "So if you just go\nstep-by-step, it shouldn't be too\nbad to try to map",
    "start": "1832540",
    "end": "1837760"
  },
  {
    "text": "what happens with variable\nnames and formal parameters and actual parameters.",
    "start": "1837760",
    "end": "1843010"
  },
  {
    "text": "That's why I highly recommend\npieces of paper and pens.",
    "start": "1843010",
    "end": "1848020"
  },
  {
    "text": "One last thing I want\nto mention about scope before we do another example.",
    "start": "1848020",
    "end": "1853789"
  },
  {
    "text": "So there are three\nsort of situations you might find yourself in. The first one is probably\nthe most typical,",
    "start": "1853790",
    "end": "1861870"
  },
  {
    "start": "1856000",
    "end": "2058000"
  },
  {
    "text": "and this is when you\ndefine a function. And it's using a\nvariable named x",
    "start": "1861870",
    "end": "1867390"
  },
  {
    "text": "in this case that's also\ndefined outside of the function. And that doesn't matter\nbecause of the idea of scopes.",
    "start": "1867390",
    "end": "1876480"
  },
  {
    "text": "So inside the global scope,\nyou can have variables x. When you're inside\na different scope, you can have whatever\nvariable names you want.",
    "start": "1876480",
    "end": "1883830"
  },
  {
    "text": "And when you're\ninside that scope, Python's going to use\nthose variable names, so they don't interfere\nwith each other at all.",
    "start": "1883830",
    "end": "1890530"
  },
  {
    "text": "So in this example, I've defined\na variable x is equal to 1, and then I incremented, and that\ndoesn't interfere with the fact",
    "start": "1890530",
    "end": "1896940"
  },
  {
    "text": "that we have a\nvariable x outside. This one's a little\nbit trickier.",
    "start": "1896940",
    "end": "1903750"
  },
  {
    "text": "I define this function\ng, and all g does",
    "start": "1903750",
    "end": "1909800"
  },
  {
    "text": "is access a variable x. But notice inside g, I've\nnever actually declared",
    "start": "1909800",
    "end": "1915799"
  },
  {
    "text": "or initialized a variable x. In this f, I said\nx is equal to 1.",
    "start": "1915800",
    "end": "1921450"
  },
  {
    "text": "But in here, I'm\njust sort of using x. So this does not\ngive you an error.",
    "start": "1921450",
    "end": "1927890"
  },
  {
    "text": "In fact it's OK for you\nto do this in Python. Python says, OK\nI'm in this scope, but I don't have\na variable named",
    "start": "1927890",
    "end": "1933660"
  },
  {
    "text": "x, so let me just go into the\nscope of whoever called me. So I'm going to just\ntemporarily hop out of the scope",
    "start": "1933660",
    "end": "1941050"
  },
  {
    "text": "and see is there\nvariable x outside of me? And it'll find this\nvariable x here,",
    "start": "1941050",
    "end": "1946390"
  },
  {
    "text": "and it's going to\nprint out its values. So that's OK. ",
    "start": "1946390",
    "end": "1953420"
  },
  {
    "text": "This last example here\nis actually not allowed in Python-- similar to\nthis one-- except that I'm",
    "start": "1953420",
    "end": "1959390"
  },
  {
    "text": "trying to increment\na value of x, but then I'm also\ntrying to reassign it",
    "start": "1959390",
    "end": "1965150"
  },
  {
    "text": "to the same value of x. The problem with that is I\nnever actually initialized",
    "start": "1965150",
    "end": "1970520"
  },
  {
    "text": "x inside h. So if I said-- if inside\nh, I said x is equal to 1,",
    "start": "1970520",
    "end": "1978230"
  },
  {
    "text": "and then I did x\nplus equals to 1, then it would be this\nexample here-- f of y.",
    "start": "1978230",
    "end": "1983649"
  },
  {
    "text": "But I didn't do that. I just tried to access\nx and then incremented",
    "start": "1983650",
    "end": "1990580"
  },
  {
    "text": "and then tried to reassign it. And that's actually\nnot allowed in Python.",
    "start": "1990580",
    "end": "1995740"
  },
  {
    "text": "There is a way around it\nusing global variables. But it's actually frowned\nupon to use global variables,",
    "start": "1995740",
    "end": "2004000"
  },
  {
    "text": "though global variables\nare part of the readings for this lecture.",
    "start": "2004000",
    "end": "2009374"
  },
  {
    "text": "And the reason why\nit's not a great idea to use global variables is\nbecause global variables",
    "start": "2009374",
    "end": "2014700"
  },
  {
    "text": "sort of give you this\nloophole around scopes,",
    "start": "2014700",
    "end": "2020340"
  },
  {
    "text": "so it allows you to write code\nthat can become very messy.",
    "start": "2020340",
    "end": "2025529"
  },
  {
    "text": "So using global variables,\nyou can be inside a function and then modify a\nvariable that's defined",
    "start": "2025530",
    "end": "2030960"
  },
  {
    "text": "outside of your function. And that sort of defeats\nthe purpose of functions and using them in writing\nthese coherent modules that",
    "start": "2030960",
    "end": "2039370"
  },
  {
    "text": "are separate.  That said, it might sometimes be\nuseful to use global variables,",
    "start": "2039370",
    "end": "2047880"
  },
  {
    "text": "as you'll see in a\ncouple lectures from now. ",
    "start": "2047880",
    "end": "2053110"
  },
  {
    "text": "OK cool. So let's go on to the\nlast scope example.",
    "start": "2053110",
    "end": "2059449"
  },
  {
    "start": "2058000",
    "end": "2143000"
  },
  {
    "text": "OK this slide is here,\nand notice I've bolded, underlined, and italicized\nthe Python Tutor,",
    "start": "2059449",
    "end": "2065480"
  },
  {
    "text": "because I find it\nextremely helpful. So the Python Tutor--\nas I've mentioned in one of the assignments--\nit was actually developed",
    "start": "2065480",
    "end": "2072199"
  },
  {
    "text": "by a grad student here,\nor post-grad student slash post-doc here. And it allows you to go\nthrough Python, paste a code,",
    "start": "2072199",
    "end": "2081888"
  },
  {
    "text": "go through it step-by-step. Like with each\niteration, it'll show you exactly what values\neach variable has,",
    "start": "2081889",
    "end": "2088760"
  },
  {
    "text": "what scope you're in,\nwhen scopes get created, when scopes get destroyed,\nvariables within each scope.",
    "start": "2088760",
    "end": "2095760"
  },
  {
    "text": "So pretty much\nevery single detail you need to sort of\nunderstand functions. As we're starting to-- you can\nsee we've had couple questions,",
    "start": "2095760",
    "end": "2102990"
  },
  {
    "text": "and these were great questions. So if you're still trying to\nunderstand what's going on, I would highly suggest\nyou take a piece of code",
    "start": "2102990",
    "end": "2110210"
  },
  {
    "text": "and just run it in\nthe Python Tutor and you should be able to\nsee exactly what happens, in sort of a similar way\nthat I've drawn my diagrams.",
    "start": "2110210",
    "end": "2119900"
  },
  {
    "text": "In all of the codes for\nthis particular lecture, I've put links to\nthe Python Tutor",
    "start": "2119900",
    "end": "2125617"
  },
  {
    "text": "for each one of those exercises. So you can just copy\nand paste those, and it'll automatically\npopulate it",
    "start": "2125617",
    "end": "2130730"
  },
  {
    "text": "with that particular\nexample, so you just have to click, step, step, step. OK so having made my plug for\nPython Tutor, let's go on.",
    "start": "2130730",
    "end": "2141450"
  },
  {
    "text": "OK so here's an example. It's going to show\ncouple things.",
    "start": "2141450",
    "end": "2147350"
  },
  {
    "start": "2143000",
    "end": "2468000"
  },
  {
    "text": "One is print versus return,\nand also this idea of you",
    "start": "2147350",
    "end": "2153910"
  },
  {
    "text": "can nest functions. So just like you could\nhave nested loops, nested conditionals-- you\ncan also nest functions",
    "start": "2153910",
    "end": "2159700"
  },
  {
    "text": "within functions. So let's draw some diagrams\njust like before of the scopes.",
    "start": "2159700",
    "end": "2167320"
  },
  {
    "text": "First thing we're going to\ndo is when we have a program, we're going to create\nthe global scope and we're going to add\nevery variable that we have.",
    "start": "2167320",
    "end": "2174725"
  },
  {
    "text": "And then when we\nreach a function call, we're going to do\nsomething about that. So the first thing\nin the global scope",
    "start": "2174725",
    "end": "2181240"
  },
  {
    "text": "is this function definition. Again in my global scope,\nI just have g as some code",
    "start": "2181240",
    "end": "2188740"
  },
  {
    "text": "because I have\nnot called it yet. I only go inside a function\nwhen I make a function call.",
    "start": "2188740",
    "end": "2194660"
  },
  {
    "text": "So g contains some code. So we're done with\n75% of that code.",
    "start": "2194660",
    "end": "2201820"
  },
  {
    "text": "Next line is x is equal to 3. So I'm making x be a variable\ninside my global scope",
    "start": "2201820",
    "end": "2208329"
  },
  {
    "text": "with value 3. And then I have this\nz is equal to g of x.",
    "start": "2208330",
    "end": "2214090"
  },
  {
    "text": "This is a function call. When I see a function call, I'm\ngoing to create a new scope.",
    "start": "2214090",
    "end": "2219530"
  },
  {
    "text": "So here is the scope of g.  With the scope of g, I'm mapping\nvariables to actual parameters",
    "start": "2219530",
    "end": "2231650"
  },
  {
    "text": "to formal parameters. So the first thing\nI'm doing is I'm saying inside g what is the\nvalue of actual parameter x?",
    "start": "2231650",
    "end": "2239450"
  },
  {
    "text": "And x is going to be the\nvalue 3, because I've called g of x with x is equal to 3.",
    "start": "2239450",
    "end": "2245289"
  },
  {
    "text": " Next, what I see\ninside this function--",
    "start": "2245290",
    "end": "2253630"
  },
  {
    "text": "so this is the inside of the\nfunction-- is this bit here. ",
    "start": "2253630",
    "end": "2260390"
  },
  {
    "text": "It's another\nfunction definition. Again since I'm just\ndefining the function and I'm not calling it, all\nPython sees is h is some code.",
    "start": "2260390",
    "end": "2271839"
  },
  {
    "text": "I haven't called\nthe function h yet, because I'm just defining\nit here with def.",
    "start": "2271840",
    "end": "2277420"
  },
  {
    "text": "So that finishes this part here. The next line is x\nis equal to x plus 1.",
    "start": "2277420",
    "end": "2284630"
  },
  {
    "text": "So inside the scope of g,\nI'm incrementing x to be 4. Then I'm printing out this line.",
    "start": "2284630",
    "end": "2291930"
  },
  {
    "text": "And then I've reached here-- h. This is actually a function\ncall, and I'm calling h.",
    "start": "2291930",
    "end": "2299734"
  },
  {
    "text": "As soon as I make\na function call, I'm creating another scope. So I'm temporarily going\nout of the scope of g",
    "start": "2299734",
    "end": "2305660"
  },
  {
    "text": "and going into the scope of h. So Python knows that\nh contains some code,",
    "start": "2305660",
    "end": "2311320"
  },
  {
    "text": "and now I can go inside h\nand do whatever I need to do. So the first-- so h doesn't\nhave any parameters,",
    "start": "2311320",
    "end": "2318090"
  },
  {
    "text": "so I don't need to populate\nanything like that in there. h does define a variable called\nx, which is abc; it's a string.",
    "start": "2318090",
    "end": "2328820"
  },
  {
    "text": "And then that's all h does. What does it return?",
    "start": "2328820",
    "end": "2334155"
  },
  {
    "text": " None. I heard murmuring,\nbut I think None",
    "start": "2334155",
    "end": "2339690"
  },
  {
    "text": "was what you guys were saying. So since there's no\nreturn statement, h is going to return None.",
    "start": "2339690",
    "end": "2346809"
  },
  {
    "text": "So h returns None. Back to whoever called it,\nwhich was this code inside g.",
    "start": "2346810",
    "end": "2353789"
  },
  {
    "text": "So that gets\nreplaced with None-- the thing that I've--\nthis circled red h here.",
    "start": "2353790",
    "end": "2359820"
  },
  {
    "text": "As soon as h\nreturns, we're going to get rid of that scope--\nall the variables created within it-- and\nwe're done with h.",
    "start": "2359820",
    "end": "2367530"
  },
  {
    "text": "So now we're back into g. And we just finished\nexecuting this and this got replaced with None.",
    "start": "2367530",
    "end": "2374860"
  },
  {
    "text": "We're not printing it out, so\nthis doesn't show up anywhere; it's just there.",
    "start": "2374860",
    "end": "2381156"
  },
  {
    "text": "So we're finished\nwith that line. And the next line is return x. ",
    "start": "2381156",
    "end": "2386990"
  },
  {
    "text": "So x inside g is 4,\nso 4 gets returned back to whoever called it, which\nwas in the global scope here.",
    "start": "2386990",
    "end": "2394970"
  },
  {
    "text": "So this gets replaced with 4.  So once we've returned x,\nwe've completely exited out",
    "start": "2394970",
    "end": "2403200"
  },
  {
    "text": "of the scope of g,\nand we've come back to whoever called us,\nwhich was global scope",
    "start": "2403200",
    "end": "2410520"
  },
  {
    "text": "and we've replaced\nz is equal to g of x and that completely\ngot replaced with 4-- the returned value. ",
    "start": "2410520",
    "end": "2418060"
  },
  {
    "text": "So that's sort of\nshowing nested functions. All right just circling back\nto decomposition-abstraction.",
    "start": "2418060",
    "end": "2425790"
  },
  {
    "text": "This is the last slide. You can see if you look\nat the code associated",
    "start": "2425790",
    "end": "2430910"
  },
  {
    "text": "with today's lecture, there\nare some other examples where you can see\njust how powerful it is to use functions.",
    "start": "2430910",
    "end": "2436160"
  },
  {
    "text": "And you can write really\nclean and simple code if you define your own functions\nand then just use them later.",
    "start": "2436160",
    "end": "2443130"
  },
  {
    "text": "And the beauty of defining\nyour own functions that you can use\nmultiple times later is you only have to debug\nthe function once right?",
    "start": "2443130",
    "end": "2449210"
  },
  {
    "text": "I know debugging is not\nyour favorite thing, but you only have to\ndebug this one thing once, and then you can know that\nit's right and it works well,",
    "start": "2449210",
    "end": "2455620"
  },
  {
    "text": "and you can just use\nit multiple times. All right thanks everyone.",
    "start": "2455620",
    "end": "2460990"
  },
  {
    "start": "2460990",
    "end": "2468326"
  }
]