[
  {
    "text": "We've been designing our processing pipelines\nto have all the stages operate in lock step,",
    "start": "1099",
    "end": "6540"
  },
  {
    "text": "choosing the clock period to accommodate the\nworst-case processing time over all the stages.",
    "start": "6540",
    "end": "12150"
  },
  {
    "text": "This is what we'd call a synchronous, globally\ntimed system.",
    "start": "12150",
    "end": "16830"
  },
  {
    "text": "But what if there are data dependencies in\nthe processing time, i.e., if for some data",
    "start": "16830",
    "end": "21180"
  },
  {
    "text": "inputs a particular processing stage might\nbe able to produce its output in a shorter",
    "start": "21180",
    "end": "25980"
  },
  {
    "text": "time?",
    "start": "25980",
    "end": "27170"
  },
  {
    "text": "Can we design a system that could take advantage\nof that opportunity to increase throughput?",
    "start": "27170",
    "end": "32480"
  },
  {
    "text": "One alternative is to continue to use a single\nsystem clock, but for each stage to signal",
    "start": "32480",
    "end": "37159"
  },
  {
    "text": "when it's ready for a new input and when it\nhas a new output ready for the next stage.",
    "start": "37159",
    "end": "42950"
  },
  {
    "text": "It's fun to design a simple 2-signal handshake\nprotocol to reliably transfer data from one",
    "start": "42950",
    "end": "48089"
  },
  {
    "text": "stage to the next.",
    "start": "48089",
    "end": "50219"
  },
  {
    "text": "The upstream stage produces a signal called\nHERE-IS-X to indicate that is has new data",
    "start": "50219",
    "end": "55309"
  },
  {
    "text": "for the downstream stage.",
    "start": "55309",
    "end": "57179"
  },
  {
    "text": "And the downstream stage produces a signal\ncalled GOT-X to indicate when it is willing",
    "start": "57180",
    "end": "61559"
  },
  {
    "text": "to consume data.",
    "start": "61559",
    "end": "62788"
  },
  {
    "text": "It's a synchronous system so the signal values\nare only examined on the rising edge of the",
    "start": "62789",
    "end": "68280"
  },
  {
    "text": "clock.",
    "start": "68280",
    "end": "70540"
  },
  {
    "text": "The handshake protocol works as follows:\nthe upstream stage asserts HERE-IS-X if it",
    "start": "70540",
    "end": "76220"
  },
  {
    "text": "will have a new output value available at\nthe next rising edge of the clock.",
    "start": "76220",
    "end": "81420"
  },
  {
    "text": "The downstream stage asserts GOT-X if it will\ngrab the next output at the rising edge of",
    "start": "81420",
    "end": "86420"
  },
  {
    "text": "the clock.",
    "start": "86420",
    "end": "87840"
  },
  {
    "text": "Both stages look at the signals on the rising\nedge of the clock to decide what to do next.",
    "start": "87840",
    "end": "92840"
  },
  {
    "text": "If both stages see that HERE-IS-X and GOT-X\nare asserted at the same clock edge, the handshake",
    "start": "92840",
    "end": "98969"
  },
  {
    "text": "is complete and the data transfer happens\nat that clock edge.",
    "start": "98970",
    "end": "104030"
  },
  {
    "text": "Either stage can delay a transfer if they\nare still working on producing the next output",
    "start": "104030",
    "end": "108289"
  },
  {
    "text": "or consuming the previous input.",
    "start": "108289",
    "end": "110659"
  },
  {
    "text": "It's possible, although considerably more\ndifficult, to build a clock-free asynchronous",
    "start": "110659",
    "end": "116548"
  },
  {
    "text": "self-timed system that uses a similar handshake\nprotocol.",
    "start": "116549",
    "end": "120969"
  },
  {
    "text": "The handshake involves four phases.",
    "start": "120969",
    "end": "123729"
  },
  {
    "text": "In phase 1, when the upstream stage has a\nnew output and GOT-X is deasserted, it asserts",
    "start": "123729",
    "end": "129940"
  },
  {
    "text": "its HERE-IS-X signal and then waits to see\nthe downstream stage's reply on the GOT-X",
    "start": "129940",
    "end": "135820"
  },
  {
    "text": "signal.",
    "start": "135820",
    "end": "137840"
  },
  {
    "text": "In phase 2, the downstream stage, seeing that\nHERE-IS-X is asserted, asserts GOT-X when",
    "start": "137840",
    "end": "144610"
  },
  {
    "text": "it has consumed the available input.",
    "start": "144610",
    "end": "146840"
  },
  {
    "text": "In phase 3, the downstream stage waits to\nsee the HERE-IS-X go low, indicating that",
    "start": "146840",
    "end": "153610"
  },
  {
    "text": "the upstream stage has successfully received\nthe GOT-X signal.",
    "start": "153610",
    "end": "158590"
  },
  {
    "text": "In phase 4, once HERE-IS-X is deasserted,\nthe downstream stage deasserts GOT-X and the",
    "start": "158590",
    "end": "164860"
  },
  {
    "text": "transfer handshake is ready to begin again.",
    "start": "164860",
    "end": "168670"
  },
  {
    "text": "Note that the upstream stage waits until it\nsees the GOT-X deasserted before starting",
    "start": "168670",
    "end": "173230"
  },
  {
    "text": "the next handshake.",
    "start": "173230",
    "end": "174810"
  },
  {
    "text": "The timing of the system is based on the transitions\nof the handshake signals, which can happen",
    "start": "174810",
    "end": "179440"
  },
  {
    "text": "at any time the conditions required by the\nprotocol are satisfied.",
    "start": "179440",
    "end": "184250"
  },
  {
    "text": "No need for a global clock here!",
    "start": "184250",
    "end": "187300"
  },
  {
    "text": "It's fun to think about how this self-timed\nprotocol might work when there are multiple",
    "start": "187300",
    "end": "191330"
  },
  {
    "text": "downstream modules, each with their own internal\ntiming.",
    "start": "191330",
    "end": "194840"
  },
  {
    "text": "In this example, A's output is consumed by\nboth the B and C stages.",
    "start": "194840",
    "end": "200370"
  },
  {
    "text": "We need a special circuit, shown as a yellow\nbox in the diagram, to combine the GOT-X signals",
    "start": "200370",
    "end": "205440"
  },
  {
    "text": "from the B and C stages and produce a summary\nsignal for the A stage.",
    "start": "205440",
    "end": "211100"
  },
  {
    "text": "Let's take a quick look at the timing diagram\nshown here.",
    "start": "211100",
    "end": "214610"
  },
  {
    "text": "After A has asserted HERE-IS-X, the circuit\nin the yellow box waits until both the B and",
    "start": "214610",
    "end": "220550"
  },
  {
    "text": "the C stage have asserted their GOT-X signals\nbefore asserting GOT-X to the A stage.",
    "start": "220550",
    "end": "226640"
  },
  {
    "text": "At this point the A stage deasserts HERE-IS-X,\nthen the yellow box waits until both the B",
    "start": "226640",
    "end": "232260"
  },
  {
    "text": "and C stages have deasserted their GOT-X signals,\nbefore deasserting GOT-X to the A stage.",
    "start": "232260",
    "end": "239370"
  },
  {
    "text": "Let's watch the system in action!",
    "start": "239370",
    "end": "241299"
  },
  {
    "text": "When a signal is asserted we'll show it in\nred, otherwise it's shown in black.",
    "start": "241300",
    "end": "245960"
  },
  {
    "text": "A new value for the A stage arrives on A's\ndata input and the module supplying the value",
    "start": "245960",
    "end": "251120"
  },
  {
    "text": "then asserts its HERE-IS-X signal to let A\nknow it has a new input.",
    "start": "251120",
    "end": "256590"
  },
  {
    "text": "At some point later, A signals GOT-X back\nupstream to indicate that it has consumed",
    "start": "256590",
    "end": "262540"
  },
  {
    "text": "the value, then the upstream stage deasserts\nHERE-IS-X, followed by A deasserting its GOT-X",
    "start": "262540",
    "end": "269200"
  },
  {
    "text": "signal.",
    "start": "269200",
    "end": "270200"
  },
  {
    "text": "This completes the transfer of the data to\nthe A stage.",
    "start": "270200",
    "end": "274120"
  },
  {
    "text": "When A is ready to send a new output to the\nB and C stages, it checks that its GOT-X input",
    "start": "274120",
    "end": "279781"
  },
  {
    "text": "is deasserted (which it is),\nso it asserts the new output value and signals",
    "start": "279781",
    "end": "284910"
  },
  {
    "text": "HERE-IS-X to the yellow box which forwards\nthe signal to the downstream stages.",
    "start": "284910",
    "end": "289900"
  },
  {
    "text": "B is ready to consume the new input and so\nasserts its GOT-X output.",
    "start": "289900",
    "end": "295490"
  },
  {
    "text": "Note that C is still waiting for its second\ninput and has yet to assert its GOT-X output.",
    "start": "295490",
    "end": "301470"
  },
  {
    "text": "After B finishes its computation, it supplies\na new value to C and asserts its HERE-IS-X",
    "start": "301470",
    "end": "307740"
  },
  {
    "text": "output to let C know its second input is ready.",
    "start": "307740",
    "end": "312370"
  },
  {
    "text": "Now C is happy and signals both upstream stages\nthat it has consumed its two inputs.",
    "start": "312370",
    "end": "318720"
  },
  {
    "text": "Now that both GOT-X inputs are asserted, the\nyellow box asserts A's GOT-X input to let",
    "start": "318720",
    "end": "325150"
  },
  {
    "text": "it know that the data has been transferred.",
    "start": "325150",
    "end": "328620"
  },
  {
    "text": "Meanwhile B completes its part of the handshake,\nand C completes its transaction with B and",
    "start": "328620",
    "end": "334729"
  },
  {
    "text": "A deasserts HERE-IS-X to indicate that it\nhas seen its GOT-X input.",
    "start": "334730",
    "end": "340530"
  },
  {
    "text": "When the B and C stages see their HERE-IS-X\ninputs go low, they their finish their handshakes",
    "start": "340530",
    "end": "346780"
  },
  {
    "text": "by deasserting their GOT-X outputs,\nand when they're both low, the yellow box",
    "start": "346780",
    "end": "351160"
  },
  {
    "text": "lets A know the handshake is complete by deserting\nA's GOT-X input.",
    "start": "351160",
    "end": "356490"
  },
  {
    "text": "Whew!",
    "start": "356490",
    "end": "357490"
  },
  {
    "text": "The system has returned to the initial state\nwhere A is now ready to accept some future",
    "start": "357490",
    "end": "362099"
  },
  {
    "text": "input value.",
    "start": "362100",
    "end": "364500"
  },
  {
    "text": "This an elegant design based entirely on transition\nsignaling.",
    "start": "364500",
    "end": "368730"
  },
  {
    "text": "Each module is in complete control of when\nit consumes inputs and produces outputs, and",
    "start": "368730",
    "end": "374000"
  },
  {
    "text": "so the system can process data at the fastest\npossible speed, rather than waiting for the",
    "start": "374000",
    "end": "379020"
  },
  {
    "text": "worst-case processing delay.",
    "start": "379020",
    "end": "380710"
  }
]