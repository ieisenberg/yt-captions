[
  {
    "start": "0",
    "end": "67000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license.",
    "start": "0",
    "end": "5310"
  },
  {
    "text": "Your support will help\nMIT OpenCourseWare continue to offer high quality\neducational resources for free.",
    "start": "5310",
    "end": "11610"
  },
  {
    "text": "To make a donation or to\nview additional materials from hundreds of MIT courses,\nvisit MIT OpenCourseWare",
    "start": "11610",
    "end": "18140"
  },
  {
    "text": "at ocw.mit.edu.  CHARLES LEISERSON:\nSo today, we're",
    "start": "18140",
    "end": "23650"
  },
  {
    "text": "going to talk about assembly\nlanguage and computer architecture.",
    "start": "23650",
    "end": "29470"
  },
  {
    "text": "It's interesting these\ndays, most software courses don't bother to talk\nabout these things.",
    "start": "29470",
    "end": "35480"
  },
  {
    "text": "And the reason is because\nas much as possible people have been insulated in writing\ntheir software from performance",
    "start": "35480",
    "end": "42490"
  },
  {
    "text": "considerations. But if you want to\nwrite fast code,",
    "start": "42490",
    "end": "48430"
  },
  {
    "text": "you have to know what is\ngoing on underneath so you can exploit the strengths\nof the architecture.",
    "start": "48430",
    "end": "55180"
  },
  {
    "text": "And the interface, the best\ninterface, that we have to that is the assembly language.",
    "start": "55180",
    "end": "63530"
  },
  {
    "text": "So that's what we're\ngoing to talk about today. So when you take a\nparticular piece of code",
    "start": "63530",
    "end": "71140"
  },
  {
    "start": "67000",
    "end": "67000"
  },
  {
    "text": "like fib here, to compile\nit you run it through Clang,",
    "start": "71140",
    "end": "76870"
  },
  {
    "text": "as I'm sure you're\nfamiliar at this point. And what it produces is\na binary machine language",
    "start": "76870",
    "end": "84730"
  },
  {
    "text": "that the computer is\nhardware programmed to interpret and execute.",
    "start": "84730",
    "end": "91570"
  },
  {
    "text": "It looks at the bits as\ninstructions as opposed to as data. And it executes them.",
    "start": "91570",
    "end": "98110"
  },
  {
    "text": " And that's what we\nsee when we execute.",
    "start": "98110",
    "end": "105880"
  },
  {
    "text": "This process is not one step. It's actually there are\nfour stages to compilation;",
    "start": "105880",
    "end": "111970"
  },
  {
    "text": "preprocessing, compiling--\nsorry, for the redundancy, that's sort of a\nbad name conflict,",
    "start": "111970",
    "end": "117490"
  },
  {
    "text": "but that's what they call it-- assembling and linking.",
    "start": "117490",
    "end": "122509"
  },
  {
    "start": "122000",
    "end": "122000"
  },
  {
    "text": "So I want to take us\nthrough those stages. ",
    "start": "122510",
    "end": "131590"
  },
  {
    "text": "So the first thing\nthat goes through is you go through\na preprocess stage. And you can invoke that\nwith Clang manually.",
    "start": "131590",
    "end": "139790"
  },
  {
    "text": "So you can say,\nfor example, if you do clang minus e, that\nwill run the preprocessor",
    "start": "139790",
    "end": "146650"
  },
  {
    "text": "and nothing else. And you can take a\nlook at the output there and look to see how\nall your macros got expanded",
    "start": "146650",
    "end": "156080"
  },
  {
    "text": "and such before the compilation\nactually goes through. Then you compile it.",
    "start": "156080",
    "end": "162650"
  },
  {
    "text": "And that produces assembly code. So assembly is a mnemonic\nstructure of the machine code",
    "start": "162650",
    "end": "172810"
  },
  {
    "text": "that makes it more human\nreadable than the machine code itself would be.",
    "start": "172810",
    "end": "178090"
  },
  {
    "text": "And once again, you can\nproduce the assembly yourself with clang minus s.",
    "start": "178090",
    "end": "186420"
  },
  {
    "text": "And then finally,\npenultimately maybe,",
    "start": "186420",
    "end": "191660"
  },
  {
    "text": "you can assemble that\nassembly language code",
    "start": "191660",
    "end": "198710"
  },
  {
    "text": "to produce an object file. And since we like to have\nseparate compilations, you don't have to\ncompile everything",
    "start": "198710",
    "end": "204710"
  },
  {
    "text": "as one big monolithic hunk. Then there's typically\na linking stage",
    "start": "204710",
    "end": "210200"
  },
  {
    "text": "to produce the final executable. And for that we are using\nld for the most part.",
    "start": "210200",
    "end": "216080"
  },
  {
    "text": "We're actually using\nthe gold linker, but ld is the command\nthat calls it. ",
    "start": "216080",
    "end": "223580"
  },
  {
    "text": "So let's go through\neach of those steps and see what's going on. So first, the preprocessing\nis really straightforward.",
    "start": "223580",
    "end": "233093"
  },
  {
    "start": "227000",
    "end": "227000"
  },
  {
    "text": "So I'm not going to do that. That's just a\ntextual substitution. The next stage is the source\ncode to assembly code.",
    "start": "233093",
    "end": "241410"
  },
  {
    "text": "So when we do clang\nminus s, we get this symbolic representation. And it looks something\nlike this, where we",
    "start": "241410",
    "end": "250400"
  },
  {
    "text": "have some labels on the side. ",
    "start": "250400",
    "end": "257600"
  },
  {
    "text": "And we have some operations\nwhen they have some directives. And then we have a\nlot of gibberish,",
    "start": "257600",
    "end": "264470"
  },
  {
    "text": "which won't seem like\nso much gibberish after you've played\nwith it a little bit.",
    "start": "264470",
    "end": "271160"
  },
  {
    "text": "But to begin with looks\nkind of like gibberish. ",
    "start": "271160",
    "end": "277080"
  },
  {
    "text": "From there, we assemble\nthat assembly code and that produces the binary.",
    "start": "277080",
    "end": "283250"
  },
  {
    "start": "278000",
    "end": "278000"
  },
  {
    "text": "And once again, you can invoke\nit just by running Clang.",
    "start": "283250",
    "end": "288390"
  },
  {
    "text": "Clang will recognize that it\ndoesn't have a C file or a C++ file. It says, oh, goodness, I've\ngot an assembly language file.",
    "start": "288390",
    "end": "296400"
  },
  {
    "text": "And it will produce the binary.",
    "start": "296400",
    "end": "302460"
  },
  {
    "text": "Now, the other thing that\nturns out to be the case is because assembly\nin machine code,",
    "start": "302460",
    "end": "307950"
  },
  {
    "text": "they're really very\nsimilar in structure.",
    "start": "307950",
    "end": "313320"
  },
  {
    "text": "Just things like\nthe op codes, which are the things that are\nhere in blue or purple,",
    "start": "313320",
    "end": "321960"
  },
  {
    "text": "whatever that color\nis, like these guys,",
    "start": "321960",
    "end": "327060"
  },
  {
    "text": "those correspond to specific\nbit patterns over here in the machine code.",
    "start": "327060",
    "end": "333060"
  },
  {
    "text": "And these are the addresses\nand the registers that we're operating on, the operands.",
    "start": "333060",
    "end": "339240"
  },
  {
    "text": "Those correspond to other to\nother bit codes over there.",
    "start": "339240",
    "end": "347235"
  },
  {
    "text": "And there's very much a-- it's not exactly one to one,\nbut it's pretty close one to one",
    "start": "347235",
    "end": "353550"
  },
  {
    "text": "compared to if you had C\nand you look at the binary, it's like way, way different.",
    "start": "353550",
    "end": "360300"
  },
  {
    "text": " So one of the things that turns\nout you can do is if you have",
    "start": "360300",
    "end": "368130"
  },
  {
    "text": "the machine code, and especially\nif the machine code that was",
    "start": "368130",
    "end": "373830"
  },
  {
    "start": "372000",
    "end": "372000"
  },
  {
    "text": "produced with so-called\ndebug symbols-- that is it was\ncompiled with dash g--",
    "start": "373830",
    "end": "379199"
  },
  {
    "text": "you can use this\nprogram called objdump, which will produce a\ndisassembly of the machine code.",
    "start": "379200",
    "end": "388680"
  },
  {
    "text": "So it will tell you, OK,\nhere's what the mnemonic, more human readable code is, the\nassembly code, from the binary.",
    "start": "388680",
    "end": "398670"
  },
  {
    "text": "And that's really\nuseful, especially if you're trying to do things-- well, let's see why do we\nbother looking at the assembly?",
    "start": "398670",
    "end": "406480"
  },
  {
    "text": "So why would you want to look\nat the assembly of your program? Does anybody have some ideas? ",
    "start": "406480",
    "end": "413170"
  },
  {
    "text": "Yeah. AUDIENCE: [INAUDIBLE]\nmade or not. CHARLES LEISERSON:\nYeah, you can see whether certain optimizations\nare made or not.",
    "start": "413170",
    "end": "419720"
  },
  {
    "text": "Other reasons?  Everybody is going\nto say that one.",
    "start": "419720",
    "end": "425630"
  },
  {
    "text": "OK. ",
    "start": "425630",
    "end": "430870"
  },
  {
    "start": "426000",
    "end": "426000"
  },
  {
    "text": "Another one is-- well, let's\nsee, so here's some reasons. The assembly reveals what the\ncompiler did and did not do,",
    "start": "430870",
    "end": "438970"
  },
  {
    "text": "because you can see exactly what\nthe assembly is that is going to be executed as machine code.",
    "start": "438970",
    "end": "445660"
  },
  {
    "text": "The second reason,\nwhich turns out to happen more often\nyou would think, is that, hey, guess\nwhat, compiler",
    "start": "445660",
    "end": "451430"
  },
  {
    "text": "is a piece of software. It has bugs. So your code isn't\noperating correctly.",
    "start": "451430",
    "end": "458160"
  },
  {
    "text": "Oh, goodness, what's going on? Maybe the compiler\nmade an error.",
    "start": "458160",
    "end": "465650"
  },
  {
    "text": "And we have certainly found\nthat, especially when you start using some of the less\nfrequently used features",
    "start": "465650",
    "end": "473620"
  },
  {
    "text": "of a compiler. You may discover,\noh, it's actually not that well broken in.",
    "start": "473620",
    "end": "481120"
  },
  {
    "text": "And it mentions here you\nmay only have an effect when compiling at -03, but if\nyou compile at -00, -01,",
    "start": "481120",
    "end": "489550"
  },
  {
    "text": "everything works out just fine. So then it says, gee,\nsomewhere in the optimizations,",
    "start": "489550",
    "end": "494920"
  },
  {
    "text": "they did an optimization wrong. So one of the first principles\nof optimization is do it right.",
    "start": "494920",
    "end": "501220"
  },
  {
    "text": "And then the second\nis make it fast. And so sometimes the\ncompiler doesn't that.",
    "start": "501220",
    "end": "508479"
  },
  {
    "text": "It's also the case that\nsometimes you cannot write code that produces the\nassembly that you want.",
    "start": "508480",
    "end": "516860"
  },
  {
    "text": "And in that case,\nyou can actually write the assembly by hand.",
    "start": "516860",
    "end": "523819"
  },
  {
    "text": "Now, it used to be\nmany years ago-- many, many years ago-- that a lot of software\nwas written in assembly.",
    "start": "523820",
    "end": "532550"
  },
  {
    "text": " In fact, my first\njob out of college,",
    "start": "532550",
    "end": "539740"
  },
  {
    "text": "I spent about half\nthe time programming in assembly language.",
    "start": "539740",
    "end": "544980"
  },
  {
    "text": "And it's not as bad\nas you would think. But it certainly is easier\nto have high-level languages",
    "start": "544980",
    "end": "551400"
  },
  {
    "text": "that's for sure. You get lot more\ndone a lot quicker. And the last reason\nis reverse engineer.",
    "start": "551400",
    "end": "557880"
  },
  {
    "text": "You can figure out what a\nprogram does when you only have access to its\nsource, so, for example,",
    "start": "557880",
    "end": "563070"
  },
  {
    "text": "the matrix multiplication\nexample that I gave on day 1.",
    "start": "563070",
    "end": "568490"
  },
  {
    "text": "You know, we had the\noverall outer structure, but the inner loop, we could\nnot match the Intel math kernel",
    "start": "568490",
    "end": "577950"
  },
  {
    "text": "library code. So what do we do? ",
    "start": "577950",
    "end": "583055"
  },
  {
    "text": "We didn't have\nthe source for it. We looked to see\nwhat it was doing. We said, oh, is that\nwhat they're doing?",
    "start": "583055",
    "end": "588255"
  },
  {
    "text": " And then we're able\nto do it ourselves",
    "start": "588255",
    "end": "594329"
  },
  {
    "text": "without having to get\nthe source from them.",
    "start": "594330",
    "end": "600690"
  },
  {
    "text": "So we reverse engineered\nwhat they did? So all those are good reasons. Now, in this class, we\nhave some expectations.",
    "start": "600690",
    "end": "608640"
  },
  {
    "text": "So one thing is, you know,\nassembly is complicated and you needn't\nmemorize the manual.",
    "start": "608640",
    "end": "615210"
  },
  {
    "text": "In fact, the manual\nhas over 1,000 pages.",
    "start": "615210",
    "end": "622140"
  },
  {
    "text": "It's like-- but here's\nwhat we do expect of you.",
    "start": "622140",
    "end": "627300"
  },
  {
    "start": "627000",
    "end": "627000"
  },
  {
    "text": "You should understand\nhow a compiler implements various C linguistic constructs\nwith x86 instructions.",
    "start": "627300",
    "end": "636899"
  },
  {
    "text": "And that's what we'll\nsee in the next lecture. And you should be able\nto read x86 assembly",
    "start": "636900",
    "end": "643060"
  },
  {
    "text": "language with the aid of\nan architecture manual. And on a quiz, for example,\nwe would give you snippets",
    "start": "643060",
    "end": "649209"
  },
  {
    "text": "or explain what the op\ncodes that are being used in case it's not there. But you should have some\nunderstanding of that,",
    "start": "649210",
    "end": "655790"
  },
  {
    "text": "so you can see what's\nactually happening. You should understand the\nhigh-level performance implications of common\nassembly patterns.",
    "start": "655790",
    "end": "663730"
  },
  {
    "text": "OK, so what does it\nmean to do things in a particular way in\nterms of performance?",
    "start": "663730",
    "end": "671270"
  },
  {
    "text": "So some of them\nare quite obvious. Vector operations\ntend to be faster than doing the same thing with\na bunch of scalar operations.",
    "start": "671270",
    "end": "681550"
  },
  {
    "text": " If you do write an assembly,\ntypically what we use",
    "start": "681550",
    "end": "687490"
  },
  {
    "text": "is there are a bunch of compiler\nintrinsic functions, built-ins, so-called, that allow you\nto use the assembly language",
    "start": "687490",
    "end": "697330"
  },
  {
    "text": "instructions. And you should be after we've\ndone this able to write code",
    "start": "697330",
    "end": "704950"
  },
  {
    "text": "from scratch if the\nsituation demands it sometime in the future. We won't do that in\nthis class, but we",
    "start": "704950",
    "end": "711220"
  },
  {
    "text": "expect that you will be in a\nposition to do that after-- you should get a\nmastery to the level",
    "start": "711220",
    "end": "718240"
  },
  {
    "text": "where that would not be\nimpossible for you to do. You'd be able to do that with\na reasonable amount of effort.",
    "start": "718240",
    "end": "726220"
  },
  {
    "text": "So the rest of the\nlecture here is I'm going to first start by\ntalking about the instruction",
    "start": "726220",
    "end": "732630"
  },
  {
    "start": "728000",
    "end": "728000"
  },
  {
    "text": "set architecture of\nthe x86-64, which is the one that we are\nusing for the cloud machines",
    "start": "732630",
    "end": "738959"
  },
  {
    "text": "that we're using. And then I'm going to talk\nabout floating point in vector",
    "start": "738960",
    "end": "744660"
  },
  {
    "text": "hardware and then I'm going\nto do an overview of computer architecture. Now, all of this I'm doing--\nthis is software class, right?",
    "start": "744660",
    "end": "752730"
  },
  {
    "text": "Software performance\nengineering we're doing. So the reason\nwe're doing this is",
    "start": "752730",
    "end": "758040"
  },
  {
    "text": "so you can write code that\nbetter matches the hardware, therefore to better get it.",
    "start": "758040",
    "end": "763500"
  },
  {
    "text": "In order to do that, I could\ngive things at a high-level. My experience is\nthat if you really want to understand\nsomething, you",
    "start": "763500",
    "end": "769320"
  },
  {
    "text": "want to understand it to\nlevel that's necessary and then one level below that.",
    "start": "769320",
    "end": "775380"
  },
  {
    "text": "It's not that you'll necessarily\nuse that one level below it, but that gives you insight as\nto why that layer is what it is",
    "start": "775380",
    "end": "782510"
  },
  {
    "text": "and what's really going on. And so that's kind of\nwhat we're going to do. We're going to do\na dive that takes",
    "start": "782510",
    "end": "787688"
  },
  {
    "text": "us one level beyond\nwhat you probably will need to know in\nthe class, so that you",
    "start": "787688",
    "end": "793790"
  },
  {
    "text": "have a robust foundation\nfor understanding. Does that makes sense?",
    "start": "793790",
    "end": "800470"
  },
  {
    "text": "That's my part of my\nlearning philosophy is you know go one step beyond. And then you can come back.",
    "start": "800470",
    "end": "808570"
  },
  {
    "text": "The ISA primer, so the ISA talks\nabout the syntax and semantics",
    "start": "808570",
    "end": "815120"
  },
  {
    "start": "810000",
    "end": "810000"
  },
  {
    "text": "of assembly.  There are four\nimportant concepts",
    "start": "815120",
    "end": "824770"
  },
  {
    "text": "in the instruction\nset architecture-- the notion of registers,\nthe notion of instructions,",
    "start": "824770",
    "end": "832750"
  },
  {
    "text": "the data types, and the\nmemory addressing modes. And those are sort of indicated.",
    "start": "832750",
    "end": "839470"
  },
  {
    "text": "For example, here, we're going\nto go through those one by one. So let's start\nwith the registers.",
    "start": "839470",
    "end": "845020"
  },
  {
    "text": "So the registers is where\nthe processor stores things. And there are a bunch\nof x86 registers,",
    "start": "845020",
    "end": "854080"
  },
  {
    "text": "so many that you don't\nneed to know most of them. The ones that are\nimportant are these.",
    "start": "854080",
    "end": "860170"
  },
  {
    "text": " So first of all, there a\ngeneral purpose registers.",
    "start": "860170",
    "end": "866290"
  },
  {
    "text": "And those typically\nhave width 64. And there are many of those.",
    "start": "866290",
    "end": "872320"
  },
  {
    "text": "There is a so-called flags\nregister, called RFLAGS, which keeps track of\nthings like whether there",
    "start": "872320",
    "end": "878740"
  },
  {
    "text": "was an overflow, whether\nthe last arithmetic operation resulted in a\nzero, whether a kid there",
    "start": "878740",
    "end": "886000"
  },
  {
    "text": "was a carryout of a\nword or what have you.",
    "start": "886000",
    "end": "891590"
  },
  {
    "text": "The next one is the\ninstruction pointer. So the assembly\nlanguage is organized",
    "start": "891590",
    "end": "896770"
  },
  {
    "text": "as a sequence of instructions. And the hardware\nmarches linearly",
    "start": "896770",
    "end": "901900"
  },
  {
    "text": "through that sequence,\none after the other, unless it encounters\na conditional jump",
    "start": "901900",
    "end": "908740"
  },
  {
    "text": "or an unconditional\njump, in which case it'll branch to whatever\nthe location is. But for the most part,\nit's just running straight",
    "start": "908740",
    "end": "915670"
  },
  {
    "text": "through memory. Then there are\nsome registers that",
    "start": "915670",
    "end": "921400"
  },
  {
    "text": "were added quite late in the\ngame, namely the SSE registers",
    "start": "921400",
    "end": "928900"
  },
  {
    "text": "and the AVX registers. And these are vector registers. So the XMM registers were, when\nthey first did vectorization,",
    "start": "928900",
    "end": "938340"
  },
  {
    "text": "they used 128 bits. There's also for AVX, there\nare the YMM registers.",
    "start": "938340",
    "end": "944290"
  },
  {
    "text": "And in the most\nrecent processors, which were not using\nthis term, there's",
    "start": "944290",
    "end": "949780"
  },
  {
    "text": "another level of AVX that\ngives you 512-bit registers.",
    "start": "949780",
    "end": "955990"
  },
  {
    "text": "Maybe we'll use that\nfor the final project, because it's just like a little\nmore power for the game playing",
    "start": "955990",
    "end": "964750"
  },
  {
    "text": "project. But for most of what\nyou'll be doing, we'll just be keeping to\nthe C4 instances in AWS",
    "start": "964750",
    "end": "977860"
  },
  {
    "text": "that you guys have been using. Now, the x86-64 didn't\nstart out as x86-64.",
    "start": "977860",
    "end": "986800"
  },
  {
    "text": "It started out as x86. And it was used for machines,\nin particular the 80-86,",
    "start": "986800",
    "end": "994000"
  },
  {
    "text": "which had a 16-bit word.  So really short.",
    "start": "994000",
    "end": "1002089"
  },
  {
    "text": "How many things can you\nindex with a 16-bit word? ",
    "start": "1002090",
    "end": "1008100"
  },
  {
    "text": "About how many? AUDIENCE: 65,000. CHARLES LEISERSON:\nYeah, about 65,000. 65,536 words you can\naddress, or bytes.",
    "start": "1008100",
    "end": "1020760"
  },
  {
    "text": "This is byte addressing. So that's 65k bytes\nthat you can address.",
    "start": "1020760",
    "end": "1026949"
  },
  {
    "text": "How could they possibly\nuse that for machines? Well, the answer is that's how\nmuch memory was on the machine.",
    "start": "1026950",
    "end": "1034030"
  },
  {
    "text": "You didn't have gigabytes. So as the machines-- as Moore's law marched along\nand we got more and more memory,",
    "start": "1034030",
    "end": "1042069"
  },
  {
    "text": "then the words had to become\nwider to be able to index them. Yeah? AUDIENCE: [INAUDIBLE]",
    "start": "1042069",
    "end": "1047581"
  },
  {
    "text": "CHARLES LEISERSON:\nYeah, but here's the thing is if you're building\nstuff that's too expensive",
    "start": "1047582",
    "end": "1053060"
  },
  {
    "text": "and you can't get memory\nthat's big enough, then",
    "start": "1053060",
    "end": "1058430"
  },
  {
    "text": "if you build a wider word, like\nif you build a word of 32 bits,",
    "start": "1058430",
    "end": "1063440"
  },
  {
    "text": "then your processor\njust cost twice as much as the next guy's processor. So instead, what they did is\nthey went along as long as that",
    "start": "1063440",
    "end": "1071030"
  },
  {
    "text": "was the common size, and\nthen had some growth pains and went to 32.",
    "start": "1071030",
    "end": "1078012"
  },
  {
    "text": "And from there, they had\nsome more growth pains and went to 64. OK, those are two\nseparate things.",
    "start": "1078012",
    "end": "1084120"
  },
  {
    "text": "And, in fact, they did they\ndid some really weird stuff. So what they did in fact is\nwhen they made these longer",
    "start": "1084120",
    "end": "1092120"
  },
  {
    "text": "registers, they have\nregisters that are aliased to exactly the same\nthing for the lower bits.",
    "start": "1092120",
    "end": "1099470"
  },
  {
    "text": "So they can address\nthem either by a byte--",
    "start": "1099470",
    "end": "1107870"
  },
  {
    "text": "so these registers\nall have the same-- you can do the lower and\nupper half of the short word,",
    "start": "1107870",
    "end": "1113600"
  },
  {
    "text": "or you can do the 32-bit word\nor you can do the 64-bit word.",
    "start": "1113600",
    "end": "1121669"
  },
  {
    "text": "And that's just like if\nyou're doing this today, you wouldn't do that. You wouldn't have all these\nregisters that alias and such.",
    "start": "1121670",
    "end": "1129200"
  },
  {
    "text": "But that's what they did because\nthis is history, not design.",
    "start": "1129200",
    "end": "1135409"
  },
  {
    "text": "And the reason was\nbecause when they're doing that they were not\ndesigning for long term. Now, are we going to go\nto 128-bit addressing?",
    "start": "1135410",
    "end": "1143570"
  },
  {
    "text": "Probably not. 64 bits address is a\nspectacular amount of stuff.",
    "start": "1143570",
    "end": "1149130"
  },
  {
    "text": "You know, not quite as many-- 2 to the 64th is what?",
    "start": "1149130",
    "end": "1155120"
  },
  {
    "text": "Is like how many gazillions?",
    "start": "1155120",
    "end": "1161030"
  },
  {
    "text": "It's a lot of gazillions. So, yeah, we're not going to\nhave to go beyond 64 probably.",
    "start": "1161030",
    "end": "1170340"
  },
  {
    "text": "So here are the general\npurpose registers. And as I mentioned, they\nhave different names,",
    "start": "1170340",
    "end": "1178570"
  },
  {
    "text": "but they cover the same thing. So if you change eax, for\nexample, that also changes rax.",
    "start": "1178570",
    "end": "1186030"
  },
  {
    "text": "And so you see they originally\nall had functional purposes. Now, they're all pretty\nmuch the same thing,",
    "start": "1186030",
    "end": "1195810"
  },
  {
    "text": "but the names have stuck\nbecause of history. Instead of calling\nthem registers",
    "start": "1195810",
    "end": "1201300"
  },
  {
    "text": "0, register 1, or whatever,\nthey all have these funny names. Some of them still are used\nfor a particular purpose,",
    "start": "1201300",
    "end": "1207600"
  },
  {
    "text": "like rsp is used as\nthe stack pointer. And rbp is used to point\nto the base of the frame,",
    "start": "1207600",
    "end": "1216240"
  },
  {
    "text": "for those who remember\ntheir 6004 stuff. So anyway, there are\na whole bunch of them.",
    "start": "1216240",
    "end": "1221400"
  },
  {
    "text": "And they're different\nnames depending upon which part of the\nregister you're accessing. Now, the format of an\nx86-64 instruction code",
    "start": "1221400",
    "end": "1230100"
  },
  {
    "start": "1226000",
    "end": "1226000"
  },
  {
    "text": "is to have an opcode and\nthen an operand list. And the operand list is\ntypically 0, 1, 2, or rarely",
    "start": "1230100",
    "end": "1238260"
  },
  {
    "text": "3 operands separated by commas. Typically, all\noperands are sources",
    "start": "1238260",
    "end": "1243930"
  },
  {
    "text": "and one operand might\nalso be the destination. So, for example, if you take a\nlook at this add instruction,",
    "start": "1243930",
    "end": "1252510"
  },
  {
    "text": "the operation is an add. And the operand list\nis these two registers.",
    "start": "1252510",
    "end": "1260050"
  },
  {
    "text": "One is edi and the other is ecx. And the destination\nis the second one.",
    "start": "1260050",
    "end": "1267990"
  },
  {
    "text": "When you add-- in this\ncase, what's going on is it's taking the value in\necx, adding the value in edi",
    "start": "1267990",
    "end": "1275490"
  },
  {
    "text": "into it. And the result is in ecx. Yes? AUDIENCE: Is there a convention\nfor where the destination",
    "start": "1275490",
    "end": "1282218"
  },
  {
    "text": "[INAUDIBLE] CHARLES LEISERSON:\nFunny you should ask. Yes.",
    "start": "1282218",
    "end": "1288330"
  },
  {
    "text": "So what does op A, B mean? It turns out naturally\nthat the literature",
    "start": "1288330",
    "end": "1294840"
  },
  {
    "start": "1289000",
    "end": "1289000"
  },
  {
    "text": "is inconsistent about how\nit refers to operations. And there's two major\nways that are used.",
    "start": "1294840",
    "end": "1302130"
  },
  {
    "text": "One is the AT&T syntax, and\nthe other is the Intel syntax.",
    "start": "1302130",
    "end": "1308580"
  },
  {
    "text": "So the AT&T syntax, the second\noperand is the destination. The last operand\nis the destination.",
    "start": "1308580",
    "end": "1315210"
  },
  {
    "text": "In the Intel syntax, the first\noperand is the destination.",
    "start": "1315210",
    "end": "1320940"
  },
  {
    "text": "OK, is that confusing? So almost all the tools\nthat we're going to use",
    "start": "1320940",
    "end": "1326580"
  },
  {
    "text": "are going to use\nthe AT&T syntax. ",
    "start": "1326580",
    "end": "1333750"
  },
  {
    "text": "But you will read documentation,\nwhich is Intel documentation.",
    "start": "1333750",
    "end": "1339570"
  },
  {
    "text": "It will use the other syntax. Don't get confused.",
    "start": "1339570",
    "end": "1344600"
  },
  {
    "text": "OK? I can't help-- it's\nlike I can't help that this is the way the\nstate of the world is.",
    "start": "1344600",
    "end": "1351620"
  },
  {
    "text": "OK? Yeah? AUDIENCE: Are there tools\nthat help [INAUDIBLE] CHARLES LEISERSON: Oh, yeah.",
    "start": "1351620",
    "end": "1356647"
  },
  {
    "text": "In particular, if you\ncould compile it and undo, but I'm sure there's--",
    "start": "1356647",
    "end": "1361750"
  },
  {
    "text": "I mean, this is not a\nhard translation thing. I'll bet if you just Google,\nyou can in two minutes,",
    "start": "1361750",
    "end": "1367440"
  },
  {
    "text": "in two seconds, find\nsomebody who will translate from one to the other.",
    "start": "1367440",
    "end": "1373210"
  },
  {
    "text": "This is not a complicated\ntranslation process.",
    "start": "1373210",
    "end": "1379179"
  },
  {
    "text": "Now, here are some very\ncommon x86 opcodes.",
    "start": "1379180",
    "end": "1385960"
  },
  {
    "start": "1381000",
    "end": "1381000"
  },
  {
    "text": "And so let me just\nmention a few of these, because these are ones that\nyou'll often see in the code.",
    "start": "1385960",
    "end": "1394150"
  },
  {
    "text": "So move, what do\nyou think move does? AUDIENCE: Moves something. CHARLES LEISERSON: Yeah,\nit puts something in one",
    "start": "1394150",
    "end": "1401132"
  },
  {
    "text": "register into another register. Of course, when\nit moves it, this is computer science\nmove, not real move.",
    "start": "1401133",
    "end": "1407309"
  },
  {
    "text": "When I move my belongings\nin my house to my new house, they're no longer in\nthe old place, right?",
    "start": "1407310",
    "end": "1414900"
  },
  {
    "text": "But in computer science, for\nsome reason, when we move things we leave a copy behind.",
    "start": "1414900",
    "end": "1422760"
  },
  {
    "text": "So they may call it move, but-- AUDIENCE: Why don't\nthey call it copy? CHARLES LEISERSON: Yeah,\nwhy don't they call it copy?",
    "start": "1422760",
    "end": "1429690"
  },
  {
    "text": "You got me.  OK, then there's\nconditional move.",
    "start": "1429690",
    "end": "1437250"
  },
  {
    "text": "So this is move based\non a condition--",
    "start": "1437250",
    "end": "1442830"
  },
  {
    "text": "and we'll see some of\nthe ways that this is-- like move if flag is equal\nto 0 and so forth, so",
    "start": "1442830",
    "end": "1453150"
  },
  {
    "text": "basically conditional move. It doesn't always do the move.",
    "start": "1453150",
    "end": "1458370"
  },
  {
    "text": "Then you can extend the sign. So, for example, suppose you're\nmoving from a 32-bit value",
    "start": "1458370",
    "end": "1468990"
  },
  {
    "text": "register into a 64-bit register. Then the question is, what\nhappens to high order bits?",
    "start": "1468990",
    "end": "1477110"
  },
  {
    "text": "So there's two basic\nmechanisms that can be used. Either it can be\nfilled with zeros,",
    "start": "1477110",
    "end": "1482510"
  },
  {
    "text": "or remember that the first\nbit, or the leftmost bit as we",
    "start": "1482510",
    "end": "1487760"
  },
  {
    "text": "think of it, is the sign bit\nfrom our electron binary.",
    "start": "1487760",
    "end": "1493280"
  },
  {
    "text": "That bit will be extended\nthrough the high order part of the word, so that the\nwhole number if it's negative",
    "start": "1493280",
    "end": "1502549"
  },
  {
    "text": "will be negative and\nif it's positive, it'll be zeros and so forth.",
    "start": "1502550",
    "end": "1508060"
  },
  {
    "text": "Does that makes sense? Then there are things like\npush and pop to do stacks.",
    "start": "1508060",
    "end": "1514560"
  },
  {
    "text": "There's a lot of\ninteger arithmetic. There's addition, subtraction,\nmultiplication, division,",
    "start": "1514560",
    "end": "1523380"
  },
  {
    "text": "various shifts, address\ncalculation shifts, rotations, incrementing, decrementing,\nnegating, etc.",
    "start": "1523380",
    "end": "1531000"
  },
  {
    "text": "There's also a lot of binary\nlogic, AND, OR, XOR, NOT. Those are all doing\nbitwise operations.",
    "start": "1531000",
    "end": "1538680"
  },
  {
    "text": "And then there is Boolean\nlogic, like testing to see whether some value has\na given value or comparing.",
    "start": "1538680",
    "end": "1549230"
  },
  {
    "text": "There's unconditional\njump, which is jump. And there's conditional jumps,\nwhich is jump with a condition.",
    "start": "1549230",
    "end": "1554970"
  },
  {
    "text": "And then things\nlike subroutines. And there are a bunch more,\nwhich the manual will have",
    "start": "1554970",
    "end": "1560970"
  },
  {
    "text": "and which will\nundoubtedly show up. Like, for example, there's the\nwhole set of vector operations we'll talk about a\nlittle bit later.",
    "start": "1560970",
    "end": "1568320"
  },
  {
    "text": "Now, the opcodes\nmay be augmented with a suffix that describes\nthe data type of the operation",
    "start": "1568320",
    "end": "1574340"
  },
  {
    "text": "or a condition code. OK, so an opcode for data\nmovement, arithmetic, or logic",
    "start": "1574340",
    "end": "1579980"
  },
  {
    "text": "use a single character suffix\nto indicate the data type.",
    "start": "1579980",
    "end": "1586820"
  },
  {
    "text": "And if the suffix is missing,\nit can usually be inferred. So take a look at this example. So this is a move\nwith a q at the end.",
    "start": "1586820",
    "end": "1593480"
  },
  {
    "text": "What do you think q stands for? AUDIENCE: Quad words?",
    "start": "1593480",
    "end": "1598782"
  },
  {
    "text": "CHARLES LEISERSON: Quad word. OK, how many bytes\nin a quad word? ",
    "start": "1598782",
    "end": "1605721"
  },
  {
    "text": "AUDIENCE: Eight. CHARLES LEISERSON: Eight. ",
    "start": "1605722",
    "end": "1611160"
  },
  {
    "text": "That's because originally it\nstarted out with a 16-bit word. So they said a quad word was\nfour of those 16-bit words.",
    "start": "1611160",
    "end": "1619860"
  },
  {
    "text": "So that's 8 bytes. You get the idea, right? But let me tell you this is all\nover the x86 instruction set.",
    "start": "1619860",
    "end": "1627389"
  },
  {
    "text": "All these historical\nthings and all these mnemonics that if you don't\nunderstand what they really",
    "start": "1627390",
    "end": "1634950"
  },
  {
    "text": "mean, you can get very confused. So in this case, we're\nmoving a 64-bit integer,",
    "start": "1634950",
    "end": "1640290"
  },
  {
    "text": "because a quad word\nhas 8 bytes or 64 bits.",
    "start": "1640290",
    "end": "1645990"
  },
  {
    "text": "This is one of my-- it's like whenever I\nprepare this lecture, I just go into spasms\nof laughter, as I look",
    "start": "1645990",
    "end": "1655289"
  },
  {
    "text": "and I say, oh, my god,\nthey really did that like. For example, on the last\npage, when I did subtract.",
    "start": "1655290",
    "end": "1662160"
  },
  {
    "text": "So the sub-operator, if it's\na two argument operator,",
    "start": "1662160",
    "end": "1667430"
  },
  {
    "text": "it subtracts the-- I think it's the\nfirst and the second. But there is no way of\nsubtracting the other way",
    "start": "1667430",
    "end": "1672779"
  },
  {
    "text": "around. It puts the destination\nin the second one. It basically takes the second\none minus the first one",
    "start": "1672780",
    "end": "1680810"
  },
  {
    "text": "and puts that in the second one. But if you wanted to have\nit the other way around,",
    "start": "1680810",
    "end": "1686420"
  },
  {
    "text": "to save yourself a cycle-- anyway, it doesn't matter. You can't do it that way.",
    "start": "1686420",
    "end": "1691820"
  },
  {
    "text": "And all this stuff the\ncompiler has to understand. ",
    "start": "1691820",
    "end": "1697390"
  },
  {
    "start": "1696000",
    "end": "1696000"
  },
  {
    "text": "So here are the\nx86-64 data types. The way I've done it is to show\nyou the difference between C",
    "start": "1697390",
    "end": "1705940"
  },
  {
    "text": "and x86-64, so for example,\nhere are the declarations in C.",
    "start": "1705940",
    "end": "1716139"
  },
  {
    "text": "So there's a char, a short,\nint, unsigned int, long, etc.",
    "start": "1716140",
    "end": "1721450"
  },
  {
    "text": "Here's an example\nof a C constant that does those things. And here's the size\nin bytes that you",
    "start": "1721450",
    "end": "1727570"
  },
  {
    "text": "get when you declare that. And then the assembly suffix\nis one of these things.",
    "start": "1727570",
    "end": "1738370"
  },
  {
    "text": "So in the assembly, it says\nb or w for a word, an l or d for a double word, a q\nfor a quad word, i.e.",
    "start": "1738370",
    "end": "1747300"
  },
  {
    "text": "8 bytes, single precision,\ndouble precision, extended precision. ",
    "start": "1747300",
    "end": "1755710"
  },
  {
    "text": "So sign extension use\ntwo date type suffixes. So here's an example.",
    "start": "1755710",
    "end": "1762470"
  },
  {
    "text": "So the first one says\nwe're going to move.",
    "start": "1762470",
    "end": "1767840"
  },
  {
    "text": "And now you see I can't read\nthis without my cheat sheet. So what is this saying?",
    "start": "1767840",
    "end": "1773320"
  },
  {
    "text": "This is saying, we're going\nto move with a zero-extend.",
    "start": "1773320",
    "end": "1783250"
  },
  {
    "text": "And it's going to be the\nfirst operand is a byte, and the second\noperation is a long. Is that right?",
    "start": "1783250",
    "end": "1789430"
  },
  {
    "text": "If I'm wrong, it's like I\ngot to look at the chart too. And, of course, we\ndon't hold you to that.",
    "start": "1789430",
    "end": "1796000"
  },
  {
    "text": "But the z there says\nextends with zeros. And the S says\npreserve the sign.",
    "start": "1796000",
    "end": "1803240"
  },
  {
    "text": "So that's the things. Now, that would all\nbe all well and good,",
    "start": "1803240",
    "end": "1808520"
  },
  {
    "text": "except that then what they did\nis if you do 32-bit operations,",
    "start": "1808520",
    "end": "1815810"
  },
  {
    "text": "where you're moving\nit to a 64-bit value, it implicitly\nzero-extends the sign.",
    "start": "1815810",
    "end": "1823230"
  },
  {
    "text": "If you do it for smaller\nvalues and you store it in, it simply overwrites the\nvalues in those registers.",
    "start": "1823230",
    "end": "1830475"
  },
  {
    "text": "It doesn't touch\nthe high order bits. But when they did the\n32 to 64-bit extension",
    "start": "1830475",
    "end": "1839370"
  },
  {
    "text": "of the instruction\nset, they decided that they wouldn't do what\nhad been done in the past.",
    "start": "1839370",
    "end": "1845610"
  },
  {
    "text": "And they decided that they\nwould zero-extend things, unless there was something\nexplicit to the contrary.",
    "start": "1845610",
    "end": "1852750"
  },
  {
    "text": "You got me, OK.  Yeah, I have a friend\nwho worked at Intel.",
    "start": "1852750",
    "end": "1860640"
  },
  {
    "text": "And he had a joke about\nthe Intel instructions set. You'll discover the\nIntel instruction set is really complicated.",
    "start": "1860640",
    "end": "1867030"
  },
  {
    "text": "He says, here's the idea of\nthe Intel instruction set. He said, to become\nan Intel fellow,",
    "start": "1867030",
    "end": "1872910"
  },
  {
    "text": "you need to have an instruction\nin the Intel instruction set. You have an instruction\nthat you invented",
    "start": "1872910",
    "end": "1879540"
  },
  {
    "text": "and that that's\nnow used in Intel. He says nobody becomes\nan Intel fellow",
    "start": "1879540",
    "end": "1885000"
  },
  {
    "text": "for removing instructions. So it just sort of grows and\ngrows and grows and gets more",
    "start": "1885000",
    "end": "1891710"
  },
  {
    "text": "and more complicated\nfor each thing. Now, once again, for\nextension, you can sign-extend.",
    "start": "1891710",
    "end": "1901160"
  },
  {
    "text": "And here's two examples. In one case, moving an 8-bit\ninteger to a 32-bit integer",
    "start": "1901160",
    "end": "1908120"
  },
  {
    "text": "and zero-extended it\nversus preserving the sign. ",
    "start": "1908120",
    "end": "1915440"
  },
  {
    "start": "1915000",
    "end": "1915000"
  },
  {
    "text": "Conditional jumps\nand conditional moves also use suffixes to\nindicate the condition code.",
    "start": "1915440",
    "end": "1921200"
  },
  {
    "text": "So here, for example, the ne\nindicates the jump should only be taken if the argument\nof the previous comparison",
    "start": "1921200",
    "end": "1928460"
  },
  {
    "text": "are not equal. So ne is not equal. So you do a\ncomparison, and that's going to set a flag in\nthe RFLAGS register.",
    "start": "1928460",
    "end": "1936320"
  },
  {
    "text": "Then the jump will\nlook at that flag and decide whether it's going\nto jump or not or just continue",
    "start": "1936320",
    "end": "1942260"
  },
  {
    "text": "the sequential\nexecution of the code. And there are a bunch\nof things that you can",
    "start": "1942260",
    "end": "1948530"
  },
  {
    "text": "jump on which are status flags.",
    "start": "1948530",
    "end": "1956030"
  },
  {
    "text": "And you can see the names here. There's Carry. There's Parity. Parity is the XOR of all\nthe bits in the word.",
    "start": "1956030",
    "end": "1963170"
  },
  {
    "text": " Adjust, I don't even\nknow what that's for.",
    "start": "1963170",
    "end": "1969860"
  },
  {
    "text": "There's the Zero flag. It tells whether it's a zero. There's a Sign flag, whether\nit's positive or negative.",
    "start": "1969860",
    "end": "1975720"
  },
  {
    "text": "There's a Trap flag and\nInterrupt enable and Direction,",
    "start": "1975720",
    "end": "1981289"
  },
  {
    "text": "Overflow. So anyway, you can see there\nare a whole bunch of these. So, for example here, this\nis going to decrement rbx.",
    "start": "1981290",
    "end": "1988850"
  },
  {
    "text": "And then it sets the Zero\nflag if the results are equal. And then the jump,\nthe conditional jump,",
    "start": "1988850",
    "end": "1995210"
  },
  {
    "text": "jumps to the label if the ZF\nflag is not set, in this case.",
    "start": "1995210",
    "end": "2001340"
  },
  {
    "text": "OK, it make sense? After a fashion. Doesn't make rational sense,\nbut it does make sense.",
    "start": "2001340",
    "end": "2008330"
  },
  {
    "text": " Here are the main ones\nthat you're going to need.",
    "start": "2008330",
    "end": "2015000"
  },
  {
    "text": "The Carry flag is whether you\ngot a carry or a borrow out of the most significant bit. The Zero flag is if the\nALU operation was 0,",
    "start": "2015000",
    "end": "2024390"
  },
  {
    "text": "whether the last ALU operation\nhad the sign bit set. And the overflow\nsays it resulted",
    "start": "2024390",
    "end": "2029639"
  },
  {
    "text": "in arithmetic overflow. The condition codes are--",
    "start": "2029640",
    "end": "2036390"
  },
  {
    "start": "2032000",
    "end": "2032000"
  },
  {
    "text": "if you put one of\nthese condition codes on your conditional\njump or whatever,",
    "start": "2036390",
    "end": "2042600"
  },
  {
    "text": "this tells you exactly what\nthe flag is that is being set.",
    "start": "2042600",
    "end": "2047760"
  },
  {
    "text": "So, for example, the easy\nones are if it's equal.",
    "start": "2047760",
    "end": "2054388"
  },
  {
    "text": "But there are some\nother ones there. So, for example, if you\nsay why, for example,",
    "start": "2054389",
    "end": "2062969"
  },
  {
    "text": "do the condition codes e\nand ne, check the Zero flag? ",
    "start": "2062969",
    "end": "2069190"
  },
  {
    "text": "And the answer is\ntypically, rather",
    "start": "2069190",
    "end": "2074319"
  },
  {
    "text": "than having a separate\ncomparison, what they've done is separate the branch\nfrom the comparison itself.",
    "start": "2074320",
    "end": "2079899"
  },
  {
    "text": "But it also needn't be\na compare instruction. It could be the result\nof the last arithmetic",
    "start": "2079900",
    "end": "2088330"
  },
  {
    "text": "operation was a zero,\nand therefore it can branch without having to\ndo a comparison with zero.",
    "start": "2088330",
    "end": "2096089"
  },
  {
    "text": "So, for example,\nif you have a loop. where you're decrementing a\ncounter till it gets to 0,",
    "start": "2096090",
    "end": "2103140"
  },
  {
    "text": "that's actually faster\nby one instruction",
    "start": "2103140",
    "end": "2109390"
  },
  {
    "text": "to compare whether\nthe loop index hits 0",
    "start": "2109390",
    "end": "2114549"
  },
  {
    "text": "than it is if you have the\nloop going up to n, and then every time through the loop\nhaving to compare with n",
    "start": "2114550",
    "end": "2121200"
  },
  {
    "text": "in order before you can branch. So these days that optimization\ndoesn't mean anything,",
    "start": "2121200",
    "end": "2128460"
  },
  {
    "text": "because, as we'll talk\nabout in a little bit, these machines are so powerful,\nthat doing an extra integer",
    "start": "2128460",
    "end": "2138839"
  },
  {
    "text": "arithmetic like\nthat probably has no bearing on the overall cost. Yeah? AUDIENCE: So this instruction\ndoesn't take arguments?",
    "start": "2138840",
    "end": "2144644"
  },
  {
    "text": "It just looks at the flags? CHARLES LEISERSON: Just\nlooks at the flags, yep. Just looks at the flags. It doesn't take any arguments.",
    "start": "2144644",
    "end": "2152230"
  },
  {
    "text": "Now, the next aspect of this\nis you can give registers, but you also can address memory.",
    "start": "2152230",
    "end": "2158310"
  },
  {
    "start": "2158000",
    "end": "2158000"
  },
  {
    "text": "And there are three direct\naddressing modes and three",
    "start": "2158310",
    "end": "2165450"
  },
  {
    "text": "indirect addressing modes.  At most, one operand may\nspecify a memory address.",
    "start": "2165450",
    "end": "2174420"
  },
  {
    "text": "So here are the direct\naddressing modes. So for immediate what you do\nis you give it a constant,",
    "start": "2174420",
    "end": "2179980"
  },
  {
    "text": "like 172, random constant,\nto store into the register,",
    "start": "2179980",
    "end": "2186630"
  },
  {
    "text": "in this case. That's called an immediate. What happens if you\nlook at the instruction,",
    "start": "2186630",
    "end": "2192119"
  },
  {
    "text": "if you look at the\nmachine language, 172 is right in the instruction.",
    "start": "2192120",
    "end": "2197730"
  },
  {
    "text": "It's right in the\ninstruction, that number 172. Register says we'll move\nthe value from the register,",
    "start": "2197730",
    "end": "2204870"
  },
  {
    "text": "in this case, %cx. And then the index of the\nregister is put in that part.",
    "start": "2204870",
    "end": "2212069"
  },
  {
    "text": "And direct memory says use a\nparticular memory location.",
    "start": "2212070",
    "end": "2218940"
  },
  {
    "text": "And you can give a hex value. When you do direct\nmemory, it's going",
    "start": "2218940",
    "end": "2225910"
  },
  {
    "text": "to use the value at\nthat place in memory. And to indicate that memory\nis going to take you,",
    "start": "2225910",
    "end": "2233730"
  },
  {
    "text": "on a 64-bit machine, 64\n8-bytes to specify that memory.",
    "start": "2233730",
    "end": "2239190"
  },
  {
    "text": "Whereas, for example, the move\nq, 172 will fit in 1 byte.",
    "start": "2239190",
    "end": "2247369"
  },
  {
    "text": "And so I'll have spent a lot\nless storage in order to do it.",
    "start": "2247370",
    "end": "2252410"
  },
  {
    "text": "Plus, I can do it directly\nfrom the instruction stream. And I avoid having\nan access to memory,",
    "start": "2252410",
    "end": "2258260"
  },
  {
    "text": "which is very expensive. So how many cycles does it\ntake if the value that you're",
    "start": "2258260",
    "end": "2263660"
  },
  {
    "text": "fetching from memory\nis not in cache",
    "start": "2263660",
    "end": "2269450"
  },
  {
    "text": "or whatever or a register? If I'm fetching\nsomething from memory, how many cycles of\nthe machine does",
    "start": "2269450",
    "end": "2274670"
  },
  {
    "text": "it typically take these days.  Yeah. AUDIENCE: A few hundred?",
    "start": "2274670",
    "end": "2280869"
  },
  {
    "text": "CHARLES LEISERSON: Yeah, a\ncouple of hundred or more, yeah, a couple hundred cycles. To fetch something from memory.",
    "start": "2280870",
    "end": "2288230"
  },
  {
    "text": "It's so slow. No, it's the\nprocessors are so fast. And so clearly, if you can\nget things into registers,",
    "start": "2288230",
    "end": "2295940"
  },
  {
    "text": "most registers you can\naccess in a single cycle. So we want to move things\nclose to the processor,",
    "start": "2295940",
    "end": "2301880"
  },
  {
    "text": "operate on them,\nshove them back. And while we pull\nthings from memory, we want other things\nto be to be working on.",
    "start": "2301880",
    "end": "2308880"
  },
  {
    "text": "And so the hardware is\nall organized to do that. Now, of course, we\nspend a lot of time",
    "start": "2308880",
    "end": "2315390"
  },
  {
    "text": "fetching stuff from memory. And that's one reason\nwe use caching. And we'll have a big thing-- caching is really important.",
    "start": "2315390",
    "end": "2321250"
  },
  {
    "text": "We're going spend\na bunch of time on how to get the best\nout of your cache. There's also\nindirect addressing.",
    "start": "2321250",
    "end": "2329100"
  },
  {
    "text": "So instead of just\ngiving a location, you say, oh, let's go\nto some other place,",
    "start": "2329100",
    "end": "2336960"
  },
  {
    "text": "for example, a register,\nand get the value",
    "start": "2336960",
    "end": "2343750"
  },
  {
    "text": "and the address is going to\nbe stored in that location. So, for example here, register\nindirect says, in this case,",
    "start": "2343750",
    "end": "2350900"
  },
  {
    "text": "move the contents of rax into-- ",
    "start": "2350900",
    "end": "2357890"
  },
  {
    "text": "sorry, the contents is\nthe address of the thing that you're going\nto move into rdi.",
    "start": "2357890",
    "end": "2364600"
  },
  {
    "text": "So if rax was\nlocation 172, then it",
    "start": "2364600",
    "end": "2370020"
  },
  {
    "text": "would take whatever is in\nlocation 172 and put it in rdi. ",
    "start": "2370020",
    "end": "2375520"
  },
  {
    "text": "Registered index says,\nwell, do the same thing, but while you're at\nit, add an offset.",
    "start": "2375520",
    "end": "2382030"
  },
  {
    "text": "So once again, if rax\nhad 172, in this case",
    "start": "2382030",
    "end": "2387220"
  },
  {
    "start": "2383000",
    "end": "2383000"
  },
  {
    "text": "it would go to 344 to\nfetch the value out",
    "start": "2387220",
    "end": "2394250"
  },
  {
    "text": "of that location 344 for\nthis particular instruction. And then instruction-pointer\nrelative,",
    "start": "2394250",
    "end": "2402410"
  },
  {
    "text": "instead of indexing off\nof a general purpose register, you index off\nthe instruction pointer.",
    "start": "2402410",
    "end": "2409590"
  },
  {
    "text": "That usually happens in the\ncode where the code is-- ",
    "start": "2409590",
    "end": "2417950"
  },
  {
    "text": "for example, you\ncan jump to where you are in the code\nplus four instructions.",
    "start": "2417950",
    "end": "2423319"
  },
  {
    "text": "So you can jump down some number\nof instructions in the code. Usually, you'll see that\nonly with use with control,",
    "start": "2423320",
    "end": "2429620"
  },
  {
    "text": "because you're\ntalking about things. But sometimes they'll put some\ndata in the instruction stream.",
    "start": "2429620",
    "end": "2435260"
  },
  {
    "text": "And then it can index off\nthe instruction pointer to get those values\nwithout having to soil another register.",
    "start": "2435260",
    "end": "2444020"
  },
  {
    "text": "Now, the most general form is\nbase indexed scale displacement addressing.",
    "start": "2444020",
    "end": "2449780"
  },
  {
    "text": "Wow. This is a move that has a\nconstant plus three terms.",
    "start": "2449780",
    "end": "2459080"
  },
  {
    "text": "And this is the most complicated\ninstruction that is supported. The mode refers to the\naddress whatever the base is.",
    "start": "2459080",
    "end": "2469490"
  },
  {
    "text": "So the base is a general purpose\nregister, in this case, rdi.",
    "start": "2469490",
    "end": "2475970"
  },
  {
    "text": "And then it adds the\nindex times the scale. So the scale is 1, 2, 4, or 8.",
    "start": "2475970",
    "end": "2484369"
  },
  {
    "text": "And then a displacement, which\nis that number on the front.",
    "start": "2484370",
    "end": "2490100"
  },
  {
    "text": "And this gives you\nvery general indexing of things off of a base point.",
    "start": "2490100",
    "end": "2495350"
  },
  {
    "text": "You'll often see this\nkind of accessing when you're accessing\nstack memory,",
    "start": "2495350",
    "end": "2500380"
  },
  {
    "text": "because everything\nyou can say, here is the base of my frame on the\nstack, and now for anything",
    "start": "2500380",
    "end": "2506119"
  },
  {
    "text": "that I want to add, I'm going\nto be going up a certain amount. I may scaling by\na certain amount",
    "start": "2506120",
    "end": "2511310"
  },
  {
    "text": "to get the value that I want. So once again, you will\nbecome familiar with a manual.",
    "start": "2511310",
    "end": "2522200"
  },
  {
    "text": "You don't have to\nmemorize all these, but you do have to\nunderstand that there are a lot of these\ncomplex addressing modes.",
    "start": "2522200",
    "end": "2530510"
  },
  {
    "start": "2530000",
    "end": "2530000"
  },
  {
    "text": "The jump instruction\ntake a label as their operand,\nwhich identifies a location in the code.",
    "start": "2530510",
    "end": "2537080"
  },
  {
    "text": "For this, the labels\ncan be symbols. In other words, you\ncan say here's a symbol that I want to jump to.",
    "start": "2537080",
    "end": "2542750"
  },
  {
    "text": "It might be the\nbeginning of a function, or it might be a\nlabel that's generated to be at the beginning\nof a loop or whatever.",
    "start": "2542750",
    "end": "2549910"
  },
  {
    "text": "They can be exact addresses--\ngo to this place in the code. Or they can be relative\naddress-- jump to some place",
    "start": "2549910",
    "end": "2555940"
  },
  {
    "text": "as I mentioned that's indexed\noff the instruction pointer. And then an indirect\njump takes as its",
    "start": "2555940",
    "end": "2563569"
  },
  {
    "text": "operand an indirect address--  oop, I got-- as its\noperand as its operand.",
    "start": "2563570",
    "end": "2572220"
  },
  {
    "text": "OK, so that's a typo. It just takes an operand\nas an indirect address. So basically, you can\nsay, jump to whatever",
    "start": "2572220",
    "end": "2581370"
  },
  {
    "text": "is pointed to by that register\nusing whatever indexing method that you want.",
    "start": "2581370",
    "end": "2588000"
  },
  {
    "text": "So that's kind of the overview\nof the assembly language. Now, let's take a\nlook at some idioms.",
    "start": "2588000",
    "end": "2593820"
  },
  {
    "text": "So the XOR opcode computes\nthe bitwise XOR of A and B. We saw XOR was a great\ntrick for swapping numbers,",
    "start": "2593820",
    "end": "2602080"
  },
  {
    "start": "2594000",
    "end": "2594000"
  },
  {
    "text": "for example, the other day. So often in the code,\nyou will see something like this, xor rax rax.",
    "start": "2602080",
    "end": "2609900"
  },
  {
    "text": "What does that do? Yeah. AUDIENCE: Zeros the register. CHARLES LEISERSON: It\nzeros the register.",
    "start": "2609900",
    "end": "2615708"
  },
  {
    "text": "Why does that zero the register? AUDIENCE: Is the\nXOR just the same? CHARLES LEISERSON:\nYeah, it's basically",
    "start": "2615708",
    "end": "2621700"
  },
  {
    "text": "taking the results of rax,\nthe results rax, xor-ing them.",
    "start": "2621700",
    "end": "2628445"
  },
  {
    "text": "And when you XOR\nsomething with itself, you get zero, storing\nthat back into it. So that's actually\nhow you zero things.",
    "start": "2628445",
    "end": "2634120"
  },
  {
    "text": "So you'll see that. Whenever you see that,\nhey, what are they doing? They're zeroing the register.",
    "start": "2634120",
    "end": "2640720"
  },
  {
    "text": "And that's actually\nquicker and easier than having a zero constant that\nthey put into the instruction.",
    "start": "2640720",
    "end": "2649240"
  },
  {
    "start": "2646000",
    "end": "2646000"
  },
  {
    "text": "It saves a byte,\nbecause this ends up being a very short instruction.",
    "start": "2649240",
    "end": "2655150"
  },
  {
    "text": "I don't remember how many\nbytes that instruction is. Here's another one, the\ntest opcode, test A, B,",
    "start": "2655150",
    "end": "2661960"
  },
  {
    "text": "computes the bitwise AND of A\nand B and discards the result, preserving the RFLAGS register.",
    "start": "2661960",
    "end": "2669910"
  },
  {
    "text": "So basically, it says, what\ndoes the test instruction for these things do?",
    "start": "2669910",
    "end": "2675160"
  },
  {
    "text": " So what is the first one doing?",
    "start": "2675160",
    "end": "2681990"
  },
  {
    "text": "So it takes rcx-- yeah. AUDIENCE: Does it jump? It jumps to [INAUDIBLE]\nrcx [INAUDIBLE]",
    "start": "2681990",
    "end": "2694059"
  },
  {
    "text": "So it takes the\nbitwise AND of A and B. And so then it's\nsaying jump if equal.",
    "start": "2694060",
    "end": "2704040"
  },
  {
    "text": "So-- AUDIENCE: An AND would\nbe non-zero in any of the bits set.",
    "start": "2704040",
    "end": "2709350"
  },
  {
    "text": "CHARLES LEISERSON: Right. AND is non-zero if any\nof the bits are set. AUDIENCE: Right.",
    "start": "2709350",
    "end": "2715139"
  },
  {
    "text": "So if the zero flag were set,\nthat means that rcx was zero. CHARLES LEISERSON: That's right.",
    "start": "2715139",
    "end": "2720150"
  },
  {
    "text": "So if the Zero flag is\nset, then rcx is set. So this is going to\njump to that location",
    "start": "2720150",
    "end": "2725330"
  },
  {
    "text": "if rcx holds the value 0.",
    "start": "2725330",
    "end": "2731340"
  },
  {
    "text": "In all the other cases,\nit won't set the Zero flag because the result\nof the AND will be 0.",
    "start": "2731340",
    "end": "2736380"
  },
  {
    "text": "So once again, that's kind\nof an idiom that they use. What about the second one? ",
    "start": "2736380",
    "end": "2742940"
  },
  {
    "text": "So this is a conditional move. So both of them are\nbasically checking to see if the register is 0.",
    "start": "2742940",
    "end": "2749300"
  },
  {
    "text": "And then doing something\nif it is or isn't. But those are just\nidioms that you sort of",
    "start": "2749300",
    "end": "2755900"
  },
  {
    "text": "have to look at to see how\nit is that they accomplish their particular thing.",
    "start": "2755900",
    "end": "2763069"
  },
  {
    "text": "Here's another one. So the ISA can include\nseveral no-op, no operation",
    "start": "2763070",
    "end": "2769310"
  },
  {
    "start": "2766000",
    "end": "2766000"
  },
  {
    "text": "instructions, including\nnop, nop A-- that's an operation with an argument--\nand data16, which sets aside",
    "start": "2769310",
    "end": "2777140"
  },
  {
    "text": "2 bytes of a nop. So here's a line\nof assembly that we",
    "start": "2777140",
    "end": "2782480"
  },
  {
    "text": "found in some of our code-- data16 days16 data16\nnopw and then %csx.",
    "start": "2782480",
    "end": "2790130"
  },
  {
    "text": " So nopw is going to take this\nargument, which has got all",
    "start": "2790130",
    "end": "2798790"
  },
  {
    "text": "this address calculation in it. So what do you\nthink this is doing?",
    "start": "2798790",
    "end": "2803990"
  },
  {
    "text": "What's the effect\nof this, by the way? They're all no-ops. So the effect is?",
    "start": "2803990",
    "end": "2811320"
  },
  {
    "text": "Nothing. The effect is nothing. OK, now it does set the RFLAGS.",
    "start": "2811320",
    "end": "2817670"
  },
  {
    "text": "But basically, mostly,\nit does nothing.",
    "start": "2817670",
    "end": "2823079"
  },
  {
    "text": "Why would a compiler generate\nassembly with these idioms? Why would you get that kind of--",
    "start": "2823080",
    "end": "2828700"
  },
  {
    "text": "that's crazy, right? Yeah. AUDIENCE: Could it be doing\nsome cache optimization?",
    "start": "2828700",
    "end": "2834667"
  },
  {
    "text": "CHARLES LEISERSON:\nYeah, it's actually doing alignment optimization\ntypically or code size.",
    "start": "2834667",
    "end": "2842280"
  },
  {
    "text": "So it may want to start the next\ninstruction on the beginning of a cache line.",
    "start": "2842280",
    "end": "2847860"
  },
  {
    "text": "And, in fact, there's\na directive to do that. If you want all your\nfunctions to start at the beginning\nof cache line, then",
    "start": "2847860",
    "end": "2854040"
  },
  {
    "text": "it wants to make sure that\nif code gets to that point,",
    "start": "2854040",
    "end": "2860490"
  },
  {
    "text": "you'll just proceed to\njump through memory, continue through memory.",
    "start": "2860490",
    "end": "2866369"
  },
  {
    "text": "So mainly is to optimize memory. So you'll see those things. I mean, you just\nhave to realize, oh, that's the compiler\ngenerating some sum no-ops.",
    "start": "2866370",
    "end": "2874710"
  },
  {
    "text": "So that's sort of\nour brief excursion over assembly language,\nx86 assembly language.",
    "start": "2874710",
    "end": "2883769"
  },
  {
    "text": "Now, I want to dive into\nfloating-point and vector hardware, which is going\nto be the main part.",
    "start": "2883770",
    "end": "2889020"
  },
  {
    "text": "And then if there's any time at\nthe end, I'll show the slides-- I have a bunch of other slides\non how branch prediction works",
    "start": "2889020",
    "end": "2896400"
  },
  {
    "text": "and a variety of other\nmachines sorts of things, that if we don't get\nto, it's no problem.",
    "start": "2896400",
    "end": "2901770"
  },
  {
    "text": "You can take a\nlook at the slides, and there's also the\narchitecture manual.",
    "start": "2901770",
    "end": "2907800"
  },
  {
    "text": "So floating-point\ninstruction sets, so mostly the scalar\nfloating-point operations",
    "start": "2907800",
    "end": "2917609"
  },
  {
    "start": "2909000",
    "end": "2909000"
  },
  {
    "text": "are access via couple of\ndifferent instruction sets. So the history of floating\npoint is interesting,",
    "start": "2917610",
    "end": "2924180"
  },
  {
    "text": "because originally the 80-86 did\nnot have a floating-point unit.",
    "start": "2924180",
    "end": "2930089"
  },
  {
    "text": "Floating-point was\ndone in software. And then they made\na companion chip that would do floating-point.",
    "start": "2930090",
    "end": "2935579"
  },
  {
    "text": "And then they\nstarted integrating and so forth as\nminiaturization took hold.",
    "start": "2935580",
    "end": "2942180"
  },
  {
    "text": "So the SSE and AVX\ninstructions do both single and double precision\nscalar floating-point, i.e.",
    "start": "2942180",
    "end": "2948539"
  },
  {
    "text": "floats or doubles. And then the x86 instructions,\nthe x87 instructions--",
    "start": "2948540",
    "end": "2954960"
  },
  {
    "text": "that's the 80-87 that\nwas attached to the 80-86 and that's where they get them--",
    "start": "2954960",
    "end": "2960390"
  },
  {
    "text": "support single, double,\nand extended precision scalar floating-point\narithmetic, including float double\nand long double.",
    "start": "2960390",
    "end": "2967320"
  },
  {
    "text": "So you can actually get a\ngreat big result of a multiply if you use the x87\ninstruction sets.",
    "start": "2967320",
    "end": "2974630"
  },
  {
    "text": "And they also include\nvector instructions, so you can multiply\nor add there as well-- so all these places on the\nchip where you can decide",
    "start": "2974630",
    "end": "2981210"
  },
  {
    "text": "to do one thing or another. Compilers generally like\nthe SSE instructions over the x87 instructions\nbecause they're simpler",
    "start": "2981210",
    "end": "2989099"
  },
  {
    "start": "2985000",
    "end": "2985000"
  },
  {
    "text": "to compile for and to optimize. And the SSE opcodes are similar\nto the normal x86 opcodes.",
    "start": "2989100",
    "end": "2998130"
  },
  {
    "text": "And they use the XMM registers\nand floating-point types. And so you'll see stuff\nlike this, where you've",
    "start": "2998130",
    "end": "3003530"
  },
  {
    "text": "got a movesd and so forth. The suffix there is\nsaying what the data type.",
    "start": "3003530",
    "end": "3010670"
  },
  {
    "text": "In this case, it's saying it's a\ndouble precision floating-point value, i.e. a double. ",
    "start": "3010670",
    "end": "3019340"
  },
  {
    "start": "3019000",
    "end": "3019000"
  },
  {
    "text": "Once again, they're\nusing suffix. The sd in this case is a double\nprecision floating-point.",
    "start": "3019340",
    "end": "3025069"
  },
  {
    "text": "The other option\nis the first letter says whether it's single, i.e.\na scalar operation, or packed,",
    "start": "3025070",
    "end": "3033080"
  },
  {
    "text": "i.e. a vector operation. And the second letter\nsays whether it's",
    "start": "3033080",
    "end": "3038869"
  },
  {
    "text": "single or double precision. And so when you see one of these\noperations, you can decode,",
    "start": "3038870",
    "end": "3045140"
  },
  {
    "text": "oh, this is operating on a\n64-bit value or a 32-bit value, floating-point value, or on\na vector of those values.",
    "start": "3045140",
    "end": "3054920"
  },
  {
    "start": "3054000",
    "end": "3054000"
  },
  {
    "text": "Now, what about these vectors? So when you start using\nthe packed representation",
    "start": "3054920",
    "end": "3060128"
  },
  {
    "text": "and you start using\nvectors, you have to understand a little bit\nabout the vector units that are on these machines. ",
    "start": "3060128",
    "end": "3067430"
  },
  {
    "text": "So the way a vector\nunit works is that there is the processor\nissuing instructions.",
    "start": "3067430",
    "end": "3073910"
  },
  {
    "text": "And it issues the instructions\nto all of the vector units.",
    "start": "3073910",
    "end": "3079190"
  },
  {
    "text": "So for example, if you take\na look at a typical thing, you may have a vector\nwidth of four vector units.",
    "start": "3079190",
    "end": "3087410"
  },
  {
    "start": "3081000",
    "end": "3081000"
  },
  {
    "text": "Each of them is\noften called a lane-- l-a-n-e. And the x is the vector width.",
    "start": "3087410",
    "end": "3093569"
  },
  {
    "text": "And so when the\ninstruction is given, it's given to all\nof the vector units. And they all do it on their\nown local copy of the register.",
    "start": "3093570",
    "end": "3101060"
  },
  {
    "text": "So the register you can think\nof as a very wide thing broken into several words.",
    "start": "3101060",
    "end": "3106099"
  },
  {
    "text": "And when I say add\ntwo vectors together, it'll add four words\ntogether and store it back",
    "start": "3106100",
    "end": "3113067"
  },
  {
    "text": "into another vector register.  And so whatever k is--",
    "start": "3113067",
    "end": "3119570"
  },
  {
    "text": "in the example I\njust said, k was 4. And the lanes are the\nthing that each of which",
    "start": "3119570",
    "end": "3127520"
  },
  {
    "text": "contains the integer\nfloating-point arithmetic. But the important thing is that\nthey all operate in lock step.",
    "start": "3127520",
    "end": "3135930"
  },
  {
    "text": "It's not like one is\ngoing to do one thing and another is going\nto do another thing. They all have to do\nexactly the same thing.",
    "start": "3135930",
    "end": "3141370"
  },
  {
    "text": "And the basic idea here is for\nthe price of one instruction, I can command a bunch of\noperations to be done.",
    "start": "3141370",
    "end": "3150260"
  },
  {
    "text": "Now, generally,\nvector instructions operate in an\nelement-wise fashion, where you take the i-th\nelement of one vector",
    "start": "3150260",
    "end": "3157069"
  },
  {
    "start": "3153000",
    "end": "3153000"
  },
  {
    "text": "and operate on it with the\ni-th element of another vector. And all the lanes perform\nexactly the same operation.",
    "start": "3157070",
    "end": "3165619"
  },
  {
    "text": "Depending upon the architecture,\nsome architectures, the operands need to be aligned.",
    "start": "3165620",
    "end": "3171980"
  },
  {
    "text": "That is you've got to have\nthe beginnings at the exactly same place in memory, a\nmultiple of the vector length.",
    "start": "3171980",
    "end": "3179510"
  },
  {
    "text": "There are others\nwhere the vectors can be shifted in memory. Usually, there's a performance\ndifference between the two.",
    "start": "3179510",
    "end": "3187855"
  },
  {
    "text": "If it does support--\nsome of them will not support unaligned\nvector operations. So if it can't figure out that\nthey're aligned, I'm sorry,",
    "start": "3187855",
    "end": "3195710"
  },
  {
    "text": "your code will end up\nbeing executed scalar, in a scalar fashion.",
    "start": "3195710",
    "end": "3200839"
  },
  {
    "text": "If they are aligned, it's got\nto be able to figure that out.",
    "start": "3200840",
    "end": "3207360"
  },
  {
    "text": "And in that case-- sorry, if it's not\naligned, but you do support vector\noperizations unaligned,",
    "start": "3207360",
    "end": "3214070"
  },
  {
    "text": "it's usually slower than\nif they are aligned. And for some machines\nnow, they actually",
    "start": "3214070",
    "end": "3220559"
  },
  {
    "text": "have good performance on both. So it really depends\nupon the machine.",
    "start": "3220560",
    "end": "3226740"
  },
  {
    "text": "And then also there\nare some architectures will support cross-lane\noperation, such as inserting",
    "start": "3226740",
    "end": "3232260"
  },
  {
    "text": "or extracting subsets\nof vector elements, permuting, shuffling, scatter,\ngather types of operations.",
    "start": "3232260",
    "end": "3239130"
  },
  {
    "text": " So x86 supports several\ninstruction sets,",
    "start": "3239130",
    "end": "3246234"
  },
  {
    "start": "3241000",
    "end": "3241000"
  },
  {
    "text": "as I mentioned. There's SSE. There's AVX. There's AVX2. And then there's\nnow the AVX-512,",
    "start": "3246235",
    "end": "3252710"
  },
  {
    "text": "or sometimes called\nAVX3, which is not available on the machines\nthat we'll be using,",
    "start": "3252710",
    "end": "3257720"
  },
  {
    "text": "the Haswell machines\nthat we'll be doing. Generally, the AVX and AVX2\nextend the SSE instruction",
    "start": "3257720",
    "end": "3266330"
  },
  {
    "start": "3260000",
    "end": "3260000"
  },
  {
    "text": "set by using the wider\nregisters and operate on a 2.",
    "start": "3266330",
    "end": "3271820"
  },
  {
    "text": "The SSE use wider\nregisters and operate on at most two operands. The AVX ones can use the 256 and\nalso have three operands, not",
    "start": "3271820",
    "end": "3282290"
  },
  {
    "text": "just two operations. So say you can say add A\nto B and store it in C,",
    "start": "3282290",
    "end": "3287690"
  },
  {
    "text": "as opposed to saying add\nA to B and store it in B. So it can also support three.",
    "start": "3287690",
    "end": "3293300"
  },
  {
    "text": " Yeah, most of them are\nsimilar to traditional opcodes",
    "start": "3293300",
    "end": "3301650"
  },
  {
    "start": "3296000",
    "end": "3296000"
  },
  {
    "text": "with minor differences. So if you look at them,\nif you have an SSE,",
    "start": "3301650",
    "end": "3307850"
  },
  {
    "text": "it basically looks just\nlike the traditional name, like add in this case,\nbut you can then say,",
    "start": "3307850",
    "end": "3314700"
  },
  {
    "text": "do a packed add or a\nvector with packed data.",
    "start": "3314700",
    "end": "3320599"
  },
  {
    "text": "So the v prefix it's AVX. So if you see it's\nv, you go to the part in the manual that says AVX.",
    "start": "3320600",
    "end": "3326510"
  },
  {
    "text": " If you see the p's, that\nsay it's packed data.",
    "start": "3326510",
    "end": "3332420"
  },
  {
    "text": "Then you go to SSE if\nit doesn't have the v.",
    "start": "3332420",
    "end": "3338760"
  },
  {
    "text": "And the p prefix distinguishing\ninteger vector instruction, you got me. I tried to think why is p\ndistinguishing an integer?",
    "start": "3338760",
    "end": "3348572"
  },
  {
    "text": "It's like p, good mnemonic\nfor integer, right? ",
    "start": "3348572",
    "end": "3357070"
  },
  {
    "text": "Then in addition, they do\nthis aliasing trick again, where the YMM registers actually\nalias the XMM registers.",
    "start": "3357070",
    "end": "3366559"
  },
  {
    "start": "3358000",
    "end": "3358000"
  },
  {
    "text": "So you can use both\noperations, but you've got to be careful\nwhat's going on,",
    "start": "3366560",
    "end": "3371737"
  },
  {
    "text": "because they just extended them. And now, of course,\nwith AVX-512,",
    "start": "3371737",
    "end": "3376820"
  },
  {
    "text": "they did another\nextension to 512 bits. ",
    "start": "3376820",
    "end": "3383060"
  },
  {
    "text": "That's vectors stuff. So you can use those explicitly. The compiler will\nvectorize for you.",
    "start": "3383060",
    "end": "3389330"
  },
  {
    "text": "And the homework this week takes\nyou through some vectorization exercises.",
    "start": "3389330",
    "end": "3394349"
  },
  {
    "text": "It's actually a lot of fun. We were just going over\nit in a staff meeting. And it's really fun. I think it's a\nreally fun exercise.",
    "start": "3394350",
    "end": "3400430"
  },
  {
    "text": "We introduced that\nlast year, by the way, or maybe two years ago. But, in any case,\nit's a fun one--",
    "start": "3400430",
    "end": "3406550"
  },
  {
    "text": " for my definition\nof fun, which I hope",
    "start": "3406550",
    "end": "3414120"
  },
  {
    "text": "is your definition of fun. Now, I want to talk generally\nabout computer architecture.",
    "start": "3414120",
    "end": "3420539"
  },
  {
    "text": "And I'm not going to get through\nall of these slides, as I say. But I want to get started\non the and give you",
    "start": "3420540",
    "end": "3427950"
  },
  {
    "text": "a sense of other things\ngoing on in the processor that you should be aware of.",
    "start": "3427950",
    "end": "3433060"
  },
  {
    "text": "So in 6.004, you probably talked\nabout a 5-stage processor.",
    "start": "3433060",
    "end": "3438690"
  },
  {
    "start": "3434000",
    "end": "3434000"
  },
  {
    "text": "Anybody remember that? OK, 5-stage processor. There's an Instruction Fetch.",
    "start": "3438690",
    "end": "3444480"
  },
  {
    "text": "There's an Instruction Decode. There's an Execute. Then there's a\nMemory Addressing.",
    "start": "3444480",
    "end": "3451440"
  },
  {
    "text": "And then you Write\nback the values. And this is done as\na pipeline, so as",
    "start": "3451440",
    "end": "3456780"
  },
  {
    "text": "to make-- you could do\nall of this in one thing, but then you have\na long clock cycle. And you'll only be able\nto do one thing at a time.",
    "start": "3456780",
    "end": "3463240"
  },
  {
    "text": "Instead, they stack\nthem together. So here's a block diagram\nof the 5-stage processor.",
    "start": "3463240",
    "end": "3471609"
  },
  {
    "start": "3467000",
    "end": "3467000"
  },
  {
    "text": "We read the\ninstruction from memory in the instruction fetch cycle. Then we decode it.",
    "start": "3471610",
    "end": "3477550"
  },
  {
    "text": "Basically, it takes\na look at, what is the opcode, what are the\naddressing modes, et cetera, and figures out what\nit actually has to do",
    "start": "3477550",
    "end": "3485040"
  },
  {
    "text": "and actually performs\nthe ALU operations. And then it reads and\nwrites the data memory.",
    "start": "3485040",
    "end": "3490060"
  },
  {
    "text": "And then it writes back\nthe results into registers. That's typically a common\nway that these things",
    "start": "3490060",
    "end": "3495730"
  },
  {
    "text": "go for a 5-stage processor. By the way, this is\nvastly oversimplified.",
    "start": "3495730",
    "end": "3502480"
  },
  {
    "text": "You can take 6823 if\nyou want to learn truth. I'm going to tell you\nnothing but white lies",
    "start": "3502480",
    "end": "3510970"
  },
  {
    "text": "for this lecture. Now, if you look at the\nIntel Haswell, the machine",
    "start": "3510970",
    "end": "3518140"
  },
  {
    "start": "3515000",
    "end": "3515000"
  },
  {
    "text": "that we're using, it actually\nhas between 14 and 19 pipeline",
    "start": "3518140",
    "end": "3523210"
  },
  {
    "text": "stages. The 14 to 19 reflects\nthe fact that there",
    "start": "3523210",
    "end": "3529150"
  },
  {
    "text": "are different paths\nthrough it that take different amounts of time. It also I think\nreflects a little bit",
    "start": "3529150",
    "end": "3534820"
  },
  {
    "text": "that nobody has published\nthe Intel internal stuff. So maybe we're not sure if\nit's 14 to 19, but somewhere",
    "start": "3534820",
    "end": "3542500"
  },
  {
    "text": "in that range. But I think it's actually\nbecause the different lengths of time as I was explaining.",
    "start": "3542500",
    "end": "3548090"
  },
  {
    "start": "3548000",
    "end": "3548000"
  },
  {
    "text": "So what I want to do is-- you've seen the\n5-stage price line. I want to talk about the\ndifference between that",
    "start": "3548090",
    "end": "3554920"
  },
  {
    "text": "and a modern processor by\nlooking at several design features. We already talked\nabout vector hardware.",
    "start": "3554920",
    "end": "3560349"
  },
  {
    "text": "I then want to talk\nabout super scalar processing, out of\norder execution, and branch prediction\na little bit.",
    "start": "3560350",
    "end": "3568000"
  },
  {
    "text": "And the out of order, I'm\ngoing to skip a bunch of that because it has to do with\nscore boarding, which is really interesting and fun,\nbut it's also time consuming.",
    "start": "3568000",
    "end": "3577210"
  },
  {
    "text": "But it's really\ninteresting and fun. That's what you learn in 6823.",
    "start": "3577210",
    "end": "3582220"
  },
  {
    "start": "3578000",
    "end": "3578000"
  },
  {
    "text": "So historically,\nthere's two ways that people make\nprocessors go faster--",
    "start": "3582220",
    "end": "3587830"
  },
  {
    "text": "by exploiting parallelism\nand by exploiting locality.",
    "start": "3587830",
    "end": "3592890"
  },
  {
    "text": "And parallelism, there's\ninstruction-- well, we already did\nword-level parallelism",
    "start": "3592890",
    "end": "3598329"
  },
  {
    "text": "in the bit tricks thing. But there's also\ninstruction-level parallelism,",
    "start": "3598330",
    "end": "3603350"
  },
  {
    "text": "so-called ILB,\nvectorization and multicore. And for locality, the main thing\nthat's used there is caching.",
    "start": "3603350",
    "end": "3611463"
  },
  {
    "text": "I would say also\nthe fact that you have a design with registers\nthat also reflects locality,",
    "start": "3611463",
    "end": "3616581"
  },
  {
    "text": "because the way that the\nprocessor wants to do things is fetch stuff from memory. It doesn't want to\noperate on it in memory.",
    "start": "3616582",
    "end": "3621970"
  },
  {
    "text": "That's very expensive. It wants to fetch things into\nmemory, get enough of them there that you can\ndo some calculations,",
    "start": "3621970",
    "end": "3627280"
  },
  {
    "text": "do a whole bunch\nof calculations, and then put them\nback out there. So this lecture we're talking\nabout ILP and vectorization.",
    "start": "3627280",
    "end": "3634780"
  },
  {
    "text": "So let me talk about\ninstruction-level parallelism. So when you have, let's\nsay, a 5-stage pipeline,",
    "start": "3634780",
    "end": "3646870"
  },
  {
    "text": "you're interested in\nfinding opportunities to execute multiple\ninstruction simultaneously.",
    "start": "3646870",
    "end": "3652630"
  },
  {
    "text": "So in instruction 1, it's going\nto do an instruction fetch. Then it does its decode.",
    "start": "3652630",
    "end": "3658570"
  },
  {
    "text": "And so it takes five cycles for\nthis instruction to complete.",
    "start": "3658570",
    "end": "3664930"
  },
  {
    "text": "So ideally what you'd\nlike is that you can start instruction 2 on cycle\n2, instruction 3 on cycle 3,",
    "start": "3664930",
    "end": "3672609"
  },
  {
    "text": "and so forth, and have 5\ninstructions-- once you get into the steady state,\nhave 5 instructions executing",
    "start": "3672610",
    "end": "3679029"
  },
  {
    "text": "all the time. That would be ideal, where\neach one takes just one thing.",
    "start": "3679030",
    "end": "3685120"
  },
  {
    "text": "So that's really pretty good. And that would improve\nthe throughput. Even though it might\ntake a long time",
    "start": "3685120",
    "end": "3690292"
  },
  {
    "text": "to get one instruction done,\nI can have many instructions in the pipeline at some time.",
    "start": "3690292",
    "end": "3696280"
  },
  {
    "text": " So each pipeline is executing\na different instruction.",
    "start": "3696280",
    "end": "3702670"
  },
  {
    "text": "However, in practice\nthis isn't what happens. In practice, you\ndiscover that there are",
    "start": "3702670",
    "end": "3709420"
  },
  {
    "text": "what's called pipeline stalls. When it comes time to\nexecute an instruction, for some correctness reason, it\ncannot execute the instruction.",
    "start": "3709420",
    "end": "3718329"
  },
  {
    "text": "It has to wait. And that's a pipeline stall. That's what you\nwant to try to avoid and the compiler tries to Bruce\ncode that will avoid stalls.",
    "start": "3718330",
    "end": "3728140"
  },
  {
    "text": "So why do stalls happen? They happen because of\nwhat are called hazards.",
    "start": "3728140",
    "end": "3733870"
  },
  {
    "text": "There's actually two\nnotions of hazard. And this is one of them. The other is a race\ncondition hazard.",
    "start": "3733870",
    "end": "3738920"
  },
  {
    "text": "This is dependency hazard. But people call\nthem both hazards, just like they call the second\nstage of compilation compiling.",
    "start": "3738920",
    "end": "3749390"
  },
  {
    "text": "It's like they make\nup these words. So here's three types of\nhazards that can prevent",
    "start": "3749390",
    "end": "3755140"
  },
  {
    "text": "an instruction from executing. First of all, there's what's\ncalled a structural hazard.",
    "start": "3755140",
    "end": "3760660"
  },
  {
    "text": "Two instructions attempt to\nuse the same functional unit, the same time. If there's, for example, only\none floating-point multiplier",
    "start": "3760660",
    "end": "3772540"
  },
  {
    "text": "and two of them try to use it at\nthe same time, one has to wait. In modern processors, there's\na bunch of each of those.",
    "start": "3772540",
    "end": "3778910"
  },
  {
    "text": "But if you have k functional\nunits and k plus 1 instructions",
    "start": "3778910",
    "end": "3784510"
  },
  {
    "text": "want to access it,\nyou're out of luck. One of them is going\nto have to wait. The second is a data hazard.",
    "start": "3784510",
    "end": "3791872"
  },
  {
    "text": "This is when an\ninstruction depends on the result of a prior\ninstruction in the pipeline.",
    "start": "3791872",
    "end": "3797320"
  },
  {
    "text": "So one instruction is\ncomputing a value that is going to stick in rcx, say.",
    "start": "3797320",
    "end": "3807060"
  },
  {
    "text": "So they stick it into rcx. The other one has to\nread the value from rcx and it comes later.",
    "start": "3807060",
    "end": "3813340"
  },
  {
    "text": "That other instruction\nhas to wait until that value is written\nthere before it can read it. That's a data hazard.",
    "start": "3813340",
    "end": "3819430"
  },
  {
    "text": "And a control\nhazard is where you",
    "start": "3819430",
    "end": "3824950"
  },
  {
    "text": "decide that you\nneed to make a jump and you can't execute\nthe next instruction, because you don't know which\nway the jump is going to go.",
    "start": "3824950",
    "end": "3832922"
  },
  {
    "text": "So if you have a\nconditional jump, it's like, well, what's the next\ninstruction after that jump? I don't know.",
    "start": "3832923",
    "end": "3838230"
  },
  {
    "text": "So I have to wait\nto execute that. I can't go ahead and\ndo the jump and then do the next instruction after\nit, because I don't know what",
    "start": "3838230",
    "end": "3844420"
  },
  {
    "text": "happened to the previous one.  Now of these, we're going to\nmostly talk about data hazards.",
    "start": "3844420",
    "end": "3853970"
  },
  {
    "text": "So an instruction can\ncreate a data hazard-- I can create a data hazard\ndue to a dependence between i",
    "start": "3853970",
    "end": "3860060"
  },
  {
    "text": "and j. So the first type is\ncalled a true dependence, or I read after\nwrite dependence.",
    "start": "3860060",
    "end": "3868819"
  },
  {
    "text": "And this is where,\nas in this example, I'm adding something\nand storing into rax and the next instruction\nwants to read from rax.",
    "start": "3868820",
    "end": "3875660"
  },
  {
    "text": " So the second\ninstruction can't get",
    "start": "3875660",
    "end": "3880700"
  },
  {
    "text": "going until the\nprevious one or it may stall until the result of\nthe previous one is known.",
    "start": "3880700",
    "end": "3888153"
  },
  {
    "text": "There's another one\ncalled an anti-dependence. This is where I want to\nwrite into a location, but I have to wait until the\nprevious instruction has read",
    "start": "3888153",
    "end": "3896250"
  },
  {
    "text": "the value, because\notherwise I'm going to clobber that\ninstruction and clobber",
    "start": "3896250",
    "end": "3902700"
  },
  {
    "text": "the value before it gets read. so that's an anti-dependence.",
    "start": "3902700",
    "end": "3908670"
  },
  {
    "text": "And then the final one\nis an output dependence, where they're both trying to\nmove something to are rax.",
    "start": "3908670",
    "end": "3918050"
  },
  {
    "text": "So why would two things\nwant to move things to the same location?",
    "start": "3918050",
    "end": "3924410"
  },
  {
    "text": "After all, one of them is going\nto be lost and just not do that instruction.",
    "start": "3924410",
    "end": "3931000"
  },
  {
    "text": "Why wouldn't-- AUDIENCE: Set some flags. CHARLES LEISERSON:\nYeah, maybe because it wants to set some flags.",
    "start": "3931000",
    "end": "3937030"
  },
  {
    "text": "So that's one reason\nthat it might do this, because you know the\nfirst instruction set",
    "start": "3937030",
    "end": "3943000"
  },
  {
    "text": "some flags in addition to moving\nthe output to that location. And there's one other reason.",
    "start": "3943000",
    "end": "3949380"
  },
  {
    "text": "What's the other reason?  I'm blanking.",
    "start": "3949380",
    "end": "3955040"
  },
  {
    "text": "There's two reasons. And I didn't put\nthem in my notes. ",
    "start": "3955040",
    "end": "3963590"
  },
  {
    "text": "I don't remember. OK, but anyway, that's a\ngood question for quiz then.",
    "start": "3963590",
    "end": "3968710"
  },
  {
    "text": " OK, give me two reasons-- yeah. AUDIENCE: Can there be\nintermediate instructions",
    "start": "3968710",
    "end": "3977008"
  },
  {
    "text": "like between those [INAUDIBLE] CHARLES LEISERSON: There\ncould, but of course then if it's going to\nuse that register, then--",
    "start": "3977008",
    "end": "3986880"
  },
  {
    "text": "oh, I know the other reason. So this is still\ngood for a quiz. The other reason is there\nmay be aliasing going on.",
    "start": "3986880",
    "end": "3993480"
  },
  {
    "text": "Maybe an intervening\ninstruction uses one of the values in its aliasist.",
    "start": "3993480",
    "end": "4000260"
  },
  {
    "text": "So uses part of the result\nor whatever, there still could be a dependency.",
    "start": "4000260",
    "end": "4007110"
  },
  {
    "text": "Anyway, some\narithmetic operations",
    "start": "4007110",
    "end": "4012890"
  },
  {
    "text": "are complex to\nimplement in hardware and have long latencies. So here's some sample opcodes\nand how many latency they take.",
    "start": "4012890",
    "end": "4023270"
  },
  {
    "text": "They take a different number. So, for example, integer\ndivision actually is variable,",
    "start": "4023270",
    "end": "4028600"
  },
  {
    "text": "but a multiply takes\nabout three times what most of the integer\noperations are. And floating-point\nmultiply is like 5.",
    "start": "4028600",
    "end": "4036050"
  },
  {
    "text": "And then fma, what's fma?  Fused multiply add.",
    "start": "4036050",
    "end": "4042390"
  },
  {
    "text": "This is where you're doing\nboth a multiply and an add. And why do we care about\nfuse multiply adds? ",
    "start": "4042390",
    "end": "4050173"
  },
  {
    "text": "AUDIENCE: For memory\naccessing and [INAUDIBLE] CHARLES LEISERSON: Not\nfor memory accessing. This is actually floating-point\nmultiply and add.",
    "start": "4050174",
    "end": "4056210"
  },
  {
    "text": " It's called linear algebra.",
    "start": "4056210",
    "end": "4063190"
  },
  {
    "text": "So when you do major\nmultiplication, you're doing dot product. You're doing\nmultiplies and adds.",
    "start": "4063190",
    "end": "4068290"
  },
  {
    "text": "So that kind of thing, that's\nwhere you do a lot of those. So how does the\nhardware accommodate",
    "start": "4068290",
    "end": "4074710"
  },
  {
    "text": "these complex operations? So the strategy that much\nhardware tends to use",
    "start": "4074710",
    "end": "4082210"
  },
  {
    "text": "is to have separate functional\nunits for complex operations, such as floating-point\narithmetic.",
    "start": "4082210",
    "end": "4087490"
  },
  {
    "text": "So there may be in fact\nseparate registers, for example, the XMM\nregisters, that only",
    "start": "4087490",
    "end": "4093040"
  },
  {
    "text": "work with the floating point. So you have your basic\n5-stage pipeline. You have another pipeline\nthat's off on the side.",
    "start": "4093040",
    "end": "4098979"
  },
  {
    "text": "And it's going to take\nmultiple cycles sometimes for things and maybe pipeline\nto a different depth.",
    "start": "4098979",
    "end": "4106220"
  },
  {
    "text": "And so you basically\nseparate these operations.",
    "start": "4106220",
    "end": "4113028"
  },
  {
    "text": "The functional units\nmay be pipelined, fully, partially, or not at all.",
    "start": "4113029",
    "end": "4118560"
  },
  {
    "text": "And so I now have a whole bunch\nof different functional units,",
    "start": "4118560",
    "end": "4124623"
  },
  {
    "text": "and there's different\npaths that I'm going to be able to take through\nthe data path of the processor.",
    "start": "4124623",
    "end": "4132330"
  },
  {
    "text": "So in Haswell, they have\ninteger vector floating-point distributed among eight\ndifferent ports, which",
    "start": "4132330",
    "end": "4139910"
  },
  {
    "text": "is sort from the entry. So given that, things\nget really complicated.",
    "start": "4139910",
    "end": "4147470"
  },
  {
    "text": "If we go back to\nour simple diagram, suppose we have all these\nadditional functional units,",
    "start": "4147470",
    "end": "4154790"
  },
  {
    "text": "how can I now exploit more\ninstruction-level parallelism?",
    "start": "4154790",
    "end": "4161970"
  },
  {
    "text": "So right now, we can start\nup one operation at a time.",
    "start": "4161970",
    "end": "4167060"
  },
  {
    "text": "What might I do to get more\nparallelism out of the hardware that I've got?",
    "start": "4167060",
    "end": "4173098"
  },
  {
    "start": "4173098",
    "end": "4179080"
  },
  {
    "text": "What do you think\ncomputer architects did?  OK. AUDIENCE: It's a guess but, you\ncould glue together [INAUDIBLE]",
    "start": "4179080",
    "end": "4189789"
  },
  {
    "text": "CHARLES LEISERSON: Yeah, so\neven simpler than that, but which is implied in\nwhat you're saying, is you can just fetch and\nissue multiple instructions",
    "start": "4189790",
    "end": "4199360"
  },
  {
    "text": "per cycle. So rather than just\ndoing one per cycle as we showed with a\ntypical pipeline processor,",
    "start": "4199360",
    "end": "4205610"
  },
  {
    "text": "let me fetch several\nthat use different parts of the processor pipeline,\nbecause they're not going to interfere, to\nkeep everything busy.",
    "start": "4205610",
    "end": "4214970"
  },
  {
    "text": "And so that's basically\nwhat's called a super scalar processor, where it's not\nexecuting one thing at a time.",
    "start": "4214970",
    "end": "4220429"
  },
  {
    "text": "It's executing multiple\nthings at a time. So Haswell, in fact,\nbreaks up the instructions",
    "start": "4220430",
    "end": "4227360"
  },
  {
    "text": "into simpler operations,\ncalled micro-ops. And they can emit for\nmicro-ops per cycle",
    "start": "4227360",
    "end": "4233390"
  },
  {
    "text": "to the rest of the pipeline. And the fetch and decode\nstages implement optimizations on micro-op processing,\nincluding special cases",
    "start": "4233390",
    "end": "4241850"
  },
  {
    "text": "for common patents. For example, if it sees\nthe XOR of rax and rax,",
    "start": "4241850",
    "end": "4247400"
  },
  {
    "text": "it knows that rax\nis being set to 0. It doesn't even use a\nfunctional unit for that.",
    "start": "4247400",
    "end": "4253120"
  },
  {
    "text": "It just does it and it's done. It has just a special\nlogic that observes",
    "start": "4253120",
    "end": "4258820"
  },
  {
    "text": "that because it's such a\ncommon thing to set things out. And so that means that now\nyour processor can execute",
    "start": "4258820",
    "end": "4265030"
  },
  {
    "text": "a lot of things at one time. And that's the machines\nthat you're doing. That's why when I said if\nyou save one add instruction,",
    "start": "4265030",
    "end": "4272450"
  },
  {
    "text": "it probably doesn't\nmake any difference in today's processor,\nbecause there's probably an idle adder lying around.",
    "start": "4272450",
    "end": "4278050"
  },
  {
    "text": "There's probably a-- did\nI read caught how many-- where do we go here?",
    "start": "4278050",
    "end": "4284560"
  },
  {
    "text": "Yeah, so if you look\nhere, you can even discover that there are\nactually a bunch of ALUs that",
    "start": "4284560",
    "end": "4291220"
  },
  {
    "text": "are capable of doing an add. So they're all over\nthe map in Haswell.",
    "start": "4291220",
    "end": "4298730"
  },
  {
    "text": " Now, still, we are insisting\nthat the processors execute",
    "start": "4298730",
    "end": "4306020"
  },
  {
    "text": "in things in order. And that's kind of the\nnext stage is, how do you end up making things run--",
    "start": "4306020",
    "end": "4315065"
  },
  {
    "text": " that is, how do you make it\nso that you can free yourself",
    "start": "4315065",
    "end": "4324380"
  },
  {
    "text": "from the tyranny of one\ninstruction after the other? And so the first\nthing is there's",
    "start": "4324380",
    "end": "4331520"
  },
  {
    "text": "a strategy called bypassing. So suppose that you have\ninstructions running into rax.",
    "start": "4331520",
    "end": "4339500"
  },
  {
    "text": "And then you're going\nto use that to read. Well, why bother waiting for it\nto be stored into the register",
    "start": "4339500",
    "end": "4347449"
  },
  {
    "text": "file and then pulled back out\nfor the second instruction? Instead, let's have a\nbypass, a special circuit",
    "start": "4347450",
    "end": "4356690"
  },
  {
    "text": "that identifies that\nkind of situation and feeds it directly\nto the next instruction",
    "start": "4356690",
    "end": "4362900"
  },
  {
    "text": "without requiring that it\ngo into the register file and back out. So that's called bypassing.",
    "start": "4362900",
    "end": "4368935"
  },
  {
    "text": "There are lots of places\nwhere things are bypassed. And we'll talk about it more. So normally, you\nwould stall waiting",
    "start": "4368935",
    "end": "4375500"
  },
  {
    "text": "for it to be written back. And now, when you\neliminate it, now I can move it way\nforward, because I just",
    "start": "4375500",
    "end": "4382250"
  },
  {
    "text": "use the bypass path to execute. And it allows the\nsecond instruction",
    "start": "4382250",
    "end": "4388100"
  },
  {
    "text": "to get going earlier.  What else can we do?",
    "start": "4388100",
    "end": "4393940"
  },
  {
    "text": "Well, let's take a\nlarge code example. Given the amount\nof time, what I'm",
    "start": "4393940",
    "end": "4399260"
  },
  {
    "text": "going to do is\nbasically say, you can go through and\nfigure out what are the read after\nwrite dependencies",
    "start": "4399260",
    "end": "4404930"
  },
  {
    "text": "and the write after\nread dependencies. They're all over the place. And what you can\ndo is if you look",
    "start": "4404930",
    "end": "4413210"
  },
  {
    "text": "at what the dependencies are\nthat I just flashed through, you can discover, oh,\nthere's all these things.",
    "start": "4413210",
    "end": "4418910"
  },
  {
    "text": "Each one right now has to\nwait for the previous one",
    "start": "4418910",
    "end": "4424220"
  },
  {
    "text": "before it can get started. But there are\nsome-- for example,",
    "start": "4424220",
    "end": "4429699"
  },
  {
    "text": "the first one is\njust issue order. You can't start the second-- if it's in order, you\ncan't start the second",
    "start": "4429700",
    "end": "4435440"
  },
  {
    "text": "till you've started\nthe first, that it's finished the first stage. But the other thing\nhere is there's",
    "start": "4435440",
    "end": "4441320"
  },
  {
    "text": "a data dependence between the\nsecond and third instructions. So if you look at the second\nand third instructions,",
    "start": "4441320",
    "end": "4448040"
  },
  {
    "text": "they're both using XMM2. And so we're prevented.",
    "start": "4448040",
    "end": "4453195"
  },
  {
    "text": "So one of the questions\nthere is, well, why not do a little bit better\nby taking a look at this",
    "start": "4453195",
    "end": "4459520"
  },
  {
    "text": "as a graph and\nfiguring out what's the best way through the graph? And there are a bunch of\ntricks you can do there,",
    "start": "4459520",
    "end": "4464920"
  },
  {
    "text": "which I'll run through\nhere very quickly. And you can take\na look at these.",
    "start": "4464920",
    "end": "4471740"
  },
  {
    "text": "You can discover that\nsome of these dependencies are not real dependence. And as long as you're willing\nto execute things out of order",
    "start": "4471740",
    "end": "4477910"
  },
  {
    "text": "and keep track of that,\nit's perfectly fine. If you're not actually\ndependent on it,",
    "start": "4477910",
    "end": "4483550"
  },
  {
    "text": "then just go ahead\nand execute it. And then you can advance things. And then the other\ntrick you can use is what's called\nregister renaming.",
    "start": "4483550",
    "end": "4490360"
  },
  {
    "text": "If you have a destination\nthat's going to be read from-- sorry, if I want to\nwrite to something,",
    "start": "4490360",
    "end": "4500889"
  },
  {
    "text": "but I have to wait for\nsomething else to read from it, the write after read\ndependence, then what",
    "start": "4500890",
    "end": "4508119"
  },
  {
    "text": "I can do is just\nrename the register, so that I have\nsomething to write to that is the same thing.",
    "start": "4508120",
    "end": "4515590"
  },
  {
    "text": "And there's a very\ncomplex mechanism called score boarding that does that.",
    "start": "4515590",
    "end": "4521380"
  },
  {
    "text": "So anyway, you can take a\nlook at all of these tricks. And then the last\nthing that I want",
    "start": "4521380",
    "end": "4527440"
  },
  {
    "text": "to-- so this is this part\nI was going to skip over. And indeed, I don't\nhave time to do it. I just want to mention the last\nthing, which is worthwhile.",
    "start": "4527440",
    "end": "4535730"
  },
  {
    "text": "So this-- you don't\nhave to know any of the details of that part. But it's in there if\nyou're interested.",
    "start": "4535730",
    "end": "4541849"
  },
  {
    "text": "So it does renaming\nand reordering. And then the last thing\nI do want to mention is branch prediction.",
    "start": "4541850",
    "end": "4547010"
  },
  {
    "text": "So when you come to branch\nprediction, the outcome, you can have a hazard because\nthe outcome is known too late.",
    "start": "4547010",
    "end": "4554350"
  },
  {
    "text": "And so in that\ncase, what they do is what's called\nspeculative execution, which",
    "start": "4554350",
    "end": "4561010"
  },
  {
    "text": "you've probably heard of. So basically that says I'm\ngoing to guess the outcome of the branch and execute.",
    "start": "4561010",
    "end": "4567969"
  },
  {
    "text": "If it's encountered,\nyou assume it's taken and you execute normally.",
    "start": "4567970",
    "end": "4573790"
  },
  {
    "text": "And if you're right,\neverything is hunky dory. If you're wrong, it cost\nyou something like a--",
    "start": "4573790",
    "end": "4579430"
  },
  {
    "text": " you have to undo that\nspeculative computation",
    "start": "4579430",
    "end": "4586480"
  },
  {
    "text": "and the effect is\nsort of like stalling. So you don't want\nthat to happen.",
    "start": "4586480",
    "end": "4591560"
  },
  {
    "text": "And so a mispredicted\nbranch on Haswell costs about 15 to 20 cycles.",
    "start": "4591560",
    "end": "4599260"
  },
  {
    "text": "Most of the machines\nuse a branch predictor to tell whether or\nnot it's going to do. There's a little\nbit of stuff here",
    "start": "4599260",
    "end": "4605177"
  },
  {
    "text": "about how you tell about\nwhether a branch is going to be predicted or not.",
    "start": "4605177",
    "end": "4612280"
  },
  {
    "text": "And you can take a look\nat that on your own. So sorry to rush a\nlittle bit the end, but I knew I wasn't going\nto get through all of this.",
    "start": "4612280",
    "end": "4619360"
  },
  {
    "text": "But it's in the notes, in\nthe slides when we put it up. And this is really kind\nof interesting stuff.",
    "start": "4619360",
    "end": "4625960"
  },
  {
    "text": "Once again, remember that I'm\ndealing with this at one level below what you\nreally need to do.",
    "start": "4625960",
    "end": "4631270"
  },
  {
    "text": "But it is really helpful\nto understand that layer so you have a deep understanding\nof why certain software",
    "start": "4631270",
    "end": "4637000"
  },
  {
    "text": "optimizations work\nand don't work. Sound good? OK, good luck on finishing\nyour project 1's.",
    "start": "4637000",
    "end": "4644310"
  },
  {
    "start": "4644310",
    "end": "4654276"
  }
]