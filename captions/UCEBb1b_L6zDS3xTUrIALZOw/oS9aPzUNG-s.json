[
  {
    "start": "0",
    "end": "60000"
  },
  {
    "text": "[SQUEAKING]\n[RUSTLING] [CLICKING]",
    "start": "0",
    "end": "12220"
  },
  {
    "text": "JUSTIN: OK. So it's a pleasure to\nsee all of you guys. I'm Justin. I'm your third\ninstructor for 6.006.",
    "start": "12220",
    "end": "20700"
  },
  {
    "text": "This is my first time\nwith this course. Although, of course,\nthis is material that we all know and love in the\ncomputer science department.",
    "start": "20700",
    "end": "27660"
  },
  {
    "text": "I'll admit, I find the\nprospect of teaching sorting to 400 people\nall at once is mildly,",
    "start": "27660",
    "end": "32910"
  },
  {
    "text": "low key terrifying. But we're going\nto give it a shot. And hopefully, that will subside\nas the lecture goes on today,",
    "start": "32910",
    "end": "38519"
  },
  {
    "text": "all right? So we're going to pick up where\nwe left off in our last lecture and continue on\nwith a similar theme",
    "start": "38520",
    "end": "45300"
  },
  {
    "text": "that we're going to see\nthroughout our algorithms class here in 6.006. I think Jason and\ncolleagues have",
    "start": "45300",
    "end": "51480"
  },
  {
    "text": "done a really great job\nof organizing this class around some interesting themes. And so I thought I'd start\nwith just a tiny bit of review",
    "start": "51480",
    "end": "58649"
  },
  {
    "text": "of some key vocabulary words. Incidentally, typically, I\nteach the intro graphics class,",
    "start": "58650",
    "end": "64030"
  },
  {
    "start": "60000",
    "end": "120000"
  },
  {
    "text": "the geometry course. And last year, I\ngot feedback that said I have serial\nkiller handwriting. I'm not 100% sure\nwhat that means.",
    "start": "64030",
    "end": "71619"
  },
  {
    "text": "But we're going to use\nthe slides a tiny bit more than normal, just to make\nsure you guys can read. And when I'm writing\non the board,",
    "start": "71620",
    "end": "77407"
  },
  {
    "text": "at any point, if you\ncan't tell what I wrote, it's definitely me and not you. So just let me know.",
    "start": "77407",
    "end": "83590"
  },
  {
    "text": "But in any event, in 6.006, all\nthe way back in our lecture 1-- I know that was\na long time ago--",
    "start": "83590",
    "end": "89860"
  },
  {
    "text": "we introduced two big keywords\nthat are closely related, but not precisely the same.",
    "start": "89860",
    "end": "95460"
  },
  {
    "text": "Hopefully, I've\ngotten this right. But roughly,\nthere's a theme here which is that there's an object\ncalled an interface, which is",
    "start": "95460",
    "end": "102960"
  },
  {
    "text": "just a program specification. It's just telling\nus that there's a collection of operations\nthat we want to implement.",
    "start": "102960",
    "end": "108939"
  },
  {
    "text": "So for example, a set, as\nwe're going to see today, is like a big pile of things. And behind the scenes,\nhow I choose to implement",
    "start": "108940",
    "end": "116550"
  },
  {
    "text": "it can affect the runtime\nand how efficient my set is. But the actual way\nthat I interact with it",
    "start": "116550",
    "end": "122850"
  },
  {
    "start": "120000",
    "end": "192000"
  },
  {
    "text": "is the same, whether I use an\nunsorted array, a sorted array, what have you. On the other hand, what\nhappens behind the scenes",
    "start": "122850",
    "end": "130349"
  },
  {
    "text": "is something called\na data structure, which is a way to\nactually, in some sense, implement an interface.",
    "start": "130350",
    "end": "135900"
  },
  {
    "text": "So this is the object\nthat on my computer is actually storing\nthe information and implementing the\nset of operations",
    "start": "135900",
    "end": "142260"
  },
  {
    "text": "that I've laid out\nin my interface. And so this sort of\ndistinction, I think, is a critical theme\nin this course",
    "start": "142260",
    "end": "149370"
  },
  {
    "text": "because, for instance, in\nthe first couple weeks, we're going to talk about many\ndifferent ways to implement a set. I'm going to see that\nthere's a bunch of tradeoffs.",
    "start": "149370",
    "end": "155970"
  },
  {
    "text": "Some of them are really\nfast for certain operations and slow for others. And so essentially, we have\ntwo different decisions",
    "start": "155970",
    "end": "162659"
  },
  {
    "text": "to make when we\nchoose an algorithm. One is making sure\nthat the interface is correct for the problem\nthat we're concerned with.",
    "start": "162660",
    "end": "168540"
  },
  {
    "text": "And the other is choosing an\nappropriate data structure whose efficiency, and memory\nusage, and so on aligns",
    "start": "168540",
    "end": "175548"
  },
  {
    "text": "with the priorities that we\nhave for the application we have in mind. So hopefully, this high\nlevel theme makes sense.",
    "start": "175548",
    "end": "181270"
  },
  {
    "text": "And really, spiritually, I\nthink this is the main message to get out of this course in\nthe first couple of weeks,",
    "start": "181270",
    "end": "186700"
  },
  {
    "text": "even though these\nO's, and thetas, and so on are easy to lose\nthe forest through the trees.",
    "start": "186700",
    "end": "192660"
  },
  {
    "start": "192000",
    "end": "263000"
  },
  {
    "text": "In any event, today,\nin our lecture, we're concerned with one\nparticular interface,",
    "start": "192660",
    "end": "197793"
  },
  {
    "text": "which is called a set. A set is exactly\nwhat it sounds like. It's a big pile of things.",
    "start": "197793",
    "end": "202840"
  },
  {
    "text": "And so a set interface\nis like an object that just you can keep\nadding things to it.",
    "start": "202840",
    "end": "208440"
  },
  {
    "text": "And then querying inside of\nmy set, is this object here? Can I find it? And then maybe I\nassociate with my objects",
    "start": "208440",
    "end": "215110"
  },
  {
    "text": "in my set different information. So for example,\nmaybe I have a set which represents all the\nstudents in our classroom",
    "start": "215110",
    "end": "220950"
  },
  {
    "text": "today. Yeah, and all of you guys are\nassociated with your student ID, which I believe\nat MIT is a number,",
    "start": "220950",
    "end": "228480"
  },
  {
    "text": "which has less than sign,\nwhich is convenient. So we can sort all of you guys. And that might be the\nkey that's associated",
    "start": "228480",
    "end": "234180"
  },
  {
    "text": "to every object in the room. And so when I'm\nsearching for students, maybe I enter in\nthe student number.",
    "start": "234180",
    "end": "239970"
  },
  {
    "text": "And then I want to ask\nmy set, does this number exist in the set of\nstudents that are in 6.006?",
    "start": "239970",
    "end": "245700"
  },
  {
    "text": "And if it does, then I can\npull that student back. And then associated\nwith that object is a bunch of other information\nthat I'm not using to search--",
    "start": "245700",
    "end": "252183"
  },
  {
    "text": "so for instance,\nyour name, your-- I don't know-- your social\nsecurity number, your credit card number, all the\nother stuff that I",
    "start": "252183",
    "end": "257825"
  },
  {
    "text": "need to have a more\ninteresting profession. So in any event, let's fill\nin the details of our set",
    "start": "257825",
    "end": "266940"
  },
  {
    "start": "263000",
    "end": "380000"
  },
  {
    "text": "interface a little bit more. So our set is a container. It contains all of the\nstudents in this classroom,",
    "start": "266940",
    "end": "274710"
  },
  {
    "text": "in some virtual sense at least. And so to build up\nour set, of course,",
    "start": "274710",
    "end": "280150"
  },
  {
    "text": "we need an operation that\ntakes some iterable object A and builds a set out of it. So in other words, I\nhave all the students",
    "start": "280150",
    "end": "287039"
  },
  {
    "text": "in this classroom represented\nmaybe in some other fashion. And I have to insert\nthem all into my set.",
    "start": "287040",
    "end": "292050"
  },
  {
    "text": "I can also ask my set for\nhow much stuff is in it. Personally, I would\ncall that size. But length is cool, too.",
    "start": "292050",
    "end": "298272"
  },
  {
    "text": "And then of course, there\nare a lot of different ways that we can interact\nwith our set. So for instance, we could say,\nis this student taking 6.006?",
    "start": "298272",
    "end": "308400"
  },
  {
    "text": "So in set language, one\nway to understand that is to say that the key--",
    "start": "308400",
    "end": "313460"
  },
  {
    "text": "each person in this classroom\nis associated with a key. Does that key k exist in my set?",
    "start": "313460",
    "end": "319460"
  },
  {
    "text": "In which case, I'll\ncall this find function, which will give me back the\nitem with key k or maybe null",
    "start": "319460",
    "end": "326420"
  },
  {
    "text": "or something if\nit doesn't exist. Maybe I can delete an object\nfrom my set or insert it.",
    "start": "326420",
    "end": "333770"
  },
  {
    "text": "Notice that these are\ndynamic operations, meaning that they actually\nedit what's inside of my set.",
    "start": "333770",
    "end": "339690"
  },
  {
    "text": "And then finally, there are all\nkinds of different operations that I might want to do to\ninteract with my set beyond",
    "start": "339690",
    "end": "345319"
  },
  {
    "text": "is this thing inside of it. So for instance, so for\nthe student ID example,",
    "start": "345320",
    "end": "351680"
  },
  {
    "text": "probably finding the\nminimum ID number in a class isn't a terribly\nexciting exercise. But maybe I'm trying to\nfind the student who's",
    "start": "351680",
    "end": "357917"
  },
  {
    "text": "been at MIT the longest. And so that would be a\nreasonable heuristic. I actually have no idea\nwhether MIT student IDs",
    "start": "357917",
    "end": "363919"
  },
  {
    "text": "are assigned linearly or not. But in any event, I could find\nthe smallest key, the largest",
    "start": "363920",
    "end": "369680"
  },
  {
    "text": "key, and so on in my set. And these are all\nreasonable operations to query, where\nmy object is just",
    "start": "369680",
    "end": "376040"
  },
  {
    "text": "a thing that stores a lot of\ndifferent entities inside it. Now, this description here--",
    "start": "376040",
    "end": "382490"
  },
  {
    "start": "380000",
    "end": "438000"
  },
  {
    "text": "notice that I've labeled\nthis as a set interface. This is not a set\ndata structure.",
    "start": "382490",
    "end": "388270"
  },
  {
    "text": "And the way to remember that\nis that I haven't told you how I've actually implemented this. I haven't told you that I'm\ngoing to behind the scenes",
    "start": "388270",
    "end": "395630"
  },
  {
    "text": "have an array of information,\nand look inside of it, and that's how I'm going to\nimplement find min or find max",
    "start": "395630",
    "end": "401110"
  },
  {
    "text": "with a for loop or whatever. All I'm telling you is\nthat a set is a thing that implements these operations. And behind the scenes, my\ncomputer does what it does.",
    "start": "401110",
    "end": "408640"
  },
  {
    "text": "Now, it might sound abstract. But it's more or\nless what you guys do when you write code in Python. I think in Python\nwhat we're calling",
    "start": "408640",
    "end": "416110"
  },
  {
    "text": "a set is maybe a dictionary. I'm a Matlab Coder. I'm sorry. I'm a numerical\nanalysis kind of guy.",
    "start": "416110",
    "end": "422020"
  },
  {
    "text": "But essentially, one\nof the beautiful things about coding in these high\nlevel programming languages",
    "start": "422020",
    "end": "428800"
  },
  {
    "text": "is that they take care\nof these ugly details. And what you're\nleft with is just the high level interfacing\nwith this object",
    "start": "428800",
    "end": "436420"
  },
  {
    "text": "that you need at\nthe end of the day. So of course, in today's\nlecture, now that we set out",
    "start": "436420",
    "end": "441550"
  },
  {
    "start": "438000",
    "end": "470000"
  },
  {
    "text": "our goal, which is to fill in-- if I wanted to write code\nfor a set, how could I do it?",
    "start": "441550",
    "end": "447258"
  },
  {
    "text": "Now, of course, our goal is to\ngive different data structures that implement these,\nand then understand them in terms of their efficiency,\ndata storage, correctness,",
    "start": "447258",
    "end": "454750"
  },
  {
    "text": "all that good stuff. So before we get into\nall these ugly details, let me pause for a second.",
    "start": "454750",
    "end": "460740"
  },
  {
    "text": "Are there any questions\nabout this basic interface? You all should feel\nfree to stop me any time",
    "start": "460740",
    "end": "466140"
  },
  {
    "text": "because this is going to be\nhella boring if you're not getting the first slide or two. Yes?",
    "start": "466140",
    "end": "472304"
  },
  {
    "start": "470000",
    "end": "530000"
  },
  {
    "text": "AUDIENCE: Can you\nexplain how [INAUDIBLE].. ",
    "start": "472304",
    "end": "481080"
  },
  {
    "text": "JUSTIN: That's a good question. So the question\nwas, what exactly is this insert operation doing?",
    "start": "481080",
    "end": "486270"
  },
  {
    "text": "That's why working\non the analogy of the students in this\nclassroom is a reasonable one. So I'm going to build up an\nobject, which is a student.",
    "start": "486270",
    "end": "493600"
  },
  {
    "text": "So in this lecture notes, I\nthink we've been consistent. I caught one or two typos. We're going to think of x\nas the object that contains",
    "start": "493600",
    "end": "500050"
  },
  {
    "text": "all of the information. And then associated\nwith that is one piece, which is called the key.",
    "start": "500050",
    "end": "505555"
  },
  {
    "text": "That's where we're\ngoing to use a letter k. And that's like your student ID. That's the thing I'm\ngoing to use to search.",
    "start": "505555",
    "end": "511340"
  },
  {
    "text": "So what the Insert\noperation does that takes this\nwhole student object x, which includes your ID, your\nname, your phone number, all",
    "start": "511340",
    "end": "517789"
  },
  {
    "text": "that good stuff, and\ninserts it into the set with the understanding\nthat when I search my set, I'm going to be\nsearching by key.",
    "start": "517789",
    "end": "523995"
  },
  {
    "text": "So when I want to\nfind a student, I have to put in my ID number. Does that makes sense?",
    "start": "523995",
    "end": "529660"
  },
  {
    "text": "Cool. Any other questions? That's great. Fabulous. OK.",
    "start": "529660",
    "end": "534920"
  },
  {
    "start": "530000",
    "end": "672000"
  },
  {
    "text": "So now, let's talk about how to\nactually implement this thing. And thankfully, we're already\nequipped with at least a very",
    "start": "534920",
    "end": "541640"
  },
  {
    "text": "simple way that we can implement\na set based on what you've already seen in your previous\nprogramming classes or even",
    "start": "541640",
    "end": "547280"
  },
  {
    "text": "just in the last two lectures,\nwhich is one way to understand a set or to implement it\nrather would be to just store",
    "start": "547280",
    "end": "554150"
  },
  {
    "text": "a giant array of objects\nthat are in my set.",
    "start": "554150",
    "end": "561080"
  },
  {
    "text": "I suppose continuing with the\ntheme of the last two lectures, this is not a space\nin memory, but rather",
    "start": "561080",
    "end": "566300"
  },
  {
    "text": "a metaphorical array,\na theoretical array. But it doesn't really matter.",
    "start": "566300",
    "end": "571380"
  },
  {
    "text": "And so one way to\nstore my set would be to just store a bunch of\nx's in no particular order.",
    "start": "571380",
    "end": "579920"
  },
  {
    "text": "Does that make sense? So I have a big piece of memory. Every piece of\nmemory is associated with a different\nobject in my set.",
    "start": "579920",
    "end": "586010"
  },
  {
    "text": "Obviously, this is\nquite easy to build. I just make a big array and\ndump everything in there.",
    "start": "586010",
    "end": "591140"
  },
  {
    "text": "And the question is, is\nthis particularly efficient or a useful way to\nimplement a set?",
    "start": "591140",
    "end": "597400"
  },
  {
    "text": "So for instance,\nlet's say that I have a set of all the\nstudents in this classroom.",
    "start": "597400",
    "end": "603118"
  },
  {
    "text": "There's some ridiculous\nnumber of you guys. So actually, asymptotic\nefficiency maybe actually matters a little bit.",
    "start": "603118",
    "end": "608960"
  },
  {
    "text": "And I want to query, does this\nstudent exist in my class? Is Erik Demaine taking 6.006?",
    "start": "608960",
    "end": "616310"
  },
  {
    "text": "The answer is no, I think. Teaching, taking? I don't know. But in any event,\nhow do I implement it",
    "start": "616310",
    "end": "623330"
  },
  {
    "text": "if my set is unordered? We'll think about\nit for a second.",
    "start": "623330",
    "end": "628970"
  },
  {
    "text": "Yeah? AUDIENCE: [INAUDIBLE]",
    "start": "628970",
    "end": "635580"
  },
  {
    "text": "JUSTIN: It's actually an\ninteresting suggestion, which is going to anticipate\nwhat's happening later in this lecture, which was\nto sort the set and then",
    "start": "635580",
    "end": "642240"
  },
  {
    "text": "binary search. But let's say that actually\nI only have to do this once. For some reason, I built up\na whole set of the people",
    "start": "642240",
    "end": "647370"
  },
  {
    "text": "in this classroom. And I just want to know, is\nErik Demaine in this class? So then that algorithm\nwould take n log n time",
    "start": "647370",
    "end": "653759"
  },
  {
    "text": "because I've got\nto sort everybody. And then I have to do\nbinary search, which is maybe log n time.",
    "start": "653760",
    "end": "659310"
  },
  {
    "text": "But I claim that, if the\nonly thing I care about is building up my entire\nset and searching it once, there's actually a\nfaster algorithm.",
    "start": "659310",
    "end": "664980"
  },
  {
    "text": "This is going to be needlessly\nconfusing because we're going to see that this is really\nnot the right way to implement it in about 38 seconds.",
    "start": "664980",
    "end": "671550"
  },
  {
    "text": "Yes? AUDIENCE: [INAUDIBLE] JUSTIN: Yeah. Just iterate from beginning\nto this array and say, is this guy Erik?",
    "start": "671550",
    "end": "677060"
  },
  {
    "text": "No. Is this guy Erik? No. Is this guy Erik? Yes. And then return it.",
    "start": "677060",
    "end": "682540"
  },
  {
    "text": "So in the worst case, how\nlong will that algorithm take? Well, in the worst case\nof really bad luck,",
    "start": "682540",
    "end": "689530"
  },
  {
    "text": "your instructor is all the\nway at the end of the list. So in this case, what\nis that going to mean?",
    "start": "689530",
    "end": "695480"
  },
  {
    "text": "That means that I have to\nwalk along the entire array before I find him. So that algorithm\ntakes order n time.",
    "start": "695480",
    "end": "702020"
  },
  {
    "text": "And so your\ncolleague's intuition that somehow this\nis quite inefficient is absolutely correct. If I know that I'm\ngoing to have to search",
    "start": "702020",
    "end": "708340"
  },
  {
    "text": "my array many, many times for\ndifferent people, then probably it makes sense to do a little\nbit of work ahead of time,",
    "start": "708340",
    "end": "713593"
  },
  {
    "text": "like sorting the list. And then my query is\nmuch more efficient. But this is all just to say\nthat an unordered array is",
    "start": "713593",
    "end": "720710"
  },
  {
    "text": "a perfectly reasonable way to\nimplement this set interface. And then searching that array\nit will take linear time",
    "start": "720710",
    "end": "727010"
  },
  {
    "text": "every single time I search. And of course, if\nyou go down your list of all of the different\noperations you might",
    "start": "727010",
    "end": "733253"
  },
  {
    "start": "728000",
    "end": "843000"
  },
  {
    "text": "want to do on a set, you'll see\nthat they all take linear time. So for instance, how\ndo I build myself?",
    "start": "733253",
    "end": "738510"
  },
  {
    "text": "Well, I have to reserve\nn slots in memory. And at least\naccording to our model",
    "start": "738510",
    "end": "745250"
  },
  {
    "text": "of computation in this class,\nthat takes order n time. Then I'm going to copy\neverything into the set.",
    "start": "745250",
    "end": "751070"
  },
  {
    "text": "Similarly, if I want\nto insert or delete, what do I have to do? Well, I have to reserve\nmemory, stick something",
    "start": "751070",
    "end": "757003"
  },
  {
    "text": "inside of there. In the worst case, we saw\nthis amortize argument before, if your set is allowed\nto grow dynamically.",
    "start": "757003",
    "end": "763460"
  },
  {
    "text": "And finally, if I wanted\nto find the minimum student ID in my classroom,\nthe only algorithm",
    "start": "763460",
    "end": "769959"
  },
  {
    "text": "I can have if my list\nof students isn't sorted is to what? Just iterate over every\nsingle student in the class.",
    "start": "769960",
    "end": "776313"
  },
  {
    "text": "And if the guy\nthat I'm looking at has a smaller ID than the\none that I found, replace it.",
    "start": "776313",
    "end": "781902"
  },
  {
    "text": "Does that make\nsense to everybody? So basically, everything you can\ndo in a set you can implement-- and I think all of\nyou guys are more than",
    "start": "781903",
    "end": "787778"
  },
  {
    "text": "qualified to implement--\nas an unordered array. It's just going to be slow. Yes?",
    "start": "787778",
    "end": "793054"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] JUSTIN: Yeah, that's right.",
    "start": "793054",
    "end": "798360"
  },
  {
    "text": "So actually, I don't\nknow in this class. I guess, the interface\nand the way that we've",
    "start": "798360",
    "end": "803550"
  },
  {
    "text": "described it here is dynamic. We can just keep\nadding stuff to it. In that case, remember\nthis amortized argument",
    "start": "803550",
    "end": "809040"
  },
  {
    "text": "from Erik's lecture\nsays that on average that it will take order n time.",
    "start": "809040",
    "end": "814080"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] JUSTIN: What was that? AUDIENCE: [INAUDIBLE] JUSTIN: Oh, that's true.",
    "start": "814080",
    "end": "819300"
  },
  {
    "text": "That's an even better-- sorry. Even if it weren't dynamic. If I wanted to replace\nan existing key--",
    "start": "819300",
    "end": "826523"
  },
  {
    "text": "like, for some reason, two\nstudents had the same ID. This is a terrible analogy. I'm sorry. But in any event, if\nI wanted to replace",
    "start": "826523",
    "end": "833610"
  },
  {
    "text": "an object with a new one,\nwell, what would I have to do? I'd have to search\nfor that object first, and then replace it.",
    "start": "833610",
    "end": "839130"
  },
  {
    "text": "And that search is going to take\norder n time from our argument before. Thank you.",
    "start": "839130",
    "end": "844300"
  },
  {
    "text": "OK. So in some sense, we're done. We've now implemented\nthe interface. Life is good.",
    "start": "844300",
    "end": "850788"
  },
  {
    "text": "And of course, this\nis the difference between existence and actually\ncaring about the details",
    "start": "850788",
    "end": "856290"
  },
  {
    "text": "inside of this thing. We've shown that one\ncan implement a set. But it's not a\nterribly efficient way to do it by just storing a big,\nhot mess, disorganized list",
    "start": "856290",
    "end": "864210"
  },
  {
    "text": "of numbers without any order. So instead of\nthat, conveniently,",
    "start": "864210",
    "end": "869242"
  },
  {
    "text": "our colleague in\nthe front row here has already suggested a\ndifferent data structure, which is to store our set not\nas just a disorganized array",
    "start": "869242",
    "end": "877530"
  },
  {
    "text": "in any arbitrary order, but\nrather to keep the items in our set organized by key.",
    "start": "877530",
    "end": "884690"
  },
  {
    "text": "So in other words, if I\nhave this array of all of the students\nin our classroom, the very first\nelement in my array",
    "start": "884690",
    "end": "890180"
  },
  {
    "text": "is going to be the student\nwith the smallest ID number, the second is the second\nsmallest number, all the way to the end\nof the array, which",
    "start": "890180",
    "end": "896260"
  },
  {
    "text": "is the student with\nthe biggest ID number. Now, does that mean I\nwant to do arithmetic",
    "start": "896260",
    "end": "902170"
  },
  {
    "text": "on student ID numbers? Absolutely not. But it's just a way to\nimpose order on that list so that I can search\nit very quickly later.",
    "start": "902170",
    "end": "909810"
  },
  {
    "start": "909000",
    "end": "1044000"
  },
  {
    "text": "OK. So if I want to fill\nin the set interface and I have somehow a\nsorted array of students--",
    "start": "909810",
    "end": "917790"
  },
  {
    "text": "so again, they're organized\nby student ID number-- then my runtime starts to get\na little more interesting.",
    "start": "917790",
    "end": "924440"
  },
  {
    "text": "Yeah. So now, insertion,\ndeletion they'd still take the same amount of time. But let's say that\nI want to find",
    "start": "924440",
    "end": "929855"
  },
  {
    "text": "the student with the minimum ID\nnumber, this find min function. Well, how could I do\nit in a sorted array?",
    "start": "929855",
    "end": "936899"
  },
  {
    "text": "Keyword is sorted here. Where's the min\nelement of an array? Yes?",
    "start": "936900",
    "end": "942500"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] JUSTIN: Yeah. In fact, I can give a moderately\nfaster algorithm, which is just look at the first one.",
    "start": "942500",
    "end": "949170"
  },
  {
    "text": "If I want the minimum element\nof an array and the array is in sorted order, I know\nthat's the first thing.",
    "start": "949170",
    "end": "955760"
  },
  {
    "text": "So that's order 1 time to\nanswer that kind of a question. And similarly, if I want the\nthing with the biggest ID",
    "start": "955760",
    "end": "960840"
  },
  {
    "text": "number, I look all\nthe way at the end. Now, in 6.006--",
    "start": "960840",
    "end": "966300"
  },
  {
    "text": "MIT student class numbers\nare super confusing to me. In 6.0001, 6.042,\nyou guys already",
    "start": "966300",
    "end": "972930"
  },
  {
    "text": "I think learned\nabout binary search and even may have\nimplemented it.",
    "start": "972930",
    "end": "978318"
  },
  {
    "text": "So what do we know? If my array is sorted,\nhow long does it take for me to search\nfor any given element?",
    "start": "978318",
    "end": "984950"
  },
  {
    "text": "Yes? AUDIENCE: Log n time. JUSTIN: Log n time. That's absolutely right because\nI can cut my array in half. If my key is bigger\nor smaller, then I",
    "start": "984950",
    "end": "991970"
  },
  {
    "text": "look on the left or the right. And so this is a much\nmore efficient means",
    "start": "991970",
    "end": "998360"
  },
  {
    "text": "of searching a set. So in particular, 6.006\nthis year has 400 students.",
    "start": "998360",
    "end": "1004870"
  },
  {
    "text": "Maybe next year, it has 4,000. And eventually, it's\ngoing to have billions. Then what's going to happen?",
    "start": "1004870",
    "end": "1011360"
  },
  {
    "text": "Well, if I use my\nunordered array and I have a billion\nstudents in this class, what's going to happen?",
    "start": "1011360",
    "end": "1016990"
  },
  {
    "text": "Well, then it's going to take me\nroughly a billion computations to find any one\nstudent in this course,",
    "start": "1016990",
    "end": "1022570"
  },
  {
    "text": "whereas log of a billion\nis a heck of a lot faster. On the other hand, I've\nswept under the rug",
    "start": "1022570",
    "end": "1030250"
  },
  {
    "text": "here, which is how\ndo I actually get a sorted array to begin with. And what we're going to\nsee in today's lecture",
    "start": "1030250",
    "end": "1036045"
  },
  {
    "text": "is that that takes more\ntime than building if I just have a disorganized list. Building a disorganized\nlist is an easy thing to do.",
    "start": "1036045",
    "end": "1041990"
  },
  {
    "text": "You probably all do it at home\nwhen you're cleaning house. But actually, sorting\na list of numbers",
    "start": "1041990",
    "end": "1047199"
  },
  {
    "start": "1044000",
    "end": "1190000"
  },
  {
    "text": "requires a little bit more work. And so this is a great\nexample where there's at least a tiny amount of tradeoff.",
    "start": "1047200",
    "end": "1053710"
  },
  {
    "text": "Now, building my sorted\narray to represent my set is going to take a\nlittle more computation. We're going to see\nit's n log n time.",
    "start": "1053710",
    "end": "1059980"
  },
  {
    "text": "But then once I've\ndone that step 0, now a lot of these\nother operations that I typically\ncare about in a set,",
    "start": "1059980",
    "end": "1066370"
  },
  {
    "text": "like searching it\nfor a given key, are going to go a lot\nfaster using binary search.",
    "start": "1066370",
    "end": "1073740"
  },
  {
    "text": "So this is our basic\nmotivator here. And so now, we've seen the\nsetup interface and two",
    "start": "1073740",
    "end": "1079529"
  },
  {
    "text": "potential data structures. And our goal for\nthe day is going to be to fill in the\ndetails of that second one.",
    "start": "1079530",
    "end": "1086040"
  },
  {
    "text": "And since you all have\nalready seen binary search, you've probably also\nalready seen sorting. But in any event,\ntoday, we're going",
    "start": "1086040",
    "end": "1092520"
  },
  {
    "text": "to focus mostly on\nthe lower left square here, on just how can I take\na disorganized list of objects",
    "start": "1092520",
    "end": "1099990"
  },
  {
    "text": "and put it into sorted order so\nthat I can search for it later. So in other words, our big\nproblem for lecture today",
    "start": "1099990",
    "end": "1107820"
  },
  {
    "text": "is the second thing\nhere, this sorting. Incidentally, in the\nnext couple of lectures, we're going to see other\ndata sets-- or data",
    "start": "1107820",
    "end": "1114809"
  },
  {
    "text": "structures, rather. Sorry, data sets. I used to teach\nmachine learning class. And we'll see that they have\ndifferent efficiency operations",
    "start": "1114810",
    "end": "1123997"
  },
  {
    "text": "that we can fill in this table. So we're not done yet. But this is one step forward. OK.",
    "start": "1123998",
    "end": "1129480"
  },
  {
    "text": "So hopefully, I have\nad nauseum justified why one might want\nto sort things. And indeed, there are a\ncouple of vocabulary words",
    "start": "1129480",
    "end": "1136410"
  },
  {
    "text": "that are worth noting. So one, so remember that\nyour sorting algorithm is pretty straightforward in\nterms of how you specify it.",
    "start": "1136410",
    "end": "1143940"
  },
  {
    "text": "So in sorting, your input\nis an array of n numbers.",
    "start": "1143940",
    "end": "1155549"
  },
  {
    "text": "I suppose actually\nreally that we should think of them like keys. It's not going to\nmatter a whole lot.",
    "start": "1155550",
    "end": "1161100"
  },
  {
    "text": "And our output--  I'm always very\nconcerned that if I",
    "start": "1161100",
    "end": "1166120"
  },
  {
    "text": "write on the board on the\nback, I have to cover it up-- is going to be sorted array.",
    "start": "1166120",
    "end": "1181520"
  },
  {
    "text": "And we'll call this\nguy B. We'll call this one A. This classroom is\nnot optimized for short people.",
    "start": "1181520",
    "end": "1189370"
  },
  {
    "text": " So there's a lot of variations\non the basics sorting problem and the different\nalgorithms that are out there.",
    "start": "1189370",
    "end": "1196613"
  },
  {
    "start": "1190000",
    "end": "1287000"
  },
  {
    "text": "Two vocabulary words are going\nto highlight really quick-- one is if your sort\nis destructive, what that means is that rather\nthan reserving some new memory",
    "start": "1196613",
    "end": "1204820"
  },
  {
    "text": "for my sorted array B and then\nputting a sorted version of A into B, a destructive algorithm\nis one that just overwrites A",
    "start": "1204820",
    "end": "1213250"
  },
  {
    "text": "with a sorted version of A.\nCertainly the C++ interface",
    "start": "1213250",
    "end": "1218300"
  },
  {
    "text": "does this. I assume the Python\none does, too. I always forget this detail.",
    "start": "1218300",
    "end": "1225350"
  },
  {
    "text": "In addition to\ndestructive sorts, some sorts are in place,\nmeaning that not only are",
    "start": "1225350",
    "end": "1231880"
  },
  {
    "text": "they destructive, but they\nalso don't use extra memory in the process of sorting. Really, you could imagine\na sorting algorithm",
    "start": "1231880",
    "end": "1237700"
  },
  {
    "text": "that has to reserve a bunch of\nscratch space to do its work, and then put it back into A.",
    "start": "1237700",
    "end": "1244059"
  },
  {
    "text": "For instance, the world's\ndumbest destructive sort might be to call\nyour non-destructive",
    "start": "1244060",
    "end": "1249070"
  },
  {
    "text": "and then copy it back\ninto A. But that would require order n space to do.",
    "start": "1249070",
    "end": "1255220"
  },
  {
    "text": "So if my algorithm\nadditionally has the property that it doesn't\nreserve any extra space, at least up to a constant,\nthen we call that in place.",
    "start": "1255220",
    "end": "1263740"
  },
  {
    "text": "OK. So those are our basic\nvocabulary words. And they're ways to\nunderstand the differences between different\nsorting algorithms.",
    "start": "1263740",
    "end": "1269142"
  },
  {
    "text": "Yes? AUDIENCE: [INAUDIBLE] JUSTIN: Why do they end\nup using extra O(1) space?",
    "start": "1269142",
    "end": "1274890"
  },
  {
    "text": "Oh yeah, sure. Any time I just make\na temporary variable like a loop counter,\nthat's going",
    "start": "1274890",
    "end": "1280110"
  },
  {
    "text": "to count toward that order 1. But the important thing is that\nthe number of variables I need doesn't scale in the\nlength of the list.",
    "start": "1280110",
    "end": "1288030"
  },
  {
    "start": "1287000",
    "end": "1538000"
  },
  {
    "text": "OK. So I present to you\nthe beginning and end of our sorting lecture, which\nis the world's simplest sorting",
    "start": "1288030",
    "end": "1293610"
  },
  {
    "text": "algorithm. I call it permutation sort. I think it's very easy\nto prove correctness for this particular technique.",
    "start": "1293610",
    "end": "1300629"
  },
  {
    "text": "So in permutation\nsort, what can I do? Well, I know that if I have an\ninput that's a list of numbers,",
    "start": "1300630",
    "end": "1307920"
  },
  {
    "text": "there exists a permutation\nof that list of numbers that is sorted by definition\nbecause a sort is",
    "start": "1307920",
    "end": "1314720"
  },
  {
    "text": "a permutation of\nyour original list. So what's a very simple\nsorting algorithm? Well, list every\npossible permutation,",
    "start": "1314720",
    "end": "1324840"
  },
  {
    "text": "and then just double check\nwhich one's in the right order. So there's two key pieces to\nthis particular technique,",
    "start": "1324840",
    "end": "1331948"
  },
  {
    "text": "if we want to analyze it. I don't see a reason\nto belabor it too much. But one is that we have to\nenumerate the permutations.",
    "start": "1331948",
    "end": "1342559"
  },
  {
    "text": " Now, if I have a\nlist of n numbers, how many different permutations\nof n numbers are there?",
    "start": "1342560",
    "end": "1350160"
  },
  {
    "text": "Yes? AUDIENCE: n factorial. JUSTIN: n factorial. So just by virtue of calling\nthis permutation's function,",
    "start": "1350160",
    "end": "1358570"
  },
  {
    "text": "I know that I incur at\nleast n factorial time. It might be worse. It might be that like actually\nlisting permutations takes",
    "start": "1358570",
    "end": "1365530"
  },
  {
    "text": "a lot of time for some\nreason, like every permutation itself takes order n time. But at the very least,\neach one of these things",
    "start": "1365530",
    "end": "1372309"
  },
  {
    "text": "looks like n factorial. I warned you my\nhandwriting is terrible. So that's what this omega thing\nis doing, if I recall properly.",
    "start": "1372310",
    "end": "1380919"
  },
  {
    "text": "And then secondarily,\nwell, we've got to check if that particular\npermutation is sorted.",
    "start": "1380920",
    "end": "1388600"
  },
  {
    "start": "1388600",
    "end": "1396730"
  },
  {
    "text": "How are we going to do that? There's a very easy way to\ncheck if a list is sorted.",
    "start": "1396730",
    "end": "1401950"
  },
  {
    "text": "I'm going to do maybe for\ni equals 1 to n minus 1.",
    "start": "1401950",
    "end": "1409210"
  },
  {
    "text": "Notice not a Python coder. It's going to look different. Then check, is Bi less\nthan or equal to Bi plus 1?",
    "start": "1409210",
    "end": "1424000"
  },
  {
    "text": "And so if this relationship\nis true for every single i-- that's supposed to\nbe a question mark.",
    "start": "1424000",
    "end": "1429660"
  },
  {
    "text": "This was less than or equal to\nwith a question mark over it. There's my special notation. So if I get all the way to\nthe end of this for loop",
    "start": "1429660",
    "end": "1435880"
  },
  {
    "text": "and this is true everywhere,\nthen my list is sorted and life is good.",
    "start": "1435880",
    "end": "1441770"
  },
  {
    "text": "So how long does\nthis algorithm take? Well, it's staring\nyou right in the face because you have\nan algorithm, which is looping from 1 to n minus 1.",
    "start": "1441770",
    "end": "1449029"
  },
  {
    "text": "So this step incurs order n\ntime because theta of n time because it's got to go all the\nway to the end of the list.",
    "start": "1449030",
    "end": "1456870"
  },
  {
    "text": "So when I put these things\ntogether, permutation sort-- well, remember that this\ncheck if sorted happens",
    "start": "1456870",
    "end": "1463430"
  },
  {
    "text": "for every single permutation. So at the end of the\nday, our algorithm takes at least n\nfactorial times n time.",
    "start": "1463430",
    "end": "1474535"
  },
  {
    "text": "It's a great\nexample of something that's even worse than\nn factorial, which somehow in my head is like\nthe worst possible algorithm.",
    "start": "1474535",
    "end": "1483490"
  },
  {
    "text": "So do you think that Python\nimplements permutation sort? I certainly hope not. Yes?",
    "start": "1483490",
    "end": "1489640"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] JUSTIN: Right. So the question was, why\nis it omega and not big O? Which is a fabulous\nquestion in this course.",
    "start": "1489640",
    "end": "1496750"
  },
  {
    "text": "So here's the basic issue. I haven't given you\nan algorithm for how to compute the set\nof permutations",
    "start": "1496750",
    "end": "1502123"
  },
  {
    "text": "for a list of numbers. I just called some magic\nfunction that I made up. But I know that that algorithm\ntakes at least n factorial time",
    "start": "1502123",
    "end": "1509490"
  },
  {
    "text": "in some sense. Or if nothing else, the\nlist of permutations is n factorial\nbig because that's all the stuff has to compute.",
    "start": "1509490",
    "end": "1516289"
  },
  {
    "text": "So I haven't told you how\nto solve this problem. But I'm convinced that it's\nat least this amount of time. So remember that omega\nmeans lower bound.",
    "start": "1516290",
    "end": "1523350"
  },
  {
    "text": "So when I put it all\ntogether, in some sense-- OK, this isn't\nsatisfying in the sense that I didn't give you precisely\nthe runtime of this algorithm.",
    "start": "1523350",
    "end": "1530700"
  },
  {
    "text": "But hopefully, I've convinced\nyou that it's super useless. Yeah, OK. Any other questions about that?",
    "start": "1530700",
    "end": "1538660"
  },
  {
    "start": "1538000",
    "end": "1563000"
  },
  {
    "text": "But great. So if we go back to our\ntable for the set interface, well, in some sense,\nif we implemented",
    "start": "1538660",
    "end": "1544090"
  },
  {
    "text": "it using this goofy algorithm,\nthen the lower left entry in our table would\nbe n factorial times",
    "start": "1544090",
    "end": "1549610"
  },
  {
    "text": "n, which wouldn't be so hot. But notice that actually all\nthe rest of our operations",
    "start": "1549610",
    "end": "1554860"
  },
  {
    "text": "are now quite efficient. I can use binary search. I just obtained the\nalgorithm that--",
    "start": "1554860",
    "end": "1559900"
  },
  {
    "text": "rather, I obtained the sorted\narray in a funny fashion. OK. So let's fill in some more\ninteresting algorithms.",
    "start": "1559900",
    "end": "1566880"
  },
  {
    "start": "1563000",
    "end": "1981000"
  },
  {
    "text": "As usual, I'm talking too much. And I'm nervous about the time. But we can skip one\nof them if we need to.",
    "start": "1566880",
    "end": "1573120"
  },
  {
    "text": "So how many of us have\nseen selection sort before? I see your hand.",
    "start": "1573120",
    "end": "1578370"
  },
  {
    "text": "But we're going to\ndefer for a little bit. I'm sorry? AUDIENCE: [INAUDIBLE] JUSTIN: That's fabulous.",
    "start": "1578370",
    "end": "1584340"
  },
  {
    "text": "Why don't we defer to\nthe end of lecture? And we'll do it then. OK. So the first algorithm that\nwe'll talk about for sorting,",
    "start": "1584340",
    "end": "1591120"
  },
  {
    "text": "which is somewhat\nsensible, is something called selection sort. Selection sort is exactly\nwhat it sounds like.",
    "start": "1591120",
    "end": "1597309"
  },
  {
    "text": "So let's say that we have a\nlist of-- whoops, my laptop and the screen are not agreeing. OK.",
    "start": "1597310",
    "end": "1602650"
  },
  {
    "text": "Let's say I have a\nlist of numbers-- 8, 2, 4, 9, 3. There's a message\nthat Jason I think",
    "start": "1602650",
    "end": "1608333"
  },
  {
    "text": "is sending me in\nthe course notes. But I haven't figured it out. But in any event, I want to\nsort this list of numbers.",
    "start": "1608333",
    "end": "1616658"
  },
  {
    "text": "Here's a simple algorithm\nfor how to do it, which is I can find the biggest\nnumber in this whole list",
    "start": "1616658",
    "end": "1622019"
  },
  {
    "text": "and stick it at the end. So in this case, what's\nthe biggest number in this list everybody?",
    "start": "1622020",
    "end": "1627840"
  },
  {
    "text": "9. Good. See, this is why you go to MIT. So I'm going to take that 9.",
    "start": "1627840",
    "end": "1633120"
  },
  {
    "text": "I find it. And then swap it out with\nthe 3, which is at the end. And now, what's my\ninductive hypothesis?",
    "start": "1633120",
    "end": "1639762"
  },
  {
    "text": "Well, in some sense,\nit's that everything to the right of this little\nred line that I've drawn here is in sorted order, in this case\nbecause there's only one thing.",
    "start": "1639762",
    "end": "1647270"
  },
  {
    "text": "So now, what am I going to do? I'm going to look to the\nleft of the red line, find the next biggest thing. What's that?",
    "start": "1647270",
    "end": "1655049"
  },
  {
    "text": "Come on. AUDIENCE: 8. JUSTIN: There we go. Yeah, wake up. OK. So right, the next\nbiggest one is the 8.",
    "start": "1655050",
    "end": "1661299"
  },
  {
    "text": "So we're going to swap it\nwith the 3, put it at the end, and so on. I think you guys could\nall finish this off.",
    "start": "1661300",
    "end": "1667268"
  },
  {
    "text": "I suppose there should be one\nlast line here where everything is green and we're happy. But in some sense, we're pretty\nsure that an array of one item",
    "start": "1667268",
    "end": "1674610"
  },
  {
    "text": "is in sorted order. And so essentially, from a high\nlevel, what does selection sort do?",
    "start": "1674610",
    "end": "1680370"
  },
  {
    "text": "Well, it just kept choosing the\nelement which was the biggest and swapping it into the\nback and then iterating.",
    "start": "1680370",
    "end": "1687060"
  },
  {
    "text": "Now, in 6.006, we're going to\nwrite selection sort in a way that you might not\nbe familiar with.",
    "start": "1687060",
    "end": "1692640"
  },
  {
    "text": "In some sense, this is not\nso hard to implement with two for loops. I think you guys could\nall do this at home. In fact, you may have already.",
    "start": "1692640",
    "end": "1698850"
  },
  {
    "text": "But in this class,\nbecause we're concerned with proving correctness,\nproving efficiency, all that good stuff,\nwe're going to write it",
    "start": "1698850",
    "end": "1705000"
  },
  {
    "text": "in kind of a funny way,\nwhich is recursive. Now, I can't emphasize strongly\nenough how little you guys",
    "start": "1705000",
    "end": "1713770"
  },
  {
    "text": "should implement this at home. This is mostly a theoretical\nversion of selection sort rather than one that\nyou would actually",
    "start": "1713770",
    "end": "1718990"
  },
  {
    "text": "want to write in code\nbecause there's obviously a much better way to do it. And you'll see that in\nyour recitation this week, I believe.",
    "start": "1718990",
    "end": "1725149"
  },
  {
    "text": "But in terms of\nanalysis, there's a nice, easy way\nto write it down. So we're going to take the\nselection sort algorithm.",
    "start": "1725150",
    "end": "1733150"
  },
  {
    "text": "And we're going to divide\nit into two chunks. One of them is find me the\nbiggest thing in the first k",
    "start": "1733150",
    "end": "1740350"
  },
  {
    "text": "elements of my array. I shouldn't use k\nbecause that means key. The first i elements\nof my array.",
    "start": "1740350",
    "end": "1745690"
  },
  {
    "text": "And the next one is\nto swap it into place and then sort\neverything to the left. That's the two pieces here. So let's write that down.",
    "start": "1745690",
    "end": "1751390"
  },
  {
    "text": " So what did I do?",
    "start": "1751390",
    "end": "1756669"
  },
  {
    "text": "Well, in some sense,\nin step 1 here, I found the biggest with index\nless than or equal to i.",
    "start": "1756670",
    "end": "1771240"
  },
  {
    "text": "So I started at the end of the\nlist, and then moved backward. And then step 2 was to\nswap that into place.",
    "start": "1771240",
    "end": "1781292"
  },
  {
    "text": "Notice when I say\nswap-- so for instance, when I put the 8\nthere, well, I had to do something with that 3. So I just put it where\nthe 8 used to be.",
    "start": "1781292",
    "end": "1788740"
  },
  {
    "text": "And then finally,\nwell, am I done? No, I just put the biggest\nthing at the end of my array.",
    "start": "1788740",
    "end": "1796120"
  },
  {
    "text": "So now, I have to sort\nfrom index 1 to i minus 1 because now I know that the\nlast guy is in sorted order.",
    "start": "1796120",
    "end": "1803260"
  },
  {
    "text": "I see you. I'll turn it over to\nyou in just a sec. ",
    "start": "1803260",
    "end": "1811169"
  },
  {
    "text": "Yes? AUDIENCE: [INAUDIBLE] JUSTIN: You can't\nread the handwriting? AUDIENCE: [INAUDIBLE]",
    "start": "1811170",
    "end": "1817020"
  },
  {
    "text": "JUSTIN: This is index\nless than or equal to i. Great question. I warned you.",
    "start": "1817020",
    "end": "1822330"
  },
  {
    "text": "It's going to be a problem. So let's do step 1 first.",
    "start": "1822330",
    "end": "1829600"
  },
  {
    "text": "So I'm going to put\ncode on the board. And then we're going\nto fill in the details.",
    "start": "1829600",
    "end": "1834860"
  },
  {
    "text": "Erik is posting on Facebook. I'm going to turn that\nfeature off on my watch later. So right, let's implement\nthis helper function here.",
    "start": "1834860",
    "end": "1845960"
  },
  {
    "text": "This is something we're\ngoing to call prefix max. And this is going to\nfind me the biggest element of array between\nindex 0 and index i inclusive,",
    "start": "1845960",
    "end": "1854970"
  },
  {
    "text": "I believe. Yeah? AUDIENCE: [INAUDIBLE] JUSTIN: Well, here's an\ninteresting observation, really a deep one, which is\nthat the biggest element from 0",
    "start": "1854970",
    "end": "1869200"
  },
  {
    "text": "to i-- that's an i, sorry. There's two cases.",
    "start": "1869200",
    "end": "1875950"
  },
  {
    "text": "Either it's at index i,\nmeaning I have the first 10",
    "start": "1875950",
    "end": "1887370"
  },
  {
    "text": "elements of my right-- either it is element number\n10 or what's the other case?",
    "start": "1887370",
    "end": "1894760"
  },
  {
    "text": "It ain't, Yeah? In other words, it\nhas index less than i.",
    "start": "1894760",
    "end": "1907020"
  },
  {
    "text": "This is a tautology, rate? Either the biggest thing is\nat this index or it's not. In which case, it has\nto be to the left.",
    "start": "1907020",
    "end": "1912600"
  },
  {
    "text": "Does that makes sense? So this gives us a\nreally simple algorithm for finding the biggest element\nin the array between index 0",
    "start": "1912600",
    "end": "1920950"
  },
  {
    "text": "and index i, which is what I've\nshown you on the screen here. I'd write it on the board. But I am a slow writer\nand already low on time.",
    "start": "1920950",
    "end": "1928070"
  },
  {
    "text": "And so essentially,\nwhat did I implement? Well, I found the biggest\nelement between index 0",
    "start": "1928070",
    "end": "1935770"
  },
  {
    "text": "and index i minus 1. So let's say that\nI have an array-- ",
    "start": "1935770",
    "end": "1942872"
  },
  {
    "text": "I forget the\nsequence of numbers-- 8, 3, 5, 7, 9. That'll do it.",
    "start": "1942873",
    "end": "1949270"
  },
  {
    "text": "And so like I give a\npointer here, which is i. And the very first\nthing that I do",
    "start": "1949270",
    "end": "1955690"
  },
  {
    "text": "is I compute the biggest\nnumber all the way to the left of this stuff. In this case, that is? AUDIENCE: 8.",
    "start": "1955690",
    "end": "1961370"
  },
  {
    "text": "JUSTIN: 8. There we go. Now, I look at the very last\nelement of my array, which is--",
    "start": "1961370",
    "end": "1968210"
  },
  {
    "text": "9. You're killing me today, guys. And then what do I return? Well, I want the biggest\none between 0 and index i.",
    "start": "1968210",
    "end": "1977370"
  },
  {
    "text": "So in this case, I return the 9. Does that make sense?",
    "start": "1977370",
    "end": "1982570"
  },
  {
    "start": "1981000",
    "end": "2080000"
  },
  {
    "text": "So I know Jerry Cain\nat Stanford likes to talk about the recursive\nleap of faith that happens.",
    "start": "1982570",
    "end": "1989230"
  },
  {
    "text": "Another term for\nthis is induction. So we want to prove that\nour algorithm works.",
    "start": "1989230",
    "end": "1994613"
  },
  {
    "text": "Well, what do we have to do? We have to show that when\nI call this function, it gives me the max of\nmy array between index 0",
    "start": "1994613",
    "end": "2002010"
  },
  {
    "text": "and index i for all i. So let's maybe do this inductive\nproof a little bit carefully.",
    "start": "2002010",
    "end": "2007330"
  },
  {
    "text": "And then the rest, we'll\nbe sloppy about it. So the base case is i equals 0.",
    "start": "2007330",
    "end": "2016200"
  },
  {
    "text": "Well, in this case, there's\nonly one element in my array. So it's pretty clear\nthat it's the max. ",
    "start": "2016200",
    "end": "2026110"
  },
  {
    "text": "And now, we have to do\nour inductive step, which",
    "start": "2026110",
    "end": "2031150"
  },
  {
    "text": "means that if I call\nprefix max with i minus 1, I really do get the max\nof my array between 0",
    "start": "2031150",
    "end": "2038230"
  },
  {
    "text": "and index i minus 1. And then really, I can just\nlook at my very deep statement,",
    "start": "2038230",
    "end": "2046190"
  },
  {
    "text": "which is that either my object\nis at the end of the array or it's not. ",
    "start": "2046190",
    "end": "2052443"
  },
  {
    "text": "And this is precisely\nwhat we need to justify the inductive step. Essentially, there\nare two cases.",
    "start": "2052443",
    "end": "2057489"
  },
  {
    "text": "Either the biggest element of\nmy arrays the last one or it's not. We already, by our\ninductive hypothesis,",
    "start": "2057489",
    "end": "2064099"
  },
  {
    "text": "have argued that\nour code can find the biggest element between\nindex 0 and index i minus 1.",
    "start": "2064100",
    "end": "2071379"
  },
  {
    "text": "So as long as we take the max\nof that and the very last guy, we're in good shape. So this is our very informal\nproof of correctness.",
    "start": "2071380",
    "end": "2080449"
  },
  {
    "start": "2080000",
    "end": "2173000"
  },
  {
    "text": "OK. So now, we have to justify\nruntime for this algorithm. And that's actually not\n100% obvious from the way",
    "start": "2080449",
    "end": "2086199"
  },
  {
    "text": "I've written it here. There's no for loop. But what do I do? Well, in some sense,\nif my run time",
    "start": "2086199",
    "end": "2092679"
  },
  {
    "text": "is a function s,\nwell, for one thing, if my array has\none element in it,",
    "start": "2092679",
    "end": "2099500"
  },
  {
    "text": "well, my run time might\nbe 7, might be 23. But at the end of the day,\nit only does one thing.",
    "start": "2099500",
    "end": "2104970"
  },
  {
    "text": "It just returns i. So in other words,\nit's theta of 1.",
    "start": "2104970",
    "end": "2111270"
  },
  {
    "text": "This isn't terribly insightful. But what else do we know? Well, when I call my function,\nI call it recursively on",
    "start": "2111270",
    "end": "2117990"
  },
  {
    "text": "one smaller index. And then I do a\nconstant amount of work. So I know that s of n is\nequal to s of n minus 1",
    "start": "2117990",
    "end": "2126869"
  },
  {
    "text": "plus theta of 1. I do a little bit of extra\ncomputation on top of that.",
    "start": "2126870",
    "end": "2132046"
  },
  {
    "text": "Can anybody guess what this\ntotal runtime is going to be? Yes?",
    "start": "2132046",
    "end": "2137685"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] JUSTIN: Yeah, order n. So let's say that we hypothesize\nthat this takes n time. You can see that because at\nstep n we call n minus 1,",
    "start": "2137685",
    "end": "2146240"
  },
  {
    "text": "we call it minus 2, and so\non, all the way down to 1. If we want to prove this,\none of the ways that we--",
    "start": "2146240",
    "end": "2153458"
  },
  {
    "text": "I think, in theory, you guys\nhave learned in the past-- and you're going to\ncover it in recitation-- is a technique\ncalled substitution.",
    "start": "2153458",
    "end": "2160590"
  },
  {
    "text": "What we do is we're going to\nlook at this relationship. And we're going to hypothesize\nthat we think s of n",
    "start": "2160590",
    "end": "2166700"
  },
  {
    "text": "maybe look something like\ncn for some constant c that doesn't depend on n.",
    "start": "2166700",
    "end": "2173417"
  },
  {
    "text": "Then all we have to\ndo is double check that that relationship\nis consistent with our inductive\nhypothesis, or rather",
    "start": "2173417",
    "end": "2179440"
  },
  {
    "text": "just as a recursive function. And if it is, then\nwe're in good shape. So in this case,\nwell, what do I know?",
    "start": "2179440",
    "end": "2186260"
  },
  {
    "text": "I've guessed that s\nof n is theta of n.",
    "start": "2186260",
    "end": "2192610"
  },
  {
    "text": "In particular, if I plug into\nthis recursive relationship here, on the left-hand\nside, I'm going to get cn.",
    "start": "2192610",
    "end": "2199428"
  },
  {
    "text": "On the right-hand side, I'm\ngoing to get c n minus 1 plus theta of 1.",
    "start": "2199428",
    "end": "2207800"
  },
  {
    "text": "We just have to make sure\nthat this is an OK equal sign. So what can I do? I can subtract cn\nfrom both sides,",
    "start": "2207800",
    "end": "2214260"
  },
  {
    "text": "maybe put that 1 on\nthe other side here. Then we get the c\nequals big I of 1.",
    "start": "2214260",
    "end": "2220090"
  },
  {
    "text": "c is, of course, a constant. So we're in good shape. ",
    "start": "2220090",
    "end": "2225230"
  },
  {
    "text": "My undergrad\nalgorithms professor told me never to write a victory\nmark at the end of a proof. You have to do a little square.",
    "start": "2225230",
    "end": "2231799"
  },
  {
    "text": "But he's not here.  So now, I see you.",
    "start": "2231800",
    "end": "2238007"
  },
  {
    "start": "2234000",
    "end": "2484000"
  },
  {
    "text": "But we're a little low on time. So we'll save it\nfor the lecture. OK. So if we want to implement the\nselection sort algorithm, well,",
    "start": "2238008",
    "end": "2245470"
  },
  {
    "text": "what do we do? Well, we're going to think of\ni as the index of that red line that I was showing you before.",
    "start": "2245470",
    "end": "2252099"
  },
  {
    "text": "Everything beyond i\nis already sorted. So in selection sort, the\nfirst thing I'm going to do",
    "start": "2252100",
    "end": "2257990"
  },
  {
    "text": "is find the max element\nbetween 0 and i. And then I'm going to\nswap it into place.",
    "start": "2257990",
    "end": "2264290"
  },
  {
    "text": "So this is just a code\nversion of the technique we've already talked about. Hopefully, this makes sense.",
    "start": "2264290",
    "end": "2269590"
  },
  {
    "text": "So you find the biggest\nelement between 0 and index i. That's what we're\ngoing to call j here.",
    "start": "2269590",
    "end": "2275800"
  },
  {
    "text": "I swap that with\nthe one in index i. That's step 2. And then step 3 is I still\nhave to sort everything",
    "start": "2275800",
    "end": "2282670"
  },
  {
    "text": "to the left of index i and\nthat's that recursive call. So if I want to\njustify the runtime",
    "start": "2282670",
    "end": "2289940"
  },
  {
    "text": "of this particular\ntechnique, well, now let's call that t for time.",
    "start": "2289940",
    "end": "2295109"
  },
  {
    "text": " Well, what do I do? Well, for one, I call selection\nsort with index i minus 1.",
    "start": "2295110",
    "end": "2303350"
  },
  {
    "text": "So that incurs time\nthat looks like this. But I also call that\nprefix max function.",
    "start": "2303350",
    "end": "2310942"
  },
  {
    "text": "And how much time\ndoes that take? That takes order n time. So at the end of the day,\nI have some relationship",
    "start": "2310942",
    "end": "2320135"
  },
  {
    "text": "that looks like this. Does that makes sense? So by the way, notice that\nthis order n swallowed",
    "start": "2320135",
    "end": "2325740"
  },
  {
    "text": "up the order 1 computations that\nI had to do to swap and so on.",
    "start": "2325740",
    "end": "2331960"
  },
  {
    "text": "So remember, there's this\nnice relationship, which you probably learned in your\ncombinatorics class, which",
    "start": "2331960",
    "end": "2338710"
  },
  {
    "text": "is that 1 plus 2 plus\ndot, dot, dot plus n. OK. I can never remember\nexactly the formula.",
    "start": "2338710",
    "end": "2343898"
  },
  {
    "text": "But I'm pretty sure that\nit looks like n squared. So based on that\nand taking a look",
    "start": "2343898",
    "end": "2350170"
  },
  {
    "text": "at this recursive thing, which\nis essentially doing exactly that-- n plus n minus 1 plus\nn minus 2, and so on--",
    "start": "2350170",
    "end": "2356140"
  },
  {
    "text": "I might hypothesize that\nthis thing is really order n squared.",
    "start": "2356140",
    "end": "2362587"
  },
  {
    "text": "So if I'm going to\ndo that, then again if I want to use the\nsame technique for proof, I have to plug this\nrelationship in, and then double",
    "start": "2362587",
    "end": "2369300"
  },
  {
    "text": "check that is consistent. So maybe I hypothesize that\nt of n equals cn squared.",
    "start": "2369300",
    "end": "2377400"
  },
  {
    "text": "In which case, I\nplug it in here. I have cn squared equals\nwith a question mark over it",
    "start": "2377400",
    "end": "2385500"
  },
  {
    "text": "cn minus 1 squared plus\nbig O or even theta n here.",
    "start": "2385500",
    "end": "2392552"
  },
  {
    "text": "So if I expand\nthe square, notice I'm going to get\nc times n squared plus a bunch of linear stuff.",
    "start": "2392552",
    "end": "2399609"
  },
  {
    "text": "This is really cn squared-- I should be careful with that--",
    "start": "2399610",
    "end": "2405880"
  },
  {
    "text": "minus 2 cn plus c\nplus theta of n.",
    "start": "2405880",
    "end": "2412019"
  },
  {
    "text": " Notice that there's a cn squared\non both sides of this equation.",
    "start": "2412020",
    "end": "2418520"
  },
  {
    "text": "They go away. And what I'm left with is\na nice, consistent formula that theta of n\nequals 2 cn minus c.",
    "start": "2418520",
    "end": "2432319"
  },
  {
    "text": "And indeed, this is\nan order n expression. So there's order\nin the universe. Life is good. Yeah, this is the\nsubstitution method.",
    "start": "2432320",
    "end": "2437870"
  },
  {
    "text": "And again, I think you'll cover\nit more in your recitation. So what have we done? We have derived\nthe selection sort.",
    "start": "2437870",
    "end": "2443839"
  },
  {
    "text": "We've checked that it\nruns in n squared time. And by this nice,\ninductive strategy,",
    "start": "2443840",
    "end": "2449910"
  },
  {
    "text": "we know that it's correct. So life is pretty good. Unfortunately, I promised\nfor you guys on the slides",
    "start": "2449910",
    "end": "2455367"
  },
  {
    "text": "that sorting really\ntakes n log n time. And this is an order\nn squared algorithm. So we're not quite done yet.",
    "start": "2455367",
    "end": "2461270"
  },
  {
    "text": "I'm way over time. So we're going to skip a\ndifferent algorithm, which is called insertion sort,\nalso runs on n time.",
    "start": "2461270",
    "end": "2467750"
  },
  {
    "text": " Essentially, insertion sort\nruns in the reverse order.",
    "start": "2467750",
    "end": "2473140"
  },
  {
    "text": "I'm going to sort\neverything to the left, and then insert a new object,\nwhereas, in selection, I'm going to choose\nthe biggest object",
    "start": "2473140",
    "end": "2478850"
  },
  {
    "text": "and then sort\neverything to the left. But I'll let you guys\npiece through that at home. It's essentially\nthe same argument.",
    "start": "2478850",
    "end": "2484640"
  },
  {
    "start": "2484000",
    "end": "2775000"
  },
  {
    "text": "And instead, we should\njump to an algorithm that actually matters, which\nis something called merge sort.",
    "start": "2484640",
    "end": "2491150"
  },
  {
    "text": "How many of us have\nencountered merge sort before? Fabulous. Good. So then I'm done.",
    "start": "2491150",
    "end": "2497809"
  },
  {
    "text": "So let's say that I have a list. Now, I'm sending a\nmessage back to Jason. I made this one up last night. So I have 7, 1,\n5, 6, 2, 4, 9, 3.",
    "start": "2497810",
    "end": "2505819"
  },
  {
    "text": "This is not in sorted order. But I can make a very\ndeep observation, which is that every number\nby itself is in sorted order",
    "start": "2505820",
    "end": "2512690"
  },
  {
    "text": "if I think of it as\nan array of length 1. It's really deep, like\ndeep learning deep.",
    "start": "2512690",
    "end": "2520670"
  },
  {
    "text": "So now, what can I do? Well, I could take every pair of\nnumbers, draw a little red box.",
    "start": "2520670",
    "end": "2526167"
  },
  {
    "text": "Well, now, they're\nnot in sorted order any more inside\nof the red boxes. So I'm going to sort\ninside of every box. In this case, it's\nnot too exciting",
    "start": "2526167",
    "end": "2532430"
  },
  {
    "text": "because it's just pairs. And now, they're in sorted order\nbecause they said they were. Now, I'm going to keep\ndoubling the size of my boxes.",
    "start": "2532430",
    "end": "2539570"
  },
  {
    "text": "So now, let's say I\nhave box of length 4. What do I know about the\nleft and right-hand sides",
    "start": "2539570",
    "end": "2545300"
  },
  {
    "text": "of the dotted lines here? On the two sides of\nthe dotted lines,",
    "start": "2545300",
    "end": "2550750"
  },
  {
    "text": "the array is in sorted order. There's a 1 and then a 7. Those are in sorted\norder, 5 and a 6.",
    "start": "2550750",
    "end": "2555800"
  },
  {
    "text": "That's because, in the previous\nstep, I sorted every pair. So when I merge these\ntwo sides together,",
    "start": "2555800",
    "end": "2563579"
  },
  {
    "text": "I have an additional useful\npiece of information, namely that the two\nsides of the dotted line",
    "start": "2563580",
    "end": "2569460"
  },
  {
    "text": "are already in sorted order. That's going to be our\nbasic inductive step here.",
    "start": "2569460",
    "end": "2574530"
  },
  {
    "text": "So in this case, I\nmerge the two sides. I get 1, 5, 6, 7,\nand 2, 3, 4, 9. Then finally, I put these\ntwo things together.",
    "start": "2574530",
    "end": "2581380"
  },
  {
    "text": "And I have to sort these two. I have to merge these\ntwo sorted lists. But they're in sorted order.",
    "start": "2581380",
    "end": "2588180"
  },
  {
    "text": "And that's going to give me a\nbig advantage because-- oops, I lost my chalk.",
    "start": "2588180",
    "end": "2595080"
  },
  {
    "text": "I suppose I've got space\non this board here. Oh no.",
    "start": "2595080",
    "end": "2601050"
  },
  {
    "text": "So if I want to merge 1,\n5, 6, 7 and 2, 3, 4, 9,",
    "start": "2601050",
    "end": "2609666"
  },
  {
    "text": "there's a nice, clever\ntechnique that we can do that's going to\ntake just linear time. Jason tells me it's the\ntwo finger algorithm.",
    "start": "2609666",
    "end": "2616180"
  },
  {
    "text": "I think that's a\ncute analogy here. So here are my two fingers. They're going to point\nat the end of the list. And I'm going to construct\nthe merged array backwards.",
    "start": "2616180",
    "end": "2624150"
  },
  {
    "text": "So how many elements are\nin my merged array, if I'm merging two things of length 4?",
    "start": "2624150",
    "end": "2629400"
  },
  {
    "text": "I don't ask you\nguys hard questions. It's 8, yeah? 4 plus 4. 8, yeah?",
    "start": "2629400",
    "end": "2635920"
  },
  {
    "text": "So what do I know? I know that my merge array-- 5, 6, 7-- has eight elements.",
    "start": "2635920",
    "end": "2644240"
  },
  {
    "text": "And now, I'm going to have two\nfingers at the end of my array. Which one should I put at\nthe end of the merged guy?",
    "start": "2644240",
    "end": "2651490"
  },
  {
    "text": "The 7 of the 9?  AUDIENCE: The 9 JUSTIN: The 9.",
    "start": "2651490",
    "end": "2657010"
  },
  {
    "text": "Right, thank you. So now, I can move my\nlower finger to the left",
    "start": "2657010",
    "end": "2663737"
  },
  {
    "text": "because I've already added that. Notice that I never need to\nlook to the left of where my finger is because they're\nalready in sorted order.",
    "start": "2663737",
    "end": "2670020"
  },
  {
    "text": "Now what should I\nadd, the 4 or the 7? AUDIENCE: 7. JUSTIN: The 7.",
    "start": "2670020",
    "end": "2675150"
  },
  {
    "text": "And so on, dot, dot, dot, yeah? So that's going to be the\nbasic idea of the merge sort.",
    "start": "2675150",
    "end": "2680180"
  },
  {
    "text": "I'm going to take\ntwo sorted lists. And I'm going to make a\nnew sorted list, which is twice as long,\nby using two fingers",
    "start": "2680180",
    "end": "2686210"
  },
  {
    "text": "and moving from\nthe and backward. So that's the basic\nintuition here.",
    "start": "2686210",
    "end": "2691720"
  },
  {
    "text": "Indeed, there's our sorted list. It's stressing me out\nthat there's no eight. I need the power of 2.",
    "start": "2691720",
    "end": "2698500"
  },
  {
    "text": "So I think merge sort,\nwe're going to present it in a backward way\nfrom the previous one, where I'm going to give you\nthe high level algorithm.",
    "start": "2698500",
    "end": "2704620"
  },
  {
    "text": "And then actually, the\nheadache is that merging step, which I have four minutes for. And I apologize for it.",
    "start": "2704620",
    "end": "2710000"
  },
  {
    "text": "So what does the merger sort do? Well, it computes\nan index c, which is the middle of my array.",
    "start": "2710000",
    "end": "2715141"
  },
  {
    "text": "And it's going to make a\nrecursive call which is sort the left, which is everything\nbetween index A and index C.",
    "start": "2715142",
    "end": "2722423"
  },
  {
    "text": "And then sort everything on\nthe right, which is everything from index C to index B.\nI know this is confusing",
    "start": "2722423",
    "end": "2728620"
  },
  {
    "text": "because usually letters\nappear in order. But C, if you think of\nas standing for center, then it makes sense like.",
    "start": "2728620",
    "end": "2734650"
  },
  {
    "text": "Here's my array.  I'm going to choose an\nindex right in the middle.",
    "start": "2734650",
    "end": "2740530"
  },
  {
    "text": "I've done myself a disservice\nby not using a power of 2. But that's OK. I'm going to say sort everything\nto the left of the dotted line",
    "start": "2740530",
    "end": "2748870"
  },
  {
    "text": "first. Sort everything to the right\nof the dotted line second. Now, I have two sorted\nlists on the two",
    "start": "2748870",
    "end": "2754930"
  },
  {
    "text": "sides of the dotted line. And then I'm going to use my two\nfingers to put them together. So that's what this\nis implementing here.",
    "start": "2754930",
    "end": "2761100"
  },
  {
    "text": "See, there's two\nrecursive calls-- sort from A to C, and then\nsort from C to B. Oops, I didn't actually label this.",
    "start": "2761100",
    "end": "2766610"
  },
  {
    "text": "So this is A, C, B. And\nthen I've got to call merge.",
    "start": "2766610",
    "end": "2771870"
  },
  {
    "text": " Now, our implementation\nof merge--",
    "start": "2771870",
    "end": "2778890"
  },
  {
    "start": "2775000",
    "end": "2902000"
  },
  {
    "text": "well, we can also do this\nin a recursive fashion. But personally, I find\nthis a little complicated. I'm going to admit.",
    "start": "2778890",
    "end": "2784589"
  },
  {
    "text": "But here's the basic idea\nhere, which I'm now rushing. ",
    "start": "2784590",
    "end": "2791829"
  },
  {
    "text": "So I'm going to think of\nmy upper finger as finger i and my lower finger as finger j.",
    "start": "2791830",
    "end": "2798060"
  },
  {
    "text": "Does that makes sense? So I have two sorted lists.",
    "start": "2798060",
    "end": "2803830"
  },
  {
    "text": "So maybe like that. I don't know, 1, 3, 5, 7.",
    "start": "2803830",
    "end": "2809349"
  },
  {
    "text": "And then I have a\nsecond sorted list here, which is maybe 2, 4,\n6, 72, as one does.",
    "start": "2809350",
    "end": "2818950"
  },
  {
    "text": "Then I'm going to have one\npointer like this, which is i, and a pointer down\nhere, which is j.",
    "start": "2818950",
    "end": "2826970"
  },
  {
    "text": "And my goal is to\nconstruct an array A",
    "start": "2826970",
    "end": "2833526"
  },
  {
    "text": "with a bunch of elements in it. And the way that I'm\ngoing to do it is I'm going to use exactly the same\nkind of recursive argument,",
    "start": "2833526",
    "end": "2841440"
  },
  {
    "text": "that I can either have\nthe biggest element of my be the last element\nof the first guy",
    "start": "2841440",
    "end": "2847050"
  },
  {
    "text": "or be the last element\nof the second one. So here's going to be\nour recursive call.",
    "start": "2847050",
    "end": "2853012"
  },
  {
    "text": "And in addition to that,\nfor convenience, we'll have a third index, which is B,\nwhich is pointing to this thing",
    "start": "2853012",
    "end": "2859710"
  },
  {
    "text": "inside of my sorted array that\nI'm currently processing Yeah? It's going to start\nat A, go to B.",
    "start": "2859710",
    "end": "2866112"
  },
  {
    "text": "Incidentally, I\nsee a lot of people taking photos of the slides. These are just copy\npasted from the notes.",
    "start": "2866112",
    "end": "2871980"
  },
  {
    "text": "OK. So in this case, what should\nI put in B for my two arrays?",
    "start": "2871980",
    "end": "2877960"
  },
  {
    "text": "I have 1, 3, 5, 7; 2, 4, 6, 72. 72, yeah?",
    "start": "2877960",
    "end": "2885170"
  },
  {
    "text": "Great. So now, what am I going to do? I'm just going to call\nthe merge function.",
    "start": "2885170",
    "end": "2890180"
  },
  {
    "text": "But I'm going to decrement\nB because now I'm happy with that last element.",
    "start": "2890180",
    "end": "2895960"
  },
  {
    "text": "And in addition to that,\nI'm going to decrement j because I already used it up.",
    "start": "2895960",
    "end": "2902710"
  },
  {
    "text": "And so that's our\nrecursive call here. It's saying, if j is\nless than or equal to 0-- so in other words,\nI have an element",
    "start": "2902710",
    "end": "2908770"
  },
  {
    "text": "to use in one of the\nlists of the other. And maybe the left one is\nbigger than the right one.",
    "start": "2908770",
    "end": "2916223"
  },
  {
    "text": "That's our first case. That does not apply\nin this example here. Well, then I should\nmake the last element",
    "start": "2916223",
    "end": "2921400"
  },
  {
    "text": "of a from the first\nlist and then recurse with one fewer element\ni, and similarly",
    "start": "2921400",
    "end": "2928210"
  },
  {
    "text": "the reverse case for j. So if we do our runtime\nin two minutes or less--",
    "start": "2928210",
    "end": "2933760"
  },
  {
    "start": "2929000",
    "end": "3175000"
  },
  {
    "text": "bare with me guys-- well, what is this merge\nfunction going to do?",
    "start": "2933760",
    "end": "2939579"
  },
  {
    "text": "Well, in some sense,\nthere's two branches. There's an if statement\nwith two pieces. But both of those\npieces call merge",
    "start": "2939580",
    "end": "2947349"
  },
  {
    "text": "with one fewer piece in it. So in some sense, we have s\nof n equals s of n minus 1",
    "start": "2947350",
    "end": "2955470"
  },
  {
    "text": "plus theta of 1,\nwhich we already know from our previous\nproof means that s of n",
    "start": "2955470",
    "end": "2964230"
  },
  {
    "text": "is equal to theta of n. So in other words, it\ntakes linear time to merge.",
    "start": "2964230",
    "end": "2970972"
  },
  {
    "text": "It makes sense intuitively\nbecause essentially you're touching every one\nof these things once with your two fingers.",
    "start": "2970972",
    "end": "2978440"
  },
  {
    "text": "And now, probably\nthe hardest part of the lecture, which\nI left zero time for, is deriving the runtime for the\nactual merge sort algorithm.",
    "start": "2978440",
    "end": "2987300"
  },
  {
    "text": "And what does that look like? Well, that one's a little bit\ntrickier because, of course,",
    "start": "2987300",
    "end": "2992869"
  },
  {
    "text": "I call the merge sort\nalgorithm twice, each time on a list that's half the size.",
    "start": "2992870",
    "end": "2998240"
  },
  {
    "text": "In this class, we're going to\nassume that our list is always a power of 2 in its length. Otherwise, this analysis\nis a itty bitty bit more",
    "start": "2998240",
    "end": "3006100"
  },
  {
    "text": "of a headache. So first of all,\nhow long does it take to sort an\narray of length 1?",
    "start": "3006100",
    "end": "3011780"
  },
  {
    "text": "I am not going to\nask hard questions. Everybody? Yeah, it's just 1, right?",
    "start": "3011780",
    "end": "3019060"
  },
  {
    "text": "Because there's nothing to do. An array of length 1 has\none element and it's sorted. It's also the biggest element\nand the smallest element.",
    "start": "3019060",
    "end": "3028540"
  },
  {
    "text": "And now, what does\nour algorithm do? Well, it makes two\nrecursive calls on lists that are\nhalf the length.",
    "start": "3028540",
    "end": "3034810"
  },
  {
    "start": "3034810",
    "end": "3040290"
  },
  {
    "text": "And then it calls\nthat merge function. And we know that the merge\nfunction takes theta of n time.",
    "start": "3040290",
    "end": "3046858"
  },
  {
    "text": "Does that make sense? So one thing we might do,\nbecause we have some intuition",
    "start": "3046858",
    "end": "3053200"
  },
  {
    "text": "from your 6042\ncourse, is that we think that this thing is order\nn log n because it makes the two",
    "start": "3053200",
    "end": "3066990"
  },
  {
    "text": "recursive calls. And then it puts them together. And let's double check that\nthat's true really quick using the substitution method.",
    "start": "3066990",
    "end": "3072670"
  },
  {
    "text": "So in particular, on\nthe left-hand side here, maybe I have cn log n.",
    "start": "3072670",
    "end": "3078990"
  },
  {
    "text": "Now, I have 2 c. Well, I have to put an n over\n2 log n over 2 plus theta of n.",
    "start": "3078990",
    "end": "3089250"
  },
  {
    "text": "And I want to double check that\nthis expression is consistent. I've got about a\nfoot to do it in.",
    "start": "3089250",
    "end": "3096330"
  },
  {
    "text": "So remember-- let's see. If we use our favorite\nidentities from high school",
    "start": "3096330",
    "end": "3102690"
  },
  {
    "text": "class that you probably\nforgot, remember that log of 2 things\ndivided by each other is the difference of the logs.",
    "start": "3102690",
    "end": "3108720"
  },
  {
    "text": "So this is really 2. OK. 2 divided by 2 is 1. So this is c times n times log\nn minus log of 2 plus theta n.",
    "start": "3108720",
    "end": "3125900"
  },
  {
    "text": "I'm already out of time. But notice that there's a c n\nlog n on the right-hand side.",
    "start": "3125900",
    "end": "3132290"
  },
  {
    "text": "There's a c n log n\non the left-hand side. So those two things go away.",
    "start": "3132290",
    "end": "3137760"
  },
  {
    "text": "And what am I going\nto be left with? I'm going to be left with\ntheta of n equals cn log of 2.",
    "start": "3137760",
    "end": "3149630"
  },
  {
    "text": "Notice that c and log\n2 are both constants. We have a theta event\non the left-hand side. So there's order\nin the universe.",
    "start": "3149630",
    "end": "3155755"
  },
  {
    "text": "And we've derived our runtime. So I know I rest a little\nbit through merge sort. I'm sure that Erik and Jason\ncan review this a little bit",
    "start": "3155755",
    "end": "3162890"
  },
  {
    "text": "next time. But with that,\nwe'll see you, what? Thursday and Friday.",
    "start": "3162890",
    "end": "3168140"
  },
  {
    "text": "And it's been a pleasure\nto talk to you all. ",
    "start": "3168140",
    "end": "3176000"
  }
]