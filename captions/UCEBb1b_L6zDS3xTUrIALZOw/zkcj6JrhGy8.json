[
  {
    "start": "0",
    "end": "191000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6029"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or to\nview additional materials",
    "start": "6030",
    "end": "12679"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "12680",
    "end": "21900"
  },
  {
    "text": "PROFESSOR: And so I want to\nthank you all for coming. As the holiday season\ncomes along here",
    "start": "21900",
    "end": "28050"
  },
  {
    "text": "I'm guessing that our\npeople are getting",
    "start": "28050",
    "end": "34226"
  },
  {
    "text": "distracted with other things. So a little bit more of\nan intimate setting today. So I urge people to\ntake advantage of that,",
    "start": "34227",
    "end": "41570"
  },
  {
    "text": "ask questions. It's often a lot easier\nto do when there aren't as many people in the room. So I just really want to\nencourage you to do that.",
    "start": "41570",
    "end": "48860"
  },
  {
    "text": "So let's get right into this. ",
    "start": "48860",
    "end": "56290"
  },
  {
    "text": "All right. ",
    "start": "56290",
    "end": "69534"
  },
  {
    "text": "Fortunately the mic\nactually doesn't pick that up at all for the most part. But if you all can hear\nthe drilling of a-- yeah.",
    "start": "69534",
    "end": "75940"
  },
  {
    "start": "75940",
    "end": "82176"
  },
  {
    "text": "All right, so this is Lecture 4. I kinda went out of order to get\nour special Halloween lecture",
    "start": "82176",
    "end": "90070"
  },
  {
    "text": "in last time. But we're going to\ntalking a little bit more about the analysis of what\nwe call structured data.",
    "start": "90070",
    "end": "97899"
  },
  {
    "text": "And we're doing more\nstructured type analyzes on unstructured data.",
    "start": "97900",
    "end": "104940"
  },
  {
    "text": "And of course the signal\nprocessing on databases, this is where we bring the\nideas of detection theory",
    "start": "104940",
    "end": "111670"
  },
  {
    "text": "and apply them to\nthe kinds of data we see in databases, strings,\nand other types of things there.",
    "start": "111670",
    "end": "117170"
  },
  {
    "text": "And so this lecture is going\nto talk a little bit more",
    "start": "117170",
    "end": "123650"
  },
  {
    "text": "about-- we're going to\nget into a little bit more sophisticated analytics. I think up to this point we've\ndone a fairly simple thing,",
    "start": "123650",
    "end": "131849"
  },
  {
    "text": "basic queries using\nthe technology, pretty",
    "start": "131850",
    "end": "137950"
  },
  {
    "text": "simple correlations,\npretty simple stuff. Now we're going to\nbegin to kind of go a little bit more sophisticated\nin some of the things we do.",
    "start": "137950",
    "end": "145410"
  },
  {
    "text": "And again, I think as things\nget more complicated the deform technology becomes, its benefits\nbecome even more apparent.",
    "start": "145410",
    "end": "153586"
  },
  {
    "text": " So we're just going to\nget right into this,",
    "start": "153587",
    "end": "161850"
  },
  {
    "text": "gonna show you our\nvery generic scheme, gonna talk a little bit more\nabout some of the issues",
    "start": "161850",
    "end": "167450"
  },
  {
    "text": "that we encounter when we deal\nwith particular databases. But the database we're going\nto be using for this course",
    "start": "167450",
    "end": "172900"
  },
  {
    "text": "is called accumulo. And so I'll be talking\nabout some issues that are more accumulo specific.",
    "start": "172900",
    "end": "178832"
  },
  {
    "text": " So accumulo is a triple store.",
    "start": "178832",
    "end": "185845"
  },
  {
    "start": "185845",
    "end": "193440"
  },
  {
    "start": "191000",
    "end": "191000"
  },
  {
    "text": "And so the way we read\ndata into our triple store",
    "start": "193440",
    "end": "198780"
  },
  {
    "text": "is using what we call this\nexploded transpose pair schema.",
    "start": "198780",
    "end": "203840"
  },
  {
    "text": "So we have-- [INAUDIBLE]. We have an input\ndata set that might",
    "start": "203840",
    "end": "213170"
  },
  {
    "text": "look like a table like\nthis with maybe our row key is going to be\nsomehow based on time,",
    "start": "213170",
    "end": "219599"
  },
  {
    "text": "and then we have various columns\nhere, which may or may not contain various data.",
    "start": "219600",
    "end": "224780"
  },
  {
    "text": "And then the first thing\nwe do is we basically explode, because our triple\nstores can hold an arbitrary",
    "start": "224780",
    "end": "231950"
  },
  {
    "text": "number of columns. It can add columns\ndynamically without any costs.",
    "start": "231950",
    "end": "237920"
  },
  {
    "text": "We explode this\nschema by appending our Column 1 and its value\ntogether in this way.",
    "start": "237920",
    "end": "245750"
  },
  {
    "text": "We then just took a\nvalue, could be anything, like one, anything that we\nwouldn't want a search on.",
    "start": "245750",
    "end": "251120"
  },
  {
    "text": " And then we have a row key here. I'll get into back a\nlittle bit why we've",
    "start": "251120",
    "end": "257820"
  },
  {
    "text": "done the row key in this way. And so by itself this doesn't\ngive us any real advantage. But in accumulo or any\nother triple store end",
    "start": "257820",
    "end": "265540"
  },
  {
    "text": "or in just in D form\nsociative arrays, we can store the transpose\nof the table, which",
    "start": "265540",
    "end": "272140"
  },
  {
    "text": "means that all these\ncolumns are now rows. And this particular database\nis a row oriented database,",
    "start": "272140",
    "end": "279210"
  },
  {
    "text": "which means it can look up any\nrow key with constant access. So it can look up row\nkeys very quickly.",
    "start": "279210",
    "end": "285870"
  },
  {
    "text": "And D4M a lot we\nhide this from you so that whenever you\ndo inserts it does, if you want it to\nhappen, it will",
    "start": "285870",
    "end": "292680"
  },
  {
    "text": "store the transpose for you. And so you look like you\nhave a giant table where you can look up any row key or\nany column very, very quickly",
    "start": "292680",
    "end": "300690"
  },
  {
    "text": "and makes it very easy to do\nvery complicated analytics. ",
    "start": "300690",
    "end": "306270"
  },
  {
    "text": "One little twist here\nthat you may have noticed is that I have flipped\nthis time field here,",
    "start": "306270",
    "end": "316569"
  },
  {
    "text": "taking it from\nessentially little endian and made it big endian.",
    "start": "316570",
    "end": "323110"
  },
  {
    "text": "And I've always been an\nadvocate of having row keys that have some meaning in them. Sometimes in databases they just\ncreate your arbitrary random",
    "start": "323110",
    "end": "331990"
  },
  {
    "text": "hashes. I think we have enough\nrandom data in the world that we don't necessarily\nneed to create more,",
    "start": "331990",
    "end": "337520"
  },
  {
    "text": "and so if we can have\nmeaning in our row keys, I think it's very\nuseful, because it just makes it that much\neasier to debug",
    "start": "337520",
    "end": "344050"
  },
  {
    "text": "data that actually has meaning.  And so I've often advocated\nfor creating having",
    "start": "344050",
    "end": "351140"
  },
  {
    "text": "a row key be a timelike key. I think it's good to\nhave timelike keys. And by itself\nthere's nothing wrong",
    "start": "351140",
    "end": "359530"
  },
  {
    "text": "with having a little\nendian row key,",
    "start": "359530",
    "end": "365520"
  },
  {
    "text": "except when you go parallel. If this database is actually\nrunning on a parallel system,",
    "start": "365520",
    "end": "371460"
  },
  {
    "text": "you can run into some issues. People have run into\nthese issues, which is why I now advocate\nessentially doing",
    "start": "371460",
    "end": "378610"
  },
  {
    "text": "something else with the\nrow key more like this. In particular, accumulo,\nlike many databases,",
    "start": "378610",
    "end": "388420"
  },
  {
    "text": "when it goes parallel\nit takes the tables and it splits them up.",
    "start": "388420",
    "end": "393460"
  },
  {
    "text": "And it splits them\nup by row keys. So it creates continuous\nblocks of row keys",
    "start": "393460",
    "end": "398670"
  },
  {
    "text": "on different processors. If you have a little\nendian time row key,",
    "start": "398670",
    "end": "408199"
  },
  {
    "text": "it means every single insert\nwill go to the same processor.",
    "start": "408200",
    "end": "414600"
  },
  {
    "text": "And that will\ncreate a bottleneck. And then what will\nhappen over time it will then migrate that\ndata to the other processor.",
    "start": "414600",
    "end": "423310"
  },
  {
    "text": "So it can be a real bottleneck\nif you have essentially a little endian row key.",
    "start": "423310",
    "end": "430540"
  },
  {
    "text": "If you have a big endian\nrow key, if it just uses, it will then break\nup these things. And then when you insert your\ndata, it will sort of naturally",
    "start": "430540",
    "end": "438220"
  },
  {
    "text": "just cause that to spread\nout over all the systems. So that is if your data\nis coming in in some kind",
    "start": "438220",
    "end": "444680"
  },
  {
    "text": "of time order, which happens. We definitely see people\ncoming in that yesterday,",
    "start": "444680",
    "end": "450950"
  },
  {
    "text": "you know, today's\ndata comes in today and tomorrow's data\ncomes in tomorrow. You don't want to have it\nall that data just hitting",
    "start": "450950",
    "end": "456409"
  },
  {
    "text": "one processor or one compute\nnode in your parallel database. Other databases have more\nsophisticated distribution",
    "start": "456410",
    "end": "466270"
  },
  {
    "text": "things they can use as\nsort of a round robin or a modular type of--\nthey'll create a hash that",
    "start": "466270",
    "end": "473750"
  },
  {
    "text": "does a modular so that\nit doesn't have that, eliminates that type of hotspot. But for now we just recommend\nthat people use this.",
    "start": "473750",
    "end": "483190"
  },
  {
    "text": "This does make it\ndifficult to use the row key as your actual time value. And so what you would\nwant to do is also stick,",
    "start": "483190",
    "end": "491330"
  },
  {
    "text": "have a column called time that\nhad the actual time in it. And then you could\nactually directly look up",
    "start": "491330",
    "end": "497940"
  },
  {
    "text": "a time in that way. So that's just a\nlittle nuance there, good sort of design feature.",
    "start": "497940",
    "end": "505030"
  },
  {
    "text": "Probably something\nthat you wouldn't run into for quite a while, but\nwe've definitely had people,",
    "start": "505030",
    "end": "510720"
  },
  {
    "text": "hey I went off and\nimplemented exactly the way you suggested, but now\nI'm going paralyzed",
    "start": "510720",
    "end": "516062"
  },
  {
    "text": "seeing this bottleneck. And I'm like oh. So I'm going to try and correct\nthat right now and tell people that this is the\nright way to do it.",
    "start": "516062",
    "end": "522289"
  },
  {
    "text": " So starting out\nsimple, we're just going to talk about kind of one\nof the simplest analytics you",
    "start": "522289",
    "end": "529460"
  },
  {
    "start": "525000",
    "end": "525000"
  },
  {
    "text": "can do, which is getting\nbasic statistical information from your data set.",
    "start": "529460",
    "end": "534760"
  },
  {
    "text": "So if this is our data set,\nnow we have a bunch of row keys",
    "start": "534760",
    "end": "540200"
  },
  {
    "text": "here, timelike with\nsome additional stuff to make them\nunique, unique rows.",
    "start": "540200",
    "end": "545950"
  },
  {
    "text": "And then we have\nthese various columns here, some of which-- the\ngray ones are, I'm saying, are filled in, and the\nwhite ones are empty.",
    "start": "545950",
    "end": "553460"
  },
  {
    "text": "And so what I want to do is\njust grab a chunk of rows. OK, and then I'm going\nto compute basically",
    "start": "553460",
    "end": "560290"
  },
  {
    "text": "how many times each column\nappears, essentially some. I'll sum by type. So I'll show you how\nwe can look at if you",
    "start": "560290",
    "end": "567199"
  },
  {
    "text": "want to compute just\nhow many entries there were in column 1 or column\n2, computing the covariance,",
    "start": "567199",
    "end": "574060"
  },
  {
    "text": "computing type and para\ncovariances are all different things that we can do. ",
    "start": "574060",
    "end": "581350"
  },
  {
    "text": "So I'm going to do all those\nstatistics on the next slide. All those analytics,\nwhich if you were to do them in another\nenvironment would actually be,",
    "start": "581350",
    "end": "589207"
  },
  {
    "text": "you would write a\nfair amount of code. But here we can do them\nand each one of them is essentially a one liner.",
    "start": "589207",
    "end": "596300"
  },
  {
    "text": "So here's my set of row keys. OK? I've just created\na list of row keys",
    "start": "596300",
    "end": "604149"
  },
  {
    "text": "that have essentially a\ncomma as the separator here.",
    "start": "604150",
    "end": "610040"
  },
  {
    "text": "And there, service that. ",
    "start": "610040",
    "end": "627850"
  },
  {
    "text": "And this is our Table\nT. So in the notation we often just\nrefer Table T. This is in a binding to\nan Accumulator Table",
    "start": "627850",
    "end": "634990"
  },
  {
    "start": "628000",
    "end": "628000"
  },
  {
    "text": "or it could be any table really,\nany database that we support. And so this little\nbit of code here",
    "start": "634990",
    "end": "644920"
  },
  {
    "text": "says, return me all the rows\ngiven by this list of rows here",
    "start": "644920",
    "end": "650149"
  },
  {
    "text": "and all the columns. So we're using the\nMatlab notation. Colon means return\nall the columns. This will then\nreturn these results",
    "start": "650150",
    "end": "657410"
  },
  {
    "text": "in the form of an\nassociative array. Now since the values\nof that are strings,",
    "start": "657410",
    "end": "666130"
  },
  {
    "text": "in this case maybe\nstrings values of 1, we have this little\nfunction here called double logi,\nwhich will just basically",
    "start": "666130",
    "end": "673130"
  },
  {
    "text": "say ignore whatever the\nvalue is and just make it-- if it's got an entry, give it\na 1 or otherwise ignore it.",
    "start": "673130",
    "end": "679310"
  },
  {
    "text": "So this is a shorthand.  It basically does a logical,\nand then it does a double,",
    "start": "679310",
    "end": "686830"
  },
  {
    "text": "so we can do math on it. So this is our query\nthat gets us our rows and returns them as\nan associative array",
    "start": "686830",
    "end": "692290"
  },
  {
    "text": "with numeric values. We then compute\nthe column counts. So that's just the\nMatlab sum command,",
    "start": "692290",
    "end": "699280"
  },
  {
    "text": "which says basically this\ntells you the dimension that's being compressed.",
    "start": "699280",
    "end": "704940"
  },
  {
    "text": "So it's compressing the first\ndimension with the rows. So it's basically collapsing\nit into a row vector.",
    "start": "704940",
    "end": "711260"
  },
  {
    "text": "So it's just summing. So I just would tell us now we\ncould then for all those rows count how many occurrences\nof each unique column,",
    "start": "711260",
    "end": "719819"
  },
  {
    "text": "of each column type there was. ",
    "start": "719820",
    "end": "725150"
  },
  {
    "text": "And then we can then\nget the covariance,",
    "start": "725150",
    "end": "731400"
  },
  {
    "text": "the type type covariance by just\ndoing A transpose A or square in. These do the same thing.",
    "start": "731400",
    "end": "739040"
  },
  {
    "text": "This is usually slightly\nfaster but not a lot. And so that just does the column\ntype, column type, covariance,",
    "start": "739040",
    "end": "748190"
  },
  {
    "text": "very simple. And then finally we have this\nfunction, which essentially",
    "start": "748190",
    "end": "754730"
  },
  {
    "text": "undoes our exploded schema. So let's say we\nwanted to return it back to the original\ndense format",
    "start": "754730",
    "end": "760959"
  },
  {
    "text": "where we have essentially four\ncolumns, column 1, 2, 3, and 4. And we wanted to value put\nback into the value position.",
    "start": "760960",
    "end": "770580"
  },
  {
    "text": "So we have this function\ncall to type with this-- and I don't know if\nthe name makes sense",
    "start": "770580",
    "end": "776690"
  },
  {
    "text": "or not, but that's what we call\nit-- and basically just says, oh, this is the limiter.",
    "start": "776690",
    "end": "782519"
  },
  {
    "text": "So it takes each one of\nthose, splits it back out, and stuffs it back in. And so then you now have\nthat associative array.",
    "start": "782520",
    "end": "792260"
  },
  {
    "text": "You can then do a\nsum again on that to just get like I\nwant to know just how many column 1 instances,\ncolumn 2 instance,",
    "start": "792260",
    "end": "798160"
  },
  {
    "text": "column 3s there are. And likewise, just doing\nA transpose A or square in",
    "start": "798160",
    "end": "804050"
  },
  {
    "text": "would then do the\ncovariance of that. And that would tell you\nof those higher level types how many of there were.",
    "start": "804050",
    "end": "809350"
  },
  {
    "text": "So this is a lot of\nhigh level information. Really highly recommend that\npeople do this when they first",
    "start": "809350",
    "end": "817040"
  },
  {
    "text": "get their data,\nbecause it really uncovers a lot of bad data\nright from the get go. You'll discover columns\nthat are just like,",
    "start": "817040",
    "end": "825290"
  },
  {
    "text": "wow these two column types\nnever appear together. And that doesn't make sense.",
    "start": "825290",
    "end": "830590"
  },
  {
    "text": "There's something wrong there. Or why is this exploded column,\nwhy is it so common when",
    "start": "830590",
    "end": "838990"
  },
  {
    "text": "that doesn't make sense? So again, it's very, very\nuseful for doing things. And we always recommend people\nstart with this analytic.",
    "start": "838990",
    "end": "848062"
  },
  {
    "text": "So again, that's\nvery simple stuff. We've talked about it before. Let's talk about some\nmore sophisticated types",
    "start": "848062",
    "end": "854430"
  },
  {
    "text": "of analytics that\nwe can do here. ",
    "start": "854430",
    "end": "860569"
  },
  {
    "start": "860000",
    "end": "860000"
  },
  {
    "text": "So I'm going to build\nwhat I call a data graph. So this is just a\ngraph in the data.",
    "start": "860570",
    "end": "866990"
  },
  {
    "text": "It may not actually be a real. You may have some\nother graph in mind, but this is the data supports\nas a particular kind of graph",
    "start": "866990",
    "end": "874199"
  },
  {
    "text": "in it. So what we're\ngoing to do here is",
    "start": "874200",
    "end": "880100"
  },
  {
    "text": "we're going to set a couple\nstarting column here. OK, C0, that'll be our\nset of starting columns.",
    "start": "880100",
    "end": "888940"
  },
  {
    "text": "And we're going to set a column. I said I've allowed\ncolumn types.",
    "start": "888940",
    "end": "895170"
  },
  {
    "text": "So we're going to be interested\nin certain column types. And we're going to create\na set of clutter columns. These are columns that\nwe want to ignore.",
    "start": "895170",
    "end": "904120"
  },
  {
    "text": "We want to-- they're either\nvery, very large or whatever. And so the basic\nalgorithm is that we're",
    "start": "904120",
    "end": "913220"
  },
  {
    "text": "going to get all the columns. ",
    "start": "913220",
    "end": "919950"
  },
  {
    "text": "Our result is going\nto be called C1 here. OK, and that's going to be all\nrows in C0 that are of type CT,",
    "start": "919950",
    "end": "933980"
  },
  {
    "text": "and excluding columns CL. So this is a rather complicated\njoined type of thing",
    "start": "933980",
    "end": "942069"
  },
  {
    "text": "that people often want to do. They want to do these\ntypes of things. Look, I want to\nget all these rows,",
    "start": "942070",
    "end": "947420"
  },
  {
    "text": "but I only care about these\nparticular types of columns. And I don't really\ncare about, or I",
    "start": "947420",
    "end": "955160"
  },
  {
    "text": "want to expressively eliminate\ncertain clutter columns that I know are just like\nalways pointing everywhere.",
    "start": "955160",
    "end": "962460"
  },
  {
    "text": "So let's go look through\nthe D4M Code that does this sort of\ncomplicated type of join. ",
    "start": "962460",
    "end": "971710"
  },
  {
    "start": "970000",
    "end": "970000"
  },
  {
    "text": "So I'm going to\nspecify my C0 here. And this could be a whole list.",
    "start": "971710",
    "end": "976870"
  },
  {
    "text": "It's just the whole list\nof starting columns.",
    "start": "976870",
    "end": "981950"
  },
  {
    "text": "I'm going to specify\nmy column types. In this case I'm going\nto have two column types.",
    "start": "981950",
    "end": "988090"
  },
  {
    "text": "I'm gonna say, create a\nstring called starts with, which essentially\ncreates a column range, one column range\naround column 1,",
    "start": "988090",
    "end": "993950"
  },
  {
    "text": "and one column range\naround column 3. And then I'm going to specify\na clutter column here,",
    "start": "993950",
    "end": "1000570"
  },
  {
    "text": "which is just this\nA. And again, it could be a whole list as well. All right, so step one\nhere is I'm going to pass.",
    "start": "1000570",
    "end": "1009260"
  },
  {
    "text": "I'm assuming that\nthis table is bound to one of these exploded\ntransposed pairs.",
    "start": "1009260",
    "end": "1014710"
  },
  {
    "text": "So it will know when\nI give it columns to look up to then point\nto the correct table.",
    "start": "1014710",
    "end": "1021860"
  },
  {
    "text": "So we have a C0 here. And it will say, all right,\nplease return all rows,",
    "start": "1021860",
    "end": "1030359"
  },
  {
    "text": "all the data that contains\nC0, basically all those rows.",
    "start": "1030359",
    "end": "1036230"
  },
  {
    "text": "I'm then going to say now I\ndon't care about their values, I just want the rows.",
    "start": "1036230",
    "end": "1042040"
  },
  {
    "text": "So this is an associative array,\nand this command row just says, just give me those rows. So basically I had a column,\nI returned all the rows,",
    "start": "1042040",
    "end": "1049920"
  },
  {
    "text": "but now I just\nwant the row keys. I'm now going to\ntake those row keys",
    "start": "1049920",
    "end": "1055700"
  },
  {
    "text": "and pass them back\ninto the row position. So now I will have\ngotten the entire row.",
    "start": "1055700",
    "end": "1063750"
  },
  {
    "text": "So basically I got a\ncolumn, I took those rows, and now I'm going and striping\nand painting and getting",
    "start": "1063750",
    "end": "1069850"
  },
  {
    "text": "the whole rows. So now I have every single. And since I don't care\nabout the actual values, I just want them to\nbe numeric, I just",
    "start": "1069850",
    "end": "1078980"
  },
  {
    "text": "use the double logi command. So basically I've done a\nrather complicated little piece of query here in terms of get\nme all columns that contain,",
    "start": "1078980",
    "end": "1087900"
  },
  {
    "text": "all rows that contain\na certain column. And so that's now an\nassociative array.",
    "start": "1087900",
    "end": "1094380"
  },
  {
    "text": "I'm then going to reduce to\nspecific allowed columns. So I'm going to pass in. I'm going to say,\nplease give me just",
    "start": "1094380",
    "end": "1101240"
  },
  {
    "text": "the ones of these\nparticular column types. So I got the whole row, but now\nI just want to eliminate those.",
    "start": "1101240",
    "end": "1107220"
  },
  {
    "text": " I could have probably\nactually put this in here,",
    "start": "1107220",
    "end": "1113220"
  },
  {
    "text": "but whether it's more efficient\nor not to do it here or here, it's 6 of one, half\ndozen of the other.",
    "start": "1113220",
    "end": "1120820"
  },
  {
    "text": "I try and make my\ntable queries just either only columns\nor only rows. It tends to make things simpler.",
    "start": "1120820",
    "end": "1126756"
  },
  {
    "text": " So now we do that. We have just those types.",
    "start": "1126756",
    "end": "1132880"
  },
  {
    "text": "And now I want to eliminate\nthe clutter columns. So I have A, which is\njust of these type.",
    "start": "1132880",
    "end": "1139990"
  },
  {
    "text": "And I want to then eliminate\nany of the columns that are",
    "start": "1139990",
    "end": "1146290"
  },
  {
    "text": "in this, basically, column 1. So I had column 1\nas one of my types, but I don't care about that.",
    "start": "1146290",
    "end": "1151660"
  },
  {
    "text": "And so I can just\ndo subtraction. I can just basically say, oh\ngo get the clutter columns",
    "start": "1151660",
    "end": "1157390"
  },
  {
    "text": "and subtract them from\nthe data that I have. And now I'm just going\nto get those columns,",
    "start": "1157390",
    "end": "1165170"
  },
  {
    "text": "and I have now the\nset of columns. I now have C1. So I've completed\nthe analytic I just described in the-- if you're\ngrabbing like four lines rather",
    "start": "1165170",
    "end": "1173160"
  },
  {
    "text": "sophisticating analytic,\nI could then proceed to look for additional clutter. For instance, I could\nthen basically query say,",
    "start": "1173160",
    "end": "1183230"
  },
  {
    "text": "please give me those, stick\nthe C1 back in and then",
    "start": "1183230",
    "end": "1188700"
  },
  {
    "text": "sum it up and look for things\nthat had a lot of values and continue this process. Just an example of\nsomething I might",
    "start": "1188700",
    "end": "1194720"
  },
  {
    "text": "want to do when I\nhave this data set. So these show you the kinds of\nmore sophisticated analytics",
    "start": "1194720",
    "end": "1201710"
  },
  {
    "text": "that you can do. ",
    "start": "1201710",
    "end": "1207110"
  },
  {
    "start": "1206000",
    "end": "1206000"
  },
  {
    "text": "I want to talk a little\nbit about data graphs in terms of what are the\nthings you can do here,",
    "start": "1207110",
    "end": "1212150"
  },
  {
    "text": "what is supported. The topology of\nyour data, remember this edge list has direction.",
    "start": "1212150",
    "end": "1218275"
  },
  {
    "text": "When you have graphs\nthey can very well have edges that have direction. And a lot of times\npeople will say, well I want to get\nthe whole graph.",
    "start": "1218275",
    "end": "1224128"
  },
  {
    "text": "I'm like, well, if you're\ndoing essentially things that are based on breadth\nfirst search,",
    "start": "1224128",
    "end": "1230950"
  },
  {
    "text": "you may not be able\nto get the full graph, because you're never going at\nit from the correct direction.",
    "start": "1230950",
    "end": "1238410"
  },
  {
    "text": "So you are definitely limited\nby the natural topology of your data. So for example here, let's say\nI start with C0 as column 1A.",
    "start": "1238410",
    "end": "1249110"
  },
  {
    "text": "So I now have essentially\nthis vertex A let's call it.",
    "start": "1249110",
    "end": "1254290"
  },
  {
    "text": " And now here I say, OK,\nI now want to get all.",
    "start": "1254290",
    "end": "1264070"
  },
  {
    "text": "Give me the whole row\nof all I'm going to do. Give me all the rows\nthat contain that.",
    "start": "1264070",
    "end": "1269100"
  },
  {
    "text": "All right, so then\nthese two guys pop up. So I get another A and I\nget a B. So I got a B here.",
    "start": "1269100",
    "end": "1276400"
  },
  {
    "text": "That's good. ",
    "start": "1276400",
    "end": "1281500"
  },
  {
    "text": "And then I'm going to go,\nproceed, go down again. I'm like, all right. I'm going to then now say,\ngive me all the rows that",
    "start": "1281500",
    "end": "1287154"
  },
  {
    "text": "contain those columns.  And I go down again, and I\ngot the C. Did I get a C?",
    "start": "1287154",
    "end": "1299230"
  },
  {
    "text": "No, I never got a C. I never\ngot a C in any one of these, even though it's all in the\ndata and probably all connected.",
    "start": "1299230",
    "end": "1305519"
  },
  {
    "text": "I never actually got a C.",
    "start": "1305520",
    "end": "1313000"
  },
  {
    "text": "There I got the C. Now when\nI did it the second time I got the C, so there we go.",
    "start": "1313000",
    "end": "1318800"
  },
  {
    "text": "So this is an\nexample of a series of breadth first\nsearches that result in getting the whole graph.",
    "start": "1318800",
    "end": "1327690"
  },
  {
    "text": "But the graph had this\ntypology and wouldn't naturally admit that. So certainly in this particular\ncase the data and the queries",
    "start": "1327690",
    "end": "1335690"
  },
  {
    "text": "were good for this,\nwe would call a star, because essentially\nit's a vertex with everything going into it.",
    "start": "1335690",
    "end": "1342799"
  },
  {
    "text": "Let's take a different graph. This is what we call a cycle. So we see we have a little\ncycle here going like this.",
    "start": "1342800",
    "end": "1350750"
  },
  {
    "text": "We start again with\nA. We get our columns.",
    "start": "1350750",
    "end": "1356590"
  },
  {
    "text": "We get C1s across here. And that's kind of\nthe end of the game.",
    "start": "1356590",
    "end": "1362620"
  },
  {
    "text": " We get A's, we get\na B, but we're not",
    "start": "1362620",
    "end": "1369920"
  },
  {
    "text": "going to get anything else\nwhen we column back up. We're not going to\nget anything else. And so we're\nbasically stuck here",
    "start": "1369920",
    "end": "1376480"
  },
  {
    "text": "at B. We weren't able\nto get to C or D. So these are the kind of a\nlittle more subtle things",
    "start": "1376480",
    "end": "1382380"
  },
  {
    "text": "that everyone has\nto worry about. And once you see it it's\nkind of, well, of course. I can't do-- I'm not going\nto get the whole graph.",
    "start": "1382380",
    "end": "1390410"
  },
  {
    "text": "But you'd be amazed how\nmany teams were like, I wanted the whole graph,\nand I just can't do it. It's like, well, you\ndon't have the edges going",
    "start": "1390410",
    "end": "1397930"
  },
  {
    "text": "in the right direction\nfor you to do that. You're going to\nhave to think things through a little bit more.",
    "start": "1397930",
    "end": "1403410"
  },
  {
    "text": "So I just want to-- it's\nkind of a little catch that I want to point out to\npeople, because it's something",
    "start": "1403410",
    "end": "1410310"
  },
  {
    "text": "that people can run into. ",
    "start": "1410310",
    "end": "1415422"
  },
  {
    "text": "We're going to do a little\ndifferent type of analytic here. I've changed some\nof my columns here. I have some.",
    "start": "1415422",
    "end": "1421232"
  },
  {
    "text": "Let's call these coordinates. I'm going to have\nnow with my data set an x and a y-coordinate that\nI'm storing in different rows",
    "start": "1421232",
    "end": "1427679"
  },
  {
    "text": "and columns. I want to do some kind\nof space windowing. I want to find all data within\na particular x and y-coordinate.",
    "start": "1427680",
    "end": "1435752"
  },
  {
    "text": " So what I'm going\nto do is I'm going to select a set of data\nhere R instead of rows.",
    "start": "1435752",
    "end": "1443340"
  },
  {
    "start": "1442000",
    "end": "1442000"
  },
  {
    "text": "And I'm going to\ngive a space polygon. And I'm going to\nquery, get the data.",
    "start": "1443340",
    "end": "1451310"
  },
  {
    "text": "And then I'm going to\nextract the space coordinates from the values\nthere, and I'm gonna",
    "start": "1451310",
    "end": "1456320"
  },
  {
    "text": "return all columns that are\nwithin my space window here.",
    "start": "1456320",
    "end": "1463240"
  },
  {
    "text": "And again, this is good\nfor finding columns in between your space window. ",
    "start": "1463240",
    "end": "1469230"
  },
  {
    "text": "If you're concerned\nthat you're going to be getting an awful\nlot of if you have,",
    "start": "1469230",
    "end": "1476150"
  },
  {
    "text": "let's say you have a coordinate\nthat goes through New York. And you're concerned\nthat's just going to-- you don't want to get,\nyou don't want New York,",
    "start": "1476150",
    "end": "1482500"
  },
  {
    "text": "but you happen to be\non the same latitude and longitude of New York. You can do something called\nMertonization, which basically",
    "start": "1482500",
    "end": "1490669"
  },
  {
    "text": "is essentially imagine\ntaking your strings of your coordinates\nand interleaving them.",
    "start": "1490670",
    "end": "1496970"
  },
  {
    "text": "And now you've essentially\ncreated an Ascii based grid",
    "start": "1496970",
    "end": "1502840"
  },
  {
    "text": "of the entire planet. And so that's a way of if you\nwant to quickly filter down,",
    "start": "1502840",
    "end": "1508980"
  },
  {
    "text": "you can get a box\nand then go back and do the detailed\ncoordinates to vent yourself from having to do.",
    "start": "1508980",
    "end": "1514779"
  },
  {
    "text": "So that's a standard trick. And there's a variety\nof Mertonization schemes that people use for interleaving\ncoordinates in this way.",
    "start": "1514780",
    "end": "1522570"
  },
  {
    "text": "I think Google Earth has a\nstandard box now as well. I find this the simplest,\nbecause you literally just",
    "start": "1522570",
    "end": "1527740"
  },
  {
    "text": "take the two strings\nand interleave them. And if you have a space,\nyou can actually then",
    "start": "1527740",
    "end": "1533360"
  },
  {
    "text": "do with variable precision,\nbecause if you just like, space I don't know. And it all kind of\nworks out pretty nicely.",
    "start": "1533360",
    "end": "1539290"
  },
  {
    "text": "And you can read the\ncoordinate right there. Like, the first\none is the first. And you can even include the\nplus and minus signs for a lot",
    "start": "1539290",
    "end": "1545418"
  },
  {
    "text": "if you wanted to. So maybe not the most efficient\nscheme, but one that's human",
    "start": "1545418",
    "end": "1551831"
  },
  {
    "text": "readable. And I'm a big advocate of human\nreadable types of data schemes.",
    "start": "1551831",
    "end": "1557669"
  },
  {
    "text": "All right, so let's\nactually do that analytic. So again, I created\nmy-- selected my row,",
    "start": "1557670",
    "end": "1565340"
  },
  {
    "text": "got my x and y-coordinates\nin those rows,",
    "start": "1565340",
    "end": "1570480"
  },
  {
    "text": "and then figured out which\ncolumns they were that",
    "start": "1570480",
    "end": "1575540"
  },
  {
    "text": "satisfied that. So let's do that now in code. ",
    "start": "1575540",
    "end": "1582480"
  },
  {
    "start": "1577000",
    "end": "1577000"
  },
  {
    "text": "Let's see here. So we have the-- all\nright, so we have,",
    "start": "1582480",
    "end": "1597960"
  },
  {
    "text": "in this case I gave\nIt a row range. So you can do-- this is what\na range query looks like. If you give any, either an\nassociative array or a table,",
    "start": "1597960",
    "end": "1608470"
  },
  {
    "text": "something that is a triple,\nessentially that's a string,",
    "start": "1608470",
    "end": "1615039"
  },
  {
    "text": "colon, and another\nstring, it will treat that as a range query. And we actually\nsupport doing if you",
    "start": "1615040",
    "end": "1620770"
  },
  {
    "text": "have multiple sets\nof triples, it should handle that,\nwhich is good.",
    "start": "1620770",
    "end": "1627220"
  },
  {
    "text": "I'm going to specify my bounding\nbox here, essentially a box.",
    "start": "1627220",
    "end": "1633380"
  },
  {
    "text": "And I happen to do\nwith complex numbers just for fun, just because\ncomplex numbers are a nice way",
    "start": "1633380",
    "end": "1640309"
  },
  {
    "text": "to store coordinates on\na two dimensional plane.",
    "start": "1640310",
    "end": "1645700"
  },
  {
    "text": "And Matlab supports\nthem very nicely. Complex numbers are our\nfriends, so there you go. But I could have just as easily\nhad a set of x and y vectors.",
    "start": "1645700",
    "end": "1655030"
  },
  {
    "text": "So I'm going to\nget all the rows. So I query that. Very good, we have that.",
    "start": "1655030",
    "end": "1660809"
  },
  {
    "text": "And then, so that\njust gives me that set of data, all those rows. I then use my starts with my x\nand y to get just the columns",
    "start": "1660810",
    "end": "1672470"
  },
  {
    "text": "of those X's and Y's. And I'm now kind of going to\nconvert those exploded back",
    "start": "1672470",
    "end": "1678690"
  },
  {
    "text": "into a regular table with\nthis call to type function. So that basically\ntakes those values.",
    "start": "1678690",
    "end": "1686080"
  },
  {
    "text": "So it takes those coordinate\nvalues, so like we saw. It takes these coordinate\nvalues here like the 0 1,",
    "start": "1686080",
    "end": "1692930"
  },
  {
    "text": "and it puts it back\ninto the value position. ",
    "start": "1692930",
    "end": "1700269"
  },
  {
    "text": "So now I have,\nthough, it will still be a string in the\nvalue position, which our associate arrays\ncan handle fine.",
    "start": "1700270",
    "end": "1705520"
  },
  {
    "text": "But I now want to really\ntreat it like a number. So we just have overloaded\nthe standard Matlab string",
    "start": "1705520",
    "end": "1711200"
  },
  {
    "text": "to numb function, which\nwill convert those strings and will store them back. You now have an associated\narray with numbers in them.",
    "start": "1711200",
    "end": "1719440"
  },
  {
    "text": "So we call this Axy. And now we can do something.",
    "start": "1719440",
    "end": "1725610"
  },
  {
    "text": "We basically can extract\nthe x values here. So we have Axy,\nand say, all right, give me the x column, and then\nAxy and give me the y column.",
    "start": "1725610",
    "end": "1734049"
  },
  {
    "text": "And Matlab has a built in\nfunction called in polygon,",
    "start": "1734050",
    "end": "1739300"
  },
  {
    "text": "which you give it a polygon. So I give it the real\nand the imaginary parts of my polygon here S and\nthe x and y-coordinates.",
    "start": "1739300",
    "end": "1746570"
  },
  {
    "text": "And it will return in\nessentially the value of is that in there,\nwhich is great,",
    "start": "1746570",
    "end": "1756240"
  },
  {
    "text": "because there are many\ndissertations written on the in polygon problem. And it's nice that we have a\nnice built in Matlab function",
    "start": "1756240",
    "end": "1763710"
  },
  {
    "text": "to do that. And then now I have that,\nand I can just pass that back into the original\nA. So I do find.",
    "start": "1763710",
    "end": "1771550"
  },
  {
    "text": "This actually returns a\nlogical of zeros and ones. If I do find, then that will\nreturn a set of indices.",
    "start": "1771550",
    "end": "1776970"
  },
  {
    "text": "And I just pass those\nindices back into A. And then I can get\nthose columns and there we go, all very standard\nMatlab like syntax.",
    "start": "1776970",
    "end": "1785990"
  },
  {
    "text": "Again, this is a fairly\ncomplicated analytic. If you were doing this\nusing other technologies,",
    "start": "1785990",
    "end": "1791010"
  },
  {
    "text": "I mean, I'm sure\nall of us would be writing a fair amount of code. And this is just\nthe kind of thing that we can do\nvery easily in D4M.",
    "start": "1791010",
    "end": "1796646"
  },
  {
    "start": "1796646",
    "end": "1802290"
  },
  {
    "text": "Another analytic, which is\nprobably a bit of a stretch, but I was just having fun\nhere, is doing convolution",
    "start": "1802290",
    "end": "1808710"
  },
  {
    "start": "1803000",
    "end": "1803000"
  },
  {
    "text": "on strings, which\nis a little odd. But I gave it I gave it a whirl.",
    "start": "1808710",
    "end": "1815529"
  },
  {
    "text": "So what we want to do is we want\nto convolve some of our data with a filter.",
    "start": "1815530",
    "end": "1821040"
  },
  {
    "text": "I mean, convolving the filters\nas a standard type of thing. So it's the standard way\nwe do detection here.",
    "start": "1821040",
    "end": "1828300"
  },
  {
    "text": "And so the way we do\nthat is once again,",
    "start": "1828300",
    "end": "1834650"
  },
  {
    "start": "1830000",
    "end": "1830000"
  },
  {
    "text": "I give a list of rows\nthat I want here. I'm going to create a filter,\nwhich is just essentially",
    "start": "1834650",
    "end": "1840269"
  },
  {
    "text": "a box of 4 wide box.",
    "start": "1840270",
    "end": "1846950"
  },
  {
    "text": "So I get my rows.  And then I convert\nthem to numeric.",
    "start": "1846950",
    "end": "1859500"
  },
  {
    "text": "And I'm going to do my\nconvolution on the x columns.",
    "start": "1859500",
    "end": "1865162"
  },
  {
    "text": " So let's see here. So I'm going to get these.",
    "start": "1865162",
    "end": "1871410"
  },
  {
    "text": "I'm basically getting\nall the x-coordinates.  I'm going to sum all of\nthose, so I basically now",
    "start": "1871410",
    "end": "1881780"
  },
  {
    "text": "have all those. And now I'm going to pop\nthose back into their values.",
    "start": "1881780",
    "end": "1888840"
  },
  {
    "text": "And now I can do a convolution. And this convolution\nworks if one of the axes",
    "start": "1888840",
    "end": "1896890"
  },
  {
    "text": "is sort of like an integer\nsequence type of thing. So you can do-- it tries\nto extend that naturally.",
    "start": "1896890",
    "end": "1904310"
  },
  {
    "text": "So something to play around with\nif you want to do convolutions. We sort of support it.",
    "start": "1904310",
    "end": "1911590"
  },
  {
    "text": "And I'm sure if anyone\nof you do play around it, we would be glad to\nhear your experiences, think about how we\nshould extend it.",
    "start": "1911590",
    "end": "1918149"
  },
  {
    "text": "So these are all sort of\nbasic standard first order statistical analytics that\none can do on data sets.",
    "start": "1918150",
    "end": "1923570"
  },
  {
    "text": "And we can support\nthem very, very well. Let's do some more complicated\nwhat I would call second order analytics. ",
    "start": "1923570",
    "end": "1932870"
  },
  {
    "start": "1929000",
    "end": "1929000"
  },
  {
    "text": "So I'm going to do\nsomething called, it's a complicated\njoin essentially,",
    "start": "1932870",
    "end": "1938480"
  },
  {
    "text": "what I call a type pair. So what I want to\ndo here is I want",
    "start": "1938480",
    "end": "1943810"
  },
  {
    "text": "to find all rows\nthat contain values.",
    "start": "1943810",
    "end": "1949840"
  },
  {
    "text": "I want to find rows that\nhave both value of type 1 and of type 2.",
    "start": "1949840",
    "end": "1956050"
  },
  {
    "text": "So I'm going to specify this\nto be, basically x to be type 1 and y to be type 2.",
    "start": "1956050",
    "end": "1961950"
  },
  {
    "text": "And I want to find\nall data that has entries in both those\nvery, very standard type",
    "start": "1961950",
    "end": "1967480"
  },
  {
    "text": "of join type of thing.  And this is done a little\nbit more complicated",
    "start": "1967480",
    "end": "1974350"
  },
  {
    "start": "1971000",
    "end": "1971000"
  },
  {
    "text": "than we need it to be\njust to show you kind of some of the richness here. You can kind of take\na fork in any way.",
    "start": "1974350",
    "end": "1979750"
  },
  {
    "text": "We could probably do this\nwhole thing in about two lines, but I'm kind of showing you\nsome additional features of D4M",
    "start": "1979750",
    "end": "1986549"
  },
  {
    "text": "in the spirit of this analytic. So again, I'm just going\nto use a range query here.",
    "start": "1986550",
    "end": "1991910"
  },
  {
    "text": "So I have this range. I'm going to have my type 1 be\nstarts with x, and my type 2",
    "start": "1991910",
    "end": "1996940"
  },
  {
    "text": "be starts with y. So I do my query. I convert all the string\n1's to numeric 1's.",
    "start": "1996940",
    "end": "2003610"
  },
  {
    "text": "And then what I'm\ngoing to do is I'm going to basically, all right,\nget me all the columns of type",
    "start": "2003610",
    "end": "2010600"
  },
  {
    "text": "1, sum them all together,\nfind everything that equals--",
    "start": "2010600",
    "end": "2019490"
  },
  {
    "text": "and I only care about the\n1's that are exactly equal 1. So like if I had two\nx's, I'm like no.",
    "start": "2019490",
    "end": "2025910"
  },
  {
    "text": "I don't want those. I want exactly\none x in this row.",
    "start": "2025910",
    "end": "2032220"
  },
  {
    "start": "2032220",
    "end": "2038830"
  },
  {
    "text": "And then I'm going to take those\nrows that have exactly one x. I'm going to pass\nthem back into A.",
    "start": "2038830",
    "end": "2045350"
  },
  {
    "text": "So I now just get the rows\nthat have exactly one x.",
    "start": "2045350",
    "end": "2050469"
  },
  {
    "text": "I'm going to filter it\nagain with ct1 and ct2, although, I don't\nneed to do that.",
    "start": "2050469",
    "end": "2057399"
  },
  {
    "text": "Then I'm going to sum it again. And now I'm going\nto say, all right, give me the only ones\nthat are exactly 2.",
    "start": "2057400",
    "end": "2064379"
  },
  {
    "text": "So I know my x is exactly 1. So in order for it to be\nexactly 2, that means my y also",
    "start": "2064380",
    "end": "2070319"
  },
  {
    "text": "had to have only\nexactly one entry in it. So now I have the\ndata that just has",
    "start": "2070320",
    "end": "2075719"
  },
  {
    "text": "exactly one of each of those. ",
    "start": "2075719",
    "end": "2083050"
  },
  {
    "text": "Now I want to create sort of\nlike a cross-correlation pair mapping of this.",
    "start": "2083050",
    "end": "2088520"
  },
  {
    "text": "So I'm actually to look\nfor x's across columns that appear say, I\nwant to look for x's that appear with more\nthan one y or a y that",
    "start": "2088520",
    "end": "2097980"
  },
  {
    "text": "appears with more than one x. So there's a variety\nof ways to do that. Here what I'm doing is-- so I\nhave gotten the rows of A that",
    "start": "2097980",
    "end": "2106200"
  },
  {
    "text": "have exactly one x and y. I now pass that back again to\nget my C, to get the x's again.",
    "start": "2106200",
    "end": "2113810"
  },
  {
    "text": "And one of the things that\nwe've done that's kind of nice is we've overloaded the\nsyntax of this query",
    "start": "2113810",
    "end": "2121190"
  },
  {
    "text": "on our associated arrays\nand on our table queries such that if it only\nhas one argument,",
    "start": "2121190",
    "end": "2126350"
  },
  {
    "text": "it will return an\nassociative array. But if you give it\nthree output arguments, it will return the triple, so in\nthis case, the row, the column,",
    "start": "2126350",
    "end": "2135067"
  },
  {
    "text": "and the value. Now I don't care about\nthe row and the value, I just care about the column. But that's a nice way.",
    "start": "2135067",
    "end": "2140640"
  },
  {
    "text": "We're often gonna\nin certain cases want to bump back\nand forth between the triples representation\nand the associated array",
    "start": "2140640",
    "end": "2149336"
  },
  {
    "text": "implementation. Now you always can\nuse the Find command around any associated array\njust as you can in normal Matlab",
    "start": "2149336",
    "end": "2156480"
  },
  {
    "text": "matrices not return the triple. The advantage of\ndoing it here is",
    "start": "2156480",
    "end": "2161740"
  },
  {
    "text": "that it's faster,\nbecause what we actually",
    "start": "2161740",
    "end": "2167220"
  },
  {
    "text": "do when we do the\nquery internally is we actually get the\ntriples and then convert",
    "start": "2167220",
    "end": "2172940"
  },
  {
    "text": "to an associative array. And if you just say\nI want the triples, we can just short cut that\nand give you the triples right away.",
    "start": "2172940",
    "end": "2178250"
  },
  {
    "text": "So sometimes if you're\ndealing with a very large associative arrays or\nsome operation that's just",
    "start": "2178250",
    "end": "2184960"
  },
  {
    "text": "I want to get some more\nperformance back then working. Especially if you like, well,\nI only care about one thing,",
    "start": "2184960",
    "end": "2191350"
  },
  {
    "text": "I don't care about\nall of the values, I don't really need to be\na full associative array, then that's a great way to\nsort of short circuit that.",
    "start": "2191350",
    "end": "2199000"
  },
  {
    "text": "So we do that here. And now we can construct\na new associate array, which is just taking the\nx's and the y's and creating",
    "start": "2199000",
    "end": "2207000"
  },
  {
    "text": "a new associative\narray with those. And that just shows me\nthe correlations between",
    "start": "2207000",
    "end": "2214210"
  },
  {
    "text": "the x's and the y's. And I can then find ct,\nbasically x's that have more",
    "start": "2214210",
    "end": "2221110"
  },
  {
    "text": "than one y-- so I've\njust summed them there-- or y's with more than one x's.",
    "start": "2221110",
    "end": "2226430"
  },
  {
    "text": "Again, these are very\nsimilar to analytics that people want to do. And again, very simple to do.",
    "start": "2226430",
    "end": "2232310"
  },
  {
    "text": "And again, showing you some of\nthe different types of syntax that are available\nto you in D4M.",
    "start": "2232310",
    "end": "2238119"
  },
  {
    "text": "Again, if you're used to using\nMatlab, these types of tricks are very natural. We're just showing you that\nthey also exist within D4M.",
    "start": "2238120",
    "end": "2246210"
  },
  {
    "text": " So here's another one.",
    "start": "2246210",
    "end": "2252220"
  },
  {
    "text": "So I wanted to find column\nof pair set C1 and C2,",
    "start": "2252220",
    "end": "2257310"
  },
  {
    "text": "and get all columns C1 and C2,\nand find the rows that have just one entry in C1 and C2.",
    "start": "2257310",
    "end": "2263950"
  },
  {
    "text": " And it basically checks\nto see if data pairs are present in the same row.",
    "start": "2263950",
    "end": "2270110"
  },
  {
    "text": "Again, something that\npeople often want to do. You've got a complicated\ntype of join. So here we have a set of columns\none C1, a set of column C2.",
    "start": "2270110",
    "end": "2278440"
  },
  {
    "start": "2271000",
    "end": "2271000"
  },
  {
    "text": " I want to create this, I want\nto sort of interleave these",
    "start": "2278440",
    "end": "2285150"
  },
  {
    "text": "together into a pair. So I want to create\nsome concept of a pair.",
    "start": "2285150",
    "end": "2290240"
  },
  {
    "text": "And so we have\nthis function here called cat string,\nwhich basically will take two strings\nand another delimiter,",
    "start": "2290240",
    "end": "2298380"
  },
  {
    "text": "and will basically if they are\nof the same number of strings will just leave them together. If one of these is\njust a single string,",
    "start": "2298380",
    "end": "2304700"
  },
  {
    "text": "it will just an essentially\npreappend or append that. So for instance, if you are\nwondering how we actually",
    "start": "2304700",
    "end": "2310119"
  },
  {
    "text": "create these exploded\nvalues like call 1 and B, that's just basically\nusing this function here.",
    "start": "2310120",
    "end": "2316290"
  },
  {
    "text": "We get the values,\nwe get the columns, we put essentially the\npipe thing in the middle,",
    "start": "2316290",
    "end": "2321560"
  },
  {
    "text": "and it just merges\nthem together. So we now sort of interleave\nthese two together. So we'll now have something\nlike Col1 b pipe Col3",
    "start": "2321560",
    "end": "2331100"
  },
  {
    "text": "b pipe comma as the separator. So now I can create a\nset of pair mappings",
    "start": "2331100",
    "end": "2337540"
  },
  {
    "text": "from C1 to its pairs. OK, that's A1 to its pairs\nand A2 to it's pairs.",
    "start": "2337540",
    "end": "2344090"
  },
  {
    "text": "I can get the columns\nof those A1 and A2. And then I can find all\nthe pairs by essentially",
    "start": "2344090",
    "end": "2350040"
  },
  {
    "text": "through this combination of\nmatrix multiplies and additions and etc. So a very sort of complicated\nanalytic done very nicely.",
    "start": "2350040",
    "end": "2358741"
  },
  {
    "text": "And then there's a whole\nbunch of different ones you can do here. These are almost\nsemantic extension. The column types may have\nseveral different types,",
    "start": "2358741",
    "end": "2365770"
  },
  {
    "text": "and you want to do. So for instance, if I have\na pair of columns here, column 1 and column\n3, I could say, well,",
    "start": "2365770",
    "end": "2373260"
  },
  {
    "text": "that also implies this. Column three equals column 1. That's one kind of sort of\npair reversal type of thing.",
    "start": "2373260",
    "end": "2379530"
  },
  {
    "text": "You'll have extensions. You might say, look\nif I have a column 1A that also implies\nthat really there should also be a column\n2A, and other types",
    "start": "2379530",
    "end": "2387220"
  },
  {
    "text": "of things like that. So these are just\ntypes of things that people do with pairs. They're often very useful.",
    "start": "2387220",
    "end": "2393990"
  },
  {
    "text": "And I think that\nbasically brings us to the end of the\nlecture portion of class.",
    "start": "2393990",
    "end": "2401060"
  },
  {
    "start": "2399000",
    "end": "2399000"
  },
  {
    "text": "So again, just the\nexploited schema really allows you to do this\nvery rapidly with your data. And you can implement a very\nefficient graph analytics",
    "start": "2401060",
    "end": "2410530"
  },
  {
    "text": "as a sequence of essentially\nrow and column queries, because we use this very special\nexploded transpose pair schema.",
    "start": "2410530",
    "end": "2421250"
  },
  {
    "text": "And increasingly as you\nbecome more and more skilled with this, you will discover\nthat many, many, many",
    "start": "2421250",
    "end": "2427240"
  },
  {
    "text": "of your analytics really reduce\nto matrix matrix multiplies. That matrix matrix\nmultiply really",
    "start": "2427240",
    "end": "2433910"
  },
  {
    "text": "captures the whole\nsort of all correlation that you want to do without\nhaving to kind of figure things",
    "start": "2433910",
    "end": "2443480"
  },
  {
    "text": "out. All right, so I'm now\ngoing to go and show some not these specific\nanalytics, but some analytics",
    "start": "2443480",
    "end": "2449260"
  },
  {
    "text": "that are more sophisticated\nbased on the Reuters data set. If you remember a\nfew weeks ago, we",
    "start": "2449260",
    "end": "2454720"
  },
  {
    "text": "worked with the\nReuters data set. And so let's see here.",
    "start": "2454720",
    "end": "2460980"
  },
  {
    "start": "2458000",
    "end": "2458000"
  },
  {
    "text": "So we already did the\nentity analysis application a few weeks ago. I'm going to now\ndo basically what",
    "start": "2460980",
    "end": "2467940"
  },
  {
    "text": "happens when you\nconstruct tracks, which is a more sophisticated\nstructured analytic. And the assignment I'll\nsend out was basically",
    "start": "2467940",
    "end": "2477690"
  },
  {
    "text": "doing more cross correlations. For those of you who have\nkept it going here this far and continue to\ndo the homeworks,",
    "start": "2477690",
    "end": "2484000"
  },
  {
    "text": "I'll send this\nhomework out to you, which is basically\njust cross correlating the data sets that you have.",
    "start": "2484000",
    "end": "2489200"
  },
  {
    "text": "Again, and not an assignment\nthat really predispose requires you having done\nthe previous assignments.",
    "start": "2489200",
    "end": "2496930"
  },
  {
    "text": "Just any data set, pull it\ninto an associate array, and then do matrix\nmultiplies to figure out",
    "start": "2496930",
    "end": "2503960"
  },
  {
    "text": "the cross correlations\nand what they mean. All right, so with\nthat, why don't we take a short five minute break.",
    "start": "2503960",
    "end": "2510530"
  },
  {
    "text": "And then I'll come back\nand show you the demo.",
    "start": "2510530",
    "end": "2513450"
  }
]