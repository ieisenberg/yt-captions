[
  {
    "start": "0",
    "end": "21640"
  },
  {
    "text": "PROFESSOR: And the\nfirst slide, see whether you guys can spend\nsome time thinking about it.",
    "start": "21640",
    "end": "28690"
  },
  {
    "text": "So what happens is\nthere's this function. And there are some\ncaller-saved registers",
    "start": "28690",
    "end": "34000"
  },
  {
    "text": "and some callee-saved registers. And some of those registers, I\njust did a very abstract reuse.",
    "start": "34000",
    "end": "41329"
  },
  {
    "text": "And then there's\na function call. And at these four locations\nhere to either save and restore",
    "start": "41330",
    "end": "47080"
  },
  {
    "text": "some stuff, which has to be\nresaved and restored where? ",
    "start": "47080",
    "end": "88350"
  },
  {
    "text": "[INAUDIBLE] Which has to be\nresaved and restored where? Which registers?",
    "start": "88350",
    "end": "93820"
  },
  {
    "start": "93820",
    "end": "114410"
  },
  {
    "text": "So what should\nhappen at the top? ",
    "start": "114410",
    "end": "121660"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: Which one? AUDIENCE: [INAUDIBLE] PROFESSOR: Do they\nsave everything? ",
    "start": "121660",
    "end": "131030"
  },
  {
    "text": "What do we use? Because what I have to save\nis the things I actually use.",
    "start": "131030",
    "end": "136357"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]\nzero [INAUDIBLE] PROFESSOR: Zero [INAUDIBLE]. Where do I restore them? AUDIENCE: [INAUDIBLE]",
    "start": "136357",
    "end": "141530"
  },
  {
    "text": "PROFESSOR: Very good. Next one is a little\nbit more interesting. Before call to bar, what\nshould I have saved?",
    "start": "141530",
    "end": "148090"
  },
  {
    "start": "148090",
    "end": "165319"
  },
  {
    "text": "Anybody? AUDIENCE: T1? [INAUDIBLE] PROFESSOR: T1, anybody think\nT0 needs to be saved and T2?",
    "start": "165320",
    "end": "179140"
  },
  {
    "text": "Why? AUDIENCE: [INAUDIBLE] PROFESSOR: Exactly. Value is not live. The only thing I save\nis if the value is",
    "start": "179140",
    "end": "185640"
  },
  {
    "text": "live across that function call. The value is not love. So basically what happens is\nyou save and restore T1 here.",
    "start": "185640",
    "end": "193075"
  },
  {
    "text": "You have save and\nrestore all the SS used and in the function, basically.",
    "start": "193075",
    "end": "198360"
  },
  {
    "text": " So last time we went very fast\nover the procedure linkage.",
    "start": "198360",
    "end": "206198"
  },
  {
    "text": "And I'm going to go a\nlittle bit slower this time and go through this. This is the second time. So if you have any\nquestions, ask me.",
    "start": "206198",
    "end": "211989"
  },
  {
    "text": "Then I will talk a little\nbit about generation of statements and control flow. That kind of covers\neverything that's required.",
    "start": "211990",
    "end": "218830"
  },
  {
    "text": "And a few slides\non the architecture you guys are using. And give a little bit of\noverview of different types",
    "start": "218830",
    "end": "226105"
  },
  {
    "text": "of architectures out there. And then finally,\nsome guidance of how to write a code generator\nso you guys can get started.",
    "start": "226105",
    "end": "233570"
  },
  {
    "text": "By the way, did Punia give\nyou the account information to get into the x86-64 machine? No? OK, so we'll try\nto get it today.",
    "start": "233570",
    "end": "239830"
  },
  {
    "text": "Because we could clear a\nbunch of accounts for you guys and get started fast.",
    "start": "239830",
    "end": "245237"
  },
  {
    "text": "So that's the first thing. Let's do the linkage. So what happened is, every\ntime you do a function call,",
    "start": "245237",
    "end": "252849"
  },
  {
    "text": "procedure call, you\nhad to do a pre-call. There's a prologue and\nepilogue at the caller site and also prologue and epilogue\nat the callee at the beginning",
    "start": "252850",
    "end": "260970"
  },
  {
    "text": "and end. So let's go through\nwhat this change is from every architecture\nto architecture. In fact, what we are\ngiving for [INAUDIBLE]",
    "start": "260970",
    "end": "267820"
  },
  {
    "text": "is, in fact, not the calling\nconvention for Linux x86-64. It seemed to be a little\nbit too complicated.",
    "start": "267820",
    "end": "273230"
  },
  {
    "text": "So we created a smaller,\nsimpler calling convention. So what that means is if you\ndirectly call a Linux library,",
    "start": "273230",
    "end": "279310"
  },
  {
    "text": "it won't work. Or if you compile another\nobject in Linux object and then link them\ntogether, it won't work.",
    "start": "279310",
    "end": "285287"
  },
  {
    "text": "So you need a little\nbit of a wrapper. So this is a simpler\ncalling convention. So what we assume is assume\nI have RC access live,",
    "start": "285287",
    "end": "297130"
  },
  {
    "text": "and so I had to call a save-- that one. And I am far passing--",
    "start": "297130",
    "end": "303010"
  },
  {
    "text": "calling through with\nthree different arguments. So these are some where-- I just said we are there\nin the stack, basically.",
    "start": "303010",
    "end": "312187"
  },
  {
    "text": "Because they are local variable. Some messaging in the\nstack, we know those things. And so, what we had to\ndo is, so when you start,",
    "start": "312187",
    "end": "317605"
  },
  {
    "text": "you have a stack like that. We have a dynamic\narea, something might have push, stack\ntemporaries, local variables,",
    "start": "317605",
    "end": "324083"
  },
  {
    "text": "callee saved registers, all\nthose things are in the stack. And most of these are accessed\nthrough the base point",
    "start": "324083",
    "end": "331930"
  },
  {
    "text": "in here or the frame pointer. So what the first thing\nyou had to do is you had to save this call\nas save registers.",
    "start": "331930",
    "end": "339100"
  },
  {
    "text": "Either you know of fixed\nlocation, you put it there. Or you can just push it,\nand if you do a matching pop at that vein.",
    "start": "339100",
    "end": "345040"
  },
  {
    "text": "And then, I need to put\nthose arguments in there. I push those arguments\nin into the stack. You can do this by just\ndoing push and pop.",
    "start": "345040",
    "end": "351850"
  },
  {
    "text": "Also if you actually calculate\nin the stack location, we can do explicit\nsaves of base point.",
    "start": "351850",
    "end": "357310"
  },
  {
    "text": "But pushing and\npopping is probably OK. That's right in there. Because if you're\ndoing base point,",
    "start": "357310",
    "end": "362380"
  },
  {
    "text": "that means you don't have-- if you have multiple\nfunction calls, then you need to have exact\nsame size frame, which is hard.",
    "start": "362380",
    "end": "369470"
  },
  {
    "text": "So each function, you\npush what's needed. And then I do the call.",
    "start": "369470",
    "end": "374530"
  },
  {
    "text": "Call instruction by\nitself will go and put the return address in there and\nget the stack new point there.",
    "start": "374530",
    "end": "380060"
  },
  {
    "text": "So now I am at that point. I actually am in the callee.",
    "start": "380060",
    "end": "385480"
  },
  {
    "text": "And I assume the\ncallee one register that is basically callee save. So the first thing\nthey call-- and it",
    "start": "385480",
    "end": "391900"
  },
  {
    "text": "needs 40 bytes for locals. So what first thing I had do is\nI had to push the frame point.",
    "start": "391900",
    "end": "397900"
  },
  {
    "text": "Because I am\nstarting a new frame. So I had to store the\nwhole frame pointer. And after I store the\nwhole frame for what I do",
    "start": "397900",
    "end": "403360"
  },
  {
    "text": "is I update my frame. Now everything is out of the new\nframe in here, my new function. And then I added 48.",
    "start": "403360",
    "end": "411220"
  },
  {
    "text": "Why 48? ",
    "start": "411220",
    "end": "416400"
  },
  {
    "text": "Why not 40? ",
    "start": "416400",
    "end": "437330"
  },
  {
    "text": "I'm trying to save this\ncallee save register too. I have 40 for the locals.",
    "start": "437330",
    "end": "443397"
  },
  {
    "text": "But I had to put the callee\nsave register somewhere too. So basically what I did\nwas, I added in room",
    "start": "443397",
    "end": "448550"
  },
  {
    "text": "for callee save registers. Stacked temporaries,\nI don't seem to-- and local variables\nseen require 40 bytes.",
    "start": "448550",
    "end": "453960"
  },
  {
    "text": "So I added that. And I have 48 bytes. And I do that. And then, finally I\nmove the callee save off",
    "start": "453960",
    "end": "460250"
  },
  {
    "text": "the frame point in there. So now I'm ready to do what\nthe function has to do. So what kind of things\nyou do in the function?",
    "start": "460250",
    "end": "467270"
  },
  {
    "text": "Oh, by the way, so\nall those things can be done by one\ninstruction called enter. So you can see that, enter\nis easier to generate.",
    "start": "467270",
    "end": "477590"
  },
  {
    "text": "So the next thing is, now\nI enter in the function. Now I can access\nall my parameters",
    "start": "477590",
    "end": "484580"
  },
  {
    "text": "using, basically, what we did. So we pass parameters by just\npushing them into the stack.",
    "start": "484580",
    "end": "491250"
  },
  {
    "text": "So we know where the\narguments are in there, just before the return\naddress in there.",
    "start": "491250",
    "end": "497360"
  },
  {
    "text": "And then when I\nwant to address, I know exactly that from the\nbase point to the offset,",
    "start": "497360",
    "end": "502560"
  },
  {
    "text": "the first one is 16 off\nthere, because there's a-- you had to pass the return\naddress and get to that.",
    "start": "502560",
    "end": "508289"
  },
  {
    "text": "And then you can just do\nmove, and saves off that.",
    "start": "508290",
    "end": "515240"
  },
  {
    "text": "So it's a pretty easy\nthing to do that. So all the arguments\nthat get passed",
    "start": "515240",
    "end": "522349"
  },
  {
    "text": "is directly off base pointer. That's great. And then, locals also you are\naddressing on the other side",
    "start": "522350",
    "end": "530300"
  },
  {
    "text": "of the base pointer. So locals and\ncontemporaries, you probably have a map somewhere saying\nwhere those things are.",
    "start": "530300",
    "end": "535565"
  },
  {
    "text": "You allocate memory and\nyou can just directly gain access to those things. So now, by doing\nthis, you know how",
    "start": "535565",
    "end": "540590"
  },
  {
    "text": "to access all-- both the local\nand temporaries what you assign as well as all arguments.",
    "start": "540590",
    "end": "548310"
  },
  {
    "text": "So now we are here\nready to return. So what do you do in return? You have to restore the\ncaller save register.",
    "start": "548310",
    "end": "555920"
  },
  {
    "text": "So we had to basically\nrestore that thing in there. And then, one convention\nwe follow is all the return",
    "start": "555920",
    "end": "563480"
  },
  {
    "text": "will go through a register. We don't put a return\nvalue in the stack. So return value goes through\nthe register array x.",
    "start": "563480",
    "end": "570170"
  },
  {
    "text": "So what that means is you copy\nthe return value into array x, what assume this\n[INAUDIBLE] was here",
    "start": "570170",
    "end": "577399"
  },
  {
    "text": "in the local here somewhere,\nyou copied it to array x. And the next thing you do is\nyou restore the stack pointer.",
    "start": "577400",
    "end": "587330"
  },
  {
    "text": "Why didn't I just go-- before and I did a\nsubtract 48, why didn't I",
    "start": "587330",
    "end": "593960"
  },
  {
    "text": "go and just add 48 to RSB? Why did I actually\ncopy RBP to RSB?",
    "start": "593960",
    "end": "600529"
  },
  {
    "text": "What happens if I just-- because\nbeforehand I did was I did-- I add 48. Why didn't I just go\nand do subtract 48?",
    "start": "600530",
    "end": "606080"
  },
  {
    "text": " Would you have done\nthe same thing?",
    "start": "606080",
    "end": "612250"
  },
  {
    "start": "612250",
    "end": "621370"
  },
  {
    "text": "Anybody want to take a guess? Is it too early in the morning? It's not that early. AUDIENCE: [INAUDIBLE]\nif you had something",
    "start": "621370",
    "end": "627890"
  },
  {
    "text": "onto the stack, or first\nsomething off the stack, and then [INAUDIBLE]. PROFESSOR: So if you had messed\nup your stack in the function,",
    "start": "627890",
    "end": "635030"
  },
  {
    "text": "because you are going\nthrough control flow, doing different things. And if you messed up your\nstack, and the minute you subtract something thinking\nthe stack is a certain way,",
    "start": "635030",
    "end": "642680"
  },
  {
    "text": "you just-- this\nfunction is gone. And you will never\nreturn out of it. You will crash in the program. Because it's things\nreturn to somewhere here.",
    "start": "642680",
    "end": "648709"
  },
  {
    "text": "By doing this, at least even if\nyou have messed up your stack, you can recover. Because that value\ndidn't change.",
    "start": "648710",
    "end": "655680"
  },
  {
    "text": "And so, that's a nice\nthing to do, basically. So this gives you a\nmuch better chance",
    "start": "655680",
    "end": "662779"
  },
  {
    "text": "of recovering from some kind\nof a mishap on the stack. The stack you keep\npushing and popping along.",
    "start": "662780",
    "end": "668540"
  },
  {
    "text": " So the next thing is you move\nthe frame to the previous one",
    "start": "668540",
    "end": "675380"
  },
  {
    "text": "and I return. And voila, I'm out\nof this function. So at that point, also\nthese two instructions",
    "start": "675380",
    "end": "682550"
  },
  {
    "text": "could be replaced by leave. Again, this is a thing\nabout x86-64 basically. Everything has its\nown instruction.",
    "start": "682550",
    "end": "689120"
  },
  {
    "text": "And it's amazing how\ncomplicated thing some of these instructions does. So Punia gave you\nthat, and but I",
    "start": "689120",
    "end": "696050"
  },
  {
    "text": "want to actually show\nexactly what these things go. Now I'm coming out of the call.",
    "start": "696050",
    "end": "701750"
  },
  {
    "text": "First thing I want\nto do is, I want to get rid of all the arguments\nI passed, because I actually pushed them. So I can either pop the same\namount, some [INAUDIBLE]",
    "start": "701750",
    "end": "709190"
  },
  {
    "text": "get rid of it. Or it's easier just to add to\nthe stack pointer in there. And I save this register.",
    "start": "709190",
    "end": "715040"
  },
  {
    "text": "I need to restore that register. And then, also, I need to\nmove the return value I got",
    "start": "715040",
    "end": "721399"
  },
  {
    "text": "to where it's supposed to go. Because normally, we\nkeep all the values in stack or global storage.",
    "start": "721400",
    "end": "730268"
  },
  {
    "text": "You don't keep things\nfrom registers. So we move it from there. And then you are done. So at this point, we know\nhow to do a procedure.",
    "start": "730268",
    "end": "737990"
  },
  {
    "text": "So by doing this,\ngenerating this code, you should be able to\nbasically call a function, come out of a function, and\nalso generate the prologue",
    "start": "737990",
    "end": "744343"
  },
  {
    "text": "and epilogue for a function. So just be able to\nget to that point. So most of things are there.",
    "start": "744343",
    "end": "749730"
  },
  {
    "text": "So let me go through a simple\nexample to demonstrate this.",
    "start": "749730",
    "end": "754880"
  },
  {
    "text": "Something [INAUDIBLE]\nlooking program. That's a function down\nhere that do a comparison",
    "start": "754880",
    "end": "761930"
  },
  {
    "text": "and basically trying to find a-- do basically to find the\ndifference, basically--",
    "start": "761930",
    "end": "774269"
  },
  {
    "text": "absolute variable of\nthe difference and then add some value into this one. It's just-- and then,\nso what I'm doing is,",
    "start": "774270",
    "end": "780140"
  },
  {
    "text": "I have passed in three\nglobal values into this one. So what that means--\nactually, not global.",
    "start": "780140",
    "end": "787650"
  },
  {
    "text": "It's actually three locals\nfrom the function main. So locals, I have this kind\nof a frame pointer starting.",
    "start": "787650",
    "end": "793070"
  },
  {
    "text": "So px, py, pz is in the\nlocal variables in here. And then I am here.",
    "start": "793070",
    "end": "799080"
  },
  {
    "text": "And this is what my\nstack will look like. And the minute I call,\nwhat happens is-- ",
    "start": "799080",
    "end": "806300"
  },
  {
    "text": "before I call, I basically\npass the arguments. I put the three arguments\nin here, 10, 20, and 30.",
    "start": "806300",
    "end": "812882"
  },
  {
    "text": "Still, I don't know what\nnames it's going to bind to, because I haven't actually\ndone the call in here. So the minute I do\nthe call, I'm here.",
    "start": "812882",
    "end": "818990"
  },
  {
    "text": "I actually got the\nreturn address and frame pointer going in there. And now, I know which\narguments match up.",
    "start": "818990",
    "end": "824270"
  },
  {
    "text": "Basically cx, bx, ax\nget matched up here. And then, now when I\ngo into this function,",
    "start": "824270",
    "end": "830550"
  },
  {
    "text": "I actually will allocate\nmy dx, dy, dc also in here.",
    "start": "830550",
    "end": "836779"
  },
  {
    "text": "And voila. I get-- basically now\nI can go and execute what's inside this there.",
    "start": "836780",
    "end": "844070"
  },
  {
    "text": "So another question. Why do I need the base\npoint or frame pointer? ",
    "start": "844070",
    "end": "851930"
  },
  {
    "text": "Why can't we just use\nstack point and use that register for something better? ",
    "start": "851930",
    "end": "861089"
  },
  {
    "text": "AUDIENCE: Well, you\ncan, just [INAUDIBLE]  PROFESSOR: Yeah. So what that means is, all the\nway we are accessing locals",
    "start": "861090",
    "end": "869860"
  },
  {
    "text": "and basically parameters\npast is off the base point.",
    "start": "869860",
    "end": "875203"
  },
  {
    "text": "And I think about that\nis within the function. Now, those offsets\nare all the same. But if you are doing\nit stack offset,",
    "start": "875203",
    "end": "880870"
  },
  {
    "text": "every time you push something,\nthat all the offsets keep changing. So you had to actually keep\ntab of where stack point and where all the offsets are.",
    "start": "880870",
    "end": "888130"
  },
  {
    "text": "Can be done. But could be quite messy. AUDIENCE: [INAUDIBLE] the other\nside of that argument is that",
    "start": "888130",
    "end": "896020"
  },
  {
    "text": "the-- that's all done by the compiler. [INAUDIBLE] compiler is\nvery good [INAUDIBLE] ",
    "start": "896020",
    "end": "910779"
  },
  {
    "text": "PROFESSOR: Yeah. But the trouble\nthat is sometimes if you throw exception.",
    "start": "910780",
    "end": "916800"
  },
  {
    "text": "The system relies on\nbase point to figure out where the stack frame\nis and stuff like that. If you are messed up\nwith the base pointer,",
    "start": "916800",
    "end": "922432"
  },
  {
    "text": "you just did a divide by 0. And now it's completely no idea\nwhere you are in the stack. And then, it's hard\nto undo things.",
    "start": "922432",
    "end": "928990"
  },
  {
    "text": "So base pointer\ngives some advantage, because it gives a very clear\nindication where each frame is.",
    "start": "928990",
    "end": "935460"
  },
  {
    "text": "So things like recording from\nexceptions and stuff like could-- were much\neasier to deal with. Otherwise, we had to go\nmake some assumptions,",
    "start": "935460",
    "end": "941790"
  },
  {
    "text": "just scan and say, OK, I think\nthis is the return address.",
    "start": "941790",
    "end": "946930"
  },
  {
    "text": "So at this point,\nwe have covered most of things that's necessary\nto do the code generation.",
    "start": "946930",
    "end": "952980"
  },
  {
    "text": "And the two things that left\nis control flow and statements. And we'll go slowly cover\ncontrol flow and statements.",
    "start": "952980",
    "end": "958380"
  },
  {
    "text": "At that time, you guys are\nready to go write a full code generator. So generation of statements.",
    "start": "958380",
    "end": "966248"
  },
  {
    "text": "So normally, the thing\nabout the statements is they have expression trees. And statements are either\njust expression tree",
    "start": "966248",
    "end": "974040"
  },
  {
    "text": "that get evaluated by\na compare instruction. That can change the condition\ncode-- use something else",
    "start": "974040",
    "end": "980880"
  },
  {
    "text": "to do a branch. Or it actually is evaluated\nand assigned to some variable. There's one thing that can be\na little bit more complicated.",
    "start": "980880",
    "end": "988650"
  },
  {
    "text": "Anybody can say what it is? That is if you have\naccessing-- if you are",
    "start": "988650",
    "end": "994709"
  },
  {
    "text": "assigning into array access. So then the left-hand side\nis not simple variable. You actually have to calculate\naddressed too in some sense.",
    "start": "994710",
    "end": "1001800"
  },
  {
    "text": "So it's not a simple\ngoing into one location. So you might have some\naddress calculation coming up there too.",
    "start": "1001800",
    "end": "1007220"
  },
  {
    "text": "So that means the top is a more\nwith some address calculation coming.",
    "start": "1007220",
    "end": "1013500"
  },
  {
    "text": "So the key thing\nabout this is how to arrange the evaluation\nmode of expression tree",
    "start": "1013500",
    "end": "1020420"
  },
  {
    "text": "and where to keep all\nintermediate values. Those are the two things\nwe have to decide. And we will do some\nvery simple dumb things.",
    "start": "1020420",
    "end": "1026569"
  },
  {
    "text": "And there are two approaches. The stack model and a\nvery flat list model.",
    "start": "1026569",
    "end": "1032069"
  },
  {
    "text": "So in the stack model, what\nyou do is really simple. You look at the expression tree.",
    "start": "1032069",
    "end": "1037280"
  },
  {
    "text": "And you start emitting\ncode in a recursive way. You can say, omit the code\nfor the left sub-tree put",
    "start": "1037280",
    "end": "1046684"
  },
  {
    "text": "the results into the stack. Emit the code for\nright sub-tree, put tiles in the stack. And then generate\nthe instruction.",
    "start": "1046685",
    "end": "1053480"
  },
  {
    "text": "After all those\ninstructions are generated, that say take the two\nthings from the stack, do the operation, and put\nthe result on the stack.",
    "start": "1053480",
    "end": "1060630"
  },
  {
    "text": "It's a very simple\nstack machine. So if you do that\nrecursive, it will be very simple recursive call. And at the end of\nthe day, what you",
    "start": "1060630",
    "end": "1067010"
  },
  {
    "text": "have is a piece of\ncode that basically",
    "start": "1067010",
    "end": "1072403"
  },
  {
    "text": "push into the all intermediate\nvalue into the stack, calculate, and\nreturn come in there. The thing about this is\nit's pretty inefficient.",
    "start": "1072403",
    "end": "1080240"
  },
  {
    "text": "And more than the\ninefficiency, when you go to code\noptimization, it's a pain, because\nthings are in stack.",
    "start": "1080240",
    "end": "1086510"
  },
  {
    "text": "You have no idea what\norder things get in. And things are much more\ncomplicated to optimize a stack machine. So we can actually go\nwith a flat list model.",
    "start": "1086510",
    "end": "1095690"
  },
  {
    "text": "Flat list model is\nalso something similar. What you do is you want to\nflatten out all the expression",
    "start": "1095690",
    "end": "1103030"
  },
  {
    "text": "tree. So what you do is you do left\nto right depth-first reversal of the expression tree. And on the return\nof the traversal,",
    "start": "1103030",
    "end": "1110630"
  },
  {
    "text": "you start generating code. So what happens is\nat every expression-- so you have operation.",
    "start": "1110630",
    "end": "1116300"
  },
  {
    "text": "What you do is, you put\nthat result into temporary. And then, when you come\nfrom there, then when",
    "start": "1116300",
    "end": "1121890"
  },
  {
    "text": "you come from\nexpression you will have two temporaries instead of\ntwo operations coming in there. And you take the\ntemporaries in there",
    "start": "1121890",
    "end": "1128600"
  },
  {
    "text": "and operate, do the operation,\nand put it into temporary. And then, at the\nend of the day, you have a straight\nline list of things",
    "start": "1128600",
    "end": "1135470"
  },
  {
    "text": "that have a bunch of temporary. Here's one thing\nI'll tell you guys.",
    "start": "1135470",
    "end": "1140570"
  },
  {
    "text": "Don't try to do anything\ncrazy with temporary. Every time you need a temporary,\nallocate a new temporary. And you go allocate\nnew temporary.",
    "start": "1140570",
    "end": "1146367"
  },
  {
    "text": "Don't try to do reuse\ntemporaries, none of those crazy business. Why? ",
    "start": "1146367",
    "end": "1153885"
  },
  {
    "text": "Why am I saying that? Why don't want to\ntry to use temporary? AUDIENCE: [INAUDIBLE] better\nto optimize [INAUDIBLE]",
    "start": "1153885",
    "end": "1160355"
  },
  {
    "text": "that actually figures\nout [INAUDIBLE].. PROFESSOR: Yeah. So if we let it-- leave the optimizer doing that.",
    "start": "1160355",
    "end": "1165865"
  },
  {
    "text": "So another interesting\nthing is, so I say, I come up with this rule. Think, by the way,\neach expression is evaluated separately.",
    "start": "1165865",
    "end": "1172107"
  },
  {
    "text": "So what I'm going\nto say is, I'm going to do the same temporaries\nfor each different expression. Sounds great.",
    "start": "1172107",
    "end": "1177710"
  },
  {
    "text": "Sounds simple. It'll work. But then, what\nwill happen is when you go to optimize you\nsay, wait a minute. I want to move these\ntwo expressions around.",
    "start": "1177710",
    "end": "1185390"
  },
  {
    "text": "And now, when you actually\ntry to analyze it, it looks like it has all these\ndependencies because it's using the same temporaries.",
    "start": "1185390",
    "end": "1190880"
  },
  {
    "text": "And now we have\nto know that, OK, by the way, for this\ntemporary, [INAUDIBLE].. On the other hand it's-- So it gets too complicated.",
    "start": "1190880",
    "end": "1196040"
  },
  {
    "text": "So if you have\nseparate temporaries, things become easy. And nice thing about you\noptimizer will actually",
    "start": "1196040",
    "end": "1201105"
  },
  {
    "text": "generate faster code. You can actually\nsee it fly faster. So start down and speed up.",
    "start": "1201105",
    "end": "1206236"
  },
  {
    "text": "AUDIENCE: Can you give an\nexample of [INAUDIBLE]?? ",
    "start": "1206236",
    "end": "1212950"
  },
  {
    "text": "PROFESSOR: So you'll\nsee something like this.",
    "start": "1212950",
    "end": "1225669"
  },
  {
    "text": "So what you do is, so\nwhat you want to generate is do this one. So say, move--",
    "start": "1225670",
    "end": "1236370"
  },
  {
    "text": "I'll just say, OK, I\ndon't want saying that. We will say R10 move b to R11,\nand then say move sub R10, R11.",
    "start": "1236370",
    "end": "1257655"
  },
  {
    "text": "We'll say, footprint R11. And then, what I will do\nis move R11 to something--",
    "start": "1257655",
    "end": "1268770"
  },
  {
    "text": "we will say, minus 24 out of-- ",
    "start": "1268770",
    "end": "1275640"
  },
  {
    "text": "so this is where\nthis temporary goes. So I mark here, I am minus\n24 out of RSBs, which is",
    "start": "1275640",
    "end": "1282981"
  },
  {
    "text": "where this temporary goes in. AUDIENCE: As opposed\nto just pushing it? PROFESSOR: Yeah, exactly. So the next time I\ncome around, what I do",
    "start": "1282982",
    "end": "1290250"
  },
  {
    "text": "is, I basically-- when I come\nhere, I basically get it out. I get some very dumb.",
    "start": "1290250",
    "end": "1296640"
  },
  {
    "text": "But you can keep\nthe above thing, this is my temporary one. Temporary one, which\nis location here. And then, what I do is when\nI start generating this one,",
    "start": "1296640",
    "end": "1305400"
  },
  {
    "text": "I basically get it back. Move minus 24 out of RBP, sorry.",
    "start": "1305400",
    "end": "1314314"
  },
  {
    "text": " RBP into R11, R10, or something.",
    "start": "1314314",
    "end": "1325320"
  },
  {
    "text": "So it looks very\ndumb, because you are saving, the next instruction\nyou are restoring it. But when you try to\ngo code generation,",
    "start": "1325320",
    "end": "1332730"
  },
  {
    "text": "it will actually match\nnicely, and things become-- I mean, optimization\nthings become easier.",
    "start": "1332730",
    "end": "1338140"
  },
  {
    "text": "So here's what it is. So at the end of the\nday, what we'll have is, we have operations like\nthat in a flat list.",
    "start": "1338140",
    "end": "1344580"
  },
  {
    "text": "So each of these, x, y, and\nz, should have very explicit locations somewhere. Some of them are temporaries.",
    "start": "1344580",
    "end": "1350220"
  },
  {
    "text": "Or all three might\nbe temporaries. But that means, each\nhas explicit location-- get from explicit location into\nR10, get from explicit location",
    "start": "1350220",
    "end": "1357000"
  },
  {
    "text": "into R11, do the\noperation, save. Don't worry the actual\nnext instruction,",
    "start": "1357000",
    "end": "1363180"
  },
  {
    "text": "I'm getting it again. Just do the dumb thing. So at this point, we should be\nable to flatten out statements,",
    "start": "1363180",
    "end": "1371280"
  },
  {
    "text": "do this thing. In fact, this is almost\nthe same as my stack model.",
    "start": "1371280",
    "end": "1377010"
  },
  {
    "text": "But the difference is now I\nactually have known handles for these temporary variables. And the stack model it's\nimplicit that, in fact, there",
    "start": "1377010",
    "end": "1383400"
  },
  {
    "text": "are temporaries in there. Here now, because in some sense,\nin intermediate representation, instead of directly\nsaying the temporary,",
    "start": "1383400",
    "end": "1389670"
  },
  {
    "text": "if you associate a\ntemporary variable name, then later on when\nyou are optimizing, you actually have a\ntemporary variable name",
    "start": "1389670",
    "end": "1395282"
  },
  {
    "text": "and you can deal\nwith that separately. So why didn't they map all\nthose things in registers?",
    "start": "1395282",
    "end": "1401340"
  },
  {
    "text": "I could have said, look, I'm\nputting all my temporaries in registers. In fact, after optimizations,\nyou could do that.",
    "start": "1401340",
    "end": "1407195"
  },
  {
    "text": "The reason we didn't start\nhere is registers are limited. If you have a very large\nhumongous expression,",
    "start": "1407195",
    "end": "1412320"
  },
  {
    "text": "you might not have enough\nregisters to do that. And so, because\nof that, we don't want to assume that and try\nand do special cases when",
    "start": "1412320",
    "end": "1418050"
  },
  {
    "text": "you run out registers. Start in the general\ncase and then do the optimization when needed.",
    "start": "1418050",
    "end": "1424690"
  },
  {
    "text": "In some cases, you might\nfind there's no one to one correspondence between\nmachine instruction",
    "start": "1424690",
    "end": "1430259"
  },
  {
    "text": "and the [INAUDIBLE]\ninstruction we have. You might not find the\nright machine instruction. At that point, the best thing\nis to first lower [INAUDIBLE]",
    "start": "1430260",
    "end": "1437640"
  },
  {
    "text": "to sequence of\ninstruction that actually has corresponding\nmachine instruction. And then you can\nactually go and do that.",
    "start": "1437640",
    "end": "1443290"
  },
  {
    "text": "So at some point, when you\nlook at the expression tree, it should have\nmatching instruction. Very inefficient.",
    "start": "1443290",
    "end": "1449400"
  },
  {
    "text": "Don't worry. We'll deal with that later. And nice thing about\nthis is, you'll see you actually compile--\na compile code getting",
    "start": "1449400",
    "end": "1454890"
  },
  {
    "text": "faster and faster. ",
    "start": "1454890",
    "end": "1460140"
  },
  {
    "text": "The next thing we have to do\nafter generating statements, generating control flow.",
    "start": "1460140",
    "end": "1465390"
  },
  {
    "text": "So there are also two\napproaches to this. First is a\ntemplate-matching approach",
    "start": "1465390",
    "end": "1470909"
  },
  {
    "text": "that we can actually\neasily do for [INAUDIBLE]",
    "start": "1470910",
    "end": "1476550"
  },
  {
    "text": "And the second thing is a\nmore algorithmic approach. So let me go through both.",
    "start": "1476550",
    "end": "1481650"
  },
  {
    "text": "So template-matching approach\nis for each construct you",
    "start": "1481650",
    "end": "1487320"
  },
  {
    "text": "have a very specific template. And we take the code and plug\nit in into these templates.",
    "start": "1487320",
    "end": "1493110"
  },
  {
    "text": "And since there's not too\nmany control constructs in [INAUDIBLE] you\nare not going to run--",
    "start": "1493110",
    "end": "1499020"
  },
  {
    "text": "this problem is not going\nto blow on your face. So here's interesting. So if you have a\nstatement like this,",
    "start": "1499020",
    "end": "1507580"
  },
  {
    "text": "so the first thing you can do\nis write some code in assembly by hand. And say, OK, so what\nshould I generate?",
    "start": "1507580",
    "end": "1513870"
  },
  {
    "text": "And then that\nrelate to template. So the template is, do the test.",
    "start": "1513870",
    "end": "1519360"
  },
  {
    "text": "And if jump that the test is\ntrue, there's a label true.",
    "start": "1519360",
    "end": "1525210"
  },
  {
    "text": "And do the false body,\nand go to the end, and then do the label true. So this is so basically in\nsome sense, do the false body,",
    "start": "1525210",
    "end": "1532652"
  },
  {
    "text": "then it's a true body,\nand the label end. So this is the way\nto look at that. So to give an example. So it's our previous\ncode in here.",
    "start": "1532652",
    "end": "1538950"
  },
  {
    "text": "So I want to look at\nfirst ax greater then bx. So I first do the--",
    "start": "1538950",
    "end": "1545230"
  },
  {
    "text": "And I have a jump. So every time template\nget instantiated, this shouldn't be\nthe same label.",
    "start": "1545230",
    "end": "1550490"
  },
  {
    "text": "Also some people make\nthat [INAUDIBLE].. So you have a nice template\nwith label 0, 1, 2. And you get label 0,\n1, 2, get instantly.",
    "start": "1550490",
    "end": "1556150"
  },
  {
    "text": "So you have to actually at\nleast add an instance number",
    "start": "1556150",
    "end": "1561293"
  },
  {
    "text": "into that thing. So it should be a 0, 1\nor something like that. So and also, if you have\ndescriptive names like that,",
    "start": "1561293",
    "end": "1568358"
  },
  {
    "text": "it's easier to debug too. You know where it came from. It's not some crazy labels\nshowing up somewhere. So first thing\nyou have to do is,",
    "start": "1568358",
    "end": "1575040"
  },
  {
    "text": "I actually got those\ntwo variables out of I use [INAUDIBLE] Q.\nI actually did Q, because I'm moving\nQ [INAUDIBLE]..",
    "start": "1575040",
    "end": "1581520"
  },
  {
    "text": "It should figure this\nout automatically. But for some reason, I\nmade a mistake somewhere.",
    "start": "1581520",
    "end": "1587730"
  },
  {
    "text": "And then, it think-- if it\nthinks it's not a cardboard, it'll actually\ncomplain that I'm doing",
    "start": "1587730",
    "end": "1593190"
  },
  {
    "text": "some weird intermediate\nnumbers that you don't know what's going on. So actually, it's almost for\nmy type-- it was my type save,",
    "start": "1593190",
    "end": "1599669"
  },
  {
    "text": "I actually put this type in\nthere, the cardboard type. And I did the comparison. And I'm doing a jump\ngreater than to a 0,",
    "start": "1599670",
    "end": "1607379"
  },
  {
    "text": "which is the true body. And then I do the false body in\nhere, which is basically again",
    "start": "1607380",
    "end": "1612809"
  },
  {
    "text": "bringing ax, bringing bx,\ndoing the subtraction, and moving the result back. And then I will go\nto the true body,",
    "start": "1612810",
    "end": "1620279"
  },
  {
    "text": "again bringing bx, bringing\nax, doing the subtraction, putting the results back. So very dumb.",
    "start": "1620280",
    "end": "1626135"
  },
  {
    "text": "I mean, when I'm\ngenerating code, I don't know too much things. I only know is I have a\nmap of each variable name",
    "start": "1626135",
    "end": "1631890"
  },
  {
    "text": "and the location-- offset from\nthe base point of where it is. That's all I need to do.",
    "start": "1631890",
    "end": "1636910"
  },
  {
    "text": "And I generate code. I go to the next one. And there's no global\nknowledge anything in here. And template for while\nloops is basically--",
    "start": "1636910",
    "end": "1648990"
  },
  {
    "text": "I do continue\nlabel, do the test, and do the body jump to the\nend, and body jump to the end.",
    "start": "1648990",
    "end": "1661110"
  },
  {
    "text": "Can I do better than this? ",
    "start": "1661110",
    "end": "1674590"
  },
  {
    "text": "Can I create more tighter\ncode, title thing here? ",
    "start": "1674590",
    "end": "1686590"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] probably\ndo some sort of [INAUDIBLE]",
    "start": "1686590",
    "end": "1692460"
  },
  {
    "text": " PROFESSOR: So\nsomething like this. You can do a test, basically\na negative operation,",
    "start": "1692460",
    "end": "1701799"
  },
  {
    "text": "jump to the end. So in there. So you can play with\nall these templates",
    "start": "1701800",
    "end": "1707049"
  },
  {
    "text": "and trying to find a nice\ncool template do something like that. And now we go to\nlook at control flow.",
    "start": "1707050",
    "end": "1714610"
  },
  {
    "text": "So I mean, that's the thing.",
    "start": "1714610",
    "end": "1719913"
  },
  {
    "text": "Do we have time? Yea, we can have that time. Why do you think this should be?",
    "start": "1719913",
    "end": "1725350"
  },
  {
    "text": "What's the best template? ",
    "start": "1725350",
    "end": "1732420"
  },
  {
    "text": "I'm trying to get\npeople woken up so they can actually-- instead\nof just listening be active. ",
    "start": "1732420",
    "end": "1746525"
  },
  {
    "text": "AUDIENCE: Is it\npossible [INAUDIBLE] ",
    "start": "1746525",
    "end": "1751640"
  },
  {
    "text": "PROFESSOR: [INAUDIBLE]? AUDIENCE: [INAUDIBLE] PROFESSOR: Yeah. It is actually\npretty simple one. What you have is--\nwhere is that result.",
    "start": "1751640",
    "end": "1758540"
  },
  {
    "text": "You have body, do the test, and\njump to the beginning of that. So that's basically-- it's a\nvery simple template for that.",
    "start": "1758540",
    "end": "1765830"
  },
  {
    "text": " That's the template model. So what you do is,\nyou hierarchy go down",
    "start": "1765830",
    "end": "1772610"
  },
  {
    "text": "and then basically keep\nplugging into the template. Another way to do that is\ncreate this control flow graph",
    "start": "1772610",
    "end": "1782630"
  },
  {
    "text": "by expanding all the nodes. So let me-- I will leave this slide.",
    "start": "1782630",
    "end": "1788250"
  },
  {
    "text": "I will get back to this slide. Let me explain by example. So what happens is, if you have\na function like with condition",
    "start": "1788250",
    "end": "1797720"
  },
  {
    "text": "if then else, you want\nto generate something like this that says,\ndo the condition here.",
    "start": "1797720",
    "end": "1802790"
  },
  {
    "text": "Do the if part, else part, and\nexit in there-- entry and exit. So that's the condition in here.",
    "start": "1802790",
    "end": "1808669"
  },
  {
    "text": "And then, this actually gets\ninto some very interesting issues. So for example, if program\nhas this bunch of conditions",
    "start": "1808670",
    "end": "1815539"
  },
  {
    "text": "like this, and\n[INAUDIBLE],, there's a notion called\nshort-circuiting.",
    "start": "1815540",
    "end": "1822040"
  },
  {
    "text": "Short-circuiting says,\nif-- so I assume I have n. The first condition\nis true-- false.",
    "start": "1822040",
    "end": "1830812"
  },
  {
    "text": "I'm never going to\nexecute anything else, because I know that the\nentire and is always going to be false.",
    "start": "1830812",
    "end": "1836600"
  },
  {
    "text": "So whereas same thing as, oh,\nif the first condition is true, so I don't have to execute\nthe rest of this thing because it has to be true.",
    "start": "1836600",
    "end": "1842543"
  },
  {
    "text": "I fall true. So this is why things like in\nC, sometimes in the condition, even if you put some statements\nthat might never get executed.",
    "start": "1842543",
    "end": "1849860"
  },
  {
    "text": "Because the first one but\nbasically dictate what happen. And I don't have to execute\nthe rest of the things.",
    "start": "1849860",
    "end": "1857030"
  },
  {
    "text": "So this is called\nshort-circuiting. So what that means is--",
    "start": "1857030",
    "end": "1862280"
  },
  {
    "text": "so here it's interesting. So if I have and\nhere, you understand what's happening here? So I enter in there and\ndo the first condition.",
    "start": "1862280",
    "end": "1869210"
  },
  {
    "text": "I less then n-- and in the first one here. And if that is\nfalse, I just can--",
    "start": "1869210",
    "end": "1875395"
  },
  {
    "text": "I don't have to\ndo anything else. I don't have to do the\nrest of the condition. I exit it here. And then, if it is true,\nI go to the next one.",
    "start": "1875395",
    "end": "1880910"
  },
  {
    "text": "I do that. And if it is false, I exit. If it is only true, then\nthat's the only time I go and actually\ndo this addition.",
    "start": "1880910",
    "end": "1886580"
  },
  {
    "text": "So I do this condition twice. Same thing if I do\nthis dual, if you",
    "start": "1886580",
    "end": "1894740"
  },
  {
    "text": "do that at O. Because what\nhappens is, if the O is true, any time, then I don't\nhave to do that straight.",
    "start": "1894740",
    "end": "1901160"
  },
  {
    "text": "I can just directly go and\nexecute the body basically. And then you only force\ngo try the next one.",
    "start": "1901160",
    "end": "1907010"
  },
  {
    "text": "And so, if you have\nvery large conditions, so you can do this thing-- short-circuit. So what you do is, if you\nhave complex control flow,",
    "start": "1907010",
    "end": "1918560"
  },
  {
    "text": "you have this set of functions\nyou can go and deconstruct this condition-- this\ncomplex control flow",
    "start": "1918560",
    "end": "1923960"
  },
  {
    "text": "into a nice control flow graph. Where you have a body and\nbasically simple-- very simple",
    "start": "1923960",
    "end": "1929690"
  },
  {
    "text": "changes. So what that means\nis if you give some chunk of [INAUDIBLE]\ncode, we will say n.",
    "start": "1929690",
    "end": "1935600"
  },
  {
    "text": "At the end, what you'll do is\nyou generate this control flow graph at the beginning and end. So you enter from the b\nnode and execute, then",
    "start": "1935600",
    "end": "1944450"
  },
  {
    "text": "exit from the n node. And between here,\nthere it's a graph instead of having these\ncomplex statements in here.",
    "start": "1944450",
    "end": "1953690"
  },
  {
    "text": "So and then there's a function\ncalled short circuit that says, given the condition,\nif the condition is true",
    "start": "1953690",
    "end": "1961490"
  },
  {
    "text": "for-- goes in the true\nside, so it basically gives you a basically tree. So come in, do the condition,\nand go [INAUDIBLE]..",
    "start": "1961490",
    "end": "1969290"
  },
  {
    "text": "So you get edges. And [INAUDIBLE] you could\nlook at this [INAUDIBLE].. And at some point you\nhave flattened the graph.",
    "start": "1969290",
    "end": "1975680"
  },
  {
    "text": "And then, if the\n[INAUDIBLE] says there's nothing in between you,\nthen it's just control flow, you can jump over\nsomething, it will",
    "start": "1975680",
    "end": "1982340"
  },
  {
    "text": "generate the jumping\nstructure parameters. In order that we--",
    "start": "1982340",
    "end": "1988160"
  },
  {
    "text": "and that new kind of\nnode called a nop node. So simplest thing\nis assume I have",
    "start": "1988160",
    "end": "1994460"
  },
  {
    "text": "sequence of blocks or sequence\nof statements, [INAUDIBLE].. It's a very simple\nthing for you to graph.",
    "start": "1994460",
    "end": "2000740"
  },
  {
    "text": "So first thing what you do\nis then you deconstruct, you could deconstruct x. So x could be\nanything. x could be",
    "start": "2000740",
    "end": "2006520"
  },
  {
    "text": "complex something like a\nviolate statement or some very complex structure.",
    "start": "2006520",
    "end": "2012190"
  },
  {
    "text": "Who cares. But you deconstruct x,\nyou get the graph out of there to deconstruct a y.",
    "start": "2012190",
    "end": "2017320"
  },
  {
    "text": "You get the graph out of there. And then basically connect\nthese two together. And then what you do\nis, you return beginning",
    "start": "2017320",
    "end": "2023769"
  },
  {
    "text": "and end this one. So you create this graph. So if you have this\nnode, that means",
    "start": "2023770",
    "end": "2031540"
  },
  {
    "text": "if condition xy, what you\ndo is you first reconstruct",
    "start": "2031540",
    "end": "2036910"
  },
  {
    "text": "x, deconstruct y. And then what you\ndo is to get there,",
    "start": "2036910",
    "end": "2042295"
  },
  {
    "text": "you this go up node and connect\nthem together to go up node. And then what you do is\nshort-circuit the condition,",
    "start": "2042295",
    "end": "2049187"
  },
  {
    "text": "do the condition for\nshort-circuiting, and connect it here. So I will get this [INAUDIBLE].",
    "start": "2049187",
    "end": "2054580"
  },
  {
    "text": "Everyone can read\nthis [INAUDIBLE].. So at this point, what\nin this block, each block itself is a graph.",
    "start": "2054580",
    "end": "2059888"
  },
  {
    "text": "And you can enter to\nthere, you go [INAUDIBLE].. And then you return\nthis beginning",
    "start": "2059889",
    "end": "2065830"
  },
  {
    "text": "at the end node [INAUDIBLE]. Y is also the same. So first of all, you create\nthis not not to end it.",
    "start": "2065830",
    "end": "2074030"
  },
  {
    "text": "And then you can\ndeconstruct the body. And you put a\nshort-circuiting in here.",
    "start": "2074030",
    "end": "2079250"
  },
  {
    "text": "And now our code [INAUDIBLE].  We are put the infinite too,\nex square and ex [INAUDIBLE]..",
    "start": "2079250",
    "end": "2088923"
  },
  {
    "start": "2088923",
    "end": "2097415"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: [INAUDIBLE] yeah. [INAUDIBLE] busy, because\nthat's while loop. And you return bc and e.",
    "start": "2097415",
    "end": "2105770"
  },
  {
    "text": "So now what you have\nis, again, [INAUDIBLE].. And so, short-circuit, if we\nhave a c1 and c2, basically",
    "start": "2105770",
    "end": "2116710"
  },
  {
    "text": "you first find a\nshort-circuit for c2, and you find a short\ncircuit for c1.",
    "start": "2116710",
    "end": "2123220"
  },
  {
    "text": "And basically, connect\nthe [INAUDIBLE].. And so, now what\nyou do is return--",
    "start": "2123220",
    "end": "2128297"
  },
  {
    "text": "normally I don't\nreturn the beginning, because you [INAUDIBLE]\nto get things [INAUDIBLE]..",
    "start": "2128297",
    "end": "2133839"
  },
  {
    "text": "So this is the [INAUDIBLE]. Same type of thing for\n[INAUDIBLE] too fast. So if you put the--",
    "start": "2133840",
    "end": "2139803"
  },
  {
    "text": "but then, what\nhappens is, instead of having this weird\n[INAUDIBLE] stuff, you have very nice flattened\ngraph with this short circuit",
    "start": "2139803",
    "end": "2148600"
  },
  {
    "text": "instruction as well\nas adjusting that. So what need to do\nis, you have a graph.",
    "start": "2148600",
    "end": "2153799"
  },
  {
    "text": "You hae to flatten the\ngraph, that linearly put the graph together. And you can do it in a down way\nor a little bit of a smart way.",
    "start": "2153800",
    "end": "2161980"
  },
  {
    "text": "And then, if there's\nedge that is adjacent, going one node on\nthat, it's easy. There's nothing you want to\ndo, because the instruction now",
    "start": "2161980",
    "end": "2168320"
  },
  {
    "text": "followed by instructions. Any edge that has to\njump over or go something has to [INAUDIBLE] instruction.",
    "start": "2168320",
    "end": "2174410"
  },
  {
    "text": "So at that point, you\ncan do the [INAUDIBLE].. Nice thing about\nthis is now, what you end up other than\nthe template is a graph.",
    "start": "2174410",
    "end": "2182320"
  },
  {
    "text": "And then, when you go\ninto doing optimization, you can actually use this\ngraph for new graph analysis",
    "start": "2182320",
    "end": "2188530"
  },
  {
    "text": "and [INAUDIBLE] the graph. Because if you do template,\nbut when could optimize it, you don't have [INAUDIBLE]. You still have [INAUDIBLE]\nand stuff like that.",
    "start": "2188530",
    "end": "2195760"
  },
  {
    "text": "And there's just now something\nnice, simple, uniform [INAUDIBLE]. This actually gives you\nsomething nice, simple, uniform",
    "start": "2195760",
    "end": "2201040"
  },
  {
    "text": "[INAUDIBLE]. So this can bear in\nthe optimization. Even though right now\nit might be a bit harder than with the template.",
    "start": "2201040",
    "end": "2206410"
  },
  {
    "text": "This creates graph in there. And the flatten the\ngraph and generate code. And then later you can\nactually figure out",
    "start": "2206410",
    "end": "2212500"
  },
  {
    "text": "how to mold the graph\ninto different parts. ",
    "start": "2212500",
    "end": "2220480"
  },
  {
    "text": "[INAUDIBLE]  So another thing\nthat happened here,",
    "start": "2220480",
    "end": "2226830"
  },
  {
    "text": "they did generate something\ncomplicated like this, you end up having\nthis nop instructions.",
    "start": "2226830",
    "end": "2234860"
  },
  {
    "text": "Nop is not\ninstructions, they are basically nodes in the graph. And so, you can do very\nsimple optimization",
    "start": "2234860",
    "end": "2242380"
  },
  {
    "text": "saying, if you have a bunch of\nthings coming in or going out, you can [INAUDIBLE] because you\nwant to keep generating models.",
    "start": "2242380",
    "end": "2249109"
  },
  {
    "text": "So you can do one simple\noptimization even now and do that. And then, you're\ngoing to come up",
    "start": "2249110",
    "end": "2254635"
  },
  {
    "text": "with a little bit of an\nintelligent way of flattening. [INAUDIBLE] you can just\nrandomly flatten it.",
    "start": "2254635",
    "end": "2260099"
  },
  {
    "text": "Then everything would\n[INAUDIBLE] to jump. But if you flatten it\nwith more intelligently,",
    "start": "2260100",
    "end": "2266160"
  },
  {
    "text": "you can eliminate the\n[INAUDIBLE] jumps [INAUDIBLE].. ",
    "start": "2266160",
    "end": "2272250"
  },
  {
    "text": "So what do you think\npros and cons of template was as meticulous\nas [INAUDIBLE]?? What would you guys use if\nyou have one minute to decide.",
    "start": "2272250",
    "end": "2281870"
  },
  {
    "text": "Would you use a big\nmatching model algorithm? ",
    "start": "2281870",
    "end": "2293332"
  },
  {
    "text": "AUDIENCE: I would\nsay, [INAUDIBLE] the template matching is a lot\neasier to implement quickly, but the algorithm it gives\nyou more information.",
    "start": "2293333",
    "end": "2300340"
  },
  {
    "text": "It would be more useful\nfor optimization later. PROFESSOR: See, what happens if\nyou do template matching now,",
    "start": "2300340",
    "end": "2305369"
  },
  {
    "text": "you probably [INAUDIBLE]\nmust be careful when you go to data optimizing. Because suddenly, you do do\ndata optimizing, you say, geez,",
    "start": "2305370",
    "end": "2311130"
  },
  {
    "text": "do I have the right\ndata for classes to deal with all\nthis weird construct? And data flow basically\nhas the notion",
    "start": "2311130",
    "end": "2318180"
  },
  {
    "text": "that the data, the control\ncomes into some place, join, and split. And you [INAUDIBLE] this graph.",
    "start": "2318180",
    "end": "2323825"
  },
  {
    "text": "Why is there a graph. OK, why? How we treat data\ngo through, why? If it's going to be\nmuch more complicated.",
    "start": "2323825",
    "end": "2329740"
  },
  {
    "text": "And so, you need to have a lot\nof this weird higher logics if you have a graph. It becomes much easier.",
    "start": "2329740",
    "end": "2334900"
  },
  {
    "text": "So I mean, people [INAUDIBLE]\nwhere you will bite the bullet. You want to bit it now or later? So at some point, I\nmean, compared by itself",
    "start": "2334900",
    "end": "2344040"
  },
  {
    "text": "an interesting entity. But later it might help\nto have had the graph-- graph history.",
    "start": "2344040",
    "end": "2351390"
  },
  {
    "text": "Anything else? [INAUDIBLE]? ",
    "start": "2351390",
    "end": "2356940"
  },
  {
    "text": "So I want to give\nyou a little bit a flavor of the x86-64 process. How many of you knew about this\nbefore we assigning the class?",
    "start": "2356940",
    "end": "2364710"
  },
  {
    "text": "If would you have followed\nup all the ethic battles between Intel and AMD\nthat led to this point?",
    "start": "2364710",
    "end": "2372450"
  },
  {
    "text": "So x86-64 is a CISC architecture\nversus what we call RISC. In [INAUDIBLE] the big thing\nwas reduces crash [INAUDIBLE]",
    "start": "2372450",
    "end": "2381270"
  },
  {
    "text": "it sums to be the intent. It's a much nicer\nsimpler architecture, can do a lot of cool things.",
    "start": "2381270",
    "end": "2386575"
  },
  {
    "text": "And everybody though it was\ngoing to take over the world. Technically, it should\nhave taken over the world. Obviously, a lot of times what\nhappens at the end is nothing--",
    "start": "2386575",
    "end": "2394977"
  },
  {
    "text": "or at least small\npercentage technical a lot to do with [INAUDIBLE],, a lot of\nother things, Intel interfering",
    "start": "2394977",
    "end": "2400080"
  },
  {
    "text": "with execution and wanted to\nkeep this cloud dual x86-64.",
    "start": "2400080",
    "end": "2405990"
  },
  {
    "text": "So it has a very low lineage. It is 80 [INAUDIBLE],,\neight-bit instruction, 16-bit,",
    "start": "2405990",
    "end": "2412650"
  },
  {
    "text": "then they become 32-bit. So still if you look\nat the instruction set, the manual is this thick.",
    "start": "2412650",
    "end": "2417720"
  },
  {
    "text": "And there are things\nthat which probably still can date back to '70s-- a lot\nof old decisions still standing.",
    "start": "2417720",
    "end": "2423660"
  },
  {
    "text": "And so, this worked out\nreally nicely for Intel. It actually meant\nfor Pentium, Pentium",
    "start": "2423660",
    "end": "2429510"
  },
  {
    "text": "to [INAUDIBLE],, and\nother RISC processor. And then, they also\nshift to 64-bit.",
    "start": "2429510",
    "end": "2434519"
  },
  {
    "text": "So 32-bit was\ngetting running out. What's the problem with 32-bit? ",
    "start": "2434520",
    "end": "2443619"
  },
  {
    "text": "AUDIENCE: So far [INAUDIBLE]? PROFESSOR: Yeah,\nfour gigs, that's the maximum you can allocate\nat accesses for gates.",
    "start": "2443620",
    "end": "2449950"
  },
  {
    "text": "And you want to go\nbeyond that, you would have a larger program. And so, you can do crazy things\nlike have multiple things",
    "start": "2449950",
    "end": "2457810"
  },
  {
    "text": "in between them,\nor what you like to have nice flat atmosphere. So it's the first time\nafter all these years,",
    "start": "2457810",
    "end": "2463779"
  },
  {
    "text": "after killing all those\nRISC architecture, Intel made a strategic mistake. What they did was,\nthey came up with",
    "start": "2463780",
    "end": "2469120"
  },
  {
    "text": "a complete new architecture\ncalled Itanium. And said, this is our\n64-bit architecture. If anybody want to do 64-bit\nscientific computation,",
    "start": "2469120",
    "end": "2475240"
  },
  {
    "text": "do Itanium, x86\nwill [INAUDIBLE].. And they all try to go with\nthis dual architectures,",
    "start": "2475240",
    "end": "2480369"
  },
  {
    "text": "hoping that Itanium will\nsomeday will take over x86. Itanium was a lot more in\nthe RISC class architecture.",
    "start": "2480370",
    "end": "2487570"
  },
  {
    "text": "In fact, I can go on forever. They took a RISC architecture,\nmake it look CISC. So they have to be careful\nwith that particularly.",
    "start": "2487570",
    "end": "2493675"
  },
  {
    "text": "But other than that,\nso they started going in that direction. Except then [INAUDIBLE] came\noff and said, wait a minute.",
    "start": "2493675",
    "end": "2499569"
  },
  {
    "text": "We don't want to\ndo this Itanium. We will basically\nexpand x86 to do 64-bit.",
    "start": "2499570",
    "end": "2504609"
  },
  {
    "text": "And they came up with\nthis thing called x86-64. And at some point, it\ncompletely [INAUDIBLE]",
    "start": "2504610",
    "end": "2510789"
  },
  {
    "text": "Intel had to backtrack\nand start supporting it. So this is the first\ntime Intel actually",
    "start": "2510790",
    "end": "2516220"
  },
  {
    "text": "didn't have in the lead. So what it did is, so\nhow does architectures",
    "start": "2516220",
    "end": "2522359"
  },
  {
    "text": "keep expanding [INAUDIBLE]? So what these\narchitectures do is they have different\nexecution mode.",
    "start": "2522360",
    "end": "2528280"
  },
  {
    "text": "So it's like having multiple\nchips on a single process. So you have the x86 mode.",
    "start": "2528280",
    "end": "2533359"
  },
  {
    "text": "And then there's the 64-bit\nmode that basically gives you all 64-bit registers.",
    "start": "2533360",
    "end": "2539640"
  },
  {
    "text": "The tether is the [INAUDIBLE]. And plus, they actually\nadd additional solicitor. So that's why we picked this up.",
    "start": "2539640",
    "end": "2545619"
  },
  {
    "text": "Not because it's 64-bit,\nbut because instead of having agents to deal\nwith, and we actually has 360 bits there.",
    "start": "2545620",
    "end": "2551358"
  },
  {
    "text": "So we have already [INAUDIBLE]. We can do register application\nand stuff like that. So these [INAUDIBLE] at\n64-bit, things become uniform",
    "start": "2551358",
    "end": "2558812"
  },
  {
    "text": "when you go to larger levels. But I don't think you guys\nhave to worry at that. We don't write huge program.",
    "start": "2558812",
    "end": "2563980"
  },
  {
    "text": "So these are things\nthat we are working on. So if you look at [INAUDIBLE],,\nmachines, that's 64-bit.",
    "start": "2563980",
    "end": "2570700"
  },
  {
    "text": "The new Intel extreme whatever,\nit's not just extreme. It's hard to figure out\nwhat Intel architecture is",
    "start": "2570700",
    "end": "2576970"
  },
  {
    "text": "these days-- has 64-bit. And still, a lot of operating\nsystems also are not 64 bits.",
    "start": "2576970",
    "end": "2584230"
  },
  {
    "text": "So Windows is still\nnot 64-bit supported. In Linux, also, since these\nmachines can [INAUDIBLE] a lot",
    "start": "2584230",
    "end": "2589900"
  },
  {
    "text": "of times you want 32-bit\non even the process system. So the machine we\ngot is actually",
    "start": "2589900",
    "end": "2596890"
  },
  {
    "text": "supports a 64-bit always. So it can actually\nrun data 64-bit. And you need to provide\neverybody with their--",
    "start": "2596890",
    "end": "2602440"
  },
  {
    "text": "AUDIENCE: Passwords. PROFESSOR: --passwords. And the key thing about\nthe machine is, it's new.",
    "start": "2602440",
    "end": "2608800"
  },
  {
    "text": "It's already crashed once. So what that means is if\nit hangs, go [INAUDIBLE],,",
    "start": "2608800",
    "end": "2614080"
  },
  {
    "text": "call somebody, send an\nemail to either him or me. And we'll try to figure out how\nto get rid of the [INAUDIBLE]..",
    "start": "2614080",
    "end": "2619150"
  },
  {
    "text": "Because everybody's\nusing that machine. And if everything fails, it's\nfile amount is [INAUDIBLE] probably, we'll-- everybody\non locally, so you can--",
    "start": "2619150",
    "end": "2626780"
  },
  {
    "text": "you won't mount anything else. [INAUDIBLE] yourself\n[INAUDIBLE].. So we'll see. It's still a fairly\nnew experiment.",
    "start": "2626780",
    "end": "2633799"
  },
  {
    "text": "So interesting\nthat [INAUDIBLE] do is we are using\nthis one processor.",
    "start": "2633800",
    "end": "2638950"
  },
  {
    "text": "But there are a lot of other\ndifferent types of process. Each has its own\nidiosyncrasies, a lot of interesting differences.",
    "start": "2638950",
    "end": "2645530"
  },
  {
    "text": "So all these other process here\nin this list that are basically RISC processors.",
    "start": "2645530",
    "end": "2650920"
  },
  {
    "text": "And rather the very interesting\ncustom process happening these days are digital\nsignal processing process",
    "start": "2650920",
    "end": "2658359"
  },
  {
    "text": "that deals with every\none of your cell phones, and everything probably has\none of these DSPs in there.",
    "start": "2658360",
    "end": "2664630"
  },
  {
    "text": "And in higher end, there are\nthings like supercomputers that still have a decode generator. And then, also, with the lowest\nend, things like file out there",
    "start": "2664630",
    "end": "2675010"
  },
  {
    "text": "and stuff like that have\nthis embedded process. Very simple $0.10\nprocessors that you can get.",
    "start": "2675010",
    "end": "2680800"
  },
  {
    "text": "In fact, there are\nthese greeting cards when you open it, they sing. That has a processor in there.",
    "start": "2680800",
    "end": "2686175"
  },
  {
    "text": "A very simple processor,\nprobably costs $0.10. And then there's a [INAUDIBLE]\nprocessors and stuff like that.",
    "start": "2686175",
    "end": "2691760"
  },
  {
    "text": "So the interesting\nthing is we are-- you are learning to do\ncode generation for one. But a lot of these processors\nhave commonalities.",
    "start": "2691760",
    "end": "2698980"
  },
  {
    "text": "But some of them,\nthe important fact is very different,\nquite categorical. And each of these processors\nhave very different types",
    "start": "2698980",
    "end": "2706120"
  },
  {
    "text": "of execution. For example, it's\na classical VLIW, the Itanium processor\nwas in this class.",
    "start": "2706120",
    "end": "2711789"
  },
  {
    "text": "It is instead of giving\none instruction at a time, you give this very\nlong instruction. When you execute it, it will\ndo eight different things",
    "start": "2711790",
    "end": "2719590"
  },
  {
    "text": "in one [INAUDIBLE] cycle. And x86-64 is a class\ncalled super scaler, where",
    "start": "2719590",
    "end": "2725500"
  },
  {
    "text": "you give simple instruction,\nbut the hardware will rearrange them\nto run them faster. And there are\nvectors, there a lot",
    "start": "2725500",
    "end": "2731349"
  },
  {
    "text": "of different types of things. Each of these have different\n[INAUDIBLE] systems. For example, all\nthe things we use",
    "start": "2731350",
    "end": "2737170"
  },
  {
    "text": "has this very nice large\nuniform memory system. But things like DSPs have--",
    "start": "2737170",
    "end": "2742609"
  },
  {
    "text": "don't have cache\nnice memory system. It has specific\nlimited size memory.",
    "start": "2742610",
    "end": "2748240"
  },
  {
    "text": "And it has multiple of them. So you have to\nmanage memory systems like your regular registers.",
    "start": "2748240",
    "end": "2754030"
  },
  {
    "text": "And in something like Spark has\nthis notion of register window. Because what it plays\nis, so we have registers,",
    "start": "2754030",
    "end": "2760630"
  },
  {
    "text": "we'll say one to 3, 32. And the first register\nis in function call. When you do the\nfunction call, it",
    "start": "2760630",
    "end": "2766915"
  },
  {
    "text": "appears at the last registers\nof the next function. So you have a register\nwindow kind of moving down.",
    "start": "2766915",
    "end": "2772570"
  },
  {
    "text": "So if you want to\nparameter pass, you just have allocate it\nto first set of registers as a function call. It appears at the last set\nof registers previously.",
    "start": "2772570",
    "end": "2780490"
  },
  {
    "text": "The interesting\nthing about that is, so it's hard to manage\nthis registry window. So at some point, if you\ndo too many function calls,",
    "start": "2780490",
    "end": "2786069"
  },
  {
    "text": "the hardware will stop and\nneeds to take all these things and put it in together. So it's providing\nsome speed, but if you",
    "start": "2786070",
    "end": "2791664"
  },
  {
    "text": "do too many small\nfunction calls it actually becomes a bad thing. Because even if you don't\nuse all the registers,",
    "start": "2791664",
    "end": "2798580"
  },
  {
    "text": "it has to keep all\nthat registers as well. There are interesting\nthings out there. And every instruction set\narchitecture is very unique.",
    "start": "2798580",
    "end": "2805713"
  },
  {
    "text": "And also, another thing we\n[INAUDIBLE] optimization, there are a lot of\ndifferent tools. When we do optimizing,\nwe look at performance.",
    "start": "2805713",
    "end": "2812200"
  },
  {
    "text": "We [INAUDIBLE] to\nrun things faster. But there's a large class\nof things these days-- fast is not the most important.",
    "start": "2812200",
    "end": "2818200"
  },
  {
    "text": "If you have your cell\nphone, what matters is the battery life. So how do you run\nyour cell phone code",
    "start": "2818200",
    "end": "2823210"
  },
  {
    "text": "with the minimum\namount of battery life. And that's [INAUDIBLE]\nand there's a very interesting different\nclass of optimizations.",
    "start": "2823210",
    "end": "2829319"
  },
  {
    "text": "So at some point,\ngood optimizations, depending on what\nyou look at, it's a very large class\nof interesting things",
    "start": "2829320",
    "end": "2834790"
  },
  {
    "text": "you can do throughout this. That's [INAUDIBLE]\ncitation into architecture.",
    "start": "2834790",
    "end": "2840040"
  },
  {
    "text": "So what we have done\ntoday is we are here. I think anything\nand everything you need to know about generating\ncode, I think we have covered.",
    "start": "2840040",
    "end": "2847090"
  },
  {
    "text": "If I haven't covered\nanything, send mail.  So I want to give you a few\nguidelines how to do this.",
    "start": "2847090",
    "end": "2856030"
  },
  {
    "text": "First thing is, when\nyou're going through, now you have\nabstraction level that actually is a correct program.",
    "start": "2856030",
    "end": "2862900"
  },
  {
    "text": "One thing to do if it is-- you can do this crazy\nreorganization that at the end",
    "start": "2862900",
    "end": "2869055"
  },
  {
    "text": "probably start producing\na correct program. That's not a good thing to do. What you want to do is,\nyou can try this next layer",
    "start": "2869055",
    "end": "2875830"
  },
  {
    "text": "multiple passes. Each pass, lower\nsome part of things, expand the control\nflow graph, expand that",
    "start": "2875830",
    "end": "2882309"
  },
  {
    "text": "into expression three to\n[INAUDIBLE] address form. But at the end of that,\nstill have a correct program.",
    "start": "2882310",
    "end": "2888820"
  },
  {
    "text": "The reason I'm saying that is,\nwhen you look at optimization, you might find one\nof those places might be the best place\nto do your optimization.",
    "start": "2888820",
    "end": "2895150"
  },
  {
    "text": "So if this correct\nproblem, and you say, well, everything\nis working, then you can basically plug your\noptimizations on manually.",
    "start": "2895150",
    "end": "2901120"
  },
  {
    "text": "It's easier to debug too. So a lot of times, if\nyou have correct program, you can look at this\nthing, say, look, this program has to be correct.",
    "start": "2901120",
    "end": "2907030"
  },
  {
    "text": "What's wrong with it--\nif something goes wrong. [INAUDIBLE] I am [INAUDIBLE]. In the same way, don't try to\ndo too many things at one pass.",
    "start": "2907030",
    "end": "2914800"
  },
  {
    "text": "And it's-- programs\nare complicated. And sometimes, debugging\nis a nightmare. But each pass do\nsomething simple,",
    "start": "2914800",
    "end": "2920437"
  },
  {
    "text": "is going to be very\ninefficient, don't care. We don't look at\nyour compile time. Just do an inefficient thing\nyou can do a lot of refactoring.",
    "start": "2920437",
    "end": "2927369"
  },
  {
    "text": "Just do the same codebase. But do small things at a time. If you want later, compile them. But just do slowly\nwith [INAUDIBLE]..",
    "start": "2927370",
    "end": "2936160"
  },
  {
    "text": "And yeah, again, I\n[INAUDIBLE] that. Always give the\ncorrect semantics. ",
    "start": "2936160",
    "end": "2942980"
  },
  {
    "text": "A lot of times,\nin compilers there are so many hidden\nthings that goes wrong.",
    "start": "2942980",
    "end": "2948530"
  },
  {
    "text": "Anytime if you make a decision,\nespecially [INAUDIBLE],, CUDA sessions,\neverywhere if you make an assumption that what\nthe graph will look like,",
    "start": "2948530",
    "end": "2955260"
  },
  {
    "text": "what you expect [INAUDIBLE]. Because one of these days,\nbetween now and old generation,",
    "start": "2955260",
    "end": "2961350"
  },
  {
    "text": "you will forget what you did. And something goes wrong. And you'd rather catch it from\n[INAUDIBLE] than debug follow",
    "start": "2961350",
    "end": "2966560"
  },
  {
    "text": "[INAUDIBLE]. So just put assertions\nall over the place. It's always good\npractice to do that.",
    "start": "2966560",
    "end": "2972340"
  },
  {
    "text": "And this is hard to say. Because sometimes, when\nyou generate this code, it's painful to look at.",
    "start": "2972340",
    "end": "2977920"
  },
  {
    "text": "You look at it and\nsay, darn, I am saving this in previous instruction. I am loading in the\nnext instruction.",
    "start": "2977920",
    "end": "2982972"
  },
  {
    "text": "I am getting zero onto this. What's the deal? I can easily just add this one\nline of code and get rid of it.",
    "start": "2982972",
    "end": "2989120"
  },
  {
    "text": "It's just so\n[INAUDIBLE],, I mean, it's painful when you\nlook at some of this. But just do that. Because that-- you can\ndo the optimization,",
    "start": "2989120",
    "end": "2996180"
  },
  {
    "text": "you can get a lot\nof satisfaction by doing all those\nthings optimization. But now, don't try\nto do any of those.",
    "start": "2996180",
    "end": "3001309"
  },
  {
    "text": "Let's get the simplest\nthing in there. And that's why, then\nyou need to optimize, we can do compress, [INAUDIBLE]\nthat is just simple [INAUDIBLE]",
    "start": "3001310",
    "end": "3009010"
  },
  {
    "text": "things that you can do there. And this is not that\nimportant these days.",
    "start": "3009010",
    "end": "3014150"
  },
  {
    "text": "Because if you are\ngenerating things like object-oriented type\ncode, there are things you can actually do in runtime.",
    "start": "3014150",
    "end": "3020570"
  },
  {
    "text": "So assume you are\nlocating some memory. You will do a bunch of\ninstructions again and again. You don't want to\ndeal with them, you can write a small function,\nput it in a [INAUDIBLE],,",
    "start": "3020570",
    "end": "3028080"
  },
  {
    "text": "coding. It's much easier than\ntrying to generate that. Because it's easy to\nmodify [INAUDIBLE] do things like that.",
    "start": "3028080",
    "end": "3033300"
  },
  {
    "text": "So always figure out\nwhat you want to generate and what you can actually\nstep [INAUDIBLE] run tests. ",
    "start": "3033300",
    "end": "3041160"
  },
  {
    "text": "[INAUDIBLE],, we are\ndoing optimization later. Let it do the optimization. And one thing you need to do\nis think about optimization.",
    "start": "3041160",
    "end": "3049829"
  },
  {
    "text": "Because this is the\none thing that's really hard about this course. Because normally,\nin a lot of places, [INAUDIBLE] compile codes.",
    "start": "3049830",
    "end": "3056400"
  },
  {
    "text": "What you do is you get\nthe entire template. And we say, just\nuse this template.",
    "start": "3056400",
    "end": "3061950"
  },
  {
    "text": "Because at some point,\nyou will actually need it. And you have no\nidea why that is. And you go fill in the blanks,\nand fill the compiler up,",
    "start": "3061950",
    "end": "3068549"
  },
  {
    "text": "and then you have really\nnice working compiler. But you have never\nlearned why you actually made those decisions.",
    "start": "3068550",
    "end": "3074070"
  },
  {
    "text": "What we do is, we\ngive you a lot of room that you can actually\nhandle yourself. Because we don't give you\nany kind of guidelines.",
    "start": "3074070",
    "end": "3079712"
  },
  {
    "text": "And you can do at every class,\nat some point in a later part, everyone scratch their head,\nsay, damn, we need this thing",
    "start": "3079712",
    "end": "3084990"
  },
  {
    "text": "and that we have to redo\neverything from like early on. That happens to everybody. But that's the\nlearning experience.",
    "start": "3084990",
    "end": "3091290"
  },
  {
    "text": "Because you know that you will\nnever ever do that mistake again. [LAUGHTER] But you'll recover from that. So what that means is, if you\nare doing some of these things,",
    "start": "3091290",
    "end": "3098789"
  },
  {
    "text": "just think a little\nbit about optimization. Just ask somebody, ask Punia,\nwhat's optimizations like?",
    "start": "3098790",
    "end": "3103947"
  },
  {
    "text": "And then, because you\ndidn't have that feel, because since the optimization\ntakes also three weeks.",
    "start": "3103947",
    "end": "3110410"
  },
  {
    "text": "You don't have really\ntime to re-compile. So the key thing is,\nyou don't really don't",
    "start": "3110410",
    "end": "3115470"
  },
  {
    "text": "know what it's going to have. You have actually to\nbe ready for it coming. And key thing is\nsometimes you might",
    "start": "3115470",
    "end": "3121435"
  },
  {
    "text": "have to do things\nthat are not the most intuitive things, like I talked\nabout how to map control flow.",
    "start": "3121435",
    "end": "3127030"
  },
  {
    "text": "And because there are\nsome easy simple things you can do too there. But later, you will worry about. So design decisions,\ntalk to Punia and say,",
    "start": "3127030",
    "end": "3134460"
  },
  {
    "text": "these are the\ndecisions I'm making. And then ask, what's\nmy consequences? What I [INAUDIBLE]?",
    "start": "3134460",
    "end": "3140369"
  },
  {
    "text": "Is this a great thing, or\nam I on the right problems? And then, some of those\nthings might be subtle,",
    "start": "3140370",
    "end": "3146280"
  },
  {
    "text": "like things like\ntemporary variables. And you can do some really\ncool very simple things of doing better temporaries.",
    "start": "3146280",
    "end": "3152290"
  },
  {
    "text": "But later, you might-- when you\ndo code generation, you say, wait a minute. Now I did this\nthing, and now I have to do this very crazy\nanalysis to figure out",
    "start": "3152290",
    "end": "3159270"
  },
  {
    "text": "that this weird\nthing is going on. And it gives you understanding\nabout those things.",
    "start": "3159270",
    "end": "3164570"
  },
  {
    "text": " And so, another thing a lot\nof people found out good tip",
    "start": "3164570",
    "end": "3171070"
  },
  {
    "text": "is they [INAUDIBLE]. Some things that\nwhen we used to let--",
    "start": "3171070",
    "end": "3176660"
  },
  {
    "text": "even three people things,\nthat some person did a huge concentration\non doing things like build and regressions.",
    "start": "3176660",
    "end": "3182193"
  },
  {
    "text": "Then do that much code to make-- [INTERPOSING VOICES] AUDIENCE: My team had that. PROFESSOR: Yeah. [INTERPOSING VOICES] PROFESSOR: One person\nbasically spent all this time",
    "start": "3182193",
    "end": "3188090"
  },
  {
    "text": "just building regression\ntests at every level, just go and testing these thing. And yes, it reduced the\namount of people who are",
    "start": "3188090",
    "end": "3196340"
  },
  {
    "text": "do the real code-- the implementation. But you can actually\nreally simplify your life",
    "start": "3196340",
    "end": "3201490"
  },
  {
    "text": "when you attract people. The people in compile\nis a nightmare. The best thing that compiler\ncan do is actually crash.",
    "start": "3201490",
    "end": "3207049"
  },
  {
    "text": "Because when the compiler\ncrash, you know where it crash, you actually get the debugger. If you know it is bad code, how\nare you going to debut that?",
    "start": "3207050",
    "end": "3213410"
  },
  {
    "text": "With some math someplace\nthat it misplaced something, variable, something, and\nnow the compiler code",
    "start": "3213410",
    "end": "3221060"
  },
  {
    "text": "is crashing once in a while. And that can become a nightmare. Because you have no\nidea why it's crashing.",
    "start": "3221060",
    "end": "3226700"
  },
  {
    "text": "And it's something\nthat if you have 50 passes at some point, 30\npasses, one of those passes",
    "start": "3226700",
    "end": "3232340"
  },
  {
    "text": "did a strong transformation. Some of them it doesn't even\nshow up till later, because it into the conceptual wrong\nthing that data pass actually",
    "start": "3232340",
    "end": "3240687"
  },
  {
    "text": "did the right thing. But the assumption was wrong. And this becomes a\nnightmare, really. So it's writing a lot of test\ncases, test case, some test",
    "start": "3240687",
    "end": "3248269"
  },
  {
    "text": "cases, actually [INAUDIBLE]. So I think putting\nsome time into that",
    "start": "3248270",
    "end": "3253640"
  },
  {
    "text": "can really save that last\nmidnight for you guys.",
    "start": "3253640",
    "end": "3259220"
  },
  {
    "text": "And a lot of that bad writing is\ndo the [INAUDIBLE] by yourself.",
    "start": "3259220",
    "end": "3264619"
  },
  {
    "text": "When you have this\ninterchangeable switch off [INAUDIBLE]\npasses, you can bind [INAUDIBLE] two\npassers, bind [INAUDIBLE]",
    "start": "3264620",
    "end": "3270230"
  },
  {
    "text": "two procedures. And at some point,\nsomething will just pop up and [INAUDIBLE]. So yeah, so this is\ndebugging is [INAUDIBLE]..",
    "start": "3270230",
    "end": "3278270"
  },
  {
    "text": "And other thing,\nfinally, checkpoint,",
    "start": "3278270",
    "end": "3283520"
  },
  {
    "text": "take that seriously. Think this as the deadline. And then, really, really\nwork for that deadline.",
    "start": "3283520",
    "end": "3289460"
  },
  {
    "text": "And then you can\ntake a breather. You may have another deadline\ncoming up for anything new. Because this is a\nlarge [INAUDIBLE]..",
    "start": "3289460",
    "end": "3294770"
  },
  {
    "text": "A lot of things\nneed to be there. So [INAUDIBLE]. And finally, some of the guys\nhave [INAUDIBLE] with me.",
    "start": "3294770",
    "end": "3303860"
  },
  {
    "text": "And the other group\nhas [INAUDIBLE].. OK. Good. ",
    "start": "3303860",
    "end": "3310964"
  },
  {
    "text": "Don't get frustrated. Because something goes wrong,\nespecially with the machines, needed to send email, because\nwe'll be [INAUDIBLE] make sure",
    "start": "3310965",
    "end": "3317290"
  },
  {
    "text": "that [INAUDIBLE]. ",
    "start": "3317290",
    "end": "3323000"
  }
]