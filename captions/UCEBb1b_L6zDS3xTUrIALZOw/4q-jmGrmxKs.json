[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6360"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6360",
    "end": "13339"
  },
  {
    "text": "from hundreds of\nMIT courses, visit mitopencourseware@ocw.mit.edu. ",
    "start": "13340",
    "end": "20681"
  },
  {
    "text": "ERIK DEMAINE: All right. Welcome to our second\nlecture on what to do when you have\nan NP-hard problem.",
    "start": "20681",
    "end": "26735"
  },
  {
    "text": "So two lectures ago we saw how\nto prove a problem is NP-hard. Last lecture we saw if\nyou want polynomial time",
    "start": "26735",
    "end": "34320"
  },
  {
    "text": "but you're willing to put up\nwith a not perfect solution, but you want to get within\nsome factor of the best",
    "start": "34320",
    "end": "40190"
  },
  {
    "text": "solution, that's\napproximation algorithms. Today we're going to do\na different thing called",
    "start": "40190",
    "end": "45720"
  },
  {
    "text": "fixed parameter algorithms. These are going to run an\nexponential time in the worst case. But not so bad in a certain\nsense, which we'll get to.",
    "start": "45720",
    "end": "54310"
  },
  {
    "text": "In general, the theme of these\nlast two lectures and this one",
    "start": "54310",
    "end": "63530"
  },
  {
    "text": "is that we'd really like\nto solve hard problems. We'd like to solve them fast,\nmeaning polynomial time.",
    "start": "63530",
    "end": "70660"
  },
  {
    "start": "70660",
    "end": "76390"
  },
  {
    "text": "And we would like correct\nsolutions, also known as exact solutions.",
    "start": "76390",
    "end": "81995"
  },
  {
    "text": " OK.",
    "start": "81995",
    "end": "87300"
  },
  {
    "text": "We'd love to solve NP-hard\nproblems in polynomial time exactly. But that's not possible\nunless P equals nP.",
    "start": "87300",
    "end": "94450"
  },
  {
    "text": "So pick any two. That's the general idea.",
    "start": "94450",
    "end": "101200"
  },
  {
    "text": "This is a bastardization of a\njoke which is-- sleep, friends,",
    "start": "101200",
    "end": "108930"
  },
  {
    "text": "work-- pick any two. That's the MIT motto. Here in algorithms-- hard,\nfast, exact-- pick any two.",
    "start": "108930",
    "end": "117180"
  },
  {
    "text": "So most of this class is about\nthese two-- polynomial time algorithms give\nyou exact things.",
    "start": "117180",
    "end": "123970"
  },
  {
    "text": "That's the class P. Last\nlecture was about hard problems.",
    "start": "123970",
    "end": "133460"
  },
  {
    "text": "We drop exactness. We still want polynomial time. We still want to\nsolve hard problems. So this is approximation\nalgorithms.",
    "start": "133460",
    "end": "140900"
  },
  {
    "text": "And what we're doing today\nis the other combination. So we want exact,\nbut we're going",
    "start": "140900",
    "end": "149850"
  },
  {
    "text": "to sacrifice how\nfast things are. They're not going to\nbe polynomial time in a strict sense,\nbut it's going",
    "start": "149850",
    "end": "155170"
  },
  {
    "text": "to be somewhere in between\npolynomial and exponential. This is an area called FPT for\nfixed parameter tractability.",
    "start": "155170",
    "end": "163450"
  },
  {
    "text": " So what's this\nparameter business?",
    "start": "163450",
    "end": "168600"
  },
  {
    "text": "In general, the idea is that we\nreally want an exact solution",
    "start": "168600",
    "end": "181630"
  },
  {
    "text": "to an NP-hard\nproblem, which means it has to take exponential\ntime in the worst case. But we want to confine\nthe exponential dependence",
    "start": "181630",
    "end": "204000"
  },
  {
    "text": "to something called a parameter. ",
    "start": "204000",
    "end": "212450"
  },
  {
    "text": "OK. We actually use\nparameters all the time. For example, on a graph,\nthere's two typical parameters",
    "start": "212450",
    "end": "218103"
  },
  {
    "text": "you think about-- the\nnumber of vertices and the number of edges. If you're sorting an array, the\nusual parameter you think about",
    "start": "218104",
    "end": "225049"
  },
  {
    "text": "is the size of the array. OK. That's all I mean. A parameter, in general, is just\nsome kind of size or complexity",
    "start": "225050",
    "end": "235550"
  },
  {
    "text": "measure. So in general, a\nparameter is going",
    "start": "235550",
    "end": "243300"
  },
  {
    "text": "to be-- we're going\nto call it k of x--",
    "start": "243300",
    "end": "250940"
  },
  {
    "text": "should be a non-negative\ninteger-- and x is the input.",
    "start": "250940",
    "end": "260870"
  },
  {
    "text": "So you're thinking\nabout some problem, like a problem we'll\nbe looking at today",
    "start": "260870",
    "end": "266395"
  },
  {
    "text": "is vertex cover, which we\nsaw in the last lecture. Vertex cover--\nyou're given a graph.",
    "start": "266395",
    "end": "273070"
  },
  {
    "text": "And based on that\ngraph, we're going to define some\nfunction of that graph.",
    "start": "273070",
    "end": "280600"
  },
  {
    "text": "So this is the input\nto the problem, and k is just going to be some\nnon-negative integer, which is a function of that input.",
    "start": "280600",
    "end": "286330"
  },
  {
    "text": "Just some measure of how\ntough your problem is. OK.",
    "start": "286330",
    "end": "291599"
  },
  {
    "text": "And what we would\nlike is a running time that is exponential in k, but\npolynomial in everything else.",
    "start": "291600",
    "end": "299419"
  },
  {
    "text": "Polynomial in the size of\nthe problem, in v and E. OK. So that's the general goal\nis-- polynomial in the problem",
    "start": "299420",
    "end": "316780"
  },
  {
    "text": "size-- which we usually\ncall n-- and exponential",
    "start": "316780",
    "end": "329750"
  },
  {
    "text": "in the parameter--\nwhich I'm calling-- just",
    "start": "329750",
    "end": "336600"
  },
  {
    "text": "going to call k--\nin general, you could consider more\nparameters, but we're just going to think of two--\nthe overall size of the problem,",
    "start": "336600",
    "end": "344090"
  },
  {
    "text": "and some particular parameter\nthat we look at called k. So if you can\nachieve this, which",
    "start": "344090",
    "end": "351550"
  },
  {
    "text": "we'll call fixed\nparameter tractability-- I'll define it formally\nin a little bit, because there's\nmore than one way you might think of defining it.",
    "start": "351550",
    "end": "357389"
  },
  {
    "text": "Some are right. Some are wrong. If you can achieve\nthis, what you get is an exact algorithm\nfor your problem",
    "start": "357390",
    "end": "364760"
  },
  {
    "text": "that runs really fast\nprovided k is small. So this is sort of a\nway of saying, well,",
    "start": "364760",
    "end": "370720"
  },
  {
    "text": "you know the problem\nis NP-hard in general, but as long as this measure\nk is reasonably small,",
    "start": "370720",
    "end": "376600"
  },
  {
    "text": "I'm still able to\nsolve it really fast. So it's a way of\ncharacterizing a wide family",
    "start": "376600",
    "end": "382220"
  },
  {
    "text": "of-- a big subset of the\nproblem that you can solve. You know that in general you're\ngoing to need exponential time,",
    "start": "382220",
    "end": "390530"
  },
  {
    "text": "but this gives you a measure\nof how hard your input is. May not be the only measure.",
    "start": "390530",
    "end": "395620"
  },
  {
    "text": "May not be the best\none, in any sense. But if you can\ndefine a parameter,",
    "start": "395620",
    "end": "400919"
  },
  {
    "text": "and you know that in\nyour practical scenarios that parameter will be\nsmall, then you're golden.",
    "start": "400920",
    "end": "406140"
  },
  {
    "text": "Then you can actually\nsolve the problem in a reasonable amount of time\nand get an exact solution. No approximation here.",
    "start": "406140",
    "end": "413340"
  },
  {
    "text": "So that's the idea. So that was a parameter.",
    "start": "413340",
    "end": "423139"
  },
  {
    "text": "We're also going to define\na parameterized problem. ",
    "start": "423140",
    "end": "435540"
  },
  {
    "text": "This is just a problem\nplus a parameter. ",
    "start": "435540",
    "end": "445070"
  },
  {
    "text": "OK. So we already have some\nnotions of problems. We can take any problem\nthat we've looked at before, like vertex cover.",
    "start": "445070",
    "end": "451550"
  },
  {
    "text": "And if we just define\nsome parameter, then we get a\nparameterized problem when we put these\nthings together.",
    "start": "451550",
    "end": "457680"
  },
  {
    "text": "And usually we would\nwrite it as something like, oh, take this problem,\nand then consider it",
    "start": "457680",
    "end": "463160"
  },
  {
    "text": "with respect to this parameter. ",
    "start": "463160",
    "end": "469180"
  },
  {
    "text": "And in general, for\na single problem, there may be several\nnatural parameters",
    "start": "469180",
    "end": "474234"
  },
  {
    "text": "that you want to care about. Usually there's actually\none obvious parameter.",
    "start": "474234",
    "end": "480100"
  },
  {
    "text": "So let's do that\nfor vertex cover. But in general, we can talk\nabout a problem with respect",
    "start": "480100",
    "end": "487020"
  },
  {
    "text": "to different parameters. And some of them may be\nfeasible to solve in this sense. Some maybe not.",
    "start": "487020",
    "end": "493804"
  },
  {
    "text": "All right. So I'm going to\ndefine k vertex cover.",
    "start": "493804",
    "end": "498910"
  },
  {
    "text": "This is almost the\nsame as vertex cover. It just has a k in front.",
    "start": "498910",
    "end": "504200"
  },
  {
    "text": "But the k means that it's a\nparameterized problem instead of just a general problem. ",
    "start": "504200",
    "end": "512039"
  },
  {
    "text": "So as in vertex cover,\nwe're given a graph G.",
    "start": "512039",
    "end": "520030"
  },
  {
    "text": "And I'm going to\nthink of the decision version of vertex cover. So we're given a\nnon-negative integer k.",
    "start": "520030",
    "end": "530260"
  },
  {
    "text": "And we want to know-- is there\na vertex cover of size k-- say, less than or equal to k--\nis there a vertex cover?",
    "start": "530260",
    "end": "540370"
  },
  {
    "text": "Remember a vertex cover\nis a set of vertices that cover all the edges. ",
    "start": "540370",
    "end": "551579"
  },
  {
    "text": "And we want the size of S to\nbe less than or equal to k. ",
    "start": "551579",
    "end": "559850"
  },
  {
    "text": "OK. So every for every\nedge, we need to choose one of the two end points. We want the total number of\nchosen vertices to be, at most,",
    "start": "559850",
    "end": "565970"
  },
  {
    "text": "k. And so that's a regular\ndecision problem.",
    "start": "565970",
    "end": "572250"
  },
  {
    "text": "But for parameterized\nproblem, we also want to define a\nparameter function. And that parameter\nfunction-- guess what?",
    "start": "572250",
    "end": "578250"
  },
  {
    "text": "k. Most obvious thing, given that\nI wrote the letter k here. That's going to\nbe our parameter.",
    "start": "578250",
    "end": "584501"
  },
  {
    "text": "OK. And most problems, a lot\nof problems, especially decision versions of\noptimization problems--",
    "start": "584501",
    "end": "590670"
  },
  {
    "text": "like before, we were\nminimizing the vertex cover-- this is the decision\nversion where we want to decide whether\nthere's one of size of most k.",
    "start": "590670",
    "end": "596870"
  },
  {
    "text": "If you can solve\nthis, of course, you can binary search on k,\nlike you did in your quiz. Hopefully.",
    "start": "596870",
    "end": "602910"
  },
  {
    "text": "So that's all good. And a lot of problems have\nthis some non-negative integer",
    "start": "602910",
    "end": "610100"
  },
  {
    "text": "floating around. And that's the, kind\nof the, obvious choice for the parameter. Doesn't have to be the only one.",
    "start": "610100",
    "end": "615720"
  },
  {
    "text": "But today, we're just going\nto look at vertex cover with this parameterization.",
    "start": "615720",
    "end": "621315"
  },
  {
    "text": "In your problem set, you'll\nlook at another problem with another natural parameter. This is usually called\nthe natural parameter.",
    "start": "621315",
    "end": "630250"
  },
  {
    "text": "But there's no formal\ndefinition of natural. That's just intuition. ",
    "start": "630250",
    "end": "639430"
  },
  {
    "text": "All right. So that's the set up. Let's do some algorithms. ",
    "start": "639430",
    "end": "647540"
  },
  {
    "text": "I guess the first note is\nthat k can actually be small.",
    "start": "647540",
    "end": "652970"
  },
  {
    "text": "Nice example is a star graph. ",
    "start": "652970",
    "end": "659490"
  },
  {
    "text": "So you have the vertices, but\nwhat's the smallest vertex",
    "start": "659490",
    "end": "664920"
  },
  {
    "text": "cover? 1. Everyone's holding\nup one finger.",
    "start": "664920",
    "end": "670380"
  },
  {
    "text": "You choose this guy--\nthat in the center, that covers all the edges. So it can be that k is\nmuch smaller than v,",
    "start": "670380",
    "end": "677780"
  },
  {
    "text": "and our goal here\nis that we're going to get some\npolynomial dependence",
    "start": "677780",
    "end": "682800"
  },
  {
    "text": "in the size of the\ngraph, but we're going to get an exponential\ndependence on k.",
    "start": "682800",
    "end": "688000"
  },
  {
    "text": "Now there are many\ndifferent ways you could think of\nexponential dependence, but let's start\nwith-- what would be the really obvious brute\nforce solution to vertex cover?",
    "start": "688000",
    "end": "700450"
  },
  {
    "text": "OK. I want exact. I'm not going to be clever.",
    "start": "700450",
    "end": "706470"
  },
  {
    "text": "What's the obvious\nalgorithm to solve this?",
    "start": "706470",
    "end": "711751"
  },
  {
    "text": "Yeah. AUDIENCE: Try any\ncombination of k vertices, and see if it's a vertex cover. ERIK DEMAINE: Try any\ncombination of k vertices. See if it's a vertex cover.",
    "start": "711752",
    "end": "717505"
  },
  {
    "text": "How many combinations\nof k vertices are there? And choose k.",
    "start": "717505",
    "end": "723448"
  },
  {
    "text": "Good. Let's see. I'm a little out of practice. It's been awhile.",
    "start": "723448",
    "end": "728900"
  },
  {
    "text": "Close. Off by one. So try all and choose k.",
    "start": "728900",
    "end": "737550"
  },
  {
    "text": "I guess, v choose k,\nsubsets of k vertices.",
    "start": "737550",
    "end": "748830"
  },
  {
    "text": "If I wanted to match\nthis definition exactly, I should try all subsets of less\nthan or equal to k vertices.",
    "start": "748830",
    "end": "754250"
  },
  {
    "text": "But, hey, if I choose\nfewer than k vertices, why not add in a few\nextras until I get up to k.",
    "start": "754250",
    "end": "760850"
  },
  {
    "text": "So it's enough to look\nat v choose k subsets, because-- subsets\nof size exactly",
    "start": "760850",
    "end": "766160"
  },
  {
    "text": "k-- because that will end\nup giving the same answer as this question.",
    "start": "766160",
    "end": "772290"
  },
  {
    "text": "OK. So for each-- test each of\nthose choices for coverage.",
    "start": "772290",
    "end": "781370"
  },
  {
    "text": "So that just means\nwe loop over-- I guess for every\nvertex in our set,",
    "start": "781370",
    "end": "787589"
  },
  {
    "text": "we mark all of the\nincident edges as covered. And then we go\nthrough all the edges, and see whether every\none got marked covered.",
    "start": "787590",
    "end": "794310"
  },
  {
    "text": "If not, we reset and\ntry the next subset. OK. This is like not smart\ndynamic programming.",
    "start": "794310",
    "end": "801270"
  },
  {
    "text": "You just guess\nwhat the subset is. And see if it covers. This is how you would prove\nthat this problem is in NP.",
    "start": "801270",
    "end": "807560"
  },
  {
    "text": "Right? But now we're actually making\nit an exponential algorithm. So what's the running\ntime of this algorithm?",
    "start": "807560",
    "end": "813410"
  },
  {
    "start": "813410",
    "end": "821800"
  },
  {
    "text": "Yeah. AUDIENCE: E times v to the k. ERIK DEMAINE: E\ntimes v to the k. Good. ",
    "start": "821800",
    "end": "830090"
  },
  {
    "text": "Must be. ",
    "start": "830090",
    "end": "835220"
  },
  {
    "text": "So that's obviously exponential. In a certain sense, the\ndependence on E and v is in the bottom, which is good.",
    "start": "835220",
    "end": "843900"
  },
  {
    "text": "And the k is in the\nexponent, which makes sense. So this is not surprising. We also don't think\nof it as good.",
    "start": "843900",
    "end": "851220"
  },
  {
    "text": "We've defined this to be bad. OK. In general, we think of\na running time like n",
    "start": "851220",
    "end": "858790"
  },
  {
    "text": "to the f of k, where n is sort\nof the overall problem size here.",
    "start": "858790",
    "end": "864000"
  },
  {
    "text": "Here n is basically v plus E.\nAnd that's the overall input size for a graph. If we have a running time\nwhere the exponent of n",
    "start": "864000",
    "end": "872360"
  },
  {
    "text": "depends on k, in\na nontrivial way, we think of that as\na bad running time. This is a slow algorithm.",
    "start": "872360",
    "end": "879430"
  },
  {
    "text": "It's slow because\neven when k equals 2-- if you have a large\ngraph-- this is probably",
    "start": "879430",
    "end": "884650"
  },
  {
    "text": "not something you want to run. Definitely when k is 10,\nyou're completely hosed. This is a very impractical.",
    "start": "884650",
    "end": "890571"
  },
  {
    "text": "And the formal sense in\nwhich it is impractical is that the exponent\nin n depends on k.",
    "start": "890572",
    "end": "895710"
  },
  {
    "text": "In general, you cannot say--\nso I'd like to-- I mean fixed",
    "start": "895710",
    "end": "902740"
  },
  {
    "text": "parameter. The whole point is to\nthink of the parameter as being fixed, like a constant. OK. Now if the parameter is fixed.",
    "start": "902740",
    "end": "909569"
  },
  {
    "text": "If you think of\nit as at most 100, then, indeed, this will be at\nmost n to the 101 or something.",
    "start": "909570",
    "end": "916910"
  },
  {
    "text": "So it is polynomial\nfor any fixed k. The catch is that the exponent\nof the polynomial depends on k.",
    "start": "916910",
    "end": "924780"
  },
  {
    "text": "As you increase k, as you\nincrease your bound on k, the exponent increases. I can't say this is an n squared\nalgorithm for any fixed k.",
    "start": "924780",
    "end": "933529"
  },
  {
    "text": "OK. So exponent depends on k.",
    "start": "933530",
    "end": "938840"
  },
  {
    "text": "That's the bad case. So the good case,\nwe're going to define,",
    "start": "938840",
    "end": "945540"
  },
  {
    "text": "is that the exponent\ndoesn't depend on k. That may seem like\na small change.",
    "start": "945540",
    "end": "951650"
  },
  {
    "text": "It is a small change. But it's a big one. ",
    "start": "951650",
    "end": "957747"
  },
  {
    "text": "It's a small change\nwith a big effect. ",
    "start": "957747",
    "end": "964650"
  },
  {
    "text": "So I'm going to define, let's\nsay, a parameterized problem is",
    "start": "964650",
    "end": "982360"
  },
  {
    "text": "fixed parameter\ntractable-- which,",
    "start": "982360",
    "end": "993980"
  },
  {
    "text": "given how many letters that\nis, we're going to abbreviate to FPT-- if it can be solved in\nf of k times polynomial in n.",
    "start": "993980",
    "end": "1015985"
  },
  {
    "text": " OK. Because this means\nthat the exponent here",
    "start": "1015985",
    "end": "1029089"
  },
  {
    "text": "doesn't depend on anything. ",
    "start": "1029089",
    "end": "1035810"
  },
  {
    "text": "The exponent of n\ndoesn't depend on k.",
    "start": "1035810",
    "end": "1042150"
  },
  {
    "start": "1042150",
    "end": "1049501"
  },
  {
    "text": "OK. So for this definition--\njust to be explicit--",
    "start": "1049501",
    "end": "1054820"
  },
  {
    "text": "I want the constant here to\nbe independent-- of course,",
    "start": "1054820",
    "end": "1060070"
  },
  {
    "text": "it should be\nindependent of n, and it should be independent of k.",
    "start": "1060070",
    "end": "1065340"
  },
  {
    "text": "This can be any function. It's presumably an\nexponential function,",
    "start": "1065340",
    "end": "1072260"
  },
  {
    "text": "because if this is\nan NP-hard problem, something's got\nto be exponential. This clearly is not exponential.",
    "start": "1072260",
    "end": "1078030"
  },
  {
    "text": "So it's got to be here. So this is a sense in which\nwe're exponential in k, polynomial in n.",
    "start": "1078030",
    "end": "1084610"
  },
  {
    "text": "But it's much better than\nthis kind of running time. OK. We can think about\nwhat-- in the sense",
    "start": "1084610",
    "end": "1090540"
  },
  {
    "text": "in which it is much better once\nwe have an actual algorithm of this type. So let's do-- let's\ntry to solve vertex",
    "start": "1090540",
    "end": "1097429"
  },
  {
    "text": "cover in this kind of time. I claim vertex cover is\nfixed parameter tractable.",
    "start": "1097430",
    "end": "1103030"
  },
  {
    "text": "There is such an algorithm. ",
    "start": "1103030",
    "end": "1116650"
  },
  {
    "text": "And the algorithm is\ngoing to look familiar. Very similar to the\n2-approximation algorithm",
    "start": "1116650",
    "end": "1122710"
  },
  {
    "text": "that we had last class\nfor vertex cover.",
    "start": "1122710",
    "end": "1128532"
  },
  {
    "text": "So-- but I'm going to give\nit a different name, which is bounded-search-tree. ",
    "start": "1128532",
    "end": "1145860"
  },
  {
    "text": "OK. This algorithm is also going to\nfeel like dynamic programming. Or we're going to use guessing.",
    "start": "1145860",
    "end": "1151960"
  },
  {
    "text": "In general,\nexponential algorithms, naturally is guessing. But here, when I guess, I have\nto try all the possibilities.",
    "start": "1151960",
    "end": "1158450"
  },
  {
    "text": "Here this was one way of\ntrying all the possibilities. We're going to be a little\nbit more sophisticated in how",
    "start": "1158450",
    "end": "1163836"
  },
  {
    "text": "we try all the possibilities\nthat actually exploits the properties of vertex cover. ",
    "start": "1163836",
    "end": "1170230"
  },
  {
    "text": "First line is just like the\n2-approximation algorithm.",
    "start": "1170230",
    "end": "1175390"
  },
  {
    "text": "Look at any edge in the graph. ",
    "start": "1175390",
    "end": "1184049"
  },
  {
    "text": "OK. Here it is. From u to v. What do I\nknow about that picture?",
    "start": "1184050",
    "end": "1191360"
  },
  {
    "start": "1191360",
    "end": "1198030"
  },
  {
    "text": "Yeah. AUDIENCE: One of those vertices\nhas to be in the cover. ERIK DEMAINE: One\nof those vertices has to be in the cover. Either u or v or both are in\nS for that edge to be covered.",
    "start": "1198030",
    "end": "1207610"
  },
  {
    "text": "Now for the 2-approximation,\nwe just put those both in. Here we can't afford\nto do that because we want an exact solution.",
    "start": "1207610",
    "end": "1215260"
  },
  {
    "text": "So we'll try both options. We don't know which one belongs. Let's guess.",
    "start": "1215260",
    "end": "1222690"
  },
  {
    "text": "So we know either u is in S or\nv is in S. Don't know which.",
    "start": "1222690",
    "end": "1230750"
  },
  {
    "text": "So guess.  Sorry-- I should, to be\nclear, mention or both.",
    "start": "1230750",
    "end": "1236909"
  },
  {
    "text": " So we're going to\nguess, which means we need to try both options.",
    "start": "1236910",
    "end": "1243730"
  },
  {
    "text": "We're going to try putting\nu in, and then we're going to try putting v in. So let's just see what\nhappens when we try that.",
    "start": "1243730",
    "end": "1250610"
  },
  {
    "text": "So in the first guess, we\nsay, let's put u in S. OK.",
    "start": "1250610",
    "end": "1257049"
  },
  {
    "text": "Well, if we put u in\nS, that means we cover all of the edges incident to u.",
    "start": "1257050",
    "end": "1263390"
  },
  {
    "text": "So I'd like to use recursion. I'd like to simplify my problem. Get another vertex\ncover instance.",
    "start": "1263390",
    "end": "1270417"
  },
  {
    "text": "So in order to do\nthat, I'm just going to delete u and all\nof its incident edges. We do the similar thing in\nthe approximation algorithm",
    "start": "1270417",
    "end": "1276700"
  },
  {
    "text": "but for u and v simultaneously. So delete u as incident edges.",
    "start": "1276700",
    "end": "1284105"
  },
  {
    "text": " Now we have a vertex\ncover instance.",
    "start": "1284105",
    "end": "1289520"
  },
  {
    "text": "There's one other thing. There's a new graph we have. But we also need to update k. Because we just\nused one of those--",
    "start": "1289520",
    "end": "1297900"
  },
  {
    "text": "we just added something\nto S, and then we deleted that from the graph. Which means, in our new\ngraph, effectively k",
    "start": "1297900",
    "end": "1303640"
  },
  {
    "text": "has gone down by 1. OK. So I'll say decrement k. ",
    "start": "1303640",
    "end": "1311429"
  },
  {
    "text": "Now I have a new instance. I have a new graph and\na different value of k.",
    "start": "1311430",
    "end": "1317050"
  },
  {
    "text": "Recurse this algorithm. ",
    "start": "1317050",
    "end": "1324500"
  },
  {
    "text": "I would say-- I'll call the new\ngraph G prime and the integer k prime. k prime\nequals k minus 1.",
    "start": "1324500",
    "end": "1331600"
  },
  {
    "text": "And then the second case\nis do the same thing for v. I won't write the\ncode, exactly the same,",
    "start": "1331600",
    "end": "1337139"
  },
  {
    "text": "but I delete v and\nit's incident edges. I still decrement k by 1. And I recurse. And then I just return the\nor of these two answers.",
    "start": "1337140",
    "end": "1346140"
  },
  {
    "text": "So if this one finds\na solution, great. I found a solution to\nthe overall problem. This one finds a\nsolution, great.",
    "start": "1346140",
    "end": "1351330"
  },
  {
    "text": "Maybe both return yes. Doesn't matter. In general, I just\ntake the inclusive",
    "start": "1351330",
    "end": "1357380"
  },
  {
    "text": "or of those two Boolean values. That gives me an overall yes\nno answer to k vertex cover.",
    "start": "1357380",
    "end": "1364440"
  },
  {
    "text": "Cool? So next question is what\nthe running time is. But you can think of this\nas a dynamic program.",
    "start": "1364440",
    "end": "1371640"
  },
  {
    "text": "It's just, here we recurse,\nand we don't bother memoizing. Because, in general, memoization\nwill never help us here.",
    "start": "1371640",
    "end": "1379420"
  },
  {
    "text": "And you may have even\nthought of algorithms like this in the dynamic\nprogramming world. And we just say, well,\nthat's not good enough,",
    "start": "1379420",
    "end": "1386090"
  },
  {
    "text": "because in dynamic programming\nwe want polynomial time. This is like a dynamic\nprogram, but the running time",
    "start": "1386090",
    "end": "1391335"
  },
  {
    "text": "is exponential. But it turns out it will be\nfixed parameter tractable.",
    "start": "1391335",
    "end": "1396690"
  },
  {
    "text": "That's the good news. ",
    "start": "1396690",
    "end": "1403022"
  },
  {
    "text": "Let's think about\nthe running time. ",
    "start": "1403022",
    "end": "1418929"
  },
  {
    "text": "So if I draw-- let's\ndraw a recursion tree. Right? This is a divide-and-conquer\nalgorithm in a very weak sense.",
    "start": "1418930",
    "end": "1427600"
  },
  {
    "text": "We start up here with a problem\nof size n and a parameter k.",
    "start": "1427600",
    "end": "1439730"
  },
  {
    "text": "And we make two recursive calls.  OK.",
    "start": "1439730",
    "end": "1444890"
  },
  {
    "text": "We deleted a vertex\nand maybe some edges. So let's say, we\nhave a new problem",
    "start": "1444890",
    "end": "1449950"
  },
  {
    "text": "of size something\nlike n minus 1. But what really saves us\nis that k went down by 1.",
    "start": "1449950",
    "end": "1455679"
  },
  {
    "text": "And we have two recursive calls. Each of them k is 1 smaller.",
    "start": "1455680",
    "end": "1460815"
  },
  {
    "text": "OK. And then each of those\nhas two recursive calls. I don't really know\nwhat happens to n.",
    "start": "1460816",
    "end": "1466230"
  },
  {
    "text": "It probably doesn't\nget that much smaller, but k goes down by another 1. OK.",
    "start": "1466230",
    "end": "1471730"
  },
  {
    "text": "So I'm writing here the\nsize of the problems and the parameters\nof the problems.",
    "start": "1471730",
    "end": "1477140"
  },
  {
    "text": "n minus 2. k minus 2. OK.",
    "start": "1477140",
    "end": "1483720"
  },
  {
    "text": "How much time do I spend\nin each of these nodes? How much work am I\ndoing-- non-recursive work",
    "start": "1483720",
    "end": "1490932"
  },
  {
    "text": "am I doing in this algorithm? ",
    "start": "1490932",
    "end": "1497965"
  },
  {
    "text": "Yeah. AUDIENCE: o of E,\nright? [INAUDIBLE]. ERIK DEMAINE: o of E. Yeah. Certainly at most\norder E. Probably",
    "start": "1497965",
    "end": "1504570"
  },
  {
    "text": "at most order v, because\nthere's only at most v incident edges to each vertex.",
    "start": "1504570",
    "end": "1510880"
  },
  {
    "text": "Yeah? Linear time. Doesn't really matter\nhow careful we are here,",
    "start": "1510880",
    "end": "1517260"
  },
  {
    "text": "but I will say-- each of\nthese nodes-- we spend, at most, let's\nsay, order v time.",
    "start": "1517260",
    "end": "1525590"
  },
  {
    "text": "OK. It happened that\nv went down by 1. As you can see at these levels. But certainly an upper\nbound is the original v.",
    "start": "1525590",
    "end": "1533500"
  },
  {
    "text": "In each of these nodes, we spend\nat most the original v. When",
    "start": "1533500",
    "end": "1540010"
  },
  {
    "text": "does this recursion stop? I didn't write a base case. Help me out. What's a good base case\nfor this algorithm?",
    "start": "1540010",
    "end": "1545650"
  },
  {
    "text": " Yeah. AUDIENCE: When k equals 0,\ncheck if there are any edges.",
    "start": "1545650",
    "end": "1552603"
  },
  {
    "text": " ERIK DEMAINE: When k equals\n0, check if there any edges.",
    "start": "1552603",
    "end": "1557840"
  },
  {
    "text": "When k equals 0, I can't put\nanything into my vertex cover. So if there any edges, they're\nnot going to be covered.",
    "start": "1557840",
    "end": "1563789"
  },
  {
    "text": "That's bad news. OK. So over here we have base case,\nk equals 0, check-- or let's",
    "start": "1563790",
    "end": "1577010"
  },
  {
    "text": "say, return whether\nsize of E is not 0.",
    "start": "1577010",
    "end": "1588380"
  },
  {
    "text": "If it's not 0--\nsorry-- whether it equals 0-- get it\nright-- if it equals 0,",
    "start": "1588380",
    "end": "1594360"
  },
  {
    "text": "then the answer is yes. There's a vertex cover. I can cover all of those\n0 edges using 0 vertices. That's good.",
    "start": "1594360",
    "end": "1600350"
  },
  {
    "text": "But when E does not\nequal 0, there's no way I can cover that\nnon-zero number of edges using 0 vertices in my vertex cover.",
    "start": "1600350",
    "end": "1607990"
  },
  {
    "text": "OK. So that's the base\ncase, which means this recursion keeps going\nuntil we get down to k equals 0.",
    "start": "1607990",
    "end": "1614470"
  },
  {
    "text": "We start at k. We end up with 0. So the number of\nlevels here is k.",
    "start": "1614470",
    "end": "1620299"
  },
  {
    "text": "OK. The height of this tree--\nthis recursion tree is k.",
    "start": "1620300",
    "end": "1626780"
  },
  {
    "text": "So how many nodes are\nthere in this tree? 2 to the k. ",
    "start": "1626780",
    "end": "1637900"
  },
  {
    "text": "So total running time\nis v times 2 to the k. I guess I should write\n2 to the k times v. Hey,",
    "start": "1637900",
    "end": "1644370"
  },
  {
    "text": "that is exactly what I wanted. I got a function of\nk-- namely 2 to the k. Exponential-- that makes sense.",
    "start": "1644370",
    "end": "1650050"
  },
  {
    "text": "And I got a polynomial in n. Here it's n.",
    "start": "1650050",
    "end": "1655980"
  },
  {
    "text": "The exponent is 1. v is at most n. n\nus v plus E. Wow.",
    "start": "1655980",
    "end": "1662620"
  },
  {
    "text": "Big improvement. This seems equally simple\nof an algorithm as this one,",
    "start": "1662620",
    "end": "1668930"
  },
  {
    "text": "but actually it\nruns a lot faster. OK. Let me give you a\nfeeling-- I mean this is what we would call a\nlinear time algorithm for fixed",
    "start": "1668930",
    "end": "1676520"
  },
  {
    "text": "k. The exponent here\ndoesn't depend on k. If k is 10, it's a\nlinear time algorithm.",
    "start": "1676520",
    "end": "1681539"
  },
  {
    "text": "If k is 100, it's a\nlinear time algorithm. If k is 100, that\nmight be a little bit beyond what we can run.",
    "start": "1681540",
    "end": "1687510"
  },
  {
    "text": "But you know, k\nequals 32, 40 maybe, that would probably be\nreasonable running time,",
    "start": "1687510",
    "end": "1693480"
  },
  {
    "text": "in practice. OK. That's a lot better than before\nwhere like k equals 2 or 3. This is probably unreasonable.",
    "start": "1693480",
    "end": "1699710"
  },
  {
    "text": "v is like a billion,\nsay, big graph. Also from a theoretical\nperspective,",
    "start": "1699710",
    "end": "1705120"
  },
  {
    "text": "this works even up\nto k equals log n. If k equals log n,\nthis'll be n squared.",
    "start": "1705120",
    "end": "1711440"
  },
  {
    "text": "That's nice. k equals 2 log n, it's n cubed. OK. So it grows. But we can handle k\nequals order log n.",
    "start": "1711440",
    "end": "1718974"
  },
  {
    "text": "And this will still\nbe polynomial. In general, with fixed\nparameter algorithms, it's not always going\nto be up to log n,",
    "start": "1718974",
    "end": "1724120"
  },
  {
    "text": "it's going to be up to whatever\nthe inverse of this f of k is. That's where we can\nstill be polynomial.",
    "start": "1724120",
    "end": "1731250"
  },
  {
    "text": "So that's nice. I consider this a\ngood running time. Good in the sense that it\nfollows that definition",
    "start": "1731250",
    "end": "1740039"
  },
  {
    "text": "of fixed parameter tractable. So bounded-search-tree\nalgorithm is good. Brute force algorithm is bad.",
    "start": "1740040",
    "end": "1745650"
  },
  {
    "text": "In this case. Bounded-search-tree is\na general technique. You can use it for\nlots of problems.",
    "start": "1745650",
    "end": "1751340"
  },
  {
    "text": "We're going to see\nanother technique today called kernelization. ",
    "start": "1751340",
    "end": "1757018"
  },
  {
    "text": "But-- Let's see--\nbefore I get there, I want to question\nthis definition.",
    "start": "1757018",
    "end": "1764356"
  },
  {
    "text": "So this definition is nice. It's natural in the\nsense that it gives you-- it distinguishes between the\nexponent of n depending on k",
    "start": "1764356",
    "end": "1771743"
  },
  {
    "text": "and not depending on k, which\nis a natural thing to do. But there's another natural\ndefinition of fixed parameter",
    "start": "1771743",
    "end": "1780129"
  },
  {
    "text": "tractability.  So let's-- vertex cover-- I\nthink you remember the problem",
    "start": "1780129",
    "end": "1790476"
  },
  {
    "text": "by now. ",
    "start": "1790476",
    "end": "1802010"
  },
  {
    "text": "So let's see-- we have\nthis definition, which is f of k times polynomial n.",
    "start": "1802010",
    "end": "1808706"
  },
  {
    "text": "But I would say that the first\ntime I saw fixed parameter tractability, I thought, well,\nwhy do you define it that way?",
    "start": "1808706",
    "end": "1813909"
  },
  {
    "text": "I mean, maybe it would be better\nto do f of k plus polynomial n. ",
    "start": "1813910",
    "end": "1822454"
  },
  {
    "text": "That would be better, right? That would be\nfaster, seems like. So I mean, this is nice in\nthat we achieved this bound,",
    "start": "1822454",
    "end": "1830630"
  },
  {
    "text": "but could we hope for\nthis even better bound. OK? It turns out these\nnotions are identical.",
    "start": "1830630",
    "end": "1838080"
  },
  {
    "text": "This is weird. The first time you see it. So theorem-- you can solve a\nproblem in this kind of time,",
    "start": "1838080",
    "end": "1850760"
  },
  {
    "text": "if and only if you can solve the\nproblem in this kind of time.",
    "start": "1850760",
    "end": "1856680"
  },
  {
    "text": "So of course, f is\ngoing to change. And why don't I label\nthese constants.",
    "start": "1856680",
    "end": "1863050"
  },
  {
    "text": "So we have c up here and\nsome c prime up here. But you can solve a problem\nin this multiplicative time,",
    "start": "1863050",
    "end": "1869600"
  },
  {
    "text": "if and only if you can\nsolve it in an additive time with a different function\nand a different constant.",
    "start": "1869600",
    "end": "1875230"
  },
  {
    "text": "This is actually\nreally easy to prove. The longer you think about it,\nthe more obvious it will be.",
    "start": "1875230",
    "end": "1881539"
  },
  {
    "text": "If you have an instance of\nsize n with parameter k, there are two cases.",
    "start": "1881540",
    "end": "1889370"
  },
  {
    "text": "Either n is less than\nor equal to f of k, or n is greater than\nor equal to f of k.",
    "start": "1889370",
    "end": "1897721"
  },
  {
    "text": "Right? It's got to be one\nof those, maybe both. If n is less than or\nequal to f of k that",
    "start": "1897721",
    "end": "1904180"
  },
  {
    "text": "means that this running time,\nf of k times n to the c--",
    "start": "1904180",
    "end": "1911112"
  },
  {
    "text": "let's see-- n is at most f of k. So this is at most f of\nk to the c plus 1 power.",
    "start": "1911112",
    "end": "1918380"
  },
  {
    "text": "Right? I multiply f of k to\nthe c times f of k.",
    "start": "1918380",
    "end": "1923550"
  },
  {
    "text": "When n is greater\nthan f of k, then I know that this running time,\nf of k times n to the c, well,",
    "start": "1923550",
    "end": "1929665"
  },
  {
    "text": "now I know an upper\nbound of f of k. I know this thing is at most n. And so this is at most\nn to the c plus 1.",
    "start": "1929665",
    "end": "1937540"
  },
  {
    "text": "OK. So really I have two\nscenarios, either I'm bounded by some\npurely function of k,",
    "start": "1937540",
    "end": "1942550"
  },
  {
    "text": "or I'm bounded by some\npurely polynomial of n. Which means, in both cases,\nthe running time f of k times",
    "start": "1942550",
    "end": "1951600"
  },
  {
    "text": "n to the c is bounded\nabove by the max of those two things, max of\nf of k to the c plus 1, n",
    "start": "1951600",
    "end": "1962580"
  },
  {
    "text": "to the c plus 1. OK. And the max is always,\nat most, the sum. I'm assuming everything\nhere is non-negative.",
    "start": "1962580",
    "end": "1970510"
  },
  {
    "text": "So I take f of k, c plus\n1, plus n to the c plus 1.",
    "start": "1970510",
    "end": "1976030"
  },
  {
    "text": "Boom. That is an additive function\nof k plus polynomial in n.",
    "start": "1976030",
    "end": "1982890"
  },
  {
    "text": "OK. Rather trivial. This a funny area\nwhere you think, ah, this is deep question.",
    "start": "1982890",
    "end": "1988327"
  },
  {
    "text": "Are these things the same? And ends up, yeah, they're\nthe same for obvious reasons.",
    "start": "1988327",
    "end": "1993830"
  },
  {
    "text": "So for example, we have this\nlinear, basically n times 2 to the k algorithm.",
    "start": "1993830",
    "end": "2000390"
  },
  {
    "text": "If you apply this\nargument, you get this is, at most, so this\nn times to the k bound,",
    "start": "2000390",
    "end": "2009780"
  },
  {
    "text": "is, at most, n squared\nplus 4 to the k.",
    "start": "2009780",
    "end": "2015430"
  },
  {
    "text": "OK. I'm basically just\nsquaring both of the terms. OK. Probably you prefer\nthis time bound,",
    "start": "2015430",
    "end": "2022830"
  },
  {
    "text": "but if you really like\nan additive time bound, the exact same algorithm\nsatisfies this.",
    "start": "2022830",
    "end": "2029282"
  },
  {
    "text": "OK. So not that exciting. And in practice, n squared--\nit looks like a bad thing,",
    "start": "2029282",
    "end": "2035695"
  },
  {
    "text": "so you'd probably prefer\nthis kind of running time. But there is a sense-- there's\na quadratics thing going on here in that we\nhave an n and then",
    "start": "2035695",
    "end": "2041650"
  },
  {
    "text": "we have a function\nof k multiplied together-- OK-- whatever. All right. So this justifies\nthe definition.",
    "start": "2041650",
    "end": "2047740"
  },
  {
    "text": "This is kind of robust to\nwhether I put a dot here or plus, so clearly this\nis the right definition.",
    "start": "2047740",
    "end": "2053642"
  },
  {
    "text": "We're going to use dot. You could also use\nplus, but-- all right.",
    "start": "2053642",
    "end": "2059280"
  },
  {
    "text": "But there's another thing\ncalled kernelization, which, in an intuitive sense,\nmatches this idea of plus.",
    "start": "2059280",
    "end": "2067770"
  },
  {
    "text": "And it also matches\nan idea that's common practice\ncalled pre-processing.",
    "start": "2067770",
    "end": "2074194"
  },
  {
    "text": "If I have a giant graph,\nand I'm given some number k, and I want to find\na vertex cover,",
    "start": "2074194",
    "end": "2080600"
  },
  {
    "text": "well, maybe the first thing I\ncould do is simplify my graph. Maybe there's some parts that\nare really easy to solve.",
    "start": "2080600",
    "end": "2086408"
  },
  {
    "text": "I should throw those away first. And that will make\nmy problem smaller. So if I'm going to have an\nexponential running time,",
    "start": "2086409",
    "end": "2093480"
  },
  {
    "text": "presumably, I want to first make\nthe problem as small as I can. Then deal with one\nof these algorithms.",
    "start": "2093480",
    "end": "2099570"
  },
  {
    "text": "OK. So we're going to do that. ",
    "start": "2099570",
    "end": "2109310"
  },
  {
    "text": "First, I'm going to tell\nyou about it generically. ",
    "start": "2109310",
    "end": "2116017"
  },
  {
    "text": "And then we'll do\nit for vertex cover. ",
    "start": "2116017",
    "end": "2124570"
  },
  {
    "text": "So first, let me\ngive you a definition of what we'd like out of this\npre-processing procedure.",
    "start": "2124570",
    "end": "2130621"
  },
  {
    "text": "It's going to be called a\nkernelization procedure. ",
    "start": "2130622",
    "end": "2136720"
  },
  {
    "text": "Kernelization algorithm is\na polynomial time algorithm. ",
    "start": "2136720",
    "end": "2143460"
  },
  {
    "text": "Head back to\npolynomial time land. ",
    "start": "2143460",
    "end": "2148470"
  },
  {
    "text": "You can think of\nit as a reduction, but with NP-hardness, we\nreduced from one problem a",
    "start": "2148470",
    "end": "2154620"
  },
  {
    "text": "to another problem b. Here we're going to\nreduce from the problem a to the same problem a. It's a self reduction,\nif you will.",
    "start": "2154620",
    "end": "2161560"
  },
  {
    "text": "But the input to the problem\nis going to get smaller. So we're going to\nconvert an input.",
    "start": "2161560",
    "end": "2169281"
  },
  {
    "text": "So this is for a\nparameterized problem. So an input consists\nof some regular input x and a parameter k.",
    "start": "2169281",
    "end": "2176440"
  },
  {
    "text": "And we want to convert it into\nan equivalent small input x",
    "start": "2176440",
    "end": "2191020"
  },
  {
    "text": "prime k prime to\nthe same problem.",
    "start": "2191020",
    "end": "2197181"
  },
  {
    "text": "OK. The problem is fixed,\nsay vertex cover. So we're given an\narbitrary input. This would be a\ngraph and a number k.",
    "start": "2197181",
    "end": "2203770"
  },
  {
    "text": "And we want to convert it into\nan equivalent small input,",
    "start": "2203770",
    "end": "2208890"
  },
  {
    "text": "which is another graph G prime,\nand another parameter k prime. So equivalent means that the\nanswer is going to be the same.",
    "start": "2208890",
    "end": "2216470"
  },
  {
    "text": "OK. And I want the answer\nto the problem-- let's say, answer of x comma\nk to be equal to the answer",
    "start": "2216470",
    "end": "2227570"
  },
  {
    "text": "to x prime and k prime. Again, same problem,\nbut different input.",
    "start": "2227570",
    "end": "2235285"
  },
  {
    "text": "I'm trying to be a\nlittle generic here. It could be-- we're\ngoing to think here about decision problems,\nbut this makes sense",
    "start": "2235285",
    "end": "2240860"
  },
  {
    "text": "even for non-decision problems. Whatever the answer is\nhere, it should be the same as the answer is here, because\nI want an exact solution.",
    "start": "2240860",
    "end": "2246850"
  },
  {
    "text": "I want to solve\nexactly the problem. I want to compute this\nanswer exactly correctly. So if I can reduce\nit to some x prime k",
    "start": "2246851",
    "end": "2253820"
  },
  {
    "text": "prime with the same\nanswer, well, now I can just solve x prime k prime. So that's good.",
    "start": "2253820",
    "end": "2259089"
  },
  {
    "text": "Now what does small mean? We need to define both of these. Small means that\nthe size of x prime,",
    "start": "2259090",
    "end": "2267789"
  },
  {
    "text": "which you might call\nn prime, should be, at most, some function of k.",
    "start": "2267790",
    "end": "2273950"
  },
  {
    "start": "2273950",
    "end": "2280420"
  },
  {
    "text": "Cool. So this is interesting. So we started with probably\na giant problem, x excise n,",
    "start": "2280420",
    "end": "2289280"
  },
  {
    "text": "and we have a parameter k, which\nwe presume is relatively small. And we convert it\ninto a new input x",
    "start": "2289280",
    "end": "2296260"
  },
  {
    "text": "prime that's very small. Its size is a function of k. No more dependence on n. n has\ndisappeared from the problem.",
    "start": "2296260",
    "end": "2304561"
  },
  {
    "text": "OK. We start with\nsomething a size n. We produced something the\nsize as function of k. And then-- OK-- there's\nsome other parameter k",
    "start": "2304561",
    "end": "2310900"
  },
  {
    "text": "prime-- doesn't matter\nmuch what it is. It's going to also\nbe a function of k.",
    "start": "2310900",
    "end": "2315955"
  },
  {
    "text": "So we started with\nsomething of size n. We produced something of size k. In polynomial time.",
    "start": "2315955",
    "end": "2322150"
  },
  {
    "text": "Wow. This would be big\nif we could do it. Because we start with\ngiant problem small k,",
    "start": "2322150",
    "end": "2329070"
  },
  {
    "text": "and we kernelize\nit down-- so here's the picture with this big thing. And the intuition is that\nthe hardness of the problem",
    "start": "2329070",
    "end": "2337010"
  },
  {
    "text": "is just from this\nthing of size k. But there's no thing of size k. Or at least we haven't\nfound it yet, right?",
    "start": "2337010",
    "end": "2343290"
  },
  {
    "text": "The k is the size of the\nvertex cover we're looking for. But we don't know where that is. It's hiding somewhere\nin this instance,",
    "start": "2343290",
    "end": "2349700"
  },
  {
    "text": "in this amorphous blob. So it's k. But somehow, magically,\nthis kernelization procedure",
    "start": "2349700",
    "end": "2357640"
  },
  {
    "text": "produces a new problem that's\nonly a little bit bigger than k. OK.",
    "start": "2357640",
    "end": "2362910"
  },
  {
    "text": "Some function of k. So we take the big\nproblem, we make it down to this small thing.",
    "start": "2362910",
    "end": "2368269"
  },
  {
    "text": "What do you do now? You can run any\nalgorithm you want, any finite algorithm\napplied to this instance",
    "start": "2368270",
    "end": "2376230"
  },
  {
    "text": "will run in some\nfunction of k time. Doesn't matter as long as\nthis is a correct algorithm.",
    "start": "2376230",
    "end": "2381740"
  },
  {
    "text": "If your problem is in NP,\nthere is an exponential time algorithm. You just try all the guesses.",
    "start": "2381740",
    "end": "2388380"
  },
  {
    "text": "So we could use-- we\nhave two of them here. We could run either of these\nafter we've kernelized.",
    "start": "2388380",
    "end": "2394290"
  },
  {
    "text": "And we would get an FPT time. And, indeed, the FPT would\nmimic this kind of running time.",
    "start": "2394290",
    "end": "2401500"
  },
  {
    "text": "We do a polynomial\namount of pre-processing. That's the\nkernelization procedure. That's the only dependence on n.",
    "start": "2401500",
    "end": "2408220"
  },
  {
    "text": "After we've done\nthat, the new problem is entirely a function of k. And then you apply\nany algorithm to that,",
    "start": "2408220",
    "end": "2413810"
  },
  {
    "text": "you'll get f of k running time. Now if we want a good\nf of k, we should use the best algorithm we have.",
    "start": "2413810",
    "end": "2419580"
  },
  {
    "text": "But, in general, you\ncould use anything. All right.",
    "start": "2419580",
    "end": "2425170"
  },
  {
    "text": "So far, so good.  So we had this theorem that\nproduct is the same as plus.",
    "start": "2425170",
    "end": "2434340"
  },
  {
    "text": "In fact, kernelization\nis the same thing. So these are all the same thing.",
    "start": "2434340",
    "end": "2442430"
  },
  {
    "text": "I guess this one is\nequivalent to being FPT. that's the definition of FPT.",
    "start": "2442430",
    "end": "2447860"
  },
  {
    "text": "So I'll just write it here. ",
    "start": "2447860",
    "end": "2455079"
  },
  {
    "text": "The problem is FPT, if and\nonly if it has a kernelization. ",
    "start": "2455080",
    "end": "2465590"
  },
  {
    "text": "This is crazy. I keep introducing stronger\nand stronger notions of good. And they all turn\nout to be the same.",
    "start": "2465590",
    "end": "2471600"
  },
  {
    "text": "That, again, gives you\na sense of robustness of this definition. And why this is a\nnatural thing to study.",
    "start": "2471600",
    "end": "2477260"
  },
  {
    "text": "So this sounds crazy. How could I put all\nof the easy work at the beginning in this\npolynomial time algorithm",
    "start": "2477260",
    "end": "2484230"
  },
  {
    "text": "and then in the end\nproduce something that is a reasonable size? Again, this proof is\ngoing to be trivial.",
    "start": "2484230",
    "end": "2490620"
  },
  {
    "text": "I think everything in\nthis field is either really hard or trivial. I guess that makes sense.",
    "start": "2490621",
    "end": "2497290"
  },
  {
    "text": "So let's first-- so I'm just\nlooking at this inequality-- this implication-- we\nalready did the other one.",
    "start": "2497290",
    "end": "2504930"
  },
  {
    "text": "The easy direction, of\ncourse, is this way. I didn't even do\nit in this case.",
    "start": "2504930",
    "end": "2510030"
  },
  {
    "text": "If I have an additive\nrunning time, it certainly, at\nmost, the product, assuming both those\nnumbers are at least 1.",
    "start": "2510030",
    "end": "2516490"
  },
  {
    "text": "OK. And again, if I have a\nkernelization, as I said, I could run the kernelization\nalgorithm in polynomial time,",
    "start": "2516490",
    "end": "2523260"
  },
  {
    "text": "and then run any finite\nalgorithm to solve the problem, and I would get some\nf of k running time.",
    "start": "2523260",
    "end": "2529010"
  },
  {
    "text": "So this is easy. ",
    "start": "2529010",
    "end": "2535500"
  },
  {
    "text": "Kernelize and then run any\nalgorithm on the kernel.",
    "start": "2535500",
    "end": "2545650"
  },
  {
    "text": "Kernel is the produced\noutput x prime k prime.",
    "start": "2545650",
    "end": "2550920"
  },
  {
    "text": "OK. Let's do the other direction. That's the interesting part. So suppose I have it an\nalgorithm that runs, let's say,",
    "start": "2550920",
    "end": "2557331"
  },
  {
    "text": "in this running time. I claim that I can\nturn it into a kernel.",
    "start": "2557331",
    "end": "2563010"
  },
  {
    "text": "And the proof is going\nto look just like before. OK. So there are two cases.",
    "start": "2563010",
    "end": "2568020"
  },
  {
    "text": "One is that f of k, let's say,\nis less than or equal to n. ",
    "start": "2568020",
    "end": "2574390"
  },
  {
    "text": "Actually I want to do\nthe other case first. I think it's a\nlittle more natural. Well, it doesn't really matter.",
    "start": "2574390",
    "end": "2580230"
  },
  {
    "text": "They're both easy but\nfor different reasons. the then parts are\ngoing to look different.",
    "start": "2580230",
    "end": "2586279"
  },
  {
    "text": "So the first case,\nif n is at most f of k, what do I do in that\nsituation, in other words, kernelize of this\nthing of size n,",
    "start": "2586280",
    "end": "2593510"
  },
  {
    "text": "I want to kernelize into\nsomething of size f of k? Nothing. I'm done already.",
    "start": "2593510",
    "end": "2599200"
  },
  {
    "text": "So this is the already\nkernelized case. ",
    "start": "2599200",
    "end": "2607059"
  },
  {
    "text": "That's great.  So the other cases,\nand it's big.",
    "start": "2607059",
    "end": "2613780"
  },
  {
    "text": "That's the more interesting\ncase, of course. n is greater than\nor equal to f of k.",
    "start": "2613780",
    "end": "2619820"
  },
  {
    "text": " What happens here? Well, just like last time, that\nmeans that this running time, f",
    "start": "2619820",
    "end": "2629090"
  },
  {
    "text": "of k is now at most n, that\nmeans this running times is at most n to the c plus one.",
    "start": "2629090",
    "end": "2634559"
  },
  {
    "text": "Right? So that means the FPT\nalgorithm that I'm given,",
    "start": "2634560",
    "end": "2640585"
  },
  {
    "text": "because we're\nassuming here we're given an FPT algorithm,\nwe want to produce a kernel-- in that\ncase, that algorithm",
    "start": "2640585",
    "end": "2648400"
  },
  {
    "text": "runs in n to the c plus 1 time.",
    "start": "2648400",
    "end": "2655180"
  },
  {
    "text": "Which means I can\nactually run it. That's polynomial time. OK. So over here I needed a\npolynomial time kernelization",
    "start": "2655180",
    "end": "2663720"
  },
  {
    "text": "algorithm. If it happens that\nf of k is at most n, then I can actually\nrun the FPT algorithm,",
    "start": "2663720",
    "end": "2670747"
  },
  {
    "text": "and that would be a valid\nkernelization procedure. Now the FPT algorithm\nactually solves the problem.",
    "start": "2670747",
    "end": "2675890"
  },
  {
    "text": "Let's say, it says\nyes or no, whether the answer to my original question.",
    "start": "2675890",
    "end": "2682120"
  },
  {
    "text": "The kernelization procedure\nhas to output an input to the problem. So what I need to\nadd one thing here",
    "start": "2682120",
    "end": "2690610"
  },
  {
    "text": "which is just-- output a\ncanonical yes or no input",
    "start": "2690610",
    "end": "2702471"
  },
  {
    "text": "accordingly.  OK. If the FPT algorithm-- here\nI'm thinking about decision",
    "start": "2702471",
    "end": "2708640"
  },
  {
    "text": "problems-- if the FPT\nalgorithm says yes, I'm going to output\none instance, one input of the problem\nwhere the output is yes.",
    "start": "2708640",
    "end": "2715280"
  },
  {
    "text": "I know that one exists, because\nthis algorithm said yes. So in a constant\namount of space,",
    "start": "2715280",
    "end": "2721619"
  },
  {
    "text": "I'm able to write a yes input. Or in a constant amount\nspace, I write a no input. So the new kernel will\nhave constant size,",
    "start": "2721620",
    "end": "2728050"
  },
  {
    "text": "which is smaller than f of k. OK. That's it.",
    "start": "2728050",
    "end": "2733580"
  },
  {
    "text": "So either I output the same\ninput that I was given. Or I output something\nof constant size",
    "start": "2733580",
    "end": "2739670"
  },
  {
    "text": "that encodes a yes or no. Kind of trivial again.",
    "start": "2739670",
    "end": "2744750"
  },
  {
    "text": "The catch is that size of the\nkernel, the size of the output,",
    "start": "2744750",
    "end": "2751150"
  },
  {
    "text": "in general, here is going\nto be exponential in k, because f of k presumably\nis exponential in k.",
    "start": "2751150",
    "end": "2758390"
  },
  {
    "text": "That's annoying. This is what you might call\nan exponential size kernel. So an interesting question.",
    "start": "2758390",
    "end": "2764309"
  },
  {
    "text": "And exponential size kernels\nare equivalent to FPT. Something that may\nnot be equivalent",
    "start": "2764310",
    "end": "2769750"
  },
  {
    "text": "is a polynomial size kernel. It would be nice if I\nstart with something that's polynomial in n, and I\nreduce it to something",
    "start": "2769750",
    "end": "2776579"
  },
  {
    "text": "that's polynomial in k. And then I run something\nthat's exponential on that. But it will only be singly\nexponential in k, hopefully.",
    "start": "2776580",
    "end": "2785400"
  },
  {
    "text": "Whereas, if I use this\nkernelization procedure, if I apply to vertex cover\nwith one of these algorithms,",
    "start": "2785400",
    "end": "2793029"
  },
  {
    "text": "I'm going to get\na new thing that's size is exponential in k. If I run one of these\nbrute force algorithms,",
    "start": "2793030",
    "end": "2799277"
  },
  {
    "text": "I'm going to get\nsomething that's like doubly exponential in k. That's not so hot,\nbecause I know",
    "start": "2799277",
    "end": "2804810"
  },
  {
    "text": "how to do exponential in k. All right. But this is the general idea of\nkernelization, and why it's not",
    "start": "2804810",
    "end": "2812569"
  },
  {
    "text": "surprising that you can do it. I have one catch here which\nis-- this is an algorithm.",
    "start": "2812570",
    "end": "2817660"
  },
  {
    "text": "It compares n to f of k. In order to do this, you\nhave to know what k is.",
    "start": "2817660",
    "end": "2824250"
  },
  {
    "text": "Minor technicality. If you don't know what\nk is, you can basically",
    "start": "2824250",
    "end": "2830510"
  },
  {
    "text": "run this algorithm with\na timer, a stopwatch, and if it's running time\nexceeds n to the c plus 1,",
    "start": "2830510",
    "end": "2837430"
  },
  {
    "text": "then you know you're\nnot in this case. If it finishes within\nthat time bound, great. You found the answer.",
    "start": "2837430",
    "end": "2843080"
  },
  {
    "text": "If it doesn't finish, then you\nknow you must be in this case, and then you just quit, and\noutput your original input and say, I'm kernelized.",
    "start": "2843080",
    "end": "2848970"
  },
  {
    "text": "Done. Easy. OK. That's a technicality. ",
    "start": "2848970",
    "end": "2857270"
  },
  {
    "text": "All right. So much for general theory. Let's go back to algorithms.",
    "start": "2857270",
    "end": "2862300"
  },
  {
    "start": "2862300",
    "end": "2867380"
  },
  {
    "text": "Yeah, all this work I want\nto write down over here. We have a v times 2\nto the k algorithm.",
    "start": "2867380",
    "end": "2874125"
  },
  {
    "text": " On the one side. And here, we have an E\nas v to the k algorithm.",
    "start": "2874125",
    "end": "2883565"
  },
  {
    "text": " Just want to keep\na running-- we're going to get a faster\nalgorithm than both of those",
    "start": "2883565",
    "end": "2889940"
  },
  {
    "text": "through kernelization.  So I claim that we can\nfind a polynomial kernel--",
    "start": "2889940",
    "end": "2898221"
  },
  {
    "text": "polynomial-sized\nkernel-- it's going to be quadratic for vertex cover. ",
    "start": "2898221",
    "end": "2924270"
  },
  {
    "text": "These are hard to find. And there's a whole\nresearch industry for finding polynomial kernels.",
    "start": "2924270",
    "end": "2930650"
  },
  {
    "text": "So I'm going to give\nyou some methods.",
    "start": "2930650",
    "end": "2936849"
  },
  {
    "text": "But they're specific\nto vertex cover. ",
    "start": "2936850",
    "end": "2942700"
  },
  {
    "text": "So here's the first thing. This is hard to draw. So here I have a\nvertex u, and suppose",
    "start": "2942700",
    "end": "2948360"
  },
  {
    "text": "I have an edge\nconnected from u to u. This is called a loop. What can I do from a\nvertex cover perspective?",
    "start": "2948360",
    "end": "2957810"
  },
  {
    "text": "What can I conclude\nabout this picture? Yeah. AUDIENCE: [INAUDIBLE].",
    "start": "2957810",
    "end": "2964487"
  },
  {
    "text": "ERIK DEMAINE: Right. You must be in the vertex cover,\nbecause this edge really only has one endpoint.",
    "start": "2964487",
    "end": "2969771"
  },
  {
    "text": "OK. So far, so easy. So what I can do in\nthis case is say,",
    "start": "2969771",
    "end": "2975450"
  },
  {
    "text": "OK, u is in the vertex cover,\nand then delete u at it's",
    "start": "2975450",
    "end": "2984430"
  },
  {
    "text": "incident edges. ",
    "start": "2984430",
    "end": "2991136"
  },
  {
    "text": "So-- and then we\nhave to decrement k. ",
    "start": "2991136",
    "end": "2997710"
  },
  {
    "text": "OK. Cool. Seems-- feels familiar. But in this case,\nthere's no guessing.",
    "start": "2997710",
    "end": "3003500"
  },
  {
    "text": "We just know you\nmust be in the cover. All right. Here's another case. Suppose I have u and v and there\nare many edges connecting them.",
    "start": "3003500",
    "end": "3012439"
  },
  {
    "text": "This is called a multi-edge.  So maybe you just assume\nyour graph is simple.",
    "start": "3012439",
    "end": "3018390"
  },
  {
    "text": "But if you don't assume\nyour graph is simple, we might have these\nkinds of situations.",
    "start": "3018390",
    "end": "3025200"
  },
  {
    "text": "What can I do in this case? What can I guarantee? Yeah. AUDIENCE: You can\nremove all but one edge.",
    "start": "3025200",
    "end": "3030940"
  },
  {
    "text": "ERIK DEMAINE: You can remove\nall but one of the edges. Let's just delete all but one. If I cover one of\nthem, I cover them all.",
    "start": "3030940",
    "end": "3038119"
  },
  {
    "text": "Easy peasy.  See if you get the other rules.",
    "start": "3038120",
    "end": "3045290"
  },
  {
    "text": "So delete all by 1. ",
    "start": "3045290",
    "end": "3051325"
  },
  {
    "text": "In general, we're\ngoing to have a bunch of these kinds of simplification\nrules are guaranteed correct. They don't change the output.",
    "start": "3051325",
    "end": "3058476"
  },
  {
    "text": "But magically, we're going\nto end up with something the size of function of k. We haven't done much yet. But now we know that the\ngraph is simple, meaning it",
    "start": "3058476",
    "end": "3065750"
  },
  {
    "text": "has no loops and it\nhas no multi-edges. Cool. All right. Next thing I want to think\nabout is a vertex of degree",
    "start": "3065750",
    "end": "3085180"
  },
  {
    "text": "greater than k. k is\nthe current value of k. So suppose I have a high\ndegree vertex, more than k,",
    "start": "3085180",
    "end": "3093830"
  },
  {
    "text": "edges out going from it. ",
    "start": "3093830",
    "end": "3100417"
  },
  {
    "text": "What can I say then? ",
    "start": "3100417",
    "end": "3105530"
  },
  {
    "text": "Yeah. AUDIENCE: You must pick it. ERIK DEMAINE: You must\nput it in the cover.",
    "start": "3105530",
    "end": "3111480"
  },
  {
    "text": "Why? AUDIENCE: Because then\nyou need to cover all the remaining error vertices. ",
    "start": "3111480",
    "end": "3118877"
  },
  {
    "text": "ERIK DEMAINE: Right. Proof by contradiction. If I don't put it in the cover,\nthat means all of these guys are in the cover.",
    "start": "3118877",
    "end": "3124420"
  },
  {
    "text": "There's more than k of them. And the whole goal was to find a\nvertex cover of size at most k.",
    "start": "3124420",
    "end": "3130799"
  },
  {
    "text": " So you better not put all of\nthese in your vertex cover,",
    "start": "3130800",
    "end": "3135965"
  },
  {
    "text": "because that's more than k. So, therefore, this\none has to be in there. This is a cool argument.",
    "start": "3135965",
    "end": "3141720"
  },
  {
    "text": "Simple, but cool. OK. So any vertex of\ndegree greater than k",
    "start": "3141720",
    "end": "3147619"
  },
  {
    "text": "must be in the vertex cover,\nwhich I was calling S. OK.",
    "start": "3147620",
    "end": "3153560"
  },
  {
    "text": "So delete that vertex and its\nincident edges, decrement k,",
    "start": "3153560",
    "end": "3159240"
  },
  {
    "text": "because we just used something. OK. So just keep doing this. Every time I see a vertex\nof degree more than k,",
    "start": "3159240",
    "end": "3166680"
  },
  {
    "text": "delete it, decrement k. Now I have a new graph\nand a new value of k. Look for any vertices whose\ndegree is more than k.",
    "start": "3166680",
    "end": "3174660"
  },
  {
    "text": "If I find one, delete\nit, repeat, repeat. Keep repeating until\nyou can't anymore. How much time is\nthis going to take?",
    "start": "3174660",
    "end": "3180680"
  },
  {
    "text": "I don't know. Most quadratic, right? I look at all the vertices. Look at their degrees.",
    "start": "3180680",
    "end": "3186760"
  },
  {
    "text": "I could look over all the\nedges, increment the degrees. In linear time, I can\nfind whether there's any vertex of\ndegree more than k.",
    "start": "3186760",
    "end": "3194000"
  },
  {
    "text": "Then delete it in linear time. Then try again. And this will happen to\nmost linear time many times",
    "start": "3194000",
    "end": "3199610"
  },
  {
    "text": "because I can only\ndelete a vertex once. So I delete at most v vertices. So overall running time here\nis like at most v times E,",
    "start": "3199610",
    "end": "3209095"
  },
  {
    "text": "polynomial. ",
    "start": "3209095",
    "end": "3218220"
  },
  {
    "text": "Probably if you're clever,\nuse a data structure to update degrees. You could do this\nin order v time.",
    "start": "3218220",
    "end": "3224510"
  },
  {
    "text": "But let's not be clever yet. All right.",
    "start": "3224510",
    "end": "3229900"
  },
  {
    "text": "So now, after I've done\nall of these reductions,",
    "start": "3229900",
    "end": "3235180"
  },
  {
    "text": "I have a graph where every\nvertex has degree at most k.",
    "start": "3235180",
    "end": "3240359"
  },
  {
    "text": "So it's like a\nbounded degree graph. ",
    "start": "3240360",
    "end": "3283580"
  },
  {
    "text": "Why do I care about a\nbounded degree graph? Remember, I drew this example,\nwhich was a star graph,",
    "start": "3283580",
    "end": "3289480"
  },
  {
    "text": "where n was large, but k was\nvery small. n was n, n was v, and k was 1.",
    "start": "3289480",
    "end": "3297869"
  },
  {
    "text": "Now a star graph is\nspecial because it has a very high degree vertex. In general, if I have a\nvertex of some degree, say k,",
    "start": "3297870",
    "end": "3306220"
  },
  {
    "text": "and I put it in the vertex\ncover, it covers k edges.",
    "start": "3306220",
    "end": "3312661"
  },
  {
    "text": "OK. So each vertex in S\ncovers at most k edges,",
    "start": "3312662",
    "end": "3324653"
  },
  {
    "text": "wherever the degree is. So that means you don't get\nmuch bang for your buck anymore.",
    "start": "3324654",
    "end": "3330127"
  },
  {
    "text": "We've already taken care of all\nthe high degree vertices where you get a lot of\nreward for putting one vertex in the cover.",
    "start": "3330127",
    "end": "3336349"
  },
  {
    "text": "Now this is the new value of k. It may have decremented\nfrom before.",
    "start": "3336350",
    "end": "3342039"
  },
  {
    "text": "Every vertex that we could\npossibly put in the set will only cover k edges.",
    "start": "3342040",
    "end": "3347180"
  },
  {
    "text": "Now we know that\nwe only get to put k more vertices into the set.",
    "start": "3347180",
    "end": "3353120"
  },
  {
    "text": "We know-- we're supposing\nthat sides of S is at most k.",
    "start": "3353120",
    "end": "3359510"
  },
  {
    "text": "So that means that the\nnumber of edges, size of E,",
    "start": "3359510",
    "end": "3366850"
  },
  {
    "text": "must be at most k squared. All right. Because every one I put into\nS covers at most k edges.",
    "start": "3366850",
    "end": "3373230"
  },
  {
    "text": "All of them have to be covered. And so k times k is k squared.",
    "start": "3373230",
    "end": "3379834"
  },
  {
    "text": "Hah, interesting. That means my graph is small. Now slight catch.",
    "start": "3379834",
    "end": "3385105"
  },
  {
    "text": "There might be a whole\nbunch of vertices that have no edges incident to them. So I need to delete\nisolated vertices.",
    "start": "3385105",
    "end": "3393971"
  },
  {
    "text": "Let's say, degree 0 vertices.  OK.",
    "start": "3393971",
    "end": "3399160"
  },
  {
    "text": "Degree 0 vertices-- you\nreally don't want to put those into your vertex cover. No point. They don't cover any edges.",
    "start": "3399160",
    "end": "3405059"
  },
  {
    "text": "So delete those. And now, I still may not\nhave a connected graph, but, in the worst case,\nI have a matching.",
    "start": "3405060",
    "end": "3413800"
  },
  {
    "text": "I know the total number of\nedges is at most case squared. That means the total\nnumber of vertices",
    "start": "3413800",
    "end": "3420190"
  },
  {
    "text": "is at most twice\nthat, 2k squared. So after all of\nthese operations,",
    "start": "3420190",
    "end": "3425560"
  },
  {
    "text": "I assumed that S\nwas size at most k.",
    "start": "3425560",
    "end": "3430660"
  },
  {
    "text": "And then if I do all\nof these operations, I get a graph with at most 2k\nsquared vertices, and at most",
    "start": "3430660",
    "end": "3437940"
  },
  {
    "text": "case k squared edges. So the total size\nof the graph, which I'm calling n, n which is\nsize of v plus size of E",
    "start": "3437940",
    "end": "3447090"
  },
  {
    "text": "is order k squared. 3k squared. And I assumed that there was\na vertex cover size at most k",
    "start": "3447090",
    "end": "3455819"
  },
  {
    "text": "throughout this. So what I do is I run this\nkernelization algorithm.",
    "start": "3455820",
    "end": "3461050"
  },
  {
    "text": "And I see-- is the graph\nthat I produced size at most 3k squared?",
    "start": "3461050",
    "end": "3466150"
  },
  {
    "text": "If it is, output it. That's a kernelized\nthing because it's small.",
    "start": "3466150",
    "end": "3471220"
  },
  {
    "text": "If it isn't, if the\ngraph I've produced is still too big, that must mean\nthat this assumption was wrong,",
    "start": "3471220",
    "end": "3476960"
  },
  {
    "text": "which means the answer to the\nvertex cover problem is no, there is no vertex\ncover of size at most k.",
    "start": "3476960",
    "end": "3481980"
  },
  {
    "text": "And so then I just\noutput a canonical no instance, like-- so I mean,\nthis is sort of outside--",
    "start": "3481980",
    "end": "3489010"
  },
  {
    "text": "but if the newly\nproduced graph-- I'll call it v prime plus E prime is\ngreater than 3 times k squared,",
    "start": "3489010",
    "end": "3505550"
  },
  {
    "text": "then output-- and\nhere I can actually give you one--\nlet's say, I'm going to output the graph which is a\nsingle edge with two vertices",
    "start": "3505550",
    "end": "3513130"
  },
  {
    "text": "and k equals 0. The answer to vertex cover\nin this instance is no.",
    "start": "3513130",
    "end": "3518530"
  },
  {
    "text": "So this is an example\nof a constant size, no representative. So either I get\nsomething that's small",
    "start": "3518530",
    "end": "3524970"
  },
  {
    "text": "and I output that, or\nit's big, in which case I output this thing, which is\nto say, nope, can't be done.",
    "start": "3524970",
    "end": "3531970"
  },
  {
    "text": "That's kernelization. So I've produced a quadratic\nsize graph, quadratic in k",
    "start": "3531970",
    "end": "3539060"
  },
  {
    "text": "in polynomial time.  Question?",
    "start": "3539060",
    "end": "3544384"
  },
  {
    "text": "No. Wow. So this is kernelization\nat its finest. A polynomial kernel.",
    "start": "3544384",
    "end": "3550730"
  },
  {
    "text": "Polynomial time. We get that down to something\nthe size of polynomial in k.",
    "start": "3550730",
    "end": "3555872"
  },
  {
    "text": "This is how you should-- if\nyou want to solve vertex cover, you might as well do\nthese reductions first, because they will\nsimplify your thing.",
    "start": "3555872",
    "end": "3562764"
  },
  {
    "text": "And now, if you happen to know\nyour vertex cover is small, then the graph will be small. So now we could run either\nof these algorithms.",
    "start": "3562764",
    "end": "3569650"
  },
  {
    "text": "OK. Presumably, we should\nrun the better one. But for fun, let's\nanalyze both of them.",
    "start": "3569650",
    "end": "3576309"
  },
  {
    "text": "OK. So I'm going to leave\nthe running times here. ",
    "start": "3576310",
    "end": "3584480"
  },
  {
    "text": "We're going to get a\nfaster vertex cover algorithm from a fixed parameter\ntractability perspective.",
    "start": "3584480",
    "end": "3591190"
  },
  {
    "text": "So here's a new FTP algorithm.",
    "start": "3591190",
    "end": "3602420"
  },
  {
    "text": "Two of them. First we kernelize.  OK.",
    "start": "3602420",
    "end": "3607580"
  },
  {
    "text": "We spent-- I guess--\norder vE time. Again, I think you can\nget that down to order v",
    "start": "3607580",
    "end": "3612880"
  },
  {
    "text": "without too much effort. Obvious. It's not totally obvious. It's a good exercise.",
    "start": "3612880",
    "end": "3619360"
  },
  {
    "text": "Be a good problem set problem. It's not on the problem set. Don't worry.",
    "start": "3619360",
    "end": "3624490"
  },
  {
    "text": "It could be a good\nfinal exam problem. Probably a little long.",
    "start": "3624490",
    "end": "3629770"
  },
  {
    "text": "All right. So now we could-- let's\nsay, option one-- let's",
    "start": "3629770",
    "end": "3635680"
  },
  {
    "text": "use the brute force\nalgorithm after that. ",
    "start": "3635680",
    "end": "3641940"
  },
  {
    "text": "The running time of that\nis E times v to the k. But now E is k squared.",
    "start": "3641940",
    "end": "3649990"
  },
  {
    "text": "And v is also order k squared. Let's not worry\nabout-- actually I",
    "start": "3649990",
    "end": "3655170"
  },
  {
    "text": "do have to worry about\nconstants here, because it's in the base of an exponent. So I do.",
    "start": "3655170",
    "end": "3661540"
  },
  {
    "text": "So we're going to get k\nsquared for the E term. And then v term is going\nto be 2 times k squared.",
    "start": "3661540",
    "end": "3672180"
  },
  {
    "text": "And that's going to be\nraised to the k-th power. OK. So I'll simplify a little bit.",
    "start": "3672180",
    "end": "3678140"
  },
  {
    "text": "This is like 2 to the k\ntimes-- I guess-- k to the 2k.",
    "start": "3678140",
    "end": "3683279"
  },
  {
    "text": "OK. It's k to the k squared. ",
    "start": "3683280",
    "end": "3688600"
  },
  {
    "text": "Not bad. Overall running time\nis vE plus this. ",
    "start": "3688600",
    "end": "3696056"
  },
  {
    "text": "It's a function of k. It's exponential.  Good. We have a better algorithm.",
    "start": "3696056",
    "end": "3701599"
  },
  {
    "text": "We have this v times 2\nto the k running time, so we might as\nwell use that one. But the point is--\nonce you kernelize,",
    "start": "3701600",
    "end": "3707400"
  },
  {
    "text": "you can use pretty\nstupid algorithms, and you still get really\ngood running times. OK. We'll get a slightly\nbetter running time",
    "start": "3707400",
    "end": "3713099"
  },
  {
    "text": "using the bounded-tree-search. ",
    "start": "3713100",
    "end": "3722885"
  },
  {
    "text": "So if we use\nbounded-tree-search, we have v. v is 2k squared.",
    "start": "3722885",
    "end": "3728301"
  },
  {
    "text": "So here the constant\ndoesn't matter, because there's no exponent. And then we have\ntimes 2 to the k.",
    "start": "3728301",
    "end": "3733770"
  },
  {
    "text": "So we're going to get k squared\ntimes 2 to the k algorithms.",
    "start": "3733770",
    "end": "3741120"
  },
  {
    "text": "Kind of funny symmetry here. 2 and k are switching roles. Of course, the 2 to\nthe k is the big term.",
    "start": "3741120",
    "end": "3747210"
  },
  {
    "text": "But now it's only\nsingularly exponential in k. This thing is like\n2 to the k log k.",
    "start": "3747210",
    "end": "3752710"
  },
  {
    "text": "This thing is only 2 to the k. So it's better. And this is like k factorial. And this is just 2 to the k.",
    "start": "3752710",
    "end": "3758940"
  },
  {
    "text": "So it's a big improvement. This will be a much more\npractical algorithm. So we run the\nkernelization, then",
    "start": "3758940",
    "end": "3764720"
  },
  {
    "text": "we run the\nbounded-tree-search algorithm. And so the total running time\nis vE plus k squared 2 to the k.",
    "start": "3764720",
    "end": "3781200"
  },
  {
    "text": "The story doesn't end here. There are dozens\nof papers about how to solve vertex cover from\nfixed parameter tractability",
    "start": "3781200",
    "end": "3787490"
  },
  {
    "text": "perspective. The best one so far--\nI'm not going to cover--",
    "start": "3787490",
    "end": "3795446"
  },
  {
    "text": "but it is based\non kernelization. Just more rules. And you get k v\nplus 1.274 to the k.",
    "start": "3795446",
    "end": "3809290"
  },
  {
    "text": "And some cover's better\nthan 2, but very similar. ",
    "start": "3809290",
    "end": "3815050"
  },
  {
    "text": "That's vertex cover. If you have a vertex\ncover instance, and you know that it's going to\nhave a relatively small vertex",
    "start": "3815050",
    "end": "3820150"
  },
  {
    "text": "cover, these are the\nalgorithms you should use. ",
    "start": "3820150",
    "end": "3826440"
  },
  {
    "text": "Any questions? This ends our\nvertex cover story.",
    "start": "3826440",
    "end": "3831860"
  },
  {
    "text": "But the last thing I want to do\nis connect up these two areas. Last class we talked about\napproximation algorithms.",
    "start": "3831860",
    "end": "3838140"
  },
  {
    "text": "This class we talked about\nfixed parameter algorithms. They're actually\nclosely related.",
    "start": "3838140",
    "end": "3843420"
  },
  {
    "text": "And so, for example, we will\nget a fixed parameter algorithm to subset sum, using what\nwe already had last lecture.",
    "start": "3843420",
    "end": "3853500"
  },
  {
    "start": "3853500",
    "end": "3859806"
  },
  {
    "text": "So, so far today, I've\nbasically been talking about decision problems. But let's think a little bit\nabout optimization problems.",
    "start": "3859806",
    "end": "3866250"
  },
  {
    "start": "3866250",
    "end": "3886800"
  },
  {
    "text": "So take your favorite\noptimization problem. Like any of the ones\nfrom last lecture.",
    "start": "3886800",
    "end": "3893220"
  },
  {
    "start": "3893220",
    "end": "3899380"
  },
  {
    "text": "And let's assume that\nthe optimal solution value-- the thing we're\ntrying to optimize, minimize,",
    "start": "3899380",
    "end": "3906210"
  },
  {
    "text": "or maximize-- is an integer. Assume that OPT is an integer.",
    "start": "3906210",
    "end": "3911673"
  },
  {
    "text": "OK. Now let's look at\nthe decision problem.",
    "start": "3911674",
    "end": "3918380"
  },
  {
    "text": "Whenever you have an\noptimization problem, you can convert it into\na decision problem.",
    "start": "3918380",
    "end": "3924460"
  },
  {
    "text": "You can convert it into a few. For example, OPT less than or\nequal to k, or OPT greater than",
    "start": "3924460",
    "end": "3931050"
  },
  {
    "text": "or equal to k. They're all going to turn\nout to work the same.",
    "start": "3931050",
    "end": "3936264"
  },
  {
    "text": "OPT equal k would also work. Now that's a decision\nproblem, but what I want",
    "start": "3936264",
    "end": "3942410"
  },
  {
    "text": "is a parameterized\ndecision problem. What should my parameter be? k.",
    "start": "3942410",
    "end": "3948485"
  },
  {
    "text": "All right. That's the obvious parameter. ",
    "start": "3948486",
    "end": "3956320"
  },
  {
    "text": "In some sense, we're\nparameterizing by OPT, but we're adding a\nlayer of indirection. We're saying, well,\nOPT, but we want",
    "start": "3956320",
    "end": "3962520"
  },
  {
    "text": "to decide whether OPT is\nless than or equal to k. And let's parameterize by k.",
    "start": "3962520",
    "end": "3968260"
  },
  {
    "text": "That's similar flavor to what\nwe had with vertex cover. If we started with minimum\nvertex cover, and converted it.",
    "start": "3968260",
    "end": "3976580"
  },
  {
    "text": "Cool. Here's the theorem. ",
    "start": "3976580",
    "end": "3986032"
  },
  {
    "text": "This is not going to be as\nstrong as the other things we've seen. No equivalence here. ",
    "start": "3986032",
    "end": "4016589"
  },
  {
    "text": "So it's a one way implication. And I haven't defined this term\nyet, but it's similar to one",
    "start": "4016590",
    "end": "4022210"
  },
  {
    "text": "we saw last class. If the optimization problem\nthat we started with has an efficient PTAS, an\nefficient Polynomial Time",
    "start": "4022210",
    "end": "4030320"
  },
  {
    "text": "Approximation Scheme, then\nthe decision problem-- you get from here-- is\nfixed parameter tractable",
    "start": "4030320",
    "end": "4036350"
  },
  {
    "text": "with respect to k. OK. So what does EPTAS mean? It's going to look familiar.",
    "start": "4036350",
    "end": "4043640"
  },
  {
    "text": "We're going to take an\narbitrary function of 1 over epsilon times a\nfixed polynomial in n.",
    "start": "4043640",
    "end": "4052579"
  },
  {
    "text": "So last time we\ntalked about PTAS we could have-- you could have\nsomething like n to the f of 1",
    "start": "4052580",
    "end": "4059890"
  },
  {
    "text": "over epsilon. I'm going to consider that\nbad, as you might imagine, from a fixed parameter\ntractability perspective.",
    "start": "4059890",
    "end": "4065670"
  },
  {
    "text": "Better would be some function,\npossibly exponential, if 1 over epsilon\ntimes polynomial in n.",
    "start": "4065670",
    "end": "4072390"
  },
  {
    "text": "This is going to be good from\na fixed parameter perspective. Although it's about\napproximation algorithms, not about exact algorithms.",
    "start": "4072390",
    "end": "4078900"
  },
  {
    "text": "Of course, even\nbetter is the FPTASs we saw last time, which is\npolynomial 1 over epsilon times",
    "start": "4078900",
    "end": "4084390"
  },
  {
    "text": "polynomial in n. That's ideal. If you have an FPTAS,\nit is also an EPTAS.",
    "start": "4084390",
    "end": "4089820"
  },
  {
    "text": "You just remove-- or you\njust add one more stroke to the first letter. And you got an EPTAS.",
    "start": "4089820",
    "end": "4096370"
  },
  {
    "text": "And last class we\nactually saw an EPTAS. For subset sum, we saw 2 to\nthe 1 over epsilon times n.",
    "start": "4096370",
    "end": "4103817"
  },
  {
    "text": "Now, in fact, for that\nproblem, there's an FPTAS. Even better. But you can see\nfrom last lecture why it's nice to have an\nexponential dependence on 1",
    "start": "4103818",
    "end": "4111520"
  },
  {
    "text": "over epsilon. And what this is saying\nis you can do that as long as that\nexponential dependence is separated from the n part.",
    "start": "4111520",
    "end": "4118660"
  },
  {
    "text": "If it's multiplicatively\nor additively separated, as you might imagine, it's\nthe same thing, from n,",
    "start": "4118660",
    "end": "4125040"
  },
  {
    "text": "then we call this\nan efficient PTAS. Not fully, not quite as\ngood as an FPTAS, but close.",
    "start": "4125040",
    "end": "4131410"
  },
  {
    "text": "And as long as you\nhave such a thing, you can convert it into an\nFPT algorithm for the decision problem.",
    "start": "4131410",
    "end": "4137870"
  },
  {
    "text": "The way this is typically\nused-- so this tells us we get an FPT algorithm\nfor subset sum.",
    "start": "4137870",
    "end": "4143040"
  },
  {
    "text": "In fact, because\nthere's an FPTAS, we get a pseudo\npolynomial time algorithm,",
    "start": "4143040",
    "end": "4148439"
  },
  {
    "text": "which is in some sense better. Anyway. The way this theorem is usually\nused is in the contrapositive.",
    "start": "4148439",
    "end": "4154219"
  },
  {
    "text": "What this tells us is that if we\ncan find a problem that is not FPT-- and there's a whole\ntheory like NP completeness",
    "start": "4154220",
    "end": "4161120"
  },
  {
    "text": "for showing the problems\nare almost certainly not fixed parameter\ntractable-- then we know that there is not an EPTAS.",
    "start": "4161120",
    "end": "4168627"
  },
  {
    "text": "And this is the state\nof the art for proving that these kinds of\nalgorithms do not exist. Typically, you look at it from\na fixed parameter perspective,",
    "start": "4168627",
    "end": "4175960"
  },
  {
    "text": "and show that probably\ndoesn't exist. Then you get that this\nprobably doesn't exist. OK. Let's prove this theorem.",
    "start": "4175960",
    "end": "4181734"
  },
  {
    "text": "It's, again, really easy.  But a nice connection\nbetween these two worlds.",
    "start": "4181735",
    "end": "4187759"
  },
  {
    "start": "4187760",
    "end": "4199922"
  },
  {
    "text": "All right.  So there are two cases--\nthe optimization problem",
    "start": "4199922",
    "end": "4206610"
  },
  {
    "text": "we're thinking about could be\na minimization or maximization problem. Let's say it's maximization,\njust to be concrete.",
    "start": "4206610",
    "end": "4214675"
  },
  {
    "text": "It won't make too\nmuch difference, but it will make\na tiny difference in order of-- or the\ninequality directions.",
    "start": "4214675",
    "end": "4221285"
  },
  {
    "text": " OK. So what we're going to do.",
    "start": "4221285",
    "end": "4228580"
  },
  {
    "text": "So we're given an EPTAS,\nand we want to solve FPT. We want an FPT algorithm.",
    "start": "4228580",
    "end": "4235760"
  },
  {
    "text": "So what do we do? Well, an algorithm is going\nto be to run that EPTAS. That's sort of the\nonly thing we can do.",
    "start": "4235760",
    "end": "4241126"
  },
  {
    "text": "Now the EPTAS-- this is\nan approximation scheme. It has an extra input\nwhich is epsilon.",
    "start": "4241126",
    "end": "4247120"
  },
  {
    "text": "We need to choose epsilon,\nbecause we're not-- we're trying to\nsolve it exactly. But there's no epsilon\nin that problem,",
    "start": "4247120",
    "end": "4252800"
  },
  {
    "text": "so we got to make one up. Let's run the EPTAS with--\nanyone have good intuition?",
    "start": "4252800",
    "end": "4261250"
  },
  {
    "text": "What should epsilon be? ",
    "start": "4261250",
    "end": "4268438"
  },
  {
    "text": "Yeah. Remind you of this. ",
    "start": "4268438",
    "end": "4279730"
  },
  {
    "text": "Tricky.  We want epsilon to be small.",
    "start": "4279730",
    "end": "4285090"
  },
  {
    "text": "Yeah. AUDIENCE: It should be 1 over k. ERIK DEMAINE: 1 over\nk is almost right. Anything less than\nthat would work.",
    "start": "4285090",
    "end": "4292369"
  },
  {
    "text": "So I'll use 1 over 2k, but 1\nover k plus 1 would also work.",
    "start": "4292370",
    "end": "4298990"
  },
  {
    "text": "Or anything a little\nbit-- 1 over k-- yeah-- 1 over k plus\n.00001 something.",
    "start": "4298990",
    "end": "4309230"
  },
  {
    "text": "Anything a little bit less than\n1 over k will turn out to work. So, why?",
    "start": "4309230",
    "end": "4315230"
  },
  {
    "text": "So first of all, how\nmuch time does this take? Well, we were given\nthis running time.",
    "start": "4315230",
    "end": "4322820"
  },
  {
    "text": "1 over this is 2k. So this is going to take f of\n2k time times polynomial in n.",
    "start": "4322820",
    "end": "4331110"
  },
  {
    "text": " OK. We need to connect E\nand k, because we're",
    "start": "4331110",
    "end": "4336810"
  },
  {
    "text": "given-- sorry-- epsilon\nand k, because we're given something whose running\ntime depends on epsilon not k.",
    "start": "4336810",
    "end": "4343204"
  },
  {
    "text": "Now we're setting\nepsilon in terms of k, so now the running time is a\nfunction of k, not epsilon.",
    "start": "4343204",
    "end": "4348980"
  },
  {
    "text": "And then times n. So this is good. This looks like an\nFPT running time.",
    "start": "4348980",
    "end": "4354910"
  },
  {
    "text": "I claim we found\nthat the answer. ",
    "start": "4354910",
    "end": "4360460"
  },
  {
    "text": "OK. This is maybe the\nsurprising part. You had good intuition here. And the intuition is\njust that-- if you're",
    "start": "4360460",
    "end": "4367580"
  },
  {
    "text": "this close to optimal, and\noptimal is actually an integer, and you found an integer, then\nyou're going to be less than 1",
    "start": "4367580",
    "end": "4375980"
  },
  {
    "text": "away, which means you're\nactually the same thing. OK. But let's do it more formally. ",
    "start": "4375980",
    "end": "4391350"
  },
  {
    "text": "So we're within a 1\nplus epsilon factor. I'm going to call the\nepsilon part relative error.",
    "start": "4391350",
    "end": "4396690"
  },
  {
    "text": "All right. That's how much it gets\nmultiplied by OPT in order to compute the error bound.",
    "start": "4396690",
    "end": "4404520"
  },
  {
    "text": "So the relative\nerror is epsilon. Epsilon is-- I guess is--\nat most epsilon-- epsilon is",
    "start": "4404520",
    "end": "4412010"
  },
  {
    "text": "1 over 2k, which all\nI'm going to need is that this is strictly\nless than 1 over k.",
    "start": "4412010",
    "end": "4417800"
  },
  {
    "text": " So this means if I look\nat absolute error--",
    "start": "4417800",
    "end": "4427577"
  },
  {
    "text": "so in case you're not\nfamiliar-- relative error is I take my approximate\nsolution-- I subtract off,",
    "start": "4427577",
    "end": "4436012"
  },
  {
    "text": "let's say the optimal\nsolution, did I get this right? This is a maximization problem. So yeah, my solution's\npresumably-- no,",
    "start": "4436012",
    "end": "4442430"
  },
  {
    "text": "it's going to be the\nother way around. For maximization\nproblem, it's going to be-- the optimal\ncould be bigger",
    "start": "4442430",
    "end": "4447460"
  },
  {
    "text": "than me, so I take\nthat difference-- this is called absolute error. OK. And relative error is when\nI just divide that by OPT.",
    "start": "4447460",
    "end": "4455640"
  },
  {
    "text": "That's relative error. So I have this one part already. So usually you state it in\nterms of 1 plus epsilon.",
    "start": "4455640",
    "end": "4461610"
  },
  {
    "text": "If you state it in\nterms of relative error, the 1 disappears. You just get epsilon. The absolute error\nwhich is OPT minus APX",
    "start": "4461610",
    "end": "4468820"
  },
  {
    "text": "is I take the relative error\nand I multiply it by OPT.",
    "start": "4468820",
    "end": "4474012"
  },
  {
    "text": "OK. So relative error is\ngoing to be less than 1 if OPT is-- I guess--\ngreater than or equal to k?",
    "start": "4474013",
    "end": "4488362"
  },
  {
    "text": "I have less than in my notes. But if OPT is greater\nthan or equal to k,",
    "start": "4488362",
    "end": "4493880"
  },
  {
    "text": "then absolute error\nis less than 1. Right? I hope.",
    "start": "4493880",
    "end": "4500190"
  },
  {
    "text": "Let's check. The relative error is\nactually OPT divided by k.",
    "start": "4500190",
    "end": "4506330"
  },
  {
    "text": "Oops. No, I've got it the\nwrong way around. It's correct in my notes. OK. Relative error is this thing.",
    "start": "4506330",
    "end": "4513219"
  },
  {
    "text": "It's going to be strictly\nless than OPT divided by k. This thing times OPT. OK.",
    "start": "4513220",
    "end": "4518660"
  },
  {
    "text": "So as long as OPT is\nless than or equal to k, this thing will be\nstrictly less than 1. ",
    "start": "4518660",
    "end": "4525840"
  },
  {
    "text": "That's good. OPT error less than\n1 for an integer means that we actually\nhave the same value.",
    "start": "4525840",
    "end": "4532637"
  },
  {
    "text": "I have that written\ndown more formally. So let's go here. ",
    "start": "4532638",
    "end": "4540869"
  },
  {
    "text": "So if we find an integral\nsolution-- of value-- values",
    "start": "4540870",
    "end": "4556220"
  },
  {
    "text": "the objective function\nwe're trying to maximize. Let's say we achieve something\nvalue less than or equal to k.",
    "start": "4556220",
    "end": "4566350"
  },
  {
    "text": " Which it better be about if\nOPT is less than or equal to k.",
    "start": "4566350",
    "end": "4574090"
  },
  {
    "text": "Then OPT-- OK-- this is\nbasically doing the computation",
    "start": "4574090",
    "end": "4597310"
  },
  {
    "text": "again in another way. We had 1 plus epsilon. Epsilon's chosen\nto be 1/2 1 over k.",
    "start": "4597310",
    "end": "4603460"
  },
  {
    "text": "And then k was the solution\nvalue that we found. And so we have this relation\nbetween OPT and the thing.",
    "start": "4603460",
    "end": "4611510"
  },
  {
    "text": "And therefore-- and this works\nout to exactly k plus 1/2.",
    "start": "4611510",
    "end": "4616969"
  },
  {
    "text": "So this is, again, strictly\nless than k plus 1. And so if we found-- we\nassumed that OPT was less than",
    "start": "4616970",
    "end": "4625095"
  },
  {
    "text": "or equal to k. And so now it must\nactually be equal to k, because there are no integers\nbetween k and k plus 1/2.",
    "start": "4625095",
    "end": "4632570"
  },
  {
    "text": "OK. I probably could have\ndone that shorter.  So when we have an EPTAS, we\nexactly get an FPT algorithm.",
    "start": "4632570",
    "end": "4641380"
  },
  {
    "text": "And that's-- the\nreverse does not hold. There are some problems\nthat have FPT algorithms but do not have EPTASes.",
    "start": "4641380",
    "end": "4648930"
  },
  {
    "text": "But, it's something, and it\nconnects these two fields. And that's all we'll say about\nfixed parameter algorithms.",
    "start": "4648930",
    "end": "4655170"
  },
  {
    "text": "Any final questions? Cool. See you next week.",
    "start": "4655170",
    "end": "4660950"
  },
  {
    "start": "4660950",
    "end": "4662658"
  }
]