[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6060"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or to\nview additional materials",
    "start": "6060",
    "end": "12700"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "12700",
    "end": "26789"
  },
  {
    "text": "PROFESSOR: All right,\nguys, let's get started. So today, we're going\nto talk about a very different and principled\napproach to building secure web",
    "start": "26790",
    "end": "33944"
  },
  {
    "text": "applications. And it's going to be about\na system called Ur/Web. And right now,\nour guest lecturer is the author of the\nsystem, Adam Chlipala,",
    "start": "33944",
    "end": "39769"
  },
  {
    "text": "who's a professor at\nMIT, is going to tell you more about the system he built. ADAM CHLIPALA: All right,\nso I want to get to a demo",
    "start": "39769",
    "end": "48830"
  },
  {
    "text": "as soon as possible. But before that, I\njust want to spend some slides setting up part of\nthe context about this system.",
    "start": "48830",
    "end": "54890"
  },
  {
    "text": "And you've probably gotten\nsome of that context already from the\ndraft paper that was the reading for this class.",
    "start": "54890",
    "end": "63740"
  },
  {
    "text": "So what is Ur/Web? It's always good to start\nout by explaining what the name of something means.",
    "start": "63740",
    "end": "68885"
  },
  {
    "text": "So Ur/Web, first it's\na programming language for building web applications.",
    "start": "68885",
    "end": "74030"
  },
  {
    "text": "That's what the Web\npart of the name means. And it's sort of a\nfull stack system. It does everything you need to\ndo to build web applications.",
    "start": "74030",
    "end": "82640"
  },
  {
    "text": "And Ur is a new general\npurpose functional programming language that is\nused to implement",
    "start": "82640",
    "end": "88950"
  },
  {
    "text": "these web specific features.  And the whole point of\nUr/Web is that instead",
    "start": "88950",
    "end": "96340"
  },
  {
    "text": "of having a general purpose\nprogramming language and then having a library\nor a traditional framework for building web\napplications, it's",
    "start": "96340",
    "end": "102539"
  },
  {
    "text": "all integrated into a customized\nprogramming language in Ur/Web. And it's a language that\ninvolves compilation, not",
    "start": "102540",
    "end": "109690"
  },
  {
    "text": "interpretation at run time. And the compiler in some\nsense understands what a web application is supposed to do.",
    "start": "109690",
    "end": "115400"
  },
  {
    "text": "And it will point out\nmistakes that you're making that a conventional\ncompiler, for say Java,",
    "start": "115400",
    "end": "120700"
  },
  {
    "text": "would not be able to\nrealize where mistakes. So there are really\nthree main principles",
    "start": "120700",
    "end": "126619"
  },
  {
    "text": "that I was trying to follow\nin designing this language. The middle one is most\nrelevant in this context.",
    "start": "126620",
    "end": "133849"
  },
  {
    "text": "But they are programmer\nproductivity, security, and performance. And the last part, especially\non the server side, because that",
    "start": "133850",
    "end": "142300"
  },
  {
    "text": "seemed more important\nfor scaling reasons. In many cases, the users\nof your application won't notice small performance\nissues on the client side.",
    "start": "142300",
    "end": "150771"
  },
  {
    "text": "But a small issue\non the server side could force you to buy many\nmore servers than you would have otherwise. ",
    "start": "150771",
    "end": "157950"
  },
  {
    "text": "And at this point, there\nare some users of Ur/Web-- not nearly as much as pretty\nmuch any other language",
    "start": "157950",
    "end": "164380"
  },
  {
    "text": "you probably think of. But there's at least this one\ncommercial web application, which is an RSS feed reader that\nsupports such exotic features",
    "start": "164380",
    "end": "173420"
  },
  {
    "text": "as displaying comments. And there's the URL chosen by a\nnon-native English speaker who",
    "start": "173420",
    "end": "179060"
  },
  {
    "text": "regrets it now. It's called BazQux Reader, as a\ncombination of common medicine tactic variables from\nthe hacker community.",
    "start": "179060",
    "end": "186840"
  },
  {
    "text": "And there are a few\nthousand paying users. And it looks like that--\nmuch nicer than anything",
    "start": "186840",
    "end": "192060"
  },
  {
    "text": "I know how to make with CSS. But here's a proof that it\ncan be done using Ur/Web.",
    "start": "192060",
    "end": "197379"
  },
  {
    "text": " Feel free to jump in with\nquestions at any point,",
    "start": "197380",
    "end": "202829"
  },
  {
    "text": "though I probably haven't\ngotten to the point yet that provokes many questions. So the basic sales\npitch for Ur/Web",
    "start": "202829",
    "end": "209504"
  },
  {
    "text": "is that it has a very high\nlevel programming model, which is very different\nfrom, say, Django, which I know you spent some\ntime reading about or talking",
    "start": "209505",
    "end": "215810"
  },
  {
    "text": "about in class. And it has a good\nsecurity story.",
    "start": "215810",
    "end": "221362"
  },
  {
    "text": "Some features you\nwant for security are really integrated\ninto the system so that you would really have\nto work hard to avoid inheriting",
    "start": "221362",
    "end": "228340"
  },
  {
    "text": "these security benefits. And I'll say more about\nthe detail shortly. And also, the server\nside performance",
    "start": "228340",
    "end": "233410"
  },
  {
    "text": "is unusually good, even\namong the popular tools for building web\napplications that you're more",
    "start": "233410",
    "end": "238790"
  },
  {
    "text": "likely to have heard of before. And the caveat is\nthat we probably",
    "start": "238790",
    "end": "246180"
  },
  {
    "text": "need to have internalized\nthe big ideas of functional\nprogramming languages like Haskell before a\nprogrammer's ready to start",
    "start": "246180",
    "end": "253890"
  },
  {
    "text": "using Ur/Web. And looking at the questions\nand answers for this class,",
    "start": "253890",
    "end": "259109"
  },
  {
    "text": "maybe a fifth of\nyou were complaining about the functional\nprogramming parts of the paper",
    "start": "259110",
    "end": "265380"
  },
  {
    "text": "being hard to follow. I apologize. There are just so\nmany good ideas",
    "start": "265380",
    "end": "270539"
  },
  {
    "text": "in the world of\nfunctional programming that it's hard not to\nstart from that point and add more cool\nstuff on top of that. And I will try to\navoid any requirement",
    "start": "270540",
    "end": "278110"
  },
  {
    "text": "to know that material\nto follow what I'll be doing in class today.",
    "start": "278110",
    "end": "285240"
  },
  {
    "text": "So the programming model\nis really closely connected to static typing. And that's not just\nstatic typing like",
    "start": "285240",
    "end": "292060"
  },
  {
    "text": "in, say, Java, which has\na relatively inexpressive clunky type system,\nbut static typing like in Haskell or OCaml.",
    "start": "292060",
    "end": "298460"
  },
  {
    "text": "And these types\nare one of the ways that the compiler\nunderstands what you're doing and catches mistakes\nin your program.",
    "start": "298460",
    "end": "305190"
  },
  {
    "text": "And it turns out that\nthe core Ur language that Ur/Web is built on top\nof has a very expressive static type system.",
    "start": "305190",
    "end": "311090"
  },
  {
    "text": "So many of the things\nthat Ur/Web does are actually just\nexposed as libraries with no special\ncompiler support.",
    "start": "311090",
    "end": "316630"
  },
  {
    "text": "For instance, we'll teach the\ncompiler how to type check SQL queries without actually\nbuilding the typing rules",
    "start": "316630",
    "end": "323860"
  },
  {
    "text": "of SQL into the compiler. They can be encoded as a library\nand use a standard type checker",
    "start": "323860",
    "end": "329310"
  },
  {
    "text": "to make sure your SQL queries\nare following the rules of SQL. ",
    "start": "329310",
    "end": "336949"
  },
  {
    "text": "Most relevant in this\ncontext, the security story at a high level-- most of\nthe most common security",
    "start": "336950",
    "end": "344200"
  },
  {
    "text": "vulnerabilities are impossible\nby construction in Ur/Web. You will have to\nexplicitly enable scary",
    "start": "344200",
    "end": "351400"
  },
  {
    "text": "looking flag names to be\nallowed to do most of the most awful things you can do\nin a web application,",
    "start": "351400",
    "end": "357550"
  },
  {
    "text": "like no cross site scripting\nvulnerabilities unless you really invoke some black\nmagic, say, by using",
    "start": "357550",
    "end": "364610"
  },
  {
    "text": "the foreign function interface. And there are a few other\nsecurity-specific features",
    "start": "364610",
    "end": "371129"
  },
  {
    "text": "that I'll highlight later. And the performance\nis also very good.",
    "start": "371130",
    "end": "376540"
  },
  {
    "text": "The compiler is, first of all,\na domain specific compiler",
    "start": "376540",
    "end": "381790"
  },
  {
    "text": "for a web application. So it understands what the web\napplication is doing and is able to optimize some things\nthat a more general compiler",
    "start": "381790",
    "end": "388800"
  },
  {
    "text": "wouldn't catch. And usually the\ncode that comes out of this compiler that\nruns on the server is native code,\nwhich is very, very",
    "start": "388800",
    "end": "396100"
  },
  {
    "text": "competitive with what you might\nbother to write by hand in C.",
    "start": "396100",
    "end": "401450"
  },
  {
    "text": "And the performance\ncosts that there are compared to\nother approaches tend to have to do with the\nconcurrency model, which",
    "start": "401450",
    "end": "407630"
  },
  {
    "text": "makes the programmer's\nlife easier at some cost in performance. And I'll say a little bit\nmore about that in a moment.",
    "start": "407630",
    "end": "413155"
  },
  {
    "text": " Here's a quick plug for this\nweb framework benchmarking",
    "start": "413155",
    "end": "419960"
  },
  {
    "text": "initiative that is\nrun by a third party. This is a screenshot of\nthe results of the most",
    "start": "419960",
    "end": "425750"
  },
  {
    "text": "recent round where a number of\ndifferent web programming tasks were completed in many\ndifferent frameworks,",
    "start": "425750",
    "end": "431870"
  },
  {
    "text": "and they were compared pretty\nmuch exclusively on performance so far. And here you can\nsee Ur/Web sitting",
    "start": "431870",
    "end": "438780"
  },
  {
    "text": "at fourth out of about 60\nframeworks on this benchmark. And there's been\nsome improvements",
    "start": "438780",
    "end": "444889"
  },
  {
    "text": "to the Ur/Web compiler since\nthis screenshot was taken. And I expect in the\nnext round it'll",
    "start": "444890",
    "end": "449960"
  },
  {
    "text": "move up a little bit higher. But basically, already this\nis a simple example using",
    "start": "449960",
    "end": "455880"
  },
  {
    "text": "SQL to generate HTML pages. You get about 100,000\nrequests per second",
    "start": "455880",
    "end": "460970"
  },
  {
    "text": "from the Ur/Web\nserver, which is going to be just plenty for\nmost applications. So sort of maybe the\nimportant takeaway message",
    "start": "460970",
    "end": "468940"
  },
  {
    "text": "from this slide in this class is\nthat you can adopt a high level model that makes security easier\nto achieve without just giving",
    "start": "468940",
    "end": "477270"
  },
  {
    "text": "up all the performance that you\nwould expect to get from more mainstream techniques. ",
    "start": "477270",
    "end": "484840"
  },
  {
    "text": "All right, so let me start\nout by giving my cartoon impression of the way\nweb programmers think about writing web applications\nin mainstream frameworks today.",
    "start": "484840",
    "end": "492885"
  },
  {
    "text": "And then I'll show the\ndifferent perspective that Ur/Web provides, where\nsome of the things that can go wrong at this level\ngiven the abstractions that",
    "start": "492885",
    "end": "500520"
  },
  {
    "text": "are exposed can no longer\ngo wrong by construction. So the basic cartoon picture is\nthere's a web server out there.",
    "start": "500520",
    "end": "506740"
  },
  {
    "text": "And it's sort of in charge\nof the whole process of your application. And there's a whole fleet\nof browsers out there",
    "start": "506740",
    "end": "513049"
  },
  {
    "text": "that are going to\ninteract with that server. It'll have some state\nthat winds up effectively shared across all these\nbrowsers through their contact",
    "start": "513049",
    "end": "520349"
  },
  {
    "text": "with the server. So the usual picture\nis that the browser starts interacting\nwith the web server",
    "start": "520350",
    "end": "526060"
  },
  {
    "text": "by sending it an HTTP\nrequest that includes some URLs embedded in it.",
    "start": "526060",
    "end": "531320"
  },
  {
    "text": "And then the web\nserver throws back, again, the HTTP and HTML page. And there are some\nURLs embedded in that,",
    "start": "531320",
    "end": "537305"
  },
  {
    "text": "which can be used to decide\nwhich request to make the web server in the future.",
    "start": "537305",
    "end": "542760"
  },
  {
    "text": "This web server\nmight also be talking to a database that provides\na persistent store that is shared across all the\nusers of the application.",
    "start": "542760",
    "end": "550170"
  },
  {
    "text": "One popular protocol to\nspeak between the web server and the database is SQL.",
    "start": "550170",
    "end": "555870"
  },
  {
    "text": "That's what I'll be focusing\non talking about Ur/Web. And also, with modern\nweb applications,",
    "start": "555870",
    "end": "564390"
  },
  {
    "text": "it's not just the one\npage at a time model where whenever anything\nhas to change on the page",
    "start": "564390",
    "end": "569610"
  },
  {
    "text": "you make a new\nrequest to the server and then replace the\nwhole page of the unit. There's this Ajax\nstyle where the browser",
    "start": "569610",
    "end": "575424"
  },
  {
    "text": "within a single page\nview will sometimes make extra HTTP requests\nto the web server and receive responses that\nare processed programmatically",
    "start": "575424",
    "end": "582390"
  },
  {
    "text": "in a customized way. And this often uses\nrepresentations like XML and JSON\nand other simple wire",
    "start": "582390",
    "end": "589070"
  },
  {
    "text": "formats for exchanging\ndata between the client and the server.",
    "start": "589070",
    "end": "594399"
  },
  {
    "text": "And then when the browser\ngets back that response, there's some\nJavaScript code running there, which implements\narbitrary logic for controlling",
    "start": "594400",
    "end": "601440"
  },
  {
    "text": "the UI that we're\ndisplaying to the user. And the way this works is\nthat this JavaScript code can read the responses\nthat the server has given",
    "start": "601440",
    "end": "608200"
  },
  {
    "text": "to those different Ajax calls. And then it can modify the\npage that's displayed basically",
    "start": "608200",
    "end": "614480"
  },
  {
    "text": "by mutating a global variable\nthat stands for the page. And any part of the\nprogram can have",
    "start": "614480",
    "end": "621170"
  },
  {
    "text": "arbitrary effects on this global\nvariable that is the page. And often, parts of\nthe page are looked up",
    "start": "621170",
    "end": "627230"
  },
  {
    "text": "by string IDs that are annotated\non nodes of the tree that's describing the document. ",
    "start": "627230",
    "end": "634000"
  },
  {
    "text": "And finally, one more\ncomplication-- sometimes we want to allow what feels\nlike the web server contacting",
    "start": "634000",
    "end": "640730"
  },
  {
    "text": "the browser without prompting. So say there's a\nnew email message. The web server wants to tell\nthe browser, new message.",
    "start": "640730",
    "end": "648260"
  },
  {
    "text": "So there are a variety of\nways of doing this involving acronyms like Comet\nand WebSockets",
    "start": "648260",
    "end": "653610"
  },
  {
    "text": "that really look a lot like the\nbrowser contacting the server. It's the same sort\nof thing conceptually",
    "start": "653610",
    "end": "659209"
  },
  {
    "text": "in the other direction. All right, so I want to\nbring back on the screen",
    "start": "659210",
    "end": "665940"
  },
  {
    "text": "all these protocols\nand languages, highlight some parts\nin yellow here.",
    "start": "665940",
    "end": "671630"
  },
  {
    "text": "Having read the\npaper, does anyone have a guess about what is\nthe commonality between all these highlighted parts here\nfrom a security perspective?",
    "start": "671630",
    "end": "679465"
  },
  {
    "text": " Yes.",
    "start": "679465",
    "end": "684690"
  },
  {
    "text": "STUDENT: They're all strings. So you can put whatever\nyou want in them. ADAM CHLIPALA: Right, in\nthe mainstream approaches",
    "start": "684690",
    "end": "690410"
  },
  {
    "text": "to web application programming,\nall of these things are strings. And the programming\nlanguage doesn't understand",
    "start": "690410",
    "end": "695600"
  },
  {
    "text": "the way you're\nusing them and can help you avoid making mistakes. So for instance, by representing\nthese things are strings,",
    "start": "695600",
    "end": "702380"
  },
  {
    "text": "you get code injection attacks. So as far as I'm concerned,\ncode injection attacks are basically about\nthe consequence",
    "start": "702380",
    "end": "709160"
  },
  {
    "text": "of including as a primitive\nin your programming language or your framework some\nfunction that runs programs",
    "start": "709160",
    "end": "715410"
  },
  {
    "text": "as text in some sufficiently\nexpressive language. In Ur/Web, there is no\nbuilt-in interpreter",
    "start": "715410",
    "end": "721850"
  },
  {
    "text": "at runtime for\nstrings as programs. And that makes a lot of\nthe most common mistakes",
    "start": "721850",
    "end": "727830"
  },
  {
    "text": "in web applications\nimpossible by construction. So all these things\nthat are highlighted will either be\ninvisible, or they'll",
    "start": "727830",
    "end": "735240"
  },
  {
    "text": "be represented with special\ntypes that make clear what kind of code you're\ndealing with and don't",
    "start": "735240",
    "end": "743380"
  },
  {
    "text": "have any sort of\nautomatic coercion from string into any\nof those special types. ",
    "start": "743380",
    "end": "751210"
  },
  {
    "text": "All right, so here's\nthe alternative model that Ur/Web exposes,\nwhich gets compiled to the traditional model.",
    "start": "751210",
    "end": "757269"
  },
  {
    "text": "So it works in all the\nwidely deployed browsers. But the programmer can\nthink at this higher level",
    "start": "757270",
    "end": "763630"
  },
  {
    "text": "and avoid the\npotential for mistakes that were possible in\nthe previous picture. So we still have the web\nserver, which is in charge.",
    "start": "763630",
    "end": "770500"
  },
  {
    "text": "And we still have this\nfleet of browsers that are trying to use the web server. But now, the first\nimportant change is that when the browser\nwants to initiate use of a web",
    "start": "770500",
    "end": "778370"
  },
  {
    "text": "application, it doesn't just\nsend a string of HTTP requests with a URL in it.",
    "start": "778370",
    "end": "783980"
  },
  {
    "text": "Effectively, the abstraction\nis the browser names a function",
    "start": "783980",
    "end": "789089"
  },
  {
    "text": "that should be called where the\ncall runs on the server instead of the client.",
    "start": "789090",
    "end": "794720"
  },
  {
    "text": "And then the server\nresponds with not a string of HTTP protocol text but a\nstrongly typed documentary.",
    "start": "794720",
    "end": "804680"
  },
  {
    "text": "So instead of a string\nof HTML, it's a tree, a first class object\nin the language.",
    "start": "804680",
    "end": "811210"
  },
  {
    "text": "And that is how the\nprogram manipulates it, not as a string.",
    "start": "811210",
    "end": "817750"
  },
  {
    "text": "And each of these trees\ncontains within it links, which are themselves\nbasically just references to other\nfunctions that you might",
    "start": "817750",
    "end": "823453"
  },
  {
    "text": "choose to call on the server. So then the browser, when the\nuser clicks on those links,",
    "start": "823453",
    "end": "828590"
  },
  {
    "text": "picks out the function\nand conceptually calls it on the server, just like the\noriginal function that we called to get to this point.",
    "start": "828590",
    "end": "834276"
  },
  {
    "text": " And we have a\ndatabase interface,",
    "start": "834276",
    "end": "839740"
  },
  {
    "text": "which is accessed\nby the web server throwing queries\nat the database. And these are not just\ntext in the Ur/Web model.",
    "start": "839740",
    "end": "845730"
  },
  {
    "text": "They're strongly typed\nSQL syntax trees. And then the database will\nrespond back with not text,",
    "start": "845730",
    "end": "853930"
  },
  {
    "text": "but a list of records\nof native values in the programming language\nthat we're working with.",
    "start": "853930",
    "end": "860950"
  },
  {
    "text": "So we don't have to worry\nabout incorrectly converting between strings and\nnative representations,",
    "start": "860950",
    "end": "867189"
  },
  {
    "text": "or native representations\nin any other format that the database\nmight traditionally be presenting to us.",
    "start": "867190",
    "end": "873860"
  },
  {
    "text": " And here's a key element of\nhow the semantics of Ur/Web",
    "start": "873860",
    "end": "881450"
  },
  {
    "text": "makes it easier for programmers\nto think about fewer scenarios that can actually\nhappen when the application is running.",
    "start": "881450",
    "end": "888340"
  },
  {
    "text": "There's the standard\nidea of transactions in the world of\nrelational databases where you can run a\nseries of operations",
    "start": "888340",
    "end": "894630"
  },
  {
    "text": "that seem to run\nwith no interruption by other concurrent threads. And Ur/Web adopts that\nmodel and builds it",
    "start": "894630",
    "end": "900570"
  },
  {
    "text": "into the semantics\nof the language. So when a single\nfunction is running",
    "start": "900570",
    "end": "906190"
  },
  {
    "text": "on the server on\nbehalf of a client, then all of its\ndatabase accesses",
    "start": "906190",
    "end": "911300"
  },
  {
    "text": "appear to happen\nas an atomic unit without any interruption by\nany other concurrent requests",
    "start": "911300",
    "end": "916860"
  },
  {
    "text": "to the same server. And you can't even avoid\nthis behavior if you want to. Transactions are built\ninto the language.",
    "start": "916860",
    "end": "924410"
  },
  {
    "text": "And they really make\nconcurrency a lot easier to think about, and\npotentially help",
    "start": "924410",
    "end": "930050"
  },
  {
    "text": "you avoid security issues\nthat only arise when some rare interleaving happens\nwith a particular combination",
    "start": "930050",
    "end": "935870"
  },
  {
    "text": "of requests. And actually, I want to\nget to one of the questions",
    "start": "935870",
    "end": "941380"
  },
  {
    "text": "that someone submitted for this\nclass that I found intriguing. Ur/Web will detect when a\ntransaction fails because",
    "start": "941380",
    "end": "947940"
  },
  {
    "text": "of a concurrency\nproblem, like a deadlock, and automatically\nrestart the transaction. Someone's response\nto a question said,",
    "start": "947940",
    "end": "956550"
  },
  {
    "text": "this might make it easier to\nlaunch security attacks that depend on causing\ntransactions to fail",
    "start": "956550",
    "end": "962400"
  },
  {
    "text": "because of concurrency issues. I just wanted to ask\nthe class, what's an example of an\nattack like that,",
    "start": "962400",
    "end": "969125"
  },
  {
    "text": "if anyone happens\nto have one in mind? If you have a system that\nautomatically restarts",
    "start": "969125",
    "end": "975260"
  },
  {
    "text": "transactions that\nrun into deadlocks, how does that cause a\nsecurity problem, if it does?",
    "start": "975260",
    "end": "981001"
  },
  {
    "text": "This is a question I don't\nhave an answer in mind for, which is why I'm asking it. ",
    "start": "981001",
    "end": "994940"
  },
  {
    "text": "It might also have only\na non-obvious answer that no one would come up\nwith on the spot like this, which is fine, too. ",
    "start": "994940",
    "end": "1004856"
  },
  {
    "text": "Yeah. STUDENT: Can you maybe do some\nsort of denial of service? If it's going to restart\na transaction that you're",
    "start": "1004856",
    "end": "1010336"
  },
  {
    "text": "sending, and you\nknow it will fail, can you just keep restarting\nthat and try again? ",
    "start": "1010336",
    "end": "1016840"
  },
  {
    "text": "ADAM CHLIPALA: OK, so-- STUDENT: So if you\ncould cause the system to do some transaction you know\nis about to fail and repeatedly",
    "start": "1016840",
    "end": "1024740"
  },
  {
    "text": "fail, it keeps trying\nover and over again, it would never [INAUDIBLE]. ADAM CHLIPALA: Right, so you'd\nneed at least two threads",
    "start": "1024741",
    "end": "1031730"
  },
  {
    "text": "running at once to do that. But potentially that could work.",
    "start": "1031730",
    "end": "1037140"
  },
  {
    "text": "So you could launch a denial of\nservice attack taking advantage of the fact that\ncontention leads",
    "start": "1037140",
    "end": "1043150"
  },
  {
    "text": "to request handlers\nrestarting over and over again and purposely cause contention\nand use this as a way",
    "start": "1043150",
    "end": "1048640"
  },
  {
    "text": "to amplify the strength of\nyour denial of service attack beyond what you can get\nwith a traditional model.",
    "start": "1048640",
    "end": "1056401"
  },
  {
    "text": "All right, I can believe that. Yeah. STUDENT: Is [INAUDIBLE] the only\nway to cause the transaction to fail?",
    "start": "1056401",
    "end": "1061500"
  },
  {
    "text": "ADAM CHLIPALA: It is. Well, it's the only way to cause\nit to fail and automatically restart. ",
    "start": "1061500",
    "end": "1070659"
  },
  {
    "text": "Yeah. STUDENT: Perhaps it\ncould have a third party, which would conditionally fail.",
    "start": "1070660",
    "end": "1076346"
  },
  {
    "text": "And then you could use that\nto monitor some other user's behavior. ADAM CHLIPALA: You'd\nalso need a way",
    "start": "1076346",
    "end": "1081640"
  },
  {
    "text": "to observe the fact that it had\nfailed, which you should only be able to do through timing. But that could\nstill be an issue.",
    "start": "1081640",
    "end": "1087320"
  },
  {
    "text": "OK, right, so you can use\nthis as a side channel to see what other\nthreads are doing,",
    "start": "1087320",
    "end": "1092800"
  },
  {
    "text": "because their actions\nmight or might not create a conflict in your thread. ",
    "start": "1092800",
    "end": "1099170"
  },
  {
    "text": "OK, that sounds possible in\nprinciple, and very twisty.",
    "start": "1099170",
    "end": "1105520"
  },
  {
    "text": "I'm not sure. It's hard to think of\na concrete attack that would work predictably.",
    "start": "1105520",
    "end": "1111809"
  },
  {
    "text": "But it could be a fun exercise. Yeah. STUDENT: So do the transactions\nyou run-- for each request that",
    "start": "1111810",
    "end": "1118752"
  },
  {
    "text": "comes in, you run a\ntransaction for the code you run at the web server. But when you send that\ncode to the database,",
    "start": "1118752",
    "end": "1124303"
  },
  {
    "text": "does that translate into a\ndatabase transaction as well? ADAM CHLIPALA: It is, yeah. The whole execution\non the server side",
    "start": "1124303",
    "end": "1129799"
  },
  {
    "text": "is wrapped in one\ndatabase transaction if the application\nuses the database.",
    "start": "1129800",
    "end": "1134981"
  },
  {
    "text": "Yeah. STUDENT: So if you have\na transaction that's not going to end up obtaining,\ndo you think [INAUDIBLE]?",
    "start": "1134981",
    "end": "1140427"
  },
  {
    "text": "ADAM CHLIPALA: Yeah. STUDENT: Are you\ntelling the database that nothing's going\nto be updated later? Because presumably, the\ndatabase doesn't know that.",
    "start": "1140427",
    "end": "1146975"
  },
  {
    "text": "ADAM CHLIPALA: Yes, so the\ncompiler does static analysis and finds out transactions\nthat need to be read-only. And it creates the\ntransaction in read-only mode,",
    "start": "1146975",
    "end": "1154310"
  },
  {
    "text": "which in some database systems\nenables extra optimizations. STUDENT: What about if you\nread some stuff, and some",
    "start": "1154310",
    "end": "1163450"
  },
  {
    "text": "of the stuff you\nread doesn't affect what you're going to write,\nbut some of the other stuff you read does? ADAM CHLIPALA: I see,\nso you're asking,",
    "start": "1163450",
    "end": "1169395"
  },
  {
    "text": "could we use our\nknowledge of the semantics of the application to give\nhints to the database system",
    "start": "1169395",
    "end": "1175000"
  },
  {
    "text": "saying some of what looked\nlike concurrency violations are actually benign, and we don't\nneed to restart at that point?",
    "start": "1175000",
    "end": "1184130"
  },
  {
    "text": "I think the short answer is no. The current implementation\ndoesn't do that. But that would be\ninteresting to look into. I think it would require\nchanges to the database engine,",
    "start": "1184130",
    "end": "1191003"
  },
  {
    "text": "not just the interface\nin the language. STUDENT: Usually\nyou could split it into two separate\ntransactions, maybe, or something under\ncertain circumstances.",
    "start": "1191003",
    "end": "1200394"
  },
  {
    "text": "ADAM CHLIPALA: Yeah, that\nsounds hard to do right, but potentially worthwhile for--\nI don't know how to estimate",
    "start": "1200394",
    "end": "1206872"
  },
  {
    "text": "what fraction of applications\ncould take advantage of that, but it's a neat idea. ",
    "start": "1206872",
    "end": "1213910"
  },
  {
    "text": "All right, so\ntransactions are great. ",
    "start": "1213910",
    "end": "1219370"
  },
  {
    "text": "We also have-- so I was just\ntelling you about the model, the old school\nmodel of the browser requesting a single page\nfrom the web server.",
    "start": "1219370",
    "end": "1225919"
  },
  {
    "text": "We can also have this Ajax\nstyle stuff that basically looks like code on the client. It's calling a\nfunction that's just",
    "start": "1225920",
    "end": "1231890"
  },
  {
    "text": "marked to run on the server. When it finishes, the result\ncomes back in the client code.",
    "start": "1231890",
    "end": "1237460"
  },
  {
    "text": "And the result is\njust a native value in the programming language. You don't have to worry\nabout making it into a string",
    "start": "1237460",
    "end": "1242799"
  },
  {
    "text": "somehow and translating it back.  And then we have\nto take the result",
    "start": "1242800",
    "end": "1249079"
  },
  {
    "text": "and use it to change the\npage that the user sees. Otherwise, it wasn't a very\nuseful request to make.",
    "start": "1249079",
    "end": "1254150"
  },
  {
    "text": "So the model in Ur/Web\nis very different from the standard\ndocument object model that browsers expose directly.",
    "start": "1254150",
    "end": "1259840"
  },
  {
    "text": "The basic idea is\nsomething called functional reactive\nprogramming, which I won't try to explain in too much detail.",
    "start": "1259840",
    "end": "1265090"
  },
  {
    "text": "Because I know it requires\na nontrivial grokking",
    "start": "1265090",
    "end": "1270210"
  },
  {
    "text": "of functional programming\nfirst, even if we cut off that reactive part. But the basic idea\nis the document",
    "start": "1270210",
    "end": "1276730"
  },
  {
    "text": "is described in terms of a\nset of mutable cells, which are sort of the data\nthe page depends on. And the page itself is\nsomething different,",
    "start": "1276730",
    "end": "1283450"
  },
  {
    "text": "described as a\nfunction that takes as inputs the values\nof those cells, and then computes a page.",
    "start": "1283450",
    "end": "1288710"
  },
  {
    "text": "And then the runtime\nsystem of the language watches changes to\nthose mutable cells. And when they do\nchange, it automatically",
    "start": "1288710",
    "end": "1294679"
  },
  {
    "text": "computes the consequences\nfor the displayed page and efficiently updates\njust the parts of the page",
    "start": "1294680",
    "end": "1301066"
  },
  {
    "text": "that have changed\nbased on those cells. ",
    "start": "1301066",
    "end": "1307050"
  },
  {
    "text": "All right, and on\neach client, there can be many different\nthreads running at once. ",
    "start": "1307050",
    "end": "1314320"
  },
  {
    "text": "These threads are\nspawned in Ur/Web code and themselves run Ur/Web code. But the compiler needs to\ntranslate them into JavaScript",
    "start": "1314320",
    "end": "1321460"
  },
  {
    "text": "to get the browser to run them. So that's one of the services\nthe compiler provides.",
    "start": "1321460",
    "end": "1326840"
  },
  {
    "text": "That's one important\npoint about the threads. Another key point is that\nthe client side threading follows what's call the\ncooperative multi-threading",
    "start": "1326840",
    "end": "1333860"
  },
  {
    "text": "model. A thread doesn't have\nto worry about being preempted by another thread\nat an arbitrary point.",
    "start": "1333860",
    "end": "1339160"
  },
  {
    "text": "There are well\ndefined operations that signal, OK, it's all right\nto switch to another thread here.",
    "start": "1339160",
    "end": "1344190"
  },
  {
    "text": "One of them is making\na remote function call to the server, for\ninstance, or asking",
    "start": "1344190",
    "end": "1349700"
  },
  {
    "text": "to sleep for a certain\nnumber of milliseconds. But just regular code can't\nbe interrupted arbitrarily. So that means the\nprogrammer doesn't",
    "start": "1349700",
    "end": "1355770"
  },
  {
    "text": "need to think about\nas many interleavings, and it's easier to\nconvince yourself that, say, a particular\npiece of code",
    "start": "1355770",
    "end": "1361970"
  },
  {
    "text": "avoids some security\nissue or other bug. Because you can more easily\nenumerate all the possible ways",
    "start": "1361970",
    "end": "1367700"
  },
  {
    "text": "for the two threads to\ninteract with each other. And this is sort\nof a natural model to use given the way JavaScript\nis usually implemented.",
    "start": "1367700",
    "end": "1375889"
  },
  {
    "text": "There isn't preemption in\nJavaScript and browsers already. So this is just presenting\na threading abstraction",
    "start": "1375890",
    "end": "1381270"
  },
  {
    "text": "on top of the\ncallbacks-based model that JavaScript shows\nthe programmer directly. ",
    "start": "1381270",
    "end": "1389000"
  },
  {
    "text": "And the last piece that\none of the built-in abstractions that\nUr/Web applications use",
    "start": "1389000",
    "end": "1394100"
  },
  {
    "text": "is channels for passing messages\nbetween different machines. So each channel has a\ntype, which expresses what",
    "start": "1394100",
    "end": "1402300"
  },
  {
    "text": "kind of data can flow over if. You don't have to convert\nthings to and from string or JSON or anything\nelse to make this work.",
    "start": "1402300",
    "end": "1408630"
  },
  {
    "text": "And channels can\nlive in the database. So imagine this picture\nis showing us there's a channel that was created.",
    "start": "1408630",
    "end": "1414549"
  },
  {
    "text": "It has a write side\nand a read side, which can go to separate places. The write end is\nsitting in the database.",
    "start": "1414549",
    "end": "1420660"
  },
  {
    "text": "And the read end somehow\nmade its way to the client and is sitting in the variable\nenvironment of a thread.",
    "start": "1420660",
    "end": "1426010"
  },
  {
    "text": "So imagine that thread\nearlier made a remote call to the server, which\ncreated the channel, returned it to the client, and\nput it in the database in one",
    "start": "1426010",
    "end": "1433580"
  },
  {
    "text": "transaction. So later, the server decides,\nOK, I'll query that channel out",
    "start": "1433580",
    "end": "1439870"
  },
  {
    "text": "of the database. And I'll dump a value into it. And it just sort of pops out\nthe other end on the client.",
    "start": "1439870",
    "end": "1445786"
  },
  {
    "text": "And everything is strongly\ntied throughout this process. ",
    "start": "1445786",
    "end": "1451450"
  },
  {
    "text": "All right, I think this is the\nlast step of my animation here. Any questions about this model\nbefore I switch to a code demo?",
    "start": "1451450",
    "end": "1458940"
  },
  {
    "text": " STUDENT: So how is this\ndifferent than [INAUDIBLE]?",
    "start": "1458940",
    "end": "1467940"
  },
  {
    "text": "Why do you need a message\npassage if you already have that [INAUDIBLE]?",
    "start": "1467940",
    "end": "1473940"
  },
  {
    "text": "ADAM CHLIPALA: OK, so RPC\ninterface is going from browser initiates the call,\nthe server handles it.",
    "start": "1473940",
    "end": "1480900"
  },
  {
    "text": "The message is that\nthe channels are intended for cases where\nthe server initiates the communication. For instance, new\nemail message-- that",
    "start": "1480900",
    "end": "1488059"
  },
  {
    "text": "would be a canonical example. And the client is waiting to\nhear that there's a new email message. But it can't\ndetermine on its own",
    "start": "1488060",
    "end": "1494049"
  },
  {
    "text": "when the next\nmessage is available. Yeah. STUDENT: Are all the\nmessages multiplexed through one connection,\nor is it [INAUDIBLE]?",
    "start": "1494050",
    "end": "1500731"
  },
  {
    "text": "ADAM CHLIPALA: They\nare multiplexed through one HTTP connection. I know there are these\nnewfangled things today called",
    "start": "1500732",
    "end": "1506710"
  },
  {
    "text": "web sockets and maybe\nsome other protocols like that, which didn't exist\nwhen this was implemented. This all works over\nold-school HTTP",
    "start": "1506710",
    "end": "1513649"
  },
  {
    "text": "with one connection for all the\nmessages on different channels. ",
    "start": "1513650",
    "end": "1522000"
  },
  {
    "text": "All right, let's\nsee what's next. Yeah, let me switch\nto a demo here. ",
    "start": "1522000",
    "end": "1529740"
  },
  {
    "text": "So here's a Hello World\nprogram in Ur/Web. Probably it deserves\nmore of the screen space",
    "start": "1529740",
    "end": "1535510"
  },
  {
    "text": "than this compilation output. So it looks pretty un-scary\nat this point, I hope.",
    "start": "1535510",
    "end": "1544660"
  },
  {
    "text": "The unusual thing here\nmaybe is that this is really the whole program. There's no extra\nrouting logic that",
    "start": "1544660",
    "end": "1550980"
  },
  {
    "text": "explains how to map a\nURL into some code to run to serve requests to that URL.",
    "start": "1550980",
    "end": "1557010"
  },
  {
    "text": "We just have regular\nfunctions of a standard kind of programming language. And the compiler exposes all the\nfunctions in your main module",
    "start": "1557010",
    "end": "1566130"
  },
  {
    "text": "as callable via URLs. And the URL is just formed\nfrom the function name.",
    "start": "1566130",
    "end": "1571220"
  },
  {
    "text": "And if there's some\nnested structure modules, the module's structure is\nalso replicated in the URL.",
    "start": "1571220",
    "end": "1579890"
  },
  {
    "text": "And then we have a\nfunction that returns a piece of XHTML syntax.",
    "start": "1579890",
    "end": "1586160"
  },
  {
    "text": "The compiler is actually using\na special parsing extension for processing\nthis XHTML syntax.",
    "start": "1586160",
    "end": "1592679"
  },
  {
    "text": "And it's also doing\nsome basic type checking to make sure that\ndifferent XML elements appear",
    "start": "1592680",
    "end": "1598372"
  },
  {
    "text": "inside others that\nthey're actually authorized to appear inside of. And I think I compiled\nthis before we started.",
    "start": "1598372",
    "end": "1606340"
  },
  {
    "text": "And it does a not\nvery surprising thing in the browser. And here's the HTML\npage that comes out.",
    "start": "1606340",
    "end": "1616289"
  },
  {
    "text": "So among other properties,\nit automatically adds the right XHTML header.",
    "start": "1616290",
    "end": "1621940"
  },
  {
    "text": "And it declares the character\nencoding for this document. I was mildly horrified\nto look at some",
    "start": "1621940",
    "end": "1628365"
  },
  {
    "text": "of your assigned\nreading for this class and see how much time this book\nspends talking about character encodings and what happens\nif you're not using UTF-8.",
    "start": "1628365",
    "end": "1637331"
  },
  {
    "text": "I hope I understood\nthat correctly. This forces you to use UTF-8\nso that those horrible things aren't going to happen, I hope.",
    "start": "1637331",
    "end": "1643080"
  },
  {
    "text": "But if anyone sees\na way to replicate any of the attacks from that\nbook Tangled Web in Ur/Web,",
    "start": "1643080",
    "end": "1648620"
  },
  {
    "text": "or has a hypothesis\nabout something we should try to\nsee if it works, I'd be interested to hear that. And by the way, at any\npoint during this demo,",
    "start": "1648620",
    "end": "1655446"
  },
  {
    "text": "please suggest\nexperiments that come to mind about things\nwe should try,",
    "start": "1655446",
    "end": "1661350"
  },
  {
    "text": "mistakes you might make that you\nwonder whether this system is able to catch. I think that's the\nmost fun kind of demo.",
    "start": "1661350",
    "end": "1667340"
  },
  {
    "text": "Yeah. STUDENT: So things\nlike CRSF [INAUDIBLE], you said that [INAUDIBLE]. ",
    "start": "1667340",
    "end": "1675299"
  },
  {
    "text": "ADAM CHLIPALA: So cross\nsite request forgery I wanted to explain a\nlittle later explicitly.",
    "start": "1675300",
    "end": "1682120"
  },
  {
    "text": "I think the paper sort of\nexplains why cross site scripting can't work. And the reason is whenever\nyou build a piece of syntax,",
    "start": "1682120",
    "end": "1691639"
  },
  {
    "text": "it's an object, a\ntree of different sub",
    "start": "1691640",
    "end": "1698830"
  },
  {
    "text": "parts of that syntax. It's not just a string. And you're not going\nto accidentally turn a string from the user\ninto a tree with structure.",
    "start": "1698830",
    "end": "1706898"
  },
  {
    "text": "You would know if you did that. Because it's hard to\nwrite an interpreter. And in Ur/Web, you have\nto write an interpreter.",
    "start": "1706899",
    "end": "1712370"
  },
  {
    "text": "It doesn't automatically\nhappen for you. But I'll have an example\nshortly that might also",
    "start": "1712370",
    "end": "1718650"
  },
  {
    "text": "address that concern. So I want to show you what\nthis syntactic sugar actually",
    "start": "1718650",
    "end": "1724690"
  },
  {
    "text": "turns into in the compiler. So this might look\nlike we could just add some double quotes\naround the HTML,",
    "start": "1724690",
    "end": "1729740"
  },
  {
    "text": "and then we're back\nin the normal world. We might wonder, why\nis it such a big deal the omit the double quotes\nand put XML instead?",
    "start": "1729740",
    "end": "1736640"
  },
  {
    "text": "So we can actually\ntake my word for it",
    "start": "1736640",
    "end": "1742340"
  },
  {
    "text": "that this is equivalent\ncode for what this does. So tag is a built in\nfunction that builds a tree",
    "start": "1742340",
    "end": "1748909"
  },
  {
    "text": "node of an HTML document. And I'm passing a bunch of\narguments that are expressing",
    "start": "1748910",
    "end": "1754080"
  },
  {
    "text": "the CSS styling on that node. This one doesn't really\nhave anything going on,",
    "start": "1754080",
    "end": "1759120"
  },
  {
    "text": "so it's a variety of different\nways of saying nothing. And it doesn't take\nany attributes.",
    "start": "1759120",
    "end": "1766690"
  },
  {
    "text": "And the tag is a body tag. So that's another thing\nin the standard library. All of the standard tags are\nfunctions with first class",
    "start": "1766690",
    "end": "1774679"
  },
  {
    "text": "status in the standard library. And then we need to put a\n\"Hello World\" text inside it.",
    "start": "1774680",
    "end": "1779870"
  },
  {
    "text": "So we call a cdata\nfunction where cdata is the XML word\nfor character data",
    "start": "1779870",
    "end": "1786027"
  },
  {
    "text": "or just a string constant. And we can put exactly\nthe text from below.",
    "start": "1786027",
    "end": "1791710"
  },
  {
    "text": "We'll comment that out. This should give us the\nsame result as before. Let me see if that worked.",
    "start": "1791710",
    "end": "1798880"
  },
  {
    "text": "OK, and now I'll go\nback to the actual page.",
    "start": "1798880",
    "end": "1805500"
  },
  {
    "text": "Same thing as before, so this\nis what that function was really",
    "start": "1805500",
    "end": "1810530"
  },
  {
    "text": "doing at the begin. It's not just building a string. It's calling a\nseries of operations that are designed\nso that they only",
    "start": "1810530",
    "end": "1816480"
  },
  {
    "text": "allow you to build valid\nHTML, and they never implicitly interpret a string\nas code instead of just",
    "start": "1816480",
    "end": "1824240"
  },
  {
    "text": "content that sits there. Yeah? STUDENT: [INAUDIBLE]? ",
    "start": "1824240",
    "end": "1829450"
  },
  {
    "text": "ADAM CHLIPALA: Right,\nyou are anticipating the next few steps. Let me do something\nless complicated",
    "start": "1829450",
    "end": "1834715"
  },
  {
    "text": "first, which is also\npotentially worrisome. Let's decide that we're really\nhappy to see the world, so we",
    "start": "1834715",
    "end": "1841290"
  },
  {
    "text": "better put the word \"hello\" in\nbold and compile that again.",
    "start": "1841290",
    "end": "1847965"
  },
  {
    "text": "It just shows up as\ninterpreting that literally as text instead of markup.",
    "start": "1847965",
    "end": "1853800"
  },
  {
    "text": "So this presentation\nof HTML syntax",
    "start": "1853800",
    "end": "1859010"
  },
  {
    "text": "as a function that\nbuilds syntax doesn't have any of the usual\nsyntactic encoding",
    "start": "1859010",
    "end": "1864407"
  },
  {
    "text": "conventions built into it. It interprets things in the\nway you would want it to. And so the\nimplementation of cdata",
    "start": "1864407",
    "end": "1871320"
  },
  {
    "text": "does what's usually\ncalled escaping. But the programmer\ndoesn't need to know there is any such thing as escaping. You can just think\nof it as, here's",
    "start": "1871320",
    "end": "1877210"
  },
  {
    "text": "a set of convenient functions\nfor building a tree object that describes a page. Did I see a question over there?",
    "start": "1877210",
    "end": "1882774"
  },
  {
    "text": "STUDENT: [INAUDIBLE]? ADAM CHLIPALA: You want to see\nthe HTML that it generates. OK, it's going to be not\nthe most exciting thing.",
    "start": "1882774",
    "end": "1892170"
  },
  {
    "text": "I don't know if\nthat's [INAUDIBLE]. I can make it bigger, but then\nit doesn't fit on one line. So let me know if I\nshould make it bigger.",
    "start": "1892170",
    "end": "1899680"
  },
  {
    "text": "It just put in the usual escapes\nfor the less than character with an ampersand.",
    "start": "1899680",
    "end": "1907659"
  },
  {
    "text": "STUDENT: So given that\nyou're using XHTML, couldn't you just use\nthe cdata [INAUDIBLE] instead of doing\nmanual [INAUDIBLE]?",
    "start": "1907660",
    "end": "1915567"
  },
  {
    "text": "ADAM CHLIPALA: Probably. That would require me knowing\nmore about XML than I do. ",
    "start": "1915567",
    "end": "1924430"
  },
  {
    "text": "All right, so there was another\nquestion about JavaScript URLs, which is a good one. If we allow JavaScript\nURLs, then we",
    "start": "1924430",
    "end": "1931140"
  },
  {
    "text": "have a back door for automatic\ninterpretation of strings as programs at runtime.",
    "start": "1931140",
    "end": "1937790"
  },
  {
    "text": "And that causes all\nsorts of issues. So let's try to avoid that. I'll switch back, first of all,\nto the shorter version of this.",
    "start": "1937790",
    "end": "1946130"
  },
  {
    "text": "And then inside the body,\nI'll make this multiple lines.",
    "start": "1946130",
    "end": "1952510"
  },
  {
    "text": "And let's put a link that tries\nto do something appropriate. ",
    "start": "1952510",
    "end": "1966820"
  },
  {
    "text": "We'll leave some room\nfor error messages here. This is working correctly. ",
    "start": "1966820",
    "end": "1974700"
  },
  {
    "text": "Invalid URL, JavaScript\nsomething, passed bless. So bless is a built\nin function that is the gatekeeper of\nwhich URLs are allowed.",
    "start": "1974700",
    "end": "1982420"
  },
  {
    "text": "And by default, no\nURLs are allowed. So certainly this\none is not allowed.",
    "start": "1982420",
    "end": "1988320"
  },
  {
    "text": "And in general, it is a bad\nidea to write your URL policy so that you can create values\nthat represent JavaScript URLs.",
    "start": "1988320",
    "end": "1996777"
  },
  {
    "text": "Because then all sorts of\nguarantees that you might like are invalid. To make it a little\nclearer how it",
    "start": "1996777",
    "end": "2002630"
  },
  {
    "text": "works, let me factor this\ncode into a separate function",
    "start": "2002630",
    "end": "2008350"
  },
  {
    "text": "called a linker\nthat takes in a URL. So URL is a type. It's not just string.",
    "start": "2008350",
    "end": "2014205"
  },
  {
    "text": "It's a type that stands for\na URL that is explicitly authorized by your\napplication's policy.",
    "start": "2014205",
    "end": "2021260"
  },
  {
    "text": "And so we can [INAUDIBLE] XML.",
    "start": "2021260",
    "end": "2027140"
  },
  {
    "text": "And instead of a constant,\nI'll just put u here.",
    "start": "2027140",
    "end": "2032160"
  },
  {
    "text": "And so I'm using\nthe curly braces like in some popular\nHTML template frameworks",
    "start": "2032160",
    "end": "2038470"
  },
  {
    "text": "to indicate inserting\nsome code from the host language inside the HTML\nthat we're building.",
    "start": "2038470",
    "end": "2043722"
  },
  {
    "text": "And this is all\ndone in a way where it's type checked statically. So the system will\ncheck, yeah, this is a spot where a URL belongs.",
    "start": "2043722",
    "end": "2049739"
  },
  {
    "text": "And this says it is a URL. So that's fine. And then I can explicitly expose\nthe call to bless by saying,",
    "start": "2049739",
    "end": "2058210"
  },
  {
    "text": "let's just call the\nlinker function here on the result of\nblessing that URL.",
    "start": "2058210",
    "end": "2063280"
  },
  {
    "start": "2063280",
    "end": "2068679"
  },
  {
    "text": "We should get basically the\nsame error message as before. There's some program analysis\ngoing on here to figure out--",
    "start": "2068679",
    "end": "2075379"
  },
  {
    "text": "I guess it doesn't need that. Because this string is\npassed directly to bless. And we can see-- I couldn't wait\nto run this for you at runtime",
    "start": "2075380",
    "end": "2082367"
  },
  {
    "text": "and discover the failure. But I can tell it's\ndefinitely going to fail. So I'll just make\nit a compiler error. This URL is not going to be\naccepted by the URL policy.",
    "start": "2082368",
    "end": "2090800"
  },
  {
    "text": "STUDENT: So if you didn't\nhave the [INAUDIBLE]? ADAM CHLIPALA: If I left\nout this call to bless,",
    "start": "2090800",
    "end": "2097039"
  },
  {
    "text": "it would be a much more\nbasic compile time error. You have a string\nand need a URL. They're different types.",
    "start": "2097039",
    "end": "2102920"
  },
  {
    "text": " All right, but let's make this\na little more interesting.",
    "start": "2102920",
    "end": "2109370"
  },
  {
    "text": "And I'm going to open\nup the configuration file for this demo. It's pretty short,\nas these things go,",
    "start": "2109370",
    "end": "2115819"
  },
  {
    "text": "at least if you look at any\nJava web application framework. They have these gigantic\nXML files for configuration.",
    "start": "2115820",
    "end": "2122080"
  },
  {
    "text": "This is a little nicer\nthan that, or so I claim. We can add a rule that\nsays, anything on Wikipedia",
    "start": "2122080",
    "end": "2130990"
  },
  {
    "text": "is allowed. And then we can put the\nWikipedia URL in here. ",
    "start": "2130990",
    "end": "2141516"
  },
  {
    "text": "Now we're in good shape. What's missing?",
    "start": "2141517",
    "end": "2147006"
  },
  {
    "start": "2147006",
    "end": "2153992"
  },
  {
    "text": "Oh, I guess I don't remember\nthe URL scheme for that. But we got to the website. That's good enough.",
    "start": "2153992",
    "end": "2159205"
  },
  {
    "text": " All right, so the\nbig idea here is to have an abstract\ntype of URL, just",
    "start": "2159205",
    "end": "2166735"
  },
  {
    "text": "like you could have an\nabstract type of hash tables that encodes invariants about\nhow the hash table looks",
    "start": "2166735",
    "end": "2171851"
  },
  {
    "text": "and prevents code from\nreaching inside the array of the hash table. We can do the same\nthing for URLs.",
    "start": "2171851",
    "end": "2177210"
  },
  {
    "text": "And the system enforces\nvia this bless function that every value\nof this type has",
    "start": "2177210",
    "end": "2182710"
  },
  {
    "text": "passed the appropriate\ncheck at some point. And for instance,\nwith this policy, we know there will never\nbe a JavaScript URL.",
    "start": "2182710",
    "end": "2188980"
  },
  {
    "text": "And it's safe to take a URL\nvalue and use it as a link. It won't break the basic\nabstractions of the language.",
    "start": "2188980",
    "end": "2196492"
  },
  {
    "text": "Yeah. STUDENT: [INAUDIBLE]? ",
    "start": "2196492",
    "end": "2209099"
  },
  {
    "text": "ADAM CHLIPALA: OK, so we have\nto try something like that. And this should go through.",
    "start": "2209100",
    "end": "2214310"
  },
  {
    "text": "And then the browser\nknows it's a quote. And we can look at the source.",
    "start": "2214310",
    "end": "2221000"
  },
  {
    "text": "That is because it was\nescaped in the right way. STUDENT: But can you still\nuse-- so JavaScript allows you",
    "start": "2221000",
    "end": "2227447"
  },
  {
    "text": "to say, [INAUDIBLE], and then\nspecify inline JavaScript there. Is that something\nthat [INAUDIBLE]?",
    "start": "2227447",
    "end": "2234870"
  },
  {
    "text": "ADAM CHLIPALA: Yes and no. So we can put body onload. And instead of JavaScript,\nyou put some Ur/Web code",
    "start": "2234870",
    "end": "2241781"
  },
  {
    "text": "that does something. ",
    "start": "2241781",
    "end": "2249490"
  },
  {
    "text": "So it would be a disaster\nto interpret JavaScript code in string form as\na program there.",
    "start": "2249490",
    "end": "2255419"
  },
  {
    "text": "But we can put code of\nthe same programming language you're working\nwith already escaped in with these curly braces.",
    "start": "2255419",
    "end": "2261086"
  },
  {
    "text": "And then it automatically\ngets compiled to JavaScript to\nrun on the client. ",
    "start": "2261086",
    "end": "2272778"
  },
  {
    "text": "All right, any more questions? Yeah. STUDENT: [INAUDIBLE]? ",
    "start": "2272778",
    "end": "2284499"
  },
  {
    "text": "ADAM CHLIPALA: I\nthink it's everything? Is it embarrassing\nthat I said everything?",
    "start": "2284499",
    "end": "2292560"
  },
  {
    "text": "Is there something that\nshouldn't be allowed? STUDENT: [INAUDIBLE]. ",
    "start": "2292560",
    "end": "2304966"
  },
  {
    "text": "ADAM CHLIPALA: I see, so\nsymbols that would independently have funny things happening\nwith software execution would confuse the human user?",
    "start": "2304966",
    "end": "2312414"
  },
  {
    "text": "STUDENT: [INAUDIBLE].  ADAM CHLIPALA: OK, I remember\nreading some of that stuff.",
    "start": "2312414",
    "end": "2319070"
  },
  {
    "text": "And maybe it said the\nnew browser versions avoid those problems. But some old ones\nwill get confused.",
    "start": "2319070",
    "end": "2325820"
  },
  {
    "text": "It's possible this will create\nproblems in the old ones that are too permissive. I'm not sure.",
    "start": "2325820",
    "end": "2331660"
  },
  {
    "text": " But at least all\nthese things are",
    "start": "2331660",
    "end": "2337750"
  },
  {
    "text": "going to be interpreted as UTF-8\nif they go into the document. So if there's some problem\nwith a different encoding, it shouldn't be applicable here.",
    "start": "2337750",
    "end": "2346444"
  },
  {
    "text": "Yeah. STUDENT: The string of\nthe [INAUDIBLE], right now it's checking a compile\ntime that that string is",
    "start": "2346444",
    "end": "2351809"
  },
  {
    "text": "on allowed URL. But if you compute\na string at runtime, does bless perform\na check at runtime",
    "start": "2351809",
    "end": "2359104"
  },
  {
    "text": "whether or not the\nstring is allowed, or are you not allowed to-- ADAM CHLIPALA: So let's a write\na form to test that claim.",
    "start": "2359104",
    "end": "2365578"
  },
  {
    "start": "2365578",
    "end": "2371056"
  },
  {
    "text": "So we can put a form in here. ",
    "start": "2371056",
    "end": "2378028"
  },
  {
    "text": "And form wants us to enter\nURL in a text box called URL. ",
    "start": "2378028",
    "end": "2385498"
  },
  {
    "text": "Then we can have\na Submit button. When you click on it, it\nshould call the linker function",
    "start": "2385498",
    "end": "2392090"
  },
  {
    "text": "with a record of one value\nfor every field in the form. In this case, there's\njust one field called URL.",
    "start": "2392090",
    "end": "2397990"
  },
  {
    "text": "And so linker will get\npassed a record that contains the URL as a string type. And then we'll explicitly\ntry to bless it up there",
    "start": "2397990",
    "end": "2405151"
  },
  {
    "text": "and see if it works. ",
    "start": "2405152",
    "end": "2416150"
  },
  {
    "text": "This is an example of\nan exciting type error message, which is admittedly\nsub-optimal in some ways. ",
    "start": "2416150",
    "end": "2427247"
  },
  {
    "text": "Here's one of those things that\nwon't make any sense if you're not familiar with Haskell. I forgot a return.",
    "start": "2427247",
    "end": "2432670"
  },
  {
    "text": "But at least now it looks\nmore like a Java program. ",
    "start": "2432670",
    "end": "2439342"
  },
  {
    "text": "Have a string-- let me scroll\nto the end, do one of these, sort of copying the full\ntype of all the attributes",
    "start": "2439342",
    "end": "2446370"
  },
  {
    "text": "that this tag can take. And I also forgot to say,\nthis is now a full page. So we can't use an a tag\nuntil we're inside a body tag.",
    "start": "2446370",
    "end": "2454880"
  },
  {
    "text": "And this is the\nabstruse type error message for that property. ",
    "start": "2454880",
    "end": "2461800"
  },
  {
    "text": "OK, so now let's\nsee what happens. URL is-- yay.",
    "start": "2461800",
    "end": "2473250"
  },
  {
    "start": "2473250",
    "end": "2483830"
  },
  {
    "text": "There we go. So that was a somewhat long\nand not necessarily super",
    "start": "2483830",
    "end": "2490805"
  },
  {
    "text": "exciting answer\nto your question. Yeah. STUDENT: The URL [INAUDIBLE],\nare those just for [INAUDIBLE],",
    "start": "2490805",
    "end": "2496750"
  },
  {
    "text": "or is it more\nrestrictive than that? ADAM CHLIPALA: It's\nmore restrictive. It's currently just\nconstants and prefixes.",
    "start": "2496750",
    "end": "2502155"
  },
  {
    "text": "But you can also\nhave disallow rules. And they run in the\norder that you write. STUDENT: Oh, so if you stick to\ndisallow JavaScript [INAUDIBLE]",
    "start": "2502155",
    "end": "2512350"
  },
  {
    "text": "that if you put a line break\nin the middle of the word \"JavaScript,\" it will\nstill interpret it as--",
    "start": "2512351",
    "end": "2517812"
  },
  {
    "text": "ADAM CHLIPALA: That\nwould be too bad. That's why it's good to stick to\nthe white list approach instead of the black list approach.",
    "start": "2517812",
    "end": "2522991"
  },
  {
    "text": "So you probably\nwant all the rules to start with a particular\nprotocol, like HTTP,",
    "start": "2522991",
    "end": "2530020"
  },
  {
    "text": "and only allow things that\nfall in your approved set of protocols.",
    "start": "2530020",
    "end": "2535192"
  },
  {
    "text": "That's what I recommend it is. Yeah. STUDENT: For many\nsites, you might let users share links,\nin which case, you need",
    "start": "2535192",
    "end": "2541928"
  },
  {
    "text": "to allow links to anywhere. ADAM CHLIPALA: You\ncan allow links. Well, do you want your users\nto share JavaScript links",
    "start": "2541928",
    "end": "2547442"
  },
  {
    "text": "or, I don't know, Flash\nlinks, or whatever's allowed? You see, you can white list\nall the HTTP, HTTPS, URLs",
    "start": "2547442",
    "end": "2554990"
  },
  {
    "text": "and be in good shape\nfor most websites. That would do that. And the guarantees\nare a little weaker",
    "start": "2554990",
    "end": "2562630"
  },
  {
    "text": "compared to allowing\nonly particular URLs. But you can at least ensure that\nthere's no automatic execution of the string as a program.",
    "start": "2562630",
    "end": "2568842"
  },
  {
    "start": "2568842",
    "end": "2574590"
  },
  {
    "text": "So let me pull up one of the\nexamples from the paper, which",
    "start": "2574590",
    "end": "2579664"
  },
  {
    "text": "is this one, an example\nof a simple system",
    "start": "2579664",
    "end": "2590600"
  },
  {
    "text": "with a set of chat rooms\nrepresented in the database. And the user can click\non a link to go to a room",
    "start": "2590600",
    "end": "2596110"
  },
  {
    "text": "and then send a message. This was the first of several\nvariants on that scheme. ",
    "start": "2596110",
    "end": "2602640"
  },
  {
    "text": "First, I'll point out I'm\ngoing to recompile this. And then magically,\nall the database tables",
    "start": "2602640",
    "end": "2607770"
  },
  {
    "text": "that it declares are going\nto be added to the database. And we can now just start\nusing the application.",
    "start": "2607770",
    "end": "2613014"
  },
  {
    "text": "But first, we have\nto add some rooms. So let's open our [INAUDIBLE]\ninterface to the demo database",
    "start": "2613014",
    "end": "2619160"
  },
  {
    "text": "and insert into the room table\nsome values like one and two.",
    "start": "2619160",
    "end": "2628215"
  },
  {
    "text": "Hopefully these are here now. OK, and we go in\nthere, and we can entertain ourselves all day\nlong sending strings of text.",
    "start": "2628216",
    "end": "2637930"
  },
  {
    "text": "Maybe a little more interesting,\nyou can try to send HTML,",
    "start": "2637930",
    "end": "2645983"
  },
  {
    "text": "and it just gets\nhandled right away. That's the basic\nfunctionality there.",
    "start": "2645983",
    "end": "2652040"
  },
  {
    "text": "And just to quickly go over\nsome of how this works again, so we have these\ntwo SQL table that",
    "start": "2652040",
    "end": "2657625"
  },
  {
    "text": "are just declared\nin this first class way inside the\nprogramming language. And we give the\nschema of each table.",
    "start": "2657625",
    "end": "2663125"
  },
  {
    "text": "And then later, when we\ntry to access those tables, the compiler will check\nthat we're accessing them in a way that's consistent\nwith the schema from a typing",
    "start": "2663125",
    "end": "2670323"
  },
  {
    "text": "perspective. So we have a table of\nrooms where each room is a record of an ID,\nwhich is the integer,",
    "start": "2670323",
    "end": "2677520"
  },
  {
    "text": "and a title, which\nis the string. This is the type we were\njust generating records in.",
    "start": "2677520",
    "end": "2682540"
  },
  {
    "text": "And I created a few\nrooms at the SQL console. And we also have messages that\neach message belongs to a room.",
    "start": "2682540",
    "end": "2692730"
  },
  {
    "text": "And it has a time\nwhen it was posted. And it has some text, which\nis the content of the message.",
    "start": "2692730",
    "end": "2699210"
  },
  {
    "text": "And let me fast forward\nto the main function. We run an SQL query.",
    "start": "2699210",
    "end": "2706092"
  },
  {
    "text": "So here's an example of\nSQL syntax embedded inside of Ur/Web. I don't want to go through\nthe expansion of this one",
    "start": "2706092",
    "end": "2711410"
  },
  {
    "text": "into calling functions\nfrom the standard library. Because it's pretty\nverbose if I do that.",
    "start": "2711410",
    "end": "2717370"
  },
  {
    "text": "But take my word for it,\nthis is de-sugared into calls of functions in the\nstandard library that represent the valid ways of\nconstructing an SQL query.",
    "start": "2717370",
    "end": "2725720"
  },
  {
    "text": "And those functions\nhave types that cause them to type\ncheck the query for you, not just guarantee that\nthe syntax is reasonable.",
    "start": "2725720",
    "end": "2733320"
  },
  {
    "text": "So this gets de-sugared into\nan indication of an SQL query. And then the code\nhere is basically just looping over all the rows\nthat come out of that query",
    "start": "2733320",
    "end": "2741910"
  },
  {
    "text": "and generating a piece\nof HTML for each one. In particular, we're\ngoing to take the title",
    "start": "2741910",
    "end": "2746950"
  },
  {
    "text": "field of a query\nresult and convert that",
    "start": "2746950",
    "end": "2752472"
  },
  {
    "text": "into HTML with this notation\nthat involves curly braces. And the square brackets\nare additionally saying,",
    "start": "2752472",
    "end": "2759310"
  },
  {
    "text": "this isn't literally\na piece of HTML yet. But please convert it for\nme in the standard way.",
    "start": "2759310",
    "end": "2764454"
  },
  {
    "text": "So we can do that with\nstrings and integers and all sorts of other types. Yeah. STUDENT: So if that contained\nmalicious HTML or something,",
    "start": "2764455",
    "end": "2771479"
  },
  {
    "text": "would that be filtered out?  ADAM CHLIPALA: It would be. So in the usual way of\ntalking about these things,",
    "start": "2771479",
    "end": "2779030"
  },
  {
    "text": "escaping happens in the\nway you'd want it to. In Ur/Web, you can just think\nof this as building a tree.",
    "start": "2779030",
    "end": "2784640"
  },
  {
    "text": "This is a node that\nstands for some text. Obviously text\ncan't do anything. STUDENT: So if that\ntitle was User Control,",
    "start": "2784640",
    "end": "2790951"
  },
  {
    "text": "and someone made a chat room\nwith the title Alert something, that would not be JavaScript? ADAM CHLIPALA: It\nwouldn't automatically",
    "start": "2790951",
    "end": "2796480"
  },
  {
    "text": "be interpreted as JavaScript\nor HTML or anything else. It would just be text only. All right, so we\nhave this title.",
    "start": "2796480",
    "end": "2802595"
  },
  {
    "text": "And let's wrap an\na tag around it. And instead of href, the usual\nway to do a link in HTML,",
    "start": "2802595",
    "end": "2807900"
  },
  {
    "text": "we use the link\nattribute, which is sort of a pseudo\nattribute in Ur/Web, which",
    "start": "2807900",
    "end": "2814200"
  },
  {
    "text": "takes as an argument\nnot a URL, but basically an Ur/Web expression. And the meaning is when\nyou click on this link,",
    "start": "2814200",
    "end": "2820290"
  },
  {
    "text": "please run this expression\nto generate the new page that should be displayed. In this case, we're\ncalling a function called",
    "start": "2820290",
    "end": "2826000"
  },
  {
    "text": "chat, which is defined up here. And here's what it is.",
    "start": "2826000",
    "end": "2834990"
  },
  {
    "text": "I won't go too much\ninto the details. But we have a few\nmore SQL queries using a variety of\nstandard library functions",
    "start": "2834990",
    "end": "2841280"
  },
  {
    "text": "for different ways of\nusing queried results. We generate this HTML page.",
    "start": "2841280",
    "end": "2846421"
  },
  {
    "text": "And we say, you're\nin the chat room. Here's the title. We get the same kind\nof escaping there. And there's a form where the\nuser can enter some text.",
    "start": "2846421",
    "end": "2853320"
  },
  {
    "text": "That's the form that I\nused to demonstrate this a few moments ago.",
    "start": "2853320",
    "end": "2858500"
  },
  {
    "text": "And the Submit\nbutton of the form has this ask attribute\nthat is containing say,",
    "start": "2858500",
    "end": "2864250"
  },
  {
    "text": "which is the name of\na function in Ur/Web. And here it is. So when we submit the form,\nwe call this function. Run some more SQLs.",
    "start": "2864250",
    "end": "2871050"
  },
  {
    "text": "Insert a new row into a table. We automatically jump in\nthe ID of the chat room",
    "start": "2871050",
    "end": "2878869"
  },
  {
    "text": "and the text field that\ncame from the form. And these are automatically\nescaped as necessary. But again, you don't have\nto think about escaping",
    "start": "2878870",
    "end": "2885095"
  },
  {
    "text": "in that way in Ur/Web. Because this is just\nsyntax for building a tree. It doesn't stand for a string.",
    "start": "2885095",
    "end": "2892580"
  },
  {
    "text": "So there's no way to have\nstrange things happen with parsing that you\ndon't expect from the way",
    "start": "2892580",
    "end": "2898270"
  },
  {
    "text": "that the syntax is written. Yeah. STUDENT: [INAUDIBLE]? ",
    "start": "2898270",
    "end": "2909740"
  },
  {
    "text": "ADAM CHLIPALA: Yes, so from the\nfact that there's one widget, one GUI widget in this\nform, and its name is text,",
    "start": "2909740",
    "end": "2917700"
  },
  {
    "text": "and that one is a\ntext box, the compiler infers that the record that\nstands for the form result should have one element called\ntext that is of type string.",
    "start": "2917700",
    "end": "2927870"
  },
  {
    "text": "And this encoding the forms,\nthe typing rules for it are not built into the language. You can actually with\nthe type system in Ur",
    "start": "2927870",
    "end": "2935130"
  },
  {
    "text": "express as a library, what are\nthe operations for building forms, and how do you check\nthat they're used correctly,",
    "start": "2935130",
    "end": "2941400"
  },
  {
    "text": "including what\nconsequences they have of the types of\nthe functions that actually handle those forms? ",
    "start": "2941400",
    "end": "2953770"
  },
  {
    "text": "[INAUDIBLE] ",
    "start": "2953770",
    "end": "2959660"
  },
  {
    "text": "Any other questions\nabout this code before I switch to the\nnext step of the sequence",
    "start": "2959660",
    "end": "2965755"
  },
  {
    "text": "in versions from the paper,\nwhich is only a small change? ",
    "start": "2965755",
    "end": "2973552"
  },
  {
    "text": "All right, then here's\nwhat I'm going to do. It's basically taking\nadvantage of a way",
    "start": "2973552",
    "end": "2980860"
  },
  {
    "text": "to get enforced encapsulation\nof different parts of an application\nthat Ur/Web supports, which is at least only\nrarely supported elsewhere.",
    "start": "2980860",
    "end": "2989590"
  },
  {
    "text": "I'm going to take this room. I'm going to take some\nof these definitions here and put them inside\na module that encapsulates",
    "start": "2989590",
    "end": "2995760"
  },
  {
    "text": "some of them as private. In particular, the database\ntables are going to be private.",
    "start": "2995760",
    "end": "3001080"
  },
  {
    "text": "So no one can access\nthem directly. They can only access them\nthrough a set of methods that we provide. So one method runs\ninside a transaction.",
    "start": "3001080",
    "end": "3008388"
  },
  {
    "text": "That's what this type says. And it produces a list\nof records with ID and title fields that stand\nfor which rooms are available.",
    "start": "3008388",
    "end": "3016180"
  },
  {
    "text": "And we'll also just expose\nthis chat operation. And one thing I've\ndone here is I've",
    "start": "3016180",
    "end": "3021370"
  },
  {
    "text": "introduced a name for\nthe concept of an ID. I won't just say that\nan ID is an integer. I'll say it's a new type.",
    "start": "3021370",
    "end": "3028140"
  },
  {
    "text": "And the only way the outside\nworld will ever get one is to list all the rooms. And the only way the outside\nworld can ever use one",
    "start": "3028140",
    "end": "3034990"
  },
  {
    "text": "is to call the chat\nfunction on it. So just like, say,\nthe abstract type of a hash table inside\na hash table class where",
    "start": "3034990",
    "end": "3041870"
  },
  {
    "text": "the details of what is\nan ID and how do they get produced internally are\nprivate to this module.",
    "start": "3041870",
    "end": "3048750"
  },
  {
    "text": "And the client code\nthat calls this module isn't going to need to use them. So I'll use this syntax\nto put everything",
    "start": "3048750",
    "end": "3056640"
  },
  {
    "text": "down here inside the\nmodule so it's not exposed to the rest of\nthe code by default.",
    "start": "3056640",
    "end": "3064199"
  },
  {
    "text": "And we also are going to want\nto implement this rooms method. We already happen\nto have chat around.",
    "start": "3064199",
    "end": "3070180"
  },
  {
    "text": "But we can implement\nrooms in a simple way as using another\nstandard library",
    "start": "3070180",
    "end": "3075480"
  },
  {
    "text": "function for interpreting\na query in a useful way. Let's just select everything\nfrom the room table ordering by title.",
    "start": "3075480",
    "end": "3081120"
  },
  {
    "text": "And as usual, this query\nis type checked for us. And the system determines,\nOK, this expression is going to generate\na list of records",
    "start": "3081120",
    "end": "3086787"
  },
  {
    "text": "that happens to match\nthe type that we declared in the signature of this module. So now outside this\nmodule, no other code",
    "start": "3086787",
    "end": "3093320"
  },
  {
    "text": "is allowed to mention the room\ntable or the message table. So we can, at least\nfrom the perspective of this application,\nenforce whenever",
    "start": "3093320",
    "end": "3100010"
  },
  {
    "text": "invariance we want on them. We can even hide\nsecrets inside of them that would be a security problem\nif some other part of the code",
    "start": "3100010",
    "end": "3107120"
  },
  {
    "text": "was able to get a hold of them. Yeah. STUDENT: But couldn't some\nother part of the code just declare table room as well?",
    "start": "3107120",
    "end": "3113322"
  },
  {
    "text": "ADAM CHLIPALA: That would\nbe a different table. We could do that, actually. It's got to be in here.",
    "start": "3113322",
    "end": "3119619"
  },
  {
    "text": "I think this should have\nno effect on the behavior. I think in this case\nwe're going to get",
    "start": "3119620",
    "end": "3126433"
  },
  {
    "text": "something funny happening. Let's put this in\na different module just to avoid something goofy.",
    "start": "3126434",
    "end": "3135950"
  },
  {
    "text": "Great, so we can do that. And we can do whatever\nwe want with this table. And I'll compile this in\nmaybe about 30 seconds",
    "start": "3135950",
    "end": "3142355"
  },
  {
    "text": "and we'll see what happens. But it's actually\na different table, just like if you have\nthe same private field",
    "start": "3142355",
    "end": "3147609"
  },
  {
    "text": "name across two classes in Java\nthey're different field names. Yeah. STUDENT: [INAUDIBLE]?",
    "start": "3147610",
    "end": "3152770"
  },
  {
    "start": "3152770",
    "end": "3162690"
  },
  {
    "text": "ADAM CHLIPALA: So you're\nsuggesting we have, inside this module,\nan abstract type",
    "start": "3162690",
    "end": "3169070"
  },
  {
    "text": "called room, which contains\nboth the ID and the title. Is that right?",
    "start": "3169070",
    "end": "3174693"
  },
  {
    "text": "STUDENT: [INAUDIBLE]? ",
    "start": "3174693",
    "end": "3185460"
  },
  {
    "text": "So I think what would\nwork to do instead is instead of type\nID have type room,",
    "start": "3185460",
    "end": "3190790"
  },
  {
    "text": "have room determine\na list of rooms, and chat take a\nroom as an input. Is that what you have in mind? So what would happen then is\nwhen we call the chat function,",
    "start": "3190790",
    "end": "3197970"
  },
  {
    "text": "it'll actually be\ncalled via a URL given the way we use this eventually. That would be passing\nthe ID and the title",
    "start": "3197970",
    "end": "3205040"
  },
  {
    "text": "within the URL in the URL\nrepresentation for a function call.",
    "start": "3205040",
    "end": "3210700"
  },
  {
    "text": "And we only need the ID to\nimplement that function. So it would be a little\nwasteful of space and might look gross\nto the user to have",
    "start": "3210700",
    "end": "3216526"
  },
  {
    "text": "to have the title passed\nalong as an extra argument in the invocation\nof chat via a URL.",
    "start": "3216526",
    "end": "3223136"
  },
  {
    "text": "Does that make sense? Or maybe another\nway of saying it,",
    "start": "3223136",
    "end": "3228336"
  },
  {
    "text": "if I have this one [INAUDIBLE],\nis look up at the URL bar.",
    "start": "3228336",
    "end": "3234410"
  },
  {
    "text": "The ID of the channel\nwe're going into is serialized automatically\nin the URL at the end here.",
    "start": "3234410",
    "end": "3240985"
  },
  {
    "text": "And if we were\npassing a record that contained an ID and\na title, the title would be serialized, too,\nwhich is at least a little",
    "start": "3240985",
    "end": "3247312"
  },
  {
    "text": "counterintuative. ",
    "start": "3247312",
    "end": "3253300"
  },
  {
    "text": "OK, the last thing we\nneed to do-- actually, it might be instructive to\nmake just a shallow change",
    "start": "3253300",
    "end": "3261339"
  },
  {
    "text": "to this code, reference the\nroom module there, and then try to access the room\ntable like before.",
    "start": "3261340",
    "end": "3268177"
  },
  {
    "text": "This shouldn't be allowed. This would be like being\nable to read and write the private fields\nof a class in Java.",
    "start": "3268177",
    "end": "3274300"
  },
  {
    "text": "And indeed, we get a pretty\nstraightforward message basically saying, this right\nhere is an unbound variable.",
    "start": "3274300",
    "end": "3282130"
  },
  {
    "text": "There's no table\ncalled room in scope. And we could mention\nthis extra one that we created just for fun.",
    "start": "3282130",
    "end": "3287700"
  },
  {
    "text": "But then it would be\na different table. It wouldn't be a problem\nthat we could access that.",
    "start": "3287700",
    "end": "3293050"
  },
  {
    "text": "So instead, what we should do is\nI'll break this into two parts. ",
    "start": "3293050",
    "end": "3299330"
  },
  {
    "text": "We'll start out by just\ncalling the rooms method, and then do a slightly different\nthing to read its elements,",
    "start": "3299330",
    "end": "3306930"
  },
  {
    "text": "map over the list of results\nthat gives-- what did I call",
    "start": "3306930",
    "end": "3312884"
  },
  {
    "text": "[INAUDIBLE]? ",
    "start": "3312884",
    "end": "3321112"
  },
  {
    "text": "Map all the list of results\ninstead of the other way it was working, which was roughly\nequivalent except for using",
    "start": "3321112",
    "end": "3327465"
  },
  {
    "text": "different data types. Let's see how this goes. All right, so I'll go back here.",
    "start": "3327465",
    "end": "3336740"
  },
  {
    "text": "And we can do all the\ntremendously exciting things we could do before.",
    "start": "3336740",
    "end": "3343109"
  },
  {
    "text": "But we have this encapsulation. And you can sort of think\nof this room structure as now it's a library,\nand you can call this",
    "start": "3343109",
    "end": "3349264"
  },
  {
    "text": "from all sorts of\ndifferent places that want to have\nthis functionality. You don't have to worry. There's different\nplaces that are going to break the internal\ninvariance of the system.",
    "start": "3349264",
    "end": "3356540"
  },
  {
    "text": "Maybe you want to know that\nonce a message is added, it will never be deleted. It's always there in the logs.",
    "start": "3356540",
    "end": "3362160"
  },
  {
    "text": "This structure enforces\nthat independently of which other code the room\nmodule might be composed with, for instance.",
    "start": "3362160",
    "end": "3367575"
  },
  {
    "text": " Yeah. STUDENT: Say you change\nthe definition of room,",
    "start": "3367575",
    "end": "3373589"
  },
  {
    "text": "[INAUDIBLE]. What's going to happen\nto the database table? ADAM CHLIPALA: It'll\nbe a little sad.",
    "start": "3373589",
    "end": "3379220"
  },
  {
    "text": "We'll have to manually run\nan alter table command if you want to save the old data.",
    "start": "3379220",
    "end": "3386680"
  },
  {
    "text": "But when the\napplication starts up, it queries the system\ndatabase catalog and checks",
    "start": "3386680",
    "end": "3391769"
  },
  {
    "text": "that the schema still\nmatches what it expects. So you'll get a\nstatic error then. And that will hopefully give\nyou a hint about what you",
    "start": "3391770",
    "end": "3397940"
  },
  {
    "text": "should change in the database. STUDENT: But it\nwouldn't automatically drop your database or something? ADAM CHLIPALA: I hope not.",
    "start": "3397940",
    "end": "3403138"
  },
  {
    "text": "I don't think it should do that. And you can imagine\ntweaking the compiler to understand the\nevolution of a database.",
    "start": "3403138",
    "end": "3408830"
  },
  {
    "text": "I think you have to write\nalter table commands to run. It doesn't do that right now. ",
    "start": "3408830",
    "end": "3417190"
  },
  {
    "text": "OK, so now let's talk about\ncross site request forgery",
    "start": "3417190",
    "end": "3422800"
  },
  {
    "text": "and preventing it. Actually, before\nwe do that, let's look at the code on this page.",
    "start": "3422800",
    "end": "3429750"
  },
  {
    "text": "We have a traditional\nlooking HTML form that gets generated here. And there's certainly no cross\nsite request forgery protection",
    "start": "3429750",
    "end": "3437150"
  },
  {
    "text": "in here, which I think is good. Because as I understand\ncross site request forgery,",
    "start": "3437150",
    "end": "3442660"
  },
  {
    "text": "the problem is there's\nsome implicit context that your application\nsends on every request. So there's some\nattacker out there",
    "start": "3442660",
    "end": "3448370"
  },
  {
    "text": "who doesn't know your\nimplicit context. Let's say your password\nis stored in a cookie, for a really simple example.",
    "start": "3448370",
    "end": "3454020"
  },
  {
    "text": "And when the attacker tricks\nyou into following a link to the application, your browser\nsends the implicit context",
    "start": "3454020",
    "end": "3459240"
  },
  {
    "text": "automatically and\ncauses the application to do something the attacker\ncould not have done directly.",
    "start": "3459240",
    "end": "3464580"
  },
  {
    "text": "In this case, there's\nno implicit context. So there's no risk of a\ncross site request forgery.",
    "start": "3464580",
    "end": "3469899"
  },
  {
    "text": "Does anyone want to dispute\nthat characterization before I go on? It could be educational for me.",
    "start": "3469899",
    "end": "3474910"
  },
  {
    "text": " All right, so now let's\nadd some implicit context.",
    "start": "3474910",
    "end": "3480390"
  },
  {
    "text": "And the system is\nautomatically going to deploy the right\ncountermeasures based on program analysis\nthat realizes now there's implicit context.",
    "start": "3480390",
    "end": "3488660"
  },
  {
    "text": "In particular, we just\nthrow in a cookie here.",
    "start": "3488660",
    "end": "3494222"
  },
  {
    "start": "3494222",
    "end": "3500173"
  },
  {
    "text": "As another example of\nmodule capsulation, actually, I'll put in a whole\nsort of user authentication",
    "start": "3500174",
    "end": "3505723"
  },
  {
    "text": "system where we have the user\naccounts and abstract types",
    "start": "3505723",
    "end": "3511829"
  },
  {
    "text": "of IDs and passwords. So you can't just build the\nvalue of either of these types directly.",
    "start": "3511830",
    "end": "3517295"
  },
  {
    "text": "You'll have to go\nthrough some kind of approved method of building\nvalues of these types.",
    "start": "3517295",
    "end": "3525400"
  },
  {
    "text": "And I'm actually going to\nexpose the table directly in the signature.",
    "start": "3525400",
    "end": "3531340"
  },
  {
    "text": "And I'll put a\nconstraint on it, too, saying the ID form\nis a key for it. [INAUDIBLE] ",
    "start": "3531340",
    "end": "3538160"
  },
  {
    "text": "But the thing is,\non this user table, ID and password\nare abstract types. So the code can't actually\nlook at the password.",
    "start": "3538160",
    "end": "3546579"
  },
  {
    "text": "And it can't generate\nall IDs in sequence and try them against this table.",
    "start": "3546580",
    "end": "3552470"
  },
  {
    "text": "Because the type is abstract. There's no way to make an ID. There's no way to\nmake a password. They just come\nout of this table, and they're opaque tokens.",
    "start": "3552470",
    "end": "3558393"
  },
  {
    "text": " But we might want to allow\nthem to be input from strings.",
    "start": "3558393",
    "end": "3567640"
  },
  {
    "text": "You might want to allow\none direction of conversion between strings and these types. So that's what I'll do here.",
    "start": "3567640",
    "end": "3573495"
  },
  {
    "text": "Basically, the details I\ndon't want to try to explain. But this is like\na declaration, OK,",
    "start": "3573495",
    "end": "3578910"
  },
  {
    "text": "you're allowed to\nconvert strings into IDs. For those who speak Haskell,\nthis is a type class instant.",
    "start": "3578910",
    "end": "3584130"
  },
  {
    "text": "For those who don't,\nit's permission to turn strings into IDs. We're going to leave out\nthe other permission.",
    "start": "3584130",
    "end": "3591040"
  },
  {
    "text": "We don't want to be able to\nturn an ID back into anything. And the password--\nlet's do the same thing.",
    "start": "3591040",
    "end": "3598635"
  },
  {
    "text": "We want to be able to read\na password from the user but not take a password\nand turn it into a string",
    "start": "3598635",
    "end": "3604709"
  },
  {
    "text": "where we can actually tell\nwhat the user entered. So other parts of\nthe code will be able to accept password\ninput from the user,",
    "start": "3604709",
    "end": "3610880"
  },
  {
    "text": "convert it into this type, and\nship it off to the user module and have it be checked.",
    "start": "3610880",
    "end": "3616820"
  },
  {
    "text": "But what they can't do\nis query the user table and get all the passwords in\na form where they can actually",
    "start": "3616820",
    "end": "3622309"
  },
  {
    "text": "extract the text from them. Then we can have a login method\nthat takes these two components",
    "start": "3622310",
    "end": "3632438"
  },
  {
    "text": "and just runs for its side\neffects, which is effectively what that code says. We'll also need a way to\ntell which user is logged in.",
    "start": "3632438",
    "end": "3640814"
  },
  {
    "text": "That is a code that\nruns a transaction that produces an ID.",
    "start": "3640814",
    "end": "3646730"
  },
  {
    "text": "All right, so step one, we\ncan just copy this definition. ",
    "start": "3646730",
    "end": "3654566"
  },
  {
    "text": "And I'll fill in what\nthese actually are. It turns out-- surprise,\nsurprise-- user IDs and passwords are both strings.",
    "start": "3654566",
    "end": "3659910"
  },
  {
    "text": "But outside the module,\nthat won't be exposed. And now we're going\nto create a cookie.",
    "start": "3659910",
    "end": "3665330"
  },
  {
    "text": "So cookies are another thing\nthat's built into the language. Effectively, they act like\nmutable global variables",
    "start": "3665330",
    "end": "3672220"
  },
  {
    "text": "that have one copy per client\nthat uses your application. So we're going to create a\ncookie that on each client",
    "start": "3672220",
    "end": "3678940"
  },
  {
    "text": "will store basically just a\ncopy of the same two fields",
    "start": "3678940",
    "end": "3684102"
  },
  {
    "text": "that we have here. So this cookie is\nprivate to this module. Other parts of the code won't\nbe able to read the cookie,",
    "start": "3684102",
    "end": "3690470"
  },
  {
    "text": "because they just don't have\nthis private field and scope. So no one else will be\nable to see directly the ID and password that\nare stored for this user.",
    "start": "3690470",
    "end": "3698089"
  },
  {
    "text": "But they will be persisted\nacross different page views, just like you would expect\nfor cookies usually.",
    "start": "3698090",
    "end": "3705594"
  },
  {
    "text": "I'm going to give it a\nlogin function that's going to run some incantation\nto check against the database",
    "start": "3705594",
    "end": "3713460"
  },
  {
    "text": "whether this is really a correct\npair of username and password. It'll just check,\ncan we find a row",
    "start": "3713460",
    "end": "3720302"
  },
  {
    "text": "in the database that has this\nuser ID and has this password?",
    "start": "3720302",
    "end": "3725945"
  },
  {
    "text": " If we find one, then yes,\ngood, that's the correct value.",
    "start": "3725945",
    "end": "3733450"
  },
  {
    "text": "Let's just save it\ninto the cookie. We use a method that\nmodifies the cookie value. And we have to put\nsome things in here,",
    "start": "3733450",
    "end": "3740180"
  },
  {
    "text": "like just for simplicity, I'll\nsay this cookie never expires. And I don't want\nto run SSL here,",
    "start": "3740180",
    "end": "3746660"
  },
  {
    "text": "so I'll say it doesn't\nneed to be secure. But if you really\ncare about security,",
    "start": "3746660",
    "end": "3752220"
  },
  {
    "text": "obviously you would\nwrite secure equals true. And if the check failed,\nthen we can-- I don't know.",
    "start": "3752220",
    "end": "3758300"
  },
  {
    "text": "It doesn't matter. If it signals an\nerror, execution stops with this\nerror description.",
    "start": "3758300",
    "end": "3764720"
  },
  {
    "text": "Finally, we can\ncreate this function that tells who the user\nis logged in as by getting",
    "start": "3764720",
    "end": "3770230"
  },
  {
    "text": "the current cookie value. And then it might be\nnone if the user hasn't",
    "start": "3770230",
    "end": "3777320"
  },
  {
    "text": "logged in yet, in which case,\nwe can have a different error message. Or it might be some\nrecord of exactly the type",
    "start": "3777320",
    "end": "3785070"
  },
  {
    "text": "we used up there. So I'll just copy\nsome of this here. ",
    "start": "3785070",
    "end": "3794762"
  },
  {
    "text": "Let's run the same check there. If it worked, then\nwe'll just return the ID part of the\nrecord that we just",
    "start": "3794762",
    "end": "3801480"
  },
  {
    "text": "verified against the database.  Otherwise, [INAUDIBLE].",
    "start": "3801480",
    "end": "3806940"
  },
  {
    "start": "3806940",
    "end": "3814062"
  },
  {
    "text": "So let me just type check this\nto see if this is on track,",
    "start": "3814062",
    "end": "3819496"
  },
  {
    "text": "that part-- Oops, capital Id.",
    "start": "3819496",
    "end": "3824930"
  },
  {
    "start": "3824930",
    "end": "3833369"
  },
  {
    "text": "All right, so the\nimportant is there's all those implementation details. But from outside this\nmodule, we think of it",
    "start": "3833370",
    "end": "3839083"
  },
  {
    "text": "in terms of the\ninterface up there. There are some unknown\ntypes of IDs and passwords. This table of users\nexpressed in terms of them",
    "start": "3839083",
    "end": "3846780"
  },
  {
    "text": "were allowed to turn strings\ninto IDs and passwords, but not the other way around. And we have these two methods\nto log in in the first place",
    "start": "3846780",
    "end": "3853795"
  },
  {
    "text": "and to check which user is\nlogged in at this point.",
    "start": "3853795",
    "end": "3858829"
  },
  {
    "text": "Any question about this? Yeah. STUDENT: Do you need to\nexpose the user table? ",
    "start": "3858830",
    "end": "3864510"
  },
  {
    "text": "ADAM CHLIPALA: Because I want to\nuse it as a foreign key later. That was the reason I did it. It's not that great of a reason.",
    "start": "3864510",
    "end": "3870472"
  },
  {
    "text": " All right, so we're\nalmost at the point",
    "start": "3870472",
    "end": "3876290"
  },
  {
    "text": "where I can show you CSRF\nprotection in action. We have to actually\nstart logging in. So that's easy enough to do.",
    "start": "3876290",
    "end": "3884030"
  },
  {
    "start": "3884030",
    "end": "3890400"
  },
  {
    "text": "OK, so what can we do here? Let's just add another part\nof this page that says,",
    "start": "3890400",
    "end": "3896696"
  },
  {
    "text": "here's where you log in. ",
    "start": "3896696",
    "end": "3902660"
  },
  {
    "text": "This is the form. ",
    "start": "3902660",
    "end": "3910681"
  },
  {
    "text": "This is where you would put\nthe username and the password. ",
    "start": "3910681",
    "end": "3922540"
  },
  {
    "text": "And then click on the button. It's trying to go to call\na function called login, which we'll define in a moment.",
    "start": "3922540",
    "end": "3929369"
  },
  {
    "start": "3929370",
    "end": "3936230"
  },
  {
    "text": "Let's define login as a\nfunction that does these things.",
    "start": "3936230",
    "end": "3943090"
  },
  {
    "text": "It's actually just a wrapper\naround calling the login function from that module where\nwe take each of the components",
    "start": "3943090",
    "end": "3951270"
  },
  {
    "text": "and convert it from string\nto the abstract types. That's what read error is doing. Error means if it doesn't\nwork, just abort execution",
    "start": "3951270",
    "end": "3958090"
  },
  {
    "text": "instead of signaling the failure\nwith a special return value. ",
    "start": "3958090",
    "end": "3964279"
  },
  {
    "text": "Here's both of those, login\nand then jump to main. So now we should\nbe able to log in. Let's check if that's true.",
    "start": "3964279",
    "end": "3970252"
  },
  {
    "text": " OK, so that was [INAUDIBLE].",
    "start": "3970252",
    "end": "3976106"
  },
  {
    "start": "3976106",
    "end": "3982500"
  },
  {
    "text": "We'll probably want to create an\naccount to allow us to log in. So let me [INAUDIBLE].",
    "start": "3982500",
    "end": "3987550"
  },
  {
    "start": "3987550",
    "end": "3994655"
  },
  {
    "text": "So now I should be\nable to log in as a. OK, and take my word for it.",
    "start": "3994655",
    "end": "4000359"
  },
  {
    "text": "There's now a cookie set\nto record that information. And then let's go back in the\nchat room and send a message.",
    "start": "4000360",
    "end": "4007510"
  },
  {
    "text": "We didn't actually add any\naccess control here yet. So there's not\nmuch going on here. But we can check to see.",
    "start": "4007510",
    "end": "4013851"
  },
  {
    "text": "There's a cookie. But the system has\ndetermined that we're not using the cookie.",
    "start": "4013852",
    "end": "4018970"
  },
  {
    "text": "When we submit this form,\nthe cookie is not read. So there's actually no need to\nadd any CSRF protection here",
    "start": "4018970",
    "end": "4024492"
  },
  {
    "text": "yet. So now we have to add the\nway to use the cookie. And then we should see\nthe protection appear. Yeah.",
    "start": "4024492",
    "end": "4029974"
  },
  {
    "text": "STUDENT: What are the\ncontents of the cookie? ADAM CHLIPALA: What are\nthe contents of the cookie? The contents are exactly what\nyou'd expect from the code.",
    "start": "4029974",
    "end": "4035130"
  },
  {
    "text": "In other words, the\ncookie is declared as having type this record,\nan ID, and a password.",
    "start": "4035130",
    "end": "4041670"
  },
  {
    "text": "So that's exactly\nwhat's in there in a particular serialized form. ",
    "start": "4041670",
    "end": "4049930"
  },
  {
    "text": "So now let's actually\nuse the cookie. And we should hopefully\nsee despite the fact we're going to use\nthe cookie indirectly,",
    "start": "4049930",
    "end": "4056995"
  },
  {
    "text": "because we're going to use it in\nthe room module, which doesn't even have the cookie in scope. But we'll call methods of the\nuser module, which indirectly",
    "start": "4056995",
    "end": "4064675"
  },
  {
    "text": "are using the cookie. And then the system\nwill realize that means we have dependency on it. So let's make this really\nsimple and just say",
    "start": "4064675",
    "end": "4075671"
  },
  {
    "text": "call the whoami method.  And I'm actually just\ngoing to ignore this.",
    "start": "4075671",
    "end": "4082520"
  },
  {
    "text": "Or we can do this. Let's decide this a user we\ncreated is really special.",
    "start": "4082520",
    "end": "4087710"
  },
  {
    "text": "And only this user is\nallowed to post anything.",
    "start": "4087710",
    "end": "4092938"
  },
  {
    "start": "4092938",
    "end": "4098426"
  },
  {
    "text": "And we'll fail if we're not a. All right, let's\nsee if this works.",
    "start": "4098427",
    "end": "4105413"
  },
  {
    "text": "Did I forget a slash somewhere? Oh, yeah. ",
    "start": "4105413",
    "end": "4115392"
  },
  {
    "text": "[INAUDIBLE] ",
    "start": "4115392",
    "end": "4128367"
  },
  {
    "text": "Oh, I expect him to be a string. But it's actually an ID.",
    "start": "4128367",
    "end": "4133910"
  },
  {
    "text": "So let's just read a into\nan ID just like we did below",
    "start": "4133910",
    "end": "4139979"
  },
  {
    "text": "to process login. And we haven't\nexposed that the ID",
    "start": "4139979",
    "end": "4145509"
  },
  {
    "text": "type supports equality testing. So I'll just add that\nto the user module.",
    "start": "4145510",
    "end": "4150540"
  },
  {
    "text": "And then that should work. ID supports equality testing.",
    "start": "4150540",
    "end": "4156160"
  },
  {
    "text": "And we should be OK. So now we've brought\nin the interface. Now we can do more things\nwith the ID, which could",
    "start": "4156160",
    "end": "4163648"
  },
  {
    "text": "trigger some security issues. But it lets us add this\naccess control check, so let's see how that works,\ngo back to the main page",
    "start": "4163648",
    "end": "4174560"
  },
  {
    "text": "to [INAUDIBLE]. ",
    "start": "4174560",
    "end": "4185471"
  },
  {
    "text": "All right, now the\nform automatically has a hidden input\nname sig, which",
    "start": "4185472",
    "end": "4190549"
  },
  {
    "text": "is a cryptographic signature\nof the values of all of the cookies. And it's signed using a key\nthat's a secret for the server.",
    "start": "4190550",
    "end": "4200380"
  },
  {
    "text": "And when the form is\nsubmitted, the application knows, because the\ncompiler told it,",
    "start": "4200380",
    "end": "4206360"
  },
  {
    "text": "that it should be checking\nsignatures for the following set of operations. In this case, the only\none is this say operation.",
    "start": "4206360",
    "end": "4213460"
  },
  {
    "text": "Yeah. STUDENT: Does the signature have\nany sort of time stamp as well? ADAM CHLIPALA: It does\nnot have a time stamp.",
    "start": "4213460",
    "end": "4219785"
  },
  {
    "text": "STUDENT: Otherwise, if the\nattacker ever saw this live, they could pretend\nto be the user.",
    "start": "4219785",
    "end": "4225311"
  },
  {
    "text": "It never expires. ADAM CHLIPALA: It\nnever expires, right. So that's something that\ncould be changed just",
    "start": "4225311",
    "end": "4232354"
  },
  {
    "text": "by modifying the\nlanguage implementation without modifying\nthe applications, and then deployed instantly.",
    "start": "4232354",
    "end": "4237668"
  },
  {
    "text": "But it's not there now. And I can see why that could\nbe a useful thing to add.",
    "start": "4237668",
    "end": "4243476"
  },
  {
    "text": "Question, yeah. STUDENT: You could also fix that\nby just putting an [INAUDIBLE] as well.",
    "start": "4243476",
    "end": "4249440"
  },
  {
    "text": "ADAM CHLIPALA: That's true. You're right, you can\nchange the application to purposely modify the\ncookie data frequently enough",
    "start": "4249440",
    "end": "4254750"
  },
  {
    "text": "that the signature\nwould go out of date. That's also true. ",
    "start": "4254750",
    "end": "4270000"
  },
  {
    "text": "So we've got 10 minutes left. Any requests for things that\nsomeone particularly wants to see before class is over?",
    "start": "4270000",
    "end": "4276026"
  },
  {
    "text": " I can start showing some\nAjax stuff by default",
    "start": "4276026",
    "end": "4281930"
  },
  {
    "text": "if no one has another request. ",
    "start": "4281930",
    "end": "4290245"
  },
  {
    "text": "Yeah. STUDENT: Can you remap the URLs? ADAM CHLIPALA: You can, yes.",
    "start": "4290245",
    "end": "4296854"
  },
  {
    "text": "So what remapping\nwould you like to see? STUDENT: Any. I just want to\nsee how it's done.",
    "start": "4296854",
    "end": "4301923"
  },
  {
    "text": "ADAM CHLIPALA: OK,\nso the compiler is assigning-- as we\ncan see back over here,",
    "start": "4301923",
    "end": "4308210"
  },
  {
    "text": "we called the say function. And basically,\nthat function call is serialized as a\nparticular URL form. Maybe we don't like that form.",
    "start": "4308210",
    "end": "4314560"
  },
  {
    "text": "We decide we're going\nto rewrite URL so say",
    "start": "4314560",
    "end": "4320615"
  },
  {
    "text": "is inside the room\nmodule, inside demo.",
    "start": "4320615",
    "end": "4327696"
  },
  {
    "text": "Better put this\nup top so it runs before these other rewrites--\nrewrite url Demo/Room/say",
    "start": "4327696",
    "end": "4334620"
  },
  {
    "text": "into Demo/Room/speak. ",
    "start": "4334620",
    "end": "4342045"
  },
  {
    "text": "And hopefully that's\nwhat I want it to. Let's see what happens.",
    "start": "4342045",
    "end": "4347985"
  },
  {
    "start": "4347985",
    "end": "4354915"
  },
  {
    "text": "Yep, and you can have\nwild cards in those rules also to map one\nprefix to another one.",
    "start": "4354915",
    "end": "4361170"
  },
  {
    "text": " And the compiler will\nenforce that every function",
    "start": "4361170",
    "end": "4367100"
  },
  {
    "text": "has a distinct URL schema. So if you add a rule\nthat causes a clash, you'll get [INAUDIBLE].",
    "start": "4367100",
    "end": "4373842"
  },
  {
    "text": "By default, the\nautomatically generated URL schemes are [INAUDIBLE]. You can break that by\nusing this feature.",
    "start": "4373842",
    "end": "4383602"
  },
  {
    "text": "Any other requests? Yeah. STUDENT: So you mentioned\nthat the HTML [INAUDIBLE]",
    "start": "4383602",
    "end": "4393220"
  },
  {
    "text": "is not compiler specific. It's like one is a library. Are there other libraries\nfor other formats as well?",
    "start": "4393220",
    "end": "4400790"
  },
  {
    "text": "ADAM CHLIPALA: There\nare other libraries that don't do type checking\nat the same level of richness.",
    "start": "4400790",
    "end": "4407351"
  },
  {
    "text": "But for instance,\nthere's a library for serializing and\nde-serializing JSON.",
    "start": "4407352",
    "end": "4412580"
  },
  {
    "text": "And most of the\nautomated way that's driven by type structure. So you can do things like\nthat that aren't as integrated",
    "start": "4412580",
    "end": "4420364"
  },
  {
    "text": "with the compiler. ",
    "start": "4420364",
    "end": "4427039"
  },
  {
    "text": "Yeah. STUDENT: Presumably you'd\nstill want to write JavaScript. Is there any--",
    "start": "4427040",
    "end": "4432435"
  },
  {
    "text": "ADAM CHLIPALA: I don't. You do. STUDENT: Right, no, but\nfor, say, I don't know,",
    "start": "4432435",
    "end": "4438029"
  },
  {
    "text": "you want to animate\nthings on the page. There are still things where-- ADAM CHLIPALA: Let me load\nthe Ajax version of this.",
    "start": "4438029",
    "end": "4443140"
  },
  {
    "text": "And that might\nanswer your question.  [INAUDIBLE]",
    "start": "4443140",
    "end": "4448618"
  },
  {
    "start": "4448618",
    "end": "4469036"
  },
  {
    "text": "All right, so this version\nhas client side code. Let's just [INAUDIBLE]. ",
    "start": "4469036",
    "end": "4481010"
  },
  {
    "text": "Believe it or not, this time\nthe add worked by an Ajax call. And you get things like,\nhere's a button tag.",
    "start": "4481010",
    "end": "4492349"
  },
  {
    "text": "And it has an onclick\nattribute that when a user clicks the button,\nall this code here runs on the client side.",
    "start": "4492350",
    "end": "4498330"
  },
  {
    "text": "But it's Ur/Web code. It's not JavaScript code. The compiler translates\nit into JavaScript for you",
    "start": "4498330",
    "end": "4503360"
  },
  {
    "text": "and guarantees that it maintains\nthe properties that we want for the abstractions\nin our list,",
    "start": "4503360",
    "end": "4509387"
  },
  {
    "text": "as long as the user isn't\nmucking around with it manually [INAUDIBLE].",
    "start": "4509388",
    "end": "4515279"
  },
  {
    "text": "STUDENT: I'm more\nthinking that there are a lot of\n[INAUDIBLE] libraries out there today that do useful\nthings, and in many cases",
    "start": "4515279",
    "end": "4522344"
  },
  {
    "text": "complex things if you want to\nrecode everything yourself. Is there any way interfacing\nJavaScript from Ur/Web?",
    "start": "4522345",
    "end": "4528355"
  },
  {
    "text": "ADAM CHLIPALA: Yes, there's\na foreign function interface, which lets you give Ur/Web\nfunction names to JavaScript",
    "start": "4528355",
    "end": "4533670"
  },
  {
    "text": "function names and call. But then whenever you use the\nforeign function interface, you don't get all of these nice\nproperties like construction",
    "start": "4533670",
    "end": "4541641"
  },
  {
    "text": "anymore. You have to be very careful. And to some extend, you have to\nunderstand the implementations of some of these abstractions\nto avoid disturbing them.",
    "start": "4541641",
    "end": "4548050"
  },
  {
    "text": " While I have this code up\nhere, let me just show you.",
    "start": "4548050",
    "end": "4556244"
  },
  {
    "text": "We still have the same say\nfunction as before, roughly. But now, instead of\ncalling it via a link, we just take the\nfunction call, which",
    "start": "4556245",
    "end": "4562860"
  },
  {
    "text": "is populated with arguments\nthat come about from the context of this onclick handler.",
    "start": "4562860",
    "end": "4568640"
  },
  {
    "text": "And we just wrap that function\ncalled inside the RPC syntax. And that means this is a\nfunction call on the client,",
    "start": "4568640",
    "end": "4574680"
  },
  {
    "text": "but run the call itself\non the server with access to the database and\nother server resources, and then shift the\nresult back over here.",
    "start": "4574680",
    "end": "4582020"
  },
  {
    "text": "And it's written in\nthis direct style here instead of the\ncallbacks that you need to use in\nJavaScript usually",
    "start": "4582020",
    "end": "4588150"
  },
  {
    "text": "to accomplish a remote\nserver call [INAUDIBLE]. Yeah. STUDENT: [INAUDIBLE]?",
    "start": "4588150",
    "end": "4593620"
  },
  {
    "start": "4593620",
    "end": "4598717"
  },
  {
    "text": "ADAM CHLIPALA: The\nclient is allowed to call anything in scope. So you just have to\nuse scope the way we usually use it to\nhide private fields",
    "start": "4598717",
    "end": "4606410"
  },
  {
    "text": "and so forth inside\nof an abstraction. ",
    "start": "4606410",
    "end": "4617420"
  },
  {
    "text": "I mean, because\nthere's a call here, the functions we're\nallowed to call are the ones whose\nnames are in scope.",
    "start": "4617420",
    "end": "4624530"
  },
  {
    "text": "This name happens to\nnot be in scope here. So we couldn't call\nit directly here. But because it's\nin scope up there,",
    "start": "4624530",
    "end": "4629667"
  },
  {
    "text": "we're allowed to call it. ",
    "start": "4629667",
    "end": "4636128"
  },
  {
    "text": "Did I see another hand? ",
    "start": "4636128",
    "end": "4643583"
  },
  {
    "text": "Let's see, is\nthere anything else interesting about this version\nthat I wanted to mention? ",
    "start": "4643583",
    "end": "4652070"
  },
  {
    "text": "It involves an implementation\nof a GUI widget using this functional\nreactive style, which is cool from a programming\nmodularity perspective",
    "start": "4652070",
    "end": "4660059"
  },
  {
    "text": "but maybe less interesting\nfrom a security perspective. But here's an example of calling\na method of this abstraction",
    "start": "4660060",
    "end": "4667210"
  },
  {
    "text": "of a portion of the\npage that displays a list of lines of\ntext that you can add to but never delete from.",
    "start": "4667210",
    "end": "4673470"
  },
  {
    "text": "And you can actually\nenforce that. Because we don't\nhave the dom here. It's not that any\npart of the code can reach into the document\ntree and mutate it and change",
    "start": "4673470",
    "end": "4681424"
  },
  {
    "text": "the log and delete lines\nthat were previously added.  The more functional\nstyle here means",
    "start": "4681424",
    "end": "4687675"
  },
  {
    "text": "you can actually have\na GUI widget that owns a part of the\npage and controls exactly what's shown there,\nand bugs and other code",
    "start": "4687675",
    "end": "4693710"
  },
  {
    "text": "can't interfere with\ncomputing what shows up there. ",
    "start": "4693710",
    "end": "4701570"
  },
  {
    "text": "This is probably\ngood point to stop, unless there are\nany last questions.",
    "start": "4701570",
    "end": "4706735"
  },
  {
    "text": "STUDENT: Channels? ADAM CHLIPALA: Channels. I don't think there's enough\ntime to properly demonstrate",
    "start": "4706735",
    "end": "4712284"
  },
  {
    "text": "channels. But there's code in the paper. And there are all sorts\nof demos and tutorials on the website for this project.",
    "start": "4712285",
    "end": "4719250"
  },
  {
    "text": "Yeah. STUDENT: It's really hard\nwriting correct [INAUDIBLE] and compilers. How do you mitigate\nproblems that",
    "start": "4719250",
    "end": "4726436"
  },
  {
    "text": "might be present from the\nabstraction layers themselves?",
    "start": "4726436",
    "end": "4732284"
  },
  {
    "text": "ADAM CHLIPALA: Get people\nto use it and report bugs. That's the best I have for you.",
    "start": "4732284",
    "end": "4738060"
  },
  {
    "text": "I guess the idea is\ncompilers like this should be written\nmuch less frequently",
    "start": "4738060",
    "end": "4743550"
  },
  {
    "text": "than new applications. So to condense all the bug\nfinding in this one place is still an improvement,\neven if it's not",
    "start": "4743550",
    "end": "4749586"
  },
  {
    "text": "done in a particularly\nprincipled way. Yeah. STUDENT: Just out\nof curiosity, how",
    "start": "4749586",
    "end": "4755538"
  },
  {
    "text": "are [INAUDIBLE] files handled? ADAM CHLIPALA: You can\nuse that configuration file I showed to map them\ninto parts of the URL space.",
    "start": "4755538",
    "end": "4764090"
  },
  {
    "text": "Or you can manually\nproduce values in the program that\nstand for files",
    "start": "4764090",
    "end": "4769630"
  },
  {
    "text": "and ask to return those\nas the result of the page. There are a few\ndifferent approaches.",
    "start": "4769630",
    "end": "4775319"
  },
  {
    "text": "Yeah. STUDENT: Why Ur? ADAM CHLIPALA: You're\nasking how I chose the name? STUDENT: Yeah, like why--",
    "start": "4775319",
    "end": "4781064"
  },
  {
    "text": "ADAM CHLIPALA: Oh, you're\nasking why you want to use this. STUDENT: No, no, the\nname of the language, just out of curiosity.",
    "start": "4781064",
    "end": "4787850"
  },
  {
    "text": "ADAM CHLIPALA: So Ur language\nis a concept from linguistics to describe the language\nthat is the ancestor",
    "start": "4787850",
    "end": "4795175"
  },
  {
    "text": "of the modern languages. And the idea is\nin this language, you can embed all sorts of\nother languages inside it.",
    "start": "4795175",
    "end": "4800958"
  },
  {
    "text": "So it's sort of the\nancestor of all those. ",
    "start": "4800958",
    "end": "4803419"
  }
]