[
  {
    "start": "0",
    "end": "41000"
  },
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "6357"
  },
  {
    "start": "6357",
    "end": "18600"
  },
  {
    "text": "MICHAEL SIPSER: So,\nwelcome, everybody, to the Fall 2020 online\nIntroduction to the Theory",
    "start": "18600",
    "end": "28140"
  },
  {
    "text": "of Computing 18.404/6.840.",
    "start": "28140",
    "end": "33770"
  },
  {
    "text": "My name is Mike Sipser. I'm going to be your instructor\nfor the semester in this class.",
    "start": "33770",
    "end": "41850"
  },
  {
    "start": "41000",
    "end": "266000"
  },
  {
    "text": "So let me just tell you\nwhat the course is about. Basically, it's going\nto be in two halves.",
    "start": "41850",
    "end": "47625"
  },
  {
    "text": "We're going to be talking\nabout what are the capabilities and limitations of computers--\nof computer algorithms,",
    "start": "47625",
    "end": "52850"
  },
  {
    "text": "really, computation. And the two parts of the\ncourse are more or less divided",
    "start": "52850",
    "end": "59240"
  },
  {
    "text": "in half. The first half of\nthe course is going to talk about a subject called\ncomputability theory, which",
    "start": "59240",
    "end": "66275"
  },
  {
    "text": "it really asks what\nyou can compute with an algorithm in principle.",
    "start": "66275",
    "end": "72079"
  },
  {
    "text": "That's-- was an active area of\nresearch in the earlier part of the 20th century.",
    "start": "72080",
    "end": "77090"
  },
  {
    "text": "It's pretty much closed\noff as a research subject these days, mainly\nbecause they answered",
    "start": "77090",
    "end": "83329"
  },
  {
    "text": "all of their big questions. And so a mathematical\nfield really only",
    "start": "83330",
    "end": "88850"
  },
  {
    "text": "stays vital when it\nhas problems to solve, and they really solved all of\ntheir interesting problems--",
    "start": "88850",
    "end": "95810"
  },
  {
    "text": "for the most part, not 100%. But for the most part, it sort\nof finished off in the 1950s--",
    "start": "95810",
    "end": "102382"
  },
  {
    "text": "just to say a little bit\nmore about what we're going to talk about there. When you're interested to\nknow what kinds of problems",
    "start": "102383",
    "end": "108410"
  },
  {
    "text": "you can solve with\nan algorithm-- there are problems\nthat you might want to solve that\nyou just can't solve.",
    "start": "108410",
    "end": "114350"
  },
  {
    "text": "For example, given a\nspecification for a computer",
    "start": "114350",
    "end": "120650"
  },
  {
    "text": "problem you want\nto solve, whatever that specification might be-- say your algorithm\nactually is a sorting",
    "start": "120650",
    "end": "127790"
  },
  {
    "text": "algorithm, for example-- and you want to write\ndown that specification and have an automatic\nverifier that's",
    "start": "127790",
    "end": "133490"
  },
  {
    "text": "going to check whether a\nprogram meets the specification. Well, that's just in\nprinciple impossible.",
    "start": "133490",
    "end": "140330"
  },
  {
    "text": "You cannot make a verifier\nwhich is going to answer,",
    "start": "140330",
    "end": "146360"
  },
  {
    "text": "in all cases, whether or not\na program meets a certain specification. So with things like that,\nwe will prove this semester.",
    "start": "146360",
    "end": "155030"
  },
  {
    "text": "Questions about\nmathematical truth-- if you're given a mathematical\nstatement, is it true or is it false?",
    "start": "155030",
    "end": "161870"
  },
  {
    "text": "It'd be great if you can\nwrite a computer program that would answer that problem. Well, it would not be great\nif you were a mathematician,",
    "start": "161870",
    "end": "167930"
  },
  {
    "text": "because that would put\nus all out of business. But you can imagine that\nmight be a nice thing to have,",
    "start": "167930",
    "end": "173390"
  },
  {
    "text": "but you can't. I mean, there is no algorithm\nwhich can answer that question. ",
    "start": "173390",
    "end": "179090"
  },
  {
    "text": "Well, along the way, we're\ngoing to introduce models of computation, like finite\nautomata, which we'll see today, Turing machines,\nand some other models",
    "start": "179090",
    "end": "187160"
  },
  {
    "text": "that we'll see along the way. The second half of\nthe course, which is going to be\nafter the midterm, we're going to\nshift gears and talk",
    "start": "187160",
    "end": "193418"
  },
  {
    "text": "about complexity theory, which\nis instead of looking at what's computable in\nprinciple, you're going to look at what's computable\nin practice, so things",
    "start": "193418",
    "end": "200900"
  },
  {
    "text": "that you can solve in a\nreasonable amount of time. And, for example,\nI'm sure many of you",
    "start": "200900",
    "end": "207080"
  },
  {
    "text": "are aware of the factoring\nproblem, which has connections to the RSA cryptosystem,\ncryptography, and asks",
    "start": "207080",
    "end": "218720"
  },
  {
    "text": "whether you can factor\nbig numbers quickly. That's a problem we\ndon't know the answer to.",
    "start": "218720",
    "end": "226470"
  },
  {
    "text": "We just don't know how to\nfactor big numbers quickly. But it's possible that there\nare algorithms out there that we haven't discovered\nyet that can do so.",
    "start": "226470",
    "end": "233220"
  },
  {
    "text": "It's connected with\nthis very famous problem in the intersection\nof computer science and mathematics called the\nP versus NP problem, which",
    "start": "233220",
    "end": "240060"
  },
  {
    "text": "many of you may have heard of. We'll talk about that. We'll spend a lot of\ntime on that this term.",
    "start": "240060",
    "end": "246299"
  },
  {
    "text": "And along the way, we'll\ntalk about different measures of complexity, of\ncomputation, time and space,",
    "start": "246300",
    "end": "252120"
  },
  {
    "text": "time and memory, theoretical\nmemory, electrical space. That's going to be a big part\nof the course in the complexity",
    "start": "252120",
    "end": "260250"
  },
  {
    "text": "theory part-- introduce other\nmodels of computation, such as probabilistic and\ninteractive computation.",
    "start": "260250",
    "end": "267000"
  },
  {
    "start": "266000",
    "end": "554000"
  },
  {
    "text": "Talk about the\nexpectations of the course. First of all, prerequisites. There are a bunch of\nprerequisites listed, 6.042,",
    "start": "267000",
    "end": "275770"
  },
  {
    "text": "18.062 , or maybe some\nother subject as well. The real thing is that\nthis is a math class.",
    "start": "275770",
    "end": "283139"
  },
  {
    "text": "This is a class where-- and it's not a\nbeginning math class, this is a moderate-to-advanced\nmath class.",
    "start": "283140",
    "end": "289170"
  },
  {
    "text": "And I'm expecting\npeople to have had some prior experience,\nof a substantial nature,",
    "start": "289170",
    "end": "295289"
  },
  {
    "text": "with mathematical\ntheorems and proofs. We'll start off slow, but we're\ngoing to ramp up pretty fast.",
    "start": "295290",
    "end": "302820"
  },
  {
    "text": "So if you haven't\nreally got the idea or gotten comfortable with\ndoing proofs, coming up",
    "start": "302820",
    "end": "309550"
  },
  {
    "text": "with proofs to\nmathematical statements, that's going to be a concern. I would just be\nmonitoring yourself",
    "start": "309550",
    "end": "316600"
  },
  {
    "text": "and seeing how you're doing. Because the homeworks\nand the exams are going to count on\nyour being able to produce",
    "start": "316600",
    "end": "323470"
  },
  {
    "text": "proofs, and so you're\ngoing to be struggling if that's going to be a real--",
    "start": "323470",
    "end": "330010"
  },
  {
    "text": "something that you haven't\nhad experience with. And let me talk a little\nbit about the role",
    "start": "330010",
    "end": "335740"
  },
  {
    "text": "of theory in computer science. This is a theory\nclass, as you know.",
    "start": "335740",
    "end": "343330"
  },
  {
    "text": "So before we jump\ninto the material, I just thought it would\nbe worth it for you",
    "start": "343330",
    "end": "348970"
  },
  {
    "text": "to give you at\nleast my perspective on the role of theoretical\ncomputer science within the field.",
    "start": "348970",
    "end": "355150"
  },
  {
    "text": "So I've been in computer\nscience for a long time.",
    "start": "355150",
    "end": "360699"
  },
  {
    "text": "I go back-- I'm sure I'm\ngetting to be a dinosaur here-- but I go back to the days\nwhen you had punch cards.",
    "start": "360700",
    "end": "366880"
  },
  {
    "text": "That's what we did when\nI was an undergraduate. And, obviously, things\nare very different now.",
    "start": "366880",
    "end": "373600"
  },
  {
    "text": "And you can argue\nthat computer science as a discipline has matured,\nand sort of the basic stuff",
    "start": "373600",
    "end": "381970"
  },
  {
    "text": "has all been solved. Well, I would say there's\na certain truth to that, but there's a\ncertain way in which",
    "start": "381970",
    "end": "387340"
  },
  {
    "text": "I would say that's not true. I think we're still\nat the very beginning, at least in certain\nrespects, of computer science",
    "start": "387340",
    "end": "393790"
  },
  {
    "text": "as a discipline. For one thing, there\nare a lot of things that we do, a lot of things\nrelating to computation,",
    "start": "393790",
    "end": "402490"
  },
  {
    "text": "that we just don't know\nthe answer to-- very fundamental things. Let's take as an example,\nhow does the brain work?",
    "start": "402490",
    "end": "409840"
  },
  {
    "text": "Obviously, the brain computes\nin a certain fashion. ",
    "start": "409840",
    "end": "416190"
  },
  {
    "text": "And we've made good\nprogress, you can argue, with machine learning and all\nof those things that have very--",
    "start": "416190",
    "end": "424030"
  },
  {
    "text": "very powerful and\ndoing very cool things. But I would also say that at\nsome deeper level, the methods",
    "start": "424030",
    "end": "435030"
  },
  {
    "text": "that we have so far don't allow\nus to understand creativity.",
    "start": "435030",
    "end": "443250"
  },
  {
    "text": "We're not close to being able to\ncreate a computer program that can do mathematics\nor that can do",
    "start": "443250",
    "end": "449550"
  },
  {
    "text": "many of the creative\nkinds of things that human beings can do. ",
    "start": "449550",
    "end": "454949"
  },
  {
    "text": "I think machine learning,\npowerful as it is, is really successful only for\na very narrow set of tasks.",
    "start": "454950",
    "end": "461800"
  },
  {
    "text": "And so I think there's probably\nsomething deeper and more",
    "start": "461800",
    "end": "468870"
  },
  {
    "text": "fundamental going on\nthat we're missing. That would be my hunch. Now, whether something like\ntheoretical computer science is",
    "start": "468870",
    "end": "476670"
  },
  {
    "text": "going to give you an answer\nthere-- or this kind of theory, or some kind of theory-- I think some kind of theory\nhas at least a decent shot",
    "start": "476670",
    "end": "484500"
  },
  {
    "text": "at playing a role in helping\nus to understand computation in a deeper way. And the fact that we can't\nunderstand something as basic",
    "start": "484500",
    "end": "491970"
  },
  {
    "text": "as, can you factor a big\nnumber quickly or not? You can't really say you\nunderstand computation",
    "start": "491970",
    "end": "498600"
  },
  {
    "text": "until you can answer\nquestions like that. So I would argue that\nwe have a really very",
    "start": "498600",
    "end": "504210"
  },
  {
    "text": "primitive understanding of\ncomputation at this stage and that there is a lot that\nhas yet to be discovered,",
    "start": "504210",
    "end": "512490"
  },
  {
    "text": "not just on the\ntechnological side, but just on the very fundamental\ntheoretical side that has a real shot at playing\na role in affecting",
    "start": "512490",
    "end": "519330"
  },
  {
    "text": "the practice of how\nwe use computers. And so I think for\nthat reason-- again,",
    "start": "519330",
    "end": "524670"
  },
  {
    "text": "I'm not sure what kind of theory\nis going to be the most useful, but the theory we're going\nto cover in this course is a particularly\nelegant theory,",
    "start": "524670",
    "end": "531270"
  },
  {
    "text": "and it has already paid\noff in many applications and in terms of our\nunderstanding of computation.",
    "start": "531270",
    "end": "536860"
  },
  {
    "text": "And I think, at least\nas a starting point, it's a good subject to learn.",
    "start": "536860",
    "end": "543990"
  },
  {
    "text": "Certainly, I enjoy it, and\nI've spent a good chunk of my career doing that.",
    "start": "543990",
    "end": "551140"
  },
  {
    "text": "So let's move on then and begin\nwith the subject material.",
    "start": "551140",
    "end": "564770"
  },
  {
    "start": "554000",
    "end": "678000"
  },
  {
    "text": "So we're going to talk\nabout models of computation, as I mentioned.",
    "start": "564770",
    "end": "571480"
  },
  {
    "text": "We want to try to\nunderstand computers, and we want to understand\nwhat computers can do. But computers in the real world\nare pretty complicated objects,",
    "start": "571480",
    "end": "579160"
  },
  {
    "text": "and they're really not nice\nto talk about mathematically. So we're going to talk about\nabstract models of computers",
    "start": "579160",
    "end": "584950"
  },
  {
    "text": "that are much simpler\nbut really capture-- just like models in general-- capture the important\naspects of the thing",
    "start": "584950",
    "end": "591310"
  },
  {
    "text": "we're trying to understand. And so we're going to look\nat several different kinds",
    "start": "591310",
    "end": "597430"
  },
  {
    "text": "of models that vary in their\ncapabilities and the way they approximate\nthe real computers",
    "start": "597430",
    "end": "603899"
  },
  {
    "text": "that we deal with every day. And for starters, we're going\nto look at a very simple model",
    "start": "603900",
    "end": "610200"
  },
  {
    "text": "called the finite automaton. And that's going to represent--",
    "start": "610200",
    "end": "615210"
  },
  {
    "text": "you can think of it as\nrepresenting a computer that has a very small\namount of memory",
    "start": "615210",
    "end": "620670"
  },
  {
    "text": "and a very limited and\nsmall amount of memory. And we're going to look\nat the capabilities of those kinds of machines.",
    "start": "620670",
    "end": "626610"
  },
  {
    "text": "And what's nice about them is\nthat you can understand them very well. And so more powerful models that\nwe're going to look at later",
    "start": "626610",
    "end": "635760"
  },
  {
    "text": "are going to be harder to\nunderstand in as deep a way. But for these, we can develop\na very comprehensive theory.",
    "start": "635760",
    "end": "646014"
  },
  {
    "text": "And so that's what we're going\nto do for the next lecture and a half. So I'm starting off\nwith an example.",
    "start": "646015",
    "end": "653370"
  },
  {
    "text": "I'm presenting a finite\nautomaton as a diagram--",
    "start": "653370",
    "end": "658430"
  },
  {
    "text": "we call it a state diagram. It has these circles and\nlines and labels on the lines",
    "start": "658430",
    "end": "667670"
  },
  {
    "text": "and also on these circles. So what's going on here? So this is a finite automaton.",
    "start": "667670",
    "end": "673220"
  },
  {
    "text": "I'm giving it the name M1. And it has-- these\ncircles are called states.",
    "start": "673220",
    "end": "682070"
  },
  {
    "start": "678000",
    "end": "1120000"
  },
  {
    "text": "So in this case, there were\nthree states, q1, q2, and q3. Those are the labels there. There are arrows connecting\nstates with each other.",
    "start": "682070",
    "end": "691700"
  },
  {
    "text": "So these we'll call transitions. And they're going\nto tell you how to compute with this device.",
    "start": "691700",
    "end": "698950"
  },
  {
    "text": "And there's going to be a\nspecially-designated starting state, which has an arrow\ncoming in from nowhere.",
    "start": "698950",
    "end": "707410"
  },
  {
    "text": "And there are other\nspecially-designated states called accepting\nstates, and that's going to have to do with\nhow the machine computes.",
    "start": "707410",
    "end": "714490"
  },
  {
    "text": "But those are the ones that\nhave these double circles. And so talking about\nthe way it computes,",
    "start": "714490",
    "end": "720730"
  },
  {
    "text": "the idea is pretty simple. The input is going to\nbe some finite string of 0's and 1's, in this case.",
    "start": "720730",
    "end": "726860"
  },
  {
    "text": "We might have other types\nof symbols that are allowed for other automata, but the\nexample that I have here,",
    "start": "726860",
    "end": "733690"
  },
  {
    "text": "it's going to be 0's and 1's. And the way you\ncompute with the thing is you first put your finger--",
    "start": "733690",
    "end": "740779"
  },
  {
    "text": "which I can't do on Zoom,\nso I'll use the pointer-- you put your pointer\non the starting state,",
    "start": "740780",
    "end": "747370"
  },
  {
    "text": "the one that has the arrow\ncoming in from nowhere. First, you put\nyour pointer there.",
    "start": "747370",
    "end": "753880"
  },
  {
    "text": "And then are you\nstart reading symbols from the input,\none after the next.",
    "start": "753880",
    "end": "760170"
  },
  {
    "text": "So let's take an\nexample here, 01101. So you start reading\nthose symbols,",
    "start": "760170",
    "end": "766790"
  },
  {
    "text": "and you follow\nthose transitions. So you go 0-- and you go back\nto the same state.",
    "start": "766790",
    "end": "772550"
  },
  {
    "text": "Then you go-- the\nnext symbol is a 1, so you go over to this\nstate, from q1 to q2.",
    "start": "772550",
    "end": "778910"
  },
  {
    "text": "Now you have another\none that comes in. So now you're starting at\nq2, you have another one, so you follow its\nassociated transition.",
    "start": "778910",
    "end": "786150"
  },
  {
    "text": "So if you notice,\nevery state has an outgoing transition for 1\nand another outgoing transition",
    "start": "786150",
    "end": "793640"
  },
  {
    "text": "for 0. So there's always somewhere to\ngo every time you read symbols from the input.",
    "start": "793640",
    "end": "798660"
  },
  {
    "text": "So now you're at q2. You read that next, that\nthird symbol, which is a 1. That's going to\ntake you over to q3.",
    "start": "798660",
    "end": "805760"
  },
  {
    "text": "And now you have a\n0, which loops you back to where you were, and\nanother 1, which loops you",
    "start": "805760",
    "end": "812839"
  },
  {
    "text": "back to where you were. And because you ended\nup at an accept,",
    "start": "812840",
    "end": "819920"
  },
  {
    "text": "you say we accept that string. So that's going to be the\noutput of this finite automaton.",
    "start": "819920",
    "end": "829100"
  },
  {
    "text": "For each string,\nit's either going to accept it or reject it. So it's just a binary decision\nthat is going to be made.",
    "start": "829100",
    "end": "835620"
  },
  {
    "text": "It's sort of like\na 1 or a 0 output, but we're calling\nit accept or reject. So this one here,\nbecause it ended up",
    "start": "835620",
    "end": "843079"
  },
  {
    "text": "at the accepting\nstate, is accepted. But if you look at the\nsecond example, 00101,",
    "start": "843080",
    "end": "850560"
  },
  {
    "text": "so you're going to\nhave 0, 0, 1, 0, 1.",
    "start": "850560",
    "end": "856310"
  },
  {
    "text": "Now we ended up at q2. That's not an accepting state. So therefore, we say\nwe reject this input.",
    "start": "856310",
    "end": "865350"
  },
  {
    "text": "OK? Very simple. And now, for example,\none of the questions you might want to ask,\ngiven one of these things,",
    "start": "865350",
    "end": "871432"
  },
  {
    "text": "is, well, which are\nexactly those strings that the machine accepts?",
    "start": "871432",
    "end": "876560"
  },
  {
    "text": "And a little bit of\nthought will help",
    "start": "876560",
    "end": "882730"
  },
  {
    "text": "you understand that\nthe only strings which are going to take you over\nto q3 are those strings that",
    "start": "882730",
    "end": "889000"
  },
  {
    "text": "have a 11 appearing\nsomewhere along the way, two consecutive 1's, and you will\nend up at the accepting state.",
    "start": "889000",
    "end": "895810"
  },
  {
    "text": " I encourage you to think\nabout that for a minute",
    "start": "895810",
    "end": "901180"
  },
  {
    "text": "if not immediately obvious. But those are the\nstrings that are going to be accepted by this machine.",
    "start": "901180",
    "end": "908470"
  },
  {
    "text": "And we call that\ncollection of strings the language of the machine.",
    "start": "908470",
    "end": "915680"
  },
  {
    "text": "So that set A of\nthose strings that have a 11, for this particular\nmachine, is the language of M1.",
    "start": "915680",
    "end": "924680"
  },
  {
    "text": "We also say that M1 recognizes\nthat language, recognizes A.",
    "start": "924680",
    "end": "930000"
  },
  {
    "text": "And in terms of notation,\nwe write that A is L of M1. A is the language of M1.",
    "start": "930000",
    "end": "936290"
  },
  {
    "text": "So the language of a machine\nis exactly the set of strings that machine accepts.",
    "start": "936290",
    "end": "942810"
  },
  {
    "text": "OK? So one of the first things we're\ngoing to want to be able to do is take a machine\nand understand what",
    "start": "942810",
    "end": "948720"
  },
  {
    "text": "its language is, what's\nthe set of strings that that machine accepts. Another thing we might want\nto do is, given a language,",
    "start": "948720",
    "end": "954300"
  },
  {
    "text": "build a machine which\nrecognizes that language.",
    "start": "954300",
    "end": "959370"
  },
  {
    "text": "And then understanding, what\nare the class of languages? Can you get any language\nfrom some machine, or are there going to be some\nlanguages that you can do",
    "start": "959370",
    "end": "966330"
  },
  {
    "text": "and other languages\nthat you cannot do? So those are the\nkinds of questions we're going to be asking\nabout these finite automata.",
    "start": "966330",
    "end": "972540"
  },
  {
    "text": "What kinds of things\ncan those machines do, and what can they not do?",
    "start": "972540",
    "end": "978240"
  },
  {
    "text": "OK. Here's our next check-in.",
    "start": "978240",
    "end": "983565"
  },
  {
    "text": " So wake up, everybody\nwho's not paying attention.",
    "start": "983565",
    "end": "990959"
  },
  {
    "text": "A check-in is coming. So we have more\nquestions, though I can't keep-- are these\nthree statements equivalent?",
    "start": "990960",
    "end": "999550"
  },
  {
    "text": "What three statements? AUDIENCE: At the\nbottom of the slide.",
    "start": "999550",
    "end": "1005579"
  },
  {
    "text": "MICHAEL SIPSER: Oh,\noh, oh, oh, oh, yes. Those three are equivalent. A is the language-- yeah,\nthose mean the same thing.",
    "start": "1005580",
    "end": "1012010"
  },
  {
    "text": "Not only are they equivalent,\nbut they're just different ways of saying the same thing.",
    "start": "1012010",
    "end": "1017730"
  },
  {
    "text": "That M1 recognizes\nthe language is the same as saying that's\nthe language of the machine and that A equals\nthat L of M. That's",
    "start": "1017730",
    "end": "1025650"
  },
  {
    "text": "all the same way of saying they\nall-- six of one, half a dozen of the other. It's two ways of\nsaying the same thing.",
    "start": "1025650",
    "end": "1032339"
  },
  {
    "text": "OK, so let's pop up our\npoll and get that started.",
    "start": "1032339",
    "end": "1038314"
  },
  {
    "text": "Whoops.  Still showing the old\none-- oh, here we go.",
    "start": "1038315",
    "end": "1043770"
  },
  {
    "text": "Move it to the next question. OK. ",
    "start": "1043770",
    "end": "1051810"
  },
  {
    "text": "OK, so you understand\nthe question here?",
    "start": "1051810",
    "end": "1057410"
  },
  {
    "text": "Where do we end up\nafter we read 101? What state are we in? ",
    "start": "1057410",
    "end": "1066280"
  },
  {
    "text": "Do we end up in\nstate q1, q2, or q3? ",
    "start": "1066280",
    "end": "1072300"
  },
  {
    "text": "OK? Go fast. This is a--",
    "start": "1072300",
    "end": "1077780"
  },
  {
    "text": " OK, so I think we got\npretty much converged here.",
    "start": "1077780",
    "end": "1088200"
  },
  {
    "text": "I think almost\neverybody got it right. The answer is indeed that\nyou ended up in state q2.",
    "start": "1088200",
    "end": "1096480"
  },
  {
    "text": "Because you go 1,\n0, 1, and that's where you ended up, in state q2.",
    "start": "1096480",
    "end": "1101550"
  },
  {
    "text": "So is this string accepted? No, because you didn't\nend up at an accept state.",
    "start": "1101550",
    "end": "1107220"
  },
  {
    "text": "So this machine rejects 101. OK, let's keep going.",
    "start": "1107220",
    "end": "1115050"
  },
  {
    "text": "So now-- yeah. ",
    "start": "1115050",
    "end": "1121679"
  },
  {
    "start": "1120000",
    "end": "1441000"
  },
  {
    "text": "OK, so now we gave\nit this informal idea of a finite automaton. We're going to have to try to\nget a formal definition now,",
    "start": "1121680",
    "end": "1129300"
  },
  {
    "text": "which is going to be a more\nmathematical way of saying the same thing that I just said.",
    "start": "1129300",
    "end": "1136250"
  },
  {
    "text": "And the reason for having\na formal definition is, for one thing, it allows\nus to be very precise.",
    "start": "1136250",
    "end": "1142370"
  },
  {
    "text": "Then we'll know exactly what\nwe mean by a finite automaton, and it should answer any\nquestions about what counts",
    "start": "1142370",
    "end": "1147470"
  },
  {
    "text": "and what doesn't count. It also is a way of\nproviding notation.",
    "start": "1147470",
    "end": "1152970"
  },
  {
    "text": "So it'll help us\ndescribe finite automata. And sometimes there might be an\nautomaton where the picture is",
    "start": "1152970",
    "end": "1159860"
  },
  {
    "text": "just too big, so you might\nwant to be able to describe it in some mathematical\nterminology rather",
    "start": "1159860",
    "end": "1165530"
  },
  {
    "text": "than by giving a picture. Or maybe you're\ngoing to be asked to give a family\nof automata, where",
    "start": "1165530",
    "end": "1170960"
  },
  {
    "text": "there is going to be a\nparameter, N, associated with the class of\nlanguages you're trying",
    "start": "1170960",
    "end": "1178190"
  },
  {
    "text": "to describe with the automaton. And then it'll be more\nhelpful to describe it in this formal notation rather\nthan as a kind of a picture,",
    "start": "1178190",
    "end": "1186920"
  },
  {
    "text": "because it might be\ninfinitely many pictures that are being needed.",
    "start": "1186920",
    "end": "1192000"
  },
  {
    "text": "So maybe examples of\nthat will come up now. So a finite automaton,\nwe call it a 5-tuple.",
    "start": "1192000",
    "end": "1198530"
  },
  {
    "text": "Don't be put off by that. A 5-tuple is just a\nlist of five things. So a finite automaton,\nin our definition,",
    "start": "1198530",
    "end": "1206480"
  },
  {
    "text": "is going to have\nfive components. It's going to have\nQ, which is going",
    "start": "1206480",
    "end": "1211970"
  },
  {
    "text": "to be a finite set\nof states, so it's going to be a finite set,\nwhich we'll designate",
    "start": "1211970",
    "end": "1217400"
  },
  {
    "text": "as the states of the automaton. Sigma is the alphabet\nsymbols of the automaton,",
    "start": "1217400",
    "end": "1223040"
  },
  {
    "text": "another finite set.  Delta is the\ntransition function.",
    "start": "1223040",
    "end": "1229460"
  },
  {
    "text": "That tells us how the automaton\nmoves from state to state. Those describes how\nthose transition arrows--",
    "start": "1229460",
    "end": "1237650"
  },
  {
    "text": "those arrows which connected\nthe states with each other-- it describes them in\na mathematical way",
    "start": "1237650",
    "end": "1243290"
  },
  {
    "text": "instead in terms of a picture. And the way I'm doing\nthat is with a function. So delta is a function\nwhich takes two things.",
    "start": "1243290",
    "end": "1251430"
  },
  {
    "text": "So I'm hoping you've seen\nthis notation before. I'll help you through\nit once, but this",
    "start": "1251430",
    "end": "1256502"
  },
  {
    "text": "is the kind of\nthing I would expect you to have seen already. So we have Q cross sigma.",
    "start": "1256502",
    "end": "1261920"
  },
  {
    "text": "So I'm going to give delta a\nstate and an alphabet symbol.",
    "start": "1261920",
    "end": "1269150"
  },
  {
    "text": "So Q is states, sigma\nis alphabet symbols. So you're going to get a\nstate and an alphabet symbol,",
    "start": "1269150",
    "end": "1275510"
  },
  {
    "text": "and it's going to\ngive you back a state. So describing it kind of\na little bit more detail,",
    "start": "1275510",
    "end": "1286980"
  },
  {
    "text": "delta, if you give it state\nq and symbol a equals r,",
    "start": "1286980",
    "end": "1293400"
  },
  {
    "text": "that means q, when you\nread an a, you go to r. So that's the way this\npicture gets translated",
    "start": "1293400",
    "end": "1300950"
  },
  {
    "text": "into a mathematical\nfunction, which describes those transitions.",
    "start": "1300950",
    "end": "1307420"
  },
  {
    "text": "And then now q0 is going\nto be the starting state. That's the one with the\narrow coming in from nowhere.",
    "start": "1307420",
    "end": "1313059"
  },
  {
    "text": "And F is the set of\naccepting states. So there's only going to\nbe one starting state,",
    "start": "1313060",
    "end": "1319360"
  },
  {
    "text": "but there might be\nseveral different-- or possibly even 0-- accepting states. That's all legal when we\nhave a finite automaton.",
    "start": "1319360",
    "end": "1327550"
  },
  {
    "text": "And so in terms of\nusing the notation-- going back to the machine that\nwe just had from the previous slide, which I've\ngiven you here again--",
    "start": "1327550",
    "end": "1334240"
  },
  {
    "text": "let me show you how\nI would describe this using this notation that\ncomes out of the definition. So here is M1 again.",
    "start": "1334240",
    "end": "1341049"
  },
  {
    "text": "It's this 5-tuple where Q\nnow is the set-- q1, q2, q3--",
    "start": "1341050",
    "end": "1346330"
  },
  {
    "text": "that's the set of states. The input alphabet is 0, 1.",
    "start": "1346330",
    "end": "1352210"
  },
  {
    "text": "It might vary in other automata. And f is the set q3,\nwhich has only the element",
    "start": "1352210",
    "end": "1358179"
  },
  {
    "text": "q3, because this has just\none accept state, q3. So I hope that's helpful.",
    "start": "1358180",
    "end": "1366080"
  },
  {
    "text": "Oh, of course, I forgot the\ntransition function, which here I'm describing as a table.",
    "start": "1366080",
    "end": "1371720"
  },
  {
    "text": "So the transition\nfunction says if you",
    "start": "1371720",
    "end": "1378429"
  },
  {
    "text": "have a state and\nan input alphabet, you can look up in\nthe table where you're",
    "start": "1378430",
    "end": "1384070"
  },
  {
    "text": "supposed to go under\nthe transition function according to the state\nand the alphabet symbol",
    "start": "1384070",
    "end": "1392440"
  },
  {
    "text": "that you're given. So, for example, if we were\nin state q2 here getting a 0,",
    "start": "1392440",
    "end": "1402730"
  },
  {
    "text": "then q2 goes back to q1\nso that q2 on 0 is q1. But q2 on 1 here is q3.",
    "start": "1402730",
    "end": "1412080"
  },
  {
    "text": "OK? So that's how that table\ncaptures this picture. OK?",
    "start": "1412080",
    "end": "1417538"
  },
  {
    "text": "And it's just a function. It's a way of representing a\nfunction, a finite function,",
    "start": "1417538",
    "end": "1425360"
  },
  {
    "text": "in terms of this table here. So I realize, for some\nof you, this may be slow.",
    "start": "1425360",
    "end": "1433920"
  },
  {
    "text": "We will ramp up\nin speed, but I'm trying to get us all\ntogether in terms of the language of the\ncourse here at the beginning.",
    "start": "1433920",
    "end": "1441620"
  },
  {
    "start": "1441000",
    "end": "1785000"
  },
  {
    "text": "OK, so now let's\ntalk about some more",
    "start": "1441620",
    "end": "1447800"
  },
  {
    "text": "the computation, so\nstrings and languages.",
    "start": "1447800",
    "end": "1455130"
  },
  {
    "text": "A string is just\na finite sequence of symbols from the alphabet. ",
    "start": "1455130",
    "end": "1461730"
  },
  {
    "text": "This class is not going to\ntalk about infinite strings. All of our strings are\ngoing to be finite.",
    "start": "1461730",
    "end": "1468490"
  },
  {
    "text": "There's other mathematical\ntheories of automata and so on that talk\nabout infinite inputs and infinite strings.",
    "start": "1468490",
    "end": "1474210"
  },
  {
    "text": "We're not going to\ntalk about that.  Maybe rarely, we'll\nmake it very clear,",
    "start": "1474210",
    "end": "1481760"
  },
  {
    "text": "we'll talk about\nan infinite string, but that's going\nto be an exception. And a language is\na set of strings.",
    "start": "1481760",
    "end": "1488730"
  },
  {
    "text": "That's the traditional way\nthat people in this subject",
    "start": "1488730",
    "end": "1496190"
  },
  {
    "text": "refer to a set of strings. They call it a language--\nreally because the subject had its roots in\nlinguistics, actually.",
    "start": "1496190",
    "end": "1502958"
  },
  {
    "text": "And they were talking\nabout-- they're trying to understand\nlanguages, human languages.",
    "start": "1502958",
    "end": "1508620"
  },
  {
    "text": "So this is just a\nhistorical fact, and that's the\nterminology that's stuck. OK, so two special string--",
    "start": "1508620",
    "end": "1515540"
  },
  {
    "text": "a special string and\na special language. The empty string is\nthe string of length 0. This is a totally\nlegitimate string",
    "start": "1515540",
    "end": "1523040"
  },
  {
    "text": "that you are going to\nrun into now and then. And there's the\nempty language, which is the set with no strings.",
    "start": "1523040",
    "end": "1529740"
  },
  {
    "text": "These are not the same. They're not even of the\nsame type of object. So don't confuse them\nwith one another.",
    "start": "1529740",
    "end": "1537220"
  },
  {
    "text": "I mean, you can have\na set, a language, which has just one element,\nwhich is the empty string.",
    "start": "1537220",
    "end": "1543030"
  },
  {
    "text": "That is not the empty set. That is a set-- that is\nnot the empty language. That is a language that\nhas one element in it,",
    "start": "1543030",
    "end": "1549400"
  },
  {
    "text": "namely, the empty string. So those are separate things. OK, so here's a little bit of\na mouthful here on the slide,",
    "start": "1549400",
    "end": "1558430"
  },
  {
    "text": "defining what it means for an\nautomaton to accept its input--",
    "start": "1558430",
    "end": "1563590"
  },
  {
    "text": "accepts its input string w. And we can define that formally.",
    "start": "1563590",
    "end": "1568620"
  },
  {
    "text": "And it's a little\ntechnical looking, it's really not that bad.",
    "start": "1568620",
    "end": "1574150"
  },
  {
    "text": "So if you have your\ninput string w, which you can write as\na sequence of symbols",
    "start": "1574150",
    "end": "1579870"
  },
  {
    "text": "in the alphabet-- w1, w2, dot\ndot dot, wn, so like 01001.",
    "start": "1579870",
    "end": "1586740"
  },
  {
    "text": "I'm just writing it out\nsymbol by symbol here. So what does it mean for the\nmachine to accept that input?",
    "start": "1586740",
    "end": "1595080"
  },
  {
    "text": "So that means that there's\na sequence of states in the machine, sequence of\nstates of members of Q. So",
    "start": "1595080",
    "end": "1604025"
  },
  {
    "text": "a sequence from Q,\nthese are the states of the machine that satisfy\nthese three properties down",
    "start": "1604025",
    "end": "1610450"
  },
  {
    "text": "here. First of all-- and I'm\nthinking about the sequence that the machine goes through\nas it's processing the input w.",
    "start": "1610450",
    "end": "1621980"
  },
  {
    "text": "So when does it accept w? If that sequence has the feature\nthat it starts at the start",
    "start": "1621980",
    "end": "1628220"
  },
  {
    "text": "state, each state legally\nfollows the previous state",
    "start": "1628220",
    "end": "1633730"
  },
  {
    "text": "according to the\ntransition function. So that says the i-th\nmember of the sequence",
    "start": "1633730",
    "end": "1642570"
  },
  {
    "text": "is obtained by looking\nat the previous one-- the i minus first member of\nthat sequence, the i minus",
    "start": "1642570",
    "end": "1649320"
  },
  {
    "text": "first state in that\nsequence-- and then looking at what happens when\nyou take the i-th input symbol.",
    "start": "1649320",
    "end": "1656269"
  },
  {
    "text": "So as you look at the previous\nstate and the next input symbol, you should\nget the next state. That's all that this is saying.",
    "start": "1656270",
    "end": "1662450"
  },
  {
    "text": "And this should happen for\neach one of these guys. And lastly, for\nthis to be accepted,",
    "start": "1662450",
    "end": "1668570"
  },
  {
    "text": "the very last member\nhere, where we ended up at the end of the input-- so you only care about this\nat the end of the input--",
    "start": "1668570",
    "end": "1675170"
  },
  {
    "text": "you have to be in\nan accepting state. So you can mathematically\ncapture this notion",
    "start": "1675170",
    "end": "1681290"
  },
  {
    "text": "of going along this path.  And that's what--",
    "start": "1681290",
    "end": "1687299"
  },
  {
    "text": "I'm just trying to illustrate\nthat we could describe all this very formally-- I'm not saying that's the\nbest way to think about it all",
    "start": "1687300",
    "end": "1692760"
  },
  {
    "text": "the time-- but that it can be done. And I think that's something\nworth appreciating.",
    "start": "1692760",
    "end": "1699240"
  },
  {
    "text": "OK. So now in terms of, again,\ngetting back-- we've said this once\nalready, but in terms",
    "start": "1699240",
    "end": "1704610"
  },
  {
    "text": "of the languages that\nthe machine recognizes, it's the collection of strings\nthat the machine accepts.",
    "start": "1704610",
    "end": "1710710"
  },
  {
    "text": "Every machine accepts-- it\nmight accept many strings, but it always recognizes\none particular language,",
    "start": "1710710",
    "end": "1719890"
  },
  {
    "text": "even if the machine\naccepts no strings-- then it recognizes\nthe empty language. So a machine always\nrecognizes one language,",
    "start": "1719890",
    "end": "1728429"
  },
  {
    "text": "but it may have many, many\nstrings that it's accepting. And we call that language\nthe language of the machine.",
    "start": "1728430",
    "end": "1734760"
  },
  {
    "text": "And we say that M\nrecognizes that language. These three things\nmean the same thing. ",
    "start": "1734760",
    "end": "1742280"
  },
  {
    "text": "OK? And now important definition-- I try to reserve the\nmost important things or the highlighted things to\nbe in this light blue color,",
    "start": "1742280",
    "end": "1749179"
  },
  {
    "text": "if you can see that. We say a language is\na regular language",
    "start": "1749180",
    "end": "1754310"
  },
  {
    "text": "if there's some finite\nautomaton that recognizes it. OK?",
    "start": "1754310",
    "end": "1760090"
  },
  {
    "text": "So there are going to be some\nlanguages that have associated to them finite automata that\nactually solve those languages,",
    "start": "1760090",
    "end": "1766120"
  },
  {
    "text": "that recognize those languages. But there might be\nother languages-- and we'll see examples-- where\nyou just can't solve them.",
    "start": "1766120",
    "end": "1771520"
  },
  {
    "text": "You can't recognize them\nwith a finite automaton. Those languages will not\nbe regular languages. The regular ones are\nthe ones that you",
    "start": "1771520",
    "end": "1778269"
  },
  {
    "text": "can do with a finite automaton. That's the traditional\nterminology.",
    "start": "1778270",
    "end": "1783770"
  },
  {
    "text": "OK, so let's continue. Let's go on from there. So let's do a\ncouple of examples. Here, again, is that same--",
    "start": "1783770",
    "end": "1790010"
  },
  {
    "start": "1785000",
    "end": "2016000"
  },
  {
    "text": "getting to be an old\nfriend, that automaton M1. ",
    "start": "1790010",
    "end": "1796280"
  },
  {
    "text": "Remember, its language\nhere is the set of strings that have\nthe substring 11.",
    "start": "1796280",
    "end": "1802520"
  },
  {
    "text": "That is that\nlanguage A. Now, what",
    "start": "1802520",
    "end": "1808050"
  },
  {
    "text": "do we know about A from\nthe previous slide? Think with me.",
    "start": "1808050",
    "end": "1813690"
  },
  {
    "text": "Don't just listen. A is a regular language\nnow, because it's",
    "start": "1813690",
    "end": "1818899"
  },
  {
    "text": "recognized by some automaton. So whenever you\nfind an automaton",
    "start": "1818900",
    "end": "1827910"
  },
  {
    "text": "for a language, a finite\nautomaton for language, we know that that language\nis a regular language.",
    "start": "1827910",
    "end": "1834568"
  },
  {
    "text": "So let's look at a\ncouple of more examples. So if you take the language-- let's call this one B, which\nis the strings that have",
    "start": "1834568",
    "end": "1842350"
  },
  {
    "text": "an even number of 1's in them. So like the string 1101,\nwould that be in B?",
    "start": "1842350",
    "end": "1851370"
  },
  {
    "text": "No, because it has\nan odd number of 1's. So the string 1111\nhas four 1's in it.",
    "start": "1851370",
    "end": "1857860"
  },
  {
    "text": "That's an even number, so\nthat string would be in B. The 0's don't matter\nfor this language.",
    "start": "1857860",
    "end": "1864000"
  },
  {
    "text": "So strings that have\nan even number of 1's,",
    "start": "1864000",
    "end": "1873760"
  },
  {
    "text": "that's a regular language. And the way you would\nknow that is you would have to make a\nfinite automaton that",
    "start": "1873760",
    "end": "1880389"
  },
  {
    "text": "recognizes that language. And I would encourage you to\ngo and make that automaton.",
    "start": "1880390",
    "end": "1885430"
  },
  {
    "text": "You can do it with two states. It's a very simple automaton. But if you haven't had\npractice with these,",
    "start": "1885430",
    "end": "1890560"
  },
  {
    "text": "I encourage you to do that. And actually, there\nare lots of examples that I ask you to solve at the\nend of chapter 1 in the book,",
    "start": "1890560",
    "end": "1898929"
  },
  {
    "text": "and you definitely should\nspend some time playing with it if you have not yet seen\nfinite automata before.",
    "start": "1898930",
    "end": "1907450"
  },
  {
    "text": "You need to get comfortable with\nthese and be able to make them. So we're going to start\nmaking some of them,",
    "start": "1907450",
    "end": "1913157"
  },
  {
    "text": "but we're going to\nbe talking about it at a sort of a more\nabstract level in a minute. ",
    "start": "1913157",
    "end": "1919710"
  },
  {
    "text": "Basically, the reason why\nyou can solve this problem, you can make a finite automaton\nwhich recognizes the language",
    "start": "1919710",
    "end": "1927539"
  },
  {
    "text": "B, is because that\nfinite automaton is going to keep track of the\nparity of the number of 1's",
    "start": "1927540",
    "end": "1934590"
  },
  {
    "text": "it's seen before. This has two states,\none of them remembering that it's seen an odd\nnumber of 1's so far,",
    "start": "1934590",
    "end": "1940200"
  },
  {
    "text": "the other one\nremembering it's seen an even number of 1's before. And that's going to be\ntypical for these automata,",
    "start": "1940200",
    "end": "1946380"
  },
  {
    "text": "finite automata. There's going to be several\ndifferent possibilities that you may have to keep track\nof as you're reading the input,",
    "start": "1946380",
    "end": "1954060"
  },
  {
    "text": "and there's going to\nbe a state associated with each one of\nthose possibilities. So if you're designing\nan automaton,",
    "start": "1954060",
    "end": "1960730"
  },
  {
    "text": "you have to think about-- as you're processing the input-- what things you have\nto keep track of. And you're going to make\na state for each one",
    "start": "1960730",
    "end": "1967525"
  },
  {
    "text": "of those possibilities. OK? So you need to get\ncomfortable with that.",
    "start": "1967525",
    "end": "1974230"
  },
  {
    "text": "Let's look at another example,\nthe language C where the inputs have an equal number\nof 0's and 1's.",
    "start": "1974230",
    "end": "1982639"
  },
  {
    "text": "That turns out to be\nnot a regular language. So, in other words,\nwhat that means",
    "start": "1982640",
    "end": "1989210"
  },
  {
    "text": "is there's no way to\nrecognize that language with a finite automaton. You just can't do it.",
    "start": "1989210",
    "end": "1995070"
  },
  {
    "text": "That's beyond the capabilities\nof finite automata. And that's a statement\nwe will prove later.",
    "start": "1995070",
    "end": "2003460"
  },
  {
    "text": "OK. And our goal over the\nnext lecture or so",
    "start": "2003460",
    "end": "2009160"
  },
  {
    "text": "is to understand the regular\nlanguages, which you can do in a very comprehensive way.",
    "start": "2009160",
    "end": "2014750"
  },
  {
    "text": "So we're going to\nstart to do that now. So first, we're going to\nintroduce this concept",
    "start": "2014750",
    "end": "2020300"
  },
  {
    "start": "2016000",
    "end": "2116000"
  },
  {
    "text": "of regular expressions-- which, again, these\nare things you may have run into in one\nway or another before.",
    "start": "2020300",
    "end": "2027210"
  },
  {
    "text": "So we're going to\nintroduce something",
    "start": "2027210",
    "end": "2032700"
  },
  {
    "text": "called the regular operations. Now, I'm sure\nyou're familiar with",
    "start": "2032700",
    "end": "2039210"
  },
  {
    "text": "the arithmetical operations,\nlike plus and times.",
    "start": "2039210",
    "end": "2044490"
  },
  {
    "text": "Those apply to numbers. The operations we're\ngoing to talk about",
    "start": "2044490",
    "end": "2049879"
  },
  {
    "text": "are operations that\napply to languages. So they're going to take,\nlet's say, two languages,",
    "start": "2049880",
    "end": "2056000"
  },
  {
    "text": "you apply an\noperation, you're going to get back another language. Like the union\noperation, for example,",
    "start": "2056000",
    "end": "2061730"
  },
  {
    "text": "that's one you probably\nhave seen before. The union of two\nlanguages here is",
    "start": "2061730",
    "end": "2067129"
  },
  {
    "text": "a collection of strings that\nare in either one or the other. ",
    "start": "2067130",
    "end": "2073077"
  },
  {
    "text": "But there are other\noperations, which you may not have seen before,\nthat we're going to look at-- the concatenation\noperation, for example.",
    "start": "2073078",
    "end": "2080090"
  },
  {
    "text": "So that says you're\ngoing to take a string from the first\nlanguage and another string from the second language\nand stick them together.",
    "start": "2080090",
    "end": "2089370"
  },
  {
    "text": "And it's called\nconcatenating them. And you do that in\nall possible ways,",
    "start": "2089370",
    "end": "2094679"
  },
  {
    "text": "and you're going to get\nthe concatenation language from these two languages\nthat you're starting with, A and B. The symbol we\nuse for concatenation",
    "start": "2094679",
    "end": "2102930"
  },
  {
    "text": "is this little circle. But often, we don't. We just suppress that and\nwe write the two languages",
    "start": "2102930",
    "end": "2109470"
  },
  {
    "text": "next to one another with\nthe little circle implied. So this also means concatenation\nover here, just like this does.",
    "start": "2109470",
    "end": "2117510"
  },
  {
    "start": "2116000",
    "end": "2608000"
  },
  {
    "text": "And the last of the\nregular operations is the so-called star operation,\nwhich is a unary operation.",
    "start": "2117510",
    "end": "2124680"
  },
  {
    "text": "It applies to just\na single language. And so what you do is now\nyou're going to take--",
    "start": "2124680",
    "end": "2131460"
  },
  {
    "text": "to get a member of\nthe star language, you're going to take\na bunch of strings in the original language,\nA, you stick them together.",
    "start": "2131460",
    "end": "2139980"
  },
  {
    "text": "Any number of members of\nA, you stick them together, and that becomes an element\nof the star language.",
    "start": "2139980",
    "end": "2146550"
  },
  {
    "text": "And we'll do an example in a\nsecond if you didn't get that. But one important element is\nthat when you have the star",
    "start": "2146550",
    "end": "2152250"
  },
  {
    "text": "language, you can\nalso allow it to stick zero elements together, and\nthen you get the empty string.",
    "start": "2152250",
    "end": "2160090"
  },
  {
    "text": "So that's always a\nmember of the star language, the empty string.",
    "start": "2160090",
    "end": "2165730"
  },
  {
    "text": "OK, so let's look\nat some examples. Let's say A is the\nlanguage-- these are two strings here-- good, bad.",
    "start": "2165730",
    "end": "2172510"
  },
  {
    "text": "And B is the language boy, girl. ",
    "start": "2172510",
    "end": "2177800"
  },
  {
    "text": "Now, if we take the\nunion of those two, we get good, bad, boy, girl.",
    "start": "2177800",
    "end": "2185740"
  },
  {
    "text": "That's kind of\nwhat you'd expect. And now let's take a look\nat the concatenation.",
    "start": "2185740",
    "end": "2198170"
  },
  {
    "text": "Now, if you concatenate\nthe A and the B language, you're going to get all\npossible ways of having an A",
    "start": "2198170",
    "end": "2204200"
  },
  {
    "text": "string followed by all possible\nways of having a B string. So you can get goodboy,\ngoodgirl, badboy, badgirl.",
    "start": "2204200",
    "end": "2209960"
  },
  {
    "text": " Now, looking at the\nstar, well, that",
    "start": "2209960",
    "end": "2221240"
  },
  {
    "text": "applies to just one language. So let's say it's the\ngood, bad language from A.",
    "start": "2221240",
    "end": "2227599"
  },
  {
    "text": "And so the A star\nthat you get from that is all possible ways of sticking\ntogether the strings from A.",
    "start": "2227600",
    "end": "2234710"
  },
  {
    "text": "So using no strings, you\nalways get the empty string. That's always guaranteed\nto be a member of A.",
    "start": "2234710",
    "end": "2240380"
  },
  {
    "text": "And then just taking\none element of A, you get good, or\nanother element, bad. But now two elements of A,\nyou get goodgood or goodbad,",
    "start": "2240380",
    "end": "2248090"
  },
  {
    "text": "and so on. Or three elements of A,\ngoodgoodgood, goodgoodbad. And so, in fact, A star is\ngoing to be an infinite language",
    "start": "2248090",
    "end": "2257130"
  },
  {
    "text": "if A itself contains\nany non-empty member.",
    "start": "2257130",
    "end": "2266529"
  },
  {
    "text": "So if A is the empty\nlanguage or if A contains just the language empty\nstring, then A star",
    "start": "2266530",
    "end": "2274170"
  },
  {
    "text": "will be not an\ninfinite language. It'll just be the\nlanguage empty string. But otherwise, it'll be\nan infinite language.",
    "start": "2274170",
    "end": "2282020"
  },
  {
    "text": "I'm not even sure-- ",
    "start": "2282020",
    "end": "2287779"
  },
  {
    "text": "OK. I'm not-- [LAUGHS] I'm ignoring the chat here. I'm hoping people\nare getting-- are you guys are getting your\nquestions answered by our TAs?",
    "start": "2287780",
    "end": "2295849"
  },
  {
    "text": "How are we doing, Thomas? AUDIENCE: One question is, are\nthe slides going to be posted?",
    "start": "2295850",
    "end": "2301177"
  },
  {
    "text": "MICHAEL SIPSER: Are the\nslides going to be posted? Well, the whole lecture\nis going to be recorded.",
    "start": "2301177",
    "end": "2308147"
  },
  {
    "text": "Is it helpful to have\nthe slides separately? I can post the slides. Sure.",
    "start": "2308147",
    "end": "2314359"
  },
  {
    "text": "Remind me if I don't,\nbut I'll try to do that. Yes, it is helpful. I will do that. ",
    "start": "2314360",
    "end": "2321580"
  },
  {
    "text": "Yeah. Yeah, I will post the slides. Just, Thomas, it's\nyour job to remind me.",
    "start": "2321580",
    "end": "2327807"
  },
  {
    "text": "AUDIENCE: OK.  MICHAEL SIPSER: All right, good.",
    "start": "2327808",
    "end": "2333830"
  },
  {
    "text": "So we talked about the\nregular operations. Let's talk about the\nregular expressions. So regular\nexpressions are-- just",
    "start": "2333830",
    "end": "2339500"
  },
  {
    "text": "like you have the\narithmetical operations, then you can get\narithmetical expressions, like 1 plus 3 times 7.",
    "start": "2339500",
    "end": "2347320"
  },
  {
    "text": "So now we're going to\nmake expressions out of these operations. First of all, you have,\nthe more atomic things,",
    "start": "2347320",
    "end": "2353119"
  },
  {
    "text": "the building blocks of\nthe expressions, which are going to be like elements of\nsigma, elements of the alphabet",
    "start": "2353120",
    "end": "2363329"
  },
  {
    "text": "or the sigma itself\nas an alphabet symbol, or the empty language\nor the empty string.",
    "start": "2363330",
    "end": "2373502"
  },
  {
    "text": "These are going to be\nthe building blocks for the regular expressions. We'll do an example in a second.",
    "start": "2373502",
    "end": "2378550"
  },
  {
    "text": "And then you combine\nthose basic elements using the regular operations of\nunion, concatenation, and star.",
    "start": "2378550",
    "end": "2385860"
  },
  {
    "text": "So these are the\natomic expressions, these are the\ncomposite expressions. So, for example, if you look at\nthe expression 0 union 1 star--",
    "start": "2385860",
    "end": "2397940"
  },
  {
    "text": "so we can also write\nthat as sigma star. Because if sigma is 0\nand 1, then sigma star",
    "start": "2397940",
    "end": "2404539"
  },
  {
    "text": "is the same thing as 0 union 1--\nsigma is the same as 0 union 1. And that just gives all\npossible strings over sigma.",
    "start": "2404540",
    "end": "2411763"
  },
  {
    "text": "So this is something you're\ngoing to see frequently. Sigma star means\nthis is the language of all strings over\nthe alphabet we're",
    "start": "2411763",
    "end": "2418849"
  },
  {
    "text": "working with at that moment. Now, if you take\nsigma star 1, you just",
    "start": "2418850",
    "end": "2426270"
  },
  {
    "text": "concatenate 1 onto all of\nthe elements of sigma star, and that's going to give you\nall strings that end with a 1.",
    "start": "2426270",
    "end": "2434100"
  },
  {
    "text": "Technically, you might\nimagine writing this with braces around the 1, but\ngenerally, we don't do that.",
    "start": "2434100",
    "end": "2440880"
  },
  {
    "text": "We just-- single element\nsets, single element strings, we write without the\nbraces, because it's",
    "start": "2440880",
    "end": "2447900"
  },
  {
    "text": "clear enough without them,\nand it gets messy with them. So sigma star 1 is all\nstrings that end with 1.",
    "start": "2447900",
    "end": "2453780"
  },
  {
    "text": "Or, for example,\nyou take sigma star 11 sigma star, that is all\nstrings that contain 11.",
    "start": "2453780",
    "end": "2463020"
  },
  {
    "text": "And we already saw that\nlanguage once before. That's the language\nof that other machine that we presented one\nor two slides back.",
    "start": "2463020",
    "end": "2470960"
  },
  {
    "text": "OK?  Right. ",
    "start": "2470960",
    "end": "2480377"
  },
  {
    "text": "Yeah, but in terms of\nreadings-- by the way, sorry, I don't know\nif it's helpful to you for me to do these\ninterjections-- but the readings are listed\nalso on the homework.",
    "start": "2480377",
    "end": "2490240"
  },
  {
    "text": "So if you look at the\nposted homework 1, it tells you which chapters\nyou should be reading now.",
    "start": "2490240",
    "end": "2498910"
  },
  {
    "text": "And also, if you look at the\ncourse schedule, which is also on the home page, it has the\nwhole course plan and which",
    "start": "2498910",
    "end": "2507520"
  },
  {
    "text": "readings are for which dates. So it's all there for you. ",
    "start": "2507520",
    "end": "2514470"
  },
  {
    "text": "And so our goal here--\nthis is not an accident that sigma star 11\nsigma star happens",
    "start": "2514470",
    "end": "2520290"
  },
  {
    "text": "to be the same language\nas we saw before from the language of\nthat finite automaton M1.",
    "start": "2520290",
    "end": "2527430"
  },
  {
    "text": "In fact, that's a\ngeneral phenomenon. Anything you can do with\na regular expression,",
    "start": "2527430",
    "end": "2532780"
  },
  {
    "text": "you can also do with a finite\nautomaton and vice versa. They are equivalent\nin power with respect",
    "start": "2532780",
    "end": "2539670"
  },
  {
    "text": "to the class of\nlanguages they describe. And we'll prove that. ",
    "start": "2539670",
    "end": "2546680"
  },
  {
    "text": "OK?  So if you step back for\na second and just let",
    "start": "2546680",
    "end": "2555010"
  },
  {
    "text": "yourself appreciate this,\nit's kind of an amazing thing. Because finite automata, with\nthe states and transitions,",
    "start": "2555010",
    "end": "2561160"
  },
  {
    "text": "and the regular expressions,\nwith these operations of union, concatenation, and star,\nthey look totally different",
    "start": "2561160",
    "end": "2567670"
  },
  {
    "text": "from one another. They look like they have\nnothing to do with one another. But, in fact, they both describe\nexactly the regular languages,",
    "start": "2567670",
    "end": "2573880"
  },
  {
    "text": "the same class of languages. And so it's kind of a cool\nfact that you can prove,",
    "start": "2573880",
    "end": "2578980"
  },
  {
    "text": "that these two very\ndifferent looking systems actually are equivalent\nto one another. ",
    "start": "2578980",
    "end": "2587140"
  },
  {
    "text": "Can we get empty\nstring from empty set? Yeah. There are a bunch of\nexotic cases, by the way.",
    "start": "2587140",
    "end": "2595520"
  },
  {
    "text": "So empty language star\nis the language which has just the empty string.",
    "start": "2595520",
    "end": "2601190"
  },
  {
    "text": "If you don't get that,\nchew on that one. But that is true. ",
    "start": "2601190",
    "end": "2608210"
  },
  {
    "start": "2608000",
    "end": "2979000"
  },
  {
    "text": "OK, let's move on. OK, let's talk about\nclosure properties now. We're going to start doing\nsomething that has a little bit",
    "start": "2608210",
    "end": "2615320"
  },
  {
    "text": "more meat to it,\nin terms of we're going to have our first theorem\nof the course coming here.",
    "start": "2615320",
    "end": "2621079"
  },
  {
    "text": "And this is not a baby theorem. This is actually-- there's\ngoing to be some meat to this. And you're going to\nhave to not totally--",
    "start": "2621080",
    "end": "2633080"
  },
  {
    "text": "this is not a toy. We're proving something\nthat has real substance. And the statement\nof this theorem",
    "start": "2633080",
    "end": "2642120"
  },
  {
    "text": "says that the regular languages\nare closed, that really,",
    "start": "2642120",
    "end": "2648120"
  },
  {
    "text": "the class of regular languages\nare closed under union, closed under the union operation.",
    "start": "2648120",
    "end": "2653980"
  },
  {
    "text": "So what do I mean by that? So when you say a\ncollection of objects",
    "start": "2653980",
    "end": "2660930"
  },
  {
    "text": "is closed under\nsome operation, that means applying that\noperation to those objects",
    "start": "2660930",
    "end": "2666480"
  },
  {
    "text": "leaves you in the\nsame class of objects. Like the positive integers,\nthe natural numbers,",
    "start": "2666480",
    "end": "2677790"
  },
  {
    "text": "that's closed under addition. Because when you add\ntwo positive integers,",
    "start": "2677790",
    "end": "2682950"
  },
  {
    "text": "you get back a positive integer. But they're not closed\nunder subtraction. Because 2 minus 4, you\nget something which",
    "start": "2682950",
    "end": "2690990"
  },
  {
    "text": "is not a positive integer. So closed means you leave\nyourself in the collection.",
    "start": "2690990",
    "end": "2696490"
  },
  {
    "text": "And the fact is that if you look\nat all the regular languages-- these are the languages that the\nfinite automata can recognize--",
    "start": "2696490",
    "end": "2705130"
  },
  {
    "text": "they are closed under\nthe union operation. So if you start off with\ntwo regular languages and you apply the union, you get\nback another regular language.",
    "start": "2705130",
    "end": "2713528"
  },
  {
    "text": "And that's what the\nstatement of this theorem is. I hope that's clear enough\nin the way I've written it.",
    "start": "2713528",
    "end": "2718690"
  },
  {
    "text": "If A1 and A2 are regular, then\nA1 union A2 is also regular.",
    "start": "2718690",
    "end": "2723940"
  },
  {
    "text": "That's what the\nstatement of this is. And it's just simply that-- that's proving that the\nclass of regular language",
    "start": "2723940",
    "end": "2730210"
  },
  {
    "text": "is closed under union. So we're going to prove that. So how do you\nprove such a thing?",
    "start": "2730210",
    "end": "2736500"
  },
  {
    "text": "So the way we're going\nto prove that is you start off with what\nwe're assuming.",
    "start": "2736500",
    "end": "2743190"
  },
  {
    "text": "So our hypothesis is that we\nhave two regular languages. And we have to prove\nour conclusion,",
    "start": "2743190",
    "end": "2749420"
  },
  {
    "text": "that the union is also regular. Now, the hypothesis\nthat they're regular,",
    "start": "2749420",
    "end": "2755000"
  },
  {
    "text": "you have to unpack that and\nunderstand, what does that get you?",
    "start": "2755000",
    "end": "2760010"
  },
  {
    "text": "And them being regular means\nthat there are finite automata that recognize those languages.",
    "start": "2760010",
    "end": "2765750"
  },
  {
    "text": "So let's give those two\nfinite automata names. So M1 and M2 are the\ntwo final automata",
    "start": "2765750",
    "end": "2771740"
  },
  {
    "text": "that recognize those two\nlanguages, A1 and A2. That's what it means,\nthat they're regular, that these automata exist.",
    "start": "2771740",
    "end": "2779050"
  },
  {
    "text": "So let's have those two\nautomata, M1 and M2, using the components as we've\ndescribed, the respective state",
    "start": "2779050",
    "end": "2786119"
  },
  {
    "text": "sets, input alphabet,\ntransition functions, the two starting states and the two\ncollections of accepting",
    "start": "2786120",
    "end": "2791880"
  },
  {
    "text": "states. Here I'm assuming that they're\nover the same alphabet. You could have\nautomata which operate",
    "start": "2791880",
    "end": "2796890"
  },
  {
    "text": "over different alphabets. It's not interesting to do that. It doesn't add anything. The proof would be\nexactly the same.",
    "start": "2796890",
    "end": "2803200"
  },
  {
    "text": "So let's just not overcomplicate\nour lives and focus on the more interesting\ncase, so assuming that the two input alphabets\nare going to be the same.",
    "start": "2803200",
    "end": "2811990"
  },
  {
    "text": "And from these two\nautomata, we have to show that this\nlanguage here, the union, is also a regular language.",
    "start": "2811990",
    "end": "2818220"
  },
  {
    "text": "And we're going to do that\nby constructing the automaton which recognizes the union.",
    "start": "2818220",
    "end": "2823980"
  },
  {
    "text": "That's really the only\nthing that we can do. So we're going to build an\nautomaton out of M1 and M2",
    "start": "2823980",
    "end": "2831210"
  },
  {
    "text": "which recognizes the union\nlanguage A1 union A2. And the task of M is that\nit should accept its input",
    "start": "2831210",
    "end": "2839560"
  },
  {
    "text": "if either M1 or M2 accept. And now what I'd\nlike you to think about doing that,\nhow in the world",
    "start": "2839560",
    "end": "2846369"
  },
  {
    "text": "are we going to come up with\nthis finite automaton M? And the way we do that is\nto think about, how would",
    "start": "2846370",
    "end": "2862730"
  },
  {
    "text": "you do that union language? If I ask you-- I give you two automata,\nM1 and M2, and I say,",
    "start": "2862730",
    "end": "2870850"
  },
  {
    "text": "here's an input, w.  Is w in the union language?",
    "start": "2870850",
    "end": "2877070"
  },
  {
    "text": "That's the job that M\nis supposed to solve. And I suggest you\ntry to figure out how you would solve it first.",
    "start": "2877070",
    "end": "2883820"
  },
  {
    "text": "I mean, this is a good\nstrategy for solving a lot of the problems in this course. Put yourself in the place of the\nmachine you're trying to build.",
    "start": "2883820",
    "end": "2890830"
  },
  {
    "text": "And so if you want to try to\nfigure out how to do that, a natural thing is, well, you\ntake w, you feed it into M1,",
    "start": "2890830",
    "end": "2898410"
  },
  {
    "text": "and then you feed it into M2. And if M1 accepts\nit, great, then you know it's in the union.",
    "start": "2898410",
    "end": "2903780"
  },
  {
    "text": "And if not, you try it out in\nM2 and see if M2 accepts it. Now, you have to be\na little careful,",
    "start": "2903780",
    "end": "2910260"
  },
  {
    "text": "because you want to have a\nstrategy that you can also implement in a finite automaton.",
    "start": "2910260",
    "end": "2917440"
  },
  {
    "text": "And a finite automaton\nonly gets one shot at looking at the input.",
    "start": "2917440",
    "end": "2923319"
  },
  {
    "text": "You can't sort of\nrewind the input. You feed it first into M1\nand then you feed it into M2",
    "start": "2923320",
    "end": "2928990"
  },
  {
    "text": "and operate in a\nsequential way like that. That's not going to be allowed\nin the way finite automata",
    "start": "2928990",
    "end": "2937690"
  },
  {
    "text": "work. So you're going to have to\ntake it to the next level, be a little bit more clever.",
    "start": "2937690",
    "end": "2943329"
  },
  {
    "text": "And instead of feeding\nit first into M1 and then and then\ninto M2, you feed them into both in parallel.",
    "start": "2943330",
    "end": "2951480"
  },
  {
    "text": "So you take M1 and\nM2, and you run them both in parallel on the input\nw, keeping track of which state",
    "start": "2951480",
    "end": "2960180"
  },
  {
    "text": "each of those two\nautomata are in. And then at the end, you see\nif either one of those machines",
    "start": "2960180",
    "end": "2968070"
  },
  {
    "text": "is in an accepting state,\nand then you accept. So that's the\nstrategy we're going to employ in building the finite\nautomaton M out of M1 and M2.",
    "start": "2968070",
    "end": "2978430"
  },
  {
    "text": "So in terms of a picture,\nhere's M1 and M2. Here is the automaton\nwe're trying to build.",
    "start": "2978430",
    "end": "2985672"
  },
  {
    "start": "2979000",
    "end": "3364000"
  },
  {
    "text": "We don't know how it's\ngoing to look like yet. And yeah, so kind of getting\nahead of myself, but here",
    "start": "2985673",
    "end": "2991760"
  },
  {
    "text": "is a strategy, as I\njust described, for M.",
    "start": "2991760",
    "end": "3000700"
  },
  {
    "text": "M is going to keep track of\nwhich state that M1 is in",
    "start": "3000700",
    "end": "3005800"
  },
  {
    "text": "and which state M2 is\nin at any given moment. As we're reading\nthe symbols of w,",
    "start": "3005800",
    "end": "3011080"
  },
  {
    "text": "we're going to feed that\ninto M1 and also into M2.",
    "start": "3011080",
    "end": "3016210"
  },
  {
    "text": "And so the possibilities we\nhave to keep track of in M",
    "start": "3016210",
    "end": "3021339"
  },
  {
    "text": "are all the pairs of states\nthat are in M1 and M2, because you're going\nto really be tracking",
    "start": "3021340",
    "end": "3027130"
  },
  {
    "text": "M1 and M2 simultaneously. So you have to remember\nwhich state M1 is in and also which state M2 is in.",
    "start": "3027130",
    "end": "3032920"
  },
  {
    "text": "And so that really corresponds\nto what pair of states to remember, one from M1\nand one from M2, and that's",
    "start": "3032920",
    "end": "3038380"
  },
  {
    "text": "why I've indicated it like that. So M1 is in state\nq, M2 is in state r at some given point in time.",
    "start": "3038380",
    "end": "3044890"
  },
  {
    "text": "And that's going to correspond\nto M being in the pair q comma r. That's just the label of\nthis particular state of m",
    "start": "3044890",
    "end": "3052300"
  },
  {
    "text": "that we're going to apply here. OK? ",
    "start": "3052300",
    "end": "3059130"
  },
  {
    "text": "And then M is going\nto accept if either M1 and M2 is an accepting state.",
    "start": "3059130",
    "end": "3066010"
  },
  {
    "text": "So it's going to be if either\nq or r is an accepting state, we're going to make this\ninto an accepting state too.",
    "start": "3066010",
    "end": "3073839"
  },
  {
    "text": "OK? Whoops. There we go. ",
    "start": "3073840",
    "end": "3079725"
  },
  {
    "text": "So let's describe\nthis formally instead of by a picture, because\nwe can do it both ways. And sometimes it's better to\ndo it one way and sometimes",
    "start": "3079725",
    "end": "3086090"
  },
  {
    "text": "the other way. So now if we take-- the components of M now are the\npairs of states from M1 and M2.",
    "start": "3086090",
    "end": "3094819"
  },
  {
    "text": "Again, I'm writing this out\nliterally, explicitly here, but you should make sure\nyou're comfortable with",
    "start": "3094820",
    "end": "3100490"
  },
  {
    "text": "this cross product notation. So this is the collection of\npairs of states, q1 and q2, where q1 is in the state\nof the first machine,",
    "start": "3100490",
    "end": "3107660"
  },
  {
    "text": "q2 is the state of\nthe second machine. The start state is you\nstart at the two start",
    "start": "3107660",
    "end": "3113630"
  },
  {
    "text": "states of the two machines. So this is q1, q2-- probably I should have\nnot reused the Q notation.",
    "start": "3113630",
    "end": "3121100"
  },
  {
    "text": "I should have called these r's-- now that I'm looking at that. But, anyway, I hope you're\nnot confused by reusing this.",
    "start": "3121100",
    "end": "3126500"
  },
  {
    "text": "q1 and q2 here are the\nspecific start states of the two machines.",
    "start": "3126500",
    "end": "3132150"
  },
  {
    "text": "These are just two other\nstates, representative states of those machines.",
    "start": "3132150",
    "end": "3137779"
  },
  {
    "text": "Now, the transition\nfunction for the new machine is going to be built out\nof the transition functions",
    "start": "3137780",
    "end": "3142790"
  },
  {
    "text": "from the previous machines. So when I have a pair, q,\nr, and I have the symbol a,",
    "start": "3142790",
    "end": "3150500"
  },
  {
    "text": "where do we go? Which new pair do we get? Well, we just update\nthe state from M1",
    "start": "3150500",
    "end": "3155930"
  },
  {
    "text": "and update the state\nfrom M2 according to their respective\ntransition functions, and that's what's\nshown over here.",
    "start": "3155930",
    "end": "3161690"
  },
  {
    "text": " Now let's take a look at\nthe accepting states for M.",
    "start": "3161690",
    "end": "3170079"
  },
  {
    "text": "The natural thing to do is look\nat the set of pairs of states, where we have a pair of states--",
    "start": "3170080",
    "end": "3177400"
  },
  {
    "text": "a pair of accepting states,\none from the first machine",
    "start": "3177400",
    "end": "3182829"
  },
  {
    "text": "and one from the second machine. But if you're\nthinking with me, you realize that this is\nnot the right thing.",
    "start": "3182830",
    "end": "3189585"
  },
  {
    "text": " What is DFAs? ",
    "start": "3189585",
    "end": "3196569"
  },
  {
    "text": "Did I would call\nthem DFA somewhere? Oh, somebody else is probably\ndoing that in the chat.",
    "start": "3196570",
    "end": "3202516"
  },
  {
    "text": "The DFA-- careful what\nnotation you're using. We haven't introduced DFAs yet.",
    "start": "3202516",
    "end": "3208430"
  },
  {
    "text": "We'll do that next on Thursday. But these are DFAs. These are just finite automata,\nDeterministic Finite Automata.",
    "start": "3208430",
    "end": "3214300"
  },
  {
    "text": "That's why the D. Anyway, so this is\nactually not right, because if you think\nabout what this is saying,",
    "start": "3214300",
    "end": "3220300"
  },
  {
    "text": "it says that both components\nhave to be accepting. And you want either\none to be accepting.",
    "start": "3220300",
    "end": "3227900"
  },
  {
    "text": "So this is not good. This would be the wrong\nway of defining it.",
    "start": "3227900",
    "end": "3233560"
  },
  {
    "text": "That actually gives the\nintersection language. And really, kind\nof along the way, it's proving closure\nunder intersection,",
    "start": "3233560",
    "end": "3238762"
  },
  {
    "text": "which we don't care\nabout but might be useful to have in our back\npocket sometime in the future.",
    "start": "3238762",
    "end": "3244690"
  },
  {
    "text": "In order to get\nclosure under a union, we have to write it this\nslightly more complicated looking way, which says the\npair, what you want to have is",
    "start": "3244690",
    "end": "3254710"
  },
  {
    "text": "either the first state is\nan accepting state and then any state for the\nsecond element,",
    "start": "3254710",
    "end": "3261490"
  },
  {
    "text": "or any state for\nthe first element and an accepting state\nfor the second element. That's what it means to have the\nunion, to be doing the union.",
    "start": "3261490",
    "end": "3271090"
  },
  {
    "text": "OK? So let's do-- oh,\nhere's a quick check-in. ",
    "start": "3271090",
    "end": "3278020"
  },
  {
    "text": "So let's do another poll here. We thought we were\ndone with these. ",
    "start": "3278020",
    "end": "3284660"
  },
  {
    "text": "Again-- oh, here we go.",
    "start": "3284660",
    "end": "3290450"
  },
  {
    "text": "So it was too complicated to\nwrite it out in the polls, so I actually put it up\non the slide for you.",
    "start": "3290450",
    "end": "3295480"
  },
  {
    "text": " So all I'm asking is\nthat if M1 has k1 states",
    "start": "3295480",
    "end": "3302410"
  },
  {
    "text": "and M2 has k2 states, how\nmany states does M have? ",
    "start": "3302410",
    "end": "3308810"
  },
  {
    "text": "Is it the sum, the sum of\nthe squares, or the product? ",
    "start": "3308810",
    "end": "3317450"
  },
  {
    "text": "OK, you have to think\nabout the states of M, what do they look like?",
    "start": "3317450",
    "end": "3322790"
  },
  {
    "text": "And come on, guys. ",
    "start": "3322790",
    "end": "3329330"
  },
  {
    "text": "All right, ending the\npoll, sharing results. Yes, indeed, it is-- most\nof you got it correct.",
    "start": "3329330",
    "end": "3337460"
  },
  {
    "text": "It is C, the product. Because when you look at the\nnumber of pairs of states",
    "start": "3337460",
    "end": "3342830"
  },
  {
    "text": "from M1 and M2, you\nneed all possible pairs. And so it's the number of\nstates in M1 times the number",
    "start": "3342830",
    "end": "3348950"
  },
  {
    "text": "of states in M2. So make sure you understand\nthat and think about that",
    "start": "3348950",
    "end": "3355609"
  },
  {
    "text": "so that you're\nfollowing and get this. All right, so\nlet's move on here.",
    "start": "3355610",
    "end": "3364370"
  },
  {
    "start": "3364000",
    "end": "3599000"
  },
  {
    "text": "So we have another\nfive minutes or so. Let's start thinking about\nclosure under concatenation.",
    "start": "3364370",
    "end": "3371640"
  },
  {
    "text": "So if we have two\nregular languages, so is the\nconcatenation language.",
    "start": "3371640",
    "end": "3377400"
  },
  {
    "text": "We're going to\ntry to prove that. We won't finish, but we'll at\nleast get our creative juices going about it.",
    "start": "3377400",
    "end": "3383620"
  },
  {
    "text": "So we're going to do\nthe same scheme here. We're going to take two\nmachines for A1 and A2",
    "start": "3383620",
    "end": "3389610"
  },
  {
    "text": "and build a machine for the\nconcatenation language out of those two. So here are the two machines\nfor A1 and A2 written down.",
    "start": "3389610",
    "end": "3398220"
  },
  {
    "text": "And now here is the\nconcatenation language.",
    "start": "3398220",
    "end": "3403320"
  },
  {
    "text": "And I'm going to propose\nto you a strategy-- which is not going\nto work, but it still is going to be a good\nintuition to have.",
    "start": "3403320",
    "end": "3410589"
  },
  {
    "text": "So what I'm going to do is\nI'm going to make a copy of-- OK, let's understand what\nM is supposed to do first.",
    "start": "3410590",
    "end": "3416530"
  },
  {
    "text": "So M should accept its input. So think about this. M is doing the\nconcatenation language. So it's given a string.",
    "start": "3416530",
    "end": "3422610"
  },
  {
    "text": "And it has to answer, is it\nin the concatenation language A1A2 or not?",
    "start": "3422610",
    "end": "3429029"
  },
  {
    "text": "So it should accept it if\nthere's some way to divide w into two pieces where M1 accepts\nthe first piece and M2 accepts",
    "start": "3429030",
    "end": "3437250"
  },
  {
    "text": "the second piece. So here would be the picture.",
    "start": "3437250",
    "end": "3443290"
  },
  {
    "text": "OK? And now we have to try to\nmake a machine which is going to solve this intuition.",
    "start": "3443290",
    "end": "3449170"
  },
  {
    "text": "So how would you\ndo that yourself? I'm giving you w.",
    "start": "3449170",
    "end": "3454580"
  },
  {
    "text": "And you can simulate M1 and M2. So the natural thing\nis you're going to start out by\nsimulating M1 for a while",
    "start": "3454580",
    "end": "3461780"
  },
  {
    "text": "and then shift into\nsimulating M2 for a while, because that's what's\nsupposed to be happening",
    "start": "3461780",
    "end": "3467960"
  },
  {
    "text": "as you're processing the input. So I'm going to suggest that in\nterms of the diagram like this.",
    "start": "3467960",
    "end": "3474580"
  },
  {
    "text": "So we have here M1\nand M2 copied here.",
    "start": "3474580",
    "end": "3481500"
  },
  {
    "text": "And what I propose doing\nis connecting M1 to M2",
    "start": "3481500",
    "end": "3488940"
  },
  {
    "text": "so that when M1 has\naccepted its input, we're going to jump to\nM2, because that's perhaps",
    "start": "3488940",
    "end": "3496410"
  },
  {
    "text": "the first part of w. And now we're going to have M2\nprocess the second part of w. So the way I'm\ngoing to implement",
    "start": "3496410",
    "end": "3501870"
  },
  {
    "text": "that is by declassifying\nthe start state of M2, having transition symbols from\nthe accepting states of M1",
    "start": "3501870",
    "end": "3509880"
  },
  {
    "text": "to M2, and then removing these\nguys here as accepting states.",
    "start": "3509880",
    "end": "3517224"
  },
  {
    "text": "And we would have to figure\nout what sort of labels to apply here. But, actually, this\nreasoning doesn't work.",
    "start": "3517225",
    "end": "3524970"
  },
  {
    "text": "It's tempting, but flawed. Because-- what goes wrong?",
    "start": "3524970",
    "end": "3530520"
  },
  {
    "text": "What happens is that-- it might be that when M1 has\naccepted an initial part of w",
    "start": "3530520",
    "end": "3539300"
  },
  {
    "text": "and then it wants M2\nto accept the rest, it might fail because M2\ndoesn't accept the rest.",
    "start": "3539300",
    "end": "3548000"
  },
  {
    "text": "And what you might have\nbeen better off doing is waiting longer\nin M1, because there",
    "start": "3548000",
    "end": "3553369"
  },
  {
    "text": "might have been some\nother later place to split w, which\nis still valid.",
    "start": "3553370",
    "end": "3560010"
  },
  {
    "text": "Splitting w in the\nfirst place where you have M1 accepting\nan initial part",
    "start": "3560010",
    "end": "3565020"
  },
  {
    "text": "may not be the optimal\nplace to split w. You might want to wait\nlater, and then you'll have a better chance\nof accepting w.",
    "start": "3565020",
    "end": "3574230"
  },
  {
    "text": "So I'm not sure if\nyou quite follow that. But, in fact, it doesn't work.",
    "start": "3574230",
    "end": "3581230"
  },
  {
    "text": "The question is\nwhere to split w, and it's challenging,\nbecause how do you know where to split w?",
    "start": "3581230",
    "end": "3587370"
  },
  {
    "text": "Because it depends upon what-- it depends on y, and\nyou haven't seen y yet.",
    "start": "3587370",
    "end": "3594490"
  },
  {
    "text": "So when you try to think about\nit that way, it looks hopeless. But, in fact, it's still true.",
    "start": "3594490",
    "end": "3599840"
  },
  {
    "text": "And we'll see how to\ndo that on Thursday. So just to recap\nwhat we did today,",
    "start": "3599840",
    "end": "3608030"
  },
  {
    "text": "we did our\nintroductory stuff, we defined finite automata,\nregular languages.",
    "start": "3608030",
    "end": "3614250"
  },
  {
    "text": "We defined the regular\noperations and expressions. We showed that the\nregular languages are closed under union.",
    "start": "3614250",
    "end": "3620960"
  },
  {
    "text": "We started closure under\nintersection, to be continued. ",
    "start": "3620960",
    "end": "3634000"
  }
]