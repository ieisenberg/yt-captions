[
  {
    "start": "0",
    "end": "500"
  },
  {
    "text": "The most straightforward\nway to improve performance",
    "start": "500",
    "end": "3100"
  },
  {
    "text": "is to reduce the propagation\ndelay of a circuit.",
    "start": "3100",
    "end": "6069"
  },
  {
    "text": "Let’s look at a perennial\nperformance bottleneck:",
    "start": "6070",
    "end": "8500"
  },
  {
    "text": "the ripple-carry adder.",
    "start": "8500",
    "end": "10910"
  },
  {
    "text": "To fix it, we first have to\nfigure out the path from inputs",
    "start": "10910",
    "end": "14040"
  },
  {
    "text": "to outputs that has the largest\npropagation delay, i.e.,",
    "start": "14040",
    "end": "17470"
  },
  {
    "text": "the path that’s determining\nthe overall t_PD.",
    "start": "17470",
    "end": "21880"
  },
  {
    "text": "In this case that path\nis the long carry chain",
    "start": "21880",
    "end": "24769"
  },
  {
    "text": "following the carry-in\nto carry-out path",
    "start": "24770",
    "end": "27440"
  },
  {
    "text": "through each full adder module.",
    "start": "27440",
    "end": "30310"
  },
  {
    "text": "To trigger the path add -1 and\n1 by setting the A inputs to all",
    "start": "30310",
    "end": "35940"
  },
  {
    "text": "1’s and the B input to all 0’s\nexcept for the low-order bit",
    "start": "35940",
    "end": "39260"
  },
  {
    "text": "which is 1.",
    "start": "39260",
    "end": "41660"
  },
  {
    "text": "The final answer is 0, but\nnotice that each full adder has",
    "start": "41660",
    "end": "45370"
  },
  {
    "text": "to wait for the carry-in\nfrom the previous stage",
    "start": "45370",
    "end": "47960"
  },
  {
    "text": "before it produces\n0 on its sum output",
    "start": "47960",
    "end": "50739"
  },
  {
    "text": "and generates a carry-out\nfor the next full adder.",
    "start": "50740",
    "end": "54150"
  },
  {
    "text": "The carry really does\nripple through the circuit",
    "start": "54150",
    "end": "57100"
  },
  {
    "text": "as each full adder in\nturn does its thing.",
    "start": "57100",
    "end": "61329"
  },
  {
    "text": "To total propagation\ndelay along this path",
    "start": "61330",
    "end": "63690"
  },
  {
    "text": "is N-1 times the carry-in\nto carry-out delay",
    "start": "63690",
    "end": "66840"
  },
  {
    "text": "of each full adder,\nplus the delay",
    "start": "66840",
    "end": "69179"
  },
  {
    "text": "to produce the final\nbit of the sum.",
    "start": "69180",
    "end": "72560"
  },
  {
    "text": "How would the overall\nlatency change",
    "start": "72560",
    "end": "74659"
  },
  {
    "text": "if we, say, doubled the\nsize of the operands, i.e.,",
    "start": "74660",
    "end": "77970"
  },
  {
    "text": "made N twice as large?",
    "start": "77970",
    "end": "81080"
  },
  {
    "text": "It’s useful to summarize the\ndependency of the latency on N",
    "start": "81080",
    "end": "84580"
  },
  {
    "text": "using the “order-of” notation\nto give us the big picture.",
    "start": "84580",
    "end": "88430"
  },
  {
    "text": "Clearly as N gets\nlarger the delay",
    "start": "88430",
    "end": "90560"
  },
  {
    "text": "of the XOR gate at the end\nbecomes less significant,",
    "start": "90560",
    "end": "93110"
  },
  {
    "text": "so the order-of notation ignores\nterms that are relatively less",
    "start": "93110",
    "end": "96730"
  },
  {
    "text": "important as N grows.",
    "start": "96730",
    "end": "99160"
  },
  {
    "text": "In this example, the\nlatency is order N,",
    "start": "99160",
    "end": "101590"
  },
  {
    "text": "which tells us that\nthe latency would",
    "start": "101590",
    "end": "103500"
  },
  {
    "text": "be expected to\nessentially double",
    "start": "103500",
    "end": "105410"
  },
  {
    "text": "if we made N twice as large.",
    "start": "105410",
    "end": "108320"
  },
  {
    "text": "The order-of notation,\nwhich theoreticians",
    "start": "108320",
    "end": "110770"
  },
  {
    "text": "call asymptotic\nanalysis, tells us",
    "start": "110770",
    "end": "113320"
  },
  {
    "text": "the term that would dominate\nthe result as N grows.",
    "start": "113320",
    "end": "117060"
  },
  {
    "text": "The yellow box contains\nthe official definition,",
    "start": "117060",
    "end": "119570"
  },
  {
    "text": "but an example might make it\neasier to understand what’s",
    "start": "119570",
    "end": "122570"
  },
  {
    "text": "happening.",
    "start": "122570",
    "end": "123860"
  },
  {
    "text": "Suppose we want to characterize\nthe growth in the value",
    "start": "123860",
    "end": "126330"
  },
  {
    "text": "of the equation n^2 +\n2n + 3 as n gets larger.",
    "start": "126330",
    "end": "131170"
  },
  {
    "text": "The dominant term is clearly n^2\nand the value of our equation",
    "start": "131170",
    "end": "135060"
  },
  {
    "text": "is bounded above and below\nby simple multiples of n^2,",
    "start": "135060",
    "end": "138920"
  },
  {
    "text": "except for finitely\nmany values of n.",
    "start": "138920",
    "end": "143250"
  },
  {
    "text": "The lower bound is\nalways true for n greater",
    "start": "143250",
    "end": "145540"
  },
  {
    "text": "than or equal to 0.",
    "start": "145540",
    "end": "147530"
  },
  {
    "text": "And in this case, the upper\nbound doesn’t hold only for n",
    "start": "147530",
    "end": "150540"
  },
  {
    "text": "equal to 0, 1, 2, or 3.",
    "start": "150540",
    "end": "152510"
  },
  {
    "text": "For all other positive values of\nn the upper inequality is true.",
    "start": "152510",
    "end": "157430"
  },
  {
    "text": "So we’d say this\nequation was “order N^2”.",
    "start": "157430",
    "end": "160459"
  },
  {
    "text": "There are actually two variants\nfor the order-of notation.",
    "start": "160460",
    "end": "165500"
  },
  {
    "text": "We use the Theta\nnotation to indicate",
    "start": "165500",
    "end": "167840"
  },
  {
    "text": "that g(n) is bounded above AND\nbelow by multiples of f(n).",
    "start": "167840",
    "end": "170970"
  },
  {
    "text": "The “big O” notation is used\nwhen g(n) is only bounded above",
    "start": "170970",
    "end": "175550"
  },
  {
    "text": "by a multiple of f(n).",
    "start": "175550",
    "end": "177750"
  },
  {
    "text": "Here’s a first attempt\nat improving the latency",
    "start": "177750",
    "end": "180140"
  },
  {
    "text": "of our addition circuit.",
    "start": "180140",
    "end": "182069"
  },
  {
    "text": "The trouble with the\nripple-carry adder",
    "start": "182070",
    "end": "184030"
  },
  {
    "text": "is that the high-order\nbits have to wait",
    "start": "184030",
    "end": "186190"
  },
  {
    "text": "for the carry-in from\nthe low-order bits.",
    "start": "186190",
    "end": "189010"
  },
  {
    "text": "Is there a way in which we can\nget high half the adder working",
    "start": "189010",
    "end": "192459"
  },
  {
    "text": "in parallel with the low half?",
    "start": "192460",
    "end": "195090"
  },
  {
    "text": "Suppose we wanted to\nbuild a 32-bit adder.",
    "start": "195090",
    "end": "198519"
  },
  {
    "text": "Let’s make two copies of the\nhigh 16 bits of the adder,",
    "start": "198520",
    "end": "201500"
  },
  {
    "text": "one assuming the carry-in\nfrom the low bits is 0,",
    "start": "201500",
    "end": "204360"
  },
  {
    "text": "and the other assuming\nthe carry-in is 1.",
    "start": "204360",
    "end": "207530"
  },
  {
    "text": "So now we have three\n16-bit adders, all of which",
    "start": "207530",
    "end": "210420"
  },
  {
    "text": "can operate in parallel on\nnewly arriving A and B inputs.",
    "start": "210420",
    "end": "215550"
  },
  {
    "text": "Once the 16-bit\nadditions are complete,",
    "start": "215550",
    "end": "217660"
  },
  {
    "text": "we can use the actual\ncarry-out from the low-half",
    "start": "217660",
    "end": "220320"
  },
  {
    "text": "to select the answer from the\nparticular high-half adder that",
    "start": "220320",
    "end": "223670"
  },
  {
    "text": "used the matching\ncarry-in value.",
    "start": "223670",
    "end": "225890"
  },
  {
    "text": "This type of adder\nis appropriately",
    "start": "225890",
    "end": "227650"
  },
  {
    "text": "named the carry-select adder.",
    "start": "227650",
    "end": "230409"
  },
  {
    "text": "The latency of this\ncarry-select adder",
    "start": "230410",
    "end": "232180"
  },
  {
    "text": "is just a little\nmore than the latency",
    "start": "232180",
    "end": "233900"
  },
  {
    "text": "of a 16-bit\nripple-carry addition.",
    "start": "233900",
    "end": "236670"
  },
  {
    "text": "This is approximately\nhalf the latency",
    "start": "236670",
    "end": "238709"
  },
  {
    "text": "of the original 32-bit\nripple-carry adder.",
    "start": "238710",
    "end": "241910"
  },
  {
    "text": "So at a cost of about\n50% more circuitry,",
    "start": "241910",
    "end": "244810"
  },
  {
    "text": "we’ve halved the latency!",
    "start": "244810",
    "end": "247620"
  },
  {
    "text": "As a next step, we could\napply the same strategy",
    "start": "247620",
    "end": "249980"
  },
  {
    "text": "to halve the latency\nof the 16-bit adders.",
    "start": "249980",
    "end": "252819"
  },
  {
    "text": "And then again to halve the\nlatency of the 8-bit adders",
    "start": "252820",
    "end": "255500"
  },
  {
    "text": "used in the previous step.",
    "start": "255500",
    "end": "257640"
  },
  {
    "text": "At each step we halve the adder\nlatency and add a MUX delay.",
    "start": "257640",
    "end": "262100"
  },
  {
    "text": "After log2(N) steps, N\nwill be 1 and we’re done.",
    "start": "262100",
    "end": "268190"
  },
  {
    "text": "At this point the latency\nwould be some constant cost",
    "start": "268190",
    "end": "270860"
  },
  {
    "text": "to do a 1-bit addition, plus\nlog2(N) times the MUX latency",
    "start": "270860",
    "end": "275199"
  },
  {
    "text": "to select the right answers.",
    "start": "275200",
    "end": "277500"
  },
  {
    "text": "So the overall latency\nof the carry-select adder",
    "start": "277500",
    "end": "280070"
  },
  {
    "text": "is order log(N).",
    "start": "280070",
    "end": "282200"
  },
  {
    "text": "Note that log2(N)\nand log(N) only",
    "start": "282200",
    "end": "284320"
  },
  {
    "text": "differ by a constant\nfactor, so we",
    "start": "284320",
    "end": "286430"
  },
  {
    "text": "ignore the base of the\nlog in order-of notation.",
    "start": "286430",
    "end": "290419"
  },
  {
    "text": "The carry-select adder shows a\nclear performance-size tradeoff",
    "start": "290420",
    "end": "294090"
  },
  {
    "text": "available to the designer.",
    "start": "294090",
    "end": "296370"
  },
  {
    "text": "Since adders play a big role\nin many digital systems,",
    "start": "296370",
    "end": "299550"
  },
  {
    "text": "here’s a more carefully\nengineered version of a 32-bit",
    "start": "299550",
    "end": "302440"
  },
  {
    "text": "carry-select adder.",
    "start": "302440",
    "end": "303810"
  },
  {
    "text": "You could try this\nin your ALU design!",
    "start": "303810",
    "end": "307190"
  },
  {
    "text": "The size of the\nadder blocks has been",
    "start": "307190",
    "end": "308960"
  },
  {
    "text": "chosen so that the trial\nsums and the carry-in",
    "start": "308960",
    "end": "311949"
  },
  {
    "text": "from the previous stage\narrive at the carry-select MUX",
    "start": "311950",
    "end": "315100"
  },
  {
    "text": "at approximately the same time.",
    "start": "315100",
    "end": "317680"
  },
  {
    "text": "Note that since the select\nsignal for the MUXes is heavily",
    "start": "317680",
    "end": "320590"
  },
  {
    "text": "loaded we’ve included a buffer\nto make the select signal",
    "start": "320590",
    "end": "323919"
  },
  {
    "text": "transitions faster.",
    "start": "323920",
    "end": "326540"
  },
  {
    "text": "This carry-select adder is about\ntwo-and-a-half times faster",
    "start": "326540",
    "end": "329690"
  },
  {
    "text": "than a 32-bit ripple-carry\nadder at the cost of about twice",
    "start": "329690",
    "end": "333530"
  },
  {
    "text": "as much circuitry.",
    "start": "333530",
    "end": "335770"
  },
  {
    "text": "A great design to remember\nwhen you’re looking to double",
    "start": "335770",
    "end": "338150"
  },
  {
    "text": "the speed of your ALU!",
    "start": "338150",
    "end": "340580"
  }
]