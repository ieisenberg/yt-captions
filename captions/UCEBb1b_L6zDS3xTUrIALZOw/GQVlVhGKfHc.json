[
  {
    "text": "PROFESSOR: --wind up doing a\nsubstantial part of Chapter 11, although I do tend to\nbe over-optimistic. ",
    "start": "0",
    "end": "6810"
  },
  {
    "text": "So we're handing out Chapter 11,\nwhich I expect to revise",
    "start": "6810",
    "end": "11830"
  },
  {
    "text": "still further. As we get towards these end\nchapters, these are things",
    "start": "11830",
    "end": "17110"
  },
  {
    "text": "I've only taught from, at most,\nonce before, and so I have more revisions to do than\nthe earlier chapters which",
    "start": "17110",
    "end": "24210"
  },
  {
    "text": "I've used for many years. The Problem Set Seven, as we\nannounced last time, you only",
    "start": "24210",
    "end": "31660"
  },
  {
    "text": "needed to hand in the first four\nproblems today, so we're only handing out the solutions\nfor the first four today.",
    "start": "31660",
    "end": "37329"
  },
  {
    "text": "I haven't made up any additional\nproblems, so Problem Set Eight is simply to\ndo the last two problems in",
    "start": "37330",
    "end": "43350"
  },
  {
    "text": "Problem Set Seven, due\nnext Wednesday. And a reminder that we have no\nclass on Monday because of",
    "start": "43350",
    "end": "50130"
  },
  {
    "text": "this peculiar local holiday we\nhave called Patriot's Day, when we run the marathon. And I hope you'll all be out\nthere running the marathon.",
    "start": "50130",
    "end": "57070"
  },
  {
    "text": " So enjoy the long weekend.",
    "start": "57070",
    "end": "62095"
  },
  {
    "text": " So what have we been doing\nin Chapter 10?",
    "start": "62095",
    "end": "68330"
  },
  {
    "text": "We've basically been getting\nminimal trellis realizations,",
    "start": "68330",
    "end": "78230"
  },
  {
    "text": "or state-state space\nrealizations, in system theory terms, for linear block codes.",
    "start": "78230",
    "end": "89960"
  },
  {
    "text": "We've been focusing on binary\nlinear block codes, but",
    "start": "89960",
    "end": "96670"
  },
  {
    "text": "clearly everything we've been\ndoing goes to block codes over",
    "start": "96670",
    "end": "103950"
  },
  {
    "text": "any finite field or,\nin fact, over the real or complex field. It's just basic realization\ntheory,",
    "start": "103950",
    "end": "109960"
  },
  {
    "text": "minimal realization theory. So as long as we have a linear\ntime-varying system, it works.",
    "start": "109960",
    "end": "120060"
  },
  {
    "text": "I had a question after class\nlast time, well, doesn't it work just as well for\nnonlinear systems? Can't we do the trellis\nin the same way?",
    "start": "120060",
    "end": "127720"
  },
  {
    "text": "In general, not. If it's a nonlinear system\nwith a group property, then you can't. It's really the group property\nthat's key to these",
    "start": "127720",
    "end": "134660"
  },
  {
    "text": "constructions. And we seem to have pretty\nwell cracked the problem.",
    "start": "134660",
    "end": "140319"
  },
  {
    "text": "We have this tool called\nthe trellis-oriented or minimal-span generator matrix,\nfrom which we can read all the",
    "start": "140320",
    "end": "146830"
  },
  {
    "text": "parameters of the trellis,\nfrom which we can construct a trellis. Really, we found that the\ntrellis-oriented generator",
    "start": "146830",
    "end": "154239"
  },
  {
    "text": "matrix contains all the\ninformation we need to construct a minimal trellis.",
    "start": "154240",
    "end": "161360"
  },
  {
    "text": "And it's just a matter\nof turning the crank once we have that. ",
    "start": "161360",
    "end": "166620"
  },
  {
    "text": "The only degree of freedom that\nI've allowed so far in",
    "start": "166620",
    "end": "172230"
  },
  {
    "text": "trellis constructions\nis sectionalization. I've shown you that if we can\nchoose where to put the state",
    "start": "172230",
    "end": "181200"
  },
  {
    "text": "spaces wherever we like--  typically we put them in the\ncenter and other places,",
    "start": "181200",
    "end": "187990"
  },
  {
    "text": "sometimes we put them everywhere\nwe could put them, that's called an unsectionalized\ntrellis--",
    "start": "187990",
    "end": "193400"
  },
  {
    "text": "and by so doing, we can\nsometimes reduce the apparent",
    "start": "193400",
    "end": "199569"
  },
  {
    "text": "state-space complexity. But we can never reduce\nthe branch complexity.",
    "start": "199570",
    "end": "205340"
  },
  {
    "text": "So we're left with branch\ncomplexity as a fundamental complexity parameter\nfor linear block",
    "start": "205340",
    "end": "212520"
  },
  {
    "text": "codes, or so it seems. Is there any other-- yes?",
    "start": "212520",
    "end": "218141"
  },
  {
    "text": "AUDIENCE: Does the complexity of\nthe number of computations you need to go through the\ntrellis depends only on the",
    "start": "218141",
    "end": "225452"
  },
  {
    "text": "number of branches, right? PROFESSOR: It depends primarily on the number branches.",
    "start": "225452",
    "end": "230580"
  },
  {
    "text": "It also depends on the edges. If you go through a detailed\noperation count, I think I",
    "start": "230580",
    "end": "239140"
  },
  {
    "text": "give the formula for if you\ncount additions and comparisons as an addition and\nselection you don't count as a",
    "start": "239140",
    "end": "248129"
  },
  {
    "text": "logical operation, then I think\nthe total count for the Viterbi algorithm is twice the\nnumber of edges in the graph,",
    "start": "248130",
    "end": "257630"
  },
  {
    "text": "which is the number of branches,\nminus the number of vertices, which you lose\none for every--",
    "start": "257630",
    "end": "264944"
  },
  {
    "text": "AUDIENCE: What do you\nmean by vertices? PROFESSOR: By vertices I mean\nstates, now I'm talking about it as a graph.",
    "start": "264944",
    "end": "270430"
  },
  {
    "text": "Minus one or plus one\nor something. So that's an exact count for\nthe Viterbi algorithm. But it's dominated by the total\nnumber of edges in the",
    "start": "270430",
    "end": "279560"
  },
  {
    "text": "graph which, in turn, is\nwell-estimated by the maximum branch complexity\nat any one time.",
    "start": "279560",
    "end": "285020"
  },
  {
    "text": " So there's a bit of a trade-off\nbetween an exact",
    "start": "285020",
    "end": "291640"
  },
  {
    "text": "count and just getting a gross\nhandle on the situation.",
    "start": "291640",
    "end": "297676"
  },
  {
    "text": "But I say it's certainly got\nto exceed the branch complexity. So when I find the branch\ncomplexity goes up",
    "start": "297676",
    "end": "305169"
  },
  {
    "text": "exponentially, even for one\nbranch, then I know that the total Viterbi algorithm\ncomplexity has to go up",
    "start": "305170",
    "end": "310949"
  },
  {
    "text": "exponentially with that. All right?",
    "start": "310950",
    "end": "316805"
  },
  {
    "text": "So is that the whole story? Do we now have a pretty\ndefinitive handle on the,",
    "start": "316805",
    "end": "323650"
  },
  {
    "text": "quote, complexity of at least\nmaximum likelihood decoding, trellis decoding of\na block code.",
    "start": "323650",
    "end": "331800"
  },
  {
    "text": "And if you've read Chapter 11,\nyou know there's one other degree of freedom that we\nhaven't exploited yet in",
    "start": "331800",
    "end": "338940"
  },
  {
    "text": "representing a linear\nblock code. Anyone read that far, or are you\njust going to wait for me",
    "start": "338940",
    "end": "344570"
  },
  {
    "text": "to explain it to you? Flip the coordinates,\nvery good. Could that make a difference?",
    "start": "344570",
    "end": "351440"
  },
  {
    "text": "Yes, it certainly could. Let's take our standard example\nby now, the 8-4-4 code",
    "start": "351440",
    "end": "364590"
  },
  {
    "text": "with trellis-oriented matrix\nthat looks like this. ",
    "start": "364590",
    "end": "370030"
  },
  {
    "text": "OK, and we know everything\nabout this by now. But suppose, say, we flip these\ntwo center coordinates.",
    "start": "370030",
    "end": "378510"
  },
  {
    "text": "Certainly it would be an\nequivalent code from all of",
    "start": "378510",
    "end": "385070"
  },
  {
    "text": "its n, k, d and that\nsort of properties. So I want to take these two\ncoordinates and make them 1,",
    "start": "385070",
    "end": "392510"
  },
  {
    "text": "1, 1, 0, 0, 1, 1, 1. ",
    "start": "392510",
    "end": "400670"
  },
  {
    "text": "Let's suppose that's a\ntrellis-oriented generator matrix for the code. I think it is.",
    "start": "400670",
    "end": "407120"
  },
  {
    "text": "It's got starting times here,\nhere, here, and now here.",
    "start": "407120",
    "end": "412940"
  },
  {
    "text": "And it's got ending times now\nhere, here, here, and here.",
    "start": "412940",
    "end": "419570"
  },
  {
    "text": "OK. Where I introduce the diverging\nand merging symbols",
    "start": "419570",
    "end": "426020"
  },
  {
    "text": "that I used last time for\nstarting and ending. All right, I think that is a",
    "start": "426020",
    "end": "431879"
  },
  {
    "text": "trellis-oriented generator matrix. Well, it is. We found a matrix that has\ndistinct starting times and",
    "start": "431880",
    "end": "438440"
  },
  {
    "text": "ending times, so it is. ",
    "start": "438440",
    "end": "443810"
  },
  {
    "text": "Now what's its state\nbranch complexity? ",
    "start": "443810",
    "end": "449710"
  },
  {
    "text": "The state dimension is 0.",
    "start": "449710",
    "end": "455319"
  },
  {
    "text": "Now what are our spans now? ",
    "start": "455320",
    "end": "460730"
  },
  {
    "text": "Two are the same, but\ntwo are larger. OK, so now when we count, we get\nthat the state complexity",
    "start": "460730",
    "end": "469370"
  },
  {
    "text": "goes 0, 1, 2, 3, there are\nactually four that are now active in the center.",
    "start": "469370",
    "end": "475830"
  },
  {
    "text": "3, 2, 1, 0. OK, and that's worse than\nwe had before, at",
    "start": "475830",
    "end": "483090"
  },
  {
    "text": "least in one place. If we look at the dimensions\nof the branch spaces, which",
    "start": "483090",
    "end": "491320"
  },
  {
    "text": "I'm arguing is more fundamental,\nthen we get 1, 2, 3, again, 4, 4.",
    "start": "491320",
    "end": "499729"
  },
  {
    "text": "So the branch complexity is\nnow 16 rather than 8.",
    "start": "499730",
    "end": "506470"
  },
  {
    "text": "It's going to be more difficult,\ndefinitely, to decode this code with the\nViterbi algorithm. This is a more complex\nrepresentation of an",
    "start": "506470",
    "end": "513669"
  },
  {
    "text": "effectively equivalent code. Well, so is there--",
    "start": "513669",
    "end": "520140"
  },
  {
    "text": "so this is a bad permutation,\nit's something I didn't want to do. Is it possible there's some good\npermutation that would",
    "start": "520140",
    "end": "528570"
  },
  {
    "text": "reduce the complexity? In general, when we're given a\nblock code, traditionally at",
    "start": "528570",
    "end": "536350"
  },
  {
    "text": "least, we think of it as the\ncoordinates as just being not in any particular order. We can write down a generator\nmatrix, but the view is that",
    "start": "536350",
    "end": "546310"
  },
  {
    "text": "any permutation of the symbol\ntimes is perfectly legitimate.",
    "start": "546310",
    "end": "551960"
  },
  {
    "text": "Certainly, if we send it over a\nmemoryless channel, it's not going to affect the performance\nof the code, what order we send the symbols in.",
    "start": "551960",
    "end": "558340"
  },
  {
    "text": "So we should certainly regard\nall such codes as equivalent.",
    "start": "558340",
    "end": "564830"
  },
  {
    "text": "But we can affect the\ncomplexity, for better or for worse, so we should try to --",
    "start": "564830",
    "end": "571330"
  },
  {
    "text": "presumably, if we want a more\nfundamental complexity metric for the code, we want to find\nthe complexity of the least",
    "start": "571330",
    "end": "578480"
  },
  {
    "text": "complex trellis realization\nunder all permutations of the coordinates.",
    "start": "578480",
    "end": "584490"
  },
  {
    "text": " All right, so that's a good\nissue, but very little is",
    "start": "584490",
    "end": "593520"
  },
  {
    "text": "known about this issue. It is known that finding the\nbest permutation of an",
    "start": "593520",
    "end": "600240"
  },
  {
    "text": "arbitrary linear code is\nan NP-hard problem. So this is going to be hard.",
    "start": "600240",
    "end": "606040"
  },
  {
    "text": " We know for some specific\nclasses of codes what the best",
    "start": "606040",
    "end": "613329"
  },
  {
    "text": "permutation is. For instance, the Reed-Muller\ncodes are nice because it's",
    "start": "613330",
    "end": "620220"
  },
  {
    "text": "been proved by Kasami and\nothers that the standard coordinate ordering, the one\nthat I've been using all along",
    "start": "620220",
    "end": "626270"
  },
  {
    "text": "based on this length doubling\nconstruction, the u-u plus v construction, gives you the\nminimal trellis complexity.",
    "start": "626270",
    "end": "635030"
  },
  {
    "text": "All right, so we know what the\nbest ordering is for the Reed-Muller codes. ",
    "start": "635030",
    "end": "642580"
  },
  {
    "text": "And in a minute, I'm going to\nprove what the best possible",
    "start": "642580",
    "end": "648210"
  },
  {
    "text": "we can get bounds-- in particular, the Muder bounds,\nwhich I'm going to discuss next--",
    "start": "648210",
    "end": "655480"
  },
  {
    "text": "which bound the best possible\ncomplexity that you could ever get.",
    "start": "655480",
    "end": "661040"
  },
  {
    "text": "And in some cases, we can find\ncoordinate orderings that meet that bound, notably in the\ncase of the 24-12-8 Golay",
    "start": "661040",
    "end": "668630"
  },
  {
    "text": "code, we can find a coordinate\nordering that's very closely related to the Reed-Muller\nordering such that",
    "start": "668630",
    "end": "675295"
  },
  {
    "text": "the bound is met. And so we know that we've\nfound the best complexity for that code.",
    "start": "675295",
    "end": "680463"
  },
  {
    "text": "It couldn't possibly\nbe any better. But apart from certain very\nnice cases like those, we",
    "start": "680463",
    "end": "687200"
  },
  {
    "text": "don't know. For instance, take an\narbitrary BCH code. What's the best coordinate\nordering for that?",
    "start": "687200",
    "end": "694810"
  },
  {
    "text": "We don't know. So this is the open question in\nthis subject, and it's now",
    "start": "694810",
    "end": "703880"
  },
  {
    "text": "been open long enough and\nenough smart people have looked at it, and we've got this\nNP-hardness result, so",
    "start": "703880",
    "end": "709889"
  },
  {
    "text": "that it looks like it's going\nto stay open indefinitely. ",
    "start": "709890",
    "end": "716150"
  },
  {
    "text": "All right, let me discuss,\nhowever, this Muder bound,",
    "start": "716150",
    "end": "721200"
  },
  {
    "text": "because it's simple and\nsometimes definitive. ",
    "start": "721200",
    "end": "731910"
  },
  {
    "text": "Yes? AUDIENCE: [INAUDIBLE]?  PROFESSOR: Minimal branch\ncomplexity or any other",
    "start": "731910",
    "end": "741519"
  },
  {
    "text": "measure that you like. They all are quite fungible,\nit turns out. ",
    "start": "741520",
    "end": "751310"
  },
  {
    "text": "OK, The Muder bound. ",
    "start": "751310",
    "end": "757260"
  },
  {
    "text": "Let's look at a particular code\nand suppose we just know",
    "start": "757260",
    "end": "764925"
  },
  {
    "text": "its parameters, n, k, d. ",
    "start": "764925",
    "end": "771589"
  },
  {
    "text": "Let's ask what the minimal\ntrellis complexity could be",
    "start": "771590",
    "end": "776750"
  },
  {
    "text": "for a particular coordinate\nordering, say, that divides -- we have a certain number of past\nsymbols, call it n_p, and",
    "start": "776750",
    "end": "786930"
  },
  {
    "text": "a certain number of future\nsymbols, n_f. And I'm going to ask what the\nminimum state complexity, or I",
    "start": "786930",
    "end": "795740"
  },
  {
    "text": "could also ask what's\nthe minimum branch complexity for--",
    "start": "795740",
    "end": "801170"
  },
  {
    "text": "let me do now a state\ncomplexity, going back to where we started from, for a a\ncertain division in the past",
    "start": "801170",
    "end": "809319"
  },
  {
    "text": "and future. To be concrete, let me take\nthe 24-12-8 Golay code.",
    "start": "809320",
    "end": "818824"
  },
  {
    "text": "It turns out that it's been\nproved that all codes with these parameters\nare equivalent.",
    "start": "818825",
    "end": "825200"
  },
  {
    "text": "So we can just call this code\nthe binary Golay code.",
    "start": "825200",
    "end": "830230"
  },
  {
    "text": "And let's look for any division\ninto 16 future",
    "start": "830230",
    "end": "837240"
  },
  {
    "text": "coordinates and 8 past\ncoordinates. So we don't know what the\nordering is going to be, but",
    "start": "837240",
    "end": "842980"
  },
  {
    "text": "we could say a few things. Remember how we get the\nstate complexity. We look for what's the dimension\nof the past subcode.",
    "start": "842980",
    "end": "851459"
  },
  {
    "text": "So here's a generator for the\npast subcode here, the code whose support is the past.",
    "start": "851460",
    "end": "859240"
  },
  {
    "text": "We can ask what the dimension of\nthe future subcode is, and then the dimension of the state\nspace is the dimension",
    "start": "859240",
    "end": "868035"
  },
  {
    "text": "of what's left. So it's dimension of c minus\nthe dimension of the past",
    "start": "868035",
    "end": "874740"
  },
  {
    "text": "subcode minus the dimension\nof the future subcode.",
    "start": "874740",
    "end": "880380"
  },
  {
    "text": "State-space theorem. OK, but we know a few things\nabout this code.",
    "start": "880380",
    "end": "890129"
  },
  {
    "text": "We know what its length is and\nwe know what its minimum distance is. So for this particular case,\nwe have that c past is an",
    "start": "890130",
    "end": "900339"
  },
  {
    "text": "8-something-8 code, because its\nminimum distance has got",
    "start": "900340",
    "end": "908450"
  },
  {
    "text": "to be at least as\ngreat as this. It's a subcode of this code.",
    "start": "908450",
    "end": "913670"
  },
  {
    "text": "So any non-zero code words in\nthis past subcode have to have minimum weight of at least 8.",
    "start": "913670",
    "end": "920810"
  },
  {
    "text": "Correct? All right. And similarly, the future\nsubcode, in this",
    "start": "920810",
    "end": "927420"
  },
  {
    "text": "case, is a 16-k -- let's call this past -- k-future-8 code.",
    "start": "927420",
    "end": "934259"
  },
  {
    "text": " At least 8.",
    "start": "934260",
    "end": "939720"
  },
  {
    "text": "So that imposes some bounds on\nthe dimension of this code. How large could the dimension\npossibly be?",
    "start": "939720",
    "end": "949610"
  },
  {
    "text": "All right, anybody? For the past subcode its\nclearly, we have that k_p less",
    "start": "949610",
    "end": "958210"
  },
  {
    "text": "than or equal to 1. We could have, at most,\none generator here. And if there were one,\nit would have to be",
    "start": "958210",
    "end": "963660"
  },
  {
    "text": "the all-1 code word. Or the all-1 symbols here,\nbecause it has",
    "start": "963660",
    "end": "969000"
  },
  {
    "text": "to have weight 8. So that's all we can get. For the future code--",
    "start": "969000",
    "end": "974440"
  },
  {
    "text": " well, I guess you don't know\nthis, but you can guess that",
    "start": "974440",
    "end": "981560"
  },
  {
    "text": "the Reed-Muller code with length\n16 and minimum distance",
    "start": "981560",
    "end": "987580"
  },
  {
    "text": "8 is the best there is, that\ndistance 16, and that happens to be true.",
    "start": "987580",
    "end": "993200"
  },
  {
    "text": "So k-future can't possibly be\nbetter than 5, which is the",
    "start": "993200",
    "end": "998650"
  },
  {
    "text": "dimension of the Reed-Muller\ncode with those parameters. ",
    "start": "998650",
    "end": "1006680"
  },
  {
    "text": "For more general cases, you\nhave to look up tables on bounds on the best codes that\nhave ever been found.",
    "start": "1006680",
    "end": "1013730"
  },
  {
    "text": "But certainly for code lengths\nless than a 100, by this time we pretty much know all\nthe best binary codes.",
    "start": "1013730",
    "end": "1022230"
  },
  {
    "text": "So we can look up in a table\nwhat's the best code of length 16 and distance 8?",
    "start": "1022230",
    "end": "1028000"
  },
  {
    "text": "Well, it has five information\nsymbols, dimension five. So we couldn't have more than\none dimension here and we",
    "start": "1028000",
    "end": "1035919"
  },
  {
    "text": "couldn't have more than five\ndimensions here, so the dimensional code itself is 12.",
    "start": "1035920",
    "end": "1043599"
  },
  {
    "text": "We have to say that the\ndimension state-space is now going to be greater\nthan equal to-- this is k_p minus 1 minus 5--",
    "start": "1043599",
    "end": "1052760"
  },
  {
    "text": "so, that's 6. So there have to be at least 6\ngenerators down here that have",
    "start": "1052760",
    "end": "1061810"
  },
  {
    "text": "support neither wholly on the\npast nor wholly on the future and therefore have to be\nincluded in the state-space.",
    "start": "1061810",
    "end": "1069610"
  },
  {
    "text": "All right, that's the idea\nof the Muder bound. ",
    "start": "1069610",
    "end": "1079800"
  },
  {
    "text": "Now, we could do this for every\nsingle state-space. We simply need to know what the\ndimension is of the best",
    "start": "1079800",
    "end": "1086960"
  },
  {
    "text": "code of each length with\nminimum distance 8.",
    "start": "1086960",
    "end": "1092289"
  },
  {
    "text": "And we can do a similar thing\nfor every possible partition",
    "start": "1092290",
    "end": "1097520"
  },
  {
    "text": "in the past and future. And that will give us a set of\nbounds, and we go through that",
    "start": "1097520",
    "end": "1103210"
  },
  {
    "text": "exercise in the notes. And I can write it on the\nboard, maybe for memory.",
    "start": "1103210",
    "end": "1112669"
  },
  {
    "text": "And OK, that tells us what\nthe best possible",
    "start": "1112670",
    "end": "1117950"
  },
  {
    "text": "state profile is. Let me guess state dimension\nprofile is 0, 1,",
    "start": "1117950",
    "end": "1135510"
  },
  {
    "text": "2, 3, 4, 5, 6, 7.",
    "start": "1135510",
    "end": "1140706"
  },
  {
    "text": "Then it goes down to 6, 7, 8,\n9, then it goes down to 8.",
    "start": "1140706",
    "end": "1148490"
  },
  {
    "text": "This is at the central\nstate-space. This is for dividing it in\nthe way that we just did.",
    "start": "1148490",
    "end": "1157060"
  },
  {
    "text": "Let's do this here. For the central state-space,\nwhat's the best k_p for a 12,",
    "start": "1157060",
    "end": "1167870"
  },
  {
    "text": "k_p, 8 code? Let's make the past and\nfuture both 12.",
    "start": "1167870",
    "end": "1173790"
  },
  {
    "text": " Anyone want to guess what\nthe best dimension is?",
    "start": "1173790",
    "end": "1180620"
  },
  {
    "text": " Let's think about it. Let's think of a code that's\ngoing to have to have",
    "start": "1180620",
    "end": "1188520"
  },
  {
    "text": "minimum weight 8. So let's start out with g1.",
    "start": "1188520",
    "end": "1194456"
  },
  {
    "text": "And we'll just make that\nlook like that.",
    "start": "1194456",
    "end": "1200140"
  },
  {
    "text": "It's going to have length 12. It's going to have to have at\nleast eight 1s, so let's make them like that.",
    "start": "1200140",
    "end": "1207030"
  },
  {
    "text": "We want to add another 1 so\nthat the total code has a",
    "start": "1207030",
    "end": "1212704"
  },
  {
    "text": "minimum distance 8. Subject to up to permutations,\nthere's only one",
    "start": "1212704",
    "end": "1218250"
  },
  {
    "text": "thing it can be. We need another weight-8\ngenerator, and it needs to differ from this in at least\nfour places so that when we",
    "start": "1218250",
    "end": "1226149"
  },
  {
    "text": "take the mod 2 sum of these\ntwo, it has distance 8. And we want g1 plus g2.",
    "start": "1226150",
    "end": "1235140"
  },
  {
    "text": "This is really the only\nway it can be. Are you with me? We have four code words in\nthis dimension 2 code.",
    "start": "1235140",
    "end": "1244030"
  },
  {
    "text": "And if they're going to have\nminimum distance 8, they're going to have to look like\nthis, subject to up to permutation. ",
    "start": "1244030",
    "end": "1250539"
  },
  {
    "text": "So from that little argument,\nwe conclude that, in this case, this is less than\nor equal to 2.",
    "start": "1250540",
    "end": "1256410"
  },
  {
    "text": "This is less than or equal to\n2, the Muder bound becomes",
    "start": "1256410",
    "end": "1261470"
  },
  {
    "text": "that the dimension of\nthe state-space has to be at least 8.",
    "start": "1261470",
    "end": "1267115"
  },
  {
    "text": " And so in the same way, and then\nit becomes symmetrical on",
    "start": "1267115",
    "end": "1273640"
  },
  {
    "text": "the other side. So I'm pretty sure\nI get it right. And from memory, that's the best\npossible state dimension",
    "start": "1273640",
    "end": "1280800"
  },
  {
    "text": "profile, dot dot dot. And we actually know a\ncoordinate ordering for the",
    "start": "1280800",
    "end": "1289505"
  },
  {
    "text": "Golay code, a generator matrix\nfor the Golay code, that gives this state dimension profile.",
    "start": "1289505",
    "end": "1295440"
  },
  {
    "text": "So from that, we can conclude\nthat we know an optimum coordinate ordering for\nthe Golay code.",
    "start": "1295440",
    "end": "1304669"
  },
  {
    "text": "I just want you to get the\nessence of the argument here.  You with me?",
    "start": "1304670",
    "end": "1310920"
  },
  {
    "text": " For branch spaces, the argument\nis much the same.",
    "start": "1310920",
    "end": "1316270"
  },
  {
    "text": "Remember in branch spaces,\nwe basically --",
    "start": "1316270",
    "end": "1322220"
  },
  {
    "text": "let me say it in a slightly\ndifferent way than we did before -- we take the past\nto be up to time k.",
    "start": "1322220",
    "end": "1330460"
  },
  {
    "text": "And we have the symbol time,\nwhich is just one time in here for the actual symbol\nwe're looking at.",
    "start": "1330460",
    "end": "1335899"
  },
  {
    "text": "And the future is one unit\nshorter than it was for the state-space. So when we compute the\nbranch dimension, the",
    "start": "1335900",
    "end": "1344380"
  },
  {
    "text": "past goes up to k. So this is 0 and before k.",
    "start": "1344380",
    "end": "1352570"
  },
  {
    "text": "And the future goes from\nk plus one up to n. ",
    "start": "1352570",
    "end": "1360410"
  },
  {
    "text": "So this is what the matrix\nlooks like for this. And the effect over here is that\nthe future subcode now is",
    "start": "1360410",
    "end": "1371029"
  },
  {
    "text": "one unit shorter. So let's do the same\ncalculation here. ",
    "start": "1371030",
    "end": "1378720"
  },
  {
    "text": "If we look at a time where we\nhave 12 in the past, this one",
    "start": "1378720",
    "end": "1384830"
  },
  {
    "text": "time, the 13th symbol time that\nwe're actually looking at and then 11 more in the future,\nthe past subcode,",
    "start": "1384830",
    "end": "1394370"
  },
  {
    "text": "again, could have dimension up\nto 2 because it has length 12 and minimum distance 8.",
    "start": "1394370",
    "end": "1399950"
  },
  {
    "text": "The future subcode now has a\nshorter length and by this",
    "start": "1399950",
    "end": "1405500"
  },
  {
    "text": "little argument I went\nthrough here. If we take out one of these\ncoordinates, it's",
    "start": "1405500",
    "end": "1410740"
  },
  {
    "text": "not going to work. So if we only have length 11,\nthe future subcode is the",
    "start": "1410740",
    "end": "1417210"
  },
  {
    "text": "dimension -- still can only be 1. We can't possibly add another\nsecond generator in there.",
    "start": "1417210",
    "end": "1423890"
  },
  {
    "text": "And so the dimension of the\nbranch space has to be vastly",
    "start": "1423890",
    "end": "1431790"
  },
  {
    "text": "greater than or equal\nto 9, at this point.",
    "start": "1431790",
    "end": "1437170"
  },
  {
    "text": "OK, so the Golay code has branch\ncomplexity of at least 512, we conclude.",
    "start": "1437170",
    "end": "1444760"
  },
  {
    "text": "And, in fact, this best possible\nbranch dimension",
    "start": "1444760",
    "end": "1450060"
  },
  {
    "text": "profile looks like this. The branches are in\nthe middle here.",
    "start": "1450060",
    "end": "1455240"
  },
  {
    "text": "They're 1, 2, 3, 4, 5, 6, 6. Basically we have generators\nwhich look like this.",
    "start": "1455240",
    "end": "1465400"
  },
  {
    "text": "And then there's one that comes\ndown, there are three more that goes up and\none that comes down.",
    "start": "1465400",
    "end": "1471090"
  },
  {
    "text": "And from that, we get 1,\n2, 3, 4, 6, 7, 7, 8 --",
    "start": "1471090",
    "end": "1481125"
  },
  {
    "text": " that can't be right.",
    "start": "1481125",
    "end": "1488289"
  },
  {
    "text": "Goes down 7, goes up, it's still\n7, then it goes up to 8, 9, and 9, 9, 9.",
    "start": "1488290",
    "end": "1500330"
  },
  {
    "text": "Something like that. That one's probably wrong,\nand symmetrically. ",
    "start": "1500330",
    "end": "1506470"
  },
  {
    "text": "Where this 9 is the one\nwe just calculated.  Similarly, if you come down to\nthe neighbor of this 6, it's",
    "start": "1506470",
    "end": "1515850"
  },
  {
    "text": "got a merge on one side,\na diverge on the other side, and that's 7.",
    "start": "1515850",
    "end": "1520870"
  },
  {
    "text": "OK, so we conclude that the\nGolay code has branch",
    "start": "1520870",
    "end": "1526450"
  },
  {
    "text": "dimension not less than\n512 within 9. Yeah? AUDIENCE: Suppose we take past\nand future separated by 12, 12",
    "start": "1526450",
    "end": "1536106"
  },
  {
    "text": "in the past, 12 in the future. Suppose we did it as they did\nin [UNINTELLIGIBLE] state?",
    "start": "1536106",
    "end": "1541620"
  },
  {
    "text": "PROFESSOR: OK, but that's not\nthe way we do branches. We've got to isolate\nthe symbol time. AUDIENCE: Suppose we took\n12-branch-12 and we calculate",
    "start": "1541620",
    "end": "1549030"
  },
  {
    "text": "the state complexity,\nthat's 8. And then we took 13 and 11, we\nget the state complexity 9.",
    "start": "1549030",
    "end": "1559434"
  },
  {
    "text": " PROFESSOR: All right, you're\nsaying if we do this, we",
    "start": "1559435",
    "end": "1570130"
  },
  {
    "text": "should get the state\ncomplexity 9. And that's correct, we do. AUDIENCE: The maximum of those\ntwo numbers, is it the same as",
    "start": "1570130",
    "end": "1578095"
  },
  {
    "text": "branch complexity? PROFESSOR: It turns out\nto be in this case. AUDIENCE: Not always? PROFESSOR: Not always. ",
    "start": "1578095",
    "end": "1588290"
  },
  {
    "text": "But if we go to 14, 10, then\nit turns out we can add",
    "start": "1588290",
    "end": "1594070"
  },
  {
    "text": "another one here because we can\nadd another generator that",
    "start": "1594070",
    "end": "1599370"
  },
  {
    "text": "looks like something\nlike this. 1, 1, 0, 0, 1, 1, 1,\n1, 0, 0, 1, 1.",
    "start": "1599370",
    "end": "1610660"
  },
  {
    "text": "So if we have two more units, we\ncan add another generator. Sort of Reed-Muller style.",
    "start": "1610660",
    "end": "1616380"
  },
  {
    "text": "And so this goes up to 3 and\nthis goes down to 8.",
    "start": "1616380",
    "end": "1622886"
  },
  {
    "text": "AUDIENCE: So the branch\ncomplexity has to be at least the maximum of those\ntwo, right? PROFESSOR: Obviously, right.",
    "start": "1622886",
    "end": "1628270"
  },
  {
    "text": " And really, together these give\nyou the story of where",
    "start": "1628270",
    "end": "1634830"
  },
  {
    "text": "the thing has to diverge\nand merge. In this case, this is a\nself-dual code, so you only do",
    "start": "1634830",
    "end": "1640720"
  },
  {
    "text": "one at each time. So with this sort of\nthing, you can pretty well pin it down.",
    "start": "1640720",
    "end": "1646799"
  },
  {
    "text": "Again, I don't know how far\nto take this lecture. I'm really just trying to get\nto you the idea of the Muder",
    "start": "1646800",
    "end": "1653900"
  },
  {
    "text": "bound from this kind of\nargument, therefore we can get a bound on the best possible\nstate dimension profile and",
    "start": "1653900",
    "end": "1660980"
  },
  {
    "text": "the best possible branch\ncomplexity profile. If you compute this bound and\nyou're able to find an actual",
    "start": "1660980",
    "end": "1672840"
  },
  {
    "text": "generator matrix that meets this\nbound, you know you've found the best one. But this rarely happens, this\nis a very special code.",
    "start": "1672840",
    "end": "1681770"
  },
  {
    "text": "It's not the way you prove the\noptimality of the longer Reed-Muller codes, they're\nnot good enough to --",
    "start": "1681770",
    "end": "1687990"
  },
  {
    "text": "this really assumes that you\ncan get the best possible sub-codes at every point.",
    "start": "1687990",
    "end": "1695190"
  },
  {
    "text": "And you can imagine that's\nvery hard to do. It would be a very special case\nwhere you can optimize",
    "start": "1695190",
    "end": "1700470"
  },
  {
    "text": "this for every single possible\ncut between past and future. ",
    "start": "1700470",
    "end": "1707520"
  },
  {
    "text": "OK, so that's the Muder bound. And you have a homework exercise\non that as well.",
    "start": "1707520",
    "end": "1717460"
  },
  {
    "text": "Oh, there's another case where\nwe can find what the best possible trellis\ncomplexity is.",
    "start": "1717460",
    "end": "1723500"
  },
  {
    "text": "It's MDS codes over GFq, and\nyou're going to do that on the",
    "start": "1723500",
    "end": "1729900"
  },
  {
    "text": "homework as well. And there, we basically show\nthat an MDS code, its n, k, d",
    "start": "1729900",
    "end": "1739029"
  },
  {
    "text": "are such that it has to have\nthe worst possible state complexity and branch\ncomplexity.",
    "start": "1739030",
    "end": "1746470"
  },
  {
    "text": "So because it's such a\ntightly-packed code, in Hamming distance sense, it\nforces you to have the worst",
    "start": "1746470",
    "end": "1755260"
  },
  {
    "text": "possible complexity that\nyou could have. In other words, you have\ndiverges immediately and as",
    "start": "1755260",
    "end": "1762530"
  },
  {
    "text": "long as you can, and then\nthey're all packed together on the left side and the merges are\nall packed together on the",
    "start": "1762530",
    "end": "1769920"
  },
  {
    "text": "right side, and that's the\nonly way it can be. I'm just speaking very\nimpressionistically.",
    "start": "1769920",
    "end": "1775675"
  },
  {
    "text": "But you'll see what I mean when\nyou get to the homework, if you haven't done\nit already. OK, so we also know MDS codes,\nwe know their trellis",
    "start": "1775675",
    "end": "1788970"
  },
  {
    "text": "complexity and it's terrible. We can't get any effective\nreduction.",
    "start": "1788970",
    "end": "1795700"
  },
  {
    "text": "Really, over exhaustive decoding\nmethods with MDS codes, we find that the trellis\ncomplexity is like",
    "start": "1795700",
    "end": "1803040"
  },
  {
    "text": "either q to the k or\nq to the n minus k, depending on which is less. ",
    "start": "1803040",
    "end": "1810959"
  },
  {
    "text": "So that's as bad as it\ncould possibly be. So if the trellis doesn't help\nfor MDS codes, in general",
    "start": "1810959",
    "end": "1819789"
  },
  {
    "text": "cyclic codes -- which were subject to a lot of\nstudy -- if we put the code into cyclic form, which if you\nremember Reed-Solomon codes",
    "start": "1819790",
    "end": "1828789"
  },
  {
    "text": "and BCH codes can always be put\ninto cyclic form, at least the shortened versions\nof them.",
    "start": "1828790",
    "end": "1835050"
  },
  {
    "text": "In that case, the generator\nmatrix looks like this one up here. It looks like x, x, x, x, x, x,\nx, 0, 0, 0, 0, 0, 0, 0, x,",
    "start": "1835050",
    "end": "1847880"
  },
  {
    "text": "x, x, x, x, x, x, 0, 0,\nx, x, x, x, x, x, x.",
    "start": "1847880",
    "end": "1853820"
  },
  {
    "text": "In other words, the generators\nare just cyclic shifts of one another. ",
    "start": "1853820",
    "end": "1860500"
  },
  {
    "text": "Down to x, x, x, x, x,\nx, x, 0, 0, 0, 0.",
    "start": "1860500",
    "end": "1867300"
  },
  {
    "text": " That is a generator matrix that\nis a trellis-oriented",
    "start": "1867300",
    "end": "1873190"
  },
  {
    "text": "generator matrix because all\nthe starting times are different and all the stopping\ntimes are different.",
    "start": "1873190",
    "end": "1878950"
  },
  {
    "text": "So this is the trellis-oriented\ngenerator matrix for cyclic code, and\nit's in the coordinate",
    "start": "1878950",
    "end": "1887960"
  },
  {
    "text": "ordering in which\nit is cyclic. And it's always going to have\nthis worst case -- all the",
    "start": "1887960",
    "end": "1896210"
  },
  {
    "text": "branch diverges are going to\noccur over here and you may get nothing for a while.",
    "start": "1896210",
    "end": "1901390"
  },
  {
    "text": "And then all the merges over\nhere, which if it's a rate",
    "start": "1901390",
    "end": "1907330"
  },
  {
    "text": "less than 1/2 code, this means\nthat the trellis complexity is basically going to\nbe 2 to the k.",
    "start": "1907330",
    "end": "1915070"
  },
  {
    "text": "Or if it's a high-rate code, it\nmeans it's going to be 2 to the n minus k. And again, you get no\nimprovement over some",
    "start": "1915070",
    "end": "1921179"
  },
  {
    "text": "exhaustive minimum distance\ndecoding, or maximum likelihood decoding.",
    "start": "1921180",
    "end": "1926770"
  },
  {
    "text": "So cyclic is very bad from\na trellis point of view. ",
    "start": "1926770",
    "end": "1936360"
  },
  {
    "text": "So I think that's about\nall the general comments I can make.",
    "start": "1936360",
    "end": "1942010"
  },
  {
    "text": "The very last thing that\nI want to mention is",
    "start": "1942010",
    "end": "1947060"
  },
  {
    "text": "we now want to -- all right, so through this nice\nlittle theory, we've got",
    "start": "1947060",
    "end": "1953580"
  },
  {
    "text": "a way of trellis decoding\n(maximum likelihood decoding),",
    "start": "1953580",
    "end": "1960480"
  },
  {
    "text": "via the Viterbi algorithm,\nof block codes.",
    "start": "1960480",
    "end": "1966400"
  },
  {
    "text": "And now, did we achieve any\nimprovements in terms of",
    "start": "1966400",
    "end": "1972600"
  },
  {
    "text": "performance versus complexity\nversus the convolutional codes",
    "start": "1972600",
    "end": "1980360"
  },
  {
    "text": "that we looked at previously? ",
    "start": "1980360",
    "end": "1986120"
  },
  {
    "text": "And the basic answer is, no.",
    "start": "1986120",
    "end": "1992040"
  },
  {
    "text": "If you compare the tables,",
    "start": "1992040",
    "end": "1997850"
  },
  {
    "text": "convolutional are always better. I'll just say it. You can imagine that there have\nbeen long debates in the",
    "start": "1997850",
    "end": "2006890"
  },
  {
    "text": "fraternity, and that certainly\nsome of the motivation for trellis decoding of block codes\nwas, oh, gee, now we",
    "start": "2006890",
    "end": "2014390"
  },
  {
    "text": "have a good way to decode block\ncodes, just like we did for convolutional codes.",
    "start": "2014390",
    "end": "2019500"
  },
  {
    "text": "And maybe now we'll find that\nblock codes are worthwhile. But the answer is they're not.",
    "start": "2019500",
    "end": "2026190"
  },
  {
    "text": "I should put this comparison\ninto Chapter 10. You can actually get this\ncomparison by taking the table",
    "start": "2026190",
    "end": "2034205"
  },
  {
    "text": "-- for instance, for\nReed-Muller codes. In terms of performance versus\ncomplexity, Reed-Muller codes are very good.",
    "start": "2034205",
    "end": "2040250"
  },
  {
    "text": "I would say as a general\nstatement, they're the best block codes that we know of, in\nterms of performance versus",
    "start": "2040250",
    "end": "2047470"
  },
  {
    "text": "trellis decoding complexity,\nbecause they have this nice structure that gives them very\nlow-complexity trellises for",
    "start": "2047470",
    "end": "2056079"
  },
  {
    "text": "their n, k, d parameters. So in this sense, it's\na fair comparison.",
    "start": "2056080",
    "end": "2062908"
  },
  {
    "text": "Reed-Muller codes are the best\ngeneral class we know of in terms of trellis complexity. We compare them against binary\nconvolutional codes and",
    "start": "2062909",
    "end": "2075270"
  },
  {
    "text": "they're not nearly as good. I've already talked about\nthe comparison.",
    "start": "2075270",
    "end": "2080330"
  },
  {
    "text": "It seems like a very fair\ncomparison to take our rate 1/2 four-state convolutional\ncode example, which had",
    "start": "2080330",
    "end": "2088309"
  },
  {
    "text": "distance 5, which had not only a\nnominal coding gain of 4 dB,",
    "start": "2088310",
    "end": "2093690"
  },
  {
    "text": "but it also has an effective\ncoding gain of 4 dB. And for a block code, this 8,\n4, 4 code is a very fair",
    "start": "2093690",
    "end": "2103470"
  },
  {
    "text": "comparison. It's also rate 1/2, so it has\nthe same spectral efficiency.",
    "start": "2103470",
    "end": "2108780"
  },
  {
    "text": "It also has a four-state trellis\nthat looks very much like a rate 1/2 convolutional\ncode trellis.",
    "start": "2108780",
    "end": "2117100"
  },
  {
    "text": "But it turns out it only has\nminimum distance of 4 rather than 5, so its nominal coding\ngain is only 3 dB",
    "start": "2117100",
    "end": "2127720"
  },
  {
    "text": "rather than 4 dB. Its effective coding\ngain is less. Its effective coding gain is\n2.6 dN because it has 14",
    "start": "2127720",
    "end": "2137400"
  },
  {
    "text": "nearest neighbors, which is a\n3 1/2 nearest neighbors per bit, and that costs you\nabout 4/10 of a dN.",
    "start": "2137400",
    "end": "2145550"
  },
  {
    "text": "And so really, you compare\nthe performance of the convolutional to the block code,\nthat's very much better.",
    "start": "2145550",
    "end": "2153040"
  },
  {
    "text": " Another head-to-head comparison\nmight be between",
    "start": "2153040",
    "end": "2160330"
  },
  {
    "text": "the 32, 16, 8 Reed-Muller\ncode. That's a rate 1/2 code.",
    "start": "2160330",
    "end": "2166680"
  },
  {
    "text": "It's a very good one, it's\nknown to be the best with",
    "start": "2166680",
    "end": "2172030"
  },
  {
    "text": "those parameters, n, k, d. So what's its nominal\ncoding gain? Anyone?",
    "start": "2172030",
    "end": "2177069"
  },
  {
    "text": "It has rate 1/2, minimum\ndistance 8, its nominal coding gain is?",
    "start": "2177070",
    "end": "2182410"
  },
  {
    "text": "Hello? 6 dB. You take the rate times\nthe minimum distance--",
    "start": "2182410",
    "end": "2189099"
  },
  {
    "text": "1/2 times 8, you get 4. So that's the nominal\ncoding gain. A factor of 4, which in\ndB terms is 6 dB.",
    "start": "2189100",
    "end": "2198029"
  },
  {
    "text": "But again, it has lots of\nminimum-weight code words. It has 620 minimum-weight\ncode words.",
    "start": "2198030",
    "end": "2205850"
  },
  {
    "text": "And therefore, the number of\nminimum-weight code words per bit is 39, which is between five\nand six factors of 3, so",
    "start": "2205850",
    "end": "2214690"
  },
  {
    "text": "it costs you 5 and 1/2 times 0.2\ndB in terms of effective",
    "start": "2214690",
    "end": "2221220"
  },
  {
    "text": "coding gain, which brings you\ndown to an effective coding gain of 4.9 dB. ",
    "start": "2221220",
    "end": "2226700"
  },
  {
    "text": "I assume you're all\nvery fluent in doing these, as I am.",
    "start": "2226700",
    "end": "2231970"
  },
  {
    "text": "And what's its complexity? If you look its state\ncomplexity, let's take--",
    "start": "2231970",
    "end": "2241770"
  },
  {
    "text": "we're looking at\nthe 32, 16, 8. And all the Reed-Muller codes\nhave four section trellises,",
    "start": "2241770",
    "end": "2249960"
  },
  {
    "text": "you proved that this week. If you just measure the state\ncomplexity of four places,",
    "start": "2249960",
    "end": "2256350"
  },
  {
    "text": "equally spaced with four equal\nsections, then all the trellises wind up looking\nlike this, for a general",
    "start": "2256350",
    "end": "2264799"
  },
  {
    "text": "Reed-Muller trellis -- a four-section trellis. ",
    "start": "2264800",
    "end": "2273400"
  },
  {
    "text": "And for the 32, 16, 8, it\nturns out you get eight parallel sections like that\nwith eight of these each.",
    "start": "2273400",
    "end": "2282570"
  },
  {
    "text": "In any case, it's 64 states at\neach of these boundaries. ",
    "start": "2282570",
    "end": "2289830"
  },
  {
    "text": "So you could say it's\na 64-state trellis. But if you're more honest, just\nexactly as with the Golay",
    "start": "2289830",
    "end": "2296370"
  },
  {
    "text": "code calculation we went\nthrough, you find that the maximum branch complexity\nis 512.",
    "start": "2296370",
    "end": "2305480"
  },
  {
    "text": "So branch complexity is 512.",
    "start": "2305480",
    "end": "2316710"
  },
  {
    "text": "OK, and its nominal coding gain\nwe said is 6 dB and its",
    "start": "2316710",
    "end": "2323440"
  },
  {
    "text": "effective coding\ngain is 4.9 dB. ",
    "start": "2323440",
    "end": "2331150"
  },
  {
    "text": "OK, so let's look for a\nconvolutional code of rate 1/2 that has a coding gain\nof about 5 or 6 dB.",
    "start": "2331150",
    "end": "2339619"
  },
  {
    "text": " And how far do we have to go?",
    "start": "2339620",
    "end": "2345010"
  },
  {
    "text": "We actually only have\nto go up to a-- well, a 32-state code\nhas an effective",
    "start": "2345010",
    "end": "2352010"
  },
  {
    "text": "coding gain of 5.6 dB. A 64-state code we can get up to\nan effective coding gain of",
    "start": "2352010",
    "end": "2359300"
  },
  {
    "text": "about 6 dB. In fact, the 64-state rate 1/2\nconvolutional code was a",
    "start": "2359300",
    "end": "2366700"
  },
  {
    "text": "standard for a very long time,\nfirst in space communications and then in much more general\napplications.",
    "start": "2366700",
    "end": "2373809"
  },
  {
    "text": "This was the code that Linkabit\nCorporation -- Jacobs and Viterbi --",
    "start": "2373810",
    "end": "2379279"
  },
  {
    "text": "rode to fame and fortune, made\ntheir first pile before they went on to found Qualcomm,\nwhere they made",
    "start": "2379280",
    "end": "2387520"
  },
  {
    "text": "a much bigger pile. And so this was their--",
    "start": "2387520",
    "end": "2393530"
  },
  {
    "text": "they call it k equals 7. But in my terms, nu equals\n6, a 64-state rate 1/2",
    "start": "2393530",
    "end": "2401120"
  },
  {
    "text": "convolutional code. So let's take that rate 1/2\n64-state convolutional code,",
    "start": "2401120",
    "end": "2412170"
  },
  {
    "text": "just with the standard\ntrellis. So its branch complexity\nis 128 at every time.",
    "start": "2412170",
    "end": "2423945"
  },
  {
    "text": "It has a more regular structure\nthan this guy. Its nominal coding gain is --",
    "start": "2423945",
    "end": "2433859"
  },
  {
    "text": "there are actually two of them,\nand I don't remember. There's one of them that has a\nnominal coding gain of 7, the",
    "start": "2433860",
    "end": "2440210"
  },
  {
    "text": "other one is 6.5. So it's at least 6.5 dB. And its effective coding gain\nis still 6.1 dB and it's",
    "start": "2440210",
    "end": "2451030"
  },
  {
    "text": "clearly much better than this. ",
    "start": "2451030",
    "end": "2457900"
  },
  {
    "text": "If you kind of try to plot a\ngraph of this, you'll see that",
    "start": "2457900",
    "end": "2463650"
  },
  {
    "text": "the effective coding gains of\nconvolutional codes with the same state complexity is at\nleast one dB better, as a",
    "start": "2463650",
    "end": "2471950"
  },
  {
    "text": "general trend, than that\nof block codes. And of course, if you do it in\nterms of branch complexity,",
    "start": "2471950",
    "end": "2481180"
  },
  {
    "text": "it's an even better\ncomparison. So what happened was there was\nabout a decade of effort on",
    "start": "2481180",
    "end": "2491480"
  },
  {
    "text": "basically finding good trellis\nrepresentations of block codes, and the net of it was\nthat they couldn't get",
    "start": "2491480",
    "end": "2498690"
  },
  {
    "text": "anywhere close to finding\nanything as good as convolutional codes. Although, it's a nice little\npiece of theory.",
    "start": "2498690",
    "end": "2506910"
  },
  {
    "text": "And sometimes you want to block\ncodes for other reasons. Sometimes you want\nshort blocks.",
    "start": "2506910",
    "end": "2512490"
  },
  {
    "text": "Sometimes you're limited to\na block of less than 100. And in that case, you're\ncertainly not going to do",
    "start": "2512490",
    "end": "2520040"
  },
  {
    "text": "better in terms of n, k, d than\nthe best block code of a length 100. Why are convolutional\ncodes better?",
    "start": "2520040",
    "end": "2526700"
  },
  {
    "text": "First of all, they obviously\nnaturally are well-adapted to the trellis idea.",
    "start": "2526700",
    "end": "2532840"
  },
  {
    "text": "They are linear time invariant\nmachines that just have very",
    "start": "2532840",
    "end": "2540300"
  },
  {
    "text": "nice, regular trellises. So they're naturally adapted.",
    "start": "2540300",
    "end": "2547170"
  },
  {
    "text": "But also, they have exactly\nthe right-- a rate 1/2 code is diverge,\nmerge, diverge, merge,",
    "start": "2547170",
    "end": "2555580"
  },
  {
    "text": "diverge, merge forever. If you want to make it into a\nblock code, you can terminate",
    "start": "2555580",
    "end": "2561269"
  },
  {
    "text": "it or you can tail-bite it,\nwhich is something we're going to talk about shortly.",
    "start": "2561270",
    "end": "2566970"
  },
  {
    "text": "But whichever way you do it, to\nmake it into a block code, you lose something. The termination, you don't lose\nminimum distance, but you",
    "start": "2566970",
    "end": "2574040"
  },
  {
    "text": "do lose rate. You have to put in some dummy\ninformation symbols, so the rate becomes less than 1/2 if\nyou terminate this code.",
    "start": "2574040",
    "end": "2582250"
  },
  {
    "text": "Nonetheless, as I believe I\ncommented earlier, that's a good way to come up with good\nblock codes, is to terminate a",
    "start": "2582250",
    "end": "2589620"
  },
  {
    "text": "good convolutional code. If you choose the parameters\nright, you can come up with pretty good codes.",
    "start": "2589620",
    "end": "2596350"
  },
  {
    "text": "But nonetheless, in terms of\nblock code parameters, you're not going to do better than what\n50 years of block code,",
    "start": "2596350",
    "end": "2603650"
  },
  {
    "text": "algebraic coding theory\nhas come up with. So for short block codes with\nlength less than 100, really",
    "start": "2603650",
    "end": "2610240"
  },
  {
    "text": "the best we know of right\nnow-- let's say 128-- is to pick a good Reed-Muller\ncode or BCH code, find its",
    "start": "2610240",
    "end": "2617890"
  },
  {
    "text": "best trellis and do maximum\nlikelihood decoding. ",
    "start": "2617890",
    "end": "2626010"
  },
  {
    "text": "It used to be that you thought\nof 64 states as a lot of states, but clearly, technology\nhas progressed.",
    "start": "2626010",
    "end": "2634740"
  },
  {
    "text": "And now you wouldn't blink at\n1,000 states or maybe even 8,000 or 16,000 states.",
    "start": "2634740",
    "end": "2642065"
  },
  {
    "text": "The biggest Viterbi decoder that\nwas ever built had 2 to",
    "start": "2642065",
    "end": "2647204"
  },
  {
    "text": "the 14 states for a space\nprogram out of JPL. ",
    "start": "2647205",
    "end": "2654970"
  },
  {
    "text": "So anyway, it's doable now. ",
    "start": "2654970",
    "end": "2662859"
  },
  {
    "text": "If you needed the best possible\nperformance and you were constrained in block\nlength, you'd pick the best",
    "start": "2662860",
    "end": "2668900"
  },
  {
    "text": "block code at the rate that\nyou wanted, and the best minimum distance at that rate,\nand the best effective coding",
    "start": "2668900",
    "end": "2675980"
  },
  {
    "text": "gain, and you'd do maximum\nlikelihood decoding with trellis decoding. But if that's not usually\nthe situation --",
    "start": "2675980",
    "end": "2683020"
  },
  {
    "text": "the situation in data\ncommunications, because usually more you have a stream\nof data or a packet length of",
    "start": "2683020",
    "end": "2690230"
  },
  {
    "text": "at least 1,000, and then it\nwould certainly be better to use convolutional codes.",
    "start": "2690230",
    "end": "2695855"
  },
  {
    "text": " And trellis decoding is -- as long as we're in this\nclass of techniques.",
    "start": "2695855",
    "end": "2701860"
  },
  {
    "text": "Where we're finally going in\nthis course is to the new codes that have been developed\nin the past decade,",
    "start": "2701860",
    "end": "2708140"
  },
  {
    "text": "capacity-approaching codes,\nturbo codes, low-density parity-check codes.",
    "start": "2708140",
    "end": "2713340"
  },
  {
    "text": " These are simple enough to do\nso that as soon as you get",
    "start": "2713340",
    "end": "2719230"
  },
  {
    "text": "past the small codes, length\nless than 100, you would",
    "start": "2719230",
    "end": "2724250"
  },
  {
    "text": "switch over to that track. You would use a\ncapacity-approaching code. But we don't know\nabout them yet.",
    "start": "2724250",
    "end": "2733080"
  },
  {
    "text": "I guess that's the end of my\nlecture on this, so it's a very good place for questions\nabout state-of-the-art, where",
    "start": "2733080",
    "end": "2740130"
  },
  {
    "text": "we've been, where we're going. ",
    "start": "2740130",
    "end": "2745819"
  },
  {
    "text": "The floor is always open. But that was all I was going\nto say about Chapter 10.",
    "start": "2745820",
    "end": "2752110"
  },
  {
    "start": "2752110",
    "end": "2758340"
  },
  {
    "text": "Chapter 11, Codes on Graphs. And now we begin our final\nstretch drive towards",
    "start": "2758340",
    "end": "2769170"
  },
  {
    "text": "capacity-approaching codes,\nwhich is going to be the subject of the next\nthree chapters.",
    "start": "2769170",
    "end": "2775320"
  },
  {
    "text": "Chapter 11 is sort of the\nbeginnings of codes on graphs. We're going to look at some\nelementary representations.",
    "start": "2775320",
    "end": "2785940"
  },
  {
    "text": "One of the ones we're going\nto look at is a trellis representation. That's one of the reasons we've\nbeen going through this theory, is we're going to,\nagain, encounter trellises as",
    "start": "2785940",
    "end": "2799329"
  },
  {
    "text": "a natural, simple, cycle-free,\ngraphical representation that,",
    "start": "2799330",
    "end": "2806900"
  },
  {
    "text": "in some sense, is about as good\nas you can ever do, as long as you don't allow\ncycles in graphs. ",
    "start": "2806900",
    "end": "2815500"
  },
  {
    "text": "But then we're going to go on\nto graphs with cycles, which is really the way to\nunderstand these",
    "start": "2815500",
    "end": "2821320"
  },
  {
    "text": "capacity-approaching codes. So in this chapter, we'll\nstart the subject, we'll",
    "start": "2821320",
    "end": "2826370"
  },
  {
    "text": "introduce graphical\nrepresentations of codes in more general terms.",
    "start": "2826370",
    "end": "2832141"
  },
  {
    "text": "In Chapter 12, we'll talk about\nthe generic decoding algorithms for codes on graphs\ncalled sum-product and min-sum",
    "start": "2832141",
    "end": "2842510"
  },
  {
    "text": "decoding algorithms. And then in Chapter 13, we'll\ntalk about the actual classes",
    "start": "2842510",
    "end": "2851830"
  },
  {
    "text": "of capacity-approaching codes\nthat people have developed, what their graphs are, how\nyou decode them --",
    "start": "2851830",
    "end": "2858670"
  },
  {
    "text": "I hope in enough detail so that\nyou'll get a good sense for how all this works.",
    "start": "2858670",
    "end": "2866530"
  },
  {
    "text": "So that's where we're going. ",
    "start": "2866530",
    "end": "2876130"
  },
  {
    "text": "What are we talking about\nwhen we're talking about codes on graphs? ",
    "start": "2876130",
    "end": "2883460"
  },
  {
    "text": "There are many styles of\nrepresentations of codes, and",
    "start": "2883460",
    "end": "2888760"
  },
  {
    "text": "at this point, for linear codes,\nwe have seen a number",
    "start": "2888760",
    "end": "2894580"
  },
  {
    "text": "of ways we can characterize\na code. One of the ways is just by\ngiving a set of generators for",
    "start": "2894580",
    "end": "2901130"
  },
  {
    "text": "the code, k generators\nfor an n, k code. And that sort of characterizes\nthe code.",
    "start": "2901130",
    "end": "2906390"
  },
  {
    "text": "Another way is to basically give\nthe generator matrix for the dual code, the h matrix,\nwhich becomes the parity-check",
    "start": "2906390",
    "end": "2914880"
  },
  {
    "text": "matrix for the code. So we can also characterize\nthe code by a",
    "start": "2914880",
    "end": "2922180"
  },
  {
    "text": "dual-generator matrix. That's a particularly efficient\nway to do it if you have a high-rate code like a\nsingle parity-check code, it's",
    "start": "2922180",
    "end": "2930190"
  },
  {
    "text": "better to say that the dual code\nis the repetition code",
    "start": "2930190",
    "end": "2935450"
  },
  {
    "text": "and it's the set of all code\nwords that are orthogonal to the all-one code word.",
    "start": "2935450",
    "end": "2942599"
  },
  {
    "text": "That's the simplest\ncharacterization of the single parity-check code. In other words, that the sum\nof all bits is equal to 0.",
    "start": "2942600",
    "end": "2950962"
  },
  {
    "text": "That's what orthogonal to the\nall-one code word means. So that's a simpler\nrepresentation than giving a",
    "start": "2950962",
    "end": "2956920"
  },
  {
    "text": "generator matrix formed for the\nsingle parity-check code.",
    "start": "2956920",
    "end": "2962030"
  },
  {
    "text": "Or now we have this trellis\nrepresentation, which",
    "start": "2962030",
    "end": "2968190"
  },
  {
    "text": "certainly looks like a more\ngraphical representation. It certainly characterizes the\ncode in a very direct way.",
    "start": "2968190",
    "end": "2975150"
  },
  {
    "text": "What does a trellis do? It basically displays all the\ncode words on a graph.",
    "start": "2975150",
    "end": "2980260"
  },
  {
    "text": "There's a 1:1 correspondence\nbetween the set of all paths, from the root to the n-node\nin the graph and the code.",
    "start": "2980260",
    "end": "2988839"
  },
  {
    "text": "So that's another way to\ncharacterize the code.  So now we're going to go to\nhigher level graphical",
    "start": "2988840",
    "end": "2996960"
  },
  {
    "text": "representations.  As a first step, we talk about\nbehavioral realizations.",
    "start": "2996960",
    "end": "3009910"
  },
  {
    "text": "Again, a term from system\ntheory, closely identified",
    "start": "3009910",
    "end": "3015789"
  },
  {
    "text": "with Jan Willems, who promoted\nthis way of representing",
    "start": "3015790",
    "end": "3024310"
  },
  {
    "text": "linear systems. In linear system theory terms,\nthe basic idea in behavioral",
    "start": "3024310",
    "end": "3034980"
  },
  {
    "text": "systems theory is you describe a\nsystem by the set of all its",
    "start": "3034980",
    "end": "3040030"
  },
  {
    "text": "possible trajectories. What are all the things\nit can do?",
    "start": "3040030",
    "end": "3045230"
  },
  {
    "text": "And now, how do you characterize\nthe trajectories? Often, you characterize them by\na set of local constraints.",
    "start": "3045230",
    "end": "3054212"
  },
  {
    "text": "You can think of it as equations\nthat the system has to satisfy.",
    "start": "3054212",
    "end": "3061900"
  },
  {
    "text": "Ordinarily, they're differential\nequations or partial differential equations\nor something.",
    "start": "3061900",
    "end": "3066960"
  },
  {
    "text": "And if it satisfies all of those\nconstraints, then it's a",
    "start": "3066960",
    "end": "3072190"
  },
  {
    "text": "trajectory that satisfies all\nthese partial differential equations, is a valid\ntrajectory.",
    "start": "3072190",
    "end": "3078830"
  },
  {
    "text": " So you can set up the whole\nsystem that way.",
    "start": "3078830",
    "end": "3085530"
  },
  {
    "text": "So it characterizes a system\nby its trajectories.",
    "start": "3085530",
    "end": "3095525"
  },
  {
    "text": " That's the fundamental thing.",
    "start": "3095525",
    "end": "3101299"
  },
  {
    "text": "And it characterizes\ntrajectories -- legitimate, valid\ntrajectories -- ",
    "start": "3101300",
    "end": "3109610"
  },
  {
    "text": "by local constraints. ",
    "start": "3109610",
    "end": "3117920"
  },
  {
    "text": "Let me get a little\nbit more concrete. In coding terms, by\ntrajectories we",
    "start": "3117920",
    "end": "3127510"
  },
  {
    "text": "just mean code words. So this is a very compatible\nnotion with the way we've been",
    "start": "3127510",
    "end": "3133670"
  },
  {
    "text": "talking in coding. What is a code? It's simply a set\nof code words. So if we simply say, what are\nall the possible code words?",
    "start": "3133670",
    "end": "3141900"
  },
  {
    "text": "We have to find all the\ntrajectories of the code, and we have a very explicit example\nof that in trellises.",
    "start": "3141900",
    "end": "3147700"
  },
  {
    "text": "We've called the paths trajectories through a trellis.",
    "start": "3147700",
    "end": "3152750"
  },
  {
    "text": "What is a code? It's simply the set of\nall valid code words.",
    "start": "3152750",
    "end": "3158569"
  },
  {
    "text": "And how do we characterize\nthe valid code words?",
    "start": "3158570",
    "end": "3163640"
  },
  {
    "text": "Well, in each of\nthese styles -- the generator, parity-check,\ntrellis style --",
    "start": "3163640",
    "end": "3170849"
  },
  {
    "text": "the code words are the code\nwords that satisfy certain equations or constraints.",
    "start": "3170850",
    "end": "3176940"
  },
  {
    "text": "For instance, the generator\nrepresentation -- ",
    "start": "3176940",
    "end": "3184050"
  },
  {
    "text": "we've said a code is the set of\nall uG, such that u is in a",
    "start": "3184050",
    "end": "3192515"
  },
  {
    "text": "field to the k. That's a generator matrix style\nof representing a code.",
    "start": "3192515",
    "end": "3202930"
  },
  {
    "text": "In other words, we can say it's\nthe set of all y, such",
    "start": "3202930",
    "end": "3209579"
  },
  {
    "text": "that y equals uG for\nsome u in Fk.",
    "start": "3209580",
    "end": "3221210"
  },
  {
    "text": " Or we can say it's all y, such\nthat y minus uG equals 0 for",
    "start": "3221210",
    "end": "3235480"
  },
  {
    "text": "some u in Fk.",
    "start": "3235480",
    "end": "3241040"
  },
  {
    "text": "So it's the set of all y that,\ntogether with some auxiliary",
    "start": "3241040",
    "end": "3248480"
  },
  {
    "text": "variables which are not part\nof the code word -- here they're input variables,\nif you like, or information",
    "start": "3248480",
    "end": "3254450"
  },
  {
    "text": "bits, information symbols. We'll come to think of these\nas state variables because",
    "start": "3254450",
    "end": "3260090"
  },
  {
    "text": "they're hidden, they're not\nvisible, they're just an auxiliary part of\nthe description. ",
    "start": "3260090",
    "end": "3268050"
  },
  {
    "text": "They're code words that,\ntogether with some auxiliary variables that, in this case,\ncan be freely chosen, satisfy",
    "start": "3268050",
    "end": "3277710"
  },
  {
    "text": "a certain set of linear\nhomogeneous equations. ",
    "start": "3277710",
    "end": "3285810"
  },
  {
    "text": "Something that's even better in\nthe behavioral style is a parity-check representation.",
    "start": "3285810",
    "end": "3291822"
  },
  {
    "text": "Let me put that up.  In a parity-check\nrepresentation, we say the",
    "start": "3291822",
    "end": "3298820"
  },
  {
    "text": "code is the set of all y, such\nthat y H transpose equals 0,",
    "start": "3298820",
    "end": "3308980"
  },
  {
    "text": "where H is the generator matrix\nof the dual code. ",
    "start": "3308980",
    "end": "3315190"
  },
  {
    "text": "This is sometimes called a\nkernel representation. y is in the kernel of this\nlinear transformation.",
    "start": "3315190",
    "end": "3320694"
  },
  {
    "text": " We see H transpose is a linear\ntransformation from n-tuples",
    "start": "3320695",
    "end": "3328240"
  },
  {
    "text": "to n minus k-tuples, and the\nones whose image is 0 under",
    "start": "3328240",
    "end": "3333670"
  },
  {
    "text": "this transformation, the ones\nthat map to 0 are legitimate code words.",
    "start": "3333670",
    "end": "3339590"
  },
  {
    "text": "So this is a kernel\nrepresentation, this is an image representation.",
    "start": "3339590",
    "end": "3344810"
  },
  {
    "text": "Here, we view the code as\nthe image of the linear transformation, which is\ncharacterized by g, where the",
    "start": "3344810",
    "end": "3353160"
  },
  {
    "text": "inputs are free. But the parity-check\nrepresentation is much more",
    "start": "3353160",
    "end": "3358520"
  },
  {
    "text": "explicitly, we don't need any\nauxiliary variables here. It's simply the set of n-tuples\nthat satisfy a",
    "start": "3358520",
    "end": "3364579"
  },
  {
    "text": "certain set of linear\nhomogeneous equations. ",
    "start": "3364580",
    "end": "3370110"
  },
  {
    "text": "So this maybe is a place where\nwe start and, of course, it's the place where Bob Gallager\nstarted when he did",
    "start": "3370110",
    "end": "3376839"
  },
  {
    "text": "low-density parity-check codes,\nwhich are a principal class of capacity-approaching\ncodes.",
    "start": "3376840",
    "end": "3382800"
  },
  {
    "text": " Then in either case, we\ncharacterize the code by, in",
    "start": "3382800",
    "end": "3390020"
  },
  {
    "text": "one case, directly satisfying\nsome equations. In the other case, here we say\nthat the total behavior is the",
    "start": "3390020",
    "end": "3398339"
  },
  {
    "text": "set of all y and u, such that\ny minus uG equals 0.",
    "start": "3398340",
    "end": "3405550"
  },
  {
    "text": " So we're going to take the set\nof all n-tuples and k-tuples,",
    "start": "3405550",
    "end": "3414640"
  },
  {
    "text": "such that y minus uG equals 0. And we say that's the total\nbehavior of the code.",
    "start": "3414640",
    "end": "3422250"
  },
  {
    "text": "The set of all y's and u's that\nsatisfy this equation is",
    "start": "3422250",
    "end": "3427910"
  },
  {
    "text": "the total behavior. And then we'll say the code word\nis just the projection of the behavior on the y's.",
    "start": "3427910",
    "end": "3433450"
  },
  {
    "text": " In other words, it's the set of\nall y's, such that this is",
    "start": "3433450",
    "end": "3438869"
  },
  {
    "text": "satisfied first some u. And that's an equivalent\ndescription. ",
    "start": "3438870",
    "end": "3447420"
  },
  {
    "text": "So the general setup, going\nback and forth, is that we",
    "start": "3447420",
    "end": "3458799"
  },
  {
    "text": "have the observed symbols. ",
    "start": "3458800",
    "end": "3468520"
  },
  {
    "text": "And in the coding case, this\nwill always just be the n symbols in the code word.",
    "start": "3468520",
    "end": "3474420"
  },
  {
    "start": "3474420",
    "end": "3479720"
  },
  {
    "text": "These are the ones that\nwe really care about. But we're also going to have\nsome hidden or auxiliary",
    "start": "3479720",
    "end": "3487140"
  },
  {
    "text": "symbols or state variables,\nhidden variables, which, in",
    "start": "3487140",
    "end": "3496000"
  },
  {
    "text": "this case, for instance,\nare the u's. And we can introduce these at\nour convenience, just to make",
    "start": "3496000",
    "end": "3507160"
  },
  {
    "text": "a good realization.  So we have two types of symbols:\nthe observed, or",
    "start": "3507160",
    "end": "3516819"
  },
  {
    "text": "external variables-- sometimes these are\ncalled external variables, internal variables.",
    "start": "3516820",
    "end": "3522730"
  },
  {
    "text": "Again, in system theory, you're consistently seeing this. There are some that\nwe can actually",
    "start": "3522730",
    "end": "3528910"
  },
  {
    "text": "observe, interact with. These are the observed symbols,\nand then there are internal variables to the\nsystem, very often called",
    "start": "3528910",
    "end": "3536550"
  },
  {
    "text": "state variables, which we can't\ndirectly see but which",
    "start": "3536550",
    "end": "3541960"
  },
  {
    "text": "are part of the description of\nthe system, as in this case. The whole system, we find the\nset of all internal and",
    "start": "3541960",
    "end": "3551100"
  },
  {
    "text": "external variables that satisfy\na set of constraints. ",
    "start": "3551100",
    "end": "3559140"
  },
  {
    "text": "But we only care about the\npatterns of observed variables",
    "start": "3559140",
    "end": "3564934"
  },
  {
    "text": "that are consistent with some\nset of internal variables.",
    "start": "3564935",
    "end": "3571040"
  },
  {
    "text": "So the final element here\nin this general setup is constraints, which in this\ncase are simply linear",
    "start": "3571040",
    "end": "3584369"
  },
  {
    "text": "homogeneous equations on\nsubsets of variables.",
    "start": "3584370",
    "end": "3595420"
  },
  {
    "start": "3595420",
    "end": "3607250"
  },
  {
    "text": "So let me go through similar\nkinds of examples, as I do in the notes.",
    "start": "3607250",
    "end": "3616480"
  },
  {
    "text": "But let me maybe build up from\nthe simplest one first, parity-check representation of\nour favorite 8, 4, 4 code.",
    "start": "3616480",
    "end": "3627760"
  },
  {
    "text": "In this case, the parity-check\nmatrix is the same, we can",
    "start": "3627760",
    "end": "3632870"
  },
  {
    "text": "take it to be the same as\nthe generator matrix. Since, by now, we like\ntrellis-oriented generator",
    "start": "3632870",
    "end": "3640730"
  },
  {
    "text": "matrices, we'll take that one. ",
    "start": "3640730",
    "end": "3648900"
  },
  {
    "text": "So to get very explicit, so the\ncode is the set of all y,",
    "start": "3648900",
    "end": "3655730"
  },
  {
    "text": "such that y H transpose equals\n0, and y is 8-tuple.",
    "start": "3655730",
    "end": "3661750"
  },
  {
    "start": "3661750",
    "end": "3668510"
  },
  {
    "text": "So it's the set of all code\nwords that satisfy these parity-check constraints. ",
    "start": "3668510",
    "end": "3680015"
  },
  {
    "text": "The first one is y1 plus y2\nplus y3 plus y4 equals 0.",
    "start": "3680015",
    "end": "3686839"
  },
  {
    "text": "That's orthogonality to\nthis first code word. The second one is y2 plus y4\nplus y5 plus y7 equals 0.",
    "start": "3686840",
    "end": "3700760"
  },
  {
    "text": "The third equation is y3 plus\ny4 plus y5 plus y6 equals 0.",
    "start": "3700760",
    "end": "3708940"
  },
  {
    "text": "And the fourth is y5 plus y6\nplus y7 plus y8 equals 0.",
    "start": "3708940",
    "end": "3719310"
  },
  {
    "text": "If I have any 8-tuple y, such\nthat the elements of the 8-tuples satisfy these four\nequations, then it's a code",
    "start": "3719310",
    "end": "3726000"
  },
  {
    "text": "word, if and only if. A very explicit description\nof the code. ",
    "start": "3726000",
    "end": "3734550"
  },
  {
    "text": "Now let's go onto a graph of\nbehavioral realization.",
    "start": "3734550",
    "end": "3742895"
  },
  {
    "start": "3742895",
    "end": "3750760"
  },
  {
    "text": "So it's very natural to draw the\nfollowing kind of graph of",
    "start": "3750760",
    "end": "3757720"
  },
  {
    "text": "this realization. We let the y's -- ",
    "start": "3757720",
    "end": "3764119"
  },
  {
    "text": "y1, y2, y3, y4 -- sorry, I've changed the\nindex set, haven't I?",
    "start": "3764120",
    "end": "3771359"
  },
  {
    "text": "I get 1 through 8 now. I'm just going to make these\ninto vertices of my graph.",
    "start": "3771360",
    "end": "3780910"
  },
  {
    "text": " So here we have symbols, and I'm\ngoing to make a bipartite",
    "start": "3780910",
    "end": "3791480"
  },
  {
    "text": "graph, and over here I'm going\nto have equations, or constraints, or checks.",
    "start": "3791480",
    "end": "3801140"
  },
  {
    "text": "And I have four checks, which\nI'm going to draw like this.",
    "start": "3801140",
    "end": "3807339"
  },
  {
    "start": "3807340",
    "end": "3813490"
  },
  {
    "text": "The first check is that y1 plus\ny2 plus y3 plus y4 equals 0, so I'll just draw\nthat like this.",
    "start": "3813490",
    "end": "3820490"
  },
  {
    "text": " That means the same\nthing as this.",
    "start": "3820490",
    "end": "3825660"
  },
  {
    "text": " The second one is y2 plus y4\nplus y5 plus y7 equals 0.",
    "start": "3825660",
    "end": "3838520"
  },
  {
    "text": "And the third one\nis these four -- two, three, four.",
    "start": "3838520",
    "end": "3846420"
  },
  {
    "text": "And the last one\nis these four. This, this, this, this.",
    "start": "3846420",
    "end": "3853230"
  },
  {
    "text": "It's done more nicely\nin the notes. This is called a Tanner graph,\nafter an extremely good paper",
    "start": "3853230",
    "end": "3864130"
  },
  {
    "text": "by Michael Tanner in 1981, which\nwas about the only paper",
    "start": "3864130",
    "end": "3871410"
  },
  {
    "text": "of any consequence in this\nsubject between Gallager's thesis in 1961 and the\nrediscovery of low-density",
    "start": "3871410",
    "end": "3878120"
  },
  {
    "text": "parity-check codes\naround 1995.",
    "start": "3878120",
    "end": "3883370"
  },
  {
    "text": "That's a graphical picture\nof these equations. And what do we think of? You can think of testing\nan 8-tuple.",
    "start": "3883370",
    "end": "3891250"
  },
  {
    "text": "Take an arbitrary, binary\n8-tuple, think of these as",
    "start": "3891250",
    "end": "3896560"
  },
  {
    "text": "memory elements, put the bits\nof that 8-tuple in here, and then ask if all these checks\nare satisfied.",
    "start": "3896560",
    "end": "3904370"
  },
  {
    "text": "Since we're talking mod 2\narithmetic, we're basically asking if there are an even\nnumber of 1s attached to each",
    "start": "3904370",
    "end": "3911500"
  },
  {
    "text": "of these checks. If and only if that's true,\nwe've got a code 8-tuple.",
    "start": "3911500",
    "end": "3916940"
  },
  {
    "text": " From the set of all 256\n8-tuples, we find 16 that",
    "start": "3916940",
    "end": "3923750"
  },
  {
    "text": "actually satisfy these checks,\nand that's the code. That's one way of describing\nthe code.",
    "start": "3923750",
    "end": "3929400"
  },
  {
    "text": " So that's how the graph is\nassociated with local",
    "start": "3929400",
    "end": "3935150"
  },
  {
    "text": "constraints. Well call them local, each of\nthese constraints, because each of them only involves\nfour of the symbols.",
    "start": "3935150",
    "end": "3944240"
  },
  {
    "text": "In a much larger graph, a\nlow-density parity-check code, the idea is that there are not\nvery many symbols that are",
    "start": "3944240",
    "end": "3951586"
  },
  {
    "text": "checked by each check. The graph is sparse,\nin that sense.",
    "start": "3951586",
    "end": "3957430"
  },
  {
    "text": "But we're not quite there yet. ",
    "start": "3957430",
    "end": "3963640"
  },
  {
    "text": "So that's pretty simple. Let me do a generator\nrepresentation.",
    "start": "3963640",
    "end": "3971105"
  },
  {
    "text": "This is going to be a little bit\nmore complicated because",
    "start": "3971105",
    "end": "3976619"
  },
  {
    "text": "we have these auxiliary\ninput variables. ",
    "start": "3976620",
    "end": "3981830"
  },
  {
    "text": "But that doesn't really\ncomplicate it very much.",
    "start": "3981830",
    "end": "3986870"
  },
  {
    "text": "I keep using this 8, 4, 4 code\njust to emphasize that a single code can be described\nin many different ways.",
    "start": "3986870",
    "end": "3994599"
  },
  {
    "text": "We're going to wind up with\nhalf a dozen different graphical representations of\nthis code, and they can be",
    "start": "3994600",
    "end": "4002830"
  },
  {
    "text": "grouped according to style. ",
    "start": "4002830",
    "end": "4010625"
  },
  {
    "text": "So again, we could use our\nfavorite generator matrix for our favorite code.",
    "start": "4010625",
    "end": "4016336"
  },
  {
    "text": "It looks like that.  Now what do we mean?",
    "start": "4016336",
    "end": "4022010"
  },
  {
    "text": "What are our constraints now? Well, now we have some hidden\nvariables, ui, and we have y1",
    "start": "4022010",
    "end": "4032380"
  },
  {
    "text": "is equal to u1. We're going to basically\nmultiply this by u1.",
    "start": "4032380",
    "end": "4038820"
  },
  {
    "text": "I've got some u1, u2, u3,\nu4 multiplying this. So y1 is u1, y2 is u1 plus u2,\ny3 is equal to u1 plus u3, y4",
    "start": "4038820",
    "end": "4056600"
  },
  {
    "text": "is equal to u1 plus u2\nplus u3, so forth.",
    "start": "4056600",
    "end": "4062430"
  },
  {
    "text": "y5 is u2 plus u3 plus u4,\ny6 is u2 plus u4.",
    "start": "4062430",
    "end": "4071930"
  },
  {
    "text": " I jumped one here. This is u3 plus u4, y7 is u2\nplus u4, and y8 equals u8.",
    "start": "4071930",
    "end": "4083070"
  },
  {
    "text": " And you will agree that the code\nis described, if I can",
    "start": "4083070",
    "end": "4090350"
  },
  {
    "text": "find any pair, (y,u), such that\nthis is satisfied, then y",
    "start": "4090350",
    "end": "4097060"
  },
  {
    "text": "is an element of the code.  I can choose u freely,\nthat is the input.",
    "start": "4097060",
    "end": "4105160"
  },
  {
    "text": "If I find a y at any u, such\nthat these equations are satisfied, then I've\nfound a code word.",
    "start": "4105160",
    "end": "4113399"
  },
  {
    "text": "And that's an if and only if. So that's another\ncharacterization of the code. And its Tanner graph\nlooks like this.",
    "start": "4113399",
    "end": "4126380"
  },
  {
    "text": "Here in this case, we have\nhidden variables. So let's put the inputs--",
    "start": "4126380",
    "end": "4133060"
  },
  {
    "text": "or, we'll see they can also be\nthought of as states, but they're hidden variables\nthat we don't actually",
    "start": "4133060",
    "end": "4139210"
  },
  {
    "text": "see in the code word. u1, u2, u3, u4.",
    "start": "4139210",
    "end": "4145689"
  },
  {
    "text": "You can think of these as\nfree-driving variables.",
    "start": "4145689",
    "end": "4151310"
  },
  {
    "text": "And to get y1, here's\nwhat we do.",
    "start": "4151310",
    "end": "4156950"
  },
  {
    "text": "We're going to take y1 and we're\ngoing to create a mod 2 sum of some of these inputs.",
    "start": "4156950",
    "end": "4163243"
  },
  {
    "text": "In this case, it's just\nu1, so I can draw it as a straight through. But in general, I'm going to\nhave to make a combination to",
    "start": "4163243",
    "end": "4173649"
  },
  {
    "text": "get all of these. So I have eight symbols\nover here -- code symbols --",
    "start": "4173649",
    "end": "4180870"
  },
  {
    "text": "and again, some constraints\nthat have to be satisfied.",
    "start": "4180870",
    "end": "4186170"
  },
  {
    "text": "Equations, mod 2 sums, y8.",
    "start": "4186170",
    "end": "4200840"
  },
  {
    "text": "And I just, again,\ndraw a picture. y2 is u1 plus u2,\nso u1 plus u2.",
    "start": "4200840",
    "end": "4210380"
  },
  {
    "text": "these sum to give y2. And so, again, if I put down\nsome u's, put down some y's,",
    "start": "4210380",
    "end": "4217559"
  },
  {
    "text": "test whether all these sums are\ncorrect, then I will have",
    "start": "4217560",
    "end": "4223320"
  },
  {
    "text": "tested whether I found a valid\nbehavior or trajectory.",
    "start": "4223320",
    "end": "4229150"
  },
  {
    "text": "Next one is u1 plus u3. The next one is u1, u2, u3.",
    "start": "4229150",
    "end": "4238820"
  },
  {
    "text": "The next one is u2, u3, u4. The next one is u3, u4.",
    "start": "4238820",
    "end": "4247960"
  },
  {
    "text": "The next one is u2, u4. And the last one is\njust that one.",
    "start": "4247960",
    "end": "4253177"
  },
  {
    "text": " OK, so that's another graph\nwhose constraints",
    "start": "4253178",
    "end": "4261750"
  },
  {
    "text": "describe the code word.  Here it's helpful to start to\nintroduce the following",
    "start": "4261750",
    "end": "4268740"
  },
  {
    "text": "convention. We fill in the circle of the\nvariables that we actually want to see, and we leave\nthese open, the free",
    "start": "4268740",
    "end": "4276690"
  },
  {
    "text": "variables over here. ",
    "start": "4276690",
    "end": "4281969"
  },
  {
    "text": "Some people would call it a\ngeneralized Tanner graph. In the notes, I just call\nthis Tanner graph 2.",
    "start": "4281970",
    "end": "4289290"
  },
  {
    "text": "Tanner didn't actually consider\nstate variables. ",
    "start": "4289290",
    "end": "4296570"
  },
  {
    "text": "This was introduced into\ngraphical models by a guy named Wiberg in his PhD thesis\nin Sweden in about 1995.",
    "start": "4296570",
    "end": "4305989"
  },
  {
    "text": "And that was a huge\ncontribution, to have hidden variables as well as observed\nvariables, because otherwise",
    "start": "4305990",
    "end": "4311360"
  },
  {
    "text": "you couldn't really draw a\ngenerator representation as a graph, or a trellis\nrepresentation.",
    "start": "4311360",
    "end": "4317640"
  },
  {
    "text": "You need hidden state\nvariables.  So those are two graphical\nstyles, and the idea here is",
    "start": "4317640",
    "end": "4327810"
  },
  {
    "text": "that every set of 12 variables,\nsuch that these",
    "start": "4327810",
    "end": "4333860"
  },
  {
    "text": "eight equations are satisfied,\ngives you a legitimate code word. ",
    "start": "4333860",
    "end": "4341040"
  },
  {
    "text": "Here you can easily think\nof this as -- you notice that we've described\nthese as passive",
    "start": "4341040",
    "end": "4348650"
  },
  {
    "text": "constraints.  It's not an input-output,\nblock diagram type of",
    "start": "4348650",
    "end": "4355020"
  },
  {
    "text": "representation. It causes cause-effects.",
    "start": "4355020",
    "end": "4360490"
  },
  {
    "text": "In this case, it\nimplicitly is. How would you actually implement\nthis generator",
    "start": "4360490",
    "end": "4366940"
  },
  {
    "text": "representation? You implement it by picking\nfour input bits and then",
    "start": "4366940",
    "end": "4372980"
  },
  {
    "text": "seeing what code words\nthey generate. In other words, there's a very\ndefinite input-output relation",
    "start": "4372980",
    "end": "4378910"
  },
  {
    "text": "here, where we could make this\ninto a directed graph by drawing arrows here.",
    "start": "4378910",
    "end": "4385900"
  },
  {
    "text": "In general, in our graphical\nmodels, we're not going to do this. The behavioral style is very\nmuch not in this spirit.",
    "start": "4385900",
    "end": "4395490"
  },
  {
    "text": "But in this case,\nwe clearly can. So if you actually wanted to\ngenerate all the code words --",
    "start": "4395490",
    "end": "4402690"
  },
  {
    "text": "that's why it's called a\ngenerator representation -- you simply jump through all 16\npossibilities here and you",
    "start": "4402690",
    "end": "4410430"
  },
  {
    "text": "generate all 16 code words. Or if you wanted to do a\nsimulation, generate code",
    "start": "4410430",
    "end": "4417429"
  },
  {
    "text": "words, this is the way\nyou would do it. This has easy cause\nand effect style.",
    "start": "4417430",
    "end": "4424530"
  },
  {
    "text": "The kernel representation\nis much more implicit. What is the cause and\nthe effect here?",
    "start": "4424530",
    "end": "4432929"
  },
  {
    "text": "In this case, it's actually\npossible to find a cause and effect representation.",
    "start": "4432930",
    "end": "4441380"
  },
  {
    "text": "It turns out that these four\nbits can be taken as",
    "start": "4441380",
    "end": "4447190"
  },
  {
    "text": "information bits, or these\nfour places form an information set.",
    "start": "4447190",
    "end": "4453960"
  },
  {
    "text": "So suppose we choose these four\nbits, and it turns out",
    "start": "4453960",
    "end": "4459620"
  },
  {
    "text": "that for this graph, we can\ntrace through as follows.",
    "start": "4459620",
    "end": "4465570"
  },
  {
    "text": "These three bits going\ninto this zero-sum, these all go in.",
    "start": "4465570",
    "end": "4472600"
  },
  {
    "text": "That determines this\noutput, right? ",
    "start": "4472600",
    "end": "4478710"
  },
  {
    "text": "d minus 1, if d is the degree\nof the zero-sum node, any d minus 1 inputs determine the\nlast output, because the",
    "start": "4478710",
    "end": "4488750"
  },
  {
    "text": "parity-check has to check. So that determines this one,\nwhich then determines y4.",
    "start": "4488750",
    "end": "4494270"
  },
  {
    "text": " Now, knowing that, we know all\nbut one input here, because I",
    "start": "4494270",
    "end": "4504594"
  },
  {
    "text": "also have this one. And that determines this, and\nI think it probably also",
    "start": "4504594",
    "end": "4511180"
  },
  {
    "text": "determines this. I now have three of the\nfour inputs here,",
    "start": "4511180",
    "end": "4518170"
  },
  {
    "text": "so I can get this. And anyway, by tracing through\nit I can create a directed",
    "start": "4518170",
    "end": "4526970"
  },
  {
    "text": "graph that gives me\na cause and effect relationship from here. But it's much more implicit and\nit can't always be done.",
    "start": "4526970",
    "end": "4536110"
  },
  {
    "text": "Sometimes you can find an\ninformation set that works with these particular set of\nequations and sometimes you",
    "start": "4536110",
    "end": "4542950"
  },
  {
    "text": "can't, sometimes\nyou get stuck. We can come back to this when\nwe talk about binary erasure",
    "start": "4542950",
    "end": "4549050"
  },
  {
    "text": "channel and stopping sets.  In this case, given these four,\nyou can determine the",
    "start": "4549050",
    "end": "4556180"
  },
  {
    "text": "remaining four. If you think of it in equation\nterms, if you're given y1, y2,",
    "start": "4556180",
    "end": "4565420"
  },
  {
    "text": "y3, you can basically go through\na Gaussian elimination of these equations and find\ny4, y6, y7 and y8.",
    "start": "4565420",
    "end": "4574324"
  },
  {
    "text": " So you can regard y1, y2,\ny3, and y5 as inputs.",
    "start": "4574325",
    "end": "4581220"
  },
  {
    "text": " This is much more the behavioral\nstyle, where it's",
    "start": "4581220",
    "end": "4587270"
  },
  {
    "text": "just simply any n-tuple that\nsatisfies the constraints is a",
    "start": "4587270",
    "end": "4592800"
  },
  {
    "text": "legitimate n-tuple. This is more cause and effect\nstyle over here.",
    "start": "4592800",
    "end": "4598099"
  },
  {
    "text": " Since we're at the end, let me\njust introduce one more thing.",
    "start": "4598100",
    "end": "4606610"
  },
  {
    "text": " This is a bipartite graph.",
    "start": "4606610",
    "end": "4613170"
  },
  {
    "text": "We basically have a graph with\ntwo types of nodes, one representing variables, one\nrepresenting constraints.",
    "start": "4613170",
    "end": "4621640"
  },
  {
    "text": "And the edges always go between\na variable and a",
    "start": "4621640",
    "end": "4626980"
  },
  {
    "text": "constraint. So that's what we mean\nby a bipartite graph.",
    "start": "4626980",
    "end": "4632010"
  },
  {
    "text": "There are two types of vertices,\nand all the edges connect one type of vertex to\nanother type of vertex.",
    "start": "4632010",
    "end": "4640239"
  },
  {
    "text": "So is this over here. I've drawn it in a way where\nit's not so obvious.",
    "start": "4640240",
    "end": "4646932"
  },
  {
    "text": "In a generalized Tanner graph,\nyou'd put all the variables over on one side and the\nconstraints over on the other side.",
    "start": "4646932",
    "end": "4652600"
  },
  {
    "text": "In this case, these observed\nvariables go naturally with",
    "start": "4652600",
    "end": "4658800"
  },
  {
    "text": "the constraints, so I\nput them over here. But I could have put them over\nhere and you would see this is also a bipartite graph.",
    "start": "4658800",
    "end": "4665600"
  },
  {
    "text": " So this is the general\ncharacter.",
    "start": "4665600",
    "end": "4672870"
  },
  {
    "text": "What do we think of the edges\nas doing in this graph? We think of the edges as\nconducting the variables that",
    "start": "4672870",
    "end": "4680265"
  },
  {
    "text": "they're associated with. So all of these edges, in\nfact, convey u1 to this",
    "start": "4680265",
    "end": "4689050"
  },
  {
    "text": "constraint. We could, if we wanted to, label\nall of the edges with their associated variables.",
    "start": "4689050",
    "end": "4695889"
  },
  {
    "text": "That's what they mean. They mean here that u1\nequals y1, or that u1",
    "start": "4695890",
    "end": "4704270"
  },
  {
    "text": "plus u2 equals y2. So the edges just serve for\ncommunication in this graph.",
    "start": "4704270",
    "end": "4713580"
  },
  {
    "text": "There's another style of graph,\nwhich I introduced, and therefore, people --",
    "start": "4713580",
    "end": "4720450"
  },
  {
    "text": "not me -- but other people have\ncalled it a Forney graph. I call it a normal graph. ",
    "start": "4720450",
    "end": "4728940"
  },
  {
    "text": "The difference is that basically\nthe vertices all",
    "start": "4728940",
    "end": "4736520"
  },
  {
    "text": "equal constraints, and the edges\nrepresent variables.",
    "start": "4736520",
    "end": "4745365"
  },
  {
    "text": " And it has certain advantages\nthat have led to it being used",
    "start": "4745365",
    "end": "4754050"
  },
  {
    "text": "more and more. Let me just indicate how we go\nfrom a graph of this style to",
    "start": "4754050",
    "end": "4760770"
  },
  {
    "text": "a graph of this style. We basically just make all the\nvariables into equality",
    "start": "4760770",
    "end": "4766550"
  },
  {
    "text": "constraints. So in this case, I draw\ny1, y2, and so forth.",
    "start": "4766550",
    "end": "4780210"
  },
  {
    "text": "I put a little dongle on them\nto indicate that they communicate with the\noutside world.",
    "start": "4780210",
    "end": "4786450"
  },
  {
    "text": "They are observed, external\nvariables. ",
    "start": "4786450",
    "end": "4792110"
  },
  {
    "text": "And then I put a little equality\nconstraint that says all of the variables attached to\nthis constraint have to be",
    "start": "4792110",
    "end": "4800099"
  },
  {
    "text": "the same, which is really\ndoing the same thing. Otherwise, the topology of\nthe graph looks the same.",
    "start": "4800100",
    "end": "4807630"
  },
  {
    "text": "These are, again, zero-sum\nconstraints, or parity-check constraints, and the\nconnections are",
    "start": "4807630",
    "end": "4815400"
  },
  {
    "text": "done just as before. ",
    "start": "4815400",
    "end": "4833475"
  },
  {
    "text": "I forget. I'm not going to do\nthem all out. The only change, in this case,\nis to replace external",
    "start": "4833475",
    "end": "4842100"
  },
  {
    "text": "variables by an equality\nconstraint in this. So the equality constraint\nbasically says this edge still",
    "start": "4842100",
    "end": "4847930"
  },
  {
    "text": "equals y1, this edge\nstill equals y2. That's what the equality\nconstraint means.",
    "start": "4847930",
    "end": "4854930"
  },
  {
    "text": "Everything tied to\nthat equality constraint has to be equal. So we can think of these as just\nreplicas of this original",
    "start": "4854930",
    "end": "4863260"
  },
  {
    "text": "variable out here. So far, you don't see any\nreason to prefer this.",
    "start": "4863260",
    "end": "4870960"
  },
  {
    "text": "If I do it in this graph, then,\nagain, I get equality",
    "start": "4870960",
    "end": "4878100"
  },
  {
    "text": "constraints here. I get zero-sum constraints,\nagain, over here.",
    "start": "4878100",
    "end": "4886958"
  },
  {
    "text": "Eight of them.  And in this case, I can just\nrepresent the external",
    "start": "4886958",
    "end": "4894070"
  },
  {
    "text": "variables directly by these\nlittle dongles. And again, I have the\nsame graph here.",
    "start": "4894070",
    "end": "4900487"
  },
  {
    "text": " You still probably don't see\nthat there's very much",
    "start": "4900487",
    "end": "4905950"
  },
  {
    "text": "difference and, in\nfact, I'd agree. There's hardly any difference\nbetween these two styles.",
    "start": "4905950",
    "end": "4912620"
  },
  {
    "text": "So forth. ",
    "start": "4912620",
    "end": "4920230"
  },
  {
    "text": "This is the normal graph that's\nequivalent to this Tanner graph, it's obtained\nin the same way.",
    "start": "4920230",
    "end": "4926139"
  },
  {
    "text": "If I wanted to do it more\npainstakingly, I would put equality constraints for each\nof these, I'd put little",
    "start": "4926140",
    "end": "4932030"
  },
  {
    "text": "external variables, and then\nI'd see I don't really need the equality constraints. So I can just compress it\ninto y1 through y8.",
    "start": "4932030",
    "end": "4940809"
  },
  {
    "text": " The advantages, I will say, of\nthe normal graph will appear",
    "start": "4940810",
    "end": "4949679"
  },
  {
    "text": "as we go along. The main advantage is that you\ncan prove a very nice duality",
    "start": "4949680",
    "end": "4956280"
  },
  {
    "text": "theorem for normal graphs -- that basically shows the duality\nbetween generator and",
    "start": "4956280",
    "end": "4964830"
  },
  {
    "text": "parity-check constraints. But to say anything about that\nright now would just hand-waving, so we'll come\nback to this next week.",
    "start": "4964830",
    "end": "4974200"
  },
  {
    "text": "See you in a week, have\na nice weekend. ",
    "start": "4974200",
    "end": "4986281"
  }
]