[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "7450"
  },
  {
    "text": "offer high quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "7450",
    "end": "14000"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at ocw.mit.edu.",
    "start": "14000",
    "end": "19180"
  },
  {
    "text": " PROFESSOR: So hopefully by the\nend of the class, we will show",
    "start": "19180",
    "end": "28020"
  },
  {
    "text": "you a histogram for the quiz. We are very happy. You guys did really well, so\nwe feel like, actually, you",
    "start": "28020",
    "end": "36450"
  },
  {
    "text": "learned something in the quiz,\nso it makes us happy. ",
    "start": "36450",
    "end": "41820"
  },
  {
    "text": "We're hoping to have\nthe histogram ready by now, but we don't. By end of the class, hopefully\nwe take a break in a middle,",
    "start": "41820",
    "end": "47350"
  },
  {
    "text": "and go through rest of that. So we are going a little bit off\nfrom regular programming. If you look at the class\nschedule, we are going to have",
    "start": "47350",
    "end": "53920"
  },
  {
    "text": "a guest lecture today, but I am\nthe guest lecture, I guess. So I'm going to talk about what\ncompilers can and cannot",
    "start": "53920",
    "end": "63630"
  },
  {
    "text": "do because, as you went on last\ncouple of projects, you tried hard to do weird things\nout of the compiler, create",
    "start": "63630",
    "end": "70920"
  },
  {
    "text": "different piece of code,\n[UNINTELLIGIBLE] programs. And so I'm going to kind of,\nfirst, walk through some stuff",
    "start": "70920",
    "end": "79430"
  },
  {
    "text": "that is very practical,\nwhat the current GCC do or don't do.",
    "start": "79430",
    "end": "84980"
  },
  {
    "text": "OK, so we'll go through some\nstuff, which is interesting, and then I'm going to-- let's get the outline first.",
    "start": "84980",
    "end": "91480"
  },
  {
    "text": "OK, this doesn't work. ",
    "start": "91480",
    "end": "100020"
  },
  {
    "text": "OK. Then we will talk a little more\nabout where the normal",
    "start": "100020",
    "end": "106710"
  },
  {
    "text": "optimizations happen, what are\nall the possibilities, just very quickly, to give\nyou a feel.",
    "start": "106710",
    "end": "111830"
  },
  {
    "text": "It's not all static\ntype compilation. And then go through\ntwo things. One is data-flow analysis\nand optimization.",
    "start": "111830",
    "end": "118090"
  },
  {
    "text": "That's a big part what\ncompilers does. And then also instructions\nscheduling. Instruction scheduling might\nnot be that important on a",
    "start": "118090",
    "end": "124840"
  },
  {
    "text": "superscalar. but it's always good to know\nwhat it does because there are some cases where you had to\ndo it in the compiler the",
    "start": "124840",
    "end": "130699"
  },
  {
    "text": "hardware cannot do, so we'll\nlook at some of those cases.",
    "start": "130699",
    "end": "135880"
  },
  {
    "text": "So the first thing that we found\na lot of you guys did is",
    "start": "135880",
    "end": "143270"
  },
  {
    "text": "you try to inline a lot of code\nin your projects, and in",
    "start": "143270",
    "end": "149700"
  },
  {
    "text": "fact, one way to do that\nis have you do a macro. A macro basically make sure that\ndefinitely get in line,",
    "start": "149700",
    "end": "156500"
  },
  {
    "text": "but macros are ugly. There are many things you can't\nreally do with a macro. The other thing is, we can\nactually do simple max",
    "start": "156500",
    "end": "165459"
  },
  {
    "text": "calculation using function. OK, starting function defined. And the first one is\ncalling this one.",
    "start": "165460",
    "end": "172690"
  },
  {
    "text": "Second one is calling\nthis one. So what do you think this\nis going to do?",
    "start": "172690",
    "end": "178790"
  },
  {
    "text": "How many people think that the\ncode produced between this and this going to be drastically\ndifferent?",
    "start": "178790",
    "end": "184045"
  },
  {
    "text": " Code produced for this function\nversus this function",
    "start": "184045",
    "end": "190040"
  },
  {
    "text": "going to be drastically\ndifferent? ",
    "start": "190040",
    "end": "195239"
  },
  {
    "text": "Real different. For some people,\n[UNINTELLIGIBLE] going to be different. OK, why do you think\nit's different?",
    "start": "195240",
    "end": "204000"
  },
  {
    "text": "GUEST SPEAKER: So the second\nfunction calls the first function, and the first\n[INAUDIBLE] calls the second one. PROFESSOR: Yes.",
    "start": "204000",
    "end": "209660"
  },
  {
    "start": "209660",
    "end": "216950"
  },
  {
    "text": "AUDIENCE: So since you have the\nfirst one calling max1, which is a macro, the compiler\njust copied [UNINTELLIGIBLE]",
    "start": "216950",
    "end": "224790"
  },
  {
    "text": "out of there. Whereas the second one-- ",
    "start": "224790",
    "end": "232629"
  },
  {
    "text": "it will try to actually\noptimize the-- Won't it try to optimize what\nis inside un64 [INAUDIBLE]?",
    "start": "232630",
    "end": "240540"
  },
  {
    "text": "PROFESSOR: So what he thinks\nis that is just going to get copied. This will be still a function\ncall, try and do some optimizing.",
    "start": "240540",
    "end": "246190"
  },
  {
    "text": "In fact, what it will do is, the\nfirst function is going to get inline.",
    "start": "246190",
    "end": "251970"
  },
  {
    "text": "Something interesting here, what\nyou see is even though there's a condition here,\nthere's no branch.",
    "start": "251970",
    "end": "257109"
  },
  {
    "text": "They have the same old\ninstruction that basically can be used to do a conditional\n[UNINTELLIGIBLE].",
    "start": "257110",
    "end": "262610"
  },
  {
    "text": "So instead of having a branch\nand having a pipeline [UNINTELLIGIBLE], this managed\nto convert this into nice,",
    "start": "262610",
    "end": "268180"
  },
  {
    "text": "direct call. The interesting thing is the\nsecond one is also identical, so what it did was it said, hi,\nI know this function, I",
    "start": "268180",
    "end": "274870"
  },
  {
    "text": "can inline. It got inline automatically. You didn't tell you to do, the\ncompiler actually inlined it for you, and then did all the\nthings that are necessary.",
    "start": "274870",
    "end": "283030"
  },
  {
    "text": "So what that means is you don't\nhave to write some of these ugly macros\nand hand inline.",
    "start": "283030",
    "end": "288430"
  },
  {
    "text": "You can have nice functions in\nthere, especially if it's in the same file, it\ncan get inline.",
    "start": "288430",
    "end": "293560"
  },
  {
    "text": "Of course, if you define it to\ndifferent file, and this file doesn't have access\nto it, it won't.",
    "start": "293560",
    "end": "298670"
  },
  {
    "text": "But if it is the same file,\nit'll get inline, so you get the same result.",
    "start": "298670",
    "end": "303790"
  },
  {
    "text": "So you can still have this\nnice [UNINTELLIGIBLE]. You don't have to be with\noptimizations at that level.",
    "start": "303790",
    "end": "310950"
  },
  {
    "text": "So another thing is we\nhave this entire-- Question? AUDIENCE: On the previous slide,\nother than looking at the assembly code, how\ndo we know when the",
    "start": "310950",
    "end": "318034"
  },
  {
    "text": "compiler based this on? PROFESSOR: You've got\nthe assembly code. ",
    "start": "318034",
    "end": "324974"
  },
  {
    "text": "Question? AUDIENCE: Why do you prefer\nstatic converge versus inline? PROFESSOR: So the reason I did\nstatic is basically, I want to",
    "start": "324974",
    "end": "333070"
  },
  {
    "text": "make sure it's not visible\noutside the file, so if you don't make it static, what'll\nhappen is everybody else had",
    "start": "333070",
    "end": "339230"
  },
  {
    "text": "the visibility and then you kind\nof pollute the space with a lot of names. So if you give static,\nit's only within you.",
    "start": "339230",
    "end": "345199"
  },
  {
    "text": "If I had inline I can't ask it\nto forcefully do that, but what I'm showing is you don't\neven have to say inline.",
    "start": "345200",
    "end": "350275"
  },
  {
    "text": "It'll inline by itself. Question? AUDIENCE: [INAUDIBLE] ",
    "start": "350275",
    "end": "355535"
  },
  {
    "text": "this function to be inline\nwithout actually [INAUDIBLE]? ",
    "start": "355536",
    "end": "361250"
  },
  {
    "text": "PROFESSOR: Actually, gprof,\nwhat'll happen is the file will vanish from gprof,\nisn't it? ",
    "start": "361250",
    "end": "368320"
  },
  {
    "text": "The function will vanish because\ngprof will basically, if you have a function,\nyou go look, you don't see the function. And it might give, even, a bad\nimpression that OK, that",
    "start": "368320",
    "end": "374949"
  },
  {
    "text": "function is not important, so\nthat you had to be careful in that because when you\nlook at gprof, you",
    "start": "374950",
    "end": "380164"
  },
  {
    "text": "will see some files. The inline find some functions,\ninline function won't be there.",
    "start": "380165",
    "end": "386490"
  },
  {
    "text": "Am I right, or is it\ndoing anything interesting to the samples? No. [UNINTELLIGIBLE]",
    "start": "386490",
    "end": "391690"
  },
  {
    "text": "vanish and oh, yeah, that\nfunction is not important, but in fact, it might be really\nimportant, but it got inlined.",
    "start": "391690",
    "end": "396990"
  },
  {
    "text": "So that's one way to, a little\nbit, worry about. Does it make sense?",
    "start": "396990",
    "end": "402840"
  },
  {
    "text": "OK. So we learned bithacks. So it was really fun. We are learning all these\ninteresting bithacks, but the",
    "start": "402840",
    "end": "410639"
  },
  {
    "text": "interesting thing is, in fact,\nGCC compiler also knows a lot of bithacks, so it's also\na pretty smart compiler.",
    "start": "410640",
    "end": "416470"
  },
  {
    "text": "So if you have something like\nthis, what do you think the smd would be? AUDIENCE: [INAUDIBLE].",
    "start": "416470",
    "end": "422195"
  },
  {
    "text": "PROFESSOR: Yeah, it actually\ndid this one. This is very interesting because\nwhat it did was it",
    "start": "422196",
    "end": "427700"
  },
  {
    "text": "didn't do shift. It did this load effective\naddress quad instruction, leaq",
    "start": "427700",
    "end": "434460"
  },
  {
    "text": "instruction. What it does is multiply these\ntwo, and it's add. It does nothing in here to add,\nand then it can add a",
    "start": "434460",
    "end": "441569"
  },
  {
    "text": "constanant. So this very complex address\nmode that is being used for",
    "start": "441570",
    "end": "446830"
  },
  {
    "text": "completely different purpose. So this [UNINTELLIGIBLE] address. It's doing this multiplied by\nthis, there's nothing to add,",
    "start": "446830",
    "end": "453440"
  },
  {
    "text": "there's no offset to\nadd, save it here. ",
    "start": "453440",
    "end": "459190"
  },
  {
    "text": "So it's actually doing\nthis multiply-by. The nice thing is it doesn't\naffect any things like",
    "start": "459190",
    "end": "465020"
  },
  {
    "text": "condition codes and stuff\nlike that, so this is a fast thing to do. OK?",
    "start": "465020",
    "end": "470500"
  },
  {
    "text": "Actually, that's interesting. How would [UNINTELLIGIBLE] 43? That makes it a little\nbit more complicated.",
    "start": "470500",
    "end": "475810"
  },
  {
    "text": "What do you think? How to multiply something\nby 43? ",
    "start": "475810",
    "end": "483379"
  },
  {
    "text": "Anybody want to take a guess\n[UNINTELLIGIBLE] multiply 43 [UNINTELLIGIBLE] mul43? AUDIENCE: [INAUDIBLE]",
    "start": "483379",
    "end": "488820"
  },
  {
    "text": "multiple by 32, have that\nmultiplied by-- PROFESSOR: So it did something\ninteresting.",
    "start": "488820",
    "end": "495820"
  },
  {
    "text": "So here's what it did. I want you guys to stare at it\na little bit and see if you can even figure out what's going\non here because this is",
    "start": "495820",
    "end": "502740"
  },
  {
    "text": "kind of funky. ",
    "start": "502740",
    "end": "511120"
  },
  {
    "text": "So what happens after\nthe first leaq? What's an rax?",
    "start": "511120",
    "end": "516340"
  },
  {
    "start": "516340",
    "end": "523789"
  },
  {
    "text": "What's an rax after first\nleaq instruction? Anyone take a wild guess?",
    "start": "523789",
    "end": "529140"
  },
  {
    "text": " AUDIENCE: Five?",
    "start": "529140",
    "end": "534230"
  },
  {
    "text": "PROFESSOR: Five. Yes, exactly. What it does is it's\n4a+a because this is a+a, 5a in here.",
    "start": "534230",
    "end": "541490"
  },
  {
    "text": "And then after here,\nwhat happened? ",
    "start": "541490",
    "end": "553320"
  },
  {
    "text": "4 times this one\nplus this one. ",
    "start": "553320",
    "end": "561089"
  },
  {
    "text": "Yeah, it's 21 because 4 times\nthis is 20, and you add the whole original rax\n21 here, 21.",
    "start": "561090",
    "end": "568560"
  },
  {
    "text": "And then you do this time\nagain 42, and add another one, 43.",
    "start": "568560",
    "end": "574279"
  },
  {
    "text": "So it did all this\ninteresting three instructions to get to 43.",
    "start": "574280",
    "end": "579900"
  },
  {
    "text": "And so this is fun. You can spend days giving\ndifferent meaning to this and see what the compiler\ngenerates.",
    "start": "579900",
    "end": "586100"
  },
  {
    "text": "And I notice at some point\nsay, when do it give up? And it doesn't give\nup for a while.",
    "start": "586100",
    "end": "591529"
  },
  {
    "text": "It start creating some\ncrazy things. OK, try one more thing. OK, this has to be hard.",
    "start": "591530",
    "end": "597500"
  },
  {
    "text": "255. How did it get 254? There's no easy way\nto do that.",
    "start": "597500",
    "end": "602589"
  },
  {
    "text": "How did that to that? This is the very interesting\nthing in here, so I will show you this one. So here is that instructions\nyou generated.",
    "start": "602590",
    "end": "608329"
  },
  {
    "start": "608330",
    "end": "614670"
  },
  {
    "text": "So what it did was, it's doing\nhere, getting it 2a, by doing",
    "start": "614670",
    "end": "620420"
  },
  {
    "text": "leaq because since it didn't\ngive a multiply, it just multiplied by 1, so it's\njust adding these two.",
    "start": "620420",
    "end": "626070"
  },
  {
    "text": "You get 2a. And then it multiplied by 128 by\ndoing a bitshift here, and",
    "start": "626070",
    "end": "635900"
  },
  {
    "text": "then it got such a\nwonderful thing. Why did it do this instead of\ndoing one instruction to 256? ",
    "start": "635900",
    "end": "643528"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Yeah, then it went\nand subtracted a 2a again, and got 254.",
    "start": "643528",
    "end": "650560"
  },
  {
    "text": "So it went overshoot, subtract,\nand subject one more, so [UNINTELLIGIBLE] got calculated here. It does a really smart way, I\ndon't know what complex logic",
    "start": "650560",
    "end": "658280"
  },
  {
    "text": "is there, to basically figure\nout these combinations of instructions that can\ndo multiplication.",
    "start": "658280",
    "end": "664620"
  },
  {
    "text": "We planned on a bunch of things\nuntil we run into a couple of thousand. It was doing these\nweird patterns after a couple of thousand.",
    "start": "664620",
    "end": "671050"
  },
  {
    "text": "Especially if it is to close\nto 2 to the power, it easily find it.",
    "start": "671050",
    "end": "676790"
  },
  {
    "text": "Even primes, it managed\nto find. Actually, before we gave a\nprime, and it found it because it found the closest thing,\nand a couple of things",
    "start": "676790",
    "end": "683440"
  },
  {
    "text": "[UNINTELLIGIBLE], and you\ncan get to the prime. So it's kind of interesting\nhow find goes in just",
    "start": "683440",
    "end": "691400"
  },
  {
    "text": "[UNINTELLIGIBLE] multiplies.  AUDIENCE: [INAUDIBLE]? ",
    "start": "691400",
    "end": "698780"
  },
  {
    "text": "PROFESSOR: So this is a very\ninteresting question. So what it's doing is, it has\nrealized somehow that doing a",
    "start": "698780",
    "end": "704300"
  },
  {
    "text": "direct multiply by 254 is going\nto be slower, so the",
    "start": "704300",
    "end": "710180"
  },
  {
    "text": "multiply instruction-- if you go, I think you can\nalso look at multiply instruction, how many cycles\nit's going to take to come--",
    "start": "710180",
    "end": "717010"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]?  PROFESSOR: Oh, because it needs\nto get this 2a again.",
    "start": "717010",
    "end": "724470"
  },
  {
    "text": "So it's [UNINTELLIGIBLE],\nuse the two 2a. So by calculating that,\nit kept it.",
    "start": "724470",
    "end": "731339"
  },
  {
    "text": "I don't know, you might be\nright, because if it [UNINTELLIGIBLE] 2a to 6n2, then there's no\ndependency, and right now, there's a dependent\nchange here.",
    "start": "731340",
    "end": "737365"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]? ",
    "start": "737365",
    "end": "742680"
  },
  {
    "text": "PROFESSOR: Twice, yes,\nsomething like that. Or calculate this separately. 2*8 and 256, and then add\nand subtract them.",
    "start": "742680",
    "end": "749160"
  },
  {
    "text": "Might be interesting. So there are other ways of\ndoing that, so in fact-- I don't know why, it might be\nin because [UNINTELLIGIBLE].",
    "start": "749160",
    "end": "755610"
  },
  {
    "text": "I don't know why they\ndidn't do that. But it's thinking. It's thinking, look at all\ninstructions, sequence, how",
    "start": "755610",
    "end": "763380"
  },
  {
    "text": "long it would take, and it find this interesting sequence. So sometimes when you are\nlooking into optimized code,",
    "start": "763380",
    "end": "769410"
  },
  {
    "text": "they will look like something\ncrazy that you can't read because it does things\nlike this. So you found a simple multiply\n[UNINTELLIGIBLE], and end up",
    "start": "769410",
    "end": "776589"
  },
  {
    "text": "with a piece of code\nlike this. And so you need to kind of\ndecipher, seeing what's going on backward.",
    "start": "776590",
    "end": "782010"
  },
  {
    "text": "So that's why reading assembly\nis sometimes hard, especially optimized assembly. OK, so I did absolute value, and\nlook, it did the bithack",
    "start": "782010",
    "end": "794160"
  },
  {
    "text": "we basically learned in class. You can go look at that. This is the entire thing that\nCharles talked about to find",
    "start": "794160",
    "end": "801149"
  },
  {
    "text": "absolute value. It knew that, so it has attended\nCharles' lecture. That [UNINTELLIGIBLE] programmer.",
    "start": "801150",
    "end": "808162"
  },
  {
    "text": "OK, so here's interesting\nthing.",
    "start": "808162",
    "end": "813230"
  },
  {
    "text": "So what I did was I am doing\nupdate, and I have this big large array here, and I'm\nchecking the index to be",
    "start": "813230",
    "end": "820899"
  },
  {
    "text": "within 0 and this value to\nbefore I updated, because I don't want to write out the\nbounds on this setting.",
    "start": "820900",
    "end": "828100"
  },
  {
    "text": "OK? Makes sense, because I want\nto make sure that I write in the bound. Interesting thing here is I\nam doing two checks, here.",
    "start": "828100",
    "end": "835630"
  },
  {
    "text": "I end up doing only\none check here. What happened to\nmy other check? ",
    "start": "835630",
    "end": "844220"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE], how\nbig was the array, and [INAUDIBLE].",
    "start": "844220",
    "end": "850136"
  },
  {
    "text": "PROFESSOR: No, no,\n[UNINTELLIGIBLE] something a lot more simpler. So to give you a hint, this is\nunsigned value, and I'm doing",
    "start": "850136",
    "end": "859180"
  },
  {
    "text": "unsigned compare. ",
    "start": "859180",
    "end": "865399"
  },
  {
    "text": "What happens if the value\nis more than 0? A signed value that's smaller\nthan 0 is what",
    "start": "865400",
    "end": "872270"
  },
  {
    "text": "it is like in unsigned. It's a huge number. It [UNINTELLIGIBLE] to be bigger than this one, so\nbecause of that, it can just",
    "start": "872270",
    "end": "881340"
  },
  {
    "text": "say, OK look, I don't\nhave to check that. I can unsigned compare, and I\nwill get anything less than zero also in there.",
    "start": "881340",
    "end": "887490"
  },
  {
    "text": "So one more thing. So before I continue with this\none, so if I actually put it",
    "start": "887490",
    "end": "893675"
  },
  {
    "text": "in a loop and say I'm going to\ntrade [UNINTELLIGIBLE] to this value in here.",
    "start": "893675",
    "end": "899580"
  },
  {
    "text": "Then what it'll do is, at that\npoint, it'll inline this. And when it can complete\n[UNINTELLIGIBLE] near the",
    "start": "899580",
    "end": "905029"
  },
  {
    "text": "check, it will know that, in\nfact, my bound is going from 0 to this one, so I don't have\nto check the bound.",
    "start": "905030",
    "end": "912060"
  },
  {
    "text": "So what this did was this\ninlined this function in here and completely get rid of the\nchecks completely, and this is",
    "start": "912060",
    "end": "919310"
  },
  {
    "text": "basically the branch condition\nin here because it said, OK, look. These things are redundant\nbecause I know because I'm",
    "start": "919310",
    "end": "925730"
  },
  {
    "text": "trading from this to this value\nwithin these bounds [UNINTELLIGIBLE]. So it is smart in that.",
    "start": "925730",
    "end": "932320"
  },
  {
    "text": "Do you see this, how\nthis is going? Cool stuff the compiler does. So this is why compilers are\nsmart, when they are smart.",
    "start": "932320",
    "end": "940140"
  },
  {
    "text": "And the interesting thing\nis, here's another one. So now see [UNINTELLIGIBLE] imagine, because less than\n0, I can do that.",
    "start": "940140",
    "end": "947040"
  },
  {
    "text": "How about if I'm checking\nfrom 5,000? So we generated this\nfunky code.",
    "start": "947040",
    "end": "953390"
  },
  {
    "text": "It subtracted a 6 here in the\nvalue, and then checked for",
    "start": "953390",
    "end": "959680"
  },
  {
    "text": "[UNINTELLIGIBLE] because it kind of shifted the\nvalue to a 0 basis, basically.",
    "start": "959680",
    "end": "965250"
  },
  {
    "text": "And then you can check that\nthing, and then can basically get two conditions\ndown to one.",
    "start": "965250",
    "end": "973000"
  },
  {
    "text": "See, the thing is there are many\nplaces where bound checks is very important.",
    "start": "973000",
    "end": "979050"
  },
  {
    "text": "If you are doing a lot of adding\ncompilation stuff like that, if you don't want to\nhave buffer overflows and stuff, you want it with\nbound checks.",
    "start": "979050",
    "end": "984750"
  },
  {
    "text": "And so optimizing bound checks\nis a very important thing. So having these kind of things\ncan, in many programs,",
    "start": "984750",
    "end": "990380"
  },
  {
    "text": "probably give good performance,\nso that's why compilers are really good at it\nand spend time trying to do",
    "start": "990380",
    "end": "996199"
  },
  {
    "text": "bound checks. So this is kind of interesting\nway of doing that. ",
    "start": "996200",
    "end": "1002580"
  },
  {
    "text": "So the next thing I want to\nlook at is vectorization because all these machines\nwe have have this as the",
    "start": "1002580",
    "end": "1011140"
  },
  {
    "text": "instructions, that can run\nreally fast, and you probably saw it in there, and see what\nkind of code will get produced",
    "start": "1011140",
    "end": "1017850"
  },
  {
    "text": "after doing something\nlike that. So here's a simple program. So I have two arrays, and I'm\njust copying A to B, something",
    "start": "1017850",
    "end": "1028220"
  },
  {
    "text": "very simple. And also the other thing to\nnotice, I know exactly from where to where I'm copying, and\nI also know which arrays",
    "start": "1028220",
    "end": "1034109"
  },
  {
    "text": "I'm copying, so when\nyou look at it, it produces a code like this. So what it's doing is it's\nbasically making eax0 here by",
    "start": "1034109",
    "end": "1042890"
  },
  {
    "text": "doing xorl. And then basically, moving\nthe value A into the xmm",
    "start": "1042890",
    "end": "1052090"
  },
  {
    "text": "registers, much larger. Instead of having to\n[UNINTELLIGIBLE] 16 of them, and copying\nit back into B.",
    "start": "1052090",
    "end": "1058970"
  },
  {
    "text": "So basically, you are doing\ncopying here, an increment by 16. By now, every refresh, you're\ncoping 16 of them.",
    "start": "1058970",
    "end": "1064968"
  },
  {
    "text": " Why could I just be done\nwith just putting this",
    "start": "1064968",
    "end": "1071070"
  },
  {
    "text": "small piece of code? What additional information this\nis taking advantage of? ",
    "start": "1071070",
    "end": "1078064"
  },
  {
    "text": "AUDIENCE: Does it know\nthat [INAUDIBLE]? ",
    "start": "1078064",
    "end": "1083940"
  },
  {
    "text": "PROFESSOR: Exactly, because it\nknows that it goes from 0 to this value. In fact, it knows it's\na multiple of 16.",
    "start": "1083940",
    "end": "1089549"
  },
  {
    "text": "So it knows that. That's why it do that. It knows exactly, and these\nthings are nicely aligned to",
    "start": "1089550",
    "end": "1099360"
  },
  {
    "text": "the boundaries, word\nboundaries. So it knows that. So I can read that, and I know\nall those facts, and that is",
    "start": "1099360",
    "end": "1104750"
  },
  {
    "text": "why I can do this computation. So now, you start doing that,\ndid one simple change.",
    "start": "1104750",
    "end": "1110520"
  },
  {
    "text": "You start going from value,\nI went to end.",
    "start": "1110520",
    "end": "1116150"
  },
  {
    "text": "0 to end. I know where it starts, and\nI know where it's ending. Ending is somewhere at N. I\ndon't know where the end is.",
    "start": "1116150",
    "end": "1125009"
  },
  {
    "text": "Then this has to do something\na little bit difficult. So the code produced looks like\nthis because, now, I'm",
    "start": "1125010",
    "end": "1131890"
  },
  {
    "text": "not going to go through\nthis code. The only thing to say, this is\nactually doing still a memx instruction, but its trying to\nmake sure that because N it",
    "start": "1131890",
    "end": "1139100"
  },
  {
    "text": "might not be a multiple of 16. You have to take care of the\nfinal number of iterations",
    "start": "1139100",
    "end": "1146160"
  },
  {
    "text": "outside that, so you had to go\nup to the multiple, and then basically do a normal\nloop one at a time.",
    "start": "1146160",
    "end": "1152170"
  },
  {
    "text": "So as we produce a little\nbit of a more complicated piece like that. So that's [UNINTELLIGIBLE] compiler has to do.",
    "start": "1152170",
    "end": "1158690"
  },
  {
    "text": "And so then you have a piece\nof code like this. ",
    "start": "1158690",
    "end": "1170760"
  },
  {
    "text": "The interesting thing here is,\nnow, I created basically a",
    "start": "1170760",
    "end": "1177200"
  },
  {
    "text": "function, where it's not A and\nB. I'm giving two arrays as arguments, and then I'm giving\na size to copy, and I'm",
    "start": "1177200",
    "end": "1185200"
  },
  {
    "text": "copying that. And I would have an extremely\ncomplicated thing that's getting generated.",
    "start": "1185200",
    "end": "1192419"
  },
  {
    "text": "Why is it complicated? What do I have to know, when I\nget this function, to make",
    "start": "1192420",
    "end": "1197830"
  },
  {
    "text": "sure that, first of all,\nit's still doing xmm somewhere in here.",
    "start": "1197830",
    "end": "1204640"
  },
  {
    "text": "What that means is it's trying\nto do this very fast copy of a multiple using [UNINTELLIGIBLE]\ninstruction.",
    "start": "1204640",
    "end": "1211240"
  },
  {
    "text": "But what else can happen\nin this function? Because compilers delete\nall the cases.",
    "start": "1211240",
    "end": "1216620"
  },
  {
    "text": "What are other cases\ntests deal with?  AUDIENCE: May not be aligned.",
    "start": "1216620",
    "end": "1222690"
  },
  {
    "text": "PROFESSOR: May not be aligned\nbecause, for example, because xmm assumes that they had\nthe word boundaries.",
    "start": "1222690",
    "end": "1229460"
  },
  {
    "text": "When you read 16 bytes, we\nassume it's aligned with 16-byte boundary.",
    "start": "1229460",
    "end": "1234740"
  },
  {
    "text": "It might not be aligned, so you\nhave no idea where these two are coming from. So that's one thing is they\nmight not be aligned. What else?",
    "start": "1234740",
    "end": "1239870"
  },
  {
    "text": "AUDIENCE: They don't even have\nto be a [INAUDIBLE]. Because I mean, that thing could\njust be copying up to N.",
    "start": "1239870",
    "end": "1247294"
  },
  {
    "text": "But it might just be copying\npartially parts of the array. PROFESSOR: Yes, yeah,\nthat's true. So what that means is because\narrays [UNINTELLIGIBLE] it,",
    "start": "1247295",
    "end": "1253840"
  },
  {
    "text": "but arrays is somewhere in\nmemory, just you do two-point to starting point. That is what x and y are there,\ntwo starting points in",
    "start": "1253840",
    "end": "1259840"
  },
  {
    "text": "main memory, and start\ncopying there. So what else can happen\nbecause of that?",
    "start": "1259840",
    "end": "1265240"
  },
  {
    "text": "Because in A and B, we knew they\nwere two separate arrays. What else can happen? ",
    "start": "1265240",
    "end": "1275996"
  },
  {
    "text": "Back there. AUDIENCE: [INAUDIBLE]. PROFESSOR: Yes. So arrays can start to overlap,\nand if arrays are",
    "start": "1275996",
    "end": "1283540"
  },
  {
    "text": "overlapping, then you\nmight end up in an interesting situation. So you have to figure out if\nthat arrays are overlapping,",
    "start": "1283540",
    "end": "1289140"
  },
  {
    "text": "whether they're aligned. Actually, there are two\ntypes of aligned. One is self-aligning, so assume\nwe took these arrays",
    "start": "1289140",
    "end": "1297460"
  },
  {
    "text": "and start copying\nfrom the byte 3. So then what you know is\nbasically byte 3 to 16, it's",
    "start": "1297460",
    "end": "1304870"
  },
  {
    "text": "not aligned. You can't start copying\nchunks in there. So you run bytes, but when you\nrun up to 13 iterations, then",
    "start": "1304870",
    "end": "1314519"
  },
  {
    "text": "you end up in, again,\naligned chunks. So in that case, you just run\nthe sum preamble to first",
    "start": "1314520",
    "end": "1321710"
  },
  {
    "text": "aligned place, and then you\ngo to aligned chunk. But if this is starting to at 3,\nthis is starting at 8, then",
    "start": "1321710",
    "end": "1328000"
  },
  {
    "text": "they're never going\nto be aligned. The things are copying A and B\nare not aligned, so then you have to treat it differently.",
    "start": "1328000",
    "end": "1333650"
  },
  {
    "text": "So there's a lot of different\ncases you have to do, so if you just give something like\nthis, the problem is the",
    "start": "1333650",
    "end": "1339430"
  },
  {
    "text": "compiler has to deal with\nthese thousands of different cases. And in this one, since this\nsmall, it probably tore",
    "start": "1339430",
    "end": "1345799"
  },
  {
    "text": "through all the possible cases\nat the [UNINTELLIGIBLE]. So it's dealing with all those,\nand checking over everything and trying to find\noptimal case and do that fast,",
    "start": "1345800",
    "end": "1353690"
  },
  {
    "text": "hoping that you get optimal\ncase for it. But if you have something more\ncomplicated, the compiler won't be able to do all\nof those things, so",
    "start": "1353690",
    "end": "1359250"
  },
  {
    "text": "it might give up. So the interesting thing to here\nnote is more information to go into the compiler\nis better.",
    "start": "1359250",
    "end": "1364840"
  },
  {
    "text": "And then here, compiler has to\ndivide a lot of things, but probably not happen.",
    "start": "1364840",
    "end": "1371020"
  },
  {
    "text": "Another interesting thing is\nnow, the first time I just copy to where is A to B, in\nmemcpy4, I just call memcpy3",
    "start": "1371020",
    "end": "1380620"
  },
  {
    "text": "by doing the same thing, A to B,\ncopy 1024 [UNINTELLIGIBLE].",
    "start": "1380620",
    "end": "1387080"
  },
  {
    "text": "This is the beauty\nof inlining. So what it did was, in memcpy4,\nit inline memcpy3 and",
    "start": "1387080",
    "end": "1396100"
  },
  {
    "text": "substitute X and Y to A\nand B and end 2,024.",
    "start": "1396100",
    "end": "1401309"
  },
  {
    "text": "And it realized that it doesn't\nhave to do all these tests like it did. What it generated is very close\nto what we got here",
    "start": "1401310",
    "end": "1409784"
  },
  {
    "text": "because after inlining, it\nshould realize, wait a minute, I'm copying A to B. I know\nwe have the start. I know we have the end. I know the size. I know all of these things, and\nI don't have to do any of",
    "start": "1409785",
    "end": "1416880"
  },
  {
    "text": "these things. I can actually generate this\nvery simple piece of code.",
    "start": "1416880",
    "end": "1422320"
  },
  {
    "text": "So I think that is\na neat thing. What this shows you is, in fact,\nif you can build this",
    "start": "1422320",
    "end": "1430769"
  },
  {
    "text": "general function of things in\nthere, and then you can call them, and if it is done right,\nthe inlining will basically do",
    "start": "1430770",
    "end": "1439210"
  },
  {
    "text": "all optimizations. So you don't have to have 50\ndifferent memcpies for all the different things in your code.",
    "start": "1439210",
    "end": "1446100"
  },
  {
    "text": "If you wrote a general function,\nand you call it in a way it can get inline and got\nthat as efficient as possible",
    "start": "1446100",
    "end": "1452900"
  },
  {
    "text": "as hand optimization.  I think it's a real interesting\nthing, and what",
    "start": "1452900",
    "end": "1460360"
  },
  {
    "text": "does for you, when you're doing\nprojects, you don't have to do all of these very complex\nand small functions,",
    "start": "1460360",
    "end": "1467620"
  },
  {
    "text": "hand inline stuff like that. But it's always good to check\nthat, in fact, the compiler's",
    "start": "1467620",
    "end": "1472740"
  },
  {
    "text": "doing that because\nyou don't know. You assume the compiler's doing\nthat, and there might be cases it might not be. And I will show you\none example here.",
    "start": "1472740",
    "end": "1480640"
  },
  {
    "text": "So I want you guys to look at\nthis function a little bit. OK? I am doing two memcpies.",
    "start": "1480640",
    "end": "1486500"
  },
  {
    "text": "I am copying 1,024 elements. One, I'm doing ai+1, a into--",
    "start": "1486500",
    "end": "1493150"
  },
  {
    "text": "this is XY, this is X get copied\ninto Y. ai+1 to A, so",
    "start": "1493150",
    "end": "1499210"
  },
  {
    "text": "that means I have array like\nthat, array like this.",
    "start": "1499210",
    "end": "1507690"
  },
  {
    "text": " I am giving ai+1\nas the source.",
    "start": "1507690",
    "end": "1514090"
  },
  {
    "text": "I am giving this as the source,\nand I'm doing this as the destination. ",
    "start": "1514090",
    "end": "1521570"
  },
  {
    "text": "OK, what does this copy do? ",
    "start": "1521570",
    "end": "1528830"
  },
  {
    "text": "I'm copying 1,024, yes.",
    "start": "1528830",
    "end": "1535960"
  },
  {
    "text": "So the first one, this one\ngets copied to here. Second iteration, this\nwill get copied.",
    "start": "1535960",
    "end": "1541390"
  },
  {
    "text": "Third iteration, this will\nget copied to here. What does it do? Yeah, I just do one left-shift\nof the array.",
    "start": "1541390",
    "end": "1549600"
  },
  {
    "text": "My second example. ",
    "start": "1549600",
    "end": "1556710"
  },
  {
    "text": "I give this as my\nfirst element. This as my source.",
    "start": "1556710",
    "end": "1562549"
  },
  {
    "text": "This as my destination. What happens here? AUDIENCE: All your copies\nhave the same number.",
    "start": "1562550",
    "end": "1569570"
  },
  {
    "text": "PROFESSOR: Exactly. All of them will copy\nthe same number. OK, so now, if you look at the\ncode that's been produced, so",
    "start": "1569570",
    "end": "1582860"
  },
  {
    "text": "the interesting thing here is\nit realizes, in this one, I can still do mmx because I can\nstill copy, take a chunk, and",
    "start": "1582860",
    "end": "1591530"
  },
  {
    "text": "copy it one back, take a chunk\nand copy it one back, take a chunk and copy it one back. ",
    "start": "1591530",
    "end": "1599590"
  },
  {
    "text": "OK, do you see that? But what does the next one do? ",
    "start": "1599590",
    "end": "1608460"
  },
  {
    "text": "[UNINTELLIGIBLE] mmx is, and what does\nthis one do? ",
    "start": "1608460",
    "end": "1617020"
  },
  {
    "text": "Copying something from dl-- ",
    "start": "1617020",
    "end": "1638510"
  },
  {
    "text": "[? movzdl ?] array expressed dl. ",
    "start": "1638510",
    "end": "1645730"
  },
  {
    "text": "Reverse dl, is this\ncopied, this one? ",
    "start": "1645730",
    "end": "1652640"
  },
  {
    "text": "I hope I copied it properly. That doesn't look right to me. ",
    "start": "1652640",
    "end": "1665040"
  },
  {
    "text": "So this is interesting. So I might have missed\n[UNINTELLIGIBLE]. I think it takes-- ",
    "start": "1665040",
    "end": "1673830"
  },
  {
    "text": "This doesn't look\nright, does it? AUDIENCE: So what's a bound? It's char, I see.",
    "start": "1673830",
    "end": "1679158"
  },
  {
    "text": "One byte. PROFESSOR: Yeah, one byte. AUDIENCE: So what this is doing\nis just taking the first byte, and then just moving it.",
    "start": "1679158",
    "end": "1684950"
  },
  {
    "text": "PROFESSOR: Into edx? AUDIENCE: [INAUDIBLE]. PROFESSOR: Oh, right,\nthis is actually doing the right thing. It's doing the right thing, so\nwhat it does is this move this",
    "start": "1684950",
    "end": "1691130"
  },
  {
    "text": "one into edx, entire thing, and\nthen this calls the dl, it",
    "start": "1691130",
    "end": "1696800"
  },
  {
    "text": "gets the first byte\nout of edx. Do you see what's\nhappening here? So a gets into--",
    "start": "1696800",
    "end": "1702580"
  },
  {
    "text": "first [UNINTELLIGIBLE] the first byte out in here, and\nthen you keep copying that byte one at a time into\nthis location.",
    "start": "1702580",
    "end": "1711900"
  },
  {
    "text": "AUDIENCE: So it's not smart\nenough to [INAUDIBLE]. PROFESSOR: So this is where we\nfind something interesting in",
    "start": "1711900",
    "end": "1717230"
  },
  {
    "text": "the compiler. AUDIENCE: [INAUDIBLE]? ",
    "start": "1717230",
    "end": "1722870"
  },
  {
    "text": "PROFESSOR: So what doing is, in\nhere, you are copying this",
    "start": "1722870",
    "end": "1734450"
  },
  {
    "text": "byte into edx. So dl is the first\nbite out of edl.",
    "start": "1734450",
    "end": "1740120"
  },
  {
    "text": "That's byte, because what-- AUDIENCE: The first byte. PROFESSOR: Yes, because except\nthe six address themes, do you",
    "start": "1740120",
    "end": "1747000"
  },
  {
    "text": "do r32e, r64e, 32, and just\ndl is just first byte",
    "start": "1747000",
    "end": "1753100"
  },
  {
    "text": "[UNINTELLIGIBLE], but\n[UNINTELLIGIBLE] low byte of that. d is just the higher byte.",
    "start": "1753100",
    "end": "1758190"
  },
  {
    "text": "AUDIENCE: So why does it just\ntake the first byte? PROFESSOR: Because this\nbyte get copied",
    "start": "1758190",
    "end": "1764259"
  },
  {
    "text": "into everything here. So do you see that? This byte is the one that--\nbecause that's what happened",
    "start": "1764260",
    "end": "1770790"
  },
  {
    "text": "when this copy is basically\nthis byte got everything [UNINTELLIGIBLE] got replaced by this\nfirst byte in here.",
    "start": "1770790",
    "end": "1776195"
  },
  {
    "text": "And you incorporate in there,\nand then it just goes around",
    "start": "1776195",
    "end": "1781880"
  },
  {
    "text": "copying it in here. So I try, I did it this way,\nso what I did was basically",
    "start": "1781880",
    "end": "1787420"
  },
  {
    "text": "went from 1 to 1,025. [UNINTELLIGIBLE] 0. This is basically\nwhat happened.",
    "start": "1787420",
    "end": "1792980"
  },
  {
    "text": "So one 2,025, I got a 0, and\nthen basically that's what",
    "start": "1792980",
    "end": "1798820"
  },
  {
    "text": "happens in here, same\nthing here. OK? ",
    "start": "1798820",
    "end": "1804929"
  },
  {
    "text": "Do you see what's going on? But I just did something else,\nso assume [UNINTELLIGIBLE]",
    "start": "1804930",
    "end": "1812410"
  },
  {
    "text": "is doing right here. What happens if I just\nuse something else?",
    "start": "1812410",
    "end": "1817850"
  },
  {
    "text": "I use B[0], so it should\nbe the same, isn't it? If I use b[0]",
    "start": "1817850",
    "end": "1823220"
  },
  {
    "text": "here, instead of doing A[i],\nthis should be B[i], isn't it?",
    "start": "1823220",
    "end": "1829934"
  },
  {
    "text": "AUDIENCE: I'm sorry, where\nis [INAUDIBLE]? PROFESSOR: Yeah. It's a different array. Sorry, I didn't put it here.",
    "start": "1829935",
    "end": "1835190"
  },
  {
    "text": "It's a different array. So instead of A[0] here, I put another\narray, B[0], here. ",
    "start": "1835190",
    "end": "1843080"
  },
  {
    "text": "Does it matter whether\nthat's A[0] or B[0]? B[0] is a different array. ",
    "start": "1843080",
    "end": "1848919"
  },
  {
    "text": "It shouldn't matter because a\ndifferent array, different element that you don't do that,\nbut the interesting",
    "start": "1848920",
    "end": "1854399"
  },
  {
    "text": "thing is if you do that,\nit managed to convert it into mmx. So this is where the compiler\nis basically falling short a",
    "start": "1854400",
    "end": "1862112"
  },
  {
    "text": "little bit because it could have\ndone this for these two.",
    "start": "1862113",
    "end": "1867404"
  },
  {
    "text": "OK, it's the same thing because\nwhat it does is it takes this one element from\nme and copy it everywhere. I could have done it, but for\nsome reason, the compiler",
    "start": "1867404",
    "end": "1876809"
  },
  {
    "text": "decided if using a different\narray, B[0]. I can do it, but\nI'm doing A[0] [UNINTELLIGIBLE], even though\nthese two are basically",
    "start": "1876810",
    "end": "1884650"
  },
  {
    "text": "identical except these\nare different. I'm not doing any kind of\n[UNINTELLIGIBLE], anything. Question? AUDIENCE: [INAUDIBLE]?",
    "start": "1884650",
    "end": "1890296"
  },
  {
    "text": " PROFESSOR: Yes, so what does\nis when it goes somewhere, it's doing pac.",
    "start": "1890296",
    "end": "1897050"
  },
  {
    "text": "[UNINTELLIGIBLE] pac\ninstructions in here. What it does is it takes a\nbyte and kind of makes",
    "start": "1897050",
    "end": "1902570"
  },
  {
    "text": "multiple copies of the byte and\ncreate a larger copy than the 16 copies in there, and then\nit can kind of stamp it",
    "start": "1902570",
    "end": "1908270"
  },
  {
    "text": "everywhere. AUDIENCE: [INAUDIBLE] because the A[0] would\ngo off of A[1].",
    "start": "1908270",
    "end": "1914639"
  },
  {
    "text": "PROFESSOR: So what it's\ndoing is copying A[0] multiple times one at\na times slowly. So what this does is it takes\nB[0], make 16 copies in there,",
    "start": "1914640",
    "end": "1923850"
  },
  {
    "text": "in registers, not in memory. I created a template of\n16, and I kind of stamp it as I go.",
    "start": "1923850",
    "end": "1929660"
  },
  {
    "text": "AUDIENCE: That's probably\nfailure of its alias analysis. PROFESSOR: Yeah, it's failure\n[UNINTELLIGIBLE]. So this is where the compiler\ndoes some magic, kind of very",
    "start": "1929660",
    "end": "1935720"
  },
  {
    "text": "complex things in here. But somewhere in the\ncompiler it failed.",
    "start": "1935720",
    "end": "1940810"
  },
  {
    "text": "so what you want in here is a\ncode looking like this, but it",
    "start": "1940810",
    "end": "1946840"
  },
  {
    "text": "produces this one. So this is where the compilers\nare great. It do some amazing things,\nbut it's not infallible.",
    "start": "1946840",
    "end": "1956620"
  },
  {
    "text": "It can do, there might be\ncorner cases that data analysis fails. So that's why it's always good,\neven though you can take",
    "start": "1956620",
    "end": "1964390"
  },
  {
    "text": "advantage of the compiler, to\nlook at what's generating. And sometimes when you tweak\naround it, you suddenly realize, wait a minute.",
    "start": "1964390",
    "end": "1970140"
  },
  {
    "text": "I can get the compiler do\nsomething better, and then you can say wait a minute, now how\ndo I work myself back?",
    "start": "1970140",
    "end": "1975740"
  },
  {
    "text": "Sometimes, you end up changing\nyour SQL a little bit like the examples, the TAs showed when\nthey were doing their demo,",
    "start": "1975740",
    "end": "1987670"
  },
  {
    "text": "that if you tweak it a little,\nyou can actually get the compiler to do that, instead\nof trying to do these things by hand.",
    "start": "1987670",
    "end": "1992990"
  },
  {
    "text": " So the compilers are powerful,\nbut you have to be careful. ",
    "start": "1992990",
    "end": "2000070"
  },
  {
    "text": "Another interesting thing\nis this factorial here. So normal factorial is basically\nyou call a function",
    "start": "2000070",
    "end": "2006080"
  },
  {
    "text": "call with x-1 and\nmultiply by x. But you know functions calls\nare very expensive, and in",
    "start": "2006080",
    "end": "2014060"
  },
  {
    "text": "fact, GCC knows that, too. So what GCC did, it basically\neliminated the function call",
    "start": "2014060",
    "end": "2020580"
  },
  {
    "text": "and converted it into\nits [UNINTELLIGIBLE] function here. So if EDA got x in here, and\nthen it goes to a loop, so it",
    "start": "2020580",
    "end": "2028660"
  },
  {
    "text": "first check with\n[UNINTELLIGIBLE]. If it is one, you go to\nthe end and return it. You are done if x is\n1 or less than 1.",
    "start": "2028660",
    "end": "2036150"
  },
  {
    "text": "And otherwise, it goes\nthrough a loop. It doesn't go do any\nfunction call. It just basically calculate this\nfact value inside EAX and",
    "start": "2036150",
    "end": "2044260"
  },
  {
    "text": "keep multiplying\n[UNINTELLIGIBLE]. So it can take this simple\nrecursive functions, and also",
    "start": "2044260",
    "end": "2053219"
  },
  {
    "text": "convert it into\n[UNINTELLIGIBLE]. So it does some very, very fancy\nstuff in the compiler. So the compilers are\nfun when they work.",
    "start": "2053219",
    "end": "2060320"
  },
  {
    "text": "But the key thing is there are\nmany cases it doesn't work. So next, I want to\nswitch gears.",
    "start": "2060320",
    "end": "2066179"
  },
  {
    "text": "Any questions so far? Sometimes it's fun\nto find breaking",
    "start": "2066179",
    "end": "2071379"
  },
  {
    "text": "points in the compiler. AUDIENCE: [INAUDIBLE]? ",
    "start": "2071380",
    "end": "2079233"
  },
  {
    "text": "PROFESSOR: If I use, in some-- this is not static? AUDIENCE: Yeah.",
    "start": "2079234",
    "end": "2084250"
  },
  {
    "text": "PROFESSOR: No, it won't make a\ndifference because what it says is if it is not static,\nit's visible to the outside world, but within this function,\nit's the same.",
    "start": "2084250",
    "end": "2092359"
  },
  {
    "text": "So what it does, it kind of\nlike limiting my pollution because otherwise what happens\nis everybody outside will see",
    "start": "2092360",
    "end": "2099800"
  },
  {
    "text": "these names. So if you use that name again\nsomewhere, it might just use this one.",
    "start": "2099800",
    "end": "2105414"
  },
  {
    "text": "[UNINTELLIGIBLE PHRASE] this is within the file, nobody\nelse should see this. It's creating a local copy.",
    "start": "2105415",
    "end": "2111700"
  },
  {
    "text": "It's kind of a poor man's\nclass heierarchy. In Java, basically, each file\nis a single class, and you",
    "start": "2111700",
    "end": "2121170"
  },
  {
    "text": "make sure that things\ninside the class is not visible to outside. When you make static, you made\nit only visible within that",
    "start": "2121170",
    "end": "2129660"
  },
  {
    "text": "file, so you kind of make\n[UNINTELLIGIBLE]. You can think about your file\nas your class, and so you",
    "start": "2129660",
    "end": "2135309"
  },
  {
    "text": "limit the scope of the\nvariable doing that. So some benefits of\nobject-orientedness can be",
    "start": "2135310",
    "end": "2142156"
  },
  {
    "text": "[UNINTELLIGIBLE], I guess. [UNINTELLIGIBLE] static\nvariable, it's not a class variable. ",
    "start": "2142156",
    "end": "2152259"
  },
  {
    "text": "OK, so next, before I get into\ndoing compilers and say what compilers do, I want to give\nyou a [UNINTELLIGIBLE].",
    "start": "2152260",
    "end": "2159579"
  },
  {
    "text": "There are many different\nplaces where you can do optimization. So if you look at what happens\nin the program, program first",
    "start": "2159580",
    "end": "2166270"
  },
  {
    "text": "goes through compile time,\ncompiles each file, then it links all the files together. At some point, the files will\nget loaded into your machine,",
    "start": "2166270",
    "end": "2174790"
  },
  {
    "text": "and then it'll be running. So if you load things in a\ncompiler, you have full access",
    "start": "2174790",
    "end": "2180480"
  },
  {
    "text": "to source code, it's very easy\nto kind of look at the high-level transformation,\nlow-level transformation, you",
    "start": "2180480",
    "end": "2188380"
  },
  {
    "text": "can look at the entire gamut\nof things to do. And the nice thing\nabout compilers,",
    "start": "2188380",
    "end": "2193940"
  },
  {
    "text": "compilers can be slow. Nobody's going to complain. It's not going to be part of\nyour run-time, so you just",
    "start": "2193940",
    "end": "2199470"
  },
  {
    "text": "would wait, but it's you,\nnot the customer. But the problem with compilers,\nit doesn't see the",
    "start": "2199470",
    "end": "2205050"
  },
  {
    "text": "whole programs. You see a file at a time, so\nall this inline things and stuff has to be in the file. You can't put in a different\nfile and get [UNINTELLIGIBLE].",
    "start": "2205050",
    "end": "2211130"
  },
  {
    "text": " And also don't know the run-time\nconditions because",
    "start": "2211130",
    "end": "2216940"
  },
  {
    "text": "that's run-time. It might be having different\ninputs, different size of load",
    "start": "2216940",
    "end": "2224390"
  },
  {
    "text": "and stuff, that I don't know\nany of those things. And also, I don't know about\nthe architecture, so if my compiler have to make sure that\nit works on AMD machines,",
    "start": "2224390",
    "end": "2232750"
  },
  {
    "text": "Intel machines, stuff like that,\nof course, you can use special flags and try to comply\nfor one machine, and",
    "start": "2232750",
    "end": "2238010"
  },
  {
    "text": "breaks, you finish\non the other one. But you don't want to do that,\nso the compiler has to be a lot more general, and this can\nbe sometimes problematic.",
    "start": "2238010",
    "end": "2244869"
  },
  {
    "text": "So when you're going to link,\nthe nice thing is that this is a place you have the entire\nprogram available.",
    "start": "2244870",
    "end": "2250370"
  },
  {
    "text": "Sometimes, people try to do\nthings like inlining in the linktime, because that means you\nknow everything in there, so you went with couple\ndifferent file I can inline it",
    "start": "2250370",
    "end": "2257010"
  },
  {
    "text": "because I have access\nthrough here. And still, there might be things\nthat's not available,",
    "start": "2257010",
    "end": "2263430"
  },
  {
    "text": "like dynamically-loaded classes\nand dynamic-loaded data, and so things like Java\nmight not be available.",
    "start": "2263430",
    "end": "2268960"
  },
  {
    "text": "And of course, you don't\nhave access to source most of the time. AUDIENCE: Sorry, sir. What do you mean [INAUDIBLE]?",
    "start": "2268960",
    "end": "2274612"
  },
  {
    "text": "Do you have the full program\n[INAUDIBLE]? But so how do you say\nthat [INAUDIBLE]?",
    "start": "2274612",
    "end": "2282560"
  },
  {
    "text": "PROFESSOR: So dynamic links,\nif you have something like Java, there might be some data\nthat kind of get dynamically generated or dynamically\nlinked.",
    "start": "2282560",
    "end": "2289780"
  },
  {
    "text": "So when you're running, if\nyou're running right [UNINTELLIGIBLE] your browser,\nall those Javascript classes",
    "start": "2289780",
    "end": "2296060"
  },
  {
    "text": "and stuff like that, you don't\nhave access to because those are coming in here. So there might be places,\nthings that",
    "start": "2296060",
    "end": "2301350"
  },
  {
    "text": "it gets as it runs. Not in C, but in other\nlanguages.",
    "start": "2301350",
    "end": "2306370"
  },
  {
    "text": "And the load is interesting\ntime. Here, load time is important\nbecause when you double-click,",
    "start": "2306370",
    "end": "2312090"
  },
  {
    "text": "you want your program\nto appear fast. You don't want it to\ntake a long time. But you have kind of access to\nall that code in here, and you",
    "start": "2312090",
    "end": "2322270"
  },
  {
    "text": "have some idea about the\nrun-time, also, the architecture, and stuff like\nthat, what you have, not the",
    "start": "2322270",
    "end": "2327720"
  },
  {
    "text": "run-time, but the architecture,\nexactly what machines you are running. And then, of course, you\ncan do it run-time.",
    "start": "2327720",
    "end": "2332750"
  },
  {
    "text": "The thing about run-time is\nyou have full knowledge of everything, it's great, but\nevery clock cycle you spend",
    "start": "2332750",
    "end": "2338560"
  },
  {
    "text": "optimizing is one clock\ncycle you take away from the program. So things like Java JIT\ncompilers, they try to do",
    "start": "2338560",
    "end": "2344455"
  },
  {
    "text": "minimal things, so\nvery fast things. It can't do a lot of complicated\nthings because it's too expensive.",
    "start": "2344455",
    "end": "2349950"
  },
  {
    "text": "OK, so we're not talking about\nany of these things any more, but it's always good to know,\nas you go about using Python",
    "start": "2349950",
    "end": "2357730"
  },
  {
    "text": "or Java or JavaScript and stuff\nlike this where is this thing happening to my code?",
    "start": "2357730",
    "end": "2362859"
  },
  {
    "text": "Because it might not be all\ncompile-time stuff. It might be happening\nat different stages. So you need to know who's\nactually mucking with your",
    "start": "2362860",
    "end": "2368700"
  },
  {
    "text": "code, and know that there\nare other people who can muck with your code.  So next, I want to switch\ninto dataflow analysis.",
    "start": "2368700",
    "end": "2377390"
  },
  {
    "text": "So this is what compilers are\ngood at, and compilers try to do all the time. So it's basically compile-time\nreasoning about run-time",
    "start": "2377390",
    "end": "2386770"
  },
  {
    "text": "values and variables, or\nexpressions, within the program at different\nprogram points.",
    "start": "2386770",
    "end": "2392310"
  },
  {
    "text": "OK, so that means compile-time,\nI need to know I have this program point,\nwhat could it be.",
    "start": "2392310",
    "end": "2398400"
  },
  {
    "text": "So things like which assignment\nstatement produced a value or variable\nthat I am using? OK, if I use a value, who\nactually created that value?",
    "start": "2398400",
    "end": "2405750"
  },
  {
    "text": "Or which variable contain values\nthat are no longer",
    "start": "2405750",
    "end": "2412090"
  },
  {
    "text": "being used by somebody here? So that means I am trying to\nanalyze the program and watch the range of values that\neach variable can have.",
    "start": "2412090",
    "end": "2420099"
  },
  {
    "text": "So the key thing here is this\nhas to be true for every possible input at every\npossible execution.",
    "start": "2420100",
    "end": "2426920"
  },
  {
    "text": "Normally, [UNINTELLIGIBLE], and\nthis time, I know why my variable [UNINTELLIGIBLE], but\nevery possible time, this has",
    "start": "2426920",
    "end": "2432270"
  },
  {
    "text": "to be true. OK, if there's a condition that\nsomething can happen, you have to make sure that condition\nis not going to",
    "start": "2432270",
    "end": "2439670"
  },
  {
    "text": "break your program. Last thing you want from\noptimizer is to basically start producing different\nresults.",
    "start": "2439670",
    "end": "2446870"
  },
  {
    "text": "Even [UNINTELLIGIBLE], it's\nnot good, so you want a compile optimizer to kind of\nproduce the same result that",
    "start": "2446870",
    "end": "2451990"
  },
  {
    "text": "you got without optimizing. And this is why this has\nto be [UNINTELLIGIBLE].",
    "start": "2451990",
    "end": "2457070"
  },
  {
    "text": "So first, I want to go through\na little bit of example, what kind of things the\ncompiler do. You probably have seen this in\none of the earlier lectures.",
    "start": "2457070",
    "end": "2465290"
  },
  {
    "text": "We talked about some of this as\nhand optimizations, but I'm going to go through some of them\nby using this program.",
    "start": "2465290",
    "end": "2470694"
  },
  {
    "start": "2470695",
    "end": "2476380"
  },
  {
    "text": "It doesn't mean anything\nwhat I'm doing here. I have a loop here. I'm calculating some\nfunction in here.",
    "start": "2476380",
    "end": "2481880"
  },
  {
    "text": "And then I am adding something\nelse to this x here, and I have some initializations in\nhere, just something that I",
    "start": "2481880",
    "end": "2489640"
  },
  {
    "text": "can demonstrate what it does. So it has no meaning\nfor this one. And here's the assembly\ninstructions.",
    "start": "2489640",
    "end": "2496050"
  },
  {
    "text": "I'm not going to go through\nassembly, but [UNINTELLIGIBLE] you can actually create and\nunderstand why this is",
    "start": "2496050",
    "end": "2501720"
  },
  {
    "text": "happening in [INAUDIBLE]. So I [UNINTELLIGIBLE]\ninto two slides.",
    "start": "2501720",
    "end": "2507710"
  },
  {
    "text": "The first thing you can do is\nthink of constant propagation. So what it says is for all\npossible executions, if a",
    "start": "2507710",
    "end": "2517180"
  },
  {
    "text": "value that has in a variable is\nthe same, and we know that value, that's a constant.",
    "start": "2517180",
    "end": "2523220"
  },
  {
    "text": "And I don't have to keep that\nvalue in that variable. I can replace that\nwith a constant. ",
    "start": "2523220",
    "end": "2532590"
  },
  {
    "text": "Sometimes, when you look at\ndataflow optimization, you can say this is done. As a programmer, I will\nnever do that.",
    "start": "2532590",
    "end": "2538329"
  },
  {
    "text": "This is something you should\nbe doing, for example, have things like constant variables\nthat constant values or lower.",
    "start": "2538330",
    "end": "2544100"
  },
  {
    "text": "But sometimes, something looks\ndumb, but what happens is sometimes when you're in\noptimization does, one",
    "start": "2544100",
    "end": "2549190"
  },
  {
    "text": "optimization might lead to\ncode that looks like. That can lead to it. I will show you something\nsometimes that you might not",
    "start": "2549190",
    "end": "2556290"
  },
  {
    "text": "find a code that looks dumb, but\nprevious optimization will leave, or change the code in a\nway that this optimization can",
    "start": "2556290",
    "end": "2562819"
  },
  {
    "text": "take advantage of. So nice thing about this is you\ndon't need to keep values",
    "start": "2562820",
    "end": "2569150"
  },
  {
    "text": "in the variables because you can\nfree some variable, that means free RAM registers. Also, most of the time when you\ndo constant propagation it",
    "start": "2569150",
    "end": "2576456"
  },
  {
    "text": "leads to [UNINTELLIGIBLE]\noptimizations. So in this program what are\nthe things that can be",
    "start": "2576456",
    "end": "2582319"
  },
  {
    "text": "constant propagated? So we know x equals 0, x's are\nconstant up to this point.",
    "start": "2582320",
    "end": "2589700"
  },
  {
    "text": "But since x get modified here,\nmy dataflow say wait a minute,",
    "start": "2589700",
    "end": "2596760"
  },
  {
    "text": "I am going through this loop,\nand x is constant from here to here. But after this point, x is not\nconstant because it get",
    "start": "2596760",
    "end": "2604230"
  },
  {
    "text": "modified in here. So that's what dataflow is\ngoing to say, and so I can't do that x.",
    "start": "2604230",
    "end": "2609539"
  },
  {
    "text": "But [UNINTELLIGIBLE] why it become constant here? All input that goes into this\nloop, has to go through here,",
    "start": "2609540",
    "end": "2615760"
  },
  {
    "text": "becomes constant\nin every path. And then it doesn't get modified\nin this loop at all.",
    "start": "2615760",
    "end": "2621900"
  },
  {
    "text": "OK, so then I can actually,\nthrough constant propagation, get to the file.",
    "start": "2621900",
    "end": "2627650"
  },
  {
    "text": "OK, so now I have a\nprogram like that. So normal compiler optimization\nis done by",
    "start": "2627650",
    "end": "2632880"
  },
  {
    "text": "pass-by-pass. A lot of passes get repeated\nmultiple times, so I leave it like this. So even though this is just\nsimple thing, but we leave it",
    "start": "2632880",
    "end": "2641360"
  },
  {
    "text": "to somebody else to optimize\nthat, which is what we call algebraic simplification. Basically, it says you go to\nyour, whatever, fourth grade,",
    "start": "2641360",
    "end": "2649460"
  },
  {
    "text": "fifth grade, sixth grade\nalgebra book-- I don't know where you learn,\nsomewhere you learned algebraic --and they have all\nthese very simple rules, like",
    "start": "2649460",
    "end": "2658180"
  },
  {
    "text": "something multiplied by 0 is 0,\nmultiply 1 by that, and all of those rules, and then you can\njust busy code them up and",
    "start": "2658180",
    "end": "2664030"
  },
  {
    "text": "look for these patterns\nand replace. And that's what the\ncompiler does. And in fact, we look at\nsomething like this, a simple",
    "start": "2664030",
    "end": "2670980"
  },
  {
    "text": "shape, but you saw before\nthat, it do much more complicated things. And it's a lot less work at\nrun-time, and also it leads to",
    "start": "2670980",
    "end": "2678730"
  },
  {
    "text": "more optimization, so it can\nsimplify things in here. And other thing is, sometimes\ninstead of algebraic",
    "start": "2678730",
    "end": "2686550"
  },
  {
    "text": "simplification, kind\nof weird things. If you want exact precise, for\nexample if you're doing",
    "start": "2686550",
    "end": "2694100"
  },
  {
    "text": "floating point, because floating\npoint, a plus b plus c, is not b plus c plus a, are\ndifferent because you can get",
    "start": "2694100",
    "end": "2704660"
  },
  {
    "text": "small teeny differences\nin these kind of-- [UNINTELLIGIBLE]",
    "start": "2704660",
    "end": "2710670"
  },
  {
    "text": "and associate duty, and\nsome people care. Most people don't because it's\nso small, most people, they don't care.",
    "start": "2710670",
    "end": "2716240"
  },
  {
    "text": "Others do. And also sometimes when you do\nthis optimization, things like overflow and underflow, that\nhappens because if I do x plus",
    "start": "2716240",
    "end": "2724310"
  },
  {
    "text": "x minus x, or x is very large,\nx plus x minus overflow, and",
    "start": "2724310",
    "end": "2730340"
  },
  {
    "text": "then you end of doing minus\nx because it overflows. But instead of x plus x minus\nx, it's just x, you don't",
    "start": "2730340",
    "end": "2736119"
  },
  {
    "text": "overflow anymore. So you have changed the behavior\nof the program, but most of the time, compilers\nthink that things like that",
    "start": "2736120",
    "end": "2742420"
  },
  {
    "text": "are special cases. They are not the normal\nbehavior, so changing them is",
    "start": "2742420",
    "end": "2748700"
  },
  {
    "text": "probably OK. Sometimes, you can't\ndo anything. So now here, what are algebraic",
    "start": "2748700",
    "end": "2755400"
  },
  {
    "text": "simplification I can do? ",
    "start": "2755400",
    "end": "2765640"
  },
  {
    "text": "What can I do here? ",
    "start": "2765640",
    "end": "2773319"
  },
  {
    "text": "Yeah, I multiply by 0,\n[UNINTELLIGIBLE] this, that. At 0, I leave it here, and then\nthere's another algebraic",
    "start": "2773320",
    "end": "2778880"
  },
  {
    "text": "simplification, I can do that,\nbut now, I am leaving it here because there's no algebraic\nsimplification.",
    "start": "2778880",
    "end": "2784960"
  },
  {
    "text": "X equals x is-- there's nothing you can do. That's called copy\npropagation.",
    "start": "2784960",
    "end": "2790530"
  },
  {
    "text": "Copy propagation says you're\njust making a copy of one value to another, just\nget another copy.",
    "start": "2790530",
    "end": "2795940"
  },
  {
    "text": "You don't need to do a copy. Very simple thing in here. Less instructions, less\nmemory registers because we are not copying.",
    "start": "2795940",
    "end": "2802180"
  },
  {
    "text": "However, when we\n[UNINTELLIGIBLE] register location, I will\ntalk, basically.",
    "start": "2802180",
    "end": "2807410"
  },
  {
    "text": "If I use the same register now,\nI might have things that was in two registers, x copied\nto y, now it's all in x.",
    "start": "2807410",
    "end": "2815300"
  },
  {
    "text": "So that means I might have some\nvariable in the register that you call my interference\ngraph.",
    "start": "2815300",
    "end": "2822850"
  },
  {
    "text": "I'll talk about this in a little\nwhile, so I'm just forward referencing. That might not be easily\nregister locatable.",
    "start": "2822850",
    "end": "2831440"
  },
  {
    "text": "And so in here, x equals x. I can get rid of that. And another interesting thing\nis common subexpression",
    "start": "2831440",
    "end": "2836839"
  },
  {
    "text": "elimination. If you do the same thing\nmultiple times, you calculate it once, less computation, Cons\nis you need to keep this",
    "start": "2836840",
    "end": "2843550"
  },
  {
    "text": "result somewhere between\nthe two users. So if I have too many of these\nthings, I might just run out",
    "start": "2843550",
    "end": "2848700"
  },
  {
    "text": "of registers to keep these\nvalues calculated. And also interesting thing is,\nthis can hinder things like",
    "start": "2848700",
    "end": "2854340"
  },
  {
    "text": "parallelization. When we get there, we can see\nthat by adding additional dependencies in there.",
    "start": "2854340",
    "end": "2860050"
  },
  {
    "text": "So in here, what are the\ncommon expressions? ",
    "start": "2860050",
    "end": "2870813"
  },
  {
    "text": "Either you guys are bored, or\nthis slide is way too hard. You're bored?",
    "start": "2870813",
    "end": "2876340"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: y plus 1, OK, good. So there's y plus 1 in here, and\nI can calculate it once,",
    "start": "2876340",
    "end": "2882020"
  },
  {
    "text": "and then I can just do the\nmultiplication of that, and do that, and voila. It got rid of two addition and\none multiplication to one",
    "start": "2882020",
    "end": "2891000"
  },
  {
    "text": "addition and one\nmultiplication. OK, next thing is dead\ncode elimination.",
    "start": "2891000",
    "end": "2896290"
  },
  {
    "text": "So if you're doing something\nthat nobody's using the value, why do you do it? And less computation, and maybe\nyou release storage",
    "start": "2896290",
    "end": "2904860"
  },
  {
    "text": "because you're not storing these\nvalues your computing, and that's really nice. And there's not much of bad\nthings about dead code.",
    "start": "2904860",
    "end": "2912740"
  },
  {
    "text": "Dead code is pretty dead. You can get rid of it. So here, what are the\ndead code you have? ",
    "start": "2912740",
    "end": "2921310"
  },
  {
    "text": "I want keep you at least\nsomewhat engaged, so see if you can find my dead code.",
    "start": "2921310",
    "end": "2927116"
  },
  {
    "text": "AUDIENCE: y. PROFESSOR: y, yeah. I got rid of [UNINTELLIGIBLE]. Now, I don't need it, I can just\nget rid of that, and then",
    "start": "2927116",
    "end": "2932340"
  },
  {
    "text": "I can even get rid\nof allocating y. So I got rid of both instruction\nand some memory-allocated registry that\nused to keep that value there.",
    "start": "2932340",
    "end": "2941829"
  },
  {
    "text": "Another interesting thing you\ncan do is loop invariant code [UNINTELLIGIBLE] because loops\nare very important. Most of execution time is mainly\ninside loops, so if you",
    "start": "2941830",
    "end": "2949640"
  },
  {
    "text": "can get something out of a\nloop, that's really good. We talked about that\npreviously.",
    "start": "2949640",
    "end": "2955360"
  },
  {
    "text": "But you have to worry about,\nbasically, two things. One thing is that when you move\ntoo many things out of",
    "start": "2955360",
    "end": "2962869"
  },
  {
    "text": "the loops, you have to keep all\nthose values in registers, so that means you need more\nregisters inside the loop.",
    "start": "2962870",
    "end": "2968420"
  },
  {
    "text": "Second thing is when you execute\nthat, you have to make sure that it have the\nsame behavior as",
    "start": "2968420",
    "end": "2976270"
  },
  {
    "text": "when you run the program. How about special cases, the\nloop never get executed. ",
    "start": "2976270",
    "end": "2985380"
  },
  {
    "text": "First let's look at this. What other loop invariant\nexpressions in here? AUDIENCE: [INAUDIBLE].",
    "start": "2985380",
    "end": "2991650"
  },
  {
    "text": "PROFESSOR: Hm? AUDIENCE: 4 times\n[INAUDIBLE]-- PROFESSOR: 4 times eta\na divided by b. OK, good, I just\nmoved up there.",
    "start": "2991650",
    "end": "2998369"
  },
  {
    "text": "So I did that, but why\nam I really wrong? Why won't the compiler\ndo this?",
    "start": "2998370",
    "end": "3005040"
  },
  {
    "text": " Give me a case that this would\nchange the program behavior.",
    "start": "3005040",
    "end": "3011630"
  },
  {
    "start": "3011630",
    "end": "3026450"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE].  PROFESSOR: 4 times overflow,\nyeah, that can happen.",
    "start": "3026450",
    "end": "3033800"
  },
  {
    "text": "That's one case, but there's\nsomething that can happen-- overflow happens in very large\nnumbers, people don't care",
    "start": "3033800",
    "end": "3040220"
  },
  {
    "text": "that much, but there's\nsomething that can happen a lot more. AUDIENCE: If B is 0, and\nthen N is less than 0?",
    "start": "3040220",
    "end": "3046090"
  },
  {
    "text": "PROFESSOR: Exactly, when B[0] and N is less than 0. I am going to have a divide by\n0 error in here because I am",
    "start": "3046090",
    "end": "3054860"
  },
  {
    "text": "going here, dividing by 0. That would have never happened\nbecause the loop wouldn't have gone and executed it.",
    "start": "3054860",
    "end": "3060970"
  },
  {
    "text": "So normally, when you do things\nlike that in a loop, the compiler generate a place\ncalled a landing pad, which",
    "start": "3060970",
    "end": "3068660"
  },
  {
    "text": "basically is, before you enter\nthe loop, you check whether the loop will ever\nget executed.",
    "start": "3068660",
    "end": "3075340"
  },
  {
    "text": "And then go to the landing pad,\nand then go to the loop. So the landing pad will be run\nonly when the loop at least",
    "start": "3075340",
    "end": "3081430"
  },
  {
    "text": "has one iteration running, and\nso you can move all those thing in the landing pad. So here, you can see there's\nno landing pad.",
    "start": "3081430",
    "end": "3086960"
  },
  {
    "text": "The code generated probably\nwould have, and so I did something that is, you would\nsee in fact, the optimized",
    "start": "3086960",
    "end": "3093800"
  },
  {
    "text": "code I did didn't do that. So GCC minus [UNINTELLIGIBLE]\nis smart enough not to do this.",
    "start": "3093800",
    "end": "3100320"
  },
  {
    "text": "So then there's another type of\nstrength reduction, which is saying if I go something like\na times i, what I can do",
    "start": "3100320",
    "end": "3110170"
  },
  {
    "text": "is just, instead of doing a\ntimes i, I can basically make",
    "start": "3110170",
    "end": "3115290"
  },
  {
    "text": "the first iteration initialize\nit, and every time you can update the previous value. OK, so array times i, the first\nit's 0 and next time",
    "start": "3115290",
    "end": "3123330"
  },
  {
    "text": "it'll be t plus 80 plus this,\nso I can keep updating that. OK, so this is really good. I have this computation because\nnow we just sort of",
    "start": "3123330",
    "end": "3130710"
  },
  {
    "text": "multiply, I just made it add. But I have a lot of problems\nthat can happen here. First of all, I have,\nnow, this one.",
    "start": "3130710",
    "end": "3138200"
  },
  {
    "text": "I didn't have to keep this\nvalue anywhere, only when I needed it. In here, this value has to be\nvaried through out the entire",
    "start": "3138200",
    "end": "3144730"
  },
  {
    "text": "loop because I keep updating\nthat value, so I created another need for a register.",
    "start": "3144730",
    "end": "3150069"
  },
  {
    "text": "Before now, I only needed\nit at that point. I could've [UNINTELLIGIBLE],\nrarely used it, but now it just to be there throughout\nthe program",
    "start": "3150070",
    "end": "3155930"
  },
  {
    "text": "I created in there. Also what I fear is what they\ncall a loop-carried dependence.",
    "start": "3155930",
    "end": "3161260"
  },
  {
    "text": "Every time you run iteration,\nyou use the previous iteration's value. When we go into a parallelizing\nloop, you",
    "start": "3161260",
    "end": "3167839"
  },
  {
    "text": "suddenly realize that means I\ncan't run them parallel, so this creates a huge problem\nin parallelization. So you do [UNINTELLIGIBLE],\nstrength increase, when you go",
    "start": "3167840",
    "end": "3176770"
  },
  {
    "text": "to parallelize. And you can undo these things. So in here, one thing you can\ndo is you look at something",
    "start": "3176770",
    "end": "3182890"
  },
  {
    "text": "like u times i and say wait\na minute, I don't have to multiply by i because\nit [UNINTELLIGIBLE] 0 like this, and I can just\nallocate a value b and keep it",
    "start": "3182890",
    "end": "3192220"
  },
  {
    "text": "updating by v, and then I did\nthat, allocated a variable in here, allocated 0. And [UNINTELLIGIBLE] this, I\njust basically put v times 0.",
    "start": "3192220",
    "end": "3200960"
  },
  {
    "text": "You see that? I just basically got rid of a\nmultiplication and convert it into addition, but I paid some\ncost by, I need now this",
    "start": "3200960",
    "end": "3208990"
  },
  {
    "text": "additional register\nthat is true all throughout the entire thing. [UNINTELLIGIBLE] I just calculated\nthat expression.",
    "start": "3208990",
    "end": "3214610"
  },
  {
    "text": " And the big thing a lot you\nget performances register",
    "start": "3214610",
    "end": "3221650"
  },
  {
    "text": "allocation, so most processes\nhave very few registers. In fact, one big change that\nwhen you went from",
    "start": "3221650",
    "end": "3227160"
  },
  {
    "text": "[UNINTELLIGIBLE] is to get additional\nregisters. Registers are very important. ",
    "start": "3227160",
    "end": "3235740"
  },
  {
    "text": "I will go through register\nlocation a little bit. So what happens is when you\nhave a program, you have a",
    "start": "3235740",
    "end": "3241870"
  },
  {
    "text": "control goes like this. So this control going, executing\nsomething that defines this variable x,\ndefines variable y.",
    "start": "3241870",
    "end": "3248840"
  },
  {
    "text": "And here, you use variable x and\nvariable y, and there are different paths the program\ncan go through. There are two paths can merge\nin here, here, you",
    "start": "3248840",
    "end": "3256110"
  },
  {
    "text": "can expand in here. So this is kind of the flow of\nthe program in a small part.",
    "start": "3256110",
    "end": "3261220"
  },
  {
    "text": "So what you can say is this\ndefinition [UNINTELLIGIBLE] here, so this value, this\nline in between here--",
    "start": "3261220",
    "end": "3267610"
  },
  {
    "text": "because you can't\nget rid of it. When you decided you had to\nkeep it somewhere because somebody's going to\n[UNINTELLIGIBLE]. And this definition is used\nhere, so when you decided you",
    "start": "3267610",
    "end": "3275220"
  },
  {
    "text": "had to be [UNINTELLIGIBLE]\nin here. When you [UNINTELLIGIBLE] is only used here. Nobody uses here, so this has\nto be [UNINTELLIGIBLE].",
    "start": "3275220",
    "end": "3283670"
  },
  {
    "text": "Interesting thing about x is\nthere are two definitions of x that might be used here, and\nthis definition might be used",
    "start": "3283670",
    "end": "3289589"
  },
  {
    "text": "here or here. So you put all this into what\nthey call a one web because",
    "start": "3289590",
    "end": "3296230"
  },
  {
    "text": "these two definitions might-- either one of them will\nbe used here. This definition will be used,\neither one, over here, so this",
    "start": "3296230",
    "end": "3302070"
  },
  {
    "text": "value has to be [UNINTELLIGIBLE] in here, kept somewhere. So then what we say is we\ngive names to these,",
    "start": "3302070",
    "end": "3310430"
  },
  {
    "text": "so this is s1, s2. Somebody has to keep\nthis value. s2 keeps this value, s3\nkeeps this value,",
    "start": "3310430",
    "end": "3315820"
  },
  {
    "text": "s4 keeps this value. The interesting thing is how\nmany registers you need to",
    "start": "3315820",
    "end": "3321039"
  },
  {
    "text": "keep all those values. That's why the entire thing\nof register allocation. So what you do is this really\ncute mapping of this into nice",
    "start": "3321040",
    "end": "3330430"
  },
  {
    "text": "theoretical problem. So what you can say is each of\nthese regions, we make it",
    "start": "3330430",
    "end": "3336799"
  },
  {
    "text": "vertex of a graph.  If these regions overlap,\nthen we get edge.",
    "start": "3336800",
    "end": "3344450"
  },
  {
    "text": "S1 and s2 overlap. That means you can't use the\nsame register to keep s1 one",
    "start": "3344450",
    "end": "3351250"
  },
  {
    "text": "and s2 because before s1 is\nfinished using, s2 has to be",
    "start": "3351250",
    "end": "3356750"
  },
  {
    "text": "free of that. OK, there's overlap in here, so\nwe've created edge in here.",
    "start": "3356750",
    "end": "3362400"
  },
  {
    "text": "OK, s2 and s3. So s2 and s3 overlaps here\nbecause at this point, both",
    "start": "3362400",
    "end": "3367530"
  },
  {
    "text": "value s2 and s3 has\nto be kept. So I create an edge in here. OK, so I create an edge.",
    "start": "3367530",
    "end": "3373550"
  },
  {
    "text": "Every time I say\nthose do values need separate registers. I can't keep the\nsame register.",
    "start": "3373550",
    "end": "3379020"
  },
  {
    "text": "And of course, s3 and s4. s3 is here. s4 can be in the\nsame register.",
    "start": "3379020",
    "end": "3386150"
  },
  {
    "text": "So there's no edge here. os1 and s4 can be in\nthe same register. os2 and s4 can be in the same\nregister because they are not",
    "start": "3386150",
    "end": "3393260"
  },
  {
    "text": "live at the same time. They are live at a different\ntime of the program execution.",
    "start": "3393260",
    "end": "3398950"
  },
  {
    "text": "Now, what you can do is, you\nhave a graph, you have edges, and there's this very famous\nproblem called",
    "start": "3398950",
    "end": "3405750"
  },
  {
    "text": "graph coloring problem. How many heard of graph\ncoloring problem? OK, good. So what happens is now we can\nfigure out how many colors",
    "start": "3405750",
    "end": "3413420"
  },
  {
    "text": "need to color this graph, and\nthat is the number of colors of the number of registers\nyou need. So if you have a graph like this\nwith no edges, you can",
    "start": "3413420",
    "end": "3424710"
  },
  {
    "text": "color it with one color. How many colors for this one?",
    "start": "3424710",
    "end": "3429816"
  },
  {
    "text": "Two colors. How many colors for this one? ",
    "start": "3429816",
    "end": "3435280"
  },
  {
    "text": "People said two colors. Yes, you can color it\nwith two colors. How many colors for this one? ",
    "start": "3435280",
    "end": "3441780"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: It's three-color\n[UNINTELLIGIBLE]. So there's all these algorithms\n[UNINTELLIGIBLE]",
    "start": "3441780",
    "end": "3447940"
  },
  {
    "text": "and say no. You can see by coloring this\nhow many registers I need. And the interesting is, if you\nneed more colors than the",
    "start": "3447940",
    "end": "3456220"
  },
  {
    "text": "register you have, that means\nyou can't register allocate, and at that point, you need\ntoo many things to keep.",
    "start": "3456220",
    "end": "3461380"
  },
  {
    "text": "You don't have that many\nregisters and that [UNINTELLIGIBLE]. That means you take edge and\nsay, ah-hah, I can't keep both",
    "start": "3461380",
    "end": "3467790"
  },
  {
    "text": "of these guys in the same. I will take some vertex out and\nsay this vertex can't be",
    "start": "3467790",
    "end": "3473355"
  },
  {
    "text": "in there because I can't put\nit into register, and I spill this out. And you can re-color\nthe graphs. You can spill it, and of course,\nspilling is costly",
    "start": "3473355",
    "end": "3479960"
  },
  {
    "text": "because now [UNINTELLIGIBLE]\nvalue in the register, it's in the memory, so every time you\nneed it, you had to bring it back, send it back, so it's\ngoing to be expensive.",
    "start": "3479960",
    "end": "3488110"
  },
  {
    "text": "The nice thing is to\nsee how much you can keep in the register. So I have enough registers for\nthis program, so I found",
    "start": "3488110",
    "end": "3495230"
  },
  {
    "text": "registers for all these\nthings instead of putting it in memory. And now, this is\n[UNINTELLIGIBLE] register allocation in a pseudo\nC code, so this is the",
    "start": "3495230",
    "end": "3504080"
  },
  {
    "text": "kind of optimized code, and\nthis is the generated-- Basically, all four of the\noriginal program generated.",
    "start": "3504080",
    "end": "3511000"
  },
  {
    "text": "But in here, I move\nthis one up. But in this one, actually, the\ndivision didn't get moved up,",
    "start": "3511000",
    "end": "3518420"
  },
  {
    "text": "so [UNINTELLIGIBLE] actually\ninside the loop because it's realized you can't do that. But interestingly moved the\nmultiplication out, so that it",
    "start": "3518420",
    "end": "3526190"
  },
  {
    "text": "didn't care about\nthe overflow. It says, hey, overflow, it can\nhave an overflow, but it will",
    "start": "3526190",
    "end": "3532109"
  },
  {
    "text": "worry more about divide by 0. OK?",
    "start": "3532110",
    "end": "3537590"
  },
  {
    "text": "Any questions so far? ",
    "start": "3537590",
    "end": "3544210"
  },
  {
    "text": "So here's the optimized code,\nand if you run it, there's seconds versus 54 seconds. Just GCC [UNINTELLIGIBLE]",
    "start": "3544210",
    "end": "3550740"
  },
  {
    "text": "0, GCC os, so it'll produce very\ncompact optimized code.",
    "start": "3550740",
    "end": "3558369"
  },
  {
    "text": "So the key thing is what's\n[UNINTELLIGIBLE] these optimizations. The key thing is you have to\nguarantee, when you optimize,",
    "start": "3558370",
    "end": "3567060"
  },
  {
    "text": "all that these programs\n[UNINTELLIGIBLE] from unoptimized, optimized, all\nthe valid input, all the",
    "start": "3567060",
    "end": "3573802"
  },
  {
    "text": "valid execution, and all valid\narchitecture that you're supposed to run, you can't\ndo the same thing. Otherwise, it's not a good\noptimizer if it does different",
    "start": "3573802",
    "end": "3580340"
  },
  {
    "text": "things to code. So there are a lot of things\nthat means you have to be very conservative in [UNINTELLIGIBLE] cases.",
    "start": "3580340",
    "end": "3585599"
  },
  {
    "text": "So you have to understand both\ncontrol-flow and data accesses, and make sure that\nyou understand them, and if",
    "start": "3585600",
    "end": "3592630"
  },
  {
    "text": "any of them, the compile-time\nanalysis cannot understand, the compiler give\nup very fast.",
    "start": "3592630",
    "end": "3599170"
  },
  {
    "text": "So the thing is, most of the\ntime if that information is not available, compilers reduce\nthe scope of the region",
    "start": "3599170",
    "end": "3607300"
  },
  {
    "text": "[UNINTELLIGIBLE] the transformation. So we have this point, I\ndon't know beyond that. I can only do a small amount\nof transformations here.",
    "start": "3607300",
    "end": "3612820"
  },
  {
    "text": "Or reduce the aggressiveness\nof transformations, and sometimes just completely leave\ncode alone as it is",
    "start": "3612820",
    "end": "3618610"
  },
  {
    "text": "because it couldn't, even the\nthings you know, no sane program would do, and\nof course, your",
    "start": "3618610",
    "end": "3624290"
  },
  {
    "text": "code will never do. The compiler assume,\nif it is a valid C semantics, it might happen.",
    "start": "3624290",
    "end": "3630270"
  },
  {
    "text": "Even though some of them\nlooked really crazy. If it is a valid possible way\nof doing it, compiler has to",
    "start": "3630270",
    "end": "3635450"
  },
  {
    "text": "worry about it, and\nnot do that. So it's here to be\ncareful of that. So first of all, control-flow.",
    "start": "3635450",
    "end": "3641630"
  },
  {
    "text": "That means it doesn't work on\npossible paths of the program when you execute that. And the way you look at this,\nyou can add this call graphs",
    "start": "3641630",
    "end": "3649720"
  },
  {
    "text": "in the high-level\n[UNINTELLIGIBLE] the call in here, and control-flow graphs\nwithin the metadata function how control goes from.",
    "start": "3649720",
    "end": "3657140"
  },
  {
    "text": "And what makes it hard for\ncompiler to analysis this? Bunch of things [UNINTELLIGIBLE] function pointers.",
    "start": "3657140",
    "end": "3662300"
  },
  {
    "text": "You probably haven't done\nfunction pointers, but if you have function pointers in the\ncompiler concepts, I don't know where it's going.",
    "start": "3662300",
    "end": "3667380"
  },
  {
    "text": "I have to be very careful. Indirect branches. so I keep addresses somewhere\nin that branch, so that I",
    "start": "3667380",
    "end": "3673480"
  },
  {
    "text": "don't know where it's going. Something computed go\nto [UNINTELLIGIBLE]. Large switch statement.",
    "start": "3673480",
    "end": "3679240"
  },
  {
    "text": "It's just spaghetti code. We have no idea where it would\nend up and compile at us, and we can't get anywhere in\nthis switch statement. Either [UNINTELLIGIBLE] you\nmight know some order of going",
    "start": "3679240",
    "end": "3686190"
  },
  {
    "text": "through that, it doesn't work. If you are looped with\n[UNINTELLIGIBLE] breaks and very complex things\nin the compiler, sometimes",
    "start": "3686190",
    "end": "3692410"
  },
  {
    "text": "it'll give up. When the loop bounds are\nunknown, you'd assume it could be anything. Whereas when loop bounds are\nknown, as you saw in the first",
    "start": "3692410",
    "end": "3700210"
  },
  {
    "text": "set of examples, you can take\nadvantages a lot more, and you can do a lot more aggressive\nthings, or not care about",
    "start": "3700210",
    "end": "3707390"
  },
  {
    "text": "cases because I know that. But in this unknown loop bounds,\nyou have to be a lot more careful of that.",
    "start": "3707390",
    "end": "3713700"
  },
  {
    "text": "And conditions where branch\nis not analyzable. So if you have branch condition,\nif you don't know what's happening in the branch,\nI might not be able to",
    "start": "3713700",
    "end": "3720390"
  },
  {
    "text": "take advantages or think how\nto do the branch well. So those are the things that\nI have to worry about.",
    "start": "3720390",
    "end": "3727270"
  },
  {
    "text": "The other thing is data\naccessors, so that means who else can read and\nwrite the data.",
    "start": "3727270",
    "end": "3732570"
  },
  {
    "text": "So I am touching the data item,\nand I need to know that,",
    "start": "3732570",
    "end": "3737700"
  },
  {
    "text": "between the two points I am\nlooking at the data, nobody else go and muck with my\ndata, or use my data.",
    "start": "3737700",
    "end": "3743920"
  },
  {
    "text": "Because when I look at the\ndata, [UNINTELLIGIBLE] something, I want to make sure\nthat's the only way that data",
    "start": "3743920",
    "end": "3749460"
  },
  {
    "text": "can be accessed because, as you\nknow, most of the things are in memory. So normally compiler\n[UNINTELLIGIBLE] is called",
    "start": "3749460",
    "end": "3755400"
  },
  {
    "text": "def-use chains, so defined to\nuse, so we say that thing that defined here is going to get\nused here, and nothing comes",
    "start": "3755400",
    "end": "3762540"
  },
  {
    "text": "in between that. And that information is that's\nhow the compiler [UNINTELLIGIBLE]. That's something we call\ndependence vectors.",
    "start": "3762540",
    "end": "3770130"
  },
  {
    "text": "We might talk a little bit about\nthat when you go into parallel execution.",
    "start": "3770130",
    "end": "3775980"
  },
  {
    "text": "So what makes it very hard for\ncompiler to analyze this? For example, address taken\nvariables, so if you write and",
    "start": "3775980",
    "end": "3784030"
  },
  {
    "text": "hack with C, you can say,\nOK, there's a variable. There's a variable here, I'm\ntaking the address of that. Suddenly, that means somebody\nelse has the",
    "start": "3784030",
    "end": "3792250"
  },
  {
    "text": "address to the variable. That means anybody else can\nsuddenly jump in and overwrite you, and there's a lot of\npossibilities of doing that.",
    "start": "3792250",
    "end": "3798250"
  },
  {
    "text": "And suddenly compiler says wait\na minute, that variable, even though I assigned the\nvariable here, I'm using it",
    "start": "3798250",
    "end": "3804390"
  },
  {
    "text": "here, in between. Somebody else might touch it\neven though it might not use the same name because somebody\nhas that address to that.",
    "start": "3804390",
    "end": "3811080"
  },
  {
    "text": "OK, so that's a hard thing. Global variables, sometimes,\nbecause between function, I",
    "start": "3811080",
    "end": "3816730"
  },
  {
    "text": "don't know. Some other function might\ngo and change it. Parameters are really hard.",
    "start": "3816730",
    "end": "3821790"
  },
  {
    "text": "Like for example, remember when\nwe had a program, and we had something like copying same\narray to the same, even",
    "start": "3821790",
    "end": "3826950"
  },
  {
    "text": "though parameters say X and Y.\nI might send the same or overlapping regions into two\ndifferent parameters even",
    "start": "3826950",
    "end": "3833859"
  },
  {
    "text": "though it looks like two\ndifferent names. They're not two different\nthings. They're actually overlapping\nat some point.",
    "start": "3833860",
    "end": "3840000"
  },
  {
    "text": "And so you had to assume, even\nif you have two different parameters point into memory,\nthey might be the same thing.",
    "start": "3840000",
    "end": "3847340"
  },
  {
    "text": "And that's the worst case, even\nthough a lot of times, nobody does that. Nobody gives the same\nthings multiple names, but it's possible.",
    "start": "3847340",
    "end": "3853369"
  },
  {
    "text": "If it is possible, compilers\ndeal with it. Either it has to generate code\nto test all these cases, is it",
    "start": "3853370",
    "end": "3858700"
  },
  {
    "text": "overlapping, if not,\ndo something. If it is overlapping, do\nsomething slower, like the code we showed when you\nare vectorizing.",
    "start": "3858700",
    "end": "3865359"
  },
  {
    "text": "You treat it like this huge\nnumber of different cases, but",
    "start": "3865360",
    "end": "3872640"
  },
  {
    "text": "unless you do something like\nthat, you can't optimize, and complex programs, it's\nvery hard to do that. A lot of times, pointers create\nissues in here because",
    "start": "3872640",
    "end": "3882750"
  },
  {
    "text": "the problem with pointers is\nwhat you call it point aliasing, because pointers,\nyou can add any value to a",
    "start": "3882750",
    "end": "3888150"
  },
  {
    "text": "pointer and you have no idea if\nyou had a very large value. It can be anywhere in memory\nbecause if you have a pointer,",
    "start": "3888150",
    "end": "3894750"
  },
  {
    "text": "you have a point in the\nmemory you can add anything, subtract anything. The world is yours, and C gives\nyou this ability to go",
    "start": "3894750",
    "end": "3902010"
  },
  {
    "text": "all over the world and kind of\nmapping the world, and some programs do that.",
    "start": "3902010",
    "end": "3907230"
  },
  {
    "text": "And so the compiler says,\noh, it's a point. I don't know where it is. I just have to leave it alone\nbecause some guy, probably",
    "start": "3907230",
    "end": "3913110"
  },
  {
    "text": "0.001% of the world programmers\nwill do something crazy, and everybody has\nto pay the price.",
    "start": "3913110",
    "end": "3919410"
  },
  {
    "text": "So this is what makes\nprogramming hard. And the final thing is there's\na thing called [UNINTELLIGIBLE] types.",
    "start": "3919410",
    "end": "3925570"
  },
  {
    "text": "When you go to parallel\nprogramming you realize, because normally compilers\nkeep normal",
    "start": "3925570",
    "end": "3932109"
  },
  {
    "text": "values are in the memory. Compiler can [UNINTELLIGIBLE]\nthe value into register and",
    "start": "3932110",
    "end": "3937250"
  },
  {
    "text": "keep operating in the register,\nand at some point, put it back to memory. But if you're running a parallel\nprogram, somebody",
    "start": "3937250",
    "end": "3943770"
  },
  {
    "text": "else might want to look at that\nvalue, and if it isn't registered, you don't have that\nvalue in the right place.",
    "start": "3943770",
    "end": "3948910"
  },
  {
    "text": "It's somewhere else, so you get\na stale copy because you have moved it. What I'm trying to say is, look,\nyou have to always keep",
    "start": "3948910",
    "end": "3954855"
  },
  {
    "text": "it in memory. You can't take it out. You can't just modify it, but\nyou can move it somewhere else the faster place to do things\nto it because somebody else",
    "start": "3954855",
    "end": "3963970"
  },
  {
    "text": "might be looking at it. And so what that means is\ncompilers give up it's hands and say, look, I can't\ndo anything. ",
    "start": "3963970",
    "end": "3971970"
  },
  {
    "text": "So we are a little bit early. I have yet another huge\nsession in here at--",
    "start": "3971970",
    "end": "3977579"
  },
  {
    "text": "OK, we have to go through\nthis thing. Good. I think now we are going to go\nabout and see how you guys did",
    "start": "3977580",
    "end": "3988510"
  },
  {
    "text": "in the class exam. OK. And I'm seeing it for the\nfirst time, and it looks",
    "start": "3988510",
    "end": "3994000"
  },
  {
    "text": "really nice. Where do you plug this in? Where do you plug this in? ",
    "start": "3994000",
    "end": "4011890"
  },
  {
    "text": "OK, so here is the distribution\nin there.",
    "start": "4011890",
    "end": "4018440"
  },
  {
    "text": "This was not an easy exam, and\nin fact, we compared how you guys did last year, and you guys\nhave done a lot better",
    "start": "4018440",
    "end": "4024990"
  },
  {
    "text": "than I think the first\nexam in last year. So basically, we have a median\nabout 70, somewhere here, and",
    "start": "4024990",
    "end": "4035080"
  },
  {
    "text": "a nice tight grouping in here,\nwhich is really good. And so what we have is,\nwe have exams back.",
    "start": "4035080",
    "end": "4045840"
  },
  {
    "text": "Take a look. And I think-- GUEST SPEAKER: I'd like to\nmake one comment about",
    "start": "4045840",
    "end": "4052760"
  },
  {
    "text": "[INAUDIBLE]. PROFESSOR: OK, sure. ",
    "start": "4052760",
    "end": "4060114"
  },
  {
    "text": "GUEST SPEAKER: [INAUDIBLE]. ",
    "start": "4060114",
    "end": "4071950"
  },
  {
    "text": "So not surprisingly, I graded\nthe problem on the cache",
    "start": "4071950",
    "end": "4082859"
  },
  {
    "text": "oblivious algorithm doing\nthe recursion tree. There is a common mistake that\nmany people made, which I",
    "start": "4082860",
    "end": "4095529"
  },
  {
    "text": "wanted to explain why it's wrong\nbecause so many people made this mistake.",
    "start": "4095530",
    "end": "4100880"
  },
  {
    "text": "They got it almost all\nright, and then they made this mistake. So it's basically an\nunderstanding of recurrence.",
    "start": "4100880",
    "end": "4108600"
  },
  {
    "text": "So the recurrences I recall was\nq of r is equal to square root of r over b if square root\nof r is less than CM for",
    "start": "4108600",
    "end": "4131823"
  },
  {
    "text": "C, et cetera. OK? And then otherwise, it was 2q\nof r over 2 plus theta 1.",
    "start": "4131824",
    "end": "4142278"
  },
  {
    "text": " Now, what people did in\ntheir recursion tree--",
    "start": "4142279",
    "end": "4149299"
  },
  {
    "text": "first of all, some people didn't\nrecognize that what goes in the recursion tree is\nthis value, the number of",
    "start": "4149300",
    "end": "4154890"
  },
  {
    "text": "cache misses. So the recursion tree is going\nto look like theta 1, or you can leave out the thetas\nif you want to put",
    "start": "4154890",
    "end": "4160680"
  },
  {
    "text": "them in at the end. Theta 1, theta 1, et cetera. So many people got this, and\nthen the question is what",
    "start": "4160680",
    "end": "4168149"
  },
  {
    "text": "happens when it hits the leaf. OK? So when it hits a leaf, many\npeople correctly got that you",
    "start": "4168149",
    "end": "4177009"
  },
  {
    "text": "can't mess around\nwith constants. You have to be very careful of\nconstants if they're in an exponent, that you hit the leaf\nwhen square root of r",
    "start": "4177010",
    "end": "4191689"
  },
  {
    "text": "becomes less than c over m, in\nwhich case the cost is going to be square root of r over b.",
    "start": "4191689",
    "end": "4197059"
  },
  {
    "text": "So what they did was the\nincorrect thing, was they put square root of r over b here.",
    "start": "4197060",
    "end": "4203469"
  },
  {
    "text": "Why is that wrong?  [INTERPOSING VOICES]",
    "start": "4203470",
    "end": "4209500"
  },
  {
    "text": "GUEST SPEAKER: It's\nthe wrong r. Right? ",
    "start": "4209500",
    "end": "4215750"
  },
  {
    "text": "OK, it's the wrong r. This r is the r here on\nthe right-hand side. It's not the one here.",
    "start": "4215750",
    "end": "4220949"
  },
  {
    "text": "It's the r if r is sufficiently\nsmall, that's the value you're taking. But we're expanding an\nr from the top here.",
    "start": "4220950",
    "end": "4229380"
  },
  {
    "text": "So what's the value that\nshould go here? OK, cm is the value that\nshould go here.",
    "start": "4229380",
    "end": "4237310"
  },
  {
    "text": "OK? The value that should\ngo here is cm. ",
    "start": "4237310",
    "end": "4242590"
  },
  {
    "text": "Yes? AUDIENCE: [INAUDIBLE] two r's can actually follow\nthe right-side?",
    "start": "4242590",
    "end": "4249322"
  },
  {
    "text": "And then it's very close to\nwhere they're written the same but are spoken differently. GUEST SPEAKER: Well, when you\nsay-- what do you mean?",
    "start": "4249322",
    "end": "4255640"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. GUEST SPEAKER: There's\nan r here. AUDIENCE: And it's different\nfrom the other r-- GUEST SPEAKER: No,\nit's the same r.",
    "start": "4255640",
    "end": "4261700"
  },
  {
    "text": "The question is there,\nr is a variable. So it'd be nice if the r were\nconstant, but it's not.",
    "start": "4261700",
    "end": "4267600"
  },
  {
    "text": "It's a variable. And so the point is the point\nwhere you plug it in here,",
    "start": "4267600",
    "end": "4272850"
  },
  {
    "text": "you've got to plug in, not the\nvariable, you've got to plug in the value. AUDIENCE: You just said for\nr [UNINTELLIGIBLE].",
    "start": "4272850",
    "end": "4280935"
  },
  {
    "text": "GUEST SPEAKER: It's\na variable. You have to plug in the value of\nthe variable at this point if you're going to solve\nthe recurrence.",
    "start": "4280935",
    "end": "4287260"
  },
  {
    "text": "Putting an r here, we're trying\nto I say, this whole thing is q of r.",
    "start": "4287260",
    "end": "4292489"
  },
  {
    "text": "And we started out, if we did\nthe development of the tree, which is the safest thing to do,\nyou get theta 1 plus q of",
    "start": "4292490",
    "end": "4298510"
  },
  {
    "text": "r over 2, and you keep going\ndown until your value for r",
    "start": "4298510",
    "end": "4304340"
  },
  {
    "text": "satisfies this condition. At that point, what's\nthe value for r?",
    "start": "4304340",
    "end": "4310830"
  },
  {
    "text": "OK? You can't then say it's the same\nr that you started with. It's not this r, and that's\nbecause r is a variable, not",
    "start": "4310830",
    "end": "4319160"
  },
  {
    "text": "because of anything else. r is a variable, and\nwe're using the r. This is a question of\nunderstanding of the",
    "start": "4319160",
    "end": "4325670"
  },
  {
    "text": "recurrence. So in any case, that\nwas a common mistake that people make.",
    "start": "4325670",
    "end": "4331650"
  },
  {
    "text": "The other minor error that\npeople made on that problem, that most people made, was in\ndescribing where do you get",
    "start": "4331650",
    "end": "4340110"
  },
  {
    "text": "this recurrence, they left out\nthe fact is why is it going to",
    "start": "4340110",
    "end": "4345840"
  },
  {
    "text": "be square root of r over b. It's really because na is\napproximately nb because the",
    "start": "4345840",
    "end": "4352420"
  },
  {
    "text": "way that the code works, we're\nkeeping na and nb to within a factor of two of each other.",
    "start": "4352420",
    "end": "4357820"
  },
  {
    "text": "OK? And so if you didn't mention\nthat, you lost a point. It wasn't a big deal, but many\npeople didn't neglect that",
    "start": "4357820",
    "end": "4364640"
  },
  {
    "text": "very important statement. Overall, people did very\nwell on this problem.",
    "start": "4364640",
    "end": "4370400"
  },
  {
    "text": "Overall, you'll see people got a\nlot of partial credit on it. ",
    "start": "4370400",
    "end": "4375760"
  }
]