[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6910"
  },
  {
    "text": "offer high quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "6910",
    "end": "13460"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at",
    "start": "13460",
    "end": "19290"
  },
  {
    "text": "ocw.mit.edu.  PROFESSOR: Good morning,\neverybody.",
    "start": "19290",
    "end": "25660"
  },
  {
    "text": "Let's go back to\nwhere we were. We were talking about abstract\ndata types and the notion of",
    "start": "25660",
    "end": "32619"
  },
  {
    "text": "object oriented programming. ",
    "start": "32619",
    "end": "37710"
  },
  {
    "text": "And in particular, the role\nof classes in all of that. A lot of people think this\nnotion of object oriented",
    "start": "37710",
    "end": "45940"
  },
  {
    "text": "programming is a new notion. In fact, it's not. It's been around for probably\nat least 35",
    "start": "45940",
    "end": "52320"
  },
  {
    "text": "years, maybe even longer. But it's only been widely\npracticed for maybe 15 years.",
    "start": "52320",
    "end": "59230"
  },
  {
    "text": "Even that to most of you will\nseem like a long time. ",
    "start": "59230",
    "end": "64800"
  },
  {
    "text": "It started in the mid 1970s\nwhen people began to write articles explaining this\nadvantage of the approach to",
    "start": "64800",
    "end": "71290"
  },
  {
    "text": "programming. And at about the same time,\nthe language Smalltalk was",
    "start": "71290",
    "end": "77000"
  },
  {
    "text": "developed at Xerox Park and\nCLU developed at MIT.",
    "start": "77000",
    "end": "82710"
  },
  {
    "text": "And they were the first\nlanguages that, in an elegant way, provided linguistic support\nfor this style of",
    "start": "82710",
    "end": "89020"
  },
  {
    "text": "programming. But it didn't really take off\nin the public until the",
    "start": "89020",
    "end": "94090"
  },
  {
    "text": "introduction of Java,\nconsiderably later. And Java was the first popular\nlanguage to support object",
    "start": "94090",
    "end": "100870"
  },
  {
    "text": "oriented programming. After that there was C++, which\nsupports it in not a",
    "start": "100870",
    "end": "106840"
  },
  {
    "text": "very elegant but a usable way. And today probably Python is the\nfastest growing language",
    "start": "106840",
    "end": "112940"
  },
  {
    "text": "supporting object oriented\nprogramming. It's used widely, and\nthat's one of the reasons we teach it here.",
    "start": "112940",
    "end": "118920"
  },
  {
    "text": " As I said, at the bottom of it\nall, the most fundamental",
    "start": "118920",
    "end": "126950"
  },
  {
    "text": "notion is that of an\nabstract data type. ",
    "start": "126950",
    "end": "133920"
  },
  {
    "text": "And the idea is that we can\nextend our programming language by adding user\ndefined types.",
    "start": "133920",
    "end": "140440"
  },
  {
    "text": "And we'll shortly see why that's\nsuch a useful thing. And that these types can be used\njust as easily as any of",
    "start": "140440",
    "end": "147970"
  },
  {
    "text": "the built in types. Why do we call them abstract\ndata types rather than just",
    "start": "147970",
    "end": "154490"
  },
  {
    "text": "data types?  We do that because we are\nessentially going to define",
    "start": "154490",
    "end": "162250"
  },
  {
    "text": "for each type an interface. ",
    "start": "162250",
    "end": "169660"
  },
  {
    "text": "And essentially, what the\ninterface does is it explains",
    "start": "169660",
    "end": "178940"
  },
  {
    "text": "what the methods do.",
    "start": "178940",
    "end": "184860"
  },
  {
    "text": "What do I mean by\nwhat they do? What they do at the level of the\nuser, not how they do it.",
    "start": "184860",
    "end": "195970"
  },
  {
    "start": "195970",
    "end": "202290"
  },
  {
    "text": "That, of course, is the way\nthe built in types work. It wasn't until Tuesday that you\nunderstood how Python made",
    "start": "202290",
    "end": "210019"
  },
  {
    "text": "dicts do what they do. Before then, I just explained,\nthat you could put in a key",
    "start": "210020",
    "end": "216170"
  },
  {
    "text": "and a value, and you could\nlook it up and do an associative retrieval. It was maybe not magic, but it\nwas wonderful that you could",
    "start": "216170",
    "end": "225660"
  },
  {
    "text": "do this and not have to bother\nyour heads with how it was made to work.",
    "start": "225660",
    "end": "231360"
  },
  {
    "text": "And that was because we\nprovided, or the designers of Python provided, an interface\nthat lets you use it.",
    "start": "231360",
    "end": "239510"
  },
  {
    "text": "We'll do the same thing with\nthe abstract data types. The key idea here is one we've\ntalked about before and that's",
    "start": "239510",
    "end": "249180"
  },
  {
    "text": "a specification.  It is the specification of a\ntype, or of a function, or of",
    "start": "249180",
    "end": "258720"
  },
  {
    "text": "a method, that tells us\nwhat that thing does.",
    "start": "258720",
    "end": "263780"
  },
  {
    "text": "And we'll now until the end of\nthe term try and maintain a very clear distinction between\nspecifications and",
    "start": "263780",
    "end": "271430"
  },
  {
    "text": "implementations. ",
    "start": "271430",
    "end": "278530"
  },
  {
    "text": "Let's look at an example. So the example should\nbe familiar to you.",
    "start": "278530",
    "end": "285210"
  },
  {
    "text": "You will remember that on\nTuesday at the start of the lecture, we looked at how we\ncould use hashing to implement",
    "start": "285210",
    "end": "293410"
  },
  {
    "text": "a set of integers. And I explained to you that I\nwasn't very happy with the",
    "start": "293410",
    "end": "298770"
  },
  {
    "text": "implementation because\nof the way it used this global variable.",
    "start": "298770",
    "end": "303840"
  },
  {
    "text": "Now we're going to see a much\nmore elegant approach. So I'm going to define a new\nabstract type called intSet.",
    "start": "303840",
    "end": "313710"
  },
  {
    "text": "I do that by writing the word,\nclass, followed by",
    "start": "313710",
    "end": "319069"
  },
  {
    "text": "the name of the class. And then there's this funny\nthing saying that it is a",
    "start": "319070",
    "end": "327010"
  },
  {
    "text": "subclass of objects. Ignore that for now. And I'm going to come\nback to it later.",
    "start": "327010",
    "end": "334150"
  },
  {
    "text": "But fundamentally what it's\nsaying is that every instance of intSet is an object.",
    "start": "334150",
    "end": "340560"
  },
  {
    "text": "That's not very interesting\nbecause everything in Python is an object.",
    "start": "340560",
    "end": "346229"
  },
  {
    "text": "So from an information theoretic\npoint of view, there's no information here.",
    "start": "346230",
    "end": "351600"
  },
  {
    "text": "Later we'll see that we can use\nthis mechanism in a more interesting way. ",
    "start": "351600",
    "end": "358810"
  },
  {
    "text": "Now let's look at the methods. So first I tell you a comment,\nit's a set of integers.",
    "start": "358810",
    "end": "366450"
  },
  {
    "text": "Then I've got this funny\nmethod called underbar underbar init.",
    "start": "366450",
    "end": "372690"
  },
  {
    "text": "Whenever you see something with\nan underbar underbar in its name, it has a special\nstatus in Python that lets us",
    "start": "372690",
    "end": "381180"
  },
  {
    "text": "do elegant things\nwith the syntax. ",
    "start": "381180",
    "end": "386960"
  },
  {
    "text": "What will happen every time I\ncreate a new object of type",
    "start": "386960",
    "end": "392819"
  },
  {
    "text": "intSet, the underbar underbar\ninit method, or function, of",
    "start": "392820",
    "end": "401135"
  },
  {
    "text": "the class will be executed\non that object. ",
    "start": "401135",
    "end": "409280"
  },
  {
    "text": "What it will do, in this case,\nis introduce two attributes of",
    "start": "409280",
    "end": "417810"
  },
  {
    "text": "the object. The attributes are numBuckets\nwhich is now replacing the",
    "start": "417810",
    "end": "425380"
  },
  {
    "text": "global variable we looked\nat last time. And I've arbitrarily\nchosen 47.",
    "start": "425380",
    "end": "431170"
  },
  {
    "text": "And Vals.  This will be the hash table\nitself containing the values.",
    "start": "431170",
    "end": "440780"
  },
  {
    "text": "And then, exactly as we did\non Tuesday, I'm going to",
    "start": "440780",
    "end": "446500"
  },
  {
    "text": "initialize the values so that\neach element of this list is",
    "start": "446500",
    "end": "452880"
  },
  {
    "text": "now an empty list. ",
    "start": "452880",
    "end": "459710"
  },
  {
    "text": "Now what's going on with this\nfunny notion of self. Let's look at an example here. ",
    "start": "459710",
    "end": "468520"
  },
  {
    "text": "I'm going to say s equals\nintSet open close.",
    "start": "468520",
    "end": "473840"
  },
  {
    "text": " This will create a new intSet\nobject, execute the underbar",
    "start": "473840",
    "end": "483160"
  },
  {
    "text": "underbar init. So if, for example, I print\nself.numBuckets--",
    "start": "483160",
    "end": "488835"
  },
  {
    "text": " whoops, can't do that because\nself is not defined in this",
    "start": "488835",
    "end": "498470"
  },
  {
    "text": "environment. Self was a local variable to\nunderbar underbar init.",
    "start": "498470",
    "end": "503830"
  },
  {
    "text": "In fact, the formal parameter. But I can write s.numBuckets,\nand I'll see it's 47.",
    "start": "503830",
    "end": "514034"
  },
  {
    "start": "514035",
    "end": "524110"
  },
  {
    "text": "NumBuckets and Val are\nnow attributes of s.",
    "start": "524110",
    "end": "531470"
  },
  {
    "text": " Attributes of the instance\ns of the class intSet.",
    "start": "531470",
    "end": "538340"
  },
  {
    "start": "538340",
    "end": "547550"
  },
  {
    "text": "And I [[UNINTELLIGIBLE] ",
    "start": "547550",
    "end": "552860"
  },
  {
    "text": "what we would expect. Yes? AUDIENCE: You didn't put any\nobject in between the",
    "start": "552860",
    "end": "561776"
  },
  {
    "text": "parentheses. PROFESSOR: Yes. So that-- the question is well, it looks\nlike underbar underbar intSet",
    "start": "561776",
    "end": "569660"
  },
  {
    "text": "or underbar underbar init\nhas a formal parameter. And I've given it no corresponding actual parameter.",
    "start": "569660",
    "end": "576220"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: Yes. Let me finish. So that's what it looks like. And that's the magic\nof this syntax.",
    "start": "576220",
    "end": "586670"
  },
  {
    "text": "It automatically passes\nan implicit object,",
    "start": "586670",
    "end": "593290"
  },
  {
    "text": "or it creates one. It's a very special role for\nunderbar underbar init. ",
    "start": "593290",
    "end": "601620"
  },
  {
    "text": "Self is used to refer to the\nobject being created. ",
    "start": "601620",
    "end": "609560"
  },
  {
    "text": "I'm going to come back in a\nminute to discuss more fully the concept of self and\nhow it's used here.",
    "start": "609560",
    "end": "617959"
  },
  {
    "text": "So just give me a minute\nto get there. The next thing we\nsee is hashE.",
    "start": "617960",
    "end": "626860"
  },
  {
    "text": "This is something we looked\nat again on Tuesday. ",
    "start": "626860",
    "end": "634270"
  },
  {
    "text": "It's a private function in this\ncase that I don't intend to be used outside the class.",
    "start": "634270",
    "end": "641910"
  },
  {
    "text": "So if we think of the\nspecifications here, the interface of the class, it\ndoes not include hashE.",
    "start": "641910",
    "end": "650530"
  },
  {
    "text": "That's what private\nmeans here. This is a convention. It's not enforced\nby the language.",
    "start": "650530",
    "end": "656370"
  },
  {
    "text": "And unfortunately, as we'll see,\na lot of useful things are not enforced by\nthe language.",
    "start": "656370",
    "end": "661889"
  },
  {
    "text": "But nevertheless, good\nprogrammers follow the conventions. And we expect you guys to do so\nas well because, of course,",
    "start": "661890",
    "end": "670050"
  },
  {
    "text": "you're good programmers. So this doesn't do anything\nvery exciting. It's just what we saw.",
    "start": "670050",
    "end": "678130"
  },
  {
    "text": "Insert is more interesting. Let's look at what that does. It apparently takes two\narguments, the formals named",
    "start": "678130",
    "end": "688930"
  },
  {
    "text": "self and E and inserts\nE into self.vals.",
    "start": "688930",
    "end": "696055"
  },
  {
    "text": " However, if we go look at the\ncode that uses it in say",
    "start": "696055",
    "end": "709670"
  },
  {
    "text": "testone what you'll note is I'm\nsaying for i in range 40--",
    "start": "709670",
    "end": "717120"
  },
  {
    "text": "this is just like the testone\nwe looked at Tuesday. I'm going to say\ns.insert of i.",
    "start": "717120",
    "end": "724520"
  },
  {
    "text": "It looks like I'm calling insert\nwith only one argument, but as we discussed last time,\nthis s before the dot is",
    "start": "724520",
    "end": "733920"
  },
  {
    "text": "actually the first argument\nto the method insert.",
    "start": "733920",
    "end": "739040"
  },
  {
    "text": "And so it's getting two\narguments really. ",
    "start": "739040",
    "end": "745160"
  },
  {
    "text": "And by convention, that implicit\nfirst argument is",
    "start": "745160",
    "end": "751660"
  },
  {
    "text": "always called self in Python. ",
    "start": "751660",
    "end": "760840"
  },
  {
    "text": "It's not enforced. You could call it George if you\npreferred, or Alice, or whatever you like.",
    "start": "760840",
    "end": "768170"
  },
  {
    "text": "But if you do, you will confuse\nthe heck out of anybody who ever reads your\ncode, including any",
    "start": "768170",
    "end": "774089"
  },
  {
    "text": "TA you ask for help. So please do use self.",
    "start": "774090",
    "end": "779810"
  },
  {
    "text": "It's just a name. It has nothing to do with\nwhat a philosopher, or a",
    "start": "779810",
    "end": "785630"
  },
  {
    "text": "psychologist, or an ethicist\nmight think as the concept of self, this wonderful\nelevated concept.",
    "start": "785630",
    "end": "792959"
  },
  {
    "text": "It's none of those. It's just a name. But stick to using that name. ",
    "start": "792960",
    "end": "801660"
  },
  {
    "text": "So if we go back, I can insert\na bunch of things.",
    "start": "801660",
    "end": "808579"
  },
  {
    "text": " I'm going to then print s.",
    "start": "808580",
    "end": "814339"
  },
  {
    "text": "That's kind of interesting.  UnderBar underbar STR, underbar\nunderbar is one of",
    "start": "814340",
    "end": "825090"
  },
  {
    "text": "those special names as well. The code is pretty simple.",
    "start": "825090",
    "end": "832310"
  },
  {
    "text": "All it is is returning a string representation of the set. ",
    "start": "832310",
    "end": "839390"
  },
  {
    "text": "And it could be anything\nyou want. I chose sort of a conventional\nway of denoting sets.",
    "start": "839390",
    "end": "845260"
  },
  {
    "text": "What's interesting\nis that it gets automatically called by print.",
    "start": "845260",
    "end": "853230"
  },
  {
    "text": "So when I write the command,\nprint s, in test one, the",
    "start": "853230",
    "end": "859110"
  },
  {
    "text": "Python interpreter is smart\nenough to know oh, I better take s, convert it to a string,\nand then print it.",
    "start": "859110",
    "end": "866764"
  },
  {
    "text": " How does it know to convert\nit to a string?",
    "start": "866765",
    "end": "872100"
  },
  {
    "text": "It automatically invokes the\nunderbar underbar STR method. ",
    "start": "872100",
    "end": "884509"
  },
  {
    "text": "And then the other operation\nis member, which again is exactly what we looked\nat before. ",
    "start": "884510",
    "end": "891680"
  },
  {
    "text": "But you'll notice in this code\nthat uses intSets, I make no",
    "start": "891680",
    "end": "898529"
  },
  {
    "text": "reference to the data attributes\nof the class",
    "start": "898530",
    "end": "904010"
  },
  {
    "text": "directly, or I shouldn't. You'll notice that I wrote\nevil next to s.vals.",
    "start": "904010",
    "end": "912040"
  },
  {
    "text": "Python will let me do\nit, but I shouldn't. Why shouldn't I do it? ",
    "start": "912040",
    "end": "919350"
  },
  {
    "text": "Why am I saying this is evil? ",
    "start": "919350",
    "end": "927601"
  },
  {
    "text": "Well, would you be happy if you\ngot a message saying IDLE",
    "start": "927601",
    "end": "934360"
  },
  {
    "text": "was changed. Please download a new version\nand the new version happened",
    "start": "934360",
    "end": "940453"
  },
  {
    "text": "to have a different implementation of lists or dicts. And it caused all of your\nprograms to stop working.",
    "start": "940453",
    "end": "949640"
  },
  {
    "text": "You would be pretty unhappy. Now why won't that happen? Because your programs don't\ndepend, in any way, on the way",
    "start": "949640",
    "end": "959700"
  },
  {
    "text": "in which people chose to\nimplement those built in types",
    "start": "959700",
    "end": "965560"
  },
  {
    "text": "because you programmed to the\nspecification of the types, not to the implementation.",
    "start": "965560",
    "end": "970760"
  },
  {
    "text": " The specification of intSet\ndid not mention Vals or",
    "start": "970760",
    "end": "977640"
  },
  {
    "text": "numBuckets.  Therefore, as the implementer of\nthat class, I'm entitled to",
    "start": "977640",
    "end": "985500"
  },
  {
    "text": "go back and change it. So I'm not going to use\na hash table at all.",
    "start": "985500",
    "end": "990779"
  },
  {
    "text": "I'm going to do something\nelse. I'm going to use a red, black\ntree, or some other fancy implementation.",
    "start": "990780",
    "end": "996880"
  },
  {
    "text": "I'm allowed to do that. And if I make that change, and\nVals disappears and numBuckets",
    "start": "996880",
    "end": "1003640"
  },
  {
    "text": "disappears, your program should\ncontinue to work so long as I still meet\nthe specification.",
    "start": "1003640",
    "end": "1011700"
  },
  {
    "text": "The minute you go in and\ndirectly access the variables of the class, those attributes,\nyou have used",
    "start": "1011700",
    "end": "1020700"
  },
  {
    "text": "things that do not appear\nin this specification. And if I change the\nimplementation, your program",
    "start": "1020700",
    "end": "1026270"
  },
  {
    "text": "might break.  So you shouldn't do that.",
    "start": "1026270",
    "end": "1031368"
  },
  {
    "text": "Does that make sense\nto everybody? It's a very important concept. The concept is known\nas data hiding.",
    "start": "1031369",
    "end": "1038750"
  },
  {
    "start": "1038750",
    "end": "1058700"
  },
  {
    "text": "It is really the most important\ndevelopment that",
    "start": "1058700",
    "end": "1064929"
  },
  {
    "text": "makes abstract data\ntypes useful. It gives them the same status\nas the built in types.",
    "start": "1064930",
    "end": "1072960"
  },
  {
    "text": "The minute you choose to\nignore this, you do so at your own peril.",
    "start": "1072960",
    "end": "1079639"
  },
  {
    "text": "Some programming languages, like\nJava, provide a mechanism to enforce data hiding.",
    "start": "1079640",
    "end": "1087250"
  },
  {
    "text": "The designers of Python, for\nreasons I do not understand, chose not to.",
    "start": "1087250",
    "end": "1093170"
  },
  {
    "text": "I think it is a flaw\nin the language. ",
    "start": "1093170",
    "end": "1101260"
  },
  {
    "text": "The things we're hiding are\nthe instance variable. ",
    "start": "1101260",
    "end": "1126190"
  },
  {
    "text": "Those are the variables\nassociated with each instance of the class.",
    "start": "1126190",
    "end": "1132020"
  },
  {
    "start": "1132020",
    "end": "1141320"
  },
  {
    "text": "We should also hide\nclass variables. ",
    "start": "1141320",
    "end": "1149780"
  },
  {
    "text": "We haven't seen those yet,\nand we'll see them later. ",
    "start": "1149780",
    "end": "1156669"
  },
  {
    "text": "The instance variables, we get\na new copy of each time we",
    "start": "1156670",
    "end": "1162250"
  },
  {
    "text": "created a new instance\nof the class, a new intSet in this case. The class variables\nare associated",
    "start": "1162250",
    "end": "1169520"
  },
  {
    "text": "with the class itself. And you get only one\ncopy of them.",
    "start": "1169520",
    "end": "1174530"
  },
  {
    "text": "Later on, we'll see an\nexample where class variables are useful.",
    "start": "1174530",
    "end": "1180500"
  },
  {
    "text": "All right. So let's run this just to\nmake sure it works. ",
    "start": "1180500",
    "end": "1190330"
  },
  {
    "text": "It does what we would expect. True/False. And then you'll see\nthis nice string",
    "start": "1190330",
    "end": "1196230"
  },
  {
    "text": "representation of the set. And then just to show you what\nhappens when you do the evil thing, I printed as we did\nlast time the actual",
    "start": "1196230",
    "end": "1204400"
  },
  {
    "text": "list that came out. ",
    "start": "1204400",
    "end": "1213660"
  },
  {
    "text": "Let's now look at a more\ninteresting example. ",
    "start": "1213660",
    "end": "1224880"
  },
  {
    "text": "And the idea I want to convey\nhere is how we use classes and abstract data types to\ndesign programs.",
    "start": "1224880",
    "end": "1233340"
  },
  {
    "text": "So imagine that you're writing a\nprogram to keep track of all the students, faculty, and\nmaybe staff at MIT.",
    "start": "1233340",
    "end": "1241440"
  },
  {
    "text": "It's certainly possible to write\nthat program without using any classes. For each student, you might\ngive them a family name, a",
    "start": "1241440",
    "end": "1248830"
  },
  {
    "text": "given name, a home address,\nyears, grades, et cetera. And you could do this with some\ncomplicated combination",
    "start": "1248830",
    "end": "1256260"
  },
  {
    "text": "of lists and dictionaries.  But it wouldn't be\nvery elegant.",
    "start": "1256260",
    "end": "1262750"
  },
  {
    "text": "So what I want to do before\nwriting that program-- and I won't actually\nwrite that program.",
    "start": "1262750",
    "end": "1268190"
  },
  {
    "text": "I'll just write some of the\nclasses we can use-- I want to pull back and\nthink about what",
    "start": "1268190",
    "end": "1273720"
  },
  {
    "text": "abstractions would be useful. So this style of programming\nin which you organize your",
    "start": "1273720",
    "end": "1280880"
  },
  {
    "text": "programs around abstract data\ntypes says before we write the",
    "start": "1280880",
    "end": "1286840"
  },
  {
    "text": "code in detail, we think about\nthese types that would make it",
    "start": "1286840",
    "end": "1292279"
  },
  {
    "text": "easy to write the code. So for example, if you were\na finance student, and you",
    "start": "1292280",
    "end": "1298810"
  },
  {
    "text": "wanted to write some code\ndealing with markets, you might want to have an\nabstraction of a government",
    "start": "1298810",
    "end": "1305530"
  },
  {
    "text": "bond, and another abstraction\nof an equity, and an extraction of a call option.",
    "start": "1305530",
    "end": "1310960"
  },
  {
    "text": "Whatever you want it. But you'd say I want to think at\nthat level of abstraction.",
    "start": "1310960",
    "end": "1316059"
  },
  {
    "text": "I don't want to think about\nlists, and dicts, and floats. I just want to think about\noptions, which have a strike",
    "start": "1316060",
    "end": "1323860"
  },
  {
    "text": "price, a date, and\nthings like that. Similarly, as I'm working on\nthis database for MIT, I want",
    "start": "1323860",
    "end": "1331899"
  },
  {
    "text": "to think about abstractions\nof students, and",
    "start": "1331900",
    "end": "1337470"
  },
  {
    "text": "faculty, and staff. ",
    "start": "1337470",
    "end": "1342539"
  },
  {
    "text": "I'm also going to use what's\ncalled inheritance to set up a",
    "start": "1342540",
    "end": "1349420"
  },
  {
    "text": "hierarchy of these. And the reason I'm going to do\nthat is I want to be able to",
    "start": "1349420",
    "end": "1357240"
  },
  {
    "text": "share a code. I know that there will be\ncertain similarities between",
    "start": "1357240",
    "end": "1364330"
  },
  {
    "text": "students and faculty. Some differences too.",
    "start": "1364330",
    "end": "1369910"
  },
  {
    "text": "But I want to begin by saying\nwhat's not different? What's similar?",
    "start": "1369910",
    "end": "1375170"
  },
  {
    "text": "What's the same? So that I only have to\nimplement it once and get to reuse it.",
    "start": "1375170",
    "end": "1383460"
  },
  {
    "text": "So if I pull back and say is\nthere an abstraction that covers the shared attributes of\nstudents, and faculty, and",
    "start": "1383460",
    "end": "1391740"
  },
  {
    "text": "staff, I might say\nit's a person. They're all people.",
    "start": "1391740",
    "end": "1398490"
  },
  {
    "text": "And it's arguable whether every\nfaculty member is a human being, but for\nnow let's pretend.",
    "start": "1398490",
    "end": "1406490"
  },
  {
    "text": "And so I'm going to start with\nthis abstraction person. ",
    "start": "1406490",
    "end": "1412650"
  },
  {
    "text": "I'm going to import something\ncalled DateTime. I'll show you what we're doing\nwhen we get there.",
    "start": "1412650",
    "end": "1418360"
  },
  {
    "text": "But it's like we've imported\nmath before. This is a class somebody else\nwrote that deals with dates",
    "start": "1418360",
    "end": "1426000"
  },
  {
    "text": "and time in a fairly\nreasonable way. ",
    "start": "1426000",
    "end": "1433540"
  },
  {
    "text": "So I'm going to import that\nhere into person.",
    "start": "1433540",
    "end": "1438610"
  },
  {
    "text": "Probably didn't need\nto import it twice. Maybe I'll just simplify it by\ngetting rid of this one.",
    "start": "1438610",
    "end": "1443840"
  },
  {
    "text": " UnderBar underbar init\nhere will create a",
    "start": "1443840",
    "end": "1451450"
  },
  {
    "text": "person with name 'Name'. And you'll notice what I'm doing\nhere is introducing an",
    "start": "1451450",
    "end": "1463660"
  },
  {
    "text": "extra attribute lastName\n-- self.lastName. ",
    "start": "1463660",
    "end": "1469680"
  },
  {
    "text": "And that's because I just want\nto make life easy for myself. I figure I'll want to find\nthe last name frequently.",
    "start": "1469680",
    "end": "1475830"
  },
  {
    "text": "Let's once and for all get it\nand put it in something. ",
    "start": "1475830",
    "end": "1481919"
  },
  {
    "text": "And I'm going to initialize\nbirthday to none. ",
    "start": "1481920",
    "end": "1489540"
  },
  {
    "text": "The next attribute, or the next\nmethod, is get lastName.",
    "start": "1489540",
    "end": "1496020"
  },
  {
    "text": "I have that here because I\ndon't want users of this",
    "start": "1496020",
    "end": "1504660"
  },
  {
    "text": "abstraction to even know that\nI have an attribute self.lastname.",
    "start": "1504660",
    "end": "1509769"
  },
  {
    "text": "That's part of the\nimplementation. And so I have this method\nthat fetches it.",
    "start": "1509770",
    "end": "1515620"
  },
  {
    "text": "And you'll see as you build\nclasses that you often have things called get.",
    "start": "1515620",
    "end": "1522140"
  },
  {
    "text": "And those are typically methods\nthat return some information about an instance\nof the class.",
    "start": "1522140",
    "end": "1527860"
  },
  {
    "text": " You'll also frequently have set\nmethods, for example, set",
    "start": "1527860",
    "end": "1536580"
  },
  {
    "text": "birthday that gives values to\ninstances of the class.",
    "start": "1536580",
    "end": "1545990"
  },
  {
    "text": " More interestingly,\nI have get age.",
    "start": "1545990",
    "end": "1551230"
  },
  {
    "text": " And that's using some of the\nbuilt in operations on",
    "start": "1551230",
    "end": "1558370"
  },
  {
    "text": "DateTime conveniently. It allows me to subtract one\ndate from another and get a",
    "start": "1558370",
    "end": "1567370"
  },
  {
    "text": "number of days.  So this will allow me to return\nsomebody's age in days.",
    "start": "1567370",
    "end": "1575390"
  },
  {
    "text": " Then I've got another underbar\nunderbar method we",
    "start": "1575390",
    "end": "1583519"
  },
  {
    "text": "haven't seen yet. lt stands for less than. Not a big surprise.",
    "start": "1583520",
    "end": "1591140"
  },
  {
    "text": "And I'm going to use this to\norder names, or order people.",
    "start": "1591140",
    "end": "1599240"
  },
  {
    "text": "Why am I using a special\noperator rather than just putting in the method\nL-E-S-S-T-H. A-N?",
    "start": "1599240",
    "end": "1608649"
  },
  {
    "text": "E-N?  I'm doing that because I want\nto be able to write things",
    "start": "1608650",
    "end": "1617230"
  },
  {
    "text": "like p1 less than\np2 in my code.",
    "start": "1617230",
    "end": "1624260"
  },
  {
    "text": "And Python will take that and\nturn it into the underbar",
    "start": "1624260",
    "end": "1629890"
  },
  {
    "text": "underbar LT.  Better yet, if I have a list say\nof person's, I can use the",
    "start": "1629890",
    "end": "1641350"
  },
  {
    "text": "built in sort operator on that\nlist, and it will be smart enough to know when it's\ncomparing two people to do the",
    "start": "1641350",
    "end": "1649100"
  },
  {
    "text": "sort to use the underbar\nunderbar LT. ",
    "start": "1649100",
    "end": "1655760"
  },
  {
    "text": "Very convenient kind of thing.  Let's look at an example.",
    "start": "1655760",
    "end": "1661799"
  },
  {
    "text": "Let's look at some code. ",
    "start": "1661800",
    "end": "1671380"
  },
  {
    "text": "So I'm going to set me to John\nGuttag, and him to Barack",
    "start": "1671380",
    "end": "1676485"
  },
  {
    "text": "Hussein Obama, her to Madonna. And we'll print some things. ",
    "start": "1676485",
    "end": "1698410"
  },
  {
    "text": "So I printed him, and I printed\nhim.getlastName. ",
    "start": "1698410",
    "end": "1706990"
  },
  {
    "text": "I can now set some birthdays. ",
    "start": "1706990",
    "end": "1723500"
  },
  {
    "text": "Let's look at this line. How do you feel about\nhim.birthday equals 8/4/61?",
    "start": "1723500",
    "end": "1729757"
  },
  {
    "start": "1729757",
    "end": "1739169"
  },
  {
    "text": "We'll come back to it. But I want you to\nthink about it. ",
    "start": "1739170",
    "end": "1751630"
  },
  {
    "text": "And we see that Obama is-- well, we see their ages here.",
    "start": "1751630",
    "end": "1757710"
  },
  {
    "text": "Actually, we see that\nMadonna is older. She looks really old when you\nlook at that number of days,",
    "start": "1757710",
    "end": "1763740"
  },
  {
    "text": "doesn't it. Maybe she is.",
    "start": "1763740",
    "end": "1768890"
  },
  {
    "text": "Now what's going\nto happen here? ",
    "start": "1768890",
    "end": "1781510"
  },
  {
    "text": "I messed up.  And I messed up because I went\nin and directly accessed the",
    "start": "1781510",
    "end": "1790700"
  },
  {
    "text": "instance variable and assigned\nit what I thought was a reasonable representation\nof a birthdate.",
    "start": "1790700",
    "end": "1796190"
  },
  {
    "text": " But I shouldn't have because\nthat's not even the",
    "start": "1796190",
    "end": "1801530"
  },
  {
    "text": "appropriate type. It's a string rather than\nsomething from DateTime.",
    "start": "1801530",
    "end": "1808850"
  },
  {
    "text": "So again, we see the impact of\nmy having done this evil thing of violating the abstraction\nboundary and stuck in there",
    "start": "1808850",
    "end": "1820860"
  },
  {
    "text": "try to directly access\nan instance variable. ",
    "start": "1820860",
    "end": "1828010"
  },
  {
    "text": "We can do some comparisons. ",
    "start": "1828010",
    "end": "1837320"
  },
  {
    "text": "And what we see is that I'm\nnot less than Madonna.",
    "start": "1837320",
    "end": "1844370"
  },
  {
    "text": "I guess that's OK. ",
    "start": "1844370",
    "end": "1850780"
  },
  {
    "text": "You with me so far? ",
    "start": "1850780",
    "end": "1857500"
  },
  {
    "text": "I can make a list of these\nthings and print the list.",
    "start": "1857500",
    "end": "1867590"
  },
  {
    "start": "1867590",
    "end": "1875880"
  },
  {
    "text": "So it does a fairly nice job\ncalling the underbar underbar STR operator.",
    "start": "1875880",
    "end": "1882320"
  },
  {
    "text": "And you'll note I had no trouble\nthrowing objects of type person into the list.",
    "start": "1882320",
    "end": "1888580"
  },
  {
    "text": "No different than putting\nints, or floats, or any of the built-ins. So it all works nicely.",
    "start": "1888580",
    "end": "1895039"
  },
  {
    "text": "And then I can sort\nit and print that. ",
    "start": "1895040",
    "end": "1907560"
  },
  {
    "text": "And now the lists come out in a\ndifferent order because it's using the underbar underbar LT\noperator to sort the elements.",
    "start": "1907560",
    "end": "1915789"
  },
  {
    "text": "All of this is just by way of\nshowing you how convenient it is to write code that uses\na data abstraction.",
    "start": "1915790",
    "end": "1921986"
  },
  {
    "start": "1921986",
    "end": "1927690"
  },
  {
    "text": "If we go back and look at the\ncode, we'll see that once again person was a subclass\nof object.",
    "start": "1927690",
    "end": "1938000"
  },
  {
    "text": "That's why we can do all\nthese things we've been doing with it. But now I'm going to start\nusing the hierarchy.",
    "start": "1938000",
    "end": "1943820"
  },
  {
    "start": "1943820",
    "end": "1953830"
  },
  {
    "text": "MIT people are special. I hate to say that because\nI know we have non-MIT",
    "start": "1953830",
    "end": "1959490"
  },
  {
    "text": "people in the room. But MIT people are special. Well here's at least\none of the special",
    "start": "1959490",
    "end": "1966290"
  },
  {
    "text": "attributes of MIT people. They all have an ID. ",
    "start": "1966290",
    "end": "1972540"
  },
  {
    "text": "So I'm now going to say\nan MIT person is a special subclass of person.",
    "start": "1972540",
    "end": "1980920"
  },
  {
    "text": "So it has all of the properties\nof a person. And the way we describe that is\nit inherits the properties",
    "start": "1980920",
    "end": "1993010"
  },
  {
    "text": "of the super class. ",
    "start": "1993010",
    "end": "2007840"
  },
  {
    "text": "And it adds a property.  We can now assign\nan ID number.",
    "start": "2007840",
    "end": "2019159"
  },
  {
    "text": "And now we're going to see the\nthing I promised to show you, which is a class variable.",
    "start": "2019160",
    "end": "2024785"
  },
  {
    "text": " Next ID num is not associated\nwith an instance of MIT",
    "start": "2024785",
    "end": "2033799"
  },
  {
    "text": "person, but it's associated\nwith the class itself.",
    "start": "2033800",
    "end": "2038830"
  },
  {
    "text": "It's a class variable. I can do that because classes\nare themselves objects.",
    "start": "2038830",
    "end": "2046215"
  },
  {
    "text": " And the advantage of this is\nevery time I get a new",
    "start": "2046215",
    "end": "2053070"
  },
  {
    "text": "instance of this class, I\ncan assign a unique ID. ",
    "start": "2053070",
    "end": "2061770"
  },
  {
    "text": "Similar to the way we were using\nglobal variables earlier in the term, typically once we\nhave classes, we'd stop using",
    "start": "2061770",
    "end": "2070019"
  },
  {
    "text": "global variables because we have\nthese class variables, which can serve very much the\nsame purpose in many cases.",
    "start": "2070020",
    "end": "2079320"
  },
  {
    "text": "And so now every time I get a\nnew MIT person, I give them an ID and then increment the ID\nnumber so that the next person",
    "start": "2079320",
    "end": "2088210"
  },
  {
    "text": "will get a different one.  So I added a property, this ID\nnumber property, which I find",
    "start": "2088210",
    "end": "2099090"
  },
  {
    "text": "by get ID num. I've also overwritten an\nexisting property.",
    "start": "2099090",
    "end": "2106404"
  },
  {
    "start": "2106405",
    "end": "2124890"
  },
  {
    "text": "You'll note that I've changed\nthe definition of underbar underbar LT.",
    "start": "2124890",
    "end": "2132480"
  },
  {
    "text": "So it's now saying we're going\nto compare two people not on the basis of their\nnames but on the",
    "start": "2132480",
    "end": "2139010"
  },
  {
    "text": "basis of their ID numbers. ",
    "start": "2139010",
    "end": "2146270"
  },
  {
    "text": "So let's look at some\ncode that uses this. ",
    "start": "2146270",
    "end": "2160980"
  },
  {
    "text": "Get rid of the other\ncode so it doesn't clutter up the screen. ",
    "start": "2160980",
    "end": "2193520"
  },
  {
    "text": "So we'll look at some\nthings here. We'll get some MIT people\ncalled p1, p2, and p3.",
    "start": "2193520",
    "end": "2202299"
  },
  {
    "text": "And we'll print their ID nums\nby calling get ID num.",
    "start": "2202300",
    "end": "2208420"
  },
  {
    "text": " And you can see that Barbara\nBeaver gets 0, and the first",
    "start": "2208420",
    "end": "2214480"
  },
  {
    "text": "Sue Wong gets 1, and the second\nSue Wong has ID 2. ",
    "start": "2214480",
    "end": "2224290"
  },
  {
    "text": "I can create even a\nthird such person. And now let's think about\nwhat happens here.",
    "start": "2224290",
    "end": "2229815"
  },
  {
    "start": "2229815",
    "end": "2235280"
  },
  {
    "text": "I'm going to print whether or\nnot p1 is less than p2 and",
    "start": "2235280",
    "end": "2243340"
  },
  {
    "text": "whether or not p3\nis less than p2. ",
    "start": "2243340",
    "end": "2248680"
  },
  {
    "text": "What should we get\nwhen we do this?  Somebody?",
    "start": "2248680",
    "end": "2254830"
  },
  {
    "text": " Pardon? AUDIENCE: True and false.",
    "start": "2254830",
    "end": "2260869"
  },
  {
    "text": "PROFESSOR: I heard\na true false. And indeed that's right because\nit's comparing IDs.",
    "start": "2260870",
    "end": "2268369"
  },
  {
    "text": "Now, suppose I want\nto compare names. ",
    "start": "2268370",
    "end": "2273920"
  },
  {
    "text": "I could if I chose do this. ",
    "start": "2273920",
    "end": "2281380"
  },
  {
    "text": "I could call person underbar\nunderbar LT.",
    "start": "2281380",
    "end": "2287250"
  },
  {
    "text": "And what this says\nis don't use the less than of the subclass.",
    "start": "2287250",
    "end": "2295940"
  },
  {
    "text": "Go up and use the super class\none to do the comparison. ",
    "start": "2295940",
    "end": "2312950"
  },
  {
    "text": "So it's going up\nand doing that. ",
    "start": "2312950",
    "end": "2318660"
  },
  {
    "text": "I can do other things. I can compare things\nfor equality. ",
    "start": "2318660",
    "end": "2325980"
  },
  {
    "text": "Let me just rip through all of\nthese and see what we get.",
    "start": "2325980",
    "end": "2331585"
  },
  {
    "text": " Whoops. Surprise!",
    "start": "2331585",
    "end": "2338920"
  },
  {
    "text": "Well, before we get\nto that surprise-- and it's not actually\na surprise. I shouldn't have\nuncommented it.",
    "start": "2338920",
    "end": "2344750"
  },
  {
    "text": "Let's look at the other ones. ",
    "start": "2344750",
    "end": "2360720"
  },
  {
    "text": "We can say is p1 equal to p4? And we discover it's not.",
    "start": "2360720",
    "end": "2367250"
  },
  {
    "text": "That's good. And we can say is\np4 less than p3?",
    "start": "2367250",
    "end": "2373230"
  },
  {
    "text": "That all works. It's not. But I can't say p3\nless than p4.",
    "start": "2373230",
    "end": "2380950"
  },
  {
    "text": " And why can't I do that? ",
    "start": "2380950",
    "end": "2388730"
  },
  {
    "text": "Why did I get an error message\nwhen I did that? ",
    "start": "2388730",
    "end": "2401529"
  },
  {
    "text": "Yes? Someone wanted to answer that? AUDIENCE: That's because you\nmix [UNINTELLIGIBLE]?",
    "start": "2401530",
    "end": "2407952"
  },
  {
    "text": "PROFESSOR: Can you say\nthat more loudly? AUDIENCE: She's a person,\nnot an MIT person. So you didn't assign\nher an ID number.",
    "start": "2407952",
    "end": "2414265"
  },
  {
    "text": "PROFESSOR: Exactly right. The answer-- ",
    "start": "2414265",
    "end": "2421940"
  },
  {
    "text": "I hit somebody right\non the head. Now there's going to be a\ntraumatic brain injury. I'm going to get sued.",
    "start": "2421940",
    "end": "2427589"
  },
  {
    "text": "It's going to be messy. Time to leave the country. ",
    "start": "2427590",
    "end": "2437450"
  },
  {
    "text": "All right. Because it looks at p3 less than\np4, looks at the first",
    "start": "2437450",
    "end": "2443500"
  },
  {
    "text": "argument, which is p3, and says\nOK, what's the underbar underbar LT associated\nwith p3?",
    "start": "2443500",
    "end": "2451760"
  },
  {
    "text": "It's the one associated\nwith an MIT person. Let's go execute that.",
    "start": "2451760",
    "end": "2457339"
  },
  {
    "text": "And then it tries to retrieve\nthe ID number of p4, which is",
    "start": "2457340",
    "end": "2463310"
  },
  {
    "text": "not an MIT person, and it\ngets an error message. ",
    "start": "2463310",
    "end": "2470820"
  },
  {
    "text": "All right. Nothing subtle. It's the same kind of thing\nwe've seen all along when we use type errors.",
    "start": "2470820",
    "end": "2477100"
  },
  {
    "text": "In this case it's called an\nattribute error because we've attempted to access an attribute\nof an instance that",
    "start": "2477100",
    "end": "2483630"
  },
  {
    "text": "doesn't exist. And so we could catch it.",
    "start": "2483630",
    "end": "2488740"
  },
  {
    "text": "It's raised an exception. We could catch it as we looked\nat Tuesday, but we're not going to do that because it's\nreally a programming bug when",
    "start": "2488740",
    "end": "2495970"
  },
  {
    "text": "that happens.  OK, let's continue.",
    "start": "2495970",
    "end": "2501180"
  },
  {
    "text": " We were interested\nin students.",
    "start": "2501180",
    "end": "2506710"
  },
  {
    "text": " So we're going to continue\nour hierarchy here.",
    "start": "2506710",
    "end": "2514040"
  },
  {
    "text": "And now I'm going to introduce\na subclass of an MIT person called an UG, short\nfor undergraduate.",
    "start": "2514040",
    "end": "2520894"
  },
  {
    "text": " Underbar underbar init is\ngoing to call MIT person",
    "start": "2520895",
    "end": "2529730"
  },
  {
    "text": "underbar underbar init, which\nwill give the UG an ID number",
    "start": "2529730",
    "end": "2534790"
  },
  {
    "text": "and a name. And it's going to introduce\nyet another instance attribute, or field,\ncalled the year.",
    "start": "2534790",
    "end": "2542330"
  },
  {
    "text": "And so the year, initially,\nis none. Then I can set the year.",
    "start": "2542330",
    "end": "2547405"
  },
  {
    "text": " Though if I try and set it as\nsomething greater than 5, I'm",
    "start": "2547405",
    "end": "2553400"
  },
  {
    "text": "going to raise an overflow\nerror called too many. No undergraduate should be\na year greater than 5.",
    "start": "2553400",
    "end": "2561990"
  },
  {
    "text": "And I can get the year. Let's look at what happens\nwhen we do that.",
    "start": "2561990",
    "end": "2567095"
  },
  {
    "start": "2567095",
    "end": "2575540"
  },
  {
    "text": "So I'll have two UG's. Both happen to be\nnamed Jane Doe. And then the same MIT\nperson as before.",
    "start": "2575540",
    "end": "2583640"
  },
  {
    "text": "Let's run this code and see--\nwell, what's going to happen? What's going to happen\nwhen I say print UG1?",
    "start": "2583640",
    "end": "2591720"
  },
  {
    "text": "The first thing it's going to do\nis going to say is there an underbar underbar STR\nassociated with UGs?",
    "start": "2591720",
    "end": "2600440"
  },
  {
    "text": "And the answer is no. That's OK because I know an\nUG is also an MIT person.",
    "start": "2600440",
    "end": "2607820"
  },
  {
    "text": "If I don't find it at the\nlowest level class, I'll bounce up and say all right, is\nthere an underbar underbar",
    "start": "2607820",
    "end": "2615860"
  },
  {
    "text": "STR associated with\nan MIT person? ",
    "start": "2615860",
    "end": "2622240"
  },
  {
    "text": "No. That's OK. I'll go up another level and\nsay, well, I know an MIT",
    "start": "2622240",
    "end": "2628670"
  },
  {
    "text": "person happens to be a person. And then they'll say oh, good\nthere is an underbar underbar",
    "start": "2628670",
    "end": "2634869"
  },
  {
    "text": "STR associated with person. So I'll use that one.",
    "start": "2634870",
    "end": "2640070"
  },
  {
    "text": "So it looks at the class. If it doesn't find it, it\ngoes to the super class. If it doesn't find it, it\ngoes to the super class.",
    "start": "2640070",
    "end": "2647230"
  },
  {
    "text": "And it does that all the way\nup until the end, where at worst, it will use the built-in\nthing for printing",
    "start": "2647230",
    "end": "2653140"
  },
  {
    "text": "objects because remember\neverything is a subclass of objects.",
    "start": "2653140",
    "end": "2659530"
  },
  {
    "text": "You don't want to do that. You want to have something more\nelegant than object at location xe345, or whatever\nif would have printed.",
    "start": "2659530",
    "end": "2667730"
  },
  {
    "start": "2667730",
    "end": "2677910"
  },
  {
    "text": "Then we'll do some\ncomparisons. It will first look for the most\nlocal and then work its",
    "start": "2677910",
    "end": "2683220"
  },
  {
    "text": "way up as needed. ",
    "start": "2683220",
    "end": "2690240"
  },
  {
    "text": "OK?  Let's keep going.",
    "start": "2690240",
    "end": "2695530"
  },
  {
    "text": "We're going to introduce another\nkind of person called a graduate student.",
    "start": "2695530",
    "end": "2700800"
  },
  {
    "text": "And I'm going to write pass. What that means is a G is an\nMIT person with no special",
    "start": "2700800",
    "end": "2710700"
  },
  {
    "text": "properties, all the usual\nproperties of an MIT person.",
    "start": "2710700",
    "end": "2716960"
  },
  {
    "text": "Does not have a year because\ngraduate students could be here more or less forever,\nwhich goes like",
    "start": "2716960",
    "end": "2723140"
  },
  {
    "text": "this when I say that.  Why did I introduce the type\nin the first place?",
    "start": "2723140",
    "end": "2729630"
  },
  {
    "text": " Because it lets me\ndo type checking.",
    "start": "2729630",
    "end": "2738110"
  },
  {
    "text": "I can now check whether or not a\nperson is a graduate student",
    "start": "2738110",
    "end": "2744880"
  },
  {
    "text": "because an instance of G will\nhave all of the properties of",
    "start": "2744880",
    "end": "2751210"
  },
  {
    "text": "an MIT person, but it will\nhave a different type. It will be type G.",
    "start": "2751210",
    "end": "2758309"
  },
  {
    "text": "And so I can now ask the\nquestion is the type of this object a G. Or is it\nan MIT person and",
    "start": "2758310",
    "end": "2765660"
  },
  {
    "text": "get a different answer. ",
    "start": "2765660",
    "end": "2774480"
  },
  {
    "text": "So I can do this. ",
    "start": "2774480",
    "end": "2779600"
  },
  {
    "text": "And if I go type of G1-- ",
    "start": "2779600",
    "end": "2784890"
  },
  {
    "text": "well, that's interesting. It says classmain.G.",
    "start": "2784890",
    "end": "2793280"
  },
  {
    "text": "It's going to upset its class. And the class is defined at the\noutermost level, which is",
    "start": "2793280",
    "end": "2799060"
  },
  {
    "text": "called main. And the classes name is G,\nwhich is what we expect.",
    "start": "2799060",
    "end": "2805630"
  },
  {
    "text": " And so I could write something\nlike that.",
    "start": "2805630",
    "end": "2812350"
  },
  {
    "text": " Type of G1 equals equals\nG. And I get True.",
    "start": "2812350",
    "end": "2823630"
  },
  {
    "text": " Ok. So it's a handy thing\nto be able to do.",
    "start": "2823630",
    "end": "2829309"
  },
  {
    "text": " And in fact, I'm now going to\nbounce back to MIT person and",
    "start": "2829310",
    "end": "2839670"
  },
  {
    "text": "add another method to it.  And this happens all the time\nwhen I'm programming that I go",
    "start": "2839670",
    "end": "2849540"
  },
  {
    "text": "define a class, think I'm done,\nand then some time later decide that it would be\nconvenient to add something",
    "start": "2849540",
    "end": "2855400"
  },
  {
    "text": "new, another method. In this case, I'm now adding the\nmethod is student, which",
    "start": "2855400",
    "end": "2861369"
  },
  {
    "text": "returns type of self equal equal\nUG or type of self equal equals G.",
    "start": "2861370",
    "end": "2867140"
  },
  {
    "text": "So this will let me distinguish\na student from",
    "start": "2867140",
    "end": "2872490"
  },
  {
    "text": "another kind of MIT person. ",
    "start": "2872490",
    "end": "2878450"
  },
  {
    "text": "So for example, if I want\nto have a course list-- another class, this is\na subclass of object.",
    "start": "2878450",
    "end": "2887770"
  },
  {
    "text": "You'll note I have an add\nstudent method, which takes self and who, maybe\nit should be whom.",
    "start": "2887770",
    "end": "2894740"
  },
  {
    "text": "And it says, if not\nwho.isstudent raise type error not a student.",
    "start": "2894740",
    "end": "2901570"
  },
  {
    "text": "So I'm getting some leverage\nnow out of this. Now I wouldn't need to\nnecessarily do this.",
    "start": "2901570",
    "end": "2908690"
  },
  {
    "text": "I could have said if not type\nof who equals G, or type of",
    "start": "2908690",
    "end": "2917599"
  },
  {
    "text": "who equals UG. But I chose not to. The reason I chose not to is\nlooking ahead, I might want to",
    "start": "2917600",
    "end": "2926980"
  },
  {
    "text": "add some other students. I might want to add special\nstudent, for example. Or I might want to add cross\nregistering student as",
    "start": "2926980",
    "end": "2935079"
  },
  {
    "text": "separate types. Now, the nice thing is I don't\nhave to make a lot of changes.",
    "start": "2935080",
    "end": "2943660"
  },
  {
    "text": "I know there's exactly one place\nin my code that defines what it means to be\nan MIT student.",
    "start": "2943660",
    "end": "2950440"
  },
  {
    "text": "I go back and I change\nthat method. And even if I asked whether\nsomebody's a student in a 100",
    "start": "2950440",
    "end": "2956140"
  },
  {
    "text": "different places, I only\nhave to make one change to fix my code.",
    "start": "2956140",
    "end": "2961520"
  },
  {
    "text": "So I'm getting some modularity\nby associating the method with",
    "start": "2961520",
    "end": "2966940"
  },
  {
    "text": "the class MIT person rather\nthan every time",
    "start": "2966940",
    "end": "2972109"
  },
  {
    "text": "I need to use it. ",
    "start": "2972110",
    "end": "2975978"
  }
]