[
  {
    "text": " The following\ncontent is provided under a Creative\nCommons license. B support will help MIT\nOpenCourseWare continue",
    "start": "0",
    "end": "6860"
  },
  {
    "text": "to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6860",
    "end": "13330"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13330",
    "end": "21140"
  },
  {
    "text": "VICTOR COSTAN: Any questions\nabout the sorting methods that you want me to go over\nin that while I revise?",
    "start": "21141",
    "end": "27570"
  },
  {
    "text": " OK.",
    "start": "27570",
    "end": "34744"
  },
  {
    "text": "All right, sorting. ",
    "start": "34744",
    "end": "40520"
  },
  {
    "text": "What sorting methods\nhave we learned? Let's start from\ndumbest to smartest.",
    "start": "40520",
    "end": "46395"
  },
  {
    "text": "AUDIENCE: Merge sorting. VICTOR COSTAN: OK,\nsomewhere in the middle. Merge sort isn't very bad.",
    "start": "46395",
    "end": "52020"
  },
  {
    "text": "What's the easiest\nmethod to sort? AUDIENCE: Insertion. ",
    "start": "52020",
    "end": "58120"
  },
  {
    "text": "VICTOR COSTAN: Insertion sort. Excellent. All right. What else? ",
    "start": "58120",
    "end": "66730"
  },
  {
    "text": "Heapsort.  And? I gave two away now.",
    "start": "66730",
    "end": "74239"
  },
  {
    "text": "AUDIENCE: Counting.  VICTOR COSTAN: Counting sort. Very good.",
    "start": "74239",
    "end": "80190"
  },
  {
    "text": "And? ",
    "start": "80190",
    "end": "85800"
  },
  {
    "text": "Oh, wow. If you don't even\nhave the name of it. So the last one is radix sort.",
    "start": "85800",
    "end": "92119"
  },
  {
    "text": "What are the running\ntimes for these three that you guys remember? ",
    "start": "92120",
    "end": "100191"
  },
  {
    "text": "AUDIENCE: Insertion sort\nis linearly one more. It's bad. VICTOR COSTAN: I want to see our\npseudocode for insertion sorts.",
    "start": "100191",
    "end": "107696"
  },
  {
    "text": "AUDIENCE: n squared. AUDIENCE: Now that's really bad. VICTOR COSTAN: So linear is as\ngood as you could possibly get.",
    "start": "107696",
    "end": "115430"
  },
  {
    "text": "So sorting takes an\narray of random stuff and outputs an array of\nthings in a sorted order.",
    "start": "115430",
    "end": "121509"
  },
  {
    "text": "The array is size n, so it has\nto output an array of size n. If you can do an algorithm\nthat runs in order n time,",
    "start": "121510",
    "end": "127680"
  },
  {
    "text": "then that's the best you\ncould possibly accomplish, because you have\noutput n elements. So the best possible time\nyou could get for sorting",
    "start": "127680",
    "end": "134790"
  },
  {
    "text": "is theta of n. All right. How about merge sort? ",
    "start": "134790",
    "end": "141351"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. VICTOR COSTAN: Thank you.  Heapsort.",
    "start": "141351",
    "end": "148170"
  },
  {
    "text": "AUDIENCE: Order h. Order h is log n. VICTOR COSTAN: Order\nh where h is log n.",
    "start": "148171",
    "end": "154680"
  },
  {
    "text": "OK. And you're missing a factor. So a heap operation takes\norder h, which is log n.",
    "start": "154680",
    "end": "161299"
  },
  {
    "text": "So if I have to insert\na numbering in a heap or extract a number from\na heap, that's log n.",
    "start": "161300",
    "end": "166750"
  },
  {
    "text": "In order to start an array,\nhow many insertions do I do?",
    "start": "166750",
    "end": "171765"
  },
  {
    "text": "AUDIENCE: I think--\nnow I don't know. VICTOR COSTAN: OK. Wild guess. AUDIENCE: n.",
    "start": "171765",
    "end": "177390"
  },
  {
    "text": "VICTOR COSTAN: Very good. See, there you go. So you need to insert all\nyour numbers in a heap",
    "start": "177390",
    "end": "184239"
  },
  {
    "text": "and then extract\nthem one by one. And you will get them\nin the correct order that gives you the\nsorted results.",
    "start": "184240",
    "end": "189360"
  },
  {
    "text": "So n log n. Does anyone remember what's\nspecial about these three",
    "start": "189360",
    "end": "196240"
  },
  {
    "text": "sorting methods that does\nnot apply to the other two? AUDIENCE: They're in place.",
    "start": "196240",
    "end": "203942"
  },
  {
    "text": "VICTOR COSTAN: Merge sort\nisn't quite in place. If it would be in place,\nit would be perfect.",
    "start": "203942",
    "end": "209000"
  },
  {
    "text": "There is actually a way of\nmaking in place merge sort, but it requires a PhD\ndegree to understand that.",
    "start": "209000",
    "end": "215819"
  },
  {
    "text": "So we will not cover it in 6006,\nbecause I do not understand it. So I couldn't explain it.",
    "start": "215820",
    "end": "222230"
  },
  {
    "text": "So merge sort is\nnot quite in place. Which one is in place? ",
    "start": "222230",
    "end": "229951"
  },
  {
    "text": "AUDIENCE: Heapsort. VICTOR COSTAN: Good. So heapsort is in place. Merge sort is not in place.",
    "start": "229951",
    "end": "236000"
  },
  {
    "text": "And insertion sort\nis really slow, so we don't care\nthat much about it. So what's special\nabout these three",
    "start": "236000",
    "end": "244080"
  },
  {
    "text": "that does not\napply to these two? ",
    "start": "244080",
    "end": "251200"
  },
  {
    "text": "AUDIENCE: You don't\nhave to use integers. VICTOR COSTAN: OK. You don't have to use integers. What do they want\nto know instead",
    "start": "251200",
    "end": "257519"
  },
  {
    "text": "about the things you use? So we'll call them keys. AUDIENCE: You need to\nbe able to compare them. VICTOR COSTAN: All right.",
    "start": "257519",
    "end": "262673"
  },
  {
    "text": "AUDIENCE: You don't\nneed to have a minimum and a maximum integer.",
    "start": "262674",
    "end": "267806"
  },
  {
    "text": "VICTOR COSTAN: So turns out, if\nyou have a comparison operator, you will have a\nminimum and a maximum. But that's complex\nabstract algebra",
    "start": "267806",
    "end": "275130"
  },
  {
    "text": "that we don't need\nto worry about. So you gave me the\ngood answer, which is we use something\ncalled a comparison model.",
    "start": "275130",
    "end": "282915"
  },
  {
    "text": " And in that model,\nyou do not need",
    "start": "282915",
    "end": "287970"
  },
  {
    "text": "to know too much\nabout your keys. So the elements in the\narea that you're sorting. Your keys are blobs.",
    "start": "287970",
    "end": "294000"
  },
  {
    "text": "And all they have\nto be able to do is know-- if you\nhave two of them-- you have to know\nwhich one's greater.",
    "start": "294000",
    "end": "301670"
  },
  {
    "text": "That's it. Nothing else. What's the problem with\nthe comparison model? ",
    "start": "301670",
    "end": "309024"
  },
  {
    "text": "AUDIENCE: It takes\ntime to compare things. It's like with everything. VICTOR COSTAN: Yeah. ",
    "start": "309024",
    "end": "316192"
  },
  {
    "text": "So we learned in\nlecture that there is a lower bound for\nthe comparison model. And if you want to sort using\nnothing but this information,",
    "start": "316192",
    "end": "323720"
  },
  {
    "text": "that will take you at\nleast n log n time. You cannot do better than n\nlog n if all you're using is",
    "start": "323720",
    "end": "331310"
  },
  {
    "text": "comparisons. So in that respect, merge sort\nand heap sort are optimal.",
    "start": "331310",
    "end": "337259"
  },
  {
    "text": "If you want to stay\nwithin this model, this is the best time\nyou're going to get.",
    "start": "337260",
    "end": "342290"
  },
  {
    "text": "Does anyone know how you can\nimplement this comparison model in Python?",
    "start": "342290",
    "end": "347730"
  },
  {
    "text": "So numbers respond to\nthese operators, right? Actually, in Python\nthis is equals equals.",
    "start": "347730",
    "end": "354020"
  },
  {
    "text": "What if I have a\nrandom object and I want to make it respond\nto these operators? So for example, I\nwrite merge sort.",
    "start": "354020",
    "end": "360370"
  },
  {
    "text": "We wrote merge sort. And now I have my own\nobjects, my own keys which are not\nnecessarily integers,",
    "start": "360370",
    "end": "365410"
  },
  {
    "text": "because that's why we like this. And we want to make them\nrespond to these operators. So I can call merge\nsort on an array of them",
    "start": "365410",
    "end": "371490"
  },
  {
    "text": "and it will crash. What do I have to do? AUDIENCE: I mean, you\nhave to give the keys",
    "start": "371490",
    "end": "378432"
  },
  {
    "text": "values that can be compared. VICTOR COSTAN: So suppose\nthis is my key class. ",
    "start": "378432",
    "end": "387254"
  },
  {
    "text": "AUDIENCE: This is\nlad, the lt, and gt. VICTOR COSTAN: All right. There's a magical\nmethod in Python.",
    "start": "387254",
    "end": "394360"
  },
  {
    "text": "So there is the\nold school model, which you might see in\nlegacy code, which only works",
    "start": "394360",
    "end": "401480"
  },
  {
    "text": "in Python 2.x, which is you\ndefine the method called cmp that takes self and other.",
    "start": "401480",
    "end": "412480"
  },
  {
    "text": "And it has to return\na number that's either smaller than zero, equal\nto zero, or greater than zero.",
    "start": "412480",
    "end": "418780"
  },
  {
    "text": "And this maps to this. ",
    "start": "418780",
    "end": "424590"
  },
  {
    "text": "So you'll see this in old code. But you shouldn't\nuse it in new code. On this, you have a\nvery good reason to.",
    "start": "424590",
    "end": "430940"
  },
  {
    "text": "Instead, the new\nmodel says that you define special methods called\nlt, which stands for less than.",
    "start": "430940",
    "end": "441479"
  },
  {
    "text": "So it's this guy.  le, which is less or equal.",
    "start": "441480",
    "end": "450100"
  },
  {
    "text": "gt, which is greater than. And ge, which is\ngreater or equal. ",
    "start": "450100",
    "end": "457630"
  },
  {
    "text": "And if you look at our code\nfor pieces two and three, we have some objects that\npretend they're keys.",
    "start": "457630",
    "end": "463639"
  },
  {
    "text": "And we have to\ndefine these methods. Also, when you\ndefine these, it's",
    "start": "463640",
    "end": "469460"
  },
  {
    "text": "a good idea to define eq\nfor equality comparison.",
    "start": "469460",
    "end": "476419"
  },
  {
    "text": "And ne, which is this guy. So these also take\nself and other key",
    "start": "476420",
    "end": "486620"
  },
  {
    "text": "that you're comparing with. And they return true or false. ",
    "start": "486620",
    "end": "493440"
  },
  {
    "text": "So this will help you\nunderstand the code better. All right, so with\nrelatively little work,",
    "start": "493440",
    "end": "498680"
  },
  {
    "text": "you can have any wild object\nyou want act as a key. And then you have\ninsertion sort,",
    "start": "498680",
    "end": "505950"
  },
  {
    "text": "merge sort, heapsort,\nheaps, binary trees, AVLs.",
    "start": "505950",
    "end": "511050"
  },
  {
    "text": "Everything works, because\neverything uses the comparison model. The problem is\nthis n log n bound.",
    "start": "511050",
    "end": "517599"
  },
  {
    "text": " It's not as fast as the best\npossible sorting algorithm",
    "start": "517600",
    "end": "523890"
  },
  {
    "text": "you could come up with. This is slower than this. So that's why we have to break\nout of the comparison model.",
    "start": "523890",
    "end": "530250"
  },
  {
    "text": "And we have to look into these\nboxes and get more information, so that we can write\nfaster sorting algorithms.",
    "start": "530250",
    "end": "538200"
  },
  {
    "text": "Does anyone remember the\nrunning time for counting sort? AUDIENCE: [INAUDIBLE] again?",
    "start": "538200",
    "end": "544579"
  },
  {
    "text": "VICTOR COSTAN: OK.  AUDIENCE: n plus e.",
    "start": "544580",
    "end": "550649"
  },
  {
    "text": "VICTOR COSTAN: OK. ",
    "start": "550650",
    "end": "555720"
  },
  {
    "text": "Let's remember how\ncounting sort looks like. Let's get this array that-- that\nshould be enough-- four, one,",
    "start": "555720",
    "end": "567709"
  },
  {
    "text": "three, two, three. How do we sort it\nusing counting sort?",
    "start": "567710",
    "end": "573180"
  },
  {
    "text": " AUDIENCE: We initialize an array\nof all the possible values.",
    "start": "573180",
    "end": "583929"
  },
  {
    "text": "VICTOR COSTAN: Very good. Very good. So counting sort needs to know\nsomething about your values, right? It makes an assumption.",
    "start": "583929",
    "end": "589870"
  },
  {
    "text": "And the assumption\nis that these values are integers from 0\nto, say, k minus 1.",
    "start": "589870",
    "end": "597170"
  },
  {
    "text": "So you have k possible values. And they don't really\nhave to be these as long",
    "start": "597170",
    "end": "602380"
  },
  {
    "text": "as you can map them\nto these numbers. So we are going to\ninitialize an array.",
    "start": "602380",
    "end": "610090"
  },
  {
    "text": "Let's say this is an array. And zero, one.",
    "start": "610090",
    "end": "616760"
  },
  {
    "text": "So zero, one, two,\nthree, four, five. ",
    "start": "616760",
    "end": "623460"
  },
  {
    "text": "So we're going to\ninitialize it with-- AUDIENCE: Oh, zeroes. VICTOR COSTAN: All right.",
    "start": "623460",
    "end": "628481"
  },
  {
    "text": " And then? AUDIENCE: Iterative\nover our list sort",
    "start": "628481",
    "end": "637380"
  },
  {
    "text": "incrementing the corresponding\nvalue to each key in your--",
    "start": "637380",
    "end": "644620"
  },
  {
    "text": "VICTOR COSTAN: So which\none am I incrementing here? AUDIENCE: Pardon? VICTOR COSTAN: Which one\nam I incrementing here? AUDIENCE: Zero ne through four.",
    "start": "644620",
    "end": "650081"
  },
  {
    "text": " One. ",
    "start": "650081",
    "end": "656740"
  },
  {
    "text": "VICTOR COSTAN: Three, two. And then? AUDIENCE: Three n.",
    "start": "656740",
    "end": "662040"
  },
  {
    "text": "So this becomes a two.  And what do I do now?",
    "start": "662040",
    "end": "669380"
  },
  {
    "text": "AUDIENCE: Reiterate over\nthat-- I don't know.",
    "start": "669380",
    "end": "674482"
  },
  {
    "text": "I don't know what to call that\nidentity [INAUDIBLE] almost? OK, an array.",
    "start": "674482",
    "end": "680270"
  },
  {
    "text": "Printing into your output array\none one, one two, two threes,",
    "start": "680270",
    "end": "687510"
  },
  {
    "text": "one four. VICTOR COSTAN: All right. So there's no zeroes\nand now fives. So one one, one two,\none three, and one four.",
    "start": "687510",
    "end": "696240"
  },
  {
    "text": " OK, so far so good. This is great.",
    "start": "696240",
    "end": "702180"
  },
  {
    "text": "There's one thing\nthat's missing. For counting sort and for\nother sorting algorithms,",
    "start": "702180",
    "end": "707200"
  },
  {
    "text": "we care about the\nproperty called stability. And stability means\nthat if you have",
    "start": "707200",
    "end": "712779"
  },
  {
    "text": "two equal keys, or\nat least two keys that look equal to\nthe sorting algorithm, they might be different\nobjects, because they",
    "start": "712780",
    "end": "718684"
  },
  {
    "text": "might be implementing that. The one that shows\nup first in the input should also show up\nfirst in the output.",
    "start": "718684",
    "end": "726010"
  },
  {
    "text": "And that requires\nparticular care, because you can't\njust look at the keys from your sorting\nperspective and know",
    "start": "726010",
    "end": "731850"
  },
  {
    "text": "which one's supposed\nto go where. You have to remember where\nthey were in the input. So if this guy is 3a,\nand this guy is 3b,",
    "start": "731850",
    "end": "739841"
  },
  {
    "text": "I can't use this\napproach anymore, right? Because when I'm\noutputting here, all I know is I have to output a three. I don't have any\nother information",
    "start": "739841",
    "end": "745936"
  },
  {
    "text": "associated with the key. So instead, I have to\ndo something smarter. AUDIENCE: Either replace\nyour array with a 2-D array.",
    "start": "745936",
    "end": "754199"
  },
  {
    "text": "Or I think better\nwould be to replace each value with a length list.",
    "start": "754200",
    "end": "759601"
  },
  {
    "text": "VICTOR COSTAN: OK. So we can replace each value\nwith a length list, which",
    "start": "759601",
    "end": "765699"
  },
  {
    "text": "would have the keys\nthat map to it, right. So here I would have a one. Here I would have a two.",
    "start": "765700",
    "end": "771970"
  },
  {
    "text": "Here I would have\n3a, and then 3b. and here I would have a four.",
    "start": "771970",
    "end": "779120"
  },
  {
    "text": "So then I can go through these\nand output them the right way. OK, now suppose I'm\nwriting this in C.",
    "start": "779120",
    "end": "786940"
  },
  {
    "text": "Suppose I'm in a\nlow level language. And I'm in a low level\nlanguage because I'm hired by one of these startups\nthat are doing NoSQL databases.",
    "start": "786940",
    "end": "794760"
  },
  {
    "text": "And they're writing\neverything in C to make their\nthings really fast. So I'm writing an index\nthat uses counting sort.",
    "start": "794760",
    "end": "800660"
  },
  {
    "text": "I don't have length lists,\nbecause if I'm writing in C, I have to write my own. And that's hard.",
    "start": "800660",
    "end": "806220"
  },
  {
    "text": "So I want to implement\nthis in another way. ",
    "start": "806220",
    "end": "812240"
  },
  {
    "text": "Length lists are hard. What would I do instead? Can anyone think of another way?",
    "start": "812240",
    "end": "817440"
  },
  {
    "text": "AUDIENCE: I think you\ncan decrement the values for the C in the\narray that you have,",
    "start": "817440",
    "end": "823906"
  },
  {
    "text": "where you have to type the\nculture of each anyway. VICTOR COSTAN: OK, so\nyou have the right idea. ",
    "start": "823906",
    "end": "830880"
  },
  {
    "text": "You're missing one step. So I'll give\neveryone else a hint so that everyone can catch up. So what I want to do is I want\nto take this and transform it",
    "start": "830880",
    "end": "838470"
  },
  {
    "text": "into something that allows\nme to go through the keys. So I know I have five keys here.",
    "start": "838470",
    "end": "845020"
  },
  {
    "text": "I'm going to make an output\narray of five elements. And I want to be able\nto see four and know",
    "start": "845020",
    "end": "851100"
  },
  {
    "text": "that it belongs here. See one, know that\nit belongs here. See 3a, know that\nit belongs here.",
    "start": "851100",
    "end": "858470"
  },
  {
    "text": "Then probably update the\nvalue associated with three. See two, know that\nit belongs here. And then when I see 3b,\nknow that it belongs here.",
    "start": "858470",
    "end": "866009"
  },
  {
    "text": " So I want to look, when I get to\n3a, I want to look inside here.",
    "start": "866010",
    "end": "873269"
  },
  {
    "text": "And I want this to tell\nme that 3 belongs here,",
    "start": "873270",
    "end": "879090"
  },
  {
    "text": "3a belongs here. ",
    "start": "879090",
    "end": "894610"
  },
  {
    "text": "So what would the\nposition of 3a be? That's not good, right?",
    "start": "894610",
    "end": "899700"
  },
  {
    "text": "Let's call this c instead\nso that I can say 3a be. ",
    "start": "899700",
    "end": "905920"
  },
  {
    "text": "So how would I\ndefine the position using the sorted property?",
    "start": "905920",
    "end": "914350"
  },
  {
    "text": "3a should go in the index that\nis how many keys smaller than 3",
    "start": "914350",
    "end": "919779"
  },
  {
    "text": "there are.  So if I can look\nthrough here and see",
    "start": "919780",
    "end": "925750"
  },
  {
    "text": "how many keys do I have\nthat are smaller than 3, this is where 3a needs to go.",
    "start": "925750",
    "end": "933209"
  },
  {
    "text": "If I look at four,\nthere are four keys that are smaller than four. So it needs to go\nin position four.",
    "start": "933210",
    "end": "940640"
  },
  {
    "text": "AUDIENCE: Well, that almost\nseems more like a compare. I'm guessing that\nmakes it-- I think",
    "start": "940640",
    "end": "946253"
  },
  {
    "text": "it's kind of a comparison model. But you're saying\nis it greater than.",
    "start": "946253",
    "end": "951529"
  },
  {
    "text": "So it's not really counting\nsort anymore as much. VICTOR COSTAN: Well,\nI'm telling you I can compute that using this.",
    "start": "951530",
    "end": "958860"
  },
  {
    "text": "So I can use the\ncounting sort algorithm and change this array a little\nbit so that I can do this trick",
    "start": "958860",
    "end": "965130"
  },
  {
    "text": "and know what goes where. AUDIENCE: You already\nmentioned using a 2-D array. VICTOR COSTAN: But a 2-D\narray would be too much.",
    "start": "965130",
    "end": "974470"
  },
  {
    "text": "In the end, I will be\nchanging this in place. So no extra space except\nfor this array of size k.",
    "start": "974470",
    "end": "982910"
  },
  {
    "text": "But let's not worry about\nchanging it in place right now. Let's say we're going to\nmake another array of size k.",
    "start": "982910",
    "end": "988920"
  },
  {
    "start": "988920",
    "end": "994920"
  },
  {
    "text": "So I want it to tell me that-- I\nguess I don't care about this-- but I want it to tell me\nthat one, the first one",
    "start": "994920",
    "end": "1002360"
  },
  {
    "text": "should go here, the\nfirst two should go here, the first three should go here,\nthe first four should go here.",
    "start": "1002360",
    "end": "1007540"
  },
  {
    "text": "How do I do that?  AUDIENCE: Well, you could\nmake that array, right.",
    "start": "1007540",
    "end": "1014820"
  },
  {
    "text": "VICTOR COSTAN: But\nhow do I compute it? AUDIENCE: While you're\nmaking this one, you can start\nfilling that one in.",
    "start": "1014820",
    "end": "1021120"
  },
  {
    "text": "But while you're\nmaking the top one. VICTOR COSTAN: Can I? AUDIENCE: It would be like\ninsertion sort though, kind of.",
    "start": "1021120",
    "end": "1028790"
  },
  {
    "text": "So you come across the four. You put it in there, because\nyou know how many there are.",
    "start": "1028790",
    "end": "1034030"
  },
  {
    "text": "But that doesn't\nmake a lot of sense. VICTOR COSTAN: Yeah, OK. So let's abandon that route. Let's think of something else.",
    "start": "1034030",
    "end": "1040308"
  },
  {
    "text": "AUDIENCE: Could you\npopulate the array with the number of elements that\nare less than that [INAUDIBLE]?",
    "start": "1040309",
    "end": "1046250"
  },
  {
    "text": "VICTOR COSTAN: So\nintuitively, I want this to tell me how\nmany elements there are that are smaller than two.",
    "start": "1046250",
    "end": "1052170"
  },
  {
    "text": "This should tell me\nthe number of elements there are that are smaller\nthan three, so on and so forth. ",
    "start": "1052170",
    "end": "1059520"
  },
  {
    "text": "OK, how would I compute that? ",
    "start": "1059520",
    "end": "1066851"
  },
  {
    "text": "Let's see what it's\nsupposed to be. Let's fill it out\nwith real values. AUDIENCE: Zero. VICTOR COSTAN: Zero. How many elements\nsmaller than one?",
    "start": "1066852",
    "end": "1073410"
  },
  {
    "text": "AUDIENCE: Zero. VICTOR COSTAN: How many\nelements smaller than two? AUDIENCE: One. VICTOR COSTAN: How many\nelements smaller than three?",
    "start": "1073410",
    "end": "1080198"
  },
  {
    "text": "AUDIENCE: Two. It's a cumulative sum. VICTOR COSTAN: OK. AUDIENCE: On the array above.",
    "start": "1080198",
    "end": "1087240"
  },
  {
    "text": "VICTOR COSTAN: So this is\nhow many elements smaller than four? Or how many elements\nsmaller than 5 4?",
    "start": "1087240",
    "end": "1093529"
  },
  {
    "text": "OK. what's the difference\nbetween these two guys? AUDIENCE: One. VICTOR COSTAN: What's the\ndifference between these two",
    "start": "1093530",
    "end": "1099724"
  },
  {
    "text": "guys? AUDIENCE: One.  VICTOR COSTAN:\nYeah, you're right. Sorry.",
    "start": "1099724",
    "end": "1106410"
  },
  {
    "text": "Thank you. What's the difference\nbetween these two guys? AUDIENCE: Two.",
    "start": "1106410",
    "end": "1112142"
  },
  {
    "text": "One. VICTOR COSTAN: And what's the\ndifference between these two guys? AUDIENCE: Zero.",
    "start": "1112142",
    "end": "1118560"
  },
  {
    "text": "VICTOR COSTAN: OK, What\ndid I just write here? AUDIENCE: Same series up there. AUDIENCE: Array.",
    "start": "1118561",
    "end": "1124080"
  },
  {
    "text": "VICTOR COSTAN: All right. So this guy is zero, right,\nbecause there's no element",
    "start": "1124080",
    "end": "1129610"
  },
  {
    "text": "that-- there's nothing that's\nsmaller to the smallest key. And then this guy is whatever\nwas here plus this almost.",
    "start": "1129610",
    "end": "1139610"
  },
  {
    "text": "So the difference between\nthis guy and this guy is this. ",
    "start": "1139610",
    "end": "1145633"
  },
  {
    "text": "AUDIENCE: So why go\nthrough an array? I mean, why did you bother? Why do we make a new array?",
    "start": "1145633",
    "end": "1151835"
  },
  {
    "text": "Because we could just\nget that information. VICTOR COSTAN:\nMaking a new array so that we can see\nhow to compute it.",
    "start": "1151835",
    "end": "1158870"
  },
  {
    "text": "So now we're going to try\nto right pseudocode that does this in place.",
    "start": "1158870",
    "end": "1163950"
  },
  {
    "text": "So suppose this\narray is a and this array is pass for position.",
    "start": "1163950",
    "end": "1173300"
  },
  {
    "text": "And suppose-- sorry,\nnot this array. This array is a. ",
    "start": "1173300",
    "end": "1179460"
  },
  {
    "text": "This array is pass. And I start with this. And I want to end up with this.",
    "start": "1179460",
    "end": "1185020"
  },
  {
    "text": "So let's try to write the\npseudocode for counting sort. Counting sort with an array a.",
    "start": "1185020",
    "end": "1191250"
  },
  {
    "text": "I'm not going to write the first\ntwo lines that produce this.",
    "start": "1191250",
    "end": "1197300"
  },
  {
    "text": "Let's transform this to this. How would I do that? ",
    "start": "1197300",
    "end": "1203950"
  },
  {
    "text": "AUDIENCE: Initialize an\narray of the same size. VICTOR COSTAN: OK. Can we try to do it in place?",
    "start": "1203950",
    "end": "1209805"
  },
  {
    "text": " AUDIENCE: Sure. ",
    "start": "1209805",
    "end": "1215864"
  },
  {
    "text": "VICTOR COSTAN: How\ndo we do it in place? ",
    "start": "1215864",
    "end": "1222450"
  },
  {
    "text": "AUDIENCE: You could, well\nfor four, you get the four. You're like, oh, I haven't\nencountered anything below me.",
    "start": "1222450",
    "end": "1228660"
  },
  {
    "text": "So you put it in zero\ninitially for four. And then you get a one. And you're like, oh, I haven't\ngotten anything below me.",
    "start": "1228660",
    "end": "1235036"
  },
  {
    "text": "But I forget to keep\ntrack of the fact that you have to iterate a\nwhole list ever single time you get a new input.",
    "start": "1235036",
    "end": "1240260"
  },
  {
    "text": "VICTOR COSTAN: So I\ndon't want to do that, because that's n squared. AUDIENCE: What you need to\ndo is keep a running sum.",
    "start": "1240260",
    "end": "1250540"
  },
  {
    "text": "Is it a register? Is that what you do call it? VICTOR COSTAN: Running sum. I like running sum. AUDIENCE: OK. Keep a running sum of-- ",
    "start": "1250540",
    "end": "1258770"
  },
  {
    "text": "VICTOR COSTAN: Sums always\nstart at zero, right? AUDIENCE: Right. So you keep zero at--\nyou take the value",
    "start": "1258770",
    "end": "1270139"
  },
  {
    "text": "in each index of that\narray and add it to sum. VICTOR COSTAN: OK.",
    "start": "1270140",
    "end": "1276250"
  },
  {
    "text": "So for i iterating\nfrom zero to-- so you",
    "start": "1276250",
    "end": "1283280"
  },
  {
    "text": "want each value in\nthis array, right? AUDIENCE: Yes. VICTOR COSTAN: So it's going\nto iterate from zero to what?",
    "start": "1283280",
    "end": "1290980"
  },
  {
    "text": "How many elements\ndo I have there? AUDIENCE: Length k.",
    "start": "1290980",
    "end": "1296910"
  },
  {
    "text": "VICTOR COSTAN: OK, almost. So we're using Python numbering,\nwhich is zero base indexing.",
    "start": "1296910",
    "end": "1303220"
  },
  {
    "text": "The indices look like this. So it's zero to-- AUDIENCE: [INAUDIBLE]. VICTOR COSTAN: Very good.",
    "start": "1303220",
    "end": "1308756"
  },
  {
    "text": "Thank you. And you said I'm going to\nadd the elements to a sum.",
    "start": "1308756",
    "end": "1313790"
  },
  {
    "text": "So sum is sum plus\nposition of i.",
    "start": "1313790",
    "end": "1323300"
  },
  {
    "text": "OK. And then?  AUDIENCE: The replace\nis the [INAUDIBLE].",
    "start": "1323300",
    "end": "1332510"
  },
  {
    "text": "So zero should be zero still. One should be the sum\nafter evaluating zero.",
    "start": "1332510",
    "end": "1343664"
  },
  {
    "text": "You'll need a temp variable. VICTOR COSTAN: OK. AUDIENCE: You'll need to\ngraph position i when in temp.",
    "start": "1343665",
    "end": "1351360"
  },
  {
    "text": "VICTOR COSTAN:\nTemp is position i. AUDIENCE: Then say position i\nis sum before incremental sums.",
    "start": "1351360",
    "end": "1362605"
  },
  {
    "text": " No. That's not it at all.",
    "start": "1362605",
    "end": "1369395"
  },
  {
    "text": "VICTOR COSTAN: Really? AUDIENCE: We'll have to say\nthat sum is sum plus temp. ",
    "start": "1369395",
    "end": "1381542"
  },
  {
    "text": "That is going to work.  VICTOR COSTAN: OK. How does everyone\nelse feel about this?",
    "start": "1381542",
    "end": "1389500"
  },
  {
    "text": "Does it make sense? AUDIENCE: Not really. AUDIENCE: [INAUDIBLE]\ntemporary blast [INAUDIBLE] previous adjuration, because--\nso when you first started,",
    "start": "1389500",
    "end": "1399500"
  },
  {
    "text": "it's the very initial\ncase that doesn't work. So like, if you're in the first\ncolumn, everything's fine.",
    "start": "1399500",
    "end": "1404520"
  },
  {
    "text": "Then you go to column one. You're looking at everything\nto the left of it.",
    "start": "1404520",
    "end": "1409919"
  },
  {
    "text": "It's still going to be zero. Then you go to\nthe second column, but you already overwrote\nthe previous column.",
    "start": "1409919",
    "end": "1415250"
  },
  {
    "text": "So you need to store\nsomehow the-- I don't know. It's just the initial\ncase from when it first",
    "start": "1415250",
    "end": "1422932"
  },
  {
    "text": "goes from zero to an\nactual qualified number. Because otherwise,\nyou're just going to get like zero, zero, zero.",
    "start": "1422932",
    "end": "1428824"
  },
  {
    "text": "And you just overwrite. AUDIENCE: Can you\nstart [INAUDIBLE]?",
    "start": "1428824",
    "end": "1436189"
  },
  {
    "text": "Was that before you changed? VICTOR COSTAN: OK. ",
    "start": "1436189",
    "end": "1454580"
  },
  {
    "text": "Sorry, I'm getting confused. ",
    "start": "1454580",
    "end": "1464770"
  },
  {
    "text": "This is getting hard. I will show you a trick\nto make life easier. I'm going to put-- how many\nelements do I have here?",
    "start": "1464770",
    "end": "1473160"
  },
  {
    "text": "Five, right? So I'm going to put a\nfive here after the array.",
    "start": "1473160",
    "end": "1481170"
  },
  {
    "text": "And then I'm going to ask\nyou, what's this difference. AUDIENCE: Zero.",
    "start": "1481170",
    "end": "1487110"
  },
  {
    "text": "VICTOR COSTAN: OK. So now we have this whole array. ",
    "start": "1487110",
    "end": "1497650"
  },
  {
    "text": "Can people see what's\ngoing on here.? So instead of starting\nat the beginning,",
    "start": "1497650",
    "end": "1503130"
  },
  {
    "text": "I'm going to start at the end. And I'm going to know-- I know\nfor sure there are n elements.",
    "start": "1503130",
    "end": "1509750"
  },
  {
    "text": "Therefore, the index of\nthis guy is n minus-- so the index of the last key\nis n minus how many keys I",
    "start": "1509750",
    "end": "1517850"
  },
  {
    "text": "have with this value.  Does this make sense?",
    "start": "1517850",
    "end": "1524140"
  },
  {
    "text": "AUDIENCE: But you're iterating\nover an order, right? So we can't just\ntake the whole thing and say we're going to\nshift it over to the right.",
    "start": "1524140",
    "end": "1530300"
  },
  {
    "text": "VICTOR COSTAN: How about--  AUDIENCE: And you're going\nthrough left to right.",
    "start": "1530300",
    "end": "1537110"
  },
  {
    "text": "You'll only know what\nyou see thus far. VICTOR COSTAN: How about going\nit for ai from n minus 1 to 0.",
    "start": "1537110",
    "end": "1548150"
  },
  {
    "text": "Will it work then? So what would I write? AUDIENCE: But isn't\nthat super inefficient?",
    "start": "1548150",
    "end": "1554510"
  },
  {
    "text": "Because then you're starting\nlooking at the whole list. And then you're sort\nof, rather than just looking at the previous sum\nthat you just-- the cumulative.",
    "start": "1554510",
    "end": "1562955"
  },
  {
    "text": "So your first\nadjuration, you have to add up everything\nthat you see. Like adjuration, you have\nto add everything up.",
    "start": "1562955",
    "end": "1568204"
  },
  {
    "text": "VICTOR COSTAN: So if I\nadd everything up here, what's the result going to be? AUDIENCE: Five.",
    "start": "1568204",
    "end": "1573570"
  },
  {
    "text": "VICTOR COSTAN: OK. What's five? ",
    "start": "1573570",
    "end": "1581094"
  },
  {
    "text": "So this counts\nhow many zero keys I've seen, how many\none keys I've seen, how many two keys I've\nseen, so on and so forth.",
    "start": "1581094",
    "end": "1589389"
  },
  {
    "text": "So in total-- AUDIENCE: So you're subtracting VICTOR COSTAN: It's how\nmany keys I've seen. All this, the sum of all these,\nis how many keys I've sent.",
    "start": "1589389",
    "end": "1596039"
  },
  {
    "text": "How many keys do I have? AUDIENCE: Five. For each one you\nsee, you can just-- VICTOR COSTAN: So who's five?",
    "start": "1596040",
    "end": "1602846"
  },
  {
    "text": "It's the length of\nthis guy, right? And we usually call that n. So when we're doing\nsorting, this is n.",
    "start": "1602846",
    "end": "1613620"
  },
  {
    "text": "So maybe it's less confusing. Oh, I already used\nn in two places. So I guess that's it.",
    "start": "1613620",
    "end": "1619930"
  },
  {
    "text": "I could say the length\nof a, but there you go. ",
    "start": "1619930",
    "end": "1627327"
  },
  {
    "text": "So I could do the thing that\nwe're going through before. I could figure out\nmy temp variables. And I could make it work.",
    "start": "1627327",
    "end": "1634060"
  },
  {
    "text": "Or I could do this. AUDIENCE: I think it's\nthe same though, isn't it? VICTOR COSTAN: Yup. It's the same thing, except I\nthink this is easier to write.",
    "start": "1634060",
    "end": "1640616"
  },
  {
    "text": "Does anyone want to\nhelp me write this? ",
    "start": "1640616",
    "end": "1648636"
  },
  {
    "text": "AUDIENCE: Maybe\ndoing once you're starting with the top array,\nand then finding the bottom one.",
    "start": "1648636",
    "end": "1654052"
  },
  {
    "text": "VICTOR COSTAN: Yeah. AUDIENCE: Oh, OK. Well, you just-- you\nstart with the first one and the one ahead of it.",
    "start": "1654052",
    "end": "1660444"
  },
  {
    "text": "And oh, I mean starting\nwith the top right. Sorry. VICTOR COSTAN: OK,\nso I have this.",
    "start": "1660444",
    "end": "1666399"
  },
  {
    "text": "And then what do I do? AUDIENCE: [INAUDIBLE]?",
    "start": "1666400",
    "end": "1671597"
  },
  {
    "text": "Oh, so you're starting\nfrom the back. VICTOR COSTAN: Yep. AUDIENCE: Well, then you just\ncompare that to-- I mean,",
    "start": "1671597",
    "end": "1680720"
  },
  {
    "text": "you're going to start\nwith zero difference. If you have-- well you don't\nhave any of those last keys,",
    "start": "1680720",
    "end": "1685820"
  },
  {
    "text": "so you'd be able to\nstart with a zero. VICTOR COSTAN: So what's\nthe difference between five here, which is n, and this guy?",
    "start": "1685820",
    "end": "1692780"
  },
  {
    "text": "What is this? AUDIENCE: It's going to be zero. VICTOR COSTAN: But what is it? Why is it zero? So this one's zero, this\none's one, this one's two.",
    "start": "1692780",
    "end": "1699350"
  },
  {
    "text": "What is this? It's the last guy here, right? AUDIENCE: Yeah, yeah. VICTOR COSTAN: So this\nis pass of n minus 1.",
    "start": "1699350",
    "end": "1709450"
  },
  {
    "text": "And this is pass of n minus\n2, so on and so forth. So to get from n\nto the value here,",
    "start": "1709450",
    "end": "1718419"
  },
  {
    "text": "I have to subtract this guy. ",
    "start": "1718420",
    "end": "1725417"
  },
  {
    "text": "AUDIENCE: Pass of i.  VICTOR COSTAN: Pass of i. ",
    "start": "1725417",
    "end": "1736264"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. ",
    "start": "1736264",
    "end": "1742681"
  },
  {
    "text": "VICTOR COSTAN: OK. Very good. AUDIENCE: And then update sum. Sum equals a pos value.",
    "start": "1742681",
    "end": "1750144"
  },
  {
    "text": " VICTOR COSTAN: Sweet. No temp variables, aside\nfrom this, I guess.",
    "start": "1750144",
    "end": "1757680"
  },
  {
    "text": "How does this look like? Do people get it? AUDIENCE: You're\nsubtracting positive i,",
    "start": "1757681",
    "end": "1762690"
  },
  {
    "text": "or you're subtracting a of i. AUDIENCE: It's all one array. AUDIENCE: It's the same thing.",
    "start": "1762690",
    "end": "1768120"
  },
  {
    "text": "That's right. VICTOR COSTAN: So a is this\narray. a is the input array. And pass is this guy.",
    "start": "1768120",
    "end": "1774370"
  },
  {
    "text": "And this is pass\nbefore the four loop. And this is pass\nafter the four loop. So I guess this is pass zero.",
    "start": "1774370",
    "end": "1781149"
  },
  {
    "text": "And this is pass one. And here, we start\nwith pass zero. This, we end up with pass one.",
    "start": "1781150",
    "end": "1788909"
  },
  {
    "text": "OK So we're able to compute this.",
    "start": "1788910",
    "end": "1795747"
  },
  {
    "text": "There are many ways of\ndoing this, but in the end, you want an array\nthat looks like that. This is counting sort.",
    "start": "1795747",
    "end": "1801379"
  },
  {
    "text": "This is the hard part of\ncounting sort, coming up with that array. Once you come up with\nthat array, you're golden.",
    "start": "1801379",
    "end": "1806980"
  },
  {
    "text": "So let's see that we're golden\nand produce an output array with the keys in\nthe right order.",
    "start": "1806980",
    "end": "1812500"
  },
  {
    "text": " So say we have an\narray called output.",
    "start": "1812500",
    "end": "1818050"
  },
  {
    "text": "And this is going to have\nthese keys in the right order. What's the pseudocode for that?",
    "start": "1818050",
    "end": "1824956"
  },
  {
    "text": "First, I'm going to\ncreate a new array. And I'm going to initialize\nit with n NIL values.",
    "start": "1824956",
    "end": "1832155"
  },
  {
    "text": " Then what do I do? ",
    "start": "1832155",
    "end": "1840390"
  },
  {
    "text": "AUDIENCE: Iterate over a. VICTOR COSTAN: Very good. For-- nah, it's too low.",
    "start": "1840390",
    "end": "1847350"
  },
  {
    "text": "Let's do it here. AUDIENCE: i of a. ",
    "start": "1847350",
    "end": "1853440"
  },
  {
    "text": "From zero to n minus 1. VICTOR COSTAN: OK.",
    "start": "1853440",
    "end": "1859659"
  },
  {
    "text": "What do I do?  AUDIENCE: Out of\n[INAUDIBLE] has to be-- oh,",
    "start": "1859660",
    "end": "1872961"
  },
  {
    "text": "can we modify pass one as we go? VICTOR COSTAN: Yeah. AUDIENCE: So you could\nsay, out of pos one--",
    "start": "1872962",
    "end": "1878750"
  },
  {
    "text": "VICTOR COSTAN: So by\nthe way, this is pos. The reason I label\nthem with zero and one, so we're doing the\nchange in place.",
    "start": "1878750",
    "end": "1883900"
  },
  {
    "text": "AUDIENCE: Right. VICTOR COSTAN: The\nreason I labeled them is to say that\nthis is what pos is before we going\ninto the loop.",
    "start": "1883900",
    "end": "1889590"
  },
  {
    "text": "This is what pos is afterwards. But it's a single array. So let's call it pos. So out of pos of--",
    "start": "1889590",
    "end": "1896455"
  },
  {
    "text": "AUDIENCE: Pos of i\nequals a to the i. ",
    "start": "1896455",
    "end": "1903281"
  },
  {
    "text": "Positive i plus pos squared. VICTOR COSTAN: Yup.",
    "start": "1903281",
    "end": "1908830"
  },
  {
    "text": "And I'm going to use\nthe CLRS, the way which makes me write more.",
    "start": "1908830",
    "end": "1914590"
  },
  {
    "text": " So how this work? I have the survey here.",
    "start": "1914590",
    "end": "1921710"
  },
  {
    "text": "I start at four. What's pos of four? ",
    "start": "1921710",
    "end": "1928582"
  },
  {
    "text": "AUDIENCE: Four. VICTOR COSTAN: All\nright, so I'm going to write this as position four.",
    "start": "1928582",
    "end": "1934519"
  },
  {
    "text": "I should probably make\nthis a proper array. One two, three, four, five.",
    "start": "1934520",
    "end": "1941510"
  },
  {
    "text": " So at four, I write four.",
    "start": "1941510",
    "end": "1946740"
  },
  {
    "text": "And then I increment\nthis guy to become five. ",
    "start": "1946740",
    "end": "1954820"
  },
  {
    "text": "Then I get to one. So I look at pos of-- AUDIENCE: One. VICTOR COSTAN: And that is zero.",
    "start": "1954820",
    "end": "1962800"
  },
  {
    "text": "So I'm going to write\none at position zero. And I'm going to increment it.",
    "start": "1962800",
    "end": "1970470"
  },
  {
    "text": "Then I get to 3a. I look at positive 3. It says 2. So I'm going to write 3a\nhere and increment this.",
    "start": "1970470",
    "end": "1978793"
  },
  {
    "text": " Then I get to two.",
    "start": "1978793",
    "end": "1984660"
  },
  {
    "text": "Pos of two is-- AUDIENCE: One. VICTOR COSTAN: One. So I write two here.",
    "start": "1984660",
    "end": "1990559"
  },
  {
    "text": "Pos of two becomes two. Then I have 3c, which\nis pos of 3 is now 3.",
    "start": "1990560",
    "end": "1999610"
  },
  {
    "text": "It's not two anymore. So yay, I'm not overwriting 3a. That's good.",
    "start": "1999610",
    "end": "2004960"
  },
  {
    "text": "And this becomes four. ",
    "start": "2004960",
    "end": "2011559"
  },
  {
    "text": "Are people getting what\njust happened here?  AUDIENCE: Wait, why didn't\n[INAUDIBLE] to just basically",
    "start": "2011559",
    "end": "2021250"
  },
  {
    "text": "train the next array\ninto an index binder? VICTOR COSTAN: Yep.",
    "start": "2021250",
    "end": "2026430"
  },
  {
    "text": "So this guy tells\nme if I have a key, where do I write it in here?",
    "start": "2026430",
    "end": "2032700"
  },
  {
    "text": "So these start out with pointers\nto the first element that would store that key value.",
    "start": "2032700",
    "end": "2038240"
  },
  {
    "text": "And when I store a key, say when\nI start 3a, when I get to 3c, I don't want to store\nit in the same place.",
    "start": "2038240",
    "end": "2043770"
  },
  {
    "text": "So I have to increment that. I have to say, yo, I\nwrote 3a at position two. So next time, write\nit-- next time you",
    "start": "2043770",
    "end": "2050510"
  },
  {
    "text": "see a three, right it at\nthe position following that. And that's what this guy does.",
    "start": "2050510",
    "end": "2056750"
  },
  {
    "text": " So this is the\nrelatively easy part.",
    "start": "2056750",
    "end": "2062710"
  },
  {
    "text": "And this is the hard\nmagic in counting sort. ",
    "start": "2062710",
    "end": "2070270"
  },
  {
    "text": "So how are people\nfeeling about it now? ",
    "start": "2070270",
    "end": "2075969"
  },
  {
    "text": "Any nods, or is still\nconfusing as hell? AUDIENCE: It's a lot. I'm confused.",
    "start": "2075969",
    "end": "2083340"
  },
  {
    "text": "VICTOR COSTAN: OK. Well what should we do? Do you guys want to\nask more questions?",
    "start": "2083340",
    "end": "2089690"
  },
  {
    "text": "Do you want to run\nthrough another example? Do you want to try to see how\nthis becomes useful in radix",
    "start": "2089690",
    "end": "2095750"
  },
  {
    "text": "sort, so that you're motivated\nto figure it out on your own? What would make more sense? All right.",
    "start": "2095750",
    "end": "2101070"
  },
  {
    "text": "Who wants to do more count sort? Who wants to do some radix sort.",
    "start": "2101070",
    "end": "2106200"
  },
  {
    "text": "All right. Radix sort it is.  Next time you want to move\non, tell me understood",
    "start": "2106200",
    "end": "2112440"
  },
  {
    "text": "and I'll believe you. And it'll look good on tape.  Two, three--",
    "start": "2112440",
    "end": "2118390"
  },
  {
    "text": "AUDIENCE: You're not\nsupposed to tell us that there's a camera in here. VICTOR COSTAN: One, four.",
    "start": "2118390",
    "end": "2124090"
  },
  {
    "text": "I think you're supposed to\nknow, because otherwise you don't know that we're\nviolating your rights.",
    "start": "2124091",
    "end": "2130410"
  },
  {
    "text": "Two, four-- AUDIENCE: This is out the door. VICTOR COSTAN: One, two, four,\nthree, two, one, four, three.",
    "start": "2130410",
    "end": "2144090"
  },
  {
    "text": "And one more. One, two, three, four. So this is to\nrefresh your memory.",
    "start": "2144090",
    "end": "2150150"
  },
  {
    "text": "What do keys look like\nin merge and radix sort? So in concert, the keys have to\nbe numbers from 0 to k minus 1.",
    "start": "2150150",
    "end": "2158580"
  },
  {
    "text": "How about merge sort? What do keys look like? ",
    "start": "2158580",
    "end": "2170560"
  },
  {
    "text": "So radix sort says that a\nkey is a sequence of digits.",
    "start": "2170560",
    "end": "2176080"
  },
  {
    "text": "Say you have d digits in a key. But then each digit isn't\nnecessarily a base 10 digit",
    "start": "2176080",
    "end": "2183880"
  },
  {
    "text": "like we're used to. Each digit is in base k. So each digit can be\nfrom 0 to k minus 1.",
    "start": "2183880",
    "end": "2191940"
  },
  {
    "text": "And we're using base k. How many keys can I\nrepresent this way?",
    "start": "2191940",
    "end": "2199230"
  },
  {
    "text": " So if you have numbers\nof n digits in base k,",
    "start": "2199230",
    "end": "2204310"
  },
  {
    "text": "what's the biggest number\nthat we can represent, or how many numbers can\nwe represent with that? AUDIENCE: n to the k.",
    "start": "2204310",
    "end": "2209796"
  },
  {
    "text": "No, d to the k. Right? VICTOR COSTAN: Almost.",
    "start": "2209796",
    "end": "2215690"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] the d.  VICTOR COSTAN: All right.",
    "start": "2215690",
    "end": "2221520"
  },
  {
    "text": "So if our base is two,\nlike if we're using bits, then our base is two. And if I have eight bits,\nthen two to the eight.",
    "start": "2221520",
    "end": "2228009"
  },
  {
    "text": " Cool. So if I add one\nmore digit, I get",
    "start": "2228010",
    "end": "2234490"
  },
  {
    "text": "to multiply the number\nof keys I represent by k.",
    "start": "2234490",
    "end": "2239800"
  },
  {
    "text": "How do I radix sort? Does anyone remember? AUDIENCE: We checked the\nlog base k of everything.",
    "start": "2239800",
    "end": "2248692"
  },
  {
    "text": "I guess log base d. Oh, k. It's based in--",
    "start": "2248692",
    "end": "2254190"
  },
  {
    "text": "VICTOR COSTAN: No. That would be hard math. We don't do hard math. In sorting, if you have\nintegers going into your sort,",
    "start": "2254190",
    "end": "2260340"
  },
  {
    "text": "you only do integer operations. You don't do anything\nmath beyond them. ",
    "start": "2260340",
    "end": "2271829"
  },
  {
    "text": "So what we do is we've\nbroken up the keys into d digits for a reason. We're going to have\nd rounds in the sort.",
    "start": "2271830",
    "end": "2279030"
  },
  {
    "text": "And in each round, we're\ngoing to take all the keys that we have.",
    "start": "2279030",
    "end": "2284200"
  },
  {
    "text": "And we're going to sort them\naccording to one of the digits. So in one round, we'll sort\nthem according to this digit.",
    "start": "2284200",
    "end": "2291800"
  },
  {
    "text": "In one round, we'll\nsort them according to this digit, this\ndigit, this digit. ",
    "start": "2291800",
    "end": "2298750"
  },
  {
    "text": "Which digit do we start with? What do you guys think? AUDIENCE: To least\nsignificant digit, right?",
    "start": "2298750",
    "end": "2303900"
  },
  {
    "text": "AUDIENCE: And most\nsignificant on the left. ",
    "start": "2303900",
    "end": "2309829"
  },
  {
    "text": "VICTOR COSTAN: So this or this? AUDIENCE: The right side. AUDIENCE: 100 is\nbigger than 1, even",
    "start": "2309830",
    "end": "2316180"
  },
  {
    "text": "though the 1 is greater\nthan the 0 in 100.",
    "start": "2316180",
    "end": "2321219"
  },
  {
    "text": "VICTOR COSTAN: You're\nhelping me out. So the point I'm\ntrying to make here is radix sort is unintuitive.",
    "start": "2321219",
    "end": "2327280"
  },
  {
    "text": "If we ask you on a quiz\nwhat do you start with, your intuition will\ntell you to start with the most significant digit.",
    "start": "2327280",
    "end": "2332460"
  },
  {
    "text": "Go against it. In radix sort, you start with\nthe least significant digit and then move your way out.",
    "start": "2332460",
    "end": "2337850"
  },
  {
    "text": "So radix sort goes like this. AUDIENCE: I mean,\nit does make sense,",
    "start": "2337850",
    "end": "2343874"
  },
  {
    "text": "because you don't have very\nmuch information unless you're looking at bits. You can get a bunch\nof twos, but that",
    "start": "2343874",
    "end": "2349176"
  },
  {
    "text": "doesn't give you\nmuch information. The most information\nis the smallest bit. And then you move up from there.",
    "start": "2349176",
    "end": "2354671"
  },
  {
    "text": "VICTOR COSTAN: It\ndepends what information you're trying to get. But maybe you know the\nalgorithm, so you're thinking,",
    "start": "2354671",
    "end": "2360810"
  },
  {
    "text": "oh, by knowing the\nalgorithm, I know that I'll have the\nmost information by looking at it this way.",
    "start": "2360810",
    "end": "2366300"
  },
  {
    "text": "All right, so let's sort\nthese by the last digit. Sweet. Let's sort them by the\ndigit, by the digit",
    "start": "2366300",
    "end": "2373660"
  },
  {
    "text": "before the last digit. What do I have to\ndo in my sorting? What do I have to\npay attention to?",
    "start": "2373660",
    "end": "2379480"
  },
  {
    "text": " So the sorting method that I\nuse has to have a property.",
    "start": "2379480",
    "end": "2386279"
  },
  {
    "text": "It can't be any kind of sorting.  Stable. ",
    "start": "2386280",
    "end": "2395460"
  },
  {
    "text": "So the reason we went through\nall this pain in counting sort is because we want to\nhave a stable sort here.",
    "start": "2395460",
    "end": "2400840"
  },
  {
    "text": "Now, let's try to sort\nthese in a stable manner. This is the first one,\ntwo, four, one, three.",
    "start": "2400840",
    "end": "2409110"
  },
  {
    "text": "Then I have two threes, so one,\nfour, three, two, one, two,",
    "start": "2409110",
    "end": "2415854"
  },
  {
    "text": "three, four. And then I have three fours. Two, three, four, one.",
    "start": "2415854",
    "end": "2422160"
  },
  {
    "text": "Two, four, one, three. Two, one, four, three.",
    "start": "2422160",
    "end": "2427319"
  },
  {
    "text": "Way this isn't good. ",
    "start": "2427320",
    "end": "2432860"
  },
  {
    "text": "Two, three, four, one. One, two, four, three. AUDIENCE: You should cross them\noff if you write them down.",
    "start": "2432860",
    "end": "2438718"
  },
  {
    "text": "VICTOR COSTAN: I should.  I was hoping you guys\nwould help me if I mess up.",
    "start": "2438718",
    "end": "2447020"
  },
  {
    "text": "So now these are sorted stably. Let's look at these last three\nthat have the same digit here.",
    "start": "2447020",
    "end": "2453329"
  },
  {
    "text": "So they have the same four. If you look at the\nlast digit, because I used a stable\nsorting, they're also",
    "start": "2453330",
    "end": "2459850"
  },
  {
    "text": "sorted according\nto this last digit. So they're sorted according\nto these last two digits,",
    "start": "2459850",
    "end": "2465770"
  },
  {
    "text": "because the sorting\nthat I used is stable. So now if I sort\naccording to this digit,",
    "start": "2465770",
    "end": "2471740"
  },
  {
    "text": "then if my sorting\nis stable, they're going to be sorted according\nto the last three digits.",
    "start": "2471740",
    "end": "2477350"
  },
  {
    "text": "So as I go from my last\ndigit to my first digit, the keys are going to\nbe sorted according",
    "start": "2477350",
    "end": "2483300"
  },
  {
    "text": "to the last digit, the last\ntwo digits, the last three digits, and then all the\nway up to everything. This is why I need\na stable sort.",
    "start": "2483300",
    "end": "2489760"
  },
  {
    "text": "And also, this is why I\nneed to start from the end. ",
    "start": "2489760",
    "end": "2500160"
  },
  {
    "text": "Does this make some sense? What stable sort\ndid we just learn?",
    "start": "2500160",
    "end": "2506750"
  },
  {
    "text": "AUDIENCE: Counting. VICTOR COSTAN: Counting sort. All right. So we're going to use\ncounting sort for this.",
    "start": "2506750",
    "end": "2512930"
  },
  {
    "text": "What's the running\ntime for one round? So for one sorting. One counting sort\ntakes how much time?",
    "start": "2512930",
    "end": "2519220"
  },
  {
    "text": " AUDIENCE: This is a radix sort.",
    "start": "2519220",
    "end": "2524559"
  },
  {
    "text": "VICTOR COSTAN: Yes. So radix sort is d\nrounds of counting sort. Count sort this,\ncount sort this,",
    "start": "2524559",
    "end": "2530320"
  },
  {
    "text": "count sort this,\ncount sort this. So one round, one counting\nsort, what's the running time?",
    "start": "2530320",
    "end": "2535549"
  },
  {
    "text": " AUDIENCE: [INAUDIBLE]. VICTOR COSTAN: Thank you.",
    "start": "2535550",
    "end": "2540651"
  },
  {
    "text": " Now how about d of these\nplus the running time?",
    "start": "2540651",
    "end": "2551750"
  },
  {
    "text": "AUDIENCE: dn plus b. ",
    "start": "2551750",
    "end": "2560480"
  },
  {
    "text": "VICTOR COSTAN: OK, but I\nwant to come back here. And I want to be able to say\nthat radix sort is optimal.",
    "start": "2560480",
    "end": "2566450"
  },
  {
    "text": "I want to be able to\nsay that it is order n. So what do I have to do in\norder to be able to say that?",
    "start": "2566450",
    "end": "2573635"
  },
  {
    "start": "2573635",
    "end": "2578810"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]\nk equal to m. VICTOR COSTAN: So you're going\nfrom-- you know the answer.",
    "start": "2578810",
    "end": "2585450"
  },
  {
    "text": "You're going from the fact\nthat you know the answer. AUDIENCE: [INAUDIBLE]. VICTOR COSTAN: OK, very good. What if we wouldn't\nknow the answer?",
    "start": "2585450",
    "end": "2591010"
  },
  {
    "text": "What do I need to do? AUDIENCE: Well, we know\nthe first part is order n. So--",
    "start": "2591010",
    "end": "2596189"
  },
  {
    "text": "VICTOR COSTAN: So d has to be-- AUDIENCE: We want dn to\nbe greater than dk, right?",
    "start": "2596189",
    "end": "2601400"
  },
  {
    "text": "VICTOR COSTAN: Well, so dn. dn has to be, at\nmost, o of n, right.",
    "start": "2601400",
    "end": "2606817"
  },
  {
    "text": "Because otherwise, the\nwhole thing would go above. So that wouldn't work. So then what can I say about d?",
    "start": "2606817",
    "end": "2614000"
  },
  {
    "text": "AUDIENCE: Constant. VICTOR COSTAN: Very good. And how do you write\nconstants in math mode? AUDIENCE: Order one.",
    "start": "2614000",
    "end": "2619509"
  },
  {
    "text": "VICTOR COSTAN: Very good. So d has to be order one. Otherwise, it's not going\nto come out to that.",
    "start": "2619509",
    "end": "2624980"
  },
  {
    "text": "Now, what else do we know? We have this that's\norder n plus k.",
    "start": "2624980",
    "end": "2630700"
  },
  {
    "text": "If I said this to be\na lot smaller than k, if I set it to be log n,\nit's going to be order n.",
    "start": "2630700",
    "end": "2636819"
  },
  {
    "text": "If I set it k to be a\nconstant, if I use bits,",
    "start": "2636820",
    "end": "2641900"
  },
  {
    "text": "if I use base 2-- so I said\nk equal 2-- this is still going to be order n.",
    "start": "2641900",
    "end": "2647080"
  },
  {
    "text": "So if k goes way\nbelow n, this step is still going to be order n. So I might as well set\nk as high as possible.",
    "start": "2647080",
    "end": "2653975"
  },
  {
    "text": " So k is order n, because\nthat's the highest",
    "start": "2653975",
    "end": "2661330"
  },
  {
    "text": "thing I could set it to. Now why do I want to do that? Yes, you have a ques--",
    "start": "2661330",
    "end": "2666374"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] represent\nin counting sort again? The length of what? VICTOR COSTAN: So\nin counting sort,",
    "start": "2666374",
    "end": "2672810"
  },
  {
    "text": "n is your input, how\nmany keys you have. And k is the size of this array.",
    "start": "2672810",
    "end": "2681150"
  },
  {
    "text": "AUDIENCE: Oh, OK. VICTOR COSTAN: So you\nhave to be able to map your keys from 0 to k minus 1. AUDIENCE: It's set\nby n, basically.",
    "start": "2681150",
    "end": "2686962"
  },
  {
    "text": "Or it's set by the elements. VICTOR COSTAN: Yeah. It's set by the\nnature of the keys. AUDIENCE: OK. Got it. VICTOR COSTAN: So\nin real life, we're",
    "start": "2686962",
    "end": "2692451"
  },
  {
    "text": "thinking maybe we have some huge\nnumbers that we want to sort. And we're going to chunk\nthem up into-- when we're",
    "start": "2692451",
    "end": "2697830"
  },
  {
    "text": "writing on the\nboard, we always have to chunk them up\nin base 10 digits, because that's the only\nway we know how to write.",
    "start": "2697830",
    "end": "2702870"
  },
  {
    "text": "But in a computer memory, we\ncan chunk them up into, say, base 10,000 digits.",
    "start": "2702870",
    "end": "2708440"
  },
  {
    "text": "And the fewer digits\nyou have, the faster this is going to run. So we have to figure\nout what's the base.",
    "start": "2708440",
    "end": "2714480"
  },
  {
    "text": "And it turns out\nthat if you want to have radix sort run\nin order and time, well,",
    "start": "2714480",
    "end": "2719680"
  },
  {
    "text": "the number of digits has\nto be sort of constant. I know that k should\nbe order n, because I",
    "start": "2719680",
    "end": "2727210"
  },
  {
    "text": "have no interest in\nmaking it lower than that. So these two bounds\ntogether tell me that the keys that I\ncan sort are from zero",
    "start": "2727210",
    "end": "2736666"
  },
  {
    "text": "up to order n of order one.",
    "start": "2736666",
    "end": "2742610"
  },
  {
    "text": "And this looks terrible,\nbut what it comes up to is that you can\nsort keys that look",
    "start": "2742610",
    "end": "2749690"
  },
  {
    "text": "like n to some constant\nfor any constant. ",
    "start": "2749690",
    "end": "2755630"
  },
  {
    "text": "So you can sort huge keys,\nas long as huge still means finite. ",
    "start": "2755630",
    "end": "2764070"
  },
  {
    "text": "And as long as you can figure\nout how to map them to numbers. ",
    "start": "2764070",
    "end": "2770060"
  },
  {
    "text": "Does this make some sense? Would we ever want to use merge\nsort instead of counting sort?",
    "start": "2770060",
    "end": "2775950"
  },
  {
    "text": "Suppose we had a\nstable merge sort. Would we want to use that\ninstead of counting sort here?",
    "start": "2775950",
    "end": "2784071"
  },
  {
    "text": "What would happen? ",
    "start": "2784071",
    "end": "2792300"
  },
  {
    "text": "So suppose it's stable. So it's correct. The algorithm isn't\ngoing to blow up. What's the running\ntime for merge sort? ",
    "start": "2792300",
    "end": "2804380"
  },
  {
    "text": "So if I use a merge sort. So if I use the merge sort, it's\ngoing to be d times n log n.",
    "start": "2804380",
    "end": "2810759"
  },
  {
    "text": "So no matter how\nsmall d is, I'm still not running in linear time. So merge sort does not\ngo well with radix sort.",
    "start": "2810760",
    "end": "2817657"
  },
  {
    "text": " So from my end, we're\npretty much done.",
    "start": "2817657",
    "end": "2823280"
  },
  {
    "text": "We started with n log n. And we got to a sorting\nalgorithm that's order n. We started at the beginning\nof [INAUDIBLE], saying",
    "start": "2823280",
    "end": "2830300"
  },
  {
    "text": "that the best thing\nwe can do is omega-- is that omega-- omega of n. We got to that limit.",
    "start": "2830300",
    "end": "2836051"
  },
  {
    "text": "We're happy. We're going to be\ndone with sorting. Any questions from you guys? ",
    "start": "2836051",
    "end": "2843911"
  },
  {
    "text": "That means everyone's\nconfused, right? Yes, thank you. AUDIENCE: Can you explain\nwhat the stability criteria is again?",
    "start": "2843912",
    "end": "2849512"
  },
  {
    "text": "VICTOR COSTAN: The-- AUDIENCE: Stability for\nthese sorting algorithms.",
    "start": "2849512",
    "end": "2854990"
  },
  {
    "text": "Which ones are stable and\nwhat makes it unstable? VICTOR COSTAN: All\nright, very good. Thank you. So I like especially\nthe last part,",
    "start": "2854990",
    "end": "2861420"
  },
  {
    "text": "with which ones are stable. I'd like to go through that. So a stable sorting\nalgorithm means that if you have two\nkeys that are equal,",
    "start": "2861420",
    "end": "2869299"
  },
  {
    "text": "the key that shows\nup first in the input is the key that is\nproduced to the output.",
    "start": "2869300",
    "end": "2875609"
  },
  {
    "text": "So in this model, your keys\nare not necessarily integers. Your keys might be\nthose weird classes",
    "start": "2875610",
    "end": "2880950"
  },
  {
    "text": "that implement some method\nthat maps them to integers. So say there is a\nmethod there, __int__,",
    "start": "2880950",
    "end": "2888664"
  },
  {
    "text": "that gives you the\ninteger for that. So the sorting algorithm\nwould only see a three here.",
    "start": "2888665",
    "end": "2894750"
  },
  {
    "text": "But in fact, this\nis a complex object. And this is another\ncomplex object, but the sorting\nonly sees the three.",
    "start": "2894750",
    "end": "2901690"
  },
  {
    "text": "If this guy shows up before\nthis guy in the input, they have to show up in the\nsame order in the output.",
    "start": "2901690",
    "end": "2908277"
  },
  {
    "text": "AUDIENCE: Why would that\nbe bad if they're switched? VICTOR COSTAN: It's not stable.",
    "start": "2908278",
    "end": "2914730"
  },
  {
    "text": "If they're switched, then when\nwe're using a stable sorting",
    "start": "2914730",
    "end": "2919900"
  },
  {
    "text": "algorithm here. So here, the key is\nthis complicated object.",
    "start": "2919900",
    "end": "2926050"
  },
  {
    "text": "But say we're in\nthe second round. We're in this round,\nwhich we played with. Even though the key is this\nwhole complicated object,",
    "start": "2926050",
    "end": "2932730"
  },
  {
    "text": "the only thing that the counting\nsort sees is this number. ",
    "start": "2932730",
    "end": "2938400"
  },
  {
    "text": "So this guy looks like three. This guy looks like three. And these three guys,\nalthough they're different,",
    "start": "2938400",
    "end": "2944309"
  },
  {
    "text": "they look like four. If I don't output them\nin the right order--",
    "start": "2944310",
    "end": "2949480"
  },
  {
    "text": "say I output this one all\nthe way at the end-- then I'm going to get two, three,\nfour, one to be down here.",
    "start": "2949480",
    "end": "2956550"
  },
  {
    "text": "And now my numbers aren't sorted\nby the last two digits anymore. So it breaks any algorithm\nthat assumes stability.",
    "start": "2956550",
    "end": "2963440"
  },
  {
    "text": "So stability is something\nthat you get from a sort, because it's\nconvenient to assume it in some other algorithm\nthat builds up on that sort.",
    "start": "2963440",
    "end": "2970579"
  },
  {
    "text": "If you don't need it,\nyou don't care about it. But in some cases, you need it. And for the second part,\nwhich algorithms are stable.",
    "start": "2970580",
    "end": "2977915"
  },
  {
    "text": " Is insertion sort stable? ",
    "start": "2977915",
    "end": "2986968"
  },
  {
    "text": "AUDIENCE: I assume so. I mean, stable is\nbeing correct, right? VICTOR COSTAN: No. We mean that property there.",
    "start": "2986968",
    "end": "2993482"
  },
  {
    "text": "AUDIENCE: Oh, I see. You mean in order. VICTOR COSTAN: Yep. AUDIENCE: Oh, OK. ",
    "start": "2993482",
    "end": "3000927"
  },
  {
    "text": "Insertion sort goes in order. But I guess it could push\nother things out of order.",
    "start": "3000927",
    "end": "3006076"
  },
  {
    "text": "VICTOR COSTAN: So\ninsertion sort, you're doing swapping to\nmove things to the left. But if you find two\nthings that are equal,",
    "start": "3006076",
    "end": "3011480"
  },
  {
    "text": "you're never going to swap them. So insertion sort is\nin order, is stable.",
    "start": "3011480",
    "end": "3018760"
  },
  {
    "text": "Merge sort, the one we gave\nyou in that list is not stable. But there is the one character\nchange that makes it stable.",
    "start": "3018760",
    "end": "3025907"
  },
  {
    "text": "And you should look at\ntoday's lecture notes to find out what that is. So merge sort can be stable.",
    "start": "3025907",
    "end": "3031580"
  },
  {
    "text": "Heapsort, stable or unstable? ",
    "start": "3031580",
    "end": "3037040"
  },
  {
    "text": "Unstable. And there's a\nreally small example that you should look at. Counting sort,\nstable or unstable?",
    "start": "3037040",
    "end": "3043470"
  },
  {
    "text": "AUDIENCE: Stable. VICTOR COSTAN: Thank you. It would have broken my heart if\nthis would have come out wrong.",
    "start": "3043470",
    "end": "3048700"
  },
  {
    "text": "And radix sort? AUDIENCE: Probably. Yes.",
    "start": "3048700",
    "end": "3054417"
  },
  {
    "text": "VICTOR COSTAN:\nProbably stable, right? All right. Any more questions? I like that question by the way,\nbecause you made me do this.",
    "start": "3054417",
    "end": "3060980"
  },
  {
    "text": "I like that. Any more questions? ",
    "start": "3060980",
    "end": "3066070"
  },
  {
    "text": "All right, thank you guys.",
    "start": "3066070",
    "end": "3068390"
  }
]