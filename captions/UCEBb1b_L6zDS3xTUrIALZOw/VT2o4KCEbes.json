[
  {
    "start": "0",
    "end": "156000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "7180"
  },
  {
    "text": "continue to offer high-quality\neducational resources for free. To make a donation or to\nview additional materials",
    "start": "7180",
    "end": "13840"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13840",
    "end": "23360"
  },
  {
    "text": "NEHA NARULA: OK,\nlet's get started. I hope everybody had\na great long weekend.",
    "start": "23360",
    "end": "28740"
  },
  {
    "text": "So I'm teaching\ntoday, and today we're going to be talking\nabout transactions.",
    "start": "28740",
    "end": "33990"
  },
  {
    "text": "So just to recap where\nwe've been so far, Tadge just sort of explained\nsignatures in Bitcoin,",
    "start": "33990",
    "end": "42260"
  },
  {
    "text": "in particular RSA and ECDSA,\nand told us a little bit about Merkle trees.",
    "start": "42260",
    "end": "47390"
  },
  {
    "text": "And so these are some of\nthe underlying primitives that we need to\nknow about in order",
    "start": "47390",
    "end": "52579"
  },
  {
    "text": "to understand how most\nof the blockchains today are constructed. So we've spent a bit of time\ntalking about the underlying",
    "start": "52580",
    "end": "59240"
  },
  {
    "text": "primitives, now let's start to\nput them together a little bit to understand what\ngoes into a blockchain.",
    "start": "59240",
    "end": "66740"
  },
  {
    "text": "So if you recall,\nthis is a slide that Tadge has shown before. And I'm really sorry about this\nquadrant, but I don't know,",
    "start": "66740",
    "end": "73600"
  },
  {
    "text": "I don't think I can\ncontrol this individually. So we'll definitely post\nthe slides of course, but let me know if something\nis really confusing.",
    "start": "73600",
    "end": "80600"
  },
  {
    "text": "Just raise your hand. So this is something that\nyou guys have seen before, and it's like a very sort\nof rough approximation",
    "start": "80600",
    "end": "87980"
  },
  {
    "text": "of a hash chain. So what we have\nhere is we have-- this doesn't actually\nshow the previous,",
    "start": "87980",
    "end": "93980"
  },
  {
    "text": "but what we have here\nis we have some message, we have a nonce, such that\nwhen you hash these three things together, you\nget this hash value,",
    "start": "93980",
    "end": "101660"
  },
  {
    "text": "which has a certain number of\nleading zeros at the beginning. In this case, it's\ntwo leading zeros. And when we construct\nthe next block,",
    "start": "101660",
    "end": "108799"
  },
  {
    "text": "we implicitly point\nto this previous block by including that hash inside of\nthis when we produce this hash.",
    "start": "108800",
    "end": "117860"
  },
  {
    "text": "So note that there\nisn't actually a physical pointer\nor a memory address",
    "start": "117860",
    "end": "123590"
  },
  {
    "text": "pointer type thing connecting\nthese two things together. And note that this\nblock does not actually contain the hash of itself.",
    "start": "123590",
    "end": "131599"
  },
  {
    "text": "But we are sort of\nimplicitly pointing to this by including the hash of this\nblock in the following block.",
    "start": "131600",
    "end": "138650"
  },
  {
    "text": "And so on over here-- again,\nthis is a different message, a different nonce,\nand it includes",
    "start": "138650",
    "end": "144140"
  },
  {
    "text": "the hash of this block\ninstead of the one before. And by including the\nhash of this block,",
    "start": "144140",
    "end": "149480"
  },
  {
    "text": "it's also implicitly including\nthe hash of this block, because that's right here. And so what we're going to see\nis that if you change anything",
    "start": "149480",
    "end": "158210"
  },
  {
    "start": "156000",
    "end": "156000"
  },
  {
    "text": "about the previous blocks in\nthe blockchain-- for example, if you change this message-- then you're going to need\nto change the nonce in order",
    "start": "158210",
    "end": "167065"
  },
  {
    "text": "to get the hash\nto compute right. That's going to be\na different hash. And that change is\ngoing to trickle down",
    "start": "167065",
    "end": "172740"
  },
  {
    "text": "through the entire blockchain. And so that's what\nmakes these things what we call tamper-proof, the fact\nthat there are these hashes,",
    "start": "172740",
    "end": "179510"
  },
  {
    "text": "these hashes are\ncollision-resistant. And so it's very difficult. You\ncan't change what's in the past",
    "start": "179510",
    "end": "188599"
  },
  {
    "text": "without having it\nreflected in the future. So now let's go into\na little bit more",
    "start": "188600",
    "end": "194870"
  },
  {
    "text": "detail about exactly what\nthis message thing is. We've talked about the\nprevious hash pointers,",
    "start": "194870",
    "end": "201872"
  },
  {
    "text": "we've talked about\nthe nonce, we've talked about proof of work. But what actually goes\ninside of a block? Well, we have this\ngeneral-- we've",
    "start": "201872",
    "end": "208657"
  },
  {
    "text": "kind of been alluding\nto it, but what goes inside a block\nare transactions. We're trying to build\na payment system here.",
    "start": "208658",
    "end": "214580"
  },
  {
    "start": "214000",
    "end": "214000"
  },
  {
    "text": "So what do we need to\nhave in a transaction? What should a\ntransaction look like?",
    "start": "214580",
    "end": "219770"
  },
  {
    "text": " Yes. AUDIENCE: Inputs and outputs.",
    "start": "219770",
    "end": "224840"
  },
  {
    "text": "NEHA NARULA: OK,\ninputs and outputs. Maybe even like a higher\nlevel here, semantically, what do we want\nin a transaction?",
    "start": "224840",
    "end": "232524"
  },
  {
    "text": "Yep. AUDIENCE: A sender, a receiver,\nan amount, like a message. NEHA NARULA: OK, a sender,\na receiver, an amount.",
    "start": "232524",
    "end": "239180"
  },
  {
    "text": "Anybody else? AUDIENCE: Transaction ID. NEHA NARULA: OK, an ID,\nsome way of referencing it.",
    "start": "239180",
    "end": "245270"
  },
  {
    "text": "Anybody else. Yep. AUDIENCE: A proof that\nit's a legit transaction.",
    "start": "245270",
    "end": "251260"
  },
  {
    "text": "NEHA NARULA: A proof that it's\na legit transaction, right, exactly. So what we need is those\nthings that you guys just said.",
    "start": "251260",
    "end": "258130"
  },
  {
    "text": "We need to know the amount,\nhow much of this coin we're transferring, we need to\nknow where it's coming from,",
    "start": "258130",
    "end": "263620"
  },
  {
    "text": "and in particular we need an\nauthorization of some sort that that user actually\nauthorized the spend,",
    "start": "263620",
    "end": "269792"
  },
  {
    "text": "and we need who we're paying. And so unfortunately\nthis is in the dark part, but this is sort of a little\nrough sketch of a transaction.",
    "start": "269792",
    "end": "277240"
  },
  {
    "text": "And we have Alice who's\nspending $5.00 to Bob, and we have this\nauthorization here.",
    "start": "277240",
    "end": "283915"
  },
  {
    "text": "And this authorization, given we\njust learned about signatures, signatures are a great\nway to do authorization because it's something that\nonly Alice can produce.",
    "start": "283915",
    "end": "292030"
  },
  {
    "text": "So I don't know if\nyou can see this, but there are\nquestion marks here. So what should Alice\nsign to show that she",
    "start": "292030",
    "end": "298569"
  },
  {
    "text": "authorized this transaction? What do you think\nwould be a good thing-- what is a good message\nfor her to sign",
    "start": "298570",
    "end": "304750"
  },
  {
    "text": "for her to indicate her\nauthority, her desire to produce this transaction\nand spend her funds?",
    "start": "304750",
    "end": "311840"
  },
  {
    "text": "AUDIENCE: Private key. NEHA NARULA: Her private key? AUDIENCE: Yeah. NEHA NARULA: She should\nsign her private key?",
    "start": "311840",
    "end": "317785"
  },
  {
    "text": "OK. AUDIENCE: [INAUDIBLE]\nthe whole transaction. NEHA NARULA: The\nwhole transaction, OK.",
    "start": "317785",
    "end": "324220"
  },
  {
    "text": "So let's talk about\nsigning the private key. Let's say that she did\nsign her private key.",
    "start": "324220",
    "end": "329710"
  },
  {
    "text": "The problem with a\nsignature is that, in order to tell if the\nsignature is valid, you need the thing\nthat you signed.",
    "start": "329710",
    "end": "335289"
  },
  {
    "text": "So she would have to include her\nprivate key, which would then share her private key with\neveryone, which isn't really",
    "start": "335290",
    "end": "340330"
  },
  {
    "text": "a good way for her to use\nher public and private key. She could certainly\nsign the transaction.",
    "start": "340330",
    "end": "345840"
  },
  {
    "text": "And the nice thing about\nsigning the transaction-- this is all blue, indicating\nthat she's signing it-- is that she's signing all\nthree of these things as well.",
    "start": "345840",
    "end": "354340"
  },
  {
    "text": "She's saying, I want to pay\nBob, I want to pay Bob $5. Now what's the problem with\nsigning the transaction?",
    "start": "354340",
    "end": "362390"
  },
  {
    "text": "Yes. AUDIENCE: Couldn't you just\nkeep using it if you were Bob? NEHA NARULA: So that is an\nexcellent point-- you could keep using it if you were Bob.",
    "start": "362390",
    "end": "368730"
  },
  {
    "text": "And we'll get into that\na little bit later. But another problem\nhere is, the way that I've shown it right now,\nshe's signing the signature.",
    "start": "368730",
    "end": "375898"
  },
  {
    "text": "The signature is kind of\npart of the transaction. And so you want to make\nsure that you're not-- when you sign a\ntransaction, you're",
    "start": "375898",
    "end": "381960"
  },
  {
    "text": "signing everything but\nthe signature, right, because you can't\nproduce the signature. You can't sign the\nsignature without knowing",
    "start": "381960",
    "end": "388110"
  },
  {
    "text": "what the signature is. It would be like a whole\nnew type of proof of work on the transaction. So I don't know if\nyou can see this,",
    "start": "388110",
    "end": "393540"
  },
  {
    "text": "but this says transaction\nminus signature. And in fact, we can even\nmake that a little bit easier",
    "start": "393540",
    "end": "399630"
  },
  {
    "text": "by turning that into a\nhash of the transaction, not including the signature.",
    "start": "399630",
    "end": "404670"
  },
  {
    "text": "Because that sort of\nbrings the message down to a smaller thing. And from what we know about\nhash functions you can't really,",
    "start": "404670",
    "end": "412440"
  },
  {
    "text": "given a message and a\nhash of that message, it's difficult to produce\nanother message that",
    "start": "412440",
    "end": "418949"
  },
  {
    "text": "would hash to the same thing. So this hash serves as\nkind of an identifier for the transaction as a whole.",
    "start": "418950",
    "end": "424870"
  },
  {
    "text": "In fact, Bitcoin uses the hash\nof this as the transaction ID. So this is how we\nrefer to transactions.",
    "start": "424870",
    "end": "430410"
  },
  {
    "text": "And it's a nice\nsmall thing to sign, which indicates Alice's\nintent to spend her funds.",
    "start": "430410",
    "end": "438120"
  },
  {
    "text": "So one thing that I kind of\nwant to go into a little bit is that there's a couple\ndifferent ways for thinking",
    "start": "438120",
    "end": "444060"
  },
  {
    "text": "about transactions, and\nwhat transactions actually look like, and how\nthey're stored, and how we sort\nof specify coins.",
    "start": "444060",
    "end": "450420"
  },
  {
    "text": "And the most natural model, to\nme, anyway, not to everybody, perhaps, is what I call\nthe account-based model.",
    "start": "450420",
    "end": "457920"
  },
  {
    "start": "456000",
    "end": "456000"
  },
  {
    "text": "So it's kind of like what\nwe were doing before, when we saw the\nbanks, and we were talking about\nbanks keeping track",
    "start": "457920",
    "end": "463800"
  },
  {
    "text": "of how much funds people have. And this is sort of how you and\nI might think of our own bank accounts. I think in my bank account\nas having a certain amount",
    "start": "463800",
    "end": "470838"
  },
  {
    "text": "of funds in it. And so in the\naccount-based model, users have certain amounts\nor balances associated",
    "start": "470838",
    "end": "477840"
  },
  {
    "text": "with their usernames. And when a transaction comes in,\nlike Alice wants to give $5.00",
    "start": "477840",
    "end": "484380"
  },
  {
    "text": "to Bob, then what might\nhappen is that the nodes in the network which are all\nmaintaining, in a unified way,",
    "start": "484380",
    "end": "491040"
  },
  {
    "text": "this balance sheet,\nwill end up saying, OK, Alice had 10 and Bob had zero. Alice wants to\ngive $5.00 to Bob.",
    "start": "491040",
    "end": "497340"
  },
  {
    "text": "Let's subtract $5.00 from\nAlice's account and give it to Bob. And so what the\nnodes would do here",
    "start": "497340",
    "end": "503160"
  },
  {
    "text": "to see if this transaction\nwas valid would be they would check the\nsignature to make sure that Alice actually\nauthorized this transaction,",
    "start": "503160",
    "end": "510780"
  },
  {
    "text": "and they would also\nmake sure that Alice had the funds to spend. And in the account-based\nmodel, the way",
    "start": "510780",
    "end": "518460"
  },
  {
    "text": "that you check to see\nif Alice has the funds to spend as you literally\nlook at her balance, and you look at the\namount she wants to spend,",
    "start": "518460",
    "end": "525089"
  },
  {
    "text": "and you make sure that if\nshe spends that amount, the balance won't go below zero.",
    "start": "525090",
    "end": "530160"
  },
  {
    "text": "So this is actually the\nmodel that Ethereum uses. It's not the model\nthat Bitcoin uses.",
    "start": "530160",
    "end": "537450"
  },
  {
    "text": "So just sort of\nto summarize, you store a list of\naccounts and balances, a transaction is valid if there\nis a balance in the account,",
    "start": "537450",
    "end": "545580"
  },
  {
    "text": "and then when a\ntransaction is processed, you debit the sender and\ncredit the receiver-- so",
    "start": "545580",
    "end": "551400"
  },
  {
    "text": "very straightforward. So like I said, this is\na way Ethereum works,",
    "start": "551400",
    "end": "557970"
  },
  {
    "text": "and it's a little\nbit more natural, I think, to think about. But this is not the way\nBitcoin works, actually.",
    "start": "557970",
    "end": "563560"
  },
  {
    "text": "Bitcoin has a very\ndifferent model of coins and of transactions.",
    "start": "563560",
    "end": "568770"
  },
  {
    "text": "And I think-- when I was\nlearning about how Bitcoin worked and how\nEthereum worked, I",
    "start": "568770",
    "end": "575490"
  },
  {
    "text": "found Bitcoin's model\na little bit unnatural until I went through\nthis exercise of thinking about something\ncalled replay attacks.",
    "start": "575490",
    "end": "582699"
  },
  {
    "text": "And this is what [? Issan ?]\nmentioned earlier, which is when you have\nthis transaction,",
    "start": "582700",
    "end": "587940"
  },
  {
    "start": "583000",
    "end": "583000"
  },
  {
    "text": "and you send it to the\nnetwork, and the network processes the transaction\nand debits Alice and credits",
    "start": "587940",
    "end": "594380"
  },
  {
    "text": "Bob, what is to prevent a\nmalicious agent from noticing that transaction and\nrebroadcasting it again",
    "start": "594380",
    "end": "602550"
  },
  {
    "text": "to the network, so basically\nrepeatedly debiting Alice until she doesn't\nhave any funds left.",
    "start": "602550",
    "end": "609089"
  },
  {
    "text": "So can you guys think of a\nway to maybe get around this? What would you do? How would you prevent\nthis replay attack?",
    "start": "609090",
    "end": "617480"
  },
  {
    "text": "Yeah. AUDIENCE: She can add a specific\nID to the time, for instance, [INAUDIBLE]",
    "start": "617480",
    "end": "625490"
  },
  {
    "text": "NEHA NARULA: So one thing\nis adding a time, sure. Time is a little bit tricky\nbecause of the nature",
    "start": "625490",
    "end": "631780"
  },
  {
    "text": "of the system. But a time is a\npretty good idea. A unique number of\nsome kind certainly",
    "start": "631780",
    "end": "638800"
  },
  {
    "text": "would help, because that\nway if you saw a transaction with the same number,\nthen you'd know,",
    "start": "638800",
    "end": "644889"
  },
  {
    "text": "OK, this transaction\nhas been seen before. This is a repeat. This is a rebroadcast. This is not something\nI should process.",
    "start": "644890",
    "end": "652160"
  },
  {
    "text": "So Ethereum actually\ndoes something like this. There is this number included\nin every transaction.",
    "start": "652160",
    "end": "660580"
  },
  {
    "text": "But the tricky part about the\nway that Ethereum does this-- and we're going to learn\nmore about Ethereum later on in the course, we're going\nto have a guest lecturer come",
    "start": "660580",
    "end": "666610"
  },
  {
    "text": "in and teach us about that-- is that it requires you to keep\ntrack of all of the numbers you've seen.",
    "start": "666610",
    "end": "672220"
  },
  {
    "text": "And you have to\ndo this per user. And so all the\nnodes in the network",
    "start": "672220",
    "end": "677500"
  },
  {
    "text": "have to keep track\nof all of the nonces that they've seen per user.",
    "start": "677500",
    "end": "683079"
  },
  {
    "text": "And so if a user uses Ethereum\nonce and then goes away, all of the nodes have to\nkeep that state forever,",
    "start": "683080",
    "end": "689530"
  },
  {
    "text": "essentially, just\nin case someone comes back and rebroadcasts\nanother transaction.",
    "start": "689530",
    "end": "695230"
  },
  {
    "text": "So Bitcoin, like I said, and\nI keep saying, does something. And there's nothing\nwrong with this model.",
    "start": "695230",
    "end": "701680"
  },
  {
    "text": "We'll sort of\ncompare and contrast. Like I said, it's\nwhat Ethereum uses. But I think that this is part\nof the motivation for why",
    "start": "701680",
    "end": "707182"
  },
  {
    "text": "Bitcoin was designed\nthe way that it was. And so Bitcoin uses this idea\ncalled unspent transaction",
    "start": "707182",
    "end": "713200"
  },
  {
    "text": "outputs. So you'll notice, over\nhere, we don't have any notion of a coin, per se.",
    "start": "713200",
    "end": "720430"
  },
  {
    "text": "There are just\namounts, and amounts are debited and credited. And if Alice spends to Bob,\nand Alice spends to Carol,",
    "start": "720430",
    "end": "726520"
  },
  {
    "text": "and they come in\ndifferent orders, either one could happen first. There's no notion of, like,\nCarol gets these coins",
    "start": "726520",
    "end": "733180"
  },
  {
    "text": "and Bob gets these coins. But Bitcoin is a\nlittle bit different. All coins are not the same.",
    "start": "733180",
    "end": "738860"
  },
  {
    "start": "736000",
    "end": "736000"
  },
  {
    "text": "And when you're\nspending, you don't just include an amount you refer\nback to the specific coin",
    "start": "738860",
    "end": "747083"
  },
  {
    "text": "that you are spending.  So you actually have to refer\nto a coin in order to spend it.",
    "start": "747083",
    "end": "755410"
  },
  {
    "text": "And this is the\nreally weird part-- coins are created,\ndestroyed, consumed,",
    "start": "755410",
    "end": "762580"
  },
  {
    "text": "and then new coins are\ncreated every transaction.",
    "start": "762580",
    "end": "767780"
  },
  {
    "text": "So whenever you\nspend your bitcoin, you have to spend\nit in its entirety.",
    "start": "767780",
    "end": "773630"
  },
  {
    "text": "That bitcoin is then destroyed,\nand new coins are created. ",
    "start": "773630",
    "end": "781225"
  },
  {
    "text": "And there's a rule, in the\nentire system, that a coin can only be spent once. ",
    "start": "781225",
    "end": "788579"
  },
  {
    "text": "So we'll go into\nexactly what that looks like in a\ntransaction, but I want to know if there are\nany questions about that",
    "start": "788580",
    "end": "795300"
  },
  {
    "text": "first, about that idea. Yes. AUDIENCE: Aren't coins fungible? So what if you spend maybe\na little bit of a coin",
    "start": "795300",
    "end": "801363"
  },
  {
    "text": "on some candy or something? NEHA NARULA: That's\na great question. So the question is,\naren't coins fungible?",
    "start": "801363",
    "end": "807480"
  },
  {
    "text": "So first of all, coins\naren't fungible, actually. They are very specific. You can see a coin.",
    "start": "807480",
    "end": "813300"
  },
  {
    "text": "But the question\nabout what happens if you only want to spend part\nof a coin is a great question.",
    "start": "813300",
    "end": "820410"
  },
  {
    "text": "And we'll see how you\ndo that in the way that the transaction\nis constructed. But the short answer is, if you\nwant to spend part of a coin,",
    "start": "820410",
    "end": "827310"
  },
  {
    "text": "you have to spend\nthe whole coin, spend the part that you\nwant to someone else, and then spend the rest\nof it back to yourself,",
    "start": "827310",
    "end": "833220"
  },
  {
    "text": "creating a new coin\nin the process. Yes. AUDIENCE: Coins are consumed,\nand for the new ones,",
    "start": "833220",
    "end": "839810"
  },
  {
    "text": "who will own the new ones? NEHA NARULA: Whoever you say\nshould own the new ones when--",
    "start": "839810",
    "end": "845450"
  },
  {
    "text": "a transaction consumes coins\nand creates new ones as payment. And as the creator of that\ntransaction, as the spender,",
    "start": "845450",
    "end": "853280"
  },
  {
    "text": "I will decide who should\nget the new coins. And I'll show you the\ndetails of this in a moment. AUDIENCE: You're\nsaying coins, but do",
    "start": "853280",
    "end": "858868"
  },
  {
    "text": "you actually mean the full\nbalance in the account, right? NEHA NARULA: No, not exactly\nfull balance in the account.",
    "start": "858868",
    "end": "864880"
  },
  {
    "text": "So let's go a little\nbit further to look at what's happening here. Because Bitcoin doesn't\nactually keep track of balances.",
    "start": "864880",
    "end": "871280"
  },
  {
    "text": "So let's take a look at\nwhat a transaction actually looks like. So a transaction has\nmany different parts,",
    "start": "871280",
    "end": "879190"
  },
  {
    "text": "but we're going to focus\non two parts, which is the inputs and outputs. And here I'm showing\na transaction",
    "start": "879190",
    "end": "884770"
  },
  {
    "text": "with one input and one output. Now, an input\nactually refers back",
    "start": "884770",
    "end": "892240"
  },
  {
    "text": "to another transaction's output. So let's assume-- and we'll get\ninto how this is done later--",
    "start": "892240",
    "end": "898060"
  },
  {
    "text": "but let's assume that there\nare coins in the system. Let's just assume that some\ncoins have been created out",
    "start": "898060",
    "end": "904360"
  },
  {
    "text": "of nowhere. Let's say, in particular,\nthat maybe 12.5 coins have",
    "start": "904360",
    "end": "909820"
  },
  {
    "text": "been created out of nowhere. And so there's a\ntransaction that outputs 12.5 coins to Alice.",
    "start": "909820",
    "end": "916360"
  },
  {
    "text": "And Alice wants to\nspend those coins. And so Alice would\ncreate a new transaction",
    "start": "916360",
    "end": "921610"
  },
  {
    "text": "that points back to\nthe transaction where she received those coins. And the way that she\npoints back to that",
    "start": "921610",
    "end": "928569"
  },
  {
    "text": "is using the transaction ID of\nthe previous transaction, which you remember is just\nthe hash, the index,",
    "start": "928570",
    "end": "935420"
  },
  {
    "text": "meaning which output of the\nprevious transaction she's intending to spend,\nand something",
    "start": "935420",
    "end": "941319"
  },
  {
    "text": "called a scriptSig, which\nis her authorization to spend that output.",
    "start": "941320",
    "end": "948560"
  },
  {
    "text": "So this is how Alice\nrefers back to the output she wants to spend. And when I say coin, I'm\nreferring to outputs.",
    "start": "948560",
    "end": "958600"
  },
  {
    "text": "So outputs can be for\ndifferent amounts. You could create an output--",
    "start": "958600",
    "end": "963940"
  },
  {
    "text": "you could spend 12.5 coins and\ncreate many different outputs of many different amounts, and\nsend them to different people.",
    "start": "963940",
    "end": "971510"
  },
  {
    "text": "if you wanted to. So this is a format\nof a transaction. There is an input\nwhich points back",
    "start": "971510",
    "end": "978130"
  },
  {
    "text": "to a previous\ntransaction's output that you're intending to spend. And then the way\nthat you spend it--",
    "start": "978130",
    "end": "983980"
  },
  {
    "text": "you're consuming that\noutput, essentially, by pointing back to\nit with this input-- the way that you spend it\nby producing a new output.",
    "start": "983980",
    "end": "991337"
  },
  {
    "text": "And again, this\ntransaction isn't just one input and one output,\nit could have many. And the output that you\nproduce has something",
    "start": "991337",
    "end": "998529"
  },
  {
    "start": "995000",
    "end": "995000"
  },
  {
    "text": "called a scriptPubKey. What the scriptPubKey\nis, the scriptPubKey is a way of specifying\nthe conditions under which",
    "start": "998530",
    "end": "1006990"
  },
  {
    "text": "this output can be redeemed. So in its simplest sense, you\nmight have the scriptSig merely",
    "start": "1006990",
    "end": "1014940"
  },
  {
    "text": "be a signature, just\nAlice's signature, saying, I have the right to spend this.",
    "start": "1014940",
    "end": "1020000"
  },
  {
    "text": "And if Alice is spending to\nBob, then maybe the scriptPubKey would actually just\nbe Bob's public key.",
    "start": "1020000",
    "end": "1026329"
  },
  {
    "text": "And the implied\nmeaning there would be, anyone who could\nproduce the signature of the corresponding private\nkey with that public key",
    "start": "1026329",
    "end": "1034130"
  },
  {
    "text": "could then spend this output.  One thing is that these\ntwo things together--",
    "start": "1034130",
    "end": "1042099"
  },
  {
    "text": "the previous transaction\nID and the index-- serves to uniquely\nidentify an output.",
    "start": "1042099",
    "end": "1047780"
  },
  {
    "text": "So these two things uniquely\nidentify some money to spend. ",
    "start": "1047780",
    "end": "1054640"
  },
  {
    "text": "And the value that's\nspecified in the output is actually specified in\nsomething called Satoshis,",
    "start": "1054640",
    "end": "1060850"
  },
  {
    "text": "and there are 10 to the eighth\nSatoshis in one bitcoin. So the value doesn't have\nany decimal places in it. It is always an integer.",
    "start": "1060850",
    "end": "1067380"
  },
  {
    "text": "And output is what I'm referring\nto when I say the word, coin.",
    "start": "1067380",
    "end": "1073090"
  },
  {
    "text": "So, questions on this\nsort of general setup. ",
    "start": "1073090",
    "end": "1079679"
  },
  {
    "text": "Yes. AUDIENCE: Can you talk\nabout index [INAUDIBLE] NEHA NARULA: Sure. OK, the index is--",
    "start": "1079680",
    "end": "1085679"
  },
  {
    "text": "remember how I said there\ncould be multiple outputs? The index simply\nrefers to which output in the previous transaction\nyou're talking about.",
    "start": "1085680",
    "end": "1092670"
  },
  {
    "text": " Was there a question back there? Yeah.",
    "start": "1092670",
    "end": "1097820"
  },
  {
    "text": "AUDIENCE: Yeah, I'm a little\nbit confused about the-- So you have one input that\ncan generate several outputs?",
    "start": "1097820",
    "end": "1103872"
  },
  {
    "text": "NEHA NARULA: Yes. AUDIENCE: Can you\nprovide an example? NEHA NARULA: Sure, yes. We'll get to that in\na moment, actually.",
    "start": "1103872",
    "end": "1108985"
  },
  {
    "text": "But maybe I could just\ndraw one on the board. ",
    "start": "1108985",
    "end": "1120270"
  },
  {
    "text": "So you could certainly\nhave a transaction that has multiple outputs.",
    "start": "1120270",
    "end": "1125730"
  },
  {
    "text": "And so this input\nhere would refer back to some previous\ntransaction's outputs.",
    "start": "1125730",
    "end": "1132080"
  },
  {
    "text": " And let's say that this was,\nfor example, 20 bitcoin.",
    "start": "1132080",
    "end": "1141360"
  },
  {
    "text": "Then this needs to\nconsume 20 bitcoin. And it can spread that\n20 bitcoin out in any way",
    "start": "1141360",
    "end": "1148577"
  },
  {
    "text": "that it wants. And there are some\ndetails here that we're going to get to in a moment. But basically, you\nhave that 20 here.",
    "start": "1148577",
    "end": "1154139"
  },
  {
    "text": "You could send five\nhere, 10 here, five here. And each of these outputs would\nhave its own scriptPubKey,",
    "start": "1154140",
    "end": "1161640"
  },
  {
    "text": "its own rules for\nhow to redeem it. And each output\nhas its own amount. ",
    "start": "1161640",
    "end": "1171790"
  },
  {
    "text": "Yep. TADGE DRYJA: It's also\npossible with multiple inputs [INAUDIBLE] NEHA NARULA: Yes. Yes. AUDIENCE: So where does\nthe name, chain, come from?",
    "start": "1171790",
    "end": "1179310"
  },
  {
    "text": "Is it more like a\ntree, or is it-- NEHA NARULA: That's\na good question. So if you go back to the slide\nwhere I sort of was showing--",
    "start": "1179310",
    "end": "1187770"
  },
  {
    "text": "this is where the name,\nchain, comes from, here. [CHUCKLING] So what we're talking\nabout right now",
    "start": "1187770",
    "end": "1194280"
  },
  {
    "text": "is what goes inside each block. And what goes inside each\nblock are transactions.",
    "start": "1194280",
    "end": "1199860"
  },
  {
    "text": "So for the moment, you can\npretend like each block only has one transaction\nin it, but a block",
    "start": "1199860",
    "end": "1205409"
  },
  {
    "text": "can contain a set\nof transactions. But the chain part comes\nfrom how we actually chain these blocks of\ntransactions together.",
    "start": "1205410",
    "end": "1211860"
  },
  {
    "start": "1211860",
    "end": "1217590"
  },
  {
    "text": "So let's talk about scriptSigs\nand scriptPubKeys a little bit more. So scriptPubKeys, like I\nsaid, are in the outputs.",
    "start": "1217590",
    "end": "1227019"
  },
  {
    "text": "And you can think of\nthem as predicates. So scriptPubKeys\nspecify a predicate",
    "start": "1227020",
    "end": "1232380"
  },
  {
    "text": "on how someone can\nredeem this output. OK, so remember a transaction\ncan have multiple inputs,",
    "start": "1232380",
    "end": "1239290"
  },
  {
    "text": "multiple outputs. Each output has its\nown scriptPubKey.",
    "start": "1239290",
    "end": "1244370"
  },
  {
    "text": "scriptSigs, which\nare in the inputs, helps satisfy the\npredicate that's",
    "start": "1244370",
    "end": "1250630"
  },
  {
    "text": "specified in the scriptPubKey. So we would have a\nscriptPubKey here, And.",
    "start": "1250630",
    "end": "1262330"
  },
  {
    "text": "We would have a scriptSig here.  And this scriptSig, if this\nis a valid transaction,",
    "start": "1262330",
    "end": "1270730"
  },
  {
    "text": "would explain how to\nsatisfy the scriptPubKey. So the scriptPubKey would set\nup a predicate on the output.",
    "start": "1270730",
    "end": "1277870"
  },
  {
    "text": "The most common\npredicate is, produce a signature and a public key\nthat satisfies this hash.",
    "start": "1277870",
    "end": "1286580"
  },
  {
    "text": "And the scriptSig would\nprovide the information necessary to satisfy\nthat predicate. ",
    "start": "1286580",
    "end": "1294580"
  },
  {
    "text": "So what does it mean to\nhave money in this system? What does it mean to\nbe able to spend money?",
    "start": "1294580",
    "end": "1300795"
  },
  {
    "text": "What does it mean\nfor Alice to be able to transfer money to Bob? It means Alice knows\nsome information that",
    "start": "1300795",
    "end": "1306970"
  },
  {
    "text": "allows her to produce\na satisfying scriptSig for some outputs out there.",
    "start": "1306970",
    "end": "1312820"
  },
  {
    "text": "That's what having money means. It's not an account balance. ",
    "start": "1312820",
    "end": "1320970"
  },
  {
    "text": "So questions on that?  Because it's a\nlittle non-intuitive.",
    "start": "1320970",
    "end": "1327620"
  },
  {
    "text": "But the important\nthing to note here is the nodes in\nthe Bitcoin network are not keeping track of\nhow much money you have.",
    "start": "1327620",
    "end": "1335630"
  },
  {
    "text": "It's your job to keep track\nof how much money you have, or a wallet's job. And we'll talk more\nabout wallets later.",
    "start": "1335630",
    "end": "1341560"
  },
  {
    "text": "And the way that you\ndo that is by knowing how many outputs there are out\nthere that you can actually",
    "start": "1341560",
    "end": "1347090"
  },
  {
    "text": "redeem-- that you have the\nknowledge to redeem. Like I said, a transaction\ncan have multiple inputs",
    "start": "1347090",
    "end": "1353840"
  },
  {
    "text": "and multiple outputs. And each input comes\nwith its own scriptSig,",
    "start": "1353840",
    "end": "1358909"
  },
  {
    "start": "1354000",
    "end": "1354000"
  },
  {
    "text": "and each output comes\nwith its own scriptPubKey. So it's not that there's one\nscriptSig and one scriptPubKey",
    "start": "1358910",
    "end": "1364370"
  },
  {
    "text": "for the entire transaction. The transaction\ncan actually spend multiple different\noutputs and produce",
    "start": "1364370",
    "end": "1369769"
  },
  {
    "text": "multiple different new outputs. And these outputs could have\nnothing to do with each other. Here, this input might\npoint to a previous output",
    "start": "1369770",
    "end": "1378860"
  },
  {
    "text": "that Alice knows how to spend. And this input might\npoint to a previous output the Carol knows how to spend.",
    "start": "1378860",
    "end": "1385400"
  },
  {
    "text": "And you can actually\ncombine both of those into the same\ntransaction, assuming you can produce a transaction\nwith the right scriptSigs.",
    "start": "1385400",
    "end": "1393200"
  },
  {
    "text": "Now, Alice and Carol might\nhave to talk to each other in order to produce\nthis transaction, because it's going to\nneed both signatures,",
    "start": "1393200",
    "end": "1400399"
  },
  {
    "text": "but they could do it.  AUDIENCE: What prevents\npeople from sort",
    "start": "1400400",
    "end": "1407960"
  },
  {
    "text": "of shuffling around and\nchanging the outputs and inputs [INAUDIBLE]? NEHA NARULA: Ah, great question. So what prevents\npeople from shuffling",
    "start": "1407960",
    "end": "1414690"
  },
  {
    "text": "around inputs and the outputs? Well, part of it\nis because this is serialized into a transaction.",
    "start": "1414690",
    "end": "1420169"
  },
  {
    "text": "And that transaction is hashed,\nand then these signatures are on that transaction hash.",
    "start": "1420170",
    "end": "1426410"
  },
  {
    "text": "Remember, we saw that\nfrom a few slides before. So if you were to\nflip around the order or if you were to trying\nto change any bits in here",
    "start": "1426410",
    "end": "1432830"
  },
  {
    "text": "and change the pubkey,\nyou would end up changing the hash\nof the transaction and this signature would\nno longer be valid.",
    "start": "1432830",
    "end": "1439430"
  },
  {
    "text": "And something also that's\nimportant to note-- only valid transactions get\naccepted to the blockchain.",
    "start": "1439430",
    "end": "1445820"
  },
  {
    "text": "So all of the nodes are\nchecking to make sure that these scriptPubKeys and\nthese scriptSigs work out.",
    "start": "1445820",
    "end": "1452102"
  },
  {
    "text": "And I'll show you the\nrules that they're checking in just a moment. And so if anything\ndoesn't match,",
    "start": "1452103",
    "end": "1459830"
  },
  {
    "text": "if this signature is not a valid\nscriptSig for whatever output it's pointing to, this is\nan invalid transaction,",
    "start": "1459830",
    "end": "1466460"
  },
  {
    "text": "no one will accept it. In fact, most nodes won't\neven pass it around, and it will not get\ninto the blockchain.",
    "start": "1466460",
    "end": "1471860"
  },
  {
    "text": "Or if it does get\ninto the blockchain, all of the nodes who\nare following the rules of the network will ignore it.",
    "start": "1471860",
    "end": "1477500"
  },
  {
    "text": "Because if a\ntransaction is invalid, it means the entire\nblock is invalid, and it means any chain building\noff that block is also invalid.",
    "start": "1477500",
    "end": "1484912"
  },
  {
    "text": "So nodes that are following\nthe rules of the network, which are, these should be valid,\nwill not listen to that,",
    "start": "1484912",
    "end": "1491420"
  },
  {
    "text": "and will completely\nignore that entire chain. So here's another visual of\nwhat it looks like to have--",
    "start": "1491420",
    "end": "1499990"
  },
  {
    "text": "and this is not with the\nblockchain looks like. I want to be clear. The blockchain just\na set of blocks",
    "start": "1499990",
    "end": "1505400"
  },
  {
    "start": "1502000",
    "end": "1502000"
  },
  {
    "text": "pointing to previous blocks. What we have here\nis more sort of like the logical\nrepresentation of what",
    "start": "1505400",
    "end": "1511160"
  },
  {
    "text": "a transaction looks like. So you have a\ntransaction right here, and you have two inputs\nin this transaction.",
    "start": "1511160",
    "end": "1517009"
  },
  {
    "text": "And the first one is\npointing to the second output of this previous transaction\nthat happened over here.",
    "start": "1517010",
    "end": "1522860"
  },
  {
    "text": "So this transaction has a hash. And maybe this is the hash\nof the entire transaction.",
    "start": "1522860",
    "end": "1528080"
  },
  {
    "text": "And so in order to spend\nthat output over there, you specify the hash,\nyou specify the index--",
    "start": "1528080",
    "end": "1534500"
  },
  {
    "text": "so 012, you specify\nthis index right here-- and you provide a\nscriptSig that will",
    "start": "1534500",
    "end": "1542390"
  },
  {
    "text": "validate according to\nwhatever the scriptPubKey is for that output. So note here, this\ntransaction doesn't care",
    "start": "1542390",
    "end": "1550100"
  },
  {
    "text": "what those outputs are at all. It's not using those. It's not looking at those. Someone else might spend\nthose, someone else",
    "start": "1550100",
    "end": "1555863"
  },
  {
    "text": "might not spend those. It's just spending\nthis one right here. And in the act of spending\nthis one right here,",
    "start": "1555863",
    "end": "1561950"
  },
  {
    "text": "it doesn't make those other ones\ninvalid in the simplest form. Those could still be\nspent by someone else.",
    "start": "1561950",
    "end": "1569190"
  },
  {
    "text": "So outputs are\nconsumed separately. So here, it's pointing to\na different transaction,",
    "start": "1569190",
    "end": "1576649"
  },
  {
    "text": "a transaction with this hash. And so it specifies\nthe transaction ID, and then it specifies which\noutput in that transaction",
    "start": "1576650",
    "end": "1583807"
  },
  {
    "text": "it's spending. In this case, it's the third\none, so it has index 2. And it provides a\nsatisfying scriptSig",
    "start": "1583807",
    "end": "1589910"
  },
  {
    "text": "for this output,\nwhich probably is totally different\nthan the satisfying scriptSig for that output.",
    "start": "1589910",
    "end": "1597240"
  },
  {
    "text": "So this is what this transaction\nhas to specify in order to spend those outputs.",
    "start": "1597240",
    "end": "1602690"
  },
  {
    "text": "And it can produce whatever\nnew outputs it wants to produce under certain rules. ",
    "start": "1602690",
    "end": "1610159"
  },
  {
    "text": "AUDIENCE: So in that example,\nthat whole box actually points to something else?",
    "start": "1610159",
    "end": "1615780"
  },
  {
    "text": "That's not these two\nboxes on the left, right? NEHA NARULA: This box? What do you mean when\nyou say, points to?",
    "start": "1615780",
    "end": "1622000"
  },
  {
    "text": "AUDIENCE: [? Their ?]\nblockchain sequence. NEHA NARULA: Yeah. This is something\nthat will be inside of the blockchain-- inside\nof a block in the blockchain.",
    "start": "1622000",
    "end": "1628720"
  },
  {
    "text": "So this doesn't actually\npoint to anything. It contains hashes. Literally, it just\ncontains these bytes,",
    "start": "1628720",
    "end": "1635559"
  },
  {
    "text": "these hashes of the\ntransactions that it's spending. And those are kind of\nlike a pointer in a sense.",
    "start": "1635560",
    "end": "1642010"
  },
  {
    "text": "But when it comes to\nthe entire blockchain, this is one part of one block. AUDIENCE: [INAUDIBLE]",
    "start": "1642010",
    "end": "1648537"
  },
  {
    "text": "NEHA NARULA: Yeah, I know. Can you guys see this at all? Can you still see that or no?",
    "start": "1648537",
    "end": "1655140"
  },
  {
    "text": "OK, good. OK, great. You had your hand up. AUDIENCE: Yeah, so in one\nof the earlier slides, you showed [INAUDIBLE] Is\nthat signature the same",
    "start": "1655140",
    "end": "1668560"
  },
  {
    "text": "as scriptSig, or-- NEHA NARULA: No,\nthat was sort of more like an idealized transaction. So this is what a transaction\nactually looks like,",
    "start": "1668560",
    "end": "1675215"
  },
  {
    "text": "[CHUCKLING] AUDIENCE: But the\nscriptSig is still inside the transaction itself. NEHA NARULA: The scriptSig\nis inside the transaction.",
    "start": "1675215",
    "end": "1681190"
  },
  {
    "text": "But when you sign\nthe transaction, you don't sign the scriptSigs\nbecause the scriptSigs include",
    "start": "1681190",
    "end": "1686610"
  },
  {
    "text": "the signature of\nthe transaction. And it's important to\nnote, the scriptSig includes the signature of\nthe transaction as a whole,",
    "start": "1686610",
    "end": "1693910"
  },
  {
    "text": "not just this part of it. TADGE DRYJA: This actually\n[INAUDIBLE] We're not talking",
    "start": "1693910",
    "end": "1700440"
  },
  {
    "text": "about it now, but\nthat was sort of-- there's bugs involved\nat that point.",
    "start": "1700440",
    "end": "1705980"
  },
  {
    "text": "NEHA NARULA: Yeah,\nwe're not going to talk about [INAUDIBLE]. OK, yes. AUDIENCE: Yeah, what prevents\ntwo different transactions",
    "start": "1705980",
    "end": "1712380"
  },
  {
    "text": "pointing back at the\nsame [INAUDIBLE]?? NEHA NARULA: Great question. So OK, I said that there's this\nrule that outputs are supposed",
    "start": "1712380",
    "end": "1719279"
  },
  {
    "text": "to only be consumed once. But I can definitely produce\nanother transaction which points back to that output.",
    "start": "1719280",
    "end": "1724620"
  },
  {
    "text": "I could send it to the network. And what would happen is\nthe nodes in the network, assuming they're\nfollowing consensus rules,",
    "start": "1724620",
    "end": "1730590"
  },
  {
    "text": "would note that this\nhad already been spent. So if this is already--\nif they've already seen a valid transaction\nthat consumes an output,",
    "start": "1730590",
    "end": "1739710"
  },
  {
    "text": "they will not accept\nanother transaction that tries to spend the same output. That's what's known\nas a double-spend.",
    "start": "1739710",
    "end": "1745840"
  },
  {
    "text": "And so all the\nnodes in the network together are\nmaintaining this rule. AUDIENCE: Isn't it going to\nbe kind of hard to traverse",
    "start": "1745840",
    "end": "1752700"
  },
  {
    "text": "backwards and figure\nout [INAUDIBLE] pointing [INAUDIBLE]? NEHA NARULA: Great question. Yes, this seems kind\nof annoying, right?",
    "start": "1752700",
    "end": "1758630"
  },
  {
    "text": "You see this transaction,\nand OK, there's some random bytes in\nhere, and a signature,",
    "start": "1758630",
    "end": "1764650"
  },
  {
    "text": "and how am I supposed to\nfigure out what this goes to? How am I supposed to\nfigure out whether this",
    "start": "1764650",
    "end": "1771370"
  },
  {
    "text": "is a valid transaction,\nwhether it's been spent or not? And the answer is\nthat every single node",
    "start": "1771370",
    "end": "1777250"
  },
  {
    "text": "is maintaining a lot\nof data structures in order to make this faster. And in fact they're\nmaintaining a data structure",
    "start": "1777250",
    "end": "1783700"
  },
  {
    "text": "called the UTXO set. And I'll tell you a little bit\nabout the UTXO set in a minute.",
    "start": "1783700",
    "end": "1791570"
  },
  {
    "text": "And I'll tell you how\nit's created in a moment. Yes. AUDIENCE: [INAUDIBLE]\ntransaction fees",
    "start": "1791570",
    "end": "1798190"
  },
  {
    "text": "and how these transactions pass\nin to the blockchain itself? NEHA NARULA: Sure.",
    "start": "1798190",
    "end": "1803260"
  },
  {
    "text": "So I'm not going to\ngo into how a block-- ",
    "start": "1803260",
    "end": "1808870"
  },
  {
    "text": "what a block is composed of. I'm not going to go into\nwhat a block is composed of, but we will tomorrow.",
    "start": "1808870",
    "end": "1814100"
  },
  {
    "text": " Yes. AUDIENCE: Just to confirm,\nwith the [INAUDIBLE] scriptSig,",
    "start": "1814100",
    "end": "1821169"
  },
  {
    "text": "it's not usually\n[? taking ?] this, it's [INAUDIBLE]\nthe transaction.",
    "start": "1821170",
    "end": "1827054"
  },
  {
    "text": "NEHA NARULA: I'm\nsorry, could you say-- AUDIENCE: ScriptSig, [INAUDIBLE]\nor is it unique for each index?",
    "start": "1827055",
    "end": "1834060"
  },
  {
    "text": "NEHA NARULA: Yes, there\nis a different scriptSig for each input.",
    "start": "1834060",
    "end": "1839415"
  },
  {
    "text": "There's a different\nscriptSig for each input, but that scriptSig signs\nmost of the transaction.",
    "start": "1839415",
    "end": "1846980"
  },
  {
    "text": "So the scriptSig,\nthere's a different one, because different outputs\ncould have different satisfying",
    "start": "1846980",
    "end": "1852290"
  },
  {
    "text": "conditions. But the scriptSig has\nto sign a message, or it has to produce something.",
    "start": "1852290",
    "end": "1859030"
  },
  {
    "text": "Actually, we're going to go\ninto a few specific scriptSigs, and I think it'll be a lot\nclearer exactly what this is.",
    "start": "1859030",
    "end": "1865010"
  },
  {
    "text": "Because it's not clear right\nnow what goes in the scriptSig or in the scriptPubKey. So this is sort of like a\nlogical representation of what",
    "start": "1865010",
    "end": "1871669"
  },
  {
    "text": "a transaction looks like. It refers to the\nprevious transaction that it's spending from.",
    "start": "1871670",
    "end": "1877520"
  },
  {
    "text": "And the important\nthings to note here are you don't have to\nspend all of the outputs",
    "start": "1877520",
    "end": "1883490"
  },
  {
    "text": "in a transaction, you\ncan just spend one. But you must consume\nthat output entirely",
    "start": "1883490",
    "end": "1890600"
  },
  {
    "text": "when you produce\nyour new outputs. And so this is what's actually--",
    "start": "1890600",
    "end": "1896480"
  },
  {
    "text": "this is the JSON representation\nof a transaction in Bitcoin. And so this is probably\npretty hard to read,",
    "start": "1896480",
    "end": "1904160"
  },
  {
    "text": "and I don't think it's\nworth it to try to look at everything in great detail.",
    "start": "1904160",
    "end": "1909290"
  },
  {
    "text": "But when we have the slides up,\nyou can take a look at this. And this is literally what\ngoes inside a transaction.",
    "start": "1909290",
    "end": "1917750"
  },
  {
    "text": "And there are few fields that\nI'm not talking about here. One is the version, and\nanother is the lock time.",
    "start": "1917750",
    "end": "1925070"
  },
  {
    "text": "And I think when we talk-- these scripts, these\nscriptPubKey and scriptSig can actually get quite\ninteresting and quite complex.",
    "start": "1925070",
    "end": "1931850"
  },
  {
    "text": "That's what makes\nBitcoin so cool. And I think when we get into\nthat discussion about all",
    "start": "1931850",
    "end": "1937070"
  },
  {
    "text": "the different things\nthat can go into that, then we'll talk a little bit\nmore about what lock time is. But the short answer is,\na lock time tells you",
    "start": "1937070",
    "end": "1945169"
  },
  {
    "text": "at what point in time\nthis transaction is valid. So until that lock time\nhappens, the transaction",
    "start": "1945170",
    "end": "1951560"
  },
  {
    "text": "is not valid and can't be\nincluded in the blockchain. So this transaction has\na lock time of zero, meaning it's valid\nimmediately and can",
    "start": "1951560",
    "end": "1958640"
  },
  {
    "text": "be included in the blockchain. So here, this has one input. The input has the\ntransaction ID and the index.",
    "start": "1958640",
    "end": "1967160"
  },
  {
    "text": "So that's zero, so it's spending\nthe first output of whatever that transaction is. And it has some\nscriptSig, which is empty.",
    "start": "1967160",
    "end": "1975230"
  },
  {
    "text": "And then this is the\noutput that it's producing. It's spending 49.99 bitcoins\nfrom that previous output.",
    "start": "1975230",
    "end": "1987170"
  },
  {
    "text": "And it's spending\nit to a new output. And these are the rules for\nredeeming this new output.",
    "start": "1987170",
    "end": "1993580"
  },
  {
    "text": " Let's talk about\nconsensus rules.",
    "start": "1993580",
    "end": "1999690"
  },
  {
    "start": "1997000",
    "end": "1997000"
  },
  {
    "text": "So I keep using\nthe word, valid-- this transaction is valid,\nthis transaction is invalid.",
    "start": "1999690",
    "end": "2005408"
  },
  {
    "text": "And so there are\nthese implicit rules to Bitcoin, which are defined\nby the software, which state what makes a valid\ntransaction or a valid block.",
    "start": "2005408",
    "end": "2012980"
  },
  {
    "text": "For transactions specifically,\nthe sum of the inputs has to be less than or equal\nto the sum of the outputs.",
    "start": "2012980",
    "end": "2019250"
  },
  {
    "text": "So you can't create\nmoney out of nowhere. You can't spend more than you're\nputting into a transaction.",
    "start": "2019250",
    "end": "2025700"
  },
  {
    "text": "And why less than or equal to? ",
    "start": "2025700",
    "end": "2030970"
  },
  {
    "text": "Fees, exactly. So the difference in the outputs\nand the inputs is implicit.",
    "start": "2030970",
    "end": "2039010"
  },
  {
    "text": "And it's a fee that\nessentially just goes to the miner, the person\nwho purchases the block. There is one exception\nto this rule.",
    "start": "2039010",
    "end": "2046420"
  },
  {
    "text": "It's a transaction called\nthe coinbase transaction-- no relation to the company. It's not named\nafter the company.",
    "start": "2046420",
    "end": "2051638"
  },
  {
    "text": "I think the company\nis named after it. But it's the first\ntransaction in a block. And it's the transaction that\ngives out the block reward.",
    "start": "2051639",
    "end": "2059500"
  },
  {
    "text": "So the first transaction\nin a block is special. It doesn't have any inputs.",
    "start": "2059500",
    "end": "2065840"
  },
  {
    "text": "Or it does have inputs,\nbut they're meaningless. And it produces\nthe block reward. So right now, the block\nreward is 12.5 bitcoins.",
    "start": "2065840",
    "end": "2074620"
  },
  {
    "text": "So every time a\nblock is produced, every time someone solves\nthat proof-of-work puzzle and produces a block,\nthey include a transaction",
    "start": "2074620",
    "end": "2081580"
  },
  {
    "text": "at the very beginning that\nusually gives themselves 12.5 bitcoin plus\nwhatever fees are",
    "start": "2081580",
    "end": "2088149"
  },
  {
    "text": "implicit as the sum of all of\nthe transactions in the block.",
    "start": "2088150",
    "end": "2095029"
  },
  {
    "text": "So this invariant\nmust be maintained, except for the coinbase\ntransaction, of which there",
    "start": "2095030",
    "end": "2100230"
  },
  {
    "text": "is one in every block. And then this\ninvariant must also be maintained, which--\noh, yes, sorry.",
    "start": "2100230",
    "end": "2106445"
  },
  {
    "text": "AUDIENCE: Who\ndetermines the fees? NEHA NARULA: The people\ncreating the transaction determine the fees. So when I create\na transaction, I'm",
    "start": "2106445",
    "end": "2113738"
  },
  {
    "text": "specifying which outputs I'm\nspending, and putting them in my inputs, and I'm\nproducing the outputs. So I just have to\nmaintain that invariant.",
    "start": "2113738",
    "end": "2121850"
  },
  {
    "text": "So let's say that I'm spending\nan input worth five bitcoin. I could produce an output\nworth five bitcoin, meaning that the fee is zero.",
    "start": "2121850",
    "end": "2128450"
  },
  {
    "text": "It's very unlikely\nthat my transaction would get accepted into the\nblockchain with a fee of zero.",
    "start": "2128450",
    "end": "2133850"
  },
  {
    "text": "It's possible, sure. But if I'm not mining\nmyself, why would a miner take my\ntransaction when they",
    "start": "2133850",
    "end": "2140060"
  },
  {
    "text": "could take a transaction that\nhas a higher fee associated with it? And the fee is implicit. It's the difference between\nthe sum of the inputs",
    "start": "2140060",
    "end": "2146572"
  },
  {
    "text": "and the sum of the outputs. AUDIENCE: So higher the\nfees, it's more likely that you will be processed--",
    "start": "2146572",
    "end": "2151831"
  },
  {
    "text": "NEHA NARULA: Yes. ",
    "start": "2151832",
    "end": "2157810"
  },
  {
    "text": "Any other questions\nat this point? AUDIENCE: Are these\ntaken out of the inputs or out of the outputs?",
    "start": "2157810",
    "end": "2163110"
  },
  {
    "text": "NEHA NARULA: The\nfee is implicit. So, in the inputs,\nyou're consuming--",
    "start": "2163110",
    "end": "2169960"
  },
  {
    "text": "so let's use this\nexample right here. So here, we're\nconsuming this output,",
    "start": "2169960",
    "end": "2179799"
  },
  {
    "text": "which has 20 bitcoin in it. So implicitly, this thing\nhas 20 bitcoin to spend.",
    "start": "2179800",
    "end": "2187170"
  },
  {
    "text": "Now, before, I had\nit set up as 5-10-5.",
    "start": "2187170",
    "end": "2192359"
  },
  {
    "text": "And so 20 needs\nto be greater than or equal to 5 plus 10 plus 5.",
    "start": "2192360",
    "end": "2198930"
  },
  {
    "text": "And it is, great, 20 is\ngreater than or equal to 20. What I could do is I could\nchange this number to a four.",
    "start": "2198930",
    "end": "2204990"
  },
  {
    "text": " And so what this means is--",
    "start": "2204990",
    "end": "2210359"
  },
  {
    "text": "notice that this\nadds up to 19 now. Where did that one bitcoin go? That one bitcoin\nimplicitly goes to whoever",
    "start": "2210360",
    "end": "2218400"
  },
  {
    "text": "produces the block in which\nthat contains this transaction.",
    "start": "2218400",
    "end": "2224861"
  },
  {
    "text": "AUDIENCE: So is\nthat greater than-- [INTERPOSING VOICES] AUDIENCE: No, but [INAUDIBLE] NEHA NARULA: No.",
    "start": "2224862",
    "end": "2230080"
  },
  {
    "text": "AUDIENCE: On the slide.  NEHA NARULA: Yeah, you're right. Sorry, that should be\ngreater than or equal to.",
    "start": "2230080",
    "end": "2236598"
  },
  {
    "text": "Sorry about that. So another invariant that\nneeds to be maintained is that this output\nhas not already",
    "start": "2236598",
    "end": "2241960"
  },
  {
    "text": "been referenced in\nanother transaction, in another valid transaction.",
    "start": "2241960",
    "end": "2248540"
  },
  {
    "text": "And then, as I alluded\nto, a final invariant is around the lock time.",
    "start": "2248540",
    "end": "2254770"
  },
  {
    "text": "So let's go into an example\nof how this actually works,",
    "start": "2254770",
    "end": "2261520"
  },
  {
    "text": "this scriptSig and\nscriptPubKey thing. So I haven't really gone into\ndetail yet about what this is.",
    "start": "2261520",
    "end": "2267369"
  },
  {
    "text": "I sort of implied that this\nspecified a key and this specified a signature. But what does this\nactually look like?",
    "start": "2267370",
    "end": "2274490"
  },
  {
    "text": "And I mean, I think this is\nreally, really interesting, actually. Because Bitcoin lets\nyou specify lots",
    "start": "2274490",
    "end": "2281319"
  },
  {
    "text": "of different scriptPubKeys and\nlots of different scriptSigs. And so this gives you\nthis kind of flexibility",
    "start": "2281320",
    "end": "2286870"
  },
  {
    "text": "so that you can program in\ndifferent kinds of conditions on what it takes to\nredeem a transaction.",
    "start": "2286870",
    "end": "2292660"
  },
  {
    "text": "So we're just going to talk\nabout a couple very simple ones. Because to get into\nmore complex stuff, we need to go really deep\ninto this word, script.",
    "start": "2292660",
    "end": "2302230"
  },
  {
    "text": "So basically the scriptPubKey\nand the scriptSig",
    "start": "2302230",
    "end": "2307450"
  },
  {
    "text": "are composed of opcodes. So Bitcoin has a little\nless than 200 opcodes,",
    "start": "2307450",
    "end": "2313840"
  },
  {
    "text": "and you write Bitcoin\nscripts using these opcodes. ",
    "start": "2313840",
    "end": "2320520"
  },
  {
    "text": "So let's talk about the\nmost common Bitcoin script, which is Pay to Pubkey Hash.",
    "start": "2320520",
    "end": "2326760"
  },
  {
    "text": "So the idea here is you want\nto send money to a public key. So Alice has Bob's public key,\nand Alice wants to pay Bob.",
    "start": "2326760",
    "end": "2334980"
  },
  {
    "text": "And so Alice wants to send\nmoney to Bob's public key. Well, the reason\nthat this is called",
    "start": "2334980",
    "end": "2340890"
  },
  {
    "text": "pubkey hash, public\nkeys are kind of big, and there's this nice--\nyou can kind of make",
    "start": "2340890",
    "end": "2348059"
  },
  {
    "text": "this nice observation\nthat you don't necessarily have to put the whole\npublic key in the output. You can put a hash of\nthe public in the output.",
    "start": "2348060",
    "end": "2354758"
  },
  {
    "text": "And I think Tadge already talked\nabout this when he was talking about Bitcoin addresses. ",
    "start": "2354758",
    "end": "2361170"
  },
  {
    "text": "So the scriptPubKey\nis instructions",
    "start": "2361170",
    "end": "2366680"
  },
  {
    "text": "on how to verify a signature\nof a public key that has been hashed\nand the scriptSig",
    "start": "2366680",
    "end": "2375900"
  },
  {
    "text": "is that signature and\nthe actual public key, the pre-image of\nthe hash public key.",
    "start": "2375900",
    "end": "2382120"
  },
  {
    "text": "And this is what\nthat looks like. So this is literally\nthe scriptPubKey",
    "start": "2382120",
    "end": "2387370"
  },
  {
    "text": "for a Pay to Pubkey\nHash input or output,",
    "start": "2387370",
    "end": "2392980"
  },
  {
    "text": "and this is literally the\nscriptSig that would you would use to redeem that output.",
    "start": "2392980",
    "end": "2401440"
  },
  {
    "text": "So this right here would\ngo inside one of these.",
    "start": "2401440",
    "end": "2406660"
  },
  {
    "text": "And it would set the\nconditions under which you could redeem this output.",
    "start": "2406660",
    "end": "2412240"
  },
  {
    "text": "And this right here\nwould go inside the input of the transaction\nthat's redeeming it.",
    "start": "2412240",
    "end": "2418359"
  },
  {
    "text": "And let's take a look at\nhow this actually works. So what the Bitcoin Script\nInterpreter does is,",
    "start": "2418360",
    "end": "2426970"
  },
  {
    "text": "when it's evaluating whether\nor not a transaction is valid, it takes a look at\nthe input, and it",
    "start": "2426970",
    "end": "2433710"
  },
  {
    "text": "looks at which previous\ntransaction it's looking at and which index the output is,\nand it grabs the scriptPubKey.",
    "start": "2433710",
    "end": "2441440"
  },
  {
    "text": "Well, first of all, it makes\nsure that output hasn't already been spent. Then it grabs the scriptPubKey,\nand it takes the scriptSig",
    "start": "2441440",
    "end": "2450080"
  },
  {
    "text": "and it puts them on top of\neach other, just like this. So that's the\nscriptSig up there,",
    "start": "2450080",
    "end": "2455089"
  },
  {
    "text": "this is the\nscriptPubKey down here. And then it runs\nthis combined script",
    "start": "2455090",
    "end": "2461630"
  },
  {
    "text": "through the Bitcoin\nScript Interpreter, which is based on a stack model. So it starts pushing\nthings onto the stack.",
    "start": "2461630",
    "end": "2469160"
  },
  {
    "text": "It starts at the\nvery top, and it starts pushing these items onto\nthe stack and evaluating them.",
    "start": "2469160",
    "end": "2475849"
  },
  {
    "text": "And so the rules\nare that constants get pushed onto the stack-- and then operations-- and\nthese things right here are",
    "start": "2475850",
    "end": "2481730"
  },
  {
    "text": "operations-- OP_DUP, OP_HASH160,\nOP_EQUALVERIFY, and OP_CHECKSIG, these\nare all Bitcoin opcodes.",
    "start": "2481730",
    "end": "2489410"
  },
  {
    "text": "Operations have different rules\nas to how they're evaluated and what they consume\noff of the stack.",
    "start": "2489410",
    "end": "2495220"
  },
  {
    "text": "So the first thing\nis a signature. We're going to pop the signature\nand push it onto the stack",
    "start": "2495220",
    "end": "2500440"
  },
  {
    "text": "because it is a\nconstant so this would be the signature that Alice\nmight produce in order",
    "start": "2500440",
    "end": "2507880"
  },
  {
    "text": "to spend her output.  Then same thing with the pubkey,\nbecause the pubkey is also",
    "start": "2507880",
    "end": "2515560"
  },
  {
    "text": "a constant. Then we're going to\ntake this first-- now, OK, we're done with\nconstants for the moment,",
    "start": "2515560",
    "end": "2521503"
  },
  {
    "text": "and the next thing on\nthe stack is OP_DUP. OP_DUP does basically\nexactly what it sounds like.",
    "start": "2521503",
    "end": "2527292"
  },
  {
    "text": "It takes the thing\nthat's currently on the top of the stack\nand it duplicates it. So the way that we consume\nOP_DUP is we take this pubkey",
    "start": "2527292",
    "end": "2534750"
  },
  {
    "text": "and we create another\ncopy of the pubkey. The next op is OP_HASH160.",
    "start": "2534750",
    "end": "2540430"
  },
  {
    "text": "It also does exactly\nwhat it sounds like. It takes what's on the top\nof the stack, it hashes it,",
    "start": "2540430",
    "end": "2546790"
  },
  {
    "text": "and it pushes that hash\nonto the top of the stack. So after we run\nOP_HASH160, this is",
    "start": "2546790",
    "end": "2554050"
  },
  {
    "text": "what our stack will look like. ",
    "start": "2554050",
    "end": "2559180"
  },
  {
    "text": "Next thing is a constant. So we take that constant,\nwhich should be--",
    "start": "2559180",
    "end": "2567900"
  },
  {
    "text": "which is the hash of the pubkey. So this is the address\nthat this money is being sent to, essentially.",
    "start": "2567900",
    "end": "2575099"
  },
  {
    "text": "And we put that on\nthe top of the stack. And then we run this operation\ncalled OP_EQUALVERIFY.",
    "start": "2575100",
    "end": "2582810"
  },
  {
    "text": "Whenever an opcode\nends with VERIFY, it means that it's a\nlittle bit special.",
    "start": "2582810",
    "end": "2587880"
  },
  {
    "text": "It means that it has the\nability to, if it fails, break out of the\nentire script execution",
    "start": "2587880",
    "end": "2594299"
  },
  {
    "text": "and immediately cause\ntransaction validation to fail. So OP_EQUALVERIFY\ndoes what it sounds",
    "start": "2594300",
    "end": "2600420"
  },
  {
    "text": "like, it checks to\nmake sure that the two things on the top of\nthe stack are equal.",
    "start": "2600420",
    "end": "2606600"
  },
  {
    "text": "And if they're not equal,\nthen it immediately fails validation.",
    "start": "2606600",
    "end": "2612320"
  },
  {
    "text": "So you'll note that\nwhat the two things at the top of\nthe-- let's go back to what the two things on the\ntop of the stack are right now.",
    "start": "2612320",
    "end": "2619370"
  },
  {
    "text": "So we pushed the sig,\nwe push a pubkey, we duplicated that pubkey, and\nthese are from the scriptSig,",
    "start": "2619370",
    "end": "2625549"
  },
  {
    "text": "so this is from whoever is\nredeeming the transaction. So whoever's redeeming\nthe transaction",
    "start": "2625550",
    "end": "2631100"
  },
  {
    "text": "has put a copy of\nthis pub key on there, and now that pubkey\nis on the stack twice. We hashed the\npubkey, and then we",
    "start": "2631100",
    "end": "2638690"
  },
  {
    "text": "pushed the hash\nthat was specified in the previous transaction\nthat set up the rules for how",
    "start": "2638690",
    "end": "2646260"
  },
  {
    "text": "to spend this. And then OP_EQUALVERIFY\nmakes sure that these things are\nactually the same.",
    "start": "2646260",
    "end": "2652890"
  },
  {
    "text": "And if they're not\nthe same, then it'll fail that verify check and the\nentire transaction validation",
    "start": "2652890",
    "end": "2658380"
  },
  {
    "text": "will abort, and it's\nan invalid transaction. So let's assume that\nthey're the same. OK, great. Then OP_EQUALVERIFY--\nthen we continue",
    "start": "2658380",
    "end": "2665730"
  },
  {
    "text": "transaction validation. And now we're left with this,\nOP_CHECKSIG, pubkey, sig.",
    "start": "2665730",
    "end": "2674130"
  },
  {
    "text": "And this does exactly what\nyou think it might do, it pops two things\noff the stack,",
    "start": "2674130",
    "end": "2679680"
  },
  {
    "text": "checks to make sure that the\nsignature is a valid signature for this pub key.",
    "start": "2679680",
    "end": "2686070"
  },
  {
    "text": "And if it is, it pushes\ntrue onto the stack. ",
    "start": "2686070",
    "end": "2692900"
  },
  {
    "text": "And if there is a true on\ntop of the stack-- in fact, I think if there's any\nconstant on top of the stack",
    "start": "2692900",
    "end": "2698510"
  },
  {
    "text": "when we've consumed all of\nthe parts of our scriptSig and scriptPubKey,\nthen this returns true",
    "start": "2698510",
    "end": "2707583"
  },
  {
    "text": "and the transaction\nis considered valid.  So this is a lot, and I know\nthis is kind of complicated.",
    "start": "2707583",
    "end": "2718500"
  },
  {
    "text": "So let's sort of step\nthrough this one more time. And there's just\na couple of things",
    "start": "2718500",
    "end": "2724810"
  },
  {
    "text": "that I want to make clear. This part right here is set\nup in the output of whatever",
    "start": "2724810",
    "end": "2731859"
  },
  {
    "text": "transaction we're spending. So if Alice creates\nthis transaction and she's spending\nto Bob, then Alice",
    "start": "2731860",
    "end": "2739060"
  },
  {
    "text": "would put whose pubkey here? AUDIENCE: Bob's. NEHA NARULA: Hash of\na pubkey, actually.",
    "start": "2739060",
    "end": "2745490"
  },
  {
    "text": "Right, so Alice would put the\nhash of Bob's pubkey here. And when Bob's redeeming, what\nwould go in the input that",
    "start": "2745490",
    "end": "2755170"
  },
  {
    "text": "needs to redeem that output? AUDIENCE: [INAUDIBLE]",
    "start": "2755170",
    "end": "2761345"
  },
  {
    "text": "NEHA NARULA: Sorry,\nI can't hear. AUDIENCE: Bob's signature. NEHA NARULA: Bob's\nsignature and the pubkey that corresponds\nto that signature,",
    "start": "2761345",
    "end": "2767990"
  },
  {
    "text": "because all we have is a hash. So those are the\nthings that would",
    "start": "2767990",
    "end": "2773630"
  },
  {
    "text": "get put on top of the stack. So up there, we\nhave Bob's signature and we have Bob's pubkey.",
    "start": "2773630",
    "end": "2778779"
  },
  {
    "text": "Again, those get\npushed onto the stack because they're constants,\nduplicated, hash the top,",
    "start": "2778780",
    "end": "2785960"
  },
  {
    "text": "copy over the hash, make\nsure that they're equal, and then check the signature.",
    "start": "2785960",
    "end": "2791180"
  },
  {
    "start": "2786000",
    "end": "2786000"
  },
  {
    "text": "And this is a Pay to\nPubkey Hash script. It is the most common\nscript in Bitcoin.",
    "start": "2791180",
    "end": "2796840"
  },
  {
    "text": "And this is this basically the\nstandard way of spending money. ",
    "start": "2796840",
    "end": "2803539"
  },
  {
    "text": "Are there questions about this? Yes. AUDIENCE: Is there\na significance in having that\nthey're equal-verified",
    "start": "2803540",
    "end": "2808970"
  },
  {
    "text": "before the CHECKSIG? Because it seems like\nthey're both verifying tings, and I'm wondering--",
    "start": "2808970",
    "end": "2814208"
  },
  {
    "text": "NEHA NARULA: Yeah,\nthat's a great question. So let's say that we didn't\nhave this EQUALVERIFY here then",
    "start": "2814208",
    "end": "2819650"
  },
  {
    "text": "what could a malicious\nspender possibly do? AUDIENCE: Well, I just\nmeant flipping the order.",
    "start": "2819650",
    "end": "2825609"
  },
  {
    "text": "We're still verifying both, but\nif you did the CHECKSIG first versus the EQUALVERIFY\nfirst, does that matter?",
    "start": "2825610",
    "end": "2830869"
  },
  {
    "text": "NEHA NARULA: Oh,\nthat's a good question. I don't think that would matter. I'm not sure. Would it matter? TADGE DRYJA: You could.",
    "start": "2830870",
    "end": "2836180"
  },
  {
    "text": "It's faster to verify\nthe two hashes are equal. The CHECKSIG operation\ntakes a lot of CPU time",
    "start": "2836180",
    "end": "2841369"
  },
  {
    "text": "so I guess the idea is,\nif you're going to fail, fail-- go the easy route. NEHA NARULA: Yes. Yes.",
    "start": "2841370",
    "end": "2847250"
  },
  {
    "text": "AUDIENCE: So are all nodes\non the network running this? NEHA NARULA: Yes. Every single node on the network\nis running the Bitcoin Script",
    "start": "2847250",
    "end": "2854599"
  },
  {
    "text": "Interpreter inside of it. And the Bitcoin Script\nInterpreter is known as-- what's called\nconsensus critical.",
    "start": "2854600",
    "end": "2860240"
  },
  {
    "text": "So if two nodes have slightly\ndifferent script interpreters that would interpret\nthis in different ways,",
    "start": "2860240",
    "end": "2866750"
  },
  {
    "text": "the network would have\na consensus failure. Yes. AUDIENCE: Why not\njust Pay to Pubkey?",
    "start": "2866750",
    "end": "2873060"
  },
  {
    "text": "NEHA NARULA: Pay to Pubkey\nis a thing, actually. And Pay to Pubkey Hash\nis considered better.",
    "start": "2873060",
    "end": "2878860"
  },
  {
    "text": "And the reason for that is\nkind of subtle, actually. It's because-- so the\nhash of the pubkey",
    "start": "2878860",
    "end": "2886160"
  },
  {
    "text": "is smaller than the pubkey. And this is definitely\ngoing on the blockchain.",
    "start": "2886160",
    "end": "2894252"
  },
  {
    "text": "We don't know if this is going\nto go on the blockchain or not. Not all outputs are consumed. So let's put the\nsmall stuff here",
    "start": "2894252",
    "end": "2901079"
  },
  {
    "text": "and the big stuff over here. It's about saving space. Also, the set of unspent\ntransaction outputs",
    "start": "2901080",
    "end": "2909070"
  },
  {
    "text": "is something that every\nnode has to maintain. It's very important. You are referring\nto it quite a bit.",
    "start": "2909070",
    "end": "2917030"
  },
  {
    "text": "This is not something that\nevery node has to maintain. And so you want to\nmake this smaller, even",
    "start": "2917030",
    "end": "2922888"
  },
  {
    "text": "at the expense of\nmaking this bigger.  Yes.",
    "start": "2922888",
    "end": "2928190"
  },
  {
    "text": "AUDIENCE: So then you\ncould accidentally sign a transaction that has a\npublic key but a script that doesn't actually verify it?",
    "start": "2928190",
    "end": "2935222"
  },
  {
    "text": "NEHA NARULA: Could\nyou accidentally sign a transaction that has a\npublic key but a script that doesn't verify?",
    "start": "2935222",
    "end": "2940400"
  },
  {
    "text": "Let me see if this\nanswers your question. So here is an example of\nan unspendable output.",
    "start": "2940400",
    "end": "2949470"
  },
  {
    "text": "The unspendable output\nhas an OP_RETURN as the first instruction\nof its scriptPubKey.",
    "start": "2949470",
    "end": "2956980"
  },
  {
    "text": "OP_RETURN does what\nyou might think it does, which means\nwhen you evaluate it, it returns immediately\nand says invalid.",
    "start": "2956980",
    "end": "2965059"
  },
  {
    "text": "And so if you have one of\nthese in your transaction",
    "start": "2965060",
    "end": "2971280"
  },
  {
    "text": "in your scriptPubKey,\nthere is no scriptSig that could possibly\nredeem the scriptPubKey.",
    "start": "2971280",
    "end": "2979450"
  },
  {
    "text": "You could create\nanything you wanted, and no matter what\nyou put on there, it would never evaluate to true. There's no way to actually\nredeem the scriptPubKey",
    "start": "2979450",
    "end": "2986193"
  },
  {
    "text": "in this output. Does that answer your question? AUDIENCE: I think\nit's the opposite. I was asking if you could\naccidentally get something that would always evaluate to true.",
    "start": "2986193",
    "end": "2992630"
  },
  {
    "text": "NEHA NARULA: Ah, OK, well,\nthat's the next slide. [CHUCKLING] So yes, this is what's called\nan anyone-can-spend output.",
    "start": "2992631",
    "end": "3000990"
  },
  {
    "text": "The simplest\nanyone-can-spend output is just an empty scriptPubKey. Because a scriptSig sig OP_TRUE\nin it would evaluate to true.",
    "start": "3000990",
    "end": "3009030"
  },
  {
    "text": "Notice here there's no public\nkeys, there's no signatures, there's no hashes\nof public keys.",
    "start": "3009030",
    "end": "3015395"
  },
  {
    "text": "The scriptPubKey\ndoesn't actually specify any public keys.",
    "start": "3015395",
    "end": "3020560"
  },
  {
    "text": "And so-- but when you\nevaluate this right here, you'd push OP_TRUE\nonto the stack,",
    "start": "3020560",
    "end": "3026080"
  },
  {
    "text": "and then you would finish,\nand there would be a true-- OP_TRUE would push--\nsorry, OP_TRUE would push a true\nonto the stack.",
    "start": "3026080",
    "end": "3031540"
  },
  {
    "text": "And then when you\nfinished, there would be true on the stack,\nmeaning this is valid. AUDIENCE: Also another way,\nyou could put the OP_TRUE",
    "start": "3031540",
    "end": "3037650"
  },
  {
    "text": "in the output script as well. Then you wouldn't have\nto push it because-- NEHA NARULA: Yeah. So this is an\nanyone-can-spend output,",
    "start": "3037650",
    "end": "3045090"
  },
  {
    "text": "and this is a\nno-one-can-spend output. And there's no\npublic keys in here.",
    "start": "3045090",
    "end": "3052070"
  },
  {
    "text": "There's no signatures in there. So you can totally create\noutputs that have nothing",
    "start": "3052070",
    "end": "3057680"
  },
  {
    "text": "to do with signatures, or maybe\nyou verify multiple signatures, which we're not going\nto go into right now,",
    "start": "3057680",
    "end": "3064050"
  },
  {
    "text": "but it's also possible. Yes. AUDIENCE: Can SIG have\na [INAUDIBLE] in it?",
    "start": "3064050",
    "end": "3069280"
  },
  {
    "text": "NEHA NARULA: Yes. AUDIENCE: [INAUDIBLE] NEHA NARULA: Yes, it can.",
    "start": "3069280",
    "end": "3074370"
  },
  {
    "text": "AUDIENCE: But the list of\n[INAUDIBLE] are [INAUDIBLE] NEHA NARULA: There are\nfewer than 200 opcodes.",
    "start": "3074370",
    "end": "3080690"
  },
  {
    "text": "The number of standard\nopcodes is even smaller, meaning that there's a\nvery small number that you can use in your scriptSigs\nand scriptPubKeys.",
    "start": "3080690",
    "end": "3087420"
  },
  {
    "text": "And it's definitely\npossible, if you write some weird scriptPubKey\nor some weird scriptSig",
    "start": "3087420",
    "end": "3094850"
  },
  {
    "text": "to accidentally create outputs\nthat are never spendable, or to accidentally\ncreate outputs that",
    "start": "3094850",
    "end": "3100370"
  },
  {
    "text": "could be spent by someone else. So there's a standard set\nof scriptPubKeys to use.",
    "start": "3100370",
    "end": "3106250"
  },
  {
    "text": "And I would not recommend\ngoing outside that set, except for in the lab\nthat you're going to do, because we have some\nmore fun ones in there.",
    "start": "3106250",
    "end": "3113750"
  },
  {
    "text": "Yes. AUDIENCE: Could you explain\na little bit more on the Pay to Script Hash.",
    "start": "3113750",
    "end": "3119190"
  },
  {
    "text": "Kind of like what [INAUDIBLE] NEHA NARULA: Sure,\nPay to Script Hash-- I don't actually have slides\non Pay to Script Hash,",
    "start": "3119190",
    "end": "3125465"
  },
  {
    "text": "so I'm not sure that we can\ndo a good job of explaining it right now.",
    "start": "3125465",
    "end": "3130630"
  },
  {
    "text": "But the idea behind Pay\nto Script Hash is that--",
    "start": "3130630",
    "end": "3135960"
  },
  {
    "text": "yeah, I don't have\nthe slides for it. But the idea is that you're\ngoing to put, instead",
    "start": "3135960",
    "end": "3142900"
  },
  {
    "text": "of this particular\nscriptPubKey here, you're going to have\na scriptPubKey that includes a hash of a script.",
    "start": "3142900",
    "end": "3150770"
  },
  {
    "text": "And then the scriptSig has\nto produce that script,",
    "start": "3150770",
    "end": "3155820"
  },
  {
    "text": "and it has to match that\nhash, and the whole thing has to verify is the rough\nidea behind Pay to Script Hash.",
    "start": "3155820",
    "end": "3164000"
  },
  {
    "text": "And we can produce an example\nof that for you tomorrow. But the cool thing\nabout that is you",
    "start": "3164000",
    "end": "3170410"
  },
  {
    "text": "don't even know what you have\nto do to redeem this output. So someone has to produce a\nscript that has the same hash,",
    "start": "3170410",
    "end": "3178310"
  },
  {
    "text": "and when combined\nwith the scriptPubKey, will evaluate to true. AUDIENCE: And that script\nwould be pushed on the stack?",
    "start": "3178310",
    "end": "3183382"
  },
  {
    "text": "NEHA NARULA: Yeah, so the\nscriptSig and the scriptPubKey literally just get\nconcatenated together",
    "start": "3183382",
    "end": "3189190"
  },
  {
    "text": "and then evaluated as one thing. So yeah, it would just go\nthrough the same thing. ",
    "start": "3189190",
    "end": "3196610"
  },
  {
    "text": "Any more questions? ",
    "start": "3196610",
    "end": "3203807"
  },
  {
    "text": "So what do you guys think? Is this good? Is this bad? ",
    "start": "3203807",
    "end": "3213839"
  },
  {
    "text": "AUDIENCE: Could you\ntry to [INAUDIBLE]",
    "start": "3213840",
    "end": "3224548"
  },
  {
    "text": "NEHA NARULA: Yeah,\nthat's a great question. So the question is,\ncould you DDoS a network",
    "start": "3224548",
    "end": "3230260"
  },
  {
    "text": "by creating transactions\nthat are not spendable? AUDIENCE: So you\nstill [INAUDIBLE]",
    "start": "3230260",
    "end": "3236860"
  },
  {
    "text": "NEHA NARULA: You can't really\nDDoS the network, per se. So this is an example\nof a transaction",
    "start": "3236860",
    "end": "3242349"
  },
  {
    "text": "that's not spendable. And see how it has this\nOP_RETURN, and it says, whatever. There is this\npattern of people who",
    "start": "3242350",
    "end": "3249040"
  },
  {
    "text": "like to store things in\nthe Bitcoin blockchain, because it's there, and\nit's very highly replicated.",
    "start": "3249040",
    "end": "3255910"
  },
  {
    "text": "And so one type of transaction\nthat a lot of people make is and OP_RETURN with a\nhash of some data in it",
    "start": "3255910",
    "end": "3263500"
  },
  {
    "text": "or some data in it. These are unspendable\noutputs that will live on the Bitcoin\nblockchain forever,",
    "start": "3263500",
    "end": "3270970"
  },
  {
    "text": "and will be part of the\nUTXO set, possibly forever. ",
    "start": "3270970",
    "end": "3277450"
  },
  {
    "text": "Generally, Bitcoin\ndevelopers discourage using Bitcoin in\nthis way because it does bloat the UTXO set.",
    "start": "3277450",
    "end": "3283517"
  },
  {
    "text": " That said, there's nothing\nto prevent you from doing it if you want to pay the fees.",
    "start": "3283518",
    "end": "3289610"
  },
  {
    "text": "What? TADGE DRYJA: It's actually\nnot part of the UTXO set because it has the OP_RETURN. NEHA NARULA: Oh, really? I didn't know that. OK, I didn't know that they\nweren't kept in the UTXO set.",
    "start": "3289610",
    "end": "3296810"
  },
  {
    "text": "TADGE DRYJA: [INAUDIBLE]\nthey would just made [INAUDIBLE] key hash\ninto whatever [INAUDIBLE] and that would\nbloat the UTXO set.",
    "start": "3296810",
    "end": "3302750"
  },
  {
    "text": "So it's like, well,\nthis is not [INAUDIBLE] NEHA NARULA: OK, I\ndidn't know that those weren't included in the UTXO. So that's good. So then it doesn't\nboat the UTXO set,",
    "start": "3302750",
    "end": "3308750"
  },
  {
    "text": "it just goes in the blockchain. And you paid the fee to put your\ntransaction in the blockchain. So good for you.",
    "start": "3308750",
    "end": "3314020"
  },
  {
    "text": "Yes. AUDIENCE: What's the\narchitectural logic for having a specific set of\nopcodes that Bitcoin can run?",
    "start": "3314020",
    "end": "3321484"
  },
  {
    "text": "Why not use a more general\nprogramming language? Is it just to have control? NEHA NARULA: That's\na great question.",
    "start": "3321485",
    "end": "3327760"
  },
  {
    "text": "So why have this weird\nOp code thing, right? I mean, what kind of\nsense does this make?",
    "start": "3327760",
    "end": "3334710"
  },
  {
    "text": "So the problem with the\ngeneral programming language",
    "start": "3334710",
    "end": "3340550"
  },
  {
    "text": "is it's really easy to\nshoot yourself in the foot. It's really easy to write\na program that you think--",
    "start": "3340550",
    "end": "3348000"
  },
  {
    "text": "how many of you have had a\nbug in your program ever? Please, all of you\nshould probably raise their hands, right?",
    "start": "3348000",
    "end": "3353950"
  },
  {
    "text": "[CHUCKLING] And how many of you have\nhad bugs in your program that showed up a lot later\nthan you thought they would,",
    "start": "3353950",
    "end": "3359789"
  },
  {
    "text": "when you thought your\nprogram didn't have any bugs? So these things, once\nyou put them out there,",
    "start": "3359790",
    "end": "3366010"
  },
  {
    "text": "these scriptPubKeys\nand script tag, once you put these transactions\nout there, they're out there. You cannot take them back--",
    "start": "3366010",
    "end": "3373350"
  },
  {
    "text": "well, not easily. And they might execute\nin ways that you didn't",
    "start": "3373350",
    "end": "3378420"
  },
  {
    "text": "anticipate them executing. The more complicated the script\nyou write, the more likely",
    "start": "3378420",
    "end": "3383490"
  },
  {
    "text": "it is that there's some hole\nin your script, some way of satisfying it that\nyou didn't anticipate,",
    "start": "3383490",
    "end": "3389940"
  },
  {
    "text": "that could end up\nstealing your money. So with a general\nprogramming language,",
    "start": "3389940",
    "end": "3395040"
  },
  {
    "text": "well, you might think,\noh, well, these OP codes are super tricky and weird,\nand I don't understand them,",
    "start": "3395040",
    "end": "3401400"
  },
  {
    "text": "at least with the general\nprogramming language, I'm more likely to write\ncorrect things, right? Eh. [CHUCKLING]",
    "start": "3401400",
    "end": "3407580"
  },
  {
    "text": "Actually, having this\nstrange opcode language has a lot of benefits. So number one, it's\nnot Turing-complete.",
    "start": "3407580",
    "end": "3413190"
  },
  {
    "text": "You know exactly\nhow much CPU it is going to take to run\nthese scripts because",
    "start": "3413190",
    "end": "3419850"
  },
  {
    "text": "of the nature of the\nopcodes and the language. There's no FOR loops in here.",
    "start": "3419850",
    "end": "3425880"
  },
  {
    "start": "3425000",
    "end": "3425000"
  },
  {
    "text": "You know you can't just run\na WHILE that takes forever. This is a stack-based language.",
    "start": "3425880",
    "end": "3432390"
  },
  {
    "text": "And so it's very easy to tell\nhow long a transaction is actually going to\ntake to execute.",
    "start": "3432390",
    "end": "3437790"
  },
  {
    "text": "And this is really\nimportant, because every node in the network has to\nexecute these things.",
    "start": "3437790",
    "end": "3442860"
  },
  {
    "text": "So you don't want a script\nsneaking in there that's going to take hours to execute.",
    "start": "3442860",
    "end": "3450750"
  },
  {
    "text": "It's also-- you can look\nat the number of opcodes in the script, and like I\nsaid, get a rough sense of how",
    "start": "3450750",
    "end": "3456565"
  },
  {
    "text": "expensive it's going to be. And that's why there are\nlimits on the number of opcodes you can have in a script. It's very difficult to do\nthat if you have a more",
    "start": "3456565",
    "end": "3463030"
  },
  {
    "text": "general programming language.  So those are a\ncouple of reasons.",
    "start": "3463030",
    "end": "3468440"
  },
  {
    "text": "And I mean, I think it's\nimportant to point out that Ethereum, which does have\na more general programming language, there are\nconstantly problems popping up",
    "start": "3468440",
    "end": "3476020"
  },
  {
    "text": "where people are taking\nadvantage of transact of contracts, even fairly\nwell-understood ones--",
    "start": "3476020",
    "end": "3482020"
  },
  {
    "text": "or we thought they\nwere well understood-- and figuring out how to\nfreeze people's funds",
    "start": "3482020",
    "end": "3488260"
  },
  {
    "text": "or steal people's funds. So that's the motivation\nbehind this sort of strange, stack-based\nopcode language.",
    "start": "3488260",
    "end": "3496540"
  },
  {
    "text": "Are there any other questions? Yeah, back there.",
    "start": "3496540",
    "end": "3501850"
  },
  {
    "text": "AUDIENCE: You talked about\nunspendable transactions outputs. NEHA NARULA: Outputs, Yes.",
    "start": "3501850",
    "end": "3506990"
  },
  {
    "text": "AUDIENCE: Could you\ncomment on colored coins? NEHA NARULA: Oh, colored coins-- no comment on colored coins.",
    "start": "3506990",
    "end": "3512410"
  },
  {
    "text": "I don't understand\nthem well enough to talk about them right now. Yeah. What did you-- TADGE DRYJA: I would\nsay one other thing.",
    "start": "3512410",
    "end": "3518198"
  },
  {
    "text": "Most of the-- a lot of the\ncool opcodes are disabled. So it's very limited. It seems like you--",
    "start": "3518198",
    "end": "3523792"
  },
  {
    "text": "there's a list of,\nhere's all these opcodes. Oh, I can multiply\nnumbers together. That's disabled. [INAUDIBLE]",
    "start": "3523792",
    "end": "3528880"
  },
  {
    "text": "NEHA NARULA: Yeah. And I do want to stress,\nwhen you're dealing with real money-- so not in the\nlab for this class--",
    "start": "3528880",
    "end": "3535050"
  },
  {
    "text": "you want to stick with\nvery standard scripts. You don't want to write\nsuper-crazy, weird, tricky scripts, or if you\ndo, you want to get",
    "start": "3535050",
    "end": "3541210"
  },
  {
    "text": "them vetted very carefully. Yes. AUDIENCE: Who is disabling\nand enabling these things?",
    "start": "3541210",
    "end": "3546340"
  },
  {
    "text": "NEHA NARULA: Great question. So there are two levels\nat which things can be",
    "start": "3546340",
    "end": "3551440"
  },
  {
    "text": "enabled or disabled in Bitcoin. So first, there's\nthe validation rules, so what makes a transaction\nvalid or not valid.",
    "start": "3551440",
    "end": "3558700"
  },
  {
    "text": "Meaning that if a transaction\nis invalid and it's in a block, that whole block is invalid.",
    "start": "3558700",
    "end": "3564849"
  },
  {
    "text": "If a transaction is invalid\nand in a block, and that block is in a blockchain, that\nentire blockchain is invalid.",
    "start": "3564850",
    "end": "3570850"
  },
  {
    "text": "So there's that level. And we're going to talk\nabout how those rules change",
    "start": "3570850",
    "end": "3576070"
  },
  {
    "text": "and who sets those rules. But you can consider\nthem sort of, for now, being set by the code,\nthe Bitcoin Core--",
    "start": "3576070",
    "end": "3582280"
  },
  {
    "text": "or the Bitcoin software,\nwhich specifies what is valid and what is invalid. But there is another\nlevel at which",
    "start": "3582280",
    "end": "3588310"
  },
  {
    "text": "you can adjust what\nends up getting accepted",
    "start": "3588310",
    "end": "3595060"
  },
  {
    "text": "or not accepted. And that is what is transmitted\nover the peer-to-peer network. So there are transactions\nthat are valid, but are",
    "start": "3595060",
    "end": "3603160"
  },
  {
    "text": "what's known as non-standard. And that transaction,\nif it gets into a block,",
    "start": "3603160",
    "end": "3609310"
  },
  {
    "text": "that block is still valid. But the nodes in the network,\nif it sees that transaction, won't relay them around.",
    "start": "3609310",
    "end": "3616990"
  },
  {
    "text": "So you'd have to be a\nminer and actually decide, I want this transaction in a\nblock, and mine that block.",
    "start": "3616990",
    "end": "3622279"
  },
  {
    "text": "And if you do that,\neveryone will consider it a valid block, OK, fine. But no one will actually\nsend your transaction around.",
    "start": "3622280",
    "end": "3628440"
  },
  {
    "text": "And so if you're not\na miner yourself, the odds of it getting into\nthe blockchain are very low. And so those are the\ntwo sets of rules.",
    "start": "3628440",
    "end": "3635710"
  },
  {
    "text": "The peer-to-peer rules are more\nrestrictive than the validation rules. ",
    "start": "3635710",
    "end": "3644010"
  },
  {
    "text": "OK, so we already\nkind of started talking about this\na little bit-- what are the benefits\nof your UTXOs",
    "start": "3644010",
    "end": "3649500"
  },
  {
    "text": "and what are the\ndownsides of UTXOs? So one of the benefits\nof UTXOs is that--",
    "start": "3649500",
    "end": "3655382"
  },
  {
    "text": "do you guys see how they\nhelp with replay attacks? Sure, I can copy\nthis transaction",
    "start": "3655382",
    "end": "3662075"
  },
  {
    "text": "and put multiple out there,\nbut you're only allowed to spend an output once. And once you consume\nthat output, that's it.",
    "start": "3662075",
    "end": "3667560"
  },
  {
    "text": "So you can't really do\nreplay attacks in this model. So it's a very\nsort of elegant way",
    "start": "3667560",
    "end": "3673242"
  },
  {
    "text": "of getting rid of\nthe replay attack problem without having to\nstore a nonce per account",
    "start": "3673242",
    "end": "3679710"
  },
  {
    "text": "in your system. Another benefit is\nthat you can actually",
    "start": "3679710",
    "end": "3685020"
  },
  {
    "text": "get a little bit better\nprivacy with this UTXO system. Because you don't have to\nuse the same public key",
    "start": "3685020",
    "end": "3692940"
  },
  {
    "text": "for all of your transactions. You can generate new\nones every single time, and then combine UTXOs from\ndifferent things into--",
    "start": "3692940",
    "end": "3699813"
  },
  {
    "text": "I mean, you're going to\nhave to combine them anyway, even if they did spend\nat the same public key. So why not generate\nfresh ones all the time?",
    "start": "3699813",
    "end": "3706133"
  },
  {
    "text": "And it becomes a\nlittle bit harder to track who you're spending\nand who you're paying to. In the account-based\nmodel, you need to have--",
    "start": "3706133",
    "end": "3713845"
  },
  {
    "text": "it's more likely that\nall of your funds are going to be in one account\nin order to make a spend.",
    "start": "3713845",
    "end": "3719349"
  },
  {
    "text": "Now a downside of UTXOs is\nthat they're complicated. So when I first\nheard about UTXOs",
    "start": "3719350",
    "end": "3726310"
  },
  {
    "text": "and I first understood how\nBitcoin worked, I was like, why does Bitcoin work this way? This makes zero sense. An account-based model\nwould be so much easier.",
    "start": "3726310",
    "end": "3734500"
  },
  {
    "text": "And I mean, I think,\nfor wallet providers and for people who are\nwriting user software,",
    "start": "3734500",
    "end": "3740020"
  },
  {
    "text": "it is easier to deal with an\naccount-based model than a UTXO model. Because people who are writing\nBitcoin wallet software",
    "start": "3740020",
    "end": "3747580"
  },
  {
    "text": "have to keep track\nof all of your UTXOs and then figure out\nhow to combine them to get the amount that\nyou want to spend,",
    "start": "3747580",
    "end": "3754390"
  },
  {
    "text": "and make sure that they produce\nwhat are called change outputs the right way, so you\ndon't accidentally",
    "start": "3754390",
    "end": "3760750"
  },
  {
    "text": "lose some of your\nmoney because you're spending an output\nthat has 100 bitcoin but you're only paying\nsomeone one bitcoin.",
    "start": "3760750",
    "end": "3766660"
  },
  {
    "text": "You better make sure you have\nthat 99 bitcoin output in there going back to you. So it just makes everything a\nlittle bit more complicated.",
    "start": "3766660",
    "end": "3774717"
  },
  {
    "text": "You can't just spend the\namount you want to spend. You have to find these\noutputs, and combine them in the right way, and figure\nall of this stuff out.",
    "start": "3774717",
    "end": "3783140"
  },
  {
    "text": "Another problem is\naround fungibility. So this is why I say that\nbitcoin is not fungible, because of these outputs,\nand the fact that you have",
    "start": "3783140",
    "end": "3790369"
  },
  {
    "text": "to point back to the output\nthat you're going to spend, which ends up creating what's\ncalled a transaction graph.",
    "start": "3790370",
    "end": "3798170"
  },
  {
    "text": "So you can sort of see how\nthings are chained together, and you can actually discern\nquite a bit of information",
    "start": "3798170",
    "end": "3805310"
  },
  {
    "text": "about what's going\non in the network. And in fact, the FBI has\nused the transaction graph",
    "start": "3805310",
    "end": "3811010"
  },
  {
    "text": "in some of its cases\naround Silk Road, to see where Bitcoin was moving. And there are many\ncompanies out there--",
    "start": "3811010",
    "end": "3817460"
  },
  {
    "text": "Chain Analysis, Elliptic,\nthat provide services based around the fact that\nBitcoin's transaction graph is",
    "start": "3817460",
    "end": "3825650"
  },
  {
    "text": "totally open, and so you can\nsee how coins are moving around. So in addition to the\ntransaction graph problem,",
    "start": "3825650",
    "end": "3833450"
  },
  {
    "text": "you kind of lose this aspect\nof fungibility in the sense that, let's say, that I know\nthat, for whatever reason,",
    "start": "3833450",
    "end": "3840920"
  },
  {
    "text": "these coins came from,\nlet's say, I don't know, a terrorist or\nsomething like that.",
    "start": "3840920",
    "end": "3848150"
  },
  {
    "text": "You then know exactly where\nthose coins are going, and you can kind of see\nthe chain of transactions",
    "start": "3848150",
    "end": "3854360"
  },
  {
    "text": "that come off of those coins. And it sort of creates\na potential opportunity",
    "start": "3854360",
    "end": "3859580"
  },
  {
    "text": "for someone to blacklist coins. Or you might decide that you\nlike coins that were produced--",
    "start": "3859580",
    "end": "3867040"
  },
  {
    "text": "that are fresher\nthan other coins. So there's this ability to\ndistinguish between coins,",
    "start": "3867040",
    "end": "3873330"
  },
  {
    "text": "which is a little\nbit troublesome, because fungibility is\ngenerally considered a very good property\nfor money to have,",
    "start": "3873330",
    "end": "3879590"
  },
  {
    "text": "and this is not\nentirely fungible. But people are working on that. ",
    "start": "3879590",
    "end": "3886160"
  },
  {
    "text": "Any other questions? I alluded to this earlier,\nbut every single node",
    "start": "3886160",
    "end": "3892120"
  },
  {
    "text": "that's running the\nBitcoin software keeps this data structure\ncalled the UTXO set. So these are all of the\noutstanding, unspent",
    "start": "3892120",
    "end": "3900160"
  },
  {
    "text": "transaction outputs. It's all of the coins\nin the system, all of the money in the system\nthat's available to be spent.",
    "start": "3900160",
    "end": "3907780"
  },
  {
    "text": "The way that this\nis computed is, when a Bitcoin node\ncomes online and starts",
    "start": "3907780",
    "end": "3912789"
  },
  {
    "text": "to download the blockchain,\nthey run through the blockchain and continuously add\nand remove things",
    "start": "3912790",
    "end": "3918190"
  },
  {
    "text": "from the UTXO set\nto produce a UTXO set that is valid for\nwhatever the last block is",
    "start": "3918190",
    "end": "3924010"
  },
  {
    "text": "that it's seen. When a new block comes in, a\nnode runs through the block,",
    "start": "3924010",
    "end": "3929230"
  },
  {
    "text": "and again removes\nand adds things to the UTXO set as necessary.",
    "start": "3929230",
    "end": "3935770"
  },
  {
    "text": "Right now, there's about 60\nmillion UTXOs in the UTXO set.",
    "start": "3935770",
    "end": "3942190"
  },
  {
    "text": "A lot of them,\nunfortunately-- well, a lot, in terms of bytes of the\nUTXO set, a lot of them",
    "start": "3942190",
    "end": "3950260"
  },
  {
    "text": "are very small and are unlikely\nto get spent very soon. So that's kind of a bummer. The UTXO set is about three\ngigabytes right now, I think.",
    "start": "3950260",
    "end": "3958530"
  },
  {
    "text": "And so every node in\nBitcoin, in addition to storing the blockchain,\nstores this UTXO set,",
    "start": "3958530",
    "end": "3965230"
  },
  {
    "text": "and uses this data structure\nto very quickly tell if a transaction is a\ndouble-spend or not.",
    "start": "3965230",
    "end": "3973780"
  },
  {
    "text": "Any questions\nabout the UTXO set? Yes, SJ. AUDIENCE: How do you avoid\nhaving small transactions accumulate over time?",
    "start": "3973780",
    "end": "3980198"
  },
  {
    "text": "NEHA NARULA: That's\na good question-- how do you avoid having\nsmall transactions accumulate over time? I don't know the answer\nto that question.",
    "start": "3980198",
    "end": "3987323"
  },
  {
    "text": "It's kind of a bummer.  It's not really in\npeople's interest",
    "start": "3987323",
    "end": "3992859"
  },
  {
    "text": "to generate those transactions\nbecause you're creating-- I haven't talked about\nhow fees are computed yet.",
    "start": "3992860",
    "end": "3999280"
  },
  {
    "text": "But fees are measured\naccording to the resources that a transaction\ntakes up in the system.",
    "start": "3999280",
    "end": "4005790"
  },
  {
    "text": "Fees are measured according to\nthe size of the transaction. So if you have to combine a\nwhole bunch of tiny outputs",
    "start": "4005790",
    "end": "4013260"
  },
  {
    "text": "in order to get\na big enough sum, you're going to have\nto pay more in fees. So it's not really\nin your interest",
    "start": "4013260",
    "end": "4019530"
  },
  {
    "text": "to produce a lot of\nthese tiny things. But there's not really a\ngood way of stopping it. And in fact there have\nbeen services in the past,",
    "start": "4019530",
    "end": "4026430"
  },
  {
    "text": "like Satoshi dice\nand whatnot, that have created a ton\nof very tiny outputs",
    "start": "4026430",
    "end": "4032130"
  },
  {
    "text": "and it bloated the UTXO set. I don't know, Tadge, if you\nhave any insight into how to stop that from happening.",
    "start": "4032130",
    "end": "4038293"
  },
  {
    "text": "TADGE DRYJA: Make\nthe fees higher. NEHA NARULA: Other\nthan the fees-- other than the fees, yeah. TADGE DRYJA: Better\nwallet software.",
    "start": "4038293",
    "end": "4044140"
  },
  {
    "text": "A lot of it's\n[? unintentional. ?] NEHA NARULA: Yes.",
    "start": "4044140",
    "end": "4049440"
  },
  {
    "text": "AUDIENCE: You mentioned that one\nother [INAUDIBLE] is privacy, and you need to\ngenerate new pubkeys.",
    "start": "4049440",
    "end": "4055450"
  },
  {
    "text": "But would this prevent you,\nin the account-based model, prevent from getting an account?",
    "start": "4055450",
    "end": "4062740"
  },
  {
    "text": "NEHA NARULA: Yeah. So I'm not sure in the\naccount-based model-- we'll find out more about this\nwhen we get to the Ethereum",
    "start": "4062740",
    "end": "4069210"
  },
  {
    "text": "section of the class-- how you combine spending\nfrom different accounts. But Bitcoin makes it very\neasy to combine spending",
    "start": "4069210",
    "end": "4077010"
  },
  {
    "text": "from different pubkeys. In the account-based\nmodel, I could imagine it being a slightly\nmore complicated process. But that's a good point.",
    "start": "4077010",
    "end": "4082660"
  },
  {
    "text": "Yes, you could definitely\ncreate a lot of accounts with a lot of small balance. But if you want to\nspend a lot, you're going to have to\nsomehow accumulate",
    "start": "4082660",
    "end": "4089400"
  },
  {
    "text": "all of that spending. Remember, I talked\nabout how there is one special transaction\nin every block, called",
    "start": "4089400",
    "end": "4097370"
  },
  {
    "text": "the coinbase transaction. And this transaction\ndoes not have to follow all of the\nrules specified before.",
    "start": "4097370",
    "end": "4102649"
  },
  {
    "text": "So this is kind of like\na hard-coded exception into how Bitcoin\nworks, that there can be this one\ntransaction in every block,",
    "start": "4102649",
    "end": "4109068"
  },
  {
    "text": "called the coinbase transaction. It is the first transaction. The coinbase transaction\nhas exactly one input.",
    "start": "4109069",
    "end": "4116089"
  },
  {
    "text": "And that input needs\nto have certain feel. This input does not point\nto a previous output.",
    "start": "4116090",
    "end": "4124219"
  },
  {
    "text": "This input is essentially empty. This is the transaction that\ndoles out the block reward.",
    "start": "4124220",
    "end": "4131670"
  },
  {
    "text": "So this is the\ntransaction that-- the block reward used\nto be 50 bitcoins--",
    "start": "4131670",
    "end": "4137318"
  },
  {
    "text": "25 bitcoins, 50 bitcoins, now\nit's 12.5 bitcoins per block. This is the transaction that\ndoles out that 12.5 bitcoins",
    "start": "4137319",
    "end": "4145229"
  },
  {
    "text": "plus the fees of the block. So it has exactly one input.",
    "start": "4145229",
    "end": "4151500"
  },
  {
    "text": "And that input has all zeros\nfor the previous transaction ID.",
    "start": "4151500",
    "end": "4156720"
  },
  {
    "text": "And then FFFFF for the index\ninto that previous transaction ID.",
    "start": "4156720",
    "end": "4162089"
  },
  {
    "text": "I think the scriptSig can\nbasically be whatever you want. It's not evaluated.",
    "start": "4162090",
    "end": "4167850"
  },
  {
    "text": "It might have to be valid. I'm not sure. And then its output\nis in Satoshis.",
    "start": "4167850",
    "end": "4174420"
  },
  {
    "text": "So this is 12.5 Bitcoin. Because remember, a Bitcoin\nis 10 to the eighth Satoshis.",
    "start": "4174420",
    "end": "4181170"
  },
  {
    "text": "So this is 12.5\nbitcoin, plus here are the fees from that block. And you probably,\nif you're the one--",
    "start": "4181170",
    "end": "4189080"
  },
  {
    "text": "so the miner is the one who\ncreates this transaction. And the miner who creates\nthis transaction probably",
    "start": "4189080",
    "end": "4196530"
  },
  {
    "text": "wants to give themselves the\nBitcoin and the block reward, and so would specify,\nin here, a scriptPubKey",
    "start": "4196530",
    "end": "4203630"
  },
  {
    "text": "that they could redeem.  Note that this also has the\nnice property of making--",
    "start": "4203630",
    "end": "4210067"
  },
  {
    "text": "well, I don't if\nit's a nice property, but all the blocks that people\nwork on are actually different. Because in each block,\nthe coinbase transaction",
    "start": "4210067",
    "end": "4216682"
  },
  {
    "text": "is going to be different\nbecause each person is trying to pay themselves\nfor-- the different miners. Yes.",
    "start": "4216682",
    "end": "4221844"
  },
  {
    "text": "AUDIENCE: What's [INAUDIBLE]\nthem to 12.5 bitcoins? NEHA NARULA: Ah, great question. So what would happen\nif a miner put,",
    "start": "4221845",
    "end": "4228780"
  },
  {
    "text": "like, 100 bitcoins in there? Any idea? ",
    "start": "4228780",
    "end": "4237560"
  },
  {
    "text": "So what's keeping\nthat at 12.5 bitcoins is the same thing that's\nkeeping invalid transactions out",
    "start": "4237560",
    "end": "4244219"
  },
  {
    "text": "of the blockchain, which is\nthe consensus rules of Bitcoin. It says in the code that,\nat this point in time, given",
    "start": "4244220",
    "end": "4252980"
  },
  {
    "text": "the block height where\nwe are, that number should be no larger\nthan 12.5 plus the fees",
    "start": "4252980",
    "end": "4260000"
  },
  {
    "text": "in the transaction. And if a miner put a\ndifferent number in there--",
    "start": "4260000",
    "end": "4266400"
  },
  {
    "text": "they can put a lower\nnumber, that's fine. They'll end up burning some\nBitcoin, which is unfortunate.",
    "start": "4266400",
    "end": "4271810"
  },
  {
    "text": "But if they try to put\nsomething higher in there, the network will\nregard it as invalid,",
    "start": "4271810",
    "end": "4278340"
  },
  {
    "text": "because the network is\nrunning a set of rules. And we are, in this\nclass, going to get",
    "start": "4278340",
    "end": "4283440"
  },
  {
    "text": "to what happens when you want to\nchange that set of rules, which gets really tricky. But right now, assume\nthat the network",
    "start": "4283440",
    "end": "4291719"
  },
  {
    "text": "is running the set of\nrules, they're all checking, they're all validating. And so the answer\nis, the network would reject this block if there\nwas a higher number in there.",
    "start": "4291720",
    "end": "4301930"
  },
  {
    "text": "So this is kind of fun,\nbecause you can sort of put whatever you want in here. And so miners like to put\nadvertisements in there.",
    "start": "4301930",
    "end": "4309750"
  },
  {
    "text": "And there actually was a\nperiod, there was a time-- I don't know if you\ncan still do this-- where you could literally\nbuy this space from miners,",
    "start": "4309750",
    "end": "4316758"
  },
  {
    "text": "and put whatever\nyou wanted in there. So you could put your name,\nor ask someone to marry you,",
    "start": "4316758",
    "end": "4322230"
  },
  {
    "text": "or whatever you\nmight want to do, to put in the Bitcoin\nblockchain for all eternity. But yeah, so miners like to put\nfun things in the scriptSig.",
    "start": "4322230",
    "end": "4333510"
  },
  {
    "text": "And maybe we could show them\nsome of those things later. Or you could go look yourself.",
    "start": "4333510",
    "end": "4338929"
  },
  {
    "start": "4338930",
    "end": "4339553"
  }
]