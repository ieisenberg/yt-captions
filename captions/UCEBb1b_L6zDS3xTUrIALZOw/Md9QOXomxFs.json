[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "5808"
  },
  {
    "start": "5808",
    "end": "12368"
  },
  {
    "text": "JUSTIN SOLOMON: OK. Well, welcome back to\nanother problem session. It's great to see everybody's\nsmiling faces again.",
    "start": "12368",
    "end": "19220"
  },
  {
    "text": "Right, so today, we're\ngoing to continue our discussion of\ngraph theory problems, this time focusing on,\nwell, a little bit of this,",
    "start": "19220",
    "end": "26137"
  },
  {
    "text": "a little bit of that, some\nshortest past problems, all pairs shortest path,\nand then modification",
    "start": "26137",
    "end": "31430"
  },
  {
    "text": "of the Dijkstra's algorithm\nto finish us off for the day. So as always, we'll go through\nour problem session problems",
    "start": "31430",
    "end": "39440"
  },
  {
    "text": "in order, for no reason\nother than that's the way they were\npresented to me, and I think roughly\nisomorphic to how",
    "start": "39440",
    "end": "45650"
  },
  {
    "text": "most of the homeworks\nin this class go anyway. But in any event,\nlet's get started here.",
    "start": "45650",
    "end": "50790"
  },
  {
    "text": "So in problem session\nproblem 7-1 here, as always, our first\nproblem is sort of a warm-up",
    "start": "50790",
    "end": "58307"
  },
  {
    "text": "to make sure that we understand\nall these sort of definitions, techniques that we use in 6.006.",
    "start": "58307",
    "end": "63710"
  },
  {
    "text": "Today, we're going to go\nover Dijkstra's algorithm. So if y'all recall, Dijkstra's\nalgorithm is a technique",
    "start": "63710",
    "end": "69890"
  },
  {
    "text": "for computing shortest path from\na single source to your rest of your graph. There's about a\nmillion different ways",
    "start": "69890",
    "end": "75650"
  },
  {
    "text": "to explain, understand\nDijkstra's algorithm. So I'll undoubtedly revert\nupon the one that I remember,",
    "start": "75650",
    "end": "80675"
  },
  {
    "text": "which is probably not\nthe one that Jason just covered in lecture. But we'll make it work. And of course, if there\nare any questions,",
    "start": "80675",
    "end": "86160"
  },
  {
    "text": "we'll address those\nalong the way. I'm going to switch to\na piece of chalk that isn't an eight of an\ninch and get started.",
    "start": "86160",
    "end": "95000"
  },
  {
    "text": "Right, so in problem 1A\nour homework here, we were asked to run Dijkstra's\nalgorithm from vertex s here.",
    "start": "95000",
    "end": "103880"
  },
  {
    "text": "By the way, just sort of\na standard terminology in graph theory that I think\nwe'll see a lot in the homework",
    "start": "103880",
    "end": "108950"
  },
  {
    "text": "is we typically use s for\nthe sort of starting point of a path, or sometimes\nthe source if we're",
    "start": "108950",
    "end": "114173"
  },
  {
    "text": "talking about network flows. But I don't think we\ndo those in this class. And then t is usually\nthe destination.",
    "start": "114173",
    "end": "121490"
  },
  {
    "text": "Why t, you might ask? Because it's the letter after s. Right, so our first\ntask here is to compute",
    "start": "121490",
    "end": "129500"
  },
  {
    "text": "the single-source shortest\npath from s to everything else in our graph. Initially, this looks painful.",
    "start": "129500",
    "end": "135719"
  },
  {
    "text": "But it's not. So you're going to forgive me. I'm going to write a sort of\nshorthand version of Dijkstra's algorithm, because I'm\ntalking to you as I solve",
    "start": "135720",
    "end": "142712"
  },
  {
    "text": "this problem, which\nof course would be much more annoying for\nyou guys to do on paper. But that's life in the city.",
    "start": "142712",
    "end": "149720"
  },
  {
    "text": "So there. That's my-- in the\nwords of Britney Spears, it's my prerogative\nas your instructor.",
    "start": "149720",
    "end": "155190"
  },
  {
    "text": "OK, so in Dijkstra's\nalgorithm, what do we do? We initially label\nall of our vertices",
    "start": "155190",
    "end": "160220"
  },
  {
    "text": "as having distance infinity\nto the source, or-- and we insert them into\nour priority queue,",
    "start": "160220",
    "end": "167330"
  },
  {
    "text": "except for one vertex, which\nof course is our source vertex. And he or she has distance 0\nfor an obvious reason, which",
    "start": "167330",
    "end": "175670"
  },
  {
    "text": "is that if my path\nstarts at the source, it has distance 0 to the source. So as our shorthand--",
    "start": "175670",
    "end": "181970"
  },
  {
    "text": "what was that? Do I want to use red? Yes, of course I do. ",
    "start": "181970",
    "end": "189300"
  },
  {
    "text": "But see, it's this\nfat chalk, man. OK. 0. I can make this work.",
    "start": "189300",
    "end": "195540"
  },
  {
    "text": "OK. So our convention\nfor today is going to be if a vertex does\nnot have a label on it,",
    "start": "195540",
    "end": "201660"
  },
  {
    "text": "it is distance infinity. So what does Dijkstra's\nalgorithm do?",
    "start": "201660",
    "end": "207480"
  },
  {
    "text": "Dijkstra's algorithm\ngrabs the closest vertex that I haven't yet\nprocessed, and closest",
    "start": "207480",
    "end": "213972"
  },
  {
    "text": "in terms of the\ndistance value that I've stored at that vertex, and then\nupdates all of its neighbors using sort of a triangle\ninequality style construction.",
    "start": "213973",
    "end": "221670"
  },
  {
    "text": "So let's see what\nthat looks like. So so far, everything is\ndistance infinity away,",
    "start": "221670",
    "end": "226950"
  },
  {
    "text": "except for one vertex, which is\nvertex s, which is distance 0. So obviously, that should\nbe our first iteration",
    "start": "226950",
    "end": "232470"
  },
  {
    "text": "of Dijkstra's algorithm. And now what vertex\nS is going to do is look at all of s's\nneighbors and update them",
    "start": "232470",
    "end": "238830"
  },
  {
    "text": "using the triangle inequality. And if they're closer by\nhaving a path through s to the neighbor, then\nI update the distance.",
    "start": "238830",
    "end": "245620"
  },
  {
    "text": "And if it's not, then I don't. In this case,\neverything is infinity. So it's pretty clear that I\nshould route my path through s,",
    "start": "245620",
    "end": "251939"
  },
  {
    "text": "because any distance\nless than infinity is smaller than infinity. So in particular, notice that\nthere's an edge of length",
    "start": "251940",
    "end": "259109"
  },
  {
    "text": "8 from s to a. So now, rather than being\ndistance infinity away, I can see that vertex\na is really distance 8.",
    "start": "259110",
    "end": "268050"
  },
  {
    "text": "Oh, this chalk gives me shivers. Similarly here, there's\nan edge of length 7. ",
    "start": "268050",
    "end": "275819"
  },
  {
    "text": "And I believe that's all\nof the edges out of s. So we're good. And now the kind of\nnice thing about the way",
    "start": "275820",
    "end": "281900"
  },
  {
    "text": "Dijkstra's algorithm\nworks, which I guess was a little bit\nimplicit in the construction we saw yesterday, but\nthat's OK, is that once",
    "start": "281900",
    "end": "289190"
  },
  {
    "text": "I visit a vertex, I\nnever touch it again. It gets frozen in time--",
    "start": "289190",
    "end": "295610"
  },
  {
    "text": "in distance, I suppose. But in any event,\nwhat that means is I'm going to put a little\nbox around it, meaning I'm",
    "start": "295610",
    "end": "300710"
  },
  {
    "text": "done with this guy. He is no longer in my queue. OK. Hopefully our pictorial\nsystem makes some sense here.",
    "start": "300710",
    "end": "307085"
  },
  {
    "text": "Again, on your homework\nproblem, you actually have to write this stuff out. And I'm sorry. That sucks. But I don't have to, because\nI'm talking to you all today.",
    "start": "307085",
    "end": "314350"
  },
  {
    "text": "OK, so remember\nDijkstra's algorithm. We're going to look at\nour list of vertices we haven't seen yet. So it's everything except for\nS. Find the one that's closest.",
    "start": "314350",
    "end": "321440"
  },
  {
    "text": "And process that one next. So in this case,\nthat's the 7 here. OK, so let's take a look.",
    "start": "321440",
    "end": "326900"
  },
  {
    "text": "What are the neighbors of 7? Well, I've got s. And that's-- oh, and d here.",
    "start": "326900",
    "end": "333610"
  },
  {
    "text": "OK. So first of all, let's\ntake a look at s. Obviously, if I have\na path that goes through c, back through\nthis vertical edge to s,",
    "start": "333610",
    "end": "342090"
  },
  {
    "text": "that path has length 8, right? 7 plus 1. 8 is bigger than 0. So I do not update s.",
    "start": "342090",
    "end": "347663"
  },
  {
    "text": "But we actually\nalready knew that, because s was frozen here. So I didn't even have\nto look at that edge. I could have removed\nit if I wanted to.",
    "start": "347663",
    "end": "354400"
  },
  {
    "text": "OK. But there's another\nedge coming out of c, which is pointing\ntoward d, that has length 4.",
    "start": "354400",
    "end": "359460"
  },
  {
    "text": "7 plus 4 is, wait for it, 11. And that's less than infinity.",
    "start": "359460",
    "end": "364569"
  },
  {
    "text": "So I update d's distance to 11. And I don't think I've\nmanaged to make a mistake yet.",
    "start": "364570",
    "end": "371760"
  },
  {
    "text": "OK, so now, we've looked\nat all the edges out of c. And c is frozen.",
    "start": "371760",
    "end": "377610"
  },
  {
    "text": "And we move on. OK, next, let's see. On the other vertices, we\nhave infinity, 8, and 11.",
    "start": "377610",
    "end": "383660"
  },
  {
    "text": "So the smallest of those\nthree numbers is 8. And we're going to update\nall the neighbors of the 8,",
    "start": "383660",
    "end": "388979"
  },
  {
    "text": "which, thankfully, although\nthis graph looks big, they had some mercy on your\nsection instructor today.",
    "start": "388980",
    "end": "394902"
  },
  {
    "text": "And really, there\naren't that many edges. So this isn't too\nhard to process. But here's the thing.",
    "start": "394902",
    "end": "400520"
  },
  {
    "text": "There's an edge of length\n0 from a to d here. I can get to the a in 8 units.",
    "start": "400520",
    "end": "406550"
  },
  {
    "text": "So I can also get to the d in 8\nunits by traversing that edge. 8 is less than 11.",
    "start": "406550",
    "end": "412480"
  },
  {
    "text": "That's good news. Do I want to erase\nit or scratch it out? What's going to be better? I'll scratch it out,\njust to be messy.",
    "start": "412480",
    "end": "419490"
  },
  {
    "text": "OK. So now, d has a distance\n8 from vertex s.",
    "start": "419490",
    "end": "425300"
  },
  {
    "text": "And I believe that's\nall the edges out of a.  So a is set.",
    "start": "425300",
    "end": "431840"
  },
  {
    "text": "OK. This fun or what? So now we look at all\nthe edges out of-- oh, sorry.",
    "start": "431840",
    "end": "437000"
  },
  {
    "text": "We step back, and we look\nat all of our vertices. We find the closest one. That's d. And now we've got to update\nall of d's neighbors.",
    "start": "437000",
    "end": "444069"
  },
  {
    "text": "So thankfully, all\nthe remaining vertices have distance infinity. So what do we know? There's an edge\nof length 1 here.",
    "start": "444070",
    "end": "450294"
  },
  {
    "text": "So we get a 9. There's an edge of length 2. So I get a 10.",
    "start": "450295",
    "end": "456620"
  },
  {
    "text": "And I believe those are all\nthe outgoing edges from d. And now d's set. I'm going to start\nmoving faster,",
    "start": "456620",
    "end": "462980"
  },
  {
    "text": "because this is hella boring. OK. Now the next closest\nedge is the 9.",
    "start": "462980",
    "end": "468800"
  },
  {
    "text": "Notice that the 9 only--\nor rather, b, I suppose, is the vertex, which is\ncurrently at distance 9.",
    "start": "468800",
    "end": "476107"
  },
  {
    "text": "It only has one neighbor that\nhasn't yet been processed, which is e. So we know that that's 9,\n10, 11, 12 distance away.",
    "start": "476107",
    "end": "484715"
  },
  {
    "text": "I'm going to check\nmy scrap paper and make sure I haven't\nmade any mistakes yet. 7, 8.",
    "start": "484715",
    "end": "489974"
  },
  {
    "text": "Cool. OK. So now our next\nclosest vertex is vertex h, which is distance 10.",
    "start": "489974",
    "end": "497300"
  },
  {
    "text": "And aha! If I traverse the edge\nupward from h to e,",
    "start": "497300",
    "end": "502370"
  },
  {
    "text": "I can get a path of length 11. And 11, according to\nmost mathematicians, is less than 12.",
    "start": "502370",
    "end": "508520"
  },
  {
    "text": "And hence, we should\nupdate the value here. In addition to that, there is\nan edge of length 2 out of h,",
    "start": "508520",
    "end": "515178"
  },
  {
    "text": "pointing into g. 10 plus 2 is 12. And I believe that's it.",
    "start": "515179",
    "end": "521788"
  },
  {
    "text": "Getting there. OK, so the next\nclosest vertex is e.",
    "start": "521789",
    "end": "526810"
  },
  {
    "text": "e has no outgoing edges. So e is all set. ",
    "start": "526810",
    "end": "532910"
  },
  {
    "text": "After that, we've got g. g has an outgoing edge\nof length 1 into d.",
    "start": "532910",
    "end": "538140"
  },
  {
    "text": "12 plus 1 is 13, which\nis larger than 8. So we don't update.",
    "start": "538140",
    "end": "543930"
  },
  {
    "text": "And similarly, 12 plus\n0 is bigger than 7. So we don't update. But again, the edges\nthat point into vertices",
    "start": "543930",
    "end": "549615"
  },
  {
    "text": "that we've already\nprocessed, we really don't have to even\nconsider, just by the way that Dijkstra's algorithm works.",
    "start": "549615",
    "end": "554928"
  },
  {
    "text": "Notice that if there were\na negative weight edge, we're going to come back\nto, then that assumption would be problematic.",
    "start": "554928",
    "end": "560760"
  },
  {
    "text": "So the takeaway here is that\nthis guy is frozen in stone. And now, notice that our\nqueue is actually empty, yeah?",
    "start": "560760",
    "end": "568980"
  },
  {
    "text": "So depending on how we set up\nour-- well, it's not empty. But it only contains one vertex. And it's at distance infinity.",
    "start": "568980",
    "end": "576889"
  },
  {
    "text": "Infinity plus 0\nis still infinity. So that's this\nguy's distance here.",
    "start": "576890",
    "end": "583760"
  },
  {
    "text": "And now our queue is empty. Sorry. OK, so I believe I\nmanaged to do that right.",
    "start": "583760",
    "end": "590150"
  },
  {
    "text": "Excellent. So the problem asked\nfor two things. It asked for the single-source\nshortest path distance. It also asked for\nthe traversal order,",
    "start": "590150",
    "end": "596863"
  },
  {
    "text": "which I forgot to do while\nI was doing this problem. But you could retrace\nit pretty easily. OK, so that's part\nA. Then in part B,",
    "start": "596863",
    "end": "604190"
  },
  {
    "text": "they say, change the\nweight of the edge from g to c to minus 6.",
    "start": "604190",
    "end": "610580"
  },
  {
    "text": "So we have g to c. And now, instead of 0, we're\ngoing to make it minus 6.",
    "start": "610580",
    "end": "616430"
  },
  {
    "text": "And the question is, if I\nran Dijkstra's algorithm, essentially, what would break?",
    "start": "616430",
    "end": "621503"
  },
  {
    "text": "And I think it's\npretty easy to eyeball. Remember that g was essentially\nthe less interesting vertex that we touched in\nour algorithm here.",
    "start": "621503",
    "end": "627500"
  },
  {
    "text": "The only one that\nwe looked at was f. And so this outgoing\nedge from g actually wouldn't even be seen\nby Dijkstra's algorithm,",
    "start": "627500",
    "end": "633940"
  },
  {
    "text": "thankfully, until we've touched\nall these other vertices in an identical fashion\nto our previous traversal.",
    "start": "633940",
    "end": "640300"
  },
  {
    "text": "And then we finally get to g. And now what's going to happen? Well, if I had this edge\nof length negative 6,",
    "start": "640300",
    "end": "646330"
  },
  {
    "text": "what's 12 minus 6? That's 6. And notice that\nthat's less than 7,",
    "start": "646330",
    "end": "653800"
  },
  {
    "text": "which is the label of vertex c. But that breaks our\nassumption, which is that as soon as\nI visit a vertex,",
    "start": "653800",
    "end": "659657"
  },
  {
    "text": "I never have to touch\nit again, right? Because now I've identified\na path through g, back to c, that has a similar\ndistance than the path",
    "start": "659657",
    "end": "667040"
  },
  {
    "text": "that c had when it was\nvisited in the queue. So somehow, spiritually, I\nshould add c back to the queue.",
    "start": "667040",
    "end": "672670"
  },
  {
    "text": "But that's against the rules\nin Dijkstra's algorithm. So for instance, if I did that,\nI would have to convince myself",
    "start": "672670",
    "end": "678250"
  },
  {
    "text": "that the runtime doesn't\nexplode and that this algorithm terminates, which\ncould be a problem if you have a\nnegative weight cycle.",
    "start": "678250",
    "end": "684750"
  },
  {
    "text": "Thankfully, we have algorithms\nfor detecting negative weight cycles. But that's a different matter. OK, so I think this is\npretty straightforward.",
    "start": "684750",
    "end": "691520"
  },
  {
    "text": "It's just essentially\nasking you to walk through Dijkstra's algorithm\nand make sure you understand what's going on.",
    "start": "691520",
    "end": "697270"
  },
  {
    "text": "Any questions about that one? Cool. I think this is one of the\neasier problem sessions.",
    "start": "697270",
    "end": "702459"
  },
  {
    "text": "So maybe we'll finish\nearly, except I always say that, and then I talk too much. Sorry.",
    "start": "702460",
    "end": "708440"
  },
  {
    "text": "Not sorry. OK. So, right. So in problem 7-2, this is\nan extension of a problem",
    "start": "708440",
    "end": "716240"
  },
  {
    "text": "that we considered, I believe,\ntwo problem sessions ago. And it looks\nsomething like this.",
    "start": "716240",
    "end": "721380"
  },
  {
    "text": "I'm going to go\nback into my notes. So remember, in two\nproblem sessions ago, we defined the\nradius of the graph",
    "start": "721380",
    "end": "726769"
  },
  {
    "text": "for an unweighted graph. We came up with an algorithm for\ncomputing it and approximating it, all that good stuff.",
    "start": "726770",
    "end": "732300"
  },
  {
    "text": "Now, in this\nproblem, we're going to do basically the same thing. But now we're on a\nweighted graph, yeah?",
    "start": "732300",
    "end": "738390"
  },
  {
    "text": "So in particular, we're\ngoing to define a quantity-- this is problem 2-- called weighted\neccentricity, which",
    "start": "738390",
    "end": "752709"
  },
  {
    "text": "is associated to a vertex\nin a weighted graph. And it looks like this. So the weighted eccentricity\nassociated to vertex u",
    "start": "752710",
    "end": "761320"
  },
  {
    "text": "is equal to the max\nover all vertices in my graph of the shortest path\ndistance from u to that vertex.",
    "start": "761320",
    "end": "772103"
  },
  {
    "text": "Again, hopefully\nour audience will catch if I accidentally swap\nthe argument to shortest path. I'm used to thinking\nof that as symmetric,",
    "start": "772103",
    "end": "777840"
  },
  {
    "text": "but it's not, because\nour graph's directed. Actually, in this\nproblem, I don't think",
    "start": "777840",
    "end": "782850"
  },
  {
    "text": "the graph is directed, so-- I forget. It's directed. OK, good.",
    "start": "782850",
    "end": "788010"
  },
  {
    "text": "Yeah, then good. I'll try to be accurate. [LAUGHS] OK, and\njust like the problem",
    "start": "788010",
    "end": "793529"
  },
  {
    "text": "we had two problem sessions\nago, so the eccentricity that's associated with a vertex\nis sort of like the distance",
    "start": "793530",
    "end": "799610"
  },
  {
    "text": "to the farthest-away\nthing in my graph. And now the radius\nof my graph tries to find the most\ncentral vertex, which",
    "start": "799610",
    "end": "806519"
  },
  {
    "text": "is the minimizer of\nweighted eccentricity. And we call that\nthe weighted radius. ",
    "start": "806520",
    "end": "815350"
  },
  {
    "text": "And so the rated-- agh. Oof, that's a tough one. The weighted radius\nis a measurement,",
    "start": "815350",
    "end": "823980"
  },
  {
    "text": "which is associated\nnot with a vertex, but rather with the graph. And it's equal to the min\nover all possible vertices, u,",
    "start": "823980",
    "end": "833060"
  },
  {
    "text": "of the weighted\neccentricity of u.",
    "start": "833060",
    "end": "838440"
  },
  {
    "text": "OK, and so the problem\nhere is that we're given a weighted directed graph\nwith no negative weight cycle.",
    "start": "838440",
    "end": "843570"
  },
  {
    "text": "So it may have negative weights. But they can't have\na negative cycle. And the question--\noh, I touched my face.",
    "start": "843570",
    "end": "849210"
  },
  {
    "text": "The question is, what is the-- can I find the\nradius of my graph",
    "start": "849210",
    "end": "857950"
  },
  {
    "text": "in time that looks\nlike order mod v cubed?",
    "start": "857950",
    "end": "866880"
  },
  {
    "text": "Now, if you recall from our\nprevious problem session, when we considered computing\nthe radius of a graph, what did",
    "start": "866880",
    "end": "872900"
  },
  {
    "text": "we do? Well, we tried to come up\nwith a clever algorithm. And then we realized\nthat that was actually",
    "start": "872900",
    "end": "878370"
  },
  {
    "text": "kind of unnecessary. It turned out that the\nkind of braindead thing, where you just look\nat the definitions",
    "start": "878370",
    "end": "884550"
  },
  {
    "text": "and just make it work,\nwas actually good enough. And that actually turns out\nto be the case here, right?",
    "start": "884550",
    "end": "889770"
  },
  {
    "text": "This is a good reminder for us\nall that before we go crazy-- 6.006 is a fun algorithms class.",
    "start": "889770",
    "end": "895980"
  },
  {
    "text": "We get to learn\nabout cute references to TV shows and all that. Before we go crazy\nwith that, of course,",
    "start": "895980",
    "end": "901870"
  },
  {
    "text": "if there's an obvious algorithm\nstaring us in the phase to solve a given\nalgorithms problem, we should try that first before\nwe try something more clever.",
    "start": "901870",
    "end": "910650"
  },
  {
    "text": "And indeed, in this\ncase, that works. So what are the sort\nof ingredients that we",
    "start": "910650",
    "end": "916450"
  },
  {
    "text": "need to compute the radius? Well, the radius is the\nminimum eccentricity. So what would be the smartest--\nor the simplest thing to do,",
    "start": "916450",
    "end": "923110"
  },
  {
    "text": "rather, would be compute the\neccentricity for every vertex and take the smallest.",
    "start": "923110",
    "end": "928120"
  },
  {
    "text": "How do I compute the\neccentricity for every vertex? Well, I have to have the max\ndistance away from that vertex.",
    "start": "928120",
    "end": "933898"
  },
  {
    "text": "So what would be a\nsimple thing to do would be to compute\ndistances between all the possible vertices. And conveniently, in lecture,\nin some day or another--",
    "start": "933898",
    "end": "942529"
  },
  {
    "text": "I'm a little confused about the\ntime ordering of this class, because of the way\nwe're filming it-- we uncovered an algorithm\nthat computes the distance",
    "start": "942530",
    "end": "949660"
  },
  {
    "text": "between every pair of vertices. And that's called\nJohnson's algorithm. So if we were to do a totally\nbraindead version of solving",
    "start": "949660",
    "end": "960030"
  },
  {
    "text": "this problem, maybe for\nconvenience, the first thing we'd do is compute delta u, v\nfor every possible u, v pair.",
    "start": "960030",
    "end": "966810"
  },
  {
    "text": "And because our graph doesn't\nhave a negative weight cycle, we can do that with\nJohnson's algorithm. So step one is to use Johnson's\nalgorithm for all pairs,",
    "start": "966810",
    "end": "981250"
  },
  {
    "text": "shortest path. And I'll refer you guys to\nlecture for how to do that.",
    "start": "981250",
    "end": "986870"
  },
  {
    "text": "But the important\nthing is the runtime of this step of our algorithm. So Johnson's algorithm,\ngenerically speaking,",
    "start": "986870",
    "end": "993779"
  },
  {
    "text": "has ve plus v squared log v--",
    "start": "993780",
    "end": "1002480"
  },
  {
    "text": "hopefully I got that right-- runtime. And what do we know\nabout our problem?",
    "start": "1002480",
    "end": "1008160"
  },
  {
    "text": "Well, I believe we're given\nthat the graph is connected. And so one thing that\nwe can do is notice",
    "start": "1008160",
    "end": "1014250"
  },
  {
    "text": "that e is upper\nbounded by v squared-- I guess even if\nit's not connected. I'm sorry. That was a dumb thing to say. Just generically speaking,\nour graph is simple.",
    "start": "1014250",
    "end": "1021810"
  },
  {
    "text": "So we know that e, at most,\nis, I guess, 2v squared, which means that this term\nis upper bounded by v cubed,",
    "start": "1021810",
    "end": "1028439"
  },
  {
    "text": "right? So we have v cubed\nplus order v squared log v. And so at the end of\nthe day, the first term wins.",
    "start": "1028440",
    "end": "1035220"
  },
  {
    "text": "And we have that\nthis is v cubed time. Notice that we're given\nthat budget in the statement",
    "start": "1035220",
    "end": "1041250"
  },
  {
    "text": "of our problem. So this is perfectly fine. In other words, this is a\nlong-winded way of saying, it's kosher to compute\nall pairs shortest",
    "start": "1041250",
    "end": "1046918"
  },
  {
    "text": "paths in the constraints\nof our problem here. So that's convenient,\nbecause now, in step two,",
    "start": "1046918",
    "end": "1054690"
  },
  {
    "text": "well, maybe now we just keep-- we do the Toucan\nSam approach again.",
    "start": "1054690",
    "end": "1060150"
  },
  {
    "text": "We follow our noses. And well, now that we have\nour pairwise distances, we can now compute the\neccentricity for every vertex,",
    "start": "1060150",
    "end": "1072760"
  },
  {
    "text": "for all u, just directly. Of course, in your homework,\nyou should write out what that means.",
    "start": "1072760",
    "end": "1078990"
  },
  {
    "text": "But here, directly just\nmeans that for every u, I loop over every v, and I\ntake whatever value is biggest.",
    "start": "1078990",
    "end": "1086030"
  },
  {
    "text": "So notice that I have two\nloops, 1 over u, 1 over v. So this is order\nmod v squared time.",
    "start": "1086030",
    "end": "1094620"
  },
  {
    "text": "So already, the first\nterm is dominating here. So that's a good thing, I guess. And then finally, we\nhave to take the smallest",
    "start": "1094620",
    "end": "1106856"
  },
  {
    "text": "eccentricity of\nany u, which, this",
    "start": "1106857",
    "end": "1112080"
  },
  {
    "text": "requires one more for loop. So this time, I for\nloop over this array. And I just take the\nsmallest value, right?",
    "start": "1112080",
    "end": "1117809"
  },
  {
    "text": "So this is just one for loop. So that takes order v time. And then we're done, right?",
    "start": "1117810",
    "end": "1123820"
  },
  {
    "text": "So that's our technique\nfor computing the radius. And notice that all I did\nwas translate the definition",
    "start": "1123820",
    "end": "1129070"
  },
  {
    "text": "into an algorithm. I didn't do anything smart\nin this problem at all. And then we should really\nquickly double check",
    "start": "1129070",
    "end": "1135420"
  },
  {
    "text": "our runtime. So step one takes v cubed time. Step two takes v squared times. Step three takes v time.",
    "start": "1135420",
    "end": "1141115"
  },
  {
    "text": "So I add them all together. And of course, the v cubed wins. And that is what was given\nin our problem as our budget.",
    "start": "1141115",
    "end": "1149340"
  },
  {
    "text": "OK, so I think the first\ntwo problems in this problem session are fairly\nstraightforward. Are there any questions so far?",
    "start": "1149340",
    "end": "1155700"
  },
  {
    "text": "I'm talking fast. Cool. All right, so now we're going\nto move on to problem 3,",
    "start": "1155700",
    "end": "1162750"
  },
  {
    "text": "involving Atniss Keverdeen,\nwho is probably playing the--",
    "start": "1162750",
    "end": "1169950"
  },
  {
    "text": "what, the Gunger Hames? Unger Games. I was close.",
    "start": "1169950",
    "end": "1176010"
  },
  {
    "text": "Sorry, Under-- ah, whatever. You get the point. Yeah, so before I\nget carried away",
    "start": "1176010",
    "end": "1184440"
  },
  {
    "text": "trying to read\nJason's jokes here, what's going on in this problem? So this is problem 3.",
    "start": "1184440",
    "end": "1192030"
  },
  {
    "text": "There's an underground\nsewer network. I suppose he also could have\nwritten this problem about MIT, right? There's all kinds of crazy\nunderground tunnels here.",
    "start": "1192030",
    "end": "1198830"
  },
  {
    "text": "I remember when I was looking\nat MIT as a potential undergrad, they had us like schlepping\naround the tunnels.",
    "start": "1198830",
    "end": "1205032"
  },
  {
    "text": "I thought they were very dirty,\nand I didn't get the point. So I went to Stanford. But in any event, right.",
    "start": "1205032",
    "end": "1210990"
  },
  {
    "text": "So what I'm given is a map.  And this thing has n\nbidirectional pipes.",
    "start": "1210990",
    "end": "1219650"
  },
  {
    "text": " I'm not going to write it\ndown, but the problem tells you",
    "start": "1219650",
    "end": "1226900"
  },
  {
    "text": "that they're all connected. They make-- like, you\ncan get from your source to your target moving\nthrough the pipes.",
    "start": "1226900",
    "end": "1233980"
  },
  {
    "text": "And right, and they're\nconnected at junctions.",
    "start": "1233980",
    "end": "1239320"
  },
  {
    "start": "1239320",
    "end": "1247110"
  },
  {
    "text": "But at every junction,\nthere is less than or equal to four things\nthat come together.",
    "start": "1247110",
    "end": "1252310"
  },
  {
    "text": "So just like in our\nlast session, every time you see a phrase like\nthat, it's like screaming there's a degree bound\nhiding inside of your graph.",
    "start": "1252310",
    "end": "1259710"
  },
  {
    "text": "And moreover, every junction\nis reachable from every other junction, I believe. OK.",
    "start": "1259710",
    "end": "1265440"
  },
  {
    "text": "In addition to this, we're\ngiven a positive integer length for each pipe.",
    "start": "1265440",
    "end": "1277570"
  },
  {
    "text": " So it's starting to smell\nlike a shortest path problem. But is it?",
    "start": "1277570",
    "end": "1283740"
  },
  {
    "text": "That's our question. But just to make things\na little bit worse,",
    "start": "1283740",
    "end": "1288770"
  },
  {
    "text": "Atniss Keverdeen here is trying\nto escape through the pipes. And she doesn't\nwant to be detected.",
    "start": "1288770",
    "end": "1296080"
  },
  {
    "text": "And in particular, there exist\njunctions with motion sensors.",
    "start": "1296080",
    "end": "1303200"
  },
  {
    "text": " And apparently, Atniss's\nintel is pretty good here.",
    "start": "1303200",
    "end": "1310070"
  },
  {
    "text": "And she knows which of the\njunctions in her pipe network actually have motion\nsensors that can",
    "start": "1310070",
    "end": "1320330"
  },
  {
    "text": "detect people moving around. OK. Now, what this problem is\nasking her to do is to say,",
    "start": "1320330",
    "end": "1326973"
  },
  {
    "text": "maybe-- apparently she knows\nwhere the motion sensors are. But maybe she doesn't\nknow if they're like-- what kind of brand they are.",
    "start": "1326973",
    "end": "1332870"
  },
  {
    "text": "Is it a Microsoft sensor, or\nan Apple sensor, or something? And of course, the sensors\nhave different ranges.",
    "start": "1332870",
    "end": "1339020"
  },
  {
    "text": "So Atniss Keverdeen\nhere, she wants to be as conservative\nas possible when she traverses\nthis pipe network.",
    "start": "1339020",
    "end": "1345830"
  },
  {
    "text": "In particular, what\nwe're looking for, what she wants is in\nn log n time here,",
    "start": "1345830",
    "end": "1358200"
  },
  {
    "text": "find the path that maximizes\nthe distance to the sensors.",
    "start": "1358200",
    "end": "1365760"
  },
  {
    "start": "1365760",
    "end": "1373177"
  },
  {
    "text": "So hopefully this\nproblem makes sense. So you've got some grid graph. Well, not necessarily\na grid graph,",
    "start": "1373177",
    "end": "1378920"
  },
  {
    "text": "but a bunch of vertices\nof valence 4, maybe something like that. It makes sense.",
    "start": "1378920",
    "end": "1384559"
  },
  {
    "text": "She's living in\na city somewhere. And she has some source\nthat she's starting at, some destination\nshe wants to go.",
    "start": "1384560",
    "end": "1390650"
  },
  {
    "text": "And then a few of\nthese vertices are marked as having\nmotion sensors at them.",
    "start": "1390650",
    "end": "1396919"
  },
  {
    "text": "And rather than giving\nyou a radius or something like that, instead,\nwhat we're saying",
    "start": "1396920",
    "end": "1402080"
  },
  {
    "text": "is that she wants to go from\nthe source to the target. She's willing to\nwalk a long distance. The length of the\npath doesn't matter.",
    "start": "1402080",
    "end": "1408510"
  },
  {
    "text": "What matters is that she\nnever wants to get closer to any motion sensor-- maybe there's a\nsecond one like here--",
    "start": "1408510",
    "end": "1415630"
  },
  {
    "text": "than she has to, OK? So in this case, I guess\nif I were to eyeball it,",
    "start": "1415630",
    "end": "1420648"
  },
  {
    "text": "it looks like you can't do\nbetter than one edge, right? So she would go like that.",
    "start": "1420648",
    "end": "1426370"
  },
  {
    "text": "And of course, in\nan extreme scenario, it might be the\ncase that there's a sensor in every junction,\nin which case she's hosed.",
    "start": "1426370",
    "end": "1433899"
  },
  {
    "text": "But we'd like to let\nher know that before she embarks upon her journey here.",
    "start": "1433900",
    "end": "1439120"
  },
  {
    "text": "OK, so does our problem\nmake enough sense? Excellent. OK.",
    "start": "1439120",
    "end": "1445550"
  },
  {
    "text": "So, right. So unfortunately for\nus, this isn't-- again,",
    "start": "1445550",
    "end": "1450965"
  },
  {
    "text": "it doesn't look like a\nshortest path problem. And the reason is\nbecause it's not.",
    "start": "1450965",
    "end": "1456529"
  },
  {
    "text": "But rather, it's sort\nof a readability problem in disguise. And let's think about\nwhat I mean here.",
    "start": "1456530",
    "end": "1463480"
  },
  {
    "text": "So, right. So there's an\nobvious graph here-- we'll call it G out of\na lack of creativity--",
    "start": "1463480",
    "end": "1471460"
  },
  {
    "text": " where what I'm going to do is\ngive a vertex per junction.",
    "start": "1471460",
    "end": "1483080"
  },
  {
    "text": "And I'll have an undirected\nedge for each pipe",
    "start": "1483080",
    "end": "1492524"
  },
  {
    "text": "whose weight is the length. ",
    "start": "1492525",
    "end": "1500400"
  },
  {
    "text": "OK. By the way, I think the length-- I didn't even mention it\nin the problem description. But I believe she wants\nto find the shortest",
    "start": "1500400",
    "end": "1507580"
  },
  {
    "text": "path that maximizes the radius. So like, if there are multiple\ndifferent paths that she could take that both have the same\nradius from the sensors,",
    "start": "1507580",
    "end": "1514470"
  },
  {
    "text": "then she'd like to be\nlazy and not walk too far. So that's where this is\ngoing to come into play. But that's sort of\na secondary concern,",
    "start": "1514470",
    "end": "1521170"
  },
  {
    "text": "I would imagine, on\nAtniss's behalf here. OK. And moreover, I'm not\ngoing to even attempt",
    "start": "1521170",
    "end": "1528430"
  },
  {
    "text": "to remember the details\nof this problem. But rather, there's\na source, which I'm sure has some cute Hunger\nGames name attached to it,",
    "start": "1528430",
    "end": "1537490"
  },
  {
    "text": "and some other target.  And these are just two nodes\nin the network of pipes.",
    "start": "1537490",
    "end": "1544539"
  },
  {
    "text": "And she wants a\npath from s to t. OK. So first of all, let's\njust count and make sure",
    "start": "1544540",
    "end": "1551140"
  },
  {
    "text": "that we know. So how many vertices are there? Well, the problem actually\ngives a name to that.",
    "start": "1551140",
    "end": "1556510"
  },
  {
    "text": "There's order n vertices,\nbecause that's just the number of junctions, which\nis what we define to be n.",
    "start": "1556510",
    "end": "1563559"
  },
  {
    "text": "I guess I forgot to\nwrite that there. And because we have a degree\nbound, our favorite argument",
    "start": "1563560",
    "end": "1569200"
  },
  {
    "text": "in this class, we know that\nthere's order n edges as well.",
    "start": "1569200",
    "end": "1576297"
  },
  {
    "text": "So that's good news.  Why can't I use\nthis graph directly?",
    "start": "1576297",
    "end": "1581309"
  },
  {
    "text": "Like, let's say that I computed\nthe shortest path from s to t. Notice that that completely\nignores the point",
    "start": "1581310",
    "end": "1587190"
  },
  {
    "text": "of the problem, right? The point of the\nproblem is that Atniss wants to avoid these starred\nvertices on our graph up here.",
    "start": "1587190",
    "end": "1593820"
  },
  {
    "text": "But the shortest\npath may not do that. In other words, you\nmay have to walk like a really\nindirect path to avoid",
    "start": "1593820",
    "end": "1599549"
  },
  {
    "text": "being detected by the sensors. That's a problem. So we need to be a little\nmore clever than that.",
    "start": "1599550",
    "end": "1605510"
  },
  {
    "text": "We do have to think\non this problem a bit, but not too much. And so here's the basic trick.",
    "start": "1605510",
    "end": "1611340"
  },
  {
    "text": "Like, let's say\nthat-- let's have a slightly different\nproblem first, which is, let's say that I give you\na radius k, and I want to know,",
    "start": "1611340",
    "end": "1618690"
  },
  {
    "text": "does there exist a\npath that can get me from s to t without coming\nmore than distance k away",
    "start": "1618690",
    "end": "1625950"
  },
  {
    "text": "from the sensors? Notice that once I--\nif I have a tool that can answer that like\nyes or no problem,",
    "start": "1625950",
    "end": "1631419"
  },
  {
    "text": "I could come up with\nan algorithm that finds my number of sensors by\nlooping over k or something. it may not be fast enough.",
    "start": "1631420",
    "end": "1637210"
  },
  {
    "text": "But I could do that. OK, so that problem is actually\nnot terribly difficult,",
    "start": "1637210",
    "end": "1642720"
  },
  {
    "text": "because essentially, what\nI could do conceptually is just remove the vertices that\nare too close to the sensors",
    "start": "1642720",
    "end": "1648900"
  },
  {
    "text": "and then solve a\nreachability problem. Like, can I get from s to t\nwithout getting distance k away",
    "start": "1648900",
    "end": "1654420"
  },
  {
    "text": "from any one of the sensors? Well, what do I do? I just remove any\nvertex that's distance k away from the sensors.",
    "start": "1654420",
    "end": "1659730"
  },
  {
    "text": "And then I compute reachability. So conceptually, I think\nthis isn't a huge leap, intuitively speaking.",
    "start": "1659730",
    "end": "1666360"
  },
  {
    "text": "But there's a lot of\ndetails to fill in, yeah? So unraveling just\na little bit more,",
    "start": "1666360",
    "end": "1672360"
  },
  {
    "text": "we might define a graph Gk. And Gk is going to be\nthe subgraph of vertices",
    "start": "1672360",
    "end": "1682660"
  },
  {
    "text": "whose distance-- ",
    "start": "1682660",
    "end": "1689020"
  },
  {
    "text": "distance bigger than k\nto any sensor, right?",
    "start": "1689020",
    "end": "1696790"
  },
  {
    "text": "And somehow, reachability\nin this thing can answer, yes or\nno, can I get from s to t without coming\ndistance k to a sensor?",
    "start": "1696790",
    "end": "1705390"
  },
  {
    "text": "By the way, do we know this\nterm, subgraph, in this class? Essentially, it's pretty clear\nwhat it is just from the word,",
    "start": "1705390",
    "end": "1710610"
  },
  {
    "text": "right? Like, essentially,\nI'm just going to remove vertices inside of\nour larger graph and any edges",
    "start": "1710610",
    "end": "1716870"
  },
  {
    "text": "that touch those vertices. And obviously, if my original\ngraph had order n size, then the subgraph\nhas big O of n size.",
    "start": "1716870",
    "end": "1724320"
  },
  {
    "text": "You might have less. But certainly, it's\nan upper bound. OK, so we unravel\na little bit more.",
    "start": "1724320",
    "end": "1729750"
  },
  {
    "text": "And somehow, this seems\nlike a convenient structure. But I haven't told\nyou how to compute it.",
    "start": "1729750",
    "end": "1735630"
  },
  {
    "text": "And in particular, the\nsort of annoying thing is this piece, right? I need to be able\nto figure out if I'm",
    "start": "1735630",
    "end": "1742140"
  },
  {
    "text": "distance k from any sensor. Or more generically\nspeaking, it might be kind of handy to compute\ndistance from every--",
    "start": "1742140",
    "end": "1749789"
  },
  {
    "text": "from the set of sensors\nto every other vertex in my graph, every other\njunction in my pipe network,",
    "start": "1749790",
    "end": "1755400"
  },
  {
    "text": "OK? Well, we already covered a\ntrick in our problem sessions",
    "start": "1755400",
    "end": "1760434"
  },
  {
    "text": "that's going to help\nus do that, right? Because, OK, what would\nbe a very simple algorithm for doing that? It would be to loop\nover every sensor,",
    "start": "1760435",
    "end": "1767660"
  },
  {
    "text": "call Dijkstra's\nalgorithm for each one. So that gives me the\ndistance to sensor number 1,",
    "start": "1767660",
    "end": "1772790"
  },
  {
    "text": "and the distance\nthe sensor number 2, distance to sensor number 3. And then I take the\nmin over all those. And that function gives me\nthe distance to any sensor.",
    "start": "1772790",
    "end": "1780043"
  },
  {
    "text": "That's going to\nbe problem, right? Because Dijkstra's algorithm\nruns in n log n time. But now I've incurred\nanother factor,",
    "start": "1780043",
    "end": "1785900"
  },
  {
    "text": "because I have to loop\nover all the sensors. And we didn't give you a\nbound on how many there are.",
    "start": "1785900",
    "end": "1791288"
  },
  {
    "text": "So more generically,\nthis is actually a problem that shows up all the\ntime in my everyday life, which is that we don't just\nwant compute shortest path",
    "start": "1791288",
    "end": "1797990"
  },
  {
    "text": "to a single point. Sometimes we want shortest\npath to a bunch of stuff. Like, in other\nwords, I don't care which sensor is close to me.",
    "start": "1797990",
    "end": "1804000"
  },
  {
    "text": "I don't want to get close\nto any sensor, yeah? This shows up in\ngeometry all the time.",
    "start": "1804000",
    "end": "1809270"
  },
  {
    "text": "Like, maybe I want\nto know the closest-- like, I want to find the\nclosest point on the highway. So the highway is\ndriving past my house.",
    "start": "1809270",
    "end": "1816400"
  },
  {
    "text": "So the highway is a whole bunch\nof points on some network. And I just want to get on the\nhighway and start driving.",
    "start": "1816400",
    "end": "1822620"
  },
  {
    "text": "I don't care about\nthe closest path to every single\npoint on the highway. I just want whatever is\nclosest to me, right?",
    "start": "1822620",
    "end": "1828559"
  },
  {
    "text": "So this is a pretty practical\nthing to think about. So how do we solve that? So let's say this\nis our pipe network.",
    "start": "1828560",
    "end": "1836470"
  },
  {
    "text": "I feel like I draw\nthis network a lot. Maybe I'll spice it\nup with an extra edge.",
    "start": "1836470",
    "end": "1843430"
  },
  {
    "text": "And maybe, for board\ndrawing purposes, these two vertices have sensors.",
    "start": "1843430",
    "end": "1850299"
  },
  {
    "text": "So I'm trying to find the\nshortest path distance to either one of\nthese two vertices",
    "start": "1850300",
    "end": "1857559"
  },
  {
    "text": "from every other vertex on\nthe graph, or vice versa. It doesn't matter. It's undirected.",
    "start": "1857560",
    "end": "1863420"
  },
  {
    "text": "And I don't want to loop\nover all these sensors. That's the basic headache here. So one thing that I can do--\nthis is kind of a sneaky trick.",
    "start": "1863420",
    "end": "1870090"
  },
  {
    "text": "And it's exactly the same trick\nthat we've applied a few times in the problem sessions here-- is to add a new vertex\nthat's kind of like a source",
    "start": "1870090",
    "end": "1879880"
  },
  {
    "text": "and make that vertex distance\n0 to every one of my sensors.",
    "start": "1879880",
    "end": "1887320"
  },
  {
    "text": "And now what I'm going to do is\ndo single source, shortest path from this new extra\nvertex that I added",
    "start": "1887320",
    "end": "1893830"
  },
  {
    "text": "to all the rest of my graph. Now, why do I do that? Well, if you think\nabout it, well, there's",
    "start": "1893830",
    "end": "1899810"
  },
  {
    "text": "an edge of length\n0 to any sensor. Topologically, I can think of\nit like I glued all the sensors",
    "start": "1899810",
    "end": "1905280"
  },
  {
    "text": "into one vertex if I wanted. But that doesn't really matter. I feel like that would\nbe a different way",
    "start": "1905280",
    "end": "1911900"
  },
  {
    "text": "to solve this problem, I guess,\nwould be to take all the sensor vertices, glue them\ntogether into one, and then solve this problem. But I digress.",
    "start": "1911900",
    "end": "1919980"
  },
  {
    "text": "Right, so the shortest path\ndistance from our new source vertex to all the\nother ones is going to be just the short\npath to any sensor,",
    "start": "1919980",
    "end": "1926389"
  },
  {
    "text": "because notice that any path\ncoming out of s necessarily has to pass through\na starred vertex.",
    "start": "1926390",
    "end": "1931850"
  },
  {
    "text": "OK, so let's write that down. Basically, what I'm trying\nto do here is, in step one",
    "start": "1931850",
    "end": "1938000"
  },
  {
    "text": "of my algorithm, I want to label\neach junction with its distance",
    "start": "1938000",
    "end": "1946450"
  },
  {
    "text": "to a sensor.  That's the high-level goal here.",
    "start": "1946450",
    "end": "1951960"
  },
  {
    "text": "And the way that I'm going to\ndo that is I'm going to make-- oops, in the problem\nsolution, they called it x.",
    "start": "1951960",
    "end": "1957419"
  },
  {
    "text": "So I'll be consistent. I'm going to make a new\nvertex, or a new graph, rather, G prime, which is\nequal to my original graph, G,",
    "start": "1957420",
    "end": "1965900"
  },
  {
    "text": "which is coming from\nthe pipe network, with one extra vertex,\nwhich we're going",
    "start": "1965900",
    "end": "1976000"
  },
  {
    "text": "to call x, which is connected\nto every motion sensor",
    "start": "1976000",
    "end": "1988000"
  },
  {
    "text": "with weight 0. ",
    "start": "1988000",
    "end": "1993399"
  },
  {
    "text": "And now I'm going to\ndo Dijkstra's starting at x, which takes n log n\ntime, because I just gave you",
    "start": "1993400",
    "end": "2008410"
  },
  {
    "text": "the size of our graph up\nhere, and gives me essentially the shortest distance to\nany motion sensor from all",
    "start": "2008410",
    "end": "2014770"
  },
  {
    "text": "the vertices in my graph. So that's a good thing. That's sort of like a\nconvenient piece of information.",
    "start": "2014770",
    "end": "2020100"
  },
  {
    "text": "When we're solving these\nkinds of algorithms problems, notice that I've done sort\nof a similar reasoning in both of the last two\nproblems, which you can do.",
    "start": "2020100",
    "end": "2028122"
  },
  {
    "text": "And actually, it's a\npretty practical way of thinking about algorithms,\nwhere, like, this problem tells me, at the end of the day, my\nalgorithm has to run in n log",
    "start": "2028122",
    "end": "2034960"
  },
  {
    "text": "n time, right? Or like, in the\nprevious problem, it had run in n cubed time-- I guess v cubed time.",
    "start": "2034960",
    "end": "2042393"
  },
  {
    "text": "So one thing I can\ndo is say, what is all the information\nthat I can gather out of my graph in n log n time? And I might as well\ncompute it, right?",
    "start": "2042393",
    "end": "2048940"
  },
  {
    "text": "So for instance, the distance\nto the closest sensor, I just gave you an n log n\nalgorithm for computing it.",
    "start": "2048940",
    "end": "2054280"
  },
  {
    "text": "That seems like a useful\npiece of information. So what the heck? I might as well\ncompute it in step one and just have it around.",
    "start": "2054280",
    "end": "2061836"
  },
  {
    "text": "Obviously, you could\ndo breadth-first search on all the computable numbers. And this might not be\nthe most efficient way",
    "start": "2061837",
    "end": "2066879"
  },
  {
    "text": "to solve a problem. But I think for graphs,\nthere's only so many things that we typically\nwant to compute. So it's worth kind of\ngoing down your checklist.",
    "start": "2066880",
    "end": "2073120"
  },
  {
    "text": "Like, similarly, here,\nnotice that we give you a budget of v cubed time. So like, you might as well\ncompute all pairs shortest",
    "start": "2073120",
    "end": "2080327"
  },
  {
    "text": "path, because we can\ndo it in v cubed time. And why not have that\ninformation around? It seems useful for\ncomputing radius.",
    "start": "2080328",
    "end": "2086199"
  },
  {
    "text": "OK, so in any event,\nnow, in step one, we now know how close every\njunction is to every sensor.",
    "start": "2086199",
    "end": "2094849"
  },
  {
    "text": "So now I can argue-- I'm numbering these like steps. But they're not really steps.",
    "start": "2094850",
    "end": "2100978"
  },
  {
    "text": "These are more just\nlike thought bubbles. So thought bubble number\ntwo is going to be,",
    "start": "2100978",
    "end": "2106940"
  },
  {
    "text": "how do I actually\nconstruct Gk, right? And notice, I have a nice\npiece of information here.",
    "start": "2106940",
    "end": "2113430"
  },
  {
    "text": "I now know what vertices\nare inside of Gk and which ones aren't, right? Because I can just loop\nover all the vertices.",
    "start": "2113430",
    "end": "2119430"
  },
  {
    "text": "If the distance is\nbigger than k, I keep it. And if it's not, I don't, yeah? So that gives me an\nalgorithm for computing Gk.",
    "start": "2119430",
    "end": "2127090"
  },
  {
    "text": "So we can construct-- \"construct\" with a C-- construct Gk from our\noriginal graph, G.",
    "start": "2127090",
    "end": "2138530"
  },
  {
    "text": "And that's really\neasy to do, just by looping over the\nvertices and remove",
    "start": "2138530",
    "end": "2150280"
  },
  {
    "text": "any whose distance is too big-- or too small, rather. ",
    "start": "2150280",
    "end": "2160839"
  },
  {
    "text": "v. Does that make sense? Because those are the\nones that are dangerous.",
    "start": "2160840",
    "end": "2166230"
  },
  {
    "text": "If the radius of my sensor is\nk, any vertex with distance less than or equal to\nk, I want to throw away.",
    "start": "2166230",
    "end": "2172475"
  },
  {
    "text": "And how much time\ndoes this take? Well, there's just a\nloop over the vertices. I guess I need to account for\nthe storage of my graph also.",
    "start": "2172475",
    "end": "2178170"
  },
  {
    "text": "But of course, this\ngraph takes less space than G. So overall, this\ntakes order n time--",
    "start": "2178170",
    "end": "2188400"
  },
  {
    "text": "Tim-- time and space. But there's a catch, which\nis this is per k, OK?",
    "start": "2188400",
    "end": "2197700"
  },
  {
    "text": "So every time I want\nto make a new Gk, I incur an expense of order n.",
    "start": "2197700",
    "end": "2205230"
  },
  {
    "text": "But this is already getting us\npretty close to our problem, because what can we do?",
    "start": "2205230",
    "end": "2211050"
  },
  {
    "text": "If I have Gk, I can\nsay that BFS on Gk",
    "start": "2211050",
    "end": "2219200"
  },
  {
    "text": "establishes reachability\nfrom s to t,",
    "start": "2219200",
    "end": "2231849"
  },
  {
    "text": "which is what we care\nabout, outside of radius k. ",
    "start": "2231850",
    "end": "2243119"
  },
  {
    "text": "And how much time does BFS take? Linear in the size of the graph. I only ever ask Jason\none question, which is--",
    "start": "2243120",
    "end": "2250440"
  },
  {
    "text": "always has the same answer. Right, so BFS takes time linear\nin the size of our graph. Our graph has size\nn, or kind of 2n-ish.",
    "start": "2250440",
    "end": "2259089"
  },
  {
    "text": "So at the end of the\nday, this takes order n. So if our problem were\nwritten slightly differently,",
    "start": "2259090",
    "end": "2264530"
  },
  {
    "text": "we would be done, right? If the problem said, given\na radius k and a graph,",
    "start": "2264530",
    "end": "2272330"
  },
  {
    "text": "tell me, yes or no,\ndoes there exist a path that stays outside\nof radius k of the sensors? This is how we would do that.",
    "start": "2272330",
    "end": "2278390"
  },
  {
    "text": "Hopefully we all agree. And we can do that\nin order n time. ",
    "start": "2278390",
    "end": "2284190"
  },
  {
    "text": "Oh, just kidding. Order n log n time, because I\nhad to do Dijkstra's algorithm first.",
    "start": "2284190",
    "end": "2289500"
  },
  {
    "text": "Thanks. OK. But sadly for us,\nwe're not quite done, because we want to find\nthe largest possible k.",
    "start": "2289500",
    "end": "2296903"
  },
  {
    "text": "We want to find\nthe biggest radius that we can stay\naway from the sensors and still get\nsuccessfully from s to t.",
    "start": "2296903",
    "end": "2304320"
  },
  {
    "text": "So let's say that I want\nto find this number. So this is-- I'm going to define k star--",
    "start": "2304320",
    "end": "2311625"
  },
  {
    "text": "I've got a moving target to\nwrite on-- is the largest k",
    "start": "2311625",
    "end": "2317910"
  },
  {
    "text": "where Gk is connected--",
    "start": "2317910",
    "end": "2323850"
  },
  {
    "text": "oh, that's not quite\nright-- from s to t. This is a weird\nway to phrase it.",
    "start": "2323851",
    "end": "2330140"
  },
  {
    "text": "Really, this should say, where\nthere exists a path from s to t in Gk. I'm sorry. ",
    "start": "2330140",
    "end": "2337099"
  },
  {
    "text": "Yeah, where Gk-- I've just phrased\nthis in a funny way-- ",
    "start": "2337100",
    "end": "2344430"
  },
  {
    "text": "has path from s to t. There we go.",
    "start": "2344430",
    "end": "2349510"
  },
  {
    "text": "[LAUGHS] All right. So our question is,\nhow do we find that? Well, here's a dumb algorithm.",
    "start": "2349510",
    "end": "2356410"
  },
  {
    "text": "I could loop over all k's,\nconstruct Gk, and then,",
    "start": "2356410",
    "end": "2362599"
  },
  {
    "text": "if my answer is,\nyes, it's reachable, then go to the next k, increment\nby 1, and start over, right?",
    "start": "2362600",
    "end": "2368750"
  },
  {
    "text": "So this is the dumb answer.  When I say dumb,\nI mean the answer",
    "start": "2368750",
    "end": "2374970"
  },
  {
    "text": "that your instructor\nwrote down on his notes and then realized it was\ndumb, which is loop over k",
    "start": "2374970",
    "end": "2384500"
  },
  {
    "text": "until you get to k star, I\nguess plus 1, because once I get there, then I\nget a thumbs down.",
    "start": "2384500",
    "end": "2390795"
  },
  {
    "text": "Obviously, getting\nany bigger than that is only going to make\nmy graph smaller. This is kind of filtration,\nbecause each graph is contained",
    "start": "2390795",
    "end": "2397190"
  },
  {
    "text": "inside of a different one. Actually, a filtration\nwould be the other way.",
    "start": "2397190",
    "end": "2403467"
  },
  {
    "text": "I'll think about it for\nlater, because this is not a topological data\nanalysis class. But in any event, if I did that,\nhow much time will it take?",
    "start": "2403467",
    "end": "2411520"
  },
  {
    "text": "Well, remember-- OK,\nso for one thing, I have n log n from\nDijkstra's algorithm. I don't get around that.",
    "start": "2411520",
    "end": "2418257"
  },
  {
    "text": "So I always have to\naccount for that.  But now, every time I try a\nnew k, I incur cost n, right?",
    "start": "2418258",
    "end": "2427890"
  },
  {
    "text": "That's what we argued up here. And so at the end of\nthe day, this algorithm takes order k star\nn time like that.",
    "start": "2427890",
    "end": "2436797"
  },
  {
    "text": "Of course, it's a little\nweird to have the answer to your problem in the runtime. But k star here, it could be--\nwe don't have any bound here.",
    "start": "2436798",
    "end": "2444370"
  },
  {
    "text": "It could be the number\nof vertices or anything like that, yeah? And so if we have a\nbudget of n log n time,",
    "start": "2444370",
    "end": "2450660"
  },
  {
    "text": "this doesn't quite work. And so the question is, can\nwe rescue this strategy here?",
    "start": "2450660",
    "end": "2457513"
  },
  {
    "text": "And the answer,\nof course, is yes, or else I wouldn't be\nstanding here today. One way that you might\ndo that-- so there's",
    "start": "2457513",
    "end": "2464160"
  },
  {
    "text": "the way that you would do that\nas a real algorithms person. And then there's the way you\ncould do it by psychologically diagnosing your instructors.",
    "start": "2464160",
    "end": "2469820"
  },
  {
    "text": "So let's talk about\nboth of those. Let's actually do\nthe second one first, because I think that's\nthe most practical if you",
    "start": "2469820",
    "end": "2475940"
  },
  {
    "text": "want to get your homework done\nquickly, which is as follows. This problem tells you that you\nhave an n log n budget of time",
    "start": "2475940",
    "end": "2484080"
  },
  {
    "text": "in order to run the algorithm. And so what does that mean? Well, when we loop over\npotential Gk's that we can try,",
    "start": "2484080",
    "end": "2492660"
  },
  {
    "text": "we have a budget of log n\ntries before we're done, yeah?",
    "start": "2492660",
    "end": "2498230"
  },
  {
    "text": "So we kind of know that any\nalgorithm that constructs a Gk and tries it can only\ndo it log n times.",
    "start": "2498230",
    "end": "2504132"
  },
  {
    "text": "And to my knowledge, we\nonly have one algorithm that runs in log n time in this\nclass, which is binary search.",
    "start": "2504132",
    "end": "2510320"
  },
  {
    "text": "And so we might be thinking\nvery critically about how we could use that tool. But more generally\nthan that, I think",
    "start": "2510320",
    "end": "2516270"
  },
  {
    "text": "this is actually a strategy\nthat shows up a lot, both in algorithms and\nactually in numerical analysis a lot, which is, you have\nsome like yes or no answer.",
    "start": "2516270",
    "end": "2524970"
  },
  {
    "text": "And you want to find the\npoint on the interface where yes flips to no. And so one way to do it is to\nsort of bound it on two ends",
    "start": "2524970",
    "end": "2533130"
  },
  {
    "text": "and then keep dividing in half. And as long as your\nrelationship is a bunch of yeses and then a bunch of\nnos, you can keep",
    "start": "2533130",
    "end": "2538950"
  },
  {
    "text": "doing that by binary search. So let's think\nabout it this way. So we have a long\ninterval of k values.",
    "start": "2538950",
    "end": "2546900"
  },
  {
    "text": "By the way, obviously,\nthere's an upper bound here, which is like the\nbiggest distance to any vertex in my graph,\nor something like that.",
    "start": "2546900",
    "end": "2553322"
  },
  {
    "text": "AUDIENCE: The sum\nof all distances? JUSTIN SOLOMON: Yeah, like the\nsum of all distances or some-- AUDIENCE: That would be a very\nlarge number compared to n.",
    "start": "2553322",
    "end": "2562042"
  },
  {
    "text": "JUSTIN SOLOMON: But\nyou can afford a lot. You could-- if you took\nthe sum of every edge-- here's a way to do it.",
    "start": "2562042",
    "end": "2567720"
  },
  {
    "text": "If you took this to be the sum\nof every possible edge length-- AUDIENCE: Wouldn't that be\nbounded in n polynomially?",
    "start": "2567720",
    "end": "2573910"
  },
  {
    "text": "JUSTIN SOLOMON:\nPolynomially bounded in n? AUDIENCE: Difference\nbetween u and n. ",
    "start": "2573910",
    "end": "2580210"
  },
  {
    "text": "[INAUDIBLE] very large\nnumbers in the near space.",
    "start": "2580210",
    "end": "2586480"
  },
  {
    "text": "JUSTIN SOLOMON: OK. I'm not sure if\nthat's quite right. But that's OK. In any event, let's\nsay that we have",
    "start": "2586480",
    "end": "2592040"
  },
  {
    "text": "an upper bound for k for now. Then what do we know? We know that here's\nthe k star that I want.",
    "start": "2592040",
    "end": "2598930"
  },
  {
    "text": "And to the left, my\nalgorithm will return yes. This algorithm up here,\nup here, it'll say no.",
    "start": "2598930",
    "end": "2604609"
  },
  {
    "text": "So one thing I can do-- one thing I should do\nis put k star not right at the center of my interval\nfor illustration purposes.",
    "start": "2604610",
    "end": "2613472"
  },
  {
    "text": "But now I can binary\nsearch, right? Because I could query here. And now I'm going to get a no. And maybe I subdivide at the\nmidpoint for some reason.",
    "start": "2613472",
    "end": "2621013"
  },
  {
    "text": "Now I get a yes. And I can kind of triangulate\nin on what I want. So that's our basic strategy\nis binary search here.",
    "start": "2621013",
    "end": "2628970"
  },
  {
    "text": "But we have to figure out\nhow to do that exactly. OK, so first of all--",
    "start": "2628970",
    "end": "2636210"
  },
  {
    "text": "OK, there is an obvious\nupper bound here, which is just the\nbiggest distance from any vertex to any sensor.",
    "start": "2636210",
    "end": "2642750"
  },
  {
    "text": "Right, so we could probably\ncome up with a conservative one. We didn't feel like it. But conveniently, in\nstep one, remember",
    "start": "2642750",
    "end": "2649110"
  },
  {
    "text": "that computing convenient\nnumbers is always a convenient thing to do. Clearly, if Katniss wants to--",
    "start": "2649110",
    "end": "2656550"
  },
  {
    "text": "sorry, Atniss wants to\ngo within a radius that's bigger than the distance\nof any vertex, any sensor,",
    "start": "2656550",
    "end": "2664620"
  },
  {
    "text": "she's in trouble, because that\ncovers the entire graph, yeah? So right.",
    "start": "2664620",
    "end": "2670890"
  },
  {
    "text": "So we actually do have\nan upper bound here, which is the biggest\ndistance to a sensor.",
    "start": "2670890",
    "end": "2679510"
  },
  {
    "text": " And now we want a binary search. But we have to be a little\nbit careful how to do it,",
    "start": "2679510",
    "end": "2685760"
  },
  {
    "text": "because we want to\nbe logarithmic in n, which is like the number\nof vertices in our graph. And of course, the way that\nI've drawn this interval here,",
    "start": "2685760",
    "end": "2693610"
  },
  {
    "text": "as Jason points out, I\ndon't, at least immediately, have a bound on this\nnumber in terms of n.",
    "start": "2693610",
    "end": "2698767"
  },
  {
    "text": "Like, it could be\nthat my edge weights are like really ginormous. OK, so right.",
    "start": "2698767",
    "end": "2706080"
  },
  {
    "text": "So how could we get around that? Well, essentially, what\nwe want to be doing is binary search in an array\nthat scales like the vertices.",
    "start": "2706080",
    "end": "2713220"
  },
  {
    "text": "And here's the solution\nthat I came up with, which I'm pretty sure is the\nsame as the one in the answer-- I should really check that\nbefore teaching this thing--",
    "start": "2713220",
    "end": "2721569"
  },
  {
    "text": "which is to do the\nfollowing, which is a. Remember, again, we have\na budget of n log n.",
    "start": "2721570",
    "end": "2730210"
  },
  {
    "text": "And so we can do a\nconstant number of things that take n log n time. We just might as well\nkeep doing it, yeah? And so another kind of\nconvenient thing we might do",
    "start": "2730210",
    "end": "2737830"
  },
  {
    "text": "is sort my vertices by\nthe distance to x, which,",
    "start": "2737830",
    "end": "2747037"
  },
  {
    "text": "of course, remember,\nis exactly the distance to their closest sensor. Why would you do that? Well, in some sense, as\nI move along that array,",
    "start": "2747037",
    "end": "2755260"
  },
  {
    "text": "that's the sort\nof order in which I'm going to remove\nvertices from my graph and make the radius get\nbigger and bigger and bigger.",
    "start": "2755260",
    "end": "2761570"
  },
  {
    "text": "Does that makes sense? Because these, the\nfirst couple ones are the ones right\nnext to the sensor. As I move along this array, they\nget farther and farther away.",
    "start": "2761570",
    "end": "2770230"
  },
  {
    "text": "OK, so we're going to say-- and\nof course, why can we do that? Because sorting-- I think\nthis is one that all computer",
    "start": "2770230",
    "end": "2776913"
  },
  {
    "text": "science students\neverywhere know-- takes n log n time using\nwhatever your favorite sorting--",
    "start": "2776913",
    "end": "2781990"
  },
  {
    "text": "well, that's not true-- whatever\nmy favorite sorting algorithm is. OK, and we're going to take\ndi to be the distance--",
    "start": "2781990",
    "end": "2790059"
  },
  {
    "text": "the i-th largest-- actually,\nI think in my notes, I got this one--\nthe i-th smallest.",
    "start": "2790060",
    "end": "2795590"
  },
  {
    "start": "2795590",
    "end": "2801210"
  },
  {
    "text": "I'm diverging from my notes. So there is a high\nlikelihood of a sign mistake that's about to happen.",
    "start": "2801210",
    "end": "2806790"
  },
  {
    "text": "And now what I'm\ngoing to do is I'm going to binary search on i.",
    "start": "2806790",
    "end": "2816310"
  },
  {
    "text": "In other words, I'm on the\nindex into my distance array. There's a reason to do that. Is there a reason-- like,\nlet's say that my distances",
    "start": "2816310",
    "end": "2823328"
  },
  {
    "text": "are like 1, 2, 5, 7. So these are the distance\nof some vertex to a sensor.",
    "start": "2823328",
    "end": "2829870"
  },
  {
    "text": "And let's say that I test 3. And I notice that\n3 is admissible. In other words, she\ncan get from one vertex",
    "start": "2829870",
    "end": "2836500"
  },
  {
    "text": "to another, never getting\nwithin a radius of 3. Should I try a radius of 4?",
    "start": "2836500",
    "end": "2842410"
  },
  {
    "text": "Well, no, because I'm going\nto remove vertices only when I pass an\nelement in this array.",
    "start": "2842410",
    "end": "2847850"
  },
  {
    "text": "So it makes sense to do binary\nsearch not in distant space, but rather in array index\nspace, because those are the sort of\njunctures that determine",
    "start": "2847850",
    "end": "2855460"
  },
  {
    "text": "when I'm going to remove stuff. So, right.",
    "start": "2855460",
    "end": "2861660"
  },
  {
    "text": "So remember, how\nbig is this array? It's got length n. So overall, this binary\nsearch takes log n time.",
    "start": "2861660",
    "end": "2870250"
  },
  {
    "text": "And that's good, because\nour whole algorithm now-- what do we do? We binary search on d.",
    "start": "2870250",
    "end": "2876029"
  },
  {
    "text": "Or rather, we\nbinary search on i. And then we take di and\nplug it into our algorithm",
    "start": "2876030",
    "end": "2881549"
  },
  {
    "text": "up there to construct\nour subgraph. We test yes or no. And that tells us the\nleft or the right interval",
    "start": "2881550",
    "end": "2886830"
  },
  {
    "text": "in our binary search. And we recurse. And so overall, this takes\nlog n time, or rather,",
    "start": "2886830",
    "end": "2895920"
  },
  {
    "text": "log n steps of binary search.",
    "start": "2895920",
    "end": "2904069"
  },
  {
    "text": "And of course, each one of these\nsteps, as I argued up there, takes order n time.",
    "start": "2904070",
    "end": "2910510"
  },
  {
    "text": "So overall, our algorithm\ntakes order n log--",
    "start": "2910510",
    "end": "2915870"
  },
  {
    "text": "oh no, I made an\naccidental theta-- n log n time. And that was the bound\nwe wanted to achieve.",
    "start": "2915870",
    "end": "2923760"
  },
  {
    "text": "As usual, there's\na lot of detritus that we need to clean up at\nthe end of our problem here. One of them is that we\nactually want to return a path.",
    "start": "2923760",
    "end": "2930642"
  },
  {
    "text": "But that's not so bad, right? So now we've\nessentially determined that we can compute k\nstar in n log n time.",
    "start": "2930642",
    "end": "2937680"
  },
  {
    "text": "Well, that's good. So now, if we actually\nwant the path, we can construct our graph one\nmore time, right at k star.",
    "start": "2937680",
    "end": "2943542"
  },
  {
    "text": "I suppose we already\nhave it around from the end of binary search. And then use whatever your\nfavorite reachability algorithm",
    "start": "2943542",
    "end": "2949380"
  },
  {
    "text": "is to go from s to\nt and give Katniss the path that she wants,\nor specifically Dijkstra's",
    "start": "2949380",
    "end": "2956160"
  },
  {
    "text": "algorithm if you want\nthe shortest path, which is courteous, because\nshe doesn't want to walk too far if she doesn't have to.",
    "start": "2956160",
    "end": "2964080"
  },
  {
    "text": "Moreover, let's see. There are a couple\nof boundary cases that are probably worth\nmentioning in your problem. So for instance, if\nk star equals 0--",
    "start": "2964080",
    "end": "2971407"
  },
  {
    "text": "in other words, I\ndo my binary search. I get all the way back to the\nfirst element of my array. And it's still\nsaying I can't do it.",
    "start": "2971407",
    "end": "2979187"
  },
  {
    "text": "What does that mean? That means that I cannot go\nfrom my source to my target node without passing through a\nvertex that has a sensor at it,",
    "start": "2979187",
    "end": "2988460"
  },
  {
    "text": "in which case, what do you do? Well, you can return any\npath, or you might as well return the shortest path\nso that she can run.",
    "start": "2988460",
    "end": "2994955"
  },
  {
    "text": "[LAUGHS] OK. And that, I believe,\nconcludes our problem.",
    "start": "2994955",
    "end": "3001700"
  },
  {
    "text": "Any questions about that one? Thumbs up, cool. How are we doing on time?",
    "start": "3001700",
    "end": "3006800"
  },
  {
    "text": "As usual, I think I'm\ngoing to end early. We're at precisely the same\ntime I'm always at at problem 4.",
    "start": "3006800",
    "end": "3012420"
  },
  {
    "text": "OK, so problem 4, we move\nfrom one fictional universe",
    "start": "3012420",
    "end": "3018329"
  },
  {
    "text": "to another here. So now we're playing like\nOkepon or something like that.",
    "start": "3018330",
    "end": "3024750"
  },
  {
    "start": "3024750",
    "end": "3031720"
  },
  {
    "text": "Sorry. If I didn't write so\nbig, I wouldn't have to waste half of class erasing. But that's OK. ",
    "start": "3031720",
    "end": "3039580"
  },
  {
    "text": "Right, so cool.",
    "start": "3039580",
    "end": "3046320"
  },
  {
    "text": "So now we have Ashley Gettem. And Ashley Gettem is trying\nto go from Twinkletown",
    "start": "3046320",
    "end": "3051420"
  },
  {
    "text": "to Bluebluff. And these are both two\nclearings in the Tanko region. I'm sure if I played Pokemon,\nthis would have meaning to me,",
    "start": "3051420",
    "end": "3059670"
  },
  {
    "text": "or whatever this is. But in any event, we\nhave a bunch of maps--",
    "start": "3059670",
    "end": "3064950"
  },
  {
    "text": "we have a map of a\nbunch of clearings. I'm not liking the\nerasing on this board. So maybe we'll start up here.",
    "start": "3064950",
    "end": "3071770"
  },
  {
    "text": " OK, so we have n clearings.",
    "start": "3071770",
    "end": "3078170"
  },
  {
    "text": " And they're connected\nby two-way trails.",
    "start": "3078170",
    "end": "3086855"
  },
  {
    "text": " And thankfully,\nthere's less than",
    "start": "3086855",
    "end": "3092160"
  },
  {
    "text": "or equal to 5 trails\nconnecting in every clearing. This is like our favorite\ndetail to add to 6.006 problems",
    "start": "3092160",
    "end": "3099030"
  },
  {
    "text": "is a degree bound, yeah? OK. Now, with every\ntrail, we associate",
    "start": "3099030",
    "end": "3108120"
  },
  {
    "text": "a length, which we're going\nto call l sub t for trail t.",
    "start": "3108120",
    "end": "3114930"
  },
  {
    "text": "But in addition to\nthat, we're going to have another\npiece of information, which is that it has this set\nof critters on it, c sub t.",
    "start": "3114930",
    "end": "3124780"
  },
  {
    "text": "So now every trail-- our character here is\nwalking along the path. And what does she want to do?",
    "start": "3124780",
    "end": "3131590"
  },
  {
    "text": "Any time that she\nwalks along a path, she collects a critter,\nor however many critters",
    "start": "3131590",
    "end": "3137800"
  },
  {
    "text": "are on that path. In fact, she feels\na very similar way to how I feel at TJ Maxx, right?",
    "start": "3137800",
    "end": "3142943"
  },
  {
    "text": "She's walking down\nthe aisles, and like, she can't help herself. She's got to catch every critter\nthat she goes past on the path.",
    "start": "3142943",
    "end": "3148450"
  },
  {
    "text": "There's no option here. She can't leave it behind,\nbecause if she does, then she'll be sad.",
    "start": "3148450",
    "end": "3153910"
  },
  {
    "text": "And the reason why our\ncharacter might not be able to pick up\none of the critters",
    "start": "3153910",
    "end": "3159070"
  },
  {
    "text": "would be if she ran\nout of her tools for picking up these\ncritters, which are apparently pocket spheres.",
    "start": "3159070",
    "end": "3164800"
  },
  {
    "text": "And she has k spheres. ",
    "start": "3164800",
    "end": "3170233"
  },
  {
    "text": "In other words, she\nhas like a backpack. And the backpack can hold that\nmany spheres at a time, OK?",
    "start": "3170233",
    "end": "3176010"
  },
  {
    "text": "There are a few details here. One is that every time\nshe walks down a path,",
    "start": "3176010",
    "end": "3181349"
  },
  {
    "text": "she collects all the critters. But then if she walks\ndown that path again, she'll collect the\nsame set of critters. Apparently they respawn.",
    "start": "3181350",
    "end": "3187089"
  },
  {
    "text": "They're very prolific,\nthese critters. And moreover, there are stores\nat some of the clearings.",
    "start": "3187090",
    "end": "3198490"
  },
  {
    "text": " And at these stores,\nshe can get rid",
    "start": "3198490",
    "end": "3205000"
  },
  {
    "text": "of the critters\nshe currently has, and drop them off, and pick\nup empty spheres instead.",
    "start": "3205000",
    "end": "3211522"
  },
  {
    "text": "So essentially,\nevery time she does that, she empties\nher backpack and gets a new set of material,\nwhere she can keep picking up the critters.",
    "start": "3211522",
    "end": "3218358"
  },
  {
    "text": "I have many questions\nabout this character. Like, does she just\nleave them there? Does she come back\nfor them later?",
    "start": "3218358",
    "end": "3223720"
  },
  {
    "text": "What does she do\nwith the critters? There's a lot of questions. Like, does she have a bigger\nbag she can go back around",
    "start": "3223720",
    "end": "3228922"
  },
  {
    "text": "to the stores and-- but in this fictional\nuniverse, we're not going to worry about\nthese problems, OK?",
    "start": "3228922",
    "end": "3235060"
  },
  {
    "text": "And so, right. So essentially,\nthe question here is that there are two locations.",
    "start": "3235060",
    "end": "3243910"
  },
  {
    "text": "I don't remember the name-- Trundletown to\nBluebluff that she's trying to travel in between.",
    "start": "3243910",
    "end": "3249520"
  },
  {
    "text": "And she gets sad if she\ncomes across a critter that she can't collect.",
    "start": "3249520",
    "end": "3255349"
  },
  {
    "text": "So the question is, can\nyou find the shortest path",
    "start": "3255350",
    "end": "3265110"
  },
  {
    "text": "without being sad?",
    "start": "3265110",
    "end": "3271100"
  },
  {
    "text": "And in like kind of a Dada\ntwist in this problem, if no such path exists--",
    "start": "3271100",
    "end": "3276747"
  },
  {
    "text": "in other words, it's like, so\nshe has to walk along some long trail with a bunch of critters--\nmore than k critters, I guess,",
    "start": "3276748",
    "end": "3282350"
  },
  {
    "text": "in the worst case-- then sadness is unavoidable,\nis what your code is apparently supposed to return, which\nis really defeatist.",
    "start": "3282350",
    "end": "3292860"
  },
  {
    "text": "I don't know who wrote\nthis problem set. OK. The question is, how\ndo we solve this?",
    "start": "3292860",
    "end": "3299690"
  },
  {
    "text": "It looks like a\nshortest path problem. But as with all\nproblems in 6.006, there's a slight twist, right?",
    "start": "3299690",
    "end": "3304830"
  },
  {
    "text": "And in this case, the twist\nis that it's the shortest path without becoming\nsad, where sadness",
    "start": "3304830",
    "end": "3310369"
  },
  {
    "text": "means that you ran out\nof spheres to collect your critters.",
    "start": "3310370",
    "end": "3316030"
  },
  {
    "text": "Whew. Now, notice that we're\ngiven a budget, by the way, of, I believe, nk log nk time.",
    "start": "3316030",
    "end": "3323477"
  },
  {
    "text": "Is that right?  Like that. OK.",
    "start": "3323477",
    "end": "3330579"
  },
  {
    "text": "Notice that this is\na little suspicious. Somehow it makes us think\nthat the size of our problem really is nk, rather\nthan just n or k.",
    "start": "3330580",
    "end": "3339280"
  },
  {
    "text": "OK, so how could we do this? Let's think back to a problem\nthat we solved yesterday,",
    "start": "3339280",
    "end": "3344890"
  },
  {
    "text": "under the assumption\nthat you guys are binge watching your 6.006\nproblem sessions here.",
    "start": "3344890",
    "end": "3350680"
  },
  {
    "text": "And remember, in the\nproblem yesterday, we had this dude that was\nwalking along paths. And like, every third path,\nhe had to drink a beer.",
    "start": "3350680",
    "end": "3360232"
  },
  {
    "text": "I've tried this on\nmy commute home, and it doesn't\nwork terribly well. But in any event, we have\nkind of a similar scenario",
    "start": "3360232",
    "end": "3366730"
  },
  {
    "text": "here, where there's some number\nthat we need to keep track of, right? In this case, it's\nthe number of critters",
    "start": "3366730",
    "end": "3372130"
  },
  {
    "text": "that our character has\nremaining that she can pick up. So she starts with an empty bag.",
    "start": "3372130",
    "end": "3378220"
  },
  {
    "text": "As she collects them, the\namount of capacity in her bag decreases until she\ngets to a store, and then it goes back again.",
    "start": "3378220",
    "end": "3384640"
  },
  {
    "text": "But the good news is that our\nruntime bound includes k in it. So it's actually OK to\nmake an algorithm that",
    "start": "3384640",
    "end": "3389830"
  },
  {
    "text": "scales in the number of critters\nthat she can carry around. That's kind of atypical, but\nan interesting choice here.",
    "start": "3389830",
    "end": "3397329"
  },
  {
    "text": "So remember, the term\nI introduced last time for this kind of\nuniverse is that it's kind of like a state machine.",
    "start": "3397330",
    "end": "3402520"
  },
  {
    "text": "Like, in addition to\nwalking along the graph, she needs to know how much\ncapacity she has for critters.",
    "start": "3402520",
    "end": "3409750"
  },
  {
    "text": "And so here's a way to do it. So I think, actually, this\nproblem isn't too bad, given that you saw\nthe problem where",
    "start": "3409750",
    "end": "3415930"
  },
  {
    "text": "you do every third vertex\nin our last problem session. Somehow it's just like a\nsame church, different pew",
    "start": "3415930",
    "end": "3421510"
  },
  {
    "text": "kind of scenario here. So in this case,\none thing we can do is we're going to make a graph.",
    "start": "3421510",
    "end": "3427780"
  },
  {
    "text": "We call him G. He's got vertices\nv and edges E, just for fun.",
    "start": "3427780",
    "end": "3433690"
  },
  {
    "text": "But what we're\ngoing to do is have k plus 1 vertices\nfor every clearing.",
    "start": "3433690",
    "end": "3444630"
  },
  {
    "text": "And the reason is that\nwhat we're going to do is we're going to\nwalk along the graph. And as we traverse\nour edges, we're",
    "start": "3444630",
    "end": "3450240"
  },
  {
    "text": "not only going to keep\ntrack of the costs, like the distance\nthat she's walking, but also the number of\ncritters that she has remaining",
    "start": "3450240",
    "end": "3457950"
  },
  {
    "text": "in her bag that she can score. And the way that\nwe can do that is by keeping a bunch of\ncopies of our graph",
    "start": "3457950",
    "end": "3463589"
  },
  {
    "text": "and ascending every time that\nwe collect a new critter. Does that makes sense?",
    "start": "3463590",
    "end": "3469740"
  },
  {
    "text": "OK so here's a-- let's just add\na little bit more detail here. So in particular, I\ncan define vc comma",
    "start": "3469740",
    "end": "3474900"
  },
  {
    "text": "i is going to be the vertex per\nclearing comma critter space.",
    "start": "3474900",
    "end": "3481319"
  },
  {
    "text": "And the way that\nI can view it is that this is sort\nof representing that I'm at clearing--",
    "start": "3481320",
    "end": "3487830"
  },
  {
    "text": " oops, that should be a c.",
    "start": "3487830",
    "end": "3493500"
  },
  {
    "text": "And I have i pocket\nspheres that are empty.",
    "start": "3493500",
    "end": "3504510"
  },
  {
    "text": " So initially, I'm going\nto start at v s comma 0",
    "start": "3504510",
    "end": "3512770"
  },
  {
    "text": "and go from there, OK? OK. I guess it depends\nwhether you're",
    "start": "3512770",
    "end": "3518940"
  },
  {
    "text": "decreasing it or increasing it. AUDIENCE: You have empty\npocket spheres [INAUDIBLE]?? JUSTIN SOLOMON:\nOh, you're right. Yeah, I'm sorry.",
    "start": "3518940",
    "end": "3524580"
  },
  {
    "text": "So in that case, I\nguess it would be k. We'll see if I manage\nto do that consistently throughout my answer here.",
    "start": "3524580",
    "end": "3530120"
  },
  {
    "text": "OK, so now I need\nto tell you how to make the edges in our graph. And so let's do that next.",
    "start": "3530120",
    "end": "3535390"
  },
  {
    "text": "So in particular, for\nall trails from a--",
    "start": "3535390",
    "end": "3542609"
  },
  {
    "text": "between a and b, with\nlength l and critters c--",
    "start": "3542610",
    "end": "3553700"
  },
  {
    "text": " so she picks up c critters.",
    "start": "3553700",
    "end": "3559360"
  },
  {
    "text": "She traverses distance l. She gets from a to\nb or vice versa.",
    "start": "3559360",
    "end": "3564550"
  },
  {
    "text": "And our trails are\nbidirectional here. We need to define edges. ",
    "start": "3564550",
    "end": "3575069"
  },
  {
    "text": "And they look like this. So we sort of have\ntwo different cases. One is where you have a store.",
    "start": "3575070",
    "end": "3580859"
  },
  {
    "text": "And one is when you\ndon't, because that's going to affect how\nyour state changes. So, right.",
    "start": "3580860",
    "end": "3589090"
  },
  {
    "text": "So the first one would be-- oh, did I get this\nwhole thing backward?",
    "start": "3589090",
    "end": "3594160"
  },
  {
    "text": "Oh, don't tell me that. No, I didn't. OK, good. Great.",
    "start": "3594160",
    "end": "3600030"
  },
  {
    "text": "So first case would be\na does not have a store. ",
    "start": "3600030",
    "end": "3612660"
  },
  {
    "text": "So in this case, she\nleaves with the same number of critters she had\nin her bag, minus",
    "start": "3612660",
    "end": "3618119"
  },
  {
    "text": "whatever critters she\npicks up along the way. So now I'm going to have\nan edge of length l.",
    "start": "3618120",
    "end": "3632330"
  },
  {
    "text": "And I'm going to go from va\ncomma i to vb comma i minus c.",
    "start": "3632330",
    "end": "3644310"
  },
  {
    "text": "So the idea is that\nI go from a to b. And in the process,\nI lose c critters.",
    "start": "3644310",
    "end": "3650150"
  },
  {
    "text": "But I have to do this for\nall the possible i's that I could see in my state. So that goes from\nct to k, right?",
    "start": "3650150",
    "end": "3665329"
  },
  {
    "text": "c, associated with the trail,\nt, which I decided not to use.",
    "start": "3665330",
    "end": "3671150"
  },
  {
    "text": "OK, right. So the basic point\nhere is that there are a bunch of\ndifferent states where I can traverse this trail.",
    "start": "3671150",
    "end": "3677119"
  },
  {
    "text": "But I have to have at\nleast c critters in my bag if I'm allowed to\ntraverse this trail, or else I will be sad, OK?",
    "start": "3677120",
    "end": "3683930"
  },
  {
    "text": "And so I kind of copy this\nedge a bunch of different times to represent all the possible\ntransitions I can make.",
    "start": "3683930",
    "end": "3689810"
  },
  {
    "text": "And similarly, let's say\nthat a does have a store. ",
    "start": "3689810",
    "end": "3698223"
  },
  {
    "text": "Well, I still want\nto add an edge. But now I have the\nluxury of clearing out all the stuff in my bag before\ncollecting the critters, yeah?",
    "start": "3698223",
    "end": "3705850"
  },
  {
    "text": "So now I still want\nan edge of length l.",
    "start": "3705850",
    "end": "3710950"
  },
  {
    "text": "But now I get to\nconnect more vertices and reset my state\nin the process. So now I'm going to go\nfrom va comma i to vb.",
    "start": "3710950",
    "end": "3722050"
  },
  {
    "text": " And where am I going to end up?",
    "start": "3722050",
    "end": "3728327"
  },
  {
    "text": "Well, how many critters\nare going to be in my bag? I have a bag of capacity k.",
    "start": "3728327",
    "end": "3733579"
  },
  {
    "text": "And I just traversed\nthis edge from a to b, which contained c critters. So I get a v k\nminus c, like that.",
    "start": "3733580",
    "end": "3744079"
  },
  {
    "text": "And of course, I can do\nthat for all i from--",
    "start": "3744080",
    "end": "3750896"
  },
  {
    "text": " oh yeah.",
    "start": "3750896",
    "end": "3756330"
  },
  {
    "text": "I have to be careful--  well, no. Actually just for all i is fine.",
    "start": "3756330",
    "end": "3761750"
  },
  {
    "text": "Yeah. I think there might be-- there's either a mistake\nin how I copied it down or a mistake in the problem-- a mistake in the problem.",
    "start": "3761750",
    "end": "3769042"
  },
  {
    "text": "AUDIENCE: Do you still\nneed [INAUDIBLE]?? JUSTIN SOLOMON: Yeah,\nI think this is right. Yeah, so I think there's--\nwe wrote for all i in some",
    "start": "3769042",
    "end": "3776000"
  },
  {
    "text": "interval, but we didn't have to. OK. Right, so those are our\ndifferent cases, right? So essentially, in this case,\nwe clear out our queue here.",
    "start": "3776000",
    "end": "3784280"
  },
  {
    "text": "Well, not even a queue,\njust our set of spheres. We reset and go big here. Notice that the second\nvertex doesn't even",
    "start": "3784280",
    "end": "3789860"
  },
  {
    "text": "have an i in its index,\nbecause it doesn't matter. OK. And then similarly-- so\nthat gets me from a to b.",
    "start": "3789860",
    "end": "3798497"
  },
  {
    "text": "I also have to do the symmetric\nthing to go from b to a. ",
    "start": "3798497",
    "end": "3807570"
  },
  {
    "text": "OK, so now I have a graph. And first of all, we\nshould reason and make sure",
    "start": "3807570",
    "end": "3813842"
  },
  {
    "text": "that we can actually\nconstruct this graph in a reasonable amount of time. So let's do that really fast.",
    "start": "3813842",
    "end": "3819500"
  },
  {
    "start": "3819500",
    "end": "3829620"
  },
  {
    "text": "Right. So the number of\nvertices in our graph--",
    "start": "3829620",
    "end": "3834860"
  },
  {
    "text": "well, I basically have k\nplus 1 copies of my graph. So it's equal to\nk plus 1 times n.",
    "start": "3834860",
    "end": "3841493"
  },
  {
    "text": "And that's good. So that's order kn time-- order kn space, I suppose.",
    "start": "3841493",
    "end": "3847970"
  },
  {
    "text": "And similarly, there's\nk edges that are",
    "start": "3847970",
    "end": "3854660"
  },
  {
    "text": "associated with every trail. And there's order n trails,\nbecause I have a degree bound.",
    "start": "3854660",
    "end": "3860310"
  },
  {
    "text": "So overall, there's order\nkn edges in my graph, OK?",
    "start": "3860310",
    "end": "3869360"
  },
  {
    "text": "Great. So now my problem is not so bad. I have a source, which is the\nplace where our walker starts.",
    "start": "3869360",
    "end": "3879880"
  },
  {
    "text": "I have t, which is\nthe destination, where she wants to go. So what do I need?",
    "start": "3879880",
    "end": "3885680"
  },
  {
    "text": "Well, I just need any path\nthat starts at v s, k.",
    "start": "3885680",
    "end": "3893619"
  },
  {
    "text": "In other words, she starts at\ns and has a full bag with k capacity, and ends up at--",
    "start": "3893620",
    "end": "3900590"
  },
  {
    "text": "to v t comma i for\nany i, because it",
    "start": "3900590",
    "end": "3905715"
  },
  {
    "text": "doesn't matter how much\ncapacity she has in her bag when she reaches\nher destination.",
    "start": "3905715",
    "end": "3911540"
  },
  {
    "text": "So this is for all i. Any path avoids sadness in the\nway this problem is written.",
    "start": "3911540",
    "end": "3921130"
  },
  {
    "text": "So how could I do that? Well, she wants\nthe shortest path. So I can just do Dijkstra's\nalgorithm, from v s, k.",
    "start": "3921130",
    "end": "3932109"
  },
  {
    "text": "I'm going to do a bit\nof cleanup afterward to check all the different\ni's and find this closest one. And how much time\ndoes that take?",
    "start": "3932110",
    "end": "3939410"
  },
  {
    "text": "Well, my graph takes kn\nspace, because it has kn vertices and order kn edges.",
    "start": "3939410",
    "end": "3947440"
  },
  {
    "text": "So overall, this is going\nto take order kn log kn",
    "start": "3947440",
    "end": "3953505"
  },
  {
    "text": "time, which is a good thing,\nbecause that's exactly what the problem asks for. And of course, if the shortest\npath is infinity, then",
    "start": "3953505",
    "end": "3965350"
  },
  {
    "text": "what do we know? You can say it with me. Sadness is unavoidable. [LAUGHTER]",
    "start": "3965350",
    "end": "3972316"
  },
  {
    "start": "3972316",
    "end": "3978099"
  },
  {
    "text": "That's just a weird thing\nto write on a blackboard.",
    "start": "3978100",
    "end": "3983170"
  },
  {
    "text": "OK, and so that's our\nbasic problem here. So what was our strategy? If we step back 10 feet,\nessentially, we took our graph.",
    "start": "3983170",
    "end": "3990070"
  },
  {
    "text": "And rather than just making our\ngraph, we made k copies of it with edges that kind\nof point upstairs,",
    "start": "3990070",
    "end": "3995230"
  },
  {
    "text": "meaning that you\ngive away spheres in the process of traversing\nthese different edges,",
    "start": "3995230",
    "end": "4000462"
  },
  {
    "text": "except when you hit the\nstores, which brings you back to level 0. So that was our basic\ngraph structure.",
    "start": "4000462",
    "end": "4006040"
  },
  {
    "text": "And then we just need to do\nshortest path on that thing. Any questions about that? Yes?",
    "start": "4006040",
    "end": "4011390"
  },
  {
    "text": "AUDIENCE: Last time we did\ngraph duplication, we made--",
    "start": "4011390",
    "end": "4016609"
  },
  {
    "text": "it was layered graph. And you kept making\nthese transitions. And it was a DAG. So can't we do this\nin linear time?",
    "start": "4016610",
    "end": "4023750"
  },
  {
    "text": "JUSTIN SOLOMON: Can't we\ndo this in linear time? So in other words,\nwhy is our graph not a DAG in this particular case?",
    "start": "4023750",
    "end": "4032420"
  },
  {
    "text": "Let me think about\nthat for a second.  There's nothing about\nthis problem that says",
    "start": "4032420",
    "end": "4038930"
  },
  {
    "text": "that the graph has to be a DAG. In particular, I guess\nyou could keep walking-- like, if you had a\npath with a store that",
    "start": "4038930",
    "end": "4045480"
  },
  {
    "text": "were exactly the same as\nthe number of critters, you could keep walking back\nand forth along that path.",
    "start": "4045480",
    "end": "4050730"
  },
  {
    "text": "And so there's a\nlittle cycle there, which would be enough to not be\nable to do it in linear time. AUDIENCE: Well, the edges\nthat we constructed are not--",
    "start": "4050730",
    "end": "4059062"
  },
  {
    "text": "don't necessarily\ncorrespond to the edges in the original trails. That's not in the problem. JUSTIN SOLOMON: Sure.",
    "start": "4059062",
    "end": "4064790"
  },
  {
    "text": "That's absolutely right. So we constructed a directed\ngraph out of our original one. But that directed graph also\ncan contain cycles, right?",
    "start": "4064790",
    "end": "4072470"
  },
  {
    "text": "So yeah, so I think the\nexample I'm giving you works. So I have a graph\nwith two vertices.",
    "start": "4072470",
    "end": "4078589"
  },
  {
    "text": "Maybe there's other graph\nstuff going on, but whatever. I have two vertices here. And I have some number\nof critters here.",
    "start": "4078590",
    "end": "4085760"
  },
  {
    "text": "And I have a store on\neither end of my edge, just because I'm boring\nand conservative.",
    "start": "4085760",
    "end": "4093470"
  },
  {
    "text": "And now, well, assuming\nthat c is less than k, I can just keep going back\nand forth along this edge",
    "start": "4093470",
    "end": "4098640"
  },
  {
    "text": "as many times as I want. And this is for free, right? Because every time I get\nto the end of the edge, I throw all my critters away.",
    "start": "4098640",
    "end": "4105639"
  },
  {
    "text": "So that's an example\nof a cycle in my graph. And because there's a cycle,\nI'm not in the DAG case anymore.",
    "start": "4105640",
    "end": "4111689"
  },
  {
    "text": "AUDIENCE: Well, it's a cycle\nin the constructed graph. JUSTIN SOLOMON: Sorry. Yeah, it is a\ncycle here and also",
    "start": "4111689",
    "end": "4117600"
  },
  {
    "text": "a cycle in the\nconstructed graph. Yeah, sorry. I guess that's true.",
    "start": "4117600",
    "end": "4124030"
  },
  {
    "text": "All right, any other questions\nI can make a hash of here? Excellent. So am I out of time?",
    "start": "4124031",
    "end": "4129410"
  },
  {
    "text": "Ah, shucks. No. OK. In that case, we'll do\nthe last problem here. Actually, the last\nproblem, I think,",
    "start": "4129410",
    "end": "4134869"
  },
  {
    "text": "is the most interesting one. So as usual, I've blessed\nmyself with not enough time.",
    "start": "4134870",
    "end": "4140359"
  },
  {
    "text": "OK, which of these\nboards is the tidiest? I think the answer is none of--",
    "start": "4140359",
    "end": "4146460"
  },
  {
    "text": "yeah, none of the above. So let's use the backs here.",
    "start": "4146460",
    "end": "4151549"
  },
  {
    "text": "OK, right. So our last problem is\na shipping problem, not",
    "start": "4151550",
    "end": "4157790"
  },
  {
    "text": "a trans-shipment\nproblem, which happens to be my area of\nresearch, but rather, just a good old shipping thing.",
    "start": "4157790",
    "end": "4165930"
  },
  {
    "text": "So here, strangely, I did not\ngive myself my complete notes.",
    "start": "4165930",
    "end": "4172350"
  },
  {
    "text": "So this will be fun. Right. So I'm trying to ship servers\nfrom San Francisco to Cambridge",
    "start": "4172350",
    "end": "4178839"
  },
  {
    "text": "by truck. And I have all these bunch\nof third-parity companies that all have pairs of cities\nthat they can ship between,",
    "start": "4178840",
    "end": "4185439"
  },
  {
    "text": "and only so much. These companies\nare kind of divas. They have a weight limit. They only have cities. They're directed edges.",
    "start": "4185439",
    "end": "4191060"
  },
  {
    "text": "Like, they don't drive their\ntrucks back, apparently, or maybe they pick up\nsomebody else's stuff, and they're just\npicking your stuff up",
    "start": "4191060",
    "end": "4196983"
  },
  {
    "text": "in the boring\ndirection, or whatever. So I have a bunch of-- I have n trucking routes.",
    "start": "4196983",
    "end": "4203020"
  },
  {
    "text": " And each route, r sub i, is\na tuple with si, ti, wi, ci.",
    "start": "4203020",
    "end": "4218719"
  },
  {
    "text": "And what are all these things? So here, this is the source\nof every shipping route,",
    "start": "4218720",
    "end": "4226949"
  },
  {
    "text": "every trucking route here. This is the target, right? So this is like where\nthe truck starts. This is where the truck ends.",
    "start": "4226950",
    "end": "4234980"
  },
  {
    "text": "This is the max weight\nthat the truck can handle.",
    "start": "4234980",
    "end": "4240800"
  },
  {
    "text": "So the truck only has\nso much space in it. The tires are only so big.",
    "start": "4240800",
    "end": "4246230"
  },
  {
    "text": "And if I put something\nof weight bigger than w, then my truck is going to die. So that's the most that\nI can put on this truck.",
    "start": "4246230",
    "end": "4253370"
  },
  {
    "text": "And this is the cost. OK. And I have n routes\nthat look like this.",
    "start": "4253370",
    "end": "4259728"
  },
  {
    "text": "And I'm trying to ship servers. And of course, some of my\nservers are too darn busy. By the way, we make\nan assumption here, which is that our\ntrucking routes form",
    "start": "4259728",
    "end": "4266303"
  },
  {
    "text": "a sort of continuous network. I can get from s to t and\nship, at the very least, like a pencil eraser, like\nsome minimal amount of weight.",
    "start": "4266303",
    "end": "4274159"
  },
  {
    "text": "OK, and so the basic\nendpoint of this problem is going to be to figure out the\nheaviest thing that I can ship.",
    "start": "4274160",
    "end": "4284210"
  },
  {
    "text": "And we give you a\nproblem on the path toward that to help prove\na little bit about this.",
    "start": "4284210",
    "end": "4290670"
  },
  {
    "text": "This is a very\ntypical kind of setup. So again, I've got a\nbunch of trucking routes,",
    "start": "4290670",
    "end": "4296420"
  },
  {
    "text": "each one of which\nhas a max weight. And I'm going to\nwant to know, first of all, what's the maximum\namount of weight I can ship?",
    "start": "4296420",
    "end": "4301910"
  },
  {
    "text": "And then what is the minimum\ncost I can ship that weight? So in problem A, which is\nmarked as useful digression,",
    "start": "4301910",
    "end": "4311330"
  },
  {
    "text": "we're first going to prove\nkind of a handy inequality. I decided to go off book with my\nproof ever so slightly of this.",
    "start": "4311330",
    "end": "4317910"
  },
  {
    "text": "So get excited for this to be\nslightly wrong in a subtle way, which is what I specialize in.",
    "start": "4317910",
    "end": "4324620"
  },
  {
    "text": "But in particular, we're going\nto make a definition here. So let's say that pi\nis a weighted path.",
    "start": "4324620",
    "end": "4336389"
  },
  {
    "text": "Then the bottleneck\nof pi is going",
    "start": "4336390",
    "end": "4344350"
  },
  {
    "text": "to be the minimum edge\nweight of any edge in pi.",
    "start": "4344350",
    "end": "4353640"
  },
  {
    "start": "4353640",
    "end": "4359197"
  },
  {
    "text": "And to make sure that we\nsee how this is connected to the problem, if I'm\ntrying to ship a server, and I have to put it on truck\n1, and truck 2, and truck",
    "start": "4359197",
    "end": "4366100"
  },
  {
    "text": "3, and truck 4, and truck\n5, obviously, of those five trucks, the one whose\ncapacity for weight",
    "start": "4366100",
    "end": "4372850"
  },
  {
    "text": "is the smallest is\nthe only one that matters in terms of the\nheaviest thing that I can ship. OK.",
    "start": "4372850",
    "end": "4378590"
  },
  {
    "text": "So, right. Now, given a directed\ngraph and two vertices,",
    "start": "4378590",
    "end": "4385145"
  },
  {
    "text": "s and t, going to define a\nquantity called b of s comma t.",
    "start": "4385145",
    "end": "4391550"
  },
  {
    "text": "And we're going to\nsay that this is the max over any path, pi, from\ns to t of the bottleneck of pi.",
    "start": "4391550",
    "end": "4407170"
  },
  {
    "text": "OK, so to sanity check this\nquantity here, essentially, what it's saying is,\nat the end of the day, I have this big network\nof trucking routes.",
    "start": "4407170",
    "end": "4413740"
  },
  {
    "text": "I just want to go from\none city to another. And I don't care which series\nof trucks I want to use. I just want to maximize the\nweight that I can ship, right?",
    "start": "4413740",
    "end": "4421145"
  },
  {
    "text": "And so this is saying\nI'm going to look at all the different\npaths that I could take. Each path is sort\nof band limited",
    "start": "4421145",
    "end": "4428079"
  },
  {
    "text": "by the one truck\nthat has the lightest weight that it can carry. And I'm going to find the path\nthat has the best bottleneck",
    "start": "4428080",
    "end": "4435700"
  },
  {
    "text": "as measured by this quantity. I'm using the word\n\"best\" because I tend to make sign mistakes. And that's a vague term.",
    "start": "4435700",
    "end": "4441449"
  },
  {
    "text": "OK. And then, right. So I'm writing too big.",
    "start": "4441450",
    "end": "4449230"
  },
  {
    "text": "Hopefully I won't\nrun out of space. We're going to make one\nadditional definition, which is I of t is the\nincoming neighbors of t.",
    "start": "4449230",
    "end": "4463740"
  },
  {
    "text": "And then the problem\nis asking you to prove a particular\ninequality here,",
    "start": "4463740",
    "end": "4470440"
  },
  {
    "text": "claim, which is\nthat b of s, t is bigger than or equal to the\nmin of two values, b of s,",
    "start": "4470440",
    "end": "4483870"
  },
  {
    "text": "v, or w of v, t,\nfor all v in I of t.",
    "start": "4483870",
    "end": "4495165"
  },
  {
    "text": "So let's see what\nthis is saying. So remember that this\nis like the capacity that I can ship from s\nto t using any route,",
    "start": "4495165",
    "end": "4502130"
  },
  {
    "text": "and that that upper bound's the\nminimum of two things, right? Either the capacity of\nshipping to one of my neighbors",
    "start": "4502130",
    "end": "4510020"
  },
  {
    "text": "with an incoming\nedge or the weight of basically shipping\nfrom that neighbor to me.",
    "start": "4510020",
    "end": "4516095"
  },
  {
    "text": "Notice, this is kind of similar\nto a triangle inequality, which is why we're going\nto kind of know",
    "start": "4516095",
    "end": "4521420"
  },
  {
    "text": "how to solve part B of\nthis problem pretty easily. OK. ",
    "start": "4521420",
    "end": "4527210"
  },
  {
    "text": "And moreover, with equality\nfor some v star in i of t, OK?",
    "start": "4527210",
    "end": "4546477"
  },
  {
    "text": "Guess what that v\nstar is going to be. It's going to be\nthe vertex that's sort of the previous one\non the path of trucks",
    "start": "4546477",
    "end": "4554449"
  },
  {
    "text": "that I actually take\nto ship stuff, right? OK. So how could we prove this?",
    "start": "4554450",
    "end": "4559480"
  },
  {
    "text": "So the intuition here is\nthat the path that's actually giving you this bottleneck,\nthis b s comma t,",
    "start": "4559480",
    "end": "4564590"
  },
  {
    "text": "has to include one\nof my incoming edges. And I'm just trying\nto find it, right? That's roughly what's going\non in this inequality.",
    "start": "4564590",
    "end": "4570230"
  },
  {
    "text": "And by the way,\nwhenever a problem asks you to prove an\ninequality, just step back. Like, I feel like I\nspend like 85% of my day",
    "start": "4570230",
    "end": "4576289"
  },
  {
    "text": "with research students\nsort of saying, like, OK, but like, what is this\nreally telling me about life? And this is a good example.",
    "start": "4576290",
    "end": "4583308"
  },
  {
    "text": "OK, so to that end, I'm going\nto make a definition, which I found to be convenient when I\nwas solving this problem, which",
    "start": "4583308",
    "end": "4589969"
  },
  {
    "text": "is the following. I'm going to say\nthat pi s comma t is",
    "start": "4589970",
    "end": "4595190"
  },
  {
    "text": "going to be the actual path\nthat gives me the bottleneck. So this is kind of like\nthe arg max over all pi--",
    "start": "4595190",
    "end": "4604620"
  },
  {
    "text": "I'm going to use\nreally bad notation-- pis that connect s through t. That's how we're going to\nthink of the bottleneck.",
    "start": "4604620",
    "end": "4612100"
  },
  {
    "text": " So in other words,\nthis is the path",
    "start": "4612100",
    "end": "4621400"
  },
  {
    "text": "that actually realizes\nthis quantity, b, right? So in other words, b of s,\nt is equal to bottleneck--",
    "start": "4621400",
    "end": "4628840"
  },
  {
    "text": " pi only has two lines--",
    "start": "4628840",
    "end": "4634820"
  },
  {
    "text": "s, t. This is convenient for\nme, because the reasoning about that path\nmakes some sense.",
    "start": "4634820",
    "end": "4641270"
  },
  {
    "text": "OK. So now, we're going to\nprove the inequality first. And then we may or may not\nprove the equality case,",
    "start": "4641270",
    "end": "4648710"
  },
  {
    "text": "depending on how I feel. OK, so right. So let's section this off\nand try and use my board",
    "start": "4648710",
    "end": "4655690"
  },
  {
    "text": "a little more\nconservatively here. OK, so right.",
    "start": "4655690",
    "end": "4661730"
  },
  {
    "text": "So now let's take a vertex,\nv, from the incoming edges",
    "start": "4661730",
    "end": "4670460"
  },
  {
    "text": "here of t, because that's\nwhat we need to prove this. And we're going to prove the\ninequality directly here.",
    "start": "4670460",
    "end": "4678410"
  },
  {
    "text": "In particular, we can\ndefine a path that",
    "start": "4678410",
    "end": "4685100"
  },
  {
    "text": "goes from s to t as follows. I could take the pi s,\nv, and then concatenate",
    "start": "4685100",
    "end": "4693680"
  },
  {
    "text": "onto the end of this guy, t,\nbecause we know that there's",
    "start": "4693680",
    "end": "4701060"
  },
  {
    "text": "a directed edge from v to t, by\ndefinition of what this i is, OK?",
    "start": "4701060",
    "end": "4707610"
  },
  {
    "text": "Right. And so this is\nkind of convenient, because this is\nlike the bottleneck path for one of my neighbors. And now I'm just kind of\nsticking an edge on there.",
    "start": "4707610",
    "end": "4714690"
  },
  {
    "text": "And we know that, of course,\nthis is a candidate path to get from s to t. But it may not be\nthe one that actually",
    "start": "4714690",
    "end": "4720900"
  },
  {
    "text": "achieves the bottleneck. OK? Right, so yeah.",
    "start": "4720900",
    "end": "4727890"
  },
  {
    "text": "And let's-- oops, let's\ndefine that to be pi twiddle, just for fun. I like to give things names.",
    "start": "4727890",
    "end": "4734550"
  },
  {
    "text": "OK. So what do we know? We know that b of s comma t--",
    "start": "4734550",
    "end": "4741269"
  },
  {
    "text": "well, this, by definition,\nis the max bottleneck",
    "start": "4741270",
    "end": "4749460"
  },
  {
    "text": "of any incoming path\ngoing from s to t.",
    "start": "4749460",
    "end": "4754489"
  },
  {
    "text": "This is a path\nfrom s to t, yeah? So because this\nis the max, it is",
    "start": "4754490",
    "end": "4760100"
  },
  {
    "text": "bigger than or equal to\nbottleneck of pi twiddle,",
    "start": "4760100",
    "end": "4767580"
  },
  {
    "text": "right? That's the nice\nthing about maxes, is they tend to be\nbigger than other stuff. OK.",
    "start": "4767580",
    "end": "4773100"
  },
  {
    "text": "Well, what is the\nbottleneck of pi twiddle? Well, remember our definition\nof bottleneck here, right?",
    "start": "4773100",
    "end": "4778950"
  },
  {
    "text": "It's the min edge weight\nover my entire path. Well, I have two options.",
    "start": "4778950",
    "end": "4784350"
  },
  {
    "text": "Either that edge weight\nis the edge from v to t, or it's the edge weight\nthat's associated",
    "start": "4784350",
    "end": "4791320"
  },
  {
    "text": "to the rest of this stuff, yeah? So either this is the min of the\nbottleneck of the first segment",
    "start": "4791320",
    "end": "4805210"
  },
  {
    "text": "of our path, pi s, v-- by the way, that may be empty. And that's OK. That's just like\na one-edge path.",
    "start": "4805210",
    "end": "4810400"
  },
  {
    "text": "We can dispense with\nthat case pretty easily. Or the weight of v, t.",
    "start": "4810400",
    "end": "4817620"
  },
  {
    "text": "Cool? Well, by definition,\nbottleneck of pi s, v is exactly this\nquantity, because that's",
    "start": "4817620",
    "end": "4826070"
  },
  {
    "text": "what I chose it to\nbe over here, yeah? So this is exactly\nmin of b s comma v--",
    "start": "4826070",
    "end": "4833989"
  },
  {
    "text": "that was supposed to be\na v, but I wrote a t-- or w of v comma t.",
    "start": "4833990",
    "end": "4842000"
  },
  {
    "text": "And that is exactly what\nwe wanted to prove, yeah? So that takes care of\nour inequality case.",
    "start": "4842000",
    "end": "4848679"
  },
  {
    "text": "Do I want to do\nthe equality case? I don't think I do, yeah. So it's not too hard to\ncheck the equality case.",
    "start": "4848680",
    "end": "4855010"
  },
  {
    "text": "Essentially, you can make a\npretty easy contradiction, right? Because if it's strictly larger,\nthen what does that mean?",
    "start": "4855010",
    "end": "4861210"
  },
  {
    "text": "That means that every single\nincoming edge, none of them can be the edge where your\nbottleneck path comes in.",
    "start": "4861210",
    "end": "4866950"
  },
  {
    "text": "And obviously, there's\nsomething wrong with that. OK, so I'll refer you guys\nto the notes for that one.",
    "start": "4866950",
    "end": "4873820"
  },
  {
    "text": "And finally, the problem\nsays, assuming that-- ",
    "start": "4873820",
    "end": "4881420"
  },
  {
    "text": "so now we have kind of a\nfunny constant in here, just to make your life a\nlittle bit annoying. We have at most 3 square root\nn cities that we care about.",
    "start": "4881420",
    "end": "4896100"
  },
  {
    "text": "Again, why 3? Why not? I think. And what we want is the weight\nof the single largest server",
    "start": "4896100",
    "end": "4903950"
  },
  {
    "text": "and the minimum cost\nto ship that thing. So we want, one, the\nlargest weight we can ship.",
    "start": "4903950",
    "end": "4909980"
  },
  {
    "text": " We'll call that w star to ship.",
    "start": "4909980",
    "end": "4918210"
  },
  {
    "text": "And two is the smallest cost to\nship that weight, w star, OK?",
    "start": "4918210",
    "end": "4931170"
  },
  {
    "text": "So let's do two first,\nbecause it's easy. So let's say that I was\nable to compute w star.",
    "start": "4931170",
    "end": "4938570"
  },
  {
    "text": "So now what can I do? Well, I can construct a graph\nwhere I only keep around",
    "start": "4938570",
    "end": "4944500"
  },
  {
    "text": "the trucks that can ship at\nleast this amount of weight, because the other ships are--",
    "start": "4944500",
    "end": "4951110"
  },
  {
    "text": "I really want them to be\nboats in this problem. But the other trucks\nare useless, right? If they can't cover w\nstar, then they're not",
    "start": "4951110",
    "end": "4958429"
  },
  {
    "text": "pulling their weight, yeah? So to do part two\nhere, what can I do?",
    "start": "4958430",
    "end": "4966690"
  },
  {
    "text": "I can make a new graph, G sub\nc, with a vertex for every city",
    "start": "4966690",
    "end": "4976755"
  },
  {
    "text": "and--  right-- and an edge--",
    "start": "4976755",
    "end": "4984730"
  },
  {
    "text": "a directed edge, sorry,\nper shipping route with--",
    "start": "4984730",
    "end": "4994435"
  },
  {
    "text": " this is going to\nbe an unfortunate clash in terminology.",
    "start": "4994435",
    "end": "5000040"
  },
  {
    "text": "I'm going to say\nedge weight to refer to the edge weight in my graph. ",
    "start": "5000040",
    "end": "5008830"
  },
  {
    "text": "And that's going to be equal\nto the cost of the edge. ",
    "start": "5008830",
    "end": "5014370"
  },
  {
    "text": "And only keep around--  but only for routes that can\ncarry at least w star amount",
    "start": "5014370",
    "end": "5027410"
  },
  {
    "text": "of weight. And now what do we do? Well, it's just\nshortest path, right? At this point,\nshortest path, which",
    "start": "5027410",
    "end": "5034870"
  },
  {
    "text": "is really the minimum\ncost in this case, because that's what we're\nassociating to the edges, is going to give me the cost of\nshipping w star in my network.",
    "start": "5034870",
    "end": "5042550"
  },
  {
    "text": "I think that's pretty obvious\nfrom this construction. So that's Dijkstra,\nD-I-J-K-S-T-R-A.",
    "start": "5042550",
    "end": "5052750"
  },
  {
    "text": "And now the only question is,\nhow much time does it take? So let's say that I do the\nbraindead version of Dijkstra,",
    "start": "5052750",
    "end": "5058010"
  },
  {
    "text": "where I just use a direct access\narray to do my priority queue. So if you recall, that'll take\nbig O of mod v cubed here--",
    "start": "5058010",
    "end": "5068730"
  },
  {
    "text": "squared? Squared. Yep, you're right. Sorry. I was thinking\nJohnson's algorithm.",
    "start": "5068730",
    "end": "5074679"
  },
  {
    "text": "OK. Well, in this\ncase, how big is v? Well, it's square\nroot of n, 3 times",
    "start": "5074680",
    "end": "5081010"
  },
  {
    "text": "square root of n, at most. So of course, v squared\nis really big O of n.",
    "start": "5081010",
    "end": "5089590"
  },
  {
    "text": "And that part is solved, yeah? So really, our only remaining\nproblem here is to do part one.",
    "start": "5089590",
    "end": "5096190"
  },
  {
    "text": "And I don't have\nnearly enough time. In fact, I'm\ncompletely out of time. So maybe we'll just talk\nthrough it really briefly.",
    "start": "5096190",
    "end": "5101860"
  },
  {
    "text": "Sorry about that. Essentially, the\nbasic observation here is that the\ninequality that we",
    "start": "5101860",
    "end": "5107469"
  },
  {
    "text": "proved in part A\nof our problem is kind of like the triangle\ninequality of the bottleneck",
    "start": "5107470",
    "end": "5112990"
  },
  {
    "text": "world, in some sense. Essentially, what it's giving\nyou is some update formula that",
    "start": "5112990",
    "end": "5119907"
  },
  {
    "text": "looks kind of like\nthe update formula that we would\napply in Dijkstra's algorithm for shortest\npath, the basic assumption",
    "start": "5119908",
    "end": "5125410"
  },
  {
    "text": "here being that,\nwell, my shortest path has to come from\nsomewhere, right? So if I look at\nall my neighbors,",
    "start": "5125410",
    "end": "5130750"
  },
  {
    "text": "and then I kind of add\nin my closest edge, or rather, the sum\nof the path length",
    "start": "5130750",
    "end": "5138460"
  },
  {
    "text": "to the previous vertex\nplus the edge to me, that gives the\nshortest path to me. Here, instead of that, we're\nsaying the biggest bottleneck",
    "start": "5138460",
    "end": "5145870"
  },
  {
    "text": "path. So what do I do? I look at all of my\nincoming neighbors. I find the one with the\nbiggest bottleneck, which",
    "start": "5145870",
    "end": "5151510"
  },
  {
    "text": "is band limited by\ntheir bottleneck, plus the bottleneck\nof the incoming edge. And then I update myself.",
    "start": "5151510",
    "end": "5158260"
  },
  {
    "text": "So the only thing remaining\nhere is to basically do exactly Dijkstra's algorithm. But rather than updating\nby summing edge lengths,",
    "start": "5158260",
    "end": "5165910"
  },
  {
    "text": "we update by using this formula. And essentially, everything\nelse remains the same. So conveniently,\nI've run out of time.",
    "start": "5165910",
    "end": "5173179"
  },
  {
    "text": "So I won't even have to\njumble this one on the board. I'll let you guys\ndo that one at home. But I actually think the\nexplanation in the written",
    "start": "5173180",
    "end": "5179290"
  },
  {
    "text": "material is pretty\nself-evident for this problem. So that's probably just as well. ",
    "start": "5179290",
    "end": "5188000"
  }
]