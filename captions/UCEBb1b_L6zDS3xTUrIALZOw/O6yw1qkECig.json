[
  {
    "text": "For this problem, we are going to make use\nof this simple datapath that consists of a",
    "start": "760",
    "end": "5970"
  },
  {
    "text": "four register register file, a relatively\nsimple arithmetic logic unit that can perform",
    "start": "5970",
    "end": "12000"
  },
  {
    "text": "ADD, SUB, MUL, and NAND operations.\nIn addition, it can compare two inputs and",
    "start": "12000",
    "end": "18700"
  },
  {
    "text": "determine whether or not they are equal.\nThe result of the comparison, Z, can then",
    "start": "18700",
    "end": "23820"
  },
  {
    "text": "be used to control what happens next.\nThere are multiple control signals in this",
    "start": "23820",
    "end": "29350"
  },
  {
    "text": "datapath.\nThe first two are Asel and Bsel.",
    "start": "29350",
    "end": "33550"
  },
  {
    "text": "These are used to select which register drives\nthe corresponding multiplexer output.",
    "start": "33550",
    "end": "38829"
  },
  {
    "text": "The value stored in the register selected\nby Asel becomes the A input to the arithmetic",
    "start": "38829",
    "end": "44198"
  },
  {
    "text": "operations and is passed to the arithmetic\nunits along the red wire.",
    "start": "44199",
    "end": "49440"
  },
  {
    "text": "The value stored in the register selected\nby Bsel becomes the B input to the arithmetic",
    "start": "49440",
    "end": "54698"
  },
  {
    "text": "operations and is passed to the arithmetic\nunits along the blue wire.",
    "start": "54699",
    "end": "60069"
  },
  {
    "text": "The next control signal is Opsel.\nIt selects which of the four operation outputs",
    "start": "60069",
    "end": "65410"
  },
  {
    "text": "should be selected by the Opsel multiplexer\nas the result of our operation.",
    "start": "65410",
    "end": "71220"
  },
  {
    "text": "This result is fed back to the register file\nalong the purple wire.",
    "start": "71220",
    "end": "76070"
  },
  {
    "text": "The Wen is a write enable for the register\nfile which specifies whether or not the result",
    "start": "76070",
    "end": "82960"
  },
  {
    "text": "of our operation should be written back into\nthe register file.",
    "start": "82960",
    "end": "87420"
  },
  {
    "text": "If it is supposed to be written back to the\nregister file, then the Wsel control signal",
    "start": "87420",
    "end": "93130"
  },
  {
    "text": "selects to which of the registers the result\nshould be written.",
    "start": "93130",
    "end": "97729"
  },
  {
    "text": "The yellow box is the control FSM.\nIt generates the control signals for the rest",
    "start": "97730",
    "end": "103530"
  },
  {
    "text": "of the datapath based on the operations that\nyou want to perform.",
    "start": "103530",
    "end": "109020"
  },
  {
    "text": "Suppose the initial value of our 4 registers\nis:",
    "start": "109020",
    "end": "112140"
  },
  {
    "text": "R0 = 1, R1 = 0, R2 = -1, and R3 = N.\nWe want to evaluate the result of the function",
    "start": "112140",
    "end": "122450"
  },
  {
    "text": "3 * N â€“ 2 and store the result into R3.\nOur job is to design the control FSM so that",
    "start": "122450",
    "end": "131389"
  },
  {
    "text": "it produces the correct signals to achieve\nwhat we want.",
    "start": "131389",
    "end": "135430"
  },
  {
    "text": "To help us get started, here is an incomplete\nlisting of the code that will achieve what",
    "start": "135430",
    "end": "139959"
  },
  {
    "text": "we want.\nThe Sx labels are the names of the states",
    "start": "139959",
    "end": "144400"
  },
  {
    "text": "corresponding to each instruction in our program.\nOur first job is to figure out the values",
    "start": "144400",
    "end": "150129"
  },
  {
    "text": "of RX, RY, and RZ so that our code behaves\nas expected.",
    "start": "150129",
    "end": "156099"
  },
  {
    "text": "Let's begin by looking at state S0.\nWe want to end up with the value -2 in R2",
    "start": "156099",
    "end": "162709"
  },
  {
    "text": "by adding R2 which currently holds -1 to some\nregister.",
    "start": "162709",
    "end": "168170"
  },
  {
    "text": "In order to produce -2, we need to add -1\nwhich means that RX = R2.",
    "start": "168170",
    "end": "175439"
  },
  {
    "text": "Next, we look at state S1.\nHere we want to end up with the value 2 in",
    "start": "175439",
    "end": "182931"
  },
  {
    "text": "R1 by adding Ry to R0 which currently holds\na 1.",
    "start": "182931",
    "end": "188099"
  },
  {
    "text": "In order to produce 2, we need to add 1 which\nmeans RY = R0.",
    "start": "188099",
    "end": "196969"
  },
  {
    "text": "State S2 adds R0 to R1 and stores the result\nin R1.",
    "start": "196969",
    "end": "201939"
  },
  {
    "text": "Since R0 still equals 1 and R1 = 2, then we\nproduce R1 = 3.",
    "start": "201939",
    "end": "208200"
  },
  {
    "text": "Now, let's look at state S3.\nOur goal is to multiply 3*N and store the",
    "start": "208200",
    "end": "215120"
  },
  {
    "text": "result into R3.\nTo achieve this, we multiply RZ by R3 and",
    "start": "215120",
    "end": "221280"
  },
  {
    "text": "store the result in R3.\nSince R3 currently = N, that means that we",
    "start": "221280",
    "end": "226930"
  },
  {
    "text": "want to multiply it by R1 which equals 3.\nSo RZ = R1.",
    "start": "226930",
    "end": "233599"
  },
  {
    "text": "Finally, we add R3 and R2 to produce 3*N-2\nand store that result back into R3.",
    "start": "233599",
    "end": "242809"
  },
  {
    "text": "S5 just executes a HALT() instruction to indicate\nthat we are done.",
    "start": "242809",
    "end": "248639"
  },
  {
    "text": "Now that we have working code, our next goal\nis to determine the settings for the control",
    "start": "248639",
    "end": "253340"
  },
  {
    "text": "FSM that will make the correct operations\nbe executed by our datapath.",
    "start": "253340",
    "end": "259169"
  },
  {
    "text": "Since we have 6 states, we will need 3 state\nbits to encode the value of the current and",
    "start": "259170",
    "end": "264320"
  },
  {
    "text": "next state.\nWe begin with state S0.",
    "start": "264320",
    "end": "270020"
  },
  {
    "text": "In order to encode that we are in state zero\nusing 3 bits, we set our current state, S[2:0]",
    "start": "270020",
    "end": "278120"
  },
  {
    "text": "to 000.\nIn this operation we don't care about the",
    "start": "278120",
    "end": "282840"
  },
  {
    "text": "Z signal, so Z = X which means don't care.\nThe instruction that we want to execute after",
    "start": "282840",
    "end": "290440"
  },
  {
    "text": "this first ADD, is the next ADD in state S1.\nThis means that our next state is 001.",
    "start": "290440",
    "end": "298760"
  },
  {
    "text": "Note that the notation S' is often used to\nrepresent the next state.",
    "start": "298760",
    "end": "305500"
  },
  {
    "text": "Our register select signals each need to select\none of 4 registers.",
    "start": "305500",
    "end": "310080"
  },
  {
    "text": "This means that these signals must each be\n2 bits wide.",
    "start": "310080",
    "end": "314080"
  },
  {
    "text": "Our Asel control signal identifies the register\nthat should be used as input A.",
    "start": "314080",
    "end": "319479"
  },
  {
    "text": "This register is R2, so Asel is 10.\nBsel identifies the second source operand.",
    "start": "319480",
    "end": "328720"
  },
  {
    "text": "In this case it is also R2, so Bsel = 10 as\nwell.",
    "start": "328720",
    "end": "335830"
  },
  {
    "text": "The Opsel signal identifies which operation\nwe want to perform.",
    "start": "335830",
    "end": "340620"
  },
  {
    "text": "Since we have 4 distinct operations, we would\nneed two bits to distinguish amongst them",
    "start": "340620",
    "end": "345770"
  },
  {
    "text": "and we would make each operation be associated\nwith one of the 4 encodings.",
    "start": "345770",
    "end": "350690"
  },
  {
    "text": "For simplicity, let's just label Opsel as\nADD to indicate that we selected the encoding",
    "start": "350690",
    "end": "356250"
  },
  {
    "text": "for the ADD.\nThe register we want to write our result to,",
    "start": "356250",
    "end": "361960"
  },
  {
    "text": "also known as the destination register, is\nR2 for this operation.",
    "start": "361960",
    "end": "367030"
  },
  {
    "text": "This means that Wsel = 10 and Wen = 1.\nWen is a signal that enables writing to the",
    "start": "367030",
    "end": "376180"
  },
  {
    "text": "register file.\nIf it is set to 0, then regardless of the",
    "start": "376180",
    "end": "380490"
  },
  {
    "text": "value of Wsel, no value will be written into\nthe register file.",
    "start": "380490",
    "end": "386490"
  },
  {
    "text": "Now let's quickly run through the rest of\nour instructions.",
    "start": "386490",
    "end": "390310"
  },
  {
    "text": "Our current state is state S1, or 001.\nOnce again Z is a don't care.",
    "start": "390310",
    "end": "396620"
  },
  {
    "text": "Since the instruction that will be executed\nnext is the one in S2, our next state is 010.",
    "start": "396620",
    "end": "403889"
  },
  {
    "text": "Our Asel = 00 and Bsel = 00.\nOpsel = ADD and Wsel = 01 and Wen = 1.",
    "start": "403890",
    "end": "418400"
  },
  {
    "text": "State 2 follows the same model, so current\nstate is 010 and next state is 011.",
    "start": "418400",
    "end": "425759"
  },
  {
    "text": "Here Asel = 00, Bsel = 01 and Wsel = 01 and\nWen = 1.",
    "start": "425760",
    "end": "435860"
  },
  {
    "text": "Once again our Opsel is an ADD.\nWe move on to state 3 whose current state",
    "start": "435860",
    "end": "442479"
  },
  {
    "text": "is 011 and next state is 100.\nAsel = 01, Bsel = 11, Wsel = 11, and Wen = 1.",
    "start": "442480",
    "end": "457020"
  },
  {
    "text": "Here our Opsel is MUL to indicate that the\noperation to be executed here is a multiply.",
    "start": "457020",
    "end": "464410"
  },
  {
    "text": "For state four, we have current state set\nto 100 and next state to 101.",
    "start": "464410",
    "end": "471870"
  },
  {
    "text": "Asel = 11, Bsel = 10, Wsel = 11, and Wen = 1.\nOur Opsel is once again ADD.",
    "start": "471870",
    "end": "482930"
  },
  {
    "text": "Finally, we reach state 5.\nThis state looks a little different from the",
    "start": "482930",
    "end": "488030"
  },
  {
    "text": "previous states so lets examine it a little\nmore closely.",
    "start": "488030",
    "end": "491620"
  },
  {
    "text": "The first thing to note, is that when we get\nto state 5 we want to stay there because we",
    "start": "491620",
    "end": "496090"
  },
  {
    "text": "are done with our execution, so both the current\nstate and the next state are 101.",
    "start": "496090",
    "end": "503150"
  },
  {
    "text": "Most of the other control bits can be set\nto don't care because at this point we mostly",
    "start": "503150",
    "end": "508910"
  },
  {
    "text": "don't care about what the rest of the datapath\nis doing.",
    "start": "508910",
    "end": "512430"
  },
  {
    "text": "The only other signal that we do need to worry\nabout is Wen.",
    "start": "512430",
    "end": "516990"
  },
  {
    "text": "Since we are allowing the rest of our datapath\nto run in whatever way, we need to ensure",
    "start": "516990",
    "end": "521770"
  },
  {
    "text": "that nothing produced on the datapath at this\nstage gets written back to any of the registers.",
    "start": "521770",
    "end": "527550"
  },
  {
    "text": "In order to guarantee that, we set Wen = 0.\nHere is the complete control ROM that will",
    "start": "527550",
    "end": "535110"
  },
  {
    "text": "execute the function 3*N-2 and store its result\ninto R3.",
    "start": "535110",
    "end": "541140"
  }
]