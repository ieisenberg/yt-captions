[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "7320"
  },
  {
    "text": " ANA BELL: All\nright, so let's get",
    "start": "7320",
    "end": "13530"
  },
  {
    "text": "started with today's lecture. We're going to look\nat a lot more code where we basically\nfigure out the complexity",
    "start": "13530",
    "end": "19920"
  },
  {
    "text": "class of that given code. So first, let's\nremember what we learned",
    "start": "19920",
    "end": "24930"
  },
  {
    "text": "at the end of the last lecture. So we introduced this theta\nnotation as a notation",
    "start": "24930",
    "end": "30990"
  },
  {
    "text": "to mark the order of growth\nof a particular function or a particular piece of code.",
    "start": "30990",
    "end": "36300"
  },
  {
    "text": "And the theta we preferred\nover big O notation because the theta allowed us to\nget this asymptotic upper bound",
    "start": "36300",
    "end": "43920"
  },
  {
    "text": "on the worst-case\nruntime of our function. So we wanted an asymptotic bound\nas opposed to an upper bound",
    "start": "43920",
    "end": "49680"
  },
  {
    "text": "because that upper bound can\nbe anything that grows faster than our function. So we prefer this theta\nas the asymptotic bound.",
    "start": "49680",
    "end": "57640"
  },
  {
    "text": "So at the end of last\nlecture, we basically said that given some function,\nthe theta for that function",
    "start": "57640",
    "end": "64030"
  },
  {
    "text": "is going to be the dominant\nterm of that function. So if we have a\nwhole bunch of terms,",
    "start": "64030",
    "end": "70120"
  },
  {
    "text": "we focus on the one\nthat grows the most. We drop any additive constants,\nany multiplicative constants,",
    "start": "70120",
    "end": "75820"
  },
  {
    "text": "and all the other\nterms that don't grow as fast as that biggest one.",
    "start": "75820",
    "end": "81670"
  },
  {
    "text": "So we ended up with some\nclasses of algorithms that we're going\nto go over today. We're going to see\na bunch of codes",
    "start": "81670",
    "end": "86770"
  },
  {
    "text": "that fall within those\nclasses of algorithms. But before we go into that, I\nwanted to just quickly recap",
    "start": "86770",
    "end": "93310"
  },
  {
    "text": "the end of last lecture. So we saw an example that was\npretty similar to this one,",
    "start": "93310",
    "end": "99280"
  },
  {
    "text": "if not the same. So we know that\ngiven some function, we can grab the theta\nof that function",
    "start": "99280",
    "end": "106079"
  },
  {
    "text": "by focusing on\nthat dominant term. But how do we get\nat that function? So given some piece of code,\nthe idea to get at that function",
    "start": "106080",
    "end": "114450"
  },
  {
    "text": "was to first start by looking\nat the inputs to the function. So we have three inputs in this\nparticular case, L, L1, and L2.",
    "start": "114450",
    "end": "123470"
  },
  {
    "text": "Once we figure out the\ninputs to this function, we go on and look at everything\nwithin the code that depends",
    "start": "123470",
    "end": "130460"
  },
  {
    "text": "on these input parameters. So they could be\ndirect, like a loop that goes over something\nrelated to the input,",
    "start": "130460",
    "end": "137390"
  },
  {
    "text": "or it could be\nindirect, as we're going to see in some\nexamples later today. But we basically look at just\nthe parts of the function that",
    "start": "137390",
    "end": "146270"
  },
  {
    "text": "deal with this input. If we want to be exact,\nwe start by finding out",
    "start": "146270",
    "end": "154450"
  },
  {
    "text": "the exact number of operations\nthat we do within this code. That's something\nthat we did when",
    "start": "154450",
    "end": "159940"
  },
  {
    "text": "we counted the number of\noperations given some function. So we're going to count the\nnumber of operations given",
    "start": "159940",
    "end": "165340"
  },
  {
    "text": "this code in relation\nto L1, L2, and L.",
    "start": "165340",
    "end": "170349"
  },
  {
    "text": "So we've got this relationship\nthat we can come up with that relates the\nnumber of operations run",
    "start": "170350",
    "end": "177340"
  },
  {
    "text": "as a function of L, L1, and L2. So the 1 over here is\nconstant because we just",
    "start": "177340",
    "end": "184900"
  },
  {
    "text": "have an assignment\nhere for some variable. The next term here\nis not constant.",
    "start": "184900",
    "end": "191230"
  },
  {
    "text": "There are five constant\nthings that we're doing. Assigning I to be a value and\nrange, indexing into L at I,",
    "start": "191230",
    "end": "199210"
  },
  {
    "text": "that's two. Indexing into L1\nat I, that's three. Checking the\nequality, that's four.",
    "start": "199210",
    "end": "205299"
  },
  {
    "text": "And then setting inL1\nto be True, that's five. So there's five\noperations, but these are repeated how many times?",
    "start": "205300",
    "end": "212230"
  },
  {
    "text": "Well, they're repeated length\nL1 times because this loop goes through length L1.",
    "start": "212230",
    "end": "219010"
  },
  {
    "text": "So this term here,\nthis for loop here is length L1 times 5\nnumber of operations.",
    "start": "219010",
    "end": "225819"
  },
  {
    "text": "Then the one here is this\nassignment over here. And then this loop\ndown at the bottom",
    "start": "225820",
    "end": "231310"
  },
  {
    "text": "is exactly the same as\nthe loop up at the top, except that now this bottom\nloop repeats length L2 times.",
    "start": "231310",
    "end": "239830"
  },
  {
    "text": "So as L2 gets bigger, this\nloop will take longer to run. That's how we think about that.",
    "start": "239830",
    "end": "246110"
  },
  {
    "text": "And then, lastly, the plus 2\nat the end of that relationship is finding the and of\nthese two variables",
    "start": "246110",
    "end": "251860"
  },
  {
    "text": "and then doing a return. So that leads us to simplify\nit as 5 times length L1",
    "start": "251860",
    "end": "258560"
  },
  {
    "text": "plus 5 times length L2 plus 3. And this becomes the\nfunction that we can then grab the theta.",
    "start": "258560",
    "end": "265010"
  },
  {
    "text": "So now we just use the\nregular rules of theta, law of addition, and\nlaw of multiplication,",
    "start": "265010",
    "end": "270350"
  },
  {
    "text": "if there's anything\nto add or multiply. In this particular case,\nlet's say that L, L1, and L2",
    "start": "270350",
    "end": "275980"
  },
  {
    "text": "are all the same length. And then we can simplify\nthe above function to 10 length L plus 3. And then the theta of that\nbecomes just theta of length L",
    "start": "275980",
    "end": "284629"
  },
  {
    "text": "because we drop the 3, we\ndrop the 10 multiply-- the 10 multiplying L. And then\nwe just keep length L.",
    "start": "284630",
    "end": "294790"
  },
  {
    "text": "So this is how we get at the\ntheta of a particular function. This is one we\nlooked at last time.",
    "start": "294790",
    "end": "300800"
  },
  {
    "text": "But as we look at\nmore functions today, we're going to\nget better at just identifying the parts\nof the code that",
    "start": "300800",
    "end": "307419"
  },
  {
    "text": "just deal with our inputs. This inL1 equals False. This inL2 equals False.",
    "start": "307420",
    "end": "313210"
  },
  {
    "text": "This return, this and, those\nare all constant things that are happening. So we don't need to\nfocus in on those.",
    "start": "313210",
    "end": "318880"
  },
  {
    "text": "We just maybe glance\nat them really quickly to make sure there's\nnothing funky going on that's dependent on\nthe length of our list.",
    "start": "318880",
    "end": "325570"
  },
  {
    "text": "But we can just basically say,\nwell, we've got our inputs. We've got one for loop that\ngoes through the length, another",
    "start": "325570",
    "end": "331570"
  },
  {
    "text": "for loop that goes\nthrough the length. They're in series, so we\nuse the law of addition to say that this function is\ntheta of length L1 plus length",
    "start": "331570",
    "end": "338979"
  },
  {
    "text": "L2. And so then we can quickly\ntell the theta of that function just by looking at the parts\nthat depend on the input.",
    "start": "338980",
    "end": "347039"
  },
  {
    "text": "So that leads us-- so at\nthe end of last lecture, we ended up with\nlooking at these--",
    "start": "347040",
    "end": "352919"
  },
  {
    "text": "sorry, deciding that these\nare the complexity classes that we can categorize a\nlot of our functions in.",
    "start": "352920",
    "end": "360750"
  },
  {
    "text": "So theta of 1 is constant. Theta of log n is logarithmic. Here, n is-- assuming n is\nthe input to my function.",
    "start": "360750",
    "end": "367650"
  },
  {
    "text": "Theta of n is linear. Theta of n log n is log linear.",
    "start": "367650",
    "end": "373320"
  },
  {
    "text": "Theta of n, if n is my input to\nsome constant, like n squared and cubed, runs in\npolynomial time.",
    "start": "373320",
    "end": "380520"
  },
  {
    "text": "And then theta of some constant\nto the n, where n is my input, is going to be exponential,\nlike 2 to the n, 3 to the n.",
    "start": "380520",
    "end": "387090"
  },
  {
    "text": "Those are all considered\nexponential time algorithms. And when we write\nour algorithms, we want to be up in this maybe\ntop four, maybe top five,",
    "start": "387090",
    "end": "397919"
  },
  {
    "text": "though polynomial is\ngoing to grow pretty quickly as our input gets big. So if we can take our code\nand just quickly glance at it",
    "start": "397920",
    "end": "405720"
  },
  {
    "text": "and classify it within\none of these algorithms, that can guide us\ntowards writing--",
    "start": "405720",
    "end": "411520"
  },
  {
    "text": "towards deciding whether\nthe algorithm we wrote was good or bad. If we glance at it and\nsay, hey, this algorithm",
    "start": "411520",
    "end": "417729"
  },
  {
    "text": "is exponential or this function\nthat I wrote is exponential, maybe we want to rethink\nour approach to the problem",
    "start": "417730",
    "end": "423460"
  },
  {
    "text": "and try to get it into one of\nthe upper complexity classes. So what we're going to\ndo the rest of this class",
    "start": "423460",
    "end": "430670"
  },
  {
    "text": "is just go through a bunch\nof these complexity classes, and we're going to\nsee some codes that belong to these\ncomplexity classes",
    "start": "430670",
    "end": "437000"
  },
  {
    "text": "and hopefully give\nyou an idea of what code looks like that fits in\none of these complexity classes.",
    "start": "437000",
    "end": "444730"
  },
  {
    "text": "So the first one we'll look\nat is the constant complexity class. It's pretty simple. It's not really\nvery interesting.",
    "start": "444730",
    "end": "452040"
  },
  {
    "text": "If your code belongs in this\nconstant complexity class, that means that it does not\ndepend on the input at all.",
    "start": "452040",
    "end": "457919"
  },
  {
    "text": "It always runs in constant time. So your code can\nhave loops, or it",
    "start": "457920",
    "end": "463419"
  },
  {
    "text": "can have some sort of\nrecursive structure. But that loop or that\nrecursive structure",
    "start": "463420",
    "end": "469120"
  },
  {
    "text": "doesn't depend on\nthe input at all. So it's fine to have loops. It's just as long as it\ndoesn't depend on the input,",
    "start": "469120",
    "end": "475037"
  },
  {
    "text": "it's considered constant. So there are some\nbuilt-in operations that are constant time.",
    "start": "475037",
    "end": "480860"
  },
  {
    "text": "So if you see any\nof these operations, like indexing into a\nlist, appending to a list, grabbing the value associated\nwith a dictionary key,",
    "start": "480860",
    "end": "489970"
  },
  {
    "text": "those are all constant time. So if you see them\nin your code, you don't need to account\nfor them at all.",
    "start": "489970",
    "end": "495040"
  },
  {
    "text": "But we're going to\nsee in a few slides that there are some operations\non lists and dictionaries",
    "start": "495040",
    "end": "500620"
  },
  {
    "text": "that do add some\nnonconstant complexity. So you can't just\nbrush them off.",
    "start": "500620",
    "end": "506440"
  },
  {
    "text": "All right, let's look at\na couple examples of code. So here's a very simple\nfunction, add x comma y.",
    "start": "506440",
    "end": "512289"
  },
  {
    "text": "So x and y are my inputs. There is no loop or\nnothing recursive,",
    "start": "512289",
    "end": "517299"
  },
  {
    "text": "nothing that takes time here. There's nothing that\nrepeats in this code. So the complexity of\nthis code is theta of 1.",
    "start": "517299",
    "end": "524470"
  },
  {
    "text": "That's it. Here's another example. This is our kilometer\nexample, taking in miles.",
    "start": "524470",
    "end": "530110"
  },
  {
    "text": "All it does is a multiplication. Again, theta of 1. There's nothing interesting\ngoing on here-- no loop,",
    "start": "530110",
    "end": "535330"
  },
  {
    "text": "no recursive. Here's a function that\ndoes have a loop within it.",
    "start": "535330",
    "end": "541320"
  },
  {
    "text": "First thing we look at,\nthough, is my input. What variable is my input here? It's x, right?",
    "start": "541320",
    "end": "547600"
  },
  {
    "text": "So which part of my\ncode here depends on x? Well, there's something\nthat I'm adding here.",
    "start": "547600",
    "end": "556170"
  },
  {
    "text": "So I'm adding x\nonto some number. And I do have a loop, but\ndoes the loop depend on x?",
    "start": "556170",
    "end": "562430"
  },
  {
    "text": "No. It depends on some number that\nis just 100 within my function.",
    "start": "562430",
    "end": "567920"
  },
  {
    "text": "If y equals x here,\nthen this code",
    "start": "567920",
    "end": "573170"
  },
  {
    "text": "wouldn't be constant,\nbecause this loop will go through x times. But here, y is just 100, so this\ncode is theta of 1 complexity.",
    "start": "573170",
    "end": "581779"
  },
  {
    "text": "There's nothing here that\ndepends on x as x grows. All right, so not very\ninteresting examples there.",
    "start": "581780",
    "end": "590180"
  },
  {
    "text": "So let's move on to the next\nsimplest class of functions,",
    "start": "590180",
    "end": "595690"
  },
  {
    "text": "the linear complexity class. And these functions\nwill be usually denoted",
    "start": "595690",
    "end": "602050"
  },
  {
    "text": "by one loop or maybe many\nloops in series or something",
    "start": "602050",
    "end": "607120"
  },
  {
    "text": "like that. But these loops all\ndepend just linearly on n. You could also have a\nrecursive function that repeats",
    "start": "607120",
    "end": "616420"
  },
  {
    "text": "that's also linearly in n. So we're going to see an\nexample of a recursive function in a little bit. But first, we'll start out\nwith just some functions",
    "start": "616420",
    "end": "623320"
  },
  {
    "text": "that loop linearly with n. There are some\nbuilt-in operations",
    "start": "623320",
    "end": "628730"
  },
  {
    "text": "though that are linear in time. So if we ever see these\noperations within our code,",
    "start": "628730",
    "end": "635730"
  },
  {
    "text": "we can't ignore\nthem because they will contribute a theta of\nn complexity to our code.",
    "start": "635730",
    "end": "643220"
  },
  {
    "text": "So we have to account for them\nlike if we have some e in n within some other\nloop, we can't just",
    "start": "643220",
    "end": "649790"
  },
  {
    "text": "say this e in n is constant. We'd have to use the law of\nmultiplication or something like that to account for it.",
    "start": "649790",
    "end": "656610"
  },
  {
    "text": "So checking if an element\nis in a list obviously is linear because\nyou have to look at each element in the list\nto determine that e is in it",
    "start": "656610",
    "end": "664760"
  },
  {
    "text": "or not. Making a copy of your list\nis also linear in time.",
    "start": "664760",
    "end": "670709"
  },
  {
    "text": "Even though we're making a\ncopy of half of our list, so the first half\nof our list, it's",
    "start": "670710",
    "end": "676940"
  },
  {
    "text": "still linear because copying\n0.5 times length L is still",
    "start": "676940",
    "end": "683300"
  },
  {
    "text": "theta of length L.\nThat multiplicative constant on the front\nof our length L is 0.5.",
    "start": "683300",
    "end": "688510"
  },
  {
    "text": "So if we drop it, that's\nstill theta of length L. Checking for equality\nbetween two lists",
    "start": "688510",
    "end": "694365"
  },
  {
    "text": "is also constant\nbecause you have to look at each\nelement in the list, compare them to make sure\nthat they're the same or not.",
    "start": "694365",
    "end": "700420"
  },
  {
    "text": "And deleting an item in a\nlist is also linear in time.",
    "start": "700420",
    "end": "706149"
  },
  {
    "text": "Sorry, this one was\nconstant in time-- sorry, this one\nwas linear in time.",
    "start": "706150",
    "end": "711160"
  },
  {
    "text": "Deletion is also linear in\ntime just because of the way lists are stored in memory. So if you delete an\nitem in the end--",
    "start": "711160",
    "end": "716950"
  },
  {
    "text": "from your list,\nPython will count that as linear time complexity.",
    "start": "716950",
    "end": "723459"
  },
  {
    "text": "So let's look at some examples. First, we'll just start out\nwith just some regular functions with loops, and then we'll\nlook at one recursive function.",
    "start": "723460",
    "end": "730840"
  },
  {
    "text": "So here I've got\nmultiply x by y. It loops through range y.",
    "start": "730840",
    "end": "737960"
  },
  {
    "text": "And it just adds x plus\nx plus x plus x y times.",
    "start": "737960",
    "end": "743310"
  },
  {
    "text": "So I've got two parameters here. So I need to think about the\ncomplexity of this function with regards to both of them.",
    "start": "743310",
    "end": "749590"
  },
  {
    "text": "So the complexity with\nrespect to y is theta of y because I've got one loop\nthat's a function of y.",
    "start": "749590",
    "end": "757410"
  },
  {
    "text": "So this loop will\nrepeat however big y is. So if y increases, the time this\nloop takes will also increase.",
    "start": "757410",
    "end": "764760"
  },
  {
    "text": "So the theta complexity\nof this function is theta of y with respect to y.",
    "start": "764760",
    "end": "770699"
  },
  {
    "text": "But what's the complexity\nof this function with respect to x? I have no looping structure\nhere that's with respect to x.",
    "start": "770700",
    "end": "778480"
  },
  {
    "text": "All I'm doing to x is just\nadding on to some number. So the complexity with respect\nto x is just theta of 1.",
    "start": "778480",
    "end": "784960"
  },
  {
    "text": "So the overall complexity\nof this function is just going to be theta of y. X does not contribute anything\nto this, the runtime of this.",
    "start": "784960",
    "end": "792625"
  },
  {
    "text": " All right, so this\nand the previous sort",
    "start": "792625",
    "end": "798069"
  },
  {
    "text": "of loop function from\nthe constant kind of tells us that we need\nto be careful about what the inputs are.",
    "start": "798070",
    "end": "803620"
  },
  {
    "text": "When we report\nthe complexity, we have to report it with respect\nto the inputs to our function.",
    "start": "803620",
    "end": "809529"
  },
  {
    "text": "We don't always just say theta\nof n or theta of n squared or theta of length\nn, whatever it is.",
    "start": "809530",
    "end": "815170"
  },
  {
    "text": "We have to relate it to\nthe inputs to our function. And if we have more\nthan one input, we have to be careful to account\nfor all of the inputs that",
    "start": "815170",
    "end": "823990"
  },
  {
    "text": "contribute to the complexity. All right, let's look\nat another example.",
    "start": "823990",
    "end": "829060"
  },
  {
    "text": "So here's one where\nyou take in a string s. We loop through\neach character in s.",
    "start": "829060",
    "end": "836740"
  },
  {
    "text": "We cast each character\nto an integer. And then we add\non to some value.",
    "start": "836740",
    "end": "842710"
  },
  {
    "text": "So we're essentially just adding\non all of the characters in s, in the string s.",
    "start": "842710",
    "end": "847873"
  },
  {
    "text": "So this has one loop that loops\nthrough all the elements in s. Now, if s is a\nstring, what's going",
    "start": "847874",
    "end": "854940"
  },
  {
    "text": "to make this program slower? Is it that the string-- so the numerical value\nof the string is bigger?",
    "start": "854940",
    "end": "862940"
  },
  {
    "text": "No, because if I'm looping\nthrough the string 1, 0, 0, 0,",
    "start": "862940",
    "end": "868060"
  },
  {
    "text": "it's going to take the\nsame amount of time as if I'm looping through\nthe string 9, 9, 9, 9. It's the length of the\nstring that matters.",
    "start": "868060",
    "end": "874980"
  },
  {
    "text": "So that's what\nthis loop is doing. It's taking into account\nthe length of the string.",
    "start": "874980",
    "end": "879990"
  },
  {
    "text": "So if my string is\nlonger, then it's going to take longer to run. So the complexity\nof this function",
    "start": "879990",
    "end": "885770"
  },
  {
    "text": "is just theta of\nlength s because that's the length of the\nstring contributes to slowing down my function.",
    "start": "885770",
    "end": "893330"
  },
  {
    "text": "Everything else that\nwe do is constant. So the overall complexity\nis theta of length of s. Or if it's simpler, you\ncan just say theta of n,",
    "start": "893330",
    "end": "900320"
  },
  {
    "text": "but then you have to say where n\nis something, like length of s.",
    "start": "900320",
    "end": "907075"
  },
  {
    "text": "All right, here's\nanother example. This is a factorial program\nthat does it iteratively.",
    "start": "907075",
    "end": "913150"
  },
  {
    "text": "So it's going to use a\nloop to keep adding-- sorry, to keep multiplying\non i to calculate",
    "start": "913150",
    "end": "920770"
  },
  {
    "text": "the factorial of some n. So in this case, my input is n. So now I'm going to\nlook through my function",
    "start": "920770",
    "end": "927050"
  },
  {
    "text": "to see what part of my\nfunction depends on n. So here, n is just a number.",
    "start": "927050",
    "end": "933290"
  },
  {
    "text": "And I'm looping through from\n2 all the way up to n plus 1. So I'm going to loop through\nn minus 1 times overall.",
    "start": "933290",
    "end": "940145"
  },
  {
    "text": " Since I'm looping\nthrough n minus 1 times,",
    "start": "940145",
    "end": "945730"
  },
  {
    "text": "there's nothing\nelse really that's contributing to the complexity. So theta of n minus\n1 is just theta of n.",
    "start": "945730",
    "end": "953320"
  },
  {
    "text": "So the complexity of this\nfunction is just theta of n. ",
    "start": "953320",
    "end": "959700"
  },
  {
    "text": "Everyone OK so far? So very simple\nprograms that just have one loop that just\ndepends on the input linearly.",
    "start": "959700",
    "end": "969029"
  },
  {
    "text": "OK, I will make a little\nnote about the factorial because this is kind\nof something important.",
    "start": "969030",
    "end": "974160"
  },
  {
    "text": "It's going to tell us the\ndifference between theory, which is what this\nclass is mostly about",
    "start": "974160",
    "end": "979529"
  },
  {
    "text": "or this set of lectures,\nand the real world. So I actually ran the\niterative version of factorial",
    "start": "979530",
    "end": "985680"
  },
  {
    "text": "on the computer. And you can see here I've\nmultiplied the input by 2, so 40, 80, 160, 320, and so on.",
    "start": "985680",
    "end": "992560"
  },
  {
    "text": "So as I'm multiplying\nthe input by 2, if I'm expecting this function\nto be linearly related",
    "start": "992560",
    "end": "999180"
  },
  {
    "text": "to the input, I'm\nexpecting that the time that this function\ntakes to run is",
    "start": "999180",
    "end": "1005060"
  },
  {
    "text": "going to be approximately\ntwice as long. If the input increases\nby 2, the time it takes for this program\nto run should just",
    "start": "1005060",
    "end": "1011330"
  },
  {
    "text": "increase by 2 as well. And it does. It does all the\nway up to somewhere",
    "start": "1011330",
    "end": "1017030"
  },
  {
    "text": "between 640 and 1,280.",
    "start": "1017030",
    "end": "1022580"
  },
  {
    "text": "So if we do the math, that's\napproximately times 2 each time minus-- because we're just\ndoing times here.",
    "start": "1022580",
    "end": "1028669"
  },
  {
    "text": "But then, after somewhere\nwithin 640 and 1,280, the time that it takes to\nrun my program no longer",
    "start": "1028670",
    "end": "1036679"
  },
  {
    "text": "follows this linear pattern. In fact, it starts to\ngrow faster than linear. And at a first glance,\nit looks like it",
    "start": "1036680",
    "end": "1044790"
  },
  {
    "text": "grows squared, polynomially. So instead of-- if you\nincrease the input by 2,",
    "start": "1044790",
    "end": "1051330"
  },
  {
    "text": "it looks like the time\nit takes for this program to run increases by\n4 after some point.",
    "start": "1051330",
    "end": "1059380"
  },
  {
    "text": "And that's because\nin the real world, I've got Python\nrunning on the machine.",
    "start": "1059380",
    "end": "1065520"
  },
  {
    "text": "There's only some\nset number of bits that my computer can hold\nwhen it stores numbers.",
    "start": "1065520",
    "end": "1072980"
  },
  {
    "text": "And the factorial of some\nnumber between 640 and 1,280",
    "start": "1072980",
    "end": "1078020"
  },
  {
    "text": "becomes so large that when\nPython and the machine is trying to deal with\nmultiplying these big numbers",
    "start": "1078020",
    "end": "1085880"
  },
  {
    "text": "by these big numbers\naltogether, it's just taking a really long time\nto run because it can't store",
    "start": "1085880",
    "end": "1092420"
  },
  {
    "text": "these big numbers as efficiently\nas it could store these smaller numbers. And so in the real\nworld what ends up",
    "start": "1092420",
    "end": "1098690"
  },
  {
    "text": "happening is after some-- after\nI'm trying to store some really large value and doing the\noperations with some really",
    "start": "1098690",
    "end": "1104900"
  },
  {
    "text": "large values, the\ntime complexity goes down dramatically, right?",
    "start": "1104900",
    "end": "1110330"
  },
  {
    "text": "N to n squared is\na pretty big jump. And so this kind of shows\nthe difference between theory",
    "start": "1110330",
    "end": "1117080"
  },
  {
    "text": "and the real world. So in the real world, we\ncan't store these values as efficiently as they get big.",
    "start": "1117080",
    "end": "1122270"
  },
  {
    "text": "AUDIENCE: So does that mean\nthe, I guess, [INAUDIBLE]?? ",
    "start": "1122270",
    "end": "1133820"
  },
  {
    "text": "ANA BELL: Yeah, so if we use\na machine that had more bits to store values, then\nwe'd be able to be",
    "start": "1133820",
    "end": "1140210"
  },
  {
    "text": "more efficient farther along. Yeah, exactly. ",
    "start": "1140210",
    "end": "1145919"
  },
  {
    "text": "And we could-- I\nguess we could-- if we had a language that was\nmaybe doing some smarter things",
    "start": "1145920",
    "end": "1151040"
  },
  {
    "text": "and storing these big values\nin a much smarter way, that could also have an impact\nin the timing as well.",
    "start": "1151040",
    "end": "1158630"
  },
  {
    "text": "But for the purposes\nof this class, we're just interested in the\ntheoretical happenings here.",
    "start": "1158630",
    "end": "1164810"
  },
  {
    "text": "So as the input\nincreases by x, we expect that the time that\nit takes to run the program",
    "start": "1164810",
    "end": "1170800"
  },
  {
    "text": "will be x times as\nlong because we're looking at values that are\nreally, really big in theory.",
    "start": "1170800",
    "end": "1178519"
  },
  {
    "text": "OK, so let's look\nat another example. So this is a factorial function\nthat does it recursively.",
    "start": "1178520",
    "end": "1185450"
  },
  {
    "text": "We've seen this function before. We just looked at the\niterative version of factorial. Now we're looking at the\nrecursive version of factorial.",
    "start": "1185450",
    "end": "1193050"
  },
  {
    "text": "So what do we have? We have one base case that our\ncode will eventually get down",
    "start": "1193050",
    "end": "1198830"
  },
  {
    "text": "to and a recursive step, which\nis just n times factorial n minus 1.",
    "start": "1198830",
    "end": "1206200"
  },
  {
    "text": "So how do we do the analysis\nof a recursive algorithm? Because in this\nrecursive algorithm,",
    "start": "1206200",
    "end": "1212690"
  },
  {
    "text": "we don't have a loop. In the previous\nexamples, we had a loop that we could\ndefinitively say, hey,",
    "start": "1212690",
    "end": "1219289"
  },
  {
    "text": "this loop will repeat\nthis many times. So clearly, increasing\nn will increase the time",
    "start": "1219290",
    "end": "1225310"
  },
  {
    "text": "it takes for this loop to run. So when we're dealing\nwith recursive functions we think about how many\ntimes the recursive function",
    "start": "1225310",
    "end": "1232780"
  },
  {
    "text": "is going to be called. Because when we call factorial,\nwe have factorial of some 5",
    "start": "1232780",
    "end": "1239919"
  },
  {
    "text": "or whatever it is, and\nthis calls factorial of 4, and this calls factorial of 3.",
    "start": "1239920",
    "end": "1246580"
  },
  {
    "text": "And so we have this\nchain of function calls where we get down\nto the base case.",
    "start": "1246580",
    "end": "1254540"
  },
  {
    "text": "And once we get down\nto the base case, we start to kick off\nthe step that returns",
    "start": "1254540",
    "end": "1261760"
  },
  {
    "text": "the result, one at a time. So when we're talking about\nrecursive functions what",
    "start": "1261760",
    "end": "1267340"
  },
  {
    "text": "we really care about is how\nmany times we call the function.",
    "start": "1267340",
    "end": "1273600"
  },
  {
    "text": "That's our, quote, unquote\n\"loop\" for recursive functions. It's just the function\ncalling itself",
    "start": "1273600",
    "end": "1279630"
  },
  {
    "text": "to ask itself to do the work. And it does the work with a\nslightly changed parameter.",
    "start": "1279630",
    "end": "1286710"
  },
  {
    "text": "So what we need to\ndo is think about, how many times does this\nfunction call itself?",
    "start": "1286710",
    "end": "1292390"
  },
  {
    "text": "And on top of that, is\nthere some sort of overhead that's not constant?",
    "start": "1292390",
    "end": "1297640"
  },
  {
    "text": "In this particular case, when\nwe call factorial recursive, we're going to go\nessentially theta of n times",
    "start": "1297640",
    "end": "1305409"
  },
  {
    "text": "because we start with n then\nwe do n minus 1, n minus 2, n minus 3, all\nthe way down to 0.",
    "start": "1305410",
    "end": "1311260"
  },
  {
    "text": "So effectively, we've\ncalled ourselves about n times, so theta of n. And the overhead for\neach one of those calls",
    "start": "1311260",
    "end": "1318040"
  },
  {
    "text": "is constant because all I'm\ndoing to n is subtracting by 1. And that's a constant thing.",
    "start": "1318040",
    "end": "1323799"
  },
  {
    "text": "N minus 1 is theta of 1. It's just constant. So the overall complexity\nof this is just theta of n,",
    "start": "1323800",
    "end": "1331840"
  },
  {
    "text": "where n is just my input. So what we notice is\nthat the iterative",
    "start": "1331840",
    "end": "1338340"
  },
  {
    "text": "and the recursive\nversions of factorial are both theta of n, which\nmeans that, generally speaking,",
    "start": "1338340",
    "end": "1345820"
  },
  {
    "text": "if we were trying to\ndecide whether to implement factorial recursively\nor iteratively, it won't really\nmatter in the long run",
    "start": "1345820",
    "end": "1352889"
  },
  {
    "text": "because the worst-case\ncomplexity is theta of n. It's the same for both. So it will be your choice\nwhich one to actually use.",
    "start": "1352890",
    "end": "1361059"
  },
  {
    "text": "So then it maybe comes down to\nreadability or other factors. ",
    "start": "1361060",
    "end": "1368920"
  },
  {
    "text": "All right, another example. So this is compound. We saw this last lecture. We actually timed it\nand counted how many--",
    "start": "1368920",
    "end": "1375452"
  },
  {
    "text": "actually, did we count? I don't remember. I don't think we counted\nthe number of operations, or maybe we did. But we definitely timed it.",
    "start": "1375452",
    "end": "1383290"
  },
  {
    "text": "So this function took\nin three parameters. So we can have to be careful\nwhich one of these parameters--",
    "start": "1383290",
    "end": "1390299"
  },
  {
    "text": "or which parameters\nof these actually contribute to my complexity. So this function calculates\nthe amount of money I have",
    "start": "1390300",
    "end": "1399720"
  },
  {
    "text": "if I invest some monthly\namount at some monthly interest",
    "start": "1399720",
    "end": "1406230"
  },
  {
    "text": "over some number of months. So the loop here iterates\nthrough a number of months.",
    "start": "1406230",
    "end": "1411929"
  },
  {
    "text": "And then everything else\nseems to be constant. I have one loop.",
    "start": "1411930",
    "end": "1417720"
  },
  {
    "text": "So the inside of the\nloop is constant. I do have to double check that. But so far, so good.",
    "start": "1417720",
    "end": "1423510"
  },
  {
    "text": "It's not looping anything else. It's not a function\nof anything else. The loop itself, though,\nis theta of n months.",
    "start": "1423510",
    "end": "1430995"
  },
  {
    "text": " So the overall complexity\nof this function",
    "start": "1430995",
    "end": "1436050"
  },
  {
    "text": "is theta of n months. Or we could say theta of n,\nwhere n is equal to n months.",
    "start": "1436050",
    "end": "1442289"
  },
  {
    "text": "None of the other parameters\ncontribute to my complexity. And that's exactly what we\nsaw when we ran the code.",
    "start": "1442290",
    "end": "1448378"
  },
  {
    "text": "We ran it by changing each\none of the parameters, and we saw only n\nmonths contributed to a slowing program.",
    "start": "1448378",
    "end": "1454255"
  },
  {
    "text": " If we really wanted\nto, we could have",
    "start": "1454255",
    "end": "1461340"
  },
  {
    "text": "done this analysis\nin depth, as we've done last lecture,\nto actually count",
    "start": "1461340",
    "end": "1467664"
  },
  {
    "text": "the full number of\noperations, or as we did at the beginning\nof this lecture. So total equals 0 is theta of 1.",
    "start": "1467665",
    "end": "1473909"
  },
  {
    "text": "The loop is theta of n months\nmultiplied by for operations.",
    "start": "1473910",
    "end": "1478980"
  },
  {
    "text": "So i grabbing a value in\nrange, taking multiplication,",
    "start": "1478980",
    "end": "1484720"
  },
  {
    "text": "addition, and then\nsaving that into total, that's four, multiplied\nby theta of n,",
    "start": "1484720",
    "end": "1490870"
  },
  {
    "text": "where n is n months, plus\ntheta of 1 to do the return. So that ends up being\ntheta of 1 plus 4 n",
    "start": "1490870",
    "end": "1496440"
  },
  {
    "text": "plus 1, which just\nsimplifies to theta of n, where n is n months. Yeah.",
    "start": "1496440",
    "end": "1502770"
  },
  {
    "text": "AUDIENCE: Why did that\n[INAUDIBLE] to 1-- well, theta 1 [INAUDIBLE]?",
    "start": "1502770",
    "end": "1508991"
  },
  {
    "start": "1508991",
    "end": "1514960"
  },
  {
    "text": "ANA BELL: Yeah, so we're\njust looking at operations. We're doing calculations\nwith interest and invest",
    "start": "1514960",
    "end": "1520390"
  },
  {
    "text": "and multiplying it\nwith total, right? But the fact that\ninterest is bigger--",
    "start": "1520390",
    "end": "1526120"
  },
  {
    "text": "like, if the interest is $1\nor if the interest is $1,000, is this going to make that\nline of code much slower?",
    "start": "1526120",
    "end": "1534970"
  },
  {
    "text": "No, because all we're\ndoing is a multiplication between two numbers. So that's why the\ninside is theta 1.",
    "start": "1534970",
    "end": "1541120"
  },
  {
    "text": "But having a loop where we\nrepeat this over and over again is going to slow\nthe program down.",
    "start": "1541120",
    "end": "1546410"
  },
  {
    "text": "Yeah.  OK, how about this\nFibonacci function?",
    "start": "1546410",
    "end": "1554210"
  },
  {
    "text": "So this is an iterative\nversion of Fibonacci. I don't know if we've\nseen this before.",
    "start": "1554210",
    "end": "1559880"
  },
  {
    "text": "Again, we could do sort of a\nrough, quick analysis, where we just briefly glance\nat every single line",
    "start": "1559880",
    "end": "1566500"
  },
  {
    "text": "and ask ourselves whether\nit's contributing theta of 1 or something worse to\nour total analysis--",
    "start": "1566500",
    "end": "1574330"
  },
  {
    "text": "total runtime analysis. So we've got this\nfirst part here, which is just\nconstant, state of 1.",
    "start": "1574330",
    "end": "1581899"
  },
  {
    "text": "Nothing here is loopy. There's no recursive\ngoing on, nothing that depends on the input\nin a nonconstant way.",
    "start": "1581900",
    "end": "1590260"
  },
  {
    "text": "In the else, we've got\nthis constant, again, just assigning two parameters. We've got a loop.",
    "start": "1590260",
    "end": "1595790"
  },
  {
    "text": "So now this loop is\ngoing to be nonconstant. The stuff inside the\nloop is constant though.",
    "start": "1595790",
    "end": "1604270"
  },
  {
    "text": "So the loop itself\ndepends on n, my input. So that's going\nto be theta of n.",
    "start": "1604270",
    "end": "1609870"
  },
  {
    "text": "But that theta of n is\nmultiplied by theta of 1. The stuff inside the\nloop is just constant.",
    "start": "1609870",
    "end": "1615520"
  },
  {
    "text": "So that's theta of n times theta\nof 1, which is just theta of n. And then the return, of\ncourse, is theta of 1.",
    "start": "1615520",
    "end": "1621690"
  },
  {
    "text": "So we could do a\ncalculation like this, or you could just\nquickly scan and say, hey, I've just got a loop that\nlooks-- that depends on n.",
    "start": "1621690",
    "end": "1629040"
  },
  {
    "text": "And that's theta of n. So the overall\ncomplexity of this, if we want it to be\ndetailed, is this, theta of 1",
    "start": "1629040",
    "end": "1634919"
  },
  {
    "text": "plus theta of 1 plus theta\nof n times theta of 1 plus theta of 1. But overall, that just\ngives us theta of n",
    "start": "1634920",
    "end": "1641760"
  },
  {
    "text": "because that loop is the only\nthing that depends on my input.",
    "start": "1641760",
    "end": "1646890"
  },
  {
    "text": "Everyone all right so far? OK. Perfect. So now let's move on to the\nsecond easiest complexity",
    "start": "1646890",
    "end": "1655700"
  },
  {
    "text": "to identify. That's the polynomial\ncomplexity. So polynomial\ncomplexity generally",
    "start": "1655700",
    "end": "1661610"
  },
  {
    "text": "deals with functions\nthat have nested loops. So if we have two nested\nloops that linearly",
    "start": "1661610",
    "end": "1668300"
  },
  {
    "text": "depend on my input,\nthat's going to be a function that's n squared. If I've got three\nnested loops that all",
    "start": "1668300",
    "end": "1674809"
  },
  {
    "text": "depend on my input linearly,\nthat's going to be n cubed. So let's see some examples.",
    "start": "1674810",
    "end": "1682300"
  },
  {
    "text": "So here I have a really\nsimple nested loop situation. I've got a function called g.",
    "start": "1682300",
    "end": "1689990"
  },
  {
    "text": "And it's going to\ntake in an input n. So I'm going to look for\neverything that depends on n.",
    "start": "1689990",
    "end": "1697370"
  },
  {
    "text": "Well, I've got a for\nloop here that's going to iterate n times. So that's theta of n.",
    "start": "1697370",
    "end": "1702390"
  },
  {
    "text": "And I've got an inner for loop. So for each thing in\nmy outer for loop, I'm going to do the inner\nthing n times as well.",
    "start": "1702390",
    "end": "1712600"
  },
  {
    "text": "And then the stuff inside my\ninner for loop is constant. So that's theta of n.",
    "start": "1712600",
    "end": "1717940"
  },
  {
    "text": "And the stuff outside\nof my loops are-- sorry, the stuff inside my inner\nfor loop is theta of 1.",
    "start": "1717940",
    "end": "1723309"
  },
  {
    "text": "And the stuff outside of any\nof for loops are theta of 1 as well. So they contribute nothing\nto this complexity.",
    "start": "1723310",
    "end": "1729260"
  },
  {
    "text": "So the only thing that I need\nto account for is my outer loop, which is theta of n.",
    "start": "1729260",
    "end": "1734890"
  },
  {
    "text": "And law of multiplication\nsays my inner loop is going to be multiplied--",
    "start": "1734890",
    "end": "1740830"
  },
  {
    "text": "multiply its complexity to\nmy outer loop's complexity. All right, so the overall\ncomplexity of this function",
    "start": "1740830",
    "end": "1746720"
  },
  {
    "text": "is theta of n squared\nbecause the number of times that I'm going to\ndo this operation is",
    "start": "1746720",
    "end": "1751730"
  },
  {
    "text": "going to be n squared times. ",
    "start": "1751730",
    "end": "1757929"
  },
  {
    "text": "Perfect. All right, so now let's look\nat some examples with lists. We haven't seen those yet.",
    "start": "1757930",
    "end": "1765159"
  },
  {
    "text": "So now we have to\nthink about the input. In this case, it's\ngoing to be two lists.",
    "start": "1765160",
    "end": "1770400"
  },
  {
    "text": "And when we're dealing with\nlists, one of the things that-- or the most common thing\nwe're interested in is what",
    "start": "1770400",
    "end": "1775980"
  },
  {
    "text": "happens to the behavior\nof the function as the lists get bigger?",
    "start": "1775980",
    "end": "1782010"
  },
  {
    "text": "As we saw in last\nlecture, the size of the elements within the\nlist typically don't matter.",
    "start": "1782010",
    "end": "1788799"
  },
  {
    "text": "But the fact that I have more\nelements to do stuff with does matter.",
    "start": "1788800",
    "end": "1794160"
  },
  {
    "text": "So if my list now has\ntwice as many elements, this program or most programs\nwill probably be twice as slow.",
    "start": "1794160",
    "end": "1802140"
  },
  {
    "text": "So here's a function\ncalled is_subset. It takes in two\nlists, L1 and L2.",
    "start": "1802140",
    "end": "1808200"
  },
  {
    "text": "I've added two little\nexamples up here to help us figure out\nwhat this function does.",
    "start": "1808200",
    "end": "1813250"
  },
  {
    "text": "So it's going to tell us whether\nthe elements of L1 are in L2.",
    "start": "1813250",
    "end": "1819270"
  },
  {
    "text": "So in the first example\nhere, elements in L1 are 3 and 5 and 2.",
    "start": "1819270",
    "end": "1824520"
  },
  {
    "text": "And L2 does have the\n3 and the 5 and the 2, but it also has other stuff.",
    "start": "1824520",
    "end": "1829980"
  },
  {
    "text": "That's totally fine. All the elements\nin L1 are in L2. So this function\nwill return True",
    "start": "1829980",
    "end": "1835350"
  },
  {
    "text": "for those examples,\nthose in L1 and L2. And then here's an example\nwhere it will return False.",
    "start": "1835350",
    "end": "1841960"
  },
  {
    "text": "So the elements of\nL1 are 3 and 5 and 2. And L2 is missing the 3.",
    "start": "1841960",
    "end": "1847860"
  },
  {
    "text": "So then that one\nwill return False. The elements of L1\nare not all in L2.",
    "start": "1847860",
    "end": "1853470"
  },
  {
    "text": "So it's not a subset. All right, so what's\nthis function doing? Well, it's iterating through\nall the elements in L1.",
    "start": "1853470",
    "end": "1860920"
  },
  {
    "text": "So it's going to first look at\nthe 3, then the 5, then the 2. It's going to look\nthrough each element in L2",
    "start": "1860920",
    "end": "1866920"
  },
  {
    "text": "for every one of\nthose L1 elements. So it's going to look at the\n3 and the 2, the 3 and the 3,",
    "start": "1866920",
    "end": "1872230"
  },
  {
    "text": "the 3 and the 5,\nthe 3 and the 9. Then it's going to look at the\n5 and the 2, the 5 and the 3, 5 and 5, 5 and 9.",
    "start": "1872230",
    "end": "1878530"
  },
  {
    "text": "It's going to keep doing that. And it's going to keep track\nof this Boolean called matched.",
    "start": "1878530",
    "end": "1888200"
  },
  {
    "text": "And it's going to-- as long as it finds this\nelement e1 within my L2",
    "start": "1888200",
    "end": "1895700"
  },
  {
    "text": "it's going to save\nmatched to be True. And it's going to keep doing\nthis until it does not find--",
    "start": "1895700",
    "end": "1905000"
  },
  {
    "text": "sorry, until it keeps\nfinding matches-- as long-- sorry, until\nit finds a match. As soon as it finds\na match, it breaks",
    "start": "1905000",
    "end": "1911660"
  },
  {
    "text": "because there's no\nneed for it to keep looking at the remaining\nelements of L2. It already found\none that matches.",
    "start": "1911660",
    "end": "1918140"
  },
  {
    "text": "So this code could\nactually be rewritten by saying the inverse.",
    "start": "1918140",
    "end": "1924410"
  },
  {
    "text": "If e1 is not equal to L2, we can\njust immediately return False",
    "start": "1924410",
    "end": "1930560"
  },
  {
    "text": "because we've already\nfound an element from L1 that's not in L2. So we could have rewritten this\ncode in many different ways,",
    "start": "1930560",
    "end": "1937550"
  },
  {
    "text": "but the ultimate analysis\nwill be the same. So let's look at the\nanalysis for this function.",
    "start": "1937550",
    "end": "1944950"
  },
  {
    "text": "Well, we have two inputs. So we have to be careful\nabout both of these inputs.",
    "start": "1944950",
    "end": "1950730"
  },
  {
    "text": "Which parts of this function\ndepend on L1 and L2? Well, we've got\nan outer for loop.",
    "start": "1950730",
    "end": "1957780"
  },
  {
    "text": "So what happens to the\ncomplexity with regards",
    "start": "1957780",
    "end": "1963330"
  },
  {
    "text": "to this loop? Well, if I have more elements\nin L1, then this code-- this loop will go\nthrough more times.",
    "start": "1963330",
    "end": "1970330"
  },
  {
    "text": "So this loop will be\nexecuted length L1 times.",
    "start": "1970330",
    "end": "1975960"
  },
  {
    "text": "So the theta for\nthis outer loop is going to be theta of length L1. But there is an inner loop.",
    "start": "1975960",
    "end": "1982429"
  },
  {
    "text": "So for each element\nin my outer loop, I'm also going to do\neverything in this inner loop.",
    "start": "1982430",
    "end": "1988550"
  },
  {
    "text": "So in the worst case, I need to\nlook through each element in L2 to find a match.",
    "start": "1988550",
    "end": "1993920"
  },
  {
    "text": "So the inner loop will execute\nat most length L2 times, again, in the worst case.",
    "start": "1993920",
    "end": "2000150"
  },
  {
    "text": "So the inner loop will\nbe theta of length L2. So the overall complexity,\nsince I've got this nested loop",
    "start": "2000150",
    "end": "2007070"
  },
  {
    "text": "situation, law of\nmultiplication says that it's going to be the theta\nof my outer loop multiplied",
    "start": "2007070",
    "end": "2012710"
  },
  {
    "text": "by the theta of my inner loop. So theta of length\nL1 times length L2. ",
    "start": "2012710",
    "end": "2018679"
  },
  {
    "text": "OK, everyone-- yeah, question. AUDIENCE: It means that if you\nhave a linear if statement,",
    "start": "2018680",
    "end": "2027934"
  },
  {
    "text": "it would be an e? ANA BELL: Yes. So like here, in this if?",
    "start": "2027934",
    "end": "2036110"
  },
  {
    "text": "Yes, if the if had\nsomething like using an in,",
    "start": "2036110",
    "end": "2041330"
  },
  {
    "text": "where in is linear, then\nyes, there would be another--",
    "start": "2041330",
    "end": "2046940"
  },
  {
    "text": "it would be like\nthere was another loop at the third level. Yeah, so then it\nwould be n cubed.",
    "start": "2046940",
    "end": "2052158"
  },
  {
    "text": "Still a polynomial but n cubed. ",
    "start": "2052159",
    "end": "2059129"
  },
  {
    "text": "So if L1 and L2 are the same\nlength, which sometimes we put on to simplify the complexity--",
    "start": "2059130",
    "end": "2066379"
  },
  {
    "text": "we'll put this condition on\nto simplify the complexity, then we say that it's\ntheta of length L1 squared.",
    "start": "2066380",
    "end": "2072710"
  },
  {
    "text": "It's still polynomial\ncomplexity.  OK, let's look--\nsorry, question.",
    "start": "2072710",
    "end": "2080349"
  },
  {
    "text": "AUDIENCE: If they weren't\nthe same length, [INAUDIBLE]?? ANA BELL: Yes, if they\nwere not the same length, you have to denote\nit in the terms",
    "start": "2080350",
    "end": "2086190"
  },
  {
    "text": "of the both lengths, yeah. OK, let's look at\nanother example.",
    "start": "2086190",
    "end": "2091570"
  },
  {
    "text": "So here's a function that grabs\nthe intersect of two lists.",
    "start": "2091570",
    "end": "2097260"
  },
  {
    "text": "So again, I've got a\nlittle example up here, example L1 and L2. So the intersect are going to\nbe the common elements within L1",
    "start": "2097260",
    "end": "2105640"
  },
  {
    "text": "and L2. But I'm only going to-- I'm not going to do duplicates. So I'm just going to\nkeep the unique numbers.",
    "start": "2105640",
    "end": "2111310"
  },
  {
    "text": "So here I've got L1 and L2\ncontain 3, 5, 2 and 2, 3, 5, 9. So notice the 2 and the\n3 and the 5 both occur--",
    "start": "2111310",
    "end": "2119849"
  },
  {
    "text": "all occur in both lists. So the intersect of these\ntwo lists is 2, 3, and 5.",
    "start": "2119850",
    "end": "2127200"
  },
  {
    "text": "This example here\non the right side is going to be a\nlittle bit trickier.",
    "start": "2127200",
    "end": "2133230"
  },
  {
    "text": "It's kind of a unique edge\ncase, but the code still works for that edge case. It's if I have L1 that has\nduplicates of some number",
    "start": "2133230",
    "end": "2140099"
  },
  {
    "text": "and L2 that has duplicates\nof that same number, the returned list\nof the intersect",
    "start": "2140100",
    "end": "2145770"
  },
  {
    "text": "should just be 7,\nthat one number once. ",
    "start": "2145770",
    "end": "2152220"
  },
  {
    "text": "So how does the\ncode achieve this? So you notice a nice\nlittle structure here.",
    "start": "2152220",
    "end": "2157780"
  },
  {
    "text": "I've got two blocks\nof code, right? I've got something here, which\nis going to actually help",
    "start": "2157780",
    "end": "2163990"
  },
  {
    "text": "us build this list of\nall of the elements that are common within the\ntwo lists and then something",
    "start": "2163990",
    "end": "2170410"
  },
  {
    "text": "down here, where I'm\ngoing to cull that list to keep only the unique values.",
    "start": "2170410",
    "end": "2176110"
  },
  {
    "text": "So up here, this has a\nnested loop situation, just like in the\nprevious example.",
    "start": "2176110",
    "end": "2182380"
  },
  {
    "text": "I have to look at all of\nthe pairs from L1 and L2 to figure out which are common.",
    "start": "2182380",
    "end": "2190240"
  },
  {
    "text": "So this for loop\nover L1 is going to go through the\n3, the 5, and the 2.",
    "start": "2190240",
    "end": "2195819"
  },
  {
    "text": "And then the inner\nfor loop through L2 is going to basically match-- take a look at, does\nthe 3 match the 2?",
    "start": "2195820",
    "end": "2202330"
  },
  {
    "text": "Does the 3 match the 3? Does the 3 match the 5? Does the 3 match the 9? And then the 5 match the 2,\n5 match the 3, and so on.",
    "start": "2202330",
    "end": "2208960"
  },
  {
    "text": "So that's what those\nloops are doing. And as soon as we\nfind a match, we're going to append it to\nthis temporary list.",
    "start": "2208960",
    "end": "2216300"
  },
  {
    "text": "And it's OK if we have\nduplicates in this list. So if you look at the example\non the right-hand side",
    "start": "2216300",
    "end": "2222750"
  },
  {
    "text": "there with the 7\nduplicated many times, that's actually going to create\na temporary list that's going",
    "start": "2222750",
    "end": "2232020"
  },
  {
    "text": "to contain nine times that 7. So it's going to look\nat the 7 with the 7,",
    "start": "2232020",
    "end": "2237368"
  },
  {
    "text": "and it's going to say,\nhey, that's a match. Let me add it. Then it's going to look at\nthe 7 with the middle 7 in L2,",
    "start": "2237368",
    "end": "2243505"
  },
  {
    "text": "and it's going to\nsay, let me add that. And then it's going\nto look at the first 7 in L1 with the last\n7 in L2, and it's",
    "start": "2243505",
    "end": "2248730"
  },
  {
    "text": "going to say, let me add that. And then it's going to do\nthat same thing all over again when it looks at the\nmiddle 7 in L1 along",
    "start": "2248730",
    "end": "2255750"
  },
  {
    "text": "with each element in L2. So it's going to add\nthe 7 three more times. And then again when\nit looks at the last 7",
    "start": "2255750",
    "end": "2262380"
  },
  {
    "text": "in L1 along with each 7 in L2. So that's totally fine. That's just what\nthis code is doing.",
    "start": "2262380",
    "end": "2268350"
  },
  {
    "text": "And then the bottom\npart down here is going to take this\ntemporary list that we created,",
    "start": "2268350",
    "end": "2276640"
  },
  {
    "text": "and it's going to just keep\nthe unique values within it. So it's going to keep that--\ncreate that unique list.",
    "start": "2276640",
    "end": "2282700"
  },
  {
    "text": "And it's going to\nsay, if I haven't seen this value in unique, add it. And if I have,\ndon't do anything.",
    "start": "2282700",
    "end": "2289549"
  },
  {
    "text": "So in the end,\nthis code down here is going to take that big\nlist here and just keep",
    "start": "2289550",
    "end": "2295405"
  },
  {
    "text": "the unique values.  All right, so let's do\nthe analysis for this.",
    "start": "2295405",
    "end": "2301220"
  },
  {
    "text": "So I've got my outer\nfor loop and my inner for loop up in the top\nhalf of my code here.",
    "start": "2301220",
    "end": "2307150"
  },
  {
    "text": "That generates my temporary--\nlong temporary list, potentially long temporary list.",
    "start": "2307150",
    "end": "2312370"
  },
  {
    "text": "So that we already know\nfrom the previous example is theta of length L1\ntimes theta of length L2.",
    "start": "2312370",
    "end": "2317859"
  },
  {
    "text": "Pretty simple. Now, what about this\nbottom half here? Because we have to be careful\nabout this bottom half.",
    "start": "2317860",
    "end": "2325360"
  },
  {
    "text": "This one could also\ncontribute to the complexity. It's looping through a temporary\nvariable, a list variable",
    "start": "2325360",
    "end": "2334240"
  },
  {
    "text": "that we created. But this list is created by\ndoing something to L1 and L2,",
    "start": "2334240",
    "end": "2343210"
  },
  {
    "text": "by looking at\nelements in L1 and L2. So it's actually indirectly\nrelated to L1 and L2.",
    "start": "2343210",
    "end": "2351100"
  },
  {
    "text": "So we can't just cast it aside\nbecause it could potentially contribute to the\ncomplexity of my program.",
    "start": "2351100",
    "end": "2359350"
  },
  {
    "text": "And in the worst case, I\ncreate this temporary variable that looks like this.",
    "start": "2359350",
    "end": "2366010"
  },
  {
    "text": "So in the worst possible case,\nmy temporary variables length is going to be length\nL1 times length L2.",
    "start": "2366010",
    "end": "2373960"
  },
  {
    "text": "I basically added that character\nevery time I compared a value.",
    "start": "2373960",
    "end": "2379109"
  },
  {
    "text": "So this list at worst case is\nlength L1 times length L2 long.",
    "start": "2379110",
    "end": "2384730"
  },
  {
    "text": "So if I'm iterating\nthrough that list, then the complexity\nof that second half",
    "start": "2384730",
    "end": "2390619"
  },
  {
    "text": "is also theta of length L1 times\nlength L2 in the worst case, right?",
    "start": "2390620",
    "end": "2395735"
  },
  {
    "start": "2395735",
    "end": "2400900"
  },
  {
    "text": "So the overall complexity\nof the function is theta of length\nL1 times length L2 up here plus theta of length\nL1 times length L2 down here.",
    "start": "2400900",
    "end": "2410930"
  },
  {
    "text": "So in this particular\ncase, the fact that I'm iterating over\ntemp didn't actually increase my complexity,\nbut you can imagine code",
    "start": "2410930",
    "end": "2419020"
  },
  {
    "text": "where doing something funky\nlike this where you indirectly",
    "start": "2419020",
    "end": "2425380"
  },
  {
    "text": "have some loop over something\nrelated to the input could affect the complexity. So in this case, the\noverall complexity",
    "start": "2425380",
    "end": "2431680"
  },
  {
    "text": "is still theta of length\nL1 times length L2. Questions about this one?",
    "start": "2431680",
    "end": "2437170"
  },
  {
    "start": "2437170",
    "end": "2445069"
  },
  {
    "text": "OK. Yeah? ",
    "start": "2445070",
    "end": "2454109"
  },
  {
    "text": "AUDIENCE: Why is it not-- again, because [INAUDIBLE]\nyou're appending a certain",
    "start": "2454110",
    "end": "2459750"
  },
  {
    "text": "number of them, how\ndo you know that's-- like [INAUDIBLE] vary\nfor each problem. ANA BELL: It varies for\neach problem, right?",
    "start": "2459750",
    "end": "2465780"
  },
  {
    "text": "But in the analysis,\nwe're interested in the worst-case scenario,\nlike the asymptotic behavior",
    "start": "2465780",
    "end": "2473430"
  },
  {
    "text": "of the worst case. And in the worst case,\nwe've added this number,",
    "start": "2473430",
    "end": "2478440"
  },
  {
    "text": "length L1 times L2 times. Most of the time, of course,\nit's not going to be this bad.",
    "start": "2478440",
    "end": "2485040"
  },
  {
    "text": "It's just in this one particular\ncase that it is this bad. AUDIENCE: Oh, I see\nwhat you're adding, OK.",
    "start": "2485040",
    "end": "2490711"
  },
  {
    "text": " ANA BELL: OK, let's\nlook at one more function that's polynomial.",
    "start": "2490711",
    "end": "2496460"
  },
  {
    "text": "So here's diameter. We saw this last lecture. Basically, if we have a bunch\nof points in a 2D plane,",
    "start": "2496460",
    "end": "2502270"
  },
  {
    "text": "this function tells\nus the distance-- sorry, the maximum distance\nbetween any two points.",
    "start": "2502270",
    "end": "2508480"
  },
  {
    "text": "So I drew that picture\nin the 2D plane. So this one is going to\nhave nested loops again.",
    "start": "2508480",
    "end": "2517630"
  },
  {
    "text": "So the outer loop iterates\nthrough length L times.",
    "start": "2517630",
    "end": "2523279"
  },
  {
    "text": "So remember, our L is just a\nlist of tuples representing these xy coordinates.",
    "start": "2523280",
    "end": "2528589"
  },
  {
    "text": "So the outer loop easily\ngoes through length L times. But what does the\ninner loop go through?",
    "start": "2528590",
    "end": "2534400"
  },
  {
    "text": "The inner loop is actually\nstarting at i not 0. If it started at\n0, the inner loop",
    "start": "2534400",
    "end": "2542050"
  },
  {
    "text": "would be clearly theta of\nlength L. But it's not. It starts at i.",
    "start": "2542050",
    "end": "2548010"
  },
  {
    "text": "On average, though, how many\ntimes does that inner loop go through? Well, the first time it goes\nthrough that inner loop,",
    "start": "2548010",
    "end": "2555440"
  },
  {
    "text": "it's going to look at\nlength L minus 1 elements.",
    "start": "2555440",
    "end": "2561770"
  },
  {
    "text": "Next time it's going to look\nat length L minus 2 elements. Next time it's going to look\nat length L minus 3 elements,",
    "start": "2561770",
    "end": "2570230"
  },
  {
    "text": "until we get to the end,\nwhere it's going to look at 1 and then 0 elements.",
    "start": "2570230",
    "end": "2577160"
  },
  {
    "text": "So if we think\nabout how many times that inner loop\nactually iterates, it's going to be, what is\nit, like length L minus 1",
    "start": "2577160",
    "end": "2586280"
  },
  {
    "text": "multiplied by length L over 2. Is that the function, I think,\nto add all these together?",
    "start": "2586280",
    "end": "2591920"
  },
  {
    "text": "Something like that,\nwhich is basically still something that's a\nfunction of length L. Like,",
    "start": "2591920",
    "end": "2598790"
  },
  {
    "text": "we can simplify it to\nbe 0.5 length L. So it's",
    "start": "2598790",
    "end": "2604010"
  },
  {
    "text": "still a function of length\nL because the coefficient in the front of that\nlength L is 0.5.",
    "start": "2604010",
    "end": "2610339"
  },
  {
    "text": "So the overall complexity\nof the inner loop is still theta of length L.\nAll right, everything else",
    "start": "2610340",
    "end": "2617700"
  },
  {
    "text": "within this code is constant. So the overall complexity is\njust theta of length L squared.",
    "start": "2617700",
    "end": "2624664"
  },
  {
    "start": "2624665",
    "end": "2630920"
  },
  {
    "text": "Yeah. Sorry? Where did the 1/2 come-- oh,\nit's the formula to add--",
    "start": "2630920",
    "end": "2636604"
  },
  {
    "text": "like, if you add 1 plus 2\nplus 3 plus 4 plus all the way up to n, what's the\nformula to do that?",
    "start": "2636604",
    "end": "2641810"
  },
  {
    "text": "I think it's like n times n plus\n1 over 2, something like that. So this is not\nexactly half, but it's",
    "start": "2641810",
    "end": "2647670"
  },
  {
    "text": "something on the order\nplus, I don't know, something, whatever\nthis calculates to.",
    "start": "2647670",
    "end": "2655050"
  },
  {
    "text": "But in effect, it's something\nthat's smaller than length L, but it's still a\nfunction of length L.",
    "start": "2655050",
    "end": "2661530"
  },
  {
    "text": "And so that front coefficient\nright before length L just goes away.",
    "start": "2661530",
    "end": "2667740"
  },
  {
    "text": "Even if it was 10, we\nwould still cast it away. In this case, it's\n0.5 or whatever it is.",
    "start": "2667740",
    "end": "2675660"
  },
  {
    "text": "So it's still less\nthan 1, but we still cast it away because we're\ninterested in the theta of this.",
    "start": "2675660",
    "end": "2680910"
  },
  {
    "text": "Yeah. AUDIENCE: [INAUDIBLE]\nnested for loops-- with two",
    "start": "2680910",
    "end": "2686020"
  },
  {
    "text": "for loops, that length\n[INAUDIBLE] an n squared [INAUDIBLE]?",
    "start": "2686020",
    "end": "2691309"
  },
  {
    "text": " ANA BELL: I mean, the\ninner loop could just not",
    "start": "2691310",
    "end": "2697330"
  },
  {
    "text": "depend on the input at all. ",
    "start": "2697330",
    "end": "2702630"
  },
  {
    "text": "Like here it's n squared\nbecause both of the loops depend linearly on the input. But if the inner loop--",
    "start": "2702630",
    "end": "2709050"
  },
  {
    "text": "like if the outer loop went\nthrough a range length L squared, then the\noverall complexity would be length L\ncubed in this case",
    "start": "2709050",
    "end": "2716400"
  },
  {
    "text": "because it's length L\nsquared times length L. Or if one of the loops doesn't\ndepend on the input at all,",
    "start": "2716400",
    "end": "2722850"
  },
  {
    "text": "then it contributes\nnothing constant-- nothing linear,\nso it's constant.",
    "start": "2722850",
    "end": "2728070"
  },
  {
    "start": "2728070",
    "end": "2733090"
  },
  {
    "text": "OK, let's have you think\nabout this question for a bit. ",
    "start": "2733090",
    "end": "2740430"
  },
  {
    "text": "So think about the input. Think about parts\nof the function that depend on the input. And then what is the complexity?",
    "start": "2740430",
    "end": "2748510"
  },
  {
    "text": "OK what's the outer\nloop theta of? ",
    "start": "2748510",
    "end": "2756329"
  },
  {
    "text": "Yeah. AUDIENCE: [INAUDIBLE] ANA BELL: Yes, nums is a\nlist, so the outer loop",
    "start": "2756330",
    "end": "2762070"
  },
  {
    "text": "is theta of length of nums. Correct. Good. What's the inner loop theta of?",
    "start": "2762070",
    "end": "2767395"
  },
  {
    "text": " Yeah. Is that what you were\ngoing to say, theta of 1?",
    "start": "2767395",
    "end": "2773060"
  },
  {
    "text": "Exactly. It's the length of digits,\nbut digits is not my input. Nums is my input.",
    "start": "2773060",
    "end": "2778350"
  },
  {
    "text": "So the inner loop will always\njust iterate through 10 times. So in the eyes of the\ninputs to the function,",
    "start": "2778350",
    "end": "2784010"
  },
  {
    "text": "that's just constant. So the input is nums. The outer loop is theta of nums.",
    "start": "2784010",
    "end": "2789282"
  },
  {
    "text": "The inner loop is theta of 1. So the overall complexity\nis theta of length of nums. Perfect.",
    "start": "2789282",
    "end": "2794930"
  },
  {
    "text": "How about this one? What are my inputs?",
    "start": "2794930",
    "end": "2800640"
  },
  {
    "text": "Do any loops depend\non these inputs?  What's the outer\nloop complexity?",
    "start": "2800640",
    "end": "2807290"
  },
  {
    "text": " Yeah. AUDIENCE: Length of L1.",
    "start": "2807290",
    "end": "2812840"
  },
  {
    "text": "ANA BELL: Yeah, theta\nof length L1, exactly. What's the inner\nloop complexity?",
    "start": "2812840",
    "end": "2818130"
  },
  {
    "text": " AUDIENCE: Theta length of L2.",
    "start": "2818130",
    "end": "2823202"
  },
  {
    "text": "ANA BELL: Theta of\nlength of L2, perfect. And is there anything else that\ncontributes to the complexity here?",
    "start": "2823202",
    "end": "2830710"
  },
  {
    "text": "What's that? AUDIENCE: The if statement. ANA BELL: The if statement. Yes, what about it is making you\nquestion that the complexity is",
    "start": "2830710",
    "end": "2837560"
  },
  {
    "text": "not constant? AUDIENCE: So in iterates\nthrough the length of L3. ANA BELL: Exactly,\nyes, very nice.",
    "start": "2837560",
    "end": "2843780"
  },
  {
    "text": "So in iterates through\nthe length of L3. Looking for an element in L3,\ne1 in L3, is not constant.",
    "start": "2843780",
    "end": "2851880"
  },
  {
    "text": "You have to look through\nthe whole length of L3 to figure out whether\nit's there or not. So this inner bit\nhere is not constant.",
    "start": "2851880",
    "end": "2861160"
  },
  {
    "text": "It's theta of length L3. In fact, it's two\ntimes length L3.",
    "start": "2861160",
    "end": "2866660"
  },
  {
    "text": "So the overall complexity\nof this function is theta of length L1 times\ntheta of length L2 times",
    "start": "2866660",
    "end": "2871898"
  },
  {
    "text": "theta of length L3.  OK. ",
    "start": "2871898",
    "end": "2878580"
  },
  {
    "text": "Cool. Let's look at the\nexponential complexity. So this is a complexity that\ngrows really, really quickly.",
    "start": "2878580",
    "end": "2884860"
  },
  {
    "text": "We never want the\nalgorithms that we write to land within this class. Unfortunately, there are just\nsome problems in real life",
    "start": "2884860",
    "end": "2892920"
  },
  {
    "text": "that we have to compute\nthat are just naturally part of this complexity class.",
    "start": "2892920",
    "end": "2898080"
  },
  {
    "text": "There are some\ntechniques to deal with making these algorithms\na little bit faster. But inherently, there are\njust exponential algorithms",
    "start": "2898080",
    "end": "2906000"
  },
  {
    "text": "that we just can't do any\nbetter than exponential in solving these problems.",
    "start": "2906000",
    "end": "2912609"
  },
  {
    "text": "All right, so let's\nlook at Fibonacci again.",
    "start": "2912610",
    "end": "2918140"
  },
  {
    "text": "We looked at Fibonacci a few\nslides ago, iterative version. And the iterative\nversion was theta of n.",
    "start": "2918140",
    "end": "2925730"
  },
  {
    "text": "But if we look at the\nrecursive version of Fibonacci, it's not theta of n at all.",
    "start": "2925730",
    "end": "2930990"
  },
  {
    "text": "In fact, as you can see, it's in\nthis exponential set of slides, the recursive\nversion of Fibonacci",
    "start": "2930990",
    "end": "2937040"
  },
  {
    "text": "is actually exponential. So let's recall what\nthis code is doing.",
    "start": "2937040",
    "end": "2943049"
  },
  {
    "text": "So there's two base cases,\nFibonacci of 0 and 1. And then the recursive step\nis Fibonacci of n minus 1",
    "start": "2943050",
    "end": "2950000"
  },
  {
    "text": "plus Fibonacci of n minus 2. So for every level\nthat we go down,",
    "start": "2950000",
    "end": "2955670"
  },
  {
    "text": "there's going to be\ntimes two more paths that we need to explore\nto grab the values from.",
    "start": "2955670",
    "end": "2963980"
  },
  {
    "text": "So for the very first n, we've\ngot just one value to grab.",
    "start": "2963980",
    "end": "2969350"
  },
  {
    "text": "For the next n, we've got\ntimes two that value to grab. The next level-- for the next n,\nwe've got two times more values",
    "start": "2969350",
    "end": "2977190"
  },
  {
    "text": "to grab. And so on. So the fact that there\nare two recursive calls",
    "start": "2977190",
    "end": "2983310"
  },
  {
    "text": "in this recursive step leads\nus to this little inverted tree kind of structure.",
    "start": "2983310",
    "end": "2989490"
  },
  {
    "text": "And we even drew this when we\nlooked at how many function calls are being run.",
    "start": "2989490",
    "end": "2995820"
  },
  {
    "text": "Remember, when\nwe're figuring out the complexity with\na recursive function,",
    "start": "2995820",
    "end": "3001225"
  },
  {
    "text": "we need to figure out how\nmany of these functions-- how many recursive calls\nare we actually doing.",
    "start": "3001225",
    "end": "3006380"
  },
  {
    "text": "So because of this tree\nstructure, every time we add a new level,\nwe basically have two",
    "start": "3006380",
    "end": "3011930"
  },
  {
    "text": "completely separate\npaths to explore further. And those two paths have\ntheir own two paths and so on.",
    "start": "3011930",
    "end": "3018630"
  },
  {
    "text": "So this leads us to this tree\nstructure, which is actually going to lead to the total\nnumber of recursive calls",
    "start": "3018630",
    "end": "3027050"
  },
  {
    "text": "to be exponential, so\ntheta of 2 to the n. Now, if we looked at the actual\nrecursive call's tree-- right,",
    "start": "3027050",
    "end": "3035650"
  },
  {
    "text": "we looked at this, and it looked\nsomething like this a bunch of lectures ago--",
    "start": "3035650",
    "end": "3041260"
  },
  {
    "text": "you might notice that the\ntree actually thins out a little bit to the right. It's not a full tree with the\nleaves nicely all the way down.",
    "start": "3041260",
    "end": "3050090"
  },
  {
    "text": "And that's because, well,\nthe left path calculates Fib 5 but the right path\ncalculates Fib 4, so n minus 1",
    "start": "3050090",
    "end": "3058210"
  },
  {
    "text": "of the left path. But that's fine. It's not that we\nare actually going",
    "start": "3058210",
    "end": "3064210"
  },
  {
    "text": "to speed up anything by some\nsort of order of magnitude.",
    "start": "3064210",
    "end": "3071500"
  },
  {
    "text": "Just because the tree\nthins out a little bit on the right-hand\nside is not going to speed up the overall\ncomplexity of this function.",
    "start": "3071500",
    "end": "3078440"
  },
  {
    "text": "It's going to be theta of 2 to\nthe n minus some theta that's less than 2 to the n.",
    "start": "3078440",
    "end": "3083830"
  },
  {
    "text": "So that subtraction is not\ngoing to really decrease the overall complexity\nof our function.",
    "start": "3083830",
    "end": "3090290"
  },
  {
    "text": "So the order of this\nis still exponential. All right, here's another\nexample of an exponential code.",
    "start": "3090290",
    "end": "3098630"
  },
  {
    "text": "So this is a function\nthat is going to generate all the subsets of a list.",
    "start": "3098630",
    "end": "3106049"
  },
  {
    "text": "So again, I've added\na little example here to help us understand\nwhat it's doing. So here I've got three numbers,\na list with three numbers, 1,",
    "start": "3106050",
    "end": "3113930"
  },
  {
    "text": "2, and 3. And to generate\nsubsets, what this means is that I'm going to\ncreate a new list of all",
    "start": "3113930",
    "end": "3121460"
  },
  {
    "text": "of the possible\ncombinations of numbers within my original list, of\nall the possible lengths.",
    "start": "3121460",
    "end": "3129619"
  },
  {
    "text": "So first, one\nsubset of this list could be just the empty list. So that's not taking any of\nmy original numbers at all.",
    "start": "3129620",
    "end": "3137490"
  },
  {
    "text": "The next one is a list with\njust one of the numbers in it. So either the 1\nor the 2 or the 3.",
    "start": "3137490",
    "end": "3144080"
  },
  {
    "text": " A next subset of my\nlist could be taking",
    "start": "3144080",
    "end": "3150050"
  },
  {
    "text": "just two of the elements. So one and 2, 1 and 3\nand 2 and 3 and then lastly I can just\ngrab all the elements.",
    "start": "3150050",
    "end": "3156490"
  },
  {
    "text": "So 1 and the 2 and the 3. I don't care about the order. I just care that I have all of\nthese different combinations",
    "start": "3156490",
    "end": "3162150"
  },
  {
    "text": "of all of the different\nlengths in my final list. So does everyone understand\nthe goal of this function?",
    "start": "3162150",
    "end": "3169690"
  },
  {
    "text": "OK, so how do we achieve this? Well, you might\nnot be surprised. We're going to do\nit recursively.",
    "start": "3169690",
    "end": "3176080"
  },
  {
    "text": "That's really the\nonly reasonable way to write this code.",
    "start": "3176080",
    "end": "3181420"
  },
  {
    "text": "So I'm going to go\nthrough this slide just explaining what each line does.",
    "start": "3181420",
    "end": "3186585"
  },
  {
    "text": "But on the next slide, I'll\nhave a little animation that shows step by step how the\nfunction creates this subset",
    "start": "3186585",
    "end": "3193060"
  },
  {
    "text": "list. So first thing, it's\nrecursive, so I've got my base case up there. If I have a list of\nlength 0, then the subset",
    "start": "3193060",
    "end": "3202030"
  },
  {
    "text": "of an empty list is just\ngoing to be this list with the empty thing inside it.",
    "start": "3202030",
    "end": "3208390"
  },
  {
    "text": "So if I have no\nelements, there's only one subset,\nthat's the empty list. Then if I have more than\none element inside it,",
    "start": "3208390",
    "end": "3217020"
  },
  {
    "text": "I'm going to do the\nsame idea that we saw when we worked with lists\nback in the recursion lectures.",
    "start": "3217020",
    "end": "3224119"
  },
  {
    "text": "I'm going to extract\none of my elements. I'm going to work on\nthe remaining list.",
    "start": "3224120",
    "end": "3229640"
  },
  {
    "text": "And then I'm going\nto do something by taking that\nelement and tacking it back on to the result.\nSo in this particular case,",
    "start": "3229640",
    "end": "3237420"
  },
  {
    "text": "the thing that I'm extracting\nis the last element in my list. So if my list is 1, 2,\nand 3, at a step here,",
    "start": "3237420",
    "end": "3245540"
  },
  {
    "text": "I'm going to extract the 3\nand make it into its own list. So that's what\nthat step is doing.",
    "start": "3245540",
    "end": "3251240"
  },
  {
    "text": "It extracts the last\nelement in the list. Then I make a function call to\ngenerate subsets on everything",
    "start": "3251240",
    "end": "3260579"
  },
  {
    "text": "except for that last element. So if I'm-- so I say, hey,\nfunction that I'm currently",
    "start": "3260580",
    "end": "3267630"
  },
  {
    "text": "writing right now, if you can\ngenerate for me the subset",
    "start": "3267630",
    "end": "3272730"
  },
  {
    "text": "of all the elements, the\nsubset for this list, then you're going to come up\nwith something that looks like",
    "start": "3272730",
    "end": "3278940"
  },
  {
    "text": "this. It's going to be the\nempty list, the 1, the 2, and the 1 and the 2 together.",
    "start": "3278940",
    "end": "3285390"
  },
  {
    "text": "So the subset of\nthis list is going to be this group\nof elements here.",
    "start": "3285390",
    "end": "3291200"
  },
  {
    "text": "So that's what this\nis going to do. So this is, again, us trusting\nthat the function we write will generate something\nthat looks like this.",
    "start": "3291200",
    "end": "3299839"
  },
  {
    "text": "If we've got to this\npoint, then smaller is going to be a list\nthat looks like this.",
    "start": "3299840",
    "end": "3306120"
  },
  {
    "text": "So the next part of\nthe code is going to take that little extra thing\nthat I had saved previously,",
    "start": "3306120",
    "end": "3314490"
  },
  {
    "text": "and it's going to tack on\nthat 3 to every element within this list.",
    "start": "3314490",
    "end": "3319560"
  },
  {
    "text": "So then I'm going to basically\nsay, I'm going to take this 3 and make a list with the\n3 in it, a list with the 1",
    "start": "3319560",
    "end": "3327050"
  },
  {
    "text": "and the 3 in it, a list\nwith the 2 and the 3 in it, and a list with the 1 and\nthe 2 and the 3 in it.",
    "start": "3327050",
    "end": "3333680"
  },
  {
    "text": "So I've just taken\nthat 3 and added it to everything that resulted\nfrom this line of code here,",
    "start": "3333680",
    "end": "3340190"
  },
  {
    "text": "from my function calling itself. And then all it does is\nreturns smaller plus new.",
    "start": "3340190",
    "end": "3348520"
  },
  {
    "text": "So if I add these\ntwo together, this is going to generate for\nme my final subset that I",
    "start": "3348520",
    "end": "3353650"
  },
  {
    "text": "was interested in. I've got the empty thing. I've got the 1, the 2,\nand the 3 by itself. I've got the 1, 2; the 1,\n3; and the 2, 3 by itself;",
    "start": "3353650",
    "end": "3361090"
  },
  {
    "text": "and then the 1, 2, 3 altogether. So that's the big idea here. So let's just go\nthrough it step by step,",
    "start": "3361090",
    "end": "3369180"
  },
  {
    "text": "recursively calling ourselves. So this is me finding out the-- kicking off my\nfunction call, saying,",
    "start": "3369180",
    "end": "3375520"
  },
  {
    "text": "hey, generate the subsets\nfor the list 1, 2, 3. I'm going to keep\nthe extra aside.",
    "start": "3375520",
    "end": "3381450"
  },
  {
    "text": "I need to make another\nfunction call because I'm not at my base case. So I'm going to call\ngen_subsets on 1, 2.",
    "start": "3381450",
    "end": "3389130"
  },
  {
    "text": "This is also not my base case. So I'm going to take my\nlast element, put it aside, and I'm going to call\ngen_subsets on just the 1.",
    "start": "3389130",
    "end": "3398000"
  },
  {
    "text": "Still not the base case. I'm going to take this\nextra, put it aside, and I'm going to call\ngen_subsets on the empty list.",
    "start": "3398000",
    "end": "3403910"
  },
  {
    "text": "And this is where I\nreach my base case. So far, nothing has\nbeen returned at all. No work has been done.",
    "start": "3403910",
    "end": "3410900"
  },
  {
    "text": "At my base case, Python will\nsay, I know what this is. It's going to be the list with\njust the empty thing in it.",
    "start": "3410900",
    "end": "3417740"
  },
  {
    "text": "All right, cool? Next, that gets returned, so\nthis function call goes away. So now what is it going to do?",
    "start": "3417740",
    "end": "3424170"
  },
  {
    "text": "Well, it's going to take\nthat extra I set aside, take the smaller list\nthat I just returned,",
    "start": "3424170",
    "end": "3430730"
  },
  {
    "text": "and basically double\nthat smaller list. So this is my smaller list.",
    "start": "3430730",
    "end": "3435920"
  },
  {
    "text": "And then I'm going\nto double that by saying I'm going to put\nthis 1 to the end of everything in my smaller list.",
    "start": "3435920",
    "end": "3443140"
  },
  {
    "text": "Maybe this is not so\napparent at this step, but let's go one more\nstep and see what happens. So now this function\nalso terminates.",
    "start": "3443140",
    "end": "3450070"
  },
  {
    "text": "It returns this empty\nlist and 1 in it and says, all right, here, with\nthis function call,",
    "start": "3450070",
    "end": "3456690"
  },
  {
    "text": "I had saved the 2\nseparately and said, I'm going to now tack on this\n2 to the end of everything",
    "start": "3456690",
    "end": "3463740"
  },
  {
    "text": "that I had just returned. So this is smaller. This is smaller over here.",
    "start": "3463740",
    "end": "3469150"
  },
  {
    "text": "And all I'm going to do\nis take this extra thing and tack it on to the end of\neverything that was in smaller.",
    "start": "3469150",
    "end": "3475210"
  },
  {
    "text": "So I'm going to tack it on to\nthe end of this empty list, so it just gives me this 2, and\ntack it on to the end of this 1",
    "start": "3475210",
    "end": "3480590"
  },
  {
    "text": "so it gives me the 1, 2.  So I've basically doubled\nmy list at this stage.",
    "start": "3480590",
    "end": "3488500"
  },
  {
    "text": "One more step,\nthis gets returned. And now this is my\noriginal function call.",
    "start": "3488500",
    "end": "3494290"
  },
  {
    "text": "The thing that I had\nextracted was the 3. So now we're basically\nat this step here. I extracted the 3.",
    "start": "3494290",
    "end": "3500859"
  },
  {
    "text": "The function just below it\nreturned this smaller, right?",
    "start": "3500860",
    "end": "3507010"
  },
  {
    "text": "So that means that\nthis 3 is going to get appended to the end of\neverything that was in smaller.",
    "start": "3507010",
    "end": "3513172"
  },
  {
    "text": "So it's going to be appended\nto the end of this empty list to give me just the\n3, to the end of the 1 to give me the 1 and the\n3, to the end of the 2",
    "start": "3513173",
    "end": "3519970"
  },
  {
    "text": "to give me the 2 and the 3,\nand to the end of the 1, 2 to give me the 1, 2, 3.",
    "start": "3519970",
    "end": "3525009"
  },
  {
    "text": "Now, this is the final answer. So I basically keep\nwhat I had returned",
    "start": "3525010",
    "end": "3530020"
  },
  {
    "text": "from the previous function\ncall and concatenate that with the thing that\nI had just created,",
    "start": "3530020",
    "end": "3535570"
  },
  {
    "text": "where I tacked on my 3. And this is my final answer. It's just out of order\nto what we intuitively",
    "start": "3535570",
    "end": "3542590"
  },
  {
    "text": "would have written by hand. But it hits on all of the\nelements that I wanted to have anyway.",
    "start": "3542590",
    "end": "3548650"
  },
  {
    "text": "So I've got the empty list,\neverything with just one element in it, everything\nwith the two elements in it,",
    "start": "3548650",
    "end": "3553750"
  },
  {
    "text": "and everything with all\nthree elements in it. So let's look at the\ncomplexity analysis of this.",
    "start": "3553750",
    "end": "3559570"
  },
  {
    "text": "We've got two things\ngoing on here. One is how many\nof these function calls are actually being done,\nlike with the inverse tree",
    "start": "3559570",
    "end": "3568270"
  },
  {
    "text": "structure. How many of those\nfunction calls do we need to do to\nget to the end of-- to our base case?",
    "start": "3568270",
    "end": "3574750"
  },
  {
    "text": "And on top of that-- sorry, that will tell us\nhow many actual elements",
    "start": "3574750",
    "end": "3580240"
  },
  {
    "text": "in the list we will have. And on top of that, we have\nactually a time complexity",
    "start": "3580240",
    "end": "3585250"
  },
  {
    "text": "that's not constant. That's to copy our list. So copying a list\nis not constant",
    "start": "3585250",
    "end": "3592757"
  },
  {
    "text": "because it takes some time to\ntake all the elements in a list and make a copy of them. So if we think about\nthe time it takes",
    "start": "3592758",
    "end": "3599530"
  },
  {
    "text": "to make our list at each step,\nhow many of these sub elements we're creating, well,\nat the very base case,",
    "start": "3599530",
    "end": "3608599"
  },
  {
    "text": "we have one element; at\nthe case just above it, we had two elements; at\nthe case just above that,",
    "start": "3608600",
    "end": "3614950"
  },
  {
    "text": "we had four elements; at\nthe case just above that, we had eight elements. So at each step, the\nnumber of sublists",
    "start": "3614950",
    "end": "3623510"
  },
  {
    "text": "that we were generating\nwas basically twice as much as the previous step.",
    "start": "3623510",
    "end": "3629049"
  },
  {
    "text": "So the overall number of subsets\nwas on the order of 2 to the n.",
    "start": "3629050",
    "end": "3634100"
  },
  {
    "text": "But there was also\na time complexity to make a copy of the\nlist within each one",
    "start": "3634100",
    "end": "3639109"
  },
  {
    "text": "of those subsets. So we're multiplying\nthe complexity it takes to make all\nthose function calls",
    "start": "3639110",
    "end": "3644390"
  },
  {
    "text": "and generate all those\nsubsets by the time it takes to make a copy of the list. So the overall\ncomplexity is actually",
    "start": "3644390",
    "end": "3651020"
  },
  {
    "text": "going to be theta of\nn times 2 to the n because it's a\nlittle bit harder--",
    "start": "3651020",
    "end": "3657430"
  },
  {
    "text": "it's a little bit worse than\nexponential, just purely for the fact that we're\ncopying the list at each step.",
    "start": "3657430",
    "end": "3663000"
  },
  {
    "text": " All right, so let's move on\nto logarithmic complexity.",
    "start": "3663000",
    "end": "3671190"
  },
  {
    "text": "This one's going to be a little\nbit tricky because right off the bat, we're not\ngoing to be able to see a direct relationship\nbetween the input",
    "start": "3671190",
    "end": "3679230"
  },
  {
    "text": "and what loop we actually have. So here I've got a\nfunction called digit_add.",
    "start": "3679230",
    "end": "3684990"
  },
  {
    "text": "It's going to take in\na number, so like 1234,",
    "start": "3684990",
    "end": "3690240"
  },
  {
    "text": "something like\nthat, number 1,234. The code casts it to a string.",
    "start": "3690240",
    "end": "3695740"
  },
  {
    "text": "So it takes in a\npure numerical value. It makes a string out\nof it and then iterates",
    "start": "3695740",
    "end": "3703619"
  },
  {
    "text": "through the string. So the function here, in\nterms of time complexity,",
    "start": "3703620",
    "end": "3711570"
  },
  {
    "text": "is theta of length\nS. Here, we're iterating through the string\nbackward basically, 4, then 3,",
    "start": "3711570",
    "end": "3717330"
  },
  {
    "text": "then 2, then 1. But what's my input? It's n. It's not s.",
    "start": "3717330",
    "end": "3723380"
  },
  {
    "text": "So the time complexity\nof this function, while it's linear in s,\ns is not linear in n,",
    "start": "3723380",
    "end": "3731750"
  },
  {
    "text": "because when my number is 83,\nmy loop only iterates twice. If my number has four\ndigits in it, 4,271,",
    "start": "3731750",
    "end": "3739400"
  },
  {
    "text": "my loop iterates four times. So this relationship\nis not linear.",
    "start": "3739400",
    "end": "3747089"
  },
  {
    "text": "So what is it exactly? Well, let's think about what\nthat loop is actually doing.",
    "start": "3747090",
    "end": "3752910"
  },
  {
    "text": "If I have a number\nwith four digits in it, something in the thousands, when\nI iterate through the number",
    "start": "3752910",
    "end": "3764190"
  },
  {
    "text": "sort of backward, this\nnumber as a string, I'm basically taking that 1 and\nkeeping it in my running sum.",
    "start": "3764190",
    "end": "3772970"
  },
  {
    "text": "Then it's kind of like I\ndivided that number by 10. I grabbed the remainder when\nI divided that number by 10.",
    "start": "3772970",
    "end": "3780980"
  },
  {
    "text": "And that's the thing\nthat I just added. The whole number left\nover when I divided by 10",
    "start": "3780980",
    "end": "3786680"
  },
  {
    "text": "is this bit here. So now think of it\nlike taking this-- to take this last element here,\nit's like I take this number",
    "start": "3786680",
    "end": "3794380"
  },
  {
    "text": "and divide by 10 again. I grab the remainder\nwhen I divide by 10 and add it to my running total.",
    "start": "3794380",
    "end": "3800050"
  },
  {
    "text": "And the whole number I'm\nleft over when dividing by 10 is just this. One more time, I take the 2.",
    "start": "3800050",
    "end": "3806200"
  },
  {
    "text": "The remainder when\nI divided that 42 is 2, and the whole number\nI was left over with is 4.",
    "start": "3806200",
    "end": "3812650"
  },
  {
    "text": "And then lastly I can do\nthat last thing again. So what's the relationship\nbetween the magnitude of n,",
    "start": "3812650",
    "end": "3821060"
  },
  {
    "text": "this 4,000-something, or this\n80-something to how many times I have to loop through to\nget every digit in my number?",
    "start": "3821060",
    "end": "3828620"
  },
  {
    "text": "Well, the trick here is\nto think about taking my magnitude, my n--\nthe magnitude of n",
    "start": "3828620",
    "end": "3834830"
  },
  {
    "text": "and dividing it by\n10 a bunch of times. How many times do I divide\nby 10 to basically grab",
    "start": "3834830",
    "end": "3843030"
  },
  {
    "text": "every single element,\nevery single digit in my n? Well, length s times, right?",
    "start": "3843030",
    "end": "3849569"
  },
  {
    "text": "That's kind of like taking\neach character one at a time. To take each character\none at a time,",
    "start": "3849570",
    "end": "3855970"
  },
  {
    "text": "that's like dividing by\n10 to grab the remainder. And then I've done\nthat length s times. That's what this loop is doing.",
    "start": "3855970",
    "end": "3863120"
  },
  {
    "text": "So the relationship\nbetween the magnitude of n and how many times I\ngo through the loop",
    "start": "3863120",
    "end": "3869480"
  },
  {
    "text": "is this, n divided by 10 some\nnumber of times, length s times, is equal to 1.",
    "start": "3869480",
    "end": "3875420"
  },
  {
    "text": "That means I've finished going\nthrough this entire element-- this entire number, all the\ndigits within the number.",
    "start": "3875420",
    "end": "3881390"
  },
  {
    "text": "So the relationship\nbetween n and length s is length s is\nequal to log of n. ",
    "start": "3881390",
    "end": "3889950"
  },
  {
    "text": "And now that I have\nthis nice relationship, well, I said that this function\nwas linear in length s.",
    "start": "3889950",
    "end": "3895680"
  },
  {
    "text": "So if it's theta\nof length s, it's going to be theta of log n. I just mapped\nthose two together.",
    "start": "3895680",
    "end": "3901200"
  },
  {
    "text": " Questions about this?",
    "start": "3901200",
    "end": "3906620"
  },
  {
    "text": "This trick can work in\nmany different ways. What's important to realize\nis that here there's",
    "start": "3906620",
    "end": "3911820"
  },
  {
    "text": "kind an indirect\nrelationship between what's actually happening in\nthe code and my input.",
    "start": "3911820",
    "end": "3917190"
  },
  {
    "text": "It's not as clear cut. But there is some\nrelationship, which is not constant and not linear.",
    "start": "3917190",
    "end": "3923680"
  },
  {
    "start": "3923680",
    "end": "3930930"
  },
  {
    "text": "OK. So the overall complexity\nof this function is theta of log n, where I don't\nactually care about the base",
    "start": "3930930",
    "end": "3937300"
  },
  {
    "text": "when I report the\ncomplexity in terms of log. In this case, it's base 10.",
    "start": "3937300",
    "end": "3942460"
  },
  {
    "text": "But if it was base 2, it\nwould be the same, log n. ",
    "start": "3942460",
    "end": "3949180"
  },
  {
    "text": "OK, so we saw a bunch\nof examples, just one",
    "start": "3949180",
    "end": "3955000"
  },
  {
    "text": "of logarithmic complexity. But we're going to see\nnext that searching for an element in the list will\nalso be logarithmic complexity.",
    "start": "3955000",
    "end": "3964990"
  },
  {
    "text": "Before we get to that,\nI'd like to just make-- just put this slide\nup to remind you that there are several\nfunctions, built-in functions,",
    "start": "3964990",
    "end": "3973270"
  },
  {
    "text": "with lists and dictionaries\nthat aren't constant. So like the example you guys did\nwhere we used the in operator,",
    "start": "3973270",
    "end": "3982000"
  },
  {
    "text": "we had to be careful-- if you ever see these operations\nbeing done in the code, don't just push them aside.",
    "start": "3982000",
    "end": "3988130"
  },
  {
    "text": "You have to account for them\nwithin the complexity analysis. ",
    "start": "3988130",
    "end": "3994490"
  },
  {
    "text": "OK, so next we're going to look\nat some searching algorithms. These algorithms, we're going to\nsee a bunch of different codes",
    "start": "3994490",
    "end": "4002710"
  },
  {
    "text": "that implement searching. These will-- again, they'll\nbe very similar to the ones",
    "start": "4002710",
    "end": "4007779"
  },
  {
    "text": "that we actually\ntimed last lecture. So we're going to\nlook at searching for an element in a list.",
    "start": "4007780",
    "end": "4014230"
  },
  {
    "text": "We're going to look at a bunch\nof different implementations of the plain brute force\nsearching element in a list.",
    "start": "4014230",
    "end": "4022970"
  },
  {
    "text": "Whether it's sorted\nor unsorted, as long as you just brute force your way\nfrom the beginning of the list to the end of the\nlist, you'll be",
    "start": "4022970",
    "end": "4029500"
  },
  {
    "text": "able to find the element\nyou're looking for or say that it's not there. So we're going to look at\nsome linear search functions.",
    "start": "4029500",
    "end": "4036160"
  },
  {
    "text": "And then we're going to look\nat the bisection search-- a couple bisection\nsearch implementations.",
    "start": "4036160",
    "end": "4041500"
  },
  {
    "text": "And that's where we\ndivide the list in half and discard one of the halves. And those implementations\nthough will",
    "start": "4041500",
    "end": "4049930"
  },
  {
    "text": "need our list to be sorted. So the brute forcing\nour way doesn't really matter whether\nit's sorted or not,",
    "start": "4049930",
    "end": "4055849"
  },
  {
    "text": "but the bisection search\nonly gives the correct answer if the list is\nsorted to begin with.",
    "start": "4055850",
    "end": "4061740"
  },
  {
    "text": "All right, so first, let's\nlook at linear search on an unsorted list. This is code that is going to\nsearch for element e in list L.",
    "start": "4061740",
    "end": "4070950"
  },
  {
    "text": "It loops through the\nlength of the list and keeps this\nBoolean flag in mind.",
    "start": "4070950",
    "end": "4076620"
  },
  {
    "text": "If it finds the element\nwe're looking for, it just sets the flag. And at the end of iterating\nthrough the whole list,",
    "start": "4076620",
    "end": "4082500"
  },
  {
    "text": "it tells us whether\nit found it or not. So the worst-case\nscenario analysis",
    "start": "4082500",
    "end": "4089118"
  },
  {
    "text": "says that we have to look\nthrough the entire list to determine the\nelement is there or not. So the theta of this\nparticular function",
    "start": "4089118",
    "end": "4097699"
  },
  {
    "text": "is theta of length L.\nThere's only one loop. It depends on the length of\nL, nothing really special",
    "start": "4097700",
    "end": "4104028"
  },
  {
    "text": "about this function. Now, you might\nnotice that there's something inefficient\nabout this function",
    "start": "4104029",
    "end": "4110028"
  },
  {
    "text": "and that once it finds\nan element, let's say at the beginning\nof the list, this function actually\njust sets the flag",
    "start": "4110029",
    "end": "4116810"
  },
  {
    "text": "and keeps going through\nto the end of the list. So we can actually do a little\nbit of a speed-up with this bit",
    "start": "4116810",
    "end": "4122839"
  },
  {
    "text": "here and say that,\nhey, if we find it, just return True right away.",
    "start": "4122840",
    "end": "4128640"
  },
  {
    "text": "No need to keep going\nto the end of the list. So what's the analysis\nfor this code?",
    "start": "4128640",
    "end": "4135390"
  },
  {
    "text": "Well, again, we're doing\nworst-case analysis. So in the worst case,\nthe element is not there.",
    "start": "4135390",
    "end": "4141339"
  },
  {
    "text": "So we still have to search\nthrough every single element in the list, beginning to end,\nto determine it's not there.",
    "start": "4141340",
    "end": "4147960"
  },
  {
    "text": "So the worst-case theta\nanalysis for this function is that we still have to go\nthrough to the end of the list",
    "start": "4147960",
    "end": "4153839"
  },
  {
    "text": "to determine it's not there. So it's still going\nto be-- sorry, it's still going to be theta\nof n-- sorry, theta of length",
    "start": "4153840",
    "end": "4160080"
  },
  {
    "text": "L time.  So this is on an unsorted list.",
    "start": "4160080",
    "end": "4167220"
  },
  {
    "text": "But what if we look\nat a sorted list? OK, so we can do a little\nsomething clever in our code.",
    "start": "4167220",
    "end": "4175439"
  },
  {
    "text": "If the list is\nsorted, we can say we're going to start-- let's\nsay it's increasing sorted.",
    "start": "4175439",
    "end": "4182839"
  },
  {
    "text": "We can start at the\nbeginning of the list, look through each element. If we find it, return True.",
    "start": "4182840",
    "end": "4189470"
  },
  {
    "text": "If we reach an element\nthat's bigger than the one we're looking for, if\nthe list is sorted,",
    "start": "4189470",
    "end": "4195180"
  },
  {
    "text": "so all the remaining\nelements in the list are also bigger than the one\nwe're looking for, right? And then we can just\nreturn False right away.",
    "start": "4195180",
    "end": "4203659"
  },
  {
    "text": "Well, we think\nwe're pretty clever, but the worst-case analysis\nsays that the element is not",
    "start": "4203660",
    "end": "4209810"
  },
  {
    "text": "even in the list at all. So we still have to go through\nand look to the end of the list",
    "start": "4209810",
    "end": "4214970"
  },
  {
    "text": "to figure out that that\nelement is not there. So we still have to touch\neach element in the list to determine it's not there.",
    "start": "4214970",
    "end": "4221389"
  },
  {
    "text": "So the worst-case theta\ncomplexity analysis still says that this\nis theta of length L",
    "start": "4221390",
    "end": "4227255"
  },
  {
    "text": "because everything\nelse is constant. ",
    "start": "4227255",
    "end": "4233560"
  },
  {
    "text": "So now let's look at bisection. So as far as we can tell, just\ndoing a linear, brute force",
    "start": "4233560",
    "end": "4239170"
  },
  {
    "text": "search way is not going\nto give us anything better than theta of n.",
    "start": "4239170",
    "end": "4244449"
  },
  {
    "text": "But when we looked at the\ntimings in last lecture, we saw that this binary\nsearch or bisection",
    "start": "4244450",
    "end": "4249639"
  },
  {
    "text": "search on an element in a list\nwas actually much, much faster. It grew at a faster rate than\nlinear but not quite constant.",
    "start": "4249640",
    "end": "4259099"
  },
  {
    "text": "So let's remember\nhow that code looked. So we basically had a list\nwith a bunch of elements in it.",
    "start": "4259100",
    "end": "4265330"
  },
  {
    "text": "We looked at the element\nat the middle of the list. And we said, are you the\none we're looking for?",
    "start": "4265330",
    "end": "4270730"
  },
  {
    "text": "In the worst case, it's not. So then we have to ask,\nare you bigger or smaller",
    "start": "4270730",
    "end": "4276070"
  },
  {
    "text": "than the one we're looking for? If it's bigger,\nthen we know we have to look in the lower\nhalf of the list.",
    "start": "4276070",
    "end": "4281830"
  },
  {
    "text": "If it's smaller, we look in\nthe upper half of the list. And now that we either look in\nthe lower or the upper half,",
    "start": "4281830",
    "end": "4287950"
  },
  {
    "text": "we notice we have the exact\nsame problem to solve. So this should ring\na little bell that",
    "start": "4287950",
    "end": "4293720"
  },
  {
    "text": "says we should use recursion. Now we have the same\nproblem to solve, an element e in a\nslightly smaller list.",
    "start": "4293720",
    "end": "4301160"
  },
  {
    "text": "Is it in that list? So that's exactly what\nwe're going to implement.",
    "start": "4301160",
    "end": "4307469"
  },
  {
    "text": "So visually speaking, this\nis what we're going to do. We're going to have an original\nlist with n elements in it.",
    "start": "4307470",
    "end": "4315080"
  },
  {
    "text": "We're going to look\nat the halfway point. Worst case, it's not the\none we're looking for. So we're going to decide on\none of the sides to next search",
    "start": "4315080",
    "end": "4321920"
  },
  {
    "text": "through. Now we have n over 2\nelements to look through. Again, it's not\nthere, worst case.",
    "start": "4321920",
    "end": "4327020"
  },
  {
    "text": "So we have to decide on\nwhich half to look through. Now we have n over 4\nelements to look through. We keep doing this.",
    "start": "4327020",
    "end": "4332750"
  },
  {
    "text": "We keep of halving\nmore and more recursive calls until we\nreach a base case. And the base case is\nthat we now have a list",
    "start": "4332750",
    "end": "4341449"
  },
  {
    "text": "with one element in it. Either that element is\nthe one we're looking for or, worst case,\nit's not, and we've",
    "start": "4341450",
    "end": "4348460"
  },
  {
    "text": "determined that the\nelement we're looking for is not in these n\nelements at all.",
    "start": "4348460",
    "end": "4354450"
  },
  {
    "text": "So our base case is down here. And we started with\nn elements over here.",
    "start": "4354450",
    "end": "4361070"
  },
  {
    "text": "So the bisection\nsearch algorithm will repeat this task of\ndividing the list in half",
    "start": "4361070",
    "end": "4368150"
  },
  {
    "text": "let's say i times. So this is quote,\nunquote \"how many",
    "start": "4368150",
    "end": "4373320"
  },
  {
    "text": "iterations we would have made.\" But since this is recursion,\nthere's no iterations. This is how many function calls\nwe have until we reach the base",
    "start": "4373320",
    "end": "4381510"
  },
  {
    "text": "case, i function calls. So if we take our\noriginal n elements",
    "start": "4381510",
    "end": "4387000"
  },
  {
    "text": "and we divide them by\n2 so many times that we have only one element\nleft to search for that's",
    "start": "4387000",
    "end": "4393869"
  },
  {
    "text": "when we found our answer. So we now have a relationship\nbetween how many elements",
    "start": "4393870",
    "end": "4400580"
  },
  {
    "text": "we had originally, n elements,\nand how many times we had to divide our loop\nto get to our answer,",
    "start": "4400580",
    "end": "4409050"
  },
  {
    "text": "how many of these\nlevels we have. N divided by 2 to the i equals\n1, that's our relationship.",
    "start": "4409050",
    "end": "4414930"
  },
  {
    "text": "So in the bisection search\nalgorithm, how many times are we calling this\nrecursive function",
    "start": "4414930",
    "end": "4420620"
  },
  {
    "text": "to get to the base case? Well, i times. So what is i in terms of n? Well, the relationship\nbetween i and n",
    "start": "4420620",
    "end": "4427699"
  },
  {
    "text": "is similar to the\none we had over here, where we divided this\nnumber by 10 each time,",
    "start": "4427700",
    "end": "4432800"
  },
  {
    "text": "except that now we're\ndividing a list of n elements by 2 each time. So the relationship\nis still logarithmic.",
    "start": "4432800",
    "end": "4440630"
  },
  {
    "text": "It relates the number of\nelements I originally had, n, with how many times I\nhad to divide my list",
    "start": "4440630",
    "end": "4446989"
  },
  {
    "text": "to get to one element, whether\nit's the one I'm looking for or not.",
    "start": "4446990",
    "end": "4452449"
  },
  {
    "text": "So the complexity of just the\npure bisection search algorithm is theta of log n, where n\nis the length of the list.",
    "start": "4452450",
    "end": "4460970"
  },
  {
    "text": "That's how many\nsubdivisions I need to do to get to one\nelement to decide it's not the one I'm looking for.",
    "start": "4460970",
    "end": "4467820"
  },
  {
    "text": "So now we're going to look at\ntwo different implementations of the code to do\nbisection search. One will be more\nefficient than the other.",
    "start": "4467820",
    "end": "4474780"
  },
  {
    "text": "Let's start with the one\nthat's simpler to write but less efficient. So this code, you can see\nhere it looks for element",
    "start": "4474780",
    "end": "4483010"
  },
  {
    "text": "e in list L. It\nhas two base cases up there, those\nare both constant, and one recursive step here.",
    "start": "4483010",
    "end": "4490130"
  },
  {
    "text": "So either we do this\none or this one. So this one is if we decided we\nneed to look in the lower half, and this is if we\ndecided we need",
    "start": "4490130",
    "end": "4496360"
  },
  {
    "text": "to look in the upper\nhalf for the element. So this is just pure\nbisection search,",
    "start": "4496360",
    "end": "4502770"
  },
  {
    "text": "which on the previous\nslide we decided is theta of log of length\nof the list, theta of log n.",
    "start": "4502770",
    "end": "4509880"
  },
  {
    "text": "Now, that's fine, but what do\nwe have as a parameter here?",
    "start": "4509880",
    "end": "4515989"
  },
  {
    "text": "It's half of my list. So in addition to\ndoing bisection search",
    "start": "4515990",
    "end": "4521960"
  },
  {
    "text": "and just doing the\nalgorithm, having a bunch of bisection\nsearch calls that take me to that\nlist of one element,",
    "start": "4521960",
    "end": "4528320"
  },
  {
    "text": "on top of that, each time I\nmake that bisection search call, I'm copying my list.",
    "start": "4528320",
    "end": "4534510"
  },
  {
    "text": "So this is not constant. It's theta of length\nL over 2, right?",
    "start": "4534510",
    "end": "4540170"
  },
  {
    "text": "I grab half of my list. So the complexity of that code\nis theta of n times log n.",
    "start": "4540170",
    "end": "4548630"
  },
  {
    "text": "Theta of log n for the bisection\nsearch bit, but theta of n tacked on to each\none of those calls",
    "start": "4548630",
    "end": "4555140"
  },
  {
    "text": "because I have to\ngrab a copy of my list with each function call. So it's not quite\nthat efficient.",
    "start": "4555140",
    "end": "4562210"
  },
  {
    "text": "Now, let's look at a slightly\ndifferent implementation. This particular one is\ngoing to use integers",
    "start": "4562210",
    "end": "4570099"
  },
  {
    "text": "to keep track of endpoints. So instead of\ncopying my list, let me just keep track of a\nnumber for my low endpoint",
    "start": "4570100",
    "end": "4576430"
  },
  {
    "text": "and a number for\nmy high endpoint. The complexity analysis\nfor the bisection search",
    "start": "4576430",
    "end": "4581800"
  },
  {
    "text": "is going to be exactly the same\nbecause even though I'm just keeping track of these\nhigh and low end points, I'm still dividing the list\nin half with each call.",
    "start": "4581800",
    "end": "4589390"
  },
  {
    "text": "But I'm doing it by keeping\ntrack of integer indices. So the size of the\nproblem is still",
    "start": "4589390",
    "end": "4595660"
  },
  {
    "text": "reduced by two at each step. I'm keeping track of\nthese integer indices. I'm not copying the\nlist at this point.",
    "start": "4595660",
    "end": "4601420"
  },
  {
    "text": "I'm just changing an\ninteger value from 10 to 5 or whatever it is.",
    "start": "4601420",
    "end": "4607580"
  },
  {
    "text": "So the complexity analysis\nof the bisection search is theta of log n.",
    "start": "4607580",
    "end": "4613000"
  },
  {
    "text": "The code looks a\nlittle bit messier, but overall, it still does\nthe same sort of things.",
    "start": "4613000",
    "end": "4618430"
  },
  {
    "text": "It's messier because now I\nwant bisection search to look for an element e in list L,\nbut I'd like my recursive call",
    "start": "4618430",
    "end": "4627010"
  },
  {
    "text": "to keep track of two end\npoints, these integers low and the integer high,\nthe thing that I",
    "start": "4627010",
    "end": "4632320"
  },
  {
    "text": "want to search my list between. So I'm going to create\nanother function that I kick off down here, which\nlooks for an element in list L.",
    "start": "4632320",
    "end": "4642070"
  },
  {
    "text": "But I'm also going to keep track\nof my low and high end points as parameter to my\nbisection search function.",
    "start": "4642070",
    "end": "4649849"
  },
  {
    "text": "So bisection_search_helper\nhere is now going to take in\nthese four parameters. The rest of the code\nis just details.",
    "start": "4649850",
    "end": "4657010"
  },
  {
    "text": "But what's important\nis everything is constant except for my\ntwo bisection search calls.",
    "start": "4657010",
    "end": "4662800"
  },
  {
    "text": "Here, I'm changing my low-- I'm sorry, I'm\nchanging my high if I want to look in the\nlower half of the list.",
    "start": "4662800",
    "end": "4668889"
  },
  {
    "text": "And here I'm\nchanging my low if I want to look in the\nupper half of the list. So the bisection\nsearch calls are still",
    "start": "4668890",
    "end": "4675280"
  },
  {
    "text": "going to be theta of log n,\nbut what's the overhead now? The overhead is nothing, right? It's constant.",
    "start": "4675280",
    "end": "4681020"
  },
  {
    "text": "This L is the same one. I'm not making a copy of it. I'm just passing it through. E is just a number.",
    "start": "4681020",
    "end": "4687040"
  },
  {
    "text": "Low is just a number. And mid minus 1 is just\na constant operation. There's nothing\nbeing copied here.",
    "start": "4687040",
    "end": "4693170"
  },
  {
    "text": "So the overall\ncomplexity of this code, while it looks a little bit\nmessier, is just theta of log n",
    "start": "4693170",
    "end": "4698860"
  },
  {
    "text": "because the overhead is constant\non each one of those function calls.",
    "start": "4698860",
    "end": "4704630"
  },
  {
    "text": "So that brings us to\nthis final question. Clearly bisection search\non a sorted list is faster,",
    "start": "4704630",
    "end": "4712270"
  },
  {
    "text": "it's theta of log n,\nthan by pure brute force search on a list that could\nbe sorted or unsorted.",
    "start": "4712270",
    "end": "4719030"
  },
  {
    "text": "So the question is,\nwhen does it make sense",
    "start": "4719030",
    "end": "4724139"
  },
  {
    "text": "to sort the list first? So given an unsorted list,\nwhen do you sort the list",
    "start": "4724140",
    "end": "4729210"
  },
  {
    "text": "and use this fast binary\nsearch versus just using a straight-up linear search?",
    "start": "4729210",
    "end": "4736010"
  },
  {
    "text": "Well, that's when\nthe time it takes to do the sort, an initial\nsort, plus the complexity",
    "start": "4736010",
    "end": "4742670"
  },
  {
    "text": "to do binary search\nis less than doing the straight-up linear\nsearch because the list has",
    "start": "4742670",
    "end": "4750020"
  },
  {
    "text": "to be sorted for this to work. Well, when is that true? Well, this implies that the\ntime it takes to do the sort",
    "start": "4750020",
    "end": "4757580"
  },
  {
    "text": "is less than theta of n. So that means what?",
    "start": "4757580",
    "end": "4763920"
  },
  {
    "text": "Can you sort a list without\neven looking at all the elements once?",
    "start": "4763920",
    "end": "4769940"
  },
  {
    "text": "No, right? You have to look at\nall the elements once to even say that, hey, this\nlist is already sorted.",
    "start": "4769940",
    "end": "4775770"
  },
  {
    "text": "So this is actually never true. So what does that mean? Does that mean we never want\nto do binary search on a list",
    "start": "4775770",
    "end": "4783829"
  },
  {
    "text": "unless it's already sorted? Kind of. But in fact, there\nare various situations",
    "start": "4783830",
    "end": "4791050"
  },
  {
    "text": "when it does make sense to do\nthe sort first and then use binary search. And that's the case where\nyou're given a data set,",
    "start": "4791050",
    "end": "4799180"
  },
  {
    "text": "and you want to do a whole bunch\nof searches on that data set. So if you can take that sort,\ndo it once, and then amortize",
    "start": "4799180",
    "end": "4809599"
  },
  {
    "text": "the cost it took you to do that\nsort over K different searches, then it makes sense to pay\nthe price to do the sort once",
    "start": "4809600",
    "end": "4818930"
  },
  {
    "text": "and then do it\nover-- and then do the binary search over all\nthese searches-- yeah, all",
    "start": "4818930",
    "end": "4825080"
  },
  {
    "text": "these searches. And so as K gets\nreally big, the time",
    "start": "4825080",
    "end": "4830449"
  },
  {
    "text": "it takes for you to do the\nsort becomes irrelevant. The theta of doing\nthis thing on the left",
    "start": "4830450",
    "end": "4835670"
  },
  {
    "text": "becomes just the theta to do\nthe search logarithmically than it does to do\nthe search linearly.",
    "start": "4835670",
    "end": "4841700"
  },
  {
    "text": " OK, so if you're only\ndoing the search once,",
    "start": "4841700",
    "end": "4848220"
  },
  {
    "text": "please do not sort your list\nand then do a binary search. That's going to take\nlonger than just looking at the\nelements in your list",
    "start": "4848220",
    "end": "4855389"
  },
  {
    "text": "straight through\nusing brute force. But if you're going to do\na whole bunch of searches, it makes sense to do the\nsort and then do the search.",
    "start": "4855390",
    "end": "4863520"
  },
  {
    "text": "All right. All right, that's all I've got. Next lecture,\nwe're going to look at a bunch of different\nsorting algorithms, and we'll have a quiz.",
    "start": "4863520",
    "end": "4871130"
  },
  {
    "start": "4871130",
    "end": "4878000"
  }
]