[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "Non-volatile memories are used to maintain\nsystem state even when the system is powered",
    "start": "890",
    "end": "5648"
  },
  {
    "text": "down.",
    "start": "5649",
    "end": "6790"
  },
  {
    "text": "In flash memories, long-term storage is achieved\nby storing charge on an well-insulated conductor",
    "start": "6790",
    "end": "12160"
  },
  {
    "text": "called a floating gate, where it will remain\nstable for years.",
    "start": "12160",
    "end": "16920"
  },
  {
    "text": "The floating gate is incorporated in a standard\nMOSFET, placed between the MOSFET's gate and",
    "start": "16920",
    "end": "22190"
  },
  {
    "text": "the MOSFET's channel.",
    "start": "22190",
    "end": "24130"
  },
  {
    "text": "If there is no charge stored on the floating\ngate, the MOSFET can be turned on, i.e., be",
    "start": "24130",
    "end": "29619"
  },
  {
    "text": "made to conduct, by placing a voltage V_1\non the gate terminal, creating an inversion",
    "start": "29619",
    "end": "35190"
  },
  {
    "text": "layer that connects the MOSFET's source and\ndrain terminals.",
    "start": "35190",
    "end": "40210"
  },
  {
    "text": "If there is a charge stored on the floating\ngate, a higher voltage V_2 is required to",
    "start": "40210",
    "end": "45218"
  },
  {
    "text": "turn on the MOSFET.",
    "start": "45219",
    "end": "46800"
  },
  {
    "text": "By setting the gate terminal to a voltage\nbetween V_1 and V_2, we can determine if the",
    "start": "46800",
    "end": "51468"
  },
  {
    "text": "floating gate is charged by testing to see\nif the MOSFET is conducting.",
    "start": "51469",
    "end": "55989"
  },
  {
    "text": "In fact, if we can measure the current flowing\nthrough the MOSFET, we can determine how much",
    "start": "55989",
    "end": "61030"
  },
  {
    "text": "charge is stored on the floating gate, making\nit possible to store multiple bits of information",
    "start": "61030",
    "end": "66360"
  },
  {
    "text": "in one flash cell by varying the amount of\ncharge on its floating gate.",
    "start": "66360",
    "end": "71700"
  },
  {
    "text": "Flash cells can be connected in parallel or\nseries to form circuits resembling CMOS NOR",
    "start": "71700",
    "end": "77270"
  },
  {
    "text": "or NAND gates, allowing for a variety of access\narchitectures suitable for either random or",
    "start": "77270",
    "end": "82750"
  },
  {
    "text": "sequential access.",
    "start": "82750",
    "end": "86040"
  },
  {
    "text": "Flash memories are very dense, approaching\nthe areal density of DRAMs, particularly when",
    "start": "86040",
    "end": "90860"
  },
  {
    "text": "each cell holds multiple bits of information.",
    "start": "90860",
    "end": "95250"
  },
  {
    "text": "Read access times for NOR flash memories are\nsimilar to that of DRAMs, several tens of",
    "start": "95250",
    "end": "99939"
  },
  {
    "text": "nanoseconds.",
    "start": "99939",
    "end": "101710"
  },
  {
    "text": "Read times for NAND flash memories are much\nlonger, on the order of 10 microseconds.",
    "start": "101710",
    "end": "107420"
  },
  {
    "text": "Write times for all types of flash memories\nare quite long since high voltages have to",
    "start": "107420",
    "end": "111610"
  },
  {
    "text": "be used to force electrons to cross the insulating\nbarrier surrounding the floating gate.",
    "start": "111610",
    "end": "118969"
  },
  {
    "text": "Flash memories can only be written some number\nof times before the insulating layer is damaged",
    "start": "118969",
    "end": "123530"
  },
  {
    "text": "to the point that the floating gate will no\nlonger reliably store charge.",
    "start": "123530",
    "end": "128700"
  },
  {
    "text": "Currently the number of guaranteed writes\nvaries between 100,000 and",
    "start": "128700",
    "end": "133069"
  },
  {
    "text": "To work around this limitation, flash chips\ncontain clever address mapping algorithms",
    "start": "133070",
    "end": "139060"
  },
  {
    "text": "so that writes to the same address actually\nare mapped to different flash cells on each",
    "start": "139060",
    "end": "143709"
  },
  {
    "text": "successive write.",
    "start": "143709",
    "end": "146320"
  },
  {
    "text": "The bottom line is that flash memories are\na higher-performance but higher-cost replacement",
    "start": "146320",
    "end": "151290"
  },
  {
    "text": "for the hard-disk drive, the long-time technology\nof choice for non-volatile storage.",
    "start": "151290",
    "end": "157530"
  },
  {
    "text": "A hard-disk drive (HDD) contains one or more\nrotating platters coated with a magnetic material.",
    "start": "157530",
    "end": "163540"
  },
  {
    "start": "158000",
    "end": "158000"
  },
  {
    "text": "The platters rotate at speeds ranging from\n5400 to 15000 RPM.",
    "start": "163540",
    "end": "168459"
  },
  {
    "text": "A read/write head positioned above the surface\nof a platter can detect or change the orientation",
    "start": "168460",
    "end": "175010"
  },
  {
    "text": "of the magnetization of the magnetic material\nbelow.",
    "start": "175010",
    "end": "179319"
  },
  {
    "text": "The read/write head is mounted an actuator\nthat allows it to be positioned over different",
    "start": "179320",
    "end": "184049"
  },
  {
    "text": "circular tracks.",
    "start": "184049",
    "end": "186319"
  },
  {
    "text": "To read a particular sector of data, the head\nmust be positioned radially over the correct",
    "start": "186319",
    "end": "191230"
  },
  {
    "text": "track, then wait for the platter to rotate\nuntil it's over the desired sector.",
    "start": "191230",
    "end": "197220"
  },
  {
    "text": "The average total time required to correctly\nposition the head is on the order of 10 milliseconds,",
    "start": "197220",
    "end": "203049"
  },
  {
    "text": "so hard disk access times are quite long.",
    "start": "203049",
    "end": "206019"
  },
  {
    "text": "However, once the read/write head is in the\ncorrect position, data can be transferred",
    "start": "206019",
    "end": "210629"
  },
  {
    "text": "at the respectable rate of 100 megabytes/second.",
    "start": "210629",
    "end": "213739"
  },
  {
    "text": "If the head has to be repositioned between\neach access, the effective transfer rate drops",
    "start": "213739",
    "end": "219019"
  },
  {
    "text": "1000-fold, limited by the time it takes to\nreposition the head.",
    "start": "219019",
    "end": "224770"
  },
  {
    "text": "Hard disk drives provide cost-effective non-volatile\nstorage for terabytes of data, albeit at the",
    "start": "224770",
    "end": "230930"
  },
  {
    "text": "cost of slow access times.",
    "start": "230930",
    "end": "233849"
  },
  {
    "text": "This completes our whirlwind tour of memory\ntechnologies.",
    "start": "233849",
    "end": "237459"
  },
  {
    "start": "234000",
    "end": "234000"
  },
  {
    "text": "If you'd like to learn a bit more, Wikipedia\nhas useful articles on each type of device.",
    "start": "237459",
    "end": "243720"
  },
  {
    "text": "SRAM sizes and access times have kept pace\nwith the improvements in the size and speed",
    "start": "243720",
    "end": "248579"
  },
  {
    "text": "of integrated circuits.",
    "start": "248579",
    "end": "250239"
  },
  {
    "text": "Interestingly, although capacities and transfer\nrates for DRAMs and HDDs have improved, their",
    "start": "250239",
    "end": "255970"
  },
  {
    "text": "initial access times have not improved nearly\nas rapidly.",
    "start": "255970",
    "end": "259019"
  },
  {
    "text": "Thankfully over the past decade flash memories\nhave helped to fill the performance gap between",
    "start": "259020",
    "end": "265190"
  },
  {
    "text": "processor speeds and HDDs.",
    "start": "265190",
    "end": "268670"
  },
  {
    "text": "But the gap between processor cycle times\nand DRAM access times has continued to widen,",
    "start": "268670",
    "end": "274830"
  },
  {
    "text": "increasing the challenge of designing low-latency\nhigh-capacity memory systems.",
    "start": "274830",
    "end": "280770"
  },
  {
    "text": "The capacity of the available memory technologies\nvaries over 10 orders of magnitude, and the",
    "start": "280770",
    "end": "286289"
  },
  {
    "text": "variation in latencies varies over 8 orders\nof magnitude.",
    "start": "286290",
    "end": "290530"
  },
  {
    "text": "This creates a considerable challenge in figuring\nout how to navigate the speed vs size tradeoffs.",
    "start": "290530",
    "end": "297200"
  },
  {
    "text": "Each transition in memory hierarchy shows\nthe same fundamental design choice: we can",
    "start": "297200",
    "end": "302320"
  },
  {
    "text": "pick smaller-and-faster or larger-and-slower.",
    "start": "302320",
    "end": "306180"
  },
  {
    "text": "This is a bit awkward actually - can we figure\nhow to get the best of both worlds?",
    "start": "306180",
    "end": "312169"
  },
  {
    "start": "311000",
    "end": "311000"
  },
  {
    "text": "We want our system to behave as if it had\na large, fast, and cheap main memory.",
    "start": "312170",
    "end": "317110"
  },
  {
    "text": "Clearly we can't achieve this goal using any\nsingle memory technology.",
    "start": "317110",
    "end": "321530"
  },
  {
    "text": "Here's an idea: can we use a hierarchical\nsystem of memories with different tradeoffs",
    "start": "321530",
    "end": "327700"
  },
  {
    "text": "to achieve close to the same results as a\nlarge, fast, cheap memory?",
    "start": "327700",
    "end": "332820"
  },
  {
    "text": "Could we arrange for memory locations we're\nusing often to be stored, say, in SRAM and",
    "start": "332820",
    "end": "337780"
  },
  {
    "text": "have those accesses be low latency?",
    "start": "337780",
    "end": "340960"
  },
  {
    "text": "Could the rest of the data could be stored\nin the larger and slower memory components,",
    "start": "340960",
    "end": "345660"
  },
  {
    "text": "moving the between the levels when necessary?",
    "start": "345660",
    "end": "347550"
  },
  {
    "text": "Let's follow this train of thought and see\nwhere it leads us.",
    "start": "347550",
    "end": "352180"
  },
  {
    "start": "352000",
    "end": "352000"
  },
  {
    "text": "There are two approaches we might take.",
    "start": "352180",
    "end": "354600"
  },
  {
    "text": "The first is to expose the hierarchy, providing\nsome amount of each type of storage and let",
    "start": "354600",
    "end": "359520"
  },
  {
    "text": "the programmer decide how best to allocate\nthe various memory resources for each particular",
    "start": "359520",
    "end": "365099"
  },
  {
    "text": "computation.",
    "start": "365100",
    "end": "366880"
  },
  {
    "text": "The programmer would write code that moved\ndata into fast storage when appropriate, then",
    "start": "366880",
    "end": "371430"
  },
  {
    "text": "back to the larger and slower memories when\nlow-latency access was no longer required.",
    "start": "371430",
    "end": "376830"
  },
  {
    "text": "There would only be a small amount of the\nfastest memory, so data would be constantly",
    "start": "376830",
    "end": "381840"
  },
  {
    "text": "in motion as the focus of the computation\nchanged.",
    "start": "381841",
    "end": "386940"
  },
  {
    "text": "This approach has had notable advocates.",
    "start": "386940",
    "end": "389820"
  },
  {
    "text": "Perhaps the most influential was Seymour Cray,\nthe \"Steve Jobs\" of supercomputers.",
    "start": "389820",
    "end": "395530"
  },
  {
    "text": "Cray was the architect of the world's fastest\ncomputers in each of three decades, inventing",
    "start": "395530",
    "end": "400880"
  },
  {
    "text": "many of the technologies that form the foundation\nof high-performance computing.",
    "start": "400880",
    "end": "406690"
  },
  {
    "text": "His insight to managing the memory hierarchy\nwas to organize data as vectors and move vectors",
    "start": "406690",
    "end": "412480"
  },
  {
    "text": "in and out of fast memory under program control.",
    "start": "412480",
    "end": "415740"
  },
  {
    "text": "This was actually a good data abstraction\nfor certain types of scientific computing",
    "start": "415740",
    "end": "420880"
  },
  {
    "text": "and his vector machines had the top computing\nbenchmarks for many years.",
    "start": "420880",
    "end": "426030"
  },
  {
    "text": "The second alternative is to hide the hierarchy\nand simply tell the programmer they have a",
    "start": "426030",
    "end": "431910"
  },
  {
    "text": "large, uniform address space to use as they\nwish.",
    "start": "431910",
    "end": "435680"
  },
  {
    "text": "The memory system would, behind the scenes,\nmove data between the various levels of the",
    "start": "435680",
    "end": "440780"
  },
  {
    "text": "memory hierarchy, depending on the usage patterns\nit detected.",
    "start": "440780",
    "end": "445810"
  },
  {
    "text": "This would require circuitry to examine each\nmemory access issued by the CPU to determine",
    "start": "445810",
    "end": "450780"
  },
  {
    "text": "where in the hierarchy to find the requested\nlocation.",
    "start": "450780",
    "end": "454990"
  },
  {
    "text": "And then, if a particular region of addresses\nwas frequently accessed - say, when fetching",
    "start": "454990",
    "end": "460340"
  },
  {
    "text": "instructions in a loop -\nthe memory system would arrange for those",
    "start": "460340",
    "end": "463810"
  },
  {
    "text": "accesses to be mapped to the fastest memory\ncomponent and automatically move the loop",
    "start": "463810",
    "end": "468540"
  },
  {
    "text": "instructions there.",
    "start": "468540",
    "end": "469900"
  },
  {
    "text": "All of this machinery would be transparent\nto the programmer: the program would simply",
    "start": "469900",
    "end": "475250"
  },
  {
    "text": "fetch instructions and access data and the\nmemory system would handle the rest.",
    "start": "475250",
    "end": "481110"
  },
  {
    "text": "Could the memory system automatically arrange\nfor the right data to be in the right place",
    "start": "481110",
    "end": "485409"
  },
  {
    "text": "at the right time?",
    "start": "485410",
    "end": "487590"
  },
  {
    "text": "Cray was deeply skeptical of this approach.",
    "start": "487590",
    "end": "490580"
  },
  {
    "text": "He famously quipped \"that you can't fake what\nyou haven't got\".",
    "start": "490580",
    "end": "494449"
  },
  {
    "text": "Wouldn't the programmer, with her knowledge\nof how data was going to be used by a particular",
    "start": "494450",
    "end": "498750"
  },
  {
    "text": "program, be able to do a better job by explicitly\nmanaging the memory hierarchy?",
    "start": "498750",
    "end": "504440"
  },
  {
    "text": "It turns out that when running general-purpose\nprograms, it is possible to build an automatically",
    "start": "504440",
    "end": "510190"
  },
  {
    "text": "managed, low-latency, high-capacity hierarchical\nmemory system that appears as one large, uniform",
    "start": "510190",
    "end": "517090"
  },
  {
    "text": "memory.",
    "start": "517090",
    "end": "518090"
  },
  {
    "text": "What's the insight that makes this possible?",
    "start": "518090",
    "end": "521510"
  },
  {
    "text": "That's the topic of the next section.",
    "start": "521510",
    "end": "523140"
  }
]