[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6360"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6360",
    "end": "13330"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13330",
    "end": "20695"
  },
  {
    "text": "PROFESSOR: All right. Good morning, everyone. Thanks for coming on quiz day. I have to have someone\nto throw Frisbees to.",
    "start": "20695",
    "end": "28680"
  },
  {
    "text": "Empty chairs would be difficult. So we're going to be doing\ndynamic programming, a notion",
    "start": "28680",
    "end": "36220"
  },
  {
    "text": "you've learned in 6006. We'll look at three\ndifferent examples today.",
    "start": "36220",
    "end": "43010"
  },
  {
    "text": "The first one is really\nat the level of 006, a cute little problem on\nfinding the longest palindromic",
    "start": "43010",
    "end": "51190"
  },
  {
    "text": "sequence inside of\na longer sequence.",
    "start": "51190",
    "end": "56629"
  },
  {
    "text": "Sometimes it's called longest\npalindromic subsequence. And as we'll talk\nabout, subsequence",
    "start": "56630",
    "end": "63310"
  },
  {
    "text": "means that it can\nbe non-contiguous. So you could skip letters\nin a sequence of letters",
    "start": "63310",
    "end": "72840"
  },
  {
    "text": "and you would still have a\nsubsequence corresponding to that. Don't have to be contiguous.",
    "start": "72840",
    "end": "79100"
  },
  {
    "text": "And then we'll raise\nthe stakes a little bit. So each of these problems gets\nprogressively more complicated,",
    "start": "79100",
    "end": "87530"
  },
  {
    "text": "more sophisticated. And you'll probably\nsee problems here,",
    "start": "87530",
    "end": "92950"
  },
  {
    "text": "at least alternating coin\ngame, that are beyond 006 in the sense that\nit wasn't covered.",
    "start": "92950",
    "end": "99270"
  },
  {
    "text": "Those kinds of notions\nweren't covered in 006. So just in terms of\nreview, I wrote this",
    "start": "99270",
    "end": "105830"
  },
  {
    "text": "up here because I don't want\nto spend a whole lot of time on it. This is something that you\nshould have some familiarity",
    "start": "105830",
    "end": "112300"
  },
  {
    "text": "with from the\nrecitation, for example,",
    "start": "112300",
    "end": "117590"
  },
  {
    "text": "that you had on\nFriday and from 006. Dynamic programming is\nthis wonderful hammer.",
    "start": "117590",
    "end": "123600"
  },
  {
    "text": "It's an algorithmic\ntechnique that you can use to solve problems that\nlook exponential in complexity.",
    "start": "123600",
    "end": "131390"
  },
  {
    "text": "But if you can find this\noptimum substructure associated with the problem and its\nconnection to it's subproblems,",
    "start": "131390",
    "end": "140060"
  },
  {
    "text": "and if you can\ncharacterize that, then you can do a recursive\ndecomposition of the problem",
    "start": "140060",
    "end": "146410"
  },
  {
    "text": "where you show that you can\nconstruct the optimum solution",
    "start": "146410",
    "end": "153200"
  },
  {
    "text": "from the subproblems. And that's really the key\nstep in dynamic programming,",
    "start": "153200",
    "end": "158480"
  },
  {
    "text": "is step two. Once you've made this\ncharacterization, you write this recurrence out\nthat relates the optimal value",
    "start": "158480",
    "end": "168630"
  },
  {
    "text": "of a bigger problem to the\noptimal values of subproblems.",
    "start": "168630",
    "end": "173950"
  },
  {
    "text": "And you compute the value\nof the optimal solution through a recursive memoization.",
    "start": "173950",
    "end": "184800"
  },
  {
    "text": "And that memoization\nis really what gives you the\nefficient algorithm,",
    "start": "184800",
    "end": "192040"
  },
  {
    "text": "because you don't repeat\nthe solution of subproblems. You can also do this in\nan iterative fashion.",
    "start": "192040",
    "end": "199640"
  },
  {
    "text": "Essentially, you're going to\nbe computing things bottom-up. You might want to think\nabout it as top-down",
    "start": "199640",
    "end": "204890"
  },
  {
    "text": "when you write your recurrence. But ultimately, when you\nactually execute the program, you'll be computing\nthings bottom-up,",
    "start": "204890",
    "end": "211690"
  },
  {
    "text": "and you'll be checking the memo\ntable to see if you actually solved this problem before.",
    "start": "211690",
    "end": "217340"
  },
  {
    "text": "And that would be the\nrecursive memoized case, which, in some sense,\nis a little bit easier",
    "start": "217340",
    "end": "223430"
  },
  {
    "text": "to think about and translate\ndirectly from the recurrence. But the other way to do it\nis to do it iteratively.",
    "start": "223430",
    "end": "229170"
  },
  {
    "text": "And we'll take a look\nfor this first problem as to how you'd do the two\ndifferent ways at least",
    "start": "229170",
    "end": "235110"
  },
  {
    "text": "from a conceptual standpoint,\neven though I might not write out the code for\neach of those cases.",
    "start": "235110",
    "end": "241400"
  },
  {
    "text": "So a couple of choices\nhere, recurse and memoize, or essentially do\nit iteratively.",
    "start": "241400",
    "end": "248726"
  },
  {
    "text": "And the smaller\nsubproblems would have to get computed\nfirst in both approaches.",
    "start": "248726",
    "end": "256278"
  },
  {
    "text": "The one thing that sometimes we\ndon't spend a whole lot of time on is this last step, which\nis getting the exact solution.",
    "start": "256279",
    "end": "265210"
  },
  {
    "text": "So a lot of the time,\nyou stop with saying, I can compute the value\nof the optimum solution,",
    "start": "265210",
    "end": "271030"
  },
  {
    "text": "the value in terms of\nthe length of the longest palindromic sequence is 7 or 9.",
    "start": "271030",
    "end": "278770"
  },
  {
    "text": "But what is that\nsequence or subsequence? That requires some\nadditional coding,",
    "start": "278770",
    "end": "285639"
  },
  {
    "text": "some additional accounting. The construction of\nthis optimal solution",
    "start": "285640",
    "end": "291100"
  },
  {
    "text": "typically requires\nsome back-tracing and some information\nto be kept track",
    "start": "291100",
    "end": "298200"
  },
  {
    "text": "of during the recurse\nand memoize step or during the iterative step. So that's something\nto keep in mind.",
    "start": "298200",
    "end": "303990"
  },
  {
    "text": "You're not quite\ndone once you've found the value of\nthe optimum solution. More often than not,\nyou want the solution.",
    "start": "303990",
    "end": "311250"
  },
  {
    "text": "So we'll talk about that\nas well a little bit. But let's just dive in and look\nat this cute, little problem",
    "start": "311250",
    "end": "321824"
  },
  {
    "text": "of longest palindromic sequence.",
    "start": "321824",
    "end": "327280"
  },
  {
    "text": "And palindromes, of course,\nread the same front to back",
    "start": "327280",
    "end": "335139"
  },
  {
    "text": "or back to front. Radar is a palindrome. Just as a trivial example, a\nsingle letter is a palindrome.",
    "start": "335140",
    "end": "343889"
  },
  {
    "text": "Maybe I should have used a\nsince that's actually a word. But here I got bb.",
    "start": "343890",
    "end": "350890"
  },
  {
    "text": "That's definitely not\na word, at least not a word that-- acronym, maybe.",
    "start": "350890",
    "end": "357669"
  },
  {
    "text": "Radar is a palindrome. Able was I 'ere I\nsaw Elba, right?",
    "start": "357670",
    "end": "363080"
  },
  {
    "text": "That's a palindrome. That's, of course,\nnot a single word. But it's a famous\npalindrome, days of Napoleon.",
    "start": "363080",
    "end": "371680"
  },
  {
    "text": "But what we're\ntrying to do here is, given that we have this\nnotion of a palindrome,",
    "start": "371680",
    "end": "377220"
  },
  {
    "text": "we'd like to discover\npalindromes inside longer",
    "start": "377220",
    "end": "382400"
  },
  {
    "text": "words or longer sequences. So what we have is a string,\nand we'll call it x1 through n,",
    "start": "382400",
    "end": "393921"
  },
  {
    "text": "n greater than or equal to 1. And we want to find the\nlongest palindrome that",
    "start": "393921",
    "end": "405919"
  },
  {
    "text": "is a subsequence.  And so here's an example\nto get you guys warmed up.",
    "start": "405920",
    "end": "414290"
  },
  {
    "text": "We'll have a couple of\npuzzles here in a second. So character.",
    "start": "414290",
    "end": "419720"
  },
  {
    "text": "And you want to find\nthe longest palindrome. And so you go, I'll pick c,\nI'll skip h, I'll pick a,",
    "start": "419720",
    "end": "427450"
  },
  {
    "text": "I'll pick r, a, and c. And carac, which I guess\nis not a word either--",
    "start": "427450",
    "end": "435020"
  },
  {
    "text": "but it's the longest\npalindrome that corresponds",
    "start": "435020",
    "end": "441000"
  },
  {
    "text": "to a subsequence of character. Right? So the game here,\nas you can see,",
    "start": "441000",
    "end": "447660"
  },
  {
    "text": "is to pick the letters that\nform the palindrome and drop",
    "start": "447660",
    "end": "453670"
  },
  {
    "text": "the ones that don't. OK? And we're going to have to use\ndynamic programming to do this.",
    "start": "453670",
    "end": "460630"
  },
  {
    "text": "The answer will be greater\nthan or-- 1 in length",
    "start": "460630",
    "end": "466760"
  },
  {
    "text": "because we've defined a\nsingle letter as a palindrome. So it has to be-- if you have\none letter in the input, well,",
    "start": "466760",
    "end": "475660"
  },
  {
    "text": "you just pick that letter. But regardless of how many\nletters you have on the input, greater than or\nequal to 1, you know",
    "start": "475660",
    "end": "480919"
  },
  {
    "text": "that you're going to get\nat least a one letter palindrome at the output.",
    "start": "480920",
    "end": "486740"
  },
  {
    "text": "So here we go.  Let's say I have under-- and\nthis is thanks to Eric here.",
    "start": "486740",
    "end": "497900"
  },
  {
    "text": "I've got a couple of nice\nwords-- underqualified. The person who gets me\nthe longest palindrome",
    "start": "497900",
    "end": "505310"
  },
  {
    "text": "wins a Frisbee. And if you want to code dynamic\nprogramming in the next two minutes and run it\non your laptops,",
    "start": "505310",
    "end": "513159"
  },
  {
    "text": "that's perfectly fine with me. That's not cheating. So underqualified.",
    "start": "513159",
    "end": "520450"
  },
  {
    "text": "So u is a palindrome. So we got that. Right? So one letter for sure. What else?",
    "start": "520450",
    "end": "526430"
  },
  {
    "text": "What's the longest palindrome? Shout it out. Go ahead. Shout it out. [STUDENTS RESPOND]",
    "start": "526430",
    "end": "531580"
  },
  {
    "text": "PROFESSOR: D-E-I--\nwow, that was quick. Deified. That's right. So right?",
    "start": "531580",
    "end": "541840"
  },
  {
    "text": "Well, deified is to\nmake somebody a deity.",
    "start": "541840",
    "end": "547920"
  },
  {
    "text": "So that was you, a\ncouple of you guys? Do you have a Frisbee yet?",
    "start": "547920",
    "end": "553649"
  },
  {
    "text": "AUDIENCE: No. PROFESSOR: All right.  All right. This is a little bit more\ndifficult. I tried this",
    "start": "553649",
    "end": "561642"
  },
  {
    "text": "on my daughter\nyesterday, so I know it's a little more\ndifficult. Turboventilator.",
    "start": "561642",
    "end": "567324"
  },
  {
    "start": "567325",
    "end": "572470"
  },
  {
    "text": "We'll call that a word. Turboventilator.",
    "start": "572470",
    "end": "577640"
  },
  {
    "text": "Yell it out. AUDIENCE: Rotor. PROFESSOR: Sorry? AUDIENCE: Rotor.",
    "start": "577640",
    "end": "582830"
  },
  {
    "text": "PROFESSOR: Rotor. OK, well, that's five. Can anybody beat that? AUDIENCE: Rotator. PROFESSOR: Rotator. So rotator.",
    "start": "582830",
    "end": "588529"
  },
  {
    "text": "Rotator. So R-O-T-A-T-O-R, rotator.",
    "start": "588530",
    "end": "596800"
  },
  {
    "text": "All right.  Who is the rotator?",
    "start": "596800",
    "end": "602200"
  },
  {
    "text": " You already have one? I want to throw this one.",
    "start": "602200",
    "end": "607742"
  },
  {
    "text": "Right.  Good practice with\nthe quiz, guys.",
    "start": "607742",
    "end": "614720"
  },
  {
    "text": "Good practice with the quiz. No, no, no. These quiz jokes\nnever go over well.",
    "start": "614720",
    "end": "620750"
  },
  {
    "text": "I've been teaching for\n27 years, and I still haven't learned that you\ndon't joke about exams.",
    "start": "620750",
    "end": "627160"
  },
  {
    "text": "But so nothing like\nthis on the quiz. I don't want you studying\nthe thesaurus as opposed",
    "start": "627160",
    "end": "632450"
  },
  {
    "text": "to the textbook for\nthe next few hours. OK? Nothing like this on the quiz.",
    "start": "632450",
    "end": "637900"
  },
  {
    "text": "All right. Those of you who are missing\nPython, who loved 6006",
    "start": "637900",
    "end": "644820"
  },
  {
    "text": "in Python, let's talk about\nhow you would actually solve",
    "start": "644820",
    "end": "650190"
  },
  {
    "text": "this using dynamic programming. And so what we\nwant is lij, which",
    "start": "650190",
    "end": "658750"
  },
  {
    "text": "is the length of the longest\npalindromic subsequence",
    "start": "658750",
    "end": "671190"
  },
  {
    "text": "for xij. And we're going to have i\nless than or equal to j.",
    "start": "671190",
    "end": "677410"
  },
  {
    "text": " So that's essentially\nwhat we'd like to compute.",
    "start": "677410",
    "end": "683670"
  },
  {
    "text": "And essentially when I've said\nthis here, when I have lij,",
    "start": "683670",
    "end": "689660"
  },
  {
    "text": "I have decomposed the overall\nproblem into subproblems,",
    "start": "689660",
    "end": "695550"
  },
  {
    "text": "and it was kind of fairly\nobvious in this case, because I'm going to\nhave to go in order.",
    "start": "695550",
    "end": "701120"
  },
  {
    "text": "Right? I mean that's the constraint. A subsequence does maintain\nthe ordering constraint.",
    "start": "701120",
    "end": "706699"
  },
  {
    "text": "It's not like I can\ninvert these letters. That would be a\ndifferent problem if I allowed you to do that. So I'm going to start somewhere,\nand I'm going to end somewhere.",
    "start": "706700",
    "end": "715260"
  },
  {
    "text": "And I want to have a\nnon-null subsequence, so I'm going to have i\nless than or equal to j. I'm good with i being\nequal to j, because I still",
    "start": "715260",
    "end": "722560"
  },
  {
    "text": "have one letter, and, well,\nthat happens to be a palindrome, and it'll have a length of 1.",
    "start": "722560",
    "end": "727740"
  },
  {
    "text": "So that's my lij. And what I want to do is\ndefine a recursive algorithm",
    "start": "727740",
    "end": "737950"
  },
  {
    "text": "that computes lij. So we'll just try and figure out\nwhat the recurrence looks like,",
    "start": "737950",
    "end": "745360"
  },
  {
    "text": "and then we can talk about\nmemoization or iteration.",
    "start": "745360",
    "end": "751220"
  },
  {
    "text": "So if i equals\nequals j, then I'm",
    "start": "751220",
    "end": "756680"
  },
  {
    "text": "going to return\n1, because I know that that's a palindrome\nby default. So that's easy.",
    "start": "756680",
    "end": "763970"
  },
  {
    "text": "And what do you think\nthe next check should be? If I look at this\nx sequence, and I",
    "start": "763970",
    "end": "771410"
  },
  {
    "text": "have i as the starting point\nand j as the next point, what do you think the next check\nis going to be once I have--",
    "start": "771410",
    "end": "778149"
  },
  {
    "text": "if i is not equal to j? AUDIENCE: If x of i equals x\nof j, then j equals as well.",
    "start": "778150",
    "end": "787082"
  },
  {
    "text": "PROFESSOR: Sorry. What was that again? AUDIENCE: If x of\ni equals x plus-- PROFESSOR: Beautiful. You're just checking\nto see-- you're just",
    "start": "787082",
    "end": "794240"
  },
  {
    "text": "checking to see whether the\ntwo endpoints are equal or not.",
    "start": "794240",
    "end": "799260"
  },
  {
    "text": "Because if they're\nequal, then you can essentially\ngrab those letters",
    "start": "799260",
    "end": "806269"
  },
  {
    "text": "and say that you're\ngoing to be looking at a smaller subsequence that is\ngoing to get you a palindrome.",
    "start": "806270",
    "end": "817480"
  },
  {
    "text": "And you're going to be able\nto add these two letters that are equal on either side\nof the computed palindrome",
    "start": "817480",
    "end": "823650"
  },
  {
    "text": "from the subsequence. So if x of i equals equals x\nof j, then I'm going to say,",
    "start": "823650",
    "end": "837380"
  },
  {
    "text": "if i plus 1 equals\nequals j, I'm going",
    "start": "837380",
    "end": "842710"
  },
  {
    "text": "to go ahead and return\n2, because at that point,",
    "start": "842710",
    "end": "848770"
  },
  {
    "text": "I'm done. There's nothing else to do. Else I'm going to return 2\nplus L of i plus 1 j minus 1.",
    "start": "848770",
    "end": "866920"
  },
  {
    "text": "So I'm going to look inside. And I've got these two letters\non either side that are equal.",
    "start": "866920",
    "end": "872290"
  },
  {
    "text": "So I can always prepend\nto the palindrome I got from here the letter, and\nthen append the same letter.",
    "start": "872290",
    "end": "880830"
  },
  {
    "text": "And I got 2 plus whatever value\nI got from this quantity here.",
    "start": "880830",
    "end": "887630"
  },
  {
    "text": "So so far, it's not\nreally particularly interesting from a\nstandpoint of constructing",
    "start": "887630",
    "end": "895160"
  },
  {
    "text": "the optimum solution. But this last line that we have\nhere, where we have the case",
    "start": "895160",
    "end": "901050"
  },
  {
    "text": "that the two letters\nare not equal is the most interesting\nline of code.",
    "start": "901050",
    "end": "906470"
  },
  {
    "text": "That's the most interesting\naspect of this algorithm. So does someone tell\nme what this line",
    "start": "906470",
    "end": "912290"
  },
  {
    "text": "is going to be out here? Yeah, go ahead. AUDIENCE: If x of L i plus\n1j or L i [INAUDIBLE].",
    "start": "912290",
    "end": "920225"
  },
  {
    "text": "PROFESSOR: Beautiful. That's exactly right. So what you're going to\ndo is you're going to say, I need to look at two\ndifferent subproblems,",
    "start": "920225",
    "end": "926700"
  },
  {
    "text": "and I need to evaluate\nboth of these subproblems. And the first subproblem is\nI'm going to-- since these two",
    "start": "926700",
    "end": "933700"
  },
  {
    "text": "letters are different, I'm going\nto have to drop one of them. And I'm going to look inside.",
    "start": "933700",
    "end": "939470"
  },
  {
    "text": "I'm going to say--\nin this case, I'm going to drop the\ni-th letter, and I'm",
    "start": "939470",
    "end": "944889"
  },
  {
    "text": "going to get L i plus 1j. And in the second case, I'm\ngoing to drop the j-th letter,",
    "start": "944890",
    "end": "951360"
  },
  {
    "text": "and I'm going to get ij minus 1. And that's it. So it's a max.",
    "start": "951360",
    "end": "957730"
  },
  {
    "text": "And there's nothing\nthat's being added here, because those two letters, one\nof them had to get dropped.",
    "start": "957730",
    "end": "964270"
  },
  {
    "text": "They weren't equal, so one\nof them had to get dropped. So you're not adding\nanything to this.",
    "start": "964270",
    "end": "970449"
  },
  {
    "text": "So that's good. And at this point,\nyou're kind of done. Right? ",
    "start": "970450",
    "end": "977810"
  },
  {
    "text": "Whoops. Oh, nice catch. But you did drop something. ",
    "start": "977810",
    "end": "984290"
  },
  {
    "text": "All right. So the thing that we've done\nhere is gotten to step three.",
    "start": "984290",
    "end": "992860"
  },
  {
    "text": "So just to be clear, we're\nnot done-done, in terms of this chart here, because\nwe don't have the code there",
    "start": "992860",
    "end": "1000760"
  },
  {
    "text": "that corresponds to actually\ncomputing the sequence.",
    "start": "1000760",
    "end": "1007990"
  },
  {
    "text": "So it's not that hard. I'm not going to go\nover the code here.",
    "start": "1007990",
    "end": "1014510"
  },
  {
    "text": "You can certainly look\nat it in the notes. But you need a\nlittle bit of tracing",
    "start": "1014510",
    "end": "1021420"
  },
  {
    "text": "backwards in this recursion\nto actually compute things.",
    "start": "1021420",
    "end": "1026540"
  },
  {
    "text": "What is the complexity of\nwhat I wrote up there, though? Yeah? AUDIENCE: Theta n squared?",
    "start": "1026540",
    "end": "1032199"
  },
  {
    "text": "PROFESSOR: Theta n squared. Do people agree that the\ncomplexity is theta n squared? Or is this gentleman\nan optimist?",
    "start": "1032200",
    "end": "1037479"
  },
  {
    "text": " Is the complexity\ntheta n squared?",
    "start": "1037479",
    "end": "1043390"
  },
  {
    "text": "Tell me why the complexity\nis theta n squared? AUDIENCE: Because\neach subproblem is-- that code right there just\nexecuted by itself is constant.",
    "start": "1043390",
    "end": "1050615"
  },
  {
    "text": "But then there's theta\nn squared subproblems. PROFESSOR: Absolutely. But if you actually implemented\nthis code, and you ran it,",
    "start": "1050615",
    "end": "1057870"
  },
  {
    "text": "and n was 100,\nhow long would you wait for this code to complete?",
    "start": "1057870",
    "end": "1063205"
  },
  {
    "text": " Look at it.",
    "start": "1063205",
    "end": "1068800"
  },
  {
    "text": "What's missing? AUDIENCE: The cache. PROFESSOR: The cache, exactly. Well, you fixed your\nown little error there.",
    "start": "1068800",
    "end": "1077580"
  },
  {
    "text": "It was a trick question. So there's no recursion-- I'm\nsorry, there's recursion here, but no memoization.",
    "start": "1077580",
    "end": "1083940"
  },
  {
    "text": "So this is exponential\ncomplexity. You will recur. In fact, the recurrence for\nthat is something like T of n",
    "start": "1083940",
    "end": "1094730"
  },
  {
    "text": "equals 1 if n equals 1, and 2T\nn minus 1 if n greater than 1.",
    "start": "1094730",
    "end": "1103309"
  },
  {
    "text": "And this would be 2 raised\nto n minus 1 in complexity. Now there's a\nsingle line of code,",
    "start": "1103310",
    "end": "1109559"
  },
  {
    "text": "and you all know this,\nthat would fix this. And that single line of code\nis simply something that says,",
    "start": "1109560",
    "end": "1116690"
  },
  {
    "text": "right here, look at\nthe lij-- and I'm",
    "start": "1116690",
    "end": "1123868"
  },
  {
    "text": "writing this differently. I'm calling this now a 2D array. So that's why I have the open\nbrackets and close brackets.",
    "start": "1123869",
    "end": "1131440"
  },
  {
    "text": "So I'm overloading l here. But it's a 2D\narray that is going to essentially be a cache for\nthe subproblem solution values.",
    "start": "1131440",
    "end": "1143420"
  },
  {
    "text": "And then if you want to do the\nbacktracing to actually compute the solution, you\ncould certainly",
    "start": "1143420",
    "end": "1149220"
  },
  {
    "text": "have that as an additional\nrecord that's connected to this very same value. But that's implementation,\nand we won't really go there.",
    "start": "1149220",
    "end": "1157899"
  },
  {
    "text": "So look at lij and don't\nrecurse if lij already computed.",
    "start": "1157900",
    "end": "1166990"
  },
  {
    "start": "1166990",
    "end": "1172270"
  },
  {
    "text": "OK. So that's important to remember. Now, if you actually put that,\nthe cache lookup, hash table",
    "start": "1172270",
    "end": "1181900"
  },
  {
    "text": "lookup, array lookup,\nwhatever you want to call it, out there, then what you\nsaid is exactly correct.",
    "start": "1181900",
    "end": "1188740"
  },
  {
    "text": "So our formula for computing\nthe complexity of a DP,",
    "start": "1188740",
    "end": "1196740"
  },
  {
    "text": "that you've seen\na bunch of times and I mentioned in the\nvery first lecture as well,",
    "start": "1196740",
    "end": "1201929"
  },
  {
    "text": "is number of\nsubproblems times time",
    "start": "1201930",
    "end": "1210860"
  },
  {
    "text": "to solve each\nsubproblem assuming",
    "start": "1210860",
    "end": "1218920"
  },
  {
    "text": "or given that smaller\nones are solved",
    "start": "1218920",
    "end": "1228220"
  },
  {
    "text": "or the lookup is Order 1. So lookup. ",
    "start": "1228220",
    "end": "1237520"
  },
  {
    "text": "Now you could say\nthat hash table lookup is Order 1 on average,\net cetera, et cetera. So what actually happens\nin the worst case,",
    "start": "1237520",
    "end": "1245170"
  },
  {
    "text": "in this particular\ncase and in most DPs, you can do things\nlike perfect caching",
    "start": "1245170",
    "end": "1253160"
  },
  {
    "text": "or, something that's even\nsimpler in this case, is just a 2D array. There's not going to be any\ncollisions if you just use i",
    "start": "1253160",
    "end": "1259070"
  },
  {
    "text": "and j as the indices\nto the array. So you will definitely get an\nOrder 1 lookup in this case,",
    "start": "1259070",
    "end": "1265390"
  },
  {
    "text": "in most problems\nwe'll look at in 046. So if we just do that\ncomputation, which",
    "start": "1265390",
    "end": "1274280"
  },
  {
    "text": "my friend over here\njust described, you do get your theta n\nsquared, because you have",
    "start": "1274280",
    "end": "1279640"
  },
  {
    "text": "theta n squared subproblems. And time to solve\neach subproblem, given",
    "start": "1279640",
    "end": "1289400"
  },
  {
    "text": "that the smaller\nones are solved, is simply going to\nbe a computation of a max and an addition.",
    "start": "1289400",
    "end": "1297820"
  },
  {
    "text": "So all of that is theta\n1, because you're not counting the recursive calls.",
    "start": "1297820",
    "end": "1303390"
  },
  {
    "text": "So this is our first example. I'm done with it.",
    "start": "1303390",
    "end": "1308559"
  },
  {
    "text": "Any questions about it? Any questions about\nDP in general?",
    "start": "1308560",
    "end": "1314746"
  },
  {
    "text": "All right, good. So little bit of review there.",
    "start": "1314746",
    "end": "1320440"
  },
  {
    "text": "Not a particularly\ncomplicated question. Let's go to a different\nquestion corresponding",
    "start": "1320440",
    "end": "1326600"
  },
  {
    "text": "to optimal binary search trees. It's a very different question.",
    "start": "1326600",
    "end": "1331854"
  },
  {
    "text": "I don't think I\nneed this anymore. ",
    "start": "1331854",
    "end": "1337020"
  },
  {
    "text": "And it's kind of\ncute in its own way. One of things that's\ninteresting about this question is it seems like a greedy\nalgorithm should work.",
    "start": "1337020",
    "end": "1347150"
  },
  {
    "text": "And we'll talk about that, as\nto why the greedy algorithm doesn't quite work.",
    "start": "1347150",
    "end": "1353010"
  },
  {
    "text": "So it's kind of similar\nto the interval scheduling and the weighted interval\nscheduling problem",
    "start": "1353010",
    "end": "1358520"
  },
  {
    "text": "that we had back\nin February, where the regular interval scheduling\nproblem, greedy worked,",
    "start": "1358520",
    "end": "1366300"
  },
  {
    "text": "earliest finish time worked. But when it came\nto weights, we had to graduate to\ndynamic programming.",
    "start": "1366300",
    "end": "1373549"
  },
  {
    "text": "So here's our second\nproblem, optimal BSTs.",
    "start": "1373550",
    "end": "1379460"
  },
  {
    "text": "So what is an optimal BST? We have a bunch of keys that\nwe want to store in the BST, K1",
    "start": "1379460",
    "end": "1390590"
  },
  {
    "text": "through Kn. And we'll assume that\nthe way this is set up is that K1 is less than K2,\nda, da, da, less than Kn.",
    "start": "1390590",
    "end": "1399440"
  },
  {
    "text": "And just to make our life\neasier in our examples, we just assume that Ki equals i.",
    "start": "1399440",
    "end": "1406260"
  },
  {
    "text": "That's not necessarily\nrequired for anything we're going to do next. It's just for the\nsake of examples",
    "start": "1406260",
    "end": "1412850"
  },
  {
    "text": "and keeping things manageable. So I got a bunch of keys. And clearly there are many\ndifferent binary search trees",
    "start": "1412850",
    "end": "1420669"
  },
  {
    "text": "that can come, whether they're\nbalanced or unbalanced. Many different\nbinary search trees",
    "start": "1420670",
    "end": "1427549"
  },
  {
    "text": "can be consistent with\na given set of keys. If I choose the root\nto be Kn, then I'm",
    "start": "1427550",
    "end": "1435840"
  },
  {
    "text": "going to get this\nhorribly unbalanced tree. If I chose the root to be\nsomewhere in the middle, then I'm going to\nget something that",
    "start": "1435840",
    "end": "1442263"
  },
  {
    "text": "looks a little better, at\nleast at the top level. But again, if I messed\nit up at the next level,",
    "start": "1442263",
    "end": "1447780"
  },
  {
    "text": "I'd get something\nthat's unbalanced. So there's clearly\nmany different BSTs.",
    "start": "1447780",
    "end": "1453200"
  },
  {
    "text": "I'm not talking about\nbalanced BSTs here. But we're going to define an\noptimality criterion that's a little bit different\nfrom balanced BSTs,",
    "start": "1453200",
    "end": "1460720"
  },
  {
    "text": "because it's going to\nhave this additional cost function associated\nwith it that corresponds to the weight of the keys.",
    "start": "1460720",
    "end": "1468380"
  },
  {
    "text": "So what is that? Well, I'm going to\nhave weights associated",
    "start": "1468380",
    "end": "1474890"
  },
  {
    "text": "with each of these keys\ncorresponding to W1 through Wn.",
    "start": "1474890",
    "end": "1481260"
  },
  {
    "text": "And the easiest\nway to motivate you",
    "start": "1481260",
    "end": "1489490"
  },
  {
    "text": "to think that these weights\nare an interesting addition to this problem is to\nthink about these weights",
    "start": "1489490",
    "end": "1496110"
  },
  {
    "text": "as being search probabilities. So what you have,\nfor argument's sake, is a static structure\nthat you've created.",
    "start": "1496110",
    "end": "1506090"
  },
  {
    "text": "I mean, you could modify it. There's nothing that's\nstopping you from doing that. But let's just pretend for now\nthat it's a static structure",
    "start": "1506090",
    "end": "1512750"
  },
  {
    "text": "corresponding to this BST--\nhas a particular structure. And chances are you're going\nto be searching for some keys",
    "start": "1512750",
    "end": "1520590"
  },
  {
    "text": "more frequently than others. And the Wi's tell you\nwhat the probabilities",
    "start": "1520590",
    "end": "1526230"
  },
  {
    "text": "are in terms of searching\nfor a particular key Ki. So you can imagine, and\nwe won't have this here,",
    "start": "1526230",
    "end": "1532670"
  },
  {
    "text": "that you take-- the\nWi's all sum up to 1, if you want to think of\nthem as probabilities. Or I'm just going\nto give you numbers.",
    "start": "1532670",
    "end": "1539899"
  },
  {
    "text": "I don't want to deal with\nfractions, don't particularly like fractions. So you can imagine that\neach probability corresponds",
    "start": "1539899",
    "end": "1546770"
  },
  {
    "text": "to Wi divided by the sum\nof all the Wi's, if you want all of the\nprobabilities to sum up to 1.",
    "start": "1546770",
    "end": "1553657"
  },
  {
    "text": "So think of them as\nsearch probabilities, because then you'll see what\nthe point of this exercise is.",
    "start": "1553657",
    "end": "1560450"
  },
  {
    "text": "And the point of\nthis exercise is to find the BST T-- so\nwe're actually constructing",
    "start": "1560450",
    "end": "1568390"
  },
  {
    "text": "a binary search tree here. So it's a little more\ninteresting than a subsequence, for example-- it has a richer\nstructure associated with it--",
    "start": "1568390",
    "end": "1575280"
  },
  {
    "text": "than an exponential number\nof possible binary search trees that are associated\nwith a given set of n keys",
    "start": "1575280",
    "end": "1580679"
  },
  {
    "text": "that are all binary\nsearch trees. They're consistent, unbalanced,\nbalanced-- unbalanced",
    "start": "1580680",
    "end": "1585950"
  },
  {
    "text": "in one way versus another\nway, et cetera, et cetera. So we want to find a\nbinary search tree T",
    "start": "1585950",
    "end": "1593220"
  },
  {
    "text": "that minimizes sigma\ni equals 1 through n.",
    "start": "1593220",
    "end": "1602400"
  },
  {
    "text": "Obviously, we're going to have\nthis Wi that's the game here. Depth in that T-- so this\ndepth is for that T. What",
    "start": "1602400",
    "end": "1612710"
  },
  {
    "text": "is the depth of the node? And K of i plus 1.",
    "start": "1612710",
    "end": "1618200"
  },
  {
    "text": " And I'll explain\nexactly what this and tell you what\nprecisely the depth is.",
    "start": "1618200",
    "end": "1625710"
  },
  {
    "text": "But roughly speaking,\nthe depth of the root-- not roughly speaking. The depth of the root is 0.",
    "start": "1625710",
    "end": "1633330"
  },
  {
    "text": "And the depth of\n1 below the root is 1, and so on and so forth.",
    "start": "1633330",
    "end": "1639340"
  },
  {
    "text": "And so, as you can\nsee, what you want to do is collect in--\nroughly speaking,",
    "start": "1639340",
    "end": "1644670"
  },
  {
    "text": "you want to collect the high\nweight nodes to have low depth. If Wi is high, you want\nthe multiplicative factor",
    "start": "1644670",
    "end": "1655010"
  },
  {
    "text": "corresponding to depth T\nof that node, i, i-th node, to be small.",
    "start": "1655010",
    "end": "1660580"
  },
  {
    "text": "And if Wi is small, then you\ndon't mind the depth number",
    "start": "1660580",
    "end": "1667110"
  },
  {
    "text": "to be higher. You only have a certain\nnumber of low-depth nodes.",
    "start": "1667110",
    "end": "1673139"
  },
  {
    "text": "You only have one\nnode of depth 0. And you have two nodes of depth\n1, which means that you only",
    "start": "1673140",
    "end": "1680809"
  },
  {
    "text": "have one node where\nthat quantity there is going to be 1, because\nyou're doing 0 plus 1. And you have two nodes\nwhere the quantity",
    "start": "1680810",
    "end": "1687465"
  },
  {
    "text": "is going to be 2, and\nso on and so forth. So you have some room here\nto play with corresponding",
    "start": "1687465",
    "end": "1693520"
  },
  {
    "text": "to the BST structure, and you\nwant to minimize that quantity. Any questions so far?",
    "start": "1693520",
    "end": "1699330"
  },
  {
    "text": " All right, good. So the search probabilities\nwould be an example.",
    "start": "1699330",
    "end": "1708020"
  },
  {
    "text": "So in terms of a more\nconcrete application, you could imagine you had a\ndictionary, English to French,",
    "start": "1708020",
    "end": "1715670"
  },
  {
    "text": "French to English,\nwhat have you. And there are obviously\nwords that are more common,",
    "start": "1715670",
    "end": "1721830"
  },
  {
    "text": "let's say, in common\nspeech than others, and you do want to do the\ntranslation in a dynamic way",
    "start": "1721830",
    "end": "1728990"
  },
  {
    "text": "using this data structure. And you could imagine\nthat in this case, the search probability\nof a word is associated",
    "start": "1728990",
    "end": "1737870"
  },
  {
    "text": "with the occurrence of the\nword, the number of times",
    "start": "1737870",
    "end": "1743630"
  },
  {
    "text": "over some normalized\nnumber of words that this particular\nword occurs.",
    "start": "1743630",
    "end": "1749179"
  },
  {
    "text": "And that would be the way. So it makes sense to\ncreate a structure that",
    "start": "1749180",
    "end": "1754340"
  },
  {
    "text": "minimizes that function,\nbecause it would minimize the expected search\ncost when you want to take this entire\nessay, for example,",
    "start": "1754340",
    "end": "1761870"
  },
  {
    "text": "and convert it from English\nto French or vice versa. So this can-- if these\nare search probabilities,",
    "start": "1761870",
    "end": "1769490"
  },
  {
    "text": "then this would minimize--\nthis cost function here would minimize\nexpected search cost.",
    "start": "1769490",
    "end": "1779445"
  },
  {
    "start": "1779445",
    "end": "1785529"
  },
  {
    "text": "Make sense? Yeah. So that's the definition\nof the problem.",
    "start": "1785530",
    "end": "1792559"
  },
  {
    "text": "And now we have to talk about\nwhy this is complicated, why this requires\ndynamic programming.",
    "start": "1792560",
    "end": "1801289"
  },
  {
    "text": "Why can't we just do something\nfairly straightforward, like a greedy algorithm?",
    "start": "1801290",
    "end": "1807504"
  },
  {
    "text": "And so let's look into that. ",
    "start": "1807504",
    "end": "1825130"
  },
  {
    "text": "Let me give you a really\ngood sense for what's going on here with respect\nto this cost function and maybe a little\nabstract by giving you",
    "start": "1825130",
    "end": "1833039"
  },
  {
    "text": "a couple of concrete examples. First off, we got exponentially\nmany trees, exponential in n.",
    "start": "1833040",
    "end": "1844970"
  },
  {
    "text": "Let's say that n equals 2. So the number of nodes is 2. Then remember that I'm assuming\nthat the Ki's are all i's,",
    "start": "1844970",
    "end": "1855940"
  },
  {
    "text": "that 1 and 2 would\nbe the case for n equals 2 and 1, 2, 3 for\nn equals 3, et cetera.",
    "start": "1855940",
    "end": "1864040"
  },
  {
    "text": "So I could have a tree\nthat looks like that. And I could have a tree\nthat looks like this.",
    "start": "1864040",
    "end": "1869390"
  },
  {
    "text": "That's it. n equals 2, I got 2 trees. So in this case, my cost\nfunction is W1 plus 2W2,",
    "start": "1869390",
    "end": "1878455"
  },
  {
    "text": "and in this case, my cost\nfunction is 2W1 plus W2. ",
    "start": "1878455",
    "end": "1884720"
  },
  {
    "text": "Just to be clear, what this\nis the K, and it's also the i.",
    "start": "1884720",
    "end": "1893309"
  },
  {
    "text": "So the numbers that\nyou see inside, those are the i\nnumbers, which happen to be equal to the Ki numbers.",
    "start": "1893310",
    "end": "1900030"
  },
  {
    "text": "And the weight itself\nwould be the Wi. So I put W1 here, and the reason\nit only gets multiplied by 1",
    "start": "1900030",
    "end": "1906970"
  },
  {
    "text": "is because the depth here\nis 0, and I add 1 to it. The depth here is 1,\nand I add 1 to it, which",
    "start": "1906970",
    "end": "1913400"
  },
  {
    "text": "is why I have a 2 out here. Being a little pedantic here\nand pointing things out,",
    "start": "1913400",
    "end": "1921880"
  },
  {
    "text": "because you're going to start\nseeing some equations that are a little more\ncomplicated than this, and I don't want you\nto get confused as",
    "start": "1921880",
    "end": "1927940"
  },
  {
    "text": "to what the weight is and\nwhat the key number is and what the depth is. There's three things\ngoing on here.",
    "start": "1927940",
    "end": "1933760"
  },
  {
    "text": "So over here you see that\nI'm looking at W1 here, which is this key.",
    "start": "1933760",
    "end": "1939300"
  },
  {
    "text": "So the 1 corresponds to the 1. And this has a depth of 1, so\nI put a 2 in here, and so on.",
    "start": "1939300",
    "end": "1946080"
  },
  {
    "text": "So so far, so good? When you get to n equals 3,\nyou start getting-- well,",
    "start": "1946080",
    "end": "1953669"
  },
  {
    "text": "at this point, you have 1, 2,\n3, 4, 5-- you have five trees.",
    "start": "1953670",
    "end": "1959550"
  },
  {
    "text": "And the trees look like this. ",
    "start": "1959550",
    "end": "1969030"
  },
  {
    "text": "I'll draw them\nreally quickly just to get a sense of\nthe variety here. But I won't write the\nequations down for all of them.",
    "start": "1969030",
    "end": "1976950"
  },
  {
    "start": "1976950",
    "end": "1982898"
  },
  {
    "text": "There you go. So those are the five binary\ntrees associated with n equals 3, the\nbinary search trees.",
    "start": "1982899",
    "end": "1990270"
  },
  {
    "text": "And this is kind of cool. It's nice and balanced. The other ones aren't.",
    "start": "1990270",
    "end": "1997250"
  },
  {
    "text": "And I'm not looking at--",
    "start": "1997250",
    "end": "2002450"
  },
  {
    "text": "Should I have another one here? I guess I should have. ",
    "start": "2002450",
    "end": "2009880"
  },
  {
    "text": "This is a-- oh, no, no, no. So I'm not doing mirrors. So there are a\nbunch of other trees",
    "start": "2009880",
    "end": "2015910"
  },
  {
    "text": "that have the same equation\nassociated with two-- no, that's not true. Because these are it.",
    "start": "2015910",
    "end": "2022400"
  },
  {
    "text": "I was going to say that\nyou could put 3 in here, but that wouldn't be\na binary search tree. So this is it.",
    "start": "2022400",
    "end": "2028510"
  },
  {
    "text": "And we've got a bunch of trees. This one would be 2W1 plus W2\nplus 2W3 by the same process",
    "start": "2028510",
    "end": "2040049"
  },
  {
    "text": "that I used to show you\nthat W1 plus 2W2 for the n equals 2 case.",
    "start": "2040050",
    "end": "2045899"
  },
  {
    "text": "You just go off, and\nthat's the equation. And so your goal here in\nan algorithm-- clearly this is not the\nalgorithm you want",
    "start": "2045900",
    "end": "2051829"
  },
  {
    "text": "to enumerate all the\nexponentially many trees, compute the equations\nfor each of those trees,",
    "start": "2051830",
    "end": "2056940"
  },
  {
    "text": "and pick the minimum. I mean, that would work, but\nit would take exponential time.",
    "start": "2056940",
    "end": "2062690"
  },
  {
    "text": "But that's what\nyou have to do now. That's the goal. You absolutely want the best\npossible three that has,",
    "start": "2062690",
    "end": "2070349"
  },
  {
    "text": "for the given Wi's\nthat you're going to be assigned as\nconstants, you do want to find the one tree\nthat has the minimum sum,",
    "start": "2070350",
    "end": "2080719"
  },
  {
    "text": "and you want to do\nthat for arbitrary n, and you want to do that\nin polynomial time.",
    "start": "2080719",
    "end": "2086830"
  },
  {
    "text": "So the first thing that you\ndo when you have something",
    "start": "2086830",
    "end": "2093370"
  },
  {
    "text": "like this is forgetting\nabout the fact",
    "start": "2093370",
    "end": "2098590"
  },
  {
    "text": "that we're in a\ndynamic programming lecture or a dynamic programming\nmodule of this class,",
    "start": "2098590",
    "end": "2104910"
  },
  {
    "text": "when you see a problem like\nthis in the real world, you want to think about whether\na greedy algorithm would work",
    "start": "2104910",
    "end": "2111320"
  },
  {
    "text": "or not. And you don't want to go off\nand build this dynamic program",
    "start": "2111320",
    "end": "2117100"
  },
  {
    "text": "solution, which is,\nchances are, going to be more inefficient then\na greedy solution, which,",
    "start": "2117100",
    "end": "2125549"
  },
  {
    "text": "if it produces the optimum\nanswer, is the best way to go.",
    "start": "2125550",
    "end": "2130660"
  },
  {
    "text": "So an obvious greedy\nsolution would be to pick K of r in\nsome greedy fashion.",
    "start": "2130660",
    "end": "2141220"
  },
  {
    "text": " And what is the obvious\nway of picking K of r",
    "start": "2141220",
    "end": "2148180"
  },
  {
    "text": "to try and get a\ngreedy solution that at least attempts to\nminimize that cost function",
    "start": "2148180",
    "end": "2153510"
  },
  {
    "text": "that we have there? AUDIENCE: Highest weight. PROFESSOR: Highest\nweight, right? So just pick K of r\nto be highest weight.",
    "start": "2153510",
    "end": "2159430"
  },
  {
    "text": "Because that goes back to what\nI said about if Wi is high, you want this value\nhere to be small.",
    "start": "2159430",
    "end": "2168170"
  },
  {
    "text": "So that's essentially\nyour greedy heuristic. So K of r should be picked\nin a greedy fashion.",
    "start": "2168170",
    "end": "2173390"
  },
  {
    "text": "So what you do is\nyou pick K of r as the root in this\nparticular problem. And you could certainly\napply this greedy technique",
    "start": "2173390",
    "end": "2180190"
  },
  {
    "text": "recursively. So you do that for\nevery subproblem that you find\nbecause when you do",
    "start": "2180190",
    "end": "2186220"
  },
  {
    "text": "this choice of the root for\nKr in the current problem that you have, you immediately\nsplit the keys into two",
    "start": "2186220",
    "end": "2195310"
  },
  {
    "text": "sets, the sets that have to\ngo on the left-hand side of Kr",
    "start": "2195310",
    "end": "2200380"
  },
  {
    "text": "and the sets that have to go\non the right-hand side of Kr. So in this case,\nyou know that you're going to have a bunch of\nkeys here that correspond",
    "start": "2200380",
    "end": "2210110"
  },
  {
    "text": "to Ki to K4, and\nover here, you're",
    "start": "2210110",
    "end": "2217880"
  },
  {
    "text": "going to have-- oh, Kr\nminus 1, I should say, because you already\nhave Kr out there. And the keys here are going to\nbe Kr plus 1 to Kj, if overall",
    "start": "2217880",
    "end": "2230780"
  },
  {
    "text": "I'm going to say that eij is the\ncost of the optimal BST on Ki,",
    "start": "2230780",
    "end": "2249415"
  },
  {
    "text": "Ki plus 1, all the way to Kj.",
    "start": "2249415",
    "end": "2257090"
  },
  {
    "text": " So I'm kind of already\nsetting myself up here",
    "start": "2257090",
    "end": "2263130"
  },
  {
    "text": "for dynamic programming. But it also makes\nsense in the case of a greedy algorithm, where\nthis greedy heuristic is going",
    "start": "2263130",
    "end": "2270250"
  },
  {
    "text": "to be applied recursively. So initially, you're\ngoing to have E(1, n)--",
    "start": "2270250",
    "end": "2276550"
  },
  {
    "text": "so if you want to\ncompute E(1, n), which is the cost of the optimal\nBST on the original problem,",
    "start": "2276550",
    "end": "2285829"
  },
  {
    "text": "all the way from 1 to n,\nyou're going to look at it, and you're going to say, I\nhave a bunch of keys here",
    "start": "2285830",
    "end": "2293650"
  },
  {
    "text": "of different weights that\ncorrespond to K1 through Kn. I'm going to pick the\nKr that corresponds",
    "start": "2293650",
    "end": "2299859"
  },
  {
    "text": "to the maximum\nweight, and I'm going to use that as the\nroot node, and I'm",
    "start": "2299860",
    "end": "2305160"
  },
  {
    "text": "going to stick that up there. And the reason I did\nthat is because I believe",
    "start": "2305160",
    "end": "2310590"
  },
  {
    "text": "that this greedy heuristic\nis going to work, where this maximum\nweight node should have",
    "start": "2310590",
    "end": "2316660"
  },
  {
    "text": "the absolute minimum depth. So I stick that up there. And then my BST invariant tells\nme that Ki through Kr minus 1--",
    "start": "2316660",
    "end": "2326620"
  },
  {
    "text": "remember, these are\nsorted, and they go in increasing order,\nas I have up here.",
    "start": "2326620",
    "end": "2333966"
  },
  {
    "text": "You're going to have\nthose on the left, and you're going to\nhave those on the right. And then you've got to\ngo solve this problem.",
    "start": "2333966",
    "end": "2339790"
  },
  {
    "text": "And you could certainly\napply the greedy heuristic to solve this problem. You could go essentially\nfind the K that",
    "start": "2339790",
    "end": "2349480"
  },
  {
    "text": "has the highest weight. So you look at Wi\nthrough Wr minus 1,",
    "start": "2349480",
    "end": "2354849"
  },
  {
    "text": "and you find the K that\nhas the highest weight. Actually, you're not\ngoing midway here.",
    "start": "2354850",
    "end": "2359940"
  },
  {
    "text": "It's quite possible\nthat Kr is K of n.",
    "start": "2359940",
    "end": "2365099"
  },
  {
    "text": "It just happens to\nbe Kr is K of n. So that means that you have the\nhighest weight node up here,",
    "start": "2365100",
    "end": "2372380"
  },
  {
    "text": "but it's also the biggest key. So all of the nodes are\ngoing to be on the left.",
    "start": "2372380",
    "end": "2377960"
  },
  {
    "text": "So this greedy heuristic-- and\nnow you're starting to see, maybe there's a problem here. Because if you have a situation\nwhere the highest weight",
    "start": "2377960",
    "end": "2388560"
  },
  {
    "text": "node is also the\nlargest node, you're going to get a pretty\nunbalanced tree.",
    "start": "2388560",
    "end": "2395790"
  },
  {
    "text": "So I can tell you that\ngreedy doesn't work. And when I gave this\nlecture, I think",
    "start": "2395790",
    "end": "2402410"
  },
  {
    "text": "it was a couple of years\nago, I made that statement, and this annoying student\nasked me for an example.",
    "start": "2402410",
    "end": "2411440"
  },
  {
    "text": "And I couldn't come up with one. And so I kind of bailed\non it, went on, completely",
    "start": "2411440",
    "end": "2418170"
  },
  {
    "text": "dissatisfied, of course. And by the end of the\nlecture, the same student",
    "start": "2418170",
    "end": "2423310"
  },
  {
    "text": "came up with a counter-example. So I'm going to have\nput that up here and thank the student who\nsent me an email about it.",
    "start": "2423310",
    "end": "2437150"
  },
  {
    "text": "And so here's a\nconcrete example. It turns out I was trying\nto get a tree node example",
    "start": "2437150",
    "end": "2443240"
  },
  {
    "text": "for a few minutes and failed. It's, I think,\nimpossible-- I haven't",
    "start": "2443240",
    "end": "2449609"
  },
  {
    "text": "proved this-- to\nfind a tree node example with arbitrary weights\nfor which the greedy algorithm",
    "start": "2449610",
    "end": "2456720"
  },
  {
    "text": "fails. But four nodes, it fails. So that's the good news.",
    "start": "2456720",
    "end": "2462770"
  },
  {
    "text": "So here's the example,\nthanks to Nick Davis. ",
    "start": "2462770",
    "end": "2473900"
  },
  {
    "text": "And it looks like this. ",
    "start": "2473900",
    "end": "2505000"
  },
  {
    "text": "So I claim that the\ngreedy algorithm for the problem that is given\nto me would produce this BST.",
    "start": "2505000",
    "end": "2516250"
  },
  {
    "text": "And the reason for\nthat is simple. The highest weight\nnode happens to be node",
    "start": "2516250",
    "end": "2522270"
  },
  {
    "text": "2, which has a weight of 10. So I would pick that, and\nI would stick that up here,",
    "start": "2522270",
    "end": "2527567"
  },
  {
    "text": "which means, of\ncourse, that I'm going to have to have 1 on\nthis side, and I'm going to have to have 4\nand 3 on the other side.",
    "start": "2527567",
    "end": "2534400"
  },
  {
    "text": "And since 4 has a higher weight\nthan 3, I'd pick that first.",
    "start": "2534400",
    "end": "2539740"
  },
  {
    "text": "And then 3 would\nhave to go over here. So if I go do the math, the\ncost is going to be 1 times 2--",
    "start": "2539740",
    "end": "2548510"
  },
  {
    "text": "and I'll explain what\nthese numbers are. I did tell you it was going\nto get a little cluttered here",
    "start": "2548510",
    "end": "2555359"
  },
  {
    "text": "with lots of numbers. But if you keep that\nequation in mind, then this should all work out.",
    "start": "2555360",
    "end": "2562200"
  },
  {
    "text": "So what do I have here? I'm just computing-- this is W1.",
    "start": "2562200",
    "end": "2568960"
  },
  {
    "text": "So you see the first numbers in\neach of these are the weights. And so this would\nbe W2 and et cetera.",
    "start": "2568960",
    "end": "2575230"
  },
  {
    "text": "And you can see that\nthis is at depth 1, which means I have to have\n2 here, because I'm",
    "start": "2575230",
    "end": "2580360"
  },
  {
    "text": "adding 1 to the depth. So I have 1 times 2, 10\ntimes 1, because that's at the root, 9\ntimes 2, et cetera.",
    "start": "2580360",
    "end": "2587580"
  },
  {
    "text": "And I get 54. It turns out the\noptimum tree-- you can do better than that if you\npick 3, and you go like this.",
    "start": "2587580",
    "end": "2600210"
  },
  {
    "start": "2600210",
    "end": "2608670"
  },
  {
    "text": "And so what you have here\nis the cost equals 1 times 3 plus 10 times 2 plus 8 times\n1 plus 9 times 2, and that's 49.",
    "start": "2608670",
    "end": "2621214"
  },
  {
    "text": " So I'll let you look at that.",
    "start": "2621215",
    "end": "2627410"
  },
  {
    "text": "The bottom line is\nbecause of the way the weights are set\nup here, you really",
    "start": "2627410",
    "end": "2634310"
  },
  {
    "text": "want to use the top\nthree spots, which",
    "start": "2634310",
    "end": "2639530"
  },
  {
    "text": "have that the minimum depth,\nfor the highest weight nodes. And so you can see that I could\nmake these weights arbitrary,",
    "start": "2639530",
    "end": "2649980"
  },
  {
    "text": "obviously, and I could\nbreak a greedy algorithm as this little example shows. So we got no recurs here.",
    "start": "2649980",
    "end": "2657059"
  },
  {
    "text": "We got to do some more work. We're going to have to use\nDP to solve this problem. The good news is DP\ndoes solve this problem.",
    "start": "2657060",
    "end": "2663010"
  },
  {
    "text": " So let's take a look\nat the decomposition.",
    "start": "2663010",
    "end": "2669340"
  },
  {
    "text": "And as with anything\nelse, the key is the step that\ncorresponds to breaking up",
    "start": "2669340",
    "end": "2678090"
  },
  {
    "text": "the original problem\ninto two parts or more",
    "start": "2678090",
    "end": "2683860"
  },
  {
    "text": "that essentially give you\nthis sort of decomposition. And we don't quite know. So this is really the\nkey question here.",
    "start": "2683860",
    "end": "2690440"
  },
  {
    "text": "We don't quite know what the\nroot node is going to be. So what do we do when we\ndon't know what to do?",
    "start": "2690440",
    "end": "2699309"
  },
  {
    "text": "What do we do in DP when\nwe don't know what to do? This is a very\nprofound question.",
    "start": "2699310",
    "end": "2706035"
  },
  {
    "text": "What do you do? AUDIENCE: Guess. PROFESSOR: You guess. And not only do yo guess,\nyou guess all outcomes.",
    "start": "2706035",
    "end": "2712940"
  },
  {
    "text": "You say, is it going\nto come up heads? Is it going to come up tails? I'll guess both. You have a die.",
    "start": "2712940",
    "end": "2718520"
  },
  {
    "text": "It's going to get rolled,\na 1, 2, 3, 4, 5, 6. Guess them all, right?",
    "start": "2718520",
    "end": "2723930"
  },
  {
    "text": "So if you're going to have to\nguess that the root node could be any of the keys,\nand it still--",
    "start": "2723930",
    "end": "2731980"
  },
  {
    "text": "I mean there's a linear\nnumber of guesses there. That's the good news. It's going to stay\npolynomial time.",
    "start": "2731980",
    "end": "2736996"
  },
  {
    "text": "So we're going to have to guess. And once you do that\nguess, it turns out that decomposition\nthat you see up there",
    "start": "2736997",
    "end": "2743320"
  },
  {
    "text": "is exactly what we want. It's just that the\ngreedy algorithm didn't bother with all of\nthese different guesses.",
    "start": "2743320",
    "end": "2750210"
  },
  {
    "text": "And the DP is different\nfrom the greedy algorithm because it's going to do\neach of those guesses,",
    "start": "2750210",
    "end": "2755910"
  },
  {
    "text": "and it's going to pick the\nbest one that comes out of all of those guesses. So it's really not that\ndifferent from greedy.",
    "start": "2755910",
    "end": "2762500"
  },
  {
    "text": "So we'll keep that up\nthere, leave that here. Let's go over here.",
    "start": "2762500",
    "end": "2767990"
  },
  {
    "text": "So the recursion\nhere is not going to be that hard, once you have\ngotten the insight that you",
    "start": "2767990",
    "end": "2776330"
  },
  {
    "text": "just have to go make a linear\nnumber of guesses corresponding to the root node for your\nparticular subproblem,",
    "start": "2776330",
    "end": "2782171"
  },
  {
    "text": "and obviously this\nhappens recursively.  So there's a little\nsomething here",
    "start": "2782171",
    "end": "2789230"
  },
  {
    "text": "that that I'll point\nout with respect to writing these equations out. So what I have here,\njust to be clear,",
    "start": "2789230",
    "end": "2796270"
  },
  {
    "text": "is what I wrote up there. Even when I was talking\nabout the greedy algorithm, I had the subproblems defined.",
    "start": "2796270",
    "end": "2803190"
  },
  {
    "text": "So the original problem\nis E1 through n. The subproblems\ncorrespond to eij.",
    "start": "2803190",
    "end": "2811170"
  },
  {
    "text": "And given a subproblem,\nonce I make a root choice, I get two subproblems that\nresult from the root choice.",
    "start": "2811170",
    "end": "2819660"
  },
  {
    "text": "And each of those\ntwo subproblems is going to be\nsomething-- and this",
    "start": "2819660",
    "end": "2825040"
  },
  {
    "text": "is something to keep in mind as\nwe write these equations out-- they're going to be one\nlevel below the root.",
    "start": "2825040",
    "end": "2831380"
  },
  {
    "text": "So keep in mind that the\noriginal eij subproblem corresponded to this\nlevel, but that Ei",
    "start": "2831380",
    "end": "2839560"
  },
  {
    "text": "r minus 1 problem and\nthe E r plus 1j problem",
    "start": "2839560",
    "end": "2848940"
  },
  {
    "text": "are at one level below. So keep that in mind as we\nwrite these equations up.",
    "start": "2848940",
    "end": "2857730"
  },
  {
    "text": "And so what I want to do here\nis just write the recurrence. And after that, things\nbecome fairly mechanical.",
    "start": "2857730",
    "end": "2864410"
  },
  {
    "text": "The fun is in the recurrence. So I got Wi if i equals j.",
    "start": "2864410",
    "end": "2872990"
  },
  {
    "text": "And so I'm at this level. And if I just have one node\nleft, then at that level,",
    "start": "2872990",
    "end": "2880330"
  },
  {
    "text": "I'm going to pay the weight\nassociated with that node, and I'm going to have\nto do a certain amount",
    "start": "2880330",
    "end": "2887720"
  },
  {
    "text": "of multiplication here\nwith respect to the depth.",
    "start": "2887720",
    "end": "2892940"
  },
  {
    "text": "But I'm just talking about\neij as the subproblem weight, just focusing in\non that problem.",
    "start": "2892940",
    "end": "2899580"
  },
  {
    "text": "So if I only have one\nnode, it's the root node. And that weight\nis going to be Wi,",
    "start": "2899580",
    "end": "2904740"
  },
  {
    "text": "because the root\nnode has depth of 0, and I'm going to add 1 to it. So for that\nsubproblem, I got Wi.",
    "start": "2904740",
    "end": "2912427"
  },
  {
    "text": "Keep that in mind, because\nthat's the only subtlety here with respect to these\nequations, making sure",
    "start": "2912427",
    "end": "2917620"
  },
  {
    "text": "that our actual cost\nfunction that we're computing has the correct\ndepth multiplicands",
    "start": "2917620",
    "end": "2925099"
  },
  {
    "text": "associated with it. So then we have our\nlinear guessing.",
    "start": "2925100",
    "end": "2931410"
  },
  {
    "text": "And I might have said\nmax at some point. We want to get the min here.",
    "start": "2931410",
    "end": "2937240"
  },
  {
    "text": "And I had minimize\nhere, so I think I wrote things down\ncorrect, but at some point, I think I might have said\nwe want to maximize cost.",
    "start": "2937240",
    "end": "2944609"
  },
  {
    "text": "But we do want to minimize\ncost here corresponding to the expected search.",
    "start": "2944610",
    "end": "2950420"
  },
  {
    "text": "So we're doing a linear,\nand we're doing a min. And we're going\nto go off and look",
    "start": "2950420",
    "end": "2956900"
  },
  {
    "text": "at each of the different\nnodes as being the root, just like we discussed.",
    "start": "2956900",
    "end": "2964030"
  },
  {
    "text": "And what I'm going to do here is\nI'm going to simply say, first,",
    "start": "2964030",
    "end": "2969420"
  },
  {
    "text": "that I'm going to\nlook at Ei r minus 1, which corresponds to this, and\nI'm going to have plus E of r",
    "start": "2969420",
    "end": "2982270"
  },
  {
    "text": "plus 1, j. And at this point,\nI don't quite have",
    "start": "2982270",
    "end": "2994300"
  },
  {
    "text": "what I want because\nI haven't actually taken into account the fact that\nthe depth of the Ei r minus 1",
    "start": "2994300",
    "end": "3005230"
  },
  {
    "text": "and the r plus 1j is\n1 more than the eij.",
    "start": "3005230",
    "end": "3011090"
  },
  {
    "text": "So it's 1 more than that. And I also haven't taken\ninto account the fact that, in this case, I definitely\nneed to add a Wi as well.",
    "start": "3011090",
    "end": "3021740"
  },
  {
    "text": "Because the root node is part\nof my solution in both cases. In one case, it ended my\nsolution, the top case.",
    "start": "3021740",
    "end": "3030021"
  },
  {
    "text": "But in this case, it's\nalso the root node, as you can see over\non the left, and I've got to add that in there. So I definitely need\nto add a Wi here.",
    "start": "3030021",
    "end": "3038680"
  },
  {
    "text": "And what else do I need to add? ",
    "start": "3038680",
    "end": "3044510"
  },
  {
    "text": "From a standpoint\nof the weights, what other weights do I\nneed to add to this line?",
    "start": "3044510",
    "end": "3053443"
  },
  {
    "text": "Yeah? Go ahead. AUDIENCE: First of all,\nshouldn't that be a Wr? PROFESSOR: First of\nall, that should be",
    "start": "3053443",
    "end": "3059480"
  },
  {
    "text": "a Wr, you're exactly correct. AUDIENCE: And you want\nto add all the weights. PROFESSOR: And you want to\nadd all the weights, right.",
    "start": "3059480",
    "end": "3066560"
  },
  {
    "text": "You're exactly right. I have two more\nFrisbees, but I need to use them for something else.",
    "start": "3066560",
    "end": "3072750"
  },
  {
    "text": "So you get one next time. Or do I have more than that?",
    "start": "3072750",
    "end": "3078910"
  },
  {
    "text": "No, no. These are precious\nFrisbees here. Sorry, man. ",
    "start": "3078910",
    "end": "3085250"
  },
  {
    "text": "And you corrected me, too. Shoot. This is sad.",
    "start": "3085250",
    "end": "3090990"
  },
  {
    "text": "So that needed to be a Wr. But you also need to add up all\nof the nodes that are in here,",
    "start": "3090990",
    "end": "3097920"
  },
  {
    "text": "because they're one more level. And now you see why\nI made the mistake.",
    "start": "3097920",
    "end": "3103950"
  },
  {
    "text": "I don't usually make mistakes. But what I really\nwant-- actually it's",
    "start": "3103950",
    "end": "3109609"
  },
  {
    "text": "more like-- I don't\nknow, a few per lecture. Constant order one mistakes. ",
    "start": "3109610",
    "end": "3116700"
  },
  {
    "text": "I'm going to say this is\nWi, j, where Wi, j is simply",
    "start": "3116700",
    "end": "3122560"
  },
  {
    "text": "the sum of all of the\nweights from i to j. ",
    "start": "3122560",
    "end": "3137690"
  },
  {
    "text": "And this makes perfect\nsense, because the nice thing is that I don't even need\nto put an r in there. ",
    "start": "3137690",
    "end": "3145220"
  },
  {
    "text": "I could choose a particular r. Wr will be in there. But all of the other nodes are\ngoing to be in there anyway.",
    "start": "3145220",
    "end": "3151920"
  },
  {
    "text": "So it doesn't really\nmatter what the r selection is corresponding\nto this term here.",
    "start": "3151920",
    "end": "3157310"
  },
  {
    "text": "I will put it inside\nthe minimization. This bracket here\nis closed with that,",
    "start": "3157310",
    "end": "3163500"
  },
  {
    "text": "but you can pull that\nout, because that doesn't depend on r. It's just going to be there\nfor all of the cases, all",
    "start": "3163500",
    "end": "3170359"
  },
  {
    "text": "of the guesses. So that's it. That's our recurrence\nrelationship corresponding",
    "start": "3170360",
    "end": "3177020"
  },
  {
    "text": "to the DP for this\nparticular problem.",
    "start": "3177020",
    "end": "3182840"
  },
  {
    "text": "You can go figure out\nwhat the complexity is. I have other things to\ndo, so we'll move on.",
    "start": "3182840",
    "end": "3189260"
  },
  {
    "text": "But you can do the\nsame things, and these are fairly mechanical at this\npoint to go write code for it,",
    "start": "3189260",
    "end": "3194849"
  },
  {
    "text": "trace the solution to get\nthe optimum binary search tree, yadda, yadda, yadda.",
    "start": "3194850",
    "end": "3201170"
  },
  {
    "text": "Any questions about this\nequation or anything else? Do people get that? Yeah, go ahead. AUDIENCE: What is\nthe depth input?",
    "start": "3201170",
    "end": "3208300"
  },
  {
    "text": "PROFESSOR: So the depth is\ngetting added by the weights. So basically what's happening\nis that as I go deeper",
    "start": "3208300",
    "end": "3215630"
  },
  {
    "text": "into the recursion, I'm adding\nthe weights and potentially multiple times,\ndepending on the depth.",
    "start": "3215630",
    "end": "3222750"
  },
  {
    "text": "So if you really think\nabout it, this Wij, I added all of these weights.",
    "start": "3222750",
    "end": "3228300"
  },
  {
    "text": "But when you go\ninto this recursion, into the ei of r\nminus 1, well, you're going to see i to r minus 1 in\nthe next level of recursion.",
    "start": "3228300",
    "end": "3237330"
  },
  {
    "text": "So you would have\nadded the weight again. So it's not the case\nthat the weights are only",
    "start": "3237330",
    "end": "3242810"
  },
  {
    "text": "appearing once. They're, in fact,\nappearing this many times. So that's what kind of\ncute about this, the way",
    "start": "3242810",
    "end": "3249580"
  },
  {
    "text": "we wrote it.  Any other questions? ",
    "start": "3249580",
    "end": "3256610"
  },
  {
    "text": "All right, good. So we're done with that. So one last example.",
    "start": "3256610",
    "end": "3261740"
  },
  {
    "text": "This is, again, a little bit\ndifferent from the examples of DP we've looked at up until\nnow, because it's a game.",
    "start": "3261740",
    "end": "3270670"
  },
  {
    "text": "And you have an\nopponent, and you have to figure out\nwhat the opponent is going to do and try to win.",
    "start": "3270670",
    "end": "3281170"
  },
  {
    "text": "I suppose you could\ntry to lose as well. But let's assume here, same\nthing with minimization",
    "start": "3281170",
    "end": "3286700"
  },
  {
    "text": "and maximization,\nmost of the time you can invert these\ncost functions, and DP will still work.",
    "start": "3286700",
    "end": "3293750"
  },
  {
    "text": "But let's assume here that\nyou want to win this game. So the game is an\nalternating coins game",
    "start": "3293750",
    "end": "3300280"
  },
  {
    "text": "where we have a row of n\ncoins of values V1 through Vn.",
    "start": "3300280",
    "end": "3313040"
  },
  {
    "text": "These are not necessarily\nin any particular order. And n is even.",
    "start": "3313040",
    "end": "3318630"
  },
  {
    "text": "And the goal here is\nselect the outer coins.",
    "start": "3318630",
    "end": "3326279"
  },
  {
    "text": "So select either the first\nour last coin from the row,",
    "start": "3326280",
    "end": "3339900"
  },
  {
    "text": "and then the opponent plays. Remove permanently, but\nadd it to your value",
    "start": "3339900",
    "end": "3352250"
  },
  {
    "text": "and receive the value. ",
    "start": "3352250",
    "end": "3357980"
  },
  {
    "text": "So I need two volunteers\nto play this game.",
    "start": "3357980",
    "end": "3363170"
  },
  {
    "text": "And you want to\nmaximize the value. The winner gets a blue Frisbee.",
    "start": "3363170",
    "end": "3369220"
  },
  {
    "text": "The loser gets a purple\nFrisbee, because blue is greater than purple. And you might ask, why is that.",
    "start": "3369220",
    "end": "3376540"
  },
  {
    "text": "Well, if you went to a beach,\nand you saw water this color, and you went to another beach,\nand you saw water this color,",
    "start": "3376540",
    "end": "3384609"
  },
  {
    "text": "which beach would you pick? Right? This is Cozumel. This is Boston Harbor.",
    "start": "3384610",
    "end": "3390790"
  },
  {
    "text": "So blue is greater than purple. Don't use this proof\ntechnique in the quiz.",
    "start": "3390790",
    "end": "3396160"
  },
  {
    "text": "So do I have a couple of\nvolunteers to play this game? Two of them over there.",
    "start": "3396160",
    "end": "3401470"
  },
  {
    "text": "Are you waving for him? Yeah. I see one. You can come down. Another volunteer? ",
    "start": "3401470",
    "end": "3408711"
  },
  {
    "text": "Yeah. Over there. You don't get your Frisbees yet. So we're going to\nmake this really fair.",
    "start": "3408711",
    "end": "3416537"
  },
  {
    "text": "What's your name? AUDIENCE: Josiah. PROFESSOR: Josiah. AUDIENCE: Tessa. PROFESSOR: Tessa. Josiah and Tessa, I'm going\nto write out a bunch of-- it's",
    "start": "3416538",
    "end": "3426369"
  },
  {
    "text": "going to be a fairly short game. ",
    "start": "3426370",
    "end": "3432490"
  },
  {
    "text": "And we're going\nto be really fair, and we're going to flip a coin\nto decide whether Josiah goes",
    "start": "3432490",
    "end": "3437940"
  },
  {
    "text": "first-- you can pick\nheads or tails-- or whether Tessa goes first.",
    "start": "3437940",
    "end": "3444460"
  },
  {
    "text": "Actually if you win, you can\nlet her go first if you want. But you get to choose.",
    "start": "3444460",
    "end": "3449810"
  },
  {
    "text": "AUDIENCE: All right. PROFESSOR: So pick. AUDIENCE: Heads. PROFESSOR: That's heads. Do you want to go first, or do\nyou want to let Tessa go first?",
    "start": "3449810",
    "end": "3458994"
  },
  {
    "text": "[LAUGHTER] AUDIENCE: You should go first.",
    "start": "3458995",
    "end": "3464133"
  },
  {
    "text": " PROFESSOR: All right. So Tessa, you get to go first.",
    "start": "3464133",
    "end": "3470320"
  },
  {
    "text": "AUDIENCE: OK, 6. PROFESSOR: 6, OK. So let's just say T.\nSo you get to choose",
    "start": "3470320",
    "end": "3480270"
  },
  {
    "text": "either 25 or 4, Josiah. AUDIENCE: I think I'd pick 25. PROFESSOR: You think\nyou'll take 25.",
    "start": "3480270",
    "end": "3486550"
  },
  {
    "text": "So that's j. So it's not on the 4 and 19 over\nhere because those are gone.",
    "start": "3486550",
    "end": "3491960"
  },
  {
    "text": "So your turn again. AUDIENCE: OK. Can I take a minute,\nor should I just go?",
    "start": "3491960",
    "end": "3498190"
  },
  {
    "text": "PROFESSOR: Well, you\ncan take 30 seconds. ",
    "start": "3498190",
    "end": "3503992"
  },
  {
    "text": "AUDIENCE: 19. PROFESSOR: 19, OK. ",
    "start": "3503992",
    "end": "3518576"
  },
  {
    "text": "AUDIENCE: 4. [LAUGHTER] AUDIENCE: All right, 4. PROFESSOR: 4.",
    "start": "3518576",
    "end": "3524560"
  },
  {
    "text": "All right. And 42? AUDIENCE: Yeah. PROFESSOR: All right, 42.",
    "start": "3524560",
    "end": "3530849"
  },
  {
    "text": "This is one strange game. Now, we get to add\nup the numbers.",
    "start": "3530850",
    "end": "3537130"
  },
  {
    "text": "This is going to be tight. 4 plus 39 is 43.",
    "start": "3537130",
    "end": "3543050"
  },
  {
    "text": "43 plus 25 is 68.  42 plus 19 is 61.",
    "start": "3543050",
    "end": "3551010"
  },
  {
    "text": "61 plus 6 is 67. Ooh. Well, you get Frisbees.",
    "start": "3551010",
    "end": "3559130"
  },
  {
    "text": "Well, blue for you. I mean, you could give\nher blue if you like. AUDIENCE: I prefer purple. PROFESSOR: You prefer purple.",
    "start": "3559130",
    "end": "3564458"
  },
  {
    "text": "Thanks. Good job. [APPLAUSE]",
    "start": "3564458",
    "end": "3571830"
  },
  {
    "text": "No offense is intended\nto Josiah and Tessa, but that was a classic example\nof how not to play the game.",
    "start": "3571830",
    "end": "3579930"
  },
  {
    "text": "First off, Josiah could\nhave won regardless",
    "start": "3579930",
    "end": "3584970"
  },
  {
    "text": "of the coins that were\nup there, regardless of the values of the coins,\nif he'd chosen to go first.",
    "start": "3584970",
    "end": "3591670"
  },
  {
    "text": "So this game, the\nperson who goes first is guaranteed to not lose.",
    "start": "3591670",
    "end": "3596790"
  },
  {
    "text": "And by that, I mean you\nmay have a situation where you can have a tie in\nterms of the values,",
    "start": "3596790",
    "end": "3603430"
  },
  {
    "text": "but you're guaranteed\nto not lose. Now, he ended up winning\nanyway, because there",
    "start": "3603430",
    "end": "3608690"
  },
  {
    "text": "were other errors\nmade during this, and I don't have the time\nto enumerate all of them.",
    "start": "3608690",
    "end": "3615445"
  },
  {
    "text": "[LAUGHTER] So we're just going to go move\non and do the right thing.",
    "start": "3615445",
    "end": "3621420"
  },
  {
    "start": "3621420",
    "end": "3628290"
  },
  {
    "text": "So let me first tell\nyou, outside of DP, just in case you play this game\nover Spring Break or something,",
    "start": "3628290",
    "end": "3635330"
  },
  {
    "text": "how you can win this\ngame without having to compute complicated\nrecursive memoization DP",
    "start": "3635330",
    "end": "3644170"
  },
  {
    "text": "programs for this case. So let's say I have V1, V2,\nV3, all the way to V n minus 1",
    "start": "3644170",
    "end": "3653190"
  },
  {
    "text": "and Vn. And remember n is even. So you've got to\npick n over 2 coins",
    "start": "3653190",
    "end": "3658830"
  },
  {
    "text": "if you're the first\nplayer and n over 2 if you're the second player. ",
    "start": "3658830",
    "end": "3665630"
  },
  {
    "text": "So what the first\nplayer does is simply",
    "start": "3665630",
    "end": "3673740"
  },
  {
    "text": "compute V1-- take the odd\nnumbers-- and n is even,",
    "start": "3673740",
    "end": "3679150"
  },
  {
    "text": "so you've got V n\nminus 1 being odd. Compute V1 plus V3 all\nthe way to V n minus 1,",
    "start": "3679150",
    "end": "3686070"
  },
  {
    "text": "and compare that with\nthe even positions,",
    "start": "3686070",
    "end": "3691730"
  },
  {
    "text": "V2 plus V4 all the way Vn. So in this particular\ninstance, Josiah,",
    "start": "3691730",
    "end": "3700330"
  },
  {
    "text": "who went second,\nif you just look at the odd positions, which\nis, in fact, what he ended up",
    "start": "3700330",
    "end": "3706799"
  },
  {
    "text": "picking, it was 4 plus\n39 plus 25, which was 68.",
    "start": "3706800",
    "end": "3712510"
  },
  {
    "text": "So you can do this\ncomputation beforehand. You compute this to\nbe 68, in our case. Compare that with 67.",
    "start": "3712510",
    "end": "3720890"
  },
  {
    "text": "And you don't give up your\nfirst-player advantage.",
    "start": "3720890",
    "end": "3727057"
  },
  {
    "text": "So you're going with\nthe first player. But now you say, I know\nthat I can set this up--",
    "start": "3727057",
    "end": "3734065"
  },
  {
    "text": "and that wasn't\nthe order that he did this-- but I know\nI can set this up so I always have a chance to\nget V1, V3, V5, et cetera.",
    "start": "3734065",
    "end": "3743220"
  },
  {
    "text": "Because let's just say that\nthe first player Josiah started first. And he decided, in this\ncase, that the odd values",
    "start": "3743220",
    "end": "3750700"
  },
  {
    "text": "are the ones that win. So let's say he picks V1.",
    "start": "3750700",
    "end": "3756630"
  },
  {
    "text": "At this point, Tessa\nsees V2 through Vn. So you're just looking at that.",
    "start": "3756630",
    "end": "3762980"
  },
  {
    "text": "Now Tessa could either pick\nV2 or she could pick Vn. In that case, Josiah,\nwho's the first player,",
    "start": "3762980",
    "end": "3770890"
  },
  {
    "text": "could pick V3 or Vn minus\n1 and stick with his rule of picking the odd coins.",
    "start": "3770890",
    "end": "3776910"
  },
  {
    "text": "So regardless of\nwhat Tessa does, the first player,\nJosiah, could pick odd",
    "start": "3776910",
    "end": "3784320"
  },
  {
    "text": "if odd was the way to go or if\nthe values were such that, even with the way to go,\nhe could go even.",
    "start": "3784320",
    "end": "3790700"
  },
  {
    "text": "So no reason for the\nfirst player to lose. But let's just say that you're\na nasty person, Michael Jordan",
    "start": "3790700",
    "end": "3802170"
  },
  {
    "text": "nasty. You want to just\npress your opponent.",
    "start": "3802170",
    "end": "3807890"
  },
  {
    "text": "You want to make sure they\nnever want to play you again. So now you have a\nmaximization problem.",
    "start": "3807890",
    "end": "3816560"
  },
  {
    "text": "So this is clearly not DP. You don't need DP to add\nup a bunch of numbers. But let's say that you want\nto, given a set of coins,",
    "start": "3816560",
    "end": "3824250"
  },
  {
    "text": "V1 through Vn, you want\na dynamic strategy that",
    "start": "3824250",
    "end": "3831260"
  },
  {
    "text": "gives you the maximum value. This odd versus even\nis a bit constraining,",
    "start": "3831260",
    "end": "3838960"
  },
  {
    "text": "because you're stuck\nto these positions. And it's good to be\nin that situation if you just want to win and\nyou don't care how you win.",
    "start": "3838960",
    "end": "3846040"
  },
  {
    "text": "But if you want to\nmaximize, then it's a more complicated problem. And so we have to talk about\nhow you would do something that",
    "start": "3846040",
    "end": "3853980"
  },
  {
    "text": "would give-- maybe it would be\nV1 and V4 and something else,",
    "start": "3853980",
    "end": "3859000"
  },
  {
    "text": "depends on the values. How would you get\nto a situation-- if you're the first player. We'll just stick with\nyou're the first player.",
    "start": "3859000",
    "end": "3864926"
  },
  {
    "text": "You know you can't lose\nusing this strategy. But not only do you\nwant to not lose,",
    "start": "3864926",
    "end": "3869960"
  },
  {
    "text": "you want to get as many\ncoins as possible-- let's say this is money. More money is better,\nand that's your goal.",
    "start": "3869960",
    "end": "3880470"
  },
  {
    "text": "So people understand that. A little trick there with,\nI guess, a greedy algorithm",
    "start": "3880470",
    "end": "3888922"
  },
  {
    "text": "you can think of. Or it's not really\neven something that you might want\nto call an algorithm.",
    "start": "3888922",
    "end": "3895770"
  },
  {
    "text": "It's a little computation. And our goal now is to\nmaximize the amount of money",
    "start": "3895770",
    "end": "3914970"
  },
  {
    "text": "when assuming you move first.",
    "start": "3914970",
    "end": "3921530"
  },
  {
    "text": "And so this is going to be a\nlittle bit different from all of the other problems\nwe've looked at,",
    "start": "3921530",
    "end": "3926579"
  },
  {
    "text": "because we have to now think\nabout what the opponent would do. And there's going to be\na sequence of moves here.",
    "start": "3926580",
    "end": "3932549"
  },
  {
    "text": "You're going to move\nfirst, so that one is easy. You've got the whole problem. But now you have to\nsay, the opponent",
    "start": "3932550",
    "end": "3938910"
  },
  {
    "text": "is going to move\nand pick a coin. And then you have to\nthink of your subproblems",
    "start": "3938910",
    "end": "3944600"
  },
  {
    "text": "as the potential rows of coins\nthat are going to be different,",
    "start": "3944600",
    "end": "3949890"
  },
  {
    "text": "depending on what\nthe opponent does. And through this process, you\nhave to maximize the value.",
    "start": "3949890",
    "end": "3955240"
  },
  {
    "text": "So it's really pretty\ndifferent from the other couple of examples that we looked at.",
    "start": "3955240",
    "end": "3961970"
  },
  {
    "text": "So we're going to have to\ndo a little bit of set-up before we get to the point\nwhere we can write something like this, which is\nthe solution to our DP.",
    "start": "3961970",
    "end": "3970799"
  },
  {
    "text": "And so let me do that set-up. But it's not super complicated. And part of this is going\nto look kind of the same",
    "start": "3970800",
    "end": "3978080"
  },
  {
    "text": "as previous problems\nwe've looked at. So Vij is the max\nvalue we can definitely",
    "start": "3978080",
    "end": "3988750"
  },
  {
    "text": "win if it is our turn.",
    "start": "3988750",
    "end": "3997925"
  },
  {
    "text": " And only coins Vi\nthrough Vj remain.",
    "start": "3997925",
    "end": "4007839"
  },
  {
    "start": "4007840",
    "end": "4013440"
  },
  {
    "text": "And so we have Vii. Then there's only one coin\nleft, and you just pick i.",
    "start": "4013440",
    "end": "4021203"
  },
  {
    "text": " Now, you might say,\nbut that's never",
    "start": "4021204",
    "end": "4027720"
  },
  {
    "text": "going to happen if there's\nan even number of coins and I'm playing first, because\nthe other player is going",
    "start": "4027720",
    "end": "4034950"
  },
  {
    "text": "to be at the end of the-- is\ngoing to be the person who",
    "start": "4034950",
    "end": "4040099"
  },
  {
    "text": "picks the last coin. But we need to\ncategorize Vii because we need to model what the\nother player is going to do.",
    "start": "4040100",
    "end": "4047029"
  },
  {
    "text": "So we can't just\nsay that we're going to be looking at an even\nnumber of coins in terms of the row of coins that\nyou look at, which is true,",
    "start": "4047030",
    "end": "4054820"
  },
  {
    "text": "that when you get\nto move, you only see an even number of coins\nif you're the first player. But you do have to model\nwhat the opponent does .",
    "start": "4054820",
    "end": "4061280"
  },
  {
    "text": "So we need the Vii.  And what you might\nsee, of course,",
    "start": "4061280",
    "end": "4067850"
  },
  {
    "text": "is a board that looks like Vi\ni plus 1, for some arbitrary i.",
    "start": "4067850",
    "end": "4079960"
  },
  {
    "text": "So that's why I\nhave it up there. But remember that you're only\npicking coins on the outside, so it's not like you're\ngoing to have a gap.",
    "start": "4079960",
    "end": "4086680"
  },
  {
    "text": "I mean, you're not going to\nhave V3 left and V7 left. There's no way that's\ngoing to happen. You're just going to keep\nshrinking, taking things",
    "start": "4086680",
    "end": "4093753"
  },
  {
    "text": "from the left or the right. So it's going to\nbe i and i plus 1. That make sense?",
    "start": "4093753",
    "end": "4099060"
  },
  {
    "text": "And so in this case,\nwhat would you pick? Vi and i plus 1. You just pick the max.",
    "start": "4099060",
    "end": "4105240"
  },
  {
    "text": "Because at the end of this,\neither you did it right or you did it wrong. Either way, you're going\nto improve your situation",
    "start": "4105240",
    "end": "4112929"
  },
  {
    "text": "by picking the max\nof Vi or Vi i plus 1. So there's no two\nthings about it.",
    "start": "4112930",
    "end": "4118220"
  },
  {
    "text": "So here, you're going to\npick the maximum of the two.",
    "start": "4118220",
    "end": "4128200"
  },
  {
    "text": " And you might have Vi i plus 2,\nwhich is an odd number of coins",
    "start": "4128200",
    "end": "4140430"
  },
  {
    "text": "that your opponent might see. It gets more complicated\nfor Vi and i plus 2.",
    "start": "4140430",
    "end": "4146420"
  },
  {
    "text": "We're going to have to now start\nthinking in more general terms as to what the\ndifferent moves are.",
    "start": "4146420",
    "end": "4152474"
  },
  {
    "text": "But we've got the\nbase cases here. All I did here was take\ncare of the base case or a couple of base\ncases associated",
    "start": "4152474",
    "end": "4158810"
  },
  {
    "text": "with a single coin, which\nis what your opponent will see and pick, or two coins,\nwhich is your last move.",
    "start": "4158810",
    "end": "4166460"
  },
  {
    "text": "So with DP, of\ncourse, you always have to go down\nto your base case, and that's when\nthings become easy.",
    "start": "4166460",
    "end": "4174130"
  },
  {
    "text": "So we have to talk\nabout two things and put up our\nrecurrence together.",
    "start": "4174130",
    "end": "4181509"
  },
  {
    "text": "The two things we\nhave to talk about are what you do when you\nmove, and that's actually",
    "start": "4181510",
    "end": "4188229"
  },
  {
    "text": "fairly easy, and\nthe second thing is what the model\nof the opponent",
    "start": "4188229",
    "end": "4193580"
  },
  {
    "text": "looks like when you're waiting\nfor him or her to move.",
    "start": "4193580",
    "end": "4199270"
  },
  {
    "text": "So let's take a\nlook at your move. And I've got V1.",
    "start": "4199270",
    "end": "4205970"
  },
  {
    "text": "Let's look at Vi. ",
    "start": "4205970",
    "end": "4211030"
  },
  {
    "text": "Vj here, dot dot dot, Vn. So that's what you see.",
    "start": "4211030",
    "end": "4217330"
  },
  {
    "text": "And you're looking at i and j. And at this point, you're\nseeing all those other coins,",
    "start": "4217330",
    "end": "4224020"
  },
  {
    "text": "the outer coins have disappeared\ninto people's pockets. And you're looking\nat this interval.",
    "start": "4224020",
    "end": "4233400"
  },
  {
    "text": "So I'm going to write\nout what Vij should be. And keep in mind that we want\nto maximize the amount of money.",
    "start": "4233400",
    "end": "4241590"
  },
  {
    "text": "And we want to say\nthat you should be able to definitely win this\namount of money, regardless",
    "start": "4241590",
    "end": "4247510"
  },
  {
    "text": "of what the opponent does. So I want to do\na max, obviously.",
    "start": "4247510",
    "end": "4255570"
  },
  {
    "text": "And I have two choices here. I can pick Vi or I can pick Vj.",
    "start": "4255570",
    "end": "4261550"
  },
  {
    "text": "It's not like there's\na lot of choices here. So if I pick Vi,\nthen-- let me go ahead",
    "start": "4261550",
    "end": "4268090"
  },
  {
    "text": "and say I pick Vi here. And here, I pick Vj. ",
    "start": "4268090",
    "end": "4278120"
  },
  {
    "text": "Let me draw this out\na little bit better. So I've got to fill in these\ntwo arguments to my max.",
    "start": "4278120",
    "end": "4288320"
  },
  {
    "text": "So this is easy. I'm going to have\na plus Vi here.",
    "start": "4288320",
    "end": "4294360"
  },
  {
    "text": "Going to have a plus\nVj here because I picked the appropriate value.",
    "start": "4294360",
    "end": "4300370"
  },
  {
    "text": "And now, this is also\nnot that difficult. What exactly happens?",
    "start": "4300370",
    "end": "4306270"
  },
  {
    "text": "What can I put in\nhere if I pick Vi? AUDIENCE: Vi plus 1. PROFESSOR: Yeah.",
    "start": "4306270",
    "end": "4311280"
  },
  {
    "text": "Vi plus 1 to j. So the range becomes i plus 1 j.",
    "start": "4311280",
    "end": "4317480"
  },
  {
    "text": " I have to be a little\ncareful here in terms",
    "start": "4317480",
    "end": "4324200"
  },
  {
    "text": "of whether I can argue\nthat it's actually",
    "start": "4324200",
    "end": "4330270"
  },
  {
    "text": "the V that I put in here. So the subtlety here is\nsimply that the Vi plus 1 j",
    "start": "4330270",
    "end": "4341580"
  },
  {
    "text": "is not something that\nI see in front of me. This is the complication.",
    "start": "4341580",
    "end": "4348090"
  },
  {
    "text": "Vi plus 1 j is never a board\nthat I see in front of me,",
    "start": "4348090",
    "end": "4353260"
  },
  {
    "text": "whereas Vij was a board\nthat I saw in front of me. So I have to model the boards\nthat I see in front of me,",
    "start": "4353260",
    "end": "4361370"
  },
  {
    "text": "because those are the boards\nthat I have control over that I can maximize. ",
    "start": "4361370",
    "end": "4368429"
  },
  {
    "text": "I cannot would be Vi\nplus 1 j in there, simply because I don't\nquite know what that is,",
    "start": "4368430",
    "end": "4374560"
  },
  {
    "text": "because of what I get eventually\nis not something I control. It's going to be the board\nafter my opponent has moved.",
    "start": "4374560",
    "end": "4383370"
  },
  {
    "text": "So all I'm going to do is\nI'm going to say the range",
    "start": "4383370",
    "end": "4389620"
  },
  {
    "text": "becomes-- range is i plus 1 j.",
    "start": "4389620",
    "end": "4396425"
  },
  {
    "text": " And I'm going to say something\nelse in a second here.",
    "start": "4396425",
    "end": "4402280"
  },
  {
    "text": "The range is i j minus 1.",
    "start": "4402280",
    "end": "4410360"
  },
  {
    "text": "And in both of these\ncases, the opponent moves. ",
    "start": "4410360",
    "end": "4420810"
  },
  {
    "text": "So in order to actually\nwrite out my DP, I'm going to have to now\nlook at the worst case",
    "start": "4420810",
    "end": "4428070"
  },
  {
    "text": "situation in terms of\nthe board I get back, because the only times\nI'm adding values",
    "start": "4428070",
    "end": "4433750"
  },
  {
    "text": "is when I see a board in\nfront of me and I pick a coin. And I'm going to have to say\nnow the opponent is going",
    "start": "4433750",
    "end": "4439020"
  },
  {
    "text": "to see an i plus 1 j-- or\nan i j minus 1, excuse me,",
    "start": "4439020",
    "end": "4445740"
  },
  {
    "text": "and might do something. And I'm going to\nget something back.",
    "start": "4445740",
    "end": "4451020"
  },
  {
    "text": "I'm going to assume that\nthe opponent is just as smart as I am,\nknows DP, taken 6046, et cetera, et cetera.",
    "start": "4451020",
    "end": "4458420"
  },
  {
    "text": "And I still want to\nget the maximum value that I can definitely win.",
    "start": "4458420",
    "end": "4464360"
  },
  {
    "text": "And so we need to look\ninside of that a little bit. And it's not that hard if\nyou just make the assumption",
    "start": "4464360",
    "end": "4469970"
  },
  {
    "text": "that I just did,\nwhich is the opponent is going to do-- I mean\nmight not necessarily",
    "start": "4469970",
    "end": "4477400"
  },
  {
    "text": "do the right thing. But you have to assume that\nthe opponent knows just as much as you do and is going to try\nand do as well as possible.",
    "start": "4477400",
    "end": "4487090"
  },
  {
    "text": "So let's do that. That's the last thing\nthat we have to do here. And it's just one more equation.",
    "start": "4487090",
    "end": "4494969"
  },
  {
    "text": "So here's the solution. We now have Vi plus 1 j\nsubproblem with the opponent",
    "start": "4494970",
    "end": "4506081"
  },
  {
    "text": "picking. ",
    "start": "4506081",
    "end": "4514000"
  },
  {
    "text": "And the simple\nobservation is that we are guaranteed the min\nof Vi plus 1 j minus 1",
    "start": "4514000",
    "end": "4529929"
  },
  {
    "text": "or Vi plus 2 j. In this case, the opponent\npicks Vj, and in this case,",
    "start": "4529930",
    "end": "4544324"
  },
  {
    "text": "the opponent picks Vi plus 1.",
    "start": "4544325",
    "end": "4551370"
  },
  {
    "text": "And you're guaranteed\nthe minimum of these two, because the opponent\ncan only pick one coin.",
    "start": "4551370",
    "end": "4556870"
  },
  {
    "text": "So that's the simple\nobservation that lets you jump ahead to your\nnext move, which is really",
    "start": "4556870",
    "end": "4565790"
  },
  {
    "text": "what the DP is interested\nin, because that's the only time that you're\nactually executing something",
    "start": "4565790",
    "end": "4573060"
  },
  {
    "text": "in terms of picking\ncoins from the board and adding to your value. But we did have to model that\nas to what the maximum value was",
    "start": "4573060",
    "end": "4581320"
  },
  {
    "text": "that you could win,\njumping ahead of this move. And you have the min\nin here because you're",
    "start": "4581320",
    "end": "4586469"
  },
  {
    "text": "assuming that this is\na definite guarantee. That's what we want.",
    "start": "4586470",
    "end": "4591699"
  },
  {
    "text": "It's possible that the\nopponent plays a different game",
    "start": "4591700",
    "end": "4597200"
  },
  {
    "text": "from the one that we think\nhe or she is going to play, which maximizes his or value.",
    "start": "4597200",
    "end": "4603230"
  },
  {
    "text": "But the min is guaranteed. So now that you've\nmade this observation, it turns out we just have to\ntake that, and we'll be done.",
    "start": "4603230",
    "end": "4614940"
  },
  {
    "text": "So let's see. Let me erase this. It's the last set of equations.",
    "start": "4614940",
    "end": "4621005"
  },
  {
    "text": " And it's just plugging\nin that observation",
    "start": "4621005",
    "end": "4627700"
  },
  {
    "text": "into what I wrote before. So we have Vi j equals max.",
    "start": "4627700",
    "end": "4634655"
  },
  {
    "text": "This is the outer max that\nI had up there already, so that's the same max.",
    "start": "4634655",
    "end": "4640619"
  },
  {
    "text": "And put these giant\nbrackets here. ",
    "start": "4640620",
    "end": "4646250"
  },
  {
    "text": "And inside, I'm going to\nplug in this min, which",
    "start": "4646250",
    "end": "4651950"
  },
  {
    "text": "is something that\ncorresponds to the value",
    "start": "4651950",
    "end": "4657230"
  },
  {
    "text": "that I would win\nin the worst case after the opponent plays\nthe best possible move.",
    "start": "4657230",
    "end": "4662980"
  },
  {
    "text": "And that would be Vi plus 1 j\nminus 1, V1 plus 2 j plus Vi.",
    "start": "4662980",
    "end": "4680000"
  },
  {
    "text": "This Vi is the same\nas this one up here. ",
    "start": "4680000",
    "end": "4686990"
  },
  {
    "text": "And you've got a plus Vj here. And I didn't actually\ndo this, but in terms",
    "start": "4686990",
    "end": "4692610"
  },
  {
    "text": "of writing out what the opponent\nwould do in other subproblem case, but it's really\npretty straightforward.",
    "start": "4692610",
    "end": "4699450"
  },
  {
    "text": "You have a problem\nthat corresponds to the i j minus 1 problem.",
    "start": "4699450",
    "end": "4706260"
  },
  {
    "text": "And the opponent\ncould pick the i-th or could pick the j minus 1th. If the opponent picks\nthe j minus 1th,",
    "start": "4706260",
    "end": "4712000"
  },
  {
    "text": "you get Vi j minus 2, and you\nneed to take the min of that.",
    "start": "4712000",
    "end": "4718460"
  },
  {
    "text": "In the other case, where the\nopponent picks i, in which case you get i plus 1 j minus 1.",
    "start": "4718460",
    "end": "4724880"
  },
  {
    "text": " And that's our DP. That's our DP.",
    "start": "4724880",
    "end": "4732449"
  },
  {
    "text": "So the big difference\nhere was the modeling that you had to\ndo in the middle. We didn't actually have\nto do that in any of DPs",
    "start": "4732450",
    "end": "4740270"
  },
  {
    "text": "we've covered in 046 at\nleast up until this point.",
    "start": "4740270",
    "end": "4747320"
  },
  {
    "text": "Before we talk about complexity,\nthat should just take a minute, people buy that?",
    "start": "4747320",
    "end": "4753550"
  },
  {
    "text": "See that? Good. So with all of these\nproblems, the complexities",
    "start": "4753550",
    "end": "4758660"
  },
  {
    "text": "are fairly straightforward\nto compute. The complexity here\nis simply, again, as",
    "start": "4758660",
    "end": "4764360"
  },
  {
    "text": "before, the number\nof subproblems times the time it takes to\nsolve the subproblem.",
    "start": "4764360",
    "end": "4770300"
  },
  {
    "text": "You can see here are that\nthese are all constant time operations. So assuming that the\nVij's have been computed,",
    "start": "4770300",
    "end": "4777800"
  },
  {
    "text": "it's theta 1 time to\ncompute a subproblem. So that's your theta 1.",
    "start": "4777800",
    "end": "4783160"
  },
  {
    "text": "And as before, there are\nn squared subproblems. Sorry.",
    "start": "4783160",
    "end": "4788460"
  },
  {
    "text": "Let's just do number of\nsubproblems times theta 1. It's just theta n squared.",
    "start": "4788460",
    "end": "4796480"
  },
  {
    "text": "So that was good. All right. So good luck for the quiz.",
    "start": "4796480",
    "end": "4801699"
  },
  {
    "text": "And don't worry\ntoo much about it. See you guys next week. ",
    "start": "4801700",
    "end": "4807040"
  }
]