[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "6435"
  },
  {
    "start": "6435",
    "end": "16414"
  },
  {
    "text": "ANA BELL: All right,\nlet's get started. So today's lecture is\nlecture three out of four",
    "start": "16415",
    "end": "23980"
  },
  {
    "text": "on the idea of\nobject-oriented programming and creating our own object\ntypes through Python classes.",
    "start": "23980",
    "end": "30250"
  },
  {
    "text": "The majority of\ntoday's lecture will be on this idea of inheritance. But before we get\nthere, I'd like",
    "start": "30250",
    "end": "35470"
  },
  {
    "text": "to do a little bit of a\nrecap of the big things that we've seen already. And along the way,\nwe'll be writing",
    "start": "35470",
    "end": "42460"
  },
  {
    "text": "a new data type for\nsomething more abstract, an animal class, more abstract\nthan what we've seen before.",
    "start": "42460",
    "end": "48850"
  },
  {
    "text": "But then, when we get to\nthe idea of inheritance, we'll build upon\nthis animal class with some more animal objects.",
    "start": "48850",
    "end": "56030"
  },
  {
    "text": "So the big idea behind\ncreating our own data types is that we want to mimic what's\ngoing on in real life, right?",
    "start": "56030",
    "end": "63289"
  },
  {
    "text": "And in real life,\nwe basically have all of these different\nobjects in the world, right?",
    "start": "63290",
    "end": "69200"
  },
  {
    "text": "But these objects can\nbe grouped according to some categories, right? So in this particular slide,\nI've got six different objects.",
    "start": "69200",
    "end": "77180"
  },
  {
    "text": "But the three on\nthe left can kind of be grouped together, right? We know that they\nare a kind of cat.",
    "start": "77180",
    "end": "83510"
  },
  {
    "text": "And as such, we know\nthat all these cats, we can describe them using\nsome common properties",
    "start": "83510",
    "end": "89390"
  },
  {
    "text": "and common behaviors. So for these cats, I would\nsay that all these cats have a name an age and a color\nassociated with them, right?",
    "start": "89390",
    "end": "97530"
  },
  {
    "text": "So I know that all cats\nwill therefore generally have a name and age\nand a color, and then some similar set of behaviors.",
    "start": "97530",
    "end": "105290"
  },
  {
    "text": "The items on the right,\nthose three objects, I know they can be\ncategorized together. Let's say that\nthey're wild rabbits.",
    "start": "105290",
    "end": "111470"
  },
  {
    "text": "And let's say that,\nfor the wild rabbits, I don't actually\ngive them a name. So I would categorize\nthem, again,",
    "start": "111470",
    "end": "116940"
  },
  {
    "text": "using common properties, just\nan age and a color, no name.",
    "start": "116940",
    "end": "122100"
  },
  {
    "text": "And then those three\nobjects on the right also have a common\nset of behaviors different than the\nobjects on the left.",
    "start": "122100",
    "end": "128440"
  },
  {
    "text": "And so we're trying to mimic the\nidea of these categorizations and data types that\nwe see in real life.",
    "start": "128440",
    "end": "135510"
  },
  {
    "text": "OK, so a little bit of a recap,\nwhen we define our own data",
    "start": "135510",
    "end": "141569"
  },
  {
    "text": "type in Python, we decide\non a bunch of attributes. And attributes can either be\ndata or they can be procedures.",
    "start": "141570",
    "end": "149430"
  },
  {
    "text": "The data is, you think of\nthem as what variables make up your object.",
    "start": "149430",
    "end": "155070"
  },
  {
    "text": "And this is something\nthat you decide. So for a coordinate\nobject, we've seen this example\na lot of times,",
    "start": "155070",
    "end": "160470"
  },
  {
    "text": "we decided on x and y values. For this more abstract\nidea of an animal, well, we can just say\nthat we can describe",
    "start": "160470",
    "end": "167760"
  },
  {
    "text": "an animal by its\nage, so how long it's been alive since birth.",
    "start": "167760",
    "end": "174160"
  },
  {
    "text": "In terms of\nprocedural attributes, these we implemented using\nmethods in Python classes.",
    "start": "174160",
    "end": "180100"
  },
  {
    "text": "And the idea behind\nthese is just, how can somebody\nor somebody who's creating an object of this\ntype manipulate the object?",
    "start": "180100",
    "end": "187510"
  },
  {
    "text": "What are some ways to\ninterface with this object? So our coordinate class, one\nof the more interesting things",
    "start": "187510",
    "end": "193849"
  },
  {
    "text": "was to find a distance\nbetween a coordinate and another coordinate. But some of the\nsimpler things were",
    "start": "193850",
    "end": "199160"
  },
  {
    "text": "to just get the value of the\nx-coordinate, the y-coordinate, and things like that. For our animal class that\nwe're implementing today,",
    "start": "199160",
    "end": "206180"
  },
  {
    "text": "it's going to be a\nlittle bit more abstract. But one of the simplest things\nis to just say, hey, tell me",
    "start": "206180",
    "end": "212105"
  },
  {
    "text": "how long you've been alive. That's basically just\ngrabbing the value of the attribute,\nthe H. So here,",
    "start": "212105",
    "end": "221090"
  },
  {
    "text": "we're defining our\ndata object, right? The class keyword\ntells Python we're",
    "start": "221090",
    "end": "228080"
  },
  {
    "text": "creating our new data type. This is the name\nof our data type. So the type of this thing\nthat we're creating is Animal.",
    "start": "228080",
    "end": "235129"
  },
  {
    "text": "In parentheses here,\nanimal's parent is the generic Python object.",
    "start": "235130",
    "end": "242690"
  },
  {
    "text": "And later in today's\nlecture, we're going to see what happens\nwhen we put something else in those parentheses. So the parent of a\nclass that we create",
    "start": "242690",
    "end": "250160"
  },
  {
    "text": "is something other than just\nthe generic Python object. And then the very first\nmethod that we always",
    "start": "250160",
    "end": "255490"
  },
  {
    "text": "write in our new object\ndefinition is the init method. This tells Python,\nhow do you create an object of this type,\na very basic information",
    "start": "255490",
    "end": "264640"
  },
  {
    "text": "that Python needs to know. So the init method is a\nspecial dunder method, double underscore,\ninit, double underscore.",
    "start": "264640",
    "end": "272550"
  },
  {
    "text": "And by now, you're familiar. The first parameter\nof every single method that we define inside a class\nis this thing called self.",
    "start": "272550",
    "end": "279970"
  },
  {
    "text": "And remember, self\nis a variable, right?",
    "start": "279970",
    "end": "285250"
  },
  {
    "text": "It's a variable name that allows\nus to talk about an object",
    "start": "285250",
    "end": "290530"
  },
  {
    "text": "without having created one yet\nbecause all we're doing here is defining the class, right? We don't have actual\nobjects created.",
    "start": "290530",
    "end": "297530"
  },
  {
    "text": "And so this method\nhere, the init method and all the other\nmethods, are run on an object of type animal.",
    "start": "297530",
    "end": "302830"
  },
  {
    "text": "But we don't have\nthat object yet. So the first parameter\nwill be that object",
    "start": "302830",
    "end": "309190"
  },
  {
    "text": "in this abstract sort of way. And then you can put other\nparameters in that list.",
    "start": "309190",
    "end": "315410"
  },
  {
    "text": "And so we say that, when we\ncreate a new animal object, we're going to initialize it\nby its age, so some number.",
    "start": "315410",
    "end": "322800"
  },
  {
    "text": "Within the init, what\ndo we usually do? Well, we usually initialize\nall the data attributes, also",
    "start": "322800",
    "end": "330750"
  },
  {
    "text": "called instance variables. So here, how many\ndata attributes do I have for the animal class?",
    "start": "330750",
    "end": "339750"
  },
  {
    "text": "Two, exactly, yeah, two. The first one, self.age,\nis a data attribute.",
    "start": "339750",
    "end": "345000"
  },
  {
    "text": "And we know it's\na data attribute because we have that self\nappearing again, right? If it was just a variable\nname, like age or years",
    "start": "345000",
    "end": "353490"
  },
  {
    "text": "or time or something\nlike that, it would just be a regular old variable. And as soon as that\ninit method ended,",
    "start": "353490",
    "end": "359670"
  },
  {
    "text": "that variable would go away. But the fact that we've\ninitialized this variable using self. tells\nPython, hey, this",
    "start": "359670",
    "end": "366509"
  },
  {
    "text": "is a variable that I want\nto persist for as long as this object exists in memory.",
    "start": "366510",
    "end": "372120"
  },
  {
    "text": "So it's an instance variable. So self.age equals age\nwill create this data attribute, age, and assign it\nto the parameter passed in age.",
    "start": "372120",
    "end": "381210"
  },
  {
    "text": "Now, self.name is\nalso a data attribute. It's just not being passed\nin the parameter list.",
    "start": "381210",
    "end": "386849"
  },
  {
    "text": "And that's OK. Not everything has to be\npassed into the parameter list. So here, what we're\neffectively doing",
    "start": "386850",
    "end": "393960"
  },
  {
    "text": "is saying, when we create\na new animal object, we have to tell it the age,\nhow long it's been alive for.",
    "start": "393960",
    "end": "399840"
  },
  {
    "text": "But then the name data attribute\nis always going to be none. So there's an absence of a value\nfor the name for every animal",
    "start": "399840",
    "end": "407699"
  },
  {
    "text": "we create right off the bat. OK, everyone OK\nwith me so far here?",
    "start": "407700",
    "end": "414094"
  },
  {
    "text": "AUDIENCE: What's the purpose of\ndefining self.name equals None? ANA BELL: What's the purpose\nof defining this to be none? Well, later on, I'm going\nto add some methods that",
    "start": "414095",
    "end": "420873"
  },
  {
    "text": "allow you to give a name\nto an animal if you'd like. But again, this is a\ndesign choice that I made.",
    "start": "420873",
    "end": "427229"
  },
  {
    "text": "So yeah, you might not make\nthe same design choices. So that's the\ndefinition for my class,",
    "start": "427230",
    "end": "434590"
  },
  {
    "text": "just these four lines of code. And then down here, we saw,\nin the past couple lectures,",
    "start": "434590",
    "end": "440439"
  },
  {
    "text": "how to create actual\nnew objects, right? So this is where the action\nactually happens, right?",
    "start": "440440",
    "end": "447700"
  },
  {
    "text": "So here, I'm creating\na new animal object. A variable, myanimal, is bound\nto that animal object, right?",
    "start": "447700",
    "end": "454600"
  },
  {
    "text": "So that's my variable name. You can name it\nanything you want. And then you're telling\nPython to create a new animal",
    "start": "454600",
    "end": "461150"
  },
  {
    "text": "object simply by invoking\nthe name of the class, and then passing in\nall the parameters that we're expecting here,\nexcept for self because self",
    "start": "461150",
    "end": "469390"
  },
  {
    "text": "becomes this thing. If I were to draw a box around\nAnimal(3), that is the self.",
    "start": "469390",
    "end": "474550"
  },
  {
    "text": "That is this object\nthat I just created. OK, so that's the init method.",
    "start": "474550",
    "end": "481100"
  },
  {
    "text": "Last lecture, we saw\nsome dunder methods. And I think I said,\nprobably the second method",
    "start": "481100",
    "end": "486770"
  },
  {
    "text": "you'd ever want to\nimplement for a new class is this dunder str method.",
    "start": "486770",
    "end": "492030"
  },
  {
    "text": "Now, the dunder str\nmethod tells Python how Python should print an\nobject of type animal, right?",
    "start": "492030",
    "end": "501230"
  },
  {
    "text": "Because initially,\nright off the bat, if we didn't implement\nthis dunder str method, Python would default to the str\nmethod of the generic Python",
    "start": "501230",
    "end": "510320"
  },
  {
    "text": "object, which just\ntells us the memory location this object\nhas been created at, which is not very useful.",
    "start": "510320",
    "end": "516500"
  },
  {
    "text": "When we print an animal object,\nand again, my design choice is to say I'm going to\nprint animal, colon,",
    "start": "516500",
    "end": "524720"
  },
  {
    "text": "the name of that animal, colon,\nand the age of that animal, again, my design choice, right?",
    "start": "524720",
    "end": "529970"
  },
  {
    "text": "And remember, the\ndunder str method returns the string\nyou want to print out. It doesn't print\nit out straight up.",
    "start": "529970",
    "end": "538940"
  },
  {
    "text": "Everyone OK with that so far? It should be review. OK, so then the\nother things that we want to include in our\nclass, and this is something",
    "start": "538940",
    "end": "546170"
  },
  {
    "text": "that I included no matter\nwhat the language you're working with, is these things\ncalled getters and setters.",
    "start": "546170",
    "end": "554810"
  },
  {
    "text": "So getters are these\ntwo right here. Getters are basically\nvery simple functions",
    "start": "554810",
    "end": "560420"
  },
  {
    "text": "that return the\nvalues of the data attributes that this object has.",
    "start": "560420",
    "end": "566089"
  },
  {
    "text": "This object just has\ntwo, an age and a name, because they were defined\nusing self.age and self.name.",
    "start": "566090",
    "end": "572220"
  },
  {
    "text": "So here's a getter to just\ntell me the value of self.age. So all it does is\nreturn self.age.",
    "start": "572220",
    "end": "578570"
  },
  {
    "text": "And name, all it does is return\nself.name, very, very simple.",
    "start": "578570",
    "end": "583910"
  },
  {
    "text": "Setters, same idea, except that\nnow, we're allowing someone using our class to set\nthe values of these data",
    "start": "583910",
    "end": "591830"
  },
  {
    "text": "attributes through\nthese methods, right? So here, all it's\ndoing is taking",
    "start": "591830",
    "end": "597620"
  },
  {
    "text": "in a parameter for the\nthing you want to change the age or the name to, right? And all it does is\nsay, well, self.age",
    "start": "597620",
    "end": "604579"
  },
  {
    "text": "is going to be equal to the\nthing you passed in, OK? That's the age.",
    "start": "604580",
    "end": "610660"
  },
  {
    "text": "So we're changing this\nto a different number. And then the set name is\nchanging the name data",
    "start": "610660",
    "end": "616080"
  },
  {
    "text": "attribute to a different string. And here, I'm using\nthis default parameter",
    "start": "616080",
    "end": "621090"
  },
  {
    "text": "that we talked about\nway back when we talked about functions, right?",
    "start": "621090",
    "end": "626970"
  },
  {
    "text": "So if you don't pass in\nan actual string value, we'll default to\nthe empty string. ",
    "start": "626970",
    "end": "634470"
  },
  {
    "text": "So let me show you\nhow this works. So this is my animal class\nexactly as in the slides.",
    "start": "634470",
    "end": "641190"
  },
  {
    "text": "I've got my init str and\nmy two getters and setters. And then I've got two animals\nbeing created here, right?",
    "start": "641190",
    "end": "647420"
  },
  {
    "text": "So here's a print for\nanimal with age four. And here's a print of\nanimal with age six.",
    "start": "647420",
    "end": "653000"
  },
  {
    "text": "So if I run these, it should\nprint animal, colon, none, because I didn't set the name\nto anything for these two,",
    "start": "653000",
    "end": "658910"
  },
  {
    "text": "and then their\nrespective ages, right? So this is using\nthe str method on a.",
    "start": "658910",
    "end": "666080"
  },
  {
    "text": "And this is using\nthe str method on b. OK, and then, we can\naccess, of course,",
    "start": "666080",
    "end": "673940"
  },
  {
    "text": "using dot notation, all\nof our data attributes. So here, I'm accessing\nthe age directly.",
    "start": "673940",
    "end": "679070"
  },
  {
    "text": "But since the\ngetter, get_age, just returns for me the value\nof that data attribute, these will actually\nprint the same thing.",
    "start": "679070",
    "end": "685920"
  },
  {
    "text": "So I'm just going to\ncomment these out. So if I'm accessing a's\nage through either the data attribute directly or\nthrough the getter method,",
    "start": "685920",
    "end": "693200"
  },
  {
    "text": "it will print four for both,\npretty straightforward.",
    "start": "693200",
    "end": "698850"
  },
  {
    "text": "And then we can do\nsome things like this. So I can call the\nset_name method. So here, I'm passing\nan actual name for it.",
    "start": "698850",
    "end": "706080"
  },
  {
    "text": "And then I can print the\nname or I can use the getter to print the name, right?",
    "start": "706080",
    "end": "712040"
  },
  {
    "text": "So if I run that,\nyou'll see, the name has now been changed\nfor object a.",
    "start": "712040",
    "end": "717930"
  },
  {
    "text": "Then, if I run the print method\non a, then it prints animal, colon, the new name that\nI just set it to, fluffy.",
    "start": "717930",
    "end": "723640"
  },
  {
    "text": "And then the age\nhas been unchanged. If I run set_name\nwithout a parameter,",
    "start": "723640",
    "end": "729340"
  },
  {
    "text": "it will revert to\nthat default parameter for the name, which\nis the empty string.",
    "start": "729340",
    "end": "734610"
  },
  {
    "text": "So the new name of my animal a\nwill just be an empty string. So it's just going to\nbe colon with nothing",
    "start": "734610",
    "end": "739820"
  },
  {
    "text": "in there, so no space or\nanything, just nothing. ",
    "start": "739820",
    "end": "746210"
  },
  {
    "text": "OK, everyone all right so far? Hopefully, a little review.",
    "start": "746210",
    "end": "752900"
  },
  {
    "text": "So we saw that we can actually\ngrab the exact same value",
    "start": "752900",
    "end": "758840"
  },
  {
    "text": "for the age by accessing the\nage data attribute directly",
    "start": "758840",
    "end": "764090"
  },
  {
    "text": "using dot notation or\nour getter that we wrote. One of these is better than\nthe other in terms of style",
    "start": "764090",
    "end": "773660"
  },
  {
    "text": "and in terms of good\ncoding practices and in terms of writing\ncode that's easy to read,",
    "start": "773660",
    "end": "781080"
  },
  {
    "text": "easy to modify, robust,\nthings like that. The one that is better\nto use is the one",
    "start": "781080",
    "end": "788000"
  },
  {
    "text": "that accesses the method. Both are using dot notation. But the first one is actually\naccessing the internals",
    "start": "788000",
    "end": "795350"
  },
  {
    "text": "of my class definition, right? In order to know the\nvalue of my data attribute",
    "start": "795350",
    "end": "802850"
  },
  {
    "text": "as someone who's just using\nthis code for an animal class, I'd have to actually go in\nand read the init method",
    "start": "802850",
    "end": "809839"
  },
  {
    "text": "to know these data attributes\nthat are being initialized. I don't know about you. But I actually-- let's take an\nexample of a list, something",
    "start": "809840",
    "end": "816290"
  },
  {
    "text": "we've used a lot. Have you ever gone into the\ndefinition of the list class to see the data attributes\nthat are being initialized?",
    "start": "816290",
    "end": "823910"
  },
  {
    "text": "I haven't, right? All we've been doing\nis working with methods that allow us to make changes\nto lists, to do operations",
    "start": "823910",
    "end": "830990"
  },
  {
    "text": "on lists, and things like that. So the internal workings of the\nlist class is hidden from us. And that's just the\nway we like it, right?",
    "start": "830990",
    "end": "837230"
  },
  {
    "text": "I don't care how the list\nis actually implemented. And the same thing should\nhappen here, right?",
    "start": "837230",
    "end": "842660"
  },
  {
    "text": "I shouldn't care how I\nimplement the animal class. I shouldn't care what instance\nvariables they're using.",
    "start": "842660",
    "end": "852850"
  },
  {
    "text": "So let me show you why. So if someone who's\nwriting the animal class decides in the future that age\nwas a strange variable name",
    "start": "852850",
    "end": "861120"
  },
  {
    "text": "to use and they decide to\nchange the variable associated",
    "start": "861120",
    "end": "866250"
  },
  {
    "text": "with how long this animal has\nbeen alive to, to be years, right? So here, I've got\nself.years equals age.",
    "start": "866250",
    "end": "876330"
  },
  {
    "text": "That's the only change I've\nmade to my animal class. So I've made the design decision\nto change this data attribute",
    "start": "876330",
    "end": "883800"
  },
  {
    "text": "to be years. And then, of course, since\nI'm making this class, I need to make sure all\nmy getters and setters",
    "start": "883800",
    "end": "890160"
  },
  {
    "text": "and everything still works\nwith this new data attribute. So my get_age will\nreturn self.years, right?",
    "start": "890160",
    "end": "897660"
  },
  {
    "text": "I'm returning this\nvariable, a data attribute that I've changed.",
    "start": "897660",
    "end": "902840"
  },
  {
    "text": "Well, this is the full code. So you can see the changed\ndata attribute here.",
    "start": "902840",
    "end": "909290"
  },
  {
    "text": "I'm using self.years equals age. And then my getter is\ngoing to return self.years.",
    "start": "909290",
    "end": "916579"
  },
  {
    "text": "And my setter is going\nto set self.years. Well, this\nimplementation should be",
    "start": "916580",
    "end": "924210"
  },
  {
    "text": "hidden from me,\nsomebody who is just trying to create a bunch\nof animals in their code.",
    "start": "924210",
    "end": "931040"
  },
  {
    "text": "So this code down here will\nwork if I use my method, right?",
    "start": "931040",
    "end": "937300"
  },
  {
    "text": "Because the method should\nstill work no matter what the data attribute\nis called, age or years",
    "start": "937300",
    "end": "943959"
  },
  {
    "text": "or time or whatever. But if I had code that accessed\nthat data attribute directly,",
    "start": "943960",
    "end": "949769"
  },
  {
    "text": "it doesn't work anymore. It throws an error\nbecause, surprise, that attribute no longer exists.",
    "start": "949770",
    "end": "956720"
  },
  {
    "text": "So it's much better\nstyle and more",
    "start": "956720",
    "end": "963370"
  },
  {
    "text": "robust to use only getters\nand setters, only methods, to make changes and to\nmanipulate the objects.",
    "start": "963370",
    "end": "970750"
  },
  {
    "text": "You should never\never really have to use the data\nattributes, right?",
    "start": "970750",
    "end": "977130"
  },
  {
    "text": "Questions about that?  OK, good, because\nthat's something",
    "start": "977130",
    "end": "983860"
  },
  {
    "text": "that you'll have to keep in\nmind on the quiz next Monday, not using data attributes.",
    "start": "983860",
    "end": "990200"
  },
  {
    "text": "All right, so having\nsaid that, Python",
    "start": "990200",
    "end": "997320"
  },
  {
    "text": "does allow you to do a\nbunch of questionable stuff. So, first of all, it\nallows you, as we just",
    "start": "997320",
    "end": "1003020"
  },
  {
    "text": "saw, to access\nthe data attribute of a particular instance\nthat you create.",
    "start": "1003020",
    "end": "1008190"
  },
  {
    "text": "So you create an object. It's a very specific\nanimal with a specific age. You can just use dot notation\nto access the value of all",
    "start": "1008190",
    "end": "1015860"
  },
  {
    "text": "of these data attributes. Fine, we'll mess\nourselves up in the future",
    "start": "1015860",
    "end": "1023210"
  },
  {
    "text": "because maybe this won't work. But it's not so bad. However, Python also\nallows you to change",
    "start": "1023210",
    "end": "1030109"
  },
  {
    "text": "the value of a data attribute\noutside of the class definition. So this is code we write\nnot within the class.",
    "start": "1030109",
    "end": "1037339"
  },
  {
    "text": "It's code we write as somebody\nwho's using the class. So what does this mean? Well, now, I'm going to\nset the age data attribute",
    "start": "1037339",
    "end": "1045260"
  },
  {
    "text": "to be whatever I want outside\nthe class definition, right? I could even set it to a\ndictionary if I wanted to.",
    "start": "1045260",
    "end": "1053215"
  },
  {
    "text": "In this particular\ncase, I'm setting it to a string infinite. But if I do this, then I risk\ncode on this animal class",
    "start": "1053215",
    "end": "1060690"
  },
  {
    "text": "not working further\non because maybe they assume that the age\nis always a number. And so a different\nmethod I might run",
    "start": "1060690",
    "end": "1067170"
  },
  {
    "text": "will not work anymore if I\nhappen to set it to the string. ",
    "start": "1067170",
    "end": "1072830"
  },
  {
    "text": "And then one other thing Python\nactually allows you to do is to add data\nattributes to instances.",
    "start": "1072830",
    "end": "1080270"
  },
  {
    "text": "So now, the problem with\nthis is that, let's say I create a whole bunch of\ninstances of animals, right?",
    "start": "1080270",
    "end": "1086470"
  },
  {
    "text": "This animal's got age four. This animal's got age six. This animal's got age five. And then one of these animals,\nI decide to add a new data",
    "start": "1086470",
    "end": "1093880"
  },
  {
    "text": "attribute to it. Like, only one of\nthese instances now has three data attributes\nassociated with it, a name,",
    "start": "1093880",
    "end": "1099700"
  },
  {
    "text": "an age, and now the size.  All the other animal\ninstances I've created only",
    "start": "1099700",
    "end": "1106390"
  },
  {
    "text": "have a name and an age\nassociated with them. Just this one happens to have\nthis extra data attribute.",
    "start": "1106390",
    "end": "1111470"
  },
  {
    "text": "So now, the whole reason why\nwe're creating our own data types was to be consistent.",
    "start": "1111470",
    "end": "1116529"
  },
  {
    "text": "To bundle the\nspecific set of data and specific set of behaviors\ntogether flies out the window",
    "start": "1116530",
    "end": "1122230"
  },
  {
    "text": "because now I have one instance\nthat now has this extra data attribute associated with it.",
    "start": "1122230",
    "end": "1127420"
  },
  {
    "text": "And nobody else does, right? So all that consistency\nhas gone out the window.",
    "start": "1127420",
    "end": "1134860"
  },
  {
    "text": "So never ever do any of\nthese outside of the class",
    "start": "1134860",
    "end": "1140020"
  },
  {
    "text": "definition. It's totally OK to access\ndata attributes while you're defining a class,\nbut not OK to do",
    "start": "1140020",
    "end": "1147130"
  },
  {
    "text": "any of these outside of\nthe class definition, even though Python\nallows you to do it.",
    "start": "1147130",
    "end": "1152380"
  },
  {
    "text": "OK, so one of the\nthings I wanted to show you in this\nlecture is something we haven't really seen so far.",
    "start": "1152380",
    "end": "1158080"
  },
  {
    "text": "And that's actually just working\nwith objects that we create. Yes, when we created\nfractions and coordinates,",
    "start": "1158080",
    "end": "1163930"
  },
  {
    "text": "we just created a\nwhole bunch of objects and then printed the numerators\nor printed the object",
    "start": "1163930",
    "end": "1170080"
  },
  {
    "text": "or multiplied them together. But we never actually\nwrote nice functions that",
    "start": "1170080",
    "end": "1175120"
  },
  {
    "text": "work with objects of our type. So one of the things I wanted\nto show you is how to do that.",
    "start": "1175120",
    "end": "1181040"
  },
  {
    "text": "So here's a function\nthat creates a dictionary out of a list.",
    "start": "1181040",
    "end": "1187070"
  },
  {
    "text": "So the input here is going to\nbe a list of whatever I want.",
    "start": "1187070",
    "end": "1192590"
  },
  {
    "text": "And the function, what\nI would like it to do is to pick up from the\nlist only numbers that are",
    "start": "1192590",
    "end": "1201440"
  },
  {
    "text": "non-negative and just integers. So in this particular case,\nI would like my function",
    "start": "1201440",
    "end": "1206690"
  },
  {
    "text": "to pick up the 2, the 5, and\nthe 0, ignoring everything else. And I would like to\ncreate a dictionary out",
    "start": "1206690",
    "end": "1213419"
  },
  {
    "text": "of these numbers. And what the\ndictionary should do is map each one\nof these numbers,",
    "start": "1213420",
    "end": "1219340"
  },
  {
    "text": "so the 2, the 5, and the 0. These would be my keys. And they should be mapped to\nanimal objects with these ages.",
    "start": "1219340",
    "end": "1234180"
  },
  {
    "text": "So that's an animal of age two. And this is an\nanimal with age five.",
    "start": "1234180",
    "end": "1239850"
  },
  {
    "text": "And this should be an\nanimal with age zero, right? So my key types are ints.",
    "start": "1239850",
    "end": "1247380"
  },
  {
    "text": "And the values\nassociated with the keys, the type should be animal, this\nobject that I just created,",
    "start": "1247380",
    "end": "1254410"
  },
  {
    "text": "all right? So the code is pretty\nstraightforward. We just have a little loop that\ngoes through each element one",
    "start": "1254410",
    "end": "1260490"
  },
  {
    "text": "at a time in my list. That's for n and L.\nAnd then I'm just going to do something\nto the elements that",
    "start": "1260490",
    "end": "1266730"
  },
  {
    "text": "are integers and greater or\nequal to zero, non-negative. So that will extract only\nthe 2, the 5, and the 0",
    "start": "1266730",
    "end": "1274590"
  },
  {
    "text": "as we go through the loop\nover the elements in L. And then the key line\nhere is this one in red.",
    "start": "1274590",
    "end": "1283210"
  },
  {
    "text": "I'm going to say, this line just\nadds an entry to my dictionary,",
    "start": "1283210",
    "end": "1288370"
  },
  {
    "text": "right? So this is the syntax\nfor putting something in a dictionary, right? There's no append or plus\nin a dictionary or anything",
    "start": "1288370",
    "end": "1295630"
  },
  {
    "text": "like that. It's just straight up indexing. The key you want is n, so\neither a 2, a 5, or a 0.",
    "start": "1295630",
    "end": "1303640"
  },
  {
    "text": "And the value I want to\nassociate with that key is an animal with age\nwhatever this is, 2, 5 or 0,",
    "start": "1303640",
    "end": "1311049"
  },
  {
    "text": "so exactly what I wrote here. Everyone OK so far?",
    "start": "1311050",
    "end": "1316590"
  },
  {
    "text": "All right, the loop goes\nthrough to the end of the list. And then we've created\nour dictionary.",
    "start": "1316590",
    "end": "1321830"
  },
  {
    "text": "And we're done. As we're writing this\ncode, how would we debug it or how would we check\nto see that it worked?",
    "start": "1321830",
    "end": "1328409"
  },
  {
    "text": "Well, the instinct\nis to say, OK, well, let me check to see if\nthis function worked. So here, this line, animals\nequals animal_dict(L) will run",
    "start": "1328410",
    "end": "1339029"
  },
  {
    "text": "this function. And it runs it on this\nL. And at the end,",
    "start": "1339030",
    "end": "1344480"
  },
  {
    "text": "it returns a dictionary,\nsomething that looks like this. So our instinct is to just\nprint that return to dictionary.",
    "start": "1344480",
    "end": "1354230"
  },
  {
    "text": "But if we were to print\nthat, and you can actually run the code in Python,\nif you print that,",
    "start": "1354230",
    "end": "1359450"
  },
  {
    "text": "you get something like this. And that's because\nPython doesn't dig through elements\nof dictionaries",
    "start": "1359450",
    "end": "1366050"
  },
  {
    "text": "or even elements of lists to run\nthe print method recursively.",
    "start": "1366050",
    "end": "1371540"
  },
  {
    "text": "It just runs the print\nmethod top level. And the problem is, it knows\nhow to print integers just fine.",
    "start": "1371540",
    "end": "1378350"
  },
  {
    "text": "But it doesn't know how to\nprint a dictionary where the values are animal objects. And so we run into the\nsame problem where,",
    "start": "1378350",
    "end": "1385279"
  },
  {
    "text": "now, the value\nassociated with key 2 is this animal object\nat that memory location.",
    "start": "1385280",
    "end": "1390290"
  },
  {
    "text": "But how do I know that\nI didn't screw up my-- I created an animal\nwith age five",
    "start": "1390290",
    "end": "1396950"
  },
  {
    "text": "where it should have\nbeen two, right? So the solution,\nand you'll probably",
    "start": "1396950",
    "end": "1402899"
  },
  {
    "text": "encounter this on the next quiz\nif you're debugging your code, the solution is to just iterate\nthrough the dictionary in such",
    "start": "1402900",
    "end": "1412350"
  },
  {
    "text": "a way that you run that\nprint statement directly on an object of type animal. Python knows how\nto do that, right?",
    "start": "1412350",
    "end": "1418140"
  },
  {
    "text": "We told it the\nstr method, right? We have an str method here. So it knows how to run the print\ndirectly on an animal object.",
    "start": "1418140",
    "end": "1426030"
  },
  {
    "text": "It just doesn't know how\nto run the print where the value of a dictionary\nis an animal object.",
    "start": "1426030",
    "end": "1431260"
  },
  {
    "text": "So let's replace this\nprint of the dictionary with a little loop.",
    "start": "1431260",
    "end": "1437230"
  },
  {
    "text": "It goes through this, the\ndictionary's items, right?",
    "start": "1437230",
    "end": "1442270"
  },
  {
    "text": "So n is going to be my key. And a is going to be the value\nassociated with that key.",
    "start": "1442270",
    "end": "1447590"
  },
  {
    "text": "And I've just got the\nprint statement here. So I'm using an F string\nhere that prints key",
    "start": "1447590",
    "end": "1452630"
  },
  {
    "text": "and whatever value\nthat key is with val, whatever value that is, right?",
    "start": "1452630",
    "end": "1458179"
  },
  {
    "text": "So now, the print statement\nis being run directly on an object of type, animal. And now, the result\nof this loop will",
    "start": "1458180",
    "end": "1466580"
  },
  {
    "text": "be this, so key 2 with value. And then it uses the print\nstatement on my animal object.",
    "start": "1466580",
    "end": "1474740"
  },
  {
    "text": "Does that make sense? Everyone OK so far? AUDIENCE: [INAUDIBLE]",
    "start": "1474740",
    "end": "1481090"
  },
  {
    "text": "ANA BELL: Yeah, exactly. It's converting the stuff in\nthe dictionary with strings because my print statement\nis being run directly",
    "start": "1481090",
    "end": "1487429"
  },
  {
    "text": "on that object of type animal. And it knows how to do that. I implemented the dunder str.",
    "start": "1487430",
    "end": "1492446"
  },
  {
    "text": " Everyone OK?",
    "start": "1492446",
    "end": "1499520"
  },
  {
    "text": "OK, so let's have you try this. Let's have you\nwrite a little code. So this function, it's\ngoing to be very similar.",
    "start": "1499520",
    "end": "1508400"
  },
  {
    "text": "We're not making dictionaries. You'll be making a list. But you'll encounter\nthe same problem. The input here is going to be\ntwo lists of the same length.",
    "start": "1508400",
    "end": "1517030"
  },
  {
    "text": "One list has numbers. One list has strings. And what I'd like you to do\nis create for me a new list.",
    "start": "1517030",
    "end": "1524410"
  },
  {
    "text": "And the new list is going\nto have animal objects, where you match index by index.",
    "start": "1524410",
    "end": "1530710"
  },
  {
    "text": "So the resulting animal\nobject at index 0 will basically create for\nme a new animal with age two",
    "start": "1530710",
    "end": "1537519"
  },
  {
    "text": "and named blobfish, right? The animal, object and the\nresulting list at index 1",
    "start": "1537520",
    "end": "1544320"
  },
  {
    "text": "will be with age five\nand name crazyant. And then the animal\nobject at index 2 will be age one\nand named parafox.",
    "start": "1544320",
    "end": "1551580"
  },
  {
    "text": "So we're just doing the\nsame thing index by index, where you create a\nnew animal object",
    "start": "1551580",
    "end": "1556740"
  },
  {
    "text": "with the age, this\nvalue, one at a time.",
    "start": "1556740",
    "end": "1562620"
  },
  {
    "text": "And you set the name to be\nthis value one at a time, and then return that list. ",
    "start": "1562620",
    "end": "1570310"
  },
  {
    "text": "So that should be line 79.",
    "start": "1570310",
    "end": "1575780"
  },
  {
    "text": " OK, who has a start for me?",
    "start": "1575780",
    "end": "1581179"
  },
  {
    "text": " OK, should we call it L3?",
    "start": "1581180",
    "end": "1586900"
  },
  {
    "text": "OK. AUDIENCE: But then for n in\nL1, [INAUDIBLE] having it",
    "start": "1586900",
    "end": "1595760"
  },
  {
    "text": "go through L2 of n.",
    "start": "1595760",
    "end": "1601610"
  },
  {
    "text": "ANA BELL: Yes, but then\nif you're doing L2 of n, then this should be\nthe index, right?",
    "start": "1601610",
    "end": "1607200"
  },
  {
    "text": "So how do I make this be the\nindex instead of the element directly? Yeah, yeah.",
    "start": "1607200",
    "end": "1614510"
  },
  {
    "text": "AUDIENCE: Well maybe n\nof, over the range column?",
    "start": "1614510",
    "end": "1619878"
  },
  {
    "text": "ANA BELL: Yeah, exactly, right? So instead of looking\nat the element directly, let's just look at the range.",
    "start": "1619878",
    "end": "1625020"
  },
  {
    "text": "So for i in, range, and\nthen we need to do len. Pick one of the lists because\nthey're the same length.",
    "start": "1625020",
    "end": "1631620"
  },
  {
    "text": "So now, i is 0, 1, 2, 3,\n4, 5, all the index values.",
    "start": "1631620",
    "end": "1637730"
  },
  {
    "text": " AUDIENCE: Well, and you can make\nL3 [INAUDIBLE] L1 at index i",
    "start": "1637730",
    "end": "1653640"
  },
  {
    "text": "equal to L2 at index i. ANA BELL: So L1 at index\ni, so I need to create",
    "start": "1653640",
    "end": "1661269"
  },
  {
    "text": "an animal with that age, right? So let's do this. ",
    "start": "1661270",
    "end": "1669210"
  },
  {
    "text": "Age equals L1 at index i,\njust to save it as a variable.",
    "start": "1669210",
    "end": "1674230"
  },
  {
    "text": "And name equals L2 at index i. Do we agree?",
    "start": "1674230",
    "end": "1680110"
  },
  {
    "text": "So now that I have age and\nname stored in these variables, how do I make an animal\nobject with that age?",
    "start": "1680110",
    "end": "1690679"
  },
  {
    "text": "Yeah. AUDIENCE: You could\nsay L3 at i equals--",
    "start": "1690680",
    "end": "1697180"
  },
  {
    "text": "well, I know you'd\ncall it animal.h. ANA BELL: Well, the init\nmethod creates for me",
    "start": "1697180",
    "end": "1702980"
  },
  {
    "text": "an animal with that age, right? So when we just create a\nnew animal object, we just",
    "start": "1702980",
    "end": "1708330"
  },
  {
    "text": "pass in that age, right? Like, the constructor requires\nthe age of the animal, right?",
    "start": "1708330",
    "end": "1718380"
  },
  {
    "text": "So when we construct\na new animal object, we just invoke the\nname of our animal.",
    "start": "1718380",
    "end": "1723550"
  },
  {
    "text": "Where is it? Here, right? Or-- sorry, our animal\ntype, our animal class.",
    "start": "1723550",
    "end": "1728910"
  },
  {
    "text": "And then we pass\nin the age that we want to create this\nanimal with, right? And that, according\nto the init method,",
    "start": "1728910",
    "end": "1737090"
  },
  {
    "text": "creates self.age\nto be whatever is passed in, and the name, None.",
    "start": "1737090",
    "end": "1745230"
  },
  {
    "text": "So we're halfway there. We've created an animal object\nwith the age that we want.",
    "start": "1745230",
    "end": "1750750"
  },
  {
    "text": "But the name data attribute\nfor this object is None. ",
    "start": "1750750",
    "end": "1757160"
  },
  {
    "text": "Everyone with me so far?  So how do we make the\nname of this animal",
    "start": "1757160",
    "end": "1764840"
  },
  {
    "text": "object be the one that we\nsaved from that L2 list? ",
    "start": "1764840",
    "end": "1772630"
  },
  {
    "text": "AUDIENCE: You can use\nthe setter function. ANA BELL: Yeah, exactly. We can use the setter function,\nyeah, set name right here,",
    "start": "1772630",
    "end": "1778610"
  },
  {
    "text": "right? Don't access the\nattribute directly. But yeah, we can use\na setter function. ",
    "start": "1778610",
    "end": "1786570"
  },
  {
    "text": "So this created for me\nthat new animal, right? But I need to actually save\nthat animal somehow, right?",
    "start": "1786570",
    "end": "1793500"
  },
  {
    "text": "Because I need to\nreference it later. So let me do this. a equals animal with that age.",
    "start": "1793500",
    "end": "1798900"
  },
  {
    "text": "And then we run the setter\nfunction on this object, a, right? set_name-- it's just a function.",
    "start": "1798900",
    "end": "1806750"
  },
  {
    "text": "And what name do we want to\nset it at, this thing here? So name here is this\nvariable that we",
    "start": "1806750",
    "end": "1812120"
  },
  {
    "text": "extracted from the L2 list. ",
    "start": "1812120",
    "end": "1818180"
  },
  {
    "text": "Everyone OK so far? So now, what I have is,\nobject a is a variable that's",
    "start": "1818180",
    "end": "1826780"
  },
  {
    "text": "bound to an animal object. The age was set when\nwe first created it.",
    "start": "1826780",
    "end": "1833340"
  },
  {
    "text": "And the name, we just set\nthrough the setter function. ",
    "start": "1833340",
    "end": "1839350"
  },
  {
    "text": "And now, we should\njust put it in my list. My list is originally\nempty, right?",
    "start": "1839350",
    "end": "1845140"
  },
  {
    "text": "So now, I don't have a bunch\nof elements to add it to. So let's just append it\nto L3, like that, right?",
    "start": "1845140",
    "end": "1858527"
  },
  {
    "text": "I mean, theoretically, I could\nhave created an empty list that was three elements long. And then I could do L3.i.",
    "start": "1858527",
    "end": "1863809"
  },
  {
    "text": " But this works, too. ",
    "start": "1863810",
    "end": "1872500"
  },
  {
    "text": "And then at the end,\nlet's return L3, right?",
    "start": "1872500",
    "end": "1879850"
  },
  {
    "text": "Questions about this? This is all right? ",
    "start": "1879850",
    "end": "1890510"
  },
  {
    "text": "OK, so if we run it\nand we just print the list with these\nanimal objects, we run the same problem as\nthat dictionary one, right?",
    "start": "1890510",
    "end": "1897649"
  },
  {
    "text": "You see I've got a bunch\nof memory locations here? So to test that I did it\nright, instead of printing",
    "start": "1897650",
    "end": "1904970"
  },
  {
    "text": "the list, let's iterate\nthrough our list, through this little for loop,\nand just run the print method",
    "start": "1904970",
    "end": "1911960"
  },
  {
    "text": "directly on my object, right? So now, if I run\nthat, it should just",
    "start": "1911960",
    "end": "1918050"
  },
  {
    "text": "run the print statement directly\non each of these animals, right? So that's correct, I think. ",
    "start": "1918050",
    "end": "1926000"
  },
  {
    "text": "Does that make sense? Yeah. AUDIENCE: What did you\nchange to make it bigger?",
    "start": "1926000",
    "end": "1931090"
  },
  {
    "text": "ANA BELL: Oh, so instead of\nprinting the list, this thing, I looped through my list\nand printed the elements.",
    "start": "1931090",
    "end": "1937258"
  },
  {
    "text": "AUDIENCE: Oh. So that's not in the function. ANA BELL: That's not\nin the function, no. That's just, yeah,\nthat's outside.",
    "start": "1937258",
    "end": "1943154"
  },
  {
    "text": "But this is something pretty\ncommon that you'll run into. You'll make a list or\ndictionary or some structure",
    "start": "1943155",
    "end": "1948530"
  },
  {
    "text": "or tuple or something like\nthat with objects of your type. And when you run the\nprint statement directly on that structure, it doesn't\ngo deeper than top level.",
    "start": "1948530",
    "end": "1956399"
  },
  {
    "text": "And so it prints that\nuninformative stuff. ",
    "start": "1956400",
    "end": "1964940"
  },
  {
    "text": "OK, so in this example,\nwe saw that it's better",
    "start": "1964940",
    "end": "1971179"
  },
  {
    "text": "to access the attributes\nthrough getters and setters. So in addition to the\ninit, the str method,",
    "start": "1971180",
    "end": "1978409"
  },
  {
    "text": "writing getters\nand setters to have a consistent way of accessing\nand modifying these data attributes is really important.",
    "start": "1978410",
    "end": "1984419"
  },
  {
    "text": "And then you can even impose\nrestrictions, something like, the types have to be this. Or maybe the age can't\nbe a negative number",
    "start": "1984420",
    "end": "1991080"
  },
  {
    "text": "or something like that. And it allows a lot more\nconsistent use of the object.",
    "start": "1991080",
    "end": "1997500"
  },
  {
    "text": "So now, let's move on\nto hierarchies, OK? And this is where we're going\nto talk about inheritance.",
    "start": "1997500",
    "end": "2003470"
  },
  {
    "text": "So there's something like\nmaybe 28 objects on this slide,",
    "start": "2003470",
    "end": "2008750"
  },
  {
    "text": "right? There's the six we\nencountered at the beginning of this lecture and 22 up there. So there's 28 separate\nobjects on this slide.",
    "start": "2008750",
    "end": "2017030"
  },
  {
    "text": "And all of these objects, we\ncould say, are of type animal, right? Because by our definition,\nthe attributes for an animal",
    "start": "2017030",
    "end": "2026000"
  },
  {
    "text": "is how long they've been alive. And these all are objects that\nhave been alive for some time.",
    "start": "2026000",
    "end": "2032010"
  },
  {
    "text": "But in addition to having\nthe attribute for how long they've been alive and an\nunknown name, we can actually",
    "start": "2032010",
    "end": "2040820"
  },
  {
    "text": "then create separate\ncategories, right? And each one of these\nboxes that I've created",
    "start": "2040820",
    "end": "2046970"
  },
  {
    "text": "is a different subset\nof animal, right? We'll call it a subclass or\na child of an animal class.",
    "start": "2046970",
    "end": "2054319"
  },
  {
    "text": "And that's because they will\nbring about different data attributes in addition to what\nan animal's data attributes",
    "start": "2054320",
    "end": "2062989"
  },
  {
    "text": "are. And they will bring about\ndifferent behaviors in addition to the behaviors of our really\ngeneric animal object, right?",
    "start": "2062989",
    "end": "2070820"
  },
  {
    "text": "So the things a cat can do, a\nrabbit might not be able to do. And the things a person\ncan do, a cat won't do",
    "start": "2070820",
    "end": "2076961"
  },
  {
    "text": "and a rabbit can't do, right? So they're all animals. But they all are going to have\nadditional data attributes",
    "start": "2076962",
    "end": "2084590"
  },
  {
    "text": "and additional behaviors that\nare different in these three categories, right? So I might say something like,\nthe cat has a name, an age,",
    "start": "2084590",
    "end": "2092638"
  },
  {
    "text": "and a pattern or a color. The rabbit, again,\nI said are wild. So maybe they don't get a name. But they'll have a\ncolor or pattern.",
    "start": "2092639",
    "end": "2099870"
  },
  {
    "text": "And then the age, of course,\nfrom the animal, people, of course, have the--\nthe person object has",
    "start": "2099870",
    "end": "2106350"
  },
  {
    "text": "the age that comes from animal. But in addition, they might have\na list of friends or something",
    "start": "2106350",
    "end": "2111570"
  },
  {
    "text": "associated, something like that\nassociated with them right, and a list of friends,\nsomething a cat doesn't have,",
    "start": "2111570",
    "end": "2117258"
  },
  {
    "text": "something that a\nrabbit doesn't have. So you see what I mean. And we can even go further. We can say, well, if I\ntake my person object,",
    "start": "2117258",
    "end": "2124530"
  },
  {
    "text": "I can now sub-categorize\nthat as well and say, well, this\nis a student class. And then this student\nclass, I would",
    "start": "2124530",
    "end": "2130920"
  },
  {
    "text": "say a student is a person. So all the data\nattributes and all the behaviors that a person\nhas, the student also has,",
    "start": "2130920",
    "end": "2137940"
  },
  {
    "text": "and, of course, all\nthe animal stuff because a person is an animal. So for example, let's say an\nanimal is a generic object.",
    "start": "2137940",
    "end": "2146250"
  },
  {
    "text": "It doesn't speak. But let's say a person gets\nthe behavior to speak, right? So for speaking, I\nmight just print Hello",
    "start": "2146250",
    "end": "2152760"
  },
  {
    "text": "to the screen or something\nsimple like that. A student is a person. So maybe they also get\nsomething like their age,",
    "start": "2152760",
    "end": "2162390"
  },
  {
    "text": "the name, and maybe a list of\nfriends associated with them. But a student might also have\na major or a favorite subject",
    "start": "2162390",
    "end": "2169472"
  },
  {
    "text": "in school associated\nwith them, something that a person\ndoesn't have, right? So that's a new data\nattribute associated",
    "start": "2169472",
    "end": "2175170"
  },
  {
    "text": "with a student that's not\nassociated with a person. A student might also\nhave different behaviors,",
    "start": "2175170",
    "end": "2180810"
  },
  {
    "text": "like tell me your favorite\nsubject in school, things like that. Or it might override\nbehaviors of a person.",
    "start": "2180810",
    "end": "2186640"
  },
  {
    "text": "So if a person speaks,\nsays, hello, prints hello to the screen, we can say, hey,\nif I ask the student to speak,",
    "start": "2186640",
    "end": "2193255"
  },
  {
    "text": "they might say, I\nhave homework instead or something like that, right? So what we're trying to do\nis take those relationships",
    "start": "2193255",
    "end": "2202010"
  },
  {
    "text": "and implement them in code. So here, I've got an animal\nclass, which is my base class.",
    "start": "2202010",
    "end": "2208970"
  },
  {
    "text": "It's going to be my, also called\nparent class or super-class. And then anything\nthat an animal has,",
    "start": "2208970",
    "end": "2216448"
  },
  {
    "text": "all the data attributes and all\nthe behaviors of that animal, will be inherited by\nperson, cat, and rabbit.",
    "start": "2216448",
    "end": "2221720"
  },
  {
    "text": "So anything-- so a\nperson is an animal. A cat is an animal. A rabbit is an animal. So everything they have,\nall these three subtypes",
    "start": "2221720",
    "end": "2228349"
  },
  {
    "text": "will have as well. But all these subtypes will be\ndifferent amongst themselves, right?",
    "start": "2228350",
    "end": "2233690"
  },
  {
    "text": "A person will have an\nability to speak, maybe print hello to the screen. A cat could also have\nthe ability to speak.",
    "start": "2233690",
    "end": "2239248"
  },
  {
    "text": "But maybe they'll print\nmeow to the screen. A rabbit won't even have\nthe ability to speak at all.",
    "start": "2239248",
    "end": "2244310"
  },
  {
    "text": "A person might have\na list of friends, whereas a cat won't, a rabbit\nwon't things, like that.",
    "start": "2244310",
    "end": "2249960"
  },
  {
    "text": "So we can either add\nmore information. Like, list of friends\nwas an example of that. We can add more behavior.",
    "start": "2249960",
    "end": "2255560"
  },
  {
    "text": "Like, the ability to speak\nis an example of that. And an example of overriding\nbehavior, like I mentioned,",
    "start": "2255560",
    "end": "2262210"
  },
  {
    "text": "is let's say we have a\nsubclass student of person. If a person's speak method said\nto print Hello to the screen,",
    "start": "2262210",
    "end": "2271780"
  },
  {
    "text": "we can override that behavior\nthrough a speak method inside student, where you don't\njust print hello to the screen.",
    "start": "2271780",
    "end": "2278410"
  },
  {
    "text": "You can print, I have homework. So let's try to start\nimplementing this relationship.",
    "start": "2278410",
    "end": "2287049"
  },
  {
    "text": "This is just our animal class. There's nothing new here. I'm just doing a\nlittle refresher on what this class looks like.",
    "start": "2287050",
    "end": "2293710"
  },
  {
    "text": "So we've got our init,\nwhere we initialize an age and a name that's None. We've got two\ngetters, two setters,",
    "start": "2293710",
    "end": "2300779"
  },
  {
    "text": "and this str method that prints\nanimal, colon, name, colon, age. ",
    "start": "2300780",
    "end": "2308770"
  },
  {
    "text": "So yeah, OK, this animal\nclass inherits from object, so the generic Python object.",
    "start": "2308770",
    "end": "2314240"
  },
  {
    "text": "And now, let's work\non the subclass, cat. So when I create\nmy subclass cat,",
    "start": "2314240",
    "end": "2319930"
  },
  {
    "text": "the way I tell Python\nthat this cat is an animal is by putting in the parentheses\nhere the name of the type",
    "start": "2319930",
    "end": "2326770"
  },
  {
    "text": "that I want this\nclass to inherit from. So a cat is an animal.",
    "start": "2326770",
    "end": "2335030"
  },
  {
    "text": "Now, one of the things\nI kept coming back to is, any time you\ncreate a new data type,",
    "start": "2335030",
    "end": "2340550"
  },
  {
    "text": "you have to have an init method. This doesn't specifically\nhave an init method, right?",
    "start": "2340550",
    "end": "2346960"
  },
  {
    "text": "I've just got two\nother methods here. So you might think\nthat it's missing. But it's actually not because\nas soon as you put another data",
    "start": "2346960",
    "end": "2356380"
  },
  {
    "text": "type here in the parentheses,\nso that cat is an animal, think of it like Python\ngoing into the animal class,",
    "start": "2356380",
    "end": "2364150"
  },
  {
    "text": "copying and pasting everything\nthat's part of the animal class or copying everything that's\npart of that animal class",
    "start": "2364150",
    "end": "2370240"
  },
  {
    "text": "and pasting it inside cat. So since I don't have an init\nmethod specifically defined",
    "start": "2370240",
    "end": "2376840"
  },
  {
    "text": "in cat, Python\nwill say, oh, we'll just use the init method\nof your parent animal.",
    "start": "2376840",
    "end": "2383760"
  },
  {
    "text": "So the way we create\na cat is going to be exactly the same\nway we create an animal,",
    "start": "2383760",
    "end": "2388940"
  },
  {
    "text": "except that the name is\ngoing to be cat as my object type instead of animal.",
    "start": "2388940",
    "end": "2394310"
  },
  {
    "text": "But we just pass\nit in one thing, which is the age of this cat.",
    "start": "2394310",
    "end": "2399440"
  },
  {
    "text": "So since we're copying and\npasting everything-- yeah, question. AUDIENCE: The parent class\nof animal [INAUDIBLE]",
    "start": "2399440",
    "end": "2406190"
  },
  {
    "text": "is that also [INAUDIBLE]? ANA BELL: Yes, exactly. So the parent class\nof animal is object. So cat will also\nbe a Python object.",
    "start": "2406190",
    "end": "2412890"
  },
  {
    "text": "But that's super generic stuff,\nlike binding a variable name to this object,\nthings like that. ",
    "start": "2412890",
    "end": "2420310"
  },
  {
    "text": "So not only does the\ninit get copied in, but every single data\nattribute, age and name,",
    "start": "2420310",
    "end": "2426240"
  },
  {
    "text": "every single way that that\ndata attribute gets created, so the self.age is going to\nbe a data attribute of cat.",
    "start": "2426240",
    "end": "2432330"
  },
  {
    "text": "And it's going to\nbe set to whatever is passed in as a\nparameter. self.name will be initialized to\nnone, just like for animal.",
    "start": "2432330",
    "end": "2438780"
  },
  {
    "text": "I've got my two\ngetters, my two setters that also work with cats. And then, the str\nmethod of animal",
    "start": "2438780",
    "end": "2446099"
  },
  {
    "text": "will also be inherited in here. But now, we notice one thing.",
    "start": "2446100",
    "end": "2451200"
  },
  {
    "text": "And that's, we\nhave an str method defined in the animal class. But then, in my cat class, I\ndefine an str method as well,",
    "start": "2451200",
    "end": "2459210"
  },
  {
    "text": "right? So that's called overriding\nyour parents's class.",
    "start": "2459210",
    "end": "2464770"
  },
  {
    "text": "And when we create an\nobject of type cat, if this object has\na method that has",
    "start": "2464770",
    "end": "2471610"
  },
  {
    "text": "the same name as their\nparent, we use this method. There's no reason to\ngo up to your parent",
    "start": "2471610",
    "end": "2477849"
  },
  {
    "text": "to ask for their method. We use the one that\nis for this object.",
    "start": "2477850",
    "end": "2483650"
  },
  {
    "text": "And cat, in addition to having\neverything that animal has, implements a new behavior,\nwhich is the ability to speak.",
    "start": "2483650",
    "end": "2492099"
  },
  {
    "text": "And all it does is print\nmeow to the screen. OK, so let's look at some code.",
    "start": "2492100",
    "end": "2499080"
  },
  {
    "text": "So here's my cat. So I created a new cat\nobject the same way I would create an animal.",
    "start": "2499080",
    "end": "2504170"
  },
  {
    "text": "But I'm invoking the\nname of this class, cat. The way I create\nan animal is just",
    "start": "2504170",
    "end": "2510320"
  },
  {
    "text": "by passing in the age\nof this thing, right? So here, I'm creating a\ncat whose age is five.",
    "start": "2510320",
    "end": "2516080"
  },
  {
    "text": "The name of this\ncat is None, right? Because that's what the\ninit method of animal does.",
    "start": "2516080",
    "end": "2523140"
  },
  {
    "text": "But I can run the methods\non animal on my cat object because a cat is an animal.",
    "start": "2523140",
    "end": "2528440"
  },
  {
    "text": "So all the methods\nthat work with animals will work with an\nobject of type cat. So, here, I can just\nrun the set_name method",
    "start": "2528440",
    "end": "2535670"
  },
  {
    "text": "on my cat object. Even though the method is not\nexplicitly defined in here, it's defined in my parent.",
    "start": "2535670",
    "end": "2542730"
  },
  {
    "text": "So if I set the name\nto fluffy and then I print the cat object,\nit's going to print, it's a cat, colon, the\nname, colon, the age.",
    "start": "2542730",
    "end": "2550415"
  },
  {
    "text": " speak is just going to\nprint meow to the screen.",
    "start": "2550415",
    "end": "2556560"
  },
  {
    "text": "We can do the getter\nmethods as well. So all of these methods that\nwere implemented with animal work with cats as well.",
    "start": "2556560",
    "end": "2563290"
  },
  {
    "text": "Now, in here, object\na was created up here",
    "start": "2563290",
    "end": "2568710"
  },
  {
    "text": "when we talked about animals. It's an animal object because\nit was created using the animal",
    "start": "2568710",
    "end": "2576480"
  },
  {
    "text": "invocation here. Does the animal class\nhave a method to speak?",
    "start": "2576480",
    "end": "2582630"
  },
  {
    "text": "No. So if I actually run this,\nit'll give me an error, right? It just says\nthere's no attribute",
    "start": "2582630",
    "end": "2587880"
  },
  {
    "text": "speak, which makes sense. I never defined that. I defined that in your\nchild, not the parent. ",
    "start": "2587880",
    "end": "2595960"
  },
  {
    "text": "Questions about cats? ",
    "start": "2595960",
    "end": "2602190"
  },
  {
    "text": "OK, so I want to briefly\ntouch upon overriding methods",
    "start": "2602190",
    "end": "2610630"
  },
  {
    "text": "because it can get a\nlittle bit confusing. So you notice, the str\nmethod was implemented",
    "start": "2610630",
    "end": "2616180"
  },
  {
    "text": "in both of these objects. The str method is in cat, which\noverrides the animal's method",
    "start": "2616180",
    "end": "2621820"
  },
  {
    "text": "to print cat, colon,\nname, colon, age. And the animal\nmethod, str method, prints animal, colon,\nname, colon, age.",
    "start": "2621820",
    "end": "2628450"
  },
  {
    "text": "So the rule is, when you're\nrunning a method that you know exists in a whole bunch of\nthese inherited objects,",
    "start": "2628450",
    "end": "2638350"
  },
  {
    "text": "you look at-- which one is it? It's str, right? So it would be the print\nmethod, or any method.",
    "start": "2638350",
    "end": "2644500"
  },
  {
    "text": "It doesn't matter what it is. You look at the object you're\ncalling the method on, right? So if it's a dot notation,\nyou look at the thing",
    "start": "2644500",
    "end": "2651010"
  },
  {
    "text": "before the dot. If it's one of these\nspecial methods, what's the object you're\nrunning this method on?",
    "start": "2651010",
    "end": "2656720"
  },
  {
    "text": "So here, I've got the\nprint method on object c. Python asks, what is your type?",
    "start": "2656720",
    "end": "2663250"
  },
  {
    "text": "Oh, you're a cat? Do you have an str\nmethod defined? Yes, you do. So then, it uses the one\nthat it finds right away.",
    "start": "2663250",
    "end": "2670970"
  },
  {
    "text": "But if for some reason,\nthe current object doesn't have that method,\nso an example of that",
    "start": "2670970",
    "end": "2677860"
  },
  {
    "text": "is set_name, right? set_name is not a\nmethod defined in cat.",
    "start": "2677860",
    "end": "2683880"
  },
  {
    "text": "c is an object of type cat. It doesn't have that method. Python says, oh, you\ndon't have that method. Let me look at your parent.",
    "start": "2683880",
    "end": "2689849"
  },
  {
    "text": "Does your parent\nhave that method? And then it looks\nthrough in here. And it finds it.",
    "start": "2689850",
    "end": "2694860"
  },
  {
    "text": "Good, if it finds\nit, it uses that one. If it doesn't find it, it\nlooks at your parent's parent. If your parent's parent\nhas it, it uses that one.",
    "start": "2694860",
    "end": "2701680"
  },
  {
    "text": "And if it doesn't, it looks at\nyour parent's parent's parent. Until it gets to the\ngeneric Python object, this one right here, if they\nhave it, it uses that one.",
    "start": "2701680",
    "end": "2710890"
  },
  {
    "text": "And if it doesn't, then\nit throws an error. So an example of something that\nthe generic Python object has",
    "start": "2710890",
    "end": "2716280"
  },
  {
    "text": "is the str method, right? It just prints the\nmemory location. And that's why, when we\ndon't implement our str",
    "start": "2716280",
    "end": "2721890"
  },
  {
    "text": "method in our class, Python\ndefaults to the generic Python object. ",
    "start": "2721890",
    "end": "2735069"
  },
  {
    "text": "Questions?  OK, let's look at a person.",
    "start": "2735070",
    "end": "2742460"
  },
  {
    "text": "So let's create a person object.",
    "start": "2742460",
    "end": "2747550"
  },
  {
    "text": "This person object, again,\nwill inherit from animal because the only\nthings we set an animal",
    "start": "2747550",
    "end": "2755650"
  },
  {
    "text": "as defined as is being alive\nfor some period of time. And it has no name.",
    "start": "2755650",
    "end": "2761362"
  },
  {
    "text": "The name is None. So we don't even pass that in. So let's say the parent\nclass, the person is animal.",
    "start": "2761362",
    "end": "2768579"
  },
  {
    "text": "But this is my\ndesign choice, also to highlight a bunch of stuff. But let's say that\nthis person class, when",
    "start": "2768580",
    "end": "2776589"
  },
  {
    "text": "I create a new person\nobject, I would like to pass in an age and a name.",
    "start": "2776590",
    "end": "2782283"
  },
  {
    "text": "So I don't just want to\ncreate a person with an age. I want to actually create it\nusing a name in that parameter",
    "start": "2782283",
    "end": "2787869"
  },
  {
    "text": "list. So as an example, in my code\nhere, when I create a person,",
    "start": "2787870",
    "end": "2793359"
  },
  {
    "text": "I would like to pass in their\nname, comma, and the age, two parameters to make a person.",
    "start": "2793360",
    "end": "2800660"
  },
  {
    "text": "Well, I can't use the\nanimal's init method, right? I could for cat because\ncat was happy to just",
    "start": "2800660",
    "end": "2808180"
  },
  {
    "text": "be created using an age. But I can't do that\nfor a person because I would like to create\na person by passing",
    "start": "2808180",
    "end": "2814240"
  },
  {
    "text": "in two parameters in the\ncreation of the person. So what I have to\ndo is effectively",
    "start": "2814240",
    "end": "2820960"
  },
  {
    "text": "override the init\nmethod of animal by implementing it in my\nclass definition, right?",
    "start": "2820960",
    "end": "2829069"
  },
  {
    "text": "So here, I have to define\nmy own init method. And I do it because now, I'm\nnot just passing in an age.",
    "start": "2829070",
    "end": "2835730"
  },
  {
    "text": "I want to pass in a name and\nan age in the parameter list. And then, beyond that, what do\nI do inside the init method?",
    "start": "2835730",
    "end": "2843650"
  },
  {
    "text": "Well, I know that this\nperson is an animal. So what I'm going to do\nto make my life simpler",
    "start": "2843650",
    "end": "2850660"
  },
  {
    "text": "is to call animals init method. So here, we use\nthis dot notation on the name of\nthe class, sort of",
    "start": "2850660",
    "end": "2856660"
  },
  {
    "text": "similar to how I showed you that\nlong way of calling methods. Well, here's the name\nof the class, dot",
    "start": "2856660",
    "end": "2862600"
  },
  {
    "text": "the name of the method, init. And now, I pass in all the\nparameters, self and age. ",
    "start": "2862600",
    "end": "2869609"
  },
  {
    "text": "So I'm going to call\nanimal's init method, which will create that\nself.age, set it to age,",
    "start": "2869610",
    "end": "2875280"
  },
  {
    "text": "and create that self.name\nand set it to none. So I'm taking\nadvantage of the fact that that init method already\ndoes those two lines for me,",
    "start": "2875280",
    "end": "2882300"
  },
  {
    "text": "right? So I've turned those two\nlines into one line here. And then I'm going\nto say, well, I'd",
    "start": "2882300",
    "end": "2888450"
  },
  {
    "text": "like to set the\nname of my person. So I'm going to call the method\nset_name with the parameter",
    "start": "2888450",
    "end": "2893520"
  },
  {
    "text": "that's passed in. And then I'm also\ngoing to initialize another data attribute\nfor a person, which",
    "start": "2893520",
    "end": "2899609"
  },
  {
    "text": "is a list of friends,\ninitially empty. So what's nice about this, and\nwhen we implement the student",
    "start": "2899610",
    "end": "2905420"
  },
  {
    "text": "class, it'll look\neven nicer, what's nice about this is we're\ntaking advantage of the fact",
    "start": "2905420",
    "end": "2910579"
  },
  {
    "text": "that the init method of animal\nalready does some work for us. But at the same\ntime, we can clearly",
    "start": "2910580",
    "end": "2915890"
  },
  {
    "text": "see, in this subclass,\nwhat the person object brings in addition\nto the animal object, right?",
    "start": "2915890",
    "end": "2924619"
  },
  {
    "text": "So in addition to just being\nan animal, we give a name",
    "start": "2924620",
    "end": "2930050"
  },
  {
    "text": "and get a list of\nfriends, right? So it's very nice to see\nthe extra data attributes",
    "start": "2930050",
    "end": "2935270"
  },
  {
    "text": "or what you need to change\nwith respect to the animal to make a person.",
    "start": "2935270",
    "end": "2940760"
  },
  {
    "text": "And then, beyond that-- so I think that's what I said. Sorry, I didn't go\nthrough that as I said it.",
    "start": "2940760",
    "end": "2946619"
  },
  {
    "text": "And then beyond\nthat, I've got some-- we can add some\ngetters and setters. I just did a select few.",
    "start": "2946620",
    "end": "2952290"
  },
  {
    "text": "But you should add\nthem for all of them. So the get_friends just\nreturns a copy of my list because maybe I want to\nkeep my original order",
    "start": "2952290",
    "end": "2959422"
  },
  {
    "text": "or something like that. So it's just good style to\nreturn a copy of a list. The ability to add\na friend to my list",
    "start": "2959422",
    "end": "2966630"
  },
  {
    "text": "basically just adds a\nfriend's name as a string, if it's not already in the list.",
    "start": "2966630",
    "end": "2972040"
  },
  {
    "text": "So I can't have two\nAna's in my list. I consider them the same.",
    "start": "2972040",
    "end": "2977220"
  },
  {
    "text": "Ability to speak just\nprints hello to the screen. And then I added this\ncute little function to tell me the age difference\nbetween this object that I'm",
    "start": "2977220",
    "end": "2985560"
  },
  {
    "text": "calling age difference on\nand some other person, right? And all it does is\ngrab the two ages,",
    "start": "2985560",
    "end": "2991710"
  },
  {
    "text": "take the absolute value\nof the difference, and print that to the screen. And then lastly, we're\ngoing to override the str",
    "start": "2991710",
    "end": "2999980"
  },
  {
    "text": "method of animal, instead of\nsaying animal, colon, name, colon, age, to say person,\ncolon, name, colon, age.",
    "start": "2999980",
    "end": "3005650"
  },
  {
    "text": "So this way, it helps me\nfigure out the type as well. So in my code here, I've\ngot two people, p1, p2.",
    "start": "3005650",
    "end": "3015560"
  },
  {
    "text": "Here's Jack, age 30. Here's Jill, age 25. If I run the get_name,\nget_age on both of these,",
    "start": "3015560",
    "end": "3025880"
  },
  {
    "text": "this will run animal's\nget_age get_name. I've not defined these\nin here, which is fine.",
    "start": "3025880",
    "end": "3032390"
  },
  {
    "text": "We inherit from animal. And animal knows how to\ngrab the age and name. So there they are. ",
    "start": "3032390",
    "end": "3039710"
  },
  {
    "text": "If I print P1, it'll print\nperson, colon, name, age. If I ask p1 to speak,\nit just prints, hello.",
    "start": "3039710",
    "end": "3048150"
  },
  {
    "text": "If I ask the age difference\nbetween p1 and p2, no matter what, it just takes\nthe absolute value, prints five year difference.",
    "start": "3048150",
    "end": "3054930"
  },
  {
    "text": "And then let's add\nsome friends to p1. So here, I've got two Bob's.",
    "start": "3054930",
    "end": "3060060"
  },
  {
    "text": "But it's just the list,\nkeeping unique names. ",
    "start": "3060060",
    "end": "3068940"
  },
  {
    "text": "OK, so let's have you try\nthis for a little bit. ",
    "start": "3068940",
    "end": "3074335"
  },
  {
    "text": "It's a little bit,\nagain, working with objects of this type. So it's a function that\ntakes in a dictionary.",
    "start": "3074335",
    "end": "3081270"
  },
  {
    "text": "So I'll tell you what the\ndictionary looks like. It maps a person object to\na cat object, all right?",
    "start": "3081270",
    "end": "3089900"
  },
  {
    "text": "So that's my dictionary. So this is the key. This is the value. So I've got all\nthese person objects",
    "start": "3089900",
    "end": "3095750"
  },
  {
    "text": "being mapped to cat objects.  So as an example, here's\nan input dictionary.",
    "start": "3095750",
    "end": "3102760"
  },
  {
    "text": "p1 is this person here. And p2 is this\nperson here, right?",
    "start": "3102760",
    "end": "3110890"
  },
  {
    "text": "So my two keys, p1, p2,\nare person objects, right? They're not integers,\nfloats, strings.",
    "start": "3110890",
    "end": "3116289"
  },
  {
    "text": "They're person objects. And then the values associated\nwith those are cat objects. So here's an object of\ntype cat with its name.",
    "start": "3116290",
    "end": "3123880"
  },
  {
    "text": "I just ran set_name on that cat\nafter I created it, same here. Here's the name set to\nthis new cat object.",
    "start": "3123880",
    "end": "3131980"
  },
  {
    "text": "So I've mapped p1\nto c1, p2 to c2. So if I run this function,\nwhat I'd like to do",
    "start": "3131980",
    "end": "3137155"
  },
  {
    "text": "is not return anything\nthis function. It just prints something. On each line, as you're\ngoing through all the items",
    "start": "3137155",
    "end": "3143230"
  },
  {
    "text": "in the dictionary,\nit just prints the name of that key, colon,\nthe name of the value.",
    "start": "3143230",
    "end": "3153302"
  },
  {
    "text": "So all I'd like to\ndo is write code that extracts the name\nfrom my person object and from the cat object, OK?",
    "start": "3153302",
    "end": "3164353"
  },
  {
    "text": "I know what you're thinking. I look really young for 86. But it's diet, exercise,\nand hanging out with you",
    "start": "3164353",
    "end": "3171790"
  },
  {
    "text": "guys, and candy, for sure.",
    "start": "3171790",
    "end": "3178286"
  },
  {
    "text": "So here, let's write\nthis code on 178.",
    "start": "3178286",
    "end": "3184200"
  },
  {
    "text": "All right, does\nanyone have a start? ",
    "start": "3184200",
    "end": "3190700"
  },
  {
    "text": "Yeah. ",
    "start": "3190700",
    "end": "3196586"
  },
  {
    "text": "d.items, yep. Let's write a note for\nourselves. k is person.",
    "start": "3196586",
    "end": "3203970"
  },
  {
    "text": "v is cat, yep. AUDIENCE: [INAUDIBLE]\nk.get_name.",
    "start": "3203970",
    "end": "3209864"
  },
  {
    "text": " ANA BELL: Yep, so k.get_name,\nyou want to save it",
    "start": "3209864",
    "end": "3215940"
  },
  {
    "text": "as a variable? AUDIENCE: [INAUDIBLE] ANA BELL: Or no?",
    "start": "3215940",
    "end": "3221585"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ANA BELL: Oh, you want to\nput it on the one line. That's fine, yep. Print, k.get_name.",
    "start": "3221585",
    "end": "3229091"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ANA BELL: Yup, v.get_name,\nexactly, yep, perfect.",
    "start": "3229091",
    "end": "3239160"
  },
  {
    "text": "And yeah, nothing to return. So let's run that, cool.",
    "start": "3239160",
    "end": "3245760"
  },
  {
    "text": " Does anyone have\nquestions about that? ",
    "start": "3245760",
    "end": "3255740"
  },
  {
    "text": "All right, so we're just\nmanipulating these object types. And again, if it's\nconfusing, I highly",
    "start": "3255740",
    "end": "3260880"
  },
  {
    "text": "recommend, quiz\nsituations and things like that, now that we're\nworking with object types, just make little notes, right?",
    "start": "3260880",
    "end": "3267987"
  },
  {
    "text": "I know we're iterating\nthrough a dictionary. And it's kind of\nconvention, right? Keys are integers,\nthings like that.",
    "start": "3267987",
    "end": "3273220"
  },
  {
    "text": "But this particular case, just\na little note that k is a person will help you remember that you\nneed to run a method on this k",
    "start": "3273220",
    "end": "3281190"
  },
  {
    "text": "variable, like we did here,\nk.get_name and then v.get_name. ",
    "start": "3281190",
    "end": "3293940"
  },
  {
    "text": "OK, yeah. AUDIENCE: How do we\nensure that the get_name,",
    "start": "3293940",
    "end": "3302070"
  },
  {
    "text": "that the [INAUDIBLE]? And-- ANA BELL: How do you ensure\nthat the keys are person?",
    "start": "3302070",
    "end": "3308868"
  },
  {
    "text": " You can't ensure it in\nthis particular case.",
    "start": "3308868",
    "end": "3314440"
  },
  {
    "text": "I mean, you could say, if\ntype of k equal, equal, person, capital P,\nperson, then do the code,",
    "start": "3314440",
    "end": "3322859"
  },
  {
    "text": "and else probably\njust skip it or raise a value error or something. Like, you could\nenforce it that way. But in this\nparticular case, we're",
    "start": "3322860",
    "end": "3329190"
  },
  {
    "text": "just assuming that the tester\nwill make person objects mapped",
    "start": "3329190",
    "end": "3334200"
  },
  {
    "text": "to cat objects, yeah. But yes, certainly, if you're\nmaking a software for something",
    "start": "3334200",
    "end": "3341010"
  },
  {
    "text": "more complex, you should\nprobably make sure of that, enforce that. OK, so the big idea\nwith inheritance",
    "start": "3341010",
    "end": "3347310"
  },
  {
    "text": "is that now that we\nhave sub-classes, also known as child classes,\nthose sub-classes",
    "start": "3347310",
    "end": "3353160"
  },
  {
    "text": "use a parent's attributes. So everything that a\nparent has and can do, a child has and can do as well.",
    "start": "3353160",
    "end": "3359160"
  },
  {
    "text": "But that child can override\ncertain parent's behaviors. And the child can add new\nbehaviors or new attributes,",
    "start": "3359160",
    "end": "3367680"
  },
  {
    "text": "in addition to the parent. Let's look at one more\nsubclass student before we go on to one last thing.",
    "start": "3367680",
    "end": "3374089"
  },
  {
    "text": "So a student here from\nour pictures and diagrams",
    "start": "3374090",
    "end": "3379370"
  },
  {
    "text": "inherits from person,\nnot from animal, but indirectly\nfrom animal, right? So a student is a person.",
    "start": "3379370",
    "end": "3386250"
  },
  {
    "text": "And when I create\na person, I would love to create it using a\nname an age and a major.",
    "start": "3386250",
    "end": "3391910"
  },
  {
    "text": "But we can use a default\nparameter for that major to be None if we don't\nactually want to pass it in. But I would like to create it\nby setting their major as well.",
    "start": "3391910",
    "end": "3401460"
  },
  {
    "text": "So now, I can't use the\nparent's init method because I've got three\nparameters I would like",
    "start": "3401460",
    "end": "3406880"
  },
  {
    "text": "to initiate my student with. So I would like to create my\nown init method inside person.",
    "start": "3406880",
    "end": "3412740"
  },
  {
    "text": "So here I am, defining\nmy own init method. And now, it becomes\napparent why it's",
    "start": "3412740",
    "end": "3420510"
  },
  {
    "text": "nice to call the init\nmethod of your parent because if I say a\nstudent is a person,",
    "start": "3420510",
    "end": "3427020"
  },
  {
    "text": "all I need to do to\ninitialize a person type, all the attributes\nassociated with a person",
    "start": "3427020",
    "end": "3432503"
  },
  {
    "text": "and the init method\nof the person. So just call the init\nmethod of the person. That will create my name,\nmy age, set my name,",
    "start": "3432503",
    "end": "3440280"
  },
  {
    "text": "create my list of\nfriends, all that stuff. So those five lines get\ncompacted into this one line.",
    "start": "3440280",
    "end": "3446320"
  },
  {
    "text": "And then it also becomes really\neasy to see what the student has, in addition to the person.",
    "start": "3446320",
    "end": "3452410"
  },
  {
    "text": "Well, it just has a major\ndata attribute. self.major is",
    "start": "3452410",
    "end": "3457510"
  },
  {
    "text": "set to whatever is passed in. And then, beyond this,\nit's just methods",
    "start": "3457510",
    "end": "3462910"
  },
  {
    "text": "here and there to do stuff. So here, I've got a\nchange_major method.",
    "start": "3462910",
    "end": "3467920"
  },
  {
    "text": "It just sets the\nmajor to something. I should probably add a\ngetter in there as well. But I ran out of room. And here's a speak method\nthat gets overridden",
    "start": "3467920",
    "end": "3475600"
  },
  {
    "text": "from the method of person. So the speak\nmethod, for student, I made it slightly more complex\nthan what the parent has.",
    "start": "3475600",
    "end": "3486500"
  },
  {
    "text": "So here, I'm using this random\nlibrary, not a random library I found, arbitrary library,\nit's a library called random.",
    "start": "3486500",
    "end": "3494150"
  },
  {
    "text": "And it has a bunch of\nfunctions that allow you to deal with random numbers. So one of the functions\nthat this random library has",
    "start": "3494150",
    "end": "3501520"
  },
  {
    "text": "gives you a number\nbetween 0 and 1 at random, so a float at random.",
    "start": "3501520",
    "end": "3507440"
  },
  {
    "text": "So what I'm doing in the\nspeak method for students is randomly printing\none of four strings,",
    "start": "3507440",
    "end": "3515230"
  },
  {
    "text": "according to where that\nrandom number that's gotten lines between 0 and 1.",
    "start": "3515230",
    "end": "3520780"
  },
  {
    "text": "And then-- oops, not yet. And then, here, I'm\noverriding my str method.",
    "start": "3520780",
    "end": "3527060"
  },
  {
    "text": "So we can see, in\nthe student class",
    "start": "3527060",
    "end": "3532750"
  },
  {
    "text": "here, here, I've\ncreated two students. So this one actually\nhas a major. This one's major is going to be\nset to None, just the default",
    "start": "3532750",
    "end": "3539230"
  },
  {
    "text": "value. And then, if I run\nthis code, you can see, every time I run it, the student\n1 says something different.",
    "start": "3539230",
    "end": "3546610"
  },
  {
    "text": "Student two says\nsomething different. So it's just running\nthis random number and then choosing what to print.",
    "start": "3546610",
    "end": "3555030"
  },
  {
    "text": "Maybe more often than\nnot, I should bias it towards something.",
    "start": "3555030",
    "end": "3561470"
  },
  {
    "text": "All right, so one more class\nI'd like to talk about, rabbit. That's the one that\nwe actually haven't talked about from those\nlittle subcategories.",
    "start": "3561470",
    "end": "3568310"
  },
  {
    "text": "And as we talk about\nthis rabbit class, I'd like to introduce one\nmore idea of a variable.",
    "start": "3568310",
    "end": "3573390"
  },
  {
    "text": "So far, we've had just\nplain old variables that go away as soon as\na environment disappears.",
    "start": "3573390",
    "end": "3579290"
  },
  {
    "text": "We've talked about\ninstance variables, a.k.a. data attributes, which\nare consistent for objects",
    "start": "3579290",
    "end": "3585560"
  },
  {
    "text": "that you create\nof a certain type but have different values\nfor different instances. The last variable I'd like to\ntalk about is a class variable.",
    "start": "3585560",
    "end": "3594650"
  },
  {
    "text": "What's cool about a\nclass variable is that, think of it like\na shared resource.",
    "start": "3594650",
    "end": "3600450"
  },
  {
    "text": "So it's a variable\nthat any instance of this particular type\ncan access and modify.",
    "start": "3600450",
    "end": "3609980"
  },
  {
    "text": "And if it's modified,\nall the other instances will see this\nmodified value, right?",
    "start": "3609980",
    "end": "3616250"
  },
  {
    "text": "So it's just shared across all\nthe instances of type rabbit, in this particular case.",
    "start": "3616250",
    "end": "3621759"
  },
  {
    "text": "And so there's many different\nways to use class variables. In object-oriented programming,\nthey're pretty useful.",
    "start": "3621760",
    "end": "3629140"
  },
  {
    "text": "The way I'm going\nto use it here is to give me the ability\nto basically count",
    "start": "3629140",
    "end": "3635190"
  },
  {
    "text": "how many instances\nof this type rabbit I've created in my program.",
    "start": "3635190",
    "end": "3640440"
  },
  {
    "text": "So when I run the\nprogram, remember, I can create a whole\nbunch of instances. I'm going to try to use this\nclass variable as a way for me",
    "start": "3640440",
    "end": "3646829"
  },
  {
    "text": "to basically keep a counter\nof how many of these instances I've created.",
    "start": "3646830",
    "end": "3651960"
  },
  {
    "text": "All right, so let's\nlook at the code. So the first thing I'm going to\ndo is just inherit from animal.",
    "start": "3651960",
    "end": "3658589"
  },
  {
    "text": "It gets a name and an age. And that's about it, all those\ngetters and setters and the str",
    "start": "3658590",
    "end": "3664480"
  },
  {
    "text": "method. Now, to create my\nclass variable, notice I'm defining this\nvariable, just plain",
    "start": "3664480",
    "end": "3671070"
  },
  {
    "text": "old variable, outside of\nany methods within the class definition, right?",
    "start": "3671070",
    "end": "3676770"
  },
  {
    "text": "So here's tag is equal to 1. The very first variable--\nthe very first instance of a rabbit I create will\ngrab the value of whatever it",
    "start": "3676770",
    "end": "3685619"
  },
  {
    "text": "says here. But then, if any instance\nchanges this value,",
    "start": "3685620",
    "end": "3692720"
  },
  {
    "text": "other instances will see\nthat changed value, OK? So what we're going\nto do is, we're",
    "start": "3692720",
    "end": "3698870"
  },
  {
    "text": "going to implement ID\nnumbers for these rabbits, so sort of tagging them to keep\ntrack of how many there are.",
    "start": "3698870",
    "end": "3707420"
  },
  {
    "text": "So in the init method\nof animal, or of rabbit, I'm going to create a new rabbit\nusing an age and two parents.",
    "start": "3707420",
    "end": "3715839"
  },
  {
    "text": "So, again, different\nthan animal, so I'm going to have to\nimplement my own init method. But I'll call\nanimal's init method",
    "start": "3715840",
    "end": "3722600"
  },
  {
    "text": "because it does\nsome work for me. Then, I'm going to add two data\nattributes for the two parents",
    "start": "3722600",
    "end": "3728930"
  },
  {
    "text": "to be whatever is passed in. And then, down here\nis where I'm going to use this class variable,\nthe shared resource, these two",
    "start": "3728930",
    "end": "3736560"
  },
  {
    "text": "lines. So the first thing\nI'm going to do is add one last data\nattribute for my rabbit,",
    "start": "3736560",
    "end": "3742980"
  },
  {
    "text": "which is the rid value. So it's the rabbit ID. And this is going\nto be a unique value",
    "start": "3742980",
    "end": "3748079"
  },
  {
    "text": "for every rabbit I create. First rabbit will\nhave a value of 1 that I create in my program. Second rabbit I create will\nhave a value of 2, and so on.",
    "start": "3748080",
    "end": "3756490"
  },
  {
    "text": "So what am I setting it to? Well, I'm going to set it\nto whatever the tag is. So the very first rabbit I\ncreate, their rid will be 1.",
    "start": "3756490",
    "end": "3765390"
  },
  {
    "text": "That's what the tag\nis initially set to. But then, before I\nfinish the init method,",
    "start": "3765390",
    "end": "3771840"
  },
  {
    "text": "there's one other line of\ncode, rabbit.tag plus equals 1.",
    "start": "3771840",
    "end": "3777870"
  },
  {
    "text": "So this instance, right before\nit finishes creating itself, is going to take that tag\nand increment it by 1.",
    "start": "3777870",
    "end": "3785369"
  },
  {
    "text": "So the next rabbit\nI create, it's",
    "start": "3785370",
    "end": "3790460"
  },
  {
    "text": "going to grab the tag value\nthat was just changed, OK? Let's visualize it.",
    "start": "3790460",
    "end": "3797300"
  },
  {
    "text": "So we're going to do\nit with actual rabbits. OK, so first, I'm going\nto-- so there's going",
    "start": "3797300",
    "end": "3804530"
  },
  {
    "text": "to be three lines of code. And this is the program\nI'm going to run. So the first thing\nI'm going to do is create my first\nrabbit, right?",
    "start": "3804530",
    "end": "3813770"
  },
  {
    "text": "Its rid will be whatever\nthe value of tag is originally, right? So, originally, we\nsaid the tag is 1.",
    "start": "3813770",
    "end": "3820820"
  },
  {
    "text": "So behind the scenes, what's\ngoing to happen is Python says, oh, you're the first\ninstance of rabbit class.",
    "start": "3820820",
    "end": "3827040"
  },
  {
    "text": "So the tag was initialized to 1. So your rid is going to be\nwhatever the value is, 1.",
    "start": "3827040",
    "end": "3835640"
  },
  {
    "text": "So I've got, this\nrabbit, its age is 8. Two parents are None. And rid is 1. But then, before I finish\ncreating this rabbit,",
    "start": "3835640",
    "end": "3843710"
  },
  {
    "text": "the last line of the init\nmethod says, take the tag and increment it by 1. ",
    "start": "3843710",
    "end": "3850470"
  },
  {
    "text": "All right, next line\nin the code says, here, let me create another rabbit. This one, I'm going to pass\nin age 6 as my parameter.",
    "start": "3850470",
    "end": "3857710"
  },
  {
    "text": "So that's the age 6. Two parents are None by\ndefault. So Python says, all right, well, here's\na new rabbit object.",
    "start": "3857710",
    "end": "3865020"
  },
  {
    "text": "It's age is 6. The two parents are None. A line that says\nself.rid, so the rid of r2",
    "start": "3865020",
    "end": "3872490"
  },
  {
    "text": "will be whatever\ntag is right now. Well, the previous rabbit\nincremented it to 2.",
    "start": "3872490",
    "end": "3877650"
  },
  {
    "text": "So the rid of this next\nrabbit is 2, right?",
    "start": "3877650",
    "end": "3883569"
  },
  {
    "text": "OK, the last line of\ncode before this rabbit finishes it creating itself\nis to increment the tag to 3.",
    "start": "3883570",
    "end": "3891310"
  },
  {
    "text": "So now, if I have one\nmore line of code, I'm creating one more rabbit. This age is 10, right?",
    "start": "3891310",
    "end": "3897670"
  },
  {
    "text": "So behind the scenes, Python\ncreates this variable named R3. It's bound to an object, a\nrabbit object, whose age is 10.",
    "start": "3897670",
    "end": "3905777"
  },
  {
    "text": "Two parents are None,\nof course, because we didn't pass in any parents. And the rid is whatever the\ntag is right now, 3, OK?",
    "start": "3905778",
    "end": "3914109"
  },
  {
    "text": "Well, here's the\none with rid of 3. And before we finish\ncreating, let's",
    "start": "3914110",
    "end": "3920020"
  },
  {
    "text": "just increment the tag\nso that we set it up for the next rabbit, OK? Everyone OK so far?",
    "start": "3920020",
    "end": "3926055"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]\njust create the first line [INAUDIBLE]? ANA BELL: Yep, yes,\nyes, it gives you two",
    "start": "3926055",
    "end": "3936420"
  },
  {
    "text": "because when you run\nthis line, rabbit 8, it has to run the\ninit to completion.",
    "start": "3936420",
    "end": "3943210"
  },
  {
    "text": "And the last line\nof the init always increments it to be one more\nthan what it started with.",
    "start": "3943210",
    "end": "3950119"
  },
  {
    "text": "You can't, I guess, pause the\nfunction run in the middle to check.",
    "start": "3950120",
    "end": "3955340"
  },
  {
    "text": " OK, so let's look at\na couple other methods",
    "start": "3955340",
    "end": "3963100"
  },
  {
    "text": "that we can implement-- sorry,\nother questions about that very cool way of creating rabbits?",
    "start": "3963100",
    "end": "3970870"
  },
  {
    "text": "Yeah. AUDIENCE: I guess I\njust wanted to know more about the space\nabove the definitions, so",
    "start": "3970870",
    "end": "3978430"
  },
  {
    "text": "the [INAUDIBLE]. ANA BELL: Yes,\nlet's go back, here. AUDIENCE: Yeah, so above\nthe init definition,",
    "start": "3978430",
    "end": "3986370"
  },
  {
    "text": "that space there, what else-- like, what goes on there? ANA BELL: Mostly just this.",
    "start": "3986370",
    "end": "3991619"
  },
  {
    "text": "Yeah, mostly, you\nwant the object to have things\nassociated with it.",
    "start": "3991620",
    "end": "3997349"
  },
  {
    "text": "So, really, shared\nstuff is nice. But it's a little tenuous\nin using it just because--",
    "start": "3997350",
    "end": "4004280"
  },
  {
    "text": "you should use it for pretty\nspecific situations, right? You don't just want to define\na whole bunch of variables that everybody can\naccess here and there,",
    "start": "4004280",
    "end": "4011270"
  },
  {
    "text": "only specific situations. Yeah, most of the time, you just\nhave methods in the definition,",
    "start": "4011270",
    "end": "4016340"
  },
  {
    "text": "yeah. But maybe there's other stuff. I just don't know about\nit right now, yeah.",
    "start": "4016340",
    "end": "4021845"
  },
  {
    "text": " OK, let's look at a couple more\nmethods for the rabbit so here,",
    "start": "4021845",
    "end": "4029110"
  },
  {
    "text": "I've got a getter,\njust three getters. I should probably put-- I don't want to put\na setter for the rid",
    "start": "4029110",
    "end": "4035140"
  },
  {
    "text": "because that would\nmess up my counting. And probably, I don't want\nsetters for parents, too.",
    "start": "4035140",
    "end": "4040450"
  },
  {
    "text": "But maybe we might. I don't know. The only thing that\nlooks a little bit weird for the get_rid\nis this zfill.",
    "start": "4040450",
    "end": "4046660"
  },
  {
    "text": "And I added that as a cute\nlittle thing to basically make the ID look like an ID number. So it pre-fills the\nfront with zeros.",
    "start": "4046660",
    "end": "4053860"
  },
  {
    "text": "Like, it pads the\nfront with zeros. So for the ID of 1, you\ncan see, it's 00001.",
    "start": "4053860",
    "end": "4058990"
  },
  {
    "text": "For an ID of 123, it\nwould be 00123, right? So it just makes it look\nnice when we print it out,",
    "start": "4058990",
    "end": "4067780"
  },
  {
    "text": "when we print out the ID. And otherwise, the two parents\njust return the parent objects. ",
    "start": "4067780",
    "end": "4074890"
  },
  {
    "text": "One interesting method\nthat I would like to add, and we'll play on the fact\nthat rabbits mate here,",
    "start": "4074890",
    "end": "4080890"
  },
  {
    "text": "is to add two rabbits together. So we're implementing\nthe dunder method,",
    "start": "4080890",
    "end": "4086589"
  },
  {
    "text": "double underscore,\nadd, double underscore, to have the ability to add two\nrabbits together in our code,",
    "start": "4086590",
    "end": "4094450"
  },
  {
    "text": "all right? So, again, this is a\ndesign decision I made. So when I add two\nrabbits together,",
    "start": "4094450",
    "end": "4101100"
  },
  {
    "text": "I'm going to create\na new rabbit object. And that's exactly what the\ncode is doing inside here.",
    "start": "4101100",
    "end": "4107250"
  },
  {
    "text": "So I'm going to run this\nadd dunder method on self and other, right?",
    "start": "4107250",
    "end": "4113490"
  },
  {
    "text": "And then, behind, or in\nfront of the scenes, I guess, is going to be\nthis plus operator. So the self will be the\nthing before the plus.",
    "start": "4113490",
    "end": "4120329"
  },
  {
    "text": "And the other will be the\nthing after the plus, right? Just like what we\nsaw last lecture.",
    "start": "4120330",
    "end": "4126189"
  },
  {
    "text": "So when we add r1 plus r2, what\nI would like the result to be is another rabbit object,\nwho has one parent, r1,",
    "start": "4126189",
    "end": "4136318"
  },
  {
    "text": "and the other parent, r2. Those are the things\nwe added together. And let's say this new rabbit\nobject is age of 0, right?",
    "start": "4136319",
    "end": "4144000"
  },
  {
    "text": "It's a newborn. So to implement\nthat, we just have--",
    "start": "4144000",
    "end": "4149649"
  },
  {
    "text": "we're returning a new\nrabbit object here, right? So we're just creating\na new rabbit object on the fly in this method.",
    "start": "4149649",
    "end": "4157120"
  },
  {
    "text": "How do we create\na rabbit object? We need to give it an\nage and the two parents.",
    "start": "4157120",
    "end": "4162880"
  },
  {
    "text": "Originally, when we created\nthose three r1, r2, r3's, they",
    "start": "4162880",
    "end": "4168068"
  },
  {
    "text": "didn't have parents, right? They were just unknown\nor something like that. But in this\nparticular case, we do",
    "start": "4168069",
    "end": "4174339"
  },
  {
    "text": "want to know what\ntheir parents are. Their parents are the thing\nbefore the plus and the thing after the plus.",
    "start": "4174340",
    "end": "4179740"
  },
  {
    "text": "So one parent will be self. And the other parent\nwill be other, the thing that's in the parameter list.",
    "start": "4179740",
    "end": "4185964"
  },
  {
    "text": " So let's continue on\nwith our program here.",
    "start": "4185965",
    "end": "4193109"
  },
  {
    "text": "We had these three lines\nof code that were run. And I created\nthese three rabbits with these IDs, 1, 2, 3.",
    "start": "4193109",
    "end": "4200790"
  },
  {
    "text": "If I add two rabbits\ntogether, r1 plus r2, to give me a rabbit\nobject variable,",
    "start": "4200790",
    "end": "4207150"
  },
  {
    "text": "e4, Python says,\nall right, well, let me run this dunder method\nbehind the scenes of the plus.",
    "start": "4207150",
    "end": "4214650"
  },
  {
    "text": "So r4 effectively becomes what? Well, we replace, in the\nprevious slide right here,",
    "start": "4214650",
    "end": "4224150"
  },
  {
    "text": "the return is rabbit(0),\none parent, comma, the other parent. So when we make\nthis addition, we",
    "start": "4224150",
    "end": "4230570"
  },
  {
    "text": "have rabbit(0),\ncomma, one parent, the thing before the dot, comma,\nthe other parent, or the thing",
    "start": "4230570",
    "end": "4237080"
  },
  {
    "text": "before the plus and then\nthe thing after the plus. So my r4 becomes the result\nof adding r1 plus r2.",
    "start": "4237080",
    "end": "4245000"
  },
  {
    "text": "So its parents are these two. , Now how does this\nrabbit get created, right?",
    "start": "4245000",
    "end": "4253050"
  },
  {
    "text": "It's a new rabbit object. So we run the init method\nof the rabid object, which",
    "start": "4253050",
    "end": "4258450"
  },
  {
    "text": "means that, here's a variable. It's bound to a rabbit object. Its age is 0.",
    "start": "4258450",
    "end": "4263730"
  },
  {
    "text": "It has these two parents\nthat our object is bound to other rabbit\nobjects, up here, r1 and r2.",
    "start": "4263730",
    "end": "4270270"
  },
  {
    "text": "And the ID, just like before, is\nwhatever the tag is right now. Well, we already created\nthree rabbit objects",
    "start": "4270270",
    "end": "4277740"
  },
  {
    "text": "ahead of this one. So this one's tag will be 4. And then, right\nbefore we finish,",
    "start": "4277740",
    "end": "4283040"
  },
  {
    "text": "we increment the tag to 5. So no matter how we're creating\nthese rabbit objects, either",
    "start": "4283040",
    "end": "4290540"
  },
  {
    "text": "just plain old in\nour program directly or through an indirect method,\nin this case, the plus,",
    "start": "4290540",
    "end": "4299300"
  },
  {
    "text": "we're still creating rabbit\nobjects in our program, right? So that counter, that\nshared variable tag,",
    "start": "4299300",
    "end": "4305600"
  },
  {
    "text": "is still coming\ninto play, right? So we're still counting all of\nthese rabbit objects created.",
    "start": "4305600",
    "end": "4310954"
  },
  {
    "text": " Does that make sense?",
    "start": "4310955",
    "end": "4315960"
  },
  {
    "text": "OK, good. So, yeah, that's fine.",
    "start": "4315960",
    "end": "4322949"
  },
  {
    "text": "So one last method,\nso this is a method that checks for equality\nbetween two rabbits.",
    "start": "4322950",
    "end": "4328380"
  },
  {
    "text": "And again, my design\nchoice is to say that two rabbits are equal. So if I say r1\nequal equal r2, that",
    "start": "4328380",
    "end": "4336660"
  },
  {
    "text": "will tell me true or false. And my design choice is to\nsay that two rabbits are equal if they have\nthe same parents.",
    "start": "4336660",
    "end": "4343510"
  },
  {
    "text": "So if I create another rabbit\nobject, 4 was r1 plus r2.",
    "start": "4343510",
    "end": "4351329"
  },
  {
    "text": "But if 5 is r2 plus\nr1, I want to say that 5 and 4 are\nequal because they",
    "start": "4351330",
    "end": "4356730"
  },
  {
    "text": "have the same parents, right? I don't care that it was\nr1 plus r2 or r2 plus r1.",
    "start": "4356730",
    "end": "4362190"
  },
  {
    "text": "They have the same parents. It's just an opposite order. And so that's what this\neq method is doing.",
    "start": "4362190",
    "end": "4368079"
  },
  {
    "text": "It's a dunder\nmethod to implement equality between two rabbits. So parents_same is a Boolean\nhere that just checks the rid.",
    "start": "4368080",
    "end": "4377140"
  },
  {
    "text": "So this Boolean,\nparents_same, is going to check that\nthe addition was made, r1 plus r2, r1 plus r2, right?",
    "start": "4377140",
    "end": "4384400"
  },
  {
    "text": "And parents_opposite\nis also going to be a Boolean, either\ntrue or false, that",
    "start": "4384400",
    "end": "4389650"
  },
  {
    "text": "checks if I made the rabbits,\nr1 plus r2, and then r2 plus r1, so backward in the parents.",
    "start": "4389650",
    "end": "4396490"
  },
  {
    "text": "But they still have\nthe same parents. ",
    "start": "4396490",
    "end": "4402890"
  },
  {
    "text": "And the reason I'm checking for\nIDs is because IDs are unique.",
    "start": "4402890",
    "end": "4409010"
  },
  {
    "text": "So originally, when I wrote\nthis code a long time ago, I actually ended up,\nmy first iteration, checking just the straight\nup parents values, right?",
    "start": "4409010",
    "end": "4417830"
  },
  {
    "text": "So it was comparing, basically,\nrabbit objects together. But the problem with that\ncode is that, at some point,",
    "start": "4417830",
    "end": "4424699"
  },
  {
    "text": "it tried to compare a\nnone, some rabbits might",
    "start": "4424700",
    "end": "4429940"
  },
  {
    "text": "have a none as their parent,\nwith an actual rabbit object. And then the code crashed. And then I realized, I can just\ncompare the ID values directly",
    "start": "4429940",
    "end": "4438370"
  },
  {
    "text": "because those are, one,\njust numbers, so very easy to compare. And two, they're unique. So I know I'm not going to have\ntwo rabbits with the same ID.",
    "start": "4438370",
    "end": "4447530"
  },
  {
    "text": "And so, in this particular case,\nI've got these two rabbits. I should say they're equal. But then, if I add\nr2 plus r3, r6,",
    "start": "4447530",
    "end": "4455330"
  },
  {
    "text": "this one is not going\nto be equal to any of my other rabbits. ",
    "start": "4455330",
    "end": "4462500"
  },
  {
    "text": "So here's my code. ",
    "start": "4462500",
    "end": "4469670"
  },
  {
    "text": "So here, I've got my\nthree rabbits, right? So I think we've printed\nthis out already.",
    "start": "4469670",
    "end": "4476260"
  },
  {
    "text": "So here's r1. It's a rabbit with this\nID, rabbit with this ID, rabbit with this ID.",
    "start": "4476260",
    "end": "4481849"
  },
  {
    "text": "And then r1's parents, r2's\nparents, and r3's parents all have none, are none.",
    "start": "4481850",
    "end": "4487920"
  },
  {
    "text": "But then, when I add r4 as\nr1 plus r2, I can print--",
    "start": "4487920",
    "end": "4496965"
  },
  {
    "text": " r4 is a rabbit with ID of 4.",
    "start": "4496965",
    "end": "4503130"
  },
  {
    "text": "And then R1 and R2 are, as\nusual, what we just saw. And then, when we grab\nthe parents of r4,",
    "start": "4503130",
    "end": "4508200"
  },
  {
    "text": "it's going to be r1, which\nis this rabbit with this ID, and r2 with this rabbit\nwith this ID, right?",
    "start": "4508200",
    "end": "4516599"
  },
  {
    "text": "And then, we can\ncheck the equality. So here, I can create\nr4, r5, and r6.",
    "start": "4516600",
    "end": "4525000"
  },
  {
    "text": "So r3 plus r4 and\nr4 plus r3, they should be equivalent, right?",
    "start": "4525000",
    "end": "4530850"
  },
  {
    "text": "So here, I've got\nr5 and r6 down here. See, I'm just running\nthe double equal sign",
    "start": "4530850",
    "end": "4537659"
  },
  {
    "text": "on objects of type rabbit,\nwhich is pretty cool. And they're the same, right?",
    "start": "4537660",
    "end": "4543210"
  },
  {
    "text": "Because they have\nthe same two parents. I don't care that they're\nin opposite order. But then, r4 and r6\nhave different parents,",
    "start": "4543210",
    "end": "4550740"
  },
  {
    "text": "right? r4 had 1 and 2. And R6 had 3 and 4. ",
    "start": "4550740",
    "end": "4559630"
  },
  {
    "text": "Questions about this code? ",
    "start": "4559630",
    "end": "4565510"
  },
  {
    "text": "OK, so class variable\nis pretty cool. You share them across\nall the instances. So if one instance\nmodifies it, they'll",
    "start": "4565510",
    "end": "4571929"
  },
  {
    "text": "be modified for all\nthe other instances. So we have one more example\nto look at next lecture.",
    "start": "4571930",
    "end": "4577280"
  },
  {
    "text": "We're actually going to\nimplement our own fitness tracker class. So it's going to be a\nlittle bit more complex.",
    "start": "4577280",
    "end": "4583210"
  },
  {
    "text": "But we're going to see\na lot of the same ideas that we saw today, just\nin this slightly more",
    "start": "4583210",
    "end": "4588400"
  },
  {
    "text": "complex setting of implementing\nour own fitness tracker. So it's still kind of an\nabstract thing, but more useful",
    "start": "4588400",
    "end": "4596020"
  },
  {
    "text": "than animals and rabbits and\nperson and student classes.",
    "start": "4596020",
    "end": "4601110"
  },
  {
    "start": "4601110",
    "end": "4615000"
  }
]