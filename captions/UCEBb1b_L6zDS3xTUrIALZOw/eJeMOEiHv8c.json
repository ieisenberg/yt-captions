[
  {
    "start": "0",
    "end": "110000"
  },
  {
    "start": "0",
    "end": "25680"
  },
  {
    "text": "PROFESSOR: Well, yesterday\nwas easy. You learned all of the rules\nof programming and lived.",
    "start": "25680",
    "end": "33020"
  },
  {
    "text": "Almost all of them. And so at this point, you're\nnow certified programmers--",
    "start": "33020",
    "end": "38371"
  },
  {
    "text": "it says. However, I suppose what we did\nis we, aah, sort of got you a",
    "start": "38372",
    "end": "48890"
  },
  {
    "text": "little bit of into\nan easy state. Here, you still believe it's\npossible that this might be",
    "start": "48890",
    "end": "54770"
  },
  {
    "text": "programming in BASIC or Pascal\nwith just a funny syntax. Today, that illusion--",
    "start": "54770",
    "end": "61770"
  },
  {
    "text": "or you can no longer support\nthat belief. What we're going to do\ntoday is going to completely smash that.",
    "start": "61770",
    "end": "68340"
  },
  {
    "text": "So let's start out by writing\na few programs on the",
    "start": "68340",
    "end": "73590"
  },
  {
    "text": "blackboard that have a lot in\ncommon with each other. What we're going to do is try to\nmake them abstractions that",
    "start": "73590",
    "end": "79539"
  },
  {
    "text": "are not ones that are easy to\nmake in most languages. Let's start with some very\nsimple ones that you can make",
    "start": "79540",
    "end": "86040"
  },
  {
    "text": "in most languages. Supposing I want to write the\nmathematical expression which",
    "start": "86040",
    "end": "92130"
  },
  {
    "text": "adds up a bunch of integers. So if I wanted to write down\nand say the sum from i",
    "start": "92130",
    "end": "98850"
  },
  {
    "text": "equal a to b on i. Now, you know that that's an\neasy thing to compute in a",
    "start": "98850",
    "end": "104190"
  },
  {
    "text": "closed form for it, and I'm\nnot interested in that. But I'm going to write\na program that adds up those integers. Well, that's rather easy to do\nto say I want to define the",
    "start": "104190",
    "end": "117890"
  },
  {
    "text": "sum of the integers from\na to b to be--",
    "start": "117890",
    "end": "128709"
  },
  {
    "text": "well, it's the following\ntwo possibilities. If a is greater than b, well,\nthen there's nothing to be",
    "start": "128710",
    "end": "137430"
  },
  {
    "text": "done and the answer is zero. This is how you're going to\nhave to think recursively.",
    "start": "137430",
    "end": "142530"
  },
  {
    "text": "You're going to say if I have\nan easy case that I know the answer to, just write it down. Otherwise, I'm going to try to\nreduce this problem to a",
    "start": "142530",
    "end": "149890"
  },
  {
    "text": "simpler problem. And maybe in this case, I'm\ngoing to make a subproblem of the simpler problem and then\ndo something to the result.",
    "start": "149890",
    "end": "155340"
  },
  {
    "text": "So the easiest way to do this\nis say that I'm going to add",
    "start": "155340",
    "end": "161290"
  },
  {
    "text": "the index, which in this case is\na, to the result of adding",
    "start": "161290",
    "end": "166530"
  },
  {
    "text": "up the integers from\na plus 1 to b.",
    "start": "166530",
    "end": "177959"
  },
  {
    "text": " Now, at this point, you should\nhave no trouble looking at",
    "start": "177960",
    "end": "184460"
  },
  {
    "text": "such a definition. Indeed, coming up with such a\nthing might be a little hard",
    "start": "184460",
    "end": "189740"
  },
  {
    "text": "in synthesis, but being able\nto read it at this point should be easy. And what it says to you is,\nwell, here is the subproblem",
    "start": "189740",
    "end": "198220"
  },
  {
    "text": "I'm going to solve. I'm going to try to add up the\nintegers, one fewer integer",
    "start": "198220",
    "end": "204240"
  },
  {
    "text": "than I added up for the\nthe whole problem. I'm adding up the one fewer one,\nand that subproblem, once",
    "start": "204240",
    "end": "211270"
  },
  {
    "text": "I've solved it, I'm going to add\na to that, and that will be the answer to this problem.",
    "start": "211270",
    "end": "218549"
  },
  {
    "text": "And the simplest case, I don't\nhave to do any work. Now, I'm also going to write\ndown another simple one just",
    "start": "218550",
    "end": "224990"
  },
  {
    "text": "like this, which is the\nmathematical expression, the sum of the square from\ni equal a to b.",
    "start": "224990",
    "end": "235840"
  },
  {
    "text": "And again, it's a very\nsimple program. ",
    "start": "235840",
    "end": "251219"
  },
  {
    "text": "And indeed, it starts\nthe same way.  If a is greater than b, then\nthe answer is zero.",
    "start": "251220",
    "end": "261239"
  },
  {
    "text": "And, of course, we're beginning\nto see that there's something wrong with me writing\nthis down again.",
    "start": "261240",
    "end": "267980"
  },
  {
    "text": "It's the same program. It's the sum of the square of a\nand the sum of the square of",
    "start": "267980",
    "end": "282180"
  },
  {
    "text": "the increment and b. ",
    "start": "282180",
    "end": "290880"
  },
  {
    "text": "Now, if you look at these\nthings, these programs are almost identical.",
    "start": "290880",
    "end": "296380"
  },
  {
    "text": "There's not much to\ndistinguish them. They have the same first clause\nof the conditional and",
    "start": "296380",
    "end": "303139"
  },
  {
    "text": "the same predicate and the\nsame consequence, and the alternatives are very\nsimilar, too.",
    "start": "303140",
    "end": "308910"
  },
  {
    "text": "They only differ by the fact\nthat where here I have a,",
    "start": "308910",
    "end": "315510"
  },
  {
    "text": "here, I have the square of a. The only other difference, but\nthis one's sort of unessential",
    "start": "315510",
    "end": "322020"
  },
  {
    "text": "is in the name of this procedure\nis sum int, whereas the name of the procedure\nis sum square.",
    "start": "322020",
    "end": "327560"
  },
  {
    "text": "So the things that vary\nbetween these two are very small.",
    "start": "327560",
    "end": "333250"
  },
  {
    "text": "Now, wherever you see yourself\nwriting the same thing down more than once, there's\nsomething wrong, and you",
    "start": "333250",
    "end": "338340"
  },
  {
    "text": "shouldn't be doing it. And the reason is not because\nit's a waste of time to write",
    "start": "338340",
    "end": "343420"
  },
  {
    "text": "something down more than once. It's because there's some idea\nhere, a very simple idea,",
    "start": "343420",
    "end": "350720"
  },
  {
    "text": "which has to do with the\nsigma notation-- this much--",
    "start": "350720",
    "end": "357330"
  },
  {
    "text": "not depending upon what\nit is I'm adding up. And I would like\nto be able to--",
    "start": "357330",
    "end": "363070"
  },
  {
    "text": "always, whenever trying to make\ncomplicated systems and understand them, it's crucial\nto divide the things up into",
    "start": "363070",
    "end": "368574"
  },
  {
    "text": "as many pieces as I can, each\nof which I understand separately. I would like to understand the\nway of adding things up",
    "start": "368575",
    "end": "375030"
  },
  {
    "text": "independently of what it is I'm\nadding up so I can do that having debugged it once and\nunderstood it once and having",
    "start": "375030",
    "end": "384260"
  },
  {
    "text": "been able to share that among\nmany different uses of it.",
    "start": "384260",
    "end": "389400"
  },
  {
    "text": "Here, we have another example. This is Leibnitz's formula\nfor finding pi over 8.",
    "start": "389400",
    "end": "400400"
  },
  {
    "text": "It's a funny, ugly mess. What is it? It's something like 1 over 1\ntimes 3 plus 1 over 5 times 7",
    "start": "400400",
    "end": "410669"
  },
  {
    "text": "plus 1 over 9 times 11 plus-- and for some reason, things\nlike this tend to have",
    "start": "410670",
    "end": "419750"
  },
  {
    "text": "interesting values\nlike pi over 8. But what do we see here? It's the same program or almost\nthe same program.",
    "start": "419750",
    "end": "427850"
  },
  {
    "text": "It's a sum. So we're seeing the figure\nnotation, although over here, we're dealing with incrementing\nby 4, so it's a",
    "start": "427850",
    "end": "437320"
  },
  {
    "text": "slightly different problem,\nwhich means that over here, I have to change a by 4, as\nyou see right over here.",
    "start": "437320",
    "end": "445560"
  },
  {
    "text": "It's not by 1. The other thing, of course,\nis that the thing that's",
    "start": "445560",
    "end": "451150"
  },
  {
    "text": "represented by square in the\nprevious sum of squares, or a when adding up the integers.",
    "start": "451150",
    "end": "456400"
  },
  {
    "text": "Well, here, I have a different\nthing I'm adding up, a different term, which is 1\nover a times a plus 2.",
    "start": "456400",
    "end": "464290"
  },
  {
    "text": "But the rest of this program\nis identical.  Well, any time we have a bunch\nof things like this that are",
    "start": "464290",
    "end": "470639"
  },
  {
    "text": "identical, we're going to have\nto come up with some sort of abstraction to cover them. If you think about this, what\nyou've learned so far is the",
    "start": "470640",
    "end": "479920"
  },
  {
    "text": "rules of some language, some\nprimitive, some means of combination, almost all\nof them, the means of",
    "start": "479920",
    "end": "486310"
  },
  {
    "text": "abstraction, almost\nall of them. But what you haven't learned is\ncommon patterns of usage.",
    "start": "486310",
    "end": "493290"
  },
  {
    "text": "Now, most of the time, you learn\nidioms when learning a language, which is a common\npattern that mean things that",
    "start": "493290",
    "end": "498380"
  },
  {
    "text": "are useful to know in a flash. And if you build a great number\nof them, if you're a FORTRAN programmer, of course,\neverybody knows how to--",
    "start": "498380",
    "end": "506180"
  },
  {
    "text": "what do you do, for example, to\nget an integer which is the biggest integer in something.",
    "start": "506180",
    "end": "511250"
  },
  {
    "text": "It's a classic thing. Every FORTRAN programmer\nknows how to do that. And if you don't know that,\nyou're in real hot water because it takes a long\ntime to think it out.",
    "start": "511250",
    "end": "518150"
  },
  {
    "text": "However, one of the things you\ncan do in this language that we're showing you is not only\ndo you know something like",
    "start": "518150",
    "end": "523900"
  },
  {
    "text": "that, but you give the knowledge\nof that a name. And so that's what we're going\nto be going after right now.",
    "start": "523900",
    "end": "530500"
  },
  {
    "text": " OK, well, let's see what these\nthings have in common.",
    "start": "530500",
    "end": "535860"
  },
  {
    "text": " Right over here we have what\nappears to be a general",
    "start": "535860",
    "end": "542560"
  },
  {
    "text": "pattern, a general pattern which\ncovers all of the cases we've seen so far.",
    "start": "542560",
    "end": "549699"
  },
  {
    "text": "There is a sum procedure,\nwhich is being defined.",
    "start": "549700",
    "end": "555200"
  },
  {
    "text": "It has two arguments, which\nare a lower bound and an upper bound. The lower bound is tested to\nbe greater than the upper",
    "start": "555200",
    "end": "563150"
  },
  {
    "text": "bound, and if it is greater,\nthen the result is zero. Otherwise, we're going to do\nsomething to the lower bound,",
    "start": "563150",
    "end": "571640"
  },
  {
    "text": "which is the index of the\nconversation, and add that result to the result of\nfollowing the procedure",
    "start": "571640",
    "end": "580149"
  },
  {
    "text": "recursively on our lower bound\nincremented by some next operation with the same upper\nbound as I had before.",
    "start": "580150",
    "end": "589605"
  },
  {
    "text": " So this is a general pattern,\nand what I'd like to do is be",
    "start": "589605",
    "end": "599230"
  },
  {
    "text": "able to name this general\npattern a bit. Well, that's sort of easy,\nbecause one of the things I'm",
    "start": "599230",
    "end": "606550"
  },
  {
    "text": "going to do right now is--\nthere's nothing very special about numbers.",
    "start": "606550",
    "end": "611790"
  },
  {
    "text": "Numbers are just one\nkind of data. It seems to me perfectly\nreasonable to give all sorts",
    "start": "611790",
    "end": "617570"
  },
  {
    "text": "of names to all kinds of data,\nfor example, procedures.",
    "start": "617570",
    "end": "623260"
  },
  {
    "text": "And now many languages allow you\nhave procedural arguments, and right now, we're\ngoing to talk about procedural arguments.",
    "start": "623260",
    "end": "629120"
  },
  {
    "text": "They're very easy\nto deal with. And shortly, we'll do some\nremarkable things that are not like procedural arguments.",
    "start": "629120",
    "end": "635730"
  },
  {
    "start": "635000",
    "end": "835000"
  },
  {
    "text": "So here, we'll define\nour sigma notation.",
    "start": "635730",
    "end": "643190"
  },
  {
    "text": "This is called sum and it takes\na term, an A, a next",
    "start": "643190",
    "end": "655450"
  },
  {
    "text": "term, and B as arguments. So it takes four arguments,\nand there was nothing",
    "start": "655450",
    "end": "663420"
  },
  {
    "text": "particularly special about me\nwriting this in lowercase. I hope that it doesn't confuse\nyou, so I'll write it in",
    "start": "663420",
    "end": "668700"
  },
  {
    "text": "uppercase right now. The machine doesn't care. ",
    "start": "668700",
    "end": "674350"
  },
  {
    "text": "But these two arguments\nare different. These are not numbers.",
    "start": "674350",
    "end": "679360"
  },
  {
    "text": "These are going to be procedures\nfor computing something given a number. Term will be a procedure which,\nwhen given an index,",
    "start": "679360",
    "end": "686590"
  },
  {
    "text": "will produce the value of\nthe term for that index. Next will be given an\nindex, which will",
    "start": "686590",
    "end": "691660"
  },
  {
    "text": "produce the next index. This will be for counting. And it's very simple.",
    "start": "691660",
    "end": "697250"
  },
  {
    "text": " It's exactly what you see.",
    "start": "697250",
    "end": "703400"
  },
  {
    "text": "If A is greater than B,\nthen the result is 0.",
    "start": "703400",
    "end": "712220"
  },
  {
    "text": "Otherwise, it's the sum of term\napplied to A and the sum",
    "start": "712220",
    "end": "724970"
  },
  {
    "text": "of term, next index.",
    "start": "724970",
    "end": "730410"
  },
  {
    "text": " Let me write it this way.",
    "start": "730410",
    "end": "736480"
  },
  {
    "start": "736480",
    "end": "749370"
  },
  {
    "text": "Now, I'd like you to see\nsomething, first of all. I was writing here, and\nI ran out of space.",
    "start": "749370",
    "end": "755209"
  },
  {
    "text": "What I did is I start indenting\naccording to the Pretty-printing rule, which says\nthat I align all of the",
    "start": "755210",
    "end": "761079"
  },
  {
    "text": "arguments of the procedure\nso I can see which ones go together.",
    "start": "761080",
    "end": "767060"
  },
  {
    "text": "And this is just something I do\nautomatically, and I want you to learn how to do that,\ntoo, so your programs can be read and understood.",
    "start": "767060",
    "end": "772780"
  },
  {
    "text": " However, what do we have here? We have four arguments: the\nprocedure, the lower index--",
    "start": "772780",
    "end": "781730"
  },
  {
    "text": "lower bound index-- the way to get the next index,\nand the upper bound.",
    "start": "781730",
    "end": "789010"
  },
  {
    "text": "What's passed along on the\nrecursive call is indeed the same procedure because I'm going\nto need it again, the",
    "start": "789010",
    "end": "798110"
  },
  {
    "text": "next index, which is using the\nnext procedure to compute it, the procedure for computing\nnext, which I also have to",
    "start": "798110",
    "end": "803332"
  },
  {
    "text": "have separately, and\nthat's different. The procedure for computing\nnext is different from the next index, which is the result\nof using next on the",
    "start": "803332",
    "end": "810680"
  },
  {
    "text": "last index. And I also have to pass\nalong the upper bound. ",
    "start": "810680",
    "end": "817090"
  },
  {
    "text": "So this captures both of these\nand the other nice program",
    "start": "817090",
    "end": "824850"
  },
  {
    "text": "that we are playing with. So using this, we can write down\nthe original program as",
    "start": "824850",
    "end": "832740"
  },
  {
    "text": "instances of sum very simply. ",
    "start": "832740",
    "end": "848880"
  },
  {
    "start": "835000",
    "end": "1000000"
  },
  {
    "text": "A and B. Well, I'm going to\nneed an identity procedure",
    "start": "848880",
    "end": "857620"
  },
  {
    "text": "here because ,ahh, the sum of\nthe integers requires me to in",
    "start": "857620",
    "end": "869440"
  },
  {
    "text": "this case compute a term for\nevery integer, but the term procedure doesn't want to do\nanything to that integer.",
    "start": "869440",
    "end": "875560"
  },
  {
    "text": "So the identity procedure on A\nis A or X or whatever, and I",
    "start": "875560",
    "end": "881460"
  },
  {
    "text": "want to say the sum of using\nidentity of the term procedure",
    "start": "881460",
    "end": "892420"
  },
  {
    "text": "and using A as the initial\nindex and the incrementer",
    "start": "892420",
    "end": "898399"
  },
  {
    "text": "being the way to get the next\nindex and B being the high",
    "start": "898400",
    "end": "905552"
  },
  {
    "text": "bound, the upper bound. This procedure does exactly\nthe same as the sum of the",
    "start": "905552",
    "end": "912010"
  },
  {
    "text": "integers over here, computes\nthe same answer. ",
    "start": "912010",
    "end": "917690"
  },
  {
    "text": "Now, one thing you should see,\nof course, is that there's nothing very special over here\nabout what I used as the",
    "start": "917690",
    "end": "925220"
  },
  {
    "text": "formal parameter. I could have, for example,\nwritten this X. It doesn't matter. I just wanted you to see that\nthis name does not conflict",
    "start": "925220",
    "end": "933760"
  },
  {
    "text": "with this one at all. It's an internal name. For the second procedure here,\nthe sum of the squares, it's",
    "start": "933760",
    "end": "940500"
  },
  {
    "text": "even a little bit easier. ",
    "start": "940500",
    "end": "953760"
  },
  {
    "text": "And what do we have to do? Nothing more than add up the\nsquares, this is the procedure",
    "start": "953760",
    "end": "962560"
  },
  {
    "text": "that each index will be given,\nwill be given each-- yes. Each index will have this done\nto it to get the term.",
    "start": "962560",
    "end": "970410"
  },
  {
    "text": "That's the thing that maps\nagainst term over here. Then I have A as the lower\nbound, the incrementer as the",
    "start": "970410",
    "end": "978810"
  },
  {
    "text": "next term method, and B\nas the upper bound. ",
    "start": "978810",
    "end": "986780"
  },
  {
    "text": "And finally, just for the thing\nthat we did about pi sums, pi sums are sort of--",
    "start": "986780",
    "end": "993270"
  },
  {
    "text": "well, it's even easier to think\nabout them this way because I don't have to think. What I'm doing is separating the\nthing I'm adding up from",
    "start": "993270",
    "end": "1001110"
  },
  {
    "text": "the method of doing\nthe addition. And so we have here, for\nexample, pi sum A B",
    "start": "1001110",
    "end": "1017200"
  },
  {
    "text": "of the sum of things. I'm going to write the terms\nprocedure here explicitly",
    "start": "1017200",
    "end": "1023350"
  },
  {
    "text": "without giving it a name. This is done anonymously. I don't necessarily have to give\na name to something if I",
    "start": "1023350",
    "end": "1030959"
  },
  {
    "text": "just want to use it once. And, of course, I can write\nsort of a expression that",
    "start": "1030960",
    "end": "1038050"
  },
  {
    "text": "produces a procedure. I'm going to write the Greek\nlambda letter here instead of L-A-M-B-D-A in general to avoid\ntaking up a lot of space",
    "start": "1038050",
    "end": "1046220"
  },
  {
    "text": "on blackboards. But unfortunately,\nwe don't have lambda keys on our keyboards. Maybe we can convince our\nfriends in the computer",
    "start": "1046220",
    "end": "1052169"
  },
  {
    "text": "industry that this\nis an important. Lambda of i is the quotient of 1\nand the product of i and the",
    "start": "1052170",
    "end": "1063480"
  },
  {
    "text": "sum of i 2, starting at a with\nthe way of incrementing being",
    "start": "1063480",
    "end": "1078020"
  },
  {
    "text": "that procedure of an index i,\nwhich adds i to 4, and b being",
    "start": "1078020",
    "end": "1088666"
  },
  {
    "text": "the upper bound.  So you can see that this\nnotation, the invention of the",
    "start": "1088666",
    "end": "1097490"
  },
  {
    "text": "procedure that takes a\nprocedural argument, allows us to compress a lot of these\nprocedures into one thing.",
    "start": "1097490",
    "end": "1106066"
  },
  {
    "text": "This procedure, sums, covers\na whole bunch of ideas.",
    "start": "1106066",
    "end": "1112780"
  },
  {
    "text": "Now, just why is\nthis important? I tried to say before that it\nhelps us divide a problem into two pieces, and indeed, it does,\nfor example, if someone",
    "start": "1112780",
    "end": "1122760"
  },
  {
    "text": "came up with a different way of\nimplementing this, which, of course, one might.",
    "start": "1122760",
    "end": "1130009"
  },
  {
    "text": "Here, for example, an iterative implementation of sum. ",
    "start": "1130010",
    "end": "1135900"
  },
  {
    "text": "Iterative implementation for\nsome reason might be better than the recursive\nimplementation. ",
    "start": "1135900",
    "end": "1143669"
  },
  {
    "text": "But the important thing is\nthat it's different. Now, supposing I had written my\nprogram this way that you",
    "start": "1143670",
    "end": "1149460"
  },
  {
    "text": "see on the blackboard\non the left. That's correct, the left.",
    "start": "1149460",
    "end": "1157810"
  },
  {
    "text": "Well, then if I want to change\nthe method of addition, then I'd have to change\neach of these.",
    "start": "1157810",
    "end": "1165200"
  },
  {
    "text": "Whereas if I write them like\nthis that you see here, then",
    "start": "1165200",
    "end": "1170210"
  },
  {
    "text": "the method by which I did the\naddition is encapsulated in the procedure sum. That decomposition allows me\nto independently change one",
    "start": "1170210",
    "end": "1177780"
  },
  {
    "text": "part of the program and prove\nit perhaps without changing",
    "start": "1177780",
    "end": "1183210"
  },
  {
    "text": "the other part that was\nwritten for some of the other cases. ",
    "start": "1183210",
    "end": "1190366"
  },
  {
    "text": "Thank you. Are there any questions? Yes, sir. AUDIENCE: Would you go over\nnext A and next again on-- PROFESSOR: Yes.",
    "start": "1190366",
    "end": "1195640"
  },
  {
    "text": "It's the same problem. I'm sure you're going to-- you're going to have\nto work on this. This is hard the first\ntime you've ever seen",
    "start": "1195640",
    "end": "1201280"
  },
  {
    "text": "something like this. What I have here is\na-- procedures",
    "start": "1201280",
    "end": "1206299"
  },
  {
    "text": "can be named by variables.  Procedures are not special.",
    "start": "1206300",
    "end": "1212710"
  },
  {
    "text": "Actually, sum square is a\nvariable, which has gotten a value, which is a procedure.",
    "start": "1212710",
    "end": "1218640"
  },
  {
    "text": "This is define sum square to be lambda of A and B something. So the procedure can be named.",
    "start": "1218640",
    "end": "1224700"
  },
  {
    "text": "Therefore, they can be passed\nfrom one to another, one procedure to another,\nas arguments.",
    "start": "1224700",
    "end": "1231430"
  },
  {
    "text": "Well, what we're doing here is\nwe're passing the procedure term as an argument to sum just\nwhen we get it around in",
    "start": "1231430",
    "end": "1238190"
  },
  {
    "text": "the next recursive. Here, we're passing\nthe procedure next",
    "start": "1238190",
    "end": "1245350"
  },
  {
    "text": "as an argument also. However, here we're using\nthe procedure next. That's what the parentheses\nmean.",
    "start": "1245350",
    "end": "1251690"
  },
  {
    "text": "We're applying next to A to get\nthe next value of A. If",
    "start": "1251690",
    "end": "1256750"
  },
  {
    "text": "you look at what next is mapped\nagainst, remember that the way you think about this\nis that you substitute the",
    "start": "1256750",
    "end": "1262390"
  },
  {
    "text": "arguments for the formal\nparameters in the body. If you're ever confused, think\nof the thing that way.",
    "start": "1262390",
    "end": "1270590"
  },
  {
    "text": "Well, over here, with\nsum of the integers. I substitute identity for\na term and 1 plus the",
    "start": "1270590",
    "end": "1281150"
  },
  {
    "text": "incrementer for next\nin the body. Well, the identity procedure\non A is what I get here.",
    "start": "1281150",
    "end": "1290600"
  },
  {
    "text": "Identity is being passed\nalong, and here, I have increment 1 plus being applied\nto A and 1 plus is being",
    "start": "1290600",
    "end": "1301040"
  },
  {
    "text": "passed along. Does that clarify\nthe situation?",
    "start": "1301040",
    "end": "1306340"
  },
  {
    "text": "AUDIENCE: We could also define\nexplicitly those two functions, then pass them. PROFESSOR: Sure.",
    "start": "1306340",
    "end": "1312360"
  },
  {
    "text": "What we can do is we could have\ngiven names to them, just like I did here. In fact, I gave you various\nways so you",
    "start": "1312360",
    "end": "1317530"
  },
  {
    "text": "could see it, a variety. Here, I define the thing which\nI passed the name of.",
    "start": "1317530",
    "end": "1325130"
  },
  {
    "text": "I referenced it by its name. But the thing is, in fact, that\nprocedure, one argument",
    "start": "1325130",
    "end": "1330400"
  },
  {
    "text": "X, which is X. And the identity\nprocedure is just lambda of X X. And that's\nwhat you're seeing here.",
    "start": "1330400",
    "end": "1340870"
  },
  {
    "text": "Here, I happened to just write\nits canonical name there for",
    "start": "1340870",
    "end": "1346190"
  },
  {
    "text": "you to see. ",
    "start": "1346190",
    "end": "1351730"
  },
  {
    "text": "Is it OK if we take our\nfive-minute break? ",
    "start": "1351730",
    "end": "1395850"
  },
  {
    "text": "As I said, computers to make\npeople happy, not people to make computers happy.",
    "start": "1395850",
    "end": "1401070"
  },
  {
    "text": "And for the most part, the\nreason why we introduce all this abstraction stuff is to\nmake it so that programs can",
    "start": "1401070",
    "end": "1406440"
  },
  {
    "text": "be more easily written\nand more easily read. Let's try to understand what's\nthe most complicated program",
    "start": "1406440",
    "end": "1412929"
  },
  {
    "text": "we've seen so far using\na little bit of this abstraction stuff.",
    "start": "1412930",
    "end": "1418120"
  },
  {
    "text": "If you look at the slide, this\nis the Heron of Alexandria's",
    "start": "1418120",
    "end": "1424559"
  },
  {
    "text": "method of computing square roots\nthat we saw yesterday.",
    "start": "1424560",
    "end": "1431590"
  },
  {
    "text": "And let's see. Well, in any case, this\nprogram is a little",
    "start": "1431590",
    "end": "1440779"
  },
  {
    "text": "complicated. And at the current state of your\nthinking, you just can't look at that and say, oh,\nthis obviously means",
    "start": "1440780",
    "end": "1447320"
  },
  {
    "text": "something very clear. It's not obvious from\nlooking at the",
    "start": "1447320",
    "end": "1452930"
  },
  {
    "text": "program what it's computing. There's some loop here inside\ntry, and a loop does something",
    "start": "1452930",
    "end": "1461890"
  },
  {
    "text": "about trying the improvement\nof y. There's something called\nimprove, which does some",
    "start": "1461890",
    "end": "1470170"
  },
  {
    "text": "averaging and quotienting\nand things like that. But what's the real idea? Can we make it clear\nwhat the idea is?",
    "start": "1470170",
    "end": "1478929"
  },
  {
    "text": "Well, I think we can. I think we can use abstraction\nthat we have learned about so",
    "start": "1478930",
    "end": "1485070"
  },
  {
    "text": "far to clarify what's\ngoing on. Now, what we have mathematically\nis a procedure",
    "start": "1485070",
    "end": "1494720"
  },
  {
    "text": "for improving a guess\nfor square roots. And if y is a guess for a square\nroot, then what we want",
    "start": "1494720",
    "end": "1502610"
  },
  {
    "text": "to get we'll call\na function f. This is the means\nof improvement.",
    "start": "1502610",
    "end": "1507659"
  },
  {
    "text": "I want to get y plus x/y over\n2, so the average of y and x",
    "start": "1507660",
    "end": "1517510"
  },
  {
    "text": "divided by y as the improved\nvalue for the square root of x",
    "start": "1517510",
    "end": "1524080"
  },
  {
    "text": "such that-- one thing you can\nnotice about this function f is that f of the square root\nof f is in fact the",
    "start": "1524080",
    "end": "1536310"
  },
  {
    "text": "square root of x. In other words, if I take\nthe square root of x and",
    "start": "1536310",
    "end": "1541669"
  },
  {
    "text": "substitute it for y here, I see\nthe square root of x plus x divided by the square of x,\nwhich is the square root of x.",
    "start": "1541670",
    "end": "1547560"
  },
  {
    "text": "That's 2 times the square root\nof x divided by 2, is the square root of x. So, in fact, what we're really\nlooking for is we're looking",
    "start": "1547560",
    "end": "1555630"
  },
  {
    "text": "for a fixed point, a fixed\npoint of the function f.",
    "start": "1555630",
    "end": "1572850"
  },
  {
    "text": " A fixed point is a place which\nhas the property that if you",
    "start": "1572850",
    "end": "1582649"
  },
  {
    "text": "put it into the function, you\nget the same value out.  Now, I suppose if I were giving\nsome nice, boring",
    "start": "1582650",
    "end": "1589700"
  },
  {
    "text": "lecture, and you happened to\nhave in front of you an HP-35 desk calculator like I\nused to have when I",
    "start": "1589700",
    "end": "1596380"
  },
  {
    "text": "went to boring lectures. And if you think it was really\nboring, you put it into radians mode, and you hit\ncosine, and you hit cosine,",
    "start": "1596380",
    "end": "1604720"
  },
  {
    "text": "and you hit cosine. And eventually, you end\nup with 0.734 or something like that.",
    "start": "1604720",
    "end": "1610090"
  },
  {
    "text": "0.743, I don't remember what\nexactly, and it gets closer and closer to that. Some functions have the property\nthat you can find",
    "start": "1610090",
    "end": "1617980"
  },
  {
    "text": "their fixed point by iterating\nthe function, and that's",
    "start": "1617980",
    "end": "1623419"
  },
  {
    "text": "essentially what's happening in\nthe square root program by Heron's method. ",
    "start": "1623420",
    "end": "1631550"
  },
  {
    "text": "So let's see if we can write\nthat down, that idea. Now, I'm not going to say how\nI compute fixed points yet.",
    "start": "1631550",
    "end": "1637670"
  },
  {
    "text": "There might be more\nthan one way. But the first thing to\ndo is I'm going to",
    "start": "1637670",
    "end": "1642750"
  },
  {
    "text": "say what I just said. I'm going to say it\nspecifically, the square root. ",
    "start": "1642750",
    "end": "1652440"
  },
  {
    "text": "The square root of x is the\nfixed point of that procedure",
    "start": "1652440",
    "end": "1668210"
  },
  {
    "text": "which takes an argument\ny and averages of x",
    "start": "1668210",
    "end": "1679179"
  },
  {
    "text": "divided by y with y. ",
    "start": "1679180",
    "end": "1685620"
  },
  {
    "text": "And we're going to start up with\nthe initial guess for the fixed point of 1. It doesn't matter\nwhere it starts.",
    "start": "1685620",
    "end": "1691860"
  },
  {
    "text": "A theorem having to do\nwith square roots. ",
    "start": "1691860",
    "end": "1698610"
  },
  {
    "text": "So what you're seeing here is\nI'm just trying to write out by wishful thinking. I don't know how I'm going to\nmake fixed point happen.",
    "start": "1698610",
    "end": "1704380"
  },
  {
    "text": "We'll worry about that later. But if somehow I had a way of\nfinding the fixed point of the",
    "start": "1704380",
    "end": "1709570"
  },
  {
    "text": "function computed by this\nprocedure, then I would have-- that would be the square root\nthat I'm looking for.",
    "start": "1709570",
    "end": "1716120"
  },
  {
    "text": " OK, well, now let's see how\nwe're going to write--",
    "start": "1716120",
    "end": "1721500"
  },
  {
    "start": "1718000",
    "end": "1897000"
  },
  {
    "text": "how we're going to come\nup with fixed points. Well, it's very simple,\nactually. I'm going to write an\nabbreviated version here just",
    "start": "1721500",
    "end": "1727180"
  },
  {
    "text": "so we understand it. ",
    "start": "1727180",
    "end": "1740450"
  },
  {
    "text": "I'm going to find the fixed\npoint of a function f-- actually, the fixed point of the\nfunction computed by the",
    "start": "1740450",
    "end": "1746140"
  },
  {
    "text": "procedure whose name will\nbe f in this procedure. How's that? A long sentence--",
    "start": "1746140",
    "end": "1753230"
  },
  {
    "text": "starting with a particular\nstarting value. ",
    "start": "1753230",
    "end": "1759919"
  },
  {
    "text": "Well, I'm going to have a little\nloop inside here, which is going to push the button on\nthe calculator repeatedly,",
    "start": "1759920",
    "end": "1765800"
  },
  {
    "text": "hoping that it will eventually\nconverge. And we will say here internal\nloops are written by defining",
    "start": "1765800",
    "end": "1775289"
  },
  {
    "text": "internal procedures.  Well, one thing I'm going to\nhave to do is I'm going to",
    "start": "1775290",
    "end": "1781860"
  },
  {
    "text": "have to say whether I'm done. And the way I'm going to decide\nwhen I'm done is when the old value and the new value\nare close enough so I",
    "start": "1781860",
    "end": "1787760"
  },
  {
    "text": "can't distinguish\nthem anymore. That's the standard thing you\ndo on the calculator unless",
    "start": "1787760",
    "end": "1793509"
  },
  {
    "text": "you look at more precision,\nand eventually, you run out of precision. So the old value and new value,\nand I'm going to stay",
    "start": "1793510",
    "end": "1806529"
  },
  {
    "text": "here if I can't distinguish them\nif they're close enough,",
    "start": "1806530",
    "end": "1814758"
  },
  {
    "text": "and we'll have to worry about\nwhat that is soon. ",
    "start": "1814758",
    "end": "1820779"
  },
  {
    "text": "The old value and the new value\nare close enough to each other and let's pick the new\nvalue as the answer.",
    "start": "1820780",
    "end": "1825880"
  },
  {
    "text": "Otherwise, I'm going to iterate\naround again with the",
    "start": "1825880",
    "end": "1833520"
  },
  {
    "text": "next value of old being the\ncurrent value of new and the",
    "start": "1833520",
    "end": "1839020"
  },
  {
    "text": "next value of new being the\nresult of calling f on new. ",
    "start": "1839020",
    "end": "1854810"
  },
  {
    "text": "And so this is my iteration loop\nthat pushes the button on the calculator. I basically think of it as\nhaving two registers on the",
    "start": "1854810",
    "end": "1860760"
  },
  {
    "text": "calculator: old and new. And in each step, new becomes\nold, and new gets F of new.",
    "start": "1860760",
    "end": "1869070"
  },
  {
    "text": "So this is the thing where I'm\ngetting the next value. And now, I'm going to\nstart this thing up",
    "start": "1869070",
    "end": "1880970"
  },
  {
    "text": "by giving two values. ",
    "start": "1880970",
    "end": "1888470"
  },
  {
    "text": "I wrote down on the blackboard\nto be slow so you can see this. This is the first time you've\nseen something quite this",
    "start": "1888470",
    "end": "1894650"
  },
  {
    "text": "complicated, I think. However, we might want to see\nthe whole thing over here in",
    "start": "1894650",
    "end": "1904710"
  },
  {
    "start": "1897000",
    "end": "1982000"
  },
  {
    "text": "this transparency or\nslide or whatever.",
    "start": "1904710",
    "end": "1910720"
  },
  {
    "text": "What we have is all of the\ndetails that are required to",
    "start": "1910720",
    "end": "1917200"
  },
  {
    "text": "make this thing work. I have a way of getting a\ntolerance for a close enough procedure, which we see here.",
    "start": "1917200",
    "end": "1923080"
  },
  {
    "text": "The close enough procedure, it\ntests whether u and v are close enough by seeing if the\nabsolute value of the",
    "start": "1923080",
    "end": "1929170"
  },
  {
    "text": "difference in u and v is less\nthan the given tolerance, OK? And here is the iteration loop\nthat I just wrote on the",
    "start": "1929170",
    "end": "1934440"
  },
  {
    "text": "blackboard and the\ninitialization for it, which is right there. ",
    "start": "1934440",
    "end": "1941680"
  },
  {
    "text": "It's very simple. ",
    "start": "1941680",
    "end": "1954210"
  },
  {
    "text": "But let's see. I haven't told you enough. It's actually easier\nthan this.",
    "start": "1954210",
    "end": "1959500"
  },
  {
    "text": "There is more structure to\nthis problem than I've already told you. Like why should this work?",
    "start": "1959500",
    "end": "1965700"
  },
  {
    "text": "Why should it converge? There's a hairy theorem in\nmathematics tied up in what",
    "start": "1965700",
    "end": "1970929"
  },
  {
    "text": "I've written here. Why is it that I should assume\nthat by iterating averaging the quotient of x and y\nand y that I should",
    "start": "1970930",
    "end": "1977780"
  },
  {
    "text": "get the right answer? It isn't so obvious. ",
    "start": "1977780",
    "end": "1983710"
  },
  {
    "start": "1982000",
    "end": "2067000"
  },
  {
    "text": "Surely there are other things,\nother procedures, which compute functions whose fixed\npoints would also be the",
    "start": "1983710",
    "end": "1989870"
  },
  {
    "text": "square root. For example, the obvious one\nwill be a new function g,",
    "start": "1989870",
    "end": "2000480"
  },
  {
    "text": "which maps y to x/y. ",
    "start": "2000480",
    "end": "2007950"
  },
  {
    "text": "That's even simpler. The fixed point of g is surely\nthe square root also, and it's",
    "start": "2007950",
    "end": "2014540"
  },
  {
    "text": "a simpler procedure. Why am I not using it? Well, I suppose you know.",
    "start": "2014540",
    "end": "2020470"
  },
  {
    "text": "Supposing x is 2 and I start out\nwith 1, and if I divide 1 into 2, I get 2.",
    "start": "2020470",
    "end": "2027700"
  },
  {
    "text": "And then if I divide\n2 into 2, I get 1. If I divide 1 into 2, I get 2,\nand 2 into 2, I get 1, and I",
    "start": "2027700",
    "end": "2032740"
  },
  {
    "text": "never get any closer\nto the square root. It just oscillates. ",
    "start": "2032740",
    "end": "2039080"
  },
  {
    "text": "So what we have is a signal\nprocessing system, an electrical circuit which is\noscillating, and I want to",
    "start": "2039080",
    "end": "2046230"
  },
  {
    "text": "damp out these oscillations.  Well, I can do that.",
    "start": "2046230",
    "end": "2051840"
  },
  {
    "text": "See, what I'm really doing\nhere when I'm taking my average, the average is\naveraging the last two values",
    "start": "2051840",
    "end": "2057290"
  },
  {
    "text": "of something which oscillates,\ngetting something in between. The classic way is damping out\noscillations in a signal",
    "start": "2057290",
    "end": "2064480"
  },
  {
    "text": "processing system.  So why don't we write down the\nstrategy that I just said in a",
    "start": "2064480",
    "end": "2071719"
  },
  {
    "start": "2067000",
    "end": "2485000"
  },
  {
    "text": "more clear way? Well, that's easy enough. ",
    "start": "2071719",
    "end": "2078638"
  },
  {
    "text": "I'm going to define the square\nroot of x to be a fixed point",
    "start": "2078639",
    "end": "2093789"
  },
  {
    "text": "of the procedure resulting\nfrom average damping. So I have a procedure resulting\nfrom average damp of",
    "start": "2093790",
    "end": "2110780"
  },
  {
    "text": "the procedure, that procedure\nof y, which divides x by y",
    "start": "2110780",
    "end": "2124820"
  },
  {
    "text": "starting out at 1. ",
    "start": "2124820",
    "end": "2129840"
  },
  {
    "text": "Ah, but average damp is a\nspecial procedure that's going to take a procedure as its\nargument and return a",
    "start": "2129840",
    "end": "2135720"
  },
  {
    "text": "procedure as its value. It's a generalization that says\ngiven a procedure, it's",
    "start": "2135720",
    "end": "2142090"
  },
  {
    "text": "the thing which produces a\nprocedure which averages the last value and the\nvalue before and",
    "start": "2142090",
    "end": "2147980"
  },
  {
    "text": "after running the procedure. You can use it for anything\nif you want to damp out",
    "start": "2147980",
    "end": "2153260"
  },
  {
    "text": "oscillations. So let's write that down. It's very easy. ",
    "start": "2153260",
    "end": "2160624"
  },
  {
    "text": "And stylistically here, I'm\ngoing to use lambda notation because it's much easier to\nthink when you're dealing with",
    "start": "2160624",
    "end": "2166950"
  },
  {
    "text": "procedure, the mid-line\nprocedures, to understand that the procedures are the objects\nI'm dealing with, so I'm going to use lambda notation here.",
    "start": "2166950",
    "end": "2173830"
  },
  {
    "text": "Not always. I don't always use it, but\nvery specifically here to expand on that idea,\nto elucidate it.",
    "start": "2173830",
    "end": "2182040"
  },
  {
    "start": "2182040",
    "end": "2188590"
  },
  {
    "text": "Well, average damp is a\nprocedure, which takes a",
    "start": "2188590",
    "end": "2193810"
  },
  {
    "text": "procedure as its argument,\nwhich we will call f. And what does it produce? It produces as its value--",
    "start": "2193810",
    "end": "2200339"
  },
  {
    "text": "the body of this procedure is\na thing which produces a procedure, the construct of the\nprocedures right here, of",
    "start": "2200340",
    "end": "2207260"
  },
  {
    "text": "one argument x, which averages\nf of x with x.",
    "start": "2207260",
    "end": "2220440"
  },
  {
    "start": "2220440",
    "end": "2230420"
  },
  {
    "text": "This is a very special thing. I think for the first time\nyou're seeing a procedure",
    "start": "2230420",
    "end": "2237730"
  },
  {
    "text": "which produces a procedure\nas its value. This procedure takes the\nprocedure f and does something",
    "start": "2237730",
    "end": "2245690"
  },
  {
    "text": "to it to produce a new procedure\nof one argument x, which averages f--",
    "start": "2245690",
    "end": "2251050"
  },
  {
    "text": "this f-- applied to x and x itself. Using the context here, I apply\naverage damping to the",
    "start": "2251050",
    "end": "2260280"
  },
  {
    "text": "procedure, which just\ndivides x by y. It's a division.",
    "start": "2260280",
    "end": "2265920"
  },
  {
    "text": " And I'm finding to fixed point\nof that, and that's a clearer",
    "start": "2265920",
    "end": "2271980"
  },
  {
    "text": "way of writing down what\nI wrote down over here, wherever it was.",
    "start": "2271980",
    "end": "2277796"
  },
  {
    "text": "Here, because it tells why\nI am writing this down. ",
    "start": "2277796",
    "end": "2287910"
  },
  {
    "text": "I suppose this to some extent\nreally clarifies what Heron of Alexandria was up to.",
    "start": "2287910",
    "end": "2294260"
  },
  {
    "text": "I suppose I'll stop now. Are there any questions?  AUDIENCE: So when you define\naverage damp, don't you need",
    "start": "2294260",
    "end": "2301282"
  },
  {
    "text": "to have a variable on f? PROFESSOR: Ah, the question was,\nand here we're having--",
    "start": "2301282",
    "end": "2308150"
  },
  {
    "text": "again, you've got to learn\nabout the syntax. The question was when defining\naverage damp, don't you have",
    "start": "2308150",
    "end": "2313839"
  },
  {
    "text": "to have a variable\ndefined with f? What you are asking about is\nthe formal parameter of f?",
    "start": "2313840",
    "end": "2320310"
  },
  {
    "text": "AUDIENCE: Yeah. PROFESSOR: OK. The formal parameter\nof f is here.",
    "start": "2320310",
    "end": "2325580"
  },
  {
    "text": "The formal parameter of f-- AUDIENCE: The formal parameter\nof average damp. PROFESSOR: F is being\nused to apply it to",
    "start": "2325580",
    "end": "2331890"
  },
  {
    "text": "an argument, right? It's indeed true that f must\nhave a formal parameter.",
    "start": "2331890",
    "end": "2337779"
  },
  {
    "text": "Let's find out what f's\nformal parameter is. AUDIENCE: The formal parameter\nof average damp. PROFESSOR: Oh, f is the formal\nparameter of average damp.",
    "start": "2337780",
    "end": "2344700"
  },
  {
    "text": "I'm sorry. You're just confusing\na syntactic thing. I could have written\nthis the other way.",
    "start": "2344700",
    "end": "2350470"
  },
  {
    "text": "Actually, I didn't understand\nyour question. Of course, I could have written\nit this other way. ",
    "start": "2350470",
    "end": "2359339"
  },
  {
    "text": "Those are identical notations. This is a different way\nof writing this.",
    "start": "2359340",
    "end": "2365607"
  },
  {
    "start": "2365607",
    "end": "2371710"
  },
  {
    "text": "You're going to have to get\nused to lambda notation because I'm going to use it. What it says here, I'm defining\nthe name average damp",
    "start": "2371710",
    "end": "2380460"
  },
  {
    "text": "to name the procedure whose\nof one argument f. That's the formal parameter of\nthe procedure average damp.",
    "start": "2380460",
    "end": "2389250"
  },
  {
    "text": "What define does is it says\ngive this name a value.",
    "start": "2389250",
    "end": "2396550"
  },
  {
    "text": "Here is the value of for it.  That there happens to be a\nfunny syntax to make that",
    "start": "2396550",
    "end": "2405100"
  },
  {
    "text": "easier in some cases is\npurely convenience. ",
    "start": "2405100",
    "end": "2410900"
  },
  {
    "text": "But the reason why I wrote it\nthis way here is to emphasize that I'm dealing with a\nprocedure that takes a",
    "start": "2410900",
    "end": "2416530"
  },
  {
    "text": "procedure as its argument\nand produces a procedure as its value. ",
    "start": "2416530",
    "end": "2423640"
  },
  {
    "text": "AUDIENCE: I don't understand\nwhy you use lambda twice. Can you just use one\nlambda and take two arguments f and x?",
    "start": "2423640",
    "end": "2429230"
  },
  {
    "text": "PROFESSOR: No. AUDIENCE: You can't? PROFESSOR: No, that would\nbe a different thing. If I were to write the procedure\nlambda of f and x,",
    "start": "2429230",
    "end": "2436190"
  },
  {
    "text": "the average of f of x and x,\nthat would not be something which would be allowed to take a\nprocedure as an argument and",
    "start": "2436190",
    "end": "2442810"
  },
  {
    "text": "produce a procedure\nas its value. That would be a thing that\ntakes a procedure as its argument and numbers\nits argument and",
    "start": "2442810",
    "end": "2448700"
  },
  {
    "text": "produces a new number. But what I'm producing here is\na procedure to fit in the procedure slot over here,\nwhich is going to",
    "start": "2448700",
    "end": "2456089"
  },
  {
    "text": "be used over here. So the number has to\ncome from here.",
    "start": "2456090",
    "end": "2461450"
  },
  {
    "text": "This is the thing that's going\nto eventually end up in the x. And if you're confused, you\nshould do some substitution",
    "start": "2461450",
    "end": "2467810"
  },
  {
    "text": "and see for yourself.  Yes? AUDIENCE: Will you please show\nthe definition for average",
    "start": "2467810",
    "end": "2475870"
  },
  {
    "text": "damp without using lambda\nnotation in both cases. PROFESSOR: I can't make a very\nsimple one like that.",
    "start": "2475870",
    "end": "2481490"
  },
  {
    "text": "Let me do it for you, though. I can get rid of this\nlambda easily.",
    "start": "2481490",
    "end": "2486530"
  },
  {
    "start": "2485000",
    "end": "2610000"
  },
  {
    "text": "I don't want to be-- ",
    "start": "2486530",
    "end": "2492760"
  },
  {
    "text": "actually, I'm lying to you. I don't want to do what you want\nbecause I think it's more confusing than you think.",
    "start": "2492760",
    "end": "2499309"
  },
  {
    "text": "I'm not going to write\nwhat you want. ",
    "start": "2499310",
    "end": "2515450"
  },
  {
    "text": "So we'll have to get a name. FOO of x to be of F of x and x\nand return as a value FOO.",
    "start": "2515450",
    "end": "2533370"
  },
  {
    "text": " This is equivalent, but\nI've had to make an",
    "start": "2533370",
    "end": "2540406"
  },
  {
    "text": "arbitrary name up. This is equivalent to this\nwithout any lambdas.",
    "start": "2540406",
    "end": "2546290"
  },
  {
    "text": "Lambda is very convenient for\nnaming anonymous procedures. It's the anonymous name\nof something.",
    "start": "2546290",
    "end": "2554080"
  },
  {
    "text": "Now, if you really want to know\na cute way of doing this,",
    "start": "2554080",
    "end": "2559780"
  },
  {
    "text": "we'll talk about it later. We're going to have to define\nthe anonymous procedure. Any other questions?",
    "start": "2559780",
    "end": "2565930"
  },
  {
    "text": " And so we go for our\nbreak again. ",
    "start": "2565930",
    "end": "2611740"
  },
  {
    "start": "2610000",
    "end": "3067000"
  },
  {
    "text": "So now we've seen how\nto use high-order procedures, they're called. That's procedures that take\nprocedural arguments and",
    "start": "2611740",
    "end": "2618570"
  },
  {
    "text": "produce procedural values to\nhelp us clarify and abstract some otherwise complicated\nprocesses.",
    "start": "2618570",
    "end": "2626470"
  },
  {
    "text": "I suppose what I'd like to do\nnow is have a bit of fun with that and sort of a little\npractice as well.",
    "start": "2626470",
    "end": "2634080"
  },
  {
    "text": "So let's play with this square\nroot thing even more. Let's elaborate it and\nunderstand what's going on and",
    "start": "2634080",
    "end": "2639800"
  },
  {
    "text": "make use of this kind of\nprogramming style. One thing that you might know\nis that there is a general",
    "start": "2639800",
    "end": "2648680"
  },
  {
    "text": "method called Newton's method\nthe purpose of which is to find the roots--",
    "start": "2648680",
    "end": "2655180"
  },
  {
    "text": "that's the zeroes-- of functions. So, for example, to find a y\nsuch that f of y equals 0, we",
    "start": "2655180",
    "end": "2678420"
  },
  {
    "text": "start with some guess. This is Newton's method. ",
    "start": "2678420",
    "end": "2691260"
  },
  {
    "text": "And the guess we start with\nwe'll call y0, and then we will iterate the following\nexpression.",
    "start": "2691260",
    "end": "2701100"
  },
  {
    "text": "y n plus 1-- this is a\ndifference equation-- is yn minus f of yn over the\nderivative with respect to y",
    "start": "2701100",
    "end": "2717366"
  },
  {
    "text": "of f evaluated at y equal yn.",
    "start": "2717366",
    "end": "2723270"
  },
  {
    "text": "Very strange notation. I must say ugh.",
    "start": "2723270",
    "end": "2731700"
  },
  {
    "text": "The derivative of f with respect\nto y is a function. I'm having a little bit of\nunhappiness with that, but",
    "start": "2731700",
    "end": "2738420"
  },
  {
    "text": "that's all right. It turns out in the programming\nlanguage world, the notation is much clearer.",
    "start": "2738420",
    "end": "2743930"
  },
  {
    "text": "Now, what is this? People call it Newton's\nmethod. It's a method for finding the\nroots of the function f.",
    "start": "2743930",
    "end": "2754250"
  },
  {
    "text": "And it, of course, sometimes\nconverges, and when it does, it does so very fast. And\nsometimes, it doesn't",
    "start": "2754250",
    "end": "2759309"
  },
  {
    "text": "converge, and, oh well, we have\nto do something else. But let's talk about square\nroot by Newton's method.",
    "start": "2759310",
    "end": "2767190"
  },
  {
    "text": "Well, that's rather\ninteresting. Let's do exactly the same thing\nwe did last time: a bit of wishful thinking.",
    "start": "2767190",
    "end": "2773490"
  },
  {
    "text": "We will apply Newton's method,\nassuming we knew how to do it. You don't know how\nto do it yet.",
    "start": "2773490",
    "end": "2780619"
  },
  {
    "text": "Well, let's go.  What do I have here?",
    "start": "2780620",
    "end": "2786070"
  },
  {
    "text": "The square root of x. ",
    "start": "2786070",
    "end": "2791410"
  },
  {
    "text": "It's Newton's method applied\nto a procedure which will",
    "start": "2791410",
    "end": "2797480"
  },
  {
    "text": "represent that function\nof y, which computes that function of y. Well, that procedure is that\nprocedure of y, which is the",
    "start": "2797480",
    "end": "2808820"
  },
  {
    "text": "difference between x and\nthe square of y. ",
    "start": "2808820",
    "end": "2820080"
  },
  {
    "text": "Indeed, if I had a value of y\nfor which this was zero, then",
    "start": "2820080",
    "end": "2827570"
  },
  {
    "text": "y would be the square\nroot of x. ",
    "start": "2827570",
    "end": "2833730"
  },
  {
    "text": "See that? OK, I'm going to start this\nout searching at 1.",
    "start": "2833730",
    "end": "2839250"
  },
  {
    "text": "Again, completely arbitrary\nproperty of square roots that I can do that.",
    "start": "2839250",
    "end": "2844820"
  },
  {
    "text": " Now, how am I going to compute\nNewton's method?",
    "start": "2844820",
    "end": "2851480"
  },
  {
    "text": "Well, this is the method. I have it right here. In fact, what I'm doing is\nlooking for a fixed point of",
    "start": "2851480",
    "end": "2857740"
  },
  {
    "text": "some procedure. This procedure involves some\ncomplicated expressions in",
    "start": "2857740",
    "end": "2865190"
  },
  {
    "text": "terms of other complicated\nthings. Well, I'm trying to find the\nfixed point of this. I want to find the values of y,\nwhich if I put y in here, I",
    "start": "2865190",
    "end": "2874620"
  },
  {
    "text": "get the same value out here up\nto some degree of accuracy.",
    "start": "2874620",
    "end": "2880130"
  },
  {
    "text": "Well, I already have a\nfixed point process around to do that. And so, let's just define\nNewton's method over here.",
    "start": "2880130",
    "end": "2887350"
  },
  {
    "start": "2887350",
    "end": "2899430"
  },
  {
    "text": "A procedure which computes\na function and a guess, initial guess.",
    "start": "2899430",
    "end": "2906640"
  },
  {
    "text": "Now, I'm going to have\nto do something here. I'm going to need the derivative\nof the function.",
    "start": "2906640",
    "end": "2913280"
  },
  {
    "text": "I'm going to need a procedure\nwhich computes the derivative of the function computed by\nthe given a procedure f.",
    "start": "2913280",
    "end": "2919490"
  },
  {
    "text": " I'm trying to be very careful\nabout what I'm saying. I don't want to mix up the word\nprocedure and function.",
    "start": "2919490",
    "end": "2926270"
  },
  {
    "text": "Function is a mathematical\nword. It says I'm mapping from values\nto other values, a set",
    "start": "2926270",
    "end": "2932950"
  },
  {
    "text": "of ordered pairs. But sometimes, I'll accidentally\nmix those up.",
    "start": "2932950",
    "end": "2940380"
  },
  {
    "text": "Procedures compute functions. ",
    "start": "2940380",
    "end": "2947400"
  },
  {
    "text": "So I'm going to define the\nderivative of f to be by wishful thinking again.",
    "start": "2947400",
    "end": "2952930"
  },
  {
    "text": "I don't know how I'm\ngoing to do it. Let's worry about that later-- ",
    "start": "2952930",
    "end": "2958612"
  },
  {
    "text": "of F. So if F is a procedure,\nwhich happens to be this one",
    "start": "2958612",
    "end": "2965340"
  },
  {
    "text": "over here for a square root,\nthen DF will be the derivative",
    "start": "2965340",
    "end": "2971800"
  },
  {
    "text": "of it, which is also the\nderivative of the function computed by that procedure. DF will be a procedure that\ncomputes the derivative of the",
    "start": "2971800",
    "end": "2978760"
  },
  {
    "text": "function computed by the\nprocedure F. And then given that, I will just go looking\nfor a fixed point.",
    "start": "2978760",
    "end": "2984849"
  },
  {
    "start": "2984850",
    "end": "2991910"
  },
  {
    "text": "What is the fixed point\nI'm looking for? It's the one for that procedure\nof one argument x,",
    "start": "2991910",
    "end": "2997580"
  },
  {
    "text": "which I compute by\nsubtracting x. That's the old-- that's\nthe yn here.",
    "start": "2997580",
    "end": "3004870"
  },
  {
    "text": "The quotient of f of x and df\nof x, starting out with the",
    "start": "3004870",
    "end": "3021110"
  },
  {
    "text": "original guess. ",
    "start": "3021110",
    "end": "3029450"
  },
  {
    "text": "That's all very simple. Now, I have one part left that\nI haven't written, and I want",
    "start": "3029450",
    "end": "3035130"
  },
  {
    "text": "you to see the process by which\nI write these things, because this is really true.",
    "start": "3035130",
    "end": "3040150"
  },
  {
    "text": "I start out with some\nmathematical idea, perhaps. By wishful thinking, I assume\nthat by some magic I can do",
    "start": "3040150",
    "end": "3048440"
  },
  {
    "text": "something that I have\na name for. I'm not going to worry about\nhow I do it yet.",
    "start": "3048440",
    "end": "3054850"
  },
  {
    "text": "Then I go walking down here and\nsay, well, by some magic, I'm somehow going to figure how\nto do that, but I'm going",
    "start": "3054850",
    "end": "3061142"
  },
  {
    "text": "to write my program anyway. Wishful thinking, essential\nto good engineering, and",
    "start": "3061142",
    "end": "3067990"
  },
  {
    "start": "3067000",
    "end": "3150000"
  },
  {
    "text": "certainly essential to a\ngood computer science.  So anyway, how many of\nyou wished that your",
    "start": "3067990",
    "end": "3075900"
  },
  {
    "text": "computer ran faster? ",
    "start": "3075900",
    "end": "3081119"
  },
  {
    "text": "Well, the derivative isn't\nso bad either. Sort of like average damping. ",
    "start": "3081120",
    "end": "3088922"
  },
  {
    "text": "The derivative is a procedure\nthat takes a procedure that",
    "start": "3088922",
    "end": "3094010"
  },
  {
    "text": "computes a function as its\nargument, and it produces a procedure that computes a\nfunction, which needs one",
    "start": "3094010",
    "end": "3102230"
  },
  {
    "text": "argument x. Well, you all know\nthis definition. It's f of x plus delta x minus\nf of x over delta x, right?",
    "start": "3102230",
    "end": "3109040"
  },
  {
    "text": "For some small delta x. So that's the quotient of the\ndifference of f of the sum of",
    "start": "3109040",
    "end": "3119850"
  },
  {
    "text": "x and dx minus f point\nx divided by dx.",
    "start": "3119850",
    "end": "3130345"
  },
  {
    "start": "3130345",
    "end": "3138530"
  },
  {
    "text": "I think the thing was lining up\ncorrectly when I balanced the parentheses. ",
    "start": "3138530",
    "end": "3145120"
  },
  {
    "text": "Now, I want you to\nlook at this. Just look. ",
    "start": "3145120",
    "end": "3151330"
  },
  {
    "text": "I suppose I haven't told\nyou what dx is. Somewhere in the world I'm going\nto have to write down",
    "start": "3151330",
    "end": "3164880"
  },
  {
    "text": "something like that. I'm not interested. This is a procedure which takes\na procedure and produces",
    "start": "3164880",
    "end": "3172970"
  },
  {
    "text": "an approximation, a procedure\nthat computes an approximation of the derivative of the\nfunction computed by the",
    "start": "3172970",
    "end": "3178010"
  },
  {
    "text": "procedure given by the standard\nmethods that you all know and love.",
    "start": "3178010",
    "end": "3184800"
  },
  {
    "text": "Now, it may not be the case that\ndoing this operation is such a good way of approximating\na derivative.",
    "start": "3184800",
    "end": "3191390"
  },
  {
    "text": "Numerical analysts here\nshould jump on me and say don't do that.",
    "start": "3191390",
    "end": "3196690"
  },
  {
    "text": "Computing derivatives produces\nnoisy answers, which is true. However, this again is for the\nsake of understanding.",
    "start": "3196690",
    "end": "3204849"
  },
  {
    "text": "Look what we've got. We started out with what is\napparently a mathematically complex thing.",
    "start": "3204850",
    "end": "3211210"
  },
  {
    "text": "and. In a few blackboards full, we\nmanaged to decompose the problem of computing square\nroots by the way you were",
    "start": "3211210",
    "end": "3217900"
  },
  {
    "text": "taught in your college\ncalculus class-- Newton's method--",
    "start": "3217900",
    "end": "3223720"
  },
  {
    "text": "so that it can be understood. It's clear. Let's look at the structure\nof what it is we've got.",
    "start": "3223720",
    "end": "3231231"
  },
  {
    "text": "Let's look at this slide. This is a diagram of the machine\ndescribed by the",
    "start": "3231231",
    "end": "3243109"
  },
  {
    "start": "3234000",
    "end": "3370000"
  },
  {
    "text": "program on the blackboard. There's a machine\ndescribed here.",
    "start": "3243110",
    "end": "3248940"
  },
  {
    "text": "And what have I got? Over here is the Newton's method\nfunction f that we have",
    "start": "3248940",
    "end": "3257690"
  },
  {
    "text": "on the left-most blackboard. It's the thing that takes an\nargument called y and puts out",
    "start": "3257690",
    "end": "3264990"
  },
  {
    "text": "the difference between x and\nthe square of y, where x is",
    "start": "3264990",
    "end": "3272500"
  },
  {
    "text": "some sort of free variable that\ncomes in from the outside by some magic.",
    "start": "3272500",
    "end": "3278049"
  },
  {
    "text": "So the square root routine picks\nup an x, and builds this",
    "start": "3278050",
    "end": "3283430"
  },
  {
    "text": "procedure, which I have the\nx rolled up in it by substitution.",
    "start": "3283430",
    "end": "3290170"
  },
  {
    "text": "Now, this procedure in the cloud\nis fed in as the f into",
    "start": "3290170",
    "end": "3298930"
  },
  {
    "text": "the Newton's method which\nis here, this box. ",
    "start": "3298930",
    "end": "3304650"
  },
  {
    "text": "The f is fanned out. Part of it goes into something\nelse, and the other part of it",
    "start": "3304650",
    "end": "3312130"
  },
  {
    "text": "goes through a derivative\nprocess into something else to produce a procedure, which\ncomputes the function which is",
    "start": "3312130",
    "end": "3320569"
  },
  {
    "text": "the iteration function of\nNewton's method when we use the fixed point method.",
    "start": "3320570",
    "end": "3327450"
  },
  {
    "text": "So this procedure, which\ncontains it by substitution--",
    "start": "3327450",
    "end": "3333030"
  },
  {
    "text": "remember, Newton's method over\nhere, Newton's method builds this procedure, and Newton's\nmethod has in it defined f and",
    "start": "3333030",
    "end": "3343010"
  },
  {
    "text": "df, so those are captured\nover here: f and df.",
    "start": "3343010",
    "end": "3348900"
  },
  {
    "text": "Starting with this procedure,\nI can now feed this to the fixed point process within an\ninitial guess coming out from",
    "start": "3348900",
    "end": "3355260"
  },
  {
    "text": "the outside from square\nroot to produce the square root of x.",
    "start": "3355260",
    "end": "3360385"
  },
  {
    "text": " So what we've built is a very\npowerful engine, which allows",
    "start": "3360385",
    "end": "3367680"
  },
  {
    "text": "us to make nice things\nlike this. Now, I want to end this with\nbasically an idea of Chris",
    "start": "3367680",
    "end": "3379000"
  },
  {
    "start": "3370000",
    "end": "3599000"
  },
  {
    "text": "Strachey, one of the grandfathers of computer science. He's a logician who\nlived in the--",
    "start": "3379000",
    "end": "3387440"
  },
  {
    "text": "I suppose about 10 years ago\nor 15 years ago, he died. I don't remember exactly when. He's one of the inventors\nof something called",
    "start": "3387440",
    "end": "3393250"
  },
  {
    "text": "denotational semantics. He was a great advocate of\nmaking procedures or functions",
    "start": "3393250",
    "end": "3400560"
  },
  {
    "text": "first-class citizens in a\nprogramming language. So here's the rights and\nprivileges of first-class",
    "start": "3400560",
    "end": "3406910"
  },
  {
    "text": "citizens in a programming\nlanguage. It allows you to make any\nabstraction you like if you",
    "start": "3406910",
    "end": "3413069"
  },
  {
    "text": "have functions as first-class\ncitizens. The first-class citizens\nmust be able",
    "start": "3413070",
    "end": "3419030"
  },
  {
    "text": "to be named by variables. And you're seeing me doing\nthat all the time.",
    "start": "3419030",
    "end": "3424600"
  },
  {
    "text": "Here's a nice variable which\nnames a procedure which computes something. ",
    "start": "3424600",
    "end": "3433270"
  },
  {
    "text": "They have to be passed as\narguments to procedures. We've certainly seen that.",
    "start": "3433270",
    "end": "3438540"
  },
  {
    "text": "We have to be able to return\nthem as values from procedures. And I suppose we've seen that.",
    "start": "3438540",
    "end": "3445300"
  },
  {
    "text": "We haven't yet seen anything\nabout data structures. We will soon, but it's also the\ncase that in order to have",
    "start": "3445300",
    "end": "3451490"
  },
  {
    "text": "a first-class citizen in a\nprogramming language, the object has to be allowed to be\npart of a data structure.",
    "start": "3451490",
    "end": "3457200"
  },
  {
    "text": "We're going to see that soon. So I just want to close with\nthis and say having things",
    "start": "3457200",
    "end": "3463530"
  },
  {
    "text": "like procedures as first-class\ndata structures, first-class data, allows one to make\npowerful abstractions, which",
    "start": "3463530",
    "end": "3470780"
  },
  {
    "text": "encode general methods\nlike Newton's method in very clear way. Are there any questions?",
    "start": "3470780",
    "end": "3477430"
  },
  {
    "text": "Yes. AUDIENCE: Could you put\nderivative instead of df directly in the fixed point?",
    "start": "3477430",
    "end": "3482570"
  },
  {
    "text": "PROFESSOR: Oh, sure. Yes, I could have put deriv of\nf right here, no question.",
    "start": "3482570",
    "end": "3489220"
  },
  {
    "text": " Any time you see something\ndefined, you can put the thing",
    "start": "3489220",
    "end": "3496190"
  },
  {
    "text": "that the definition is\nthere because you get the same result. In fact, what that would look\nlike, it's interesting.",
    "start": "3496190",
    "end": "3502800"
  },
  {
    "text": "AUDIENCE: Lambda. PROFESSOR: Huh? AUDIENCE: You could put the\nlambda expression in there. PROFESSOR: I could also put\nderivative of f here.",
    "start": "3502800",
    "end": "3509990"
  },
  {
    "text": "It would look interesting\nbecause of the open paren, open paren, deriv of f,\nclosed paren on an x.",
    "start": "3509990",
    "end": "3518609"
  },
  {
    "text": "Now, that would have the bad\nproperty of computing the derivative many times, because\nevery time I would run this",
    "start": "3518610",
    "end": "3523980"
  },
  {
    "text": "procedure, I would compute\nthe derivative again.  However, the two open parens\nhere both would be meaningful.",
    "start": "3523980",
    "end": "3532510"
  },
  {
    "text": "I want you to understand\nsyntactically that that's a sensible thing. Because if was to rewrite this\nprogram-- and I should do it",
    "start": "3532510",
    "end": "3538190"
  },
  {
    "text": "right here just so\nyou see because that's a good question-- ",
    "start": "3538190",
    "end": "3551490"
  },
  {
    "text": "of F and guess to be fixed point\nof that procedure of one",
    "start": "3551490",
    "end": "3565430"
  },
  {
    "text": "argument x, which subtracts\nfrom x the quotient of F",
    "start": "3565430",
    "end": "3574920"
  },
  {
    "text": "applied to x and the deriv\nof F applied to x.",
    "start": "3574920",
    "end": "3585045"
  },
  {
    "start": "3585045",
    "end": "3593459"
  },
  {
    "text": "This is guess. ",
    "start": "3593459",
    "end": "3599960"
  },
  {
    "text": "This is a perfectly legitimate\nprogram, because what I have here-- remember the evaluation rule.",
    "start": "3599960",
    "end": "3605910"
  },
  {
    "text": "The evaluation rule is evaluate\nall of the parts of the combination: the operator\nand the operands.",
    "start": "3605910",
    "end": "3612070"
  },
  {
    "text": "This is the operator of\nthis combination. ",
    "start": "3612070",
    "end": "3617079"
  },
  {
    "text": "Evaluating this operator will,\nof course, produce the derivative of F.",
    "start": "3617080",
    "end": "3628250"
  },
  {
    "text": "AUDIENCE: To get it one step\nfurther, you could put the lambda expression there, too. PROFESSOR: Oh, of course. Any time I take something which\nis define, I can put the",
    "start": "3628250",
    "end": "3637619"
  },
  {
    "text": "thing it's defined to be in\nthe place where the thing defined is. I can't remember which is\ndefiniens and which is",
    "start": "3637620",
    "end": "3644430"
  },
  {
    "text": "definiendum.  When I'm trying to figure out\nhow to do a lecture about this",
    "start": "3644430",
    "end": "3650230"
  },
  {
    "text": "in a freshman class, I use such\nwords and tell everybody it's fun to tell\ntheir friends.",
    "start": "3650230",
    "end": "3655440"
  },
  {
    "text": " OK, I think that's it.",
    "start": "3655440",
    "end": "3661460"
  },
  {
    "start": "3661460",
    "end": "3678505"
  }
]