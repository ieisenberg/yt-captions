[
  {
    "text": " The following content is\nprovided under a Creative Commons license.",
    "start": "0",
    "end": "5649"
  },
  {
    "text": "Your support will help MIT\nOpenCourseWare continue to offer high quality educational\nresources for free.",
    "start": "5650",
    "end": "12340"
  },
  {
    "text": "To make a donation or view\nadditional materials from hundreds of MIT courses, visit\nMIT OpenCourseWare at",
    "start": "12340",
    "end": "19160"
  },
  {
    "text": "ocw.mit.edu. ",
    "start": "19160",
    "end": "26000"
  },
  {
    "text": "CHARLES LEISERSON: So today\nwe're going to take a little bit closer look at what's\nhappening under the covers",
    "start": "26000",
    "end": "33120"
  },
  {
    "text": "when you compile a C program. But before we get into that,\nwe did a little interesting",
    "start": "33120",
    "end": "42080"
  },
  {
    "text": "correlation on your scores for\nthe first problem, for the",
    "start": "42080",
    "end": "51160"
  },
  {
    "text": "every bit one. So this is basically plotting. It's a scatter plot of how you\ndid in your test coverage",
    "start": "51160",
    "end": "60350"
  },
  {
    "text": "score versus how you did in\nyour correctness score and",
    "start": "60350",
    "end": "67409"
  },
  {
    "text": "performance, correctness and\nperformance together. And what's interesting is that\nif you did better in your test",
    "start": "67410",
    "end": "75270"
  },
  {
    "text": "coverage, you did better\nin your performance and correctness.",
    "start": "75270",
    "end": "82161"
  },
  {
    "text": "OK, that's a pretty good\ncorrelation, right? There's some outliers here. But that's a pretty\ngood correlation.",
    "start": "82161",
    "end": "87924"
  },
  {
    "start": "87925",
    "end": "96170"
  },
  {
    "text": "Yeah, John? Yeah? JOHN: The-- CHARLES LEISERSON: Do\nwe have a handheld? Here we go. Just a second.",
    "start": "96170",
    "end": "101610"
  },
  {
    "start": "101610",
    "end": "107660"
  },
  {
    "text": "The only thing is we have to\nfigure out how to turn it on. There we go. ",
    "start": "107660",
    "end": "112885"
  },
  {
    "text": "JOHN: Yeah, so just to clarify,\nthe people who seemingly got no test coverage\nbut really good performance",
    "start": "112885",
    "end": "118515"
  },
  {
    "text": "scores, what actually happened\nwas that we tested for things that we didn't expect students\nto cover for like on feeding",
    "start": "118515",
    "end": "127630"
  },
  {
    "text": "invalid values to better a set\nand better a get or testing for private functions to\ntheir implementations.",
    "start": "127630",
    "end": "134830"
  },
  {
    "text": "So in reality they had better\ntest suites than the coverage score would indicate.",
    "start": "134830",
    "end": "140440"
  },
  {
    "start": "140440",
    "end": "146970"
  },
  {
    "text": "CHARLES LEISERSON: So what\nare the lessons that one draws from this? So professional engineers know\nwhat the lessons are.",
    "start": "146970",
    "end": "155269"
  },
  {
    "text": "So the lessons are that it is\nactually better, if you have a coding problem to do, to\nwrite tests first.",
    "start": "155270",
    "end": "164910"
  },
  {
    "text": "Before you code you\nwrite your tests. And that actually speeds\nthe development of",
    "start": "164910",
    "end": "172360"
  },
  {
    "text": "fast correct code. It's actually faster. You get to the end result\nmuch faster.",
    "start": "172360",
    "end": "178340"
  },
  {
    "text": "Because whenever you make an\nerror in your program, you instantly know that you may\nhave a problem rather than",
    "start": "178340",
    "end": "187360"
  },
  {
    "text": "thinking that you're doing\nsomething OK and then discovering that, oh, in fact\nyour code is, in fact,",
    "start": "187360",
    "end": "195120"
  },
  {
    "text": "incorrect, and you're working\naway optimizing something that's not working So before\ncoding, it's highly",
    "start": "195120",
    "end": "205030"
  },
  {
    "text": "recommended that\nyou write test. Also if you find a bug, when\nyou find a bug, the first",
    "start": "205030",
    "end": "211739"
  },
  {
    "text": "thing you should do is write a\ntest for that bug if it wasn't already covered.",
    "start": "211740",
    "end": "218310"
  },
  {
    "text": "Then you fix the bug. And then you make sure that your\ntest now, that your new",
    "start": "218310",
    "end": "223860"
  },
  {
    "text": "implementation, passes\nthat particular one. Professional engineers\nknow this. Professional software developers\nknow this.",
    "start": "223860",
    "end": "232310"
  },
  {
    "text": "It comes hard. And if you want a job at any\ntop flight software firm,",
    "start": "232310",
    "end": "239760"
  },
  {
    "text": "they're going to expect that you\nknow that you write tests first before you do coding.",
    "start": "239760",
    "end": "244990"
  },
  {
    "text": " The second lesson isn't quite\nso obvious from this.",
    "start": "244990",
    "end": "252030"
  },
  {
    "text": "But it's the second lesson\nthat I think some people experienced in the class which\nwas the idea of putting you in",
    "start": "252030",
    "end": "260120"
  },
  {
    "text": "groups, in particular in pairs,\nwas not so that you could do divide and conquer\non the code.",
    "start": "260120",
    "end": "266930"
  },
  {
    "text": "It was to do pair programming. And what we found was that\na bunch of groups",
    "start": "266930",
    "end": "273379"
  },
  {
    "text": "divided up the work. And they said, OK, it'll go\nfaster if you do this one and I do that one.",
    "start": "273380",
    "end": "279800"
  },
  {
    "text": "Once again that's probably\na mistake. If you can sit together and\ntake turns at the keyboard",
    "start": "279800",
    "end": "287010"
  },
  {
    "text": "making the changes, it may seem\nlike it's going slower to begin with, but it's amazing how\nmany errors you catch and",
    "start": "287010",
    "end": "293580"
  },
  {
    "text": "how quickly you find your errors\nbecause you're just talking with each other.",
    "start": "293580",
    "end": "299560"
  },
  {
    "text": "And it's like, oh, duh. So good programmers know this.",
    "start": "299560",
    "end": "306860"
  },
  {
    "text": "That it really helps to have\nmore than one person understand what's going\non in the code.",
    "start": "306860",
    "end": "312560"
  },
  {
    "text": "So the people who had difficulty\nwith their partners one way or another often did\nnot, it was partly because",
    "start": "312560",
    "end": "319659"
  },
  {
    "text": "they just divided up the work,\nyou're responsible for that, oh, we got a bad grade on\nthat, that's your fault.",
    "start": "319660",
    "end": "325290"
  },
  {
    "text": "No, both partners own\nthat grade 100%. And the best way to ensure\nis to work together.",
    "start": "325290",
    "end": "335220"
  },
  {
    "text": "Now, this sometimes flies in the\nface of people who believe that they are clever or more\nexperienced than somebody,",
    "start": "335220",
    "end": "342440"
  },
  {
    "text": "than their partner, oh, I can do\nthis much better on my own.",
    "start": "342440",
    "end": "347720"
  },
  {
    "text": "Usually, that's true for little\nprojects, but as the projects get bigger that\nbecomes a much harder",
    "start": "347720",
    "end": "359389"
  },
  {
    "text": "situation to deal with. It becomes the case that you\nreally want two brains looking",
    "start": "359390",
    "end": "364980"
  },
  {
    "text": "at the same thing, four\neyes as opposed to two eyes looking at things.",
    "start": "364980",
    "end": "372310"
  },
  {
    "text": "But I think, in particular,\nbefore coding write test. And we are right now working\non improving the",
    "start": "372310",
    "end": "378320"
  },
  {
    "text": "infrastructure. One of the things that they have\nin most companies is, at",
    "start": "378320",
    "end": "384940"
  },
  {
    "text": "the very minimum, they have\nwhat's called a nightly build. Nightly build says they take all\nthe software, they build",
    "start": "384940",
    "end": "392710"
  },
  {
    "text": "it, and then they run regression\ntests against it all night while everybody's\nhome sleeping.",
    "start": "392710",
    "end": "397990"
  },
  {
    "text": "Come in the next morning, here's\nthe things that broke. And if you broke the\nbuild, you got some",
    "start": "397990",
    "end": "404120"
  },
  {
    "text": "work to do that morning. And it's generally not a good\nidea to break the build.",
    "start": "404120",
    "end": "410260"
  },
  {
    "text": "What has been demonstrating,\nin fact, is that continuous build is even better.",
    "start": "410260",
    "end": "416520"
  },
  {
    "text": "This is where, whenever you make\na change to the program, you run the full suite\nof tests on it.",
    "start": "416520",
    "end": "422250"
  },
  {
    "text": "And we're going to\nlook into it. We have to see what\nour resources are. As you know, our TAs are\na limited resource.",
    "start": "422250",
    "end": "429659"
  },
  {
    "text": "But we're going to look into\nseeing whether we can provide more of that kind of\ninfrastructure on some of the later projects for you folks.",
    "start": "429660",
    "end": "435940"
  },
  {
    "text": "So you can sort of see\nthe matrix that we eventually got to you. You can see that develop\nin real time.",
    "start": "435940",
    "end": "441919"
  },
  {
    "text": "How am I doing against\nother people's tests? How are they doing against\nmy tests, et cetera? ",
    "start": "441920",
    "end": "449599"
  },
  {
    "text": "So we'll see whether\nwe can do that. But what's funny is you think\nthat it'd be faster to just",
    "start": "449600",
    "end": "454810"
  },
  {
    "text": "code and do it. Computer science is full\nof wonderful paradoxes. And one of them is that doing\nthings like writing the extra",
    "start": "454810",
    "end": "464850"
  },
  {
    "text": "code to test is actually faster\nthan not writing it,",
    "start": "464850",
    "end": "471120"
  },
  {
    "text": "surprisingly. It really gets you to the\nend result a lot faster. Any questions about that?",
    "start": "471120",
    "end": "476710"
  },
  {
    "text": " Any comments about that? ",
    "start": "476710",
    "end": "483410"
  },
  {
    "text": "Let's talk about our today. So today we're going to talk\nmostly about single threaded",
    "start": "483410",
    "end": "491000"
  },
  {
    "text": "performance. This is one instruction\nstream that you're trying to make go fast.",
    "start": "491000",
    "end": "496970"
  },
  {
    "text": "But if you look at today's\ncomputing milieu, how all of",
    "start": "496970",
    "end": "503620"
  },
  {
    "text": "the computers are used,\nwhat do you have? You've got networks of\nmulti-core clusters.",
    "start": "503620",
    "end": "509650"
  },
  {
    "text": "It's parallelism everywhere. You've got shared memory among\nprocessors within a chip.",
    "start": "509650",
    "end": "515950"
  },
  {
    "text": "You've got message passing among\nmachines in a cluster. You've got network protocols\namong clusters so that you can",
    "start": "515950",
    "end": "522210"
  },
  {
    "text": "do wide area things.",
    "start": "522210",
    "end": "527400"
  },
  {
    "text": "Yet we're saying, no, let's take\na look at what happens on one core on one machine.",
    "start": "527400",
    "end": "534320"
  },
  {
    "text": "So why is that important\nto focus first on what",
    "start": "534320",
    "end": "539920"
  },
  {
    "text": "one core can do? Why study single threaded\nperformance at all?",
    "start": "539920",
    "end": "545530"
  },
  {
    "text": "Let's just go do the\nparallel stuff. That's more fun anyway. ",
    "start": "545530",
    "end": "550820"
  },
  {
    "text": "Well, there are a couple of\nreasons that I can think of. The first one is at the end of\nthe day, even if you've got",
    "start": "550820",
    "end": "562010"
  },
  {
    "text": "something running widely in\nparallel, the code is running",
    "start": "562010",
    "end": "567230"
  },
  {
    "text": "in each core in a single\nthreaded manner. You just have a bunch of them. And so if you've given up a\nfactor of two or a factor of",
    "start": "567230",
    "end": "576600"
  },
  {
    "text": "four in performance or even\nmore, as you're aware, you can sometimes make it orders of\nmagnitude, but in performance",
    "start": "576600",
    "end": "584240"
  },
  {
    "text": "what you're saying is that\nyou're going to end up using much more resources to do your\nparticular job in parallel.",
    "start": "584240",
    "end": "592060"
  },
  {
    "text": "And resources is money. So if I can do the job with a\ncluster of 16 processors and",
    "start": "592060",
    "end": "603360"
  },
  {
    "text": "somebody else can do it in\na cluster with only four processors, hey, they just spent\na quarter the amount on",
    "start": "603360",
    "end": "612360"
  },
  {
    "text": "not just the capital investment\nin that hardware but also the operating costs\nof what it cost to actually",
    "start": "612360",
    "end": "621720"
  },
  {
    "text": "cool and provide electricity to\nand maintain and so forth.",
    "start": "621720",
    "end": "627040"
  },
  {
    "text": "All that gets much cheaper. So if you get good single\nthread performance, it translates. That's kind of the\ndirect reason.",
    "start": "627040",
    "end": "636300"
  },
  {
    "text": "The indirect reason is, for\nstudying it, is that many of the lessons will generalize.",
    "start": "636300",
    "end": "642160"
  },
  {
    "text": "So things that we'll see for\nsingle core, there is an analogy when you start\nlooking at parallel",
    "start": "642160",
    "end": "647890"
  },
  {
    "text": "and distributed systems. So that's a little\nless concrete.",
    "start": "647890",
    "end": "653320"
  },
  {
    "text": "But as you'll see as you gain\nexperience, you'll see that there's a lot of lessons that\ngeneralize to how do you think",
    "start": "653320",
    "end": "660980"
  },
  {
    "text": "about performance no matter\nwhat the context. ",
    "start": "660980",
    "end": "669660"
  },
  {
    "text": "So what about a single\nthreaded machine? What's it like? So some of this is going to be a\nlittle bit review, but we're",
    "start": "669660",
    "end": "676370"
  },
  {
    "text": "going to just sort\nof go deeper. We've sort of been taking\nlayers off the onion. And today we're going\nto take a few more",
    "start": "676370",
    "end": "682210"
  },
  {
    "text": "layers off the onion. So you have inside\na processor core. You've got registers.",
    "start": "682210",
    "end": "688339"
  },
  {
    "text": "You've got the functional\nunits to do your ALU operations, floating point\nunits, vector units these",
    "start": "688340",
    "end": "694880"
  },
  {
    "text": "days, and all the stuff to do\ninstruction, execution, and coordination, scheduling,\nout of order",
    "start": "694880",
    "end": "702300"
  },
  {
    "text": "execution, and so forth. In addition then, you have\na memory hierarchy.",
    "start": "702300",
    "end": "708509"
  },
  {
    "text": "Within the core, you typically\nhave registers and L1 and L2 caches. And then outside the core\noften is the L3 cache.",
    "start": "708510",
    "end": "717910"
  },
  {
    "text": "DRAM memory, you may have\na solid-state drive these days and disk. And so in that context,\nyou're trying to make",
    "start": "717910",
    "end": "725240"
  },
  {
    "text": "your code run fast.  So when you compile the piece\nof code, so here I have a",
    "start": "725240",
    "end": "735100"
  },
  {
    "text": "piece of code. I'm always amused when I put up\na Fibonacci as the example. Because this is a really\nterrible way to compute",
    "start": "735100",
    "end": "743210"
  },
  {
    "text": "Fibonacci numbers. So this is an exponential time\nalgorithm for computing",
    "start": "743210",
    "end": "748530"
  },
  {
    "text": "Fibonacci numbers. And you may be aware you can do\nthis in linear time just by",
    "start": "748530",
    "end": "755100"
  },
  {
    "text": "adding up from the bottom. In fact, if you take the\nalgorithms course, you learn that you can actually do this in\nlogarithmic time by matrix,",
    "start": "755100",
    "end": "764220"
  },
  {
    "text": "recursive squaring\nof matrices. So it's sort of interesting to\nput up something where we say",
    "start": "764220",
    "end": "769510"
  },
  {
    "text": "we're going to optimize this. And, of course, we'll get a\nconstant factor improvement on",
    "start": "769510",
    "end": "774569"
  },
  {
    "text": "something like this. But, in fact, really this is a\nterrible program to write for",
    "start": "774570",
    "end": "781610"
  },
  {
    "text": "optimization. But it's good didactically. And Fibonacci numbers\nare fun anyway.",
    "start": "781610",
    "end": "787459"
  },
  {
    "text": "So typically what happens is\nwhen you run GCC on your .C",
    "start": "787460",
    "end": "793120"
  },
  {
    "text": "file and produce a binary, what\nhappens is it produces",
    "start": "793120",
    "end": "799980"
  },
  {
    "text": "the machine code, which is\nbasically a string of bytes, zeros and ones. And that goes, when you run the\nprogram, that goes through",
    "start": "799980",
    "end": "808570"
  },
  {
    "text": "the hardware interpreter. So the hardware of the machine\nis doing an interpretation of these very simple instructions\nand produces an execution.",
    "start": "808570",
    "end": "817149"
  },
  {
    "text": "But, in fact, there's actually\nfour stages that go on inside of GCC if you type a\ncommand like this.",
    "start": "817150",
    "end": "824709"
  },
  {
    "text": "The first thing is what's\ncalled preprocessing. And what that does is it does\nany macro expansion and so",
    "start": "824710",
    "end": "831360"
  },
  {
    "text": "forth, things that are just\nbasically on the level of textual substitutions\nbefore you get into",
    "start": "831360",
    "end": "837800"
  },
  {
    "text": "the guts of the compiler. Then you actually\ndo the compiler. And that produces a version of\nmachine code called assembly",
    "start": "837800",
    "end": "847930"
  },
  {
    "text": "language, which we'll see\nin just a minute. And from that version of\nassembly language it then goes",
    "start": "847930",
    "end": "856940"
  },
  {
    "text": "into a process called linking\nand loading, which actually causes it to produce\nthe binary that",
    "start": "856940",
    "end": "864280"
  },
  {
    "text": "you can then execute. So all four stages are\nincluded here.",
    "start": "864280",
    "end": "870350"
  },
  {
    "text": "And there are switches to GCC\nthat let you do only one or",
    "start": "870350",
    "end": "876069"
  },
  {
    "text": "all of these things. You can, for example, run\nthe preprocessor GCC. You can tell it to run the\npreprocessor alone and see",
    "start": "876070",
    "end": "883050"
  },
  {
    "text": "what all your macros\nexpanded to. Yes? Question? AUDIENCE: What's the difference\nbetween compiling",
    "start": "883050",
    "end": "888477"
  },
  {
    "text": "and assembling? CHARLES LEISERSON: So compiling\nreduces it to essentially assembly language.",
    "start": "888477",
    "end": "895090"
  },
  {
    "text": "And then assembling is taking\nthat assembly language and",
    "start": "895090",
    "end": "900900"
  },
  {
    "text": "producing the machine binary. AUDIENCE: I was going to say,\nthere's a one-to-one",
    "start": "900900",
    "end": "906162"
  },
  {
    "text": "correspondence between machine\ncode and assembly, but there's not a one-to-one correspondence\nbetween C code and assembly.",
    "start": "906162",
    "end": "911958"
  },
  {
    "text": "CHARLES LEISERSON: Yeah. So there's actually not\nquite a one to one, but it's very close.",
    "start": "911958",
    "end": "917019"
  },
  {
    "text": "It's very close. So you can think of it as one\nto one between assembly machine code.",
    "start": "917020",
    "end": "922180"
  },
  {
    "text": "But assembly is, in some sense,\na more human readable and understandable version\nof machine code.",
    "start": "922180",
    "end": "929890"
  },
  {
    "text": "In fact, that's what we're\ngoing to talk about. So let's go directly\nto assembly code. To do that I can use\nthe minus S switch.",
    "start": "929890",
    "end": "938530"
  },
  {
    "text": "Now it turns out it's\nalso helpful to use the minus G switch. Minus G says give me all the\ndebugger symbol tables.",
    "start": "938530",
    "end": "946839"
  },
  {
    "text": "And what that makes it is so\nthat you can actually read the assembly language. If you don't have that\ninformation, then you don't",
    "start": "946840",
    "end": "952980"
  },
  {
    "text": "know what the programmer\nwrote as the symbols. Instead you will get\ncomputer generated",
    "start": "952980",
    "end": "963050"
  },
  {
    "text": "symbol names for things. And you don't have any\nmeaning to those. So it's really a good\nidea to use minus",
    "start": "963050",
    "end": "968899"
  },
  {
    "text": "G and minus S together. And this basically provides\na convenient symbolic representation of the\nmachine language.",
    "start": "968900",
    "end": "975340"
  },
  {
    "text": "And this is sort of the type\nof thing that you'll get, something coming out that\nlooks like this. It's basically an Ascii.",
    "start": "975340",
    "end": "981800"
  },
  {
    "text": "It's in text, characters,\nrather than being in the binary executable.",
    "start": "981800",
    "end": "988710"
  },
  {
    "text": "And if you want, you can find\nout all the vagaries of it.",
    "start": "988710",
    "end": "994770"
  },
  {
    "text": "This is one site that has some\nreasonable documentation on",
    "start": "994770",
    "end": "1000690"
  },
  {
    "text": "the GNU assembler. It's actually not as good on\nthe instructions, but it's",
    "start": "1000690",
    "end": "1005950"
  },
  {
    "text": "really good on all the\ndirectives, which we'll talk about in a minute like .global\nand .type and all that stuff.",
    "start": "1005950",
    "end": "1013730"
  },
  {
    "text": "It's very good on that stuff.  There's another thing\nthat you can do.",
    "start": "1013730",
    "end": "1020260"
  },
  {
    "text": "And once again, it's also\nhelpful if you've produced a binary that has the\nsymbol table.",
    "start": "1020260",
    "end": "1026569"
  },
  {
    "text": "And that is to do a dump\nof the object code.",
    "start": "1026569",
    "end": "1031760"
  },
  {
    "text": "And when you do a dump of the\nobject code, what it does is you basically give it an\nexecutable and it goes",
    "start": "1031760",
    "end": "1039079"
  },
  {
    "text": "backwards the other way, take\nthis executable and undo one step, disassemble it.",
    "start": "1039079",
    "end": "1047800"
  },
  {
    "text": "And what's good about object\ndump is that it gives you, first of all, these are all\nthe byte codes of the",
    "start": "1047800",
    "end": "1053710"
  },
  {
    "text": "instructions. Also if you've got the minus S\nsays interleave the source",
    "start": "1053710",
    "end": "1058750"
  },
  {
    "text": "code, so you can see, here's the\nsource code interleaved. So you can see which\nregions of code",
    "start": "1058750",
    "end": "1064070"
  },
  {
    "text": "depend on which things. And so it basically tells you\nwhere in memory it's being",
    "start": "1064070",
    "end": "1070600"
  },
  {
    "text": "loaded, it's been loaded, what\nthe instructions are. And then it gives you the\nassembly interpretation of",
    "start": "1070600",
    "end": "1077559"
  },
  {
    "text": "that machine binary. And this is where you can see\nit's almost one to one what's",
    "start": "1077560",
    "end": "1082600"
  },
  {
    "text": "going on here. Here we have a push\nof an operand. And that notice is just\na one byte code.",
    "start": "1082600",
    "end": "1087620"
  },
  {
    "text": "Whereas here we've got an opcode\nand two arguments.",
    "start": "1087620",
    "end": "1093330"
  },
  {
    "text": "And it has three bytes\nas it turns out. So you can see there's sort\nof a correspondence.",
    "start": "1093330",
    "end": "1098639"
  },
  {
    "text": "Yeah, question? AUDIENCE: How does\n[? logic then take the ?] machine language code\nand go to--",
    "start": "1098640",
    "end": "1104160"
  },
  {
    "text": "how does it know the function\nnames and stuff? CHARLES LEISERSON: It knows\nthe function names because when you compile it with -g,\nit produces, in addition to",
    "start": "1104160",
    "end": "1113110"
  },
  {
    "text": "producing the binary, it\nproduces a separate segment that's not loaded in that has\nall that information that",
    "start": "1113110",
    "end": "1119870"
  },
  {
    "text": "says, oh, at this location\nis where this symbol is. And it produces all that as\nstuff that's never loaded in",
    "start": "1119870",
    "end": "1126840"
  },
  {
    "text": "at run time but which\nis there in order to aid debuggers mainly. Question?",
    "start": "1126840",
    "end": "1132610"
  },
  {
    "text": "AUDIENCE: To compile something\nnot using the gflag and then you do an object dump,\nhow would that work?",
    "start": "1132610",
    "end": "1138715"
  },
  {
    "text": "CHARLES LEISERSON: Then what\nhappens is, first of all, you would not be able to get\nthis stuff interleaved.",
    "start": "1138715",
    "end": "1146280"
  },
  {
    "text": "And then things like here where\nit says fib, well, fib may be an external name so\nyou might know it anyway.",
    "start": "1146280",
    "end": "1154159"
  },
  {
    "text": "But if it were an internal name,\nyou would not be able to see what it was. Yeah, if you're going\nto respond let's",
    "start": "1154160",
    "end": "1161360"
  },
  {
    "text": "get you on mike here. Why don't you just hold this? JOHN: Yeah, so you'll generally\nget the function",
    "start": "1161360",
    "end": "1167270"
  },
  {
    "text": "names so you know roughly\na huge blob of assembly corresponds to a function. But you won't be able to get\nany information about what",
    "start": "1167270",
    "end": "1174740"
  },
  {
    "text": "variables are in which registers\nor what position the sixth line of assembly\ncorresponds to in terms of",
    "start": "1174740",
    "end": "1181630"
  },
  {
    "text": "your source code.  CHARLES LEISERSON: Then the\nother thing that you can do is",
    "start": "1181630",
    "end": "1187169"
  },
  {
    "text": "you can actually take the\nassembler, the assembly code, if you produce just the assembly\ncode, and if you tell",
    "start": "1187170",
    "end": "1193139"
  },
  {
    "text": "GCC to take a .s file, which is\nthe assembly code, you can produce the machine\ncode from it.",
    "start": "1193140",
    "end": "1200146"
  },
  {
    "text": "And so one thing that you can\ndo is you can produce a .s",
    "start": "1200146",
    "end": "1205910"
  },
  {
    "text": "file and then edit it in Emacs\nor VI or whatever your",
    "start": "1205910",
    "end": "1211820"
  },
  {
    "text": "favorite text editor is and\nthen assemble it with GCC. So you can actually\nmodify what the",
    "start": "1211820",
    "end": "1218430"
  },
  {
    "text": "machine code is directly. And that's what we're going to\nspend a little bit of time doing today.",
    "start": "1218430",
    "end": "1224580"
  },
  {
    "text": "Let's go in and see what the\ncompiler generates and then let's twiddle it a bit. ",
    "start": "1224580",
    "end": "1234630"
  },
  {
    "text": "So here's what we're going to\nexpect that you do, that you're able to do. ",
    "start": "1234630",
    "end": "1241770"
  },
  {
    "text": "We expect in this class that\nyou're going to be able to understand how a compiler\nimplements the C linguistic",
    "start": "1241770",
    "end": "1250370"
  },
  {
    "text": "constructs using x86\ninstructions.  We're going to expect that you\ncan read x86 assembly language",
    "start": "1250370",
    "end": "1260059"
  },
  {
    "text": "with the aid of a manual. We don't expect that you know\nall the instructions, but the basic ones we expect that\nyou know what those are.",
    "start": "1260060",
    "end": "1268350"
  },
  {
    "text": "We expect that you're going\nto be able to make simple modifications to the assembly\nlanguage generated by a",
    "start": "1268350",
    "end": "1274840"
  },
  {
    "text": "compiler, and that you would\nknow, if push came to shove, how to write your own machine\ncode on your own.",
    "start": "1274840",
    "end": "1281610"
  },
  {
    "text": "That's not something we're going\nto expect that you do, but you would know how to get\nstarted to do that if at some",
    "start": "1281610",
    "end": "1286919"
  },
  {
    "text": "point you said, oh,\nI really have to write this in assembler. ",
    "start": "1286920",
    "end": "1292410"
  },
  {
    "text": "So this is, as I say, really\nwe're going to take off some layers of the onion today, try\nto get down what's going on.",
    "start": "1292410",
    "end": "1300036"
  },
  {
    "text": "It turns out this is actually\nkind of fun. Now, the part that's not fun\nat some level is the x86 64",
    "start": "1300036",
    "end": "1309100"
  },
  {
    "text": "machine model.  The x86 is what's\ncalled a complex",
    "start": "1309100",
    "end": "1315680"
  },
  {
    "text": "instruction set computer. And these, long ago, were\ndemonstrated to be inferior to",
    "start": "1315680",
    "end": "1326590"
  },
  {
    "text": "so-called reduced instruction\nset computers. But that hasn't mattered\nin the marketplace.",
    "start": "1326590",
    "end": "1334049"
  },
  {
    "text": "What's mattered in the\nmarketplace is who could build better and faster chips. And also the amount of people\nwho started using the x86",
    "start": "1334050",
    "end": "1342940"
  },
  {
    "text": "instruction set has produced\na huge legacy and inertia.",
    "start": "1342940",
    "end": "1348240"
  },
  {
    "text": "It's sort of like some people\nmight argue that Esperanto is a better language for everybody to learn than English.",
    "start": "1348240",
    "end": "1354480"
  },
  {
    "text": "But how come English with all\nits complexities and so forth, and I'm sure for some of you who\nhave learned English as a",
    "start": "1354480",
    "end": "1362500"
  },
  {
    "text": "second language, it's like\nit's a crazy language. Who do you learn English? Well, it's because that's what\neverybody's learning.",
    "start": "1362500",
    "end": "1370040"
  },
  {
    "text": "That's where the legacy is. And so x86 is very much\nlike the English of",
    "start": "1370040",
    "end": "1377130"
  },
  {
    "text": "machines these days. So in this model there's\nbasically a flat 64-bit",
    "start": "1377130",
    "end": "1385030"
  },
  {
    "text": "address space.  There are 16 64-bit general\npurpose registers, and then",
    "start": "1385030",
    "end": "1394710"
  },
  {
    "text": "what are some segment registers,\na register full of flags, an instruction pointer\nregister, rest in peace.",
    "start": "1394710",
    "end": "1407910"
  },
  {
    "text": "They're eight 80-bit floating\npoint data registers, some",
    "start": "1407910",
    "end": "1413170"
  },
  {
    "text": "control status registers, an\nopcode register, a floating point instruction pointer\nregister, and a floating point",
    "start": "1413170",
    "end": "1420539"
  },
  {
    "text": "data pointing register, some\nMMX registers for the",
    "start": "1420540",
    "end": "1427000"
  },
  {
    "text": "multimedia extensions, and a\n128-bit XMM registers for the",
    "start": "1427000",
    "end": "1436770"
  },
  {
    "text": "SSE instructions, which are the\nability to have an opcode run over several pieces of data\nat once, short vectors,",
    "start": "1436770",
    "end": "1445040"
  },
  {
    "text": "vector instructions, and a\n32-bit register that frankly I don't have a clue as\nto what it does.",
    "start": "1445040",
    "end": "1453409"
  },
  {
    "text": "So, fortunately, we don't\nhave to know all these. You can look at the architecture\nmanual if any of these become important.",
    "start": "1453410",
    "end": "1460250"
  },
  {
    "text": "So our goal is not to memorize\nthe x86 instruction set. That would be a punishment\nprobably worse than death.",
    "start": "1460250",
    "end": "1470390"
  },
  {
    "text": "The only thing worse would\nbe learning all of C++. ",
    "start": "1470390",
    "end": "1476960"
  },
  {
    "text": "So here's the general\nregisters. So there are basically\n64-bit registers.",
    "start": "1476960",
    "end": "1484260"
  },
  {
    "text": "And here's the mnemonics\nthat they have. So you can see is all very\nmnemonic, right? We got some of them\nthat are numbered.",
    "start": "1484260",
    "end": "1490110"
  },
  {
    "text": "How come they're all\njust not numbered? I mean come on, right? I know why. I know why. Don't tell me.",
    "start": "1490110",
    "end": "1496130"
  },
  {
    "text": " So what you get to do is look at\nand remember that there are",
    "start": "1496130",
    "end": "1501740"
  },
  {
    "text": "all these fun registers. And what they did is the x86\n64 architecture grew out of",
    "start": "1501740",
    "end": "1511520"
  },
  {
    "text": "the x86 which was 32-bit. Well, in fact, originally\nit was 16-bit.",
    "start": "1511520",
    "end": "1518340"
  },
  {
    "text": "And it's been extended twice\nto have more bits in the instruction word so\nthat now it's a",
    "start": "1518340",
    "end": "1523580"
  },
  {
    "text": "64-bit instruction word. And what they did in order to\nmake it so that they could run",
    "start": "1523580",
    "end": "1528620"
  },
  {
    "text": "legacy code more easily, which\nmight have been written with a smaller word size, is they've\noverlap so that the EAX",
    "start": "1528620",
    "end": "1537080"
  },
  {
    "text": "register, for example,\nis the low order 32-bits of the RAX register.",
    "start": "1537080",
    "end": "1543740"
  },
  {
    "text": "So what you do is you'll see\nthat R is the prefix that says, hey, that's a\n64-bit register.",
    "start": "1543740",
    "end": "1552182"
  },
  {
    "text": "E is the prefix that\nsays that it is-- Whoops, I made a\nmistake there.",
    "start": "1552182",
    "end": "1557920"
  },
  {
    "text": "Those should all be Es. ",
    "start": "1557920",
    "end": "1563530"
  },
  {
    "text": "Oh, no, sorry, no, there's\nare correct. These are R and then with\nD because these are the extended ones, yes.",
    "start": "1563530",
    "end": "1569760"
  },
  {
    "text": "So these are D. So R and D, that\nmeans also that it's 16.",
    "start": "1569760",
    "end": "1577410"
  },
  {
    "text": "So you can see just how easy\nthis is to remember without a cheat sheet, right? And then you go down\nto 15, et cetera.",
    "start": "1577410",
    "end": "1583540"
  },
  {
    "text": "And so you can go all the way\ndown to byte naming, the low order byte of the registers. In addition, it turns out\nthat that's not all.",
    "start": "1583540",
    "end": "1591450"
  },
  {
    "text": "But the high order byte of the\n16-bit registers are also available as independently\nnamed registers.",
    "start": "1591450",
    "end": "1600365"
  },
  {
    "start": "1600365",
    "end": "1605830"
  },
  {
    "text": "When you're using this in a C\nprogram, there's a convention that C has. And it's actually different\non Windows from on Linux.",
    "start": "1605830",
    "end": "1614570"
  },
  {
    "text": "Because there's no reason they\nshould make those things compatible. That would be too easy.",
    "start": "1614570",
    "end": "1621040"
  },
  {
    "text": "So instead they have\ndifferent ones. But the ones on Linux, this is\nessentially the structure.",
    "start": "1621040",
    "end": "1627480"
  },
  {
    "text": "What happens when you call a\nsubroutine is generally you're passing the arguments to the\nsubroutine in registers.",
    "start": "1627480",
    "end": "1635250"
  },
  {
    "text": "And in fact the first\nsix arguments are passed in these registers. RDI, you'll get very\nfamiliar with RDI.",
    "start": "1635250",
    "end": "1642790"
  },
  {
    "text": "Because that's where the first\nargument is always passed. And almost all your functions\nwill have a first argument,",
    "start": "1642790",
    "end": "1650530"
  },
  {
    "text": "except for the ones that have\nno arguments, and then the second arguments, the third,\nand so forth, and",
    "start": "1650530",
    "end": "1656080"
  },
  {
    "text": "then fifth and sixth. If you get more than six, then\nit turns out, then you start",
    "start": "1656080",
    "end": "1661550"
  },
  {
    "text": "passing arguments\nthrough memory. But otherwise the convention\nis that the arguments are",
    "start": "1661550",
    "end": "1667120"
  },
  {
    "text": "passed through registers. There are a couple of other\nimportant registers.",
    "start": "1667120",
    "end": "1672220"
  },
  {
    "text": "One here is the return value\nalways comes back in RAX.",
    "start": "1672220",
    "end": "1679320"
  },
  {
    "text": "So when a function returns,\nboom, that's where, RAX is where the value of\nthe return is.",
    "start": "1679320",
    "end": "1687210"
  },
  {
    "text": "There is a base pointer and a\nstack pointer which give you the stack frame so that when you\ndo a push and want to push",
    "start": "1687210",
    "end": "1695899"
  },
  {
    "text": "local variables those are\ntelling you the limits of your local variats. And we'll talk more about\nthat a little bit.",
    "start": "1695900",
    "end": "1701780"
  },
  {
    "text": "And then there are a variety\nof other ones. Some are callee saved and\nsome are caller saved.",
    "start": "1701780",
    "end": "1708880"
  },
  {
    "text": "And you can refer\nto this chart. And there are others similar to\nit in the various manuals.",
    "start": "1708880",
    "end": "1716000"
  },
  {
    "text": "Now, it gets pretty confusing,\nif this isn't confusing enough for the naming. ",
    "start": "1716000",
    "end": "1722960"
  },
  {
    "text": "Let's go on to how you\nname data types. And I think some of you have\nalready experienced this a little bit, the beauties\nof the data types.",
    "start": "1722960",
    "end": "1730960"
  },
  {
    "text": "So in C, they have all these\ndifferent data types such as",
    "start": "1730960",
    "end": "1736409"
  },
  {
    "text": "I'm listing here. And if you want to generate a\nconstant of that size, so",
    "start": "1736410",
    "end": "1742100"
  },
  {
    "text": "sometimes the compiler will\ncoerce a value from one type to another.",
    "start": "1742100",
    "end": "1747330"
  },
  {
    "text": "But sometimes it won't. And so if you want to have a\nconstant, and I've just given a couple things here, for\nexample, if you want it to be",
    "start": "1747330",
    "end": "1754410"
  },
  {
    "text": "just an int, you can just\nwrite the number. But if you want it to be\nunsigned, you have to",
    "start": "1754410",
    "end": "1760350"
  },
  {
    "text": "put a U after it. Or if you want it to be\na long, you have to put an L after it.",
    "start": "1760350",
    "end": "1766210"
  },
  {
    "text": "And for many things it'll get\ncoerced automatically to the right type because if you do\nan operator with another",
    "start": "1766210",
    "end": "1772320"
  },
  {
    "text": "argument it will be coerced\nto that type. But some of you got burned on\nsome of the shift things to",
    "start": "1772320",
    "end": "1777490"
  },
  {
    "text": "begin with because it wasn't\nclear what exactly the sizes.",
    "start": "1777490",
    "end": "1784570"
  },
  {
    "text": "Well, you can be explicit in\nC and name them using this",
    "start": "1784570",
    "end": "1790230"
  },
  {
    "text": "particular convention. This tells you how many bytes\nare being allocated for that",
    "start": "1790230",
    "end": "1797100"
  },
  {
    "text": "type in the x86 64 size.",
    "start": "1797100",
    "end": "1803110"
  },
  {
    "text": "So it's [? veted ?]\nhere for four. Now, long double\nis a funny one. It's actually allocate\n16 bytes, but only",
    "start": "1803110",
    "end": "1808910"
  },
  {
    "text": "10 of them are used. So basically there are six bytes\nthat get unused by that.",
    "start": "1808910",
    "end": "1815500"
  },
  {
    "text": "And I think that's for future\nexpansion so that they can have even wider extension.",
    "start": "1815500",
    "end": "1821700"
  },
  {
    "text": "This is generally used, of\ncourse, for floating point and so forth. Now, in the assembly language,\neach of the",
    "start": "1821700",
    "end": "1828480"
  },
  {
    "text": "operators has a suffix.",
    "start": "1828480",
    "end": "1834125"
  },
  {
    "text": "And sometimes, if it's a two\noperand instruction, it may, where it's taking things of\ndifferent sizes, it may have",
    "start": "1834125",
    "end": "1839820"
  },
  {
    "text": "two suffixes. But it has a suffix which is a\nsingle character that tells you what the size is that\nyou're working with.",
    "start": "1839820",
    "end": "1852049"
  },
  {
    "text": "So, for example,\nB is for byte. W is for word because\noriginally the",
    "start": "1852050",
    "end": "1857980"
  },
  {
    "text": "words were 16 bits. L is for long except that\nit's not a long",
    "start": "1857980",
    "end": "1865580"
  },
  {
    "text": "so don't get confused. L is not long. Long is a quad word,\nor Q, four bytes.",
    "start": "1865580",
    "end": "1875180"
  },
  {
    "text": "And then a float is an S. A\ndouble is a D. And a long double is a T.",
    "start": "1875180",
    "end": "1882100"
  },
  {
    "text": "So these you will get\nfamiliar with. And they're not so hard. But that doesn't mean you know\nthem right off the bat.",
    "start": "1882100",
    "end": "1888290"
  },
  {
    "text": "And it helps to have\na cheat sheet.  As I say, the main one not to\nget confused about is the Ls.",
    "start": "1888290",
    "end": "1896549"
  },
  {
    "text": "L means something different\nin x86 than it means in C.",
    "start": "1896550",
    "end": "1902630"
  },
  {
    "text": "So, for example, here we have a\nmove of, and because it's a",
    "start": "1902630",
    "end": "1909250"
  },
  {
    "text": "Q, I know that it is an eight\nbyte or a 64-bit operator.",
    "start": "1909250",
    "end": "1914540"
  },
  {
    "text": "And you can tell that also\nbecause it's using RBP and RAX, both of which are\n64-bit registers.",
    "start": "1914540",
    "end": "1922630"
  },
  {
    "text": "In fact, in assembly, you can\nactually write it without the Q, because the assembler can\ninfer when the Q isn't there",
    "start": "1922630",
    "end": "1933419"
  },
  {
    "text": "that, oh, this is a 64-bit\nregister, that's a 64-bit register, I bet he means\nmove 64-bits.",
    "start": "1933420",
    "end": "1941700"
  },
  {
    "text": "So it actually fills\nthat in sometimes. But sometimes you need\nto be explicit.",
    "start": "1941700",
    "end": "1947220"
  },
  {
    "text": "Question? AUDIENCE: What happens when\nyou actually put 64-bit registers but you only, and\nyou just put move [? b ?]",
    "start": "1947220",
    "end": "1953640"
  },
  {
    "text": "or something? Would it complain? Would it [UNINTELLIGIBLE]? CHARLES LEISERSON: Yeah,\nit would complain. Yeah, it would complain.",
    "start": "1953640",
    "end": "1958910"
  },
  {
    "text": "it'll say it's an improperly\nformed instruction, so, yeah.",
    "start": "1958910",
    "end": "1966750"
  },
  {
    "text": "And the other thing you\ncan do, of course, is just try it out. What happens if?",
    "start": "1966750",
    "end": "1971920"
  },
  {
    "text": "That's the great thing\nabout computers. It's easy to do what\nhappened if. Now, the instruction format is\ntypically an opcode followed",
    "start": "1971920",
    "end": "1980680"
  },
  {
    "text": "by an operand list. So the opcode is a short\nmnemonic identifying the type",
    "start": "1980680",
    "end": "1986760"
  },
  {
    "text": "of instruction that includes\ntypically the single character",
    "start": "1986760",
    "end": "1992230"
  },
  {
    "text": "suffix indicating\nthe data type. However, for some instructions\nit turns out you can have two",
    "start": "1992230",
    "end": "1998570"
  },
  {
    "text": "suffixes if the two-- Most instructions operate on\ndata types of the same size.",
    "start": "1998570",
    "end": "2005670"
  },
  {
    "text": "But some of them operate on two\ndifferent sizes in which",
    "start": "2005670",
    "end": "2011300"
  },
  {
    "text": "case you'll have two suffixes. If the suffix is missing, it can\ngenerally be inferred, as I mentioned.",
    "start": "2011300",
    "end": "2016710"
  },
  {
    "text": "Then the operand list is from\nzero, two, and very rarely three operands separated\nby commas.",
    "start": "2016710",
    "end": "2025840"
  },
  {
    "text": "Now, in the architecture manual,\nin fact, they say if you look at it, they'll show\nyou fourth operand.",
    "start": "2025840",
    "end": "2034789"
  },
  {
    "text": "And I said, four operands? This documentation says\nthere's only three. This one says there's four.",
    "start": "2034790",
    "end": "2040460"
  },
  {
    "text": "I went through the whole architecture manual last night. ",
    "start": "2040460",
    "end": "2046660"
  },
  {
    "text": "Every time it says four\noperands, it says N/A, not applicable. So I think it's just there\nreserved or something.",
    "start": "2046660",
    "end": "2054540"
  },
  {
    "text": "But anyway there is no fourth\noperand as far as I can tell.",
    "start": "2054540",
    "end": "2060070"
  },
  {
    "text": "Now, one of the operands\nis the destination.",
    "start": "2060070",
    "end": "2065690"
  },
  {
    "text": "And here's where we start to\nget into some differences. There's actually two standard\nformats for assembly language",
    "start": "2065690",
    "end": "2072138"
  },
  {
    "text": "that are generally called Intel\nand AT&T. So AT&T was the original Unix system.",
    "start": "2072139",
    "end": "2081469"
  },
  {
    "text": "And Intel is what Intel uses\nfor their assembler. They do the destination operand\nin the opposite order.",
    "start": "2081469",
    "end": "2091388"
  },
  {
    "text": "So AT&T, it puts the\ndestination last. In Intel it puts the\ndestination first.",
    "start": "2091389",
    "end": "2097910"
  },
  {
    "text": "So when you're reading\ndocumentation, you can read the Intel documentation. You just have to remember to\nflip it around if you're",
    "start": "2097910",
    "end": "2104020"
  },
  {
    "text": "actually writing it as we will\nbe using the AT&T format. Almost everybody uses\nAT&T as far as I",
    "start": "2104020",
    "end": "2109860"
  },
  {
    "text": "can tell except Intel. So Intel's assembler does\nit the other way around.",
    "start": "2109860",
    "end": "2116740"
  },
  {
    "text": "And actually now GCC will\nactually, you can give it a directive to say I'm now\nswitching to writing it in",
    "start": "2116740",
    "end": "2128190"
  },
  {
    "text": "Intel assembler. So you can actually go back and\nforth between the two if you happen to borrow some\nassembly language code from",
    "start": "2128190",
    "end": "2134079"
  },
  {
    "text": "somebody else. So one of them is\nthe destination. The other operations are\nread-only, so const in the C++",
    "start": "2134080",
    "end": "2142680"
  },
  {
    "text": "terminology. They're read-only. So it's always the case that\nonly one of them is going to",
    "start": "2142680",
    "end": "2149140"
  },
  {
    "text": "be modified. And that's the one that's the\ndestination of the operation.",
    "start": "2149140",
    "end": "2154770"
  },
  {
    "text": "In addition in assembler, there\nare what are called directives. Besides the instructions,\nthere are directives.",
    "start": "2154770",
    "end": "2161840"
  },
  {
    "text": "So first of all there are\nthings like labels. You can take any instruction\nand put an identifier and a",
    "start": "2161840",
    "end": "2167780"
  },
  {
    "text": "colon, and that becomes then\na way of naming that place in your code.",
    "start": "2167780",
    "end": "2174040"
  },
  {
    "text": "So, for example, jump\ninstructions want to know to where they're jumping. And rather than having to know\nupfront what the address is,",
    "start": "2174040",
    "end": "2183050"
  },
  {
    "text": "the assembler will calculate\nwhat that address is and everywhere you put x, it'll\nput in the right value.",
    "start": "2183050",
    "end": "2189420"
  },
  {
    "text": "And you get to name it\nsymbolically rather than as an absolute machine location.",
    "start": "2189420",
    "end": "2195700"
  },
  {
    "text": "There are storage directives. So, for example, .space 20\nsays allocate 20 bytes at",
    "start": "2195700",
    "end": "2201559"
  },
  {
    "text": "location x. .long says store the\nconstant 172 at y.",
    "start": "2201560",
    "end": "2209890"
  },
  {
    "text": "It's being stored at y because\nI said y is here. And asciz gives you a string\nthat's zero terminated.",
    "start": "2209890",
    "end": "2217100"
  },
  {
    "text": "So the standard for strings\nis zero terminated. You can also, there's one\nthat says give me a",
    "start": "2217100",
    "end": "2223390"
  },
  {
    "text": "nonterminated string. So you can have fun with\nthat if you like that.",
    "start": "2223390",
    "end": "2228740"
  },
  {
    "text": "The align directive says make\nsure that as you're going through, so what's happening\nis the assembler is going",
    "start": "2228740",
    "end": "2234039"
  },
  {
    "text": "through there, is it's laying\nthese things out in memory typically sequentially, the way\nyou wrote it down in the",
    "start": "2234040",
    "end": "2239299"
  },
  {
    "text": "program, in the assembly\nlanguage program. If you say align eight, it\nsays advance whatever the",
    "start": "2239300",
    "end": "2246460"
  },
  {
    "text": "pointer is of where the next\nthing is going to be put to be a multiple of eight.",
    "start": "2246460",
    "end": "2251910"
  },
  {
    "text": "And that way you don't run the\nrisk of where you declare a character and then you say, OK,\nand now I want a long or",
    "start": "2251910",
    "end": "2259550"
  },
  {
    "text": "something, and it's not aligned\nin a way that the eight bytes correspond to a\nmultiple of eight the way you",
    "start": "2259550",
    "end": "2268700"
  },
  {
    "text": "need to in order for\nthe instructions to properly work on them. So generally, although, we\nhave byte pointers, most",
    "start": "2268700",
    "end": "2276349"
  },
  {
    "text": "instructions only work\non aligned values. ",
    "start": "2276350",
    "end": "2281760"
  },
  {
    "text": "And for some of them that work\non unaligned values, they're generally slower than the ones\nthat work on aligned values.",
    "start": "2281760",
    "end": "2289760"
  },
  {
    "text": "There are also segment\ndirectives. So in memory when you run your\nprogram, the executing program",
    "start": "2289760",
    "end": "2296510"
  },
  {
    "text": "starts with the program text\ndown at the bottom of memory. And then it has fixed data\nthat's not going to change,",
    "start": "2296510",
    "end": "2305830"
  },
  {
    "text": "static allocation of data. And then it's got heap, which is\ndynamically allocated data.",
    "start": "2305830",
    "end": "2310869"
  },
  {
    "text": "And then it's got stack. The stack grows downward, and\nthe heap grows upward.",
    "start": "2310870",
    "end": "2316230"
  },
  {
    "text": "By saying something like text,\nit says make sure that the next stuff I'm putting goes\ninto the text segment.",
    "start": "2316230",
    "end": "2322010"
  },
  {
    "text": "So that's generally where\nyou put your code. Saying it's in data says make\nsure it goes in here.",
    "start": "2322010",
    "end": "2327589"
  },
  {
    "text": "So you may want to have\na table, for example. So, for example, from pentominos\nyou might have a",
    "start": "2327590",
    "end": "2334230"
  },
  {
    "text": "table there. There's going to be\na fixed table. You're never going to\nchange it during the running of the program. Put it in the data segment.",
    "start": "2334230",
    "end": "2340300"
  },
  {
    "text": " And then there's also things\nlike scope and linkage",
    "start": "2340300",
    "end": "2346060"
  },
  {
    "text": "directives. So saying .global, and you can\neither spell it incorrectly, as I have here, or with the a,\nit's the same thing for the",
    "start": "2346060",
    "end": "2354309"
  },
  {
    "text": "GNU assembler anyway. It says make the symbol fib\nexternally visible.",
    "start": "2354310",
    "end": "2361130"
  },
  {
    "text": "And that makes sure that it goes\ninto the symbol table so that debuggers and things\ncan look at it.",
    "start": "2361130",
    "end": "2366910"
  },
  {
    "text": "And there's a lot more of these\nin the assembler manual, that link that I showed you to\nbefore, tells you what all the",
    "start": "2366910",
    "end": "2373140"
  },
  {
    "text": "directives mean. So that when you're looking at\ncode, which mostly you'll be reading it, making a few changes\nto it, you can know",
    "start": "2373140",
    "end": "2378680"
  },
  {
    "text": "what things mean.  So the opcode examples,\nhere's some examples.",
    "start": "2378680",
    "end": "2387020"
  },
  {
    "text": "There are things like\nmov, push, and pop. So, for example, here movslq,\nthis is an interesting one",
    "start": "2387020",
    "end": "2393970"
  },
  {
    "text": "because it's moving. The s says extend the sign\nbecause I'm moving from a long",
    "start": "2393970",
    "end": "2401000"
  },
  {
    "text": "from a 32-bit word to a 64-bit\nword, from 4-bits to 8-bits.",
    "start": "2401000",
    "end": "2409930"
  },
  {
    "text": "So that's why this one takes\ntwo suffixes moving from, you'll notice, a 32-bit register\nto a 64-bit register.",
    "start": "2409930",
    "end": "2417470"
  },
  {
    "text": " So you have to be careful. This is something I got caught\nup in the other day.",
    "start": "2417470",
    "end": "2424840"
  },
  {
    "text": "The results of 32-bit operations\nare implicitly extended to 64-bit values.",
    "start": "2424840",
    "end": "2430619"
  },
  {
    "text": "So if you store something into\nEAX, for example, it automatically zeroes out the\nhigh order 32-bits of RAX.",
    "start": "2430620",
    "end": "2440220"
  },
  {
    "text": "Because that's the one that\nit's embedded in. However, that's not true for\nthe eight and 16-bit",
    "start": "2440220",
    "end": "2446339"
  },
  {
    "text": "operations. If you store into an 8-bit\nfield, an 8-bit part of the",
    "start": "2446340",
    "end": "2452910"
  },
  {
    "text": "register, it does not\nzero out the high order bits of the remainder.",
    "start": "2452910",
    "end": "2458120"
  },
  {
    "text": "So you just have to be careful\nwhen you're doing that. Most of these are things, by the\nway, that is more cryptic",
    "start": "2458120",
    "end": "2466370"
  },
  {
    "text": "when you're looking at stuff. It's like, oh, how come it's,\ngee, I thought I had, I'm returning a double word, but\nit looks here like it's",
    "start": "2466370",
    "end": "2473770"
  },
  {
    "text": "returning a 32-bit word,\nhow come I thought I was returning 64-- Well, the answer is because\nit knows the high",
    "start": "2473770",
    "end": "2480060"
  },
  {
    "text": "order bits are zero. So it's using the shorter\ninstructions. ",
    "start": "2480060",
    "end": "2486230"
  },
  {
    "text": "And yet it still is having the\nimpact on the 64-bit register.",
    "start": "2486230",
    "end": "2493780"
  },
  {
    "text": "They're all the arithmetic\nand logical operations. So subtracting, once again,\nthe destination is second.",
    "start": "2493780",
    "end": "2500810"
  },
  {
    "text": "So typically these are\ntwo operator things. So you always have the\ndestination occurs both at the",
    "start": "2500810",
    "end": "2505819"
  },
  {
    "text": "beginning and on the left hand\nside and the right hand side, things like shifts and rotates,\ncontrol transfer, so",
    "start": "2505820",
    "end": "2513026"
  },
  {
    "text": "call which does a subroutine\njump, return from a subroutine, a jump instruction\nthat just says make the next",
    "start": "2513027",
    "end": "2520650"
  },
  {
    "text": "instruction the thing that\nyou're pointing to, and very important, the jump conditionals\nwhere the condition is a whole bunch of\nkeys that are things like",
    "start": "2520650",
    "end": "2528460"
  },
  {
    "text": "greater than, less than, and so\nforth, and different ones for signed and unsigned\nand so forth.",
    "start": "2528460",
    "end": "2536400"
  },
  {
    "text": "So typically the condition is\ncomputed by using a compare instruction. I probably should have put CNP\non here as well, but I didn't.",
    "start": "2536400",
    "end": "2544570"
  },
  {
    "text": "But the CNP instruction is\nusually what you use to compare two things and then you\nseparately jump on what",
    "start": "2544570",
    "end": "2550900"
  },
  {
    "text": "the condition is. There's a pretty nice\nwebsite that has",
    "start": "2550900",
    "end": "2557330"
  },
  {
    "text": "most of these opcodes. However, they only deal\nwith the old x86",
    "start": "2557330",
    "end": "2564590"
  },
  {
    "text": "without the 64-bit extension. And they use the Intel syntax. But it's really convenient.",
    "start": "2564590",
    "end": "2570569"
  },
  {
    "text": "Because they've done a nice\njob of making a quick jump table where you can just\ngo, look up the",
    "start": "2570570",
    "end": "2577220"
  },
  {
    "text": "opcode, and pop it up. Otherwise you can just look\nat them in the manual.",
    "start": "2577220",
    "end": "2582560"
  },
  {
    "text": "Anyway, that's kind of\na convenient place. And, as I say, just beware\nbecause it's 32-bit only, and it's Intel syntax.",
    "start": "2582560",
    "end": "2588349"
  },
  {
    "text": "Most of the instructions\ngot extended. I mean it's like, OK, if you do\nit for eight and 16 and 32,",
    "start": "2588350",
    "end": "2595240"
  },
  {
    "text": "the operation is not going to\nchange that much to go to 64. A few of them do, however.",
    "start": "2595240",
    "end": "2600780"
  },
  {
    "text": "Now, the operands, Intel\nsupports, the x86, which is",
    "start": "2600780",
    "end": "2607520"
  },
  {
    "text": "Intel and AMD, typically,\nsupport all kinds of addressing modes.",
    "start": "2607520",
    "end": "2613870"
  },
  {
    "text": "The rule is that only\none operand, however, can address memory.",
    "start": "2613870",
    "end": "2621060"
  },
  {
    "text": "So you have to pick which is\nthe operand that's going to address memory if you have\nmultiple operands. You can't have both operands.",
    "start": "2621060",
    "end": "2627270"
  },
  {
    "text": "So you can't add two\nthings in memory. You always have to take\nsomething for memory and bring",
    "start": "2627270",
    "end": "2632800"
  },
  {
    "text": "it into a register and then\nstore it back out. So the simplest one is two\nregister instructions.",
    "start": "2632800",
    "end": "2640609"
  },
  {
    "text": "Here I've basically\nmarked the-- What have I marked here? I guess I marked--",
    "start": "2640610",
    "end": "2647515"
  },
  {
    "text": "I don't know. Down here I was marking\nmemory. I'm not sure what I was\nmarking up here. Because they're both\nregisters. ",
    "start": "2647515",
    "end": "2654270"
  },
  {
    "text": "But in any case, this is just\nadding RBX into RAX. And so it takes the contents\nof RBX adds it in",
    "start": "2654270",
    "end": "2661849"
  },
  {
    "text": "the contents of RAX. There's something that's\ncalled direct. So this is, it says, where you\nmove, x is some constant",
    "start": "2661850",
    "end": "2671780"
  },
  {
    "text": "value, and you move it, the\ncontents of it, into RDI.",
    "start": "2671780",
    "end": "2677130"
  },
  {
    "text": "So if x, for example, is a\nlocation that you've stored a value in, you can say move\nwhatever is the value at that",
    "start": "2677130",
    "end": "2682570"
  },
  {
    "text": "location into RDI. Immediate says, which usually is\npreceded by a dollar sign,",
    "start": "2682570",
    "end": "2691240"
  },
  {
    "text": "says move the address of it,\nmove that as a constant. So x has a value,\nmove that value.",
    "start": "2691240",
    "end": "2697970"
  },
  {
    "text": "So if you say $3, then\nyou'll move the constant three into RDI.",
    "start": "2697970",
    "end": "2703740"
  },
  {
    "text": "If you said mov3 this, you're\ngoing to move the contents of location three in memory.",
    "start": "2703740",
    "end": "2711030"
  },
  {
    "text": "So that's the difference between\ndirect and immediate.",
    "start": "2711030",
    "end": "2716250"
  },
  {
    "text": "So the dollar sign says\nyou're taking that as a literal constant.",
    "start": "2716250",
    "end": "2721349"
  },
  {
    "text": "And the direct says you're\nactually going to memory and fetching it.",
    "start": "2721350",
    "end": "2726470"
  },
  {
    "text": "Then things start getting\ninteresting. Register indirect says, in\nthis case, the thing that",
    "start": "2726470",
    "end": "2733215"
  },
  {
    "text": "you're going to access\nis the thing pointed to by that register. So don't move, in this case, RBX\ninto RAX, move it to the",
    "start": "2733215",
    "end": "2742610"
  },
  {
    "text": "memory location that\nRAX is pointing to.",
    "start": "2742610",
    "end": "2747920"
  },
  {
    "text": "Then you can do register index\nwhich says, well, it's pointing to it, but I want\ndisplaced 172-bytes off of",
    "start": "2747920",
    "end": "2757299"
  },
  {
    "text": "that location, of whatever\nthis is pointing to. So, for example, if you have a\npointer to a record, you can",
    "start": "2757300",
    "end": "2764470"
  },
  {
    "text": "then have just a single pointer\nand address all the fields just by doing register\nindirect to the different",
    "start": "2764470",
    "end": "2770320"
  },
  {
    "text": "fields using that\nsame register. ",
    "start": "2770320",
    "end": "2775430"
  },
  {
    "text": "Then there is, it actually-- I skipped, actually, a few in\nhere that are subsets of this.",
    "start": "2775430",
    "end": "2781220"
  },
  {
    "text": "This is, I think, the most\ncomplicated one that I know. It's base index scale\ndisplacement where base and",
    "start": "2781220",
    "end": "2787520"
  },
  {
    "text": "index are registers, the scale\nis two, four, eight, and if it's not there, it\nimplies one.",
    "start": "2787520",
    "end": "2793050"
  },
  {
    "text": "The displacement is eight,\n16, or a 32-bit value. And it says take RD--",
    "start": "2793050",
    "end": "2805260"
  },
  {
    "text": "oh, I had put the math on here,\nand then I guess I lost it-- it says take RDX, multiply\nit by eight, add RDI,",
    "start": "2805260",
    "end": "2814640"
  },
  {
    "text": "and add 172. [WHISTLE]. ",
    "start": "2814640",
    "end": "2820290"
  },
  {
    "text": "So, anyway, you can look\nin the manual. So you'll see some of these\ninstructions being generated.",
    "start": "2820290",
    "end": "2825859"
  },
  {
    "text": "Generally, you're not going to\ngenerate these instructions. So when you see them generated,\nyou can see it. And then, and this is actually\nnew, it's not in the x86.",
    "start": "2825860",
    "end": "2834220"
  },
  {
    "text": "It has this instruction pointer\nwhere you can actually access where the current program\ncounter is pointing,",
    "start": "2834220",
    "end": "2842350"
  },
  {
    "text": "where it is in the code, and\nstore that value, in this case indexed by six, into RAX.",
    "start": "2842350",
    "end": "2848660"
  },
  {
    "text": "So you can do it relative\nwhere this has to be a 32-bit constant. And what's good about that is\nit allows you then to write",
    "start": "2848660",
    "end": "2857210"
  },
  {
    "text": "code where you can do things\nlike jump to something that's relative to the program\ncounter.",
    "start": "2857210",
    "end": "2862690"
  },
  {
    "text": "And that lets you put the code\nanywhere in memory, and it still has the same behavior.",
    "start": "2862690",
    "end": "2868010"
  },
  {
    "text": "Because you're going relative\nto where that code is rather than to an absolute location.",
    "start": "2868010",
    "end": "2874079"
  },
  {
    "text": "So it allows the code\nto be relocatable. ",
    "start": "2874080",
    "end": "2880579"
  },
  {
    "text": "So here's-- Yeah, questions, yeah sure. AUDIENCE: Why was it the index\nregisters, when you have the",
    "start": "2880580",
    "end": "2887044"
  },
  {
    "text": "numbering for the register,\nwhat does that mean again? CHARLES LEISERSON: The number\nbefore the register? AUDIENCE: In the instruction\n[UNINTELLIGIBLE],",
    "start": "2887044",
    "end": "2893099"
  },
  {
    "text": "that's 60 for RID. CHARLES LEISERSON: OK, or\nwhatever, whenever it's here,",
    "start": "2893099",
    "end": "2898610"
  },
  {
    "text": "it's basically saying,\nadd that value to the contents of RAX.",
    "start": "2898610",
    "end": "2905900"
  },
  {
    "text": "And so the same thing here, add\nsix to the contents of the instruction. So this is six bytes ahead of me\nin the instruction stream.",
    "start": "2905900",
    "end": "2915510"
  },
  {
    "text": "OK? So you can actually say, well,\nwhat's that instruction ahead of me in the instructions\nstream?",
    "start": "2915510",
    "end": "2921380"
  },
  {
    "text": "OK?  So here's some examples of\nessentially the same code and",
    "start": "2921380",
    "end": "2930490"
  },
  {
    "text": "how it gets compiled. So here we're going to have\na fou1, fou2, fou3.",
    "start": "2930490",
    "end": "2937420"
  },
  {
    "text": "And in this case we declare\nx, y, and z to be unsigned integers.",
    "start": "2937420",
    "end": "2942910"
  },
  {
    "text": "We set them to some values. And we just simply say\nreturn x plus y or z,",
    "start": "2942910",
    "end": "2950900"
  },
  {
    "text": "bitwise OR with z. If you look at what the code is\nthat's generated, it says",
    "start": "2950900",
    "end": "2956450"
  },
  {
    "text": "move the constant 45 into EAX. ",
    "start": "2956450",
    "end": "2962740"
  },
  {
    "text": "Why does it do that? Well, let's just see. Well, the compiler figures out\nthat it knows what 35, seven,",
    "start": "2962740",
    "end": "2968930"
  },
  {
    "text": "and 45 are. It computes x plus y. That's 41. If you take 41 bitwise OR with\n45, it turns out it's masking",
    "start": "2968930",
    "end": "2977930"
  },
  {
    "text": "the same bits, that's 45. So the compiler actually can\nfigure this out that all it",
    "start": "2977930",
    "end": "2983600"
  },
  {
    "text": "has to do is return 45\nin a 64-bit register. Ah, but here it's returning\nit in a 32-bit register.",
    "start": "2983600",
    "end": "2991620"
  },
  {
    "text": "What happened? It's not obeying the type. The type is supposed\nto be 64-bits, but that's a 32-bit register.",
    "start": "2991620",
    "end": "2998460"
  },
  {
    "text": "Oh, yeah, that's this thing\nwhere it automatically zeroes out the high order bits.",
    "start": "2998460",
    "end": "3003539"
  },
  {
    "text": "And it uses this instruction,\nbecause this is a shorter instruction than if\nit did the RAX.",
    "start": "3003540",
    "end": "3010030"
  },
  {
    "text": "It could do the same thing with\nRAX, but it would be more bytes of instruction. So they saved a couple bytes of\ninstruction by doing that.",
    "start": "3010030",
    "end": "3017019"
  },
  {
    "text": "So people follow what\nhappened there? Let's take a look\nat the next one. Here it's the same code\njust let's pass",
    "start": "3017020",
    "end": "3023770"
  },
  {
    "text": "those things as arguments. Well, if you remember the\ncalling convention, parameter",
    "start": "3023770",
    "end": "3029279"
  },
  {
    "text": "one is in RDI, parameter\ntwo is in RSI, and parameter three is in RDX.",
    "start": "3029280",
    "end": "3035579"
  },
  {
    "text": "So I don't expect you\nto remember that off the top your head. But we have the cheat sheet, and\nyou can figure that out.",
    "start": "3035580",
    "end": "3041020"
  },
  {
    "text": "So here's what it does is, oh\nmy goodness, what is that instruction? This is actually a computation\nof effective address.",
    "start": "3041020",
    "end": "3051070"
  },
  {
    "text": "So the effective address is\nbasically saying, and it's using one of these funny\nindexing modes.",
    "start": "3051070",
    "end": "3056610"
  },
  {
    "text": "So what this is actually doing\nis it's actually adding these two numbers together, the\nvalues stored in those",
    "start": "3056610",
    "end": "3065690"
  },
  {
    "text": "locations together, and\nstoring it into RAX. And then it's then OR-ing RDX,\nwhat's in RDX, with RAX and",
    "start": "3065690",
    "end": "3076990"
  },
  {
    "text": "then returning. Remember that RAX is where the\nresult is always going to be.",
    "start": "3076990",
    "end": "3082280"
  },
  {
    "text": "So the result is always\nreturned in RAX. So you can see you have to do a\nlittle bit more complicated",
    "start": "3082280",
    "end": "3087359"
  },
  {
    "text": "addressing in order to pull them\nout as parameters than if it could actually figure out\nwhat the numbers are.",
    "start": "3087360",
    "end": "3092690"
  },
  {
    "text": "Last example here is I declared\nthese things before I ever got their globals.",
    "start": "3092690",
    "end": "3098760"
  },
  {
    "text": "And so I declared them\nbefore I ever got in. So that means since they're\nglobals, they have a fixed place in memory.",
    "start": "3098760",
    "end": "3104200"
  },
  {
    "text": "And so the code that's generated\nis moving, it turns out it allocates them right\nnearby the instructions here.",
    "start": "3104200",
    "end": "3113790"
  },
  {
    "text": "And so what it does is it has\nactually a relative offset for x, relativity instruction\npointer, put that in RAX, add",
    "start": "3113790",
    "end": "3123490"
  },
  {
    "text": "the offset of x into it, and\nthen OR it with the offset of z, and then return.",
    "start": "3123490",
    "end": "3130990"
  },
  {
    "text": "And so there the constants are\nactually stored right nearby in the code so that they can\nuse this relative offset.",
    "start": "3130990",
    "end": "3139200"
  },
  {
    "text": "And the compiler figures out, or\nthe assembler figures out, exactly what the offset is\nthat it actually needs to",
    "start": "3139200",
    "end": "3146640"
  },
  {
    "text": "substitute for y so that it can\nbe a relative offset from the current instruction\npointer.",
    "start": "3146640",
    "end": "3152119"
  },
  {
    "text": "Notice that, for example,\nthat's going to change depending upon the\nvalue of y here. It's going to change compared to\nif I accessed y down here.",
    "start": "3152120",
    "end": "3159700"
  },
  {
    "text": "It would be a different\ninstruction pointer at this point. So it actually just goes but\nit computes what the",
    "start": "3159700",
    "end": "3165020"
  },
  {
    "text": "difference is so it knows\nwhat the distance is.",
    "start": "3165020",
    "end": "3170710"
  },
  {
    "text": "It can compute that at compile\ntime, and then at execution time it just uses whatever\nconstant goes in there.",
    "start": "3170710",
    "end": "3177440"
  },
  {
    "text": "So the important thing here is\njust to notice that the code depends upon where x, y,\nand z are allocated. ",
    "start": "3177440",
    "end": "3186010"
  },
  {
    "text": "So the first thing to actually\nlook at good code is to",
    "start": "3186010",
    "end": "3191420"
  },
  {
    "text": "understand the calling\nconvention that's used by the compiler. ",
    "start": "3191420",
    "end": "3199950"
  },
  {
    "text": "And here are the basics of it. So the register RSP points\nto the function call stack in memory.",
    "start": "3199950",
    "end": "3206619"
  },
  {
    "text": "And the call stack grows\ndownward in memory, like in that little map I showed you\nbefore, so that as you push",
    "start": "3206620",
    "end": "3213080"
  },
  {
    "text": "things onto the stack they're\ngetting lower numbered not higher numbered. ",
    "start": "3213080",
    "end": "3220260"
  },
  {
    "text": "The call instruction pushes\nthe current instruction pointer onto the stack, jumps\nto the call target operand,",
    "start": "3220260",
    "end": "3227780"
  },
  {
    "text": "which is basically the address\nof the thing you're calling. So when you do a call,\nit saves your return",
    "start": "3227780",
    "end": "3235020"
  },
  {
    "text": "address on the stack. The return instruction pops\nthe return address off the",
    "start": "3235020",
    "end": "3240520"
  },
  {
    "text": "stack and returns\nto the caller. It basically says, oh, I know\nwhere the return address is. I slam that into the current\ninstruction pointer, and that",
    "start": "3240520",
    "end": "3249790"
  },
  {
    "text": "becomes the next instruction\nthat's executed. Now, there are some software\nconventions that are used",
    "start": "3249790",
    "end": "3256079"
  },
  {
    "text": "that's helpful to know. Besides those instruction\nregisters, some of the registers are expected to be\nsaved by the caller, some are",
    "start": "3256080",
    "end": "3263300"
  },
  {
    "text": "expected to be saved\nby the callee. You're free to violate this in\nyour own little piece of code",
    "start": "3263300",
    "end": "3271460"
  },
  {
    "text": "as long as if you're calling\nsomething else, you're obeying it.",
    "start": "3271460",
    "end": "3277260"
  },
  {
    "text": "So you don't have obey this\nconvention in the code you write unless you want to\ninteroperate with other stuff.",
    "start": "3277260",
    "end": "3284760"
  },
  {
    "text": "So if you, for example, have a\nleaf procedure, you can decide for that leaf procedure, oh,\nI'm going to make something",
    "start": "3284760",
    "end": "3290880"
  },
  {
    "text": "callee saved that was caller\nsaved or whatever as long as by the time you return you've\ncleaned everything up for the",
    "start": "3290880",
    "end": "3296840"
  },
  {
    "text": "rest of the world. So these are conventions. But for the most part, you're\nnot going to violate these,",
    "start": "3296840",
    "end": "3303575"
  },
  {
    "text": "and the code that the compiler\ngenerates doesn't violate these because it expects\neverything to interoperate.",
    "start": "3303575",
    "end": "3309460"
  },
  {
    "text": "So here's how the subroutine\nlinkage works. We're going to do an example\nhere where function A calls",
    "start": "3309460",
    "end": "3315100"
  },
  {
    "text": "function B which will call\nfunction C. And right now, we're at the point we're\nexecuting B. And so on the",
    "start": "3315100",
    "end": "3321450"
  },
  {
    "text": "stack are the arguments that\nwere passed from A to B that",
    "start": "3321450",
    "end": "3329599"
  },
  {
    "text": "did not fit within\nthe registers. So normally most of the arguments are within registers. But if you exceed the six\nregisters then, because you",
    "start": "3329600",
    "end": "3338750"
  },
  {
    "text": "have a long argument\nlist, then it gets passed on the stack. And here's where\nit gets passed. The next thing is B's\nreturn address.",
    "start": "3338750",
    "end": "3345890"
  },
  {
    "text": "This is the thing that\ngot smashed in there when you did the call. It got pushed onto the stack.",
    "start": "3345890",
    "end": "3351619"
  },
  {
    "text": "And then there's what's called a\nbase pointer for A. And this is the way that A ends up\naccessing its local variables.",
    "start": "3351620",
    "end": "3357790"
  },
  {
    "text": "And then there's a separate\nregion here where it's going to put arguments from B to B's\ncallees if they exceed the six",
    "start": "3357790",
    "end": "3366920"
  },
  {
    "text": "registers, if any of the things\nthat B is calling",
    "start": "3366920",
    "end": "3373440"
  },
  {
    "text": "require more than the\nsix registers. So let's just take a look. So function B can access its\nnonregister values by indexing",
    "start": "3373440",
    "end": "3382320"
  },
  {
    "text": "off of RBP. So these we say, these are\nin a linkage block.",
    "start": "3382320",
    "end": "3388480"
  },
  {
    "text": "And the reason is because\nit's actually part of A's frame as well. It's a shared part of the frame\nwhere A stores it into",
    "start": "3388480",
    "end": "3395380"
  },
  {
    "text": "memory and then B's going to\nfetch it out of memory. And that's the linkage block. So this is positive in memory.",
    "start": "3395380",
    "end": "3401900"
  },
  {
    "text": "So if I use a positive offset,\nI then go up to getting the",
    "start": "3401900",
    "end": "3407500"
  },
  {
    "text": "arguments from A. Then it can\naccess its local variables",
    "start": "3407500",
    "end": "3415820"
  },
  {
    "text": "from the base point with a\nnegative offset because we're growing down in memory. ",
    "start": "3415820",
    "end": "3422790"
  },
  {
    "text": "Now, if it wants to call C, what\nit does is it places the",
    "start": "3422790",
    "end": "3428640"
  },
  {
    "text": "nonregister arguments into the\nreserved linkage block here,",
    "start": "3428640",
    "end": "3435680"
  },
  {
    "text": "which are arguments from\nB to B's callees. And that once again acts just as\nif they're local variables.",
    "start": "3435680",
    "end": "3441890"
  },
  {
    "text": "It's positive index off of RBP,\nsorry, negative offset",
    "start": "3441890",
    "end": "3448529"
  },
  {
    "text": "off of RBP. So it pushes those things into\nthe argument, into that",
    "start": "3448530",
    "end": "3453860"
  },
  {
    "text": "region, if it needs to\nuse that region. Then we actually, once it's done\nthat, we have the call.",
    "start": "3453860",
    "end": "3462130"
  },
  {
    "text": "So B calls C which saves the\nreturn address for B on the stack, so it saves it on the\nstack, and then transfers",
    "start": "3462130",
    "end": "3472440"
  },
  {
    "text": "control to C. So now it starts\nexecuting C's code.",
    "start": "3472440",
    "end": "3480119"
  },
  {
    "text": "And what does C do? So C is going to have to advance\nthese pointers to refer to its region\nrather than B's.",
    "start": "3480120",
    "end": "3488720"
  },
  {
    "text": "It does it by saving B's base\npointer on the stack. So it saves this pointer here so\nthat it can restore it when",
    "start": "3488720",
    "end": "3495695"
  },
  {
    "text": "it returns. It advances, it sets its new\nbase pointer to be where the",
    "start": "3495695",
    "end": "3501010"
  },
  {
    "text": "stack pointer is now and then\nadvances the stack pointer to allocate space for C's local\nvariables and linkage blocks.",
    "start": "3501010",
    "end": "3509520"
  },
  {
    "text": "Watch, here we go. ",
    "start": "3509520",
    "end": "3516690"
  },
  {
    "text": "So that ends up being\nC's frame. So notice that B's frame and C's\nframe are overlapping in",
    "start": "3516690",
    "end": "3523359"
  },
  {
    "text": "the linkage block\nbetween them. ",
    "start": "3523360",
    "end": "3529220"
  },
  {
    "text": "Now, if a function never\nperforms stack allocations except during function calls,\nthere's a great compile time",
    "start": "3529220",
    "end": "3537090"
  },
  {
    "text": "optimization that the compiler\nwill often do. And what it will do\nis realize that",
    "start": "3537090",
    "end": "3543350"
  },
  {
    "text": "this distance is constant. So, therefore, it doesn't\nneed RBP.",
    "start": "3543350",
    "end": "3550450"
  },
  {
    "text": "It can just do the math and\nindex everything off of RSP as long as RSP is always the same,\nfor example for C, when",
    "start": "3550450",
    "end": "3559440"
  },
  {
    "text": "C is executing. There's certain C commands\nlike [? alaka ?] which changed the\nstack pointer.",
    "start": "3559440",
    "end": "3566309"
  },
  {
    "text": "If you use those, the compiler\ncan't do that optimization. But if the storage on the stack\nnever changes for a",
    "start": "3566310",
    "end": "3576200"
  },
  {
    "text": "given frame, then it's free\nto make this optimization. So you'll see code where RBP\nhas been optimized away.",
    "start": "3576200",
    "end": "3582360"
  },
  {
    "text": " How about some questions\nbefore we go",
    "start": "3582360",
    "end": "3588340"
  },
  {
    "text": "on and do an example. Yeah? AUDIENCE: [INAUDIBLE] should there be A's return\naddress, where you try to",
    "start": "3588340",
    "end": "3596624"
  },
  {
    "text": "[INAUDIBLE]? CHARLES LEISERSON: Up? Oh, this should be,\nsorry, this should",
    "start": "3596624",
    "end": "3602359"
  },
  {
    "text": "be A's return address. Yes, you're right. OK, good, typo. ",
    "start": "3602360",
    "end": "3609089"
  },
  {
    "text": "Is somebody catching\nmy typos to--  OK, yep, a good one, that should\nbe A's return address.",
    "start": "3609090",
    "end": "3616640"
  },
  {
    "text": "Sorry about that. This is B's return address. Any other questions? That's good.",
    "start": "3616640",
    "end": "3622070"
  },
  {
    "text": "That means you understand\nsomething. Hooray. ",
    "start": "3622070",
    "end": "3629980"
  },
  {
    "text": "So let's do an example. So here's my fib example. And I compiled this with\nminus oh zero.",
    "start": "3629980",
    "end": "3638150"
  },
  {
    "text": "Because when I compiled it\nwith minus oh three, I couldn't understand\nwhat was going on.",
    "start": "3638150",
    "end": "3644650"
  },
  {
    "text": "So I compiled this with minus oh\nzero, which gives me really unoptimized code. And that lets me be the\ncompiler optimizer.",
    "start": "3644650",
    "end": "3652150"
  },
  {
    "text": "So here's the code that\nit generates. So we can take a look at\na few things here. First of all is declaring\nfib to be a global.",
    "start": "3652150",
    "end": "3659369"
  },
  {
    "text": "And it's got some other\nthings here. I actually took out some of the\ndirectives that were in here that were irrelevant\nfor our purposes.",
    "start": "3659370",
    "end": "3665589"
  },
  {
    "text": "If you actually compile it,\nthere's a lot more directives that are stuck in there and a\nlot more labels and things",
    "start": "3665590",
    "end": "3670680"
  },
  {
    "text": "that you don't need\nto understand it.",
    "start": "3670680",
    "end": "3676700"
  },
  {
    "text": "There are two labels here. And so you can see here\nbasically what's going on is",
    "start": "3676700",
    "end": "3684850"
  },
  {
    "text": "we're first of all doing the\nadvancing of the base pointer and advancing the stack\npointer here.",
    "start": "3684850",
    "end": "3691530"
  },
  {
    "text": "That's doing that operation that\nI showed you, those of moving the base and\nstack pointer up.",
    "start": "3691530",
    "end": "3697680"
  },
  {
    "text": "And then at the end here this\nis equivalent to doing, a",
    "start": "3697680",
    "end": "3705170"
  },
  {
    "text": "leave instruction is equivalent\nto undoing that. So Intel lets you do one leave\ninstruction rather than making",
    "start": "3705170",
    "end": "3712110"
  },
  {
    "text": "you put these instructions\nin every time. It's exactly the same thing.",
    "start": "3712110",
    "end": "3719230"
  },
  {
    "text": "But in any case, let's\njust sort of see what's going on here. So we're pushing some storage.",
    "start": "3719230",
    "end": "3727369"
  },
  {
    "text": "This is saving a\nregister here. We're then advancing the stack\npointer to store 24 bytes of",
    "start": "3727370",
    "end": "3734750"
  },
  {
    "text": "temporary storage. And then we're start to do\nsome computations here.",
    "start": "3734750",
    "end": "3739950"
  },
  {
    "text": "This looks like we're comparing\none with something and then doing a ja. So this is a jump above.",
    "start": "3739950",
    "end": "3747509"
  },
  {
    "text": "This is the unsigned version. What you're looking is to see,\nhere we say if n is less than two, in fact, what it's doing is\nsaying if n is greater than",
    "start": "3747510",
    "end": "3756450"
  },
  {
    "text": "one go to L4. ",
    "start": "3756450",
    "end": "3762280"
  },
  {
    "text": "So it's actually doing\nthe other one. So you can see then L4 is, what\nhappens is the one that has the two calls to fib,\nrecursive calls, so that's",
    "start": "3762280",
    "end": "3770200"
  },
  {
    "text": "this part of the code, and\nit's doing that if it's greater than one. And otherwise it's going to\nexecute these instructions,",
    "start": "3770200",
    "end": "3778310"
  },
  {
    "text": "which are basically\nreturning n. And so it basically does\nsome computations.",
    "start": "3778310",
    "end": "3784020"
  },
  {
    "text": "And then both of them converge\nhere where it moves the results and then pops\nit off and so forth.",
    "start": "3784020",
    "end": "3791490"
  },
  {
    "text": "So that's sort of the outline\nof what's going on there. So let's dive in here a little\nbit and sort of see what's",
    "start": "3791490",
    "end": "3796920"
  },
  {
    "text": "going on, see if we can read\nthis a little bit more closely and whether we can\noptimize it.",
    "start": "3796920",
    "end": "3804180"
  },
  {
    "text": "So the first thing that I\nnoticed in looking at this is look at all this memory\naddressing that we're doing.",
    "start": "3804180",
    "end": "3810330"
  },
  {
    "text": "What do you suppose this thing\nis, minus 16% RBP?",
    "start": "3810330",
    "end": "3817070"
  },
  {
    "text": "So this is the base pointer. So this is a local variable\nbecause it's a negative offset",
    "start": "3817070",
    "end": "3822340"
  },
  {
    "text": "off of the base pointer. What do you think it's\ndoing there? ",
    "start": "3822340",
    "end": "3828720"
  },
  {
    "text": "What's stored in here? ",
    "start": "3828720",
    "end": "3834880"
  },
  {
    "text": "Yeah, this is where\nn is being stored. Because what are we doing? We're trying to compare n with\none here even though it says",
    "start": "3834880",
    "end": "3844240"
  },
  {
    "text": "two up there. We're comparing it\nwith one here. And so I look at that, and I\nsay, look, I'm comparing it",
    "start": "3844240",
    "end": "3851460"
  },
  {
    "text": "with one, then I'm jumping to\nL4, then I jump to L4 or not.",
    "start": "3851460",
    "end": "3859710"
  },
  {
    "text": "And then let's say I don't. Well, then the first thing I\ndo is I move n into RAX.",
    "start": "3859710",
    "end": "3865320"
  },
  {
    "text": "But wait a minute, I just\ncompared it with that. So I'm accessing n again. I'm accessing it a third time.",
    "start": "3865320",
    "end": "3871100"
  },
  {
    "text": "How about if I try to\nstore that stuff in a register instead? ",
    "start": "3871100",
    "end": "3876520"
  },
  {
    "text": "So what I did is I picked the\nRDI register, because that one happens to be available, and\nI said do they, if you look",
    "start": "3876520",
    "end": "3884630"
  },
  {
    "text": "here, what did we do? We stored RDI, which is the\nfirst argument, into memory.",
    "start": "3884630",
    "end": "3891350"
  },
  {
    "text": "And then we compared\nwith it in memory. Why don't we compare\nwith it in RDI? ",
    "start": "3891350",
    "end": "3897230"
  },
  {
    "text": "Right? Duh, stupid compiler, well,\nbecause I had minus oh zero.",
    "start": "3897230",
    "end": "3902655"
  },
  {
    "text": " OK, so I can do that\nimprovement. So what I did was I edited it to\nput RDI there and RDI here",
    "start": "3902655",
    "end": "3911140"
  },
  {
    "text": "and RDI here. And I went up and I said,\nwhat about RDI here? Why didn't I replace that one?",
    "start": "3911140",
    "end": "3917410"
  },
  {
    "start": "3917410",
    "end": "3927130"
  },
  {
    "text": "No, there's no loop\ngoing on here. It's recursion. AUDIENCE: [INAUDIBLE PHRASE] ",
    "start": "3927130",
    "end": "3933870"
  },
  {
    "text": "CHARLES LEISERSON: Yeah, the\nproblem is that when I call fib, RDI gets garbaged on me.",
    "start": "3933870",
    "end": "3941020"
  },
  {
    "text": "Because RDI is going to be\nthe first argument to-- See it's being garbaged here?",
    "start": "3941020",
    "end": "3948330"
  },
  {
    "text": "It's garbage as far as\nmy use of it for n. It's being used to pass n minus\n1 as the argument to the",
    "start": "3948330",
    "end": "3955790"
  },
  {
    "text": "recursive call. ",
    "start": "3955790",
    "end": "3962670"
  },
  {
    "text": "So I can't replace this one\nafter fib because RDI no longer has it. Because I had to leave it.",
    "start": "3962670",
    "end": "3967809"
  },
  {
    "text": "But even so I went from 5.45\nseconds for the original code to 4.09 seconds when\nI compile that just",
    "start": "3967810",
    "end": "3974930"
  },
  {
    "text": "with that little change. I felt pretty good. I felt pretty good.",
    "start": "3974930",
    "end": "3980200"
  },
  {
    "text": "So then I wanted more. That was fun. I wanted more. ",
    "start": "3980200",
    "end": "3987570"
  },
  {
    "text": "So what was the next\nthing I noticed? I noticed that-- And by the way almost\nall the things, that",
    "start": "3987570",
    "end": "3994260"
  },
  {
    "text": "stuff I did last night. This is what I did an hour\nbefore class so we'll see whether it--",
    "start": "3994260",
    "end": "3999960"
  },
  {
    "text": "So then I noticed that, look,\nwe're moving this stuff here. We keep using minus 24.",
    "start": "3999960",
    "end": "4006420"
  },
  {
    "text": "And once again, memory\noperations are expensive compared to register\noperations. Let me try to get rid them. What do you suppose\nis in here?",
    "start": "4006420",
    "end": "4012850"
  },
  {
    "start": "4012850",
    "end": "4019160"
  },
  {
    "text": "So look, we move RAX into the\nlocal variable minus 24.",
    "start": "4019160",
    "end": "4028990"
  },
  {
    "text": "And then we jump to L5. And we move minus 24 into RAX. ",
    "start": "4028990",
    "end": "4036950"
  },
  {
    "text": "That seems kind of\nunnecessary. Here we move RBX\ninto minus 24.",
    "start": "4036950",
    "end": "4042470"
  },
  {
    "text": "Then we move minus\n24 into RAX. What is this value first of all\nthat I'm storing there?",
    "start": "4042470",
    "end": "4049350"
  },
  {
    "start": "4049350",
    "end": "4055840"
  },
  {
    "text": "What's going to be in\nRAX at the very end? ",
    "start": "4055840",
    "end": "4062730"
  },
  {
    "text": "RAX is the return value. So I'm trying to save, here in\nthis case, this is the branch",
    "start": "4062730",
    "end": "4070010"
  },
  {
    "text": "where I just want to return n. I just want to put RAX\nto have it return, be",
    "start": "4070010",
    "end": "4075185"
  },
  {
    "text": "in RAX when I return. So I've got the value here. It's just n. It was in RDI.",
    "start": "4075185",
    "end": "4080395"
  },
  {
    "text": "It's now in RAX. But that's clearly\nunnecessary. Why go put it into memory and\nthen take it back out again?",
    "start": "4080395",
    "end": "4087940"
  },
  {
    "text": "And here just put it\nin RAX directly. So that's what I did. I basically, instead of moving\nit here, I changed this",
    "start": "4087940",
    "end": "4097180"
  },
  {
    "text": "instruction that said add it\nand put in RBX, I said, no, don't put it in RBX. Let's just add RBX into RAX,\nand then it's right there.",
    "start": "4097180",
    "end": "4107200"
  },
  {
    "text": "And this one, get rid of those\nso that it's now moved into RAX and it's in RAX.",
    "start": "4107200",
    "end": "4113839"
  },
  {
    "text": "So I did that. I dropped to 3.9 seconds.",
    "start": "4113840",
    "end": "4119318"
  },
  {
    "text": "That felt pretty good, too. In addition, I got rid of\nthis extra variable.",
    "start": "4119319",
    "end": "4125229"
  },
  {
    "text": "So now I could actually reduce\nmy storage requirements. However, when I measured it\nwith this being 24 and not",
    "start": "4125229",
    "end": "4133000"
  },
  {
    "text": "being 24, it was\nthe same speed. So it's like, eh, but\nI didn't want to",
    "start": "4133000",
    "end": "4138870"
  },
  {
    "text": "waste the storage anyway. So then I looked a little\nbit further.",
    "start": "4138870",
    "end": "4145199"
  },
  {
    "text": "And I noticed that I\nwant to get rid of",
    "start": "4145200",
    "end": "4150660"
  },
  {
    "text": "this access to n here. So basically I'm subtracting\nit, and I'm storing n.",
    "start": "4150660",
    "end": "4157450"
  },
  {
    "text": "How can I get rid of it? And this took me a little\nwhile to figure out. What I realized is, look,\nwe're storing",
    "start": "4157450",
    "end": "4163089"
  },
  {
    "text": "stuff away in RBX. We have RBX as an available\nregister because I saved the",
    "start": "4163090",
    "end": "4171770"
  },
  {
    "text": "value of RBX with this push\ninstruction there. So RBX is an available\nregister. We're using it to keep the\nreturn value of the",
    "start": "4171770",
    "end": "4186120"
  },
  {
    "text": "first call to fib.  So I'm going to use it for their\nfirst call to fib so",
    "start": "4186120",
    "end": "4192539"
  },
  {
    "text": "that when I make the second call\nto fib I can then add the two things together. ",
    "start": "4192540",
    "end": "4199360"
  },
  {
    "text": "Well, how about if before the\nfirst call the fib, why don't I use it to store the value of n\nand then use it to store the",
    "start": "4199360",
    "end": "4208150"
  },
  {
    "text": "value of the return value\nof fib of n minus 1?",
    "start": "4208150",
    "end": "4215810"
  },
  {
    "text": "So I did that. And that took a little\nbit of moving things",
    "start": "4215810",
    "end": "4222639"
  },
  {
    "text": "around a little bit. But I managed to get rid of it\nby using RBX for two different purposes, one to store the\ntemporary, the value of n, and",
    "start": "4222640",
    "end": "4231239"
  },
  {
    "text": "the other to store the return\nvalue when I need it.",
    "start": "4231240",
    "end": "4239010"
  },
  {
    "text": "And when I did that, I\ngot it all the way down to 3.61 seconds.",
    "start": "4239010",
    "end": "4244639"
  },
  {
    "text": "I actually ran it with\nminus oh three, took about two seconds.",
    "start": "4244640",
    "end": "4249650"
  },
  {
    "text": "So I think I can keep\nmy day job.  But kind of fun to go in and\nsort of see what are the",
    "start": "4249650",
    "end": "4257070"
  },
  {
    "text": "things that can be done. And you can get a very good\nsense of what's going on. The more important thing is\nwhen you look at compilers",
    "start": "4257070",
    "end": "4263000"
  },
  {
    "text": "generating your code, as we\nsaw on the last lecture on profiling, you can see, oh, it\ndid something silly here.",
    "start": "4263000",
    "end": "4270480"
  },
  {
    "text": "So you can actually go\nand say, oh, it's doing something silly. We can do a better\njob than that. Or, oh, I didn't realize I'd\ndeclared this an int when in",
    "start": "4270480",
    "end": "4277700"
  },
  {
    "text": "fact, if I declared it a\nunsigned int 64, it actually",
    "start": "4277700",
    "end": "4283100"
  },
  {
    "text": "would produce faster,\nbetter code. Yeah? Question? AUDIENCE: Sorry. So when you said that when you\nrun it with minus oh three,",
    "start": "4283100",
    "end": "4292302"
  },
  {
    "text": "what you're just saying is even\nthough you optimized the [INAUDIBLE]? CHARLES LEISERSON: As the\ncompiler, that's why I said I",
    "start": "4292302",
    "end": "4298420"
  },
  {
    "text": "can keep my day job.  So simple optimization\nstrategies, if you're playing",
    "start": "4298420",
    "end": "4306650"
  },
  {
    "text": "with things, is you try to keep\nvalues and registers to eliminate excess\nmemory traffic. You can optimize naive function\ncall linkage.",
    "start": "4306650",
    "end": "4315550"
  },
  {
    "text": "And the most important thing\nprobably is constant fold. Look to see where you've\ngot constants that",
    "start": "4315550",
    "end": "4323690"
  },
  {
    "text": "can be combined together. There are other optimizations\nthat compilers do like common subexpression elimination\nand so forth.",
    "start": "4323690",
    "end": "4330300"
  },
  {
    "text": "But these are sort of the ones,\nif you're doing it by hand, these are sort of things\nto focus on, particularly number one, just get rid of\nexcess memory traffic.",
    "start": "4330300",
    "end": "4340690"
  },
  {
    "text": "Let me say, by the way, in doing\nthis I also went down a bunch of dead ends, things that\nI said, oh, this should definitely save, and\nthen it was slower.",
    "start": "4340690",
    "end": "4348840"
  },
  {
    "text": "And then we look at it, and it\nturns out, oh, my branch misprediction rate is going\nway up and so forth.",
    "start": "4348840",
    "end": "4354410"
  },
  {
    "text": "That's why you have\na profiler. Because you don't want\nto do this blind. ",
    "start": "4354410",
    "end": "4359780"
  },
  {
    "text": "Now, how does the compiler\ncompile some common high level",
    "start": "4359780",
    "end": "4364860"
  },
  {
    "text": "structures?  So if you have a conditional,\nfor example, if p, do the",
    "start": "4364860",
    "end": "4372590"
  },
  {
    "text": "ctrue clause, else do the cfalse\nclause, what it does basically is it generates\ninstructions to evaluate p.",
    "start": "4372590",
    "end": "4379909"
  },
  {
    "text": "And then it does a jump with the\ncondition to see if p is false to the else clause and\nexecutes those instruction.",
    "start": "4379910",
    "end": "4386650"
  },
  {
    "text": "And then otherwise it passes\nthrough, does the true clause,",
    "start": "4386650",
    "end": "4391730"
  },
  {
    "text": "and then jumps to the end. And you'll see that pattern in\nthe code when you look at it.",
    "start": "4391730",
    "end": "4396800"
  },
  {
    "text": "So that's a very common\npattern for doing conditionals. Compiling while loops is kind\nof interesting because most",
    "start": "4396800",
    "end": "4404660"
  },
  {
    "text": "while loops start\nout with a jump. So here are the instructions\nfor the body of the while loop.",
    "start": "4404660",
    "end": "4410810"
  },
  {
    "text": "And here's the test. And what they usually do is they\njump to the test, they evaluate the condition,\nand if it's true,",
    "start": "4410810",
    "end": "4417650"
  },
  {
    "text": "they jump to the loop. Otherwise, they fall through. And then they go back, do the\nloop sometimes for the first",
    "start": "4417650",
    "end": "4423740"
  },
  {
    "text": "time, et cetera. So that's kind of the pattern\nfor a while loop. For a for loop, they basically\njust convert it",
    "start": "4423740",
    "end": "4431900"
  },
  {
    "text": "into a while loop. You basically take the\ninitialization code. You execute that.",
    "start": "4431900",
    "end": "4438030"
  },
  {
    "text": "Then while the condition is\ntrue, you do the code followed by whatever the next code is.",
    "start": "4438030",
    "end": "4443150"
  },
  {
    "text": "And so it ends up converting\nfor loops into while loops.",
    "start": "4443150",
    "end": "4448510"
  },
  {
    "text": "Now, arrays are, how do we go\nabout implementing data types? Arrays are just blocks\nof memory.",
    "start": "4448510",
    "end": "4458670"
  },
  {
    "text": "So you can have basically three\ndifferent types of array depending upon where it gets\nallocated, either allocated in",
    "start": "4458670",
    "end": "4466050"
  },
  {
    "text": "the data segment, allocate\non the heap, or allocated on the stack. ",
    "start": "4466050",
    "end": "4472830"
  },
  {
    "text": "Sometimes even the static\narrays these days can be allocated in the code segment,\nif you're not going to change them.",
    "start": "4472830",
    "end": "4480010"
  },
  {
    "text": "So one thing is to understand\nthat arrays and pointers are",
    "start": "4480010",
    "end": "4487599"
  },
  {
    "text": "almost the same thing. If you have an array, that's a\npointer to a place in memory",
    "start": "4487600",
    "end": "4493820"
  },
  {
    "text": "where the array begins. And a zero is the same as the\nvalue you get when you",
    "start": "4493820",
    "end": "4500260"
  },
  {
    "text": "dereference the pointer to a. A pointer, if you think about\nit, is actually just an index",
    "start": "4500260",
    "end": "4508300"
  },
  {
    "text": "into the array of all memory. And the hardware allows\nyou to index into the",
    "start": "4508300",
    "end": "4513920"
  },
  {
    "text": "array of all memory. Well, it can also allow you to\nindex into any subregion of that memory.",
    "start": "4513920",
    "end": "4519570"
  },
  {
    "text": "And that's why arrays and\npointers are basically the same thing. ",
    "start": "4519570",
    "end": "4525200"
  },
  {
    "text": "Here's a little quiz. What is eight of a? ",
    "start": "4525200",
    "end": "4532820"
  },
  {
    "text": "AUDIENCE: The a elements? CHARLES LEISERSON: Yeah, it's\nbasically a of eight.",
    "start": "4532820",
    "end": "4538230"
  },
  {
    "text": "It's basically a of eight\nbecause the addressing that's going on is essentially\nthe same.",
    "start": "4538230",
    "end": "4543540"
  },
  {
    "text": "Even though we prefer\nto write it-- If you start writing code like\nthis, I guarantee that at some",
    "start": "4543540",
    "end": "4548830"
  },
  {
    "text": "companies they'll get very angry\nat you even though you say, it's the same thing.",
    "start": "4548830",
    "end": "4555910"
  },
  {
    "text": "But what's going on is you're\nactually taking the base, the address of a, you're adding\neight to it, and then",
    "start": "4555910",
    "end": "4562570"
  },
  {
    "text": "dereferencing that value. And indeed, even in C, they\nactually do all the coercions,",
    "start": "4562570",
    "end": "4568679"
  },
  {
    "text": "even if eight is a different\ntype, it actually does the coercions properly\nso that they are actually the same thing.",
    "start": "4568680",
    "end": "4574619"
  },
  {
    "text": "Because it does them after\nit's converted it into a dereference of a plus 8.",
    "start": "4574620",
    "end": "4582090"
  },
  {
    "text": "So it's kind of interesting\nthat it works right even though when I looked at that I\nsay, well, what if it's bytes",
    "start": "4582090",
    "end": "4589420"
  },
  {
    "text": "verses words and so forth? Yeah? Question? AUDIENCE: Will there be a\nperformance difference between",
    "start": "4589420",
    "end": "4597270"
  },
  {
    "text": "putting data on those three\ndifferent arrays? CHARLES LEISERSON: Yes,\nthere can be.",
    "start": "4597270",
    "end": "4603140"
  },
  {
    "text": "In particular, static array,\nit knows exactly where the base pointer is as a constant.",
    "start": "4603140",
    "end": "4608770"
  },
  {
    "text": "Whereas the others it has to\nactually figure out where it is in the heap you need\na pointer to it to dereference it.",
    "start": "4608770",
    "end": "4614220"
  },
  {
    "text": "It can't put it right into the\ninstruction stream itself. AUDIENCE: [INAUDIBLE] ",
    "start": "4614220",
    "end": "4621524"
  },
  {
    "text": "those would be just constant\n[INAUDIBLE], right? So I can either put that in\nthe static array or--",
    "start": "4621524",
    "end": "4628745"
  },
  {
    "text": "CHARLES LEISERSON: Yes,\ngenerally it's faster to have it in a static array\nif you can.",
    "start": "4628746",
    "end": "4634430"
  },
  {
    "text": "I want to finish up\nhere so that-- We have structs. Structs are just blocks\nof memory also.",
    "start": "4634430",
    "end": "4641470"
  },
  {
    "text": "So you can have a bunch\nof things here. This is a bad way to declare a\nstruct because the fields are",
    "start": "4641470",
    "end": "4647850"
  },
  {
    "text": "stored next to each other\ngenerally in the order you give them. So here it says it's x and\nthen i and double.",
    "start": "4647850",
    "end": "4655470"
  },
  {
    "text": "What happens here is you\nhave to be careful about alignment issues. So if you do [? char, ?]",
    "start": "4655470",
    "end": "4661400"
  },
  {
    "text": "it's then got to pad it\nout to get to the next alignment for an int. And it's got to pad that\nout to get the next",
    "start": "4661400",
    "end": "4667460"
  },
  {
    "text": "alignment for a double. Whereas if you do it in the\nopposite order, it starts packing them.",
    "start": "4667460",
    "end": "4672580"
  },
  {
    "text": "So generally it's best to\ndeclare longer fields before shorter fields because then you\nknow when you're finished",
    "start": "4672580",
    "end": "4677915"
  },
  {
    "text": "with the longer fields,\nyou're already aligned for shorter fields. ",
    "start": "4677915",
    "end": "4683659"
  },
  {
    "text": "Like arrays, there are static,\ndynamic, and local structs. So that's all they are. And so you'll see in\nthe indexing--",
    "start": "4683660",
    "end": "4688965"
  },
  {
    "text": " There's also stuff that-- and actually this is important\nfor one of the binary puzzles",
    "start": "4688965",
    "end": "4698760"
  },
  {
    "text": "we gave to figure out\nwhat it does-- there are what are called\nSIMD instruction.",
    "start": "4698760",
    "end": "4703950"
  },
  {
    "text": "This is single instruction\nmultiple data instructions where a single instruction\noperates on",
    "start": "4703950",
    "end": "4709740"
  },
  {
    "text": "multiple pieces of data. They operate on smaller\nvectors. And there are 16 128-bit XMM\nregisters, which you can view",
    "start": "4709740",
    "end": "4720570"
  },
  {
    "text": "as two 64-bit values or\nfour 32-bit values. And you can do an\noperation on it.",
    "start": "4720570",
    "end": "4725860"
  },
  {
    "text": "So this is used for multimedia,\nfor streaming applications, and so forth where\nyou're trying to shove a",
    "start": "4725860",
    "end": "4731180"
  },
  {
    "text": "lot of data through and you're\ndoing the same repeated stuff on the things at time.",
    "start": "4731180",
    "end": "4736270"
  },
  {
    "text": "So there are instructions that\noperate on multiple values. For example, here we're moving\nfour 32-bit ints into this",
    "start": "4736270",
    "end": "4744750"
  },
  {
    "text": "particular XMM register. And similarly here's another\none, we're adding it.",
    "start": "4744750",
    "end": "4750650"
  },
  {
    "text": "And you can look at the\nmanual for these. So you may come across these\nbecause they're using up parts",
    "start": "4750650",
    "end": "4758740"
  },
  {
    "text": "of the machine. Mostly those are the kinds of\nthings we can say look it up in the manual, because nobody's\ngoing to remember all",
    "start": "4758740",
    "end": "4764790"
  },
  {
    "text": "those instructions. Of course, if you get a job\nwith one of the graphics",
    "start": "4764790",
    "end": "4772130"
  },
  {
    "text": "companies, then you may become\nvery familiar with these kinds of instructions.",
    "start": "4772130",
    "end": "4778079"
  },
  {
    "text": "There's a lot more C and C++\nconstructs that we don't have to go into. You can have arrays of structs\nversus structs of arrays.",
    "start": "4778080",
    "end": "4786450"
  },
  {
    "text": "And there can be a difference\nin performance.  If you have an array of structs,\nthen it makes it, if",
    "start": "4786450",
    "end": "4796710"
  },
  {
    "text": "you're accessing one struct,\nyou can access the other structs very easily.",
    "start": "4796710",
    "end": "4801880"
  },
  {
    "text": "But if you're using things like\nthe SSC instructions, then it may be better to\nhave structs of arrays.",
    "start": "4801880",
    "end": "4809969"
  },
  {
    "text": "Because then when you're access\nan array, you can stream what's called a stride\nof one, a regular stride of",
    "start": "4809970",
    "end": "4817160"
  },
  {
    "text": "just one memory location after\nthe next, to do the processing.",
    "start": "4817160",
    "end": "4822310"
  },
  {
    "text": "So the hardware doesn't work\nas well if you skip by seventeens to gather things\ncompared if you just get one",
    "start": "4822310",
    "end": "4829139"
  },
  {
    "text": "thing after the next. Because there's prefetching\nlogic that tries to fetch things from memory faster.",
    "start": "4829140",
    "end": "4834619"
  },
  {
    "text": "There are things like\nfunction pointers. So you can have store function\npointer into something and",
    "start": "4834620",
    "end": "4840380"
  },
  {
    "text": "then call that function\nindirectly. There's things like bit\nfields in arrays.",
    "start": "4840380",
    "end": "4847310"
  },
  {
    "text": "There are objects, virtual\nfunction tables. We'll get into some of\nthese when we do C++. And there's a variety of stuff\nhaving to do with memory",
    "start": "4847310",
    "end": "4854170"
  },
  {
    "text": "management that we'll\ntalk about. But this is mainly to get you\nfolks sort of at the level",
    "start": "4854170",
    "end": "4859890"
  },
  {
    "text": "where you can sort of\nunderstand and feel comfortable with dealing\nwith the assembler.",
    "start": "4859890",
    "end": "4865170"
  },
  {
    "text": "And you'll see that\nthose resources are pretty good resources. But the basics are relatively\nsimple, but it's hard to do it",
    "start": "4865170",
    "end": "4872440"
  },
  {
    "text": "without a manual or some online\nreference material.",
    "start": "4872440",
    "end": "4878110"
  },
  {
    "text": "Any questions?  What are the first two lessons\nI taught you today?",
    "start": "4878110",
    "end": "4886770"
  },
  {
    "text": "Number one is-- AUDIENCE: [INAUDIBLE] CHARLES LEISERSON: --write tests\nbefore you write code.",
    "start": "4886770",
    "end": "4892880"
  },
  {
    "text": "And what's the second lesson? AUDIENCE: Pair programming. CHARLES LEISERSON: Pair\nprogramming, not divide and conquer, I teach algorithms\nwhere divide and conquer is a",
    "start": "4892880",
    "end": "4901060"
  },
  {
    "text": "fabulous technique. With programming, pair\nprogramming is going to have you generally get where you\nwant to get faster than if",
    "start": "4901060",
    "end": "4909710"
  },
  {
    "text": "you're programming alone. ",
    "start": "4909710",
    "end": "4914915"
  },
  {
    "text": "OK, thank you. ",
    "start": "4914915",
    "end": "4918720"
  }
]