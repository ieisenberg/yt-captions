[
  {
    "start": "0",
    "end": "473000"
  },
  {
    "text": " So, the topic today is dynamic\nprogramming. ",
    "start": "7000",
    "end": "21000"
  },
  {
    "text": "The term programming in the\nname of this term doesn't refer to computer programming.\nOK, programming is an old word",
    "start": "21000",
    "end": "30000"
  },
  {
    "text": "that means any tabular method\nfor accomplishing something. So, you'll hear about linear\nprogramming and dynamic",
    "start": "30000",
    "end": "39000"
  },
  {
    "text": "programming.\nEither of those, even though we now incorporate\nthose algorithms in computer",
    "start": "39000",
    "end": "47000"
  },
  {
    "text": "programs, originally computer\nprogramming, you were given a datasheet and you put one line\nper line of code as a tabular",
    "start": "47000",
    "end": "57000"
  },
  {
    "text": "method for giving the machine\ninstructions as to what to do.",
    "start": "57000",
    "end": "64000"
  },
  {
    "text": "OK, so the term programming is\nolder. Of course, and now\nconventionally when you see",
    "start": "64000",
    "end": "71000"
  },
  {
    "text": "programming, you mean software,\ncomputer programming. But that wasn't always the\ncase.",
    "start": "71000",
    "end": "78000"
  },
  {
    "text": "And these terms continue in the\nliterature. So, dynamic programming is a\ndesign technique like other",
    "start": "78000",
    "end": "86000"
  },
  {
    "text": "design techniques we've seen\nsuch as divided and conquer.",
    "start": "86000",
    "end": "93000"
  },
  {
    "text": "OK, so it's a way of solving a\nclass of problems rather than a",
    "start": "93000",
    "end": "100000"
  },
  {
    "text": "particular algorithm or\nsomething. So, we're going to work through\nthis for the example of",
    "start": "100000",
    "end": "110000"
  },
  {
    "text": "so-called longest common\nsubsequence problem, sometimes called LCS,\nOK, which is a problem that",
    "start": "110000",
    "end": "120000"
  },
  {
    "text": "comes up in a variety of\ncontexts.",
    "start": "120000",
    "end": "126000"
  },
  {
    "text": "And it's particularly important\nin computational biology, where you have long DNA\nstrains, and you're trying to",
    "start": "126000",
    "end": "134000"
  },
  {
    "text": "find commonalities between two\nstrings, OK, one which may be a genome, and one may be various,\nwhen people do,",
    "start": "134000",
    "end": "143000"
  },
  {
    "text": "what is that thing called when\nthey do the evolutionary comparisons?\nThe evolutionary trees,",
    "start": "143000",
    "end": "151000"
  },
  {
    "text": "yeah, right,\nyeah, exactly, phylogenetic trees,\nthere you go, OK, phylogenetic trees.\nGood, so here's the problem.",
    "start": "151000",
    "end": "164000"
  },
  {
    "text": "So, you're given two sequences,\nx going from one to m,",
    "start": "164000",
    "end": "174000"
  },
  {
    "text": "and y running from one to n.\nYou want to find a longest",
    "start": "174000",
    "end": "184000"
  },
  {
    "text": "sequence common to both.\nOK, and here I say a,",
    "start": "184000",
    "end": "192000"
  },
  {
    "text": "not the, although it's common\nto talk about the longest common",
    "start": "192000",
    "end": "199000"
  },
  {
    "text": "subsequence.\nUsually the longest comment subsequence isn't unique.\nThere could be several",
    "start": "199000",
    "end": "209000"
  },
  {
    "text": "different subsequences that tie\nfor that.",
    "start": "209000",
    "end": "215000"
  },
  {
    "text": "However, people tend to,\nit's one of the sloppinesses",
    "start": "215000",
    "end": "221000"
  },
  {
    "text": "that people will say.\nI will try to say a, unless it's unique.\nBut I may slip as well because",
    "start": "221000",
    "end": "231000"
  },
  {
    "text": "it's just such a common thing to\njust talk about the,",
    "start": "231000",
    "end": "237000"
  },
  {
    "text": "even though there might be\nmultiple. So, here's an example.\nSuppose x is this sequence,",
    "start": "237000",
    "end": "247000"
  },
  {
    "text": "and y is this sequence.\nSo, what is a longest common",
    "start": "247000",
    "end": "254000"
  },
  {
    "text": "subsequence of those two\nsequences? See if you can just eyeball it. ",
    "start": "254000",
    "end": "275000"
  },
  {
    "text": "AB: length two?\nAnybody have one longer?",
    "start": "275000",
    "end": "285000"
  },
  {
    "text": "Excuse me?\nBDB, BDB.",
    "start": "285000",
    "end": "291000"
  },
  {
    "text": "BDAB, BDAB, BDAB,\nanything longer?",
    "start": "291000",
    "end": "302000"
  },
  {
    "text": "So, BDAB: that's the longest\none.",
    "start": "302000",
    "end": "309000"
  },
  {
    "text": "Is there another one that's the\nsame length?",
    "start": "309000",
    "end": "320000"
  },
  {
    "text": "Is there another one that ties?\nBCAB, BCAB, another one?",
    "start": "320000",
    "end": "335000"
  },
  {
    "text": "BCBA, yeah, there are a bunch\nof them all of length four. There isn't one of length five.\nOK, we are actually going to",
    "start": "335000",
    "end": "345000"
  },
  {
    "text": "come up with an algorithm that,\nif it's correct, we're going to show it's\ncorrect, guarantees that there",
    "start": "345000",
    "end": "354000"
  },
  {
    "text": "isn't one of length five.\nSo all those are, we can say, any one of these is\nthe longest comment subsequence",
    "start": "354000",
    "end": "363000"
  },
  {
    "text": "of x and y.\nWe tend to use it this way using functional notation,\nbut it's not a function that's",
    "start": "363000",
    "end": "371000"
  },
  {
    "text": "really a relation.\nSo, we'll say something is an",
    "start": "371000",
    "end": "377000"
  },
  {
    "text": "LCS when really we only mean\nit's an element, if you will,\nof the set of longest common",
    "start": "377000",
    "end": "383000"
  },
  {
    "text": "subsequences.\nOnce again, it's classic abusive notation.\nAs long as we know what we",
    "start": "383000",
    "end": "389000"
  },
  {
    "text": "mean, it's OK to abuse notation.\nWhat we can't do is misuse it.",
    "start": "389000",
    "end": "395000"
  },
  {
    "text": "But abuse, yeah!\nMake it so it's easy to deal with.\nBut you have to know what's",
    "start": "395000",
    "end": "403000"
  },
  {
    "text": "going on underneath.\nOK, so let's see, so there's a fairly simple\nbrute force algorithm for",
    "start": "403000",
    "end": "413000"
  },
  {
    "text": "solving this problem.\nAnd that is,",
    "start": "413000",
    "end": "419000"
  },
  {
    "text": "let's just check every,\nmaybe some of you did this in",
    "start": "419000",
    "end": "430000"
  },
  {
    "text": "your heads, subsequence of x\nfrom one to m to see if it's",
    "start": "430000",
    "end": "442000"
  },
  {
    "text": "also a subsequence of y of one\nto n.",
    "start": "442000",
    "end": "451000"
  },
  {
    "text": "So, just take every subsequence\nthat you can get here, check it to see if it's in\nthere.",
    "start": "451000",
    "end": "460000"
  },
  {
    "text": "So let's analyze that. ",
    "start": "460000",
    "end": "472000"
  },
  {
    "text": "So, to check,\nso if I give you a subsequence",
    "start": "472000",
    "end": "478000"
  },
  {
    "start": "473000",
    "end": "975000"
  },
  {
    "text": "of x, how long does it take you\nto check whether it is,",
    "start": "478000",
    "end": "485000"
  },
  {
    "text": "in fact, a subsequence of y?\nSo, I give you something like",
    "start": "485000",
    "end": "494000"
  },
  {
    "text": "BCAB.\nHow long does it take me to check to see if it's a\nsubsequence of y?",
    "start": "494000",
    "end": "504000"
  },
  {
    "text": "Length of y,\nwhich is order n. And how do you do it?\nYeah, you just scan.",
    "start": "504000",
    "end": "514000"
  },
  {
    "text": "So as you hit the first\ncharacter that matches, great.\nNow, if you will,",
    "start": "514000",
    "end": "521000"
  },
  {
    "text": "recursively see whether the\nsuffix of your string matches the suffix of x.\nOK, and so, you are just simply",
    "start": "521000",
    "end": "530000"
  },
  {
    "text": "walking down the tree to see if\nit matches. You're walking down the string\nto see if it matches.",
    "start": "530000",
    "end": "539000"
  },
  {
    "text": "OK, then the second thing is,\nthen how many subsequences of x are there?\nTwo to the n?",
    "start": "539000",
    "end": "548000"
  },
  {
    "text": "x just goes from one to m,\ntwo to the m subsequences of x,",
    "start": "548000",
    "end": "555000"
  },
  {
    "text": "OK, two to the m.\nTwo to the m subsequences of x, OK, one way to see that,\nyou say, well,",
    "start": "555000",
    "end": "565000"
  },
  {
    "text": "how many subsequences are there\nof something there?",
    "start": "565000",
    "end": "572000"
  },
  {
    "text": "If I consider a bit vector of\nlength m, OK, that's one or zero,\njust every position where",
    "start": "572000",
    "end": "579000"
  },
  {
    "text": "there's a one,\nI take out, that identifies an element that I'm going to take\nout.",
    "start": "579000",
    "end": "585000"
  },
  {
    "text": "OK, then that gives me a\nmapping from each subsequence of x, from each bit vector to a\ndifferent subsequence of x.",
    "start": "585000",
    "end": "595000"
  },
  {
    "text": "Now, of course,\nyou could have matching characters there,\nthat in the worst case,",
    "start": "595000",
    "end": "601000"
  },
  {
    "text": "all of the characters are\ndifferent. OK, and so every one of those\nwill be a unique subsequence.",
    "start": "601000",
    "end": "614000"
  },
  {
    "text": "So, each bit vector of length m\ncorresponds to a subsequence.",
    "start": "614000",
    "end": "622000"
  },
  {
    "text": "That's a generally good trick\nto know.",
    "start": "622000",
    "end": "629000"
  },
  {
    "text": "So, the worst-case running time\nof this method is order n times",
    "start": "629000",
    "end": "638000"
  },
  {
    "text": "two to the m,\nwhich is, since m is in the exponent, is exponential time.\nAnd there's a technical term",
    "start": "638000",
    "end": "652000"
  },
  {
    "text": "that we use when something is\nexponential time.",
    "start": "652000",
    "end": "659000"
  },
  {
    "text": "Slow: good.\nOK, very good. OK, slow, OK,\nso this is really bad.",
    "start": "659000",
    "end": "666000"
  },
  {
    "text": "This is taking a long time to\ncrank out how long the longest",
    "start": "666000",
    "end": "672000"
  },
  {
    "text": "common subsequence is because\nthere's so many subsequences. OK, so we're going to now go\nthrough a process of developing",
    "start": "672000",
    "end": "683000"
  },
  {
    "text": "a far more efficient algorithm\nfor this problem. OK, and we're actually going to\ngo through several stages.",
    "start": "683000",
    "end": "694000"
  },
  {
    "text": "The first one is to go through\nsimplification stage.",
    "start": "694000",
    "end": "702000"
  },
  {
    "text": "OK, and what we're going to do\nis look at simply the length of",
    "start": "702000",
    "end": "712000"
  },
  {
    "text": "the longest common sequence of x\nand y.",
    "start": "712000",
    "end": "719000"
  },
  {
    "text": "And then what we'll do is\nextend the algorithm to find the longest common subsequence\nitself.",
    "start": "719000",
    "end": "726000"
  },
  {
    "text": "OK, so we're going to look at\nthe length. So, simplify the problem,\nif you will,",
    "start": "726000",
    "end": "733000"
  },
  {
    "text": "to just try to compute the\nlength. What's nice is the length is\nunique.",
    "start": "733000",
    "end": "739000"
  },
  {
    "text": "OK, there's only going to be\none length that's going to be the longest.\nOK, and what we'll do is just",
    "start": "739000",
    "end": "747000"
  },
  {
    "text": "focus on the problem of\ncomputing the length. And then we'll do is we can\nback up from that and figure out",
    "start": "747000",
    "end": "756000"
  },
  {
    "text": "what actually is the subsequence\nthat realizes that length.",
    "start": "756000",
    "end": "763000"
  },
  {
    "text": "OK, and that will be a big\nsimplification because we don't have to keep track of a lot of\ndifferent possibilities at every",
    "start": "763000",
    "end": "770000"
  },
  {
    "text": "stage.\nWe just have to keep track of the one number,\nwhich is the length. So, it's sort of reduces it to\na numerical problem.",
    "start": "770000",
    "end": "777000"
  },
  {
    "text": "We'll adopt the following\nnotation. It's pretty standard notation,\nbut I just want,",
    "start": "777000",
    "end": "784000"
  },
  {
    "text": "if I put absolute values around\nthe string or a sequence, it denotes the length of the\nsequence, S.",
    "start": "784000",
    "end": "793000"
  },
  {
    "text": "OK, so that's the first thing.\nThe second thing we're going to",
    "start": "793000",
    "end": "799000"
  },
  {
    "text": "do is, actually,\nwe're going to, which takes a lot more insight\nwhen you come up with a problem",
    "start": "799000",
    "end": "808000"
  },
  {
    "text": "like this,\nand in some sense, ends up being the hardest part\nof designing a good dynamic",
    "start": "808000",
    "end": "819000"
  },
  {
    "text": "programming algorithm from any\nproblem, which is we're going to",
    "start": "819000",
    "end": "827000"
  },
  {
    "text": "actually look not at all\nsubsequences of x and y,",
    "start": "827000",
    "end": "833000"
  },
  {
    "text": "but just prefixes. ",
    "start": "833000",
    "end": "846000"
  },
  {
    "text": "OK, we're just going to look at\nprefixes and we're going to show",
    "start": "846000",
    "end": "853000"
  },
  {
    "text": "how we can express the length of\nthe longest common subsequence",
    "start": "853000",
    "end": "860000"
  },
  {
    "text": "of prefixes in terms of each\nother. In particular,\nwe're going to define c of ij",
    "start": "860000",
    "end": "868000"
  },
  {
    "text": "to be the length,\nthe longest common subsequence",
    "start": "868000",
    "end": "874000"
  },
  {
    "text": "of the prefix of x going from\none to i, and y of going to one",
    "start": "874000",
    "end": "881000"
  },
  {
    "text": "to j.\nAnd what we are going to do is",
    "start": "881000",
    "end": "888000"
  },
  {
    "text": "we're going to calculate c[i,j]\nfor all ij.",
    "start": "888000",
    "end": "896000"
  },
  {
    "text": "And if we do that,\nhow then do we solve the",
    "start": "896000",
    "end": "904000"
  },
  {
    "text": "problem of the longest common of\nsequence of x and y?",
    "start": "904000",
    "end": "915000"
  },
  {
    "text": "How do we solve the longest\ncommon subsequence? Suppose we've solved this for\nall I and j.",
    "start": "915000",
    "end": "923000"
  },
  {
    "text": "How then do we compute the\nlength of the longest common",
    "start": "923000",
    "end": "929000"
  },
  {
    "text": "subsequence of x and y?\nYeah, c[m,n], that's all, OK?\nSo then, c of m,",
    "start": "929000",
    "end": "937000"
  },
  {
    "text": "n is just equal to the longest\ncommon subsequence of x and y,",
    "start": "937000",
    "end": "944000"
  },
  {
    "text": "because if I go from one to n,\nI'm done, OK?",
    "start": "944000",
    "end": "950000"
  },
  {
    "text": "And so, it's going to turn out\nthat what we want to do is",
    "start": "950000",
    "end": "956000"
  },
  {
    "text": "figure out how to express to\nc[m,n], in general,",
    "start": "956000",
    "end": "962000"
  },
  {
    "text": "c[i,j], in terms of other\nc[i,j].",
    "start": "962000",
    "end": "968000"
  },
  {
    "text": "So, let's see how we do that.\nOK, so our theorem is going to",
    "start": "968000",
    "end": "978000"
  },
  {
    "start": "975000",
    "end": "1495000"
  },
  {
    "text": "say that c[i,j] is just -- ",
    "start": "978000",
    "end": "1025000"
  },
  {
    "text": "OK, it says that if the i'th\ncharacter matches the j'th character, then i'th character\nof x matches the j'th character",
    "start": "1025000",
    "end": "1037000"
  },
  {
    "text": "of y, then c of ij is just c of\nI minus one, j minus one plus",
    "start": "1037000",
    "end": "1043000"
  },
  {
    "text": "one.\nAnd if they don't match, then it's either going to be\nthe longer of c[i,",
    "start": "1043000",
    "end": "1051000"
  },
  {
    "text": "j-1], and c[i-1,\nj], OK? So that's what we're going to\nprove.",
    "start": "1051000",
    "end": "1058000"
  },
  {
    "text": "And that's going to give us a\nway of relating the calculation",
    "start": "1058000",
    "end": "1064000"
  },
  {
    "text": "of a given c[i,j] to values that\nare strictly smaller, OK, that is at least one of the\narguments is smaller of the two",
    "start": "1064000",
    "end": "1076000"
  },
  {
    "text": "arguments.\nOK, and that's going to give us a way of being able,\nthen, to understand how to",
    "start": "1076000",
    "end": "1085000"
  },
  {
    "text": "calculate c[i,j].\nSo, let's prove this theorem.",
    "start": "1085000",
    "end": "1091000"
  },
  {
    "text": "So, we'll start with a case\nx[i] equals y of j.",
    "start": "1091000",
    "end": "1098000"
  },
  {
    "text": "And so, let's draw a picture\nhere. So, we have x here.",
    "start": "1098000",
    "end": "1106000"
  },
  {
    "start": "1106000",
    "end": "1130000"
  },
  {
    "text": "And here is y. ",
    "start": "1130000",
    "end": "1153000"
  },
  {
    "text": "OK, so here's my sequence,\nx, which I'm sort of drawing as",
    "start": "1153000",
    "end": "1159000"
  },
  {
    "text": "this elongated box,\nsequence y, and I'm saying that",
    "start": "1159000",
    "end": "1165000"
  },
  {
    "text": "x[i] and y[j],\nthose are equal. ",
    "start": "1165000",
    "end": "1178000"
  },
  {
    "text": "OK, so let's see what that\nmeans.",
    "start": "1178000",
    "end": "1186000"
  },
  {
    "text": "OK, so let's let z of one to k\nbe, in fact, the longest common",
    "start": "1186000",
    "end": "1201000"
  },
  {
    "text": "subsequence of x of one to i,\ny of one to j,",
    "start": "1201000",
    "end": "1212000"
  },
  {
    "text": "where c of ij is equal to k.\nOK, so the longest common",
    "start": "1212000",
    "end": "1223000"
  },
  {
    "text": "subsequence of x and y of one to\nI and y of one to j has some",
    "start": "1223000",
    "end": "1229000"
  },
  {
    "text": "value.\nLet's call it k. And so, let's say that we have\nsome sequence which realizes",
    "start": "1229000",
    "end": "1239000"
  },
  {
    "text": "that.\nOK, we'll call it z. OK, so then,\ncan somebody tell me what z of",
    "start": "1239000",
    "end": "1248000"
  },
  {
    "text": "k is? ",
    "start": "1248000",
    "end": "1264000"
  },
  {
    "text": "What is z of k here? ",
    "start": "1264000",
    "end": "1274000"
  },
  {
    "text": "Yeah, it's actually equal to x\nof I, which is also equal to y of j?\nWhy is that? Why couldn't it be some other\nvalue?",
    "start": "1274000",
    "end": "1283000"
  },
  {
    "start": "1283000",
    "end": "1301000"
  },
  {
    "text": "Yeah, so you got the right\nidea. So, the idea is,\nsuppose that the sequence didn't include this element here\nat the last element,",
    "start": "1301000",
    "end": "1310000"
  },
  {
    "text": "the longest common subsequence.\nOK, so then it includes a bunch of values in here,\nand a bunch of values in here,",
    "start": "1310000",
    "end": "1319000"
  },
  {
    "text": "same values.\nIt doesn't include this or this.\nWell, then I could just tack on",
    "start": "1319000",
    "end": "1327000"
  },
  {
    "text": "this extra character and make it\nbe longer, make it k plus one",
    "start": "1327000",
    "end": "1333000"
  },
  {
    "text": "because these two match.\nOK, so if the sequence ended before --",
    "start": "1333000",
    "end": "1340000"
  },
  {
    "start": "1340000",
    "end": "1354000"
  },
  {
    "text": "-- just extend it by tacking on\nx[i].",
    "start": "1354000",
    "end": "1360000"
  },
  {
    "text": "OK, it would be fairly simple\nto just tack on x[i].",
    "start": "1360000",
    "end": "1368000"
  },
  {
    "text": "OK, so if that's the case,\nthen if I look at z going one",
    "start": "1368000",
    "end": "1378000"
  },
  {
    "text": "up to k minus one,\nthat's certainly a common",
    "start": "1378000",
    "end": "1385000"
  },
  {
    "text": "sequence of x of 1 up to,\nexcuse me, of up to i minus",
    "start": "1385000",
    "end": "1394000"
  },
  {
    "text": "one.\nAnd, y of one up to j minus",
    "start": "1394000",
    "end": "1400000"
  },
  {
    "text": "one, OK, because this is a\nlongest common sequence.",
    "start": "1400000",
    "end": "1406000"
  },
  {
    "text": "z is a longest common sequence\nis, from x of one to i,",
    "start": "1406000",
    "end": "1413000"
  },
  {
    "text": "y of one to j.\nAnd, we know what the last character is.\nIt's just x[i],",
    "start": "1413000",
    "end": "1421000"
  },
  {
    "text": "or equivalently,\ny[j]. So therefore,\neverything except the last",
    "start": "1421000",
    "end": "1427000"
  },
  {
    "text": "character must at least be a\ncommon sequence of x of one to i",
    "start": "1427000",
    "end": "1433000"
  },
  {
    "text": "minus one, y of one to j minus\none. Everybody with me?\nIt must be a comment sequence.",
    "start": "1433000",
    "end": "1444000"
  },
  {
    "text": "OK, now, what you also suspect?\nWhat do you also suspect about",
    "start": "1444000",
    "end": "1452000"
  },
  {
    "text": "z of one to k?\nIt's a common sequence of these",
    "start": "1452000",
    "end": "1458000"
  },
  {
    "text": "two.\nYeah? Yeah, it's a longest common\nsequence.",
    "start": "1458000",
    "end": "1466000"
  },
  {
    "text": "So that's what we claim,\nz of one up to k minus one is",
    "start": "1466000",
    "end": "1474000"
  },
  {
    "text": "in fact a longest common\nsubsequence of x of one to i",
    "start": "1474000",
    "end": "1482000"
  },
  {
    "text": "minus one, and y of one to j\nminus one, OK?",
    "start": "1482000",
    "end": "1488000"
  },
  {
    "text": "So, let's prove that claim.\nSo, we'll just have a little",
    "start": "1488000",
    "end": "1497000"
  },
  {
    "start": "1495000",
    "end": "1820000"
  },
  {
    "text": "diversion to prove the claim.\nOK, so suppose that w is a",
    "start": "1497000",
    "end": "1509000"
  },
  {
    "text": "longer comment sequence,\nthat is, that the length,",
    "start": "1509000",
    "end": "1521000"
  },
  {
    "text": "the w, is bigger than k minus\none.",
    "start": "1521000",
    "end": "1530000"
  },
  {
    "text": "OK, so suppose we have a longer\ncomment sequence than z of one to k minus one.\nSo, it's got to have length",
    "start": "1530000",
    "end": "1538000"
  },
  {
    "text": "that's bigger than k minus one\nif it's longer. OK, and now what we do is we\nuse a classic argument you're",
    "start": "1538000",
    "end": "1547000"
  },
  {
    "text": "going to see multiple times,\nnot just this week, which it will be important for\nthis week, but through several",
    "start": "1547000",
    "end": "1556000"
  },
  {
    "text": "lectures.\nHence, it's called a cut and paste argument.\nSo, the idea is let's take a",
    "start": "1556000",
    "end": "1566000"
  },
  {
    "text": "look at w, concatenate it with\nthat last character,",
    "start": "1566000",
    "end": "1575000"
  },
  {
    "text": "z of k.\nso, this is string, OK, so that's just my\nterminology for string",
    "start": "1575000",
    "end": "1587000"
  },
  {
    "text": "concatenation.\nOK, so I take whatever I",
    "start": "1587000",
    "end": "1596000"
  },
  {
    "text": "claimed was a longer comment\nsubsequence, and I concatenate z",
    "start": "1596000",
    "end": "1608000"
  },
  {
    "text": "of k to it.\nOK, so that is certainly a",
    "start": "1608000",
    "end": "1616000"
  },
  {
    "text": "common sequence of x of one to I\nminus one, and y of one to j.",
    "start": "1616000",
    "end": "1631000"
  },
  {
    "text": "And it has length bigger than k\nbecause it's basically,",
    "start": "1631000",
    "end": "1638000"
  },
  {
    "text": "what is its length?\nThe length of w is bigger than",
    "start": "1638000",
    "end": "1644000"
  },
  {
    "text": "k minus one.\nI add one character. So, this combination here,\nnow, has length bigger that k.",
    "start": "1644000",
    "end": "1657000"
  },
  {
    "text": "OK, and that's a contradiction,\nthereby proving the claim.",
    "start": "1657000",
    "end": "1663000"
  },
  {
    "text": "So, I'm simply saying,\nI claim this. Suppose you have a longer one.\nWell, let me show,",
    "start": "1663000",
    "end": "1672000"
  },
  {
    "text": "if I had a longer common\nsequence for the prefixes where",
    "start": "1672000",
    "end": "1678000"
  },
  {
    "text": "we dropped the character from\nboth strings if it was longer",
    "start": "1678000",
    "end": "1685000"
  },
  {
    "text": "there, but we would have made\nthe whole thing longer.",
    "start": "1685000",
    "end": "1692000"
  },
  {
    "text": "So that can't be.\nSo, therefore, this must be a longest common\nsubsequence, OK?",
    "start": "1692000",
    "end": "1702000"
  },
  {
    "text": "Questions?\nBecause you are going to need to be able to do this kind of\nproof ad nauseam,",
    "start": "1702000",
    "end": "1713000"
  },
  {
    "text": "almost.\nSo, if there any questions,",
    "start": "1713000",
    "end": "1719000"
  },
  {
    "text": "let them at me,\npeople. OK, so now what we have\nestablished is that z one",
    "start": "1719000",
    "end": "1727000"
  },
  {
    "text": "through k is a longest common\nsubsequence of the two prefixes",
    "start": "1727000",
    "end": "1735000"
  },
  {
    "text": "when we drop the last character.\nSo, thus, we have c of i minus",
    "start": "1735000",
    "end": "1745000"
  },
  {
    "text": "one, j minus one is equal to\nwhat?",
    "start": "1745000",
    "end": "1751000"
  },
  {
    "text": "What's c of i minus one,\nj minus one?",
    "start": "1751000",
    "end": "1759000"
  },
  {
    "start": "1759000",
    "end": "1771000"
  },
  {
    "text": "k minus one;\nthank you. Let's move on with the class,\nright, OK, which implies that c",
    "start": "1771000",
    "end": "1780000"
  },
  {
    "text": "of ij is just equal to c of I\nminus one, j minus one plus one.",
    "start": "1780000",
    "end": "1787000"
  },
  {
    "text": "So, it's fairly straightforward\nif you think about what's going",
    "start": "1787000",
    "end": "1794000"
  },
  {
    "text": "on there.\nIt's not always as straightforward in some problems\nas it is for longest common",
    "start": "1794000",
    "end": "1804000"
  },
  {
    "text": "subsequence.\nThe idea is, so I'm not going to go through\nthe other cases.",
    "start": "1804000",
    "end": "1813000"
  },
  {
    "text": "They are similar.\nBut, in fact, we've hit on one of the two\nhallmarks of dynamic",
    "start": "1813000",
    "end": "1821000"
  },
  {
    "text": "programming.\nSo, by hallmarks, I mean when you see this kind\nof structure in a problem,",
    "start": "1821000",
    "end": "1830000"
  },
  {
    "text": "there's a good chance that\ndynamic programming is going to",
    "start": "1830000",
    "end": "1836000"
  },
  {
    "text": "work as a strategy.\nThe dynamic programming hallmark is the following.",
    "start": "1836000",
    "end": "1844000"
  },
  {
    "start": "1844000",
    "end": "1855000"
  },
  {
    "text": "This is number one.\nAnd that is the property of",
    "start": "1855000",
    "end": "1862000"
  },
  {
    "text": "optimal substructure.\nOK, what that says is an",
    "start": "1862000",
    "end": "1869000"
  },
  {
    "text": "optimal solution to a problem,\nand by this,",
    "start": "1869000",
    "end": "1876000"
  },
  {
    "text": "we really mean problem\ninstance. But it's tedious to keep saying\nproblem instance.",
    "start": "1876000",
    "end": "1891000"
  },
  {
    "text": "A problem is generally,\nin computer science, viewed as having an infinite\nnumber of instances typically,",
    "start": "1891000",
    "end": "1902000"
  },
  {
    "text": "OK, so sorting is a problem.\nA sorting instance is a",
    "start": "1902000",
    "end": "1908000"
  },
  {
    "text": "particular input.\nOK, so we're really talking about problem instances,\nbut I'm just going to say",
    "start": "1908000",
    "end": "1919000"
  },
  {
    "text": "problem, OK?\nSo, when you have an optimal solution to a problem,\ncontains optimal solutions to",
    "start": "1919000",
    "end": "1929000"
  },
  {
    "text": "subproblems.\nOK, and that's worth drawing a",
    "start": "1929000",
    "end": "1937000"
  },
  {
    "text": "box around because it's so\nimportant. OK, so here,\nfor example,",
    "start": "1937000",
    "end": "1945000"
  },
  {
    "text": "if z is a longest common\nsubsequence of x and y,",
    "start": "1945000",
    "end": "1953000"
  },
  {
    "text": "OK, then any prefix of z is a\nlongest common subsequence of a",
    "start": "1953000",
    "end": "1975000"
  },
  {
    "text": "prefix of x, and a prefix of y,\nOK?",
    "start": "1975000",
    "end": "1989000"
  },
  {
    "text": "So, this is basically what it\nsays. I look at the problem,\nand I can see that there is",
    "start": "1989000",
    "end": "1996000"
  },
  {
    "text": "optimal substructure going on.\nOK, in this case, and the idea is that almost\nalways, it means that there's a",
    "start": "1996000",
    "end": "2006000"
  },
  {
    "text": "cut and paste argument you could\ndo to demonstrate that,",
    "start": "2006000",
    "end": "2012000"
  },
  {
    "text": "OK, that if the substructure\nwere not optimal, then you'd be able to find a\nbetter solution to the overall",
    "start": "2012000",
    "end": "2021000"
  },
  {
    "text": "problem using cut and paste.\nOK, so this theorem,",
    "start": "2021000",
    "end": "2029000"
  },
  {
    "text": "now, gives us a strategy for\nbeing able to compute longest",
    "start": "2029000",
    "end": "2037000"
  },
  {
    "start": "2030000",
    "end": "2280000"
  },
  {
    "text": "comment subsequence. ",
    "start": "2037000",
    "end": "2064000"
  },
  {
    "text": "Here's the code; oh wait. ",
    "start": "2064000",
    "end": "2078000"
  },
  {
    "text": "OK, so going to ignore base\ncases in this, if -- ",
    "start": "2078000",
    "end": "2144000"
  },
  {
    "text": "And we will return the value of\nthe longest common subsequence.",
    "start": "2144000",
    "end": "2154000"
  },
  {
    "text": "It's basically just\nimplementing this theorem.",
    "start": "2154000",
    "end": "2162000"
  },
  {
    "text": "OK, so it's either the longest\ncomment subsequence if they match.\nIt's the longest comment",
    "start": "2162000",
    "end": "2169000"
  },
  {
    "text": "subsequence of one of the\nprefixes where you drop that character for both strengths and\nadd one because that's the",
    "start": "2169000",
    "end": "2178000"
  },
  {
    "text": "matching one.\nOr, you drop a character from x, and it's the longest comment\nsubsequence of that.",
    "start": "2178000",
    "end": "2186000"
  },
  {
    "text": "Or you drop a character from y,\nwhichever one of those is longer.\nThat ends up being the longest",
    "start": "2186000",
    "end": "2194000"
  },
  {
    "text": "comment subsequence.\nOK, so what's the worst case",
    "start": "2194000",
    "end": "2203000"
  },
  {
    "text": "for this program?\nWhat's going to happen in the",
    "start": "2203000",
    "end": "2212000"
  },
  {
    "text": "worst case?\nWhich of these two clauses is",
    "start": "2212000",
    "end": "2220000"
  },
  {
    "text": "going to cause us more headache?\nThe second clause:",
    "start": "2220000",
    "end": "2229000"
  },
  {
    "text": "why the second clause?\nYeah, you're doing two LCS sub-calculations here.\nHere, you're only doing one.",
    "start": "2229000",
    "end": "2236000"
  },
  {
    "text": "Not only that,\nbut you get to decrement both indices, whereas here you've\nbasically got to,",
    "start": "2236000",
    "end": "2242000"
  },
  {
    "text": "you only get to decrement one\nindex, and you've got to calculate two of them.\nSo that's going to generate the",
    "start": "2242000",
    "end": "2249000"
  },
  {
    "text": "tree.\nSo, and the worst case, x of i is not equal to x of j\nfor all i and j.",
    "start": "2249000",
    "end": "2262000"
  },
  {
    "text": "So, let's draw a recursion tree\nfor this program to sort of get",
    "start": "2262000",
    "end": "2272000"
  },
  {
    "text": "an understanding as to what is\ngoing on to help us.",
    "start": "2272000",
    "end": "2282000"
  },
  {
    "start": "2280000",
    "end": "2550000"
  },
  {
    "text": "And, I'm going to do it with m\nequals seven, and n equals six.\nOK, so we start up the top with",
    "start": "2282000",
    "end": "2292000"
  },
  {
    "text": "my two indices being seven and\nsix. And then, in the worst case,\nwe had to execute these.",
    "start": "2292000",
    "end": "2302000"
  },
  {
    "text": "So, this is going to end up\nbeing six, six, and seven, five for indices\nafter the first call.",
    "start": "2302000",
    "end": "2314000"
  },
  {
    "text": "And then, this guy is going to\nsplit. And he's going to produce five,\nsix here, decrement the first",
    "start": "2314000",
    "end": "2324000"
  },
  {
    "text": "index, I.\nAnd then, if I keep going down here, we're going to get four,\nsix and five,",
    "start": "2324000",
    "end": "2332000"
  },
  {
    "text": "five.\nAnd these guys keep extending here.\nI get six five,",
    "start": "2332000",
    "end": "2338000"
  },
  {
    "text": "five five, six four,\nOK? Over here, I'm going to get\ndecrement the first index,",
    "start": "2338000",
    "end": "2348000"
  },
  {
    "text": "six five, and I get five five,\nsix four, and these guys keep",
    "start": "2348000",
    "end": "2355000"
  },
  {
    "text": "going down.\nAnd over here, I get seven four.\nAnd then we get six four,",
    "start": "2355000",
    "end": "2362000"
  },
  {
    "text": "seven three,\nand those keep going down. So, we keep just building this\ntree out.",
    "start": "2362000",
    "end": "2373000"
  },
  {
    "text": "OK, so what's the height of\nthis tree? Not of this one for the\nparticular value of m and n,",
    "start": "2373000",
    "end": "2386000"
  },
  {
    "text": "but in terms of m and n.\nWhat's the height of this tree?",
    "start": "2386000",
    "end": "2394000"
  },
  {
    "text": "It's the max of m and n.\nYou've got the right,",
    "start": "2394000",
    "end": "2401000"
  },
  {
    "text": "it's theta of the max.\nIt's not the max.",
    "start": "2401000",
    "end": "2407000"
  },
  {
    "text": "Max would be,\nin this case, you're saying it has height\nseven.",
    "start": "2407000",
    "end": "2414000"
  },
  {
    "text": "But, I think you can sort of\nsee, for example, along a path like this that,\nin fact, I've only,",
    "start": "2414000",
    "end": "2423000"
  },
  {
    "text": "after going three levels,\nreduced m plus n, good, very good,\nm plus n.",
    "start": "2423000",
    "end": "2432000"
  },
  {
    "text": "So, height here is m plus n.\nOK, and its binary.",
    "start": "2432000",
    "end": "2439000"
  },
  {
    "text": "So, the height:\nthat implies the work is",
    "start": "2439000",
    "end": "2445000"
  },
  {
    "text": "exponential in m and n.\nAll that work,",
    "start": "2445000",
    "end": "2451000"
  },
  {
    "text": "and are we any better off than\nthe brute force algorithm?",
    "start": "2451000",
    "end": "2461000"
  },
  {
    "text": "Not really.\nAnd, our technical term for this is slow.\nOK, and we like speed.",
    "start": "2461000",
    "end": "2469000"
  },
  {
    "text": "OK, we like fast.\nOK, but I'm sure that some of you have observed something\ninteresting about this tree.",
    "start": "2469000",
    "end": "2480000"
  },
  {
    "text": "Yeah, there's a lot of repeated\nwork here. Right, there's a lot of\nrepeated work.",
    "start": "2480000",
    "end": "2491000"
  },
  {
    "text": "In particular,\nthis whole subtree, and this whole subtree,\nOK, they are the same.",
    "start": "2491000",
    "end": "2500000"
  },
  {
    "text": "That's the same subtree,\nthe same subproblem that you",
    "start": "2500000",
    "end": "2506000"
  },
  {
    "text": "are solving.\nOK, you can even see over here, there is even similarity\nbetween this whole subtree and",
    "start": "2506000",
    "end": "2518000"
  },
  {
    "text": "this whole subtree.\nOK, so there's lots of repeated work.\nOK, and one thing is,",
    "start": "2518000",
    "end": "2528000"
  },
  {
    "text": "if you want to do things fast,\ndon't keep doing the same thing.\nOK, don't keep doing the same",
    "start": "2528000",
    "end": "2537000"
  },
  {
    "text": "thing.\nWhen you find you are repeating something, figure out a way of\nnot doing it.",
    "start": "2537000",
    "end": "2545000"
  },
  {
    "text": "So, that brings up our second\nhallmark for dynamic programming.",
    "start": "2545000",
    "end": "2553000"
  },
  {
    "start": "2550000",
    "end": "2910000"
  },
  {
    "start": "2553000",
    "end": "2570000"
  },
  {
    "text": "And that's a property called\noverlapping subproblems,",
    "start": "2570000",
    "end": "2587000"
  },
  {
    "text": "OK?\nOK, recursive solution contains",
    "start": "2587000",
    "end": "2599000"
  },
  {
    "text": "many, excuse me,\ncontains a small number of",
    "start": "2599000",
    "end": "2613000"
  },
  {
    "text": "distinct subproblems repeated\nmany times.",
    "start": "2613000",
    "end": "2630000"
  },
  {
    "text": "And once again,\nthis is important enough to put a box around.\nI don't put boxes around too",
    "start": "2630000",
    "end": "2638000"
  },
  {
    "text": "many things.\nMaybe I should put our boxes around things.\nThis is definitely one to put a",
    "start": "2638000",
    "end": "2645000"
  },
  {
    "text": "box around, OK?\nSo, for example, so here we have a recursive\nsolution.",
    "start": "2645000",
    "end": "2652000"
  },
  {
    "text": "This tree is exponential in\nsize. It's two to the m plus n in\nheight, in size,",
    "start": "2652000",
    "end": "2659000"
  },
  {
    "text": "in the total number of problems\nif I actually implemented like that.\nBut how many distinct",
    "start": "2659000",
    "end": "2667000"
  },
  {
    "text": "subproblems are there?\nm times n, OK?",
    "start": "2667000",
    "end": "2673000"
  },
  {
    "text": "So, the longest comment\nsubsequence, the subproblem",
    "start": "2673000",
    "end": "2682000"
  },
  {
    "text": "space contains m times n,\ndistinct subproblems.",
    "start": "2682000",
    "end": "2689000"
  },
  {
    "text": "OK, and then this is a small\nnumber compared with two to the",
    "start": "2689000",
    "end": "2700000"
  },
  {
    "text": "m plus n, or two to the n,\nor two to the m,",
    "start": "2700000",
    "end": "2707000"
  },
  {
    "text": "or whatever.\nOK, this is small,",
    "start": "2707000",
    "end": "2713000"
  },
  {
    "text": "OK, because for each\nsubproblem, it's characterized",
    "start": "2713000",
    "end": "2719000"
  },
  {
    "text": "by an I and a j.\nAn I goes from one to m, and j goes from one to n,\nOK?",
    "start": "2719000",
    "end": "2727000"
  },
  {
    "text": "There aren't that many\ndifferent subproblems.",
    "start": "2727000",
    "end": "2734000"
  },
  {
    "text": "It's just the product of the\ntwo. So, here's an improved\nalgorithm, which is often a good",
    "start": "2734000",
    "end": "2741000"
  },
  {
    "text": "way to solve it.\nIt's an algorithm called a memo-ization algorithm.",
    "start": "2741000",
    "end": "2748000"
  },
  {
    "start": "2748000",
    "end": "2756000"
  },
  {
    "text": "And, this is memo-ization,\nnot memorization because what",
    "start": "2756000",
    "end": "2762000"
  },
  {
    "text": "you're going to do is make a\nlittle memo whenever you solve a",
    "start": "2762000",
    "end": "2769000"
  },
  {
    "text": "subproblem.\nMake a little memo that says I solved this already.\nAnd if ever you are asked for",
    "start": "2769000",
    "end": "2779000"
  },
  {
    "text": "it rather than recalculating it,\nsay, oh, I see that.",
    "start": "2779000",
    "end": "2785000"
  },
  {
    "text": "I did that before.\nHere's the answer, OK?\nSo, here's the code.",
    "start": "2785000",
    "end": "2792000"
  },
  {
    "text": "It's very similar to that code.\nSo, it basically keeps a table",
    "start": "2792000",
    "end": "2800000"
  },
  {
    "text": "around of c[i,j].\nIt says, what we do is we check.\nIf the entry for c[i,j] is nil,",
    "start": "2800000",
    "end": "2807000"
  },
  {
    "text": "we haven't computed it,\nthen we compute it. And, how do we compute it?\nJust the same way we did",
    "start": "2807000",
    "end": "2815000"
  },
  {
    "text": "before. ",
    "start": "2815000",
    "end": "2854000"
  },
  {
    "text": "OK, so this whole part here,\nOK, is exactly what we have had",
    "start": "2854000",
    "end": "2865000"
  },
  {
    "text": "before.\nIt's the same as before.",
    "start": "2865000",
    "end": "2871000"
  },
  {
    "text": "And then, we just return\nc[i,j].",
    "start": "2871000",
    "end": "2879000"
  },
  {
    "text": "If we don't bother to keep\nrecalculating, OK, so if it's nil,\nwe calculate it.",
    "start": "2879000",
    "end": "2887000"
  },
  {
    "text": "Otherwise, we just return it.\nIt's not calculated, calculate and return it.\nOtherwise, just return it:",
    "start": "2887000",
    "end": "2898000"
  },
  {
    "text": "OK, pretty straightforward\ncode. OK. ",
    "start": "2898000",
    "end": "2913000"
  },
  {
    "text": "OK, now the tricky thing is how\nmuch time does it take to execute this?",
    "start": "2913000",
    "end": "2920000"
  },
  {
    "start": "2920000",
    "end": "2938000"
  },
  {
    "text": "This takes a little bit of\nthinking.",
    "start": "2938000",
    "end": "2944000"
  },
  {
    "text": "Yeah?\nYeah, it takes order MN.",
    "start": "2944000",
    "end": "2950000"
  },
  {
    "text": "OK, why is that?\nYeah, but I have to look up",
    "start": "2950000",
    "end": "2958000"
  },
  {
    "text": "c[i,j].\nI might call c[i,j] a bunch of",
    "start": "2958000",
    "end": "2965000"
  },
  {
    "text": "times.\nWhen I'm doing this, I'm still calling it\nrecursively.",
    "start": "2965000",
    "end": "2978000"
  },
  {
    "text": "Yeah, so you have to,\nso each recursive call is going to look at, and the worst-case,\nsay, is going to look at the",
    "start": "2978000",
    "end": "2990000"
  },
  {
    "text": "max of these two things.\nWell, this is going to involve a recursive call,\nand a lookup.",
    "start": "2990000",
    "end": "3000000"
  },
  {
    "text": "So, this might take a fair\namount of effort to calculate. I mean, you're right,\nand your intuition is right.",
    "start": "3000000",
    "end": "3009000"
  },
  {
    "text": "Let's see if we can get a more\nprecise argument, why this is taking order m\ntimes n.",
    "start": "3009000",
    "end": "3017000"
  },
  {
    "text": "What's going on here?\nBecause not every time I call this is it going to just take me\na constant amount of work to do",
    "start": "3017000",
    "end": "3027000"
  },
  {
    "text": "this.\nSometimes it's going to take me a lot of work.\nSometimes I get lucky,",
    "start": "3027000",
    "end": "3034000"
  },
  {
    "text": "and I return it.\nSo, your intuition is dead on.",
    "start": "3034000",
    "end": "3041000"
  },
  {
    "text": "It's dead on.\nWe just need a little bit more",
    "start": "3041000",
    "end": "3047000"
  },
  {
    "text": "articulate explanation,\nso that everybody is on board.",
    "start": "3047000",
    "end": "3055000"
  },
  {
    "text": "Try again?\nGood, at most three times,",
    "start": "3055000",
    "end": "3061000"
  },
  {
    "text": "yeah.\nOK, so that's one way to look at it.\nYeah. There is another way to look at\nit that's kind of what you are",
    "start": "3061000",
    "end": "3069000"
  },
  {
    "text": "expressing there is an\namortized, a bookkeeping, way of looking at this.\nWhat's the amortized cost?",
    "start": "3069000",
    "end": "3075000"
  },
  {
    "text": "You could say what the\namortized cost of calculating one of these,\nwhere basically whenever I call",
    "start": "3075000",
    "end": "3081000"
  },
  {
    "text": "it, I'm going to charge a\nconstant amount for looking up. And so, I could get to look up\nwhatever is in here to call the",
    "start": "3081000",
    "end": "3088000"
  },
  {
    "text": "things.\nBut if it, in fact, so in some sense,\nthis charge here,",
    "start": "3088000",
    "end": "3095000"
  },
  {
    "text": "of calling it and returning it,\netc., I charged that to my",
    "start": "3095000",
    "end": "3101000"
  },
  {
    "text": "caller.\nOK, so I charged these lines and this line to the caller.\nAnd I charge the rest of these",
    "start": "3101000",
    "end": "3110000"
  },
  {
    "text": "lines to the c[i,j] element.\nAnd then, the point is that every caller basically only ends\nup being charged for a constant",
    "start": "3110000",
    "end": "3122000"
  },
  {
    "text": "amount of stuff.\nOK, to calculate one c[i,j], it's only an amortized constant\namount of stuff that I'm",
    "start": "3122000",
    "end": "3131000"
  },
  {
    "text": "charging to that calculation of\ni and j, that calculation of i and j.\nOK, so you can view it in terms",
    "start": "3131000",
    "end": "3139000"
  },
  {
    "text": "of amortized analysis doing a\nbookkeeping argument that just says, let me charge enough to\ncalculate my own,",
    "start": "3139000",
    "end": "3147000"
  },
  {
    "text": "do all my own local things plus\nenough to look up the value in the next level and get it\nreturned.",
    "start": "3147000",
    "end": "3156000"
  },
  {
    "text": "OK, and then if it has to go\noff and calculate, well, that's OK because that's\nall been charged to a different",
    "start": "3156000",
    "end": "3166000"
  },
  {
    "text": "ij at that point.\nSo, every cell only costs me a constant amount of time that\norder MN cells total of order",
    "start": "3166000",
    "end": "3176000"
  },
  {
    "text": "MN.\nOK: constant work per entry. OK, and you can sort of use an\namortized analysis to argue",
    "start": "3176000",
    "end": "3184000"
  },
  {
    "text": "that.\nHow much space does it take? We haven't usually looked at\nspace, but here we are going to",
    "start": "3184000",
    "end": "3192000"
  },
  {
    "text": "start looking at space.\nThat turns out, for some of these algorithms,\nto be really important.",
    "start": "3192000",
    "end": "3200000"
  },
  {
    "text": "How much space do I need,\nstorage space? Yeah, also m times n,\nOK, to store the c[i,j] table.",
    "start": "3200000",
    "end": "3208000"
  },
  {
    "text": "OK, the rest,\nstoring x and y, OK, that's just m plus n.\nSo, that's negligible,",
    "start": "3208000",
    "end": "3215000"
  },
  {
    "text": "but mostly I need the space m\ntimes n. So, this memo-ization type\nalgorithm is a really good",
    "start": "3215000",
    "end": "3221000"
  },
  {
    "text": "strategy in programming for many\nthings where, when you have the same\nparameters, you're going to get",
    "start": "3221000",
    "end": "3228000"
  },
  {
    "text": "the same results.\nIt doesn't work in programs where you have a side effect,\nnecessarily, that is, when the calculation\nfor a given set of parameters",
    "start": "3228000",
    "end": "3237000"
  },
  {
    "text": "might be different on each call.\nBut for something which is",
    "start": "3237000",
    "end": "3243000"
  },
  {
    "text": "essentially like a functional\nprogramming type of environment, then if you've calculated it\nonce, you can look it up.",
    "start": "3243000",
    "end": "3253000"
  },
  {
    "text": "And, so this is very helpful.\nBut, it takes a fair amount of",
    "start": "3253000",
    "end": "3259000"
  },
  {
    "text": "space, and it also doesn't\nproceed in a very orderly way. So, there is another strategy\nfor doing exactly the same",
    "start": "3259000",
    "end": "3269000"
  },
  {
    "text": "calculation in a bottom-up way.\nAnd that's what we call dynamic programming.\nOK, the idea is to compute the",
    "start": "3269000",
    "end": "3282000"
  },
  {
    "text": "table bottom-up.\nI think I'm going to get rid",
    "start": "3282000",
    "end": "3289000"
  },
  {
    "text": "of, I think what we'll do is\nwe'll just use,",
    "start": "3289000",
    "end": "3296000"
  },
  {
    "text": "actually I think what I'm going\nto do is use this board.",
    "start": "3296000",
    "end": "3307000"
  },
  {
    "start": "3307000",
    "end": "3333000"
  },
  {
    "text": "OK, so here's the idea.\nWhat we're going to do is look at the c[i,j] table and realize\nthat there's actually an orderly",
    "start": "3333000",
    "end": "3345000"
  },
  {
    "text": "way of filling in the table.\nThis is sort of a top-down with",
    "start": "3345000",
    "end": "3351000"
  },
  {
    "text": "memo-ization.\nOK, but there's actually a way we can do it bottom up.\nSo, here's the idea.",
    "start": "3351000",
    "end": "3360000"
  },
  {
    "text": "So, let's make our table.\nOK, so there's x.",
    "start": "3360000",
    "end": "3367000"
  },
  {
    "text": "And then, there's y.\nAnd, I'm going to initialize",
    "start": "3367000",
    "end": "3378000"
  },
  {
    "text": "the empty string.\nI didn't cover the base cases",
    "start": "3378000",
    "end": "3388000"
  },
  {
    "text": "for c[i,j], but c of zero\nmeaning a prefix with no",
    "start": "3388000",
    "end": "3399000"
  },
  {
    "text": "elements in it.\nThe prefix of that with",
    "start": "3399000",
    "end": "3405000"
  },
  {
    "text": "anything else,\nthe length is zero. OK, so that's basically how I'm\ngoing to bound the borders here.",
    "start": "3405000",
    "end": "3413000"
  },
  {
    "text": "And now, what I can do is just\nuse my formula, which I've conveniently erased\nup there, OK,",
    "start": "3413000",
    "end": "3420000"
  },
  {
    "text": "to compute what is the longest\ncommon subsequence, length of the longest comment\nsubsequence from this character",
    "start": "3420000",
    "end": "3429000"
  },
  {
    "text": "in y, and this character in x up\nto this character.",
    "start": "3429000",
    "end": "3435000"
  },
  {
    "text": "So here, for example,\nthey don't match. So, it's the maximum of these\ntwo values.",
    "start": "3435000",
    "end": "3444000"
  },
  {
    "text": "Here, they do match.\nOK, so it says it's one plus the value here.\nAnd, I'm going to draw a line.",
    "start": "3444000",
    "end": "3454000"
  },
  {
    "text": "Whenever I'm going to get a\nmatch, I'm going to draw a line like that, indicating that I had\nthat first case,",
    "start": "3454000",
    "end": "3461000"
  },
  {
    "text": "the case where they had a good\nmatch. And so, all I'm doing is\napplying that recursive formula",
    "start": "3461000",
    "end": "3467000"
  },
  {
    "text": "from the theorem that we proved.\nSo here, it's basically they don't match.\nSo, it's the maximum of those",
    "start": "3467000",
    "end": "3474000"
  },
  {
    "text": "two.\nHere, they match. So, it's one plus that guy.\nHere, they don't match.",
    "start": "3474000",
    "end": "3481000"
  },
  {
    "text": "So, it's basically the maximum\nof these two. Here, they don't match.\nSo it's the maximum.",
    "start": "3481000",
    "end": "3491000"
  },
  {
    "text": "So, it's one plus that guy.\nSo, everybody understand how I",
    "start": "3491000",
    "end": "3497000"
  },
  {
    "text": "filled out that first row?\nOK, well that you guys can",
    "start": "3497000",
    "end": "3503000"
  },
  {
    "text": "help.\nOK, so this one is what? Just call it out.\nZero, good.",
    "start": "3503000",
    "end": "3512000"
  },
  {
    "text": "One, because it's the maximum,\none, two, right.",
    "start": "3512000",
    "end": "3521000"
  },
  {
    "text": "This one, now,\ngets from there,",
    "start": "3521000",
    "end": "3527000"
  },
  {
    "text": "two, two.\nOK, here, zero, one, because it's the maximum\nof those two.",
    "start": "3527000",
    "end": "3543000"
  },
  {
    "text": "Two, two, two,\ngood.",
    "start": "3543000",
    "end": "3555000"
  },
  {
    "text": "One, one, two,\ntwo, two, three,",
    "start": "3555000",
    "end": "3574000"
  },
  {
    "text": "three.\nOne, two, three,",
    "start": "3574000",
    "end": "3588000"
  },
  {
    "text": "get that line,\nthree, four,",
    "start": "3588000",
    "end": "3600250"
  },
  {
    "text": "OK.\nOne there, three,",
    "start": "3600250",
    "end": "3605974"
  },
  {
    "text": "three, four,\ngood, four. OK, and our answer:\nfour.",
    "start": "3605974",
    "end": "3614199"
  },
  {
    "text": "So this is blindingly fast code\nif you code this up,",
    "start": "3614199",
    "end": "3623125"
  },
  {
    "text": "OK, because it gets to use the\nfact that modern machines in",
    "start": "3623125",
    "end": "3633275"
  },
  {
    "text": "particular do very well on\nregular strides through memory.",
    "start": "3633275",
    "end": "3645000"
  },
  {
    "text": "So, if you're just plowing\nthrough memory across like this,",
    "start": "3645000",
    "end": "3650012"
  },
  {
    "text": "OK, and your two-dimensional\narray is stored in that order,",
    "start": "3650012",
    "end": "3655024"
  },
  {
    "text": "which it is,\notherwise you go this way, stored in that order.\nThis can really fly in terms of",
    "start": "3655024",
    "end": "3662802"
  },
  {
    "text": "the speed of the calculation.\nSo, how much time did it take",
    "start": "3662802",
    "end": "3671948"
  },
  {
    "text": "us to do this?\nYeah, order MN,",
    "start": "3671948",
    "end": "3677897"
  },
  {
    "text": "theta MN.\nYeah? We'll talk about space in just\na minute.",
    "start": "3677897",
    "end": "3690000"
  },
  {
    "text": "OK, so hold that question.\nGood question, good question,\nalready, wow,",
    "start": "3690000",
    "end": "3696491"
  },
  {
    "text": "good, OK, how do I now figure\nout, remember, we had the simplification.\nWe were going to just calculate",
    "start": "3696491",
    "end": "3706179"
  },
  {
    "text": "the length.\nOK, it turns out I can now figure out a particular sequence\nthat matches it.",
    "start": "3706179",
    "end": "3714414"
  },
  {
    "text": "And basically,\nI do that. I can reconstruct the longest\ncommon subsequence by tracing",
    "start": "3714415",
    "end": "3724932"
  },
  {
    "text": "backwards.\nSo essentially I start here. Here I have a choice because\nthis one was dependent on,",
    "start": "3724932",
    "end": "3735928"
  },
  {
    "text": "since it doesn't have a bar\nhere, it was dependent on one of",
    "start": "3735928",
    "end": "3742980"
  },
  {
    "text": "these two.\nSo, let me go this way.",
    "start": "3742980",
    "end": "3748000"
  },
  {
    "text": "OK, and now I have a diagonal\nelement here.",
    "start": "3748000",
    "end": "3753444"
  },
  {
    "text": "So what I'll do is simply mark\nthe character that appeared in",
    "start": "3753444",
    "end": "3761222"
  },
  {
    "text": "those positions as I go this\nway. I have three here.\nAnd now, let me keep going,",
    "start": "3761222",
    "end": "3771203"
  },
  {
    "text": "three here, and now I have\nanother one. So that means this character\ngets selected.",
    "start": "3771203",
    "end": "3783000"
  },
  {
    "text": "And then I go up to here,\nOK, and then up to here.",
    "start": "3783000",
    "end": "3788632"
  },
  {
    "text": "And now I go diagonally again,\nwhich means that this character",
    "start": "3788632",
    "end": "3795643"
  },
  {
    "text": "is selected.\nAnd I go to here, and then I go here.\nAnd then, I go up here and this",
    "start": "3795643",
    "end": "3804724"
  },
  {
    "text": "character is selected.\nSo here is my longest common",
    "start": "3804724",
    "end": "3810471"
  },
  {
    "text": "subsequence.\nAnd this was just one path back.\nI could have gone a path like",
    "start": "3810471",
    "end": "3817843"
  },
  {
    "text": "this and gotten a different\nlongest common subsequence. OK, so that simplification of\njust saying, look,",
    "start": "3817843",
    "end": "3825996"
  },
  {
    "text": "let me just run backwards and\nfigure it out, that's actually pretty good\nbecause it means that by just",
    "start": "3825997",
    "end": "3833989"
  },
  {
    "text": "calculating the value,\nthen figuring out these back pointers to let me reconstruct\nit is a fairly simple process.",
    "start": "3833989",
    "end": "3844000"
  },
  {
    "text": "OK, if I had to think about\nthat to begin with,",
    "start": "3844000",
    "end": "3850075"
  },
  {
    "text": "it would have been a much\nbigger mess. OK, so the space,\nI just mentioned,",
    "start": "3850075",
    "end": "3859452"
  },
  {
    "text": "was order MN because we still\nneed the table.",
    "start": "3859452",
    "end": "3865264"
  },
  {
    "text": "So, you can actually do the min\nof m and n.",
    "start": "3865264",
    "end": "3872000"
  },
  {
    "text": "OK, to get to your question,\nhow do you do the min of m and",
    "start": "3872000",
    "end": "3877970"
  },
  {
    "text": "n?\nDiagonal stripes won't give you min of m and n.\nThat'll give you the sum of m",
    "start": "3877970",
    "end": "3885897"
  },
  {
    "text": "and n.\nSo, going in stripes, maybe I'm not quite sure I know\nwhat you mean.",
    "start": "3885897",
    "end": "3893308"
  },
  {
    "text": "So, you're saying,\nso what's the order I would do here?\nSo, I would start.",
    "start": "3893308",
    "end": "3901661"
  },
  {
    "text": "I would do this one first.\nThen which one would I do? This one and this one?\nAnd then, this one,",
    "start": "3901661",
    "end": "3910245"
  },
  {
    "text": "this one, this one,\nlike this? That's a perfectly good order.\nOK, and so you're saying,",
    "start": "3910246",
    "end": "3918000"
  },
  {
    "text": "then, so I'm keeping the\ndiagonal there all the time. So, you're saying the length of\nthe diagonal is the min of m and",
    "start": "3918000",
    "end": "3928615"
  },
  {
    "text": "n?\nI think that's right. OK, there is another way you\ncan do it that's a little bit",
    "start": "3928615",
    "end": "3936068"
  },
  {
    "text": "more straightforward,\nwhich is you compare m to n. Whichever is smaller,\nwell, first of all,",
    "start": "3936068",
    "end": "3942993"
  },
  {
    "text": "let's just do this existing\nalgorithm. If I just simply did row by\nrow, I don't need more than a",
    "start": "3942993",
    "end": "3950228"
  },
  {
    "text": "previous row.\nOK, I just need one row at a time.\nSo, I can go ahead and compute",
    "start": "3950228",
    "end": "3956140"
  },
  {
    "text": "just one row because once I\ncomputed the succeeding row, the first row is unimportant.\nAnd in fact,",
    "start": "3956141",
    "end": "3964910"
  },
  {
    "text": "I don't even need the whole\nrow. All I need is just the current\nrow that I'm on,",
    "start": "3964910",
    "end": "3970754"
  },
  {
    "text": "plus one or two elements of the\nprevious row, plus the end of the previous\nrow.",
    "start": "3970754",
    "end": "3976522"
  },
  {
    "text": "So, I use a prefix of this row,\nand an extra two elements, and the suffix of this row.\nSo, it's actually,",
    "start": "3976522",
    "end": "3984263"
  },
  {
    "text": "you can do it with one row,\nplus order one element. And then, I could do it either\nrunning vertically or running",
    "start": "3984263",
    "end": "3992535"
  },
  {
    "text": "horizontally,\nwhichever one gives me the smaller space.\nOK, and it might be that your",
    "start": "3992535",
    "end": "4000303"
  },
  {
    "text": "diagonal trick would work there\ntoo. I'd have to think about that.\nYeah?",
    "start": "4000303",
    "end": "4005785"
  },
  {
    "text": "Ooh, that's a good question.\nSo, you can do the calculation of the length,\nand run row plus order one",
    "start": "4005785",
    "end": "4013570"
  },
  {
    "text": "elements.\nOK, and our exercise, and this is a hard exercise,\nOK, so that a good one to do is",
    "start": "4013570",
    "end": "4024203"
  },
  {
    "text": "to do small space and allow you\nto reconstruct the LCS because",
    "start": "4024203",
    "end": "4031221"
  },
  {
    "text": "the naÔve way that we were just\ndoing it, it's not clear how you",
    "start": "4031221",
    "end": "4038469"
  },
  {
    "text": "would go backwards from that\nbecause you've lost the",
    "start": "4038469",
    "end": "4044336"
  },
  {
    "text": "information.\nOK, so this is actually a very interesting and tricky problem.\nAnd, it turns out it succumbs",
    "start": "4044336",
    "end": "4057182"
  },
  {
    "text": "of all things to divide and\nconquer, OK, rather than some",
    "start": "4057182",
    "end": "4063328"
  },
  {
    "text": "more straightforward tabular\nthing. OK: so very good practice,\nfor example,",
    "start": "4063329",
    "end": "4071231"
  },
  {
    "text": "for the upcoming take home\nquiz, OK, which is all design",
    "start": "4071231",
    "end": "4077268"
  },
  {
    "text": "and cleverness type quiz.\nOK, so this is a good one for",
    "start": "4077268",
    "end": "4083493"
  },
  {
    "text": "people to take on.\nSo, this is basically the tabular method that's called\ndynamic programming.",
    "start": "4083493",
    "end": "4091318"
  },
  {
    "text": "OK, memo-ization is not dynamic\nprogramming, even though it's",
    "start": "4091319",
    "end": "4096479"
  },
  {
    "text": "related.\nIt's memo-ization. And, we're going to see a whole\nbunch of other problems that",
    "start": "4096479",
    "end": "4103788"
  },
  {
    "text": "succumb to dynamic programming\napproaches. It's a very cool method,\nand on the homework,",
    "start": "4103788",
    "end": "4111098"
  },
  {
    "text": "so let me just mention the\nhomework again. On the homework,\nwe're going to look at a",
    "start": "4111098",
    "end": "4118215"
  },
  {
    "text": "problem called the edit distance\nproblem. Edit distance is you are given\ntwo strings. And you can imagine that you're\ntyping in a keyboard with one of",
    "start": "4118216",
    "end": "4126255"
  },
  {
    "text": "the strings there.\nAnd what you have to do is by doing inserts,\nand deletes, and replaces,\nand moving the cursor around,",
    "start": "4126256",
    "end": "4132630"
  },
  {
    "text": "you've got to transform one\nstring to the next. And, each of those operations\nhas a cost. And your job is to minimize the\ncost of transforming the one",
    "start": "4132631",
    "end": "4140671"
  },
  {
    "text": "string into the other.\nThis actually turns out also to be useful for computational\nbiology applications.",
    "start": "4140671",
    "end": "4149537"
  },
  {
    "text": "And, in fact,\nthere have been editors, screen editors,\ntext editors,",
    "start": "4149537",
    "end": "4154917"
  },
  {
    "text": "that implement algorithms of\nthis nature in order to minimize the number of characters that\nhave to be sent as IO in and out",
    "start": "4154917",
    "end": "4164930"
  },
  {
    "text": "of the system.\nSo, the warning is, you better get going on your\nprogramming on problem one on",
    "start": "4164931",
    "end": "4173274"
  },
  {
    "text": "the homework today if at all\npossible because whenever I assign programming,\nsince we don't do that as sort",
    "start": "4173274",
    "end": "4181861"
  },
  {
    "text": "of a routine thing,\nI'm just concerned for some people that there will not be\nable to get things like the",
    "start": "4181862",
    "end": "4190283"
  },
  {
    "text": "input and output to work,\nand so forth. We have example problems,\nand such, on the website.",
    "start": "4190283",
    "end": "4197550"
  },
  {
    "text": "And we also have,\nyou can write it in any language you want,\nincluding Matlab,",
    "start": "4197550",
    "end": "4203743"
  },
  {
    "text": "Python, whatever your favorite,\nthe solutions will be written in Java and Python.\nOK, so the fastest solutions",
    "start": "4203743",
    "end": "4214425"
  },
  {
    "text": "are likely to be written in c.\nOK, you can also do it in assembly language if you care\nto.",
    "start": "4214425",
    "end": "4221960"
  },
  {
    "text": "You laugh.\nI used to be in assembly language programmer back in the\ndays of yore.",
    "start": "4221960",
    "end": "4228716"
  },
  {
    "text": "OK, so I do encourage people to\nget started on this because let",
    "start": "4228716",
    "end": "4234086"
  },
  {
    "text": "me mention, the other thing is\nthat this particular problem on",
    "start": "4234086",
    "end": "4239370"
  },
  {
    "text": "this problem set is an\nabsolutely mandatory problem.",
    "start": "4239370",
    "end": "4245000"
  },
  {
    "text": "OK, all the problems are\nmandatory, but as you know you can skip them and it doesn't\nhurt you too much if you only",
    "start": "4245000",
    "end": "4254583"
  },
  {
    "text": "skip one or two.\nThis one, you skip, hurts big time:\none letter grade.",
    "start": "4254583",
    "end": "4260367"
  },
  {
    "text": "It must be done.",
    "start": "4260367",
    "end": "4263000"
  }
]