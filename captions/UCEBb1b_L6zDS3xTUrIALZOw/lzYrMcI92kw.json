[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "6448"
  },
  {
    "start": "6448",
    "end": "16869"
  },
  {
    "text": "ANA BELL: So let's\nstart today's lecture. Today, we're going to be talking\nabout the idea of iteration.",
    "start": "16870",
    "end": "23440"
  },
  {
    "text": "And iteration is\nanother way we're going to add control\nflow to our programs.",
    "start": "23440",
    "end": "28700"
  },
  {
    "text": "But before we do that, let's\ndo a little bit of a recap on--",
    "start": "28700",
    "end": "34990"
  },
  {
    "text": "sorry, let's do a little\nbit of a recap of what we've done so far last lecture\nbecause last lecture, we actually introduced\na different mechanism",
    "start": "34990",
    "end": "41829"
  },
  {
    "text": "for control flow, branching. And the control flow is\nbasically a way for us to tell Python not\nto go systematically",
    "start": "41830",
    "end": "49300"
  },
  {
    "text": "through the code. Branching was a way for us\nto tell Python, hey, based on some condition\nbeing true or false,",
    "start": "49300",
    "end": "55719"
  },
  {
    "text": "either evaluate some set of\ncode or another set of code, which was not going linearly.",
    "start": "55720",
    "end": "61282"
  },
  {
    "text": "We were actually kind\nof skipping around through the code. So that's what we learned\nat the end of the lecture.",
    "start": "61283",
    "end": "67190"
  },
  {
    "text": "But we also learned\nabout input and output-- so a way for us to write\ninteractive programs.",
    "start": "67190",
    "end": "72829"
  },
  {
    "text": "And we learned about a\nnew data type, the string. So the string was a\nsequence of characters.",
    "start": "72830",
    "end": "78200"
  },
  {
    "text": "Hopefully, you got a chance to\ndo a little bit of exercises on MITx as practice\nfor today's quizzes",
    "start": "78200",
    "end": "85640"
  },
  {
    "text": "with strings and branching. OK. So in branching,\nwhat did we learn?",
    "start": "85640",
    "end": "91670"
  },
  {
    "text": "We talked about\nhow to actually add a branching point\nin our program. So we did that using\nthese particular keywords.",
    "start": "91670",
    "end": "98555"
  },
  {
    "text": "So when you type them in your\nprogram in the file editor, you'll see that they\nturn a different color. That tells you it's a\nspecial word in Python.",
    "start": "98555",
    "end": "105670"
  },
  {
    "text": "And these keywords\nare how we told Python to put a branching point.",
    "start": "105670",
    "end": "111070"
  },
  {
    "text": "And the colon of ended\nthe branching conditional.",
    "start": "111070",
    "end": "117100"
  },
  {
    "text": "And then anything\nthat was indented as part of that conditional\nwas code that would be executed",
    "start": "117100",
    "end": "123340"
  },
  {
    "text": "when that condition was true. So I'm just going\nto quickly go over these, each one of these boxes. So the first one up here\nwas the simplest way",
    "start": "123340",
    "end": "131140"
  },
  {
    "text": "that we could add a\nconditional to our program. It basically said, hey, go\nthrough the program, when you reach this if\ncondition, Python would",
    "start": "131140",
    "end": "138520"
  },
  {
    "text": "check the condition and say,\nif that condition is true, execute the code that's\nindented as part of that block.",
    "start": "138520",
    "end": "146510"
  },
  {
    "text": "If the condition was not\ntrue, don't do anything, just carry on with\nthe remaining program.",
    "start": "146510",
    "end": "151880"
  },
  {
    "text": "If we wanted to do something\nelse-- so if the condition was not true, if we wanted\nto do something else, we added this else clause here.",
    "start": "151880",
    "end": "159349"
  },
  {
    "text": "And the else also has\nsome sort of code indented as part of its code block.",
    "start": "159350",
    "end": "164630"
  },
  {
    "text": "And that code would be executed\nwhen that condition was false.",
    "start": "164630",
    "end": "170820"
  },
  {
    "text": "OK. So that was a really simple\nif or if/else code structure. But sometimes, we\nwant to have code",
    "start": "170820",
    "end": "176489"
  },
  {
    "text": "that checks for many\nconditions, not just one. That's where the elif\nstructure came in.",
    "start": "176490",
    "end": "181980"
  },
  {
    "text": "So we would have an if condition\nthat starts our code block. If that condition\nwas true, as usual,",
    "start": "181980",
    "end": "188800"
  },
  {
    "text": "we execute the code\nthat's part of that block. Else if, so elif, we could\ninsert another condition.",
    "start": "188800",
    "end": "195280"
  },
  {
    "text": "And Python would say, OK,\nwell if that one wasn't true, let me check if this\nnext one is true. And then we would\nexecute the code",
    "start": "195280",
    "end": "200787"
  },
  {
    "text": "that's part of that code block. We can chain as many of these\nelifs as we want together.",
    "start": "200787",
    "end": "206740"
  },
  {
    "text": "And Python will evaluate\nthe very first one that it finds true that's\npart of this chain,",
    "start": "206740",
    "end": "213730"
  },
  {
    "text": "even if more than one is true. It is possible none of\nthose conditions were true, in which case Python would\nbasically skip over all of them",
    "start": "213730",
    "end": "221590"
  },
  {
    "text": "and do nothing, enter\nnone of those code blocks. If you wanted to have a\nstructure where if none",
    "start": "221590",
    "end": "227740"
  },
  {
    "text": "of those conditions were true\nyou wanted to do something, you could put an else at the end\nof a whole chain of if, elif,",
    "start": "227740",
    "end": "234880"
  },
  {
    "text": "elif, elif's. And the else would be executed\nwhen none of those conditions are true.",
    "start": "234880",
    "end": "240409"
  },
  {
    "text": "So hopefully, this\nis just recap. One tricky thing to remember\nis the if starts a code block.",
    "start": "240410",
    "end": "248720"
  },
  {
    "text": "So the if can have\nan else associated with it or it can have\nan elif, elif, elif, and an else associated with it.",
    "start": "248720",
    "end": "256220"
  },
  {
    "text": "But if condition and then\nfollowed by another if condition, both of\nthose code blocks",
    "start": "256220",
    "end": "261859"
  },
  {
    "text": "could potentially be\nexecuted because the if's are independent. It's not an else situation. They're just another if code\nblock that gets started.",
    "start": "261860",
    "end": "270695"
  },
  {
    "text": " Again, just to\nreiterate, the way you told Python which code to\nexecute when the condition is",
    "start": "270695",
    "end": "277328"
  },
  {
    "text": "true is by indentation. And indentation is\nsomething you have to do. It's not optional in Python.",
    "start": "277328",
    "end": "285340"
  },
  {
    "text": "OK. So let's take what\nwe've learned so far and code up a\nreally simple game. So this is a very\nsimple variation",
    "start": "285340",
    "end": "291710"
  },
  {
    "text": "of the Lost Woods in\nZelda, my version of it. Let's say it's a trick level\nwhere you have your character",
    "start": "291710",
    "end": "298340"
  },
  {
    "text": "and they enter the Lost Woods. They're presented\nwith this screen. And the trick here is\nyou ask the user if they",
    "start": "298340",
    "end": "305030"
  },
  {
    "text": "want to go left or right. If they say right,\nyou're basically going to present them\nwith the exact same screen",
    "start": "305030",
    "end": "310850"
  },
  {
    "text": "all over again. So it's kind of representing\nthat they're lost in the woods. And as long as they say I\nwant to keep going right,",
    "start": "310850",
    "end": "317025"
  },
  {
    "text": "I want to keep going right,\nI want to keep going right, they're basically going to see\nthe same screen over and over again.",
    "start": "317025",
    "end": "322460"
  },
  {
    "text": "And the trick to\ngetting out of the woods is to say I want to go left.",
    "start": "322460",
    "end": "328420"
  },
  {
    "text": "So no matter how far,\nhow many times they've said right in a row, as\nlong as they type in left,",
    "start": "328420",
    "end": "334180"
  },
  {
    "text": "they're out of the woods. So let's try to code that\nup with what we know, just conditionals.",
    "start": "334180",
    "end": "340370"
  },
  {
    "text": "We have an if/else. The if says, if the\nuser exits right,",
    "start": "340370",
    "end": "347319"
  },
  {
    "text": "we're going to do something. And otherwise, we're going to\nsay that the user said left,",
    "start": "347320",
    "end": "352660"
  },
  {
    "text": "or something else, or exit. And then we're going to\ntell them that they've exited successfully. All right.",
    "start": "352660",
    "end": "357790"
  },
  {
    "text": "Now, if they said exit\nright, what do we do? Well, we're going to show them\nthe exact same thing again. So we're setting the background\nto the same woods background.",
    "start": "357790",
    "end": "364810"
  },
  {
    "text": "And then they're presented\nwith the choice all over again. Do you want to exit right? Or do you want to exit left?",
    "start": "364810",
    "end": "370087"
  },
  {
    "text": "So if they say exit right,\nwe would do something. And otherwise, we would tell\nthem they successfully exited.",
    "start": "370087",
    "end": "378599"
  },
  {
    "text": "Well, what if they exited right? If they exited right, then\nwe would do something again, basically present them\nwith the same situation.",
    "start": "378600",
    "end": "386530"
  },
  {
    "text": "So we would set the\nwoods back around again. And we would ask them if they\nwant to go right or left again.",
    "start": "386530",
    "end": "391949"
  },
  {
    "text": "And otherwise, if they\nsaid left, they exit. So we already see\na problem, right?",
    "start": "391950",
    "end": "397699"
  },
  {
    "text": "How deep do we make this\nnested loop situation? Here, we already have three,\nin the case the user said,",
    "start": "397700",
    "end": "403740"
  },
  {
    "text": "I want to go right\nthree times in a row. But we don't know how\npersistent the user will be. So how do we know, when\nwe're writing our code,",
    "start": "403740",
    "end": "410660"
  },
  {
    "text": "how deep to make\nthis nested loop? We don't. We won't be able to really\ncode this up very well",
    "start": "410660",
    "end": "417870"
  },
  {
    "text": "with what we know so far. And so that's the motivation\nfor introducing iteration because the situation\non the previous slide",
    "start": "417870",
    "end": "425009"
  },
  {
    "text": "fits really well\nwith some task we want to repeat\nmultiple times, as long as some condition is true.",
    "start": "425010",
    "end": "431280"
  },
  {
    "text": "In our case, the condition\nis the user says, I want to exit right. So while the user keeps\nsaying exit right,",
    "start": "431280",
    "end": "438419"
  },
  {
    "text": "show them the woods\nbackground and ask them again which way do you want to go. And so while that's true, just\nrepeat this set of things--",
    "start": "438420",
    "end": "446720"
  },
  {
    "text": "check that they said exit right,\nshow them the woods background, ask them again, check\nthat they said exit right,",
    "start": "446720",
    "end": "452120"
  },
  {
    "text": "show them the background,\nask them again. And if at any point they'd say\nI don't want to exit right,",
    "start": "452120",
    "end": "457550"
  },
  {
    "text": "we break out of this loop and we\nrejoin the rest of the program.",
    "start": "457550",
    "end": "462830"
  },
  {
    "text": "That's the terminology we\nuse with if statements. We set the background\nto the exit background and they're out of the woods.",
    "start": "462830",
    "end": "470009"
  },
  {
    "text": "So this sets the scene\nfor a while loops. Here's another example of\nwhile loops in the context",
    "start": "470010",
    "end": "475350"
  },
  {
    "text": "of watching a show. So if we want to start\na new show on Netflix and we want to watch all\nepisodes of the show in one",
    "start": "475350",
    "end": "482100"
  },
  {
    "text": "shot, we're going\nto tell Netflix we're starting a new show. And while there are more\nepisodes to watch in this show,",
    "start": "482100",
    "end": "489470"
  },
  {
    "text": "we're going to keep\nwatching the next episode. So if there are no more episodes\nto watch, then we're done.",
    "start": "489470",
    "end": "495845"
  },
  {
    "text": "Python-- not Python,\nNetflix will suggest three more shows like this one. And while there are more\nepisodes to watch-- so yes,",
    "start": "495845",
    "end": "502370"
  },
  {
    "text": "there are more\nepisodes to watch-- we're going to play the\nnext episode in sequence.",
    "start": "502370",
    "end": "508449"
  },
  {
    "text": "So that's the idea\nthat we're trying to get at with while loops. In Python, this is\nhow we code them. So we start a while loop\nwith the keyword while.",
    "start": "508450",
    "end": "516830"
  },
  {
    "text": "So this, again, will\nturn blue in Python because it's a special word. Some condition is true.",
    "start": "516830",
    "end": "523429"
  },
  {
    "text": "So this is, again, some\nexpression or something that will evaluate to a\nBoolean, like we talked about",
    "start": "523429",
    "end": "529460"
  },
  {
    "text": "in last lecture. Colon-- and colon\ntells Python we're",
    "start": "529460",
    "end": "534560"
  },
  {
    "text": "starting a code\nblock that's part of the while loop being true. And as usual, the\ncode block means",
    "start": "534560",
    "end": "541040"
  },
  {
    "text": "we're going to indent\nthese lines of code. So whatever we want to execute\nwhen the condition is true",
    "start": "541040",
    "end": "547880"
  },
  {
    "text": "will be indented. When the indented statements\nare finished executing,",
    "start": "547880",
    "end": "554620"
  },
  {
    "text": "Python automatically goes back\nand re-checks the condition.",
    "start": "554620",
    "end": "560270"
  },
  {
    "text": "So it re-checks whether the\ncondition is true or not. And this is done\nbehind the scenes.",
    "start": "560270",
    "end": "565450"
  },
  {
    "text": "When you code up\na while loop, when you type in the keyword while,\nPython will automatically",
    "start": "565450",
    "end": "570640"
  },
  {
    "text": "do this behavior. It will check the condition. It will execute the\nlines of code indented. And then it will go back and\ncheck the condition again.",
    "start": "570640",
    "end": "577940"
  },
  {
    "text": "If it's still true, it\nwill execute the lines of code indented again. And then it will check\nthe condition again. So it's not something\nyou have to code up.",
    "start": "577940",
    "end": "584560"
  },
  {
    "text": "You don't have to\ntell it to go back. As long as you're\nwriting this while loop, Python will automatically do\nthat sequence of steps for you.",
    "start": "584560",
    "end": "594350"
  },
  {
    "text": "So when the condition\nbecomes false, Python will no longer\nexecute the stuff inside,",
    "start": "594350",
    "end": "599610"
  },
  {
    "text": "the stuff that's indented\ninside the while loop. And it'll go rejoin\nthe rest of the program at the same indentation\nlevel as the while loop.",
    "start": "599610",
    "end": "609320"
  },
  {
    "text": "So notice that the condition\nis kind of something that's dependent on--",
    "start": "609320",
    "end": "615980"
  },
  {
    "text": "or sorry, the fact that we're\ndoing this code over and over again depends on this\ncondition being true.",
    "start": "615980",
    "end": "623510"
  },
  {
    "text": "So if the code\ninside is not ever changing anything\nrelated to our condition,",
    "start": "623510",
    "end": "630490"
  },
  {
    "text": "then it's very likely-- it's actually for sure\nthat this loop will execute",
    "start": "630490",
    "end": "636790"
  },
  {
    "text": "infinite number of times. So this is the pitfall\nof while loops. It's possible that,\nif you're not careful,",
    "start": "636790",
    "end": "642950"
  },
  {
    "text": "your code will execute an\ninfinite number of times. And it'll just never terminate.",
    "start": "642950",
    "end": "649235"
  },
  {
    "text": "And I'll show you\nhow to deal with that in a couple of slides. So let's try to code up\nthis Lost Woods program just",
    "start": "649235",
    "end": "658810"
  },
  {
    "text": "with a while loop. So here, we've got our\nquestion that we ask the user.",
    "start": "658810",
    "end": "666310"
  },
  {
    "text": "Do you want to go left or right? And we're going to grab\nthe user input as a string",
    "start": "666310",
    "end": "671380"
  },
  {
    "text": "and save it in a\nvariable called where. So whatever the\nuser types in, it will be saved in the\nvariable called where.",
    "start": "671380",
    "end": "677920"
  },
  {
    "text": "So in my computer\nmemory, the way this looks like, if the\nuser types in right, that particular sequence\nof characters, that will",
    "start": "677920",
    "end": "685720"
  },
  {
    "text": "be saved as the variable where. So then we finish this\nfirst line of the code here.",
    "start": "685720",
    "end": "690750"
  },
  {
    "text": "And then we check\nwhile the value of where is equivalent to\nright, what are we going to do?",
    "start": "690750",
    "end": "697029"
  },
  {
    "text": "We're going to ask the user\nagain, where do you want to go? Left or right? So I'm going to say right again.",
    "start": "697030",
    "end": "704290"
  },
  {
    "text": "And then this memory is going\nto look exactly the same. If the user keeps\ntyping in right,",
    "start": "704290",
    "end": "709570"
  },
  {
    "text": "I keep reassigning the variable\nwhere to have the value right.",
    "start": "709570",
    "end": "716990"
  },
  {
    "text": "At some point, the user might\ntype in left, in which case, we're going to lose the\nbinding from a variable, where,",
    "start": "716990",
    "end": "725150"
  },
  {
    "text": "from the specific sequence\nof characters, right, we're going to bind it now\nto the characters left.",
    "start": "725150",
    "end": "731509"
  },
  {
    "text": "So at some point, after\nrepeating this many times, the user will type in left. And we're going to have\nwhere is equal to left.",
    "start": "731510",
    "end": "739649"
  },
  {
    "text": "And at that point,\nwhen the condition is being checked again,\nPython will say, nope, this is not equivalent.",
    "start": "739650",
    "end": "745590"
  },
  {
    "text": "So I'm not going to go\ninside this code block. I'm just going to go down\nhere and print \"You got out of the Lost Forest.\"",
    "start": "745590",
    "end": "752750"
  },
  {
    "text": "So in code, the\nway this looks is-- it's this first one here. ",
    "start": "752750",
    "end": "764490"
  },
  {
    "text": "So you're in the lost\nforest, go left or right. So if I type in\nright, it just keeps",
    "start": "764490",
    "end": "770360"
  },
  {
    "text": "asking me which way to go. And at some point, I can\ntype in left and I'm out. ",
    "start": "770360",
    "end": "778555"
  },
  {
    "text": "So it's pretty cool, right? We just made our own level\nin this text adventure.",
    "start": "778555",
    "end": "784110"
  },
  {
    "text": "Let's have you think\nabout this question. What if the user types\nin capital RIGHT?",
    "start": "784110",
    "end": "790850"
  },
  {
    "text": "What do you think will happen? Are we going to ask the user\nto go left or right again? Or are we going to tell\nthem that they got out",
    "start": "790850",
    "end": "797990"
  },
  {
    "text": "of the forest? STUDENT: They got out. ANA BELL: Yeah, they got out. Do you want to say why?",
    "start": "797990",
    "end": "803220"
  },
  {
    "text": "STUDENT: Because\nit's not lowercase. ANA BELL: Yeah, exactly,\nbecause it's not lowercase. So remember, when we're\ndoing comparison--",
    "start": "803220",
    "end": "809320"
  },
  {
    "text": "so the == on strings, it\nhas to be the same case. It's case sensitive.",
    "start": "809320",
    "end": "815500"
  },
  {
    "text": "And so capital RIGHT or\neven some combination, like just Right is also going\nto give us that we got out.",
    "start": "815500",
    "end": "827350"
  },
  {
    "text": "So this is\ncounterintuitive to what we see as humans because\nwe see right no matter what",
    "start": "827350",
    "end": "836220"
  },
  {
    "text": "to mean right. So a workaround\nfor this would be",
    "start": "836220",
    "end": "841290"
  },
  {
    "text": "to use a command on the string\nto maybe convert everything to lowercase, just so\nit's more easily compared",
    "start": "841290",
    "end": "847350"
  },
  {
    "text": "or something like that. OK. So another use of while\nloops is with numbers.",
    "start": "847350",
    "end": "855529"
  },
  {
    "text": "Let's look at this example. I'm going to ask the\nuser for an integer. And then I'm going to do\nsomething really simple.",
    "start": "855530",
    "end": "861720"
  },
  {
    "text": "I'm going to print x to the\nscreen however many times the user told me. So if the user gives\nme 4, I'm going",
    "start": "861720",
    "end": "867800"
  },
  {
    "text": "to print x four\ntimes to the screen. So what is this code\ndoing in memory?",
    "start": "867800",
    "end": "874550"
  },
  {
    "text": "Well, the user gives\nme, let's say, 4. What happens step by step? First, we see our while loop.",
    "start": "874550",
    "end": "880820"
  },
  {
    "text": "So I'm going to check whether\n4, the current value of n, is greater than 0. Yes, that's true.",
    "start": "880820",
    "end": "886720"
  },
  {
    "text": "I'm going to print\nx to the screen. And then I'm going to do\nthe next line of code.",
    "start": "886720",
    "end": "891730"
  },
  {
    "text": "That's part of this\nindented block, which is to take n and assign\nit to whatever n is minus 1.",
    "start": "891730",
    "end": "898350"
  },
  {
    "text": "So I'm going to lose the 4. And I'm going to take 4 minus\n1 to be 3, create a new object,",
    "start": "898350",
    "end": "903660"
  },
  {
    "text": "and bind n to the 3. OK? Next, Python-- again,\nit's part of a while loop.",
    "start": "903660",
    "end": "909722"
  },
  {
    "text": "So automatically, it looks at\nthe condition again and says, well, now, the value of n\nis still greater than 0.",
    "start": "909722",
    "end": "914870"
  },
  {
    "text": "Yeah, 3 is still greater than 0. So again, we're going\nto lose the binding-- sorry, we're printing\nx to the screen first.",
    "start": "914870",
    "end": "920810"
  },
  {
    "text": "And then we lose the binding\nfrom the current value of n, 3, to 2.",
    "start": "920810",
    "end": "927250"
  },
  {
    "text": "So we're decrementing\nn by 1 each time through this while loop.",
    "start": "927250",
    "end": "932630"
  },
  {
    "text": "Then, again, Python\nchecks the condition. It says 2 is still\ngreater than 0. So again, we print\nanother x to the screen.",
    "start": "932630",
    "end": "939110"
  },
  {
    "text": "And then we decrement n by 1. So we're binding n to 1. Again, Python checks\nthe condition.",
    "start": "939110",
    "end": "944480"
  },
  {
    "text": "Is 1 still greater than 0? Yes. So we print another\nx to the screen. So we've printed four\nx's now to the screen.",
    "start": "944480",
    "end": "950779"
  },
  {
    "text": "And then Python says now,\nI'm going to make n to be 0. And then at this point,\nPython will do another check.",
    "start": "950780",
    "end": "957660"
  },
  {
    "text": "It's going to say,\nis 0 greater than 0? And that's going to be false.",
    "start": "957660",
    "end": "963570"
  },
  {
    "text": "So it's not going to execute\nthe code block anymore. And the program will be done. There's no code\nto rejoin anymore.",
    "start": "963570",
    "end": "970910"
  },
  {
    "text": "There's just the\nend of the program. So we would have printed\nfour x's to the screen. And this is in the\nPython file I gave you.",
    "start": "970910",
    "end": "977210"
  },
  {
    "text": "You can feel free to\nrun it to double check. My question is, what happens--",
    "start": "977210",
    "end": "983880"
  },
  {
    "text": "and this is a really\ncommon mistake. What happens if we\nforget this last line? ",
    "start": "983880",
    "end": "992420"
  },
  {
    "text": "We can try it. I can try it in here. STUDENT: [INAUDIBLE]",
    "start": "992420",
    "end": "997640"
  },
  {
    "text": "ANA BELL: Yeah, exactly. It's going to go on forever. I'll show you what\nthat looks like. So this is the code when we\njust have it working as usual.",
    "start": "997640",
    "end": "1007339"
  },
  {
    "text": "So if I type in 3, it\nprints three of those x's. But if I happen to forget\nto write this last line--",
    "start": "1007340",
    "end": "1013390"
  },
  {
    "text": "I'm just going to\ncomment it out. And if I run the program,\nI can enter any number. And it'll just keep printing\nstuff to the console.",
    "start": "1013390",
    "end": "1023500"
  },
  {
    "text": "It's just printing a\nwhole bunch of stuff. So you can see this is\nall the stuff it printed.",
    "start": "1023500",
    "end": "1031869"
  },
  {
    "text": "So yeah, we don't\nhave a program that terminates because the condition\nhere is never actually being--",
    "start": "1031869",
    "end": "1040569"
  },
  {
    "text": "the variable that's\npart of this condition is never actually being\nchanged inside my loop.",
    "start": "1040569",
    "end": "1046339"
  },
  {
    "text": "And so that's a big problem. When that happens,\nwhat we can do-- and what I just did here is--",
    "start": "1046339",
    "end": "1051940"
  },
  {
    "text": "I'm going to-- you\ncan click the shell and hit Control-C or\nCommand-C on a Mac. And that will just end\nthe program manually.",
    "start": "1051940",
    "end": "1059200"
  },
  {
    "text": "Or you can just click\nthe red X in the corner. So here's another example\nof it going infinite.",
    "start": "1059200",
    "end": "1065560"
  },
  {
    "text": "And there's this little-- sorry, red box in the corner. You can click that. Or you can click the three\nlines to interrupt kernel.",
    "start": "1065560",
    "end": "1072250"
  },
  {
    "text": "All that will stop the program. So in this class,\nwe're not actually going to write programs\nthat take seconds to run.",
    "start": "1072250",
    "end": "1079279"
  },
  {
    "text": "So if you find yourself waiting\nfor your program for more than one or two seconds,\nthen likely you've",
    "start": "1079280",
    "end": "1084310"
  },
  {
    "text": "entered an infinite loop. So you'll want to\nstop it and try to see where your program went wrong.",
    "start": "1084310",
    "end": "1089320"
  },
  {
    "text": " OK.",
    "start": "1089320",
    "end": "1094560"
  },
  {
    "text": "So give this a try,\nif you want, just so you get the hang of\nstopping an infinite program",
    "start": "1094560",
    "end": "1101500"
  },
  {
    "text": "because you'll very likely\nwrite a program that doesn't terminate.",
    "start": "1101500",
    "end": "1106960"
  },
  {
    "text": "So while true-- what's\nthe condition here? ",
    "start": "1106960",
    "end": "1113750"
  },
  {
    "text": "It's just true, right? So there's no condition\nthat's being checked. This program will run always an\ninfinite times no matter what.",
    "start": "1113750",
    "end": "1124020"
  },
  {
    "text": "So that's just this little You\nTry It down here on line 44. Just run it as soon.",
    "start": "1124020",
    "end": "1129270"
  },
  {
    "text": "As you run it, it's just going\nto print that to the screen over and over again. Be sure to click the shell\nto put the focus on there",
    "start": "1129270",
    "end": "1136110"
  },
  {
    "text": "and hit Control-C\nor hit the red X.",
    "start": "1136110",
    "end": "1142440"
  },
  {
    "text": "All right, so the big\nidea with while loops is that they can repeat the\ncode inside them indefinitely.",
    "start": "1142440",
    "end": "1150640"
  },
  {
    "text": "So we have to be a\nlittle bit careful with what our conditions are\nand whether we're actually",
    "start": "1150640",
    "end": "1157290"
  },
  {
    "text": "making progress towards\nhaving that condition become false at some point.",
    "start": "1157290",
    "end": "1162460"
  },
  {
    "text": "And when that happens,\nwhen they run indefinitely, you'll have to manually\nintervene to close the program.",
    "start": "1162460",
    "end": "1170730"
  },
  {
    "text": "OK. So now that we've seen a loop\nwith a little bit of numerical",
    "start": "1170730",
    "end": "1178370"
  },
  {
    "text": "computation inside it-- so we\nwere changing the value of n inside our loop-- let's have you work on\nthis little program.",
    "start": "1178370",
    "end": "1185010"
  },
  {
    "text": "It's an extension\nof the Lost Woods. This is exactly the\nsame program that I just",
    "start": "1185010",
    "end": "1190790"
  },
  {
    "text": "ran a few slides ago. But what I want you to\nadd is an extra printout.",
    "start": "1190790",
    "end": "1196430"
  },
  {
    "text": "So when the user says\nright more than two times,",
    "start": "1196430",
    "end": "1203750"
  },
  {
    "text": "the next time you ask them\nwhether they go left or right, I'd like you to print a\nsad face right before you",
    "start": "1203750",
    "end": "1209840"
  },
  {
    "text": "ask them that question. It can be on a different line. It doesn't have to\nbe on the same line.",
    "start": "1209840",
    "end": "1215140"
  },
  {
    "text": "And the way to do that is to try\nto create a new variable that's",
    "start": "1215140",
    "end": "1220420"
  },
  {
    "text": "going to be like your\ncounter, that keeps track of how many times the\nuser has-- how many times",
    "start": "1220420",
    "end": "1226390"
  },
  {
    "text": "this while loop has repeated. So I'll give you a couple\nof moments to do that.",
    "start": "1226390",
    "end": "1232160"
  },
  {
    "text": "And then we'll\nwrite it together. As usual, the You\nTry It is in here.",
    "start": "1232160",
    "end": "1238490"
  },
  {
    "text": "So you can just\nuncomment the code with-- in Spyder, its Control-1 or\nCommand-1 to batch uncomment.",
    "start": "1238490",
    "end": "1246880"
  },
  {
    "text": "And then you can work off of\nthis code to try to improve it. ",
    "start": "1246880",
    "end": "1254380"
  },
  {
    "text": "OK. So does anyone have\na start for me? How can we do this? You don't have to\ngive it to me in full.",
    "start": "1254380",
    "end": "1261090"
  },
  {
    "text": "We can work our way up\nto the final program. But what's your\nfirst thought here? ",
    "start": "1261090",
    "end": "1278388"
  },
  {
    "text": "Yes? Sorry. STUDENT: [INAUDIBLE]\nvariable like n or something incremented every time the\nwhile loop goes through.",
    "start": "1278388",
    "end": "1286158"
  },
  {
    "text": "ANA BELL: OK. So we can create a variable,\nn, at the beginning of our program. What do you want to make it? STUDENT: 0.",
    "start": "1286158",
    "end": "1291350"
  },
  {
    "text": "ANA BELL: 0, OK, good. 0 will keep track of-- or n will\nkeep track of how many times",
    "start": "1291350",
    "end": "1297020"
  },
  {
    "text": "we've gone through the loop. So inside our program, when\ndo we want to change n?",
    "start": "1297020",
    "end": "1305690"
  },
  {
    "text": "Sorry. Every time we go\nthrough the loop, right? So every time we want\nto go through the loop,",
    "start": "1305690",
    "end": "1311400"
  },
  {
    "text": "we want to change n\nto be a new value. So maybe we want to\nincrease it by 1.",
    "start": "1311400",
    "end": "1316790"
  },
  {
    "text": "So n is equal to n plus 1. So now, this will keep\ntrack of how many times",
    "start": "1316790",
    "end": "1324203"
  },
  {
    "text": "we've gone through the loop. And we can actually double\ncheck this by printing n.",
    "start": "1324203",
    "end": "1329570"
  },
  {
    "text": "So if we run it and we say\nright, we've gone once.",
    "start": "1329570",
    "end": "1336360"
  },
  {
    "text": "Right, we've got twice. Right, we've gone three times. So this means we're\nincrementing it correctly.",
    "start": "1336360",
    "end": "1344679"
  },
  {
    "text": "Now, what can I do with this\nvariable n now that I have it and I know it's\nincrementing correctly?",
    "start": "1344680",
    "end": "1351280"
  },
  {
    "text": "Yeah? STUDENT: Set up an if\nstatement [INAUDIBLE].. ANA BELL: Yep, we can\nset up an if statement. So we can check if that\nvalue of n is greater than 2",
    "start": "1351280",
    "end": "1361660"
  },
  {
    "text": "according to the\nspecification here. What do you want to do\nwhen if is greater than 2?",
    "start": "1361660",
    "end": "1367960"
  },
  {
    "text": "Print something, right? So we can print the sad face. ",
    "start": "1367960",
    "end": "1374320"
  },
  {
    "text": "And let's try to run it now. So if we immediately hit\nleft, it still works.",
    "start": "1374320",
    "end": "1380230"
  },
  {
    "text": "If we go right\none time, nothing. Another time, nothing. Right a last time, sad.",
    "start": "1380230",
    "end": "1386799"
  },
  {
    "text": "And from now on, it's going to\nkeep showing me the sad face. ",
    "start": "1386800",
    "end": "1395660"
  },
  {
    "text": "OK. Questions about this code? Yeah?",
    "start": "1395660",
    "end": "1400980"
  },
  {
    "text": "STUDENT: Is it possible\nto test for something that's not equivalent. Is there a sign that's\ndifferent than the two equals",
    "start": "1400980",
    "end": "1406950"
  },
  {
    "text": "or not equivalent? ANA BELL: Can we check\nfor non-equivalency? Here? STUDENT: Yeah.",
    "start": "1406950",
    "end": "1413560"
  },
  {
    "text": "ANA BELL: So this\nparticular check checks for what the user typed in. ",
    "start": "1413560",
    "end": "1421139"
  },
  {
    "text": "It's possible we can add\nthis if statement that checks for the n in here\nand something else.",
    "start": "1421140",
    "end": "1428590"
  },
  {
    "text": "But then we would have\nto have maybe another-- ",
    "start": "1428590",
    "end": "1434060"
  },
  {
    "text": "I'd have to think about it. But it might be possible\nto try to combine them inside the while loop.",
    "start": "1434060",
    "end": "1439520"
  },
  {
    "text": "STUDENT: So there's a symbol\nthat allows you to do that? ANA BELL: Oh, to do not equals? That would be the\nnot equal sign, yeah.",
    "start": "1439520",
    "end": "1447000"
  },
  {
    "text": "So another thing we can do\nwith while loops is to iterate through numbers in a sequence.",
    "start": "1447000",
    "end": "1452940"
  },
  {
    "text": "If we do this, there's\na really common pattern, which actually leads us to\nthe next kind of loop we're",
    "start": "1452940",
    "end": "1459548"
  },
  {
    "text": "going to see on the next slide. But the pattern, when you want\nto iterate through numbers in a sequence, is you\nfirst set a loop variable",
    "start": "1459548",
    "end": "1468370"
  },
  {
    "text": "before the while loop. Inside the condition for the\nloop, you do some sort of check",
    "start": "1468370",
    "end": "1474070"
  },
  {
    "text": "with that variable. So n was my loop variable\noutside the loop. And then I test it\ninside the while loop.",
    "start": "1474070",
    "end": "1480860"
  },
  {
    "text": "So n is less than 5. And then within\nthe while loop, you can do whatever commands\nyou want to do with that n.",
    "start": "1480860",
    "end": "1488290"
  },
  {
    "text": "But then you have to remember\nto change it in some way because if you don't\nchange it in some way,",
    "start": "1488290",
    "end": "1494350"
  },
  {
    "text": "this while loop condition\nwill always be true. So here, I'm incrementing n\nby 1 because it starts from 0.",
    "start": "1494350",
    "end": "1502809"
  },
  {
    "text": "I want n to get to\nsomething, something above 5, which will lead to my\ncondition becoming false.",
    "start": "1502810",
    "end": "1509125"
  },
  {
    "text": " So this pattern actually\nexists in a bunch",
    "start": "1509125",
    "end": "1515770"
  },
  {
    "text": "of different programs. So here's a program that\ncalculates factorial for me.",
    "start": "1515770",
    "end": "1521750"
  },
  {
    "text": "And here, I'm\ncalculating 4 factorial. I'm not excited\nabout the number 4. That's 4 factorial.",
    "start": "1521750",
    "end": "1527690"
  },
  {
    "text": "How do we do this? Well, there's a lot of\nthings I'm initializing here. But the more you\nwork with loops,",
    "start": "1527690",
    "end": "1535310"
  },
  {
    "text": "you'll get used to seeing\nwhat is the loop variable.",
    "start": "1535310",
    "end": "1540990"
  },
  {
    "text": "So i is actually going\nto be my loop variable. Here, it's being\nset to some value,",
    "start": "1540990",
    "end": "1547789"
  },
  {
    "text": "initially outside the loop. Inside the conditional,\nI'm doing some sort of condition check with it.",
    "start": "1547790",
    "end": "1556410"
  },
  {
    "text": "And then inside the body\nof that conditional, I'm changing it in some way.",
    "start": "1556410",
    "end": "1562540"
  },
  {
    "text": "That gives me some sort of-- that takes me to the end\nof my conditional here.",
    "start": "1562540",
    "end": "1569010"
  },
  {
    "text": "So I'm setting i to 0. I'm incrementing i by 1\neach time through the loop. And I'm making forward\nprogress towards making",
    "start": "1569010",
    "end": "1576179"
  },
  {
    "text": "i greater than x, at which\npoint my conditional will become false.",
    "start": "1576180",
    "end": "1583460"
  },
  {
    "text": "The rest of the code--\nx is equal to 4-- just sets the thing I want\nto get the factorial of.",
    "start": "1583460",
    "end": "1589549"
  },
  {
    "text": "And this factorial variable\nis kind of my running product. So it's the thing that I'm going\nto keep multiplying to figure",
    "start": "1589550",
    "end": "1596210"
  },
  {
    "text": "out what the factorial is. So here, I'm\ninitializing it to 1. And inside the loop,\nI'm multiplying it",
    "start": "1596210",
    "end": "1602419"
  },
  {
    "text": "by my loop variable every time. So I'm not going to do a memory\ndiagram for this example,",
    "start": "1602420",
    "end": "1609690"
  },
  {
    "text": "but I will do the Python Tutor. And I'm going to step\nthrough to show you exactly what this is doing.",
    "start": "1609690",
    "end": "1615735"
  },
  {
    "text": "So x is 4. i is 1 originally. And factorial is 1. So x is the thing I want\nto get the factorial of.",
    "start": "1615735",
    "end": "1622380"
  },
  {
    "text": "i is going to be\nmy loop variable. And factorial is\nmy running product.",
    "start": "1622380",
    "end": "1628870"
  },
  {
    "text": "So next step, i, 1 is\nless than or equal to 4. So I'm going to enter the loop.",
    "start": "1628870",
    "end": "1635410"
  },
  {
    "text": "Python will calculate\nthe factorial as whatever it is right\nnow multiplied by 1, i.",
    "start": "1635410",
    "end": "1640929"
  },
  {
    "text": "So it's still 1. And then I'm going\nto increment i to whatever it is from\nwhatever it is now to 1.",
    "start": "1640930",
    "end": "1647320"
  },
  {
    "text": "So I just want to mention this\ni += 1 is equivalent to saying i",
    "start": "1647320",
    "end": "1654460"
  },
  {
    "text": "equals i plus 1. And this is true no matter\nwhat variable you have here.",
    "start": "1654460",
    "end": "1660430"
  },
  {
    "text": "Basically, if you have fact\n*= 2 or something like that,",
    "start": "1660430",
    "end": "1667885"
  },
  {
    "text": "that basically means\nfactorial equals fact times 2.",
    "start": "1667885",
    "end": "1674470"
  },
  {
    "text": "So that's the pattern here. These are equivalent and\nthese are equivalent. This is just shorthand\nnotation in programming.",
    "start": "1674470",
    "end": "1681830"
  },
  {
    "text": "So that's what this\nline here means. i += 1 means I equals I plus 1.",
    "start": "1681830",
    "end": "1688059"
  },
  {
    "text": "So at this line here,\nI'm taking whatever i is and adding 1 to it, 2. And then I do the check again.",
    "start": "1688060",
    "end": "1694710"
  },
  {
    "text": "And remember, Python\ndoes this automatically. Because we're\nusing a while loop, it goes back to the\ncondition and checks",
    "start": "1694710",
    "end": "1701160"
  },
  {
    "text": "it again using these new\nvalues for the variables. 2 is still less\nthan or equal to 4. So again, we go\ninside the loop body.",
    "start": "1701160",
    "end": "1708510"
  },
  {
    "text": "Factorial is whatever\nit is right now, 1, multiplied by i, 2.",
    "start": "1708510",
    "end": "1714860"
  },
  {
    "text": "i is going to be 2 plus 1, 3. And then again,\nI'm checking that 3",
    "start": "1714860",
    "end": "1720020"
  },
  {
    "text": "is less than or equal to 4. It still is. So then we're going\nto do factorial is whatever it is now, 2,\nmultiplied by whatever i is, 3.",
    "start": "1720020",
    "end": "1727790"
  },
  {
    "text": "So now, it's 6. i is going to be one more\nthan what it is right now, 4. 4 is still less\nthan or equal to 4.",
    "start": "1727790",
    "end": "1735080"
  },
  {
    "text": "We're going to go\ninside the body. factorial is whatever it is\nright now, 6, multiplied by 4.",
    "start": "1735080",
    "end": "1743029"
  },
  {
    "text": "And that's 24. And then i is going\nto be whatever it is right now plus 1, 5.",
    "start": "1743030",
    "end": "1748669"
  },
  {
    "text": "At this point, Python says,\nis 5 less than or equal to 4? No. And then it breaks the loop.",
    "start": "1748670",
    "end": "1755100"
  },
  {
    "text": "And it goes to print this\nstatement, 4 factorial is-- and then it grabs whatever\nthe value of the factorial is.",
    "start": "1755100",
    "end": "1762260"
  },
  {
    "text": "So here, I'm using\nthis fstring print that notation that we\nlearned about last lecture.",
    "start": "1762260",
    "end": "1769190"
  },
  {
    "text": "So I encourage you to go through\nit yourself, just step by step. That's what Python Tutor's\nreally, really useful for.",
    "start": "1769190",
    "end": "1777540"
  },
  {
    "text": "OK. So let's look at a different\nkind of loop called a for loop. And the for loop\nis going to allow",
    "start": "1777540",
    "end": "1783769"
  },
  {
    "text": "us to rewrite that\nspecial kind of while loop",
    "start": "1783770",
    "end": "1789200"
  },
  {
    "text": "that we saw where we\ninitialize a variable, we test the variable,\nwe do something to the variable within the\ncode in a more efficient, more",
    "start": "1789200",
    "end": "1795919"
  },
  {
    "text": "readable way. So in terms of our Netflix\nexample, a for loop",
    "start": "1795920",
    "end": "1801890"
  },
  {
    "text": "would be equivalent to\nsomething like Netflix, if you're not interacting,\nwith it cuts you off after four",
    "start": "1801890",
    "end": "1807170"
  },
  {
    "text": "episodes to save bandwidth. And so there's a\nsequence of four episodes",
    "start": "1807170",
    "end": "1812540"
  },
  {
    "text": "it knows it's going to\ngo through if you're not interacting with it. So if you've already gone\nthrough your sequence of four",
    "start": "1812540",
    "end": "1820550"
  },
  {
    "text": "episodes you're allowed to\nwatch without any interaction, it's done. It cuts you off it says,\n\"Are you still watching?\"",
    "start": "1820550",
    "end": "1827299"
  },
  {
    "text": "But if there are still more\nepisodes, if it only showed you two out of the four,\nthen it's going",
    "start": "1827300",
    "end": "1833120"
  },
  {
    "text": "to keep showing\nyou more episodes until it's shown you the four.",
    "start": "1833120",
    "end": "1839770"
  },
  {
    "text": "So this is the program\nwe had with while loops a couple slides ago.",
    "start": "1839770",
    "end": "1847270"
  },
  {
    "text": "And remember, we are\ninitializing a variable. We were testing the variable\nwith some condition here. And then we were\nincrementing the variable",
    "start": "1847270",
    "end": "1853960"
  },
  {
    "text": "or doing something that gives\nus nice forward progress towards making this\ncondition false.",
    "start": "1853960",
    "end": "1859990"
  },
  {
    "text": "But it's really verbose. Certainly, it works. You can do it,\nbut it's very easy",
    "start": "1859990",
    "end": "1865150"
  },
  {
    "text": "to forget to do this, something\nlike this, in which case you'll get an infinite loop.",
    "start": "1865150",
    "end": "1870590"
  },
  {
    "text": "With a for loop, those\nfour lines of code just look like this,\nthese two lines of code.",
    "start": "1870590",
    "end": "1878179"
  },
  {
    "text": "So if there's a\nsequence of values you ever want to\niterate over, that's what for loops are useful for.",
    "start": "1878180",
    "end": "1885590"
  },
  {
    "text": "So the syntax for a for\nloop looks a little bit different than a while loop. It starts with a for keyword.",
    "start": "1885590",
    "end": "1893240"
  },
  {
    "text": "This is a variable\nthat you get to name, whatever name you'd like. The keyword in tells\nPython I'm going",
    "start": "1893240",
    "end": "1900080"
  },
  {
    "text": "to make this variable take\non values in this sequence. ",
    "start": "1900080",
    "end": "1907250"
  },
  {
    "text": "And again, we have\na colon that tells Python we're going to start\na code indentation here.",
    "start": "1907250",
    "end": "1914640"
  },
  {
    "text": "And whatever lines of code\nyou have that are indented are going to be executed\nhowever many sequence of values",
    "start": "1914640",
    "end": "1922140"
  },
  {
    "text": "you have. So the first time\nthrough the loop, Python will make this variable\nname take on the first value",
    "start": "1922140",
    "end": "1929460"
  },
  {
    "text": "in the sequence. And then it's going\nto execute this code. Automatically, Python, after it\nfinishes executing these codes,",
    "start": "1929460",
    "end": "1939370"
  },
  {
    "text": "it will go back and\nset this variable have the next value\nin the sequence",
    "start": "1939370",
    "end": "1944680"
  },
  {
    "text": "and execute the\nsame lines of code. When it's done, it's going\nto make the variable here take on the next\nvalues in the sequence",
    "start": "1944680",
    "end": "1951610"
  },
  {
    "text": "and execute those lines of code. And so these lines of\ncode will effectively be executed however many values\nyou have in your sequence.",
    "start": "1951610",
    "end": "1961970"
  },
  {
    "text": "So more practically speaking,\nhere, we have a variable-- so n, in this case--",
    "start": "1961970",
    "end": "1967779"
  },
  {
    "text": "in some sequence of values. In this case, I'm\nsaying range 5.",
    "start": "1967780",
    "end": "1973570"
  },
  {
    "text": "We're going to print\nthe value of n. So I'm going to\nintroduce range now.",
    "start": "1973570",
    "end": "1978790"
  },
  {
    "text": "Range is a way for us to grab\nnumerical sequence of values",
    "start": "1978790",
    "end": "1985000"
  },
  {
    "text": "that have some sort of pattern. So if we just say\nrange some number,",
    "start": "1985000",
    "end": "1990240"
  },
  {
    "text": "the pattern is we start at 0 and\nwe go up to but not including that number. So range 5 means the sequence of\nvalues Python will iterate over",
    "start": "1990240",
    "end": "1999030"
  },
  {
    "text": "are 0, 1, 2, 3, and 4. Range 10 means 0, 1,\n2, 3, 4, 5, 6, 7, 8, 9.",
    "start": "1999030",
    "end": "2004760"
  },
  {
    "text": "So we go up to, but\nnot including the value in the range starting from 0.",
    "start": "2004760",
    "end": "2010040"
  },
  {
    "text": "So each time through\nthe loop, Python will change the value of n to\nbe every one of those values",
    "start": "2010040",
    "end": "2016160"
  },
  {
    "text": "automatically. So these two lines here,\nfor n in range 5 print n,",
    "start": "2016160",
    "end": "2022190"
  },
  {
    "text": "the way they look like\nbehind the scenes-- and Python does this for you-- is the first time it encounters\nfor loop, it sets n to be 0.",
    "start": "2022190",
    "end": "2031040"
  },
  {
    "text": "That's the first\nvalue in my sequence. And then it prints\nthe value of n, 0.",
    "start": "2031040",
    "end": "2037900"
  },
  {
    "text": "Next time through\nthe loop, Python will say, OK, I've done\nwhat you asked me to do inside the code loop, print n.",
    "start": "2037900",
    "end": "2044920"
  },
  {
    "text": "I'm going to make n have the\nnext value in my sequence. So it loses the binding from\nthe 0 and makes it be 1.",
    "start": "2044920",
    "end": "2052599"
  },
  {
    "text": "OK, I've made n 1. Now, what do you want me to do? Well, I'm going to execute\nwhatever is indented, print n.",
    "start": "2052600",
    "end": "2058869"
  },
  {
    "text": "So I'm going to print 1. So I've already printed 0. Then I've printed 1.",
    "start": "2058870",
    "end": "2064050"
  },
  {
    "text": "I'm finished executing\nthe code inside the loop. So now, n is going to get the\nnext value in the sequence.",
    "start": "2064050",
    "end": "2070020"
  },
  {
    "text": "Lose the binding from 1 and\nyou get 2 and so on and so on. And by the end,\nthis program will",
    "start": "2070020",
    "end": "2076360"
  },
  {
    "text": "have printed 0, 1, 2, 3, and 4,\nevery single value in my range.",
    "start": "2076360",
    "end": "2082000"
  },
  {
    "text": " So it turns out\nthat we can actually make range have three values\ninside the parentheses, not",
    "start": "2082000",
    "end": "2091219"
  },
  {
    "text": "just one. One is shorthand notation if\nyou ever want to start from 0 and want to go and go\nup to and including--",
    "start": "2091219",
    "end": "2098570"
  },
  {
    "text": "sorry, up to but not including\nthe value in the parentheses. But you can actually\ngive it three values--",
    "start": "2098570",
    "end": "2104210"
  },
  {
    "text": "a start, a stop, and a step. And Python will automatically\ngenerate a sequence of values",
    "start": "2104210",
    "end": "2110120"
  },
  {
    "text": "that matches this pattern. So this should seem\nfamiliar to you",
    "start": "2110120",
    "end": "2115190"
  },
  {
    "text": "because we've seen\nsomething like this when we were doing\nstrings, except that we",
    "start": "2115190",
    "end": "2120920"
  },
  {
    "text": "weren't doing parentheses, we\nwere doing square brackets. And we weren't doing commas,\nwe were doing colons.",
    "start": "2120920",
    "end": "2126650"
  },
  {
    "text": "But it's the exact same idea. Here, we're generating\nnumbers, actual integers",
    "start": "2126650",
    "end": "2132410"
  },
  {
    "text": "that we want a loop\nvariable to take on. So if we omit start and\nstep-- start by default is 0",
    "start": "2132410",
    "end": "2139810"
  },
  {
    "text": "and step by default is 1. If we omit step, by\ndefault, it will be 1. So here, i in range\n4, the variable i",
    "start": "2139810",
    "end": "2148510"
  },
  {
    "text": "will take on the\nvalues 0, 1, 2, and 3. i in range 3, 5, i will\ntake on the values 3 and 4.",
    "start": "2148510",
    "end": "2157400"
  },
  {
    "text": "So we go up to, but\nnot including the 5. Think about these\nthree questions.",
    "start": "2157400",
    "end": "2163660"
  },
  {
    "text": "So what are the range of\nvalues in the first one? And what are we going to print?",
    "start": "2163660",
    "end": "2170359"
  },
  {
    "text": "So in 1, 4, 1, what\nrange of values are we going to have i be? So i is going to be what?",
    "start": "2170360",
    "end": "2175810"
  },
  {
    "text": " 1, 2, 3?",
    "start": "2175810",
    "end": "2184547"
  },
  {
    "text": "STUDENT: [INAUDIBLE] ANA BELL: Yes, and we stop. We go up to, but not including\nthe stop, which is a 4.",
    "start": "2184547",
    "end": "2189579"
  },
  {
    "text": "And what are we printing? STUDENT: [INAUDIBLE] ANA BELL: Yeah, 1, 2, 3.",
    "start": "2189580",
    "end": "2196300"
  },
  {
    "text": "How about the next one, j? What will the values of j be? STUDENT: [INAUDIBLE] ANA BELL: 1, 3.",
    "start": "2196300",
    "end": "2204270"
  },
  {
    "text": "And that's it, yep, because\nwe're going every other value. And what are we printing here?",
    "start": "2204270",
    "end": "2210000"
  },
  {
    "text": "STUDENT: [INAUDIBLE] ANA BELL: Yeah, exactly. So we're doing an operation\nwith each one of these j's.",
    "start": "2210000",
    "end": "2215310"
  },
  {
    "text": "So we're going to\nprint 2, and then 6. And how about the last one?",
    "start": "2215310",
    "end": "2220390"
  },
  {
    "text": "STUDENT: [INAUDIBLE] ANA BELL: We're stepping\nbackward, right? The negative 1.",
    "start": "2220391",
    "end": "2226590"
  },
  {
    "text": "So what's our start? STUDENT: [INAUDIBLE] ANA BELL: 4. And then? STUDENT: 3 ANA BELL: 3, 2, 1.",
    "start": "2226590",
    "end": "2235220"
  },
  {
    "text": "And that's it. We're going down to, but not\nincluding the end, right? So we're not going\nto include the 0. And what are we printing here?",
    "start": "2235220",
    "end": "2242474"
  },
  {
    "text": "STUDENT: [INAUDIBLE] ANA BELL: Yes, four dollar signs\nfor the first time, and then",
    "start": "2242475",
    "end": "2249380"
  },
  {
    "text": "three dollar signs, and then\ntwo dollar signs, and then one dollar sign, exactly.",
    "start": "2249380",
    "end": "2256980"
  },
  {
    "text": "So the body obviously\ncan do operations and can manipulate\nthat loop variable.",
    "start": "2256980",
    "end": "2263020"
  },
  {
    "text": "So each time that variable\ngoes through, it changes.",
    "start": "2263020",
    "end": "2268600"
  },
  {
    "text": "And then you can use\nthat to your advantage. So here's another example\nof something useful.",
    "start": "2268600",
    "end": "2276400"
  },
  {
    "text": "We can use for loops to\nkeep track of how many times",
    "start": "2276400",
    "end": "2281730"
  },
  {
    "text": "we're going through a loop. And in this\nparticular case, we're writing a program that\nsums all the values",
    "start": "2281730",
    "end": "2287849"
  },
  {
    "text": "from 0 all the way up to but not\nincluding whatever is in here.",
    "start": "2287850",
    "end": "2293260"
  },
  {
    "text": "So how are we doing this? Let's do the memory diagram. We've got mysum is equal\nto 0 as the first line.",
    "start": "2293260",
    "end": "2302640"
  },
  {
    "text": "So this will be 0 in memory,\nbound to the name mysum.",
    "start": "2302640",
    "end": "2308599"
  },
  {
    "text": "And then for loop will\ngenerate for me the values 0 through 9, including.",
    "start": "2308600",
    "end": "2316369"
  },
  {
    "text": "So i, the first time through the\nloop, will have a value of 0. So we're going to do the\noperations or the code we're",
    "start": "2316370",
    "end": "2324109"
  },
  {
    "text": "asked to do when i is 0. So mysum will be whatever it\nis right now plus whatever i is, 0.",
    "start": "2324110",
    "end": "2329930"
  },
  {
    "text": "So it stays 0. Python's done with\nthe code inside. So now, it's going to\ntake i and change it",
    "start": "2329930",
    "end": "2337280"
  },
  {
    "text": "to the next value\nin the sequence, 1. Now, we're going to do again\nthe stuff inside the loop",
    "start": "2337280",
    "end": "2344599"
  },
  {
    "text": "with i being 1. So we're going to take mysum,\nwhatever it is right now, and add 1 to it. So it's 1.",
    "start": "2344600",
    "end": "2350670"
  },
  {
    "text": "And then we're done there. So Python will take i to be the\nnext value in the sequence, 2. And then we're going\nto do again mysum",
    "start": "2350670",
    "end": "2357570"
  },
  {
    "text": "is whatever it is now, 1,\nplus whatever i is now, 2. So it's 3.",
    "start": "2357570",
    "end": "2362720"
  },
  {
    "text": "Again, i will increment\nto 3 automatically. That's the next value\nin the sequence. So mysum will get a value of 6.",
    "start": "2362720",
    "end": "2369470"
  },
  {
    "text": "And then i will change\nto 4, so on, and so on, and so on until i becomes 8.",
    "start": "2369470",
    "end": "2376010"
  },
  {
    "text": "That's sort of towards the end. When i is 8, the value\nof mysum is 36, right?",
    "start": "2376010",
    "end": "2382760"
  },
  {
    "text": "0 plus 0 plus 1 plus 2\nall the way up to 8 is 36. And then when i\nbecomes 9, Python",
    "start": "2382760",
    "end": "2389829"
  },
  {
    "text": "will take mysum, whatever\nit is right now, 36, add 9 to it to give us 45. ",
    "start": "2389830",
    "end": "2397933"
  },
  {
    "text": "And then that's the end\nof the program, right? There's nothing else to\ndo, except to print mysum.",
    "start": "2397933",
    "end": "2403910"
  },
  {
    "text": "So at the end of this loop,\nit's gone through 10 times adding 0 all the way up to 9.",
    "start": "2403910",
    "end": "2409900"
  },
  {
    "text": "We're going to print 45. Yeah? STUDENT: So I tried running it.",
    "start": "2409900",
    "end": "2415349"
  },
  {
    "text": "It printed 45 at the\ntop, and then just went 0, 1, 2, 3, 4 [INAUDIBLE].",
    "start": "2415350",
    "end": "2421980"
  },
  {
    "text": "ANA BELL: Oh, maybe you have\nanother print statement. Or it might be part of\nanother program that's being run beforehand that\nyou didn't comment out.",
    "start": "2421980",
    "end": "2429960"
  },
  {
    "text": "Yeah, next question? STUDENT: [INAUDIBLE] the\n+= syntax [INAUDIBLE]?? ",
    "start": "2429960",
    "end": "2437220"
  },
  {
    "text": "ANA BELL: The +=\nequals what it means? Oh, it just means it would be\nlike mysum equals mysum plus i.",
    "start": "2437220",
    "end": "2449740"
  },
  {
    "text": " It's just shorthand\nnotation because most",
    "start": "2449740",
    "end": "2454830"
  },
  {
    "text": "of your variable names\nmight be really long. And it's really\nannoying to retype them. And so that's generally why\nthat shorthand notation exists,",
    "start": "2454830",
    "end": "2462840"
  },
  {
    "text": "yeah. But it basically means\ntake whatever mysum is and add i to it.",
    "start": "2462840",
    "end": "2469960"
  },
  {
    "text": "And save it back into\nthe variable mysum. OK. Let's have you try\nthis code real quick.",
    "start": "2469960",
    "end": "2476260"
  },
  {
    "text": "So here is code. It's already on the Python\nfile to start out with.",
    "start": "2476260",
    "end": "2481840"
  },
  {
    "text": "I want you to have this code-- it's pretty close to working.",
    "start": "2481840",
    "end": "2488070"
  },
  {
    "text": "But there's one issue. So we have this for loop\nthat starts at start and ends at end.",
    "start": "2488070",
    "end": "2493260"
  },
  {
    "text": "And we're keeping a running sum. And then we're printing\nthe sum at the end. So very similar to what\nwe just saw, but what",
    "start": "2493260",
    "end": "2499380"
  },
  {
    "text": "I want this code to do is\nI want it to go and sum up the start and the end.",
    "start": "2499380",
    "end": "2505000"
  },
  {
    "text": "So if I have start\nas 3 and end is 5, I want it to add\n3 plus 4 plus 5.",
    "start": "2505000",
    "end": "2512820"
  },
  {
    "text": "And so this code is\nnot doing quite that. And I would like you to fix it\nor to tell me how to fix it.",
    "start": "2512820",
    "end": "2521770"
  },
  {
    "text": "So it's down here\non line 140-ish. ",
    "start": "2521770",
    "end": "2530110"
  },
  {
    "text": "First thing you should\ndo is run it and maybe see what answer it\nactually gives you. So I just ran it.",
    "start": "2530110",
    "end": "2536050"
  },
  {
    "text": "It gave me a 7.  When you're encountering\nan output that's",
    "start": "2536050",
    "end": "2542730"
  },
  {
    "text": "not quite what you expect, one\nof the first things to do-- you can obviously use\nthe Python Tutor. But another thing you can\ndo is put print statements",
    "start": "2542730",
    "end": "2550289"
  },
  {
    "text": "at various places. Useful places would\nbe inside for loop.",
    "start": "2550290",
    "end": "2556540"
  },
  {
    "text": "So here, we can print i. That's a reasonable\nthing to print out.",
    "start": "2556540",
    "end": "2562410"
  },
  {
    "text": "And maybe we'll see\nexactly what values of i we are adding because\nwe know the summing works.",
    "start": "2562410",
    "end": "2568830"
  },
  {
    "text": "We just wrote the program\non the previous line-- or previous slide.",
    "start": "2568830",
    "end": "2574660"
  },
  {
    "text": "So we got 3, 4, 7, which\nis a little confusing. Let's make our\nprint statement be a little bit better.\ni equals comma",
    "start": "2574660",
    "end": "2581010"
  },
  {
    "text": "and then print the\nactual value of i.  So what do you guys notice?",
    "start": "2581010",
    "end": "2586930"
  },
  {
    "text": "i is 3. i is 4. And then it prints the sum 7. What's the problem\nwith this code? ",
    "start": "2586930",
    "end": "2594319"
  },
  {
    "text": "Yeah? STUDENT: [INAUDIBLE] ANA BELL: Yeah, we're\nnot adding 5, right?",
    "start": "2594320",
    "end": "2599930"
  },
  {
    "text": "We're just adding 0,\noriginally, plus 3 plus 4.",
    "start": "2599930",
    "end": "2604940"
  },
  {
    "text": "And we've never added 5. So how can we fix that? Yeah?",
    "start": "2604940",
    "end": "2610720"
  },
  {
    "text": "STUDENT: end plus 1. ANA BELL: Yeah, we can\ndo n plus 1, exactly. So the range, remember,\ngrabs the-- oh, plus 1.",
    "start": "2610720",
    "end": "2617680"
  },
  {
    "text": "The range grabs these values as\nnumbers that it's working with.",
    "start": "2617680",
    "end": "2623650"
  },
  {
    "text": "So start is OK. end is OK. But we go up to but\nnot including end.",
    "start": "2623650",
    "end": "2628990"
  },
  {
    "text": "So if we go to end plus\n1, we're going to go up to but not including end plus 1.",
    "start": "2628990",
    "end": "2634210"
  },
  {
    "text": "So if we run it now,\nit looks much better. So we've got i is 3, i is 4,\ni is 5, and the sum is 12.",
    "start": "2634210",
    "end": "2643359"
  },
  {
    "text": "Perfect.  So print statements are very\nuseful when debugging code.",
    "start": "2643360",
    "end": "2652478"
  },
  {
    "text": "Questions about this one? Or does this make sense? ",
    "start": "2652478",
    "end": "2658319"
  },
  {
    "text": "OK. The last slide I want to\ndo before we do a summary is just to show you\nthat factorial code we",
    "start": "2658320",
    "end": "2665490"
  },
  {
    "text": "saw using a while loop\na few slides back. So it looks really verbose.",
    "start": "2665490",
    "end": "2671099"
  },
  {
    "text": "We kind of have to think\nabout it for a while before we realized what\nit's actually doing.",
    "start": "2671100",
    "end": "2676320"
  },
  {
    "text": "But it was calculating\nthe factorial. Obviously, good variable names\nhelped us figure that out. That same code in\na for loop looks",
    "start": "2676320",
    "end": "2685619"
  },
  {
    "text": "like this-- with a for\nloop looks like this. So we still have the\ninitialization of x to 4. We still initialize\nour factorial,",
    "start": "2685620",
    "end": "2692730"
  },
  {
    "text": "our running product to a 1. But we're losing the\nfour lines of code",
    "start": "2692730",
    "end": "2700530"
  },
  {
    "text": "that make up that pattern\nof changing numbers with while loops into 2.",
    "start": "2700530",
    "end": "2706440"
  },
  {
    "text": "So this line, i equals\n1, this while loop with the conditional, and\nthis incrementing of i become",
    "start": "2706440",
    "end": "2713280"
  },
  {
    "text": "the for loop and that's it. The for loop takes care of all\nof that-- the initialization,",
    "start": "2713280",
    "end": "2719310"
  },
  {
    "text": "the increment, and going\nup to but not including the last value, x plus 1.",
    "start": "2719310",
    "end": "2726119"
  },
  {
    "text": "So we're going to multiply\nthe factorial with 1, then 2, then 3, then 4 all\nthe way up to and including x.",
    "start": "2726120",
    "end": "2732494"
  },
  {
    "text": " So the big idea\nabout for loops is",
    "start": "2732495",
    "end": "2739500"
  },
  {
    "text": "they're going to repeat\nhowever long the sequence is. So you're able to\nrepeat certain code",
    "start": "2739500",
    "end": "2744750"
  },
  {
    "text": "a set number of\ntimes, which is really useful in some situations. While loops were\nuseful in situations where you didn't\nknow how many times",
    "start": "2744750",
    "end": "2751110"
  },
  {
    "text": "you might want to\nrepeat the code. So a quick summary-- we saw some looping\nmechanisms today.",
    "start": "2751110",
    "end": "2756630"
  },
  {
    "text": "It was a lot of syntax, I know. But the finger exercises for\ntoday will certainly help.",
    "start": "2756630",
    "end": "2762030"
  },
  {
    "text": "MITx also has extra\nhelp, extra exercises. It's really\nimportant to do them,",
    "start": "2762030",
    "end": "2769110"
  },
  {
    "text": "just to get the mental model for\nhow exactly these loops work, and how they assign\nvariables, and how they do",
    "start": "2769110",
    "end": "2776400"
  },
  {
    "text": "the checks behind the scenes. And it'll help you get\nfaster at writing code",
    "start": "2776400",
    "end": "2781500"
  },
  {
    "text": "and at doing quizzes as well. So that's it for today.",
    "start": "2781500",
    "end": "2787130"
  },
  {
    "start": "2787130",
    "end": "2801000"
  }
]