[
  {
    "start": "0",
    "end": "140000"
  },
  {
    "text": " So, we're going to talk today\nabout binary search trees.",
    "start": "11000",
    "end": "17000"
  },
  {
    "text": "It's something called randomly\nbuilt binary search trees.",
    "start": "17000",
    "end": "23000"
  },
  {
    "text": "And, I'll abbreviate binary\nsearch trees as BST's throughout",
    "start": "23000",
    "end": "29000"
  },
  {
    "text": "the lecture.\nAnd, you of all seen binary search trees in one place or\nanother, in particular,",
    "start": "29000",
    "end": "39000"
  },
  {
    "text": "recitation on Friday.\nSo, we're going to build up the",
    "start": "39000",
    "end": "45000"
  },
  {
    "text": "basic ideas presented there,\nand talk about how to randomize them, and make them good.\nSo, you know that there are",
    "start": "45000",
    "end": "54000"
  },
  {
    "text": "good binary search trees,\nwhich are relatively balanced, something like this.\nThe height is log n.",
    "start": "54000",
    "end": "62000"
  },
  {
    "text": "We called unbalanced,\nand that's good. Anything order log n will be\nfine. In terms of searching,\nit will then cost order log n.",
    "start": "62000",
    "end": "70000"
  },
  {
    "text": "And, there are bad binary\nsearch trees which have really large height,\npossibly as big as n.",
    "start": "70000",
    "end": "76000"
  },
  {
    "text": "So, this is good,\nand this is bad. We'd sort of like to know,\nwe'd like to build binary",
    "start": "76000",
    "end": "82000"
  },
  {
    "text": "search trees in such a way that\nthey are good all the time, or at least most of the time.\nThere are lots of ways to do",
    "start": "82000",
    "end": "91000"
  },
  {
    "text": "this, and in the next couple of\nweeks, we will see four of them, if you count the problem set,\nI believe.",
    "start": "91000",
    "end": "99000"
  },
  {
    "text": "Today, we are going to use\nrandomization to make them balanced most of the time in a\ncertain sense.",
    "start": "99000",
    "end": "105000"
  },
  {
    "text": "And then, in your problem set,\nyou will make that in a broader sense.\nBut, one way to motivate this",
    "start": "105000",
    "end": "112000"
  },
  {
    "text": "topic, so I'm not going to\ndefine randomly built binary search trees for a little bit.\nOne way to motivate the topic",
    "start": "112000",
    "end": "120000"
  },
  {
    "text": "is through sorting,\nour good friend. So, there's a natural way to\nsort n numbers using binary",
    "start": "120000",
    "end": "129000"
  },
  {
    "text": "search trees.\nSo, if I give you an array, A, how would you sort that\narray using binary search tree",
    "start": "129000",
    "end": "138000"
  },
  {
    "text": "operations as a black box?\nBuild the binary search tree, and then traverse it in order.\nExactly.",
    "start": "138000",
    "end": "147000"
  },
  {
    "start": "140000",
    "end": "218000"
  },
  {
    "text": "So, let's say we have some\ninitial tree, which is empty,\nand then for each element of",
    "start": "147000",
    "end": "155000"
  },
  {
    "text": "the array, we insert it into the\ntree. That's what you meant by\nbuilding the search tree.",
    "start": "155000",
    "end": "166000"
  },
  {
    "text": "So, we insert AI into the tree.\nThis is the binary search tree",
    "start": "166000",
    "end": "173000"
  },
  {
    "text": "insertion, standard insertion.\nAnd then, we do an in order",
    "start": "173000",
    "end": "180000"
  },
  {
    "text": "traversal, which in the book is\ncalled in order tree walk.",
    "start": "180000",
    "end": "189000"
  },
  {
    "text": "OK, you should know these\nalgorithms are, but just for very quick\nreminder, tree insert basically searches for that element AI\nuntil it finds the place where",
    "start": "189000",
    "end": "198000"
  },
  {
    "text": "it should have been if it was in\nthe tree already, and then adds a new leaf there\nto insert that value.",
    "start": "198000",
    "end": "204000"
  },
  {
    "text": "Tree walk recursively walks the\nleft subtree, then prints out the root,\nand then recursively walks the",
    "start": "204000",
    "end": "210000"
  },
  {
    "text": "right subtree.\nAnd, by the binary search tree property, that will print the\nelements out in sorted order.",
    "start": "210000",
    "end": "218000"
  },
  {
    "start": "218000",
    "end": "340000"
  },
  {
    "text": "So, let's do a quick example\nbecause this turns out to be related to another sorting\nalgorithm we've seen already.",
    "start": "218000",
    "end": "228000"
  },
  {
    "text": "So, while the example is\nprobably pretty trivial, the connection is pretty\nsurprising.",
    "start": "228000",
    "end": "235000"
  },
  {
    "text": "At least, it was to me the\nfirst time I taught this class.",
    "start": "235000",
    "end": "242000"
  },
  {
    "text": "So, my array is three,\none, eight, two, six, seven, five.\nAnd, I'm going to visit these",
    "start": "242000",
    "end": "248000"
  },
  {
    "text": "elements in order from left to\nright, and just build a tree. So, the first element I see is\nthree.",
    "start": "248000",
    "end": "255000"
  },
  {
    "text": "So, I insert three into an\nempty tree. That requires no comparisons.\nThen I insert one.",
    "start": "255000",
    "end": "261000"
  },
  {
    "text": "I see, is one bigger or less\nthan three? It's smaller.\nSo, I put it over here.",
    "start": "261000",
    "end": "267000"
  },
  {
    "text": "Then I insert eight.\nThat's bigger than three, so it get's a new leaf over\nhere.",
    "start": "267000",
    "end": "275000"
  },
  {
    "text": "Then I insert two.\nThat sits between one and three.\nAnd so, it would fall off this",
    "start": "275000",
    "end": "281000"
  },
  {
    "text": "right child of one.\nSo, I add two there. Six is bigger than three,\nand less than eight.",
    "start": "281000",
    "end": "288000"
  },
  {
    "text": "So, it goes here.\nSeven is bigger than three, and less than eight,\nbigger than six.",
    "start": "288000",
    "end": "294000"
  },
  {
    "text": "So, it goes here,\nand five fits in between three and five, three and six rather.\nAnd so, that's the binary",
    "start": "294000",
    "end": "303000"
  },
  {
    "text": "search tree that again.\nThen I run an in order traversal, which will print one,\ntwo, three, five,",
    "start": "303000",
    "end": "310000"
  },
  {
    "text": "six, seven, eight.\nOK, I can run I quickly in my head because I've got a big\nstack. I've got to be a little bit\ncareful.",
    "start": "310000",
    "end": "318000"
  },
  {
    "text": "Of course, you should check\nthat they come out in sorted order: one, two,\nthree, five,",
    "start": "318000",
    "end": "324000"
  },
  {
    "text": "six, seven, eight.\nAnd, if you don't have a big stack, you can go and buy one.\nThat's always useful.",
    "start": "324000",
    "end": "332000"
  },
  {
    "text": "Memory costs are going up a bit\nthese days, or going down. They should be because of\npolitics, but price-fixing,",
    "start": "332000",
    "end": "340000"
  },
  {
    "start": "340000",
    "end": "550000"
  },
  {
    "text": "or whatever.\nSo, the question is, what's the running time of the\nalgorithm?",
    "start": "340000",
    "end": "346000"
  },
  {
    "text": "Here, this is one of those\nanswers where it depends. The parts that are easy to\nanalyze are, well,",
    "start": "346000",
    "end": "353000"
  },
  {
    "text": "initialization.\nThe in order tree walk, how long does that take?\nn, good.",
    "start": "353000",
    "end": "360000"
  },
  {
    "text": "So, it's order n for the walk,\nand for the initialization, which is constant.\nThe question is,",
    "start": "360000",
    "end": "368000"
  },
  {
    "text": "how long does it take me to do\nn tree inserts? ",
    "start": "368000",
    "end": "381000"
  },
  {
    "text": "Anyone want to guess any kind\nof answer to that question, other than it depends?\nI've already stolen the thunder",
    "start": "381000",
    "end": "392000"
  },
  {
    "text": "there.\nYeah? Big Omega of n log n,\nthat's good.",
    "start": "392000",
    "end": "398000"
  },
  {
    "text": "It's at least n log n.\nWhy? ",
    "start": "398000",
    "end": "416000"
  },
  {
    "text": "Right.\nSo, you gave two reasons. The first one is because of the\ndecision tree lower bound.",
    "start": "416000",
    "end": "422000"
  },
  {
    "text": "That doesn't actually prove\nthis. You have to be a little bit\ncareful. This is a claim that it's omega\nn log n all the time.",
    "start": "422000",
    "end": "430000"
  },
  {
    "text": "It's certainly omega n log n in\nthe worst case. Every comparison-based sorting\nalgorithm is omega n log n in",
    "start": "430000",
    "end": "438000"
  },
  {
    "text": "the worst case.\nIt's also n log n every single time, omega n log n because of\nthe second reason you gave,",
    "start": "438000",
    "end": "445000"
  },
  {
    "text": "which is the best thing that\ncould happen is we have a perfectly balanced tree.\nSo, this is the figure that I",
    "start": "445000",
    "end": "453000"
  },
  {
    "text": "have drawn the most on a\nblackboard in my life, the perfect tree on 15 nodes,\nI guess.",
    "start": "453000",
    "end": "461000"
  },
  {
    "text": "So, if we're lucky,\nwe have this. And if you add up all the\ndepths of the nodes here, which gives you the search tree\ncost, in particular,",
    "start": "461000",
    "end": "468000"
  },
  {
    "text": "these n over two nodes in the\nbottom, each have depth log n. And, therefore,\nyou're going to have to pay it",
    "start": "468000",
    "end": "474000"
  },
  {
    "text": "least n log n for those.\nAnd, if you're less balanced, it's going to be even worse.\nThat takes some proving,",
    "start": "474000",
    "end": "482000"
  },
  {
    "text": "but it's true.\nSo, it's actually omega n log n",
    "start": "482000",
    "end": "488000"
  },
  {
    "text": "all the time.\nOK, there are some cases, like you do know that the\nelements are almost already in",
    "start": "488000",
    "end": "499000"
  },
  {
    "text": "order, you can do it in linear\nnumber comparisons.",
    "start": "499000",
    "end": "505000"
  },
  {
    "text": "But here, you can't.\nAny other guesses at an answer",
    "start": "505000",
    "end": "512000"
  },
  {
    "text": "to this question?\nYeah? Big O n^2?\nGood, why?",
    "start": "512000",
    "end": "519000"
  },
  {
    "text": "Right.\nWe are doing n things, and each node has depth,\nat most, n. So, the number of comparisons\nwe're making per element we",
    "start": "519000",
    "end": "529000"
  },
  {
    "text": "insert, is, at most,\nn. So that's, at most,\nn^2. Any other answers?\nIs it possible for this",
    "start": "529000",
    "end": "536000"
  },
  {
    "text": "algorithm to take n^2 time?\nAre there instances where it",
    "start": "536000",
    "end": "543000"
  },
  {
    "text": "takes theta n^2?\nIf it's already sorted, that would be pretty bad.\nSo, if it's already sorted or",
    "start": "543000",
    "end": "554000"
  },
  {
    "start": "550000",
    "end": "690000"
  },
  {
    "text": "if it's reverse sorted,\nyou are in bad shape because",
    "start": "554000",
    "end": "561000"
  },
  {
    "text": "then you get a tree like this.\nThis is the sorted case.",
    "start": "561000",
    "end": "567000"
  },
  {
    "text": "And, you compute.\nSo, the total cost, the time in general is going to\nbe the sum of the depths of the",
    "start": "567000",
    "end": "578000"
  },
  {
    "text": "nodes for each node,\nX, in the tree. And in this case,\nit's one plus two plus three",
    "start": "578000",
    "end": "585000"
  },
  {
    "text": "plus four, this arithmetic\nseries. There's n of them,\nso this is theta n squared.",
    "start": "585000",
    "end": "592000"
  },
  {
    "text": "It's like n^2 over two.\nSo, that's bad news. The worst-case running time of\nthis algorithm is n^2.",
    "start": "592000",
    "end": "603000"
  },
  {
    "text": "Does that sound familiar at\nall, and algorithms worst-case running time is n^2,\nin particular,",
    "start": "603000",
    "end": "611000"
  },
  {
    "text": "in the already-sorted case?\nBut if we're lucky, at the lucky case,\nas we said, it's a balanced",
    "start": "611000",
    "end": "620000"
  },
  {
    "text": "tree.\nWouldn't that be great? Anything with omega log n\nheight would give us a sorting",
    "start": "620000",
    "end": "628000"
  },
  {
    "text": "algorithm that runs in n log n.\nSo, in the lucky case,",
    "start": "628000",
    "end": "636000"
  },
  {
    "text": "we are n log n.\nBut in the unlucky case,",
    "start": "636000",
    "end": "643000"
  },
  {
    "text": "we are n^2 and unlucky use\nsorted. Does it remind you of any\nalgorithm we've seen before?",
    "start": "643000",
    "end": "657000"
  },
  {
    "text": "Quicksort.\nIt turns out the running time of this algorithm is the same as\nthe running time of quicksort in",
    "start": "657000",
    "end": "669000"
  },
  {
    "text": "a very strong sense.\nIt turns out the comparisons that this algorithm makes are\nexactly the same comparisons",
    "start": "669000",
    "end": "679000"
  },
  {
    "text": "that quicksort makes.\nIt makes them in a different order, but it's really the same\nalgorithm in disguise.",
    "start": "679000",
    "end": "689000"
  },
  {
    "text": "That's the surprise here.\nSo, in particular, we've already analyzed\nquicksort.",
    "start": "689000",
    "end": "696000"
  },
  {
    "start": "690000",
    "end": "945000"
  },
  {
    "text": "We should get something for\nfree out of that analysis. ",
    "start": "696000",
    "end": "714000"
  },
  {
    "text": "So, the relation is,\nBST sort and quicksort make the",
    "start": "714000",
    "end": "725000"
  },
  {
    "text": "same comparisons but in a\ndifferent order.",
    "start": "725000",
    "end": "735000"
  },
  {
    "start": "735000",
    "end": "745000"
  },
  {
    "text": "So, let me walk through the\nsame example we did before: three, one, eight,\ntwo, six, seven,",
    "start": "745000",
    "end": "753000"
  },
  {
    "text": "five.\nSo, there is an array. We are going to run a\nparticular version of quicksort.",
    "start": "753000",
    "end": "760000"
  },
  {
    "text": "I have to be a little bit\ncareful here. It's sort of the obvious\nversion of quicksort.",
    "start": "760000",
    "end": "767000"
  },
  {
    "text": "Remember, our standard,\nboring quicksort is you take the first element as the\npartition element.",
    "start": "767000",
    "end": "776000"
  },
  {
    "text": "So, I'll take three here.\nAnd, I split into the elements less than three,\nwhich is one and two.",
    "start": "776000",
    "end": "784000"
  },
  {
    "text": "And, the elements bigger than\nthree, which is eight, six, seven, five.\nAnd, in this version of quicksort, I don't change the\norder of the elements,",
    "start": "784000",
    "end": "792000"
  },
  {
    "text": "eight, six, seven,\nfive. So, let's say the order is\npreserved because only then will this equivalence hold.\nSo, this is sort of a stable",
    "start": "792000",
    "end": "800000"
  },
  {
    "text": "partition algorithm.\nIt's easy enough to do. It's a particular version of\nquicksort. And soon, we're going to\nrandomize it.",
    "start": "800000",
    "end": "807000"
  },
  {
    "text": "And after we randomize,\nthis difference doesn't matter. OK, then on the left recursion,\nwe split in the partition",
    "start": "807000",
    "end": "815000"
  },
  {
    "text": "element.\nThere is things less than one, which is nothing,\nthings bigger than one,",
    "start": "815000",
    "end": "821000"
  },
  {
    "text": "which is two.\nAnd then, that's our partition element.\nWe are done. Over here, we partition on\neight.",
    "start": "821000",
    "end": "828000"
  },
  {
    "text": "Everything is less than eight.\nSo, we get six, seven, five,\nnothing on the right. Then we partition at six.\nWe get things less than six,",
    "start": "828000",
    "end": "837000"
  },
  {
    "text": "mainly five,\nthings bigger than six, mainly seven.\nAnd, those are sort of",
    "start": "837000",
    "end": "843000"
  },
  {
    "text": "partition elements in a trivial\nway. Now, this tree that we get on\nthe partition elements looks an",
    "start": "843000",
    "end": "851000"
  },
  {
    "text": "awful lot like this tree.\nOK, it should be exactly the same tree.\nAnd, you can walk through,",
    "start": "851000",
    "end": "859000"
  },
  {
    "text": "what comparisons does quicksort\nmake? Well, first,\nit compares everything to",
    "start": "859000",
    "end": "865000"
  },
  {
    "text": "three, OK, except three itself.\nNow, if you look over here, what happens when we are\ninserting elements?",
    "start": "865000",
    "end": "872000"
  },
  {
    "text": "Well, each time we insert an\nelement, the first thing we do is compare with three.\nIf it's less than, we go to the left branch.\nIf it's greater than,",
    "start": "872000",
    "end": "880000"
  },
  {
    "text": "we go to the right branch.\nSo, we are making all these comparisons with three in both\ncases. Then, if we have an element\nless than three,",
    "start": "880000",
    "end": "887000"
  },
  {
    "text": "it's either one or two.\nIf it's one, we're done.\nNo comparisons happen here one to one.\nBut, we compare two to one. And indeed, when we insert two\nover there after comparing it to",
    "start": "887000",
    "end": "896000"
  },
  {
    "text": "three, we compare it to one.\nAnd then we figure out that it happens here.\nSame thing happens in quicksort.\nFor elements greater than",
    "start": "896000",
    "end": "904000"
  },
  {
    "text": "three, we compare everyone to\neight here because we are partitioning with respect to\neight, and here because that's",
    "start": "904000",
    "end": "912000"
  },
  {
    "text": "the next node after three.\nAs soon as eight is inserted, we compare everything with\neight to see in fact that's less",
    "start": "912000",
    "end": "920000"
  },
  {
    "text": "than eight, and so on:\nso, all of the same comparisons, just in a different\norder. So, we turn 90∞.\nKind of cool.",
    "start": "920000",
    "end": "929000"
  },
  {
    "text": "So, this has various\nconsequences in the analysis. ",
    "start": "929000",
    "end": "950000"
  },
  {
    "start": "945000",
    "end": "1380000"
  },
  {
    "text": "So, in particular,\nthe worst-case running time is theta n^2, which is not so\nexciting.",
    "start": "950000",
    "end": "958000"
  },
  {
    "text": "What we really care about is\nthe randomized version because",
    "start": "958000",
    "end": "964000"
  },
  {
    "text": "that's what performs well.\nSo, randomized BST sort is just",
    "start": "964000",
    "end": "970000"
  },
  {
    "text": "like randomized quicksort.\nSo, the first thing you do is",
    "start": "970000",
    "end": "976000"
  },
  {
    "text": "randomly permute the array\nuniformly, picking all permutations with equal\nprobability.",
    "start": "976000",
    "end": "984000"
  },
  {
    "text": "And then, we call BST sort.\nOK, this is basically what",
    "start": "984000",
    "end": "991000"
  },
  {
    "text": "randomized quicksort could be\nformulated as. And then, randomized BST sort\nis going to make exactly the",
    "start": "991000",
    "end": "1000000"
  },
  {
    "text": "same comparisons as randomized\nquicksort. Here, we are picking the root\nessentially randomly.",
    "start": "1000000",
    "end": "1008000"
  },
  {
    "text": "And here in quicksort,\nyou are picking the partition elements randomly.\nIt's the same difference.",
    "start": "1008000",
    "end": "1016000"
  },
  {
    "text": "OK, so the time of this\nalgorithm equals the time of randomized quicksort because we\nare making the same comparisons.",
    "start": "1016000",
    "end": "1028000"
  },
  {
    "text": "So, the number of comparisons\nis equal. And this is true as random\nvariables. The random variable,\nthe running time, this algorithm is equal to the\nrandom variable of this",
    "start": "1028000",
    "end": "1036000"
  },
  {
    "text": "algorithm.\nIn particular, the expectations are the same. ",
    "start": "1036000",
    "end": "1053000"
  },
  {
    "text": "OK, and we know that the\nexpected running time of randomized quicksort on n\nelements is?",
    "start": "1053000",
    "end": "1060000"
  },
  {
    "text": "Oh boy.\nn log n. Good.\nI was a little worried there. OK, so in particular,\nthe expected running time of",
    "start": "1060000",
    "end": "1069000"
  },
  {
    "text": "BST sort is n log n.\nObviously, this is not too exciting from a sorting point of\nview.",
    "start": "1069000",
    "end": "1077000"
  },
  {
    "text": "Sorting was just sort of to see\nthis connection.",
    "start": "1077000",
    "end": "1083000"
  },
  {
    "text": "What we actually care about,\nand the reason I've introduced this BST sort is what the tree\nlooks like. What we really want is that\nsearch tree.",
    "start": "1083000",
    "end": "1090000"
  },
  {
    "text": "The search tree can do more\nthan sort. n order traversals are a pretty\nboring thing to do with the search tree.\nYou can search in a search",
    "start": "1090000",
    "end": "1096000"
  },
  {
    "text": "tree.\nSo, OK, that's still not so exciting.\nYou could sort the elements and then put them in an array and do\nbinary search.",
    "start": "1096000",
    "end": "1102000"
  },
  {
    "text": "But, the point of binary search\ntrees, instead of binary search arrays, is that you can update\nthem dynamically.",
    "start": "1102000",
    "end": "1108000"
  },
  {
    "text": "We won't be updating them\ndynamically in this lecture, and we will in Wednesday and on\nyour problem set.",
    "start": "1108000",
    "end": "1115000"
  },
  {
    "text": "For now, it's just sort of\nwarm-up. Let's say that the elements\naren't changing. We are building one tree from\nthe beginning.",
    "start": "1115000",
    "end": "1121000"
  },
  {
    "text": "We have all n elements ahead of\ntime. We are going to build it\nrandomly. We randomly permute that array.\nThen we throw all the elements",
    "start": "1121000",
    "end": "1129000"
  },
  {
    "text": "into a binary search tree.\nThat's what BST sort does. Then it calls n order\ntraversal. I don't really care about n\norder traversal.",
    "start": "1129000",
    "end": "1136000"
  },
  {
    "text": "What I want,\nbecause we've just analyzed it. It would be a short lecture if\nI were done.",
    "start": "1136000",
    "end": "1144000"
  },
  {
    "text": "What we want is this randomly\nbuilt BST, which is what we get",
    "start": "1144000",
    "end": "1151000"
  },
  {
    "text": "out of this algorithm.\nSo, this is the tree resulting",
    "start": "1151000",
    "end": "1158000"
  },
  {
    "text": "from randomized BST sort,\nOK, resulting from randomly",
    "start": "1158000",
    "end": "1164000"
  },
  {
    "text": "permute in the array of just\ninserting those elements using",
    "start": "1164000",
    "end": "1170000"
  },
  {
    "text": "the simple tree insert\nalgorithm.",
    "start": "1170000",
    "end": "1176000"
  },
  {
    "text": "The question is,\nwhat does that tree look like? And in particular,\nis there anything we can",
    "start": "1176000",
    "end": "1185000"
  },
  {
    "text": "conclude out of this fact?\nThe expected running time of BST sort is n log n.\nOK, I've mentioned cursorily",
    "start": "1185000",
    "end": "1195000"
  },
  {
    "text": "what the running time of BST\nsort is, several times.",
    "start": "1195000",
    "end": "1202000"
  },
  {
    "text": "It was the sum.\nSo, this is the time of BST sort on n elements.\nIt's the sum over all nodes,",
    "start": "1202000",
    "end": "1211000"
  },
  {
    "text": "X, of the depth of that node.\nOK, depth starts at zero and",
    "start": "1211000",
    "end": "1217000"
  },
  {
    "text": "works its way down because the\nroot element, you don't make any comparisons\nbeyond that, you are making",
    "start": "1217000",
    "end": "1227000"
  },
  {
    "text": "whatever the depth is\ncomparisons. OK, so we know that this thing\nis, in expectation we know that",
    "start": "1227000",
    "end": "1240000"
  },
  {
    "text": "this is n log n.\nWhat does that tell us about",
    "start": "1240000",
    "end": "1247000"
  },
  {
    "text": "the tree?\nThis is for all nodes, X, in the tree.\nDoes it tell us anything about",
    "start": "1247000",
    "end": "1258000"
  },
  {
    "text": "the height of the tree,\nfor example? Yeah?\nRight, intuitively,",
    "start": "1258000",
    "end": "1267000"
  },
  {
    "text": "it says that the height of the\ntree is theta log n, and not n.\nBut, in fact,",
    "start": "1267000",
    "end": "1273000"
  },
  {
    "text": "it doesn't show that.\nAnd that's why if you feel that that's just intuition,\nbut it may not be quite right.",
    "start": "1273000",
    "end": "1281000"
  },
  {
    "text": "Indeed it's not.\nLet me tell you what it does say.\nSo, if we take expectation of",
    "start": "1281000",
    "end": "1287000"
  },
  {
    "text": "both sides, here we get n log n.\nSo, the expected value of that is n log n.\nSo, over here,",
    "start": "1287000",
    "end": "1295000"
  },
  {
    "text": "well, we get the expected total\ndepth, which is not so exciting.",
    "start": "1295000",
    "end": "1301000"
  },
  {
    "text": "Let's look at the expected\naverage depth. So, if I look at one over n,\nthe sum over all n nodes in the",
    "start": "1301000",
    "end": "1311000"
  },
  {
    "text": "tree of the depth of X,\nthat would be the average depth",
    "start": "1311000",
    "end": "1317000"
  },
  {
    "text": "over all the nodes.\nAnd what I should get is theta n log n over n because I divided\nn on both sides.",
    "start": "1317000",
    "end": "1326000"
  },
  {
    "text": "And, I'm using,\nhere, linearity of expectation, which is log n.\nSo, what this fact about the",
    "start": "1326000",
    "end": "1334000"
  },
  {
    "text": "expected running time tells me\nis that the average depth in the tree is log n,\nwhich is not quite the height",
    "start": "1334000",
    "end": "1343000"
  },
  {
    "text": "of the tree being log n. ",
    "start": "1343000",
    "end": "1355000"
  },
  {
    "text": "OK, remember the height of the\ntree is the maximum depth of any node.\nHere, we are just bounding the",
    "start": "1355000",
    "end": "1361000"
  },
  {
    "text": "average depth. ",
    "start": "1361000",
    "end": "1384000"
  },
  {
    "start": "1380000",
    "end": "1577000"
  },
  {
    "text": "Let's look at an example of a\ntree. I'll draw my favorite picture.\nSo, here we have a nice",
    "start": "1384000",
    "end": "1394000"
  },
  {
    "text": "balanced tree,\nlet's say, on half of the nodes",
    "start": "1394000",
    "end": "1400000"
  },
  {
    "text": "or a little more.\nAnd then, I have one really long path hanging off one\nparticular leaf.",
    "start": "1400000",
    "end": "1410000"
  },
  {
    "text": "It doesn't matter which one.\nAnd, I'm going to say that this",
    "start": "1410000",
    "end": "1417000"
  },
  {
    "text": "path has length,\nwith a total height here, I want to make root n,\nwhich is a lot bigger than log",
    "start": "1417000",
    "end": "1425000"
  },
  {
    "text": "n.\nThis is roughly log n. It's going to be log of n minus\nroot n, or so,",
    "start": "1425000",
    "end": "1431000"
  },
  {
    "text": "roughly.\nSo, most of the nodes have logarithmic height and,\nsorry, logarithmic depth.",
    "start": "1431000",
    "end": "1438000"
  },
  {
    "text": "If you compute the average\ndepth in this particular tree, for most of the nodes,\nlet's say it's,",
    "start": "1438000",
    "end": "1446000"
  },
  {
    "text": "at most, n of the nodes have\nheight log n.",
    "start": "1446000",
    "end": "1452000"
  },
  {
    "text": "And then, there are root n\nnodes, at most, down here, which have depth,\nat most, root n.",
    "start": "1452000",
    "end": "1459000"
  },
  {
    "text": "So, it's, at most,\nroot n times root n. In fact, it's like half that,\nbut not a big deal.",
    "start": "1459000",
    "end": "1466000"
  },
  {
    "text": "So, this is n.\nSo, this is n log n, or, sorry, average depth:\nI have to divide everything by",
    "start": "1466000",
    "end": "1474000"
  },
  {
    "text": "n.\nn log n would be rather large for an average height,\naverage depth.",
    "start": "1474000",
    "end": "1482000"
  },
  {
    "text": "So, the average depth here is\nlog n, but the height of the",
    "start": "1482000",
    "end": "1488000"
  },
  {
    "text": "tree is square root of n.\nSo, this is not enough. Just to know that the average\ndepth is log n doesn't mean that",
    "start": "1488000",
    "end": "1499000"
  },
  {
    "text": "the height is log n.\nOK, but the claim is this theorem for today is that the\nexpected height of a randomly",
    "start": "1499000",
    "end": "1510000"
  },
  {
    "text": "built binary search tree is\nindeed log n.",
    "start": "1510000",
    "end": "1516000"
  },
  {
    "text": "BST is order log n.\nThis is what we like to know because that tells us,\nif we just build a binary",
    "start": "1516000",
    "end": "1526000"
  },
  {
    "text": "search tree randomly,\nthen we can search in it in log n time.\nOK, for sorting,",
    "start": "1526000",
    "end": "1534000"
  },
  {
    "text": "it's not as big a deal.\nWe just care about the expected running time of creating the\nthing.",
    "start": "1534000",
    "end": "1541000"
  },
  {
    "text": "Here, now we know that once we\nprove this theorem, we know that we can search\nquickly in expectation,",
    "start": "1541000",
    "end": "1548000"
  },
  {
    "text": "in fact, most of the time.\nSo, the rest of today's lecture will be proving this theorem.\nIt's quite tricky,",
    "start": "1548000",
    "end": "1556000"
  },
  {
    "text": "as you might imagine.\nIt's another big probability analysis along the lines of\nquicksort and everything.",
    "start": "1556000",
    "end": "1566000"
  },
  {
    "start": "1566000",
    "end": "1582000"
  },
  {
    "start": "1577000",
    "end": "1931000"
  },
  {
    "text": "So, I'm going to start with an\noutline of the proof, unless there are any questions\nabout the theorem.",
    "start": "1582000",
    "end": "1591000"
  },
  {
    "text": "It should be pretty clear what\nwe want to prove. This is even weirder than most\nof the analyses we've seen.",
    "start": "1591000",
    "end": "1600000"
  },
  {
    "text": "It's going to use a fancy\ntrick, which is exponentiating a random variable.\nAnd to do that we need a tool",
    "start": "1600000",
    "end": "1610000"
  },
  {
    "text": "called Jenson's inequality.\nWe are going to prove that tool.\nUsually, we don't prove",
    "start": "1610000",
    "end": "1617000"
  },
  {
    "text": "probability tools.\nBut this one we are going to prove.\nIt's not too hard.",
    "start": "1617000",
    "end": "1623000"
  },
  {
    "text": "It's also basic analysis.\nSo, the lemma,",
    "start": "1623000",
    "end": "1629000"
  },
  {
    "text": "says that if we have what's\ncalled to a convex function, f, and you should all know what\nthat means, but I'll define it",
    "start": "1629000",
    "end": "1637000"
  },
  {
    "text": "soon in case you have forgotten.\nIf you have a convex function, f, and you have a random\nvariable, X, you take f of the",
    "start": "1637000",
    "end": "1645000"
  },
  {
    "text": "expectation.\nThat's, at most, the expectation of f of that\nrandom variable.",
    "start": "1645000",
    "end": "1652000"
  },
  {
    "text": "Think about it enough and draw\na convex function that is fairly",
    "start": "1652000",
    "end": "1660000"
  },
  {
    "text": "intuitive, I guess.\nBut we will prove it.",
    "start": "1660000",
    "end": "1666000"
  },
  {
    "text": "What that allows us to do is\ninstead of analyzing the random",
    "start": "1666000",
    "end": "1674000"
  },
  {
    "text": "variable that tells us the\nheight of a tree,",
    "start": "1674000",
    "end": "1680000"
  },
  {
    "text": "so, X_n I'll call the random\nvariable, RV,",
    "start": "1680000",
    "end": "1686000"
  },
  {
    "text": "of the height of a BST,\nrandomly constructed BST on n",
    "start": "1686000",
    "end": "1693000"
  },
  {
    "text": "nodes we will analyze.\nWell, instead of analyzing this",
    "start": "1693000",
    "end": "1701000"
  },
  {
    "text": "desired random variable,\nX_n, sorry, this should have",
    "start": "1701000",
    "end": "1707000"
  },
  {
    "text": "been in capital X.\nWe can analyze any convex function of X_n.\nAnd, we're going to analyze the",
    "start": "1707000",
    "end": "1715000"
  },
  {
    "text": "exponentiation.\nSo, I'm going to define Y_n to be two to the power of X_n.\nOK, the big question here is",
    "start": "1715000",
    "end": "1723000"
  },
  {
    "text": "why bother doing this?\nThe answer is because it works and it wouldn't work if we\nanalyze X_n.",
    "start": "1723000",
    "end": "1730000"
  },
  {
    "text": "We will see some intuition of\nthat later on, but it's not very intuitive.\nThis is our analysis where you",
    "start": "1730000",
    "end": "1739000"
  },
  {
    "text": "need this extra trick.\nSo, we're going to bound the expectation of Y_n,\nand from that,",
    "start": "1739000",
    "end": "1745000"
  },
  {
    "text": "and using Jensen's inequality,\nwe're going to get a bound on the expectation of X_n,\na pretty tight bound,",
    "start": "1745000",
    "end": "1752000"
  },
  {
    "text": "actually, because if we can\nbound the exponent up to constant factors,\nthe exponentiation up to",
    "start": "1752000",
    "end": "1758000"
  },
  {
    "text": "constant factors,\nwe can bound X_n even better because you take logs to get\nX_n. So, we will even figure out\nwhat the constant is.",
    "start": "1758000",
    "end": "1768000"
  },
  {
    "text": "So, what we will prove,\nthis is the heart of the proof, is that the expected value of\nY_n is order n^3.",
    "start": "1768000",
    "end": "1777000"
  },
  {
    "text": "Here, we won't really know what\nthe constant is. We don't need to.\nAnd then, we put these pieces",
    "start": "1777000",
    "end": "1786000"
  },
  {
    "text": "together.\nSo, let's do that. What we really care about is\nthe expectation of X_n,",
    "start": "1786000",
    "end": "1794000"
  },
  {
    "text": "which is the height of our\ntree. What we find out about is this\nfact.",
    "start": "1794000",
    "end": "1802000"
  },
  {
    "text": "So, leave some horizontal space\nhere. We get the expectation of two\nto the X_n.",
    "start": "1802000",
    "end": "1809000"
  },
  {
    "text": "That's the expectation of Y_n.\nSo, we learned that that's order n^3.\nAnd, Jensen's inequality tells",
    "start": "1809000",
    "end": "1818000"
  },
  {
    "text": "us that if we take this\nfunction, two to the X, we plug it in here,\nthat on the left-hand side we",
    "start": "1818000",
    "end": "1827000"
  },
  {
    "text": "get two to the E of X.\nSo, we get two to the E of X_n",
    "start": "1827000",
    "end": "1833000"
  },
  {
    "text": "is at most E of two to the X_n.\nSo, that's where we use Jensen's inequality,\nbecause what we care about is E",
    "start": "1833000",
    "end": "1843000"
  },
  {
    "text": "of X_n.\nSo now, we have a bound. We say, well,\ntwo to the E of X_n is,",
    "start": "1843000",
    "end": "1850000"
  },
  {
    "text": "at most, n^3.\nSo, if we take the log of both sides, we get E of X_n is,\nat most, the log of n^3.",
    "start": "1850000",
    "end": "1860000"
  },
  {
    "text": "OK, I will write it in this\nfunny way, log of order n^3, which will actually tell us the\nconstant.",
    "start": "1860000",
    "end": "1869000"
  },
  {
    "text": "This is three log n plus order\none. So, we will prove that the\nexpected height of a randomly",
    "start": "1869000",
    "end": "1878000"
  },
  {
    "text": "constructed binary search tree\non n nodes is roughly three log",
    "start": "1878000",
    "end": "1884000"
  },
  {
    "text": "n, at most.\nOK, I will say more about that later.\nSo, you've now seen the end of",
    "start": "1884000",
    "end": "1891000"
  },
  {
    "text": "the proof.\nThat's the foreshadowing. And now, this is the top-down\napproach.",
    "start": "1891000",
    "end": "1898000"
  },
  {
    "text": "So, you sort of see what the\nsteps are. Now, we just have to do the\nsteps.",
    "start": "1898000",
    "end": "1904000"
  },
  {
    "text": "OK, step one:\ntake a bit of work, but it's easy because it's\npretty basic stuff.",
    "start": "1904000",
    "end": "1910000"
  },
  {
    "text": "Step two is just a definition\nand we are done. Step three is probably the\nhardest part.",
    "start": "1910000",
    "end": "1917000"
  },
  {
    "text": "Step four, we've already done.\nSo, let's start with step one.",
    "start": "1917000",
    "end": "1923000"
  },
  {
    "start": "1923000",
    "end": "1936000"
  },
  {
    "start": "1931000",
    "end": "2228000"
  },
  {
    "text": "So, the first thing I need to\ndo is define a convex function",
    "start": "1936000",
    "end": "1942000"
  },
  {
    "text": "because we are going to\nmanipulate the definition a fair",
    "start": "1942000",
    "end": "1949000"
  },
  {
    "text": "amount.\nSo, this is a notion from real analysis.\nAnalysis is a fancy word for",
    "start": "1949000",
    "end": "1956000"
  },
  {
    "text": "calculus if you haven't taken\nthe proper analysis class. You should have seen convexity\nin any calculus class.",
    "start": "1956000",
    "end": "1964000"
  },
  {
    "text": "A convex function is one that\nlooks like this. OK, good.\nOne way to formalize that",
    "start": "1964000",
    "end": "1970000"
  },
  {
    "text": "notion is to consider any two\npoints on this curve. So, I'm only interested in\nfunctions from reals to reals.",
    "start": "1970000",
    "end": "1977000"
  },
  {
    "text": "So, it looks like this.\nThis is f of something. And, this is the something.\nIf I take two points on this",
    "start": "1977000",
    "end": "1985000"
  },
  {
    "text": "curve, and I draw a line segment\nconnecting them, that line segment is always\nabove the curve.",
    "start": "1985000",
    "end": "1991000"
  },
  {
    "text": "That's the meaning of\nconvexity. It has a geometric notion,\nwhich is basically the same. But for functions,\nthis line segment should stay",
    "start": "1991000",
    "end": "1999000"
  },
  {
    "text": "above the curve.\nThe line does not stay above the curve.\nIf I extended it farther, it goes beneath the curve,\nof course.",
    "start": "1999000",
    "end": "2006000"
  },
  {
    "text": "But, that segment should.\nSo, I'm going to formalize that a little bit.\nI'll call this x,",
    "start": "2006000",
    "end": "2013000"
  },
  {
    "text": "and then this is f of x.\nAnd, I'll call this y, and this is f of y.\nSo, the claim is that I take",
    "start": "2013000",
    "end": "2021000"
  },
  {
    "text": "any number between x and y,\nand I look up, and I say, OK,\nhere's the point on the curve.",
    "start": "2021000",
    "end": "2028000"
  },
  {
    "text": "Here's the point on the line\nsegment. The value of that point on the\ny value, here,",
    "start": "2028000",
    "end": "2034000"
  },
  {
    "text": "should be greater than or equal\nto the y value here, OK?\nTo figure out what the point",
    "start": "2034000",
    "end": "2041000"
  },
  {
    "text": "is, we need some,\nI would call it geometry. I'm sure it's an analysis\nconcept, too.",
    "start": "2041000",
    "end": "2048000"
  },
  {
    "text": "But, I'm a geometer,\nso I get to call it geometry. If you have two points,\np and q, and you want to",
    "start": "2048000",
    "end": "2056000"
  },
  {
    "text": "parameterize this line segment\nbetween them, so, I want to parameterize some\npoints here, the way to do it is",
    "start": "2056000",
    "end": "2064000"
  },
  {
    "text": "to take a linear combination.\nAnd, if you should have taken some linear algebra,\nlinear combination look",
    "start": "2064000",
    "end": "2072000"
  },
  {
    "text": "something like this.\nAnd, in fact, we're going to take something\ncalled an affine combination",
    "start": "2072000",
    "end": "2079000"
  },
  {
    "text": "where alpha plus beta equals\none. It turns out,\nif you take all such points, some number,\nalpha, times the point,",
    "start": "2079000",
    "end": "2085000"
  },
  {
    "text": "p, plus some number,\nbeta times the point, q, where alpha plus beta equals\none. If you take all those points,\nyou get the entire line here,",
    "start": "2085000",
    "end": "2093000"
  },
  {
    "text": "which is nifty.\nBut, we don't want the entire line.\nIf you also constrained alpha and beta to be nonnegative,\nyou just get this line segment.",
    "start": "2093000",
    "end": "2101000"
  },
  {
    "text": "So, this forces alpha and beta\nto be between zero and one because they have to sum to one,\nand they are nonnegative.",
    "start": "2101000",
    "end": "2110000"
  },
  {
    "text": "So, what we are going to do\nhere is take alpha times x plus beta times y.\nThat's going to be our point",
    "start": "2110000",
    "end": "2117000"
  },
  {
    "text": "between with these constraints:\nalpha plus beta equals one. Alpha and beta are greater than\nor equal to zero.",
    "start": "2117000",
    "end": "2126000"
  },
  {
    "text": "Then, this point is f of that.\nThis is f of alpha x plus beta, y.\nAnd, this point is the linear",
    "start": "2126000",
    "end": "2134000"
  },
  {
    "text": "interpolation between f of x and\nf of y, the same one. So, it's alpha times f of x\nplus beta times f of y.",
    "start": "2134000",
    "end": "2142000"
  },
  {
    "text": "OK, that's the intuition.\nIf you didn't follow it, it's not too big a deal because\nall we care about are the",
    "start": "2142000",
    "end": "2151000"
  },
  {
    "text": "symbolic answer for proving\nthings. But, that's where this comes\nfrom. So, here's the definition.\nIts function is convex.",
    "start": "2151000",
    "end": "2163000"
  },
  {
    "text": "If, for all x and y,\nand all alpha and beta are",
    "start": "2163000",
    "end": "2169000"
  },
  {
    "text": "greater than or equal to zero,\nwhose sum is one,",
    "start": "2169000",
    "end": "2176000"
  },
  {
    "text": "we have f of alpha x plus beta\ny is less than or equal to alpha",
    "start": "2176000",
    "end": "2185000"
  },
  {
    "text": "f of x plus beta f of y.\nSo, that's just saying that",
    "start": "2185000",
    "end": "2192000"
  },
  {
    "text": "this y coordinate here is less\nthan or equal to this y",
    "start": "2192000",
    "end": "2198000"
  },
  {
    "text": "coordinate.\nOK, but that's the symbolism behind that picture.\nOK, so now we want to prove",
    "start": "2198000",
    "end": "2206000"
  },
  {
    "text": "Jensen's inequality.\nOK, we're not quite there yet. We are going to prove a simple\nlemma, from which it will be",
    "start": "2206000",
    "end": "2217000"
  },
  {
    "text": "easy to derive Jenson's\nequality. So, this is the theorem we are\nproving.",
    "start": "2217000",
    "end": "2227000"
  },
  {
    "text": "So, here's a lemma about convex\nfunctions.",
    "start": "2227000",
    "end": "2233000"
  },
  {
    "start": "2228000",
    "end": "2726000"
  },
  {
    "text": "You may have seen it before.\nIt will be crucial to Jensen's",
    "start": "2233000",
    "end": "2242000"
  },
  {
    "text": "inequality.\nSo, suppose, this is a statement about\naffine combinations of n things",
    "start": "2242000",
    "end": "2254000"
  },
  {
    "text": "instead of two things.\nSo, this will say that",
    "start": "2254000",
    "end": "2261000"
  },
  {
    "text": "convexity can be generalized to\ntaking n things. So, suppose we have n real\nnumbers, and we have n values",
    "start": "2261000",
    "end": "2272000"
  },
  {
    "text": "alpha i, alpha one up to alpha\nn. They are all nonnegative.\nAnd, their sum is one.",
    "start": "2272000",
    "end": "2280000"
  },
  {
    "text": "So, the sum of alpha k,\nI guess, k equals one to n,",
    "start": "2280000",
    "end": "2286000"
  },
  {
    "text": "is one.\nSo, those are the assumptions. The conclusion is the same\nthing, but summing over all k.",
    "start": "2286000",
    "end": "2298000"
  },
  {
    "text": "So, k equals one to n,\nalpha_k * x_k. Take f of that versus taking\nthe sum of the alphas times the",
    "start": "2298000",
    "end": "2309000"
  },
  {
    "text": "f's.\nk equals one to n. So, the definition of convexity\nis exactly that statement,",
    "start": "2309000",
    "end": "2317000"
  },
  {
    "text": "but where n equals two.\nOK, alpha one and alpha two are alpha and beta.\nThis is just a statement for",
    "start": "2317000",
    "end": "2326000"
  },
  {
    "text": "general n.\nAnd, you can interpret this in some funnier way,\nwhich I won't get into.",
    "start": "2326000",
    "end": "2333000"
  },
  {
    "text": "Oh, sure, why not?\nI'm a geometer. So, this is saying you take\nseveral points on this curve.",
    "start": "2333000",
    "end": "2343000"
  },
  {
    "text": "You take the polygon that they\ndefine. So, these are straight-line\nsegments. You take the interior.\nIf you take an affine",
    "start": "2343000",
    "end": "2350000"
  },
  {
    "text": "combination like that,\nyou will get a point inside that polygon,\nor possibly on the boundary.",
    "start": "2350000",
    "end": "2356000"
  },
  {
    "text": "The claim is that all those\npoints are above the curve. Again, intuitively:\ntrue if you draw a nice,",
    "start": "2356000",
    "end": "2363000"
  },
  {
    "text": "canonical convex curve,\nbut in fact, it's true algebraically,\ntoo. It's always a good thing.\nAny suggestions on how we might",
    "start": "2363000",
    "end": "2373000"
  },
  {
    "text": "prove this theorem,\nthis lemma? It's pretty easy.\nSo, what technique might we use",
    "start": "2373000",
    "end": "2380000"
  },
  {
    "text": "to prove it?\nOne word: induction. Always a good answer,\nyeah.",
    "start": "2380000",
    "end": "2386000"
  },
  {
    "text": "Induction should shout out at\nyou here because we already know",
    "start": "2386000",
    "end": "2392000"
  },
  {
    "text": "that this is true by definition\nof convexity for n equals two.",
    "start": "2392000",
    "end": "2400000"
  },
  {
    "text": "So, the base case is clear.\nIn fact, there's an even simpler base case,\nwhich is when n equals one.",
    "start": "2400000",
    "end": "2408000"
  },
  {
    "text": "If n equals one,\nthen you have one number that sums to one.\nSo, alpha one is one.",
    "start": "2408000",
    "end": "2416000"
  },
  {
    "text": "And so, nothing is going on\nhere. This is just saying that f of\none times x_1 is,",
    "start": "2416000",
    "end": "2423000"
  },
  {
    "text": "at most, one times f of x_1:\nso, not terribly exciting because that holds with the\nquality.",
    "start": "2423000",
    "end": "2433000"
  },
  {
    "text": "OK, so we don't even need the n\nequals two base case. So, the interesting part,\nalthough still not terribly",
    "start": "2433000",
    "end": "2442000"
  },
  {
    "text": "interesting, is the induction\nstep. This is good practice in\ninduction.",
    "start": "2442000",
    "end": "2448000"
  },
  {
    "text": "So, what we care about is this\nf of this linear combination, f on combination,\nx_k times x_k summed over all",
    "start": "2448000",
    "end": "2457000"
  },
  {
    "text": "k.\nNow, what I would like to do is apply induction.\nWhat I know about inductively,",
    "start": "2457000",
    "end": "2465000"
  },
  {
    "text": "is say f of this sum,\nif it's summed only up to n minus one instead of all the way\nup to n.",
    "start": "2465000",
    "end": "2472000"
  },
  {
    "text": "Any smaller sum I can deal with\nby induction. So, I'm going to try and get\nrid of the nth term.",
    "start": "2472000",
    "end": "2480000"
  },
  {
    "text": "I want to separate it out.\nAnd, this is fairly natural if you've played with affine\ncombinations before.",
    "start": "2480000",
    "end": "2488000"
  },
  {
    "text": "But it's just some algebra.\nSo, I want to separate out the",
    "start": "2488000",
    "end": "2495000"
  },
  {
    "text": "alpha_n*x_n term.\nAnd, I'd also like to make it an affine combination.\nThis is the trick.",
    "start": "2495000",
    "end": "2505000"
  },
  {
    "text": "Sorry, no f here.\nIf I just removed the last term, the alpha k's from one up\nto n minus one wouldn't sum to",
    "start": "2505000",
    "end": "2517000"
  },
  {
    "text": "one anymore.\nThey'd sum to something smaller.\nSo, I can't just take out this",
    "start": "2517000",
    "end": "2525000"
  },
  {
    "text": "term.\nI'm going to have to do some trickery here,\nx_k plus the f. Good.\nSo, you should see why this is",
    "start": "2525000",
    "end": "2533000"
  },
  {
    "text": "true, because the one minus\nalpha n's cancel. And then, I'm just getting the\nsum of alpha_k*x_k,",
    "start": "2533000",
    "end": "2542000"
  },
  {
    "text": "k equals one to n minus one,\nplus the alpha_n*x_n term.",
    "start": "2542000",
    "end": "2548000"
  },
  {
    "text": "So, I haven't done anything\nhere. These are equal.\nBut now, I have this nifty feature, that on the one hand,\nthese two numbers,",
    "start": "2548000",
    "end": "2556000"
  },
  {
    "text": "alpha n and one minus alpha n\nsum to one. And on the other hand,\nif I did it right, these numbers should sum up to\none just going from one up to n",
    "start": "2556000",
    "end": "2565000"
  },
  {
    "text": "minus one.\nWhy do they sum up to one? Well, these numbers summed up\nto one minus alpha n.",
    "start": "2565000",
    "end": "2571000"
  },
  {
    "text": "And so, I'm dividing everything\nby one minus alpha n. So, they will sum to one.\nSo now, I have two affine",
    "start": "2571000",
    "end": "2577000"
  },
  {
    "text": "combinations.\nI just apply the two things that I know.\nI know this affine combination",
    "start": "2577000",
    "end": "2587000"
  },
  {
    "text": "will work because,\nwell, why? Why can I say that this is\nalpha n f of x_n plus one minus",
    "start": "2587000",
    "end": "2596000"
  },
  {
    "text": "alpha n f of this crazy sum? ",
    "start": "2596000",
    "end": "2615000"
  },
  {
    "text": "Shout it out.\nThere are two possible answers.",
    "start": "2615000",
    "end": "2621000"
  },
  {
    "text": "One is correct,\nand one is incorrect.",
    "start": "2621000",
    "end": "2627000"
  },
  {
    "text": "So, which will it be?\nThis should have been less than",
    "start": "2627000",
    "end": "2635000"
  },
  {
    "text": "or equal to.\nThat's important.",
    "start": "2635000",
    "end": "2641000"
  },
  {
    "text": "It's on the board.\nIt can't be too difficult. ",
    "start": "2641000",
    "end": "2657000"
  },
  {
    "text": "So, I'm treating this as just\none big X value. So, I have some x_n,\nand I have some crazy X.",
    "start": "2657000",
    "end": "2666000"
  },
  {
    "text": "I want f of the affine\ncombination of those two X values is, at most,\nthe affine combinations of the",
    "start": "2666000",
    "end": "2676000"
  },
  {
    "text": "f's of those X values.\nThis is? It is the inductive hypothesis\nwhere n equals two.",
    "start": "2676000",
    "end": "2683000"
  },
  {
    "text": "Unfortunately,\nwe didn't prove the n equals two case is a special base case.\nSo, we can't use induction here",
    "start": "2683000",
    "end": "2689000"
  },
  {
    "text": "the way that I've stated the\nbase case. If you did n equals two base\ncase, you can do that.",
    "start": "2689000",
    "end": "2695000"
  },
  {
    "text": "Here, we can't.\nSo, the other answer is by convexity, good.\nThat's right here.",
    "start": "2695000",
    "end": "2702000"
  },
  {
    "text": "So, f is convex.\nWe know that this is true for",
    "start": "2702000",
    "end": "2708000"
  },
  {
    "text": "any two X values,\nand provided these two sum to",
    "start": "2708000",
    "end": "2715000"
  },
  {
    "text": "one.\nSo, we know that this is true. Now is when we apply induction.\nSo, now we are going to",
    "start": "2715000",
    "end": "2728000"
  },
  {
    "start": "2726000",
    "end": "3100000"
  },
  {
    "text": "manipulate this right term by\ninduction.",
    "start": "2728000",
    "end": "2735000"
  },
  {
    "text": "See, before we didn't\nnecessarily know that n was bigger than two.\nBut, we know that n is bigger",
    "start": "2735000",
    "end": "2744000"
  },
  {
    "text": "than n minus one.\nThat much, I can be sure of. So, this is one minus alpha n\ntimes the sum,",
    "start": "2744000",
    "end": "2753000"
  },
  {
    "text": "k equals one to n minus one of\nalpha k over one minus alpha n",
    "start": "2753000",
    "end": "2760000"
  },
  {
    "text": "times f of x_k,\nif I got that right. This is by induction,\nthe induction hypothesis,",
    "start": "2760000",
    "end": "2769000"
  },
  {
    "text": "because these alpha k's over\none minus alpha n sum to one.",
    "start": "2769000",
    "end": "2776000"
  },
  {
    "text": "Now, these one minus alpha n's\ncancel, and we just get what we",
    "start": "2776000",
    "end": "2782000"
  },
  {
    "text": "want.\nThis is sum k equals one to n of alpha k, f of x_k.\nSo, we get f of the sum is,",
    "start": "2782000",
    "end": "2791000"
  },
  {
    "text": "at most, sum of the f's.\nThat proves the lemma.",
    "start": "2791000",
    "end": "2797000"
  },
  {
    "text": "OK, a bit tedious,\nbut each step is pretty",
    "start": "2797000",
    "end": "2803000"
  },
  {
    "text": "straightforward.\nDo you agree? Now, it turns out to be\nrelatively straightforward to",
    "start": "2803000",
    "end": "2813000"
  },
  {
    "text": "prove Jensen's inequality.\nThat's the magic.",
    "start": "2813000",
    "end": "2820000"
  },
  {
    "text": "And then, we get to do the\nexpectation analysis. So, we use our good friends,\nindicator random variables.",
    "start": "2820000",
    "end": "2829000"
  },
  {
    "text": "OK, but for now,\nwe just want to prove this statement.\nIf we have a convex function,",
    "start": "2829000",
    "end": "2836000"
  },
  {
    "text": "f of the expectation is,\nat most, expectation of f of that random variable.\nOK, this is a random variable,",
    "start": "2836000",
    "end": "2846000"
  },
  {
    "text": "right?\nIf you want to sample from this random variable,\nyou sample from X,",
    "start": "2846000",
    "end": "2853000"
  },
  {
    "text": "and then you apply f to it.\nThat's the meaning of this",
    "start": "2853000",
    "end": "2859000"
  },
  {
    "text": "notation, f of X because X is a\nrandom variable.",
    "start": "2859000",
    "end": "2865000"
  },
  {
    "text": "We get to use that f is convex.\nOK, it turns out this is not",
    "start": "2865000",
    "end": "2871000"
  },
  {
    "text": "hard, if you remember the\ndefinition of expectation,",
    "start": "2871000",
    "end": "2877000"
  },
  {
    "text": "oh, I want to make one more\nassumption here, which is that X is integral.\nSo, it's an integer random",
    "start": "2877000",
    "end": "2888000"
  },
  {
    "text": "variable, meaning it takes\ninteger values. OK, that's all we care about\nbecause we're looking at running",
    "start": "2888000",
    "end": "2896000"
  },
  {
    "text": "times.\nThis statement is true for continuous random variables,\ntoo, but I would like to do the",
    "start": "2896000",
    "end": "2904000"
  },
  {
    "text": "discrete case because then I get\nto write down what U of X is. So, what is the definition of E\nof X?",
    "start": "2904000",
    "end": "2914000"
  },
  {
    "text": "X only takes on integer values.\nThis is easy,",
    "start": "2914000",
    "end": "2920000"
  },
  {
    "text": "but you have to remember it.\nIt's a good drill.",
    "start": "2920000",
    "end": "2927000"
  },
  {
    "text": "I don't really know much about\nX except that it takes on",
    "start": "2927000",
    "end": "2935000"
  },
  {
    "text": "integer values.\nAny suggestions on how I should",
    "start": "2935000",
    "end": "2942000"
  },
  {
    "text": "expand the expectation of X?\nHow many people know this by",
    "start": "2942000",
    "end": "2950000"
  },
  {
    "text": "heart?\nOK, it's not too easy then. Well, expectation has something\nto do with probability,",
    "start": "2950000",
    "end": "2960000"
  },
  {
    "text": "right?\nSo, I should be looking at something like the probability\nthat X equals some value,",
    "start": "2960000",
    "end": "2969000"
  },
  {
    "text": "x.\nThat would seem like a good thing to do.\nWhat else goes here?",
    "start": "2969000",
    "end": "2976000"
  },
  {
    "text": "A sum, yeah.\nThe sum, well, X could be somewhere between\nminus infinity and infinity.",
    "start": "2976000",
    "end": "2984000"
  },
  {
    "text": "That's certainly true.\nAnd, we have some more. There's something missing here.\nWhat is this sum?",
    "start": "2984000",
    "end": "2994000"
  },
  {
    "text": "What does it come out to for\nany random variable, X, that takes on integer\nvalues?",
    "start": "2994000",
    "end": "3003000"
  },
  {
    "text": "One, good.\nSo, I need to add in something here, namely X.\nOK, that's the definition of",
    "start": "3003000",
    "end": "3010000"
  },
  {
    "text": "the expectation.\nNow, f of a sum of things, where these coefficients sum to\none looks an awful lot like the",
    "start": "3010000",
    "end": "3018000"
  },
  {
    "text": "lemma that we just proved.\nOK, we proved it in the finite case.\nIt turns out,",
    "start": "3018000",
    "end": "3025000"
  },
  {
    "text": "it holds just as well if you\ntake all integers. So, I'm just going to assume\nthat.",
    "start": "3025000",
    "end": "3033000"
  },
  {
    "text": "So, I have these probabilities,\nthese alpha values sum to one.",
    "start": "3033000",
    "end": "3039000"
  },
  {
    "text": "Therefore, I can use this\ninequality, that this is, at most, let me get this right,\nI have the alphas,",
    "start": "3039000",
    "end": "3049000"
  },
  {
    "text": "so I have a sum,\nx equals minus infinity to infinity of the alphas,\nwhich are a probability;",
    "start": "3049000",
    "end": "3058000"
  },
  {
    "text": "capital X equals little x times\nf of the value, f of little x.\nOK, so there it is.",
    "start": "3058000",
    "end": "3069000"
  },
  {
    "text": "I've used the lemma.\nSo, maybe now I'll erase the",
    "start": "3069000",
    "end": "3076000"
  },
  {
    "text": "lemma.\nOK, I cheated by using the countable version of the lemma\nwhile only proving the finite",
    "start": "3076000",
    "end": "3091000"
  },
  {
    "text": "case.\nIt's all I can do in lecture. So, this is by a lemma.\nNow, what I'd like to prove and",
    "start": "3091000",
    "end": "3102000"
  },
  {
    "text": "leave some blank space here is\nthis is, at most, E of f of X,\nso that this summation is,",
    "start": "3102000",
    "end": "3111000"
  },
  {
    "text": "at most, E of f of X.\nActually, it's equal to E of f of X.\nAnd, it really looks kind of",
    "start": "3111000",
    "end": "3120000"
  },
  {
    "text": "equal, right?\nYou've got sum of some probabilities times f of X.\nIt almost looks like the",
    "start": "3120000",
    "end": "3129000"
  },
  {
    "text": "definition of E of f of X,\nbut it isn't. You've got to be a little bit\ncareful because E of f of X",
    "start": "3129000",
    "end": "3138000"
  },
  {
    "text": "should talk about the\nprobability that f of X equals a particular value.\nWe can relate these as follows.",
    "start": "3138000",
    "end": "3148000"
  },
  {
    "text": "It's not too hard.\nYou can look at each value that f takes on, and then look at all\nthe values, k,",
    "start": "3148000",
    "end": "3157000"
  },
  {
    "text": "that map to that value,\nx. So all the k's where f of X\nequals x, the probability that X",
    "start": "3157000",
    "end": "3168000"
  },
  {
    "text": "equals k, OK,\nthis is another way of writing",
    "start": "3168000",
    "end": "3174000"
  },
  {
    "text": "the probability that f of X\nequals x.",
    "start": "3174000",
    "end": "3180000"
  },
  {
    "text": "OK, so, in other words,\nI'm grouping the terms in a particular way.\nI'm saying, well,",
    "start": "3180000",
    "end": "3187000"
  },
  {
    "text": "f of X takes on various values.\nClever me to switch. I used to use k's unannounced,\nso I better call this something",
    "start": "3187000",
    "end": "3198000"
  },
  {
    "text": "else.\nLet's call this Y, sorry, switch notation here.\nIt makes sense.",
    "start": "3198000",
    "end": "3205000"
  },
  {
    "text": "I should look at the\nprobability that X equals x.",
    "start": "3205000",
    "end": "3211000"
  },
  {
    "text": "So, what I really care about is\nwhat this f of X value takes on. Let's just call it Y,\nlook at all the values,",
    "start": "3211000",
    "end": "3218000"
  },
  {
    "text": "Y, that f could take on.\nThat's the range of f. And then, I'll look at all the\ndifferent values of X where f of",
    "start": "3218000",
    "end": "3226000"
  },
  {
    "text": "X equals Y.\nIf I add up those probabilities,\nbecause these are different values of X.\nThose are sort of independent",
    "start": "3226000",
    "end": "3233000"
  },
  {
    "text": "events.\nSo, this summation will be the probability that f of X equals\nY. This is capital X.\nThis is little y.",
    "start": "3233000",
    "end": "3242000"
  },
  {
    "text": "And then, if I multiply that by\ny, I'm getting the expectation",
    "start": "3242000",
    "end": "3249000"
  },
  {
    "text": "of f of X.\nSo, think about this, these two inequalities hold.\nThis may be a bit bizarre here",
    "start": "3249000",
    "end": "3258000"
  },
  {
    "text": "because these sums are\npotentially infinite. But, it's true.\nOK, this proves Jensen's",
    "start": "3258000",
    "end": "3266000"
  },
  {
    "text": "inequality.\nSo, it wasn't very hard, just a couple of boards,\nonce we had this powerful",
    "start": "3266000",
    "end": "3275000"
  },
  {
    "text": "convexity lemma.\nSo, we just used convexity.",
    "start": "3275000",
    "end": "3281000"
  },
  {
    "text": "We used the definition of E of\nX. We used convexity.\nThat lets us put the f's",
    "start": "3281000",
    "end": "3287000"
  },
  {
    "text": "inside.\nThen we do this regrouping of terms, and we figure out,\noh, that's just E of f of X.",
    "start": "3287000",
    "end": "3294000"
  },
  {
    "text": "So, the only inequality here is\ncoming from convexity. All right, now comes the\nalgorithms.",
    "start": "3294000",
    "end": "3301000"
  },
  {
    "text": "So, this was just some basic\nprobability stuff, which is good to practice.\nOK, we could see in the quiz,",
    "start": "3301000",
    "end": "3310000"
  },
  {
    "text": "which is not surprising.\nThis is the case for me, too.\nYou have a lot of intuition with algorithms.\nWhenever it's algorithmic,",
    "start": "3310000",
    "end": "3317000"
  },
  {
    "text": "it makes a lot of sense because\nyou're sort of grounded in some things that you know because you\nare computer scientists,",
    "start": "3317000",
    "end": "3324000"
  },
  {
    "text": "or something of that ilk.\nFor the purposes of this class, you are computer scientists.\nBut, with sort of the basic",
    "start": "3324000",
    "end": "3332000"
  },
  {
    "text": "probability, unless you happen\nto be a mathematician, it's less intuitive,\nand therefore harder to get",
    "start": "3332000",
    "end": "3340000"
  },
  {
    "text": "fast.\nAnd, in quiz one, speed is pretty important.\nOn the final, speed will also be important.\nThe take home certainly doesn't",
    "start": "3340000",
    "end": "3350000"
  },
  {
    "text": "hurt.\nSo, the take home is more interesting because it requires\nbeing clever.",
    "start": "3350000",
    "end": "3356000"
  },
  {
    "text": "You have to actually be\ncreative. And, that really tests\nalgorithmic design.",
    "start": "3356000",
    "end": "3363000"
  },
  {
    "text": "So far, we've mainly tested\nanalysis, and just, can you work through\nprobability?",
    "start": "3363000",
    "end": "3369000"
  },
  {
    "text": "Can you figure out what the,\ncan you remember what your running time of randomized\nquicksort is,",
    "start": "3369000",
    "end": "3375000"
  },
  {
    "text": "and so on?\nQuiz two will actually test creativity because you have more\ntime. It's hard to be creative in two\nhours.",
    "start": "3375000",
    "end": "3382000"
  },
  {
    "text": "OK, so we want to analyze the\nexpected height of a randomly constructed binary search tree.\nSo, I've defined this before,",
    "start": "3382000",
    "end": "3392000"
  },
  {
    "text": "but let me repeat it because it\nwas a while ago almost at the",
    "start": "3392000",
    "end": "3398000"
  },
  {
    "text": "beginning of lecture.\nI'm going to take the random variable of the height of a\nrandomly built binary search",
    "start": "3398000",
    "end": "3408000"
  },
  {
    "text": "tree on n nodes.\nSo, that was randomized, the n values.\nTake a random permutation,",
    "start": "3408000",
    "end": "3415000"
  },
  {
    "text": "insert them one by one from\nleft to right with tree insert.",
    "start": "3415000",
    "end": "3422000"
  },
  {
    "text": "What is the height of the tree\nthat you get? What is the maximum depth of\nany node?",
    "start": "3422000",
    "end": "3428000"
  },
  {
    "text": "I'm not going to look so much\nat X_n. I'm going to look at the\nexponentiation of X_n.",
    "start": "3428000",
    "end": "3434000"
  },
  {
    "text": "And, still we have no intuition\nwhy. But, two to the X is a convex\nfunction.",
    "start": "3434000",
    "end": "3440000"
  },
  {
    "text": "OK, it looks like that.\nIt's very sharp. That's the best I can do for\ndrawing, two to the X.",
    "start": "3440000",
    "end": "3447000"
  },
  {
    "text": "You saw how I drew my\nhistogram. So, we want to somehow write\nthis random variable as",
    "start": "3447000",
    "end": "3454000"
  },
  {
    "text": "something, OK,\nin some algebra. The main thing here is to split\ninto cases. That's how we usually go\nbecause there's lots of",
    "start": "3454000",
    "end": "3462000"
  },
  {
    "text": "different scenarios on what\nhappens. So, I mean, how do we construct\na tree from the beginning?",
    "start": "3462000",
    "end": "3468000"
  },
  {
    "text": "First thing we do is we take\nthe first node. We throw it in,\nmake it the root.",
    "start": "3468000",
    "end": "3474000"
  },
  {
    "text": "OK, so whatever the first value\nhappens to be in the array, which we don't really know how\nthat falls into sorted order,",
    "start": "3474000",
    "end": "3482000"
  },
  {
    "text": "we put it at the root.\nAnd, it stays the root. We never change the root from\nthen on.",
    "start": "3482000",
    "end": "3488000"
  },
  {
    "text": "Now, of all the remaining\nelements, some of them are less than this value,\nand they go over here.",
    "start": "3488000",
    "end": "3494000"
  },
  {
    "text": "So, let's call this r at the\nroot. And, some of them are greater\nthan r. So, they go over here.\nMaybe there's more over here.",
    "start": "3494000",
    "end": "3502000"
  },
  {
    "text": "Maybe there's more over here.\nWho knows? Arbitrary partition,\nin fact, uniformly random",
    "start": "3502000",
    "end": "3508000"
  },
  {
    "text": "partition, which should sound\nfamiliar, whether there are k elements over here,\nand n minus k minus one",
    "start": "3508000",
    "end": "3514000"
  },
  {
    "text": "elements over here,\nfor any value of k, that's equally likely because\nthis is chosen uniformly.",
    "start": "3514000",
    "end": "3522000"
  },
  {
    "text": "The root is chosen uniformly.\nIt's the first element in a random permutation.\nSo, what I'm going to do is parameterize by that.\nHow many elements are over",
    "start": "3522000",
    "end": "3529000"
  },
  {
    "text": "here, and how many elements are\nover here? Because this thing is,\nagain, a randomly built binary search tree on however many\nnodes are in there because after",
    "start": "3529000",
    "end": "3537000"
  },
  {
    "text": "I pick r, it's determined who is\nto the left and who is to the right.\nAnd so, I can just partition.",
    "start": "3537000",
    "end": "3543000"
  },
  {
    "text": "It's like running quicksort.\nI partition the elements left of r, the elements right of r,\nand I'm sort of recursively",
    "start": "3543000",
    "end": "3551000"
  },
  {
    "text": "constructing a randomly built\nbinary search tree on those two sub-permutations because\nsub-permutations of uniform",
    "start": "3551000",
    "end": "3558000"
  },
  {
    "text": "permutations are uniform.\nOK, so these are essentially recursive problems.\nAnd, we know how to analyze",
    "start": "3558000",
    "end": "3565000"
  },
  {
    "text": "recursive problems.\nAll we need to know is that there are k minus one elements\nover here, and n minus k",
    "start": "3565000",
    "end": "3571000"
  },
  {
    "text": "elements over here.\nAnd, that would mean that r has",
    "start": "3571000",
    "end": "3578000"
  },
  {
    "text": "rank k, remember,\nrank in the sense of the index",
    "start": "3578000",
    "end": "3585000"
  },
  {
    "text": "in assorted order.\nSo, where should I go?",
    "start": "3585000",
    "end": "3592000"
  },
  {
    "start": "3592000",
    "end": "3608000"
  },
  {
    "text": "So, if the root,\nr, has rank, k, so if this is a statement\nabout condition on this event,",
    "start": "3608000",
    "end": "3617317"
  },
  {
    "text": "which is a random event,\nthen what we have is X_n equals",
    "start": "3617318",
    "end": "3623278"
  },
  {
    "text": "one plus the max of X_(k minus\none), X_(n minus k) because the",
    "start": "3623278",
    "end": "3629888"
  },
  {
    "text": "height of this tree is the max\nof the heights of the two",
    "start": "3629888",
    "end": "3635848"
  },
  {
    "text": "subtrees plus one because we\nhave one more level up top.",
    "start": "3635848",
    "end": "3643000"
  },
  {
    "text": "OK, so that's the natural thing\nto do. What we are trying to analyze,\nthough, is Y_n.",
    "start": "3643000",
    "end": "3651263"
  },
  {
    "text": "So, for Y_n,\nwe have to take two to this power.\nSo, it's two times the max of",
    "start": "3651263",
    "end": "3658720"
  },
  {
    "text": "two to the X_(k minus one),\nwhich is Y_(k minus one),",
    "start": "3658720",
    "end": "3663961"
  },
  {
    "text": "and two to this,\nwhich is Y_(n minus k).",
    "start": "3663961",
    "end": "3669000"
  },
  {
    "text": "And, now you start to see,\nmaybe, why we are interested in Y's instead of X's in the sense\nthat it's what we know how to",
    "start": "3669000",
    "end": "3676260"
  },
  {
    "text": "do.\nWhen we solve a recursion, when we solve,\nlike, the expected running time, we haven't taken\nexpectations,",
    "start": "3676260",
    "end": "3682713"
  },
  {
    "text": "yet, here.\nBut, when we compute the expected running time of\nquicksort, we have something",
    "start": "3682713",
    "end": "3688050"
  },
  {
    "text": "like two times,\nI mean, we have a couple of recursive subproblems,\nwhich are being added together.",
    "start": "3688050",
    "end": "3695000"
  },
  {
    "text": "OK, here, we have a factor of\ntwo. Here, we have a max.\nBut, intuitively, we know how to multiply random\nvariables by a constant because",
    "start": "3695000",
    "end": "3703002"
  },
  {
    "text": "that's, like,\nthere's two recursive subproblems of the size is equal\nto the max of these two,",
    "start": "3703002",
    "end": "3708500"
  },
  {
    "text": "which we don't happen to know\nhere. But, there it is,\nwhereas one plus, we don't know how to handle so\nwell.",
    "start": "3708500",
    "end": "3714791"
  },
  {
    "text": "And, indeed,\nour techniques are really good at solving recurrences,\nexcept up to the constant",
    "start": "3714791",
    "end": "3720288"
  },
  {
    "text": "factors.\nAnd, this one plus really doesn't affect the constant\nfactor too much,",
    "start": "3720289",
    "end": "3725685"
  },
  {
    "text": "it would seem.\nOK, but it's a big deal. In exponentiation,\nit's a factor of two. So here, it's really hard to\nsee what this one plus is doing.",
    "start": "3725685",
    "end": "3733111"
  },
  {
    "text": "And, our analysis,\nif we tried it, and it's a good idea to try it\nat home and see what happens, if you tried to do what I'm\nabout to do with X_n,",
    "start": "3733112",
    "end": "3740700"
  },
  {
    "text": "the one plus will sort of get\nlost, and you won't get a bound. You just can't prove anything.\nWith a factor of two,",
    "start": "3740700",
    "end": "3746771"
  },
  {
    "text": "we're in good shape.\nWe sort of know how to deal with that.\nWe'll say more when we've",
    "start": "3746771",
    "end": "3753980"
  },
  {
    "text": "actually done the proof about\nwhy we use Y_n instead of X_n.",
    "start": "3753980",
    "end": "3761015"
  },
  {
    "text": "But for now,\nwe're using Y_n. So, this is sort of a\nrecursion, except it's",
    "start": "3761015",
    "end": "3769480"
  },
  {
    "text": "conditioned on this event.\nSo, how do I turn this into a",
    "start": "3769480",
    "end": "3776038"
  },
  {
    "text": "statement that holds all the\ntime? Sorry?\nDivide by the probability of",
    "start": "3776038",
    "end": "3784896"
  },
  {
    "text": "the event?\nMore or less. Indeed, these events are\nindependent.",
    "start": "3784896",
    "end": "3791000"
  },
  {
    "text": "Or, they're all equally likely,\nI should say. They're not independent.\nIn fact, one determines all the",
    "start": "3791000",
    "end": "3801241"
  },
  {
    "text": "others.\nSo, how do I generally represent an event in algebra?\nIndicator random variables:",
    "start": "3801241",
    "end": "3810137"
  },
  {
    "text": "good.\nRemember your friends, indicator random variables.\nAll of these analyses use",
    "start": "3810137",
    "end": "3822076"
  },
  {
    "text": "indicator random variables.\nSo, they will just represent",
    "start": "3822076",
    "end": "3829565"
  },
  {
    "text": "this event, and we'll call it\nZ_nk. It's going to be one if the\nroot has rank,",
    "start": "3829565",
    "end": "3839778"
  },
  {
    "text": "k, and zero otherwise.\nSo, in particular,",
    "start": "3839778",
    "end": "3845415"
  },
  {
    "text": "the probability of,\nthese things are all equally likely for, a particular value\nof n if you try all the values",
    "start": "3845415",
    "end": "3853828"
  },
  {
    "text": "of k.\nThe probability that this equals one, which is also the\nexpectation of that indicator",
    "start": "3853828",
    "end": "3860746"
  },
  {
    "text": "random variable,\nwhich you should know, is it only takes values one or\nzero.",
    "start": "3860746",
    "end": "3866485"
  },
  {
    "text": "The zero doesn't matter in the\nexpectation. So, this is going to be,\nhopefully, one over n if I got\n915\n01:04:34,034 --> 00:00:00,000\nright.",
    "start": "3866486",
    "end": "3874034"
  },
  {
    "text": "So, there are n possibility of\nwhat the rank of the root could",
    "start": "3876000",
    "end": "3883013"
  },
  {
    "text": "be.\nEach of them are equally likely because we have a uniform\npermutation.",
    "start": "3883013",
    "end": "3891176"
  },
  {
    "text": "So, now, I can rewrite this\ncondition statement as a",
    "start": "3891176",
    "end": "3897040"
  },
  {
    "text": "summation where the Z_nk's will\nlet me choose what case I'm in.",
    "start": "3897040",
    "end": "3904168"
  },
  {
    "text": "So, we have Y_n is the sum,\nk equals one to n of Z_nk times",
    "start": "3904168",
    "end": "3910836"
  },
  {
    "text": "two times the max of X,\nsorry, Y, k minus one,",
    "start": "3910836",
    "end": "3916010"
  },
  {
    "text": "Y_n minus k.\nSo, now we have our good friend, the recurrence.\nWe need to solve it.",
    "start": "3916010",
    "end": "3923126"
  },
  {
    "text": "OK, we can't really solve it\nbecause this is a random variable, and it's talking about\nrecursive random variables.",
    "start": "3923126",
    "end": "3929963"
  },
  {
    "text": "So, we first take the\nexpectation of both sides. That's the only thing we can\nreally bound.",
    "start": "3929963",
    "end": "3936000"
  },
  {
    "text": "Y_n could be n^2 in an unlucky\ncase, sorry, not n^2. It could be n^2.\nIt could be two to the,",
    "start": "3936000",
    "end": "3943190"
  },
  {
    "text": "boy, two to the n if you are\nunlucky because X_n could be as big as n, the height of the\ntree.",
    "start": "3943190",
    "end": "3950460"
  },
  {
    "text": "And, Y_n is two to that.\nSo, it could be two to the n. What we want to prove is that\nit's polynomial in n.",
    "start": "3950460",
    "end": "3958688"
  },
  {
    "text": "If it's n to some constant,\nand we take logs, it'll be order log n.\nOK, so we'll take the",
    "start": "3958688",
    "end": "3967340"
  },
  {
    "text": "expectation, and hopefully that\nwill guarantee that this holds.",
    "start": "3967341",
    "end": "3974254"
  },
  {
    "text": "OK, so we have expectation of\nthis summation of random",
    "start": "3974254",
    "end": "3980162"
  },
  {
    "text": "variables times recursive random\nvariables. So, what is the first,\nwoops, I forgot a bracket.",
    "start": "3980163",
    "end": "3990198"
  },
  {
    "text": "What is the first thing that we\ndo in this analysis?",
    "start": "3990198",
    "end": "3997000"
  },
  {
    "text": "This should,\nyeah, linearity of expectation. That one's easy to remember.\nOK, we have a sum.",
    "start": "3997000",
    "end": "4005900"
  },
  {
    "text": "So, let's put the E inside. ",
    "start": "4005900",
    "end": "4024000"
  },
  {
    "text": "OK, now we have the expectation\nof our product. What should we use?\nIndependence.",
    "start": "4024000",
    "end": "4032210"
  },
  {
    "text": "Hopefully, things are\nindependent. And then, we could write this.\nThen, it would be the",
    "start": "4032210",
    "end": "4041052"
  },
  {
    "text": "expectation of the product.\nAnd, heck, let's put the two",
    "start": "4041052",
    "end": "4046842"
  },
  {
    "text": "outside, because it's not,\nno sense in keeping it in here.",
    "start": "4046842",
    "end": "4054000"
  },
  {
    "text": "Y is there starting to look\nlike X's? I can't even read them.\nSorry about that.",
    "start": "4054000",
    "end": "4062351"
  },
  {
    "text": "This should all be Y's.\nOK, very wise, random variables.\nSo.",
    "start": "4062351",
    "end": "4068615"
  },
  {
    "text": "Why are these independent?\nSo, here we are looking at the",
    "start": "4068615",
    "end": "4074769"
  },
  {
    "text": "choice of what the root is,\nwhat rank the root has in a",
    "start": "4074769",
    "end": "4080703"
  },
  {
    "text": "problem of size n.\nIn here, we're looking at what the root, I mean,\nthere are various choices of",
    "start": "4080703",
    "end": "4088020"
  },
  {
    "text": "what the search tree looks like\nin the stuff left of the root, and in the stuff right of the\nroot.",
    "start": "4088020",
    "end": "4093112"
  },
  {
    "text": "Those are independent choices\nbecause everything is uniform here.\nSo, the choice of this guy was uniform.\nAnd then, that determines who",
    "start": "4093112",
    "end": "4100081"
  },
  {
    "text": "partitions in the left and the\nright. Those are completely\nindependent recursive choices of who's the root in the left\nsubtree?",
    "start": "4100081",
    "end": "4106621"
  },
  {
    "text": "Who's the root in the left of\nthe left subtree, and so on?\nSo, this is a little trickier than usual.\nBefore, it was random choices",
    "start": "4106621",
    "end": "4116384"
  },
  {
    "text": "in the algorithm.\nNow, it's in some construction",
    "start": "4116385",
    "end": "4121870"
  },
  {
    "text": "where we choose the random\nnumbers ahead of time.",
    "start": "4121871",
    "end": "4127474"
  },
  {
    "text": "It's a bit funny,\nbut this is still independent.",
    "start": "4127474",
    "end": "4132961"
  },
  {
    "text": "So, we get this just like we\ndid in quicksort,",
    "start": "4132961",
    "end": "4138213"
  },
  {
    "text": "and so on.\nOK. Now, we continue.\nAnd, now it's time to be a bit",
    "start": "4138214",
    "end": "4145374"
  },
  {
    "text": "sloppy.\nWell, one of these things we know.\nOK, E of ZNK, that, we wrote over here.\nIt's one over n.",
    "start": "4145374",
    "end": "4152812"
  },
  {
    "text": "So, that's cool.\nSo, we get a two over n outside, and we get this sum of\nthe expectation of a max of",
    "start": "4152812",
    "end": "4160487"
  },
  {
    "text": "these two things.\nNormally, we would write, well, I think sometimes you\nwrite T of max,",
    "start": "4160488",
    "end": "4167136"
  },
  {
    "text": "or Y of the max of the two\nthings here. You've got to write it as the\nmax of these two variables.",
    "start": "4167136",
    "end": "4176000"
  },
  {
    "text": "And, the trick,\nI mean, it's not too much of a",
    "start": "4176000",
    "end": "4181547"
  },
  {
    "text": "trick, is that the max is,\nat most, the sum.",
    "start": "4181547",
    "end": "4186848"
  },
  {
    "text": "So, we have nonnegative things.\nSo, we have two over n,",
    "start": "4186849",
    "end": "4193505"
  },
  {
    "text": "sum k equals one to n of the\nexpectation of the sum instead",
    "start": "4193506",
    "end": "4200656"
  },
  {
    "text": "of the max.\nOK, this is, in some sense,\nthe key step where we are",
    "start": "4200657",
    "end": "4207013"
  },
  {
    "text": "losing something in our bound.\nSo far, we've been exact. Now, we're being pretty sloppy.\nIt's true the max is,",
    "start": "4207014",
    "end": "4215437"
  },
  {
    "text": "at most, the sum.\nBut, it's a pretty loose upper bound as things go.\nWe'll keep that in mind for",
    "start": "4215437",
    "end": "4222758"
  },
  {
    "text": "later.\nWhat else can we do with the summation?\nThis should, again, look familiar.\nNow that we have a sum of a sum",
    "start": "4222758",
    "end": "4233470"
  },
  {
    "text": "of two things,\nI'm trying to like it to be a sum of one thing.\nSorry?",
    "start": "4233470",
    "end": "4240858"
  },
  {
    "text": "You can use linearity of\nexpectation, good. So, that's the first thing I\nshould do.",
    "start": "4240858",
    "end": "4249813"
  },
  {
    "text": "So, linearity of expectation\nlets me separate that.",
    "start": "4249813",
    "end": "4255410"
  },
  {
    "text": "Now I have a sum of 2n things.\nRight, I could break that into",
    "start": "4255410",
    "end": "4262079"
  },
  {
    "text": "the sum of these guys,\nand the sum of these guys. Do you know anything about\nthose two sums?",
    "start": "4262079",
    "end": "4268246"
  },
  {
    "text": "Do we know anything about those\ntwo sums? They're the same.\nIn fact, every term here is",
    "start": "4268247",
    "end": "4274068"
  },
  {
    "text": "appearing exactly twice.\nOne says a k minus one. One says an n minus k,\nand that even works if it's",
    "start": "4274068",
    "end": "4280722"
  },
  {
    "text": "odd, I think.\nSo, in fact, we can just take one of the\nsums and multiply it by two.",
    "start": "4280722",
    "end": "4286267"
  },
  {
    "text": "So, this is four over n times\nthe sum, and I'll rewrite it a little bit from zero to n minus\none of E of Y_k.",
    "start": "4286267",
    "end": "4295000"
  },
  {
    "text": "Just check the number of times\neach Y_k appears from zero up to",
    "start": "4295000",
    "end": "4300425"
  },
  {
    "text": "n minus one is exactly two.\nSo, now I have a recurrence. I have E of Y_n is,\nat most, this thing.",
    "start": "4300425",
    "end": "4308649"
  },
  {
    "text": "Let's just write that for our\nmemory. So, how's that?\nCool. Now, I just have to solve the\nrecurrence.",
    "start": "4308649",
    "end": "4317050"
  },
  {
    "text": "How should I solve an ugly,\nhairy, recurrence like this?",
    "start": "4317050",
    "end": "4323000"
  },
  {
    "text": "Substitution:\nyea! Not the master method.\nOK, it's a pretty nasty",
    "start": "4323000",
    "end": "4330750"
  },
  {
    "text": "recurrence.\nSo, I'm going to make a guess,",
    "start": "4330750",
    "end": "4335875"
  },
  {
    "text": "and I've already told you the\nguess, that it's n^3.",
    "start": "4335875",
    "end": "4342125"
  },
  {
    "text": "I think n^3 is pretty much\nexactly where this proof will be",
    "start": "4342125",
    "end": "4349375"
  },
  {
    "text": "obtainable.\nSo, substitution method, substitution method is just a\nproof by induction.",
    "start": "4349375",
    "end": "4358719"
  },
  {
    "text": "And, there are two things every\nproof by induction should have,",
    "start": "4358720",
    "end": "4364506"
  },
  {
    "text": "well, almost every proof by\ninduction, unless you're being",
    "start": "4364506",
    "end": "4369825"
  },
  {
    "text": "fancy.\nIt should have a base case, and the base case here is n\nequals order one.",
    "start": "4369826",
    "end": "4377012"
  },
  {
    "text": "I didn't write it,\nbut, of course, if you have a constant size\ntree, it has constant height.",
    "start": "4377013",
    "end": "4385318"
  },
  {
    "text": "So, this thing will be true as\nlong as we set true if c is",
    "start": "4385318",
    "end": "4390639"
  },
  {
    "text": "sufficiently large.\nOK, so, don't forget that.",
    "start": "4390640",
    "end": "4395684"
  },
  {
    "text": "A lot of people forgot it on\nthe quiz. We even mentioned the base\ncase. Usually, we don't even mention\nthe base case.",
    "start": "4395684",
    "end": "4402939"
  },
  {
    "text": "And, you should assume that\nthere's one there. And, you have to say this in\nany proof by substitution.",
    "start": "4402939",
    "end": "4410000"
  },
  {
    "text": "OK, now, we have the induction\nstep. So, I claim that E of Y_n is,\nat most, Ccof n^3,",
    "start": "4410000",
    "end": "4417279"
  },
  {
    "text": "assuming that it's true for\nsmaller n. You should write the induction\nhypothesis here,",
    "start": "4417279",
    "end": "4424647"
  },
  {
    "text": "but I'm going to skip it\nbecause I'm running out of time. Now, we have this recurrence\nthat E of Y_n is,",
    "start": "4424647",
    "end": "4433613"
  },
  {
    "text": "at most, this thing.\nSo, E of Y_n is, at most, four over n,\nsum k equals zero to n minus",
    "start": "4433613",
    "end": "4441159"
  },
  {
    "text": "one of E of Y_k.\nNow, notice that k is always",
    "start": "4441159",
    "end": "4447223"
  },
  {
    "text": "smaller than n.\nSo, we can apply induction. So, this is,\nat most, four over n,",
    "start": "4447223",
    "end": "4455858"
  },
  {
    "text": "sum k equals zero to n minus\none of c times k^3.",
    "start": "4455858",
    "end": "4461269"
  },
  {
    "text": "That's the induction\nhypothesis. Cool.\nNow, I need an upper bound on",
    "start": "4461269",
    "end": "4468753"
  },
  {
    "text": "this sum, if you have a good\nmemory, then you know a closed",
    "start": "4468753",
    "end": "4475429"
  },
  {
    "text": "form for this sum.\nBut, I don't have such a good",
    "start": "4475430",
    "end": "4480801"
  },
  {
    "text": "memory as I used to.\nI never memorized this sum when I was a kid, so I don't remember\neverything when I memorize when",
    "start": "4480801",
    "end": "4487884"
  },
  {
    "text": "I was less than 12 years old.\nI still remember all the digits of pi, whatever.\nBut, anything I try to memorize",
    "start": "4487884",
    "end": "4494531"
  },
  {
    "text": "now just doesn't quite stick the\nsame way. So, I don't happen to know this\nsum.",
    "start": "4494532",
    "end": "4500000"
  },
  {
    "text": "What's a good way to\napproximate this sum? Integral: good.\nSo, in fact,",
    "start": "4500000",
    "end": "4505256"
  },
  {
    "text": "I'm going to take the c\noutside. So, this is 4c over n.\nThe sum is, at most,",
    "start": "4505256",
    "end": "4510900"
  },
  {
    "text": "the integral.\nIf you get the range right, so, you have to go one larger.\nInstead of n minus one,",
    "start": "4510900",
    "end": "4518089"
  },
  {
    "text": "you go up to n.\nThis is in the textbook. It's intuitive,\ntoo, as long as you have a",
    "start": "4518089",
    "end": "4524274"
  },
  {
    "text": "monotone function.\nThat's key. So, you have something that's\nlike this.",
    "start": "4524274",
    "end": "4531000"
  },
  {
    "text": "And, you know,\nthe sum is taking each of these and weighting them with a value\nof one.",
    "start": "4531000",
    "end": "4536671"
  },
  {
    "text": "The integral is computing the\narea under this curve. So, in particular,\nif you look at this",
    "start": "4536671",
    "end": "4542684"
  },
  {
    "text": "approximation of the integral,\nthen, I mean, this thing is certainly,\nthis would be the sum if you go",
    "start": "4542684",
    "end": "4549382"
  },
  {
    "text": "one larger at the end,\nand that's, at most, the integral.\nSo, that's proof by picture.",
    "start": "4549382",
    "end": "4555053"
  },
  {
    "text": "But, you can see this in the\nbook. You should know it from 042 I\nguess.",
    "start": "4555054",
    "end": "4561000"
  },
  {
    "text": "Now, integrals,\nhopefully, you can solve. Integral of x^3 is x^4 over\nfour.",
    "start": "4561000",
    "end": "4567206"
  },
  {
    "text": "I got it right.\nAnd then, we're valuing that at n.\nAnd, it's zero.",
    "start": "4567206",
    "end": "4572636"
  },
  {
    "text": "Subtracting the zero doesn't\nmatter because zero to the fourth power is zero.\nSo, it's just n^4 over four.",
    "start": "4572637",
    "end": "4581517"
  },
  {
    "text": "So, this is 4c over n times n^4\nover four. And, conveniently,\nthis four cancels with this",
    "start": "4581517",
    "end": "4588930"
  },
  {
    "text": "four.\nThe four turns into a three because of this,\nand we get n^3.",
    "start": "4588931",
    "end": "4596000"
  },
  {
    "text": "We get cn^3.\nDamn convenient, because that's what we wanted\nto prove.",
    "start": "4596000",
    "end": "4601089"
  },
  {
    "text": "OK, so this proof is just\nbarely snaking by: no residual term.\nWe've been sloppy all over the",
    "start": "4601089",
    "end": "4608028"
  },
  {
    "text": "place, and yet we were really\nlucky. And, we were just sloppy in the\nright places.",
    "start": "4608028",
    "end": "4614120"
  },
  {
    "text": "So, this is a very tricky\nproof. If you just tried to do it by\nhand, it's pretty easy to be too",
    "start": "4614120",
    "end": "4621214"
  },
  {
    "text": "sloppy, and not get quite the\nright answer. But, this just barely works.\nSo, let me say a couple of",
    "start": "4621214",
    "end": "4629869"
  },
  {
    "text": "things about it in my remaining\none minute. So, we can do the conclusion,\nagain.",
    "start": "4629869",
    "end": "4635407"
  },
  {
    "text": "I won't write it because I\ndon't have time, but here it is.\nWe just proved a bound on Y_n,",
    "start": "4635407",
    "end": "4641664"
  },
  {
    "text": "which was two to the power X_n.\nWhat we cared about was X_n. So, we used Jensen's\ninequality.",
    "start": "4641664",
    "end": "4649000"
  },
  {
    "text": "We get the two to the E of X_n\nis, at most, E of two to the X_n.\nThis is what we know about",
    "start": "4649000",
    "end": "4654083"
  },
  {
    "text": "because that's Y_n.\nSo, we know E of Y_n is now order n^3.\nOK, we had to set this constant",
    "start": "4654083",
    "end": "4659108"
  },
  {
    "text": "sufficiently large for the base\ncase. We didn't really figure out\nwhat the constant was here.",
    "start": "4659108",
    "end": "4664306"
  },
  {
    "text": "It didn't matter because now\nwe're taking the logs of both sides.\nWe get E of X_n is, at most, log of order n^3.\nThis constant is a",
    "start": "4664306",
    "end": "4671584"
  },
  {
    "text": "multiplicative constant.\nSo, you take the logs. It becomes additive.\nThis constant is an exponent.",
    "start": "4671584",
    "end": "4677072"
  },
  {
    "text": "So, it would take logs.\nIt becomes a multiple. Three log n plus order one.\nThis is a pretty damn tight",
    "start": "4677072",
    "end": "4687361"
  },
  {
    "text": "bound on the height of a\nrandomly built binary search",
    "start": "4687361",
    "end": "4693486"
  },
  {
    "text": "tree, the expected height,\nI should say. In fact, the expected height of\nX_n is equal to,",
    "start": "4693486",
    "end": "4703617"
  },
  {
    "text": "well, roughly,\nI'll just say it's roughly, I don't want to be too precise\nhere, 2.9882 times log n.",
    "start": "4703617",
    "end": "4714925"
  },
  {
    "text": "This is the result by a friend\nof mine, Luke Devroy,",
    "start": "4714925",
    "end": "4720933"
  },
  {
    "text": "if I spell it right,\nin 1986.",
    "start": "4720934",
    "end": "4726000"
  },
  {
    "text": "He's a professor at McGill\nUniversity in Montreal. So, we're pretty close,\nthree to 2.98.",
    "start": "4726000",
    "end": "4732270"
  },
  {
    "text": "And, I won't prove this here.\nThe hard part here is actually the lower bound,\nbut it's only that much.",
    "start": "4732270",
    "end": "4740000"
  },
  {
    "text": "I should say a little bit more\nabout why we use Y_n instead of X_n.\nAnd, it's all about the",
    "start": "4740000",
    "end": "4746166"
  },
  {
    "text": "sloppiness.\nAnd, in particular, this step, where we said that\nthe max of these two random",
    "start": "4746166",
    "end": "4752193"
  },
  {
    "text": "variables is,\nat most, the sum. And, while that's true for X\njust as well as it is true for",
    "start": "4752193",
    "end": "4758359"
  },
  {
    "text": "Y, it's more true for Y.\nOK, this is a bit weird because, remember,\nwhat we're analyzing here is",
    "start": "4758359",
    "end": "4764876"
  },
  {
    "text": "all possible values of k.\nThis has to work no matter what k is, in some sense.\nI mean, we're bounding all of",
    "start": "4764876",
    "end": "4772234"
  },
  {
    "text": "those cases simultaneously,\nthe sum of them all. So, here we're looking at k\nminus one versus n minus k.",
    "start": "4772234",
    "end": "4781576"
  },
  {
    "text": "And, in fact,\nhere, there's a polynomial version.\nBut, so, if you take two values",
    "start": "4781576",
    "end": "4788186"
  },
  {
    "text": "a and b, and you say,\nwell, max of ab is, at most, a plus b.\nAnd, on the other hand you say,",
    "start": "4788186",
    "end": "4795728"
  },
  {
    "text": "well, max of two to the a and\ntwo to the b is, at most, two to the a plus two\nto the b.",
    "start": "4795728",
    "end": "4802847"
  },
  {
    "text": "Doesn't this feel better than\nthat? Well, they are,\nof course, the same.",
    "start": "4802847",
    "end": "4809820"
  },
  {
    "text": "But, if you look at a minus b,\nas that grows, this becomes a tighter bound\nfaster than this becomes a",
    "start": "4809820",
    "end": "4817719"
  },
  {
    "text": "tighter bound because here we're\nlooking at absolute difference between a minus b.\nSo, that's why this is pretty",
    "start": "4817719",
    "end": "4826504"
  },
  {
    "text": "good and this is pretty bad.\nWe're still really bad if a and b are almost the same.\nBut, we're trying to solve this",
    "start": "4826504",
    "end": "4835812"
  },
  {
    "text": "for all partitions into k minus\none and n minus k. So, it's OK if we get a few of\nthe cases wrong in the middle",
    "start": "4835812",
    "end": "4842127"
  },
  {
    "text": "where it evenly partitions.\nBut, as soon as we get some skew, this will be very close to\nthis, whereas this will be still",
    "start": "4842127",
    "end": "4849026"
  },
  {
    "text": "pretty far from this.\nYou have to get pretty close to the edge before you're not\nlosing much here,",
    "start": "4849026",
    "end": "4854580"
  },
  {
    "text": "whereas pretty quickly you're\nnot losing much here. That's the intuition.\nTry it, and see what happens",
    "start": "4854580",
    "end": "4860367"
  },
  {
    "text": "with X_n, and it won't work.\nSee you Wednesday.",
    "start": "4860368",
    "end": "4863000"
  }
]