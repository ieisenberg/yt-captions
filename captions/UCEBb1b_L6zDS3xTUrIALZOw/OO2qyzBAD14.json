[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "12930"
  },
  {
    "text": "YAEL KALAI: So last\nweek was crypto day, so I didn't get to see you. So let's do a quick kind\nof recap of where we were",
    "start": "12930",
    "end": "21210"
  },
  {
    "text": "and where we're heading to. So last time I saw you,\nat least in this room,",
    "start": "21210",
    "end": "27029"
  },
  {
    "text": "was two weeks ago,\nwhere we talked about how to use the GKR\nprotocol to construct",
    "start": "27030",
    "end": "34860"
  },
  {
    "text": "what's called a PCP, a\nProbabilistically Checkable Proof. And what's a probabilistically\ncheckable proof?",
    "start": "34860",
    "end": "39890"
  },
  {
    "text": "The idea is, take a proof-- so\ntake any NP language, let's say, that has a proof, like,\nlet's say, 3-SAT--",
    "start": "39890",
    "end": "46960"
  },
  {
    "text": "you take a witness or a proof,\nso a satisfying assignment, and you actually make it longer.",
    "start": "46960",
    "end": "52950"
  },
  {
    "text": "OK, so you don't shrink it. You actually extend it. It's bigger. But now, to verify it, you don't\nneed to read the entire proof.",
    "start": "52950",
    "end": "64259"
  },
  {
    "text": "What you need to do is just read\na few locations in this proof so you can-- even though the\nproof actually became longer,",
    "start": "64260",
    "end": "70060"
  },
  {
    "text": "you can verify it\nmuch more efficiently by reading just a few locations. And we actually showed\nhow to construct it,",
    "start": "70060",
    "end": "76539"
  },
  {
    "text": "How do you get a PCP? And the idea of how to get\na PCP, the idea was, well,",
    "start": "76540",
    "end": "82030"
  },
  {
    "text": "let's look at the GKR\nprotocol for 3-SAT-- so let's do a PCP for NP. OK.",
    "start": "82030",
    "end": "87285"
  },
  {
    "text": "So any NP, you can\nconvert it to a 3-SAT. You know 3-SAT is NP complete,\nso convert whatever you want",
    "start": "87285",
    "end": "92790"
  },
  {
    "text": "to prove into a 3-SAT formula. Now you have a witness. Now what do you do? You want to generate a PCP.",
    "start": "92790",
    "end": "99750"
  },
  {
    "text": "What you do is\nyou pretend you're a GKR prover that has this\nwitness, the satisfying",
    "start": "99750",
    "end": "106890"
  },
  {
    "text": "assignment, and want to\nconvince the verifier that this is a valid witness.",
    "start": "106890",
    "end": "112750"
  },
  {
    "text": "So what do I mean by\nrun the GKR protocol? What I mean is-- let's look at this.",
    "start": "112750",
    "end": "118240"
  },
  {
    "text": "So given phi, let's say, a\n3-SAT instance, what you do,",
    "start": "118240",
    "end": "123610"
  },
  {
    "text": "you look at the\ncircuit C sub phi, that takes as input a satisfying\nassignment, an assignment,",
    "start": "123610",
    "end": "130300"
  },
  {
    "text": "and outputs 0 or 1 whether\nit's satisfying or not. This is a very\nlow-depth circuit.",
    "start": "130300",
    "end": "136190"
  },
  {
    "text": "It's just as kind\nof a bunch of checks and adds the local checks,\nand adds them all together.",
    "start": "136190",
    "end": "141760"
  },
  {
    "text": "And now what we do is-- how do you generate the\nPCP given this witness,",
    "start": "141760",
    "end": "147770"
  },
  {
    "text": "given this witness for phi? What you do is you\nrun in your head",
    "start": "147770",
    "end": "154900"
  },
  {
    "text": "the GKR protocol\nfor the circuit. So remember, the GKR protocol\nis a protocol that proves that",
    "start": "154900",
    "end": "160150"
  },
  {
    "text": "a low-depth circuit-- that an input is-- that a given input--",
    "start": "160150",
    "end": "166129"
  },
  {
    "text": "even though it's weird, the\nverifier doesn't know the input, so it's kind of weird to\nthink of GKR in this context.",
    "start": "166130",
    "end": "172310"
  },
  {
    "text": "GKR, the context of GKR\nwas there's an input, everybody knows the input,\nthe prover and the verifier,",
    "start": "172310",
    "end": "178280"
  },
  {
    "text": "but the circuit is\nlarge and the prover wants to convince the verifier\nthat the output is something.",
    "start": "178280",
    "end": "185879"
  },
  {
    "text": "Here, it's kind of weird. The input is more or less\nas large as the circuit, OK,",
    "start": "185880",
    "end": "190910"
  },
  {
    "text": "because checking if a witness\nis satisfying the assignment is valid for a 3-CNF.",
    "start": "190910",
    "end": "196799"
  },
  {
    "text": "The 3-CNF is-- the circuit\nhere is almost the same size as the witness. And so it seems like using\nGKR here is very weird.",
    "start": "196800",
    "end": "205900"
  },
  {
    "text": "It doesn't seem like\nthe right application. And in particular, the verifier\ndoesn't even have the input,",
    "start": "205900",
    "end": "211750"
  },
  {
    "text": "so how can you use GKR? That seems very\ncounterintuitive.",
    "start": "211750",
    "end": "217379"
  },
  {
    "text": "So the idea is, no, let's\npretend that he does have the witness. And what do you mean, pretend?",
    "start": "217380",
    "end": "222470"
  },
  {
    "text": "Oh, don't worry,\nwe'll give it to him. So in the PCP, we'll\nwrite the witness. Not only we'll\nwrite the witness,",
    "start": "222470",
    "end": "229090"
  },
  {
    "text": "we're going to actually write\nthe low-degree extension of the witness in the PCP. OK, so what is your big proof?",
    "start": "229090",
    "end": "234560"
  },
  {
    "text": "It first contains the\nlow-degree extension of the witness sitting there. Then, now think of\nthe GKR protocol.",
    "start": "234560",
    "end": "243300"
  },
  {
    "text": "For each and every kind of\nquestion of the verifier, the prover has an answer.",
    "start": "243300",
    "end": "249090"
  },
  {
    "text": "Write it down in the PCP. So in the PCP, write, if the\nfirst message of the verifier--",
    "start": "249090",
    "end": "254560"
  },
  {
    "text": "you know, the first message\nis a bunch of-- well, first, the approval\ngoes first, so you send your univariate polynomial.",
    "start": "254560",
    "end": "260889"
  },
  {
    "text": "Then the verifier\nsends a field element. Now we say, well, if the field\nelement was 1, here's my answer.",
    "start": "260890",
    "end": "266170"
  },
  {
    "text": "If the field element\nwas 2, here's my answer. For each and every\npossible field element, you say the answer. OK.",
    "start": "266170",
    "end": "271235"
  },
  {
    "text": "Now, if there's only polylog\nnumber of field elements, it's not so bad. OK. Then you give them the answer.",
    "start": "271235",
    "end": "276819"
  },
  {
    "text": "Now the prover sends\nanother field element. Now you say, for any\npossible next message,",
    "start": "276820",
    "end": "284470"
  },
  {
    "text": "here's my answer, and so on. So, essentially, you\nkind of open up this GKR. It's a gigantic tree.",
    "start": "284470",
    "end": "290460"
  },
  {
    "text": "Now, first, you say,\nwait, this is huge. Like, it's exponential. But actually, GKR has\na very nice property",
    "start": "290460",
    "end": "297419"
  },
  {
    "text": "that the prover's\nmessages actually only depend on the last very\nfew messages of the verifier.",
    "start": "297420",
    "end": "309350"
  },
  {
    "text": "So if you remember the GKR, it's\na bunch of sum-checks protocol. It's, like, just a\nsequence of sum checks,",
    "start": "309350",
    "end": "316030"
  },
  {
    "text": "and the prover's\nmessage depends only on the messages in\nthe last sum check.",
    "start": "316030",
    "end": "321509"
  },
  {
    "text": "So it's kind of very\nfew, and kind of where you start with,\nit's very few messages.",
    "start": "321510",
    "end": "326590"
  },
  {
    "text": "So to be a little\nmore precise, in GKR, each prover message depends\non the last kind of--",
    "start": "326590",
    "end": "342350"
  },
  {
    "text": "what it is, it was \"log n over\nlog log n\" messages from V,",
    "start": "342350",
    "end": "351620"
  },
  {
    "text": "from the verifier. ",
    "start": "351620",
    "end": "356948"
  },
  {
    "text": "Well, this is like the\nnumber of variables. If you remember,\nwhen we did GKR, it was a bunch of sum checks,\nand each sum check was over m",
    "start": "356948",
    "end": "364610"
  },
  {
    "text": "or 3m variables. This is the m. And the field is polylog n.",
    "start": "364610",
    "end": "373320"
  },
  {
    "text": "And here is the\nsize of the circuit. So think of it as, the\nsize of the witness, the size of the 3-CNF, it's\nall up to polynomial factors.",
    "start": "373320",
    "end": "380710"
  },
  {
    "text": "It doesn't matter. And so now, OK,\nyou need to depend",
    "start": "380710",
    "end": "386599"
  },
  {
    "text": "on all these messages\nfrom the verifier, but there's only\nthat many each time.",
    "start": "386600",
    "end": "391820"
  },
  {
    "text": "And if you look, this to the\npower of this is only poly. That's exactly how we chose\nH and n so it would be poly.",
    "start": "391820",
    "end": "397780"
  },
  {
    "text": "That's why we chose this weird\nsetting of parameters and not just 2n and log n.",
    "start": "397780",
    "end": "402930"
  },
  {
    "text": "But the point is,\nbecause GKR has this kind of memoryless\nproperty of the prover,",
    "start": "402930",
    "end": "410070"
  },
  {
    "text": "you can expand all the GKR into\na big proof of size poly n. Now what does the verifier do?",
    "start": "410070",
    "end": "416570"
  },
  {
    "text": "The verifier simply-- so\nthat's what the PCP is. The PCP, you write for\nevery possible kind of--",
    "start": "416570",
    "end": "425266"
  },
  {
    "text": "you write all the possible\nanswers of the provers and the low-degree\nextension of your witness.",
    "start": "425266",
    "end": "431230"
  },
  {
    "text": "That's what the PCP is. How do you verify this PCP? Well, you pretend you're\na GKR proof verifier.",
    "start": "431230",
    "end": "437900"
  },
  {
    "text": "You say, OK, let me see your\nfirst question, thank you. Now you're saying, I'm going to\nchoose a random field element. And I'm going to look at\nthe answer corresponding",
    "start": "437900",
    "end": "444090"
  },
  {
    "text": "to this field\nelement, and then I'm going to choose my next\nrandom field element. And you just go through\nthis kind of tree",
    "start": "444090",
    "end": "452620"
  },
  {
    "text": "randomly and make sure-- and\nat the end, you need to verify. If you remember, in GKR, at\nthe end, you need to verify.",
    "start": "452620",
    "end": "460010"
  },
  {
    "text": "To verify, you need to check\nyour input and a random point in the low-degree extension. This is how GKR works.",
    "start": "460010",
    "end": "465560"
  },
  {
    "text": "Well, you have the low-degree\nextension sitting there",
    "start": "465560",
    "end": "471250"
  },
  {
    "text": "as part of your PCP,\nso you check that. OK, that's basically it, except\nthere's one component that we're",
    "start": "471250",
    "end": "479150"
  },
  {
    "text": "missing. And that's going to appear in\nyour pset, which, by the way, is going to be out this weekend.",
    "start": "479150",
    "end": "485026"
  },
  {
    "text": "OK, so this weekend, the\npset is going to be out. Originally, the due date\nwas after Thanksgiving.",
    "start": "485026",
    "end": "491332"
  },
  {
    "text": "I'll move it to before,\njust to give you an incentive to not take\nit with you on your break. If anybody needs an\nextension, just let me know.",
    "start": "491333",
    "end": "497680"
  },
  {
    "text": "OK. So you'll have almost a month? No, not quite, but close. OK. But if you need an\nextension, just let me know.",
    "start": "497680",
    "end": "504510"
  },
  {
    "text": "This is very arbitrary. OK. OK.",
    "start": "504510",
    "end": "509780"
  },
  {
    "text": "So what's the problem? The problem is,\nso if indeed the--",
    "start": "509780",
    "end": "518809"
  },
  {
    "text": "so what about soundness? OK. Soundness seems like it\nshould follow from just GKR. OK. You're interacting with\na prover, a GKR prover,",
    "start": "518809",
    "end": "526460"
  },
  {
    "text": "and some should just\nfollow from the GKR, except that there's\none point here which is, What if the PCP\nprover doesn't give you",
    "start": "526460",
    "end": "534829"
  },
  {
    "text": "a low-degree extension\nof some input? So if he gave you a low-degree\nextension of an input, and this input did not\nevaluate to 1-- namely,",
    "start": "534830",
    "end": "544092"
  },
  {
    "text": "if he's not satisfying\nassignment-- then this input is\nnot a valid witness, because one does not exist. In that case, of\ncourse, the soundness",
    "start": "544092",
    "end": "552980"
  },
  {
    "text": "would really follow\nfrom GKR soundness. However, one needs\nto think, there may be a malicious prover\nwho doesn't give you",
    "start": "552980",
    "end": "561180"
  },
  {
    "text": "here a low-degree\nextension of some W. So what he should give you--\na low-degree extension of W,",
    "start": "561180",
    "end": "567000"
  },
  {
    "text": "it means, like, some W\ngoes from F to the m to F, and it's of degree H\nminus 1 in each variable.",
    "start": "567000",
    "end": "574720"
  },
  {
    "text": "OK, if it's of degree h\nminus 1 in each variable, then it extends, it's a\nlow-degree extension of kind",
    "start": "574720",
    "end": "580005"
  },
  {
    "text": "of the W sitting kind of in-- so then W is just W\nsitting on H to the m.",
    "start": "580005",
    "end": "586860"
  },
  {
    "text": "That's kind of the little\ncube where W is sitting. If, indeed, he gave you a\nlow-degree extension of some W,",
    "start": "586860",
    "end": "595340"
  },
  {
    "text": "then you're good. If this W that he gives\nyou is of degree H minus 1 in each variable,\nthen you're good.",
    "start": "595340",
    "end": "601320"
  },
  {
    "text": "But what if it's high degree? What if this W-- what if he gives you some W\nstar which is very high degree?",
    "start": "601320",
    "end": "610355"
  },
  {
    "text": " Then is it sound? ",
    "start": "610355",
    "end": "616820"
  },
  {
    "text": "So in the homework,\nyou'll have exactly this. Actually, it's not sound,\nand you'll have to find,",
    "start": "616820",
    "end": "622850"
  },
  {
    "text": "actually, an attack. And then there's a\nway to make sure. So now what the verifier\nneeds to do in addition",
    "start": "622850",
    "end": "629730"
  },
  {
    "text": "is to do what is called\na low-degree test. It's a test that verifies that\nthis W star has low degree.",
    "start": "629730",
    "end": "637880"
  },
  {
    "text": "OK, so this is what the\nhomework assignment, or one part of the homework\nassignment, is about.",
    "start": "637880",
    "end": "643060"
  },
  {
    "text": "OK. But this is-- imagine\nwe're making sure that this is-- actually,\nthe verifier can't make sure it's low degree, but it can make\nsure it's close to a low degree.",
    "start": "643060",
    "end": "651209"
  },
  {
    "text": "So it agrees with\nsome low-degree W on, like, 1 minus epsilon\nfraction of the points.",
    "start": "651210",
    "end": "657730"
  },
  {
    "text": "So you can test that it's\nvery close to low degree. If it's very close to low\ndegree, then, most likely, wherever you'll ask--\nbecause you'll ask randomly--",
    "start": "657730",
    "end": "664660"
  },
  {
    "text": "it agrees with kind\nof the low degree, and therefore, that's\nkind of the idea. OK.",
    "start": "664660",
    "end": "670620"
  },
  {
    "text": "But this is the PCP, and\nthe verification just adds a low-degree test. And we'll expand on\nthat in the pset.",
    "start": "670620",
    "end": "678389"
  },
  {
    "text": "OK. So that's kind of what\nwe did most of the class, and then at the end,\nwe talked about--",
    "start": "678390",
    "end": "685390"
  },
  {
    "text": "OK, so now we have\na gigantic PCP. It's very large.",
    "start": "685390",
    "end": "690430"
  },
  {
    "text": "But you can verify it by looking\nat very few locations, which is nice. How many locations?",
    "start": "690430",
    "end": "695460"
  },
  {
    "text": "Like the communication\ncomplexity of the GKR, which on circuits of depth log\nn or order log n-- which is,",
    "start": "695460",
    "end": "705390"
  },
  {
    "text": "for example, 3-SAT-- then the communication\ncomplexity is polylog n. So you can verify\nthis by reading",
    "start": "705390",
    "end": "712470"
  },
  {
    "text": "only polylog-n locations,\nas opposed to n locations, so it's, like, an\nexponential improvement.",
    "start": "712470",
    "end": "719490"
  },
  {
    "text": "But again, you have\nthis gigantic PCP. And now the question is, OK,\nbut who's going to-- note,",
    "start": "719490",
    "end": "725340"
  },
  {
    "text": "here's something to just\nmake sure you understand. It's very important\nthat this PCP is kind of",
    "start": "725340",
    "end": "732810"
  },
  {
    "text": "given to the verifier before-- if the verifier-- so, OK,\nthe PCP is very large.",
    "start": "732810",
    "end": "739660"
  },
  {
    "text": "Now, one can say, OK,\ndon't send the PCP. I'll tell you what\nmy queries are.",
    "start": "739660",
    "end": "745089"
  },
  {
    "text": "Just give me the answers to my\nqueries instead of sending me-- anyway, I'm not going to read\nthem, so why send it over?",
    "start": "745090",
    "end": "750670"
  },
  {
    "text": "Just send me the\nanswers to my queries. That will not be sound. If the verifier, if the prover\ngets to choose the answers based",
    "start": "750670",
    "end": "759670"
  },
  {
    "text": "on all the queries\nthat he sees, soundness breaks down completely.",
    "start": "759670",
    "end": "764880"
  },
  {
    "text": "OK. And so it's very\nimportant that he first tells you what the PCP\nis and then you query it.",
    "start": "764880",
    "end": "771825"
  },
  {
    "text": "OK. In particular, the damaging--\nthe way the cheating prover can",
    "start": "771825",
    "end": "776840"
  },
  {
    "text": "cheat is by-- you know, when you tell him,\ngive me the PCP in location i,",
    "start": "776840",
    "end": "784370"
  },
  {
    "text": "if you ask for it\ntogether with location j, it will give you one answer. But if you ask it\nfor location j prime,",
    "start": "784370",
    "end": "789600"
  },
  {
    "text": "it will give you another answer. That's how it can cheat. But if he needs to\nfix it ahead of time, then, no, it's one answer--",
    "start": "789600",
    "end": "795520"
  },
  {
    "text": "doesn't matter the other\nlocations you ask-- and that's what\nmakes this sound.",
    "start": "795520",
    "end": "801530"
  },
  {
    "text": "OK. And you can actually\ngo back to GKR and see, if you use this PCP with GKR,\nwhere you give the queries ahead",
    "start": "801530",
    "end": "807490"
  },
  {
    "text": "of time, you give the sum-check\nqueries all ahead of time, everything breaks\ndown completely. OK.",
    "start": "807490",
    "end": "812710"
  },
  {
    "text": "So it's very important\nthat you first commit it to this entire PCP. And then one can\nask, well, if you",
    "start": "812710",
    "end": "818800"
  },
  {
    "text": "give this-- how does the-- so\nthe entire thing says, look, the verifier is a weak device.",
    "start": "818800",
    "end": "824420"
  },
  {
    "text": "That's the idea. He's weak. He cannot do the computation. How can we store\nthis gigantic PCP?",
    "start": "824420",
    "end": "830340"
  },
  {
    "text": "So it seems like,\nwell, that's very nice, but how do we use this thing? And the way we use this thing,\nthe way it's used today--",
    "start": "830340",
    "end": "837102"
  },
  {
    "text": "these things are used today,\nand the way they're used is using cryptography. So what we do, we\nuse cryptography",
    "start": "837102",
    "end": "843510"
  },
  {
    "text": "to take this gigantic\nproof and squish it. OK. And this is used using what's\ncalled collision resistant hash",
    "start": "843510",
    "end": "850829"
  },
  {
    "text": "functions. So this is what we're\ngoing to kind of-- we're going to talk about today.",
    "start": "850830",
    "end": "855917"
  },
  {
    "text": "We started last time, but\nwe're going to continue today. But before we go into\nhow we squish it and make kind of everything\nsuccinct, let me first--",
    "start": "855917",
    "end": "864412"
  },
  {
    "text": "once we use cryptography,\nwe can no longer get soundness against any\nall-bounded kind of cheating",
    "start": "864412",
    "end": "872519"
  },
  {
    "text": "prover, because\ncryptography can be broken by all-powerful adversaries.",
    "start": "872520",
    "end": "880300"
  },
  {
    "text": "Cryptography assumes the\nadversary is not strong enough to break our\nassumptions-- for example,",
    "start": "880300",
    "end": "885954"
  },
  {
    "text": "the collisions and hash\nfunction that we saw, and we'll review it in a second. So now, when we talk\nabout proof systems,",
    "start": "885955",
    "end": "892090"
  },
  {
    "text": "we need to relax the notion of\nwhat we mean by a proof system. By the way, who's\nscribing today?",
    "start": "892090",
    "end": "898610"
  },
  {
    "text": "Ah. OK, great. We need to relax the notion of\nwhat we mean by a proof system",
    "start": "898610",
    "end": "904150"
  },
  {
    "text": "to what's called a\ncomputationally sound proof system. Namely, you cannot cheat,\nassuming you're polynomially",
    "start": "904150",
    "end": "910899"
  },
  {
    "text": "bounded. If you're all powerful,\nyou can break my crypto-- no guarantees. But as long as you cannot break\nmy crypto, you cannot cheat.",
    "start": "910900",
    "end": "917840"
  },
  {
    "text": "So I just wrote it here. This is copied from last time. So instead of interactive proof,\nwe called it an interactive",
    "start": "917840",
    "end": "924310"
  },
  {
    "text": "argument, and we say that an\ninteractive argument for some language L-- think of it,\nlet's say, NP language,",
    "start": "924310",
    "end": "929792"
  },
  {
    "text": "but whatever language\nyou want to think about-- is a protocol between\na proof and a verifier.",
    "start": "929792",
    "end": "935260"
  },
  {
    "text": "The completeness is the usual. Namely, if x is in the\nlanguage, then you'll convince the verifier\nwith probability 1.",
    "start": "935260",
    "end": "941685"
  },
  {
    "text": "OK. And if it's an NP and you know a\nwitness, you're also efficient. OK. The soundness, that's\nwhere the change is.",
    "start": "941685",
    "end": "949290"
  },
  {
    "text": "Instead of soundness, you get\nsome computational version of soundness, and the\ncomputational version of soundness says the following.",
    "start": "949290",
    "end": "956220"
  },
  {
    "text": "It says there's some parameter,\na security parameter-- when you're talking\ncryptography, there's always a security parameter--\nwhich kind of says,",
    "start": "956220",
    "end": "963930"
  },
  {
    "text": "How much time do we believe\nreal-world adversaries can",
    "start": "963930",
    "end": "969270"
  },
  {
    "text": "run in? OK. So what the soundness says, that\nany real-world cheating prover--",
    "start": "969270",
    "end": "978128"
  },
  {
    "text": "real-world meaning it runs in\ntime polynomial in the security parameter. So we're going to denote the\nsecurity parameter by lambda",
    "start": "978128",
    "end": "985290"
  },
  {
    "text": "throughout this class. Sometimes they call it\nby n, and sometimes k. Here, n is going\nto be input size,",
    "start": "985290",
    "end": "991449"
  },
  {
    "text": "so I don't want to-- so we're\njust going to use lambda. So for any P star of size\npolynomial in the security",
    "start": "991450",
    "end": "998230"
  },
  {
    "text": "parameter, he can win only\nwith negligible probability. Namely, there exists a\nnegligible function mu-- again,",
    "start": "998230",
    "end": "1005780"
  },
  {
    "text": "negligible means it's smaller\nthan any inverse polynomial-- such that no matter\nwhich security parameter",
    "start": "1005780",
    "end": "1013000"
  },
  {
    "text": "you use, and any x-- so think about the P star. He's polynomial in the\nsecurity parameter.",
    "start": "1013000",
    "end": "1018769"
  },
  {
    "text": "He chooses an x adversarially. The probability-- or,\nan x is chosen, OK.",
    "start": "1018770",
    "end": "1024579"
  },
  {
    "text": "It exists. For any x, the probability\nthat he convinces-- now, the protocol dependent on\nthe security parameter,",
    "start": "1024579",
    "end": "1031309"
  },
  {
    "text": "so the verifier, may choose,\nlike, a hash function, according to the\nsecurity parameter. So everybody knows the\nsecurity parameter.",
    "start": "1031310",
    "end": "1037550"
  },
  {
    "text": "Everyone runs in time polynomial\nin the security parameter. And that's why we give it as\ninput, the security parameter,",
    "start": "1037550",
    "end": "1043419"
  },
  {
    "text": "in unary. So an input x and security\nparameter-- there's a protocol,",
    "start": "1043420",
    "end": "1050169"
  },
  {
    "text": "and the probability that this\ncheating prover convinces the verifier to accept is\nthis negligible function mu.",
    "start": "1050170",
    "end": "1058340"
  },
  {
    "text": "OK. So again, we offer soundness\nonly for poly-lambda cheating",
    "start": "1058340",
    "end": "1063830"
  },
  {
    "text": "provers. OK. So now you should think\nof the cheating provers as like a family of provers,\none for every lambda.",
    "start": "1063830",
    "end": "1069630"
  },
  {
    "text": "OK. It's like a friendly\nsecurity parameter. You're allowed to give\na cheating prover. But they all, let's say, run in\ntime at most lambda to the 10,",
    "start": "1069630",
    "end": "1078896"
  },
  {
    "text": "OK, so polynomial in lambda.  Any questions about the review\nbefore we go on to the new--",
    "start": "1078896",
    "end": "1087294"
  },
  {
    "text": "to today?  Yeah? AUDIENCE: Just, again,\nso here, the proof",
    "start": "1087294",
    "end": "1093600"
  },
  {
    "text": "is not showing you, like, hide\nthe witness or x [INAUDIBLE]? YAEL KALAI: No. No, no, no. Good, good, good. So, two things-- first\nof all, we're not at all",
    "start": "1093600",
    "end": "1100428"
  },
  {
    "text": "talking about hiding. If we didn't want\nsuccinctness, you can tell the proof will\njust give you the witness.",
    "start": "1100428",
    "end": "1107230"
  },
  {
    "text": "Here you go. Check on your own. OK, but we'll want\nanother property",
    "start": "1107230",
    "end": "1112855"
  },
  {
    "text": "from these interactive\narguments, which is succinctness, yeah,\nsuccinctness or--",
    "start": "1112855",
    "end": "1118590"
  },
  {
    "text": "yeah, exactly, for\nNP, for example. And-- yeah? AUDIENCE: So 3-SAT, I take it\nthat means Boolean formulas?",
    "start": "1118590",
    "end": "1125309"
  },
  {
    "text": "YAEL KALAI: Yeah, exactly. 3-SAT is just--\nthink of it, it's-- exactly, just three CNFs.",
    "start": "1125310",
    "end": "1132190"
  },
  {
    "text": "It's the AND of a bunch of-- of a bunch of clauses. Each one is like, xi1\nOR xi2 OR not xi3.",
    "start": "1132190",
    "end": "1141314"
  },
  {
    "text": "AUDIENCE: And do you get it\nwith a small enough depth? YAEL KALAI: Yeah, so any 3-CNF,\nany 3-CNF is of the form, like,",
    "start": "1141314",
    "end": "1148460"
  },
  {
    "text": "clause 1 AND clause 2\nAND clause n, let's say.",
    "start": "1148460",
    "end": "1156279"
  },
  {
    "text": "You can get a Boolean formula\nwith fan-in 2 of size order log m, because you just do\nkind of the AND, AND, you know,",
    "start": "1156280",
    "end": "1167090"
  },
  {
    "text": "all the ANDs. And then you have these\nlittle literals at the bottom, and each one is constant size.",
    "start": "1167090",
    "end": "1172410"
  },
  {
    "text": "It just depends. Each clause is constant size. So it's really a log-m circuit.",
    "start": "1172410",
    "end": "1183230"
  },
  {
    "text": "OK, so you can take any 3-SAT,\nwhich is just an AND of a bunch of literals, and write it\nas a log-depth circuit.",
    "start": "1183230",
    "end": "1191840"
  },
  {
    "text": "AUDIENCE: So can you\ngo directly to some j and do the PCP over some j\nby doing the parameterization",
    "start": "1191840",
    "end": "1200810"
  },
  {
    "text": "instead going through GKR? YAEL KALAI: OK. To get a PCP, I\nneed to go-- the way",
    "start": "1200810",
    "end": "1206299"
  },
  {
    "text": "I construct the PCP is\nby going through GKR. I do a GKR on this\nkind of circuit,",
    "start": "1206300",
    "end": "1211910"
  },
  {
    "text": "I open up all the possible\nprovers' messages, and that's what constitutes\nthe PCP, in addition",
    "start": "1211910",
    "end": "1218300"
  },
  {
    "text": "to the low-degree\nextension of the input. That's going to be the PCP. And the verifier just\nkind of verifies,",
    "start": "1218300",
    "end": "1224130"
  },
  {
    "text": "behaves like the verifier, and\nchecks that the witness he gets,",
    "start": "1224130",
    "end": "1230350"
  },
  {
    "text": "the extended witness,\nis of low degree. Like, it does a low-degree test.",
    "start": "1230350",
    "end": "1235560"
  },
  {
    "text": "The low-degree test,\nwe didn't talk about, but it's going to\nbe in the homework. So that's how the PCP works.",
    "start": "1235560",
    "end": "1242010"
  },
  {
    "text": "And now I'm kind of\ntalking about how you use this long PCP together\nwith cryptography to get",
    "start": "1242010",
    "end": "1249300"
  },
  {
    "text": "these succinct arguments. That's kind of\nthe next step, How do you use cryptography to just\nhave a fully succinct protocol?",
    "start": "1249300",
    "end": "1255640"
  },
  {
    "text": "Let's say, for NP,\nwe want a protocol that has polylog communication. OK, so you have an\ninstance of length n,",
    "start": "1255640",
    "end": "1262370"
  },
  {
    "text": "and the prover wants to\nprove to the verifier that x is in the\nlanguage, and you want the communication to be\nonly polylog n, for example.",
    "start": "1262370",
    "end": "1270090"
  },
  {
    "text": "OK. OK, one thing I do-- oh,\ndid you have a question? AUDIENCE: Is there\njust a quick--",
    "start": "1270090",
    "end": "1276855"
  },
  {
    "text": "[INAUDIBLE] is the interactive\nprotocol necessary? Because in the traditional\ncomplexity series, PCP,",
    "start": "1276855",
    "end": "1283830"
  },
  {
    "text": "probability has to be\nwritten down in advance, and it cannot be\nadapted [INAUDIBLE].",
    "start": "1283830",
    "end": "1289355"
  },
  {
    "text": "YAEL KALAI: Right. Right. AUDIENCE: So is the whole\npoint of the protocol trying to fix some problem in a\nsense, where you're not forcing",
    "start": "1289355",
    "end": "1294847"
  },
  {
    "text": "the prover to commit to-- YAEL KALAI: Exactly. Exactly. AUDIENCE: OK. YAEL KALAI: That's exactly it. That's exactly it.",
    "start": "1294848",
    "end": "1299880"
  },
  {
    "text": "Exactly. One thing I do want to say, note\nthat I asked for the cheating",
    "start": "1299880",
    "end": "1305220"
  },
  {
    "text": "prover to be\npolynomial in lambda, OK, because that's what my\nassumptions usually look like.",
    "start": "1305220",
    "end": "1311995"
  },
  {
    "text": "I want to say-- if I\nuse collision resistant, I want to say, well, I used some\ncollision-resistant function",
    "start": "1311995",
    "end": "1317160"
  },
  {
    "text": "with security parameter lambda. It says that my assumption is\nthat a poly-lambda-sized circuit cannot find collisions.",
    "start": "1317160",
    "end": "1323080"
  },
  {
    "text": "OK. My cryptographic\nassumption usually assumes that they are hard\nto break against adversaries",
    "start": "1323080",
    "end": "1330530"
  },
  {
    "text": "that run in time poly lambda. But this may seem very\nweird and very weak.",
    "start": "1330530",
    "end": "1336150"
  },
  {
    "text": "Why? Because, you know,\nour goal is to come up with succinct\narguments, OK, succinct.",
    "start": "1336150",
    "end": "1341940"
  },
  {
    "text": "In particular, one\nexample to keep in mind is let's say the input\nn can be really huge,",
    "start": "1341940",
    "end": "1347320"
  },
  {
    "text": "but I want the communication\ncomplexity to be polylog n. So think of lambda as\nbeing like polylog n.",
    "start": "1347320",
    "end": "1353946"
  },
  {
    "text": "OK, everything's going to go\nwith the security parameter, but let's take the security\nparameter to be polylog n.",
    "start": "1353946",
    "end": "1360510"
  },
  {
    "text": "Now it seems weird. You're like, Wait, really? So the cheating prover, if\nthe instance is of length n",
    "start": "1360510",
    "end": "1370140"
  },
  {
    "text": "and the security parameter's of\nlength polylog n, the cheating prover, we're not\neven giving him",
    "start": "1370140",
    "end": "1375870"
  },
  {
    "text": "the opportunity\nto read the input, so it's a very weak guarantee.",
    "start": "1375870",
    "end": "1382798"
  },
  {
    "text": "So what does this\nguarantee tell you? Let's say I want you to\nprove to me that a given x is in the language.",
    "start": "1382798",
    "end": "1390030"
  },
  {
    "text": "And my only guarantee\nis, if you run in time that's only\npolylogarithmic in n, you can't cheat.",
    "start": "1390030",
    "end": "1396610"
  },
  {
    "text": "OK. But what if you run in time n? ",
    "start": "1396610",
    "end": "1402730"
  },
  {
    "text": "So that seems like a problem,\nespecially if-- look, if n is too big for anyone to\nread, then in some sense, why--",
    "start": "1402730",
    "end": "1411130"
  },
  {
    "text": "nobody's going to use it anyway. And if n is-- we're able to read it,\nif I'm able to read it,",
    "start": "1411130",
    "end": "1417169"
  },
  {
    "text": "then you have the time to run in\nthat time, so you run in time n. I'm not going to assume\nyou run in time polylog n.",
    "start": "1417170",
    "end": "1422560"
  },
  {
    "text": "So this seems very weird. You should not be\nhappy at this point. You should be like, wait,\nsomething is going on.",
    "start": "1422560",
    "end": "1428750"
  },
  {
    "text": "I don't like this definition. It's meaningless. Like, look, if you\ndon't want succinctness,",
    "start": "1428750",
    "end": "1434600"
  },
  {
    "text": "you can make lambda be size\nof n and then you're happy. If lambda is of size x, the\ninstance size, then you can say,",
    "start": "1434600",
    "end": "1443480"
  },
  {
    "text": "yeah, the instance\nsize is some n. I allow my real-- my honest prover\nruns in time poly n.",
    "start": "1443480",
    "end": "1450020"
  },
  {
    "text": "I allow my malicious prover\nto run in time poly n, and that makes sense to me. But now I'm saying,\nno, the honest prover,",
    "start": "1450020",
    "end": "1456070"
  },
  {
    "text": "he can actually run in time n. The malicious cannot. Like, no, the malicious has\nmore power than the honest.",
    "start": "1456070",
    "end": "1463140"
  },
  {
    "text": "So it's really a weak\nguarantee, that kind of--",
    "start": "1463140",
    "end": "1469250"
  },
  {
    "text": "especially if we want to\ntake the security parameter, the idea is we're going\nto take the security parameter really small,\nOK, really, really small.",
    "start": "1469250",
    "end": "1477600"
  },
  {
    "text": "But if we take the security\nparameter so small, we should give the\nadversary more power than calling the security\nparameter, because it just",
    "start": "1477600",
    "end": "1485220"
  },
  {
    "text": "doesn't meet real life-- the idea is to--\nthe idea of this is to kind of capture\na real-life setting,",
    "start": "1485220",
    "end": "1490600"
  },
  {
    "text": "not to make a model\nthat makes no sense. So if we take lambda\nto be very, very small,",
    "start": "1490600",
    "end": "1496280"
  },
  {
    "text": "then actually the\nreal-world adversary can run in time more\nthan poly lambda. It can run in time poly\nn, so it doesn't capture--",
    "start": "1496280",
    "end": "1504490"
  },
  {
    "text": "yeah? AUDIENCE: If P\nstar's the circuit, how do we even think of\nplugging in a variable length",
    "start": "1504490",
    "end": "1509740"
  },
  {
    "text": "back into a [INAUDIBLE]? YAEL KALAI: They\ncan't even read x. You're right.",
    "start": "1509740",
    "end": "1514990"
  },
  {
    "text": "Yeah, for example. AUDIENCE: [INAUDIBLE]\nnot even [INAUDIBLE]. YAEL KALAI: So you can say,\noh, P star can't read x.",
    "start": "1514990",
    "end": "1520420"
  },
  {
    "text": "You're right. They can't read x. It's a circuit, and,\nyeah, it can't read x.",
    "start": "1520420",
    "end": "1525910"
  },
  {
    "text": "This is a big problem. OK. So the way I defined it really\ndoesn't make much sense.",
    "start": "1525910",
    "end": "1532400"
  },
  {
    "text": "Yeah? AUDIENCE: Just to\nmake sure, why did we need lambda to be polylog n? Is it so that the resulting\ninteraction is succinct enough?",
    "start": "1532400",
    "end": "1538960"
  },
  {
    "text": "YAEL KALAI: Exactly. So, great question. The question is, Why do we\nneed it to be polylog n? So I think where maybe you're\ngoing to-- you know what, let's",
    "start": "1538960",
    "end": "1546890"
  },
  {
    "text": "make lambda n to the epsilon,\nfor a content epsilon, n to the 0.001.",
    "start": "1546890",
    "end": "1553840"
  },
  {
    "text": "Then we say, look, the original\nproof grows with lambda, which",
    "start": "1553840",
    "end": "1561190"
  },
  {
    "text": "is n to the power of 0.001,\nwhich is much smaller than n,",
    "start": "1561190",
    "end": "1567490"
  },
  {
    "text": "so we're still happy. But the cheating\nprover can run time any poly, any polynomial in it,\nso it's poly n So that's good.",
    "start": "1567490",
    "end": "1576020"
  },
  {
    "text": "You're right, and that's a\ngood setting to think about. In that case,\nthere is no issues. So one thing which\nyou're saying is",
    "start": "1576020",
    "end": "1581468"
  },
  {
    "text": "you're saying, let me\nfix all your problems. Just take lambda to be-- think of it as n to the 0.01 and\nyou're done, or n to the epsilon",
    "start": "1581468",
    "end": "1592390"
  },
  {
    "text": "and you're done. OK, if you think about\nn to the epsilon, everything kind of makes sense. You allow the cheating\nprover to run time poly n,",
    "start": "1592390",
    "end": "1598970"
  },
  {
    "text": "the instance is\nn, and we're good. OK. So that's one way\nto think about it.",
    "start": "1598970",
    "end": "1605250"
  },
  {
    "text": "So usually, the way we think\nabout it, we say, for any n, we choose a security\nparameter that depends on n.",
    "start": "1605250",
    "end": "1610370"
  },
  {
    "text": "OK, that's usually how we do it. We have an n, and now we say,\nOK, which security do we use?",
    "start": "1610370",
    "end": "1615720"
  },
  {
    "text": "It's kind of a function of n. So that's one example. Choose that to be\nperfect, and then you've solved all the problems.",
    "start": "1615720",
    "end": "1621290"
  },
  {
    "text": "But what if I want more\nsuccinctness than that? Maybe n to the 0.01 is not--\nit's OK, but I want better.",
    "start": "1621290",
    "end": "1628190"
  },
  {
    "text": "I want polylog n. So what if my lambda-- that's one option, but\nanother option is polylog n.",
    "start": "1628190",
    "end": "1635160"
  },
  {
    "text": "That's even more succinct. So that's what I want. Now you're saying, well,\nif that's what you want,",
    "start": "1635160",
    "end": "1641360"
  },
  {
    "text": "you've got a definition\nthat makes no sense. And you're right. But then what I can do is\nstrengthen the definition.",
    "start": "1641360",
    "end": "1648980"
  },
  {
    "text": "So how do I strengthen\nthe definition? I'm going to say, you know\nwhat, poly is one option,",
    "start": "1648980",
    "end": "1654410"
  },
  {
    "text": "but let me actually\nassume, make a stronger cryptographic assumption.",
    "start": "1654410",
    "end": "1660330"
  },
  {
    "text": "I'm going to assume some lambda\nthe same for any adversary that runs-- for any P star that executes a\ncircuit not of size poly lambda",
    "start": "1660330",
    "end": "1672090"
  },
  {
    "text": "but of size 2 to the\nlambda to the epsilon. I'm going to allow my\nadversary to run in time 2",
    "start": "1672090",
    "end": "1678610"
  },
  {
    "text": "to the lambda to the\nepsilon, more than poly. Now it's a stronger assumption.",
    "start": "1678610",
    "end": "1685480"
  },
  {
    "text": "So now I want to say, an\nadversary that runs in time 2-- or of size 2 to the lambda to\nthe epsilon cannot break my hash",
    "start": "1685480",
    "end": "1694180"
  },
  {
    "text": "function. He cannot find collisions. It's a stronger assumption. But now this makes sense.",
    "start": "1694180",
    "end": "1701060"
  },
  {
    "text": "So I can take lambda very,\nvery small, but I'm saying, even if the adversary runs in\ntime that's much bigger than",
    "start": "1701060",
    "end": "1708350"
  },
  {
    "text": "lambda, that's actually 2 to\nthe lambda to the epsilon, even he cannot break my crypto.",
    "start": "1708350",
    "end": "1714460"
  },
  {
    "text": "And that's why, when we talk\nabout succinct proofs, most often, we talk about\nthis kind of assumption.",
    "start": "1714460",
    "end": "1721060"
  },
  {
    "text": "Subexponential\nassumptions come up a lot, and we'll see that, actually.",
    "start": "1721060",
    "end": "1726340"
  },
  {
    "text": "But often, if we\nwant to implement, so if we want to\nimplement, if we",
    "start": "1726340",
    "end": "1733630"
  },
  {
    "text": "want to take lambda\nto be polylog n, it makes sense to require-- for the soundness to\nmake sense, to correspond",
    "start": "1733630",
    "end": "1743770"
  },
  {
    "text": "to real-world applications,\nit makes sense to require subexponential\nassumptions",
    "start": "1743770",
    "end": "1748990"
  },
  {
    "text": "of our underlying cryptography. OK, so just to kind of\nclose these parentheses,",
    "start": "1748990",
    "end": "1755570"
  },
  {
    "text": "one can talk about\npoly-size cheating provers. It will give you a more\nstandard assumption.",
    "start": "1755570",
    "end": "1761600"
  },
  {
    "text": "But the soundness\nguarantee you get may not be strong\nenough, depending on how security parameter\nrelates to the input size.",
    "start": "1761600",
    "end": "1768799"
  },
  {
    "text": "If you want lambda to be\nvery, very-- the security parameter to be\nvery, very small, and yet you want to offer\nsecurity against adversaries",
    "start": "1768800",
    "end": "1777910"
  },
  {
    "text": "that runtime poly\nn, then you will need to make your\nassumptions stronger. ",
    "start": "1777910",
    "end": "1784440"
  },
  {
    "text": "OK. But this is kind\nof a design choice.",
    "start": "1784440",
    "end": "1789690"
  },
  {
    "text": "OK. For now, I'm just\ngoing to think of, for any given P star of size\npoly lambda or more, whatever",
    "start": "1789690",
    "end": "1797220"
  },
  {
    "text": "we choose here, that\ncorresponds to the assumption. OK. So if we have T secure\nassumption, then",
    "start": "1797220",
    "end": "1803159"
  },
  {
    "text": "for any T size-- so in general,\nmore generally, you can replace this by T of lambda,\nright, any T. It can be poly.",
    "start": "1803160",
    "end": "1813419"
  },
  {
    "text": "It can be subexponential. It can be whatever. OK. And then we choose the T,\nand now the T kind of governs",
    "start": "1813420",
    "end": "1820730"
  },
  {
    "text": "the application. But once you have a T, now we\ncan just prove it using math. We don't need to think\nabout it anymore.",
    "start": "1820730",
    "end": "1826310"
  },
  {
    "text": "OK. So that's kind of how\nlambda relates to n",
    "start": "1826310",
    "end": "1833280"
  },
  {
    "text": "and how the strength of the\nassumption relates to n. ",
    "start": "1833280",
    "end": "1838930"
  },
  {
    "text": "OK. Any questions about that? ",
    "start": "1838930",
    "end": "1844410"
  },
  {
    "text": "OK. So now let's go ahead\nwith how we use it. So that's what we want.",
    "start": "1844410",
    "end": "1850020"
  },
  {
    "text": "I want to come up with a\nsuccinct, interactive argument for all of NP.",
    "start": "1850020",
    "end": "1855190"
  },
  {
    "text": "OK. I want to show how I can\ntake any NP language-- and let's think of 3-SAT.",
    "start": "1855190",
    "end": "1860660"
  },
  {
    "text": "Why not? It's complete. I want to prove to you that a\n3-CNF formula is satisfiable.",
    "start": "1860660",
    "end": "1869920"
  },
  {
    "text": "I have a witness of length n. I want to prove to you\nthat it's satisfiable.",
    "start": "1869920",
    "end": "1876390"
  },
  {
    "text": "But with the\ncommunication, I want it to grow only with lambda. OK, lambda can be polylog n.",
    "start": "1876390",
    "end": "1882230"
  },
  {
    "text": "I don't even want to-- don't go now to the choice\nof how we chose the lambda. But now I have a security\nparameter lambda, I want the communication to only\ngo with the security parameter,",
    "start": "1882230",
    "end": "1890320"
  },
  {
    "text": "not with n. OK. So how do I do it?",
    "start": "1890320",
    "end": "1895630"
  },
  {
    "text": "So the idea is, well,\nI'll use my PCP. I have my PCP.",
    "start": "1895630",
    "end": "1901179"
  },
  {
    "text": "I'm going to use\ncrypto to squeeze it. How do I use crypto\nto squeeze it?",
    "start": "1901180",
    "end": "1907290"
  },
  {
    "text": "It's exactly what\ncollision-resistant hash functions do. They take a big thing and\nthey squish them down.",
    "start": "1907290",
    "end": "1914309"
  },
  {
    "text": "So now I'll take\nI'll take my PCP, the prover will take his\nPCP, he will squish it down using a collision\nresistant hash function.",
    "start": "1914310",
    "end": "1922010"
  },
  {
    "text": "OK. So he gives the\nverifier-- here you go. Here's a-- like, a squished,\nlike a digest of this PCP.",
    "start": "1922010",
    "end": "1928040"
  },
  {
    "text": "The verifier takes this thing. It has no meaning. So what does he do? Now he says to the prover,\nOK, yeah, thank you very much,",
    "start": "1928040",
    "end": "1934620"
  },
  {
    "text": "but I want to see the\nPCP on a few locations. So now what can the prover do?",
    "start": "1934620",
    "end": "1941720"
  },
  {
    "text": "The prover can't-- OK, so collision-resistant\nhash function, as is,",
    "start": "1941720",
    "end": "1947389"
  },
  {
    "text": "it's a way to kind of compress\nin a way that you can't--",
    "start": "1947390",
    "end": "1952460"
  },
  {
    "text": "you're kind of\ncommitted, because you can't find collisions later. So you can't open--",
    "start": "1952460",
    "end": "1957770"
  },
  {
    "text": "after you gave the hash value,\nyou can't open to x and x prime.",
    "start": "1957770",
    "end": "1963000"
  },
  {
    "text": "You can't give x and\nx prime that both hash to the same value. But I don't want you to\ngive-- you can't give me-- now",
    "start": "1963000",
    "end": "1970280"
  },
  {
    "text": "you're hashing an entire PCP. The PCP is big. You can't just-- I never want you to give\nme-- me, the verifier,",
    "start": "1970280",
    "end": "1976940"
  },
  {
    "text": "I never want to receive the PCP. I can't even hold it. I want to receive a\nfew bits of the input.",
    "start": "1976940",
    "end": "1983980"
  },
  {
    "text": "So what we need is a\ncollision-resistant hash that has a special property\nthat you can open bit by bit.",
    "start": "1983980",
    "end": "1990900"
  },
  {
    "text": "So instead of giving\nme the entire input, the entire preimage\nof the hash value,",
    "start": "1990900",
    "end": "1997820"
  },
  {
    "text": "I want you just to give me a\nfew bits here, a few bits here, and a few bits here, and prove\nto me that they correspond",
    "start": "1997820",
    "end": "2004250"
  },
  {
    "text": "to the input you hashed. So now I'm going to\ndefine this primitive.",
    "start": "2004250",
    "end": "2011769"
  },
  {
    "text": "Once I have this,\nwe're going to see it's going to be\nvery easy to come up with the actual\ninteractive argument.",
    "start": "2011770",
    "end": "2017590"
  },
  {
    "text": "OK. So the primitive\nis what's called a collision-resistant\nhash with local opening.",
    "start": "2017590",
    "end": "2025460"
  },
  {
    "text": "Let me define it. So we're going to have a\ncollision-resistant hash function with local\nopening, and this",
    "start": "2025460",
    "end": "2038880"
  },
  {
    "text": "consists of five algorithms. The first one is-- the\nfirst two are Gen and Eval.",
    "start": "2038880",
    "end": "2045179"
  },
  {
    "text": "These are exactly--\nthese two algorithms is what defines\ncollision-resistant hash",
    "start": "2045180",
    "end": "2050219"
  },
  {
    "text": "function. So this, we saw last time. I'll just repeat,\njust to recall, Gen takes as input a 1 to the\nlambda, the security parameter,",
    "start": "2050219",
    "end": "2058859"
  },
  {
    "text": "and outputs hash key. So this is some key.",
    "start": "2058860",
    "end": "2064710"
  },
  {
    "text": "Eval takes as input\nhash key and any input x from 0, 1 star, anything,\nOK, any string of any length,",
    "start": "2064710",
    "end": "2075230"
  },
  {
    "text": "and it outputs a hash value.",
    "start": "2075230",
    "end": "2082440"
  },
  {
    "text": "We'll denote it V. And that's\nfixed at 0, 1 to the lambda. I call it sometimes delta\nand sometimes lambda, right?",
    "start": "2082440",
    "end": "2089110"
  },
  {
    "text": "Sorry. It's lambda. You output a hash of\na fixed size, which",
    "start": "2089110",
    "end": "2095239"
  },
  {
    "text": "means you can take\nvery, very long things, and you digest them down\nto a value of size lambda.",
    "start": "2095239",
    "end": "2102450"
  },
  {
    "text": "OK, so it takes an\ninput of arbitrary size. It can be huge. It can be 2 lambda,\n4 lambda, tons, huge,",
    "start": "2102450",
    "end": "2109870"
  },
  {
    "text": "and it digests down to a\nstring of length lambda. OK.",
    "start": "2109870",
    "end": "2115130"
  },
  {
    "text": "Now there's two more\nalgorithms-- two or three? OK. So now there's an\nalgorithm called Open.",
    "start": "2115130",
    "end": "2120360"
  },
  {
    "text": " Open, I just want to make sure-- I want it to tell me--\ndon't give me the entire--",
    "start": "2120360",
    "end": "2126352"
  },
  {
    "text": "I want to-- so\nthese just digest. It has no meaning. I want to tell you now I\nwant the i-th bit of x.",
    "start": "2126352",
    "end": "2133300"
  },
  {
    "text": "Don't give me all of\nx, what you hashed. I can't hold it. I just want the i-th bit. So, Open, so what do you do?",
    "start": "2133300",
    "end": "2139920"
  },
  {
    "text": "You open. How do you open? You have the hash key. You have x, which you\ncomputed, the value",
    "start": "2139920",
    "end": "2146950"
  },
  {
    "text": "v. And now you have some i in\nkind of 0, 1 to the length of x.",
    "start": "2146950",
    "end": "2154420"
  },
  {
    "text": "So this is kind of which\nindex I want you to open. And what you output is a bit B--\nwhich is kind of corresponding",
    "start": "2154420",
    "end": "2166400"
  },
  {
    "text": "to xi, the i-th bit-- a bit and an opening value rho.",
    "start": "2166400",
    "end": "2173760"
  },
  {
    "text": "OK, this is some kind of string,\nand this is of size lambda,",
    "start": "2173760",
    "end": "2182900"
  },
  {
    "text": "so, small. Or it can be poly lambda, OK,\nan opening of size poly lambda.",
    "start": "2182900",
    "end": "2194390"
  },
  {
    "text": "Yes? AUDIENCE: In this\ndefinition, who's running the Open [INAUDIBLE]? YAEL KALAI: Good. Who's running the Open?",
    "start": "2194390",
    "end": "2199650"
  },
  {
    "text": "Good. The person who\ngenerated the hash. So let's say you're the prover. You want to prove to me\nthat phi is satisfiable.",
    "start": "2199650",
    "end": "2208369"
  },
  {
    "text": "You generate a PCP. I don't want your PCP. It's too big. You give me a hash, a value\nV. Thank you very much.",
    "start": "2208370",
    "end": "2214060"
  },
  {
    "text": "Now I want you to open the\nPCP and some location i. So I tell you, here's i.",
    "start": "2214060",
    "end": "2220040"
  },
  {
    "text": "I don't know your PCP. I don't know your input. You give me some rho i, like\nan opening-- give me xi.",
    "start": "2220040",
    "end": "2227590"
  },
  {
    "text": "If you only give me\nxi, you can cheat. You can give me\nwhatever you want. I don't believe you. So I want you to give me kind\nof-- rho i, this opening,",
    "start": "2227590",
    "end": "2234000"
  },
  {
    "text": "is like a proof that\nindeed what I hashed down in the i-th location\nis sitting xi.",
    "start": "2234000",
    "end": "2241020"
  },
  {
    "text": "This is what you think of rho i. It's like a proof. Yeah? AUDIENCE: Shouldn't i be in\nthe log of the [INAUDIBLE]?",
    "start": "2241020",
    "end": "2249203"
  },
  {
    "text": "YAEL KALAI: Oh, sorry. Sorry, sorry, sorry. Sorry. Thank you. Sorry.",
    "start": "2249203",
    "end": "2255360"
  },
  {
    "text": "It's in index, not in 0, 1. Sorry. It's in index, with 1\nuntil the length of x--",
    "start": "2255360",
    "end": "2262170"
  },
  {
    "text": "1 to n, let's say. Yeah. Thank you very much. ",
    "start": "2262170",
    "end": "2268850"
  },
  {
    "text": "Questions? Yeah? AUDIENCE: Not so much a\nquestion as just, like, I guess it's just interesting\nthat you have to retain",
    "start": "2268850",
    "end": "2277160"
  },
  {
    "text": "the entire hashed value x. Maybe that's necessary\nfor correctness,",
    "start": "2277160",
    "end": "2282650"
  },
  {
    "text": "to be able to confirm any\nbit of x, but I don't know, it just seems interesting\nthat in practice, you",
    "start": "2282650",
    "end": "2288620"
  },
  {
    "text": "would have to keep storing\nall of these hashed values. YAEL KALAI: Right, so\nwhat you're-- wait, let me make sure\nwhat your comment is.",
    "start": "2288620",
    "end": "2295170"
  },
  {
    "text": "Note that to open, you\nneed to know the entire x, and why do you need to\nknow the entire x, in a sense,",
    "start": "2295170",
    "end": "2302130"
  },
  {
    "text": "to open to a bit i? So in some sense, look,\nI mean, to open to bit i,",
    "start": "2302130",
    "end": "2308079"
  },
  {
    "text": "all you need to\nremember is rho i. That's what you need to\ngive for the opening. But all the rho-i's\ntogether contain all the x.",
    "start": "2308080",
    "end": "2317270"
  },
  {
    "text": "So that's why you need to\nkind of store all the x.",
    "start": "2317270",
    "end": "2322540"
  },
  {
    "text": "And you'll see the construction\nsoon, so it'll be kind of clear. OK, the last algorithm is\nwhat we call Ver, or Verify,",
    "start": "2322540",
    "end": "2331420"
  },
  {
    "text": "and Verify, it takes as\ninput a hash key of--",
    "start": "2331420",
    "end": "2337210"
  },
  {
    "text": "and now I'm verifying. You gave me xi and rho i. How do I know it's good? So I take my hash\nkey, the hash key,",
    "start": "2337210",
    "end": "2344060"
  },
  {
    "text": "the value that you gave\nme, i, xi, and rho i,",
    "start": "2344060",
    "end": "2349840"
  },
  {
    "text": "and this algorithm\noutputs 0 or 1-- namely, accept or reject.",
    "start": "2349840",
    "end": "2357190"
  },
  {
    "text": "So I can verify whether\nthe rho is a valid opening.",
    "start": "2357190",
    "end": "2365460"
  },
  {
    "text": "OK. And now, what are\nthe guarantees? So you can hash, and\nthen you can open.",
    "start": "2365460",
    "end": "2372450"
  },
  {
    "text": "What is the guarantee? The guarantee is, first of all,\nif you do everything honestly, I'll accept you.",
    "start": "2372450",
    "end": "2378369"
  },
  {
    "text": "OK, so there's two guarantees. The first guarantee\nis just correctness,",
    "start": "2378370",
    "end": "2384390"
  },
  {
    "text": "and the second guarantee we\nwant is collision resistance. So we'll see. So for correctness-- before,\nactually, let me just--",
    "start": "2384390",
    "end": "2397560"
  },
  {
    "text": "sorry, let me just say,\nthese are all PPT algorithms.",
    "start": "2397560",
    "end": "2402810"
  },
  {
    "text": "OK, all of them are\npolynomial time. Actually, the only--\neverything is-- these are--",
    "start": "2402810",
    "end": "2409109"
  },
  {
    "text": "I should say, these are\npoly-time algorithm, and this is PPT.",
    "start": "2409110",
    "end": "2414480"
  },
  {
    "text": "So this is a\nrandomized algorithm, poly time, so it runs\nin time poly lambda, generates a hash key.",
    "start": "2414480",
    "end": "2421210"
  },
  {
    "text": "These are all deterministic\nalgorithms, OK, that run in poly time. So Eval takes his input x. He runs in time x, of course.",
    "start": "2421210",
    "end": "2428590"
  },
  {
    "text": "Open runs in time x. But Verify runs in\ntime poly lambda.",
    "start": "2428590",
    "end": "2435370"
  },
  {
    "text": "Why? Because the hash key\nis of size poly lambda. This is of size poly lambda,\nbecause I required it.",
    "start": "2435370",
    "end": "2441510"
  },
  {
    "text": "And xi is a bit, and this\nis of size poly lambda, because I required it. So the verifier runs\nin time poly lambda.",
    "start": "2441510",
    "end": "2450599"
  },
  {
    "text": "OK, so when you send\nme a hash value, I get a value of size lambda. When I want you to\nopen to a certain bit,",
    "start": "2450600",
    "end": "2457180"
  },
  {
    "text": "I can check it in time poly\nlambda independent of n. I mean, lambda may depend on\nn, but it doesn't grow with n.",
    "start": "2457180",
    "end": "2462740"
  },
  {
    "text": "Yes? AUDIENCE: Why [INAUDIBLE]\nought to be probabilistic? YAEL KALAI: Why is Gen-- AUDIENCE: Just Eval.",
    "start": "2462740",
    "end": "2468410"
  },
  {
    "text": "YAEL KALAI: Eval is not--\nthese are polynomial time. AUDIENCE: Yeah. Why is it not allowed? YAEL KALAI: Ah. Why is it not allowed?",
    "start": "2468410",
    "end": "2473890"
  },
  {
    "text": "It doesn't need to be. It just doesn't need\nto be probabilistic.",
    "start": "2473890",
    "end": "2479869"
  },
  {
    "text": "I'm not inherently opposed to\nusing randomness in algorithms, but it just doesn't\nneed to be, whereas Gen",
    "start": "2479870",
    "end": "2486259"
  },
  {
    "text": "has to be probabilistic. OK. Great. Thanks. Good question. OK.",
    "start": "2486260",
    "end": "2492450"
  },
  {
    "text": "So the correctness\nguarantee just says that-- let's see-- for every lambda,\nevery hash key generated, like,",
    "start": "2492450",
    "end": "2504820"
  },
  {
    "text": "in the image of\nGen, and every x--",
    "start": "2504820",
    "end": "2512000"
  },
  {
    "text": "OK, not every x. We get completeness up to x in\n0, 1 to the 2 to the lambda.",
    "start": "2512000",
    "end": "2519970"
  },
  {
    "text": "OK. Or, I should say, sorry, small\nor equal to 2 to the lambda.",
    "start": "2519970",
    "end": "2526180"
  },
  {
    "text": "So let's think of the\nsecurity parameter. It's at least of size log\nn. n is the size of x.",
    "start": "2526180",
    "end": "2532230"
  },
  {
    "text": "OK. We never take the\nsecurity parameter to be smaller than log n. OK.",
    "start": "2532230",
    "end": "2537570"
  },
  {
    "text": "And so that's why we always\nassume that the size of x",
    "start": "2537570",
    "end": "2543010"
  },
  {
    "text": "is at most 2 to the\nsecurity parameter, the number of bits in x. OK, so for every x, we want\nthe probability that Verify--",
    "start": "2543010",
    "end": "2554130"
  },
  {
    "text": "oh, I forgot to say, for\nevery i, the probability",
    "start": "2554130",
    "end": "2564539"
  },
  {
    "text": "that Verify hk, Eval hk of x--",
    "start": "2564540",
    "end": "2572030"
  },
  {
    "text": "this is v-- what else do I have? i, xi, and rho i,\nwhich is Open--",
    "start": "2572030",
    "end": "2580345"
  },
  {
    "start": "2580345",
    "end": "2587430"
  },
  {
    "text": "this is kind of the rho-- it outputs 1 with probability 1. So if you are honest, you take\nsome input x, any hash key,",
    "start": "2587430",
    "end": "2598710"
  },
  {
    "text": "and you give me a hash\nvalue and then you open it, I'll accept you.",
    "start": "2598710",
    "end": "2604280"
  },
  {
    "text": "OK. If everyone's doing\nwhat they're supposed to do for any x and for any\nhash key, we'll get output 1.",
    "start": "2604280",
    "end": "2610720"
  },
  {
    "text": "By the way, sometimes,\none can define also with high probability over\nrandomly choosing a hash key.",
    "start": "2610720",
    "end": "2617430"
  },
  {
    "text": "But our constructions work\noften in the worst case. But one can also-- a weaker definition\nis for a kind",
    "start": "2617430",
    "end": "2625072"
  },
  {
    "text": "of hash key randomly generated. And here you have\n1 minus negligible,",
    "start": "2625072",
    "end": "2632910"
  },
  {
    "text": "where the probability\nis over the hash key. Here, actually, sorry,\nhere there was no--",
    "start": "2632910",
    "end": "2637980"
  },
  {
    "text": "OK, before, there\nwere no probabilities, because I just\nchose for average. But one can think of a hash\nkey randomly generated,",
    "start": "2637980",
    "end": "2643740"
  },
  {
    "text": "and you can have a negligible\nprobability of error. We won't need that because-- I mean, some schemes, but many\nschemes are just probably 1.",
    "start": "2643740",
    "end": "2652450"
  },
  {
    "text": "Yeah? AUDIENCE: So the\n[INAUDIBLE] that correctness always holds for any\nhash key, but soundness needs the randomness, right?",
    "start": "2652450",
    "end": "2659392"
  },
  {
    "text": "YAEL KALAI: Right. Yeah, I didn't go\nto soundness yet. Yeah, yeah, yeah, yeah, yeah. We'll see soundness in a minute. But correctness, we can\nget for every hash key.",
    "start": "2659392",
    "end": "2666010"
  },
  {
    "text": "But one can think\nof constructions that actually-- even correctness\nwith high probability.",
    "start": "2666010",
    "end": "2671600"
  },
  {
    "text": "But often, we think of\nit as correctness 1. Yes? AUDIENCE: For correctness,\nyou have the position of x?",
    "start": "2671600",
    "end": "2677360"
  },
  {
    "text": "YAEL KALAI: Again? AUDIENCE: [INAUDIBLE]\nfor correctness, you have that restriction\non the length of x, so the length should be less\nthan 2 to the lambda, right?",
    "start": "2677360",
    "end": "2684242"
  },
  {
    "text": "YAEL KALAI: Yeah. Yeah, yeah, yeah. You're asking why? AUDIENCE: Yeah. YAEL KALAI: Because\nour constructions,",
    "start": "2684242",
    "end": "2689380"
  },
  {
    "text": "often, we'll see a\nconstruction, and we'll see that if the length is-- ",
    "start": "2689380",
    "end": "2695802"
  },
  {
    "text": "as I said, OK, the reason is our\nconstruction grows with log x.",
    "start": "2695802",
    "end": "2703060"
  },
  {
    "text": "That's the truth. It just grows with log x, and\nwe want the output to be lambda. So the fact of the\nmatter is, the way",
    "start": "2703060",
    "end": "2709020"
  },
  {
    "text": "we construct these\nschemes, our construction, the hash value grows with log x. But we don't want\nto kind of say it.",
    "start": "2709020",
    "end": "2715612"
  },
  {
    "text": "We want to just say\nlambda, because it's nicer. So we just make sure\nlambda is at least log x, and then we're OK.",
    "start": "2715612",
    "end": "2722600"
  },
  {
    "text": "OK, great question. OK, any other questions,\nbefore I go to soundness?",
    "start": "2722600",
    "end": "2729160"
  },
  {
    "text": "OK. So soundness, that's the\nmore interesting one. Soundness says, intuitively,\nthat for any bounded poly",
    "start": "2729160",
    "end": "2739860"
  },
  {
    "text": "lambda, or T bounded,\nthere's some-- the soundness is like-- you\ncan call it T soundness.",
    "start": "2739860",
    "end": "2749160"
  },
  {
    "text": "OK, and you can think of-- poly soundness, you can\nthink of it \"2 to the lambda to the epsilon\" soundness.",
    "start": "2749160",
    "end": "2755880"
  },
  {
    "text": "But there's some T\nsoundness, and it says any adversary that\nruns in time of size",
    "start": "2755880",
    "end": "2762990"
  },
  {
    "text": "at most T, the probability\nthat it can find",
    "start": "2762990",
    "end": "2769910"
  },
  {
    "text": "a value and an index, a\nhash value and an index, so that at that index, he can\nsuccessfully open to both 0",
    "start": "2769910",
    "end": "2778910"
  },
  {
    "text": "and 1, is negligible. OK, so it essentially means,\nonce the adversary gave you",
    "start": "2778910",
    "end": "2784760"
  },
  {
    "text": "a hash value, for any index, he\ncannot generate a valid opening",
    "start": "2784760",
    "end": "2789950"
  },
  {
    "text": "both for 0 and for 1. It's impossible for him. OK. So let me write it formally. So for any poly T--",
    "start": "2789950",
    "end": "2800400"
  },
  {
    "text": "again, phi of T is, like,\nlinear, so poly lambda-- poly-T-sized adversary,\nthe probability--",
    "start": "2800400",
    "end": "2810610"
  },
  {
    "text": "and the probability is over\nhash key-- he gets a random hash key chosen by Gen, OK, gets a\nrandom hash key chosen by Gen.",
    "start": "2810610",
    "end": "2820200"
  },
  {
    "text": "This adversary,\ngiven the hash key, he tries to open some index\nin two different ways.",
    "start": "2820200",
    "end": "2828520"
  },
  {
    "text": "So his goal is to give you\na hash value v, an index",
    "start": "2828520",
    "end": "2833730"
  },
  {
    "text": "i, and a valid\nopening rho 0 that opens to 0 and a valid\nopening rho 1 that opens to 1.",
    "start": "2833730",
    "end": "2844190"
  },
  {
    "text": "That's what he outputs. So the adversary outputs-- he gets a hash key. He outputs a hash value,\nan index, and two openings",
    "start": "2844190",
    "end": "2851900"
  },
  {
    "text": "for that index-- that's what he's trying to\ndo-- one corresponding to 0, one corresponding to 1. And the probability\nthat both of them",
    "start": "2851900",
    "end": "2859369"
  },
  {
    "text": "are a valid opening, the\nprobability that for every b in 0, 1, Verify agrees--",
    "start": "2859370",
    "end": "2867540"
  },
  {
    "text": "so Verify, given hash key v,\ni, and b and rho b, outputs 1,",
    "start": "2867540",
    "end": "2879410"
  },
  {
    "text": "this is negligible. ",
    "start": "2879410",
    "end": "2886340"
  },
  {
    "text": "OK. So again, soundness is\nlike collision resistance in this setting. So this is kind of another\nway to-- usually, people",
    "start": "2886340",
    "end": "2894400"
  },
  {
    "text": "call this property\ncollision resistance. And the collision\nresistance property",
    "start": "2894400",
    "end": "2900020"
  },
  {
    "text": "says that once the\nadversary chose a hash value, the probability\nthat for any index--",
    "start": "2900020",
    "end": "2907750"
  },
  {
    "text": "OK, he chooses for any index i-- the probability that\nit can open in a way",
    "start": "2907750",
    "end": "2915610"
  },
  {
    "text": "that verifies, in an\naccepting way, to both 0 and 1-- so for every b,\nrho b is a valid opening,",
    "start": "2915610",
    "end": "2922850"
  },
  {
    "text": "rho 0 is valid for 0, and rho\n1 is a valid opening for 1-- that happens with\nnegligible probability.",
    "start": "2922850",
    "end": "2929220"
  },
  {
    "text": "OK, so for every rho,\nthere exists negligible-- ",
    "start": "2929220",
    "end": "2937119"
  },
  {
    "text": "such that-- OK, so this is the\ncollision resistance property.",
    "start": "2937120",
    "end": "2947270"
  },
  {
    "start": "2947270",
    "end": "2952700"
  },
  {
    "text": "Any questions\nabout the property? ",
    "start": "2952700",
    "end": "2960100"
  },
  {
    "text": "OK, so now I have two\nthings I want to do. The first thing--\noh, sorry, unordered,",
    "start": "2960100",
    "end": "2966490"
  },
  {
    "text": "two things I want to do-- one is show you how you\nconstruct this thing, and two,",
    "start": "2966490",
    "end": "2973640"
  },
  {
    "text": "show you how to\nuse it to construct an interactive argument.",
    "start": "2973640",
    "end": "2979370"
  },
  {
    "text": "Any preference on the\norder, what goes first? Who wants construction first?",
    "start": "2979370",
    "end": "2987660"
  },
  {
    "text": "Who wants interactive\nargument first? ",
    "start": "2987660",
    "end": "2993942"
  },
  {
    "text": "OK, we'll do\ninteractive argument, and then we'll do construction. It's not that-- if anybody\nwants to weigh in, say so,",
    "start": "2993943",
    "end": "3001060"
  },
  {
    "text": "because it wasn't very\nsignificant, the result. OK,",
    "start": "3001060",
    "end": "3017450"
  },
  {
    "text": "so interactive argument first? Yeah? OK. OK. So here is the--",
    "start": "3017450",
    "end": "3025829"
  },
  {
    "text": "this is what's known as\nthe Kilian-Micali protocol. ",
    "start": "3025830",
    "end": "3043185"
  },
  {
    "text": "OK. ",
    "start": "3043185",
    "end": "3059130"
  },
  {
    "text": "OK. So actually, I want succinct\ninteractive arguments for NP.",
    "start": "3059130",
    "end": "3065415"
  },
  {
    "text": "OK, so I'm going to show\nyou how to construct a succinct interactive\nargument for any NP language.",
    "start": "3065415",
    "end": "3070590"
  },
  {
    "text": "OK. So here is how I'm\ngoing to do it. The prover, first-- so we\nhave a prover and a verifier,",
    "start": "3070590",
    "end": "3079650"
  },
  {
    "text": "and here is what they\nboth share, a witness x. And the prover wants to\nprove to the verifier",
    "start": "3079650",
    "end": "3085230"
  },
  {
    "text": "that x is in the language,\nand he has some witness. OK, and you can think\nabout it as a 3-CNF--",
    "start": "3085230",
    "end": "3093150"
  },
  {
    "text": "can talk about 3-CNF\nand pick of it anyway. It can be nice to have something\nconcrete in mind so you can",
    "start": "3093150",
    "end": "3098329"
  },
  {
    "text": "think about x as being a\n3-CNF and w as satisfying the assignment. OK.",
    "start": "3098330",
    "end": "3103730"
  },
  {
    "text": "What does the prover\ndo, the first thing? Any guess what the\nprover first does?",
    "start": "3103730",
    "end": "3111207"
  },
  {
    "text": "AUDIENCE: Compute the PCP. YAEL KALAI: Thank you. Compute the PCP, that's\nthe first thing he does. So he takes w and\nconverts it to a PCP.",
    "start": "3111207",
    "end": "3118905"
  },
  {
    "text": " OK. And if you want to have\nsomething concrete in mind,",
    "start": "3118905",
    "end": "3124610"
  },
  {
    "text": "he opens up the GKR, adds\na low-degree extension of the witness. That's a huge thing.",
    "start": "3124610",
    "end": "3129830"
  },
  {
    "text": "That's a PCP. He can't ship it over. That's too big. What does he want to do instead?",
    "start": "3129830",
    "end": "3137344"
  },
  {
    "text": "AUDIENCE: Hash it. YAEL KALAI: Hash. OK. He needs a hash key.",
    "start": "3137344",
    "end": "3142420"
  },
  {
    "text": "He's like, I want\na hash, Can anybody give me a hash key, right? Oh, let me-- sorry,\nbecause it's an argument,",
    "start": "3142420",
    "end": "3148820"
  },
  {
    "text": "I should say they also\nshare security parameter. So the first thing\nthe verifier does",
    "start": "3148820",
    "end": "3155410"
  },
  {
    "text": "is it says, sure, I'm going\nto-- here's a hash key. I'm going to generate\nit, and here you go.",
    "start": "3155410",
    "end": "3164359"
  },
  {
    "text": "Now what does the prover do?  AUDIENCE: Hash.",
    "start": "3164360",
    "end": "3169844"
  },
  {
    "text": "YAEL KALAI: Hash. Thank you very much. So I compute. He sends over v.\nUsually, it's an--",
    "start": "3169844",
    "end": "3176290"
  },
  {
    "text": "OK, he sends v, which is Eval\nof hash key and the PCP, pi.",
    "start": "3176290",
    "end": "3188350"
  },
  {
    "text": "OK. So the verifier gets\nthis v, this digest.",
    "start": "3188350",
    "end": "3193559"
  },
  {
    "text": "It's a bunch of bits\nwith no meaning. He wants to open\nthis PCP, right?",
    "start": "3193560",
    "end": "3199069"
  },
  {
    "text": "He wants-- OK, so\nwhat does he do? The verifier gets the v,\ndoesn't understand a thing.",
    "start": "3199070",
    "end": "3206403"
  },
  {
    "text": "What does he want\nfrom the prover? What will he ask the prover? AUDIENCE: Randomly\nselects a bit. AUDIENCE: Open\n[INAUDIBLE] to open it.",
    "start": "3206403",
    "end": "3212790"
  },
  {
    "text": "YAEL KALAI: Exactly. He randomly selects a\nbit and has to open it. Which distribution?",
    "start": "3212790",
    "end": "3218140"
  },
  {
    "text": "How will he choose which\nbits to open from this PCP?",
    "start": "3218140",
    "end": "3223980"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] whatever--\nthe PCP asks to call it oracle, right?",
    "start": "3223980",
    "end": "3229080"
  },
  {
    "text": "YAEL KALAI: Exactly. What the-- exactly, as the\nPCP verifier, so what he does,",
    "start": "3229080",
    "end": "3234670"
  },
  {
    "text": "he runs the V PCP. ",
    "start": "3234670",
    "end": "3240680"
  },
  {
    "text": "And the PCP verifier\ntells him, oh, sure, I want to know some il.",
    "start": "3240680",
    "end": "3247015"
  },
  {
    "text": " So, OK, let me just\nmention, sorry,",
    "start": "3247015",
    "end": "3252880"
  },
  {
    "text": "I'm going to construct an\ninteractive argument for NP from two ingredients. Yeah, one, I'm\ngoing to use a PCP,",
    "start": "3252880",
    "end": "3260010"
  },
  {
    "text": "so we have a PCP in our heads,\nthe GKR PCP-- yeah, we have it-- and, two, this\ncollision-resistant hash",
    "start": "3260010",
    "end": "3267120"
  },
  {
    "text": "with local opening. These are two ingredients\nthat we're going to use in this construction.",
    "start": "3267120",
    "end": "3274530"
  },
  {
    "text": "And we're going to assume-- remember, we talked about\nPCP when we defined it. It was before we went\nto kind of crypto land.",
    "start": "3274530",
    "end": "3281130"
  },
  {
    "text": "And we said there's two\nparameters, c and s, completeness and soundness. We said that a PCP comes with\ntwo parameters, completeness",
    "start": "3281130",
    "end": "3288119"
  },
  {
    "text": "and soundness, c and s. And usually, we think of\nthe completeness as 1,",
    "start": "3288120",
    "end": "3294390"
  },
  {
    "text": "because all our PCP have\nactually completeness 1. It's easy to construct\nthem with completeness 1.",
    "start": "3294390",
    "end": "3299940"
  },
  {
    "text": "Soundness, we pay for soundness. So the more queries you get,\nthe better soundness you get.",
    "start": "3299940",
    "end": "3307490"
  },
  {
    "text": "And here we're going to always\nassume that the soundness is",
    "start": "3307490",
    "end": "3313090"
  },
  {
    "text": "negligible.  OK. So we give enough--\nso for example,",
    "start": "3313090",
    "end": "3320350"
  },
  {
    "text": "if we do one GKR, if you just\nrun the GKR verifier once,",
    "start": "3320350",
    "end": "3325780"
  },
  {
    "text": "if you remember, you\nkind of query one point and the low-degree extension. But a field element in GKR\nis of size 1 over polylog.",
    "start": "3325780",
    "end": "3335349"
  },
  {
    "text": "So the sound is still get-- sorry, the field\nsize is polylog, so the soundness you'll\nget is 1 over polylog,",
    "start": "3335350",
    "end": "3341200"
  },
  {
    "text": "which is not great. I want negligible. So I'll need to repeat\nthe GKR enough times,",
    "start": "3341200",
    "end": "3347640"
  },
  {
    "text": "like, log times, so that\nit will become negligible. I want my soundness\nto become negligible.",
    "start": "3347640",
    "end": "3353590"
  },
  {
    "text": "The reason I want the soundness\nof the PCP to be negligible is because when we defined\ninteractive arguments,",
    "start": "3353590",
    "end": "3359710"
  },
  {
    "text": "we wanted soundness\nto be negligible. OK, and these two will\nkind of-- the soundness I get from my interactive\nargument will kind of",
    "start": "3359710",
    "end": "3366852"
  },
  {
    "text": "depend on the soundness I'm\ngoing to get from my PCP. So I'm going to\nassume here that I have a PCP with negligible\nsoundness, that I ask--",
    "start": "3366852",
    "end": "3373510"
  },
  {
    "text": "so if I have a PCP\nwith soundness half, I'll just repeat it polylog-- like, I'll repeat it,\nlet's say, lambda times,",
    "start": "3373510",
    "end": "3381400"
  },
  {
    "text": "and now my soundness becomes\n1 over 2 to the lambda. OK.",
    "start": "3381400",
    "end": "3386640"
  },
  {
    "text": "So I'm going to always assume\nthat it's negligible in lambda. ",
    "start": "3386640",
    "end": "3395010"
  },
  {
    "text": "OK, so I run the\nPCP verifier-- yeah?",
    "start": "3395010",
    "end": "3400930"
  },
  {
    "text": "AUDIENCE: So c minus the\noracle access to the proof? YAEL KALAI: What do you mean? What is the previous version?",
    "start": "3400930",
    "end": "3406480"
  },
  {
    "text": "AUDIENCE: The previous\nversion, where you had to query the proof oracle. YAEL KALAI: OK. So when you-- OK.",
    "start": "3406480",
    "end": "3412130"
  },
  {
    "text": "So you said, let's\nremember the PCP model, where I had the PCP as an\noracle, and I queried it.",
    "start": "3412130",
    "end": "3418160"
  },
  {
    "text": "That was very succinct. But if I had an oracle, in\nwhich world do I have an oracle?",
    "start": "3418160",
    "end": "3424059"
  },
  {
    "text": "This oracle is a nice-- like, who puts the\nPCP in the sky for me? Where is the sky? It's not sitting on a cloud.",
    "start": "3424060",
    "end": "3429940"
  },
  {
    "text": "It's like a-- well, cloud, I\nguess, now has many meanings, so it can be sitting,\nactually, on a cloud.",
    "start": "3429940",
    "end": "3436340"
  },
  {
    "text": "But that's kind of the point. We don't want anyone\nto store this thing. We don't want to assume someone\nactually holds this thing.",
    "start": "3436340",
    "end": "3443050"
  },
  {
    "text": "So in that model where you\nassume you have an oracle, everything is succinct. Now what I'm trying to do here\nis get rid of that assumption",
    "start": "3443050",
    "end": "3450370"
  },
  {
    "text": "that I have an oracle. Great. Yeah? AUDIENCE: What about\neven before the PCP, if you were to just\ndo interactive GKR",
    "start": "3450370",
    "end": "3457690"
  },
  {
    "text": "on the circuit [INAUDIBLE]? YAEL KALAI: OK. Good, good. Great, great.",
    "start": "3457690",
    "end": "3462859"
  },
  {
    "text": "So the question is, look,\njust do an interactive GKR on the circuit-- on this c sub phi\nthat may be here.",
    "start": "3462860",
    "end": "3471310"
  },
  {
    "text": "Oh, no, it vanished. You can, but here's the problem. You can do GKR, and\nessentially, it's",
    "start": "3471310",
    "end": "3477148"
  },
  {
    "text": "what we're doing in\nthe PCP, in some sense. But here's the issue. But you're saying do you care. You don't need to deal\nwith hashing, right.",
    "start": "3477148",
    "end": "3484099"
  },
  {
    "text": "That's kind of your point--\na very, very good point. However, in GKR, anybody see--\nthat's actually a good-- anybody",
    "start": "3484100",
    "end": "3491222"
  },
  {
    "text": "see what's wrong? So let me repeat your point. The point is the following. Look, GKR is succinct.",
    "start": "3491222",
    "end": "3497330"
  },
  {
    "text": "Think of 3-SAT. It's very low depth. It's succinct. The communication\nis very succinct. Why are you now going to\ncrypto and opening GKR just",
    "start": "3497330",
    "end": "3505720"
  },
  {
    "text": "to be done with it? What are we doing all of this? AUDIENCE: You need the witness.",
    "start": "3505720",
    "end": "3511800"
  },
  {
    "text": "YAEL KALAI: Very good. Why? Because GKR works if\nthe verifier knows the witness, if the\nverifier knows the input.",
    "start": "3511800",
    "end": "3519970"
  },
  {
    "text": "In GKR, when we\ntalked about GKR, we said, look, the verifier\nand prover both hold an input.",
    "start": "3519970",
    "end": "3526290"
  },
  {
    "text": "And the verifier wants to know\nthe output of this circuit and the input that he has.",
    "start": "3526290",
    "end": "3531380"
  },
  {
    "text": " And indeed, at the\nend, the verifier",
    "start": "3531380",
    "end": "3536599"
  },
  {
    "text": "needs to check the final\nthing against his input. Is it, in the end,\ngoing to get kind",
    "start": "3536600",
    "end": "3542600"
  },
  {
    "text": "of a value in the\nlow-degree extension? And he checks, oh, is this\nconsistent with the input I have in my hand?",
    "start": "3542600",
    "end": "3549320"
  },
  {
    "text": "Now he doesn't have an input. So what do you do? So, actually, let me\ntell you something.",
    "start": "3549320",
    "end": "3557200"
  },
  {
    "text": "The way these\nthings are actually implemented-- it's a\nvery interesting that you say that, because the\nway they're implemented",
    "start": "3557200",
    "end": "3562511"
  },
  {
    "text": "is actually more\nalong what you said. What they do is first they\ncommit to just the witness.",
    "start": "3562511",
    "end": "3568000"
  },
  {
    "text": "You're saying, why are you\ncommitting [INAUDIBLE] PCP? If you have a witness,\ncommit to that, or commit to the low-degree\nextension of the witness.",
    "start": "3568000",
    "end": "3575641"
  },
  {
    "text": "And actually, in practice,\nthat's what they do. They only commit\nto the low-degree and then they apply\nthis interactive GKR.",
    "start": "3575642",
    "end": "3581650"
  },
  {
    "text": "Or now they have even\nbetter protocols, IOPs, but that's for another time.",
    "start": "3581650",
    "end": "3586665"
  },
  {
    "text": "AUDIENCE: So you're\nsaying that once you can commit to the witness\nand you do normal GKR, and then you only need to\nopen the bits and the witness",
    "start": "3586665",
    "end": "3593830"
  },
  {
    "text": "that you care about. YAEL KALAI: Exactly. So what you can do,\nyou can-- first, the prover can tell\nthe verifier-- sorry,",
    "start": "3593830",
    "end": "3600500"
  },
  {
    "text": "the verifier tells\nthe prover, you claim that you have a\nsatisfying assignment.",
    "start": "3600500",
    "end": "3605780"
  },
  {
    "text": "Give me a low-degree\nextension of your assignment, but hash it down because I don't\nwant to hold this entire thing.",
    "start": "3605780",
    "end": "3611150"
  },
  {
    "text": "Now I have a hash. Now we're going to do GKR. Do GKR, then I need to check\na random point in the--",
    "start": "3611150",
    "end": "3618470"
  },
  {
    "text": "a random point in the\nlow-degree extension. I'll ask the prover, now open. But now you're\ncommitted ahead of time.",
    "start": "3618470",
    "end": "3624740"
  },
  {
    "text": "AUDIENCE: And then you have to\nmake sure it was low degree. YAEL KALAI: You need to add\na low-degree test to it. Yeah. Exactly.",
    "start": "3624740",
    "end": "3632259"
  },
  {
    "text": "So, many of the implementations,\nthat's exactly how they work. And actually, a lot\nof the work currently,",
    "start": "3632260",
    "end": "3637450"
  },
  {
    "text": "in the last couple of\nyears, is actually not so much on improving GKR--\nthat, too, but a lot of the work",
    "start": "3637450",
    "end": "3643000"
  },
  {
    "text": "is actually on the\ncommitment, How do you construct this\ncommitment that's kind of the most\nefficient? and so on.",
    "start": "3643000",
    "end": "3650500"
  },
  {
    "text": "OK. Great. So-- yeah? AUDIENCE: Do you not\ngive the verifier",
    "start": "3650500",
    "end": "3656660"
  },
  {
    "text": "the witness because the\nwitness is too large? YAEL KALAI: Exactly. Exactly. We don't want to give\nthe verifier the witness, because it's too large.",
    "start": "3656660",
    "end": "3662218"
  },
  {
    "text": "AUDIENCE: So we don't have\nzero-knowledge properties. YAEL KALAI: I don't care\nnow about zero-knowledge. Usually, when people\nimplement this,",
    "start": "3662218",
    "end": "3668280"
  },
  {
    "text": "they add zero-knowledge\non top, kind of as a-- but for now, I don't\ncare at all about hiding.",
    "start": "3668280",
    "end": "3673650"
  },
  {
    "text": "I just want verification, like,\njust to verify correctness. Yeah. No, like, all of the\nhiding zero-knowledge",
    "start": "3673650",
    "end": "3682160"
  },
  {
    "text": "is kind of orthogonal. Yeah? AUDIENCE: So the commitment\nthat's given to the verifier is only used for verification.",
    "start": "3682160",
    "end": "3688440"
  },
  {
    "text": "It's never actually opened. It's never opened completely. Yeah, it's never-- good point.",
    "start": "3688440",
    "end": "3693570"
  },
  {
    "text": "So what you're\nsaying-- this hash will never be completely opened.",
    "start": "3693570",
    "end": "3699200"
  },
  {
    "text": "OK. So the prover computes this PCP. He sends it over.",
    "start": "3699200",
    "end": "3704250"
  },
  {
    "text": "The PCP will never be\nopened in its entirety. It's too big, or the witness-- again, never going to\nbe open in its entirety.",
    "start": "3704250",
    "end": "3711030"
  },
  {
    "text": "Instead, what happens is the\nverifier generates PCP queries,",
    "start": "3711030",
    "end": "3716400"
  },
  {
    "text": "and he sends the PCP\nqueries i1 up to il.",
    "start": "3716400",
    "end": "3721789"
  },
  {
    "text": "And what the prover does, he\nonly opens the locations pi i1",
    "start": "3721790",
    "end": "3730040"
  },
  {
    "text": "up to pi il. So he only gives him the\nPCP and these locations",
    "start": "3730040",
    "end": "3735799"
  },
  {
    "text": "and opening, rho\ni1 up to rho il.",
    "start": "3735800",
    "end": "3741660"
  },
  {
    "text": "Yeah? AUDIENCE: This is\na minor detail, but it was mentioned before\nthat when you query everything",
    "start": "3741660",
    "end": "3747030"
  },
  {
    "text": "in parallel, sometimes\nit's not sound. Can these be sent\nat the same time, or would they have to be sent\nthrough multiple, sequential",
    "start": "3747030",
    "end": "3753000"
  },
  {
    "text": "rounds? YAEL KALAI: OK. So if you do a PCP, then\nthey can be sent exactly",
    "start": "3753000",
    "end": "3758250"
  },
  {
    "text": "the same time, because a PCP\nwas committed to the PCP, and we're done. If you do GKR, you need to\ndo everything sequentially.",
    "start": "3758250",
    "end": "3763960"
  },
  {
    "text": "AUDIENCE: Right. OK. YAEL KALAI: Yeah, if you did--\nso if you did the version that was proposed here, where\nyou don't do PCP at all,",
    "start": "3763960",
    "end": "3772210"
  },
  {
    "text": "you have your\nwitness, and then you need to do GKR\ncompletely interactive.",
    "start": "3772210",
    "end": "3777960"
  },
  {
    "text": "But if you have a PCP,\nthen it's committed. Now you don't have to do\nanything sequentially. That's it. The guy is kind of stuck.",
    "start": "3777960",
    "end": "3783990"
  },
  {
    "text": "So you can do everything\nat the same time. So, great, so you\nsend all the queries, you get back the answers.",
    "start": "3783990",
    "end": "3790230"
  },
  {
    "text": "What does the verifier do. How does he decide if\nto accept or reject? What tests does the verifier do?",
    "start": "3790230",
    "end": "3796310"
  },
  {
    "text": " Yeah?",
    "start": "3796310",
    "end": "3801490"
  },
  {
    "text": "AUDIENCE: Verify that the\nopening is correct, and then runs the PCP verifier. YAEL KALAI: Fantastic exactly. What does he do?",
    "start": "3801490",
    "end": "3806940"
  },
  {
    "text": "He runs two things. He runs the PCP verifier\nwith kind of i1, il, pi",
    "start": "3806940",
    "end": "3813740"
  },
  {
    "text": "i1 up to pi il, with x also, x\ncomma, and checks that it's 1.",
    "start": "3813740",
    "end": "3822350"
  },
  {
    "text": "And it also checks\nall the openings. So we check that Verify of\nhash key v, ij, pi ij, rho ij,",
    "start": "3822350",
    "end": "3839349"
  },
  {
    "text": "equals 1 for every j. AUDIENCE: Would that be pi ix?",
    "start": "3839350",
    "end": "3845572"
  },
  {
    "text": "[INAUDIBLE] YAEL KALAI: Pi ij\nis kind of-- oh. AUDIENCE: [INAUDIBLE] you\nadd one should that be pi?",
    "start": "3845572",
    "end": "3852680"
  },
  {
    "text": "YAEL KALAI: No, because\nwhen you verify a PCP, OK,",
    "start": "3852680",
    "end": "3857690"
  },
  {
    "text": "the verifier never\nknows the entire pi. He never reads the entire pi. But to verify, of course, he\nneeds to know the instance.",
    "start": "3857690",
    "end": "3865520"
  },
  {
    "text": "You need to check it\nagainst the instance. So the proof is succinct,\nbut the verifier's work,",
    "start": "3865520",
    "end": "3871550"
  },
  {
    "text": "he has to read\nwhat the claim is. OK. So the verifier will\nrun in time linear in x.",
    "start": "3871550",
    "end": "3879620"
  },
  {
    "text": "That, he needs, to\nread what the claim is. But the communication\nis very small.",
    "start": "3879620",
    "end": "3886290"
  },
  {
    "text": "So the communication\nis hash key, which is poly\nsecurity parameter; v, which is a security\nparameter; i1 up to il,",
    "start": "3886290",
    "end": "3895300"
  },
  {
    "text": "which is going to be at\nmost security parameter; and the opening, which\nis a security parameter. So everything here only grows\nwith the security parameter,",
    "start": "3895300",
    "end": "3903220"
  },
  {
    "text": "OK, polynomial security\nparameter, not with x. So the security\nparameter is polylog n--",
    "start": "3903220",
    "end": "3909174"
  },
  {
    "text": "n being the length of x-- then you'll have\ncommunication polylog n. To verify-- well,\nOK, this verification",
    "start": "3909175",
    "end": "3917470"
  },
  {
    "text": "is of size polylog n,\nlike security parameter, because the x doesn't come in. But, of course, to verify the\nPCP, you need to read the input.",
    "start": "3917470",
    "end": "3924950"
  },
  {
    "text": "You need to read the\nclaim you're verifying. So here, you do\nrun in time linear.",
    "start": "3924950",
    "end": "3931869"
  },
  {
    "text": "These PCPs usually-- the\nruntime of the verifier is linear in the input length.",
    "start": "3931870",
    "end": "3937240"
  },
  {
    "text": "And let me mention,\nactually, there's this notion which we won't\ngo into this semester,",
    "start": "3937240",
    "end": "3943450"
  },
  {
    "text": "but it's called\nPCP of proximity, where the verifier doesn't\neven need to read the input.",
    "start": "3943450",
    "end": "3949220"
  },
  {
    "text": "He just reads a little bit. But now, of course, if he\nonly reads a little bit,",
    "start": "3949220",
    "end": "3954560"
  },
  {
    "text": "then how does he know\nthat the input is correct? Maybe he didn't read one\nbit, and that flips it from true to false, you know?",
    "start": "3954560",
    "end": "3960400"
  },
  {
    "text": "So the only guarantee he\nhas that if he's accepted, then this input is closed to an\ninput in the language, that's",
    "start": "3960400",
    "end": "3968140"
  },
  {
    "text": "why the proximity. So there is a notion where\nthe verifier is actually",
    "start": "3968140",
    "end": "3973210"
  },
  {
    "text": "sublinear in x. He runs in time\nmuch less than x, but then the guarantee's weaker,\nthe soundness guarantee's",
    "start": "3973210",
    "end": "3978880"
  },
  {
    "text": "weaker. The soundness just says\nthat if you accept, you cannot accept statements\nwhich are far from being",
    "start": "3978880",
    "end": "3987560"
  },
  {
    "text": "in the language, but\nyou may be able-- you may accept sentences-- you\nmay accept claims that are false",
    "start": "3987560",
    "end": "3992850"
  },
  {
    "text": "but close to ones that\nare in the language. So it's a proximity-type\nsoundness guarantee,",
    "start": "3992850",
    "end": "3998630"
  },
  {
    "text": "but without-- if you really want\nsoundness, yes or no, you have to read the input. There's nothing you can\ndo, unless the input",
    "start": "3998630",
    "end": "4008030"
  },
  {
    "text": "is kind of in an\nerror-correcting code or you changed something\nabout the model. But otherwise, you\nhave to read the input.",
    "start": "4008030",
    "end": "4015930"
  },
  {
    "text": "Any questions about\nthe construction? Forget about soundness and\nso on-- just about the-- like, about the proof, just\nabout the construction.",
    "start": "4015930",
    "end": "4025030"
  },
  {
    "text": "OK. So I just want to\npoint to one thing that I said, let's\nsend i1 up to il.",
    "start": "4025030",
    "end": "4030890"
  },
  {
    "text": "Really, the way the PCP verifier\nworks is he gets his input like-- let's say the security\nparameter just didn't know how",
    "start": "4030890",
    "end": "4037850"
  },
  {
    "text": "many times to repeat the-- if the original PCP-- if the original PCP,\nlet's say, is of size--",
    "start": "4037850",
    "end": "4044210"
  },
  {
    "text": "has soundness half,\nhe needs to know how many times he\nneeds to repeat it, so there's some\nsecurity parameter.",
    "start": "4044210",
    "end": "4049220"
  },
  {
    "text": "And some, he also knows the\ninput length, like n in binary. So this can be very efficient,\nand he uses randomness.",
    "start": "4049220",
    "end": "4060280"
  },
  {
    "text": "What my point is, instead\nof sending i1 one up to il, instead, he could have\njust sent the randomness.",
    "start": "4060280",
    "end": "4068278"
  },
  {
    "text": "OK, he could have\nsent the randomness and told the prover, OK,\nyou see this randomness? Compute-- run this yourself.",
    "start": "4068278",
    "end": "4075980"
  },
  {
    "text": "OK. Why am I saying this? It's like, OK, fine,\nwhy is that interesting? The reason this is very\ninteresting is because--",
    "start": "4075980",
    "end": "4085150"
  },
  {
    "text": "and also here, by the way. Here, instead of the-- this is a randomized algorithm.",
    "start": "4085150",
    "end": "4093069"
  },
  {
    "text": "Actually, here,\nit's not important. Let's just leave this as is. I want to focus on this here. Why is this important?",
    "start": "4093070",
    "end": "4099250"
  },
  {
    "text": "Because later-- not today,\nbut later in this class--",
    "start": "4099250",
    "end": "4104330"
  },
  {
    "text": "we'll start,\nactually, next week. We'll see that a--",
    "start": "4104330",
    "end": "4109620"
  },
  {
    "text": "we'll want to go--\nafter we'll prove this, and we'll be very\nhappy, and we'll say, wow, we have a succinct\nargument and it's so succinct,",
    "start": "4109620",
    "end": "4116270"
  },
  {
    "text": "we can have the security\nparameter-- success, happiness. But then, of course, every\ntime we have something,",
    "start": "4116270",
    "end": "4122120"
  },
  {
    "text": "we want some more,\nand then we'll say, you know what, we\ndon't want interaction.",
    "start": "4122120",
    "end": "4127259"
  },
  {
    "text": "Why interaction? We want to go back to\nkind of actual proofs, so we want to\neliminate interaction.",
    "start": "4127260",
    "end": "4133450"
  },
  {
    "text": "And what we'll see is a way\nto eliminate interaction from protocols where the\nverifier's messages are",
    "start": "4133450",
    "end": "4140670"
  },
  {
    "text": "completely random,\nOK, and that's why I want you to remember\nin your head that here,",
    "start": "4140670",
    "end": "4146989"
  },
  {
    "text": "this message can be\ncompletely random. OK. We can make also this\nrandom, but we don't need to,",
    "start": "4146990",
    "end": "4152868"
  },
  {
    "text": "because it's the first message. It's kind of-- the\nfirst message is kind of special in that\nit's kind of the first one,",
    "start": "4152868",
    "end": "4160239"
  },
  {
    "text": "so we don't need to eliminate\ninteraction from it. It's kind of the first\none, so that's fine.",
    "start": "4160240",
    "end": "4165710"
  },
  {
    "text": "All the later messages of\nthe verifier will need to-- if they're really\nrandom, just random bits,",
    "start": "4165710",
    "end": "4172930"
  },
  {
    "text": "then we can show how we\ncan eliminate interaction, that we can actually get\nrid of the interaction.",
    "start": "4172930",
    "end": "4177939"
  },
  {
    "text": "So I just want to\npoint out, this message is completely random. These, i1 to il, are not random.",
    "start": "4177939",
    "end": "4184630"
  },
  {
    "text": "They're actually correlated. But you can just\nsend the randomness. Yes? AUDIENCE: I guess\nthis wasn't assigned,",
    "start": "4184630",
    "end": "4190000"
  },
  {
    "text": "but why is the first\nmessage special? Because you could imagine\nthat, I don't know, there could exist some\nparticular hash key which",
    "start": "4190000",
    "end": "4196320"
  },
  {
    "text": "is really bad or something. So if you-- like, it feels like\nyou should still be sampling",
    "start": "4196320",
    "end": "4201480"
  },
  {
    "text": "the first hash [INAUDIBLE]. YAEL KALAI: Oh, you're\ndefinitely sampling it. No, no. You're going to sample\nthis key, for sure.",
    "start": "4201480",
    "end": "4206770"
  },
  {
    "text": "I'm just saying,\nthe hash key itself is not necessarily random bits. It depends on the hash.",
    "start": "4206770",
    "end": "4211990"
  },
  {
    "text": "Some hash keys are random. Some hash keys have\nsome structure,",
    "start": "4211990",
    "end": "4217650"
  },
  {
    "text": "depending on which\nhash function you use. So some hash keys, indeed,\nsome hash keys are just random,",
    "start": "4217650",
    "end": "4223449"
  },
  {
    "text": "and then this message\nis just random. Some hash keys are not random.",
    "start": "4223450",
    "end": "4228580"
  },
  {
    "text": "I have an LWE\nstructure, for those who know what LWE is, but\nhave some special structure.",
    "start": "4228580",
    "end": "4234730"
  },
  {
    "text": "So now I'm saying-- I guess what I was saying\nis if the message is from the verifier to the\nprover, we're truly random,",
    "start": "4234730",
    "end": "4242980"
  },
  {
    "text": "we're going to see we can\neliminate interaction. So I'm telling you, just\nnotice it's completely random. And now you're\ngoing to say, wait,",
    "start": "4242980",
    "end": "4248998"
  },
  {
    "text": "this is not necessarily random. I don't know how hash\nkeys are distributed. Depends on the construction. Maybe it's not\ncompletely random.",
    "start": "4248998",
    "end": "4254915"
  },
  {
    "text": "Then I tell you,\ndon't worry, this doesn't have to be-- it can\nbe an arbitrary distribution. AUDIENCE: But, I guess, since\nthe n is already random,",
    "start": "4254915",
    "end": "4261105"
  },
  {
    "text": "why can't you just\nsend the bit-- the coins you used\nto [INAUDIBLE]. YAEL KALAI: Good,\ngood, good, good, good. So you're saying, hey,\nsend the coins here, too.",
    "start": "4261105",
    "end": "4267340"
  },
  {
    "text": "Do the same. Put here r and send r. You can.",
    "start": "4267340",
    "end": "4273080"
  },
  {
    "text": "However, not all hash\nfunctions-- there are many hash functions\nthat are secure if you only",
    "start": "4273080",
    "end": "4278950"
  },
  {
    "text": "give the hash key,\nbut I'm not going to give the randomness used\nto generate the hash key. Maybe with this\nrandomness, you can",
    "start": "4278950",
    "end": "4285310"
  },
  {
    "text": "break the collision resistance. So some hash functions are OK.",
    "start": "4285310",
    "end": "4290540"
  },
  {
    "text": "Some are not. Like, the hash function that\nwe'll construct, you'll see, is fine. Actually, it's randomness. But that's under\nspecific assumption.",
    "start": "4290540",
    "end": "4297080"
  },
  {
    "text": "And some are not-- it's not\nOK to give the randomness. But I just want to point\nout that for later,",
    "start": "4297080",
    "end": "4302508"
  },
  {
    "text": "to eliminate interaction, using\nwhat's called the Fiat-Shamir paradigm-- we'll talk\nabout it next class--",
    "start": "4302508",
    "end": "4307599"
  },
  {
    "text": "the first message actually\ndoesn't need to be random. It's only the later\nmessages have to be random. So I just want to\nemphasize this is random.",
    "start": "4307600",
    "end": "4316610"
  },
  {
    "text": "There were other questions? Yeah? AUDIENCE: Yeah. The PCP, the\nverifier, what is n?",
    "start": "4316610",
    "end": "4321739"
  },
  {
    "text": "What is the-- YAEL KALAI: n, n is\nthe size of x, yeah. So, sorry, I said, yeah, n,\nthank you, is the length of x.",
    "start": "4321740",
    "end": "4330325"
  },
  {
    "text": "Thanks.  So the PCP verifier\nneeds to know",
    "start": "4330325",
    "end": "4335340"
  },
  {
    "text": "the length of the\ninstance he's working with to know which queries to ask. Yeah, Tina? AUDIENCE: Why is the\n[INAUDIBLE] for the instance",
    "start": "4335340",
    "end": "4341960"
  },
  {
    "text": "given in binary but\nthe security parameters given in generation [INAUDIBLE]? YAEL KALAI: OK,\nbecause-- yeah, good.",
    "start": "4341960",
    "end": "4347192"
  },
  {
    "text": "So I just want to emphasize\nthat to generate these queries,",
    "start": "4347192",
    "end": "4352500"
  },
  {
    "text": "you don't need to run in\ntime that's polynomial in n. It's enough to run in\ntime polylog n in order",
    "start": "4352500",
    "end": "4358220"
  },
  {
    "text": "to generate the queries. That's why I gave it an-- it doesn't matter so much,\nbecause here, anyway, you need to run in time linear.",
    "start": "4358220",
    "end": "4363960"
  },
  {
    "text": "So you're like, why am\nI making this point? Yeah.",
    "start": "4363960",
    "end": "4369530"
  },
  {
    "text": "It's not very important,\neven though sometimes it is important. When later you want to talk\nabout proximity and stuff, then all of a sudden, it\nbecomes an issue.",
    "start": "4369530",
    "end": "4375902"
  },
  {
    "text": "So, yeah, just, this\nis just emphasized that the PCP verifier, at least\nwhen generating the queries,",
    "start": "4375902",
    "end": "4382820"
  },
  {
    "text": "doesn't run in time linear in n. It runs in time, actually,\nlinear in security parameter and polylog in n to\ngenerate the queries.",
    "start": "4382820",
    "end": "4390585"
  },
  {
    "text": " OK. Questions?",
    "start": "4390585",
    "end": "4397490"
  },
  {
    "text": "OK. So let's go ahead\nand prove the--",
    "start": "4397490",
    "end": "4402679"
  },
  {
    "text": "let me see. I changed the order,\nso I just want to make sure I'm not skipping.",
    "start": "4402680",
    "end": "4407720"
  },
  {
    "text": " OK. Yeah. Let's do it.",
    "start": "4407720",
    "end": "4413070"
  },
  {
    "text": "OK, soundness,\nlet's analyze this. So I want to prove that\nit's complete and sound, this protocol.",
    "start": "4413070",
    "end": "4418760"
  },
  {
    "text": "Yeah, so if it's an NP\nlanguage, your favorite one, let's say 3-SAT, and I want\nto argue that if the prover is",
    "start": "4418760",
    "end": "4426980"
  },
  {
    "text": "honest, he indeed has\na satisfying assignment or a witness, the verifier will\naccept him with probability 1.",
    "start": "4426980",
    "end": "4433280"
  },
  {
    "text": "And if he's honest, he does\neverything like he should, and the soundness,\nif he tries to cheat",
    "start": "4433280",
    "end": "4439489"
  },
  {
    "text": "and gives me an x\nnot in the language, we're going to catch him. He's going to be accepted\nwith probability negligible.",
    "start": "4439490",
    "end": "4447110"
  },
  {
    "text": "OK. So that's the goal. ",
    "start": "4447110",
    "end": "4452310"
  },
  {
    "text": "Any questions before we-- no? OK. So let's do it. So, OK, let's start\nwith completeness,",
    "start": "4452310",
    "end": "4459440"
  },
  {
    "text": "because that's really easy. The focus-- well,\nI can just say, completeness is\nnot worth writing,",
    "start": "4459440",
    "end": "4465050"
  },
  {
    "text": "because it's so trivial. So what do I want? What does completeness say? Completeness says,\nif the prover chooses",
    "start": "4465050",
    "end": "4470150"
  },
  {
    "text": "x that's in the language,\nand he has a witness, he's going to be accepted\nwith probability 1.",
    "start": "4470150",
    "end": "4475685"
  },
  {
    "text": "Why? Why is he going to be accepted? Well, let's see what he does. He chooses a PCP.",
    "start": "4475685",
    "end": "4480719"
  },
  {
    "text": "The PCP, let's say,\nhas completeness 1. That's my assumption. It's soundness negligible\nand completeness 1.",
    "start": "4480720",
    "end": "4489000"
  },
  {
    "text": "OK. I assume that about my PCP. Otherwise, the completeness\nis like the completeness of the PCP. So he chooses the PCP.",
    "start": "4489000",
    "end": "4497600"
  },
  {
    "text": "He hashes it. Now he gets PCP queries\nfrom the verifier.",
    "start": "4497600",
    "end": "4503810"
  },
  {
    "text": "He opens the PCP. Now, these are acceptable\nwith probability 1.",
    "start": "4503810",
    "end": "4510530"
  },
  {
    "text": "Now he generates also Open. These rhos are from Open. Right, so maybe I\nshould write it.",
    "start": "4510530",
    "end": "4515720"
  },
  {
    "text": "I didn't write it. But rho ij is by computing\nOpen and hash key pi ij.",
    "start": "4515720",
    "end": "4524960"
  },
  {
    "text": "That's the-- yeah. That's how he generates rho ij.",
    "start": "4524960",
    "end": "4531290"
  },
  {
    "text": "And what do we know? We know, by completeness\nhere, or correctness, he's",
    "start": "4531290",
    "end": "4536690"
  },
  {
    "text": "accepted with probability 1. So the probability that\nboth the PCP is accepted,",
    "start": "4536690",
    "end": "4545510"
  },
  {
    "text": "the PCP verifier accepts, and\nthe hash verifier accepts, is 1 because both of them is 1.",
    "start": "4545510",
    "end": "4551750"
  },
  {
    "text": "I took perfect completeness\nfor both of them, so that's all we do.",
    "start": "4551750",
    "end": "4557680"
  },
  {
    "text": "So this is just pretty trivial.  Yeah? Questions?",
    "start": "4557680",
    "end": "4563610"
  },
  {
    "text": " Are you guys OK moving\nto the soundness?",
    "start": "4563610",
    "end": "4569190"
  },
  {
    "text": "That's kind of the\ninteresting part. OK. So how about soundness? ",
    "start": "4569190",
    "end": "4581179"
  },
  {
    "text": "OK, so what's the idea? The idea for soundness\nis the following. I want to say, so suppose there\nexists a cheating prover that",
    "start": "4581180",
    "end": "4589909"
  },
  {
    "text": "chooses x not in the language,\nOK, and manages to cheat. So let's suppose and let's\ntry to break the collision",
    "start": "4589910",
    "end": "4596690"
  },
  {
    "text": "resistance. OK. So suppose there exists\nt time whatever--",
    "start": "4596690",
    "end": "4609959"
  },
  {
    "text": "so, OK, we assume this is with T\nsoundness, or security, and CR,",
    "start": "4609959",
    "end": "4620960"
  },
  {
    "text": "collision resistance. That's my assumption. Now, I want to argue,\nif I assume that",
    "start": "4620960",
    "end": "4627300"
  },
  {
    "text": "the collision-resistant\nis T secure-- namely, even someone in\ntime poly T cannot cheat--",
    "start": "4627300",
    "end": "4635380"
  },
  {
    "text": "then I want to argue,\nsuppose there exists a-- oh.",
    "start": "4635380",
    "end": "4640560"
  },
  {
    "text": "Sorry. We're going to-- OK. We're going to get\nback to this, OK,",
    "start": "4640560",
    "end": "4646849"
  },
  {
    "text": "what exactly this is, and\nwe'll see that it actually needs to be quite big. But we'll see that.",
    "start": "4646850",
    "end": "4651890"
  },
  {
    "text": "Suppose there exists a poly-T\ncheating prover P star,",
    "start": "4651890",
    "end": "4660730"
  },
  {
    "text": "that cheats, namely that--",
    "start": "4660730",
    "end": "4665800"
  },
  {
    "text": "and there exists, like,\nfor every lambda--",
    "start": "4665800",
    "end": "4670900"
  },
  {
    "text": "or there exists a bunch of x\nlambda not in the language.",
    "start": "4670900",
    "end": "4681360"
  },
  {
    "text": "And there exists a\nnon-negligible epsilon such",
    "start": "4681360",
    "end": "4693550"
  },
  {
    "text": "that the prover succeeds\nwith that probability. The probability that P star\ntalking to verifier on input x,",
    "start": "4693550",
    "end": "4702350"
  },
  {
    "text": "the verifier accepts\nhim, is at least epsilon,",
    "start": "4702350",
    "end": "4707380"
  },
  {
    "text": "such that for every lambda-- ",
    "start": "4707380",
    "end": "4714490"
  },
  {
    "text": "to be precise, this\nis x of lambda. And they get lambda.",
    "start": "4714490",
    "end": "4720849"
  },
  {
    "text": "OK, so suppose a cheating\nprover, for any lambda, he chooses some x of\nlambda and P star,",
    "start": "4720850",
    "end": "4729540"
  },
  {
    "text": "and V accepts him, even though\nx lambda is not in the language. OK.",
    "start": "4729540",
    "end": "4735889"
  },
  {
    "text": "One, my only assumption is\nthat x lambda is smaller than 2",
    "start": "4735890",
    "end": "4741230"
  },
  {
    "text": "to the lambda. So I choose my\nsecurity parameter so that the\n[INAUDIBLE] number is bigger than log the size of x.",
    "start": "4741230",
    "end": "4751190"
  },
  {
    "text": "OK. Then-- actually, it's not\neven needed for soundness.",
    "start": "4751190",
    "end": "4758160"
  },
  {
    "text": "This actually was\nneeded for completeness, because we only had\ncompleteness for these x's.",
    "start": "4758160",
    "end": "4766280"
  },
  {
    "text": "For soundness, actually,\nit doesn't really matter. OK. So let's see. What do I want to do?",
    "start": "4766280",
    "end": "4771390"
  },
  {
    "text": "I'm saying suppose there's--\nbecause this is a cheating prover, and this cheating\nprover convinces.",
    "start": "4771390",
    "end": "4777145"
  },
  {
    "text": "OK. Now, let's see, what did\nthis cheating prover do? He committed to a P kind of--",
    "start": "4777145",
    "end": "4782280"
  },
  {
    "text": "he hashed a PCP. Now, I don't know what he did. He's a cheater. But he gave me a hash of\nsomething, should be a PCP.",
    "start": "4782280",
    "end": "4791480"
  },
  {
    "text": "And then he opens this PCP. So what do I want to do?",
    "start": "4791480",
    "end": "4797380"
  },
  {
    "text": "I'm going to-- I want to argue I\ncan find a collision. Why can I find a collision?",
    "start": "4797380",
    "end": "4802562"
  },
  {
    "text": "What is the idea? The idea is the following. I'm going to run\nthis cheating prover.",
    "start": "4802562",
    "end": "4808660"
  },
  {
    "text": "I'm going to ask the cheating\nprover, OK, here's a hash key, give me a v. Then I'm\ngoing to run him many,",
    "start": "4808660",
    "end": "4818380"
  },
  {
    "text": "many, many times on\nmany PCP verifiers. I'm going to tell him,\nOK, you know what, here's i1 to il from the PCP verifier.",
    "start": "4818380",
    "end": "4824530"
  },
  {
    "text": "Give me openings. Again, here's i1 up to il. Give me openings. Again, give him the--",
    "start": "4824530",
    "end": "4829800"
  },
  {
    "text": "I'm going to kind of\nrewind him and try to give him tons of kind\nof messages, i1 up to il.",
    "start": "4829800",
    "end": "4836142"
  },
  {
    "text": "So I'm going to\nkind of rewind him. OK. So again, what do I want to do? ",
    "start": "4836142",
    "end": "4842250"
  },
  {
    "text": "Given a hash key,\nOK, given a hash key, I want to find collisions\nfor this hash key. How do I find collisions\nfor this hash key?",
    "start": "4842250",
    "end": "4849010"
  },
  {
    "text": "I'm going to give this\nprover the hash key. He gives me a value v. Then I'm going to\ntell the prover,",
    "start": "4849010",
    "end": "4856679"
  },
  {
    "text": "I'm going to choose a random r. I'm going to tell him,\nopen these locations.",
    "start": "4856680",
    "end": "4861970"
  },
  {
    "text": "He opens. Good. Now I'm saying, OK, OK, OK. Actually, let's rewind him. Forget that I sent him these.",
    "start": "4861970",
    "end": "4868420"
  },
  {
    "text": "Let me give him\nr2, different r's-- Open. OK. Forget-- r3--",
    "start": "4868420",
    "end": "4875150"
  },
  {
    "text": "I'm going to run this\nstep tons of times-- r1, r2, r3, r4, ba-ba,\nba-ba, a lot of them.",
    "start": "4875150",
    "end": "4882550"
  },
  {
    "text": "And I'm going to have a\nlot of openings from him. I'm going to run it\nso much that I'm just",
    "start": "4882550",
    "end": "4888200"
  },
  {
    "text": "going to have tons of opening. Like, I'm going to run in more\nthan, like, poly 1 over epsilon and more than poly\n1 over epsilon in n.",
    "start": "4888200",
    "end": "4896250"
  },
  {
    "text": "So the point is I'm\ngoing to run it much more than-- like, the\nsize of the PCP times",
    "start": "4896250",
    "end": "4903540"
  },
  {
    "text": "1 over epsilon, because\nit's some power to some-- to the third, whatever.",
    "start": "4903540",
    "end": "4909172"
  },
  {
    "text": "that will take a lot of time. Now, what's the idea? The idea is the following. ",
    "start": "4909172",
    "end": "4917370"
  },
  {
    "text": "If there are no collisions,\nso if there-- look, I'm going to run. Now, if at any point,\nevery time that he",
    "start": "4917370",
    "end": "4922740"
  },
  {
    "text": "gave me an opening\nthat didn't work-- it's 0, it didn't work-- OK, so I'm going\nto throw it out.",
    "start": "4922740",
    "end": "4928080"
  },
  {
    "text": "OK, look, there's-- he only\nsucceeds in probability epsilon. So all the times that\nhe didn't succeed-- OK, well, failure.",
    "start": "4928080",
    "end": "4934870"
  },
  {
    "text": "But 1 over epsilon's\nthe time he succeeded. And in all these times, in\nall these 1 over epsilon--",
    "start": "4934870",
    "end": "4940400"
  },
  {
    "text": "sorry, epsilon is the\ntime he succeeded. In all these epsilon times,\nI got a lot of good openings.",
    "start": "4940400",
    "end": "4947690"
  },
  {
    "text": "Now let's look at all\nthese openings that I got. If somewhere there's a\ncollision, I found him.",
    "start": "4947690",
    "end": "4955199"
  },
  {
    "text": "I found a collision,\nso I'm happy. If nowhere there's a\ncollision, then essentially I",
    "start": "4955200",
    "end": "4963030"
  },
  {
    "text": "found a PCP from him. I completely constructed,\nlike, maybe not the entire PCP, but a lot of it.",
    "start": "4963030",
    "end": "4968530"
  },
  {
    "text": "And the rest, I'm\ngoing to put zeros. I say, you know what, OK,\nthese are identically zeros. But the argument is that\nif there were no collision,",
    "start": "4968530",
    "end": "4975340"
  },
  {
    "text": "I get a PCP that's accepted\nwith probability at least poly in epsilon, which\nis non-negligible.",
    "start": "4975340",
    "end": "4983060"
  },
  {
    "text": "So that's the\nhigh-level idea, but let me say everything\nI said now, slowly.",
    "start": "4983060",
    "end": "4988730"
  },
  {
    "text": "OK. So suppose I have a\ncheating prover that",
    "start": "4988730",
    "end": "4995740"
  },
  {
    "text": "succeeds in convincing\nfor x not in the language. I'm going to construct-- I'm going to find a collision\nto the hash function.",
    "start": "4995740",
    "end": "5002500"
  },
  {
    "text": "So we're going to\nconstruct adversary A that",
    "start": "5002500",
    "end": "5010880"
  },
  {
    "text": "breaks the collision\nresistance property.",
    "start": "5010880",
    "end": "5021280"
  },
  {
    "text": "OK, how do I break the\ncollision resistance property? Here's the idea. So, A, OK, so given, so he's\ngiven a random hash key,",
    "start": "5021280",
    "end": "5034340"
  },
  {
    "text": "and his goal is to\nfind collisions. How does he find collisions? What does he do?",
    "start": "5034340",
    "end": "5040310"
  },
  {
    "text": "He gives-- so\nhere's what A does. First compute v, which\nis P star and hash key.",
    "start": "5040310",
    "end": "5053930"
  },
  {
    "text": "That's the first thing. I've got a v. Then I do\nthe following, many times.",
    "start": "5053930",
    "end": "5060690"
  },
  {
    "text": "So for i goes from 1 up to\npoly in n and 1 over epsilon--",
    "start": "5060690",
    "end": "5071310"
  },
  {
    "text": "so, many times-- what I do\nis I run, like, What P star,",
    "start": "5071310",
    "end": "5083560"
  },
  {
    "text": "given hk-- and he gave v-- would run on input ri,\nri corresponding to--",
    "start": "5083560",
    "end": "5093710"
  },
  {
    "text": "OK, let me call this j-- j corresponding to\nkind of i1 up to il.",
    "start": "5093710",
    "end": "5106639"
  },
  {
    "text": "I just didn't want confuse\nthis i with these i's. OK, so I'm going\nto run many times.",
    "start": "5106640",
    "end": "5112940"
  },
  {
    "text": "I'm going to choose many r's. Oh, I didn't say-- sorry.",
    "start": "5112940",
    "end": "5118210"
  },
  {
    "text": "Sorry, for i goes to\n1, choose a random rj.",
    "start": "5118210",
    "end": "5124940"
  },
  {
    "text": "So for j, go from 1, 2, up to\npoly in n and 1 over epsilon.",
    "start": "5124940",
    "end": "5130580"
  },
  {
    "text": "I choose a random rj. ",
    "start": "5130580",
    "end": "5135970"
  },
  {
    "text": "How much random bits? Like the PCP verifier, I'm\ngoing to behave like the--",
    "start": "5135970",
    "end": "5142180"
  },
  {
    "text": "I'm going to give him the\nrandomness of the PCP verifier corresponding to i1\nup to il, and I'm",
    "start": "5142180",
    "end": "5149180"
  },
  {
    "text": "going to compute the\nhis answers, which is pi i1 up to pi. These may be malicious answers.",
    "start": "5149180",
    "end": "5155060"
  },
  {
    "text": "I denoted by pi, but\nof course, it can-- I mean, it's not necessarily\ncorresponding to a nice PCP. He's malicious and opening.",
    "start": "5155060",
    "end": "5160420"
  },
  {
    "text": " OK, so this is how\nI find collisions.",
    "start": "5160420",
    "end": "5167280"
  },
  {
    "text": "I get a hash key. I give it to the cheating\nprover to get a value.",
    "start": "5167280",
    "end": "5173820"
  },
  {
    "text": "Then for m times, for\nj goes from 1 to m--",
    "start": "5173820",
    "end": "5182099"
  },
  {
    "text": "m is going to be poly in\nn and 1 over epsilon-- what do I do? I choose randomness\nfor the PCP verifier,",
    "start": "5182100",
    "end": "5190219"
  },
  {
    "text": "and I tell the prover,\nWhat are your answers for this randomness,\nwith the same v? I didn't change the v. OK.",
    "start": "5190220",
    "end": "5197295"
  },
  {
    "text": "So he gave me a v in\nthe second message, and then I kind of run the third\nmessage with him many, many,",
    "start": "5197295",
    "end": "5204910"
  },
  {
    "text": "many times, n times, and\nexpect to see answers.",
    "start": "5204910",
    "end": "5211427"
  },
  {
    "text": "OK. Now what do I do? Those for which the rho\ndoesn't work, those for which",
    "start": "5211427",
    "end": "5219420"
  },
  {
    "text": "rho doesn't accept,\nit has a bad-- the Verify doesn't-- this\ndoesn't accept, I throw out,",
    "start": "5219420",
    "end": "5225563"
  },
  {
    "text": "then it's meaningless. He could put whatever he wants. I throw it out. But that's only epsilon\nfraction of them,",
    "start": "5225563",
    "end": "5231349"
  },
  {
    "text": "because it turns\nout the prover, I assume the prover is accepted\nwith probability epsilon. So epsilon, I throw out.",
    "start": "5231350",
    "end": "5237405"
  },
  {
    "text": "OK, but I chose much\nmore than 1 over-- OK, this only affects--",
    "start": "5237405",
    "end": "5242420"
  },
  {
    "text": "you know. So except for these\nepsilon, the rest are good. Yeah? Sorry.",
    "start": "5242420",
    "end": "5247665"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]\nthrew out 1 minus epsilon. YAEL KALAI: I throw out-- AUDIENCE: [INAUDIBLE]. YAEL KALAI: As I said that,\nI-- yeah, I throw out-- I'm left with epsilon.",
    "start": "5247665",
    "end": "5253000"
  },
  {
    "text": "OK, I throw out 1 minus epsilon. I'm left with epsilon. But epsilon is good enough,\nbecause I chose more than poly 1",
    "start": "5253000",
    "end": "5259150"
  },
  {
    "text": "over epsilon. That's why I have\nhere 1 over epsilon, because epsilon are\nbad, which is why. OK, so I still have a lot left.",
    "start": "5259150",
    "end": "5266449"
  },
  {
    "text": "OK, so now what do I do\nwith the ones I have left? So I want to argue--",
    "start": "5266450",
    "end": "5272530"
  },
  {
    "text": "so here's the claim. The claim is that-- ",
    "start": "5272530",
    "end": "5280750"
  },
  {
    "text": "let me write it here. So the claim is that I should\nbe able to find collisions. So the algorithm,\nthe algorithm A,",
    "start": "5280750",
    "end": "5287740"
  },
  {
    "text": "what it does, the\nway it breaks-- and so find output, a\ncollision, if one exists--",
    "start": "5287740",
    "end": "5299450"
  },
  {
    "text": "I'll write it here. Why am I-- output, so 3,\noutput collision if one exists.",
    "start": "5299450",
    "end": "5311680"
  },
  {
    "text": " That's it. So what do I mean,\nif one exists?",
    "start": "5311680",
    "end": "5318720"
  },
  {
    "text": "Many of the i's here-- I asked many times, right,\nbecause I did poly in n--",
    "start": "5318720",
    "end": "5327145"
  },
  {
    "text": "n meaning kind of the witness\nlength, yeah, more than-- think of the witness length\nto the power of 1/3 divided",
    "start": "5327145",
    "end": "5333760"
  },
  {
    "text": "by epsilon. The size of the PCP\ndivided by epsilon to the third, that's how\nyou should think about it,",
    "start": "5333760",
    "end": "5340670"
  },
  {
    "text": "or times, like,\nsecurity parameter. OK, so now what's the point? The point is I saw the same\ni many, many times because I",
    "start": "5340670",
    "end": "5350260"
  },
  {
    "text": "asked many, many queries. Now, I want to argue that if--",
    "start": "5350260",
    "end": "5355989"
  },
  {
    "text": "so there's two options. Either every time\nI ask for an i, if he gave me a valid opening,\nit's for the same one,",
    "start": "5355990",
    "end": "5364940"
  },
  {
    "text": "or one of the i's, he\ngave me valid openings, one for 0 and one for 1. If that's the case, I won.",
    "start": "5364940",
    "end": "5371360"
  },
  {
    "text": "I found a collision. And then I broke\nthe hash function. So if you believe you cannot\nbreak a hash function,",
    "start": "5371360",
    "end": "5378270"
  },
  {
    "text": "then you cannot break. Then the scheme is\nsecure, which is kind of what we're trying to do.",
    "start": "5378270",
    "end": "5383698"
  },
  {
    "text": "But now you can say, but\nmaybe you didn't find a hash-- maybe you didn't\nfind a collision. Maybe the cheating\nprover, whenever",
    "start": "5383698",
    "end": "5392320"
  },
  {
    "text": "he answers, when he\nanswers correctly, it's always with the same--",
    "start": "5392320",
    "end": "5397720"
  },
  {
    "text": "like, for every i, if he\nanswers correctly, it's with the same pi i.",
    "start": "5397720",
    "end": "5403220"
  },
  {
    "text": "He never answers correctly with\npi i being 0 or pi i being 1.",
    "start": "5403220",
    "end": "5408460"
  },
  {
    "text": "Then what happened? I take all the things\nthat he asked me,",
    "start": "5408460",
    "end": "5413570"
  },
  {
    "text": "and I pieced together\na PCP from him. OK, so why? I say-- OK, so the question is--",
    "start": "5413570",
    "end": "5420580"
  },
  {
    "text": "suppose I output-- suppose\nthat a collision happens with negligible probability.",
    "start": "5420580",
    "end": "5425690"
  },
  {
    "text": "If it's non-negligible, I won. I'm done. OK. I want to argue that now,\nif not, if a collision--",
    "start": "5425690",
    "end": "5432640"
  },
  {
    "text": "so if a collision occurs--",
    "start": "5432640",
    "end": "5442710"
  },
  {
    "start": "5442710",
    "end": "5449820"
  },
  {
    "text": "AUDIENCE: Two Cs. YAEL KALAI: Thank you-- with\nnegligible probability, then",
    "start": "5449820",
    "end": "5460500"
  },
  {
    "text": "I want to argue I can\ncome up with a PCP, then there exists a pi\nthat I can construct",
    "start": "5460500",
    "end": "5469739"
  },
  {
    "text": "from this adversary\nsuch that V PCP of pi",
    "start": "5469740",
    "end": "5477720"
  },
  {
    "text": "accepts with\nnon-negligible probability.",
    "start": "5477720",
    "end": "5482930"
  },
  {
    "text": " And that's a contradiction,\nbecause I assumed",
    "start": "5482930",
    "end": "5488380"
  },
  {
    "text": "that my pi is sound, with-- I mean, soundness\nholds with probability.",
    "start": "5488380",
    "end": "5494750"
  },
  {
    "text": "You break soundness only\nwith negligible probability. So I'm going to argue that\nif the probability of finding",
    "start": "5494750",
    "end": "5501960"
  },
  {
    "text": "a collision is negligible,\nthen, actually, I can come up with a\nPCP that's accepted",
    "start": "5501960",
    "end": "5508150"
  },
  {
    "text": "with non-negligible probability. But x is not in the\nlanguage, so that breaks my--",
    "start": "5508150",
    "end": "5513160"
  },
  {
    "text": "that can't happen. Because I know the\nPCP has soundness, negligible, so\nthat can't happen.",
    "start": "5513160",
    "end": "5519110"
  },
  {
    "text": "And therefore, I\nmust have collisions with non-negligible probability,\nand hence broke the collision.",
    "start": "5519110",
    "end": "5525780"
  },
  {
    "text": "So why is it the case that I\ncan find a PCP that's accepted?",
    "start": "5525780",
    "end": "5531719"
  },
  {
    "text": "Because what am I going to do? Remember-- let's think\nI never found collision. It's negligible, so for all\npractical purposes, it's never.",
    "start": "5531720",
    "end": "5539221"
  },
  {
    "text": "OK, let's think of\nthe fact that we never encountered a collision. So then what do we do? I take this PCP.",
    "start": "5539222",
    "end": "5544830"
  },
  {
    "text": "I take this adversary. I run it. Oh, I start piecing up a PCP,\nand I say, oh, pi 1 here,",
    "start": "5544830",
    "end": "5550990"
  },
  {
    "text": "good, pi i1. Every time I ask\nit again, I know it'll give me this answer,\nbecause there's no collisions.",
    "start": "5550990",
    "end": "5557150"
  },
  {
    "text": "And I start slowly piecing\ntogether an entire PCP. ",
    "start": "5557150",
    "end": "5563809"
  },
  {
    "text": "Now, there may be\nsome places of the PCP that he will never\nopen correctly, never.",
    "start": "5563810",
    "end": "5570840"
  },
  {
    "text": "He'll never give\nme a valid opening. So then I can't-- I don't know. I don't know. Moreover, there may be\nsome places of the PCP",
    "start": "5570840",
    "end": "5577910"
  },
  {
    "text": "that somehow this\nverifier never asked. That can also be. So I'm going to write-- all the\nplaces that actually opened,",
    "start": "5577910",
    "end": "5586870"
  },
  {
    "text": "I'm going to write down\nwhatever didn't open. Look, this adversary\ncan always-- let's say it can always take\n1-minus-epsilon fraction of this",
    "start": "5586870",
    "end": "5593739"
  },
  {
    "text": "PCP and never open it, and\nthe rest open correctly, because it's only a step\nof move for the epsilon. So there can be always--",
    "start": "5593740",
    "end": "5600400"
  },
  {
    "text": "not really 1 minus\nepsilon of the PCP because we asked\ntoo many queries, but there can, of course,\nbe some parts of the PCP",
    "start": "5600400",
    "end": "5606340"
  },
  {
    "text": "that he just never answers. And it's OK because\nof this epsilon.",
    "start": "5606340",
    "end": "5611450"
  },
  {
    "text": "OK. So in that part, I'm going to-- wherever I don't want, I'm\ngoing to just put zeros.",
    "start": "5611450",
    "end": "5617890"
  },
  {
    "text": "OK, but this is my PCP.  And I said, now, this is fine.",
    "start": "5617890",
    "end": "5623250"
  },
  {
    "text": "I'm going to call this pi. Now you're asking,\nWhy would the verifier",
    "start": "5623250",
    "end": "5628650"
  },
  {
    "text": "accept pi with\nnon-negligible probability? Well, because this\nP star is accepted",
    "start": "5628650",
    "end": "5637130"
  },
  {
    "text": "with probability epsilon. And, well, this--",
    "start": "5637130",
    "end": "5644630"
  },
  {
    "text": "V is going to ask-- OK, so what's the concern? The concern is, well, V\nnow is going to ask, like,",
    "start": "5644630",
    "end": "5651710"
  },
  {
    "text": "places that are 0 here. Right, so the point\nis we're saying-- your concern is--\nlook, P star succeeded.",
    "start": "5651710",
    "end": "5660960"
  },
  {
    "text": "Maybe P star succeeded. But here, if P star succeeded,\nwe have here our pi's, then P star will succeed, too,\nbecause P star answers",
    "start": "5660960",
    "end": "5668610"
  },
  {
    "text": "like this. But you're saying, well, but\nmaybe here there are zeros. Maybe here there are zeros.",
    "start": "5668610",
    "end": "5673810"
  },
  {
    "text": "But why are there zeros? Let's remember, why\ndid I put zeros here? Because P star failed on them.",
    "start": "5673810",
    "end": "5679420"
  },
  {
    "text": "That's why there\nare zeros there. I asked this place many,\nmany times, and every time, P star said no. So he won't succeed on this.",
    "start": "5679420",
    "end": "5686180"
  },
  {
    "text": "Or there's also another\noption, that V PCP never asks that question,\nin which case he still won't\nask that question.",
    "start": "5686180",
    "end": "5692210"
  },
  {
    "text": " So again, the claim\nis that this PCP",
    "start": "5692210",
    "end": "5698530"
  },
  {
    "text": "will be accepted with\nprobability close to epsilon, because the\nprobability that we will hit",
    "start": "5698530",
    "end": "5705639"
  },
  {
    "text": "locations where we\nfail and he succeeds",
    "start": "5705640",
    "end": "5711420"
  },
  {
    "text": "is very, very, very small. So whenever we fail,\nhe will fail, too, with very high probability,\nbecause if he succeeds there,",
    "start": "5711420",
    "end": "5718680"
  },
  {
    "text": "we would have succeeded. We asked so many\nquestions, we would finally get the right answer. That's the high-level idea.",
    "start": "5718680",
    "end": "5725880"
  },
  {
    "text": "OK. I don't want to go\ninto more details. There's a link, in the\nwebsite, exactly on the proof.",
    "start": "5725880",
    "end": "5732120"
  },
  {
    "text": "But there's two reasons I don't\nwant to go into more detail-- first, because it's tedious,\nso if you're interested,",
    "start": "5732120",
    "end": "5739110"
  },
  {
    "text": "just look at the paper. But also, this is\nnot the right proof.",
    "start": "5739110",
    "end": "5746570"
  },
  {
    "text": "This is not the right proof. And why is it not\nthe right proof? Because, note, I\ncheated you, actually.",
    "start": "5746570",
    "end": "5752440"
  },
  {
    "text": "I actually lied. I promised you that\nI broke soundness, but I didn't actually.",
    "start": "5752440",
    "end": "5758640"
  },
  {
    "text": "There's a very minor--  I don't know if you'd\ncall it \"bug,\" but I lied.",
    "start": "5758640",
    "end": "5766860"
  },
  {
    "text": "And this doesn't quite do-- it doesn't quite break the\ncollision resistance with my--",
    "start": "5766860",
    "end": "5776190"
  },
  {
    "text": "OK, when I say A breaks\nthe collision resistance, I need to say A breaks--",
    "start": "5776190",
    "end": "5783090"
  },
  {
    "text": "poly-T-lambda adversary\nthat breaks-- right, I said,",
    "start": "5783090",
    "end": "5788969"
  },
  {
    "text": "I assume that you cannot break\nthe collisions in time T lambda.",
    "start": "5788970",
    "end": "5795170"
  },
  {
    "text": "So I said let's just say\nthere's a T lambda times P star, and I'm going to break the--",
    "start": "5795170",
    "end": "5803810"
  },
  {
    "text": "I'm going to find the collision\nin time poly-T lambda. That's what gives\nme a contradiction.",
    "start": "5803810",
    "end": "5809650"
  },
  {
    "text": "Right, I argue, my assumption\nis that there exists collisions in hash that cannot be broken,\ncollisions cannot be found",
    "start": "5809650",
    "end": "5816429"
  },
  {
    "text": "in time T. To break\nthat, I need to say, if there is a cheating prover,\nthen I can break the collision",
    "start": "5816430",
    "end": "5824670"
  },
  {
    "text": "resistance in time poly T. Now, let's look at the\nruntime of this adversary.",
    "start": "5824670",
    "end": "5829980"
  },
  {
    "text": "The P times of time\npoly T. That's OK. But what does my adversary do?",
    "start": "5829980",
    "end": "5836880"
  },
  {
    "text": "My adversary, he tries to\ngenerate an entire PCP.",
    "start": "5836880",
    "end": "5843199"
  },
  {
    "text": "And then he says, if I\nsucceeded, I can succeed, and therefore, I\nmust be collision. But to generate\nan entire PCP, he",
    "start": "5843200",
    "end": "5849830"
  },
  {
    "text": "needs to run in time poly in n.  What if T of lambda\nis smaller than n?",
    "start": "5849830",
    "end": "5858610"
  },
  {
    "text": "Now, you can say, eh,\ncome on, T of lambda",
    "start": "5858610",
    "end": "5863788"
  },
  {
    "text": "must be bigger than an n. Otherwise, this kind of-- there's different-- I\ndon't like this definition,",
    "start": "5863788",
    "end": "5869240"
  },
  {
    "text": "because we shouldn't\nallow the cheating prover to run in time poly n. If you don't, something's\nwrong with the definition.",
    "start": "5869240",
    "end": "5875699"
  },
  {
    "text": "I don't know, maybe\nyes, maybe no. I have no definition that\nsays time T of lambda.",
    "start": "5875700",
    "end": "5882630"
  },
  {
    "text": "Maybe you want T of\nlambda be smaller than n because the application\nmakes sense, because you use it in a way that\nactually the prover will never",
    "start": "5882630",
    "end": "5889045"
  },
  {
    "text": "run in time n. So I have now some T of lambda.",
    "start": "5889045",
    "end": "5895510"
  },
  {
    "text": "How it connects to N,\nI actually don't know. And I want to ensure that\nI can break the adversary--",
    "start": "5895510",
    "end": "5903239"
  },
  {
    "text": "I can find collision\ntime T to the lambda. But actually, I run piece\ntime which is in time T",
    "start": "5903240",
    "end": "5908867"
  },
  {
    "text": "to the lambda. That's fine. But I run it n times. 1 over epsilon is fine,\nbecause epsilon is like--",
    "start": "5908867",
    "end": "5916290"
  },
  {
    "text": "epsilon in lambda,\nor T to the lambda-- OK, it's 1 over poly\nT to the lambda. Fine.",
    "start": "5916290",
    "end": "5921600"
  },
  {
    "text": "That's good, T to the lambda-- T of lambda, sorry. But this n, n can be\nbigger than T of lambda.",
    "start": "5921600",
    "end": "5928670"
  },
  {
    "text": " So really, this works if-- this\ndefinition is good if, only if T",
    "start": "5928670",
    "end": "5941679"
  },
  {
    "text": "of lambda is bigger than n. So this is a good proof if-- ",
    "start": "5941680",
    "end": "5960240"
  },
  {
    "text": "and this has kind of-- it's\nkind of bothered cryptographers, because even though it makes\nsense to assume that T of lambda",
    "start": "5960240",
    "end": "5965700"
  },
  {
    "text": "is bigger than n, it makes sense\nto let the cheating prover run in time n, it's annoying\nthat we need to do that.",
    "start": "5965700",
    "end": "5976530"
  },
  {
    "text": "So I think we should take a\nbreak, a five-minute break. After the break, I'll tell you\njust a very high-level idea.",
    "start": "5976530",
    "end": "5984280"
  },
  {
    "text": "There's a beautiful paper\nthat came in 2002 by Barak and Goldreich, that they\nshowed how to get around it,",
    "start": "5984280",
    "end": "5991060"
  },
  {
    "text": "how to do it for any t. They get around-- they actually\ndon't construct an entire PCP. They do what I think is more\nclever and more beautiful,",
    "start": "5991060",
    "end": "6000140"
  },
  {
    "text": "kind of what I think of as\nthe right proof for this. And we'll see that\nafter the break,",
    "start": "6000140",
    "end": "6006600"
  },
  {
    "text": "and then we'll do\nthe construction of the collision-resistant. But there was questions before. Yeah? AUDIENCE: Is the\nrewinding necessary",
    "start": "6006600",
    "end": "6012949"
  },
  {
    "text": "so you get lower success\nprobability but still polynomial [INAUDIBLE]? YAEL KALAI: Great question.",
    "start": "6012950",
    "end": "6019710"
  },
  {
    "text": "The rewinding for--\nOK, so the question is, Is the rewinding necessary? And it's a great question.",
    "start": "6019710",
    "end": "6026190"
  },
  {
    "text": "The answer is, for all I know,\nyes, the rewinding is necessary. This question was very\nimportant also for post-quantum,",
    "start": "6026190",
    "end": "6034890"
  },
  {
    "text": "because today, we're worried\nabout quantum computers. And if the cheating prover\nis a quantum device,",
    "start": "6034890",
    "end": "6041770"
  },
  {
    "text": "you can't rewind him, because\nonce you measure a quantum state, it collapses. Eh. And so proving post-quantum\nsecurity of this protocol,",
    "start": "6041770",
    "end": "6049720"
  },
  {
    "text": "it was-- actually, it's known to\nbe post-quantum secure. But it was a lot\nof work because it",
    "start": "6049720",
    "end": "6054750"
  },
  {
    "text": "was work that required\nto kind of rewind the cheating prover\nin the quantum-- to rewind the quantum cheating\nprover, and, Why can you rewind?",
    "start": "6054750",
    "end": "6062297"
  },
  {
    "text": "So they showed you\ncan actually do it. But just to answer your\nquestion, Do you need to rewind? yes, kind of we don't\nhave a straight-line proof",
    "start": "6062297",
    "end": "6070320"
  },
  {
    "text": "of soundness for this protocol. AUDIENCE: And is it because\nthe witness [INAUDIBLE]?",
    "start": "6070320",
    "end": "6077400"
  },
  {
    "text": "YAEL KALAI: You know, so it's--\nthe other proof I'll show you after the break doesn't\nquite construct the PCP.",
    "start": "6077400",
    "end": "6082980"
  },
  {
    "text": "But in order to\nfind collisions, we need to run them at least twice. I run them and then--\nbecause how am I",
    "start": "6082980",
    "end": "6088340"
  },
  {
    "text": "going to find collision? I give him queries. He's going to give me answers. How can I find\ncollision from that?",
    "start": "6088340",
    "end": "6093650"
  },
  {
    "text": "But if I run him once,\nand I run him again with-- the idea is I'm\ngoing to run him-- I'm going to choose,\nlike, a random query i.",
    "start": "6093650",
    "end": "6099543"
  },
  {
    "text": "I'm once going to run\nhim i with some queries, and then I'm going to run\nhim i with other queries.",
    "start": "6099543",
    "end": "6104850"
  },
  {
    "text": "And the only way you can\ncheat is if you're not always consistent.",
    "start": "6104850",
    "end": "6109889"
  },
  {
    "text": "But at least, I need\nto remind you twice.  So that's the-- any\nother questions?",
    "start": "6109890",
    "end": "6121170"
  },
  {
    "text": "Yeah? AUDIENCE: Could the\nright group [INAUDIBLE] query if we had a concrete\nhash function instead",
    "start": "6121170",
    "end": "6127500"
  },
  {
    "text": "of this abstract notion? YAEL KALAI: No, I\ndon't think the-- ",
    "start": "6127500",
    "end": "6133800"
  },
  {
    "text": "actually, when you look\ninside the hash function, it just becomes messy. I think actually abstracting\nout the hash functions,",
    "start": "6133800",
    "end": "6141000"
  },
  {
    "text": "and just thinking what\nproperty it gives you, makes the proof cleaner.",
    "start": "6141000",
    "end": "6146040"
  },
  {
    "text": "Kind of to put\nboxes around things and just modularize\nkind of what you need, it actually helps\nthe understanding",
    "start": "6146040",
    "end": "6153210"
  },
  {
    "text": "and simplifies the proof. Yeah, I think the\nproblem with this proof",
    "start": "6153210",
    "end": "6159809"
  },
  {
    "text": "is that it requires\nconstructing an entire PCP, and sometimes you're\nsaying, Why do I need to construct an entire PCP?",
    "start": "6159810",
    "end": "6165690"
  },
  {
    "text": "So the other proof kind\nof shows that you actually don't need to do that. And that's why\nthe prover doesn't need to run time linear in n.",
    "start": "6165690",
    "end": "6171570"
  },
  {
    "text": "It just runs in time\nthat depends on t. ",
    "start": "6171570",
    "end": "6178420"
  },
  {
    "text": "Any other questions\nbefore the break? Yeah? AUDIENCE: Just to\nclarify, n here is the size of the PCP,\nnot the [INAUDIBLE].",
    "start": "6178420",
    "end": "6183910"
  },
  {
    "text": "YAEL KALAI: Yeah, you're right.\nn is the size of the PCP. But I'm thinking here,\nbecause I'm thinking of 3-SAT, I'm thinking the\ninput, the instance,",
    "start": "6183910",
    "end": "6191230"
  },
  {
    "text": "and the witness and the\nPCP are all poly-related. So because I have here a\npolynomial, it doesn't matter.",
    "start": "6191230",
    "end": "6199739"
  },
  {
    "text": "But I do want to say,\nin some settings, you can think of the witness\ncan be much, much smaller",
    "start": "6199740",
    "end": "6208730"
  },
  {
    "text": "than the instance or much,\nmuch bigger than the instance. So for example, take\nnondeterministic time",
    "start": "6208730",
    "end": "6213989"
  },
  {
    "text": "T. x is of size\nn, but the witness is of size T of n, which\ncan be superpolynomial in n.",
    "start": "6213990",
    "end": "6222430"
  },
  {
    "text": "Then this becomes\npolynomial in the witness. The PCP is always--\nor, OK, the PCP",
    "start": "6222430",
    "end": "6228580"
  },
  {
    "text": "is always polynomially related\nto the instance and witness. Now, sometimes the\nwitness is bigger.",
    "start": "6228580",
    "end": "6233660"
  },
  {
    "text": "Sometimes the\ninstance is bigger. And the relation does not need\nto be polynomially related. If they're all\npolynomially related, it doesn't matter here,\nbecause I put a poly.",
    "start": "6233660",
    "end": "6240155"
  },
  {
    "text": "But sometimes the witness\ncan be much, much smaller, like a log clique. The witness is size log\nsquared but the input is n.",
    "start": "6240155",
    "end": "6247960"
  },
  {
    "text": "And sometimes the\ninstance can be small and the witness can be big. So what I mean here is\ninput plus witness length.",
    "start": "6247960",
    "end": "6256510"
  },
  {
    "text": "Here, I just put one of them\nbecause I assume, 3-SAT, they're both the same. So, yeah, but that's a good--\nwhat really I need to put here",
    "start": "6256510",
    "end": "6263230"
  },
  {
    "text": "is PCP length. That's the truth. Yeah. Great. Great point. Fantastic.",
    "start": "6263230",
    "end": "6269500"
  },
  {
    "text": "Are there questions\nbefore we break? OK, let's do a five-minute\nbreak, and then we'll return.",
    "start": "6269500",
    "end": "6275450"
  }
]