[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "7410"
  },
  {
    "text": "offer high quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "7410",
    "end": "13960"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at",
    "start": "13960",
    "end": "19790"
  },
  {
    "text": "ocw.mit.edu.  PROFESSOR: So let's start.",
    "start": "19790",
    "end": "25840"
  },
  {
    "text": "I mean for the first question\nyou can answer what is tuple. You can go to that later.",
    "start": "25840",
    "end": "30869"
  },
  {
    "text": "Can a tuple contain a list?  What do you think?",
    "start": "30870",
    "end": "36730"
  },
  {
    "text": "Can a tuple contain a list? AUDIENCE: Yes. PROFESSOR: Yes, it can. So we'll go through the\nexamples later.",
    "start": "36730",
    "end": "43790"
  },
  {
    "text": "And let's see this\nfirst example.",
    "start": "43790",
    "end": "48890"
  },
  {
    "text": "We have two tuples. The tuple B contains tuple\nA, as well as a list. ",
    "start": "48890",
    "end": "56640"
  },
  {
    "text": "So it can't populate.  Let's bring those lists, too. ",
    "start": "56640",
    "end": "67540"
  },
  {
    "text": "So for the first example we try\nto access the elements 0",
    "start": "67540",
    "end": "74840"
  },
  {
    "text": "and 2 of the tuple A. And\nlet me use minus 1 to",
    "start": "74840",
    "end": "82729"
  },
  {
    "text": "access which element? AUDIENCE: [INAUDIBLE] PROFESSOR: OK.",
    "start": "82730",
    "end": "88079"
  },
  {
    "text": "And 0 is the first element,\nof course. And remember now we\nare using 0, 1. ",
    "start": "88080",
    "end": "97260"
  },
  {
    "text": "OK, what is tuple B? It's a two-dimensional tuple.",
    "start": "97260",
    "end": "102750"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: Yeah, exactly. It has a list and\na tuple inside. So the first element is\na tuple, and the last",
    "start": "102750",
    "end": "110640"
  },
  {
    "text": "element is the list. So now it's sort of like\ntwo-dimensional. But if you look at the first\nelement of it, the MIT word,",
    "start": "110640",
    "end": "119960"
  },
  {
    "text": "that doesn't have\nany dimension. Does it? It's a string.",
    "start": "119960",
    "end": "125320"
  },
  {
    "text": "So you can again access,\nbut not this way. But still you can access. ",
    "start": "125320",
    "end": "132329"
  },
  {
    "text": "And we are using this notation\nto access a portion of the",
    "start": "132330",
    "end": "138360"
  },
  {
    "text": "list, a part of the tuple,\nactually, here. It's called slicing.",
    "start": "138360",
    "end": "143769"
  },
  {
    "text": "So here 0 to 1 gives\nyou which element? ",
    "start": "143770",
    "end": "149760"
  },
  {
    "text": "Just one element right? It's the first element. ",
    "start": "149760",
    "end": "155140"
  },
  {
    "text": "0 to 2 gives you 1 and 2 OK?",
    "start": "155140",
    "end": "160790"
  },
  {
    "text": "This is an interesting\nusage of the slicing. This is used to access\nthe whole tuple.",
    "start": "160790",
    "end": "168694"
  },
  {
    "text": "Now you might wonder\nwhy we need them. We could just-- the handouts are here.",
    "start": "168695",
    "end": "174920"
  },
  {
    "text": "So why we need to copy or why\nwe need to access the list",
    "start": "174920",
    "end": "180099"
  },
  {
    "text": "through the column operator\nlike this? We'll look at that later. It's very essential when\nwe have lists.",
    "start": "180100",
    "end": "189090"
  },
  {
    "text": "For the timing it's OK when\ntuples are immutable. So it doesn't have\na special usage.",
    "start": "189090",
    "end": "195840"
  },
  {
    "text": "But later on we'll\nbe using it. Then if you look at this\npart, this is the most interesting part.",
    "start": "195840",
    "end": "202500"
  },
  {
    "text": "How do iterate through\na tuple?  You use a FOR loop and you call\nlike item in tuple, the",
    "start": "202500",
    "end": "210770"
  },
  {
    "text": "element in tuple. The element is initialized with\nevery element when it",
    "start": "210770",
    "end": "217510"
  },
  {
    "text": "goes through iteration. At every iteration it will\nbe instantiated with the",
    "start": "217510",
    "end": "224380"
  },
  {
    "text": "corresponding element\nin the tuple. But you're using the\nsame name anyway. It's item.",
    "start": "224380",
    "end": "229565"
  },
  {
    "text": " This is equivalent to accessing\nthe tuple like this. ",
    "start": "229565",
    "end": "237760"
  },
  {
    "text": "Going one-by-one in the range\nand accessing their corresponding element\nin the tuple. So this is the simpler\nway to access that.",
    "start": "237760",
    "end": "245630"
  },
  {
    "text": "Do you have any questions\nin that part? ",
    "start": "245630",
    "end": "252940"
  },
  {
    "text": "Yeah? AUDIENCE: For that part, don't,\nusually if you have a range you have to [INAUDIBLE]",
    "start": "252940",
    "end": "259310"
  },
  {
    "text": "name because is not-- PROFESSOR: OK, that's correct.",
    "start": "259310",
    "end": "264530"
  },
  {
    "text": ". OK. Suppose a tuple has 3 elements,\nor for example in",
    "start": "264530",
    "end": "270040"
  },
  {
    "text": "this case tuple A, how many\nelements are in the tuple A? 3 elements. So what would be the\nlength of tuple A?",
    "start": "270040",
    "end": "276265"
  },
  {
    "text": "AUDIENCE: 3. PROFESSOR: 3. But what would be the range? 0, 1, 2, right?",
    "start": "276265",
    "end": "281350"
  },
  {
    "text": "So you have to type 0 to 3. So that's why I put that, OK?",
    "start": "281350",
    "end": "287180"
  },
  {
    "text": "That is 3, OK? PROFESSOR: You. AUDIENCE: So you just say a\nrange like the tuple is, it",
    "start": "287180",
    "end": "294247"
  },
  {
    "text": "seems like the first one-- PROFESSOR: First the 0 if you\ndon't specify it the same way. ",
    "start": "294247",
    "end": "308200"
  },
  {
    "text": "OK. Now let's go through the list. ",
    "start": "308200",
    "end": "318729"
  },
  {
    "text": "So if you go through the\nquestions, what is the difference between a\nlist and a tuple?",
    "start": "318730",
    "end": "324330"
  },
  {
    "text": " What is the difference between\na list and a tuple?",
    "start": "324330",
    "end": "330293"
  },
  {
    "text": "Anyone? Yeah? AUDIENCE: Tuples\nare immutable. PROFESSOR: OK.",
    "start": "330293",
    "end": "335390"
  },
  {
    "text": "Lists are mutable. And because it's mutable it\ntakes special functions to",
    "start": "335390",
    "end": "341190"
  },
  {
    "text": "access the elements,\nadd elements, and modify the list itself.",
    "start": "341190",
    "end": "346220"
  },
  {
    "text": " How would you add an\nelement to a list?",
    "start": "346220",
    "end": "351535"
  },
  {
    "text": " Suppose you have list A. How\nwould you add 3 to this list?",
    "start": "351535",
    "end": "365919"
  },
  {
    "text": " AUDIENCE: [INAUDIBLE]",
    "start": "365920",
    "end": "372472"
  },
  {
    "text": "PROFESSOR: OK. Let's start our print. ",
    "start": "372472",
    "end": "380978"
  },
  {
    "text": "OK. That's good. OK? ",
    "start": "380978",
    "end": "390950"
  },
  {
    "text": "How would you remove\nthe element from the top of the list? Or the last element, how\nwould you remove",
    "start": "390950",
    "end": "396479"
  },
  {
    "text": "this 3 from the list? ",
    "start": "396480",
    "end": "402129"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ",
    "start": "402129",
    "end": "410900"
  },
  {
    "text": "PROFESSOR: This one? Let's see. ",
    "start": "410900",
    "end": "420598"
  },
  {
    "text": "You know how to check\nthe specification of a function, right?",
    "start": "420598",
    "end": "427270"
  },
  {
    "text": "Sorry. ",
    "start": "427270",
    "end": "435620"
  },
  {
    "text": "So it's not the right\nfunction, right? Because it says it removes\nthe first occurrence of a particular value you are parsing\nto that function.",
    "start": "435620",
    "end": "443380"
  },
  {
    "text": "OK, there's another function. It's called list.pop. ",
    "start": "443380",
    "end": "450860"
  },
  {
    "text": "That removes the last inserted\nvalue, so it pops from the top.",
    "start": "450860",
    "end": "457300"
  },
  {
    "text": "So remove can be used to remove\na particular element. So here suppose we\nwant to remove 1.",
    "start": "457300",
    "end": "462889"
  },
  {
    "text": "So we could say list\nA, remove 1. ",
    "start": "462890",
    "end": "470116"
  },
  {
    "text": "OK. So in this example,\nactually, I have commented out this line.",
    "start": "470116",
    "end": "476150"
  },
  {
    "text": "This will be an error\nif I execute. Why? ",
    "start": "476150",
    "end": "484480"
  },
  {
    "text": "Why will it give you an error?  AUDIENCE: [INAUDIBLE]",
    "start": "484480",
    "end": "490480"
  },
  {
    "text": "PROFESSOR: It doesn't exit. Great. So the problem here is we can't\naccess an element in the",
    "start": "490480",
    "end": "497520"
  },
  {
    "text": "list unless we explicitly\nassign something or create something.",
    "start": "497520",
    "end": "503449"
  },
  {
    "text": "But suppose we want to pass\na list of 10 elements to a",
    "start": "503450",
    "end": "508720"
  },
  {
    "text": "program so that it can assign\nvalues on the fly. And it can modify. OK?",
    "start": "508720",
    "end": "514299"
  },
  {
    "text": "So how would you pass an empty\nlist of 10 elements? ",
    "start": "514299",
    "end": "521235"
  },
  {
    "text": "OK. The problem is if you're passing\nsomething like this, you need to know how this list\nshould be instantiated.",
    "start": "521235",
    "end": "530850"
  },
  {
    "text": "So you should know what\nare the initial values of these elements.",
    "start": "530850",
    "end": "537090"
  },
  {
    "text": "Suppose you want to create\na list of ten 0's. Then the easiest way to\ncreate the list is--",
    "start": "537090",
    "end": "543670"
  },
  {
    "start": "543670",
    "end": "549070"
  },
  {
    "text": "So you would create a list\nwith ten elements. But If you don't want to waste\nmemory, or if you don't want",
    "start": "549070",
    "end": "555670"
  },
  {
    "text": "to keep anything particular,\nyou could do something like this. ",
    "start": "555670",
    "end": "564730"
  },
  {
    "text": "Now this will create a\nlist of empty list. And there'll be ten\nsuch empty lists.",
    "start": "564730",
    "end": "572490"
  },
  {
    "text": "OK? And you could pass this list to\na program so that it will assign the elements.",
    "start": "572490",
    "end": "578340"
  },
  {
    "text": " OK? You can iterate to the\nlist the same way.",
    "start": "578340",
    "end": "585900"
  },
  {
    "text": "But lists are interesting. Why? They are mutable. So they can be actually used\nto create interesting",
    "start": "585900",
    "end": "593370"
  },
  {
    "text": "mathematical objects. For example, like matrix. So how would you create\na matrix using lists?",
    "start": "593370",
    "end": "600330"
  },
  {
    "text": " Any ideas? How would you create,\nsay a 2 by 2 matrix?",
    "start": "600330",
    "end": "606610"
  },
  {
    "text": " If you consider this example,\nthis creates a matrix 4 by 2.",
    "start": "606610",
    "end": "617160"
  },
  {
    "text": " So that would be like 4\nrows and 2 columns.",
    "start": "617160",
    "end": "623495"
  },
  {
    "text": " But how can you go and\naccess the inner",
    "start": "623495",
    "end": "631310"
  },
  {
    "text": "element or inner matrix? So if you suppose you want\naccess 2, 3, that is the third",
    "start": "631310",
    "end": "637070"
  },
  {
    "text": "row, then how would\nyou access? ",
    "start": "637070",
    "end": "642870"
  },
  {
    "text": "How would you call M? ",
    "start": "642870",
    "end": "648391"
  },
  {
    "text": "AUDIENCE: M3? PROFESSOR: M3. M3 gives you 2, 3. Suppose you want to access\nthe 3 and the 2, 3.",
    "start": "648391",
    "end": "658190"
  },
  {
    "text": "Then we-- [INTERPOSING VOICES] PROFESSOR: Sorry. AUDIENCE: Why does a 3\ngive you [INAUDIBLE]?",
    "start": "658190",
    "end": "664610"
  },
  {
    "text": "PROFESSOR: Oh, sorry. My bad. ",
    "start": "664610",
    "end": "671440"
  },
  {
    "text": "Yeah. OK. This is computer science,\nnot maths. ",
    "start": "671440",
    "end": "677240"
  },
  {
    "text": "You got it right, why\nit's not 3, it's 2? AUDIENCE: Yeah. I thought you were talking\nabout 3 and 4. PROFESSOR: OK. That's fine.",
    "start": "677240",
    "end": "682430"
  },
  {
    "text": "So I'm asking now how\nwould you access the 3 in the 2, 3 box?",
    "start": "682430",
    "end": "689482"
  },
  {
    "text": "AUDIENCE: So I need to do\nanother parentheses? PROFESSOR: Not a bracket. AUDIENCE: OK. PROFESSOR: OK.",
    "start": "689482",
    "end": "695620"
  },
  {
    "text": "That is all. So you can access matrices\nlike this.",
    "start": "695620",
    "end": "702290"
  },
  {
    "text": " OK. Great.",
    "start": "702290",
    "end": "707764"
  },
  {
    "text": "We are on time. ",
    "start": "707765",
    "end": "719870"
  },
  {
    "text": "So this actually gives you\na summary of functions. Associated functions.",
    "start": "719870",
    "end": "725170"
  },
  {
    "text": "For example the pop I\nexplained earlier. Remove removes a particular\nelement.",
    "start": "725170",
    "end": "730810"
  },
  {
    "text": "Extent, that's interesting. Can you tell me what\nit does here, the",
    "start": "730810",
    "end": "737640"
  },
  {
    "text": "method extent on list? ",
    "start": "737640",
    "end": "756880"
  },
  {
    "text": "What does that method take? ",
    "start": "756880",
    "end": "762030"
  },
  {
    "text": "It takes another list. So which means it's going to\nmerge the list you are passing",
    "start": "762030",
    "end": "769660"
  },
  {
    "text": "with the list you're calling\nthe method on, that is [UNINTELLIGIBLE]. So it's going to combine\nthose lists.",
    "start": "769660",
    "end": "776430"
  },
  {
    "text": "Let's see. ",
    "start": "776430",
    "end": "784440"
  },
  {
    "text": "So this corresponds to this. ",
    "start": "784440",
    "end": "789590"
  },
  {
    "text": "So two lists are combined.  So this method is actually\nuseful, right, because you",
    "start": "789590",
    "end": "796300"
  },
  {
    "text": "don't have to write yourself. Most of things you\ncan easily do. Now the question is, why tuple\ndidn't have these methods?",
    "start": "796300",
    "end": "803965"
  },
  {
    "text": " Why? ",
    "start": "803965",
    "end": "810040"
  },
  {
    "text": "Why we didn't have these\nmethods for tuples? AUDIENCE: [INAUDIBLE] PROFESSOR: They're immutable.",
    "start": "810040",
    "end": "815680"
  },
  {
    "text": "So you can't extent, you\ncan't [UNINTELLIGIBLE]. So even if you extent,\nwhat would happen? It's going to create\na new tuple.",
    "start": "815680",
    "end": "821860"
  },
  {
    "text": "Actually, you can do that. But like this. For example, you have tuple\nA which is 1, 2.",
    "start": "821861",
    "end": "830860"
  },
  {
    "text": "And suppose you have\ntuple B -- 3, 4.",
    "start": "830860",
    "end": "835959"
  },
  {
    "text": "If you want to combine them,\nhow would you do it? ",
    "start": "835960",
    "end": "841440"
  },
  {
    "text": "Tuple A plus tuple B. OK?",
    "start": "841440",
    "end": "847500"
  },
  {
    "text": "That concatenates. This operator is all\nloaded for tuples.",
    "start": "847500",
    "end": "853256"
  },
  {
    "text": "OK? ",
    "start": "853256",
    "end": "860680"
  },
  {
    "text": "So lists are mutable so you can\ndo all of these things. Let's look at a few other\nexamples, too.",
    "start": "860680",
    "end": "866380"
  },
  {
    "start": "866380",
    "end": "891590"
  },
  {
    "text": "OK.  There's an interesting\npart here.",
    "start": "891590",
    "end": "898100"
  },
  {
    "text": "Lists are mutable. That we understand. But how these lists are actually\nstored in the memory,",
    "start": "898100",
    "end": "908970"
  },
  {
    "text": "For example, suppose you\nhave a list lst,",
    "start": "908970",
    "end": "914360"
  },
  {
    "text": "sorry, 0, 1, apple. ",
    "start": "914360",
    "end": "921180"
  },
  {
    "text": "How do you think it's stored\nin the memory? ",
    "start": "921180",
    "end": "927079"
  },
  {
    "text": "So you have 3 elements. But these elements are actually\nnot stored in the list itself.",
    "start": "927080",
    "end": "934570"
  },
  {
    "text": "They actually in the memory. 0, 1, apple. ",
    "start": "934570",
    "end": "940920"
  },
  {
    "text": "But you have the pointers\nto those lists. Sorry, to those elements.",
    "start": "940920",
    "end": "948000"
  },
  {
    "text": "So actually you can modify these\nvalues without changing",
    "start": "948000",
    "end": "953480"
  },
  {
    "text": "the list itself, because the\nlist actually points to this part, the container.",
    "start": "953480",
    "end": "960970"
  },
  {
    "text": "So in this example you have list\nA and B. But the list B",
    "start": "960970",
    "end": "966220"
  },
  {
    "text": "actually contains list A. OK? Since list A is mutable you\ncan go and change it.",
    "start": "966220",
    "end": "975340"
  },
  {
    "text": "So here first you print list A\nand B, but you're going to change list A's 0th element.",
    "start": "975340",
    "end": "981019"
  },
  {
    "text": " After changing the element\nthe list A becomes first.",
    "start": "981020",
    "end": "990290"
  },
  {
    "text": "Its first element\nchanged to 88. OK.",
    "start": "990290",
    "end": "995980"
  },
  {
    "text": " Fine. What do you think the\nlist B would be?",
    "start": "995980",
    "end": "1002420"
  },
  {
    "start": "1002420",
    "end": "1008251"
  },
  {
    "text": "OK, let's print. ",
    "start": "1008252",
    "end": "1015270"
  },
  {
    "text": "It contains the 88, right,\nthe modified value. Why? ",
    "start": "1015270",
    "end": "1022540"
  },
  {
    "text": "Because list B actually had a\npointer to list A. Which again",
    "start": "1022540",
    "end": "1032280"
  },
  {
    "text": "had pointers to other\nelements. And we modified this\nvalue to 88.",
    "start": "1032280",
    "end": "1038410"
  },
  {
    "text": "So you're still accessing\nlist B. OK? The pointers are not changed.",
    "start": "1038410",
    "end": "1046170"
  },
  {
    "text": "That we can see here, in\nthe second example, the problem of aliasing.",
    "start": "1046170",
    "end": "1051230"
  },
  {
    "text": "So we have list X. And we call\nit by list Y as well.",
    "start": "1051230",
    "end": "1057270"
  },
  {
    "text": "And we are now changing\nthe list Y. Sorry. We are changing the list X. But\nit's going to affect list",
    "start": "1057270",
    "end": "1065850"
  },
  {
    "text": "X as well as list Y. See?",
    "start": "1065850",
    "end": "1071740"
  },
  {
    "text": "Because it's just a reference. The actual object is this.",
    "start": "1071740",
    "end": "1077170"
  },
  {
    "text": "You can call it by two\ndifferent names. It doesn't matter. But the actual object is here. ",
    "start": "1077170",
    "end": "1085149"
  },
  {
    "text": "That's where we need\nthis operator. ",
    "start": "1085150",
    "end": "1090970"
  },
  {
    "text": "So if you just point, OK, for\nexample we had list X, if you just assign list Y to list X,\nit's not going to copy the",
    "start": "1090970",
    "end": "1100000"
  },
  {
    "text": "elements, just going to\ncopy the reference. Which means list X and list Y,\nboth would be pointing to the",
    "start": "1100000",
    "end": "1109250"
  },
  {
    "text": "same object. If you want to copy these\nelements and put in a new one,",
    "start": "1109250",
    "end": "1119370"
  },
  {
    "text": "say, list Z, then we need to\ncopy one-by-one every element.",
    "start": "1119370",
    "end": "1125300"
  },
  {
    "text": "For that we can use\nthis operator. It's called full slicing.",
    "start": "1125300",
    "end": "1130940"
  },
  {
    "text": " It's not going to\nmodify elements. It's going to copy the whole\nlist of elements.",
    "start": "1130940",
    "end": "1138955"
  },
  {
    "start": "1138955",
    "end": "1155360"
  },
  {
    "text": "And in the same line, just\nanother small example that",
    "start": "1155360",
    "end": "1164700"
  },
  {
    "text": "tells you how to cast a\nlist into tuple, and a tuple into list.",
    "start": "1164700",
    "end": "1169890"
  },
  {
    "start": "1169890",
    "end": "1185370"
  },
  {
    "text": "So you had a tuple, one for\napple [UNINTELLIGIBLE] and you cast into list.",
    "start": "1185370",
    "end": "1191170"
  },
  {
    "text": "Now the type is list.  It's a very simple operation.",
    "start": "1191170",
    "end": "1197149"
  },
  {
    "text": "Can you do that yourself? How would you do it if you want\nto write a function to",
    "start": "1197150",
    "end": "1203470"
  },
  {
    "text": "cast, how would you do that? You go through element by\nelement and add it to a tuple.",
    "start": "1203470",
    "end": "1211810"
  },
  {
    "text": "And then concatentae\ntwo tuples. Right?",
    "start": "1211810",
    "end": "1217350"
  },
  {
    "text": "So I guess you can write\nprobably as a homework, try that. Try how to convert a list to\na tuple without explicitly",
    "start": "1217350",
    "end": "1226380"
  },
  {
    "text": "calling the casting function. OK. Similarly you can convert\na tuple back into list.",
    "start": "1226380",
    "end": "1233540"
  },
  {
    "text": " So it's pretty straightforward. And suppose you're getting\nan input from",
    "start": "1233540",
    "end": "1240530"
  },
  {
    "text": "the user as a tuple. then suppose you want\nto make it a list. You don't have to write\nyour function. You can just call this\ncasting operator.",
    "start": "1240530",
    "end": "1248940"
  },
  {
    "text": "So it'll be-- it will save some time. OK.",
    "start": "1248940",
    "end": "1253980"
  },
  {
    "text": "Great. Let's go to our dictionaries\nnow. ",
    "start": "1253980",
    "end": "1265929"
  },
  {
    "text": "So we have a third data\ntype, dictionaries. Oh, you didn't get\nthe second one?",
    "start": "1265930",
    "end": "1271280"
  },
  {
    "start": "1271280",
    "end": "1278490"
  },
  {
    "text": "So we have another data\ntype, dictionaries. And why do we need dictionaries",
    "start": "1278490",
    "end": "1284210"
  },
  {
    "text": "in the first place? Do we need another data type? Can we just get away with\ntuple and list?",
    "start": "1284210",
    "end": "1292320"
  },
  {
    "text": "Yes. Because you can actually make\na dictionary out of lists.",
    "start": "1292320",
    "end": "1298520"
  },
  {
    "text": "And Professor Grimson went\nthrough that in the lecture. If you want, you can come and\nask in the office hours.",
    "start": "1298520",
    "end": "1305960"
  },
  {
    "text": "But first try whether you\ncan do it yourself. But the problem is, actually not\njust the dictionaries, but",
    "start": "1305960",
    "end": "1315519"
  },
  {
    "text": "the high-level data structures\nare actually available in Python as building data\nstructures or as classes.",
    "start": "1315520",
    "end": "1323420"
  },
  {
    "text": "Just because they will have\nthese methods on these data structures implemented.",
    "start": "1323420",
    "end": "1328980"
  },
  {
    "text": "So it would say some\ntime for us. Plus those methods are\nguaranteed to be state of art.",
    "start": "1328980",
    "end": "1335720"
  },
  {
    "text": "For example, if you want to go\nthrough all the lists, then the search function or the\nlookup function that you write",
    "start": "1335720",
    "end": "1343200"
  },
  {
    "text": "may not be that efficient,\nright? But they might use those\nefficient algorithms in the standard implementation.",
    "start": "1343200",
    "end": "1349290"
  },
  {
    "text": "So it's why you should\nalways look for the standard data types.",
    "start": "1349290",
    "end": "1354420"
  },
  {
    "text": "If you can't you can\nwrite yourself one. But it's good to use the\navailable data types so that",
    "start": "1354420",
    "end": "1360510"
  },
  {
    "text": "they would have this efficient\nmethod implemented. OK.",
    "start": "1360510",
    "end": "1365910"
  },
  {
    "text": "So in this dictionary,\nwe have two elements.",
    "start": "1365910",
    "end": "1374310"
  },
  {
    "text": "One is key, one is value. OK? So these keys actually have\na special property.",
    "start": "1374310",
    "end": "1382130"
  },
  {
    "text": "What is that? The keys should be an\nimmutable object.",
    "start": "1382130",
    "end": "1392360"
  },
  {
    "text": "So you can actually have\na tuple as a key. You can have a string as a key,\nbut not a list as a key.",
    "start": "1392360",
    "end": "1400310"
  },
  {
    "text": "So you need an immutable\nobject for the keys. What about the values?",
    "start": "1400310",
    "end": "1407685"
  },
  {
    "text": "They can be anything. Values can be even\na dictionary.",
    "start": "1407685",
    "end": "1413230"
  },
  {
    "text": "It can be a list. But the keys must be mutable. ",
    "start": "1413230",
    "end": "1420159"
  },
  {
    "text": "Do these keys need\nto be unique? ",
    "start": "1420160",
    "end": "1427400"
  },
  {
    "text": "Yes. No? OK.",
    "start": "1427400",
    "end": "1432760"
  },
  {
    "text": "The problem is this.  Dictionaries have the same\ntype, I mean structure.",
    "start": "1432760",
    "end": "1440429"
  },
  {
    "text": " This is a key.",
    "start": "1440430",
    "end": "1448320"
  },
  {
    "text": "And this key points to a\nplace in the memory. Suppose you call it key A. OK?",
    "start": "1448320",
    "end": "1456059"
  },
  {
    "text": "If you assign another value to\nkey A, that will actually replace the content in\nthe memory, right?",
    "start": "1456060",
    "end": "1463890"
  },
  {
    "text": "So that's why keys are going\nto be unique, It's by construction, by the\nconstruction of the dictionary",
    "start": "1463890",
    "end": "1471850"
  },
  {
    "text": "the keys are going\nto be unique. Because if you want to assign\nsomething different, you have",
    "start": "1471850",
    "end": "1477370"
  },
  {
    "text": "to call it by a different key,\ncall it by a different name. Say key B.",
    "start": "1477370",
    "end": "1487240"
  },
  {
    "text": "What about the values.  Do they need to be unique? No, of course.",
    "start": "1487240",
    "end": "1494030"
  },
  {
    "text": "Otherwise no use of key, and no\nuse of dictionaries, right? What is the order of the items\nstored in the dictionary?",
    "start": "1494030",
    "end": "1502010"
  },
  {
    "text": "Can you give a guarantee\nlike in lists? In lists items are stored from\nzero to the left, right?",
    "start": "1502010",
    "end": "1509490"
  },
  {
    "text": "Length minus 1, actually. What about dictionaries? Surely can't guarantee\nthe order, but you",
    "start": "1509490",
    "end": "1516280"
  },
  {
    "text": "can modify the order. OK. So the thing is first, if you\nlook at this example, first we",
    "start": "1516280",
    "end": "1523799"
  },
  {
    "text": "have the staff dictionary. And when I pin the length\nit gives me 3, fine.",
    "start": "1523800",
    "end": "1533040"
  },
  {
    "text": "Then I'm doing three things. First I change the address\nby calling its key.",
    "start": "1533040",
    "end": "1542539"
  },
  {
    "text": "And dictionaries are\nmutable so you can change their values. ",
    "start": "1542540",
    "end": "1548220"
  },
  {
    "text": "Then also we are adding\na new element. Fine. If you wanted a new element you\ncall it by the key that",
    "start": "1548220",
    "end": "1554840"
  },
  {
    "text": "you already assigned. If the key already exists you\nwill just modify the value.",
    "start": "1554840",
    "end": "1560000"
  },
  {
    "text": "Otherwise it will create a new\nkey and add that value. You can also check whether this\nparticular element is in",
    "start": "1560000",
    "end": "1567080"
  },
  {
    "text": "the dictionary. But this must be the key. Whatever you are calling\nhere should be the",
    "start": "1567080",
    "end": "1572659"
  },
  {
    "text": "key, not the value. It won't search for the value. It will search only for the\nkey, [UNINTELLIGIBLE] for that particular key because\nyou access the values",
    "start": "1572660",
    "end": "1579705"
  },
  {
    "text": "through keys.  Again here if it is not\nin the list, actually",
    "start": "1579705",
    "end": "1585919"
  },
  {
    "text": "I'm adding an element-- OK. ",
    "start": "1585920",
    "end": "1595680"
  },
  {
    "text": "OK. To compare in the list, suppose\nI have a list 0, 1, 2.",
    "start": "1595680",
    "end": "1602660"
  },
  {
    "text": " If I want to check whether\n1 is in the",
    "start": "1602660",
    "end": "1608750"
  },
  {
    "text": "list, how would I check?  Do you have to go through\nelement by element?",
    "start": "1608750",
    "end": "1615370"
  },
  {
    "text": "No, there's a shortcut. If 1 in list, right?",
    "start": "1615370",
    "end": "1625340"
  },
  {
    "text": "If I want to check whether 1 is\nnot in the list, if I want to negate this, I would write\nit 1 not in list.",
    "start": "1625340",
    "end": "1636240"
  },
  {
    "text": "We just ignore the words. It's pretty much like English. OK? We just remove the words.",
    "start": "1636240",
    "end": "1642660"
  },
  {
    "text": "OK. In the dictionary we do the\nsame thing through keys.",
    "start": "1642660",
    "end": "1649360"
  },
  {
    "text": "If key A and, OK I'll\ncall it, say, D1.",
    "start": "1649360",
    "end": "1655530"
  },
  {
    "start": "1655530",
    "end": "1661402"
  },
  {
    "text": "OK? And you actually call or you'd\nsearch for the key, not the other way.",
    "start": "1661402",
    "end": "1667510"
  },
  {
    "start": "1667510",
    "end": "1678550"
  },
  {
    "text": "OK. There is an interesting\npart here. If you want to modify\nthe order--",
    "start": "1678550",
    "end": "1684890"
  },
  {
    "text": "actually I tell you that the\norder C earlier, we couldn't guarantee the order, right?",
    "start": "1684890",
    "end": "1691950"
  },
  {
    "text": "It was not the order we typed\nbecause it starts at [UNINTELLIGIBLE]",
    "start": "1691950",
    "end": "1697799"
  },
  {
    "text": "because we added at the\nend actually, right? So actually you can't\nguarantee the order. But we can sort it.",
    "start": "1697800",
    "end": "1705370"
  },
  {
    "text": "But how do you sort it? We call the keys and\nwe sort the keys.",
    "start": "1705370",
    "end": "1712280"
  },
  {
    "text": "Because remember,\nevery values-- if you want to access a\nparticular value, you access",
    "start": "1712280",
    "end": "1718180"
  },
  {
    "text": "it through key. Actually, if you call the\ndictionary, it doesn't know where these values are.",
    "start": "1718180",
    "end": "1724280"
  },
  {
    "text": "Just you have to go to the\nkey to access the value. So if you want to do something\nin the dictionary itself, you",
    "start": "1724280",
    "end": "1730909"
  },
  {
    "text": "can do that only on keys. So if you want to sort\nthe dictionary, you sort it by keys.",
    "start": "1730910",
    "end": "1736520"
  },
  {
    "text": "So you call the keys method\nfor the dictionary-- so it returns the list of\nkeys and you sort them.",
    "start": "1736520",
    "end": "1746450"
  },
  {
    "text": " This is called chaining\nmethods. So I have chained the methods.",
    "start": "1746450",
    "end": "1753159"
  },
  {
    "text": "I would have like two\nmethods, right? I call the keys. This first part actually returns\nto this top key.",
    "start": "1753160",
    "end": "1760900"
  },
  {
    "text": "Then you sort them. Yes? AUDIENCE: It doesn't look like\nthey're in alphabetical order?",
    "start": "1760900",
    "end": "1767080"
  },
  {
    "text": "PROFESSOR: Oh, on this? Sorry. ",
    "start": "1767080",
    "end": "1772600"
  },
  {
    "text": "Let's see. ",
    "start": "1772600",
    "end": "1780669"
  },
  {
    "text": "OK. Let's see. ",
    "start": "1780670",
    "end": "1795550"
  },
  {
    "text": "Ooops. ",
    "start": "1795550",
    "end": "1803370"
  },
  {
    "text": "OK. Now they're sorted.  OK.",
    "start": "1803370",
    "end": "1809190"
  },
  {
    "text": "What was the problem? What was the problem there? Why it wasn't sorted?",
    "start": "1809190",
    "end": "1816030"
  },
  {
    "text": "AUDIENCE: You have to\ndo it in two lines. PROFESSOR: Sorry? AUDIENCE: You have to call up\nthe keys and then sort it in a",
    "start": "1816030",
    "end": "1821802"
  },
  {
    "text": "separate line? PROFESSOR: OK. The problem is in the logic.",
    "start": "1821802",
    "end": "1829830"
  },
  {
    "text": "Actually, when you call this\nfunction, method, you're actually sorting the keys\nreturned by this method.",
    "start": "1829830",
    "end": "1835650"
  },
  {
    "text": "You're not actually going to\nsort of the dictionary itself. You're sorting only the list\nthat was returned, right?",
    "start": "1835650",
    "end": "1844820"
  },
  {
    "text": "The list of keys. Although the dictionary is\nmutable, it wasn't sorted.",
    "start": "1844820",
    "end": "1853200"
  },
  {
    "text": "Do you see the problem? So that's why when they called\nkeys equal to staff.keys I'm",
    "start": "1853200",
    "end": "1859230"
  },
  {
    "text": "getting a list of keys. Then I'm sorting that list.",
    "start": "1859230",
    "end": "1865000"
  },
  {
    "text": "And I'm printing that list. But if you want to go in a\nparticular order, if you want",
    "start": "1865000",
    "end": "1872820"
  },
  {
    "text": "to access the dictionary in a\nparticular order, what could you do is you could do something\nlike keys is equal",
    "start": "1872820",
    "end": "1884380"
  },
  {
    "text": "to staff.keys.  Then you can store keys.",
    "start": "1884380",
    "end": "1889530"
  },
  {
    "text": " Then for k in keys you can go\nand iterate now, right?",
    "start": "1889530",
    "end": "1900880"
  },
  {
    "text": "So you can say print\nk and staff k.",
    "start": "1900880",
    "end": "1907560"
  },
  {
    "text": "OK? So you can do this. But actually, Python provides a\nway to iterate what keys and",
    "start": "1907560",
    "end": "1916770"
  },
  {
    "text": "value pairs.  That you do by calling\nboth elements?",
    "start": "1916770",
    "end": "1927660"
  },
  {
    "text": "All the method items. The items return a list\nof key-value pairs.",
    "start": "1927660",
    "end": "1936040"
  },
  {
    "text": " If you call D1.items you get\na list of key-value pairs.",
    "start": "1936040",
    "end": "1947530"
  },
  {
    "start": "1947530",
    "end": "1955250"
  },
  {
    "text": "You see that? And we are going to iterate\nthrough individual elements.",
    "start": "1955250",
    "end": "1962740"
  },
  {
    "text": "So first we start with this\nand then second this. So that's a simpler way to\naccess every elements in the",
    "start": "1962740",
    "end": "1969559"
  },
  {
    "text": "dictionary. Great. ",
    "start": "1969560",
    "end": "1979384"
  },
  {
    "text": "OK. Now we have an interesting\npart, recursion.",
    "start": "1979384",
    "end": "1984679"
  },
  {
    "start": "1984680",
    "end": "1993780"
  },
  {
    "text": "What's the principle\nbehind recursion? Anyone? ",
    "start": "1993780",
    "end": "2001140"
  },
  {
    "text": "What's the idea of recursion?  Yes? AUDIENCE: The cause itself\nis [INAUDIBLE]",
    "start": "2001140",
    "end": "2008929"
  },
  {
    "text": "base case. And it saves a lot of money. PROFESSOR: Yes.",
    "start": "2008929",
    "end": "2015160"
  },
  {
    "text": "The idea of recursion is, if\nyou have a problem, try to express the problem\nin a simpler",
    "start": "2015160",
    "end": "2021170"
  },
  {
    "text": "version of the same problem. So if you want to find factorial\nn, try to express it",
    "start": "2021170",
    "end": "2027260"
  },
  {
    "text": "in terms of factorial\nn minus 1. So you could keep on doing\nthis till you come to",
    "start": "2027260",
    "end": "2032940"
  },
  {
    "text": "factorial 1 for which you know\nthe explicit answer. Right? So you try to express the\nproblem in its simpler form.",
    "start": "2032940",
    "end": "2042000"
  },
  {
    "text": "It would be useful\nin many cases. Actually, in your next piece\nyou do have the problem.",
    "start": "2042000",
    "end": "2049060"
  },
  {
    "text": "But be mindful. What's -- what makes it possible for\nyou to use the recursion?",
    "start": "2049060",
    "end": "2059000"
  },
  {
    "text": "Only if you can express in terms\nof the simpler version. Otherwise you can't. This is probably quite like the\ninduction you might have",
    "start": "2059000",
    "end": "2066600"
  },
  {
    "text": "studied, mathematical\ninduction. I don't know whether you studied\nit in high school, but it's quite like that.",
    "start": "2066600",
    "end": "2072169"
  },
  {
    "text": "OK. So there are two parts\nin recursion.",
    "start": "2072170",
    "end": "2078388"
  },
  {
    "text": "The first one is\nthe base case.  So for a factorial problem we\ncan express the factorial, say",
    "start": "2078389",
    "end": "2093310"
  },
  {
    "text": "nth factorial, as any n in\nto n minus 1 factorial.",
    "start": "2093310",
    "end": "2101530"
  },
  {
    "text": "OK? So this would be our\nrecursive case.",
    "start": "2101530",
    "end": "2107049"
  },
  {
    "text": "So what is a recursive case? ",
    "start": "2107050",
    "end": "2114880"
  },
  {
    "text": "Suppose we want to define a\nfunction factorial A. OK?",
    "start": "2114880",
    "end": "2123329"
  },
  {
    "text": "So what will be our\nrecursive case? AUDIENCE: A is greater than 0? ",
    "start": "2123330",
    "end": "2129270"
  },
  {
    "text": "PROFESSOR: I'm asking the\nrecursive function. What would be that? AUDIENCE: [INAUDIBLE] ",
    "start": "2129270",
    "end": "2137299"
  },
  {
    "text": "PROFESSOR: n into 2. ",
    "start": "2137300",
    "end": "2142350"
  },
  {
    "text": "Factorial n minus 1 right? And you just return this. ",
    "start": "2142350",
    "end": "2150119"
  },
  {
    "text": "What would be your base case? ",
    "start": "2150120",
    "end": "2156460"
  },
  {
    "text": "If n is equal to 0, we know\nfactorial 0 is 1, right? ",
    "start": "2156460",
    "end": "2166260"
  },
  {
    "text": "What is factorial of 1?",
    "start": "2166260",
    "end": "2172090"
  },
  {
    "text": " 1. ",
    "start": "2172090",
    "end": "2185420"
  },
  {
    "text": "OK? But why in this program\nwe didn't have that particular line.",
    "start": "2185420",
    "end": "2191270"
  },
  {
    "text": " Why we didn't have n equals 1?",
    "start": "2191270",
    "end": "2197340"
  },
  {
    "text": "Why we didn't have that? ",
    "start": "2197340",
    "end": "2202960"
  },
  {
    "text": "AUDIENCE: Because it\nalways goes to 0? PROFESSOR: It always\ngoes 0, right? Because you can express 1 in\nterms of 0 as well, right?",
    "start": "2202960",
    "end": "2211000"
  },
  {
    "text": "So you don't need to actually\nwrite this explicitly. Why? Because your recursive function\nonly depends on its",
    "start": "2211000",
    "end": "2217780"
  },
  {
    "text": "previous value. So you need only one value in\nadvance Which means you need",
    "start": "2217780",
    "end": "2223760"
  },
  {
    "text": "only one value for\nyour base case. ",
    "start": "2223760",
    "end": "2228829"
  },
  {
    "text": "So you can understand\nthis program, right? I'm not going to go\nthrough that. But anyway when you write\na program always",
    "start": "2228830",
    "end": "2236040"
  },
  {
    "text": "check its base case. So you have to start with\nfactorial 0 for this case.",
    "start": "2236040",
    "end": "2241470"
  },
  {
    "text": "OK? And check one by one. Then you would know whether\nthe program is running correctly or not. So always start with\na simpler case.",
    "start": "2241470",
    "end": "2247985"
  },
  {
    "text": " But remember in Fibonacci\nseries. ",
    "start": "2247985",
    "end": "2256531"
  },
  {
    "text": "OK. for Fibonacci series\ncan you give me the recursive function.? ",
    "start": "2256531",
    "end": "2264270"
  },
  {
    "text": "Yes. What is Fibonacci series? AUDIENCE: [INAUDIBLE] ",
    "start": "2264270",
    "end": "2270150"
  },
  {
    "text": "PROFESSOR: OK. Yeah. That's great. So return say F of n minus\n1 plus F of n minus 2.",
    "start": "2270150",
    "end": "2280020"
  },
  {
    "text": "What is the Fibonacci series? You start from 0, you\nadd these elements. So 1. You add last two elements, 2.",
    "start": "2280020",
    "end": "2286710"
  },
  {
    "text": "You add last two elements, 3. You add last two elements, 5. ",
    "start": "2286710",
    "end": "2293030"
  },
  {
    "text": "So you add last two elements. So if you want to find F of n,\nyou return F of n minus 1 and",
    "start": "2293030",
    "end": "2299080"
  },
  {
    "text": "plus F of n minus 2. But here since you have two\nelements, or you need to",
    "start": "2299080",
    "end": "2306880"
  },
  {
    "text": "access two previous elements,\nyou need to define you base case accordingly. ",
    "start": "2306880",
    "end": "2313640"
  },
  {
    "text": "So for your base case,\nF of 0, is what?",
    "start": "2313640",
    "end": "2320819"
  },
  {
    "text": " Actually, that depends\non whether you start here or here.",
    "start": "2320820",
    "end": "2328135"
  },
  {
    "text": "OK?  You could do this. ",
    "start": "2328135",
    "end": "2339970"
  },
  {
    "text": "I'll go through an interesting\nrecursive example. ",
    "start": "2339970",
    "end": "2369349"
  },
  {
    "text": "OK. It's called a recursive\nexponentiation. So I actually you can do an\nexponentiation through",
    "start": "2369350",
    "end": "2377720"
  },
  {
    "text": "recursive multiplication. Suppose you want to find 3\nto the power, say, of 10.",
    "start": "2377720",
    "end": "2383800"
  },
  {
    "start": "2383800",
    "end": "2389546"
  },
  {
    "text": "Then how would you do that?  You start by expressing\nit in terms of its",
    "start": "2389546",
    "end": "2398300"
  },
  {
    "text": "simpler version, right? So it will be 3 into\n3 to the power 9. Sorry, 3 to the power 9.",
    "start": "2398300",
    "end": "2405279"
  },
  {
    "text": "OK? ",
    "start": "2405280",
    "end": "2411230"
  },
  {
    "text": "So if you want to find that\nnth power of number M, you",
    "start": "2411230",
    "end": "2417240"
  },
  {
    "text": "would say M into M to\nthe power n minus 1.",
    "start": "2417240",
    "end": "2424490"
  },
  {
    "text": "So now you have your\nrecursive case.  What is the base case?",
    "start": "2424490",
    "end": "2430410"
  },
  {
    "text": " AUDIENCE: [INAUDIBLE]",
    "start": "2430410",
    "end": "2436890"
  },
  {
    "text": "PROFESSOR: Yes, if\nn is equal to 0.  In Python you would test this\nby two equal signs.",
    "start": "2436890",
    "end": "2448260"
  },
  {
    "text": "If n is equal to 0, then what? AUDIENCE: Return 1. PROFESSOR: Return 1.",
    "start": "2448260",
    "end": "2453810"
  },
  {
    "text": " OK?",
    "start": "2453810",
    "end": "2459480"
  },
  {
    "text": "Why we have only one\nbase case here? AUDIENCE: [INAUDIBLE]",
    "start": "2459480",
    "end": "2465250"
  },
  {
    "text": "PROFESSOR: Sorry? AUDIENCE: [INAUDIBLE] PROFESSOR: Yes. And because you're accessing\nonly one previous series, right?",
    "start": "2465250",
    "end": "2471349"
  },
  {
    "text": "Fibonacci series.  Similarly, if you want to\nmultiply something--",
    "start": "2471350",
    "end": "2478180"
  },
  {
    "text": "OK, here what we did is we\nreplaced this operator by recursively using\nthis operator.",
    "start": "2478180",
    "end": "2486280"
  },
  {
    "text": "OK? Can you do the multiplication\nby recursive addition?",
    "start": "2486280",
    "end": "2493119"
  },
  {
    "text": "So can you replace this operator\nby this operator?",
    "start": "2493120",
    "end": "2498360"
  },
  {
    "text": "Yes. So how would you do this, for\nexample say 3 into 5?",
    "start": "2498360",
    "end": "2505020"
  },
  {
    "text": "So how would you do it here?  Tell me. What would this?",
    "start": "2505020",
    "end": "2511220"
  },
  {
    "text": " AUDIENCE: 3 plus 3 times 4.",
    "start": "2511220",
    "end": "2518790"
  },
  {
    "text": "PROFESSOR: 3 plus? AUDIENCE: 3 times 4. PROFESSOR: 3 times 4. Here? ",
    "start": "2518790",
    "end": "2531630"
  },
  {
    "text": "Come on, it's simple, right? AUDIENCE: [INAUDIBLE] PROFESSOR: I'm insulting you.",
    "start": "2531630",
    "end": "2537153"
  },
  {
    "text": "OK. What's the base case? That is interesting. What is the base case\nif n is equal to 0?",
    "start": "2537154",
    "end": "2545550"
  },
  {
    "start": "2545550",
    "end": "2552438"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: OK.",
    "start": "2552438",
    "end": "2557850"
  },
  {
    "text": "If n is equal to 0, that is 0. But that's fine. But there's another problem. ",
    "start": "2557850",
    "end": "2569010"
  },
  {
    "text": "The problem is you don't know\nwhether these values are positive or negative.",
    "start": "2569010",
    "end": "2574619"
  },
  {
    "text": "So you can't just keep\non adding like this. This will work if\nit's positive. ",
    "start": "2574620",
    "end": "2581350"
  },
  {
    "text": "But if it's negative, actually\nyou have to check. Which is sort of tricky\nif you want to use the",
    "start": "2581350",
    "end": "2587390"
  },
  {
    "text": "same recursive function. Otherwise you could have\nan if condition here.",
    "start": "2587390",
    "end": "2594030"
  },
  {
    "text": "If say n is greater\nthan 0, do this. ",
    "start": "2594030",
    "end": "2599690"
  },
  {
    "text": "Else-if you multiply n by minus\n1 you negate that so it",
    "start": "2599690",
    "end": "2605010"
  },
  {
    "text": "becomes positive. And do it the same way and\nthen that's the answer.",
    "start": "2605010",
    "end": "2610910"
  },
  {
    "text": "So you could do that. But if you want to do it in the\nsame recursive case, then",
    "start": "2610910",
    "end": "2616780"
  },
  {
    "text": "you had to follow this. If you have any questions,\ncome to the office hours on that.",
    "start": "2616780",
    "end": "2622730"
  },
  {
    "text": "The final question is, final\nexample is, the Hanoi example. ",
    "start": "2622730",
    "end": "2629640"
  },
  {
    "text": "OK. This is very interesting. ",
    "start": "2629640",
    "end": "2637890"
  },
  {
    "text": "So here we have three towers;\nsource, target, and buffer.",
    "start": "2637890",
    "end": "2644519"
  },
  {
    "text": " Suppose you have three disks.",
    "start": "2644520",
    "end": "2650350"
  },
  {
    "text": "You want to move them from\nsource to target. And you can always have a\nsmaller disk on top of a",
    "start": "2650350",
    "end": "2656200"
  },
  {
    "text": "bigger disk. Then how would you move? OK? So can you express this problem\nin a simpler version?",
    "start": "2656200",
    "end": "2665010"
  },
  {
    "text": "So now we have three disks. You want to move\nthem to target. So can you express it in\na simpler version?",
    "start": "2665010",
    "end": "2671710"
  },
  {
    "text": " Come on.",
    "start": "2671710",
    "end": "2677090"
  },
  {
    "text": "Just in plain English,\nhow would you do it? Without looking at\nthe program.",
    "start": "2677090",
    "end": "2682549"
  },
  {
    "text": "Because Python is very robust. So if you read the program\nyou get it in English. ",
    "start": "2682550",
    "end": "2689776"
  },
  {
    "text": "So any ideas? OK.",
    "start": "2689776",
    "end": "2695210"
  },
  {
    "text": "We have to here move the last\ndisk to target, right? But that's the hardest part. So before doing that you have\nto move this somewhere else.",
    "start": "2695210",
    "end": "2702720"
  },
  {
    "text": "So let's move it to buffer. ",
    "start": "2702720",
    "end": "2707960"
  },
  {
    "text": "Done. How would you move this?",
    "start": "2707960",
    "end": "2713600"
  },
  {
    "text": "Now you can move it to target. OK. Now what would you do?",
    "start": "2713600",
    "end": "2720634"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]  PROFESSOR: OK.",
    "start": "2720634",
    "end": "2725880"
  },
  {
    "text": "Sorry. Yeah, OK? No. What would you do? AUDIENCE: [INAUDIBLE] PROFESSOR: You can only move\nthis to the buffer, right?",
    "start": "2725880",
    "end": "2735270"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] [? PROFESSOR: Not the target.  OK.",
    "start": "2735270",
    "end": "2740920"
  },
  {
    "text": "So we made some mistake\nearlier.  Remember?",
    "start": "2740920",
    "end": "2746250"
  },
  {
    "text": "The problem is because we didn't\nthink recursively. ",
    "start": "2746250",
    "end": "2753720"
  },
  {
    "text": "OK. Let's think recursively. ",
    "start": "2753720",
    "end": "2761350"
  },
  {
    "text": "Source, target, buffer. Sorry. Suppose we have only one disk.",
    "start": "2761350",
    "end": "2767200"
  },
  {
    "text": " Then you can simply\nmove to target.",
    "start": "2767200",
    "end": "2773630"
  },
  {
    "text": "OK? So a condition is if there's\nonly one disk, just move it to the target.",
    "start": "2773630",
    "end": "2778700"
  },
  {
    "text": " So if n is equal to 1\nwe always move from",
    "start": "2778700",
    "end": "2787960"
  },
  {
    "text": "move source to target. ",
    "start": "2787960",
    "end": "2793350"
  },
  {
    "text": "OK? Suppose you have two. ",
    "start": "2793350",
    "end": "2801330"
  },
  {
    "text": "Then what would you do? You move the top\none to buffer. ",
    "start": "2801330",
    "end": "2810970"
  },
  {
    "text": "OK? So move source to buffer.",
    "start": "2810970",
    "end": "2816870"
  },
  {
    "start": "2816870",
    "end": "2822560"
  },
  {
    "text": "Then you move the next disk\nfrom source to target. ",
    "start": "2822560",
    "end": "2827990"
  },
  {
    "text": "So now it's source to target. ",
    "start": "2827990",
    "end": "2835660"
  },
  {
    "text": "And finally you move\nit from the buffer. All right?",
    "start": "2835660",
    "end": "2840730"
  },
  {
    "text": " Now we have a very nice\nrecursive case.",
    "start": "2840730",
    "end": "2848589"
  },
  {
    "text": "If you have two, we move from\nsource to buffer, then source",
    "start": "2848590",
    "end": "2854400"
  },
  {
    "text": "to target, then from\nbuffer to target.  So if you look at this example\nI'm checking if",
    "start": "2854400",
    "end": "2865600"
  },
  {
    "text": "n is equal to 1. If it is 1, just I'm moving\nfrom source to target.",
    "start": "2865600",
    "end": "2873180"
  },
  {
    "text": "If it is greater than\nn, what would I do? And that first assert statement\nis just there to make sure that n is\ngreater than 0.",
    "start": "2873180",
    "end": "2879460"
  },
  {
    "text": "Otherwise it's meaningless,\nright? You need to have this. You can't have negative this.",
    "start": "2879460",
    "end": "2885660"
  },
  {
    "text": "So what would be the next\nstep if you have",
    "start": "2885660",
    "end": "2892630"
  },
  {
    "text": "more than one disk? Suppose you have two disks. Then what would you do? You move the top disk\nor whatever on",
    "start": "2892630",
    "end": "2899590"
  },
  {
    "text": "the top to the buffer. For this simple example\nit was just one disk.",
    "start": "2899590",
    "end": "2906270"
  },
  {
    "text": "But suppose you had more disks\non top of the last disk? So you would have moved\nall of them to buffer.",
    "start": "2906270",
    "end": "2912280"
  },
  {
    "text": "You don't have to worry\nhow you move it. But you have to move\nit anyway. After moving that, you can\nleisurely move this big disk",
    "start": "2912280",
    "end": "2919830"
  },
  {
    "text": "to the top, to the target. OK? Finally, you bring back all\nof them here, right?",
    "start": "2919830",
    "end": "2928510"
  },
  {
    "text": "For you first operation, for\nyour first operation, from source to target, you have\nto move all of them, the",
    "start": "2928510",
    "end": "2934890"
  },
  {
    "text": "[UNINTELLIGIBLE]. You could have used target\nas your buffer. ",
    "start": "2934890",
    "end": "2940621"
  },
  {
    "text": "OK? So that's why in this line I'm\nusing source as source.",
    "start": "2940622",
    "end": "2950450"
  },
  {
    "text": "But the second argument, which\nshould have been the target, is now buffer because my current\ntarget is buffer for",
    "start": "2950450",
    "end": "2957580"
  },
  {
    "text": "the top n minus 1 disk. But my buffer is\nnow the target.",
    "start": "2957580",
    "end": "2963500"
  },
  {
    "text": "OK. Because I can use the target\nas buffer for the movement. Then I moved from source to the\ntarget, the last big disk.",
    "start": "2963500",
    "end": "2973204"
  },
  {
    "text": "OK? For that I can use buffer\nas my buffer. ",
    "start": "2973204",
    "end": "2979290"
  },
  {
    "text": "Then finally I bring back from\nbuffer to target using source as my buffer.",
    "start": "2979290",
    "end": "2984420"
  },
  {
    "text": " OK? So the thing is if you want to\nhave a recursive problem you",
    "start": "2984420",
    "end": "2992240"
  },
  {
    "text": "can do it in two ways. One thing, you can start\nthinking how to express this",
    "start": "2992240",
    "end": "2999830"
  },
  {
    "text": "problem in its simpler version\nlike how you thought about the Fibonacci series,\nfor instance. Or else, you can start from\nits base case, the most",
    "start": "2999830",
    "end": "3008700"
  },
  {
    "text": "fundamental situation. So here it's n equal to\n1, but this doesn't give you enough context.",
    "start": "3008700",
    "end": "3014350"
  },
  {
    "text": "So you go to the next level, n\nis equal to 2, and you have the answer. Right?",
    "start": "3014350",
    "end": "3019970"
  },
  {
    "start": "3019970",
    "end": "3022463"
  }
]