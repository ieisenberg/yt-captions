[
  {
    "text": " The following\ncontent is provided under a Creative\nCommons license. Your support will help MIT\nOpenCourseWare continue",
    "start": "0",
    "end": "6880"
  },
  {
    "text": "to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6880",
    "end": "13360"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13360",
    "end": "21959"
  },
  {
    "text": "PROFESSOR: I want to\ntalk about two things, maybe, depending on\nthe level of interest. We can talk a little bit\nabout PSET five and the things",
    "start": "21959",
    "end": "28430"
  },
  {
    "text": "that I think are weird in\nthe coding part of PSET five. By the way, how many\npeople started PSET five?",
    "start": "28430",
    "end": "35802"
  },
  {
    "text": "[LAUGHTER] AUDIENCE: I downloaded it. PROFESSOR: Hmm, maybe we are not\ngoing to talk about P set five.",
    "start": "35802",
    "end": "41380"
  },
  {
    "text": "You guys need to start early! AUDIENCE: I did. PROFESSOR: You did. Yeah.",
    "start": "41380",
    "end": "46460"
  },
  {
    "text": "I guess I can't punish\nyou for everyone else. So P set five, and I\ncan talk about graphs.",
    "start": "46460",
    "end": "52110"
  },
  {
    "text": "I can talk about whatever\ndidn't make sense in class and I can talk about\nbackground stuff for graphs.",
    "start": "52110",
    "end": "59230"
  },
  {
    "text": "So how do people feel? Who wants talk about the\nPSET that we haven't read?",
    "start": "59230",
    "end": "64519"
  },
  {
    "text": "[LAUGHTER] Who wants to talk about graphs?",
    "start": "64520",
    "end": "69852"
  },
  {
    "text": "AUDIENCE: It's really easy. We took 604 two. PROFESSOR: Yeah, if you took\n604 two, nothing here is new.",
    "start": "69852",
    "end": "79430"
  },
  {
    "text": "I mean nothing in the\nrecitation is new. We're going to take it to new\nheights of graph knowledge,",
    "start": "79430",
    "end": "85820"
  },
  {
    "text": "and you'll be able to\ndo many more cool things that you're able to do before. OK, so PSET.",
    "start": "85820",
    "end": "91230"
  },
  {
    "text": " For people who\nstarted early, what",
    "start": "91230",
    "end": "97870"
  },
  {
    "text": "was the gist of the\ncoding assignments? AUDIENCE: So we have\nto speed up something.",
    "start": "97870",
    "end": "104409"
  },
  {
    "text": "When I ran the tests-- do I\nsay what I got as results?",
    "start": "104410",
    "end": "110559"
  },
  {
    "text": "PROFESSOR: The time isn't on\nthe PSET so you can say what you got as -- AUDIENCE: Pardon? PROFESSOR: The time\nisn't on the PSET so you can say what\nyou got as a time.",
    "start": "110559",
    "end": "117240"
  },
  {
    "text": "AUDIENCE: OK, the slowest\nwas like add for me. PROFESSOR: You should look\nto see add is a valid answer.",
    "start": "117240",
    "end": "124140"
  },
  {
    "text": "Look at the questions and\nsee if add is a valid answer. AUDIENCE: OK. ",
    "start": "124140",
    "end": "130429"
  },
  {
    "text": "PROFESSOR: It's not like what\nwas lowest function, right? There's more text there. You should read the\nrest of the text",
    "start": "130430",
    "end": "136330"
  },
  {
    "text": "and see if add makes\nsense as a valid answer. AUDIENCE: Sure. OK. PROFESSOR: What you're\ndoing-- big picture--",
    "start": "136330",
    "end": "143129"
  },
  {
    "text": "is you have some processor,\nthat's not a real processor, and it can do arithmetic\nwith bytes and 16-bit words.",
    "start": "143130",
    "end": "151830"
  },
  {
    "text": "And we give you the\nbasic operations and then they give you a library\nfor large number arithmetic",
    "start": "151830",
    "end": "156890"
  },
  {
    "text": "because, guess what? 16 bytes addition, subtraction? Not going to cut it for\nscience applications",
    "start": "156890",
    "end": "166090"
  },
  {
    "text": "are for cryptography,\nwhat we want to play with. What are the basic operations\nthat that processor can do?",
    "start": "166090",
    "end": "174276"
  },
  {
    "text": "Front of the PSET,\nso even if you didn't get to the\ncoding assignment you can still tell me. AUDIENCE: Divide,\nand zeros, I think.",
    "start": "174276",
    "end": "181655"
  },
  {
    "text": "Zeros. PROFESSOR: Plus, minus,\nmultiply, divide, and mod.",
    "start": "181656",
    "end": "187980"
  },
  {
    "text": "Let's start to these. So you have two primitives\nin that processor. You have have bytes, which\nare basically 8-bit digits.",
    "start": "187980",
    "end": "200100"
  },
  {
    "text": "There's 200. The range is 0 to 256.",
    "start": "200100",
    "end": "207640"
  },
  {
    "text": "And the word is 16-bit,\nfrom 0 to the 16 minus 1.",
    "start": "207640",
    "end": "215080"
  },
  {
    "text": "If you care to know\nthis is 6, 5, 5, 3, 5. ",
    "start": "215080",
    "end": "221660"
  },
  {
    "text": "So, if you take two bytes\nand add them together what do you get?",
    "start": "221660",
    "end": "227490"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. ",
    "start": "227490",
    "end": "233274"
  },
  {
    "text": "PROFESSOR: Not right. It's a trick question. You get word. ",
    "start": "233274",
    "end": "240450"
  },
  {
    "text": "The processor cannot do\nsimple math on bytes. It converts them up to words and\nall the math happens on words.",
    "start": "240450",
    "end": "248750"
  },
  {
    "text": "Now if you guess two words,\nand add them up together",
    "start": "248750",
    "end": "255650"
  },
  {
    "text": "what do you get? AUDIENCE: Two words? PROFESSOR: You do if\nwe're not that nice.",
    "start": "255650",
    "end": "261359"
  },
  {
    "text": " AUDIENCE: A world in carry bit?",
    "start": "261360",
    "end": "268310"
  },
  {
    "text": "PROFESSOR: Sorry,\nyou just get word. At least nobody said a byte. I was like, please don't say\nbyte, please don't say byte.",
    "start": "268310",
    "end": "276580"
  },
  {
    "text": "You said carry bit. Why do we care\nabout the carry bit? What is the problem if\nyou do addition this way? AUDIENCE: If you're\ngoing too high.",
    "start": "276580",
    "end": "283080"
  },
  {
    "text": "If the highest bit is\none on both of them. Then it's like\noverflow, kind of.",
    "start": "283080",
    "end": "289845"
  },
  {
    "text": "PROFESSOR: Yep. Suppose we're trying to add\n2 to the 16 minus 1 plus 2",
    "start": "289845",
    "end": "295690"
  },
  {
    "text": "to the 16 minus 1. By the way, does anyone\nremember hex notation? Hexadecimal?",
    "start": "295690",
    "end": "302180"
  },
  {
    "text": "OK, people who started\nthe PSET remember. That's good. It will be easy to write\nthings hex for the PSET.",
    "start": "302180",
    "end": "311110"
  },
  {
    "text": "If you try to add these numbers\nyou're going to get 1, F, F, F,",
    "start": "311110",
    "end": "317345"
  },
  {
    "text": "E. You can use the\nmath here to see that this is more\nthan the words.",
    "start": "317346",
    "end": "323540"
  },
  {
    "text": "So you would like to know that\nthis thing overflows, right? You like to know that there is.",
    "start": "323540",
    "end": "328699"
  },
  {
    "text": "Well we don't give you that.  All you get to this.",
    "start": "328700",
    "end": "335860"
  },
  {
    "text": "So addition happens,\nmodulo 2 to the 16.",
    "start": "335860",
    "end": "341884"
  },
  {
    "text": "If you want to be able to detect\noverflow what they have to do? ",
    "start": "341885",
    "end": "347450"
  },
  {
    "text": "AUDIENCE: Just tests those bits. PROFESSOR: That one\nway of doing it.",
    "start": "347450",
    "end": "353790"
  },
  {
    "text": "It would take quite a\nfew instructions, though. If you want to do\noverflow detection,",
    "start": "353790",
    "end": "359780"
  },
  {
    "text": "the easiest way I think of\ndoing it this to use this form.",
    "start": "359780",
    "end": "366190"
  },
  {
    "text": "So suppose you have two bytes.  This is the maximum\nvalue in a byte, right?",
    "start": "366190",
    "end": "372449"
  },
  {
    "text": "255, 2 to the 8 minus 1. If you have 2 bytes and\nyou add them all together",
    "start": "372450",
    "end": "378520"
  },
  {
    "text": "you're going to\nget 1, F, E. Right? It's just like the case here,\nexcept you have a fewer F's.",
    "start": "378520",
    "end": "386805"
  },
  {
    "start": "386805",
    "end": "392889"
  },
  {
    "text": "Where is the carry here?  AUDIENCE: Could be the 1, right?",
    "start": "392890",
    "end": "398260"
  },
  {
    "text": "PROFESSOR: Yep. This guy here is the carry\nand this guy's the low result.",
    "start": "398260",
    "end": "405380"
  },
  {
    "text": "Does anyone know how\nthese are called? If you have a word and\nyou have two bytes, what is the first byte, what\nis the second bytes?",
    "start": "405380",
    "end": "411916"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Most\nsignificant byte,",
    "start": "411916",
    "end": "417311"
  },
  {
    "text": "M, S, B, and least\nsignificant byte, L, S, B. If you want to\nfigure out your carries,",
    "start": "417311",
    "end": "423860"
  },
  {
    "text": "then you should do\nyour math this way. You're going to have\nbyte 1 plus byte 2.",
    "start": "423860",
    "end": "429040"
  },
  {
    "text": "Add them together. And then you call L, S,\nB to get the byte result. ",
    "start": "429040",
    "end": "436500"
  },
  {
    "text": "And then you call M,\nS, B to get the carry.",
    "start": "436500",
    "end": "441660"
  },
  {
    "text": " This is addition.",
    "start": "441660",
    "end": "448500"
  },
  {
    "text": "Everyone with me so far? By the way, are these\nnumbers signed or unsigned?",
    "start": "448500",
    "end": "456115"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE].  PROFESSOR: No negative\nnumbers, right?",
    "start": "456115",
    "end": "462400"
  },
  {
    "text": "So no support for\nnegative numbers. Everything is going\nto be positive. And we're going to\nbuild everything we need off of positive\nnumbers because they're",
    "start": "462400",
    "end": "468300"
  },
  {
    "text": "easier to deal with. What if I have two words\nand I subtract them?",
    "start": "468300",
    "end": "477770"
  },
  {
    "text": "What do I get? AUDIENCE: Word. PROFESSOR: OK. ",
    "start": "477770",
    "end": "486129"
  },
  {
    "text": "What if I have 0 minus 1?",
    "start": "486130",
    "end": "491840"
  },
  {
    "text": "What do I get? AUDIENCE: 0. PROFESSOR: Not quite.",
    "start": "491840",
    "end": "499175"
  },
  {
    "text": "AUDIENCE: If you're\nnot using signs? Do you get O, 1?",
    "start": "499175",
    "end": "504469"
  },
  {
    "text": "PROFESSOR: O, 1's, OK. AUDIENCE: Ya. Wait-- PROFESSOR: So, O 1's\nwould be this, F, F, F, F.",
    "start": "504469",
    "end": "513822"
  },
  {
    "text": "AUDIENCE: That's assuming\nif you signed then. It will overflow.",
    "start": "513822",
    "end": "520880"
  },
  {
    "text": "That's a really big number then. PROFESSOR: So fancy\nCS, 2's complement. ",
    "start": "520880",
    "end": "529980"
  },
  {
    "text": "For people who think in\nmath mode, what is this? AUDIENCE: I think.",
    "start": "529980",
    "end": "534995"
  },
  {
    "text": " PROFESSOR: It's minus\n1 mod 2 to the 16.",
    "start": "534995",
    "end": "542730"
  },
  {
    "text": "Remember, when we were doing\nmodular arithmetic before, to figure out a number's\nmultiplicative inverse?",
    "start": "542730",
    "end": "549149"
  },
  {
    "text": "And when we were\ndoing rolling hashes? We didn't want negative numbers. We made them positive.",
    "start": "549150",
    "end": "554446"
  },
  {
    "text": " So minus 1 lot to the\n16 is 2 to the 16.",
    "start": "554446",
    "end": "561260"
  },
  {
    "text": "Minus 1, and comes\nout to this value. ",
    "start": "561260",
    "end": "566516"
  },
  {
    "text": "So you get minus 1,\nit's just that you have to know your basis. ",
    "start": "566517",
    "end": "574170"
  },
  {
    "text": "So we got the addition\nand subtraction. Let's talk about multiplication. What do you do for\nmultiplication?",
    "start": "574170",
    "end": "579530"
  },
  {
    "text": "What can you multiply? Two bytes, very good. Just two bytes. ",
    "start": "579530",
    "end": "589150"
  },
  {
    "text": "What do you get? A word. Thank you.",
    "start": "589150",
    "end": "595190"
  },
  {
    "text": "You multiply two\nbytes, you get a word. What if there's overflow? ",
    "start": "595190",
    "end": "609570"
  },
  {
    "text": "It's a trick question. AUDIENCE: There's no overflow. PROFESSOR: There is no overflow. So two bytes, 2 to the\neighth minus 1 times 2",
    "start": "609570",
    "end": "618500"
  },
  {
    "text": "to the eighth minus 1,\nis 2 to the 16 minus 2 to the 8th minus 2\nto the eighth plus 1.",
    "start": "618500",
    "end": "625230"
  },
  {
    "text": " You can say this safely without\ndoing the arithmetic, right?",
    "start": "625230",
    "end": "631250"
  },
  {
    "text": " This is how much you can\nhold, in other words.",
    "start": "631250",
    "end": "636470"
  },
  {
    "text": "This is how much you\ncan holding in a byte. AUDIENCE: Why do you minus 1?",
    "start": "636470",
    "end": "642230"
  },
  {
    "text": "PROFESSOR: Ya, minus 1. There's a minus 1 here,\nand there's a minus 1 here, but I can't find it\nhere, so roughly this.",
    "start": "642230",
    "end": "648520"
  },
  {
    "text": "But there is an overflow. AUDIENCE: But where did\nyou get the minus 1 from? PROFESSOR: Where do\nyou get the-- so,",
    "start": "648520",
    "end": "653770"
  },
  {
    "text": "this is how much you\ncan hold in a byte. Byte has 8 bits, right? From 0 0 to F F. This is\n2 to the eighth minus 1.",
    "start": "653770",
    "end": "663896"
  },
  {
    "text": "AUDIENCE: OK. PROFESSOR: OK, so\nmultiplication? There is an overflow. I don't have to deal with that. You guys have to figure\nout how to deal with it.",
    "start": "663896",
    "end": "670820"
  },
  {
    "text": "How about division? What can you divide?  AUDIENCE: Some words?",
    "start": "670820",
    "end": "676870"
  },
  {
    "text": "PROFESSOR: Almost. AUDIENCE: Words like-- PROFESSOR: A word\ndivided by a byte.",
    "start": "676870",
    "end": "685060"
  },
  {
    "text": "What do you get out of it? AUDIENCE: Words?",
    "start": "685060",
    "end": "690830"
  },
  {
    "text": "PROFESSOR: That would be nice. Nope. Sorry, you get a byte.",
    "start": "690830",
    "end": "697110"
  },
  {
    "text": "And if you do module,\nyou also get a byte. ",
    "start": "697110",
    "end": "703730"
  },
  {
    "text": "What if there's overflow\nin the division? What happens?  What would you expect to happen?",
    "start": "703730",
    "end": "711174"
  },
  {
    "text": "AUDIENCE: We don't have any\nbest flowing point numbers, so, we shouldn't\nget overflow, right?",
    "start": "711174",
    "end": "720150"
  },
  {
    "text": "PROFESSOR: How about 2 to\nthe 16 minus 1 divided by 1?",
    "start": "720150",
    "end": "725810"
  },
  {
    "text": " So what do get? AUDIENCE: Same thing?",
    "start": "725810",
    "end": "730995"
  },
  {
    "text": "PROFESSOR: Will this\nfit in the byte? AUDIENCE: Yes? No. [LAUGHTER] No. Well, that time I\ndon't get a word.",
    "start": "730995",
    "end": "738907"
  },
  {
    "text": "PROFESSOR: You don't get a word. I promise you get a byte. What will that byte be?",
    "start": "738907",
    "end": "746295"
  },
  {
    "text": "AUDIENCE: It's going\nto be modulo something. Most significant-- ",
    "start": "746295",
    "end": "754030"
  },
  {
    "text": "PROFESSOR: That's\nreasonable, right? Modulo to 56 because\nthat's what it can carry.",
    "start": "754030",
    "end": "760000"
  },
  {
    "text": " What about modulo? What happens there\nif you get overflow?",
    "start": "760000",
    "end": "766170"
  },
  {
    "start": "766170",
    "end": "774962"
  },
  {
    "text": "AUDIENCE: The same thing. It's just going to loop, right?",
    "start": "774962",
    "end": "781293"
  },
  {
    "text": "0? PROFESSOR: So if\nyou do a modulo, this is going to be,\nat most, 255 right?",
    "start": "781293",
    "end": "788870"
  },
  {
    "text": "If you do modulo\n255, the remainder is going to be\nbetween 0 and 254.",
    "start": "788870",
    "end": "795640"
  },
  {
    "text": "Will that ever overflow byte? No overflow. No need to worry about it.",
    "start": "795640",
    "end": "801080"
  },
  {
    "start": "801080",
    "end": "806170"
  },
  {
    "text": "Word addition can overflow. Subtraction can overflow. Multiplication doesn't overflow.",
    "start": "806170",
    "end": "811230"
  },
  {
    "text": "Division overflows,\nmodulo doesn't.  AUDIENCE: What do you mean, like\nwill it see the space confined?",
    "start": "811230",
    "end": "820910"
  },
  {
    "text": "PROFESSOR: Yes. It sees the space of the result. Because here, if you're\nadding two words, the result exceeds\nthe space of a word.",
    "start": "820910",
    "end": "826305"
  },
  {
    "text": "Which is what you get. AUDIENCE: Is it just in all\ncases it's just [INAUDIBLE].",
    "start": "826305",
    "end": "834459"
  },
  {
    "text": "PROFESSOR: Exactly. So the reason you have to\ndeal with this weird system",
    "start": "834460",
    "end": "839520"
  },
  {
    "text": "is this is, pretty much, how\nIntel does their arithmetic. If you look at old school,\n16-bit Intel processors,",
    "start": "839520",
    "end": "847770"
  },
  {
    "text": "you have registers and you\nhave exactly these operations. For newer processors, there are\n32 bits, but then it's just,",
    "start": "847770",
    "end": "854250"
  },
  {
    "text": "you write more F's on the board\nand you get the same thing. AUDIENCE: Is it most significant\nbit, or most significant byte?",
    "start": "854250",
    "end": "860930"
  },
  {
    "text": "PROFESSOR: Most\nsignificant byte. On a real processor,\nyou have registers",
    "start": "860930",
    "end": "867020"
  },
  {
    "text": "that are the size\nof a word and then you can pull out the\nbytes in constant time. ",
    "start": "867020",
    "end": "873750"
  },
  {
    "text": "What constant do we have? These are the operations. What constants do we have? ",
    "start": "873750",
    "end": "883689"
  },
  {
    "text": "Only two constants, 0 and 1. ",
    "start": "883690",
    "end": "891261"
  },
  {
    "text": "What if you want to\nget something bigger? What if you want to get 2? How do you get 2?",
    "start": "891262",
    "end": "896800"
  },
  {
    "text": "AUDIENCE: Two 1's? 1 plus 1? PROFESSOR: Yep. ",
    "start": "896800",
    "end": "902930"
  },
  {
    "text": "What if you want\nto get this number? ",
    "start": "902930",
    "end": "912696"
  },
  {
    "text": "AUDIENCE: Do that several times? [LAUGHTER] PROFESSOR: It's kind\nof painful to type,",
    "start": "912696",
    "end": "918140"
  },
  {
    "text": "even if you copy paste. There's a method on\nWord called from-bytes.",
    "start": "918140",
    "end": "924310"
  },
  {
    "text": " And it takes an M,\nS, B and an L, S, B",
    "start": "924310",
    "end": "932670"
  },
  {
    "text": "and it gives you a word. So what would I give it? ",
    "start": "932670",
    "end": "938097"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Let's give it\na 1 and let's give it a 0. ",
    "start": "938098",
    "end": "945490"
  },
  {
    "text": "So this will get 1,\n0, 0 and then minus 1.",
    "start": "945490",
    "end": "952100"
  },
  {
    "start": "952100",
    "end": "958855"
  },
  {
    "text": "Yes?  OK.",
    "start": "958855",
    "end": "965659"
  },
  {
    "text": "Intel is pretty nice\nabout constants, but some other\nprocessors aren't. So I figured, why not\nlet's get you acquainted",
    "start": "965659",
    "end": "971620"
  },
  {
    "text": "to these kind of tricks, to too. Let's make the PSETS\nmore interesting.",
    "start": "971620",
    "end": "977400"
  },
  {
    "text": "All right, so any questions\non this fake processor that you have to code for? AUDIENCE: Can you explain\nthe last one again?",
    "start": "977400",
    "end": "986762"
  },
  {
    "text": "PROFESSOR: Here? AUDIENCE: Yeah, Word from-bytes. PROFESSOR: So in Word\nfrom-bytes a word is 2 bytes.",
    "start": "986762",
    "end": "992310"
  },
  {
    "text": "One next to the other. It gives you the first byte,\nand gives you the second byte. In this case, the\nfirst byte is 1.",
    "start": "992310",
    "end": "1000340"
  },
  {
    "text": "The second byte is 0. Right? So 2 bytes. A 1 and a 0. How do you write this in hex?",
    "start": "1000340",
    "end": "1007760"
  },
  {
    "text": "1, 0, 0. One byte, second byte. And then I subtract\n1 and I get this.",
    "start": "1007760",
    "end": "1018500"
  },
  {
    "start": "1018500",
    "end": "1023890"
  },
  {
    "text": "While I erase the\nboard, I want you guys to think of graph\nquestions because this is the other topic\nwe're looking at today.",
    "start": "1023890",
    "end": "1030550"
  },
  {
    "text": "What was unclear\nabout the lecture? What is unclear about\ngraphs in general? Do guys remember the\nhandshaking lemma?",
    "start": "1030550",
    "end": "1035790"
  },
  {
    "text": "What does it mean? How do you prove it? Things of that sort. What do you guys\nwant to cover today?",
    "start": "1035790",
    "end": "1043287"
  },
  {
    "text": "AUDIENCE: Handshaking,\nthat's the thing where you have a bunch nodes\nand they're all connected,",
    "start": "1043287",
    "end": "1050450"
  },
  {
    "text": "like they're all in a closed\ngraph, that the number of edges",
    "start": "1050450",
    "end": "1056007"
  },
  {
    "text": "is equal to twice the\nnumber of vertices? PROFESSOR: OK.",
    "start": "1056008",
    "end": "1061866"
  },
  {
    "text": "AUDIENCE: That's\nall it is, right? PROFESSOR: The\nnumber of vertices? No. AUDIENCE: The\nnumber of handshakes that occurred are twice\nthe number of edges.",
    "start": "1061866",
    "end": "1069900"
  },
  {
    "text": "You said the number\nof vertices, wait-- PROFESSOR: No, vertices and\nedges are not related in here.",
    "start": "1069900",
    "end": "1076189"
  },
  {
    "text": "AUDIENCE: Yeah, think\nof a triangle, right? That's three edges,\nthree vertices. Which is like not two times,\nwhich is what you said.",
    "start": "1076189",
    "end": "1085590"
  },
  {
    "text": "It's the number of degrees\nis twice the number of edges. That's what I was\nthinking of then. PROFESSOR: All right, so\nlet's start with simple stuff.",
    "start": "1085590",
    "end": "1092620"
  },
  {
    "text": "What's a graph? AUDIENCE: Nodes and edges? PROFESSOR: All right. Fancy word for nodes?",
    "start": "1092620",
    "end": "1098900"
  },
  {
    "text": "AUDIENCE: Vertex. PROFESSOR: Vertex. Vertices and edges. How do I draw vertices? How do I draw edges? AUDIENCE: Circles and lines.",
    "start": "1098900",
    "end": "1104680"
  },
  {
    "text": "PROFESSOR: Circles and lines. AUDIENCE: 0's and 1's. Possibly arrows.",
    "start": "1104680",
    "end": "1111035"
  },
  {
    "text": "PROFESSOR: Possibly arrows. I like that. You want to get fancy. [LAUGHTER}",
    "start": "1111035",
    "end": "1116697"
  },
  {
    "text": "PROFESSOR: When do I\ndraw an edge as a line? When do I draw it as an arrow? AUDIENCE: Directed under.",
    "start": "1116697",
    "end": "1123240"
  },
  {
    "text": "PROFESSOR: Which one's which? AUDIENCE: Directed as an arrow. Character number. ",
    "start": "1123240",
    "end": "1136013"
  },
  {
    "text": "PROFESSOR: Cool. Let's draw this graph here. ",
    "start": "1136014",
    "end": "1145130"
  },
  {
    "text": "Yeah, looks like a\npretty boring graph. ",
    "start": "1145130",
    "end": "1151570"
  },
  {
    "text": "Is this graph connected or not? AUDIENCE: Yes.",
    "start": "1151570",
    "end": "1156960"
  },
  {
    "text": "PROFESSOR: What's\na connected graph? AUDIENCE: I think\nthat we can get to any other node\nfollowing some path.",
    "start": "1156960",
    "end": "1163880"
  },
  {
    "text": "PROFESSOR: There's a path\nfrom any to any other node. How do I make this\nunconnected using",
    "start": "1163880",
    "end": "1171570"
  },
  {
    "text": "the least amount of effort?  It's a bit of a trick question.",
    "start": "1171570",
    "end": "1178630"
  },
  {
    "text": "Any guess is fine. AUDIENCE: What was\nthe question again? PROFESSOR: How do I\nmake this unconnected using the least amount\nof effort on my behalf?",
    "start": "1178630",
    "end": "1187084"
  },
  {
    "text": "AUDIENCE: Just add a node? PROFESSOR: I heard\nyou move pages. I don't like you racing\nbecause I don't like the-- So",
    "start": "1187084",
    "end": "1195950"
  },
  {
    "text": "I like that answer out\nof the two I heard. Now it's not a connected graph.",
    "start": "1195950",
    "end": "1202560"
  },
  {
    "text": "How many connected\ncomponent does it have? ",
    "start": "1202560",
    "end": "1208900"
  },
  {
    "text": "Two and five. AUDIENCE: Or one\nconnected component, but there are two components? PROFESSOR: OK, what's\na connected component?",
    "start": "1208900",
    "end": "1215620"
  },
  {
    "start": "1215620",
    "end": "1223340"
  },
  {
    "text": "AUDIENCE: It's like in that part\nof the graph the neck follows the prognito beacon and puts\nthem in two parts [INAUDIBLE]",
    "start": "1223340",
    "end": "1233035"
  },
  {
    "text": "two connected components-- PROFESSOR: So, a\nconnected component is a bunch of vertices such\nthat you can get from one vertex",
    "start": "1233035",
    "end": "1240510"
  },
  {
    "text": "to all the other vertices. If the graph is\nundirected, that's true for any vertex in the set.",
    "start": "1240510",
    "end": "1248020"
  },
  {
    "text": "We also want the\nsets to be maximal because, if we say this\nis a connected component,",
    "start": "1248020",
    "end": "1254059"
  },
  {
    "text": "it's not very useful. Noticing that this whole\nthing is a connected component is useful.",
    "start": "1254060",
    "end": "1259650"
  },
  {
    "text": "So this is one component. This is the other component. Make sense?",
    "start": "1259650",
    "end": "1265950"
  },
  {
    "text": "So, we have the world. We have cities. You can bike from a city to\nanother city and that's it.",
    "start": "1265950",
    "end": "1272610"
  },
  {
    "text": "No other a route\nof transportation. How many connected components? ",
    "start": "1272610",
    "end": "1279856"
  },
  {
    "text": "AUDIENCE: Seven? PROFESSOR: OK. Roughly seven. Why? ",
    "start": "1279856",
    "end": "1288150"
  },
  {
    "text": "OK, so it only seven? AUDIENCE: Seven continents? PROFESSOR: OK. ",
    "start": "1288150",
    "end": "1296320"
  },
  {
    "text": "Let's say roughly seven. So this is what I wanted. I wanted some thinking. If you try to get from a\ncontinent to another continent,",
    "start": "1296320",
    "end": "1302840"
  },
  {
    "text": "presumably you'd go\nthrough some patch of sea. Otherwise, why are they\ncalling them continents? ",
    "start": "1302840",
    "end": "1310870"
  },
  {
    "text": "Does anyone want to\ngive out another answer? I asked this in the\nprevious section and some people there give\nme some very precise answers",
    "start": "1310870",
    "end": "1317270"
  },
  {
    "text": "that are not continents. This is what I had\nin mind, by the way. ",
    "start": "1317270",
    "end": "1323070"
  },
  {
    "text": "As far as I'm concerned,\nthis is a good answer. Come on guys, world.",
    "start": "1323070",
    "end": "1330090"
  },
  {
    "text": "Two things, islands and\nEurope and Asia are connected,",
    "start": "1330090",
    "end": "1338770"
  },
  {
    "text": "so you can go from\none to the other. They're weird. Why are they\nseparate continents? I have no idea.",
    "start": "1338770",
    "end": "1344420"
  },
  {
    "text": "The geography people might-- AUDIENCE: [INAUDIBLE]. PROFESSOR: Sorry? AUDIENCE: You roll mountains?",
    "start": "1344420",
    "end": "1351529"
  },
  {
    "text": "PROFESSOR: OK, so it would\nbe a pain bike through them, but presumably you can. If you have a robot that\ndoesn't get tired or something",
    "start": "1351530",
    "end": "1357665"
  },
  {
    "text": "you can bike. AUDIENCE: It doesn't\nmind falling off cliffs. PROFESSOR: The answer,\ndepending on my geography,",
    "start": "1357665",
    "end": "1363270"
  },
  {
    "text": "we know is somewhere\nbetween 7 and 10,000, or whatever the\nnumber of islands is.",
    "start": "1363270",
    "end": "1368330"
  },
  {
    "text": "There are a lot of tiny\nisland somewhere, right? Anyways, between seven\nand a big number.",
    "start": "1368330",
    "end": "1374570"
  },
  {
    "text": "These are connected\ncomponents in the world. What's the degree of A? ",
    "start": "1374570",
    "end": "1381920"
  },
  {
    "text": "2. What's the degree of the D?",
    "start": "1381920",
    "end": "1387645"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Very good. Let's make this. ",
    "start": "1387645",
    "end": "1395860"
  },
  {
    "text": "The degrees of F,\nG, H are 2, 2, 2.",
    "start": "1395860",
    "end": "1402660"
  },
  {
    "text": "The degree of C is 2.",
    "start": "1402660",
    "end": "1407690"
  },
  {
    "text": "The degree of B is? AUDIENCE: --2. PROFESSOR: Thank you. And the degree of E is?",
    "start": "1407690",
    "end": "1412970"
  },
  {
    "text": "AUDIENCE: 2.  PROFESSOR: If you add up all\nthese numbers together what",
    "start": "1412970",
    "end": "1418150"
  },
  {
    "text": "you get? ",
    "start": "1418150",
    "end": "1430230"
  },
  {
    "text": "18. I can't do math, so\nI couldn't possibly have added all these\nnumbers together, right?",
    "start": "1430230",
    "end": "1436310"
  },
  {
    "text": "I used something else.  How many edges do I\nhave in the graph?",
    "start": "1436310",
    "end": "1444899"
  },
  {
    "text": "1, 2, 3, 4, 5, 6, 7, 8, 9. ",
    "start": "1444900",
    "end": "1452370"
  },
  {
    "text": "Do you see your connection here? AUDIENCE: Yeah. PROFESSOR: This is\nthe handshaking lemma.",
    "start": "1452370",
    "end": "1457830"
  },
  {
    "text": "That's all there is to it. So if you look at\nthe degrees of a node",
    "start": "1457830",
    "end": "1463659"
  },
  {
    "text": "each edge adds one\nto two degrees. For instance, this edge\nadds one to C's degree",
    "start": "1463660",
    "end": "1468750"
  },
  {
    "text": "and adds one to D's degree. If you're a math person\nand you write this up,",
    "start": "1468750",
    "end": "1474760"
  },
  {
    "text": "you have to write sums. You have big sums using\nintimidating notation,",
    "start": "1474760",
    "end": "1481580"
  },
  {
    "text": "so it's not as obvious. But this is really\nall there is to it. Each edge contributes\none to two nodes degrees.",
    "start": "1481580",
    "end": "1489329"
  },
  {
    "text": "If you add up all\nthe degrees, you're going to get to times\nthe number of edges. ",
    "start": "1489329",
    "end": "1495790"
  },
  {
    "text": "So far so good? What if we have directed graphs?",
    "start": "1495790",
    "end": "1501890"
  },
  {
    "text": "What if I had this? ",
    "start": "1501890",
    "end": "1516580"
  },
  {
    "text": "A, B, C, D, E, F. What\nis the degree of A?",
    "start": "1516580",
    "end": "1524559"
  },
  {
    "text": " AUDIENCE: 2?",
    "start": "1524560",
    "end": "1530755"
  },
  {
    "text": "PROFESSOR: Not quite. Sorry, that was trick question. A doesn't have a degree. ",
    "start": "1530755",
    "end": "1536580"
  },
  {
    "text": "If you have directed graphs,\nyou don't have degrees. You have in degrees\nand out degrees.",
    "start": "1536580",
    "end": "1541690"
  },
  {
    "text": "Now that I've said that\nyou have no idea, right? What's the out degree of A? AUDIENCE: [INAUDIBLE].",
    "start": "1541690",
    "end": "1548690"
  },
  {
    "text": "PROFESSOR: Sometimes this is\nknown as the degree of edges.",
    "start": "1548690",
    "end": "1554299"
  },
  {
    "text": "This is 2. What's the in degree of A? ",
    "start": "1554300",
    "end": "1560506"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE].  PROFESSOR: So A has two edges\ngoing out, 0 edges going in.",
    "start": "1560506",
    "end": "1569160"
  },
  {
    "text": "How about D? What's the out degree of D? ",
    "start": "1569160",
    "end": "1574621"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Come on guys. Don't scare me. (LAUGHS)\nWhat's the in degree of D?",
    "start": "1574621",
    "end": "1580200"
  },
  {
    "text": "AUDIENCE: 2? PROFESSOR: 2, very good. PROFESSOR: So what's\nthe equivalent of the handshaking lemma\non oriented graphs?",
    "start": "1580200",
    "end": "1587100"
  },
  {
    "text": " AUDIENCE: The sum of the\nin degrees and out degrees?",
    "start": "1587100",
    "end": "1592740"
  },
  {
    "text": "PROFESSOR: OK, what about them? AUDIENCE: They're equal to\ntwice the number of vertices?",
    "start": "1592740",
    "end": "1599110"
  },
  {
    "text": "PROFESSOR: Not quite. They're equal to? You had 80 percent\nof the answer.",
    "start": "1599110",
    "end": "1605460"
  },
  {
    "text": "AUDIENCE: Oh. (LAUGHS)",
    "start": "1605460",
    "end": "1611808"
  },
  {
    "text": "PROFESSOR: So the sum of the in\ndegrees and the sum of the out",
    "start": "1611808",
    "end": "1617600"
  },
  {
    "text": "degrees. AUDIENCE: So add them up? ",
    "start": "1617600",
    "end": "1623814"
  },
  {
    "text": "PROFESSOR: If you\nadd them up, you will get two times\nthe number of edges. That is correct.",
    "start": "1623814",
    "end": "1629470"
  },
  {
    "text": "But, I want something more-- AUDIENCE: They equal each other?",
    "start": "1629470",
    "end": "1634480"
  },
  {
    "text": "PROFESSOR: Yep.  This is cooler, right?",
    "start": "1634480",
    "end": "1640660"
  },
  {
    "text": "So why is that? Does anyone see why\nthat's the case? ",
    "start": "1640660",
    "end": "1646940"
  },
  {
    "text": "Each edge-- Come on, guys.",
    "start": "1646940",
    "end": "1653970"
  },
  {
    "text": "So what does each edge do? AUDIENCE: [INAUDIBLE]. PROFESSOR: So if I\nlook at this edge here,",
    "start": "1653970",
    "end": "1659520"
  },
  {
    "text": "this edge is going to\ncontribute 1 to B's out degree,",
    "start": "1659520",
    "end": "1664840"
  },
  {
    "text": "and 1 to D's in degree. Each edge contributes\n1 to an out degree",
    "start": "1664840",
    "end": "1670680"
  },
  {
    "text": "and 1 to an in degree. That means that total\nsum of out degrees",
    "start": "1670680",
    "end": "1676040"
  },
  {
    "text": "equals the total\nsum of in degrees. Both of them are E and\nthey combined to E. Sorry,",
    "start": "1676040",
    "end": "1682560"
  },
  {
    "text": "eyed I don't know why that\ndidn't click to me right away. AUDIENCE: OK.",
    "start": "1682560",
    "end": "1688181"
  },
  {
    "text": "PROFESSOR: The\nintuition behind this is, that for every node,\nif you take an edge you're going to\nget somewhere else.",
    "start": "1688181",
    "end": "1694140"
  },
  {
    "text": " If the sum of the out\ndegrees was bigger, then you have a\nblack hole somewhere.",
    "start": "1694140",
    "end": "1700670"
  },
  {
    "text": "If you go on an edge\nyou don't come back. Same four in degrees. ",
    "start": "1700670",
    "end": "1708090"
  },
  {
    "text": "OK, how do we represent graphs? ",
    "start": "1708090",
    "end": "1714820"
  },
  {
    "text": "AUDIENCE: I think we just did. PROFESSOR: Sure, if\nyou're drawing them on the board that's what\nyou do, but if you're",
    "start": "1714820",
    "end": "1720666"
  },
  {
    "text": "in Python what do you do? AUDIENCE: You can\nhave a link list. PROFESSOR: Of? AUDIENCE: Of each node having\nits neighbors linked with.",
    "start": "1720666",
    "end": "1730919"
  },
  {
    "text": "PROFESSOR: OK, so I\nhave one big link list? Or how does this work?",
    "start": "1730920",
    "end": "1735960"
  },
  {
    "text": "AUDIENCE: You'd have a\nstarting point of some sort. A starting node. Then from that node you can have\nits neighbors connected to it.",
    "start": "1735960",
    "end": "1744514"
  },
  {
    "text": " So it was a link list , I guess. PROFESSOR: I wasn't precise.",
    "start": "1744514",
    "end": "1750470"
  },
  {
    "text": "That is not trivial to build. By the time we build that we're\ndone with this recitation.",
    "start": "1750470",
    "end": "1755700"
  },
  {
    "text": "What do you get is the\nvertices and the edges. We want an easier representation\nthat just looks at the vertices",
    "start": "1755700",
    "end": "1762960"
  },
  {
    "text": "and build something,\nthen looks at the edges and builds something. ",
    "start": "1762960",
    "end": "1770602"
  },
  {
    "text": "AUDIENCE: You could\nhave a table of values. Like, A has these\nneighbors-- a dictionary.",
    "start": "1770602",
    "end": "1776497"
  },
  {
    "start": "1776498",
    "end": "1782190"
  },
  {
    "text": "PROFESSOR: Let's go for that. So we have a dictionary. For each vertex\nyou have the list",
    "start": "1782190",
    "end": "1788780"
  },
  {
    "text": "of vertices that\nare connected to it. What's the list for A? ",
    "start": "1788780",
    "end": "1795731"
  },
  {
    "text": "AUDIENCE: B and C?  PROFESSOR: OK, what's\nthe list for B?",
    "start": "1795731",
    "end": "1801870"
  },
  {
    "text": " AUDIENCE: A, D, and E.",
    "start": "1801870",
    "end": "1818795"
  },
  {
    "text": "PROFESSOR: All right. For Python this would\nbe a dictionary, right? So how much total\nspace does this take?",
    "start": "1818795",
    "end": "1826650"
  },
  {
    "text": "AUDIENCE: The number of nodes? PROFESSOR: The number of-- AUDIENCE: --nodes. Well, then there's also the\nspace you made for the list,",
    "start": "1826650",
    "end": "1832482"
  },
  {
    "text": "though.  PROFESSOR: If these were\nactual slots in an array--",
    "start": "1832483",
    "end": "1838960"
  },
  {
    "text": "so this would be an array-- I\nwould have the number of nodes. You're giving away the\nanswer to my next question.",
    "start": "1838960",
    "end": "1844340"
  },
  {
    "text": "So I have these slots here.  This would be an array. It's order V just to store this.",
    "start": "1844340",
    "end": "1851476"
  },
  {
    "text": "The thing in Python is that\nhave these dictionaries that are fancy hashes where\nthey grow as you need them.",
    "start": "1851477",
    "end": "1857850"
  },
  {
    "text": "For example, you\nhave 10,000 vertices but you don't have any edge. Your dictionary size is going\nto be order 1 because it only",
    "start": "1857850",
    "end": "1864399"
  },
  {
    "text": "grows as you add edges to it.  So this is assuming that\nI don't store empty lists.",
    "start": "1864400",
    "end": "1871220"
  },
  {
    "text": "If I have a stray\nnode here, if I have a node I-- say this is\nI-- if I don't store anything,",
    "start": "1871220",
    "end": "1880320"
  },
  {
    "text": "I don't have to pay for it. If I store an empty list here,\nthen I have to pay for it. There is an order V\ncomponent that you mentioned.",
    "start": "1880320",
    "end": "1889080"
  },
  {
    "text": "AUDIENCE: Let's say, if\nthere's a graph there, everything is not connected\nso there are a bunch of words",
    "start": "1889080",
    "end": "1894470"
  },
  {
    "text": "instead. Then in that case it\nwould be order V, right? PROFESSOR: It's order V\nif we store empty lists",
    "start": "1894470",
    "end": "1900320"
  },
  {
    "text": "for the nodes that\ndon't have edges. AUDIENCE: Right. And if none of the\nnodes have edges,",
    "start": "1900320",
    "end": "1905330"
  },
  {
    "text": "they're all unconnected-- PROFESSOR: On the other hand,\nif I don't store anything for the nodes that don't\nhave edges, it's order 1.",
    "start": "1905330",
    "end": "1911383"
  },
  {
    "text": " AUDIENCE: If you get no\nedges do we do an empty list",
    "start": "1911383",
    "end": "1919240"
  },
  {
    "text": "or do we not store it? PROFESSOR: Depends\non what you want. So if we store\nempty lists you're",
    "start": "1919240",
    "end": "1925000"
  },
  {
    "text": "going to have an\norder V cost here. But your code is going to\nbe simpler, presumably, because you don't have\nto check if something",
    "start": "1925000",
    "end": "1930293"
  },
  {
    "text": "is or isn't in the dictionary. How about this stuff? What's the total size\nof this stuff here?",
    "start": "1930293",
    "end": "1938164"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE].  PROFESSOR: OK. Order E. How many elements\ndo I have in here in total?",
    "start": "1938164",
    "end": "1948700"
  },
  {
    "text": " In this thing here.",
    "start": "1948700",
    "end": "1955940"
  },
  {
    "text": "So what's the sum of\nthe length of the lists?",
    "start": "1955940",
    "end": "1961007"
  },
  {
    "text": "AUDIENCE: Average value of E\ntimes the number of vertices? PROFESSOR: Let's go\nover something else.",
    "start": "1961008",
    "end": "1967660"
  },
  {
    "text": "AUDIENCE: The degree-- PROFESSOR: All right. That's what I wanted to hear. A lists its neighbors, right?",
    "start": "1967660",
    "end": "1973870"
  },
  {
    "text": " The number of neighbors that\nA has is the degree of A. B",
    "start": "1973870",
    "end": "1982780"
  },
  {
    "text": "lists its neighbors, so\nthis is the degree of B.",
    "start": "1982780",
    "end": "1988350"
  },
  {
    "text": "If you sum up over all of them,\nwhat is the sum of all the",
    "start": "1988350",
    "end": "1993549"
  },
  {
    "text": "agrees in the graph? AUDIENCE: 2, E. PROFESSOR: 2, E. We\nlearned about this, right?",
    "start": "1993550",
    "end": "2001710"
  },
  {
    "text": "The handshaking\nlemma, 2, E. So what is the total cost for\nstoring this data structure?",
    "start": "2001710",
    "end": "2007070"
  },
  {
    "start": "2007070",
    "end": "2012782"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE].  PROFESSOR: So V plus E,\nassuming empty lists.",
    "start": "2012782",
    "end": "2020409"
  },
  {
    "text": "Let's look at another\ndata structure for storing things in a graph.",
    "start": "2020410",
    "end": "2026510"
  },
  {
    "text": "So instead of using\nlists, let's use a matrix. A, B, C, D, E on top, and\nA, B, C, D, E on the left.",
    "start": "2026510",
    "end": "2038730"
  },
  {
    "text": "Let's pretend our graph is\njust that component over there. Otherwise, it just gets big\nand there's no extraneous site.",
    "start": "2038730",
    "end": "2045360"
  },
  {
    "text": "Does anyone know\nhow this is called? If I put numbers\nhere, does anyone",
    "start": "2045360",
    "end": "2050669"
  },
  {
    "text": "know what this is called? AUDIENCE: Is that a matrix? PROFESSOR: There's\na fancy name for it.",
    "start": "2050670",
    "end": "2058131"
  },
  {
    "text": "It ends with matrix.  OK. I don't think we taught\nit to you, so don't worry.",
    "start": "2058131",
    "end": "2065790"
  },
  {
    "text": "The fancy name is maybe it's\nmisspelled, but something",
    "start": "2065790",
    "end": "2072560"
  },
  {
    "text": "that looks and sounds like\nthis., adjacency matrix. ",
    "start": "2072560",
    "end": "2079080"
  },
  {
    "text": "Misspelled?  AUDIENCE: [INAUDIBLE].",
    "start": "2079080",
    "end": "2085836"
  },
  {
    "text": "PROFESSOR: I hope\nsomeone will help me. OK so if this is an\nadjacency matrix, what should this element\nbetween B and A tell me?",
    "start": "2085836",
    "end": "2094179"
  },
  {
    "text": " If it's an adjacency\nmatrix, it better",
    "start": "2094179",
    "end": "2100134"
  },
  {
    "text": "tell me if they're adjacent. They're adjacent if they\nhave an edge between them. For A and B, what\ndoes it happen to be?",
    "start": "2100134",
    "end": "2108527"
  },
  {
    "text": "AUDIENCE: One?  PROFESSOR: OK. A and A?",
    "start": "2108527",
    "end": "2113980"
  },
  {
    "text": "What do we do?  AUDIENCE: What with 1? It's adjacent to itself.",
    "start": "2113980",
    "end": "2120130"
  },
  {
    "text": "PROFESSOR: What's\neasier for the algorithm that you're trying to implement? AUDIENCE: 1? PROFESSOR: So it\ndoesn't really matter.",
    "start": "2120130",
    "end": "2126004"
  },
  {
    "text": "We use 1's most of the\ntime, but sometimes it's easier to use a 0. AUDIENCE: Then you can\nget to A from A, right?",
    "start": "2126004",
    "end": "2133388"
  },
  {
    "text": "PROFESSOR: Yeah. So that's why you'd use a 1. Sometimes, though, you\ndon't want to in code. ",
    "start": "2133388",
    "end": "2140760"
  },
  {
    "text": "So someone dictate this to me. Or, everyone dictate this to\nme so I know it makes sense.",
    "start": "2140760",
    "end": "2146220"
  },
  {
    "text": "A and C, is there an\nedge between them? AUDIENCE: Yes. PROFESSOR: What do I write? AUDIENCE: 1.",
    "start": "2146220",
    "end": "2151588"
  },
  {
    "text": "PROFESSOR: A and D?  A and E?",
    "start": "2151589",
    "end": "2157772"
  },
  {
    "text": "AUDIENCE: 0. PROFESSOR: B, A? AUDIENCE: 1.",
    "start": "2157772",
    "end": "2163120"
  },
  {
    "text": "PROFESSOR: B, C? AUDIENCE: 0. PROFESSOR: B, D? AUDIENCE: 1.",
    "start": "2163120",
    "end": "2168160"
  },
  {
    "text": "PROFESSOR: The E? AUDIENCE: 1. PROFESSOR: OK. C, A? AUDIENCE: 1.",
    "start": "2168160",
    "end": "2173640"
  },
  {
    "text": "PROFESSOR: C, B? AUDIENCE: 2. PROFESSOR: C, D? AUDIENCE: 1. PROFESSOR: C, E?",
    "start": "2173640",
    "end": "2178690"
  },
  {
    "text": "AUDIENCE: 0. PROFESSOR: All right. Now I'm going to\nuse the bits you gave me to come to get this.",
    "start": "2178690",
    "end": "2187574"
  },
  {
    "text": "Let's see if I can\ndo it correctly. And D? I'm not looking at the graph,\nby the way, I'm trusting you.",
    "start": "2187574",
    "end": "2193580"
  },
  {
    "text": "So you better give\nme the right answer. D? AUDIENCE: 1. ",
    "start": "2193580",
    "end": "2201760"
  },
  {
    "text": "PROFESSOR: How many\n1's do I have in this? ",
    "start": "2201760",
    "end": "2210272"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: To see if\nyou guys are thinking. ",
    "start": "2210272",
    "end": "2217678"
  },
  {
    "text": "AUDIENCE: 2, E? [INAUDIBLE].  PROFESSOR: Each edge\ncontributes to two 1's, right?",
    "start": "2217678",
    "end": "2225507"
  },
  {
    "text": "And that accounts\nfor most of the 1's.  AUDIENCE: O plus V.",
    "start": "2225507",
    "end": "2237530"
  },
  {
    "text": "PROFESSOR: So this is\nhow many 1's I have. How many 0's do I have?",
    "start": "2237530",
    "end": "2245270"
  },
  {
    "text": "AUDIENCE: V squared\nminus 2, E plus V? ",
    "start": "2245270",
    "end": "2254222"
  },
  {
    "text": "PROFESSOR: This is\na non-boring way of asking how many elements\nI have in this matrix. This is what I was looking for.",
    "start": "2254222",
    "end": "2259580"
  },
  {
    "text": " So V columns, right?",
    "start": "2259580",
    "end": "2267070"
  },
  {
    "text": "Zeros V squared's\ntotal elements. ",
    "start": "2267070",
    "end": "2272079"
  },
  {
    "text": "How much memory do I\nneed to store this? AUDIENCE: V squared. PROFESSOR: V squared. what? If I want to store it as\ncompactly as possible?",
    "start": "2272080",
    "end": "2280020"
  },
  {
    "text": "I want to pack these\nas tight as I can.  AUDIENCE: You mean you need\nthe entire array arranged?",
    "start": "2280020",
    "end": "2286962"
  },
  {
    "text": "PROFESSOR: Yes, so\nwhat do I store? V squared what? AUDIENCE: Oh, you mean units. PROFESSOR: Yeah. What's the unit?",
    "start": "2286962",
    "end": "2292650"
  },
  {
    "text": "AUDIENCE: 1 bit? PROFESSOR: All right! So V squared bits Whereas,\nthis is V plus E words",
    "start": "2292650",
    "end": "2305460"
  },
  {
    "text": "because you have to store\npointers everywhere here. ",
    "start": "2305460",
    "end": "2310640"
  },
  {
    "text": "So sometimes if your\ngraph is really dense you might prefer\nthis representation. ",
    "start": "2310640",
    "end": "2318670"
  },
  {
    "text": "Let me see, how much do I have? Oh, plenty of time.",
    "start": "2318670",
    "end": "2324070"
  },
  {
    "text": "Who remembers\nbreadth-first search? Yes? AUDIENCE: Basically you\njust start at some node",
    "start": "2324070",
    "end": "2331008"
  },
  {
    "text": "and you check all its neighbors,\nand check all those neighbors.",
    "start": "2331008",
    "end": "2336560"
  },
  {
    "text": "PROFESSOR: All right. In breadth-first\nsearch we have a graph. ",
    "start": "2336560",
    "end": "2344349"
  },
  {
    "text": "What did I draw there? A. B, E. So suppose\nthis is our graph.",
    "start": "2344350",
    "end": "2364480"
  },
  {
    "text": "And I do a breadth-first\nsearch starting at A. How does that work?",
    "start": "2364480",
    "end": "2369910"
  },
  {
    "text": " I started with the list of the\nnodes that I'm going to visit.",
    "start": "2369910",
    "end": "2376687"
  },
  {
    "text": "I initialization it with A\nbecause this is the only node that I know about. ",
    "start": "2376687",
    "end": "2385339"
  },
  {
    "text": "What happens next? AUDIENCE: It goes with B and C. PROFESSOR: All right.",
    "start": "2385340",
    "end": "2390760"
  },
  {
    "text": "So I take out of the list\nthe first thing that I can. This is my current node.",
    "start": "2390760",
    "end": "2395900"
  },
  {
    "text": "You said I visit B and C\nbecause they're the neighbors. Right. ",
    "start": "2395900",
    "end": "2402230"
  },
  {
    "text": "I took A out of the list. A was definitely visited.",
    "start": "2402230",
    "end": "2407460"
  },
  {
    "text": "And I'm visiting B and C. What\ndo I do when I visit them? AUDIENCE: Put them in the list.",
    "start": "2407460",
    "end": "2413812"
  },
  {
    "text": "PROFESSOR: Put them in the list.  This means I discovered them and\nI'm going to visit the later.",
    "start": "2413812",
    "end": "2421420"
  },
  {
    "text": "So I discovered them and\nI know of their existence. What happens next?",
    "start": "2421420",
    "end": "2426725"
  },
  {
    "text": "AUDIENCE: Check if\nB is what you want. PROFESSOR: So B gets out of\nthe list, and what do I do?",
    "start": "2426725",
    "end": "2435078"
  },
  {
    "text": "AUDIENCE: Discover\nit's neighbors. PROFESSOR: All right,\nso its neighborhoods are A, B, and E. What Now?",
    "start": "2435078",
    "end": "2441552"
  },
  {
    "text": "AUDIENCE: If they\nhaven't already been on that list then\nadd a [INAUDIBLE]. PROFESSOR: A was\nalready visited.",
    "start": "2441552",
    "end": "2447615"
  },
  {
    "text": "D and E weren't.  D and E, then what happens?",
    "start": "2447615",
    "end": "2458349"
  },
  {
    "text": "AUDIENCE: Then you\ncheck C's neighbors. PROFESSOR: Any neighbor's\nthat I haven't seen?",
    "start": "2458350",
    "end": "2463860"
  },
  {
    "text": "Nope. Then? AUDIENCE: D? AUDIENCE: D and?",
    "start": "2463860",
    "end": "2469708"
  },
  {
    "text": "AUDIENCE: E. PROFESSOR:OK. And then? PROFESSOR: I guess\nyou could go to F,",
    "start": "2469708",
    "end": "2476137"
  },
  {
    "text": "but it's not\nconnected to anything. But how did you\nget A then, right? PROFESSOR: So A\nis the first node.",
    "start": "2476137",
    "end": "2481760"
  },
  {
    "text": "I started with A\nbecause I said I'm doing a breadth-first\nsearch starting from A. So BFS starts from somewhere.",
    "start": "2481760",
    "end": "2489490"
  },
  {
    "text": "A BFS has a source. We'll see why that\nmatters in a bit. So you ever get to see F?",
    "start": "2489490",
    "end": "2496166"
  },
  {
    "text": "AUDIENCE: No. PROFESSOR: Nope.  So if I start at A what\nare the nodes that I visit",
    "start": "2496166",
    "end": "2503170"
  },
  {
    "text": "and what are the nodes\nthat I don't visit?  AUDIENCE: Well you visit all\nthe ones in the connected graph.",
    "start": "2503170",
    "end": "2510150"
  },
  {
    "text": "PROFESSOR: All right, in\nthe connected component. So the whole graph can be\nconnected or not connected. ",
    "start": "2510150",
    "end": "2517950"
  },
  {
    "text": "The nodes that I\nvisit are the nodes in A's connected component\nbecause, by definition, those are the nodes that\nI can reach from A.",
    "start": "2517950",
    "end": "2525680"
  },
  {
    "text": "If I have many kind\nof the components and I use BFS starting\nfrom one node, I might not visit\nthe entire graph.",
    "start": "2525680",
    "end": "2531160"
  },
  {
    "text": " How do I keep track of what\nnode that I've discovered",
    "start": "2531160",
    "end": "2537260"
  },
  {
    "text": "and haven't discovered? What data structure do I\nuse for these smiley faces? ",
    "start": "2537260",
    "end": "2547428"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR:So for\nthe smiley faces. For this thing I\nprobably want a queue.",
    "start": "2547428",
    "end": "2553376"
  },
  {
    "text": "We'd teach you\nsomething simpler, but most of the time when\nyou write the code you actually use queue.",
    "start": "2553376",
    "end": "2559619"
  },
  {
    "text": "What do I want for\nthe smiley faces? When I pull a node out,\nsay I pulled out B,",
    "start": "2559620",
    "end": "2565005"
  },
  {
    "text": "and I see A, D, E, I want\nto know that I visited A and I didn't visit the D\nand E. You guys remember",
    "start": "2565006",
    "end": "2571490"
  },
  {
    "text": "that we didn't visit D and E,\nright, by the time we got to 2? OK. So I want to be able to check\nwhether I visited a node",
    "start": "2571490",
    "end": "2577560"
  },
  {
    "text": "or not really fast. What data structure should\nI use for the smileys? AUDIENCE: A hash table.",
    "start": "2577560",
    "end": "2583482"
  },
  {
    "text": "PROFESSOR: A has table. Cool. What's a hash table in Python? AUDIENCE: A dictionary.",
    "start": "2583482",
    "end": "2588707"
  },
  {
    "text": "PROFESSOR: A dictionary.  All right, so this is\ngoing to be a seen, which",
    "start": "2588707",
    "end": "2596140"
  },
  {
    "text": "is a dictionary, and it\nmaps vertices to maybe true.",
    "start": "2596140",
    "end": "2602059"
  },
  {
    "text": " AUDIENCE: [INAUDIBLE].",
    "start": "2602060",
    "end": "2608110"
  },
  {
    "text": "PROFESSOR:Yep. Python has a set, right? So you can use that. ",
    "start": "2608110",
    "end": "2614430"
  },
  {
    "text": "The smileys needs to be\nsome sort of a dictionary.",
    "start": "2614430",
    "end": "2620230"
  },
  {
    "text": "So given that, and\nassuming that this is a queue that we\ncan extract and you",
    "start": "2620230",
    "end": "2626375"
  },
  {
    "text": "can start from in\nconstant time, what is the running time of BFS? ",
    "start": "2626375",
    "end": "2632905"
  },
  {
    "text": "Let's make life easy. Let's assume the graph is\nconnected and let's assume just doesn't exist. ",
    "start": "2632906",
    "end": "2640200"
  },
  {
    "text": "BFS was the running time. ",
    "start": "2640200",
    "end": "2646849"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] visiting. PROFESSOR: So you\nvisit every node once, so it's at least\nV. That's a start.",
    "start": "2646850",
    "end": "2653030"
  },
  {
    "text": "Now what do you do when\nyou visit the node? AUDIENCE: Check out all the-- PROFESSOR: All the\nneighbors, right?",
    "start": "2653030",
    "end": "2659740"
  },
  {
    "text": "Given the node, you have\nto go to the data structure that you have that's\neither this or this, and you have to get\na list of neighbors.",
    "start": "2659740",
    "end": "2667150"
  },
  {
    "text": "If I have this data\nstructure, how fast do I get a list of\nneighbors for a node? AUDIENCE: Order of the degree?",
    "start": "2667150",
    "end": "2674184"
  },
  {
    "text": "PROFESSOR: Yep. Order of the degree of the node. That's good. How about this data structure? ",
    "start": "2674185",
    "end": "2683701"
  },
  {
    "text": "AUDIENCE: Same-- oh,\nno that's order of V. PROFESSOR: Yep. So in this data structure,\nfor example, C only",
    "start": "2683701",
    "end": "2689900"
  },
  {
    "text": "has two edges coming out of it.",
    "start": "2689900",
    "end": "2695020"
  },
  {
    "text": "But I have to go through the\nentire lining of the matrix to see where I have my 0's\nand where I have my 1's.",
    "start": "2695020",
    "end": "2701130"
  },
  {
    "text": "In order to list the neighbors,\nhere is straight up order V, whereas this is order of\nthe degree of the node",
    "start": "2701130",
    "end": "2711420"
  },
  {
    "text": "that I'm looking for. So for this, where it's\nnice and simple, order of V,",
    "start": "2711420",
    "end": "2717229"
  },
  {
    "text": "what is the total running time? ",
    "start": "2717229",
    "end": "2722384"
  },
  {
    "text": "AUDIENCE: Wait, because\nit's B plus B. Oh no, it's the same one. PROFESSOR: So for\neach node I have to?",
    "start": "2722384",
    "end": "2728859"
  },
  {
    "text": "AUDIENCE: V squared. PROFESSOR: OK.  So we're up to V\nsquared already.",
    "start": "2728860",
    "end": "2736950"
  },
  {
    "text": "What else do we need to do? ",
    "start": "2736950",
    "end": "2742890"
  },
  {
    "text": "Anything that they need to\ndo on a node is order of V, so V squared is going to\nbe the total running time. That's it.",
    "start": "2742890",
    "end": "2748589"
  },
  {
    "text": "So if we use an\nadjacency matrix we get order of V squared as\nthe total running time.",
    "start": "2748590",
    "end": "2756340"
  },
  {
    "text": "What about if we lists,\nwhat the running time? I'll give you a hint. You have to use\namortized analysis.",
    "start": "2756340",
    "end": "2763140"
  },
  {
    "text": "Shivers anyone? [LAUGHTER] We know it's order\nV because we're",
    "start": "2763140",
    "end": "2768990"
  },
  {
    "text": "going to visit every node. And you guys didn't see what\nI was going to write here.",
    "start": "2768990",
    "end": "2774139"
  },
  {
    "text": "[LAUGHTER] OK. So for every node I go\nthrough the neighbors and I do something to them.",
    "start": "2774139",
    "end": "2779660"
  },
  {
    "text": "Right? I check if they're in\nseen, if not then I add them to the list.",
    "start": "2779660",
    "end": "2785820"
  },
  {
    "text": "So for every node the work is? AUDIENCE: it's degrees.",
    "start": "2785820",
    "end": "2791619"
  },
  {
    "text": "PROFESSOR: Yep. So if I look at all the nodes? AUDIENCE: That's E.",
    "start": "2791620",
    "end": "2797035"
  },
  {
    "text": "PROFESSOR: Yep.  For every node I have\nto look at its neighbors",
    "start": "2797035",
    "end": "2803180"
  },
  {
    "text": "and I have to see which\nneighbors are in seen. For the neighbors\nthat are not in seen I have to add to my queue.",
    "start": "2803180",
    "end": "2810890"
  },
  {
    "text": "Checking if a neighbor is\nin seen or not is order 1. Adding it to the\nqueue is order 1. So the total work\nfor a node is order",
    "start": "2810890",
    "end": "2817430"
  },
  {
    "text": "of neighbors because of the\nadjacency list, not matrix.",
    "start": "2817430",
    "end": "2824390"
  },
  {
    "text": "If I look at the\nentire graph, here I can't do a local analysis\nlike I did before. If I look at the entire graph\nand I look at all the nodes",
    "start": "2824390",
    "end": "2831015"
  },
  {
    "text": "slash vertices,\nthen the total work is the sum of their degrees.",
    "start": "2831015",
    "end": "2837490"
  },
  {
    "text": "For each node is degree. For total work,\nsum of the degrees. And I have that nice\nhandshaking lemma that says that the sum\nof the degrees is 2,",
    "start": "2837490",
    "end": "2844550"
  },
  {
    "text": "E. So order E. So\ntotal running time? V plus E.",
    "start": "2844550",
    "end": "2852860"
  },
  {
    "text": "OK, can I say that the\nrunning time is order E? With no V's?",
    "start": "2852860",
    "end": "2858966"
  },
  {
    "text": "AUDIENCE: No, because you\nhave to look at every-- ",
    "start": "2858966",
    "end": "2864935"
  },
  {
    "text": "PROFESSOR: Is it? AUDIENCE: V greater\nthan [INAUDIBLE] in case of not\nconnected components?",
    "start": "2864935",
    "end": "2870724"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. ",
    "start": "2870724",
    "end": "2881547"
  },
  {
    "text": "AUDIENCE: It's\npossible that you could have more vertices than edges--",
    "start": "2881548",
    "end": "2886887"
  },
  {
    "text": "PROFESSOR: OK. So it's possible that I have\nmore vertices than edges. I agree with that, but I\ndo anything to the vertices",
    "start": "2886887",
    "end": "2893220"
  },
  {
    "text": "that I haven't seen? ",
    "start": "2893220",
    "end": "2904220"
  },
  {
    "text": "So this is subtle. The difference\nbetween this and this is a matter of how you\nimplement everything.",
    "start": "2904220",
    "end": "2911770"
  },
  {
    "text": "In CLRS they assume that\nthe seen is an array. So all of their nodes\nhave numbers from 1 to V.",
    "start": "2911770",
    "end": "2918220"
  },
  {
    "text": "So then they initialize an\narray, everything is false, and then they set\nthe true elements. In Python we can\nuse a dictionary",
    "start": "2918220",
    "end": "2924255"
  },
  {
    "text": "and not initialize\nit with anything. So if you do it that way in\nPython and code carefully,",
    "start": "2924255",
    "end": "2929750"
  },
  {
    "text": "you can get to order E.\nThe parts of the graph that you don't discover, you\ndon't have to pay for them.",
    "start": "2929750",
    "end": "2935930"
  },
  {
    "text": "If you look at CLRS\ncode, it is definitely V plus E. The difference\nbetween this and this",
    "start": "2935930",
    "end": "2942210"
  },
  {
    "text": "depends on the code. What's the point\nof BFS, by the way? Why do we care?",
    "start": "2942210",
    "end": "2947740"
  },
  {
    "text": "What does it give us?  AUDIENCE: The\nshortest word path.",
    "start": "2947740",
    "end": "2955869"
  },
  {
    "text": "PROFESSOR:The shortest\npath from point? AUDIENCE: From your start\nto where you're going.",
    "start": "2955870",
    "end": "2962450"
  },
  {
    "text": "PROFESSOR:So it gives you the\nshortest path from the node that I'm starting the BFS from.",
    "start": "2962450",
    "end": "2969609"
  },
  {
    "text": "So only from this node? If I start BFS at A\nit's going to give me",
    "start": "2969610",
    "end": "2974630"
  },
  {
    "text": "the length of the shortest\npath from A to which node? ",
    "start": "2974630",
    "end": "2981430"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: All the nodes? AUDIENCE: Yeah. PROFESSOR: All\nthe nodes that are",
    "start": "2981430",
    "end": "2987370"
  },
  {
    "text": "visited by BFS are reachable\nand we have a path from them. How do you compute\nthis distance?",
    "start": "2987370",
    "end": "2993859"
  },
  {
    "text": "Let's see, so what's the\ndistance from A to A? AUDIENCE: 0? PROFESSOR: 0. ",
    "start": "2993860",
    "end": "3000860"
  },
  {
    "text": "When I start from A and I see\nthat its neighbors are B and C, what's the distance from\nA to B and from A to C?",
    "start": "3000860",
    "end": "3008323"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE].  PROFESSOR: OK. Now I look at B. What's the\ndistance between A and A?",
    "start": "3008323",
    "end": "3016950"
  },
  {
    "text": "A is B's neighbor. AUDIENCE: With A and A? PROFESSOR: Yeah. So I have three neighbors.",
    "start": "3016950",
    "end": "3023630"
  },
  {
    "text": "B has three neighbors,\nA, D, and E. So I care about the distances\nbetween A and A, D, E. Distance",
    "start": "3023630",
    "end": "3035309"
  },
  {
    "text": "A, A, distance A, D, and\ndistance A, E. This one is 0.",
    "start": "3035310",
    "end": "3044230"
  },
  {
    "text": "How about the distances\nbetween A and D and A and E? They're 2.",
    "start": "3044230",
    "end": "3049350"
  },
  {
    "text": " So the way I would\ncompute these distances",
    "start": "3049350",
    "end": "3055375"
  },
  {
    "text": "is that I start with A being 0. The distance from A to A is 0. And then when I look at a node,\nwhen I discover the neighbors,",
    "start": "3055375",
    "end": "3063120"
  },
  {
    "text": "all the neighbors that don't\nhave smiley faces on them get the node's distance plus 1. You can get to them by\ngetting in the current node",
    "start": "3063120",
    "end": "3070190"
  },
  {
    "text": "and then traversing an edge. When you do that it's\nimportant that you don't update the distances of the nodes\nthat have smiley faces.",
    "start": "3070190",
    "end": "3077339"
  },
  {
    "text": "If you do, you're going to say\nthat the distance from A to A is 2 and all hell\nbreaks lose from there.",
    "start": "3077340",
    "end": "3082890"
  },
  {
    "text": " AUDIENCE: Wait, why would\nyou say it would be 2? PROFESSOR: If I forget the\nfact that it has a smiley face.",
    "start": "3082890",
    "end": "3090820"
  },
  {
    "text": "So if I go through\nall these neighbors and I say the\ndistance from A to B is one then the distance from\nA to all of B's neighbors",
    "start": "3090820",
    "end": "3099180"
  },
  {
    "text": "has to be 2. That would be wrong. AUDIENCE: Wait,\nfrom A to all of--",
    "start": "3099180",
    "end": "3104420"
  },
  {
    "text": "PROFESSOR: B's neighbors. AUDIENCE: From A to all of--\nOh, because A is one Of-- PROFESSOR: B's neighbors.",
    "start": "3104420",
    "end": "3109862"
  },
  {
    "text": "AUDIENCE: Yeah OK. PROFESSOR: The\nsmileys tell me which vertices I've already\nseen and I've already,",
    "start": "3109862",
    "end": "3116349"
  },
  {
    "text": "presumably computed\ndistances for them. We don't want to update those.",
    "start": "3116350",
    "end": "3121960"
  },
  {
    "text": "OK this is BFS in essence. One question. Between Facebook and\nTwitter, which one's directed",
    "start": "3121960",
    "end": "3128130"
  },
  {
    "text": "and which one's undirected?  AUDIENCE: Facebook\nis undirected.",
    "start": "3128130",
    "end": "3135020"
  },
  {
    "text": "PROFESSOR: OK. Facebook is undirected.",
    "start": "3135020",
    "end": "3143970"
  },
  {
    "text": "Why is it undirected? AUDIENCE: [INAUDIBLE]. AUDIENCE: [INAUDIBLE].",
    "start": "3143970",
    "end": "3149606"
  },
  {
    "text": " AUDIENCE: When you follow\nsomeone they don't necessarily",
    "start": "3149606",
    "end": "3156050"
  },
  {
    "text": "follow you. PROFESSOR: OK. So this is Twitter, right? ",
    "start": "3156050",
    "end": "3162630"
  },
  {
    "text": "Twitter, directed\nbecause of follows.",
    "start": "3162630",
    "end": "3169430"
  },
  {
    "text": "Has anyone used\nFacebook recently? Did you guys see\nthere's a new option? AUDIENCE: The little\nscroll bar on the side?",
    "start": "3169430",
    "end": "3176440"
  },
  {
    "text": "PROFESSOR: Subscribers. AUDIENCE: Oh, ya. PROFESSOR: OK, so how\ndo subscribers work?",
    "start": "3176440",
    "end": "3181454"
  },
  {
    "text": "AUDIENCE: You subscribe. It's like google plus. [LAUGHTER] PROFESSOR: OK. Directed are undirected?",
    "start": "3181455",
    "end": "3187220"
  },
  {
    "text": "If I subscribe to you do\nyou have to subscribe to me? AUDIENCE: Directed. ",
    "start": "3187220",
    "end": "3200410"
  },
  {
    "text": "PROFESSOR: So which one is it? AUDIENCE: I guess Facebook\nis kind of directed now because you can\nunsubscribe from people.",
    "start": "3200410",
    "end": "3208210"
  },
  {
    "text": "PROFESSOR: Is it? So Facebook has\ntwo graphs in it.",
    "start": "3208210",
    "end": "3213319"
  },
  {
    "text": "They happen to have\nthe same vertices. The people are the\nvertices in both graphs. But the friends relationship\ndefines an undirected graph.",
    "start": "3213320",
    "end": "3223350"
  },
  {
    "text": "The subscribers relationship\ndefines a directed graph. The graphs are\ncompletely different.",
    "start": "3223350",
    "end": "3228499"
  },
  {
    "text": "And there are two graphs. That's the right way\nto reason about them. that's why it was\nslightly tricky.",
    "start": "3228499",
    "end": "3233780"
  },
  {
    "text": " Can someone think of a cool\nway to use BFS on Facebook?",
    "start": "3233780",
    "end": "3240180"
  },
  {
    "text": " AUDIENCE: That's\nnetworks, right? Figuring out how many people\nare in the first degree",
    "start": "3240180",
    "end": "3247290"
  },
  {
    "text": "or second degree. MySpace was really into that. PROFESSOR: Lincoln\nalso does that, right?",
    "start": "3247290",
    "end": "3252340"
  },
  {
    "text": "How many people\nare your friends? How many people are\nyour friend's friends? So and so forth.",
    "start": "3252340",
    "end": "3257730"
  },
  {
    "text": "Now suppose you want to\nget to someone in Facebook and you don't know\nthem directly.",
    "start": "3257730",
    "end": "3262860"
  },
  {
    "text": "They're not your friends. Presumably, you\nwant to get to them through the minimum\namount of effort.",
    "start": "3262860",
    "end": "3269240"
  },
  {
    "text": "So you want to see do you\nhave a friend that knows them? If not, do you\nhave a friend that knows a friend that knows them?",
    "start": "3269240",
    "end": "3275130"
  },
  {
    "text": "Do you have a friend\nthat knows a friend that knows a friend that knows them? So and so forth. So BFS will give you\nthat minimum path.",
    "start": "3275130",
    "end": "3280957"
  },
  {
    "text": " OK. do the graphs make sense?",
    "start": "3280957",
    "end": "3286144"
  },
  {
    "text": "So by the way, the\nBFS on Facebook is just the beginning\nof a ton of cool things you can with graph algorithms.",
    "start": "3286144",
    "end": "3291833"
  },
  {
    "start": "3291833",
    "end": "3292333"
  }
]