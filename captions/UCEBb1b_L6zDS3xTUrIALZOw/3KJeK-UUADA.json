[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "In this exercise, we will learn how semaphores\ncan be used to ensure that different precedence",
    "start": "280",
    "end": "5230"
  },
  {
    "text": "constraints in our programs can be satisfied.",
    "start": "5230",
    "end": "9099"
  },
  {
    "text": "Before diving into the use of semaphores to\nenforce our precedence requirements, let's",
    "start": "9099",
    "end": "13750"
  },
  {
    "text": "review what tools we have available to us.",
    "start": "13751",
    "end": "16890"
  },
  {
    "text": "You can think of a semaphore as a shared resource\nthat is limited in quantity.",
    "start": "16890",
    "end": "21590"
  },
  {
    "text": "If we have a semaphore S that is initialized\nto 0 then it represents the fact that currently",
    "start": "21590",
    "end": "27520"
  },
  {
    "text": "resource S is not available.",
    "start": "27520",
    "end": "30160"
  },
  {
    "text": "If S equals 1, then that means that exactly\none S resource is available for use.",
    "start": "30160",
    "end": "36329"
  },
  {
    "text": "If S equals 2, then there are 2 S resources\navailable, and so on.",
    "start": "36329",
    "end": "41910"
  },
  {
    "text": "In order to make use of the shared resource,\na process must first grab that resource.",
    "start": "41910",
    "end": "47480"
  },
  {
    "text": "This is achieved by adding a wait(S) call\nbefore the code that requires the resource.",
    "start": "47480",
    "end": "53520"
  },
  {
    "text": "As long as the value of S equals 0, the code\nthat is waiting for this resource is stalled",
    "start": "53520",
    "end": "58940"
  },
  {
    "text": "meaning that it can't get past the wait(S)\ncommand.",
    "start": "58940",
    "end": "63440"
  },
  {
    "text": "To get past the wait(S) call, the value of\nsemaphore S must be greater than 0, indicating",
    "start": "63440",
    "end": "69640"
  },
  {
    "text": "that the resource is available.",
    "start": "69640",
    "end": "72439"
  },
  {
    "text": "Grabbing the resource is achieved by decrementing\nthe value of the semaphore by 1.",
    "start": "72439",
    "end": "78049"
  },
  {
    "text": "Analogous to the wait(S) command, we have\na signal(S) command.",
    "start": "78049",
    "end": "82259"
  },
  {
    "text": "A signal of semaphore S indicates that one\nadditional S resource has become available.",
    "start": "82259",
    "end": "88420"
  },
  {
    "text": "The signal(S) command increments the value\nof S by 1.",
    "start": "88420",
    "end": "92259"
  },
  {
    "text": "The result of this is that a process that\nis waiting on S will now be able to grab it",
    "start": "92260",
    "end": "97899"
  },
  {
    "text": "and proceed with the next line of code.",
    "start": "97899",
    "end": "100610"
  },
  {
    "text": "Now, lets consider two processes, P1 and P2,\nthat run concurrently.",
    "start": "100610",
    "end": "106240"
  },
  {
    "start": "101000",
    "end": "101000"
  },
  {
    "text": "P1 has two sections of code where section\nA is followed by section B.",
    "start": "106240",
    "end": "111438"
  },
  {
    "text": "Similarly, P2 has two sections which are C\nfollowed by D.",
    "start": "111439",
    "end": "118020"
  },
  {
    "text": "Within each process execution proceeds sequentially,\nso we are guaranteed that A will always precede",
    "start": "118020",
    "end": "123950"
  },
  {
    "text": "B, and C will always precede D.\nLet's also assume that there is no looping",
    "start": "123950",
    "end": "129479"
  },
  {
    "text": "and that each process runs exactly once.",
    "start": "129479",
    "end": "132870"
  },
  {
    "text": "We want to consider how we can make use of\ndifferent semaphores to ensure any necessary",
    "start": "132870",
    "end": "137640"
  },
  {
    "text": "precedence constraints in the code.",
    "start": "137640",
    "end": "140269"
  },
  {
    "start": "140000",
    "end": "140000"
  },
  {
    "text": "Suppose that the constraint that we need to\nsatisfy is that the section B code completes",
    "start": "140269",
    "end": "145680"
  },
  {
    "text": "before the section C code begins execution.",
    "start": "145680",
    "end": "149870"
  },
  {
    "text": "We can achieve this using semaphore S by first\ninitializing the semaphore to 0 in shared",
    "start": "149870",
    "end": "155750"
  },
  {
    "text": "memory.",
    "start": "155750",
    "end": "156880"
  },
  {
    "text": "Next, in order to ensure that section C code\ndoes not begin running too early, we add a",
    "start": "156880",
    "end": "163680"
  },
  {
    "text": "wait(S) call before the section C code.",
    "start": "163680",
    "end": "167890"
  },
  {
    "text": "As long as S = 0, the code in process P2 will\nnot get to run.",
    "start": "167890",
    "end": "172640"
  },
  {
    "text": "P1 on the other hand, will not be constrained\nin this way, so section A code can begin running",
    "start": "172640",
    "end": "179160"
  },
  {
    "text": "right away.",
    "start": "179160",
    "end": "180799"
  },
  {
    "text": "Since section B follows section A, it will\nbe executed after section A.",
    "start": "180799",
    "end": "185349"
  },
  {
    "text": "Once B completes, process P1 needs to signal\nour semaphore to indicate that it is now okay",
    "start": "185349",
    "end": "193299"
  },
  {
    "text": "for process P2 to begin its execution.",
    "start": "193299",
    "end": "196269"
  },
  {
    "text": "The signal(S) call will set S = 1, which will\nallow P2 to finally move beyond the wait(S)",
    "start": "196269",
    "end": "203930"
  },
  {
    "text": "command.",
    "start": "203930",
    "end": "205030"
  },
  {
    "start": "205000",
    "end": "205000"
  },
  {
    "text": "Next, lets consider a slightly more complicated\nconstraint where section D precedes section",
    "start": "205030",
    "end": "210580"
  },
  {
    "text": "A, OR section B precedes section C.\nIn other words, P1 and P2 cannot overlap.",
    "start": "210580",
    "end": "219810"
  },
  {
    "text": "One has to run followed by the other but either\nof them can be the one to run first.",
    "start": "219810",
    "end": "225799"
  },
  {
    "text": "To achieve this we want to use our S semaphore\nas a mutual exclusion semaphore.",
    "start": "225799",
    "end": "231180"
  },
  {
    "text": "A mutual exclusion semaphore, or mutex, ensures\nthat only one complete block of code can run",
    "start": "231180",
    "end": "237579"
  },
  {
    "text": "at a time without getting interrupted.",
    "start": "237579",
    "end": "240459"
  },
  {
    "text": "This can be achieved by initializing our semaphore\nS to 1 and having a wait(S) statement at the",
    "start": "240459",
    "end": "246319"
  },
  {
    "text": "top of both processes.",
    "start": "246319",
    "end": "248579"
  },
  {
    "text": "Since S is initialized to 1, only one of the\ntwo processes will be able to grab the S semaphore.",
    "start": "248579",
    "end": "254799"
  },
  {
    "text": "Whichever process happens to grab it first\nis the one that will run first.",
    "start": "254799",
    "end": "259100"
  },
  {
    "text": "There is one last piece of code we need to\nadd to complete our requirements which is",
    "start": "259100",
    "end": "262980"
  },
  {
    "text": "that at the end of both processes' code, we\nmust signal(S).",
    "start": "262980",
    "end": "267970"
  },
  {
    "text": "If we do not signal(S) then only the process\nthat happened to grab the S semaphore first",
    "start": "267970",
    "end": "274009"
  },
  {
    "text": "will get to run while the other is stuck waiting\nfor the S semaphore.",
    "start": "274009",
    "end": "278570"
  },
  {
    "text": "If at the end of the process, we signal S,\nthen S gets incremented back to 1 thus allowing",
    "start": "278570",
    "end": "284720"
  },
  {
    "text": "the next process to execute.",
    "start": "284720",
    "end": "287400"
  },
  {
    "text": "Note that because this code does not loop,\nthere is no concern about the first process",
    "start": "287400",
    "end": "291449"
  },
  {
    "text": "grabbing the S semaphore again.",
    "start": "291450",
    "end": "293980"
  },
  {
    "text": "Finally, lets consider one last set of constraints.",
    "start": "293980",
    "end": "297460"
  },
  {
    "start": "294000",
    "end": "294000"
  },
  {
    "text": "In this case, we want to ensure that the first\nsection of both processes P1 and P2 run before",
    "start": "297460",
    "end": "303750"
  },
  {
    "text": "the second section of processes P1 and P2.",
    "start": "303750",
    "end": "307539"
  },
  {
    "text": "In other words A must precede B and D, and\nC must precede B and D.",
    "start": "307539",
    "end": "313030"
  },
  {
    "text": "The constraint that A must precede B, and\nC must precede D is satisfied by default because",
    "start": "313030",
    "end": "318910"
  },
  {
    "text": "the code is always executed in order.",
    "start": "318910",
    "end": "321910"
  },
  {
    "text": "This means that our constraint reduces to\nA preceding D, and C preceding B.",
    "start": "321910",
    "end": "328509"
  },
  {
    "text": "To achieve this, we need to use two semaphores,\nsay S and T and initialize them to 0.",
    "start": "328509",
    "end": "337080"
  },
  {
    "text": "After the first section of a process completes,\nit should signal to the other process that",
    "start": "337080",
    "end": "341810"
  },
  {
    "text": "it may begin its second section of code provided\nthat it has already completed its first section",
    "start": "341810",
    "end": "347241"
  },
  {
    "text": "of code.",
    "start": "347241",
    "end": "348241"
  },
  {
    "text": "To ensure that it has already completed its\nfirst section of code, we place the signal",
    "start": "348241",
    "end": "353180"
  },
  {
    "text": "calls between the two sections of code in\neach process.",
    "start": "353180",
    "end": "357590"
  },
  {
    "text": "In addition to signaling the other process\nthat it may proceed, each of the processes",
    "start": "357590",
    "end": "362660"
  },
  {
    "text": "needs to wait for the semaphore that the other\nprocess is signaling.",
    "start": "362660",
    "end": "366949"
  },
  {
    "text": "This combination of signal and wait ensures\nthat sections A and C of the code will run",
    "start": "366949",
    "end": "372259"
  },
  {
    "text": "before sections B and D.\nSince the semaphores are initialized to 0,",
    "start": "372259",
    "end": "378169"
  },
  {
    "text": "the wait(S) will not complete until P1 calls\nsignal(S) at which point it has already completed",
    "start": "378169",
    "end": "384060"
  },
  {
    "text": "section A.\nSimilarly, the wait(T) will not complete until",
    "start": "384060",
    "end": "389610"
  },
  {
    "text": "P2 calls signal(T) at which point it has already\ncompleted section C.",
    "start": "389610",
    "end": "395949"
  },
  {
    "text": "So once the processes can get past their wait\ncommands, we are guaranteed that both first",
    "start": "395950",
    "end": "401009"
  },
  {
    "text": "sections of code have already run.",
    "start": "401009",
    "end": "404040"
  },
  {
    "text": "We have also not forced any additional constraints\nby requiring A to run before C or C to run",
    "start": "404040",
    "end": "410539"
  },
  {
    "text": "before A, and so on.",
    "start": "410539",
    "end": "414520"
  },
  {
    "text": "Of course we could have swapped our use of\nthe S and T semaphores and ended up with exactly",
    "start": "414520",
    "end": "419030"
  },
  {
    "text": "the same behavior.",
    "start": "419030",
    "end": "420470"
  },
  {
    "text": "Note, however, that we cannot swap the signal\nand wait commands around.",
    "start": "420470",
    "end": "425759"
  },
  {
    "text": "If we tried to call wait before signal, then\nboth processes would get deadlocked waiting",
    "start": "425759",
    "end": "431150"
  },
  {
    "text": "for a semaphore that never gets signaled.",
    "start": "431150",
    "end": "433960"
  },
  {
    "text": "This highlights the fact that when using semaphores\nyou must always be very careful to not only",
    "start": "433960",
    "end": "439199"
  },
  {
    "text": "worry about satisfying the desired requirements,\nbut also ensuring that there is no possibility",
    "start": "439200",
    "end": "445110"
  },
  {
    "text": "of ending up in a deadlock situation where\none or more processes can never run to completion.",
    "start": "445110",
    "end": "451280"
  }
]