[
  {
    "start": "0",
    "end": "168000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "7029"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "7030",
    "end": "13990"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13990",
    "end": "30550"
  },
  {
    "text": "PROFESSOR: So, for\nthe last two lectures we've been talking about\nanalyzing algorithms,",
    "start": "30550",
    "end": "36990"
  },
  {
    "text": "complexity, orders of growth. How do we estimate the\ncost of an algorithm as the size of the input grows?",
    "start": "36990",
    "end": "43320"
  },
  {
    "text": "And as I've said\nseveral times, I'll say at least once\nmore, how do we also turn it the other direction? How do we use thoughts about\nchoices of pieces of algorithm",
    "start": "43320",
    "end": "52230"
  },
  {
    "text": "in terms of\nimplications on the cost it's going to take\nus to compute? We saw last time a set of\nexamples-- constant algorithms,",
    "start": "52230",
    "end": "61230"
  },
  {
    "text": "linear algorithms, logarithmic\nalgorithms, linear algorithms,",
    "start": "61230",
    "end": "66390"
  },
  {
    "text": "quadratic algorithms,\nexponential algorithms. Today, what I'm\ngoing to do is fill in one more piece, a log linear\nalgorithm-- something that's",
    "start": "66390",
    "end": "74399"
  },
  {
    "text": "really a nice kind of algorithm\nto have-- and use it to talk about one last class\nof algorithms that",
    "start": "74400",
    "end": "80549"
  },
  {
    "text": "are really valuable, and those\nare searching and sorting algorithms.",
    "start": "80550",
    "end": "85630"
  },
  {
    "text": "So a search algorithm. Kind of an obvious statement. You use them all the time\nwhen you go to Google or Bing",
    "start": "85630",
    "end": "91800"
  },
  {
    "text": "or whatever your favorite\nsearch mechanism on the web is. It's just a way to find an\nitem or a group of items",
    "start": "91800",
    "end": "99280"
  },
  {
    "text": "from a collection. If you think about\nit, that collection could be either\nimplicit or explicit.",
    "start": "99280",
    "end": "107002"
  },
  {
    "text": "So way back at the\nbeginning of the term, we saw an example of\na search algorithm when you were looking\nfor square roots.",
    "start": "107002",
    "end": "113600"
  },
  {
    "text": "And we saw simple things\nlike exhaustive enumeration. We'd go through all\nthe possibilities. We saw our first version\nof bisection search",
    "start": "113600",
    "end": "120770"
  },
  {
    "text": "there, where you would\ndo approximations. Newton-Raphson-- these are all\nexamples of a search algorithm",
    "start": "120770",
    "end": "125960"
  },
  {
    "text": "where the collection\nis implicit. So all the numbers between some\npoint that some other point.",
    "start": "125960",
    "end": "131900"
  },
  {
    "text": "More common is a\nsearch algorithm where the collection\nis explicit. I don't know.",
    "start": "131900",
    "end": "136950"
  },
  {
    "text": "For example, I've got all\nthe data records of students and I want to know how do I\nfind a particular student,",
    "start": "136950",
    "end": "142040"
  },
  {
    "text": "so I can record that A plus\nthat everybody in this room is going to get next\nTuesday on that exam?",
    "start": "142040",
    "end": "147855"
  },
  {
    "text": "That's not a promise. Sorry. But we'll work on it. So could do it implicit,\ncould do it explicit.",
    "start": "147855",
    "end": "153230"
  },
  {
    "text": "Today I want to focus on\ndoing search explicitly. And it could be on different\nkinds of collections,",
    "start": "153230",
    "end": "159319"
  },
  {
    "text": "but I'm going to focus-- just\nas an example-- on search over lists. And to make it a little\neasier, let's just do search",
    "start": "159320",
    "end": "165110"
  },
  {
    "text": "over lists of numbers. But it could obviously be\nother kinds of elements. Now you've already seen\nsome of this, right?",
    "start": "165110",
    "end": "171319"
  },
  {
    "start": "168000",
    "end": "204000"
  },
  {
    "text": "We did search where we said,\nwe can do linear search. Brute force. Just walk down the list\nlooking at everything",
    "start": "171320",
    "end": "177950"
  },
  {
    "text": "till we either find the\nthing we're looking for or we get to the\nend of the list. Sometimes also called\nBritish Museum algorithm",
    "start": "177950",
    "end": "184340"
  },
  {
    "text": "or exhaustive enumeration. I go through\neverything in the list. Nice news is, the list\ndoesn't have to be sorted.",
    "start": "184340",
    "end": "190140"
  },
  {
    "text": "It could be just\nin arbitrary order. What we saw is that the\nexpected-- sorry, not expected.",
    "start": "190140",
    "end": "196380"
  },
  {
    "text": "The worst case\nbehavior is linear. In the worst case, the\nelement's not in the list. I got to look at everything.",
    "start": "196380",
    "end": "201806"
  },
  {
    "text": "So it's going to be linear\nin terms of complexity. And then we looked\nat bisection search, where we said the list\nneeds to be sorted.",
    "start": "201806",
    "end": "209739"
  },
  {
    "text": "But if it is, we can actually\nbe much more efficient because we can take advantage\nof the sorting to cut down",
    "start": "209740",
    "end": "216270"
  },
  {
    "text": "the size of the problem. And I'll remind you\nabout both of those. There was our simple\nlittle linear search.",
    "start": "216270",
    "end": "222370"
  },
  {
    "text": "Right? Set a flag that says,\nI haven't yet found it. And then just loop over\nthe indices into the list.",
    "start": "222370",
    "end": "228120"
  },
  {
    "text": "I could have also just\nlooped directly over the list itself, checking to see if\nthe ith member of the list",
    "start": "228120",
    "end": "233560"
  },
  {
    "text": "is the thing I'm looking for. If it is, change\nthe flag to true so that when I come\nout of all of this",
    "start": "233560",
    "end": "239280"
  },
  {
    "text": "I'll return the flag--\neither false because it was set that way initially\nor true because I found it. And of course what we knew is\nwe have to look at everything",
    "start": "239280",
    "end": "246359"
  },
  {
    "text": "to see if it's there or not. I could speed this up by just\nreturning true at this point.",
    "start": "246360",
    "end": "252750"
  },
  {
    "text": "While that would improve\nthe average case, doesn't improve the worst case. And that's the thing we\nusually are concerned about,",
    "start": "252750",
    "end": "258630"
  },
  {
    "text": "because in the worst case I've\ngot to go through everything. And just to remind\nyou, we said this is order length of the list.",
    "start": "258630",
    "end": "264960"
  },
  {
    "text": "To go around this\npart-- the loop right here-- and inside the\nloop, it's constant work.",
    "start": "264960",
    "end": "270090"
  },
  {
    "text": "I'm doing the same number\nof things each time. That's order n times order 1. And by our rules,\nthat's just order n.",
    "start": "270090",
    "end": "276790"
  },
  {
    "text": "So it's linear in the\nsize of the problem. OK.",
    "start": "276790",
    "end": "282979"
  },
  {
    "text": "We said we could do\nit on sorted lists. But just again, we'll\nwalk down the list. Again, here I could loop\nover everything in the list,",
    "start": "282980",
    "end": "290350"
  },
  {
    "text": "checking to see if\nit's the thing I want. Return true. And if I ever get to a point\nwhere the element of the list",
    "start": "290350",
    "end": "296530"
  },
  {
    "text": "is bigger than the\nthing I'm looking for, I know it can't be in\nthe rest of the list because all the things to\nthe right are bigger yet.",
    "start": "296530",
    "end": "303250"
  },
  {
    "text": "I could just Return\nfalse and drop out. In terms of average\nbehavior, this",
    "start": "303250",
    "end": "308500"
  },
  {
    "text": "is better because\nit's going to stop as soon as it gets\nto a point where it can rule everything else out.",
    "start": "308500",
    "end": "314060"
  },
  {
    "text": "But in terms of complexity,\nit's still order n. Because I still on average\nhave-- not average.",
    "start": "314060",
    "end": "320673"
  },
  {
    "text": "In the worst case,\nI'm still going to be looking n times\nthrough the loop before I get to a point where\nI can decide to bail out of it.",
    "start": "320674",
    "end": "327490"
  },
  {
    "text": "So order n. And then finally-- last piece\nof recap-- bisection search.",
    "start": "327490",
    "end": "335259"
  },
  {
    "start": "329000",
    "end": "473000"
  },
  {
    "text": "Repeat again. The idea here is, take\nthe midpoint of the list. Look at that element.",
    "start": "335260",
    "end": "340322"
  },
  {
    "text": "If it's the thing I'm\nlooking for, great. I just won the lottery. If it isn't, decide\nis the thing I'm",
    "start": "340322",
    "end": "345940"
  },
  {
    "text": "looking for bigger or less\nthan that middle point. If it's bigger than that, I only\nuse the upper half of the list.",
    "start": "345940",
    "end": "353740"
  },
  {
    "text": "If it's less than that, I only\nuse the lower half of the list. And the characteristic\nhere was, at each step,",
    "start": "353740",
    "end": "360870"
  },
  {
    "text": "I'm reducing the size\nof the problem in half. I'm throwing away half of the\nremaining list at each step.",
    "start": "360870",
    "end": "366460"
  },
  {
    "text": "And I'll just remind\nyou of that code. I know it's a lot here,\nbut just to remind you. It said, down here if\nI've got an empty list,",
    "start": "366460",
    "end": "373060"
  },
  {
    "text": "it can't be there. I'm going to Return false. Otherwise call this\nlittle helper function with the list, the thing\nfor which I'm searching,",
    "start": "373060",
    "end": "381099"
  },
  {
    "text": "and the beginning and end\npoint indices into the list. Initially the start\nand the very end.",
    "start": "381100",
    "end": "387910"
  },
  {
    "text": "And this code up\nhere basically says, if those two numbers are the\nsame I'm down to a list of one.",
    "start": "387910",
    "end": "394919"
  },
  {
    "text": "Just check to see if it's\nthe thing I'm looking for. Otherwise, pick something\nhalfway in between.",
    "start": "394920",
    "end": "400710"
  },
  {
    "text": "And ignore this\ncase for the moment. Basically then check\nto see, is the thing at that point bigger than e?",
    "start": "400710",
    "end": "406530"
  },
  {
    "text": "In which case, I'm\nin general going to call this only with from\nthe low point to the midpoint.",
    "start": "406530",
    "end": "411920"
  },
  {
    "text": "Otherwise I'm going to call\nthis with the midpoint to high. And that was just this\nidea of, keep cutting down",
    "start": "411920",
    "end": "417480"
  },
  {
    "text": "in half the size of the list. Last piece of the\nrecap-- the thing we wanted you to see here--\nis there are the two recursive",
    "start": "417480",
    "end": "424650"
  },
  {
    "text": "calls. I'm only going to do one\nbecause I'm making a decision. At each step, I'm cutting\ndown the problem by half.",
    "start": "424650",
    "end": "432570"
  },
  {
    "text": "And that says the number of\nsteps, the number of times I'm going to iterate\nthrough here, will be log in the\nlength of the list.",
    "start": "432570",
    "end": "439822"
  },
  {
    "text": "And if that still doesn't\nmake sense to you, it says, I need to know when 1\nover 2 to the k-- where k is the number of\nsteps-- is equal to 1.",
    "start": "439822",
    "end": "447370"
  },
  {
    "text": "Because in each step,\nI'm reducing by half. And that's when k\nis log base 2 of n. So that's why it's log linear.",
    "start": "447370",
    "end": "454970"
  },
  {
    "text": "And so this just reminds you. Again, that recap. Number of calls\nreduced-- or, sorry. The call gets reduced by\na factor or two each time.",
    "start": "454970",
    "end": "462000"
  },
  {
    "text": "I'm going to have a log\nn work going around it. And inside it's a\nconstant amount of work because I'm just\npassing the pointers,",
    "start": "462000",
    "end": "468660"
  },
  {
    "text": "I'm not actually\ncopying the list. And that's a nice state to be. OK, so-- sounds good.",
    "start": "468660",
    "end": "477420"
  },
  {
    "start": "473000",
    "end": "660000"
  },
  {
    "text": "Could just use linear search. It's going to be linear. When you use binary search\nor bisection search,",
    "start": "477420",
    "end": "483000"
  },
  {
    "text": "we can do it in log time. That's great. We assumed the list was\nsorted, but all right.",
    "start": "483000",
    "end": "488400"
  },
  {
    "text": "So that lens basically says, OK. So when does it make\nsense to sort the list",
    "start": "488400",
    "end": "495879"
  },
  {
    "text": "and then do the search? Right? Because if I can sort\nthe list cheaply, then the search is\ngoing to be logarithmic.",
    "start": "495880",
    "end": "502060"
  },
  {
    "text": "That's really what I would like. This little expression\nbasically says,",
    "start": "502060",
    "end": "507210"
  },
  {
    "text": "let's let sort be the\ncost of sorting the list. I want to know when that cost\nplus something that's order",
    "start": "507210",
    "end": "513169"
  },
  {
    "text": "log n-- which is what it's going\nto cost me to do this search. When is that less than\nsomething that's order n?",
    "start": "513169",
    "end": "520156"
  },
  {
    "text": "Because then it's going to be\nbetter to do the sort first than do the search. And so I can just rearrange it. It needs to be, when does the\ncost of sorting-- when is it",
    "start": "520156",
    "end": "527560"
  },
  {
    "text": "last than this expression? Which basically\nsays, when is sorting going to be less expensive\nthan the linear cost?",
    "start": "527560",
    "end": "534555"
  },
  {
    "text": " Crud. Actually, good news\nfor you, right?",
    "start": "534555",
    "end": "540650"
  },
  {
    "text": "This is a really short lecture. Because it says it's never true. Ouch.",
    "start": "540650",
    "end": "546240"
  },
  {
    "text": "Don't worry. We've got more to\ngo on the lecture. The reason it can't be\ntrue-- if you think about it just informally-- is, if I've\ngot a collection of n elements",
    "start": "546241",
    "end": "554330"
  },
  {
    "text": "and I want to sort\nit, I've got to look at each one of those\nelements at least once.",
    "start": "554330",
    "end": "560160"
  },
  {
    "text": "Right? I have to look at them\nto decide where they go. Oh, that's n elements. So sorting must be\nat least order n,",
    "start": "560160",
    "end": "568019"
  },
  {
    "text": "because I got to\nlook at everything. And in fact as it\nsays there, I'm going to have to use at least\nlinear time to do the sort.",
    "start": "568020",
    "end": "576810"
  },
  {
    "text": "Sounds like we're\nstuck, but we're not. And the reason is,\noften when I want",
    "start": "576810",
    "end": "582730"
  },
  {
    "text": "to search something I'm going\nto do multiple searches, but I may only want\nto sort the list once.",
    "start": "582730",
    "end": "588160"
  },
  {
    "text": "In fact, I probably only\nwant to sort the list once. So in that case, I'm\nspreading out the cost.",
    "start": "588160",
    "end": "593860"
  },
  {
    "text": "I'm amortizing the\nexpense of the sort. And now what I want to know is,\nif I'm going to do k searches,",
    "start": "593860",
    "end": "601260"
  },
  {
    "text": "the cost of those\nk searches I know is going to be k log n-- because\nit's log to do the search.",
    "start": "601260",
    "end": "607080"
  },
  {
    "text": "And I simply need\nto know, is the cost of sorting plus\nthis-- can I have something where it's less\nthan k searches just using",
    "start": "607080",
    "end": "615209"
  },
  {
    "text": "linear search? And the answer is, yes. There are going to be,\nfor large k's, ways",
    "start": "615210",
    "end": "621620"
  },
  {
    "text": "in which we can do the sort\nwhere the sort time becomes irrelevant, that\nthe cost is really dominated by this search.",
    "start": "621620",
    "end": "628664"
  },
  {
    "text": "And so what I want to do\nnow is look at-- all right. How could we do the sort\nreasonably efficiently?",
    "start": "628664",
    "end": "634192"
  },
  {
    "text": "It's going to have to\nbe at least linear. We're going to see it's going\nto be a little more than linear. But if I could do it reasonably,\nI'm going to be in good shape",
    "start": "634192",
    "end": "640730"
  },
  {
    "text": "here. So what I want to do is show\nyou a number of ways in which we can do sorting-- take\na list of elements",
    "start": "640730",
    "end": "647150"
  },
  {
    "text": "and sort them from, in this\ncase, smaller to higher or increasing order.",
    "start": "647150",
    "end": "652920"
  },
  {
    "text": "So here's my goal. I want to efficiently\nsort a list. I want to see if we can do this\nas efficiently as possible.",
    "start": "652920",
    "end": "660930"
  },
  {
    "start": "660000",
    "end": "747000"
  },
  {
    "text": "I'm going to start,\nyou might say, with a humorous version of sort. You're all convinced that\nmy humor is non-existent.",
    "start": "660930",
    "end": "667470"
  },
  {
    "text": "You're right. But it sets the stage for it. This is a sort. You can look it up. It's called monkey sort, BOGO\nsort, stupid sort, slow sort,",
    "start": "667470",
    "end": "674180"
  },
  {
    "text": "permutation sort, shotgun sort. And here's how it works. Anna has nicely given me a\nset of numbers on cards here.",
    "start": "674180",
    "end": "680700"
  },
  {
    "text": "Here's how you do BOGO sort. I got to do that better. I got to spread them\nout randomly, like this.",
    "start": "680700",
    "end": "689360"
  },
  {
    "text": "Oh good. I'm going to have\nto-- sorry, Tom. I'm not walking. And now I pick them up,\nsaying, is that less than this?",
    "start": "689360",
    "end": "694880"
  },
  {
    "text": "Which is less than-- oh, crud. They're not sorted. All right.",
    "start": "694880",
    "end": "700250"
  },
  {
    "text": "I pick them all up\nand I do it again. A little brain damage, right?",
    "start": "700250",
    "end": "707410"
  },
  {
    "text": "Now it's intended to\nget your attention. I did. I heard a couple of chuckles. Those are A\nstudents, by the way. I heard a couple\nof chuckles here.",
    "start": "707410",
    "end": "714820"
  },
  {
    "text": "We could actually do\nthis exhaustively. Basically it's called\npermutation sort",
    "start": "714820",
    "end": "720190"
  },
  {
    "text": "because you could search through\nall possible permutations to see if you find\nsomething that's sorted.",
    "start": "720190",
    "end": "726430"
  },
  {
    "text": "That, by the way--\nthe complexity of that is something like n\nfactorial, which for large n",
    "start": "726430",
    "end": "732910"
  },
  {
    "text": "is n to the nth power. And if n's anything bigger\nthan about 2, don't do it.",
    "start": "732910",
    "end": "739040"
  },
  {
    "text": "Right? But it would be a way to\nthink about doing this. All right. Now, having caught the humorous\nversion of this, how could",
    "start": "739040",
    "end": "744699"
  },
  {
    "text": "we do this a little bit better? Oh sorry. I should say, what's\nthe complexity?",
    "start": "744700",
    "end": "749850"
  },
  {
    "start": "747000",
    "end": "883000"
  },
  {
    "text": "There's a nice crisp\ndefinition of BOGO sort. Its best case is order\nn, because I just",
    "start": "749850",
    "end": "755889"
  },
  {
    "text": "need to check it's sorted. Its average case is n\nfactorial and its worst case,",
    "start": "755890",
    "end": "761230"
  },
  {
    "text": "if I'm just doing it\nrandomly, is God knows. Because I could be\ndoing it here forever. So we're going to move on.",
    "start": "761230",
    "end": "768050"
  },
  {
    "text": "Here's a second way to\ndo it called bubble sort. I'm going to do this with\na small version of this. I'm going to put out a set.",
    "start": "768050",
    "end": "774064"
  },
  {
    "text": "I'll turn these up so you\ncan see them in a second. The idea of bubble\nsort is, I'm going",
    "start": "774064",
    "end": "779300"
  },
  {
    "text": "to start at-- I'm going to call\nthis the front end of the list. And I'm going to walk down,\ncomparing elements pairwise.",
    "start": "779300",
    "end": "785630"
  },
  {
    "text": "And I'm always going to\nmove the larger one over. So I start here and I\nsay, 1 is less than 11.",
    "start": "785630",
    "end": "791720"
  },
  {
    "text": "I'm OK. 11's bigger than five. I'm going to bubble that up. 11's bigger than 6.",
    "start": "791720",
    "end": "797534"
  },
  {
    "text": "I'm going to bubble that up. 11's bigger than 2. I've basically\nbubbled 11 to the end.",
    "start": "797534",
    "end": "802610"
  },
  {
    "text": "Now I go back here. I say, 1 is less than 5. That's good. 5 is less than 6. That's good.",
    "start": "802610",
    "end": "807850"
  },
  {
    "text": "Ah, 6 is bigger than 2. Bubble that. 6 is less than 11.",
    "start": "807850",
    "end": "813470"
  },
  {
    "text": "You get the idea-- comparison,\ncomparison, and swap. Comparison, comparison.",
    "start": "813470",
    "end": "820040"
  },
  {
    "text": "And now if I go back\nto this part and do it, you'll notice that's\nin the right order. That's in the right order.",
    "start": "820040",
    "end": "826290"
  },
  {
    "text": "That's in the right order. That's in the right order. I'm done.",
    "start": "826290",
    "end": "831370"
  },
  {
    "text": "Small round of applause, please. I was able to sort\nfive elements. Thank you.",
    "start": "831370",
    "end": "837250"
  },
  {
    "text": "The little video is\nshowing the same thing. You can see the idea here. It's called bubble\nsort because you're literally bubbling things\nup to the end of the list.",
    "start": "837250",
    "end": "845019"
  },
  {
    "text": "It's pretty simple to do. You're just swapping pairs. And as you saw, when I\nget to the end of the list I go back and do it\nuntil I have a pass where",
    "start": "845020",
    "end": "851860"
  },
  {
    "text": "I go all the way through the\nlist and I don't do any swaps. And in that case I know I'm done\nbecause everything's in order,",
    "start": "851860",
    "end": "857320"
  },
  {
    "text": "and I can stop. One of the properties of it\nis that the largest unsorted element is always at\nthe end after the pass.",
    "start": "857320",
    "end": "865480"
  },
  {
    "text": "In other words,\nafter the first one I know that the largest\nelement's at the end. After the second one,\nthe largest thing left",
    "start": "865480",
    "end": "870673"
  },
  {
    "text": "is going to be in\nthe next place. And that tells me,\namong other things, that this is going to\ntake no more than n times",
    "start": "870673",
    "end": "877540"
  },
  {
    "text": "through the list to succeed. It might actually\ntake fewer than that. OK.",
    "start": "877540",
    "end": "884239"
  },
  {
    "start": "883000",
    "end": "1095000"
  },
  {
    "text": "Again let's look at\nsome code for it. Let's look at its complexity\nand let's actually run this. So here is a little simple\nversion of bubble sort.",
    "start": "884239",
    "end": "891850"
  },
  {
    "text": "I'm going to set a flag up here. I'm going to call its\nswap initially to false. That's going to let\nme tell when I'm",
    "start": "891850",
    "end": "898110"
  },
  {
    "text": "done, when I've gone through\neverything in the list without doing a swap. And then I'm going to loop. As long as swap is false-- so\nthe first time through it's",
    "start": "898110",
    "end": "905700"
  },
  {
    "text": "going to do that loop. I set swap initially to true,\nand notice what I then do.",
    "start": "905700",
    "end": "911160"
  },
  {
    "text": "I let j range from 1 up\nto the length of the list, and I look at the jth element\nand the previous element.",
    "start": "911160",
    "end": "919320"
  },
  {
    "text": "If the previous element is\nbigger, I'm going to flip them. Right there. And that's just doing that\nswap, what I just did down here.",
    "start": "919320",
    "end": "927300"
  },
  {
    "text": "And if that's the case, I'm\ngoing to set the flag to false. Which says, I've done at least\none bubble as part of this.",
    "start": "927300",
    "end": "933882"
  },
  {
    "text": "Which means when\nI come out of here and go back around to the loop,\nit's going to do it again. And it will do it\nuntil all of this",
    "start": "933882",
    "end": "941100"
  },
  {
    "text": "succeeds without this ever\nbeing true, in which case that's true, which\nmakes that false. And it will drop out.",
    "start": "941100",
    "end": "947872"
  },
  {
    "text": "OK? Let's look at an\nexample of this running. It's just to give\nyou a sense of that,",
    "start": "947872",
    "end": "955079"
  },
  {
    "text": "assuming I can find\nthe right place here. So there is, again, a version\nof bubble sort on the side.",
    "start": "955080",
    "end": "961199"
  },
  {
    "text": "And I'm going to bring this\ndown to the bottom I've got a little test list there. And I've put a print\nstatement in it.",
    "start": "961200",
    "end": "967269"
  },
  {
    "text": "So you can see each\ntime through the loop, what's the form of\nthe list as it starts. And assuming I've done\nthis right-- here you go.",
    "start": "967270",
    "end": "978000"
  },
  {
    "text": "There's the list the\nfirst time through. Notice after one pass, 25's\nat the end of the list--",
    "start": "978000",
    "end": "983957"
  },
  {
    "text": "the biggest element. Exactly what I like. But you can also see a few\nother things have flipped. Right? Right in there, there\nhave been some other swaps",
    "start": "983957",
    "end": "990560"
  },
  {
    "text": "as it bubbled through. And in fact, you can see it's--\nwell, you can see that idea.",
    "start": "990560",
    "end": "995790"
  },
  {
    "text": "You can see 25 moving through. Notice on the next step,\na whole bunch of the list",
    "start": "995790",
    "end": "1002230"
  },
  {
    "text": "is actually in the right order. It's just because I got lucky. All I can guarantee is\nthat the second largest",
    "start": "1002230",
    "end": "1007449"
  },
  {
    "text": "element is the second\nfrom the end of the list. But you can see here. Even though the\nlist is, I think,",
    "start": "1007450",
    "end": "1013415"
  },
  {
    "text": "nine long, it only took\nus four passes through. So this is nice. It says, at most, n\ntimes through the list.",
    "start": "1013415",
    "end": "1021472"
  },
  {
    "text": "And at the end, we\nactually get out something that's\nin the right form. OK.",
    "start": "1021472",
    "end": "1027319"
  },
  {
    "text": "So let's go back to\nthis and basically say, what's the complexity?",
    "start": "1027319",
    "end": "1033649"
  },
  {
    "text": "Well that's length n, right? Has to be. I'm going through\nthe entire list.",
    "start": "1033650",
    "end": "1038760"
  },
  {
    "text": "And inside of there\nis just constant work.",
    "start": "1038760",
    "end": "1044150"
  },
  {
    "text": "Four operations. I'm doing a test. Sorry, five. I'm doing a test. And then depending whether\nthat test is true or not,",
    "start": "1044150",
    "end": "1049940"
  },
  {
    "text": "I'm setting a flag and doing\nsome movement of things around. But it's just constant. I don't care about the five.",
    "start": "1049940",
    "end": "1055210"
  },
  {
    "text": "And there, how many times\ndo I go around the loop? In the worst case, n.",
    "start": "1055210",
    "end": "1062120"
  },
  {
    "text": "All I can guarantee is,\nafter the first pass the biggest thing is here. After the second pass, the\nsecond biggest thing is there.",
    "start": "1062120",
    "end": "1067910"
  },
  {
    "text": "After the third pass--\nyou get the idea. So I've got order and\nthings inside the loop,",
    "start": "1067910",
    "end": "1074450"
  },
  {
    "text": "and I'm doing that loop n times. And I hope that looks familiar. We've talked about this.",
    "start": "1074450",
    "end": "1080070"
  },
  {
    "text": "Right? This is nested loops. What's this? Quadratic. So it's order n squared, where\nn is the length of the list.",
    "start": "1080070",
    "end": "1088920"
  },
  {
    "text": "Now as you also saw, on average,\nit could be less than that. But it's going to\nbe order n squared.",
    "start": "1088920",
    "end": "1094450"
  },
  {
    "text": "OK. That's one possibility. Here's a second nice,\nsimple, sort algorithm.",
    "start": "1094450",
    "end": "1102340"
  },
  {
    "start": "1095000",
    "end": "1151000"
  },
  {
    "text": "It's called selection sort. You can kind of think of\nthis as going the other way. Not completely, but\ngoing the other way.",
    "start": "1102340",
    "end": "1108529"
  },
  {
    "text": "And when I say\ngoing the other way, the idea here is that I'm\ngoing to find the smallest element in the list. And I'm going to stick it\nat the front of the list",
    "start": "1108530",
    "end": "1115420"
  },
  {
    "text": "when I'm done, and simply\nswap that place with whatever was there. Flip them.",
    "start": "1115420",
    "end": "1120739"
  },
  {
    "text": "I might do a few other\nflips along the way, depending how I implement this. Next, pass.",
    "start": "1120739",
    "end": "1126470"
  },
  {
    "text": "I'm just going to\nlook at everything but the first element, because\nI know that one's done. I'm going to do the same thing. Find the smallest element\nremaining in the list,",
    "start": "1126470",
    "end": "1133490"
  },
  {
    "text": "put it in the second\nspot, and keep doing that. What I know is, if I\nimplement this correctly,",
    "start": "1133490",
    "end": "1139990"
  },
  {
    "text": "after i steps the first\ni elements of the list will be sorted.",
    "start": "1139990",
    "end": "1145539"
  },
  {
    "text": "And everything in\nthe rest of the list has to be bigger than\nthe largest thing in the first part of the list.",
    "start": "1145540",
    "end": "1151600"
  },
  {
    "start": "1151000",
    "end": "1335000"
  },
  {
    "text": "OK. So we could build that. Before we do it, I'm going\nto show you a little video starring Professor Guttag.",
    "start": "1151600",
    "end": "1157790"
  },
  {
    "text": "This is his cameo\nperformance here. But I want to just show\nyou an example of this using not numbers, but people.",
    "start": "1157790",
    "end": "1164539"
  },
  {
    "text": "[VIDEO PLAYBACK] - All right. So now we're going\nto do selection sort. The idea here is\nthat each step we're",
    "start": "1164540",
    "end": "1171529"
  },
  {
    "text": "going to select\nthe shortest person and put them next in\nline of the sorted group.",
    "start": "1171530",
    "end": "1178220"
  },
  {
    "text": "So we'll bring the\nleftmost person forward, and we will compare\nher to everybody else.",
    "start": "1178220",
    "end": "1184290"
  },
  {
    "text": "So one at a time, step forward. You're still the winner. You go back.",
    "start": "1184290",
    "end": "1190130"
  },
  {
    "text": "Please step forward. PROFESSOR: And watch the number\nof comparisons that go on, by the way. We're going to\ncome back to that.",
    "start": "1190130",
    "end": "1195550"
  },
  {
    "text": "- Next.  Still the winner.",
    "start": "1195550",
    "end": "1201930"
  },
  {
    "text": "Next. Ah. A new winner. All right.",
    "start": "1201930",
    "end": "1207039"
  },
  {
    "text": "So you can take her place. PROFESSOR: So here, we're\nchoosing to actually insert",
    "start": "1207040",
    "end": "1212310"
  },
  {
    "text": "into the spot in\nthe Line We could have put her back at the front,\nbut either one will work. - Now we'll compare.",
    "start": "1212310",
    "end": "1217379"
  },
  {
    "text": "Same old winner. ",
    "start": "1217380",
    "end": "1222780"
  },
  {
    "text": "Same winner. ",
    "start": "1222780",
    "end": "1228090"
  },
  {
    "text": "No change. It's getting kind of boring.",
    "start": "1228090",
    "end": "1233670"
  },
  {
    "text": "Don't fall, that-- same winner. Please.",
    "start": "1233670",
    "end": "1239300"
  },
  {
    "text": "PROFESSOR: This is a tough one. - Oh. Close, but I think\nyou're still shorter.",
    "start": "1239300",
    "end": "1245540"
  },
  {
    "text": "All right. Next.  No change, which means\nyou are the first in line.",
    "start": "1245540",
    "end": "1253230"
  },
  {
    "text": "Congratulations. PROFESSOR: So, smallest element\nnow going to be the first slot. - Now you step forward,\nand we'll compare you.",
    "start": "1253230",
    "end": "1259110"
  },
  {
    "start": "1259110",
    "end": "1271757"
  },
  {
    "text": "PROFESSOR: I would\ninvite you to watch the left hand of the list. Notice how it is slowly\nbuilding up at each stage",
    "start": "1271757",
    "end": "1277700"
  },
  {
    "text": "to have that portion sorted. ",
    "start": "1277700",
    "end": "1283364"
  },
  {
    "text": "And we deliberately\nadmit students to be of different heights,\nso John can do this demo.",
    "start": "1283364",
    "end": "1288950"
  },
  {
    "text": "- You are the winner. Take your place in line. Next.",
    "start": "1288950",
    "end": "1294502"
  },
  {
    "text": "It's you. ",
    "start": "1294502",
    "end": "1301640"
  },
  {
    "text": "And once again, we\nhave a lovely group of students sorted\nin height order. [END PLAYBACK]",
    "start": "1301640",
    "end": "1307194"
  },
  {
    "text": "[APPLAUSE] PROFESSOR: And\ncheck out-- I want you to remember number\nof comparisons-- 55. Not that the [INAUDIBLE], but\nI want you to see a comparison",
    "start": "1307194",
    "end": "1314510"
  },
  {
    "text": "as we go on in a second. So again, selection sort. This is this idea of,\nfind the smallest element.",
    "start": "1314510",
    "end": "1320700"
  },
  {
    "text": "Put it at the front. I might do a little\nnumber of flips, as you can see,\nhere along the way. But this is the same\nanimation of that.",
    "start": "1320700",
    "end": "1327060"
  },
  {
    "text": "So let's first of all\nconvince ourselves it will do the right thing,\nand then look at some code,",
    "start": "1327060",
    "end": "1333390"
  },
  {
    "text": "and then run the code. So to convince\nourselves that this is going to do the\nright thing, we",
    "start": "1333390",
    "end": "1338646"
  },
  {
    "start": "1335000",
    "end": "1427000"
  },
  {
    "text": "could talk about something that\nwe often refer to as a loop invariant. We're going to write\na loop, but we're going to walk through this.",
    "start": "1338646",
    "end": "1344809"
  },
  {
    "text": "And the invariant\nhere-- and we want to just demonstrate if\nit's true at the beginning and it's true at each step.",
    "start": "1344810",
    "end": "1349845"
  },
  {
    "text": "Therefore, by induction\nas we did earlier, I can conclude it's true always. Is that if I'm given the\nprefix or the first part",
    "start": "1349845",
    "end": "1357300"
  },
  {
    "text": "of a list from 0 up to i,\nand a suffix or a second part of the list from i plus 1 up to\nthe end of the overall list--",
    "start": "1357300",
    "end": "1364980"
  },
  {
    "text": "given that, then I want to\nassert that the invariant is that the prefix is sorted\nand no element of the prefix",
    "start": "1364980",
    "end": "1372240"
  },
  {
    "text": "is larger than the smallest\nelement of the suffix. Just what I said earlier. It says, at any stage here--\nif this is the amount of sort",
    "start": "1372240",
    "end": "1379110"
  },
  {
    "text": "I've done so far-- I can\nguarantee, I'm going to claim, this will be sorted. And everything here is\nbigger than that thing there.",
    "start": "1379110",
    "end": "1387440"
  },
  {
    "text": "How do I prove it? Well the base case\nis really easy. In the base case,\nthe prefix is empty.",
    "start": "1387440",
    "end": "1394240"
  },
  {
    "text": "I don't have anything,\nso it's obviously sorted. And everything in\nthe suffix is bigger than anything in the prefix. So I'm fine.",
    "start": "1394240",
    "end": "1400710"
  },
  {
    "text": "And then I just want to say,\nas long as I write my code so that this step is true, then\nI'm going to move the smallest",
    "start": "1400710",
    "end": "1406730"
  },
  {
    "text": "element from the suffix--\nthe second part of the list-- to the end of the prefix.",
    "start": "1406730",
    "end": "1412460"
  },
  {
    "text": "Since the prefix was\nsorted, this is now sorted. And everything in\nthe suffix is still",
    "start": "1412460",
    "end": "1418850"
  },
  {
    "text": "going to be bigger than\neverything in the prefix. And as a consequence,\nby induction, this is going to give me\nsomething that says it's always",
    "start": "1418850",
    "end": "1425900"
  },
  {
    "text": "going to be correct. So here's code\nthat would do that.",
    "start": "1425900",
    "end": "1432600"
  },
  {
    "text": "Here. I'm just going to set a\nlittle thing called the start of suffix, or soft start. Initially it's going to point\nto the beginning of the list.",
    "start": "1432600",
    "end": "1440685"
  },
  {
    "text": "And then I'm going\nto run a loop. And as long as I\nstill have things to search in the list,\nthat that pointer doesn't",
    "start": "1440686",
    "end": "1446110"
  },
  {
    "text": "point to the end of the\nlist, what am I going to do? I'm going to loop\nover everything",
    "start": "1446110",
    "end": "1451420"
  },
  {
    "text": "from that point to\nthe end of the list, comparing it to the\nthing at that point.",
    "start": "1451420",
    "end": "1459020"
  },
  {
    "text": "If it's less than,\nI'm going to do a swap because I wanted to move it up.",
    "start": "1459020",
    "end": "1464610"
  },
  {
    "text": "And you can see,\nby the time I get through this loop I will have\nfound the smallest element in the remainder of the list.",
    "start": "1464610",
    "end": "1471040"
  },
  {
    "text": "And I would have put it\nat that spot, whatever suffix start points to.",
    "start": "1471040",
    "end": "1476740"
  },
  {
    "text": "And when I've done all of that,\nI just change this by one. Having found the\nsmallest element,",
    "start": "1476740",
    "end": "1482500"
  },
  {
    "text": "I've stuck it at spot zero. I'll do the same thing. Having found the next\nsmallest element, I know it's at point one. And I'll just continue around.",
    "start": "1482500",
    "end": "1491084"
  },
  {
    "text": "One of the things\nyou can see here is, as opposed to\nbubble sort, this one",
    "start": "1491084",
    "end": "1496620"
  },
  {
    "text": "is going to take n\ntimes around the loop because I'm only moving\nthis pointer by one",
    "start": "1496620",
    "end": "1503595"
  },
  {
    "text": "So it starts at 0, and then\n1, and then 2, all the way up to n minus 1.",
    "start": "1503595",
    "end": "1508650"
  },
  {
    "text": "You can also see in this\nparticular implementation, while I'm certainly ensuring\nthat the smallest element goes",
    "start": "1508650",
    "end": "1515009"
  },
  {
    "text": "into that spot, I may do a\nfew other flips along the way. I'm going to find something I\nthink is the smallest element,",
    "start": "1515010",
    "end": "1522090"
  },
  {
    "text": "put it there and put\nthat element here. And then when I find\nanother smaller element, I may do that flip.",
    "start": "1522090",
    "end": "1527182"
  },
  {
    "text": "I could have implemented\nthis where I literally search for the smallest\nelement and only move that.",
    "start": "1527182",
    "end": "1532290"
  },
  {
    "text": "Doesn't make any difference\nin terms of the complexity. All right. What's the complexity here?",
    "start": "1532290",
    "end": "1539230"
  },
  {
    "text": "Already said this part. I will loop n times, because\nI start at 0 and then 1.",
    "start": "1539230",
    "end": "1545169"
  },
  {
    "text": "You get the idea. Inside of the loop\nI'm going to walk down",
    "start": "1545170",
    "end": "1551260"
  },
  {
    "text": "the remainder of the list,\nwhich is initially n. And then n minus 1, and\nthen n minus 2 times.",
    "start": "1551260",
    "end": "1557932"
  },
  {
    "text": "But we've seen that\nbefore as well. While they get shorter, that\ncomplexity is still quadratic.",
    "start": "1557932",
    "end": "1565570"
  },
  {
    "text": "Order n times going\nthrough this process. Within the process, order n\nthings that I have to compare.",
    "start": "1565570",
    "end": "1572850"
  },
  {
    "text": "And yes, n gets smaller. But we know that that n term,\nif you like to dominate. So again, this is quadratic.",
    "start": "1572850",
    "end": "1580980"
  },
  {
    "text": "OK. Before you believe that\nall sorting algorithms are quadratic, I want to\nshow you the last one,",
    "start": "1580980",
    "end": "1586340"
  },
  {
    "text": "the one that actually is\none of the-- I think-- the prettiest algorithms\naround, and a great example",
    "start": "1586340",
    "end": "1591559"
  },
  {
    "text": "of a more efficient algorithm. It's called merge sort. Merge sort takes an\napproach we've seen before.",
    "start": "1591560",
    "end": "1599080"
  },
  {
    "text": "We talked about\ndivide and conquer. Break the problem down\ninto smaller versions of the same problem.",
    "start": "1599080",
    "end": "1605540"
  },
  {
    "text": "And once you've got\nthose solutions, bring the answer back together. For merge sort,\nthat's pretty easy.",
    "start": "1605540",
    "end": "1611460"
  },
  {
    "text": "It says, if I've got a list of\n0 or 1 elements, it's sorted. Duh. OK.",
    "start": "1611460",
    "end": "1616889"
  },
  {
    "text": "If I got a list of more than\n1 element, here's my trick. I'm going to split\nit into two lists.",
    "start": "1616890",
    "end": "1623160"
  },
  {
    "text": "I'm going to sort them. And when I'm done, I'm just\ngoing to merge those two lists into one list.",
    "start": "1623160",
    "end": "1629510"
  },
  {
    "text": "And the merge is easy. Because if I've got two\nlists that are sorted, I just need to look at\nthe first element of each,",
    "start": "1629510",
    "end": "1635903"
  },
  {
    "text": "take the one that's smaller. Add it to my result. And\nkeep doing that until one of the lists is empty. And then just copy the\nremainder of the other list.",
    "start": "1635904",
    "end": "1645260"
  },
  {
    "text": "You can probably\nalready get a sense of what the cost is going\nto be here, because this is cutting the problem in half.",
    "start": "1645260",
    "end": "1651510"
  },
  {
    "text": "Now I've got two pieces. So I need to think\nabout both of them. I want to give you a couple\nof visualizations of this.",
    "start": "1651510",
    "end": "1657350"
  },
  {
    "text": "Here's the first one. It says, basically, I've\ngot a big unsorted list. I'm going to split it.",
    "start": "1657350",
    "end": "1662660"
  },
  {
    "text": "And I'm going to split it. And I'm going to split it. Until I get down to just lists\nthat are either 0 or 1, which",
    "start": "1662660",
    "end": "1669620"
  },
  {
    "text": "by definition are sorted. And once I'm at that\nlevel, then I just",
    "start": "1669620",
    "end": "1675320"
  },
  {
    "text": "have to merge them\ninto a sorted list and then merge them\npairwise into a sorted list.",
    "start": "1675320",
    "end": "1681770"
  },
  {
    "text": "And you get the idea. So it's divide and conquer. The divide is dividing it\nup into smaller pieces.",
    "start": "1681770",
    "end": "1688360"
  },
  {
    "text": "The conquer is merging\nthem back together. And we have Professor\nGuttag back for an encore,",
    "start": "1688360",
    "end": "1695220"
  },
  {
    "text": "together with his students. So let's show you an\nexample of merge sort. [VIDEO PLAYBACK] - So we're about to\ndemonstrate merge sort.",
    "start": "1695220",
    "end": "1703120"
  },
  {
    "text": "And we're going to sort this\nrather motley collection of MIT students by height.",
    "start": "1703120",
    "end": "1709409"
  },
  {
    "text": "So the first thing\nwe need to do is, we're going to ask everyone\nto split into a group of two.",
    "start": "1709410",
    "end": "1716290"
  },
  {
    "text": "So you split a little bit. You two are together. You two are together.",
    "start": "1716290",
    "end": "1721980"
  },
  {
    "text": "You two are together. You two are together. And you are all by yourself. I'm sorry.",
    "start": "1721980",
    "end": "1728215"
  },
  {
    "text": "PROFESSOR: Poor Anna. - All right. So now let's take\nthe first group.",
    "start": "1728215",
    "end": "1733830"
  },
  {
    "text": "Take a step down. And what we do is, we\nsort this group by height, with the shortest on the left.",
    "start": "1733830",
    "end": "1741299"
  },
  {
    "text": "And look at this. We don't have to do anything. Thank you. Feel free to go back up.",
    "start": "1741300",
    "end": "1747159"
  },
  {
    "text": "We then sort the next pair. Please. And it looks to me\nlike we need to switch.",
    "start": "1747160",
    "end": "1753900"
  },
  {
    "text": "All right. Take a step back.  Ladies-- OK.",
    "start": "1753900",
    "end": "1766640"
  },
  {
    "text": "Ladies, gentlemen-- also OK. ",
    "start": "1766640",
    "end": "1774640"
  },
  {
    "text": "And again, OK. PROFESSOR: Notice each\nsubgroup is now sorted. Which is great.",
    "start": "1774640",
    "end": "1779955"
  },
  {
    "text": "- And I think you're\nin the correct order. Now what we do is, we take these\ngroups and merge the groups.",
    "start": "1779955",
    "end": "1787690"
  },
  {
    "text": "So let's have these two--\ngoing to sort these groups, have them step forward.",
    "start": "1787690",
    "end": "1794660"
  },
  {
    "text": "And now what we're\ndoing is, we're doing a merge of the\ntwo sorted groups.",
    "start": "1794660",
    "end": "1800330"
  },
  {
    "text": "So we start by merging them. We'll take the leftmost\nperson in this group",
    "start": "1800330",
    "end": "1806590"
  },
  {
    "text": "and compare her to the\nfirst person in this group, and decide. She's still the shortest.",
    "start": "1806590",
    "end": "1811750"
  },
  {
    "text": "Take a step back.  Now we're going to\nlook at you and say,",
    "start": "1811750",
    "end": "1820450"
  },
  {
    "text": "you're actually taller\nthan this fellow. So you now step up there.",
    "start": "1820450",
    "end": "1825610"
  },
  {
    "text": " And we're good here.",
    "start": "1825610",
    "end": "1831320"
  },
  {
    "text": "Both of you take a step back.  Now we'll take these two groups\nand follow the same procedure.",
    "start": "1831320",
    "end": "1840330"
  },
  {
    "text": "We'll merge them. Let's see. We'll compare you--\nthe first person",
    "start": "1840330",
    "end": "1845370"
  },
  {
    "text": "in this group to the first\nperson in this group. Now it's a little tricky. So let's see, the\ntwo of you compare.",
    "start": "1845370",
    "end": "1851910"
  },
  {
    "text": "Let's see, back to back. We have a winner. Step back.",
    "start": "1851910",
    "end": "1858120"
  },
  {
    "text": "And now we need to compare the\nshortest person in this group to the shortest\nperson in this group.",
    "start": "1858120",
    "end": "1864210"
  },
  {
    "text": "We have a winner. It's you. I'm sorry.",
    "start": "1864210",
    "end": "1869409"
  },
  {
    "text": "And now we just-- we're OK. Please step back. ",
    "start": "1869410",
    "end": "1877000"
  },
  {
    "text": "Now we'll have these\ntwo groups come forward. We'll compare the shortest\nperson in this group",
    "start": "1877000",
    "end": "1883210"
  },
  {
    "text": "to the shortest\nperson in that group. I actually need you guys\nto get back to back here. ",
    "start": "1883210",
    "end": "1890450"
  },
  {
    "text": "You are the winner. And it's pretty clear that the\nshortest person in this group",
    "start": "1890450",
    "end": "1895540"
  },
  {
    "text": "is shorter than the shortest\nperson in that group. So you go there\nand you step back.",
    "start": "1895540",
    "end": "1900880"
  },
  {
    "text": "PROFESSOR: Notice the groups. Now all sorted. - And now we repeat\nthe same process. ",
    "start": "1900880",
    "end": "1911840"
  },
  {
    "text": "PROFESSOR: And notice how\nthe whole subgroup now goes up once we know\nthat one group is empty. ",
    "start": "1911840",
    "end": "1924140"
  },
  {
    "text": "- And you can see that we\nhave a group of students sorted in order by height.",
    "start": "1924140",
    "end": "1929462"
  },
  {
    "text": "[END PLAYBACK] [APPLAUSE] PROFESSOR: Remember the\nfirst number, right? 55, 28.",
    "start": "1929462",
    "end": "1936070"
  },
  {
    "text": "Now it's just\nnumbers but you can see the expectation is, this\nis going to take less time. And it certainly did there.",
    "start": "1936070",
    "end": "1942550"
  },
  {
    "text": "So again just to demo\nanother way visually. I'm sorting-- sorry.",
    "start": "1942550",
    "end": "1947700"
  },
  {
    "text": "I am splitting down\nuntil I get small things, and then just merging them up. I may have to do multiple\npasses through here,",
    "start": "1947700",
    "end": "1953780"
  },
  {
    "text": "but it's going to\nbe hopefully faster than the other\nmethods we looked at. I'm going to show\nyou code in a second,",
    "start": "1953780",
    "end": "1959513"
  },
  {
    "text": "and then we're going to\nrun it just to see it. But let me stress one more\ntime just the idea of merging.",
    "start": "1959514",
    "end": "1965515"
  },
  {
    "text": "You can see the idea. I keep splitting down till I\ngot something small enough. And I want to merge them back. The idea of merging-- you've\nseen it from Professor Guttag.",
    "start": "1965515",
    "end": "1972050"
  },
  {
    "text": "But I just want to highlight why\nthis is going to be efficient. If I've got two lists:\nlist 1 and list 2,",
    "start": "1972050",
    "end": "1979990"
  },
  {
    "text": "the things left there. Process is very simple. I pull out the smallest\nelement of each.",
    "start": "1979990",
    "end": "1985960"
  },
  {
    "text": "I compare them. And I simply put the\nsmallest one into the result,",
    "start": "1985960",
    "end": "1991059"
  },
  {
    "text": "move on in that first list. So the 1 disappears\nfrom that left list. And now again I pull up just the\nsmallest element of each one,",
    "start": "1991060",
    "end": "1998260"
  },
  {
    "text": "do the comparison. Smallest one goes to\nthe end of my result. And I drop that\nelement from its list.",
    "start": "1998260",
    "end": "2004429"
  },
  {
    "text": "So I've now taken 1 from\nlist 1 and one from list 2. You get the idea.",
    "start": "2004430",
    "end": "2010470"
  },
  {
    "text": "The reason I want to give you\nthis visualization-- sorry. Let me do the last step. Once I get to a place where\none of the lists is empty,",
    "start": "2010470",
    "end": "2017610"
  },
  {
    "text": "just copy the rest of\nthe list onto the end. You can see already\na hint of the code.",
    "start": "2017610",
    "end": "2026250"
  },
  {
    "text": "And that is, that I'm\nonly going to ever look at each element of each\nsublist once as I do the merge.",
    "start": "2026250",
    "end": "2034110"
  },
  {
    "text": "And that's a nice property. Having had them\nsorted, I don't need to do lots of\ninterior comparisons. I'm only comparing\nthe ends of the list.",
    "start": "2034110",
    "end": "2040799"
  },
  {
    "text": "I only, therefore,\nlook at each element-- the number of comparisons,\nrather, I should say. I may look at each\nelement more than once.",
    "start": "2040800",
    "end": "2047470"
  },
  {
    "text": "The number of\ncomparisons is going to be, at most, the number\nof elements in both lists.",
    "start": "2047470",
    "end": "2052818"
  },
  {
    "text": "And that's going to\nbe a nice Q as we think about how to solve it. So here's the code to merge,\nand then we'll write Merge Sort.",
    "start": "2052819",
    "end": "2059570"
  },
  {
    "text": "And I know there's\na lot of code here, but we can walk through it\nand get a good sense of it. I'm going to set up a\nvariable called Result that's",
    "start": "2059570",
    "end": "2066770"
  },
  {
    "text": "going to hold my answer. And I'm going to set up\ntwo indices, i and j, that are initially 0.",
    "start": "2066770",
    "end": "2072260"
  },
  {
    "text": "They're pointing\nto the beginning. And remember, the\ninput here is two lists that we know are sorted--\nor should be sorted,",
    "start": "2072260",
    "end": "2077719"
  },
  {
    "text": "or we screwed up in some way. So initially, i and j are\nboth pointing to the beginning of the left and right list.",
    "start": "2077719",
    "end": "2084171"
  },
  {
    "text": "And look at what we do. We say, as long as there's\nstill something in the left list and still something\nin the right list-- i",
    "start": "2084172",
    "end": "2090199"
  },
  {
    "text": "is less than the\nlength of left, j is less than the\nlength of right. Do the comparison.",
    "start": "2090199",
    "end": "2096419"
  },
  {
    "text": "If the left wants smaller,\nadd it to the end of result. To the end of result, right?",
    "start": "2096420",
    "end": "2102190"
  },
  {
    "text": "I'm appending it because I want\nit to be in that sorted order. And increase i.",
    "start": "2102190",
    "end": "2107220"
  },
  {
    "text": "If it's not, add the right\none to the end of result and increase j.",
    "start": "2107220",
    "end": "2113400"
  },
  {
    "text": "And I'll just keep\ndoing that until I exhaust one of the lists. And when I do I\ncan basically say,",
    "start": "2113400",
    "end": "2119480"
  },
  {
    "text": "if the right list is empty,\nI know if I get out of here they can't both be true. In other words, if there's still\nsomething in the left list,",
    "start": "2119480",
    "end": "2126669"
  },
  {
    "text": "just put it on the end. Otherwise if the only things\nleft are in the right list,",
    "start": "2126669",
    "end": "2131670"
  },
  {
    "text": "just put them on the end. So I'm just walking down the\nlist, doing the comparison,",
    "start": "2131670",
    "end": "2136730"
  },
  {
    "text": "adding the smallest element to\nmy result. And when I'm done, I just return result.",
    "start": "2136730",
    "end": "2142810"
  },
  {
    "text": "Complexity we can already\nbegin to see here, right? This says the left and\nright sublists are ordered, so I'm just moving the\nindices depending on which",
    "start": "2142810",
    "end": "2149710"
  },
  {
    "text": "one holds the smaller element. And when I get done, I'm just\nreturning the rest of the list.",
    "start": "2149710",
    "end": "2156740"
  },
  {
    "text": "So what's the complexity here? I'm going to do this a\nlittle more informally. You could actually do\nthat kind of relationship",
    "start": "2156740",
    "end": "2163098"
  },
  {
    "text": "I did last time. But what am I doing? I'm going through the two\nlists, but only one time through each of those two lists.",
    "start": "2163098",
    "end": "2169540"
  },
  {
    "text": "I'm only comparing\nthe smallest elements. So as I already said, this says\nthat the number of elements",
    "start": "2169540",
    "end": "2174960"
  },
  {
    "text": "I copy will be everything in\nthe left list and everything in the right list. So that order is just\nthe length of left",
    "start": "2174960",
    "end": "2181420"
  },
  {
    "text": "plus the length of right. And how many\ncomparisons do I do?",
    "start": "2181420",
    "end": "2186440"
  },
  {
    "text": "The most I have to do is however\nmany are in the longer list. Right? That's the maximum\nnumber I need to have.",
    "start": "2186440",
    "end": "2193250"
  },
  {
    "text": "Oh, that's nice. That says, if the lists are\nof order n-- I'm doing order n copies, because\norder n plus order",
    "start": "2193250",
    "end": "2199580"
  },
  {
    "text": "n is just 2n, which\nis order n-- then I'm doing order n comparisons.",
    "start": "2199580",
    "end": "2204590"
  },
  {
    "text": "So it's linear in the\nlength of the lists. OK. Sounds good.",
    "start": "2204590",
    "end": "2210580"
  },
  {
    "text": "That just does the merge. How do I do merge sort? Well we said it.",
    "start": "2210580",
    "end": "2215740"
  },
  {
    "text": "Break the problem in half. Keep doing it until\nI get sorted lists. And then grow them back up. So there's merge sort.",
    "start": "2215740",
    "end": "2221710"
  },
  {
    "text": "It says, if the list is\neither empty or of length 1, just return a copy of the list.",
    "start": "2221710",
    "end": "2227480"
  },
  {
    "text": "It's sorted. Otherwise find\nthe middle point-- there's that integer\ndivision-- and split.",
    "start": "2227480",
    "end": "2233710"
  },
  {
    "text": "Split the list everything\nup to the middle point and do merge sort on that. Split everything in the list\nfrom the middle point on.",
    "start": "2233710",
    "end": "2240520"
  },
  {
    "text": "Do merge sort on that. And when I get back those two\nsorted lists, just merge them.",
    "start": "2240520",
    "end": "2248160"
  },
  {
    "text": "Again, I hope you can see\nwhat the order of growth should be here. Cutting the problem down\nin half at each step.",
    "start": "2248160",
    "end": "2255270"
  },
  {
    "text": "So the number of times I\nshould have to go through this should be to log n the\nsize of the original list.",
    "start": "2255270",
    "end": "2262047"
  },
  {
    "text": "And you can see why we\ncall it divide and conquer. I'm dividing it down\ninto small pieces until I have a simple\nsolution and then",
    "start": "2262047",
    "end": "2267490"
  },
  {
    "text": "I'm growing that\nsolution back up. So there is the base\ncase, there's the divide,",
    "start": "2267490",
    "end": "2274720"
  },
  {
    "text": "and there's the nice conquer\n[INAUDIBLE] piece of this. OK. I'm going to show you\nan example of that.",
    "start": "2274720",
    "end": "2281120"
  },
  {
    "text": "But let's actually look at\nsome code-- sorry about that. Let's look at some\ncode to do this. And in fact I meant to do\nthis earlier and didn't.",
    "start": "2281120",
    "end": "2288990"
  },
  {
    "text": "I also have a version\nof bubble sort here. Sorry-- selection sort.",
    "start": "2288990",
    "end": "2294140"
  },
  {
    "text": "I've already done bubble sort. There is selection sort. Let's uncomment this.",
    "start": "2294140",
    "end": "2301170"
  },
  {
    "text": "And let's run both\nof those and just see the comparison between them. Yeah, sorry-- just make that\na little easier to read.",
    "start": "2301170",
    "end": "2308369"
  },
  {
    "text": "There we go. So we saw a bubble sort. It only went through four\ntimes, so less than n times.",
    "start": "2308370",
    "end": "2314720"
  },
  {
    "text": "There's selection sort. And as I said to\nyou, it has to do n passes it because it can only\never guarantee that it gets",
    "start": "2314720",
    "end": "2321890"
  },
  {
    "text": "one element at the beginning. So you can in fact see, in\nthis case, from the first",
    "start": "2321890",
    "end": "2326930"
  },
  {
    "text": "or after the initial input\nuntil the end of the first step, it looks like it\ndidn't do anything",
    "start": "2326930",
    "end": "2332180"
  },
  {
    "text": "because it determined eventually\nthat one was in the right spot. And similarly I think\nthere's another one",
    "start": "2332180",
    "end": "2338240"
  },
  {
    "text": "right there where\nit doesn't do any-- or appears not to do anything. All it's guaranteeing is\nthat the next smallest",
    "start": "2338240",
    "end": "2343298"
  },
  {
    "text": "element is in the right spot. As we get through\nto the end of it, it in fact ends up\nin the right place.",
    "start": "2343298",
    "end": "2349220"
  },
  {
    "text": "And then let's\nlook at merge sort and do one more\nvisualization of this.",
    "start": "2349220",
    "end": "2354329"
  },
  {
    "text": "Again let me remove that. If we run it-- again, I've\njust put some print statements",
    "start": "2354330",
    "end": "2363110"
  },
  {
    "text": "in there. Here you can see\na nice behavior. I start off calling\nMerge Sort with that,",
    "start": "2363110",
    "end": "2370850"
  },
  {
    "text": "which splits down into doing\nMerge Sort of this portion. Eventually it's going to\ncome back down there and do the second one.",
    "start": "2370850",
    "end": "2375980"
  },
  {
    "text": "It keeps doing it until it\ngets down to simple lists that it knows are sorted.",
    "start": "2375980",
    "end": "2381380"
  },
  {
    "text": "And then it merges it. Does the smaller pieces\nand then merges it. And having now 2\nmerged things, it",
    "start": "2381380",
    "end": "2387530"
  },
  {
    "text": "can do the next level of merge. So you can see that it gets\nthis nice reduction of problems",
    "start": "2387530",
    "end": "2393000"
  },
  {
    "text": "until it gets down\nto the smallest size. So let's just look at one\nmore visualization of that",
    "start": "2393000",
    "end": "2399620"
  },
  {
    "text": "and then get the complexity. So if I start out with this\nlist-- sorry about that.",
    "start": "2399620",
    "end": "2405872"
  },
  {
    "text": "What I need to do is split it. Take the first one, split it. Keep doing that until I\nget down to a base case",
    "start": "2405873",
    "end": "2413670"
  },
  {
    "text": "where I know what those are\nand I simply merge them. Pass it back up.",
    "start": "2413670",
    "end": "2418950"
  },
  {
    "text": "Take the second piece. Split it until I get\ndown to base cases. Do the merge, which\nis nice and linear.",
    "start": "2418950",
    "end": "2424620"
  },
  {
    "text": "Pass that back up. Having done those two\npieces, I do one more merge. And I do the same thing.",
    "start": "2424620",
    "end": "2430838"
  },
  {
    "text": " I want you to see\nthis, because again you can notice how many\nlevels in this tree log.",
    "start": "2430838",
    "end": "2440640"
  },
  {
    "text": "Log in the size. Because at each stage\nhere, I went from a problem of 8 to two problems of 4.",
    "start": "2440640",
    "end": "2446100"
  },
  {
    "text": "Each of those went\nto two problems of 2, and each of those went to\ntwo problems of size 1.",
    "start": "2446100",
    "end": "2452090"
  },
  {
    "start": "2451000",
    "end": "2619000"
  },
  {
    "text": "All right. So the last piece is,\nwhat's the complexity?",
    "start": "2452090",
    "end": "2458030"
  },
  {
    "text": "Here's a simple way\nto think about it. At the top level, I start\noff with n elements.",
    "start": "2458030",
    "end": "2464330"
  },
  {
    "text": "I've got two sorted\nlists of size n over 2. And to merge them together,\nI need to do order n work.",
    "start": "2464330",
    "end": "2473520"
  },
  {
    "text": "Because as I said I got to do\nat least n comparisons where n is the length of the list.",
    "start": "2473520",
    "end": "2479040"
  },
  {
    "text": "And then I've got to do n plus\nn copies, which is just order n. So I'm doing order n work.",
    "start": "2479040",
    "end": "2484609"
  },
  {
    "text": "At the second level, it gets\na little more complicated. Now I've got problems\nof size n over 4.",
    "start": "2484610",
    "end": "2491710"
  },
  {
    "text": "But how many of them do I have? 4. Oh, that's nice.",
    "start": "2491710",
    "end": "2497084"
  },
  {
    "text": "Because what do I\nknow about this? I know that I have to copy\neach element at least once. So not at least once.",
    "start": "2497084",
    "end": "2502850"
  },
  {
    "text": "I will copy each\nelement exactly once. And I'll do comparisons\nthat are equal to the length",
    "start": "2502850",
    "end": "2508130"
  },
  {
    "text": "of the longer list. So I've got four sublists\nof length n over 4 that says n elements.",
    "start": "2508130",
    "end": "2514310"
  },
  {
    "text": "That's nice. Order n. At each step, the\nsubproblems get smaller",
    "start": "2514310",
    "end": "2520090"
  },
  {
    "text": "but I have more of them. But the total size\nof the problem is n. So the cost at each\nstep is order n.",
    "start": "2520090",
    "end": "2527550"
  },
  {
    "text": "How many times do I do it? Log n. So this is log n iterations\nwith order n work at each step.",
    "start": "2527550",
    "end": "2536840"
  },
  {
    "text": "And this is a wonderful example\nof a log linear algorithm. It's n log n, where n is\nthe length of the list.",
    "start": "2536840",
    "end": "2545870"
  },
  {
    "text": "So what you end up with, then,\nis-- all right, a joke version, some reasonable\nways of doing sort",
    "start": "2545870",
    "end": "2552500"
  },
  {
    "text": "that are quick and easy to\nimplement but are quadratic, and then an elegant way of\ndoing the search that's n log n.",
    "start": "2552500",
    "end": "2559770"
  },
  {
    "text": "And I'll remind you I started\nby saying, as long as I can make the cost of\nsorting small enough",
    "start": "2559770",
    "end": "2565070"
  },
  {
    "text": "I can amortize that cost. And if you go back and look\nat last lecture's notes, you'll see n log n\ngrows pretty slowly.",
    "start": "2565070",
    "end": "2572799"
  },
  {
    "text": "And it's actually\na nice thing to do. It makes it reasonable\nto do the sort. And then I can do the\nsearch in order n time.",
    "start": "2572799",
    "end": "2580030"
  },
  {
    "text": "And here's the last punchline. It's the fastest we can do. I'm going to look at John again.",
    "start": "2580030",
    "end": "2585900"
  },
  {
    "text": "I don't think anybody has\nfound a faster sort algorithm. Right? This is the best one can do. Unless you do-- sorry,\nthe best worst case.",
    "start": "2585900",
    "end": "2593831"
  },
  {
    "text": "I'm sorry. John is absolute right. There are better average cases. Again, our concern\nis worst case. So this is as good\nas we're going",
    "start": "2593831",
    "end": "2599674"
  },
  {
    "text": "to do in terms of a\nworst case algorithm. So there you now have sorting\nalgorithms and searching algorithms, and\nyou've now seen--",
    "start": "2599674",
    "end": "2606960"
  },
  {
    "text": "excuse me, sorry--\nconstant, log, linear, log linear, quadratic, and\nexponential algorithms.",
    "start": "2606960",
    "end": "2614730"
  },
  {
    "text": "I'll remind you, we\nwant things as high up in that hierarchy as possible.",
    "start": "2614730",
    "end": "2620423"
  },
  {
    "start": "2619000",
    "end": "2911000"
  },
  {
    "text": "All right. I have six minutes left. Some of you are\ngoing to leave us.",
    "start": "2620424",
    "end": "2625780"
  },
  {
    "text": "We're going to miss\nyou, but that's OK. I'm sure we'll see later on. For those of you hanging around,\nthis isn't a bad time just",
    "start": "2625780",
    "end": "2630950"
  },
  {
    "text": "to step back and say,\nso what have we seen? And I want to do this\njust very quickly. I'm sorry.",
    "start": "2630950",
    "end": "2636160"
  },
  {
    "text": "And I'll remind you, we started\nby in some sense giving you a little bit of a\ncontract of things we were going to show you.",
    "start": "2636160",
    "end": "2642040"
  },
  {
    "text": "And I would simply suggest\nto you, what have we done? We've given you a sense of\nhow to represent knowledge",
    "start": "2642040",
    "end": "2648120"
  },
  {
    "text": "with data structures, tuples,\nlists, dictionaries, more complicated structures.",
    "start": "2648120",
    "end": "2653640"
  },
  {
    "text": "We've shown you some good\ncomputational metaphors, iteration, and loops. Recursion has a great way\nof breaking problems down",
    "start": "2653640",
    "end": "2661170"
  },
  {
    "text": "into simpler versions\nof the same problem. And there really are metaphors. There are ways of\nthinking about problems.",
    "start": "2661170",
    "end": "2667990"
  },
  {
    "text": "We've given you abstraction, the\nidea of capture a computation, bury it in a procedure.",
    "start": "2667990",
    "end": "2673450"
  },
  {
    "text": "You now have a contract. You don't need to know what\nhappens inside the procedure as long as it delivers the\nanswer it says it would.",
    "start": "2673450",
    "end": "2679519"
  },
  {
    "text": "Or another way of saying\nit, you can delegate it to somebody and trust\nthat you're going to get what you like out of it.",
    "start": "2679520",
    "end": "2684880"
  },
  {
    "text": "We've seen classes and\nmethods as a wonderful way to modularize systems,\nto capture combinations",
    "start": "2684880",
    "end": "2691150"
  },
  {
    "text": "of data and things that operate\non them in a nice, elegant way. And we just spent\na week and a half",
    "start": "2691150",
    "end": "2696730"
  },
  {
    "text": "talking about\nclasses of algorithms and their complexity. If you step up a level, what we\nhope you've gotten out of this",
    "start": "2696730",
    "end": "2705985"
  },
  {
    "text": "are a couple of things. You've begun to learn\ncomputational modes of thinking.",
    "start": "2705985",
    "end": "2711210"
  },
  {
    "text": "How do I tackle a problem\nand divide and conquer? How do I think about\nrecursion as a tool in dealing with something?",
    "start": "2711210",
    "end": "2717480"
  },
  {
    "text": "You've begun to-- begun, I will\nuse that word deliberately-- to master the art of\ncomputational problem solving.",
    "start": "2717480",
    "end": "2722790"
  },
  {
    "text": "How can you take a problem\nand turn it into an algorithm? And especially, you've\nbegun to have the ability",
    "start": "2722790",
    "end": "2728730"
  },
  {
    "text": "to make the computer\ndo what you want it to. To say, if I've got a problem\nfrom biology or chemistry",
    "start": "2728730",
    "end": "2733740"
  },
  {
    "text": "or math or physics or\nchemical engineering or mechanical engineering, how\ndo I take that problem and say,",
    "start": "2733740",
    "end": "2739506"
  },
  {
    "text": "here's how I would\ndesign an algorithm to give me a simulation and a\nway of evaluating what it does.",
    "start": "2739507",
    "end": "2745654"
  },
  {
    "text": "And so what we\nhope we've done is, we've started you down the path\nto being able to think and act like a computer scientist.",
    "start": "2745654",
    "end": "2752170"
  },
  {
    "text": "All right. Don't panic. That doesn't mean you\nstare at people's shoes when you talk to them. Not all computer scientists\ndo that, just faculty.",
    "start": "2752170",
    "end": "2758220"
  },
  {
    "text": " Sorry, John. So what do computer\nscientists do?",
    "start": "2758220",
    "end": "2764022"
  },
  {
    "text": "And this is actually\nmeant to be serious. And I put up two of my\nfamous historical figures of computer scientists.",
    "start": "2764022",
    "end": "2770050"
  },
  {
    "text": "They do think computationally. They think about abstractions,\nabout algorithms,",
    "start": "2770050",
    "end": "2775420"
  },
  {
    "text": "about automated execution. So the three A's of\ncomputational thinking. And in the same way\nthat traditionally you",
    "start": "2775420",
    "end": "2781000"
  },
  {
    "text": "had the three R's of reading,\nwriting, and arithmetic, computational thinking we\nhope is becoming a fundamental",
    "start": "2781000",
    "end": "2787059"
  },
  {
    "text": "that every well-educated\nperson is going to need. And that says, you think\nabout the right abstraction.",
    "start": "2787060",
    "end": "2795130"
  },
  {
    "text": "When you have a problem\nin your [INAUDIBLE] what's the right abstraction? How do I pull apart the pieces?",
    "start": "2795130",
    "end": "2800740"
  },
  {
    "text": "How do I think about that in\nterms of decomposing things into a relationship that I\ncan use to solve problems?",
    "start": "2800740",
    "end": "2808079"
  },
  {
    "text": "How do I automate? How do I mechanize\nthat abstraction? How do I use what I know\nhappens inside of the machine",
    "start": "2808080",
    "end": "2814500"
  },
  {
    "text": "to write a sequence of\nsteps in a language I'm using to capture that process? And then finally, how do I\nturn that into an algorithm?",
    "start": "2814500",
    "end": "2822570"
  },
  {
    "text": "And that not only means I\nneed a language for describing those automated\nprocesses, and if you",
    "start": "2822570",
    "end": "2829140"
  },
  {
    "text": "like allowing the\nabstraction of details, but frankly also a\nway to communicate.",
    "start": "2829140",
    "end": "2834420"
  },
  {
    "text": "If you have to think\ncrisply about how do I describe an algorithm,\nit's actually giving you a way to\ncrystallize or clarify",
    "start": "2834420",
    "end": "2841440"
  },
  {
    "text": "your thinking about a problem. This is not to say you should\ntalk to your friends in Python. I don't recommend it.",
    "start": "2841440",
    "end": "2847500"
  },
  {
    "text": "But it does say you\nshould use that thinking as a way of capturing your ideas\nof what you're going to do.",
    "start": "2847500",
    "end": "2853780"
  },
  {
    "text": "And that leads, then,\nto this idea of, how difficult is a problem? How best can I solve it?",
    "start": "2853780",
    "end": "2860230"
  },
  {
    "text": "We've shown you these\ncomplexity classes and we've hinted at the idea\nthat in fact some problems are inherently more\ndifficult than others.",
    "start": "2860230",
    "end": "2867350"
  },
  {
    "text": "That's something I hope you\ncome back to as you go along. And especially we want you to\nstart thinking recursively.",
    "start": "2867350",
    "end": "2873680"
  },
  {
    "text": "We want you to think about\nhow do I take a hard problem, break it up into simpler\nversions of the same problem,",
    "start": "2873680",
    "end": "2879520"
  },
  {
    "text": "and then construct the solution. And that shows up\nlots of places.",
    "start": "2879520",
    "end": "2885589"
  },
  {
    "text": "Right? Recursion is in all sorts\nof wonderful places. So just to give you an example,\nI could say to you recursively,",
    "start": "2885590",
    "end": "2892030"
  },
  {
    "text": "\"This lecture will\nend when I'm done talking about this\nlecture, which will end when I'm done talking\nabout this lecture, which",
    "start": "2892030",
    "end": "2898600"
  },
  {
    "text": "will end when I'm done--\" All right. You don't like\ninfinite recursion. Good luck on the exam.",
    "start": "2898600",
    "end": "2903750"
  },
  {
    "start": "2903750",
    "end": "2911340"
  }
]