[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6050"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or to\nview additional materials",
    "start": "6050",
    "end": "12690"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "12690",
    "end": "25845"
  },
  {
    "text": "PROFESSOR: All right, today we\nare going to learn to count. One, two, three-- In a\nalgorithmic sense of course,",
    "start": "25845",
    "end": "34460"
  },
  {
    "text": "and prove hardness of\ncounting style problems. Or more generally, any problem\nwhere the output is an integer.",
    "start": "34460",
    "end": "41830"
  },
  {
    "text": "Like approximation\nalgorithms, we need to define a slightly\nstronger version of our NP",
    "start": "41830",
    "end": "48629"
  },
  {
    "text": "style problem. It's not going to be\na decision problem. The remaining type\nis a search problem.",
    "start": "48630",
    "end": "54360"
  },
  {
    "start": "54360",
    "end": "63380"
  },
  {
    "text": "Search problem you're\ntrying to find a solution. This is just like\noptimization problem, but with no objective function.",
    "start": "63380",
    "end": "68980"
  },
  {
    "text": "Today all solutions\nare created equal. So we just want to know\nhow many there are.",
    "start": "68980",
    "end": "76510"
  },
  {
    "text": "So we're given an\ninstance, the problem. We want to produce a solution.",
    "start": "76510",
    "end": "81555"
  },
  {
    "text": " Whereas in the\ndecision problem we want to know whether\na solution exists.",
    "start": "81555",
    "end": "89530"
  },
  {
    "text": "With a search problem we\nwant to find a solution.",
    "start": "89530",
    "end": "95234"
  },
  {
    "text": "Almost the same thing. ",
    "start": "95234",
    "end": "116040"
  },
  {
    "text": "So that would be a search\nproblem in general. For an NP search problem you can\nrecognize what is an instance.",
    "start": "116040",
    "end": "122899"
  },
  {
    "text": "And you could\nrecognize solutions to instances in polynomial time. Given an instance in the\nsolution you can say,",
    "start": "122900",
    "end": "130050"
  },
  {
    "text": "yes that's a valid solution.  OK for such a search\nproblem of course,",
    "start": "130050",
    "end": "136687"
  },
  {
    "text": "is the corresponding\ndecision problem. Which is, does there\nexist a solution? If you can solve this,\nthen you can solve that.",
    "start": "136687",
    "end": "145890"
  },
  {
    "text": "You could solve the\ndecision problem in NP by guessing a\nsolution and so on.",
    "start": "145890",
    "end": "152460"
  },
  {
    "text": "So this is intricately related\nto the notion of a certificate for an NP problem.",
    "start": "152460",
    "end": "158129"
  },
  {
    "text": "The idea solutions\nare certificates. But when we say\nproblem is in NP, we say there is some way\nto define certificate",
    "start": "158130",
    "end": "164080"
  },
  {
    "text": "so that this kind of\nproblem can be set up. And the goal here--\nthe point here",
    "start": "164080",
    "end": "169360"
  },
  {
    "text": "is to solidify a specific\nnotion of certificate. We can't just use any\none, because we're going to count them\nthe-- If you formulate",
    "start": "169360",
    "end": "175550"
  },
  {
    "text": "the certificates\nin different ways you'll get different counts. But in general,\nevery NP problem can",
    "start": "175550",
    "end": "183350"
  },
  {
    "text": "be converted into an NP search\nproblem in at least one way.",
    "start": "183350",
    "end": "189210"
  },
  {
    "text": " But each notional\ncertificate gives you",
    "start": "189210",
    "end": "195880"
  },
  {
    "text": "a notion of the search problem. OK, in some complexity context\nthese are called NP relations,",
    "start": "195880",
    "end": "202700"
  },
  {
    "text": "the way you specify\nwhat a certificate is. But I think this is the more\nalgorithmic perspective. All right, so\ngiven such a search",
    "start": "202700",
    "end": "209150"
  },
  {
    "text": "problem we turn it into\na counting problem. ",
    "start": "209150",
    "end": "218800"
  },
  {
    "text": "So that's a search\nproblem, is called A. Then counting problem will\nbe sharp A, not hashtag",
    "start": "218800",
    "end": "226800"
  },
  {
    "text": "A. Some people call it\nnumber A. The problem is,",
    "start": "226800",
    "end": "232410"
  },
  {
    "text": "count the number of solutions\nfor a given instance.",
    "start": "232410",
    "end": "239305"
  },
  {
    "start": "239305",
    "end": "249769"
  },
  {
    "text": "OK so in particular, you\ndetect whether the number is zero, or not zero. So this is strictly\nharder in some sense",
    "start": "249770",
    "end": "256850"
  },
  {
    "text": "than the decision problem,\ndoes there exist a solution. And we will see some problems\nwhere the search problem is",
    "start": "256850",
    "end": "263670"
  },
  {
    "text": "polynomial, but the\ncorresponding counting problem is actually hard.",
    "start": "263670",
    "end": "270199"
  },
  {
    "text": "I can't say NP\nhard, there's going to be a new notion of hardness. So some examples.",
    "start": "270200",
    "end": "276760"
  },
  {
    "text": "Pretty much every problem we've\ndefined as a decision problem had a search problem in mind.",
    "start": "276760",
    "end": "284110"
  },
  {
    "text": "So something like SAT, you need\nto satisfy all of the things. So there's no objective\nfunction here,",
    "start": "284110",
    "end": "289190"
  },
  {
    "text": "but you want to know\nhow many different ways, how many different variable\nassignments are there that satisfy the given formula?",
    "start": "289190",
    "end": "295350"
  },
  {
    "text": "Or take your favorite\npencil and paper puzzle, we'll be looking at\nShakashaka today, again.",
    "start": "295350",
    "end": "306720"
  },
  {
    "text": "How many different\nsolutions are there? You'd like, when\ndesigning a puzzle, usually you want to\nknow that it's unique.",
    "start": "306720",
    "end": "312370"
  },
  {
    "text": "So it'd be nice if you could\ncount the number of solutions and show that it's one. These problems are going to turn\nout to be very hard of course.",
    "start": "312370",
    "end": "320699"
  },
  {
    "text": "So let's define a\nnotion of hardness. Sharp P is going to be the\nclass of all of these counting",
    "start": "320700",
    "end": "328325"
  },
  {
    "text": "problems. ",
    "start": "328325",
    "end": "342290"
  },
  {
    "text": "This is the sort of certificate. Yeah, question? AUDIENCE: Just for the\npuzzle application, is it going to turn out\nthat counting if there's",
    "start": "342290",
    "end": "347965"
  },
  {
    "text": "one solution versus\none-to-one solution is as hard as just counting total numbers? PROFESSOR: It's\nnot quite as hard,",
    "start": "347965",
    "end": "356350"
  },
  {
    "text": "but we will show that\ndistinguishing one for more than one is very\nhard, is NP complete actually.",
    "start": "356350",
    "end": "364430"
  },
  {
    "text": "That's a decision problem that\ncould show that's NP complete. So normally we think\nof zero versus one, but it turns out one\nversus two is not--",
    "start": "364430",
    "end": "371060"
  },
  {
    "text": "or one versus more than one\nis about the same difficulty. Counting is even\nharder I would say.",
    "start": "371060",
    "end": "379290"
  },
  {
    "text": "But it's bad news all around. There's different\nnotions of bad. ",
    "start": "379290",
    "end": "384720"
  },
  {
    "text": "Cool, so this is the sort\nof certificate perspective.",
    "start": "384720",
    "end": "389810"
  },
  {
    "text": "With NP we-- I had given you\ntwo different definitions of certificate perspective, and\na non-deterministic computation",
    "start": "389810",
    "end": "395880"
  },
  {
    "text": "perspective. You can do the same\ncomputational perspective here. You could say sharp P\nis the set of problems,",
    "start": "395880",
    "end": "407290"
  },
  {
    "text": "solved by polynomial time. ",
    "start": "407290",
    "end": "415660"
  },
  {
    "text": "Call it a non-deterministic\ncounting algorithm. ",
    "start": "415660",
    "end": "423297"
  },
  {
    "text": "We don't need Turing\nmachines for this definition, although that was of course\nthe original definition. So take your favorite\nnon-deterministic algorithm",
    "start": "423297",
    "end": "431320"
  },
  {
    "text": "as usual for NP, it makes\nguesses at various points, multiple branches.",
    "start": "431320",
    "end": "436580"
  },
  {
    "text": "With the NP algorithm the way\nwe'd execute it on an NP style machine is that we would\nsee whether there's",
    "start": "436580",
    "end": "442970"
  },
  {
    "text": "any path that led to a yes. Again, it's going to output\nyes or no at the end. In this case, what the computer\ndoes, the sharp P style",
    "start": "442970",
    "end": "450930"
  },
  {
    "text": "computer, is it-- conceptually\nit runs all the branches. It counts the number of yeses\nand returns that number.",
    "start": "450930",
    "end": "457310"
  },
  {
    "text": "So even though the algorithm is\ndesigned to return yes or no, when it executes it\nactually outputs a number.",
    "start": "457310",
    "end": "464030"
  },
  {
    "text": "The original paper\nsays magically. It's just as magic as an NP\nmachine, but a little-- even",
    "start": "464030",
    "end": "470014"
  },
  {
    "text": "a little more magical.  OK so you-- I mean if you're not\ncomfortable with that we just",
    "start": "470014",
    "end": "477080"
  },
  {
    "text": "use this definition, same thing. This is all work done by Les\nValiant in the late '70s.",
    "start": "477080",
    "end": "487727"
  },
  {
    "text": "These notions. ",
    "start": "487727",
    "end": "502710"
  },
  {
    "text": "So it's pretty clear,\nit's pretty easy to show all these\nproblems are in sharp P, because they were-- the\ncorresponding decision problems",
    "start": "502710",
    "end": "508951"
  },
  {
    "text": "were in NP. We convert them into\nsharp P algorithms.",
    "start": "508951",
    "end": "514110"
  },
  {
    "text": "Now let's think about hardness\nwith respect to sharp P. As usual we want\nit to mean as hard as all problems in that class.",
    "start": "514110",
    "end": "520409"
  },
  {
    "text": "Meaning that we can reduce all\nthose problems to our problem. And the question is, by\nwhat kind of reductions?",
    "start": "520409",
    "end": "528520"
  },
  {
    "text": "And here we're going to allow\nvery powerful reductions. ",
    "start": "528520",
    "end": "536972"
  },
  {
    "text": "We've talked about\nthese reductions but never actually been\nallowed to use them. Multicall, Cook-style\nreductions.",
    "start": "536972",
    "end": "543550"
  },
  {
    "text": " I think in general, this\nis a common approach",
    "start": "543550",
    "end": "548770"
  },
  {
    "text": "for FNP, which is Functions\nNP style functions.",
    "start": "548770",
    "end": "554530"
  },
  {
    "text": "Which you can also think of\nthis as kind of-- the counting version is, the\noutput is a value.",
    "start": "554530",
    "end": "559850"
  },
  {
    "text": "So you have a function instead\nof just a decision question. When the output is some thing,\nsome number, in this case.",
    "start": "559850",
    "end": "568190"
  },
  {
    "text": "You might have to manipulate\nthat number at the end. And so at the very least,\nyou need to make a call and do some stuff before\nyou return your modified",
    "start": "568190",
    "end": "575360"
  },
  {
    "text": "answer in your reduction. But in fact we're going\nto allow full tilt, you could make multiple calls\nto some hypothetical solution",
    "start": "575360",
    "end": "583790"
  },
  {
    "text": "to your problem in order to\nsolve all problems in sharp P. And we'll actually use\nmulticall a bunch of times.",
    "start": "583790",
    "end": "590840"
  },
  {
    "text": "We won't always need multicall. Often we'll be able to get\naway with a much simpler kind",
    "start": "590840",
    "end": "595850"
  },
  {
    "text": "of reduction. Let me tell you that kind now. ",
    "start": "595850",
    "end": "601990"
  },
  {
    "text": "But in general we allow\narbitrary multicall. Yeah? AUDIENCE: Your not limited\nin the number of multicalls?",
    "start": "601990",
    "end": "607820"
  },
  {
    "text": "PROFESSOR: Right. You could do polynomial\nnumber of multicalls. As before, reduction\nshould be polynomial time.",
    "start": "607820",
    "end": "614030"
  },
  {
    "text": "But, so you're basically\ngiven an algorithm. That's usually called an Oracle\nthat solves your problem,",
    "start": "614030",
    "end": "624160"
  },
  {
    "text": "solves your problem B. And\nyou want to solve-- yeah, you want to solve A by\nmultiple calls to B. So",
    "start": "624160",
    "end": "633030"
  },
  {
    "text": "what, we'll see a bunch\nof examples of that. Here's a more familiar\nstyle of reduction.",
    "start": "633030",
    "end": "639370"
  },
  {
    "text": "And often, for a lot of problems\nwe can get away with this. But especially a lot\nof the early proofs needed the multicall.",
    "start": "639370",
    "end": "645380"
  },
  {
    "text": "And as you'll see you can\ndo lots of cool tricks with multicall\nusing number theory.",
    "start": "645380",
    "end": "650500"
  },
  {
    "text": " So parsimonious reduction.",
    "start": "650500",
    "end": "656790"
  },
  {
    "text": "This is for NP search problems. ",
    "start": "656790",
    "end": "663470"
  },
  {
    "text": "This is going to be a lot like\nan NP reduction, regular style.",
    "start": "663470",
    "end": "669079"
  },
  {
    "text": "So again we convert an instance\nx of a, five function f,",
    "start": "669080",
    "end": "676470"
  },
  {
    "text": "into an instance x prime of b.",
    "start": "676470",
    "end": "682699"
  },
  {
    "text": " And that function should\nbe computable in poly time.",
    "start": "682700",
    "end": "692030"
  },
  {
    "text": " So far just like\nan NP reduction.",
    "start": "692030",
    "end": "697386"
  },
  {
    "text": " And usually we would say,\nfor a search problem,",
    "start": "697386",
    "end": "703450"
  },
  {
    "text": "we would say there\nexists a solution for x, if and only if, there\nexists a solution for x prime.",
    "start": "703450",
    "end": "708740"
  },
  {
    "text": "That would be the direct analog\nof an NP style reduction. But we're going to ask\nfor a stronger condition.",
    "start": "708740",
    "end": "715670"
  },
  {
    "text": "Which is that the number\nof solutions to problem",
    "start": "715670",
    "end": "721040"
  },
  {
    "text": "A to instance x, equals the\nnumber of solutions of type B",
    "start": "721040",
    "end": "730889"
  },
  {
    "text": "to instance x prime. OK so in particular, this\none's going to equal to one,",
    "start": "730890",
    "end": "736050"
  },
  {
    "text": "this one will be greater than\nequal to one, and vice versa. So this is stronger\nthan an NP style reduction for the\ncorresponding decision problem.",
    "start": "736050",
    "end": "742870"
  },
  {
    "text": " Yeah, so I even wrote that down.",
    "start": "742870",
    "end": "749780"
  },
  {
    "text": "This implies that the decision\nproblems have the same answer. ",
    "start": "749780",
    "end": "762100"
  },
  {
    "text": "So in particular, this implies\nthat we have an NP reduction. ",
    "start": "762100",
    "end": "772020"
  },
  {
    "text": "So in particular if A,\nthe decision version of A",
    "start": "772020",
    "end": "779540"
  },
  {
    "text": "is NP hard, then the decision\nversion of B is NP hard. But more interesting is\nthat, if A is sharp P hard,",
    "start": "779540",
    "end": "790399"
  },
  {
    "text": "then B is sharp P hard. ",
    "start": "790400",
    "end": "797820"
  },
  {
    "text": "But also this holds for NP. For the decision versions\nof A and B. Sorry,",
    "start": "797820",
    "end": "805130"
  },
  {
    "text": "sharp A and sharp B. OK this\nis a subtle distinction.",
    "start": "805130",
    "end": "810505"
  },
  {
    "text": " For sharp P hardness we're\ntalking about the counting",
    "start": "810505",
    "end": "816709"
  },
  {
    "text": "problems, and we're\ntalking about making calls to other counting solutions. Then doing things with those\nnumbers and who knows what,",
    "start": "816710",
    "end": "822400"
  },
  {
    "text": "making many calls. With parsimonious\nreduction we're thinking about the\nnon-counting version.",
    "start": "822400",
    "end": "828990"
  },
  {
    "text": "Just the search problem. And so we're not worried about\ncounting solutions directly,",
    "start": "828990",
    "end": "835050"
  },
  {
    "text": "I mean it-- what's nice\nabout parsimonious reductions is they look just\nlike NP reductions for the regular old problems.",
    "start": "835050",
    "end": "841250"
  },
  {
    "text": "We just need this\nextra property, parsimony that the number\nof solutions to the unit",
    "start": "841250",
    "end": "847180"
  },
  {
    "text": "is preserved through\nthe transformation. And a lot of the proofs\nthat we've covered follow--",
    "start": "847180",
    "end": "854350"
  },
  {
    "text": "have this property and\nwill be good for us. If we can get our\nsource problems hard,",
    "start": "854350",
    "end": "859410"
  },
  {
    "text": "then we'll get a lot of\ntarget problems hard as well. ",
    "start": "859410",
    "end": "865390"
  },
  {
    "text": "Well let me tell you about one\nmore version which I made up.",
    "start": "865390",
    "end": "874100"
  },
  {
    "text": "C-monious reductions. ",
    "start": "874100",
    "end": "883550"
  },
  {
    "text": "This is my attempt\nat understanding the entomology of parsimonious. Which is something like little\nmoney, being very thrifty.",
    "start": "883550",
    "end": "893880"
  },
  {
    "text": "So this is having a\nlittle bit more money. You have C dollars. But you have to be very\nconsistent about it.",
    "start": "893880",
    "end": "899880"
  },
  {
    "text": "I should probably add\nsome word that means uniform in the middle there. But I want the number of\nsolutions of x prime to equal",
    "start": "899880",
    "end": "908390"
  },
  {
    "text": "c times the number\nof solutions to x. ",
    "start": "908390",
    "end": "916110"
  },
  {
    "text": "C a fixed constant. And it has to be the\nsame for every x.",
    "start": "916110",
    "end": "922510"
  },
  {
    "text": " This would be just as good\nfrom a sharp P perspective.",
    "start": "922510",
    "end": "928020"
  },
  {
    "text": "Because if I could solve\nB and I wanted to solve A, I would convert A to B, run\nthe thing, then divide by C.",
    "start": "928020",
    "end": "935680"
  },
  {
    "text": "There will never be a remainder\nand then I have my answer to A. As long as C's not zero.",
    "start": "935680",
    "end": "941690"
  },
  {
    "text": "C should be an integer here. We will see a bunch of\nC-monious reductions.",
    "start": "941690",
    "end": "951790"
  },
  {
    "text": "I guess, yeah it doesn't have\nto be totally independent of x.",
    "start": "951790",
    "end": "958110"
  },
  {
    "text": "It can depend on things like n. Something that we can\ncompute easily I guess.",
    "start": "958110",
    "end": "963870"
  },
  {
    "text": "Shouldn't be too dependent on x. All right, let's do-- let's\nlook at some examples.",
    "start": "963870",
    "end": "970340"
  },
  {
    "text": "So, going to make a list here\nof sharp P complete problems.",
    "start": "970340",
    "end": "983030"
  },
  {
    "text": " And we'll start with versions\nof SAT because we like SAT.",
    "start": "983030",
    "end": "989560"
  },
  {
    "text": "So I'm just going to tell\nyou that sharp 3SAT is hard.",
    "start": "989560",
    "end": "996120"
  },
  {
    "text": "First sharp SAT is hard, and\nthe usual proof of SAT hardness shows sharp P completeness\nfor sharp SAT.",
    "start": "996120",
    "end": "1005459"
  },
  {
    "text": "And if you're careful about\nthe conversion from SAT to 3CNF you can get sharp\nthree satisfied.",
    "start": "1005460",
    "end": "1011290"
  },
  {
    "text": "It's not terribly\ninteresting and tedious. So I will skip that one.",
    "start": "1011290",
    "end": "1017660"
  },
  {
    "text": "So what about Planar 3SAT? ",
    "start": "1017660",
    "end": "1023710"
  },
  {
    "text": "I stared at this diagram\nmany times for a while. This is lecture seven for\nreplacing a crossing in a 3SAT",
    "start": "1023710",
    "end": "1032130"
  },
  {
    "text": "thing with this picture. And all of this argument and\nthis table in particular,",
    "start": "1032130",
    "end": "1037949"
  },
  {
    "text": "was concluding\nthat the variables are forced in this scenario. If you know what\nA and B are-- so",
    "start": "1037950",
    "end": "1045089"
  },
  {
    "text": "once you choose\nwhat A and B are, these two have to\nbe copies of A and B and then it ended up\nthat A-- We proved",
    "start": "1045089",
    "end": "1051760"
  },
  {
    "text": "that A1 equaled A2\nand B1 equaled B2, and then these\nvariables were all",
    "start": "1051760",
    "end": "1056860"
  },
  {
    "text": "determined by these formula. And so once you know A and\nB all the variable settings are forced.",
    "start": "1056860",
    "end": "1062220"
  },
  {
    "text": "Which means you preserve\nthe number of solutions. So planar sharp 3SAT\nis sharp P complete.",
    "start": "1062220",
    "end": "1070330"
  },
  {
    "text": " I'd like to pretend that there's\nsome debate within the sharp P",
    "start": "1070330",
    "end": "1076200"
  },
  {
    "text": "community about whether the\nsharp P are here or here. I kind of prefer it here,\nbut I've seen it over here,",
    "start": "1076200",
    "end": "1083580"
  },
  {
    "text": "so you know.  I don't think I've even\nseen that mentioned but I'm",
    "start": "1083580",
    "end": "1090140"
  },
  {
    "text": "sure it's out there somewhere. So let's flip through our\nother planar hardness proofs.",
    "start": "1090140",
    "end": "1096550"
  },
  {
    "text": "This is planar monotone\nrectilinear 3SAT. Mainly the monotone aspect.",
    "start": "1096550",
    "end": "1101790"
  },
  {
    "text": "We wanted there to\nbe all the variables to be positive or\nnegative in every clause. And so we had this trick\nfor forcing this thing",
    "start": "1101790",
    "end": "1109820"
  },
  {
    "text": "to be not equal to this thing. Basically copying the variable\nwith a flip in its truths. But again everything\nhere is forced.",
    "start": "1109820",
    "end": "1116610"
  },
  {
    "text": "The variables we\nmake are guaranteed to be copies or indications\nof other variables. So we preserve\nnumber of solutions.",
    "start": "1116610",
    "end": "1122550"
  },
  {
    "text": "So this is hard too. ",
    "start": "1122550",
    "end": "1140260"
  },
  {
    "text": "OK, what else? I think we can-- I\njust made this up --but we can add the\ndash three as usual",
    "start": "1140260",
    "end": "1147870"
  },
  {
    "text": "by replacing each variable\nwith little cycle.  What about planar 1-in-3 SAT?",
    "start": "1147870",
    "end": "1154530"
  },
  {
    "text": "So we had, we actually had\ntwo ways to prove this. This is one of the\nreductions and we",
    "start": "1154530",
    "end": "1163179"
  },
  {
    "text": "check that this set\nof SAT clauses, these are the SAT clauses implemented\nthis 1-in-3 SAT clause.",
    "start": "1163180",
    "end": "1169476"
  },
  {
    "text": "And I stared at this for a while\nand its kind of hard to tell. So I just wrote a program\nto enumerate all cases and found there's\nexactly one case where",
    "start": "1169477",
    "end": "1176970"
  },
  {
    "text": "this is not parsimonious. And that's when this is\nfalse and these two are true.",
    "start": "1176970",
    "end": "1185760"
  },
  {
    "text": "And because of these\nnegations you can either solve the internal\nthings like this, or you could flip all\nof the internal nodes",
    "start": "1185760",
    "end": "1191380"
  },
  {
    "text": "and that will also be satisfied. Now this is bad news, because\nall the other cases there",
    "start": "1191380",
    "end": "1197600"
  },
  {
    "text": "is a unique solution over here. But in this case there\nare exactly two solutions. If it was two everywhere\nwe'd be happy,",
    "start": "1197600",
    "end": "1203945"
  },
  {
    "text": "that would be twomonious. If it was one everywhere\nwe'd be happier, happy that would be parsimonious. But because it's a\nmixture of one and two",
    "start": "1203945",
    "end": "1211210"
  },
  {
    "text": "we have approximately\npreserved the counts with a factor of two. But that's not good\nenough for sharp P, we need exact preservation.",
    "start": "1211210",
    "end": "1219240"
  },
  {
    "text": "So this is no good. Luckily we had another\nproof which was actually a stronger result, Planar\nPositive Rectilinear 1-in-3SAT.",
    "start": "1219240",
    "end": "1227399"
  },
  {
    "text": "This was a version\nwith no negation, and this one does work.",
    "start": "1227400",
    "end": "1232580"
  },
  {
    "text": "There's first of all\nthis, the not equal gadget and the equal gadget. I don't want to go through them,\nbut again A forced to be zero,",
    "start": "1232580",
    "end": "1240850"
  },
  {
    "text": "C was forced to be one,\nwhich forces B and D to be zero in this picture. So all is good.",
    "start": "1240850",
    "end": "1248930"
  },
  {
    "text": "And again parsimonious there. And then this one was too\ncomplicated to think about, so I again wrote a\nprogram to check-- try",
    "start": "1248930",
    "end": "1255413"
  },
  {
    "text": "all the cases and\nevery choice of XYZ over here that's satisfied,\nthis is a reduction from 3SAT.",
    "start": "1255413",
    "end": "1262040"
  },
  {
    "text": "So if at least one\nof these is true, there will be exactly\none solution over here. And just as before after--\nif zero of them are true,",
    "start": "1262040",
    "end": "1269555"
  },
  {
    "text": "then they'll be\nno solution here. That we already knew. So good news.",
    "start": "1269555",
    "end": "1274860"
  },
  {
    "text": "I should check whether that's\nmentioned in their paper but it proves planar positive\nrectilinear 1-in-3SAT",
    "start": "1274860",
    "end": "1280830"
  },
  {
    "text": "is sharp P complete. ",
    "start": "1280830",
    "end": "1302460"
  },
  {
    "text": "Sharp go here, here.  OK, so lots of fun results.",
    "start": "1302460",
    "end": "1308470"
  },
  {
    "text": "We get a lot of results\njust from-- by looking at old proofs. Now they're not\nall going to work,",
    "start": "1308470",
    "end": "1314929"
  },
  {
    "text": "but I have one more\nexample that does work. Shakashaka, remember the puzzle?",
    "start": "1314930",
    "end": "1320410"
  },
  {
    "text": "It's a Nikoli puzzle. Every square,\nevery white squared can be filled in with a black\nthing, but adjacent to it too,",
    "start": "1320410",
    "end": "1327250"
  },
  {
    "text": "there should be\nexactly two of those. And you want all of the\nresulting white regions to be rectangles\npossibly rotated.",
    "start": "1327250",
    "end": "1334450"
  },
  {
    "text": "And we had this reduction\nfrom planar 3SAT,",
    "start": "1334450",
    "end": "1339519"
  },
  {
    "text": "and this basically,\nthis type of wire. And there's exactly two\nways to solve a wire.",
    "start": "1339520",
    "end": "1346674"
  },
  {
    "text": "One for true, one for false. So once you know\nwhat the variable is, you're forced what\nto do, there is also a parity-shifting gadget\nand splits and turns.",
    "start": "1346674",
    "end": "1353700"
  },
  {
    "text": "But again, exactly two\nways to solve everything. So parsimonious, and then\nthe clause everything",
    "start": "1353700",
    "end": "1359300"
  },
  {
    "text": "was basically\nforced just-- you're forced whether to have\nthese square diamonds. And you just\neliminated the one case",
    "start": "1359300",
    "end": "1365700"
  },
  {
    "text": "where the clause\nis not satisfied. So there's really no flexibility\nhere, one way to solve it. And so it's a\nparsimonious reduction",
    "start": "1365700",
    "end": "1372310"
  },
  {
    "text": "and indeed in the\npaper we mentioned this implies sharp P\ncompleteness of counting",
    "start": "1372310",
    "end": "1377330"
  },
  {
    "text": "Shakashaka solutions. Cool. Here's an example\nthat doesn't work.",
    "start": "1377330",
    "end": "1384900"
  },
  {
    "text": "A little different,\nHamiltonicity or I guess I want to count the\nnumber of Hamiltonian cycles.",
    "start": "1384900",
    "end": "1391130"
  },
  {
    "text": "The natural counting\nversion of Hamiltonicity.",
    "start": "1391130",
    "end": "1396510"
  },
  {
    "text": "So we had two proofs for\nthis, neither of them work in a sharp P sense.",
    "start": "1396510",
    "end": "1402370"
  },
  {
    "text": "This one, remember\nthe idea was that you would traverse back and\nforth one way or the other",
    "start": "1402370",
    "end": "1408980"
  },
  {
    "text": "to get all of these nodes. That was a variable,\nthat's fine. There're exactly\ntwo ways to do that. But then the clause,\nthe clause had",
    "start": "1408980",
    "end": "1415700"
  },
  {
    "text": "to be satisfied by at least\none of the three variables. And if it's satisfied\nfor example,",
    "start": "1415700",
    "end": "1421220"
  },
  {
    "text": "by all three variables,\nthen it could be this node is\npicked up like this, or the node could be\npicked up this way,",
    "start": "1421220",
    "end": "1426934"
  },
  {
    "text": "or the node could be\npicked up this way. So there are three\ndifferent solutions even for one fixed\nvariable assignment.",
    "start": "1426934",
    "end": "1433130"
  },
  {
    "text": "So that's bad, we're\nnot allowed to do that. It'd be fine if every one was\nthree, but some will be one, some will be two,\nsome will be three.",
    "start": "1433130",
    "end": "1439870"
  },
  {
    "text": "That's going to be some\nweird product of those over the clauses. So that doesn't work. We had this other proof.",
    "start": "1439870",
    "end": "1446075"
  },
  {
    "text": " This was a notation\nfor this gadget which",
    "start": "1446075",
    "end": "1453429"
  },
  {
    "text": "forced either this directed\nedge or this directed edge to be used, but not both.",
    "start": "1453430",
    "end": "1460910"
  },
  {
    "text": "It's and x or. So that's, remember\nwhat these things meant and that we have the\nvariable true or false.",
    "start": "1460910",
    "end": "1466990"
  },
  {
    "text": "And then we connected\nthem to the clauses, then separately we\nhad a crossover. But the trouble\nis in the clauses,",
    "start": "1466990",
    "end": "1474940"
  },
  {
    "text": "because again, the idea was that\nthe variable chose this guy, this one was forbidden.",
    "start": "1474940",
    "end": "1480500"
  },
  {
    "text": "That's actually the\ngood case I think. If the variable chose\nthis, chose this one,",
    "start": "1480500",
    "end": "1486390"
  },
  {
    "text": "then this one must be included. That's bad news, if you\nfollowed this, and then this,",
    "start": "1486390",
    "end": "1492661"
  },
  {
    "text": "and then this, then you cut\noff this part of the graph and you don't get one\nHamiltonian cycle. You want at least one variable\nto allow you to go left here",
    "start": "1492661",
    "end": "1502049"
  },
  {
    "text": "and then you can go and grab\nall this stuff and come back. But again if multiple\nvariables satisfy this thing,",
    "start": "1502050",
    "end": "1508000"
  },
  {
    "text": "any one of them could\ngrab the left rectangle. And so they get multiple\nsolutions, not parsimonious.",
    "start": "1508000",
    "end": "1514115"
  },
  {
    "text": " But parts of this\nproof are useful and they are used to make\na parsimonious proof.",
    "start": "1514115",
    "end": "1522240"
  },
  {
    "text": "So the part that was useful is\nthis x or gadget, and the way to implement crossovers. So just remember that\nyou can build x ors,",
    "start": "1522240",
    "end": "1532389"
  },
  {
    "text": "and that you can cross them\nover using a bunch of x ors. So only x or connections,\nthese notations,",
    "start": "1532390",
    "end": "1538610"
  },
  {
    "text": "can be crossed in this view. We're going to\nbuild more gadgets and this is a proof\nby Sato in 2002.",
    "start": "1538610",
    "end": "1546195"
  },
  {
    "text": "It was a bachelor's\nthesis actually in Japan. And so here you see\nredrawn the x or gadget.",
    "start": "1546195",
    "end": "1553199"
  },
  {
    "text": "Here it's going to be\nfor undirected graph, same structure works.",
    "start": "1553199",
    "end": "1558290"
  },
  {
    "text": "And this is do the\ncrossover using x or. So he's denoting x or's as this\nbig X connected to two things.",
    "start": "1558290",
    "end": "1565710"
  },
  {
    "text": "Now given that we can\nbuild an or gadget, which says that either we use this\nedge or we use this edge,",
    "start": "1565710",
    "end": "1571880"
  },
  {
    "text": "or both. Here we're not using an x\nor, but this is the graph.",
    "start": "1571880",
    "end": "1577450"
  },
  {
    "text": "And the key is this has\nto be done uniquely. That's in particular\nthe point of these dots.",
    "start": "1577450",
    "end": "1584330"
  },
  {
    "text": "This looks asymmetric,\nit's kind of weird. For example, if they're both\nin, then this guy can do this,",
    "start": "1584330",
    "end": "1593630"
  },
  {
    "text": "and this guy can do that. But it's not symmetric. You couldn't flip-- this guy\ncan't grab these points, that",
    "start": "1593630",
    "end": "1600594"
  },
  {
    "text": "would be a second solution\nwhich would be bad, but we missed these points. So this guy has to stay\ndown here if he's in at all.",
    "start": "1600594",
    "end": "1607370"
  },
  {
    "text": "And then this guy's\nthe only one who can grab those extra points. Or if just the top guy's\nin then you do this.",
    "start": "1607370",
    "end": "1617565"
  },
  {
    "text": " And if just the bottom guy's\nin I think it's symmetric.",
    "start": "1617565",
    "end": "1626080"
  },
  {
    "text": "That is symmetric,\nand it's unique. Good.",
    "start": "1626080",
    "end": "1631350"
  },
  {
    "text": "If there's an implication-- so\nthis says if this edge is in, then that edge must be\nin the Hamiltonian cycle",
    "start": "1631350",
    "end": "1640210"
  },
  {
    "text": "and this is\nessentially by copying. And we just have to\ngrab an extra edge",
    "start": "1640210",
    "end": "1645290"
  },
  {
    "text": "and add this little extra\nthing just for copying value. So if this one is in, then\nthis edge must not be used,",
    "start": "1645290",
    "end": "1653330"
  },
  {
    "text": "which means this edge if\nit's used must go straight. In particular, this is not used. And we have an or that\nmeans that this one must",
    "start": "1653330",
    "end": "1659520"
  },
  {
    "text": "be forced by a property of or. On the other hand, if this is\nnot set, this one must be used.",
    "start": "1659520",
    "end": "1667950"
  },
  {
    "text": "So I guess this must be\nan edge that was already going to be used for something.",
    "start": "1667950",
    "end": "1673640"
  },
  {
    "text": "So that edge is just going\nto get diverted down here, and then the or doesn't\nconstrain us at all.",
    "start": "1673640",
    "end": "1679390"
  },
  {
    "text": "Because zero or one, this one\nis one so the or is happy. So that's an implication.",
    "start": "1679390",
    "end": "1685200"
  },
  {
    "text": "It's going to be a little more\nsubtle how we combine these. This is the tricky gadget.",
    "start": "1685200",
    "end": "1692700"
  },
  {
    "text": "I sort of understand\nit, but it has a lot of details to\ncheck, especially on the uniqueness front.",
    "start": "1692700",
    "end": "1698770"
  },
  {
    "text": "But this is a three-way\nor which we're using for clause, SAT\nclause, 3SAT clause.",
    "start": "1698770",
    "end": "1704480"
  },
  {
    "text": "We want at least one\nof these three edges to be in the Hamiltonian cycle. And so here we use x ors, ors,\nimplications, and more x ors.",
    "start": "1704480",
    "end": "1714570"
  },
  {
    "text": "I'll show you the\nintended solution, assuming I can remember it.",
    "start": "1714570",
    "end": "1719670"
  },
  {
    "text": "So let's say for example, this\nedge is in the Hamiltonian cycle.",
    "start": "1719670",
    "end": "1725750"
  },
  {
    "text": "Then we're going to do\nsomething like go over here,",
    "start": "1725750",
    "end": "1734130"
  },
  {
    "text": "come back around like this. And then AUDIENCE: Did you just\nviolate the x or already?",
    "start": "1734130",
    "end": "1740584"
  },
  {
    "text": "PROFESSOR: This x or? AUDIENCE: Yeah. PROFESSOR: No, I went here. AUDIENCE: And then you went up. PROFESSOR: Oh, then\nI went up, good.",
    "start": "1740584",
    "end": "1746150"
  },
  {
    "text": "So actually I have to\ndo this and around. Yes, so all these constraints\nare thrown in, basically",
    "start": "1746150",
    "end": "1751230"
  },
  {
    "text": "to force it to be unique. Without them you could--\nstill it would still work, but it wouldn't be parsimonious.",
    "start": "1751230",
    "end": "1757620"
  },
  {
    "text": "OK, let's see, this-- AUDIENCE: In the middle. PROFESSOR: --doesn't\nconstrain me.",
    "start": "1757620",
    "end": "1762700"
  },
  {
    "text": "This one? AUDIENCE: Yeah. PROFESSOR: Good, go up there. So I did exactly one of those\nand then I need to grab these.",
    "start": "1762700",
    "end": "1772650"
  },
  {
    "text": "OK, so that's one picture. I think it's not\ntotally symmetric. Again, so you have to\ncheck all three of them.",
    "start": "1772650",
    "end": "1779390"
  },
  {
    "text": "And you have to check for\nexample, It's not so hard. Like if this guy was also in,\nI could have just gone here",
    "start": "1779390",
    "end": "1785269"
  },
  {
    "text": "and this guy would\npick up those nodes. So as long as, in general, as\nlong as at least one of them",
    "start": "1785270",
    "end": "1790900"
  },
  {
    "text": "is on you're OK. And furthermore,\nif they're all on, there's still a unique\nway to solve it.",
    "start": "1790900",
    "end": "1797120"
  },
  {
    "text": "And I'm not going\nto go through that. But it's thanks to all\nof these constraints they're cutting out\nmultiple solutions.",
    "start": "1797120",
    "end": "1804110"
  },
  {
    "text": "OK, so now we just had\nto put these together, this is pretty easy.",
    "start": "1804110",
    "end": "1809830"
  },
  {
    "text": "It's pretty much\nlike the old proof. Again, we have-- we\nrepresent variables by having these double edges\nin a Hamiltonian cycle.",
    "start": "1809830",
    "end": "1818250"
  },
  {
    "text": "You're going to choose\none or the other. And then we have this exclusive\nor, forcing y and y bar",
    "start": "1818250",
    "end": "1824200"
  },
  {
    "text": "to choose opposite choices. And then there are these\nexclusive words to say, if you chose that one,\nthen you can't choose it",
    "start": "1824200",
    "end": "1829908"
  },
  {
    "text": "for this clause. And then the clauses\nare just represented by those three-way ors. So this overall\nstructure is the same.",
    "start": "1829908",
    "end": "1836190"
  },
  {
    "text": "The crossovers\nare done as before and it's really these\ngadgets that have changed. And they're complicated,\nbut it's parsimonious.",
    "start": "1836190",
    "end": "1843420"
  },
  {
    "text": "So with a little more work. We get the number of\nHamiltonian cycles",
    "start": "1843420",
    "end": "1848630"
  },
  {
    "text": "in planar max degree three\ngraphs is sharp P complete.",
    "start": "1848630",
    "end": "1854400"
  },
  {
    "start": "1854400",
    "end": "1876920"
  },
  {
    "text": "So that's nice. And from that, we\nget Slitherlink.",
    "start": "1876920",
    "end": "1884390"
  },
  {
    "text": "So this is-- I've sort of been\nhiding these facts from you. When we originally\ncovered these proofs, these papers actually talk\nabout-- This one doesn't quite",
    "start": "1884390",
    "end": "1893240"
  },
  {
    "text": "talk about sharp P, but it\nis also sharp P complete. Counting the number of\nsolutions to Slitherlink is sharp P complete.",
    "start": "1893240",
    "end": "1900206"
  },
  {
    "text": "This was the puzzle. Again you have that number of\nadjacent edges-- each number.",
    "start": "1900207",
    "end": "1905530"
  },
  {
    "text": "And the proof was a\nreduction from planar max degree three Hamiltonian cycle.",
    "start": "1905530",
    "end": "1912809"
  },
  {
    "text": "And at the time I\nsaid, oh you could just assume it's a grid graph. And then you just need\nthe required gadget,",
    "start": "1912810",
    "end": "1919880"
  },
  {
    "text": "which is the b part. Just need this gadget. This was a gadget because\nit had these ones.",
    "start": "1919880",
    "end": "1925010"
  },
  {
    "text": "It meant it had to be\ntraversed like a regular vertex in Hamiltonian cycle\nand it turns out",
    "start": "1925010",
    "end": "1930380"
  },
  {
    "text": "there was a way to traverse\nit straight or with returns. And then we could block\noff edges wherever there",
    "start": "1930380",
    "end": "1935610"
  },
  {
    "text": "wasn't supposed to be an edge. And so if you're reducing from\nHamiltonicity and grid graphs that was the whole\nproof and we were happy.",
    "start": "1935610",
    "end": "1942720"
  },
  {
    "text": "Now we don't know whether\nHamiltonicity and grid graphs is sharp P complete. ",
    "start": "1942720",
    "end": "1950796"
  },
  {
    "text": "To prove that we\nwould need to be able to put bipartite\nin here, and I don't know of a proof of that. Good open problem.",
    "start": "1950796",
    "end": "1957390"
  },
  {
    "text": "So this was the reason that they\nhave this other gadget, which was to make Hamiltonian-- to\nmake these white vertices that",
    "start": "1957390",
    "end": "1965139"
  },
  {
    "text": "don't have to be traversed. They're just implementing\nan edge basically. So just the black vertices\nhave to be traversed.",
    "start": "1965140",
    "end": "1971600"
  },
  {
    "text": "We needed that for drawing\nthings on the grid. But if you just don't put in\nthe ones and add in these zeros",
    "start": "1971600",
    "end": "1977790"
  },
  {
    "text": "again you can traverse\nit or not all. And this one, as\nyou can read here,",
    "start": "1977790",
    "end": "1983340"
  },
  {
    "text": "says this would be\nbad to have happen. In fact you can rule\nit out, it will never happen in the\nsituations we want.",
    "start": "1983340",
    "end": "1990390"
  },
  {
    "text": "Because the white vertices\nonly have two neighbors that are traversable. ",
    "start": "1990390",
    "end": "1998310"
  },
  {
    "text": "Cool, and then furthermore, all\nof these solutions are unique. There is exactly one\nway to go straight.",
    "start": "1998310",
    "end": "2004540"
  },
  {
    "text": "There's exactly one way to\nturn right, exactly one way to turn left. That's the subtle thing that\nwas not revealed before.",
    "start": "2004540",
    "end": "2010490"
  },
  {
    "text": "But if you stare at it long\nenough you will be convinced. So this is a\nparsimonious reduction",
    "start": "2010490",
    "end": "2016590"
  },
  {
    "text": "from planar max degree\nthree Hamiltonian cycle to Slitherlink. So counting solutions\nin Slitherlink is hard.",
    "start": "2016590",
    "end": "2023870"
  },
  {
    "text": "That was the fully\nworked out example. Any questions?",
    "start": "2023870",
    "end": "2030412"
  },
  {
    "text": "Yeah. AUDIENCE: So are there\nexamples of problems in P who's counting versions\nare sharp P complete?",
    "start": "2030412",
    "end": "2036380"
  },
  {
    "text": "PROFESSOR: Yes. And that will be the next topic. Well it's going to be a\nlittle while til we get there.",
    "start": "2036380",
    "end": "2042650"
  },
  {
    "text": "But I'm going to proof\nthings and then we will get to an answer,\nbut the answer is yes. ",
    "start": "2042650",
    "end": "2050531"
  },
  {
    "text": "AUDIENCE: Question. PROFESSOR: Yeah. AUDIENCE: So, for if\nwe wanted-- if we're like thinking about\na problem that we're",
    "start": "2050531",
    "end": "2056540"
  },
  {
    "text": "trying to prove something\nP-hard and we start thinking maybe stop, we would just show\nit's in P by finding algorithm. Is there a nice way to show\nthat our problem is not P hard?",
    "start": "2056540",
    "end": "2065500"
  },
  {
    "text": "PROFESSOR: Well you usually\nwould say that sharp, that problem is NP.",
    "start": "2065500",
    "end": "2071299"
  },
  {
    "text": "You find a polynomial\ncounting algorithm. And they're lot's of examples of\npolynomial counting algorithms",
    "start": "2071300",
    "end": "2077190"
  },
  {
    "text": "especially on like trees. Typical thing is\nyour dynamic program. So like maybe you want\nto know-- let's say",
    "start": "2077190",
    "end": "2082520"
  },
  {
    "text": "you have a rooted binary\ntree and for each node you could flip it\nthis way or not. How many different ways\nare there to do that?",
    "start": "2082520",
    "end": "2088250"
  },
  {
    "text": "And maybe have some\nconstraints on how that's done. Then you just try it\nflipped, and try it not. You do dynamic\nprogramming and then",
    "start": "2088250",
    "end": "2094580"
  },
  {
    "text": "you multiply the two\nsolution sizes together, and you get the\noverall solution size. So you basically\ndo combinatorics",
    "start": "2094580",
    "end": "2101380"
  },
  {
    "text": "and if there's\nindependent choices you multiply, if they're\nopposing choices you add,",
    "start": "2101380",
    "end": "2106539"
  },
  {
    "text": "that kind of thing. And from that you get polynomial\ntime counting algorithms. In tree-like things that\noften works inbound treewidth.",
    "start": "2106540",
    "end": "2114040"
  },
  {
    "text": "AUDIENCE: Do you know that NP\nhard problems who's counting problems are not sharp P hard?",
    "start": "2114040",
    "end": "2119567"
  },
  {
    "text": "I guess this technique\nwouldn't work. PROFESSOR: I would say\ngenerally most problems that are hard to decide\nare hard to count.",
    "start": "2119567",
    "end": "2126190"
  },
  {
    "text": "And where NP hard\nimplies sharp P hard. I don't think there's a\nhard theorem in that there's",
    "start": "2126190",
    "end": "2133329"
  },
  {
    "text": "nothing that really says--\nmeta-theorem that says that, but that's the feeling. ",
    "start": "2133329",
    "end": "2139141"
  },
  {
    "text": "It'd be nice, then\nwe wouldn't have to do all the parsimonious work. ",
    "start": "2139142",
    "end": "2145700"
  },
  {
    "text": "All right so it's time for a\nlittle bit of linear algebra. ",
    "start": "2145700",
    "end": "2154410"
  },
  {
    "text": "Let me remind you, I\nguess linear algebra's not a pre-req for this class,\nbut probably you've seen the determinant\nof a matrix and use,",
    "start": "2154410",
    "end": "2161489"
  },
  {
    "text": "if it's zero then it's\nnon-invertible blah, blah, blah. Let me remind you\nof a definition. ",
    "start": "2161489",
    "end": "2171980"
  },
  {
    "text": "And we rarely use\nmatrix notation. So let me remind you\nof the usual one.",
    "start": "2171980",
    "end": "2177539"
  },
  {
    "text": "N by n, square matrix. This is a polynomial\ntime problem. It is-- but I'm going to define\nit in an exponential way.",
    "start": "2177540",
    "end": "2185329"
  },
  {
    "text": "But you probably know a\npolynomial time algorithm. This is not an algorithms class\nso you don't need to know it.",
    "start": "2185330",
    "end": "2191937"
  },
  {
    "text": " But it's based on Gaussian\nelimination, the usual one.",
    "start": "2191937",
    "end": "2197010"
  },
  {
    "start": "2197010",
    "end": "2216370"
  },
  {
    "text": "So you look at all\npermutation matrices, all n by n permutation\nmatrices which",
    "start": "2216370",
    "end": "2222580"
  },
  {
    "text": "you can think of as a\npermutation pi on the numbers 1 through n. And you look at i\ncomma pi event, that",
    "start": "2222580",
    "end": "2229779"
  },
  {
    "text": "defines the permutation matrix. You take the product\nof the matrix values-- if you superimpose\nthe permutation matrix on that,",
    "start": "2229780",
    "end": "2240140"
  },
  {
    "text": "on the given matrix A. You take that product\nyou possibly negate it",
    "start": "2240140",
    "end": "2248040"
  },
  {
    "text": "if the sign of your\npermutation was negative, if it does an even number-- an\nodd number of transpositions",
    "start": "2248040",
    "end": "2255960"
  },
  {
    "text": "then this will be negative. Otherwise, it'd be positive\nand you add those up. So of course, an exponential\nnumber permutations",
    "start": "2255960",
    "end": "2262840"
  },
  {
    "text": "you wouldn't want to do this as\nan algorithm but turns out it can be done in polynomial time.",
    "start": "2262840",
    "end": "2269744"
  },
  {
    "text": "The reason for\ntalking about this is by analogy I want the\nnotion of permanent, of an n",
    "start": "2269745",
    "end": "2276690"
  },
  {
    "text": "by n matrix. The same thing, but\nwith this removed. ",
    "start": "2276690",
    "end": "2282369"
  },
  {
    "text": "The determinant of A is the\nsum over all permutations pi, of the product from i equals\none to n of ai, pi of i.",
    "start": "2282370",
    "end": "2293900"
  },
  {
    "text": "Now this may not look\nlike a counting problem. It turns out it is a\ncounting problem, sort of, a weighted counting problem.",
    "start": "2293900",
    "end": "2299232"
  },
  {
    "text": "We will get back to counting\nproblems in a moment. This Is related to the number\nof perfect matchings in a graph.",
    "start": "2299232",
    "end": "2304740"
  },
  {
    "text": "But at this point\nit's just-- it's a quantity we want to compute. This is a function of a matrix. And computing this function\nis sharp P complete.",
    "start": "2304740",
    "end": "2313599"
  },
  {
    "text": "Yeah. AUDIENCE: Could it just be\nsine minus 1 2e sine of pi? ",
    "start": "2313600",
    "end": "2320276"
  },
  {
    "text": "PROFESSOR: I don't\nknow, it depends. If you call the number of\ntranspositions mod two so then",
    "start": "2320276",
    "end": "2326695"
  },
  {
    "text": "it's zero one. You know what I mean. ",
    "start": "2326695",
    "end": "2333210"
  },
  {
    "text": "All right. So the claim is, permanent\nis sharp P complete. We're going to prove this.",
    "start": "2333210",
    "end": "2339100"
  },
  {
    "text": "This was the original problem\nproved sharp P complete. Well other than\nsharp 3SAT I guess.",
    "start": "2339100",
    "end": "2345230"
  },
  {
    "text": "Same paper.  Great so let me give\nyou a little intuition",
    "start": "2345230",
    "end": "2355130"
  },
  {
    "text": "of what the permanent is. We'd like a definition\nthat's not so algebraic.",
    "start": "2355130",
    "end": "2360496"
  },
  {
    "text": "At least I would like one more\ngraph-theoretic would be nice. So here's what\nwe're going to do.",
    "start": "2360496",
    "end": "2365810"
  },
  {
    "text": "We're going to convert A, our\nmatrix, into a weighted graph. ",
    "start": "2365810",
    "end": "2382130"
  },
  {
    "text": "And then let me go\nto the other board.",
    "start": "2382130",
    "end": "2389519"
  },
  {
    "start": "2389520",
    "end": "2400580"
  },
  {
    "text": "How do we convert\ninto a weighted graph, weighted directed graph? Well the weight from,\nvertex I to vertex J is AIJ.",
    "start": "2400580",
    "end": "2408420"
  },
  {
    "text": "The obvious transformation\nif it's zero then there's not going to be an edge,\nalthough it doesn't matter.",
    "start": "2408420",
    "end": "2413450"
  },
  {
    "text": "You could leave the edge\nin with weight zero, it will be the same. Because what we're\ninterested in, in the claim",
    "start": "2413450",
    "end": "2418920"
  },
  {
    "text": "is the permanent of the\nmatrix equals the sum,",
    "start": "2418920",
    "end": "2428430"
  },
  {
    "text": "of the product of edge\nweights, over all cycle covers",
    "start": "2428430",
    "end": "2442217"
  },
  {
    "text": "of the graph. OK, this is really just the same\nthing, but a little bit easier",
    "start": "2442217",
    "end": "2449240"
  },
  {
    "text": "to think about. So a cycle cover it's kind\nof like a Hamiltonian cycle but there could be\nmultiple cycles.",
    "start": "2449240",
    "end": "2455440"
  },
  {
    "text": "So at every vertex you\nshould enter and leave. And so you have sort of in\ndegree one and out degree one.",
    "start": "2455440",
    "end": "2461430"
  },
  {
    "text": "So you end up decomposing the\ngraph into vertex destroyed cycles which hit every vertex.",
    "start": "2461430",
    "end": "2468940"
  },
  {
    "text": "That's a cycle cover. Important note here, we do\nhave loops in the graph.",
    "start": "2468940",
    "end": "2474190"
  },
  {
    "text": "We can't have loops\nif aii is not zero. Then you have a loop. So the idea is to look\nat every cycle cover",
    "start": "2474190",
    "end": "2482840"
  },
  {
    "text": "and just take the product\nof the edge weights that are edges in\nthe cycles and then",
    "start": "2482840",
    "end": "2488549"
  },
  {
    "text": "add that up overall\ncycle covers. So it's the same thing\nif you stare at it long enough because\nyou're going from I.",
    "start": "2488550",
    "end": "2494135"
  },
  {
    "text": "I mean this is\nbasically the cycle decomposition of the permutation\nif you know permutation theory.",
    "start": "2494135",
    "end": "2499410"
  },
  {
    "text": "So if you don't,\ndon't worry this is your definition of permanent. So we're going to prove this\nproblem, is sharp P complete?",
    "start": "2499410",
    "end": "2506839"
  },
  {
    "start": "2506840",
    "end": "2515360"
  },
  {
    "text": "And we're going to prove\nit by a C-monious reduction",
    "start": "2515360",
    "end": "2525100"
  },
  {
    "text": "from sharp 3SAT. ",
    "start": "2525100",
    "end": "2530717"
  },
  {
    "text": "AUDIENCE: You said this is just\nthe original thing introducing that? PROFESSOR: Yes.",
    "start": "2530718",
    "end": "2536530"
  },
  {
    "text": "AUDIENCE: Did they not call it--\nyou made up the term C-monious. What did they call it?",
    "start": "2536530",
    "end": "2542009"
  },
  {
    "text": "PROFESSOR: I think they\njust called it a reduction.",
    "start": "2542010",
    "end": "2547260"
  },
  {
    "text": "I think pretty sure, they\njust called it reduction. And for them-- and they\nsaid at the beginning, --reduction means\nmulticall reduction.",
    "start": "2547260",
    "end": "2554990"
  },
  {
    "text": "So they're thinking about that. But it turns out to be\na C-monious reduction.",
    "start": "2554990",
    "end": "2560190"
  },
  {
    "text": "C will not be\nliterally constant, but it will be a function\nof the problem sets.",
    "start": "2560190",
    "end": "2566140"
  },
  {
    "text": "And this is the reduction. So as usual, we have a clause\ngadget, and a variable gadget,",
    "start": "2566140",
    "end": "2571910"
  },
  {
    "text": "and then there's\nthis shaded thing which is this matrix, which\nyou can think of as a graph.",
    "start": "2571910",
    "end": "2578776"
  },
  {
    "text": "But in this case will\nbe easier to just think of as a black box matrix. OK all of the edges in these\npictures have weight one.",
    "start": "2578776",
    "end": "2587990"
  },
  {
    "text": "And then these\nedges are special, and here you have some\nloops in the center. No one else has a loop.",
    "start": "2587990",
    "end": "2594980"
  },
  {
    "text": "So the high-level\nidea is if you're thinking of a cycle\ncover in a vertex",
    "start": "2594980",
    "end": "2602680"
  },
  {
    "text": "because you--\nsorry, in a variable because you've got a vertex\nhere and a vertex here you",
    "start": "2602680",
    "end": "2608400"
  },
  {
    "text": "have to cover them somehow. And the intent is that you\neither cover this one this way, or you cover this\none that way, those",
    "start": "2608400",
    "end": "2615470"
  },
  {
    "text": "would be the true and the false. And then from the\nclouds perspective",
    "start": "2615470",
    "end": "2622100"
  },
  {
    "text": "we need to understand, so then\nthese things are connected. This thing would go\nhere and this thing",
    "start": "2622100",
    "end": "2627655"
  },
  {
    "text": "would go here, and\ngenerally connect variables to clauses in the obvious way.",
    "start": "2627655",
    "end": "2633530"
  },
  {
    "text": "And in general, for every\noccurrence of the positive form and the negative form, sorry\npositive or negative form",
    "start": "2633530",
    "end": "2639420"
  },
  {
    "text": "you'll have one of these blobs\nthat connects to the clause. So overall architecture\nshould be clear.",
    "start": "2639420",
    "end": "2644920"
  },
  {
    "text": "What does this gadget do? It has some nifty properties\nlet me write them down.",
    "start": "2644920",
    "end": "2653550"
  },
  {
    "text": "So this matrix is\ncalled x in the paper. So first of all, permanent\nof x equals zero.",
    "start": "2653550",
    "end": "2663299"
  },
  {
    "text": "I'm just going to\nstate these, I mean you could check them by\ndoing the computation. So we're interested in cycle\ncovers whose products are not",
    "start": "2663299",
    "end": "2672090"
  },
  {
    "text": "zero. Otherwise they don't\ncontribute to the sum. So I could also add in non-zero.",
    "start": "2672090",
    "end": "2679310"
  },
  {
    "text": "Meaning the product is non-zero. OK so if we had a cycle cover\nthat just-- where the cycle",
    "start": "2679310",
    "end": "2686840"
  },
  {
    "text": "cover just locally solved this\nthing by traversing these four vertices all by themselves.",
    "start": "2686840",
    "end": "2692170"
  },
  {
    "text": "Then that cycle would\nhave permanent zero. And then the permanent\nof the whole cycle",
    "start": "2692170",
    "end": "2697870"
  },
  {
    "text": "covers the product\nof those things. And so the overall\nthing would be zero. So if you look at\na nonzero cycle",
    "start": "2697870",
    "end": "2704220"
  },
  {
    "text": "cover you can't just\nleave these isolated, you have to visit them. You have to enter\nthem and leave them.",
    "start": "2704220",
    "end": "2711384"
  },
  {
    "text": "Now the question is, where\ncould you enter and leave them? This is maybe not totally\nclear from the drawing",
    "start": "2711384",
    "end": "2716710"
  },
  {
    "text": "but, the intent is that\nthe first vertex in-- which corresponds to row one, column\none here, is the left side.",
    "start": "2716710",
    "end": "2724980"
  },
  {
    "text": "And the column four, row\nfour is the right side. I claim that you have\nto enter at one of those",
    "start": "2724980",
    "end": "2731940"
  },
  {
    "text": "and leave at the other. Why is that true? For a couple reasons.",
    "start": "2731940",
    "end": "2737040"
  },
  {
    "text": "One is that the permanent\nof x with row and column",
    "start": "2737040",
    "end": "2742950"
  },
  {
    "text": "one removed is zero,\nand so is the permanent",
    "start": "2742950",
    "end": "2751552"
  },
  {
    "text": "of x with row and\ncolumn four removed. ",
    "start": "2751552",
    "end": "2758810"
  },
  {
    "text": "OK vertex one and four\nout of this x matrix",
    "start": "2758810",
    "end": "2764660"
  },
  {
    "text": "are the only places you\ncould enter and leave. But it's possible you enter\nand then immediately leave. So you just touch\nthe thing and leave.",
    "start": "2764660",
    "end": "2770842"
  },
  {
    "text": "That would correspond to\nleaving behind a three by three sub-matrix. Either by deleting\nthis row and column,",
    "start": "2770842",
    "end": "2776070"
  },
  {
    "text": "or by deleting this row and\ncolumn if you just visit this vertex and leave. Those also have permanent zero. So if you're looking at\na nonzero cycle cover",
    "start": "2776070",
    "end": "2783210"
  },
  {
    "text": "you can't do that. So together those mean\nthat you enter one of them and leave at the other.",
    "start": "2783210",
    "end": "2789530"
  },
  {
    "text": "And furthermore, if you look\nat the permanent of x with rows",
    "start": "2789530",
    "end": "2803380"
  },
  {
    "text": "and columns one and four\nremoved, both removed,",
    "start": "2803380",
    "end": "2809980"
  },
  {
    "text": "that's also zero. So the permanent of\nthis sub-matrix is zero",
    "start": "2809980",
    "end": "2815550"
  },
  {
    "text": "and therefore you can't\njust enter here, jump here, and leave. Which means finally you have\nto traverse all four vertices.",
    "start": "2815550",
    "end": "2822894"
  },
  {
    "text": "You enter at one of them,\ntraverse everything, and leave at the other. So basically this\nis a forced edge.",
    "start": "2822894",
    "end": "2830960"
  },
  {
    "text": "If you touch here you have to\nthen traverse and leave there, in any cycle cover.",
    "start": "2830960",
    "end": "2837470"
  },
  {
    "text": "So we're used to seeing forced\nedges in Hamiltonian cycle. This is sort of a\nstronger form of it. That's cool now one catch.",
    "start": "2837470",
    "end": "2846300"
  },
  {
    "text": "So if you do that, if you\nenter let's say vertex one and leave at vertex four, you\nwill end up-- your contribution",
    "start": "2846300",
    "end": "2853510"
  },
  {
    "text": "to the cycle will end up\nbeing the permanent of x minus row one and column four.",
    "start": "2853510",
    "end": "2861930"
  },
  {
    "text": "Or symmetrically\nwith four and one. You'd like this to be\none, but it's four.",
    "start": "2861930",
    "end": "2869740"
  },
  {
    "text": "So there are four ways to\ntraverse the forced edge. But because it's\nalways four, or zero,",
    "start": "2869740",
    "end": "2876910"
  },
  {
    "text": "and then it doesn't\ncontribute at all. It's always going to be four\nso this will be a nice uniform blow up in our\nnumber of solutions.",
    "start": "2876910",
    "end": "2883861"
  },
  {
    "text": "C is not going to\nbe four, but it's going to be four to some power. It's going to be\nfour to the power,",
    "start": "2883862",
    "end": "2890309"
  },
  {
    "text": "the number of those gadgets. So because you can\npredict that, I mean in the reduction you know\nexactly how many there it's not",
    "start": "2890310",
    "end": "2896830"
  },
  {
    "text": "depend on the solution,\nit's only dependent on how you built this thing. So at the end, we're\ngoing to divide by four",
    "start": "2896830",
    "end": "2902670"
  },
  {
    "text": "to the power-- it's I think five\ntimes the number of clauses.",
    "start": "2902670",
    "end": "2911210"
  },
  {
    "text": "So C is going to be four to\nthe power of five times number",
    "start": "2911210",
    "end": "2916214"
  },
  {
    "text": "of clauses because\nthere are five of these gadgets per clause. So at the end we'll just\ndivide by that and be done.",
    "start": "2916215",
    "end": "2923220"
  },
  {
    "text": "AUDIENCE: Would it be 10\ntimes because you got it on the variable side too?",
    "start": "2923220",
    "end": "2928848"
  },
  {
    "text": "PROFESSOR: Yes 10\ntimes, thank you. AUDIENCE: Eight-- two\nof those don't actually connect to variables. PROFESSOR: Two of\nthem do not connect",
    "start": "2928848",
    "end": "2935171"
  },
  {
    "text": "to variables, yeah eight. Eight times the\nnumber of clauses. ",
    "start": "2935171",
    "end": "2942650"
  },
  {
    "text": "All right so now it's\njust a matter of-- now that you understand\nwhat this is now",
    "start": "2942650",
    "end": "2950570"
  },
  {
    "text": "you could sort of see how\ninformation is communicated. Because if the variable they\nchoose is the true setting",
    "start": "2950570",
    "end": "2955940"
  },
  {
    "text": "it must visit these edges. And once it touches here\nit has to leave here and this is a edge\ngoing the wrong way.",
    "start": "2955940",
    "end": "2962430"
  },
  {
    "text": "So you can't try to traverse--\nfrom here you cannot touch the clauses down below.",
    "start": "2962430",
    "end": "2968651"
  },
  {
    "text": "Once you touch here\nto you have to go here and then you must\nleave here and so on. But you leave this\none behind and it",
    "start": "2968651",
    "end": "2975350"
  },
  {
    "text": "must be traversed by the\nclause and vice versa. If I choose this one then these\nmust be visited by the clauses.",
    "start": "2975350",
    "end": "2982090"
  },
  {
    "text": "So from the clause\nperspective as he said there are five of these\ngadgets, but only three of them",
    "start": "2982090",
    "end": "2987140"
  },
  {
    "text": "are connected. So these guys are forced, and\nthere's a bunch of edges here",
    "start": "2987140",
    "end": "2993340"
  },
  {
    "text": "and it's a case analysis. So it'd be the short version. Let's just do a\ncouple of examples.",
    "start": "2993340",
    "end": "2998350"
  },
  {
    "text": "If none of these\nhave been traversed by the variable then\nthe-- pretty much you have to go straight through.",
    "start": "2998350",
    "end": "3005820"
  },
  {
    "text": "But then you're in trouble. Because there's no pointer\nback to the beginning.",
    "start": "3005820",
    "end": "3011000"
  },
  {
    "text": "You can only go back this far. So if none of-- if you have\nto traverse all these things",
    "start": "3011000",
    "end": "3017590"
  },
  {
    "text": "it's not possible\nwith the cycle cover. But if any one of them\nhas been traversed.",
    "start": "3017590",
    "end": "3022740"
  },
  {
    "text": "So for example, if this\none has been traversed then we'll jump over it,\nvisit these guys,",
    "start": "3022740",
    "end": "3028279"
  },
  {
    "text": "jump back here, visit this\nguy, and jump back there. And if you check that's the\nonly way to do it, it's unique.",
    "start": "3028280",
    "end": "3035339"
  },
  {
    "text": "And similarly any one of\nthem has been covered, or if all three of them have\nbeen covered, or if two of them",
    "start": "3035340",
    "end": "3040690"
  },
  {
    "text": "have been covered\nin all cases this is a unique way from\nthe clause perspective to connect all the things.",
    "start": "3040690",
    "end": "3046154"
  },
  {
    "text": "Now in reality,\nthere's four ways to traverse each\nof these things. So the whole thing\ngrows by this product but it doesn't matter\nwhich cycle they appear in.",
    "start": "3046155",
    "end": "3053050"
  },
  {
    "text": "We'll always scale the number\nof solutions by factor of four. So it's nice uniform\nscaling C-monious.",
    "start": "3053050",
    "end": "3062509"
  },
  {
    "text": "And that's permanent. Pretty cool. Pretty cool proof. Now one not so nice\nthing about this proof",
    "start": "3062510",
    "end": "3070339"
  },
  {
    "text": "is it involves numbers negative\none, zero, one, two, and three.",
    "start": "3070340",
    "end": "3076640"
  },
  {
    "text": "For reasons we will\nsee in a moment it'd be really to\njust use zero and one. And it turns out\nthat's possible,",
    "start": "3076640",
    "end": "3084520"
  },
  {
    "text": "but it's kind of annoying. It's nifty though. I think this will demonstrate\na bunch of fun number theory",
    "start": "3084520",
    "end": "3090416"
  },
  {
    "text": "things you could do. So next goal is\nzero one permanent. Now the matrix is\njust zero's and one's.",
    "start": "3090416",
    "end": "3096829"
  },
  {
    "text": "This is sharp P complete. I'll tell you the reason that\nis particularly interesting.",
    "start": "3096830",
    "end": "3107508"
  },
  {
    "text": "As it gets rid of\nthe weights it makes it more clearly-- makes it more\nclearly a counting problem.",
    "start": "3107508",
    "end": "3117710"
  },
  {
    "text": "So first of all is the\nnumber of cycle covers in the corresponding graph.",
    "start": "3117710",
    "end": "3123300"
  },
  {
    "text": "No more weights it's\njust-- if it's a zero there's not an edge. Since you can't traverse\nthere if it's a one you can traverse there\nand then every cycle cover",
    "start": "3123300",
    "end": "3130120"
  },
  {
    "text": "will have product one. So it's just counting them. But it also happens to be the\nnumber of perfect matchings",
    "start": "3130120",
    "end": "3138750"
  },
  {
    "text": "in a bipartite graph. ",
    "start": "3138750",
    "end": "3153380"
  },
  {
    "text": "Which bipartite graph? The bipartite graph where\none side of the bi-partition",
    "start": "3153380",
    "end": "3159480"
  },
  {
    "text": "is the rows and the other side\nis the columns of the matrix. ",
    "start": "3159480",
    "end": "3167620"
  },
  {
    "text": "And you have an edge I j. ",
    "start": "3167620",
    "end": "3175240"
  },
  {
    "text": "If and only if a i sorry\nj is not a good not",
    "start": "3175240",
    "end": "3182770"
  },
  {
    "text": "the best terminology\nfor I-- where I here's is a vertex of v one and\nj is a vertex of v two.",
    "start": "3182770",
    "end": "3189660"
  },
  {
    "text": "Whenever I j equals 1, if\nit's zero there's no edge. ",
    "start": "3189660",
    "end": "3195170"
  },
  {
    "text": "It's a little confusing because\nthe matrix is not symmetric so you might say well, how does\nthis make an undirected graph?",
    "start": "3195170",
    "end": "3203040"
  },
  {
    "text": "Because you could have and edge\nfrom i to j, but not to j to I. That's OK because I is\ninterpreted in the left space",
    "start": "3203040",
    "end": "3208640"
  },
  {
    "text": "and j is interpreted\nin the right space. So the asymmetric\ncase would be the case",
    "start": "3208640",
    "end": "3213730"
  },
  {
    "text": "that there's an edge here to\nhere, but not an edge from here to here. That's perfectly OK.",
    "start": "3213730",
    "end": "3218850"
  },
  {
    "text": "This is one, two, three,\nfor a three by three matrix we get a six vertex\ngraph, not three vertex.",
    "start": "3218850",
    "end": "3225619"
  },
  {
    "text": "That's what allows you to be\nasymmetric on a loop, what we were normally thinking\nis a loop just means",
    "start": "3225620",
    "end": "3231010"
  },
  {
    "text": "a horizontal edge. OK so it turns out if you\nlook at this graph, which",
    "start": "3231010",
    "end": "3237000"
  },
  {
    "text": "is a different graph from\nwhat we started with, the number of perfect\nmatchings in that graph is equal to the number of cycle\ncovers in the other graph,",
    "start": "3237000",
    "end": "3245824"
  },
  {
    "text": "in the directed graph. So this one's undirected\nand bipartite. This one was directed\nand not bipartite.",
    "start": "3245824",
    "end": "3252089"
  },
  {
    "text": "And the rough intuition\nis that we're just kind of pulling\nthe vertices apart",
    "start": "3252090",
    "end": "3257683"
  },
  {
    "text": "into two versions, the left\nversion and the right version. If you imagine there being\na connection from one",
    "start": "3257684",
    "end": "3263010"
  },
  {
    "text": "right to one left and similarly\nfrom two right to two left directed.",
    "start": "3263010",
    "end": "3268157"
  },
  {
    "text": "And three right to three left,\nhey it looks like cycles again. You went here, then you went\naround, then you went here,",
    "start": "3268157",
    "end": "3273507"
  },
  {
    "text": "then you went there. That was a cycle and\nsimilarly this is a cycle. So they're the same thing.",
    "start": "3273507",
    "end": "3279390"
  },
  {
    "text": "This is cool because\nperfect matchings are interesting in\nparticular perfect matchings are easy to find\nin polynomial time.",
    "start": "3279390",
    "end": "3286470"
  },
  {
    "text": "But counting them\nas Sharp P complete. Getting back to that question. ",
    "start": "3286470",
    "end": "3293960"
  },
  {
    "text": "So that's why we care about zero\none permanence or one reason to care about it. Let's prove that it's hard.",
    "start": "3293960",
    "end": "3300312"
  },
  {
    "start": "3300312",
    "end": "3316050"
  },
  {
    "text": "And here we'll use a number\ntheory, pretty basic number theory. ",
    "start": "3316050",
    "end": "3328600"
  },
  {
    "text": "So first claim is\nthat computing the permanent of a matrix, general\nmatrix nonzero one modulo",
    "start": "3328600",
    "end": "3335600"
  },
  {
    "text": "given integer r is hard. ",
    "start": "3335600",
    "end": "3342260"
  },
  {
    "text": "r has to be an input\nfor this problem. It's not like computing at\nMod three necessarily as hard, but computing at modular\nanything is hard.",
    "start": "3342260",
    "end": "3350977"
  },
  {
    "text": "And here we're going to finally\nuse some multi-color reduction power. So the idea is, suppose you\ncould solve this problem then",
    "start": "3350977",
    "end": "3358339"
  },
  {
    "text": "I claim I can solve permanent. Anyone know how? AUDIENCE: Chinese\nremainder theorem? PROFESSOR: Chinese\nremainder theorem",
    "start": "3358340",
    "end": "3375927"
  },
  {
    "text": "OK if you don't know the\nChinese remainder theorem but you should know it. It's good.",
    "start": "3375927",
    "end": "3381490"
  },
  {
    "text": "So the idea is\nwe're going to set r to be all primes up to how big?",
    "start": "3381490",
    "end": "3393970"
  },
  {
    "text": "Or we can stop when the\nproduct of all the primes that we've considered is bigger\nthan the potential permanent.",
    "start": "3393970",
    "end": "3404060"
  },
  {
    "text": "And the permanent is at\nmost m to the n times",
    "start": "3404060",
    "end": "3409190"
  },
  {
    "text": "n factorial, where\nm is the largest absolute value in the matrix. ",
    "start": "3409190",
    "end": "3420349"
  },
  {
    "text": "That's one upper bound,\ndoesn't really matter. But the point is,\nit is computable and if you take the\nlogarithm it's not so big.",
    "start": "3420350",
    "end": "3427560"
  },
  {
    "text": "All these numbers\nare at least two. All primes are at least two. So the number of primes\nwe'll have to consider",
    "start": "3427560",
    "end": "3435900"
  },
  {
    "text": "is at most log base 2 of that. So this means the\nnumber of primes,",
    "start": "3435900",
    "end": "3445150"
  },
  {
    "text": "so that's log of m to\nthe n times n factorial, and this is roughly--\nI'll put a total here.",
    "start": "3445150",
    "end": "3452700"
  },
  {
    "text": "This is like m\nlog n that's exact plus n log n that's approximate\nbut it's minus order n",
    "start": "3452700",
    "end": "3462200"
  },
  {
    "text": "so it won't hurt us. So that's good,\nthat's a polynomial. Log m is a reasonable thing,\nm was given us as a number",
    "start": "3462200",
    "end": "3470039"
  },
  {
    "text": "so log n is part of this input. So as our input and n is\nobviously good as the dimension",
    "start": "3470040",
    "end": "3477859"
  },
  {
    "text": "of the matrix. So this is a polynomial\nnumber of calls. We're going to compute\nthe permanent mod",
    "start": "3477860",
    "end": "3482940"
  },
  {
    "text": "r for all these things and\nour Chinese remainder theorem tells you if you\nknow a number which",
    "start": "3482940",
    "end": "3488850"
  },
  {
    "text": "is the permanent module\nall primes whose products-- Well if you know a number of\nmodulo a bunch of primes then",
    "start": "3488850",
    "end": "3496770"
  },
  {
    "text": "you can figure out the number of\nmodulo, the product of primes. And if we set the product to\nbe bigger than the number could",
    "start": "3496770",
    "end": "3504290"
  },
  {
    "text": "be, then we know [? any ?]\nmodulo that is actually knowing the number itself.",
    "start": "3504290",
    "end": "3509500"
  },
  {
    "text": "So then we can\nreconstruct the permanent. ",
    "start": "3509500",
    "end": "3515540"
  },
  {
    "text": "So here we're really\nusing multicall. ",
    "start": "3515540",
    "end": "3525984"
  },
  {
    "text": "I think that's the\nfirst time I've used Chinese remainder theorem\nin a class that I've taught. ",
    "start": "3525984",
    "end": "3533100"
  },
  {
    "text": "Good stuff.  AUDIENCE: Do you know why it's\ncalled the Chinese remainder",
    "start": "3533101",
    "end": "3540295"
  },
  {
    "text": "theorem? PROFESSOR: I assume\nit was proved by a Chinese mathematician\nbut I-- anyone know?",
    "start": "3540295",
    "end": "3546040"
  },
  {
    "text": "AUDIENCE: Sun Tzu. PROFESSOR: Sun Tzu. OK I've heard of him.",
    "start": "3546040",
    "end": "3552645"
  },
  {
    "text": "AUDIENCE: Not the guy\nwho did Art of War. PROFESSOR: Oh, OK. I don't know him then.",
    "start": "3552645",
    "end": "3557799"
  },
  {
    "text": "Another Sun Tzu. Cool, yeah so permanent\nmod r is hard.",
    "start": "3557800",
    "end": "3563970"
  },
  {
    "text": "Next claim is that the zero\none permanent mod r is hard.",
    "start": "3563970",
    "end": "3572400"
  },
  {
    "text": " The whole reason\nwe're going to mod r-- I mean it's interesting\nto know that computing",
    "start": "3572400",
    "end": "3578473"
  },
  {
    "text": "permanent mod r is just\nas hard as permanent but it's kind of standard thing.",
    "start": "3578473",
    "end": "3583710"
  },
  {
    "text": "The reason I wanted\nto go to mod r was to get rid of\nthese negative numbers. Negative numbers are annoying.",
    "start": "3583710",
    "end": "3589730"
  },
  {
    "text": "Once I go to mod any r\nnegative numbers flip around",
    "start": "3589730",
    "end": "3594960"
  },
  {
    "text": "and I can figure everything\nis positive or non-negative. Now I can go back\nto gadget land.",
    "start": "3594960",
    "end": "3601680"
  },
  {
    "text": "So suppose I have an\nedge of weight five, this will work for any\nnumber greater than one. If It's one I don't touch it.",
    "start": "3601680",
    "end": "3608380"
  },
  {
    "text": "If it's greater than one I'm\ngoing to make this thing. ",
    "start": "3608380",
    "end": "3614900"
  },
  {
    "text": "And the claim is there\nare exactly five ways to use this edge.",
    "start": "3614900",
    "end": "3620390"
  },
  {
    "text": "Either you don't use it\nand you don't use it. But if you do use it,\nexactly five ways to use it.",
    "start": "3620390",
    "end": "3626290"
  },
  {
    "text": "If you make this traversal,\nthere are five ways to do it. Remember this has\nto be a cycle cover so we have to visit everything.",
    "start": "3626290",
    "end": "3632860"
  },
  {
    "text": "If you come up here, can't go\nthat way gotta go straight. Can't go that way,\ngot to go straight.",
    "start": "3632860",
    "end": "3638295"
  },
  {
    "text": "Hmm, OK. So in fact, the rest\nof this cycle cover must be entirely\nwithin this picture.",
    "start": "3638295",
    "end": "3644910"
  },
  {
    "text": "And so for example, you\ncould say that's a cycle and then that's a\ncycle, these are loops. And then that's a\ncycle and then that's",
    "start": "3644910",
    "end": "3651950"
  },
  {
    "text": "a cycle and then that's a\ncycle and then that's a cycle. And whoops I'm left\nwith one vertex.",
    "start": "3651950",
    "end": "3657619"
  },
  {
    "text": "So in fact I have to choose\nexactly one of the loops, put that in and the\nrest can be covered.",
    "start": "3657620",
    "end": "3663160"
  },
  {
    "text": "For example, if I choose this\nguy then this will be a cycle, this'll be a cycle,\nthis will be a cycle. Perfect parity this will be\na cycle, is will be a cycle,",
    "start": "3663160",
    "end": "3670490"
  },
  {
    "text": "and this will be a cycle. Can't choose two loops. If I chose like\nthese two groups then this guy would be isolated.",
    "start": "3670490",
    "end": "3675960"
  },
  {
    "text": "So you have to choose\nexactly one loop and there are\nexactly five of them. In general you make-- there'd be\nk of them if you want weight k,",
    "start": "3675960",
    "end": "3683890"
  },
  {
    "text": "and you can simulate. If you don't use this edge then\nthere's actually only one way",
    "start": "3683890",
    "end": "3689030"
  },
  {
    "text": "to do it. You have to go all the\nway around like this. So that's cool. If you don't use the edge,\ndidn't mess with anything.",
    "start": "3689030",
    "end": "3695970"
  },
  {
    "text": "If you use the edge you\nget a weight of five. Multiplicative, because\nthis is independent of all the other such choices.",
    "start": "3695970",
    "end": "3702170"
  },
  {
    "text": "So you can simulate a\nhigh-weight edge, module r.",
    "start": "3702170",
    "end": "3707490"
  },
  {
    "text": "In general you can simulate\na non-negative weight edge like this. Just these are all weight one\nobviously and absent edges",
    "start": "3707490",
    "end": "3714030"
  },
  {
    "text": "are zero. So we can convert\nin the module r setting there are no\nnegative numbers essentially.",
    "start": "3714030",
    "end": "3721839"
  },
  {
    "text": "So we can just do that\nsimulation, everything will work mod r. So use gadget.",
    "start": "3721840",
    "end": "3727110"
  },
  {
    "start": "3727110",
    "end": "3736530"
  },
  {
    "text": "Now finally we can prove\nzero one permanent is hard. ",
    "start": "3736530",
    "end": "3744500"
  },
  {
    "text": "Why? Because if we could compute\nthe zero one permanent we can compute at mod r. Just compute the permanent,\ntake the answer mod r and you",
    "start": "3744500",
    "end": "3752290"
  },
  {
    "text": "solve zero one permanent mod r. So this is what I might\ncall a one-call reduction.",
    "start": "3752290",
    "end": "3757410"
  },
  {
    "text": "It's not our usual notion\nof one-call reduction because we're doing\nstuff at the end.",
    "start": "3757410",
    "end": "3762990"
  },
  {
    "text": "But I'm going to use\none-call in this setting. ",
    "start": "3762990",
    "end": "3770700"
  },
  {
    "text": "Just call it-- in fact we don't\neven have to change the input. Then we get the output\nwhen we computed mod r. Question.",
    "start": "3770700",
    "end": "3776100"
  },
  {
    "text": "AUDIENCE: So in\nthat the weight you can have really high weight.",
    "start": "3776100",
    "end": "3781348"
  },
  {
    "text": "But then your\n[INAUDIBLE] nodes so then when you use that wouldn't n?",
    "start": "3781348",
    "end": "3788387"
  },
  {
    "text": "PROFESSOR: Oh I see. If the weights were\nexponentially large this would be bad news. But they're not\nexponentially large",
    "start": "3788387",
    "end": "3793940"
  },
  {
    "text": "because we know they're\nall at most three. They're between\nnegative one and three.",
    "start": "3793940",
    "end": "3800570"
  },
  {
    "text": "Oh but negative\none-- Yes, OK good",
    "start": "3800570",
    "end": "3806760"
  },
  {
    "text": "I need the prime number theorem. Thank you. So we have numbers\nnegative one then",
    "start": "3806760",
    "end": "3812220"
  },
  {
    "text": "we're mapping them\nmodulo some prime. Now negative one is actually\nthe prime minus one.",
    "start": "3812220",
    "end": "3818089"
  },
  {
    "text": "So indeed, we do get weights\nthat are as large as r.",
    "start": "3818090",
    "end": "3823440"
  },
  {
    "text": "So this is-- r here we're\nassuming is encoded in unary. ",
    "start": "3823440",
    "end": "3831610"
  },
  {
    "text": "It turns out we can afford\nto encode the primes in unary because the number\nof primes that we use",
    "start": "3831610",
    "end": "3839130"
  },
  {
    "text": "is this polynomial thing,\na weakly polynomial thing.",
    "start": "3839130",
    "end": "3844369"
  },
  {
    "text": "And by the prime number theorem,\nthe prime with that index",
    "start": "3844370",
    "end": "3849670"
  },
  {
    "text": "is roughly that big. It's the log factor larger. So the primes are going\nto-- the actual value",
    "start": "3849670",
    "end": "3856550"
  },
  {
    "text": "of the prime is going to\nbe something like n log",
    "start": "3856550",
    "end": "3861860"
  },
  {
    "text": "m, times log base e, and log m.",
    "start": "3861860",
    "end": "3872270"
  },
  {
    "text": "By the prime number theorem and\nthat's again weakly polynomial. And so we can assume\nours encoded in unary.",
    "start": "3872270",
    "end": "3877520"
  },
  {
    "text": " Wow, we get to use the prime\nnumber theorem that's fun.",
    "start": "3877520",
    "end": "3885643"
  },
  {
    "text": "AUDIENCE: Is that the first time\nyou had to use prime numbers? PROFESSOR: Probably. Pretty sure I've used prime\nnumber theorem if and only",
    "start": "3885643",
    "end": "3892760"
  },
  {
    "text": "if I've used Chinese\nremainder theorem. They go hand in hand. ",
    "start": "3892760",
    "end": "3899430"
  },
  {
    "text": "Clear? So this was kind\nof roundabout way, but we ended up getting rid\nof the negative numbers.",
    "start": "3899430",
    "end": "3904730"
  },
  {
    "text": "Luckily it still worked. And now it's zero\none permanence hard, therefore counting the number\nof perfect matchings in a given",
    "start": "3904730",
    "end": "3910890"
  },
  {
    "text": "bipartite graph isn't\ngoing to be hard. These problems were equivalent,\nlike they're identical. So you could-- this was\na reduction in one way",
    "start": "3910890",
    "end": "3917380"
  },
  {
    "text": "but that's equally\nreducible both ways. So you can reduce this\none, reduce this one",
    "start": "3917380",
    "end": "3923430"
  },
  {
    "text": "to perfect matchings\nor vice versa. All right. ",
    "start": "3923430",
    "end": "3931047"
  },
  {
    "text": "Here's some more fun\nthings we can do. ",
    "start": "3931047",
    "end": "3950000"
  },
  {
    "text": "Guess I can add to my list here. But in particular we\nhave zero one permanent.",
    "start": "3950000",
    "end": "3955600"
  },
  {
    "text": " So there are other ways you\nmight be interested in counting",
    "start": "3955600",
    "end": "3964140"
  },
  {
    "text": "matchings. ",
    "start": "3964141",
    "end": "3972010"
  },
  {
    "text": "So, so far we know it's hard\nto count perfect matchings. So in a balanced bipartite graph\nwe had n vertices on the left,",
    "start": "3972010",
    "end": "3980774"
  },
  {
    "text": "and n vertices on the right. We're going to use that. Then the hope is that\nthere's matching a size n.",
    "start": "3980774",
    "end": "3986790"
  },
  {
    "text": "But in general, you could\njust count maybe those don't exist at all. Maybe we just want to\ncount maximal matchings.",
    "start": "3986790",
    "end": "3992059"
  },
  {
    "text": "These are not maximum matchings. Maximal, meaning you can't\nadd any more edges to them.",
    "start": "3992060",
    "end": "3997340"
  },
  {
    "text": "They're locally maximum. So that's going to\nbe a bigger number,",
    "start": "3997340",
    "end": "4003140"
  },
  {
    "text": "it's going to be always\nbigger than zero. Because the empty\nmatching, well you could start with\nthe empty matching",
    "start": "4003140",
    "end": "4009308"
  },
  {
    "text": "and add things you'll get at\nleast one maximal matching. But this is also\nsharp P complete, and you can prove\nit using some tricks",
    "start": "4009308",
    "end": "4016089"
  },
  {
    "text": "from bipartite perfect\nmatching, counting.",
    "start": "4016090",
    "end": "4021380"
  },
  {
    "text": " Don't have a ton\nof time so I'll go through this relatively quick.",
    "start": "4021380",
    "end": "4028840"
  },
  {
    "text": "We're going to take each vertex\nand convert it, basically make n copies of it.",
    "start": "4028840",
    "end": "4034920"
  },
  {
    "text": "And when we have an edge\nthat's going to turn into a biclique between them.",
    "start": "4034920",
    "end": "4043940"
  },
  {
    "text": "Why did I address\nsuch a big one? ",
    "start": "4043940",
    "end": "4049970"
  },
  {
    "text": "This was supposed to be n and n. OK so just blow up every edge. My intent is to make matchings\nbecome more plentiful.",
    "start": "4049970",
    "end": "4057849"
  },
  {
    "text": " So in general, if I used to\nhave a matching of size i,",
    "start": "4057850",
    "end": "4067552"
  },
  {
    "text": "I end up converting it into n\nfactorial to the i-th power,",
    "start": "4067552",
    "end": "4074310"
  },
  {
    "text": "distinct matchings\nof size n times i.",
    "start": "4074310",
    "end": "4084460"
  },
  {
    "text": "OK because if I\nuse an edge here, now I get to put in a\narbitrary perfect matching",
    "start": "4084460",
    "end": "4089790"
  },
  {
    "text": "in this biclique and\nthey're n factorial of them. Cool, why did I do that?",
    "start": "4089790",
    "end": "4097229"
  },
  {
    "text": "Because now I\nsuppose that I knew how to count the number\nof maximum actions.",
    "start": "4097229",
    "end": "4102627"
  },
  {
    "text": "So they're going to be\nmatchings of various sizes. From that I want to extract the\nnumber of perfect matchings.",
    "start": "4102627",
    "end": "4107739"
  },
  {
    "text": "Sounds impossible, but\nwhen you make things giant like this they kind of-- all\nthe matchings kind of separate.",
    "start": "4107740",
    "end": "4113785"
  },
  {
    "text": "It's like biology or something. Chemistry. So let's see, it\nshows how much I know.",
    "start": "4113785",
    "end": "4123259"
  },
  {
    "text": "Number of maximal\nmatchings is going",
    "start": "4123260",
    "end": "4129789"
  },
  {
    "text": "to be sum i equals\nzero to n over 2.",
    "start": "4129790",
    "end": "4135420"
  },
  {
    "text": "That's the possible\nsizes of the matchings. Of the old matchings\nI should say. Number of original\nmaximal matchings",
    "start": "4135420",
    "end": "4145670"
  },
  {
    "text": "in the input graph of size i,\ntimes n factorial to the i.",
    "start": "4145670",
    "end": "4155290"
  },
  {
    "text": "OK this is just rewriting. I'm just this thing, but\nI'm summing over all i. So I have however many matchings\nI used to have a size i,",
    "start": "4155290",
    "end": "4161939"
  },
  {
    "text": "but then I multiply them\nby n factorial to the i, because these are\nall independent. ",
    "start": "4161939",
    "end": "4169969"
  },
  {
    "text": "And this thing,\nthe original number of matchings in the worst case,\nI mean the largest it could be",
    "start": "4169970",
    "end": "4176770"
  },
  {
    "text": "is when everything\nis a biclique. And then we have n over two\nfactorial maximal matchings",
    "start": "4176770",
    "end": "4187275"
  },
  {
    "text": "originally.  And this is smaller than that.",
    "start": "4187275",
    "end": "4194650"
  },
  {
    "text": "And therefore we can pull\nthis apart as a number modulo n factorial.",
    "start": "4194650",
    "end": "4200650"
  },
  {
    "text": "And each digit is the number of\nmaximum actions of each size. And we look at\nthe last digit, we",
    "start": "4200650",
    "end": "4207630"
  },
  {
    "text": "get all the number of\nmaximum matchings of size n over two also known as the\nnumber of perfect matchings.",
    "start": "4207630",
    "end": "4216139"
  },
  {
    "text": "Question? AUDIENCE: So that\nsecond max is maximal? PROFESSOR: Yes this is maximal. ",
    "start": "4216140",
    "end": "4224679"
  },
  {
    "text": "Other questions? So again I kind of numbered\n[? through ?] trick by blowing up-- well\nby making each of these",
    "start": "4224680",
    "end": "4233270"
  },
  {
    "text": "get multiplied by a\ndifferent huge number we can pull them apart,\nseparate them-- In logarithm",
    "start": "4233270",
    "end": "4239070"
  },
  {
    "text": "these numbers are not huge\nso it is actually plausible you could compute this thing. ",
    "start": "4239070",
    "end": "4246699"
  },
  {
    "text": "And a tree graph you\ndefinitely could do it by various multiplications\nat each level.",
    "start": "4246699",
    "end": "4251950"
  },
  {
    "text": "All right. So that's nice, let's do\nanother one of that flavor.",
    "start": "4251950",
    "end": "4258474"
  },
  {
    "text": " AUDIENCE: So I was\nactually wondering can you find all those\nprimes in polynomial time?",
    "start": "4258475",
    "end": "4264745"
  },
  {
    "text": "PROFESSOR: You could use\nthe Sieve of Eratosthenes. AUDIENCE: Is that\nlike going to be--",
    "start": "4264745",
    "end": "4269836"
  },
  {
    "text": "PROFESSOR: We can handle pseudo\npoly here because as we argued, the primes are not that big. So we could just\nspend-- we could just",
    "start": "4269836",
    "end": "4276650"
  },
  {
    "text": "do Sieve of Eratosthenes,\nwe can afford to spend a linear time\non the largest prime. Or quadratic in that even.",
    "start": "4276650",
    "end": "4282725"
  },
  {
    "text": "You could do the\nnaive algorithm. ",
    "start": "4282725",
    "end": "4289510"
  },
  {
    "text": "We're not doing real Hogan's\n[? mid-number ?] theory here. I could tell where you\nhave to be more careful.",
    "start": "4289510",
    "end": "4297250"
  },
  {
    "text": "All right. . So here's another question.",
    "start": "4297250",
    "end": "4303491"
  },
  {
    "text": "What if I just want to count\nthe number of matchings? No condition? ",
    "start": "4303492",
    "end": "4310929"
  },
  {
    "text": "This is going to use\nalmost the reverse trick. So no maximal constraint\njust all matchings,",
    "start": "4310930",
    "end": "4317800"
  },
  {
    "text": "including the empty matchings. Count them all. We'll see why in a moment,\nthis is quite natural.",
    "start": "4317800",
    "end": "4324970"
  },
  {
    "text": "So I claim I can do a multicall\nreduction to bipartite number of maximal matchings.",
    "start": "4324970",
    "end": "4331780"
  },
  {
    "text": "And here are my calls\nfor every graph g, I'm going to make\na graph g prime.",
    "start": "4331780",
    "end": "4338190"
  },
  {
    "text": "Where if I have a\nvertex I'm going to add k extra nodes connected\njust to that vertex.",
    "start": "4338190",
    "end": "4345130"
  },
  {
    "text": "So these are leaves\nand so if this vertex was unmatched over here,\nthen I have k different ways",
    "start": "4345130",
    "end": "4350230"
  },
  {
    "text": "to match it over here. And my intent is to measure this\nnumber of matchings of size n",
    "start": "4350230",
    "end": "4356840"
  },
  {
    "text": "over two minus k. That would be the hope. ",
    "start": "4356840",
    "end": "4364500"
  },
  {
    "text": "So if I have m r matchings\nof size r over here,",
    "start": "4364500",
    "end": "4373110"
  },
  {
    "text": "these will get mapped\nto Mr times k plus one",
    "start": "4373110",
    "end": "4378820"
  },
  {
    "text": "to the r, matchings of\nsize no, not of size.",
    "start": "4378820",
    "end": "4389110"
  },
  {
    "text": "Matchings over here. ",
    "start": "4389110",
    "end": "4396654"
  },
  {
    "text": "Because for each one I can\neither leave it unmatched or I could add this edge,\nor I could add this edge, or I could add this\nedge and that's",
    "start": "4396654",
    "end": "4402078"
  },
  {
    "text": "true for every unmatched vertex. Sorry, this is not size r, this\nis size n over two minus r.",
    "start": "4402078",
    "end": "4408062"
  },
  {
    "text": "R is going to be the\nnumber of leftover guys. Then they kind of\npops out over here.",
    "start": "4408062",
    "end": "4413610"
  },
  {
    "text": "So I'm going to run\nthis algorithm-- I'm going to compute the number of\nmatchings in Gk for all k up",
    "start": "4413610",
    "end": "4423039"
  },
  {
    "text": "to like n over two plus one.",
    "start": "4423040",
    "end": "4429250"
  },
  {
    "text": "So I'm going to do\nthis and what I end up",
    "start": "4429250",
    "end": "4440930"
  },
  {
    "text": "computing is number of matchings\nin each Gk, which is going",
    "start": "4440930",
    "end": "4447390"
  },
  {
    "text": "to be the sum over all r. r is zero to n over two\nof Mr the original number",
    "start": "4447390",
    "end": "4455885"
  },
  {
    "text": "of matchings the size\nn over two minus r, times k plus one to the r.",
    "start": "4455885",
    "end": "4462510"
  },
  {
    "text": "Now this is a polynomial\nin k plus one.",
    "start": "4462510",
    "end": "4468170"
  },
  {
    "text": "And if I evaluate a polynomial\nat its degree plus one different points I can\nreconstruct the coefficients",
    "start": "4468170",
    "end": "4475500"
  },
  {
    "text": "of the polynomial. And therefore get all of\nthese and in particular get m zero, which is the\nnumber of perfect matchings.",
    "start": "4475500",
    "end": "4484980"
  },
  {
    "text": "Ta da. ",
    "start": "4484980",
    "end": "4498130"
  },
  {
    "text": "Having too much fun. ",
    "start": "4498130",
    "end": "4506450"
  },
  {
    "text": "Enough matchings.  We have all these versions\nof SAT, which are hard.",
    "start": "4506450",
    "end": "4513720"
  },
  {
    "text": "But in fact there are\neven funnier versions like positive 2SAT.",
    "start": "4513720",
    "end": "4519360"
  },
  {
    "text": " Positive 2SAT is\nreally easy to decide,",
    "start": "4519360",
    "end": "4525600"
  },
  {
    "text": "but it turns out if I add a\nsharp it is sharp P complete. This is sort of like\nmax 2SAT, but here we",
    "start": "4525600",
    "end": "4531402"
  },
  {
    "text": "have to satisfy\nall the constraints but you want to count how\nmany different ways there are to solve it.",
    "start": "4531402",
    "end": "4537090"
  },
  {
    "text": "This is the same thing\nas vertex cover remember. Vertex cover's the\nsame as positive 2SAT. So also sharp\nvertex cover's hard",
    "start": "4537090",
    "end": "4543730"
  },
  {
    "text": "and therefore also\nsharp clique is hard. So this is actually a\nparsimonious reduction",
    "start": "4543730",
    "end": "4549300"
  },
  {
    "text": "from bipartite matching. That's why I wanted\nto get there. So for every edge we're going\nto make a variable, x of e,",
    "start": "4549300",
    "end": "4560710"
  },
  {
    "text": "which is true if the edge is\nnot in the perfect matching. And so then whenever I have\ntwo incident edges in f,",
    "start": "4560710",
    "end": "4571230"
  },
  {
    "text": "we're going to have a clause\nwhich is either I don't use e, or I don't use f.",
    "start": "4571230",
    "end": "4576610"
  },
  {
    "text": "That's 2SAT, done. ",
    "start": "4576610",
    "end": "4583570"
  },
  {
    "text": "Satisfying? It's parsimonious. So satisfying assignments\nwill be one to one with bipartite matchings.",
    "start": "4583570",
    "end": "4589730"
  },
  {
    "text": "So this is why you should care. And if we instead reduce\nfrom-- did I erase it?",
    "start": "4589730",
    "end": "4595600"
  },
  {
    "text": "Bipartite maximal\nmatchings up here, then I get the\ncounting the number",
    "start": "4595600",
    "end": "4603220"
  },
  {
    "text": "of maximally true assignments\nthat satisfy the 2SAT clause",
    "start": "4603220",
    "end": "4611530"
  },
  {
    "text": "is also hard. For what it's worth, a\ndifferent way of counting that.",
    "start": "4611530",
    "end": "4618120"
  },
  {
    "text": "(BREAK IN VIDEO) Maxwell means you can't set\nany more variables true. Yeah. AUDIENCE: Since the edges on\nyour positive 2SAT reduction",
    "start": "4618120",
    "end": "4625978"
  },
  {
    "text": "are the variables there are\ntrue when the edge is not",
    "start": "4625978",
    "end": "4633154"
  },
  {
    "text": "in a matching. I think it's maximally false. And not maximally true. Also maximally true, you just\nsaid everything was true.",
    "start": "4633154",
    "end": "4639739"
  },
  {
    "text": "PROFESSOR: Yes. Right, right, right, sorry. I see, you're right. So it's minimal solutions\nfor a 2SAT, thank you.",
    "start": "4639740",
    "end": "4645450"
  },
  {
    "text": " OK in fact, it's known that\nthree regular bipartite planar",
    "start": "4645450",
    "end": "4660650"
  },
  {
    "text": "sharp vertex cover. ",
    "start": "4660650",
    "end": "4666262"
  },
  {
    "text": "I won't prove this one. But in particular you\ncan make this planar, although it doesn't look\nlike we have positive here.",
    "start": "4666262",
    "end": "4672420"
  },
  {
    "text": "And you can also make it\nbipartite, which doesn't mean a lot in 2SAT land. But it means-- makes a lot of\nsense in vertex cover land.",
    "start": "4672420",
    "end": "4679830"
  },
  {
    "text": "In my zero remaining\nminutes I want to mention one more concept. ",
    "start": "4679830",
    "end": "4685736"
  },
  {
    "text": "To go back to the\noriginal question of uniqueness for puzzles.",
    "start": "4685736",
    "end": "4693400"
  },
  {
    "text": "And you'll see this in the\nliterature if you look at it. Lot of people won't\neven mention sharp P,",
    "start": "4693400",
    "end": "4698730"
  },
  {
    "text": "but they'll mention ASP. ASP is slightly weaker but\nfor most intents and purposes",
    "start": "4698730",
    "end": "4705880"
  },
  {
    "text": "essentially identical\nnotion to sharp P, from a hardness perspective. The goal for-- in general,\nif I have a problem",
    "start": "4705880",
    "end": "4713270"
  },
  {
    "text": "a search problem\nlike we started with. The ASP version of\nthat search problem is,",
    "start": "4713270",
    "end": "4718650"
  },
  {
    "text": "I give you a solution and I want\nto know is there another one? This is a little\ndifferent from everything",
    "start": "4718650",
    "end": "4724930"
  },
  {
    "text": "we've seen because I actually\ngive you a starting point. There's some problems\nwhere this helps a lot.",
    "start": "4724930",
    "end": "4729960"
  },
  {
    "text": "For example, if the solution\nis never unique like coloring, I give you a k\ncoloring, I can give you",
    "start": "4729960",
    "end": "4735889"
  },
  {
    "text": "another one I'll just\nswap colors one and two. Or more subtle if I give you\na Hamiltonian cycle in a three",
    "start": "4735890",
    "end": "4741890"
  },
  {
    "text": "regular graph. There's always a way to switch\nit and make another one. So ASP is sometimes easy.",
    "start": "4741890",
    "end": "4749940"
  },
  {
    "text": "But you would basically\nuse the same reductions. If you can find a\nparsimonious reduction that",
    "start": "4749940",
    "end": "4756699"
  },
  {
    "text": "also has the property--\nso parsimonious reduction there is a one to one\nbijection between solutions",
    "start": "4756700",
    "end": "4762490"
  },
  {
    "text": "to x and solutions to x prime. If you could also compute\nthat bijection, if you can convert a solution\nfrom one to the other.",
    "start": "4762490",
    "end": "4769090"
  },
  {
    "text": "Which we could do in every\nsingle proof we've seen and even the ones\nwe haven't seen. You can always compute that\nbijection between solutions",
    "start": "4769090",
    "end": "4775000"
  },
  {
    "text": "of A to solutions of B.\nAnd so what that means is, if I can solve B, consider\nthe ASP version of A",
    "start": "4775000",
    "end": "4786550"
  },
  {
    "text": "where I give you a solution. If I can convert that solution\ninto a solution for my B problem, and then with\nthe parsimonious reduction",
    "start": "4786550",
    "end": "4792800"
  },
  {
    "text": "I also get a B instance, then\nI can solve the ASP problem",
    "start": "4792800",
    "end": "4798829"
  },
  {
    "text": "for B. That's a\ndecision problem. Is there another solution? If yes, then A will also\nhave another solution,",
    "start": "4798830",
    "end": "4804480"
  },
  {
    "text": "because it's parsimonious\nthe numbers will be the same. We need a weaker version of\nparsimony we just need the one",
    "start": "4804480",
    "end": "4811050"
  },
  {
    "text": "and more than one\nare kept the same. If this one was unique then\nthis one should be unique. If this one wasn't unique then\nthis one should be not unique.",
    "start": "4811050",
    "end": "4818039"
  },
  {
    "text": "If I can solve B\nthen I can solve A. Or if I can solve ASP B\nthen I can solve ASP A.",
    "start": "4818040",
    "end": "4824070"
  },
  {
    "text": "A lot of these proofs are\ndone-- so-called ASP reduction is usually done by a\nparsimonious reduction.",
    "start": "4824070",
    "end": "4830660"
  },
  {
    "text": "And so in particular\nthis was introduced, this concept was introduced in\nthe likes of like Slitherlink,",
    "start": "4830660",
    "end": "4836410"
  },
  {
    "text": "I think, was one of the early\nASP completeness proofs. And they were interested\nin this because the idea",
    "start": "4836410",
    "end": "4842310"
  },
  {
    "text": "is if you're designing\na puzzle usually you design a puzzle\nwith a solution in mind. But then you need to make sure\nthere's no other solution.",
    "start": "4842310",
    "end": "4848780"
  },
  {
    "text": "So you have exactly\nthis set up and if you want a formal definition of ASP\ncompleteness it's in the notes.",
    "start": "4848780",
    "end": "4855020"
  },
  {
    "text": "But it's not that difficult.",
    "start": "4855020",
    "end": "4860430"
  },
  {
    "text": "The key point here is if you're\ngoing to prove sharp P or ASP completeness you might as well\nprove the other one as well.",
    "start": "4860430",
    "end": "4866060"
  },
  {
    "text": "Get twice the results for\nbasically the same reduction. All the versions of\n3SAT and 1-in-3SAT,",
    "start": "4866060",
    "end": "4871460"
  },
  {
    "text": "and all those things, those\nwere all parsimonious. And all of those are\nASP complete as well.",
    "start": "4871460",
    "end": "4877730"
  },
  {
    "text": "But once you get\ninto C-monious you're no longer preserving one\nversus more than one.",
    "start": "4877730",
    "end": "4883470"
  },
  {
    "text": "So while you preserved--\nfrom a counting perspective in multicall reductions\nwhere you can divide that off that's fine.",
    "start": "4883470",
    "end": "4889320"
  },
  {
    "text": "But from an ASP completeness\nperspective you're not fine. So in fact all the\nstuff that we just",
    "start": "4889320",
    "end": "4896010"
  },
  {
    "text": "did with the permanent\nmatchings and sharp 2SAT, their sharp P complete.",
    "start": "4896010",
    "end": "4901880"
  },
  {
    "text": "They may not be ASP complete.  But you'll notice\nthe puzzles that we",
    "start": "4901880",
    "end": "4908080"
  },
  {
    "text": "reduce from like, whatever,\nShakashaka is one of them.",
    "start": "4908080",
    "end": "4914940"
  },
  {
    "text": "That was from a version of\n3SAT, and the other one we had was from a version\nof Hamiltonicity.",
    "start": "4914940",
    "end": "4920710"
  },
  {
    "text": " This guy. These are all-- which\nwas also from 3SAT.",
    "start": "4920710",
    "end": "4927090"
  },
  {
    "text": "So these are all\nASP complete also. But if you use the\nweirder things like 2SAT",
    "start": "4927090",
    "end": "4932850"
  },
  {
    "text": "you don't get that. So usually in one proof you can\nget NP hardness, ASP hardness, and sharp P hardness.",
    "start": "4932850",
    "end": "4939127"
  },
  {
    "text": "But if you're going to\ngo from these weirder problems with C-monious\nreductions then you only get sharp P\nhardness, because they're not",
    "start": "4939127",
    "end": "4944860"
  },
  {
    "text": "even NP-hard. Cool, all right. Thank you.",
    "start": "4944860",
    "end": "4950000"
  },
  {
    "start": "4950000",
    "end": "4954999"
  }
]