[
  {
    "start": "0",
    "end": "200000"
  },
  {
    "text": "[CLICKING] [RUSTLING] [SQUEAKING] [CLICKING]",
    "start": "0",
    "end": "6370"
  },
  {
    "start": "6370",
    "end": "25029"
  },
  {
    "text": "MICHAEL SIPSER: OK. Hi, everybody. Let's get started. ",
    "start": "25030",
    "end": "31910"
  },
  {
    "text": "So, it's been a while since\nwe came together in a lecture.",
    "start": "31910",
    "end": "38050"
  },
  {
    "text": "Last week, we had the holiday. We had the midterm. So with that, what\nhave we been doing?",
    "start": "38050",
    "end": "47320"
  },
  {
    "text": "We finished the first half of\nthe course about two weeks ago,",
    "start": "47320",
    "end": "52540"
  },
  {
    "text": "where we talked\nabout-- we were talking about computability theory. We have shifted into\nthe second half,",
    "start": "52540",
    "end": "58510"
  },
  {
    "text": "talking about complexity theory. So get your mind back to that.",
    "start": "58510",
    "end": "64870"
  },
  {
    "text": "We discussed the various\ndifferent models and ways",
    "start": "64870",
    "end": "72670"
  },
  {
    "text": "of measuring complexity\non different models-- at least in terms of the\namount of time that's used.",
    "start": "72670",
    "end": "79000"
  },
  {
    "text": "And in the end, we settled on\nthe one-tape Turing machine, which is the same model\nwe had been working with in the first\nhalf of the course,",
    "start": "79000",
    "end": "85810"
  },
  {
    "text": "and argued that though\nthe measures of complexity",
    "start": "85810",
    "end": "91450"
  },
  {
    "text": "are going to differ somewhat\nfrom model to model, they're not going to differ by\nmore than a polynomial amount.",
    "start": "91450",
    "end": "98049"
  },
  {
    "text": "And so, since the\nkinds of questions we're going to be\nasking are going to be, basically, whether\nproblems are polynomial or not,",
    "start": "98050",
    "end": "107200"
  },
  {
    "text": "it's not going to really\nmatter which model we pick among reasonable\ndeterministic models.",
    "start": "107200",
    "end": "112689"
  },
  {
    "text": "And so, the one-tape Turing\nmachine is a reasonable choice.",
    "start": "112690",
    "end": "117910"
  },
  {
    "text": "Given that, we defined\ntime complexity classes, the TIME[T(n)] classes. We defined the class P,\nwhich was invariant among all",
    "start": "117910",
    "end": "127680"
  },
  {
    "text": "of those different deterministic\nmodels in the sense that it didn't matter\nwhich model we choose, we were going to end\nup with the same class",
    "start": "127680",
    "end": "134400"
  },
  {
    "text": "P. So that argues\nfor its naturalness. And we gave an example of\nthis path problem being in P.",
    "start": "134400",
    "end": "141150"
  },
  {
    "text": "And we kind of ended that\nlecture before the midterm with the discussion of this\nHamiltonian path problem.",
    "start": "141150",
    "end": "146920"
  },
  {
    "text": "So we're going to come\nback to that today. So today, we're going to\nlook at non-non-deterministic complexity; define the\nclasses' non-deterministic time",
    "start": "146920",
    "end": "156840"
  },
  {
    "text": "or NTIME; talk about the class\nNP, the P versus NP problem--",
    "start": "156840",
    "end": "162160"
  },
  {
    "text": "which one of the very famous\nunsolved problems in our field; and look at dynamic programming,\none of the most basic algorithm",
    "start": "162160",
    "end": "170444"
  },
  {
    "text": "- polynomial-time algorithms and\npolynomial-time reproducibility - moving toward our\ndiscussion of NP completeness,",
    "start": "170445",
    "end": "177310"
  },
  {
    "text": "which we will\nbegin next lecture. So with that, let's move\ninto today's content, which",
    "start": "177310",
    "end": "186380"
  },
  {
    "text": "is, well, just a quick review. As I mentioned, we defined\nthe time complexity class.",
    "start": "186380",
    "end": "194420"
  },
  {
    "text": "The time complexity\nclass is a collection of all of the\nlanguages that you can",
    "start": "194420",
    "end": "206959"
  },
  {
    "start": "200000",
    "end": "255000"
  },
  {
    "text": "solve in a certain time\nbound, within a certain amount of time. So the time n-squared,\nfor example,",
    "start": "206960",
    "end": "216290"
  },
  {
    "text": "is all of the languages\nor all of the problems that you can solve\nin n-squared time.",
    "start": "216290",
    "end": "222170"
  },
  {
    "text": "We're identifying problems\nwith languages here. And the class P\nis the collection",
    "start": "222170",
    "end": "227989"
  },
  {
    "text": "of all problems\nthat you can solve or all languages that you\ncan solve in polynomial time. So it's the union over\nall time n to the k--",
    "start": "227990",
    "end": "235370"
  },
  {
    "text": "so n-squared, n-cubed, n to\nthe fifth power, and so on.",
    "start": "235370",
    "end": "240379"
  },
  {
    "text": "Union out of all\nof those bounds. The associated languages,\nthat's the class P.",
    "start": "240380",
    "end": "248780"
  },
  {
    "text": "And we gave an example,\nthis path problem. We gave an algorithm for path.",
    "start": "248780",
    "end": "254690"
  },
  {
    "text": "And then, we introduced this\nHamiltonian path problem. So if you remember?",
    "start": "254690",
    "end": "262819"
  },
  {
    "start": "255000",
    "end": "450000"
  },
  {
    "text": "Instead of just asking\ngiven a graph, whether you can get from s to t, now we want\nto know can I get from s to t,",
    "start": "262820",
    "end": "270380"
  },
  {
    "text": "but visit every other\nnode along the way. So find a path that goes\nthrough everything else",
    "start": "270380",
    "end": "278720"
  },
  {
    "text": "and gets from s to t.  And I should say also\nit's a simple path,",
    "start": "278720",
    "end": "286450"
  },
  {
    "text": "so you're only allowed to go\nthrough every node just once. And now, the question\nfor this problem",
    "start": "286450",
    "end": "299319"
  },
  {
    "text": "is can we solve that\nproblem in polynomial time. Can we somehow modify\nthe algorithm for path",
    "start": "299320",
    "end": "306789"
  },
  {
    "text": "to give us an algorithm\nthat solves Hamiltonian path in polynomial time? Of course, we could\nsolve Hamiltonian path",
    "start": "306790",
    "end": "314440"
  },
  {
    "text": "with an exponential algorithm\nby trying all possible paths. And that will give\na correct algorithm,",
    "start": "314440",
    "end": "321280"
  },
  {
    "text": "but there are exponentially many\ndifferent paths and trying them all will not give a\npolynomial time algorithm.",
    "start": "321280",
    "end": "328189"
  },
  {
    "text": "So the interesting\nproblem is can we solve that without doing\nthat brute force searching through all possible paths.",
    "start": "328190",
    "end": "336070"
  },
  {
    "text": "And that's a problem that\nno one knows the answer to.",
    "start": "336070",
    "end": "341390"
  },
  {
    "text": "Despite lots of\neffort, people have not succeeded in finding\nan algorithm for that. But on the other hand,\nwe don't have any idea",
    "start": "341390",
    "end": "348560"
  },
  {
    "text": "how do you prove there\nis no such algorithm. I mean, it's conceivable that\none could prove such a thing,",
    "start": "348560",
    "end": "354200"
  },
  {
    "text": "but we just don't\nknow how to do it. And so, that problem is\nan unsolved problem and I",
    "start": "354200",
    "end": "363980"
  },
  {
    "text": "just-- this isn't\nreally a note to myself. What's kind of\namazing, and this is",
    "start": "363980",
    "end": "369410"
  },
  {
    "text": "what we're going to be showing\nover the next few lectures, that there would be very\nsurprising consequences if you",
    "start": "369410",
    "end": "375889"
  },
  {
    "text": "could find a way to\nsolve Hamiltonian path in polynomial time.",
    "start": "375890",
    "end": "380950"
  },
  {
    "text": "Because what that\nwould immediately yield is the polynomial time way of,\nsay, factoring large numbers",
    "start": "380950",
    "end": "388210"
  },
  {
    "text": "or solving a large\nnumber of other problems that we don't know how to\nsolve in polynomial time.",
    "start": "388210",
    "end": "395080"
  },
  {
    "text": "So as we mentioned,\nfactoring is a problem that we only know at\npresent how to solve",
    "start": "395080",
    "end": "401170"
  },
  {
    "text": "with an exponential algorithm. And it doesn't seem\nto have anything to do with the\nHamiltonian path problem.",
    "start": "401170",
    "end": "407920"
  },
  {
    "text": "Seem very different. But, yet, if you can\nsolve Hamiltonian path in polynomial time, then\nyou can factor numbers",
    "start": "407920",
    "end": "414580"
  },
  {
    "text": "in polynomial time. And so, we'll see how\nto make that connection.",
    "start": "414580",
    "end": "419800"
  },
  {
    "text": "That's what we're\nbuilding toward with the next few lectures.",
    "start": "419800",
    "end": "425510"
  },
  {
    "text": "OK. So happy to take any comments\nand questions on that,",
    "start": "425510",
    "end": "431450"
  },
  {
    "text": "or we'll just move on,\nif you have any questions on our little review.",
    "start": "431450",
    "end": "438330"
  },
  {
    "text": "Well, send questions\nalong and we can stop at the end of various\nslides to try to answer them.",
    "start": "438330",
    "end": "445230"
  },
  {
    "text": "And, of course,\nwrite to the TAs, who can take your questions\nwhile I'm lecturing.",
    "start": "445230",
    "end": "452550"
  },
  {
    "start": "450000",
    "end": "525000"
  },
  {
    "text": "OK. So to start this\noff, we're going to have to talk about\nnon-deterministic complexity",
    "start": "452550",
    "end": "459990"
  },
  {
    "text": "as a variation of\ndeterministic complexity. So first of all,\nall of the machines",
    "start": "459990",
    "end": "468690"
  },
  {
    "text": "in this part of the course\nand the languages, everything is going to be decidable\nand all the machines are going to be deciders.",
    "start": "468690",
    "end": "474669"
  },
  {
    "text": "So what do we mean when we have\na non-deterministic machine which is a decider? And that just simply means\nthat all of the branches--",
    "start": "474670",
    "end": "483190"
  },
  {
    "text": "it's not just the machine\nhalts on every input, but all of the branches\nhalt on every input.",
    "start": "483190",
    "end": "489490"
  },
  {
    "text": "So the non-deterministic\nmachine is non-deterministic, it has lots of\npossible branches. They all have to halt--",
    "start": "489490",
    "end": "495780"
  },
  {
    "text": "all of them-- on every input. That's what makes a\nnon-deterministic machine a decider. And you're going to convert\na non-deterministic decider",
    "start": "495780",
    "end": "504090"
  },
  {
    "text": "into a deterministic decider. But the question is, how much\ntime would that introduce?",
    "start": "504090",
    "end": "509639"
  },
  {
    "text": "How much extra time\nis that going to cost? And the only way\nthat people know at the present time\nfor that conversion",
    "start": "509640",
    "end": "516959"
  },
  {
    "text": "would be to do an\nexponential increase. Basically, to try all\npossible branches.",
    "start": "516960",
    "end": "523349"
  },
  {
    "text": "And that's, of\ncourse, very slow. So first, let's\nunderstand what we",
    "start": "523350",
    "end": "532040"
  },
  {
    "start": "525000",
    "end": "725000"
  },
  {
    "text": "mean by the time used by a\nnon-deterministic machine. And what we mean\nby the time used",
    "start": "532040",
    "end": "539360"
  },
  {
    "text": "is, we're looking at\neach individual branch individually, separately.",
    "start": "539360",
    "end": "545760"
  },
  {
    "text": "So a non-deterministic\nmachine, we'll say, runs in a certain amount of\ntime if all of the branches",
    "start": "545760",
    "end": "553100"
  },
  {
    "text": "halt within that amount of time. So what we do not mean that\nthe total amount of usage,",
    "start": "553100",
    "end": "563640"
  },
  {
    "text": "the total amount of effort\nby adding up all the branches is at most T of n.",
    "start": "563640",
    "end": "568950"
  },
  {
    "text": "It's just that each branch\nindividually uses at most T of n. That's just going to\nbe our definition.",
    "start": "568950",
    "end": "575380"
  },
  {
    "text": "And it's going to turn\nout to be the right way to look at this to\nget something useful. ",
    "start": "575380",
    "end": "586180"
  },
  {
    "text": "So now we're going to define\nthe analogous complexity",
    "start": "586180",
    "end": "597720"
  },
  {
    "text": "class associated to\nnon-deterministic computation, which we'll call\nnon-deterministic time.",
    "start": "597720",
    "end": "604680"
  },
  {
    "text": "So non-deterministic time T of\nn is the set of all languages",
    "start": "604680",
    "end": "610460"
  },
  {
    "text": "that you can do with a\nnon-deterministic machine that runs in order T of n time.",
    "start": "610460",
    "end": "617030"
  },
  {
    "text": "Just think back\nto the definition we had for deterministic\ncomplexity, the time class--",
    "start": "617030",
    "end": "624530"
  },
  {
    "text": "or sometimes people\ncall it dtime to emphasize the difference. But let's just say we're\ncalling it in this course",
    "start": "624530",
    "end": "630230"
  },
  {
    "text": "time versus ntime. So TIME[T(n)] is all of the\nlanguage that you can do with",
    "start": "630230",
    "end": "635850"
  },
  {
    "text": "the one-tape Turing machine\nthat's deterministic. But this here is a\nnon-deterministic Turing",
    "start": "635850",
    "end": "642019"
  },
  {
    "text": "machine for\nnon-deterministic time. So the picture that is\ngood to have in your head",
    "start": "642020",
    "end": "650360"
  },
  {
    "text": "here would be if you\nthink of non-determinism",
    "start": "650360",
    "end": "655790"
  },
  {
    "text": "in terms of a computation\ntree thinking of all the different branches\nof the non-determinism.",
    "start": "655790",
    "end": "662780"
  },
  {
    "text": "All of those\nbranches have to halt and they have to halt\nwithin the time bound.",
    "start": "662780",
    "end": "669220"
  },
  {
    "text": "So imagine, here,\nthis is T of n time. All of the branches have to halt\nwithin T of n steps for this,",
    "start": "669220",
    "end": "675750"
  },
  {
    "text": "a non-deterministic Turing\nmachine to be running in T of n time and to be doing a language\nin the NTIME[T(n)] class.",
    "start": "675750",
    "end": "682620"
  },
  {
    "text": " And by analogy with\nwhat we did before,",
    "start": "682620",
    "end": "688000"
  },
  {
    "text": "the class NP is the\ncollection of all languages",
    "start": "688000",
    "end": "697150"
  },
  {
    "text": "that you can do\nnon-deterministically in polynomial time.",
    "start": "697150",
    "end": "702700"
  },
  {
    "text": "So it's the union over all\nof the ntime classes where the bound is polynomial.",
    "start": "702700",
    "end": "708870"
  },
  {
    "text": " OK, so a lot of this\nshould look very familiar,",
    "start": "708870",
    "end": "715879"
  },
  {
    "text": "but we've just added a\nbunch of non-deterministic and a bunch of Ns in place.",
    "start": "715880",
    "end": "722300"
  },
  {
    "text": "But the definitions\nare very similar. And one of the motivations we\nhad for looking at the class P",
    "start": "722300",
    "end": "730970"
  },
  {
    "text": "was that it did not depend\non the choice of model, as long as the model was\ndeterministic and reasonable.",
    "start": "730970",
    "end": "738110"
  },
  {
    "text": "And the class NP is\nalso going to not depend on the\nchoice of model, as",
    "start": "738110",
    "end": "744320"
  },
  {
    "text": "long as it's a reasonable\nnon-deterministic model. So it's again a\nvery natural class",
    "start": "744320",
    "end": "752779"
  },
  {
    "text": "to look at from a\nmathematical standpoint. And it also captures something\ninteresting, kind of,",
    "start": "752780",
    "end": "759680"
  },
  {
    "text": "from a practical\nstandpoint - which we're going to talk about\nover the next couple of slides - which is that it captures the\nproblems where you can easily",
    "start": "759680",
    "end": "767330"
  },
  {
    "text": "verify when you're a\nmember of the language.",
    "start": "767330",
    "end": "773110"
  },
  {
    "text": "OK, so we'll talk about that. But if you take, for example,\nthe Hamiltonian path problem.",
    "start": "773110",
    "end": "779710"
  },
  {
    "text": "When you find a member\nof the language, so that is a graph that\ndoes have a Hamiltonian",
    "start": "779710",
    "end": "786760"
  },
  {
    "text": "path from s to t,\nyou can easily verify that's true by simply\nexhibiting the path.",
    "start": "786760",
    "end": "794459"
  },
  {
    "text": "Not all problems can be\nverified in that way. But the problems that are in\nNP have that special feature--",
    "start": "794460",
    "end": "802680"
  },
  {
    "text": "that when you have a\nmember of the language, there's a way to verify\nthat you're a member. So we're going to talk about\nthat, because that's really",
    "start": "802680",
    "end": "809850"
  },
  {
    "text": "the key to understanding NP-- this notion of verification.",
    "start": "809850",
    "end": "815930"
  },
  {
    "text": "OK, so let me go-- there\nwas a good question here. Let me just see if I\nwant to answer that.",
    "start": "815930",
    "end": "821390"
  },
  {
    "text": " Yeah, I mean, this is a little\nbit of a longer question",
    "start": "821390",
    "end": "828380"
  },
  {
    "text": "than I want to fully\nrespond to but-- well, let's turn to my\nnext slide, which maybe",
    "start": "828380",
    "end": "835430"
  },
  {
    "text": "sort bringing that out anyway. Actually, it's a couple\nof slides from now. But I'll get to that point.",
    "start": "835430",
    "end": "841579"
  },
  {
    "start": "840000",
    "end": "1020000"
  },
  {
    "text": " So let's look at Hamiltonian,\nthe hampath problem.",
    "start": "841580",
    "end": "847280"
  },
  {
    "text": "And what I'm going to show is\nthe Hamiltonian path problem is in NP. And I'm going to walk\nyou through this one",
    "start": "847280",
    "end": "853250"
  },
  {
    "text": "kind of slowly. So the Hamiltonian\npath problem, remember, we don't know if it's\nin P. But it is in NP.",
    "start": "853250",
    "end": "862339"
  },
  {
    "text": "So it's in one of these. You can solve Hamiltonian\npath in polynomial time",
    "start": "862340",
    "end": "867440"
  },
  {
    "text": "if you're a\nnon-deterministic machine.  Why is that?",
    "start": "867440",
    "end": "873350"
  },
  {
    "text": "Well, it's because of the\nparallelism of non-determinism,",
    "start": "873350",
    "end": "881810"
  },
  {
    "text": "which allows you\nto kind of check all of the paths on\ndifferent branches.",
    "start": "881810",
    "end": "886930"
  },
  {
    "text": "So let me first describe how I\nwould write down the algorithm.",
    "start": "886930",
    "end": "892540"
  },
  {
    "text": "And then, we'll kind of try\nto unpack that and understand how that actually looks in\nterms of the Turing machine's",
    "start": "892540",
    "end": "901630"
  },
  {
    "text": "computation. So first of all, taking the\nHamiltonian path problem,",
    "start": "901630",
    "end": "908110"
  },
  {
    "text": "you are given an input\nnow, which is a graph and the nodes s and t where\nI'm trying to figure out",
    "start": "908110",
    "end": "914050"
  },
  {
    "text": "is that Hamiltonian path-- again, which visits\nall the nodes, which takes you from s to t.",
    "start": "914050",
    "end": "922090"
  },
  {
    "text": "And we're trying to make now\na non-deterministic machine, which is going to accept all\nsuch inputs which have a path.",
    "start": "922090",
    "end": "934029"
  },
  {
    "text": "So the way this\nnon-deterministic machine is going to work\nis it's basically",
    "start": "934030",
    "end": "939060"
  },
  {
    "text": "going to use its non-determinism\nto try all possible paths",
    "start": "939060",
    "end": "944550"
  },
  {
    "text": "on the different branches. And the way I'll\nspecify that is to say,",
    "start": "944550",
    "end": "950360"
  },
  {
    "text": "non-deterministically,\nwe're going to write down a candidate\npath which is just",
    "start": "950360",
    "end": "956390"
  },
  {
    "text": "going to be a\nsequence of m nodes, where we will say that's\nthe total number of nodes",
    "start": "956390",
    "end": "961910"
  },
  {
    "text": "of the graph. Remember, a Hamiltonian path,\nbecause it visits every node, is going to be a path with\nexactly m nodes in it.",
    "start": "961910",
    "end": "969319"
  },
  {
    "text": " So I'm going to write\ndown a sequence of nodes as a candidate path.",
    "start": "969320",
    "end": "976230"
  },
  {
    "text": "And I'm\nnon-deterministically going to choose every possible\nsequence in this way.",
    "start": "976230",
    "end": "982320"
  },
  {
    "text": " If you'd like to think\nof the guessing metaphor",
    "start": "982320",
    "end": "987680"
  },
  {
    "text": "for non-determinism,\nyou can think of the non-deterministic\nmachine as guessing",
    "start": "987680",
    "end": "993140"
  },
  {
    "text": "the right path, which is going\nto be the Hamiltonian path from s to t. But I think for\nthis discussion, it",
    "start": "993140",
    "end": "999529"
  },
  {
    "text": "might be more helpful\nto think about all of the different branches\nof the non-determinism.",
    "start": "999530",
    "end": "1006243"
  },
  {
    "text": "Because that's\nperhaps more useful when we're thinking about\nit in terms of the time. I think you'll get used\nto thinking about it.",
    "start": "1006243",
    "end": "1012520"
  },
  {
    "text": "You should be used\nto thinking about it in many of the different\nways. but maybe the computation\ntree of all branches",
    "start": "1012520",
    "end": "1019209"
  },
  {
    "text": "might be the more\nhelpful one here. So now after we write\ndown a candidate path",
    "start": "1019210",
    "end": "1025339"
  },
  {
    "text": "sequence of nodes,\nnow I have to check that this really is a path.",
    "start": "1025339",
    "end": "1032819"
  },
  {
    "text": "And the way I'm going to do that\nis to say, well, now if I have just a sequence of\nnodes written down, what does it mean for it to be a\nHamiltonian path from s to t?",
    "start": "1032819",
    "end": "1041430"
  },
  {
    "text": "Well, it better start with s\nand end with t, first of all. And we have to make sure\nthat every step of the way",
    "start": "1041430",
    "end": "1050890"
  },
  {
    "text": "is actually an edge. So each pair vi to vi plus 1\nhas to be an edge in the graph.",
    "start": "1050890",
    "end": "1059105"
  },
  {
    "text": "Otherwise, that\nsequence of nodes is not going to be a legitimate\nHamiltonian path from s to t.",
    "start": "1059105",
    "end": "1064380"
  },
  {
    "text": "And it has to be a simple path. You can't be repeating nodes. ",
    "start": "1064380",
    "end": "1071100"
  },
  {
    "text": "These four conditions\ntogether will guarantee that we have\na Hamiltonian path.",
    "start": "1071100",
    "end": "1076470"
  },
  {
    "text": "And once we have written\ndown a candidate sequence,",
    "start": "1076470",
    "end": "1081520"
  },
  {
    "text": "we can just check that the\nsequence actually works. ",
    "start": "1081520",
    "end": "1086750"
  },
  {
    "text": "At this second stage\nof the algorithm,",
    "start": "1086750",
    "end": "1091820"
  },
  {
    "text": "non-determinism isn't necessary. This is going to be a\ndeterministic phase. But stage one of\nthe algorithm is",
    "start": "1091820",
    "end": "1099320"
  },
  {
    "text": "going to be a non-deterministic\nphase where it's writing down all possible paths. Now, I'm going to try\nto unpack that for you",
    "start": "1099320",
    "end": "1106340"
  },
  {
    "text": "so you can actually visualize\nhow the machine is doing this. ",
    "start": "1106340",
    "end": "1112809"
  },
  {
    "text": "And then, of course,\nyou know on each branch of the non-determinism,\nyou're going to check to see whether the\nconditions have been satisfied.",
    "start": "1112810",
    "end": "1121450"
  },
  {
    "text": "And on that branch, if the\nconditions were not satisfied, that branch is going to reject.",
    "start": "1121450",
    "end": "1127750"
  },
  {
    "text": "Of course, one of the other\nbranches might yet accept, so that's how\nnon-determinism works.",
    "start": "1127750",
    "end": "1134960"
  },
  {
    "text": "OK? So I'd like to visualize\nthis as the tree",
    "start": "1134960",
    "end": "1152020"
  },
  {
    "text": "of the different branches of the\ncomputation of m on its input.",
    "start": "1152020",
    "end": "1158930"
  },
  {
    "text": "So here is our non-deterministic\nTuring machine. Which?",
    "start": "1158930",
    "end": "1164050"
  },
  {
    "text": "This one. And you provide it with\nthe input G, s, and t.",
    "start": "1164050",
    "end": "1171040"
  },
  {
    "text": "And how is the machine\nactually working? So when I say\nnon-deterministically write",
    "start": "1171040",
    "end": "1176980"
  },
  {
    "text": "down a sequence of m nodes-- look, this is getting into\na little bit more detail",
    "start": "1176980",
    "end": "1184510"
  },
  {
    "text": "than I would normally\nthink about it, because we try to tend to think\nabout things at a higher level. But just to get us\nstarted, I think",
    "start": "1184510",
    "end": "1192250"
  },
  {
    "text": "it's good to think about\nthis with a bit more detail. So let's think of the m nodes\nas being numbered, having",
    "start": "1192250",
    "end": "1202100"
  },
  {
    "text": "labels numbered 1 through m. And I'm going to think\nabout them being labeled",
    "start": "1202100",
    "end": "1207590"
  },
  {
    "text": "by their binary sequences. We're going to write\ndown those nodes. That's how the machine is\ngoing to have to operate",
    "start": "1207590",
    "end": "1214580"
  },
  {
    "text": "on those numbers for the nodes. We'll think about them as\nbeing written in binary.",
    "start": "1214580",
    "end": "1219860"
  },
  {
    "text": "And now, as the machine is\ngoing to be writing down, let's say, the node v1.",
    "start": "1219860",
    "end": "1226230"
  },
  {
    "text": "So it's\nnon-deterministically picking the first node of the sequence. What does that\nactually mean in terms",
    "start": "1226230",
    "end": "1232470"
  },
  {
    "text": "of the step-by-step processing\nof the Turing machine m?",
    "start": "1232470",
    "end": "1241140"
  },
  {
    "text": "Well, it's going to be\nguessing via a sequence of non-deterministic moves,\nthe bits that represent",
    "start": "1241140",
    "end": "1252820"
  },
  {
    "text": "the number of the node for v1. For example, v1 might be the\nnode number 5 in the graph.",
    "start": "1252820",
    "end": "1263670"
  },
  {
    "text": "Of course,\nnon-deterministically, the machine is on\ndifferent branches, picking all different\npossible choices for v1.",
    "start": "1263670",
    "end": "1270480"
  },
  {
    "text": "Those are going to be the\ndifferent branches here. But one of the\nbranches might be--",
    "start": "1270480",
    "end": "1277260"
  },
  {
    "text": "and what I'm really\nrepresenting here, these are-- I probably could have written\nthis down on the slide",
    "start": "1277260",
    "end": "1283320"
  },
  {
    "text": "here in tiny font. But these are like\nthe 0, 1 choices.",
    "start": "1283320",
    "end": "1288438"
  },
  {
    "text": "That's why it's sort\nof a binary tree here for writing\ndown the bits of v1.",
    "start": "1288438",
    "end": "1297220"
  },
  {
    "text": "So here maybe this could be\n101, representing the number",
    "start": "1297220",
    "end": "1304030"
  },
  {
    "text": "5, which might be the very\nfirst node that I'm writing down in my sequence.",
    "start": "1304030",
    "end": "1310250"
  },
  {
    "text": "Some other branch is going\nto write down node number 6. Some other branch is going\nto write down node number 2. Because\nnon-deterministically, we're",
    "start": "1310250",
    "end": "1316460"
  },
  {
    "text": "making all possible\nchoices for v1. That's what I'm trying to\nshow in this little part",
    "start": "1316460",
    "end": "1321950"
  },
  {
    "text": "of the computation\nof m on this input.",
    "start": "1321950",
    "end": "1326990"
  },
  {
    "text": "So then, after it's\nfinished writing down the description of the\nnode for its choice for v1,",
    "start": "1326990",
    "end": "1337660"
  },
  {
    "text": "it goes down to\nchoose what v2 is. Again, non-deterministically,\nso there's going to be more branches for\neach possible choice of v2.",
    "start": "1337660",
    "end": "1350330"
  },
  {
    "text": "And so on, node after node. Then, it's going to finally\nget to the last node, vm.",
    "start": "1350330",
    "end": "1356810"
  },
  {
    "text": "It's going to write down\nlots of choices for vm. And at this point here, we\nhave completed the first stage",
    "start": "1356810",
    "end": "1364820"
  },
  {
    "text": "of the algorithm. Now, there's some\nhuge tree of all of the possible choices\nfor the V's that",
    "start": "1364820",
    "end": "1371000"
  },
  {
    "text": "have shown up at this point. OK? And now, we're going to\nmove into the second phase.",
    "start": "1371000",
    "end": "1378850"
  },
  {
    "text": "So following this,\nthere's going to be, here, a bunch of deterministic\nsteps of the machine.",
    "start": "1378850",
    "end": "1392090"
  },
  {
    "text": "So no more branching\nis needed because here,",
    "start": "1392090",
    "end": "1397190"
  },
  {
    "text": "we've written down--\nat this point, we've reached a point in\neach of those locations,",
    "start": "1397190",
    "end": "1405410"
  },
  {
    "text": "where we've chosen\none of the candidates, one of the possible branches--",
    "start": "1405410",
    "end": "1410900"
  },
  {
    "text": "one of the possible paths\nthrough the graph, I'm sorry.",
    "start": "1410900",
    "end": "1417350"
  },
  {
    "text": "So here, we're guessing\npotential paths in the graph.",
    "start": "1417350",
    "end": "1423960"
  },
  {
    "text": "And now, we're going to\ncheck that we actually have picked a path that's a\nHamiltonian path from s to t.",
    "start": "1423960",
    "end": "1432320"
  },
  {
    "text": "OK? So each one of these\nbranches is now going to end up\naccepting or rejecting. And the whole\noverall computation",
    "start": "1432320",
    "end": "1439040"
  },
  {
    "text": "is going to accept if\nat least one of them ended up accepting,\nwhich means you actually found a Hamiltonian path.",
    "start": "1439040",
    "end": "1446409"
  },
  {
    "text": "OK? I don't know if that's helpful\nto you or not, but that is--",
    "start": "1446410",
    "end": "1452610"
  },
  {
    "text": "if there's any questions\non this, let's see. Question on is there something--",
    "start": "1452610",
    "end": "1459065"
  },
  {
    "text": " trying to draw a connection here\nbetween this and computation",
    "start": "1459065",
    "end": "1468670"
  },
  {
    "text": "histories. I mean, there is a pattern\nhere that does come up often",
    "start": "1468670",
    "end": "1474309"
  },
  {
    "text": "where you want to check\nthat something starts right, ends right, and that all of\nthe intermediates are right.",
    "start": "1474310",
    "end": "1481030"
  },
  {
    "text": "So I think there is some\ndeeper connection here.",
    "start": "1481030",
    "end": "1488410"
  },
  {
    "text": "Probably too hard\nto explain but that has something to do with this\nHamiltonian path problem.",
    "start": "1488410",
    "end": "1495490"
  },
  {
    "text": " Why are we using\nbinary representation? Well, we're going\nto talk about--",
    "start": "1495490",
    "end": "1504377"
  },
  {
    "text": "the algorithm would\nhave worked equally well if we used base three\nor base five or base 20",
    "start": "1504377",
    "end": "1512630"
  },
  {
    "text": "as a way of writing down\nour labels for the nodes.",
    "start": "1512630",
    "end": "1518000"
  },
  {
    "text": "But in a sense,\nit doesn't matter. The alphabet has to be finite\nthough, so that's true.",
    "start": "1518000",
    "end": "1524830"
  },
  {
    "text": "I mean, that's why it's not just\nin a single step of the Turing machine that you would pick\nthe node the choice for v1.",
    "start": "1524830",
    "end": "1535690"
  },
  {
    "text": "You really have to go\nto a sequence of steps. Because each of the\nbranches of the machine",
    "start": "1535690",
    "end": "1542110"
  },
  {
    "text": "only has a fixed\nnumber of choices. So you can't, in a single\nstep of the Turing machine,",
    "start": "1542110",
    "end": "1547480"
  },
  {
    "text": "pick all the different\npossibilities for v1. That has to go\nthrough a sequence. ",
    "start": "1547480",
    "end": "1554090"
  },
  {
    "text": "OK. ",
    "start": "1554090",
    "end": "1559150"
  },
  {
    "text": "Now, let me do a second example,\nthe problem of composites. So the language\nof all composites",
    "start": "1559150",
    "end": "1567010"
  },
  {
    "text": "are all of the non-primes,\nwritten as binary numbers again. So we'll talk about the base and\nthe representation in a second.",
    "start": "1567010",
    "end": "1574540"
  },
  {
    "text": "But just imagine these\nare all of the numbers that are not prime.",
    "start": "1574540",
    "end": "1580330"
  },
  {
    "text": "And that language is easily\nseen to be a member of NP. ",
    "start": "1580330",
    "end": "1586920"
  },
  {
    "text": "Here is, again, the\nalgorithm for that. ",
    "start": "1586920",
    "end": "1592450"
  },
  {
    "text": "Given x, we want to accept x,\nif it's not a prime number.",
    "start": "1592450",
    "end": "1598460"
  },
  {
    "text": "So it has some\nnon-trivial factor. ",
    "start": "1598460",
    "end": "1605019"
  },
  {
    "text": "So first, the way the\nnon-deterministic machine is going to work is it's\ngoing to guess that factor. So non-deterministically,\nit's going",
    "start": "1605020",
    "end": "1611530"
  },
  {
    "text": "to try every possible factor. Y is going to be a\nnumber between 1 and x.",
    "start": "1611530",
    "end": "1618840"
  },
  {
    "text": "But not including 1. You have to be an\ninteresting factor, so not including one\nin the number itself.",
    "start": "1618840",
    "end": "1625210"
  },
  {
    "text": "So something\nstrictly in between. And we're going to then-- after we've\nnon-deterministically chosen y,",
    "start": "1625210",
    "end": "1631920"
  },
  {
    "text": "then we're going to test to\nsee if y is really a factor.",
    "start": "1631920",
    "end": "1638260"
  },
  {
    "text": "So we'll see if y divides evenly\ninto x with a remainder of 0.",
    "start": "1638260",
    "end": "1643956"
  },
  {
    "text": "If that branch successfully\npicked the right y, it's going to accept.",
    "start": "1643956",
    "end": "1649400"
  },
  {
    "text": "And some other branch where it\nmight have picked the wrong y, will not. And if x is really\na composite number,",
    "start": "1649400",
    "end": "1657799"
  },
  {
    "text": "some branch will\nfind the factor. Now, the base doesn't matter.",
    "start": "1657800",
    "end": "1663460"
  },
  {
    "text": "Could have used base 10, because\nyou can convert from one base to another.",
    "start": "1663460",
    "end": "1669460"
  },
  {
    "text": "So this is really in terms\nof our representation of the number. But I do want to make one\npoint here, that changing--",
    "start": "1669460",
    "end": "1678177"
  },
  {
    "text": "we don't want to write\nthe number in unary-- ",
    "start": "1678177",
    "end": "1683400"
  },
  {
    "text": "writing the number of\nk as a sequence of k1s. That's not really a base.",
    "start": "1683400",
    "end": "1689980"
  },
  {
    "text": "That's just an exponential\nrepresentation for the number and that changes the game. Because if you make the\ninput exponentially larger,",
    "start": "1689980",
    "end": "1700440"
  },
  {
    "text": "then it's going to change\nwhether the algorithm relative to that exponentially\nlarger input is polynomial",
    "start": "1700440",
    "end": "1708330"
  },
  {
    "text": "or not. So an algorithm that might have\nbeen exponential originally",
    "start": "1708330",
    "end": "1714912"
  },
  {
    "text": "when the number's\nwritten in binary might become polynomial if the\nnumbers are written in unary. ",
    "start": "1714912",
    "end": "1721640"
  },
  {
    "text": "And I do want to\nmention as a side note, that the composites language--",
    "start": "1721640",
    "end": "1726860"
  },
  {
    "text": "or primes, for that matter-- both are NP.",
    "start": "1726860",
    "end": "1732679"
  },
  {
    "text": "But we won't cover that. So whereas the Hamiltonian\npath problem is not",
    "start": "1732680",
    "end": "1738290"
  },
  {
    "text": "known whether it's NP, the\nprimes and composites problem are NP.",
    "start": "1738290",
    "end": "1744440"
  },
  {
    "text": "So that was known. That was actually a very\nbig result in the field. Solved by folks at one of the\nIndian Institute of Technology",
    "start": "1744440",
    "end": "1756020"
  },
  {
    "text": "back about almost\n20 years ago now. ",
    "start": "1756020",
    "end": "1763440"
  },
  {
    "start": "1760000",
    "end": "1923000"
  },
  {
    "text": "So let's turn here, to\ntrying to get an intuitive feeling for P and NP.",
    "start": "1763440",
    "end": "1768750"
  },
  {
    "text": "And we'll return now to this\nnotion of NP corresponding to easy verifiability.",
    "start": "1768750",
    "end": "1774810"
  },
  {
    "text": " NP are the languages where you\ncan easily verify membership",
    "start": "1774810",
    "end": "1782490"
  },
  {
    "text": "quickly. I'll try to explain\nwhat that means. In contrast, P are the languages\nwhere you can test membership",
    "start": "1782490",
    "end": "1790529"
  },
  {
    "text": "quickly. By quickly, I'm using\npolynomial time.",
    "start": "1790530",
    "end": "1797940"
  },
  {
    "text": "That's going to be,\nfor us, that's what quickly means in this course. ",
    "start": "1797940",
    "end": "1807650"
  },
  {
    "text": "In the case of the\nHamiltonian path problem, the way you verify\nthe membership",
    "start": "1807650",
    "end": "1813980"
  },
  {
    "text": "is you give the path. In the case of the\ncomposites, the way you verify the membership\nis you give the factor.",
    "start": "1813980",
    "end": "1820280"
  },
  {
    "text": " In those two cases,\nand in general,",
    "start": "1820280",
    "end": "1827350"
  },
  {
    "text": "when we have a\nproblem that's in NP, we think of this\nverification as having--",
    "start": "1827350",
    "end": "1835350"
  },
  {
    "text": "we give it a special name,\ncalled a certificate, or sometimes a\nshort certificate,",
    "start": "1835350",
    "end": "1840540"
  },
  {
    "text": "to emphasize the polynomiality\nof the certificate. It's like a way of\nproving that you're",
    "start": "1840540",
    "end": "1846600"
  },
  {
    "text": "a member of the language.  In the case of COMPOSITES,\nthe proof is the factor.",
    "start": "1846600",
    "end": "1854550"
  },
  {
    "text": "In the case of\nHAMPATH, the proof is the path, the\nHamiltonian path.",
    "start": "1854550",
    "end": "1861080"
  },
  {
    "text": "Contrast that, for example,\nif you had a prime number. ",
    "start": "1861080",
    "end": "1867570"
  },
  {
    "text": "Proving a number is composite\nis easy because you just exhibit the factor. How would you prove\nthat a number is prime?",
    "start": "1867570",
    "end": "1875470"
  },
  {
    "text": "What's the short\ncertificate of proving that some number has no factor?",
    "start": "1875470",
    "end": "1883149"
  },
  {
    "text": "That's not so obvious. In fact, there are\nways of doing it, which I'm not going to get\ninto in the case of testing",
    "start": "1883150",
    "end": "1889900"
  },
  {
    "text": "of numbers prime. And now it's even known to be\nin P, so that's even better.",
    "start": "1889900",
    "end": "1896470"
  },
  {
    "text": "But there's no obvious way\nof proving that a number is prime with a short certificate.",
    "start": "1896470",
    "end": "1902580"
  },
  {
    "text": " This concept of\nbeing able to verify",
    "start": "1902580",
    "end": "1908850"
  },
  {
    "text": "when you are a member\nof the language, that's key to understanding NP.",
    "start": "1908850",
    "end": "1914870"
  },
  {
    "text": "That's the intuition you\nneed to develop and hopefully take away from today's\nlecture, or at least",
    "start": "1914870",
    "end": "1920450"
  },
  {
    "text": "by thinking about it,\nreading the book, and so on. ",
    "start": "1920450",
    "end": "1927330"
  },
  {
    "start": "1923000",
    "end": "2090000"
  },
  {
    "text": "If you compare these\ntwo classes, P and NP. P, first of all, is going\nto be a subset of NP,",
    "start": "1927330",
    "end": "1935160"
  },
  {
    "text": "both in terms of the\nway we defined it because, deterministic\nmachines are a special case of\nnon-deterministic machines.",
    "start": "1935160",
    "end": "1942670"
  },
  {
    "text": "But also if you want to think\nabout testing membership, if you can test\nmembership easily",
    "start": "1942670",
    "end": "1947700"
  },
  {
    "text": "then you can certainly verify\nit in terms of the certificate. You don't even need it. The certificate is\nirrelevant at that point.",
    "start": "1947700",
    "end": "1953760"
  },
  {
    "text": "Because whatever\nthe certificate is, you can still test\nyourself whether the input",
    "start": "1953760",
    "end": "1960240"
  },
  {
    "text": "is in the language or not. ",
    "start": "1960240",
    "end": "1967010"
  },
  {
    "text": "The big question,\nas I mentioned, is whether these two\nclasses are the same. So does being able to verify\nmembership quickly, say",
    "start": "1967010",
    "end": "1976880"
  },
  {
    "text": "with one of these certificates,\nallow you to dispense with the certificate? Not even need a\ncertificate and just test",
    "start": "1976880",
    "end": "1982850"
  },
  {
    "text": "it for yourself whether\nyou're in the language. And do that in polynomial time.",
    "start": "1982850",
    "end": "1990570"
  },
  {
    "text": "That's the question. For a problem like\nHamiltonian path,",
    "start": "1990570",
    "end": "1996580"
  },
  {
    "text": "do you need to\nsearch for the answer if you're doing it\ndeterministically? Or can you somehow\navoid that and just",
    "start": "1996580",
    "end": "2006570"
  },
  {
    "text": "come up with the answer\ndirectly with a polynomial time solution?",
    "start": "2006570",
    "end": "2012779"
  },
  {
    "text": "Nobody knows the answer to that. And it goes back, at this\npoint, quite a long time. It's almost 60 years now.",
    "start": "2012780",
    "end": "2019350"
  },
  {
    "text": " That problem has\nbeen around 60 years.",
    "start": "2019350",
    "end": "2026740"
  },
  {
    "text": "No, that would be 50 years. No, 50 years, almost 50 years. ",
    "start": "2026740",
    "end": "2036769"
  },
  {
    "text": "Most people believe that\nP is different from NP. In other words, that\nthere are problems in P-- in NP which are not\nin P. A candidate",
    "start": "2036770",
    "end": "2045080"
  },
  {
    "text": "would be the Hamiltonian\npath problem. But it seems to be very\nhard to prove that.",
    "start": "2045080",
    "end": "2052230"
  },
  {
    "text": "And part of the\nreason is, how do you prove that a problem\nlike Hamiltonian path",
    "start": "2052230",
    "end": "2057830"
  },
  {
    "text": "does not have a\npolynomial time algorithm. It's very tricky to do\nthat, because the class",
    "start": "2057830",
    "end": "2063919"
  },
  {
    "text": "of polynomial time algorithms\nis a very rich class. Polynomial time algorithms\nare very powerful.",
    "start": "2063920",
    "end": "2070129"
  },
  {
    "text": "And to try to prove--\nthere's no clever way of solving the\nHamiltonian path problem.",
    "start": "2070130",
    "end": "2075219"
  },
  {
    "text": "It just seems to be beyond\nour present day mathematics. I believe someday somebody's\ngoing to solve it.",
    "start": "2075219",
    "end": "2080408"
  },
  {
    "text": "But so far, no\none has succeeded.",
    "start": "2080409",
    "end": "2085934"
  },
  {
    "text": "So what I thought\nwe would do is-- I think I have a check-in here. Yes. And then we'll stop for a break.",
    "start": "2085935",
    "end": "2092274"
  },
  {
    "start": "2090000",
    "end": "2320000"
  },
  {
    "text": " Let's look at the complementary\nproblem, HAMPATH complement.",
    "start": "2092275",
    "end": "2099280"
  },
  {
    "text": " You're in the language now\nif you don't have a path.",
    "start": "2099280",
    "end": "2108180"
  },
  {
    "text": "So is that complementary\nproblem in NP? ",
    "start": "2108180",
    "end": "2115390"
  },
  {
    "text": "For that to be\nthe case, we would need to have short certificates\nof when a graph does not",
    "start": "2115390",
    "end": "2122710"
  },
  {
    "text": "have a Hamiltonian path. ",
    "start": "2122710",
    "end": "2129500"
  },
  {
    "text": "I leave it to you. There are three choices.  OK?",
    "start": "2129500",
    "end": "2136600"
  },
  {
    "text": "Going to stop here, so make\nsure you get your participation credit here. ",
    "start": "2136600",
    "end": "2142980"
  },
  {
    "text": "I'm going to end\nthe polling now. Interesting. [LAUGHS] So the\nmajority is wrong.",
    "start": "2142980",
    "end": "2149060"
  },
  {
    "text": "Well, not wrong, we don't know. ",
    "start": "2149060",
    "end": "2156950"
  },
  {
    "text": "I think the only fair\nanswer to this question is C. Because we don't\nknow whether or not",
    "start": "2156950",
    "end": "2164299"
  },
  {
    "text": "we can give short\ncertificates for a graph not to have a Hamiltonian path. If P equaled NP, then you\ncan test in polynomial time",
    "start": "2164300",
    "end": "2175030"
  },
  {
    "text": "whether a graph has\na Hamiltonian path. And then the computation\nitself would be a certificate,",
    "start": "2175030",
    "end": "2180609"
  },
  {
    "text": "whether it has a path or\nwhether it doesn't have a path. Because it would be something\nthat you can check easily.",
    "start": "2180610",
    "end": "2185980"
  },
  {
    "text": " Since we don't know for sure\nthat P is different from NP,",
    "start": "2185980",
    "end": "2195700"
  },
  {
    "text": "P could be equal to\nNP, then it's possible that we could give\na short certificate.",
    "start": "2195700",
    "end": "2203510"
  },
  {
    "text": "Namely, the computation of\nthe polynomial algorithm. So the only really reasonable\nanswer to this question",
    "start": "2203510",
    "end": "2214700"
  },
  {
    "text": "is that we don't know.  Just ponder that.",
    "start": "2214700",
    "end": "2220470"
  },
  {
    "text": " Those of you who answered\nyes, however, need to go back.",
    "start": "2220470",
    "end": "2228900"
  },
  {
    "text": "And I put this here\nexplicitly because I know this is a confusion\nfor, well I can",
    "start": "2228900",
    "end": "2238180"
  },
  {
    "text": "see, for quite a few of you. ",
    "start": "2238180",
    "end": "2245310"
  },
  {
    "text": "When we have\nnon-deterministic computation and you have a\nnon-deterministic machine, you can't simply\ninvert the answer",
    "start": "2245310",
    "end": "2253710"
  },
  {
    "text": "and get back a\nnon-deterministic machine. Non-determinism does\nnot work that way.",
    "start": "2253710",
    "end": "2259240"
  },
  {
    "text": "If you remember, the complement\nof a pushdown automaton",
    "start": "2259240",
    "end": "2265800"
  },
  {
    "text": "is not a pushdown automaton.  If you have a\nnon-deterministic machine",
    "start": "2265800",
    "end": "2271980"
  },
  {
    "text": "and you invert all of\nthe responses on each of the branches, it's not going\nto be recognizing or deciding",
    "start": "2271980",
    "end": "2279900"
  },
  {
    "text": "the complementary language. ",
    "start": "2279900",
    "end": "2287150"
  },
  {
    "text": "I think that this\nis something you-- if you answered yes, you\nneed to go back and make",
    "start": "2287150",
    "end": "2293119"
  },
  {
    "text": "sure you understand why yes\nis not a reasonable answer",
    "start": "2293120",
    "end": "2298430"
  },
  {
    "text": "to this question. Because that's not how\nnon-determinism works. So you have a not\ncomplete understanding",
    "start": "2298430",
    "end": "2306630"
  },
  {
    "text": "of non-determinism. And that's going to be really\nimportant for us going forward. I really urge you to figure out\nand understand why yes is not",
    "start": "2306630",
    "end": "2315840"
  },
  {
    "text": "a good answer to this check-in. OK, so I think we will-- we can talk about that\nmore over the break.",
    "start": "2315840",
    "end": "2325320"
  },
  {
    "start": "2320000",
    "end": "2618000"
  },
  {
    "text": "And so we'll return\nhere in five minutes.",
    "start": "2325320",
    "end": "2331125"
  },
  {
    "text": " Somebody's asking about--\ncan infinite sequences",
    "start": "2331125",
    "end": "2341470"
  },
  {
    "text": "be generated by the machine.  When we're talking\nabout, especially",
    "start": "2341470",
    "end": "2350519"
  },
  {
    "text": "in the complexity section of the\ncourse, all of the computations are going to be bounded in time.",
    "start": "2350520",
    "end": "2357102"
  },
  {
    "text": "So we're not going to be\nthinking about infinite runs of the machine. That's not going to\nbe relevant for us. So let's not think about that.",
    "start": "2357102",
    "end": "2364230"
  },
  {
    "text": "How does a Turing\nmachine perform division?  How does a Turing\nmachine perform division?",
    "start": "2364230",
    "end": "2370869"
  },
  {
    "text": "Well, how do you\nperform division? [LAUGHS] Long division is an\noperation that can run in--",
    "start": "2370870",
    "end": "2382630"
  },
  {
    "text": "the long division procedure\nthat you learn in grade school, you can implement that\non a Turing machine.",
    "start": "2382630",
    "end": "2390100"
  },
  {
    "text": "Yes, a Turing machine\ncan definitely perform-- do long division, or\ndivision of one integer by another in polynomial time.",
    "start": "2390100",
    "end": "2397420"
  },
  {
    "start": "2397420",
    "end": "2404062"
  },
  {
    "text": "Another question. Can we generally say,\ntry dividing y by x? Or do we have to enumerate\na string of length y",
    "start": "2404062",
    "end": "2411370"
  },
  {
    "text": "and cross off every-- no. I think that's\nthe same question. ",
    "start": "2411370",
    "end": "2418430"
  },
  {
    "text": "I mean, if you have\nnumbers written in binary, how would you do the division? You're not going to\nuse long division.",
    "start": "2418430",
    "end": "2427550"
  },
  {
    "text": "Anything such as\nthe thing that's proposed here by the\nquestioner is going",
    "start": "2427550",
    "end": "2434780"
  },
  {
    "text": "to be an exponential algorithm. So don't do it that way. ",
    "start": "2434780",
    "end": "2446790"
  },
  {
    "text": "Why does primes in P-- composites in P not\nimply primes in P? It does imply.",
    "start": "2446790",
    "end": "2453410"
  },
  {
    "text": "If composites are in P,\nthen primes is in P as well. When you have a\ndeterministic machine,",
    "start": "2453410",
    "end": "2460620"
  },
  {
    "text": "you can flip the answer. When you have a\nnon-deterministic machine, you may not be able\nto flip the answer.",
    "start": "2460620",
    "end": "2466329"
  },
  {
    "text": "So deterministic machine\njust having a single branch, you can make another\ndeterministic machine",
    "start": "2466330",
    "end": "2472650"
  },
  {
    "text": "that runs in the same\namount of time that does the complementary language. Because for\ndeterministic machines,",
    "start": "2472650",
    "end": "2481170"
  },
  {
    "text": "just like for deciders in\nthe computability section, you can just invert the answer.",
    "start": "2481170",
    "end": "2488410"
  },
  {
    "text": "There is an analogy here\nbetween P and decidability,",
    "start": "2488410",
    "end": "2493500"
  },
  {
    "text": "and NP and recognizability. It's not an airtight\nanalogy here,",
    "start": "2493500",
    "end": "2498510"
  },
  {
    "text": "but there is some\nrelationship there. ",
    "start": "2498510",
    "end": "2504619"
  },
  {
    "text": "Somebody's asking me, what\nare the implications of P equal to NP? Lots of implications.",
    "start": "2504620",
    "end": "2510620"
  },
  {
    "text": "Too long to enumerate now. But, for example, you\nwould be able to break basically all cryptosystems that\nI'm aware of, if P equal to NP.",
    "start": "2510620",
    "end": "2521325"
  },
  {
    "text": "So we would have a\nlot of consequences.  Somebody's asking,\nso composites--",
    "start": "2521325",
    "end": "2528200"
  },
  {
    "text": "primality and\ncompositeness testing is solvable in polynomial time. But factoring,\ninterestingly enough,",
    "start": "2528200",
    "end": "2534589"
  },
  {
    "text": "is not known to be solvable\nin polynomial time. ",
    "start": "2534590",
    "end": "2542187"
  },
  {
    "text": "We may talk about this a little\nbit toward the end of the term if we have time. ",
    "start": "2542187",
    "end": "2548830"
  },
  {
    "text": "The algorithms for testing\nwhether a number is prime or composite\nin polynomial time",
    "start": "2548830",
    "end": "2555190"
  },
  {
    "text": "do not operate by\nlooking for factors. They operate in an entirely\ndifferent way, basically",
    "start": "2555190",
    "end": "2561400"
  },
  {
    "text": "by showing that a number is\nprime or composite by looking",
    "start": "2561400",
    "end": "2566890"
  },
  {
    "text": "at certain properties\nof that number. But without testing\nwhether it has-- testing, but without\nfinding a factor.",
    "start": "2566890",
    "end": "2573940"
  },
  {
    "start": "2573940",
    "end": "2583900"
  },
  {
    "text": "Another question\nhere about asking",
    "start": "2583900",
    "end": "2589390"
  },
  {
    "text": "when we talk about\nencodings, do we have to say how we\nencode numbers, values? No, we don't have to.",
    "start": "2589390",
    "end": "2595090"
  },
  {
    "text": "We usually don't have to get\ninto spelling out encodings, as long as they're\nreasonable encodings.",
    "start": "2595090",
    "end": "2602080"
  },
  {
    "text": "So you don't have to usually. We're going to be talking about\nthings at a high enough level",
    "start": "2602080",
    "end": "2607570"
  },
  {
    "text": "that the specific encodings\nare not going to matter. Let's return to the\nrest of our lecture.",
    "start": "2607570",
    "end": "2617680"
  },
  {
    "text": "When we talk about, say,\nthis P versus NP problem.",
    "start": "2617680",
    "end": "2626440"
  },
  {
    "start": "2618000",
    "end": "2949000"
  },
  {
    "text": "And how do you show\nthat a problem might not",
    "start": "2626440",
    "end": "2633300"
  },
  {
    "text": "be solvable in P, like the\nHamiltonian path problem? Many people who are not\npractitioners in the field,",
    "start": "2633300",
    "end": "2648810"
  },
  {
    "text": "know about the P\nversus NP problems-- over the years, I've\ngotten many, many emails",
    "start": "2648810",
    "end": "2654900"
  },
  {
    "text": "and physical letters\nfrom people about that. ",
    "start": "2654900",
    "end": "2662550"
  },
  {
    "text": "Since I've spent\nsome time thinking-- I'm known as having spent\nsome time thinking about it.",
    "start": "2662550",
    "end": "2669120"
  },
  {
    "text": "People claim to\nsolve the problem, solve P is NP, the P versus NP\nproblem, by basically saying,",
    "start": "2669120",
    "end": "2678630"
  },
  {
    "text": "problems like Hamiltonian path\nor other similar problems,",
    "start": "2678630",
    "end": "2688220"
  },
  {
    "text": "basically there's clearly no way\nto solve them without searching through a lot of possibilities.",
    "start": "2688220",
    "end": "2693560"
  },
  {
    "text": "And then they go through\na big, long analysis showing that there\nare exponentially many possibilities.",
    "start": "2693560",
    "end": "2698990"
  },
  {
    "start": "2698990",
    "end": "2708010"
  },
  {
    "text": "A lot of the proofs that\nclaim to solve P versus NP, they all look like that. You only have to look--",
    "start": "2708010",
    "end": "2713470"
  },
  {
    "text": "somewhere in that\npaper, there's going to be a statement along the\nlines, \"to solve this problem,",
    "start": "2713470",
    "end": "2721610"
  },
  {
    "text": "clearly you have\nto do it this way.\" And that's the flaw\nin the reasoning.",
    "start": "2721610",
    "end": "2728609"
  },
  {
    "text": "Because just like for\nthe factoring problem-- just like for the\ncompositeness testing problem,",
    "start": "2728610",
    "end": "2736650"
  },
  {
    "text": "you don't necessarily\nhave to solve it by searching for factors. There might be some\nother way to do it. You might be able to\nsolve the Hamiltonian path",
    "start": "2736650",
    "end": "2744390"
  },
  {
    "text": "problem without searching\nfor Hamiltonian paths. There might be some other\nprocess that you can use, which would give you the answer.",
    "start": "2744390",
    "end": "2752490"
  },
  {
    "text": "The class of polynomial\ntime algorithms is very rich, can do\nmany, many things. And I wanted to present to\nyou one of the most important",
    "start": "2752490",
    "end": "2762600"
  },
  {
    "text": "polynomial time algorithms. In a sense, you can\nmake a certain argument that this is the most\nfundamental polynomial time",
    "start": "2762600",
    "end": "2772800"
  },
  {
    "text": "algorithm. Some people might\nargue with me on that. And that's a process called\ndynamic programming, which",
    "start": "2772800",
    "end": "2780850"
  },
  {
    "text": "I'm sure some of you\nhave seen already in your algorithms classes,\nand some of you may not have.",
    "start": "2780850",
    "end": "2788170"
  },
  {
    "text": "Since you have a\nhomework problem on it, I want to spend a little\ntime describing it to you.",
    "start": "2788170",
    "end": "2793910"
  },
  {
    "text": "And that's useful for solving\nthis A CFG problem, which",
    "start": "2793910",
    "end": "2799240"
  },
  {
    "text": "you may remember from the\nfirst half of the course, involving testing if a\ngrammar generates a string.",
    "start": "2799240",
    "end": "2808150"
  },
  {
    "text": "So you remember\nthis A CFG problem? You're giving a grammar,\ncontext-free grammar,",
    "start": "2808150",
    "end": "2813770"
  },
  {
    "text": "and a string. And I want to know, is it in\nthe language of the grammar. So that's going to turn out to\nbe solvable in polynomial time,",
    "start": "2813770",
    "end": "2822420"
  },
  {
    "text": "but only with kind of\na clever algorithm. ",
    "start": "2822420",
    "end": "2829000"
  },
  {
    "text": "Remember, it's decidable. We decided it by\nmaking sure that you",
    "start": "2829000",
    "end": "2835410"
  },
  {
    "text": "are converting the grammar\nin Chomsky normal form. Then all the derivations\nhave a certain length.",
    "start": "2835410",
    "end": "2841560"
  },
  {
    "text": "You just try all the possible\nderivations of that length, and you accept if any of\nthose derivations generate w.",
    "start": "2841560",
    "end": "2847520"
  },
  {
    "text": " You may remember that from\nthe first half of the course.",
    "start": "2847520",
    "end": "2854690"
  },
  {
    "text": " That immediately\ngives an NP type",
    "start": "2854690",
    "end": "2861520"
  },
  {
    "text": "algorithm for this language. Because basically, you\nnon-deterministically--",
    "start": "2861520",
    "end": "2869217"
  },
  {
    "text": "instead of trying the\nmost sequentially, all of these derivations,\nyou try them in parallel\nnon-deterministically.",
    "start": "2869217",
    "end": "2874950"
  },
  {
    "text": "So non-deterministically,\nyou pick some derivation of that length.",
    "start": "2874950",
    "end": "2880000"
  },
  {
    "text": "And you accept it if\nit generates the input. This classically\nfits our model of NP.",
    "start": "2880000",
    "end": "2892073"
  },
  {
    "text": "You can think of it as\nguessing the derivation and checking that it works. Or, in parallel, writing down\nall possible derivations.",
    "start": "2892073",
    "end": "2899210"
  },
  {
    "text": "But this A CFG\nproblem is classically",
    "start": "2899210",
    "end": "2906080"
  },
  {
    "text": "an NP problem, a problem in NP. ",
    "start": "2906080",
    "end": "2912950"
  },
  {
    "text": "And if you just imagine-- then what's going to\nbe the certificate?",
    "start": "2912950",
    "end": "2918740"
  },
  {
    "text": "If you found an input that's\nin the language, that's generated by the grammar, the\ncertificate is the derivation.",
    "start": "2918740",
    "end": "2925569"
  },
  {
    "text": "So if you look at\nit that way, you might think, well, that's\nthe best you can do. This is going to be\nan NP problem, in NP,",
    "start": "2925570",
    "end": "2931890"
  },
  {
    "text": "and is not going to\nbe a way of avoiding searching for the derivation. But that's not true. There is a way of avoiding\nsearching for the derivation.",
    "start": "2931890",
    "end": "2939000"
  },
  {
    "text": "You can build up the derivation\nusing dynamic programming. And so that's what I\nwanted to describe for you,",
    "start": "2939000",
    "end": "2947220"
  },
  {
    "text": "how that works. Also partly because\nit's a homework problem. And I think dynamic programming\nis a very important algorithm.",
    "start": "2947220",
    "end": "2954143"
  },
  {
    "text": " Before we describe what\ndynamic programming is,",
    "start": "2954143",
    "end": "2965940"
  },
  {
    "text": "which is very\nsimple, by the way, let's try to work up to\nit by making an attempt",
    "start": "2965940",
    "end": "2971460"
  },
  {
    "text": "to solve this problem just\nusing ordinary recursion. ",
    "start": "2971460",
    "end": "2977140"
  },
  {
    "text": "How would we solve\nthe A CFG problem? So you're given grammar,\nyou're given an input.",
    "start": "2977140",
    "end": "2983640"
  },
  {
    "text": "Let's assume the grammar\nis in Chomsky normal form. ",
    "start": "2983640",
    "end": "2989610"
  },
  {
    "text": "That's going to be useful. So it's a Chomsky\nnormal form grammar. And we want to see how to\ntest if you can generate w.",
    "start": "2989610",
    "end": "2999437"
  },
  {
    "text": "And it's going to be\nrecursive algorithm. The recursive algorithm is going\nto actually solve something",
    "start": "2999437",
    "end": "3005690"
  },
  {
    "text": "slightly more general. I'm going to give\nyou the grammar. I'm going to give\nyou the string. And I'm also going to allow you\nto start at some other variable",
    "start": "3005690",
    "end": "3014810"
  },
  {
    "text": "besides the start variable. I'm going to give\nyou some variable, R, and I know I want to know, can\nI generate w starting at R?",
    "start": "3014810",
    "end": "3023120"
  },
  {
    "text": " So that's my slightly\nmore general problem,",
    "start": "3023120",
    "end": "3028869"
  },
  {
    "text": "which is going to be\nuseful in the recursion.  So the input now\nto this algorithm",
    "start": "3028870",
    "end": "3036630"
  },
  {
    "text": "is the grammar, the input,\nand the starting variable. And now how is the\nalgorithm going to work?",
    "start": "3036630",
    "end": "3042920"
  },
  {
    "text": "It's going to try to\ntest, can I get to-- is there some\nderivation, pictured here",
    "start": "3042920",
    "end": "3048920"
  },
  {
    "text": "as the parse tree,\nfor w starting at R? That's what the algorithm\nis trying to answer.",
    "start": "3048920",
    "end": "3055900"
  },
  {
    "text": "Can I get w from R? The way it's going to do that\nis it's going to try to divide w",
    "start": "3055900",
    "end": "3064610"
  },
  {
    "text": "into the two strings\nin all possible ways.",
    "start": "3064610",
    "end": "3070860"
  },
  {
    "text": "Which sounds like it might\nbe exponential, but it isn't. There's only a polynomial\nnumber of ways to divide",
    "start": "3070860",
    "end": "3078800"
  },
  {
    "text": "the string into two substrings. Just of order n, just depending\nwhere you make that cut.",
    "start": "3078800",
    "end": "3085520"
  },
  {
    "text": " So that's not too bad.",
    "start": "3085520",
    "end": "3090630"
  },
  {
    "text": "There's a polynomial,\nthere's only n ways of making that division. And also I'm going to try every\npossible rule that comes from R",
    "start": "3090630",
    "end": "3104430"
  },
  {
    "text": "that generates two variables. So these are what's allowed\nin Chomsky normal form, R goes to ST.",
    "start": "3104430",
    "end": "3113280"
  },
  {
    "text": "For each possible way\nof cutting w into x, y, and for each\npossible rule, R goes",
    "start": "3113280",
    "end": "3119190"
  },
  {
    "text": "to ST, I'm going to see,\nrecursively, can I get",
    "start": "3119190",
    "end": "3124430"
  },
  {
    "text": "from S to x, and from T to y. So I'm going to use\nmy recursion now.",
    "start": "3124430",
    "end": "3130460"
  },
  {
    "text": "Now that I have smaller\nstrings instead of w,",
    "start": "3130460",
    "end": "3137030"
  },
  {
    "text": "I can apply recursion and\ntry to answer it that way. And this algorithm will work.",
    "start": "3137030",
    "end": "3143980"
  },
  {
    "text": "If I found a way to cut w\ninto x, y, and I found a rule, R goes to ST such that S\ngenerates x and T generates y,",
    "start": "3143980",
    "end": "3153310"
  },
  {
    "text": "then I'm good. I know I can generate w from R.",
    "start": "3153310",
    "end": "3159849"
  },
  {
    "text": "And if there's no way of\ncutting w up to satisfy that, or if I can't find any\nway to divide w into x, y,",
    "start": "3159850",
    "end": "3171040"
  },
  {
    "text": "and a rule R goes\nto ST which makes this work, if all\npossible ways fail",
    "start": "3171040",
    "end": "3176110"
  },
  {
    "text": "then you can't get from R to w. ",
    "start": "3176110",
    "end": "3182230"
  },
  {
    "text": "And then you can decide the\noriginal A CFG problem now, by starting from\nthe start variable, instead of just\nany old R. You plug",
    "start": "3182230",
    "end": "3189175"
  },
  {
    "text": "in the start variable for R. So this algorithm works, and\nit can be used to solve A CFG.",
    "start": "3189175",
    "end": "3199680"
  },
  {
    "text": "But the question is,\nis it polynomial? And it's not.",
    "start": "3199680",
    "end": "3204890"
  },
  {
    "text": "Because every time you're\ndoing the recursion,",
    "start": "3204890",
    "end": "3210019"
  },
  {
    "text": "you're essentially adding\nanother factor of n. Because here, as we pointed\nout, this is a factor of n.",
    "start": "3210020",
    "end": "3216720"
  },
  {
    "text": "But that's happening every time\nyou're doing a recursive level. And you can imagine, I'm just\ndoing a very crude analysis",
    "start": "3216720",
    "end": "3223980"
  },
  {
    "text": "here, depending upon\nhow you divide w up. But roughly speaking,\nit's going to get divided in half each\ntime, so there's",
    "start": "3223980",
    "end": "3231119"
  },
  {
    "text": "going to be log n levels. So that means you're\ngoing to be multiplying n by itself log n\ntimes, or give you",
    "start": "3231120",
    "end": "3238620"
  },
  {
    "text": "an n to the log n algorithm. That's not polynomial,\nbecause polynomials",
    "start": "3238620",
    "end": "3244310"
  },
  {
    "text": "end with a constant,\nfor some fixed constant. n to the log n is not\ngoing to be polynomial.",
    "start": "3244310",
    "end": "3249829"
  },
  {
    "text": "This is not a\npolynomial algorithm. Instead, you're going to have to\ndo something just a little bit",
    "start": "3249830",
    "end": "3257370"
  },
  {
    "text": "more clever. It's going to be\nthe same basic idea,",
    "start": "3257370",
    "end": "3262700"
  },
  {
    "text": "but relying on one\nlittle observation. And the little\nobservation is that when--",
    "start": "3262700",
    "end": "3272410"
  },
  {
    "text": "this non-polynomial\nimplementation that I've just described\nis actually pretty dumb.",
    "start": "3272410",
    "end": "3280910"
  },
  {
    "text": "Because it's doing a lot\nof recomputation of things that it's already solved. Why is that?",
    "start": "3280910",
    "end": "3287769"
  },
  {
    "text": "Because if you\nlook at the number of possible different\nsubproblems here,",
    "start": "3287770",
    "end": "3296250"
  },
  {
    "text": "once I give you G\nand I give you w,",
    "start": "3296250",
    "end": "3302070"
  },
  {
    "text": "how many different subproblems\nof G, S, and T are there?",
    "start": "3302070",
    "end": "3308700"
  },
  {
    "text": " The number of strings\nhere, all of those strings",
    "start": "3308700",
    "end": "3315950"
  },
  {
    "text": "are going to be substrings of w. There's only roughly n\nsquared substrings of w.",
    "start": "3315950",
    "end": "3322490"
  },
  {
    "text": "I'm always going\nto be generating, in a subproblem here,\nsome substring of w from some starting\nvariable in the grammar.",
    "start": "3322490",
    "end": "3331359"
  },
  {
    "text": "So because there aren't that\nmany different substrings, and not that many different\nstarting variables,",
    "start": "3331360",
    "end": "3337000"
  },
  {
    "text": "the total number of\npossible problems that this algorithm is going\nto be called on to solve",
    "start": "3337000",
    "end": "3342130"
  },
  {
    "text": "is going to be, in total,\na polynomial number of different subproblems. There aren't very many of them. It's only something\nlike order of n squared.",
    "start": "3342130",
    "end": "3349840"
  },
  {
    "text": "So if the algorithm is running\nfor exponentially long time, it's solving the same\nsubproblem over and over again.",
    "start": "3349840",
    "end": "3357900"
  },
  {
    "text": "That's dumb. Why don't you just remember\nwhen you solve the subproblem,",
    "start": "3357900",
    "end": "3364000"
  },
  {
    "text": "so you don't solve it again?  Doing that enhanced\nrecursion where",
    "start": "3364000",
    "end": "3372560"
  },
  {
    "text": "you remember the problems\nyou've already solved, it's called dynamic programming. I don't know why it has such\na confusing name like that.",
    "start": "3372560",
    "end": "3382408"
  },
  {
    "text": "Actually it's called by\nseveral different things. But anyway, that's known\nas dynamic programming.",
    "start": "3382408",
    "end": "3388070"
  },
  {
    "text": "It's recursion plus the memory. And here is just\nrepeating myself.",
    "start": "3388070",
    "end": "3395809"
  },
  {
    "text": "There are not very many\ndifferent substrings, so every time in your\nrecursion somewhere,",
    "start": "3395810",
    "end": "3402957"
  },
  {
    "text": "you're going to be\nworking with a substring. So there's not that many\ndifferent subproblems that you can possibly solve.",
    "start": "3402957",
    "end": "3408170"
  },
  {
    "text": "And just remember when\nyou solve the subproblem, and not solve it again.",
    "start": "3408170",
    "end": "3413720"
  },
  {
    "text": "Let me just show you that\nalgorithm again here, with the little modification.",
    "start": "3413720",
    "end": "3419930"
  },
  {
    "text": "So first of all,\nlet me give you-- this is the same algorithm\nfrom the previous slide.",
    "start": "3419930",
    "end": "3425960"
  },
  {
    "text": "I'm just repeating it here\nwithout all the other stuff so we can look at it directly. Dividing it into x and y\nfor each possible rule.",
    "start": "3425960",
    "end": "3435260"
  },
  {
    "text": "And then recurse.  I'm going to add a little\nstep 0 beforehand, which",
    "start": "3435260",
    "end": "3446460"
  },
  {
    "text": "says, if I have G, w, and R,\nlet me just check first if I've",
    "start": "3446460",
    "end": "3452050"
  },
  {
    "text": "already solved that one before. So I have to keep track of\nthe ones I've already solved.",
    "start": "3452050",
    "end": "3457660"
  },
  {
    "text": "That's not too bad,\nbecause there's only order n squared possible\ndifferent ones that I",
    "start": "3457660",
    "end": "3462760"
  },
  {
    "text": "could be called on to solve. So I'm just going to\nhave a little table where I'm going to remember those.",
    "start": "3462760",
    "end": "3467860"
  },
  {
    "text": "And then every time I get a\nnew one, I get one to solve, I'll check. Is it on that table?",
    "start": "3467860",
    "end": "3472990"
  },
  {
    "text": "And what's the answer? So I won't have to rerun those. I'm going to be basically\npruning that tree so",
    "start": "3472990",
    "end": "3481720"
  },
  {
    "text": "that it has only a\npolynomial number of leaves. And so the total\nsize of that tree now is going to be polynomial.",
    "start": "3481720",
    "end": "3489770"
  },
  {
    "text": "And so that's going to yield\na polynomial running time. This, by the way,\nI only learned this myself, I'm sure you guys all\nknow this who have taken this",
    "start": "3489770",
    "end": "3496128"
  },
  {
    "text": "in the algorithms course,\nhas a special name called memoization. Not memorization.",
    "start": "3496128",
    "end": "3503029"
  },
  {
    "text": "Came from the same root,\nI think, but memoization, which is somehow remembering\nthe results of a computation",
    "start": "3503030",
    "end": "3509748"
  },
  {
    "text": "so you don't have to repeat it. ",
    "start": "3509748",
    "end": "3514833"
  },
  {
    "text": "The total number\nof calls is going to be, at most, n squared, to\nthis algorithm, because you're never going to be redoing\nwork that you've done already.",
    "start": "3514833",
    "end": "3524800"
  },
  {
    "text": "And when you actually have to go\nthrough it, the running time-- ",
    "start": "3524800",
    "end": "3536880"
  },
  {
    "text": "the total amount of time\nthat you're going to need is going to be\npolynomial altogether. ",
    "start": "3536880",
    "end": "3544609"
  },
  {
    "text": "I don't remember what\nmy check-in is on this. Oh yeah. This is somehow related.",
    "start": "3544610",
    "end": "3550500"
  },
  {
    "start": "3547000",
    "end": "3599000"
  },
  {
    "text": "And feel free to\nask questions too, while you're thinking\nabout this check-in.",
    "start": "3550500",
    "end": "3556109"
  },
  {
    "text": "But the check-in\nsays here, we've solved the A CFG problem\nin polynomial time.",
    "start": "3556110",
    "end": "3562859"
  },
  {
    "text": "Does that tell us that every\ncontext-free language itself",
    "start": "3562860",
    "end": "3568820"
  },
  {
    "text": "is also solvable\nin polynomial time? Just mull that over, and\nplease give me an answer to it.",
    "start": "3568820",
    "end": "3577238"
  },
  {
    "text": "I hope you do better\non this check-in than you did on the last one. But anyway, why don't you go\nahead and think about that.",
    "start": "3577238",
    "end": "3585759"
  },
  {
    "text": "I can take some questions\nin the meantime. ",
    "start": "3585760",
    "end": "3591890"
  },
  {
    "text": "Somebody is asking here--  actually, I'm getting\nseveral questions on this.",
    "start": "3591890",
    "end": "3599140"
  },
  {
    "text": "Why isn't it order n\ncubed or something greater than order n squared\nbecause of the variables?",
    "start": "3599140",
    "end": "3606860"
  },
  {
    "text": "The variables don't depend on n. When you're given-- well,\nactually that's not true.",
    "start": "3606860",
    "end": "3618260"
  },
  {
    "text": "No. You are right. ",
    "start": "3618260",
    "end": "3623870"
  },
  {
    "text": "Because the grammar\nis part of the input. So you might have as many\nas n different variables",
    "start": "3623870",
    "end": "3631440"
  },
  {
    "text": "in the given grammar. So you are right. There is potentially--\nthe grammar might",
    "start": "3631440",
    "end": "3640470"
  },
  {
    "text": "be half the size of the input,\nand the input to the grammar w might be half the\nsize of the input.",
    "start": "3640470",
    "end": "3645718"
  },
  {
    "text": "So I didn't think about\nthat, but you're correct. There are potentially\ndifferent numbers",
    "start": "3645718",
    "end": "3652290"
  },
  {
    "text": "of variables in\ndifferent grammars, so you have to add an\nextra factor, which would be at most the\nsize of the input,",
    "start": "3652290",
    "end": "3659010"
  },
  {
    "text": "because that's as many variables\nas you could possibly have. So it really should be, I think,\norder n cubed to take that",
    "start": "3659010",
    "end": "3668970"
  },
  {
    "text": "into account as well. Plus all of the work\nthat needs to happen in terms of dividing things up.",
    "start": "3668970",
    "end": "3674478"
  },
  {
    "text": "On a one-tape Turing\nmachine, there's going to be some extra\nwork just to carry out some of these individual steps,\nbecause with a single tape",
    "start": "3674478",
    "end": "3682380"
  },
  {
    "text": "things are sometimes\na little awkward. I think the total\nrunning time is going to end up being\nsomething like n to the 4th or into the 5th\non a one-tape Turing machine.",
    "start": "3682380",
    "end": "3689190"
  },
  {
    "text": " But that's a good point. ",
    "start": "3689190",
    "end": "3698070"
  },
  {
    "text": "Somebody's saying, how can we\nbe storing n squared strings in finite time? I'm not saying finite time.",
    "start": "3698070",
    "end": "3704160"
  },
  {
    "text": "We have polynomial time. Every stage of this\nalgorithm is allowed to run for polynomially\nmany steps.",
    "start": "3704160",
    "end": "3710430"
  },
  {
    "text": "As long as it's\nclearly polynomial, we can just write that\ndown as a single stage. ",
    "start": "3710430",
    "end": "3718910"
  },
  {
    "text": "Part two should say-- oh. There's a typo here.",
    "start": "3718910",
    "end": "3723920"
  },
  {
    "text": "So use D. Thank you. That is a typo. ",
    "start": "3723920",
    "end": "3734013"
  },
  {
    "text": "I'm afraid if I change it\non my original slide here, things will break in\nsome horrible way. Let's just see.",
    "start": "3734013",
    "end": "3739630"
  },
  {
    "text": "Did I completely wreck my slide? No, that's good. Yeah, thank you.",
    "start": "3739630",
    "end": "3745520"
  },
  {
    "text": "Good point. ",
    "start": "3745520",
    "end": "3753080"
  },
  {
    "text": "Oops. OK, how's our check-in doing?",
    "start": "3753080",
    "end": "3758840"
  },
  {
    "text": "I think you're just\nabout all done. Spent a lot of time on this.",
    "start": "3758840",
    "end": "3764030"
  },
  {
    "text": "End polling. ",
    "start": "3764030",
    "end": "3771460"
  },
  {
    "text": "As you may remember from the\nfirst half of the course-- so the answer is A, indeed.",
    "start": "3771460",
    "end": "3777640"
  },
  {
    "text": "Remember that we showed\nA CFG is decidable, and therefore each\ncontext-free language",
    "start": "3777640",
    "end": "3783910"
  },
  {
    "text": "itself is decidable,\njust because you can plug in a specific grammar\ninto the A CFG problem.",
    "start": "3783910",
    "end": "3791440"
  },
  {
    "text": "The very same\nreasoning works here. If you have a context-free\nlanguage, it has a grammar.",
    "start": "3791440",
    "end": "3799000"
  },
  {
    "text": "You can plug that grammar\ninto the A CFG problem. And then, that's\npolynomial time,",
    "start": "3799000",
    "end": "3804130"
  },
  {
    "text": "you're going to get\na polynomial time algorithm for that language.",
    "start": "3804130",
    "end": "3810700"
  },
  {
    "text": "Good to review that. It's the same thing, same\nargument we used before. ",
    "start": "3810700",
    "end": "3822327"
  },
  {
    "text": "I don't want to spend\na lot of time on this. There's another way of looking\nat dynamic programming. We'll talk about this again\nmaybe in a lecture, probably",
    "start": "3822327",
    "end": "3830600"
  },
  {
    "text": "next lecture, just because I you\nhave a homework problem on it. If you've seen dynamic\nprogramming before,",
    "start": "3830600",
    "end": "3837358"
  },
  {
    "text": "this is going to be easy. If you haven't seen it\nbefore, it's going to be, I think, probably a\nlittle challenging.",
    "start": "3837358",
    "end": "3842450"
  },
  {
    "text": " Another way of looking\nat dynamic programming",
    "start": "3842450",
    "end": "3848740"
  },
  {
    "text": "is the so-called bottom-up\nversion of dynamic programming. And what that would\nmean is, you solve",
    "start": "3848740",
    "end": "3854770"
  },
  {
    "text": "all of the subproblems first. You solve all the smaller\nsubproblems before you solve the larger subproblems.",
    "start": "3854770",
    "end": "3861100"
  },
  {
    "text": " It's here on the slide.",
    "start": "3861100",
    "end": "3866505"
  },
  {
    "text": "I'm not sure I want\nto talk it through. But basically, you solve\nthe subproblems here",
    "start": "3866505",
    "end": "3873880"
  },
  {
    "text": "where, start with\nstrings of length 1,",
    "start": "3873880",
    "end": "3879700"
  },
  {
    "text": "and then from that you\nbuild up to subproblems with the substrings are\nof length 2, and then 3,",
    "start": "3879700",
    "end": "3885610"
  },
  {
    "text": "and so on. And each of those only relies\non the smaller previously solved subproblems.",
    "start": "3885610",
    "end": "3891550"
  },
  {
    "text": "So you can, kind of\nin a systematic way, solve all the larger and\nlarger subproblems for larger",
    "start": "3891550",
    "end": "3899260"
  },
  {
    "text": "and larger substrings. That gives kind of a\ndifferent perspective",
    "start": "3899260",
    "end": "3904299"
  },
  {
    "text": "on dynamic programming. And for different\nproblems, sometimes it's better to think about either\nthis sort of top-down recursion",
    "start": "3904300",
    "end": "3911920"
  },
  {
    "text": "based process, or the\nbottom-up process that I'm describing here.",
    "start": "3911920",
    "end": "3918400"
  },
  {
    "text": "They're really\ncompletely equivalent. ",
    "start": "3918400",
    "end": "3923600"
  },
  {
    "text": "The version that's described\nfor this particular algorithm, which appears in the\ntextbook, is actually",
    "start": "3923600",
    "end": "3929600"
  },
  {
    "text": "the bottom-up algorithm. So you shouldn't be confused\nif you see something there which looks somewhat different.",
    "start": "3929600",
    "end": "3935760"
  },
  {
    "text": " You basically solve all\npossible subproblems,",
    "start": "3935760",
    "end": "3943460"
  },
  {
    "text": "basically filling out a table. Let me not say anything\nmore about that here,",
    "start": "3943460",
    "end": "3949849"
  },
  {
    "text": "since we're running a\nlittle short on time.  There are really\ntwo perspectives",
    "start": "3949850",
    "end": "3955880"
  },
  {
    "text": "on dynamic programming. So moving on from there,\nlet's shift gears.",
    "start": "3955880",
    "end": "3964210"
  },
  {
    "text": " Leave context-free languages\nand dynamic programming behind.",
    "start": "3964210",
    "end": "3972029"
  },
  {
    "text": "And so I'm moving toward\nunderstanding P and NP.",
    "start": "3972030",
    "end": "3978530"
  },
  {
    "text": "And for that, we will\nintroduce a new problem called",
    "start": "3978530",
    "end": "3983840"
  },
  {
    "text": "the satisfiability problem. And that's one we're going\nto spend a lot of time on.",
    "start": "3983840",
    "end": "3989780"
  },
  {
    "text": "If you tuned out a little bit\nduring the dynamic programming discussion, time to\nget back on board.",
    "start": "3989780",
    "end": "3997790"
  },
  {
    "text": " The satisfiability\nproblem is going",
    "start": "3997790",
    "end": "4004360"
  },
  {
    "text": "to be a computational\nproblem that we're",
    "start": "4004360",
    "end": "4010650"
  },
  {
    "text": "going to be working on. And it has to do\nwith Boolean formula. So these are expressions,\nlike arithmetical formula,",
    "start": "4010650",
    "end": "4018510"
  },
  {
    "text": "like x plus y times\nz, but instead of using numerical\nvariables, we're",
    "start": "4018510",
    "end": "4027210"
  },
  {
    "text": "going to be using Boolean\nvariables that take on Boolean values, true, false. Or sometimes\nrepresented by 1 and 0.",
    "start": "4027210",
    "end": "4034395"
  },
  {
    "text": " The operators that\nwe're going to be using",
    "start": "4034395",
    "end": "4040670"
  },
  {
    "text": "are going to be the and,\nor, and negation operations. And, or, not. ",
    "start": "4040670",
    "end": "4048590"
  },
  {
    "text": "I'm going to say such a\nformula, such a Boolean formula, we're going to call\nit satisfiable--",
    "start": "4048590",
    "end": "4054820"
  },
  {
    "text": "we'll do an example\nin a second-- if that formula value\nevaluates to true",
    "start": "4054820",
    "end": "4062440"
  },
  {
    "text": "if you make some assignment\nof values to its variables.",
    "start": "4062440",
    "end": "4067819"
  },
  {
    "text": "So just like arithmetical\nformula will have some value if you plug in values\nfor the variables,",
    "start": "4067820",
    "end": "4075970"
  },
  {
    "text": "Boolean formula is\ngoing to have some value if you plug in Boolean\nvalues for its variables.",
    "start": "4075970",
    "end": "4081130"
  },
  {
    "text": "And I want to know,\nis there some way to plug in values which makes\nthe whole thing evaluate to true.",
    "start": "4081130",
    "end": "4087070"
  },
  {
    "text": "The formula itself\nis going to evaluate to either true or false, and\nI wanted to evaluate to true.",
    "start": "4087070",
    "end": "4092380"
  },
  {
    "start": "4092380",
    "end": "4097839"
  },
  {
    "text": "Here is our example. Let's take the formula,\nphi, which is x or y,",
    "start": "4097840",
    "end": "4104939"
  },
  {
    "text": "and x complement-- or, not x or not y.",
    "start": "4104939",
    "end": "4110339"
  },
  {
    "text": "So the notation x with a\nbar over it, x complement, is just x bar, not x.",
    "start": "4110340",
    "end": "4119939"
  },
  {
    "text": "It's just the way\nif you're familiar with the other notation,\nthe not operation, which",
    "start": "4119939",
    "end": "4127140"
  },
  {
    "text": "just inverts 1s and 0s. ",
    "start": "4127140",
    "end": "4132330"
  },
  {
    "text": "We're going to write it with\na bar instead of the negation symbol. I'm assuming that you've\nall seen Boolean algebra,",
    "start": "4132330",
    "end": "4139229"
  },
  {
    "text": "Boolean arithmetic before,\nwhere the and operation is only",
    "start": "4139229",
    "end": "4144660"
  },
  {
    "text": "true if both inputs are true. These are going to be binary\nand operations and binary",
    "start": "4144660",
    "end": "4150060"
  },
  {
    "text": "or operations. Or is going to be true\nif either input is true. And not is true if its\nsingle input is false.",
    "start": "4150060",
    "end": "4159259"
  },
  {
    "text": "Oops, just looked at the answer. Here I want to know, for\nthis Boolean formula,",
    "start": "4159260",
    "end": "4165889"
  },
  {
    "text": "here is it satisfiable. Is there some way to assign\nvalues to the variables",
    "start": "4165890",
    "end": "4172710"
  },
  {
    "text": "to make this formula\nevaluate to true? So for example, let's\njust try things.",
    "start": "4172710",
    "end": "4179450"
  },
  {
    "text": "Let's make x and y both true. So x is true and y is true.",
    "start": "4179450",
    "end": "4184799"
  },
  {
    "text": "So x or y, well that's\ngood, that's true. But now we have to do an and, so\nwe need both sides to be true.",
    "start": "4184800",
    "end": "4192229"
  },
  {
    "text": "So now we have x complement--\nwell we said we said x is true, so x complement is false,\ny complement is false.",
    "start": "4192229",
    "end": "4198830"
  },
  {
    "text": "False or false is false. So now we have a true and false. That's going to be false.",
    "start": "4198830",
    "end": "4204780"
  },
  {
    "text": "We did not find a\nsatisfying assignment. But maybe there's another one. And in fact, there is. If you make x true and y\nfalse, then both of these parts",
    "start": "4204780",
    "end": "4213530"
  },
  {
    "text": "will evaluate to true, and\nthen you'll have true and true. So we found a satisfying\nassignment to this formula.",
    "start": "4213530",
    "end": "4219380"
  },
  {
    "text": "It is, in fact, satisfiable. So if you say x is\n1 and y is 0, yes.",
    "start": "4219380",
    "end": "4225469"
  },
  {
    "text": "This is satisfiable. Now the problem of testing\nfor a Boolean formula,",
    "start": "4225470",
    "end": "4231010"
  },
  {
    "text": "if it is satisfiable, is\ngoing to be the SAT language. It's a set. It's a collection of\nsatisfiable Boolean formula.",
    "start": "4231010",
    "end": "4239659"
  },
  {
    "text": "And testing whether\nyou're in SAT or not is going to be an important\ncomputational problem.",
    "start": "4239660",
    "end": "4246380"
  },
  {
    "text": " There was an amazing\ntheorem which",
    "start": "4246380",
    "end": "4256990"
  },
  {
    "text": "really got this\nwhole subject going, discovered independently by\nSteve Cook in North America",
    "start": "4256990",
    "end": "4265720"
  },
  {
    "text": "and Leonid Levin in the former\nSoviet Union, almost exactly at the same time, which made a\nconnection between this one",
    "start": "4265720",
    "end": "4274690"
  },
  {
    "text": "problem and all of\nthe problems in NP. By solving this one\nsatisfiability problem",
    "start": "4274690",
    "end": "4282580"
  },
  {
    "text": "in polynomial\ntime, it allows you",
    "start": "4282580",
    "end": "4288220"
  },
  {
    "text": "to solve all of the problems\nin NP in polynomial time. So if you could solve\nthis problem set in P,",
    "start": "4288220",
    "end": "4296239"
  },
  {
    "text": "then Hamiltonian path\nis also solvable in P.",
    "start": "4296240",
    "end": "4301800"
  },
  {
    "text": "If you step back and think about\nthat, it's kind of amazing. ",
    "start": "4301800",
    "end": "4306820"
  },
  {
    "text": "And the method that\nwe're going to introduce is called polynomial\ntime reducibility.",
    "start": "4306820",
    "end": "4312940"
  },
  {
    "text": "Let's do a quick\ncheck-in on this. This should be an easy one. Why don't you just think\nabout, is SAT, the SAT problem",
    "start": "4312940",
    "end": "4320530"
  },
  {
    "text": "that we just described\nhere, is that in NP? ",
    "start": "4320530",
    "end": "4326857"
  },
  {
    "text": "Three seconds.  You all there?",
    "start": "4326857",
    "end": "4332570"
  },
  {
    "text": "OK. Ending polling. ",
    "start": "4332570",
    "end": "4341240"
  },
  {
    "text": "Hopefully you're getting\nthe intuition for NP that these are the\nproblems-- to be in NP means",
    "start": "4341240",
    "end": "4348320"
  },
  {
    "text": "that when you're a\nmember of the language, there's a short proof or a\nshort certificate of membership.",
    "start": "4348320",
    "end": "4354320"
  },
  {
    "text": "And in this case,\nthe short certificate that the formula is\nsatisfiable is the assignment,",
    "start": "4354320",
    "end": "4359340"
  },
  {
    "text": "which makes it true, also called\nthe satisfying assignment. So yes, this is an NP language,\nlanguage that's in NP.",
    "start": "4359340",
    "end": "4367135"
  },
  {
    "text": " There are a lot of things that\nwe don't know in the subject,",
    "start": "4367135",
    "end": "4374050"
  },
  {
    "text": "but this isn't one of them. We do know that SAT is in NP.",
    "start": "4374050",
    "end": "4379060"
  },
  {
    "text": "So let's talk about\nour method for showing this remarkable\nfact that, if you",
    "start": "4379060",
    "end": "4392150"
  },
  {
    "text": "can solve SAT in polynomial\ntime, then all of NP is solvable in polynomial time.",
    "start": "4392150",
    "end": "4397430"
  },
  {
    "text": "And it uses this notion of\npolynomial time reducibility, which is just like\nmapping reducibility",
    "start": "4397430",
    "end": "4403940"
  },
  {
    "text": "that I hope you've all\ngrown to know and love in the first half of the course. But now, the reduction has to\noperate in polynomial time.",
    "start": "4403940",
    "end": "4413000"
  },
  {
    "text": "So it's the same picture that\nwe had before, mapping A to B,",
    "start": "4413000",
    "end": "4418130"
  },
  {
    "text": "transforming A questions\nto B questions. But now the transformation\nhas to operate quickly.",
    "start": "4418130",
    "end": "4424200"
  },
  {
    "text": "And we get that if A is\npolynomial time reducible to B,",
    "start": "4424200",
    "end": "4429530"
  },
  {
    "text": "and B is polynomial time, then\nA is also polynomial time. Same pattern as before.",
    "start": "4429530",
    "end": "4435740"
  },
  {
    "text": "If A is reducible to B and\nB is easy, then A is easy.",
    "start": "4435740",
    "end": "4441320"
  },
  {
    "text": "Here is kind of the\nessence of the idea, or at least the outline of the\nidea of this Cook and Levin",
    "start": "4441320",
    "end": "4451280"
  },
  {
    "text": "theorem. That if satisfiable is in\nP, then everything in NP can be done in P. Which\nis because, we will",
    "start": "4451280",
    "end": "4458480"
  },
  {
    "text": "show that all problems\nin NP are polynomial time reducible to SAT.",
    "start": "4458480",
    "end": "4466640"
  },
  {
    "text": "That's the amazing fact. So therefore, if you\ncan bring SAT down",
    "start": "4466640",
    "end": "4471830"
  },
  {
    "text": "into P by using this reduction,\nit brings everything else along with it, everything\nis reducible to SAT.",
    "start": "4471830",
    "end": "4478670"
  },
  {
    "text": "So we just have to\nshow how to do that. There is an analogy that\nwe had in the first half",
    "start": "4478670",
    "end": "4484280"
  },
  {
    "text": "of the course, in one of\nour homework problems, if you may remember. We showed that A TM has\nthe very special property",
    "start": "4484280",
    "end": "4493640"
  },
  {
    "text": "that all Turing\nrecognizable languages are mapping reducible to it.",
    "start": "4493640",
    "end": "4499390"
  },
  {
    "text": "I think that was problem 2,\nor 2a, either in problem set 3",
    "start": "4499390",
    "end": "4507660"
  },
  {
    "text": "or problem set 2. I think problem set 3. That every Turing\nrecognizable language",
    "start": "4507660",
    "end": "4515070"
  },
  {
    "text": "is polynomial time\nreducible to A TM. And so, very similar picture.",
    "start": "4515070",
    "end": "4520440"
  },
  {
    "text": "And there's a lot\nof analogies here that you can draw between\nthe computability section",
    "start": "4520440",
    "end": "4526920"
  },
  {
    "text": "and the complexity section. With that, I know we're\njust about out of time.",
    "start": "4526920",
    "end": "4532330"
  },
  {
    "text": "So let's just quick review\nof what we've done here.",
    "start": "4532330",
    "end": "4538740"
  },
  {
    "text": "I will stick around for\nquestions for a while. Is there a--",
    "start": "4538740",
    "end": "4545495"
  },
  {
    "text": "OK, that's a good question. Is there a regular\nreduction analogy version",
    "start": "4545495",
    "end": "4552500"
  },
  {
    "text": "to mapping reducibility? We had the general reduction\nfor the computability section.",
    "start": "4552500",
    "end": "4560550"
  },
  {
    "text": "And we had the mapping reduction\nfor the computability section. Here, we're only going\nto be focusing now",
    "start": "4560550",
    "end": "4566910"
  },
  {
    "text": "on the mapping reduction. So polynomial time\nreduction is, by assumption,",
    "start": "4566910",
    "end": "4572220"
  },
  {
    "text": "going to be a mapping reduction. Yes, there is a general\npolynomial time reduction",
    "start": "4572220",
    "end": "4578460"
  },
  {
    "text": "notion as well.  This is not required,\nbut if you are",
    "start": "4578460",
    "end": "4584650"
  },
  {
    "text": "curious about the\ngeneral reduction and how to precisely\nformulate that, it actually appears in chapter\n6 under Turing reducibility.",
    "start": "4584650",
    "end": "4594849"
  },
  {
    "text": "That's the general notion\nof reducibility spelled out in a formal way. And there's polynomial time\nTuring reducibility as well.",
    "start": "4594850",
    "end": "4602179"
  },
  {
    "text": "We're not going to talk\nabout it in this course. ",
    "start": "4602180",
    "end": "4609440"
  },
  {
    "text": "Other questions? Does NP correspond\nexactly to verification",
    "start": "4609440",
    "end": "4616719"
  },
  {
    "text": "in polynomial time? For me to answer that\nas a precise question,",
    "start": "4616720",
    "end": "4622120"
  },
  {
    "text": "we have to have a precise\ndefinition of verification. But with the right\ndefinition, the answer is yes.",
    "start": "4622120",
    "end": "4631420"
  },
  {
    "text": "So you can define a verifier\nas a polynomial time algorithm",
    "start": "4631420",
    "end": "4637690"
  },
  {
    "text": "that gives a\ncertificate, that takes a certificate and an\ninput to the language,",
    "start": "4637690",
    "end": "4643150"
  },
  {
    "text": "and will accept if\nthat certificate is",
    "start": "4643150",
    "end": "4650890"
  },
  {
    "text": "a valid certificate\nfor that input. This is actually\ndiscussed in chapter,",
    "start": "4650890",
    "end": "4656050"
  },
  {
    "text": "I think, 9 of the text. ",
    "start": "4656050",
    "end": "4667950"
  },
  {
    "text": "Now I'm forgetting already,\nwhat's where in the book. But yeah, you can think of\nNP in terms of verification",
    "start": "4667950",
    "end": "4674400"
  },
  {
    "text": "as the definition. ",
    "start": "4674400",
    "end": "4679840"
  },
  {
    "text": "Is proving P equal NP the same\nas proving that a polynom-- actually, I can even make the--",
    "start": "4679840",
    "end": "4686500"
  },
  {
    "text": "if you want, you can\npost public comments too.",
    "start": "4686500",
    "end": "4691830"
  },
  {
    "text": "I should have done\nthat in other cases. Is proving P equal NP\nthe same as proving that a polynomial\ntime non-deterministic",
    "start": "4691830",
    "end": "4699100"
  },
  {
    "text": "Turing machine N has a\npolynomial time deterministic? ",
    "start": "4699100",
    "end": "4706115"
  },
  {
    "text": "Yeah.  Suppose we prove that P equals\nNP, which is the minority view,",
    "start": "4706115",
    "end": "4716430"
  },
  {
    "text": "I would say, the\nsmall minority view. There are some\npeople who believe",
    "start": "4716430",
    "end": "4722070"
  },
  {
    "text": "that that is entirely possible,\nand might even be the case. But that's a very small group.",
    "start": "4722070",
    "end": "4730020"
  },
  {
    "text": "But yeah, if you\nprove P equal NP, that's the same as saying\nthat every non-deterministic",
    "start": "4730020",
    "end": "4735960"
  },
  {
    "text": "polynomial time Turing\nmachine is going to have a companion\ndeterministic polynomial",
    "start": "4735960",
    "end": "4742350"
  },
  {
    "text": "time Turing machine which\ndoes the same language. That's exactly what it means.",
    "start": "4742350",
    "end": "4747530"
  },
  {
    "text": "Bye bye, everybody. ",
    "start": "4747530",
    "end": "4762297"
  }
]