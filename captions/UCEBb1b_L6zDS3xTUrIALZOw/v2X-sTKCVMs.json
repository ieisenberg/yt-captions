[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "Consider this 2-way set associative cache\nto be used with our beta processor.",
    "start": "530",
    "end": "6260"
  },
  {
    "text": "Each line holds a single 32 bit data word\ntogether with a valid bit and a tag.",
    "start": "6260",
    "end": "14530"
  },
  {
    "start": "14000",
    "end": "14000"
  },
  {
    "text": "Our beta uses 32 bit addresses.",
    "start": "14530",
    "end": "17590"
  },
  {
    "text": "We want to determine which address bits should\nbe used for the cache index and which should",
    "start": "17590",
    "end": "22810"
  },
  {
    "text": "be used for the tag so as to ensure best cache\nperformance.",
    "start": "22810",
    "end": "28420"
  },
  {
    "text": "The bottom two bits of the address are always\nassumed to be 00 for word alignment since",
    "start": "28420",
    "end": "34089"
  },
  {
    "text": "are addresses are in bytes but our data is\nin words of 32 bits or 4 bytes.",
    "start": "34089",
    "end": "41089"
  },
  {
    "text": "Our cache has 8 lines in it, so this means\nthat our index must be 3 bits wide.",
    "start": "41089",
    "end": "47499"
  },
  {
    "text": "The bits that we want to use for the index\nare the next least significant bits which",
    "start": "47499",
    "end": "51989"
  },
  {
    "text": "are address bits [4:2].",
    "start": "51989",
    "end": "55260"
  },
  {
    "text": "The reason that we want to make these bits\nbe part of the index instead of the tag is",
    "start": "55260",
    "end": "60329"
  },
  {
    "text": "because of locality.",
    "start": "60329",
    "end": "62309"
  },
  {
    "text": "The idea is that instructions or data that\nare near each other in memory are more likely",
    "start": "62309",
    "end": "67930"
  },
  {
    "text": "to be accessed around the same time than instructions\nor data that reside in a different part of",
    "start": "67930",
    "end": "74500"
  },
  {
    "text": "memory.",
    "start": "74500",
    "end": "75500"
  },
  {
    "text": "So if for example, our instruction comes from\naddress 0x1000, it is fairly likely that we",
    "start": "75500",
    "end": "81980"
  },
  {
    "text": "will also access the next instruction which\nis at address 0x1004.",
    "start": "81980",
    "end": "88640"
  },
  {
    "text": "With this scheme the index of the first instruction\nwould map to line 0 of the cache while the",
    "start": "88640",
    "end": "94850"
  },
  {
    "text": "next instruction would map to line 1 of the\ncache so they would not cause a collision",
    "start": "94850",
    "end": "100380"
  },
  {
    "text": "or a miss in the cache.",
    "start": "100380",
    "end": "103590"
  },
  {
    "text": "This leaves the higher order bits for the\ntag.",
    "start": "103590",
    "end": "106990"
  },
  {
    "text": "We need to use all of the remaining bits for\nthe tag in order to be able to uniquely identify",
    "start": "106990",
    "end": "112789"
  },
  {
    "text": "each distinct address.",
    "start": "112789",
    "end": "115240"
  },
  {
    "text": "Since many addresses will map to the same\nline in the cache, we must compare the tag",
    "start": "115240",
    "end": "120460"
  },
  {
    "text": "of the data in the cache to see if we have\nin fact found the data that we are looking",
    "start": "120460",
    "end": "125390"
  },
  {
    "text": "for.",
    "start": "125390",
    "end": "126650"
  },
  {
    "text": "So we use address bits [31:5] for the tag.",
    "start": "126650",
    "end": "132590"
  },
  {
    "start": "132000",
    "end": "132000"
  },
  {
    "text": "Suppose our beta executes a read of address\n0x5678.",
    "start": "132590",
    "end": "138470"
  },
  {
    "text": "We would like to identify which locations\nin the cache will need to be checked to determine",
    "start": "138470",
    "end": "143620"
  },
  {
    "text": "if our data is already present in the cache\nor not.",
    "start": "143620",
    "end": "147860"
  },
  {
    "text": "In order to determine this, we need to identify\nthe portion of the address that corresponds",
    "start": "147860",
    "end": "153210"
  },
  {
    "text": "to the index.",
    "start": "153210",
    "end": "154959"
  },
  {
    "text": "The index bits are bits [4:2] which correspond\nto 110 in binary for this address.",
    "start": "154959",
    "end": "163769"
  },
  {
    "text": "That means that this address would map to\ncache line 6 in our cache.",
    "start": "163769",
    "end": "169060"
  },
  {
    "text": "Since this is a 2-way set associative cache,\nthere are two possible locations that our",
    "start": "169060",
    "end": "174040"
  },
  {
    "text": "data could be located, either in 6A or 6B.",
    "start": "174040",
    "end": "179980"
  },
  {
    "text": "So we would need to compare both tags to determine\nwhether or not the data we are trying to read",
    "start": "179980",
    "end": "186239"
  },
  {
    "text": "is already in the cache.",
    "start": "186239",
    "end": "192439"
  },
  {
    "start": "190000",
    "end": "190000"
  },
  {
    "text": "Assuming that checking the cache on a read\ntakes 1 cycle, and that refilling the cache",
    "start": "192439",
    "end": "197549"
  },
  {
    "text": "on a miss takes an additional 8 cycles,\nthis means that the time it takes on a miss",
    "start": "197549",
    "end": "203379"
  },
  {
    "text": "is 9 cycles, 1 to first check if the value\nis in the cache, plus another 8 to bring the",
    "start": "203379",
    "end": "209439"
  },
  {
    "text": "value into the cache if it wasn't already\nthere.",
    "start": "209439",
    "end": "213549"
  },
  {
    "text": "Now suppose that we want to achieve an average\nread access time of 1.1 cycles.",
    "start": "213549",
    "end": "220450"
  },
  {
    "text": "What is the minimum hit ratio required to\nachieve this average access time over many",
    "start": "220450",
    "end": "226080"
  },
  {
    "text": "reads?",
    "start": "226080",
    "end": "227680"
  },
  {
    "text": "We know that average access time = (hit time\n* hit rate) + (miss time * miss rate).",
    "start": "227680",
    "end": "235650"
  },
  {
    "text": "If we call 'a' our hit rate, then our miss\nrate is (1-a).",
    "start": "235650",
    "end": "241500"
  },
  {
    "text": "So our desired average access time of 1.1\nmust equal 1 * a plus 9 * (1-a).",
    "start": "241500",
    "end": "251330"
  },
  {
    "text": "This reduces to 1.1 = 9-8a, which means that\n8a = 7.9 or a = 7.9/8.",
    "start": "251330",
    "end": "262670"
  },
  {
    "text": "So to achieve a 1.1 cycle average access time\nour hit rate must be at least 7.9/8.",
    "start": "262670",
    "end": "273990"
  },
  {
    "start": "273000",
    "end": "273000"
  },
  {
    "text": "We are provided with this benchmark program\nfor testing our 2-way set associative cache.",
    "start": "273990",
    "end": "280030"
  },
  {
    "text": "The cache is initially empty before execution\nbegins.",
    "start": "280030",
    "end": "284090"
  },
  {
    "text": "In other words, all the valid bits of the\ncache are 0.",
    "start": "284090",
    "end": "289240"
  },
  {
    "text": "Assuming that an LRU, or least recently used,\nreplacement strategy is used, we would like",
    "start": "289240",
    "end": "295210"
  },
  {
    "text": "to determine the approximate cache hit ratio\nfor this program.",
    "start": "295210",
    "end": "301210"
  },
  {
    "text": "Let's begin by understanding what this benchmark\ndoes.",
    "start": "301210",
    "end": "305330"
  },
  {
    "text": "The program begins at address 0.",
    "start": "305330",
    "end": "307430"
  },
  {
    "text": "It first performs some initialization of registers\nusing three CMOVE operations.",
    "start": "307430",
    "end": "314370"
  },
  {
    "text": "The first, initializes R0 to hold source which\nis the address in memory where our data will",
    "start": "314370",
    "end": "320500"
  },
  {
    "text": "be stored.",
    "start": "320500",
    "end": "322440"
  },
  {
    "text": "The second initializes R1 to 0, and the third\ninitializes R2 to 0x1000 which is the number",
    "start": "322440",
    "end": "331380"
  },
  {
    "text": "of words that this benchmark will work with.",
    "start": "331380",
    "end": "335150"
  },
  {
    "text": "We then enter the loop which is shown in the\nyellow rectangle.",
    "start": "335150",
    "end": "339070"
  },
  {
    "text": "The loop loads the first element of our data\nfrom location source + 0 into register R3.",
    "start": "339070",
    "end": "347140"
  },
  {
    "text": "It then increments R0 to point to the next\npiece of data.",
    "start": "347140",
    "end": "351759"
  },
  {
    "text": "Since our data is 32 bits wide, this requires\nthe addition of the constant 4 representing",
    "start": "351759",
    "end": "357970"
  },
  {
    "text": "the number of bytes between consecutive data\nwords.",
    "start": "357970",
    "end": "361479"
  },
  {
    "text": "It then takes the value that was just loaded\nand adds it to R1 which holds a running sum",
    "start": "361479",
    "end": "367740"
  },
  {
    "text": "of all the data seen so far.",
    "start": "367740",
    "end": "370750"
  },
  {
    "text": "R2 is then decremented by 1 to indicate that\nwe have one fewer piece of data to handle.",
    "start": "370750",
    "end": "378240"
  },
  {
    "text": "Finally, as long as R2 is not equal to 0 it\nrepeats the loop.",
    "start": "378240",
    "end": "385630"
  },
  {
    "text": "At the very end of the benchmark the final\nsum is stored at address source, and the program",
    "start": "385630",
    "end": "391710"
  },
  {
    "text": "halts.",
    "start": "391710",
    "end": "394250"
  },
  {
    "text": "When trying to determine the approximate hit\nratio, the instructions that occur only once",
    "start": "394250",
    "end": "399480"
  },
  {
    "text": "because they live outside of the loop can\nbasically be ignored.",
    "start": "399480",
    "end": "405520"
  },
  {
    "text": "So looking only at what happens over and over\nagain in the loop, each time through the loop,",
    "start": "405520",
    "end": "411060"
  },
  {
    "text": "we have 5 instruction fetches and one data\nfetch.",
    "start": "411060",
    "end": "415410"
  },
  {
    "text": "The first time through the loop, we miss on\nthe instruction fetches and then bring them",
    "start": "415410",
    "end": "419840"
  },
  {
    "text": "into the cache.",
    "start": "419840",
    "end": "421750"
  },
  {
    "text": "We also miss on the data load from address\n0x100.",
    "start": "421750",
    "end": "424970"
  },
  {
    "text": "When this data is brought into the cache,\ninstead of replacing the recently loaded instructions,",
    "start": "424970",
    "end": "431900"
  },
  {
    "text": "it loads the data into the 2nd set of the\ncache.",
    "start": "431900",
    "end": "436400"
  },
  {
    "text": "The loop is then repeated.",
    "start": "436400",
    "end": "438340"
  },
  {
    "text": "This time through the loop, all the instruction\nfetches result in hits.",
    "start": "438340",
    "end": "442539"
  },
  {
    "text": "However, the data that we now need is a new\npiece of data so that will result in a cache",
    "start": "442539",
    "end": "448319"
  },
  {
    "text": "miss and once again load the new data word\ninto the 2nd set of the cache.",
    "start": "448319",
    "end": "454949"
  },
  {
    "text": "This behavior then repeats itself every time\nthrough the loop.",
    "start": "454949",
    "end": "459160"
  },
  {
    "text": "Since the loop is executed many times, we\ncan also ignore the initial instruction fetches",
    "start": "459160",
    "end": "464340"
  },
  {
    "text": "on the first iteration of the loop.",
    "start": "464340",
    "end": "467300"
  },
  {
    "text": "So in steady state, we get 5 instruction cache\nhits, and 1 data cache miss every time through",
    "start": "467300",
    "end": "474228"
  },
  {
    "text": "the loop.",
    "start": "474229",
    "end": "476680"
  },
  {
    "text": "This means that our approximate hit ratio\nis 5/6.",
    "start": "476680",
    "end": "484740"
  },
  {
    "start": "483000",
    "end": "483000"
  },
  {
    "text": "The last question we want to consider is what\nis stored in the cache after execution of",
    "start": "484740",
    "end": "489870"
  },
  {
    "text": "this benchmark is completed.",
    "start": "489870",
    "end": "492800"
  },
  {
    "text": "As we saw earlier, because we have a 2-way\nset associative cache, the instructions and",
    "start": "492800",
    "end": "498330"
  },
  {
    "text": "data don't conflict with each other because\nthey can each go in a separate set.",
    "start": "498330",
    "end": "504039"
  },
  {
    "text": "We want to determine which instruction and\nwhich piece of data will end up in line 4",
    "start": "504039",
    "end": "508750"
  },
  {
    "text": "of the cache after execution is completed.",
    "start": "508750",
    "end": "513349"
  },
  {
    "start": "513000",
    "end": "513000"
  },
  {
    "text": "We'll begin by identifying the mapping of\ninstructions to cache lines.",
    "start": "513350",
    "end": "518589"
  },
  {
    "text": "Since our program begins at address 0, the\nfirst CMOVE instruction is at address 0, and",
    "start": "518590",
    "end": "524830"
  },
  {
    "text": "it's index is equal to 0b000, or 0 in binary.",
    "start": "524830",
    "end": "532290"
  },
  {
    "text": "This means that it will map to cache line\n0.",
    "start": "532290",
    "end": "535540"
  },
  {
    "text": "Since at this point, nothing is in the cache,\nit will be loaded into line 0 of set A.",
    "start": "535540",
    "end": "541750"
  },
  {
    "text": "In a similar manner the next 2 CMOVE instructions\nand the LD instruction will be loaded into",
    "start": "541750",
    "end": "547900"
  },
  {
    "text": "lines 1-3 of set A.\nAt this point, we begin loading data.",
    "start": "547900",
    "end": "554320"
  },
  {
    "text": "Since the cache is 2-way set associative,\nthe data will be loaded into set B instead",
    "start": "554320",
    "end": "559480"
  },
  {
    "text": "of removing the instructions that were loaded\ninto set A.",
    "start": "559480",
    "end": "563790"
  },
  {
    "text": "The instructions that are outside the loop\nwill end up getting taken out of set A in",
    "start": "563790",
    "end": "568600"
  },
  {
    "text": "favor of loading a data item into those cache\nlocations, but the instructions that make",
    "start": "568600",
    "end": "574060"
  },
  {
    "text": "up the loop will not be displaced because\nevery time something maps to cache lines 3-7,",
    "start": "574060",
    "end": "580880"
  },
  {
    "text": "the least recently used location will correspond\nto a data value not to the instructions which",
    "start": "580880",
    "end": "586690"
  },
  {
    "text": "are used over and over again.",
    "start": "586690",
    "end": "589660"
  },
  {
    "text": "This means that at the end of execution of\nthe benchmark, the instruction that will be",
    "start": "589660",
    "end": "593959"
  },
  {
    "text": "in line 4 of the cache is the ADDC instruction\nfrom address 0x10 of the program.",
    "start": "593960",
    "end": "604110"
  },
  {
    "text": "The loop instructions which will remain in\nthe cache are shown here.",
    "start": "604110",
    "end": "609450"
  },
  {
    "text": "Now let's consider what happens to the data\nused in this benchmark.",
    "start": "609450",
    "end": "613500"
  },
  {
    "text": "We expect the loop instructions to remain\nin lines 3-7 of set A of the cache.",
    "start": "613500",
    "end": "619410"
  },
  {
    "text": "The data will use all of set B plus locations\n0-2 of set A as needed.",
    "start": "619410",
    "end": "626459"
  },
  {
    "start": "626000",
    "end": "626000"
  },
  {
    "text": "The data begins at address 0x100.",
    "start": "626460",
    "end": "629230"
  },
  {
    "text": "The index portion of address 0x100 is 0b000\nso this data element maps to cache line 0.",
    "start": "629230",
    "end": "641940"
  },
  {
    "text": "Since the least recently used set for line\n0 is set B, it will go into set B leaving",
    "start": "641940",
    "end": "648080"
  },
  {
    "text": "the instructions in tact in set A.\nThe next data element is at address 0x104.",
    "start": "648080",
    "end": "657000"
  },
  {
    "text": "Since the bottom two bits are used for word\nalignment, the index portion of this address",
    "start": "657000",
    "end": "662510"
  },
  {
    "text": "is 0b001, so this data element maps to line\n1 of set B, and so on through element 0x7.",
    "start": "662510",
    "end": "674350"
  },
  {
    "text": "Data element 0x8 is at address 0x120.",
    "start": "674350",
    "end": "680139"
  },
  {
    "text": "The index portion of this address is once\nagain 0b000.",
    "start": "680140",
    "end": "685710"
  },
  {
    "text": "So this element maps to cache line 0 just\nlike element 0x0 did.",
    "start": "685710",
    "end": "692190"
  },
  {
    "text": "However, at this point line 0 of set B was\naccessed more recently than line 0 of set",
    "start": "692190",
    "end": "698930"
  },
  {
    "text": "A, so the CMOVE instruction which is executed\nonly once will get replaced by a data element",
    "start": "698930",
    "end": "706310"
  },
  {
    "text": "that maps to line 0.",
    "start": "706310",
    "end": "709770"
  },
  {
    "text": "As we mentioned earlier, all the instructions\nin the loop will not be displaced because",
    "start": "709770",
    "end": "714890"
  },
  {
    "text": "they are accessed over and over again so they\nnever end up being the least recently used",
    "start": "714890",
    "end": "720570"
  },
  {
    "text": "item in a cache line.",
    "start": "720570",
    "end": "723850"
  },
  {
    "text": "After executing the loop 16 times meaning\nthat data elements 0 through 0xF have been",
    "start": "723850",
    "end": "731319"
  },
  {
    "text": "accessed, the cache will look like this.",
    "start": "731320",
    "end": "734290"
  },
  {
    "text": "Note that the loop instructions continue in\ntheir original location in the cache.",
    "start": "734290",
    "end": "739699"
  },
  {
    "text": "The state of the cache continues to look like\nthis with more recently accessed data elements",
    "start": "739700",
    "end": "745330"
  },
  {
    "text": "replacing the earlier data elements.",
    "start": "745330",
    "end": "748580"
  },
  {
    "text": "Since there are 0x1000 elements of data, this\ncontinues until just before address 0x4100.",
    "start": "748580",
    "end": "756790"
  },
  {
    "text": "The last element is actually located 1 word\nbefore that at address 0x40FC.",
    "start": "756790",
    "end": "766959"
  },
  {
    "text": "The last 8 elements of the data and their\nmapping to cache lines is shown here.",
    "start": "766960",
    "end": "773130"
  },
  {
    "text": "The data element that ends up in line 4 of\nthe cache, when the benchmark is done executing,",
    "start": "773130",
    "end": "779230"
  },
  {
    "text": "is element 0x0FFC of the data which comes\nfrom address 0x40F0.",
    "start": "779230",
    "end": "789680"
  }
]