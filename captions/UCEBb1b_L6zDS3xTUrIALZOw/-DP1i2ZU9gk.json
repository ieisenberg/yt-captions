[
  {
    "start": "0",
    "end": "90000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "7029"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "7030",
    "end": "13990"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13990",
    "end": "30420"
  },
  {
    "text": "PROFESSOR: All right everyone. Let's get started. So today's lecture and\nWednesday's lecture,",
    "start": "30420",
    "end": "37940"
  },
  {
    "text": "we're going to talk\nabout this thing called object oriented programming. And if you haven't\nprogrammed before,",
    "start": "37940",
    "end": "43220"
  },
  {
    "text": "I think this is a fairly\ntough concept to grasp. But hopefully with\nmany, many examples",
    "start": "43220",
    "end": "49730"
  },
  {
    "text": "and just by looking at the\ncode available from lectures,",
    "start": "49730",
    "end": "55520"
  },
  {
    "text": "you'll hopefully get\nthe hang of it quickly. So let's talk a little\nbit about objects.",
    "start": "55520",
    "end": "62770"
  },
  {
    "text": "And we've seen objects\nin Python so far. Objects are basically\ndata in Python.",
    "start": "62770",
    "end": "69159"
  },
  {
    "text": "So every object that we've\nseen has a certain type. OK, that we know.",
    "start": "69160",
    "end": "74185"
  },
  {
    "text": "Behind the scenes,\nthough, every object has these two additional things. One is some data representation.",
    "start": "74185",
    "end": "80280"
  },
  {
    "text": "So how Python represents the\nobject just behind the scenes",
    "start": "80280",
    "end": "86049"
  },
  {
    "text": "and what are different\nways that you can interact with the object. So for example, every one of\nthese is a different object.",
    "start": "86050",
    "end": "95370"
  },
  {
    "start": "90000",
    "end": "155000"
  },
  {
    "text": "For example, this\nis the number 1,234. It's a specific object\nthat is of type integer.",
    "start": "95370",
    "end": "102120"
  },
  {
    "text": "The number 5 is a different\nobject that's of type integer and so on. We've seen floats.",
    "start": "102120",
    "end": "107880"
  },
  {
    "text": "We've seen strings. We've seen lists. Lists and dictionaries are\nmore complicated objects.",
    "start": "107880",
    "end": "114580"
  },
  {
    "text": "Object types. Sorry. But every object has a\ntype, some sort of way that it's represented\nin Python and some ways",
    "start": "114580",
    "end": "123169"
  },
  {
    "text": "that we can interact with them.  OK. So the idea behind object\noriented programming",
    "start": "123169",
    "end": "130190"
  },
  {
    "text": "is, first of all, everything\nin Python is an object. We've said that before\nand in this lecture",
    "start": "130190",
    "end": "135660"
  },
  {
    "text": "I think we'll really\nget at what that means. So we've seen strings,\nintegers, dictionaries, lists.",
    "start": "135660",
    "end": "141320"
  },
  {
    "text": "Those are all objects. When we did functions,\nwe saw that we could pass as a parameter\nanother function.",
    "start": "141320",
    "end": "147620"
  },
  {
    "text": "So functions were also\nobjects in Python. So literally everything\nin Python is an object.",
    "start": "147620",
    "end": "153519"
  },
  {
    "text": "So what are the kinds of\nthings we can do with objects? Well, once you have a type,\nyou can create a new object",
    "start": "153519",
    "end": "159230"
  },
  {
    "start": "155000",
    "end": "260000"
  },
  {
    "text": "that is of some type. And you can create\nas many objects as you'd like of that\nparticular type, right?",
    "start": "159230",
    "end": "164870"
  },
  {
    "text": "An integer 5 and integer 7. Those all work in a program.",
    "start": "164870",
    "end": "170150"
  },
  {
    "text": "Once you've created\nthese new objects, you can manipulate them. So for a list, for example,\nyou can append an item",
    "start": "170150",
    "end": "176569"
  },
  {
    "text": "to the end of the list,\nyou can delete an item, remove it, concatenate\ntwo lists together.",
    "start": "176570",
    "end": "183980"
  },
  {
    "text": "So that's ways that you\ncan interact with objects. And the last thing you can\ndo is you can destroy them.",
    "start": "183980",
    "end": "189269"
  },
  {
    "text": "So and with lists,\nwe saw explicitly that you can delete\nelements from a list, or you can just\nforget about them",
    "start": "189270",
    "end": "195349"
  },
  {
    "text": "by reassigning a variable\nto another value, and then at some\npoint, Python will",
    "start": "195350",
    "end": "201920"
  },
  {
    "text": "collect all of these dead\nobjects and reclaim the memory. ",
    "start": "201920",
    "end": "207810"
  },
  {
    "text": "So let's continue\nexploring what objects are. So let's say I have these\ntwo separate objects.",
    "start": "207810",
    "end": "214319"
  },
  {
    "text": "One is a blue car. One is a pink car. So objects are really\ndata abstractions.",
    "start": "214320",
    "end": "219739"
  },
  {
    "text": "So these two cars can be\ncreated by the same blueprint. OK? This is a blueprint for a car\nand if an object is a data",
    "start": "219740",
    "end": "227400"
  },
  {
    "text": "abstraction, there's two\nthings that this abstraction is going to capture. The first is some sort\nof representation.",
    "start": "227400",
    "end": "234200"
  },
  {
    "text": "What is going to represent the\ncar, what data represents a car object? And the second is\nwhat are ways that we",
    "start": "234200",
    "end": "240400"
  },
  {
    "text": "can interact with the object? So if we think about\na car blueprint,",
    "start": "240400",
    "end": "246010"
  },
  {
    "text": "some general\nrepresentation for a car could be the number of wheels\nit has, the number of doors it has, maybe its\nlength, maybe its height,",
    "start": "246010",
    "end": "253450"
  },
  {
    "text": "so this is all part of what\ndata represents the car.",
    "start": "253450",
    "end": "259579"
  },
  {
    "text": "OK? The interface for\nthe car is what are ways that you\ncan interact with it.",
    "start": "259579",
    "end": "264580"
  },
  {
    "start": "260000",
    "end": "300000"
  },
  {
    "text": "So for example, you\ncould paint a car, right? So you could change its color.",
    "start": "264580",
    "end": "270720"
  },
  {
    "text": "You could have the\ncar make a noise and different cars might\nmake different noises.",
    "start": "270720",
    "end": "276340"
  },
  {
    "text": "Or you can drive the car, right? So these are all ways that\nyou can interact with the car. Whereas the representation\nare what makes up the car.",
    "start": "276340",
    "end": "283129"
  },
  {
    "text": "What data abstractions\nmake up the car.",
    "start": "283130",
    "end": "288590"
  },
  {
    "text": "Let's bring it a little closer\nto home by looking at a list.",
    "start": "288590",
    "end": "293630"
  },
  {
    "text": "So we have this data\ntype of list, right? We've worked with lists before.",
    "start": "293630",
    "end": "300770"
  },
  {
    "start": "300000",
    "end": "540000"
  },
  {
    "text": "The list with elements 1, 2, 3,\nand 4 is a very specific object that is of type list.",
    "start": "300770",
    "end": "307730"
  },
  {
    "text": "Again, we think about it\nin terms of two things. One is what is the data\nrepresentation of the list?",
    "start": "307730",
    "end": "313500"
  },
  {
    "text": "So behind the scenes how\ndoes Python see lists? And the second is, how do\nyou interact with lists? So what are ways that\nyou can manipulate a list",
    "start": "313500",
    "end": "320378"
  },
  {
    "text": "object once it's created? So behind the scenes\nyou have a list, L,",
    "start": "320378",
    "end": "326360"
  },
  {
    "text": "which is going to be made up\nof essentially two things. One is going to be the\nvalue at specific index.",
    "start": "326360",
    "end": "334280"
  },
  {
    "text": "OK? So at index 0, it has\nthe value 1, right, because it's the first\nelement in the list.",
    "start": "334280",
    "end": "339770"
  },
  {
    "text": "And the second thing\nthat represents a list is going to be this second\npart, which is a pointer.",
    "start": "339770",
    "end": "347990"
  },
  {
    "text": "And internally this\npointer is going to tell Python\nwhere is the memory location in the computer where\nyou can access the element",
    "start": "347990",
    "end": "357610"
  },
  {
    "text": "index 1. So it's just essentially\ngoing to be a chain, going from one\nindex to the other.",
    "start": "357610",
    "end": "364340"
  },
  {
    "text": "And at the next memory location\nyou have the value at index 1, and then you have\nanother pointer",
    "start": "364340",
    "end": "369880"
  },
  {
    "text": "that takes you to the\nlocation in memory where the index 2 is located. And in index 2 you\nhave the value and then",
    "start": "369880",
    "end": "376330"
  },
  {
    "text": "the next pointer,\nand so on and so on. So this is how Python\ninternally represents a list.",
    "start": "376330",
    "end": "383750"
  },
  {
    "text": "OK? How you manipulate lists,\nwe've done this a lot, right? You can index into a list, you\ncan add two lists together,",
    "start": "383750",
    "end": "394410"
  },
  {
    "text": "you can get the length, you can\nappend to the end of a list, you can sort a list, reverse a\nlist, and so many other things,",
    "start": "394410",
    "end": "399860"
  },
  {
    "text": "right? So these are all\nways that you can interact with the list object\nas soon as you've created it.",
    "start": "399860",
    "end": "405230"
  },
  {
    "text": "So notice both of these,\nthe internal representation and how you\nmanipulate lists, you",
    "start": "405230",
    "end": "410270"
  },
  {
    "text": "don't actually\nknow internally how these are represented, right? How did whoever\nwrote the list class",
    "start": "410270",
    "end": "417710"
  },
  {
    "text": "decide to implement a sort. We don't know. You also weren't aware of how\nthese lists were represented",
    "start": "417710",
    "end": "423380"
  },
  {
    "text": "internally. And you didn't\nneed to know that. That's the beauty of\nobject oriented programming and having these\ndata abstractions.",
    "start": "423380",
    "end": "431139"
  },
  {
    "text": "The representations are\nprivate of these objects and they are only known by what\nyou can find out how it's done,",
    "start": "431140",
    "end": "437949"
  },
  {
    "text": "but they only should be known\nby whoever implemented them. You, as someone who\nuses this class,",
    "start": "437950",
    "end": "443140"
  },
  {
    "text": "doesn't really need to know\nhow a list is represented internally in order\nto be able to use it and to write cool\nprograms with them.",
    "start": "443140",
    "end": "450980"
  },
  {
    "text": "OK? So just find a\nmotivation here before we start writing our\nown types of objects",
    "start": "450980",
    "end": "458600"
  },
  {
    "text": "is the advantages of\nobject oriented programming is really that\nyou're able to bundle",
    "start": "458600",
    "end": "464270"
  },
  {
    "text": "this data, bundle some\ninternal representation, and some ways to interact with\na program into these packages.",
    "start": "464270",
    "end": "471760"
  },
  {
    "text": "And with these packages,\nyou can create objects and all of these\nobjects are going to behave the exact same way.",
    "start": "471760",
    "end": "477928"
  },
  {
    "text": "They're going to have the\nsame internal representation and the same way that you\ncan interact with them.",
    "start": "477928",
    "end": "483260"
  },
  {
    "text": "And ultimately, this is going to\ncontribute to the decomposition and abstraction ideas\nthat we talked about when",
    "start": "483260",
    "end": "491840"
  },
  {
    "text": "we talked about functions. And that means that\nyou're going to be able to write code that's a lot\nmore reusable and a lot easier",
    "start": "491840",
    "end": "499280"
  },
  {
    "text": "to read in the future. OK. So just like when we\ntalked about functions,",
    "start": "499280",
    "end": "506150"
  },
  {
    "text": "we're going to sort\nof separate the code that we talk about today into\ncode where you implement a data",
    "start": "506150",
    "end": "514460"
  },
  {
    "text": "type and code where you use\nan object that you create.",
    "start": "514460",
    "end": "520309"
  },
  {
    "text": "OK? So remember when we\ntalked about functions, you were thinking about it in\nterms of writing a function,",
    "start": "520309",
    "end": "525627"
  },
  {
    "text": "so you had to worry\nabout the details of how you implement a function. And then you had\nto worry about just",
    "start": "525627",
    "end": "530750"
  },
  {
    "text": "how to use a function, right? So it's sort of the\nsame idea today. So when you're thinking about\nimplementing your own data",
    "start": "530750",
    "end": "540810"
  },
  {
    "start": "540000",
    "end": "660000"
  },
  {
    "text": "type, you do that with\nthis thing called a class. ",
    "start": "540810",
    "end": "548500"
  },
  {
    "text": "And when you create\na class, you're basically going to\nfigure out what name you want to give your\nclass and you're",
    "start": "548500",
    "end": "553900"
  },
  {
    "text": "going to find some attributes. And attributes are\ngoing to be the data representation and ways that you\ncan interact with your object.",
    "start": "553900",
    "end": "561864"
  },
  {
    "text": "So you, as the\nprogrammer of this class, are going to decide\nhow you want people to interact with the object\nand what data this object",
    "start": "561864",
    "end": "569779"
  },
  {
    "text": "is going to have. So for example,\nsomeone wrote code",
    "start": "569780",
    "end": "575279"
  },
  {
    "text": "that implements a\nlist class, right, and we don't actually\nknow how that was done. But we can find out.",
    "start": "575280",
    "end": "583180"
  },
  {
    "text": "So creating the class is\nimplementing the class and figuring out data\nrepresentation and ways",
    "start": "583180",
    "end": "589690"
  },
  {
    "text": "to interact with the class. Once that's done, you\ncan then use your class.",
    "start": "589690",
    "end": "595570"
  },
  {
    "text": "And you use the\nclass by creating new instances of the class.",
    "start": "595570",
    "end": "602164"
  },
  {
    "text": "So when you create\na new instance, you essentially\ncreate a new object that has the type, the\nname of your class.",
    "start": "602164",
    "end": "609430"
  },
  {
    "text": "And you can create as many\nobjects as you'd like. You can do all the\noperations that you've defined on the class.",
    "start": "609430",
    "end": "616660"
  },
  {
    "text": "So for example,\nsomeone wrote the code to implement list class\nand then you can just use the list class like this.",
    "start": "616660",
    "end": "621920"
  },
  {
    "text": "You can create a new list, you\ncan get the length pf the list, you can append to the end of\nthe list, and so on and so on.",
    "start": "621920",
    "end": "628320"
  },
  {
    "start": "628320",
    "end": "633550"
  },
  {
    "text": "So let's start defining\nour own types, OK? So now you're going\nto define classes,",
    "start": "633550",
    "end": "639802"
  },
  {
    "text": "you're going to\nwrite classes which are going to define your\nown types of objects.",
    "start": "639802",
    "end": "645660"
  },
  {
    "text": "So for today's\nlecture we're going to look at code\nthat's going to be in the context of a\ncoordinate object.",
    "start": "645660",
    "end": "653209"
  },
  {
    "text": "And a coordinate\nobject is essentially going to be an object\nthat's going to define",
    "start": "653210",
    "end": "662980"
  },
  {
    "start": "660000",
    "end": "680000"
  },
  {
    "text": "a point in an xy plane. So x, y is going to be a\ncoordinate in a 2D plane.",
    "start": "662980",
    "end": "672052"
  },
  {
    "text": "So we're going to\nwrite code that's going to allow us to\ndefine that kind of object. ",
    "start": "672052",
    "end": "678830"
  },
  {
    "text": "So the way we do that is\nwe have to define a class. So we have to tell Python,\nhey, I'm defining my own object",
    "start": "678830",
    "end": "685220"
  },
  {
    "start": "680000",
    "end": "735000"
  },
  {
    "text": "type. So you do that with\nthis class key word. So you say class, then you\nsay the name of your type.",
    "start": "685220",
    "end": "691880"
  },
  {
    "text": "In this case, we're creating\na type called coordinate. Just like we had type list,\ntype string, and so on.",
    "start": "691880",
    "end": "697170"
  },
  {
    "text": "This is going to be a\ntype called coordinate. And then in\nparentheses here, you put what the parents\nof the class are.",
    "start": "697170",
    "end": "704490"
  },
  {
    "text": "For today's lecture, the\nparent of the classes are going to be this\nthing called object,",
    "start": "704490",
    "end": "710480"
  },
  {
    "text": "and object is the very\nbasic type in Python.",
    "start": "710480",
    "end": "716180"
  },
  {
    "text": "It is the most basic\ntype in Python. And it implements things like\nbeing able to assign variables.",
    "start": "716180",
    "end": "722210"
  },
  {
    "text": "So really, really\nbasic operations that you can do with objects. So your coordinate\nis therefore going",
    "start": "722210",
    "end": "728330"
  },
  {
    "text": "to be an object in Python.  All right. So we've told Python we\nwanted to define an object.",
    "start": "728330",
    "end": "736580"
  },
  {
    "start": "735000",
    "end": "880000"
  },
  {
    "text": "So inside the class definition\nwe're going to put attributes. So what are attributes?",
    "start": "736580",
    "end": "741819"
  },
  {
    "text": "Attributes are going to be\ndata and procedures that belong to the class, OK?",
    "start": "741820",
    "end": "747000"
  },
  {
    "text": "Data are going to be the data\nrepresentations and procedures are going to be ways that we\ncan interact with the object.",
    "start": "747000",
    "end": "753630"
  },
  {
    "text": "The fact that they\nbelong to the class means that the data and the\nprocedures that we write",
    "start": "753630",
    "end": "758670"
  },
  {
    "text": "are only going to work with\nan object of this type. OK. If you try to use any of\nthe data or the procedures",
    "start": "758670",
    "end": "765102"
  },
  {
    "text": "with an object of\na different type, you're going to get an\nerror because these data",
    "start": "765102",
    "end": "771029"
  },
  {
    "text": "and these attributes will\nbelong to this particular class.",
    "start": "771030",
    "end": "776880"
  },
  {
    "text": " So the data attributes is,\nwhat is the object, right?",
    "start": "776880",
    "end": "784810"
  },
  {
    "text": "What is the data that\nmakes up the object? So for our coordinate\nexample, it's going to be the x and y\nvalues for coordinate.",
    "start": "784810",
    "end": "792423"
  },
  {
    "text": "We can decide that\ncan be ints, we can decide that we can\nlet them be floats, but it's going to have one\nvalue for the x-coordinate",
    "start": "792424",
    "end": "799000"
  },
  {
    "text": "and one value for\nthe y-coordinate.  So those are data attributes.",
    "start": "799000",
    "end": "805680"
  },
  {
    "text": "And procedure attributes\nare better known as methods. And you can think of a\nmethod as a function.",
    "start": "805680",
    "end": "812089"
  },
  {
    "text": "Except that it's a\nfunction that only works with this\nparticular type of object.",
    "start": "812089",
    "end": "817330"
  },
  {
    "text": "So with a coordinate\nobject, in this case. So the methods are\ngoing to define how you",
    "start": "817330",
    "end": "822660"
  },
  {
    "text": "can interact with the object. So in a list, for\nexample, we've said that you can append an item\nto the end of the list,",
    "start": "822660",
    "end": "828000"
  },
  {
    "text": "we can sort a list,\nthings like that. So when you're defining\nmethods, you're defining ways that people can\ninteract with your object.",
    "start": "828000",
    "end": "835120"
  },
  {
    "text": "So for example, for\na coordinate object, we can say that we can take\nthe distance between two coordinate points.",
    "start": "835120",
    "end": "840650"
  },
  {
    "text": "OK? And that's going to be a\nway that you can interact with two coordinate points.",
    "start": "840650",
    "end": "846360"
  },
  {
    "text": "And just to be clear,\nthese are going to belong to this\nclass, which means that if you try to use this\ndistance method on two lists,",
    "start": "846360",
    "end": "854310"
  },
  {
    "text": "for example, you're\ngoing to get an error. Because this distance method was\nonly defined to work with two coordinate type objects.",
    "start": "854310",
    "end": "860531"
  },
  {
    "text": " All right, so let's\ncarry on and continue",
    "start": "860531",
    "end": "866680"
  },
  {
    "text": "implementing our class. So we've written this\nfirst line so far, class coordinate object.",
    "start": "866680",
    "end": "872640"
  },
  {
    "text": "So now let's define attributes. First thing we're going to\ndefine are data attributes.",
    "start": "872640",
    "end": "879640"
  },
  {
    "text": "Generally you define data\nattributes inside this init,",
    "start": "879640",
    "end": "884720"
  },
  {
    "start": "880000",
    "end": "1110000"
  },
  {
    "text": "and this is underscore,\nunderscore, init, underscore, underscore, and it's a special\nmethod or function in a class.",
    "start": "884720",
    "end": "892510"
  },
  {
    "text": "And the special\nmethod tells Python, when you implement\nthe special method,",
    "start": "892510",
    "end": "897580"
  },
  {
    "text": "it tells Python when you first\ncreate an object of this type, call this method or\ncall this function.",
    "start": "897580",
    "end": "903010"
  },
  {
    "text": " So how do we do that?",
    "start": "903010",
    "end": "908079"
  },
  {
    "text": "So let's implement it. So we say df because\nit's just a function.",
    "start": "908080",
    "end": "914290"
  },
  {
    "text": "The name is the\nspecial name, init. And we give it some\nparameters, right,",
    "start": "914290",
    "end": "919390"
  },
  {
    "text": "just like any other function. These last two\nparameters are x and y,",
    "start": "919390",
    "end": "926250"
  },
  {
    "text": "which are going to represent how\nyou create a coordinate object.",
    "start": "926250",
    "end": "931340"
  },
  {
    "text": "So you give it a value\nfor the x-coordinate and you give it a value\nfor the y-coordinate. The self, however, is\na little bit trickier.",
    "start": "931340",
    "end": "939550"
  },
  {
    "text": "So the self is going\nto be a parameter when you define this\nclass that represents",
    "start": "939550",
    "end": "944880"
  },
  {
    "text": "a particular instance\nof the class. So we're defining\nthis coordinate object",
    "start": "944880",
    "end": "952500"
  },
  {
    "text": "in sort of a general way, right? We don't have a\nspecific instance yet because we haven't\ncreated an object yet.",
    "start": "952500",
    "end": "959850"
  },
  {
    "text": "But this self is\ngoing to be sort of a placeholder for\nany sort of instance when you create the object.",
    "start": "959850",
    "end": "967810"
  },
  {
    "text": "So in the definition\nof the class, whenever you want to\nrefer to attributes that belong to an instance,\nyou have to use self dot.",
    "start": "967810",
    "end": "977530"
  },
  {
    "text": "So this dot notation. And the dot is going to say\nlook for a data attribute",
    "start": "977530",
    "end": "986230"
  },
  {
    "text": "x that belongs to this class. ",
    "start": "986230",
    "end": "991240"
  },
  {
    "text": "So for methods that\nbelong to the class, the first parameter is\nalways going to be self.",
    "start": "991240",
    "end": "997313"
  },
  {
    "text": "It can be named\nanything you want, but really by convention\nit's always named self. So try to stick to that.",
    "start": "997314",
    "end": "1004279"
  },
  {
    "text": "And then any other\nparameters beyond it are going to be just\nparameters as you would put in a normal function.",
    "start": "1004280",
    "end": "1011190"
  },
  {
    "text": "OK. In this particular\ncase, we're going to choose to initialize\na coordinate object",
    "start": "1011190",
    "end": "1016339"
  },
  {
    "text": "by two values, one for\nthe x and one for the y. And inside this\ninit method, we're",
    "start": "1016340",
    "end": "1023690"
  },
  {
    "text": "going to have two assignments. The first one says,\nthe x data attribute",
    "start": "1023690",
    "end": "1031579"
  },
  {
    "text": "of a coordinate object. I'm going to assign it to\nwhatever was passed in.",
    "start": "1031579",
    "end": "1037589"
  },
  {
    "text": "And the y data attribute\nfor a particular object is going to be assigned\nwhatever y was passed in.",
    "start": "1037589",
    "end": "1043520"
  },
  {
    "start": "1043520",
    "end": "1050420"
  },
  {
    "text": "Questions so far about\nhow to write this init? Yeah, question. AUDIENCE: [INAUDIBLE]",
    "start": "1050420",
    "end": "1055970"
  },
  {
    "text": " PROFESSOR: How do you\nmake sure that x and y",
    "start": "1055970",
    "end": "1062430"
  },
  {
    "text": "are inits or floats? So this is something\nthat you could write in the specifications,\nso the docstring",
    "start": "1062430",
    "end": "1068370"
  },
  {
    "text": "with the triple quotes. So whoever uses the\nclass would then know that if they do something\noutside the specification,",
    "start": "1068370",
    "end": "1075930"
  },
  {
    "text": "the code might not\nwork as expected. Or you could put\nin a cert statement inside the definition\nof the init just",
    "start": "1075930",
    "end": "1083880"
  },
  {
    "text": "to sort of force that. Force that to be true. Great question.",
    "start": "1083880",
    "end": "1089195"
  },
  {
    "text": "Yeah, question. AUDIENCE: [INAUDIBLE] ",
    "start": "1089195",
    "end": "1094520"
  },
  {
    "text": "PROFESSOR: Does the x,\ndoes this self x and this x have to be the same name. The answer is no.",
    "start": "1094520",
    "end": "1099710"
  },
  {
    "text": "And we're going to\nsee in class exercise that you can have\nit be different. ",
    "start": "1099710",
    "end": "1107030"
  },
  {
    "text": "OK. Great. So this defines the way\nthat we create an object.",
    "start": "1107030",
    "end": "1114260"
  },
  {
    "start": "1110000",
    "end": "1300000"
  },
  {
    "text": "So now we have sort\nof a nice class. It's very simple, but\nwe can start actually",
    "start": "1114260",
    "end": "1121490"
  },
  {
    "text": "creating coordinate objects. So when you create\ncoordinate objects, you're creating\ninstances of the class.",
    "start": "1121490",
    "end": "1128929"
  },
  {
    "text": "So this line here, C is\nequal to coordinate 3,4, is going to call\nthe init method.",
    "start": "1128930",
    "end": "1135240"
  },
  {
    "text": "It's going to call the init\nmethod with x is equal to 3 and y is equal to 4. ",
    "start": "1135240",
    "end": "1141940"
  },
  {
    "text": "I'm just going to go over here\nand I wrote this previously,",
    "start": "1141940",
    "end": "1147190"
  },
  {
    "text": "because notice when we're\ncreating an object here,",
    "start": "1147190",
    "end": "1153980"
  },
  {
    "text": "we're only giving\nit two parameters. But in the init method, we\nhave actually three parameters,",
    "start": "1153980",
    "end": "1160190"
  },
  {
    "text": "right? We have these three\nparameters here, but when we're\ncreating an object, we only give it two parameters.",
    "start": "1160190",
    "end": "1165950"
  },
  {
    "text": "And that's OK because\nimplicitly, Python is going to say self is going\nto be this object C, so just",
    "start": "1165950",
    "end": "1171830"
  },
  {
    "text": "by default, OK? So when you're creating\na coordinate object, you're passing it all the\nvariables except for self.",
    "start": "1171830",
    "end": "1180260"
  },
  {
    "text": " So this line here is\ngoing to call the init",
    "start": "1180260",
    "end": "1187350"
  },
  {
    "text": "and it's going to do every\nline inside the init. So it's going to create\nan x data attribute for C,",
    "start": "1187350",
    "end": "1194650"
  },
  {
    "text": "a y data attribute\nfor C, and it's going to assign 3 and 4\nto those respectively.",
    "start": "1194650",
    "end": "1201800"
  },
  {
    "text": "This next line here is\norigin equals coordinate 0, 0 creates another object.",
    "start": "1201800",
    "end": "1208810"
  },
  {
    "text": "OK? It's another coordinate\nobject whose value for x is 0 and whose value for y is 0.",
    "start": "1208810",
    "end": "1216200"
  },
  {
    "text": "So now we have two\ncoordinate objects. We can access the\ndata attributes",
    "start": "1216200",
    "end": "1221539"
  },
  {
    "text": "using this dot notation and\nwe've seen that before, right? When we've worked with lists\nwe'd say something like,",
    "start": "1221540",
    "end": "1227060"
  },
  {
    "text": "L dot append, right,\nwhen we create a list. So the same dot notation can\nbe used with your own objects",
    "start": "1227060",
    "end": "1234830"
  },
  {
    "text": "in order to access\ndata attributes. So here, this is\ngoing to print 3 because the x value\nfor object C is 3,",
    "start": "1234830",
    "end": "1247179"
  },
  {
    "text": "and the next line,\nprint origin x is going to print 0 because the\nx value for the object origin",
    "start": "1247180",
    "end": "1253150"
  },
  {
    "text": "is 0. OK. So we've created a\ncoordinate object.",
    "start": "1253150",
    "end": "1259450"
  },
  {
    "text": "We have to find the\ninit method so we have a way to create objects\nwhen we use the class.",
    "start": "1259450",
    "end": "1265210"
  },
  {
    "text": "And then we can access\nthe data attributes. But that's kind of lame, right,\nbecause there isn't anything",
    "start": "1265210",
    "end": "1271530"
  },
  {
    "text": "cool we can do with it. There isn't ways to\ninteract with this object. So let's add some methods.",
    "start": "1271530",
    "end": "1277770"
  },
  {
    "text": "Remember methods are going to\nbe procedural attributes that allow us to interact\nwith our object.",
    "start": "1277770",
    "end": "1285030"
  },
  {
    "text": "Methods are like functions\nexcept that there's a couple of differences\nwhich you'll see in a moment.",
    "start": "1285030",
    "end": "1290790"
  },
  {
    "text": "And when you're\ncalling methods, you're using the dot operator, like\nL dot append, for example,",
    "start": "1290790",
    "end": "1298380"
  },
  {
    "text": "for lists.  So let's go back to defining\nour coordinate class",
    "start": "1298380",
    "end": "1305650"
  },
  {
    "start": "1300000",
    "end": "1465000"
  },
  {
    "text": "and let's define\na method for it. So so far we've defined\nthat part there,",
    "start": "1305650",
    "end": "1310910"
  },
  {
    "text": "class coordinate and an init. So we have that. So in this slide we're going\nto add this method here.",
    "start": "1310910",
    "end": "1318160"
  },
  {
    "text": "So this method here\nis going to say I'm going to define a\nmethod called distance",
    "start": "1318160",
    "end": "1324280"
  },
  {
    "text": "and I'm going to pass\nin two parameters. Remember self, the\nfirst parameter, is always going to be\nthe instance of an object",
    "start": "1324280",
    "end": "1331330"
  },
  {
    "text": "that you're going to\nperform the operation on. So pretty much by convention\nit's always named self.",
    "start": "1331330",
    "end": "1339630"
  },
  {
    "text": " And then for this\nparticular method,",
    "start": "1339630",
    "end": "1345010"
  },
  {
    "text": "I'm going to give it\nanother parameter, and I can name this\nwhatever I want. I'm naming it other.",
    "start": "1345010",
    "end": "1351110"
  },
  {
    "text": "And this is going to represent\nthe other coordinate object for which I want to find\nthe distance from my self.",
    "start": "1351110",
    "end": "1358142"
  },
  {
    "text": "So here I'm going\nto just implement the Euclidean distance formula,\nwhich is x1 minus x2 squared,",
    "start": "1358142",
    "end": "1366320"
  },
  {
    "text": "plus Y1 minus Y2 squared,\nand square root of all that. So that's what I'm\ndoing inside here.",
    "start": "1366320",
    "end": "1374370"
  },
  {
    "text": "Self and other are\ncoordinate objects.  Inside this method, I have\nto refer to the x data",
    "start": "1374370",
    "end": "1384940"
  },
  {
    "text": "attributes of each\nobject if I want to find the difference between\nthe 2x values from them.",
    "start": "1384940",
    "end": "1391220"
  },
  {
    "text": "So that's why I'm doing\nself dot x here, right. If I just did x, I would be\naccessing just some variable",
    "start": "1391220",
    "end": "1397240"
  },
  {
    "text": "named x in a program which\nactually isn't even defined.",
    "start": "1397240",
    "end": "1402250"
  },
  {
    "text": "So you always have to\nrefer when as we're thinking about\nclasses, you always",
    "start": "1402250",
    "end": "1408400"
  },
  {
    "text": "have to refer to\nwhose data attribute do you want to access? In this case, I want\nto access the x data",
    "start": "1408400",
    "end": "1415000"
  },
  {
    "text": "attribute of my self, and I\nwant to subtract the x data attribute of this\nother coordinate,",
    "start": "1415000",
    "end": "1421270"
  },
  {
    "text": "square that, same for y,\nsquare that, and then add those and take the square\nroot of that.",
    "start": "1421270",
    "end": "1428320"
  },
  {
    "text": "So notice this method is pretty\nmuch like a function, right? You have DF, some name,\nit takes in parameters.",
    "start": "1428320",
    "end": "1434830"
  },
  {
    "text": "It does some stuff and\nthen it returns a value. The only difference is the\nfact that you have a self here",
    "start": "1434830",
    "end": "1441270"
  },
  {
    "text": "as the first thing and\nthe fact that you always have to be conscious about\nwhose data attributes",
    "start": "1441270",
    "end": "1447760"
  },
  {
    "text": "you're accessing.  So you have to use the\ndot notation in order",
    "start": "1447760",
    "end": "1454080"
  },
  {
    "text": "to decide whose data\nattributes you want access. So we've defined the\nmethod here, distance.",
    "start": "1454080",
    "end": "1461221"
  },
  {
    "text": "So this is in the\nclass definition. Now how do we use it? So let's assume that the\ndefinition of distance",
    "start": "1461222",
    "end": "1468120"
  },
  {
    "text": "is up here. I didn't include the code. But really all you need\nto know is what it takes.",
    "start": "1468120",
    "end": "1474559"
  },
  {
    "text": "It takes a self and an other. So when you want\nto use this method to figure out a distance\nbetween two coordinate objects,",
    "start": "1474560",
    "end": "1482130"
  },
  {
    "text": "this is how you do it. So the first line, I create\none coordinate object. Second line, I create\nanother coordinate object.",
    "start": "1482130",
    "end": "1490320"
  },
  {
    "text": "First one is named C, the\nsecond one is named 0. These are two separate objects.",
    "start": "1490320",
    "end": "1495890"
  },
  {
    "text": "And I'm going to\nfind the distance. And I want to first\ncall it on one object,",
    "start": "1495890",
    "end": "1503400"
  },
  {
    "text": "so I'm going to say C dot,\nso I'm using the dot notation to call the method\ndistance on object C.",
    "start": "1503400",
    "end": "1514740"
  },
  {
    "text": "So Python says this object\nC is of type coordinate. It's going to look\nup at the class coordinate that you defined.",
    "start": "1514740",
    "end": "1520770"
  },
  {
    "text": "It's going to find this\nmethod called distance and then it's going to say\nwhat parameters does it take?",
    "start": "1520770",
    "end": "1526289"
  },
  {
    "text": "So it takes another parameter,\nright, for the other and then, in the\nparentheses, I just",
    "start": "1526290",
    "end": "1531690"
  },
  {
    "text": "have to give it this\nother perimeter. An easier way to\nsee what happens",
    "start": "1531690",
    "end": "1537870"
  },
  {
    "text": "is by looking at what this\nline here is equivalent to.",
    "start": "1537870",
    "end": "1542910"
  },
  {
    "text": " So the third line\nhere prints C dot",
    "start": "1542910",
    "end": "1548560"
  },
  {
    "text": "distance 0 is equivalent\nto this one on the right. And this one on the\nright essentially says, what's the\nname of the class,",
    "start": "1548560",
    "end": "1557620"
  },
  {
    "text": "dot, dot notation, what's\nthe method you want to call, and then in\nparentheses you give it",
    "start": "1557620",
    "end": "1563900"
  },
  {
    "text": "all of the variables\nincluding self. OK. So in this case you're\nexplicitly telling Python",
    "start": "1563900",
    "end": "1569750"
  },
  {
    "text": "that self is C and other is 0.",
    "start": "1569750",
    "end": "1576030"
  },
  {
    "text": "So this is a little bit easier\nto understand, like that.",
    "start": "1576030",
    "end": "1582080"
  },
  {
    "text": "But it's a little cumbersome\nbecause you always have to write coordinate dot,\ncoordinate dot, coordinate dot,",
    "start": "1582080",
    "end": "1587899"
  },
  {
    "text": "for every data\nattribute you might want to access, for every\nprocedural attribute you might want to access.",
    "start": "1587900",
    "end": "1594110"
  },
  {
    "text": "So by convention,\nit's a lot easier to do the one on the left.",
    "start": "1594110",
    "end": "1600010"
  },
  {
    "text": "And as I mentioned,\nPython implicitly says, if you're doing the\none on the left,",
    "start": "1600010",
    "end": "1605490"
  },
  {
    "text": "you can call this method\non a particular object and it's going to look\nup the type of the object and it's going to essentially\nconvert this on the left",
    "start": "1605490",
    "end": "1612900"
  },
  {
    "text": "to the one on the right. And this is what you've\nbeen using so far. So when you create a list,\nyou say L is equal to 1, 2,",
    "start": "1612900",
    "end": "1619620"
  },
  {
    "text": "and then you say L.append,\nyou know, 3 or whatever.",
    "start": "1619620",
    "end": "1625160"
  },
  {
    "text": "So we've been using this\nnotation on the left pretty much from the\nbeginning of class.",
    "start": "1625160",
    "end": "1634240"
  },
  {
    "text": "So we have a\ncoordinate class, we can create a\ncoordinate object, we can get the distance\nbetween two objects.",
    "start": "1634240",
    "end": "1642116"
  },
  {
    "text": "As you're using\nthe class, if you wanted to use this\ncoordinate class, and you were maybe debugging\nat some point, a lot of you",
    "start": "1642116",
    "end": "1649580"
  },
  {
    "text": "probably use print as a\ndebug statement, right? And maybe you want to print the\nvalue of a coordinate object.",
    "start": "1649580",
    "end": "1657799"
  },
  {
    "text": "So if you create a\ncoordinate object, C is equal to\ncoordinate 3, 4, right? That's what we've done so far.",
    "start": "1657799",
    "end": "1663400"
  },
  {
    "text": "If you print C, you\nget this funny message. Very uninformative, right?",
    "start": "1663400",
    "end": "1669570"
  },
  {
    "text": "It basically says, well,\nC is an object of type coordinate at this memory\nlocation in the computer.",
    "start": "1669570",
    "end": "1680289"
  },
  {
    "text": "Which is not what you\nwanted at all, right? Maybe you wanted to know what\nthe values for x and y were. That would be a lot\nmore informative.",
    "start": "1680289",
    "end": "1688190"
  },
  {
    "text": "So by default, when you\ncreate your own type, when",
    "start": "1688190",
    "end": "1694259"
  },
  {
    "text": "you print the\nobject of that type, Python tells you this\nsort of information which is not what you want.",
    "start": "1694260",
    "end": "1699670"
  },
  {
    "text": "So what you need\nto do is you need to define your own\nmethod that tells Python what to do\nwhen you call print",
    "start": "1699670",
    "end": "1707460"
  },
  {
    "text": "on an object of this type. So this is going to be\na special method, just",
    "start": "1707460",
    "end": "1714210"
  },
  {
    "text": "like init is, because\nit starts and ends with double underscores.",
    "start": "1714210",
    "end": "1719650"
  },
  {
    "text": "And the name of the method is\nunderscore, underscore, str, underscore, underscore. And if you define this method in\nyour class, that tells Python,",
    "start": "1719650",
    "end": "1728550"
  },
  {
    "text": "hey, when you see a\nprint statement that's on an object of type\ncoordinate, call this method,",
    "start": "1728550",
    "end": "1734250"
  },
  {
    "text": "look what it does, and do\neverything that's inside it. And you can choose to make\nit do whatever you want",
    "start": "1734250",
    "end": "1742440"
  },
  {
    "text": "inside your definition of str. In this case, let's say when\nwe print a coordinate object,",
    "start": "1742440",
    "end": "1748620"
  },
  {
    "text": "we're going to print its\nx and y values surrounded by angle brackets. That seems reasonable, right?",
    "start": "1748620",
    "end": "1754950"
  },
  {
    "text": "So then from now on when you\nprint coordinate objects,",
    "start": "1754950",
    "end": "1760240"
  },
  {
    "text": "you're going to see\nthings like this, which is a lot more informative.",
    "start": "1760240",
    "end": "1765659"
  },
  {
    "text": "So how do we define this? So so far we've defined\nall that and the last part",
    "start": "1765660",
    "end": "1772610"
  },
  {
    "text": "is going to be new. So we define the init\nand the distance, and let's define this str.",
    "start": "1772610",
    "end": "1778335"
  },
  {
    "text": " So underscore, underscore,\nstr, underscore, underscore, is",
    "start": "1778335",
    "end": "1785830"
  },
  {
    "text": "a method. It's only going to take self\nbecause you're just calling",
    "start": "1785830",
    "end": "1791060"
  },
  {
    "text": "print on the object itself. There's no other\nparameters to it.",
    "start": "1791060",
    "end": "1797550"
  },
  {
    "text": "Str has to return a string,\nand in this particular case,",
    "start": "1797550",
    "end": "1803100"
  },
  {
    "text": "we're going to return\nthe string that's the angle brackets concatenated\nwith the x value of the object,",
    "start": "1803100",
    "end": "1810040"
  },
  {
    "text": "self.x, concatenated\nwith a comma, concatenated with the y value\nof this particular instance",
    "start": "1810040",
    "end": "1817080"
  },
  {
    "text": "of an object, self.y,\nand then concatenated with the angle brackets. ",
    "start": "1817080",
    "end": "1823720"
  },
  {
    "text": "So now any time you have\nprint on an object of type coordinate, you're going to\ncall this special method str,",
    "start": "1823720",
    "end": "1829660"
  },
  {
    "text": "if it's implemented\nin your code. Any questions? ",
    "start": "1829660",
    "end": "1837570"
  },
  {
    "text": "OK.  So let's try to wrap our\nhead around types and classes",
    "start": "1837570",
    "end": "1846235"
  },
  {
    "start": "1840000",
    "end": "1940000"
  },
  {
    "text": "because we've seen a lot today.  Let's create a\ncoordinate object,",
    "start": "1846235",
    "end": "1854240"
  },
  {
    "text": "assign it 3, 4, as we have been,\nand assign it to variable C.",
    "start": "1854240",
    "end": "1860290"
  },
  {
    "text": "We've implemented the str\nmethod, so when we print C, it's going to print out this\nnice three comma for our angle",
    "start": "1860290",
    "end": "1867430"
  },
  {
    "text": "brackets.  If we print the type\nof C, this is actually",
    "start": "1867430",
    "end": "1873120"
  },
  {
    "text": "going to give us class main\ncoordinate, which tells us that C is going to\nbe an object that",
    "start": "1873120",
    "end": "1887770"
  },
  {
    "text": "is of type class coordinate. ",
    "start": "1887770",
    "end": "1893370"
  },
  {
    "text": "If we look at\ncoordinate as a class, if we print what coordinate is,\ncoordinate is a class, right?",
    "start": "1893370",
    "end": "1900320"
  },
  {
    "text": "So this is what Python tells\nus, if we print coordinate, it's a class named coordinate.",
    "start": "1900320",
    "end": "1906730"
  },
  {
    "text": "And if we print the\ntype of a coordinate, well that's just\ngoing to be a type. So class is going to be a type. So you're defining\nthe type of an object.",
    "start": "1906730",
    "end": "1913428"
  },
  {
    "text": " If you'd like to figure out\nwhether a particular object is",
    "start": "1913428",
    "end": "1921950"
  },
  {
    "text": "an instance of a\nparticular class, you use this special\nfunction called is instance.",
    "start": "1921950",
    "end": "1927080"
  },
  {
    "text": "So if you print is instance\nC comma coordinate, this is going to print true\nbecause C is an object that",
    "start": "1927080",
    "end": "1933710"
  },
  {
    "text": "is of type coordinate. ",
    "start": "1933710",
    "end": "1943430"
  },
  {
    "start": "1940000",
    "end": "2030000"
  },
  {
    "text": "Couple more words on\nthese special operators. So these special\noperators allow you to customize your classes which\ncan add some cool functionality",
    "start": "1943430",
    "end": "1951770"
  },
  {
    "text": "to them. So these special\noperators are going",
    "start": "1951770",
    "end": "1956800"
  },
  {
    "text": "to be things like\naddition, subtraction, using the equal equal sign,\ngreater than, less than,",
    "start": "1956800",
    "end": "1962140"
  },
  {
    "text": "length and so on and so on. So just like str,\nif you implement",
    "start": "1962140",
    "end": "1968139"
  },
  {
    "text": "any of these in your classes,\nthis is going to tell Python. So for example, if we've\nimplemented this underscore,",
    "start": "1968140",
    "end": "1976310"
  },
  {
    "text": "underscore, add, underscore,\nunderscore in our class, this is going to\ntell Python when",
    "start": "1976310",
    "end": "1981970"
  },
  {
    "text": "you use this plus operator\nbetween two objects of type coordinate to call this method.",
    "start": "1981970",
    "end": "1988990"
  },
  {
    "text": "If you have not\nimplemented this method and you try to add two\nobjects of type coordinate, you're going to get an error\nbecause Python doesn't actually",
    "start": "1988990",
    "end": "1995110"
  },
  {
    "text": "know right off\nthe bat how to add two coordinate objects, right? You have to tell\nit how to do that.",
    "start": "1995110",
    "end": "2000454"
  },
  {
    "text": "And you tell it how to\ndo that by implementing this special method.",
    "start": "2000454",
    "end": "2006360"
  },
  {
    "text": "Same with subtract. Same with equals. So if you want to figure out\nwhether two objects are equal.",
    "start": "2006360",
    "end": "2011740"
  },
  {
    "text": "And when you implement these\nmethods in your own class, you can decide exactly\nwhat you want to do.",
    "start": "2011740",
    "end": "2019204"
  },
  {
    "text": "So what happens when you\nadd two coordinate objects? Do you just add the x values,\ndo you just add the y values, do you get them both\ntogether, do you",
    "start": "2019204",
    "end": "2025390"
  },
  {
    "text": "do whatever you'd like to do. And then you document\nwhat you've decided.",
    "start": "2025390",
    "end": "2031399"
  },
  {
    "start": "2030000",
    "end": "2503000"
  },
  {
    "text": "So let's create a\nfraction object. So we've looked\nat coordinate, we saw sort of a higher\nlevel car object.",
    "start": "2031400",
    "end": "2038400"
  },
  {
    "text": "Let's look at a fraction object. Fraction object\nis going to be, is",
    "start": "2038400",
    "end": "2044800"
  },
  {
    "text": "going represent a number that's\ngoing to be a numerator slash denominator.",
    "start": "2044800",
    "end": "2051399"
  },
  {
    "text": "OK. So that's going to\nbe a fraction object. So the way I've decided to\ninternally represent a fraction",
    "start": "2051400",
    "end": "2057809"
  },
  {
    "text": "object is with two numbers. And I've decided that I\nwill not let them be floats.",
    "start": "2057810",
    "end": "2064020"
  },
  {
    "text": "They have to be integers,\nhence the assert over here.",
    "start": "2064020",
    "end": "2069710"
  },
  {
    "text": "So inside the init,\nI've decided I'm going to represent my\nfracture with two numbers, one",
    "start": "2069710",
    "end": "2077719"
  },
  {
    "text": "for the numerator and\none for the denominator. So when I create\na fraction object,",
    "start": "2077719",
    "end": "2083460"
  },
  {
    "text": "I'm going to pass in a\nnumerator and a denominator. And a particular\ninstance is going",
    "start": "2083460",
    "end": "2091050"
  },
  {
    "text": "to have self dot\nnumerator and self dot denominator as its\ndata attributes and I'm assigning those to be\nwhatever's passed into my init.",
    "start": "2091050",
    "end": "2099995"
  },
  {
    "text": " Since I plan on debugging this\ncode maybe possibly sometime",
    "start": "2099995",
    "end": "2107420"
  },
  {
    "text": "in the future, I'm also\nincluding an str method and the str method is going\nto print a nice looking string",
    "start": "2107420",
    "end": "2120349"
  },
  {
    "text": "that's going to represent\nthe numerator, and then a slash, and then\nthe denominator.",
    "start": "2120350",
    "end": "2126566"
  },
  {
    "text": " And then I've also implemented\nsome other special methods.",
    "start": "2126566",
    "end": "2133650"
  },
  {
    "text": "How do I add two fractions? How do I subtract two fractions? And how do I convert\na fraction to a float?",
    "start": "2133650",
    "end": "2142410"
  },
  {
    "text": "The add and subtract\nare almost the same, so let's look at the\nadd for the moment.",
    "start": "2142410",
    "end": "2148190"
  },
  {
    "text": "How do we add two fractions?  We're going to take self, which\nis the instance of an object",
    "start": "2148190",
    "end": "2159410"
  },
  {
    "text": "that I want to do\nthe add operation on, and we're going to\ntake other, which is the other\ninstance of an object",
    "start": "2159410",
    "end": "2165859"
  },
  {
    "text": "that I want to do the\noperation on, so the addition, and I'm going to\nfigure out the new top.",
    "start": "2165860",
    "end": "2171349"
  },
  {
    "text": "So the new top of the\nresulting fraction. So it's my numerator multiplied\nby the other denominator",
    "start": "2171350",
    "end": "2180109"
  },
  {
    "text": "plus my denominator multiplied\nby the other numerator and then divided by the\nmultiplication of the two",
    "start": "2180110",
    "end": "2186410"
  },
  {
    "text": "denominators. So the top is going to be that,\nthe bottom is going to be that.",
    "start": "2186410",
    "end": "2192250"
  },
  {
    "text": "Notice that we're\nusing self dot, right? Once again, we're\ntrying to access the data attributes of\neach different instance,",
    "start": "2192250",
    "end": "2199430"
  },
  {
    "text": "right, of myself and the other\nobject that I'm working with. So that's why I have\nto use self dot here.",
    "start": "2199430",
    "end": "2206660"
  },
  {
    "text": "Once I figure out the top and\nthe bottom of the addition, I'm going to return,\nand here notice I'm",
    "start": "2206660",
    "end": "2215130"
  },
  {
    "text": "returning a fraction object. It's not a number, it's not\na float, it's not an integer.",
    "start": "2215130",
    "end": "2220680"
  },
  {
    "text": "It's a new object that is of\nthe exact same type as the class that I'm implementing.",
    "start": "2220680",
    "end": "2227140"
  },
  {
    "text": "So as it's the same\ntype of object, then on the return\nvalue I can do",
    "start": "2227140",
    "end": "2232304"
  },
  {
    "text": "all of the exact same\noperations that I can do on a regular fraction object.",
    "start": "2232304",
    "end": "2237960"
  },
  {
    "text": "Sub is going to be the same. I'm returning a fraction object. ",
    "start": "2237960",
    "end": "2244250"
  },
  {
    "text": "Float is just going to\ndo the division for me,",
    "start": "2244250",
    "end": "2250330"
  },
  {
    "text": "so it's going to\ntake the numerator and then divide it\nby the denominator, just divide the numbers.",
    "start": "2250330",
    "end": "2257130"
  },
  {
    "text": "And then I'm defining here\nmy own method called inverse.",
    "start": "2257130",
    "end": "2262789"
  },
  {
    "text": "And this is just going to take\nthe inverse of the instance I'm calling this method on. And so it's going to also return\na new fraction object that just",
    "start": "2262790",
    "end": "2271820"
  },
  {
    "text": "has the denominator\nas the top part and the numerator\nas the bottom part. ",
    "start": "2271820",
    "end": "2278900"
  },
  {
    "text": "So then we have some code here. So that's how I implement\nmy fraction object.",
    "start": "2278900",
    "end": "2284970"
  },
  {
    "text": "So now let's use it and\nsee what it gives us. A is equal to a fraction 1, 4. ",
    "start": "2284970",
    "end": "2300940"
  },
  {
    "text": "This is going to\nbe 1 over 4 for a.",
    "start": "2300940",
    "end": "2308869"
  },
  {
    "text": "And b is going to\nbe 3 over four. ",
    "start": "2308870",
    "end": "2315240"
  },
  {
    "text": "When I do C, notice I'm using\nthe plus operator between two",
    "start": "2315240",
    "end": "2321400"
  },
  {
    "text": "fraction objects, right? A and b are fraction\nobjects so Python's going to say, OK, is there an\nunderscore, underscore, add,",
    "start": "2321400",
    "end": "2328759"
  },
  {
    "text": "underscore, underscore,\nmethod implemented? It is and it's just going to\ndo whatever's inside here.",
    "start": "2328759",
    "end": "2334730"
  },
  {
    "text": "So it's going to say self\ndot numerator plus other dot denominator. It's going to calculate\nthe top and the bottom.",
    "start": "2334730",
    "end": "2339920"
  },
  {
    "text": "It's going to turn a\nnew fraction object. ",
    "start": "2339920",
    "end": "2345470"
  },
  {
    "text": "So this is going to be 4 plus 12\ndivided by 16, and 16 over 16.",
    "start": "2345470",
    "end": "2367099"
  },
  {
    "text": "So C as a fraction\nobject is going to be 16 for the numerator\nand 16 for the denominator",
    "start": "2367100",
    "end": "2375260"
  },
  {
    "text": "because it's a fraction object. ",
    "start": "2375260",
    "end": "2383890"
  },
  {
    "text": "If I print C, it should\nprint 16 over 16, so we can even run it,\nso print 16 over 16.",
    "start": "2383890",
    "end": "2390760"
  },
  {
    "text": "If I print floats C, so this\nspecial method float here is going to say, is there a\nmethod that converts a fraction",
    "start": "2390760",
    "end": "2398920"
  },
  {
    "text": "to a float and there is. It's this one\nimplemented right here. So it's just going to divide\nthe two numbers, top and bottom,",
    "start": "2398920",
    "end": "2404770"
  },
  {
    "text": "which gives me 1. So it's this one here and here.",
    "start": "2404770",
    "end": "2410720"
  },
  {
    "text": "Notice I'm doing the\nexact same method call, except I'm doing it\nthe other way where you type in the name of the\nclass, name of the method,",
    "start": "2410720",
    "end": "2420610"
  },
  {
    "text": "and then what you're\ncalling it on, and this gives the exact\nsame value here, 1.0.",
    "start": "2420610",
    "end": "2427430"
  },
  {
    "text": "And then here I'm calling\nthe method inverse on object B which is going to\ninvert 3 over 4 to be 4 over 3.",
    "start": "2427430",
    "end": "2436849"
  },
  {
    "text": "And then I'm converting\nit to a float and then I'm printing the value. So it gives me 1.33.",
    "start": "2436850",
    "end": "2443349"
  },
  {
    "text": "So take a look at this\ncode in more detail",
    "start": "2443350",
    "end": "2450820"
  },
  {
    "text": "and see if you can trace through\nall of those different things and see if you can also write\nyour own new fraction objects.",
    "start": "2450820",
    "end": "2457560"
  },
  {
    "text": "OK. So last slide. Power of object\noriented programming",
    "start": "2457560",
    "end": "2462730"
  },
  {
    "text": "is that you can bundle\ntogether objects that are of the exact same type. And all of these\nobjects are going to have the same\ndata representation",
    "start": "2462730",
    "end": "2469720"
  },
  {
    "text": "and the same methods\nthat you can do on them. And ultimately, you're\ngoing to be building",
    "start": "2469720",
    "end": "2475730"
  },
  {
    "text": "these layers of abstraction. So you're going to be building\non a basic object type in Python, you're going to have\ninteger objects, float objects.",
    "start": "2475730",
    "end": "2487160"
  },
  {
    "text": "On top of those, you can\ncreate lists, dictionaries. And on top of\nthose, you can even create your own object types as\nwe saw in this lecture today.",
    "start": "2487160",
    "end": "2497080"
  },
  {
    "start": "2497080",
    "end": "2503574"
  }
]