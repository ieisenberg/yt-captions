[
  {
    "start": "0",
    "end": "550"
  },
  {
    "text": "The Beta is an example of\na reduced-instruction-set",
    "start": "550",
    "end": "3710"
  },
  {
    "text": "computer (RISC) architecture.",
    "start": "3710",
    "end": "5370"
  },
  {
    "text": "“Reduced” refers to the\nfact that in the Beta ISA,",
    "start": "5370",
    "end": "8440"
  },
  {
    "text": "most instructions only\naccess the internal registers",
    "start": "8440",
    "end": "11370"
  },
  {
    "text": "for their operands\nand destination.",
    "start": "11370",
    "end": "13870"
  },
  {
    "text": "Memory values are\nloaded and stored",
    "start": "13870",
    "end": "15780"
  },
  {
    "text": "using separate memory-access\ninstructions, which",
    "start": "15780",
    "end": "19140"
  },
  {
    "text": "implement only a simple\naddress calculation.",
    "start": "19140",
    "end": "23150"
  },
  {
    "text": "These reductions\nlead to smaller,",
    "start": "23150",
    "end": "25270"
  },
  {
    "text": "higher-performance hardware\nimplementations and simpler",
    "start": "25270",
    "end": "28290"
  },
  {
    "text": "compilers on the software side.",
    "start": "28290",
    "end": "30760"
  },
  {
    "text": "The ARM and MIPS ISAs are other\nexamples of RISC architectures.",
    "start": "30760",
    "end": "35230"
  },
  {
    "text": "Intel’s x86 ISA is more complex.",
    "start": "35230",
    "end": "39840"
  },
  {
    "text": "There is a limited amount of\nstorage inside of the CPU —",
    "start": "39840",
    "end": "42850"
  },
  {
    "text": "using the language\nof sequential logic,",
    "start": "42850",
    "end": "44800"
  },
  {
    "text": "we’ll refer to this\nas the CPU state.",
    "start": "44800",
    "end": "48020"
  },
  {
    "text": "There’s a 32-bit program counter\n(PC for short) that holds",
    "start": "48020",
    "end": "52930"
  },
  {
    "text": "the address of the current\ninstruction in main memory.",
    "start": "52930",
    "end": "56560"
  },
  {
    "text": "And there are\nthirty-two registers,",
    "start": "56560",
    "end": "58220"
  },
  {
    "text": "numbered 0 through 31.",
    "start": "58220",
    "end": "60570"
  },
  {
    "text": "Each register holds\na 32-bit value.",
    "start": "60570",
    "end": "63410"
  },
  {
    "text": "We’ll use use 5-bit fields\nin the instruction to specify",
    "start": "63410",
    "end": "66300"
  },
  {
    "text": "the number of the register to be\nused an operand or destination.",
    "start": "66300",
    "end": "71080"
  },
  {
    "text": "As shorthand, we’ll refer to a\nregister using the prefix “R”",
    "start": "71080",
    "end": "74820"
  },
  {
    "text": "followed by its number, e.g.,\n“R0” refers to the register",
    "start": "74820",
    "end": "78870"
  },
  {
    "text": "selected by the\n5-bit field 0b00000.",
    "start": "78870",
    "end": "81230"
  },
  {
    "text": "Register 31 (R31) is special\n— its value always reads as 0",
    "start": "81230",
    "end": "90740"
  },
  {
    "text": "and writes to R31 have\nno affect on its value.",
    "start": "90740",
    "end": "94909"
  },
  {
    "text": "The number of bits\nin each register",
    "start": "94910",
    "end": "96590"
  },
  {
    "text": "and hence the number of bits\nsupported by ALU operations",
    "start": "96590",
    "end": "99719"
  },
  {
    "text": "is a fundamental\nparameter of the ISA.",
    "start": "99720",
    "end": "103060"
  },
  {
    "text": "The Beta is a\n32-bit architecture.",
    "start": "103060",
    "end": "106460"
  },
  {
    "text": "Many modern computers\nare 64-bit architectures,",
    "start": "106460",
    "end": "108950"
  },
  {
    "text": "meaning they have\n64-bit registers",
    "start": "108950",
    "end": "111100"
  },
  {
    "text": "and a 64-bit datapath.",
    "start": "111100",
    "end": "113590"
  },
  {
    "text": "Main memory is an\narray of 32-bit words.",
    "start": "113590",
    "end": "116250"
  },
  {
    "text": "Each word contains\nfour 8-bit bytes.",
    "start": "116250",
    "end": "119770"
  },
  {
    "text": "The bytes are\nnumbered 0 through 3,",
    "start": "119770",
    "end": "122009"
  },
  {
    "text": "with byte 0 corresponding\nto the low-order 7 bits",
    "start": "122010",
    "end": "125310"
  },
  {
    "text": "of the 32-bit value, and so on.",
    "start": "125310",
    "end": "129090"
  },
  {
    "text": "The Beta ISA only\nsupports word accesses,",
    "start": "129090",
    "end": "131720"
  },
  {
    "text": "either loading or storing\nfull 32-bit words.",
    "start": "131720",
    "end": "135300"
  },
  {
    "text": "Most “real” computers also\nsupport accesses to bytes",
    "start": "135300",
    "end": "138310"
  },
  {
    "text": "and half-words.",
    "start": "138310",
    "end": "140970"
  },
  {
    "text": "Even though the Beta only\naccesses full words, following",
    "start": "140970",
    "end": "144140"
  },
  {
    "text": "a convention used by many\nISAs it uses byte addresses.",
    "start": "144140",
    "end": "148630"
  },
  {
    "text": "Since there are 4\nbytes in each word,",
    "start": "148630",
    "end": "150560"
  },
  {
    "text": "consecutive words in memory\nhave addresses that differ by 4.",
    "start": "150560",
    "end": "155430"
  },
  {
    "text": "So the first word in\nmemory has address 0,",
    "start": "155430",
    "end": "158650"
  },
  {
    "text": "the second word\naddress 4, and so on.",
    "start": "158650",
    "end": "161930"
  },
  {
    "text": "You can see the addresses to\nleft of each memory location",
    "start": "161930",
    "end": "164879"
  },
  {
    "text": "in the diagram shown here.",
    "start": "164880",
    "end": "167340"
  },
  {
    "text": "Note that we’ll usually use\nhexadecimal notation when",
    "start": "167340",
    "end": "169959"
  },
  {
    "text": "specifying addresses and other\nbinary values — the “0x” prefix",
    "start": "169960",
    "end": "174740"
  },
  {
    "text": "indicates when a\nnumber is in hex.",
    "start": "174740",
    "end": "177653"
  },
  {
    "text": "When drawing a memory diagram,\nwe’ll follow the convention",
    "start": "177653",
    "end": "180070"
  },
  {
    "text": "that addresses increase as\nyou read from top to bottom.",
    "start": "180070",
    "end": "184420"
  },
  {
    "text": "The Beta ISA supports\n32-bit byte addressing,",
    "start": "184420",
    "end": "186680"
  },
  {
    "text": "so an address fits exactly into\none 32-bit register or memory",
    "start": "186680",
    "end": "190590"
  },
  {
    "text": "location.",
    "start": "190590",
    "end": "192519"
  },
  {
    "text": "The maximum memory size is 2^32\nbytes or 2^30 words — that’s 4",
    "start": "192520",
    "end": "197820"
  },
  {
    "text": "gigabytes (4 GB) or one\nbillion words of main memory.",
    "start": "197820",
    "end": "202970"
  },
  {
    "text": "Some Beta implementations\nmight actually",
    "start": "202970",
    "end": "204940"
  },
  {
    "text": "have a smaller\nmain memory, i.e.,",
    "start": "204940",
    "end": "206490"
  },
  {
    "text": "one with fewer than\n1 billion locations.",
    "start": "206490",
    "end": "210750"
  },
  {
    "text": "Why have separate\nregisters and main memory?",
    "start": "210750",
    "end": "213570"
  },
  {
    "text": "Well, modern programs and\ndatasets are very large,",
    "start": "213570",
    "end": "216700"
  },
  {
    "text": "so we’ll want to have a large\nmain memory to hold everything.",
    "start": "216700",
    "end": "219989"
  },
  {
    "text": "But large memories are slow\nand usually only support access",
    "start": "219990",
    "end": "223590"
  },
  {
    "text": "to one location at a time, so\nthey don’t make good storage",
    "start": "223590",
    "end": "226890"
  },
  {
    "text": "for use in each instruction\nwhich needs to access several",
    "start": "226890",
    "end": "229880"
  },
  {
    "text": "operands and store a result.",
    "start": "229880",
    "end": "232530"
  },
  {
    "text": "If we used only one\nlarge storage array,",
    "start": "232530",
    "end": "234970"
  },
  {
    "text": "then an instruction would need\nto have three 32-bit addresses",
    "start": "234970",
    "end": "239300"
  },
  {
    "text": "to specify the two source\noperands and destination — each",
    "start": "239300",
    "end": "243080"
  },
  {
    "text": "instruction encoding\nwould be huge!",
    "start": "243080",
    "end": "245740"
  },
  {
    "text": "And the required memory\naccesses would have to be",
    "start": "245740",
    "end": "248270"
  },
  {
    "text": "one-after-the-other, really\nslowing down instruction",
    "start": "248270",
    "end": "251370"
  },
  {
    "text": "execution.",
    "start": "251370",
    "end": "253590"
  },
  {
    "text": "On the other hand, if we use\nregisters to hold the operands",
    "start": "253590",
    "end": "256470"
  },
  {
    "text": "and serve as the\ndestination, we can",
    "start": "256470",
    "end": "258480"
  },
  {
    "text": "design the register\nhardware for parallel access",
    "start": "258480",
    "end": "261310"
  },
  {
    "text": "and make it very fast.",
    "start": "261310",
    "end": "263970"
  },
  {
    "text": "To keep the speed up we won’t\nbe able to have very many",
    "start": "263970",
    "end": "266330"
  },
  {
    "text": "registers — a classic\nsize-vs-speed performance",
    "start": "266330",
    "end": "269919"
  },
  {
    "text": "tradeoff we see in digital\nsystems all the time.",
    "start": "269920",
    "end": "273450"
  },
  {
    "text": "In the end, the tradeoff\nleading to the best performance",
    "start": "273450",
    "end": "276590"
  },
  {
    "text": "is to have a small number\nof very fast registers used",
    "start": "276590",
    "end": "279380"
  },
  {
    "text": "by most instructions and a\nlarge but slow main memory.",
    "start": "279380",
    "end": "283660"
  },
  {
    "text": "So that’s what\nthe BETA ISA does.",
    "start": "283660",
    "end": "287380"
  },
  {
    "text": "In general, all program data\nwill reside in main memory.",
    "start": "287380",
    "end": "291370"
  },
  {
    "text": "Each variable used by the\nprogram “lives” in a specific",
    "start": "291370",
    "end": "294770"
  },
  {
    "text": "main memory location and so\nhas a specific memory address.",
    "start": "294770",
    "end": "299050"
  },
  {
    "text": "For example, in\nthe diagram below,",
    "start": "299050",
    "end": "300789"
  },
  {
    "text": "the value of variable “x”\nis stored in memory location",
    "start": "300790",
    "end": "303890"
  },
  {
    "text": "0x1008, and the value of “y”\nis stored in memory location",
    "start": "303890",
    "end": "309350"
  },
  {
    "text": "0x100C, and so on.",
    "start": "309350",
    "end": "312880"
  },
  {
    "text": "To perform a computation,\ne.g., to compute x*37 and store",
    "start": "312880",
    "end": "317100"
  },
  {
    "text": "the result in y, we would have\nto first load the value of x",
    "start": "317100",
    "end": "320790"
  },
  {
    "text": "into a register, say, R0.",
    "start": "320790",
    "end": "323380"
  },
  {
    "text": "Then we would have the datapath\nmultiply the value in R0",
    "start": "323380",
    "end": "326700"
  },
  {
    "text": "by 37, storing the\nresult back into R0.",
    "start": "326700",
    "end": "330730"
  },
  {
    "text": "Here we’ve assumed that\nthe constant 37 is somehow",
    "start": "330730",
    "end": "333330"
  },
  {
    "text": "available to the datapath\nand doesn’t itself need to be",
    "start": "333330",
    "end": "336360"
  },
  {
    "text": "loaded from memory.",
    "start": "336360",
    "end": "338439"
  },
  {
    "text": "Finally, we would\nwrite the updated value",
    "start": "338440",
    "end": "340650"
  },
  {
    "text": "in R0 back into memory\nat the location for y.",
    "start": "340650",
    "end": "344500"
  },
  {
    "text": "Whew!",
    "start": "344500",
    "end": "345000"
  },
  {
    "text": "A lot of steps…",
    "start": "345000",
    "end": "347145"
  },
  {
    "text": "Of course, we\ncould avoid all the",
    "start": "347145",
    "end": "348520"
  },
  {
    "text": "loading and storing if we chose\nto keep the values for x and y",
    "start": "348520",
    "end": "352650"
  },
  {
    "text": "in registers.",
    "start": "352650",
    "end": "354460"
  },
  {
    "text": "Since there are\nonly 32 registers,",
    "start": "354460",
    "end": "356350"
  },
  {
    "text": "we can’t do this for\nall of our variables,",
    "start": "356350",
    "end": "358620"
  },
  {
    "text": "but maybe we could arrange to\nload x and y into registers,",
    "start": "358620",
    "end": "361790"
  },
  {
    "text": "do all the required computations\ninvolving x and y by referring",
    "start": "361790",
    "end": "365380"
  },
  {
    "text": "to those registers, and\nthen, when we’re done,",
    "start": "365380",
    "end": "368250"
  },
  {
    "text": "store changes to x and y back\ninto memory for later use.",
    "start": "368250",
    "end": "373270"
  },
  {
    "text": "Optimizing performance by\nkeeping often-used values",
    "start": "373270",
    "end": "376479"
  },
  {
    "text": "in registers is a favorite trick\nof programmers and compiler",
    "start": "376480",
    "end": "379520"
  },
  {
    "text": "writers.",
    "start": "379520",
    "end": "381069"
  },
  {
    "text": "So the basic program\ntemplate is some loads",
    "start": "381070",
    "end": "384880"
  },
  {
    "text": "to bring values into\nthe registers, followed",
    "start": "384880",
    "end": "387410"
  },
  {
    "text": "by computation, followed\nby any necessary stores.",
    "start": "387410",
    "end": "391460"
  },
  {
    "text": "ISAs that use this template\nare usually referred",
    "start": "391460",
    "end": "394100"
  },
  {
    "text": "to as “load-store\narchitectures”.",
    "start": "394100",
    "end": "396683"
  },
  {
    "start": "396683",
    "end": "397183"
  }
]