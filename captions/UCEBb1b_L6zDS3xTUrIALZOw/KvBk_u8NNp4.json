[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6060"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or to\nview additional materials",
    "start": "6060",
    "end": "12690"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "12690",
    "end": "25735"
  },
  {
    "text": "PROFESSOR: All right. Welcome back to 6.890. Today we're going to look at\na bunch of different graph",
    "start": "25735",
    "end": "32970"
  },
  {
    "text": "problems, that is, their\nunifying feature is they're problems on graphs. We're going to look\nat vertex cover,",
    "start": "32970",
    "end": "40080"
  },
  {
    "text": "we're going to look at\nvertex coloring of graphs, and we're going to look at some\nordering problems on graphs,",
    "start": "40080",
    "end": "47600"
  },
  {
    "text": "and I think, one more,\norientations of graphs.",
    "start": "47600",
    "end": "52710"
  },
  {
    "text": "So these are all going to\nbe some kind of constraint that we place on the\ngraph or something we want to do with the graph.",
    "start": "52710",
    "end": "58910"
  },
  {
    "text": "This is sort of a\nmiscellaneous lecture. We've spent a lot of\ntime talking about 3SAT,",
    "start": "58910",
    "end": "64360"
  },
  {
    "text": "most recently Hamiltonicity, and\nbefore all that, 3-partition, which are the most popular,\nmost useful, I would say,",
    "start": "64360",
    "end": "74150"
  },
  {
    "text": "ways of doing NP\nhardness reductions. But there are few\nothers that are good to know that are sometimes\nrelevant, and so this is that.",
    "start": "74150",
    "end": "82610"
  },
  {
    "text": "Each one is a little\nbit smaller in content, so we're just going to\nlump them all together.",
    "start": "82610",
    "end": "88000"
  },
  {
    "text": "So we'll start\nwith vertex cover. We saw this slide\nfrom lecture four, I think, from planar 3SAT.",
    "start": "88000",
    "end": "95619"
  },
  {
    "text": "Lichtenstein proved\nplanar vertex covers hard. Vertex cover, remember,\nis this problem.",
    "start": "95620",
    "end": "101414"
  },
  {
    "start": "101415",
    "end": "108320"
  },
  {
    "text": "You want to choose\na set of vertices, let's say k vertices,\nto hit all the edges.",
    "start": "108320",
    "end": "115735"
  },
  {
    "start": "115735",
    "end": "121004"
  },
  {
    "text": "A different way of thinking\nabout this problem-- and a lot of these problems, you can think\nof in a more logical context,",
    "start": "121004",
    "end": "126380"
  },
  {
    "text": "formulas and so on-- this is\nessentially a form of 2SAT",
    "start": "126380",
    "end": "136800"
  },
  {
    "text": "with k true variables.",
    "start": "136800",
    "end": "143825"
  },
  {
    "text": "It's even a positive 2SAT. ",
    "start": "143825",
    "end": "150100"
  },
  {
    "text": "Because essentially,\nyou could think of there being a\nvariable for each vertex,",
    "start": "150100",
    "end": "155280"
  },
  {
    "text": "whether you choose\nit, and then the edge is just stating the\nconstraint that you should choose one or the\nother endpoints",
    "start": "155280",
    "end": "162549"
  },
  {
    "text": "and so that's a 2SAT constraint. And 2SAT is easy,\nbut when you say,",
    "start": "162550",
    "end": "168426"
  },
  {
    "text": "I want to solve 2SAT with only\nsetting k of the variables to be true, then it becomes this\nNP hard problem vertex cover.",
    "start": "168426",
    "end": "173920"
  },
  {
    "text": "And so we have-- This was a\nreduction from planar 3SAT to planar vertex cover, so\nwe know this problem is hard.",
    "start": "173920",
    "end": "179660"
  },
  {
    "text": "Let's use it for some\nthings, and let's also prove some even more\nrelated versions are hard.",
    "start": "179660",
    "end": "190290"
  },
  {
    "text": "So this one was already\nmaximum degree 3,",
    "start": "190290",
    "end": "198870"
  },
  {
    "text": "if we have some unused copies,\nwe'll get degree 2 vertices, but certainly every vertex\nis at most degree 3.",
    "start": "198870",
    "end": "204120"
  },
  {
    "text": "And it was planar, so\nthat's already cool. Planar max degree 3 is hard.",
    "start": "204120",
    "end": "217910"
  },
  {
    "text": "Some polynomial versions\nto be careful of if you're using vertex cover\nas a starting point.",
    "start": "217910",
    "end": "225680"
  },
  {
    "text": "One is what I call\nexact vertex cover. ",
    "start": "225680",
    "end": "234590"
  },
  {
    "text": "Each edge is incident to\nexactly one chosen vertex.",
    "start": "234590",
    "end": "247815"
  },
  {
    "text": " So the vertex cover could\nbe one or the other.",
    "start": "247815",
    "end": "255360"
  },
  {
    "text": "If you have exclusively, or\nbetween those two, it's easy.",
    "start": "255360",
    "end": "262960"
  },
  {
    "text": "And another version,\nsort of the duel between vertices\nand edges, one might",
    "start": "262960",
    "end": "268680"
  },
  {
    "text": "call it edge cover,\nwhich would be choose",
    "start": "268680",
    "end": "273729"
  },
  {
    "text": "k edges to hit all vertices. ",
    "start": "273730",
    "end": "282884"
  },
  {
    "text": "AUDIENCE: Doesn't exact\nedge cover perfect matching? PROFESSOR: Exact vertex cover\nis perfect matching, thank you.",
    "start": "282885",
    "end": "291500"
  },
  {
    "text": "This is also essentially\nmaximum cardinality matching because the more\nyou can be a matching,",
    "start": "291500",
    "end": "297567"
  },
  {
    "text": "the more efficient\nyou're going to be, and then every isolated\nvertex after you have a maximum\ncardinality matching,",
    "start": "297567",
    "end": "302820"
  },
  {
    "text": "you just have to cover\nthose with one more. So both of these\nreduce to matching. So it's obvious in\nhindsight, but be careful,",
    "start": "302820",
    "end": "310390"
  },
  {
    "text": "if you're ever doing vertex\ncover, not to accidentally do one of these.",
    "start": "310390",
    "end": "316050"
  },
  {
    "text": "OK, so this morning's. ",
    "start": "316050",
    "end": "321930"
  },
  {
    "text": "Here's a cool version\nof vertex cover. It can be useful. We'll use it in a moment to\nprove a particular problem",
    "start": "321930",
    "end": "329020"
  },
  {
    "text": "hard, connected vertex cover. So usually, with a\nvertex cover, you imagine you're just\ngrabbing vertices",
    "start": "329020",
    "end": "334950"
  },
  {
    "text": "from all over the graph. With connected vertex\ncover, you require that the chosen vertices\ninduce a connected subgraph.",
    "start": "334950",
    "end": "343885"
  },
  {
    "start": "343885",
    "end": "361120"
  },
  {
    "text": "So this is not, obviously,\neasier or harder as a problem. It's more restrictive\non the cover,",
    "start": "361120",
    "end": "368100"
  },
  {
    "text": "but we can prove that\nit's NP hard by reduction",
    "start": "368100",
    "end": "373160"
  },
  {
    "text": "from this problem. And so in particular,\nwe'll get that it's NP hard for planar max\ndegree 4 graphs.",
    "start": "373160",
    "end": "382750"
  },
  {
    "start": "382750",
    "end": "398290"
  },
  {
    "text": "So here's the reduction. I think this reduction\nis quite cool,",
    "start": "398290",
    "end": "403439"
  },
  {
    "text": "because it uses planarity. It may not be necessary\nto use planarity, but this reduction definitely\nuses planarity in a rich way.",
    "start": "403440",
    "end": "412172"
  },
  {
    "text": "So even if you were trying to\nprove this without planarity, it would be more awkward. So, suppose you\nhave a planar graph",
    "start": "412172",
    "end": "417860"
  },
  {
    "text": "and you want to find a minimum\nvertex cover in this graph. We're going to modify\nthe graph in this way.",
    "start": "417860",
    "end": "424970"
  },
  {
    "text": "This is yet another\nGarey and Johnson paper. So you can see the original\nfaces of the graph,",
    "start": "424970",
    "end": "432061"
  },
  {
    "text": "and then for each\nface, we're going to add in sort of\na copy of the face.",
    "start": "432062",
    "end": "439160"
  },
  {
    "text": "So also the outside face\ngets this kind of curvy copy. And so in particular,\nat every vertex",
    "start": "439160",
    "end": "445860"
  },
  {
    "text": "there's now going to be\nfive copies of the vertex. One on the one incident face,\none on the other incident",
    "start": "445860",
    "end": "452339"
  },
  {
    "text": "face, and then for\nevery one of these we're going to have an\nextra leaf hanging off. Why leaves? Leaves are really cool, or\nreally annoying, or whatever.",
    "start": "452339",
    "end": "461090"
  },
  {
    "text": "They're very forceful in\nthe case of vertex cover. If you look at a leaf--\nSo here's a leaf.",
    "start": "461090",
    "end": "469532"
  },
  {
    "text": "It's connected to some vertex\nthat's presumably not a leaf, otherwise there'd be\nan isolated component.",
    "start": "469532",
    "end": "475470"
  },
  {
    "text": "It's never useful to put\nthis in the vertex cover. If you decide to put\nthis in the vertex cover,",
    "start": "475470",
    "end": "481360"
  },
  {
    "text": "you might as well\nchoose this guy instead, because this covers more. It covers all the edges that\nthis one did, namely that one",
    "start": "481360",
    "end": "487469"
  },
  {
    "text": "edge, and some other edges. Maybe it was already\nin the vertex cover. Then it wasn't minimum.",
    "start": "487470",
    "end": "492608"
  },
  {
    "text": "Then you got smaller. But you can assume there is\nan optimal solution where you never put leaves\nin the vertex cover.",
    "start": "492608",
    "end": "501540"
  },
  {
    "text": "What that means is, wherever\nwe add a leaf like this, it basically forces\nyou-- It lets",
    "start": "501540",
    "end": "506860"
  },
  {
    "text": "you know that you might as well\nhave this in the vertex cover. There is an optimal solution\nwhere this is in the vertex",
    "start": "506860",
    "end": "512029"
  },
  {
    "text": "cover, because the only other\noption is that this one is, and then you can move it over. So these vertices on\nthe copies of the faces,",
    "start": "512030",
    "end": "521520"
  },
  {
    "text": "those are all forced to\nbe in the cover, which means this entire copy of the\nface, the inset copy the face,",
    "start": "521520",
    "end": "529730"
  },
  {
    "text": "is completely covered\nalready, plus these edges are covered connecting\nthe inner copy of the face",
    "start": "529730",
    "end": "537110"
  },
  {
    "text": "to the original face. ",
    "start": "537110",
    "end": "542329"
  },
  {
    "text": "So there's still stuff to cover. So in particular, it's\nstill interesting to put one of the original\nvertices in the cover.",
    "start": "542330",
    "end": "548430"
  },
  {
    "text": "That would cover these\nthree, now every edge got cut into three parts.",
    "start": "548430",
    "end": "553519"
  },
  {
    "text": "So this would cover\n1/3 of the edge. The idea is, if you\nput this in the cover and you cover those\nthree guys, we still",
    "start": "553520",
    "end": "560680"
  },
  {
    "text": "have to cover these\ntwo, and we'll do that by putting this\nvertex in the cover.",
    "start": "560680",
    "end": "567240"
  },
  {
    "text": "Because one of these two\nhas to be in in order to cover this middle\nedge, and the idea",
    "start": "567240",
    "end": "572350"
  },
  {
    "text": "is that you'll be able to\njust put one of them in. You'll be able to put\nexactly one of these two on every subdivided edge, if\nand only if there is a vertex",
    "start": "572350",
    "end": "580030"
  },
  {
    "text": "cover of the right size. So if I do the arithmetic\nhere, the claim",
    "start": "580030",
    "end": "588720"
  },
  {
    "text": "is we added exactly 5 times\nthe original number of edges",
    "start": "588720",
    "end": "599279"
  },
  {
    "text": "to the optimal vertex cover. 5 because for every original\nedge we added 2 here,",
    "start": "599280",
    "end": "613170"
  },
  {
    "text": "2 here, and then 1 of these too. So there were 6 vertices\naround this edge that we added,",
    "start": "613170",
    "end": "621280"
  },
  {
    "text": "and if we can cover, say,\nthis edge using that vertex",
    "start": "621280",
    "end": "626289"
  },
  {
    "text": "or cover this edge\nusing that vertex, which is the same as saying that this\noriginal edge is covered by one side or the other, then we\nonly need one of these two guys",
    "start": "626289",
    "end": "633220"
  },
  {
    "text": "and then we'll get away\nwith just 5 per edge. So the original thing has\na vertex cover of size k",
    "start": "633220",
    "end": "638850"
  },
  {
    "text": "if and only if this new thing\nhas a vertex cover size of k plus 5 times the\nnumber of edges.",
    "start": "638850",
    "end": "645460"
  },
  {
    "text": "Question? AUDIENCE: What stops you\nfrom taking one of the--",
    "start": "645460",
    "end": "651625"
  },
  {
    "text": "PROFESSOR: Taking both\nof these, for example? AUDIENCE: Yeah. PROFESSOR: Yeah. So that's a good\nthing to worry about. Maybe you take both\nand then you don't",
    "start": "651625",
    "end": "657810"
  },
  {
    "text": "have to choose either\none, so it doesn't look like a vertex cover, but\nthis is a similar argument to the leaves.",
    "start": "657810",
    "end": "662850"
  },
  {
    "text": "If you choose both\nof these guys, because you know that\nthe other four are there, you can always move one\nof them to the vertex.",
    "start": "662850",
    "end": "668980"
  },
  {
    "text": "So you'll get a\nrecover vertex cover. AUDIENCE: [INAUDIBLE]\nfives times the edges plus the number for\nvertices because you also",
    "start": "668980",
    "end": "677550"
  },
  {
    "text": "have to cover the\nleaves off the vertices? PROFESSOR: These leaves? AUDIENCE: No, the one\nwith the vertices. PROFESSOR: Oh, these ones.",
    "start": "677550",
    "end": "683430"
  },
  {
    "text": "Whoops. Oh, so it looks\nlike they're always increasing the degree to 4. Connected vertex, however, is\nactually an important problem.",
    "start": "683430",
    "end": "690680"
  },
  {
    "text": "People think about it a lot. For some kind of\nnetworking applications,",
    "start": "690680",
    "end": "695810"
  },
  {
    "text": "you want to build some backbone\nthat can reach everybody, you need a connected network.",
    "start": "695810",
    "end": "701259"
  },
  {
    "text": "But Garey and Johnson's\noriginal motivation for introducing that problem is\nrectilinear Steiner tree, also",
    "start": "701260",
    "end": "708707"
  },
  {
    "text": "an important networking problem. Steiner tree is about\nusually you imagine",
    "start": "708707",
    "end": "713810"
  },
  {
    "text": "you're given some space where\nyou can build a network, and you're given some things\nthat you want to interconnect.",
    "start": "713810",
    "end": "719720"
  },
  {
    "text": "So maybe you're building a\nnew city around some existing houses, you're given\nsome points in the plane",
    "start": "719720",
    "end": "726080"
  },
  {
    "text": "that represent houses. Now you want to build roads\nto connect them all together. You want to minimize the amount\nof roads you have to build,",
    "start": "726080",
    "end": "732220"
  },
  {
    "text": "so you're going to build a tree. And Steiner tree means that\nyou can add intersections wherever you want, as opposed\nto a minimum spanning tree,",
    "start": "732220",
    "end": "740920"
  },
  {
    "text": "where you can only turn\nat the given vertices. If you have some points\nlike this in the plane,",
    "start": "740920",
    "end": "753249"
  },
  {
    "text": "the best way to\nconnect them together in the Euclidean metric is\nto have-- I didn't draw it",
    "start": "753249",
    "end": "758870"
  },
  {
    "text": "super well-- to have\n120 degree angles at all the intersections,\nsomething you can prove.",
    "start": "758870",
    "end": "765490"
  },
  {
    "text": "Here, we're thinking about\nrectilinear Steiner tree, which is the Manhattan version,\nwhere you're only",
    "start": "765490",
    "end": "771610"
  },
  {
    "text": "allowed to draw orthogonal\nconnections, like that.",
    "start": "771610",
    "end": "777660"
  },
  {
    "text": "So you can still\nadd extra vertices if you want to minimize\nthe total length of these connections given\nendpoints in the plane.",
    "start": "777660",
    "end": "784170"
  },
  {
    "text": "This problem is NP hard,\nand you can prove it in a very simple way.",
    "start": "784170",
    "end": "789630"
  },
  {
    "text": "This is the reduction\nfrom the previous problem.",
    "start": "789630",
    "end": "795130"
  },
  {
    "text": "So the first step\nis-- And the reason they care about max degree\n4 in the previous problem",
    "start": "795130",
    "end": "800750"
  },
  {
    "text": "is to draw the graph in the\nplane in orthogonal drawings. So every vertex becomes\na point, every edge",
    "start": "800750",
    "end": "806890"
  },
  {
    "text": "become some orthogonal path\nconnecting two vertices. We've done that in\nprevious proofs. So now everything's drawn in\nthe plane, something like this.",
    "start": "806890",
    "end": "814399"
  },
  {
    "text": "And that each\nvertex, we're going to erase a little\ncircle of radius 2,",
    "start": "814400",
    "end": "822069"
  },
  {
    "text": "and then that leaves\na bunch of segments, and the segments\nconnected together,",
    "start": "822070",
    "end": "827251"
  },
  {
    "text": "and now we're just going to\nplace along those segments a whole bunch of points. And so the idea is that\nthe Steiner tree should",
    "start": "827251",
    "end": "835209"
  },
  {
    "text": "connect all those together, and\nthen it's left with a choice. And those are all going\nto be distance 1 apart.",
    "start": "835210",
    "end": "841529"
  },
  {
    "text": "Then it's left with a choice\nof where to connect things together, which vertices. So a little bit more\nformally, each of these edges",
    "start": "841530",
    "end": "852670"
  },
  {
    "text": "is going to be scaled up by a\nhuge factor, 4 times n squared,",
    "start": "852670",
    "end": "858750"
  },
  {
    "text": "where n, I think, is the\ndimension of the n by n grid. So these are the original\ngrids, the dash lines.",
    "start": "858750",
    "end": "867460"
  },
  {
    "text": "Originally, when you draw\nit on a graph, on a grid, you imagine probably\nthese are unit length. Scale it up to the length\n4n squared and then the rule",
    "start": "867460",
    "end": "877050"
  },
  {
    "text": "is, wherever you have an\ninteger point along that line, add a dot. And so they will be spaced\nwith distances of 1.",
    "start": "877050",
    "end": "884530"
  },
  {
    "text": "Over here, we have\ndistances of 2 between the vertex, which is\nnot actually a point in the set,",
    "start": "884530",
    "end": "891680"
  },
  {
    "text": "and here. And so distance of 4 between\nany pairs of those points.",
    "start": "891680",
    "end": "896700"
  },
  {
    "text": "Because these\ndistances are so huge, you never want to connect from\nhere to anywhere else that's",
    "start": "896700",
    "end": "902990"
  },
  {
    "text": "not at this local intersection. OK? And there's an\nargument about that,",
    "start": "902990",
    "end": "908009"
  },
  {
    "text": "looking at these regions\nof where you could possibly want to go, and there's only\nthose endpoints in there",
    "start": "908010",
    "end": "914690"
  },
  {
    "text": "and these are really\ncheap to connect. So it really only pays to\nconnect things in between. ",
    "start": "914690",
    "end": "921570"
  },
  {
    "text": "So basically, you\nshow that you're forced to do all the\nunit length connections, and now you just have to\nmake the thing connected.",
    "start": "921570",
    "end": "929800"
  },
  {
    "text": "Question? AUDIENCE: Why 2? PROFESSOR: Because\n2 is bigger than 1. ",
    "start": "929800",
    "end": "937270"
  },
  {
    "text": "Yeah? AUDIENCE: I guess with the\nvertex covers that you'd want to fill in that whole cross?",
    "start": "937270",
    "end": "942505"
  },
  {
    "text": "But maybe there's a fear\nthat you would just connect-- PROFESSOR: No. You won't fill in the whole\ncross in the vertex cover.",
    "start": "942505",
    "end": "948230"
  },
  {
    "text": "Let me tell what\nyou're going to do.  This proof is-- I mean, the\nreduction is super simple,",
    "start": "948230",
    "end": "955280"
  },
  {
    "text": "but the argument is confusing. So here's the idea.",
    "start": "955280",
    "end": "961340"
  },
  {
    "start": "961340",
    "end": "1018330"
  },
  {
    "text": "So there's essentially\ntwo things going on, but let's first\nthink about the case where I give you a connected\nvertex cover of some size.",
    "start": "1018330",
    "end": "1026390"
  },
  {
    "text": "What I'm going to do is\nfirst-- or you can think of it in either order--\nI'm, in particular,",
    "start": "1026390",
    "end": "1033740"
  },
  {
    "text": "going to connect all\nthe vertices together. Now, there's no particular\nreason to connect the vertices,",
    "start": "1033740",
    "end": "1039189"
  },
  {
    "text": "but I'm just going to do it\nanyway, or think about doing it anyway, by a spanning tree.",
    "start": "1039190",
    "end": "1045220"
  },
  {
    "text": "So there's lots of\nredundant connectivity here. I don't need to\nconnect this, to this, to this all the way around.",
    "start": "1045220",
    "end": "1050440"
  },
  {
    "text": "I can drop one of\nthose connections because I just need\nto be connected, I just need a spanning tree.",
    "start": "1050440",
    "end": "1056350"
  },
  {
    "text": "And in general, there are v\nvertices to connect together,",
    "start": "1056350",
    "end": "1063530"
  },
  {
    "text": "and each one of them costs\n2, in a certain sense.",
    "start": "1063530",
    "end": "1070140"
  },
  {
    "text": "To connect a vertex to\nan incident edge costs 2. And so there are v minus 1\nedges in the spanning tree,",
    "start": "1070140",
    "end": "1077000"
  },
  {
    "text": "so I'm going to pay that. On the other hand, I\nalso knew that every edge is connected to some vertex.",
    "start": "1077000",
    "end": "1082570"
  },
  {
    "text": "That's the vertex\ncover constraint, and so every edge is\ngoing to pay 2 in order to connect to a vertex.",
    "start": "1082570",
    "end": "1088300"
  },
  {
    "text": "So the weird thing here is the\ninvolvement of the vertices, even though there's\nno point there. ",
    "start": "1088300",
    "end": "1095650"
  },
  {
    "text": "That's funny. Maybe we could add a point there\nand make it a little clearer, but instead of thinking\nabout connections from edges",
    "start": "1095650",
    "end": "1104780"
  },
  {
    "text": "to edges, which\nwould cost 4, that's sort of the wrong way to think\nabout it, because there's two things going on.",
    "start": "1104780",
    "end": "1110340"
  },
  {
    "text": "One is just to get the edges\nto connect to something, and then there's getting\nall that something's connected together.",
    "start": "1110340",
    "end": "1116370"
  },
  {
    "text": "So this is sort of a\nspanning tree thing, and this is more of the actual\nvertex cover constraint.",
    "start": "1116370",
    "end": "1122624"
  },
  {
    "text": "Together, they give\nthe connector vertex cover constraint. It would be impossible\nfor a Steiner tree to do one without the other.",
    "start": "1122624",
    "end": "1129570"
  },
  {
    "text": "But essentially-- I mean,\nI'm going to wave my hands a little bit here,\nbut you work it out. In all cases, the number\nof connections you need",
    "start": "1129570",
    "end": "1137520"
  },
  {
    "text": "is exactly this if\nthere's a vertex cover, and this will have to go up\nif there isn't a vertex cover.",
    "start": "1137520",
    "end": "1143261"
  },
  {
    "text": " That was vertex cover.",
    "start": "1143261",
    "end": "1148870"
  },
  {
    "text": "Let's do coloring. This will be, I think, more fun.",
    "start": "1148870",
    "end": "1155549"
  },
  {
    "text": "So first, let's prove\nthat coloring is hard.",
    "start": "1155550",
    "end": "1161400"
  },
  {
    "text": "So in general, in\nthe coloring problem, also called chromatic\nnumber, you're given a graph and you're given a number k.",
    "start": "1161400",
    "end": "1167880"
  },
  {
    "text": "You want to color the\nvertices of the graph using k different colors,\nso that's a mapping",
    "start": "1167880",
    "end": "1173550"
  },
  {
    "text": "from the vertices\nto the colors such that no edge is monochromatic.",
    "start": "1173550",
    "end": "1180279"
  },
  {
    "start": "1180280",
    "end": "1186150"
  },
  {
    "text": "So you want a mapping, let's\ncall it c, from the vertices to 1 up to k such that for\nevery edge, let me call it vw,",
    "start": "1186150",
    "end": "1207445"
  },
  {
    "text": "the color of v does not\nequal to color of w. So that's the no\nmonochromatic edge constraint.",
    "start": "1207445",
    "end": "1214150"
  },
  {
    "text": "It's usual coloring\nfor vertex coloring. You could also talk about\nedge coloring and so on, and this problem is easy.",
    "start": "1214150",
    "end": "1221010"
  },
  {
    "text": "If k is 1, then you\nbetter not have any edges. It's easy if k is 2.",
    "start": "1221010",
    "end": "1227060"
  },
  {
    "text": "That's bipartiteness testing. You can just greedily\ncolor and you can never make a mistake unless the\ngraph isn't bipartite.",
    "start": "1227060",
    "end": "1233540"
  },
  {
    "text": "But it becomes hard\nwhen k equals 3, so that's a fun transition. And so here is why vertex\n3-coloring is hard as proved",
    "start": "1233540",
    "end": "1241679"
  },
  {
    "text": "by Garey, Johnson, Stockmeyer. Reduction from 3SAT.",
    "start": "1241680",
    "end": "1246860"
  },
  {
    "text": "So we have, on the one\nhand, variable gadget. We're going to represent\nXI and XI bar like this.",
    "start": "1246860",
    "end": "1256270"
  },
  {
    "text": "I mean, coloring should\nfeel a lot like SAT. In fact, you might think\nof this as xor 2SAT,",
    "start": "1256270",
    "end": "1266460"
  },
  {
    "text": "if you think of xor as\nthe not equals operator. But it's over ternary logic.",
    "start": "1266460",
    "end": "1275110"
  },
  {
    "text": "So this gets back to\na question from class. What about ternary logic? You can think of 3-colorings\nlike ternary logic,",
    "start": "1275110",
    "end": "1282360"
  },
  {
    "text": "just like on the problem set. So what we're going\nto do is we're",
    "start": "1282360",
    "end": "1288539"
  },
  {
    "text": "going to have one\ncopy of this gadget. I call it a colors gadget. It's just a triangle,\nand so all three colors",
    "start": "1288540",
    "end": "1293780"
  },
  {
    "text": "must appear on that triangle. We don't know in what order,\nbut we don't really care. We can just define the one.",
    "start": "1293780",
    "end": "1301030"
  },
  {
    "text": "The color that this guy's\nassigned, we'll call it red. It could be 1, 2, or 3,\nbut it doesn't matter. Call the color that this\nguy's assigned green,",
    "start": "1301030",
    "end": "1308300"
  },
  {
    "text": "and this one blue,\nand hopefully you're not sufficiently colorblind to\nbe unable to distinguish those.",
    "start": "1308300",
    "end": "1313480"
  },
  {
    "text": "But I did check with\na color blind tester, they do seem at least\ndifferent, but it might be hard to know the names.",
    "start": "1313480",
    "end": "1319731"
  },
  {
    "text": "All right. So this green vertex is\nconnected to both XI and XI bar for each of the\nvariables, which means",
    "start": "1319731",
    "end": "1326370"
  },
  {
    "text": "they can either be red or blue. And I want to red to mean\nfalse, blue to mean true.",
    "start": "1326370",
    "end": "1332260"
  },
  {
    "text": "So that's cool, that's\nnice, regular binary logic. And then we're going to\ncombine those variables with this clause gadget.",
    "start": "1332260",
    "end": "1338310"
  },
  {
    "text": "Clause gadget also has\none node out at the end here connected to\nboth green and red,",
    "start": "1338310",
    "end": "1343560"
  },
  {
    "text": "which forces it to be blue. But otherwise,\nit's kind of free. So we have instances\nof literals.",
    "start": "1343560",
    "end": "1349559"
  },
  {
    "text": "These don't have to\nbe the positive forms, this could be XI bar,\nXJ bar, whatever.",
    "start": "1349560",
    "end": "1354767"
  },
  {
    "text": "And now we're going to\nthink about coloring. So let me show you a couple\nof possible colorings.",
    "start": "1354767",
    "end": "1359950"
  },
  {
    "text": "Here's a valid coloring. It's valid because at least--\nThis is going to be 3SAT, so at least one of these should\nbe true, true means blue.",
    "start": "1359950",
    "end": "1366639"
  },
  {
    "text": "This guy is blue,\nand in general, what we're doing is\nkind of taking an",
    "start": "1366640",
    "end": "1372630"
  },
  {
    "text": "or of this pair and then an\nor of that pair with this one",
    "start": "1372630",
    "end": "1378710"
  },
  {
    "text": "variable, one\nliteral, I should say. And because this is not\nred, I can put red here.",
    "start": "1378710",
    "end": "1387590"
  },
  {
    "text": "Again, all three\ncolors must appear. So in general,\nwhat I want to do-- you'll see why in a moment--\nis push the reds as far",
    "start": "1387590",
    "end": "1393850"
  },
  {
    "text": "back as possible. So if I can put a red or\nred here or here, I'm happy, and I put some other\ncolor over there.",
    "start": "1393850",
    "end": "1401850"
  },
  {
    "text": "I guess I'll put-- It\ndoesn't matter which one is blue or green here.",
    "start": "1401850",
    "end": "1407830"
  },
  {
    "text": "As long as I can\nput red back here, I can also put red back here. And it could be if\nthis one is blue,",
    "start": "1407830",
    "end": "1414290"
  },
  {
    "text": "I could also put\nthe red guy here, and I have the flexibility. But as long as I can put\nred either here or here,",
    "start": "1414290",
    "end": "1419559"
  },
  {
    "text": "this one will not be red. And furthermore, I\ncan make it not green, and that's what these\nconstraints tell me.",
    "start": "1419560",
    "end": "1427040"
  },
  {
    "text": "This vertex should\nnot be red or green. That's satisfied here. And you can show, you\ncan check all cases,",
    "start": "1427040",
    "end": "1433950"
  },
  {
    "text": "or just sort of go\nthrough that argument. The only bad case is\nwhen they're all red,",
    "start": "1433950",
    "end": "1439659"
  },
  {
    "text": "because then, looking\nat this triangle, the red one has to\nbe pushed forward. And then, because this one\nis red and this one is red,",
    "start": "1439660",
    "end": "1446520"
  },
  {
    "text": "again, this red has\nto be pushed forward, but then we have a\nred-red adjacency and that's not allowed.",
    "start": "1446520",
    "end": "1452520"
  },
  {
    "text": "So that is 3SAT to\nvertex 3-coloring. Cool. Now, this does not\npreserve planarity,",
    "start": "1452520",
    "end": "1463192"
  },
  {
    "text": "because the colors\ngadget is connected to pretty much everything,\nand it does not preserve bounded degree.",
    "start": "1463192",
    "end": "1468860"
  },
  {
    "text": "Question. AUDIENCE: Yeah. The variable gadget doesn't seem\nto be connected to the clause gadget here.",
    "start": "1468860",
    "end": "1474002"
  },
  {
    "text": "PROFESSOR: Sorry. I mean, when I\nsit right XI here, I mean it's the same\nvertex as one of these. Yeah.",
    "start": "1474002",
    "end": "1479440"
  },
  {
    "text": "So if there's n\nvariables, n clauses, it's going to be 2n\nof these vertices and then they're shared\namong the n clauses.",
    "start": "1479440",
    "end": "1488500"
  },
  {
    "text": "It's hard to draw,\nbecause actually they're identified as opposed\nto connected by an edge.",
    "start": "1488500",
    "end": "1495080"
  },
  {
    "text": "Other questions? All right. So I think first\nwe make it planar.",
    "start": "1495080",
    "end": "1500910"
  },
  {
    "text": "We have a new crossover gadget\nfor specific to 3-coloring. Planar 3SAT doesn't seem\nto help immediately,",
    "start": "1500910",
    "end": "1507640"
  },
  {
    "text": "so we're just going\nto, because we have all of these\nconnections from colors gadget to everybody,\nplug this in whenever",
    "start": "1507640",
    "end": "1516720"
  },
  {
    "text": "we have an intersection. And the idea, locally,\nis that whatever color is assigned to this\nvertex, x, must",
    "start": "1516720",
    "end": "1522910"
  },
  {
    "text": "be the same as the color\nassigned to this vertex, x prime, and similarly,\ny, and y prime.",
    "start": "1522910",
    "end": "1528700"
  },
  {
    "text": "And they're free\nof each other, you can do any assignment to\nx, any assignment to y, and this will be satisfiable.",
    "start": "1528700",
    "end": "1534982"
  },
  {
    "text": "I'll give you some colorings\nto give you-- I mean, this is essentially two\ncases, which is either",
    "start": "1534982",
    "end": "1540110"
  },
  {
    "text": "x and x prime have the\nsame color as y and y prime or they have different colors.",
    "start": "1540110",
    "end": "1545370"
  },
  {
    "text": "So here's the same\ncolor case, you get this nice\nrotational symmetry. In general, you've\ngot this wheel pattern",
    "start": "1545370",
    "end": "1553070"
  },
  {
    "text": "of four triangles, and\nyou have some color here,",
    "start": "1553070",
    "end": "1558100"
  },
  {
    "text": "and then that forced these guys\nto alternate in the other two colors available\naround that center,",
    "start": "1558100",
    "end": "1564100"
  },
  {
    "text": "and then it essentially\ncommunicates the information you need. It's hard to do sort of\na straight line argument",
    "start": "1564100",
    "end": "1570320"
  },
  {
    "text": "about why this is the case,\nother than to just try all the possibilities. But there's, again,\nlots of triangles.",
    "start": "1570320",
    "end": "1576700"
  },
  {
    "text": "So once you know this is red,\nyou know one of these is green, and one of them is blue. Could go one way or the\nother at this point.",
    "start": "1576700",
    "end": "1582851"
  },
  {
    "text": "I think you could actually\ndo it one way or the other and just flip all the\ngreens with blues, and vice versa, because green\nand blue is, in this case,",
    "start": "1582852",
    "end": "1590110"
  },
  {
    "text": "local to the gadget. And, anyway, you end up with,\nonce these two are set red,",
    "start": "1590110",
    "end": "1595919"
  },
  {
    "text": "these two are forced to\nbe set red by casework. Here is the other case, when\nxx prime is different from yy",
    "start": "1595920",
    "end": "1605860"
  },
  {
    "text": "prime, or you could say\nx and y are different, and then, again, it forces\nx to propagate through,",
    "start": "1605860",
    "end": "1611052"
  },
  {
    "text": "y to propagate through. We still get alternation\nhere, but now the unused color",
    "start": "1611052",
    "end": "1616140"
  },
  {
    "text": "is in the center, whereas\nbefore, this picture, we had the center color was\nthe color used by all three,",
    "start": "1616140",
    "end": "1622380"
  },
  {
    "text": "or all four of them. On the outside\nhere, it's the color that's not any of those two.",
    "start": "1622380",
    "end": "1627610"
  },
  {
    "text": "And, again, it's forced\nby playing around.",
    "start": "1627610",
    "end": "1633241"
  },
  {
    "text": "OK. So that means we\nhave a figure here about how you actually\nuse this crossover",
    "start": "1633241",
    "end": "1638429"
  },
  {
    "text": "gadget because there's this\nissue of identification, which is little bit subtle. So if you have an edge that's\ncrossed by a bunch of edges,",
    "start": "1638430",
    "end": "1646170"
  },
  {
    "text": "you intuitively\nwant to stick this into each of the crossings. But because this is copying\nthe value here to here,",
    "start": "1646170",
    "end": "1652290"
  },
  {
    "text": "it's really just like\ntaking this vertex and pushing it to the\nother side of the edge. So when you throw\nin this crossover,",
    "start": "1652290",
    "end": "1658830"
  },
  {
    "text": "you want to identify the\nleft vertex of the crossover with the original\nvertex on the left side,",
    "start": "1658830",
    "end": "1666120"
  },
  {
    "text": "but not identify it\non the right side. Therefore, overall,\nthere's still one edge connecting x and y\nbecause this is essentially",
    "start": "1666120",
    "end": "1673630"
  },
  {
    "text": "a copy of x, but you still\nneed that edge to connect to y. So you don't want to\nidentify both sides, you don't want to\nidentify on neither side,",
    "start": "1673630",
    "end": "1680350"
  },
  {
    "text": "because that would be two edges. Identify on one side. And it's like a vertex\ncover, but you just",
    "start": "1680350",
    "end": "1685750"
  },
  {
    "text": "pick one side for\neach edge arbitrarily. And that is planar vertex\n3-coloring not bound",
    "start": "1685750",
    "end": "1695250"
  },
  {
    "text": "to degree yet. OK? Next reduction. This is in the same paper.",
    "start": "1695250",
    "end": "1702690"
  },
  {
    "text": "Here's how to\nsimulate high degree. I mean, it's pretty intuitive. Once you have the\nability to copy color,",
    "start": "1702690",
    "end": "1707910"
  },
  {
    "text": "you can use it to\nget high degree. OK, I'll talk about the actual\ndegree bound in the moment,",
    "start": "1707910",
    "end": "1715280"
  },
  {
    "text": "but let's say we're\naiming for max degree 4.  This one, you can actually\nargue in a very simple way.",
    "start": "1715280",
    "end": "1722767"
  },
  {
    "text": "So here's a little gadget. I claim it makes three\ncopies of this color, or two copies of the color at x.",
    "start": "1722767",
    "end": "1729019"
  },
  {
    "text": "So you've got these\nthree vertices. One of them's blue,\none of them's green. Doesn't matter which is which,\nbut then this vertex must",
    "start": "1729020",
    "end": "1734630"
  },
  {
    "text": "be red because of that\ntriangle, and then this vertex must be green because\nof that triangle,",
    "start": "1734630",
    "end": "1740230"
  },
  {
    "text": "then this vertex must be blue\nbecause of that triangle, this one must be red,\nand this one must be red.",
    "start": "1740230",
    "end": "1745750"
  },
  {
    "text": "So that's a really\neasy one to argue. And so, this is not\nvery interesting, because we made two copies.",
    "start": "1745750",
    "end": "1752330"
  },
  {
    "text": "This will simulate\na degree 3 vertex, which we don't worry about. But where it gets\ninteresting, if you just",
    "start": "1752330",
    "end": "1757840"
  },
  {
    "text": "string a bunch of\nthese together here, we end up with five\ncopies of a single color, and so you can connect with\na single edge out here,",
    "start": "1757840",
    "end": "1764580"
  },
  {
    "text": "let's say. I guess you could even\nafford two edges there. In particular, we can\nuse this to simulate",
    "start": "1764580",
    "end": "1771330"
  },
  {
    "text": "one vertex of degree 5 and we\nwill end up with max degree 4.",
    "start": "1771330",
    "end": "1778059"
  },
  {
    "text": "Degree 4 Because some of\nthese vertices have degree 4. Actually, most of them do.",
    "start": "1778060",
    "end": "1783419"
  },
  {
    "text": "AUDIENCE: Could you have just\nused the crossover gadget as a high degree gadget?",
    "start": "1783420",
    "end": "1788850"
  },
  {
    "text": "PROFESSOR: Oh, in a circle. Yeah, that would\nalso work, I think. Do you have a problem? AUDIENCE: There are degree 7\nvertices when you pit together",
    "start": "1788850",
    "end": "1795060"
  },
  {
    "text": "two of these? You've moved-- [INTERPOSING VOICES] PROFESSOR: Degree 6. Yeah.",
    "start": "1795060",
    "end": "1801570"
  },
  {
    "text": "Well, OK. So that will give\nyou max degree 6, and this gives you max degree 4. Yeah. If we do is after\nthe crossover gadget,",
    "start": "1801570",
    "end": "1808029"
  },
  {
    "text": "then the crossover\ngadget will become happy. ",
    "start": "1808030",
    "end": "1813309"
  },
  {
    "text": "So what's the conclusion? Planar max degree 4,\n3-coloring is hard.",
    "start": "1813310",
    "end": "1824775"
  },
  {
    "text": " But be careful, max\ndegree 3, 3-coloring",
    "start": "1824775",
    "end": "1838160"
  },
  {
    "text": "is easy polynomial time\nunless your graph is k4.",
    "start": "1838160",
    "end": "1847550"
  },
  {
    "text": "So one counter example. This is always possible. This is called Burke's\ntheorem from 1941.",
    "start": "1847550",
    "end": "1856600"
  },
  {
    "text": "So in general, if you\nhave max degree delta, there's a delta coloring unless\na couple of bad things happen.",
    "start": "1856600",
    "end": "1862779"
  },
  {
    "text": "Odd cycle or a complete graph. So that's cool.",
    "start": "1862780",
    "end": "1868350"
  },
  {
    "text": "AUDIENCE: What do\nyou mean if it's k4 and then it doesn't work? PROFESSOR: k4\nrequires four colors.",
    "start": "1868350",
    "end": "1874667"
  },
  {
    "text": "AUDIENCE: But then when finding\nwhether or not there's-- PROFESSOR: But k4\nhas max degree 3. AUDIENCE: [INAUDIBLE]\npolynomial figure out",
    "start": "1874667",
    "end": "1881109"
  },
  {
    "text": "if there's a 3 colorable? PROFESSOR: It's\npolynomial in all cases, but I'm saying every\nmax degree 3 graph is",
    "start": "1881109",
    "end": "1887820"
  },
  {
    "text": "3 colorable except for k4. So the decision\nproblem is, am I k4. Or I guess, am I not k4 would\nbe the 3-coloring problem.",
    "start": "1887820",
    "end": "1896604"
  },
  {
    "text": "AUDIENCE: The word\nplanar isn't up there. PROFESSOR: Right, even without\nplanar, it's polynomial.",
    "start": "1896604",
    "end": "1902559"
  },
  {
    "text": "Don't need planarity\nfor that algorithm for testing for k4ness. And I didn't check,\nbut I'm pretty sure.",
    "start": "1902560",
    "end": "1909950"
  },
  {
    "text": "Usually once the\ndecision problem is easy, also the actual coloring\nalgorithm is easy, but I didn't check. I assume there's a polynomial\ncoloring algorithm, not just",
    "start": "1909950",
    "end": "1917770"
  },
  {
    "text": "a decision algorithm, but\nwe should double check before you cite that result.",
    "start": "1917770",
    "end": "1923798"
  },
  {
    "text": "AUDIENCE: You can\n[INAUDIBLE], make yourself a [INAUDIBLE] gadget\nand then try probing things.",
    "start": "1923798",
    "end": "1930245"
  },
  {
    "text": "PROFESSOR: Oh, right. You could reduce\nthe decision problem to the actual coloring problem. You can test whether two\nguys have the same color",
    "start": "1930245",
    "end": "1936679"
  },
  {
    "text": "by a bunch of probes. OK, so what? Why graph coloring?",
    "start": "1936680",
    "end": "1943410"
  },
  {
    "text": "There aren't a ton of\nproofs that use coloring, because usually 3SAT is\nsimpler because it only has binary values, but\nthere are situations",
    "start": "1943410",
    "end": "1950270"
  },
  {
    "text": "where coloring is helpful. I have one here that we used in\nthe context of pushing blocks.",
    "start": "1950270",
    "end": "1957080"
  },
  {
    "text": "We covered Push-* is hard,\nwe covered Push-1 is hard,",
    "start": "1957080",
    "end": "1965029"
  },
  {
    "text": "we covered these two\nproofs in that lecture, and then implied PushPush, but\nwe didn't talk about Push-X.",
    "start": "1965030",
    "end": "1972170"
  },
  {
    "text": "Push-X was the version where\nyou're not allowed to revisit the same square twice. Like every time\nyou leave a square,",
    "start": "1972170",
    "end": "1977655"
  },
  {
    "text": "it falls down into\nthe abyss behind you, so you can never step\non that square again.",
    "start": "1977655",
    "end": "1983050"
  },
  {
    "text": "So our hardness proof\nfor that uses coloring,",
    "start": "1983050",
    "end": "1988520"
  },
  {
    "text": "and I think it's instructive\nnot because I care especially about Push-1X but it seems\nlike a general approach",
    "start": "1988520",
    "end": "1994820"
  },
  {
    "text": "to representing color. So good to see the gadgets. First, a simple idea is that,\nif I have some planar graph",
    "start": "1994820",
    "end": "2003179"
  },
  {
    "text": "I want to take an Euler\ntour-- a tour that visits every edge\nexactly twice--",
    "start": "2003180",
    "end": "2008330"
  },
  {
    "text": "and I want to do\nthat in a planar way. So the idea is, I\ndon't want my tour",
    "start": "2008330",
    "end": "2015270"
  },
  {
    "text": "to come down this\nway through a vertex and then later come through\nthis way in a vertex.",
    "start": "2015270",
    "end": "2020450"
  },
  {
    "text": "That's a meaningful\nthing because I know that planar\ncoloring is hard, so I'm going to\nreduce from planar max",
    "start": "2020450",
    "end": "2025493"
  },
  {
    "text": "degree 4, 3-coloring. So I've got a planar graph,\nI draw it in the plane, and then relative\nto that drawing, I want to make sure there's\nno crossings in my tour",
    "start": "2025493",
    "end": "2032590"
  },
  {
    "text": "that visits every\nedge exactly twice. These always exist,\nsimple inductive proof, start with one vertex,\nvisit the star around it,",
    "start": "2032590",
    "end": "2040510"
  },
  {
    "text": "and then just start gluing\nthese things together. In the inductive way, you\nwill get a planar Eulerian",
    "start": "2040510",
    "end": "2047460"
  },
  {
    "text": "tour, standard trick. Now we're going\nto use that tour.",
    "start": "2047460",
    "end": "2052658"
  },
  {
    "text": "So here we see an actual\ngraph in the dashed lines and then we see the Euler\ntour in the red lines,",
    "start": "2052659",
    "end": "2059550"
  },
  {
    "text": "and the red path is\nessentially the tour taken by the robot that's\npushing the blocks around.",
    "start": "2059550",
    "end": "2068960"
  },
  {
    "text": "So it's walking around in\nsome direction somewhere-- I think not drawn here. Maybe that.",
    "start": "2068960",
    "end": "2074146"
  },
  {
    "text": "I'm going to break this\napart and I'm going to say, the robot starts here,\nthere's an obstacle here, and the goal is to get here.",
    "start": "2074146",
    "end": "2079620"
  },
  {
    "text": "So your sole purpose\nin this puzzle is to start here and get\nall the way around the loop, and you're just going to be\nable to go along the red path.",
    "start": "2079620",
    "end": "2087050"
  },
  {
    "text": "But there's some interactions. There's the blue\narrows, and then there's the green, wiggly lines\nand that's all you'll need.",
    "start": "2087050",
    "end": "2093636"
  },
  {
    "text": "One of them is an equal\nconstraint, and one of them is not equal constraint. And the idea is that when\nyou visit a vertex-- so let's",
    "start": "2093636",
    "end": "2099230"
  },
  {
    "text": "say you start here at u-- I'm\ngoing to pick a color-- 1, 2, or 3, and there will actually\nbe three red paths here.",
    "start": "2099230",
    "end": "2105520"
  },
  {
    "text": "Then those three red paths\nwill interact with these three red paths to force equality.",
    "start": "2105520",
    "end": "2111540"
  },
  {
    "text": "The wiggly lines mean equality. So I want that\nwhatever color I've chosen here is the same as\nthe color I've chosen here,",
    "start": "2111540",
    "end": "2118080"
  },
  {
    "text": "because I want u\nto have one color, I'm only allowed to\nassign one color to u. So we're going to look at how\nto do that equality constraint.",
    "start": "2118080",
    "end": "2125170"
  },
  {
    "text": "And then we have these\ntypes of constraints, which say that the\ncolors are different,",
    "start": "2125170",
    "end": "2132370"
  },
  {
    "text": "non-equal, because I\nwant the color assigned to u to be different than\nthe color assigned to v. And this path is\ncoming from v so",
    "start": "2132370",
    "end": "2139280"
  },
  {
    "text": "at this point the color that\nyou're on, which of the red rails you're on,\nsays which color",
    "start": "2139280",
    "end": "2145470"
  },
  {
    "text": "is assigned to v. You\nwant that color to be different from the\ncolor assigned to u. Then you transition and say, OK.",
    "start": "2145470",
    "end": "2151910"
  },
  {
    "text": "Now I'm going to\nstart over and pick another color between 1 and 3. And then here, it's constrained\nto be equal to this one.",
    "start": "2151910",
    "end": "2158240"
  },
  {
    "text": "So I think the arrows are\ndelineating the transitions from the color. Here it should all be color\nv. Well, that's maybe not so",
    "start": "2158240",
    "end": "2165299"
  },
  {
    "text": "[INAUDIBLE], but\nsomewhere along this edge, you're going to\nswitch to thinking about the color v to thinking\nabout the color of u.",
    "start": "2165299",
    "end": "2170970"
  },
  {
    "text": "You only need one\ncolor at any moment, so there will only have to be\nthree parallel tracks for each",
    "start": "2170970",
    "end": "2176514"
  },
  {
    "text": "of these things. That's the high level picture. Let me tell you actually do it.",
    "start": "2176514",
    "end": "2181520"
  },
  {
    "text": "So here's this left part\nexpanded into a slightly more detailed picture. Still a bunch of\ndetails to be filled in,",
    "start": "2181520",
    "end": "2189180"
  },
  {
    "text": "but we see still the non-equal\nand the equal gadgets, just like before, but\nhere I've explicitly",
    "start": "2189180",
    "end": "2195850"
  },
  {
    "text": "shown the three tracks. So we were looking at this\nedge before, so let's say here.",
    "start": "2195850",
    "end": "2211220"
  },
  {
    "text": "Here's where you\nchoose the color for u. So we're going to use what\nwe call a fork gadget. We've maybe seen something\nlike this before.",
    "start": "2211220",
    "end": "2217049"
  },
  {
    "text": "When you come in, you can\nchoose one of these three paths. Once you choose,\nyou can't unchoose.",
    "start": "2217050",
    "end": "2222110"
  },
  {
    "text": "It's a one-way gadget. So let's say you\nchoose path one, that means that this\nvertex u is colored 1.",
    "start": "2222110",
    "end": "2229545"
  },
  {
    "text": "Then you're going to have some\nequal gadget-- these three paths are connected\nover here-- but you'll be forced that this path is\nthe same as the one chosen over",
    "start": "2229545",
    "end": "2237331"
  },
  {
    "text": "here. We'll get to that one later. Then you go over\nhere, you're forced that among these\nthree paths, you're",
    "start": "2237331",
    "end": "2242520"
  },
  {
    "text": "different from the\nthree paths over here, because that's going\nto be the color v. And then, you now want to\nswitch from the u color",
    "start": "2242520",
    "end": "2250025"
  },
  {
    "text": "to the v color. So I'm just going to have\nsome one-way gadgets here that coalesce these\nthree wires into one,",
    "start": "2250025",
    "end": "2257740"
  },
  {
    "text": "and then whatever's next-- Let's\nsay this is next, v was a leaf.",
    "start": "2257740",
    "end": "2262980"
  },
  {
    "text": "Then you have a fork, again,\nto choose the color for v. So it's kind of weird, you\nget to choose the color for vertex several times.",
    "start": "2262980",
    "end": "2269050"
  },
  {
    "text": "Here we're choosing it for u,\nhere were choosing it again for u, but they're\ncombined together with this equal gadget,\nso those two choices",
    "start": "2269050",
    "end": "2275133"
  },
  {
    "text": "are forced to be the same. That's the idea. And then the\nnon-equal gadgets are",
    "start": "2275133",
    "end": "2280640"
  },
  {
    "text": "doing the actual\ncoloring constraint of no monochromatic edges.",
    "start": "2280640",
    "end": "2286130"
  },
  {
    "text": "So it looks complicated,\nbut all you really need are these things. Well, and the fork\nand the one-way.",
    "start": "2286130",
    "end": "2291150"
  },
  {
    "text": "Let's do the fork\nand the one-way, because those are easy. We've basically\nseen them before. Pretty sure we did\nthis one-way gadget.",
    "start": "2291150",
    "end": "2297890"
  },
  {
    "text": "You can go from a to\nb, but not from b to a. ",
    "start": "2297890",
    "end": "2304111"
  },
  {
    "text": "Cool. So that means when\nI come through here, I can't back up along some\nother path, that would be bad.",
    "start": "2304111",
    "end": "2310849"
  },
  {
    "text": "And the fork gadget,\nthis is a two-way fork. You come in from a and you can\neither push this in and then",
    "start": "2310850",
    "end": "2318150"
  },
  {
    "text": "choose to go to\nc, but then you'll never be able to go to b, or\nyou can push this down and then",
    "start": "2318150",
    "end": "2324250"
  },
  {
    "text": "go to b and you'll never\nbe able to go to c. So when you make this choice,\nyou can't undo the choice.",
    "start": "2324250",
    "end": "2329861"
  },
  {
    "text": "You just chain two\nof these together to make a three-way choice. And the one-way is to\nprevent you from going back",
    "start": "2329861",
    "end": "2335070"
  },
  {
    "text": "along one of these paths. So that's the easy part. Then what about the equal\nand the non-equal gadgets?",
    "start": "2335070",
    "end": "2342530"
  },
  {
    "text": "These are complicated,\nbut in the end, they reduce to some\nvery simple gadgets. So let's start with\nthe non-equal gadget.",
    "start": "2342530",
    "end": "2350010"
  },
  {
    "text": "So we have three possible\ncolor choices for one edge,",
    "start": "2350010",
    "end": "2356030"
  },
  {
    "text": "for one vertex, and we have\nthree possible choices down here for the other vertex.",
    "start": "2356030",
    "end": "2362010"
  },
  {
    "text": "Together, those vertices\nshould form the edge e, and this is written\nas e going one way",
    "start": "2362010",
    "end": "2367080"
  },
  {
    "text": "or e going the other way\nand coming from one vertex and coming from the\nother vertex end. And what we want is\nto forbid blue-blue,",
    "start": "2367080",
    "end": "2375880"
  },
  {
    "text": "or to forbid red-red, or\nto forbid orange-orange. And because this paper was also\nprinted in black and white,",
    "start": "2375880",
    "end": "2383280"
  },
  {
    "text": "the dash patterns also\nduplicate the color information. So even if you\nlost all color, you",
    "start": "2383280",
    "end": "2388710"
  },
  {
    "text": "can distinguish\nthese types of lines. So we need this gadget, which\nwe called a manned gadget,",
    "start": "2388710",
    "end": "2398050"
  },
  {
    "text": "but you should not\nhave both of these. And there's a couple\ndifferent cases, depending on the orientation.",
    "start": "2398050",
    "end": "2404680"
  },
  {
    "text": "But, for example, if\nyou go from a to b, you have to push this down. Which, because this is Push-1,\nyou only have strength one,",
    "start": "2404680",
    "end": "2411350"
  },
  {
    "text": "you're not able to push up. You're not able to traverse\ncd anymore if you do a to b. This is the symmetric\nversion where,",
    "start": "2411350",
    "end": "2417730"
  },
  {
    "text": "if you first do b to a, then\nthat prevents cd traversal.",
    "start": "2417730",
    "end": "2423390"
  },
  {
    "text": "And its symmetric,\nso vice versa, OK? So that's the gadget\nthat plugs in here.",
    "start": "2423390",
    "end": "2429299"
  },
  {
    "text": "And so now we know that, if\nwe follow the path along 3,",
    "start": "2429300",
    "end": "2435360"
  },
  {
    "text": "the blue path for\nthis vertex, we won't be able to\ntraverse the blue path.",
    "start": "2435360",
    "end": "2440710"
  },
  {
    "text": "And so whatever choice\nyou made here at the fork has to be different\nfrom this choice.",
    "start": "2440710",
    "end": "2447119"
  },
  {
    "text": "It's kind of a fun,\nnon-local effect. And it doesn't matter,\nwhoever makes the choice first",
    "start": "2447120",
    "end": "2452670"
  },
  {
    "text": "will block the choice\nfor the other guy. If you had multiple robots\nsimultaneously doing things, then it would get\ntricky when there's",
    "start": "2452670",
    "end": "2459890"
  },
  {
    "text": "two robots right here at the\nsame time, but probably even then, it would work as long\nas everything eventually",
    "start": "2459890",
    "end": "2464940"
  },
  {
    "text": "gets traversed. OK. So then we also need some\nlimited kinds of crossovers",
    "start": "2464940",
    "end": "2471650"
  },
  {
    "text": "to make this happen, because we\nneed to take this orange path. I don't know why it's orange. It should be green,\nbut there you go.",
    "start": "2471650",
    "end": "2478960"
  },
  {
    "text": "Bring it down here and\nthen bring it back up. So that's going to require\nthe orange path to cross",
    "start": "2478960",
    "end": "2484510"
  },
  {
    "text": "the red path and the blue path. Good news. We know that only\none of these will be traversed, because the\nfork gadget has that property.",
    "start": "2484510",
    "end": "2492920"
  },
  {
    "text": "If you end up\nfollowing the one path, you know that 2 will not\nhave to be traversed, so this is what we called\nan xor crossover back when",
    "start": "2492920",
    "end": "2499040"
  },
  {
    "text": "we were doing pushing blocks. It's a crossover that\nworks as long as you only are visiting it once,\none way or the other way.",
    "start": "2499040",
    "end": "2507030"
  },
  {
    "text": "So, for example, if you come--\nAnd it's also uni-directional. So if you come from a,\nyou can push that down, but then you won't be\nable to go to c or d,",
    "start": "2507030",
    "end": "2514630"
  },
  {
    "text": "and then you can\nleave through b. And from c, you can\npush this over, go to d,",
    "start": "2514630",
    "end": "2521130"
  },
  {
    "text": "and those are the only cases we\nneed with various reflections and rotations. We either go from\nup top to down here,",
    "start": "2521130",
    "end": "2528140"
  },
  {
    "text": "or we go from right to left\nhere through that xor crossover.",
    "start": "2528140",
    "end": "2533241"
  },
  {
    "text": "So you just plug\nthose crossovers in and you can get\neach of these paths to where you need\nthem to be, and you",
    "start": "2533241",
    "end": "2538964"
  },
  {
    "text": "know that they'll\nwork because you won't have to do both of those\ntraversals, and there you go.",
    "start": "2538964",
    "end": "2544609"
  },
  {
    "text": "So in general, as long as you\nhave a NAND gadget and an xor gadget, then you can do this\nto make a not equal gadget.",
    "start": "2544610",
    "end": "2551590"
  },
  {
    "text": "So there's a lot of pieces\nhere, but in the end, it reduces to very few things. We had a one-way, a\nfork, an xor, and a NAND.",
    "start": "2551590",
    "end": "2559826"
  },
  {
    "text": "If you have those things,\nyou can simulate 3-coloring in this planar way. Now, I didn't cover\none more gadget,",
    "start": "2559826",
    "end": "2565850"
  },
  {
    "text": "which is the equal gadget. It's just a more\ncomplicated version of the non-equal gadget.",
    "start": "2565850",
    "end": "2572769"
  },
  {
    "text": "So you need to prevent\nthis one from being",
    "start": "2572770",
    "end": "2577802"
  },
  {
    "text": "blue when the bottom\none is orange, you need to prevent this\none from being blue when the bottom one is\nred, and you need",
    "start": "2577802",
    "end": "2583464"
  },
  {
    "text": "to prevent this one from being\nred when that one's orange, you need to prevent\nthis one from being red when that one's blue. And all the pairwise things you\ndon't want to have happen, just",
    "start": "2583464",
    "end": "2591630"
  },
  {
    "text": "make them not happen. So you can imagine, of course,\nmuch more general gadgets than this. We're probably doing much\nmore than 3-coloring,",
    "start": "2591630",
    "end": "2598579"
  },
  {
    "text": "but again, all we need\nare the xors and the NAND. So that proves Push-1X\nis NP complete for free,",
    "start": "2598580",
    "end": "2607450"
  },
  {
    "text": "and this approach has been\nused by a couple of papers. So here is another one, Push-1G.",
    "start": "2607450",
    "end": "2613370"
  },
  {
    "text": "This is pushing\nblocks with gravity. So imagine-- this happens\nin a lot of games--",
    "start": "2613370",
    "end": "2619270"
  },
  {
    "text": "when you're pushing\na block, the block will fall if it ever\nhas a hole below it. Let's say that you\ndon't fall though,",
    "start": "2619270",
    "end": "2626310"
  },
  {
    "text": "or you could do lots of\njumps, or flying, or whatever. You can do something to avoid. I don't think we'll need any\nbig jumps for this to work.",
    "start": "2626310",
    "end": "2634439"
  },
  {
    "text": "So there are lots\nof video games that follow these kinds of roles. Here's a one-way in that model,\nyou just push this block over,",
    "start": "2634439",
    "end": "2642650"
  },
  {
    "text": "it will fall. So you can't push\nit the other way, but once you push it\nforward, it's open",
    "start": "2642650",
    "end": "2649720"
  },
  {
    "text": "and we're going to denote\nthat with an arrow. This is Eric Friedman.",
    "start": "2649720",
    "end": "2655559"
  },
  {
    "text": "And here is an xor crossover. This is kind of fun. If I come in this way,\nI push this guy over,",
    "start": "2655560",
    "end": "2661270"
  },
  {
    "text": "it falls down\nblocking that path, but I can still go through here,\nand if I push this one over,",
    "start": "2661270",
    "end": "2666430"
  },
  {
    "text": "the block falls, and\nI can go this way, but I'm blocked from going\nthis way or that way.",
    "start": "2666430",
    "end": "2672022"
  },
  {
    "text": "So that, again, works as\nlong as I'm only doing one of the two traversals. We have a fork gadget,\nwhich is familiar.",
    "start": "2672022",
    "end": "2678850"
  },
  {
    "text": "If you're coming out from\nhere, you can push this over and then you'd be prevented\nfrom going the other way because you, again, only have\nstrength 1, and symmetrically",
    "start": "2678850",
    "end": "2686710"
  },
  {
    "text": "the other side. Then the NAND ga-- Yeah? AUDIENCE: For the xor crossover,\nyou said you couldn't-- When",
    "start": "2686710",
    "end": "2695016"
  },
  {
    "text": "you're going from\nthe bottom one, you push that over and it falls,\nand then you can't go back up",
    "start": "2695016",
    "end": "2701990"
  },
  {
    "text": "because you couldn't\npush that block? PROFESSOR: Yeah. So I maybe need a wiggle here. AUDIENCE: The arrow is already\nrepresenting one-way gadgets?",
    "start": "2701990",
    "end": "2709044"
  },
  {
    "text": "PROFESSOR: Good. That's already here because\nthe arrow is a one-way. I forgot the notation. Yeah. It's not the input\nand the output.",
    "start": "2709044",
    "end": "2715386"
  },
  {
    "text": "This is an actual one-way. Good. OK.",
    "start": "2715386",
    "end": "2721839"
  },
  {
    "text": "And here's a fun thing I\nlearned from reading this paper, you don't even\nneed a NAND gadget, because you can simulate a NAND\ngadget with xor crossovers.",
    "start": "2721840",
    "end": "2729680"
  },
  {
    "text": "This is kind of like Jason's\nidea of using the crossover gadget to make copies.",
    "start": "2729680",
    "end": "2736100"
  },
  {
    "text": "If you traverse through this\nway, and through this way, we know that's possible,\nand if you have a set up",
    "start": "2736100",
    "end": "2743970"
  },
  {
    "text": "where, by going\nthrough a crossover you block the other traversal--\nso that would be a true xor",
    "start": "2743970",
    "end": "2748990"
  },
  {
    "text": "crossover-- Once I've\npushed this one over,",
    "start": "2748990",
    "end": "2757690"
  },
  {
    "text": "if I tried to go through\nthis way down to here, I would hit the block\nhere that had fallen from there and vice versa.",
    "start": "2757690",
    "end": "2764770"
  },
  {
    "text": "So if it actually prevents\nthe second traversal, and in Push-1X, it also\nprevented the second traversal",
    "start": "2764770",
    "end": "2770460"
  },
  {
    "text": "because we had\nnon-crossing paths. We weren't allowed to\nrevisit the same square, so there it was really trivial. Here with gravity, it's\na little more subtle,",
    "start": "2770460",
    "end": "2777180"
  },
  {
    "text": "because the second time\nyou come through maybe you could go back that way. But the key thing is that the\nsecond time you go through,",
    "start": "2777180",
    "end": "2783385"
  },
  {
    "text": "you won't be able to go through\nin the regular crossover way, and then you just string\ntwo of them together",
    "start": "2783385",
    "end": "2789044"
  },
  {
    "text": "and you can either traverse\nthis way or traverse this way, and each one will\nblock the other. So in the end, you just\nneed a one-way, fork, an xor",
    "start": "2789044",
    "end": "2797510"
  },
  {
    "text": "crossover, and some kind of\nnotion of sequential traversal and you can simulate 3-coloring.",
    "start": "2797510",
    "end": "2802940"
  },
  {
    "text": "So this is fun. I haven't seen this\ntechnique used too much, but in a few papers and\nmaybe we can use it for more.",
    "start": "2802940",
    "end": "2808440"
  },
  {
    "text": " Cool.",
    "start": "2808440",
    "end": "2814839"
  },
  {
    "text": "I didn't mention, but the Push-1\nproofs that we saw before, lecture four or whatever,\nrevisit the same square",
    "start": "2814840",
    "end": "2823010"
  },
  {
    "text": "many times. So we can't use those\nproofs for Push-1X. All the gadgets break.",
    "start": "2823010",
    "end": "2829000"
  },
  {
    "text": "The next problem I\nwant to talk about is a little different,\nanother graph problem. ",
    "start": "2829000",
    "end": "2841694"
  },
  {
    "text": "It's called graph orientation.  Kind of like edge coloring, but\nthe colors differ on each side.",
    "start": "2841695",
    "end": "2851160"
  },
  {
    "text": "So a graph orientation.",
    "start": "2851160",
    "end": "2857099"
  },
  {
    "text": " This is a pretty recent problem.",
    "start": "2857100",
    "end": "2862800"
  },
  {
    "text": "It was introduced in 2012,\nbut I think it's very cool and deserves much more study.",
    "start": "2862800",
    "end": "2871290"
  },
  {
    "text": "So you're given an\nundirected graph",
    "start": "2871290",
    "end": "2882370"
  },
  {
    "text": "and you want to find an\norientation-- orientation",
    "start": "2882370",
    "end": "2887710"
  },
  {
    "text": "means for every\nedge, you give it a direction-- satisfying\ncertain vertex constraints,",
    "start": "2887710",
    "end": "2906550"
  },
  {
    "text": "and there are three types of\nvertices, three types of vertex constraints. ",
    "start": "2906550",
    "end": "2915200"
  },
  {
    "text": "They are 1-in-3,\n2-in-3, and 0 or 3.",
    "start": "2915200",
    "end": "2926325"
  },
  {
    "text": "They all end in 3. I didn't mention, this\nis a 3 regular graph. Every vertex has\ndegree 3, and so",
    "start": "2926325",
    "end": "2935900"
  },
  {
    "text": "if you look at an orientation,\nevery vertex either has 3 in, 0 out, 2 in, 1 out,\n1 in, 2 out, or 0 in, 3 out.",
    "start": "2935900",
    "end": "2948250"
  },
  {
    "text": "And this problem is NP hard. Here is a simple\nreduction from 3SAT.",
    "start": "2948250",
    "end": "2955770"
  },
  {
    "text": "That's right, 1 in 3SAT. So we're going to have\na variable gadget, which",
    "start": "2955770",
    "end": "2960780"
  },
  {
    "text": "is just this loop of\na cycle in the graph. And for each of\nthese vertices that's",
    "start": "2960780",
    "end": "2969350"
  },
  {
    "text": "a solid black\ncircle is a 0 or 3. So that means in any\nsolution-- here's a solution-- you're going\nto alternate between all in",
    "start": "2969350",
    "end": "2977119"
  },
  {
    "text": "and all out, and\nthen all in, all out. So this is going to\nrepresent x and x-bar.",
    "start": "2977120",
    "end": "2982500"
  },
  {
    "text": "What the parity of that\ncycle is is up to you, you could either make all the\nx's all in or all the x-bars",
    "start": "2982500",
    "end": "2988400"
  },
  {
    "text": "all in, and that corresponds\nto x being true or false. I think in means\nfalse in this case.",
    "start": "2988400",
    "end": "2994800"
  },
  {
    "text": "And then for the clauses, we're\ngoing to use a 1 in 3 gadget.",
    "start": "2994800",
    "end": "3001570"
  },
  {
    "text": "It's because that's\na 1 in 3SAT clause. We want exactly one\nof these three things to be in coming to the clause.",
    "start": "3001570",
    "end": "3008390"
  },
  {
    "text": "That gives us exactly one\nof them being set to true. Now, here we're\nallowing negations.",
    "start": "3008390",
    "end": "3018630"
  },
  {
    "text": "We know that's not\nnecessary for 1 in 3SAT, but we can in this proof, so\nthey're drawn here anyway.",
    "start": "3018630",
    "end": "3025550"
  },
  {
    "text": "But to make it a little bit\nweird, one issue in this style,",
    "start": "3025550",
    "end": "3031300"
  },
  {
    "text": "or in this reduction,\nreally I just want a whole bunch of copies of x. But I get all these\ncopies of x-bar,",
    "start": "3031300",
    "end": "3038609"
  },
  {
    "text": "and I need to put\nthem somewhere. Every vertex has\nto have degree 3, so this has to go to something.",
    "start": "3038610",
    "end": "3044660"
  },
  {
    "text": "And so their solution for\ndoing that is for every clause, we also build the anti-clause\nand make it false.",
    "start": "3044660",
    "end": "3052359"
  },
  {
    "text": "So we want exactly two\nof the negated versions of these variables\nto be set to true.",
    "start": "3052360",
    "end": "3058300"
  },
  {
    "text": "That's the same thing as exactly\none of the positive forms of them being true.",
    "start": "3058300",
    "end": "3064540"
  },
  {
    "text": "Yes. So we just negate\neverything in the clause, and then wherever we use x, we\nalso use x-bar and vice versa.",
    "start": "3064540",
    "end": "3072569"
  },
  {
    "text": "So that guarantees that we\nuse up all of these instances. If there are k\noccurrences of x, then",
    "start": "3072570",
    "end": "3078460"
  },
  {
    "text": "we'll make k\noccurrences of x-bar and make them all used by the\ncorresponding anti-clauses.",
    "start": "3078460",
    "end": "3083950"
  },
  {
    "text": "So this is why we need those\nthree types of gadgets. If we're doing a\nproblem in the plane, we'll also need a\ncrossover for this to work.",
    "start": "3083950",
    "end": "3091810"
  },
  {
    "text": "But at this point, it's\njust a graph problem. OK? So that's cool.",
    "start": "3091810",
    "end": "3098640"
  },
  {
    "text": "And this problem was\nintroduced in order to solve a packing problem.",
    "start": "3098640",
    "end": "3106329"
  },
  {
    "text": "A little bit of\nhistory, some time ago, I think the '70s, there\nwas a paper about,",
    "start": "3106330",
    "end": "3112089"
  },
  {
    "text": "if I give you polygon\nsome orthogonal polygon shape with holes in it,\nand I want to pack as many,",
    "start": "3112090",
    "end": "3119790"
  },
  {
    "text": "say, 3 by 3 squares in the\npolygon, that's NP hard. If I want to pack as many 2\nby 2 squares, that's NP hard.",
    "start": "3119790",
    "end": "3127870"
  },
  {
    "text": "That was a later paper, and so\nhow much smaller of a square",
    "start": "3127870",
    "end": "3132980"
  },
  {
    "text": "can you make? Well, a 1 by 1 square, that's\npretty easy, in a grid polygon. How many 1 by 1\nsquares can I pack?",
    "start": "3132980",
    "end": "3139070"
  },
  {
    "text": "The area. In a grid polygon, how\nmany 2 by 1 rectangles",
    "start": "3139070",
    "end": "3144680"
  },
  {
    "text": "can I pack this way or this way? That's maximum\ncardinality matching.",
    "start": "3144680",
    "end": "3150069"
  },
  {
    "text": "So the next thing\nleft is trominoes. Three squares, and they\ncould be in an L-shape",
    "start": "3150070",
    "end": "3155250"
  },
  {
    "text": "or they could be in an I-shape. Here, we're thinking about\nboth problems separately. So suppose you have a whole\nbunch of L-shaped packages",
    "start": "3155250",
    "end": "3162470"
  },
  {
    "text": "that you want to fit into this\nweirdly shaped warehouse, that is NP hard. It's even hard in the\nexact packing case.",
    "start": "3162470",
    "end": "3169620"
  },
  {
    "text": "There will be no\nholes-- Sorry, there will be no gaps in this packing. Every unit square\nwill be filled,",
    "start": "3169620",
    "end": "3176810"
  },
  {
    "text": "and I think that's\nquite particular. Those other proofs of packing,\nthe 2 by 2 and the 3 by 3",
    "start": "3176810",
    "end": "3182089"
  },
  {
    "text": "squared into a polygon,\nI should have shown them, but they're from\n3SAT, planar 3SAT.",
    "start": "3182090",
    "end": "3188310"
  },
  {
    "text": "They leave gaps\nall over the place. Here, you don't leave\ngaps and I think it's somehow fundamental to\nthis graph orientation business.",
    "start": "3188310",
    "end": "3196070"
  },
  {
    "text": "So here is the idea of for an\nedge in that graph orientation",
    "start": "3196070",
    "end": "3201880"
  },
  {
    "text": "problem. It's basically a rectangle\nwith a bump every other square.",
    "start": "3201880",
    "end": "3207030"
  },
  {
    "text": "So this is a big hole. You're not allowed to\nput anything down there. And the idea is\nyou can either have",
    "start": "3207030",
    "end": "3213850"
  },
  {
    "text": "the L's all pointing\nto the right or all pointing to the left. And so you think of these\nas kind of the communication",
    "start": "3213850",
    "end": "3222160"
  },
  {
    "text": "position. One of these will correspond to\nthe edge pointing to the right, one will correspond to the\nedges pointing to the left.",
    "start": "3222160",
    "end": "3229320"
  },
  {
    "text": "And you can build a turn gadget. It works pretty cleanly. It doesn't matter whether\nthis is covered by that guy",
    "start": "3229320",
    "end": "3235615"
  },
  {
    "text": "or covered by that guy. It behaves the same\nas a regular wire. So again, it's either\nthis or this is occupied,",
    "start": "3235615",
    "end": "3241930"
  },
  {
    "text": "exactly one of them. That tells you the\norientation of the edge. So that's an edge.",
    "start": "3241930",
    "end": "3248660"
  },
  {
    "text": "You can also build a crossover. This is a little more casework. But again, this is\noccupied if and only",
    "start": "3248660",
    "end": "3256810"
  },
  {
    "text": "if this is not occupied, and\nthis is occupied if and only if this is not occupied, and\nall combinations are possible.",
    "start": "3256810",
    "end": "3262940"
  },
  {
    "text": "We just need to check that there\nis a valid packing no matter which of those choices you want. Either left and top being empty,\nor left and bottom being empty,",
    "start": "3262940",
    "end": "3271660"
  },
  {
    "text": "or top and right being empty,\nor bottom and right being empty. Those are the four cases.",
    "start": "3271660",
    "end": "3277810"
  },
  {
    "text": "Cool. Crossover. Now we need the 0 and\n3, 1 and 3, and 2 and 3.",
    "start": "3277810",
    "end": "3287500"
  },
  {
    "text": "So instead of a single 0 or\n3, they built two in a row. I don't know if\nthis is required,",
    "start": "3287500",
    "end": "3293739"
  },
  {
    "text": "but it's fine for the\nproof, because in the proof it was always XI, XI-Bar,\nso there are always 2, 0, or 3's in a\nrow, and there it is.",
    "start": "3293739",
    "end": "3305350"
  },
  {
    "text": "So in this setting,\nessentially either the left two will have bumps and the right\ntwo will not have bombs,",
    "start": "3305350",
    "end": "3312260"
  },
  {
    "text": "or vice versa, the right\ntwo will have bumps. This corresponds to\nthese guys all being out in all three directions,\nand these guys",
    "start": "3312260",
    "end": "3318640"
  },
  {
    "text": "all being in all three\ndirections, or vice versa, and these are all out\nand these are all in.",
    "start": "3318640",
    "end": "3323820"
  },
  {
    "text": "So that's the x or x-bar. And this gadget does it.",
    "start": "3323820",
    "end": "3329600"
  },
  {
    "text": "Again, check the cases. We have exactly 1-in-3. If exactly 1 of these is in,\nthen this will be packable,",
    "start": "3329600",
    "end": "3339420"
  },
  {
    "text": "and otherwise it won't. That's the part that's hard\nto show but you check it. And if you want a\n2-in-3 gadget, you just",
    "start": "3339420",
    "end": "3346359"
  },
  {
    "text": "add a couple more blocks\nright there and it works.",
    "start": "3346360",
    "end": "3352210"
  },
  {
    "text": "So that's it. Once you have all those gadgets,\nyou can do graph orientation and then you're NP hard.",
    "start": "3352210",
    "end": "3357760"
  },
  {
    "text": "That was for L-trominoes. Do the same thing\nfor I-trominoes. This is hard to see where the\nbold lines are, but if you look",
    "start": "3357760",
    "end": "3365080"
  },
  {
    "text": "and if you download the slide,\nit's probably a little easier to see, but, again,\nyou can build. Here, an edge gadget is\nfairly straightforward.",
    "start": "3365081",
    "end": "3374119"
  },
  {
    "text": "Just wiggle a path and\nyou'll either have it-- These wiggles are in\norder to guarantee--",
    "start": "3374120",
    "end": "3379930"
  },
  {
    "text": "There's actually three possible\nparities you could have. Sticking out by 1, or sticking\nout by 2 with an I-gadget.",
    "start": "3379930",
    "end": "3386059"
  },
  {
    "text": "This will force it to be\njust 1 or 0, because we",
    "start": "3386060",
    "end": "3391260"
  },
  {
    "text": "don't want it to be 2. And then the crossover\nis ugly, but it works.",
    "start": "3391260",
    "end": "3397820"
  },
  {
    "text": "And the 0, 3, and the\n1-in-3 are not too hard. And do I have the 2 in?",
    "start": "3397820",
    "end": "3402960"
  },
  {
    "text": "I think this is a 2-in-3,\nI didn't label it. So, presumably, for any\npolynomial shape you want,",
    "start": "3402960",
    "end": "3409909"
  },
  {
    "text": "you can build such\ngadgets so that we don't have such a theorem,\nbut I think this is neat.",
    "start": "3409909",
    "end": "3414990"
  },
  {
    "text": "It's a little different from\na lot of the other proofs, similar to one of the\nproblem set problems",
    "start": "3414990",
    "end": "3420590"
  },
  {
    "text": "where we had some constraints\non the neighboring things. But instead of about constraints\non the neighboring colors",
    "start": "3420590",
    "end": "3426300"
  },
  {
    "text": "of the vertices or\nwhatever, or the truth assignments in the vertices,\nhere, it's an edge direction.",
    "start": "3426300",
    "end": "3431650"
  },
  {
    "text": "So the edge directions are\ninteresting because, first of all, there's only\ntwo choices, but also",
    "start": "3431650",
    "end": "3436740"
  },
  {
    "text": "that what you see on one\nside is the opposite of what you see on the other side. ",
    "start": "3436740",
    "end": "3444560"
  },
  {
    "text": "Questions? So that is graph orientation,\nand I have one more",
    "start": "3444560",
    "end": "3453560"
  },
  {
    "text": "set of problems I\nwant to talk about. ",
    "start": "3453560",
    "end": "3462030"
  },
  {
    "text": "They have many names, but\nthe general family is usually",
    "start": "3462030",
    "end": "3468140"
  },
  {
    "text": "called something like\nlinear layout of a graph,",
    "start": "3468140",
    "end": "3475920"
  },
  {
    "text": "and it's a bijection--\nlet's call it f-- from the vertices to 1\nup to the number of vertices.",
    "start": "3475920",
    "end": "3489260"
  },
  {
    "text": "So in other words, I'm thinking\nof a one dimensional diagram",
    "start": "3489260",
    "end": "3494430"
  },
  {
    "text": "and the coordinates I have\nare 1, 2, up to the number of vertices and I just\nwant to put exactly one",
    "start": "3494430",
    "end": "3501280"
  },
  {
    "text": "vertex at each of these spots. So I basically want a\npermutation of the vertices, and then I slap them\ndown in that order,",
    "start": "3501280",
    "end": "3507744"
  },
  {
    "text": "and then I measure\nsomething about the quality of that layout\nbased on the edges. We haven't involved edges yet.",
    "start": "3507744",
    "end": "3513890"
  },
  {
    "text": "And there are many different\nmeasures you might consider. ",
    "start": "3513890",
    "end": "3520510"
  },
  {
    "text": "Here are many of them,\nbut without definitions. So let me tell you\nsome definitions.",
    "start": "3520510",
    "end": "3528569"
  },
  {
    "text": "So the first one, of the\nearliest to be considered, is called bandwidth.",
    "start": "3528570",
    "end": "3534460"
  },
  {
    "text": "Bandwidth is, if you look at an\nedge, one endpoint of the edge",
    "start": "3534460",
    "end": "3541816"
  },
  {
    "text": "gets mapped to one coordinate\nand the other endpoint gets mapped to another coordinate. You can measure the length of\nthat edge in the embedding.",
    "start": "3541816",
    "end": "3548010"
  },
  {
    "text": "I shouldn't call it embedding\nbecause it's non-crossing, but in the layout. So for some edge vw, you can\nmeasure the length of the edge.",
    "start": "3548010",
    "end": "3555440"
  },
  {
    "text": "If I want to minimize the\nmaximum length of any edge, that is bandwidth.",
    "start": "3555440",
    "end": "3561490"
  },
  {
    "text": "Why is it called bandwidth? Anyone know? ",
    "start": "3561490",
    "end": "3567290"
  },
  {
    "text": "No one does matrices anymore,\nor numerical linear algebra,",
    "start": "3567290",
    "end": "3573330"
  },
  {
    "text": "so I'll tell you why. ",
    "start": "3573330",
    "end": "3581380"
  },
  {
    "text": "If you have a matrix, let's\nsay, of 0's and 1's-- that's a",
    "start": "3581380",
    "end": "3586890"
  },
  {
    "text": "graph, of course-- and all\nof the non-zero elements are",
    "start": "3586890",
    "end": "3594269"
  },
  {
    "text": "in that band, then we\ncall this bandwidth w.",
    "start": "3594270",
    "end": "3601280"
  },
  {
    "text": "If it's 0 out here\nand 0 out here. Why are these interesting? Because then if you run\nGaussian elimination,",
    "start": "3601280",
    "end": "3606900"
  },
  {
    "text": "you always stay within the band. So this is some of the\nearly approaches to solving sparse linear systems.",
    "start": "3606900",
    "end": "3612220"
  },
  {
    "text": "If you can get all of\nthe 0's into the corners, then you can focus here,\nespecially if your tri-diagonal",
    "start": "3612220",
    "end": "3617822"
  },
  {
    "text": "is a common case. Anyway, that's called bandwidth,\nand what this problem is saying",
    "start": "3617822",
    "end": "3623110"
  },
  {
    "text": "is I'm allowed to permute the\nrows and columns of my matrix in order to minimize how\nmany diagonals I need to use.",
    "start": "3623110",
    "end": "3632049"
  },
  {
    "text": "So that is permutation\nto minimize bandwidth. It would be great,\nexcept it's NP hard.",
    "start": "3632050",
    "end": "3638490"
  },
  {
    "text": "It's NP hard even on\ntrees of maximum degree 3. It's NP hard even\non caterpillars.",
    "start": "3638490",
    "end": "3646329"
  },
  {
    "text": "Almost caterpillars. A caterpillar is a graph,\nsomething like this. ",
    "start": "3646330",
    "end": "3654100"
  },
  {
    "text": "I think this is caterpillar\nwith hair length at most 3, so these may\nbe paths of a length 3,",
    "start": "3654100",
    "end": "3661440"
  },
  {
    "text": "maybe they even\nbranch a little bit, but every vertex is within\ndistance 3 of a single path.",
    "start": "3661440",
    "end": "3669089"
  },
  {
    "text": "So even for such graphs,\nwhen mapped into matrices, this problem is NP hard. Lots of cases are NP hard,\neven for good graphs.",
    "start": "3669090",
    "end": "3677423"
  },
  {
    "text": "You might think of\nthat as more general, but it's not\nimmediately implied. OK. Cool.",
    "start": "3677424",
    "end": "3682970"
  },
  {
    "text": "That was bandwidth. Next one, which I've seen used\nin a few different hardness proofs, is minimum\nlinear arrangement.",
    "start": "3682970",
    "end": "3690550"
  },
  {
    "text": "Almost the same problem,\nbut instead of taking the maximum edge length and\ntrying to minimize that, take the sum of the edge lengths\nand try to minimize that.",
    "start": "3690550",
    "end": "3698054"
  },
  {
    "text": "That's minimum\nlinear arrangement. We will see a reduction\nfrom that in a moment.",
    "start": "3698054",
    "end": "3703300"
  },
  {
    "text": "It's NP hard, even for\nmy bipartite graphs. Cut width. This is, you draw all the\nedges as horizontal segments",
    "start": "3703300",
    "end": "3714850"
  },
  {
    "text": "and then I come in\nwith a vertical line and see how many\nedges can I cross.",
    "start": "3714850",
    "end": "3720410"
  },
  {
    "text": "I want to find a permutation,\nso I minimize the maximums,",
    "start": "3720410",
    "end": "3725765"
  },
  {
    "text": "you might call it\nstabbing width. The maximum number\nof edges that cross from the left side\nto the right side",
    "start": "3725766",
    "end": "3731150"
  },
  {
    "text": "where I take the maximum\nover all notions of side. I take the maximum over all\nchoices of this x-coordinate,",
    "start": "3731150",
    "end": "3736849"
  },
  {
    "text": "and I want to\nminimize that maximum. That is cut width. Why do I want to minimize\nthe maximum as opposed to,",
    "start": "3736850",
    "end": "3744010"
  },
  {
    "text": "say, minimizing the sum\nof those cut values? Because that's the same as\nminimum linear arrangement.",
    "start": "3744010",
    "end": "3753100"
  },
  {
    "text": "If I minimize the sum\nof all of these cuts, that's the same thing\nas minimizing the sum",
    "start": "3753100",
    "end": "3759110"
  },
  {
    "text": "of the lengths of the edges. So that's the same problem. So, OK. We got rid of one.",
    "start": "3759110",
    "end": "3765570"
  },
  {
    "text": "That was cut width. It's hard for planar\ngraphs, max degree 3, good graphs, lots of things.",
    "start": "3765570",
    "end": "3772270"
  },
  {
    "text": "I'm going to skip mod cut. That's just a slight different\nvariation on that definition.",
    "start": "3772270",
    "end": "3777950"
  },
  {
    "text": "Next one is vertex separation. ",
    "start": "3777950",
    "end": "3784420"
  },
  {
    "text": "OK. This is a different\nway of counting.  So here, I was counting\nhow many edges cross,",
    "start": "3784420",
    "end": "3792140"
  },
  {
    "text": "but maybe many of those edges\ncome from the same vertex. I don't want to double\ncount those, let's say.",
    "start": "3792140",
    "end": "3798030"
  },
  {
    "text": "I just want to count how many\nvertices on the left side have at least one edge that\ngoes to the right side, and only count it once instead\nof three times in this picture.",
    "start": "3798030",
    "end": "3806050"
  },
  {
    "text": "OK? Otherwise the same\nproblem as cut width. That is also hard.",
    "start": "3806050",
    "end": "3812470"
  },
  {
    "text": "That problem is different if\nyou look at the sum versions. You can account for\nevery partition point",
    "start": "3812470",
    "end": "3818990"
  },
  {
    "text": "how many vertices in the left\nhave an edge to the right side, sum that over all\nof these x values,",
    "start": "3818990",
    "end": "3825920"
  },
  {
    "text": "and then that is sum cut. All of these have been\nconsidered in various contexts.",
    "start": "3825920",
    "end": "3831830"
  },
  {
    "text": "Last one is edge by section. This is where you only look at\ncutting in the middle at v/2.",
    "start": "3831830",
    "end": "3837741"
  },
  {
    "text": "So you want to balance partition\nall the things on the left, you want to have very few\nedges to things on the right.",
    "start": "3837741",
    "end": "3844850"
  },
  {
    "text": "Or the vertex version\nwhere you want to minimize number\nvertices on the left and edges to the right\nhalf, but exactly half. v/2.",
    "start": "3844850",
    "end": "3851109"
  },
  {
    "text": "v/2. A ton of problems. I mentioned them\nso that if you ever run into a problem about\nordering vertices on a line,",
    "start": "3851110",
    "end": "3859206"
  },
  {
    "text": "you should look at\nall of those and see which one is the most useful. Sort of like we have\n3SAT and 1 and 3SAT, and not-all-equal-SAT Choose\nthe one that's easiest for you.",
    "start": "3859206",
    "end": "3866460"
  },
  {
    "text": "If you have some kind\nof ordering problem, choose the one that's\neasiest for you. Good to know that\nthese are out there.",
    "start": "3866460",
    "end": "3871930"
  },
  {
    "text": "They come from\nvarious applications. Cut width is studied\na lot in graph theory, graph minor stuff.",
    "start": "3871930",
    "end": "3878910"
  },
  {
    "text": "It's closely related\nto path width. Some of these\nproblem-- The bisection",
    "start": "3878910",
    "end": "3884039"
  },
  {
    "text": "comes from numerical\nlinear algebra. Minimum linear arrangement\ncomes, I think, originally",
    "start": "3884040",
    "end": "3889980"
  },
  {
    "text": "from VLSI layout, chip design. It's like a very simple version.",
    "start": "3889980",
    "end": "3895050"
  },
  {
    "text": "If you just have a bunch\nof ports on the bottom and you know that\ncertain things need to be connected by\nwires, that's your graph,",
    "start": "3895050",
    "end": "3900550"
  },
  {
    "text": "you want to minimize the\ntotal amount of wire stuff you have to-- minimize\nthe total wire lengths.",
    "start": "3900550",
    "end": "3906899"
  },
  {
    "text": "So that's minimum\nlinear arrangement. Very simple version of some\nkind of VLSI layout problem.",
    "start": "3906899",
    "end": "3913839"
  },
  {
    "text": "And there's this survey if you\nwant to see all these problems. There's one problem\nnot on the survey",
    "start": "3913840",
    "end": "3919289"
  },
  {
    "text": "because it's not about a\ngraph, it's about a hypergraph, but it's a useful one. Among ordering problems,\nit's the one I know the best.",
    "start": "3919290",
    "end": "3927020"
  },
  {
    "text": "I've tried to use\nit a couple times, but rarely have I succeeded in\ngetting an actual NP hardness proof from it, but\nI will show you one,",
    "start": "3927020",
    "end": "3934099"
  },
  {
    "text": "and it is called betweenness. So in this case, I'm\ngiven a bunch of triples,",
    "start": "3934100",
    "end": "3942580"
  },
  {
    "text": "a set of pairs of things-- it's\nnot a graph-- of the form y",
    "start": "3942580",
    "end": "3951000"
  },
  {
    "text": "is between x and z.",
    "start": "3951000",
    "end": "3956490"
  },
  {
    "text": "And what that means\nis either it's between x and z in\nthat sense, or it's",
    "start": "3956490",
    "end": "3964930"
  },
  {
    "text": "between x and z in\nthe other sense, where either x is to the left\nof z or z is to the left of x,",
    "start": "3964930",
    "end": "3972360"
  },
  {
    "text": "but y is always between. And here, of course, I really\nmean f of x and f of y.",
    "start": "3972360",
    "end": "3977740"
  },
  {
    "text": "I mean them in the\nlinear embedding. OK. So you're given a bunch\nof triples like this,",
    "start": "3977740",
    "end": "3982890"
  },
  {
    "text": "and then you want to find a\nlinear layout of your letters.",
    "start": "3982890",
    "end": "3988789"
  },
  {
    "text": "So again, that's a\nbijection from 1 to n, and such that these all hold.",
    "start": "3988790",
    "end": "3996280"
  },
  {
    "text": "So there's no objective\nfunction to minimize here. It's just you want each of\nthese things to be true.",
    "start": "3996280",
    "end": "4002490"
  },
  {
    "text": "So this is nice, because it's\na pretty clean constraint and yet, it's hard. If I, for example,\nwas just giving",
    "start": "4002490",
    "end": "4008320"
  },
  {
    "text": "you-- If I gave you a bunch of\ninequality constraints, like x is less than y. That's easy. That's sorting a partial order.",
    "start": "4008320",
    "end": "4014160"
  },
  {
    "text": "But here, you have a\nlittle bit of ambiguity. You don't know how\nx and z relate. You just know that y\nis in between them.",
    "start": "4014160",
    "end": "4019236"
  },
  {
    "text": "That's enough to get hardness. So I'm not going to prove\nany of those problems hard,",
    "start": "4019236",
    "end": "4025810"
  },
  {
    "text": "but I will show you two\nexamples of hardness proofs.",
    "start": "4025810",
    "end": "4031230"
  },
  {
    "text": "First one is going to be from\nthe minimum linear arrangement.",
    "start": "4031230",
    "end": "4036840"
  },
  {
    "text": "In case you haven't\nalready memorized all the problems I just\ndescribed, let me remind you.",
    "start": "4036840",
    "end": "4042750"
  },
  {
    "text": "Minimum linear\narrangement was minimize the sum of the edge lengths.",
    "start": "4042750",
    "end": "4051160"
  },
  {
    "text": "That was the second\nproblem I described, that was like the VLSI layout. Minimize the sum of\nall the red lines.",
    "start": "4051160",
    "end": "4058190"
  },
  {
    "text": "Find the permutation\nthat does that. So we're going to\nreduce it first to a problem called\nbipartite crossing number.",
    "start": "4058190",
    "end": "4065511"
  },
  {
    "text": "It's a bit of a weird problem. It's mostly a stop gap on the\nway to another problem, which is crossing number.",
    "start": "4065511",
    "end": "4071340"
  },
  {
    "text": "Suppose you're given\nbipartite a graph, which is hard to see in this picture. Given a bipartite graph, and\nyou want to draw in the plane.",
    "start": "4071340",
    "end": "4080915"
  },
  {
    "start": "4080915",
    "end": "4087420"
  },
  {
    "text": "So I have some\nbipartite graph, I want to draw it in the\nplane in a special way.",
    "start": "4087420",
    "end": "4096049"
  },
  {
    "text": "I want all of the vertices\nin one side of bipartition",
    "start": "4096050",
    "end": "4101215"
  },
  {
    "text": "to be on a horizontal line. I want all the vertices in the\nother side of the bipartition to be on a parallel\nhorizontal line.",
    "start": "4101216",
    "end": "4108824"
  },
  {
    "text": "And all the edges\nare in between. They're straight lines. And I want to minimize\nthe number of crossings.",
    "start": "4108825",
    "end": "4114399"
  },
  {
    "text": "So it's this very specific\nkind of graph layout problem, but minimizing number of\ncrossing is clearly good. We want to draw as\nplanar as possible.",
    "start": "4114399",
    "end": "4121359"
  },
  {
    "text": "So here is a reduction from\nminimum linear arrangement to bipartite crossing number.",
    "start": "4121359",
    "end": "4127500"
  },
  {
    "start": "4127500",
    "end": "4136950"
  },
  {
    "text": "So in this problem, we're\ngiven a general graph, not necessarily bipartite. We want to convert it\ninto a bipartite graph.",
    "start": "4136950",
    "end": "4144450"
  },
  {
    "text": "How do we do that? Make two copies of every vertex. OK, so for every vertex in\nthe minimum linear arrangement",
    "start": "4144450",
    "end": "4151750"
  },
  {
    "text": "problem, we're going to\nmake two copies called bottom one and top one, top\ntwo and bottom two, bottom",
    "start": "4151750",
    "end": "4158969"
  },
  {
    "text": "two and top two, and so on. So there's n top vertices\nand bottom vertices,",
    "start": "4158970",
    "end": "4164250"
  },
  {
    "text": "and I'm going to do two things. One is connect a\nwhole bunch of edges.",
    "start": "4164250",
    "end": "4169859"
  },
  {
    "text": "And a whole bunch\nmeans e squared, and between bottom I and\ntop I. I just do that.",
    "start": "4169859",
    "end": "4179630"
  },
  {
    "text": "That will basically\nforce this kind of layout where, basically,\nthe order on the top",
    "start": "4179630",
    "end": "4185040"
  },
  {
    "text": "has to be identical to\nthe order on the bottom. Because if ever any of these\ntwo bundles of edges crossed,",
    "start": "4185040",
    "end": "4190568"
  },
  {
    "text": "you would get e to\nthe fourth crossings. And so if you ever\nwant to get less than e to the fourth\ncrossings-- and that's",
    "start": "4190569",
    "end": "4196489"
  },
  {
    "text": "what we will hopefully\ndo-- then these must appear same order\non top and bottom. But we don't know\nwhat the order is.",
    "start": "4196489",
    "end": "4203340"
  },
  {
    "text": "You can still permute\nthe bottom, just correspondingly permute\nthe top, and all",
    "start": "4203340",
    "end": "4208870"
  },
  {
    "text": "be well as far as\nthese edge bundles go. So that's good, because it\nhas exactly the flexibility, we have exactly one\npermutation on n things.",
    "start": "4208870",
    "end": "4215339"
  },
  {
    "text": "That's what we want\nto represent with minimum linear arrangement. Then the only other\nthing we do is add in the edges of the graph.",
    "start": "4215339",
    "end": "4222030"
  },
  {
    "text": "But in the minimum linear\narrangement problem, the edges are like\nfrom vertex I to vertex",
    "start": "4222030",
    "end": "4228140"
  },
  {
    "text": "J. We're going to make that\nconnection from bottom I to top J. There's this choice, but it\ndoesn't matter which is which.",
    "start": "4228140",
    "end": "4236940"
  },
  {
    "text": "So the idea is, then, that edge\nwill cross a bunch of bundles.",
    "start": "4236940",
    "end": "4243230"
  },
  {
    "text": "The number of bundles\nit crosses is the length of the edge minus 1, I think.",
    "start": "4243230",
    "end": "4250700"
  },
  {
    "text": "I'll ignore these\nadditive constants. You have to be careful to\nmake sure everything adds up",
    "start": "4250700",
    "end": "4255730"
  },
  {
    "text": "the right way. If you have a link\n0 edge-- We never have the link 0 edge,\nbecause vertices",
    "start": "4255730",
    "end": "4261580"
  },
  {
    "text": "map to different places. If you have a length 1 edge,\nyou won't cross anything, so 0 crossings. If you have a length 2 edge, you\nwill cross exactly one bundle,",
    "start": "4261580",
    "end": "4270070"
  },
  {
    "text": "and you pay e squared for that. In general, it will\nbe something like e squared times the sum of\nthe lengths of the edges.",
    "start": "4270070",
    "end": "4276114"
  },
  {
    "text": "Not exactly. You have to subtract\noff some things, but you just compute\nwhat that is.",
    "start": "4276115",
    "end": "4281679"
  },
  {
    "text": "It will always be basically\nsome fixed constant times",
    "start": "4281680",
    "end": "4287011"
  },
  {
    "text": "the minimum linear\narrangement cost, which was the sum of the lengths\nof the edges plus some fixed",
    "start": "4287011",
    "end": "4292989"
  },
  {
    "text": "constant. And so you can solve the\nbipartite crossing number with a given specified number\nof crossings if and only",
    "start": "4292990",
    "end": "4299630"
  },
  {
    "text": "if you can solve minimum linear\narrangement with a specified sum of edge lengths. Question.",
    "start": "4299630",
    "end": "4304784"
  },
  {
    "text": "AUDIENCE: What about the\ncrossing between edges? ",
    "start": "4304785",
    "end": "4310560"
  },
  {
    "text": "PROFESSOR: Yes. There's also crossings\nbetween edges,",
    "start": "4310560",
    "end": "4315680"
  },
  {
    "text": "and you have to count them. AUDIENCE: [INAUDIBLE] because\nyou can't get more than e squared with this\nin the normal case?",
    "start": "4315680",
    "end": "4322296"
  },
  {
    "text": "PROFESSOR: Yes. So that will be in the noise. The bulk of the\nnumber of crossings will be from crossing the\nbundles with the single edges.",
    "start": "4322296",
    "end": "4332260"
  },
  {
    "text": "You don't want to have\nbundle-bundle crossings. Those, you can never afford.",
    "start": "4332260",
    "end": "4338000"
  },
  {
    "text": "So you're basically counting\nbundles versus single edges. The total number of\nsingle edge crossings will be strictly\nless than e squared,",
    "start": "4338000",
    "end": "4345120"
  },
  {
    "text": "and so it will be strictly\nless than a single guy crossing a bundle. So you have to inflate.",
    "start": "4345120",
    "end": "4350456"
  },
  {
    "text": "It's not an exact\ncounting, because you don't know how many of\nthose single edge crossings you're going to get. So you have to add\nalmost e squared.",
    "start": "4350456",
    "end": "4360810"
  },
  {
    "text": "I have the exact count here. I don't know how\ninteresting it is. But what they wrote, it's\ne squared times k minus e,",
    "start": "4360810",
    "end": "4370420"
  },
  {
    "text": "plus 1 minus 1 is the\nexact number in the paper. k here is the sum of the lengths\nof the edges in that problem.",
    "start": "4370420",
    "end": "4378800"
  },
  {
    "text": "This is, I think, the minus 1\nper edge, that gets multiplied",
    "start": "4378800",
    "end": "4384686"
  },
  {
    "text": "by e squared, and then\nwe're basically adding e squared minus 1 at the end. So almost e squared to allow\nfor any number of crossings",
    "start": "4384686",
    "end": "4392040"
  },
  {
    "text": "between the single guys. It does make a lot of sense.",
    "start": "4392040",
    "end": "4397590"
  },
  {
    "text": "OK. So that was bipartite\ncrossing number, but the more natural\nproblem, I would say, is I give you a\ngraph, I want to draw",
    "start": "4397590",
    "end": "4403920"
  },
  {
    "text": "on the plane with\nfewest crossings. That is, crossing number,\nand it's a reduction",
    "start": "4403920",
    "end": "4410100"
  },
  {
    "text": "from the previous problem. So basically, you can\nforce these vertices",
    "start": "4410100",
    "end": "4416070"
  },
  {
    "text": "to be on a horizontal\nline, and these vertices to be on another\nhorizontal line, and to only have\nedges between here",
    "start": "4416070",
    "end": "4423309"
  },
  {
    "text": "and here by adding huge bundles\nout here to basically prevent",
    "start": "4423310",
    "end": "4428400"
  },
  {
    "text": "anything from going out there, Now we're given a\nbipartite graph. We want to draw it\nin this kind of way,",
    "start": "4428400",
    "end": "4434580"
  },
  {
    "text": "minimizing number of\ncrossings in between. And so this will turn\nthat into a general graph.",
    "start": "4434580",
    "end": "4440540"
  },
  {
    "text": "It's actually still bipartite,\nbut now the planar embedding",
    "start": "4440540",
    "end": "4446160"
  },
  {
    "text": "is forced, more or less. I mean, it's not an embedding. I keep using that word. The planar drawing is\nmore or less forced.",
    "start": "4446160",
    "end": "4452310"
  },
  {
    "text": "You can show these guys have\nto be in this kind of topology, and then there's some\ncrossings in here, but none of these edges\ncould ever cross this,",
    "start": "4452310",
    "end": "4458866"
  },
  {
    "text": "because this is way more\nthan the number of crossings in the input graph.",
    "start": "4458866",
    "end": "4464065"
  },
  {
    "text": "Yeah? AUDIENCE: What about\nnot multi-graphs? PROFESSOR: Not multi-graphs?",
    "start": "4464065",
    "end": "4470120"
  },
  {
    "text": "Good question. I assume you can split\nthese things up, or maybe",
    "start": "4470120",
    "end": "4476260"
  },
  {
    "text": "subdivide the edges,\nor some trick, but I have to be very careful.",
    "start": "4476260",
    "end": "4482090"
  },
  {
    "text": "I don't know for sure. Definitely not\nmentioned in this paper. OK. So that was crossing number,\nbipartite, and unconstraints.",
    "start": "4482090",
    "end": "4493780"
  },
  {
    "text": "And I have one more sketch of a\nproof, which is mostly for fun,",
    "start": "4493780",
    "end": "4500829"
  },
  {
    "text": "and I get to use\nmy favorite phrase, how to kill log n birds with\none stone, or order one stones.",
    "start": "4500830",
    "end": "4507110"
  },
  {
    "text": "So suppose you have\na Rubik's cube, but 3, by 3, by 3, that's easy.",
    "start": "4507110",
    "end": "4512200"
  },
  {
    "text": "So you have an n, by n, by\nn Rubik's cube, like this 7, by 7, by 7, v cube, and\nmoves are-- I assume you all",
    "start": "4512200",
    "end": "4520750"
  },
  {
    "text": "know how a Rubik's cube works. You can rotate in each\nof these directions-- and I hope not to\nmess it up too much--",
    "start": "4520750",
    "end": "4528960"
  },
  {
    "text": "and your goal is to get to the\nstate where it's all solved. Now, usually, someone's\nmean, and they mix it all up,",
    "start": "4528960",
    "end": "4534610"
  },
  {
    "text": "and they just give it\nyou like, OK solve it. I don't just want\nto solve it, I want to solve it with\nthe fewest moves,",
    "start": "4534610",
    "end": "4539960"
  },
  {
    "text": "because it's polynomial\ntime to solve it at all. I want to solve it\nin the fewest moves.",
    "start": "4539960",
    "end": "4545499"
  },
  {
    "text": "So if I'm given this\nposition, I want to know it's only one\nmove away from solved. ",
    "start": "4545499",
    "end": "4551350"
  },
  {
    "text": "We do not know the\ncomplexity of that problem. Let me first tell you a nice\nway to think about this problem",
    "start": "4551350",
    "end": "4561100"
  },
  {
    "text": "is actually in the 2D case. So these are not\nbuilt super large, but, again, I can rotate\neither a row or a column.",
    "start": "4561100",
    "end": "4576240"
  },
  {
    "text": "So at a high level, you can\nthink of a picture like this. You have a red side\nand a blue side,",
    "start": "4576240",
    "end": "4582270"
  },
  {
    "text": "and there's a certain--\nIf you think about where this square goes, it\ncan go to this position,",
    "start": "4582270",
    "end": "4588989"
  },
  {
    "text": "to this position,\nand this position. In general, a\nlittle cube can only go to four different\nspots in 2D.",
    "start": "4588990",
    "end": "4594760"
  },
  {
    "text": "On the 3D cube,\nthere's 24 spots it can go to, because there are\n24 automorphisms on the cube. It's just a lot harder to\nsee, but it's essentially",
    "start": "4594760",
    "end": "4601270"
  },
  {
    "text": "the same thing going on. So here's a sort of\nthing you could do. If I flip this column,\nthese guys go over to here,",
    "start": "4601270",
    "end": "4608900"
  },
  {
    "text": "and they flip upside down. So whatever was red here\nbecomes blue down here, and it gets reflected\nacross this line.",
    "start": "4608900",
    "end": "4615670"
  },
  {
    "text": "So when I do this move,\nI get this pattern for that row, that column. If I also do it at this\ncolumn, I get that pattern.",
    "start": "4615670",
    "end": "4623120"
  },
  {
    "text": "OK. So now maybe I do\nthese two columns. They completely flip,\nbecome all blue. Now maybe I do these two\ncolumns and I get this picture",
    "start": "4623120",
    "end": "4631250"
  },
  {
    "text": "because these red spots become\nblue up here, and so on.",
    "start": "4631250",
    "end": "4638040"
  },
  {
    "text": "And then if I flip these two\nrows, hey, I solved the puzzle. And in general, if you look at\na [? cubee ?] and the four other",
    "start": "4638040",
    "end": "4646440"
  },
  {
    "text": "[? cubees ?] that it can go\nto, they have some pattern. There's a constant number\npatterns they can have. For 2D it's-- I forget-- like\n10 or 20 different patterns.",
    "start": "4646440",
    "end": "4655360"
  },
  {
    "text": "In 3D, it's, like, a lot more. Billions or something. Anyway.",
    "start": "4655360",
    "end": "4660860"
  },
  {
    "text": "But it's constant, even\nfor an n, by n, by n cube.",
    "start": "4660860",
    "end": "4665969"
  },
  {
    "text": "So you can characterize\nfor each such pattern what it needs to be solved. So these [? cubees ?],\nfor example,",
    "start": "4665970",
    "end": "4672160"
  },
  {
    "text": "need a column, row, column, row. That's what we showed. We flipped its column,\nthen we flipped its row,",
    "start": "4672160",
    "end": "4678200"
  },
  {
    "text": "then we flipped its column,\nthen we flipped its row. That solved it. That's exactly what they need. And in minimal solution,\nyou will do that.",
    "start": "4678200",
    "end": "4683830"
  },
  {
    "text": "But what you see\nhere is, suppose I had a big grid of them. I could do all the columns, then\nall the rows containing them,",
    "start": "4683830",
    "end": "4690470"
  },
  {
    "text": "then all of the columns\nand all the rows. If they were in the\nsame initial pattern, I get a big savings in how\nquickly I can solve it.",
    "start": "4690470",
    "end": "4698410"
  },
  {
    "text": "If I have an x by y grid\nof identically oriented [? cubees ?], I can\nsolve it in about x",
    "start": "4698410",
    "end": "4703470"
  },
  {
    "text": "plus y moves instead\nof x times y moves. And this is something we used to\nprove that you can solve an n,",
    "start": "4703470",
    "end": "4709340"
  },
  {
    "text": "by n, by n Rubik's cube and n\nsquared divided by log n moves, in the worst case. So you can kill log n\nbirds with one stone.",
    "start": "4709340",
    "end": "4715150"
  },
  {
    "text": "There's always such a grid\nof area roughly log n. But here, I want to use\nthat idea for hardness.",
    "start": "4715150",
    "end": "4724849"
  },
  {
    "text": "In some sense, that was to\ngive you some intuition. Sadly, we don't know whether\nthis problem is NP hard,",
    "start": "4724850",
    "end": "4729920"
  },
  {
    "text": "minimizing the number\nof moves, but what we do know is that if\nsome of the stickers fell off your cube,\nthen it's NP hard.",
    "start": "4729920",
    "end": "4736270"
  },
  {
    "text": "So the white things\nhere don't care. You don't care what\nstate they end up in.",
    "start": "4736270",
    "end": "4741890"
  },
  {
    "text": "They're sort of\nwild cards, so it could be the sticker\ncame off or maybe it just changes its\ncolor to whatever's",
    "start": "4741890",
    "end": "4746990"
  },
  {
    "text": "correct at the moment. But some of the\nstickers are still on and they have to be\nsolved, and this is",
    "start": "4746990",
    "end": "4752650"
  },
  {
    "text": "a reduction from betweenness. This gadget will be solvable\nin a certain number of moves",
    "start": "4752650",
    "end": "4759730"
  },
  {
    "text": "if and only if the first time\nyou make the x2 column move",
    "start": "4759730",
    "end": "4766430"
  },
  {
    "text": "is between the first time\nyou make the x1 column move and the x3 column move.",
    "start": "4766430",
    "end": "4772164"
  },
  {
    "text": "I think these are\nin the situation that they want to do\ncolumn, row, column, row, something like that. So each one's going\nto get used twice.",
    "start": "4772164",
    "end": "4778500"
  },
  {
    "text": "It's a matter of how you\nintersperse those orders. So it's an ordering problem, and\nthis ends up being betweenness.",
    "start": "4778500",
    "end": "4783920"
  },
  {
    "text": "I will not go through the proof. It's quite tedious. So this column is going\nto get used many times",
    "start": "4783920",
    "end": "4790010"
  },
  {
    "text": "in the reduction. Basically, you just work\nin the upper left corner of the picture because the\nother quarters move similarly.",
    "start": "4790010",
    "end": "4799620"
  },
  {
    "text": "You introduce some\nextra rows and columns that are specific to\nthis betweenness gadget, and if you want to have\nmore betweenness gadgets,",
    "start": "4799620",
    "end": "4806220"
  },
  {
    "text": "you add more such columns\nand rows in this pattern. As long as they're sort of\noff diagonal from each other,",
    "start": "4806220",
    "end": "4812930"
  },
  {
    "text": "they won't interact, hence you\nend up with a big betweenness reduction.",
    "start": "4812930",
    "end": "4818410"
  },
  {
    "text": "So that's it for today. ",
    "start": "4818410",
    "end": "4825060"
  }
]