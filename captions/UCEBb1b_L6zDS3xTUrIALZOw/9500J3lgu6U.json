[
  {
    "start": "0",
    "end": "65000"
  },
  {
    "text": "Quiz two is this\nweek on Friday from, I hope that's\ncorrect, whatever's on the webpage is correct,\nbut I think it's lecture 9",
    "start": "0",
    "end": "6300"
  },
  {
    "text": "through recitation number 15. So, in particular,\nthe log structure",
    "start": "6300",
    "end": "11380"
  },
  {
    "text": "file system paper\nis not on the exam. Some of you may have\nbeen told otherwise.",
    "start": "11380",
    "end": "15190"
  },
  {
    "text": "What we're going to\ndo today is continue our discussion of atomicity.",
    "start": "18480",
    "end": "21695"
  },
  {
    "text": "Which, as you'll recall,\nis two properties that have to hold in order\nfor atomicity to hold.",
    "start": "27100",
    "end": "32969"
  },
  {
    "text": "And the first property\nthat we talked about",
    "start": "32970",
    "end": "39200"
  },
  {
    "text": "was recoverability. And the other\nproperty, which is what we're going to spend most of\nour time on today, is isolation.",
    "start": "39200",
    "end": "47059"
  },
  {
    "text": "So, before we get\ninto isolation, I just want to wrap up the\ndiscussion of recoverability because we left it a little\nbit of three-quarters",
    "start": "66450",
    "end": "74660"
  },
  {
    "text": "and didn't quite finish it. So the story here\nwas what we did",
    "start": "74660",
    "end": "79780"
  },
  {
    "text": "first was talked\nabout how to achieve a recoverable sector\nusing two copies",
    "start": "79780",
    "end": "88280"
  },
  {
    "text": "of the data and the chooser\nsector to choose between them. We talked about one way of\nachieving recoverability",
    "start": "88280",
    "end": "96190"
  },
  {
    "text": "using version histories. And we did complete\nthat discussion.",
    "start": "96190",
    "end": "102980"
  },
  {
    "text": "And then we started talking\nabout a more efficient way of achieving recoverability\nin situations where",
    "start": "102980",
    "end": "109130"
  },
  {
    "text": "you cared a lot about\nperformance using logging.",
    "start": "109130",
    "end": "111295"
  },
  {
    "text": "And the main in logging\nis this protocol for when you decide to write\nthe log called the write ahead",
    "start": "117580",
    "end": "124832"
  },
  {
    "text": "logging (WAL) protocol. And the idea is very simple. Always write to the log\nbefore you update cell store.",
    "start": "124832",
    "end": "131860"
  },
  {
    "text": "And that's the main discipline\nthat if you always follow then you'll get things right.",
    "start": "131860",
    "end": "137890"
  },
  {
    "text": "But one of the\nconsequences of logging, you get two things\nfrom having this log. The first is when\nan action aborts.",
    "start": "137890",
    "end": "144452"
  },
  {
    "text": "Independent of\nfailure, when you're running an atomic\naction and the program calls abort or the system\naborts that action,",
    "start": "144452",
    "end": "151750"
  },
  {
    "text": "what the log allows you to do\nis go back through the log, scan the log backwards,\nlook at all of the steps",
    "start": "151750",
    "end": "158010"
  },
  {
    "text": "that that action took. And that action\ndidn't quite commit so you have to back\nthose changes out,",
    "start": "158010",
    "end": "163730"
  },
  {
    "text": "and the log helps\nyou unroll backward. So primarily what you need\nwith a logging scheme,",
    "start": "163730",
    "end": "170989"
  },
  {
    "text": "in or to do aborts, is\nthe ability to undo.",
    "start": "170990",
    "end": "176410"
  },
  {
    "text": "Which means that what you need\nin the log, whenever you update a cell store to\nsomething else, you need",
    "start": "176410",
    "end": "182709"
  },
  {
    "text": "to keep track of the old value. And this is what we called\nin the log as an undo step.",
    "start": "182710",
    "end": "187040"
  },
  {
    "start": "190000",
    "end": "463000"
  },
  {
    "text": "But now failures also happen\nin addition to aborts, and we need a little bit\nmore mechanism in addition",
    "start": "190040",
    "end": "202010"
  },
  {
    "text": "to just the ability to undo. And to understand why, let's\ntake a specific example",
    "start": "202010",
    "end": "207880"
  },
  {
    "text": "where you have an application\nand it is writing data to a database that is on disk.",
    "start": "207880",
    "end": "213560"
  },
  {
    "text": "And what we said\nwas there was a log and the log is stored\non disk as well.",
    "start": "217620",
    "end": "224392"
  },
  {
    "text": "And let's assume that\nthe log is actually stored on a different disk. Now, the write ahead\nlog protocol basically",
    "start": "224392",
    "end": "229970"
  },
  {
    "text": "says that whenever\nyou update, so you have an action which\nhas things like reads and writes of cell store.",
    "start": "229970",
    "end": "235565"
  },
  {
    "text": "And whenever there's a\nwrite to a cell store, the write ahead log protocol\nsays write to the log before you write to the\ndatabase or to the cell store.",
    "start": "235565",
    "end": "244140"
  },
  {
    "text": "So two things can happen. The first thing,\nthe simplest model here is that all\nwrites are synchronous.",
    "start": "244140",
    "end": "251040"
  },
  {
    "text": "What this means\nis that if you see a write statement\nin an atomic action,",
    "start": "251040",
    "end": "257250"
  },
  {
    "text": "the first thing you have to\ndo is to write to the log. And then that returns. And then you write\nto the database.",
    "start": "257250",
    "end": "263990"
  },
  {
    "text": "And then you run\nthe next action, the next step of the action. So clearly by the\ntime in this action,",
    "start": "263990",
    "end": "269890"
  },
  {
    "text": "if you ever get to\nthe commit point and you're about to\nexit your commit, it means that all of\nthe data has already",
    "start": "269890",
    "end": "275932"
  },
  {
    "text": "been written to the database. Because, by assumption, we\nassume that all of the writes are synchronous and you write\nto the database and only",
    "start": "275932",
    "end": "282800"
  },
  {
    "text": "then do you go to the next step. And, assuming there's only\none thread of execution, then in this simple model, you\nalways write to the database,",
    "start": "282800",
    "end": "290855"
  },
  {
    "text": "you first write to\nthe log and then you write to this self-store\nin the database. But by construction, when\nyou get to the commit point,",
    "start": "290855",
    "end": "297860"
  },
  {
    "text": "you know for sure\nthat all of the data has been written\nto the database. So if a failure happens now\nand you didn't get to commit",
    "start": "297860",
    "end": "305039"
  },
  {
    "text": "and the system failed\nbefore the commit ran any time in the\nmiddle of this action,",
    "start": "305040",
    "end": "310690"
  },
  {
    "text": "the only thing you\nreally need to do is to roll back all of the\nchanges made by actions that",
    "start": "310690",
    "end": "316800"
  },
  {
    "text": "didn't get to\ncommit, which means that in this model that\nI've described so far, the only thing you need to do\nis to undo actions that respond",
    "start": "316800",
    "end": "326150"
  },
  {
    "text": "to actions that didn't commit. Any action that\ncommitted by construction",
    "start": "326150",
    "end": "333750"
  },
  {
    "text": "must have written\nall of its data and installed that\ndata into cell store. Because if an action gets\nto the statement to run",
    "start": "333750",
    "end": "339840"
  },
  {
    "text": "commit and then finishes\ncommit, when it got to commit, you know that because\nof all the writes being synchronous\nto the cell store,",
    "start": "339840",
    "end": "347310"
  },
  {
    "text": "you know that that\nwrite got written. And, by the write\nprotocol's definition, you know the log got\nwritten before that.",
    "start": "347310",
    "end": "352700"
  },
  {
    "text": "So you don't actually\nhave to do anything. Even though the log contains the\nresults of these actions that",
    "start": "352700",
    "end": "358600"
  },
  {
    "text": "committed, you don't\nhave to do anything for the committed actions. So, in fact, this undo\nlog is enough to handle",
    "start": "358600",
    "end": "365550"
  },
  {
    "text": "the simple database as well\nwhere all of the writes are being done synchronously\nin this application.",
    "start": "365550",
    "end": "373360"
  },
  {
    "text": "But there are a few\nthings that can happen. One of the reasons we\nthrew out version histories",
    "start": "373360",
    "end": "378880"
  },
  {
    "text": "or discarded the idea to go\nto this logging oriented model is for higher performance.",
    "start": "378880",
    "end": "384305"
  },
  {
    "text": "And one of the ways we got\nhigher performance is we didn't have to do these\nlink list reversals in order to read and write items.",
    "start": "384305",
    "end": "390660"
  },
  {
    "text": "But it's also going\nto be tempting, and you've seen\nthis before, to not",
    "start": "390660",
    "end": "395680"
  },
  {
    "text": "want to do synchronous writes\nto cell store on a database in order to get\nhigh performance. You might have\nasynchronous writes",
    "start": "395680",
    "end": "401650"
  },
  {
    "text": "happening to the database\nand you don't know when those writes complete. And what could happen,\nas a result of that,",
    "start": "401650",
    "end": "409300"
  },
  {
    "text": "is you'd issue some\nwrites to the database and then you go ahead and\nyou commit the action.",
    "start": "409300",
    "end": "415759"
  },
  {
    "text": "But what could\nhappen is the data that was supposed to be\nwritten to this database as store may not actually have\ngotten written because there's",
    "start": "415760",
    "end": "423139"
  },
  {
    "text": "some kind of a cache in\nmemory that actually returned to you from the write, but the\nwrite actually never made it",
    "start": "423140",
    "end": "431490"
  },
  {
    "text": "to the database. So this system, for\nhigher performance, if you stick the cache in\nhere, what could happen",
    "start": "431490",
    "end": "438060"
  },
  {
    "text": "is that you might\nreach the commit point",
    "start": "438060",
    "end": "443280"
  },
  {
    "text": "and finish commit but not be\nguaranteed that the cell store data actually got\nwritten to the database.",
    "start": "443280",
    "end": "450400"
  },
  {
    "text": "And if you fail\nnow after commit, you have to go through the\nlog and redo the actions",
    "start": "450400",
    "end": "456180"
  },
  {
    "text": "for all of those actions\nthat committed because some of those actions may not\nhave made it into the cell",
    "start": "456180",
    "end": "461650"
  },
  {
    "text": "storage in the database. So what this means\nis that in general, when you put a cash here,\nany memory cash here",
    "start": "461650",
    "end": "468190"
  },
  {
    "start": "463000",
    "end": "779000"
  },
  {
    "text": "or if you have any situation\nwhere the writes are asynchronously being\ndone to cell store, you need both an undo log\nin order to handle aborts",
    "start": "468190",
    "end": "479389"
  },
  {
    "text": "and to handle the\nsimple case and you need the ability to redo the\nresults of certain actions",
    "start": "479390",
    "end": "487950"
  },
  {
    "text": "from the log. And both of these are\ndone, so the system fails and then, when you\nrecover, before you",
    "start": "487950",
    "end": "493123"
  },
  {
    "text": "allow other actions that might\nbe ready to go to take over, the system has to recover\nrunning the recovery process.",
    "start": "493123",
    "end": "501330"
  },
  {
    "text": "And the recovery\nhappens from the log.",
    "start": "501330",
    "end": "503840"
  },
  {
    "text": "And the way that recovery works\nis, and we went through this the last time, you\nscan the log backwards from the most recent\nentry in the log.",
    "start": "507090",
    "end": "514350"
  },
  {
    "text": "And, while scanning the log\nbackwards, you make two lists. You make a list of winners\nand a list of losers.",
    "start": "520854",
    "end": "526590"
  },
  {
    "text": "And the winners are all\nof those actions that either committed or aborted.",
    "start": "526590",
    "end": "532920"
  },
  {
    "text": "And there's one important\npoint in the abort step, which is that when the\nsystem calls abort",
    "start": "532920",
    "end": "538110"
  },
  {
    "text": "or when the application calls\nabort and abort returns, what the system does is\ngoes through the log",
    "start": "538110",
    "end": "543360"
  },
  {
    "text": "and looks at all the\nchanges made by that action and undoes all of them. And then it writes the record,\ncalled the abort record,",
    "start": "543360",
    "end": "549060"
  },
  {
    "text": "onto the log. So when you recovery and\nyou see an abort record, you already know\nthat those changes",
    "start": "549060",
    "end": "554470"
  },
  {
    "text": "made by an aborted\naction have been undone. When you compose\na list of winners",
    "start": "554470",
    "end": "559640"
  },
  {
    "text": "that are committed actions\nand aborted actions, the only things you\nreally need to redo",
    "start": "559640",
    "end": "565220"
  },
  {
    "text": "are the steps corresponding\nto the committed actions. You don't have to undo\nthe steps corresponding",
    "start": "565220",
    "end": "570620"
  },
  {
    "text": "to the aborted actions because\nthey already got undone. Because only after they\ngot undone that the abort",
    "start": "570620",
    "end": "575930"
  },
  {
    "text": "entry was written to the log. In addition to these\ncommitted and aborted actions",
    "start": "575930",
    "end": "583080"
  },
  {
    "text": "that are winners, there\nare all other actions that were pending or active\nat the time of the cache,",
    "start": "583080",
    "end": "590079"
  },
  {
    "text": "and those are losers. And so what you have\nto do to the losers",
    "start": "590080",
    "end": "595530"
  },
  {
    "text": "is to undo the actions\ndone by losers.",
    "start": "595530",
    "end": "601160"
  },
  {
    "text": "So the actual recovery step runs\nafter composing these winners and losers and it corresponds\nto redoing the committed winners",
    "start": "601160",
    "end": "613040"
  },
  {
    "text": "and undoing the losers.",
    "start": "613040",
    "end": "615230"
  },
  {
    "text": "And independent of\ncrashes, independent of failures, when you just\nhave actions that might abort, the only thing you\nreally need is undo.",
    "start": "628890",
    "end": "635260"
  },
  {
    "text": "You don't need to redo anything. If you don't ever have any\nfailures but just actions aborting, the only thing\nyou need to do with the log",
    "start": "635260",
    "end": "640816"
  },
  {
    "text": "is to undo the results\nof uncommitted actions before abort returns.",
    "start": "640816",
    "end": "648816"
  },
  {
    "text": "Now, this procedure is OK. Failures happen\nrarely and you're willing to take a\nsubstantial amount of time",
    "start": "648817",
    "end": "655060"
  },
  {
    "text": "to recover from a failure then\nthe log might be quite long. If a system fails once a week,\nyour log might be quite long.",
    "start": "655060",
    "end": "661747"
  },
  {
    "text": "And if you're willing\nto take the time to scan through the log entirely\nand build up these winners and losers list\nthen this is fine,",
    "start": "661747",
    "end": "669279"
  },
  {
    "text": "this approach works just fine. But people are often interested\nin optimizing the time it takes to recover from a crash.",
    "start": "669280",
    "end": "675480"
  },
  {
    "text": "And a common optimization that's\ndone is called a checkpoint. And I believe you've\nseen this in System R.",
    "start": "675480",
    "end": "681920"
  },
  {
    "text": "And, if you haven't\nseen it, you'll probably see it in\ntomorrow's recitation. And the main idea\nin the checkpoint",
    "start": "681920",
    "end": "687470"
  },
  {
    "text": "is it's an optimization\nthat allows this recovery process not to have to scan the\nlog all the way back to time",
    "start": "687470",
    "end": "692760"
  },
  {
    "text": "zero. That the system periodically,\nwhile it's normally operating, takes this checkpoint,\nwhich is to write",
    "start": "692760",
    "end": "699009"
  },
  {
    "text": "a special record into the log. And that record basically\nsays at this point in time",
    "start": "699010",
    "end": "704740"
  },
  {
    "text": "here are all of the\nactions that have committed and whose results\nhave already been installed into the cell store.",
    "start": "704740",
    "end": "712305"
  },
  {
    "text": "In other words, they've\ncommitted and already been installed so\nwhen you recover you don't have to go and scan\nthe log all the way back.",
    "start": "712305",
    "end": "718270"
  },
  {
    "text": "You just have to go\nback enough so you find all of the actions\nwhose results haven't yet",
    "start": "718270",
    "end": "723330"
  },
  {
    "text": "been installed completely\nwhich have been committed.",
    "start": "723330",
    "end": "728370"
  },
  {
    "text": "And the checkpoint also contains\na list of all the actions that are currently active.",
    "start": "728370",
    "end": "733390"
  },
  {
    "text": "So once you write a\ncheckpoint record to the log, during recovery you don't have\nto go all the way back in time.",
    "start": "733390",
    "end": "740140"
  },
  {
    "text": "There are a few\nother optimizations that you can do with\ncheckpoints that are not that interesting\nto get into here,",
    "start": "740140",
    "end": "745920"
  },
  {
    "text": "but the primary\noptimization that's done to speed up\nthe recovery process is to use this\ncheckpoint record.",
    "start": "745920",
    "end": "752150"
  },
  {
    "text": "And most database systems,\nthe checkpoint record is pretty small. It's not like you're check\npointing the entire state",
    "start": "752150",
    "end": "757910"
  },
  {
    "text": "of the database. The main thing\nyou're doing is it's a pretty small amount of\nstate that you're using to just speed up recovery.",
    "start": "757910",
    "end": "765890"
  },
  {
    "text": "So you shouldn't be thinking\nthat the checkpoint is something where you\ntake the entire database and copy it over. That's not what goes on.",
    "start": "765890",
    "end": "771771"
  },
  {
    "text": "It's a pretty lightweight,\nsmall amount of state rather than the size of all\nof the data in the system.",
    "start": "771771",
    "end": "776860"
  },
  {
    "start": "779000",
    "end": "916000"
  },
  {
    "text": "So that's the story\nbehind recoverability. And we're actually going to come\nback to a piece of the story",
    "start": "779420",
    "end": "786570"
  },
  {
    "text": "after we talk about isolation\nnow because it will turn out that the mechanisms\nfor isolation and the mechanisms\nfor recoverability",
    "start": "786570",
    "end": "792470"
  },
  {
    "text": "using logs interact\nin certain ways, so we have to come back\nto this either later today",
    "start": "792470",
    "end": "797560"
  },
  {
    "text": "or on Wednesday. So now we're going to start\ntalking about isolation.",
    "start": "797560",
    "end": "805130"
  },
  {
    "text": "If you remember, the\nidea behind isolation",
    "start": "805130",
    "end": "811340"
  },
  {
    "text": "is when you have\na set of actions that run concurrently,\nwhat you would like",
    "start": "811340",
    "end": "816770"
  },
  {
    "text": "is an equivalent ordering\nof the steps of the actions",
    "start": "816770",
    "end": "824400"
  },
  {
    "text": "running concurrently\nsuch that the results are equivalent to some serial\nordering of the actions.",
    "start": "824400",
    "end": "830520"
  },
  {
    "text": "The simple way of describing\nisolation is do it all before or do it all after. If you have actions,\nlet's say T1, T2 and so",
    "start": "830520",
    "end": "838660"
  },
  {
    "text": "on running at the same time. And these actions might operate\non some data that is in common,",
    "start": "838660",
    "end": "845029"
  },
  {
    "text": "they might act on data\nthat's not at all uncommon, what you would like is an\nequivalent of the state",
    "start": "845030",
    "end": "851192"
  },
  {
    "text": "of the system after running\nthese concurrent actions should be equivalent to some serial\nordering of the actions.",
    "start": "851192",
    "end": "858690"
  },
  {
    "text": "And it will turn out that\nwhat's tricky about isolation is that if you want\nisolation and you don't care about performance\nit's very, very easy to do.",
    "start": "858690",
    "end": "866449"
  },
  {
    "text": "So it's very easy\nto get isolation if you don't care\nabout performance. It's very easy to\nrun fast if you",
    "start": "866450",
    "end": "871864"
  },
  {
    "text": "don't care about correctness. So, you know, fast and\ncorrect is the hard problem. Fast and not correct is\ntrivial and correct and slow",
    "start": "871864",
    "end": "879850"
  },
  {
    "text": "is also trivial. I mean correct and\nslow is very easy because you could take all\nof these concurrent actions and just run them\none after the other",
    "start": "879850",
    "end": "886110"
  },
  {
    "text": "so you don't actually\ntake advantage of any potential concurrency\nthat might be possible.",
    "start": "886110",
    "end": "891639"
  },
  {
    "text": "So suddenly slow and\ncorrect is very easy to do. And we'll actually start\nout with slow and correct and then optimize\na simple scheme.",
    "start": "891640",
    "end": "901690"
  },
  {
    "text": "There has also been\na huge amount of work that's been done on fast\nand correct schemes.",
    "start": "901690",
    "end": "906700"
  },
  {
    "text": "And, in the end, they all boil\ndown to this one basic idea that we'll talk about toward\nthe end of lecture today.",
    "start": "906700",
    "end": "916579"
  },
  {
    "start": "916000",
    "end": "1329000"
  },
  {
    "text": "So let's take an example. Let's say you have two actions. I'm going to call them with\nTs because very often these",
    "start": "916579",
    "end": "922570"
  },
  {
    "text": "are intended to be\ntransactions which are consistency and\ndurability in addition to isolation and recoverability.",
    "start": "922570",
    "end": "929311"
  },
  {
    "text": "So I'm just going to use the\nword T to represent an action.",
    "start": "929312",
    "end": "931770"
  },
  {
    "text": "Let's say you have\nan action that does read of some variable x and\nit does write of a variable y",
    "start": "934385",
    "end": "942970"
  },
  {
    "text": "and you have transaction\nT2 that does write x and it does write y.",
    "start": "942970",
    "end": "950567"
  },
  {
    "text": "So we're going to take a few\nexamples like this in order to understand what it means\nfor actions to run such",
    "start": "950567",
    "end": "956290"
  },
  {
    "text": "that they're steps equivalent\nto some serial order. So we're going to spend some\ntime really understanding that. And then, once we\nunderstand what we want,",
    "start": "956290",
    "end": "962380"
  },
  {
    "text": "it will turn out to be\nrelatively easy to come up with schemes to achieve it.",
    "start": "962380",
    "end": "969480"
  },
  {
    "text": "Let's say that what\nhappens here is that the system gets presented\nwith these concurrent actions.",
    "start": "969480",
    "end": "975709"
  },
  {
    "text": "And let's assume each of\nthese is an atomic step. So there are four steps that\ncan be interleaving in arbitrary",
    "start": "975710",
    "end": "981150"
  },
  {
    "text": "ways, in any number of ways. Let's say that what happens\nis you run that first and then you run that second\nand then you run this third",
    "start": "981150",
    "end": "987710"
  },
  {
    "text": "and then you run this fourth. So what you get\nis that I'm going to introduce a little\nbit of a notation here.",
    "start": "987710",
    "end": "993400"
  },
  {
    "text": "I'm going to write these\nsteps as r1(x), w2(x), w1(y)",
    "start": "993400",
    "end": "1007130"
  },
  {
    "text": "and w2(y). What the r represents\nis a read, w",
    "start": "1007130",
    "end": "1013030"
  },
  {
    "text": "represents a write, what\nthe subscripts represent is the identifier of the\naction doing the read or write.",
    "start": "1013030",
    "end": "1020090"
  },
  {
    "text": "And what's in parenthesis is the\nvariable that's being written. So this says that action one\ndoes a read of x, action two",
    "start": "1020090",
    "end": "1027390"
  },
  {
    "text": "does a write of x, action\none does a write of y and action two\ndoes a write of y.",
    "start": "1027390",
    "end": "1035369"
  },
  {
    "text": "Now, if you look at\nthese different actions, there are a few steps that\nconflict with each other",
    "start": "1038050",
    "end": "1043060"
  },
  {
    "text": "and a few that don't. If you look at the read\nof x and the write of y, they're independent\nof everything else.",
    "start": "1043060",
    "end": "1049060"
  },
  {
    "text": "If you just have read x\nhere and write y here, they don't conflict\nwith each other because those can\nhappen in any order",
    "start": "1049060",
    "end": "1054830"
  },
  {
    "text": "and the results are\nexactly the same. Similarly, the write\ny and the write x don't conflict with each other.",
    "start": "1054830",
    "end": "1061294"
  },
  {
    "text": "The only things that really\nconflict with each other are the read x and the\nwrite x in this example",
    "start": "1061294",
    "end": "1067230"
  },
  {
    "text": "because the results depend\non which goes first. Write y conflicts\nwith this write y,",
    "start": "1067230",
    "end": "1073460"
  },
  {
    "text": "and those are basically\nthe two things that conflict with each\nother in this example.",
    "start": "1073460",
    "end": "1078970"
  },
  {
    "text": "Generally, if you\nhave two actions conflict with one another,\nif they both contain",
    "start": "1078970",
    "end": "1085280"
  },
  {
    "text": "a read and a write of the\nsame variable or a write and a write of\nthe same variable.",
    "start": "1085280",
    "end": "1090880"
  },
  {
    "text": "So there are basically\nthree things that conflict. If you have some variable, call\nit z, if you have a read of z",
    "start": "1090880",
    "end": "1097000"
  },
  {
    "text": "and a write of z in one\naction or the other, if you have write of z and read\nof z or if you have write of z",
    "start": "1097000",
    "end": "1105710"
  },
  {
    "text": "and write of z and those\nconflict with one another. Now a read and a\nread don't conflict.",
    "start": "1105710",
    "end": "1111300"
  },
  {
    "text": "Because it doesn't matter\nwhat order they run in, they are going to give\nyou the same answer.",
    "start": "1111300",
    "end": "1115361"
  },
  {
    "text": "If you look at this ordering\nof r1(x), w2(x), w1(y)",
    "start": "1117560",
    "end": "1124050"
  },
  {
    "text": "and w2(y), the\nthings that conflict are these two and these two.",
    "start": "1124050",
    "end": "1130549"
  },
  {
    "text": "Now, if you look\nat the two things that conflict and you draw\narrows from which one happens",
    "start": "1133450",
    "end": "1140740"
  },
  {
    "text": "before the other,\nwhat you'll find is that for this x conflict one\nruns before two and for this y",
    "start": "1140740",
    "end": "1148570"
  },
  {
    "text": "conflict one runs before two. So the arrows, if I were\nto draw them in time order, would point this way.",
    "start": "1148570",
    "end": "1155750"
  },
  {
    "text": "And this ordering is\nbasically the same as the same ordering\nyou would get, even though the steps\nrun in different order,",
    "start": "1155750",
    "end": "1161360"
  },
  {
    "text": "it's exactly the same as if you\nran T1 completely before T2. Because running T1\ncompletely before T2 says",
    "start": "1161360",
    "end": "1168120"
  },
  {
    "text": "the ordering is r1(x),\nw1(y), w2(x) and w2(y).",
    "start": "1168120",
    "end": "1173630"
  },
  {
    "text": "But the results are\nexactly the same, this different\ninterleaving, which does one, two, three, four.",
    "start": "1173630",
    "end": "1181390"
  },
  {
    "text": "So what this says is that\nthis trace that you get, we're going to use the\nword trace for this, you present this concurrent\nactions each of which",
    "start": "1181390",
    "end": "1188880"
  },
  {
    "text": "has one or more steps\nand the system runs them. And then the order in\nwhich the individual steps",
    "start": "1188880",
    "end": "1194520"
  },
  {
    "text": "run produces a trace. And then the question\nis whether that trace is what is called serializable.",
    "start": "1194520",
    "end": "1200790"
  },
  {
    "text": "A trace is serializable\nif the trace's results",
    "start": "1200790",
    "end": "1205860"
  },
  {
    "text": "are identical to running the\nactions in some serial order one after the other.",
    "start": "1205860",
    "end": "1211241"
  },
  {
    "text": "And so what we're going\nto be trying to do is, what we're\ngoing to do today is to come up with schemes which\ntake these different steps",
    "start": "1211241",
    "end": "1219888"
  },
  {
    "text": "corresponding to the action that\nproduces an order that turns out to be a serializable order. And the challenge is to do\nit in a way that allows you",
    "start": "1219889",
    "end": "1226340"
  },
  {
    "text": "to get reasonable performance. To give you an example of a\nnonserializable order, if we",
    "start": "1226340",
    "end": "1233380"
  },
  {
    "text": "had the following trace,\nr1(x) followed by w2(x)",
    "start": "1233380",
    "end": "1242910"
  },
  {
    "text": "followed by w2(y)\nfollowed by w1(y).",
    "start": "1242910",
    "end": "1256090"
  },
  {
    "text": "What happens here is\nthat these two guys conflict so you've got an arrow\nfrom one to two going this way.",
    "start": "1256090",
    "end": "1263970"
  },
  {
    "text": "And, similarly, these two guys\nconflict but the arrow in time goes from two to\none, which means",
    "start": "1263970",
    "end": "1271830"
  },
  {
    "text": "that if you drew the\narrow one to two this way, you would have an arrow\ngoing the opposite direction. So this doesn't correspond\nto any serial order",
    "start": "1271830",
    "end": "1278289"
  },
  {
    "text": "because, as far as this\nconflict is concerned, this trace says that action one\nshould run before action two.",
    "start": "1278290",
    "end": "1285861"
  },
  {
    "text": "And, as far as this\nconflict is concerned, it says that action two\nshould run before action one.",
    "start": "1285861",
    "end": "1291580"
  },
  {
    "text": "Which means you're in trouble\nbecause there is really no serial ordering here. This trace does not correspond\nto either T1 before T2 or T2",
    "start": "1291580",
    "end": "1300760"
  },
  {
    "text": "before T1 which\nmeans this trace, if you have a scheme that\nruns your actions, the steps",
    "start": "1300760",
    "end": "1307351"
  },
  {
    "text": "of your action that\nproduces the stress it means that that scheme\ndoes not provide isolation.",
    "start": "1307351",
    "end": "1312716"
  },
  {
    "text": "Notice that we don't\nactually care whether T1 runs before T2 or T2 runs before T1. We're not worried about that.",
    "start": "1312717",
    "end": "1318244"
  },
  {
    "text": "We're just worried\nabout producing some serial equivalent order.",
    "start": "1318244",
    "end": "1323000"
  },
  {
    "text": "So that's the definition of\nthe property that we want,",
    "start": "1329630",
    "end": "1336870"
  },
  {
    "text": "serializability. And what it says is a trace\nwhose conflict arrows, these are these\nconflict arrows, are",
    "start": "1336870",
    "end": "1344210"
  },
  {
    "text": "equivalent to some\nserial ordering of the steps of the action.",
    "start": "1344210",
    "end": "1350950"
  },
  {
    "text": "What we want is a\ntrace conflict that",
    "start": "1350950",
    "end": "1359789"
  },
  {
    "text": "should be in the same order\nas some serial schedule",
    "start": "1359790",
    "end": "1366170"
  },
  {
    "text": "or some serial order\nof the actions.",
    "start": "1366170",
    "end": "1371765"
  },
  {
    "text": "So what we're going to\ndo is in three parts. The first part is we're going\nto look at one of these traces.",
    "start": "1378780",
    "end": "1386940"
  },
  {
    "text": "And given a trace,\nthe first problem is to figure out whether\nthat trace corresponds to some serial order.",
    "start": "1386940",
    "end": "1392760"
  },
  {
    "text": "And then we're going to derive\na property that guarantees that if a sudden\nproperty holds we",
    "start": "1392760",
    "end": "1398950"
  },
  {
    "text": "would be assured that a\ntrace is in serial order. And then the second\npart is we are going to come up with\nvarious schemes for achieving",
    "start": "1398950",
    "end": "1405405"
  },
  {
    "text": "serializability. And the third part is in order\nto prove that those schemes are correct, what we\nare going to do is",
    "start": "1405405",
    "end": "1412300"
  },
  {
    "text": "to prove that this property,\nthat all serial orderings should satisfy holes for the\nprotocol or for the algorithm",
    "start": "1412300",
    "end": "1418660"
  },
  {
    "text": "that we design. That is the plan for\nthe rest of today.",
    "start": "1418660",
    "end": "1424970"
  },
  {
    "start": "1424000",
    "end": "1470000"
  },
  {
    "text": "This property for\nserializability is going to use data structure\nor a construction called",
    "start": "1424970",
    "end": "1433870"
  },
  {
    "text": "an action graph. And it turns out what\nwe are going to do, given one of these traces,\nis produce a graph out",
    "start": "1433870",
    "end": "1440330"
  },
  {
    "text": "of those traces called\nthe action graph. And then we are going to look to\nsee whether a certain property",
    "start": "1440330",
    "end": "1446049"
  },
  {
    "text": "holds for that action graph. Let me show you what this\naction graph is by example.",
    "start": "1446050",
    "end": "1452480"
  },
  {
    "text": "The graph itself consists\nof nodes and edges It's a directed graph. And the nodes are not\nthese r1s and w2s.",
    "start": "1452480",
    "end": "1459160"
  },
  {
    "text": "What the nodes are, are\nthe actions themselves. So, if you have four\nactions running,",
    "start": "1459160",
    "end": "1464930"
  },
  {
    "text": "you have four\nnodes on the graph. And then there are edges between\nthese nodes on the graph.",
    "start": "1464930",
    "end": "1470657"
  },
  {
    "start": "1470000",
    "end": "2269000"
  },
  {
    "text": "Let's do it by an example. Let's say you have\nfirst action T1 which",
    "start": "1470657",
    "end": "1476990"
  },
  {
    "text": "has read of x and write of y. And just so we are sure\nthat it is action one,",
    "start": "1476990",
    "end": "1483120"
  },
  {
    "text": "I'm going to draw one\nunderneath as a subscript because they're just reads. Action two has a write\nof x and a write of y.",
    "start": "1483120",
    "end": "1490980"
  },
  {
    "text": "Action three has a read of y and\na write of another variable z.",
    "start": "1495210",
    "end": "1500000"
  },
  {
    "text": "And action four has a read of x.",
    "start": "1503300",
    "end": "1508033"
  },
  {
    "text": "First of all, given these\nactions, which of the actions",
    "start": "1517880",
    "end": "1523110"
  },
  {
    "text": "conflict with each other? Let's first write for T1.",
    "start": "1523110",
    "end": "1528279"
  },
  {
    "text": "Does T2 conflict with T1? Yes it does because\nthe read x, I",
    "start": "1528280",
    "end": "1534039"
  },
  {
    "text": "mean that's the same\nas that example, so suddenly T2\nconflicts with T1. What about T3?",
    "start": "1534039",
    "end": "1539300"
  },
  {
    "text": "Does T3 conflict with T1? What that means is\nthe interleaving of the individual steps matter\nas far as the final answer is",
    "start": "1539300",
    "end": "1546210"
  },
  {
    "text": "concerned. Yes, it does because\nthe write of y and the read of y conflict,\nso you've got T1 and T3",
    "start": "1546210",
    "end": "1553290"
  },
  {
    "text": "that you have to worry about. Does T1 conflict with T4?",
    "start": "1553290",
    "end": "1556125"
  },
  {
    "text": "No it doesn't. The read and the\nread do not conflict. Does T2 conflict with T3?",
    "start": "1558677",
    "end": "1563990"
  },
  {
    "text": "Yes, it does because\nit has got the y.",
    "start": "1563990",
    "end": "1566300"
  },
  {
    "text": "Does T2 conflict with T4? It does.",
    "start": "1569690",
    "end": "1572674"
  },
  {
    "text": "And does T3 conflict with T4? It does not. There's nothing that's shared. Out of the six possible,\nor whatever, four,",
    "start": "1575460",
    "end": "1582380"
  },
  {
    "text": "choose two possible\nconflicts, for conflicts you've got four of them that\nyou've got to worry about.",
    "start": "1582380",
    "end": "1586771"
  },
  {
    "text": "Now we're going to\ndraw this graph that has T1, T2, T3 and\nT4, and we're going to call this the action graph.",
    "start": "1589095",
    "end": "1596110"
  },
  {
    "text": "And what it's going to do is\nto draw arrows between actions that conflict with one another.",
    "start": "1599550",
    "end": "1605460"
  },
  {
    "text": "But of course the\nanswer, the arrows depend on the order in which\nthese individual steps get",
    "start": "1605460",
    "end": "1610530"
  },
  {
    "text": "scheduled by the system\nrunning these actions. We need an actual\nexample for that.",
    "start": "1610530",
    "end": "1617710"
  },
  {
    "text": "Let's say that what\nhappens is you present these concurrent actions. And what happens is this guy\nruns first and then two, three,",
    "start": "1617710",
    "end": "1625940"
  },
  {
    "text": "four, five, six and seven.",
    "start": "1625940",
    "end": "1631950"
  },
  {
    "text": "That's the order\nin which the system runs the individual\nsteps of this action.",
    "start": "1635070",
    "end": "1638870"
  },
  {
    "text": "Now we're going to draw\nthese arrows between actions. If two actions share a\nconflicting operation",
    "start": "1641690",
    "end": "1649960"
  },
  {
    "text": "and in the first action\nthe conflicting operation",
    "start": "1649960",
    "end": "1655289"
  },
  {
    "text": "occurs before the\nsecond action then you're going to draw an\narrow from the first action to the second action. So more generally there's\nan arrow from PI to PJ.",
    "start": "1655290",
    "end": "1664440"
  },
  {
    "text": "If I and J have a\nconflicting operation",
    "start": "1664440",
    "end": "1670690"
  },
  {
    "text": "that individual step is\nrun by the system for I first before J.",
    "start": "1670690",
    "end": "1677970"
  },
  {
    "text": "If you look here\nat T1 to T2 there's an arrow between T1 and T2. Because it ran r1(x)\nbefore it run w2(x).",
    "start": "1677970",
    "end": "1687740"
  },
  {
    "text": "If you look at T1 and T3,\nthis is a little subtle",
    "start": "1687740",
    "end": "1693850"
  },
  {
    "text": "because if ran read of\nx before it ran r3(y), but that doesn't matter because\nread of x there and read of y",
    "start": "1693850",
    "end": "1701700"
  },
  {
    "text": "there don't conflict. But then it ran\nw1(y) after it ran",
    "start": "1701700",
    "end": "1706870"
  },
  {
    "text": "read 3y which means\nthat the conflict is equivalent to running that step\nof T3 before the step of T1.",
    "start": "1706870",
    "end": "1714720"
  },
  {
    "text": "So you actually have an arrow\ngoing back from T3 to T1.",
    "start": "1714720",
    "end": "1718820"
  },
  {
    "text": "Now what about T2 and T3? T2 and T3, the same story,\nw2(x) and r3(y) don't conflict.",
    "start": "1721770",
    "end": "1729159"
  },
  {
    "text": "But r3(y) before w2(y),\nthat's the conflict, so you have an arrow\ngoing this way.",
    "start": "1729160",
    "end": "1735237"
  },
  {
    "text": "So we've got three of them,\nyou need a fourth one, and that is between T2 and T4. Between T2 and T4,\nw2(x) runs before r4(x)",
    "start": "1735237",
    "end": "1743820"
  },
  {
    "text": "which means you have an\narrow going this way.",
    "start": "1743820",
    "end": "1749490"
  },
  {
    "text": "If you actually look\nat this picture, and we'll come up with a\nmethod to systematically argue",
    "start": "1749490",
    "end": "1756830"
  },
  {
    "text": "this point, but if you\nlook at that schedule, as shown here, where\nthe system runs the individual\nsteps in that order,",
    "start": "1756830",
    "end": "1763240"
  },
  {
    "text": "this is actually\nequivalent to T3 running and then\nT1 running and then",
    "start": "1763240",
    "end": "1769140"
  },
  {
    "text": "T2 running and then T4 running. The order of interleaving\nthese different steps in the way shown in that\npicture, one, two, three, four,",
    "start": "1769140",
    "end": "1776070"
  },
  {
    "text": "five, six, seven is actually\nequivalent to the same result, it's the same\nresult that you get if you run T3 completely and\nthen T1 and then T2 and then",
    "start": "1776070",
    "end": "1782850"
  },
  {
    "text": "T4. In fact, if you\nthink about it, it's also equivalent to\nthe same ordering",
    "start": "1782850",
    "end": "1788510"
  },
  {
    "text": "that you get if you run\nT3 and then you run T1 and then you run T4\nand then you run T2.",
    "start": "1788510",
    "end": "1793590"
  },
  {
    "text": "That just says that for\nthe exact same scheduling of individual steps in\nthe concurrent actions",
    "start": "1796610",
    "end": "1801660"
  },
  {
    "text": "you might find multiple\nequivalent serial orders that all give\nyou the same answer.",
    "start": "1801660",
    "end": "1806840"
  },
  {
    "text": "Is that clear? Yup. Student 1: How can you write \n[UNINTELLIGIBLE] Student 2: Yes, how can you write \nthe equivalent of [UNINTELLIGIBLE]?",
    "start": "1810500",
    "end": "1817060"
  },
  {
    "text": "Students discussing: [UNINTELLIGIBLE]",
    "start": "1817960",
    "end": "1824320"
  },
  {
    "text": "Student 1: T1 and T2 \nneed to switch. Students discussing: No, you can't.",
    "start": "1824320",
    "end": "1828780"
  },
  {
    "text": "Students discussing: [UNINTELLIGIBLE]",
    "start": "1832040",
    "end": "1838680"
  },
  {
    "text": "Instructor: Everyone see the\n order or is there more? Student 2: [UNINTELLIGIBLE] Student 1: [UNINTELLIGIBLE] Instructor: No, 3 to 1 to 4 \ndoesn't work.",
    "start": "1839880",
    "end": "1847820"
  },
  {
    "text": "So I guess there\nis just one.",
    "start": "1847820",
    "end": "1849620"
  },
  {
    "text": "It's all right. I could have \nsworn with two edges missing, could be more.\nBut — okay.",
    "start": "1855200",
    "end": "1859320"
  },
  {
    "text": "Student: Is the [UNINTELLIGIBLE] arrow?",
    "start": "1873900",
    "end": "1877760"
  },
  {
    "text": "Instructor: Is the arrow from 2 to 4? Student: [UNINTELLIGIBLE]",
    "start": "1878980",
    "end": "1884960"
  },
  {
    "text": "The arrow from two\nto four is correct. Right? Write effects runs\nbefore read effects.",
    "start": "1884960",
    "end": "1888540"
  },
  {
    "text": "So I think this is correct. Is there a problem? Okay.",
    "start": "1893605",
    "end": "1899720"
  },
  {
    "text": "So, in this example, it\nisn't multiple serial orders. But in general it\nappears that there are multiple serial\norders possible.",
    "start": "1899720",
    "end": "1905520"
  },
  {
    "text": "Okay. So what does this action graph\ngot to do with anything?",
    "start": "1910060",
    "end": "1915900"
  },
  {
    "text": "It turns out, and\nwe'll prove this, that if the action graph--",
    "start": "1918540",
    "end": "1924200"
  },
  {
    "text": "--for any ordering of\nsteps within an action, if the action graph\ndoes not have a cycle--",
    "start": "1929700",
    "end": "1935935"
  },
  {
    "text": "--then the corresponding trace\nfrom which the action graph was derived is serializable.",
    "start": "1941960",
    "end": "1947600"
  },
  {
    "text": "What that means is that\nwhat you have to do",
    "start": "1956260",
    "end": "1961700"
  },
  {
    "text": "is, given a certain\nordering of steps, you construct this\naction graph, you look to see if it\nhas any cycles.",
    "start": "1961700",
    "end": "1966900"
  },
  {
    "text": "And, if it doesn't\nhave any cycles, then you know that the order is\nequivalent to some serial order",
    "start": "1966900",
    "end": "1973900"
  },
  {
    "text": "of the steps of the\nindividual actions. And it actually turns out the\nresult is a bit more powerful.",
    "start": "1973900",
    "end": "1980360"
  },
  {
    "text": "The converse is also\ntrue that if you have a serializable trace then\nthe corresponding action graph",
    "start": "1980360",
    "end": "1988020"
  },
  {
    "text": "has no cycles. Now, to turn out, the more\ninteresting result for us is going to be the\nfollowing direction",
    "start": "1988020",
    "end": "1993710"
  },
  {
    "text": "where if the graph is acyclic\nthen the trace is serializable. Because what we're\ngoing to end up",
    "start": "1993710",
    "end": "1999130"
  },
  {
    "text": "doing is inventing one or\ntwo protocols for achieving",
    "start": "1999130",
    "end": "2005780"
  },
  {
    "text": "isolation, for achieving\nserializability. And we're going to prove\nthat those protocols are correct by proving that the\ncorresponding action graph, all",
    "start": "2005780",
    "end": "2013100"
  },
  {
    "text": "of the possible action graphs\nproduced by those protocols all have no cycles. So this direction is the\ndirection that's actually",
    "start": "2013100",
    "end": "2020080"
  },
  {
    "text": "more important for\nus, but the opposite is also true and not\nthat hard to prove.",
    "start": "2020080",
    "end": "2025900"
  },
  {
    "text": "So what is the\nintuition behind why, if you have an action\ngraph that's serializable,",
    "start": "2025900",
    "end": "2031180"
  },
  {
    "text": "sorry, that doesn't have cycles\nthe trace is serializable? Well, notice one\nthing about this",
    "start": "2031180",
    "end": "2037470"
  },
  {
    "text": "which is to draw a\nlittle bit of intuition. Suppose, in fact,\nwhat happened here",
    "start": "2037470",
    "end": "2043020"
  },
  {
    "text": "was we didn't execute\nthe actions, the steps in that order, but what we did\nwas to run this at step five",
    "start": "2043020",
    "end": "2051600"
  },
  {
    "text": "and that at step six. What would happen with\nthe resulting action graph",
    "start": "2051600",
    "end": "2058129"
  },
  {
    "text": "is that you would actually\nhave an arch from T2 to T1 going the other way as well.",
    "start": "2058130",
    "end": "2064190"
  },
  {
    "text": "Because what this says\nis between T1 and T2 there is one\nconflicting operation that goes this way where\naction one runs before two.",
    "start": "2066759",
    "end": "2073500"
  },
  {
    "text": "And these two guys conflict\nwhere the step in two runs before the step in\none and those two steps",
    "start": "2073500",
    "end": "2080369"
  },
  {
    "text": "conflict with one another. And this is actually\nthe cycle here that causes the whole scheme\nto be not serializable anymore.",
    "start": "2080370",
    "end": "2087810"
  },
  {
    "text": "That's a little bit of intuition\nas to why this acyclic property is important. But to really prove\nthis notice that if you",
    "start": "2091100",
    "end": "2099839"
  },
  {
    "text": "have a directed acyclic\ngraph you could do something called a topological\nsort on the graph.",
    "start": "2099840",
    "end": "2105400"
  },
  {
    "text": "How many people know what\na topological sort is? OK. For those who don't,\nthe idea is very simple.",
    "start": "2105400",
    "end": "2112570"
  },
  {
    "text": "In any directed\nacyclic graph there is going to be at\nleast one node that",
    "start": "2112570",
    "end": "2119460"
  },
  {
    "text": "has no arrows coming into it. All of the arrows going out\nare only going out of the node.",
    "start": "2119460",
    "end": "2124870"
  },
  {
    "text": "And you can actually prove that\nby arguing the contradiction. If it turns out that every\nnode has an arch coming in",
    "start": "2124870",
    "end": "2130560"
  },
  {
    "text": "and an arch going out\nthen by traversing that chain of pointers\nyou'll end up with a cycle.",
    "start": "2130560",
    "end": "2136159"
  },
  {
    "text": "So it's pretty easy to see that\nin any directed acyclic graph you're going to\nhave some node that has no arrows coming into it\nand only arrows going out of it.",
    "start": "2136159",
    "end": "2144400"
  },
  {
    "text": "So find that action, in\nthis picture it is T3, and take that action\nand put it in first.",
    "start": "2144400",
    "end": "2152270"
  },
  {
    "text": "That's the first\naction that you run. Because it has no\narrows coming into it and only arrows going\nout, what that means",
    "start": "2152270",
    "end": "2158850"
  },
  {
    "text": "is that no other action in a\nserial order runs before it. Or at least there's no\nreason for any action",
    "start": "2158850",
    "end": "2165344"
  },
  {
    "text": "to run before it\nbecause there are no arrows from any other\naction coming into this action. So you put that in first.",
    "start": "2165344",
    "end": "2170945"
  },
  {
    "text": "Now, remove that node\nfrom the entire graph. The resulting graph\nis acyclic, right? You cannot manufacture a cycle\nby removing a node so you",
    "start": "2173480",
    "end": "2180680"
  },
  {
    "text": "recursively apply the same idea,\nfind some other node which has no other things coming into\nit and only things going out",
    "start": "2180680",
    "end": "2186520"
  },
  {
    "text": "of it. And if there are ties\njust pick one at random. And, therefore,\nconstruct an order.",
    "start": "2186520",
    "end": "2191737"
  },
  {
    "text": "And all such orders\nthat you construct are topological sort orders.",
    "start": "2191737",
    "end": "2194640"
  },
  {
    "text": "This topological sort\norder, by construction, is a serial order\nof the actions.",
    "start": "2198520",
    "end": "2206420"
  },
  {
    "text": "And this topological sort,\nif you now draw the arrows in the topological\nsort, they're going",
    "start": "2206420",
    "end": "2211829"
  },
  {
    "text": "to be the same arrows as in\nthe original directed graph, it's exactly the same\ngraph, and now you have",
    "start": "2211830",
    "end": "2218430"
  },
  {
    "text": "an equivalent serial order. That's the reason why the cyclic\nproperty is actually important",
    "start": "2218430",
    "end": "2226230"
  },
  {
    "text": "as far as serializability\nis concerned.",
    "start": "2226230",
    "end": "2238560"
  },
  {
    "text": "Now we can look at\nschemes that actually guaranty serializability.",
    "start": "2238560",
    "end": "2243760"
  },
  {
    "text": "And the schemes we're going to\ndiscuss all are in this system where you have cell\nstorage and where you have logs for recovery.",
    "start": "2243760",
    "end": "2250360"
  },
  {
    "text": "The logs are not going to\nmatter, for the most part. You can also do isolation\nin version histories,",
    "start": "2250360",
    "end": "2256710"
  },
  {
    "text": "and one of the sections\nof the notes deals with that at length.",
    "start": "2256710",
    "end": "2259490"
  },
  {
    "text": "I personally think it's\nnot that important, but that doesn't mean\nit's not on the quiz.",
    "start": "2262630",
    "end": "2270109"
  },
  {
    "start": "2269000",
    "end": "2381000"
  },
  {
    "text": "I think you get a little\nbit more intuition reading that in addition\nto this discussion. And a bulk of this discussion\nis actually not in the notes.",
    "start": "2270109",
    "end": "2276799"
  },
  {
    "text": "It's just another way of\nlooking at the problem. The mechanism we're\ngoing to build on",
    "start": "2276800",
    "end": "2282070"
  },
  {
    "text": "is, in fact, described\nin the notes as well. It's a mechanism you've seen\nbefore, and it is called locks.",
    "start": "2282070",
    "end": "2289569"
  },
  {
    "text": "As you recall, if you have\nvariable x or any chunk of data you can protect it using two\ncalls, acquire and release.",
    "start": "2289570",
    "end": "2296140"
  },
  {
    "text": "So you could do things\nlike acquire lock of x and release lock of x.",
    "start": "2296140",
    "end": "2303700"
  },
  {
    "text": "And the lock protocol\nis that only one person can acquire a lock at a time. And all of the people wanting\nall other actions wishing",
    "start": "2303700",
    "end": "2310620"
  },
  {
    "text": "to acquire the same lock will\nwait until the lock is released",
    "start": "2310620",
    "end": "2315810"
  },
  {
    "text": "and then they fight\nto acquire it. And ultimately at\nthe lowest level",
    "start": "2315810",
    "end": "2321020"
  },
  {
    "text": "the lock has to be implemented\nwith some low level atomic instruction. For example, something like a\ntest and set lock instruction.",
    "start": "2321020",
    "end": "2327750"
  },
  {
    "text": "It's the same story as before. Now, there are a few things\nto worry about with locks.",
    "start": "2327750",
    "end": "2333880"
  },
  {
    "text": "The first one is the\ngranularity of the lock. You could be very,\nvery conservative and decide that the\ngranularity of the lock",
    "start": "2333880",
    "end": "2340450"
  },
  {
    "text": "is your entire system. So all of the data\non the system gets protected with one lock, which\nmeans that you're running",
    "start": "2340450",
    "end": "2347130"
  },
  {
    "text": "this very slow scheme because\nwhat you're guaranteeing is, in fact,\nisolation but you're",
    "start": "2347130",
    "end": "2353710"
  },
  {
    "text": "running essentially\none action at a time and you have no\nconcurrency at all.",
    "start": "2353710",
    "end": "2359651"
  },
  {
    "text": "The other extreme, you could\nbe very, very aggressive and every individual\ncell stored item",
    "start": "2359652",
    "end": "2364940"
  },
  {
    "text": "is protected with the lock. And now you're trying to max\nout the degree of concurrency, which means that although\nthings could be fast",
    "start": "2364940",
    "end": "2370964"
  },
  {
    "text": "you have to be a lot more\ncareful if you want things to be correct. And correct here\nmeans that you have",
    "start": "2370964",
    "end": "2376400"
  },
  {
    "text": "an order that is equivalent\nto some serial order.",
    "start": "2376400",
    "end": "2379200"
  },
  {
    "text": "Why does the locking\nprotocol actually matter? Well, let's go back to these two\naction examples of r1(x) w2(x)",
    "start": "2382960",
    "end": "2395660"
  },
  {
    "text": "and w1(y) and w2(y).",
    "start": "2395660",
    "end": "2399240"
  },
  {
    "text": "And let's just throw in\nan acquire lock of x here and an acquire lock of y here\nand a release lock of x here",
    "start": "2401850",
    "end": "2417410"
  },
  {
    "text": "and in between here\nyou have the read",
    "start": "2417410",
    "end": "2424390"
  },
  {
    "text": "and here you do the\nrelease of the lock of y and similarly you do\nan acquire lx here",
    "start": "2424390",
    "end": "2431240"
  },
  {
    "text": "and you do an acquire ly here. And then you release the\nlocks at the end here.",
    "start": "2431240",
    "end": "2441380"
  },
  {
    "text": "So acquire lock x, read x,\nrelease lock x, acquire lock y, write y, release lock\ny, and acquire right,",
    "start": "2441380",
    "end": "2448970"
  },
  {
    "text": "acquire right, release, release. And, on the face of\nit, this kind of thing is actually reasonable for the\nold style synchronization, some",
    "start": "2448970",
    "end": "2458740"
  },
  {
    "text": "of the old style\nsynchronization things that we wanted because we didn't\nactual care about atomicity of full actions.",
    "start": "2458740",
    "end": "2465210"
  },
  {
    "text": "If you look at what happens\nwith this kind of locking,",
    "start": "2465210",
    "end": "2470440"
  },
  {
    "text": "as shown here, you might\nbe a little bit in trouble because it could be that\nthese three steps happen first",
    "start": "2470440",
    "end": "2479870"
  },
  {
    "text": "and then this whole set of\nsteps up to here happen second,",
    "start": "2479870",
    "end": "2486570"
  },
  {
    "text": "actually, up to the end. And then this chunk\nhappens third.",
    "start": "2486570",
    "end": "2495300"
  },
  {
    "text": "Now you're in\ntrouble because read x happens before write\nx and the write y",
    "start": "2495300",
    "end": "2500770"
  },
  {
    "text": "happens before this write y. And now you have not\nachieved isolation because, if you draw\nthe conflict graph,",
    "start": "2500770",
    "end": "2507480"
  },
  {
    "text": "you'll get an\narrow from T1 to T2 and an arrow coming\nback from T2 to T1 and you have a cycle, which\nmeans that just throwing",
    "start": "2507480",
    "end": "2514340"
  },
  {
    "text": "in the right\nacquires and releases isn't going to be sufficient\nto achieve isolation.",
    "start": "2514340",
    "end": "2520030"
  },
  {
    "text": "So we're going to need a much\nbetter set of skills, a better scheme than just this\nthrow in the right",
    "start": "2520030",
    "end": "2525519"
  },
  {
    "text": "acquires and releases. The first scheme we're going\nto see is a simple scheme.",
    "start": "2525519",
    "end": "2531770"
  },
  {
    "start": "2528000",
    "end": "2727000"
  },
  {
    "text": "It's called simple locking.",
    "start": "2531770",
    "end": "2533030"
  },
  {
    "text": "The idea in simple locking\nis that every action knows beforehand all\nof the data items",
    "start": "2537330",
    "end": "2544390"
  },
  {
    "text": "that it wants to\nread or write, and it acquires all of the locks\nbefore it does anything.",
    "start": "2544390",
    "end": "2550210"
  },
  {
    "text": "Before doing any reads or writes\nit acquires all of the locks. The idea would be here you\nwould acquire the lock of x",
    "start": "2550210",
    "end": "2561550"
  },
  {
    "text": "and acquire the lock of y,\nand then you run the steps. Similarly, the other\naction does the same thing.",
    "start": "2561550",
    "end": "2567400"
  },
  {
    "text": "And by construction,\nif you have actions that conflict with one\nanother and one of the actions",
    "start": "2567400",
    "end": "2572770"
  },
  {
    "text": "reaches the point where\nall of the locks it needs have been acquired\nthen by construction",
    "start": "2572770",
    "end": "2578570"
  },
  {
    "text": "no other conflicting action\ncould be in the same state. Because if you have another\naction that conflicts then",
    "start": "2578570",
    "end": "2586359"
  },
  {
    "text": "it means that there's at least\none data item common to them which means that\nonly one of them",
    "start": "2586360",
    "end": "2591480"
  },
  {
    "text": "could have reached this\npoint because they're both trying to acquire. This protocol where every\naction acquires all of the locks",
    "start": "2591480",
    "end": "2599090"
  },
  {
    "text": "before running any step of the\naction will guaranty isolation. And the isolation order,\nthe equivalent serial order",
    "start": "2599090",
    "end": "2604940"
  },
  {
    "text": "that it guarantees is\nthe same as the order in which the different actions\nreach this point where they",
    "start": "2604940",
    "end": "2611039"
  },
  {
    "text": "have acquired all of the locks. And that point is also\ncalled the lock point. The lock point of\nan action is defined",
    "start": "2611039",
    "end": "2616420"
  },
  {
    "text": "as the point where all of the\nlocks that it needs or it wants to acquire have been acquired.",
    "start": "2616420",
    "end": "2623260"
  },
  {
    "text": "And, because in this\ndiscipline where no action does any operation until all\nof the locks it needs have been acquired,\nyou're guaranteed",
    "start": "2623260",
    "end": "2629930"
  },
  {
    "text": "that this serial order\nof every action following this protocol,\nindependent of knowledge",
    "start": "2629930",
    "end": "2635130"
  },
  {
    "text": "of any other actions,\neverybody just blindly follows this protocol, the\nserial order is the same as if the actions\nhad run in the order",
    "start": "2635130",
    "end": "2643110"
  },
  {
    "text": "of acquiring the lock points,\nwhatever that order might be.",
    "start": "2643110",
    "end": "2646330"
  },
  {
    "text": "This is called simple locking,\nand it does provide isolation.",
    "start": "2651160",
    "end": "2654150"
  },
  {
    "text": "But the problem\nwith simple locking where you acquire all of the\nlocks before running anything",
    "start": "2656800",
    "end": "2663660"
  },
  {
    "text": "is two-fold. The first problem is\nthat this dictates that all of the actions know the\ndifferent items that they want",
    "start": "2663660",
    "end": "2671320"
  },
  {
    "text": "to read or write beforehand. Which means that if you're\ndeep inside some action and there are all sorts\nof conditional statements",
    "start": "2671320",
    "end": "2677391"
  },
  {
    "text": "you kind of have\nto know beforehand all of the data items you\nmight be reading and writing. And that could be pretty tricky. In practice, if you want\nto adopt simple locking,",
    "start": "2677391",
    "end": "2684450"
  },
  {
    "text": "you might have to\nbe very conservative and sort of try to\nlock everything or lock a large amount of data\nwhich reduces performance.",
    "start": "2684450",
    "end": "2692200"
  },
  {
    "text": "Second, it actually doesn't\ngive you enough opportunity to get high performance,\neven when you do know all",
    "start": "2692200",
    "end": "2699260"
  },
  {
    "text": "of the data items beforehand. For example, one\nthing you could do is acquire the lock\nof x and then read x.",
    "start": "2699260",
    "end": "2706270"
  },
  {
    "text": "And while you're off trying\nto read x then you might acquire a lock of y and read y.",
    "start": "2706270",
    "end": "2713830"
  },
  {
    "text": "And so, depending on how you\nhave structured your system scheme where you\ndo some work, maybe",
    "start": "2713830",
    "end": "2719700"
  },
  {
    "text": "some computation as\nwell in between the lock acquisition steps might\ngive you higher performance.",
    "start": "2719700",
    "end": "2725365"
  },
  {
    "start": "2727000",
    "end": "3066000"
  },
  {
    "text": "So the question is can we be\na little bit more aggressive than the simple\nlocking scheme in order",
    "start": "2728120",
    "end": "2734660"
  },
  {
    "text": "to get isolation as well as a\nlittle bit higher performance? And the answer is that\nthere is such a scheme",
    "start": "2734660",
    "end": "2741554"
  },
  {
    "text": "and it's called\ntwo-phase locking.",
    "start": "2741554",
    "end": "2742970"
  },
  {
    "text": "And although a lot\nof work has happened for maybe a couple of decades\non very high performance",
    "start": "2749980",
    "end": "2756320"
  },
  {
    "text": "locking schemes, it turns out\nin the end they all, or at least for a large class\nof schemes that use this kind of locking they\nall boil down to some variable",
    "start": "2756320",
    "end": "2763900"
  },
  {
    "text": "of two-phase locking. And the idea is very simple. The two-phase locking\nidea says there",
    "start": "2763900",
    "end": "2769410"
  },
  {
    "text": "should be no release before\nall the acquires are done.",
    "start": "2769410",
    "end": "2776960"
  },
  {
    "text": "So do not release any lock\nuntil all of the locks that you need have been applied.",
    "start": "2781770",
    "end": "2788710"
  },
  {
    "text": "That's what happens here. This schemes violates two-phase\nlocking because you actually release lock x before\nyou acquire lock y,",
    "start": "2788710",
    "end": "2795260"
  },
  {
    "text": "and that violated\ntwo-phase locking. And this idea that you\ndon't release before all the",
    "start": "2795260",
    "end": "2802040"
  },
  {
    "text": "acquires, there is a little\nbit of a subtlety that happens because you\nwant recoverability",
    "start": "2802040",
    "end": "2808310"
  },
  {
    "text": "which is that the action\ncould at any stage abort.",
    "start": "2808310",
    "end": "2813646"
  },
  {
    "text": "And, in order to\nabort an action, you need to go back\nand undo that variable, the value to a previous value.",
    "start": "2813646",
    "end": "2819910"
  },
  {
    "text": "Which means that\nin order to abort you need to hold onto the lock. You better make sure that\nan action in order to abort",
    "start": "2819910",
    "end": "2825388"
  },
  {
    "text": "has the locks for\nall of the data items whose values it wishes to\nchange to the original value.",
    "start": "2825388",
    "end": "2831760"
  },
  {
    "text": "Which means that in practice,\nat least for all the items that you're writing,\nthe locks that you hold",
    "start": "2831760",
    "end": "2837470"
  },
  {
    "text": "should not be released\nuntil the commit point, until the place where\nthe action calls commit.",
    "start": "2837470",
    "end": "2845770"
  },
  {
    "text": "So no release\nbefore all acquires is basically equivalent to--",
    "start": "2845770",
    "end": "2851220"
  },
  {
    "text": "There should be no\nacquire statement after any release statement. The moment you see a release\nstatement and then an acquire after that\nof anything, then",
    "start": "2851220",
    "end": "2857280"
  },
  {
    "text": "you know that this\nviolates two-phase locking. It turns out that two-phase\nlocking is correct",
    "start": "2857280",
    "end": "2863910"
  },
  {
    "text": "that it provides isolation. And to see why let's\nlook at a picture.",
    "start": "2863910",
    "end": "2873650"
  },
  {
    "text": "We're going to go back\nto this action graph idea and look at a picture of what\nhappens with two-phase locking.",
    "start": "2873650",
    "end": "2882064"
  },
  {
    "text": "What we're going to\nprove is that if you use two-phase locking and\nyou construct an action graph of what you get from\nrunning a sequence of steps",
    "start": "2882064",
    "end": "2890720"
  },
  {
    "text": "that action graph has no cycles. And we know that if you have\nno cycles in the action graph you're guaranteed\nthat it is equivalent",
    "start": "2890720",
    "end": "2897869"
  },
  {
    "text": "to some serial order. We will argue this\nby contradiction. Let's say you have T1 and T2 all\nthe way through some action Tk",
    "start": "2897870",
    "end": "2907710"
  },
  {
    "text": "and you have a cycle going back\nfrom Tk to T1 in the action graph.",
    "start": "2907710",
    "end": "2913100"
  },
  {
    "text": "Now, if there is an\narrow from T1 to T2, it means that there\nis some data item x1 in common between T1 and T2.",
    "start": "2913100",
    "end": "2921210"
  },
  {
    "text": "And you know that T2 ran after\nT1 which means that in T1 there",
    "start": "2921210",
    "end": "2927160"
  },
  {
    "text": "was a release done of l1\nafter which in the system there was an acquire done of l1.",
    "start": "2927160",
    "end": "2933079"
  },
  {
    "text": "Likewise, between T2 and T3,\nthere is some data item x2 such",
    "start": "2936960",
    "end": "2942000"
  },
  {
    "text": "that a release was\ndone of l2 by T2.",
    "start": "2942000",
    "end": "2948430"
  },
  {
    "text": "And after that an acquire\nwas done of l2 by T3.",
    "start": "2948430",
    "end": "2955540"
  },
  {
    "text": "And the release has to have been\ndone after the acquire of l1 because we're following\ntwo-phase locking.",
    "start": "2955540",
    "end": "2961420"
  },
  {
    "text": "If you continue that down\nup to here out for Tk,",
    "start": "2961420",
    "end": "2967109"
  },
  {
    "text": "Tk did an acquire somewhere\nlater in time of lk minus one.",
    "start": "2967110",
    "end": "2975700"
  },
  {
    "text": "And then it did a release of\nsome data item, a lock of lk",
    "start": "2975700",
    "end": "2982160"
  },
  {
    "text": "where lk is actually\nsome data item that is shared between Tk and T1,\nso there is actually some data",
    "start": "2982160",
    "end": "2987599"
  },
  {
    "text": "item xk whose lock is lk. And you know that Tk\ndid a release of lk",
    "start": "2987600",
    "end": "2993850"
  },
  {
    "text": "before T1 did an acquire of lk.",
    "start": "2993850",
    "end": "2999970"
  },
  {
    "text": "But the T1's acquire\nof lk must have happened after\nthe release for lk so it must have happened\nat some point here.",
    "start": "2999970",
    "end": "3005600"
  },
  {
    "text": "T1 must have done an acquire of\nlk at some point at the bottom here. Just going out in\ntime, by two-phase",
    "start": "3005600",
    "end": "3011940"
  },
  {
    "text": "locking you get release\nof l1, then the other guy doesn't acquire of\nl1, release of l2, acquire of l2 all the way out,\nthen release of lk, and then",
    "start": "3011940",
    "end": "3019130"
  },
  {
    "text": "after that in time\nan acquire of lk. So that must have\nhappened later on in time, but now this picture\nhere violates two-phase",
    "start": "3019130",
    "end": "3025690"
  },
  {
    "text": "locking because T1,\nfor this cycle to hold, has to have done an acquire\nof lk after release of l1.",
    "start": "3025690",
    "end": "3032119"
  },
  {
    "text": "But that violates two-phase\nlocking because you're not allowed to acquire\nanything after you've released something.",
    "start": "3032120",
    "end": "3037510"
  },
  {
    "text": "So two-phase locking,\ntherefore, cannot have a cycle in the action graph. And, from the previous\nstory, it means",
    "start": "3037510",
    "end": "3042820"
  },
  {
    "text": "that it's equivalent to\nsome serial order that corresponds to the\ntopological sort of the directed acyclic graph.",
    "start": "3042820",
    "end": "3050661"
  },
  {
    "text": "I'm going to stop here. We will continue with\nthis stuff and then talk about other aspects\nof transactions next time.",
    "start": "3050662",
    "end": "3056559"
  },
  {
    "text": "And if there are any questions\neither send me an email or ask me the next time.",
    "start": "3056560",
    "end": "3060900"
  }
]