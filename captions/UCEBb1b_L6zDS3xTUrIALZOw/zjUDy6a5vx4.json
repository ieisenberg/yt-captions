[
  {
    "start": "0",
    "end": "192000"
  },
  {
    "text": "The last lecture of 6.046.\nWe are here today to talk more",
    "start": "8000",
    "end": "13538"
  },
  {
    "text": "about cache oblivious\nalgorithms.",
    "start": "13538",
    "end": "17000"
  },
  {
    "text": "Last class, we saw several\ncache oblivious algorithms, although none of them quite too\ndifficult.",
    "start": "30000",
    "end": "37500"
  },
  {
    "text": "Today we will see two difficult\ncache oblivious algorithms, a little bit more advanced.\nI figure we should do something",
    "start": "37500",
    "end": "46754"
  },
  {
    "text": "advanced for the last class just\nto get to some exciting climax.",
    "start": "46755",
    "end": "51781"
  },
  {
    "text": "So without further ado,\nlet's get started. Last time, we looked at the\nbinary search problem.",
    "start": "51781",
    "end": "60000"
  },
  {
    "text": "Or, we looked at binary search,\nrather. And so, the binary search did\nnot do so well in the cache",
    "start": "60000",
    "end": "66858"
  },
  {
    "text": "oblivious context.\nAnd, some people asked me after class, is it possible to do\nbinary search while cache",
    "start": "66858",
    "end": "74227"
  },
  {
    "text": "obliviously?\nAnd, indeed it is with something called static search\ntrees.",
    "start": "74227",
    "end": "79334"
  },
  {
    "text": "So, this is really binary\nsearch. So, I mean, the abstract\nproblem is I give you N items,",
    "start": "79334",
    "end": "85609"
  },
  {
    "text": "say presorted,\nbuild some static data structure so that you can search\namong those N items quickly.",
    "start": "85609",
    "end": "94000"
  },
  {
    "text": "And quickly,\nI claim, means log base B of N. We know that with B trees,\nour goal is to get log base B",
    "start": "94000",
    "end": "101661"
  },
  {
    "text": "of N.\nWe know that we can achieve that with B trees when we know\nB.",
    "start": "101661",
    "end": "106664"
  },
  {
    "text": "We'd like to do that when we\ndon't know B. And that's what cache oblivious\nstatic search trees achieve.",
    "start": "106664",
    "end": "114482"
  },
  {
    "text": "So here's what we're going to\ndo. As you might suspect,\nwe're going to use a tree.",
    "start": "114482",
    "end": "122235"
  },
  {
    "text": "So, we're going to store our N\nelements in a complete binary",
    "start": "122235",
    "end": "127552"
  },
  {
    "text": "tree.\nWe can't use B trees because we don't know what B is.\nSo, we'll use a binary tree.",
    "start": "127552",
    "end": "135212"
  },
  {
    "text": "And the key is how we lay out a\nbinary tree. The binary tree will have N\nnodes.",
    "start": "135212",
    "end": "142061"
  },
  {
    "text": "Or, you can put the data in the\nleaves. It doesn't really matter.\nSo, here's our tree.",
    "start": "142061",
    "end": "150391"
  },
  {
    "text": "There are the N nodes.\nAnd we're storing them, I didn't say,\nin order, you know,",
    "start": "150391",
    "end": "155747"
  },
  {
    "text": "in the usual way,\nin order in a binary tree, which makes it a binary search\ntree.",
    "start": "155747",
    "end": "161173"
  },
  {
    "text": "So we now had a search in this\nthing. So, the search will just start\nat the root and a walk down some",
    "start": "161173",
    "end": "167991"
  },
  {
    "text": "root-to-leaf path.\nOK, and each point you know whether to go left or to go\nright because things are in",
    "start": "167991",
    "end": "174878"
  },
  {
    "text": "order.\nSo we're assuming here that we have an ordered universe of\nkeys.",
    "start": "174878",
    "end": "181000"
  },
  {
    "text": "So that's easy.\nWe know that that will take log N time.\nThe question is how many memory",
    "start": "181000",
    "end": "187377"
  },
  {
    "text": "transfers?\nWe'd like a lot of the nodes near the root to be somehow\ncloser and one block.",
    "start": "187377",
    "end": "193905"
  },
  {
    "text": "But we don't know what the\nblock size is. So are going to do is carve the\ntree in the middle level.",
    "start": "193906",
    "end": "201194"
  },
  {
    "text": "We're going to use divide and\nconquer for our layout of the tree, how we order the nodes in\nmemory.",
    "start": "201195",
    "end": "208483"
  },
  {
    "text": "And the divide and conquer is\nbased on cutting in the middle, which is a bit weird.\nIt's not our usual divide and",
    "start": "208483",
    "end": "218676"
  },
  {
    "text": "conquer.\nAnd we'll see this more than once today.\nSo, when you cut on the middle",
    "start": "218676",
    "end": "225784"
  },
  {
    "text": "level, if the height of your\noriginal tree is log N, maybe log N plus one or\nsomething, it's roughly log N,",
    "start": "225784",
    "end": "235384"
  },
  {
    "text": "then the top half will be log N\nover two. And at the height of the bottom\npieces will be log N over two.",
    "start": "235384",
    "end": "245951"
  },
  {
    "text": "How many nodes will there be in\nthe top tree? N over two?\nNot quite.",
    "start": "245951",
    "end": "252292"
  },
  {
    "text": "Two to the log N over two,\nsquare root of N. OK, so it would be about root N\nnodes over here.",
    "start": "252292",
    "end": "261073"
  },
  {
    "text": "And therefore,\nthere will be about root N subtrees down here,\none for each,",
    "start": "261073",
    "end": "268097"
  },
  {
    "text": "or a couple for each leaf.\nOK, so we have these subtrees",
    "start": "268097",
    "end": "274597"
  },
  {
    "text": "of root N, and there are about\nroot N of them. OK, this is how we are carving\nour tree.",
    "start": "274597",
    "end": "282119"
  },
  {
    "text": "Now, we're going to recurse on\neach of the pieces. I'd like to redraw this\nslightly, sorry,",
    "start": "282119",
    "end": "290000"
  },
  {
    "text": "just to make it a little bit\nclearer. These triangles are really\ntrees, and they are connected by",
    "start": "290000",
    "end": "298417"
  },
  {
    "text": "edges to this tree up here.\nSo what we are really doing is",
    "start": "298417",
    "end": "304324"
  },
  {
    "text": "carving in the middle level of\nedges in the tree. And if N is not exactly a power\nof two, you have to round your",
    "start": "304325",
    "end": "312775"
  },
  {
    "text": "level by taking floors or\nceilings. But you cut roughly in the\nmiddle level of edges.",
    "start": "312775",
    "end": "319131"
  },
  {
    "text": "There is a lot of edges here.\nYou conceptually slice there. That gives you a top tree and\nthe bottom tree,",
    "start": "319131",
    "end": "327116"
  },
  {
    "text": "several bottom trees,\neach of size roughly root N. OK, and then we are going to\nrecursively layout these root N",
    "start": "327116",
    "end": "339834"
  },
  {
    "text": "plus one subtrees,\nand then concatenate.",
    "start": "339834",
    "end": "345012"
  },
  {
    "text": "So, this is the idea of the\nrecursive layout.",
    "start": "345012",
    "end": "350854"
  },
  {
    "text": "We sought recursive layouts\nwith matrices last time.",
    "start": "350854",
    "end": "357626"
  },
  {
    "text": "This is doing the same thing\nfor a tree.",
    "start": "357626",
    "end": "364000"
  },
  {
    "text": "So, I want to recursively\nlayout the top tree. So here's the top tree.\nAnd I imagine it being somehow",
    "start": "364000",
    "end": "371202"
  },
  {
    "text": "squashed down into a linear\narray recursively. And then I do the same thing\nfor each of the bottom trees.",
    "start": "371202",
    "end": "378698"
  },
  {
    "text": "So here are all the bottom\ntrees. And I squashed each of them\ndown into some linear order.",
    "start": "378698",
    "end": "385091"
  },
  {
    "text": "And then I concatenate those\nlinear orders. That's the linear order of the\nstreet.",
    "start": "385091",
    "end": "392000"
  },
  {
    "text": "And you need a base case.\nAnd the base case, just a single node,\nis stored in the only order of",
    "start": "392000",
    "end": "399624"
  },
  {
    "text": "a single node there is.\nOK, so that's a recursive layout of a binary search tree.\nIt turns out this works really",
    "start": "399624",
    "end": "408656"
  },
  {
    "start": "405000",
    "end": "568000"
  },
  {
    "text": "well.\nAnd let's quickly do a little example just so it's completely\nclear what this layout is",
    "start": "408657",
    "end": "416116"
  },
  {
    "text": "because it's a bit bizarre maybe\nthe first time you see it.",
    "start": "416116",
    "end": "422000"
  },
  {
    "text": "So let me draw my favorite\npicture.",
    "start": "422000",
    "end": "425000"
  },
  {
    "text": "So here's a tree of height four\nor three depending on how you count.\nWe divide in the middle level,",
    "start": "435000",
    "end": "442470"
  },
  {
    "text": "and we say, OK,\nthat's the top tree. And then these are the bottom\ntrees.",
    "start": "442470",
    "end": "447918"
  },
  {
    "text": "So there's four bottom trees.\nSo there are four children hanging off the root tree.\nThey each have the same size in",
    "start": "447918",
    "end": "456785"
  },
  {
    "text": "this case.\nThey should all roughly be the same size.\nAnd the first we layout the top thing where we divide on the\nmiddle level.",
    "start": "456785",
    "end": "463813"
  },
  {
    "text": "We say, OK, this comes first.\nAnd then, the bottom subtrees come next, two and three.\nSo, I'm writing down the order",
    "start": "463813",
    "end": "470322"
  },
  {
    "text": "in which these nodes are stored\nin an array. And then, we visit this tree so\nwe get four, five,",
    "start": "470322",
    "end": "475622"
  },
  {
    "text": "six.\nAnd then we visit this one so we get seven,\neight, nine. And then the subtree,\n10, 11, 12, and then the last",
    "start": "475622",
    "end": "483667"
  },
  {
    "text": "subtree.\nSo that's the order in which you store these 15 nodes.\nAnd you can build that up",
    "start": "483667",
    "end": "489975"
  },
  {
    "text": "recursively.\nOK, so the structure is fairly simple, just a binary structure\nwhich we know and love,",
    "start": "489975",
    "end": "497017"
  },
  {
    "text": "but store it in this funny\norder. This is not depth research\norder or level order,",
    "start": "497017",
    "end": "502811"
  },
  {
    "text": "lots of natural things you\nmight try, none of which work in cache oblivious context.\nThis is pretty much the only",
    "start": "502811",
    "end": "511550"
  },
  {
    "text": "thing that works.\nAnd the intuition as, well, we are trying to mimic\nall kinds of B trees. So, if you want a binary tree,\nwell, that's the original tree.",
    "start": "511550",
    "end": "519745"
  },
  {
    "text": "It doesn't matter how you store\nthings. If you want a tree where the\nbranching factor is four,",
    "start": "519745",
    "end": "524785"
  },
  {
    "text": "well, then here it is.\nThese blocks give you a branching factor of four.\nIf we had more leaves down",
    "start": "524785",
    "end": "530100"
  },
  {
    "text": "here, there would be four\nchildren hanging off of that node.\nAnd these are all clustered together consecutively in\nmemory.",
    "start": "530100",
    "end": "536579"
  },
  {
    "text": "So, if your block size happens\nto be three, then this is a perfect way to store things for\na block size of three.",
    "start": "536579",
    "end": "544000"
  },
  {
    "text": "If you're block size happens to\nbe probably 15, right, if we count the number\nof, right, the number of nodes",
    "start": "544000",
    "end": "552694"
  },
  {
    "text": "in here is 15,\nif you're block size happens to be 15, then this recursion will\ngive you a perfect blocking in",
    "start": "552694",
    "end": "561471"
  },
  {
    "text": "terms of 15.\nAnd in general, it's actually mimicking block\nsizes of 2^K-1.",
    "start": "561471",
    "end": "567350"
  },
  {
    "text": "Think powers of two.\nOK, that's the intuition. Let me give you the formal\nanalysis to make it clearer.",
    "start": "567350",
    "end": "577084"
  },
  {
    "start": "568000",
    "end": "641000"
  },
  {
    "text": "So, we claim that there are\norder, log base B of N memory",
    "start": "577084",
    "end": "582105"
  },
  {
    "text": "transfers.\nThat's what we want to prove no matter what B is.\nSo here's what we're going to",
    "start": "582105",
    "end": "589907"
  },
  {
    "text": "do.\nYou may recall last time when we analyzed divide and conquer\nalgorithms, we wrote our",
    "start": "589907",
    "end": "597618"
  },
  {
    "text": "recurrence, and that the base\ncase was the key.",
    "start": "597619",
    "end": "603000"
  },
  {
    "text": "Here, in fact,\nwe are only going to think about the base case in a certain\nsense. We don't have,\nreally, recursion in the",
    "start": "603000",
    "end": "608959"
  },
  {
    "text": "algorithm.\nThe algorithm is just walking down some root-to-leaf path.\nWe only have a recursion in a definition of the layout.\nSo, we can be a little bit more",
    "start": "608959",
    "end": "616768"
  },
  {
    "text": "flexible.\nWe don't have to look at our recurrence.\nWe are just going to think about the base case.\nI want to imagine,",
    "start": "616768",
    "end": "622522"
  },
  {
    "text": "you start with the big\ntriangle. That you cut it in the middle;\nyou get smaller triangles. Imagine the point at which you\nkeep recursively cutting.",
    "start": "622522",
    "end": "631000"
  },
  {
    "text": "So imagine this process.\nBig triangles halve in height each time.\nThey're getting smaller and",
    "start": "631000",
    "end": "637595"
  },
  {
    "text": "smaller, stop cutting at the\npoint where a triangle fits in a block.\nOK, and look at that time.",
    "start": "637595",
    "end": "644338"
  },
  {
    "start": "641000",
    "end": "844000"
  },
  {
    "text": "OK, the recursion actually goes\nall the way, but in the analysis let's think about the point\nwhere the chunk fits in a block",
    "start": "644338",
    "end": "653205"
  },
  {
    "text": "in one of these triangles,\none of these boxes fits in a block.\nSo, I'm going to call this a",
    "start": "653205",
    "end": "659654"
  },
  {
    "text": "recursive level.\nSo, I'm imagining expanding all",
    "start": "659654",
    "end": "665000"
  },
  {
    "text": "of the recursions in parallel.\nThis is some level of detail,",
    "start": "665000",
    "end": "670709"
  },
  {
    "text": "some level of refinement of the\ntrees at which the tree you're",
    "start": "670709",
    "end": "676612"
  },
  {
    "text": "looking at, the triangle,\nhas size. In other words,\nthere is a number of nodes in",
    "start": "676612",
    "end": "684161"
  },
  {
    "text": "that triangle is less than or\nequal to B. OK, so let me draw a picture.\nSo, I want to draw sort of this",
    "start": "684161",
    "end": "694260"
  },
  {
    "text": "picture but where instead of\nnodes, I have little triangles",
    "start": "694260",
    "end": "699345"
  },
  {
    "text": "of size, at most,\nB. So, the picture looks something\nlike this.",
    "start": "699345",
    "end": "704605"
  },
  {
    "text": "We have a little triangle of\nsize, at most, B.\nIt has a bunch of children",
    "start": "704606",
    "end": "710744"
  },
  {
    "text": "which are subtrees of size,\nat most, B, the same size. And then, these are in a chunk,\nand then we have other chunks",
    "start": "710744",
    "end": "720651"
  },
  {
    "text": "that look like that in recursion\npotentially.",
    "start": "720651",
    "end": "726000"
  },
  {
    "text": "OK, so I haven't drawn\neverything. There would be a whole bunch\nof, between B and B^2,",
    "start": "749000",
    "end": "754578"
  },
  {
    "text": "in fact, subtrees,\nother squares of this size. So here, I had to refine the\nentire tree here.",
    "start": "754578",
    "end": "760627"
  },
  {
    "text": "And then I refined each of the\nsubtrees here and here at these levels.\nAnd then it turned out after",
    "start": "760627",
    "end": "767079"
  },
  {
    "text": "these two recursive levels,\neverything fits in a block. Everything has the same size,\nso at some point they will all",
    "start": "767079",
    "end": "774674"
  },
  {
    "text": "fit within a block.\nAnd they might actually be quite a bit smaller than the\nblock.",
    "start": "774674",
    "end": "779983"
  },
  {
    "text": "How small?\nSo, what I'm doing is cutting",
    "start": "779983",
    "end": "785209"
  },
  {
    "text": "the number of levels and half at\neach point. And I stop when the height of\none of these trees is",
    "start": "785209",
    "end": "795501"
  },
  {
    "text": "essentially at most log B\nbecause that's when the number",
    "start": "795501",
    "end": "801587"
  },
  {
    "text": "of nodes at there will be B\nroughly. So, how small can the height\nbe?",
    "start": "801588",
    "end": "810000"
  },
  {
    "text": "I keep dividing at half and\nstopping when it's, at most, log B.\nLog B over two. So it's, at most,\nlog B, it's at least half log",
    "start": "810000",
    "end": "817688"
  },
  {
    "text": "B.\nTherefore, the number of nodes it here could be between the\nsquare root of B and B.",
    "start": "817689",
    "end": "822921"
  },
  {
    "text": "So, this could be a lot smaller\nand less than a constant factor of a block, a claim that doesn't\nmatter.",
    "start": "822921",
    "end": "829287"
  },
  {
    "text": "It's OK.\nThis could be a small square root of B.\nI'm not even going to write that it could be a small square\nroot of B because that doesn't",
    "start": "829287",
    "end": "837733"
  },
  {
    "text": "play a role in the analysis.\nIt's a worry, but it's OK essentially because\nour bound only involves log B.",
    "start": "837734",
    "end": "844162"
  },
  {
    "text": "It doesn't involve B.\nSo, here's what we do.",
    "start": "844163",
    "end": "849485"
  },
  {
    "text": "We know that each of the height\nof one of these triangles of",
    "start": "849485",
    "end": "856149"
  },
  {
    "text": "size, at most,\nB is at least a half log B. And therefore,\nif you look at a search path,",
    "start": "856150",
    "end": "865639"
  },
  {
    "text": "so, when we do a search in this\ntree, we're going to start up",
    "start": "865640",
    "end": "872418"
  },
  {
    "text": "here.\nAnd I'm going to mess up the diagram now.\nWe're going to follow some",
    "start": "872418",
    "end": "879076"
  },
  {
    "text": "path, maybe I should have drawn\nit going down here. We visit through some of these\ntriangles, but it's a",
    "start": "879076",
    "end": "886845"
  },
  {
    "text": "root-to-node path in the tree.\nSo, how many of the triangles could it visit?\nWell, the height of the tree",
    "start": "886846",
    "end": "894691"
  },
  {
    "text": "divided by the height of one of\nthe triangles. So, this visits,\nat most, log N over half log B",
    "start": "894692",
    "end": "901692"
  },
  {
    "text": "triangles, which looks good.\nThis is log base B of N,",
    "start": "901692",
    "end": "907135"
  },
  {
    "text": "mind you off factor of two.\nNow, what we worry about is how",
    "start": "907135",
    "end": "912295"
  },
  {
    "text": "many blocks does a triangle\noccupy? One of these triangles should\nfit in a block.",
    "start": "912295",
    "end": "919234"
  },
  {
    "text": "We know by the recursive\nlayout, it is stored in a consecutive region in memory.\nSo, how many blocks could",
    "start": "919234",
    "end": "928398"
  },
  {
    "text": "occupy?\nTwo, because of alignment, it might fall across the\nboundary of a block,",
    "start": "928398",
    "end": "935790"
  },
  {
    "text": "but at most,\none boundary. So, it fits in two blocks.\nSo, each triangle fits in one",
    "start": "935790",
    "end": "942407"
  },
  {
    "text": "block, but is in,\nat most, two blocks, memory blocks,\nsize B depending on alignment.",
    "start": "942408",
    "end": "949109"
  },
  {
    "text": "So, the number of memory\ntransfers, in other words, a number of blocks we read,\nbecause all we are doing here",
    "start": "949109",
    "end": "957878"
  },
  {
    "text": "is reading in a search,\nis at most two blocks per triangle.\nThere are this many triangles,",
    "start": "957878",
    "end": "965826"
  },
  {
    "text": "so it's at most,\n4 log base B of N, OK, which is order log base B\nof N. And there are papers about\ndecreasing this constant 4 with",
    "start": "965826",
    "end": "973436"
  },
  {
    "text": "more sophisticated data\nstructures. You can get it down to a little\nbit less than two I think.",
    "start": "973437",
    "end": "978977"
  },
  {
    "text": "So, there you go.\nSo not quite as good as B trees in terms of the constant,\nbut pretty good.",
    "start": "978978",
    "end": "984398"
  },
  {
    "text": "And what's good is that this\ndata structure works for all B at the same time.\nThis analysis works for all B.",
    "start": "984398",
    "end": "992720"
  },
  {
    "text": "So, we have a multilevel memory\nhierarchy, no problem. Any questions about this data\nstructure?",
    "start": "992720",
    "end": "1001061"
  },
  {
    "text": "This is already pretty\nsophisticated, but we are going to get even\nmore sophisticated.",
    "start": "1001061",
    "end": "1008586"
  },
  {
    "text": "Next, OK, good,\nno questions. This is either perfectly clear,\nor a little bit difficult,",
    "start": "1008586",
    "end": "1016293"
  },
  {
    "text": "or both.\nSo, now, I debated with myself what exactly I would cover next.\nThere are two natural things I",
    "start": "1016293",
    "end": "1025801"
  },
  {
    "text": "could cover, both of which are\ncomplicated. My first result in the cache\noblivious world is making this",
    "start": "1025801",
    "end": "1031806"
  },
  {
    "text": "data structure dynamic.\nSo, there is a dynamic B tree that's cache oblivious that\nworks for all values of B.",
    "start": "1031806",
    "end": "1038110"
  },
  {
    "text": "And it gets log base B of N,\ninsert, delete, and search.\nSo, this just gets search in log base B of N.\nThat data structure,",
    "start": "1038110",
    "end": "1045196"
  },
  {
    "text": "our first paper was damn\ncomplicated, and then it got simplified.\nIt's now not too hard,",
    "start": "1045196",
    "end": "1051801"
  },
  {
    "text": "but it takes a couple of\nlectures in an advanced algorithms class to teach it.\nSo, I'm not going to do that.",
    "start": "1051801",
    "end": "1060399"
  },
  {
    "start": "1060000",
    "end": "1288000"
  },
  {
    "text": "But there you go.\nIt exists. Instead, we're going to cover\nour favorite problem sorting in",
    "start": "1060399",
    "end": "1067523"
  },
  {
    "text": "the cache oblivious context.\nAnd this is quite complicated, more than you'd expect,\nOK, much more complicated than",
    "start": "1067523",
    "end": "1076612"
  },
  {
    "text": "it is in a multithreaded setting\nto get the right answer, anyway.\nMaybe to get the best answer in",
    "start": "1076612",
    "end": "1085107"
  },
  {
    "text": "a multithreaded setting is also\ncomplicated. The version we got last week\nwas pretty easy.",
    "start": "1085107",
    "end": "1091021"
  },
  {
    "text": "But before we go to cache\noblivious sorting, let me talk about cache aware\nsorting because we need to know",
    "start": "1091021",
    "end": "1098023"
  },
  {
    "text": "what bound we are aiming for.\nAnd just to warn you, I may not get to the full\nanalysis of the full cache",
    "start": "1098024",
    "end": "1104890"
  },
  {
    "text": "oblivious sorting.\nBut I want to give you an idea of what goes into it because\nit's pretty cool,",
    "start": "1104890",
    "end": "1111211"
  },
  {
    "text": "I think, a lot of ideas.\nSo, how might you sort? So, cache aware,\nwe assume we can do everything.",
    "start": "1111212",
    "end": "1119155"
  },
  {
    "text": "Basically, this means we have B\ntrees. That's the only other structure\nwe know.",
    "start": "1119155",
    "end": "1124752"
  },
  {
    "text": "How would you sort N numbers,\ngiven that that's the only data structure you have?\nRight, just add them into the B",
    "start": "1124753",
    "end": "1132855"
  },
  {
    "text": "tree, and then do an in-order\ntraversal. That's one way to sort,\nperfectly reasonable.",
    "start": "1132855",
    "end": "1140000"
  },
  {
    "text": "We'll call it repeated\ninsertion into a B tree. OK, we know in the usual\nsetting, and the BST sort,",
    "start": "1140000",
    "end": "1148400"
  },
  {
    "text": "where you use a balanced binary\nsearch tree, like red-black",
    "start": "1148400",
    "end": "1153474"
  },
  {
    "text": "trees, that takes N log N time,\nlog N per operation, and that's an optimal sorting\nalgorithm in the comparison",
    "start": "1153474",
    "end": "1162837"
  },
  {
    "text": "model, only thinking about\ncomparison model here.",
    "start": "1162837",
    "end": "1168000"
  },
  {
    "text": "So, how many memory transfers\ndoes this data structure takes?",
    "start": "1168000",
    "end": "1179123"
  },
  {
    "text": "Sorry, this algorithm for\nsorting?",
    "start": "1179123",
    "end": "1185241"
  },
  {
    "text": "The number of memory transfers\nis a function of N,",
    "start": "1185241",
    "end": "1194325"
  },
  {
    "text": "and B_M of N is?\nThis is easy.",
    "start": "1194325",
    "end": "1201000"
  },
  {
    "text": "N insertions,\nOK, you have to think about N",
    "start": "1201000",
    "end": "1207028"
  },
  {
    "text": "order traversal.\nYou have to remember back your",
    "start": "1207028",
    "end": "1213631"
  },
  {
    "text": "analysis of B trees,\nbut this is not too hard.",
    "start": "1213631",
    "end": "1220090"
  },
  {
    "text": "How long does the insertion\ntake, the N insertions?",
    "start": "1220090",
    "end": "1227267"
  },
  {
    "text": "N log base B of N.\nHow long does the traversal",
    "start": "1227267",
    "end": "1232839"
  },
  {
    "text": "take?\nLess time. If we think about it,\nyou can get away with N over B memory transfers,\nso quite a bit less than this.",
    "start": "1232839",
    "end": "1240538"
  },
  {
    "text": "This is bigger than N,\nwhich is actually pretty bad. N memory transfers means\nessentially you're doing random",
    "start": "1240538",
    "end": "1247759"
  },
  {
    "text": "access, visiting every element\nin some random order. It's even worse.\nThere's even a log factor.",
    "start": "1247760",
    "end": "1254096"
  },
  {
    "text": "Now, the log factor goes down\nby this log B factor. But, this is actually a really\nbad sorting bound.",
    "start": "1254096",
    "end": "1262000"
  },
  {
    "text": "So, unlike normal algorithms,\nwhere using a search tree is a good way to sort,\nin cache oblivious or cache",
    "start": "1262000",
    "end": "1270557"
  },
  {
    "text": "aware sorting it's really,\nreally bad. So, what's another natural\nalgorithm you might try,",
    "start": "1270557",
    "end": "1277786"
  },
  {
    "text": "given what we know for sorting?\nAnd, even cache oblivious, all the algorithms we've seen\nare cache oblivious.",
    "start": "1277786",
    "end": "1286593"
  },
  {
    "text": "So, what's a good one to try?\nMerge sort. OK, we did merge sort in\nmultithreaded algorithms.",
    "start": "1286593",
    "end": "1294310"
  },
  {
    "start": "1288000",
    "end": "1516000"
  },
  {
    "text": "Let's try a merge sort,\na good divide and conquer thing.\nSo, I'm going to call it binary",
    "start": "1294310",
    "end": "1300415"
  },
  {
    "text": "merge sort because it splits the\narray into two pieces, and it recurses on the two\npieces.",
    "start": "1300415",
    "end": "1306664"
  },
  {
    "text": "So, you get a binary recursion\ntree. So, let's analyze it.\nSo the number of memory",
    "start": "1306665",
    "end": "1312340"
  },
  {
    "text": "transfers on N elements,\nso I mean it has a pretty good recursive layout,\nright?",
    "start": "1312340",
    "end": "1317871"
  },
  {
    "text": "The two subarrays that we get\nwhat we partition our array are consecutive.\nSo, we're recursing on this,",
    "start": "1317871",
    "end": "1325054"
  },
  {
    "text": "recursing on this.\nSo, it's a nice cache oblivious",
    "start": "1325054",
    "end": "1330599"
  },
  {
    "text": "layout.\nAnd this is even for cache aware.\nThis is a pretty good",
    "start": "1330599",
    "end": "1335632"
  },
  {
    "text": "algorithm, a lot better than\nthis one, as we'll see. But, what is the recurrence we\nget?",
    "start": "1335632",
    "end": "1342761"
  },
  {
    "text": "So, here we have to go back to\nlast lecture when we were thinking about recurrences for\nrecursive cache oblivious",
    "start": "1342761",
    "end": "1351987"
  },
  {
    "text": "algorithms.",
    "start": "1351987",
    "end": "1354000"
  },
  {
    "text": "I mean, the first part should\nbe pretty easy. There's an O.\nWell, OK, let's put the O at",
    "start": "1366000",
    "end": "1375289"
  },
  {
    "text": "the end, the divide and the\nconquer part at the end.",
    "start": "1375289",
    "end": "1380862"
  },
  {
    "text": "The recursion is 2MT of N over\ntwo, good.",
    "start": "1380863",
    "end": "1386000"
  },
  {
    "text": "All right, that's just like the\nmerge sort recurrence, and that's the additive term\nthat you're thinking about.",
    "start": "1386000",
    "end": "1392863"
  },
  {
    "text": "OK, so normally,\nwe would pay a linear additive term here, order N because\nmerging takes order N time.",
    "start": "1392863",
    "end": "1399155"
  },
  {
    "text": "Now, we are merging,\nwhich is three parallel scans, the two inputs and the output.\nOK, they're not quite parallel",
    "start": "1399155",
    "end": "1406145"
  },
  {
    "text": "interleaved.\nThey're a bit funnily interleaved, but as long as your\ncache stores at least three",
    "start": "1406145",
    "end": "1411992"
  },
  {
    "text": "blocks, this is also linear time\nin this setting, which means you visit each\nblock a constant number of",
    "start": "1411992",
    "end": "1418347"
  },
  {
    "text": "times.\nOK, that's the recurrence. Now, we also need a base case,\nof course.",
    "start": "1418347",
    "end": "1424563"
  },
  {
    "text": "We've seen two base cases,\none MT of B, and the other,\nMT of whatever fits in cache.",
    "start": "1424563",
    "end": "1430164"
  },
  {
    "text": "So, let's look at that one\nbecause it's better. So, for some constant,\nC, if I have an array of size",
    "start": "1430164",
    "end": "1436872"
  },
  {
    "text": "M, this fits in cache,\nactually, probably C is one here, but I'll just be careful.\nFor some constant,",
    "start": "1436872",
    "end": "1443648"
  },
  {
    "text": "this fits in cache.\nA problem of this size fits in",
    "start": "1443648",
    "end": "1450335"
  },
  {
    "text": "cache, and in that case,\nthe number of memory transfers",
    "start": "1450335",
    "end": "1458138"
  },
  {
    "text": "is, anyone remember?\nWe've used this base case more",
    "start": "1458138",
    "end": "1465363"
  },
  {
    "text": "than once before.\nDo you remember?",
    "start": "1465364",
    "end": "1471000"
  },
  {
    "text": "Sorry?\nCM over B. I've got a big O,\nso M over B. Order M over B because this is\nthe size of the data.",
    "start": "1471000",
    "end": "1477356"
  },
  {
    "text": "So, I mean, just to read it all\nin takes M over B. Once it's in cache,\nit doesn't really matter what I",
    "start": "1477356",
    "end": "1483910"
  },
  {
    "text": "do as long as I use linear space\nfor the right constant here. As long as I use linear space\nin that algorithm,",
    "start": "1483910",
    "end": "1490995"
  },
  {
    "text": "I'll stay in cache,\nand therefore, not have to write anything out\nuntil the very end and I spend M",
    "start": "1490995",
    "end": "1497285"
  },
  {
    "text": "over B to write it out.\nOK, so I can't really spend more than M over B almost no\nmatter what algorithm I have,",
    "start": "1497285",
    "end": "1507092"
  },
  {
    "text": "so long as it uses linear\nspace. So, this is a base case that's\nuseful pretty much in any",
    "start": "1507092",
    "end": "1514353"
  },
  {
    "text": "algorithm.\nOK, that's a recurrence. Now we just have to solve it.\nOK, let's see how good binary",
    "start": "1514353",
    "end": "1522121"
  },
  {
    "start": "1516000",
    "end": "1863000"
  },
  {
    "text": "merge sort is.\nOK, and again, I'm going to just give the\nintuition behind the solution to",
    "start": "1522121",
    "end": "1529382"
  },
  {
    "text": "this recurrence.\nAnd I won't use the substitution method to prove it\nformally.",
    "start": "1529382",
    "end": "1536073"
  },
  {
    "text": "But this one's actually pretty\nsimple. So, we have,\nat the top, actually I'm going",
    "start": "1536073",
    "end": "1541527"
  },
  {
    "text": "to write it over here.\nOtherwise I won't be able to see.\nSo, at the top of the",
    "start": "1541527",
    "end": "1546706"
  },
  {
    "text": "recursion, we have N over B\ncosts. I'll ignore the constants.\nThere is probably also on",
    "start": "1546706",
    "end": "1552505"
  },
  {
    "text": "additive one,\nwhich I'm ignoring here. Then we split into two problems\nof half the size.",
    "start": "1552505",
    "end": "1558374"
  },
  {
    "text": "So, we get a half N over B,\nand a half N over B. OK, usually this was N,\nhalf N, half N.",
    "start": "1558374",
    "end": "1565470"
  },
  {
    "text": "You should regard it as from\nlecture one. So, the total on this level is\nN over B.",
    "start": "1565470",
    "end": "1570607"
  },
  {
    "text": "The total on this level is N\nover B. And, you can prove by\ninduction, that every level is N",
    "start": "1570607",
    "end": "1576329"
  },
  {
    "text": "over B.\nThe question is how many levels are there?\nWell, at the bottom, so, dot, dot,\ndot, at the bottom of this",
    "start": "1576329",
    "end": "1583286"
  },
  {
    "text": "recursion tree we should get\nsomething of size M, and then we're paying M over B.\nActually here we're paying M",
    "start": "1583286",
    "end": "1590244"
  },
  {
    "text": "over B.\nSo, it's a good thing those match.\nThey should.",
    "start": "1590244",
    "end": "1595641"
  },
  {
    "text": "So here, we have a bunch of\nleaves, all the size M over B. You can also compute the number\nof leaves here is N over M.",
    "start": "1595641",
    "end": "1604947"
  },
  {
    "text": "If you want to be extra sure,\nyou should always check the leaf level.\nIt's a good idea.",
    "start": "1604947",
    "end": "1611745"
  },
  {
    "text": "So we have N over M leaves,\neach costing M over B. This is an M.\nSo, this is N over B also.",
    "start": "1611745",
    "end": "1620000"
  },
  {
    "text": "So, every level here is N over\nB memory transfers. And the number of levels is one\nN over B?",
    "start": "1620000",
    "end": "1628487"
  },
  {
    "text": "Log N over B.\nYep, that's right. I just didn't hear it right.\nOK, we are starting at N.",
    "start": "1628487",
    "end": "1636497"
  },
  {
    "text": "We're getting down to M.\nSo, you can think of it as log",
    "start": "1636498",
    "end": "1641648"
  },
  {
    "text": "N, the whole binary tree minus\nthe subtrees log M, and that's the same as log N\nover M, OK, or however you want",
    "start": "1641648",
    "end": "1651948"
  },
  {
    "text": "to think about it.\nThe point is that this is a log",
    "start": "1651948",
    "end": "1657293"
  },
  {
    "text": "base two.\nThat's where we are not doing so great.\nSo this is actually a pretty",
    "start": "1657293",
    "end": "1662841"
  },
  {
    "text": "good algorithm.\nSo let me write the solution over here.\nSo, the number of memory",
    "start": "1662841",
    "end": "1668538"
  },
  {
    "text": "transfers on N items is going to\nbe the number of levels times the cost of each level.\nSo, this is N over B times log",
    "start": "1668538",
    "end": "1676971"
  },
  {
    "text": "base two of N over M,\nwhich is a lot better than repeated insertion into a B\ntree.",
    "start": "1676971",
    "end": "1684000"
  },
  {
    "text": "Here, we were getting N times\nlog N over log B, OK, so N log N over log B.\nWe're getting a log B savings",
    "start": "1684000",
    "end": "1692621"
  },
  {
    "text": "over not proving anything,\nand here we are getting a factor of B savings,\nN log N over B.",
    "start": "1692621",
    "end": "1699963"
  },
  {
    "text": "In fact, we even made it a\nlittle bit smaller by dividing this N by M.\nThat doesn't matter too much.",
    "start": "1699963",
    "end": "1708243"
  },
  {
    "text": "This dividing by B is a big\none. OK, so we're almost there.\nThis is almost an optimal",
    "start": "1708243",
    "end": "1715077"
  },
  {
    "text": "algorithm.\nIt's even cache oblivious, which is pretty cool.\nAnd that extra little step,",
    "start": "1715077",
    "end": "1720146"
  },
  {
    "text": "which is that you should be\nable to get on other log B factor improvement,\nI want to combine these two",
    "start": "1720146",
    "end": "1726120"
  },
  {
    "text": "ideas.\nI want to keep this factor B improvement over N log N,\nand I want to keep this factor",
    "start": "1726120",
    "end": "1731491"
  },
  {
    "text": "log B improvement over N log N,\nand get them together. So, first, before we do that\ncache obliviously,",
    "start": "1731491",
    "end": "1737465"
  },
  {
    "text": "let's do it cache aware.\nSo, this is the third cache",
    "start": "1737465",
    "end": "1743023"
  },
  {
    "text": "aware algorithm.\nThis one was also cache oblivious.\nSo, how should I modify a merge",
    "start": "1743023",
    "end": "1751980"
  },
  {
    "text": "sort in order to do better?\nI mean, I have this log base",
    "start": "1751980",
    "end": "1758138"
  },
  {
    "text": "two, and I want a log base B,\nmore or less. So, how would I do that with\nmerge sort?",
    "start": "1758138",
    "end": "1767207"
  },
  {
    "text": "Yeah?\nSplit into B subarrays, yeah.\nInstead of doing binary merge sort, this is what I was hinting\nat here, instead of splitting it",
    "start": "1767208",
    "end": "1775557"
  },
  {
    "text": "into two pieces,\nand recursing on the two pieces, and then merging them,\nI could split potentially into",
    "start": "1775557",
    "end": "1780976"
  },
  {
    "text": "more pieces.\nOK, and to do that, I'm going to use my cache.\nSo the idea is B pieces. This is actually not the best\nthing to do, although B pieces",
    "start": "1780977",
    "end": "1788564"
  },
  {
    "text": "does work.\nAnd, it's what I was hinting at because I was saying I want a\nlog B. It's actually not quite log B.\nIt's log M over B.",
    "start": "1788564",
    "end": "1795283"
  },
  {
    "text": "OK, but let's see.\nSo, what is the most pieces I could split into?\nRight, well,",
    "start": "1795284",
    "end": "1801333"
  },
  {
    "text": "I could split into N pieces.\nThat would be good,",
    "start": "1801333",
    "end": "1806555"
  },
  {
    "text": "wouldn't it,\nat only one recursive level? I can't split into N pieces.\nWhy?",
    "start": "1806555",
    "end": "1814555"
  },
  {
    "text": "What happens wrong when I split\ninto N pieces? That would be the ultimate.\nYou can't merge,",
    "start": "1814555",
    "end": "1824333"
  },
  {
    "text": "exactly.\nSo, if I have N pieces, you can't merge in cache.\nI mean, so in order to merge in",
    "start": "1824333",
    "end": "1833968"
  },
  {
    "text": "cache, what I need is to be able\nto store an entire block from each of the lists that I'm\nmerging.",
    "start": "1833968",
    "end": "1840000"
  },
  {
    "text": "If I can store an entire block\nin cache for each of the lists, then it's a bunch of parallel\nscans.",
    "start": "1840000",
    "end": "1846095"
  },
  {
    "text": "So this is like testing the\nlimit of parallel scanning technology.\nIf you have K parallel scans,",
    "start": "1846095",
    "end": "1852000"
  },
  {
    "text": "and you can fit K blocks in\ncache, then all is well because you can scan through each of\nthose K arrays,",
    "start": "1852000",
    "end": "1858412"
  },
  {
    "text": "and have one block from each of\nthe K arrays in cache at the same time.\nSo, that's the idea.",
    "start": "1858412",
    "end": "1865940"
  },
  {
    "text": "Now, how many blocks can I fit\nin cache? M over B.\nThat's the biggest I could do.",
    "start": "1865940",
    "end": "1873507"
  },
  {
    "text": "So this will give the best\nrunning time among these kinds",
    "start": "1873507",
    "end": "1878940"
  },
  {
    "text": "of merge sort algorithms.\nThis is an M over B way merge",
    "start": "1878940",
    "end": "1884179"
  },
  {
    "text": "sort.\nOK, so now we get somewhat better recurrence.\nWe split into M over B",
    "start": "1884179",
    "end": "1891903"
  },
  {
    "text": "subproblems now,\neach of size, well, it's N divided by M over\nB without thinking.",
    "start": "1891903",
    "end": "1898653"
  },
  {
    "text": "And, the claim is that the\nmerge time is still linear because we have barely enough,\nOK, maybe I should describe",
    "start": "1898653",
    "end": "1908086"
  },
  {
    "text": "this algorithm.\nSo, we divide, because we've never really done\nnon-binary merge sort.",
    "start": "1908086",
    "end": "1915182"
  },
  {
    "text": "We divide into M over B equal\nsize subarrays instead of two.",
    "start": "1915182",
    "end": "1920288"
  },
  {
    "text": "Here, we are clearly doing a\ncache aware algorithm.",
    "start": "1920288",
    "end": "1926000"
  },
  {
    "text": "We are assuming we know what M\nover B is.",
    "start": "1926000",
    "end": "1931502"
  },
  {
    "text": "So, then we recursively sort\neach subarray,",
    "start": "1931502",
    "end": "1937279"
  },
  {
    "text": "and then we conquer.\nWe merge. And, the reason merge works is\nbecause we can afford one block",
    "start": "1937280",
    "end": "1949661"
  },
  {
    "text": "in cache.\nSo, let's call it one cache block per subarray.\nOK, actually,",
    "start": "1949661",
    "end": "1956773"
  },
  {
    "text": "if you're careful,\nyou also need one block for the output of the merged array\nbefore you write it out.",
    "start": "1956773",
    "end": "1964783"
  },
  {
    "text": "So, it should be M over B minus\none. But, let's ignore some additive\nconstants.",
    "start": "1964783",
    "end": "1970932"
  },
  {
    "text": "OK, so this is the recurrence\nwe get. The base case is the same.\nAnd, what improves here?",
    "start": "1970932",
    "end": "1979032"
  },
  {
    "text": "I mean, the per level cost\ndoesn't change, I claim, because at the top we\nget N over B.",
    "start": "1979032",
    "end": "1986144"
  },
  {
    "text": "This does before.\nThen we split into M over B subproblems, each of which costs\na one over M over B factor times",
    "start": "1986144",
    "end": "1995288"
  },
  {
    "text": "N over B.\nOK, so you add all those up, you still get N over B because\nwe are not decreasing the number",
    "start": "1995288",
    "end": "2003670"
  },
  {
    "text": "of elements.\nWe're just splitting them. There's now M over B\nsubproblems, each of one over M",
    "start": "2003670",
    "end": "2011205"
  },
  {
    "text": "over B the size.\nSo, just like before, each level will sum to N over\nB.",
    "start": "2011205",
    "end": "2019333"
  },
  {
    "text": "What changes is the number of\nlevels because now we have",
    "start": "2019333",
    "end": "2024974"
  },
  {
    "text": "bigger branching factor.\nInstead of log base two, it's now log base the branching\nfactor.",
    "start": "2024974",
    "end": "2033794"
  },
  {
    "text": "So, the height of this tree is\nlog base M over B of N over M,",
    "start": "2033794",
    "end": "2039948"
  },
  {
    "text": "I believe.\nLet me make sure that agrees with me.\nYeah.",
    "start": "2039948",
    "end": "2046616"
  },
  {
    "text": "OK, and if you're careful,\nthis counts not quite the",
    "start": "2046616",
    "end": "2052899"
  },
  {
    "text": "number of levels,\nbut the number of levels minus",
    "start": "2052900",
    "end": "2058690"
  },
  {
    "text": "one.\nSo, I'm going to one plus one here.\nAnd the reason why is this is",
    "start": "2058691",
    "end": "2066947"
  },
  {
    "text": "not quite the bound that I want.\nSo, we have log base M over B.",
    "start": "2066947",
    "end": "2077714"
  },
  {
    "text": "What I really want,\nactually, is N over B.",
    "start": "2077714",
    "end": "2085523"
  },
  {
    "text": "I claim that these are the same\nbecause we have minus,",
    "start": "2085523",
    "end": "2095618"
  },
  {
    "text": "yeah, that's good.\nOK, this should come as rather",
    "start": "2095619",
    "end": "2101828"
  },
  {
    "text": "mysterious, but it's because I\nknow what the sorting bound should be as I'm doing this\narithmetic.",
    "start": "2101829",
    "end": "2107620"
  },
  {
    "text": "So, I'm taking log base M over\nB of N over M. I'm not changing the base of\nthe log. I'm just saying,\nwell, N over M,",
    "start": "2107621",
    "end": "2114390"
  },
  {
    "text": "that is N over B divided by M\nover B because then the B's cancel, and the M goes on the\nbottom.",
    "start": "2114390",
    "end": "2120000"
  },
  {
    "text": "So, if I do that in the logs,\nI get log of N over B minus log of M over B minus,\nbecause I'm dividing.",
    "start": "2120000",
    "end": "2126036"
  },
  {
    "text": "OK, now, log base M over B of M\nover B is one. So, these cancel,\nand I get log base M over B,",
    "start": "2126036",
    "end": "2133630"
  },
  {
    "text": "N over B, which is what I was\naiming for. Why?\nBecause that's the right bound",
    "start": "2133630",
    "end": "2139600"
  },
  {
    "text": "as it's normally written.\nOK, that's what we will be trying to get cache obliviously.\nSo, that's the height of the",
    "start": "2139601",
    "end": "2148557"
  },
  {
    "text": "search tree, and at each level\nwe are paying N over B memory transfers.\nSo, the overall number of",
    "start": "2148557",
    "end": "2156140"
  },
  {
    "text": "memory transfers for this M over\nB way merge sort is the sorting",
    "start": "2156141",
    "end": "2161224"
  },
  {
    "text": "bound.",
    "start": "2161224",
    "end": "2163000"
  },
  {
    "text": "This is, I'll put it in a box.\nThis is the sorting bound,",
    "start": "2173000",
    "end": "2179109"
  },
  {
    "text": "and it's very special because\nit is the optimal number of",
    "start": "2179109",
    "end": "2185217"
  },
  {
    "text": "memory transfers for sorting N\nitems cache aware.",
    "start": "2185218",
    "end": "2191000"
  },
  {
    "text": "This has been known since,\nlike, 1983. OK, this is the best thing to\ndo. It's a really weird bound,\nbut if you ignore all the",
    "start": "2191000",
    "end": "2198837"
  },
  {
    "text": "divided by B's,\nit's sort of like N times log base M of N.\nSo, that's little bit more",
    "start": "2198837",
    "end": "2204192"
  },
  {
    "text": "reasonable.\nBut, there's lots of divided by B's.\nSo, the number of the blocks in",
    "start": "2204193",
    "end": "2209222"
  },
  {
    "text": "the input times log base the\nnumber of blocks in the cache of the number of blocks in the\ninput.",
    "start": "2209222",
    "end": "2215297"
  },
  {
    "text": "That's a little bit more\nintuitive. That is the bound.\nAnd that's what we are aiming",
    "start": "2215297",
    "end": "2222327"
  },
  {
    "text": "for.\nSo, this algorithm, crucially, assume that we knew\nwhat M over B was.",
    "start": "2222327",
    "end": "2228027"
  },
  {
    "text": "Now, we are going to try and do\nit without knowing M over B, do it cache obliviously.\nAnd that is the result of only",
    "start": "2228027",
    "end": "2237098"
  },
  {
    "text": "a few years ago.\nAre you ready? Everything clear so far?\nIt's a pretty natural",
    "start": "2237098",
    "end": "2243119"
  },
  {
    "text": "algorithm.\nWe were going to try to mimic it essentially and do a merge\nsort, but not M over B way merge",
    "start": "2243119",
    "end": "2251146"
  },
  {
    "text": "sort because we don't know how.\nWe're going to try and do it",
    "start": "2251146",
    "end": "2256846"
  },
  {
    "text": "essentially a square root of N\nway merge sort. If you play around,\nthat's the natural thing to do.",
    "start": "2256846",
    "end": "2263113"
  },
  {
    "text": "The tricky part is that it's\nhard to merge square root of N lists at the same time,\nin a cache efficient way.",
    "start": "2263113",
    "end": "2270105"
  },
  {
    "text": "We know that if the square root\nof N is bigger than M over B, you're hosed if you just do a\nstraightforward merge.",
    "start": "2270105",
    "end": "2277427"
  },
  {
    "text": "So, we need a fancy merge.\nWe are going to do a divide and",
    "start": "2277427",
    "end": "2282485"
  },
  {
    "text": "conquer merge.\nIt's a lot like the multithreaded algorithms of last\nweek, try and do a divide and",
    "start": "2282485",
    "end": "2290022"
  },
  {
    "text": "conquer merge so that no matter\nhow many lists are merging, as long as it's less than the\nsquare root of N,",
    "start": "2290022",
    "end": "2298360"
  },
  {
    "text": "or actually cubed root of N,\nwe can do it cache efficiently, OK?\nSo, we'll do this,",
    "start": "2298360",
    "end": "2304775"
  },
  {
    "text": "we need a bit of setup.\nBut that's where we're going, cache oblivious sorting.\nSo, we want to get the sorting",
    "start": "2304775",
    "end": "2313273"
  },
  {
    "text": "bound, and, yeah.\nIt turns out, to do cache oblivious sorting,\nyou need an assumption about",
    "start": "2313273",
    "end": "2320449"
  },
  {
    "text": "the cache size.\nThis is kind of annoying, because we said,\nwell, cache oblivious algorithms should work for all\nvalues of B and all values of M.",
    "start": "2320449",
    "end": "2329159"
  },
  {
    "text": "But, you can actually prove you\nneed an additional assumption in order to get this bound cache\nobliviously.",
    "start": "2329159",
    "end": "2335676"
  },
  {
    "text": "That's the result of,\nlike, last year by Garrett Brodel.\nSo, and the assumption is,",
    "start": "2335676",
    "end": "2341825"
  },
  {
    "text": "well, the assumption is fairly\nweak. That's the good news.\nOK, we've actually made an",
    "start": "2341825",
    "end": "2347582"
  },
  {
    "text": "assumption several times.\nWe said, well, assuming the cache can store at\nleast three blocks,",
    "start": "2347582",
    "end": "2353831"
  },
  {
    "text": "or assuming the cache can store\nat least four blocks, yeah, it's reasonable to say\nthe cache can store at least",
    "start": "2353831",
    "end": "2361413"
  },
  {
    "text": "four blocks, or at least any\nconstant number of blocks. This is that the number of\nblocks that your cache can store",
    "start": "2361414",
    "end": "2369278"
  },
  {
    "text": "is at least B to the epsilon\nblocks. This is saying your cache\nisn't, like, really narrow.",
    "start": "2369278",
    "end": "2376035"
  },
  {
    "text": "It's about as tall as it is\nwide. This actually gives you a lot\nof sloth. And, we're going to use a\nsimple version of this",
    "start": "2376035",
    "end": "2382863"
  },
  {
    "text": "assumption that M is at least\nB^2. OK, this is pretty natural.\nIt's saying that your cache is",
    "start": "2382863",
    "end": "2388116"
  },
  {
    "text": "at least as tall as it is wide\nwhere these are the blocks. OK, the number of blocks is it\nleast the size of a block.",
    "start": "2388116",
    "end": "2394712"
  },
  {
    "text": "That's a pretty reasonable\nassumption, and if you look at caches these days,\nthey all satisfy this,",
    "start": "2394712",
    "end": "2400315"
  },
  {
    "text": "at least for some epsilon.\nPretty much universally, M is at least B^2 or so.\nOK, and in fact,",
    "start": "2400315",
    "end": "2408112"
  },
  {
    "text": "if you think from our speed of\nlight arguments from last time, B^2 or B^3 is actually the\nright thing to do.",
    "start": "2408112",
    "end": "2416501"
  },
  {
    "text": "As you go out,\nI guess in 3-D, B^2 would be the surface area\nof the sphere out there.",
    "start": "2416501",
    "end": "2423052"
  },
  {
    "text": "OK, so this is actually the\nnatural thing of how much space you should have at a particular\ndistance.",
    "start": "2423052",
    "end": "2432000"
  },
  {
    "text": "Assuming we live in a constant\ndimensional space, that assumption would be true.\nThis even allows going up to 42",
    "start": "2432000",
    "end": "2440094"
  },
  {
    "text": "dimensions or whatever,\nOK, so a pretty reasonable assumption.\nGood. Now, we are going to achieve\nthis bound.",
    "start": "2440094",
    "end": "2447816"
  },
  {
    "text": "And what we are going to try to\ndo is use an N to the epsilon way merge sort for some epsilon.\nAnd, if we assume that M is at",
    "start": "2447816",
    "end": "2456876"
  },
  {
    "text": "least B^2, the epsilon will be\none third, it turns out.",
    "start": "2456876",
    "end": "2462000"
  },
  {
    "text": "So, we are going to do the\ncubed root of N way merge sort.",
    "start": "2462000",
    "end": "2468677"
  },
  {
    "text": "I'll start by giving you and\nanalyzing the sorting",
    "start": "2468677",
    "end": "2474418"
  },
  {
    "text": "algorithms, assuming that we\nknow how to do merge in a",
    "start": "2474418",
    "end": "2480627"
  },
  {
    "text": "particular bound.\nOK, then we'll do the merge.",
    "start": "2480627",
    "end": "2485899"
  },
  {
    "text": "The merge is the hard part.\nOK, so the merge,",
    "start": "2485899",
    "end": "2491121"
  },
  {
    "text": "I'm going to give you the black\nbox first of all. First of all,\nwhat does merge do?",
    "start": "2491122",
    "end": "2496407"
  },
  {
    "text": "The K way merger is called the\nK funnel just because it looks like a funnel,\nwhich you'll see.",
    "start": "2496407",
    "end": "2502418"
  },
  {
    "text": "So, a K funnel is a data\nstructure, or is an algorithm, let's say, that looks like a\ndata structure.",
    "start": "2502418",
    "end": "2508825"
  },
  {
    "text": "And it merges K sorted lists.\nSo, supposing you already have K lists, and they're sorted,\nand assuming that the lists are",
    "start": "2508825",
    "end": "2516619"
  },
  {
    "text": "relatively long,\nso we need some additional assumptions for this black box\nto work, and we'll be able to",
    "start": "2516620",
    "end": "2523291"
  },
  {
    "text": "get them as we sort.\nWe want the total size of those",
    "start": "2523291",
    "end": "2529099"
  },
  {
    "text": "lists.\nYou add up all the elements, and all the lists should have\nsize at least K^3 is the",
    "start": "2529099",
    "end": "2537800"
  },
  {
    "text": "assumption.\nThen, it merges these lists using essentially the sorting\nbound.",
    "start": "2537800",
    "end": "2545099"
  },
  {
    "text": "Actually, I should really say\ntheta K^3. I also don't want to be too\nmuch bigger than K^3.",
    "start": "2545099",
    "end": "2556572"
  },
  {
    "text": "Sorry about that.\nSo, the number of memory",
    "start": "2556572",
    "end": "2562186"
  },
  {
    "text": "transfers that this funnel\nmerger uses is the sorting bound",
    "start": "2562186",
    "end": "2570128"
  },
  {
    "text": "on K^3, so K^3 over B,\nlog base M over B of K^3 over",
    "start": "2570128",
    "end": "2577111"
  },
  {
    "text": "B, plus another K memory\ntransfers.",
    "start": "2577112",
    "end": "2583000"
  },
  {
    "text": "Now, K memory transfers is\npretty reasonable. You've got to at least start\nreading each list,",
    "start": "2583000",
    "end": "2589324"
  },
  {
    "text": "so you got to pay one memory\ntransfer per list. OK, but our challenge in some\nsense will be getting rid of",
    "start": "2589324",
    "end": "2596562"
  },
  {
    "text": "this plus K.\nThis is how fast we can merge. We'll do that after.\nNow, assuming we have this,",
    "start": "2596562",
    "end": "2602816"
  },
  {
    "text": "let me tell you how to sort.\nThis is, eventually enough, called funnel sort.\nBut in a certain sense,",
    "start": "2602816",
    "end": "2611806"
  },
  {
    "text": "it's really cubed root of N way\nmerge sort.",
    "start": "2611806",
    "end": "2616932"
  },
  {
    "text": "OK, but we'll analyze it using\nthis. OK, so funnel sort,\nwe are going to define K to be",
    "start": "2616932",
    "end": "2627182"
  },
  {
    "text": "N to the one third,\nand apply this merger.",
    "start": "2627183",
    "end": "2632186"
  },
  {
    "text": "So, what do we do?\nIt's just like here. We're going to divide our array\ninto N to the one third.",
    "start": "2632186",
    "end": "2645000"
  },
  {
    "text": "I mean, it they should be\nconsecutive subarrays. I'll call them segments of the\narray.",
    "start": "2645000",
    "end": "2653040"
  },
  {
    "text": "OK, for cache oblivious,\nit's really crucial how these",
    "start": "2653040",
    "end": "2658175"
  },
  {
    "text": "things are laid out.\nWe're going to cut and get consecutive chunks of the array,\nN to the one third of them.",
    "start": "2658175",
    "end": "2668346"
  },
  {
    "text": "Then I'm going to recursively\nsort them, and then I'm going to",
    "start": "2668346",
    "end": "2674255"
  },
  {
    "text": "merge.\nOK, and I'm going to merge using the K funnel,\nthe N to the one third funnel",
    "start": "2674256",
    "end": "2681354"
  },
  {
    "text": "because, now,\nwhy do I use one third? Well, because of this three.\nOK, in order to use the N to",
    "start": "2681354",
    "end": "2688010"
  },
  {
    "text": "the one third funnel,\nI need to guarantee that the total number of elements that\nI'm merging is at least the cube",
    "start": "2688010",
    "end": "2695968"
  },
  {
    "text": "of this number,\nK^3. The cube of this number is N.\nThat's exactly how many",
    "start": "2695968",
    "end": "2701105"
  },
  {
    "text": "elements I have in total.\nOK, so this is exactly what I can apply the funnel.\nIt's going to require that I",
    "start": "2701105",
    "end": "2708415"
  },
  {
    "text": "have it least K^3 elements,\nso that I can only use an N to the one third funnel.\nI mean, if it didn't have this",
    "start": "2708415",
    "end": "2714528"
  },
  {
    "text": "requirement, I could just say,\nwell, I have N lists each of size one.\nOK, that's clearly not going to",
    "start": "2714528",
    "end": "2720075"
  },
  {
    "text": "work very well for our merger,\nI mean, intuitively because this plus K will kill you.\nThat will be a plus M which is",
    "start": "2720075",
    "end": "2726471"
  },
  {
    "text": "way too big.\nBut we can use an N to the one third funnel,\nand this is how we would sort.",
    "start": "2726471",
    "end": "2735057"
  },
  {
    "text": "So, let's analyze this\nalgorithm. Hopefully, it will give the\nsorting bound if I did",
    "start": "2735057",
    "end": "2742888"
  },
  {
    "text": "everything correctly.\nOK, this is pretty easy. The only thing that makes this\nmessy as I have to write the",
    "start": "2742888",
    "end": "2752845"
  },
  {
    "text": "sorting bound over and over.\nOK, this is the cost of the",
    "start": "2752845",
    "end": "2758163"
  },
  {
    "text": "merge.\nSo that's at the root. But K^3 in this case is N.\nSo at the root of the",
    "start": "2758163",
    "end": "2767308"
  },
  {
    "text": "recursion, let me write the\nrecurrence first. Sorry.\nSo, we have memory transfers on",
    "start": "2767308",
    "end": "2775887"
  },
  {
    "text": "N elements is N to the one\nthird. Let me get this right.\nYeah, N to the one third",
    "start": "2775887",
    "end": "2784149"
  },
  {
    "text": "recursions, each of size N to\nthe two thirds, OK, plus this time,\nexcept K^3 is N.",
    "start": "2784149",
    "end": "2794000"
  },
  {
    "text": "So, this is plus N over B,\nlog base M over B of N over B",
    "start": "2794000",
    "end": "2800589"
  },
  {
    "text": "plus cubed root of M.\nThis is additive plus K term.",
    "start": "2800589",
    "end": "2806580"
  },
  {
    "text": "OK, so that's my recurrence.\nThe base case will be the",
    "start": "2806580",
    "end": "2812930"
  },
  {
    "text": "usual.\nMT is some constant times M is order M over B.\nSo, we sort of know what we",
    "start": "2812930",
    "end": "2822715"
  },
  {
    "text": "should get here.\nWell, not really. So, in all the previous\nrecurrence is,",
    "start": "2822716",
    "end": "2829758"
  },
  {
    "text": "we have the same costs at every\nlevel, and that's where we got",
    "start": "2829759",
    "end": "2835896"
  },
  {
    "text": "our log factor.\nNow, we already have a log factor, so we better not get\nanother one.",
    "start": "2835896",
    "end": "2844045"
  },
  {
    "text": "Right, this is the bound we\nwant to prove. So, let me cheat here for a\nsecond.",
    "start": "2844045",
    "end": "2853000"
  },
  {
    "text": "All right, indeed.\nYou may already be wondering, this N to the one third seems\nrather large.",
    "start": "2853000",
    "end": "2859284"
  },
  {
    "text": "If it's bigger than this,\nwe are already in trouble at the very top level of the\nrecursion.",
    "start": "2859284",
    "end": "2865498"
  },
  {
    "text": "So, I claim that that's OK.\nLet's look at N to the one third.\nOK, there is a base case here",
    "start": "2865498",
    "end": "2871712"
  },
  {
    "text": "which covers all values of N\nthat are, at most, some constant times N.\nSo, if I'm in this case,",
    "start": "2871712",
    "end": "2878209"
  },
  {
    "text": "I know that N is at least as\nbig as the cache up to some constant.\nOK, now the cache is it least",
    "start": "2878209",
    "end": "2886348"
  },
  {
    "text": "B^2, we've assumed.\nAnd you can do this with B to the one plus epsilon if you're\nmore careful.",
    "start": "2886348",
    "end": "2893719"
  },
  {
    "text": "So, N is at least B^2,\nOK? And then, I always have trouble\nwith these.",
    "start": "2893719",
    "end": "2899146"
  },
  {
    "text": "So this means that N divided by\nB is omega root N. OK, there's many things you\ncould say here,",
    "start": "2899146",
    "end": "2906517"
  },
  {
    "text": "and only one of them is right.\nSo, why? So this says that the square\nroot of N is at least B,",
    "start": "2906517",
    "end": "2914465"
  },
  {
    "text": "and so N divided by B is at\nmost N divided by square root of N.\nSo that's at least the square",
    "start": "2914465",
    "end": "2921161"
  },
  {
    "text": "root of N if you check that all\nout. I'm going to go through this\narithmetic relatively quickly",
    "start": "2921162",
    "end": "2928009"
  },
  {
    "text": "because it's tedious but\nnecessary. OK, the square root of N is\nstrictly bigger than cubed root",
    "start": "2928009",
    "end": "2934855"
  },
  {
    "text": "of N.\nOK, so that means that N over B is strictly bigger than N to the\none third.",
    "start": "2934855",
    "end": "2942000"
  },
  {
    "text": "Here we have N over B times\nsomething that's bigger than one.\nSo this term definitely",
    "start": "2942000",
    "end": "2947885"
  },
  {
    "text": "dominates this term in this\ncase. As long as I'm not in the base\ncase, I know N is at least order",
    "start": "2947885",
    "end": "2954630"
  },
  {
    "text": "M.\nThis term disappears from my recurrence.\nOK, so, good. That was a bit close.\nNow, what we want to get is",
    "start": "2954631",
    "end": "2961952"
  },
  {
    "text": "this running time overall.\nSo, the recursive cost better be small, better be less than\nthe constant factor increase",
    "start": "2961952",
    "end": "2969990"
  },
  {
    "text": "over this.\nSo, let's write the recurrence.",
    "start": "2969990",
    "end": "2975206"
  },
  {
    "text": "So, we get N over B,\nlog base M over B, N over B at the root.\nThen, we split into a lot of",
    "start": "2975206",
    "end": "2984206"
  },
  {
    "text": "subproblems, N to the one third\nsubproblems here, and each one costs essentially\nthis but with N replaced by N to",
    "start": "2984206",
    "end": "2995586"
  },
  {
    "text": "the two thirds.\nOK, so N to the two thirds log base M over B,\noops I forgot to divide it by B",
    "start": "2995586",
    "end": "3004896"
  },
  {
    "text": "out here, of N to the two thirds\ndivided by B.",
    "start": "3004896",
    "end": "3011000"
  },
  {
    "text": "That's the cost of one of these\nnodes, N to the one third of them.\nWhat should they add up to?",
    "start": "3011000",
    "end": "3017014"
  },
  {
    "text": "Well, there is N to the one\nthird, and there's an N to the two thirds here that multiplies\nout to N.",
    "start": "3017014",
    "end": "3023425"
  },
  {
    "text": "So, we get N over B.\nThis looks bad. This looks the same.\nAnd we don't want to lose",
    "start": "3023425",
    "end": "3028712"
  },
  {
    "text": "another log factor.\nBut the good news is we have two thirds in here.\nOK, this is what we get in",
    "start": "3028712",
    "end": "3035685"
  },
  {
    "text": "total at this level.\nIt looks like the sorting bound, but in the log there's\nstill a two thirds.",
    "start": "3035685",
    "end": "3041715"
  },
  {
    "text": "Now, a power of two thirds and\na log comes out as a multiple of two thirds.\nSo, this is in fact two thirds",
    "start": "3041715",
    "end": "3048394"
  },
  {
    "text": "times N over B,\nlog base M over B of N over B, the sorting bound.\nSo, this is two thirds of the",
    "start": "3048394",
    "end": "3054359"
  },
  {
    "text": "sorting bound.\nAnd this is the sorting bound, one times the sorting bound.\nSo, it's going down",
    "start": "3054359",
    "end": "3061295"
  },
  {
    "text": "geometrically,\nyea! OK, I'm not going to prove it,\nbut it's true. This went down by a factor of\ntwo thirds.",
    "start": "3061295",
    "end": "3068250"
  },
  {
    "text": "The next one will also go down\nby a factor of two thirds by induction.\nOK, if you prove it at one",
    "start": "3068250",
    "end": "3074659"
  },
  {
    "text": "level, it should be true at all\nof them. And I'm going to skip the\ndetails there.",
    "start": "3074659",
    "end": "3079977"
  },
  {
    "text": "So, we could check the leaf\nlevel just to make sure. That's always a good sanity\ncheck.",
    "start": "3079977",
    "end": "3085704"
  },
  {
    "text": "At the leaves,\nwe know our cost is M over B. OK, and how many leaves are\nthere?",
    "start": "3085704",
    "end": "3092367"
  },
  {
    "text": "Just like before,\nin some sense, we have N/M leaves.\nOK, so in fact the total cost",
    "start": "3092367",
    "end": "3098033"
  },
  {
    "text": "at the bottom is N over B.\nAnd it turns out that that's what you get.\nSo, you essentially,",
    "start": "3098033",
    "end": "3104274"
  },
  {
    "text": "it looks funny,\nbecause you'd think that this would actually be smaller than\nthis at some intuitive level.",
    "start": "3104274",
    "end": "3111661"
  },
  {
    "text": "It's not.\nIn fact, what's happening is you have this N over B times\nthis log thing,",
    "start": "3111662",
    "end": "3117400"
  },
  {
    "text": "whatever the log thing is.\nWe don't care too much. Let's just call it log.\nWhat you are taking at the next",
    "start": "3117400",
    "end": "3125950"
  },
  {
    "text": "level is two thirds times that\nlog. And at the next level,\nit's four ninths times that log",
    "start": "3125950",
    "end": "3131424"
  },
  {
    "text": "and so on.\nSo, it's geometrically decreasing until the log gets\ndown to one. And then you stop the\nrecursion.",
    "start": "3131424",
    "end": "3137968"
  },
  {
    "text": "And that's what you get N over\nB here with no log. So, what you're doing is\ndecreasing the log,",
    "start": "3137968",
    "end": "3143757"
  },
  {
    "text": "not the N over B stuff.\nThe two thirds should really be over here.\nIn fact, the number of levels",
    "start": "3143757",
    "end": "3149608"
  },
  {
    "text": "here is log, log N.\nIt's the number of times you have to divide a log by three\nhalves before you get down to",
    "start": "3149608",
    "end": "3159796"
  },
  {
    "text": "one, OK?\nSo, we don't actually need that.\nWe don't care how many levels",
    "start": "3159796",
    "end": "3165960"
  },
  {
    "text": "are because it's geometrically\ndecreasing. It could be infinitely many\nlevels.",
    "start": "3165960",
    "end": "3172759"
  },
  {
    "start": "3169000",
    "end": "3259000"
  },
  {
    "text": "It's geometrically decreasing,\nand we get this as our running",
    "start": "3172759",
    "end": "3178198"
  },
  {
    "text": "time.\nMT of N is the sorting bound for funnel sort.\nSo, this is great.",
    "start": "3178198",
    "end": "3185456"
  },
  {
    "text": "As long as we can get a funnel\nthat merges this quickly, we get a sorting algorithm that\nsorts as fast as it possibly",
    "start": "3185456",
    "end": "3194682"
  },
  {
    "text": "can.\nI didn't write that on the board that this is\nasymptotically optimal.",
    "start": "3194682",
    "end": "3200427"
  },
  {
    "text": "Even if you knew what B and M\nwere, this is the best that you could hope to do.\nAnd here, we are doing it no",
    "start": "3200427",
    "end": "3208924"
  },
  {
    "text": "matter what, B and M are.\nGood. Get ready for the funnel.\nThe funnel will be another",
    "start": "3208924",
    "end": "3215552"
  },
  {
    "text": "recursion.\nSo, this is a recursive algorithm in a recursive\nalgorithm. It's another divide and\nconquer, kind of like the static",
    "start": "3215552",
    "end": "3223291"
  },
  {
    "text": "search trees we saw at the\nbeginning of this lecture. So, these all tie together.",
    "start": "3223291",
    "end": "3229000"
  },
  {
    "text": "All right, the K funnel,\nso, I'm calling it K funnel because I want to think of it at\nsome recursive level,",
    "start": "3243000",
    "end": "3250672"
  },
  {
    "text": "not just N to the one third.\nOK, we're going to recursively use, in fact,\nthe square root of K funnel.",
    "start": "3250672",
    "end": "3257974"
  },
  {
    "text": "So, here's, and I need to\nachieve that bound. So, the recursion is like the\nstatic search tree,",
    "start": "3257975",
    "end": "3264762"
  },
  {
    "start": "3259000",
    "end": "3454000"
  },
  {
    "text": "and a little bit hard to draw\non one board, but here we go.\nSo, we have a square root of K",
    "start": "3264762",
    "end": "3274304"
  },
  {
    "text": "funnel.\nRecursively, we have a buffer up here.\nThis is called the output",
    "start": "3274304",
    "end": "3284204"
  },
  {
    "text": "buffer, and it has size K^3,\nand just for kicks,",
    "start": "3284204",
    "end": "3290947"
  },
  {
    "text": "let's suppose it that filled up\na little bit.",
    "start": "3290947",
    "end": "3297260"
  },
  {
    "text": "And, we have some more buffers.\nAnd, let's suppose they've been",
    "start": "3297260",
    "end": "3306598"
  },
  {
    "text": "filled up by different amounts.\nAnd each of these has size K to",
    "start": "3306598",
    "end": "3313796"
  },
  {
    "text": "the three halves,\nof course. Halves, these are called\nbuffers, let's say,",
    "start": "3313796",
    "end": "3321922"
  },
  {
    "text": "with the intermediate buffers.\nAnd, then hanging off of them,",
    "start": "3321923",
    "end": "3328889"
  },
  {
    "text": "we have more funnels,\nthe square root of K funnel",
    "start": "3328889",
    "end": "3334461"
  },
  {
    "text": "here, and a square root of K\nfunnel here, one for each",
    "start": "3334461",
    "end": "3340614"
  },
  {
    "text": "buffer, one for each child of\nthis funnel.",
    "start": "3340614",
    "end": "3347000"
  },
  {
    "text": "OK, and then hanging off of\nthese funnels are the input",
    "start": "3347000",
    "end": "3353000"
  },
  {
    "text": "arrays.",
    "start": "3353000",
    "end": "3354000"
  },
  {
    "text": "OK, I'm not going to draw all K\nof them, but there are K input",
    "start": "3367000",
    "end": "3372030"
  },
  {
    "text": "arrays, input lists let's call\nthem down at the bottom. OK, so the idea is we are going\nto merge bottom-up in this",
    "start": "3372030",
    "end": "3381184"
  },
  {
    "text": "picture.\nWe start with our K input arrays of total size at least\nK^3.",
    "start": "3381185",
    "end": "3386628"
  },
  {
    "text": "That's what we're assuming we\nhave up here. We are clustering them into\ngroups of size square root of K,",
    "start": "3386628",
    "end": "3394355"
  },
  {
    "text": "so, the square root of K\ngroups, throw each of them into a square root of K funnel that\nrecursively merges those square",
    "start": "3394355",
    "end": "3400953"
  },
  {
    "text": "root of K lists.\nThe output of those funnels we are putting into a buffer to\nsort of accumulate what the",
    "start": "3400954",
    "end": "3406699"
  },
  {
    "text": "answer should be.\nThese buffers have besides exactly K to the three halves,\nwhich might not be perfect",
    "start": "3406699",
    "end": "3412330"
  },
  {
    "text": "because we know that on average,\nthere should be K to the three halves elements in each of these\nbecause there's K^3 total,",
    "start": "3412330",
    "end": "3419155"
  },
  {
    "text": "and the square root of K\ngroups. So, it should be K^3 divided by\nthe square root of K,",
    "start": "3419155",
    "end": "3425017"
  },
  {
    "text": "which is K to the three halves\non average. But some of these will be\nbigger. Some of them will be smaller.\nI've drawn it here.",
    "start": "3425017",
    "end": "3432039"
  },
  {
    "text": "Some of them had emptied a bit\nmore depending on how you merge things.\nBut on average, these will all fill at the same\ntime.",
    "start": "3432040",
    "end": "3438946"
  },
  {
    "text": "And then, we plug them into a\nsquare root of K funnel, and that we get the output of\nsize K^3.",
    "start": "3438946",
    "end": "3444227"
  },
  {
    "text": "So, that is roughly what we\nshould have happen. OK, but in fact,\nsome of these might fill first,",
    "start": "3444227",
    "end": "3451866"
  },
  {
    "text": "and we have to do some merging\nin order to empty a buffer, make room for more stuff coming\nup.",
    "start": "3451866",
    "end": "3459352"
  },
  {
    "start": "3454000",
    "end": "3600000"
  },
  {
    "text": "That's the picture.\nNow, before I actually tell you what the algorithm is,\nor analyze the algorithm,",
    "start": "3459352",
    "end": "3467331"
  },
  {
    "text": "let's first just think about\nspace, a very simple warm-up analysis.\nSo, let's look at the space",
    "start": "3467331",
    "end": "3474899"
  },
  {
    "text": "excluding the inputs and\noutputs, those buffers.",
    "start": "3474899",
    "end": "3480000"
  },
  {
    "text": "OK, why do I want to exclude\ninput and output buffers? Well, because I want to only\ncount each buffer once,",
    "start": "3480000",
    "end": "3485766"
  },
  {
    "text": "and this buffer is actually the\ninput to this one and the output to this one.\nSo, in order to recursively",
    "start": "3485767",
    "end": "3491424"
  },
  {
    "text": "count all the buffers exactly\nonce, I'm only going to count these middle buffers.\nAnd then separately,",
    "start": "3491424",
    "end": "3496915"
  },
  {
    "text": "I'm going to have to think of\nthe overall output and input buffers.\nBut those are sort of given.",
    "start": "3496915",
    "end": "3502072"
  },
  {
    "text": "I mean, I need K^3 for the\noutput. I need K^3 for the input.\nSo ignore those overall. And that if I count the middle\nbuffers recursively,",
    "start": "3502072",
    "end": "3509393"
  },
  {
    "text": "I'll get all the buffers.\nSo, then we get a very simple",
    "start": "3509393",
    "end": "3514908"
  },
  {
    "text": "recurrence for space.\nS of K is roughly square root",
    "start": "3514908",
    "end": "3519924"
  },
  {
    "text": "of K plus one times S of square\nroot of K plus order K^2,",
    "start": "3519924",
    "end": "3525541"
  },
  {
    "text": "K^2 because we have the square\nroot of K of these buffers,",
    "start": "3525541",
    "end": "3531258"
  },
  {
    "text": "each of size K to the three\nhalves. Work that out,\ndoes that sound right?",
    "start": "3531258",
    "end": "3538279"
  },
  {
    "text": "That sounds an awful lot like\nK^3, but maybe, all right.\nOh, no, that's right.",
    "start": "3538279",
    "end": "3546377"
  },
  {
    "text": "It's K to the three halves\ntimes the square root of K, which is K to the three halves\nplus a half, which is K to the",
    "start": "3546377",
    "end": "3553786"
  },
  {
    "text": "four halves, which is K^2.\nPhew, OK, good. I'm just bad with my arithmetic\nhere.",
    "start": "3553786",
    "end": "3558836"
  },
  {
    "text": "OK, so K^2 total buffering\nhere. You add them up for each level,\neach recursion,",
    "start": "3558836",
    "end": "3563885"
  },
  {
    "text": "and the plus one here is to\ntake into account the top guy, the square root of K bottom\nguys, so the square root of K",
    "start": "3563885",
    "end": "3571295"
  },
  {
    "text": "plus one.\nIf this were, well, let me just draw the\nrecurrence tree.",
    "start": "3571295",
    "end": "3576382"
  },
  {
    "text": "There's many ways you could\nsolve this recurrence. A natural one is instead of\nlooking at K,",
    "start": "3576382",
    "end": "3581856"
  },
  {
    "text": "you look at log K,\nbecause here at log K is getting divided by two.\nI just going to draw the",
    "start": "3581856",
    "end": "3587330"
  },
  {
    "text": "recursion trees,\nso you can see the intuition. But if you are going to solve\nit, you should probably take the",
    "start": "3587330",
    "end": "3593849"
  },
  {
    "text": "logs, substitute by log.\nSo, we have the square root of K.\nplus one branching factor.",
    "start": "3593849",
    "end": "3600000"
  },
  {
    "text": "And then, the problem is size\nsquare root of K, so this is going to be K,\nI believe, for each of these.",
    "start": "3600000",
    "end": "3608108"
  },
  {
    "text": "This is square root of K\nsquared is the cost of these levels.\nAnd, you keep going.",
    "start": "3608108",
    "end": "3614513"
  },
  {
    "text": "I don't particularly care what\nthe bottom looks like because at",
    "start": "3614513",
    "end": "3619540"
  },
  {
    "text": "the top we have K^2.\nThat we have K times root K plus one cost at the next level.\nThis is K to the three halves",
    "start": "3619540",
    "end": "3628297"
  },
  {
    "text": "plus K.\nOK, so we go from K^2 to K to the three halves plus K.\nThis is a super-geometric.",
    "start": "3628297",
    "end": "3637257"
  },
  {
    "text": "It's like an exponential\ngeometric decrease. This is decreasing really fast.\nSo, it's order K^2.",
    "start": "3637257",
    "end": "3645800"
  },
  {
    "text": "That's my hand-waving argument.\nOK, so the cost is basically",
    "start": "3645800",
    "end": "3651220"
  },
  {
    "text": "the size of the buffers at the\ntop level, the total space.",
    "start": "3651220",
    "end": "3656456"
  },
  {
    "text": "We're going to need this.\nIt's actually theta K^2 because",
    "start": "3656456",
    "end": "3661601"
  },
  {
    "text": "I have a theta K^2 here.\nWe are going to be this in order to analyze the time.\nThat's why it mentioned it.",
    "start": "3661601",
    "end": "3669249"
  },
  {
    "text": "It's not just a good feeling\nthat the space is not too big. In fact, the funnel is a lot\nsmaller than a total input size.",
    "start": "3669249",
    "end": "3675595"
  },
  {
    "text": "The input size is K^3.\nBut that's not so crucial. What's crucial is that it's\nK^2, and we'll use that in the",
    "start": "3675595",
    "end": "3681243"
  },
  {
    "text": "analysis.\nOK, naturally, this thing is laid out\nrecursively. You recursively store the\nfunnel, top funnel.",
    "start": "3681243",
    "end": "3686675"
  },
  {
    "text": "Then, for example,\nyou write out each buffer as a consecutive array,\nin this case.",
    "start": "3686675",
    "end": "3692000"
  },
  {
    "text": "There's no recursion there.\nSo just write them all out one by one.\nDon't interleave them or anything.\nStore them in order.",
    "start": "3692000",
    "end": "3697641"
  },
  {
    "text": "And that, you write out\nrecursively these funnels, the bottom funnels.\nOK, any way you do it recursively, as long as each\nfunnel remains a consecutive",
    "start": "3697642",
    "end": "3704634"
  },
  {
    "text": "chunk of memory,\neach buffer remains a consecutive chuck of memory,\nthe time analysis that we are about to do will work.",
    "start": "3704634",
    "end": "3711000"
  },
  {
    "text": "OK, let me actually give you\nthe algorithm that we're analyzing.\nIn order to make the funnel go,",
    "start": "3734000",
    "end": "3741265"
  },
  {
    "text": "what we do is say,\ninitially, all the buffers are empty.\nEverything is at the bottom.",
    "start": "3741265",
    "end": "3747671"
  },
  {
    "text": "And what we are going to do is,\nsay, fill the root buffer. Fill this one.\nAnd, that's a recursive",
    "start": "3747671",
    "end": "3756040"
  },
  {
    "text": "algorithm, which I'll define in\na second, how to fill a buffer.",
    "start": "3756040",
    "end": "3761542"
  },
  {
    "text": "Once it's filled,\nthat means everything has been pulled up, and then it's merged.\nOK, so that's how we get",
    "start": "3761542",
    "end": "3770682"
  },
  {
    "text": "started.\nSo, merge means to merge algorithm is fill the topmost\nbuffer, the topmost output",
    "start": "3770682",
    "end": "3778401"
  },
  {
    "text": "buffer.\nOK, and now, here's how you fill a buffer.\nSo, in general,",
    "start": "3778402",
    "end": "3784678"
  },
  {
    "text": "if you expand out this\nrecursion all the way, in the base case,\nI didn't mention you sort of",
    "start": "3784678",
    "end": "3792114"
  },
  {
    "text": "get a little node there.\nSo, if you look at an arbitrary buffer in this picture that you\nwant to fill,",
    "start": "3792114",
    "end": "3800386"
  },
  {
    "text": "so this one's empty and you\nwant to fill it, then immediately below it will\nbe a vertex who has two",
    "start": "3800386",
    "end": "3808407"
  },
  {
    "text": "children, two other buffers.\nOK, maybe they look like this.",
    "start": "3808407",
    "end": "3814434"
  },
  {
    "text": "You have no idea how big they\nare, except they are the same size.\nIt could be a lot smaller than",
    "start": "3814434",
    "end": "3821981"
  },
  {
    "text": "this one, a lot bigger,\nwe don't know. But in the end,\nyou do get a binary structure",
    "start": "3821981",
    "end": "3828554"
  },
  {
    "text": "out of this just like we did\nwith the binary search tree at the beginning.\nSo, how do we fill this buffer?",
    "start": "3828554",
    "end": "3836913"
  },
  {
    "text": "Well, we just merge these two\nchild buffers as long as we can.",
    "start": "3836913",
    "end": "3843000"
  },
  {
    "text": "So, we merge the two children\nbuffers as long as they are both",
    "start": "3843000",
    "end": "3848854"
  },
  {
    "text": "non-empty.\nSo, in general, the invariant will be that this\nbuffer, let me write down a",
    "start": "3848854",
    "end": "3856819"
  },
  {
    "text": "sentence.\nAs long as a buffer is non-empty, or whatever is in\nthat buffer, and hasn't been",
    "start": "3856820",
    "end": "3865170"
  },
  {
    "text": "used already,\nit's a prefix of the merged output of the entire subtree\nbeneath it.",
    "start": "3865170",
    "end": "3874000"
  },
  {
    "text": "OK, so this is a partially\nmerged subsequence of everything down here.\nThis is a partially merged",
    "start": "3874000",
    "end": "3879781"
  },
  {
    "text": "subsequence of everything down\nhere. I can just merge element by\nelement off the top,",
    "start": "3879781",
    "end": "3884824"
  },
  {
    "text": "and that will give me outputs\nto put there until one of them gets emptied.\nAnd, we have no idea which one",
    "start": "3884824",
    "end": "3891097"
  },
  {
    "text": "will empty first just because it\ndepends on the order. OK, whenever one of them\nempties, we recursively fill it,",
    "start": "3891097",
    "end": "3897801"
  },
  {
    "text": "and that's it.\nThat's the algorithm. Whenever one empties --",
    "start": "3897801",
    "end": "3905000"
  },
  {
    "text": "-- we recursively fill it.\nAnd at the base case at the leaves, there's sort of nothing\nto do.",
    "start": "3916000",
    "end": "3923456"
  },
  {
    "text": "I believe you just sort of\ndirectly read from an input list.\nSo, at the very bottom,",
    "start": "3923456",
    "end": "3930167"
  },
  {
    "text": "if you have some note here\nthat's trying to merge between these two, that's just a\nstraightforward merge between",
    "start": "3930167",
    "end": "3939198"
  },
  {
    "text": "two lists.\nWe know how to do that with two parallel scans.\nSo, in fact,",
    "start": "3939198",
    "end": "3944832"
  },
  {
    "text": "we can merge the entire thing\nhere and just spit it out to the",
    "start": "3944832",
    "end": "3949886"
  },
  {
    "text": "buffer.\nWell, it depends how big the buffer is.\nWe can only merge it until the",
    "start": "3949886",
    "end": "3956099"
  },
  {
    "text": "buffer fills.\nWhenever a buffer is full,",
    "start": "3956100",
    "end": "3961445"
  },
  {
    "text": "we stop and we pop up the\nrecursive layers. OK, so we keep doing this merge\nuntil the buffer we are trying",
    "start": "3961445",
    "end": "3971131"
  },
  {
    "text": "to fill fills,\nand that we stop, pop up.\nOK, that's the algorithm for",
    "start": "3971131",
    "end": "3977338"
  },
  {
    "text": "merging.\nNow, we just have to analyze the algorithm.\nIt's actually not too hard,",
    "start": "3977338",
    "end": "3984579"
  },
  {
    "text": "but it's a pretty clever\nanalysis. And, to top it off,\nit's an amortization,",
    "start": "3984579",
    "end": "3991898"
  },
  {
    "text": "your favorite.\nOK, so we get one last practice at amortized analysis in the\ncontext of cache oblivious",
    "start": "3991898",
    "end": "3999072"
  },
  {
    "text": "algorithms.\nSo, this is going to be a bit sophisticated.\nWe are going to combine all the",
    "start": "3999072",
    "end": "4005231"
  },
  {
    "text": "ideas we've seen.\nThe main analysis idea we've seen is that we are doing this\nrecursion in the construction,",
    "start": "4005231",
    "end": "4012839"
  },
  {
    "text": "and if we imagine,\nwe take our K funnel, we split it in the middle\nlevel, make a whole bunch of",
    "start": "4012840",
    "end": "4019507"
  },
  {
    "text": "square root of K funnels,\nand so on, and then we cut those in the middle level,\nget fourth root of K funnels,",
    "start": "4019507",
    "end": "4027188"
  },
  {
    "text": "and so on, and so on,\nat some point the funnel we look at fits in cache.\nOK, before we said if it's in a",
    "start": "4027188",
    "end": "4035816"
  },
  {
    "text": "block.\nNow, we're going to say that at some point, one of these funnels\nwill fit in cache.",
    "start": "4035816",
    "end": "4040913"
  },
  {
    "text": "Each of the funnels at that\nrecursive level of detail will fit in cache.\nWe are going to analyze that",
    "start": "4040914",
    "end": "4046656"
  },
  {
    "text": "level.\nWe'll call that level J. So, consider the first\nrecursive level of detail,",
    "start": "4046656",
    "end": "4057266"
  },
  {
    "text": "and I'll call it J,\nat which every J funnel we have",
    "start": "4057266",
    "end": "4065877"
  },
  {
    "text": "fits, let's say,\nnot only does it fit in cache,",
    "start": "4065877",
    "end": "4073800"
  },
  {
    "text": "but four of them fit in cache.\nIt fits in one quarter of the",
    "start": "4073800",
    "end": "4082337"
  },
  {
    "text": "cache.\nOK, but we need to leave some cache extra for doing other\nthings.",
    "start": "4082337",
    "end": "4087899"
  },
  {
    "text": "But I want to make sure that\nthe J funnel fits. OK, now what does that mean?\nWell, we've analyzed space.",
    "start": "4087899",
    "end": "4096040"
  },
  {
    "text": "We know that the space of a J\nfunnel is about J^2, some constant times J^2.\nWe'll call it C times J^2.",
    "start": "4096040",
    "end": "4104019"
  },
  {
    "text": "OK, so this is saying that C\ntimes J^2 is at most, M over 4, one quarter of the\ncache.",
    "start": "4104020",
    "end": "4112000"
  },
  {
    "text": "OK, that means a J funnel that\nhappens at the size sits in the quarter of the cache.\nOK, at some point in the",
    "start": "4112000",
    "end": "4118803"
  },
  {
    "text": "recursion, we'll have this big\ntree of J funnels, with all sorts of buffers in\nbetween them,",
    "start": "4118803",
    "end": "4124514"
  },
  {
    "text": "and each of the J funnels will\nfit. So, let's think about one of\nthose J funnels.",
    "start": "4124515",
    "end": "4129521"
  },
  {
    "text": "Suppose J is like the square\nroot of K. So, this is the picture because\notherwise I have to draw a",
    "start": "4129521",
    "end": "4135619"
  },
  {
    "text": "bigger one.\nSo, suppose this is a J funnel. It has a bunch of input\nbuffers, has one output buffer.",
    "start": "4135619",
    "end": "4143000"
  },
  {
    "text": "So, we just want to think about\nhow the J funnel executes. And, for a long time,\nas long as these buffers are",
    "start": "4143000",
    "end": "4149258"
  },
  {
    "text": "all full, this is just a merger.\nIt's doing something recursively, but we don't really\ncare.",
    "start": "4149259",
    "end": "4154515"
  },
  {
    "text": "As soon as this whole thing\nswaps in, and actually, I should be drawing this,\nas soon as the funnel,",
    "start": "4154515",
    "end": "4160243"
  },
  {
    "text": "the output buffer,\nand the input buffer swap in, in other words,\nyou bring all those blocks in,",
    "start": "4160244",
    "end": "4165676"
  },
  {
    "text": "you can just merge,\nand you can go on your merry way merging until something\nempties or you fill the output.",
    "start": "4165677",
    "end": "4173000"
  },
  {
    "text": "So, let's analyze that.\nSuppose everything is in memory, because we know it fits.\nOK, well I have to be a little",
    "start": "4173000",
    "end": "4180707"
  },
  {
    "text": "bit careful.\nThe input buffers are actually pretty big in total size because\nthe total size is K to the three",
    "start": "4180707",
    "end": "4188201"
  },
  {
    "text": "halves here versus K to the one\nhalf. Actually, this is of size K.\nLet me draw a general picture.",
    "start": "4188202",
    "end": "4194848"
  },
  {
    "text": "We have a J funnel,\nbecause otherwise the arithmetic is going to get\nmessy.",
    "start": "4194848",
    "end": "4201000"
  },
  {
    "text": "We have a J funnel.\nIts size is C times J^2, we're supposing.\nThe number of inputs is J,",
    "start": "4201000",
    "end": "4208619"
  },
  {
    "text": "and the size of them is pretty\nbig. Where did we define that?\nWe have a K funnel.",
    "start": "4208619",
    "end": "4215610"
  },
  {
    "text": "The total input size is K^3.\nSo, the total input size here",
    "start": "4215610",
    "end": "4220719"
  },
  {
    "text": "would be J^3.\nWe can't afford to put all that in cache.\nThat's an extra factor of J.",
    "start": "4220719",
    "end": "4227980"
  },
  {
    "text": "But, we can afford to one block\nper input.",
    "start": "4227980",
    "end": "4233000"
  },
  {
    "text": "And for merging,\nthat's all we need. I claim that I can fit the\nfirst block of each of these",
    "start": "4233000",
    "end": "4238176"
  },
  {
    "text": "input arrays in cash at the same\ntime along with the J funnel. And so, for that duration,\nas long as all of that is in",
    "start": "4238176",
    "end": "4244864"
  },
  {
    "text": "cache, this thing can merge at\nfull speed just like we were doing parallel scans.\nYou use up all the blocks down",
    "start": "4244864",
    "end": "4251203"
  },
  {
    "text": "here, and one of them empties.\nYou go to the next block in the input buffer and so on,\njust like the normal merge",
    "start": "4251204",
    "end": "4257602"
  },
  {
    "text": "analysis of parallel arrays,\nat this point we assume that everything here is fitting in\ncache.",
    "start": "4257602",
    "end": "4264000"
  },
  {
    "text": "So, it's just like before.\nOf course, in fact, it's recursive but we are\nanalyzing it at this level.",
    "start": "4264000",
    "end": "4273668"
  },
  {
    "text": "OK, I need to prove that you\ncan fit one block per input.",
    "start": "4273668",
    "end": "4279250"
  },
  {
    "text": "It's not hard.\nIt's just computation. And, it's basically the way\nthat these funnels were designed",
    "start": "4279250",
    "end": "4288719"
  },
  {
    "text": "was so that you could fit one\nblock per input buffer.",
    "start": "4288720",
    "end": "4295000"
  },
  {
    "text": "And, here's the argument.\nSo, the claim is you can also",
    "start": "4295000",
    "end": "4301607"
  },
  {
    "text": "fit one memory block in the\ncache per input buffer.",
    "start": "4301607",
    "end": "4307725"
  },
  {
    "text": "So, this is in addition to one\nJ funnel. You could also fit one block\nfor each of its input buffers.",
    "start": "4307725",
    "end": "4319594"
  },
  {
    "text": "OK, this is of the J funnel.\nIt's not any funnel because",
    "start": "4319594",
    "end": "4326230"
  },
  {
    "text": "bigger funnels are way too big.\nOK, so here's how we prove that.\nJ^2 is at most a quarter M.",
    "start": "4326230",
    "end": "4333581"
  },
  {
    "text": "That's what we assumed here,\nactually CJ2. I'm not going to bother with\nthe C because that's going to",
    "start": "4333581",
    "end": "4341675"
  },
  {
    "text": "make my life even harder.\nOK, I think this is even a weaker constraint.\nSo, the size of our funnel",
    "start": "4341675",
    "end": "4349522"
  },
  {
    "text": "proves about J^2.\nThat's at most a quarter of the",
    "start": "4349522",
    "end": "4355110"
  },
  {
    "text": "cache.\nThat implies that J, if we take square roots of both\nsides, is at most a half square",
    "start": "4355110",
    "end": "4363941"
  },
  {
    "text": "root of M.\nOK, also, we know that B is at most square root of M because M\nis at least B squared.",
    "start": "4363941",
    "end": "4373273"
  },
  {
    "text": "So, we put these together,\nand we get J times B is at most",
    "start": "4373273",
    "end": "4378993"
  },
  {
    "text": "a half M.\nOK, now I claim that what we are asking for here is J times B\nbecause in a J funnel,",
    "start": "4378993",
    "end": "4385718"
  },
  {
    "text": "there are J input arrays.\nAnd so, if you want one block each, that costs a space of B\neach.",
    "start": "4385718",
    "end": "4390781"
  },
  {
    "text": "So, for each input buffer we\nhave one block of size B, and the claim is that that\nwhole thing fits in half the",
    "start": "4390781",
    "end": "4396938"
  },
  {
    "text": "cache.\nAnd, we've only used a quarter of the cache.\nSo in total, we use three quarters of the\ncache and that's all we'll use.",
    "start": "4396938",
    "end": "4403843"
  },
  {
    "text": "OK, so that's good news.\nWe can also fit one more block to the output.\nNot too big a deal.",
    "start": "4403843",
    "end": "4410000"
  },
  {
    "text": "So now, as long as this J\nfunnel is running, if it's all in cache,\nall is well.",
    "start": "4410000",
    "end": "4416011"
  },
  {
    "text": "What does that mean?\nLet me first analyze how long it takes for us to swap in this\nfunnel.",
    "start": "4416012",
    "end": "4422895"
  },
  {
    "text": "OK, so how long does it take\nfor us to read all the stuff in a J funnel and one block per\ninput buffer?",
    "start": "4422895",
    "end": "4430806"
  },
  {
    "text": "That's what it would take to\nget started. So, this is swapping in a J\nfunnel, which means reading the",
    "start": "4430806",
    "end": "4442344"
  },
  {
    "text": "J funnel in its entirety,\nand reading one block per input",
    "start": "4442344",
    "end": "4449435"
  },
  {
    "text": "buffer.\nOK, the cost of the swap in is pretty natural.\nThe size of the buffer divided",
    "start": "4449435",
    "end": "4459818"
  },
  {
    "text": "by B, because that's just sort\nof a linear scan to read it in,",
    "start": "4459818",
    "end": "4467542"
  },
  {
    "text": "and we need to read one block\nper buffer.",
    "start": "4467542",
    "end": "4474000"
  },
  {
    "text": "These buffers could be all over\nthe place because they're pretty big.\nSo, let's say we pay one memory",
    "start": "4474000",
    "end": "4480942"
  },
  {
    "text": "transfer for each input buffer\njust to get started to read the first block.\nOK, the claim is,",
    "start": "4480942",
    "end": "4487318"
  },
  {
    "text": "and here we need to do some\nmore arithmetic. This is, at most,\nJ^3 over B.",
    "start": "4487318",
    "end": "4492348"
  },
  {
    "text": "OK, why is it,\nat most, J^3 over B? Well, this was the first level\nat which things fit in cache.",
    "start": "4492348",
    "end": "4500000"
  },
  {
    "text": "That means the next level\nbigger, which is J^2, which has size J^4,\nshould be bigger than cache.",
    "start": "4500000",
    "end": "4508328"
  },
  {
    "text": "Otherwise we would have stopped\nthen. OK, so this is just more\narithmetic.",
    "start": "4508328",
    "end": "4514685"
  },
  {
    "text": "You can either believe me or\nfollow the arithmetic. We know that J^4 is at least M.\nSo, this means that,",
    "start": "4514686",
    "end": "4523731"
  },
  {
    "text": "and we know that M is at least\nB^2. Therefore, J^2,\ninstead of J^4,",
    "start": "4523731",
    "end": "4529462"
  },
  {
    "text": "we take the square root of both\nsides, J^2 is at least B.",
    "start": "4529462",
    "end": "4536000"
  },
  {
    "text": "OK, so certainly J^2 over B is\nat most J^3 over B. But also J is at most J^3 over\nB because J^2 is at least B.",
    "start": "4536000",
    "end": "4543379"
  },
  {
    "text": "Hopefully that should be clear.\nThat's just algebra. OK, so we're not going to use\nthis bound because that's kind",
    "start": "4543379",
    "end": "4550965"
  },
  {
    "text": "of complicated.\nWe're just going to say, well, it causes J^3 over B to\nget swapped in.",
    "start": "4550965",
    "end": "4556689"
  },
  {
    "text": "Now, why is J^3 over B a good\nthing? Because we know the total size\nof inputs to the J funnel is",
    "start": "4556689",
    "end": "4563972"
  },
  {
    "text": "J^3.\nSo, to read all of the inputs to the J funnel takes J^3 over\nB. So, this is really just a\nlinear extra cost to get the",
    "start": "4563972",
    "end": "4572053"
  },
  {
    "text": "whole thing swapped in.\nIt sounds good. To do the merging would also\ncost J^3 over B.",
    "start": "4572054",
    "end": "4577671"
  },
  {
    "text": "So, the swap-in causes J^3 over\nB to merge all these J^3 elements.\nIf they were all there in the",
    "start": "4577671",
    "end": "4584041"
  },
  {
    "text": "inputs, it would take J^3 over B\nbecause once everything is there, you're merging at full\nspeed, one per B items per",
    "start": "4584041",
    "end": "4591780"
  },
  {
    "text": "memory transfer on average.\nOK, the problem is you're going",
    "start": "4591780",
    "end": "4596859"
  },
  {
    "text": "to swap out, which you may have\nimagined. As soon as one of your input\nbuffers empties,",
    "start": "4596859",
    "end": "4601899"
  },
  {
    "text": "let's say this one's almost\ngone, as soon as it empties, you're going to totally\nobliterate that funnel and swap",
    "start": "4601899",
    "end": "4608439"
  },
  {
    "text": "in this one in order to merge\nall the stuff there, and fill this buffer back up.\nThis is where the amortization",
    "start": "4608439",
    "end": "4614920"
  },
  {
    "text": "comes in.\nAnd this is where the log factor comes in because so far\nit we've basically paid a linear",
    "start": "4614920",
    "end": "4620680"
  },
  {
    "text": "cost.\nWe are almost done.",
    "start": "4620680",
    "end": "4627034"
  },
  {
    "text": "So, we charge,\nsorry, I'm jumping ahead of",
    "start": "4627034",
    "end": "4637897"
  },
  {
    "text": "myself.\nSo, when an input buffer",
    "start": "4637897",
    "end": "4646111"
  },
  {
    "text": "empties, we swap out.\nAnd we recursively fill that",
    "start": "4646111",
    "end": "4655169"
  },
  {
    "text": "buffer.\nOK, I'm going to assume that there is absolutely no reuse,\nthat is recursive filling",
    "start": "4655169",
    "end": "4662065"
  },
  {
    "text": "completely swapped everything\nout and I have to start from scratch for this funnel.\nSo, when that happens,",
    "start": "4662065",
    "end": "4670046"
  },
  {
    "text": "I feel this buffer,\nand then I come back and I say, well, I go swap it back in.\nSo when the recursive call",
    "start": "4670046",
    "end": "4678026"
  },
  {
    "text": "finishes, I swap back in.\nOK, so I recursively fill, and then I swap back in.\nAnd, at the swapping back in",
    "start": "4678026",
    "end": "4688031"
  },
  {
    "text": "costs J^3 over B.\nI'm going to charge that cost to the elements that just got\nfilled.",
    "start": "4688031",
    "end": "4696910"
  },
  {
    "text": "So this is an amortized\ncharging argument.",
    "start": "4696910",
    "end": "4702000"
  },
  {
    "text": "How many are there?\nIt's the only question. It turns out,\nthings are really good,",
    "start": "4728000",
    "end": "4734169"
  },
  {
    "text": "like here, for the square root\nof K funnel, we have each buffer has size K to the three halves.\nOK, so this is a bit",
    "start": "4734169",
    "end": "4744063"
  },
  {
    "text": "complicated.\nBut I claim that the number of elements here that fill the\nbuffer is J^3.",
    "start": "4744063",
    "end": "4752624"
  },
  {
    "text": "So, if you have a J funnel,\neach of the input buffers has",
    "start": "4752624",
    "end": "4758401"
  },
  {
    "text": "size J^3.\nIt should be correct if you work it out.\nSo, we're charging this J^3",
    "start": "4758401",
    "end": "4766136"
  },
  {
    "text": "over B cost to J^3 elements,\nwhich sounds like you're",
    "start": "4766137",
    "end": "4771501"
  },
  {
    "text": "charging, essentially,\none over B to each element.",
    "start": "4771501",
    "end": "4778000"
  },
  {
    "text": "Sounds great.\nThat means that, so you're thinking overall,\nI mean, there are N elements,",
    "start": "4778000",
    "end": "4783718"
  },
  {
    "text": "and to each one you charge a\none over B cost. That sounds like the total\nrunning time is N over B.",
    "start": "4783718",
    "end": "4790110"
  },
  {
    "text": "It's a bit too fast for\nsorting. We lost the log factor.\nSo, what's going on is that",
    "start": "4790110",
    "end": "4795558"
  },
  {
    "text": "we're actually charging to one\nelement more than once. And, this is something that we\ndon't normally do,",
    "start": "4795559",
    "end": "4802729"
  },
  {
    "text": "never done it in this class,\nbut you can do it as long as you bound that the number of\ntimes you charge.",
    "start": "4802729",
    "end": "4808471"
  },
  {
    "text": "OK, and wherever you do a\ncharging argument, you say, well,\nthis doesn't happen too many times because whenever this\nhappens, this happens.",
    "start": "4808471",
    "end": "4816090"
  },
  {
    "text": "You should say,\nyou should prove that the thing that you're charging to,\nIto charged to that think very",
    "start": "4816090",
    "end": "4821775"
  },
  {
    "text": "many times.\nSo here, I have a quantifiable thing that I'm charging to:\nelements. So, I'm saying that for each\nelement that happened to come",
    "start": "4821775",
    "end": "4829394"
  },
  {
    "text": "into this buffer,\nI'm going to charge it a one over B cost.\nHow many times does one element",
    "start": "4829394",
    "end": "4835992"
  },
  {
    "text": "get charged?\nWell, each time it gets charged to, it's moved into a new\nbuffer. How many buffers could it move\nthrough?",
    "start": "4835992",
    "end": "4843254"
  },
  {
    "text": "Well, it's just going up all\nthe time. Merging always goes up.\nSo, we start here and you go to",
    "start": "4843254",
    "end": "4849102"
  },
  {
    "text": "the next buffer,\nand you go to the next buffer. The number of buffers you visit\nis the right log,",
    "start": "4849102",
    "end": "4855143"
  },
  {
    "text": "it turns out.\nI don't know which log that is. So, the number of charges of a\none over B cost to each element",
    "start": "4855143",
    "end": "4865199"
  },
  {
    "text": "is the number of buffers it\nvisits, and that's a log factor.",
    "start": "4865199",
    "end": "4871196"
  },
  {
    "text": "That's where we get an extra\nlog factor on the running time.",
    "start": "4871196",
    "end": "4877193"
  },
  {
    "text": "It is, this is the number of\nlevels of J funnels that you can",
    "start": "4877193",
    "end": "4883291"
  },
  {
    "text": "visit.\nSo, it's log K divided by log J, if I got it right.\nOK, and we're almost done.",
    "start": "4883291",
    "end": "4893228"
  },
  {
    "text": "Let's wrap up a bit.\nJust a little bit more",
    "start": "4893228",
    "end": "4898442"
  },
  {
    "text": "arithmetic, unfortunately.\nSo, log K over log J.",
    "start": "4898442",
    "end": "4904278"
  },
  {
    "text": "Now, J^2 is like M,\nroughly. It might be square root of M.\nBut, log J is basically log M.",
    "start": "4904278",
    "end": "4914956"
  },
  {
    "text": "There's some constants there.\nSo, the number of charges here",
    "start": "4914956",
    "end": "4922281"
  },
  {
    "text": "is theta, log K over log M.\nSo, now this is a bit,",
    "start": "4922281",
    "end": "4928299"
  },
  {
    "text": "we haven't seen this in\namortization necessarily, but we just need to count up\ntotal amount of charging.",
    "start": "4928299",
    "end": "4934264"
  },
  {
    "text": "All work gets charged to\nsomebody, except we didn't charge the very initial swapping\nin to everybody.",
    "start": "4934265",
    "end": "4940054"
  },
  {
    "text": "But, every time we do some\nswapping in, we charge it to someone.\nSo, how many times does",
    "start": "4940054",
    "end": "4945075"
  },
  {
    "text": "everything it charged?\nWell, there are N elements. Each gets charged to a one over\nB cost, and the number of times",
    "start": "4945075",
    "end": "4951632"
  },
  {
    "text": "it gets charged is its log K\nover log M. So therefore,\nthe total cost is number of",
    "start": "4951632",
    "end": "4959246"
  },
  {
    "text": "elements times a one over B\ntimes this log thing.",
    "start": "4959246",
    "end": "4964342"
  },
  {
    "text": "OK, it's actually plus K.\nWe forgot about a plus K,",
    "start": "4964342",
    "end": "4969650"
  },
  {
    "text": "but that's just to get started\nin the very beginning,",
    "start": "4969650",
    "end": "4975171"
  },
  {
    "text": "and start on all of the input\nlists. OK, this is an amortization\nanalysis to prove this bound.",
    "start": "4975171",
    "end": "4986000"
  },
  {
    "text": "Sorry, what was N here?\nI assumed that I started out with K cubed elements at the\nbottom.",
    "start": "4986000",
    "end": "4994286"
  },
  {
    "text": "The total number of elements in\nthe bottom was K^3 theta.",
    "start": "4994286",
    "end": "4999682"
  },
  {
    "text": "OK, so I should have written\nK^3 not M. This should be almost the same\nas this, OK, but not quite.",
    "start": "4999682",
    "end": "5008835"
  },
  {
    "text": "This is log based M of K,\nand if you do a little bit of",
    "start": "5008835",
    "end": "5014039"
  },
  {
    "text": "arithmetic, this should be K^3\nover B times log base M over B",
    "start": "5014039",
    "end": "5019820"
  },
  {
    "text": "of K over B plus K.\nThat's what I want to prove.",
    "start": "5019820",
    "end": "5025746"
  },
  {
    "text": "Actually there's a K^3 here\ninstead of a K, but that's just a factor of\nthree.",
    "start": "5025747",
    "end": "5033105"
  },
  {
    "text": "And this follows because we\nassume we are not in the base",
    "start": "5033105",
    "end": "5038600"
  },
  {
    "text": "case.\nSo, K is at least M, which is at least B^2,\nand therefore K over B is omega",
    "start": "5038600",
    "end": "5046252"
  },
  {
    "text": "square root of K.\nOK, so K over B is basically the same as K when you put it in\na log.",
    "start": "5046252",
    "end": "5053045"
  },
  {
    "text": "So here we have log base M.\nI turned it into log base M over B.\nThat's even worse. It doesn't matter.\nAnd, I have log of K.",
    "start": "5053045",
    "end": "5060277"
  },
  {
    "text": "I replaced it with K over B,\nbut K over B is basically square root of K.\nSo in a log,",
    "start": "5060277",
    "end": "5065302"
  },
  {
    "text": "that's just a factor of a half.\nSo that concludes the analysis of the funnel.\nWe get this crazy running time,",
    "start": "5065303",
    "end": "5073654"
  },
  {
    "text": "which is basically sorting\nbound plus a little bit. We plug that into our funnel\nsort, and we get,",
    "start": "5073654",
    "end": "5080817"
  },
  {
    "text": "magically, optimal cache\noblivious sorting just in time. Tuesday is the final.\nThe final is more in the style",
    "start": "5080817",
    "end": "5088809"
  },
  {
    "text": "of quiz one, so not too much\ncreativity, mostly mastery of material.\nIt covers everything.",
    "start": "5088809",
    "end": "5095369"
  },
  {
    "text": "You don't have to worry about\nthe details of funnel sort, but everything else.\nSo it's like quiz one but for",
    "start": "5095369",
    "end": "5103284"
  },
  {
    "text": "the entire class.\nIt's three hours long, and good luck.\nIt's been a pleasure having",
    "start": "5103285",
    "end": "5110766"
  },
  {
    "text": "you, all the students.\nI'm sure Charles agrees, so thanks everyone.\nIt was a lot of fun.",
    "start": "5110766",
    "end": "5116847"
  }
]